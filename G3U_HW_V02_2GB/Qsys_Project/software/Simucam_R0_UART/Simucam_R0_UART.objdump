
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00042b40 memsz 0x00050e08 flags rwx
    LOAD off    0x00044000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00044000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0003cb44  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003fcc  8113cda0  8113cda0  0003dda0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001df4  81140d6c  81140d6c  00041d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000e2c8  81142b60  81142b60  00043b60  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81150e28  81150e28  00044000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00044000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00044000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001ce0  00000000  00000000  00044028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0005d242  00000000  00000000  00045d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00015142  00000000  00000000  000a2f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001e16a  00000000  00000000  000b808c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00007e4c  00000000  00000000  000d61f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000ab7b  00000000  00000000  000de044  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002707d  00000000  00000000  000e8bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0010fc3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000023b0  00000000  00000000  0010fc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0011c565  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0011c56b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0011c577  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0011c578  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0011c579  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0011c57d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0011c581  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0011c585  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  0011c590  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  0011c59a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0011c5a4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0011c5b5  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  0011c5f4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
8113cda0 l    d  .rodata	00000000 .rodata
81140d6c l    d  .rwdata	00000000 .rwdata
81142b60 l    d  .bss	00000000 .bss
81150e28 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100304 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
81142b7c l     O .bss	00000004 viCh1HoldContext
81142b80 l     O .bss	00000004 viCh2HoldContext
81142b84 l     O .bss	00000004 viCh3HoldContext
81142b88 l     O .bss	00000004 viCh4HoldContext
81142b8c l     O .bss	00000004 viCh5HoldContext
81142b90 l     O .bss	00000004 viCh6HoldContext
81142b94 l     O .bss	00000004 viCh7HoldContext
81142b98 l     O .bss	00000004 viCh8HoldContext
81105148 l     F .text	00000054 vFeebWriteReg
8110519c l     F .text	00000050 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
8110574c l     F .text	00000050 uliSpwcReadReg
811056f8 l     F .text	00000054 vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
81142a88 l     O .rwdata	00000001 ucIoValue
8110594c l     F .text	0000007c bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
8110623c l     F .text	0000013c msgdma_write_extended_descriptor
81106378 l     F .text	00000164 msgdma_construct_extended_descriptor
811064dc l     F .text	00000318 msgdma_descriptor_async_transfer
811067f4 l     F .text	000003fc msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81107370 l     F .text	00000054 vRstcWriteReg
811073c4 l     F .text	00000050 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
81142ba0 l     O .bss	00000004 viHoldContext
811086f8 l     F .text	00000058 uliSyncReadReg
8110869c l     F .text	0000005c bSyncWriteReg
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
81142ba6 l     O .bss	00000004 xRAckLocal.4481
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
81142baa l     O .bss	00000004 xSAckLocal.4466
00000000 l    df *ABS*	00000000 parser_comm_task.c
81142d08 l     O .bss	0000004c PreParsedLocal.4550
00000000 l    df *ABS*	00000000 receiver_uart_task.c
81142d54 l     O .bss	0000004c xPreParsedReader.4545
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 stack_monitor_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
8113eedb l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
81140161 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
81140d6c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
81113664 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strnlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8114032e l     O .rodata	00000010 zeroes.4389
8114033e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8114034e l     O .rodata	00000010 zeroes.4404
811182dc l     F .text	000000c4 __sbprintf
8114035e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
81140376 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81119fc4 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8111bb14 l     F .text	00000008 __fp_unlock
8111bb28 l     F .text	000001a4 __sinit.part.1
8111bccc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
811415b8 l     O .rwdata	00000020 lc_ctype_charset
81141598 l     O .rwdata	00000020 lc_message_charset
811415d8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
811403b4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8111eb3c l     F .text	0000006c sulp
811404fc l     O .rodata	00000014 fpi.2737
81140510 l     O .rodata	00000028 tinytens
811404e8 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
81140548 l     O .rodata	00000010 blanks.4332
81140538 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
811221ac l     F .text	00000104 __sprint_r.part.0
81140568 l     O .rodata	00000010 blanks.4348
81140558 l     O .rodata	00000010 zeroes.4349
81123748 l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
81123bfc l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
81127998 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
81127adc l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81127b10 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
81127d94 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_log_macro.o
81127e8c l       .text	00000000 tx_next_char
81127eb4 l       .text	00000000 end_tx
81127e94 l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_lseek.c
81128990 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
81128c4c l     F .text	00000044 alt_get_errno
81128c90 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81128eb8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
81142ad0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81129458 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
81142adc l     O .rwdata	00000004 lockid
81142c50 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
81142ae0 l     O .rwdata	00000004 lockid
81142c58 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
8112af68 l     F .text	00000050 OS_InitMisc
8112afb8 l     F .text	00000074 OS_InitRdyList
8112b13c l     F .text	000000ec OS_InitTCBList
8112ae80 l     F .text	000000e8 OS_InitEventList
8112b02c l     F .text	00000088 OS_InitTaskIdle
8112b0b4 l     F .text	00000088 OS_InitTaskStat
8112b3cc l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112d1e4 l     F .text	000000fc OS_FlagTaskRdy
8112cf94 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
8112ead0 l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
81133500 l     F .text	00000044 OSTmr_Lock
81132fa0 l     F .text	00000074 OSTmr_Alloc
81133544 l     F .text	0000003c OSTmr_Unlock
81133404 l     F .text	000000fc OSTmr_Unlink
81133014 l     F .text	000000a4 OSTmr_Free
811332b4 l     F .text	00000150 OSTmr_Link
8113322c l     F .text	00000088 OSTmr_InitTask
81133580 l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
81133690 l     F .text	0000003c alt_dev_reg
81141854 l     O .rwdata	0000106c jtag_uart_0
811428c0 l     O .rwdata	000000d0 rs232_uart
81142990 l     O .rwdata	00000064 dma_DDR_M1
811429f4 l     O .rwdata	00000064 dma_DDR_M2
81142a58 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81137f20 l     F .text	000002bc altera_avalon_jtag_uart_irq
811381dc l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
811389e0 l     F .text	00000084 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81138d78 l     F .text	000000a4 altera_avalon_uart_irq
81138e1c l     F .text	00000140 altera_avalon_uart_rxirq
81138f5c l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
81139164 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
81139418 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8113969c l     F .text	00000044 alt_get_errno
811396e0 l     F .text	0000009c alt_msgdma_write_standard_descriptor
8113977c l     F .text	00000134 alt_msgdma_write_extended_descriptor
811398b0 l     F .text	0000018c alt_msgdma_irq
81139a3c l     F .text	00000094 alt_msgdma_construct_standard_descriptor
81139ad0 l     F .text	0000015c alt_msgdma_construct_extended_descriptor
81139c2c l     F .text	00000340 alt_msgdma_descriptor_async_transfer
81139f6c l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
8113a674 l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
8113a720 l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8113b8ec l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8113c000 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
81142d00 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81142d04 g     O .bss	00000004 alt_instruction_exception_handler
8110e990 g     F .text	0000004c vFailDeleteInitialization
81142cd4 g     O .bss	00000004 aux_status_register
811432c8 g     O .bss	00001000 vInAckHandlerTask_stk
8113b6a8 g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
811078fc g     F .text	0000004c vSyncInitIrq
8110b278 g     F .text	00000284 vCheckRetransmission128
8111e1c0 g     F .text	0000007c _mprec_log10
81107a78 g     F .text	00000040 bSyncSetMbt
81105b30 g     F .text	00000108 I2C_Read
81142b2e g     O .rwdata	00000002 OSTaskNameSize
811442c8 g     O .bss	00000260 xBuffer64
8111e2b4 g     F .text	0000008c __any_on
8111cc88 g     F .text	0000005c _isatty_r
811403c0 g     O .rodata	00000028 __mprec_tinytens
81128ab0 g     F .text	0000019c alt_main
81113588 g     F .text	000000c8 _puts_r
811049d4 g     F .text	00000058 bFeebCh3IrqFlagBufferEmpty
81142c60 g     O .bss	00000004 OSTmrFreeList
81150d28 g     O .bss	00000100 alt_irq
8111cdf8 g     F .text	00000068 _lseek_r
81110244 g     F .text	00000030 vChangeDefaultAutoResetSync
8112da44 g     F .text	000000d4 OS_MemInit
8110d5e8 g     F .text	0000098c vLoadDefaultETHConf
81108c18 g     F .text	0000014c bCheckInAck64
811324e0 g     F .text	00000068 OSTimeSet
8111becc g     F .text	000000ac __sflags
81126af8 g     F .text	00000088 .hidden __eqdf2
81102aa8 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
811100bc g     F .text	00000034 vLoadDefaultSyncSource
81133b90 g     F .text	000001ac Check_for_Master_Boot_Record
8114c164 g     O .bss	00000010 OSTmrWheelTbl
8113a434 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
81129b48 g     F .text	00000618 OSEventPendMulti
81150e28 g       *ABS*	00000000 __alt_heap_start
8113c638 g     F .text	0000002c OSTaskCreateHook
81137a08 g     F .text	000001c4 alt_up_sd_card_fclose
81142bb4 g     O .bss	00000004 xSemCountBuffer64
811133cc g     F .text	00000044 printf
81142b9d g     O .bss	00000001 SspdConfigControl
81107e94 g     F .text	00000054 bSyncCtrReset
81142b06 g     O .rwdata	00000002 OSMboxEn
811108b8 g     F .text	000000a4 aatoh
8112a1c4 g     F .text	00000054 OSIntEnter
81124868 g     F .text	000000a4 _wcrtomb_r
811048e0 g     F .text	00000044 vFeebCh8IrqFlagClrBufferEmpty
8110e8f8 g     F .text	0000004c vFailReceiverCreate
81104544 g     F .text	00000040 vFeebCh2HandleIrq
81113af0 g     F .text	00000064 __sseek
8111be7c g     F .text	00000010 __sinit
81106cb0 g     F .text	00000044 iMsgdmaExtendedDescriptorAsyncTransfer
81119c44 g     F .text	00000148 __swbuf_r
8110ba50 g     F .text	000002f0 bResourcesInitRTOS
811053bc g     F .text	000000f4 bSpwcGetLinkError
81142b16 g     O .rwdata	00000002 OSQEn
8111cd14 g     F .text	00000084 _setlocale_r
81142a8c g     O .rwdata	00000004 LedsPainelControl
81142dc8 g     O .bss	00000100 cDebugBuffer
8111bcd4 g     F .text	00000070 __sfmoreglue
81122194 g     F .text	00000018 ungetc
81129804 g     F .text	000000d4 __malloc_unlock
81102d98 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
8113c6b8 g     F .text	00000028 OSTaskStatHook
8111012c g     F .text	00000030 vChangeDefaultSyncSource
81142c64 g     O .bss	00000001 OSLockNesting
81142c68 g     O .bss	00000004 OSTmrSemSignal
8110f6a4 g     F .text	000000d8 vNFeeStructureInit
81142bb8 g     O .bss	00000004 xSemCommInit
8110292c g     F .text	00000080 uliXorshift32
8111eba8 g     F .text	00001600 _strtod_r
81142bbc g     O .bss	00000004 xSemCountSenderACK
811109f4 g     F .text	00000448 .hidden __divsf3
81142cf8 g     O .bss	00000004 current_sector_modified
81142b54 g     O .rwdata	00000002 OSDataSize
81142c6c g     O .bss	00000001 OSRunning
81105580 g     F .text	00000178 bSpwcInitCh
81128778 g     F .text	00000064 alt_log_jtag_uart_isr_proc
81144528 g     O .bss	00001000 senderTask_stk
81142bc0 g     O .bss	00000004 fp
81108ad0 g     F .text	00000148 bCheckInAck128
8111d188 g     F .text	0000015c memmove
81145528 g     O .bss	0000045c xSimMebStruct
8113c734 g     F .text	0000002c OSInitHookBegin
81108330 g     F .text	00000074 bSyncCtrCh8OutEnable
81142b4c g     O .rwdata	00000002 OSTmrSize
8111be64 g     F .text	00000018 _cleanup
811104f0 g     F .text	00000040 siCloseFile
8111d2e4 g     F .text	000000b0 _Balloc
811101d0 g     F .text	00000038 vLoadDefaultAutoResetSync
811365e4 g     F .text	000000cc alt_up_sd_card_is_Present
8113a374 g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
81142b68 g     O .bss	00000004 pxDmaM1Dev
81102b40 g     F .text	000000a4 DMA_DISPATCHER_STOP
811338b8 g     F .text	00000054 Save_Modified_Sector
81104b34 g     F .text	00000058 bFeebCh7IrqFlagBufferEmpty
81142c70 g     O .bss	00000004 OSIdleCtr
81142c2c g     O .bss	00000001 alt_log_write_on_flag
8110579c g     F .text	0000003c bEnableIsoDrivers
81126b80 g     F .text	000000dc .hidden __gtdf2
8113c3c8 g     F .text	0000002c altera_nios2_gen2_irq_init
8113c4b0 g       .text	00000000 OSStartTsk
81107bec g     F .text	00000070 bSyncSetNCycles
8112b73c g     F .text	000002dc OS_TCBInit
81142c2f g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
8110fca4 g     F .text	00000068 vInitSimucamBasicHW
81145984 g     O .bss	00001000 vTimeoutCheckerTask_stk
81108248 g     F .text	00000074 bSyncCtrCh6OutEnable
81105eac g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
81142cf0 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
81142c74 g     O .bss	00000002 OSTmrUsed
81142bc4 g     O .bss	00000004 xSemCountBuffer128
81103270 g     F .text	000000f8 TEMP_Read
811045c4 g     F .text	00000040 vFeebCh4HandleIrq
81142b52 g     O .rwdata	00000002 OSTmrWheelTblSize
8110fb74 g     F .text	0000002c cFeeSpwChannelDisable
81142af2 g     O .rwdata	00000002 OSEventSize
81142c76 g     O .bss	00000001 OSPrioHighRdy
81112568 g     F .text	00000064 _fstat_r
8113c664 g     F .text	0000002c OSTaskDelHook
81142c08 g     O .bss	00000004 errno
81108624 g     F .text	0000003c uliSyncGetCtr
81119bd4 g     F .text	0000001c __svfscanf
81113a64 g     F .text	00000008 __seofread
8113c490 g       .text	00000000 OSStartHighRdy
81130f10 g     F .text	000001ec OSTaskCreateExt
8114c138 g     O .bss	00000011 alt_log_write_buf
8110ecb4 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
81120cd8 g     F .text	00001244 ___svfiprintf_internal_r
8110a7b4 g     F .text	00000364 bPreParserV2
8112cac4 g     F .text	00000068 OSFlagPendGetFlagsRdy
81142b32 g     O .rwdata	00000002 OSTaskStatStkSize
8112bc10 g     F .text	00000310 OSFlagAccept
8112f1ec g     F .text	000000c0 OSQFlush
8112ec68 g     F .text	00000148 OSQAccept
81142c40 g     O .bss	00000004 alt_argv
8114aa84 g       *ABS*	00000000 _gp
8110e5c0 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
8112931c g     F .text	0000013c usleep
81136bbc g     F .text	00000384 alt_up_sd_card_fopen
8111035c g     F .text	00000030 bSDcardIsPresent
8110ab18 g     F .text	0000017c vSenderComTask
81136724 g     F .text	000000d8 alt_up_sd_card_find_first
81130d5c g     F .text	000001b4 OSTaskCreate
8110ee54 g     F .text	00000068 vFailSendNack
81142ce4 g     O .bss	00000004 command_argument_register
81130864 g     F .text	000004f8 OSTaskChangePrio
8110f564 g     F .text	00000088 vCouldNotSendTMPusCommand
81142c5c g     O .bss	00000004 alt_heapsem
81106144 g     F .text	00000080 bSetBoardLeds
8112ba18 g     F .text	000001f8 OSDebugInit
811310fc g     F .text	0000034c OSTaskDel
8112db18 g     F .text	000001ac OSMutexAccept
8111015c g     F .text	00000040 vSetTimeCode
8113af1c g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81142bc8 g     O .bss	00000004 xSemCountPreParsed
81141638 g     O .rwdata	00000180 alt_fd_list
81104a84 g     F .text	00000058 bFeebCh5IrqFlagBufferEmpty
811417d4 g     O .rwdata	0000001d alt_log_msg_alt_main
8114c174 g     O .bss	00000370 OSFlagTbl
8110e728 g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
81110014 g     F .text	0000003c vLoadDefaultRTValue
8112ac48 g     F .text	000000c0 OS_EventTaskRemove
81142c2e g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
81135e38 g     F .text	00000134 find_first_empty_record_in_root_directory
8113baac g     F .text	00000098 alt_find_dev
811130b4 g     F .text	00000150 memcpy
81124534 g     F .text	00000264 __hexnan
81146984 g     O .bss	00000160 xBuffer32
81142b1c g     O .rwdata	00000002 OSRdyTblSize
8114c4e4 g     O .bss	000001a0 OSTmrTbl
8111bb1c g     F .text	0000000c _cleanup_r
811276d4 g     F .text	000000e4 .hidden __floatsidf
8110d210 g     F .text	000001a8 vSendPusTM64
811079e8 g     F .text	0000004c ucSyncStatusErrorCode
8110fc70 g     F .text	00000034 cFeeRMAPLogDisable
811095ac g     F .text	000009ac vParserCommTask
8113c0cc g     F .text	00000084 alt_io_redirect
8110fc04 g     F .text	00000034 cFeeRMAPEchoingDisable
81126c5c g     F .text	000000f4 .hidden __ltdf2
81104d64 g     F .text	000000d4 bFeebSetIrqControl
8110f3c4 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
81142bcc g     O .bss	00000004 xMutexReceivedACK
81103bec g     F .text	000000b0 bSdmaInitM2Dma
8113cda0 g       *ABS*	00000000 __DTOR_END__
8113b3a4 g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
8113b6ec g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81107f3c g     F .text	00000054 bSyncCtrErrInj
8113b64c g     F .text	0000005c alt_msgdma_register_callback
8110df74 g     F .text	00000330 vShowEthConfig
8110fd0c g     F .text	00000030 bLogWriteSDCard
8110ea44 g     F .text	00000068 vFailSetCountSemaphorexBuffer64
8110a070 g     F .text	000000a0 bTrySendSemaphoreCommInit
81113650 g     F .text	00000014 puts
8113c7dc g     F .text	000000a4 alt_exception_cause_generated_bad_addr
811078bc g     F .text	00000040 vSyncHandleIrq
811298d8 g     F .text	00000128 OSEventNameGet
81104748 g     F .text	00000044 vFeebCh2IrqFlagClrBufferEmpty
81142b00 g     O .rwdata	00000002 OSFlagMax
8111cf14 g     F .text	000000e0 mbrtowc
81135a30 g     F .text	000001b4 find_first_empty_cluster
811081d4 g     F .text	00000074 bSyncCtrCh5OutEnable
81142ba4 g     O .bss	00000001 vucN
8111e914 g     F .text	00000074 __fpclassifyd
81107948 g     F .text	00000054 bSyncStatusExtnIrq
81119bf0 g     F .text	00000054 _vfscanf_r
8112e198 g     F .text	000005a4 OSMutexPend
8111e114 g     F .text	000000ac __ratio
81136520 g     F .text	000000c4 alt_up_sd_card_open_dev
8110f5ec g     F .text	00000068 vWarnCouldNotgetMutexRetrans128
8112a218 g     F .text	00000100 OSIntExit
81107ab8 g     F .text	00000040 bSyncSetBt
8112372c g     F .text	0000001c __vfiprintf_internal
81142b3a g     O .rwdata	00000002 OSTCBSize
81104704 g     F .text	00000044 vFeebCh1IrqFlagClrBufferEmpty
81142c77 g     O .bss	00000001 OSPrioCur
81138450 g     F .text	000002c4 altera_avalon_jtag_uart_read
8113abe4 g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
81113394 g     F .text	00000038 _printf_r
8112569c g     F .text	00000064 .hidden __udivsi3
81127dd8 g     F .text	000000ac isatty
81142b9c g     O .bss	00000001 LedsBoardControl
81142bd0 g     O .bss	00000004 xSemCountReceivedACK
81142b20 g     O .rwdata	00000002 OSStkWidth
8111cce4 g     F .text	00000030 iswspace
81140410 g     O .rodata	000000c8 __mprec_tens
81142b14 g     O .rwdata	00000002 OSPtrSize
8111cd98 g     F .text	0000000c __locale_charset
811080ec g     F .text	00000074 bSyncCtrCh3OutEnable
8112588c g     F .text	000000c8 .hidden __lesf2
81142af4 g     O .rwdata	00000002 OSEventTblSize
81124a68 g     F .text	0000007c .hidden __fixunsdfsi
8113c3f4 g       .text	00000000 OSCtxSw
81105c38 g     F .text	00000160 I2C_MultipleRead
8112891c g     F .text	00000074 alt_log_system_clock
81142c14 g     O .bss	00000004 __malloc_top_pad
81142c78 g     O .bss	00000004 OSTCBList
81132f60 g     F .text	00000040 OSTmrSignal
81142c24 g     O .bss	00000004 alt_fd_list_lock
81120804 g     F .text	0000001c strtoul
81142aa4 g     O .rwdata	00000004 __mb_cur_max
8111cdc8 g     F .text	0000000c _localeconv_r
81120820 g     F .text	000002e0 _strtoull_r
81107300 g     F .text	00000070 vRstcHoldDeviceReset
8111d708 g     F .text	00000044 __i2b
8111c62c g     F .text	000004c4 __sfvwrite_r
81134d10 g     F .text	000000c0 get_dir_divider_location
8114c684 g     O .bss	00000c30 OSMemTbl
81142c7c g     O .bss	00000001 OSTickStepState
8112852c g     F .text	00000060 alt_log_printf_proc
81146ae4 g     O .bss	00001000 vReceiverUartTask_stk
8111385c g     F .text	0000005c _sbrk_r
81142bd4 g     O .bss	00000004 xSemTimeoutChecker
811349d0 g     F .text	000000cc filename_to_upper_case
81142c30 g     O .bss	00000001 alt_log_jtag_uart_startup_info_on_flag
81142b18 g     O .rwdata	00000002 OSQMax
81136f40 g     F .text	00000090 alt_up_sd_card_set_attributes
8112de94 g     F .text	00000304 OSMutexDel
8114d2b4 g     O .bss	00000800 OSTaskStatStk
8111038c g     F .text	00000030 bSDcardFAT16Check
8112d660 g     F .text	000000f8 OSMemNameGet
8110e414 g     F .text	00000060 vFailCreateMutexSResources
81133d3c g     F .text	00000284 Read_File_Record_At_Offset
81142af8 g     O .rwdata	00000002 OSFlagEn
8111e340 g     F .text	00000068 _read_r
81142b3e g     O .rwdata	00000002 OSTimeTickHookEn
8112f6b4 g     F .text	00000170 OSQPost
8112d2e0 g     F .text	000000ac OS_FlagUnlink
81102490 g     F .text	0000049c bDdr2MemoryRandomReadTest
81142ac0 g     O .rwdata	00000004 alt_max_fd
8110f170 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
8112b284 g     F .text	00000070 OS_MemCopy
8112b2f4 g     F .text	000000d8 OS_Sched
811355b4 g     F .text	0000047c find_file_in_directory
811238d8 g     F .text	000000f8 _fclose_r
8112d568 g     F .text	000000f8 OSMemGet
81131740 g     F .text	000001bc OSTaskNameSet
8111bae4 g     F .text	00000030 fflush
81142c10 g     O .bss	00000004 __malloc_max_sbrked_mem
81142c80 g     O .bss	00000004 OSCtxSwCtr
8113c6e0 g     F .text	00000054 OSTimeTickHook
81147ae4 g     O .bss	00001000 vOutAckHandlerTask_stk
81127c0c g     F .text	00000188 alt_irq_register
81142b02 g     O .rwdata	00000002 OSFlagNameSize
81111b84 g     F .text	00000118 .hidden __extendsfdf2
8112ad08 g     F .text	00000108 OS_EventTaskRemoveMulti
811366b0 g     F .text	00000074 alt_up_sd_card_is_FAT16
811059c8 g     F .text	00000088 I2C_TestAdress
81125954 g     F .text	000008b4 .hidden __adddf3
8114c14c g     O .bss	00000018 alt_log_jtag_uart_alarm_1
81125758 g     F .text	00000078 .hidden __nesf2
8112aaf0 g     F .text	00000158 OS_EventTaskWaitMulti
8111deac g     F .text	00000114 __b2d
8113a91c g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
81142b1a g     O .rwdata	00000002 OSQSize
81125064 g     F .text	00000540 .hidden __umoddi3
811289d4 g     F .text	000000dc lseek
811301a4 g     F .text	00000214 OSSemPend
811054b0 g     F .text	000000d0 bSpwcGetLinkStatus
81105014 g     F .text	00000088 bFeebGetWindowing
81142a94 g     O .rwdata	00000004 _global_impure_ptr
81107870 g     F .text	0000004c bSSDisplayUpdate
81135074 g     F .text	00000540 get_home_directory_cluster_for_file
8111e3a8 g     F .text	0000056c _realloc_r
81142b04 g     O .rwdata	00000002 OSLowestPrio
81150e28 g       *ABS*	00000000 __bss_end
8113bf08 g     F .text	000000f8 alt_iic_isr_register
8113c7b0 g     F .text	0000002c OSTCBInitHook
81142b4a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
8112920c g     F .text	00000110 alt_tick
8110e6c0 g     F .text	00000068 vFailGetMutexSenderTask
81107220 g     F .text	0000006c vRstcSimucamReset
81140578 g     O .rodata	00000100 __hexdig
8113b498 g     F .text	000001b4 alt_msgdma_init
81124ae4 g     F .text	00000580 .hidden __udivdi3
8110a49c g     F .text	0000017c setPreAckSenderFreePos
81123b50 g     F .text	00000024 _fputwc_r
81142aec g     O .rwdata	00000002 OSEventEn
811403e8 g     O .rodata	00000028 __mprec_bigtens
8111d4e4 g     F .text	0000010c __s2b
81142b46 g     O .rwdata	00000002 OSTmrCfgNameSize
81107b78 g     F .text	00000074 bSyncSetPolarity
8110b4fc g     F .text	0000028c vCheckRetransmission64
811277b8 g     F .text	000000b0 .hidden __floatunsidf
81142c34 g     O .bss	00000004 alt_system_clock_in_sec
81128724 g     F .text	00000054 alt_log_jtag_uart_startup_info
8110ec4c g     F .text	00000068 vFailFoundBufferRetransmission
8111dbe4 g     F .text	00000060 __mcmp
81142cfc g     O .bss	00000004 current_sector_index
81138c10 g     F .text	00000168 altera_avalon_uart_init
8113b774 g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
811040cc g     F .text	00000438 bSdmaDmaM2Transfer
8111019c g     F .text	00000034 vResetTimeCode
8110fb48 g     F .text	0000002c cFeeSpwChannelEnable
8111be9c g     F .text	00000018 __fp_lock_all
8113beb4 g     F .text	00000054 alt_ic_irq_enabled
81105a50 g     F .text	000000e0 I2C_Write
81142c84 g     O .bss	00000002 OSTmrFree
8112d0fc g     F .text	000000e8 OS_FlagInit
81129168 g     F .text	000000a4 alt_alarm_stop
81113ec4 g     F .text	0000001c strtol
81142c2d g     O .bss	00000001 alt_log_sys_clk_on_flag
8113270c g     F .text	00000140 OSTmrDel
81133aa8 g     F .text	000000e8 mark_cluster
81142b28 g     O .rwdata	00000002 OSTaskIdleStkSize
81142c28 g     O .bss	00000004 alt_irq_active
8112fdc4 g     F .text	000000b8 OSSemAccept
81112100 g     F .text	0000044c _fseeko_r
81113c40 g     F .text	00000044 strnlen
8112d874 g     F .text	000000e0 OSMemPut
8112d38c g     F .text	000001dc OSMemCreate
81142c88 g     O .bss	00000004 OSIdleCtrMax
8110d3b8 g     F .text	000001a8 vSendPusTM128
81100104 g     F .exceptions	000000dc alt_irq_handler
81127f74 g     F .text	000005b8 alt_log_private_printf
81141610 g     O .rwdata	00000028 alt_dev_null
8113a52c g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
81107b38 g     F .text	00000040 bSyncSetOst
81142b3c g     O .rwdata	00000002 OSTicksPerSec
811417b8 g     O .rwdata	00000019 alt_log_msg_bss
81135f6c g     F .text	00000194 convert_filename_to_name_extension
8110ac94 g     F .text	00000030 vSimMebTask
81105d98 g     F .text	00000094 i2c_start
8113c3f4 g       .text	00000000 OSIntCtxSw
81108160 g     F .text	00000074 bSyncCtrCh4OutEnable
8113b310 g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
81127ab4 g     F .text	00000028 alt_dcache_flush_all
8111d5f0 g     F .text	00000068 __hi0bits
81110050 g     F .text	0000003c vChangeRTValue
81142cd0 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110b084 g     F .text	000001f4 vCheck
8110f654 g     F .text	00000050 vNFeeNotInUse
81127654 g     F .text	00000080 .hidden __fixdfsi
81148ae4 g     O .bss	00001000 vInitialTask_stk
81142bd8 g     O .bss	00000002 usiIdCMD
81107e40 g     F .text	00000054 bSyncCtrStart
81135be4 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
811201a8 g     F .text	00000018 strtod
81142c8c g     O .bss	00000004 OSTCBFreeList
811303b8 g     F .text	00000174 OSSemPendAbort
8110e860 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110f0d8 g     F .text	0000004c vFailCreateTimerRetransmisison
8110ebe4 g     F .text	00000068 vFailGetCountSemaphorexBuffer32
8110c248 g     F .text	00000360 bSendUART128v2
8110fdd4 g     F .text	0000019c vSimucamStructureInit
81142ab8 g     O .rwdata	00000008 alt_dev_list
81112030 g     F .text	0000004c _fputc_r
8112949c g     F .text	0000010c write
81113410 g     F .text	000000a8 _putc_r
81142cf4 g     O .bss	00000004 device_pointer
81142b40 g     O .rwdata	00000002 OSVersionNbr
811257d0 g     F .text	000000bc .hidden __gtsf2
81109f58 g     F .text	00000118 getPreParsedPacket
81127b54 g     F .text	000000b8 fstat
811102a8 g     F .text	00000040 vChangeIdNFEEMaster
81112004 g     F .text	0000002c fprintf
8110fc38 g     F .text	00000038 cFeeRMAPLogEnable
81102c88 g     F .text	00000110 DMA_SINGLE_TRANSFER
81104adc g     F .text	00000058 bFeebCh6IrqFlagBufferEmpty
8110f224 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
81110598 g     F .text	00000058 _reg_write
811102e8 g     F .text	00000034 vChangeDefaultIdNFEEMaster
81126c5c g     F .text	000000f4 .hidden __ledf2
81149ae4 g     O .bss	00001000 vStackMonitor_stk
8110f4fc g     F .text	00000068 vCouldNotSendLog
8113298c g     F .text	000001b8 OSTmrRemainGet
81142ae8 g     O .rwdata	00000004 OSEndiannessTest
81107414 g     F .text	00000058 v_spi_start
8111d94c g     F .text	00000148 __pow5mult
811222c8 g     F .text	00001464 ___vfiprintf_internal_r
81142c20 g     O .bss	00000004 __nlocale_changed
81125700 g     F .text	00000058 .hidden __umodsi3
81107f90 g     F .text	00000074 bSyncCtrSyncOutEnable
811103bc g     F .text	000000f8 bInitializeSDCard
8110eff4 g     F .text	0000004c vFailParserCommTaskCreate
811138fc g     F .text	00000038 _scanf_r
8110f08c g     F .text	0000004c vFailOutAckHandlerTaskCreate
81142afa g     O .rwdata	00000002 OSFlagGrpSize
8114aae4 g     O .bss	00000058 xInUseRetrans
8113a97c g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81132b44 g     F .text	000000ec OSTmrStateGet
81150e28 g       *ABS*	00000000 end
81104644 g     F .text	00000040 vFeebCh6HandleIrq
8110ed84 g     F .text	00000068 vNoContentInPreParsedBuffer
8111254c g     F .text	0000001c fseeko
81111eb4 g     F .text	0000000c _atoi_r
8113945c g     F .text	00000240 altera_avalon_uart_write
81127eb8 g     F .text	00000054 alt_log_txchar
811120e4 g     F .text	0000001c fseek
8110c1b8 g     F .text	00000090 vCCDChangeValues
81137d50 g     F .text	000001d0 altera_avalon_jtag_uart_init
8112b584 g     F .text	000000e4 OS_TaskStat
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110e4c0 g     F .text	0000004c vFailTestCriticasParts
8113cda0 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81102020 g     F .text	00000470 bDdr2MemoryRandomWriteTest
81138a64 g     F .text	00000084 alt_avalon_timer_sc_init
81104f6c g     F .text	000000a8 bFeebSetWindowing
81138b50 g     F .text	00000068 altera_avalon_uart_write_fd
81111e44 g     F .text	00000064 .hidden __clzsi2
81138bb8 g     F .text	00000058 altera_avalon_uart_close_fd
81138714 g     F .text	000002cc altera_avalon_jtag_uart_write
811330b8 g     F .text	00000174 OSTmr_Init
8114ab3c g     O .bss	00000348 xBuffer128
8111be8c g     F .text	00000004 __sfp_lock_acquire
81103368 g     F .text	00000048 sense_log_temp
8111d0a4 g     F .text	000000e4 memchr
8112b228 g     F .text	0000005c OS_MemClr
811160c0 g     F .text	00002200 ___vfprintf_internal_r
8113c4d4 g     F .text	00000164 OSTaskStkInit
81113934 g     F .text	00000060 _sprintf_r
81142bda g     O .bss	00000001 SemCount32
8111c314 g     F .text	00000318 _free_r
8113c150 g     F .text	00000234 alt_printf
8110d1c0 g     F .text	00000050 vTimeoutCheck
81110648 g     F .text	000001fc _print_codec_status
8111cda4 g     F .text	00000010 __locale_mb_cur_max
8112a838 g     F .text	000001a0 OS_EventTaskRdy
81102be4 g     F .text	000000a4 DMA_DISPATCHER_RESET
8113cb5c g     F .text	00000188 __call_exitprocs
81142c90 g     O .bss	00000001 OSCPUUsage
81142c1c g     O .bss	00000004 __mlocale_changed
81107ee8 g     F .text	00000054 bSyncCtrOneShot
81142a9c g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	000000ac _start
81108660 g     F .text	0000003c uliSyncReadStatus
81142c48 g     O .bss	00000004 _alt_tick_rate
8112f2ac g     F .text	00000294 OSQPend
811202c8 g     F .text	000002e8 _strtoll_r
81132030 g     F .text	0000010c OSTimeDly
8111da94 g     F .text	00000150 __lshift
81109244 g     F .text	00000368 vOutAckHandlerTask
8113a3d4 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
81142c4c g     O .bss	00000004 _alt_nticks
81128efc g     F .text	00000104 read
8113370c g     F .text	000000f0 alt_sys_init
81111240 g     F .text	0000012c .hidden __floatsisf
81120b00 g     F .text	000001d8 __ssprint_r
8111332c g     F .text	00000068 _open_r
81110570 g     F .text	00000028 bTestSimucamCriticalHW
8110509c g     F .text	000000ac bFeebGetBuffersStatus
8110e2a4 g     F .text	000000a4 ucCrc8
8110081c g     F .text	00000cb4 bDdr2EepromDump
8113ca3c g     F .text	00000120 __register_exitproc
81142c91 g     O .bss	00000001 OSTaskCtr
81127e84 g       .text	00000000 tx_log_str
8110d170 g     F .text	00000050 siPosStr
81124798 g     F .text	000000d0 strncmp
8113213c g     F .text	00000164 OSTimeDlyHMSM
8111d74c g     F .text	00000200 __multiply
811382e8 g     F .text	00000070 altera_avalon_jtag_uart_close
811075e4 g     F .text	00000058 v_spi_end
81110530 g     F .text	00000040 cGetNextChar
8113c950 g     F .text	000000ec strncpy
81142da0 g     O .bss	00000028 __malloc_current_mallinfo
81142aee g     O .rwdata	00000002 OSEventMax
81125758 g     F .text	00000078 .hidden __eqsf2
8111dfc0 g     F .text	00000154 __d2b
8113052c g     F .text	00000118 OSSemPost
811047d0 g     F .text	00000044 vFeebCh4IrqFlagClrBufferEmpty
8111008c g     F .text	00000030 vChangeDefaultRTValue
811046c4 g     F .text	00000040 vFeebCh8HandleIrq
81142ccc g     O .bss	00000004 initialized
8110d020 g     F .text	00000100 vSendLog
8112a3ac g     F .text	000000e4 OSSchedUnlock
8110763c g     F .text	00000164 RTCC_SPI_R_MAC
81142acc g     O .rwdata	00000004 alt_log_boot_on_flag
81137bcc g     F .text	00000068 altera_avalon_jtag_uart_read_fd
811205b0 g     F .text	00000254 _strtoul_r
8113bc54 g     F .text	000000e4 alt_get_fd
81142c94 g     O .bss	00000004 OSMemFreeList
8112a508 g     F .text	000000b8 OSStatInit
811029ac g     F .text	00000064 DMA_OPEN_DEVICE
811507c0 g     O .bss	00000014 search_data
811051ec g     F .text	00000100 bSpwcSetLink
81127868 g     F .text	00000130 alt_busy_sleep
8112cec8 g     F .text	000000cc OSFlagQuery
81108004 g     F .text	00000074 bSyncCtrCh1OutEnable
81142b24 g     O .rwdata	00000002 OSTaskCreateExtEn
81110844 g     F .text	00000074 _split_codec_status
81119f68 g     F .text	0000005c _close_r
8110edec g     F .text	00000068 vCouldNotSendEthConfUART
81108eb0 g     F .text	00000394 vInitialTask
8112862c g     F .text	000000f8 alt_log_jtag_uart_print_control_reg
8113a8bc g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8113c8d4 g     F .text	0000007c memcmp
8112a810 g     F .text	00000028 OS_Dummy
81137c9c g     F .text	00000058 altera_avalon_jtag_uart_close_fd
81150e28 g       *ABS*	00000000 __alt_stack_base
81137cf4 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
81104814 g     F .text	00000044 vFeebCh5IrqFlagClrBufferEmpty
811125cc g     F .text	000000d4 _fwrite_r
8113a9dc g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81104924 g     F .text	00000058 bFeebCh1IrqFlagBufferEmpty
81119e0c g     F .text	0000015c __swsetup_r
8114dab4 g     O .bss	000001e0 OSQTbl
8114c11c g     O .bss	0000001c xConfEth
81126208 g     F .text	000008f0 .hidden __divdf3
811100f0 g     F .text	0000003c vChangeSyncSource
8111bd44 g     F .text	00000120 __sfp
811507d4 g     O .bss	00000054 boot_sector_data
81102af4 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111e23c g     F .text	00000078 __copybits
81141190 g     O .rwdata	00000408 __malloc_av_
8111be98 g     F .text	00000004 __sinit_lock_release
81142b60 g     O .bss	00000004 uliInitialState
81105e2c g     F .text	00000080 i2c_stop
8111095c g     F .text	00000064 Verif_Error
811109c0 g     F .text	00000034 toInt
8110e60c g     F .text	0000004c vFailSendPreAckSenderSemaphore
81142c98 g     O .bss	00000004 OSTCBHighRdy
81111464 g     F .text	00000720 .hidden __muldf3
81113a08 g     F .text	0000005c __sread
8111c1ac g     F .text	0000003c fread
81142c9c g     O .bss	00000004 OSQFreeList
8113bb44 g     F .text	00000110 alt_find_file
8113b930 g     F .text	000000ac alt_dev_llist_insert
811296dc g     F .text	00000128 __malloc_lock
81111fd4 g     F .text	00000030 _fprintf_r
8112906c g     F .text	000000fc sbrk
8110fac4 g     F .text	0000002c vFeeSpwRMAPLoadDefault
8110eb7c g     F .text	00000068 vFailGetCountSemaphorexBuffer64
81113ee0 g     F .text	000021e0 ___svfprintf_internal_r
8110d560 g     F .text	00000088 vTMPusTestConnection
81129a00 g     F .text	00000148 OSEventNameSet
8111ba80 g     F .text	00000064 _fflush_r
8112380c g     F .text	000000cc _calloc_r
81142ca0 g     O .bss	00000001 OSRdyGrp
81107a34 g     F .text	00000044 ucSyncStatusCycleNumber
81132c30 g     F .text	00000148 OSTmrStart
81104604 g     F .text	00000040 vFeebCh5HandleIrq
81111fbc g     F .text	00000018 fopen
81102a10 g     F .text	0000004c DMA_CONFIG
81142b60 g       *ABS*	00000000 __bss_start
81113204 g     F .text	00000128 memset
8110a360 g     F .text	0000013c setPreParsedFreePos
8113b438 g     F .text	00000060 alt_msgdma_open
8110bfd4 g     F .text	0000017c main
8110e790 g     F .text	00000068 vFailGetMutexReceiverTask
8110ffa8 g     F .text	0000003c vChangeEPValue
81142c44 g     O .bss	00000004 alt_envp
81142c0c g     O .bss	00000004 __malloc_max_total_mem
8113acdc g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
8110e348 g     F .text	0000005c ucCrc8wInit
8110f124 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81137c34 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81102fa8 g     F .text	000002c8 POWER_Read
81105fe4 g     F .text	00000160 i2c_read
81119d8c g     F .text	00000018 __swbuf
811408c4 g     O .rodata	00000100 OSUnMapTbl
8112588c g     F .text	000000c8 .hidden __ltsf2
81136fd0 g     F .text	00000090 alt_up_sd_card_get_attributes
8111bf78 g     F .text	00000234 _fread_r
8110e658 g     F .text	00000068 vFailGetCountSemaphoreSenderTask
811057d8 g     F .text	0000003c bDisableIsoDrivers
81142b1e g     O .rwdata	00000002 OSSemEn
811337fc g     F .text	000000bc Write_Sector_Data
811373e0 g     F .text	00000628 alt_up_sd_card_write
8112cb2c g     F .text	0000039c OSFlagPost
81113b54 g     F .text	00000008 __sclose
8110f42c g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
811239d0 g     F .text	00000014 fclose
8112a9d8 g     F .text	00000118 OS_EventTaskWait
8110f2f4 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
81113c84 g     F .text	00000240 _strtol_r
81111c9c g     F .text	000001a8 .hidden __truncdfsf2
8112b668 g     F .text	000000d4 OS_TaskStatStkChk
81131448 g     F .text	00000158 OSTaskDelReq
8111a1cc g     F .text	00001690 _dtoa_r
8113aff8 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
811128a0 g     F .text	00000814 _malloc_r
811249d4 g     F .text	00000030 __ascii_wctomb
8112dcc4 g     F .text	000001d0 OSMutexCreate
8110f28c g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
81108d64 g     F .text	0000014c bCheckInAck32
81142ac4 g     O .rwdata	00000004 alt_errno
8113ab24 g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8112a490 g     F .text	00000078 OSStart
811052ec g     F .text	000000d0 bSpwcGetLink
81106d38 g     F .text	000004e8 POWER_SPI_RW
81121f1c g     F .text	000000dc __submore
8112858c g     F .text	000000a0 altera_avalon_jtag_uart_report_log
81129674 g     F .text	00000068 __env_unlock
8111caf0 g     F .text	000000cc _fwalk
811318fc g     F .text	000001dc OSTaskResume
8112d954 g     F .text	000000f0 OSMemQuery
81142b30 g     O .rwdata	00000002 OSTaskStatEn
81150e28 g       *ABS*	00000000 __alt_stack_limit
81142b78 g     O .bss	00000004 ECommSpwCh
81110208 g     F .text	0000003c vChangeAutoResetSync
8111d040 g     F .text	00000064 _mbtowc_r
81108780 g     F .text	00000350 vInAckHandlerTaskV2
81142b0a g     O .rwdata	00000002 OSMemMax
8112f824 g     F .text	00000178 OSQPostFront
811134b8 g     F .text	000000d0 putc
811255a4 g     F .text	00000084 .hidden __divsi3
81142ca1 g     O .bss	00000006 OSRdyTbl
81142ae4 g     O .rwdata	00000002 OSDebugEn
81141828 g     O .rwdata	0000002a alt_log_msg_cache
8111c1e8 g     F .text	0000012c _malloc_trim_r
8113cda0 g       *ABS*	00000000 __CTOR_END__
81142c00 g     O .bss	00000008 xSdHandle
81110e3c g     F .text	00000404 .hidden __mulsf3
81142afc g     O .rwdata	00000002 OSFlagNodeSize
81142b64 g     O .bss	00000004 pnt_memory
8111031c g     F .text	00000040 vSyncReset
81107af8 g     F .text	00000040 bSyncSetPer
81100308 g     F .text	00000514 bDdr2EepromTest
81142cd8 g     O .bss	00000004 status_register
81142b44 g     O .rwdata	00000002 OSTmrCfgMax
8110848c g     F .text	00000074 bSyncIrqFlagClrError
8110eebc g     F .text	00000068 vFailSetPreAckSenderBuffer
8111ea60 g     F .text	000000dc strcmp
81142ce0 g     O .bss	00000004 command_register
8112edb0 g     F .text	000001b4 OSQCreate
811315a0 g     F .text	000001a0 OSTaskNameGet
8114ae84 g     O .bss	00000018 xReceivedACK
8112f99c g     F .text	00000214 OSQPostOpt
8112a5c0 g     F .text	00000228 OSTimeTick
81142b2c g     O .rwdata	00000002 OSTaskMax
8113cda0 g       *ABS*	00000000 __DTOR_LIST__
8112fe7c g     F .text	000000e0 OSSemCreate
81142b50 g     O .rwdata	00000002 OSTmrWheelSize
811105f0 g     F .text	00000058 _reg_read
8112e95c g     F .text	00000174 OSMutexQuery
81126af8 g     F .text	00000088 .hidden __nedf2
81142b26 g     O .rwdata	00000002 OSTaskDelEn
8110ff70 g     F .text	00000038 vLoadDefaultEPValue
811082bc g     F .text	00000074 bSyncCtrCh7OutEnable
81130644 g     F .text	00000118 OSSemQuery
8112ef64 g     F .text	00000288 OSQDel
8112f540 g     F .text	00000174 OSQPendAbort
81142bdc g     O .bss	00000004 xMutexPreParsed
811336cc g     F .text	00000040 alt_irq_init
81129000 g     F .text	0000006c alt_release_fd
811339ec g     F .text	000000bc get_cluster_flag
81108500 g     F .text	00000074 bSyncIrqFlagClrBlank
8113b730 g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
811417f4 g     O .rwdata	00000031 alt_log_msg_stackpointer
81113994 g     F .text	00000074 sprintf
8113ff60 g     O .rodata	00000100 .hidden __clz_tab
81133fc0 g     F .text	00000294 Write_File_Record_At_Offset
81101590 g     F .text	00000580 bDdr2MemoryWriteTest
8110e7f8 g     F .text	00000068 vFailGetMutexTxUARTSenderTask
81142c18 g     O .bss	00000004 _PathLocale
811085cc g     F .text	00000058 bSyncIrqFlagBlank
81106bf0 g     F .text	000000c0 iMsgdmaConstructExtendedMmToMmDescriptor
81132d78 g     F .text	000001e8 OSTmrStop
8110d120 g     F .text	00000050 usiGetIdCMD
811201c0 g     F .text	00000108 strtof
8113c880 g     F .text	00000014 atexit
81104584 g     F .text	00000040 vFeebCh3HandleIrq
811257d0 g     F .text	000000bc .hidden __gesf2
81113b5c g     F .text	0000004c strcspn
81119da4 g     F .text	00000068 _write_r
8110728c g     F .text	00000074 vRstcReleaseDeviceReset
8110f040 g     F .text	0000004c vFailInAckHandlerTaskCreate
8112a318 g     F .text	00000094 OSSchedLock
8111cdd4 g     F .text	00000018 setlocale
8113aa84 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8114dc94 g     O .bss	00000800 OSTmrTaskStk
811138b8 g     F .text	00000044 scanf
8112bf20 g     F .text	00000110 OSFlagCreate
81134254 g     F .text	00000688 Check_for_DOS_FAT
81136100 g     F .text	000002d0 create_file
8111ea58 g     F .text	00000008 nanf
81142a98 g     O .rwdata	00000004 _impure_ptr
81142cdc g     O .bss	00000004 CSD_register_w0
81142c3c g     O .bss	00000004 alt_argc
8110eb14 g     F .text	00000068 vFailGetCountSemaphorexBuffer128
8111b85c g     F .text	00000224 __sflush_r
8111ce60 g     F .text	000000b4 _mbrtowc_r
8113ba44 g     F .text	00000068 _do_dtors
8111cdc0 g     F .text	00000008 __locale_cjk_lang
811033b0 g     F .text	0000078c sense_log
81142b70 g     O .bss	00000004 ESdmaBufferSide
81142af6 g     O .rwdata	00000002 OSEventMultiEn
811120e0 g     F .text	00000004 _fseek_r
8114ae9c g     O .bss	00001000 vParserCommTask_stk
8110e3a4 g     F .text	00000070 printErrorTask
8110ffe4 g     F .text	00000030 vChangeDefaultEPValue
8110b788 g     F .text	000002c8 vCheckRetransmission32
81132548 g     F .text	000001c4 OSTmrCreate
8110acc4 g     F .text	00000354 vStackMonitor
81113680 g     F .text	000001dc __srefill_r
81105814 g     F .text	0000003c bEnableLvdsBoard
81142be0 g     O .bss	00000004 xMutexBuffer32
8112c030 g     F .text	00000250 OSFlagDel
81142ca8 g     O .bss	00000004 OSEventFreeList
8110588c g     F .text	000000c0 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8111cff4 g     F .text	0000004c __ascii_mbtowc
81107dc8 g     F .text	00000078 bSyncCtrExtnIrq
8111de48 g     F .text	00000064 __ulp
8112c504 g     F .text	000005c0 OSFlagPend
81142b42 g     O .rwdata	00000002 OSTmrEn
8111beb4 g     F .text	00000018 __fp_unlock_all
8111207c g     F .text	00000064 fputc
8110c910 g     F .text	00000368 bSendUART32v2
8110a618 g     F .text	0000019c setPreAckReceiverFreePos
81107d88 g     F .text	00000040 bSyncErrInj
81142ab0 g     O .rwdata	00000008 alt_fs_list
81134a9c g     F .text	00000274 check_file_name_for_FAT16_compliance
8113284c g     F .text	00000140 OSTmrNameGet
81142ec8 g     O .bss	00000400 xSZData
8112b448 g     F .text	0000007c OS_StrCopy
81142ce8 g     O .bss	00000004 buffer_memory
8110ed1c g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
8110fd3c g     F .text	00000098 vLogWriteNUC
81142b0c g     O .rwdata	00000002 OSMemNameSize
81103b3c g     F .text	000000b0 bSdmaInitM1Dma
81108418 g     F .text	00000074 bSyncIrqEnableBlank
8113c760 g     F .text	00000028 OSInitHookEnd
8110f77c g     F .text	00000348 vUpdateMemMapFEE
8110ef8c g     F .text	00000068 vFailSetPreAckReceiverBuffer
81104b8c g     F .text	00000058 bFeebCh8IrqFlagBufferEmpty
81142b38 g     O .rwdata	00000002 OSTCBPrioTblMax
8111cdec g     F .text	0000000c localeconv
81142be4 g     O .bss	00000004 xTimerRetransmission
8110a110 g     F .text	00000250 vReceiverUartTask
81142c38 g     O .bss	00000004 alt_log_sys_clk_count
81142b34 g     O .rwdata	00000002 OSTaskStatStkChkEn
811287dc g     F .text	00000140 alt_log_write
81142be8 g     O .bss	00000004 xMutexBuffer128
81104504 g     F .text	00000040 vFeebCh1HandleIrq
81104684 g     F .text	00000040 vFeebCh7HandleIrq
8113bd38 g     F .text	00000058 alt_ic_isr_register
81142b08 g     O .rwdata	00000002 OSMemEn
81142a84 g     O .rwdata	00000004 alt_stack_limit_value
811126a0 g     F .text	0000003c fwrite
81142cec g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
81142b12 g     O .rwdata	00000002 OSMutexEn
81142b60 g       *ABS*	00000000 _edata
81138ae8 g     F .text	00000068 altera_avalon_uart_read_fd
81110274 g     F .text	00000034 vLoadDefaultIdNFEEMaster
81150e28 g       *ABS*	00000000 _end
81150828 g     O .bss	00000500 active_files
81142cac g     O .bss	00000001 OSIntNesting
8110e8ac g     F .text	0000004c vFailInitialization
811014d0 g     F .text	000000c0 bDdr2SwitchMemory
8110fba0 g     F .text	0000002c cFeeRMAPDump
81142bec g     O .bss	00000004 xSemCountBuffer32
811239e4 g     F .text	0000016c __fputwc
8110faf0 g     F .text	0000002c vFeeSpwRMAPChangeConfig
81119b64 g     F .text	00000070 vfscanf
811363d0 g     F .text	00000150 copy_file_record_name_to_string
81138358 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
811322a0 g     F .text	000001dc OSTimeDlyResume
811348dc g     F .text	000000f4 Look_for_FAT16
8112c3b0 g     F .text	00000154 OSFlagNameSet
81142bf0 g     O .bss	00000004 xMutexBuffer64
81131ad8 g     F .text	000001c8 OSTaskStkChk
8113be20 g     F .text	00000094 alt_ic_irq_disable
81103c9c g     F .text	00000430 bSdmaDmaM1Transfer
81142b0e g     O .rwdata	00000002 OSMemSize
8110e9dc g     F .text	00000068 vFailSetCountSemaphorexBuffer32
81113a6c g     F .text	00000084 __swrite
81142aa0 g     O .rwdata	00000004 __malloc_trim_threshold
8111cdb4 g     F .text	0000000c __locale_msgcharset
81142cb0 g     O .bss	00000004 OSTCBCur
8110f35c g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81106cf4 g     F .text	00000044 iMsgdmaExtendedDescriptorSyncTransfer
8113c894 g     F .text	00000040 exit
8112e73c g     F .text	00000220 OSMutexPost
81108574 g     F .text	00000058 bSyncIrqFlagError
811367fc g     F .text	000003c0 alt_up_sd_card_find_next
81142b10 g     O .rwdata	00000002 OSMemTblSize
8111cbbc g     F .text	000000cc _fwalk_reent
8113ae7c g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8111136c g     F .text	000000f8 .hidden __floatunsisf
8111dc44 g     F .text	00000204 __mdiff
81104be4 g     F .text	00000180 vFeebInitIrq
8110e944 g     F .text	0000004c vFailSenderCreate
81125628 g     F .text	00000074 .hidden __modsi3
81107cd4 g     F .text	0000003c uliSyncGetPer
81142bf4 g     O .bss	00000004 xMutexSenderACK
8110f1bc g     F .text	00000068 vFailGetBlockingSemTimeoutTask
81142a90 g     O .rwdata	00000004 __ctype_ptr__
8110ef24 g     F .text	00000068 vFailSetPreParsedBuffer
8113390c g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
8111be90 g     F .text	00000004 __sfp_lock_release
81104e38 g     F .text	000000ac bFeebGetIrqControl
8110f494 g     F .text	00000068 vCouldNotSendTurnOff
8112a160 g     F .text	00000064 OSInit
811061c4 g     F .text	00000078 bSetPainelLeds
8113a5c4 g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
81142cb4 g     O .bss	00000004 OSTmrTime
81101b10 g     F .text	00000510 bDdr2MemoryReadTest
81131e8c g     F .text	0000012c OSTaskQuery
811083a4 g     F .text	00000074 bSyncIrqEnableError
8112fd14 g     F .text	000000b0 OS_QInit
8111e988 g     F .text	000000d0 __sccl
81111ea8 g     F .text	0000000c atoi
81108750 g     F .text	00000030 vFeeTask
8112b4c4 g     F .text	0000005c OS_StrLen
8110497c g     F .text	00000058 bFeebCh2IrqFlagBufferEmpty
8112d758 g     F .text	0000011c OSMemNameSet
81140060 g     O .rodata	00000101 _ctype_
81107c98 g     F .text	0000003c uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110eaac g     F .text	00000068 vFailSetCountSemaphorexBuffer128
81142b2a g     O .rwdata	00000002 OSTaskProfileEn
8113a494 g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
81142bf8 g     O .bss	00000004 xTxUARTMutex
81142cb8 g     O .bss	00000004 OSTime
81142aa8 g     O .rwdata	00000004 __mbtowc
81139108 g     F .text	0000005c altera_avalon_uart_close
81142cbc g     O .bss	00000004 OSTmrSem
8114e494 g     O .bss	00000800 OSTaskIdleStk
81111ec0 g     F .text	000000fc _fopen_r
81142bb0 g     O .bss	00000004 pdata
8113cce4 g     F .text	000000bc _exit
8113b7b8 g     F .text	00000134 alt_alarm_start
8112c280 g     F .text	00000130 OSFlagNameGet
8113247c g     F .text	00000064 OSTimeGet
81142b74 g     O .bss	00000004 ESdmaChBufferId
81137060 g     F .text	00000380 alt_up_sd_card_read
811126dc g     F .text	000001c4 __smakebuf_r
81142bfc g     O .bss	00000001 SemCount64
8110c5a8 g     F .text	00000368 bSendUART64v2
81104a2c g     F .text	00000058 bFeebCh4IrqFlagBufferEmpty
81142b58 g     O .rwdata	00000008 alt_msgdma_list
81113ba8 g     F .text	00000098 strlen
81107530 g     F .text	000000b4 uc_spi_get_byte
8113c690 g     F .text	00000028 OSTaskSwHook
81128d5c g     F .text	0000015c open
8114ec94 g     O .bss	00000c30 OSEventTbl
8110fb1c g     F .text	0000002c vFeeSpwRMAPChangeDefault
81126b80 g     F .text	000000dc .hidden __gedf2
8114be9c g     O .bss	00000020 xSenderACK
8113c384 g     F .text	00000044 alt_putchar
8114f8c4 g     O .bss	00000e58 OSTCBTbl
81123cfc g     F .text	00000838 __gethex
8113075c g     F .text	00000108 OSSemSet
8110b018 g     F .text	0000006c vTimeoutCheckerTaskv2
8110fbcc g     F .text	00000038 cFeeRMAPEchoingEnable
81142aac g     O .rwdata	00000004 __wctomb
8110bd40 g     F .text	00000294 vVariablesInitialization
811222b0 g     F .text	00000018 __sprint_r
81104ee4 g     F .text	00000088 bFeebGetIrqFlags
81142b6c g     O .bss	00000004 pxDmaM2Dev
8110e474 g     F .text	0000004c vFailCreateSemaphoreResources
81142ac8 g     O .rwdata	00000004 alt_priority_mask
81105850 g     F .text	0000003c bDisableLvdsBoard
8112ff5c g     F .text	00000248 OSSemDel
81142cc0 g     O .bss	00000004 OSFlagFreeList
8110746c g     F .text	000000c4 v_spi_send_byte
811077a0 g     F .text	000000d0 bSSDisplayConfig
8113bd90 g     F .text	00000090 alt_ic_irq_enable
81142af0 g     O .rwdata	00000002 OSEventNameSize
811182c0 g     F .text	0000001c __vfprintf_internal
81142cc4 g     O .bss	00000001 OSStatRdy
81108078 g     F .text	00000074 bSyncCtrCh2OutEnable
8115071c g     O .bss	000000a4 OSTCBPrioTbl
811391a8 g     F .text	00000270 altera_avalon_uart_read
81124a04 g     F .text	00000064 _wctomb_r
811295a8 g     F .text	000000cc __env_lock
81142b36 g     O .rwdata	00000002 OSTaskSwHookEn
8110478c g     F .text	00000044 vFeebCh3IrqFlagClrBufferEmpty
81126d50 g     F .text	00000904 .hidden __subdf3
8114bebc g     O .bss	00000260 xPreParsed
81107d10 g     F .text	0000003c uliSyncGetOst
81142bfd g     O .bss	00000001 SemCount128
81104858 g     F .text	00000044 vFeebCh6IrqFlagClrBufferEmpty
8110cc78 g     F .text	00000290 vSendEthConf
8111d658 g     F .text	000000b0 __lo0bits
811183a0 g     F .text	000017c4 __svfscanf_r
81142ad4 g     O .rwdata	00000008 alt_alarm_list
81121ff8 g     F .text	0000019c _ungetc_r
81142afe g     O .rwdata	00000002 OSFlagWidth
8113b9dc g     F .text	00000068 _do_ctors
81102a5c g     F .text	0000004c DMA_BUSY
8112490c g     F .text	000000c8 wcrtomb
8110c150 g     F .text	00000068 vCCDLoadDefaultValues
811279dc g     F .text	000000d8 close
81107d4c g     F .text	0000003c uliSyncGetGeneral
81142c54 g     O .bss	00000004 alt_envsem
81127f0c g     F .text	00000068 alt_log_repchar
81142cc8 g     O .bss	00000004 OSIdleCtrRun
8112a7e8 g     F .text	00000028 OSVersion
81142b48 g     O .rwdata	00000002 OSTmrCfgWheelSize
81131fb8 g     F .text	00000078 OS_TaskStkClr
811104b4 g     F .text	0000003c siOpenFile
81142b22 g     O .rwdata	00000002 OSTaskCreateEn
8110cf08 g     F .text	00000118 vSendTurnOff
8110e574 g     F .text	0000004c vFailSendPreParsedSemaphore
81134dd0 g     F .text	000002a4 match_file_record_to_name_ext
8112ae10 g     F .text	00000070 OS_EventWaitListInit
81123b74 g     F .text	00000088 fputwc
8110e50c g     F .text	00000068 vFailSendxSemCommInit
8113c788 g     F .text	00000028 OSTaskIdleHook
8111be94 g     F .text	00000004 __sinit_lock_acquire
8111d3bc g     F .text	00000128 __multadd
8110489c g     F .text	00000044 vFeebCh7IrqFlagClrBufferEmpty
8110799c g     F .text	0000004c ucSyncStatusState
81131ca0 g     F .text	000001ec OSTaskSuspend
8111d394 g     F .text	00000028 _Bfree
81107c5c g     F .text	0000003c uliSyncGetMbt
8112b520 g     F .text	00000064 OS_TaskIdle
81142b4e g     O .rwdata	00000002 OSTmrTblSize
8112fbb0 g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK
        /* Ensure stack didn't just overflow. */
        bltu  sp, et, .Lstack_overflow
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100028:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
8110002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
81100030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
8110003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
81100040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100044:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100048:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
8110004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
81100050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
8110005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
81100060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
8110006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
81100070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
8110007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100088:	11001040 	call	81100104 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
81100090:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100094:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100098:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a4:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a8:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000fc:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110011c:	112a1c40 	call	8112a1c4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110014c:	00a04574 	movhi	r2,33045
81100150:	10834a04 	addi	r2,r2,3368
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a04574 	movhi	r2,33045
81100168:	10834a04 	addi	r2,r2,3368
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
      }
      mask <<= 1;
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>

    active = alt_irq_pending ();
811001b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001c4:	112a2180 	call	8112a218 <OSIntExit>
}
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8110021c:	d0a0a017 	ldw	r2,-32128(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
81100224:	d0a0a017 	ldw	r2,-32128(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
81100244:	0005883a 	mov	r2,zero
}
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:
    .int 2, 1, 0b, 1b
    .popsection
#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)
8110025c:	01204534 	movhi	r4,33044
81100260:	210ab304 	addi	r4,r4,10956
81100264:	21400037 	ldwio	r5,0(r4)
81100268:	01400326 	beq	zero,r5,81100278 <_start+0x1c>
8110026c:	01204534 	movhi	r4,33044
81100270:	21060a04 	addi	r4,r4,6184
81100274:	1127e840 	call	81127e84 <tx_log_str>

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
81100278:	01204534 	movhi	r4,33044
8110027c:	210ab304 	addi	r4,r4,10956
81100280:	21400037 	ldwio	r5,0(r4)
81100284:	01400326 	beq	zero,r5,81100294 <_start+0x38>
81100288:	01204534 	movhi	r4,33044
8110028c:	2105fd04 	addi	r4,r4,6132
81100290:	1127e840 	call	81127e84 <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100294:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100298:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110029c:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
811002a0:	d6aaa114 	ori	gp,gp,43652
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)
811002a4:	01204534 	movhi	r4,33044
811002a8:	210ab304 	addi	r4,r4,10956
811002ac:	21400037 	ldwio	r5,0(r4)
811002b0:	01400326 	beq	zero,r5,811002c0 <_start+0x64>
811002b4:	01204534 	movhi	r4,33044
811002b8:	2105ee04 	addi	r4,r4,6072
811002bc:	1127e840 	call	81127e84 <tx_log_str>

    movhi r2, %hi(__bss_start)
811002c0:	00a04534 	movhi	r2,33044
    ori r2, r2, %lo(__bss_start)
811002c4:	108ad814 	ori	r2,r2,11104

    movhi r3, %hi(__bss_end)
811002c8:	00e04574 	movhi	r3,33045
    ori r3, r3, %lo(__bss_end)
811002cc:	18c38a14 	ori	r3,r3,3624

    beq r2, r3, 1f
811002d0:	10c00326 	beq	r2,r3,811002e0 <_start+0x84>

0:
    stw zero, (r2)
811002d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
811002d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
811002dc:	10fffd36 	bltu	r2,r3,811002d4 <__reset+0xfb0e02d4>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
811002e0:	d6200017 	ldw	et,-32768(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)
811002e4:	01204534 	movhi	r4,33044
811002e8:	210ab304 	addi	r4,r4,10956
811002ec:	21400037 	ldwio	r5,0(r4)
811002f0:	01400326 	beq	zero,r5,81100300 <_start+0xa4>
811002f4:	01204534 	movhi	r4,33044
811002f8:	2105f504 	addi	r4,r4,6100
811002fc:	1127e840 	call	81127e84 <tx_log_str>

    /* Call the C entry point. It should never return. */
    call alt_main
81100300:	1128ab00 	call	81128ab0 <alt_main>

81100304 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100304:	003fff06 	br	81100304 <__reset+0xfb0e0304>

81100308 <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
81100308:	defff604 	addi	sp,sp,-40
8110030c:	de00012e 	bgeu	sp,et,81100314 <bDdr2EepromTest+0xc>
81100310:	003b68fa 	trap	3
81100314:	dfc00915 	stw	ra,36(sp)
81100318:	df000815 	stw	fp,32(sp)
8110031c:	df000804 	addi	fp,sp,32
81100320:	2005883a 	mov	r2,r4
81100324:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
81100328:	00e04534 	movhi	r3,33044
8110032c:	18cb7204 	addi	r3,r3,11720
81100330:	00a04534 	movhi	r2,33044
81100334:	10b36804 	addi	r2,r2,-12896
81100338:	1009883a 	mov	r4,r2
8110033c:	00800884 	movi	r2,34
81100340:	100d883a 	mov	r6,r2
81100344:	200b883a 	mov	r5,r4
81100348:	1809883a 	mov	r4,r3
8110034c:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
81100350:	d0a04f17 	ldw	r2,-32452(gp)
81100354:	01604534 	movhi	r5,33044
81100358:	294b7204 	addi	r5,r5,11720
8110035c:	1009883a 	mov	r4,r2
81100360:	11120040 	call	81112004 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100364:	00bfe804 	movi	r2,-96
81100368:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
8110036c:	00800044 	movi	r2,1
81100370:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
81100374:	e0bfff03 	ldbu	r2,-4(fp)
81100378:	10c00060 	cmpeqi	r3,r2,1
8110037c:	1800031e 	bne	r3,zero,8110038c <bDdr2EepromTest+0x84>
81100380:	108000a0 	cmpeqi	r2,r2,2
81100384:	1000081e 	bne	r2,zero,811003a8 <bDdr2EepromTest+0xa0>
81100388:	00000e06 	br	811003c4 <bDdr2EepromTest+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110038c:	00a00034 	movhi	r2,32768
81100390:	10827c04 	addi	r2,r2,2544
81100394:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100398:	00a00034 	movhi	r2,32768
8110039c:	10828004 	addi	r2,r2,2560
811003a0:	e0bffb15 	stw	r2,-20(fp)
		break;
811003a4:	00001906 	br	8110040c <bDdr2EepromTest+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811003a8:	00a00034 	movhi	r2,32768
811003ac:	10825804 	addi	r2,r2,2400
811003b0:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
811003b4:	00a00034 	movhi	r2,32768
811003b8:	10825c04 	addi	r2,r2,2416
811003bc:	e0bffb15 	stw	r2,-20(fp)
		break;
811003c0:	00001206 	br	8110040c <bDdr2EepromTest+0x104>
	default:
		bSuccess = FALSE;
811003c4:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811003c8:	00e04534 	movhi	r3,33044
811003cc:	18cb7204 	addi	r3,r3,11720
811003d0:	00a04534 	movhi	r2,33044
811003d4:	10b37104 	addi	r2,r2,-12860
811003d8:	1009883a 	mov	r4,r2
811003dc:	00800bc4 	movi	r2,47
811003e0:	100d883a 	mov	r6,r2
811003e4:	200b883a 	mov	r5,r4
811003e8:	1809883a 	mov	r4,r3
811003ec:	11130b40 	call	811130b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811003f0:	d0a04f17 	ldw	r2,-32452(gp)
811003f4:	01604534 	movhi	r5,33044
811003f8:	294b7204 	addi	r5,r5,11720
811003fc:	1009883a 	mov	r4,r2
81100400:	11120040 	call	81112004 <fprintf>
		;
#endif
		return bSuccess;
81100404:	e0bff917 	ldw	r2,-28(fp)
81100408:	0000ff06 	br	81100808 <bDdr2EepromTest+0x500>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
8110040c:	00e04534 	movhi	r3,33044
81100410:	18cb7204 	addi	r3,r3,11720
81100414:	00a04534 	movhi	r2,33044
81100418:	10b37d04 	addi	r2,r2,-12812
8110041c:	1009883a 	mov	r4,r2
81100420:	008005c4 	movi	r2,23
81100424:	100d883a 	mov	r6,r2
81100428:	200b883a 	mov	r5,r4
8110042c:	1809883a 	mov	r4,r3
81100430:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
81100434:	d0a04f17 	ldw	r2,-32452(gp)
81100438:	01604534 	movhi	r5,33044
8110043c:	294b7204 	addi	r5,r5,11720
81100440:	1009883a 	mov	r4,r2
81100444:	11120040 	call	81112004 <fprintf>
#endif
	usleep(20 * 1000);
81100448:	01138804 	movi	r4,20000
8110044c:	112931c0 	call	8112931c <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100450:	e03ffc15 	stw	zero,-16(fp)
81100454:	00003306 	br	81100524 <bDdr2EepromTest+0x21c>
		ucControlAddr = iI;
81100458:	e0bffc17 	ldw	r2,-16(fp)
8110045c:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100460:	e0bffd03 	ldbu	r2,-12(fp)
81100464:	10c03fcc 	andi	r3,r2,255
81100468:	18c0201c 	xori	r3,r3,128
8110046c:	18ffe004 	addi	r3,r3,-128
81100470:	e13ffd43 	ldbu	r4,-11(fp)
81100474:	e0bffe04 	addi	r2,fp,-8
81100478:	d8800015 	stw	r2,0(sp)
8110047c:	200f883a 	mov	r7,r4
81100480:	180d883a 	mov	r6,r3
81100484:	e17ffb17 	ldw	r5,-20(fp)
81100488:	e13ffa17 	ldw	r4,-24(fp)
8110048c:	1105b300 	call	81105b30 <I2C_Read>
81100490:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100494:	e0bff917 	ldw	r2,-28(fp)
81100498:	10001026 	beq	r2,zero,811004dc <bDdr2EepromTest+0x1d4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
8110049c:	e0bffd43 	ldbu	r2,-11(fp)
811004a0:	e0fffe03 	ldbu	r3,-8(fp)
811004a4:	18c03fcc 	andi	r3,r3,255
811004a8:	180f883a 	mov	r7,r3
811004ac:	100d883a 	mov	r6,r2
811004b0:	01604534 	movhi	r5,33044
811004b4:	29738304 	addi	r5,r5,-12788
811004b8:	01204534 	movhi	r4,33044
811004bc:	210b7204 	addi	r4,r4,11720
811004c0:	11139940 	call	81113994 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
811004c4:	d0a04f17 	ldw	r2,-32452(gp)
811004c8:	01604534 	movhi	r5,33044
811004cc:	294b7204 	addi	r5,r5,11720
811004d0:	1009883a 	mov	r4,r2
811004d4:	11120040 	call	81112004 <fprintf>
811004d8:	00000f06 	br	81100518 <bDdr2EepromTest+0x210>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
811004dc:	00e04534 	movhi	r3,33044
811004e0:	18cb7204 	addi	r3,r3,11720
811004e4:	00a04534 	movhi	r2,33044
811004e8:	10b38804 	addi	r2,r2,-12768
811004ec:	1009883a 	mov	r4,r2
811004f0:	008005c4 	movi	r2,23
811004f4:	100d883a 	mov	r6,r2
811004f8:	200b883a 	mov	r5,r4
811004fc:	1809883a 	mov	r4,r3
81100500:	11130b40 	call	811130b4 <memcpy>
			debug(fp, cDebugBuffer);
81100504:	d0a04f17 	ldw	r2,-32452(gp)
81100508:	01604534 	movhi	r5,33044
8110050c:	294b7204 	addi	r5,r5,11720
81100510:	1009883a 	mov	r4,r2
81100514:	11120040 	call	81112004 <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100518:	e0bffc17 	ldw	r2,-16(fp)
8110051c:	10800044 	addi	r2,r2,1
81100520:	e0bffc15 	stw	r2,-16(fp)
81100524:	e0bffc17 	ldw	r2,-16(fp)
81100528:	10804008 	cmpgei	r2,r2,256
8110052c:	1000021e 	bne	r2,zero,81100538 <bDdr2EepromTest+0x230>
81100530:	e0bff917 	ldw	r2,-28(fp)
81100534:	103fc81e 	bne	r2,zero,81100458 <__reset+0xfb0e0458>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
81100538:	e0bff917 	ldw	r2,-28(fp)
8110053c:	10001026 	beq	r2,zero,81100580 <bDdr2EepromTest+0x278>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
81100540:	00e04534 	movhi	r3,33044
81100544:	18cb7204 	addi	r3,r3,11720
81100548:	00a04534 	movhi	r2,33044
8110054c:	10b38e04 	addi	r2,r2,-12744
81100550:	1009883a 	mov	r4,r2
81100554:	00800884 	movi	r2,34
81100558:	100d883a 	mov	r6,r2
8110055c:	200b883a 	mov	r5,r4
81100560:	1809883a 	mov	r4,r3
81100564:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
81100568:	d0a04f17 	ldw	r2,-32452(gp)
8110056c:	01604534 	movhi	r5,33044
81100570:	294b7204 	addi	r5,r5,11720
81100574:	1009883a 	mov	r4,r2
81100578:	11120040 	call	81112004 <fprintf>
8110057c:	00000f06 	br	811005bc <bDdr2EepromTest+0x2b4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
81100580:	00e04534 	movhi	r3,33044
81100584:	18cb7204 	addi	r3,r3,11720
81100588:	00a04534 	movhi	r2,33044
8110058c:	10b39704 	addi	r2,r2,-12708
81100590:	1009883a 	mov	r4,r2
81100594:	008007c4 	movi	r2,31
81100598:	100d883a 	mov	r6,r2
8110059c:	200b883a 	mov	r5,r4
811005a0:	1809883a 	mov	r4,r3
811005a4:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
811005a8:	d0a04f17 	ldw	r2,-32452(gp)
811005ac:	01604534 	movhi	r5,33044
811005b0:	294b7204 	addi	r5,r5,11720
811005b4:	1009883a 	mov	r4,r2
811005b8:	11120040 	call	81112004 <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
811005bc:	00e04534 	movhi	r3,33044
811005c0:	18cb7204 	addi	r3,r3,11720
811005c4:	00a04534 	movhi	r2,33044
811005c8:	10b39f04 	addi	r2,r2,-12676
811005cc:	1009883a 	mov	r4,r2
811005d0:	00800604 	movi	r2,24
811005d4:	100d883a 	mov	r6,r2
811005d8:	200b883a 	mov	r5,r4
811005dc:	1809883a 	mov	r4,r3
811005e0:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
811005e4:	d0a04f17 	ldw	r2,-32452(gp)
811005e8:	01604534 	movhi	r5,33044
811005ec:	294b7204 	addi	r5,r5,11720
811005f0:	1009883a 	mov	r4,r2
811005f4:	11120040 	call	81112004 <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
811005f8:	00800484 	movi	r2,18
811005fc:	e0bffd85 	stb	r2,-10(fp)
81100600:	00bfe004 	movi	r2,-128
81100604:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100608:	01138804 	movi	r4,20000
8110060c:	112931c0 	call	8112931c <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100610:	e0bffd03 	ldbu	r2,-12(fp)
81100614:	10c03fcc 	andi	r3,r2,255
81100618:	18c0201c 	xori	r3,r3,128
8110061c:	18ffe004 	addi	r3,r3,-128
81100620:	e13ffdc3 	ldbu	r4,-9(fp)
81100624:	e0bffd83 	ldbu	r2,-10(fp)
81100628:	d8800015 	stw	r2,0(sp)
8110062c:	200f883a 	mov	r7,r4
81100630:	180d883a 	mov	r6,r3
81100634:	e17ffb17 	ldw	r5,-20(fp)
81100638:	e13ffa17 	ldw	r4,-24(fp)
8110063c:	1105a500 	call	81105a50 <I2C_Write>
81100640:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
81100644:	e0bff917 	ldw	r2,-28(fp)
81100648:	1000101e 	bne	r2,zero,8110068c <bDdr2EepromTest+0x384>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
8110064c:	00e04534 	movhi	r3,33044
81100650:	18cb7204 	addi	r3,r3,11720
81100654:	00a04534 	movhi	r2,33044
81100658:	10b3a504 	addi	r2,r2,-12652
8110065c:	1009883a 	mov	r4,r2
81100660:	00800604 	movi	r2,24
81100664:	100d883a 	mov	r6,r2
81100668:	200b883a 	mov	r5,r4
8110066c:	1809883a 	mov	r4,r3
81100670:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
81100674:	d0a04f17 	ldw	r2,-32452(gp)
81100678:	01604534 	movhi	r5,33044
8110067c:	294b7204 	addi	r5,r5,11720
81100680:	1009883a 	mov	r4,r2
81100684:	11120040 	call	81112004 <fprintf>
81100688:	00003306 	br	81100758 <bDdr2EepromTest+0x450>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110068c:	e0bffd03 	ldbu	r2,-12(fp)
81100690:	10c03fcc 	andi	r3,r2,255
81100694:	18c0201c 	xori	r3,r3,128
81100698:	18ffe004 	addi	r3,r3,-128
8110069c:	e13ffdc3 	ldbu	r4,-9(fp)
811006a0:	e0bffe44 	addi	r2,fp,-7
811006a4:	d8800015 	stw	r2,0(sp)
811006a8:	200f883a 	mov	r7,r4
811006ac:	180d883a 	mov	r6,r3
811006b0:	e17ffb17 	ldw	r5,-20(fp)
811006b4:	e13ffa17 	ldw	r4,-24(fp)
811006b8:	1105b300 	call	81105b30 <I2C_Read>
811006bc:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
811006c0:	e0bff917 	ldw	r2,-28(fp)
811006c4:	1000101e 	bne	r2,zero,81100708 <bDdr2EepromTest+0x400>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
811006c8:	00e04534 	movhi	r3,33044
811006cc:	18cb7204 	addi	r3,r3,11720
811006d0:	00a04534 	movhi	r2,33044
811006d4:	10b3ab04 	addi	r2,r2,-12628
811006d8:	1009883a 	mov	r4,r2
811006dc:	00800884 	movi	r2,34
811006e0:	100d883a 	mov	r6,r2
811006e4:	200b883a 	mov	r5,r4
811006e8:	1809883a 	mov	r4,r3
811006ec:	11130b40 	call	811130b4 <memcpy>
			debug(fp, cDebugBuffer);
811006f0:	d0a04f17 	ldw	r2,-32452(gp)
811006f4:	01604534 	movhi	r5,33044
811006f8:	294b7204 	addi	r5,r5,11720
811006fc:	1009883a 	mov	r4,r2
81100700:	11120040 	call	81112004 <fprintf>
81100704:	00001406 	br	81100758 <bDdr2EepromTest+0x450>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100708:	e0bffe43 	ldbu	r2,-7(fp)
8110070c:	10c03fcc 	andi	r3,r2,255
81100710:	e0bffd83 	ldbu	r2,-10(fp)
81100714:	18801026 	beq	r3,r2,81100758 <bDdr2EepromTest+0x450>
				bSuccess = FALSE;
81100718:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110071c:	e0bffe43 	ldbu	r2,-7(fp)
81100720:	10803fcc 	andi	r2,r2,255
81100724:	e0fffd83 	ldbu	r3,-10(fp)
81100728:	180f883a 	mov	r7,r3
8110072c:	100d883a 	mov	r6,r2
81100730:	01604534 	movhi	r5,33044
81100734:	2973b404 	addi	r5,r5,-12592
81100738:	01204534 	movhi	r4,33044
8110073c:	210b7204 	addi	r4,r4,11720
81100740:	11139940 	call	81113994 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
81100744:	d0a04f17 	ldw	r2,-32452(gp)
81100748:	01604534 	movhi	r5,33044
8110074c:	294b7204 	addi	r5,r5,11720
81100750:	1009883a 	mov	r4,r2
81100754:	11120040 	call	81112004 <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
81100758:	e0bff917 	ldw	r2,-28(fp)
8110075c:	10001026 	beq	r2,zero,811007a0 <bDdr2EepromTest+0x498>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
81100760:	00e04534 	movhi	r3,33044
81100764:	18cb7204 	addi	r3,r3,11720
81100768:	00a04534 	movhi	r2,33044
8110076c:	10b3c304 	addi	r2,r2,-12532
81100770:	1009883a 	mov	r4,r2
81100774:	008008c4 	movi	r2,35
81100778:	100d883a 	mov	r6,r2
8110077c:	200b883a 	mov	r5,r4
81100780:	1809883a 	mov	r4,r3
81100784:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
81100788:	d0a04f17 	ldw	r2,-32452(gp)
8110078c:	01604534 	movhi	r5,33044
81100790:	294b7204 	addi	r5,r5,11720
81100794:	1009883a 	mov	r4,r2
81100798:	11120040 	call	81112004 <fprintf>
8110079c:	00000f06 	br	811007dc <bDdr2EepromTest+0x4d4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
811007a0:	00e04534 	movhi	r3,33044
811007a4:	18cb7204 	addi	r3,r3,11720
811007a8:	00a04534 	movhi	r2,33044
811007ac:	10b3cc04 	addi	r2,r2,-12496
811007b0:	1009883a 	mov	r4,r2
811007b4:	00800804 	movi	r2,32
811007b8:	100d883a 	mov	r6,r2
811007bc:	200b883a 	mov	r5,r4
811007c0:	1809883a 	mov	r4,r3
811007c4:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
811007c8:	d0a04f17 	ldw	r2,-32452(gp)
811007cc:	01604534 	movhi	r5,33044
811007d0:	294b7204 	addi	r5,r5,11720
811007d4:	1009883a 	mov	r4,r2
811007d8:	11120040 	call	81112004 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811007dc:	00a04534 	movhi	r2,33044
811007e0:	108b7204 	addi	r2,r2,11720
811007e4:	00c00284 	movi	r3,10
811007e8:	10c00005 	stb	r3,0(r2)
811007ec:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811007f0:	d0a04f17 	ldw	r2,-32452(gp)
811007f4:	01604534 	movhi	r5,33044
811007f8:	294b7204 	addi	r5,r5,11720
811007fc:	1009883a 	mov	r4,r2
81100800:	11120040 	call	81112004 <fprintf>
#endif

	return bSuccess;
81100804:	e0bff917 	ldw	r2,-28(fp)
}
81100808:	e037883a 	mov	sp,fp
8110080c:	dfc00117 	ldw	ra,4(sp)
81100810:	df000017 	ldw	fp,0(sp)
81100814:	dec00204 	addi	sp,sp,8
81100818:	f800283a 	ret

8110081c <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
8110081c:	deffb704 	addi	sp,sp,-292
81100820:	de00012e 	bgeu	sp,et,81100828 <bDdr2EepromDump+0xc>
81100824:	003b68fa 	trap	3
81100828:	dfc04815 	stw	ra,288(sp)
8110082c:	df004715 	stw	fp,284(sp)
81100830:	df004704 	addi	fp,sp,284
81100834:	2005883a 	mov	r2,r4
81100838:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
8110083c:	00e04534 	movhi	r3,33044
81100840:	18cb7204 	addi	r3,r3,11720
81100844:	00a04534 	movhi	r2,33044
81100848:	10b3d404 	addi	r2,r2,-12464
8110084c:	1009883a 	mov	r4,r2
81100850:	00800884 	movi	r2,34
81100854:	100d883a 	mov	r6,r2
81100858:	200b883a 	mov	r5,r4
8110085c:	1809883a 	mov	r4,r3
81100860:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
81100864:	d0a04f17 	ldw	r2,-32452(gp)
81100868:	01604534 	movhi	r5,33044
8110086c:	294b7204 	addi	r5,r5,11720
81100870:	1009883a 	mov	r4,r2
81100874:	11120040 	call	81112004 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100878:	00bfe804 	movi	r2,-96
8110087c:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
81100880:	00800044 	movi	r2,1
81100884:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
81100888:	e0bfff03 	ldbu	r2,-4(fp)
8110088c:	10c00060 	cmpeqi	r3,r2,1
81100890:	1800031e 	bne	r3,zero,811008a0 <bDdr2EepromDump+0x84>
81100894:	108000a0 	cmpeqi	r2,r2,2
81100898:	1000081e 	bne	r2,zero,811008bc <bDdr2EepromDump+0xa0>
8110089c:	00000e06 	br	811008d8 <bDdr2EepromDump+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811008a0:	00a00034 	movhi	r2,32768
811008a4:	10827c04 	addi	r2,r2,2544
811008a8:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811008ac:	00a00034 	movhi	r2,32768
811008b0:	10828004 	addi	r2,r2,2560
811008b4:	e0bfbb15 	stw	r2,-276(fp)
		break;
811008b8:	00001906 	br	81100920 <bDdr2EepromDump+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811008bc:	00a00034 	movhi	r2,32768
811008c0:	10825804 	addi	r2,r2,2400
811008c4:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
811008c8:	00a00034 	movhi	r2,32768
811008cc:	10825c04 	addi	r2,r2,2416
811008d0:	e0bfbb15 	stw	r2,-276(fp)
		break;
811008d4:	00001206 	br	81100920 <bDdr2EepromDump+0x104>
	default:
		bSuccess = FALSE;
811008d8:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811008dc:	00e04534 	movhi	r3,33044
811008e0:	18cb7204 	addi	r3,r3,11720
811008e4:	00a04534 	movhi	r2,33044
811008e8:	10b3dd04 	addi	r2,r2,-12428
811008ec:	1009883a 	mov	r4,r2
811008f0:	00800bc4 	movi	r2,47
811008f4:	100d883a 	mov	r6,r2
811008f8:	200b883a 	mov	r5,r4
811008fc:	1809883a 	mov	r4,r3
81100900:	11130b40 	call	811130b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100904:	d0a04f17 	ldw	r2,-32452(gp)
81100908:	01604534 	movhi	r5,33044
8110090c:	294b7204 	addi	r5,r5,11720
81100910:	1009883a 	mov	r4,r2
81100914:	11120040 	call	81112004 <fprintf>
		;
#endif
		return bSuccess;
81100918:	e0bfbe17 	ldw	r2,-264(fp)
8110091c:	0002e706 	br	811014bc <bDdr2EepromDump+0xca0>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100920:	e0bfbd03 	ldbu	r2,-268(fp)
81100924:	10c03fcc 	andi	r3,r2,255
81100928:	18c0201c 	xori	r3,r3,128
8110092c:	18ffe004 	addi	r3,r3,-128
81100930:	e13fbf04 	addi	r4,fp,-260
81100934:	00804004 	movi	r2,256
81100938:	d8800015 	stw	r2,0(sp)
8110093c:	200f883a 	mov	r7,r4
81100940:	180d883a 	mov	r6,r3
81100944:	e17fbb17 	ldw	r5,-276(fp)
81100948:	e13fba17 	ldw	r4,-280(fp)
8110094c:	1105c380 	call	81105c38 <I2C_MultipleRead>
81100950:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
81100954:	e0bfbe17 	ldw	r2,-264(fp)
81100958:	1002be26 	beq	r2,zero,81101454 <bDdr2EepromDump+0xc38>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
8110095c:	e03fbc15 	stw	zero,-272(fp)
81100960:	0002b606 	br	8110143c <bDdr2EepromDump+0xc20>
			if (iI == 0) {
81100964:	e0bfbc17 	ldw	r2,-272(fp)
81100968:	1000121e 	bne	r2,zero,811009b4 <bDdr2EepromDump+0x198>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
8110096c:	e0ffbf04 	addi	r3,fp,-260
81100970:	e0bfbc17 	ldw	r2,-272(fp)
81100974:	1885883a 	add	r2,r3,r2
81100978:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110097c:	10803fcc 	andi	r2,r2,255
81100980:	100f883a 	mov	r7,r2
81100984:	e1bfbc17 	ldw	r6,-272(fp)
81100988:	01604534 	movhi	r5,33044
8110098c:	2973e904 	addi	r5,r5,-12380
81100990:	01204534 	movhi	r4,33044
81100994:	210b7204 	addi	r4,r4,11720
81100998:	11139940 	call	81113994 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
8110099c:	d0a04f17 	ldw	r2,-32452(gp)
811009a0:	01604534 	movhi	r5,33044
811009a4:	294b7204 	addi	r5,r5,11720
811009a8:	1009883a 	mov	r4,r2
811009ac:	11120040 	call	81112004 <fprintf>
811009b0:	00029f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 1) {
811009b4:	e0bfbc17 	ldw	r2,-272(fp)
811009b8:	10800058 	cmpnei	r2,r2,1
811009bc:	1000101e 	bne	r2,zero,81100a00 <bDdr2EepromDump+0x1e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009c0:	00e04534 	movhi	r3,33044
811009c4:	18cb7204 	addi	r3,r3,11720
811009c8:	00a04534 	movhi	r2,33044
811009cc:	10b3f504 	addi	r2,r2,-12332
811009d0:	1009883a 	mov	r4,r2
811009d4:	00800c04 	movi	r2,48
811009d8:	100d883a 	mov	r6,r2
811009dc:	200b883a 	mov	r5,r4
811009e0:	1809883a 	mov	r4,r3
811009e4:	11130b40 	call	811130b4 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
811009e8:	d0a04f17 	ldw	r2,-32452(gp)
811009ec:	01604534 	movhi	r5,33044
811009f0:	294b7204 	addi	r5,r5,11720
811009f4:	1009883a 	mov	r4,r2
811009f8:	11120040 	call	81112004 <fprintf>
811009fc:	00028c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 2) {
81100a00:	e0bfbc17 	ldw	r2,-272(fp)
81100a04:	10800098 	cmpnei	r2,r2,2
81100a08:	1000101e 	bne	r2,zero,81100a4c <bDdr2EepromDump+0x230>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
81100a0c:	00e04534 	movhi	r3,33044
81100a10:	18cb7204 	addi	r3,r3,11720
81100a14:	00a04534 	movhi	r2,33044
81100a18:	10b40104 	addi	r2,r2,-12284
81100a1c:	1009883a 	mov	r4,r2
81100a20:	008007c4 	movi	r2,31
81100a24:	100d883a 	mov	r6,r2
81100a28:	200b883a 	mov	r5,r4
81100a2c:	1809883a 	mov	r4,r3
81100a30:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81100a34:	d0a04f17 	ldw	r2,-32452(gp)
81100a38:	01604534 	movhi	r5,33044
81100a3c:	294b7204 	addi	r5,r5,11720
81100a40:	1009883a 	mov	r4,r2
81100a44:	11120040 	call	81112004 <fprintf>
81100a48:	00027906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 3) {
81100a4c:	e0bfbc17 	ldw	r2,-272(fp)
81100a50:	108000d8 	cmpnei	r2,r2,3
81100a54:	1000101e 	bne	r2,zero,81100a98 <bDdr2EepromDump+0x27c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a58:	00e04534 	movhi	r3,33044
81100a5c:	18cb7204 	addi	r3,r3,11720
81100a60:	00a04534 	movhi	r2,33044
81100a64:	10b40904 	addi	r2,r2,-12252
81100a68:	1009883a 	mov	r4,r2
81100a6c:	008009c4 	movi	r2,39
81100a70:	100d883a 	mov	r6,r2
81100a74:	200b883a 	mov	r5,r4
81100a78:	1809883a 	mov	r4,r3
81100a7c:	11130b40 	call	811130b4 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a80:	d0a04f17 	ldw	r2,-32452(gp)
81100a84:	01604534 	movhi	r5,33044
81100a88:	294b7204 	addi	r5,r5,11720
81100a8c:	1009883a 	mov	r4,r2
81100a90:	11120040 	call	81112004 <fprintf>
81100a94:	00026606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 4) {
81100a98:	e0bfbc17 	ldw	r2,-272(fp)
81100a9c:	10800118 	cmpnei	r2,r2,4
81100aa0:	1000101e 	bne	r2,zero,81100ae4 <bDdr2EepromDump+0x2c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100aa4:	00e04534 	movhi	r3,33044
81100aa8:	18cb7204 	addi	r3,r3,11720
81100aac:	00a04534 	movhi	r2,33044
81100ab0:	10b41304 	addi	r2,r2,-12212
81100ab4:	1009883a 	mov	r4,r2
81100ab8:	00800a84 	movi	r2,42
81100abc:	100d883a 	mov	r6,r2
81100ac0:	200b883a 	mov	r5,r4
81100ac4:	1809883a 	mov	r4,r3
81100ac8:	11130b40 	call	811130b4 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100acc:	d0a04f17 	ldw	r2,-32452(gp)
81100ad0:	01604534 	movhi	r5,33044
81100ad4:	294b7204 	addi	r5,r5,11720
81100ad8:	1009883a 	mov	r4,r2
81100adc:	11120040 	call	81112004 <fprintf>
81100ae0:	00025306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 5) {
81100ae4:	e0bfbc17 	ldw	r2,-272(fp)
81100ae8:	10800158 	cmpnei	r2,r2,5
81100aec:	1000101e 	bne	r2,zero,81100b30 <bDdr2EepromDump+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100af0:	00e04534 	movhi	r3,33044
81100af4:	18cb7204 	addi	r3,r3,11720
81100af8:	00a04534 	movhi	r2,33044
81100afc:	10b41e04 	addi	r2,r2,-12168
81100b00:	1009883a 	mov	r4,r2
81100b04:	00800c04 	movi	r2,48
81100b08:	100d883a 	mov	r6,r2
81100b0c:	200b883a 	mov	r5,r4
81100b10:	1809883a 	mov	r4,r3
81100b14:	11130b40 	call	811130b4 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100b18:	d0a04f17 	ldw	r2,-32452(gp)
81100b1c:	01604534 	movhi	r5,33044
81100b20:	294b7204 	addi	r5,r5,11720
81100b24:	1009883a 	mov	r4,r2
81100b28:	11120040 	call	81112004 <fprintf>
81100b2c:	00024006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 6) {
81100b30:	e0bfbc17 	ldw	r2,-272(fp)
81100b34:	10800198 	cmpnei	r2,r2,6
81100b38:	1000101e 	bne	r2,zero,81100b7c <bDdr2EepromDump+0x360>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100b3c:	00e04534 	movhi	r3,33044
81100b40:	18cb7204 	addi	r3,r3,11720
81100b44:	00a04534 	movhi	r2,33044
81100b48:	10b42a04 	addi	r2,r2,-12120
81100b4c:	1009883a 	mov	r4,r2
81100b50:	00800544 	movi	r2,21
81100b54:	100d883a 	mov	r6,r2
81100b58:	200b883a 	mov	r5,r4
81100b5c:	1809883a 	mov	r4,r3
81100b60:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81100b64:	d0a04f17 	ldw	r2,-32452(gp)
81100b68:	01604534 	movhi	r5,33044
81100b6c:	294b7204 	addi	r5,r5,11720
81100b70:	1009883a 	mov	r4,r2
81100b74:	11120040 	call	81112004 <fprintf>
81100b78:	00022d06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 7) {
81100b7c:	e0bfbc17 	ldw	r2,-272(fp)
81100b80:	108001d8 	cmpnei	r2,r2,7
81100b84:	1000101e 	bne	r2,zero,81100bc8 <bDdr2EepromDump+0x3ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100b88:	00e04534 	movhi	r3,33044
81100b8c:	18cb7204 	addi	r3,r3,11720
81100b90:	00a04534 	movhi	r2,33044
81100b94:	10b43004 	addi	r2,r2,-12096
81100b98:	1009883a 	mov	r4,r2
81100b9c:	00800804 	movi	r2,32
81100ba0:	100d883a 	mov	r6,r2
81100ba4:	200b883a 	mov	r5,r4
81100ba8:	1809883a 	mov	r4,r3
81100bac:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81100bb0:	d0a04f17 	ldw	r2,-32452(gp)
81100bb4:	01604534 	movhi	r5,33044
81100bb8:	294b7204 	addi	r5,r5,11720
81100bbc:	1009883a 	mov	r4,r2
81100bc0:	11120040 	call	81112004 <fprintf>
81100bc4:	00021a06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 16) {
81100bc8:	e0bfbc17 	ldw	r2,-272(fp)
81100bcc:	10800418 	cmpnei	r2,r2,16
81100bd0:	1000101e 	bne	r2,zero,81100c14 <bDdr2EepromDump+0x3f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100bd4:	00e04534 	movhi	r3,33044
81100bd8:	18cb7204 	addi	r3,r3,11720
81100bdc:	00a04534 	movhi	r2,33044
81100be0:	10b43804 	addi	r2,r2,-12064
81100be4:	1009883a 	mov	r4,r2
81100be8:	00800d04 	movi	r2,52
81100bec:	100d883a 	mov	r6,r2
81100bf0:	200b883a 	mov	r5,r4
81100bf4:	1809883a 	mov	r4,r3
81100bf8:	11130b40 	call	811130b4 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100bfc:	d0a04f17 	ldw	r2,-32452(gp)
81100c00:	01604534 	movhi	r5,33044
81100c04:	294b7204 	addi	r5,r5,11720
81100c08:	1009883a 	mov	r4,r2
81100c0c:	11120040 	call	81112004 <fprintf>
81100c10:	00020706 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 13) {
81100c14:	e0bfbc17 	ldw	r2,-272(fp)
81100c18:	10800358 	cmpnei	r2,r2,13
81100c1c:	1000101e 	bne	r2,zero,81100c60 <bDdr2EepromDump+0x444>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100c20:	00e04534 	movhi	r3,33044
81100c24:	18cb7204 	addi	r3,r3,11720
81100c28:	00a04534 	movhi	r2,33044
81100c2c:	10b44504 	addi	r2,r2,-12012
81100c30:	1009883a 	mov	r4,r2
81100c34:	008005c4 	movi	r2,23
81100c38:	100d883a 	mov	r6,r2
81100c3c:	200b883a 	mov	r5,r4
81100c40:	1809883a 	mov	r4,r3
81100c44:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81100c48:	d0a04f17 	ldw	r2,-32452(gp)
81100c4c:	01604534 	movhi	r5,33044
81100c50:	294b7204 	addi	r5,r5,11720
81100c54:	1009883a 	mov	r4,r2
81100c58:	11120040 	call	81112004 <fprintf>
81100c5c:	0001f406 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 14) {
81100c60:	e0bfbc17 	ldw	r2,-272(fp)
81100c64:	10800398 	cmpnei	r2,r2,14
81100c68:	1000101e 	bne	r2,zero,81100cac <bDdr2EepromDump+0x490>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100c6c:	00e04534 	movhi	r3,33044
81100c70:	18cb7204 	addi	r3,r3,11720
81100c74:	00a04534 	movhi	r2,33044
81100c78:	10b44b04 	addi	r2,r2,-11988
81100c7c:	1009883a 	mov	r4,r2
81100c80:	008004c4 	movi	r2,19
81100c84:	100d883a 	mov	r6,r2
81100c88:	200b883a 	mov	r5,r4
81100c8c:	1809883a 	mov	r4,r3
81100c90:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81100c94:	d0a04f17 	ldw	r2,-32452(gp)
81100c98:	01604534 	movhi	r5,33044
81100c9c:	294b7204 	addi	r5,r5,11720
81100ca0:	1009883a 	mov	r4,r2
81100ca4:	11120040 	call	81112004 <fprintf>
81100ca8:	0001e106 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 17) {
81100cac:	e0bfbc17 	ldw	r2,-272(fp)
81100cb0:	10800458 	cmpnei	r2,r2,17
81100cb4:	1000101e 	bne	r2,zero,81100cf8 <bDdr2EepromDump+0x4dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100cb8:	00e04534 	movhi	r3,33044
81100cbc:	18cb7204 	addi	r3,r3,11720
81100cc0:	00a04534 	movhi	r2,33044
81100cc4:	10b45004 	addi	r2,r2,-11968
81100cc8:	1009883a 	mov	r4,r2
81100ccc:	00800684 	movi	r2,26
81100cd0:	100d883a 	mov	r6,r2
81100cd4:	200b883a 	mov	r5,r4
81100cd8:	1809883a 	mov	r4,r3
81100cdc:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81100ce0:	d0a04f17 	ldw	r2,-32452(gp)
81100ce4:	01604534 	movhi	r5,33044
81100ce8:	294b7204 	addi	r5,r5,11720
81100cec:	1009883a 	mov	r4,r2
81100cf0:	11120040 	call	81112004 <fprintf>
81100cf4:	0001ce06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 18) {
81100cf8:	e0bfbc17 	ldw	r2,-272(fp)
81100cfc:	10800498 	cmpnei	r2,r2,18
81100d00:	1000101e 	bne	r2,zero,81100d44 <bDdr2EepromDump+0x528>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d04:	00e04534 	movhi	r3,33044
81100d08:	18cb7204 	addi	r3,r3,11720
81100d0c:	00a04534 	movhi	r2,33044
81100d10:	10b45704 	addi	r2,r2,-11940
81100d14:	1009883a 	mov	r4,r2
81100d18:	00800d44 	movi	r2,53
81100d1c:	100d883a 	mov	r6,r2
81100d20:	200b883a 	mov	r5,r4
81100d24:	1809883a 	mov	r4,r3
81100d28:	11130b40 	call	811130b4 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100d2c:	d0a04f17 	ldw	r2,-32452(gp)
81100d30:	01604534 	movhi	r5,33044
81100d34:	294b7204 	addi	r5,r5,11720
81100d38:	1009883a 	mov	r4,r2
81100d3c:	11120040 	call	81112004 <fprintf>
81100d40:	0001bb06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 20) {
81100d44:	e0bfbc17 	ldw	r2,-272(fp)
81100d48:	10800518 	cmpnei	r2,r2,20
81100d4c:	1000101e 	bne	r2,zero,81100d90 <bDdr2EepromDump+0x574>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d50:	00e04534 	movhi	r3,33044
81100d54:	18cb7204 	addi	r3,r3,11720
81100d58:	00a04534 	movhi	r2,33044
81100d5c:	10b46504 	addi	r2,r2,-11884
81100d60:	1009883a 	mov	r4,r2
81100d64:	00801204 	movi	r2,72
81100d68:	100d883a 	mov	r6,r2
81100d6c:	200b883a 	mov	r5,r4
81100d70:	1809883a 	mov	r4,r3
81100d74:	11130b40 	call	811130b4 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100d78:	d0a04f17 	ldw	r2,-32452(gp)
81100d7c:	01604534 	movhi	r5,33044
81100d80:	294b7204 	addi	r5,r5,11720
81100d84:	1009883a 	mov	r4,r2
81100d88:	11120040 	call	81112004 <fprintf>
81100d8c:	0001a806 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 22) {
81100d90:	e0bfbc17 	ldw	r2,-272(fp)
81100d94:	10800598 	cmpnei	r2,r2,22
81100d98:	1000101e 	bne	r2,zero,81100ddc <bDdr2EepromDump+0x5c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d9c:	00e04534 	movhi	r3,33044
81100da0:	18cb7204 	addi	r3,r3,11720
81100da4:	00a04534 	movhi	r2,33044
81100da8:	10b47704 	addi	r2,r2,-11812
81100dac:	1009883a 	mov	r4,r2
81100db0:	00800784 	movi	r2,30
81100db4:	100d883a 	mov	r6,r2
81100db8:	200b883a 	mov	r5,r4
81100dbc:	1809883a 	mov	r4,r3
81100dc0:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81100dc4:	d0a04f17 	ldw	r2,-32452(gp)
81100dc8:	01604534 	movhi	r5,33044
81100dcc:	294b7204 	addi	r5,r5,11720
81100dd0:	1009883a 	mov	r4,r2
81100dd4:	11120040 	call	81112004 <fprintf>
81100dd8:	00019506 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 27) {
81100ddc:	e0bfbc17 	ldw	r2,-272(fp)
81100de0:	108006d8 	cmpnei	r2,r2,27
81100de4:	1000101e 	bne	r2,zero,81100e28 <bDdr2EepromDump+0x60c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100de8:	00e04534 	movhi	r3,33044
81100dec:	18cb7204 	addi	r3,r3,11720
81100df0:	00a04534 	movhi	r2,33044
81100df4:	10b47f04 	addi	r2,r2,-11780
81100df8:	1009883a 	mov	r4,r2
81100dfc:	00800a04 	movi	r2,40
81100e00:	100d883a 	mov	r6,r2
81100e04:	200b883a 	mov	r5,r4
81100e08:	1809883a 	mov	r4,r3
81100e0c:	11130b40 	call	811130b4 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e10:	d0a04f17 	ldw	r2,-32452(gp)
81100e14:	01604534 	movhi	r5,33044
81100e18:	294b7204 	addi	r5,r5,11720
81100e1c:	1009883a 	mov	r4,r2
81100e20:	11120040 	call	81112004 <fprintf>
81100e24:	00018206 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 28) {
81100e28:	e0bfbc17 	ldw	r2,-272(fp)
81100e2c:	10800718 	cmpnei	r2,r2,28
81100e30:	1000101e 	bne	r2,zero,81100e74 <bDdr2EepromDump+0x658>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e34:	00e04534 	movhi	r3,33044
81100e38:	18cb7204 	addi	r3,r3,11720
81100e3c:	00a04534 	movhi	r2,33044
81100e40:	10b48904 	addi	r2,r2,-11740
81100e44:	1009883a 	mov	r4,r2
81100e48:	00800cc4 	movi	r2,51
81100e4c:	100d883a 	mov	r6,r2
81100e50:	200b883a 	mov	r5,r4
81100e54:	1809883a 	mov	r4,r3
81100e58:	11130b40 	call	811130b4 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e5c:	d0a04f17 	ldw	r2,-32452(gp)
81100e60:	01604534 	movhi	r5,33044
81100e64:	294b7204 	addi	r5,r5,11720
81100e68:	1009883a 	mov	r4,r2
81100e6c:	11120040 	call	81112004 <fprintf>
81100e70:	00016f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 29) {
81100e74:	e0bfbc17 	ldw	r2,-272(fp)
81100e78:	10800758 	cmpnei	r2,r2,29
81100e7c:	1000101e 	bne	r2,zero,81100ec0 <bDdr2EepromDump+0x6a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e80:	00e04534 	movhi	r3,33044
81100e84:	18cb7204 	addi	r3,r3,11720
81100e88:	00a04534 	movhi	r2,33044
81100e8c:	10b49604 	addi	r2,r2,-11688
81100e90:	1009883a 	mov	r4,r2
81100e94:	008009c4 	movi	r2,39
81100e98:	100d883a 	mov	r6,r2
81100e9c:	200b883a 	mov	r5,r4
81100ea0:	1809883a 	mov	r4,r3
81100ea4:	11130b40 	call	811130b4 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100ea8:	d0a04f17 	ldw	r2,-32452(gp)
81100eac:	01604534 	movhi	r5,33044
81100eb0:	294b7204 	addi	r5,r5,11720
81100eb4:	1009883a 	mov	r4,r2
81100eb8:	11120040 	call	81112004 <fprintf>
81100ebc:	00015c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 30) {
81100ec0:	e0bfbc17 	ldw	r2,-272(fp)
81100ec4:	10800798 	cmpnei	r2,r2,30
81100ec8:	1000101e 	bne	r2,zero,81100f0c <bDdr2EepromDump+0x6f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ecc:	00e04534 	movhi	r3,33044
81100ed0:	18cb7204 	addi	r3,r3,11720
81100ed4:	00a04534 	movhi	r2,33044
81100ed8:	10b4a004 	addi	r2,r2,-11648
81100edc:	1009883a 	mov	r4,r2
81100ee0:	00800b04 	movi	r2,44
81100ee4:	100d883a 	mov	r6,r2
81100ee8:	200b883a 	mov	r5,r4
81100eec:	1809883a 	mov	r4,r3
81100ef0:	11130b40 	call	811130b4 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100ef4:	d0a04f17 	ldw	r2,-32452(gp)
81100ef8:	01604534 	movhi	r5,33044
81100efc:	294b7204 	addi	r5,r5,11720
81100f00:	1009883a 	mov	r4,r2
81100f04:	11120040 	call	81112004 <fprintf>
81100f08:	00014906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 31) {
81100f0c:	e0bfbc17 	ldw	r2,-272(fp)
81100f10:	108007d8 	cmpnei	r2,r2,31
81100f14:	1000101e 	bne	r2,zero,81100f58 <bDdr2EepromDump+0x73c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f18:	00e04534 	movhi	r3,33044
81100f1c:	18cb7204 	addi	r3,r3,11720
81100f20:	00a04534 	movhi	r2,33044
81100f24:	10b4ab04 	addi	r2,r2,-11604
81100f28:	1009883a 	mov	r4,r2
81100f2c:	008010c4 	movi	r2,67
81100f30:	100d883a 	mov	r6,r2
81100f34:	200b883a 	mov	r5,r4
81100f38:	1809883a 	mov	r4,r3
81100f3c:	11130b40 	call	811130b4 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100f40:	d0a04f17 	ldw	r2,-32452(gp)
81100f44:	01604534 	movhi	r5,33044
81100f48:	294b7204 	addi	r5,r5,11720
81100f4c:	1009883a 	mov	r4,r2
81100f50:	11120040 	call	81112004 <fprintf>
81100f54:	00013606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 36) {
81100f58:	e0bfbc17 	ldw	r2,-272(fp)
81100f5c:	10800918 	cmpnei	r2,r2,36
81100f60:	1000101e 	bne	r2,zero,81100fa4 <bDdr2EepromDump+0x788>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f64:	00e04534 	movhi	r3,33044
81100f68:	18cb7204 	addi	r3,r3,11720
81100f6c:	00a04534 	movhi	r2,33044
81100f70:	10b4bc04 	addi	r2,r2,-11536
81100f74:	1009883a 	mov	r4,r2
81100f78:	00800a84 	movi	r2,42
81100f7c:	100d883a 	mov	r6,r2
81100f80:	200b883a 	mov	r5,r4
81100f84:	1809883a 	mov	r4,r3
81100f88:	11130b40 	call	811130b4 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f8c:	d0a04f17 	ldw	r2,-32452(gp)
81100f90:	01604534 	movhi	r5,33044
81100f94:	294b7204 	addi	r5,r5,11720
81100f98:	1009883a 	mov	r4,r2
81100f9c:	11120040 	call	81112004 <fprintf>
81100fa0:	00012306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 37) {
81100fa4:	e0bfbc17 	ldw	r2,-272(fp)
81100fa8:	10800958 	cmpnei	r2,r2,37
81100fac:	1000101e 	bne	r2,zero,81100ff0 <bDdr2EepromDump+0x7d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fb0:	00e04534 	movhi	r3,33044
81100fb4:	18cb7204 	addi	r3,r3,11720
81100fb8:	00a04534 	movhi	r2,33044
81100fbc:	10b4c704 	addi	r2,r2,-11492
81100fc0:	1009883a 	mov	r4,r2
81100fc4:	00800cc4 	movi	r2,51
81100fc8:	100d883a 	mov	r6,r2
81100fcc:	200b883a 	mov	r5,r4
81100fd0:	1809883a 	mov	r4,r3
81100fd4:	11130b40 	call	811130b4 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100fd8:	d0a04f17 	ldw	r2,-32452(gp)
81100fdc:	01604534 	movhi	r5,33044
81100fe0:	294b7204 	addi	r5,r5,11720
81100fe4:	1009883a 	mov	r4,r2
81100fe8:	11120040 	call	81112004 <fprintf>
81100fec:	00011006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 38) {
81100ff0:	e0bfbc17 	ldw	r2,-272(fp)
81100ff4:	10800998 	cmpnei	r2,r2,38
81100ff8:	1000101e 	bne	r2,zero,8110103c <bDdr2EepromDump+0x820>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ffc:	00e04534 	movhi	r3,33044
81101000:	18cb7204 	addi	r3,r3,11720
81101004:	00a04534 	movhi	r2,33044
81101008:	10b4d404 	addi	r2,r2,-11440
8110100c:	1009883a 	mov	r4,r2
81101010:	00800dc4 	movi	r2,55
81101014:	100d883a 	mov	r6,r2
81101018:	200b883a 	mov	r5,r4
8110101c:	1809883a 	mov	r4,r3
81101020:	11130b40 	call	811130b4 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81101024:	d0a04f17 	ldw	r2,-32452(gp)
81101028:	01604534 	movhi	r5,33044
8110102c:	294b7204 	addi	r5,r5,11720
81101030:	1009883a 	mov	r4,r2
81101034:	11120040 	call	81112004 <fprintf>
81101038:	0000fd06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 41) {
8110103c:	e0bfbc17 	ldw	r2,-272(fp)
81101040:	10800a58 	cmpnei	r2,r2,41
81101044:	1000101e 	bne	r2,zero,81101088 <bDdr2EepromDump+0x86c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101048:	00e04534 	movhi	r3,33044
8110104c:	18cb7204 	addi	r3,r3,11720
81101050:	00a04534 	movhi	r2,33044
81101054:	10b4e204 	addi	r2,r2,-11384
81101058:	1009883a 	mov	r4,r2
8110105c:	00800c84 	movi	r2,50
81101060:	100d883a 	mov	r6,r2
81101064:	200b883a 	mov	r5,r4
81101068:	1809883a 	mov	r4,r3
8110106c:	11130b40 	call	811130b4 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81101070:	d0a04f17 	ldw	r2,-32452(gp)
81101074:	01604534 	movhi	r5,33044
81101078:	294b7204 	addi	r5,r5,11720
8110107c:	1009883a 	mov	r4,r2
81101080:	11120040 	call	81112004 <fprintf>
81101084:	0000ea06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 42) {
81101088:	e0bfbc17 	ldw	r2,-272(fp)
8110108c:	10800a98 	cmpnei	r2,r2,42
81101090:	1000101e 	bne	r2,zero,811010d4 <bDdr2EepromDump+0x8b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101094:	00e04534 	movhi	r3,33044
81101098:	18cb7204 	addi	r3,r3,11720
8110109c:	00a04534 	movhi	r2,33044
811010a0:	10b4ef04 	addi	r2,r2,-11332
811010a4:	1009883a 	mov	r4,r2
811010a8:	00800cc4 	movi	r2,51
811010ac:	100d883a 	mov	r6,r2
811010b0:	200b883a 	mov	r5,r4
811010b4:	1809883a 	mov	r4,r3
811010b8:	11130b40 	call	811130b4 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
811010bc:	d0a04f17 	ldw	r2,-32452(gp)
811010c0:	01604534 	movhi	r5,33044
811010c4:	294b7204 	addi	r5,r5,11720
811010c8:	1009883a 	mov	r4,r2
811010cc:	11120040 	call	81112004 <fprintf>
811010d0:	0000d706 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 62) {
811010d4:	e0bfbc17 	ldw	r2,-272(fp)
811010d8:	10800f98 	cmpnei	r2,r2,62
811010dc:	1000101e 	bne	r2,zero,81101120 <bDdr2EepromDump+0x904>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
811010e0:	00e04534 	movhi	r3,33044
811010e4:	18cb7204 	addi	r3,r3,11720
811010e8:	00a04534 	movhi	r2,33044
811010ec:	10b4fc04 	addi	r2,r2,-11280
811010f0:	1009883a 	mov	r4,r2
811010f4:	00800404 	movi	r2,16
811010f8:	100d883a 	mov	r6,r2
811010fc:	200b883a 	mov	r5,r4
81101100:	1809883a 	mov	r4,r3
81101104:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81101108:	d0a04f17 	ldw	r2,-32452(gp)
8110110c:	01604534 	movhi	r5,33044
81101110:	294b7204 	addi	r5,r5,11720
81101114:	1009883a 	mov	r4,r2
81101118:	11120040 	call	81112004 <fprintf>
8110111c:	0000c406 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 63) {
81101120:	e0bfbc17 	ldw	r2,-272(fp)
81101124:	10800fd8 	cmpnei	r2,r2,63
81101128:	10001f1e 	bne	r2,zero,811011a8 <bDdr2EepromDump+0x98c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
8110112c:	00a04534 	movhi	r2,33044
81101130:	108b7204 	addi	r2,r2,11720
81101134:	00c00a04 	movi	r3,40
81101138:	10c00005 	stb	r3,0(r2)
8110113c:	00c010c4 	movi	r3,67
81101140:	10c00045 	stb	r3,1(r2)
81101144:	00c01a04 	movi	r3,104
81101148:	10c00085 	stb	r3,2(r2)
8110114c:	00c01944 	movi	r3,101
81101150:	10c000c5 	stb	r3,3(r2)
81101154:	00c018c4 	movi	r3,99
81101158:	10c00105 	stb	r3,4(r2)
8110115c:	00c01ac4 	movi	r3,107
81101160:	10c00145 	stb	r3,5(r2)
81101164:	00c01cc4 	movi	r3,115
81101168:	10c00185 	stb	r3,6(r2)
8110116c:	00c01d44 	movi	r3,117
81101170:	10c001c5 	stb	r3,7(r2)
81101174:	00c01b44 	movi	r3,109
81101178:	10c00205 	stb	r3,8(r2)
8110117c:	00c00a44 	movi	r3,41
81101180:	10c00245 	stb	r3,9(r2)
81101184:	00c00284 	movi	r3,10
81101188:	10c00285 	stb	r3,10(r2)
8110118c:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
81101190:	d0a04f17 	ldw	r2,-32452(gp)
81101194:	01604534 	movhi	r5,33044
81101198:	294b7204 	addi	r5,r5,11720
8110119c:	1009883a 	mov	r4,r2
811011a0:	11120040 	call	81112004 <fprintf>
811011a4:	0000a206 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 64) {
811011a8:	e0bfbc17 	ldw	r2,-272(fp)
811011ac:	10801018 	cmpnei	r2,r2,64
811011b0:	1000101e 	bne	r2,zero,811011f4 <bDdr2EepromDump+0x9d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
811011b4:	00e04534 	movhi	r3,33044
811011b8:	18cb7204 	addi	r3,r3,11720
811011bc:	00a04534 	movhi	r2,33044
811011c0:	10b50004 	addi	r2,r2,-11264
811011c4:	1009883a 	mov	r4,r2
811011c8:	00800804 	movi	r2,32
811011cc:	100d883a 	mov	r6,r2
811011d0:	200b883a 	mov	r5,r4
811011d4:	1809883a 	mov	r4,r3
811011d8:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
811011dc:	d0a04f17 	ldw	r2,-32452(gp)
811011e0:	01604534 	movhi	r5,33044
811011e4:	294b7204 	addi	r5,r5,11720
811011e8:	1009883a 	mov	r4,r2
811011ec:	11120040 	call	81112004 <fprintf>
811011f0:	00008f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 72) {
811011f4:	e0bfbc17 	ldw	r2,-272(fp)
811011f8:	10801218 	cmpnei	r2,r2,72
811011fc:	1000101e 	bne	r2,zero,81101240 <bDdr2EepromDump+0xa24>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101200:	00e04534 	movhi	r3,33044
81101204:	18cb7204 	addi	r3,r3,11720
81101208:	00a04534 	movhi	r2,33044
8110120c:	10b50804 	addi	r2,r2,-11232
81101210:	1009883a 	mov	r4,r2
81101214:	00800dc4 	movi	r2,55
81101218:	100d883a 	mov	r6,r2
8110121c:	200b883a 	mov	r5,r4
81101220:	1809883a 	mov	r4,r3
81101224:	11130b40 	call	811130b4 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
81101228:	d0a04f17 	ldw	r2,-32452(gp)
8110122c:	01604534 	movhi	r5,33044
81101230:	294b7204 	addi	r5,r5,11720
81101234:	1009883a 	mov	r4,r2
81101238:	11120040 	call	81112004 <fprintf>
8110123c:	00007c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 73) {
81101240:	e0bfbc17 	ldw	r2,-272(fp)
81101244:	10801258 	cmpnei	r2,r2,73
81101248:	1000101e 	bne	r2,zero,8110128c <bDdr2EepromDump+0xa70>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
8110124c:	00e04534 	movhi	r3,33044
81101250:	18cb7204 	addi	r3,r3,11720
81101254:	00a04534 	movhi	r2,33044
81101258:	10b51604 	addi	r2,r2,-11176
8110125c:	1009883a 	mov	r4,r2
81101260:	00800784 	movi	r2,30
81101264:	100d883a 	mov	r6,r2
81101268:	200b883a 	mov	r5,r4
8110126c:	1809883a 	mov	r4,r3
81101270:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81101274:	d0a04f17 	ldw	r2,-32452(gp)
81101278:	01604534 	movhi	r5,33044
8110127c:	294b7204 	addi	r5,r5,11720
81101280:	1009883a 	mov	r4,r2
81101284:	11120040 	call	81112004 <fprintf>
81101288:	00006906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 91) {
8110128c:	e0bfbc17 	ldw	r2,-272(fp)
81101290:	108016d8 	cmpnei	r2,r2,91
81101294:	1000101e 	bne	r2,zero,811012d8 <bDdr2EepromDump+0xabc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
81101298:	00e04534 	movhi	r3,33044
8110129c:	18cb7204 	addi	r3,r3,11720
811012a0:	00a04534 	movhi	r2,33044
811012a4:	10b51e04 	addi	r2,r2,-11144
811012a8:	1009883a 	mov	r4,r2
811012ac:	00800804 	movi	r2,32
811012b0:	100d883a 	mov	r6,r2
811012b4:	200b883a 	mov	r5,r4
811012b8:	1809883a 	mov	r4,r3
811012bc:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
811012c0:	d0a04f17 	ldw	r2,-32452(gp)
811012c4:	01604534 	movhi	r5,33044
811012c8:	294b7204 	addi	r5,r5,11720
811012cc:	1009883a 	mov	r4,r2
811012d0:	11120040 	call	81112004 <fprintf>
811012d4:	00005606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 93) {
811012d8:	e0bfbc17 	ldw	r2,-272(fp)
811012dc:	10801758 	cmpnei	r2,r2,93
811012e0:	1000101e 	bne	r2,zero,81101324 <bDdr2EepromDump+0xb08>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811012e4:	00e04534 	movhi	r3,33044
811012e8:	18cb7204 	addi	r3,r3,11720
811012ec:	00a04534 	movhi	r2,33044
811012f0:	10b52604 	addi	r2,r2,-11112
811012f4:	1009883a 	mov	r4,r2
811012f8:	008009c4 	movi	r2,39
811012fc:	100d883a 	mov	r6,r2
81101300:	200b883a 	mov	r5,r4
81101304:	1809883a 	mov	r4,r3
81101308:	11130b40 	call	811130b4 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
8110130c:	d0a04f17 	ldw	r2,-32452(gp)
81101310:	01604534 	movhi	r5,33044
81101314:	294b7204 	addi	r5,r5,11720
81101318:	1009883a 	mov	r4,r2
8110131c:	11120040 	call	81112004 <fprintf>
81101320:	00004306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 94) {
81101324:	e0bfbc17 	ldw	r2,-272(fp)
81101328:	10801798 	cmpnei	r2,r2,94
8110132c:	1000101e 	bne	r2,zero,81101370 <bDdr2EepromDump+0xb54>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
81101330:	00e04534 	movhi	r3,33044
81101334:	18cb7204 	addi	r3,r3,11720
81101338:	00a04534 	movhi	r2,33044
8110133c:	10b53004 	addi	r2,r2,-11072
81101340:	1009883a 	mov	r4,r2
81101344:	008006c4 	movi	r2,27
81101348:	100d883a 	mov	r6,r2
8110134c:	200b883a 	mov	r5,r4
81101350:	1809883a 	mov	r4,r3
81101354:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
81101358:	d0a04f17 	ldw	r2,-32452(gp)
8110135c:	01604534 	movhi	r5,33044
81101360:	294b7204 	addi	r5,r5,11720
81101364:	1009883a 	mov	r4,r2
81101368:	11120040 	call	81112004 <fprintf>
8110136c:	00003006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 95) {
81101370:	e0bfbc17 	ldw	r2,-272(fp)
81101374:	108017d8 	cmpnei	r2,r2,95
81101378:	1000101e 	bne	r2,zero,811013bc <bDdr2EepromDump+0xba0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110137c:	00e04534 	movhi	r3,33044
81101380:	18cb7204 	addi	r3,r3,11720
81101384:	00a04534 	movhi	r2,33044
81101388:	10b53704 	addi	r2,r2,-11044
8110138c:	1009883a 	mov	r4,r2
81101390:	00800a04 	movi	r2,40
81101394:	100d883a 	mov	r6,r2
81101398:	200b883a 	mov	r5,r4
8110139c:	1809883a 	mov	r4,r3
811013a0:	11130b40 	call	811130b4 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
811013a4:	d0a04f17 	ldw	r2,-32452(gp)
811013a8:	01604534 	movhi	r5,33044
811013ac:	294b7204 	addi	r5,r5,11720
811013b0:	1009883a 	mov	r4,r2
811013b4:	11120040 	call	81112004 <fprintf>
811013b8:	00001d06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 99) {
811013bc:	e0bfbc17 	ldw	r2,-272(fp)
811013c0:	108018d8 	cmpnei	r2,r2,99
811013c4:	1000101e 	bne	r2,zero,81101408 <bDdr2EepromDump+0xbec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
811013c8:	00e04534 	movhi	r3,33044
811013cc:	18cb7204 	addi	r3,r3,11720
811013d0:	00a04534 	movhi	r2,33044
811013d4:	10b54104 	addi	r2,r2,-11004
811013d8:	1009883a 	mov	r4,r2
811013dc:	00800984 	movi	r2,38
811013e0:	100d883a 	mov	r6,r2
811013e4:	200b883a 	mov	r5,r4
811013e8:	1809883a 	mov	r4,r3
811013ec:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
811013f0:	d0a04f17 	ldw	r2,-32452(gp)
811013f4:	01604534 	movhi	r5,33044
811013f8:	294b7204 	addi	r5,r5,11720
811013fc:	1009883a 	mov	r4,r2
81101400:	11120040 	call	81112004 <fprintf>
81101404:	00000a06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101408:	00a04534 	movhi	r2,33044
8110140c:	108b7204 	addi	r2,r2,11720
81101410:	00c00284 	movi	r3,10
81101414:	10c00005 	stb	r3,0(r2)
81101418:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
8110141c:	d0a04f17 	ldw	r2,-32452(gp)
81101420:	01604534 	movhi	r5,33044
81101424:	294b7204 	addi	r5,r5,11720
81101428:	1009883a 	mov	r4,r2
8110142c:	11120040 	call	81112004 <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
81101430:	e0bfbc17 	ldw	r2,-272(fp)
81101434:	10800044 	addi	r2,r2,1
81101438:	e0bfbc15 	stw	r2,-272(fp)
8110143c:	e0bfbc17 	ldw	r2,-272(fp)
81101440:	10804008 	cmpgei	r2,r2,256
81101444:	1000121e 	bne	r2,zero,81101490 <bDdr2EepromDump+0xc74>
81101448:	e0bfbe17 	ldw	r2,-264(fp)
8110144c:	103d451e 	bne	r2,zero,81100964 <__reset+0xfb0e0964>
81101450:	00000f06 	br	81101490 <bDdr2EepromDump+0xc74>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
81101454:	00e04534 	movhi	r3,33044
81101458:	18cb7204 	addi	r3,r3,11720
8110145c:	00a04534 	movhi	r2,33044
81101460:	10b54b04 	addi	r2,r2,-10964
81101464:	1009883a 	mov	r4,r2
81101468:	008005c4 	movi	r2,23
8110146c:	100d883a 	mov	r6,r2
81101470:	200b883a 	mov	r5,r4
81101474:	1809883a 	mov	r4,r3
81101478:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
8110147c:	d0a04f17 	ldw	r2,-32452(gp)
81101480:	01604534 	movhi	r5,33044
81101484:	294b7204 	addi	r5,r5,11720
81101488:	1009883a 	mov	r4,r2
8110148c:	11120040 	call	81112004 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101490:	00a04534 	movhi	r2,33044
81101494:	108b7204 	addi	r2,r2,11720
81101498:	00c00284 	movi	r3,10
8110149c:	10c00005 	stb	r3,0(r2)
811014a0:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811014a4:	d0a04f17 	ldw	r2,-32452(gp)
811014a8:	01604534 	movhi	r5,33044
811014ac:	294b7204 	addi	r5,r5,11720
811014b0:	1009883a 	mov	r4,r2
811014b4:	11120040 	call	81112004 <fprintf>
#endif

	return bSuccess;
811014b8:	e0bfbe17 	ldw	r2,-264(fp)
}
811014bc:	e037883a 	mov	sp,fp
811014c0:	dfc00117 	ldw	ra,4(sp)
811014c4:	df000017 	ldw	fp,0(sp)
811014c8:	dec00204 	addi	sp,sp,8
811014cc:	f800283a 	ret

811014d0 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
811014d0:	defffb04 	addi	sp,sp,-20
811014d4:	de00012e 	bgeu	sp,et,811014dc <bDdr2SwitchMemory+0xc>
811014d8:	003b68fa 	trap	3
811014dc:	dfc00415 	stw	ra,16(sp)
811014e0:	df000315 	stw	fp,12(sp)
811014e4:	df000304 	addi	fp,sp,12
811014e8:	2005883a 	mov	r2,r4
811014ec:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
811014f0:	00a04834 	movhi	r2,33056
811014f4:	108c2204 	addi	r2,r2,12424
811014f8:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
811014fc:	00800044 	movi	r2,1
81101500:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101504:	e0bfff03 	ldbu	r2,-4(fp)
81101508:	10c00060 	cmpeqi	r3,r2,1
8110150c:	1800031e 	bne	r3,zero,8110151c <bDdr2SwitchMemory+0x4c>
81101510:	108000a0 	cmpeqi	r2,r2,2
81101514:	1000041e 	bne	r2,zero,81101528 <bDdr2SwitchMemory+0x58>
81101518:	00000706 	br	81101538 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
8110151c:	e0bffe17 	ldw	r2,-8(fp)
81101520:	10000015 	stw	zero,0(r2)
		break;
81101524:	00001406 	br	81101578 <bDdr2SwitchMemory+0xa8>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81101528:	e0bffe17 	ldw	r2,-8(fp)
8110152c:	00e00034 	movhi	r3,32768
81101530:	10c00015 	stw	r3,0(r2)
		break;
81101534:	00001006 	br	81101578 <bDdr2SwitchMemory+0xa8>
	default:
		bSuccess = FALSE;
81101538:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110153c:	00e04534 	movhi	r3,33044
81101540:	18cb7204 	addi	r3,r3,11720
81101544:	00a04534 	movhi	r2,33044
81101548:	10b55104 	addi	r2,r2,-10940
8110154c:	1009883a 	mov	r4,r2
81101550:	00800f04 	movi	r2,60
81101554:	100d883a 	mov	r6,r2
81101558:	200b883a 	mov	r5,r4
8110155c:	1809883a 	mov	r4,r3
81101560:	11130b40 	call	811130b4 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
81101564:	d0a04f17 	ldw	r2,-32452(gp)
81101568:	01604534 	movhi	r5,33044
8110156c:	294b7204 	addi	r5,r5,11720
81101570:	1009883a 	mov	r4,r2
81101574:	11120040 	call	81112004 <fprintf>
		;
#endif
	}

	return bSuccess;
81101578:	e0bffd17 	ldw	r2,-12(fp)
}
8110157c:	e037883a 	mov	sp,fp
81101580:	dfc00117 	ldw	ra,4(sp)
81101584:	df000017 	ldw	fp,0(sp)
81101588:	dec00204 	addi	sp,sp,8
8110158c:	f800283a 	ret

81101590 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81101590:	deffe204 	addi	sp,sp,-120
81101594:	de00012e 	bgeu	sp,et,8110159c <bDdr2MemoryWriteTest+0xc>
81101598:	003b68fa 	trap	3
8110159c:	dfc01d15 	stw	ra,116(sp)
811015a0:	df001c15 	stw	fp,112(sp)
811015a4:	dc401b15 	stw	r17,108(sp)
811015a8:	dc001a15 	stw	r16,104(sp)
811015ac:	df001c04 	addi	fp,sp,112
811015b0:	2005883a 	mov	r2,r4
811015b4:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
811015b8:	00e04534 	movhi	r3,33044
811015bc:	18cb7204 	addi	r3,r3,11720
811015c0:	00a04534 	movhi	r2,33044
811015c4:	10b56004 	addi	r2,r2,-10880
811015c8:	1009883a 	mov	r4,r2
811015cc:	00800a04 	movi	r2,40
811015d0:	100d883a 	mov	r6,r2
811015d4:	200b883a 	mov	r5,r4
811015d8:	1809883a 	mov	r4,r3
811015dc:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
811015e0:	d0a04f17 	ldw	r2,-32452(gp)
811015e4:	01604534 	movhi	r5,33044
811015e8:	294b7204 	addi	r5,r5,11720
811015ec:	1009883a 	mov	r4,r2
811015f0:	11120040 	call	81112004 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
811015f4:	00800044 	movi	r2,1
811015f8:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
811015fc:	e0bffd03 	ldbu	r2,-12(fp)
81101600:	10c00060 	cmpeqi	r3,r2,1
81101604:	1800031e 	bne	r3,zero,81101614 <bDdr2MemoryWriteTest+0x84>
81101608:	108000a0 	cmpeqi	r2,r2,2
8110160c:	1000081e 	bne	r2,zero,81101630 <bDdr2MemoryWriteTest+0xa0>
81101610:	00000e06 	br	8110164c <bDdr2MemoryWriteTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101614:	e0bffd03 	ldbu	r2,-12(fp)
81101618:	1009883a 	mov	r4,r2
8110161c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101620:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101624:	00a00034 	movhi	r2,32768
81101628:	e0bfe615 	stw	r2,-104(fp)
		break;
8110162c:	00001906 	br	81101694 <bDdr2MemoryWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101630:	e0bffd03 	ldbu	r2,-12(fp)
81101634:	1009883a 	mov	r4,r2
81101638:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110163c:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101640:	00a00034 	movhi	r2,32768
81101644:	e0bfe615 	stw	r2,-104(fp)
		break;
81101648:	00001206 	br	81101694 <bDdr2MemoryWriteTest+0x104>
	default:
		bSuccess = FALSE;
8110164c:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101650:	00e04534 	movhi	r3,33044
81101654:	18cb7204 	addi	r3,r3,11720
81101658:	00a04534 	movhi	r2,33044
8110165c:	10b37104 	addi	r2,r2,-12860
81101660:	1009883a 	mov	r4,r2
81101664:	00800bc4 	movi	r2,47
81101668:	100d883a 	mov	r6,r2
8110166c:	200b883a 	mov	r5,r4
81101670:	1809883a 	mov	r4,r3
81101674:	11130b40 	call	811130b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101678:	d0a04f17 	ldw	r2,-32452(gp)
8110167c:	01604534 	movhi	r5,33044
81101680:	294b7204 	addi	r5,r5,11720
81101684:	1009883a 	mov	r4,r2
81101688:	11120040 	call	81112004 <fprintf>
		;
#endif
		return bSuccess;
8110168c:	e0bfed17 	ldw	r2,-76(fp)
81101690:	00011806 	br	81101af4 <bDdr2MemoryWriteTest+0x564>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81101694:	e0bfe617 	ldw	r2,-104(fp)
81101698:	1004d53a 	srli	r2,r2,20
8110169c:	100d883a 	mov	r6,r2
811016a0:	01604534 	movhi	r5,33044
811016a4:	29756a04 	addi	r5,r5,-10840
811016a8:	01204534 	movhi	r4,33044
811016ac:	210b7204 	addi	r4,r4,11720
811016b0:	11139940 	call	81113994 <sprintf>
	debug(fp, cDebugBuffer);
811016b4:	d0a04f17 	ldw	r2,-32452(gp)
811016b8:	01604534 	movhi	r5,33044
811016bc:	294b7204 	addi	r5,r5,11720
811016c0:	1009883a 	mov	r4,r2
811016c4:	11120040 	call	81112004 <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
811016c8:	00800104 	movi	r2,4
811016cc:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
811016d0:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
811016d4:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
811016d8:	e03fe715 	stw	zero,-100(fp)
811016dc:	00001506 	br	81101734 <bDdr2MemoryWriteTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
811016e0:	e0ffe617 	ldw	r3,-104(fp)
811016e4:	00b33374 	movhi	r2,52429
811016e8:	10b33344 	addi	r2,r2,-13107
811016ec:	1888383a 	mulxuu	r4,r3,r2
811016f0:	1885383a 	mul	r2,r3,r2
811016f4:	1021883a 	mov	r16,r2
811016f8:	2023883a 	mov	r17,r4
811016fc:	8804d0fa 	srli	r2,r17,3
81101700:	e0ffe717 	ldw	r3,-100(fp)
81101704:	18c00044 	addi	r3,r3,1
81101708:	10c7383a 	mul	r3,r2,r3
8110170c:	e0bfe717 	ldw	r2,-100(fp)
81101710:	1085883a 	add	r2,r2,r2
81101714:	1085883a 	add	r2,r2,r2
81101718:	e13fe504 	addi	r4,fp,-108
8110171c:	2085883a 	add	r2,r4,r2
81101720:	10800e04 	addi	r2,r2,56
81101724:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101728:	e0bfe717 	ldw	r2,-100(fp)
8110172c:	10800044 	addi	r2,r2,1
81101730:	e0bfe715 	stw	r2,-100(fp)
81101734:	e0bfe717 	ldw	r2,-100(fp)
81101738:	10800290 	cmplti	r2,r2,10
8110173c:	103fe81e 	bne	r2,zero,811016e0 <__reset+0xfb0e16e0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101740:	d0a07217 	ldw	r2,-32312(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
81101744:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101748:	00804004 	movi	r2,256
8110174c:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
81101750:	e03fe715 	stw	zero,-100(fp)
81101754:	00001e06 	br	811017d0 <bDdr2MemoryWriteTest+0x240>
		if (iI == 0) {
81101758:	e0bfe717 	ldw	r2,-100(fp)
8110175c:	1000091e 	bne	r2,zero,81101784 <bDdr2MemoryWriteTest+0x1f4>
			xSZData[iI] = uliInitValue;
81101760:	00a04534 	movhi	r2,33044
81101764:	108bb204 	addi	r2,r2,11976
81101768:	e0ffe717 	ldw	r3,-100(fp)
8110176c:	18c7883a 	add	r3,r3,r3
81101770:	18c7883a 	add	r3,r3,r3
81101774:	10c5883a 	add	r2,r2,r3
81101778:	e0fff017 	ldw	r3,-64(fp)
8110177c:	10c00015 	stw	r3,0(r2)
81101780:	00001006 	br	811017c4 <bDdr2MemoryWriteTest+0x234>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81101784:	e0bfe717 	ldw	r2,-100(fp)
81101788:	10ffffc4 	addi	r3,r2,-1
8110178c:	00a04534 	movhi	r2,33044
81101790:	108bb204 	addi	r2,r2,11976
81101794:	18c7883a 	add	r3,r3,r3
81101798:	18c7883a 	add	r3,r3,r3
8110179c:	10c5883a 	add	r2,r2,r3
811017a0:	10800017 	ldw	r2,0(r2)
811017a4:	11000364 	muli	r4,r2,13
811017a8:	00a04534 	movhi	r2,33044
811017ac:	108bb204 	addi	r2,r2,11976
811017b0:	e0ffe717 	ldw	r3,-100(fp)
811017b4:	18c7883a 	add	r3,r3,r3
811017b8:	18c7883a 	add	r3,r3,r3
811017bc:	10c5883a 	add	r2,r2,r3
811017c0:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
811017c4:	e0bfe717 	ldw	r2,-100(fp)
811017c8:	10800044 	addi	r2,r2,1
811017cc:	e0bfe715 	stw	r2,-100(fp)
811017d0:	e0ffe717 	ldw	r3,-100(fp)
811017d4:	e0bfea17 	ldw	r2,-88(fp)
811017d8:	18bfdf16 	blt	r3,r2,81101758 <__reset+0xfb0e1758>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
811017dc:	e0bfea17 	ldw	r2,-88(fp)
811017e0:	10ffffc4 	addi	r3,r2,-1
811017e4:	00a04534 	movhi	r2,33044
811017e8:	108bb204 	addi	r2,r2,11976
811017ec:	18c7883a 	add	r3,r3,r3
811017f0:	18c7883a 	add	r3,r3,r3
811017f4:	10c7883a 	add	r3,r2,r3
811017f8:	00aaaaf4 	movhi	r2,43691
811017fc:	10aaaa84 	addi	r2,r2,-21846
81101800:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101804:	e0bfea17 	ldw	r2,-88(fp)
81101808:	10ffff84 	addi	r3,r2,-2
8110180c:	00a04534 	movhi	r2,33044
81101810:	108bb204 	addi	r2,r2,11976
81101814:	18c7883a 	add	r3,r3,r3
81101818:	18c7883a 	add	r3,r3,r3
8110181c:	10c7883a 	add	r3,r2,r3
81101820:	00955574 	movhi	r2,21845
81101824:	10955544 	addi	r2,r2,21845
81101828:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
8110182c:	e0bfea17 	ldw	r2,-88(fp)
81101830:	10ffff44 	addi	r3,r2,-3
81101834:	00a04534 	movhi	r2,33044
81101838:	108bb204 	addi	r2,r2,11976
8110183c:	18c7883a 	add	r3,r3,r3
81101840:	18c7883a 	add	r3,r3,r3
81101844:	10c5883a 	add	r2,r2,r3
81101848:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
8110184c:	e0bfea17 	ldw	r2,-88(fp)
81101850:	10ffff04 	addi	r3,r2,-4
81101854:	00a04534 	movhi	r2,33044
81101858:	108bb204 	addi	r2,r2,11976
8110185c:	18c7883a 	add	r3,r3,r3
81101860:	18c7883a 	add	r3,r3,r3
81101864:	10c5883a 	add	r2,r2,r3
81101868:	00ffffc4 	movi	r3,-1
8110186c:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
81101870:	00e04534 	movhi	r3,33044
81101874:	18cb7204 	addi	r3,r3,11720
81101878:	00a04534 	movhi	r2,33044
8110187c:	10b57004 	addi	r2,r2,-10816
81101880:	1009883a 	mov	r4,r2
81101884:	00800444 	movi	r2,17
81101888:	100d883a 	mov	r6,r2
8110188c:	200b883a 	mov	r5,r4
81101890:	1809883a 	mov	r4,r3
81101894:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
81101898:	d0a04f17 	ldw	r2,-32452(gp)
8110189c:	01604534 	movhi	r5,33044
811018a0:	294b7204 	addi	r5,r5,11720
811018a4:	1009883a 	mov	r4,r2
811018a8:	11120040 	call	81112004 <fprintf>
811018ac:	d0a07217 	ldw	r2,-32312(gp)
#endif
	iTimeStart = alt_nticks();
811018b0:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
811018b4:	e0bfe517 	ldw	r2,-108(fp)
811018b8:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
811018bc:	00810004 	movi	r2,1024
811018c0:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
811018c4:	e0ffe817 	ldw	r3,-96(fp)
811018c8:	e0bfee17 	ldw	r2,-72(fp)
811018cc:	1885283a 	div	r2,r3,r2
811018d0:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
811018d4:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
811018d8:	00003a06 	br	811019c4 <bDdr2MemoryWriteTest+0x434>
		iNRemainedLen = uliByteLen - iNPos;
811018dc:	e0bfeb17 	ldw	r2,-84(fp)
811018e0:	e0ffe617 	ldw	r3,-104(fp)
811018e4:	1885c83a 	sub	r2,r3,r2
811018e8:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
811018ec:	e0bfe817 	ldw	r2,-96(fp)
811018f0:	e0fff217 	ldw	r3,-56(fp)
811018f4:	1880060e 	bge	r3,r2,81101910 <bDdr2MemoryWriteTest+0x380>
			iNAccessLen = iNRemainedLen;
811018f8:	e0bff217 	ldw	r2,-56(fp)
811018fc:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101900:	e0ffe817 	ldw	r3,-96(fp)
81101904:	e0bfee17 	ldw	r2,-72(fp)
81101908:	1885283a 	div	r2,r3,r2
8110190c:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
81101910:	e0bfe817 	ldw	r2,-96(fp)
81101914:	100d883a 	mov	r6,r2
81101918:	01604534 	movhi	r5,33044
8110191c:	294bb204 	addi	r5,r5,11976
81101920:	e13fe917 	ldw	r4,-92(fp)
81101924:	11130b40 	call	811130b4 <memcpy>
		pxDes += iNItemNum;
81101928:	e0bfea17 	ldw	r2,-88(fp)
8110192c:	1085883a 	add	r2,r2,r2
81101930:	1085883a 	add	r2,r2,r2
81101934:	1007883a 	mov	r3,r2
81101938:	e0bfe917 	ldw	r2,-92(fp)
8110193c:	10c5883a 	add	r2,r2,r3
81101940:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
81101944:	e0ffeb17 	ldw	r3,-84(fp)
81101948:	e0bfe817 	ldw	r2,-96(fp)
8110194c:	1885883a 	add	r2,r3,r2
81101950:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101954:	e0bfec17 	ldw	r2,-80(fp)
81101958:	10800288 	cmpgei	r2,r2,10
8110195c:	1000191e 	bne	r2,zero,811019c4 <bDdr2MemoryWriteTest+0x434>
81101960:	e0bfec17 	ldw	r2,-80(fp)
81101964:	1085883a 	add	r2,r2,r2
81101968:	1085883a 	add	r2,r2,r2
8110196c:	e0ffe504 	addi	r3,fp,-108
81101970:	1885883a 	add	r2,r3,r2
81101974:	10800e04 	addi	r2,r2,56
81101978:	10800017 	ldw	r2,0(r2)
8110197c:	e0ffeb17 	ldw	r3,-84(fp)
81101980:	18801036 	bltu	r3,r2,811019c4 <bDdr2MemoryWriteTest+0x434>
			iNProgressIndex++;
81101984:	e0bfec17 	ldw	r2,-80(fp)
81101988:	10800044 	addi	r2,r2,1
8110198c:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101990:	e0bfec17 	ldw	r2,-80(fp)
81101994:	108002a4 	muli	r2,r2,10
81101998:	100d883a 	mov	r6,r2
8110199c:	01604534 	movhi	r5,33044
811019a0:	29757504 	addi	r5,r5,-10796
811019a4:	01204534 	movhi	r4,33044
811019a8:	210b7204 	addi	r4,r4,11720
811019ac:	11139940 	call	81113994 <sprintf>
			debug(fp, cDebugBuffer);
811019b0:	d0a04f17 	ldw	r2,-32452(gp)
811019b4:	01604534 	movhi	r5,33044
811019b8:	294b7204 	addi	r5,r5,11720
811019bc:	1009883a 	mov	r4,r2
811019c0:	11120040 	call	81112004 <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
811019c4:	e0ffeb17 	ldw	r3,-84(fp)
811019c8:	e0bfe617 	ldw	r2,-104(fp)
811019cc:	18bfc336 	bltu	r3,r2,811018dc <__reset+0xfb0e18dc>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
811019d0:	1127ab40 	call	81127ab4 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811019d4:	00a04534 	movhi	r2,33044
811019d8:	108b7204 	addi	r2,r2,11720
811019dc:	00c00284 	movi	r3,10
811019e0:	10c00005 	stb	r3,0(r2)
811019e4:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811019e8:	d0a04f17 	ldw	r2,-32452(gp)
811019ec:	01604534 	movhi	r5,33044
811019f0:	294b7204 	addi	r5,r5,11720
811019f4:	1009883a 	mov	r4,r2
811019f8:	11120040 	call	81112004 <fprintf>
811019fc:	d0e07217 	ldw	r3,-32312(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101a00:	e0bff117 	ldw	r2,-60(fp)
81101a04:	1885c83a 	sub	r2,r3,r2
81101a08:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
81101a0c:	e0bfed17 	ldw	r2,-76(fp)
81101a10:	10001e26 	beq	r2,zero,81101a8c <bDdr2MemoryWriteTest+0x4fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101a14:	e13fef17 	ldw	r4,-68(fp)
81101a18:	11112400 	call	81111240 <__floatsisf>
81101a1c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101a20:	d0a07117 	ldw	r2,-32316(gp)
81101a24:	1009883a 	mov	r4,r2
81101a28:	111136c0 	call	8111136c <__floatunsisf>
81101a2c:	1007883a 	mov	r3,r2
81101a30:	180b883a 	mov	r5,r3
81101a34:	8009883a 	mov	r4,r16
81101a38:	11109f40 	call	811109f4 <__divsf3>
81101a3c:	1007883a 	mov	r3,r2
81101a40:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101a44:	1009883a 	mov	r4,r2
81101a48:	1111b840 	call	81111b84 <__extendsfdf2>
81101a4c:	1009883a 	mov	r4,r2
81101a50:	180b883a 	mov	r5,r3
81101a54:	d9400015 	stw	r5,0(sp)
81101a58:	200f883a 	mov	r7,r4
81101a5c:	e1bfe617 	ldw	r6,-104(fp)
81101a60:	01604534 	movhi	r5,33044
81101a64:	29757704 	addi	r5,r5,-10788
81101a68:	01204534 	movhi	r4,33044
81101a6c:	210b7204 	addi	r4,r4,11720
81101a70:	11139940 	call	81113994 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101a74:	d0a04f17 	ldw	r2,-32452(gp)
81101a78:	01604534 	movhi	r5,33044
81101a7c:	294b7204 	addi	r5,r5,11720
81101a80:	1009883a 	mov	r4,r2
81101a84:	11120040 	call	81112004 <fprintf>
81101a88:	00000f06 	br	81101ac8 <bDdr2MemoryWriteTest+0x538>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81101a8c:	00e04534 	movhi	r3,33044
81101a90:	18cb7204 	addi	r3,r3,11720
81101a94:	00a04534 	movhi	r2,33044
81101a98:	10b58304 	addi	r2,r2,-10740
81101a9c:	1009883a 	mov	r4,r2
81101aa0:	00800584 	movi	r2,22
81101aa4:	100d883a 	mov	r6,r2
81101aa8:	200b883a 	mov	r5,r4
81101aac:	1809883a 	mov	r4,r3
81101ab0:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
81101ab4:	d0a04f17 	ldw	r2,-32452(gp)
81101ab8:	01604534 	movhi	r5,33044
81101abc:	294b7204 	addi	r5,r5,11720
81101ac0:	1009883a 	mov	r4,r2
81101ac4:	11120040 	call	81112004 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101ac8:	00a04534 	movhi	r2,33044
81101acc:	108b7204 	addi	r2,r2,11720
81101ad0:	00c00284 	movi	r3,10
81101ad4:	10c00005 	stb	r3,0(r2)
81101ad8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101adc:	d0a04f17 	ldw	r2,-32452(gp)
81101ae0:	01604534 	movhi	r5,33044
81101ae4:	294b7204 	addi	r5,r5,11720
81101ae8:	1009883a 	mov	r4,r2
81101aec:	11120040 	call	81112004 <fprintf>
#endif

	return bSuccess;
81101af0:	e0bfed17 	ldw	r2,-76(fp)
}
81101af4:	e6fffe04 	addi	sp,fp,-8
81101af8:	dfc00317 	ldw	ra,12(sp)
81101afc:	df000217 	ldw	fp,8(sp)
81101b00:	dc400117 	ldw	r17,4(sp)
81101b04:	dc000017 	ldw	r16,0(sp)
81101b08:	dec00404 	addi	sp,sp,16
81101b0c:	f800283a 	ret

81101b10 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101b10:	deffe204 	addi	sp,sp,-120
81101b14:	de00012e 	bgeu	sp,et,81101b1c <bDdr2MemoryReadTest+0xc>
81101b18:	003b68fa 	trap	3
81101b1c:	dfc01d15 	stw	ra,116(sp)
81101b20:	df001c15 	stw	fp,112(sp)
81101b24:	dc401b15 	stw	r17,108(sp)
81101b28:	dc001a15 	stw	r16,104(sp)
81101b2c:	df001c04 	addi	fp,sp,112
81101b30:	2005883a 	mov	r2,r4
81101b34:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101b38:	00e04534 	movhi	r3,33044
81101b3c:	18cb7204 	addi	r3,r3,11720
81101b40:	00a04534 	movhi	r2,33044
81101b44:	10b58904 	addi	r2,r2,-10716
81101b48:	1009883a 	mov	r4,r2
81101b4c:	008009c4 	movi	r2,39
81101b50:	100d883a 	mov	r6,r2
81101b54:	200b883a 	mov	r5,r4
81101b58:	1809883a 	mov	r4,r3
81101b5c:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
81101b60:	d0a04f17 	ldw	r2,-32452(gp)
81101b64:	01604534 	movhi	r5,33044
81101b68:	294b7204 	addi	r5,r5,11720
81101b6c:	1009883a 	mov	r4,r2
81101b70:	11120040 	call	81112004 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101b74:	00800044 	movi	r2,1
81101b78:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101b7c:	e0bffd03 	ldbu	r2,-12(fp)
81101b80:	10c00060 	cmpeqi	r3,r2,1
81101b84:	1800031e 	bne	r3,zero,81101b94 <bDdr2MemoryReadTest+0x84>
81101b88:	108000a0 	cmpeqi	r2,r2,2
81101b8c:	1000081e 	bne	r2,zero,81101bb0 <bDdr2MemoryReadTest+0xa0>
81101b90:	00000e06 	br	81101bcc <bDdr2MemoryReadTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b94:	e0bffd03 	ldbu	r2,-12(fp)
81101b98:	1009883a 	mov	r4,r2
81101b9c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101ba0:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101ba4:	00a00034 	movhi	r2,32768
81101ba8:	e0bfe715 	stw	r2,-100(fp)
		break;
81101bac:	00001906 	br	81101c14 <bDdr2MemoryReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101bb0:	e0bffd03 	ldbu	r2,-12(fp)
81101bb4:	1009883a 	mov	r4,r2
81101bb8:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101bbc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101bc0:	00a00034 	movhi	r2,32768
81101bc4:	e0bfe715 	stw	r2,-100(fp)
		break;
81101bc8:	00001206 	br	81101c14 <bDdr2MemoryReadTest+0x104>
	default:
		bSuccess = FALSE;
81101bcc:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101bd0:	00e04534 	movhi	r3,33044
81101bd4:	18cb7204 	addi	r3,r3,11720
81101bd8:	00a04534 	movhi	r2,33044
81101bdc:	10b37104 	addi	r2,r2,-12860
81101be0:	1009883a 	mov	r4,r2
81101be4:	00800bc4 	movi	r2,47
81101be8:	100d883a 	mov	r6,r2
81101bec:	200b883a 	mov	r5,r4
81101bf0:	1809883a 	mov	r4,r3
81101bf4:	11130b40 	call	811130b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101bf8:	d0a04f17 	ldw	r2,-32452(gp)
81101bfc:	01604534 	movhi	r5,33044
81101c00:	294b7204 	addi	r5,r5,11720
81101c04:	1009883a 	mov	r4,r2
81101c08:	11120040 	call	81112004 <fprintf>
		;
#endif
		return bSuccess;
81101c0c:	e0bfe517 	ldw	r2,-108(fp)
81101c10:	0000fc06 	br	81102004 <bDdr2MemoryReadTest+0x4f4>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101c14:	e0bfe717 	ldw	r2,-100(fp)
81101c18:	1004d53a 	srli	r2,r2,20
81101c1c:	100d883a 	mov	r6,r2
81101c20:	01604534 	movhi	r5,33044
81101c24:	29759304 	addi	r5,r5,-10676
81101c28:	01204534 	movhi	r4,33044
81101c2c:	210b7204 	addi	r4,r4,11720
81101c30:	11139940 	call	81113994 <sprintf>
	debug(fp, cDebugBuffer);
81101c34:	d0a04f17 	ldw	r2,-32452(gp)
81101c38:	01604534 	movhi	r5,33044
81101c3c:	294b7204 	addi	r5,r5,11720
81101c40:	1009883a 	mov	r4,r2
81101c44:	11120040 	call	81112004 <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101c48:	00804004 	movi	r2,256
81101c4c:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101c50:	00800104 	movi	r2,4
81101c54:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101c58:	e0ffec17 	ldw	r3,-80(fp)
81101c5c:	e0bfef17 	ldw	r2,-68(fp)
81101c60:	1885383a 	mul	r2,r3,r2
81101c64:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101c68:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101c6c:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101c70:	e03fe815 	stw	zero,-96(fp)
81101c74:	00001506 	br	81101ccc <bDdr2MemoryReadTest+0x1bc>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101c78:	e0ffe717 	ldw	r3,-100(fp)
81101c7c:	00b33374 	movhi	r2,52429
81101c80:	10b33344 	addi	r2,r2,-13107
81101c84:	1888383a 	mulxuu	r4,r3,r2
81101c88:	1885383a 	mul	r2,r3,r2
81101c8c:	1021883a 	mov	r16,r2
81101c90:	2023883a 	mov	r17,r4
81101c94:	8804d0fa 	srli	r2,r17,3
81101c98:	e0ffe817 	ldw	r3,-96(fp)
81101c9c:	18c00044 	addi	r3,r3,1
81101ca0:	10c7383a 	mul	r3,r2,r3
81101ca4:	e0bfe817 	ldw	r2,-96(fp)
81101ca8:	1085883a 	add	r2,r2,r2
81101cac:	1085883a 	add	r2,r2,r2
81101cb0:	e13fe504 	addi	r4,fp,-108
81101cb4:	2085883a 	add	r2,r4,r2
81101cb8:	10800e04 	addi	r2,r2,56
81101cbc:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101cc0:	e0bfe817 	ldw	r2,-96(fp)
81101cc4:	10800044 	addi	r2,r2,1
81101cc8:	e0bfe815 	stw	r2,-96(fp)
81101ccc:	e0bfe817 	ldw	r2,-96(fp)
81101cd0:	10800290 	cmplti	r2,r2,10
81101cd4:	103fe81e 	bne	r2,zero,81101c78 <__reset+0xfb0e1c78>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101cd8:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101cdc:	00e04534 	movhi	r3,33044
81101ce0:	18cb7204 	addi	r3,r3,11720
81101ce4:	00a04534 	movhi	r2,33044
81101ce8:	10b59904 	addi	r2,r2,-10652
81101cec:	1009883a 	mov	r4,r2
81101cf0:	008006c4 	movi	r2,27
81101cf4:	100d883a 	mov	r6,r2
81101cf8:	200b883a 	mov	r5,r4
81101cfc:	1809883a 	mov	r4,r3
81101d00:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
81101d04:	d0a04f17 	ldw	r2,-32452(gp)
81101d08:	01604534 	movhi	r5,33044
81101d0c:	294b7204 	addi	r5,r5,11720
81101d10:	1009883a 	mov	r4,r2
81101d14:	11120040 	call	81112004 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101d18:	d0a07217 	ldw	r2,-32312(gp)
#endif
	iTimeStart = alt_nticks();
81101d1c:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101d20:	e0bfe617 	ldw	r2,-104(fp)
81101d24:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101d28:	00810004 	movi	r2,1024
81101d2c:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101d30:	e0ffe917 	ldw	r3,-92(fp)
81101d34:	e0bfef17 	ldw	r2,-68(fp)
81101d38:	1885283a 	div	r2,r3,r2
81101d3c:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101d40:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101d44:	00006206 	br	81101ed0 <bDdr2MemoryReadTest+0x3c0>
		iNRemainedLen = uliByteLen - iNPos;
81101d48:	e0bfed17 	ldw	r2,-76(fp)
81101d4c:	e0ffe717 	ldw	r3,-100(fp)
81101d50:	1885c83a 	sub	r2,r3,r2
81101d54:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101d58:	e0bfe917 	ldw	r2,-92(fp)
81101d5c:	e0fff217 	ldw	r3,-56(fp)
81101d60:	1880060e 	bge	r3,r2,81101d7c <bDdr2MemoryReadTest+0x26c>
			iNAccessLen = iNRemainedLen;
81101d64:	e0bff217 	ldw	r2,-56(fp)
81101d68:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101d6c:	e0ffe917 	ldw	r3,-92(fp)
81101d70:	e0bfef17 	ldw	r2,-68(fp)
81101d74:	1885283a 	div	r2,r3,r2
81101d78:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101d7c:	00a04534 	movhi	r2,33044
81101d80:	108bb204 	addi	r2,r2,11976
81101d84:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d88:	e03fe815 	stw	zero,-96(fp)
81101d8c:	00002b06 	br	81101e3c <bDdr2MemoryReadTest+0x32c>
			if (*pxSrc++ != *pxDes++) {
81101d90:	e0bfeb17 	ldw	r2,-84(fp)
81101d94:	10c00104 	addi	r3,r2,4
81101d98:	e0ffeb15 	stw	r3,-84(fp)
81101d9c:	10c00017 	ldw	r3,0(r2)
81101da0:	e0bfea17 	ldw	r2,-88(fp)
81101da4:	11000104 	addi	r4,r2,4
81101da8:	e13fea15 	stw	r4,-88(fp)
81101dac:	10800017 	ldw	r2,0(r2)
81101db0:	18801f26 	beq	r3,r2,81101e30 <bDdr2MemoryReadTest+0x320>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101db4:	e0bfeb17 	ldw	r2,-84(fp)
81101db8:	10bfff04 	addi	r2,r2,-4
81101dbc:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101dc0:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101dc4:	00a04534 	movhi	r2,33044
81101dc8:	108bb204 	addi	r2,r2,11976
81101dcc:	e0ffe817 	ldw	r3,-96(fp)
81101dd0:	18c7883a 	add	r3,r3,r3
81101dd4:	18c7883a 	add	r3,r3,r3
81101dd8:	10c5883a 	add	r2,r2,r3
81101ddc:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101de0:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101de4:	e0ffed17 	ldw	r3,-76(fp)
81101de8:	e0bfef17 	ldw	r2,-68(fp)
81101dec:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101df0:	e0bfe817 	ldw	r2,-96(fp)
81101df4:	1885883a 	add	r2,r3,r2
81101df8:	d8800015 	stw	r2,0(sp)
81101dfc:	280f883a 	mov	r7,r5
81101e00:	200d883a 	mov	r6,r4
81101e04:	01604534 	movhi	r5,33044
81101e08:	2975a004 	addi	r5,r5,-10624
81101e0c:	01204534 	movhi	r4,33044
81101e10:	210b7204 	addi	r4,r4,11720
81101e14:	11139940 	call	81113994 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101e18:	d0a04f17 	ldw	r2,-32452(gp)
81101e1c:	01604534 	movhi	r5,33044
81101e20:	294b7204 	addi	r5,r5,11720
81101e24:	1009883a 	mov	r4,r2
81101e28:	11120040 	call	81112004 <fprintf>
#endif
				bSuccess = FALSE;
81101e2c:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101e30:	e0bfe817 	ldw	r2,-96(fp)
81101e34:	10800044 	addi	r2,r2,1
81101e38:	e0bfe815 	stw	r2,-96(fp)
81101e3c:	e0ffe817 	ldw	r3,-96(fp)
81101e40:	e0bfec17 	ldw	r2,-80(fp)
81101e44:	1880020e 	bge	r3,r2,81101e50 <bDdr2MemoryReadTest+0x340>
81101e48:	e0bfe517 	ldw	r2,-108(fp)
81101e4c:	103fd01e 	bne	r2,zero,81101d90 <__reset+0xfb0e1d90>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101e50:	e0ffed17 	ldw	r3,-76(fp)
81101e54:	e0bfe917 	ldw	r2,-92(fp)
81101e58:	1885883a 	add	r2,r3,r2
81101e5c:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101e60:	e0bfee17 	ldw	r2,-72(fp)
81101e64:	10800288 	cmpgei	r2,r2,10
81101e68:	1000191e 	bne	r2,zero,81101ed0 <bDdr2MemoryReadTest+0x3c0>
81101e6c:	e0bfee17 	ldw	r2,-72(fp)
81101e70:	1085883a 	add	r2,r2,r2
81101e74:	1085883a 	add	r2,r2,r2
81101e78:	e0ffe504 	addi	r3,fp,-108
81101e7c:	1885883a 	add	r2,r3,r2
81101e80:	10800e04 	addi	r2,r2,56
81101e84:	10800017 	ldw	r2,0(r2)
81101e88:	e0ffed17 	ldw	r3,-76(fp)
81101e8c:	18801036 	bltu	r3,r2,81101ed0 <bDdr2MemoryReadTest+0x3c0>
			iNProgressIndex++;
81101e90:	e0bfee17 	ldw	r2,-72(fp)
81101e94:	10800044 	addi	r2,r2,1
81101e98:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101e9c:	e0bfee17 	ldw	r2,-72(fp)
81101ea0:	108002a4 	muli	r2,r2,10
81101ea4:	100d883a 	mov	r6,r2
81101ea8:	01604534 	movhi	r5,33044
81101eac:	29757504 	addi	r5,r5,-10796
81101eb0:	01204534 	movhi	r4,33044
81101eb4:	210b7204 	addi	r4,r4,11720
81101eb8:	11139940 	call	81113994 <sprintf>
			debug(fp, cDebugBuffer);
81101ebc:	d0a04f17 	ldw	r2,-32452(gp)
81101ec0:	01604534 	movhi	r5,33044
81101ec4:	294b7204 	addi	r5,r5,11720
81101ec8:	1009883a 	mov	r4,r2
81101ecc:	11120040 	call	81112004 <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101ed0:	e0bfe517 	ldw	r2,-108(fp)
81101ed4:	10000326 	beq	r2,zero,81101ee4 <bDdr2MemoryReadTest+0x3d4>
81101ed8:	e0ffed17 	ldw	r3,-76(fp)
81101edc:	e0bfe717 	ldw	r2,-100(fp)
81101ee0:	18bf9936 	bltu	r3,r2,81101d48 <__reset+0xfb0e1d48>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101ee4:	00a04534 	movhi	r2,33044
81101ee8:	108b7204 	addi	r2,r2,11720
81101eec:	00c00284 	movi	r3,10
81101ef0:	10c00005 	stb	r3,0(r2)
81101ef4:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101ef8:	d0a04f17 	ldw	r2,-32452(gp)
81101efc:	01604534 	movhi	r5,33044
81101f00:	294b7204 	addi	r5,r5,11720
81101f04:	1009883a 	mov	r4,r2
81101f08:	11120040 	call	81112004 <fprintf>
81101f0c:	d0e07217 	ldw	r3,-32312(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101f10:	e0bff117 	ldw	r2,-60(fp)
81101f14:	1885c83a 	sub	r2,r3,r2
81101f18:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101f1c:	e0bfe517 	ldw	r2,-108(fp)
81101f20:	10001e26 	beq	r2,zero,81101f9c <bDdr2MemoryReadTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101f24:	e13ff017 	ldw	r4,-64(fp)
81101f28:	11112400 	call	81111240 <__floatsisf>
81101f2c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101f30:	d0a07117 	ldw	r2,-32316(gp)
81101f34:	1009883a 	mov	r4,r2
81101f38:	111136c0 	call	8111136c <__floatunsisf>
81101f3c:	1007883a 	mov	r3,r2
81101f40:	180b883a 	mov	r5,r3
81101f44:	8009883a 	mov	r4,r16
81101f48:	11109f40 	call	811109f4 <__divsf3>
81101f4c:	1007883a 	mov	r3,r2
81101f50:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101f54:	1009883a 	mov	r4,r2
81101f58:	1111b840 	call	81111b84 <__extendsfdf2>
81101f5c:	1009883a 	mov	r4,r2
81101f60:	180b883a 	mov	r5,r3
81101f64:	d9400015 	stw	r5,0(sp)
81101f68:	200f883a 	mov	r7,r4
81101f6c:	e1bfe717 	ldw	r6,-100(fp)
81101f70:	01604534 	movhi	r5,33044
81101f74:	2975ae04 	addi	r5,r5,-10568
81101f78:	01204534 	movhi	r4,33044
81101f7c:	210b7204 	addi	r4,r4,11720
81101f80:	11139940 	call	81113994 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101f84:	d0a04f17 	ldw	r2,-32452(gp)
81101f88:	01604534 	movhi	r5,33044
81101f8c:	294b7204 	addi	r5,r5,11720
81101f90:	1009883a 	mov	r4,r2
81101f94:	11120040 	call	81112004 <fprintf>
81101f98:	00000f06 	br	81101fd8 <bDdr2MemoryReadTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101f9c:	00e04534 	movhi	r3,33044
81101fa0:	18cb7204 	addi	r3,r3,11720
81101fa4:	00a04534 	movhi	r2,33044
81101fa8:	10b5ba04 	addi	r2,r2,-10520
81101fac:	1009883a 	mov	r4,r2
81101fb0:	00800544 	movi	r2,21
81101fb4:	100d883a 	mov	r6,r2
81101fb8:	200b883a 	mov	r5,r4
81101fbc:	1809883a 	mov	r4,r3
81101fc0:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
81101fc4:	d0a04f17 	ldw	r2,-32452(gp)
81101fc8:	01604534 	movhi	r5,33044
81101fcc:	294b7204 	addi	r5,r5,11720
81101fd0:	1009883a 	mov	r4,r2
81101fd4:	11120040 	call	81112004 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101fd8:	00a04534 	movhi	r2,33044
81101fdc:	108b7204 	addi	r2,r2,11720
81101fe0:	00c00284 	movi	r3,10
81101fe4:	10c00005 	stb	r3,0(r2)
81101fe8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101fec:	d0a04f17 	ldw	r2,-32452(gp)
81101ff0:	01604534 	movhi	r5,33044
81101ff4:	294b7204 	addi	r5,r5,11720
81101ff8:	1009883a 	mov	r4,r2
81101ffc:	11120040 	call	81112004 <fprintf>
#endif

	return bSuccess;
81102000:	e0bfe517 	ldw	r2,-108(fp)
}
81102004:	e6fffe04 	addi	sp,fp,-8
81102008:	dfc00317 	ldw	ra,12(sp)
8110200c:	df000217 	ldw	fp,8(sp)
81102010:	dc400117 	ldw	r17,4(sp)
81102014:	dc000017 	ldw	r16,0(sp)
81102018:	dec00404 	addi	sp,sp,16
8110201c:	f800283a 	ret

81102020 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102020:	deffec04 	addi	sp,sp,-80
81102024:	de00012e 	bgeu	sp,et,8110202c <bDdr2MemoryRandomWriteTest+0xc>
81102028:	003b68fa 	trap	3
8110202c:	dfc01315 	stw	ra,76(sp)
81102030:	df001215 	stw	fp,72(sp)
81102034:	dcc01115 	stw	r19,68(sp)
81102038:	dc801015 	stw	r18,64(sp)
8110203c:	dc400f15 	stw	r17,60(sp)
81102040:	dc000e15 	stw	r16,56(sp)
81102044:	df001204 	addi	fp,sp,72
81102048:	2005883a 	mov	r2,r4
8110204c:	e17ffa15 	stw	r5,-24(fp)
81102050:	e1bffb15 	stw	r6,-20(fp)
81102054:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81102058:	00e04534 	movhi	r3,33044
8110205c:	18cb7204 	addi	r3,r3,11720
81102060:	00a04534 	movhi	r2,33044
81102064:	10b5c004 	addi	r2,r2,-10496
81102068:	1009883a 	mov	r4,r2
8110206c:	00800bc4 	movi	r2,47
81102070:	100d883a 	mov	r6,r2
81102074:	200b883a 	mov	r5,r4
81102078:	1809883a 	mov	r4,r3
8110207c:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
81102080:	d0a04f17 	ldw	r2,-32452(gp)
81102084:	01604534 	movhi	r5,33044
81102088:	294b7204 	addi	r5,r5,11720
8110208c:	1009883a 	mov	r4,r2
81102090:	11120040 	call	81112004 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102094:	00800044 	movi	r2,1
81102098:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
8110209c:	e0bff903 	ldbu	r2,-28(fp)
811020a0:	10c00060 	cmpeqi	r3,r2,1
811020a4:	1800031e 	bne	r3,zero,811020b4 <bDdr2MemoryRandomWriteTest+0x94>
811020a8:	108000a0 	cmpeqi	r2,r2,2
811020ac:	1000081e 	bne	r2,zero,811020d0 <bDdr2MemoryRandomWriteTest+0xb0>
811020b0:	00000e06 	br	811020ec <bDdr2MemoryRandomWriteTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811020b4:	e0bff903 	ldbu	r2,-28(fp)
811020b8:	1009883a 	mov	r4,r2
811020bc:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811020c0:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811020c4:	00a00034 	movhi	r2,32768
811020c8:	e0bff015 	stw	r2,-64(fp)
		break;
811020cc:	00001906 	br	81102134 <bDdr2MemoryRandomWriteTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811020d0:	e0bff903 	ldbu	r2,-28(fp)
811020d4:	1009883a 	mov	r4,r2
811020d8:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811020dc:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811020e0:	00a00034 	movhi	r2,32768
811020e4:	e0bff015 	stw	r2,-64(fp)
		break;
811020e8:	00001206 	br	81102134 <bDdr2MemoryRandomWriteTest+0x114>
	default:
		bSuccess = FALSE;
811020ec:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811020f0:	00e04534 	movhi	r3,33044
811020f4:	18cb7204 	addi	r3,r3,11720
811020f8:	00a04534 	movhi	r2,33044
811020fc:	10b37104 	addi	r2,r2,-12860
81102100:	1009883a 	mov	r4,r2
81102104:	00800bc4 	movi	r2,47
81102108:	100d883a 	mov	r6,r2
8110210c:	200b883a 	mov	r5,r4
81102110:	1809883a 	mov	r4,r3
81102114:	11130b40 	call	811130b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102118:	d0a04f17 	ldw	r2,-32452(gp)
8110211c:	01604534 	movhi	r5,33044
81102120:	294b7204 	addi	r5,r5,11720
81102124:	1009883a 	mov	r4,r2
81102128:	11120040 	call	81112004 <fprintf>
		;
#endif
		return bSuccess;
8110212c:	e0bff417 	ldw	r2,-48(fp)
81102130:	0000ce06 	br	8110246c <bDdr2MemoryRandomWriteTest+0x44c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102134:	e0bff017 	ldw	r2,-64(fp)
81102138:	1004d53a 	srli	r2,r2,20
8110213c:	100d883a 	mov	r6,r2
81102140:	01604534 	movhi	r5,33044
81102144:	29756a04 	addi	r5,r5,-10840
81102148:	01204534 	movhi	r4,33044
8110214c:	210b7204 	addi	r4,r4,11720
81102150:	11139940 	call	81113994 <sprintf>
	debug(fp, cDebugBuffer);
81102154:	d0a04f17 	ldw	r2,-32452(gp)
81102158:	01604534 	movhi	r5,33044
8110215c:	294b7204 	addi	r5,r5,11720
81102160:	1009883a 	mov	r4,r2
81102164:	11120040 	call	81112004 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102168:	d0a07217 	ldw	r2,-32312(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
8110216c:	d0a03715 	stw	r2,-32548(gp)
	uliCurrentState = uliInitialState;
81102170:	d0a03717 	ldw	r2,-32548(gp)
81102174:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102178:	e0ffef17 	ldw	r3,-68(fp)
8110217c:	e0bff017 	ldw	r2,-64(fp)
81102180:	1885883a 	add	r2,r3,r2
81102184:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102188:	e0fff017 	ldw	r3,-64(fp)
8110218c:	00b33374 	movhi	r2,52429
81102190:	10b33344 	addi	r2,r2,-13107
81102194:	1888383a 	mulxuu	r4,r3,r2
81102198:	1885383a 	mul	r2,r3,r2
8110219c:	1025883a 	mov	r18,r2
811021a0:	2027883a 	mov	r19,r4
811021a4:	9806d13a 	srli	r3,r19,4
811021a8:	e0bfef17 	ldw	r2,-68(fp)
811021ac:	1885883a 	add	r2,r3,r2
811021b0:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
811021b4:	00800144 	movi	r2,5
811021b8:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
811021bc:	00e04534 	movhi	r3,33044
811021c0:	18cb7204 	addi	r3,r3,11720
811021c4:	00a04534 	movhi	r2,33044
811021c8:	10b5cc04 	addi	r2,r2,-10448
811021cc:	1009883a 	mov	r4,r2
811021d0:	00800584 	movi	r2,22
811021d4:	100d883a 	mov	r6,r2
811021d8:	200b883a 	mov	r5,r4
811021dc:	1809883a 	mov	r4,r3
811021e0:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
811021e4:	d0a04f17 	ldw	r2,-32452(gp)
811021e8:	01604534 	movhi	r5,33044
811021ec:	294b7204 	addi	r5,r5,11720
811021f0:	1009883a 	mov	r4,r2
811021f4:	11120040 	call	81112004 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
811021f8:	e0bffa17 	ldw	r2,-24(fp)
811021fc:	10800058 	cmpnei	r2,r2,1
81102200:	10000a1e 	bne	r2,zero,8110222c <bDdr2MemoryRandomWriteTest+0x20c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102204:	01604534 	movhi	r5,33044
81102208:	2975d204 	addi	r5,r5,-10424
8110220c:	01204534 	movhi	r4,33044
81102210:	210b7204 	addi	r4,r4,11720
81102214:	11139940 	call	81113994 <sprintf>
		debug(fp, cDebugBuffer);
81102218:	d0a04f17 	ldw	r2,-32452(gp)
8110221c:	01604534 	movhi	r5,33044
81102220:	294b7204 	addi	r5,r5,11720
81102224:	1009883a 	mov	r4,r2
81102228:	11120040 	call	81112004 <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
8110222c:	e03ff615 	stw	zero,-40(fp)
81102230:	d0a07217 	ldw	r2,-32312(gp)

	TimeStart = alt_nticks();
81102234:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102238:	e0bfef17 	ldw	r2,-68(fp)
8110223c:	e0bff115 	stw	r2,-60(fp)
81102240:	00002c06 	br	811022f4 <bDdr2MemoryRandomWriteTest+0x2d4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
81102244:	e0bff804 	addi	r2,fp,-32
81102248:	1009883a 	mov	r4,r2
8110224c:	110292c0 	call	8110292c <uliXorshift32>
81102250:	1007883a 	mov	r3,r2
81102254:	e0bff117 	ldw	r2,-60(fp)
81102258:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
8110225c:	e0bffa17 	ldw	r2,-24(fp)
81102260:	10800060 	cmpeqi	r2,r2,1
81102264:	1009883a 	mov	r4,r2
81102268:	e0bff117 	ldw	r2,-60(fp)
8110226c:	e0fff217 	ldw	r3,-56(fp)
81102270:	1885803a 	cmpltu	r2,r3,r2
81102274:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
81102278:	10803fcc 	andi	r2,r2,255
8110227c:	10001a26 	beq	r2,zero,811022e8 <bDdr2MemoryRandomWriteTest+0x2c8>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102280:	e0bff303 	ldbu	r2,-52(fp)
81102284:	100d883a 	mov	r6,r2
81102288:	01604534 	movhi	r5,33044
8110228c:	2975d404 	addi	r5,r5,-10416
81102290:	01204534 	movhi	r4,33044
81102294:	210b7204 	addi	r4,r4,11720
81102298:	11139940 	call	81113994 <sprintf>
			debug(fp, cDebugBuffer);
8110229c:	d0a04f17 	ldw	r2,-32452(gp)
811022a0:	01604534 	movhi	r5,33044
811022a4:	294b7204 	addi	r5,r5,11720
811022a8:	1009883a 	mov	r4,r2
811022ac:	11120040 	call	81112004 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811022b0:	e0fff017 	ldw	r3,-64(fp)
811022b4:	00b33374 	movhi	r2,52429
811022b8:	10b33344 	addi	r2,r2,-13107
811022bc:	1888383a 	mulxuu	r4,r3,r2
811022c0:	1885383a 	mul	r2,r3,r2
811022c4:	1021883a 	mov	r16,r2
811022c8:	2023883a 	mov	r17,r4
811022cc:	8804d13a 	srli	r2,r17,4
811022d0:	e0fff217 	ldw	r3,-56(fp)
811022d4:	1885883a 	add	r2,r3,r2
811022d8:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
811022dc:	e0bff303 	ldbu	r2,-52(fp)
811022e0:	10800144 	addi	r2,r2,5
811022e4:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
811022e8:	e0bff117 	ldw	r2,-60(fp)
811022ec:	10800104 	addi	r2,r2,4
811022f0:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
811022f4:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
811022f8:	e0bff517 	ldw	r2,-44(fp)
811022fc:	18bfd136 	bltu	r3,r2,81102244 <__reset+0xfb0e2244>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102300:	1127ab40 	call	81127ab4 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102304:	e0bffa17 	ldw	r2,-24(fp)
81102308:	10800058 	cmpnei	r2,r2,1
8110230c:	10000a1e 	bne	r2,zero,81102338 <bDdr2MemoryRandomWriteTest+0x318>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
81102310:	01604534 	movhi	r5,33044
81102314:	2975d704 	addi	r5,r5,-10404
81102318:	01204534 	movhi	r4,33044
8110231c:	210b7204 	addi	r4,r4,11720
81102320:	11139940 	call	81113994 <sprintf>
		debug(fp, cDebugBuffer);
81102324:	d0a04f17 	ldw	r2,-32452(gp)
81102328:	01604534 	movhi	r5,33044
8110232c:	294b7204 	addi	r5,r5,11720
81102330:	1009883a 	mov	r4,r2
81102334:	11120040 	call	81112004 <fprintf>
#endif
	}

	if (bSuccess) {
81102338:	e0bff417 	ldw	r2,-48(fp)
8110233c:	10003126 	beq	r2,zero,81102404 <bDdr2MemoryRandomWriteTest+0x3e4>
		if (bTime == TRUE) {
81102340:	e0bffb17 	ldw	r2,-20(fp)
81102344:	10800058 	cmpnei	r2,r2,1
81102348:	1000221e 	bne	r2,zero,811023d4 <bDdr2MemoryRandomWriteTest+0x3b4>
8110234c:	d0e07217 	ldw	r3,-32312(gp)
			TimeElapsed = alt_nticks() - TimeStart;
81102350:	e0bff717 	ldw	r2,-36(fp)
81102354:	1885c83a 	sub	r2,r3,r2
81102358:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
8110235c:	e13ff617 	ldw	r4,-40(fp)
81102360:	11112400 	call	81111240 <__floatsisf>
81102364:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102368:	d0a07117 	ldw	r2,-32316(gp)
8110236c:	1009883a 	mov	r4,r2
81102370:	111136c0 	call	8111136c <__floatunsisf>
81102374:	1007883a 	mov	r3,r2
81102378:	180b883a 	mov	r5,r3
8110237c:	8009883a 	mov	r4,r16
81102380:	11109f40 	call	811109f4 <__divsf3>
81102384:	1007883a 	mov	r3,r2
81102388:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
8110238c:	1009883a 	mov	r4,r2
81102390:	1111b840 	call	81111b84 <__extendsfdf2>
81102394:	1009883a 	mov	r4,r2
81102398:	180b883a 	mov	r5,r3
8110239c:	d9400015 	stw	r5,0(sp)
811023a0:	200f883a 	mov	r7,r4
811023a4:	e1bff017 	ldw	r6,-64(fp)
811023a8:	01604534 	movhi	r5,33044
811023ac:	2975da04 	addi	r5,r5,-10392
811023b0:	01204534 	movhi	r4,33044
811023b4:	210b7204 	addi	r4,r4,11720
811023b8:	11139940 	call	81113994 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811023bc:	d0a04f17 	ldw	r2,-32452(gp)
811023c0:	01604534 	movhi	r5,33044
811023c4:	294b7204 	addi	r5,r5,11720
811023c8:	1009883a 	mov	r4,r2
811023cc:	11120040 	call	81112004 <fprintf>
811023d0:	00001b06 	br	81102440 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
811023d4:	e1bff017 	ldw	r6,-64(fp)
811023d8:	01604534 	movhi	r5,33044
811023dc:	2975e604 	addi	r5,r5,-10344
811023e0:	01204534 	movhi	r4,33044
811023e4:	210b7204 	addi	r4,r4,11720
811023e8:	11139940 	call	81113994 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
811023ec:	d0a04f17 	ldw	r2,-32452(gp)
811023f0:	01604534 	movhi	r5,33044
811023f4:	294b7204 	addi	r5,r5,11720
811023f8:	1009883a 	mov	r4,r2
811023fc:	11120040 	call	81112004 <fprintf>
81102400:	00000f06 	br	81102440 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102404:	00e04534 	movhi	r3,33044
81102408:	18cb7204 	addi	r3,r3,11720
8110240c:	00a04534 	movhi	r2,33044
81102410:	10b58304 	addi	r2,r2,-10740
81102414:	1009883a 	mov	r4,r2
81102418:	00800584 	movi	r2,22
8110241c:	100d883a 	mov	r6,r2
81102420:	200b883a 	mov	r5,r4
81102424:	1809883a 	mov	r4,r3
81102428:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
8110242c:	d0a04f17 	ldw	r2,-32452(gp)
81102430:	01604534 	movhi	r5,33044
81102434:	294b7204 	addi	r5,r5,11720
81102438:	1009883a 	mov	r4,r2
8110243c:	11120040 	call	81112004 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81102440:	00a04534 	movhi	r2,33044
81102444:	108b7204 	addi	r2,r2,11720
81102448:	00c00284 	movi	r3,10
8110244c:	10c00005 	stb	r3,0(r2)
81102450:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102454:	d0a04f17 	ldw	r2,-32452(gp)
81102458:	01604534 	movhi	r5,33044
8110245c:	294b7204 	addi	r5,r5,11720
81102460:	1009883a 	mov	r4,r2
81102464:	11120040 	call	81112004 <fprintf>
#endif

	return bSuccess;
81102468:	e0bff417 	ldw	r2,-48(fp)
}
8110246c:	e6fffc04 	addi	sp,fp,-16
81102470:	dfc00517 	ldw	ra,20(sp)
81102474:	df000417 	ldw	fp,16(sp)
81102478:	dcc00317 	ldw	r19,12(sp)
8110247c:	dc800217 	ldw	r18,8(sp)
81102480:	dc400117 	ldw	r17,4(sp)
81102484:	dc000017 	ldw	r16,0(sp)
81102488:	dec00604 	addi	sp,sp,24
8110248c:	f800283a 	ret

81102490 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102490:	deffec04 	addi	sp,sp,-80
81102494:	de00012e 	bgeu	sp,et,8110249c <bDdr2MemoryRandomReadTest+0xc>
81102498:	003b68fa 	trap	3
8110249c:	dfc01315 	stw	ra,76(sp)
811024a0:	df001215 	stw	fp,72(sp)
811024a4:	dcc01115 	stw	r19,68(sp)
811024a8:	dc801015 	stw	r18,64(sp)
811024ac:	dc400f15 	stw	r17,60(sp)
811024b0:	dc000e15 	stw	r16,56(sp)
811024b4:	df001204 	addi	fp,sp,72
811024b8:	2005883a 	mov	r2,r4
811024bc:	e17ffa15 	stw	r5,-24(fp)
811024c0:	e1bffb15 	stw	r6,-20(fp)
811024c4:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
811024c8:	00e04534 	movhi	r3,33044
811024cc:	18cb7204 	addi	r3,r3,11720
811024d0:	00a04534 	movhi	r2,33044
811024d4:	10b5f004 	addi	r2,r2,-10304
811024d8:	1009883a 	mov	r4,r2
811024dc:	00800b84 	movi	r2,46
811024e0:	100d883a 	mov	r6,r2
811024e4:	200b883a 	mov	r5,r4
811024e8:	1809883a 	mov	r4,r3
811024ec:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
811024f0:	d0a04f17 	ldw	r2,-32452(gp)
811024f4:	01604534 	movhi	r5,33044
811024f8:	294b7204 	addi	r5,r5,11720
811024fc:	1009883a 	mov	r4,r2
81102500:	11120040 	call	81112004 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102504:	00800044 	movi	r2,1
81102508:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
8110250c:	e0bff903 	ldbu	r2,-28(fp)
81102510:	10c00060 	cmpeqi	r3,r2,1
81102514:	1800031e 	bne	r3,zero,81102524 <bDdr2MemoryRandomReadTest+0x94>
81102518:	108000a0 	cmpeqi	r2,r2,2
8110251c:	1000081e 	bne	r2,zero,81102540 <bDdr2MemoryRandomReadTest+0xb0>
81102520:	00000e06 	br	8110255c <bDdr2MemoryRandomReadTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102524:	e0bff903 	ldbu	r2,-28(fp)
81102528:	1009883a 	mov	r4,r2
8110252c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102530:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102534:	00a00034 	movhi	r2,32768
81102538:	e0bff115 	stw	r2,-60(fp)
		break;
8110253c:	00001906 	br	811025a4 <bDdr2MemoryRandomReadTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102540:	e0bff903 	ldbu	r2,-28(fp)
81102544:	1009883a 	mov	r4,r2
81102548:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110254c:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102550:	00a00034 	movhi	r2,32768
81102554:	e0bff115 	stw	r2,-60(fp)
		break;
81102558:	00001206 	br	811025a4 <bDdr2MemoryRandomReadTest+0x114>
	default:
		bSuccess = FALSE;
8110255c:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102560:	00e04534 	movhi	r3,33044
81102564:	18cb7204 	addi	r3,r3,11720
81102568:	00a04534 	movhi	r2,33044
8110256c:	10b37104 	addi	r2,r2,-12860
81102570:	1009883a 	mov	r4,r2
81102574:	00800bc4 	movi	r2,47
81102578:	100d883a 	mov	r6,r2
8110257c:	200b883a 	mov	r5,r4
81102580:	1809883a 	mov	r4,r3
81102584:	11130b40 	call	811130b4 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102588:	d0a04f17 	ldw	r2,-32452(gp)
8110258c:	01604534 	movhi	r5,33044
81102590:	294b7204 	addi	r5,r5,11720
81102594:	1009883a 	mov	r4,r2
81102598:	11120040 	call	81112004 <fprintf>
		;
#endif
		return bSuccess;
8110259c:	e0bfef17 	ldw	r2,-68(fp)
811025a0:	0000d906 	br	81102908 <bDdr2MemoryRandomReadTest+0x478>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811025a4:	e0bff117 	ldw	r2,-60(fp)
811025a8:	1004d53a 	srli	r2,r2,20
811025ac:	100d883a 	mov	r6,r2
811025b0:	01604534 	movhi	r5,33044
811025b4:	29756a04 	addi	r5,r5,-10840
811025b8:	01204534 	movhi	r4,33044
811025bc:	210b7204 	addi	r4,r4,11720
811025c0:	11139940 	call	81113994 <sprintf>
	debug(fp, cDebugBuffer);
811025c4:	d0a04f17 	ldw	r2,-32452(gp)
811025c8:	01604534 	movhi	r5,33044
811025cc:	294b7204 	addi	r5,r5,11720
811025d0:	1009883a 	mov	r4,r2
811025d4:	11120040 	call	81112004 <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
811025d8:	d0a03717 	ldw	r2,-32548(gp)
811025dc:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
811025e0:	e0fff017 	ldw	r3,-64(fp)
811025e4:	e0bff117 	ldw	r2,-60(fp)
811025e8:	1885883a 	add	r2,r3,r2
811025ec:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
811025f0:	e0fff117 	ldw	r3,-60(fp)
811025f4:	00b33374 	movhi	r2,52429
811025f8:	10b33344 	addi	r2,r2,-13107
811025fc:	1888383a 	mulxuu	r4,r3,r2
81102600:	1885383a 	mul	r2,r3,r2
81102604:	1025883a 	mov	r18,r2
81102608:	2027883a 	mov	r19,r4
8110260c:	9806d13a 	srli	r3,r19,4
81102610:	e0bff017 	ldw	r2,-64(fp)
81102614:	1885883a 	add	r2,r3,r2
81102618:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
8110261c:	00800144 	movi	r2,5
81102620:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
81102624:	00e04534 	movhi	r3,33044
81102628:	18cb7204 	addi	r3,r3,11720
8110262c:	00a04534 	movhi	r2,33044
81102630:	10b5fc04 	addi	r2,r2,-10256
81102634:	1009883a 	mov	r4,r2
81102638:	00800604 	movi	r2,24
8110263c:	100d883a 	mov	r6,r2
81102640:	200b883a 	mov	r5,r4
81102644:	1809883a 	mov	r4,r3
81102648:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
8110264c:	d0a04f17 	ldw	r2,-32452(gp)
81102650:	01604534 	movhi	r5,33044
81102654:	294b7204 	addi	r5,r5,11720
81102658:	1009883a 	mov	r4,r2
8110265c:	11120040 	call	81112004 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102660:	e0bffa17 	ldw	r2,-24(fp)
81102664:	10800058 	cmpnei	r2,r2,1
81102668:	10000a1e 	bne	r2,zero,81102694 <bDdr2MemoryRandomReadTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
8110266c:	01604534 	movhi	r5,33044
81102670:	2975d204 	addi	r5,r5,-10424
81102674:	01204534 	movhi	r4,33044
81102678:	210b7204 	addi	r4,r4,11720
8110267c:	11139940 	call	81113994 <sprintf>
		debug(fp, cDebugBuffer);
81102680:	d0a04f17 	ldw	r2,-32452(gp)
81102684:	01604534 	movhi	r5,33044
81102688:	294b7204 	addi	r5,r5,11720
8110268c:	1009883a 	mov	r4,r2
81102690:	11120040 	call	81112004 <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
81102694:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102698:	d0a07217 	ldw	r2,-32312(gp)

	TimeStart = alt_nticks();
8110269c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
811026a0:	e0bff017 	ldw	r2,-64(fp)
811026a4:	e0bff215 	stw	r2,-56(fp)
811026a8:	00003a06 	br	81102794 <bDdr2MemoryRandomReadTest+0x304>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
811026ac:	e0bff804 	addi	r2,fp,-32
811026b0:	1009883a 	mov	r4,r2
811026b4:	110292c0 	call	8110292c <uliXorshift32>
811026b8:	1007883a 	mov	r3,r2
811026bc:	e0bff217 	ldw	r2,-56(fp)
811026c0:	10800017 	ldw	r2,0(r2)
811026c4:	18801026 	beq	r3,r2,81102708 <bDdr2MemoryRandomReadTest+0x278>
			bSuccess = FALSE;
811026c8:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
811026cc:	e0bffa17 	ldw	r2,-24(fp)
811026d0:	10800058 	cmpnei	r2,r2,1
811026d4:	10000c1e 	bne	r2,zero,81102708 <bDdr2MemoryRandomReadTest+0x278>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
811026d8:	e0bff217 	ldw	r2,-56(fp)
811026dc:	100d883a 	mov	r6,r2
811026e0:	01604534 	movhi	r5,33044
811026e4:	29760204 	addi	r5,r5,-10232
811026e8:	01204534 	movhi	r4,33044
811026ec:	210b7204 	addi	r4,r4,11720
811026f0:	11139940 	call	81113994 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
811026f4:	d0a04f17 	ldw	r2,-32452(gp)
811026f8:	01604534 	movhi	r5,33044
811026fc:	294b7204 	addi	r5,r5,11720
81102700:	1009883a 	mov	r4,r2
81102704:	11120040 	call	81112004 <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102708:	e0bffa17 	ldw	r2,-24(fp)
8110270c:	10800058 	cmpnei	r2,r2,1
81102710:	10001d1e 	bne	r2,zero,81102788 <bDdr2MemoryRandomReadTest+0x2f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
81102714:	e0bff217 	ldw	r2,-56(fp)
81102718:	e0fff317 	ldw	r3,-52(fp)
8110271c:	18801a2e 	bgeu	r3,r2,81102788 <bDdr2MemoryRandomReadTest+0x2f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102720:	e0bff403 	ldbu	r2,-48(fp)
81102724:	100d883a 	mov	r6,r2
81102728:	01604534 	movhi	r5,33044
8110272c:	2975d404 	addi	r5,r5,-10416
81102730:	01204534 	movhi	r4,33044
81102734:	210b7204 	addi	r4,r4,11720
81102738:	11139940 	call	81113994 <sprintf>
			debug(fp, cDebugBuffer);
8110273c:	d0a04f17 	ldw	r2,-32452(gp)
81102740:	01604534 	movhi	r5,33044
81102744:	294b7204 	addi	r5,r5,11720
81102748:	1009883a 	mov	r4,r2
8110274c:	11120040 	call	81112004 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102750:	e0fff117 	ldw	r3,-60(fp)
81102754:	00b33374 	movhi	r2,52429
81102758:	10b33344 	addi	r2,r2,-13107
8110275c:	1888383a 	mulxuu	r4,r3,r2
81102760:	1885383a 	mul	r2,r3,r2
81102764:	1021883a 	mov	r16,r2
81102768:	2023883a 	mov	r17,r4
8110276c:	8804d13a 	srli	r2,r17,4
81102770:	e0fff317 	ldw	r3,-52(fp)
81102774:	1885883a 	add	r2,r3,r2
81102778:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110277c:	e0bff403 	ldbu	r2,-48(fp)
81102780:	10800144 	addi	r2,r2,5
81102784:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81102788:	e0bff217 	ldw	r2,-56(fp)
8110278c:	10800104 	addi	r2,r2,4
81102790:	e0bff215 	stw	r2,-56(fp)
81102794:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81102798:	e0bff517 	ldw	r2,-44(fp)
8110279c:	18bfc336 	bltu	r3,r2,811026ac <__reset+0xfb0e26ac>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
811027a0:	e0bffa17 	ldw	r2,-24(fp)
811027a4:	10800058 	cmpnei	r2,r2,1
811027a8:	10000a1e 	bne	r2,zero,811027d4 <bDdr2MemoryRandomReadTest+0x344>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811027ac:	01604534 	movhi	r5,33044
811027b0:	2975d704 	addi	r5,r5,-10404
811027b4:	01204534 	movhi	r4,33044
811027b8:	210b7204 	addi	r4,r4,11720
811027bc:	11139940 	call	81113994 <sprintf>
		debug(fp, cDebugBuffer);
811027c0:	d0a04f17 	ldw	r2,-32452(gp)
811027c4:	01604534 	movhi	r5,33044
811027c8:	294b7204 	addi	r5,r5,11720
811027cc:	1009883a 	mov	r4,r2
811027d0:	11120040 	call	81112004 <fprintf>
#endif
	}

	if (bSuccess) {
811027d4:	e0bfef17 	ldw	r2,-68(fp)
811027d8:	10003126 	beq	r2,zero,811028a0 <bDdr2MemoryRandomReadTest+0x410>
		if (bTime == TRUE) {
811027dc:	e0bffb17 	ldw	r2,-20(fp)
811027e0:	10800058 	cmpnei	r2,r2,1
811027e4:	1000221e 	bne	r2,zero,81102870 <bDdr2MemoryRandomReadTest+0x3e0>
811027e8:	d0e07217 	ldw	r3,-32312(gp)
			TimeElapsed = alt_nticks() - TimeStart;
811027ec:	e0bff717 	ldw	r2,-36(fp)
811027f0:	1885c83a 	sub	r2,r3,r2
811027f4:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811027f8:	e13ff617 	ldw	r4,-40(fp)
811027fc:	11112400 	call	81111240 <__floatsisf>
81102800:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102804:	d0a07117 	ldw	r2,-32316(gp)
81102808:	1009883a 	mov	r4,r2
8110280c:	111136c0 	call	8111136c <__floatunsisf>
81102810:	1007883a 	mov	r3,r2
81102814:	180b883a 	mov	r5,r3
81102818:	8009883a 	mov	r4,r16
8110281c:	11109f40 	call	811109f4 <__divsf3>
81102820:	1007883a 	mov	r3,r2
81102824:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
81102828:	1009883a 	mov	r4,r2
8110282c:	1111b840 	call	81111b84 <__extendsfdf2>
81102830:	1009883a 	mov	r4,r2
81102834:	180b883a 	mov	r5,r3
81102838:	d9400015 	stw	r5,0(sp)
8110283c:	200f883a 	mov	r7,r4
81102840:	e1bff117 	ldw	r6,-60(fp)
81102844:	01604534 	movhi	r5,33044
81102848:	29760a04 	addi	r5,r5,-10200
8110284c:	01204534 	movhi	r4,33044
81102850:	210b7204 	addi	r4,r4,11720
81102854:	11139940 	call	81113994 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
81102858:	d0a04f17 	ldw	r2,-32452(gp)
8110285c:	01604534 	movhi	r5,33044
81102860:	294b7204 	addi	r5,r5,11720
81102864:	1009883a 	mov	r4,r2
81102868:	11120040 	call	81112004 <fprintf>
8110286c:	00001b06 	br	811028dc <bDdr2MemoryRandomReadTest+0x44c>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102870:	e1bff117 	ldw	r6,-60(fp)
81102874:	01604534 	movhi	r5,33044
81102878:	29761604 	addi	r5,r5,-10152
8110287c:	01204534 	movhi	r4,33044
81102880:	210b7204 	addi	r4,r4,11720
81102884:	11139940 	call	81113994 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102888:	d0a04f17 	ldw	r2,-32452(gp)
8110288c:	01604534 	movhi	r5,33044
81102890:	294b7204 	addi	r5,r5,11720
81102894:	1009883a 	mov	r4,r2
81102898:	11120040 	call	81112004 <fprintf>
8110289c:	00000f06 	br	811028dc <bDdr2MemoryRandomReadTest+0x44c>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
811028a0:	00e04534 	movhi	r3,33044
811028a4:	18cb7204 	addi	r3,r3,11720
811028a8:	00a04534 	movhi	r2,33044
811028ac:	10b5ba04 	addi	r2,r2,-10520
811028b0:	1009883a 	mov	r4,r2
811028b4:	00800544 	movi	r2,21
811028b8:	100d883a 	mov	r6,r2
811028bc:	200b883a 	mov	r5,r4
811028c0:	1809883a 	mov	r4,r3
811028c4:	11130b40 	call	811130b4 <memcpy>
		debug(fp, cDebugBuffer);
811028c8:	d0a04f17 	ldw	r2,-32452(gp)
811028cc:	01604534 	movhi	r5,33044
811028d0:	294b7204 	addi	r5,r5,11720
811028d4:	1009883a 	mov	r4,r2
811028d8:	11120040 	call	81112004 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811028dc:	00a04534 	movhi	r2,33044
811028e0:	108b7204 	addi	r2,r2,11720
811028e4:	00c00284 	movi	r3,10
811028e8:	10c00005 	stb	r3,0(r2)
811028ec:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811028f0:	d0a04f17 	ldw	r2,-32452(gp)
811028f4:	01604534 	movhi	r5,33044
811028f8:	294b7204 	addi	r5,r5,11720
811028fc:	1009883a 	mov	r4,r2
81102900:	11120040 	call	81112004 <fprintf>
#endif

	return bSuccess;
81102904:	e0bfef17 	ldw	r2,-68(fp)
}
81102908:	e6fffc04 	addi	sp,fp,-16
8110290c:	dfc00517 	ldw	ra,20(sp)
81102910:	df000417 	ldw	fp,16(sp)
81102914:	dcc00317 	ldw	r19,12(sp)
81102918:	dc800217 	ldw	r18,8(sp)
8110291c:	dc400117 	ldw	r17,4(sp)
81102920:	dc000017 	ldw	r16,0(sp)
81102924:	dec00604 	addi	sp,sp,24
81102928:	f800283a 	ret

8110292c <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
8110292c:	defffd04 	addi	sp,sp,-12
81102930:	de00012e 	bgeu	sp,et,81102938 <uliXorshift32+0xc>
81102934:	003b68fa 	trap	3
81102938:	df000215 	stw	fp,8(sp)
8110293c:	df000204 	addi	fp,sp,8
81102940:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
81102944:	e0bfff17 	ldw	r2,-4(fp)
81102948:	10800017 	ldw	r2,0(r2)
8110294c:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
81102950:	e0bffe17 	ldw	r2,-8(fp)
81102954:	1004937a 	slli	r2,r2,13
81102958:	e0fffe17 	ldw	r3,-8(fp)
8110295c:	1884f03a 	xor	r2,r3,r2
81102960:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
81102964:	e0bffe17 	ldw	r2,-8(fp)
81102968:	1004d47a 	srli	r2,r2,17
8110296c:	e0fffe17 	ldw	r3,-8(fp)
81102970:	1884f03a 	xor	r2,r3,r2
81102974:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102978:	e0bffe17 	ldw	r2,-8(fp)
8110297c:	1004917a 	slli	r2,r2,5
81102980:	e0fffe17 	ldw	r3,-8(fp)
81102984:	1884f03a 	xor	r2,r3,r2
81102988:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
8110298c:	e0bfff17 	ldw	r2,-4(fp)
81102990:	e0fffe17 	ldw	r3,-8(fp)
81102994:	10c00015 	stw	r3,0(r2)

	return uliX;
81102998:	e0bffe17 	ldw	r2,-8(fp)
}
8110299c:	e037883a 	mov	sp,fp
811029a0:	df000017 	ldw	fp,0(sp)
811029a4:	dec00104 	addi	sp,sp,4
811029a8:	f800283a 	ret

811029ac <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
811029ac:	defffb04 	addi	sp,sp,-20
811029b0:	de00012e 	bgeu	sp,et,811029b8 <DMA_OPEN_DEVICE+0xc>
811029b4:	003b68fa 	trap	3
811029b8:	dfc00415 	stw	ra,16(sp)
811029bc:	df000315 	stw	fp,12(sp)
811029c0:	df000304 	addi	fp,sp,12
811029c4:	e13ffe15 	stw	r4,-8(fp)
811029c8:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811029cc:	00800044 	movi	r2,1
811029d0:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
811029d4:	e13fff17 	ldw	r4,-4(fp)
811029d8:	113b4380 	call	8113b438 <alt_msgdma_open>
811029dc:	1007883a 	mov	r3,r2
811029e0:	e0bffe17 	ldw	r2,-8(fp)
811029e4:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
811029e8:	e0bffe17 	ldw	r2,-8(fp)
811029ec:	10800017 	ldw	r2,0(r2)
811029f0:	1000011e 	bne	r2,zero,811029f8 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
811029f4:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
811029f8:	e0bffd17 	ldw	r2,-12(fp)
}
811029fc:	e037883a 	mov	sp,fp
81102a00:	dfc00117 	ldw	ra,4(sp)
81102a04:	df000017 	ldw	fp,0(sp)
81102a08:	dec00204 	addi	sp,sp,8
81102a0c:	f800283a 	ret

81102a10 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
81102a10:	defffc04 	addi	sp,sp,-16
81102a14:	de00012e 	bgeu	sp,et,81102a1c <DMA_CONFIG+0xc>
81102a18:	003b68fa 	trap	3
81102a1c:	df000315 	stw	fp,12(sp)
81102a20:	df000304 	addi	fp,sp,12
81102a24:	e13ffe15 	stw	r4,-8(fp)
81102a28:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81102a2c:	00800044 	movi	r2,1
81102a30:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
81102a34:	e0bffe17 	ldw	r2,-8(fp)
81102a38:	10800317 	ldw	r2,12(r2)
81102a3c:	10800104 	addi	r2,r2,4
81102a40:	e0ffff17 	ldw	r3,-4(fp)
81102a44:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
81102a48:	e0bffd17 	ldw	r2,-12(fp)
}
81102a4c:	e037883a 	mov	sp,fp
81102a50:	df000017 	ldw	fp,0(sp)
81102a54:	dec00104 	addi	sp,sp,4
81102a58:	f800283a 	ret

81102a5c <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
81102a5c:	defffd04 	addi	sp,sp,-12
81102a60:	de00012e 	bgeu	sp,et,81102a68 <DMA_BUSY+0xc>
81102a64:	003b68fa 	trap	3
81102a68:	df000215 	stw	fp,8(sp)
81102a6c:	df000204 	addi	fp,sp,8
81102a70:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81102a74:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81102a78:	e0bfff17 	ldw	r2,-4(fp)
81102a7c:	10800317 	ldw	r2,12(r2)
81102a80:	10800037 	ldwio	r2,0(r2)
81102a84:	1080004c 	andi	r2,r2,1
81102a88:	10000226 	beq	r2,zero,81102a94 <DMA_BUSY+0x38>
    bBusy = TRUE;
81102a8c:	00800044 	movi	r2,1
81102a90:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81102a94:	e0bffe17 	ldw	r2,-8(fp)
}
81102a98:	e037883a 	mov	sp,fp
81102a9c:	df000017 	ldw	fp,0(sp)
81102aa0:	dec00104 	addi	sp,sp,4
81102aa4:	f800283a 	ret

81102aa8 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81102aa8:	defffd04 	addi	sp,sp,-12
81102aac:	de00012e 	bgeu	sp,et,81102ab4 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81102ab0:	003b68fa 	trap	3
81102ab4:	df000215 	stw	fp,8(sp)
81102ab8:	df000204 	addi	fp,sp,8
81102abc:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81102ac0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102ac4:	e0bfff17 	ldw	r2,-4(fp)
81102ac8:	10800317 	ldw	r2,12(r2)
81102acc:	10800037 	ldwio	r2,0(r2)
81102ad0:	1080010c 	andi	r2,r2,4
81102ad4:	10000226 	beq	r2,zero,81102ae0 <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81102ad8:	00800044 	movi	r2,1
81102adc:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81102ae0:	e0bffe17 	ldw	r2,-8(fp)
}
81102ae4:	e037883a 	mov	sp,fp
81102ae8:	df000017 	ldw	fp,0(sp)
81102aec:	dec00104 	addi	sp,sp,4
81102af0:	f800283a 	ret

81102af4 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102af4:	defffd04 	addi	sp,sp,-12
81102af8:	de00012e 	bgeu	sp,et,81102b00 <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81102afc:	003b68fa 	trap	3
81102b00:	df000215 	stw	fp,8(sp)
81102b04:	df000204 	addi	fp,sp,8
81102b08:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102b0c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102b10:	e0bfff17 	ldw	r2,-4(fp)
81102b14:	10800317 	ldw	r2,12(r2)
81102b18:	10800037 	ldwio	r2,0(r2)
81102b1c:	1080008c 	andi	r2,r2,2
81102b20:	10000226 	beq	r2,zero,81102b2c <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81102b24:	00800044 	movi	r2,1
81102b28:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102b2c:	e0bffe17 	ldw	r2,-8(fp)
}
81102b30:	e037883a 	mov	sp,fp
81102b34:	df000017 	ldw	fp,0(sp)
81102b38:	dec00104 	addi	sp,sp,4
81102b3c:	f800283a 	ret

81102b40 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102b40:	defffa04 	addi	sp,sp,-24
81102b44:	de00012e 	bgeu	sp,et,81102b4c <DMA_DISPATCHER_STOP+0xc>
81102b48:	003b68fa 	trap	3
81102b4c:	dfc00515 	stw	ra,20(sp)
81102b50:	df000415 	stw	fp,16(sp)
81102b54:	df000404 	addi	fp,sp,16
81102b58:	e13ffd15 	stw	r4,-12(fp)
81102b5c:	e17ffe15 	stw	r5,-8(fp)
81102b60:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102b64:	00800044 	movi	r2,1
81102b68:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81102b6c:	e0bffd17 	ldw	r2,-12(fp)
81102b70:	10800317 	ldw	r2,12(r2)
81102b74:	10800104 	addi	r2,r2,4
81102b78:	00c00044 	movi	r3,1
81102b7c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102b80:	e0bffe17 	ldw	r2,-8(fp)
81102b84:	10800058 	cmpnei	r2,r2,1
81102b88:	10000e1e 	bne	r2,zero,81102bc4 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b8c:	00000706 	br	81102bac <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b90:	e0bfff17 	ldw	r2,-4(fp)
81102b94:	1000031e 	bne	r2,zero,81102ba4 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81102b98:	01000044 	movi	r4,1
81102b9c:	112931c0 	call	8112931c <usleep>
81102ba0:	00000206 	br	81102bac <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102ba4:	e13fff17 	ldw	r4,-4(fp)
81102ba8:	112931c0 	call	8112931c <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102bac:	e0bffd17 	ldw	r2,-12(fp)
81102bb0:	10800317 	ldw	r2,12(r2)
81102bb4:	10800037 	ldwio	r2,0(r2)
81102bb8:	1080080c 	andi	r2,r2,32
81102bbc:	103ff41e 	bne	r2,zero,81102b90 <__reset+0xfb0e2b90>
81102bc0:	00000206 	br	81102bcc <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102bc4:	e0bffc17 	ldw	r2,-16(fp)
81102bc8:	00000106 	br	81102bd0 <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81102bcc:	e0bffc17 	ldw	r2,-16(fp)
}
81102bd0:	e037883a 	mov	sp,fp
81102bd4:	dfc00117 	ldw	ra,4(sp)
81102bd8:	df000017 	ldw	fp,0(sp)
81102bdc:	dec00204 	addi	sp,sp,8
81102be0:	f800283a 	ret

81102be4 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102be4:	defffa04 	addi	sp,sp,-24
81102be8:	de00012e 	bgeu	sp,et,81102bf0 <DMA_DISPATCHER_RESET+0xc>
81102bec:	003b68fa 	trap	3
81102bf0:	dfc00515 	stw	ra,20(sp)
81102bf4:	df000415 	stw	fp,16(sp)
81102bf8:	df000404 	addi	fp,sp,16
81102bfc:	e13ffd15 	stw	r4,-12(fp)
81102c00:	e17ffe15 	stw	r5,-8(fp)
81102c04:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102c08:	00800044 	movi	r2,1
81102c0c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102c10:	e0bffd17 	ldw	r2,-12(fp)
81102c14:	10800317 	ldw	r2,12(r2)
81102c18:	10800104 	addi	r2,r2,4
81102c1c:	00c00084 	movi	r3,2
81102c20:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102c24:	e0bffe17 	ldw	r2,-8(fp)
81102c28:	10800058 	cmpnei	r2,r2,1
81102c2c:	10000e1e 	bne	r2,zero,81102c68 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102c30:	00000706 	br	81102c50 <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102c34:	e0bfff17 	ldw	r2,-4(fp)
81102c38:	1000031e 	bne	r2,zero,81102c48 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81102c3c:	01000044 	movi	r4,1
81102c40:	112931c0 	call	8112931c <usleep>
81102c44:	00000206 	br	81102c50 <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102c48:	e13fff17 	ldw	r4,-4(fp)
81102c4c:	112931c0 	call	8112931c <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102c50:	e0bffd17 	ldw	r2,-12(fp)
81102c54:	10800317 	ldw	r2,12(r2)
81102c58:	10800037 	ldwio	r2,0(r2)
81102c5c:	1080100c 	andi	r2,r2,64
81102c60:	103ff41e 	bne	r2,zero,81102c34 <__reset+0xfb0e2c34>
81102c64:	00000206 	br	81102c70 <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102c68:	e0bffc17 	ldw	r2,-16(fp)
81102c6c:	00000106 	br	81102c74 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81102c70:	e0bffc17 	ldw	r2,-16(fp)
}
81102c74:	e037883a 	mov	sp,fp
81102c78:	dfc00117 	ldw	ra,4(sp)
81102c7c:	df000017 	ldw	fp,0(sp)
81102c80:	dec00204 	addi	sp,sp,8
81102c84:	f800283a 	ret

81102c88 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102c88:	defff604 	addi	sp,sp,-40
81102c8c:	de00012e 	bgeu	sp,et,81102c94 <DMA_SINGLE_TRANSFER+0xc>
81102c90:	003b68fa 	trap	3
81102c94:	dfc00915 	stw	ra,36(sp)
81102c98:	df000815 	stw	fp,32(sp)
81102c9c:	dc000715 	stw	r16,28(sp)
81102ca0:	df000804 	addi	fp,sp,32
81102ca4:	e13ffb15 	stw	r4,-20(fp)
81102ca8:	e17ffc15 	stw	r5,-16(fp)
81102cac:	e1bffd15 	stw	r6,-12(fp)
81102cb0:	e1fffe15 	stw	r7,-8(fp)
81102cb4:	defff804 	addi	sp,sp,-32
81102cb8:	d8800204 	addi	r2,sp,8
81102cbc:	108003c4 	addi	r2,r2,15
81102cc0:	1004d13a 	srli	r2,r2,4
81102cc4:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102cc8:	00800044 	movi	r2,1
81102ccc:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102cd0:	e0fffc17 	ldw	r3,-16(fp)
81102cd4:	e13ffd17 	ldw	r4,-12(fp)
81102cd8:	e0800217 	ldw	r2,8(fp)
81102cdc:	d8800115 	stw	r2,4(sp)
81102ce0:	e0bffe17 	ldw	r2,-8(fp)
81102ce4:	d8800015 	stw	r2,0(sp)
81102ce8:	200f883a 	mov	r7,r4
81102cec:	180d883a 	mov	r6,r3
81102cf0:	800b883a 	mov	r5,r16
81102cf4:	e13ffb17 	ldw	r4,-20(fp)
81102cf8:	113a4340 	call	8113a434 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102cfc:	10000326 	beq	r2,zero,81102d0c <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81102d00:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102d04:	e0bffa17 	ldw	r2,-24(fp)
81102d08:	00001d06 	br	81102d80 <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102d0c:	800b883a 	mov	r5,r16
81102d10:	e13ffb17 	ldw	r4,-20(fp)
81102d14:	113b6a80 	call	8113b6a8 <alt_msgdma_standard_descriptor_async_transfer>
81102d18:	10000326 	beq	r2,zero,81102d28 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81102d1c:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102d20:	e0bffa17 	ldw	r2,-24(fp)
81102d24:	00001606 	br	81102d80 <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102d28:	e0bffa17 	ldw	r2,-24(fp)
81102d2c:	10800060 	cmpeqi	r2,r2,1
81102d30:	1007883a 	mov	r3,r2
81102d34:	e0800317 	ldw	r2,12(fp)
81102d38:	10800060 	cmpeqi	r2,r2,1
81102d3c:	1884703a 	and	r2,r3,r2
81102d40:	10803fcc 	andi	r2,r2,255
81102d44:	10000d26 	beq	r2,zero,81102d7c <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102d48:	00000706 	br	81102d68 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102d4c:	e0800417 	ldw	r2,16(fp)
81102d50:	1000031e 	bne	r2,zero,81102d60 <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81102d54:	0100fa04 	movi	r4,1000
81102d58:	112931c0 	call	8112931c <usleep>
81102d5c:	00000206 	br	81102d68 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81102d60:	e1000417 	ldw	r4,16(fp)
81102d64:	112931c0 	call	8112931c <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102d68:	e0bffb17 	ldw	r2,-20(fp)
81102d6c:	10800317 	ldw	r2,12(r2)
81102d70:	10800037 	ldwio	r2,0(r2)
81102d74:	1080004c 	andi	r2,r2,1
81102d78:	103ff41e 	bne	r2,zero,81102d4c <__reset+0xfb0e2d4c>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102d7c:	e0bffa17 	ldw	r2,-24(fp)
}
81102d80:	e6ffff04 	addi	sp,fp,-4
81102d84:	dfc00217 	ldw	ra,8(sp)
81102d88:	df000117 	ldw	fp,4(sp)
81102d8c:	dc000017 	ldw	r16,0(sp)
81102d90:	dec00304 	addi	sp,sp,12
81102d94:	f800283a 	ret

81102d98 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102d98:	defff504 	addi	sp,sp,-44
81102d9c:	de00012e 	bgeu	sp,et,81102da4 <DMA_MULTIPLE_TRANSFER+0xc>
81102da0:	003b68fa 	trap	3
81102da4:	dfc00a15 	stw	ra,40(sp)
81102da8:	df000915 	stw	fp,36(sp)
81102dac:	dc000815 	stw	r16,32(sp)
81102db0:	df000904 	addi	fp,sp,36
81102db4:	e13ffb15 	stw	r4,-20(fp)
81102db8:	e17ffc15 	stw	r5,-16(fp)
81102dbc:	e1bffd15 	stw	r6,-12(fp)
81102dc0:	3805883a 	mov	r2,r7
81102dc4:	e0bffe05 	stb	r2,-8(fp)
81102dc8:	defff804 	addi	sp,sp,-32
81102dcc:	d8800204 	addi	r2,sp,8
81102dd0:	108003c4 	addi	r2,r2,15
81102dd4:	1004d13a 	srli	r2,r2,4
81102dd8:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102ddc:	00800044 	movi	r2,1
81102de0:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102de4:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102de8:	00002506 	br	81102e80 <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102dec:	e0bffa03 	ldbu	r2,-24(fp)
81102df0:	1085883a 	add	r2,r2,r2
81102df4:	1085883a 	add	r2,r2,r2
81102df8:	1007883a 	mov	r3,r2
81102dfc:	e0bffc17 	ldw	r2,-16(fp)
81102e00:	10c5883a 	add	r2,r2,r3
81102e04:	10800017 	ldw	r2,0(r2)
81102e08:	1009883a 	mov	r4,r2
81102e0c:	e0bffa03 	ldbu	r2,-24(fp)
81102e10:	1085883a 	add	r2,r2,r2
81102e14:	1085883a 	add	r2,r2,r2
81102e18:	1007883a 	mov	r3,r2
81102e1c:	e0bffd17 	ldw	r2,-12(fp)
81102e20:	10c5883a 	add	r2,r2,r3
81102e24:	10800017 	ldw	r2,0(r2)
81102e28:	1007883a 	mov	r3,r2
81102e2c:	e0800317 	ldw	r2,12(fp)
81102e30:	10804034 	orhi	r2,r2,256
81102e34:	d8800115 	stw	r2,4(sp)
81102e38:	e0800217 	ldw	r2,8(fp)
81102e3c:	d8800015 	stw	r2,0(sp)
81102e40:	180f883a 	mov	r7,r3
81102e44:	200d883a 	mov	r6,r4
81102e48:	800b883a 	mov	r5,r16
81102e4c:	e13ffb17 	ldw	r4,-20(fp)
81102e50:	113a4340 	call	8113a434 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102e54:	10000226 	beq	r2,zero,81102e60 <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81102e58:	e03ff915 	stw	zero,-28(fp)
81102e5c:	00000506 	br	81102e74 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102e60:	800b883a 	mov	r5,r16
81102e64:	e13ffb17 	ldw	r4,-20(fp)
81102e68:	113b6a80 	call	8113b6a8 <alt_msgdma_standard_descriptor_async_transfer>
81102e6c:	10000126 	beq	r2,zero,81102e74 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81102e70:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102e74:	e0bffa03 	ldbu	r2,-24(fp)
81102e78:	10800044 	addi	r2,r2,1
81102e7c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102e80:	e0bff917 	ldw	r2,-28(fp)
81102e84:	10800060 	cmpeqi	r2,r2,1
81102e88:	1009883a 	mov	r4,r2
81102e8c:	e0fffa03 	ldbu	r3,-24(fp)
81102e90:	e0bffe03 	ldbu	r2,-8(fp)
81102e94:	10bfffc4 	addi	r2,r2,-1
81102e98:	1884803a 	cmplt	r2,r3,r2
81102e9c:	2084703a 	and	r2,r4,r2
81102ea0:	10803fcc 	andi	r2,r2,255
81102ea4:	103fd11e 	bne	r2,zero,81102dec <__reset+0xfb0e2dec>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102ea8:	e0bff917 	ldw	r2,-28(fp)
81102eac:	10800058 	cmpnei	r2,r2,1
81102eb0:	1000211e 	bne	r2,zero,81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102eb4:	e0bffa03 	ldbu	r2,-24(fp)
81102eb8:	1085883a 	add	r2,r2,r2
81102ebc:	1085883a 	add	r2,r2,r2
81102ec0:	1007883a 	mov	r3,r2
81102ec4:	e0bffc17 	ldw	r2,-16(fp)
81102ec8:	10c5883a 	add	r2,r2,r3
81102ecc:	10800017 	ldw	r2,0(r2)
81102ed0:	1009883a 	mov	r4,r2
81102ed4:	e0bffa03 	ldbu	r2,-24(fp)
81102ed8:	1085883a 	add	r2,r2,r2
81102edc:	1085883a 	add	r2,r2,r2
81102ee0:	1007883a 	mov	r3,r2
81102ee4:	e0bffd17 	ldw	r2,-12(fp)
81102ee8:	10c5883a 	add	r2,r2,r3
81102eec:	10800017 	ldw	r2,0(r2)
81102ef0:	1007883a 	mov	r3,r2
81102ef4:	e0800317 	ldw	r2,12(fp)
81102ef8:	d8800115 	stw	r2,4(sp)
81102efc:	e0800217 	ldw	r2,8(fp)
81102f00:	d8800015 	stw	r2,0(sp)
81102f04:	180f883a 	mov	r7,r3
81102f08:	200d883a 	mov	r6,r4
81102f0c:	800b883a 	mov	r5,r16
81102f10:	e13ffb17 	ldw	r4,-20(fp)
81102f14:	113a4340 	call	8113a434 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102f18:	10000226 	beq	r2,zero,81102f24 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81102f1c:	e03ff915 	stw	zero,-28(fp)
81102f20:	00000506 	br	81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102f24:	800b883a 	mov	r5,r16
81102f28:	e13ffb17 	ldw	r4,-20(fp)
81102f2c:	113b6a80 	call	8113b6a8 <alt_msgdma_standard_descriptor_async_transfer>
81102f30:	10000126 	beq	r2,zero,81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81102f34:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102f38:	e0bff917 	ldw	r2,-28(fp)
81102f3c:	10800060 	cmpeqi	r2,r2,1
81102f40:	1007883a 	mov	r3,r2
81102f44:	e0800417 	ldw	r2,16(fp)
81102f48:	10800060 	cmpeqi	r2,r2,1
81102f4c:	1884703a 	and	r2,r3,r2
81102f50:	10803fcc 	andi	r2,r2,255
81102f54:	10000d26 	beq	r2,zero,81102f8c <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f58:	00000706 	br	81102f78 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102f5c:	e0800517 	ldw	r2,20(fp)
81102f60:	1000031e 	bne	r2,zero,81102f70 <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81102f64:	0100fa04 	movi	r4,1000
81102f68:	112931c0 	call	8112931c <usleep>
81102f6c:	00000206 	br	81102f78 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81102f70:	e1000517 	ldw	r4,20(fp)
81102f74:	112931c0 	call	8112931c <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f78:	e0bffb17 	ldw	r2,-20(fp)
81102f7c:	10800317 	ldw	r2,12(r2)
81102f80:	10800037 	ldwio	r2,0(r2)
81102f84:	1080004c 	andi	r2,r2,1
81102f88:	103ff41e 	bne	r2,zero,81102f5c <__reset+0xfb0e2f5c>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102f8c:	e0bff917 	ldw	r2,-28(fp)
}
81102f90:	e6ffff04 	addi	sp,fp,-4
81102f94:	dfc00217 	ldw	ra,8(sp)
81102f98:	df000117 	ldw	fp,4(sp)
81102f9c:	dc000017 	ldw	r16,0(sp)
81102fa0:	dec00304 	addi	sp,sp,12
81102fa4:	f800283a 	ret

81102fa8 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
81102fa8:	deffef04 	addi	sp,sp,-68
81102fac:	de00012e 	bgeu	sp,et,81102fb4 <POWER_Read+0xc>
81102fb0:	003b68fa 	trap	3
81102fb4:	dfc01015 	stw	ra,64(sp)
81102fb8:	df000f15 	stw	fp,60(sp)
81102fbc:	df000f04 	addi	fp,sp,60
81102fc0:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
81102fc4:	00800044 	movi	r2,1
81102fc8:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
81102fcc:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102fd0:	00800204 	movi	r2,8
81102fd4:	e0bffc15 	stw	r2,-16(fp)
81102fd8:	00800104 	movi	r2,4
81102fdc:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102fe0:	00800044 	movi	r2,1
81102fe4:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102fe8:	00800044 	movi	r2,1
81102fec:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102ff0:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102ff4:	e03ff515 	stw	zero,-44(fp)
81102ff8:	00009206 	br	81103244 <POWER_Read+0x29c>
		NextChannel = 0;
81102ffc:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81103000:	e0bff517 	ldw	r2,-44(fp)
81103004:	10c03fcc 	andi	r3,r2,255
81103008:	e13ffa03 	ldbu	r4,-24(fp)
8110300c:	e0bfff17 	ldw	r2,-4(fp)
81103010:	d8800115 	stw	r2,4(sp)
81103014:	e0bff917 	ldw	r2,-28(fp)
81103018:	d8800015 	stw	r2,0(sp)
8110301c:	e1fff817 	ldw	r7,-32(fp)
81103020:	e1bff717 	ldw	r6,-36(fp)
81103024:	200b883a 	mov	r5,r4
81103028:	1809883a 	mov	r4,r3
8110302c:	1106d380 	call	81106d38 <POWER_SPI_RW>
81103030:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103034:	e03ff415 	stw	zero,-48(fp)
81103038:	00007406 	br	8110320c <POWER_Read+0x264>
			NextChannel = i + 1;
8110303c:	e0bff417 	ldw	r2,-48(fp)
81103040:	10800044 	addi	r2,r2,1
81103044:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81103048:	e0bff517 	ldw	r2,-44(fp)
8110304c:	10c03fcc 	andi	r3,r2,255
81103050:	e13ffa03 	ldbu	r4,-24(fp)
81103054:	e0bffe04 	addi	r2,fp,-8
81103058:	d8800115 	stw	r2,4(sp)
8110305c:	e0bff917 	ldw	r2,-28(fp)
81103060:	d8800015 	stw	r2,0(sp)
81103064:	e1fff817 	ldw	r7,-32(fp)
81103068:	e1bff717 	ldw	r6,-36(fp)
8110306c:	200b883a 	mov	r5,r4
81103070:	1809883a 	mov	r4,r3
81103074:	1106d380 	call	81106d38 <POWER_SPI_RW>
81103078:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
8110307c:	e0bff317 	ldw	r2,-52(fp)
81103080:	10005026 	beq	r2,zero,811031c4 <POWER_Read+0x21c>
				HEAD = (Value32 >> 30) & 0x03;
81103084:	e0bffe17 	ldw	r2,-8(fp)
81103088:	1004d7ba 	srli	r2,r2,30
8110308c:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
81103090:	e0bffe17 	ldw	r2,-8(fp)
81103094:	1004d07a 	srli	r2,r2,1
81103098:	108001cc 	andi	r2,r2,7
8110309c:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
811030a0:	e0bffe17 	ldw	r2,-8(fp)
811030a4:	1004d13a 	srli	r2,r2,4
811030a8:	1080004c 	andi	r2,r2,1
811030ac:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
811030b0:	e0bffe17 	ldw	r2,-8(fp)
811030b4:	1004d17a 	srli	r2,r2,5
811030b8:	1080004c 	andi	r2,r2,1
811030bc:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
811030c0:	e0bffe17 	ldw	r2,-8(fp)
811030c4:	1080004c 	andi	r2,r2,1
811030c8:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
811030cc:	e0bffa43 	ldbu	r2,-23(fp)
811030d0:	10000d26 	beq	r2,zero,81103108 <POWER_Read+0x160>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
811030d4:	e1bff417 	ldw	r6,-48(fp)
811030d8:	01604534 	movhi	r5,33044
811030dc:	29762004 	addi	r5,r5,-10112
811030e0:	01204534 	movhi	r4,33044
811030e4:	210b7204 	addi	r4,r4,11720
811030e8:	11139940 	call	81113994 <sprintf>
					debug(fp, cDebugBuffer);
811030ec:	d0a04f17 	ldw	r2,-32452(gp)
811030f0:	01604534 	movhi	r5,33044
811030f4:	294b7204 	addi	r5,r5,11720
811030f8:	1009883a 	mov	r4,r2
811030fc:	11120040 	call	81112004 <fprintf>
#endif
					bSuccess = FALSE;
81103100:	e03ff315 	stw	zero,-52(fp)
81103104:	00002206 	br	81103190 <POWER_Read+0x1e8>
				} else if (Channel != i) {
81103108:	e0fffa83 	ldbu	r3,-22(fp)
8110310c:	e0bff417 	ldw	r2,-48(fp)
81103110:	18801026 	beq	r3,r2,81103154 <POWER_Read+0x1ac>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
81103114:	e0bffa83 	ldbu	r2,-22(fp)
81103118:	d8800015 	stw	r2,0(sp)
8110311c:	e1fff417 	ldw	r7,-48(fp)
81103120:	e1bff417 	ldw	r6,-48(fp)
81103124:	01604534 	movhi	r5,33044
81103128:	29762604 	addi	r5,r5,-10088
8110312c:	01204534 	movhi	r4,33044
81103130:	210b7204 	addi	r4,r4,11720
81103134:	11139940 	call	81113994 <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
81103138:	d0a04f17 	ldw	r2,-32452(gp)
8110313c:	01604534 	movhi	r5,33044
81103140:	294b7204 	addi	r5,r5,11720
81103144:	1009883a 	mov	r4,r2
81103148:	11120040 	call	81112004 <fprintf>
#endif
					bSuccess = FALSE;
8110314c:	e03ff315 	stw	zero,-52(fp)
81103150:	00000f06 	br	81103190 <POWER_Read+0x1e8>
				} else if (SIGN ^ bSIGN) {
81103154:	e0fffac3 	ldbu	r3,-21(fp)
81103158:	e0bff817 	ldw	r2,-32(fp)
8110315c:	18800c26 	beq	r3,r2,81103190 <POWER_Read+0x1e8>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
81103160:	e1bff417 	ldw	r6,-48(fp)
81103164:	01604534 	movhi	r5,33044
81103168:	29763204 	addi	r5,r5,-10040
8110316c:	01204534 	movhi	r4,33044
81103170:	210b7204 	addi	r4,r4,11720
81103174:	11139940 	call	81113994 <sprintf>
					debug(fp, cDebugBuffer);
81103178:	d0a04f17 	ldw	r2,-32452(gp)
8110317c:	01604534 	movhi	r5,33044
81103180:	294b7204 	addi	r5,r5,11720
81103184:	1009883a 	mov	r4,r2
81103188:	11120040 	call	81112004 <fprintf>
#endif
					bSuccess = FALSE;
8110318c:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81103190:	e0bff317 	ldw	r2,-52(fp)
81103194:	10001a26 	beq	r2,zero,81103200 <POWER_Read+0x258>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81103198:	e0bff617 	ldw	r2,-40(fp)
8110319c:	10c00044 	addi	r3,r2,1
811031a0:	e0fff615 	stw	r3,-40(fp)
811031a4:	1085883a 	add	r2,r2,r2
811031a8:	1085883a 	add	r2,r2,r2
811031ac:	1007883a 	mov	r3,r2
811031b0:	e0bfff17 	ldw	r2,-4(fp)
811031b4:	10c5883a 	add	r2,r2,r3
811031b8:	e0fffe17 	ldw	r3,-8(fp)
811031bc:	10c00015 	stw	r3,0(r2)
811031c0:	00000f06 	br	81103200 <POWER_Read+0x258>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
811031c4:	00e04534 	movhi	r3,33044
811031c8:	18cb7204 	addi	r3,r3,11720
811031cc:	00a04534 	movhi	r2,33044
811031d0:	10b63804 	addi	r2,r2,-10016
811031d4:	1009883a 	mov	r4,r2
811031d8:	00800444 	movi	r2,17
811031dc:	100d883a 	mov	r6,r2
811031e0:	200b883a 	mov	r5,r4
811031e4:	1809883a 	mov	r4,r3
811031e8:	11130b40 	call	811130b4 <memcpy>
				debug(fp, cDebugBuffer);
811031ec:	d0a04f17 	ldw	r2,-32452(gp)
811031f0:	01604534 	movhi	r5,33044
811031f4:	294b7204 	addi	r5,r5,11720
811031f8:	1009883a 	mov	r4,r2
811031fc:	11120040 	call	81112004 <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103200:	e0bff417 	ldw	r2,-48(fp)
81103204:	10800044 	addi	r2,r2,1
81103208:	e0bff415 	stw	r2,-48(fp)
8110320c:	e0bff517 	ldw	r2,-44(fp)
81103210:	1085883a 	add	r2,r2,r2
81103214:	1085883a 	add	r2,r2,r2
81103218:	e0fff304 	addi	r3,fp,-52
8110321c:	1885883a 	add	r2,r3,r2
81103220:	10800904 	addi	r2,r2,36
81103224:	10800017 	ldw	r2,0(r2)
81103228:	e0fff417 	ldw	r3,-48(fp)
8110322c:	1880020e 	bge	r3,r2,81103238 <POWER_Read+0x290>
81103230:	e0bff317 	ldw	r2,-52(fp)
81103234:	103f811e 	bne	r2,zero,8110303c <__reset+0xfb0e303c>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81103238:	e0bff517 	ldw	r2,-44(fp)
8110323c:	10800044 	addi	r2,r2,1
81103240:	e0bff515 	stw	r2,-44(fp)
81103244:	e0bff517 	ldw	r2,-44(fp)
81103248:	10800088 	cmpgei	r2,r2,2
8110324c:	1000021e 	bne	r2,zero,81103258 <POWER_Read+0x2b0>
81103250:	e0bff317 	ldw	r2,-52(fp)
81103254:	103f691e 	bne	r2,zero,81102ffc <__reset+0xfb0e2ffc>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
81103258:	e0bff317 	ldw	r2,-52(fp)
}
8110325c:	e037883a 	mov	sp,fp
81103260:	dfc00117 	ldw	ra,4(sp)
81103264:	df000017 	ldw	fp,0(sp)
81103268:	dec00204 	addi	sp,sp,8
8110326c:	f800283a 	ret

81103270 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81103270:	defff904 	addi	sp,sp,-28
81103274:	de00012e 	bgeu	sp,et,8110327c <TEMP_Read+0xc>
81103278:	003b68fa 	trap	3
8110327c:	dfc00615 	stw	ra,24(sp)
81103280:	df000515 	stw	fp,20(sp)
81103284:	df000504 	addi	fp,sp,20
81103288:	e13ffe15 	stw	r4,-8(fp)
8110328c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81103290:	00800c04 	movi	r2,48
81103294:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81103298:	e0bffd83 	ldbu	r2,-10(fp)
8110329c:	10c03fcc 	andi	r3,r2,255
811032a0:	18c0201c 	xori	r3,r3,128
811032a4:	18ffe004 	addi	r3,r3,-128
811032a8:	e0bffdc4 	addi	r2,fp,-9
811032ac:	d8800015 	stw	r2,0(sp)
811032b0:	000f883a 	mov	r7,zero
811032b4:	180d883a 	mov	r6,r3
811032b8:	01600034 	movhi	r5,32768
811032bc:	29426004 	addi	r5,r5,2432
811032c0:	01200034 	movhi	r4,32768
811032c4:	21026404 	addi	r4,r4,2448
811032c8:	1105b300 	call	81105b30 <I2C_Read>
811032cc:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
811032d0:	e0bffc17 	ldw	r2,-16(fp)
811032d4:	10000226 	beq	r2,zero,811032e0 <TEMP_Read+0x70>
		BoardTemp = Data;
811032d8:	e0bffdc3 	ldbu	r2,-9(fp)
811032dc:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
811032e0:	e0bffc17 	ldw	r2,-16(fp)
811032e4:	10001226 	beq	r2,zero,81103330 <TEMP_Read+0xc0>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
811032e8:	e0bffd83 	ldbu	r2,-10(fp)
811032ec:	10c03fcc 	andi	r3,r2,255
811032f0:	18c0201c 	xori	r3,r3,128
811032f4:	18ffe004 	addi	r3,r3,-128
811032f8:	e0bffdc4 	addi	r2,fp,-9
811032fc:	d8800015 	stw	r2,0(sp)
81103300:	01c00044 	movi	r7,1
81103304:	180d883a 	mov	r6,r3
81103308:	01600034 	movhi	r5,32768
8110330c:	29426004 	addi	r5,r5,2432
81103310:	01200034 	movhi	r4,32768
81103314:	21026404 	addi	r4,r4,2448
81103318:	1105b300 	call	81105b30 <I2C_Read>
8110331c:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
81103320:	e0bffc17 	ldw	r2,-16(fp)
81103324:	10000226 	beq	r2,zero,81103330 <TEMP_Read+0xc0>
			FpgaTemp = Data;
81103328:	e0bffdc3 	ldbu	r2,-9(fp)
8110332c:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
81103330:	e0bffc17 	ldw	r2,-16(fp)
81103334:	10000626 	beq	r2,zero,81103350 <TEMP_Read+0xe0>
		*pFpgaTemp = FpgaTemp;
81103338:	e0bffe17 	ldw	r2,-8(fp)
8110333c:	e0fffd03 	ldbu	r3,-12(fp)
81103340:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
81103344:	e0bfff17 	ldw	r2,-4(fp)
81103348:	e0fffd43 	ldbu	r3,-11(fp)
8110334c:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
81103350:	e0bffc17 	ldw	r2,-16(fp)
}
81103354:	e037883a 	mov	sp,fp
81103358:	dfc00117 	ldw	ra,4(sp)
8110335c:	df000017 	ldw	fp,0(sp)
81103360:	dec00204 	addi	sp,sp,8
81103364:	f800283a 	ret

81103368 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
81103368:	defffb04 	addi	sp,sp,-20
8110336c:	de00012e 	bgeu	sp,et,81103374 <sense_log_temp+0xc>
81103370:	003b68fa 	trap	3
81103374:	dfc00415 	stw	ra,16(sp)
81103378:	df000315 	stw	fp,12(sp)
8110337c:	df000304 	addi	fp,sp,12
81103380:	e13ffe15 	stw	r4,-8(fp)
81103384:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81103388:	e17fff17 	ldw	r5,-4(fp)
8110338c:	e13ffe17 	ldw	r4,-8(fp)
81103390:	11032700 	call	81103270 <TEMP_Read>
81103394:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81103398:	e0bffd17 	ldw	r2,-12(fp)
}
8110339c:	e037883a 	mov	sp,fp
811033a0:	dfc00117 	ldw	ra,4(sp)
811033a4:	df000017 	ldw	fp,0(sp)
811033a8:	dec00204 	addi	sp,sp,8
811033ac:	f800283a 	ret

811033b0 <sense_log>:

void sense_log(void) {
811033b0:	deff0404 	addi	sp,sp,-1008
811033b4:	de00012e 	bgeu	sp,et,811033bc <sense_log+0xc>
811033b8:	003b68fa 	trap	3
811033bc:	dfc0fb15 	stw	ra,1004(sp)
811033c0:	df00fa15 	stw	fp,1000(sp)
811033c4:	dd40f915 	stw	r21,996(sp)
811033c8:	dd00f815 	stw	r20,992(sp)
811033cc:	dcc0f715 	stw	r19,988(sp)
811033d0:	dc80f615 	stw	r18,984(sp)
811033d4:	dc40f515 	stw	r17,980(sp)
811033d8:	dc00f415 	stw	r16,976(sp)
811033dc:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
811033e0:	00902834 	movhi	r2,16544
811033e4:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
811033e8:	008ed174 	movhi	r2,15173
811033ec:	10a6e984 	addi	r2,r2,-25690
811033f0:	e0bf2215 	stw	r2,-888(fp)
811033f4:	008ea0f4 	movhi	r2,14979
811033f8:	10849bc4 	addi	r2,r2,4719
811033fc:	e0bf2315 	stw	r2,-884(fp)
81103400:	008ed174 	movhi	r2,15173
81103404:	10a6e984 	addi	r2,r2,-25690
81103408:	e0bf2415 	stw	r2,-880(fp)
8110340c:	008ed174 	movhi	r2,15173
81103410:	10a6e984 	addi	r2,r2,-25690
81103414:	e0bf2515 	stw	r2,-876(fp)
81103418:	008ed174 	movhi	r2,15173
8110341c:	10a6e984 	addi	r2,r2,-25690
81103420:	e0bf2615 	stw	r2,-872(fp)
81103424:	008ed174 	movhi	r2,15173
81103428:	10a6e984 	addi	r2,r2,-25690
8110342c:	e0bf2715 	stw	r2,-868(fp)
81103430:	008ed174 	movhi	r2,15173
81103434:	10a6e984 	addi	r2,r2,-25690
81103438:	e0bf2815 	stw	r2,-864(fp)
8110343c:	008ed174 	movhi	r2,15173
81103440:	10a6e984 	addi	r2,r2,-25690
81103444:	e0bf2915 	stw	r2,-860(fp)
81103448:	008ed174 	movhi	r2,15173
8110344c:	10a6e984 	addi	r2,r2,-25690
81103450:	e0bf2a15 	stw	r2,-856(fp)
81103454:	008ed174 	movhi	r2,15173
81103458:	10a6e984 	addi	r2,r2,-25690
8110345c:	e0bf2b15 	stw	r2,-852(fp)
81103460:	008ed174 	movhi	r2,15173
81103464:	10a6e984 	addi	r2,r2,-25690
81103468:	e0bf2c15 	stw	r2,-848(fp)
8110346c:	008ed174 	movhi	r2,15173
81103470:	10a6e984 	addi	r2,r2,-25690
81103474:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81103478:	008fd9b4 	movhi	r2,16230
8110347c:	10999984 	addi	r2,r2,26214
81103480:	e0bf2e15 	stw	r2,-840(fp)
81103484:	008fd9b4 	movhi	r2,16230
81103488:	10999984 	addi	r2,r2,26214
8110348c:	e0bf2f15 	stw	r2,-836(fp)
81103490:	00901034 	movhi	r2,16448
81103494:	e0bf3015 	stw	r2,-832(fp)
81103498:	008fd9b4 	movhi	r2,16230
8110349c:	10999984 	addi	r2,r2,26214
811034a0:	e0bf3115 	stw	r2,-828(fp)
811034a4:	008ff9b4 	movhi	r2,16358
811034a8:	10999984 	addi	r2,r2,26214
811034ac:	e0bf3215 	stw	r2,-824(fp)
811034b0:	00900834 	movhi	r2,16416
811034b4:	e0bf3315 	stw	r2,-820(fp)
811034b8:	008ff9b4 	movhi	r2,16358
811034bc:	10999984 	addi	r2,r2,26214
811034c0:	e0bf3415 	stw	r2,-816(fp)
811034c4:	00900834 	movhi	r2,16416
811034c8:	e0bf3515 	stw	r2,-812(fp)
811034cc:	008fe374 	movhi	r2,16269
811034d0:	10b33344 	addi	r2,r2,-13107
811034d4:	e0bf3615 	stw	r2,-808(fp)
811034d8:	008fecf4 	movhi	r2,16307
811034dc:	108cccc4 	addi	r2,r2,13107
811034e0:	e0bf3715 	stw	r2,-804(fp)
811034e4:	009014f4 	movhi	r2,16467
811034e8:	108cccc4 	addi	r2,r2,13107
811034ec:	e0bf3815 	stw	r2,-800(fp)
811034f0:	00900834 	movhi	r2,16416
811034f4:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
811034f8:	00a04534 	movhi	r2,33044
811034fc:	10b66f04 	addi	r2,r2,-9796
81103500:	e0ff3a04 	addi	r3,fp,-792
81103504:	1009883a 	mov	r4,r2
81103508:	0080c004 	movi	r2,768
8110350c:	100d883a 	mov	r6,r2
81103510:	200b883a 	mov	r5,r4
81103514:	1809883a 	mov	r4,r3
81103518:	11130b40 	call	811130b4 <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
8110351c:	e0bf1604 	addi	r2,fp,-936
81103520:	1009883a 	mov	r4,r2
81103524:	1102fa80 	call	81102fa8 <POWER_Read>
81103528:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
8110352c:	e0bf0f17 	ldw	r2,-964(fp)
81103530:	10016026 	beq	r2,zero,81103ab4 <sense_log+0x704>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81103534:	e03f0c15 	stw	zero,-976(fp)
81103538:	00014c06 	br	81103a6c <sense_log+0x6bc>
			SIG = (szVol[i] >> 29) & 0x01;
8110353c:	e0bf0c17 	ldw	r2,-976(fp)
81103540:	1085883a 	add	r2,r2,r2
81103544:	1085883a 	add	r2,r2,r2
81103548:	e0ff0c04 	addi	r3,fp,-976
8110354c:	1885883a 	add	r2,r3,r2
81103550:	10800a04 	addi	r2,r2,40
81103554:	10800017 	ldw	r2,0(r2)
81103558:	1004d77a 	srli	r2,r2,29
8110355c:	1080004c 	andi	r2,r2,1
81103560:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
81103564:	e0bf0c17 	ldw	r2,-976(fp)
81103568:	1085883a 	add	r2,r2,r2
8110356c:	1085883a 	add	r2,r2,r2
81103570:	e0ff0c04 	addi	r3,fp,-976
81103574:	1885883a 	add	r2,r3,r2
81103578:	10800a04 	addi	r2,r2,40
8110357c:	10800017 	ldw	r2,0(r2)
81103580:	1004d73a 	srli	r2,r2,28
81103584:	1080004c 	andi	r2,r2,1
81103588:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110358c:	e0bf0c17 	ldw	r2,-976(fp)
81103590:	1085883a 	add	r2,r2,r2
81103594:	1085883a 	add	r2,r2,r2
81103598:	e0ff0c04 	addi	r3,fp,-976
8110359c:	1885883a 	add	r2,r3,r2
811035a0:	10800a04 	addi	r2,r2,40
811035a4:	10800017 	ldw	r2,0(r2)
811035a8:	1006d1ba 	srli	r3,r2,6
811035ac:	00801034 	movhi	r2,64
811035b0:	10bfffc4 	addi	r2,r2,-1
811035b4:	1884703a 	and	r2,r3,r2
811035b8:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
811035bc:	e0bf1117 	ldw	r2,-956(fp)
811035c0:	1000091e 	bne	r2,zero,811035e8 <sense_log+0x238>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
811035c4:	e13f1217 	ldw	r4,-952(fp)
811035c8:	111136c0 	call	8111136c <__floatunsisf>
811035cc:	1007883a 	mov	r3,r2
811035d0:	0152a034 	movhi	r5,19072
811035d4:	1809883a 	mov	r4,r3
811035d8:	11109f40 	call	811109f4 <__divsf3>
811035dc:	1007883a 	mov	r3,r2
811035e0:	e0ff0d15 	stw	r3,-972(fp)
811035e4:	00000106 	br	811035ec <sense_log+0x23c>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
811035e8:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
811035ec:	e0bf1017 	ldw	r2,-960(fp)
811035f0:	10002626 	beq	r2,zero,8110368c <sense_log+0x2dc>
811035f4:	e0bf1117 	ldw	r2,-956(fp)
811035f8:	10002426 	beq	r2,zero,8110368c <sense_log+0x2dc>
				fVol = fRef * 0.5;
811035fc:	014fc034 	movhi	r5,16128
81103600:	e13f0e17 	ldw	r4,-968(fp)
81103604:	1110e3c0 	call	81110e3c <__mulsf3>
81103608:	1007883a 	mov	r3,r2
8110360c:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103610:	e0ff3a04 	addi	r3,fp,-792
81103614:	e0bf0c17 	ldw	r2,-976(fp)
81103618:	100491ba 	slli	r2,r2,6
8110361c:	18a1883a 	add	r16,r3,r2
81103620:	e0bf0c17 	ldw	r2,-976(fp)
81103624:	1085883a 	add	r2,r2,r2
81103628:	1085883a 	add	r2,r2,r2
8110362c:	e0ff0c04 	addi	r3,fp,-976
81103630:	1885883a 	add	r2,r3,r2
81103634:	10800a04 	addi	r2,r2,40
81103638:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
8110363c:	1023883a 	mov	r17,r2
81103640:	e13f1317 	ldw	r4,-948(fp)
81103644:	1111b840 	call	81111b84 <__extendsfdf2>
81103648:	1009883a 	mov	r4,r2
8110364c:	180b883a 	mov	r5,r3
81103650:	d9000015 	stw	r4,0(sp)
81103654:	d9400115 	stw	r5,4(sp)
81103658:	880f883a 	mov	r7,r17
8110365c:	800d883a 	mov	r6,r16
81103660:	01604534 	movhi	r5,33044
81103664:	29763d04 	addi	r5,r5,-9996
81103668:	01204534 	movhi	r4,33044
8110366c:	210b7204 	addi	r4,r4,11720
81103670:	11139940 	call	81113994 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103674:	d0a04f17 	ldw	r2,-32452(gp)
81103678:	01604534 	movhi	r5,33044
8110367c:	294b7204 	addi	r5,r5,11720
81103680:	1009883a 	mov	r4,r2
81103684:	11120040 	call	81112004 <fprintf>
81103688:	0000f506 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (SIG && !MSB) {
8110368c:	e0bf1017 	ldw	r2,-960(fp)
81103690:	10006426 	beq	r2,zero,81103824 <sense_log+0x474>
81103694:	e0bf1117 	ldw	r2,-956(fp)
81103698:	1000621e 	bne	r2,zero,81103824 <sense_log+0x474>
				fVol = fRef * 0.5 * fVolDrop;
8110369c:	e13f0e17 	ldw	r4,-968(fp)
811036a0:	1111b840 	call	81111b84 <__extendsfdf2>
811036a4:	1011883a 	mov	r8,r2
811036a8:	1813883a 	mov	r9,r3
811036ac:	000d883a 	mov	r6,zero
811036b0:	01cff834 	movhi	r7,16352
811036b4:	4009883a 	mov	r4,r8
811036b8:	480b883a 	mov	r5,r9
811036bc:	11114640 	call	81111464 <__muldf3>
811036c0:	1009883a 	mov	r4,r2
811036c4:	180b883a 	mov	r5,r3
811036c8:	2021883a 	mov	r16,r4
811036cc:	2823883a 	mov	r17,r5
811036d0:	e13f0d17 	ldw	r4,-972(fp)
811036d4:	1111b840 	call	81111b84 <__extendsfdf2>
811036d8:	1009883a 	mov	r4,r2
811036dc:	180b883a 	mov	r5,r3
811036e0:	200d883a 	mov	r6,r4
811036e4:	280f883a 	mov	r7,r5
811036e8:	8009883a 	mov	r4,r16
811036ec:	880b883a 	mov	r5,r17
811036f0:	11114640 	call	81111464 <__muldf3>
811036f4:	1009883a 	mov	r4,r2
811036f8:	180b883a 	mov	r5,r3
811036fc:	2005883a 	mov	r2,r4
81103700:	2807883a 	mov	r3,r5
81103704:	1009883a 	mov	r4,r2
81103708:	180b883a 	mov	r5,r3
8110370c:	1111c9c0 	call	81111c9c <__truncdfsf2>
81103710:	1007883a 	mov	r3,r2
81103714:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103718:	e0bf0c17 	ldw	r2,-976(fp)
8110371c:	1085883a 	add	r2,r2,r2
81103720:	1085883a 	add	r2,r2,r2
81103724:	e0ff0c04 	addi	r3,fp,-976
81103728:	1885883a 	add	r2,r3,r2
8110372c:	10801604 	addi	r2,r2,88
81103730:	10c00017 	ldw	r3,0(r2)
81103734:	180b883a 	mov	r5,r3
81103738:	e13f0d17 	ldw	r4,-972(fp)
8110373c:	11109f40 	call	811109f4 <__divsf3>
81103740:	1007883a 	mov	r3,r2
81103744:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103748:	e0bf0c17 	ldw	r2,-976(fp)
8110374c:	1085883a 	add	r2,r2,r2
81103750:	1085883a 	add	r2,r2,r2
81103754:	e0ff0c04 	addi	r3,fp,-976
81103758:	1885883a 	add	r2,r3,r2
8110375c:	10802204 	addi	r2,r2,136
81103760:	10c00017 	ldw	r3,0(r2)
81103764:	e17f1417 	ldw	r5,-944(fp)
81103768:	1809883a 	mov	r4,r3
8110376c:	1110e3c0 	call	81110e3c <__mulsf3>
81103770:	1007883a 	mov	r3,r2
81103774:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103778:	e0ff3a04 	addi	r3,fp,-792
8110377c:	e0bf0c17 	ldw	r2,-976(fp)
81103780:	100491ba 	slli	r2,r2,6
81103784:	18a9883a 	add	r20,r3,r2
81103788:	e0bf0c17 	ldw	r2,-976(fp)
8110378c:	1085883a 	add	r2,r2,r2
81103790:	1085883a 	add	r2,r2,r2
81103794:	e0ff0c04 	addi	r3,fp,-976
81103798:	1885883a 	add	r2,r3,r2
8110379c:	10800a04 	addi	r2,r2,40
811037a0:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811037a4:	102b883a 	mov	r21,r2
811037a8:	e13f0d17 	ldw	r4,-972(fp)
811037ac:	1111b840 	call	81111b84 <__extendsfdf2>
811037b0:	1021883a 	mov	r16,r2
811037b4:	1823883a 	mov	r17,r3
811037b8:	e13f1417 	ldw	r4,-944(fp)
811037bc:	1111b840 	call	81111b84 <__extendsfdf2>
811037c0:	1025883a 	mov	r18,r2
811037c4:	1827883a 	mov	r19,r3
811037c8:	e13f1517 	ldw	r4,-940(fp)
811037cc:	1111b840 	call	81111b84 <__extendsfdf2>
811037d0:	1009883a 	mov	r4,r2
811037d4:	180b883a 	mov	r5,r3
811037d8:	d9000415 	stw	r4,16(sp)
811037dc:	d9400515 	stw	r5,20(sp)
811037e0:	dc800215 	stw	r18,8(sp)
811037e4:	dcc00315 	stw	r19,12(sp)
811037e8:	dc000015 	stw	r16,0(sp)
811037ec:	dc400115 	stw	r17,4(sp)
811037f0:	a80f883a 	mov	r7,r21
811037f4:	a00d883a 	mov	r6,r20
811037f8:	01604534 	movhi	r5,33044
811037fc:	29764604 	addi	r5,r5,-9960
81103800:	01204534 	movhi	r4,33044
81103804:	210b7204 	addi	r4,r4,11720
81103808:	11139940 	call	81113994 <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
8110380c:	d0a04f17 	ldw	r2,-32452(gp)
81103810:	01604534 	movhi	r5,33044
81103814:	294b7204 	addi	r5,r5,11720
81103818:	1009883a 	mov	r4,r2
8110381c:	11120040 	call	81112004 <fprintf>
81103820:	00008f06 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (!SIG && MSB) {
81103824:	e0bf1017 	ldw	r2,-960(fp)
81103828:	1000641e 	bne	r2,zero,811039bc <sense_log+0x60c>
8110382c:	e0bf1117 	ldw	r2,-956(fp)
81103830:	10006226 	beq	r2,zero,811039bc <sense_log+0x60c>
				fVol = fRef * 0.5 * fVolDrop;
81103834:	e13f0e17 	ldw	r4,-968(fp)
81103838:	1111b840 	call	81111b84 <__extendsfdf2>
8110383c:	1011883a 	mov	r8,r2
81103840:	1813883a 	mov	r9,r3
81103844:	000d883a 	mov	r6,zero
81103848:	01cff834 	movhi	r7,16352
8110384c:	4009883a 	mov	r4,r8
81103850:	480b883a 	mov	r5,r9
81103854:	11114640 	call	81111464 <__muldf3>
81103858:	1009883a 	mov	r4,r2
8110385c:	180b883a 	mov	r5,r3
81103860:	2021883a 	mov	r16,r4
81103864:	2823883a 	mov	r17,r5
81103868:	e13f0d17 	ldw	r4,-972(fp)
8110386c:	1111b840 	call	81111b84 <__extendsfdf2>
81103870:	1009883a 	mov	r4,r2
81103874:	180b883a 	mov	r5,r3
81103878:	200d883a 	mov	r6,r4
8110387c:	280f883a 	mov	r7,r5
81103880:	8009883a 	mov	r4,r16
81103884:	880b883a 	mov	r5,r17
81103888:	11114640 	call	81111464 <__muldf3>
8110388c:	1009883a 	mov	r4,r2
81103890:	180b883a 	mov	r5,r3
81103894:	2005883a 	mov	r2,r4
81103898:	2807883a 	mov	r3,r5
8110389c:	1009883a 	mov	r4,r2
811038a0:	180b883a 	mov	r5,r3
811038a4:	1111c9c0 	call	81111c9c <__truncdfsf2>
811038a8:	1007883a 	mov	r3,r2
811038ac:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811038b0:	e0bf0c17 	ldw	r2,-976(fp)
811038b4:	1085883a 	add	r2,r2,r2
811038b8:	1085883a 	add	r2,r2,r2
811038bc:	e0ff0c04 	addi	r3,fp,-976
811038c0:	1885883a 	add	r2,r3,r2
811038c4:	10801604 	addi	r2,r2,88
811038c8:	10c00017 	ldw	r3,0(r2)
811038cc:	180b883a 	mov	r5,r3
811038d0:	e13f0d17 	ldw	r4,-972(fp)
811038d4:	11109f40 	call	811109f4 <__divsf3>
811038d8:	1007883a 	mov	r3,r2
811038dc:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811038e0:	e0bf0c17 	ldw	r2,-976(fp)
811038e4:	1085883a 	add	r2,r2,r2
811038e8:	1085883a 	add	r2,r2,r2
811038ec:	e0ff0c04 	addi	r3,fp,-976
811038f0:	1885883a 	add	r2,r3,r2
811038f4:	10802204 	addi	r2,r2,136
811038f8:	10c00017 	ldw	r3,0(r2)
811038fc:	e17f1417 	ldw	r5,-944(fp)
81103900:	1809883a 	mov	r4,r3
81103904:	1110e3c0 	call	81110e3c <__mulsf3>
81103908:	1007883a 	mov	r3,r2
8110390c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103910:	e0ff3a04 	addi	r3,fp,-792
81103914:	e0bf0c17 	ldw	r2,-976(fp)
81103918:	100491ba 	slli	r2,r2,6
8110391c:	18a9883a 	add	r20,r3,r2
81103920:	e0bf0c17 	ldw	r2,-976(fp)
81103924:	1085883a 	add	r2,r2,r2
81103928:	1085883a 	add	r2,r2,r2
8110392c:	e0ff0c04 	addi	r3,fp,-976
81103930:	1885883a 	add	r2,r3,r2
81103934:	10800a04 	addi	r2,r2,40
81103938:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110393c:	102b883a 	mov	r21,r2
81103940:	e13f0d17 	ldw	r4,-972(fp)
81103944:	1111b840 	call	81111b84 <__extendsfdf2>
81103948:	1021883a 	mov	r16,r2
8110394c:	1823883a 	mov	r17,r3
81103950:	e13f1417 	ldw	r4,-944(fp)
81103954:	1111b840 	call	81111b84 <__extendsfdf2>
81103958:	1025883a 	mov	r18,r2
8110395c:	1827883a 	mov	r19,r3
81103960:	e13f1517 	ldw	r4,-940(fp)
81103964:	1111b840 	call	81111b84 <__extendsfdf2>
81103968:	1009883a 	mov	r4,r2
8110396c:	180b883a 	mov	r5,r3
81103970:	d9000415 	stw	r4,16(sp)
81103974:	d9400515 	stw	r5,20(sp)
81103978:	dc800215 	stw	r18,8(sp)
8110397c:	dcc00315 	stw	r19,12(sp)
81103980:	dc000015 	stw	r16,0(sp)
81103984:	dc400115 	stw	r17,4(sp)
81103988:	a80f883a 	mov	r7,r21
8110398c:	a00d883a 	mov	r6,r20
81103990:	01604534 	movhi	r5,33044
81103994:	29765604 	addi	r5,r5,-9896
81103998:	01204534 	movhi	r4,33044
8110399c:	210b7204 	addi	r4,r4,11720
811039a0:	11139940 	call	81113994 <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
811039a4:	d0a04f17 	ldw	r2,-32452(gp)
811039a8:	01604534 	movhi	r5,33044
811039ac:	294b7204 	addi	r5,r5,11720
811039b0:	1009883a 	mov	r4,r2
811039b4:	11120040 	call	81112004 <fprintf>
811039b8:	00002906 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (!SIG && !MSB) {
811039bc:	e0bf1017 	ldw	r2,-960(fp)
811039c0:	1000271e 	bne	r2,zero,81103a60 <sense_log+0x6b0>
811039c4:	e0bf1117 	ldw	r2,-956(fp)
811039c8:	1000251e 	bne	r2,zero,81103a60 <sense_log+0x6b0>
				fVol = -fRef * 0.5;
811039cc:	e0bf0e17 	ldw	r2,-968(fp)
811039d0:	10a0003c 	xorhi	r2,r2,32768
811039d4:	014fc034 	movhi	r5,16128
811039d8:	1009883a 	mov	r4,r2
811039dc:	1110e3c0 	call	81110e3c <__mulsf3>
811039e0:	1007883a 	mov	r3,r2
811039e4:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811039e8:	e0ff3a04 	addi	r3,fp,-792
811039ec:	e0bf0c17 	ldw	r2,-976(fp)
811039f0:	100491ba 	slli	r2,r2,6
811039f4:	18a1883a 	add	r16,r3,r2
811039f8:	e0bf0c17 	ldw	r2,-976(fp)
811039fc:	1085883a 	add	r2,r2,r2
81103a00:	1085883a 	add	r2,r2,r2
81103a04:	e0ff0c04 	addi	r3,fp,-976
81103a08:	1885883a 	add	r2,r3,r2
81103a0c:	10800a04 	addi	r2,r2,40
81103a10:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
81103a14:	1023883a 	mov	r17,r2
81103a18:	e13f1317 	ldw	r4,-948(fp)
81103a1c:	1111b840 	call	81111b84 <__extendsfdf2>
81103a20:	1009883a 	mov	r4,r2
81103a24:	180b883a 	mov	r5,r3
81103a28:	d9000015 	stw	r4,0(sp)
81103a2c:	d9400115 	stw	r5,4(sp)
81103a30:	880f883a 	mov	r7,r17
81103a34:	800d883a 	mov	r6,r16
81103a38:	01604534 	movhi	r5,33044
81103a3c:	29766604 	addi	r5,r5,-9832
81103a40:	01204534 	movhi	r4,33044
81103a44:	210b7204 	addi	r4,r4,11720
81103a48:	11139940 	call	81113994 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103a4c:	d0a04f17 	ldw	r2,-32452(gp)
81103a50:	01604534 	movhi	r5,33044
81103a54:	294b7204 	addi	r5,r5,11720
81103a58:	1009883a 	mov	r4,r2
81103a5c:	11120040 	call	81112004 <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81103a60:	e0bf0c17 	ldw	r2,-976(fp)
81103a64:	10800044 	addi	r2,r2,1
81103a68:	e0bf0c15 	stw	r2,-976(fp)
81103a6c:	e0bf0c17 	ldw	r2,-976(fp)
81103a70:	10800308 	cmpgei	r2,r2,12
81103a74:	1000021e 	bne	r2,zero,81103a80 <sense_log+0x6d0>
81103a78:	e0bf0f17 	ldw	r2,-964(fp)
81103a7c:	103eaf1e 	bne	r2,zero,8110353c <__reset+0xfb0e353c>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103a80:	00a04534 	movhi	r2,33044
81103a84:	108b7204 	addi	r2,r2,11720
81103a88:	00c00344 	movi	r3,13
81103a8c:	10c00005 	stb	r3,0(r2)
81103a90:	00c00284 	movi	r3,10
81103a94:	10c00045 	stb	r3,1(r2)
81103a98:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103a9c:	d0a04f17 	ldw	r2,-32452(gp)
81103aa0:	01604534 	movhi	r5,33044
81103aa4:	294b7204 	addi	r5,r5,11720
81103aa8:	1009883a 	mov	r4,r2
81103aac:	11120040 	call	81112004 <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
81103ab0:	00001606 	br	81103b0c <sense_log+0x75c>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
81103ab4:	00a04534 	movhi	r2,33044
81103ab8:	108b7204 	addi	r2,r2,11720
81103abc:	00c01144 	movi	r3,69
81103ac0:	10c00005 	stb	r3,0(r2)
81103ac4:	00c01c84 	movi	r3,114
81103ac8:	10c00045 	stb	r3,1(r2)
81103acc:	00c01c84 	movi	r3,114
81103ad0:	10c00085 	stb	r3,2(r2)
81103ad4:	00c01bc4 	movi	r3,111
81103ad8:	10c000c5 	stb	r3,3(r2)
81103adc:	00c01c84 	movi	r3,114
81103ae0:	10c00105 	stb	r3,4(r2)
81103ae4:	00c00344 	movi	r3,13
81103ae8:	10c00145 	stb	r3,5(r2)
81103aec:	00c00284 	movi	r3,10
81103af0:	10c00185 	stb	r3,6(r2)
81103af4:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103af8:	d0a04f17 	ldw	r2,-32452(gp)
81103afc:	01604534 	movhi	r5,33044
81103b00:	294b7204 	addi	r5,r5,11720
81103b04:	1009883a 	mov	r4,r2
81103b08:	11120040 	call	81112004 <fprintf>
#endif
	}
}
81103b0c:	0001883a 	nop
81103b10:	e6fffa04 	addi	sp,fp,-24
81103b14:	dfc00717 	ldw	ra,28(sp)
81103b18:	df000617 	ldw	fp,24(sp)
81103b1c:	dd400517 	ldw	r21,20(sp)
81103b20:	dd000417 	ldw	r20,16(sp)
81103b24:	dcc00317 	ldw	r19,12(sp)
81103b28:	dc800217 	ldw	r18,8(sp)
81103b2c:	dc400117 	ldw	r17,4(sp)
81103b30:	dc000017 	ldw	r16,0(sp)
81103b34:	dec00804 	addi	sp,sp,32
81103b38:	f800283a 	ret

81103b3c <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103b3c:	defffc04 	addi	sp,sp,-16
81103b40:	de00012e 	bgeu	sp,et,81103b48 <bSdmaInitM1Dma+0xc>
81103b44:	003b68fa 	trap	3
81103b48:	dfc00315 	stw	ra,12(sp)
81103b4c:	df000215 	stw	fp,8(sp)
81103b50:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103b54:	00800044 	movi	r2,1
81103b58:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103b5c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103b60:	01204534 	movhi	r4,33044
81103b64:	21372f04 	addi	r4,r4,-9028
81103b68:	113b4380 	call	8113b438 <alt_msgdma_open>
81103b6c:	d0a03915 	stw	r2,-32540(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103b70:	d0a03917 	ldw	r2,-32540(gp)
81103b74:	1000021e 	bne	r2,zero,81103b80 <bSdmaInitM1Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103b78:	e03ffe15 	stw	zero,-8(fp)
81103b7c:	00001506 	br	81103bd4 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103b80:	d0a03917 	ldw	r2,-32540(gp)
81103b84:	10800317 	ldw	r2,12(r2)
81103b88:	10800104 	addi	r2,r2,4
81103b8c:	00c00084 	movi	r3,2
81103b90:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b94:	00000a06 	br	81103bc0 <bSdmaInitM1Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103b98:	01000044 	movi	r4,1
81103b9c:	112931c0 	call	8112931c <usleep>
			usiCounter++;
81103ba0:	e0bfff0b 	ldhu	r2,-4(fp)
81103ba4:	10800044 	addi	r2,r2,1
81103ba8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103bac:	e0bfff0b 	ldhu	r2,-4(fp)
81103bb0:	1084e230 	cmpltui	r2,r2,5000
81103bb4:	1000021e 	bne	r2,zero,81103bc0 <bSdmaInitM1Dma+0x84>
				bStatus = FALSE;
81103bb8:	e03ffe15 	stw	zero,-8(fp)
				break;
81103bbc:	00000506 	br	81103bd4 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103bc0:	d0a03917 	ldw	r2,-32540(gp)
81103bc4:	10800317 	ldw	r2,12(r2)
81103bc8:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103bcc:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103bd0:	103ff11e 	bne	r2,zero,81103b98 <__reset+0xfb0e3b98>
				break;
			}
		}
	}

	return bStatus;
81103bd4:	e0bffe17 	ldw	r2,-8(fp)
}
81103bd8:	e037883a 	mov	sp,fp
81103bdc:	dfc00117 	ldw	ra,4(sp)
81103be0:	df000017 	ldw	fp,0(sp)
81103be4:	dec00204 	addi	sp,sp,8
81103be8:	f800283a 	ret

81103bec <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
81103bec:	defffc04 	addi	sp,sp,-16
81103bf0:	de00012e 	bgeu	sp,et,81103bf8 <bSdmaInitM2Dma+0xc>
81103bf4:	003b68fa 	trap	3
81103bf8:	dfc00315 	stw	ra,12(sp)
81103bfc:	df000215 	stw	fp,8(sp)
81103c00:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103c04:	00800044 	movi	r2,1
81103c08:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103c0c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103c10:	01204534 	movhi	r4,33044
81103c14:	21373404 	addi	r4,r4,-9008
81103c18:	113b4380 	call	8113b438 <alt_msgdma_open>
81103c1c:	d0a03a15 	stw	r2,-32536(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103c20:	d0a03a17 	ldw	r2,-32536(gp)
81103c24:	1000021e 	bne	r2,zero,81103c30 <bSdmaInitM2Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103c28:	e03ffe15 	stw	zero,-8(fp)
81103c2c:	00001506 	br	81103c84 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103c30:	d0a03a17 	ldw	r2,-32536(gp)
81103c34:	10800317 	ldw	r2,12(r2)
81103c38:	10800104 	addi	r2,r2,4
81103c3c:	00c00084 	movi	r3,2
81103c40:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c44:	00000a06 	br	81103c70 <bSdmaInitM2Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103c48:	01000044 	movi	r4,1
81103c4c:	112931c0 	call	8112931c <usleep>
			usiCounter++;
81103c50:	e0bfff0b 	ldhu	r2,-4(fp)
81103c54:	10800044 	addi	r2,r2,1
81103c58:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103c5c:	e0bfff0b 	ldhu	r2,-4(fp)
81103c60:	1084e230 	cmpltui	r2,r2,5000
81103c64:	1000021e 	bne	r2,zero,81103c70 <bSdmaInitM2Dma+0x84>
				bStatus = FALSE;
81103c68:	e03ffe15 	stw	zero,-8(fp)
				break;
81103c6c:	00000506 	br	81103c84 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c70:	d0a03a17 	ldw	r2,-32536(gp)
81103c74:	10800317 	ldw	r2,12(r2)
81103c78:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103c7c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c80:	103ff11e 	bne	r2,zero,81103c48 <__reset+0xfb0e3c48>
				break;
			}
		}
	}

	return bStatus;
81103c84:	e0bffe17 	ldw	r2,-8(fp)
}
81103c88:	e037883a 	mov	sp,fp
81103c8c:	dfc00117 	ldw	ra,4(sp)
81103c90:	df000017 	ldw	fp,0(sp)
81103c94:	dec00204 	addi	sp,sp,8
81103c98:	f800283a 	ret

81103c9c <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103c9c:	deffe904 	addi	sp,sp,-92
81103ca0:	de00012e 	bgeu	sp,et,81103ca8 <bSdmaDmaM1Transfer+0xc>
81103ca4:	003b68fa 	trap	3
81103ca8:	dfc01615 	stw	ra,88(sp)
81103cac:	df001515 	stw	fp,84(sp)
81103cb0:	dc001415 	stw	r16,80(sp)
81103cb4:	df001504 	addi	fp,sp,84
81103cb8:	e13ffb15 	stw	r4,-20(fp)
81103cbc:	2809883a 	mov	r4,r5
81103cc0:	3007883a 	mov	r3,r6
81103cc4:	3805883a 	mov	r2,r7
81103cc8:	e13ffc0d 	sth	r4,-16(fp)
81103ccc:	e0fffd05 	stb	r3,-12(fp)
81103cd0:	e0bffe05 	stb	r2,-8(fp)
81103cd4:	defff004 	addi	sp,sp,-64
81103cd8:	d8800904 	addi	r2,sp,36
81103cdc:	108007c4 	addi	r2,r2,31
81103ce0:	1004d17a 	srli	r2,r2,5
81103ce4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103ce8:	00800044 	movi	r2,1
81103cec:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103cf0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103cf4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103cf8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103cfc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103d00:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103d04:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103d08:	e0bffe03 	ldbu	r2,-8(fp)
81103d0c:	10c00268 	cmpgeui	r3,r2,9
81103d10:	1800a51e 	bne	r3,zero,81103fa8 <bSdmaDmaM1Transfer+0x30c>
81103d14:	100690ba 	slli	r3,r2,2
81103d18:	00a04434 	movhi	r2,33040
81103d1c:	108f4b04 	addi	r2,r2,15660
81103d20:	1885883a 	add	r2,r3,r2
81103d24:	10800017 	ldw	r2,0(r2)
81103d28:	1000683a 	jmp	r2
81103d2c:	81103fa8 	cmpgeui	r4,r16,16638
81103d30:	81103d50 	cmplti	r4,r16,16629
81103d34:	81103d94 	ori	r4,r16,16630
81103d38:	81103de0 	cmpeqi	r4,r16,16631
81103d3c:	81103e2c 	andhi	r4,r16,16632
81103d40:	81103e78 	rdprs	r4,r16,16633
81103d44:	81103ec4 	addi	r4,r16,16635
81103d48:	81103f10 	cmplti	r4,r16,16636
81103d4c:	81103f5c 	xori	r4,r16,16637
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103d50:	e0bffd03 	ldbu	r2,-12(fp)
81103d54:	10000326 	beq	r2,zero,81103d64 <bSdmaDmaM1Transfer+0xc8>
81103d58:	10800060 	cmpeqi	r2,r2,1
81103d5c:	1000051e 	bne	r2,zero,81103d74 <bSdmaDmaM1Transfer+0xd8>
81103d60:	00000906 	br	81103d88 <bSdmaDmaM1Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103d64:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103d68:	00800044 	movi	r2,1
81103d6c:	e0bff715 	stw	r2,-36(fp)
			break;
81103d70:	00000706 	br	81103d90 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103d74:	00800074 	movhi	r2,1
81103d78:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103d7c:	00800044 	movi	r2,1
81103d80:	e0bff715 	stw	r2,-36(fp)
			break;
81103d84:	00000206 	br	81103d90 <bSdmaDmaM1Transfer+0xf4>
		default:
			bStatus = FALSE;
81103d88:	e03ff415 	stw	zero,-48(fp)
			break;
81103d8c:	0001883a 	nop
		}
		break;
81103d90:	00008706 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103d94:	e0bffd03 	ldbu	r2,-12(fp)
81103d98:	10000326 	beq	r2,zero,81103da8 <bSdmaDmaM1Transfer+0x10c>
81103d9c:	10800060 	cmpeqi	r2,r2,1
81103da0:	1000061e 	bne	r2,zero,81103dbc <bSdmaDmaM1Transfer+0x120>
81103da4:	00000b06 	br	81103dd4 <bSdmaDmaM1Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103da8:	00880004 	movi	r2,8192
81103dac:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103db0:	00800044 	movi	r2,1
81103db4:	e0bff715 	stw	r2,-36(fp)
			break;
81103db8:	00000806 	br	81103ddc <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103dbc:	00800074 	movhi	r2,1
81103dc0:	10880004 	addi	r2,r2,8192
81103dc4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103dc8:	00800044 	movi	r2,1
81103dcc:	e0bff715 	stw	r2,-36(fp)
			break;
81103dd0:	00000206 	br	81103ddc <bSdmaDmaM1Transfer+0x140>
		default:
			bStatus = FALSE;
81103dd4:	e03ff415 	stw	zero,-48(fp)
			break;
81103dd8:	0001883a 	nop
		}
		break;
81103ddc:	00007406 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103de0:	e0bffd03 	ldbu	r2,-12(fp)
81103de4:	10000326 	beq	r2,zero,81103df4 <bSdmaDmaM1Transfer+0x158>
81103de8:	10800060 	cmpeqi	r2,r2,1
81103dec:	1000061e 	bne	r2,zero,81103e08 <bSdmaDmaM1Transfer+0x16c>
81103df0:	00000b06 	br	81103e20 <bSdmaDmaM1Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103df4:	00900004 	movi	r2,16384
81103df8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103dfc:	00800044 	movi	r2,1
81103e00:	e0bff715 	stw	r2,-36(fp)
			break;
81103e04:	00000806 	br	81103e28 <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103e08:	00800074 	movhi	r2,1
81103e0c:	10900004 	addi	r2,r2,16384
81103e10:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103e14:	00800044 	movi	r2,1
81103e18:	e0bff715 	stw	r2,-36(fp)
			break;
81103e1c:	00000206 	br	81103e28 <bSdmaDmaM1Transfer+0x18c>
		default:
			bStatus = FALSE;
81103e20:	e03ff415 	stw	zero,-48(fp)
			break;
81103e24:	0001883a 	nop
		}
		break;
81103e28:	00006106 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103e2c:	e0bffd03 	ldbu	r2,-12(fp)
81103e30:	10000326 	beq	r2,zero,81103e40 <bSdmaDmaM1Transfer+0x1a4>
81103e34:	10800060 	cmpeqi	r2,r2,1
81103e38:	1000061e 	bne	r2,zero,81103e54 <bSdmaDmaM1Transfer+0x1b8>
81103e3c:	00000b06 	br	81103e6c <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103e40:	00980004 	movi	r2,24576
81103e44:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103e48:	00800044 	movi	r2,1
81103e4c:	e0bff715 	stw	r2,-36(fp)
			break;
81103e50:	00000806 	br	81103e74 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103e54:	00800074 	movhi	r2,1
81103e58:	10980004 	addi	r2,r2,24576
81103e5c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103e60:	00800044 	movi	r2,1
81103e64:	e0bff715 	stw	r2,-36(fp)
			break;
81103e68:	00000206 	br	81103e74 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bStatus = FALSE;
81103e6c:	e03ff415 	stw	zero,-48(fp)
			break;
81103e70:	0001883a 	nop
		}
		break;
81103e74:	00004e06 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103e78:	e0bffd03 	ldbu	r2,-12(fp)
81103e7c:	10000326 	beq	r2,zero,81103e8c <bSdmaDmaM1Transfer+0x1f0>
81103e80:	10800060 	cmpeqi	r2,r2,1
81103e84:	1000061e 	bne	r2,zero,81103ea0 <bSdmaDmaM1Transfer+0x204>
81103e88:	00000b06 	br	81103eb8 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103e8c:	00a00014 	movui	r2,32768
81103e90:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103e94:	00800044 	movi	r2,1
81103e98:	e0bff715 	stw	r2,-36(fp)
			break;
81103e9c:	00000806 	br	81103ec0 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103ea0:	008000b4 	movhi	r2,2
81103ea4:	10a00004 	addi	r2,r2,-32768
81103ea8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103eac:	00800044 	movi	r2,1
81103eb0:	e0bff715 	stw	r2,-36(fp)
			break;
81103eb4:	00000206 	br	81103ec0 <bSdmaDmaM1Transfer+0x224>
		default:
			bStatus = FALSE;
81103eb8:	e03ff415 	stw	zero,-48(fp)
			break;
81103ebc:	0001883a 	nop
		}
		break;
81103ec0:	00003b06 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103ec4:	e0bffd03 	ldbu	r2,-12(fp)
81103ec8:	10000326 	beq	r2,zero,81103ed8 <bSdmaDmaM1Transfer+0x23c>
81103ecc:	10800060 	cmpeqi	r2,r2,1
81103ed0:	1000061e 	bne	r2,zero,81103eec <bSdmaDmaM1Transfer+0x250>
81103ed4:	00000b06 	br	81103f04 <bSdmaDmaM1Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103ed8:	00a80014 	movui	r2,40960
81103edc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103ee0:	00800044 	movi	r2,1
81103ee4:	e0bff715 	stw	r2,-36(fp)
			break;
81103ee8:	00000806 	br	81103f0c <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103eec:	008000b4 	movhi	r2,2
81103ef0:	10a80004 	addi	r2,r2,-24576
81103ef4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103ef8:	00800044 	movi	r2,1
81103efc:	e0bff715 	stw	r2,-36(fp)
			break;
81103f00:	00000206 	br	81103f0c <bSdmaDmaM1Transfer+0x270>
		default:
			bStatus = FALSE;
81103f04:	e03ff415 	stw	zero,-48(fp)
			break;
81103f08:	0001883a 	nop
		}
		break;
81103f0c:	00002806 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103f10:	e0bffd03 	ldbu	r2,-12(fp)
81103f14:	10000326 	beq	r2,zero,81103f24 <bSdmaDmaM1Transfer+0x288>
81103f18:	10800060 	cmpeqi	r2,r2,1
81103f1c:	1000061e 	bne	r2,zero,81103f38 <bSdmaDmaM1Transfer+0x29c>
81103f20:	00000b06 	br	81103f50 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103f24:	00b00014 	movui	r2,49152
81103f28:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103f2c:	00800044 	movi	r2,1
81103f30:	e0bff715 	stw	r2,-36(fp)
			break;
81103f34:	00000806 	br	81103f58 <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103f38:	008000b4 	movhi	r2,2
81103f3c:	10b00004 	addi	r2,r2,-16384
81103f40:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103f44:	00800044 	movi	r2,1
81103f48:	e0bff715 	stw	r2,-36(fp)
			break;
81103f4c:	00000206 	br	81103f58 <bSdmaDmaM1Transfer+0x2bc>
		default:
			bStatus = FALSE;
81103f50:	e03ff415 	stw	zero,-48(fp)
			break;
81103f54:	0001883a 	nop
		}
		break;
81103f58:	00001506 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103f5c:	e0bffd03 	ldbu	r2,-12(fp)
81103f60:	10000326 	beq	r2,zero,81103f70 <bSdmaDmaM1Transfer+0x2d4>
81103f64:	10800060 	cmpeqi	r2,r2,1
81103f68:	1000061e 	bne	r2,zero,81103f84 <bSdmaDmaM1Transfer+0x2e8>
81103f6c:	00000b06 	br	81103f9c <bSdmaDmaM1Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103f70:	00b80014 	movui	r2,57344
81103f74:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103f78:	00800044 	movi	r2,1
81103f7c:	e0bff715 	stw	r2,-36(fp)
			break;
81103f80:	00000806 	br	81103fa4 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103f84:	008000b4 	movhi	r2,2
81103f88:	10b80004 	addi	r2,r2,-8192
81103f8c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103f90:	00800044 	movi	r2,1
81103f94:	e0bff715 	stw	r2,-36(fp)
			break;
81103f98:	00000206 	br	81103fa4 <bSdmaDmaM1Transfer+0x308>
		default:
			bStatus = FALSE;
81103f9c:	e03ff415 	stw	zero,-48(fp)
			break;
81103fa0:	0001883a 	nop
		}
		break;
81103fa4:	00000206 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	default:
		bStatus = FALSE;
81103fa8:	e03ff415 	stw	zero,-48(fp)
		break;
81103fac:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
81103fb0:	e0bffb17 	ldw	r2,-20(fp)
81103fb4:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103fb8:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103fbc:	e0bff417 	ldw	r2,-48(fp)
81103fc0:	10003b26 	beq	r2,zero,811040b0 <bSdmaDmaM1Transfer+0x414>
		if (pxDmaM1Dev == NULL) {
81103fc4:	d0a03917 	ldw	r2,-32540(gp)
81103fc8:	1000021e 	bne	r2,zero,81103fd4 <bSdmaDmaM1Transfer+0x338>
			bStatus = FALSE;
81103fcc:	e03ff415 	stw	zero,-48(fp)
81103fd0:	00003706 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103fd4:	e03ff50d 	sth	zero,-44(fp)
81103fd8:	00003206 	br	811040a4 <bSdmaDmaM1Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103fdc:	01000044 	movi	r4,1
81103fe0:	11278680 	call	81127868 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103fe4:	d0a03917 	ldw	r2,-32540(gp)
81103fe8:	10800317 	ldw	r2,12(r2)
81103fec:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103ff0:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103ff4:	103ff91e 	bne	r2,zero,81103fdc <__reset+0xfb0e3fdc>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103ff8:	d2203917 	ldw	r8,-32540(gp)
81103ffc:	e17ff817 	ldw	r5,-32(fp)
81104000:	e1bff617 	ldw	r6,-40(fp)
81104004:	e0bff917 	ldw	r2,-28(fp)
81104008:	e0fff717 	ldw	r3,-36(fp)
8110400c:	01000044 	movi	r4,1
81104010:	d9000815 	stw	r4,32(sp)
81104014:	01000044 	movi	r4,1
81104018:	d9000715 	stw	r4,28(sp)
8110401c:	01000044 	movi	r4,1
81104020:	d9000615 	stw	r4,24(sp)
81104024:	01000044 	movi	r4,1
81104028:	d9000515 	stw	r4,20(sp)
8110402c:	01000044 	movi	r4,1
81104030:	d9000415 	stw	r4,16(sp)
81104034:	d8c00315 	stw	r3,12(sp)
81104038:	d8800215 	stw	r2,8(sp)
8110403c:	e0bffa17 	ldw	r2,-24(fp)
81104040:	d8800115 	stw	r2,4(sp)
81104044:	00802204 	movi	r2,136
81104048:	d8800015 	stw	r2,0(sp)
8110404c:	300f883a 	mov	r7,r6
81104050:	280d883a 	mov	r6,r5
81104054:	800b883a 	mov	r5,r16
81104058:	4009883a 	mov	r4,r8
8110405c:	1106bf00 	call	81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104060:	10000226 	beq	r2,zero,8110406c <bSdmaDmaM1Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81104064:	e03ff415 	stw	zero,-48(fp)
					break;
81104068:	00001106 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
8110406c:	d0a03917 	ldw	r2,-32540(gp)
81104070:	800b883a 	mov	r5,r16
81104074:	1009883a 	mov	r4,r2
81104078:	1106cf40 	call	81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>
8110407c:	10000226 	beq	r2,zero,81104088 <bSdmaDmaM1Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104080:	e03ff415 	stw	zero,-48(fp)
						break;
81104084:	00000a06 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104088:	e0bff817 	ldw	r2,-32(fp)
8110408c:	10802204 	addi	r2,r2,136
81104090:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81104094:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104098:	e0bff50b 	ldhu	r2,-44(fp)
8110409c:	10800044 	addi	r2,r2,1
811040a0:	e0bff50d 	sth	r2,-44(fp)
811040a4:	e0fff50b 	ldhu	r3,-44(fp)
811040a8:	e0bffc0b 	ldhu	r2,-16(fp)
811040ac:	18bfcd36 	bltu	r3,r2,81103fe4 <__reset+0xfb0e3fe4>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811040b0:	e0bff417 	ldw	r2,-48(fp)
}
811040b4:	e6ffff04 	addi	sp,fp,-4
811040b8:	dfc00217 	ldw	ra,8(sp)
811040bc:	df000117 	ldw	fp,4(sp)
811040c0:	dc000017 	ldw	r16,0(sp)
811040c4:	dec00304 	addi	sp,sp,12
811040c8:	f800283a 	ret

811040cc <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
811040cc:	deffe904 	addi	sp,sp,-92
811040d0:	de00012e 	bgeu	sp,et,811040d8 <bSdmaDmaM2Transfer+0xc>
811040d4:	003b68fa 	trap	3
811040d8:	dfc01615 	stw	ra,88(sp)
811040dc:	df001515 	stw	fp,84(sp)
811040e0:	dc001415 	stw	r16,80(sp)
811040e4:	df001504 	addi	fp,sp,84
811040e8:	e13ffb15 	stw	r4,-20(fp)
811040ec:	2809883a 	mov	r4,r5
811040f0:	3007883a 	mov	r3,r6
811040f4:	3805883a 	mov	r2,r7
811040f8:	e13ffc0d 	sth	r4,-16(fp)
811040fc:	e0fffd05 	stb	r3,-12(fp)
81104100:	e0bffe05 	stb	r2,-8(fp)
81104104:	defff004 	addi	sp,sp,-64
81104108:	d8800904 	addi	r2,sp,36
8110410c:	108007c4 	addi	r2,r2,31
81104110:	1004d17a 	srli	r2,r2,5
81104114:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81104118:	00800044 	movi	r2,1
8110411c:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81104120:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81104124:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81104128:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
8110412c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81104130:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81104134:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81104138:	e0bffe03 	ldbu	r2,-8(fp)
8110413c:	10c00268 	cmpgeui	r3,r2,9
81104140:	1800a51e 	bne	r3,zero,811043d8 <bSdmaDmaM2Transfer+0x30c>
81104144:	100690ba 	slli	r3,r2,2
81104148:	00a04434 	movhi	r2,33040
8110414c:	10905704 	addi	r2,r2,16732
81104150:	1885883a 	add	r2,r3,r2
81104154:	10800017 	ldw	r2,0(r2)
81104158:	1000683a 	jmp	r2
8110415c:	811043d8 	cmpnei	r4,r16,16655
81104160:	81104180 	call	88110418 <__reset+0x20f0418>
81104164:	811041c4 	addi	r4,r16,16647
81104168:	81104210 	cmplti	r4,r16,16648
8110416c:	8110425c 	xori	r4,r16,16649
81104170:	811042a8 	cmpgeui	r4,r16,16650
81104174:	811042f4 	orhi	r4,r16,16651
81104178:	81104340 	call	88110434 <__reset+0x20f0434>
8110417c:	8110438c 	andi	r4,r16,16654
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81104180:	e0bffd03 	ldbu	r2,-12(fp)
81104184:	10000326 	beq	r2,zero,81104194 <bSdmaDmaM2Transfer+0xc8>
81104188:	10800060 	cmpeqi	r2,r2,1
8110418c:	1000051e 	bne	r2,zero,811041a4 <bSdmaDmaM2Transfer+0xd8>
81104190:	00000906 	br	811041b8 <bSdmaDmaM2Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81104194:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81104198:	00800044 	movi	r2,1
8110419c:	e0bff715 	stw	r2,-36(fp)
			break;
811041a0:	00000706 	br	811041c0 <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
811041a4:	00800074 	movhi	r2,1
811041a8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
811041ac:	00800044 	movi	r2,1
811041b0:	e0bff715 	stw	r2,-36(fp)
			break;
811041b4:	00000206 	br	811041c0 <bSdmaDmaM2Transfer+0xf4>
		default:
			bStatus = FALSE;
811041b8:	e03ff415 	stw	zero,-48(fp)
			break;
811041bc:	0001883a 	nop
		}
		break;
811041c0:	00008706 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
811041c4:	e0bffd03 	ldbu	r2,-12(fp)
811041c8:	10000326 	beq	r2,zero,811041d8 <bSdmaDmaM2Transfer+0x10c>
811041cc:	10800060 	cmpeqi	r2,r2,1
811041d0:	1000061e 	bne	r2,zero,811041ec <bSdmaDmaM2Transfer+0x120>
811041d4:	00000b06 	br	81104204 <bSdmaDmaM2Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
811041d8:	00880004 	movi	r2,8192
811041dc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
811041e0:	00800044 	movi	r2,1
811041e4:	e0bff715 	stw	r2,-36(fp)
			break;
811041e8:	00000806 	br	8110420c <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
811041ec:	00800074 	movhi	r2,1
811041f0:	10880004 	addi	r2,r2,8192
811041f4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
811041f8:	00800044 	movi	r2,1
811041fc:	e0bff715 	stw	r2,-36(fp)
			break;
81104200:	00000206 	br	8110420c <bSdmaDmaM2Transfer+0x140>
		default:
			bStatus = FALSE;
81104204:	e03ff415 	stw	zero,-48(fp)
			break;
81104208:	0001883a 	nop
		}
		break;
8110420c:	00007406 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81104210:	e0bffd03 	ldbu	r2,-12(fp)
81104214:	10000326 	beq	r2,zero,81104224 <bSdmaDmaM2Transfer+0x158>
81104218:	10800060 	cmpeqi	r2,r2,1
8110421c:	1000061e 	bne	r2,zero,81104238 <bSdmaDmaM2Transfer+0x16c>
81104220:	00000b06 	br	81104250 <bSdmaDmaM2Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81104224:	00900004 	movi	r2,16384
81104228:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
8110422c:	00800044 	movi	r2,1
81104230:	e0bff715 	stw	r2,-36(fp)
			break;
81104234:	00000806 	br	81104258 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81104238:	00800074 	movhi	r2,1
8110423c:	10900004 	addi	r2,r2,16384
81104240:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81104244:	00800044 	movi	r2,1
81104248:	e0bff715 	stw	r2,-36(fp)
			break;
8110424c:	00000206 	br	81104258 <bSdmaDmaM2Transfer+0x18c>
		default:
			bStatus = FALSE;
81104250:	e03ff415 	stw	zero,-48(fp)
			break;
81104254:	0001883a 	nop
		}
		break;
81104258:	00006106 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
8110425c:	e0bffd03 	ldbu	r2,-12(fp)
81104260:	10000326 	beq	r2,zero,81104270 <bSdmaDmaM2Transfer+0x1a4>
81104264:	10800060 	cmpeqi	r2,r2,1
81104268:	1000061e 	bne	r2,zero,81104284 <bSdmaDmaM2Transfer+0x1b8>
8110426c:	00000b06 	br	8110429c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81104270:	00980004 	movi	r2,24576
81104274:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81104278:	00800044 	movi	r2,1
8110427c:	e0bff715 	stw	r2,-36(fp)
			break;
81104280:	00000806 	br	811042a4 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81104284:	00800074 	movhi	r2,1
81104288:	10980004 	addi	r2,r2,24576
8110428c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81104290:	00800044 	movi	r2,1
81104294:	e0bff715 	stw	r2,-36(fp)
			break;
81104298:	00000206 	br	811042a4 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bStatus = FALSE;
8110429c:	e03ff415 	stw	zero,-48(fp)
			break;
811042a0:	0001883a 	nop
		}
		break;
811042a4:	00004e06 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
811042a8:	e0bffd03 	ldbu	r2,-12(fp)
811042ac:	10000326 	beq	r2,zero,811042bc <bSdmaDmaM2Transfer+0x1f0>
811042b0:	10800060 	cmpeqi	r2,r2,1
811042b4:	1000061e 	bne	r2,zero,811042d0 <bSdmaDmaM2Transfer+0x204>
811042b8:	00000b06 	br	811042e8 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
811042bc:	00a00014 	movui	r2,32768
811042c0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
811042c4:	00800044 	movi	r2,1
811042c8:	e0bff715 	stw	r2,-36(fp)
			break;
811042cc:	00000806 	br	811042f0 <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
811042d0:	008000b4 	movhi	r2,2
811042d4:	10a00004 	addi	r2,r2,-32768
811042d8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
811042dc:	00800044 	movi	r2,1
811042e0:	e0bff715 	stw	r2,-36(fp)
			break;
811042e4:	00000206 	br	811042f0 <bSdmaDmaM2Transfer+0x224>
		default:
			bStatus = FALSE;
811042e8:	e03ff415 	stw	zero,-48(fp)
			break;
811042ec:	0001883a 	nop
		}
		break;
811042f0:	00003b06 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
811042f4:	e0bffd03 	ldbu	r2,-12(fp)
811042f8:	10000326 	beq	r2,zero,81104308 <bSdmaDmaM2Transfer+0x23c>
811042fc:	10800060 	cmpeqi	r2,r2,1
81104300:	1000061e 	bne	r2,zero,8110431c <bSdmaDmaM2Transfer+0x250>
81104304:	00000b06 	br	81104334 <bSdmaDmaM2Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81104308:	00a80014 	movui	r2,40960
8110430c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81104310:	00800044 	movi	r2,1
81104314:	e0bff715 	stw	r2,-36(fp)
			break;
81104318:	00000806 	br	8110433c <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
8110431c:	008000b4 	movhi	r2,2
81104320:	10a80004 	addi	r2,r2,-24576
81104324:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81104328:	00800044 	movi	r2,1
8110432c:	e0bff715 	stw	r2,-36(fp)
			break;
81104330:	00000206 	br	8110433c <bSdmaDmaM2Transfer+0x270>
		default:
			bStatus = FALSE;
81104334:	e03ff415 	stw	zero,-48(fp)
			break;
81104338:	0001883a 	nop
		}
		break;
8110433c:	00002806 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81104340:	e0bffd03 	ldbu	r2,-12(fp)
81104344:	10000326 	beq	r2,zero,81104354 <bSdmaDmaM2Transfer+0x288>
81104348:	10800060 	cmpeqi	r2,r2,1
8110434c:	1000061e 	bne	r2,zero,81104368 <bSdmaDmaM2Transfer+0x29c>
81104350:	00000b06 	br	81104380 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81104354:	00b00014 	movui	r2,49152
81104358:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
8110435c:	00800044 	movi	r2,1
81104360:	e0bff715 	stw	r2,-36(fp)
			break;
81104364:	00000806 	br	81104388 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81104368:	008000b4 	movhi	r2,2
8110436c:	10b00004 	addi	r2,r2,-16384
81104370:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81104374:	00800044 	movi	r2,1
81104378:	e0bff715 	stw	r2,-36(fp)
			break;
8110437c:	00000206 	br	81104388 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bStatus = FALSE;
81104380:	e03ff415 	stw	zero,-48(fp)
			break;
81104384:	0001883a 	nop
		}
		break;
81104388:	00001506 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110438c:	e0bffd03 	ldbu	r2,-12(fp)
81104390:	10000326 	beq	r2,zero,811043a0 <bSdmaDmaM2Transfer+0x2d4>
81104394:	10800060 	cmpeqi	r2,r2,1
81104398:	1000061e 	bne	r2,zero,811043b4 <bSdmaDmaM2Transfer+0x2e8>
8110439c:	00000b06 	br	811043cc <bSdmaDmaM2Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
811043a0:	00b80014 	movui	r2,57344
811043a4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
811043a8:	00800044 	movi	r2,1
811043ac:	e0bff715 	stw	r2,-36(fp)
			break;
811043b0:	00000806 	br	811043d4 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
811043b4:	008000b4 	movhi	r2,2
811043b8:	10b80004 	addi	r2,r2,-8192
811043bc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
811043c0:	00800044 	movi	r2,1
811043c4:	e0bff715 	stw	r2,-36(fp)
			break;
811043c8:	00000206 	br	811043d4 <bSdmaDmaM2Transfer+0x308>
		default:
			bStatus = FALSE;
811043cc:	e03ff415 	stw	zero,-48(fp)
			break;
811043d0:	0001883a 	nop
		}
		break;
811043d4:	00000206 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	default:
		bStatus = FALSE;
811043d8:	e03ff415 	stw	zero,-48(fp)
		break;
811043dc:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
811043e0:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
811043e4:	00a00034 	movhi	r2,32768
811043e8:	1885883a 	add	r2,r3,r2
811043ec:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
811043f0:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
811043f4:	e0bff417 	ldw	r2,-48(fp)
811043f8:	10003b26 	beq	r2,zero,811044e8 <bSdmaDmaM2Transfer+0x41c>
		if (pxDmaM2Dev == NULL) {
811043fc:	d0a03a17 	ldw	r2,-32536(gp)
81104400:	1000021e 	bne	r2,zero,8110440c <bSdmaDmaM2Transfer+0x340>
			bStatus = FALSE;
81104404:	e03ff415 	stw	zero,-48(fp)
81104408:	00003706 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
8110440c:	e03ff50d 	sth	zero,-44(fp)
81104410:	00003206 	br	811044dc <bSdmaDmaM2Transfer+0x410>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81104414:	01000044 	movi	r4,1
81104418:	11278680 	call	81127868 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
8110441c:	d0a03a17 	ldw	r2,-32536(gp)
81104420:	10800317 	ldw	r2,12(r2)
81104424:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81104428:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
8110442c:	103ff91e 	bne	r2,zero,81104414 <__reset+0xfb0e4414>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
81104430:	d2203a17 	ldw	r8,-32536(gp)
81104434:	e17ff817 	ldw	r5,-32(fp)
81104438:	e1bff617 	ldw	r6,-40(fp)
8110443c:	e0bff917 	ldw	r2,-28(fp)
81104440:	e0fff717 	ldw	r3,-36(fp)
81104444:	01000044 	movi	r4,1
81104448:	d9000815 	stw	r4,32(sp)
8110444c:	01000044 	movi	r4,1
81104450:	d9000715 	stw	r4,28(sp)
81104454:	01000044 	movi	r4,1
81104458:	d9000615 	stw	r4,24(sp)
8110445c:	01000044 	movi	r4,1
81104460:	d9000515 	stw	r4,20(sp)
81104464:	01000044 	movi	r4,1
81104468:	d9000415 	stw	r4,16(sp)
8110446c:	d8c00315 	stw	r3,12(sp)
81104470:	d8800215 	stw	r2,8(sp)
81104474:	e0bffa17 	ldw	r2,-24(fp)
81104478:	d8800115 	stw	r2,4(sp)
8110447c:	00802204 	movi	r2,136
81104480:	d8800015 	stw	r2,0(sp)
81104484:	300f883a 	mov	r7,r6
81104488:	280d883a 	mov	r6,r5
8110448c:	800b883a 	mov	r5,r16
81104490:	4009883a 	mov	r4,r8
81104494:	1106bf00 	call	81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104498:	10000226 	beq	r2,zero,811044a4 <bSdmaDmaM2Transfer+0x3d8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
8110449c:	e03ff415 	stw	zero,-48(fp)
					break;
811044a0:	00001106 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
811044a4:	d0a03a17 	ldw	r2,-32536(gp)
811044a8:	800b883a 	mov	r5,r16
811044ac:	1009883a 	mov	r4,r2
811044b0:	1106cf40 	call	81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>
811044b4:	10000226 	beq	r2,zero,811044c0 <bSdmaDmaM2Transfer+0x3f4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
811044b8:	e03ff415 	stw	zero,-48(fp)
						break;
811044bc:	00000a06 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
811044c0:	e0bff817 	ldw	r2,-32(fp)
811044c4:	10802204 	addi	r2,r2,136
811044c8:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
811044cc:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
811044d0:	e0bff50b 	ldhu	r2,-44(fp)
811044d4:	10800044 	addi	r2,r2,1
811044d8:	e0bff50d 	sth	r2,-44(fp)
811044dc:	e0fff50b 	ldhu	r3,-44(fp)
811044e0:	e0bffc0b 	ldhu	r2,-16(fp)
811044e4:	18bfcd36 	bltu	r3,r2,8110441c <__reset+0xfb0e441c>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811044e8:	e0bff417 	ldw	r2,-48(fp)
}
811044ec:	e6ffff04 	addi	sp,fp,-4
811044f0:	dfc00217 	ldw	ra,8(sp)
811044f4:	df000117 	ldw	fp,4(sp)
811044f8:	dc000017 	ldw	r16,0(sp)
811044fc:	dec00304 	addi	sp,sp,12
81104500:	f800283a 	ret

81104504 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81104504:	defffc04 	addi	sp,sp,-16
81104508:	de00012e 	bgeu	sp,et,81104510 <vFeebCh1HandleIrq+0xc>
8110450c:	003b68fa 	trap	3
81104510:	dfc00315 	stw	ra,12(sp)
81104514:	df000215 	stw	fp,8(sp)
81104518:	df000204 	addi	fp,sp,8
8110451c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104520:	e0bfff17 	ldw	r2,-4(fp)
81104524:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
81104528:	11047040 	call	81104704 <vFeebCh1IrqFlagClrBufferEmpty>
}
8110452c:	0001883a 	nop
81104530:	e037883a 	mov	sp,fp
81104534:	dfc00117 	ldw	ra,4(sp)
81104538:	df000017 	ldw	fp,0(sp)
8110453c:	dec00204 	addi	sp,sp,8
81104540:	f800283a 	ret

81104544 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
81104544:	defffc04 	addi	sp,sp,-16
81104548:	de00012e 	bgeu	sp,et,81104550 <vFeebCh2HandleIrq+0xc>
8110454c:	003b68fa 	trap	3
81104550:	dfc00315 	stw	ra,12(sp)
81104554:	df000215 	stw	fp,8(sp)
81104558:	df000204 	addi	fp,sp,8
8110455c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104560:	e0bfff17 	ldw	r2,-4(fp)
81104564:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
81104568:	11047480 	call	81104748 <vFeebCh2IrqFlagClrBufferEmpty>
}
8110456c:	0001883a 	nop
81104570:	e037883a 	mov	sp,fp
81104574:	dfc00117 	ldw	ra,4(sp)
81104578:	df000017 	ldw	fp,0(sp)
8110457c:	dec00204 	addi	sp,sp,8
81104580:	f800283a 	ret

81104584 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104584:	defffc04 	addi	sp,sp,-16
81104588:	de00012e 	bgeu	sp,et,81104590 <vFeebCh3HandleIrq+0xc>
8110458c:	003b68fa 	trap	3
81104590:	dfc00315 	stw	ra,12(sp)
81104594:	df000215 	stw	fp,8(sp)
81104598:	df000204 	addi	fp,sp,8
8110459c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045a0:	e0bfff17 	ldw	r2,-4(fp)
811045a4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
811045a8:	110478c0 	call	8110478c <vFeebCh3IrqFlagClrBufferEmpty>
}
811045ac:	0001883a 	nop
811045b0:	e037883a 	mov	sp,fp
811045b4:	dfc00117 	ldw	ra,4(sp)
811045b8:	df000017 	ldw	fp,0(sp)
811045bc:	dec00204 	addi	sp,sp,8
811045c0:	f800283a 	ret

811045c4 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
811045c4:	defffc04 	addi	sp,sp,-16
811045c8:	de00012e 	bgeu	sp,et,811045d0 <vFeebCh4HandleIrq+0xc>
811045cc:	003b68fa 	trap	3
811045d0:	dfc00315 	stw	ra,12(sp)
811045d4:	df000215 	stw	fp,8(sp)
811045d8:	df000204 	addi	fp,sp,8
811045dc:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045e0:	e0bfff17 	ldw	r2,-4(fp)
811045e4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
811045e8:	11047d00 	call	811047d0 <vFeebCh4IrqFlagClrBufferEmpty>
}
811045ec:	0001883a 	nop
811045f0:	e037883a 	mov	sp,fp
811045f4:	dfc00117 	ldw	ra,4(sp)
811045f8:	df000017 	ldw	fp,0(sp)
811045fc:	dec00204 	addi	sp,sp,8
81104600:	f800283a 	ret

81104604 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81104604:	defffc04 	addi	sp,sp,-16
81104608:	de00012e 	bgeu	sp,et,81104610 <vFeebCh5HandleIrq+0xc>
8110460c:	003b68fa 	trap	3
81104610:	dfc00315 	stw	ra,12(sp)
81104614:	df000215 	stw	fp,8(sp)
81104618:	df000204 	addi	fp,sp,8
8110461c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104620:	e0bfff17 	ldw	r2,-4(fp)
81104624:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
81104628:	11048140 	call	81104814 <vFeebCh5IrqFlagClrBufferEmpty>
}
8110462c:	0001883a 	nop
81104630:	e037883a 	mov	sp,fp
81104634:	dfc00117 	ldw	ra,4(sp)
81104638:	df000017 	ldw	fp,0(sp)
8110463c:	dec00204 	addi	sp,sp,8
81104640:	f800283a 	ret

81104644 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
81104644:	defffc04 	addi	sp,sp,-16
81104648:	de00012e 	bgeu	sp,et,81104650 <vFeebCh6HandleIrq+0xc>
8110464c:	003b68fa 	trap	3
81104650:	dfc00315 	stw	ra,12(sp)
81104654:	df000215 	stw	fp,8(sp)
81104658:	df000204 	addi	fp,sp,8
8110465c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104660:	e0bfff17 	ldw	r2,-4(fp)
81104664:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
81104668:	11048580 	call	81104858 <vFeebCh6IrqFlagClrBufferEmpty>
}
8110466c:	0001883a 	nop
81104670:	e037883a 	mov	sp,fp
81104674:	dfc00117 	ldw	ra,4(sp)
81104678:	df000017 	ldw	fp,0(sp)
8110467c:	dec00204 	addi	sp,sp,8
81104680:	f800283a 	ret

81104684 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104684:	defffc04 	addi	sp,sp,-16
81104688:	de00012e 	bgeu	sp,et,81104690 <vFeebCh7HandleIrq+0xc>
8110468c:	003b68fa 	trap	3
81104690:	dfc00315 	stw	ra,12(sp)
81104694:	df000215 	stw	fp,8(sp)
81104698:	df000204 	addi	fp,sp,8
8110469c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811046a0:	e0bfff17 	ldw	r2,-4(fp)
811046a4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
811046a8:	110489c0 	call	8110489c <vFeebCh7IrqFlagClrBufferEmpty>
}
811046ac:	0001883a 	nop
811046b0:	e037883a 	mov	sp,fp
811046b4:	dfc00117 	ldw	ra,4(sp)
811046b8:	df000017 	ldw	fp,0(sp)
811046bc:	dec00204 	addi	sp,sp,8
811046c0:	f800283a 	ret

811046c4 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
811046c4:	defffc04 	addi	sp,sp,-16
811046c8:	de00012e 	bgeu	sp,et,811046d0 <vFeebCh8HandleIrq+0xc>
811046cc:	003b68fa 	trap	3
811046d0:	dfc00315 	stw	ra,12(sp)
811046d4:	df000215 	stw	fp,8(sp)
811046d8:	df000204 	addi	fp,sp,8
811046dc:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811046e0:	e0bfff17 	ldw	r2,-4(fp)
811046e4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
811046e8:	11048e00 	call	811048e0 <vFeebCh8IrqFlagClrBufferEmpty>
}
811046ec:	0001883a 	nop
811046f0:	e037883a 	mov	sp,fp
811046f4:	dfc00117 	ldw	ra,4(sp)
811046f8:	df000017 	ldw	fp,0(sp)
811046fc:	dec00204 	addi	sp,sp,8
81104700:	f800283a 	ret

81104704 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104704:	defffe04 	addi	sp,sp,-8
81104708:	de00012e 	bgeu	sp,et,81104710 <vFeebCh1IrqFlagClrBufferEmpty+0xc>
8110470c:	003b68fa 	trap	3
81104710:	dfc00115 	stw	ra,4(sp)
81104714:	df000015 	stw	fp,0(sp)
81104718:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
8110471c:	01800044 	movi	r6,1
81104720:	01400144 	movi	r5,5
81104724:	01204834 	movhi	r4,33056
81104728:	210b0004 	addi	r4,r4,11264
8110472c:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104730:	0001883a 	nop
81104734:	e037883a 	mov	sp,fp
81104738:	dfc00117 	ldw	ra,4(sp)
8110473c:	df000017 	ldw	fp,0(sp)
81104740:	dec00204 	addi	sp,sp,8
81104744:	f800283a 	ret

81104748 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
81104748:	defffe04 	addi	sp,sp,-8
8110474c:	de00012e 	bgeu	sp,et,81104754 <vFeebCh2IrqFlagClrBufferEmpty+0xc>
81104750:	003b68fa 	trap	3
81104754:	dfc00115 	stw	ra,4(sp)
81104758:	df000015 	stw	fp,0(sp)
8110475c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104760:	01800044 	movi	r6,1
81104764:	01400144 	movi	r5,5
81104768:	01204834 	movhi	r4,33056
8110476c:	210a0004 	addi	r4,r4,10240
81104770:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104774:	0001883a 	nop
81104778:	e037883a 	mov	sp,fp
8110477c:	dfc00117 	ldw	ra,4(sp)
81104780:	df000017 	ldw	fp,0(sp)
81104784:	dec00204 	addi	sp,sp,8
81104788:	f800283a 	ret

8110478c <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
8110478c:	defffe04 	addi	sp,sp,-8
81104790:	de00012e 	bgeu	sp,et,81104798 <vFeebCh3IrqFlagClrBufferEmpty+0xc>
81104794:	003b68fa 	trap	3
81104798:	dfc00115 	stw	ra,4(sp)
8110479c:	df000015 	stw	fp,0(sp)
811047a0:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811047a4:	01800044 	movi	r6,1
811047a8:	01400144 	movi	r5,5
811047ac:	01204834 	movhi	r4,33056
811047b0:	21090004 	addi	r4,r4,9216
811047b4:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047b8:	0001883a 	nop
811047bc:	e037883a 	mov	sp,fp
811047c0:	dfc00117 	ldw	ra,4(sp)
811047c4:	df000017 	ldw	fp,0(sp)
811047c8:	dec00204 	addi	sp,sp,8
811047cc:	f800283a 	ret

811047d0 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
811047d0:	defffe04 	addi	sp,sp,-8
811047d4:	de00012e 	bgeu	sp,et,811047dc <vFeebCh4IrqFlagClrBufferEmpty+0xc>
811047d8:	003b68fa 	trap	3
811047dc:	dfc00115 	stw	ra,4(sp)
811047e0:	df000015 	stw	fp,0(sp)
811047e4:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811047e8:	01800044 	movi	r6,1
811047ec:	01400144 	movi	r5,5
811047f0:	01204834 	movhi	r4,33056
811047f4:	21080004 	addi	r4,r4,8192
811047f8:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047fc:	0001883a 	nop
81104800:	e037883a 	mov	sp,fp
81104804:	dfc00117 	ldw	ra,4(sp)
81104808:	df000017 	ldw	fp,0(sp)
8110480c:	dec00204 	addi	sp,sp,8
81104810:	f800283a 	ret

81104814 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
81104814:	defffe04 	addi	sp,sp,-8
81104818:	de00012e 	bgeu	sp,et,81104820 <vFeebCh5IrqFlagClrBufferEmpty+0xc>
8110481c:	003b68fa 	trap	3
81104820:	dfc00115 	stw	ra,4(sp)
81104824:	df000015 	stw	fp,0(sp)
81104828:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
8110482c:	01800044 	movi	r6,1
81104830:	01400144 	movi	r5,5
81104834:	01204834 	movhi	r4,33056
81104838:	21070004 	addi	r4,r4,7168
8110483c:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104840:	0001883a 	nop
81104844:	e037883a 	mov	sp,fp
81104848:	dfc00117 	ldw	ra,4(sp)
8110484c:	df000017 	ldw	fp,0(sp)
81104850:	dec00204 	addi	sp,sp,8
81104854:	f800283a 	ret

81104858 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
81104858:	defffe04 	addi	sp,sp,-8
8110485c:	de00012e 	bgeu	sp,et,81104864 <vFeebCh6IrqFlagClrBufferEmpty+0xc>
81104860:	003b68fa 	trap	3
81104864:	dfc00115 	stw	ra,4(sp)
81104868:	df000015 	stw	fp,0(sp)
8110486c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104870:	01800044 	movi	r6,1
81104874:	01400144 	movi	r5,5
81104878:	01204834 	movhi	r4,33056
8110487c:	21060004 	addi	r4,r4,6144
81104880:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104884:	0001883a 	nop
81104888:	e037883a 	mov	sp,fp
8110488c:	dfc00117 	ldw	ra,4(sp)
81104890:	df000017 	ldw	fp,0(sp)
81104894:	dec00204 	addi	sp,sp,8
81104898:	f800283a 	ret

8110489c <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
8110489c:	defffe04 	addi	sp,sp,-8
811048a0:	de00012e 	bgeu	sp,et,811048a8 <vFeebCh7IrqFlagClrBufferEmpty+0xc>
811048a4:	003b68fa 	trap	3
811048a8:	dfc00115 	stw	ra,4(sp)
811048ac:	df000015 	stw	fp,0(sp)
811048b0:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
811048b4:	01800044 	movi	r6,1
811048b8:	01400144 	movi	r5,5
811048bc:	01204834 	movhi	r4,33056
811048c0:	21050004 	addi	r4,r4,5120
811048c4:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811048c8:	0001883a 	nop
811048cc:	e037883a 	mov	sp,fp
811048d0:	dfc00117 	ldw	ra,4(sp)
811048d4:	df000017 	ldw	fp,0(sp)
811048d8:	dec00204 	addi	sp,sp,8
811048dc:	f800283a 	ret

811048e0 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
811048e0:	defffe04 	addi	sp,sp,-8
811048e4:	de00012e 	bgeu	sp,et,811048ec <vFeebCh8IrqFlagClrBufferEmpty+0xc>
811048e8:	003b68fa 	trap	3
811048ec:	dfc00115 	stw	ra,4(sp)
811048f0:	df000015 	stw	fp,0(sp)
811048f4:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
811048f8:	01800044 	movi	r6,1
811048fc:	01400144 	movi	r5,5
81104900:	01204834 	movhi	r4,33056
81104904:	21040004 	addi	r4,r4,4096
81104908:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110490c:	0001883a 	nop
81104910:	e037883a 	mov	sp,fp
81104914:	dfc00117 	ldw	ra,4(sp)
81104918:	df000017 	ldw	fp,0(sp)
8110491c:	dec00204 	addi	sp,sp,8
81104920:	f800283a 	ret

81104924 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
81104924:	defffd04 	addi	sp,sp,-12
81104928:	de00012e 	bgeu	sp,et,81104930 <bFeebCh1IrqFlagBufferEmpty+0xc>
8110492c:	003b68fa 	trap	3
81104930:	dfc00215 	stw	ra,8(sp)
81104934:	df000115 	stw	fp,4(sp)
81104938:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
8110493c:	01400144 	movi	r5,5
81104940:	01204834 	movhi	r4,33056
81104944:	210b0004 	addi	r4,r4,11264
81104948:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110494c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81104950:	10000326 	beq	r2,zero,81104960 <bFeebCh1IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104954:	00800044 	movi	r2,1
81104958:	e0bfff15 	stw	r2,-4(fp)
8110495c:	00000106 	br	81104964 <bFeebCh1IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104960:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104964:	e0bfff17 	ldw	r2,-4(fp)
}
81104968:	e037883a 	mov	sp,fp
8110496c:	dfc00117 	ldw	ra,4(sp)
81104970:	df000017 	ldw	fp,0(sp)
81104974:	dec00204 	addi	sp,sp,8
81104978:	f800283a 	ret

8110497c <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
8110497c:	defffd04 	addi	sp,sp,-12
81104980:	de00012e 	bgeu	sp,et,81104988 <bFeebCh2IrqFlagBufferEmpty+0xc>
81104984:	003b68fa 	trap	3
81104988:	dfc00215 	stw	ra,8(sp)
8110498c:	df000115 	stw	fp,4(sp)
81104990:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104994:	01400144 	movi	r5,5
81104998:	01204834 	movhi	r4,33056
8110499c:	210a0004 	addi	r4,r4,10240
811049a0:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049a4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811049a8:	10000326 	beq	r2,zero,811049b8 <bFeebCh2IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811049ac:	00800044 	movi	r2,1
811049b0:	e0bfff15 	stw	r2,-4(fp)
811049b4:	00000106 	br	811049bc <bFeebCh2IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049b8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049bc:	e0bfff17 	ldw	r2,-4(fp)
}
811049c0:	e037883a 	mov	sp,fp
811049c4:	dfc00117 	ldw	ra,4(sp)
811049c8:	df000017 	ldw	fp,0(sp)
811049cc:	dec00204 	addi	sp,sp,8
811049d0:	f800283a 	ret

811049d4 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
811049d4:	defffd04 	addi	sp,sp,-12
811049d8:	de00012e 	bgeu	sp,et,811049e0 <bFeebCh3IrqFlagBufferEmpty+0xc>
811049dc:	003b68fa 	trap	3
811049e0:	dfc00215 	stw	ra,8(sp)
811049e4:	df000115 	stw	fp,4(sp)
811049e8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811049ec:	01400144 	movi	r5,5
811049f0:	01204834 	movhi	r4,33056
811049f4:	21090004 	addi	r4,r4,9216
811049f8:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049fc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104a00:	10000326 	beq	r2,zero,81104a10 <bFeebCh3IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a04:	00800044 	movi	r2,1
81104a08:	e0bfff15 	stw	r2,-4(fp)
81104a0c:	00000106 	br	81104a14 <bFeebCh3IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a10:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a14:	e0bfff17 	ldw	r2,-4(fp)
}
81104a18:	e037883a 	mov	sp,fp
81104a1c:	dfc00117 	ldw	ra,4(sp)
81104a20:	df000017 	ldw	fp,0(sp)
81104a24:	dec00204 	addi	sp,sp,8
81104a28:	f800283a 	ret

81104a2c <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
81104a2c:	defffd04 	addi	sp,sp,-12
81104a30:	de00012e 	bgeu	sp,et,81104a38 <bFeebCh4IrqFlagBufferEmpty+0xc>
81104a34:	003b68fa 	trap	3
81104a38:	dfc00215 	stw	ra,8(sp)
81104a3c:	df000115 	stw	fp,4(sp)
81104a40:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104a44:	01400144 	movi	r5,5
81104a48:	01204834 	movhi	r4,33056
81104a4c:	21080004 	addi	r4,r4,8192
81104a50:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a54:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104a58:	10000326 	beq	r2,zero,81104a68 <bFeebCh4IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a5c:	00800044 	movi	r2,1
81104a60:	e0bfff15 	stw	r2,-4(fp)
81104a64:	00000106 	br	81104a6c <bFeebCh4IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a68:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a6c:	e0bfff17 	ldw	r2,-4(fp)
}
81104a70:	e037883a 	mov	sp,fp
81104a74:	dfc00117 	ldw	ra,4(sp)
81104a78:	df000017 	ldw	fp,0(sp)
81104a7c:	dec00204 	addi	sp,sp,8
81104a80:	f800283a 	ret

81104a84 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104a84:	defffd04 	addi	sp,sp,-12
81104a88:	de00012e 	bgeu	sp,et,81104a90 <bFeebCh5IrqFlagBufferEmpty+0xc>
81104a8c:	003b68fa 	trap	3
81104a90:	dfc00215 	stw	ra,8(sp)
81104a94:	df000115 	stw	fp,4(sp)
81104a98:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a9c:	01400144 	movi	r5,5
81104aa0:	01204834 	movhi	r4,33056
81104aa4:	21070004 	addi	r4,r4,7168
81104aa8:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104aac:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104ab0:	10000326 	beq	r2,zero,81104ac0 <bFeebCh5IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104ab4:	00800044 	movi	r2,1
81104ab8:	e0bfff15 	stw	r2,-4(fp)
81104abc:	00000106 	br	81104ac4 <bFeebCh5IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104ac0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104ac4:	e0bfff17 	ldw	r2,-4(fp)
}
81104ac8:	e037883a 	mov	sp,fp
81104acc:	dfc00117 	ldw	ra,4(sp)
81104ad0:	df000017 	ldw	fp,0(sp)
81104ad4:	dec00204 	addi	sp,sp,8
81104ad8:	f800283a 	ret

81104adc <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104adc:	defffd04 	addi	sp,sp,-12
81104ae0:	de00012e 	bgeu	sp,et,81104ae8 <bFeebCh6IrqFlagBufferEmpty+0xc>
81104ae4:	003b68fa 	trap	3
81104ae8:	dfc00215 	stw	ra,8(sp)
81104aec:	df000115 	stw	fp,4(sp)
81104af0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104af4:	01400144 	movi	r5,5
81104af8:	01204834 	movhi	r4,33056
81104afc:	21060004 	addi	r4,r4,6144
81104b00:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b04:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104b08:	10000326 	beq	r2,zero,81104b18 <bFeebCh6IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b0c:	00800044 	movi	r2,1
81104b10:	e0bfff15 	stw	r2,-4(fp)
81104b14:	00000106 	br	81104b1c <bFeebCh6IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b18:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b1c:	e0bfff17 	ldw	r2,-4(fp)
}
81104b20:	e037883a 	mov	sp,fp
81104b24:	dfc00117 	ldw	ra,4(sp)
81104b28:	df000017 	ldw	fp,0(sp)
81104b2c:	dec00204 	addi	sp,sp,8
81104b30:	f800283a 	ret

81104b34 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104b34:	defffd04 	addi	sp,sp,-12
81104b38:	de00012e 	bgeu	sp,et,81104b40 <bFeebCh7IrqFlagBufferEmpty+0xc>
81104b3c:	003b68fa 	trap	3
81104b40:	dfc00215 	stw	ra,8(sp)
81104b44:	df000115 	stw	fp,4(sp)
81104b48:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104b4c:	01400144 	movi	r5,5
81104b50:	01204834 	movhi	r4,33056
81104b54:	21050004 	addi	r4,r4,5120
81104b58:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b5c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104b60:	10000326 	beq	r2,zero,81104b70 <bFeebCh7IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b64:	00800044 	movi	r2,1
81104b68:	e0bfff15 	stw	r2,-4(fp)
81104b6c:	00000106 	br	81104b74 <bFeebCh7IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b70:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b74:	e0bfff17 	ldw	r2,-4(fp)
}
81104b78:	e037883a 	mov	sp,fp
81104b7c:	dfc00117 	ldw	ra,4(sp)
81104b80:	df000017 	ldw	fp,0(sp)
81104b84:	dec00204 	addi	sp,sp,8
81104b88:	f800283a 	ret

81104b8c <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104b8c:	defffd04 	addi	sp,sp,-12
81104b90:	de00012e 	bgeu	sp,et,81104b98 <bFeebCh8IrqFlagBufferEmpty+0xc>
81104b94:	003b68fa 	trap	3
81104b98:	dfc00215 	stw	ra,8(sp)
81104b9c:	df000115 	stw	fp,4(sp)
81104ba0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104ba4:	01400144 	movi	r5,5
81104ba8:	01204834 	movhi	r4,33056
81104bac:	21040004 	addi	r4,r4,4096
81104bb0:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104bb4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104bb8:	10000326 	beq	r2,zero,81104bc8 <bFeebCh8IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104bbc:	00800044 	movi	r2,1
81104bc0:	e0bfff15 	stw	r2,-4(fp)
81104bc4:	00000106 	br	81104bcc <bFeebCh8IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104bc8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104bcc:	e0bfff17 	ldw	r2,-4(fp)
}
81104bd0:	e037883a 	mov	sp,fp
81104bd4:	dfc00117 	ldw	ra,4(sp)
81104bd8:	df000017 	ldw	fp,0(sp)
81104bdc:	dec00204 	addi	sp,sp,8
81104be0:	f800283a 	ret

81104be4 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81104be4:	defffc04 	addi	sp,sp,-16
81104be8:	de00012e 	bgeu	sp,et,81104bf0 <vFeebInitIrq+0xc>
81104bec:	003b68fa 	trap	3
81104bf0:	dfc00315 	stw	ra,12(sp)
81104bf4:	df000215 	stw	fp,8(sp)
81104bf8:	df000204 	addi	fp,sp,8
81104bfc:	2005883a 	mov	r2,r4
81104c00:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104c04:	e0bfff03 	ldbu	r2,-4(fp)
81104c08:	10c00268 	cmpgeui	r3,r2,9
81104c0c:	18004f1e 	bne	r3,zero,81104d4c <vFeebInitIrq+0x168>
81104c10:	100690ba 	slli	r3,r2,2
81104c14:	00a04434 	movhi	r2,33040
81104c18:	10930a04 	addi	r2,r2,19496
81104c1c:	1885883a 	add	r2,r3,r2
81104c20:	10800017 	ldw	r2,0(r2)
81104c24:	1000683a 	jmp	r2
81104c28:	81104d4c 	andi	r4,r16,16693
81104c2c:	81104c4c 	andi	r4,r16,16689
81104c30:	81104c6c 	andhi	r4,r16,16689
81104c34:	81104c8c 	andi	r4,r16,16690
81104c38:	81104cac 	andhi	r4,r16,16690
81104c3c:	81104ccc 	andi	r4,r16,16691
81104c40:	81104cec 	andhi	r4,r16,16691
81104c44:	81104d0c 	andi	r4,r16,16692
81104c48:	81104d2c 	andhi	r4,r16,16692
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81104c4c:	d0a03e04 	addi	r2,gp,-32520
81104c50:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104c54:	01a04434 	movhi	r6,33040
81104c58:	31914104 	addi	r6,r6,17668
81104c5c:	e17ffe17 	ldw	r5,-8(fp)
81104c60:	01000084 	movi	r4,2
81104c64:	1127c0c0 	call	81127c0c <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104c68:	00003806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81104c6c:	d0a03f04 	addi	r2,gp,-32516
81104c70:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
81104c74:	01a04434 	movhi	r6,33040
81104c78:	31915104 	addi	r6,r6,17732
81104c7c:	e17ffe17 	ldw	r5,-8(fp)
81104c80:	010000c4 	movi	r4,3
81104c84:	1127c0c0 	call	81127c0c <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
81104c88:	00003006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81104c8c:	d0a04004 	addi	r2,gp,-32512
81104c90:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
81104c94:	01a04434 	movhi	r6,33040
81104c98:	31916104 	addi	r6,r6,17796
81104c9c:	e17ffe17 	ldw	r5,-8(fp)
81104ca0:	01000104 	movi	r4,4
81104ca4:	1127c0c0 	call	81127c0c <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81104ca8:	00002806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81104cac:	d0a04104 	addi	r2,gp,-32508
81104cb0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
81104cb4:	01a04434 	movhi	r6,33040
81104cb8:	31917104 	addi	r6,r6,17860
81104cbc:	e17ffe17 	ldw	r5,-8(fp)
81104cc0:	01000204 	movi	r4,8
81104cc4:	1127c0c0 	call	81127c0c <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81104cc8:	00002006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81104ccc:	d0a04204 	addi	r2,gp,-32504
81104cd0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104cd4:	01a04434 	movhi	r6,33040
81104cd8:	31918104 	addi	r6,r6,17924
81104cdc:	e17ffe17 	ldw	r5,-8(fp)
81104ce0:	010001c4 	movi	r4,7
81104ce4:	1127c0c0 	call	81127c0c <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104ce8:	00001806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81104cec:	d0a04304 	addi	r2,gp,-32500
81104cf0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104cf4:	01a04434 	movhi	r6,33040
81104cf8:	31919104 	addi	r6,r6,17988
81104cfc:	e17ffe17 	ldw	r5,-8(fp)
81104d00:	01000184 	movi	r4,6
81104d04:	1127c0c0 	call	81127c0c <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104d08:	00001006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81104d0c:	d0a04404 	addi	r2,gp,-32496
81104d10:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104d14:	01a04434 	movhi	r6,33040
81104d18:	3191a104 	addi	r6,r6,18052
81104d1c:	e17ffe17 	ldw	r5,-8(fp)
81104d20:	01000144 	movi	r4,5
81104d24:	1127c0c0 	call	81127c0c <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104d28:	00000806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81104d2c:	d0a04504 	addi	r2,gp,-32492
81104d30:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104d34:	01a04434 	movhi	r6,33040
81104d38:	3191b104 	addi	r6,r6,18116
81104d3c:	e17ffe17 	ldw	r5,-8(fp)
81104d40:	01000244 	movi	r4,9
81104d44:	1127c0c0 	call	81127c0c <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104d48:	0001883a 	nop
	}
}
81104d4c:	0001883a 	nop
81104d50:	e037883a 	mov	sp,fp
81104d54:	dfc00117 	ldw	ra,4(sp)
81104d58:	df000017 	ldw	fp,0(sp)
81104d5c:	dec00204 	addi	sp,sp,8
81104d60:	f800283a 	ret

81104d64 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104d64:	defffb04 	addi	sp,sp,-20
81104d68:	de00012e 	bgeu	sp,et,81104d70 <bFeebSetIrqControl+0xc>
81104d6c:	003b68fa 	trap	3
81104d70:	dfc00415 	stw	ra,16(sp)
81104d74:	df000315 	stw	fp,12(sp)
81104d78:	df000304 	addi	fp,sp,12
81104d7c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104d80:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104d84:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104d88:	e0bfff17 	ldw	r2,-4(fp)
81104d8c:	10002426 	beq	r2,zero,81104e20 <bFeebSetIrqControl+0xbc>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104d90:	e0bfff17 	ldw	r2,-4(fp)
81104d94:	10800017 	ldw	r2,0(r2)
81104d98:	01400104 	movi	r5,4
81104d9c:	1009883a 	mov	r4,r2
81104da0:	110519c0 	call	8110519c <uliFeebReadReg>
81104da4:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81104da8:	e0bfff17 	ldw	r2,-4(fp)
81104dac:	10800217 	ldw	r2,8(r2)
81104db0:	10000426 	beq	r2,zero,81104dc4 <bFeebSetIrqControl+0x60>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
81104db4:	e0bffe17 	ldw	r2,-8(fp)
81104db8:	10804014 	ori	r2,r2,256
81104dbc:	e0bffe15 	stw	r2,-8(fp)
81104dc0:	00000406 	br	81104dd4 <bFeebSetIrqControl+0x70>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
81104dc4:	e0fffe17 	ldw	r3,-8(fp)
81104dc8:	00bfbfc4 	movi	r2,-257
81104dcc:	1884703a 	and	r2,r3,r2
81104dd0:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
81104dd4:	e0bfff17 	ldw	r2,-4(fp)
81104dd8:	10800317 	ldw	r2,12(r2)
81104ddc:	10000426 	beq	r2,zero,81104df0 <bFeebSetIrqControl+0x8c>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104de0:	e0bffe17 	ldw	r2,-8(fp)
81104de4:	10800054 	ori	r2,r2,1
81104de8:	e0bffe15 	stw	r2,-8(fp)
81104dec:	00000406 	br	81104e00 <bFeebSetIrqControl+0x9c>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104df0:	e0fffe17 	ldw	r3,-8(fp)
81104df4:	00bfff84 	movi	r2,-2
81104df8:	1884703a 	and	r2,r3,r2
81104dfc:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104e00:	e0bfff17 	ldw	r2,-4(fp)
81104e04:	10800017 	ldw	r2,0(r2)
81104e08:	e1bffe17 	ldw	r6,-8(fp)
81104e0c:	01400104 	movi	r5,4
81104e10:	1009883a 	mov	r4,r2
81104e14:	11051480 	call	81105148 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104e18:	00800044 	movi	r2,1
81104e1c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104e20:	e0bffd17 	ldw	r2,-12(fp)
}
81104e24:	e037883a 	mov	sp,fp
81104e28:	dfc00117 	ldw	ra,4(sp)
81104e2c:	df000017 	ldw	fp,0(sp)
81104e30:	dec00204 	addi	sp,sp,8
81104e34:	f800283a 	ret

81104e38 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104e38:	defffb04 	addi	sp,sp,-20
81104e3c:	de00012e 	bgeu	sp,et,81104e44 <bFeebGetIrqControl+0xc>
81104e40:	003b68fa 	trap	3
81104e44:	dfc00415 	stw	ra,16(sp)
81104e48:	df000315 	stw	fp,12(sp)
81104e4c:	df000304 	addi	fp,sp,12
81104e50:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104e54:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104e58:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104e5c:	e0bfff17 	ldw	r2,-4(fp)
81104e60:	10001a26 	beq	r2,zero,81104ecc <bFeebGetIrqControl+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104e64:	e0bfff17 	ldw	r2,-4(fp)
81104e68:	10800017 	ldw	r2,0(r2)
81104e6c:	01400104 	movi	r5,4
81104e70:	1009883a 	mov	r4,r2
81104e74:	110519c0 	call	8110519c <uliFeebReadReg>
81104e78:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
81104e7c:	e0bffe17 	ldw	r2,-8(fp)
81104e80:	1080400c 	andi	r2,r2,256
81104e84:	10000426 	beq	r2,zero,81104e98 <bFeebGetIrqControl+0x60>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
81104e88:	e0bfff17 	ldw	r2,-4(fp)
81104e8c:	00c00044 	movi	r3,1
81104e90:	10c00215 	stw	r3,8(r2)
81104e94:	00000206 	br	81104ea0 <bFeebGetIrqControl+0x68>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
81104e98:	e0bfff17 	ldw	r2,-4(fp)
81104e9c:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
81104ea0:	e0bffe17 	ldw	r2,-8(fp)
81104ea4:	1080004c 	andi	r2,r2,1
81104ea8:	10000426 	beq	r2,zero,81104ebc <bFeebGetIrqControl+0x84>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
81104eac:	e0bfff17 	ldw	r2,-4(fp)
81104eb0:	00c00044 	movi	r3,1
81104eb4:	10c00315 	stw	r3,12(r2)
81104eb8:	00000206 	br	81104ec4 <bFeebGetIrqControl+0x8c>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
81104ebc:	e0bfff17 	ldw	r2,-4(fp)
81104ec0:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104ec4:	00800044 	movi	r2,1
81104ec8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ecc:	e0bffd17 	ldw	r2,-12(fp)
}
81104ed0:	e037883a 	mov	sp,fp
81104ed4:	dfc00117 	ldw	ra,4(sp)
81104ed8:	df000017 	ldw	fp,0(sp)
81104edc:	dec00204 	addi	sp,sp,8
81104ee0:	f800283a 	ret

81104ee4 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104ee4:	defffb04 	addi	sp,sp,-20
81104ee8:	de00012e 	bgeu	sp,et,81104ef0 <bFeebGetIrqFlags+0xc>
81104eec:	003b68fa 	trap	3
81104ef0:	dfc00415 	stw	ra,16(sp)
81104ef4:	df000315 	stw	fp,12(sp)
81104ef8:	df000304 	addi	fp,sp,12
81104efc:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f00:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f04:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f08:	e0bfff17 	ldw	r2,-4(fp)
81104f0c:	10001126 	beq	r2,zero,81104f54 <bFeebGetIrqFlags+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f10:	e0bfff17 	ldw	r2,-4(fp)
81104f14:	10800017 	ldw	r2,0(r2)
81104f18:	01400144 	movi	r5,5
81104f1c:	1009883a 	mov	r4,r2
81104f20:	110519c0 	call	8110519c <uliFeebReadReg>
81104f24:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104f28:	e0bffe17 	ldw	r2,-8(fp)
81104f2c:	1080004c 	andi	r2,r2,1
81104f30:	10000426 	beq	r2,zero,81104f44 <bFeebGetIrqFlags+0x60>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
81104f34:	e0bfff17 	ldw	r2,-4(fp)
81104f38:	00c00044 	movi	r3,1
81104f3c:	10c00415 	stw	r3,16(r2)
81104f40:	00000206 	br	81104f4c <bFeebGetIrqFlags+0x68>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
81104f44:	e0bfff17 	ldw	r2,-4(fp)
81104f48:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104f4c:	00800044 	movi	r2,1
81104f50:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104f54:	e0bffd17 	ldw	r2,-12(fp)
}
81104f58:	e037883a 	mov	sp,fp
81104f5c:	dfc00117 	ldw	ra,4(sp)
81104f60:	df000017 	ldw	fp,0(sp)
81104f64:	dec00204 	addi	sp,sp,8
81104f68:	f800283a 	ret

81104f6c <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104f6c:	defffb04 	addi	sp,sp,-20
81104f70:	de00012e 	bgeu	sp,et,81104f78 <bFeebSetWindowing+0xc>
81104f74:	003b68fa 	trap	3
81104f78:	dfc00415 	stw	ra,16(sp)
81104f7c:	df000315 	stw	fp,12(sp)
81104f80:	df000304 	addi	fp,sp,12
81104f84:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f88:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f8c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f90:	e0bfff17 	ldw	r2,-4(fp)
81104f94:	10001926 	beq	r2,zero,81104ffc <bFeebSetWindowing+0x90>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f98:	e0bfff17 	ldw	r2,-4(fp)
81104f9c:	10800017 	ldw	r2,0(r2)
81104fa0:	000b883a 	mov	r5,zero
81104fa4:	1009883a 	mov	r4,r2
81104fa8:	110519c0 	call	8110519c <uliFeebReadReg>
81104fac:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81104fb0:	e0bfff17 	ldw	r2,-4(fp)
81104fb4:	10800117 	ldw	r2,4(r2)
81104fb8:	10000426 	beq	r2,zero,81104fcc <bFeebSetWindowing+0x60>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
81104fbc:	e0bffe17 	ldw	r2,-8(fp)
81104fc0:	10804014 	ori	r2,r2,256
81104fc4:	e0bffe15 	stw	r2,-8(fp)
81104fc8:	00000406 	br	81104fdc <bFeebSetWindowing+0x70>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
81104fcc:	e0fffe17 	ldw	r3,-8(fp)
81104fd0:	00bfbfc4 	movi	r2,-257
81104fd4:	1884703a 	and	r2,r3,r2
81104fd8:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104fdc:	e0bfff17 	ldw	r2,-4(fp)
81104fe0:	10800017 	ldw	r2,0(r2)
81104fe4:	e1bffe17 	ldw	r6,-8(fp)
81104fe8:	000b883a 	mov	r5,zero
81104fec:	1009883a 	mov	r4,r2
81104ff0:	11051480 	call	81105148 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104ff4:	00800044 	movi	r2,1
81104ff8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ffc:	e0bffd17 	ldw	r2,-12(fp)
}
81105000:	e037883a 	mov	sp,fp
81105004:	dfc00117 	ldw	ra,4(sp)
81105008:	df000017 	ldw	fp,0(sp)
8110500c:	dec00204 	addi	sp,sp,8
81105010:	f800283a 	ret

81105014 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81105014:	defffb04 	addi	sp,sp,-20
81105018:	de00012e 	bgeu	sp,et,81105020 <bFeebGetWindowing+0xc>
8110501c:	003b68fa 	trap	3
81105020:	dfc00415 	stw	ra,16(sp)
81105024:	df000315 	stw	fp,12(sp)
81105028:	df000304 	addi	fp,sp,12
8110502c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105030:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105034:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105038:	e0bfff17 	ldw	r2,-4(fp)
8110503c:	10001126 	beq	r2,zero,81105084 <bFeebGetWindowing+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105040:	e0bfff17 	ldw	r2,-4(fp)
81105044:	10800017 	ldw	r2,0(r2)
81105048:	000b883a 	mov	r5,zero
8110504c:	1009883a 	mov	r4,r2
81105050:	110519c0 	call	8110519c <uliFeebReadReg>
81105054:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81105058:	e0bffe17 	ldw	r2,-8(fp)
8110505c:	1080400c 	andi	r2,r2,256
81105060:	10000426 	beq	r2,zero,81105074 <bFeebGetWindowing+0x60>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81105064:	e0bfff17 	ldw	r2,-4(fp)
81105068:	00c00044 	movi	r3,1
8110506c:	10c00115 	stw	r3,4(r2)
81105070:	00000206 	br	8110507c <bFeebGetWindowing+0x68>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105074:	e0bfff17 	ldw	r2,-4(fp)
81105078:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
8110507c:	00800044 	movi	r2,1
81105080:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105084:	e0bffd17 	ldw	r2,-12(fp)
}
81105088:	e037883a 	mov	sp,fp
8110508c:	dfc00117 	ldw	ra,4(sp)
81105090:	df000017 	ldw	fp,0(sp)
81105094:	dec00204 	addi	sp,sp,8
81105098:	f800283a 	ret

8110509c <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
8110509c:	defffb04 	addi	sp,sp,-20
811050a0:	de00012e 	bgeu	sp,et,811050a8 <bFeebGetBuffersStatus+0xc>
811050a4:	003b68fa 	trap	3
811050a8:	dfc00415 	stw	ra,16(sp)
811050ac:	df000315 	stw	fp,12(sp)
811050b0:	df000304 	addi	fp,sp,12
811050b4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811050b8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811050bc:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811050c0:	e0bfff17 	ldw	r2,-4(fp)
811050c4:	10001a26 	beq	r2,zero,81105130 <bFeebGetBuffersStatus+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811050c8:	e0bfff17 	ldw	r2,-4(fp)
811050cc:	10800017 	ldw	r2,0(r2)
811050d0:	01400184 	movi	r5,6
811050d4:	1009883a 	mov	r4,r2
811050d8:	110519c0 	call	8110519c <uliFeebReadReg>
811050dc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
811050e0:	e0bffe17 	ldw	r2,-8(fp)
811050e4:	1080400c 	andi	r2,r2,256
811050e8:	10000426 	beq	r2,zero,811050fc <bFeebGetBuffersStatus+0x60>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
811050ec:	e0bfff17 	ldw	r2,-4(fp)
811050f0:	00c00044 	movi	r3,1
811050f4:	10c00515 	stw	r3,20(r2)
811050f8:	00000206 	br	81105104 <bFeebGetBuffersStatus+0x68>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
811050fc:	e0bfff17 	ldw	r2,-4(fp)
81105100:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81105104:	e0bffe17 	ldw	r2,-8(fp)
81105108:	1080004c 	andi	r2,r2,1
8110510c:	10000426 	beq	r2,zero,81105120 <bFeebGetBuffersStatus+0x84>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
81105110:	e0bfff17 	ldw	r2,-4(fp)
81105114:	00c00044 	movi	r3,1
81105118:	10c00615 	stw	r3,24(r2)
8110511c:	00000206 	br	81105128 <bFeebGetBuffersStatus+0x8c>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
81105120:	e0bfff17 	ldw	r2,-4(fp)
81105124:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
81105128:	00800044 	movi	r2,1
8110512c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105130:	e0bffd17 	ldw	r2,-12(fp)
}
81105134:	e037883a 	mov	sp,fp
81105138:	dfc00117 	ldw	ra,4(sp)
8110513c:	df000017 	ldw	fp,0(sp)
81105140:	dec00204 	addi	sp,sp,8
81105144:	f800283a 	ret

81105148 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81105148:	defffc04 	addi	sp,sp,-16
8110514c:	de00012e 	bgeu	sp,et,81105154 <vFeebWriteReg+0xc>
81105150:	003b68fa 	trap	3
81105154:	df000315 	stw	fp,12(sp)
81105158:	df000304 	addi	fp,sp,12
8110515c:	e13ffd15 	stw	r4,-12(fp)
81105160:	e17ffe15 	stw	r5,-8(fp)
81105164:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81105168:	e0bffe17 	ldw	r2,-8(fp)
8110516c:	1085883a 	add	r2,r2,r2
81105170:	1085883a 	add	r2,r2,r2
81105174:	1007883a 	mov	r3,r2
81105178:	e0bffd17 	ldw	r2,-12(fp)
8110517c:	10c5883a 	add	r2,r2,r3
81105180:	e0ffff17 	ldw	r3,-4(fp)
81105184:	10c00015 	stw	r3,0(r2)
}
81105188:	0001883a 	nop
8110518c:	e037883a 	mov	sp,fp
81105190:	df000017 	ldw	fp,0(sp)
81105194:	dec00104 	addi	sp,sp,4
81105198:	f800283a 	ret

8110519c <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110519c:	defffc04 	addi	sp,sp,-16
811051a0:	de00012e 	bgeu	sp,et,811051a8 <uliFeebReadReg+0xc>
811051a4:	003b68fa 	trap	3
811051a8:	df000315 	stw	fp,12(sp)
811051ac:	df000304 	addi	fp,sp,12
811051b0:	e13ffe15 	stw	r4,-8(fp)
811051b4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811051b8:	e0bfff17 	ldw	r2,-4(fp)
811051bc:	1085883a 	add	r2,r2,r2
811051c0:	1085883a 	add	r2,r2,r2
811051c4:	1007883a 	mov	r3,r2
811051c8:	e0bffe17 	ldw	r2,-8(fp)
811051cc:	10c5883a 	add	r2,r2,r3
811051d0:	10800017 	ldw	r2,0(r2)
811051d4:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
811051d8:	e0bffd17 	ldw	r2,-12(fp)
}
811051dc:	e037883a 	mov	sp,fp
811051e0:	df000017 	ldw	fp,0(sp)
811051e4:	dec00104 	addi	sp,sp,4
811051e8:	f800283a 	ret

811051ec <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
811051ec:	defffb04 	addi	sp,sp,-20
811051f0:	de00012e 	bgeu	sp,et,811051f8 <bSpwcSetLink+0xc>
811051f4:	003b68fa 	trap	3
811051f8:	dfc00415 	stw	ra,16(sp)
811051fc:	df000315 	stw	fp,12(sp)
81105200:	df000304 	addi	fp,sp,12
81105204:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105208:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110520c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105210:	e0bfff17 	ldw	r2,-4(fp)
81105214:	10002f26 	beq	r2,zero,811052d4 <bSpwcSetLink+0xe8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105218:	e0bfff17 	ldw	r2,-4(fp)
8110521c:	10800017 	ldw	r2,0(r2)
81105220:	000b883a 	mov	r5,zero
81105224:	1009883a 	mov	r4,r2
81105228:	110574c0 	call	8110574c <uliSpwcReadReg>
8110522c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
81105230:	e0bfff17 	ldw	r2,-4(fp)
81105234:	10800117 	ldw	r2,4(r2)
81105238:	10000426 	beq	r2,zero,8110524c <bSpwcSetLink+0x60>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
8110523c:	e0bffe17 	ldw	r2,-8(fp)
81105240:	10800114 	ori	r2,r2,4
81105244:	e0bffe15 	stw	r2,-8(fp)
81105248:	00000406 	br	8110525c <bSpwcSetLink+0x70>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
8110524c:	e0fffe17 	ldw	r3,-8(fp)
81105250:	00bffec4 	movi	r2,-5
81105254:	1884703a 	and	r2,r3,r2
81105258:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
8110525c:	e0bfff17 	ldw	r2,-4(fp)
81105260:	10800217 	ldw	r2,8(r2)
81105264:	10000426 	beq	r2,zero,81105278 <bSpwcSetLink+0x8c>
			uliReg |= COMM_CTRL_LINK_START_MSK;
81105268:	e0bffe17 	ldw	r2,-8(fp)
8110526c:	10800094 	ori	r2,r2,2
81105270:	e0bffe15 	stw	r2,-8(fp)
81105274:	00000406 	br	81105288 <bSpwcSetLink+0x9c>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81105278:	e0fffe17 	ldw	r3,-8(fp)
8110527c:	00bfff44 	movi	r2,-3
81105280:	1884703a 	and	r2,r3,r2
81105284:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81105288:	e0bfff17 	ldw	r2,-4(fp)
8110528c:	10800317 	ldw	r2,12(r2)
81105290:	10000426 	beq	r2,zero,811052a4 <bSpwcSetLink+0xb8>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81105294:	e0bffe17 	ldw	r2,-8(fp)
81105298:	10800054 	ori	r2,r2,1
8110529c:	e0bffe15 	stw	r2,-8(fp)
811052a0:	00000406 	br	811052b4 <bSpwcSetLink+0xc8>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
811052a4:	e0fffe17 	ldw	r3,-8(fp)
811052a8:	00bfff84 	movi	r2,-2
811052ac:	1884703a 	and	r2,r3,r2
811052b0:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
811052b4:	e0bfff17 	ldw	r2,-4(fp)
811052b8:	10800017 	ldw	r2,0(r2)
811052bc:	e1bffe17 	ldw	r6,-8(fp)
811052c0:	000b883a 	mov	r5,zero
811052c4:	1009883a 	mov	r4,r2
811052c8:	11056f80 	call	811056f8 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
811052cc:	00800044 	movi	r2,1
811052d0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811052d4:	e0bffd17 	ldw	r2,-12(fp)
}
811052d8:	e037883a 	mov	sp,fp
811052dc:	dfc00117 	ldw	ra,4(sp)
811052e0:	df000017 	ldw	fp,0(sp)
811052e4:	dec00204 	addi	sp,sp,8
811052e8:	f800283a 	ret

811052ec <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
811052ec:	defffb04 	addi	sp,sp,-20
811052f0:	de00012e 	bgeu	sp,et,811052f8 <bSpwcGetLink+0xc>
811052f4:	003b68fa 	trap	3
811052f8:	dfc00415 	stw	ra,16(sp)
811052fc:	df000315 	stw	fp,12(sp)
81105300:	df000304 	addi	fp,sp,12
81105304:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105308:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110530c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105310:	e0bfff17 	ldw	r2,-4(fp)
81105314:	10002326 	beq	r2,zero,811053a4 <bSpwcGetLink+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105318:	e0bfff17 	ldw	r2,-4(fp)
8110531c:	10800017 	ldw	r2,0(r2)
81105320:	000b883a 	mov	r5,zero
81105324:	1009883a 	mov	r4,r2
81105328:	110574c0 	call	8110574c <uliSpwcReadReg>
8110532c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
81105330:	e0bffe17 	ldw	r2,-8(fp)
81105334:	1080010c 	andi	r2,r2,4
81105338:	10000426 	beq	r2,zero,8110534c <bSpwcGetLink+0x60>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
8110533c:	e0bfff17 	ldw	r2,-4(fp)
81105340:	00c00044 	movi	r3,1
81105344:	10c00115 	stw	r3,4(r2)
81105348:	00000206 	br	81105354 <bSpwcGetLink+0x68>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
8110534c:	e0bfff17 	ldw	r2,-4(fp)
81105350:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
81105354:	e0bffe17 	ldw	r2,-8(fp)
81105358:	1080008c 	andi	r2,r2,2
8110535c:	10000426 	beq	r2,zero,81105370 <bSpwcGetLink+0x84>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
81105360:	e0bfff17 	ldw	r2,-4(fp)
81105364:	00c00044 	movi	r3,1
81105368:	10c00215 	stw	r3,8(r2)
8110536c:	00000206 	br	81105378 <bSpwcGetLink+0x8c>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81105370:	e0bfff17 	ldw	r2,-4(fp)
81105374:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81105378:	e0bffe17 	ldw	r2,-8(fp)
8110537c:	1080004c 	andi	r2,r2,1
81105380:	10000426 	beq	r2,zero,81105394 <bSpwcGetLink+0xa8>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81105384:	e0bfff17 	ldw	r2,-4(fp)
81105388:	00c00044 	movi	r3,1
8110538c:	10c00315 	stw	r3,12(r2)
81105390:	00000206 	br	8110539c <bSpwcGetLink+0xb0>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81105394:	e0bfff17 	ldw	r2,-4(fp)
81105398:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
8110539c:	00800044 	movi	r2,1
811053a0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811053a4:	e0bffd17 	ldw	r2,-12(fp)
}
811053a8:	e037883a 	mov	sp,fp
811053ac:	dfc00117 	ldw	ra,4(sp)
811053b0:	df000017 	ldw	fp,0(sp)
811053b4:	dec00204 	addi	sp,sp,8
811053b8:	f800283a 	ret

811053bc <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
811053bc:	defffb04 	addi	sp,sp,-20
811053c0:	de00012e 	bgeu	sp,et,811053c8 <bSpwcGetLinkError+0xc>
811053c4:	003b68fa 	trap	3
811053c8:	dfc00415 	stw	ra,16(sp)
811053cc:	df000315 	stw	fp,12(sp)
811053d0:	df000304 	addi	fp,sp,12
811053d4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811053d8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811053dc:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811053e0:	e0bfff17 	ldw	r2,-4(fp)
811053e4:	10002c26 	beq	r2,zero,81105498 <bSpwcGetLinkError+0xdc>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811053e8:	e0bfff17 	ldw	r2,-4(fp)
811053ec:	10800017 	ldw	r2,0(r2)
811053f0:	01400044 	movi	r5,1
811053f4:	1009883a 	mov	r4,r2
811053f8:	110574c0 	call	8110574c <uliSpwcReadReg>
811053fc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81105400:	e0bffe17 	ldw	r2,-8(fp)
81105404:	1082000c 	andi	r2,r2,2048
81105408:	10000426 	beq	r2,zero,8110541c <bSpwcGetLinkError+0x60>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110540c:	e0bfff17 	ldw	r2,-4(fp)
81105410:	00c00044 	movi	r3,1
81105414:	10c00415 	stw	r3,16(r2)
81105418:	00000206 	br	81105424 <bSpwcGetLinkError+0x68>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
8110541c:	e0bfff17 	ldw	r2,-4(fp)
81105420:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
81105424:	e0bffe17 	ldw	r2,-8(fp)
81105428:	1081000c 	andi	r2,r2,1024
8110542c:	10000426 	beq	r2,zero,81105440 <bSpwcGetLinkError+0x84>
			pxSpwcCh->xLinkError.bParity = TRUE;
81105430:	e0bfff17 	ldw	r2,-4(fp)
81105434:	00c00044 	movi	r3,1
81105438:	10c00515 	stw	r3,20(r2)
8110543c:	00000206 	br	81105448 <bSpwcGetLinkError+0x8c>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
81105440:	e0bfff17 	ldw	r2,-4(fp)
81105444:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
81105448:	e0bffe17 	ldw	r2,-8(fp)
8110544c:	1080800c 	andi	r2,r2,512
81105450:	10000426 	beq	r2,zero,81105464 <bSpwcGetLinkError+0xa8>
			pxSpwcCh->xLinkError.bEscape = TRUE;
81105454:	e0bfff17 	ldw	r2,-4(fp)
81105458:	00c00044 	movi	r3,1
8110545c:	10c00615 	stw	r3,24(r2)
81105460:	00000206 	br	8110546c <bSpwcGetLinkError+0xb0>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
81105464:	e0bfff17 	ldw	r2,-4(fp)
81105468:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
8110546c:	e0bffe17 	ldw	r2,-8(fp)
81105470:	1080400c 	andi	r2,r2,256
81105474:	10000426 	beq	r2,zero,81105488 <bSpwcGetLinkError+0xcc>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81105478:	e0bfff17 	ldw	r2,-4(fp)
8110547c:	00c00044 	movi	r3,1
81105480:	10c00715 	stw	r3,28(r2)
81105484:	00000206 	br	81105490 <bSpwcGetLinkError+0xd4>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81105488:	e0bfff17 	ldw	r2,-4(fp)
8110548c:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81105490:	00800044 	movi	r2,1
81105494:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105498:	e0bffd17 	ldw	r2,-12(fp)
}
8110549c:	e037883a 	mov	sp,fp
811054a0:	dfc00117 	ldw	ra,4(sp)
811054a4:	df000017 	ldw	fp,0(sp)
811054a8:	dec00204 	addi	sp,sp,8
811054ac:	f800283a 	ret

811054b0 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
811054b0:	defffb04 	addi	sp,sp,-20
811054b4:	de00012e 	bgeu	sp,et,811054bc <bSpwcGetLinkStatus+0xc>
811054b8:	003b68fa 	trap	3
811054bc:	dfc00415 	stw	ra,16(sp)
811054c0:	df000315 	stw	fp,12(sp)
811054c4:	df000304 	addi	fp,sp,12
811054c8:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811054cc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811054d0:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811054d4:	e0bfff17 	ldw	r2,-4(fp)
811054d8:	10002326 	beq	r2,zero,81105568 <bSpwcGetLinkStatus+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811054dc:	e0bfff17 	ldw	r2,-4(fp)
811054e0:	10800017 	ldw	r2,0(r2)
811054e4:	01400044 	movi	r5,1
811054e8:	1009883a 	mov	r4,r2
811054ec:	110574c0 	call	8110574c <uliSpwcReadReg>
811054f0:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
811054f4:	e0bffe17 	ldw	r2,-8(fp)
811054f8:	1080010c 	andi	r2,r2,4
811054fc:	10000426 	beq	r2,zero,81105510 <bSpwcGetLinkStatus+0x60>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81105500:	e0bfff17 	ldw	r2,-4(fp)
81105504:	00c00044 	movi	r3,1
81105508:	10c00815 	stw	r3,32(r2)
8110550c:	00000206 	br	81105518 <bSpwcGetLinkStatus+0x68>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
81105510:	e0bfff17 	ldw	r2,-4(fp)
81105514:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
81105518:	e0bffe17 	ldw	r2,-8(fp)
8110551c:	1080008c 	andi	r2,r2,2
81105520:	10000426 	beq	r2,zero,81105534 <bSpwcGetLinkStatus+0x84>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
81105524:	e0bfff17 	ldw	r2,-4(fp)
81105528:	00c00044 	movi	r3,1
8110552c:	10c00915 	stw	r3,36(r2)
81105530:	00000206 	br	8110553c <bSpwcGetLinkStatus+0x8c>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
81105534:	e0bfff17 	ldw	r2,-4(fp)
81105538:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
8110553c:	e0bffe17 	ldw	r2,-8(fp)
81105540:	1080004c 	andi	r2,r2,1
81105544:	10000426 	beq	r2,zero,81105558 <bSpwcGetLinkStatus+0xa8>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
81105548:	e0bfff17 	ldw	r2,-4(fp)
8110554c:	00c00044 	movi	r3,1
81105550:	10c00a15 	stw	r3,40(r2)
81105554:	00000206 	br	81105560 <bSpwcGetLinkStatus+0xb0>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
81105558:	e0bfff17 	ldw	r2,-4(fp)
8110555c:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
81105560:	00800044 	movi	r2,1
81105564:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105568:	e0bffd17 	ldw	r2,-12(fp)
}
8110556c:	e037883a 	mov	sp,fp
81105570:	dfc00117 	ldw	ra,4(sp)
81105574:	df000017 	ldw	fp,0(sp)
81105578:	dec00204 	addi	sp,sp,8
8110557c:	f800283a 	ret

81105580 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81105580:	defffb04 	addi	sp,sp,-20
81105584:	de00012e 	bgeu	sp,et,8110558c <bSpwcInitCh+0xc>
81105588:	003b68fa 	trap	3
8110558c:	dfc00415 	stw	ra,16(sp)
81105590:	df000315 	stw	fp,12(sp)
81105594:	df000304 	addi	fp,sp,12
81105598:	e13ffe15 	stw	r4,-8(fp)
8110559c:	2805883a 	mov	r2,r5
811055a0:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
811055a4:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
811055a8:	e0bffe17 	ldw	r2,-8(fp)
811055ac:	10004c26 	beq	r2,zero,811056e0 <bSpwcInitCh+0x160>
		bStatus = TRUE;
811055b0:	00800044 	movi	r2,1
811055b4:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
811055b8:	e0bfff03 	ldbu	r2,-4(fp)
811055bc:	10c00268 	cmpgeui	r3,r2,9
811055c0:	1800371e 	bne	r3,zero,811056a0 <bSpwcInitCh+0x120>
811055c4:	100690ba 	slli	r3,r2,2
811055c8:	00a04434 	movhi	r2,33040
811055cc:	10957704 	addi	r2,r2,21980
811055d0:	1885883a 	add	r2,r3,r2
811055d4:	10800017 	ldw	r2,0(r2)
811055d8:	1000683a 	jmp	r2
811055dc:	811056a0 	cmpeqi	r4,r16,16730
811055e0:	81105600 	call	88110560 <__reset+0x20f0560>
811055e4:	81105614 	ori	r4,r16,16728
811055e8:	81105628 	cmpgeui	r4,r16,16728
811055ec:	8110563c 	xorhi	r4,r16,16728
811055f0:	81105650 	cmplti	r4,r16,16729
811055f4:	81105664 	muli	r4,r16,16729
811055f8:	81105678 	rdprs	r4,r16,16729
811055fc:	8110568c 	andi	r4,r16,16730
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81105600:	e0fffe17 	ldw	r3,-8(fp)
81105604:	00a04834 	movhi	r2,33056
81105608:	108b0004 	addi	r2,r2,11264
8110560c:	18800015 	stw	r2,0(r3)
			break;
81105610:	00002506 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81105614:	e0fffe17 	ldw	r3,-8(fp)
81105618:	00a04834 	movhi	r2,33056
8110561c:	108a0004 	addi	r2,r2,10240
81105620:	18800015 	stw	r2,0(r3)
			break;
81105624:	00002006 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
81105628:	e0fffe17 	ldw	r3,-8(fp)
8110562c:	00a04834 	movhi	r2,33056
81105630:	10890004 	addi	r2,r2,9216
81105634:	18800015 	stw	r2,0(r3)
			break;
81105638:	00001b06 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
8110563c:	e0fffe17 	ldw	r3,-8(fp)
81105640:	00a04834 	movhi	r2,33056
81105644:	10880004 	addi	r2,r2,8192
81105648:	18800015 	stw	r2,0(r3)
			break;
8110564c:	00001606 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
81105650:	e0fffe17 	ldw	r3,-8(fp)
81105654:	00a04834 	movhi	r2,33056
81105658:	10870004 	addi	r2,r2,7168
8110565c:	18800015 	stw	r2,0(r3)
			break;
81105660:	00001106 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
81105664:	e0fffe17 	ldw	r3,-8(fp)
81105668:	00a04834 	movhi	r2,33056
8110566c:	10860004 	addi	r2,r2,6144
81105670:	18800015 	stw	r2,0(r3)
			break;
81105674:	00000c06 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81105678:	e0fffe17 	ldw	r3,-8(fp)
8110567c:	00a04834 	movhi	r2,33056
81105680:	10850004 	addi	r2,r2,5120
81105684:	18800015 	stw	r2,0(r3)
			break;
81105688:	00000706 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
8110568c:	e0fffe17 	ldw	r3,-8(fp)
81105690:	00a04834 	movhi	r2,33056
81105694:	10840004 	addi	r2,r2,4096
81105698:	18800015 	stw	r2,0(r3)
			break;
8110569c:	00000206 	br	811056a8 <bSpwcInitCh+0x128>
		default:
			bStatus = FALSE;
811056a0:	e03ffd15 	stw	zero,-12(fp)
			break;
811056a4:	0001883a 	nop
		}

		if (bStatus) {
811056a8:	e0bffd17 	ldw	r2,-12(fp)
811056ac:	10000c26 	beq	r2,zero,811056e0 <bSpwcInitCh+0x160>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
811056b0:	e13ffe17 	ldw	r4,-8(fp)
811056b4:	11052ec0 	call	811052ec <bSpwcGetLink>
811056b8:	1000011e 	bne	r2,zero,811056c0 <bSpwcInitCh+0x140>
				bStatus = FALSE;
811056bc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
811056c0:	e13ffe17 	ldw	r4,-8(fp)
811056c4:	11053bc0 	call	811053bc <bSpwcGetLinkError>
811056c8:	1000011e 	bne	r2,zero,811056d0 <bSpwcInitCh+0x150>
				bStatus = FALSE;
811056cc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
811056d0:	e13ffe17 	ldw	r4,-8(fp)
811056d4:	11054b00 	call	811054b0 <bSpwcGetLinkStatus>
811056d8:	1000011e 	bne	r2,zero,811056e0 <bSpwcInitCh+0x160>
				bStatus = FALSE;
811056dc:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
811056e0:	e0bffd17 	ldw	r2,-12(fp)
}
811056e4:	e037883a 	mov	sp,fp
811056e8:	dfc00117 	ldw	ra,4(sp)
811056ec:	df000017 	ldw	fp,0(sp)
811056f0:	dec00204 	addi	sp,sp,8
811056f4:	f800283a 	ret

811056f8 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
811056f8:	defffc04 	addi	sp,sp,-16
811056fc:	de00012e 	bgeu	sp,et,81105704 <vSpwcWriteReg+0xc>
81105700:	003b68fa 	trap	3
81105704:	df000315 	stw	fp,12(sp)
81105708:	df000304 	addi	fp,sp,12
8110570c:	e13ffd15 	stw	r4,-12(fp)
81105710:	e17ffe15 	stw	r5,-8(fp)
81105714:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81105718:	e0bffe17 	ldw	r2,-8(fp)
8110571c:	1085883a 	add	r2,r2,r2
81105720:	1085883a 	add	r2,r2,r2
81105724:	1007883a 	mov	r3,r2
81105728:	e0bffd17 	ldw	r2,-12(fp)
8110572c:	10c5883a 	add	r2,r2,r3
81105730:	e0ffff17 	ldw	r3,-4(fp)
81105734:	10c00015 	stw	r3,0(r2)
}
81105738:	0001883a 	nop
8110573c:	e037883a 	mov	sp,fp
81105740:	df000017 	ldw	fp,0(sp)
81105744:	dec00104 	addi	sp,sp,4
81105748:	f800283a 	ret

8110574c <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110574c:	defffc04 	addi	sp,sp,-16
81105750:	de00012e 	bgeu	sp,et,81105758 <uliSpwcReadReg+0xc>
81105754:	003b68fa 	trap	3
81105758:	df000315 	stw	fp,12(sp)
8110575c:	df000304 	addi	fp,sp,12
81105760:	e13ffe15 	stw	r4,-8(fp)
81105764:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81105768:	e0bfff17 	ldw	r2,-4(fp)
8110576c:	1085883a 	add	r2,r2,r2
81105770:	1085883a 	add	r2,r2,r2
81105774:	1007883a 	mov	r3,r2
81105778:	e0bffe17 	ldw	r2,-8(fp)
8110577c:	10c5883a 	add	r2,r2,r3
81105780:	10800017 	ldw	r2,0(r2)
81105784:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105788:	e0bffd17 	ldw	r2,-12(fp)
}
8110578c:	e037883a 	mov	sp,fp
81105790:	df000017 	ldw	fp,0(sp)
81105794:	dec00104 	addi	sp,sp,4
81105798:	f800283a 	ret

8110579c <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
8110579c:	defffe04 	addi	sp,sp,-8
811057a0:	de00012e 	bgeu	sp,et,811057a8 <bEnableIsoDrivers+0xc>
811057a4:	003b68fa 	trap	3
811057a8:	dfc00115 	stw	ra,4(sp)
811057ac:	df000015 	stw	fp,0(sp)
811057b0:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
811057b4:	01400204 	movi	r5,8
811057b8:	01000044 	movi	r4,1
811057bc:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
811057c0:	00800044 	movi	r2,1
}
811057c4:	e037883a 	mov	sp,fp
811057c8:	dfc00117 	ldw	ra,4(sp)
811057cc:	df000017 	ldw	fp,0(sp)
811057d0:	dec00204 	addi	sp,sp,8
811057d4:	f800283a 	ret

811057d8 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
811057d8:	defffe04 	addi	sp,sp,-8
811057dc:	de00012e 	bgeu	sp,et,811057e4 <bDisableIsoDrivers+0xc>
811057e0:	003b68fa 	trap	3
811057e4:	dfc00115 	stw	ra,4(sp)
811057e8:	df000015 	stw	fp,0(sp)
811057ec:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
811057f0:	01400204 	movi	r5,8
811057f4:	0009883a 	mov	r4,zero
811057f8:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
811057fc:	00800044 	movi	r2,1
}
81105800:	e037883a 	mov	sp,fp
81105804:	dfc00117 	ldw	ra,4(sp)
81105808:	df000017 	ldw	fp,0(sp)
8110580c:	dec00204 	addi	sp,sp,8
81105810:	f800283a 	ret

81105814 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
81105814:	defffe04 	addi	sp,sp,-8
81105818:	de00012e 	bgeu	sp,et,81105820 <bEnableLvdsBoard+0xc>
8110581c:	003b68fa 	trap	3
81105820:	dfc00115 	stw	ra,4(sp)
81105824:	df000015 	stw	fp,0(sp)
81105828:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
8110582c:	01400104 	movi	r5,4
81105830:	01000044 	movi	r4,1
81105834:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
81105838:	00800044 	movi	r2,1
}
8110583c:	e037883a 	mov	sp,fp
81105840:	dfc00117 	ldw	ra,4(sp)
81105844:	df000017 	ldw	fp,0(sp)
81105848:	dec00204 	addi	sp,sp,8
8110584c:	f800283a 	ret

81105850 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
81105850:	defffe04 	addi	sp,sp,-8
81105854:	de00012e 	bgeu	sp,et,8110585c <bDisableLvdsBoard+0xc>
81105858:	003b68fa 	trap	3
8110585c:	dfc00115 	stw	ra,4(sp)
81105860:	df000015 	stw	fp,0(sp)
81105864:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
81105868:	01400104 	movi	r5,4
8110586c:	0009883a 	mov	r4,zero
81105870:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
81105874:	00800044 	movi	r2,1
}
81105878:	e037883a 	mov	sp,fp
8110587c:	dfc00117 	ldw	ra,4(sp)
81105880:	df000017 	ldw	fp,0(sp)
81105884:	dec00204 	addi	sp,sp,8
81105888:	f800283a 	ret

8110588c <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
8110588c:	defffd04 	addi	sp,sp,-12
81105890:	de00012e 	bgeu	sp,et,81105898 <bSetPreEmphasys+0xc>
81105894:	003b68fa 	trap	3
81105898:	dfc00215 	stw	ra,8(sp)
8110589c:	df000115 	stw	fp,4(sp)
811058a0:	df000104 	addi	fp,sp,4
811058a4:	2005883a 	mov	r2,r4
811058a8:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
811058ac:	e0bfff03 	ldbu	r2,-4(fp)
811058b0:	10c00060 	cmpeqi	r3,r2,1
811058b4:	18000d1e 	bne	r3,zero,811058ec <bSetPreEmphasys+0x60>
811058b8:	10c00088 	cmpgei	r3,r2,2
811058bc:	1800021e 	bne	r3,zero,811058c8 <bSetPreEmphasys+0x3c>
811058c0:	10000626 	beq	r2,zero,811058dc <bSetPreEmphasys+0x50>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
811058c4:	00001b06 	br	81105934 <bSetPreEmphasys+0xa8>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
811058c8:	10c000a0 	cmpeqi	r3,r2,2
811058cc:	18000e1e 	bne	r3,zero,81105908 <bSetPreEmphasys+0x7c>
811058d0:	108000e0 	cmpeqi	r2,r2,3
811058d4:	1000131e 	bne	r2,zero,81105924 <bSetPreEmphasys+0x98>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
811058d8:	00001606 	br	81105934 <bSetPreEmphasys+0xa8>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811058dc:	014000c4 	movi	r5,3
811058e0:	0009883a 	mov	r4,zero
811058e4:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
811058e8:	00001206 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
811058ec:	01400084 	movi	r5,2
811058f0:	0009883a 	mov	r4,zero
811058f4:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
811058f8:	01400044 	movi	r5,1
811058fc:	01000044 	movi	r4,1
81105900:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105904:	00000b06 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105908:	01400044 	movi	r5,1
8110590c:	0009883a 	mov	r4,zero
81105910:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
81105914:	01400084 	movi	r5,2
81105918:	01000044 	movi	r4,1
8110591c:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105920:	00000406 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
81105924:	014000c4 	movi	r5,3
81105928:	01000044 	movi	r4,1
8110592c:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105930:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
81105934:	00800044 	movi	r2,1
}
81105938:	e037883a 	mov	sp,fp
8110593c:	dfc00117 	ldw	ra,4(sp)
81105940:	df000017 	ldw	fp,0(sp)
81105944:	dec00204 	addi	sp,sp,8
81105948:	f800283a 	ret

8110594c <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
8110594c:	defffd04 	addi	sp,sp,-12
81105950:	de00012e 	bgeu	sp,et,81105958 <bCtrlIoLvdsDrive+0xc>
81105954:	003b68fa 	trap	3
81105958:	df000215 	stw	fp,8(sp)
8110595c:	df000204 	addi	fp,sp,8
81105960:	e13ffe15 	stw	r4,-8(fp)
81105964:	2805883a 	mov	r2,r5
81105968:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
8110596c:	e0bffe17 	ldw	r2,-8(fp)
81105970:	1000071e 	bne	r2,zero,81105990 <bCtrlIoLvdsDrive+0x44>
	 ucIoValue &= (~ucMask);
81105974:	e0bfff03 	ldbu	r2,-4(fp)
81105978:	0084303a 	nor	r2,zero,r2
8110597c:	1007883a 	mov	r3,r2
81105980:	d0a00103 	ldbu	r2,-32764(gp)
81105984:	1884703a 	and	r2,r3,r2
81105988:	d0a00105 	stb	r2,-32764(gp)
8110598c:	00000406 	br	811059a0 <bCtrlIoLvdsDrive+0x54>
  }
  else {
	 ucIoValue |= ucMask;
81105990:	d0e00103 	ldbu	r3,-32764(gp)
81105994:	e0bfff03 	ldbu	r2,-4(fp)
81105998:	1884b03a 	or	r2,r3,r2
8110599c:	d0a00105 	stb	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
811059a0:	d0a00103 	ldbu	r2,-32764(gp)
811059a4:	10c03fcc 	andi	r3,r2,255
811059a8:	00a00034 	movhi	r2,32768
811059ac:	10822804 	addi	r2,r2,2208
811059b0:	10c00035 	stwio	r3,0(r2)
  return TRUE;
811059b4:	00800044 	movi	r2,1
}
811059b8:	e037883a 	mov	sp,fp
811059bc:	df000017 	ldw	fp,0(sp)
811059c0:	dec00104 	addi	sp,sp,4
811059c4:	f800283a 	ret

811059c8 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
811059c8:	defffa04 	addi	sp,sp,-24
811059cc:	de00012e 	bgeu	sp,et,811059d4 <I2C_TestAdress+0xc>
811059d0:	003b68fa 	trap	3
811059d4:	dfc00515 	stw	ra,20(sp)
811059d8:	df000415 	stw	fp,16(sp)
811059dc:	df000404 	addi	fp,sp,16
811059e0:	e13ffd15 	stw	r4,-12(fp)
811059e4:	e17ffe15 	stw	r5,-8(fp)
811059e8:	3005883a 	mov	r2,r6
811059ec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811059f0:	00800044 	movi	r2,1
811059f4:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811059f8:	e17ffe17 	ldw	r5,-8(fp)
811059fc:	e13ffd17 	ldw	r4,-12(fp)
81105a00:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a04:	e0bfff03 	ldbu	r2,-4(fp)
81105a08:	10803fcc 	andi	r2,r2,255
81105a0c:	100d883a 	mov	r6,r2
81105a10:	e17ffe17 	ldw	r5,-8(fp)
81105a14:	e13ffd17 	ldw	r4,-12(fp)
81105a18:	1105eac0 	call	81105eac <i2c_write>
81105a1c:	1000011e 	bne	r2,zero,81105a24 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
81105a20:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105a24:	e17ffe17 	ldw	r5,-8(fp)
81105a28:	e13ffd17 	ldw	r4,-12(fp)
81105a2c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105a30:	0106d604 	movi	r4,7000
81105a34:	112931c0 	call	8112931c <usleep>
    
    return bSuccess;
81105a38:	e0bffc17 	ldw	r2,-16(fp)

}
81105a3c:	e037883a 	mov	sp,fp
81105a40:	dfc00117 	ldw	ra,4(sp)
81105a44:	df000017 	ldw	fp,0(sp)
81105a48:	dec00204 	addi	sp,sp,8
81105a4c:	f800283a 	ret

81105a50 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81105a50:	defff804 	addi	sp,sp,-32
81105a54:	de00012e 	bgeu	sp,et,81105a5c <I2C_Write+0xc>
81105a58:	003b68fa 	trap	3
81105a5c:	dfc00715 	stw	ra,28(sp)
81105a60:	df000615 	stw	fp,24(sp)
81105a64:	df000604 	addi	fp,sp,24
81105a68:	e13ffb15 	stw	r4,-20(fp)
81105a6c:	e17ffc15 	stw	r5,-16(fp)
81105a70:	3009883a 	mov	r4,r6
81105a74:	3807883a 	mov	r3,r7
81105a78:	e0800217 	ldw	r2,8(fp)
81105a7c:	e13ffd05 	stb	r4,-12(fp)
81105a80:	e0fffe05 	stb	r3,-8(fp)
81105a84:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105a88:	00800044 	movi	r2,1
81105a8c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105a90:	e17ffc17 	ldw	r5,-16(fp)
81105a94:	e13ffb17 	ldw	r4,-20(fp)
81105a98:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a9c:	e0bffd03 	ldbu	r2,-12(fp)
81105aa0:	10803fcc 	andi	r2,r2,255
81105aa4:	100d883a 	mov	r6,r2
81105aa8:	e17ffc17 	ldw	r5,-16(fp)
81105aac:	e13ffb17 	ldw	r4,-20(fp)
81105ab0:	1105eac0 	call	81105eac <i2c_write>
81105ab4:	1000011e 	bne	r2,zero,81105abc <I2C_Write+0x6c>
        bSuccess = FALSE;
81105ab8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105abc:	e0bffa17 	ldw	r2,-24(fp)
81105ac0:	10000726 	beq	r2,zero,81105ae0 <I2C_Write+0x90>
81105ac4:	e0bffe03 	ldbu	r2,-8(fp)
81105ac8:	100d883a 	mov	r6,r2
81105acc:	e17ffc17 	ldw	r5,-16(fp)
81105ad0:	e13ffb17 	ldw	r4,-20(fp)
81105ad4:	1105eac0 	call	81105eac <i2c_write>
81105ad8:	1000011e 	bne	r2,zero,81105ae0 <I2C_Write+0x90>
        bSuccess = FALSE;
81105adc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105ae0:	e0bffa17 	ldw	r2,-24(fp)
81105ae4:	10000726 	beq	r2,zero,81105b04 <I2C_Write+0xb4>
81105ae8:	e0bfff03 	ldbu	r2,-4(fp)
81105aec:	100d883a 	mov	r6,r2
81105af0:	e17ffc17 	ldw	r5,-16(fp)
81105af4:	e13ffb17 	ldw	r4,-20(fp)
81105af8:	1105eac0 	call	81105eac <i2c_write>
81105afc:	1000011e 	bne	r2,zero,81105b04 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105b00:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105b04:	e17ffc17 	ldw	r5,-16(fp)
81105b08:	e13ffb17 	ldw	r4,-20(fp)
81105b0c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105b10:	0106d604 	movi	r4,7000
81105b14:	112931c0 	call	8112931c <usleep>
    
    return bSuccess;
81105b18:	e0bffa17 	ldw	r2,-24(fp)

}
81105b1c:	e037883a 	mov	sp,fp
81105b20:	dfc00117 	ldw	ra,4(sp)
81105b24:	df000017 	ldw	fp,0(sp)
81105b28:	dec00204 	addi	sp,sp,8
81105b2c:	f800283a 	ret

81105b30 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105b30:	defff904 	addi	sp,sp,-28
81105b34:	de00012e 	bgeu	sp,et,81105b3c <I2C_Read+0xc>
81105b38:	003b68fa 	trap	3
81105b3c:	dfc00615 	stw	ra,24(sp)
81105b40:	df000515 	stw	fp,20(sp)
81105b44:	df000504 	addi	fp,sp,20
81105b48:	e13ffc15 	stw	r4,-16(fp)
81105b4c:	e17ffd15 	stw	r5,-12(fp)
81105b50:	3007883a 	mov	r3,r6
81105b54:	3805883a 	mov	r2,r7
81105b58:	e0fffe05 	stb	r3,-8(fp)
81105b5c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105b60:	00800044 	movi	r2,1
81105b64:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105b68:	e17ffd17 	ldw	r5,-12(fp)
81105b6c:	e13ffc17 	ldw	r4,-16(fp)
81105b70:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105b74:	e0bffe03 	ldbu	r2,-8(fp)
81105b78:	10803fcc 	andi	r2,r2,255
81105b7c:	100d883a 	mov	r6,r2
81105b80:	e17ffd17 	ldw	r5,-12(fp)
81105b84:	e13ffc17 	ldw	r4,-16(fp)
81105b88:	1105eac0 	call	81105eac <i2c_write>
81105b8c:	1000011e 	bne	r2,zero,81105b94 <I2C_Read+0x64>
        bSuccess = FALSE;
81105b90:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105b94:	e0bffb17 	ldw	r2,-20(fp)
81105b98:	10000726 	beq	r2,zero,81105bb8 <I2C_Read+0x88>
81105b9c:	e0bfff03 	ldbu	r2,-4(fp)
81105ba0:	100d883a 	mov	r6,r2
81105ba4:	e17ffd17 	ldw	r5,-12(fp)
81105ba8:	e13ffc17 	ldw	r4,-16(fp)
81105bac:	1105eac0 	call	81105eac <i2c_write>
81105bb0:	1000011e 	bne	r2,zero,81105bb8 <I2C_Read+0x88>
        bSuccess = FALSE;
81105bb4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105bb8:	e17ffd17 	ldw	r5,-12(fp)
81105bbc:	e13ffc17 	ldw	r4,-16(fp)
81105bc0:	1105d980 	call	81105d98 <i2c_start>
    DeviceAddr |= 1; // Read
81105bc4:	e0bffe03 	ldbu	r2,-8(fp)
81105bc8:	10800054 	ori	r2,r2,1
81105bcc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105bd0:	e0bffb17 	ldw	r2,-20(fp)
81105bd4:	10000826 	beq	r2,zero,81105bf8 <I2C_Read+0xc8>
81105bd8:	e0bffe03 	ldbu	r2,-8(fp)
81105bdc:	10803fcc 	andi	r2,r2,255
81105be0:	100d883a 	mov	r6,r2
81105be4:	e17ffd17 	ldw	r5,-12(fp)
81105be8:	e13ffc17 	ldw	r4,-16(fp)
81105bec:	1105eac0 	call	81105eac <i2c_write>
81105bf0:	1000011e 	bne	r2,zero,81105bf8 <I2C_Read+0xc8>
        bSuccess = FALSE;
81105bf4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105bf8:	e0bffb17 	ldw	r2,-20(fp)
81105bfc:	10000526 	beq	r2,zero,81105c14 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105c00:	000f883a 	mov	r7,zero
81105c04:	e1800217 	ldw	r6,8(fp)
81105c08:	e17ffd17 	ldw	r5,-12(fp)
81105c0c:	e13ffc17 	ldw	r4,-16(fp)
81105c10:	1105fe40 	call	81105fe4 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105c14:	e17ffd17 	ldw	r5,-12(fp)
81105c18:	e13ffc17 	ldw	r4,-16(fp)
81105c1c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    return bSuccess;
81105c20:	e0bffb17 	ldw	r2,-20(fp)
}
81105c24:	e037883a 	mov	sp,fp
81105c28:	dfc00117 	ldw	ra,4(sp)
81105c2c:	df000017 	ldw	fp,0(sp)
81105c30:	dec00204 	addi	sp,sp,8
81105c34:	f800283a 	ret

81105c38 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105c38:	defff604 	addi	sp,sp,-40
81105c3c:	de00012e 	bgeu	sp,et,81105c44 <I2C_MultipleRead+0xc>
81105c40:	003b68fa 	trap	3
81105c44:	dfc00915 	stw	ra,36(sp)
81105c48:	df000815 	stw	fp,32(sp)
81105c4c:	df000804 	addi	fp,sp,32
81105c50:	e13ffb15 	stw	r4,-20(fp)
81105c54:	e17ffc15 	stw	r5,-16(fp)
81105c58:	3007883a 	mov	r3,r6
81105c5c:	e1fffe15 	stw	r7,-8(fp)
81105c60:	e0800217 	ldw	r2,8(fp)
81105c64:	e0fffd05 	stb	r3,-12(fp)
81105c68:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105c6c:	00800044 	movi	r2,1
81105c70:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81105c74:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105c78:	e17ffc17 	ldw	r5,-16(fp)
81105c7c:	e13ffb17 	ldw	r4,-20(fp)
81105c80:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105c84:	e0bffd03 	ldbu	r2,-12(fp)
81105c88:	10803fcc 	andi	r2,r2,255
81105c8c:	100d883a 	mov	r6,r2
81105c90:	e17ffc17 	ldw	r5,-16(fp)
81105c94:	e13ffb17 	ldw	r4,-20(fp)
81105c98:	1105eac0 	call	81105eac <i2c_write>
81105c9c:	1000011e 	bne	r2,zero,81105ca4 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
81105ca0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105ca4:	e0bff917 	ldw	r2,-28(fp)
81105ca8:	10000726 	beq	r2,zero,81105cc8 <I2C_MultipleRead+0x90>
81105cac:	e0bffa03 	ldbu	r2,-24(fp)
81105cb0:	100d883a 	mov	r6,r2
81105cb4:	e17ffc17 	ldw	r5,-16(fp)
81105cb8:	e13ffb17 	ldw	r4,-20(fp)
81105cbc:	1105eac0 	call	81105eac <i2c_write>
81105cc0:	1000011e 	bne	r2,zero,81105cc8 <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
81105cc4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105cc8:	e0bff917 	ldw	r2,-28(fp)
81105ccc:	10000326 	beq	r2,zero,81105cdc <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105cd0:	e17ffc17 	ldw	r5,-16(fp)
81105cd4:	e13ffb17 	ldw	r4,-20(fp)
81105cd8:	1105d980 	call	81105d98 <i2c_start>
    DeviceAddr |= 1; // Read
81105cdc:	e0bffd03 	ldbu	r2,-12(fp)
81105ce0:	10800054 	ori	r2,r2,1
81105ce4:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105ce8:	e0bff917 	ldw	r2,-28(fp)
81105cec:	10000826 	beq	r2,zero,81105d10 <I2C_MultipleRead+0xd8>
81105cf0:	e0bffd03 	ldbu	r2,-12(fp)
81105cf4:	10803fcc 	andi	r2,r2,255
81105cf8:	100d883a 	mov	r6,r2
81105cfc:	e17ffc17 	ldw	r5,-16(fp)
81105d00:	e13ffb17 	ldw	r4,-20(fp)
81105d04:	1105eac0 	call	81105eac <i2c_write>
81105d08:	1000011e 	bne	r2,zero,81105d10 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105d0c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105d10:	e0bff917 	ldw	r2,-28(fp)
81105d14:	10001726 	beq	r2,zero,81105d74 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
81105d18:	e03ff815 	stw	zero,-32(fp)
81105d1c:	00001006 	br	81105d60 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105d20:	e0bff817 	ldw	r2,-32(fp)
81105d24:	e0fffe17 	ldw	r3,-8(fp)
81105d28:	1889883a 	add	r4,r3,r2
81105d2c:	e0bfff0b 	ldhu	r2,-4(fp)
81105d30:	10ffffc4 	addi	r3,r2,-1
81105d34:	e0bff817 	ldw	r2,-32(fp)
81105d38:	1884c03a 	cmpne	r2,r3,r2
81105d3c:	10803fcc 	andi	r2,r2,255
81105d40:	100f883a 	mov	r7,r2
81105d44:	200d883a 	mov	r6,r4
81105d48:	e17ffc17 	ldw	r5,-16(fp)
81105d4c:	e13ffb17 	ldw	r4,-20(fp)
81105d50:	1105fe40 	call	81105fe4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105d54:	e0bff817 	ldw	r2,-32(fp)
81105d58:	10800044 	addi	r2,r2,1
81105d5c:	e0bff815 	stw	r2,-32(fp)
81105d60:	e0bfff0b 	ldhu	r2,-4(fp)
81105d64:	e0fff817 	ldw	r3,-32(fp)
81105d68:	1880020e 	bge	r3,r2,81105d74 <I2C_MultipleRead+0x13c>
81105d6c:	e0bff917 	ldw	r2,-28(fp)
81105d70:	103feb1e 	bne	r2,zero,81105d20 <__reset+0xfb0e5d20>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81105d74:	e17ffc17 	ldw	r5,-16(fp)
81105d78:	e13ffb17 	ldw	r4,-20(fp)
81105d7c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    return bSuccess;    
81105d80:	e0bff917 	ldw	r2,-28(fp)
    
}
81105d84:	e037883a 	mov	sp,fp
81105d88:	dfc00117 	ldw	ra,4(sp)
81105d8c:	df000017 	ldw	fp,0(sp)
81105d90:	dec00204 	addi	sp,sp,8
81105d94:	f800283a 	ret

81105d98 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105d98:	defffc04 	addi	sp,sp,-16
81105d9c:	de00012e 	bgeu	sp,et,81105da4 <i2c_start+0xc>
81105da0:	003b68fa 	trap	3
81105da4:	dfc00315 	stw	ra,12(sp)
81105da8:	df000215 	stw	fp,8(sp)
81105dac:	df000204 	addi	fp,sp,8
81105db0:	e13ffe15 	stw	r4,-8(fp)
81105db4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105db8:	e0bfff17 	ldw	r2,-4(fp)
81105dbc:	10800104 	addi	r2,r2,4
81105dc0:	1007883a 	mov	r3,r2
81105dc4:	00800044 	movi	r2,1
81105dc8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105dcc:	e0bfff17 	ldw	r2,-4(fp)
81105dd0:	00c00044 	movi	r3,1
81105dd4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105dd8:	e0bffe17 	ldw	r2,-8(fp)
81105ddc:	00c00044 	movi	r3,1
81105de0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105de4:	01000044 	movi	r4,1
81105de8:	112931c0 	call	8112931c <usleep>
     
    SDA_LOW(data_base); // data low
81105dec:	e0bfff17 	ldw	r2,-4(fp)
81105df0:	0007883a 	mov	r3,zero
81105df4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105df8:	01000044 	movi	r4,1
81105dfc:	112931c0 	call	8112931c <usleep>
    SCL_LOW(clk_base); // clock low
81105e00:	e0bffe17 	ldw	r2,-8(fp)
81105e04:	0007883a 	mov	r3,zero
81105e08:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105e0c:	01000044 	movi	r4,1
81105e10:	112931c0 	call	8112931c <usleep>
}
81105e14:	0001883a 	nop
81105e18:	e037883a 	mov	sp,fp
81105e1c:	dfc00117 	ldw	ra,4(sp)
81105e20:	df000017 	ldw	fp,0(sp)
81105e24:	dec00204 	addi	sp,sp,8
81105e28:	f800283a 	ret

81105e2c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105e2c:	defffc04 	addi	sp,sp,-16
81105e30:	de00012e 	bgeu	sp,et,81105e38 <i2c_stop+0xc>
81105e34:	003b68fa 	trap	3
81105e38:	dfc00315 	stw	ra,12(sp)
81105e3c:	df000215 	stw	fp,8(sp)
81105e40:	df000204 	addi	fp,sp,8
81105e44:	e13ffe15 	stw	r4,-8(fp)
81105e48:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105e4c:	e0bfff17 	ldw	r2,-4(fp)
81105e50:	10800104 	addi	r2,r2,4
81105e54:	1007883a 	mov	r3,r2
81105e58:	00800044 	movi	r2,1
81105e5c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105e60:	e0bfff17 	ldw	r2,-4(fp)
81105e64:	0007883a 	mov	r3,zero
81105e68:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105e6c:	e0bffe17 	ldw	r2,-8(fp)
81105e70:	00c00044 	movi	r3,1
81105e74:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105e78:	01000044 	movi	r4,1
81105e7c:	112931c0 	call	8112931c <usleep>
    SDA_HIGH(data_base); // data high
81105e80:	e0bfff17 	ldw	r2,-4(fp)
81105e84:	00c00044 	movi	r3,1
81105e88:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105e8c:	01000044 	movi	r4,1
81105e90:	112931c0 	call	8112931c <usleep>
    

    
}
81105e94:	0001883a 	nop
81105e98:	e037883a 	mov	sp,fp
81105e9c:	dfc00117 	ldw	ra,4(sp)
81105ea0:	df000017 	ldw	fp,0(sp)
81105ea4:	dec00204 	addi	sp,sp,8
81105ea8:	f800283a 	ret

81105eac <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105eac:	defff804 	addi	sp,sp,-32
81105eb0:	de00012e 	bgeu	sp,et,81105eb8 <i2c_write+0xc>
81105eb4:	003b68fa 	trap	3
81105eb8:	dfc00715 	stw	ra,28(sp)
81105ebc:	df000615 	stw	fp,24(sp)
81105ec0:	df000604 	addi	fp,sp,24
81105ec4:	e13ffd15 	stw	r4,-12(fp)
81105ec8:	e17ffe15 	stw	r5,-8(fp)
81105ecc:	3005883a 	mov	r2,r6
81105ed0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105ed4:	00bfe004 	movi	r2,-128
81105ed8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105edc:	e0bffe17 	ldw	r2,-8(fp)
81105ee0:	10800104 	addi	r2,r2,4
81105ee4:	1007883a 	mov	r3,r2
81105ee8:	00800044 	movi	r2,1
81105eec:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105ef0:	e03ffb15 	stw	zero,-20(fp)
81105ef4:	00001f06 	br	81105f74 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105ef8:	e0bffd17 	ldw	r2,-12(fp)
81105efc:	0007883a 	mov	r3,zero
81105f00:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105f04:	e0ffff03 	ldbu	r3,-4(fp)
81105f08:	e0bffa03 	ldbu	r2,-24(fp)
81105f0c:	1884703a 	and	r2,r3,r2
81105f10:	10803fcc 	andi	r2,r2,255
81105f14:	10000426 	beq	r2,zero,81105f28 <i2c_write+0x7c>
            SDA_HIGH(data_base);
81105f18:	e0bffe17 	ldw	r2,-8(fp)
81105f1c:	00c00044 	movi	r3,1
81105f20:	10c00035 	stwio	r3,0(r2)
81105f24:	00000306 	br	81105f34 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
81105f28:	e0bffe17 	ldw	r2,-8(fp)
81105f2c:	0007883a 	mov	r3,zero
81105f30:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105f34:	e0bffa03 	ldbu	r2,-24(fp)
81105f38:	1004d07a 	srli	r2,r2,1
81105f3c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105f40:	e0bffd17 	ldw	r2,-12(fp)
81105f44:	00c00044 	movi	r3,1
81105f48:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105f4c:	01000044 	movi	r4,1
81105f50:	112931c0 	call	8112931c <usleep>
        SCL_LOW(clk_base);
81105f54:	e0bffd17 	ldw	r2,-12(fp)
81105f58:	0007883a 	mov	r3,zero
81105f5c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105f60:	01000044 	movi	r4,1
81105f64:	112931c0 	call	8112931c <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105f68:	e0bffb17 	ldw	r2,-20(fp)
81105f6c:	10800044 	addi	r2,r2,1
81105f70:	e0bffb15 	stw	r2,-20(fp)
81105f74:	e0bffb17 	ldw	r2,-20(fp)
81105f78:	10800210 	cmplti	r2,r2,8
81105f7c:	103fde1e 	bne	r2,zero,81105ef8 <__reset+0xfb0e5ef8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105f80:	e0bffe17 	ldw	r2,-8(fp)
81105f84:	10800104 	addi	r2,r2,4
81105f88:	0007883a 	mov	r3,zero
81105f8c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105f90:	e0bffd17 	ldw	r2,-12(fp)
81105f94:	00c00044 	movi	r3,1
81105f98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81105f9c:	01000044 	movi	r4,1
81105fa0:	112931c0 	call	8112931c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105fa4:	e0bffe17 	ldw	r2,-8(fp)
81105fa8:	10800037 	ldwio	r2,0(r2)
81105fac:	1005003a 	cmpeq	r2,r2,zero
81105fb0:	10803fcc 	andi	r2,r2,255
81105fb4:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105fb8:	e0bffd17 	ldw	r2,-12(fp)
81105fbc:	0007883a 	mov	r3,zero
81105fc0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105fc4:	01000044 	movi	r4,1
81105fc8:	112931c0 	call	8112931c <usleep>
    return bAck;
81105fcc:	e0bffc17 	ldw	r2,-16(fp)
}    
81105fd0:	e037883a 	mov	sp,fp
81105fd4:	dfc00117 	ldw	ra,4(sp)
81105fd8:	df000017 	ldw	fp,0(sp)
81105fdc:	dec00204 	addi	sp,sp,8
81105fe0:	f800283a 	ret

81105fe4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105fe4:	defff804 	addi	sp,sp,-32
81105fe8:	de00012e 	bgeu	sp,et,81105ff0 <i2c_read+0xc>
81105fec:	003b68fa 	trap	3
81105ff0:	dfc00715 	stw	ra,28(sp)
81105ff4:	df000615 	stw	fp,24(sp)
81105ff8:	df000604 	addi	fp,sp,24
81105ffc:	e13ffc15 	stw	r4,-16(fp)
81106000:	e17ffd15 	stw	r5,-12(fp)
81106004:	e1bffe15 	stw	r6,-8(fp)
81106008:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
8110600c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81106010:	e0bffd17 	ldw	r2,-12(fp)
81106014:	10800104 	addi	r2,r2,4
81106018:	0007883a 	mov	r3,zero
8110601c:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81106020:	e0bffc17 	ldw	r2,-16(fp)
81106024:	0007883a 	mov	r3,zero
81106028:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
8110602c:	01000044 	movi	r4,1
81106030:	112931c0 	call	8112931c <usleep>

    for(i=0;i<8;i++){
81106034:	e03ffb15 	stw	zero,-20(fp)
81106038:	00001606 	br	81106094 <i2c_read+0xb0>
        Data <<= 1;
8110603c:	e0bffa03 	ldbu	r2,-24(fp)
81106040:	1085883a 	add	r2,r2,r2
81106044:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81106048:	e0bffc17 	ldw	r2,-16(fp)
8110604c:	00c00044 	movi	r3,1
81106050:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106054:	01000044 	movi	r4,1
81106058:	112931c0 	call	8112931c <usleep>
        if (SDA_READ(data_base))  // read data   
8110605c:	e0bffd17 	ldw	r2,-12(fp)
81106060:	10800037 	ldwio	r2,0(r2)
81106064:	10000326 	beq	r2,zero,81106074 <i2c_read+0x90>
            Data |= 0x01;
81106068:	e0bffa03 	ldbu	r2,-24(fp)
8110606c:	10800054 	ori	r2,r2,1
81106070:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81106074:	e0bffc17 	ldw	r2,-16(fp)
81106078:	0007883a 	mov	r3,zero
8110607c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106080:	01000044 	movi	r4,1
81106084:	112931c0 	call	8112931c <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81106088:	e0bffb17 	ldw	r2,-20(fp)
8110608c:	10800044 	addi	r2,r2,1
81106090:	e0bffb15 	stw	r2,-20(fp)
81106094:	e0bffb17 	ldw	r2,-20(fp)
81106098:	10800210 	cmplti	r2,r2,8
8110609c:	103fe71e 	bne	r2,zero,8110603c <__reset+0xfb0e603c>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
811060a0:	e0bffc17 	ldw	r2,-16(fp)
811060a4:	0007883a 	mov	r3,zero
811060a8:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
811060ac:	e0bffd17 	ldw	r2,-12(fp)
811060b0:	10800104 	addi	r2,r2,4
811060b4:	1007883a 	mov	r3,r2
811060b8:	00800044 	movi	r2,1
811060bc:	18800035 	stwio	r2,0(r3)
    if (bAck)
811060c0:	e0bfff17 	ldw	r2,-4(fp)
811060c4:	10000426 	beq	r2,zero,811060d8 <i2c_read+0xf4>
        SDA_LOW(data_base);
811060c8:	e0bffd17 	ldw	r2,-12(fp)
811060cc:	0007883a 	mov	r3,zero
811060d0:	10c00035 	stwio	r3,0(r2)
811060d4:	00000306 	br	811060e4 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
811060d8:	e0bffd17 	ldw	r2,-12(fp)
811060dc:	00c00044 	movi	r3,1
811060e0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
811060e4:	e0bffc17 	ldw	r2,-16(fp)
811060e8:	00c00044 	movi	r3,1
811060ec:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
811060f0:	01000044 	movi	r4,1
811060f4:	112931c0 	call	8112931c <usleep>
    SCL_LOW(clk_base); // clock low
811060f8:	e0bffc17 	ldw	r2,-16(fp)
811060fc:	0007883a 	mov	r3,zero
81106100:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81106104:	01000044 	movi	r4,1
81106108:	112931c0 	call	8112931c <usleep>
    SDA_LOW(data_base);  // data low
8110610c:	e0bffd17 	ldw	r2,-12(fp)
81106110:	0007883a 	mov	r3,zero
81106114:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
81106118:	01000044 	movi	r4,1
8110611c:	112931c0 	call	8112931c <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81106120:	e0bffe17 	ldw	r2,-8(fp)
81106124:	e0fffa03 	ldbu	r3,-24(fp)
81106128:	10c00005 	stb	r3,0(r2)
}
8110612c:	0001883a 	nop
81106130:	e037883a 	mov	sp,fp
81106134:	dfc00117 	ldw	ra,4(sp)
81106138:	df000017 	ldw	fp,0(sp)
8110613c:	dec00204 	addi	sp,sp,8
81106140:	f800283a 	ret

81106144 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
81106144:	defffd04 	addi	sp,sp,-12
81106148:	de00012e 	bgeu	sp,et,81106150 <bSetBoardLeds+0xc>
8110614c:	003b68fa 	trap	3
81106150:	df000215 	stw	fp,8(sp)
81106154:	df000204 	addi	fp,sp,8
81106158:	e13ffe15 	stw	r4,-8(fp)
8110615c:	2805883a 	mov	r2,r5
81106160:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81106164:	e0bffe17 	ldw	r2,-8(fp)
81106168:	10800058 	cmpnei	r2,r2,1
8110616c:	1000071e 	bne	r2,zero,8110618c <bSetBoardLeds+0x48>
	LedsBoardControl &= (~LedsMask);
81106170:	e0bfff03 	ldbu	r2,-4(fp)
81106174:	0084303a 	nor	r2,zero,r2
81106178:	1007883a 	mov	r3,r2
8110617c:	d0a04603 	ldbu	r2,-32488(gp)
81106180:	1884703a 	and	r2,r3,r2
81106184:	d0a04605 	stb	r2,-32488(gp)
81106188:	00000406 	br	8110619c <bSetBoardLeds+0x58>
  } else {
	LedsBoardControl |= LedsMask;
8110618c:	d0e04603 	ldbu	r3,-32488(gp)
81106190:	e0bfff03 	ldbu	r2,-4(fp)
81106194:	1884b03a 	or	r2,r3,r2
81106198:	d0a04605 	stb	r2,-32488(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110619c:	d0a04603 	ldbu	r2,-32488(gp)
811061a0:	10c03fcc 	andi	r3,r2,255
811061a4:	00a00034 	movhi	r2,32768
811061a8:	10827404 	addi	r2,r2,2512
811061ac:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811061b0:	00800044 	movi	r2,1
}
811061b4:	e037883a 	mov	sp,fp
811061b8:	df000017 	ldw	fp,0(sp)
811061bc:	dec00104 	addi	sp,sp,4
811061c0:	f800283a 	ret

811061c4 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
811061c4:	defffd04 	addi	sp,sp,-12
811061c8:	de00012e 	bgeu	sp,et,811061d0 <bSetPainelLeds+0xc>
811061cc:	003b68fa 	trap	3
811061d0:	df000215 	stw	fp,8(sp)
811061d4:	df000204 	addi	fp,sp,8
811061d8:	e13ffe15 	stw	r4,-8(fp)
811061dc:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
811061e0:	e0bffe17 	ldw	r2,-8(fp)
811061e4:	10800058 	cmpnei	r2,r2,1
811061e8:	1000051e 	bne	r2,zero,81106200 <bSetPainelLeds+0x3c>
	LedsPainelControl |= LedsMask;
811061ec:	d0e00217 	ldw	r3,-32760(gp)
811061f0:	e0bfff17 	ldw	r2,-4(fp)
811061f4:	1884b03a 	or	r2,r3,r2
811061f8:	d0a00215 	stw	r2,-32760(gp)
811061fc:	00000506 	br	81106214 <bSetPainelLeds+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81106200:	e0bfff17 	ldw	r2,-4(fp)
81106204:	0086303a 	nor	r3,zero,r2
81106208:	d0a00217 	ldw	r2,-32760(gp)
8110620c:	1884703a 	and	r2,r3,r2
81106210:	d0a00215 	stw	r2,-32760(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
81106214:	d0a00217 	ldw	r2,-32760(gp)
81106218:	1007883a 	mov	r3,r2
8110621c:	00a00034 	movhi	r2,32768
81106220:	10824004 	addi	r2,r2,2304
81106224:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81106228:	00800044 	movi	r2,1
}
8110622c:	e037883a 	mov	sp,fp
81106230:	df000017 	ldw	fp,0(sp)
81106234:	dec00104 	addi	sp,sp,4
81106238:	f800283a 	ret

8110623c <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
8110623c:	defffc04 	addi	sp,sp,-16
81106240:	de00012e 	bgeu	sp,et,81106248 <msgdma_write_extended_descriptor+0xc>
81106244:	003b68fa 	trap	3
81106248:	df000315 	stw	fp,12(sp)
8110624c:	df000304 	addi	fp,sp,12
81106250:	e13ffd15 	stw	r4,-12(fp)
81106254:	e17ffe15 	stw	r5,-8(fp)
81106258:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
8110625c:	e0bffd17 	ldw	r2,-12(fp)
81106260:	10800037 	ldwio	r2,0(r2)
81106264:	1080010c 	andi	r2,r2,4
81106268:	10000226 	beq	r2,zero,81106274 <msgdma_write_extended_descriptor+0x38>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
8110626c:	00bff904 	movi	r2,-28
81106270:	00003d06 	br	81106368 <msgdma_write_extended_descriptor+0x12c>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81106274:	e0bfff17 	ldw	r2,-4(fp)
81106278:	10800017 	ldw	r2,0(r2)
8110627c:	1007883a 	mov	r3,r2
81106280:	e0bffe17 	ldw	r2,-8(fp)
81106284:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81106288:	e0bffe17 	ldw	r2,-8(fp)
8110628c:	10800104 	addi	r2,r2,4
81106290:	e0ffff17 	ldw	r3,-4(fp)
81106294:	18c00117 	ldw	r3,4(r3)
81106298:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110629c:	e0bffe17 	ldw	r2,-8(fp)
811062a0:	10800204 	addi	r2,r2,8
811062a4:	e0ffff17 	ldw	r3,-4(fp)
811062a8:	18c00217 	ldw	r3,8(r3)
811062ac:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
811062b0:	e0bffe17 	ldw	r2,-8(fp)
811062b4:	10800304 	addi	r2,r2,12
811062b8:	e0ffff17 	ldw	r3,-4(fp)
811062bc:	18c0030b 	ldhu	r3,12(r3)
811062c0:	18ffffcc 	andi	r3,r3,65535
811062c4:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
811062c8:	e0bffe17 	ldw	r2,-8(fp)
811062cc:	10800384 	addi	r2,r2,14
811062d0:	e0ffff17 	ldw	r3,-4(fp)
811062d4:	18c00383 	ldbu	r3,14(r3)
811062d8:	18c03fcc 	andi	r3,r3,255
811062dc:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
811062e0:	e0bffe17 	ldw	r2,-8(fp)
811062e4:	108003c4 	addi	r2,r2,15
811062e8:	e0ffff17 	ldw	r3,-4(fp)
811062ec:	18c003c3 	ldbu	r3,15(r3)
811062f0:	18c03fcc 	andi	r3,r3,255
811062f4:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
811062f8:	e0bffe17 	ldw	r2,-8(fp)
811062fc:	10800404 	addi	r2,r2,16
81106300:	e0ffff17 	ldw	r3,-4(fp)
81106304:	18c0040b 	ldhu	r3,16(r3)
81106308:	18ffffcc 	andi	r3,r3,65535
8110630c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
81106310:	e0bffe17 	ldw	r2,-8(fp)
81106314:	10800484 	addi	r2,r2,18
81106318:	e0ffff17 	ldw	r3,-4(fp)
8110631c:	18c0048b 	ldhu	r3,18(r3)
81106320:	18ffffcc 	andi	r3,r3,65535
81106324:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
81106328:	e0bffe17 	ldw	r2,-8(fp)
8110632c:	10800504 	addi	r2,r2,20
81106330:	e0ffff17 	ldw	r3,-4(fp)
81106334:	18c00517 	ldw	r3,20(r3)
81106338:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
8110633c:	e0bffe17 	ldw	r2,-8(fp)
81106340:	10800604 	addi	r2,r2,24
81106344:	e0ffff17 	ldw	r3,-4(fp)
81106348:	18c00617 	ldw	r3,24(r3)
8110634c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
81106350:	e0bffe17 	ldw	r2,-8(fp)
81106354:	10800704 	addi	r2,r2,28
81106358:	e0ffff17 	ldw	r3,-4(fp)
8110635c:	18c00717 	ldw	r3,28(r3)
81106360:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
81106364:	0005883a 	mov	r2,zero
}
81106368:	e037883a 	mov	sp,fp
8110636c:	df000017 	ldw	fp,0(sp)
81106370:	dec00104 	addi	sp,sp,4
81106374:	f800283a 	ret

81106378 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81106378:	defff604 	addi	sp,sp,-40
8110637c:	de00012e 	bgeu	sp,et,81106384 <msgdma_construct_extended_descriptor+0xc>
81106380:	003b68fa 	trap	3
81106384:	df000915 	stw	fp,36(sp)
81106388:	df000904 	addi	fp,sp,36
8110638c:	e13ff715 	stw	r4,-36(fp)
81106390:	e17ff815 	stw	r5,-32(fp)
81106394:	e1bff915 	stw	r6,-28(fp)
81106398:	e1fffa15 	stw	r7,-24(fp)
8110639c:	e1800517 	ldw	r6,20(fp)
811063a0:	e1400617 	ldw	r5,24(fp)
811063a4:	e1000717 	ldw	r4,28(fp)
811063a8:	e0c00817 	ldw	r3,32(fp)
811063ac:	e0800917 	ldw	r2,36(fp)
811063b0:	e1bffb0d 	sth	r6,-20(fp)
811063b4:	e17ffc05 	stb	r5,-16(fp)
811063b8:	e13ffd05 	stb	r4,-12(fp)
811063bc:	e0fffe0d 	sth	r3,-8(fp)
811063c0:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
811063c4:	e0bff717 	ldw	r2,-36(fp)
811063c8:	10c01217 	ldw	r3,72(r2)
811063cc:	e0800117 	ldw	r2,4(fp)
811063d0:	18801936 	bltu	r3,r2,81106438 <msgdma_construct_extended_descriptor+0xc0>
811063d4:	e13ff717 	ldw	r4,-36(fp)
811063d8:	20801317 	ldw	r2,76(r4)
811063dc:	20c01417 	ldw	r3,80(r4)
811063e0:	e13ffe0b 	ldhu	r4,-8(fp)
811063e4:	213fffcc 	andi	r4,r4,65535
811063e8:	2015883a 	mov	r10,r4
811063ec:	0017883a 	mov	r11,zero
811063f0:	1ac01136 	bltu	r3,r11,81106438 <msgdma_construct_extended_descriptor+0xc0>
811063f4:	58c0011e 	bne	r11,r3,811063fc <msgdma_construct_extended_descriptor+0x84>
811063f8:	12800f36 	bltu	r2,r10,81106438 <msgdma_construct_extended_descriptor+0xc0>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
811063fc:	e13ff717 	ldw	r4,-36(fp)
81106400:	20801317 	ldw	r2,76(r4)
81106404:	20c01417 	ldw	r3,80(r4)
81106408:	e13fff0b 	ldhu	r4,-4(fp)
8110640c:	213fffcc 	andi	r4,r4,65535
81106410:	2011883a 	mov	r8,r4
81106414:	0013883a 	mov	r9,zero
81106418:	1a400736 	bltu	r3,r9,81106438 <msgdma_construct_extended_descriptor+0xc0>
8110641c:	48c0011e 	bne	r9,r3,81106424 <msgdma_construct_extended_descriptor+0xac>
81106420:	12000536 	bltu	r2,r8,81106438 <msgdma_construct_extended_descriptor+0xc0>
81106424:	e0bff717 	ldw	r2,-36(fp)
81106428:	10801703 	ldbu	r2,92(r2)
8110642c:	10803fcc 	andi	r2,r2,255
81106430:	10800060 	cmpeqi	r2,r2,1
81106434:	1000021e 	bne	r2,zero,81106440 <msgdma_construct_extended_descriptor+0xc8>
		return -EINVAL;
81106438:	00bffa84 	movi	r2,-22
8110643c:	00002306 	br	811064cc <msgdma_construct_extended_descriptor+0x154>
	}

	descriptor->read_address_low = read_address;
81106440:	e0bff817 	ldw	r2,-32(fp)
81106444:	e0fff917 	ldw	r3,-28(fp)
81106448:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
8110644c:	e0bff817 	ldw	r2,-32(fp)
81106450:	e0fffa17 	ldw	r3,-24(fp)
81106454:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
81106458:	e0bff817 	ldw	r2,-32(fp)
8110645c:	e0c00117 	ldw	r3,4(fp)
81106460:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
81106464:	e0bff817 	ldw	r2,-32(fp)
81106468:	e0fffb0b 	ldhu	r3,-20(fp)
8110646c:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81106470:	e0bff817 	ldw	r2,-32(fp)
81106474:	e0fffc03 	ldbu	r3,-16(fp)
81106478:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110647c:	e0bff817 	ldw	r2,-32(fp)
81106480:	e0fffd03 	ldbu	r3,-12(fp)
81106484:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81106488:	e0bff817 	ldw	r2,-32(fp)
8110648c:	e0fffe0b 	ldhu	r3,-8(fp)
81106490:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81106494:	e0bff817 	ldw	r2,-32(fp)
81106498:	e0ffff0b 	ldhu	r3,-4(fp)
8110649c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
811064a0:	e0bff817 	ldw	r2,-32(fp)
811064a4:	e0c00317 	ldw	r3,12(fp)
811064a8:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
811064ac:	e0bff817 	ldw	r2,-32(fp)
811064b0:	e0c00417 	ldw	r3,16(fp)
811064b4:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811064b8:	e0800217 	ldw	r2,8(fp)
811064bc:	10e00034 	orhi	r3,r2,32768
811064c0:	e0bff817 	ldw	r2,-32(fp)
811064c4:	10c00715 	stw	r3,28(r2)

	return 0;
811064c8:	0005883a 	mov	r2,zero

}
811064cc:	e037883a 	mov	sp,fp
811064d0:	df000017 	ldw	fp,0(sp)
811064d4:	dec00104 	addi	sp,sp,4
811064d8:	f800283a 	ret

811064dc <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
811064dc:	deffee04 	addi	sp,sp,-72
811064e0:	de00012e 	bgeu	sp,et,811064e8 <msgdma_descriptor_async_transfer+0xc>
811064e4:	003b68fa 	trap	3
811064e8:	dfc01115 	stw	ra,68(sp)
811064ec:	df001015 	stw	fp,64(sp)
811064f0:	df001004 	addi	fp,sp,64
811064f4:	e13ffd15 	stw	r4,-12(fp)
811064f8:	e17ffe15 	stw	r5,-8(fp)
811064fc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106500:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106504:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81106508:	e03ff00d 	sth	zero,-64(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110650c:	e0bffd17 	ldw	r2,-12(fp)
81106510:	10800317 	ldw	r2,12(r2)
81106514:	10800204 	addi	r2,r2,8
81106518:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
8110651c:	10bfffcc 	andi	r2,r2,65535
81106520:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106524:	e0bffd17 	ldw	r2,-12(fp)
81106528:	10800317 	ldw	r2,12(r2)
8110652c:	10800204 	addi	r2,r2,8
81106530:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81106534:	1004d43a 	srli	r2,r2,16
81106538:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
8110653c:	e0bffd17 	ldw	r2,-12(fp)
81106540:	10800917 	ldw	r2,36(r2)
81106544:	e0fff417 	ldw	r3,-48(fp)
81106548:	1880042e 	bgeu	r3,r2,8110655c <msgdma_descriptor_async_transfer+0x80>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
8110654c:	e0bffd17 	ldw	r2,-12(fp)
81106550:	10800917 	ldw	r2,36(r2)
81106554:	e0fff317 	ldw	r3,-52(fp)
81106558:	18800236 	bltu	r3,r2,81106564 <msgdma_descriptor_async_transfer+0x88>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
8110655c:	00bff904 	movi	r2,-28
81106560:	00009f06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
81106564:	e0bffd17 	ldw	r2,-12(fp)
81106568:	10801817 	ldw	r2,96(r2)
8110656c:	e0bff615 	stw	r2,-40(fp)
81106570:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81106574:	e0bffc0b 	ldhu	r2,-16(fp)
81106578:	e0fffc84 	addi	r3,fp,-14
8110657c:	180d883a 	mov	r6,r3
81106580:	100b883a 	mov	r5,r2
81106584:	e13ff617 	ldw	r4,-40(fp)
81106588:	11301a40 	call	811301a4 <OSSemPend>

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110658c:	00800804 	movi	r2,32
81106590:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106594:	0005303a 	rdctl	r2,status
81106598:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110659c:	e0fff717 	ldw	r3,-36(fp)
811065a0:	00bfff84 	movi	r2,-2
811065a4:	1884703a 	and	r2,r3,r2
811065a8:	1001703a 	wrctl	status,r2
  
  return context;
811065ac:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811065b0:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811065b4:	e0bffd17 	ldw	r2,-12(fp)
811065b8:	10800317 	ldw	r2,12(r2)
811065bc:	10800104 	addi	r2,r2,4
811065c0:	e0fff117 	ldw	r3,-60(fp)
811065c4:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811065c8:	e0bffd17 	ldw	r2,-12(fp)
811065cc:	10800317 	ldw	r2,12(r2)
811065d0:	e0fffd17 	ldw	r3,-12(fp)
811065d4:	18c00317 	ldw	r3,12(r3)
811065d8:	18c00037 	ldwio	r3,0(r3)
811065dc:	10c00035 	stwio	r3,0(r2)
811065e0:	e0bff217 	ldw	r2,-56(fp)
811065e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811065e8:	e0bffb17 	ldw	r2,-20(fp)
811065ec:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
811065f0:	e0bffe17 	ldw	r2,-8(fp)
811065f4:	10001026 	beq	r2,zero,81106638 <msgdma_descriptor_async_transfer+0x15c>
811065f8:	e0bfff17 	ldw	r2,-4(fp)
811065fc:	10000e1e 	bne	r2,zero,81106638 <msgdma_descriptor_async_transfer+0x15c>
		counter = 0; /* reset counter */
81106600:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106604:	d0a04f17 	ldw	r2,-32452(gp)
81106608:	100f883a 	mov	r7,r2
8110660c:	01800784 	movi	r6,30
81106610:	01400044 	movi	r5,1
81106614:	01204534 	movhi	r4,33044
81106618:	21373904 	addi	r4,r4,-8988
8110661c:	11126a00 	call	811126a0 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106620:	e0bffd17 	ldw	r2,-12(fp)
81106624:	10801817 	ldw	r2,96(r2)
81106628:	1009883a 	mov	r4,r2
8110662c:	113052c0 	call	8113052c <OSSemPost>

		return -ETIME;
81106630:	00bff084 	movi	r2,-62
81106634:	00006a06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106638:	e0bffe17 	ldw	r2,-8(fp)
8110663c:	1000231e 	bne	r2,zero,811066cc <msgdma_descriptor_async_transfer+0x1f0>
81106640:	e0bfff17 	ldw	r2,-4(fp)
81106644:	10002126 	beq	r2,zero,811066cc <msgdma_descriptor_async_transfer+0x1f0>
		counter = 0; /* reset counter */
81106648:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8110664c:	00001506 	br	811066a4 <msgdma_descriptor_async_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
81106650:	01000044 	movi	r4,1
81106654:	11278680 	call	81127868 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106658:	e0bff00b 	ldhu	r2,-64(fp)
8110665c:	1084e230 	cmpltui	r2,r2,5000
81106660:	10000d1e 	bne	r2,zero,81106698 <msgdma_descriptor_async_transfer+0x1bc>
			{
#ifdef DEBUG_ON
				debug(fp,
81106664:	d0a04f17 	ldw	r2,-32452(gp)
81106668:	100f883a 	mov	r7,r2
8110666c:	01801544 	movi	r6,85
81106670:	01400044 	movi	r5,1
81106674:	01204534 	movhi	r4,33044
81106678:	21374104 	addi	r4,r4,-8956
8110667c:	11126a00 	call	811126a0 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
81106680:	e0bffd17 	ldw	r2,-12(fp)
81106684:	10801817 	ldw	r2,96(r2)
81106688:	1009883a 	mov	r4,r2
8110668c:	113052c0 	call	8113052c <OSSemPost>

				return -ETIME;
81106690:	00bff084 	movi	r2,-62
81106694:	00005206 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
			}
			counter++;
81106698:	e0bff00b 	ldhu	r2,-64(fp)
8110669c:	10800044 	addi	r2,r2,1
811066a0:	e0bff00d 	sth	r2,-64(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811066a4:	e0bffd17 	ldw	r2,-12(fp)
811066a8:	10c00317 	ldw	r3,12(r2)
811066ac:	e0bffd17 	ldw	r2,-12(fp)
811066b0:	10800417 	ldw	r2,16(r2)
811066b4:	e1bfff17 	ldw	r6,-4(fp)
811066b8:	100b883a 	mov	r5,r2
811066bc:	1809883a 	mov	r4,r3
811066c0:	110623c0 	call	8110623c <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811066c4:	103fe21e 	bne	r2,zero,81106650 <__reset+0xfb0e6650>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811066c8:	00000606 	br	811066e4 <msgdma_descriptor_async_transfer+0x208>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811066cc:	e0bffd17 	ldw	r2,-12(fp)
811066d0:	10801817 	ldw	r2,96(r2)
811066d4:	1009883a 	mov	r4,r2
811066d8:	113052c0 	call	8113052c <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811066dc:	00bfffc4 	movi	r2,-1
811066e0:	00003f06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
811066e4:	e0bffd17 	ldw	r2,-12(fp)
811066e8:	10800b17 	ldw	r2,44(r2)
811066ec:	10001c26 	beq	r2,zero,81106760 <msgdma_descriptor_async_transfer+0x284>

		control |= (dev->control |
811066f0:	e0bffd17 	ldw	r2,-12(fp)
811066f4:	10c00d17 	ldw	r3,52(r2)
811066f8:	e0bff117 	ldw	r2,-60(fp)
811066fc:	1884b03a 	or	r2,r3,r2
81106700:	10800514 	ori	r2,r2,20
81106704:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106708:	e0fff117 	ldw	r3,-60(fp)
8110670c:	00bff7c4 	movi	r2,-33
81106710:	1884703a 	and	r2,r3,r2
81106714:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106718:	0005303a 	rdctl	r2,status
8110671c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106720:	e0fff917 	ldw	r3,-28(fp)
81106724:	00bfff84 	movi	r2,-2
81106728:	1884703a 	and	r2,r3,r2
8110672c:	1001703a 	wrctl	status,r2
  
  return context;
81106730:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81106734:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	10800104 	addi	r2,r2,4
81106744:	e0fff117 	ldw	r3,-60(fp)
81106748:	10c00035 	stwio	r3,0(r2)
8110674c:	e0bff217 	ldw	r2,-56(fp)
81106750:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106754:	e0bff517 	ldw	r2,-44(fp)
81106758:	1001703a 	wrctl	status,r2
8110675c:	00001b06 	br	811067cc <msgdma_descriptor_async_transfer+0x2f0>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
81106760:	e0bffd17 	ldw	r2,-12(fp)
81106764:	10c00d17 	ldw	r3,52(r2)
81106768:	e0bff117 	ldw	r2,-60(fp)
8110676c:	1884b03a 	or	r2,r3,r2
81106770:	10800114 	ori	r2,r2,4
81106774:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81106778:	e0fff117 	ldw	r3,-60(fp)
8110677c:	00bff3c4 	movi	r2,-49
81106780:	1884703a 	and	r2,r3,r2
81106784:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106788:	0005303a 	rdctl	r2,status
8110678c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106790:	e0fffa17 	ldw	r3,-24(fp)
81106794:	00bfff84 	movi	r2,-2
81106798:	1884703a 	and	r2,r3,r2
8110679c:	1001703a 	wrctl	status,r2
  
  return context;
811067a0:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811067a4:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811067a8:	e0bffd17 	ldw	r2,-12(fp)
811067ac:	10800317 	ldw	r2,12(r2)
811067b0:	10800104 	addi	r2,r2,4
811067b4:	e0fff117 	ldw	r3,-60(fp)
811067b8:	10c00035 	stwio	r3,0(r2)
811067bc:	e0bff217 	ldw	r2,-56(fp)
811067c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811067c4:	e0bff817 	ldw	r2,-32(fp)
811067c8:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
811067cc:	e0bffd17 	ldw	r2,-12(fp)
811067d0:	10801817 	ldw	r2,96(r2)
811067d4:	1009883a 	mov	r4,r2
811067d8:	113052c0 	call	8113052c <OSSemPost>

	return 0;
811067dc:	0005883a 	mov	r2,zero
}
811067e0:	e037883a 	mov	sp,fp
811067e4:	dfc00117 	ldw	ra,4(sp)
811067e8:	df000017 	ldw	fp,0(sp)
811067ec:	dec00204 	addi	sp,sp,8
811067f0:	f800283a 	ret

811067f4 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
811067f4:	deffee04 	addi	sp,sp,-72
811067f8:	de00012e 	bgeu	sp,et,81106800 <msgdma_descriptor_sync_transfer+0xc>
811067fc:	003b68fa 	trap	3
81106800:	dfc01115 	stw	ra,68(sp)
81106804:	df001015 	stw	fp,64(sp)
81106808:	df001004 	addi	fp,sp,64
8110680c:	e13ffd15 	stw	r4,-12(fp)
81106810:	e17ffe15 	stw	r5,-8(fp)
81106814:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106818:	e03ff415 	stw	zero,-48(fp)
	alt_irq_context context = 0;
8110681c:	e03ff515 	stw	zero,-44(fp)
	alt_u32 csr_status = 0;
81106820:	e03ff015 	stw	zero,-64(fp)
	alt_u16 counter = 0;
81106824:	e03ff10d 	sth	zero,-60(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106828:	e0bffd17 	ldw	r2,-12(fp)
8110682c:	10800317 	ldw	r2,12(r2)
81106830:	10800204 	addi	r2,r2,8
81106834:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
81106838:	10bfffcc 	andi	r2,r2,65535
8110683c:	e0bff215 	stw	r2,-56(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106840:	e0bffd17 	ldw	r2,-12(fp)
81106844:	10800317 	ldw	r2,12(r2)
81106848:	10800204 	addi	r2,r2,8
8110684c:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81106850:	1004d43a 	srli	r2,r2,16
81106854:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
81106858:	00807804 	movi	r2,480
8110685c:	e0bff615 	stw	r2,-40(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81106860:	00001d06 	br	811068d8 <msgdma_descriptor_sync_transfer+0xe4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
81106864:	01000044 	movi	r4,1
81106868:	11278680 	call	81127868 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110686c:	e0bff10b 	ldhu	r2,-60(fp)
81106870:	1084e230 	cmpltui	r2,r2,5000
81106874:	1000091e 	bne	r2,zero,8110689c <msgdma_descriptor_sync_transfer+0xa8>
		{
#ifdef DEBUG_ON
			debug(fp,
81106878:	d0a04f17 	ldw	r2,-32452(gp)
8110687c:	100f883a 	mov	r7,r2
81106880:	01801304 	movi	r6,76
81106884:	01400044 	movi	r5,1
81106888:	01204534 	movhi	r4,33044
8110688c:	21375704 	addi	r4,r4,-8868
81106890:	11126a00 	call	811126a0 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81106894:	00bff084 	movi	r2,-62
81106898:	0000d006 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
8110689c:	e0bff10b 	ldhu	r2,-60(fp)
811068a0:	10800044 	addi	r2,r2,1
811068a4:	e0bff10d 	sth	r2,-60(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811068a8:	e0bffd17 	ldw	r2,-12(fp)
811068ac:	10800317 	ldw	r2,12(r2)
811068b0:	10800204 	addi	r2,r2,8
811068b4:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
811068b8:	10bfffcc 	andi	r2,r2,65535
811068bc:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811068c0:	e0bffd17 	ldw	r2,-12(fp)
811068c4:	10800317 	ldw	r2,12(r2)
811068c8:	10800204 	addi	r2,r2,8
811068cc:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
811068d0:	1004d43a 	srli	r2,r2,16
811068d4:	e0bff315 	stw	r2,-52(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811068d8:	e0bffd17 	ldw	r2,-12(fp)
811068dc:	10800917 	ldw	r2,36(r2)
811068e0:	e0fff317 	ldw	r3,-52(fp)
811068e4:	18bfdf2e 	bgeu	r3,r2,81106864 <__reset+0xfb0e6864>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
811068e8:	e0bffd17 	ldw	r2,-12(fp)
811068ec:	10800917 	ldw	r2,36(r2)
811068f0:	e0fff217 	ldw	r3,-56(fp)
811068f4:	18bfdb2e 	bgeu	r3,r2,81106864 <__reset+0xfb0e6864>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
811068f8:	e0bffd17 	ldw	r2,-12(fp)
811068fc:	10801817 	ldw	r2,96(r2)
81106900:	e0bff815 	stw	r2,-32(fp)
81106904:	e03ffc0d 	sth	zero,-16(fp)
81106908:	e0bffc0b 	ldhu	r2,-16(fp)
8110690c:	e0fffc84 	addi	r3,fp,-14
81106910:	180d883a 	mov	r6,r3
81106914:	100b883a 	mov	r5,r2
81106918:	e13ff817 	ldw	r4,-32(fp)
8110691c:	11301a40 	call	811301a4 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106920:	0005303a 	rdctl	r2,status
81106924:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106928:	e0fffb17 	ldw	r3,-20(fp)
8110692c:	00bfff84 	movi	r2,-2
81106930:	1884703a 	and	r2,r3,r2
81106934:	1001703a 	wrctl	status,r2
  
  return context;
81106938:	e0bffb17 	ldw	r2,-20(fp)

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8110693c:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106940:	e0bffd17 	ldw	r2,-12(fp)
81106944:	10800317 	ldw	r2,12(r2)
81106948:	10800104 	addi	r2,r2,4
8110694c:	00c00804 	movi	r3,32
81106950:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106954:	e0bffd17 	ldw	r2,-12(fp)
81106958:	10800317 	ldw	r2,12(r2)
8110695c:	e0fffd17 	ldw	r3,-12(fp)
81106960:	18c00317 	ldw	r3,12(r3)
81106964:	18c00037 	ldwio	r3,0(r3)
81106968:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
8110696c:	e0bffe17 	ldw	r2,-8(fp)
81106970:	10001026 	beq	r2,zero,811069b4 <msgdma_descriptor_sync_transfer+0x1c0>
81106974:	e0bfff17 	ldw	r2,-4(fp)
81106978:	10000e1e 	bne	r2,zero,811069b4 <msgdma_descriptor_sync_transfer+0x1c0>
		counter = 0; /* reset counter */
8110697c:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106980:	d0a04f17 	ldw	r2,-32452(gp)
81106984:	100f883a 	mov	r7,r2
81106988:	01800784 	movi	r6,30
8110698c:	01400044 	movi	r5,1
81106990:	01204534 	movhi	r4,33044
81106994:	21373904 	addi	r4,r4,-8988
81106998:	11126a00 	call	811126a0 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110699c:	e0bffd17 	ldw	r2,-12(fp)
811069a0:	10801817 	ldw	r2,96(r2)
811069a4:	1009883a 	mov	r4,r2
811069a8:	113052c0 	call	8113052c <OSSemPost>

		return -ETIME;
811069ac:	00bff084 	movi	r2,-62
811069b0:	00008a06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811069b4:	e0bffe17 	ldw	r2,-8(fp)
811069b8:	1000231e 	bne	r2,zero,81106a48 <msgdma_descriptor_sync_transfer+0x254>
811069bc:	e0bfff17 	ldw	r2,-4(fp)
811069c0:	10002126 	beq	r2,zero,81106a48 <msgdma_descriptor_sync_transfer+0x254>
		counter = 0; /* reset counter */
811069c4:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811069c8:	00001506 	br	81106a20 <msgdma_descriptor_sync_transfer+0x22c>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811069cc:	01000044 	movi	r4,1
811069d0:	11278680 	call	81127868 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811069d4:	e0bff10b 	ldhu	r2,-60(fp)
811069d8:	1084e230 	cmpltui	r2,r2,5000
811069dc:	10000d1e 	bne	r2,zero,81106a14 <msgdma_descriptor_sync_transfer+0x220>
			{
#ifdef DEBUG_ON
				debug(fp,
811069e0:	d0a04f17 	ldw	r2,-32452(gp)
811069e4:	100f883a 	mov	r7,r2
811069e8:	01801004 	movi	r6,64
811069ec:	01400044 	movi	r5,1
811069f0:	01204534 	movhi	r4,33044
811069f4:	21376b04 	addi	r4,r4,-8788
811069f8:	11126a00 	call	811126a0 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
811069fc:	e0bffd17 	ldw	r2,-12(fp)
81106a00:	10801817 	ldw	r2,96(r2)
81106a04:	1009883a 	mov	r4,r2
81106a08:	113052c0 	call	8113052c <OSSemPost>

				return -ETIME;
81106a0c:	00bff084 	movi	r2,-62
81106a10:	00007206 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
			}
			counter++;
81106a14:	e0bff10b 	ldhu	r2,-60(fp)
81106a18:	10800044 	addi	r2,r2,1
81106a1c:	e0bff10d 	sth	r2,-60(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106a20:	e0bffd17 	ldw	r2,-12(fp)
81106a24:	10c00317 	ldw	r3,12(r2)
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	10800417 	ldw	r2,16(r2)
81106a30:	e1bfff17 	ldw	r6,-4(fp)
81106a34:	100b883a 	mov	r5,r2
81106a38:	1809883a 	mov	r4,r3
81106a3c:	110623c0 	call	8110623c <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106a40:	103fe21e 	bne	r2,zero,811069cc <__reset+0xfb0e69cc>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106a44:	00000606 	br	81106a60 <msgdma_descriptor_sync_transfer+0x26c>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106a48:	e0bffd17 	ldw	r2,-12(fp)
81106a4c:	10801817 	ldw	r2,96(r2)
81106a50:	1009883a 	mov	r4,r2
81106a54:	113052c0 	call	8113052c <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
81106a58:	00bfffc4 	movi	r2,-1
81106a5c:	00005f06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106a60:	e0bffd17 	ldw	r2,-12(fp)
81106a64:	10800317 	ldw	r2,12(r2)
81106a68:	10800104 	addi	r2,r2,4
81106a6c:	e0fffd17 	ldw	r3,-12(fp)
81106a70:	19000d17 	ldw	r4,52(r3)
81106a74:	00fff2c4 	movi	r3,-53
81106a78:	20c6703a 	and	r3,r4,r3
81106a7c:	18c00114 	ori	r3,r3,4
81106a80:	10c00035 	stwio	r3,0(r2)
81106a84:	e0bff517 	ldw	r2,-44(fp)
81106a88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106a8c:	e0bff717 	ldw	r2,-36(fp)
81106a90:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81106a94:	e03ff10d 	sth	zero,-60(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a98:	e0bffd17 	ldw	r2,-12(fp)
81106a9c:	10800317 	ldw	r2,12(r2)
81106aa0:	10800037 	ldwio	r2,0(r2)
81106aa4:	e0bff015 	stw	r2,-64(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106aa8:	00001906 	br	81106b10 <msgdma_descriptor_sync_transfer+0x31c>
		alt_busy_sleep(1); /* delay 1us */
81106aac:	01000044 	movi	r4,1
81106ab0:	11278680 	call	81127868 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106ab4:	e0bff10b 	ldhu	r2,-60(fp)
81106ab8:	1084e230 	cmpltui	r2,r2,5000
81106abc:	10000d1e 	bne	r2,zero,81106af4 <msgdma_descriptor_sync_transfer+0x300>
		{
#ifdef DEBUG_ON
			debug(fp,
81106ac0:	d0a04f17 	ldw	r2,-32452(gp)
81106ac4:	100f883a 	mov	r7,r2
81106ac8:	01801184 	movi	r6,70
81106acc:	01400044 	movi	r5,1
81106ad0:	01204534 	movhi	r4,33044
81106ad4:	21377c04 	addi	r4,r4,-8720
81106ad8:	11126a00 	call	811126a0 <fwrite>

			/*
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);
81106adc:	e0bffd17 	ldw	r2,-12(fp)
81106ae0:	10801817 	ldw	r2,96(r2)
81106ae4:	1009883a 	mov	r4,r2
81106ae8:	113052c0 	call	8113052c <OSSemPost>

			return -ETIME;
81106aec:	00bff084 	movi	r2,-62
81106af0:	00003a06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
81106af4:	e0bff10b 	ldhu	r2,-60(fp)
81106af8:	10800044 	addi	r2,r2,1
81106afc:	e0bff10d 	sth	r2,-60(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106b00:	e0bffd17 	ldw	r2,-12(fp)
81106b04:	10800317 	ldw	r2,12(r2)
81106b08:	10800037 	ldwio	r2,0(r2)
81106b0c:	e0bff015 	stw	r2,-64(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106b10:	e0fff017 	ldw	r3,-64(fp)
81106b14:	e0bff617 	ldw	r2,-40(fp)
81106b18:	1884703a 	and	r2,r3,r2
81106b1c:	1000031e 	bne	r2,zero,81106b2c <msgdma_descriptor_sync_transfer+0x338>
81106b20:	e0bff017 	ldw	r2,-64(fp)
81106b24:	1080004c 	andi	r2,r2,1
81106b28:	103fe01e 	bne	r2,zero,81106aac <__reset+0xfb0e6aac>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106b2c:	e0fff017 	ldw	r3,-64(fp)
81106b30:	e0bff617 	ldw	r2,-40(fp)
81106b34:	1884703a 	and	r2,r3,r2
81106b38:	10000626 	beq	r2,zero,81106b54 <msgdma_descriptor_sync_transfer+0x360>
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106b3c:	e0bffd17 	ldw	r2,-12(fp)
81106b40:	10801817 	ldw	r2,96(r2)
81106b44:	1009883a 	mov	r4,r2
81106b48:	113052c0 	call	8113052c <OSSemPost>

		return error;
81106b4c:	e0bff617 	ldw	r2,-40(fp)
81106b50:	00002206 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81106b54:	e0bffd17 	ldw	r2,-12(fp)
81106b58:	10800317 	ldw	r2,12(r2)
81106b5c:	10800104 	addi	r2,r2,4
81106b60:	10800037 	ldwio	r2,0(r2)
81106b64:	10800814 	ori	r2,r2,32
81106b68:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106b6c:	0005303a 	rdctl	r2,status
81106b70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b74:	e0fffa17 	ldw	r3,-24(fp)
81106b78:	00bfff84 	movi	r2,-2
81106b7c:	1884703a 	and	r2,r3,r2
81106b80:	1001703a 	wrctl	status,r2
  
  return context;
81106b84:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b88:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106b8c:	e0bffd17 	ldw	r2,-12(fp)
81106b90:	10800317 	ldw	r2,12(r2)
81106b94:	10800104 	addi	r2,r2,4
81106b98:	e0fff417 	ldw	r3,-48(fp)
81106b9c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106ba0:	e0bffd17 	ldw	r2,-12(fp)
81106ba4:	10800317 	ldw	r2,12(r2)
81106ba8:	e0fffd17 	ldw	r3,-12(fp)
81106bac:	18c00317 	ldw	r3,12(r3)
81106bb0:	18c00037 	ldwio	r3,0(r3)
81106bb4:	10c00035 	stwio	r3,0(r2)
81106bb8:	e0bff517 	ldw	r2,-44(fp)
81106bbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106bc0:	e0bff917 	ldw	r2,-28(fp)
81106bc4:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
81106bc8:	e0bffd17 	ldw	r2,-12(fp)
81106bcc:	10801817 	ldw	r2,96(r2)
81106bd0:	1009883a 	mov	r4,r2
81106bd4:	113052c0 	call	8113052c <OSSemPost>

	return 0;
81106bd8:	0005883a 	mov	r2,zero

}
81106bdc:	e037883a 	mov	sp,fp
81106be0:	dfc00117 	ldw	ra,4(sp)
81106be4:	df000017 	ldw	fp,0(sp)
81106be8:	dec00204 	addi	sp,sp,8
81106bec:	f800283a 	ret

81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106bf0:	deffec04 	addi	sp,sp,-80
81106bf4:	de00012e 	bgeu	sp,et,81106bfc <iMsgdmaConstructExtendedMmToMmDescriptor+0xc>
81106bf8:	003b68fa 	trap	3
81106bfc:	dfc01315 	stw	ra,76(sp)
81106c00:	df001215 	stw	fp,72(sp)
81106c04:	df001204 	addi	fp,sp,72
81106c08:	e13ff715 	stw	r4,-36(fp)
81106c0c:	e17ff815 	stw	r5,-32(fp)
81106c10:	e1bff915 	stw	r6,-28(fp)
81106c14:	e1fffa15 	stw	r7,-24(fp)
81106c18:	e1800617 	ldw	r6,24(fp)
81106c1c:	e1400717 	ldw	r5,28(fp)
81106c20:	e1000817 	ldw	r4,32(fp)
81106c24:	e0c00917 	ldw	r3,36(fp)
81106c28:	e0800a17 	ldw	r2,40(fp)
81106c2c:	e1bffb0d 	sth	r6,-20(fp)
81106c30:	e17ffc05 	stb	r5,-16(fp)
81106c34:	e13ffd05 	stb	r4,-12(fp)
81106c38:	e0fffe0d 	sth	r3,-8(fp)
81106c3c:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106c40:	e0bffb0b 	ldhu	r2,-20(fp)
81106c44:	e0fffc03 	ldbu	r3,-16(fp)
81106c48:	e13ffd03 	ldbu	r4,-12(fp)
81106c4c:	e17ffe0b 	ldhu	r5,-8(fp)
81106c50:	e1bfff0b 	ldhu	r6,-4(fp)
81106c54:	d9800815 	stw	r6,32(sp)
81106c58:	d9400715 	stw	r5,28(sp)
81106c5c:	d9000615 	stw	r4,24(sp)
81106c60:	d8c00515 	stw	r3,20(sp)
81106c64:	d8800415 	stw	r2,16(sp)
81106c68:	e0800517 	ldw	r2,20(fp)
81106c6c:	d8800315 	stw	r2,12(sp)
81106c70:	e0800417 	ldw	r2,16(fp)
81106c74:	d8800215 	stw	r2,8(sp)
81106c78:	e0800317 	ldw	r2,12(fp)
81106c7c:	d8800115 	stw	r2,4(sp)
81106c80:	e0800217 	ldw	r2,8(fp)
81106c84:	d8800015 	stw	r2,0(sp)
81106c88:	e1fffa17 	ldw	r7,-24(fp)
81106c8c:	e1bff917 	ldw	r6,-28(fp)
81106c90:	e17ff817 	ldw	r5,-32(fp)
81106c94:	e13ff717 	ldw	r4,-36(fp)
81106c98:	11063780 	call	81106378 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
81106c9c:	e037883a 	mov	sp,fp
81106ca0:	dfc00117 	ldw	ra,4(sp)
81106ca4:	df000017 	ldw	fp,0(sp)
81106ca8:	dec00204 	addi	sp,sp,8
81106cac:	f800283a 	ret

81106cb0 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106cb0:	defffc04 	addi	sp,sp,-16
81106cb4:	de00012e 	bgeu	sp,et,81106cbc <iMsgdmaExtendedDescriptorAsyncTransfer+0xc>
81106cb8:	003b68fa 	trap	3
81106cbc:	dfc00315 	stw	ra,12(sp)
81106cc0:	df000215 	stw	fp,8(sp)
81106cc4:	df000204 	addi	fp,sp,8
81106cc8:	e13ffe15 	stw	r4,-8(fp)
81106ccc:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
81106cd0:	e1bfff17 	ldw	r6,-4(fp)
81106cd4:	000b883a 	mov	r5,zero
81106cd8:	e13ffe17 	ldw	r4,-8(fp)
81106cdc:	11064dc0 	call	811064dc <msgdma_descriptor_async_transfer>
}
81106ce0:	e037883a 	mov	sp,fp
81106ce4:	dfc00117 	ldw	ra,4(sp)
81106ce8:	df000017 	ldw	fp,0(sp)
81106cec:	dec00204 	addi	sp,sp,8
81106cf0:	f800283a 	ret

81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106cf4:	defffc04 	addi	sp,sp,-16
81106cf8:	de00012e 	bgeu	sp,et,81106d00 <iMsgdmaExtendedDescriptorSyncTransfer+0xc>
81106cfc:	003b68fa 	trap	3
81106d00:	dfc00315 	stw	ra,12(sp)
81106d04:	df000215 	stw	fp,8(sp)
81106d08:	df000204 	addi	fp,sp,8
81106d0c:	e13ffe15 	stw	r4,-8(fp)
81106d10:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106d14:	e1bfff17 	ldw	r6,-4(fp)
81106d18:	000b883a 	mov	r5,zero
81106d1c:	e13ffe17 	ldw	r4,-8(fp)
81106d20:	11067f40 	call	811067f4 <msgdma_descriptor_sync_transfer>
}
81106d24:	e037883a 	mov	sp,fp
81106d28:	dfc00117 	ldw	ra,4(sp)
81106d2c:	df000017 	ldw	fp,0(sp)
81106d30:	dec00204 	addi	sp,sp,8
81106d34:	f800283a 	ret

81106d38 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106d38:	defff204 	addi	sp,sp,-56
81106d3c:	de00012e 	bgeu	sp,et,81106d44 <POWER_SPI_RW+0xc>
81106d40:	003b68fa 	trap	3
81106d44:	dfc00d15 	stw	ra,52(sp)
81106d48:	df000c15 	stw	fp,48(sp)
81106d4c:	df000c04 	addi	fp,sp,48
81106d50:	2007883a 	mov	r3,r4
81106d54:	2805883a 	mov	r2,r5
81106d58:	e1bffe15 	stw	r6,-8(fp)
81106d5c:	e1ffff15 	stw	r7,-4(fp)
81106d60:	e0fffc05 	stb	r3,-16(fp)
81106d64:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106d68:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106d6c:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106d70:	008003f4 	movhi	r2,15
81106d74:	10909004 	addi	r2,r2,16960
81106d78:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106d7c:	00bfe004 	movi	r2,-128
81106d80:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
81106d84:	e0bffe17 	ldw	r2,-8(fp)
81106d88:	10000226 	beq	r2,zero,81106d94 <POWER_SPI_RW+0x5c>
81106d8c:	00800804 	movi	r2,32
81106d90:	00000106 	br	81106d98 <POWER_SPI_RW+0x60>
81106d94:	0005883a 	mov	r2,zero
81106d98:	e0fff403 	ldbu	r3,-48(fp)
81106d9c:	10c4b03a 	or	r2,r2,r3
81106da0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
81106da4:	e0800217 	ldw	r2,8(fp)
81106da8:	10000226 	beq	r2,zero,81106db4 <POWER_SPI_RW+0x7c>
81106dac:	00800404 	movi	r2,16
81106db0:	00000106 	br	81106db8 <POWER_SPI_RW+0x80>
81106db4:	0005883a 	mov	r2,zero
81106db8:	e0fff403 	ldbu	r3,-48(fp)
81106dbc:	10c4b03a 	or	r2,r2,r3
81106dc0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
81106dc4:	e0bfff17 	ldw	r2,-4(fp)
81106dc8:	10000226 	beq	r2,zero,81106dd4 <POWER_SPI_RW+0x9c>
81106dcc:	00800204 	movi	r2,8
81106dd0:	00000106 	br	81106dd8 <POWER_SPI_RW+0xa0>
81106dd4:	0005883a 	mov	r2,zero
81106dd8:	e0fff403 	ldbu	r3,-48(fp)
81106ddc:	10c4b03a 	or	r2,r2,r3
81106de0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
81106de4:	e0bffd03 	ldbu	r2,-12(fp)
81106de8:	108001cc 	andi	r2,r2,7
81106dec:	1007883a 	mov	r3,r2
81106df0:	e0bff403 	ldbu	r2,-48(fp)
81106df4:	1884b03a 	or	r2,r3,r2
81106df8:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106dfc:	0007883a 	mov	r3,zero
81106e00:	00a00034 	movhi	r2,32768
81106e04:	10824404 	addi	r2,r2,2320
81106e08:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106e0c:	0007883a 	mov	r3,zero
81106e10:	00a00034 	movhi	r2,32768
81106e14:	10824c04 	addi	r2,r2,2352
81106e18:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106e1c:	e0bffc03 	ldbu	r2,-16(fp)
81106e20:	1000021e 	bne	r2,zero,81106e2c <POWER_SPI_RW+0xf4>
81106e24:	00c00084 	movi	r3,2
81106e28:	00000106 	br	81106e30 <POWER_SPI_RW+0xf8>
81106e2c:	00c00044 	movi	r3,1
81106e30:	00a00034 	movhi	r2,32768
81106e34:	10824804 	addi	r2,r2,2336
81106e38:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106e3c:	010003c4 	movi	r4,15
81106e40:	112931c0 	call	8112931c <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106e44:	00000306 	br	81106e54 <POWER_SPI_RW+0x11c>
		nWait++;
81106e48:	e0bff817 	ldw	r2,-32(fp)
81106e4c:	10800044 	addi	r2,r2,1
81106e50:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106e54:	00a00034 	movhi	r2,32768
81106e58:	10825404 	addi	r2,r2,2384
81106e5c:	10800037 	ldwio	r2,0(r2)
81106e60:	1080004c 	andi	r2,r2,1
81106e64:	10000326 	beq	r2,zero,81106e74 <POWER_SPI_RW+0x13c>
81106e68:	e0fff817 	ldw	r3,-32(fp)
81106e6c:	e0bffa17 	ldw	r2,-24(fp)
81106e70:	18bff516 	blt	r3,r2,81106e48 <__reset+0xfb0e6e48>
		nWait++;
	}

	if (SPI_SDO) {
81106e74:	00a00034 	movhi	r2,32768
81106e78:	10825404 	addi	r2,r2,2384
81106e7c:	10800037 	ldwio	r2,0(r2)
81106e80:	1080004c 	andi	r2,r2,1
81106e84:	10000626 	beq	r2,zero,81106ea0 <POWER_SPI_RW+0x168>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106e88:	00c000c4 	movi	r3,3
81106e8c:	00a00034 	movhi	r2,32768
81106e90:	10824804 	addi	r2,r2,2336
81106e94:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
81106e98:	0005883a 	mov	r2,zero
81106e9c:	0000db06 	br	8110720c <POWER_SPI_RW+0x4d4>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106ea0:	e03ff715 	stw	zero,-36(fp)
81106ea4:	00002406 	br	81106f38 <POWER_SPI_RW+0x200>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
81106ea8:	e0bff403 	ldbu	r2,-48(fp)
81106eac:	10803fcc 	andi	r2,r2,255
81106eb0:	1004d1fa 	srli	r2,r2,7
81106eb4:	10c03fcc 	andi	r3,r2,255
81106eb8:	00a00034 	movhi	r2,32768
81106ebc:	10825004 	addi	r2,r2,2368
81106ec0:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106ec4:	e0bff403 	ldbu	r2,-48(fp)
81106ec8:	1085883a 	add	r2,r2,r2
81106ecc:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81106ed0:	e0bff517 	ldw	r2,-44(fp)
81106ed4:	1085883a 	add	r2,r2,r2
81106ed8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81106edc:	00a00034 	movhi	r2,32768
81106ee0:	10825404 	addi	r2,r2,2384
81106ee4:	10800037 	ldwio	r2,0(r2)
81106ee8:	1080004c 	andi	r2,r2,1
81106eec:	1007883a 	mov	r3,r2
81106ef0:	e0bff517 	ldw	r2,-44(fp)
81106ef4:	10c4b03a 	or	r2,r2,r3
81106ef8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106efc:	00c00044 	movi	r3,1
81106f00:	00a00034 	movhi	r2,32768
81106f04:	10824c04 	addi	r2,r2,2352
81106f08:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f0c:	010003c4 	movi	r4,15
81106f10:	112931c0 	call	8112931c <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106f14:	0007883a 	mov	r3,zero
81106f18:	00a00034 	movhi	r2,32768
81106f1c:	10824c04 	addi	r2,r2,2352
81106f20:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f24:	010003c4 	movi	r4,15
81106f28:	112931c0 	call	8112931c <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106f2c:	e0bff717 	ldw	r2,-36(fp)
81106f30:	10800044 	addi	r2,r2,1
81106f34:	e0bff715 	stw	r2,-36(fp)
81106f38:	e0bff717 	ldw	r2,-36(fp)
81106f3c:	10800090 	cmplti	r2,r2,2
81106f40:	103fd91e 	bne	r2,zero,81106ea8 <__reset+0xfb0e6ea8>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106f44:	e03ff715 	stw	zero,-36(fp)
81106f48:	00002406 	br	81106fdc <POWER_SPI_RW+0x2a4>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106f4c:	e0bff403 	ldbu	r2,-48(fp)
81106f50:	10803fcc 	andi	r2,r2,255
81106f54:	1004d1fa 	srli	r2,r2,7
81106f58:	10c03fcc 	andi	r3,r2,255
81106f5c:	00a00034 	movhi	r2,32768
81106f60:	10825004 	addi	r2,r2,2368
81106f64:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106f68:	e0bff403 	ldbu	r2,-48(fp)
81106f6c:	1085883a 	add	r2,r2,r2
81106f70:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81106f74:	e0bff517 	ldw	r2,-44(fp)
81106f78:	1085883a 	add	r2,r2,r2
81106f7c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106f80:	00a00034 	movhi	r2,32768
81106f84:	10825404 	addi	r2,r2,2384
81106f88:	10800037 	ldwio	r2,0(r2)
81106f8c:	1080004c 	andi	r2,r2,1
81106f90:	1007883a 	mov	r3,r2
81106f94:	e0bff517 	ldw	r2,-44(fp)
81106f98:	10c4b03a 	or	r2,r2,r3
81106f9c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106fa0:	00c00044 	movi	r3,1
81106fa4:	00a00034 	movhi	r2,32768
81106fa8:	10824c04 	addi	r2,r2,2352
81106fac:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fb0:	010003c4 	movi	r4,15
81106fb4:	112931c0 	call	8112931c <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106fb8:	0007883a 	mov	r3,zero
81106fbc:	00a00034 	movhi	r2,32768
81106fc0:	10824c04 	addi	r2,r2,2352
81106fc4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fc8:	010003c4 	movi	r4,15
81106fcc:	112931c0 	call	8112931c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106fd0:	e0bff717 	ldw	r2,-36(fp)
81106fd4:	10800044 	addi	r2,r2,1
81106fd8:	e0bff715 	stw	r2,-36(fp)
81106fdc:	e0bff717 	ldw	r2,-36(fp)
81106fe0:	10800210 	cmplti	r2,r2,8
81106fe4:	103fd91e 	bne	r2,zero,81106f4c <__reset+0xfb0e6f4c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106fe8:	e03ff715 	stw	zero,-36(fp)
81106fec:	00001a06 	br	81107058 <POWER_SPI_RW+0x320>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81106ff0:	e0bff517 	ldw	r2,-44(fp)
81106ff4:	1085883a 	add	r2,r2,r2
81106ff8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106ffc:	00a00034 	movhi	r2,32768
81107000:	10825404 	addi	r2,r2,2384
81107004:	10800037 	ldwio	r2,0(r2)
81107008:	1080004c 	andi	r2,r2,1
8110700c:	1007883a 	mov	r3,r2
81107010:	e0bff517 	ldw	r2,-44(fp)
81107014:	10c4b03a 	or	r2,r2,r3
81107018:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110701c:	00c00044 	movi	r3,1
81107020:	00a00034 	movhi	r2,32768
81107024:	10824c04 	addi	r2,r2,2352
81107028:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110702c:	010003c4 	movi	r4,15
81107030:	112931c0 	call	8112931c <usleep>
		SPI_SCK(0); //sck=0; // clock low
81107034:	0007883a 	mov	r3,zero
81107038:	00a00034 	movhi	r2,32768
8110703c:	10824c04 	addi	r2,r2,2352
81107040:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107044:	010003c4 	movi	r4,15
81107048:	112931c0 	call	8112931c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
8110704c:	e0bff717 	ldw	r2,-36(fp)
81107050:	10800044 	addi	r2,r2,1
81107054:	e0bff715 	stw	r2,-36(fp)
81107058:	e0bff717 	ldw	r2,-36(fp)
8110705c:	10800210 	cmplti	r2,r2,8
81107060:	103fe31e 	bne	r2,zero,81106ff0 <__reset+0xfb0e6ff0>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81107064:	e03ff715 	stw	zero,-36(fp)
81107068:	00001a06 	br	811070d4 <POWER_SPI_RW+0x39c>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
8110706c:	e0bff517 	ldw	r2,-44(fp)
81107070:	1085883a 	add	r2,r2,r2
81107074:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81107078:	00a00034 	movhi	r2,32768
8110707c:	10825404 	addi	r2,r2,2384
81107080:	10800037 	ldwio	r2,0(r2)
81107084:	1080004c 	andi	r2,r2,1
81107088:	1007883a 	mov	r3,r2
8110708c:	e0bff517 	ldw	r2,-44(fp)
81107090:	10c4b03a 	or	r2,r2,r3
81107094:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107098:	00c00044 	movi	r3,1
8110709c:	00a00034 	movhi	r2,32768
811070a0:	10824c04 	addi	r2,r2,2352
811070a4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070a8:	010003c4 	movi	r4,15
811070ac:	112931c0 	call	8112931c <usleep>
		SPI_SCK(0); //sck=0; // clock low
811070b0:	0007883a 	mov	r3,zero
811070b4:	00a00034 	movhi	r2,32768
811070b8:	10824c04 	addi	r2,r2,2352
811070bc:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070c0:	010003c4 	movi	r4,15
811070c4:	112931c0 	call	8112931c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
811070c8:	e0bff717 	ldw	r2,-36(fp)
811070cc:	10800044 	addi	r2,r2,1
811070d0:	e0bff715 	stw	r2,-36(fp)
811070d4:	e0bff717 	ldw	r2,-36(fp)
811070d8:	10800210 	cmplti	r2,r2,8
811070dc:	103fe31e 	bne	r2,zero,8110706c <__reset+0xfb0e706c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811070e0:	e03ff715 	stw	zero,-36(fp)
811070e4:	00001a06 	br	81107150 <POWER_SPI_RW+0x418>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
811070e8:	e0bff517 	ldw	r2,-44(fp)
811070ec:	1085883a 	add	r2,r2,r2
811070f0:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
811070f4:	00a00034 	movhi	r2,32768
811070f8:	10825404 	addi	r2,r2,2384
811070fc:	10800037 	ldwio	r2,0(r2)
81107100:	1080004c 	andi	r2,r2,1
81107104:	1007883a 	mov	r3,r2
81107108:	e0bff517 	ldw	r2,-44(fp)
8110710c:	10c4b03a 	or	r2,r2,r3
81107110:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107114:	00c00044 	movi	r3,1
81107118:	00a00034 	movhi	r2,32768
8110711c:	10824c04 	addi	r2,r2,2352
81107120:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107124:	010003c4 	movi	r4,15
81107128:	112931c0 	call	8112931c <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110712c:	0007883a 	mov	r3,zero
81107130:	00a00034 	movhi	r2,32768
81107134:	10824c04 	addi	r2,r2,2352
81107138:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110713c:	010003c4 	movi	r4,15
81107140:	112931c0 	call	8112931c <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
81107144:	e0bff717 	ldw	r2,-36(fp)
81107148:	10800044 	addi	r2,r2,1
8110714c:	e0bff715 	stw	r2,-36(fp)
81107150:	e0bff717 	ldw	r2,-36(fp)
81107154:	10800190 	cmplti	r2,r2,6
81107158:	103fe31e 	bne	r2,zero,811070e8 <__reset+0xfb0e70e8>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
8110715c:	00c00044 	movi	r3,1
81107160:	00a00034 	movhi	r2,32768
81107164:	10824c04 	addi	r2,r2,2352
81107168:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
8110716c:	010003c4 	movi	r4,15
81107170:	112931c0 	call	8112931c <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
81107174:	00c000c4 	movi	r3,3
81107178:	00a00034 	movhi	r2,32768
8110717c:	10824804 	addi	r2,r2,2336
81107180:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
81107184:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81107188:	00800044 	movi	r2,1
8110718c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81107190:	e03ff715 	stw	zero,-36(fp)
81107194:	00000d06 	br	811071cc <POWER_SPI_RW+0x494>
		if ((Value32 & Mask32) == 0x00) {
81107198:	e0fff517 	ldw	r3,-44(fp)
8110719c:	e0bff617 	ldw	r2,-40(fp)
811071a0:	1884703a 	and	r2,r3,r2
811071a4:	1000031e 	bne	r2,zero,811071b4 <POWER_SPI_RW+0x47c>
			nZeroCnt++;
811071a8:	e0bff917 	ldw	r2,-28(fp)
811071ac:	10800044 	addi	r2,r2,1
811071b0:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
811071b4:	e0bff617 	ldw	r2,-40(fp)
811071b8:	1085883a 	add	r2,r2,r2
811071bc:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
811071c0:	e0bff717 	ldw	r2,-36(fp)
811071c4:	10800044 	addi	r2,r2,1
811071c8:	e0bff715 	stw	r2,-36(fp)
811071cc:	e0bff717 	ldw	r2,-36(fp)
811071d0:	10800810 	cmplti	r2,r2,32
811071d4:	103ff01e 	bne	r2,zero,81107198 <__reset+0xfb0e7198>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
811071d8:	e0bff917 	ldw	r2,-28(fp)
811071dc:	1080004c 	andi	r2,r2,1
811071e0:	1005003a 	cmpeq	r2,r2,zero
811071e4:	10803fcc 	andi	r2,r2,255
811071e8:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
811071ec:	e0bffb17 	ldw	r2,-20(fp)
811071f0:	1000021e 	bne	r2,zero,811071fc <POWER_SPI_RW+0x4c4>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
811071f4:	0005883a 	mov	r2,zero
811071f8:	00000406 	br	8110720c <POWER_SPI_RW+0x4d4>
	}

	*pValue = Value32;
811071fc:	e0800317 	ldw	r2,12(fp)
81107200:	e0fff517 	ldw	r3,-44(fp)
81107204:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81107208:	e0bffb17 	ldw	r2,-20(fp)
}
8110720c:	e037883a 	mov	sp,fp
81107210:	dfc00117 	ldw	ra,4(sp)
81107214:	df000017 	ldw	fp,0(sp)
81107218:	dec00204 	addi	sp,sp,8
8110721c:	f800283a 	ret

81107220 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
81107220:	defffc04 	addi	sp,sp,-16
81107224:	de00012e 	bgeu	sp,et,8110722c <vRstcSimucamReset+0xc>
81107228:	003b68fa 	trap	3
8110722c:	dfc00315 	stw	ra,12(sp)
81107230:	df000215 	stw	fp,8(sp)
81107234:	df000204 	addi	fp,sp,8
81107238:	2005883a 	mov	r2,r4
8110723c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
81107240:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
81107244:	e0bfff0b 	ldhu	r2,-4(fp)
81107248:	e0fffe17 	ldw	r3,-8(fp)
8110724c:	1884b03a 	or	r2,r3,r2
81107250:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
81107254:	e0bffe17 	ldw	r2,-8(fp)
81107258:	10800074 	orhi	r2,r2,1
8110725c:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107260:	e1bffe17 	ldw	r6,-8(fp)
81107264:	000b883a 	mov	r5,zero
81107268:	01200034 	movhi	r4,32768
8110726c:	21020004 	addi	r4,r4,2048
81107270:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81107274:	0001883a 	nop
81107278:	e037883a 	mov	sp,fp
8110727c:	dfc00117 	ldw	ra,4(sp)
81107280:	df000017 	ldw	fp,0(sp)
81107284:	dec00204 	addi	sp,sp,8
81107288:	f800283a 	ret

8110728c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110728c:	defffc04 	addi	sp,sp,-16
81107290:	de00012e 	bgeu	sp,et,81107298 <vRstcReleaseDeviceReset+0xc>
81107294:	003b68fa 	trap	3
81107298:	dfc00315 	stw	ra,12(sp)
8110729c:	df000215 	stw	fp,8(sp)
811072a0:	df000204 	addi	fp,sp,8
811072a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811072a8:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072ac:	01400044 	movi	r5,1
811072b0:	01200034 	movhi	r4,32768
811072b4:	21020004 	addi	r4,r4,2048
811072b8:	11073c40 	call	811073c4 <uliRstReadReg>
811072bc:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
811072c0:	e0bfff17 	ldw	r2,-4(fp)
811072c4:	0084303a 	nor	r2,zero,r2
811072c8:	e0fffe17 	ldw	r3,-8(fp)
811072cc:	1884703a 	and	r2,r3,r2
811072d0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072d4:	e1bffe17 	ldw	r6,-8(fp)
811072d8:	01400044 	movi	r5,1
811072dc:	01200034 	movhi	r4,32768
811072e0:	21020004 	addi	r4,r4,2048
811072e4:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811072e8:	0001883a 	nop
811072ec:	e037883a 	mov	sp,fp
811072f0:	dfc00117 	ldw	ra,4(sp)
811072f4:	df000017 	ldw	fp,0(sp)
811072f8:	dec00204 	addi	sp,sp,8
811072fc:	f800283a 	ret

81107300 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
81107300:	defffc04 	addi	sp,sp,-16
81107304:	de00012e 	bgeu	sp,et,8110730c <vRstcHoldDeviceReset+0xc>
81107308:	003b68fa 	trap	3
8110730c:	dfc00315 	stw	ra,12(sp)
81107310:	df000215 	stw	fp,8(sp)
81107314:	df000204 	addi	fp,sp,8
81107318:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
8110731c:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107320:	01400044 	movi	r5,1
81107324:	01200034 	movhi	r4,32768
81107328:	21020004 	addi	r4,r4,2048
8110732c:	11073c40 	call	811073c4 <uliRstReadReg>
81107330:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
81107334:	e0fffe17 	ldw	r3,-8(fp)
81107338:	e0bfff17 	ldw	r2,-4(fp)
8110733c:	1884b03a 	or	r2,r3,r2
81107340:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107344:	e1bffe17 	ldw	r6,-8(fp)
81107348:	01400044 	movi	r5,1
8110734c:	01200034 	movhi	r4,32768
81107350:	21020004 	addi	r4,r4,2048
81107354:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81107358:	0001883a 	nop
8110735c:	e037883a 	mov	sp,fp
81107360:	dfc00117 	ldw	ra,4(sp)
81107364:	df000017 	ldw	fp,0(sp)
81107368:	dec00204 	addi	sp,sp,8
8110736c:	f800283a 	ret

81107370 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81107370:	defffc04 	addi	sp,sp,-16
81107374:	de00012e 	bgeu	sp,et,8110737c <vRstcWriteReg+0xc>
81107378:	003b68fa 	trap	3
8110737c:	df000315 	stw	fp,12(sp)
81107380:	df000304 	addi	fp,sp,12
81107384:	e13ffd15 	stw	r4,-12(fp)
81107388:	e17ffe15 	stw	r5,-8(fp)
8110738c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81107390:	e0bffe17 	ldw	r2,-8(fp)
81107394:	1085883a 	add	r2,r2,r2
81107398:	1085883a 	add	r2,r2,r2
8110739c:	1007883a 	mov	r3,r2
811073a0:	e0bffd17 	ldw	r2,-12(fp)
811073a4:	10c5883a 	add	r2,r2,r3
811073a8:	e0ffff17 	ldw	r3,-4(fp)
811073ac:	10c00015 	stw	r3,0(r2)
}
811073b0:	0001883a 	nop
811073b4:	e037883a 	mov	sp,fp
811073b8:	df000017 	ldw	fp,0(sp)
811073bc:	dec00104 	addi	sp,sp,4
811073c0:	f800283a 	ret

811073c4 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811073c4:	defffc04 	addi	sp,sp,-16
811073c8:	de00012e 	bgeu	sp,et,811073d0 <uliRstReadReg+0xc>
811073cc:	003b68fa 	trap	3
811073d0:	df000315 	stw	fp,12(sp)
811073d4:	df000304 	addi	fp,sp,12
811073d8:	e13ffe15 	stw	r4,-8(fp)
811073dc:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811073e0:	e0bfff17 	ldw	r2,-4(fp)
811073e4:	1085883a 	add	r2,r2,r2
811073e8:	1085883a 	add	r2,r2,r2
811073ec:	1007883a 	mov	r3,r2
811073f0:	e0bffe17 	ldw	r2,-8(fp)
811073f4:	10c5883a 	add	r2,r2,r3
811073f8:	10800017 	ldw	r2,0(r2)
811073fc:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81107400:	e0bffd17 	ldw	r2,-12(fp)
}
81107404:	e037883a 	mov	sp,fp
81107408:	df000017 	ldw	fp,0(sp)
8110740c:	dec00104 	addi	sp,sp,4
81107410:	f800283a 	ret

81107414 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
81107414:	defffe04 	addi	sp,sp,-8
81107418:	de00012e 	bgeu	sp,et,81107420 <v_spi_start+0xc>
8110741c:	003b68fa 	trap	3
81107420:	dfc00115 	stw	ra,4(sp)
81107424:	df000015 	stw	fp,0(sp)
81107428:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
8110742c:	0007883a 	mov	r3,zero
81107430:	00a00034 	movhi	r2,32768
81107434:	10823004 	addi	r2,r2,2240
81107438:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
8110743c:	0007883a 	mov	r3,zero
81107440:	00a00034 	movhi	r2,32768
81107444:	10822c04 	addi	r2,r2,2224
81107448:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110744c:	01002584 	movi	r4,150
81107450:	112931c0 	call	8112931c <usleep>
}
81107454:	0001883a 	nop
81107458:	e037883a 	mov	sp,fp
8110745c:	dfc00117 	ldw	ra,4(sp)
81107460:	df000017 	ldw	fp,0(sp)
81107464:	dec00204 	addi	sp,sp,8
81107468:	f800283a 	ret

8110746c <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
8110746c:	defffc04 	addi	sp,sp,-16
81107470:	de00012e 	bgeu	sp,et,81107478 <v_spi_send_byte+0xc>
81107474:	003b68fa 	trap	3
81107478:	dfc00315 	stw	ra,12(sp)
8110747c:	df000215 	stw	fp,8(sp)
81107480:	df000204 	addi	fp,sp,8
81107484:	2005883a 	mov	r2,r4
81107488:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110748c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81107490:	00bfe004 	movi	r2,-128
81107494:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81107498:	e03ffe05 	stb	zero,-8(fp)
8110749c:	00001b06 	br	8110750c <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
811074a0:	e0ffff03 	ldbu	r3,-4(fp)
811074a4:	e0bffe43 	ldbu	r2,-7(fp)
811074a8:	1884703a 	and	r2,r3,r2
811074ac:	10803fcc 	andi	r2,r2,255
811074b0:	1004c03a 	cmpne	r2,r2,zero
811074b4:	10c03fcc 	andi	r3,r2,255
811074b8:	00a00034 	movhi	r2,32768
811074bc:	10823404 	addi	r2,r2,2256
811074c0:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
811074c4:	e0bffe43 	ldbu	r2,-7(fp)
811074c8:	1004d07a 	srli	r2,r2,1
811074cc:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
811074d0:	00c00044 	movi	r3,1
811074d4:	00a00034 	movhi	r2,32768
811074d8:	10823004 	addi	r2,r2,2240
811074dc:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811074e0:	01002584 	movi	r4,150
811074e4:	112931c0 	call	8112931c <usleep>
        SPI_SCK(0);//sck=0; // clock low
811074e8:	0007883a 	mov	r3,zero
811074ec:	00a00034 	movhi	r2,32768
811074f0:	10823004 	addi	r2,r2,2240
811074f4:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811074f8:	01002584 	movi	r4,150
811074fc:	112931c0 	call	8112931c <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81107500:	e0bffe03 	ldbu	r2,-8(fp)
81107504:	10800044 	addi	r2,r2,1
81107508:	e0bffe05 	stb	r2,-8(fp)
8110750c:	e0bffe03 	ldbu	r2,-8(fp)
81107510:	10800230 	cmpltui	r2,r2,8
81107514:	103fe21e 	bne	r2,zero,811074a0 <__reset+0xfb0e74a0>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81107518:	0001883a 	nop
8110751c:	e037883a 	mov	sp,fp
81107520:	dfc00117 	ldw	ra,4(sp)
81107524:	df000017 	ldw	fp,0(sp)
81107528:	dec00204 	addi	sp,sp,8
8110752c:	f800283a 	ret

81107530 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
81107530:	defffd04 	addi	sp,sp,-12
81107534:	de00012e 	bgeu	sp,et,8110753c <uc_spi_get_byte+0xc>
81107538:	003b68fa 	trap	3
8110753c:	dfc00215 	stw	ra,8(sp)
81107540:	df000115 	stw	fp,4(sp)
81107544:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
81107548:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
8110754c:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
81107550:	e03fff05 	stb	zero,-4(fp)
81107554:	00001a06 	br	811075c0 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
81107558:	e0bfff43 	ldbu	r2,-3(fp)
8110755c:	1085883a 	add	r2,r2,r2
81107560:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
81107564:	00a00034 	movhi	r2,32768
81107568:	10823804 	addi	r2,r2,2272
8110756c:	10800037 	ldwio	r2,0(r2)
81107570:	1080004c 	andi	r2,r2,1
81107574:	1007883a 	mov	r3,r2
81107578:	e0bfff43 	ldbu	r2,-3(fp)
8110757c:	1884b03a 	or	r2,r3,r2
81107580:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81107584:	00c00044 	movi	r3,1
81107588:	00a00034 	movhi	r2,32768
8110758c:	10823004 	addi	r2,r2,2240
81107590:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107594:	01002584 	movi	r4,150
81107598:	112931c0 	call	8112931c <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110759c:	0007883a 	mov	r3,zero
811075a0:	00a00034 	movhi	r2,32768
811075a4:	10823004 	addi	r2,r2,2240
811075a8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811075ac:	01002584 	movi	r4,150
811075b0:	112931c0 	call	8112931c <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
811075b4:	e0bfff03 	ldbu	r2,-4(fp)
811075b8:	10800044 	addi	r2,r2,1
811075bc:	e0bfff05 	stb	r2,-4(fp)
811075c0:	e0bfff03 	ldbu	r2,-4(fp)
811075c4:	10800230 	cmpltui	r2,r2,8
811075c8:	103fe31e 	bne	r2,zero,81107558 <__reset+0xfb0e7558>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
811075cc:	e0bfff43 	ldbu	r2,-3(fp)
}
811075d0:	e037883a 	mov	sp,fp
811075d4:	dfc00117 	ldw	ra,4(sp)
811075d8:	df000017 	ldw	fp,0(sp)
811075dc:	dec00204 	addi	sp,sp,8
811075e0:	f800283a 	ret

811075e4 <v_spi_end>:

void v_spi_end(void){
811075e4:	defffe04 	addi	sp,sp,-8
811075e8:	de00012e 	bgeu	sp,et,811075f0 <v_spi_end+0xc>
811075ec:	003b68fa 	trap	3
811075f0:	dfc00115 	stw	ra,4(sp)
811075f4:	df000015 	stw	fp,0(sp)
811075f8:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
811075fc:	0007883a 	mov	r3,zero
81107600:	00a00034 	movhi	r2,32768
81107604:	10823004 	addi	r2,r2,2240
81107608:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110760c:	01002584 	movi	r4,150
81107610:	112931c0 	call	8112931c <usleep>
    SPI_CS_N(1);
81107614:	00c00044 	movi	r3,1
81107618:	00a00034 	movhi	r2,32768
8110761c:	10822c04 	addi	r2,r2,2224
81107620:	10c00035 	stwio	r3,0(r2)
}
81107624:	0001883a 	nop
81107628:	e037883a 	mov	sp,fp
8110762c:	dfc00117 	ldw	ra,4(sp)
81107630:	df000017 	ldw	fp,0(sp)
81107634:	dec00204 	addi	sp,sp,8
81107638:	f800283a 	ret

8110763c <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
8110763c:	defff604 	addi	sp,sp,-40
81107640:	de00012e 	bgeu	sp,et,81107648 <RTCC_SPI_R_MAC+0xc>
81107644:	003b68fa 	trap	3
81107648:	dfc00915 	stw	ra,36(sp)
8110764c:	df000815 	stw	fp,32(sp)
81107650:	df000804 	addi	fp,sp,32
81107654:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107658:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
8110765c:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
81107660:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
81107664:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
81107668:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
8110766c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81107670:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81107674:	00800084 	movi	r2,2
81107678:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110767c:	00800cc4 	movi	r2,51
81107680:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81107684:	11074140 	call	81107414 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81107688:	e0bffec3 	ldbu	r2,-5(fp)
8110768c:	1009883a 	mov	r4,r2
81107690:	110746c0 	call	8110746c <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81107694:	e0bffe83 	ldbu	r2,-6(fp)
81107698:	1009883a 	mov	r4,r2
8110769c:	110746c0 	call	8110746c <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
811076a0:	11075300 	call	81107530 <uc_spi_get_byte>
811076a4:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
811076a8:	11075300 	call	81107530 <uc_spi_get_byte>
811076ac:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
811076b0:	11075300 	call	81107530 <uc_spi_get_byte>
811076b4:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
811076b8:	11075300 	call	81107530 <uc_spi_get_byte>
811076bc:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
811076c0:	11075300 	call	81107530 <uc_spi_get_byte>
811076c4:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
811076c8:	11075300 	call	81107530 <uc_spi_get_byte>
811076cc:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
811076d0:	11075e40 	call	811075e4 <v_spi_end>

    bSuccess = TRUE;
811076d4:	00800044 	movi	r2,1
811076d8:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
811076dc:	e0bfff17 	ldw	r2,-4(fp)
811076e0:	e0fffd03 	ldbu	r3,-12(fp)
811076e4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
811076e8:	e0bfff17 	ldw	r2,-4(fp)
811076ec:	10800044 	addi	r2,r2,1
811076f0:	e0fffd43 	ldbu	r3,-11(fp)
811076f4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
811076f8:	e0bfff17 	ldw	r2,-4(fp)
811076fc:	10800084 	addi	r2,r2,2
81107700:	e0fffd83 	ldbu	r3,-10(fp)
81107704:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81107708:	e0bfff17 	ldw	r2,-4(fp)
8110770c:	108000c4 	addi	r2,r2,3
81107710:	e0fffdc3 	ldbu	r3,-9(fp)
81107714:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
81107718:	e0bfff17 	ldw	r2,-4(fp)
8110771c:	10800104 	addi	r2,r2,4
81107720:	e0fffe03 	ldbu	r3,-8(fp)
81107724:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
81107728:	e0bfff17 	ldw	r2,-4(fp)
8110772c:	10800144 	addi	r2,r2,5
81107730:	e0fffe43 	ldbu	r3,-7(fp)
81107734:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
81107738:	e1bffd03 	ldbu	r6,-12(fp)
8110773c:	e1fffd43 	ldbu	r7,-11(fp)
81107740:	e0bffd83 	ldbu	r2,-10(fp)
81107744:	e0fffdc3 	ldbu	r3,-9(fp)
81107748:	e13ffe03 	ldbu	r4,-8(fp)
8110774c:	e17ffe43 	ldbu	r5,-7(fp)
81107750:	d9400315 	stw	r5,12(sp)
81107754:	d9000215 	stw	r4,8(sp)
81107758:	d8c00115 	stw	r3,4(sp)
8110775c:	d8800015 	stw	r2,0(sp)
81107760:	01604534 	movhi	r5,33044
81107764:	29778e04 	addi	r5,r5,-8648
81107768:	01204534 	movhi	r4,33044
8110776c:	210b7204 	addi	r4,r4,11720
81107770:	11139940 	call	81113994 <sprintf>
	debug(fp, cDebugBuffer);
81107774:	d0a04f17 	ldw	r2,-32452(gp)
81107778:	01604534 	movhi	r5,33044
8110777c:	294b7204 	addi	r5,r5,11720
81107780:	1009883a 	mov	r4,r2
81107784:	11120040 	call	81112004 <fprintf>
#endif

    return bSuccess;
81107788:	e0bffc17 	ldw	r2,-16(fp)
}
8110778c:	e037883a 	mov	sp,fp
81107790:	dfc00117 	ldw	ra,4(sp)
81107794:	df000017 	ldw	fp,0(sp)
81107798:	dec00204 	addi	sp,sp,8
8110779c:	f800283a 	ret

811077a0 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
811077a0:	defffd04 	addi	sp,sp,-12
811077a4:	de00012e 	bgeu	sp,et,811077ac <bSSDisplayConfig+0xc>
811077a8:	003b68fa 	trap	3
811077ac:	df000215 	stw	fp,8(sp)
811077b0:	df000204 	addi	fp,sp,8
811077b4:	2005883a 	mov	r2,r4
811077b8:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
811077bc:	e0bfff03 	ldbu	r2,-4(fp)
811077c0:	10c00168 	cmpgeui	r3,r2,5
811077c4:	18001c1e 	bne	r3,zero,81107838 <bSSDisplayConfig+0x98>
811077c8:	100690ba 	slli	r3,r2,2
811077cc:	00a04434 	movhi	r2,33040
811077d0:	109df804 	addi	r2,r2,30688
811077d4:	1885883a 	add	r2,r3,r2
811077d8:	10800017 	ldw	r2,0(r2)
811077dc:	1000683a 	jmp	r2
811077e0:	811077f4 	orhi	r4,r16,16863
811077e4:	81107800 	call	88110780 <__reset+0x20f0780>
811077e8:	8110780c 	andi	r4,r16,16864
811077ec:	81107820 	cmpeqi	r4,r16,16864
811077f0:	81107830 	cmpltui	r4,r16,16864
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
811077f4:	00800cc4 	movi	r2,51
811077f8:	d0a04645 	stb	r2,-32487(gp)
	    break;
811077fc:	00001006 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81107800:	00801544 	movi	r2,85
81107804:	d0a04645 	stb	r2,-32487(gp)
	    break;
81107808:	00000d06 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110780c:	d0e04643 	ldbu	r3,-32487(gp)
81107810:	00bff744 	movi	r2,-35
81107814:	1884703a 	and	r2,r3,r2
81107818:	d0a04645 	stb	r2,-32487(gp)
	    break;
8110781c:	00000806 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81107820:	d0a04643 	ldbu	r2,-32487(gp)
81107824:	10800894 	ori	r2,r2,34
81107828:	d0a04645 	stb	r2,-32487(gp)
	    break;
8110782c:	00000406 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81107830:	d0204645 	stb	zero,-32487(gp)
	    break;
81107834:	00000206 	br	81107840 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
81107838:	0005883a 	mov	r2,zero
8110783c:	00000806 	br	81107860 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
81107840:	00a00034 	movhi	r2,32768
81107844:	10828404 	addi	r2,r2,2576
81107848:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
8110784c:	d0a04643 	ldbu	r2,-32487(gp)
81107850:	10c03fcc 	andi	r3,r2,255
81107854:	e0bffe17 	ldw	r2,-8(fp)
81107858:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110785c:	00800044 	movi	r2,1
}
81107860:	e037883a 	mov	sp,fp
81107864:	df000017 	ldw	fp,0(sp)
81107868:	dec00104 	addi	sp,sp,4
8110786c:	f800283a 	ret

81107870 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81107870:	defffd04 	addi	sp,sp,-12
81107874:	de00012e 	bgeu	sp,et,8110787c <bSSDisplayUpdate+0xc>
81107878:	003b68fa 	trap	3
8110787c:	df000215 	stw	fp,8(sp)
81107880:	df000204 	addi	fp,sp,8
81107884:	2005883a 	mov	r2,r4
81107888:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110788c:	00a00034 	movhi	r2,32768
81107890:	10828404 	addi	r2,r2,2576
81107894:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81107898:	e0bffe17 	ldw	r2,-8(fp)
8110789c:	10800104 	addi	r2,r2,4
811078a0:	e0ffff03 	ldbu	r3,-4(fp)
811078a4:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811078a8:	00800044 	movi	r2,1
}
811078ac:	e037883a 	mov	sp,fp
811078b0:	df000017 	ldw	fp,0(sp)
811078b4:	dec00104 	addi	sp,sp,4
811078b8:	f800283a 	ret

811078bc <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
811078bc:	defffd04 	addi	sp,sp,-12
811078c0:	de00012e 	bgeu	sp,et,811078c8 <vSyncHandleIrq+0xc>
811078c4:	003b68fa 	trap	3
811078c8:	df000215 	stw	fp,8(sp)
811078cc:	df000204 	addi	fp,sp,8
811078d0:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811078d4:	e0bfff17 	ldw	r2,-4(fp)
811078d8:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
811078dc:	d0a04803 	ldbu	r2,-32480(gp)
811078e0:	10800044 	addi	r2,r2,1
811078e4:	d0a04805 	stb	r2,-32480(gp)
}
811078e8:	0001883a 	nop
811078ec:	e037883a 	mov	sp,fp
811078f0:	df000017 	ldw	fp,0(sp)
811078f4:	dec00104 	addi	sp,sp,4
811078f8:	f800283a 	ret

811078fc <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
811078fc:	defffd04 	addi	sp,sp,-12
81107900:	de00012e 	bgeu	sp,et,81107908 <vSyncInitIrq+0xc>
81107904:	003b68fa 	trap	3
81107908:	dfc00215 	stw	ra,8(sp)
8110790c:	df000115 	stw	fp,4(sp)
81107910:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
81107914:	d0a04704 	addi	r2,gp,-32484
81107918:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
8110791c:	01a04434 	movhi	r6,33040
81107920:	319e2f04 	addi	r6,r6,30908
81107924:	e17fff17 	ldw	r5,-4(fp)
81107928:	01000284 	movi	r4,10
8110792c:	1127c0c0 	call	81127c0c <alt_irq_register>
}
81107930:	0001883a 	nop
81107934:	e037883a 	mov	sp,fp
81107938:	dfc00117 	ldw	ra,4(sp)
8110793c:	df000017 	ldw	fp,0(sp)
81107940:	dec00204 	addi	sp,sp,8
81107944:	f800283a 	ret

81107948 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
81107948:	defffc04 	addi	sp,sp,-16
8110794c:	de00012e 	bgeu	sp,et,81107954 <bSyncStatusExtnIrq+0xc>
81107950:	003b68fa 	trap	3
81107954:	dfc00315 	stw	ra,12(sp)
81107958:	df000215 	stw	fp,8(sp)
8110795c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107960:	0009883a 	mov	r4,zero
81107964:	11086f80 	call	811086f8 <uliSyncReadReg>
81107968:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
8110796c:	e0bfff17 	ldw	r2,-4(fp)
81107970:	1000030e 	bge	r2,zero,81107980 <bSyncStatusExtnIrq+0x38>
		bResult = TRUE;
81107974:	00800044 	movi	r2,1
81107978:	e0bffe15 	stw	r2,-8(fp)
8110797c:	00000106 	br	81107984 <bSyncStatusExtnIrq+0x3c>
	} else {
		bResult = FALSE;
81107980:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107984:	e0bffe17 	ldw	r2,-8(fp)
}
81107988:	e037883a 	mov	sp,fp
8110798c:	dfc00117 	ldw	ra,4(sp)
81107990:	df000017 	ldw	fp,0(sp)
81107994:	dec00204 	addi	sp,sp,8
81107998:	f800283a 	ret

8110799c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110799c:	defffc04 	addi	sp,sp,-16
811079a0:	de00012e 	bgeu	sp,et,811079a8 <ucSyncStatusState+0xc>
811079a4:	003b68fa 	trap	3
811079a8:	dfc00315 	stw	ra,12(sp)
811079ac:	df000215 	stw	fp,8(sp)
811079b0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811079b4:	0009883a 	mov	r4,zero
811079b8:	11086f80 	call	811086f8 <uliSyncReadReg>
811079bc:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
811079c0:	e0bffe17 	ldw	r2,-8(fp)
811079c4:	10803fec 	andhi	r2,r2,255
811079c8:	1004d43a 	srli	r2,r2,16
811079cc:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079d0:	e0bfff03 	ldbu	r2,-4(fp)
}
811079d4:	e037883a 	mov	sp,fp
811079d8:	dfc00117 	ldw	ra,4(sp)
811079dc:	df000017 	ldw	fp,0(sp)
811079e0:	dec00204 	addi	sp,sp,8
811079e4:	f800283a 	ret

811079e8 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
811079e8:	defffc04 	addi	sp,sp,-16
811079ec:	de00012e 	bgeu	sp,et,811079f4 <ucSyncStatusErrorCode+0xc>
811079f0:	003b68fa 	trap	3
811079f4:	dfc00315 	stw	ra,12(sp)
811079f8:	df000215 	stw	fp,8(sp)
811079fc:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107a00:	0009883a 	mov	r4,zero
81107a04:	11086f80 	call	811086f8 <uliSyncReadReg>
81107a08:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
81107a0c:	e0bffe17 	ldw	r2,-8(fp)
81107a10:	10bfc00c 	andi	r2,r2,65280
81107a14:	1004d23a 	srli	r2,r2,8
81107a18:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107a1c:	e0bfff03 	ldbu	r2,-4(fp)
}
81107a20:	e037883a 	mov	sp,fp
81107a24:	dfc00117 	ldw	ra,4(sp)
81107a28:	df000017 	ldw	fp,0(sp)
81107a2c:	dec00204 	addi	sp,sp,8
81107a30:	f800283a 	ret

81107a34 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
81107a34:	defffc04 	addi	sp,sp,-16
81107a38:	de00012e 	bgeu	sp,et,81107a40 <ucSyncStatusCycleNumber+0xc>
81107a3c:	003b68fa 	trap	3
81107a40:	dfc00315 	stw	ra,12(sp)
81107a44:	df000215 	stw	fp,8(sp)
81107a48:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107a4c:	0009883a 	mov	r4,zero
81107a50:	11086f80 	call	811086f8 <uliSyncReadReg>
81107a54:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
81107a58:	e0bffe17 	ldw	r2,-8(fp)
81107a5c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107a60:	e0bfff03 	ldbu	r2,-4(fp)
}
81107a64:	e037883a 	mov	sp,fp
81107a68:	dfc00117 	ldw	ra,4(sp)
81107a6c:	df000017 	ldw	fp,0(sp)
81107a70:	dec00204 	addi	sp,sp,8
81107a74:	f800283a 	ret

81107a78 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81107a78:	defffd04 	addi	sp,sp,-12
81107a7c:	de00012e 	bgeu	sp,et,81107a84 <bSyncSetMbt+0xc>
81107a80:	003b68fa 	trap	3
81107a84:	dfc00215 	stw	ra,8(sp)
81107a88:	df000115 	stw	fp,4(sp)
81107a8c:	df000104 	addi	fp,sp,4
81107a90:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107a94:	e17fff17 	ldw	r5,-4(fp)
81107a98:	01000104 	movi	r4,4
81107a9c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107aa0:	00800044 	movi	r2,1
}
81107aa4:	e037883a 	mov	sp,fp
81107aa8:	dfc00117 	ldw	ra,4(sp)
81107aac:	df000017 	ldw	fp,0(sp)
81107ab0:	dec00204 	addi	sp,sp,8
81107ab4:	f800283a 	ret

81107ab8 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107ab8:	defffd04 	addi	sp,sp,-12
81107abc:	de00012e 	bgeu	sp,et,81107ac4 <bSyncSetBt+0xc>
81107ac0:	003b68fa 	trap	3
81107ac4:	dfc00215 	stw	ra,8(sp)
81107ac8:	df000115 	stw	fp,4(sp)
81107acc:	df000104 	addi	fp,sp,4
81107ad0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
81107ad4:	e17fff17 	ldw	r5,-4(fp)
81107ad8:	01000144 	movi	r4,5
81107adc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107ae0:	00800044 	movi	r2,1
}
81107ae4:	e037883a 	mov	sp,fp
81107ae8:	dfc00117 	ldw	ra,4(sp)
81107aec:	df000017 	ldw	fp,0(sp)
81107af0:	dec00204 	addi	sp,sp,8
81107af4:	f800283a 	ret

81107af8 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107af8:	defffd04 	addi	sp,sp,-12
81107afc:	de00012e 	bgeu	sp,et,81107b04 <bSyncSetPer+0xc>
81107b00:	003b68fa 	trap	3
81107b04:	dfc00215 	stw	ra,8(sp)
81107b08:	df000115 	stw	fp,4(sp)
81107b0c:	df000104 	addi	fp,sp,4
81107b10:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107b14:	e17fff17 	ldw	r5,-4(fp)
81107b18:	01000184 	movi	r4,6
81107b1c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107b20:	00800044 	movi	r2,1
}
81107b24:	e037883a 	mov	sp,fp
81107b28:	dfc00117 	ldw	ra,4(sp)
81107b2c:	df000017 	ldw	fp,0(sp)
81107b30:	dec00204 	addi	sp,sp,8
81107b34:	f800283a 	ret

81107b38 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107b38:	defffd04 	addi	sp,sp,-12
81107b3c:	de00012e 	bgeu	sp,et,81107b44 <bSyncSetOst+0xc>
81107b40:	003b68fa 	trap	3
81107b44:	dfc00215 	stw	ra,8(sp)
81107b48:	df000115 	stw	fp,4(sp)
81107b4c:	df000104 	addi	fp,sp,4
81107b50:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
81107b54:	e17fff17 	ldw	r5,-4(fp)
81107b58:	010001c4 	movi	r4,7
81107b5c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107b60:	00800044 	movi	r2,1
}
81107b64:	e037883a 	mov	sp,fp
81107b68:	dfc00117 	ldw	ra,4(sp)
81107b6c:	df000017 	ldw	fp,0(sp)
81107b70:	dec00204 	addi	sp,sp,8
81107b74:	f800283a 	ret

81107b78 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
81107b78:	defffc04 	addi	sp,sp,-16
81107b7c:	de00012e 	bgeu	sp,et,81107b84 <bSyncSetPolarity+0xc>
81107b80:	003b68fa 	trap	3
81107b84:	dfc00315 	stw	ra,12(sp)
81107b88:	df000215 	stw	fp,8(sp)
81107b8c:	df000204 	addi	fp,sp,8
81107b90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b94:	01000204 	movi	r4,8
81107b98:	11086f80 	call	811086f8 <uliSyncReadReg>
81107b9c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107ba0:	e0bfff17 	ldw	r2,-4(fp)
81107ba4:	1000051e 	bne	r2,zero,81107bbc <bSyncSetPolarity+0x44>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
81107ba8:	e0fffe17 	ldw	r3,-8(fp)
81107bac:	00bfbfc4 	movi	r2,-257
81107bb0:	1884703a 	and	r2,r3,r2
81107bb4:	e0bffe15 	stw	r2,-8(fp)
81107bb8:	00000306 	br	81107bc8 <bSyncSetPolarity+0x50>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
81107bbc:	e0bffe17 	ldw	r2,-8(fp)
81107bc0:	10804014 	ori	r2,r2,256
81107bc4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107bc8:	e17ffe17 	ldw	r5,-8(fp)
81107bcc:	01000204 	movi	r4,8
81107bd0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107bd4:	00800044 	movi	r2,1
}
81107bd8:	e037883a 	mov	sp,fp
81107bdc:	dfc00117 	ldw	ra,4(sp)
81107be0:	df000017 	ldw	fp,0(sp)
81107be4:	dec00204 	addi	sp,sp,8
81107be8:	f800283a 	ret

81107bec <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
81107bec:	defffc04 	addi	sp,sp,-16
81107bf0:	de00012e 	bgeu	sp,et,81107bf8 <bSyncSetNCycles+0xc>
81107bf4:	003b68fa 	trap	3
81107bf8:	dfc00315 	stw	ra,12(sp)
81107bfc:	df000215 	stw	fp,8(sp)
81107c00:	df000204 	addi	fp,sp,8
81107c04:	2005883a 	mov	r2,r4
81107c08:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107c0c:	01000204 	movi	r4,8
81107c10:	11086f80 	call	811086f8 <uliSyncReadReg>
81107c14:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107c18:	e0fffe17 	ldw	r3,-8(fp)
81107c1c:	00bfc004 	movi	r2,-256
81107c20:	1884703a 	and	r2,r3,r2
81107c24:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107c28:	e0bfff03 	ldbu	r2,-4(fp)
81107c2c:	e0fffe17 	ldw	r3,-8(fp)
81107c30:	1884b03a 	or	r2,r3,r2
81107c34:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107c38:	e17ffe17 	ldw	r5,-8(fp)
81107c3c:	01000204 	movi	r4,8
81107c40:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107c44:	00800044 	movi	r2,1
}
81107c48:	e037883a 	mov	sp,fp
81107c4c:	dfc00117 	ldw	ra,4(sp)
81107c50:	df000017 	ldw	fp,0(sp)
81107c54:	dec00204 	addi	sp,sp,8
81107c58:	f800283a 	ret

81107c5c <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
81107c5c:	defffd04 	addi	sp,sp,-12
81107c60:	de00012e 	bgeu	sp,et,81107c68 <uliSyncGetMbt+0xc>
81107c64:	003b68fa 	trap	3
81107c68:	dfc00215 	stw	ra,8(sp)
81107c6c:	df000115 	stw	fp,4(sp)
81107c70:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
81107c74:	01000104 	movi	r4,4
81107c78:	11086f80 	call	811086f8 <uliSyncReadReg>
81107c7c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c80:	e0bfff17 	ldw	r2,-4(fp)
}
81107c84:	e037883a 	mov	sp,fp
81107c88:	dfc00117 	ldw	ra,4(sp)
81107c8c:	df000017 	ldw	fp,0(sp)
81107c90:	dec00204 	addi	sp,sp,8
81107c94:	f800283a 	ret

81107c98 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
81107c98:	defffd04 	addi	sp,sp,-12
81107c9c:	de00012e 	bgeu	sp,et,81107ca4 <uliSyncGetBt+0xc>
81107ca0:	003b68fa 	trap	3
81107ca4:	dfc00215 	stw	ra,8(sp)
81107ca8:	df000115 	stw	fp,4(sp)
81107cac:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
81107cb0:	01000144 	movi	r4,5
81107cb4:	11086f80 	call	811086f8 <uliSyncReadReg>
81107cb8:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cbc:	e0bfff17 	ldw	r2,-4(fp)
}
81107cc0:	e037883a 	mov	sp,fp
81107cc4:	dfc00117 	ldw	ra,4(sp)
81107cc8:	df000017 	ldw	fp,0(sp)
81107ccc:	dec00204 	addi	sp,sp,8
81107cd0:	f800283a 	ret

81107cd4 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
81107cd4:	defffd04 	addi	sp,sp,-12
81107cd8:	de00012e 	bgeu	sp,et,81107ce0 <uliSyncGetPer+0xc>
81107cdc:	003b68fa 	trap	3
81107ce0:	dfc00215 	stw	ra,8(sp)
81107ce4:	df000115 	stw	fp,4(sp)
81107ce8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
81107cec:	01000184 	movi	r4,6
81107cf0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107cf4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cf8:	e0bfff17 	ldw	r2,-4(fp)
}
81107cfc:	e037883a 	mov	sp,fp
81107d00:	dfc00117 	ldw	ra,4(sp)
81107d04:	df000017 	ldw	fp,0(sp)
81107d08:	dec00204 	addi	sp,sp,8
81107d0c:	f800283a 	ret

81107d10 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107d10:	defffd04 	addi	sp,sp,-12
81107d14:	de00012e 	bgeu	sp,et,81107d1c <uliSyncGetOst+0xc>
81107d18:	003b68fa 	trap	3
81107d1c:	dfc00215 	stw	ra,8(sp)
81107d20:	df000115 	stw	fp,4(sp)
81107d24:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107d28:	010001c4 	movi	r4,7
81107d2c:	11086f80 	call	811086f8 <uliSyncReadReg>
81107d30:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d34:	e0bfff17 	ldw	r2,-4(fp)
}
81107d38:	e037883a 	mov	sp,fp
81107d3c:	dfc00117 	ldw	ra,4(sp)
81107d40:	df000017 	ldw	fp,0(sp)
81107d44:	dec00204 	addi	sp,sp,8
81107d48:	f800283a 	ret

81107d4c <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107d4c:	defffd04 	addi	sp,sp,-12
81107d50:	de00012e 	bgeu	sp,et,81107d58 <uliSyncGetGeneral+0xc>
81107d54:	003b68fa 	trap	3
81107d58:	dfc00215 	stw	ra,8(sp)
81107d5c:	df000115 	stw	fp,4(sp)
81107d60:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107d64:	01000204 	movi	r4,8
81107d68:	11086f80 	call	811086f8 <uliSyncReadReg>
81107d6c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d70:	e0bfff17 	ldw	r2,-4(fp)
}
81107d74:	e037883a 	mov	sp,fp
81107d78:	dfc00117 	ldw	ra,4(sp)
81107d7c:	df000017 	ldw	fp,0(sp)
81107d80:	dec00204 	addi	sp,sp,8
81107d84:	f800283a 	ret

81107d88 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
81107d88:	defffd04 	addi	sp,sp,-12
81107d8c:	de00012e 	bgeu	sp,et,81107d94 <bSyncErrInj+0xc>
81107d90:	003b68fa 	trap	3
81107d94:	dfc00215 	stw	ra,8(sp)
81107d98:	df000115 	stw	fp,4(sp)
81107d9c:	df000104 	addi	fp,sp,4
81107da0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
81107da4:	e17fff17 	ldw	r5,-4(fp)
81107da8:	01000244 	movi	r4,9
81107dac:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107db0:	00800044 	movi	r2,1
}
81107db4:	e037883a 	mov	sp,fp
81107db8:	dfc00117 	ldw	ra,4(sp)
81107dbc:	df000017 	ldw	fp,0(sp)
81107dc0:	dec00204 	addi	sp,sp,8
81107dc4:	f800283a 	ret

81107dc8 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
81107dc8:	defffc04 	addi	sp,sp,-16
81107dcc:	de00012e 	bgeu	sp,et,81107dd4 <bSyncCtrExtnIrq+0xc>
81107dd0:	003b68fa 	trap	3
81107dd4:	dfc00315 	stw	ra,12(sp)
81107dd8:	df000215 	stw	fp,8(sp)
81107ddc:	df000204 	addi	fp,sp,8
81107de0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107de4:	01000284 	movi	r4,10
81107de8:	11086f80 	call	811086f8 <uliSyncReadReg>
81107dec:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107df0:	e0bfff17 	ldw	r2,-4(fp)
81107df4:	1000061e 	bne	r2,zero,81107e10 <bSyncCtrExtnIrq+0x48>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107df8:	e0fffe17 	ldw	r3,-8(fp)
81107dfc:	00a00034 	movhi	r2,32768
81107e00:	10bfffc4 	addi	r2,r2,-1
81107e04:	1884703a 	and	r2,r3,r2
81107e08:	e0bffe15 	stw	r2,-8(fp)
81107e0c:	00000306 	br	81107e1c <bSyncCtrExtnIrq+0x54>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107e10:	e0bffe17 	ldw	r2,-8(fp)
81107e14:	10a00034 	orhi	r2,r2,32768
81107e18:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e1c:	e17ffe17 	ldw	r5,-8(fp)
81107e20:	01000284 	movi	r4,10
81107e24:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107e28:	00800044 	movi	r2,1
}
81107e2c:	e037883a 	mov	sp,fp
81107e30:	dfc00117 	ldw	ra,4(sp)
81107e34:	df000017 	ldw	fp,0(sp)
81107e38:	dec00204 	addi	sp,sp,8
81107e3c:	f800283a 	ret

81107e40 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107e40:	defffd04 	addi	sp,sp,-12
81107e44:	de00012e 	bgeu	sp,et,81107e4c <bSyncCtrStart+0xc>
81107e48:	003b68fa 	trap	3
81107e4c:	dfc00215 	stw	ra,8(sp)
81107e50:	df000115 	stw	fp,4(sp)
81107e54:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e58:	01000284 	movi	r4,10
81107e5c:	11086f80 	call	811086f8 <uliSyncReadReg>
81107e60:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
81107e64:	e0bfff17 	ldw	r2,-4(fp)
81107e68:	10800234 	orhi	r2,r2,8
81107e6c:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e70:	e17fff17 	ldw	r5,-4(fp)
81107e74:	01000284 	movi	r4,10
81107e78:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107e7c:	00800044 	movi	r2,1
}
81107e80:	e037883a 	mov	sp,fp
81107e84:	dfc00117 	ldw	ra,4(sp)
81107e88:	df000017 	ldw	fp,0(sp)
81107e8c:	dec00204 	addi	sp,sp,8
81107e90:	f800283a 	ret

81107e94 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
81107e94:	defffd04 	addi	sp,sp,-12
81107e98:	de00012e 	bgeu	sp,et,81107ea0 <bSyncCtrReset+0xc>
81107e9c:	003b68fa 	trap	3
81107ea0:	dfc00215 	stw	ra,8(sp)
81107ea4:	df000115 	stw	fp,4(sp)
81107ea8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107eac:	01000284 	movi	r4,10
81107eb0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107eb4:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
81107eb8:	e0bfff17 	ldw	r2,-4(fp)
81107ebc:	10800134 	orhi	r2,r2,4
81107ec0:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107ec4:	e17fff17 	ldw	r5,-4(fp)
81107ec8:	01000284 	movi	r4,10
81107ecc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107ed0:	00800044 	movi	r2,1
}
81107ed4:	e037883a 	mov	sp,fp
81107ed8:	dfc00117 	ldw	ra,4(sp)
81107edc:	df000017 	ldw	fp,0(sp)
81107ee0:	dec00204 	addi	sp,sp,8
81107ee4:	f800283a 	ret

81107ee8 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
81107ee8:	defffd04 	addi	sp,sp,-12
81107eec:	de00012e 	bgeu	sp,et,81107ef4 <bSyncCtrOneShot+0xc>
81107ef0:	003b68fa 	trap	3
81107ef4:	dfc00215 	stw	ra,8(sp)
81107ef8:	df000115 	stw	fp,4(sp)
81107efc:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f00:	01000284 	movi	r4,10
81107f04:	11086f80 	call	811086f8 <uliSyncReadReg>
81107f08:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107f0c:	e0bfff17 	ldw	r2,-4(fp)
81107f10:	108000b4 	orhi	r2,r2,2
81107f14:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f18:	e17fff17 	ldw	r5,-4(fp)
81107f1c:	01000284 	movi	r4,10
81107f20:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107f24:	00800044 	movi	r2,1
}
81107f28:	e037883a 	mov	sp,fp
81107f2c:	dfc00117 	ldw	ra,4(sp)
81107f30:	df000017 	ldw	fp,0(sp)
81107f34:	dec00204 	addi	sp,sp,8
81107f38:	f800283a 	ret

81107f3c <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107f3c:	defffd04 	addi	sp,sp,-12
81107f40:	de00012e 	bgeu	sp,et,81107f48 <bSyncCtrErrInj+0xc>
81107f44:	003b68fa 	trap	3
81107f48:	dfc00215 	stw	ra,8(sp)
81107f4c:	df000115 	stw	fp,4(sp)
81107f50:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f54:	01000284 	movi	r4,10
81107f58:	11086f80 	call	811086f8 <uliSyncReadReg>
81107f5c:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107f60:	e0bfff17 	ldw	r2,-4(fp)
81107f64:	10800074 	orhi	r2,r2,1
81107f68:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f6c:	e17fff17 	ldw	r5,-4(fp)
81107f70:	01000284 	movi	r4,10
81107f74:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107f78:	00800044 	movi	r2,1
}
81107f7c:	e037883a 	mov	sp,fp
81107f80:	dfc00117 	ldw	ra,4(sp)
81107f84:	df000017 	ldw	fp,0(sp)
81107f88:	dec00204 	addi	sp,sp,8
81107f8c:	f800283a 	ret

81107f90 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107f90:	defffc04 	addi	sp,sp,-16
81107f94:	de00012e 	bgeu	sp,et,81107f9c <bSyncCtrSyncOutEnable+0xc>
81107f98:	003b68fa 	trap	3
81107f9c:	dfc00315 	stw	ra,12(sp)
81107fa0:	df000215 	stw	fp,8(sp)
81107fa4:	df000204 	addi	fp,sp,8
81107fa8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107fac:	01000284 	movi	r4,10
81107fb0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107fb4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107fb8:	e0bfff17 	ldw	r2,-4(fp)
81107fbc:	1000051e 	bne	r2,zero,81107fd4 <bSyncCtrSyncOutEnable+0x44>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
81107fc0:	e0fffe17 	ldw	r3,-8(fp)
81107fc4:	00bfbfc4 	movi	r2,-257
81107fc8:	1884703a 	and	r2,r3,r2
81107fcc:	e0bffe15 	stw	r2,-8(fp)
81107fd0:	00000306 	br	81107fe0 <bSyncCtrSyncOutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
81107fd4:	e0bffe17 	ldw	r2,-8(fp)
81107fd8:	10804014 	ori	r2,r2,256
81107fdc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107fe0:	e17ffe17 	ldw	r5,-8(fp)
81107fe4:	01000284 	movi	r4,10
81107fe8:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107fec:	00800044 	movi	r2,1
}
81107ff0:	e037883a 	mov	sp,fp
81107ff4:	dfc00117 	ldw	ra,4(sp)
81107ff8:	df000017 	ldw	fp,0(sp)
81107ffc:	dec00204 	addi	sp,sp,8
81108000:	f800283a 	ret

81108004 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
81108004:	defffc04 	addi	sp,sp,-16
81108008:	de00012e 	bgeu	sp,et,81108010 <bSyncCtrCh1OutEnable+0xc>
8110800c:	003b68fa 	trap	3
81108010:	dfc00315 	stw	ra,12(sp)
81108014:	df000215 	stw	fp,8(sp)
81108018:	df000204 	addi	fp,sp,8
8110801c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108020:	01000284 	movi	r4,10
81108024:	11086f80 	call	811086f8 <uliSyncReadReg>
81108028:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110802c:	e0bfff17 	ldw	r2,-4(fp)
81108030:	1000051e 	bne	r2,zero,81108048 <bSyncCtrCh1OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81108034:	e0fffe17 	ldw	r3,-8(fp)
81108038:	00bfff84 	movi	r2,-2
8110803c:	1884703a 	and	r2,r3,r2
81108040:	e0bffe15 	stw	r2,-8(fp)
81108044:	00000306 	br	81108054 <bSyncCtrCh1OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81108048:	e0bffe17 	ldw	r2,-8(fp)
8110804c:	10800054 	ori	r2,r2,1
81108050:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108054:	e17ffe17 	ldw	r5,-8(fp)
81108058:	01000284 	movi	r4,10
8110805c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108060:	00800044 	movi	r2,1
}
81108064:	e037883a 	mov	sp,fp
81108068:	dfc00117 	ldw	ra,4(sp)
8110806c:	df000017 	ldw	fp,0(sp)
81108070:	dec00204 	addi	sp,sp,8
81108074:	f800283a 	ret

81108078 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81108078:	defffc04 	addi	sp,sp,-16
8110807c:	de00012e 	bgeu	sp,et,81108084 <bSyncCtrCh2OutEnable+0xc>
81108080:	003b68fa 	trap	3
81108084:	dfc00315 	stw	ra,12(sp)
81108088:	df000215 	stw	fp,8(sp)
8110808c:	df000204 	addi	fp,sp,8
81108090:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108094:	01000284 	movi	r4,10
81108098:	11086f80 	call	811086f8 <uliSyncReadReg>
8110809c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811080a0:	e0bfff17 	ldw	r2,-4(fp)
811080a4:	1000051e 	bne	r2,zero,811080bc <bSyncCtrCh2OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
811080a8:	e0fffe17 	ldw	r3,-8(fp)
811080ac:	00bfff44 	movi	r2,-3
811080b0:	1884703a 	and	r2,r3,r2
811080b4:	e0bffe15 	stw	r2,-8(fp)
811080b8:	00000306 	br	811080c8 <bSyncCtrCh2OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
811080bc:	e0bffe17 	ldw	r2,-8(fp)
811080c0:	10800094 	ori	r2,r2,2
811080c4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811080c8:	e17ffe17 	ldw	r5,-8(fp)
811080cc:	01000284 	movi	r4,10
811080d0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811080d4:	00800044 	movi	r2,1
}
811080d8:	e037883a 	mov	sp,fp
811080dc:	dfc00117 	ldw	ra,4(sp)
811080e0:	df000017 	ldw	fp,0(sp)
811080e4:	dec00204 	addi	sp,sp,8
811080e8:	f800283a 	ret

811080ec <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
811080ec:	defffc04 	addi	sp,sp,-16
811080f0:	de00012e 	bgeu	sp,et,811080f8 <bSyncCtrCh3OutEnable+0xc>
811080f4:	003b68fa 	trap	3
811080f8:	dfc00315 	stw	ra,12(sp)
811080fc:	df000215 	stw	fp,8(sp)
81108100:	df000204 	addi	fp,sp,8
81108104:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108108:	01000284 	movi	r4,10
8110810c:	11086f80 	call	811086f8 <uliSyncReadReg>
81108110:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108114:	e0bfff17 	ldw	r2,-4(fp)
81108118:	1000051e 	bne	r2,zero,81108130 <bSyncCtrCh3OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
8110811c:	e0fffe17 	ldw	r3,-8(fp)
81108120:	00bffec4 	movi	r2,-5
81108124:	1884703a 	and	r2,r3,r2
81108128:	e0bffe15 	stw	r2,-8(fp)
8110812c:	00000306 	br	8110813c <bSyncCtrCh3OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
81108130:	e0bffe17 	ldw	r2,-8(fp)
81108134:	10800114 	ori	r2,r2,4
81108138:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110813c:	e17ffe17 	ldw	r5,-8(fp)
81108140:	01000284 	movi	r4,10
81108144:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108148:	00800044 	movi	r2,1
}
8110814c:	e037883a 	mov	sp,fp
81108150:	dfc00117 	ldw	ra,4(sp)
81108154:	df000017 	ldw	fp,0(sp)
81108158:	dec00204 	addi	sp,sp,8
8110815c:	f800283a 	ret

81108160 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
81108160:	defffc04 	addi	sp,sp,-16
81108164:	de00012e 	bgeu	sp,et,8110816c <bSyncCtrCh4OutEnable+0xc>
81108168:	003b68fa 	trap	3
8110816c:	dfc00315 	stw	ra,12(sp)
81108170:	df000215 	stw	fp,8(sp)
81108174:	df000204 	addi	fp,sp,8
81108178:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110817c:	01000284 	movi	r4,10
81108180:	11086f80 	call	811086f8 <uliSyncReadReg>
81108184:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108188:	e0bfff17 	ldw	r2,-4(fp)
8110818c:	1000051e 	bne	r2,zero,811081a4 <bSyncCtrCh4OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81108190:	e0fffe17 	ldw	r3,-8(fp)
81108194:	00bffdc4 	movi	r2,-9
81108198:	1884703a 	and	r2,r3,r2
8110819c:	e0bffe15 	stw	r2,-8(fp)
811081a0:	00000306 	br	811081b0 <bSyncCtrCh4OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
811081a4:	e0bffe17 	ldw	r2,-8(fp)
811081a8:	10800214 	ori	r2,r2,8
811081ac:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811081b0:	e17ffe17 	ldw	r5,-8(fp)
811081b4:	01000284 	movi	r4,10
811081b8:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811081bc:	00800044 	movi	r2,1
}
811081c0:	e037883a 	mov	sp,fp
811081c4:	dfc00117 	ldw	ra,4(sp)
811081c8:	df000017 	ldw	fp,0(sp)
811081cc:	dec00204 	addi	sp,sp,8
811081d0:	f800283a 	ret

811081d4 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
811081d4:	defffc04 	addi	sp,sp,-16
811081d8:	de00012e 	bgeu	sp,et,811081e0 <bSyncCtrCh5OutEnable+0xc>
811081dc:	003b68fa 	trap	3
811081e0:	dfc00315 	stw	ra,12(sp)
811081e4:	df000215 	stw	fp,8(sp)
811081e8:	df000204 	addi	fp,sp,8
811081ec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811081f0:	01000284 	movi	r4,10
811081f4:	11086f80 	call	811086f8 <uliSyncReadReg>
811081f8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811081fc:	e0bfff17 	ldw	r2,-4(fp)
81108200:	1000051e 	bne	r2,zero,81108218 <bSyncCtrCh5OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
81108204:	e0fffe17 	ldw	r3,-8(fp)
81108208:	00bffbc4 	movi	r2,-17
8110820c:	1884703a 	and	r2,r3,r2
81108210:	e0bffe15 	stw	r2,-8(fp)
81108214:	00000306 	br	81108224 <bSyncCtrCh5OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
81108218:	e0bffe17 	ldw	r2,-8(fp)
8110821c:	10800414 	ori	r2,r2,16
81108220:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108224:	e17ffe17 	ldw	r5,-8(fp)
81108228:	01000284 	movi	r4,10
8110822c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108230:	00800044 	movi	r2,1
}
81108234:	e037883a 	mov	sp,fp
81108238:	dfc00117 	ldw	ra,4(sp)
8110823c:	df000017 	ldw	fp,0(sp)
81108240:	dec00204 	addi	sp,sp,8
81108244:	f800283a 	ret

81108248 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
81108248:	defffc04 	addi	sp,sp,-16
8110824c:	de00012e 	bgeu	sp,et,81108254 <bSyncCtrCh6OutEnable+0xc>
81108250:	003b68fa 	trap	3
81108254:	dfc00315 	stw	ra,12(sp)
81108258:	df000215 	stw	fp,8(sp)
8110825c:	df000204 	addi	fp,sp,8
81108260:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108264:	01000284 	movi	r4,10
81108268:	11086f80 	call	811086f8 <uliSyncReadReg>
8110826c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108270:	e0bfff17 	ldw	r2,-4(fp)
81108274:	1000051e 	bne	r2,zero,8110828c <bSyncCtrCh6OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81108278:	e0fffe17 	ldw	r3,-8(fp)
8110827c:	00bff7c4 	movi	r2,-33
81108280:	1884703a 	and	r2,r3,r2
81108284:	e0bffe15 	stw	r2,-8(fp)
81108288:	00000306 	br	81108298 <bSyncCtrCh6OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110828c:	e0bffe17 	ldw	r2,-8(fp)
81108290:	10800814 	ori	r2,r2,32
81108294:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108298:	e17ffe17 	ldw	r5,-8(fp)
8110829c:	01000284 	movi	r4,10
811082a0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811082a4:	00800044 	movi	r2,1
}
811082a8:	e037883a 	mov	sp,fp
811082ac:	dfc00117 	ldw	ra,4(sp)
811082b0:	df000017 	ldw	fp,0(sp)
811082b4:	dec00204 	addi	sp,sp,8
811082b8:	f800283a 	ret

811082bc <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
811082bc:	defffc04 	addi	sp,sp,-16
811082c0:	de00012e 	bgeu	sp,et,811082c8 <bSyncCtrCh7OutEnable+0xc>
811082c4:	003b68fa 	trap	3
811082c8:	dfc00315 	stw	ra,12(sp)
811082cc:	df000215 	stw	fp,8(sp)
811082d0:	df000204 	addi	fp,sp,8
811082d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811082d8:	01000284 	movi	r4,10
811082dc:	11086f80 	call	811086f8 <uliSyncReadReg>
811082e0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811082e4:	e0bfff17 	ldw	r2,-4(fp)
811082e8:	1000051e 	bne	r2,zero,81108300 <bSyncCtrCh7OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
811082ec:	e0fffe17 	ldw	r3,-8(fp)
811082f0:	00bfefc4 	movi	r2,-65
811082f4:	1884703a 	and	r2,r3,r2
811082f8:	e0bffe15 	stw	r2,-8(fp)
811082fc:	00000306 	br	8110830c <bSyncCtrCh7OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
81108300:	e0bffe17 	ldw	r2,-8(fp)
81108304:	10801014 	ori	r2,r2,64
81108308:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110830c:	e17ffe17 	ldw	r5,-8(fp)
81108310:	01000284 	movi	r4,10
81108314:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108318:	00800044 	movi	r2,1
}
8110831c:	e037883a 	mov	sp,fp
81108320:	dfc00117 	ldw	ra,4(sp)
81108324:	df000017 	ldw	fp,0(sp)
81108328:	dec00204 	addi	sp,sp,8
8110832c:	f800283a 	ret

81108330 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
81108330:	defffc04 	addi	sp,sp,-16
81108334:	de00012e 	bgeu	sp,et,8110833c <bSyncCtrCh8OutEnable+0xc>
81108338:	003b68fa 	trap	3
8110833c:	dfc00315 	stw	ra,12(sp)
81108340:	df000215 	stw	fp,8(sp)
81108344:	df000204 	addi	fp,sp,8
81108348:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110834c:	01000284 	movi	r4,10
81108350:	11086f80 	call	811086f8 <uliSyncReadReg>
81108354:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108358:	e0bfff17 	ldw	r2,-4(fp)
8110835c:	1000051e 	bne	r2,zero,81108374 <bSyncCtrCh8OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
81108360:	e0fffe17 	ldw	r3,-8(fp)
81108364:	00bfdfc4 	movi	r2,-129
81108368:	1884703a 	and	r2,r3,r2
8110836c:	e0bffe15 	stw	r2,-8(fp)
81108370:	00000306 	br	81108380 <bSyncCtrCh8OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
81108374:	e0bffe17 	ldw	r2,-8(fp)
81108378:	10802014 	ori	r2,r2,128
8110837c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108380:	e17ffe17 	ldw	r5,-8(fp)
81108384:	01000284 	movi	r4,10
81108388:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
8110838c:	00800044 	movi	r2,1
}
81108390:	e037883a 	mov	sp,fp
81108394:	dfc00117 	ldw	ra,4(sp)
81108398:	df000017 	ldw	fp,0(sp)
8110839c:	dec00204 	addi	sp,sp,8
811083a0:	f800283a 	ret

811083a4 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
811083a4:	defffc04 	addi	sp,sp,-16
811083a8:	de00012e 	bgeu	sp,et,811083b0 <bSyncIrqEnableError+0xc>
811083ac:	003b68fa 	trap	3
811083b0:	dfc00315 	stw	ra,12(sp)
811083b4:	df000215 	stw	fp,8(sp)
811083b8:	df000204 	addi	fp,sp,8
811083bc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811083c0:	01000044 	movi	r4,1
811083c4:	11086f80 	call	811086f8 <uliSyncReadReg>
811083c8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811083cc:	e0bfff17 	ldw	r2,-4(fp)
811083d0:	1000051e 	bne	r2,zero,811083e8 <bSyncIrqEnableError+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
811083d4:	e0fffe17 	ldw	r3,-8(fp)
811083d8:	00bfff44 	movi	r2,-3
811083dc:	1884703a 	and	r2,r3,r2
811083e0:	e0bffe15 	stw	r2,-8(fp)
811083e4:	00000306 	br	811083f4 <bSyncIrqEnableError+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
811083e8:	e0bffe17 	ldw	r2,-8(fp)
811083ec:	10800094 	ori	r2,r2,2
811083f0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
811083f4:	e17ffe17 	ldw	r5,-8(fp)
811083f8:	01000044 	movi	r4,1
811083fc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108400:	00800044 	movi	r2,1
}
81108404:	e037883a 	mov	sp,fp
81108408:	dfc00117 	ldw	ra,4(sp)
8110840c:	df000017 	ldw	fp,0(sp)
81108410:	dec00204 	addi	sp,sp,8
81108414:	f800283a 	ret

81108418 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
81108418:	defffc04 	addi	sp,sp,-16
8110841c:	de00012e 	bgeu	sp,et,81108424 <bSyncIrqEnableBlank+0xc>
81108420:	003b68fa 	trap	3
81108424:	dfc00315 	stw	ra,12(sp)
81108428:	df000215 	stw	fp,8(sp)
8110842c:	df000204 	addi	fp,sp,8
81108430:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81108434:	01000044 	movi	r4,1
81108438:	11086f80 	call	811086f8 <uliSyncReadReg>
8110843c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108440:	e0bfff17 	ldw	r2,-4(fp)
81108444:	1000051e 	bne	r2,zero,8110845c <bSyncIrqEnableBlank+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
81108448:	e0fffe17 	ldw	r3,-8(fp)
8110844c:	00bfff84 	movi	r2,-2
81108450:	1884703a 	and	r2,r3,r2
81108454:	e0bffe15 	stw	r2,-8(fp)
81108458:	00000306 	br	81108468 <bSyncIrqEnableBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
8110845c:	e0bffe17 	ldw	r2,-8(fp)
81108460:	10800054 	ori	r2,r2,1
81108464:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81108468:	e17ffe17 	ldw	r5,-8(fp)
8110846c:	01000044 	movi	r4,1
81108470:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108474:	00800044 	movi	r2,1
}
81108478:	e037883a 	mov	sp,fp
8110847c:	dfc00117 	ldw	ra,4(sp)
81108480:	df000017 	ldw	fp,0(sp)
81108484:	dec00204 	addi	sp,sp,8
81108488:	f800283a 	ret

8110848c <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110848c:	defffc04 	addi	sp,sp,-16
81108490:	de00012e 	bgeu	sp,et,81108498 <bSyncIrqFlagClrError+0xc>
81108494:	003b68fa 	trap	3
81108498:	dfc00315 	stw	ra,12(sp)
8110849c:	df000215 	stw	fp,8(sp)
811084a0:	df000204 	addi	fp,sp,8
811084a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811084a8:	01000084 	movi	r4,2
811084ac:	11086f80 	call	811086f8 <uliSyncReadReg>
811084b0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811084b4:	e0bfff17 	ldw	r2,-4(fp)
811084b8:	1000051e 	bne	r2,zero,811084d0 <bSyncIrqFlagClrError+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
811084bc:	e0fffe17 	ldw	r3,-8(fp)
811084c0:	00bfff44 	movi	r2,-3
811084c4:	1884703a 	and	r2,r3,r2
811084c8:	e0bffe15 	stw	r2,-8(fp)
811084cc:	00000306 	br	811084dc <bSyncIrqFlagClrError+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
811084d0:	e0bffe17 	ldw	r2,-8(fp)
811084d4:	10800094 	ori	r2,r2,2
811084d8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811084dc:	e17ffe17 	ldw	r5,-8(fp)
811084e0:	01000084 	movi	r4,2
811084e4:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811084e8:	00800044 	movi	r2,1
}
811084ec:	e037883a 	mov	sp,fp
811084f0:	dfc00117 	ldw	ra,4(sp)
811084f4:	df000017 	ldw	fp,0(sp)
811084f8:	dec00204 	addi	sp,sp,8
811084fc:	f800283a 	ret

81108500 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81108500:	defffc04 	addi	sp,sp,-16
81108504:	de00012e 	bgeu	sp,et,8110850c <bSyncIrqFlagClrBlank+0xc>
81108508:	003b68fa 	trap	3
8110850c:	dfc00315 	stw	ra,12(sp)
81108510:	df000215 	stw	fp,8(sp)
81108514:	df000204 	addi	fp,sp,8
81108518:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
8110851c:	01000084 	movi	r4,2
81108520:	11086f80 	call	811086f8 <uliSyncReadReg>
81108524:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108528:	e0bfff17 	ldw	r2,-4(fp)
8110852c:	1000051e 	bne	r2,zero,81108544 <bSyncIrqFlagClrBlank+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
81108530:	e0fffe17 	ldw	r3,-8(fp)
81108534:	00bfff84 	movi	r2,-2
81108538:	1884703a 	and	r2,r3,r2
8110853c:	e0bffe15 	stw	r2,-8(fp)
81108540:	00000306 	br	81108550 <bSyncIrqFlagClrBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
81108544:	e0bffe17 	ldw	r2,-8(fp)
81108548:	10800054 	ori	r2,r2,1
8110854c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
81108550:	e17ffe17 	ldw	r5,-8(fp)
81108554:	01000084 	movi	r4,2
81108558:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
8110855c:	00800044 	movi	r2,1
}
81108560:	e037883a 	mov	sp,fp
81108564:	dfc00117 	ldw	ra,4(sp)
81108568:	df000017 	ldw	fp,0(sp)
8110856c:	dec00204 	addi	sp,sp,8
81108570:	f800283a 	ret

81108574 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
81108574:	defffc04 	addi	sp,sp,-16
81108578:	de00012e 	bgeu	sp,et,81108580 <bSyncIrqFlagError+0xc>
8110857c:	003b68fa 	trap	3
81108580:	dfc00315 	stw	ra,12(sp)
81108584:	df000215 	stw	fp,8(sp)
81108588:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110858c:	010000c4 	movi	r4,3
81108590:	11086f80 	call	811086f8 <uliSyncReadReg>
81108594:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81108598:	e0bfff17 	ldw	r2,-4(fp)
8110859c:	1080008c 	andi	r2,r2,2
811085a0:	10000326 	beq	r2,zero,811085b0 <bSyncIrqFlagError+0x3c>
		bResult = TRUE;
811085a4:	00800044 	movi	r2,1
811085a8:	e0bffe15 	stw	r2,-8(fp)
811085ac:	00000106 	br	811085b4 <bSyncIrqFlagError+0x40>
	} else {
		bResult = FALSE;
811085b0:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
811085b4:	e0bffe17 	ldw	r2,-8(fp)
}
811085b8:	e037883a 	mov	sp,fp
811085bc:	dfc00117 	ldw	ra,4(sp)
811085c0:	df000017 	ldw	fp,0(sp)
811085c4:	dec00204 	addi	sp,sp,8
811085c8:	f800283a 	ret

811085cc <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
811085cc:	defffc04 	addi	sp,sp,-16
811085d0:	de00012e 	bgeu	sp,et,811085d8 <bSyncIrqFlagBlank+0xc>
811085d4:	003b68fa 	trap	3
811085d8:	dfc00315 	stw	ra,12(sp)
811085dc:	df000215 	stw	fp,8(sp)
811085e0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
811085e4:	010000c4 	movi	r4,3
811085e8:	11086f80 	call	811086f8 <uliSyncReadReg>
811085ec:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
811085f0:	e0bfff17 	ldw	r2,-4(fp)
811085f4:	1080004c 	andi	r2,r2,1
811085f8:	10000326 	beq	r2,zero,81108608 <bSyncIrqFlagBlank+0x3c>
		bResult = TRUE;
811085fc:	00800044 	movi	r2,1
81108600:	e0bffe15 	stw	r2,-8(fp)
81108604:	00000106 	br	8110860c <bSyncIrqFlagBlank+0x40>
	} else {
		bResult = FALSE;
81108608:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110860c:	e0bffe17 	ldw	r2,-8(fp)
}
81108610:	e037883a 	mov	sp,fp
81108614:	dfc00117 	ldw	ra,4(sp)
81108618:	df000017 	ldw	fp,0(sp)
8110861c:	dec00204 	addi	sp,sp,8
81108620:	f800283a 	ret

81108624 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
81108624:	defffd04 	addi	sp,sp,-12
81108628:	de00012e 	bgeu	sp,et,81108630 <uliSyncGetCtr+0xc>
8110862c:	003b68fa 	trap	3
81108630:	dfc00215 	stw	ra,8(sp)
81108634:	df000115 	stw	fp,4(sp)
81108638:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110863c:	01000284 	movi	r4,10
81108640:	11086f80 	call	811086f8 <uliSyncReadReg>
81108644:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81108648:	e0bfff17 	ldw	r2,-4(fp)
}
8110864c:	e037883a 	mov	sp,fp
81108650:	dfc00117 	ldw	ra,4(sp)
81108654:	df000017 	ldw	fp,0(sp)
81108658:	dec00204 	addi	sp,sp,8
8110865c:	f800283a 	ret

81108660 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
81108660:	defffd04 	addi	sp,sp,-12
81108664:	de00012e 	bgeu	sp,et,8110866c <uliSyncReadStatus+0xc>
81108668:	003b68fa 	trap	3
8110866c:	dfc00215 	stw	ra,8(sp)
81108670:	df000115 	stw	fp,4(sp)
81108674:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81108678:	0009883a 	mov	r4,zero
8110867c:	11086f80 	call	811086f8 <uliSyncReadReg>
81108680:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81108684:	e0bfff17 	ldw	r2,-4(fp)
}
81108688:	e037883a 	mov	sp,fp
8110868c:	dfc00117 	ldw	ra,4(sp)
81108690:	df000017 	ldw	fp,0(sp)
81108694:	dec00204 	addi	sp,sp,8
81108698:	f800283a 	ret

8110869c <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110869c:	defffc04 	addi	sp,sp,-16
811086a0:	de00012e 	bgeu	sp,et,811086a8 <bSyncWriteReg+0xc>
811086a4:	003b68fa 	trap	3
811086a8:	df000315 	stw	fp,12(sp)
811086ac:	df000304 	addi	fp,sp,12
811086b0:	e13ffe15 	stw	r4,-8(fp)
811086b4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
811086b8:	00a00034 	movhi	r2,32768
811086bc:	10810004 	addi	r2,r2,1024
811086c0:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
811086c4:	e0bffe17 	ldw	r2,-8(fp)
811086c8:	1085883a 	add	r2,r2,r2
811086cc:	1085883a 	add	r2,r2,r2
811086d0:	1007883a 	mov	r3,r2
811086d4:	e0bffd17 	ldw	r2,-12(fp)
811086d8:	10c5883a 	add	r2,r2,r3
811086dc:	e0ffff17 	ldw	r3,-4(fp)
811086e0:	10c00015 	stw	r3,0(r2)
	return TRUE;
811086e4:	00800044 	movi	r2,1
}
811086e8:	e037883a 	mov	sp,fp
811086ec:	df000017 	ldw	fp,0(sp)
811086f0:	dec00104 	addi	sp,sp,4
811086f4:	f800283a 	ret

811086f8 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
811086f8:	defffc04 	addi	sp,sp,-16
811086fc:	de00012e 	bgeu	sp,et,81108704 <uliSyncReadReg+0xc>
81108700:	003b68fa 	trap	3
81108704:	df000315 	stw	fp,12(sp)
81108708:	df000304 	addi	fp,sp,12
8110870c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81108710:	00a00034 	movhi	r2,32768
81108714:	10810004 	addi	r2,r2,1024
81108718:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
8110871c:	e0bfff17 	ldw	r2,-4(fp)
81108720:	1085883a 	add	r2,r2,r2
81108724:	1085883a 	add	r2,r2,r2
81108728:	1007883a 	mov	r3,r2
8110872c:	e0bffd17 	ldw	r2,-12(fp)
81108730:	10c5883a 	add	r2,r2,r3
81108734:	10800017 	ldw	r2,0(r2)
81108738:	e0bffe15 	stw	r2,-8(fp)
	return value;
8110873c:	e0bffe17 	ldw	r2,-8(fp)
}
81108740:	e037883a 	mov	sp,fp
81108744:	df000017 	ldw	fp,0(sp)
81108748:	dec00104 	addi	sp,sp,4
8110874c:	f800283a 	ret

81108750 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
81108750:	defffd04 	addi	sp,sp,-12
81108754:	de00012e 	bgeu	sp,et,8110875c <vFeeTask+0xc>
81108758:	003b68fa 	trap	3
8110875c:	df000215 	stw	fp,8(sp)
81108760:	df000204 	addi	fp,sp,8
81108764:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
81108768:	e03ffe15 	stw	zero,-8(fp)

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
8110876c:	0001883a 	nop
81108770:	e037883a 	mov	sp,fp
81108774:	df000017 	ldw	fp,0(sp)
81108778:	dec00104 	addi	sp,sp,4
8110877c:	f800283a 	ret

81108780 <vInAckHandlerTaskV2>:


#include "in_ack_handler_task.h"


void vInAckHandlerTaskV2(void *task_data) {
81108780:	defff604 	addi	sp,sp,-40
81108784:	de00012e 	bgeu	sp,et,8110878c <vInAckHandlerTaskV2+0xc>
81108788:	003b68fa 	trap	3
8110878c:	dfc00915 	stw	ra,36(sp)
81108790:	df000815 	stw	fp,32(sp)
81108794:	df000804 	addi	fp,sp,32
81108798:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
8110879c:	e03ff815 	stw	zero,-32(fp)
    bool bFinished32 = FALSE;
811087a0:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished64 = FALSE;
811087a4:	e03ffc15 	stw	zero,-16(fp)
    bool bFinished128 = FALSE;
811087a8:	e03ffd15 	stw	zero,-12(fp)
	INT8U error_code;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucHashVerification = 0;
811087ac:	e03ffa85 	stb	zero,-22(fp)
    unsigned char ucCountRetries = 0;
811087b0:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0;
811087b4:	e03ffa45 	stb	zero,-23(fp)

    #ifdef DEBUG_ON
        debug(fp,"In Ack Handler Task. (Task on)\n");
811087b8:	d0a04f17 	ldw	r2,-32452(gp)
811087bc:	100f883a 	mov	r7,r2
811087c0:	018007c4 	movi	r6,31
811087c4:	01400044 	movi	r5,1
811087c8:	01204534 	movhi	r4,33044
811087cc:	21379d04 	addi	r4,r4,-8588
811087d0:	11126a00 	call	811126a0 <fwrite>
    #endif    

	eReceiverAckState = sRAConfiguring;
811087d4:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eReceiverAckState) {
811087d8:	e0bff917 	ldw	r2,-28(fp)
811087dc:	10c00060 	cmpeqi	r3,r2,1
811087e0:	1800071e 	bne	r3,zero,81108800 <vInAckHandlerTaskV2+0x80>
811087e4:	0080032e 	bgeu	zero,r2,811087f4 <vInAckHandlerTaskV2+0x74>
811087e8:	108000a0 	cmpeqi	r2,r2,2
811087ec:	10004a1e 	bne	r2,zero,81108918 <vInAckHandlerTaskV2+0x198>
811087f0:	0000ac06 	br	81108aa4 <vInAckHandlerTaskV2+0x324>
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
811087f4:	00800044 	movi	r2,1
811087f8:	e0bff915 	stw	r2,-28(fp)
				break;
811087fc:	0000b306 	br	81108acc <vInAckHandlerTaskV2+0x34c>
            case sRAGettingACK:
                eReceiverAckState = sRAGettingACK;
81108800:	00800044 	movi	r2,1
81108804:	e0bff915 	stw	r2,-28(fp)
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
81108808:	d0a05317 	ldw	r2,-32436(gp)
8110880c:	e0fffe04 	addi	r3,fp,-8
81108810:	180d883a 	mov	r6,r3
81108814:	000b883a 	mov	r5,zero
81108818:	1009883a 	mov	r4,r2
8110881c:	11301a40 	call	811301a4 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
81108820:	e0bffe03 	ldbu	r2,-8(fp)
81108824:	10803fcc 	andi	r2,r2,255
81108828:	1000391e 	bne	r2,zero,81108910 <vInAckHandlerTaskV2+0x190>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
8110882c:	d0a05217 	ldw	r2,-32440(gp)
81108830:	e0fffe04 	addi	r3,fp,-8
81108834:	180d883a 	mov	r6,r3
81108838:	000b883a 	mov	r5,zero
8110883c:	1009883a 	mov	r4,r2
81108840:	112e1980 	call	8112e198 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108844:	e0bffe03 	ldbu	r2,-8(fp)
81108848:	10803fcc 	andi	r2,r2,255
8110884c:	10002b1e 	bne	r2,zero,811088fc <vInAckHandlerTaskV2+0x17c>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
81108850:	e03ffa45 	stb	zero,-23(fp)
81108854:	00002206 	br	811088e0 <vInAckHandlerTaskV2+0x160>
                        {
                            if ( xReceivedACK[i].cType != 0 ) {
81108858:	e0fffa43 	ldbu	r3,-23(fp)
8110885c:	00a04574 	movhi	r2,33045
81108860:	10aba104 	addi	r2,r2,-20860
81108864:	18c7883a 	add	r3,r3,r3
81108868:	18c7883a 	add	r3,r3,r3
8110886c:	10c5883a 	add	r2,r2,r3
81108870:	10800003 	ldbu	r2,0(r2)
81108874:	10803fcc 	andi	r2,r2,255
81108878:	1080201c 	xori	r2,r2,128
8110887c:	10bfe004 	addi	r2,r2,-128
81108880:	10001426 	beq	r2,zero,811088d4 <vInAckHandlerTaskV2+0x154>

                                /*  Nack don't get here */
                                xRAckLocal = xReceivedACK[i];
81108884:	e0fffa43 	ldbu	r3,-23(fp)
81108888:	00a04574 	movhi	r2,33045
8110888c:	10aba104 	addi	r2,r2,-20860
81108890:	18c7883a 	add	r3,r3,r3
81108894:	18c7883a 	add	r3,r3,r3
81108898:	10c5883a 	add	r2,r2,r3
8110889c:	10c0000b 	ldhu	r3,0(r2)
811088a0:	d0e0488d 	sth	r3,-32478(gp)
811088a4:	1080008b 	ldhu	r2,2(r2)
811088a8:	d0a0490d 	sth	r2,-32476(gp)
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811088ac:	e0fffa43 	ldbu	r3,-23(fp)
811088b0:	00a04574 	movhi	r2,33045
811088b4:	10aba104 	addi	r2,r2,-20860
811088b8:	18c7883a 	add	r3,r3,r3
811088bc:	18c7883a 	add	r3,r3,r3
811088c0:	10c5883a 	add	r2,r2,r3
811088c4:	10000005 	stb	zero,0(r2)
                                eReceiverAckState = sRACleanningBuffer;
811088c8:	00800084 	movi	r2,2
811088cc:	e0bff915 	stw	r2,-28(fp)
                                break;                                
811088d0:	00000606 	br	811088ec <vInAckHandlerTaskV2+0x16c>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811088d4:	e0bffa43 	ldbu	r2,-23(fp)
811088d8:	10800044 	addi	r2,r2,1
811088dc:	e0bffa45 	stb	r2,-23(fp)
811088e0:	e0bffa43 	ldbu	r2,-23(fp)
811088e4:	108001b0 	cmpltui	r2,r2,6
811088e8:	103fdb1e 	bne	r2,zero,81108858 <__reset+0xfb0e8858>
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                eReceiverAckState = sRACleanningBuffer;
                                break;                                
                            }
                        }
                        OSMutexPost(xMutexReceivedACK);
811088ec:	d0a05217 	ldw	r2,-32440(gp)
811088f0:	1009883a 	mov	r4,r2
811088f4:	112e73c0 	call	8112e73c <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088f8:	00007406 	br	81108acc <vInAckHandlerTaskV2+0x34c>
                        OSMutexPost(xMutexReceivedACK);

                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                    	OSSemPost(xSemCountReceivedACK);
811088fc:	d0a05317 	ldw	r2,-32436(gp)
81108900:	1009883a 	mov	r4,r2
81108904:	113052c0 	call	8113052c <OSSemPost>
                    	vFailGetMutexReceiverTask();
81108908:	110e7900 	call	8110e790 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
8110890c:	00006f06 	br	81108acc <vInAckHandlerTaskV2+0x34c>
                    	vFailGetMutexReceiverTask();
                    }
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
81108910:	110e7280 	call	8110e728 <vFailGetCountSemaphoreReceiverTask>
                }
                break;
81108914:	00006d06 	br	81108acc <vInAckHandlerTaskV2+0x34c>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */
                
                ucHashVerification = 0;
81108918:	e03ffa85 	stb	zero,-22(fp)
                ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);
8110891c:	d0a05583 	ldbu	r2,-32426(gp)
81108920:	10803fcc 	andi	r2,r2,255
81108924:	10800218 	cmpnei	r2,r2,8
81108928:	1000021e 	bne	r2,zero,81108934 <vInAckHandlerTaskV2+0x1b4>
8110892c:	00c00104 	movi	r3,4
81108930:	00000106 	br	81108938 <vInAckHandlerTaskV2+0x1b8>
81108934:	0007883a 	mov	r3,zero
81108938:	d0a05e03 	ldbu	r2,-32392(gp)
8110893c:	10803fcc 	andi	r2,r2,255
81108940:	10800218 	cmpnei	r2,r2,8
81108944:	1000021e 	bne	r2,zero,81108950 <vInAckHandlerTaskV2+0x1d0>
81108948:	00800084 	movi	r2,2
8110894c:	00000106 	br	81108954 <vInAckHandlerTaskV2+0x1d4>
81108950:	0005883a 	mov	r2,zero
81108954:	1884b03a 	or	r2,r3,r2
81108958:	1007883a 	mov	r3,r2
8110895c:	d0a05e43 	ldbu	r2,-32391(gp)
81108960:	10803fcc 	andi	r2,r2,255
81108964:	108001a0 	cmpeqi	r2,r2,6
81108968:	1884b03a 	or	r2,r3,r2
8110896c:	1007883a 	mov	r3,r2
81108970:	e0bffa83 	ldbu	r2,-22(fp)
81108974:	1884b03a 	or	r2,r3,r2
81108978:	e0bffa85 	stb	r2,-22(fp)

                bFound = FALSE;
8110897c:	e03ff815 	stw	zero,-32(fp)
                bFinished32=FALSE;
81108980:	e03ffb15 	stw	zero,-20(fp)
                bFinished64=FALSE;
81108984:	e03ffc15 	stw	zero,-16(fp)
                bFinished128=FALSE;
81108988:	e03ffd15 	stw	zero,-12(fp)
                ucCountRetries = 0;
8110898c:	e03ffa05 	stb	zero,-24(fp)
                do
                {
                    ucCountRetries++;
81108990:	e0bffa03 	ldbu	r2,-24(fp)
81108994:	10800044 	addi	r2,r2,1
81108998:	e0bffa05 	stb	r2,-24(fp)

                    /* There are any spot used in the xBuffer128? */
                    if ( 0b00000001 != (0b00000001 & ucHashVerification ) )
8110899c:	e0bffa83 	ldbu	r2,-22(fp)
811089a0:	1080004c 	andi	r2,r2,1
811089a4:	10803fcc 	andi	r2,r2,255
811089a8:	1000061e 	bne	r2,zero,811089c4 <vInAckHandlerTaskV2+0x244>
                        bFound = bCheckInAck128( &xRAckLocal, &bFinished128  );
811089ac:	e0bffd04 	addi	r2,fp,-12
811089b0:	100b883a 	mov	r5,r2
811089b4:	d1204884 	addi	r4,gp,-32478
811089b8:	1108ad00 	call	81108ad0 <bCheckInAck128>
811089bc:	e0bff815 	stw	r2,-32(fp)
811089c0:	00000206 	br	811089cc <vInAckHandlerTaskV2+0x24c>
                    else
                        bFinished128 = TRUE;
811089c4:	00800044 	movi	r2,1
811089c8:	e0bffd15 	stw	r2,-12(fp)

                    /* There are any spot used in the xBuffer64? */
                    if ( (0b00000010 != (0b00000010 & ucHashVerification )) && (bFound ==FALSE ) )
811089cc:	e0bffa83 	ldbu	r2,-22(fp)
811089d0:	1080008c 	andi	r2,r2,2
811089d4:	10803fcc 	andi	r2,r2,255
811089d8:	1000081e 	bne	r2,zero,811089fc <vInAckHandlerTaskV2+0x27c>
811089dc:	e0bff817 	ldw	r2,-32(fp)
811089e0:	1000061e 	bne	r2,zero,811089fc <vInAckHandlerTaskV2+0x27c>
                        bFound = bCheckInAck64( &xRAckLocal, &bFinished64 );
811089e4:	e0bffc04 	addi	r2,fp,-16
811089e8:	100b883a 	mov	r5,r2
811089ec:	d1204884 	addi	r4,gp,-32478
811089f0:	1108c180 	call	81108c18 <bCheckInAck64>
811089f4:	e0bff815 	stw	r2,-32(fp)
811089f8:	00000206 	br	81108a04 <vInAckHandlerTaskV2+0x284>
                    else
                        bFinished64 = TRUE;
811089fc:	00800044 	movi	r2,1
81108a00:	e0bffc15 	stw	r2,-16(fp)

                    /* There are any spot used in the xBuffer32? */
                    if ( (0b00000100 != (0b00000100 & ucHashVerification ) ) && (bFound ==FALSE ) )
81108a04:	e0bffa83 	ldbu	r2,-22(fp)
81108a08:	1080010c 	andi	r2,r2,4
81108a0c:	10803fcc 	andi	r2,r2,255
81108a10:	1000081e 	bne	r2,zero,81108a34 <vInAckHandlerTaskV2+0x2b4>
81108a14:	e0bff817 	ldw	r2,-32(fp)
81108a18:	1000061e 	bne	r2,zero,81108a34 <vInAckHandlerTaskV2+0x2b4>
                        bFound = bCheckInAck32( &xRAckLocal, &bFinished32  );
81108a1c:	e0bffb04 	addi	r2,fp,-20
81108a20:	100b883a 	mov	r5,r2
81108a24:	d1204884 	addi	r4,gp,-32478
81108a28:	1108d640 	call	81108d64 <bCheckInAck32>
81108a2c:	e0bff815 	stw	r2,-32(fp)
81108a30:	00000206 	br	81108a3c <vInAckHandlerTaskV2+0x2bc>
                    else
                        bFinished32 = TRUE;
81108a34:	00800044 	movi	r2,1
81108a38:	e0bffb15 	stw	r2,-20(fp)

                } while ( ((ucCountRetries++ < MAX_RETRIES_ACK_IN) && (bFound == FALSE) && ((bFinished32 == FALSE) | (bFinished64 == FALSE) | (bFinished128 == FALSE))) );
81108a3c:	e0bffa03 	ldbu	r2,-24(fp)
81108a40:	10c00044 	addi	r3,r2,1
81108a44:	e0fffa05 	stb	r3,-24(fp)
81108a48:	10803fcc 	andi	r2,r2,255
81108a4c:	10800ca8 	cmpgeui	r2,r2,50
81108a50:	10000e1e 	bne	r2,zero,81108a8c <vInAckHandlerTaskV2+0x30c>
81108a54:	e0bff817 	ldw	r2,-32(fp)
81108a58:	10000c1e 	bne	r2,zero,81108a8c <vInAckHandlerTaskV2+0x30c>
81108a5c:	e0bffb17 	ldw	r2,-20(fp)
81108a60:	1005003a 	cmpeq	r2,r2,zero
81108a64:	1007883a 	mov	r3,r2
81108a68:	e0bffc17 	ldw	r2,-16(fp)
81108a6c:	1005003a 	cmpeq	r2,r2,zero
81108a70:	1884b03a 	or	r2,r3,r2
81108a74:	10c03fcc 	andi	r3,r2,255
81108a78:	e0bffd17 	ldw	r2,-12(fp)
81108a7c:	1005003a 	cmpeq	r2,r2,zero
81108a80:	10803fcc 	andi	r2,r2,255
81108a84:	1884b03a 	or	r2,r3,r2
81108a88:	103fc11e 	bne	r2,zero,81108990 <__reset+0xfb0e8990>
                
                if (bFound == FALSE) {
81108a8c:	e0bff817 	ldw	r2,-32(fp)
81108a90:	1000011e 	bne	r2,zero,81108a98 <vInAckHandlerTaskV2+0x318>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81108a94:	110ec4c0 	call	8110ec4c <vFailFoundBufferRetransmission>
                }

                eReceiverAckState = sRAGettingACK;
81108a98:	00800044 	movi	r2,1
81108a9c:	e0bff915 	stw	r2,-28(fp)
				break;
81108aa0:	00000a06 	br	81108acc <vInAckHandlerTaskV2+0x34c>
			default:
                #ifdef DEBUG_ON
		            debug(fp,"Critical: Default State. Should never get here.(vInAckHandlerTaskV2)\n");
81108aa4:	d0a04f17 	ldw	r2,-32452(gp)
81108aa8:	100f883a 	mov	r7,r2
81108aac:	01801144 	movi	r6,69
81108ab0:	01400044 	movi	r5,1
81108ab4:	01204534 	movhi	r4,33044
81108ab8:	2137a504 	addi	r4,r4,-8556
81108abc:	11126a00 	call	811126a0 <fwrite>
	            #endif
                eReceiverAckState = sRAGettingACK;
81108ac0:	00800044 	movi	r2,1
81108ac4:	e0bff915 	stw	r2,-28(fp)
				break;
81108ac8:	0001883a 	nop
		}
	}
81108acc:	003f4206 	br	811087d8 <__reset+0xfb0e87d8>

81108ad0 <bCheckInAck128>:
}


bool bCheckInAck128( txReceivedACK *xRecAckL , bool *bFinished ) {
81108ad0:	defffa04 	addi	sp,sp,-24
81108ad4:	de00012e 	bgeu	sp,et,81108adc <bCheckInAck128+0xc>
81108ad8:	003b68fa 	trap	3
81108adc:	dfc00515 	stw	ra,20(sp)
81108ae0:	df000415 	stw	fp,16(sp)
81108ae4:	df000404 	addi	fp,sp,16
81108ae8:	e13ffe15 	stw	r4,-8(fp)
81108aec:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81108af0:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81108af4:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81108af8:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81108afc:	e0bfff17 	ldw	r2,-4(fp)
81108b00:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer128, 5, &error_code); /* Mas wait 1 tick = 1 ms */
81108b04:	d0a05917 	ldw	r2,-32412(gp)
81108b08:	e0fffd44 	addi	r3,fp,-11
81108b0c:	180d883a 	mov	r6,r3
81108b10:	01400144 	movi	r5,5
81108b14:	1009883a 	mov	r4,r2
81108b18:	112e1980 	call	8112e198 <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81108b1c:	e0bffd43 	ldbu	r2,-11(fp)
81108b20:	10803fcc 	andi	r2,r2,255
81108b24:	10000226 	beq	r2,zero,81108b30 <bCheckInAck128+0x60>
        return bFound;
81108b28:	e0bffc17 	ldw	r2,-16(fp)
81108b2c:	00003506 	br	81108c04 <bCheckInAck128+0x134>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_128; ucIL++)
81108b30:	e03ffd05 	stb	zero,-12(fp)
81108b34:	00002706 	br	81108bd4 <bCheckInAck128+0x104>
    {
        if ( xBuffer128[ucIL].usiId == xRecAckL->usiId ) {
81108b38:	e0fffd03 	ldbu	r3,-12(fp)
81108b3c:	00a04574 	movhi	r2,33045
81108b40:	10aacf04 	addi	r2,r2,-21700
81108b44:	18c02324 	muli	r3,r3,140
81108b48:	10c5883a 	add	r2,r2,r3
81108b4c:	10802104 	addi	r2,r2,132
81108b50:	10c0000b 	ldhu	r3,0(r2)
81108b54:	e0bffe17 	ldw	r2,-8(fp)
81108b58:	1080008b 	ldhu	r2,2(r2)
81108b5c:	18ffffcc 	andi	r3,r3,65535
81108b60:	10bfffcc 	andi	r2,r2,65535
81108b64:	1880181e 	bne	r3,r2,81108bc8 <bCheckInAck128+0xf8>
            bFound = TRUE;
81108b68:	00800044 	movi	r2,1
81108b6c:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b128[ucIL] = FALSE;
81108b70:	e0fffd03 	ldbu	r3,-12(fp)
81108b74:	00a04574 	movhi	r2,33045
81108b78:	10aab904 	addi	r2,r2,-21788
81108b7c:	18c7883a 	add	r3,r3,r3
81108b80:	18c7883a 	add	r3,r3,r3
81108b84:	10c5883a 	add	r2,r2,r3
81108b88:	10000015 	stw	zero,0(r2)
            SemCount128++;
81108b8c:	d0a05e43 	ldbu	r2,-32391(gp)
81108b90:	10800044 	addi	r2,r2,1
81108b94:	d0a05e45 	stb	r2,-32391(gp)
            error_code = OSSemPost(xSemCountBuffer128);
81108b98:	d0a05017 	ldw	r2,-32448(gp)
81108b9c:	1009883a 	mov	r4,r2
81108ba0:	113052c0 	call	8113052c <OSSemPost>
81108ba4:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81108ba8:	e0bffd43 	ldbu	r2,-11(fp)
81108bac:	10803fcc 	andi	r2,r2,255
81108bb0:	10000c26 	beq	r2,zero,81108be4 <bCheckInAck128+0x114>
                SemCount128--;
81108bb4:	d0a05e43 	ldbu	r2,-32391(gp)
81108bb8:	10bfffc4 	addi	r2,r2,-1
81108bbc:	d0a05e45 	stb	r2,-32391(gp)
                vFailSetCountSemaphorexBuffer128();
81108bc0:	110eaac0 	call	8110eaac <vFailSetCountSemaphorexBuffer128>
            }
            break;
81108bc4:	00000706 	br	81108be4 <bCheckInAck128+0x114>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_128; ucIL++)
81108bc8:	e0bffd03 	ldbu	r2,-12(fp)
81108bcc:	10800044 	addi	r2,r2,1
81108bd0:	e0bffd05 	stb	r2,-12(fp)
81108bd4:	e0bffd03 	ldbu	r2,-12(fp)
81108bd8:	108001b0 	cmpltui	r2,r2,6
81108bdc:	103fd61e 	bne	r2,zero,81108b38 <__reset+0xfb0e8b38>
81108be0:	00000106 	br	81108be8 <bCheckInAck128+0x118>
            error_code = OSSemPost(xSemCountBuffer128);
            if ( error_code != OS_ERR_NONE ) {
                SemCount128--;
                vFailSetCountSemaphorexBuffer128();
            }
            break;
81108be4:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81108be8:	d0a05917 	ldw	r2,-32412(gp)
81108bec:	1009883a 	mov	r4,r2
81108bf0:	112e73c0 	call	8112e73c <OSMutexPost>
    (*bFinished) = TRUE;
81108bf4:	e0bfff17 	ldw	r2,-4(fp)
81108bf8:	00c00044 	movi	r3,1
81108bfc:	10c00015 	stw	r3,0(r2)

    return bFound;
81108c00:	e0bffc17 	ldw	r2,-16(fp)
}
81108c04:	e037883a 	mov	sp,fp
81108c08:	dfc00117 	ldw	ra,4(sp)
81108c0c:	df000017 	ldw	fp,0(sp)
81108c10:	dec00204 	addi	sp,sp,8
81108c14:	f800283a 	ret

81108c18 <bCheckInAck64>:


bool bCheckInAck64( txReceivedACK *xRecAckL , bool *bFinished ) {
81108c18:	defffa04 	addi	sp,sp,-24
81108c1c:	de00012e 	bgeu	sp,et,81108c24 <bCheckInAck64+0xc>
81108c20:	003b68fa 	trap	3
81108c24:	dfc00515 	stw	ra,20(sp)
81108c28:	df000415 	stw	fp,16(sp)
81108c2c:	df000404 	addi	fp,sp,16
81108c30:	e13ffe15 	stw	r4,-8(fp)
81108c34:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81108c38:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81108c3c:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81108c40:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81108c44:	e0bfff17 	ldw	r2,-4(fp)
81108c48:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer64, 1, &error_code); /* Mas wait 1 tick = 1 ms */
81108c4c:	d0a05b17 	ldw	r2,-32404(gp)
81108c50:	e0fffd44 	addi	r3,fp,-11
81108c54:	180d883a 	mov	r6,r3
81108c58:	01400044 	movi	r5,1
81108c5c:	1009883a 	mov	r4,r2
81108c60:	112e1980 	call	8112e198 <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81108c64:	e0bffd43 	ldbu	r2,-11(fp)
81108c68:	10803fcc 	andi	r2,r2,255
81108c6c:	10000226 	beq	r2,zero,81108c78 <bCheckInAck64+0x60>
        return bFound;
81108c70:	e0bffc17 	ldw	r2,-16(fp)
81108c74:	00003606 	br	81108d50 <bCheckInAck64+0x138>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_64; ucIL++)
81108c78:	e03ffd05 	stb	zero,-12(fp)
81108c7c:	00002806 	br	81108d20 <bCheckInAck64+0x108>
    {
        if ( xBuffer64[ucIL].usiId == xRecAckL->usiId ) {
81108c80:	e0fffd03 	ldbu	r3,-12(fp)
81108c84:	00a04534 	movhi	r2,33044
81108c88:	1090b204 	addi	r2,r2,17096
81108c8c:	18c01324 	muli	r3,r3,76
81108c90:	10c5883a 	add	r2,r2,r3
81108c94:	10801104 	addi	r2,r2,68
81108c98:	10c0000b 	ldhu	r3,0(r2)
81108c9c:	e0bffe17 	ldw	r2,-8(fp)
81108ca0:	1080008b 	ldhu	r2,2(r2)
81108ca4:	18ffffcc 	andi	r3,r3,65535
81108ca8:	10bfffcc 	andi	r2,r2,65535
81108cac:	1880191e 	bne	r3,r2,81108d14 <bCheckInAck64+0xfc>
            bFound = TRUE;
81108cb0:	00800044 	movi	r2,1
81108cb4:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b64[ucIL] = FALSE;
81108cb8:	e0fffd03 	ldbu	r3,-12(fp)
81108cbc:	00a04574 	movhi	r2,33045
81108cc0:	10aab904 	addi	r2,r2,-21788
81108cc4:	18c00184 	addi	r3,r3,6
81108cc8:	18c7883a 	add	r3,r3,r3
81108ccc:	18c7883a 	add	r3,r3,r3
81108cd0:	10c5883a 	add	r2,r2,r3
81108cd4:	10000015 	stw	zero,0(r2)
            SemCount64++;
81108cd8:	d0a05e03 	ldbu	r2,-32392(gp)
81108cdc:	10800044 	addi	r2,r2,1
81108ce0:	d0a05e05 	stb	r2,-32392(gp)
            error_code = OSSemPost(xSemCountBuffer64);
81108ce4:	d0a04c17 	ldw	r2,-32464(gp)
81108ce8:	1009883a 	mov	r4,r2
81108cec:	113052c0 	call	8113052c <OSSemPost>
81108cf0:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81108cf4:	e0bffd43 	ldbu	r2,-11(fp)
81108cf8:	10803fcc 	andi	r2,r2,255
81108cfc:	10000c26 	beq	r2,zero,81108d30 <bCheckInAck64+0x118>
                SemCount64--;
81108d00:	d0a05e03 	ldbu	r2,-32392(gp)
81108d04:	10bfffc4 	addi	r2,r2,-1
81108d08:	d0a05e05 	stb	r2,-32392(gp)
                vFailSetCountSemaphorexBuffer64();
81108d0c:	110ea440 	call	8110ea44 <vFailSetCountSemaphorexBuffer64>
            }
            break;
81108d10:	00000706 	br	81108d30 <bCheckInAck64+0x118>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_64; ucIL++)
81108d14:	e0bffd03 	ldbu	r2,-12(fp)
81108d18:	10800044 	addi	r2,r2,1
81108d1c:	e0bffd05 	stb	r2,-12(fp)
81108d20:	e0bffd03 	ldbu	r2,-12(fp)
81108d24:	10800230 	cmpltui	r2,r2,8
81108d28:	103fd51e 	bne	r2,zero,81108c80 <__reset+0xfb0e8c80>
81108d2c:	00000106 	br	81108d34 <bCheckInAck64+0x11c>
            error_code = OSSemPost(xSemCountBuffer64);
            if ( error_code != OS_ERR_NONE ) {
                SemCount64--;
                vFailSetCountSemaphorexBuffer64();
            }
            break;
81108d30:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer128*/
81108d34:	d0a05b17 	ldw	r2,-32404(gp)
81108d38:	1009883a 	mov	r4,r2
81108d3c:	112e73c0 	call	8112e73c <OSMutexPost>
    (*bFinished) = TRUE;
81108d40:	e0bfff17 	ldw	r2,-4(fp)
81108d44:	00c00044 	movi	r3,1
81108d48:	10c00015 	stw	r3,0(r2)

    return bFound;
81108d4c:	e0bffc17 	ldw	r2,-16(fp)
}
81108d50:	e037883a 	mov	sp,fp
81108d54:	dfc00117 	ldw	ra,4(sp)
81108d58:	df000017 	ldw	fp,0(sp)
81108d5c:	dec00204 	addi	sp,sp,8
81108d60:	f800283a 	ret

81108d64 <bCheckInAck32>:



bool bCheckInAck32( txReceivedACK *xRecAckL , bool *bFinished ) {
81108d64:	defffa04 	addi	sp,sp,-24
81108d68:	de00012e 	bgeu	sp,et,81108d70 <bCheckInAck32+0xc>
81108d6c:	003b68fa 	trap	3
81108d70:	dfc00515 	stw	ra,20(sp)
81108d74:	df000415 	stw	fp,16(sp)
81108d78:	df000404 	addi	fp,sp,16
81108d7c:	e13ffe15 	stw	r4,-8(fp)
81108d80:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81108d84:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81108d88:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81108d8c:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81108d90:	e0bfff17 	ldw	r2,-4(fp)
81108d94:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer32, 1, &error_code); /* Mas wait 1 tick = 1 ms */
81108d98:	d0a05717 	ldw	r2,-32420(gp)
81108d9c:	e0fffd44 	addi	r3,fp,-11
81108da0:	180d883a 	mov	r6,r3
81108da4:	01400044 	movi	r5,1
81108da8:	1009883a 	mov	r4,r2
81108dac:	112e1980 	call	8112e198 <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81108db0:	e0bffd43 	ldbu	r2,-11(fp)
81108db4:	10803fcc 	andi	r2,r2,255
81108db8:	10000226 	beq	r2,zero,81108dc4 <bCheckInAck32+0x60>
        return bFound;
81108dbc:	e0bffc17 	ldw	r2,-16(fp)
81108dc0:	00003606 	br	81108e9c <bCheckInAck32+0x138>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_32; ucIL++)
81108dc4:	e03ffd05 	stb	zero,-12(fp)
81108dc8:	00002806 	br	81108e6c <bCheckInAck32+0x108>
    {
        if ( xBuffer32[ucIL].usiId == xRecAckL->usiId ) {
81108dcc:	e0fffd03 	ldbu	r3,-12(fp)
81108dd0:	00a04534 	movhi	r2,33044
81108dd4:	109a6104 	addi	r2,r2,27012
81108dd8:	18c00b24 	muli	r3,r3,44
81108ddc:	10c5883a 	add	r2,r2,r3
81108de0:	10800904 	addi	r2,r2,36
81108de4:	10c0000b 	ldhu	r3,0(r2)
81108de8:	e0bffe17 	ldw	r2,-8(fp)
81108dec:	1080008b 	ldhu	r2,2(r2)
81108df0:	18ffffcc 	andi	r3,r3,65535
81108df4:	10bfffcc 	andi	r2,r2,65535
81108df8:	1880191e 	bne	r3,r2,81108e60 <bCheckInAck32+0xfc>
            bFound = TRUE;
81108dfc:	00800044 	movi	r2,1
81108e00:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b32[ucIL] = FALSE;
81108e04:	e0fffd03 	ldbu	r3,-12(fp)
81108e08:	00a04574 	movhi	r2,33045
81108e0c:	10aab904 	addi	r2,r2,-21788
81108e10:	18c00384 	addi	r3,r3,14
81108e14:	18c7883a 	add	r3,r3,r3
81108e18:	18c7883a 	add	r3,r3,r3
81108e1c:	10c5883a 	add	r2,r2,r3
81108e20:	10000015 	stw	zero,0(r2)
            SemCount32++;
81108e24:	d0a05583 	ldbu	r2,-32426(gp)
81108e28:	10800044 	addi	r2,r2,1
81108e2c:	d0a05585 	stb	r2,-32426(gp)
            error_code = OSSemPost(xSemCountBuffer32);
81108e30:	d0a05a17 	ldw	r2,-32408(gp)
81108e34:	1009883a 	mov	r4,r2
81108e38:	113052c0 	call	8113052c <OSSemPost>
81108e3c:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81108e40:	e0bffd43 	ldbu	r2,-11(fp)
81108e44:	10803fcc 	andi	r2,r2,255
81108e48:	10000c26 	beq	r2,zero,81108e7c <bCheckInAck32+0x118>
                SemCount32--;
81108e4c:	d0a05583 	ldbu	r2,-32426(gp)
81108e50:	10bfffc4 	addi	r2,r2,-1
81108e54:	d0a05585 	stb	r2,-32426(gp)
                vFailSetCountSemaphorexBuffer32();
81108e58:	110e9dc0 	call	8110e9dc <vFailSetCountSemaphorexBuffer32>
            }
            break;
81108e5c:	00000706 	br	81108e7c <bCheckInAck32+0x118>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_32; ucIL++)
81108e60:	e0bffd03 	ldbu	r2,-12(fp)
81108e64:	10800044 	addi	r2,r2,1
81108e68:	e0bffd05 	stb	r2,-12(fp)
81108e6c:	e0bffd03 	ldbu	r2,-12(fp)
81108e70:	10800230 	cmpltui	r2,r2,8
81108e74:	103fd51e 	bne	r2,zero,81108dcc <__reset+0xfb0e8dcc>
81108e78:	00000106 	br	81108e80 <bCheckInAck32+0x11c>
            error_code = OSSemPost(xSemCountBuffer32);
            if ( error_code != OS_ERR_NONE ) {
                SemCount32--;
                vFailSetCountSemaphorexBuffer32();
            }
            break;
81108e7c:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xMutexBuffer32*/
81108e80:	d0a05717 	ldw	r2,-32420(gp)
81108e84:	1009883a 	mov	r4,r2
81108e88:	112e73c0 	call	8112e73c <OSMutexPost>
    (*bFinished) = TRUE;
81108e8c:	e0bfff17 	ldw	r2,-4(fp)
81108e90:	00c00044 	movi	r3,1
81108e94:	10c00015 	stw	r3,0(r2)

    return bFound;
81108e98:	e0bffc17 	ldw	r2,-16(fp)
}
81108e9c:	e037883a 	mov	sp,fp
81108ea0:	dfc00117 	ldw	ra,4(sp)
81108ea4:	df000017 	ldw	fp,0(sp)
81108ea8:	dec00204 	addi	sp,sp,8
81108eac:	f800283a 	ret

81108eb0 <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81108eb0:	defff704 	addi	sp,sp,-36
81108eb4:	de00012e 	bgeu	sp,et,81108ebc <vInitialTask+0xc>
81108eb8:	003b68fa 	trap	3
81108ebc:	dfc00815 	stw	ra,32(sp)
81108ec0:	df000715 	stw	fp,28(sp)
81108ec4:	df000704 	addi	fp,sp,28
81108ec8:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81108ecc:	e03ffe05 	stb	zero,-8(fp)
									vTimeoutCheckerTask_stk,
									TIMEOUT_CHECKER_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vTimeoutCheckerTaskv2,
81108ed0:	d8000415 	stw	zero,16(sp)
81108ed4:	d8000315 	stw	zero,12(sp)
81108ed8:	00810004 	movi	r2,1024
81108edc:	d8800215 	stw	r2,8(sp)
81108ee0:	00a04534 	movhi	r2,33044
81108ee4:	10966104 	addi	r2,r2,22916
81108ee8:	d8800115 	stw	r2,4(sp)
81108eec:	00800704 	movi	r2,28
81108ef0:	d8800015 	stw	r2,0(sp)
81108ef4:	01c00704 	movi	r7,28
81108ef8:	01a04534 	movhi	r6,33044
81108efc:	319a6004 	addi	r6,r6,27008
81108f00:	000b883a 	mov	r5,zero
81108f04:	01204474 	movhi	r4,33041
81108f08:	212c0604 	addi	r4,r4,-20456
81108f0c:	1130f100 	call	81130f10 <OSTaskCreateExt>
81108f10:	e0bffe05 	stb	r2,-8(fp)
									TIMEOUT_CHECKER_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
81108f14:	e0bffe03 	ldbu	r2,-8(fp)
81108f18:	10803fcc 	andi	r2,r2,255
81108f1c:	10000526 	beq	r2,zero,81108f34 <vInitialTask+0x84>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108f20:	e0bffe03 	ldbu	r2,-8(fp)
81108f24:	10803fcc 	andi	r2,r2,255
81108f28:	1009883a 	mov	r4,r2
81108f2c:	110e3a40 	call	8110e3a4 <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
81108f30:	110f1700 	call	8110f170 <vFailTimeoutCheckerTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
81108f34:	01c00044 	movi	r7,1
81108f38:	000d883a 	mov	r6,zero
81108f3c:	000b883a 	mov	r5,zero
81108f40:	0009883a 	mov	r4,zero
81108f44:	113213c0 	call	8113213c <OSTimeDlyHMSM>
									vOutAckHandlerTask_stk,
									OUT_ACK_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81108f48:	d8000415 	stw	zero,16(sp)
81108f4c:	d8000315 	stw	zero,12(sp)
81108f50:	00810004 	movi	r2,1024
81108f54:	d8800215 	stw	r2,8(sp)
81108f58:	00a04534 	movhi	r2,33044
81108f5c:	109eb904 	addi	r2,r2,31460
81108f60:	d8800115 	stw	r2,4(sp)
81108f64:	00800644 	movi	r2,25
81108f68:	d8800015 	stw	r2,0(sp)
81108f6c:	01c00644 	movi	r7,25
81108f70:	01a04574 	movhi	r6,33045
81108f74:	31a2b804 	addi	r6,r6,-29984
81108f78:	000b883a 	mov	r5,zero
81108f7c:	01204474 	movhi	r4,33041
81108f80:	21249104 	addi	r4,r4,-28092
81108f84:	1130f100 	call	81130f10 <OSTaskCreateExt>
81108f88:	e0bffe05 	stb	r2,-8(fp)
									OUT_ACK_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
81108f8c:	e0bffe03 	ldbu	r2,-8(fp)
81108f90:	10803fcc 	andi	r2,r2,255
81108f94:	10000526 	beq	r2,zero,81108fac <vInitialTask+0xfc>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108f98:	e0bffe03 	ldbu	r2,-8(fp)
81108f9c:	10803fcc 	andi	r2,r2,255
81108fa0:	1009883a 	mov	r4,r2
81108fa4:	110e3a40 	call	8110e3a4 <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81108fa8:	110f08c0 	call	8110f08c <vFailOutAckHandlerTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
81108fac:	01c00044 	movi	r7,1
81108fb0:	000d883a 	mov	r6,zero
81108fb4:	000b883a 	mov	r5,zero
81108fb8:	0009883a 	mov	r4,zero
81108fbc:	113213c0 	call	8113213c <OSTimeDlyHMSM>
									vInAckHandlerTask_stk,
									IN_ACK_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vInAckHandlerTaskV2,
81108fc0:	d8000415 	stw	zero,16(sp)
81108fc4:	d8000315 	stw	zero,12(sp)
81108fc8:	00810004 	movi	r2,1024
81108fcc:	d8800215 	stw	r2,8(sp)
81108fd0:	00a04534 	movhi	r2,33044
81108fd4:	108cb204 	addi	r2,r2,13000
81108fd8:	d8800115 	stw	r2,4(sp)
81108fdc:	008005c4 	movi	r2,23
81108fe0:	d8800015 	stw	r2,0(sp)
81108fe4:	01c005c4 	movi	r7,23
81108fe8:	01a04534 	movhi	r6,33044
81108fec:	3190b104 	addi	r6,r6,17092
81108ff0:	000b883a 	mov	r5,zero
81108ff4:	01204474 	movhi	r4,33041
81108ff8:	2121e004 	addi	r4,r4,-30848
81108ffc:	1130f100 	call	81130f10 <OSTaskCreateExt>
81109000:	e0bffe05 	stb	r2,-8(fp)
									IN_ACK_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
81109004:	e0bffe03 	ldbu	r2,-8(fp)
81109008:	10803fcc 	andi	r2,r2,255
8110900c:	10000526 	beq	r2,zero,81109024 <vInitialTask+0x174>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81109010:	e0bffe03 	ldbu	r2,-8(fp)
81109014:	10803fcc 	andi	r2,r2,255
81109018:	1009883a 	mov	r4,r2
8110901c:	110e3a40 	call	8110e3a4 <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81109020:	110f0400 	call	8110f040 <vFailInAckHandlerTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
81109024:	01c00044 	movi	r7,1
81109028:	000d883a 	mov	r6,zero
8110902c:	000b883a 	mov	r5,zero
81109030:	0009883a 	mov	r4,zero
81109034:	113213c0 	call	8113213c <OSTimeDlyHMSM>
									vParserCommTask_stk,
									PARSER_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CHK + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vParserCommTask,
81109038:	d8000415 	stw	zero,16(sp)
8110903c:	d8000315 	stw	zero,12(sp)
81109040:	00810004 	movi	r2,1024
81109044:	d8800215 	stw	r2,8(sp)
81109048:	00a04574 	movhi	r2,33045
8110904c:	10aba704 	addi	r2,r2,-20836
81109050:	d8800115 	stw	r2,4(sp)
81109054:	00800684 	movi	r2,26
81109058:	d8800015 	stw	r2,0(sp)
8110905c:	01c00684 	movi	r7,26
81109060:	01a04574 	movhi	r6,33045
81109064:	31afa604 	addi	r6,r6,-16744
81109068:	000b883a 	mov	r5,zero
8110906c:	01204474 	movhi	r4,33041
81109070:	21256b04 	addi	r4,r4,-27220
81109074:	1130f100 	call	81130f10 <OSTaskCreateExt>
81109078:	e0bffe05 	stb	r2,-8(fp)
									PARSER_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110907c:	e0bffe03 	ldbu	r2,-8(fp)
81109080:	10803fcc 	andi	r2,r2,255
81109084:	10000526 	beq	r2,zero,8110909c <vInitialTask+0x1ec>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81109088:	e0bffe03 	ldbu	r2,-8(fp)
8110908c:	10803fcc 	andi	r2,r2,255
81109090:	1009883a 	mov	r4,r2
81109094:	110e3a40 	call	8110e3a4 <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
81109098:	110eff40 	call	8110eff4 <vFailParserCommTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
8110909c:	01c00044 	movi	r7,1
811090a0:	000d883a 	mov	r6,zero
811090a4:	000b883a 	mov	r5,zero
811090a8:	0009883a 	mov	r4,zero
811090ac:	113213c0 	call	8113213c <OSTimeDlyHMSM>
									vReceiverUartTask_stk,
									RECEIVER_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CHK + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vReceiverUartTask,
811090b0:	d8000415 	stw	zero,16(sp)
811090b4:	d8000315 	stw	zero,12(sp)
811090b8:	00810004 	movi	r2,1024
811090bc:	d8800215 	stw	r2,8(sp)
811090c0:	00a04534 	movhi	r2,33044
811090c4:	109ab904 	addi	r2,r2,27364
811090c8:	d8800115 	stw	r2,4(sp)
811090cc:	00800784 	movi	r2,30
811090d0:	d8800015 	stw	r2,0(sp)
811090d4:	01c00784 	movi	r7,30
811090d8:	01a04534 	movhi	r6,33044
811090dc:	319eb804 	addi	r6,r6,31456
811090e0:	000b883a 	mov	r5,zero
811090e4:	01204474 	movhi	r4,33041
811090e8:	21284404 	addi	r4,r4,-24304
811090ec:	1130f100 	call	81130f10 <OSTaskCreateExt>
811090f0:	e0bffe05 	stb	r2,-8(fp)
									RECEIVER_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
811090f4:	e0bffe03 	ldbu	r2,-8(fp)
811090f8:	10803fcc 	andi	r2,r2,255
811090fc:	10000526 	beq	r2,zero,81109114 <vInitialTask+0x264>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81109100:	e0bffe03 	ldbu	r2,-8(fp)
81109104:	10803fcc 	andi	r2,r2,255
81109108:	1009883a 	mov	r4,r2
8110910c:	110e3a40 	call	8110e3a4 <printErrorTask>
		#endif
		vFailReceiverCreate();
81109110:	110e8f80 	call	8110e8f8 <vFailReceiverCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
81109114:	01c00044 	movi	r7,1
81109118:	000d883a 	mov	r6,zero
8110911c:	000b883a 	mov	r5,zero
81109120:	0009883a 	mov	r4,zero
81109124:	113213c0 	call	8113213c <OSTimeDlyHMSM>
									senderTask_stk,
									SENDER_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vSenderComTask,
81109128:	d8000415 	stw	zero,16(sp)
8110912c:	d8000315 	stw	zero,12(sp)
81109130:	00810004 	movi	r2,1024
81109134:	d8800215 	stw	r2,8(sp)
81109138:	00a04534 	movhi	r2,33044
8110913c:	10914a04 	addi	r2,r2,17704
81109140:	d8800115 	stw	r2,4(sp)
81109144:	00800604 	movi	r2,24
81109148:	d8800015 	stw	r2,0(sp)
8110914c:	01c00604 	movi	r7,24
81109150:	01a04534 	movhi	r6,33044
81109154:	31954904 	addi	r6,r6,21796
81109158:	000b883a 	mov	r5,zero
8110915c:	01204474 	movhi	r4,33041
81109160:	212ac604 	addi	r4,r4,-21736
81109164:	1130f100 	call	81130f10 <OSTaskCreateExt>
81109168:	e0bffe05 	stb	r2,-8(fp)
									SENDER_TASK_SIZE,
									NULL,
									0);
	#endif

	OSTimeDlyHMSM(0, 0, 0, 1);
8110916c:	01c00044 	movi	r7,1
81109170:	000d883a 	mov	r6,zero
81109174:	000b883a 	mov	r5,zero
81109178:	0009883a 	mov	r4,zero
8110917c:	113213c0 	call	8113213c <OSTimeDlyHMSM>





	if ( error_code != OS_ERR_NONE) {
81109180:	e0bffe03 	ldbu	r2,-8(fp)
81109184:	10803fcc 	andi	r2,r2,255
81109188:	10000526 	beq	r2,zero,811091a0 <vInitialTask+0x2f0>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
8110918c:	e0bffe03 	ldbu	r2,-8(fp)
81109190:	10803fcc 	andi	r2,r2,255
81109194:	1009883a 	mov	r4,r2
81109198:	110e3a40 	call	8110e3a4 <printErrorTask>
		#endif
		vFailSenderCreate();
8110919c:	110e9440 	call	8110e944 <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
811091a0:	d0a05817 	ldw	r2,-32416(gp)
811091a4:	e17ffe04 	addi	r5,fp,-8
811091a8:	1009883a 	mov	r4,r2
811091ac:	1132c300 	call	81132c30 <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
811091b0:	e0bffe03 	ldbu	r2,-8(fp)
811091b4:	10803fcc 	andi	r2,r2,255
811091b8:	10000126 	beq	r2,zero,811091c0 <vInitialTask+0x310>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
811091bc:	110f42c0 	call	8110f42c <vFailStartTimerRetransmission>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
811091c0:	01c00044 	movi	r7,1
811091c4:	000d883a 	mov	r6,zero
811091c8:	000b883a 	mov	r5,zero
811091cc:	0009883a 	mov	r4,zero
811091d0:	113213c0 	call	8113213c <OSTimeDlyHMSM>


	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
811091d4:	01003fc4 	movi	r4,255
811091d8:	11310fc0 	call	811310fc <OSTaskDel>
811091dc:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
811091e0:	e0bffe03 	ldbu	r2,-8(fp)
811091e4:	10803fcc 	andi	r2,r2,255
811091e8:	10001026 	beq	r2,zero,8110922c <vInitialTask+0x37c>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
811091ec:	e0bffe03 	ldbu	r2,-8(fp)
811091f0:	10803fcc 	andi	r2,r2,255
811091f4:	1009883a 	mov	r4,r2
811091f8:	110e3a40 	call	8110e3a4 <printErrorTask>
		#endif
		vFailDeleteInitialization();
811091fc:	110e9900 	call	8110e990 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81109200:	014009c4 	movi	r5,39
81109204:	01000044 	movi	r4,1
81109208:	11308640 	call	81130864 <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
8110920c:	01003fc4 	movi	r4,255
81109210:	11310fc0 	call	811310fc <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81109214:	000f883a 	mov	r7,zero
81109218:	01800284 	movi	r6,10
8110921c:	000b883a 	mov	r5,zero
81109220:	0009883a 	mov	r4,zero
81109224:	113213c0 	call	8113213c <OSTimeDlyHMSM>
		}
81109228:	003ff806 	br	8110920c <__reset+0xfb0e920c>
	}

}
8110922c:	0001883a 	nop
81109230:	e037883a 	mov	sp,fp
81109234:	dfc00117 	ldw	ra,4(sp)
81109238:	df000017 	ldw	fp,0(sp)
8110923c:	dec00204 	addi	sp,sp,8
81109240:	f800283a 	ret

81109244 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81109244:	defff704 	addi	sp,sp,-36
81109248:	de00012e 	bgeu	sp,et,81109250 <vOutAckHandlerTask+0xc>
8110924c:	003b68fa 	trap	3
81109250:	dfc00815 	stw	ra,32(sp)
81109254:	df000715 	stw	fp,28(sp)
81109258:	df000704 	addi	fp,sp,28
8110925c:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81109260:	e03ffac5 	stb	zero,-21(fp)
81109264:	e03ffb05 	stb	zero,-20(fp)
81109268:	e03ffb45 	stb	zero,-19(fp)
8110926c:	e03ffb85 	stb	zero,-18(fp)
81109270:	e03ffbc5 	stb	zero,-17(fp)
81109274:	e03ffc05 	stb	zero,-16(fp)
81109278:	e03ffc45 	stb	zero,-15(fp)
8110927c:	e03ffc85 	stb	zero,-14(fp)
81109280:	e03ffcc5 	stb	zero,-13(fp)
81109284:	e03ffd05 	stb	zero,-12(fp)
81109288:	e03ffd45 	stb	zero,-11(fp)
8110928c:	e03ffd85 	stb	zero,-10(fp)
81109290:	e03ffdc5 	stb	zero,-9(fp)
81109294:	e03ffe05 	stb	zero,-8(fp)
81109298:	e03ffe45 	stb	zero,-7(fp)
8110929c:	e03ffe85 	stb	zero,-6(fp)
    unsigned char crc = 0;
811092a0:	e03ffa45 	stb	zero,-23(fp)

	#ifdef DEBUG_ON
		debug(fp,"Out Ack Handler Task. (Task on)\n");
811092a4:	d0a04f17 	ldw	r2,-32452(gp)
811092a8:	100f883a 	mov	r7,r2
811092ac:	01800804 	movi	r6,32
811092b0:	01400044 	movi	r5,1
811092b4:	01204534 	movhi	r4,33044
811092b8:	2137b704 	addi	r4,r4,-8484
811092bc:	11126a00 	call	811126a0 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
811092c0:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
811092c4:	e0bff917 	ldw	r2,-28(fp)
811092c8:	10c00060 	cmpeqi	r3,r2,1
811092cc:	1800071e 	bne	r3,zero,811092ec <vOutAckHandlerTask+0xa8>
811092d0:	0080032e 	bgeu	zero,r2,811092e0 <vOutAckHandlerTask+0x9c>
811092d4:	108000a0 	cmpeqi	r2,r2,2
811092d8:	1000471e 	bne	r2,zero,811093f8 <vOutAckHandlerTask+0x1b4>
811092dc:	0000a806 	br	81109580 <vOutAckHandlerTask+0x33c>
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
811092e0:	00800044 	movi	r2,1
811092e4:	e0bff915 	stw	r2,-28(fp)
				break;
811092e8:	0000af06 	br	811095a8 <vOutAckHandlerTask+0x364>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                eSenderAckState = sSAGettingACK;
811092ec:	00800044 	movi	r2,1
811092f0:	e0bff915 	stw	r2,-28(fp)
                OSSemPend(xSemCountSenderACK, 0, &error_code);
811092f4:	d0a04e17 	ldw	r2,-32456(gp)
811092f8:	e0fffa84 	addi	r3,fp,-22
811092fc:	180d883a 	mov	r6,r3
81109300:	000b883a 	mov	r5,zero
81109304:	1009883a 	mov	r4,r2
81109308:	11301a40 	call	811301a4 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
8110930c:	e0bffa83 	ldbu	r2,-22(fp)
81109310:	10803fcc 	andi	r2,r2,255
81109314:	1000361e 	bne	r2,zero,811093f0 <vOutAckHandlerTask+0x1ac>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
81109318:	d0a05c17 	ldw	r2,-32400(gp)
8110931c:	e0fffa84 	addi	r3,fp,-22
81109320:	180d883a 	mov	r6,r3
81109324:	000b883a 	mov	r5,zero
81109328:	1009883a 	mov	r4,r2
8110932c:	112e1980 	call	8112e198 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81109330:	e0bffa83 	ldbu	r2,-22(fp)
81109334:	10803fcc 	andi	r2,r2,255
81109338:	10002b1e 	bne	r2,zero,811093e8 <vOutAckHandlerTask+0x1a4>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110933c:	e03ffa05 	stb	zero,-24(fp)
81109340:	00002206 	br	811093cc <vOutAckHandlerTask+0x188>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
81109344:	e0fffa03 	ldbu	r3,-24(fp)
81109348:	00a04574 	movhi	r2,33045
8110934c:	10afa704 	addi	r2,r2,-16740
81109350:	18c7883a 	add	r3,r3,r3
81109354:	18c7883a 	add	r3,r3,r3
81109358:	10c5883a 	add	r2,r2,r3
8110935c:	10800003 	ldbu	r2,0(r2)
81109360:	10803fcc 	andi	r2,r2,255
81109364:	1080201c 	xori	r2,r2,128
81109368:	10bfe004 	addi	r2,r2,-128
8110936c:	10001426 	beq	r2,zero,811093c0 <vOutAckHandlerTask+0x17c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81109370:	e0fffa03 	ldbu	r3,-24(fp)
81109374:	00a04574 	movhi	r2,33045
81109378:	10afa704 	addi	r2,r2,-16740
8110937c:	18c7883a 	add	r3,r3,r3
81109380:	18c7883a 	add	r3,r3,r3
81109384:	10c5883a 	add	r2,r2,r3
81109388:	10c0000b 	ldhu	r3,0(r2)
8110938c:	d0e0498d 	sth	r3,-32474(gp)
81109390:	1080008b 	ldhu	r2,2(r2)
81109394:	d0a04a0d 	sth	r2,-32472(gp)
                                eSenderAckState = sSASending;
81109398:	00800084 	movi	r2,2
8110939c:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811093a0:	e0fffa03 	ldbu	r3,-24(fp)
811093a4:	00a04574 	movhi	r2,33045
811093a8:	10afa704 	addi	r2,r2,-16740
811093ac:	18c7883a 	add	r3,r3,r3
811093b0:	18c7883a 	add	r3,r3,r3
811093b4:	10c5883a 	add	r2,r2,r3
811093b8:	10000005 	stb	zero,0(r2)
                                break;
811093bc:	00000606 	br	811093d8 <vOutAckHandlerTask+0x194>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
811093c0:	e0bffa03 	ldbu	r2,-24(fp)
811093c4:	10800044 	addi	r2,r2,1
811093c8:	e0bffa05 	stb	r2,-24(fp)
811093cc:	e0bffa03 	ldbu	r2,-24(fp)
811093d0:	10800230 	cmpltui	r2,r2,8
811093d4:	103fdb1e 	bne	r2,zero,81109344 <__reset+0xfb0e9344>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
811093d8:	d0a05c17 	ldw	r2,-32400(gp)
811093dc:	1009883a 	mov	r4,r2
811093e0:	112e73c0 	call	8112e73c <OSMutexPost>
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }

                break;
811093e4:	00007006 	br	811095a8 <vOutAckHandlerTask+0x364>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
811093e8:	110e6c00 	call	8110e6c0 <vFailGetMutexSenderTask>
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }

                break;
811093ec:	00006e06 	br	811095a8 <vOutAckHandlerTask+0x364>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
811093f0:	110e6580 	call	8110e658 <vFailGetCountSemaphoreSenderTask>
                }

                break;
811093f4:	00006c06 	br	811095a8 <vOutAckHandlerTask+0x364>
			case sSASending:
                
                /* First check if is an NACK packet that should be sent */
                if ( xSAckLocal.cType != '#' ) {
811093f8:	d0a04983 	ldbu	r2,-32474(gp)
811093fc:	10803fcc 	andi	r2,r2,255
81109400:	1080201c 	xori	r2,r2,128
81109404:	10bfe004 	addi	r2,r2,-128
81109408:	108008e0 	cmpeqi	r2,r2,35
8110940c:	1000201e 	bne	r2,zero,81109490 <vOutAckHandlerTask+0x24c>
                    /* In this state has a parsed ack packet in the variable xSAckLocal
                    we just need to calc the crc8 and create the uart packet to send. */
                    sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
81109410:	d0a049c3 	ldbu	r2,-32473(gp)
81109414:	10c03fcc 	andi	r3,r2,255
81109418:	18c0201c 	xori	r3,r3,128
8110941c:	18ffe004 	addi	r3,r3,-128
81109420:	d0a04a0b 	ldhu	r2,-32472(gp)
81109424:	113fffcc 	andi	r4,r2,65535
81109428:	e0bffac4 	addi	r2,fp,-21
8110942c:	200f883a 	mov	r7,r4
81109430:	180d883a 	mov	r6,r3
81109434:	01604534 	movhi	r5,33044
81109438:	2977c004 	addi	r5,r5,-8448
8110943c:	1009883a 	mov	r4,r2
81109440:	11139940 	call	81113994 <sprintf>
                    crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
81109444:	e0bffac4 	addi	r2,fp,-21
81109448:	1009883a 	mov	r4,r2
8110944c:	1113ba80 	call	81113ba8 <strlen>
81109450:	1007883a 	mov	r3,r2
81109454:	e0bffac4 	addi	r2,fp,-21
81109458:	180b883a 	mov	r5,r3
8110945c:	1009883a 	mov	r4,r2
81109460:	110e3480 	call	8110e348 <ucCrc8wInit>
81109464:	e0bffa45 	stb	r2,-23(fp)
                    sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
81109468:	e13ffa43 	ldbu	r4,-23(fp)
8110946c:	e0fffac4 	addi	r3,fp,-21
81109470:	e0bffac4 	addi	r2,fp,-21
81109474:	200f883a 	mov	r7,r4
81109478:	180d883a 	mov	r6,r3
8110947c:	01604534 	movhi	r5,33044
81109480:	2977c204 	addi	r5,r5,-8440
81109484:	1009883a 	mov	r4,r2
81109488:	11139940 	call	81113994 <sprintf>
8110948c:	00000c06 	br	811094c0 <vOutAckHandlerTask+0x27c>
                } else {
                    /* Nack */
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
81109490:	e0bffac4 	addi	r2,fp,-21
81109494:	00c008c4 	movi	r3,35
81109498:	10c00005 	stb	r3,0(r2)
8110949c:	00c01f04 	movi	r3,124
811094a0:	10c00045 	stb	r3,1(r2)
811094a4:	00c00d44 	movi	r3,53
811094a8:	10c00085 	stb	r3,2(r2)
811094ac:	00c00d04 	movi	r3,52
811094b0:	10c000c5 	stb	r3,3(r2)
811094b4:	00c00ec4 	movi	r3,59
811094b8:	10c00105 	stb	r3,4(r2)
811094bc:	10000145 	stb	zero,5(r2)
                }

#ifdef DEBUG_ON//todo:remover
    debug(fp,"vOutAckHandlerTask - Tentando pegar Mutex TX \n");
811094c0:	d0a04f17 	ldw	r2,-32452(gp)
811094c4:	100f883a 	mov	r7,r2
811094c8:	01800b84 	movi	r6,46
811094cc:	01400044 	movi	r5,1
811094d0:	01204534 	movhi	r4,33044
811094d4:	2137c504 	addi	r4,r4,-8428
811094d8:	11126a00 	call	811126a0 <fwrite>
#endif

                OSMutexPend(xTxUARTMutex, 100, &error_code); /* Wait max 100 ticks = 100 ms */
811094dc:	d0a05d17 	ldw	r2,-32396(gp)
811094e0:	e0fffa84 	addi	r3,fp,-22
811094e4:	180d883a 	mov	r6,r3
811094e8:	01401904 	movi	r5,100
811094ec:	1009883a 	mov	r4,r2
811094f0:	112e1980 	call	8112e198 <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
811094f4:	e0bffa83 	ldbu	r2,-22(fp)
811094f8:	10803fcc 	andi	r2,r2,255
811094fc:	10001c1e 	bne	r2,zero,81109570 <vOutAckHandlerTask+0x32c>
#ifdef DEBUG_ON//todo:remover
    debug(fp,"vOutAckHandlerTask - Sucesso Mutex TX \n");
81109500:	d0a04f17 	ldw	r2,-32452(gp)
81109504:	100f883a 	mov	r7,r2
81109508:	018009c4 	movi	r6,39
8110950c:	01400044 	movi	r5,1
81109510:	01204534 	movhi	r4,33044
81109514:	2137d104 	addi	r4,r4,-8380
81109518:	11126a00 	call	811126a0 <fwrite>
#endif
                    puts(cBufferAck);
8110951c:	e0bffac4 	addi	r2,fp,-21
81109520:	1009883a 	mov	r4,r2
81109524:	11136500 	call	81113650 <puts>
#ifdef DEBUG_ON//todo:remover
    debug(fp,"vOutAckHandlerTask - Tentando devolver Mutex TX \n");
81109528:	d0a04f17 	ldw	r2,-32452(gp)
8110952c:	100f883a 	mov	r7,r2
81109530:	01800c44 	movi	r6,49
81109534:	01400044 	movi	r5,1
81109538:	01204534 	movhi	r4,33044
8110953c:	2137db04 	addi	r4,r4,-8340
81109540:	11126a00 	call	811126a0 <fwrite>
#endif
                    OSMutexPost(xTxUARTMutex);
81109544:	d0a05d17 	ldw	r2,-32396(gp)
81109548:	1009883a 	mov	r4,r2
8110954c:	112e73c0 	call	8112e73c <OSMutexPost>
#ifdef DEBUG_ON//todo:remover
    debug(fp,"vOutAckHandlerTask - Devolveu \n");
81109550:	d0a04f17 	ldw	r2,-32452(gp)
81109554:	100f883a 	mov	r7,r2
81109558:	018007c4 	movi	r6,31
8110955c:	01400044 	movi	r5,1
81109560:	01204534 	movhi	r4,33044
81109564:	2137e804 	addi	r4,r4,-8288
81109568:	11126a00 	call	811126a0 <fwrite>
8110956c:	00000106 	br	81109574 <vOutAckHandlerTask+0x330>
#endif
                } else
                    vFailGetMutexTxUARTSenderTask(); /* Could not use the uart tx buffer to send the ack*/
81109570:	110e7f80 	call	8110e7f8 <vFailGetMutexTxUARTSenderTask>

                eSenderAckState = sSAGettingACK;
81109574:	00800044 	movi	r2,1
81109578:	e0bff915 	stw	r2,-28(fp)
                
				break;
8110957c:	00000a06 	br	811095a8 <vOutAckHandlerTask+0x364>
			default:
            	#ifdef DEBUG_ON
		            debug(fp,"Critical: Default State. Should never get here.(vOutAckHandlerTask)\n");
81109580:	d0a04f17 	ldw	r2,-32452(gp)
81109584:	100f883a 	mov	r7,r2
81109588:	01801104 	movi	r6,68
8110958c:	01400044 	movi	r5,1
81109590:	01204534 	movhi	r4,33044
81109594:	2137f004 	addi	r4,r4,-8256
81109598:	11126a00 	call	811126a0 <fwrite>
	            #endif
                eSenderAckState = sSAGettingACK;
8110959c:	00800044 	movi	r2,1
811095a0:	e0bff915 	stw	r2,-28(fp)
				break;
811095a4:	0001883a 	nop
		}
	}
811095a8:	003f4606 	br	811092c4 <__reset+0xfb0e92c4>

811095ac <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
811095ac:	deffc104 	addi	sp,sp,-252
811095b0:	de00012e 	bgeu	sp,et,811095b8 <vParserCommTask+0xc>
811095b4:	003b68fa 	trap	3
811095b8:	dfc03e15 	stw	ra,248(sp)
811095bc:	df003d15 	stw	fp,244(sp)
811095c0:	df003d04 	addi	fp,sp,244
811095c4:	e13fff15 	stw	r4,-4(fp)
	unsigned short int usiTypeL;
	unsigned short int usiSubTypeL;
	unsigned short int usiPUSidL;
	unsigned short int usiFeeInstL;
	bool bSuccess = FALSE;
811095c8:	e03fc915 	stw	zero,-220(fp)
	#ifdef DEBUG_ON
		char cPUSDebug[128];
	#endif

    #ifdef DEBUG_ON
        debug(fp,"Parser Comm Task. (Task on)\n");
811095cc:	d0a04f17 	ldw	r2,-32452(gp)
811095d0:	100f883a 	mov	r7,r2
811095d4:	01800704 	movi	r6,28
811095d8:	01400044 	movi	r5,1
811095dc:	01204534 	movhi	r4,33044
811095e0:	21380204 	addi	r4,r4,-8184
811095e4:	11126a00 	call	811126a0 <fwrite>
    #endif

	eParserMode = sConfiguring;
811095e8:	e03fc815 	stw	zero,-224(fp)

	for(;;){

		switch (eParserMode) {
811095ec:	e0bfc817 	ldw	r2,-224(fp)
811095f0:	10800168 	cmpgeui	r2,r2,5
811095f4:	1002541e 	bne	r2,zero,81109f48 <vParserCommTask+0x99c>
811095f8:	e0bfc817 	ldw	r2,-224(fp)
811095fc:	100690ba 	slli	r3,r2,2
81109600:	00a04474 	movhi	r2,33041
81109604:	10a58504 	addi	r2,r2,-27116
81109608:	1885883a 	add	r2,r3,r2
8110960c:	10800017 	ldw	r2,0(r2)
81109610:	1000683a 	jmp	r2
81109614:	81109628 	cmpgeui	r4,r16,16984
81109618:	81109634 	orhi	r4,r16,16984
8110961c:	811096c8 	cmpgei	r4,r16,16987
81109620:	81109820 	cmpeqi	r4,r16,16992
81109624:	81109868 	cmpgeui	r4,r16,16993
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingMessage;
81109628:	00800044 	movi	r2,1
8110962c:	e0bfc815 	stw	r2,-224(fp)
				break;
81109630:	00024806 	br	81109f54 <vParserCommTask+0x9a8>
			case sWaitingMessage:

				bSuccess = FALSE;
81109634:	e03fc915 	stw	zero,-220(fp)
				eParserMode = sWaitingMessage;
81109638:	00800044 	movi	r2,1
8110963c:	e0bfc815 	stw	r2,-224(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81109640:	d0a05117 	ldw	r2,-32444(gp)
81109644:	e0ffca84 	addi	r3,fp,-214
81109648:	180d883a 	mov	r6,r3
8110964c:	000b883a 	mov	r5,zero
81109650:	1009883a 	mov	r4,r2
81109654:	11301a40 	call	811301a4 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
81109658:	e0bfca83 	ldbu	r2,-214(fp)
8110965c:	10803fcc 	andi	r2,r2,255
81109660:	1000171e 	bne	r2,zero,811096c0 <vParserCommTask+0x114>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
81109664:	01204534 	movhi	r4,33044
81109668:	210b4204 	addi	r4,r4,11528
8110966c:	1109f580 	call	81109f58 <getPreParsedPacket>
81109670:	e0bfc915 	stw	r2,-220(fp)
					if (bSuccess == TRUE) {
81109674:	e0bfc917 	ldw	r2,-220(fp)
81109678:	10800058 	cmpnei	r2,r2,1
8110967c:	10000e1e 	bne	r2,zero,811096b8 <vParserCommTask+0x10c>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
81109680:	00a04534 	movhi	r2,33044
81109684:	108b4204 	addi	r2,r2,11528
81109688:	10800103 	ldbu	r2,4(r2)
8110968c:	10803fcc 	andi	r2,r2,255
81109690:	1080201c 	xori	r2,r2,128
81109694:	10bfe004 	addi	r2,r2,-128
81109698:	10800858 	cmpnei	r2,r2,33
8110969c:	1000031e 	bne	r2,zero,811096ac <vParserCommTask+0x100>
							eParserMode = sReplyParsing;
811096a0:	008000c4 	movi	r2,3
811096a4:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811096a8:	00022a06 	br	81109f54 <vParserCommTask+0x9a8>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
811096ac:	00800084 	movi	r2,2
811096b0:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811096b4:	00022706 	br	81109f54 <vParserCommTask+0x9a8>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
811096b8:	110ed840 	call	8110ed84 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811096bc:	00022506 	br	81109f54 <vParserCommTask+0x9a8>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
811096c0:	110ecb40 	call	8110ecb4 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
811096c4:	00022306 	br	81109f54 <vParserCommTask+0x9a8>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cCommand)
811096c8:	00a04534 	movhi	r2,33044
811096cc:	108b4204 	addi	r2,r2,11528
811096d0:	10800143 	ldbu	r2,5(r2)
811096d4:	10803fcc 	andi	r2,r2,255
811096d8:	1080201c 	xori	r2,r2,128
811096dc:	10bfe004 	addi	r2,r2,-128
811096e0:	10c01120 	cmpeqi	r3,r2,68
811096e4:	1800081e 	bne	r3,zero,81109708 <vParserCommTask+0x15c>
811096e8:	10c01420 	cmpeqi	r3,r2,80
811096ec:	18000a1e 	bne	r3,zero,81109718 <vParserCommTask+0x16c>
811096f0:	108010e0 	cmpeqi	r2,r2,67
811096f4:	10004626 	beq	r2,zero,81109810 <vParserCommTask+0x264>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
						vSendEthConf();
811096f8:	110cc780 	call	8110cc78 <vSendEthConf>
						eParserMode = sWaitingMessage;
811096fc:	00800044 	movi	r2,1
81109700:	e0bfc815 	stw	r2,-224(fp)
						break;
81109704:	00004506 	br	8110981c <vParserCommTask+0x270>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
81109708:	110cf080 	call	8110cf08 <vSendTurnOff>
						eParserMode = sWaitingMessage;
8110970c:	00800044 	movi	r2,1
81109710:	e0bfc815 	stw	r2,-224(fp)
                        break;						
81109714:	00004106 	br	8110981c <vParserCommTask+0x270>
                    case PUS_CMD: /*PUS command to MEB - TC*/

						#ifdef DEBUG_ON
							debug(fp,"PUS Received:\n");
81109718:	d0a04f17 	ldw	r2,-32452(gp)
8110971c:	100f883a 	mov	r7,r2
81109720:	01800384 	movi	r6,14
81109724:	01400044 	movi	r5,1
81109728:	01204534 	movhi	r4,33044
8110972c:	21380a04 	addi	r4,r4,-8152
81109730:	11126a00 	call	811126a0 <fwrite>
							memset(cPUSDebug,0,128);
81109734:	e0bfdf04 	addi	r2,fp,-132
81109738:	01802004 	movi	r6,128
8110973c:	000b883a 	mov	r5,zero
81109740:	1009883a 	mov	r4,r2
81109744:	11132040 	call	81113204 <memset>
							sprintf(cPUSDebug, "TC-> pid: %hu; pcat: %hu; srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", PreParsedLocal.usiValues[1], PreParsedLocal.usiValues[2], PreParsedLocal.usiValues[3], PreParsedLocal.usiValues[4], PreParsedLocal.usiValues[5]);
81109748:	00a04534 	movhi	r2,33044
8110974c:	108b4204 	addi	r2,r2,11528
81109750:	1080028b 	ldhu	r2,10(r2)
81109754:	117fffcc 	andi	r5,r2,65535
81109758:	00a04534 	movhi	r2,33044
8110975c:	108b4204 	addi	r2,r2,11528
81109760:	1080030b 	ldhu	r2,12(r2)
81109764:	11bfffcc 	andi	r6,r2,65535
81109768:	00a04534 	movhi	r2,33044
8110976c:	108b4204 	addi	r2,r2,11528
81109770:	1080038b 	ldhu	r2,14(r2)
81109774:	10ffffcc 	andi	r3,r2,65535
81109778:	00a04534 	movhi	r2,33044
8110977c:	108b4204 	addi	r2,r2,11528
81109780:	1080040b 	ldhu	r2,16(r2)
81109784:	113fffcc 	andi	r4,r2,65535
81109788:	00a04534 	movhi	r2,33044
8110978c:	108b4204 	addi	r2,r2,11528
81109790:	1080048b 	ldhu	r2,18(r2)
81109794:	10bfffcc 	andi	r2,r2,65535
81109798:	e23fdf04 	addi	r8,fp,-132
8110979c:	d8800215 	stw	r2,8(sp)
811097a0:	d9000115 	stw	r4,4(sp)
811097a4:	d8c00015 	stw	r3,0(sp)
811097a8:	300f883a 	mov	r7,r6
811097ac:	280d883a 	mov	r6,r5
811097b0:	01604534 	movhi	r5,33044
811097b4:	29780e04 	addi	r5,r5,-8136
811097b8:	4009883a 	mov	r4,r8
811097bc:	11139940 	call	81113994 <sprintf>
							debug(fp, cPUSDebug );
811097c0:	d0a04f17 	ldw	r2,-32452(gp)
811097c4:	e0ffdf04 	addi	r3,fp,-132
811097c8:	180b883a 	mov	r5,r3
811097cc:	1009883a 	mov	r4,r2
811097d0:	11120040 	call	81112004 <fprintf>
						#endif
	
						usiTypeL = PreParsedLocal.usiValues[3];
811097d4:	00a04534 	movhi	r2,33044
811097d8:	108b4204 	addi	r2,r2,11528
811097dc:	1080038b 	ldhu	r2,14(r2)
811097e0:	e0bfc60d 	sth	r2,-232(fp)
						usiSubTypeL = PreParsedLocal.usiValues[4];
811097e4:	00a04534 	movhi	r2,33044
811097e8:	108b4204 	addi	r2,r2,11528
811097ec:	1080040b 	ldhu	r2,16(r2)
811097f0:	e0bfc68d 	sth	r2,-230(fp)
						usiPUSidL = PreParsedLocal.usiValues[5];
811097f4:	00a04534 	movhi	r2,33044
811097f8:	108b4204 	addi	r2,r2,11528
811097fc:	1080048b 	ldhu	r2,18(r2)
81109800:	e0bfc70d 	sth	r2,-228(fp)

						eParserMode = sPusHandling;
81109804:	00800104 	movi	r2,4
81109808:	e0bfc815 	stw	r2,-224(fp)
                        break;						
8110980c:	00000306 	br	8110981c <vParserCommTask+0x270>
					default:
						eParserMode = sWaitingMessage;
81109810:	00800044 	movi	r2,1
81109814:	e0bfc815 	stw	r2,-224(fp)
						break;
81109818:	0001883a 	nop
				}
				break;
8110981c:	0001cd06 	br	81109f54 <vParserCommTask+0x9a8>
			case sReplyParsing:
				eParserMode = sWaitingMessage;
81109820:	00800044 	movi	r2,1
81109824:	e0bfc815 	stw	r2,-224(fp)
                switch ( usiTypeL )
81109828:	e0bfc60b 	ldhu	r2,-232(fp)
8110982c:	10c01220 	cmpeqi	r3,r2,72
81109830:	1800091e 	bne	r3,zero,81109858 <vParserCommTask+0x2ac>
81109834:	10c014e0 	cmpeqi	r3,r2,83
81109838:	1800091e 	bne	r3,zero,81109860 <vParserCommTask+0x2b4>
8110983c:	10801120 	cmpeqi	r2,r2,68
81109840:	10000226 	beq	r2,zero,8110984c <vParserCommTask+0x2a0>
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
81109844:	110cf080 	call	8110cf08 <vSendTurnOff>
						
						
                        break;
81109848:	00000606 	br	81109864 <vParserCommTask+0x2b8>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
                    default:
						eParserMode = sWaitingMessage;
8110984c:	00800044 	movi	r2,1
81109850:	e0bfc815 	stw	r2,-224(fp)
                        break;
81109854:	00000306 	br	81109864 <vParserCommTask+0x2b8>
						
                        break;
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
81109858:	0001883a 	nop
8110985c:	0001bd06 	br	81109f54 <vParserCommTask+0x9a8>
                switch ( usiTypeL )
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
81109860:	0001883a 	nop
                        break;
                    default:
						eParserMode = sWaitingMessage;
                        break;
                }
				break;
81109864:	0001bb06 	br	81109f54 <vParserCommTask+0x9a8>
			case sPusHandling:
				eParserMode = sWaitingMessage;
81109868:	00800044 	movi	r2,1
8110986c:	e0bfc815 	stw	r2,-224(fp)
				
                switch ( usiTypeL )
81109870:	e0bfc60b 	ldhu	r2,-232(fp)
81109874:	10c03ea0 	cmpeqi	r3,r2,250
81109878:	1800311e 	bne	r3,zero,81109940 <vParserCommTask+0x394>
8110987c:	10c03ec8 	cmpgei	r3,r2,251
81109880:	1800031e 	bne	r3,zero,81109890 <vParserCommTask+0x2e4>
81109884:	10800460 	cmpeqi	r2,r2,17
81109888:	1000061e 	bne	r2,zero,811098a4 <vParserCommTask+0x2f8>
8110988c:	0001aa06 	br	81109f38 <vParserCommTask+0x98c>
81109890:	10c03ee0 	cmpeqi	r3,r2,251
81109894:	1800621e 	bne	r3,zero,81109a20 <vParserCommTask+0x474>
81109898:	10803f20 	cmpeqi	r2,r2,252
8110989c:	1000ba1e 	bne	r2,zero,81109b88 <vParserCommTask+0x5dc>
811098a0:	0001a506 	br	81109f38 <vParserCommTask+0x98c>
                {
                    case 17: /* srv-Type = 17 */
						switch ( usiSubTypeL )
811098a4:	e0bfc68b 	ldhu	r2,-230(fp)
811098a8:	10800060 	cmpeqi	r2,r2,1
811098ac:	10000b26 	beq	r2,zero,811098dc <vParserCommTask+0x330>
						{
							case 1: /* TC_SCAM_TEST_CONNECTION */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_TEST_CONNECTION\n");
811098b0:	d0a04f17 	ldw	r2,-32452(gp)
811098b4:	100f883a 	mov	r7,r2
811098b8:	01800604 	movi	r6,24
811098bc:	01400044 	movi	r5,1
811098c0:	01204534 	movhi	r4,33044
811098c4:	21382104 	addi	r4,r4,-8060
811098c8:	11126a00 	call	811126a0 <fwrite>
								#endif

								/* Reply with the TM os connection */
								vTMPusTestConnection( usiPUSidL );
811098cc:	e0bfc70b 	ldhu	r2,-228(fp)
811098d0:	1009883a 	mov	r4,r2
811098d4:	110d5600 	call	8110d560 <vTMPusTestConnection>

								break;
811098d8:	00001806 	br	8110993c <vParserCommTask+0x390>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811098dc:	e0bfdf04 	addi	r2,fp,-132
811098e0:	01802004 	movi	r6,128
811098e4:	000b883a 	mov	r5,zero
811098e8:	1009883a 	mov	r4,r2
811098ec:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
811098f0:	e13fc60b 	ldhu	r4,-232(fp)
811098f4:	e17fc68b 	ldhu	r5,-230(fp)
811098f8:	e0bfc70b 	ldhu	r2,-228(fp)
811098fc:	e0ffdf04 	addi	r3,fp,-132
81109900:	d8800015 	stw	r2,0(sp)
81109904:	280f883a 	mov	r7,r5
81109908:	200d883a 	mov	r6,r4
8110990c:	01604534 	movhi	r5,33044
81109910:	29782804 	addi	r5,r5,-8032
81109914:	1809883a 	mov	r4,r3
81109918:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
8110991c:	d0a04f17 	ldw	r2,-32452(gp)
81109920:	e0ffdf04 	addi	r3,fp,-132
81109924:	180b883a 	mov	r5,r3
81109928:	1009883a 	mov	r4,r2
8110992c:	11120040 	call	81112004 <fprintf>
								#endif
								eParserMode = sWaitingMessage;
81109930:	00800044 	movi	r2,1
81109934:	e0bfc815 	stw	r2,-224(fp)
								break;
81109938:	0001883a 	nop
						}
                        break;
8110993c:	00018106 	br	81109f44 <vParserCommTask+0x998>
                    case 250: /* srv-Type = 250 */
						switch ( usiSubTypeL )
81109940:	e0bfc68b 	ldhu	r2,-230(fp)
81109944:	10c00f20 	cmpeqi	r3,r2,60
81109948:	18000c1e 	bne	r3,zero,8110997c <vParserCommTask+0x3d0>
8110994c:	10c00f60 	cmpeqi	r3,r2,61
81109950:	1800121e 	bne	r3,zero,8110999c <vParserCommTask+0x3f0>
81109954:	10800ee0 	cmpeqi	r2,r2,59
81109958:	10001826 	beq	r2,zero,811099bc <vParserCommTask+0x410>
						{
							case 59: /* TC_SCAM_RESET */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RESET\n");
8110995c:	d0a04f17 	ldw	r2,-32452(gp)
81109960:	100f883a 	mov	r7,r2
81109964:	01800384 	movi	r6,14
81109968:	01400044 	movi	r5,1
8110996c:	01204534 	movhi	r4,33044
81109970:	21383804 	addi	r4,r4,-7968
81109974:	11126a00 	call	811126a0 <fwrite>
								#endif

								
								break;
81109978:	00002806 	br	81109a1c <vParserCommTask+0x470>
							case 60: /* TC_SCAM_CONFIG */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_CONFIG\n");
8110997c:	d0a04f17 	ldw	r2,-32452(gp)
81109980:	100f883a 	mov	r7,r2
81109984:	018003c4 	movi	r6,15
81109988:	01400044 	movi	r5,1
8110998c:	01204534 	movhi	r4,33044
81109990:	21383c04 	addi	r4,r4,-7952
81109994:	11126a00 	call	811126a0 <fwrite>
								#endif


								break;
81109998:	00002006 	br	81109a1c <vParserCommTask+0x470>
							case 61: /* TC_SCAM_RUN */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RUN\n");
8110999c:	d0a04f17 	ldw	r2,-32452(gp)
811099a0:	100f883a 	mov	r7,r2
811099a4:	01800304 	movi	r6,12
811099a8:	01400044 	movi	r5,1
811099ac:	01204534 	movhi	r4,33044
811099b0:	21384004 	addi	r4,r4,-7936
811099b4:	11126a00 	call	811126a0 <fwrite>
								#endif


								break;
811099b8:	00001806 	br	81109a1c <vParserCommTask+0x470>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811099bc:	e0bfdf04 	addi	r2,fp,-132
811099c0:	01802004 	movi	r6,128
811099c4:	000b883a 	mov	r5,zero
811099c8:	1009883a 	mov	r4,r2
811099cc:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
811099d0:	e13fc60b 	ldhu	r4,-232(fp)
811099d4:	e17fc68b 	ldhu	r5,-230(fp)
811099d8:	e0bfc70b 	ldhu	r2,-228(fp)
811099dc:	e0ffdf04 	addi	r3,fp,-132
811099e0:	d8800015 	stw	r2,0(sp)
811099e4:	280f883a 	mov	r7,r5
811099e8:	200d883a 	mov	r6,r4
811099ec:	01604534 	movhi	r5,33044
811099f0:	29782804 	addi	r5,r5,-8032
811099f4:	1809883a 	mov	r4,r3
811099f8:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
811099fc:	d0a04f17 	ldw	r2,-32452(gp)
81109a00:	e0ffdf04 	addi	r3,fp,-132
81109a04:	180b883a 	mov	r5,r3
81109a08:	1009883a 	mov	r4,r2
81109a0c:	11120040 	call	81112004 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109a10:	00800044 	movi	r2,1
81109a14:	e0bfc815 	stw	r2,-224(fp)
								break;
81109a18:	0001883a 	nop
						}
                        break;
81109a1c:	00014906 	br	81109f44 <vParserCommTask+0x998>
                    case 251: /* srv-Type = 251 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
81109a20:	00a04534 	movhi	r2,33044
81109a24:	108b4204 	addi	r2,r2,11528
81109a28:	1080050b 	ldhu	r2,20(r2)
81109a2c:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
81109a30:	e0bfc68b 	ldhu	r2,-230(fp)
81109a34:	10c000a0 	cmpeqi	r3,r2,2
81109a38:	1800161e 	bne	r3,zero,81109a94 <vParserCommTask+0x4e8>
81109a3c:	10c000e0 	cmpeqi	r3,r2,3
81109a40:	1800261e 	bne	r3,zero,81109adc <vParserCommTask+0x530>
81109a44:	10800060 	cmpeqi	r2,r2,1
81109a48:	10003626 	beq	r2,zero,81109b24 <vParserCommTask+0x578>
						{
							case 1: /* TC_SCAM_FEE_CONFIG_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109a4c:	e0bfdf04 	addi	r2,fp,-132
81109a50:	01802004 	movi	r6,128
81109a54:	000b883a 	mov	r5,zero
81109a58:	1009883a 	mov	r4,r2
81109a5c:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CONFIG_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109a60:	e0ffca0b 	ldhu	r3,-216(fp)
81109a64:	e0bfdf04 	addi	r2,fp,-132
81109a68:	180d883a 	mov	r6,r3
81109a6c:	01604534 	movhi	r5,33044
81109a70:	29784404 	addi	r5,r5,-7920
81109a74:	1009883a 	mov	r4,r2
81109a78:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109a7c:	d0a04f17 	ldw	r2,-32452(gp)
81109a80:	e0ffdf04 	addi	r3,fp,-132
81109a84:	180b883a 	mov	r5,r3
81109a88:	1009883a 	mov	r4,r2
81109a8c:	11120040 	call	81112004 <fprintf>
								#endif							


								break;
81109a90:	00003c06 	br	81109b84 <vParserCommTask+0x5d8>
							case 2: /* TC_SCAM_FEE_STANDBY_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109a94:	e0bfdf04 	addi	r2,fp,-132
81109a98:	01802004 	movi	r6,128
81109a9c:	000b883a 	mov	r5,zero
81109aa0:	1009883a 	mov	r4,r2
81109aa4:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_STANDBY_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109aa8:	e0ffca0b 	ldhu	r3,-216(fp)
81109aac:	e0bfdf04 	addi	r2,fp,-132
81109ab0:	180d883a 	mov	r6,r3
81109ab4:	01604534 	movhi	r5,33044
81109ab8:	29785004 	addi	r5,r5,-7872
81109abc:	1009883a 	mov	r4,r2
81109ac0:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109ac4:	d0a04f17 	ldw	r2,-32452(gp)
81109ac8:	e0ffdf04 	addi	r3,fp,-132
81109acc:	180b883a 	mov	r5,r3
81109ad0:	1009883a 	mov	r4,r2
81109ad4:	11120040 	call	81112004 <fprintf>
								#endif


								break;
81109ad8:	00002a06 	br	81109b84 <vParserCommTask+0x5d8>
							case 3: /* TC_SCAM_FEE_CALIBRATION_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109adc:	e0bfdf04 	addi	r2,fp,-132
81109ae0:	01802004 	movi	r6,128
81109ae4:	000b883a 	mov	r5,zero
81109ae8:	1009883a 	mov	r4,r2
81109aec:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CALIBRATION_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109af0:	e0ffca0b 	ldhu	r3,-216(fp)
81109af4:	e0bfdf04 	addi	r2,fp,-132
81109af8:	180d883a 	mov	r6,r3
81109afc:	01604534 	movhi	r5,33044
81109b00:	29785c04 	addi	r5,r5,-7824
81109b04:	1009883a 	mov	r4,r2
81109b08:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109b0c:	d0a04f17 	ldw	r2,-32452(gp)
81109b10:	e0ffdf04 	addi	r3,fp,-132
81109b14:	180b883a 	mov	r5,r3
81109b18:	1009883a 	mov	r4,r2
81109b1c:	11120040 	call	81112004 <fprintf>
								#endif


								break;
81109b20:	00001806 	br	81109b84 <vParserCommTask+0x5d8>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109b24:	e0bfdf04 	addi	r2,fp,-132
81109b28:	01802004 	movi	r6,128
81109b2c:	000b883a 	mov	r5,zero
81109b30:	1009883a 	mov	r4,r2
81109b34:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109b38:	e13fc60b 	ldhu	r4,-232(fp)
81109b3c:	e17fc68b 	ldhu	r5,-230(fp)
81109b40:	e0bfc70b 	ldhu	r2,-228(fp)
81109b44:	e0ffdf04 	addi	r3,fp,-132
81109b48:	d8800015 	stw	r2,0(sp)
81109b4c:	280f883a 	mov	r7,r5
81109b50:	200d883a 	mov	r6,r4
81109b54:	01604534 	movhi	r5,33044
81109b58:	29782804 	addi	r5,r5,-8032
81109b5c:	1809883a 	mov	r4,r3
81109b60:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109b64:	d0a04f17 	ldw	r2,-32452(gp)
81109b68:	e0ffdf04 	addi	r3,fp,-132
81109b6c:	180b883a 	mov	r5,r3
81109b70:	1009883a 	mov	r4,r2
81109b74:	11120040 	call	81112004 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109b78:	00800044 	movi	r2,1
81109b7c:	e0bfc815 	stw	r2,-224(fp)
								break;
81109b80:	0001883a 	nop
						}
                        break;
81109b84:	0000ef06 	br	81109f44 <vParserCommTask+0x998>
					case 252: /* srv-Type = 252 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
81109b88:	00a04534 	movhi	r2,33044
81109b8c:	108b4204 	addi	r2,r2,11528
81109b90:	1080050b 	ldhu	r2,20(r2)
81109b94:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
81109b98:	e0bfc68b 	ldhu	r2,-230(fp)
81109b9c:	10c000e0 	cmpeqi	r3,r2,3
81109ba0:	18000a1e 	bne	r3,zero,81109bcc <vParserCommTask+0x620>
81109ba4:	10c00108 	cmpgei	r3,r2,4
81109ba8:	1800031e 	bne	r3,zero,81109bb8 <vParserCommTask+0x60c>
81109bac:	108000a0 	cmpeqi	r2,r2,2
81109bb0:	10003c1e 	bne	r2,zero,81109ca4 <vParserCommTask+0x6f8>
81109bb4:	0000c706 	br	81109ed4 <vParserCommTask+0x928>
81109bb8:	10c00120 	cmpeqi	r3,r2,4
81109bbc:	1800151e 	bne	r3,zero,81109c14 <vParserCommTask+0x668>
81109bc0:	10800160 	cmpeqi	r2,r2,5
81109bc4:	1000251e 	bne	r2,zero,81109c5c <vParserCommTask+0x6b0>
81109bc8:	0000c206 	br	81109ed4 <vParserCommTask+0x928>
						{					
							case 3: /* TC_SCAM_SPW_LINK_ENABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109bcc:	e0bfdf04 	addi	r2,fp,-132
81109bd0:	01802004 	movi	r6,128
81109bd4:	000b883a 	mov	r5,zero
81109bd8:	1009883a 	mov	r4,r2
81109bdc:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_ENABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109be0:	e0ffca0b 	ldhu	r3,-216(fp)
81109be4:	e0bfdf04 	addi	r2,fp,-132
81109be8:	180d883a 	mov	r6,r3
81109bec:	01604534 	movhi	r5,33044
81109bf0:	29786904 	addi	r5,r5,-7772
81109bf4:	1009883a 	mov	r4,r2
81109bf8:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109bfc:	d0a04f17 	ldw	r2,-32452(gp)
81109c00:	e0ffdf04 	addi	r3,fp,-132
81109c04:	180b883a 	mov	r5,r3
81109c08:	1009883a 	mov	r4,r2
81109c0c:	11120040 	call	81112004 <fprintf>
								#endif


								break;
81109c10:	0000c806 	br	81109f34 <vParserCommTask+0x988>
							case 4: /* TC_SCAM_SPW_LINK_DISABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109c14:	e0bfdf04 	addi	r2,fp,-132
81109c18:	01802004 	movi	r6,128
81109c1c:	000b883a 	mov	r5,zero
81109c20:	1009883a 	mov	r4,r2
81109c24:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_DISABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109c28:	e0ffca0b 	ldhu	r3,-216(fp)
81109c2c:	e0bfdf04 	addi	r2,fp,-132
81109c30:	180d883a 	mov	r6,r3
81109c34:	01604534 	movhi	r5,33044
81109c38:	29787604 	addi	r5,r5,-7720
81109c3c:	1009883a 	mov	r4,r2
81109c40:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109c44:	d0a04f17 	ldw	r2,-32452(gp)
81109c48:	e0ffdf04 	addi	r3,fp,-132
81109c4c:	180b883a 	mov	r5,r3
81109c50:	1009883a 	mov	r4,r2
81109c54:	11120040 	call	81112004 <fprintf>
								#endif


								break;
81109c58:	0000b606 	br	81109f34 <vParserCommTask+0x988>
							case 5: /* TC_SCAM_SPW_LINK_RESET */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109c5c:	e0bfdf04 	addi	r2,fp,-132
81109c60:	01802004 	movi	r6,128
81109c64:	000b883a 	mov	r5,zero
81109c68:	1009883a 	mov	r4,r2
81109c6c:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_RESET-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109c70:	e0ffca0b 	ldhu	r3,-216(fp)
81109c74:	e0bfdf04 	addi	r2,fp,-132
81109c78:	180d883a 	mov	r6,r3
81109c7c:	01604534 	movhi	r5,33044
81109c80:	29788304 	addi	r5,r5,-7668
81109c84:	1009883a 	mov	r4,r2
81109c88:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109c8c:	d0a04f17 	ldw	r2,-32452(gp)
81109c90:	e0ffdf04 	addi	r3,fp,-132
81109c94:	180b883a 	mov	r5,r3
81109c98:	1009883a 	mov	r4,r2
81109c9c:	11120040 	call	81112004 <fprintf>
								#endif


								break;
81109ca0:	0000a406 	br	81109f34 <vParserCommTask+0x988>
							case 2: /* TC_SCAM_SPW_RMAP_CONFIG_UPDATE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109ca4:	e0bfdf04 	addi	r2,fp,-132
81109ca8:	01802004 	movi	r6,128
81109cac:	000b883a 	mov	r5,zero
81109cb0:	1009883a 	mov	r4,r2
81109cb4:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_RMAP_CONFIG_UPDATE->\n");
81109cb8:	e0bfdf04 	addi	r2,fp,-132
81109cbc:	00d4d7f4 	movhi	r3,21343
81109cc0:	18d0d504 	addi	r3,r3,17236
81109cc4:	10c00015 	stw	r3,0(r2)
81109cc8:	00d7d374 	movhi	r3,24397
81109ccc:	18d050c4 	addi	r3,r3,16707
81109cd0:	10c00115 	stw	r3,4(r2)
81109cd4:	00d7d5f4 	movhi	r3,24407
81109cd8:	18d414c4 	addi	r3,r3,20563
81109cdc:	10c00215 	stw	r3,8(r2)
81109ce0:	00d41074 	movhi	r3,20545
81109ce4:	18d35484 	addi	r3,r3,19794
81109ce8:	10c00315 	stw	r3,12(r2)
81109cec:	00d393f4 	movhi	r3,20047
81109cf0:	18d0d7c4 	addi	r3,r3,17247
81109cf4:	10c00415 	stw	r3,16(r2)
81109cf8:	00d7d1f4 	movhi	r3,24391
81109cfc:	18d25184 	addi	r3,r3,18758
81109d00:	10c00515 	stw	r3,20(r2)
81109d04:	00d05134 	movhi	r3,16708
81109d08:	18d41544 	addi	r3,r3,20565
81109d0c:	10c00615 	stw	r3,24(r2)
81109d10:	00cf8b74 	movhi	r3,15917
81109d14:	18d15504 	addi	r3,r3,17748
81109d18:	10c00715 	stw	r3,28(r2)
81109d1c:	00c00284 	movi	r3,10
81109d20:	10c0080d 	sth	r3,32(r2)
									debug(fp, cPUSDebug );
81109d24:	d0a04f17 	ldw	r2,-32452(gp)
81109d28:	e0ffdf04 	addi	r3,fp,-132
81109d2c:	180b883a 	mov	r5,r3
81109d30:	1009883a 	mov	r4,r2
81109d34:	11120040 	call	81112004 <fprintf>
									sprintf(cPUSDebug, "- FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109d38:	e0ffca0b 	ldhu	r3,-216(fp)
81109d3c:	e0bfdf04 	addi	r2,fp,-132
81109d40:	180d883a 	mov	r6,r3
81109d44:	01604534 	movhi	r5,33044
81109d48:	29788f04 	addi	r5,r5,-7620
81109d4c:	1009883a 	mov	r4,r2
81109d50:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109d54:	d0a04f17 	ldw	r2,-32452(gp)
81109d58:	e0ffdf04 	addi	r3,fp,-132
81109d5c:	180b883a 	mov	r5,r3
81109d60:	1009883a 	mov	r4,r2
81109d64:	11120040 	call	81112004 <fprintf>
									sprintf(cPUSDebug, "- MODE: %hu;\n", PreParsedLocal.usiValues[7] );
81109d68:	00a04534 	movhi	r2,33044
81109d6c:	108b4204 	addi	r2,r2,11528
81109d70:	1080058b 	ldhu	r2,22(r2)
81109d74:	10ffffcc 	andi	r3,r2,65535
81109d78:	e0bfdf04 	addi	r2,fp,-132
81109d7c:	180d883a 	mov	r6,r3
81109d80:	01604534 	movhi	r5,33044
81109d84:	29789604 	addi	r5,r5,-7592
81109d88:	1009883a 	mov	r4,r2
81109d8c:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109d90:	d0a04f17 	ldw	r2,-32452(gp)
81109d94:	e0ffdf04 	addi	r3,fp,-132
81109d98:	180b883a 	mov	r5,r3
81109d9c:	1009883a 	mov	r4,r2
81109da0:	11120040 	call	81112004 <fprintf>
									sprintf(cPUSDebug, "- LINK_SPEED: %hu;\n", PreParsedLocal.usiValues[8] );
81109da4:	00a04534 	movhi	r2,33044
81109da8:	108b4204 	addi	r2,r2,11528
81109dac:	1080060b 	ldhu	r2,24(r2)
81109db0:	10ffffcc 	andi	r3,r2,65535
81109db4:	e0bfdf04 	addi	r2,fp,-132
81109db8:	180d883a 	mov	r6,r3
81109dbc:	01604534 	movhi	r5,33044
81109dc0:	29789a04 	addi	r5,r5,-7576
81109dc4:	1009883a 	mov	r4,r2
81109dc8:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109dcc:	d0a04f17 	ldw	r2,-32452(gp)
81109dd0:	e0ffdf04 	addi	r3,fp,-132
81109dd4:	180b883a 	mov	r5,r3
81109dd8:	1009883a 	mov	r4,r2
81109ddc:	11120040 	call	81112004 <fprintf>
									sprintf(cPUSDebug, "- LOGICAL_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[9] );
81109de0:	00a04534 	movhi	r2,33044
81109de4:	108b4204 	addi	r2,r2,11528
81109de8:	1080068b 	ldhu	r2,26(r2)
81109dec:	10ffffcc 	andi	r3,r2,65535
81109df0:	e0bfdf04 	addi	r2,fp,-132
81109df4:	180d883a 	mov	r6,r3
81109df8:	01604534 	movhi	r5,33044
81109dfc:	29789f04 	addi	r5,r5,-7556
81109e00:	1009883a 	mov	r4,r2
81109e04:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109e08:	d0a04f17 	ldw	r2,-32452(gp)
81109e0c:	e0ffdf04 	addi	r3,fp,-132
81109e10:	180b883a 	mov	r5,r3
81109e14:	1009883a 	mov	r4,r2
81109e18:	11120040 	call	81112004 <fprintf>
									sprintf(cPUSDebug, "- DEST_NODE_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[10] );
81109e1c:	00a04534 	movhi	r2,33044
81109e20:	108b4204 	addi	r2,r2,11528
81109e24:	1080070b 	ldhu	r2,28(r2)
81109e28:	10ffffcc 	andi	r3,r2,65535
81109e2c:	e0bfdf04 	addi	r2,fp,-132
81109e30:	180d883a 	mov	r6,r3
81109e34:	01604534 	movhi	r5,33044
81109e38:	2978a604 	addi	r5,r5,-7528
81109e3c:	1009883a 	mov	r4,r2
81109e40:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109e44:	d0a04f17 	ldw	r2,-32452(gp)
81109e48:	e0ffdf04 	addi	r3,fp,-132
81109e4c:	180b883a 	mov	r5,r3
81109e50:	1009883a 	mov	r4,r2
81109e54:	11120040 	call	81112004 <fprintf>
									sprintf(cPUSDebug, "- TIME_CODE_GEN: %hu;\n", PreParsedLocal.usiValues[11] );
81109e58:	00a04534 	movhi	r2,33044
81109e5c:	108b4204 	addi	r2,r2,11528
81109e60:	1080078b 	ldhu	r2,30(r2)
81109e64:	10ffffcc 	andi	r3,r2,65535
81109e68:	e0bfdf04 	addi	r2,fp,-132
81109e6c:	180d883a 	mov	r6,r3
81109e70:	01604534 	movhi	r5,33044
81109e74:	2978ad04 	addi	r5,r5,-7500
81109e78:	1009883a 	mov	r4,r2
81109e7c:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109e80:	d0a04f17 	ldw	r2,-32452(gp)
81109e84:	e0ffdf04 	addi	r3,fp,-132
81109e88:	180b883a 	mov	r5,r3
81109e8c:	1009883a 	mov	r4,r2
81109e90:	11120040 	call	81112004 <fprintf>
									sprintf(cPUSDebug, "- RMAP_KEY: 0x%02X;\n", PreParsedLocal.usiValues[12] );
81109e94:	00a04534 	movhi	r2,33044
81109e98:	108b4204 	addi	r2,r2,11528
81109e9c:	1080080b 	ldhu	r2,32(r2)
81109ea0:	10ffffcc 	andi	r3,r2,65535
81109ea4:	e0bfdf04 	addi	r2,fp,-132
81109ea8:	180d883a 	mov	r6,r3
81109eac:	01604534 	movhi	r5,33044
81109eb0:	2978b304 	addi	r5,r5,-7476
81109eb4:	1009883a 	mov	r4,r2
81109eb8:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109ebc:	d0a04f17 	ldw	r2,-32452(gp)
81109ec0:	e0ffdf04 	addi	r3,fp,-132
81109ec4:	180b883a 	mov	r5,r3
81109ec8:	1009883a 	mov	r4,r2
81109ecc:	11120040 	call	81112004 <fprintf>
								#endif



								break;
81109ed0:	00001806 	br	81109f34 <vParserCommTask+0x988>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109ed4:	e0bfdf04 	addi	r2,fp,-132
81109ed8:	01802004 	movi	r6,128
81109edc:	000b883a 	mov	r5,zero
81109ee0:	1009883a 	mov	r4,r2
81109ee4:	11132040 	call	81113204 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109ee8:	e13fc60b 	ldhu	r4,-232(fp)
81109eec:	e17fc68b 	ldhu	r5,-230(fp)
81109ef0:	e0bfc70b 	ldhu	r2,-228(fp)
81109ef4:	e0ffdf04 	addi	r3,fp,-132
81109ef8:	d8800015 	stw	r2,0(sp)
81109efc:	280f883a 	mov	r7,r5
81109f00:	200d883a 	mov	r6,r4
81109f04:	01604534 	movhi	r5,33044
81109f08:	29782804 	addi	r5,r5,-8032
81109f0c:	1809883a 	mov	r4,r3
81109f10:	11139940 	call	81113994 <sprintf>
									debug(fp, cPUSDebug );
81109f14:	d0a04f17 	ldw	r2,-32452(gp)
81109f18:	e0ffdf04 	addi	r3,fp,-132
81109f1c:	180b883a 	mov	r5,r3
81109f20:	1009883a 	mov	r4,r2
81109f24:	11120040 	call	81112004 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109f28:	00800044 	movi	r2,1
81109f2c:	e0bfc815 	stw	r2,-224(fp)
								break;
81109f30:	0001883a 	nop
						}
                        break;
81109f34:	00000306 	br	81109f44 <vParserCommTask+0x998>
                    default:
						eParserMode = sWaitingMessage;
81109f38:	00800044 	movi	r2,1
81109f3c:	e0bfc815 	stw	r2,-224(fp)
                        break;
81109f40:	0001883a 	nop
                }
				break;				
81109f44:	00000306 	br	81109f54 <vParserCommTask+0x9a8>
			default:
				eParserMode = sWaitingMessage;
81109f48:	00800044 	movi	r2,1
81109f4c:	e0bfc815 	stw	r2,-224(fp)
				break;
81109f50:	0001883a 	nop
		}
	}
81109f54:	003da506 	br	811095ec <__reset+0xfb0e95ec>

81109f58 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
81109f58:	defffb04 	addi	sp,sp,-20
81109f5c:	de00012e 	bgeu	sp,et,81109f64 <getPreParsedPacket+0xc>
81109f60:	003b68fa 	trap	3
81109f64:	dfc00415 	stw	ra,16(sp)
81109f68:	df000315 	stw	fp,12(sp)
81109f6c:	df000304 	addi	fp,sp,12
81109f70:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109f74:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
81109f78:	d0a05617 	ldw	r2,-32424(gp)
81109f7c:	e0fffe44 	addi	r3,fp,-7
81109f80:	180d883a 	mov	r6,r3
81109f84:	000b883a 	mov	r5,zero
81109f88:	1009883a 	mov	r4,r2
81109f8c:	112e1980 	call	8112e198 <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
81109f90:	e0bffe43 	ldbu	r2,-7(fp)
81109f94:	10803fcc 	andi	r2,r2,255
81109f98:	10002e1e 	bne	r2,zero,8110a054 <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for( i = 0; i < N_PREPARSED_ENTRIES; i++)
81109f9c:	e03ffe05 	stb	zero,-8(fp)
81109fa0:	00002506 	br	8110a038 <getPreParsedPacket+0xe0>
		{

            if ( xPreParsed[i].cType != 0 ) {
81109fa4:	e0fffe03 	ldbu	r3,-8(fp)
81109fa8:	00a04574 	movhi	r2,33045
81109fac:	10afaf04 	addi	r2,r2,-16708
81109fb0:	18c01324 	muli	r3,r3,76
81109fb4:	10c5883a 	add	r2,r2,r3
81109fb8:	10800104 	addi	r2,r2,4
81109fbc:	10800003 	ldbu	r2,0(r2)
81109fc0:	10803fcc 	andi	r2,r2,255
81109fc4:	1080201c 	xori	r2,r2,128
81109fc8:	10bfe004 	addi	r2,r2,-128
81109fcc:	10001726 	beq	r2,zero,8110a02c <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
81109fd0:	e0fffe03 	ldbu	r3,-8(fp)
81109fd4:	e13fff17 	ldw	r4,-4(fp)
81109fd8:	00a04574 	movhi	r2,33045
81109fdc:	10afaf04 	addi	r2,r2,-16708
81109fe0:	18c01324 	muli	r3,r3,76
81109fe4:	10c5883a 	add	r2,r2,r3
81109fe8:	2007883a 	mov	r3,r4
81109fec:	1009883a 	mov	r4,r2
81109ff0:	00801304 	movi	r2,76
81109ff4:	100d883a 	mov	r6,r2
81109ff8:	200b883a 	mov	r5,r4
81109ffc:	1809883a 	mov	r4,r3
8110a000:	11130b40 	call	811130b4 <memcpy>
                bSuccess = TRUE;
8110a004:	00800044 	movi	r2,1
8110a008:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
8110a00c:	e0fffe03 	ldbu	r3,-8(fp)
8110a010:	00a04574 	movhi	r2,33045
8110a014:	10afaf04 	addi	r2,r2,-16708
8110a018:	18c01324 	muli	r3,r3,76
8110a01c:	10c5883a 	add	r2,r2,r3
8110a020:	10800104 	addi	r2,r2,4
8110a024:	10000005 	stb	zero,0(r2)
                break;
8110a028:	00000606 	br	8110a044 <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for( i = 0; i < N_PREPARSED_ENTRIES; i++)
8110a02c:	e0bffe03 	ldbu	r2,-8(fp)
8110a030:	10800044 	addi	r2,r2,1
8110a034:	e0bffe05 	stb	r2,-8(fp)
8110a038:	e0bffe03 	ldbu	r2,-8(fp)
8110a03c:	10800230 	cmpltui	r2,r2,8
8110a040:	103fd81e 	bne	r2,zero,81109fa4 <__reset+0xfb0e9fa4>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
8110a044:	d0a05617 	ldw	r2,-32424(gp)
8110a048:	1009883a 	mov	r4,r2
8110a04c:	112e73c0 	call	8112e73c <OSMutexPost>
8110a050:	00000106 	br	8110a058 <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
8110a054:	110ed1c0 	call	8110ed1c <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
8110a058:	e0bffd17 	ldw	r2,-12(fp)
}
8110a05c:	e037883a 	mov	sp,fp
8110a060:	dfc00117 	ldw	ra,4(sp)
8110a064:	df000017 	ldw	fp,0(sp)
8110a068:	dec00204 	addi	sp,sp,8
8110a06c:	f800283a 	ret

8110a070 <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
8110a070:	defffc04 	addi	sp,sp,-16
8110a074:	de00012e 	bgeu	sp,et,8110a07c <bTrySendSemaphoreCommInit+0xc>
8110a078:	003b68fa 	trap	3
8110a07c:	dfc00315 	stw	ra,12(sp)
8110a080:	df000215 	stw	fp,8(sp)
8110a084:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
8110a088:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
8110a08c:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
8110a090:	d0a04f17 	ldw	r2,-32452(gp)
8110a094:	100f883a 	mov	r7,r2
8110a098:	01800e84 	movi	r6,58
8110a09c:	01400044 	movi	r5,1
8110a0a0:	01204534 	movhi	r4,33044
8110a0a4:	2138b904 	addi	r4,r4,-7452
8110a0a8:	11126a00 	call	811126a0 <fwrite>
	#endif

	ucCountRetries = 0;
8110a0ac:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
8110a0b0:	e0bfff03 	ldbu	r2,-4(fp)
8110a0b4:	10800044 	addi	r2,r2,1
8110a0b8:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
8110a0bc:	01000c84 	movi	r4,50
8110a0c0:	11320300 	call	81132030 <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
8110a0c4:	d0a04d17 	ldw	r2,-32460(gp)
8110a0c8:	1009883a 	mov	r4,r2
8110a0cc:	113052c0 	call	8113052c <OSSemPost>
8110a0d0:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
8110a0d4:	e0bfff43 	ldbu	r2,-3(fp)
8110a0d8:	10000326 	beq	r2,zero,8110a0e8 <bTrySendSemaphoreCommInit+0x78>
8110a0dc:	e0bfff03 	ldbu	r2,-4(fp)
8110a0e0:	108002f0 	cmpltui	r2,r2,11
8110a0e4:	103ff21e 	bne	r2,zero,8110a0b0 <__reset+0xfb0ea0b0>

	if ( error_code == OS_ERR_NONE ) {
8110a0e8:	e0bfff43 	ldbu	r2,-3(fp)
8110a0ec:	1000021e 	bne	r2,zero,8110a0f8 <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
8110a0f0:	00800044 	movi	r2,1
8110a0f4:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
8110a0f8:	e0bffe17 	ldw	r2,-8(fp)
}
8110a0fc:	e037883a 	mov	sp,fp
8110a100:	dfc00117 	ldw	ra,4(sp)
8110a104:	df000017 	ldw	fp,0(sp)
8110a108:	dec00204 	addi	sp,sp,8
8110a10c:	f800283a 	ret

8110a110 <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
8110a110:	deffab04 	addi	sp,sp,-340
8110a114:	de00012e 	bgeu	sp,et,8110a11c <vReceiverUartTask+0xc>
8110a118:	003b68fa 	trap	3
8110a11c:	dfc05415 	stw	ra,336(sp)
8110a120:	df005315 	stw	fp,332(sp)
8110a124:	df005304 	addi	fp,sp,332
8110a128:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a12c:	e03fae15 	stw	zero,-328(fp)
    char cReceive[SIZE_RCV_BUFFER+64];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"Receiver UART Task. (Task on)\n");
8110a130:	d0a04f17 	ldw	r2,-32452(gp)
8110a134:	100f883a 	mov	r7,r2
8110a138:	01800784 	movi	r6,30
8110a13c:	01400044 	movi	r5,1
8110a140:	01204534 	movhi	r4,33044
8110a144:	2138c804 	addi	r4,r4,-7392
8110a148:	11126a00 	call	811126a0 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
8110a14c:	e03fad15 	stw	zero,-332(fp)

    for(;;) {

        switch (eReaderRXMode)
8110a150:	e0bfad17 	ldw	r2,-332(fp)
8110a154:	10c00060 	cmpeqi	r3,r2,1
8110a158:	1800091e 	bne	r3,zero,8110a180 <vReceiverUartTask+0x70>
8110a15c:	0080052e 	bgeu	zero,r2,8110a174 <vReceiverUartTask+0x64>
8110a160:	10c000a0 	cmpeqi	r3,r2,2
8110a164:	18005d1e 	bne	r3,zero,8110a2dc <vReceiverUartTask+0x1cc>
8110a168:	108000e0 	cmpeqi	r2,r2,3
8110a16c:	10006e1e 	bne	r2,zero,8110a328 <vReceiverUartTask+0x218>
8110a170:	00007706 	br	8110a350 <vReceiverUartTask+0x240>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
8110a174:	00800044 	movi	r2,1
8110a178:	e0bfad15 	stw	r2,-332(fp)
                break;
8110a17c:	00007706 	br	8110a35c <vReceiverUartTask+0x24c>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
8110a180:	e0bfaf04 	addi	r2,fp,-324
8110a184:	01802004 	movi	r6,128
8110a188:	000b883a 	mov	r5,zero
8110a18c:	1009883a 	mov	r4,r2
8110a190:	11132040 	call	81113204 <memset>
                scanf("%s", cReceive);
8110a194:	e0bfcf04 	addi	r2,fp,-196
8110a198:	100b883a 	mov	r5,r2
8110a19c:	01204534 	movhi	r4,33044
8110a1a0:	2138d004 	addi	r4,r4,-7360
8110a1a4:	11138b80 	call	811138b8 <scanf>
                memcpy(cReceiveBuffer, cReceive, (SIZE_RCV_BUFFER -1) ); /* Make that there's a zero terminator */
8110a1a8:	e0ffcf04 	addi	r3,fp,-196
8110a1ac:	e0bfaf04 	addi	r2,fp,-324
8110a1b0:	01801fc4 	movi	r6,127
8110a1b4:	180b883a 	mov	r5,r3
8110a1b8:	1009883a 	mov	r4,r2
8110a1bc:	11130b40 	call	811130b4 <memcpy>
                bSuccess = bPreParserV2( cReceiveBuffer , &xPreParsedReader );
8110a1c0:	e0bfaf04 	addi	r2,fp,-324
8110a1c4:	01604534 	movhi	r5,33044
8110a1c8:	294b5504 	addi	r5,r5,11604
8110a1cc:	1009883a 	mov	r4,r2
8110a1d0:	110a7b40 	call	8110a7b4 <bPreParserV2>
8110a1d4:	e0bfae15 	stw	r2,-328(fp)

                if ( bSuccess == TRUE ) {
8110a1d8:	e0bfae17 	ldw	r2,-328(fp)
8110a1dc:	10800058 	cmpnei	r2,r2,1
8110a1e0:	1000281e 	bne	r2,zero,8110a284 <vReceiverUartTask+0x174>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
8110a1e4:	00a04534 	movhi	r2,33044
8110a1e8:	108b5504 	addi	r2,r2,11604
8110a1ec:	10800103 	ldbu	r2,4(r2)
8110a1f0:	10803fcc 	andi	r2,r2,255
8110a1f4:	1080201c 	xori	r2,r2,128
8110a1f8:	10bfe004 	addi	r2,r2,-128
8110a1fc:	10800fe0 	cmpeqi	r2,r2,63
8110a200:	1000081e 	bne	r2,zero,8110a224 <vReceiverUartTask+0x114>
8110a204:	00a04534 	movhi	r2,33044
8110a208:	108b5504 	addi	r2,r2,11604
8110a20c:	10800103 	ldbu	r2,4(r2)
8110a210:	10803fcc 	andi	r2,r2,255
8110a214:	1080201c 	xori	r2,r2,128
8110a218:	10bfe004 	addi	r2,r2,-128
8110a21c:	10800858 	cmpnei	r2,r2,33
8110a220:	1000031e 	bne	r2,zero,8110a230 <vReceiverUartTask+0x120>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
8110a224:	00800084 	movi	r2,2
8110a228:	e0bfad15 	stw	r2,-332(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110a22c:	00004b06 	br	8110a35c <vReceiverUartTask+0x24c>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        /* If is a Nack, do nothing. The packet will be retransmited by the timeout checker. */
                        if ( xPreParsedReader.cType == NACK_CHAR ) {
8110a230:	00a04534 	movhi	r2,33044
8110a234:	108b5504 	addi	r2,r2,11604
8110a238:	10800103 	ldbu	r2,4(r2)
8110a23c:	10803fcc 	andi	r2,r2,255
8110a240:	1080201c 	xori	r2,r2,128
8110a244:	10bfe004 	addi	r2,r2,-128
8110a248:	108008d8 	cmpnei	r2,r2,35
8110a24c:	10000a1e 	bne	r2,zero,8110a278 <vReceiverUartTask+0x168>
                            eReaderRXMode = sGetRxUart;
8110a250:	00800044 	movi	r2,1
8110a254:	e0bfad15 	stw	r2,-332(fp)
                            #ifdef DEBUG_ON
                                debug(fp,"Nack Received. Do nothing!\n");
8110a258:	d0a04f17 	ldw	r2,-32452(gp)
8110a25c:	100f883a 	mov	r7,r2
8110a260:	018006c4 	movi	r6,27
8110a264:	01400044 	movi	r5,1
8110a268:	01204534 	movhi	r4,33044
8110a26c:	2138d104 	addi	r4,r4,-7356
8110a270:	11126a00 	call	811126a0 <fwrite>
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110a274:	00003906 	br	8110a35c <vReceiverUartTask+0x24c>
                            eReaderRXMode = sGetRxUart;
                            #ifdef DEBUG_ON
                                debug(fp,"Nack Received. Do nothing!\n");
                            #endif
                        } else
                            eReaderRXMode = sSendToACKReceiver;
8110a278:	008000c4 	movi	r2,3
8110a27c:	e0bfad15 	stw	r2,-332(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110a280:	00003606 	br	8110a35c <vReceiverUartTask+0x24c>

                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
8110a284:	00a04534 	movhi	r2,33044
8110a288:	108b5504 	addi	r2,r2,11604
8110a28c:	00c008c4 	movi	r3,35
8110a290:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = '.';
8110a294:	00a04534 	movhi	r2,33044
8110a298:	108b5504 	addi	r2,r2,11604
8110a29c:	00c00b84 	movi	r3,46
8110a2a0:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
8110a2a4:	00a04534 	movhi	r2,33044
8110a2a8:	108b5504 	addi	r2,r2,11604
8110a2ac:	00c00044 	movi	r3,1
8110a2b0:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110a2b4:	01204534 	movhi	r4,33044
8110a2b8:	210b5504 	addi	r4,r4,11604
8110a2bc:	110a49c0 	call	8110a49c <setPreAckSenderFreePos>
8110a2c0:	e0bfae15 	stw	r2,-328(fp)
                    if ( bSuccess == FALSE ) {
8110a2c4:	e0bfae17 	ldw	r2,-328(fp)
8110a2c8:	1000011e 	bne	r2,zero,8110a2d0 <vReceiverUartTask+0x1c0>
                        vFailSendNack();
8110a2cc:	110ee540 	call	8110ee54 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
8110a2d0:	00800044 	movi	r2,1
8110a2d4:	e0bfad15 	stw	r2,-332(fp)
                }

                break;
8110a2d8:	00002006 	br	8110a35c <vReceiverUartTask+0x24c>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110a2dc:	01204534 	movhi	r4,33044
8110a2e0:	210b5504 	addi	r4,r4,11604
8110a2e4:	110a49c0 	call	8110a49c <setPreAckSenderFreePos>
8110a2e8:	e0bfae15 	stw	r2,-328(fp)
                if ( bSuccess == TRUE ) {
8110a2ec:	e0bfae17 	ldw	r2,-328(fp)
8110a2f0:	10800058 	cmpnei	r2,r2,1
8110a2f4:	1000081e 	bne	r2,zero,8110a318 <vReceiverUartTask+0x208>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
8110a2f8:	01204534 	movhi	r4,33044
8110a2fc:	210b5504 	addi	r4,r4,11604
8110a300:	110a3600 	call	8110a360 <setPreParsedFreePos>
8110a304:	e0bfae15 	stw	r2,-328(fp)
                    if ( bSuccess == FALSE ) {
8110a308:	e0bfae17 	ldw	r2,-328(fp)
8110a30c:	1000031e 	bne	r2,zero,8110a31c <vReceiverUartTask+0x20c>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
8110a310:	110ef240 	call	8110ef24 <vFailSetPreParsedBuffer>
8110a314:	00000106 	br	8110a31c <vReceiverUartTask+0x20c>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
8110a318:	110eebc0 	call	8110eebc <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
8110a31c:	00800044 	movi	r2,1
8110a320:	e0bfad15 	stw	r2,-332(fp)
                break;
8110a324:	00000d06 	br	8110a35c <vReceiverUartTask+0x24c>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
8110a328:	01204534 	movhi	r4,33044
8110a32c:	210b5504 	addi	r4,r4,11604
8110a330:	110a6180 	call	8110a618 <setPreAckReceiverFreePos>
8110a334:	e0bfae15 	stw	r2,-328(fp)
                if ( bSuccess == FALSE ) {
8110a338:	e0bfae17 	ldw	r2,-328(fp)
8110a33c:	1000011e 	bne	r2,zero,8110a344 <vReceiverUartTask+0x234>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
8110a340:	110ef8c0 	call	8110ef8c <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
8110a344:	00800044 	movi	r2,1
8110a348:	e0bfad15 	stw	r2,-332(fp)
                break;
8110a34c:	00000306 	br	8110a35c <vReceiverUartTask+0x24c>
            default:
                eReaderRXMode = sGetRxUart;
8110a350:	00800044 	movi	r2,1
8110a354:	e0bfad15 	stw	r2,-332(fp)
                break;
8110a358:	0001883a 	nop
        }

    }
8110a35c:	003f7c06 	br	8110a150 <__reset+0xfb0ea150>

8110a360 <setPreParsedFreePos>:
}


/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
8110a360:	defffb04 	addi	sp,sp,-20
8110a364:	de00012e 	bgeu	sp,et,8110a36c <setPreParsedFreePos+0xc>
8110a368:	003b68fa 	trap	3
8110a36c:	dfc00415 	stw	ra,16(sp)
8110a370:	df000315 	stw	fp,12(sp)
8110a374:	df000304 	addi	fp,sp,12
8110a378:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a37c:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110a380:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110a384:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexPreParsed, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
8110a388:	d0a05617 	ldw	r2,-32424(gp)
8110a38c:	e0fffe44 	addi	r3,fp,-7
8110a390:	180d883a 	mov	r6,r3
8110a394:	01400284 	movi	r5,10
8110a398:	1009883a 	mov	r4,r2
8110a39c:	112e1980 	call	8112e198 <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110a3a0:	e0bffe43 	ldbu	r2,-7(fp)
8110a3a4:	10803fcc 	andi	r2,r2,255
8110a3a8:	1000361e 	bne	r2,zero,8110a484 <setPreParsedFreePos+0x124>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_PREPARSED_ENTRIES; i++ )
8110a3ac:	e03ffe05 	stb	zero,-8(fp)
8110a3b0:	00002e06 	br	8110a46c <setPreParsedFreePos+0x10c>
        {
            if ( xPreParsed[i].cType == 0 ) {
8110a3b4:	e0fffe03 	ldbu	r3,-8(fp)
8110a3b8:	00a04574 	movhi	r2,33045
8110a3bc:	10afaf04 	addi	r2,r2,-16708
8110a3c0:	18c01324 	muli	r3,r3,76
8110a3c4:	10c5883a 	add	r2,r2,r3
8110a3c8:	10800104 	addi	r2,r2,4
8110a3cc:	10800003 	ldbu	r2,0(r2)
8110a3d0:	10803fcc 	andi	r2,r2,255
8110a3d4:	1080201c 	xori	r2,r2,128
8110a3d8:	10bfe004 	addi	r2,r2,-128
8110a3dc:	1000201e 	bne	r2,zero,8110a460 <setPreParsedFreePos+0x100>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xPreParsed[i] = (*xPrePReader);
8110a3e0:	e0fffe03 	ldbu	r3,-8(fp)
8110a3e4:	00a04574 	movhi	r2,33045
8110a3e8:	10afaf04 	addi	r2,r2,-16708
8110a3ec:	18c01324 	muli	r3,r3,76
8110a3f0:	10c7883a 	add	r3,r2,r3
8110a3f4:	e0bfff17 	ldw	r2,-4(fp)
8110a3f8:	1009883a 	mov	r4,r2
8110a3fc:	00801304 	movi	r2,76
8110a400:	100d883a 	mov	r6,r2
8110a404:	200b883a 	mov	r5,r4
8110a408:	1809883a 	mov	r4,r3
8110a40c:	11130b40 	call	811130b4 <memcpy>
                error_code = OSSemPost(xSemCountPreParsed);
8110a410:	d0a05117 	ldw	r2,-32444(gp)
8110a414:	1009883a 	mov	r4,r2
8110a418:	113052c0 	call	8113052c <OSSemPost>
8110a41c:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code == OS_ERR_NONE ) {
8110a420:	e0bffe43 	ldbu	r2,-7(fp)
8110a424:	10803fcc 	andi	r2,r2,255
8110a428:	1000031e 	bne	r2,zero,8110a438 <setPreParsedFreePos+0xd8>
                    bSuccess = TRUE;
8110a42c:	00800044 	movi	r2,1
8110a430:	e0bffd15 	stw	r2,-12(fp)
                } else {
                    vFailSendPreParsedSemaphore();
                    xPreParsed[i].cType = 0;
                    bSuccess = FALSE;
                }
                break;
8110a434:	00001006 	br	8110a478 <setPreParsedFreePos+0x118>
                xPreParsed[i] = (*xPrePReader);
                error_code = OSSemPost(xSemCountPreParsed);
                if ( error_code == OS_ERR_NONE ) {
                    bSuccess = TRUE;
                } else {
                    vFailSendPreParsedSemaphore();
8110a438:	110e5740 	call	8110e574 <vFailSendPreParsedSemaphore>
                    xPreParsed[i].cType = 0;
8110a43c:	e0fffe03 	ldbu	r3,-8(fp)
8110a440:	00a04574 	movhi	r2,33045
8110a444:	10afaf04 	addi	r2,r2,-16708
8110a448:	18c01324 	muli	r3,r3,76
8110a44c:	10c5883a 	add	r2,r2,r3
8110a450:	10800104 	addi	r2,r2,4
8110a454:	10000005 	stb	zero,0(r2)
                    bSuccess = FALSE;
8110a458:	e03ffd15 	stw	zero,-12(fp)
                }
                break;
8110a45c:	00000606 	br	8110a478 <setPreParsedFreePos+0x118>
    bSuccess = FALSE;
    OSMutexPend(xMutexPreParsed, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_PREPARSED_ENTRIES; i++ )
8110a460:	e0bffe03 	ldbu	r2,-8(fp)
8110a464:	10800044 	addi	r2,r2,1
8110a468:	e0bffe05 	stb	r2,-8(fp)
8110a46c:	e0bffe03 	ldbu	r2,-8(fp)
8110a470:	10800230 	cmpltui	r2,r2,8
8110a474:	103fcf1e 	bne	r2,zero,8110a3b4 <__reset+0xfb0ea3b4>
                    bSuccess = FALSE;
                }
                break;
            }
        }
        OSMutexPost(xMutexPreParsed);
8110a478:	d0a05617 	ldw	r2,-32424(gp)
8110a47c:	1009883a 	mov	r4,r2
8110a480:	112e73c0 	call	8112e73c <OSMutexPost>
    }
    return bSuccess;
8110a484:	e0bffd17 	ldw	r2,-12(fp)
}
8110a488:	e037883a 	mov	sp,fp
8110a48c:	dfc00117 	ldw	ra,4(sp)
8110a490:	df000017 	ldw	fp,0(sp)
8110a494:	dec00204 	addi	sp,sp,8
8110a498:	f800283a 	ret

8110a49c <setPreAckSenderFreePos>:



/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
8110a49c:	defffb04 	addi	sp,sp,-20
8110a4a0:	de00012e 	bgeu	sp,et,8110a4a8 <setPreAckSenderFreePos+0xc>
8110a4a4:	003b68fa 	trap	3
8110a4a8:	dfc00415 	stw	ra,16(sp)
8110a4ac:	df000315 	stw	fp,12(sp)
8110a4b0:	df000304 	addi	fp,sp,12
8110a4b4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a4b8:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110a4bc:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110a4c0:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexSenderACK, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
8110a4c4:	d0a05c17 	ldw	r2,-32400(gp)
8110a4c8:	e0fffe44 	addi	r3,fp,-7
8110a4cc:	180d883a 	mov	r6,r3
8110a4d0:	01400284 	movi	r5,10
8110a4d4:	1009883a 	mov	r4,r2
8110a4d8:	112e1980 	call	8112e198 <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110a4dc:	e0bffe43 	ldbu	r2,-7(fp)
8110a4e0:	10803fcc 	andi	r2,r2,255
8110a4e4:	1000461e 	bne	r2,zero,8110a600 <setPreAckSenderFreePos+0x164>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for(i = 0; i < N_ACKS_SENDER; i++)
8110a4e8:	e03ffe05 	stb	zero,-8(fp)
8110a4ec:	00003e06 	br	8110a5e8 <setPreAckSenderFreePos+0x14c>
        {
            if ( xSenderACK[i].cType == 0 ) {
8110a4f0:	e0fffe03 	ldbu	r3,-8(fp)
8110a4f4:	00a04574 	movhi	r2,33045
8110a4f8:	10afa704 	addi	r2,r2,-16740
8110a4fc:	18c7883a 	add	r3,r3,r3
8110a500:	18c7883a 	add	r3,r3,r3
8110a504:	10c5883a 	add	r2,r2,r3
8110a508:	10800003 	ldbu	r2,0(r2)
8110a50c:	10803fcc 	andi	r2,r2,255
8110a510:	1080201c 	xori	r2,r2,128
8110a514:	10bfe004 	addi	r2,r2,-128
8110a518:	1000301e 	bne	r2,zero,8110a5dc <setPreAckSenderFreePos+0x140>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xSenderACK[i].cType = xPrePReader->cType;
8110a51c:	e0fffe03 	ldbu	r3,-8(fp)
8110a520:	e0bfff17 	ldw	r2,-4(fp)
8110a524:	11000103 	ldbu	r4,4(r2)
8110a528:	00a04574 	movhi	r2,33045
8110a52c:	10afa704 	addi	r2,r2,-16740
8110a530:	18c7883a 	add	r3,r3,r3
8110a534:	18c7883a 	add	r3,r3,r3
8110a538:	10c5883a 	add	r2,r2,r3
8110a53c:	11000005 	stb	r4,0(r2)
                xSenderACK[i].cCommand = xPrePReader->cCommand;
8110a540:	e0fffe03 	ldbu	r3,-8(fp)
8110a544:	e0bfff17 	ldw	r2,-4(fp)
8110a548:	11000143 	ldbu	r4,5(r2)
8110a54c:	00a04574 	movhi	r2,33045
8110a550:	10afa704 	addi	r2,r2,-16740
8110a554:	18c7883a 	add	r3,r3,r3
8110a558:	18c7883a 	add	r3,r3,r3
8110a55c:	10c5883a 	add	r2,r2,r3
8110a560:	10800044 	addi	r2,r2,1
8110a564:	11000005 	stb	r4,0(r2)
                xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
8110a568:	e0fffe03 	ldbu	r3,-8(fp)
8110a56c:	e0bfff17 	ldw	r2,-4(fp)
8110a570:	1100020b 	ldhu	r4,8(r2)
8110a574:	00a04574 	movhi	r2,33045
8110a578:	10afa704 	addi	r2,r2,-16740
8110a57c:	18c7883a 	add	r3,r3,r3
8110a580:	18c7883a 	add	r3,r3,r3
8110a584:	10c5883a 	add	r2,r2,r3
8110a588:	10800084 	addi	r2,r2,2
8110a58c:	1100000d 	sth	r4,0(r2)

                error_code = OSSemPost(xSemCountSenderACK);
8110a590:	d0a04e17 	ldw	r2,-32456(gp)
8110a594:	1009883a 	mov	r4,r2
8110a598:	113052c0 	call	8113052c <OSSemPost>
8110a59c:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code != OS_ERR_NONE ) {
8110a5a0:	e0bffe43 	ldbu	r2,-7(fp)
8110a5a4:	10803fcc 	andi	r2,r2,255
8110a5a8:	10000926 	beq	r2,zero,8110a5d0 <setPreAckSenderFreePos+0x134>
                    vFailSendPreAckSenderSemaphore();
8110a5ac:	110e60c0 	call	8110e60c <vFailSendPreAckSenderSemaphore>
                    xSenderACK[i].cType = 0;
8110a5b0:	e0fffe03 	ldbu	r3,-8(fp)
8110a5b4:	00a04574 	movhi	r2,33045
8110a5b8:	10afa704 	addi	r2,r2,-16740
8110a5bc:	18c7883a 	add	r3,r3,r3
8110a5c0:	18c7883a 	add	r3,r3,r3
8110a5c4:	10c5883a 	add	r2,r2,r3
8110a5c8:	10000005 	stb	zero,0(r2)
                } else
                    bSuccess = TRUE;
                break;
8110a5cc:	00000906 	br	8110a5f4 <setPreAckSenderFreePos+0x158>
                error_code = OSSemPost(xSemCountSenderACK);
                if ( error_code != OS_ERR_NONE ) {
                    vFailSendPreAckSenderSemaphore();
                    xSenderACK[i].cType = 0;
                } else
                    bSuccess = TRUE;
8110a5d0:	00800044 	movi	r2,1
8110a5d4:	e0bffd15 	stw	r2,-12(fp)
                break;
8110a5d8:	00000606 	br	8110a5f4 <setPreAckSenderFreePos+0x158>
    bSuccess = FALSE;
    OSMutexPend(xMutexSenderACK, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for(i = 0; i < N_ACKS_SENDER; i++)
8110a5dc:	e0bffe03 	ldbu	r2,-8(fp)
8110a5e0:	10800044 	addi	r2,r2,1
8110a5e4:	e0bffe05 	stb	r2,-8(fp)
8110a5e8:	e0bffe03 	ldbu	r2,-8(fp)
8110a5ec:	10800230 	cmpltui	r2,r2,8
8110a5f0:	103fbf1e 	bne	r2,zero,8110a4f0 <__reset+0xfb0ea4f0>
                } else
                    bSuccess = TRUE;
                break;
            }
        }
        OSMutexPost(xMutexSenderACK);
8110a5f4:	d0a05c17 	ldw	r2,-32400(gp)
8110a5f8:	1009883a 	mov	r4,r2
8110a5fc:	112e73c0 	call	8112e73c <OSMutexPost>
    }

    return bSuccess;
8110a600:	e0bffd17 	ldw	r2,-12(fp)
}
8110a604:	e037883a 	mov	sp,fp
8110a608:	dfc00117 	ldw	ra,4(sp)
8110a60c:	df000017 	ldw	fp,0(sp)
8110a610:	dec00204 	addi	sp,sp,8
8110a614:	f800283a 	ret

8110a618 <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
8110a618:	defffb04 	addi	sp,sp,-20
8110a61c:	de00012e 	bgeu	sp,et,8110a624 <setPreAckReceiverFreePos+0xc>
8110a620:	003b68fa 	trap	3
8110a624:	dfc00415 	stw	ra,16(sp)
8110a628:	df000315 	stw	fp,12(sp)
8110a62c:	df000304 	addi	fp,sp,12
8110a630:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a634:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110a638:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110a63c:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexReceivedACK, 20, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 20 ticks = 20 ms */
8110a640:	d0a05217 	ldw	r2,-32440(gp)
8110a644:	e0fffe44 	addi	r3,fp,-7
8110a648:	180d883a 	mov	r6,r3
8110a64c:	01400504 	movi	r5,20
8110a650:	1009883a 	mov	r4,r2
8110a654:	112e1980 	call	8112e198 <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110a658:	e0bffe43 	ldbu	r2,-7(fp)
8110a65c:	10803fcc 	andi	r2,r2,255
8110a660:	1000471e 	bne	r2,zero,8110a780 <setPreAckReceiverFreePos+0x168>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_ACKS_RECEIVED; i++ )
8110a664:	e03ffe05 	stb	zero,-8(fp)
8110a668:	00003e06 	br	8110a764 <setPreAckReceiverFreePos+0x14c>
        {
            if ( xReceivedACK[i].cType == 0 ) {
8110a66c:	e0fffe03 	ldbu	r3,-8(fp)
8110a670:	00a04574 	movhi	r2,33045
8110a674:	10aba104 	addi	r2,r2,-20860
8110a678:	18c7883a 	add	r3,r3,r3
8110a67c:	18c7883a 	add	r3,r3,r3
8110a680:	10c5883a 	add	r2,r2,r3
8110a684:	10800003 	ldbu	r2,0(r2)
8110a688:	10803fcc 	andi	r2,r2,255
8110a68c:	1080201c 	xori	r2,r2,128
8110a690:	10bfe004 	addi	r2,r2,-128
8110a694:	1000301e 	bne	r2,zero,8110a758 <setPreAckReceiverFreePos+0x140>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xReceivedACK[i].cType = xPrePReader->cType;
8110a698:	e0fffe03 	ldbu	r3,-8(fp)
8110a69c:	e0bfff17 	ldw	r2,-4(fp)
8110a6a0:	11000103 	ldbu	r4,4(r2)
8110a6a4:	00a04574 	movhi	r2,33045
8110a6a8:	10aba104 	addi	r2,r2,-20860
8110a6ac:	18c7883a 	add	r3,r3,r3
8110a6b0:	18c7883a 	add	r3,r3,r3
8110a6b4:	10c5883a 	add	r2,r2,r3
8110a6b8:	11000005 	stb	r4,0(r2)
                xReceivedACK[i].cCommand = xPrePReader->cCommand;
8110a6bc:	e0fffe03 	ldbu	r3,-8(fp)
8110a6c0:	e0bfff17 	ldw	r2,-4(fp)
8110a6c4:	11000143 	ldbu	r4,5(r2)
8110a6c8:	00a04574 	movhi	r2,33045
8110a6cc:	10aba104 	addi	r2,r2,-20860
8110a6d0:	18c7883a 	add	r3,r3,r3
8110a6d4:	18c7883a 	add	r3,r3,r3
8110a6d8:	10c5883a 	add	r2,r2,r3
8110a6dc:	10800044 	addi	r2,r2,1
8110a6e0:	11000005 	stb	r4,0(r2)
                xReceivedACK[i].usiId = xPrePReader->usiValues[0];
8110a6e4:	e0fffe03 	ldbu	r3,-8(fp)
8110a6e8:	e0bfff17 	ldw	r2,-4(fp)
8110a6ec:	1100020b 	ldhu	r4,8(r2)
8110a6f0:	00a04574 	movhi	r2,33045
8110a6f4:	10aba104 	addi	r2,r2,-20860
8110a6f8:	18c7883a 	add	r3,r3,r3
8110a6fc:	18c7883a 	add	r3,r3,r3
8110a700:	10c5883a 	add	r2,r2,r3
8110a704:	10800084 	addi	r2,r2,2
8110a708:	1100000d 	sth	r4,0(r2)

                error_code = OSSemPost(xSemCountReceivedACK);
8110a70c:	d0a05317 	ldw	r2,-32436(gp)
8110a710:	1009883a 	mov	r4,r2
8110a714:	113052c0 	call	8113052c <OSSemPost>
8110a718:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code == OS_ERR_NONE ) {
8110a71c:	e0bffe43 	ldbu	r2,-7(fp)
8110a720:	10803fcc 	andi	r2,r2,255
8110a724:	1000031e 	bne	r2,zero,8110a734 <setPreAckReceiverFreePos+0x11c>
                    bSuccess = TRUE;
8110a728:	00800044 	movi	r2,1
8110a72c:	e0bffd15 	stw	r2,-12(fp)
                } else {
                    vFailSendPreAckReceiverSemaphore();
                    xReceivedACK[i].cType = 0;
                }
                break;
8110a730:	00000f06 	br	8110a770 <setPreAckReceiverFreePos+0x158>

                error_code = OSSemPost(xSemCountReceivedACK);
                if ( error_code == OS_ERR_NONE ) {
                    bSuccess = TRUE;
                } else {
                    vFailSendPreAckReceiverSemaphore();
8110a734:	110e5c00 	call	8110e5c0 <vFailSendPreAckReceiverSemaphore>
                    xReceivedACK[i].cType = 0;
8110a738:	e0fffe03 	ldbu	r3,-8(fp)
8110a73c:	00a04574 	movhi	r2,33045
8110a740:	10aba104 	addi	r2,r2,-20860
8110a744:	18c7883a 	add	r3,r3,r3
8110a748:	18c7883a 	add	r3,r3,r3
8110a74c:	10c5883a 	add	r2,r2,r3
8110a750:	10000005 	stb	zero,0(r2)
                }
                break;
8110a754:	00000606 	br	8110a770 <setPreAckReceiverFreePos+0x158>
    bSuccess = FALSE;
    OSMutexPend(xMutexReceivedACK, 20, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 20 ticks = 20 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_ACKS_RECEIVED; i++ )
8110a758:	e0bffe03 	ldbu	r2,-8(fp)
8110a75c:	10800044 	addi	r2,r2,1
8110a760:	e0bffe05 	stb	r2,-8(fp)
8110a764:	e0bffe03 	ldbu	r2,-8(fp)
8110a768:	108001b0 	cmpltui	r2,r2,6
8110a76c:	103fbf1e 	bne	r2,zero,8110a66c <__reset+0xfb0ea66c>
                    xReceivedACK[i].cType = 0;
                }
                break;
            }
        }
        OSMutexPost(xMutexReceivedACK);
8110a770:	d0a05217 	ldw	r2,-32440(gp)
8110a774:	1009883a 	mov	r4,r2
8110a778:	112e73c0 	call	8112e73c <OSMutexPost>
8110a77c:	00000706 	br	8110a79c <setPreAckReceiverFreePos+0x184>
    } else {
        /* Could not  */
        #ifdef DEBUG_ON
            debug(fp,"Could not put the ack packet receiveid in the queue. (setPreAckReceiverFreePos)\n");
8110a780:	d0a04f17 	ldw	r2,-32452(gp)
8110a784:	100f883a 	mov	r7,r2
8110a788:	01801404 	movi	r6,80
8110a78c:	01400044 	movi	r5,1
8110a790:	01204534 	movhi	r4,33044
8110a794:	2138d804 	addi	r4,r4,-7328
8110a798:	11126a00 	call	811126a0 <fwrite>
        #endif
    }

    return bSuccess;
8110a79c:	e0bffd17 	ldw	r2,-12(fp)
}
8110a7a0:	e037883a 	mov	sp,fp
8110a7a4:	dfc00117 	ldw	ra,4(sp)
8110a7a8:	df000017 	ldw	fp,0(sp)
8110a7ac:	dec00204 	addi	sp,sp,8
8110a7b0:	f800283a 	ret

8110a7b4 <bPreParserV2>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParserV2( char *buffer, tPreParsed *xPerParcedBuffer )
{
8110a7b4:	defff404 	addi	sp,sp,-48
8110a7b8:	de00012e 	bgeu	sp,et,8110a7c0 <bPreParserV2+0xc>
8110a7bc:	003b68fa 	trap	3
8110a7c0:	dfc00b15 	stw	ra,44(sp)
8110a7c4:	df000a15 	stw	fp,40(sp)
8110a7c8:	dc000915 	stw	r16,36(sp)
8110a7cc:	df000a04 	addi	fp,sp,40
8110a7d0:	e13ffd15 	stw	r4,-12(fp)
8110a7d4:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110a7d8:	e03ff615 	stw	zero,-40(fp)
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */


    bSuccess = FALSE;
8110a7dc:	e03ff615 	stw	zero,-40(fp)

    siStrLen = strnlen(buffer, SIZE_RCV_BUFFER);
8110a7e0:	01402004 	movi	r5,128
8110a7e4:	e13ffd17 	ldw	r4,-12(fp)
8110a7e8:	1113c400 	call	81113c40 <strnlen>
8110a7ec:	e0bff90d 	sth	r2,-28(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110a7f0:	01400ec4 	movi	r5,59
8110a7f4:	e13ffd17 	ldw	r4,-12(fp)
8110a7f8:	110d1700 	call	8110d170 <siPosStr>
8110a7fc:	e0bff98d 	sth	r2,-26(fp)

    /* Check the protocol terminator char ';' */
    if ( (siTeminador != (siStrLen-1)) )
8110a800:	e0fff98f 	ldh	r3,-26(fp)
8110a804:	e0bff90f 	ldh	r2,-28(fp)
8110a808:	10bfffc4 	addi	r2,r2,-1
8110a80c:	18800226 	beq	r3,r2,8110a818 <bPreParserV2+0x64>
        return bSuccess;
8110a810:	e0bff617 	ldw	r2,-40(fp)
8110a814:	0000ba06 	br	8110ab00 <bPreParserV2+0x34c>

    siCRC = siPosStr(buffer, SEPARATOR_CRC);
8110a818:	01401f04 	movi	r5,124
8110a81c:	e13ffd17 	ldw	r4,-12(fp)
8110a820:	110d1700 	call	8110d170 <siPosStr>
8110a824:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there's an CRC char */
    if ( siCRC > siTeminador )
8110a828:	e0bffa0f 	ldh	r2,-24(fp)
8110a82c:	e0fff98f 	ldh	r3,-26(fp)
8110a830:	1880020e 	bge	r3,r2,8110a83c <bPreParserV2+0x88>
        return bSuccess;
8110a834:	e0bff617 	ldw	r2,-40(fp)
8110a838:	0000b106 	br	8110ab00 <bPreParserV2+0x34c>

    siIni = strcspn( buffer , ALL_INI_CHAR ); /* Verify if there's any one of the initial characters */
8110a83c:	01604534 	movhi	r5,33044
8110a840:	2978ed04 	addi	r5,r5,-7244
8110a844:	e13ffd17 	ldw	r4,-12(fp)
8110a848:	1113b5c0 	call	81113b5c <strcspn>
8110a84c:	e0bffa8d 	sth	r2,-22(fp)

    /* Check if there's any initial char protocol and if is before the crc char */
    if ( siIni > siCRC)
8110a850:	e0bffa8f 	ldh	r2,-22(fp)
8110a854:	e0fffa0f 	ldh	r3,-24(fp)
8110a858:	1880020e 	bge	r3,r2,8110a864 <bPreParserV2+0xb0>
        return bSuccess;
8110a85c:	e0bff617 	ldw	r2,-40(fp)
8110a860:	0000a706 	br	8110ab00 <bPreParserV2+0x34c>

    
    /*" ---> At this point we validate the existence and position of all characters in for the protocol in the message "*/


    xPerParcedBuffer->cType = buffer[siIni];
8110a864:	e0bffa8f 	ldh	r2,-22(fp)
8110a868:	e0fffd17 	ldw	r3,-12(fp)
8110a86c:	1885883a 	add	r2,r3,r2
8110a870:	10c00003 	ldbu	r3,0(r2)
8110a874:	e0bffe17 	ldw	r2,-8(fp)
8110a878:	10c00105 	stb	r3,4(r2)
    if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a87c:	e0bffe17 	ldw	r2,-8(fp)
8110a880:	10800103 	ldbu	r2,4(r2)
8110a884:	10803fcc 	andi	r2,r2,255
8110a888:	1080201c 	xori	r2,r2,128
8110a88c:	10bfe004 	addi	r2,r2,-128
8110a890:	108008d8 	cmpnei	r2,r2,35
8110a894:	1000041e 	bne	r2,zero,8110a8a8 <bPreParserV2+0xf4>
        bSuccess = TRUE;
8110a898:	00800044 	movi	r2,1
8110a89c:	e0bff615 	stw	r2,-40(fp)
        return bSuccess;
8110a8a0:	e0bff617 	ldw	r2,-40(fp)
8110a8a4:	00009606 	br	8110ab00 <bPreParserV2+0x34c>


    /*" ---> At this point the packet is a Resquest, Reply or ACK packet"*/


    xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit( &buffer[siIni] , (siCRC - siIni) );
8110a8a8:	e0bffa8f 	ldh	r2,-22(fp)
8110a8ac:	e0fffd17 	ldw	r3,-12(fp)
8110a8b0:	1889883a 	add	r4,r3,r2
8110a8b4:	e0fffa0f 	ldh	r3,-24(fp)
8110a8b8:	e0bffa8f 	ldh	r2,-22(fp)
8110a8bc:	1885c83a 	sub	r2,r3,r2
8110a8c0:	100b883a 	mov	r5,r2
8110a8c4:	110e3480 	call	8110e348 <ucCrc8wInit>
8110a8c8:	1007883a 	mov	r3,r2
8110a8cc:	e0bffe17 	ldw	r2,-8(fp)
8110a8d0:	10c01205 	stb	r3,72(r2)

    xPerParcedBuffer->cCommand = buffer[siIni+1];
8110a8d4:	e0bffa8f 	ldh	r2,-22(fp)
8110a8d8:	10800044 	addi	r2,r2,1
8110a8dc:	e0fffd17 	ldw	r3,-12(fp)
8110a8e0:	1885883a 	add	r2,r3,r2
8110a8e4:	10c00003 	ldbu	r3,0(r2)
8110a8e8:	e0bffe17 	ldw	r2,-8(fp)
8110a8ec:	10c00145 	stb	r3,5(r2)
    xPerParcedBuffer->ucNofBytes = 0;
8110a8f0:	e0bffe17 	ldw	r2,-8(fp)
8110a8f4:	10000185 	stb	zero,6(r2)

    memset( xPerParcedBuffer->usiValues , 0x00 , sizeof(xPerParcedBuffer->usiValues) );
8110a8f8:	e0bffe17 	ldw	r2,-8(fp)
8110a8fc:	10800204 	addi	r2,r2,8
8110a900:	01801004 	movi	r6,64
8110a904:	000b883a 	mov	r5,zero
8110a908:	1009883a 	mov	r4,r2
8110a90c:	11132040 	call	81113204 <memset>

    i = siIni + 3; /* "?C:i..." */
8110a910:	e0bffa8b 	ldhu	r2,-22(fp)
8110a914:	108000c4 	addi	r2,r2,3
8110a918:	e0bff705 	stb	r2,-36(fp)
    do {
        p_inteiro = inteiro;
8110a91c:	e0bffb44 	addi	r2,fp,-19
8110a920:	e0bff815 	stw	r2,-32(fp)
        memset( &(inteiro) , 0 , sizeof( inteiro ) );
8110a924:	e0bffb44 	addi	r2,fp,-19
8110a928:	01800184 	movi	r6,6
8110a92c:	000b883a 	mov	r5,zero
8110a930:	1009883a 	mov	r4,r2
8110a934:	11132040 	call	81113204 <memset>
        do {
            c = buffer[i];
8110a938:	e0bff703 	ldbu	r2,-36(fp)
8110a93c:	e0fffd17 	ldw	r3,-12(fp)
8110a940:	1885883a 	add	r2,r3,r2
8110a944:	10800003 	ldbu	r2,0(r2)
8110a948:	e0bffb05 	stb	r2,-20(fp)
            if ( isdigit( c ) ) {
8110a94c:	d0e00317 	ldw	r3,-32756(gp)
8110a950:	e0bffb07 	ldb	r2,-20(fp)
8110a954:	10800044 	addi	r2,r2,1
8110a958:	1885883a 	add	r2,r3,r2
8110a95c:	10800003 	ldbu	r2,0(r2)
8110a960:	10803fcc 	andi	r2,r2,255
8110a964:	1080010c 	andi	r2,r2,4
8110a968:	10000626 	beq	r2,zero,8110a984 <bPreParserV2+0x1d0>
                (*p_inteiro) = c;
8110a96c:	e0bff817 	ldw	r2,-32(fp)
8110a970:	e0fffb03 	ldbu	r3,-20(fp)
8110a974:	10c00005 	stb	r3,0(r2)
                p_inteiro++;
8110a978:	e0bff817 	ldw	r2,-32(fp)
8110a97c:	10800044 	addi	r2,r2,1
8110a980:	e0bff815 	stw	r2,-32(fp)
            }
            i++;
8110a984:	e0bff703 	ldbu	r2,-36(fp)
8110a988:	10800044 	addi	r2,r2,1
8110a98c:	e0bff705 	stb	r2,-36(fp)
        } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
8110a990:	e0bff90f 	ldh	r2,-28(fp)
8110a994:	e0fff703 	ldbu	r3,-36(fp)
8110a998:	1880090e 	bge	r3,r2,8110a9c0 <bPreParserV2+0x20c>
8110a99c:	e0bffb07 	ldb	r2,-20(fp)
8110a9a0:	10800ea0 	cmpeqi	r2,r2,58
8110a9a4:	1000061e 	bne	r2,zero,8110a9c0 <bPreParserV2+0x20c>
8110a9a8:	e0bffb07 	ldb	r2,-20(fp)
8110a9ac:	10800ee0 	cmpeqi	r2,r2,59
8110a9b0:	1000031e 	bne	r2,zero,8110a9c0 <bPreParserV2+0x20c>
8110a9b4:	e0bffb07 	ldb	r2,-20(fp)
8110a9b8:	10801f18 	cmpnei	r2,r2,124
8110a9bc:	103fde1e 	bne	r2,zero,8110a938 <__reset+0xfb0ea938>
        (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a9c0:	e0bff817 	ldw	r2,-32(fp)
8110a9c4:	00c00284 	movi	r3,10
8110a9c8:	10c00005 	stb	r3,0(r2)

        if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
8110a9cc:	e0bffb07 	ldb	r2,-20(fp)
8110a9d0:	10800ea0 	cmpeqi	r2,r2,58
8110a9d4:	1000031e 	bne	r2,zero,8110a9e4 <bPreParserV2+0x230>
8110a9d8:	e0bffb07 	ldb	r2,-20(fp)
8110a9dc:	10801f18 	cmpnei	r2,r2,124
8110a9e0:	10001a1e 	bne	r2,zero,8110aa4c <bPreParserV2+0x298>
            xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
8110a9e4:	e0bffe17 	ldw	r2,-8(fp)
8110a9e8:	10800183 	ldbu	r2,6(r2)
8110a9ec:	10803fcc 	andi	r2,r2,255
8110a9f0:	10800828 	cmpgeui	r2,r2,32
8110a9f4:	1000041e 	bne	r2,zero,8110aa08 <bPreParserV2+0x254>
8110a9f8:	e0bffe17 	ldw	r2,-8(fp)
8110a9fc:	10800183 	ldbu	r2,6(r2)
8110aa00:	14003fcc 	andi	r16,r2,255
8110aa04:	00000106 	br	8110aa0c <bPreParserV2+0x258>
8110aa08:	04000804 	movi	r16,32
8110aa0c:	e0bffb44 	addi	r2,fp,-19
8110aa10:	1009883a 	mov	r4,r2
8110aa14:	1111ea80 	call	81111ea8 <atoi>
8110aa18:	1009883a 	mov	r4,r2
8110aa1c:	e0fffe17 	ldw	r3,-8(fp)
8110aa20:	80800104 	addi	r2,r16,4
8110aa24:	1085883a 	add	r2,r2,r2
8110aa28:	1885883a 	add	r2,r3,r2
8110aa2c:	1100000d 	sth	r4,0(r2)
            xPerParcedBuffer->ucNofBytes++;
8110aa30:	e0bffe17 	ldw	r2,-8(fp)
8110aa34:	10800183 	ldbu	r2,6(r2)
8110aa38:	10800044 	addi	r2,r2,1
8110aa3c:	1007883a 	mov	r3,r2
8110aa40:	e0bffe17 	ldw	r2,-8(fp)
8110aa44:	10c00185 	stb	r3,6(r2)
8110aa48:	00000906 	br	8110aa70 <bPreParserV2+0x2bc>
        }
        else if ( c == FINAL_CHAR )
8110aa4c:	e0bffb07 	ldb	r2,-20(fp)
8110aa50:	10800ed8 	cmpnei	r2,r2,59
8110aa54:	1000061e 	bne	r2,zero,8110aa70 <bPreParserV2+0x2bc>
        {
            xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
8110aa58:	e0bffb44 	addi	r2,fp,-19
8110aa5c:	1009883a 	mov	r4,r2
8110aa60:	1111ea80 	call	81111ea8 <atoi>
8110aa64:	1007883a 	mov	r3,r2
8110aa68:	e0bffe17 	ldw	r2,-8(fp)
8110aa6c:	10c01245 	stb	r3,73(r2)
        }

    } while ( (c != FINAL_CHAR) && (siStrLen>i) );
8110aa70:	e0bffb07 	ldb	r2,-20(fp)
8110aa74:	10800ee0 	cmpeqi	r2,r2,59
8110aa78:	1000031e 	bne	r2,zero,8110aa88 <bPreParserV2+0x2d4>
8110aa7c:	e0bff90f 	ldh	r2,-28(fp)
8110aa80:	e0fff703 	ldbu	r3,-36(fp)
8110aa84:	18bfa516 	blt	r3,r2,8110a91c <__reset+0xfb0ea91c>


    if ( c == FINAL_CHAR )
8110aa88:	e0bffb07 	ldb	r2,-20(fp)
8110aa8c:	10800ed8 	cmpnei	r2,r2,59
8110aa90:	1000191e 	bne	r2,zero,8110aaf8 <bPreParserV2+0x344>
        if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
8110aa94:	e0bffe17 	ldw	r2,-8(fp)
8110aa98:	10c01243 	ldbu	r3,73(r2)
8110aa9c:	e0bffe17 	ldw	r2,-8(fp)
8110aaa0:	10801203 	ldbu	r2,72(r2)
8110aaa4:	18c03fcc 	andi	r3,r3,255
8110aaa8:	10803fcc 	andi	r2,r2,255
8110aaac:	1880031e 	bne	r3,r2,8110aabc <bPreParserV2+0x308>
            bSuccess = TRUE;
8110aab0:	00800044 	movi	r2,1
8110aab4:	e0bff615 	stw	r2,-40(fp)
8110aab8:	00001006 	br	8110aafc <bPreParserV2+0x348>
        } else {
            /* Wrong CRC */
            #ifdef DEBUG_ON
                fprintf(fp,"Wrong CRC. Expected = %hhu, received = %hhu\n", xPerParcedBuffer->ucCalculatedCRC8, xPerParcedBuffer->ucMessageCRC8 );
8110aabc:	d0e04f17 	ldw	r3,-32452(gp)
8110aac0:	e0bffe17 	ldw	r2,-8(fp)
8110aac4:	10801203 	ldbu	r2,72(r2)
8110aac8:	11003fcc 	andi	r4,r2,255
8110aacc:	e0bffe17 	ldw	r2,-8(fp)
8110aad0:	10801243 	ldbu	r2,73(r2)
8110aad4:	10803fcc 	andi	r2,r2,255
8110aad8:	100f883a 	mov	r7,r2
8110aadc:	200d883a 	mov	r6,r4
8110aae0:	01604534 	movhi	r5,33044
8110aae4:	2978ef04 	addi	r5,r5,-7236
8110aae8:	1809883a 	mov	r4,r3
8110aaec:	11120040 	call	81112004 <fprintf>
            #endif
            bSuccess = FALSE;
8110aaf0:	e03ff615 	stw	zero,-40(fp)
8110aaf4:	00000106 	br	8110aafc <bPreParserV2+0x348>
        }
    else
        bSuccess = FALSE; /* Index overflow in the buffer */
8110aaf8:	e03ff615 	stw	zero,-40(fp)


    return bSuccess;
8110aafc:	e0bff617 	ldw	r2,-40(fp)
}
8110ab00:	e6ffff04 	addi	sp,fp,-4
8110ab04:	dfc00217 	ldw	ra,8(sp)
8110ab08:	df000117 	ldw	fp,4(sp)
8110ab0c:	dc000017 	ldw	r16,0(sp)
8110ab10:	dec00304 	addi	sp,sp,12
8110ab14:	f800283a 	ret

8110ab18 <vSenderComTask>:


OS_STK_DATA *pdata;

void vSenderComTask(void *task_data)
{
8110ab18:	defff804 	addi	sp,sp,-32
8110ab1c:	de00012e 	bgeu	sp,et,8110ab24 <vSenderComTask+0xc>
8110ab20:	003b68fa 	trap	3
8110ab24:	dfc00715 	stw	ra,28(sp)
8110ab28:	df000615 	stw	fp,24(sp)
8110ab2c:	df000604 	addi	fp,sp,24
8110ab30:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    OS_STK_DATA data;
    bool bSuccess;
    int desligarEm = 0;
8110ab34:	e03ffb15 	stw	zero,-20(fp)

    eSenderMode = sConfiguringSender;
8110ab38:	e03ffa15 	stw	zero,-24(fp)

    #ifdef DEBUG_ON
        debug(fp,"Sender Comm Task. (Task on)\n");
8110ab3c:	d0a04f17 	ldw	r2,-32452(gp)
8110ab40:	100f883a 	mov	r7,r2
8110ab44:	01800704 	movi	r6,28
8110ab48:	01400044 	movi	r5,1
8110ab4c:	01204534 	movhi	r4,33044
8110ab50:	2138fb04 	addi	r4,r4,-7188
8110ab54:	11126a00 	call	811126a0 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110ab58:	e0bffa17 	ldw	r2,-24(fp)
8110ab5c:	10c00060 	cmpeqi	r3,r2,1
8110ab60:	1800091e 	bne	r3,zero,8110ab88 <vSenderComTask+0x70>
8110ab64:	0080052e 	bgeu	zero,r2,8110ab7c <vSenderComTask+0x64>
8110ab68:	10c000a0 	cmpeqi	r3,r2,2
8110ab6c:	1800471e 	bne	r3,zero,8110ac8c <vSenderComTask+0x174>
8110ab70:	10800160 	cmpeqi	r2,r2,5
8110ab74:	10002c1e 	bne	r2,zero,8110ac28 <vSenderComTask+0x110>
8110ab78:	00003a06 	br	8110ac64 <vSenderComTask+0x14c>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
8110ab7c:	00800044 	movi	r2,1
8110ab80:	e0bffa15 	stw	r2,-24(fp)
                break;
8110ab84:	00004206 	br	8110ac90 <vSenderComTask+0x178>
                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/

                #ifdef DEBUG_ON
                    debug(fp,"Preparing the Start Sequence.\n");
8110ab88:	d0a04f17 	ldw	r2,-32452(gp)
8110ab8c:	100f883a 	mov	r7,r2
8110ab90:	01800784 	movi	r6,30
8110ab94:	01400044 	movi	r5,1
8110ab98:	01204534 	movhi	r4,33044
8110ab9c:	21390304 	addi	r4,r4,-7156
8110aba0:	11126a00 	call	811126a0 <fwrite>
                #endif

                /* id of the first message will be 1 */
                bSuccess = bSendUART32v2(START_STATUS_SEQUENCE, 1);
8110aba4:	01400044 	movi	r5,1
8110aba8:	01204534 	movhi	r4,33044
8110abac:	21390b04 	addi	r4,r4,-7124
8110abb0:	110c9100 	call	8110c910 <bSendUART32v2>
8110abb4:	e0bffc15 	stw	r2,-16(fp)
                if ( bSuccess == TRUE ) {
8110abb8:	e0bffc17 	ldw	r2,-16(fp)
8110abbc:	10800058 	cmpnei	r2,r2,1
8110abc0:	10000a1e 	bne	r2,zero,8110abec <vSenderComTask+0xd4>
                    eSenderMode = sDummySender;
8110abc4:	00800144 	movi	r2,5
8110abc8:	e0bffa15 	stw	r2,-24(fp)
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
8110abcc:	d0a04f17 	ldw	r2,-32452(gp)
8110abd0:	100f883a 	mov	r7,r2
8110abd4:	01800d44 	movi	r6,53
8110abd8:	01400044 	movi	r5,1
8110abdc:	01204534 	movhi	r4,33044
8110abe0:	21390e04 	addi	r4,r4,-7112
8110abe4:	11126a00 	call	811126a0 <fwrite>
                        debug(fp,"Fail, try again in 5 seconds.\n");
                    #endif 
                    eSenderMode = sStartingConnSender;
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }
                break;
8110abe8:	00002906 	br	8110ac90 <vSenderComTask+0x178>
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
                    #endif                    
                } else {
                    #ifdef DEBUG_ON
                        debug(fp,"Fail, try again in 5 seconds.\n");
8110abec:	d0a04f17 	ldw	r2,-32452(gp)
8110abf0:	100f883a 	mov	r7,r2
8110abf4:	01800784 	movi	r6,30
8110abf8:	01400044 	movi	r5,1
8110abfc:	01204534 	movhi	r4,33044
8110ac00:	21391c04 	addi	r4,r4,-7056
8110ac04:	11126a00 	call	811126a0 <fwrite>
                    #endif 
                    eSenderMode = sStartingConnSender;
8110ac08:	00800044 	movi	r2,1
8110ac0c:	e0bffa15 	stw	r2,-24(fp)
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
8110ac10:	000f883a 	mov	r7,zero
8110ac14:	01800144 	movi	r6,5
8110ac18:	000b883a 	mov	r5,zero
8110ac1c:	0009883a 	mov	r4,zero
8110ac20:	113213c0 	call	8113213c <OSTimeDlyHMSM>
                }
                break;
8110ac24:	00001a06 	br	8110ac90 <vSenderComTask+0x178>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
8110ac28:	00800144 	movi	r2,5
8110ac2c:	e0bffa15 	stw	r2,-24(fp)

                #ifdef DEBUG_ON
                    debug(fp,"sDummySender\n");
8110ac30:	d0a04f17 	ldw	r2,-32452(gp)
8110ac34:	100f883a 	mov	r7,r2
8110ac38:	01800344 	movi	r6,13
8110ac3c:	01400044 	movi	r5,1
8110ac40:	01204534 	movhi	r4,33044
8110ac44:	21392404 	addi	r4,r4,-7024
8110ac48:	11126a00 	call	811126a0 <fwrite>
                #endif

				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
8110ac4c:	000f883a 	mov	r7,zero
8110ac50:	01800284 	movi	r6,10
8110ac54:	000b883a 	mov	r5,zero
8110ac58:	0009883a 	mov	r4,zero
8110ac5c:	113213c0 	call	8113213c <OSTimeDlyHMSM>

                break;
8110ac60:	00000b06 	br	8110ac90 <vSenderComTask+0x178>
            default:
                #ifdef DEBUG_ON
                    debug(fp,"Sender default\n");
8110ac64:	d0a04f17 	ldw	r2,-32452(gp)
8110ac68:	100f883a 	mov	r7,r2
8110ac6c:	018003c4 	movi	r6,15
8110ac70:	01400044 	movi	r5,1
8110ac74:	01204534 	movhi	r4,33044
8110ac78:	21392804 	addi	r4,r4,-7008
8110ac7c:	11126a00 	call	811126a0 <fwrite>
                #endif
                eSenderMode = sDummySender;
8110ac80:	00800144 	movi	r2,5
8110ac84:	e0bffa15 	stw	r2,-24(fp)
                break;
8110ac88:	00000106 	br	8110ac90 <vSenderComTask+0x178>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
8110ac8c:	0001883a 	nop
                #endif
                eSenderMode = sDummySender;
                break;
        }

    }
8110ac90:	003fb106 	br	8110ab58 <__reset+0xfb0eab58>

8110ac94 <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
8110ac94:	defffd04 	addi	sp,sp,-12
8110ac98:	de00012e 	bgeu	sp,et,8110aca0 <vSimMebTask+0xc>
8110ac9c:	003b68fa 	trap	3
8110aca0:	df000215 	stw	fp,8(sp)
8110aca4:	df000204 	addi	fp,sp,8
8110aca8:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
8110acac:	e03ffe15 	stw	zero,-8(fp)


	//SIMUCAM MAIN TASK


}
8110acb0:	0001883a 	nop
8110acb4:	e037883a 	mov	sp,fp
8110acb8:	df000017 	ldw	fp,0(sp)
8110acbc:	dec00104 	addi	sp,sp,4
8110acc0:	f800283a 	ret

8110acc4 <vStackMonitor>:
    }
}

#else
#ifdef DEBUG_ON
void vStackMonitor(void *task_data) {
8110acc4:	deffd804 	addi	sp,sp,-160
8110acc8:	de00012e 	bgeu	sp,et,8110acd0 <vStackMonitor+0xc>
8110accc:	003b68fa 	trap	3
8110acd0:	dfc02715 	stw	ra,156(sp)
8110acd4:	df002615 	stw	fp,152(sp)
8110acd8:	df002604 	addi	fp,sp,152
8110acdc:	e13fff15 	stw	r4,-4(fp)
	INT8U ucErrorCode = 0;
8110ace0:	e03fdc05 	stb	zero,-144(fp)
	OS_STK_DATA data;
	char cBuffer[128];


        debug(fp,"vStackMonitor, enter task.\n");
8110ace4:	d0a04f17 	ldw	r2,-32452(gp)
8110ace8:	100f883a 	mov	r7,r2
8110acec:	018006c4 	movi	r6,27
8110acf0:	01400044 	movi	r5,1
8110acf4:	01204534 	movhi	r4,33044
8110acf8:	21392c04 	addi	r4,r4,-6992
8110acfc:	11126a00 	call	811126a0 <fwrite>


    for (;;) {

    	fprintf(fp, "=========== STACK MONITOR =================\n" );
8110ad00:	d0a04f17 	ldw	r2,-32452(gp)
8110ad04:	100f883a 	mov	r7,r2
8110ad08:	01800b04 	movi	r6,44
8110ad0c:	01400044 	movi	r5,1
8110ad10:	01204534 	movhi	r4,33044
8110ad14:	21393304 	addi	r4,r4,-6964
8110ad18:	11126a00 	call	811126a0 <fwrite>
    	fprintf(fp, " Task           Total               Free             In use  \n" );
8110ad1c:	d0a04f17 	ldw	r2,-32452(gp)
8110ad20:	100f883a 	mov	r7,r2
8110ad24:	01800f84 	movi	r6,62
8110ad28:	01400044 	movi	r5,1
8110ad2c:	01204534 	movhi	r4,33044
8110ad30:	21393f04 	addi	r4,r4,-6916
8110ad34:	11126a00 	call	811126a0 <fwrite>

    	ucErrorCode = OSTaskStkChk( RECEIVER_TASK_PRIO , &data);
8110ad38:	e0bfdd04 	addi	r2,fp,-140
8110ad3c:	100b883a 	mov	r5,r2
8110ad40:	01000784 	movi	r4,30
8110ad44:	1131ad80 	call	81131ad8 <OSTaskStkChk>
8110ad48:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE ) {
8110ad4c:	e0bfdc03 	ldbu	r2,-144(fp)
8110ad50:	10000f1e 	bne	r2,zero,8110ad90 <vStackMonitor+0xcc>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110ad54:	d1204f17 	ldw	r4,-32452(gp)
    				"RECEIVER_TASK",
    				data.OSFree + data.OSUsed,
8110ad58:	e0ffdd17 	ldw	r3,-140(fp)
8110ad5c:	e0bfde17 	ldw	r2,-136(fp)
    	fprintf(fp, " Task           Total               Free             In use  \n" );

    	ucErrorCode = OSTaskStkChk( RECEIVER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110ad60:	188b883a 	add	r5,r3,r2
8110ad64:	e0bfdd17 	ldw	r2,-140(fp)
8110ad68:	e0ffde17 	ldw	r3,-136(fp)
8110ad6c:	d8c00115 	stw	r3,4(sp)
8110ad70:	d8800015 	stw	r2,0(sp)
8110ad74:	280f883a 	mov	r7,r5
8110ad78:	01a04534 	movhi	r6,33044
8110ad7c:	31b94f04 	addi	r6,r6,-6852
8110ad80:	01604534 	movhi	r5,33044
8110ad84:	29795304 	addi	r5,r5,-6836
8110ad88:	11120040 	call	81112004 <fprintf>
8110ad8c:	00000706 	br	8110adac <vStackMonitor+0xe8>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get RECEIVER_TASK stack \n" );
8110ad90:	d0a04f17 	ldw	r2,-32452(gp)
8110ad94:	100f883a 	mov	r7,r2
8110ad98:	01800904 	movi	r6,36
8110ad9c:	01400044 	movi	r5,1
8110ada0:	01204534 	movhi	r4,33044
8110ada4:	21396204 	addi	r4,r4,-6776
8110ada8:	11126a00 	call	811126a0 <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( TIMEOUT_CHECKER_PRIO , &data);
8110adac:	e0bfdd04 	addi	r2,fp,-140
8110adb0:	100b883a 	mov	r5,r2
8110adb4:	01000704 	movi	r4,28
8110adb8:	1131ad80 	call	81131ad8 <OSTaskStkChk>
8110adbc:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110adc0:	e0bfdc03 	ldbu	r2,-144(fp)
8110adc4:	10000f1e 	bne	r2,zero,8110ae04 <vStackMonitor+0x140>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110adc8:	d1204f17 	ldw	r4,-32452(gp)
    				"TIMEOUT_CHECKER",
    				data.OSFree + data.OSUsed,
8110adcc:	e0ffdd17 	ldw	r3,-140(fp)
8110add0:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( TIMEOUT_CHECKER_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110add4:	188b883a 	add	r5,r3,r2
8110add8:	e0bfdd17 	ldw	r2,-140(fp)
8110addc:	e0ffde17 	ldw	r3,-136(fp)
8110ade0:	d8c00115 	stw	r3,4(sp)
8110ade4:	d8800015 	stw	r2,0(sp)
8110ade8:	280f883a 	mov	r7,r5
8110adec:	01a04534 	movhi	r6,33044
8110adf0:	31b96c04 	addi	r6,r6,-6736
8110adf4:	01604534 	movhi	r5,33044
8110adf8:	29795304 	addi	r5,r5,-6836
8110adfc:	11120040 	call	81112004 <fprintf>
8110ae00:	00000706 	br	8110ae20 <vStackMonitor+0x15c>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get TIMEOUT_CHECKER stack \n" );
8110ae04:	d0a04f17 	ldw	r2,-32452(gp)
8110ae08:	100f883a 	mov	r7,r2
8110ae0c:	01800984 	movi	r6,38
8110ae10:	01400044 	movi	r5,1
8110ae14:	01204534 	movhi	r4,33044
8110ae18:	21397004 	addi	r4,r4,-6720
8110ae1c:	11126a00 	call	811126a0 <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( PARSER_TASK_PRIO , &data);
8110ae20:	e0bfdd04 	addi	r2,fp,-140
8110ae24:	100b883a 	mov	r5,r2
8110ae28:	01000684 	movi	r4,26
8110ae2c:	1131ad80 	call	81131ad8 <OSTaskStkChk>
8110ae30:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110ae34:	e0bfdc03 	ldbu	r2,-144(fp)
8110ae38:	10000f1e 	bne	r2,zero,8110ae78 <vStackMonitor+0x1b4>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110ae3c:	d1204f17 	ldw	r4,-32452(gp)
    				"PARSER_TASK",
    				data.OSFree + data.OSUsed,
8110ae40:	e0ffdd17 	ldw	r3,-140(fp)
8110ae44:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( PARSER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110ae48:	188b883a 	add	r5,r3,r2
8110ae4c:	e0bfdd17 	ldw	r2,-140(fp)
8110ae50:	e0ffde17 	ldw	r3,-136(fp)
8110ae54:	d8c00115 	stw	r3,4(sp)
8110ae58:	d8800015 	stw	r2,0(sp)
8110ae5c:	280f883a 	mov	r7,r5
8110ae60:	01a04534 	movhi	r6,33044
8110ae64:	31b97a04 	addi	r6,r6,-6680
8110ae68:	01604534 	movhi	r5,33044
8110ae6c:	29795304 	addi	r5,r5,-6836
8110ae70:	11120040 	call	81112004 <fprintf>
8110ae74:	00000706 	br	8110ae94 <vStackMonitor+0x1d0>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get PARSER_TASK stack \n" );
8110ae78:	d0a04f17 	ldw	r2,-32452(gp)
8110ae7c:	100f883a 	mov	r7,r2
8110ae80:	01800884 	movi	r6,34
8110ae84:	01400044 	movi	r5,1
8110ae88:	01204534 	movhi	r4,33044
8110ae8c:	21397d04 	addi	r4,r4,-6668
8110ae90:	11126a00 	call	811126a0 <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( OUT_ACK_TASK_PRIO , &data);
8110ae94:	e0bfdd04 	addi	r2,fp,-140
8110ae98:	100b883a 	mov	r5,r2
8110ae9c:	01000644 	movi	r4,25
8110aea0:	1131ad80 	call	81131ad8 <OSTaskStkChk>
8110aea4:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110aea8:	e0bfdc03 	ldbu	r2,-144(fp)
8110aeac:	10000f1e 	bne	r2,zero,8110aeec <vStackMonitor+0x228>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110aeb0:	d1204f17 	ldw	r4,-32452(gp)
    				"OUT_ACK_TASK",
    				data.OSFree + data.OSUsed,
8110aeb4:	e0ffdd17 	ldw	r3,-140(fp)
8110aeb8:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( OUT_ACK_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110aebc:	188b883a 	add	r5,r3,r2
8110aec0:	e0bfdd17 	ldw	r2,-140(fp)
8110aec4:	e0ffde17 	ldw	r3,-136(fp)
8110aec8:	d8c00115 	stw	r3,4(sp)
8110aecc:	d8800015 	stw	r2,0(sp)
8110aed0:	280f883a 	mov	r7,r5
8110aed4:	01a04534 	movhi	r6,33044
8110aed8:	31b98604 	addi	r6,r6,-6632
8110aedc:	01604534 	movhi	r5,33044
8110aee0:	29795304 	addi	r5,r5,-6836
8110aee4:	11120040 	call	81112004 <fprintf>
8110aee8:	00000706 	br	8110af08 <vStackMonitor+0x244>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get OUT_ACK_TASK stack \n" );
8110aeec:	d0a04f17 	ldw	r2,-32452(gp)
8110aef0:	100f883a 	mov	r7,r2
8110aef4:	018008c4 	movi	r6,35
8110aef8:	01400044 	movi	r5,1
8110aefc:	01204534 	movhi	r4,33044
8110af00:	21398a04 	addi	r4,r4,-6616
8110af04:	11126a00 	call	811126a0 <fwrite>
    	}



    	ucErrorCode = OSTaskStkChk( SENDER_TASK_PRIO , &data);
8110af08:	e0bfdd04 	addi	r2,fp,-140
8110af0c:	100b883a 	mov	r5,r2
8110af10:	01000604 	movi	r4,24
8110af14:	1131ad80 	call	81131ad8 <OSTaskStkChk>
8110af18:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110af1c:	e0bfdc03 	ldbu	r2,-144(fp)
8110af20:	10000f1e 	bne	r2,zero,8110af60 <vStackMonitor+0x29c>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110af24:	d1204f17 	ldw	r4,-32452(gp)
    				"SENDER_TASK",
    				data.OSFree + data.OSUsed,
8110af28:	e0ffdd17 	ldw	r3,-140(fp)
8110af2c:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( SENDER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110af30:	188b883a 	add	r5,r3,r2
8110af34:	e0bfdd17 	ldw	r2,-140(fp)
8110af38:	e0ffde17 	ldw	r3,-136(fp)
8110af3c:	d8c00115 	stw	r3,4(sp)
8110af40:	d8800015 	stw	r2,0(sp)
8110af44:	280f883a 	mov	r7,r5
8110af48:	01a04534 	movhi	r6,33044
8110af4c:	31b99304 	addi	r6,r6,-6580
8110af50:	01604534 	movhi	r5,33044
8110af54:	29795304 	addi	r5,r5,-6836
8110af58:	11120040 	call	81112004 <fprintf>
8110af5c:	00000706 	br	8110af7c <vStackMonitor+0x2b8>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get SENDER_TASK stack \n" );
8110af60:	d0a04f17 	ldw	r2,-32452(gp)
8110af64:	100f883a 	mov	r7,r2
8110af68:	01800884 	movi	r6,34
8110af6c:	01400044 	movi	r5,1
8110af70:	01204534 	movhi	r4,33044
8110af74:	21399604 	addi	r4,r4,-6568
8110af78:	11126a00 	call	811126a0 <fwrite>
    	}



    	ucErrorCode = OSTaskStkChk( IN_ACK_TASK_PRIO , &data);
8110af7c:	e0bfdd04 	addi	r2,fp,-140
8110af80:	100b883a 	mov	r5,r2
8110af84:	010005c4 	movi	r4,23
8110af88:	1131ad80 	call	81131ad8 <OSTaskStkChk>
8110af8c:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110af90:	e0bfdc03 	ldbu	r2,-144(fp)
8110af94:	10000f1e 	bne	r2,zero,8110afd4 <vStackMonitor+0x310>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110af98:	d1204f17 	ldw	r4,-32452(gp)
    				"IN_ACK_TASK",
    				data.OSFree + data.OSUsed,
8110af9c:	e0ffdd17 	ldw	r3,-140(fp)
8110afa0:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( IN_ACK_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110afa4:	188b883a 	add	r5,r3,r2
8110afa8:	e0bfdd17 	ldw	r2,-140(fp)
8110afac:	e0ffde17 	ldw	r3,-136(fp)
8110afb0:	d8c00115 	stw	r3,4(sp)
8110afb4:	d8800015 	stw	r2,0(sp)
8110afb8:	280f883a 	mov	r7,r5
8110afbc:	01a04534 	movhi	r6,33044
8110afc0:	31b99f04 	addi	r6,r6,-6532
8110afc4:	01604534 	movhi	r5,33044
8110afc8:	29795304 	addi	r5,r5,-6836
8110afcc:	11120040 	call	81112004 <fprintf>
8110afd0:	00000706 	br	8110aff0 <vStackMonitor+0x32c>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get IN_ACK_TASK stack \n" );
8110afd4:	d0a04f17 	ldw	r2,-32452(gp)
8110afd8:	100f883a 	mov	r7,r2
8110afdc:	01800884 	movi	r6,34
8110afe0:	01400044 	movi	r5,1
8110afe4:	01204534 	movhi	r4,33044
8110afe8:	2139a204 	addi	r4,r4,-6520
8110afec:	11126a00 	call	811126a0 <fwrite>
    	}

    	fprintf(fp, "\n" );
8110aff0:	d0a04f17 	ldw	r2,-32452(gp)
8110aff4:	100b883a 	mov	r5,r2
8110aff8:	01000284 	movi	r4,10
8110affc:	111207c0 	call	8111207c <fputc>

    	OSTimeDlyHMSM(0, 0, 10, 0);
8110b000:	000f883a 	mov	r7,zero
8110b004:	01800284 	movi	r6,10
8110b008:	000b883a 	mov	r5,zero
8110b00c:	0009883a 	mov	r4,zero
8110b010:	113213c0 	call	8113213c <OSTimeDlyHMSM>
    }
8110b014:	003f3a06 	br	8110ad00 <__reset+0xfb0ead00>

8110b018 <vTimeoutCheckerTaskv2>:

#include "timeout_checker_ack_task.h"



void vTimeoutCheckerTaskv2(void *task_data) {
8110b018:	defffc04 	addi	sp,sp,-16
8110b01c:	de00012e 	bgeu	sp,et,8110b024 <vTimeoutCheckerTaskv2+0xc>
8110b020:	003b68fa 	trap	3
8110b024:	dfc00315 	stw	ra,12(sp)
8110b028:	df000215 	stw	fp,8(sp)
8110b02c:	df000204 	addi	fp,sp,8
8110b030:	e13fff15 	stw	r4,-4(fp)
	INT8U ucErrorCode = 0;
8110b034:	e03ffe05 	stb	zero,-8(fp)

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
8110b038:	d0a04f17 	ldw	r2,-32452(gp)
8110b03c:	100f883a 	mov	r7,r2
8110b040:	01800844 	movi	r6,33
8110b044:	01400044 	movi	r5,1
8110b048:	01204534 	movhi	r4,33044
8110b04c:	2139ab04 	addi	r4,r4,-6484
8110b050:	11126a00 	call	811126a0 <fwrite>
    #endif   

    for (;;) {
        OSSemPend(xSemTimeoutChecker, 0, &ucErrorCode);
8110b054:	d0a05417 	ldw	r2,-32432(gp)
8110b058:	e1bffe04 	addi	r6,fp,-8
8110b05c:	000b883a 	mov	r5,zero
8110b060:	1009883a 	mov	r4,r2
8110b064:	11301a40 	call	811301a4 <OSSemPend>
        if ( ucErrorCode == OS_NO_ERR ) {
8110b068:	e0bffe03 	ldbu	r2,-8(fp)
8110b06c:	10803fcc 	andi	r2,r2,255
8110b070:	1000021e 	bne	r2,zero,8110b07c <vTimeoutCheckerTaskv2+0x64>
            /* Just check the restransmission buffer */
            vCheck();
8110b074:	110b0840 	call	8110b084 <vCheck>
8110b078:	003ff606 	br	8110b054 <__reset+0xfb0eb054>
        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
8110b07c:	110f1bc0 	call	8110f1bc <vFailGetBlockingSemTimeoutTask>
        }
    }
8110b080:	003ff406 	br	8110b054 <__reset+0xfb0eb054>

8110b084 <vCheck>:
}


void vCheck( void ) {
8110b084:	defffd04 	addi	sp,sp,-12
8110b088:	de00012e 	bgeu	sp,et,8110b090 <vCheck+0xc>
8110b08c:	003b68fa 	trap	3
8110b090:	dfc00215 	stw	ra,8(sp)
8110b094:	df000115 	stw	fp,4(sp)
8110b098:	df000104 	addi	fp,sp,4
	INT8U ucErrorCode = 0;
8110b09c:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucHashVerification = 0;
8110b0a0:	e03fff05 	stb	zero,-4(fp)

    ucHashVerification = 0;
8110b0a4:	e03fff05 	stb	zero,-4(fp)
    ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);
8110b0a8:	d0a05583 	ldbu	r2,-32426(gp)
8110b0ac:	10803fcc 	andi	r2,r2,255
8110b0b0:	10800218 	cmpnei	r2,r2,8
8110b0b4:	1000021e 	bne	r2,zero,8110b0c0 <vCheck+0x3c>
8110b0b8:	00c00104 	movi	r3,4
8110b0bc:	00000106 	br	8110b0c4 <vCheck+0x40>
8110b0c0:	0007883a 	mov	r3,zero
8110b0c4:	d0a05e03 	ldbu	r2,-32392(gp)
8110b0c8:	10803fcc 	andi	r2,r2,255
8110b0cc:	10800218 	cmpnei	r2,r2,8
8110b0d0:	1000021e 	bne	r2,zero,8110b0dc <vCheck+0x58>
8110b0d4:	00800084 	movi	r2,2
8110b0d8:	00000106 	br	8110b0e0 <vCheck+0x5c>
8110b0dc:	0005883a 	mov	r2,zero
8110b0e0:	1884b03a 	or	r2,r3,r2
8110b0e4:	1007883a 	mov	r3,r2
8110b0e8:	d0a05e43 	ldbu	r2,-32391(gp)
8110b0ec:	10803fcc 	andi	r2,r2,255
8110b0f0:	108001a0 	cmpeqi	r2,r2,6
8110b0f4:	1884b03a 	or	r2,r3,r2
8110b0f8:	1007883a 	mov	r3,r2
8110b0fc:	e0bfff03 	ldbu	r2,-4(fp)
8110b100:	1884b03a 	or	r2,r3,r2
8110b104:	e0bfff05 	stb	r2,-4(fp)

    /* Nothing in the (re)transmission buffer */
    if ( ucHashVerification == 0b00000111 )
8110b108:	e0bfff03 	ldbu	r2,-4(fp)
8110b10c:	108001d8 	cmpnei	r2,r2,7
8110b110:	10005326 	beq	r2,zero,8110b260 <vCheck+0x1dc>
        return;
#ifdef DEBUG_ON//todo:remover
    debug(fp,"vCheck - Tentando pegar Mutex TX \n");
8110b114:	d0a04f17 	ldw	r2,-32452(gp)
8110b118:	100f883a 	mov	r7,r2
8110b11c:	01800884 	movi	r6,34
8110b120:	01400044 	movi	r5,1
8110b124:	01204534 	movhi	r4,33044
8110b128:	2139b404 	addi	r4,r4,-6448
8110b12c:	11126a00 	call	811126a0 <fwrite>
#endif
    /* Try to get the Mutex of the UART */
	OSMutexPend(xTxUARTMutex, 0, &ucErrorCode); /* Blocking */
8110b130:	d0a05d17 	ldw	r2,-32396(gp)
8110b134:	e0ffff44 	addi	r3,fp,-3
8110b138:	180d883a 	mov	r6,r3
8110b13c:	000b883a 	mov	r5,zero
8110b140:	1009883a 	mov	r4,r2
8110b144:	112e1980 	call	8112e198 <OSMutexPend>
#ifdef DEBUG_ON//todo:remover
    debug(fp,"vCheck - Sucesso get Mutex TX \n");
8110b148:	d0a04f17 	ldw	r2,-32452(gp)
8110b14c:	100f883a 	mov	r7,r2
8110b150:	018007c4 	movi	r6,31
8110b154:	01400044 	movi	r5,1
8110b158:	01204534 	movhi	r4,33044
8110b15c:	2139bd04 	addi	r4,r4,-6412
8110b160:	11126a00 	call	811126a0 <fwrite>
#endif
    if ( ucErrorCode != OS_NO_ERR ) {
8110b164:	e0bfff43 	ldbu	r2,-3(fp)
8110b168:	10803fcc 	andi	r2,r2,255
8110b16c:	10000826 	beq	r2,zero,8110b190 <vCheck+0x10c>
        /* Should never get here, is a blocking operation */
		#ifdef DEBUG_ON
			debug(fp,"Should never get here. Trying to get xTxUARTMutex. (vCheck)\n");
8110b170:	d0a04f17 	ldw	r2,-32452(gp)
8110b174:	100f883a 	mov	r7,r2
8110b178:	01800f04 	movi	r6,60
8110b17c:	01400044 	movi	r5,1
8110b180:	01204534 	movhi	r4,33044
8110b184:	2139c504 	addi	r4,r4,-6380
8110b188:	11126a00 	call	811126a0 <fwrite>
		#endif
        return;
8110b18c:	00003506 	br	8110b264 <vCheck+0x1e0>

    /* ---> At this point we have the Mutex of TX UART, let's try to get the mutex of all retransmission buffer. */


    /* There are any spot used in the xBuffer128? */
    if ( 0b00000001 != (0b00000001 & ucHashVerification ) )
8110b190:	e0bfff03 	ldbu	r2,-4(fp)
8110b194:	1080004c 	andi	r2,r2,1
8110b198:	10803fcc 	andi	r2,r2,255
8110b19c:	1000021e 	bne	r2,zero,8110b1a8 <vCheck+0x124>
        vCheckRetransmission128();
8110b1a0:	110b2780 	call	8110b278 <vCheckRetransmission128>
8110b1a4:	00000506 	br	8110b1bc <vCheck+0x138>
    else
    	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128)); /* For consistency with SemCount128 */
8110b1a8:	01800604 	movi	r6,24
8110b1ac:	000b883a 	mov	r5,zero
8110b1b0:	01204574 	movhi	r4,33045
8110b1b4:	212ab904 	addi	r4,r4,-21788
8110b1b8:	11132040 	call	81113204 <memset>


        /* There are any spot used in the xBuffer64? */
    if ( 0b00000010 != (0b00000010 & ucHashVerification ) )
8110b1bc:	e0bfff03 	ldbu	r2,-4(fp)
8110b1c0:	1080008c 	andi	r2,r2,2
8110b1c4:	10803fcc 	andi	r2,r2,255
8110b1c8:	1000021e 	bne	r2,zero,8110b1d4 <vCheck+0x150>
        vCheckRetransmission64();
8110b1cc:	110b4fc0 	call	8110b4fc <vCheckRetransmission64>
8110b1d0:	00000506 	br	8110b1e8 <vCheck+0x164>
    else
        memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64)); /* For consistency with SemCount64 */
8110b1d4:	01800804 	movi	r6,32
8110b1d8:	000b883a 	mov	r5,zero
8110b1dc:	01204574 	movhi	r4,33045
8110b1e0:	212abf04 	addi	r4,r4,-21764
8110b1e4:	11132040 	call	81113204 <memset>

    /* There are any spot used in the xBuffer32? */
    if ( 0b00000100 != (0b00000100 & ucHashVerification ) )
8110b1e8:	e0bfff03 	ldbu	r2,-4(fp)
8110b1ec:	1080010c 	andi	r2,r2,4
8110b1f0:	10803fcc 	andi	r2,r2,255
8110b1f4:	1000021e 	bne	r2,zero,8110b200 <vCheck+0x17c>
        vCheckRetransmission32();
8110b1f8:	110b7880 	call	8110b788 <vCheckRetransmission32>
8110b1fc:	00000506 	br	8110b214 <vCheck+0x190>
    else
    	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32)); /* For consistency with SemCount32 */
8110b200:	01800804 	movi	r6,32
8110b204:	000b883a 	mov	r5,zero
8110b208:	01204574 	movhi	r4,33045
8110b20c:	212ac704 	addi	r4,r4,-21732
8110b210:	11132040 	call	81113204 <memset>

#ifdef DEBUG_ON//todo:remover
    debug(fp,"vCheck - Tentando devolver Mutex TX \n");
8110b214:	d0a04f17 	ldw	r2,-32452(gp)
8110b218:	100f883a 	mov	r7,r2
8110b21c:	01800944 	movi	r6,37
8110b220:	01400044 	movi	r5,1
8110b224:	01204534 	movhi	r4,33044
8110b228:	2139d504 	addi	r4,r4,-6316
8110b22c:	11126a00 	call	811126a0 <fwrite>
#endif

    OSMutexPost(xTxUARTMutex);
8110b230:	d0a05d17 	ldw	r2,-32396(gp)
8110b234:	1009883a 	mov	r4,r2
8110b238:	112e73c0 	call	8112e73c <OSMutexPost>
#ifdef DEBUG_ON//todo:remover
    debug(fp,"vCheck - Devolveu \n");
8110b23c:	d0a04f17 	ldw	r2,-32452(gp)
8110b240:	100f883a 	mov	r7,r2
8110b244:	018004c4 	movi	r6,19
8110b248:	01400044 	movi	r5,1
8110b24c:	01204534 	movhi	r4,33044
8110b250:	2139df04 	addi	r4,r4,-6276
8110b254:	11126a00 	call	811126a0 <fwrite>
#endif

    return;
8110b258:	0001883a 	nop
8110b25c:	00000106 	br	8110b264 <vCheck+0x1e0>
    ucHashVerification = 0;
    ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);

    /* Nothing in the (re)transmission buffer */
    if ( ucHashVerification == 0b00000111 )
        return;
8110b260:	0001883a 	nop
#ifdef DEBUG_ON//todo:remover
    debug(fp,"vCheck - Devolveu \n");
#endif

    return;
}
8110b264:	e037883a 	mov	sp,fp
8110b268:	dfc00117 	ldw	ra,4(sp)
8110b26c:	df000017 	ldw	fp,0(sp)
8110b270:	dec00204 	addi	sp,sp,8
8110b274:	f800283a 	ret

8110b278 <vCheckRetransmission128>:

inline void vCheckRetransmission128( void ) {
8110b278:	defffd04 	addi	sp,sp,-12
8110b27c:	de00012e 	bgeu	sp,et,8110b284 <vCheckRetransmission128+0xc>
8110b280:	003b68fa 	trap	3
8110b284:	dfc00215 	stw	ra,8(sp)
8110b288:	df000115 	stw	fp,4(sp)
8110b28c:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110b290:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucIL = 0;
8110b294:	e03fff05 	stb	zero,-4(fp)

    OSMutexAccept(xMutexBuffer128, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110b298:	d0a05917 	ldw	r2,-32412(gp)
8110b29c:	e0ffff44 	addi	r3,fp,-3
8110b2a0:	180b883a 	mov	r5,r3
8110b2a4:	1009883a 	mov	r4,r2
8110b2a8:	112db180 	call	8112db18 <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110b2ac:	e0bfff43 	ldbu	r2,-3(fp)
8110b2b0:	10803fcc 	andi	r2,r2,255
8110b2b4:	10008b1e 	bne	r2,zero,8110b4e4 <vCheckRetransmission128+0x26c>
    

    /* ---> At this point we have access to the xBuffer128*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_128; ucIL++) {
8110b2b8:	e03fff05 	stb	zero,-4(fp)
8110b2bc:	00008106 	br	8110b4c4 <vCheckRetransmission128+0x24c>
        /* Check if in use */
        if ( xInUseRetrans.b128[ucIL] == TRUE ) {
8110b2c0:	e0ffff03 	ldbu	r3,-4(fp)
8110b2c4:	00a04574 	movhi	r2,33045
8110b2c8:	10aab904 	addi	r2,r2,-21788
8110b2cc:	18c7883a 	add	r3,r3,r3
8110b2d0:	18c7883a 	add	r3,r3,r3
8110b2d4:	10c5883a 	add	r2,r2,r3
8110b2d8:	10800017 	ldw	r2,0(r2)
8110b2dc:	10800058 	cmpnei	r2,r2,1
8110b2e0:	1000751e 	bne	r2,zero,8110b4b8 <vCheckRetransmission128+0x240>

            if ( xBuffer128[ucIL].bSent == TRUE )
8110b2e4:	e0ffff03 	ldbu	r3,-4(fp)
8110b2e8:	00a04574 	movhi	r2,33045
8110b2ec:	10aacf04 	addi	r2,r2,-21700
8110b2f0:	18c02324 	muli	r3,r3,140
8110b2f4:	10c5883a 	add	r2,r2,r3
8110b2f8:	10802004 	addi	r2,r2,128
8110b2fc:	10800017 	ldw	r2,0(r2)
8110b300:	10800058 	cmpnei	r2,r2,1
8110b304:	1000211e 	bne	r2,zero,8110b38c <vCheckRetransmission128+0x114>
                if ( ++xBuffer128[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110b308:	e0ffff03 	ldbu	r3,-4(fp)
8110b30c:	00a04574 	movhi	r2,33045
8110b310:	10aacf04 	addi	r2,r2,-21700
8110b314:	19002324 	muli	r4,r3,140
8110b318:	1105883a 	add	r2,r2,r4
8110b31c:	10802184 	addi	r2,r2,134
8110b320:	1080000b 	ldhu	r2,0(r2)
8110b324:	10800044 	addi	r2,r2,1
8110b328:	100b883a 	mov	r5,r2
8110b32c:	00a04574 	movhi	r2,33045
8110b330:	10aacf04 	addi	r2,r2,-21700
8110b334:	19002324 	muli	r4,r3,140
8110b338:	1105883a 	add	r2,r2,r4
8110b33c:	10802184 	addi	r2,r2,134
8110b340:	1140000d 	sth	r5,0(r2)
8110b344:	00a04574 	movhi	r2,33045
8110b348:	10aacf04 	addi	r2,r2,-21700
8110b34c:	18c02324 	muli	r3,r3,140
8110b350:	10c5883a 	add	r2,r2,r3
8110b354:	10802184 	addi	r2,r2,134
8110b358:	1080000b 	ldhu	r2,0(r2)
8110b35c:	10bfffcc 	andi	r2,r2,65535
8110b360:	10a0001c 	xori	r2,r2,32768
8110b364:	10a00004 	addi	r2,r2,-32768
8110b368:	10800090 	cmplti	r2,r2,2
8110b36c:	1000071e 	bne	r2,zero,8110b38c <vCheckRetransmission128+0x114>
                    xBuffer128[ucIL].bSent = FALSE;
8110b370:	e0ffff03 	ldbu	r3,-4(fp)
8110b374:	00a04574 	movhi	r2,33045
8110b378:	10aacf04 	addi	r2,r2,-21700
8110b37c:	18c02324 	muli	r3,r3,140
8110b380:	10c5883a 	add	r2,r2,r3
8110b384:	10802004 	addi	r2,r2,128
8110b388:	10000015 	stw	zero,0(r2)

            if ( xBuffer128[ucIL].bSent == FALSE ) {
8110b38c:	e0ffff03 	ldbu	r3,-4(fp)
8110b390:	00a04574 	movhi	r2,33045
8110b394:	10aacf04 	addi	r2,r2,-21700
8110b398:	18c02324 	muli	r3,r3,140
8110b39c:	10c5883a 	add	r2,r2,r3
8110b3a0:	10802004 	addi	r2,r2,128
8110b3a4:	10800017 	ldw	r2,0(r2)
8110b3a8:	1000431e 	bne	r2,zero,8110b4b8 <vCheckRetransmission128+0x240>
                puts(xBuffer128[ucIL].buffer);
8110b3ac:	e0bfff03 	ldbu	r2,-4(fp)
8110b3b0:	10c02324 	muli	r3,r2,140
8110b3b4:	00a04574 	movhi	r2,33045
8110b3b8:	10aacf04 	addi	r2,r2,-21700
8110b3bc:	1885883a 	add	r2,r3,r2
8110b3c0:	1009883a 	mov	r4,r2
8110b3c4:	11136500 	call	81113650 <puts>
                xBuffer128[ucIL].bSent = TRUE;
8110b3c8:	e0ffff03 	ldbu	r3,-4(fp)
8110b3cc:	00a04574 	movhi	r2,33045
8110b3d0:	10aacf04 	addi	r2,r2,-21700
8110b3d4:	18c02324 	muli	r3,r3,140
8110b3d8:	10c5883a 	add	r2,r2,r3
8110b3dc:	10802004 	addi	r2,r2,128
8110b3e0:	00c00044 	movi	r3,1
8110b3e4:	10c00015 	stw	r3,0(r2)
                xBuffer128[ucIL].usiTimeOut = 0;
8110b3e8:	e0ffff03 	ldbu	r3,-4(fp)
8110b3ec:	00a04574 	movhi	r2,33045
8110b3f0:	10aacf04 	addi	r2,r2,-21700
8110b3f4:	18c02324 	muli	r3,r3,140
8110b3f8:	10c5883a 	add	r2,r2,r3
8110b3fc:	10802184 	addi	r2,r2,134
8110b400:	1000000d 	sth	zero,0(r2)

                /* Check if already tried all the times */
                if ( ++xBuffer128[ucIL].ucNofRetries > N_RETRIES_COMM ) {
8110b404:	e0ffff03 	ldbu	r3,-4(fp)
8110b408:	00a04574 	movhi	r2,33045
8110b40c:	10aacf04 	addi	r2,r2,-21700
8110b410:	19002324 	muli	r4,r3,140
8110b414:	1105883a 	add	r2,r2,r4
8110b418:	10802204 	addi	r2,r2,136
8110b41c:	10800003 	ldbu	r2,0(r2)
8110b420:	10800044 	addi	r2,r2,1
8110b424:	100b883a 	mov	r5,r2
8110b428:	00a04574 	movhi	r2,33045
8110b42c:	10aacf04 	addi	r2,r2,-21700
8110b430:	19002324 	muli	r4,r3,140
8110b434:	1105883a 	add	r2,r2,r4
8110b438:	10802204 	addi	r2,r2,136
8110b43c:	11400005 	stb	r5,0(r2)
8110b440:	00a04574 	movhi	r2,33045
8110b444:	10aacf04 	addi	r2,r2,-21700
8110b448:	18c02324 	muli	r3,r3,140
8110b44c:	10c5883a 	add	r2,r2,r3
8110b450:	10802204 	addi	r2,r2,136
8110b454:	10800003 	ldbu	r2,0(r2)
8110b458:	10803fcc 	andi	r2,r2,255
8110b45c:	108000b0 	cmpltui	r2,r2,2
8110b460:	1000151e 	bne	r2,zero,8110b4b8 <vCheckRetransmission128+0x240>
                    /* Now it is a Free place */
                    xInUseRetrans.b128[ucIL] = FALSE;
8110b464:	e0ffff03 	ldbu	r3,-4(fp)
8110b468:	00a04574 	movhi	r2,33045
8110b46c:	10aab904 	addi	r2,r2,-21788
8110b470:	18c7883a 	add	r3,r3,r3
8110b474:	18c7883a 	add	r3,r3,r3
8110b478:	10c5883a 	add	r2,r2,r3
8110b47c:	10000015 	stw	zero,0(r2)
                    SemCount128++;
8110b480:	d0a05e43 	ldbu	r2,-32391(gp)
8110b484:	10800044 	addi	r2,r2,1
8110b488:	d0a05e45 	stb	r2,-32391(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer128);
8110b48c:	d0a05017 	ldw	r2,-32448(gp)
8110b490:	1009883a 	mov	r4,r2
8110b494:	113052c0 	call	8113052c <OSSemPost>
8110b498:	e0bfff45 	stb	r2,-3(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110b49c:	e0bfff43 	ldbu	r2,-3(fp)
8110b4a0:	10803fcc 	andi	r2,r2,255
8110b4a4:	10000426 	beq	r2,zero,8110b4b8 <vCheckRetransmission128+0x240>
                        SemCount128--;
8110b4a8:	d0a05e43 	ldbu	r2,-32391(gp)
8110b4ac:	10bfffc4 	addi	r2,r2,-1
8110b4b0:	d0a05e45 	stb	r2,-32391(gp)
                        vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110b4b4:	110eaac0 	call	8110eaac <vFailSetCountSemaphorexBuffer128>
    

    /* ---> At this point we have access to the xBuffer128*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_128; ucIL++) {
8110b4b8:	e0bfff03 	ldbu	r2,-4(fp)
8110b4bc:	10800044 	addi	r2,r2,1
8110b4c0:	e0bfff05 	stb	r2,-4(fp)
8110b4c4:	e0bfff03 	ldbu	r2,-4(fp)
8110b4c8:	108001b0 	cmpltui	r2,r2,6
8110b4cc:	103f7c1e 	bne	r2,zero,8110b2c0 <__reset+0xfb0eb2c0>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer128);
8110b4d0:	d0a05917 	ldw	r2,-32412(gp)
8110b4d4:	1009883a 	mov	r4,r2
8110b4d8:	112e73c0 	call	8112e73c <OSMutexPost>

    return;
8110b4dc:	0001883a 	nop
8110b4e0:	00000106 	br	8110b4e8 <vCheckRetransmission128+0x270>
    unsigned char ucIL = 0;

    OSMutexAccept(xMutexBuffer128, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110b4e4:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer128);

    return;
}
8110b4e8:	e037883a 	mov	sp,fp
8110b4ec:	dfc00117 	ldw	ra,4(sp)
8110b4f0:	df000017 	ldw	fp,0(sp)
8110b4f4:	dec00204 	addi	sp,sp,8
8110b4f8:	f800283a 	ret

8110b4fc <vCheckRetransmission64>:

inline void vCheckRetransmission64( void ) {
8110b4fc:	defffd04 	addi	sp,sp,-12
8110b500:	de00012e 	bgeu	sp,et,8110b508 <vCheckRetransmission64+0xc>
8110b504:	003b68fa 	trap	3
8110b508:	dfc00215 	stw	ra,8(sp)
8110b50c:	df000115 	stw	fp,4(sp)
8110b510:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110b514:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucIL = 0;
8110b518:	e03fff05 	stb	zero,-4(fp)

    OSMutexAccept(xMutexBuffer64, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110b51c:	d0a05b17 	ldw	r2,-32404(gp)
8110b520:	e0ffff44 	addi	r3,fp,-3
8110b524:	180b883a 	mov	r5,r3
8110b528:	1009883a 	mov	r4,r2
8110b52c:	112db180 	call	8112db18 <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110b530:	e0bfff43 	ldbu	r2,-3(fp)
8110b534:	10803fcc 	andi	r2,r2,255
8110b538:	10008d1e 	bne	r2,zero,8110b770 <vCheckRetransmission64+0x274>
    

    /* ---> At this point we have access to the xBuffer64*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_64; ucIL++) {
8110b53c:	e03fff05 	stb	zero,-4(fp)
8110b540:	00008306 	br	8110b750 <vCheckRetransmission64+0x254>
        /* Check if in use */
        if ( xInUseRetrans.b64[ucIL] == TRUE ) {
8110b544:	e0ffff03 	ldbu	r3,-4(fp)
8110b548:	00a04574 	movhi	r2,33045
8110b54c:	10aab904 	addi	r2,r2,-21788
8110b550:	18c00184 	addi	r3,r3,6
8110b554:	18c7883a 	add	r3,r3,r3
8110b558:	18c7883a 	add	r3,r3,r3
8110b55c:	10c5883a 	add	r2,r2,r3
8110b560:	10800017 	ldw	r2,0(r2)
8110b564:	10800058 	cmpnei	r2,r2,1
8110b568:	1000761e 	bne	r2,zero,8110b744 <vCheckRetransmission64+0x248>

            if ( xBuffer64[ucIL].bSent == TRUE )
8110b56c:	e0ffff03 	ldbu	r3,-4(fp)
8110b570:	00a04534 	movhi	r2,33044
8110b574:	1090b204 	addi	r2,r2,17096
8110b578:	18c01324 	muli	r3,r3,76
8110b57c:	10c5883a 	add	r2,r2,r3
8110b580:	10801004 	addi	r2,r2,64
8110b584:	10800017 	ldw	r2,0(r2)
8110b588:	10800058 	cmpnei	r2,r2,1
8110b58c:	1000211e 	bne	r2,zero,8110b614 <vCheckRetransmission64+0x118>
                if ( ++xBuffer64[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110b590:	e0ffff03 	ldbu	r3,-4(fp)
8110b594:	00a04534 	movhi	r2,33044
8110b598:	1090b204 	addi	r2,r2,17096
8110b59c:	19001324 	muli	r4,r3,76
8110b5a0:	1105883a 	add	r2,r2,r4
8110b5a4:	10801184 	addi	r2,r2,70
8110b5a8:	1080000b 	ldhu	r2,0(r2)
8110b5ac:	10800044 	addi	r2,r2,1
8110b5b0:	100b883a 	mov	r5,r2
8110b5b4:	00a04534 	movhi	r2,33044
8110b5b8:	1090b204 	addi	r2,r2,17096
8110b5bc:	19001324 	muli	r4,r3,76
8110b5c0:	1105883a 	add	r2,r2,r4
8110b5c4:	10801184 	addi	r2,r2,70
8110b5c8:	1140000d 	sth	r5,0(r2)
8110b5cc:	00a04534 	movhi	r2,33044
8110b5d0:	1090b204 	addi	r2,r2,17096
8110b5d4:	18c01324 	muli	r3,r3,76
8110b5d8:	10c5883a 	add	r2,r2,r3
8110b5dc:	10801184 	addi	r2,r2,70
8110b5e0:	1080000b 	ldhu	r2,0(r2)
8110b5e4:	10bfffcc 	andi	r2,r2,65535
8110b5e8:	10a0001c 	xori	r2,r2,32768
8110b5ec:	10a00004 	addi	r2,r2,-32768
8110b5f0:	10800090 	cmplti	r2,r2,2
8110b5f4:	1000071e 	bne	r2,zero,8110b614 <vCheckRetransmission64+0x118>
                    xBuffer64[ucIL].bSent = FALSE;
8110b5f8:	e0ffff03 	ldbu	r3,-4(fp)
8110b5fc:	00a04534 	movhi	r2,33044
8110b600:	1090b204 	addi	r2,r2,17096
8110b604:	18c01324 	muli	r3,r3,76
8110b608:	10c5883a 	add	r2,r2,r3
8110b60c:	10801004 	addi	r2,r2,64
8110b610:	10000015 	stw	zero,0(r2)

            if ( xBuffer64[ucIL].bSent == FALSE ) {
8110b614:	e0ffff03 	ldbu	r3,-4(fp)
8110b618:	00a04534 	movhi	r2,33044
8110b61c:	1090b204 	addi	r2,r2,17096
8110b620:	18c01324 	muli	r3,r3,76
8110b624:	10c5883a 	add	r2,r2,r3
8110b628:	10801004 	addi	r2,r2,64
8110b62c:	10800017 	ldw	r2,0(r2)
8110b630:	1000441e 	bne	r2,zero,8110b744 <vCheckRetransmission64+0x248>
                puts(xBuffer64[ucIL].buffer);
8110b634:	e0bfff03 	ldbu	r2,-4(fp)
8110b638:	10c01324 	muli	r3,r2,76
8110b63c:	00a04534 	movhi	r2,33044
8110b640:	1090b204 	addi	r2,r2,17096
8110b644:	1885883a 	add	r2,r3,r2
8110b648:	1009883a 	mov	r4,r2
8110b64c:	11136500 	call	81113650 <puts>
                xBuffer64[ucIL].bSent = TRUE;
8110b650:	e0ffff03 	ldbu	r3,-4(fp)
8110b654:	00a04534 	movhi	r2,33044
8110b658:	1090b204 	addi	r2,r2,17096
8110b65c:	18c01324 	muli	r3,r3,76
8110b660:	10c5883a 	add	r2,r2,r3
8110b664:	10801004 	addi	r2,r2,64
8110b668:	00c00044 	movi	r3,1
8110b66c:	10c00015 	stw	r3,0(r2)
                xBuffer64[ucIL].usiTimeOut = 0;
8110b670:	e0ffff03 	ldbu	r3,-4(fp)
8110b674:	00a04534 	movhi	r2,33044
8110b678:	1090b204 	addi	r2,r2,17096
8110b67c:	18c01324 	muli	r3,r3,76
8110b680:	10c5883a 	add	r2,r2,r3
8110b684:	10801184 	addi	r2,r2,70
8110b688:	1000000d 	sth	zero,0(r2)
                /* Check if already tried all the times */
                if ( ++xBuffer64[ucIL].ucNofRetries > N_RETRIES_COMM ) {
8110b68c:	e0ffff03 	ldbu	r3,-4(fp)
8110b690:	00a04534 	movhi	r2,33044
8110b694:	1090b204 	addi	r2,r2,17096
8110b698:	19001324 	muli	r4,r3,76
8110b69c:	1105883a 	add	r2,r2,r4
8110b6a0:	10801204 	addi	r2,r2,72
8110b6a4:	10800003 	ldbu	r2,0(r2)
8110b6a8:	10800044 	addi	r2,r2,1
8110b6ac:	100b883a 	mov	r5,r2
8110b6b0:	00a04534 	movhi	r2,33044
8110b6b4:	1090b204 	addi	r2,r2,17096
8110b6b8:	19001324 	muli	r4,r3,76
8110b6bc:	1105883a 	add	r2,r2,r4
8110b6c0:	10801204 	addi	r2,r2,72
8110b6c4:	11400005 	stb	r5,0(r2)
8110b6c8:	00a04534 	movhi	r2,33044
8110b6cc:	1090b204 	addi	r2,r2,17096
8110b6d0:	18c01324 	muli	r3,r3,76
8110b6d4:	10c5883a 	add	r2,r2,r3
8110b6d8:	10801204 	addi	r2,r2,72
8110b6dc:	10800003 	ldbu	r2,0(r2)
8110b6e0:	10803fcc 	andi	r2,r2,255
8110b6e4:	108000b0 	cmpltui	r2,r2,2
8110b6e8:	1000161e 	bne	r2,zero,8110b744 <vCheckRetransmission64+0x248>
                    /* Now it is a Free place */
                    xInUseRetrans.b64[ucIL] = FALSE;
8110b6ec:	e0ffff03 	ldbu	r3,-4(fp)
8110b6f0:	00a04574 	movhi	r2,33045
8110b6f4:	10aab904 	addi	r2,r2,-21788
8110b6f8:	18c00184 	addi	r3,r3,6
8110b6fc:	18c7883a 	add	r3,r3,r3
8110b700:	18c7883a 	add	r3,r3,r3
8110b704:	10c5883a 	add	r2,r2,r3
8110b708:	10000015 	stw	zero,0(r2)
                    SemCount64++;
8110b70c:	d0a05e03 	ldbu	r2,-32392(gp)
8110b710:	10800044 	addi	r2,r2,1
8110b714:	d0a05e05 	stb	r2,-32392(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer64);
8110b718:	d0a04c17 	ldw	r2,-32464(gp)
8110b71c:	1009883a 	mov	r4,r2
8110b720:	113052c0 	call	8113052c <OSSemPost>
8110b724:	e0bfff45 	stb	r2,-3(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110b728:	e0bfff43 	ldbu	r2,-3(fp)
8110b72c:	10803fcc 	andi	r2,r2,255
8110b730:	10000426 	beq	r2,zero,8110b744 <vCheckRetransmission64+0x248>
                        SemCount64--;
8110b734:	d0a05e03 	ldbu	r2,-32392(gp)
8110b738:	10bfffc4 	addi	r2,r2,-1
8110b73c:	d0a05e05 	stb	r2,-32392(gp)
                        vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110b740:	110ea440 	call	8110ea44 <vFailSetCountSemaphorexBuffer64>
    

    /* ---> At this point we have access to the xBuffer64*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_64; ucIL++) {
8110b744:	e0bfff03 	ldbu	r2,-4(fp)
8110b748:	10800044 	addi	r2,r2,1
8110b74c:	e0bfff05 	stb	r2,-4(fp)
8110b750:	e0bfff03 	ldbu	r2,-4(fp)
8110b754:	10800230 	cmpltui	r2,r2,8
8110b758:	103f7a1e 	bne	r2,zero,8110b544 <__reset+0xfb0eb544>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer64);
8110b75c:	d0a05b17 	ldw	r2,-32404(gp)
8110b760:	1009883a 	mov	r4,r2
8110b764:	112e73c0 	call	8112e73c <OSMutexPost>

    return;
8110b768:	0001883a 	nop
8110b76c:	00000106 	br	8110b774 <vCheckRetransmission64+0x278>
    unsigned char ucIL = 0;

    OSMutexAccept(xMutexBuffer64, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110b770:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer64);

    return;
}
8110b774:	e037883a 	mov	sp,fp
8110b778:	dfc00117 	ldw	ra,4(sp)
8110b77c:	df000017 	ldw	fp,0(sp)
8110b780:	dec00204 	addi	sp,sp,8
8110b784:	f800283a 	ret

8110b788 <vCheckRetransmission32>:


inline void vCheckRetransmission32( void ) {
8110b788:	defffd04 	addi	sp,sp,-12
8110b78c:	de00012e 	bgeu	sp,et,8110b794 <vCheckRetransmission32+0xc>
8110b790:	003b68fa 	trap	3
8110b794:	dfc00215 	stw	ra,8(sp)
8110b798:	df000115 	stw	fp,4(sp)
8110b79c:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110b7a0:	e03fff85 	stb	zero,-2(fp)
    unsigned char ucIL = 0;
8110b7a4:	e03fff05 	stb	zero,-4(fp)
    unsigned char ucMax = 0;
8110b7a8:	e03fff45 	stb	zero,-3(fp)

    OSMutexAccept(xMutexBuffer32, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110b7ac:	d0a05717 	ldw	r2,-32420(gp)
8110b7b0:	e0ffff84 	addi	r3,fp,-2
8110b7b4:	180b883a 	mov	r5,r3
8110b7b8:	1009883a 	mov	r4,r2
8110b7bc:	112db180 	call	8112db18 <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110b7c0:	e0bfff83 	ldbu	r2,-2(fp)
8110b7c4:	10803fcc 	andi	r2,r2,255
8110b7c8:	10009b1e 	bne	r2,zero,8110ba38 <vCheckRetransmission32+0x2b0>
    

    /* ---> At this point we have access to the xBuffer32*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_32; ucIL++) {
8110b7cc:	e03fff05 	stb	zero,-4(fp)
8110b7d0:	00009106 	br	8110ba18 <vCheckRetransmission32+0x290>
        /* Check if in use */
        if ( xInUseRetrans.b32[ucIL] == TRUE ) {
8110b7d4:	e0ffff03 	ldbu	r3,-4(fp)
8110b7d8:	00a04574 	movhi	r2,33045
8110b7dc:	10aab904 	addi	r2,r2,-21788
8110b7e0:	18c00384 	addi	r3,r3,14
8110b7e4:	18c7883a 	add	r3,r3,r3
8110b7e8:	18c7883a 	add	r3,r3,r3
8110b7ec:	10c5883a 	add	r2,r2,r3
8110b7f0:	10800017 	ldw	r2,0(r2)
8110b7f4:	10800058 	cmpnei	r2,r2,1
8110b7f8:	1000841e 	bne	r2,zero,8110ba0c <vCheckRetransmission32+0x284>

            if ( xBuffer32[ucIL].bSent == TRUE )
8110b7fc:	e0ffff03 	ldbu	r3,-4(fp)
8110b800:	00a04534 	movhi	r2,33044
8110b804:	109a6104 	addi	r2,r2,27012
8110b808:	18c00b24 	muli	r3,r3,44
8110b80c:	10c5883a 	add	r2,r2,r3
8110b810:	10800804 	addi	r2,r2,32
8110b814:	10800017 	ldw	r2,0(r2)
8110b818:	10800058 	cmpnei	r2,r2,1
8110b81c:	1000211e 	bne	r2,zero,8110b8a4 <vCheckRetransmission32+0x11c>
                if ( ++xBuffer32[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110b820:	e0ffff03 	ldbu	r3,-4(fp)
8110b824:	00a04534 	movhi	r2,33044
8110b828:	109a6104 	addi	r2,r2,27012
8110b82c:	19000b24 	muli	r4,r3,44
8110b830:	1105883a 	add	r2,r2,r4
8110b834:	10800984 	addi	r2,r2,38
8110b838:	1080000b 	ldhu	r2,0(r2)
8110b83c:	10800044 	addi	r2,r2,1
8110b840:	100b883a 	mov	r5,r2
8110b844:	00a04534 	movhi	r2,33044
8110b848:	109a6104 	addi	r2,r2,27012
8110b84c:	19000b24 	muli	r4,r3,44
8110b850:	1105883a 	add	r2,r2,r4
8110b854:	10800984 	addi	r2,r2,38
8110b858:	1140000d 	sth	r5,0(r2)
8110b85c:	00a04534 	movhi	r2,33044
8110b860:	109a6104 	addi	r2,r2,27012
8110b864:	18c00b24 	muli	r3,r3,44
8110b868:	10c5883a 	add	r2,r2,r3
8110b86c:	10800984 	addi	r2,r2,38
8110b870:	1080000b 	ldhu	r2,0(r2)
8110b874:	10bfffcc 	andi	r2,r2,65535
8110b878:	10a0001c 	xori	r2,r2,32768
8110b87c:	10a00004 	addi	r2,r2,-32768
8110b880:	10800090 	cmplti	r2,r2,2
8110b884:	1000071e 	bne	r2,zero,8110b8a4 <vCheckRetransmission32+0x11c>
                    xBuffer32[ucIL].bSent = FALSE;
8110b888:	e0ffff03 	ldbu	r3,-4(fp)
8110b88c:	00a04534 	movhi	r2,33044
8110b890:	109a6104 	addi	r2,r2,27012
8110b894:	18c00b24 	muli	r3,r3,44
8110b898:	10c5883a 	add	r2,r2,r3
8110b89c:	10800804 	addi	r2,r2,32
8110b8a0:	10000015 	stw	zero,0(r2)

            if ( xBuffer32[ucIL].bSent == FALSE ) {
8110b8a4:	e0ffff03 	ldbu	r3,-4(fp)
8110b8a8:	00a04534 	movhi	r2,33044
8110b8ac:	109a6104 	addi	r2,r2,27012
8110b8b0:	18c00b24 	muli	r3,r3,44
8110b8b4:	10c5883a 	add	r2,r2,r3
8110b8b8:	10800804 	addi	r2,r2,32
8110b8bc:	10800017 	ldw	r2,0(r2)
8110b8c0:	1000521e 	bne	r2,zero,8110ba0c <vCheckRetransmission32+0x284>
                puts(xBuffer32[ucIL].buffer);
8110b8c4:	e0bfff03 	ldbu	r2,-4(fp)
8110b8c8:	10c00b24 	muli	r3,r2,44
8110b8cc:	00a04534 	movhi	r2,33044
8110b8d0:	109a6104 	addi	r2,r2,27012
8110b8d4:	1885883a 	add	r2,r3,r2
8110b8d8:	1009883a 	mov	r4,r2
8110b8dc:	11136500 	call	81113650 <puts>
                xBuffer32[ucIL].bSent = TRUE;
8110b8e0:	e0ffff03 	ldbu	r3,-4(fp)
8110b8e4:	00a04534 	movhi	r2,33044
8110b8e8:	109a6104 	addi	r2,r2,27012
8110b8ec:	18c00b24 	muli	r3,r3,44
8110b8f0:	10c5883a 	add	r2,r2,r3
8110b8f4:	10800804 	addi	r2,r2,32
8110b8f8:	00c00044 	movi	r3,1
8110b8fc:	10c00015 	stw	r3,0(r2)
                xBuffer32[ucIL].usiTimeOut = 0;
8110b900:	e0ffff03 	ldbu	r3,-4(fp)
8110b904:	00a04534 	movhi	r2,33044
8110b908:	109a6104 	addi	r2,r2,27012
8110b90c:	18c00b24 	muli	r3,r3,44
8110b910:	10c5883a 	add	r2,r2,r3
8110b914:	10800984 	addi	r2,r2,38
8110b918:	1000000d 	sth	zero,0(r2)
                /* Check if already tried all the times */

                ucMax = ( xBuffer32[ucIL].usiId == 1 ) ? N_RETRIES_INI_INF : N_RETRIES_COMM;
8110b91c:	e0ffff03 	ldbu	r3,-4(fp)
8110b920:	00a04534 	movhi	r2,33044
8110b924:	109a6104 	addi	r2,r2,27012
8110b928:	18c00b24 	muli	r3,r3,44
8110b92c:	10c5883a 	add	r2,r2,r3
8110b930:	10800904 	addi	r2,r2,36
8110b934:	1080000b 	ldhu	r2,0(r2)
8110b938:	10bfffcc 	andi	r2,r2,65535
8110b93c:	10800058 	cmpnei	r2,r2,1
8110b940:	1000021e 	bne	r2,zero,8110b94c <vCheckRetransmission32+0x1c4>
8110b944:	00bffe84 	movi	r2,-6
8110b948:	00000106 	br	8110b950 <vCheckRetransmission32+0x1c8>
8110b94c:	00800044 	movi	r2,1
8110b950:	e0bfff45 	stb	r2,-3(fp)

                if ( ++xBuffer32[ucIL].ucNofRetries > ucMax ) {
8110b954:	e0ffff03 	ldbu	r3,-4(fp)
8110b958:	00a04534 	movhi	r2,33044
8110b95c:	109a6104 	addi	r2,r2,27012
8110b960:	19000b24 	muli	r4,r3,44
8110b964:	1105883a 	add	r2,r2,r4
8110b968:	10800a04 	addi	r2,r2,40
8110b96c:	10800003 	ldbu	r2,0(r2)
8110b970:	10800044 	addi	r2,r2,1
8110b974:	100b883a 	mov	r5,r2
8110b978:	00a04534 	movhi	r2,33044
8110b97c:	109a6104 	addi	r2,r2,27012
8110b980:	19000b24 	muli	r4,r3,44
8110b984:	1105883a 	add	r2,r2,r4
8110b988:	10800a04 	addi	r2,r2,40
8110b98c:	11400005 	stb	r5,0(r2)
8110b990:	00a04534 	movhi	r2,33044
8110b994:	109a6104 	addi	r2,r2,27012
8110b998:	18c00b24 	muli	r3,r3,44
8110b99c:	10c5883a 	add	r2,r2,r3
8110b9a0:	10800a04 	addi	r2,r2,40
8110b9a4:	10800003 	ldbu	r2,0(r2)
8110b9a8:	10803fcc 	andi	r2,r2,255
8110b9ac:	e0ffff43 	ldbu	r3,-3(fp)
8110b9b0:	1880162e 	bgeu	r3,r2,8110ba0c <vCheckRetransmission32+0x284>
                    /* Now it is a Free place */
                    xInUseRetrans.b32[ucIL] = FALSE;
8110b9b4:	e0ffff03 	ldbu	r3,-4(fp)
8110b9b8:	00a04574 	movhi	r2,33045
8110b9bc:	10aab904 	addi	r2,r2,-21788
8110b9c0:	18c00384 	addi	r3,r3,14
8110b9c4:	18c7883a 	add	r3,r3,r3
8110b9c8:	18c7883a 	add	r3,r3,r3
8110b9cc:	10c5883a 	add	r2,r2,r3
8110b9d0:	10000015 	stw	zero,0(r2)
                    SemCount32++;
8110b9d4:	d0a05583 	ldbu	r2,-32426(gp)
8110b9d8:	10800044 	addi	r2,r2,1
8110b9dc:	d0a05585 	stb	r2,-32426(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer32);
8110b9e0:	d0a05a17 	ldw	r2,-32408(gp)
8110b9e4:	1009883a 	mov	r4,r2
8110b9e8:	113052c0 	call	8113052c <OSSemPost>
8110b9ec:	e0bfff85 	stb	r2,-2(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110b9f0:	e0bfff83 	ldbu	r2,-2(fp)
8110b9f4:	10803fcc 	andi	r2,r2,255
8110b9f8:	10000426 	beq	r2,zero,8110ba0c <vCheckRetransmission32+0x284>
                        SemCount32--;
8110b9fc:	d0a05583 	ldbu	r2,-32426(gp)
8110ba00:	10bfffc4 	addi	r2,r2,-1
8110ba04:	d0a05585 	stb	r2,-32426(gp)
                        vFailSetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110ba08:	110e9dc0 	call	8110e9dc <vFailSetCountSemaphorexBuffer32>
    

    /* ---> At this point we have access to the xBuffer32*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_32; ucIL++) {
8110ba0c:	e0bfff03 	ldbu	r2,-4(fp)
8110ba10:	10800044 	addi	r2,r2,1
8110ba14:	e0bfff05 	stb	r2,-4(fp)
8110ba18:	e0bfff03 	ldbu	r2,-4(fp)
8110ba1c:	10800230 	cmpltui	r2,r2,8
8110ba20:	103f6c1e 	bne	r2,zero,8110b7d4 <__reset+0xfb0eb7d4>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer32);
8110ba24:	d0a05717 	ldw	r2,-32420(gp)
8110ba28:	1009883a 	mov	r4,r2
8110ba2c:	112e73c0 	call	8112e73c <OSMutexPost>

    return;
8110ba30:	0001883a 	nop
8110ba34:	00000106 	br	8110ba3c <vCheckRetransmission32+0x2b4>
    unsigned char ucMax = 0;

    OSMutexAccept(xMutexBuffer32, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110ba38:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer32);

    return;
}
8110ba3c:	e037883a 	mov	sp,fp
8110ba40:	dfc00117 	ldw	ra,4(sp)
8110ba44:	df000017 	ldw	fp,0(sp)
8110ba48:	dec00204 	addi	sp,sp,8
8110ba4c:	f800283a 	ret

8110ba50 <bResourcesInitRTOS>:
 */
TSimucam_MEB xSimMebStruct;

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
8110ba50:	defff904 	addi	sp,sp,-28
8110ba54:	de00012e 	bgeu	sp,et,8110ba5c <bResourcesInitRTOS+0xc>
8110ba58:	003b68fa 	trap	3
8110ba5c:	dfc00615 	stw	ra,24(sp)
8110ba60:	df000515 	stw	fp,20(sp)
8110ba64:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
8110ba68:	00800044 	movi	r2,1
8110ba6c:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
8110ba70:	0009883a 	mov	r4,zero
8110ba74:	112fe7c0 	call	8112fe7c <OSSemCreate>
8110ba78:	d0a04d15 	stw	r2,-32460(gp)
	if (!xSemCommInit) {
8110ba7c:	d0a04d17 	ldw	r2,-32460(gp)
8110ba80:	1000021e 	bne	r2,zero,8110ba8c <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110ba84:	110e4740 	call	8110e474 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ba88:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110ba8c:	e0bfff04 	addi	r2,fp,-4
8110ba90:	100b883a 	mov	r5,r2
8110ba94:	010000c4 	movi	r4,3
8110ba98:	112dcc40 	call	8112dcc4 <OSMutexCreate>
8110ba9c:	d0a05d15 	stw	r2,-32396(gp)
	if ( err != OS_ERR_NONE ) {
8110baa0:	e0bfff03 	ldbu	r2,-4(fp)
8110baa4:	10803fcc 	andi	r2,r2,255
8110baa8:	10000526 	beq	r2,zero,8110bac0 <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
8110baac:	e0bfff03 	ldbu	r2,-4(fp)
8110bab0:	10803fcc 	andi	r2,r2,255
8110bab4:	1009883a 	mov	r4,r2
8110bab8:	110e4140 	call	8110e414 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110babc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
8110bac0:	e0bfff04 	addi	r2,fp,-4
8110bac4:	100b883a 	mov	r5,r2
8110bac8:	01000184 	movi	r4,6
8110bacc:	112dcc40 	call	8112dcc4 <OSMutexCreate>
8110bad0:	d0a05915 	stw	r2,-32412(gp)
	if ( err != OS_ERR_NONE ) {
8110bad4:	e0bfff03 	ldbu	r2,-4(fp)
8110bad8:	10803fcc 	andi	r2,r2,255
8110badc:	10000526 	beq	r2,zero,8110baf4 <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
8110bae0:	e0bfff03 	ldbu	r2,-4(fp)
8110bae4:	10803fcc 	andi	r2,r2,255
8110bae8:	1009883a 	mov	r4,r2
8110baec:	110e4140 	call	8110e414 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110baf0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110baf4:	e0bfff04 	addi	r2,fp,-4
8110baf8:	100b883a 	mov	r5,r2
8110bafc:	010001c4 	movi	r4,7
8110bb00:	112dcc40 	call	8112dcc4 <OSMutexCreate>
8110bb04:	d0a05b15 	stw	r2,-32404(gp)
	if ( err != OS_ERR_NONE ) {
8110bb08:	e0bfff03 	ldbu	r2,-4(fp)
8110bb0c:	10803fcc 	andi	r2,r2,255
8110bb10:	10000526 	beq	r2,zero,8110bb28 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110bb14:	e0bfff03 	ldbu	r2,-4(fp)
8110bb18:	10803fcc 	andi	r2,r2,255
8110bb1c:	1009883a 	mov	r4,r2
8110bb20:	110e4140 	call	8110e414 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110bb24:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
8110bb28:	e0bfff04 	addi	r2,fp,-4
8110bb2c:	100b883a 	mov	r5,r2
8110bb30:	01000204 	movi	r4,8
8110bb34:	112dcc40 	call	8112dcc4 <OSMutexCreate>
8110bb38:	d0a05715 	stw	r2,-32420(gp)
	if ( err != OS_ERR_NONE ) {
8110bb3c:	e0bfff03 	ldbu	r2,-4(fp)
8110bb40:	10803fcc 	andi	r2,r2,255
8110bb44:	10000526 	beq	r2,zero,8110bb5c <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
8110bb48:	e0bfff03 	ldbu	r2,-4(fp)
8110bb4c:	10803fcc 	andi	r2,r2,255
8110bb50:	1009883a 	mov	r4,r2
8110bb54:	110e4140 	call	8110e414 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110bb58:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	SemCount128 = N_128;
8110bb5c:	00800184 	movi	r2,6
8110bb60:	d0a05e45 	stb	r2,-32391(gp)
	xSemCountBuffer128 = OSSemCreate(N_128);
8110bb64:	01000184 	movi	r4,6
8110bb68:	112fe7c0 	call	8112fe7c <OSSemCreate>
8110bb6c:	d0a05015 	stw	r2,-32448(gp)
	if (!xSemCountBuffer128) {
8110bb70:	d0a05017 	ldw	r2,-32448(gp)
8110bb74:	1000031e 	bne	r2,zero,8110bb84 <bResourcesInitRTOS+0x134>
		SemCount128 = 0;
8110bb78:	d0205e45 	stb	zero,-32391(gp)
		vFailCreateSemaphoreResources();
8110bb7c:	110e4740 	call	8110e474 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bb80:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	SemCount64 = N_64;
8110bb84:	00800204 	movi	r2,8
8110bb88:	d0a05e05 	stb	r2,-32392(gp)
	xSemCountBuffer64 = OSSemCreate(N_64);
8110bb8c:	01000204 	movi	r4,8
8110bb90:	112fe7c0 	call	8112fe7c <OSSemCreate>
8110bb94:	d0a04c15 	stw	r2,-32464(gp)
	if (!xSemCountBuffer64) {
8110bb98:	d0a04c17 	ldw	r2,-32464(gp)
8110bb9c:	1000031e 	bne	r2,zero,8110bbac <bResourcesInitRTOS+0x15c>
		SemCount64 = 0;
8110bba0:	d0205e05 	stb	zero,-32392(gp)
		vFailCreateSemaphoreResources();
8110bba4:	110e4740 	call	8110e474 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bba8:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	SemCount32 = N_32;
8110bbac:	00800204 	movi	r2,8
8110bbb0:	d0a05585 	stb	r2,-32426(gp)
	xSemCountBuffer32 = OSSemCreate(N_32);
8110bbb4:	01000204 	movi	r4,8
8110bbb8:	112fe7c0 	call	8112fe7c <OSSemCreate>
8110bbbc:	d0a05a15 	stw	r2,-32408(gp)
	if (!xSemCountBuffer32) {
8110bbc0:	d0a05a17 	ldw	r2,-32408(gp)
8110bbc4:	1000031e 	bne	r2,zero,8110bbd4 <bResourcesInitRTOS+0x184>
		SemCount32 = 0;
8110bbc8:	d0205585 	stb	zero,-32426(gp)
		vFailCreateSemaphoreResources();
8110bbcc:	110e4740 	call	8110e474 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bbd0:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
8110bbd4:	e0bfff04 	addi	r2,fp,-4
8110bbd8:	100b883a 	mov	r5,r2
8110bbdc:	01000144 	movi	r4,5
8110bbe0:	112dcc40 	call	8112dcc4 <OSMutexCreate>
8110bbe4:	d0a05215 	stw	r2,-32440(gp)
	if ( err != OS_ERR_NONE ) {
8110bbe8:	e0bfff03 	ldbu	r2,-4(fp)
8110bbec:	10803fcc 	andi	r2,r2,255
8110bbf0:	10000526 	beq	r2,zero,8110bc08 <bResourcesInitRTOS+0x1b8>
		vFailCreateMutexSResources(err);
8110bbf4:	e0bfff03 	ldbu	r2,-4(fp)
8110bbf8:	10803fcc 	andi	r2,r2,255
8110bbfc:	1009883a 	mov	r4,r2
8110bc00:	110e4140 	call	8110e414 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110bc04:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110bc08:	e0bfff04 	addi	r2,fp,-4
8110bc0c:	100b883a 	mov	r5,r2
8110bc10:	01000244 	movi	r4,9
8110bc14:	112dcc40 	call	8112dcc4 <OSMutexCreate>
8110bc18:	d0a05615 	stw	r2,-32424(gp)
	if ( err != OS_ERR_NONE ) {
8110bc1c:	e0bfff03 	ldbu	r2,-4(fp)
8110bc20:	10803fcc 	andi	r2,r2,255
8110bc24:	10000526 	beq	r2,zero,8110bc3c <bResourcesInitRTOS+0x1ec>
		vFailCreateMutexSResources(err);
8110bc28:	e0bfff03 	ldbu	r2,-4(fp)
8110bc2c:	10803fcc 	andi	r2,r2,255
8110bc30:	1009883a 	mov	r4,r2
8110bc34:	110e4140 	call	8110e414 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110bc38:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
8110bc3c:	0009883a 	mov	r4,zero
8110bc40:	112fe7c0 	call	8112fe7c <OSSemCreate>
8110bc44:	d0a05315 	stw	r2,-32436(gp)
	if (!xSemCountReceivedACK) {
8110bc48:	d0a05317 	ldw	r2,-32436(gp)
8110bc4c:	1000021e 	bne	r2,zero,8110bc58 <bResourcesInitRTOS+0x208>
		vFailCreateSemaphoreResources();
8110bc50:	110e4740 	call	8110e474 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bc54:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110bc58:	0009883a 	mov	r4,zero
8110bc5c:	112fe7c0 	call	8112fe7c <OSSemCreate>
8110bc60:	d0a05115 	stw	r2,-32444(gp)
	if (!xSemCountPreParsed) {
8110bc64:	d0a05117 	ldw	r2,-32444(gp)
8110bc68:	1000021e 	bne	r2,zero,8110bc74 <bResourcesInitRTOS+0x224>
		vFailCreateSemaphoreResources();
8110bc6c:	110e4740 	call	8110e474 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bc70:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
8110bc74:	0009883a 	mov	r4,zero
8110bc78:	112fe7c0 	call	8112fe7c <OSSemCreate>
8110bc7c:	d0a04e15 	stw	r2,-32456(gp)
	if (!xSemCountSenderACK) {
8110bc80:	d0a04e17 	ldw	r2,-32456(gp)
8110bc84:	1000021e 	bne	r2,zero,8110bc90 <bResourcesInitRTOS+0x240>
		vFailCreateSemaphoreResources();
8110bc88:	110e4740 	call	8110e474 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bc8c:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110bc90:	e0bfff04 	addi	r2,fp,-4
8110bc94:	100b883a 	mov	r5,r2
8110bc98:	01000104 	movi	r4,4
8110bc9c:	112dcc40 	call	8112dcc4 <OSMutexCreate>
8110bca0:	d0a05c15 	stw	r2,-32400(gp)
	if ( err != OS_ERR_NONE ) {
8110bca4:	e0bfff03 	ldbu	r2,-4(fp)
8110bca8:	10803fcc 	andi	r2,r2,255
8110bcac:	10000526 	beq	r2,zero,8110bcc4 <bResourcesInitRTOS+0x274>
		vFailCreateMutexSResources(err);
8110bcb0:	e0bfff03 	ldbu	r2,-4(fp)
8110bcb4:	10803fcc 	andi	r2,r2,255
8110bcb8:	1009883a 	mov	r4,r2
8110bcbc:	110e4140 	call	8110e414 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110bcc0:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
8110bcc4:	0009883a 	mov	r4,zero
8110bcc8:	112fe7c0 	call	8112fe7c <OSSemCreate>
8110bccc:	d0a05415 	stw	r2,-32432(gp)
	if (!xSemTimeoutChecker) {
8110bcd0:	d0a05417 	ldw	r2,-32432(gp)
8110bcd4:	1000021e 	bne	r2,zero,8110bce0 <bResourcesInitRTOS+0x290>
		vFailCreateSemaphoreResources();
8110bcd8:	110e4740 	call	8110e474 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bcdc:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
8110bce0:	e0bfff04 	addi	r2,fp,-4
8110bce4:	d8800215 	stw	r2,8(sp)
8110bce8:	00a04534 	movhi	r2,33044
8110bcec:	10b9e404 	addi	r2,r2,-6256
8110bcf0:	d8800115 	stw	r2,4(sp)
8110bcf4:	d8000015 	stw	zero,0(sp)
8110bcf8:	01e04474 	movhi	r7,33041
8110bcfc:	39f47004 	addi	r7,r7,-11840
8110bd00:	01800084 	movi	r6,2
8110bd04:	01400104 	movi	r5,4
8110bd08:	01000284 	movi	r4,10
8110bd0c:	11325480 	call	81132548 <OSTmrCreate>
8110bd10:	d0a05815 	stw	r2,-32416(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
8110bd14:	e0bfff03 	ldbu	r2,-4(fp)
8110bd18:	10803fcc 	andi	r2,r2,255
8110bd1c:	10000226 	beq	r2,zero,8110bd28 <bResourcesInitRTOS+0x2d8>
		vFailCreateTimerRetransmisison();
8110bd20:	110f0d80 	call	8110f0d8 <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
8110bd24:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110bd28:	e0bffe17 	ldw	r2,-8(fp)
}
8110bd2c:	e037883a 	mov	sp,fp
8110bd30:	dfc00117 	ldw	ra,4(sp)
8110bd34:	df000017 	ldw	fp,0(sp)
8110bd38:	dec00204 	addi	sp,sp,8
8110bd3c:	f800283a 	ret

8110bd40 <vVariablesInitialization>:

/* Global variables already initialized with zero. But better safe than I'm sorry. */
void vVariablesInitialization ( void ) {
8110bd40:	defffd04 	addi	sp,sp,-12
8110bd44:	de00012e 	bgeu	sp,et,8110bd4c <vVariablesInitialization+0xc>
8110bd48:	003b68fa 	trap	3
8110bd4c:	dfc00215 	stw	ra,8(sp)
8110bd50:	df000115 	stw	fp,4(sp)
8110bd54:	df000104 	addi	fp,sp,4
	unsigned char ucIL = 0;
8110bd58:	e03fff05 	stb	zero,-4(fp)

	usiIdCMD = 2;
8110bd5c:	00800084 	movi	r2,2
8110bd60:	d0a0550d 	sth	r2,-32428(gp)

	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128));
8110bd64:	01800604 	movi	r6,24
8110bd68:	000b883a 	mov	r5,zero
8110bd6c:	01204574 	movhi	r4,33045
8110bd70:	212ab904 	addi	r4,r4,-21788
8110bd74:	11132040 	call	81113204 <memset>
	memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64));
8110bd78:	01800804 	movi	r6,32
8110bd7c:	000b883a 	mov	r5,zero
8110bd80:	01204574 	movhi	r4,33045
8110bd84:	212abf04 	addi	r4,r4,-21764
8110bd88:	11132040 	call	81113204 <memset>
	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32));
8110bd8c:	01800804 	movi	r6,32
8110bd90:	000b883a 	mov	r5,zero
8110bd94:	01204574 	movhi	r4,33045
8110bd98:	212ac704 	addi	r4,r4,-21732
8110bd9c:	11132040 	call	81113204 <memset>
	
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110bda0:	e03fff05 	stb	zero,-4(fp)
8110bda4:	00002806 	br	8110be48 <vVariablesInitialization+0x108>
	{
		memset( xBuffer128[ucIL].buffer, 0, 128);
8110bda8:	e0bfff03 	ldbu	r2,-4(fp)
8110bdac:	10c02324 	muli	r3,r2,140
8110bdb0:	00a04574 	movhi	r2,33045
8110bdb4:	10aacf04 	addi	r2,r2,-21700
8110bdb8:	1885883a 	add	r2,r3,r2
8110bdbc:	01802004 	movi	r6,128
8110bdc0:	000b883a 	mov	r5,zero
8110bdc4:	1009883a 	mov	r4,r2
8110bdc8:	11132040 	call	81113204 <memset>
		xBuffer128[ucIL].bSent = FALSE;
8110bdcc:	e0ffff03 	ldbu	r3,-4(fp)
8110bdd0:	00a04574 	movhi	r2,33045
8110bdd4:	10aacf04 	addi	r2,r2,-21700
8110bdd8:	18c02324 	muli	r3,r3,140
8110bddc:	10c5883a 	add	r2,r2,r3
8110bde0:	10802004 	addi	r2,r2,128
8110bde4:	10000015 	stw	zero,0(r2)
		xBuffer128[ucIL].usiId = 0;
8110bde8:	e0ffff03 	ldbu	r3,-4(fp)
8110bdec:	00a04574 	movhi	r2,33045
8110bdf0:	10aacf04 	addi	r2,r2,-21700
8110bdf4:	18c02324 	muli	r3,r3,140
8110bdf8:	10c5883a 	add	r2,r2,r3
8110bdfc:	10802104 	addi	r2,r2,132
8110be00:	1000000d 	sth	zero,0(r2)
		xBuffer128[ucIL].usiTimeOut = 0;
8110be04:	e0ffff03 	ldbu	r3,-4(fp)
8110be08:	00a04574 	movhi	r2,33045
8110be0c:	10aacf04 	addi	r2,r2,-21700
8110be10:	18c02324 	muli	r3,r3,140
8110be14:	10c5883a 	add	r2,r2,r3
8110be18:	10802184 	addi	r2,r2,134
8110be1c:	1000000d 	sth	zero,0(r2)
		xBuffer128[ucIL].ucNofRetries = 0;
8110be20:	e0ffff03 	ldbu	r3,-4(fp)
8110be24:	00a04574 	movhi	r2,33045
8110be28:	10aacf04 	addi	r2,r2,-21700
8110be2c:	18c02324 	muli	r3,r3,140
8110be30:	10c5883a 	add	r2,r2,r3
8110be34:	10802204 	addi	r2,r2,136
8110be38:	10000005 	stb	zero,0(r2)

	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128));
	memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64));
	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32));
	
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110be3c:	e0bfff03 	ldbu	r2,-4(fp)
8110be40:	10800044 	addi	r2,r2,1
8110be44:	e0bfff05 	stb	r2,-4(fp)
8110be48:	e0bfff03 	ldbu	r2,-4(fp)
8110be4c:	108001b0 	cmpltui	r2,r2,6
8110be50:	103fd51e 	bne	r2,zero,8110bda8 <__reset+0xfb0ebda8>
		xBuffer128[ucIL].usiId = 0;
		xBuffer128[ucIL].usiTimeOut = 0;
		xBuffer128[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_64; ucIL++)
8110be54:	e03fff05 	stb	zero,-4(fp)
8110be58:	00002806 	br	8110befc <vVariablesInitialization+0x1bc>
	{
		memset( xBuffer64[ucIL].buffer, 0, 64);
8110be5c:	e0bfff03 	ldbu	r2,-4(fp)
8110be60:	10c01324 	muli	r3,r2,76
8110be64:	00a04534 	movhi	r2,33044
8110be68:	1090b204 	addi	r2,r2,17096
8110be6c:	1885883a 	add	r2,r3,r2
8110be70:	01801004 	movi	r6,64
8110be74:	000b883a 	mov	r5,zero
8110be78:	1009883a 	mov	r4,r2
8110be7c:	11132040 	call	81113204 <memset>
		xBuffer64[ucIL].bSent = FALSE;
8110be80:	e0ffff03 	ldbu	r3,-4(fp)
8110be84:	00a04534 	movhi	r2,33044
8110be88:	1090b204 	addi	r2,r2,17096
8110be8c:	18c01324 	muli	r3,r3,76
8110be90:	10c5883a 	add	r2,r2,r3
8110be94:	10801004 	addi	r2,r2,64
8110be98:	10000015 	stw	zero,0(r2)
		xBuffer64[ucIL].usiId = 0;
8110be9c:	e0ffff03 	ldbu	r3,-4(fp)
8110bea0:	00a04534 	movhi	r2,33044
8110bea4:	1090b204 	addi	r2,r2,17096
8110bea8:	18c01324 	muli	r3,r3,76
8110beac:	10c5883a 	add	r2,r2,r3
8110beb0:	10801104 	addi	r2,r2,68
8110beb4:	1000000d 	sth	zero,0(r2)
		xBuffer64[ucIL].usiTimeOut = 0;
8110beb8:	e0ffff03 	ldbu	r3,-4(fp)
8110bebc:	00a04534 	movhi	r2,33044
8110bec0:	1090b204 	addi	r2,r2,17096
8110bec4:	18c01324 	muli	r3,r3,76
8110bec8:	10c5883a 	add	r2,r2,r3
8110becc:	10801184 	addi	r2,r2,70
8110bed0:	1000000d 	sth	zero,0(r2)
		xBuffer64[ucIL].ucNofRetries = 0;
8110bed4:	e0ffff03 	ldbu	r3,-4(fp)
8110bed8:	00a04534 	movhi	r2,33044
8110bedc:	1090b204 	addi	r2,r2,17096
8110bee0:	18c01324 	muli	r3,r3,76
8110bee4:	10c5883a 	add	r2,r2,r3
8110bee8:	10801204 	addi	r2,r2,72
8110beec:	10000005 	stb	zero,0(r2)
		xBuffer128[ucIL].usiId = 0;
		xBuffer128[ucIL].usiTimeOut = 0;
		xBuffer128[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_64; ucIL++)
8110bef0:	e0bfff03 	ldbu	r2,-4(fp)
8110bef4:	10800044 	addi	r2,r2,1
8110bef8:	e0bfff05 	stb	r2,-4(fp)
8110befc:	e0bfff03 	ldbu	r2,-4(fp)
8110bf00:	10800230 	cmpltui	r2,r2,8
8110bf04:	103fd51e 	bne	r2,zero,8110be5c <__reset+0xfb0ebe5c>
		xBuffer64[ucIL].usiId = 0;
		xBuffer64[ucIL].usiTimeOut = 0;
		xBuffer64[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_32; ucIL++)
8110bf08:	e03fff05 	stb	zero,-4(fp)
8110bf0c:	00002806 	br	8110bfb0 <vVariablesInitialization+0x270>
	{
		memset( xBuffer32[ucIL].buffer, 0, 32);
8110bf10:	e0bfff03 	ldbu	r2,-4(fp)
8110bf14:	10c00b24 	muli	r3,r2,44
8110bf18:	00a04534 	movhi	r2,33044
8110bf1c:	109a6104 	addi	r2,r2,27012
8110bf20:	1885883a 	add	r2,r3,r2
8110bf24:	01800804 	movi	r6,32
8110bf28:	000b883a 	mov	r5,zero
8110bf2c:	1009883a 	mov	r4,r2
8110bf30:	11132040 	call	81113204 <memset>
		xBuffer32[ucIL].bSent = FALSE;
8110bf34:	e0ffff03 	ldbu	r3,-4(fp)
8110bf38:	00a04534 	movhi	r2,33044
8110bf3c:	109a6104 	addi	r2,r2,27012
8110bf40:	18c00b24 	muli	r3,r3,44
8110bf44:	10c5883a 	add	r2,r2,r3
8110bf48:	10800804 	addi	r2,r2,32
8110bf4c:	10000015 	stw	zero,0(r2)
		xBuffer32[ucIL].usiId = 0;
8110bf50:	e0ffff03 	ldbu	r3,-4(fp)
8110bf54:	00a04534 	movhi	r2,33044
8110bf58:	109a6104 	addi	r2,r2,27012
8110bf5c:	18c00b24 	muli	r3,r3,44
8110bf60:	10c5883a 	add	r2,r2,r3
8110bf64:	10800904 	addi	r2,r2,36
8110bf68:	1000000d 	sth	zero,0(r2)
		xBuffer32[ucIL].usiTimeOut = 0;
8110bf6c:	e0ffff03 	ldbu	r3,-4(fp)
8110bf70:	00a04534 	movhi	r2,33044
8110bf74:	109a6104 	addi	r2,r2,27012
8110bf78:	18c00b24 	muli	r3,r3,44
8110bf7c:	10c5883a 	add	r2,r2,r3
8110bf80:	10800984 	addi	r2,r2,38
8110bf84:	1000000d 	sth	zero,0(r2)
		xBuffer32[ucIL].ucNofRetries = 0;
8110bf88:	e0ffff03 	ldbu	r3,-4(fp)
8110bf8c:	00a04534 	movhi	r2,33044
8110bf90:	109a6104 	addi	r2,r2,27012
8110bf94:	18c00b24 	muli	r3,r3,44
8110bf98:	10c5883a 	add	r2,r2,r3
8110bf9c:	10800a04 	addi	r2,r2,40
8110bfa0:	10000005 	stb	zero,0(r2)
		xBuffer64[ucIL].usiId = 0;
		xBuffer64[ucIL].usiTimeOut = 0;
		xBuffer64[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_32; ucIL++)
8110bfa4:	e0bfff03 	ldbu	r2,-4(fp)
8110bfa8:	10800044 	addi	r2,r2,1
8110bfac:	e0bfff05 	stb	r2,-4(fp)
8110bfb0:	e0bfff03 	ldbu	r2,-4(fp)
8110bfb4:	10800230 	cmpltui	r2,r2,8
8110bfb8:	103fd51e 	bne	r2,zero,8110bf10 <__reset+0xfb0ebf10>
*/




}
8110bfbc:	0001883a 	nop
8110bfc0:	e037883a 	mov	sp,fp
8110bfc4:	dfc00117 	ldw	ra,4(sp)
8110bfc8:	df000017 	ldw	fp,0(sp)
8110bfcc:	dec00204 	addi	sp,sp,8
8110bfd0:	f800283a 	ret

8110bfd4 <main>:



/* Entry point */
int main(void)
{
8110bfd4:	defff704 	addi	sp,sp,-36
8110bfd8:	de00012e 	bgeu	sp,et,8110bfe0 <main+0xc>
8110bfdc:	003b68fa 	trap	3
8110bfe0:	dfc00815 	stw	ra,32(sp)
8110bfe4:	df000715 	stw	fp,28(sp)
8110bfe8:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110bfec:	e03ffe15 	stw	zero,-8(fp)
	
	OSInit();
8110bff0:	112a1600 	call	8112a160 <OSInit>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
8110bff4:	01604534 	movhi	r5,33044
8110bff8:	2979e804 	addi	r5,r5,-6240
8110bffc:	01204534 	movhi	r4,33044
8110c000:	2139e904 	addi	r4,r4,-6236
8110c004:	1111fbc0 	call	81111fbc <fopen>
8110c008:	d0a04f15 	stw	r2,-32452(gp)
	#endif	

	#ifdef DEBUG_ON
		debug(fp, "Main entry point.\n");
8110c00c:	d0a04f17 	ldw	r2,-32452(gp)
8110c010:	100f883a 	mov	r7,r2
8110c014:	01800484 	movi	r6,18
8110c018:	01400044 	movi	r5,1
8110c01c:	01204534 	movhi	r4,33044
8110c020:	2139ee04 	addi	r4,r4,-6216
8110c024:	11126a00 	call	811126a0 <fwrite>
	#endif


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110c028:	110fca40 	call	8110fca4 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
8110c02c:	11105700 	call	81110570 <bTestSimucamCriticalHW>
8110c030:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110c034:	e0bffe17 	ldw	r2,-8(fp)
8110c038:	1000031e 	bne	r2,zero,8110c048 <main+0x74>
		vFailTestCriticasParts();
8110c03c:	110e4c00 	call	8110e4c0 <vFailTestCriticasParts>
		return -1;
8110c040:	00bfffc4 	movi	r2,-1
8110c044:	00003d06 	br	8110c13c <main+0x168>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110c048:	11103bc0 	call	811103bc <bInitializeSDCard>
8110c04c:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110c050:	e0bffe17 	ldw	r2,-8(fp)
8110c054:	1000031e 	bne	r2,zero,8110c064 <main+0x90>
		vFailTestCriticasParts();
8110c058:	110e4c00 	call	8110e4c0 <vFailTestCriticasParts>
		return -1;
8110c05c:	00bfffc4 	movi	r2,-1
8110c060:	00003606 	br	8110c13c <main+0x168>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
8110c064:	110d5e80 	call	8110d5e8 <vLoadDefaultETHConf>
8110c068:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110c06c:	e0bffe17 	ldw	r2,-8(fp)
8110c070:	1000091e 	bne	r2,zero,8110c098 <main+0xc4>
		/* Default configuration for eth connection loaded */
		#ifdef DEBUG_ON
			debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110c074:	d0a04f17 	ldw	r2,-32452(gp)
8110c078:	100f883a 	mov	r7,r2
8110c07c:	01801644 	movi	r6,89
8110c080:	01400044 	movi	r5,1
8110c084:	01204534 	movhi	r4,33044
8110c088:	2139f304 	addi	r4,r4,-6196
8110c08c:	11126a00 	call	811126a0 <fwrite>
		#endif
		return -1;
8110c090:	00bfffc4 	movi	r2,-1
8110c094:	00002906 	br	8110c13c <main+0x168>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110c098:	110df740 	call	8110df74 <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
8110c09c:	110ba500 	call	8110ba50 <bResourcesInitRTOS>
8110c0a0:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110c0a4:	e0bffe17 	ldw	r2,-8(fp)
8110c0a8:	1000091e 	bne	r2,zero,8110c0d0 <main+0xfc>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
8110c0ac:	d0a04f17 	ldw	r2,-32452(gp)
8110c0b0:	100f883a 	mov	r7,r2
8110c0b4:	01800ac4 	movi	r6,43
8110c0b8:	01400044 	movi	r5,1
8110c0bc:	01204534 	movhi	r4,33044
8110c0c0:	213a0a04 	addi	r4,r4,-6104
8110c0c4:	11126a00 	call	811126a0 <fwrite>
		return -1;
8110c0c8:	00bfffc4 	movi	r2,-1
8110c0cc:	00001b06 	br	8110c13c <main+0x168>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMebStruct );
8110c0d0:	01204534 	movhi	r4,33044
8110c0d4:	21154a04 	addi	r4,r4,21800
8110c0d8:	110fdd40 	call	8110fdd4 <vSimucamStructureInit>

	vVariablesInitialization();
8110c0dc:	110bd400 	call	8110bd40 <vVariablesInitialization>
									vInitialTask_stk,
									INITIALIZATION_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vInitialTask,
8110c0e0:	d8000415 	stw	zero,16(sp)
8110c0e4:	d8000315 	stw	zero,12(sp)
8110c0e8:	00810004 	movi	r2,1024
8110c0ec:	d8800215 	stw	r2,8(sp)
8110c0f0:	00a04574 	movhi	r2,33045
8110c0f4:	10a2b904 	addi	r2,r2,-29980
8110c0f8:	d8800115 	stw	r2,4(sp)
8110c0fc:	00800044 	movi	r2,1
8110c100:	d8800015 	stw	r2,0(sp)
8110c104:	01c00044 	movi	r7,1
8110c108:	01a04574 	movhi	r6,33045
8110c10c:	31a6b804 	addi	r6,r6,-25888
8110c110:	000b883a 	mov	r5,zero
8110c114:	01204474 	movhi	r4,33041
8110c118:	2123ac04 	addi	r4,r4,-29008
8110c11c:	1130f100 	call	81130f10 <OSTaskCreateExt>
8110c120:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
8110c124:	e0bfff03 	ldbu	r2,-4(fp)
8110c128:	1000021e 	bne	r2,zero,8110c134 <main+0x160>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
8110c12c:	112a4900 	call	8112a490 <OSStart>
8110c130:	00000106 	br	8110c138 <main+0x164>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
8110c134:	110e8ac0 	call	8110e8ac <vFailInitialization>
	}
  
	return 0;
8110c138:	0005883a 	mov	r2,zero
}
8110c13c:	e037883a 	mov	sp,fp
8110c140:	dfc00117 	ldw	ra,4(sp)
8110c144:	df000017 	ldw	fp,0(sp)
8110c148:	dec00204 	addi	sp,sp,8
8110c14c:	f800283a 	ret

8110c150 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
8110c150:	defffe04 	addi	sp,sp,-8
8110c154:	de00012e 	bgeu	sp,et,8110c15c <vCCDLoadDefaultValues+0xc>
8110c158:	003b68fa 	trap	3
8110c15c:	df000115 	stw	fp,4(sp)
8110c160:	df000104 	addi	fp,sp,4
8110c164:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110c168:	e0bfff17 	ldw	r2,-4(fp)
8110c16c:	00c46784 	movi	r3,4510
8110c170:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
8110c174:	e0bfff17 	ldw	r2,-4(fp)
8110c178:	00c00784 	movi	r3,30
8110c17c:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
8110c180:	e0bfff17 	ldw	r2,-4(fp)
8110c184:	00c233c4 	movi	r3,2255
8110c188:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
8110c18c:	e0bfff17 	ldw	r2,-4(fp)
8110c190:	00c003c4 	movi	r3,15
8110c194:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110c198:	e0bfff17 	ldw	r2,-4(fp)
8110c19c:	00c00644 	movi	r3,25
8110c1a0:	10c0000d 	sth	r3,0(r2)
}
8110c1a4:	0001883a 	nop
8110c1a8:	e037883a 	mov	sp,fp
8110c1ac:	df000017 	ldw	fp,0(sp)
8110c1b0:	dec00104 	addi	sp,sp,4
8110c1b4:	f800283a 	ret

8110c1b8 <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
8110c1b8:	defff904 	addi	sp,sp,-28
8110c1bc:	de00012e 	bgeu	sp,et,8110c1c4 <vCCDChangeValues+0xc>
8110c1c0:	003b68fa 	trap	3
8110c1c4:	df000615 	stw	fp,24(sp)
8110c1c8:	df000604 	addi	fp,sp,24
8110c1cc:	e13ffa15 	stw	r4,-24(fp)
8110c1d0:	2811883a 	mov	r8,r5
8110c1d4:	300b883a 	mov	r5,r6
8110c1d8:	3809883a 	mov	r4,r7
8110c1dc:	e0c00117 	ldw	r3,4(fp)
8110c1e0:	e0800217 	ldw	r2,8(fp)
8110c1e4:	e23ffb0d 	sth	r8,-20(fp)
8110c1e8:	e17ffc0d 	sth	r5,-16(fp)
8110c1ec:	e13ffd0d 	sth	r4,-12(fp)
8110c1f0:	e0fffe0d 	sth	r3,-8(fp)
8110c1f4:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
8110c1f8:	e0bffa17 	ldw	r2,-24(fp)
8110c1fc:	e0fffb0b 	ldhu	r3,-20(fp)
8110c200:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
8110c204:	e0bffa17 	ldw	r2,-24(fp)
8110c208:	e0fffc0b 	ldhu	r3,-16(fp)
8110c20c:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
8110c210:	e0bffa17 	ldw	r2,-24(fp)
8110c214:	e0fffd0b 	ldhu	r3,-12(fp)
8110c218:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
8110c21c:	e0bffa17 	ldw	r2,-24(fp)
8110c220:	e0fffe0b 	ldhu	r3,-8(fp)
8110c224:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110c228:	e0bffa17 	ldw	r2,-24(fp)
8110c22c:	e0ffff0b 	ldhu	r3,-4(fp)
8110c230:	10c0000d 	sth	r3,0(r2)
}
8110c234:	0001883a 	nop
8110c238:	e037883a 	mov	sp,fp
8110c23c:	df000017 	ldw	fp,0(sp)
8110c240:	dec00104 	addi	sp,sp,4
8110c244:	f800283a 	ret

8110c248 <bSendUART128v2>:
#include "communication_utils.h"


/* Make sure that there is only 127 characters to send */
/* Always, ALWAYS send only an char[128] that you first did a memset(cBuffer,0,128), before put some string on it. */
bool bSendUART128v2 ( char *cBuffer, short int siIdMessage ) {
8110c248:	defff904 	addi	sp,sp,-28
8110c24c:	de00012e 	bgeu	sp,et,8110c254 <bSendUART128v2+0xc>
8110c250:	003b68fa 	trap	3
8110c254:	dfc00615 	stw	ra,24(sp)
8110c258:	df000515 	stw	fp,20(sp)
8110c25c:	df000504 	addi	fp,sp,20
8110c260:	e13ffe15 	stw	r4,-8(fp)
8110c264:	2805883a 	mov	r2,r5
8110c268:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;;
8110c26c:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110c270:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110c274:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110c278:	e03ffc15 	stw	zero,-16(fp)

	OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110c27c:	d0a05017 	ldw	r2,-32448(gp)
8110c280:	e0fffd04 	addi	r3,fp,-12
8110c284:	180d883a 	mov	r6,r3
8110c288:	01400504 	movi	r5,20
8110c28c:	1009883a 	mov	r4,r2
8110c290:	11301a40 	call	811301a4 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110c294:	e0bffd03 	ldbu	r2,-12(fp)
8110c298:	10803fcc 	andi	r2,r2,255
8110c29c:	10000326 	beq	r2,zero,8110c2ac <bSendUART128v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110c2a0:	110eb140 	call	8110eb14 <vFailGetCountSemaphorexBuffer128>
		return bSuccessL;
8110c2a4:	e0bffc17 	ldw	r2,-16(fp)
8110c2a8:	0000ba06 	br	8110c594 <bSendUART128v2+0x34c>

	/* ---> At this point we know that there is some space in the buffer */


	/* Need to get the Mutex that protects xBuffer128 */
	OSMutexPend(xMutexBuffer128, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110c2ac:	d0a05917 	ldw	r2,-32412(gp)
8110c2b0:	e0fffd04 	addi	r3,fp,-12
8110c2b4:	180d883a 	mov	r6,r3
8110c2b8:	01400104 	movi	r5,4
8110c2bc:	1009883a 	mov	r4,r2
8110c2c0:	112e1980 	call	8112e198 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c2c4:	e0bffd03 	ldbu	r2,-12(fp)
8110c2c8:	10803fcc 	andi	r2,r2,255
8110c2cc:	10001126 	beq	r2,zero,8110c314 <bSendUART128v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer128 that protect xBuffer128. (bSendUART128v2)\n");
8110c2d0:	d0a04f17 	ldw	r2,-32452(gp)
8110c2d4:	100f883a 	mov	r7,r2
8110c2d8:	01801484 	movi	r6,82
8110c2dc:	01400044 	movi	r5,1
8110c2e0:	01204534 	movhi	r4,33044
8110c2e4:	213a1504 	addi	r4,r4,-6060
8110c2e8:	11126a00 	call	811126a0 <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer128);
8110c2ec:	d0a05017 	ldw	r2,-32448(gp)
8110c2f0:	1009883a 	mov	r4,r2
8110c2f4:	113052c0 	call	8113052c <OSSemPost>
8110c2f8:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110c2fc:	e0bffd03 	ldbu	r2,-12(fp)
8110c300:	10803fcc 	andi	r2,r2,255
8110c304:	10000126 	beq	r2,zero,8110c30c <bSendUART128v2+0xc4>
			vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110c308:	110eaac0 	call	8110eaac <vFailSetCountSemaphorexBuffer128>
		}

		return bSuccessL;
8110c30c:	e0bffc17 	ldw	r2,-16(fp)
8110c310:	0000a006 	br	8110c594 <bSendUART128v2+0x34c>
	/* ---> At this point we Have the mutex of the xBuffer128, and we can use it freely */


	
	/* Search for space */
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110c314:	e03ffb05 	stb	zero,-20(fp)
8110c318:	00004306 	br	8110c428 <bSendUART128v2+0x1e0>
	{
		if ( xInUseRetrans.b128[ucIL] == FALSE ) {
8110c31c:	e0fffb03 	ldbu	r3,-20(fp)
8110c320:	00a04574 	movhi	r2,33045
8110c324:	10aab904 	addi	r2,r2,-21788
8110c328:	18c7883a 	add	r3,r3,r3
8110c32c:	18c7883a 	add	r3,r3,r3
8110c330:	10c5883a 	add	r2,r2,r3
8110c334:	10800017 	ldw	r2,0(r2)
8110c338:	1000381e 	bne	r2,zero,8110c41c <bSendUART128v2+0x1d4>
			/* Clear the buffer */
			memset(xBuffer128[ucIL].buffer, 0, 128);
8110c33c:	e0bffb03 	ldbu	r2,-20(fp)
8110c340:	10c02324 	muli	r3,r2,140
8110c344:	00a04574 	movhi	r2,33045
8110c348:	10aacf04 	addi	r2,r2,-21700
8110c34c:	1885883a 	add	r2,r3,r2
8110c350:	01802004 	movi	r6,128
8110c354:	000b883a 	mov	r5,zero
8110c358:	1009883a 	mov	r4,r2
8110c35c:	11132040 	call	81113204 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer128[ucIL].buffer, cBuffer, 127);
8110c360:	e0bffb03 	ldbu	r2,-20(fp)
8110c364:	10c02324 	muli	r3,r2,140
8110c368:	00a04574 	movhi	r2,33045
8110c36c:	10aacf04 	addi	r2,r2,-21700
8110c370:	1885883a 	add	r2,r3,r2
8110c374:	01801fc4 	movi	r6,127
8110c378:	e17ffe17 	ldw	r5,-8(fp)
8110c37c:	1009883a 	mov	r4,r2
8110c380:	11130b40 	call	811130b4 <memcpy>
			xBuffer128[ucIL].usiId = siIdMessage;
8110c384:	e13ffb03 	ldbu	r4,-20(fp)
8110c388:	e0ffff0b 	ldhu	r3,-4(fp)
8110c38c:	00a04574 	movhi	r2,33045
8110c390:	10aacf04 	addi	r2,r2,-21700
8110c394:	21002324 	muli	r4,r4,140
8110c398:	1105883a 	add	r2,r2,r4
8110c39c:	10802104 	addi	r2,r2,132
8110c3a0:	10c0000d 	sth	r3,0(r2)
			xBuffer128[ucIL].ucNofRetries = 0;
8110c3a4:	e0fffb03 	ldbu	r3,-20(fp)
8110c3a8:	00a04574 	movhi	r2,33045
8110c3ac:	10aacf04 	addi	r2,r2,-21700
8110c3b0:	18c02324 	muli	r3,r3,140
8110c3b4:	10c5883a 	add	r2,r2,r3
8110c3b8:	10802204 	addi	r2,r2,136
8110c3bc:	10000005 	stb	zero,0(r2)
			xBuffer128[ucIL].usiTimeOut = 0;
8110c3c0:	e0fffb03 	ldbu	r3,-20(fp)
8110c3c4:	00a04574 	movhi	r2,33045
8110c3c8:	10aacf04 	addi	r2,r2,-21700
8110c3cc:	18c02324 	muli	r3,r3,140
8110c3d0:	10c5883a 	add	r2,r2,r3
8110c3d4:	10802184 	addi	r2,r2,134
8110c3d8:	1000000d 	sth	zero,0(r2)
			xBuffer128[ucIL].bSent = FALSE;
8110c3dc:	e0fffb03 	ldbu	r3,-20(fp)
8110c3e0:	00a04574 	movhi	r2,33045
8110c3e4:	10aacf04 	addi	r2,r2,-21700
8110c3e8:	18c02324 	muli	r3,r3,140
8110c3ec:	10c5883a 	add	r2,r2,r3
8110c3f0:	10802004 	addi	r2,r2,128
8110c3f4:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b128[ucIL] = TRUE;
8110c3f8:	e0fffb03 	ldbu	r3,-20(fp)
8110c3fc:	00a04574 	movhi	r2,33045
8110c400:	10aab904 	addi	r2,r2,-21788
8110c404:	18c7883a 	add	r3,r3,r3
8110c408:	18c7883a 	add	r3,r3,r3
8110c40c:	10c5883a 	add	r2,r2,r3
8110c410:	00c00044 	movi	r3,1
8110c414:	10c00015 	stw	r3,0(r2)
			break;
8110c418:	00000606 	br	8110c434 <bSendUART128v2+0x1ec>
	/* ---> At this point we Have the mutex of the xBuffer128, and we can use it freely */


	
	/* Search for space */
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110c41c:	e0bffb03 	ldbu	r2,-20(fp)
8110c420:	10800044 	addi	r2,r2,1
8110c424:	e0bffb05 	stb	r2,-20(fp)
8110c428:	e0bffb03 	ldbu	r2,-20(fp)
8110c42c:	108001b0 	cmpltui	r2,r2,6
8110c430:	103fba1e 	bne	r2,zero,8110c31c <__reset+0xfb0ec31c>
			xInUseRetrans.b128[ucIL] = TRUE;
			break;
		}
	}

	if ( ucIL >= N_128 ) {
8110c434:	e0bffb03 	ldbu	r2,-20(fp)
8110c438:	108001b0 	cmpltui	r2,r2,6
8110c43c:	1000091e 	bne	r2,zero,8110c464 <bSendUART128v2+0x21c>
		ucErrorCode = OSSemPost(xSemCountBuffer128);
8110c440:	d0a05017 	ldw	r2,-32448(gp)
8110c444:	1009883a 	mov	r4,r2
8110c448:	113052c0 	call	8113052c <OSSemPost>
8110c44c:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer128);
8110c450:	d0a05917 	ldw	r2,-32412(gp)
8110c454:	1009883a 	mov	r4,r2
8110c458:	112e73c0 	call	8112e73c <OSMutexPost>
		return bSuccessL;
8110c45c:	e0bffc17 	ldw	r2,-16(fp)
8110c460:	00004c06 	br	8110c594 <bSendUART128v2+0x34c>
	}

	bSuccessL = TRUE;
8110c464:	00800044 	movi	r2,1
8110c468:	e0bffc15 	stw	r2,-16(fp)
	SemCount128--; /* Sure that you get the semaphore */
8110c46c:	d0a05e43 	ldbu	r2,-32391(gp)
8110c470:	10bfffc4 	addi	r2,r2,-1
8110c474:	d0a05e45 	stb	r2,-32391(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */

#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART128v2 - Tentando pegar Mutex TX \n");
8110c478:	d0a04f17 	ldw	r2,-32452(gp)
8110c47c:	100f883a 	mov	r7,r2
8110c480:	01800a84 	movi	r6,42
8110c484:	01400044 	movi	r5,1
8110c488:	01204534 	movhi	r4,33044
8110c48c:	213a2a04 	addi	r4,r4,-5976
8110c490:	11126a00 	call	811126a0 <fwrite>
#endif
	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110c494:	d0a05d17 	ldw	r2,-32396(gp)
8110c498:	e0fffd04 	addi	r3,fp,-12
8110c49c:	180d883a 	mov	r6,r3
8110c4a0:	01400084 	movi	r5,2
8110c4a4:	1009883a 	mov	r4,r2
8110c4a8:	112e1980 	call	8112e198 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c4ac:	e0bffd03 	ldbu	r2,-12(fp)
8110c4b0:	10803fcc 	andi	r2,r2,255
8110c4b4:	10000c26 	beq	r2,zero,8110c4e8 <bSendUART128v2+0x2a0>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART128v2)\n");
8110c4b8:	d0a04f17 	ldw	r2,-32452(gp)
8110c4bc:	100f883a 	mov	r7,r2
8110c4c0:	01801c04 	movi	r6,112
8110c4c4:	01400044 	movi	r5,1
8110c4c8:	01204534 	movhi	r4,33044
8110c4cc:	213a3504 	addi	r4,r4,-5932
8110c4d0:	11126a00 	call	811126a0 <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer128 */
		OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110c4d4:	d0a05917 	ldw	r2,-32412(gp)
8110c4d8:	1009883a 	mov	r4,r2
8110c4dc:	112e73c0 	call	8112e73c <OSMutexPost>
		return bSuccessL;
8110c4e0:	e0bffc17 	ldw	r2,-16(fp)
8110c4e4:	00002b06 	br	8110c594 <bSendUART128v2+0x34c>
	}

#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART128v2 - Sucesso Mutex TX \n");
8110c4e8:	d0a04f17 	ldw	r2,-32452(gp)
8110c4ec:	100f883a 	mov	r7,r2
8110c4f0:	018008c4 	movi	r6,35
8110c4f4:	01400044 	movi	r5,1
8110c4f8:	01204534 	movhi	r4,33044
8110c4fc:	213a5204 	addi	r4,r4,-5816
8110c500:	11126a00 	call	811126a0 <fwrite>
#endif

	/* ---> At this point we have all resources to send the message */


	puts(xBuffer128[ucIL].buffer);
8110c504:	e0bffb03 	ldbu	r2,-20(fp)
8110c508:	10c02324 	muli	r3,r2,140
8110c50c:	00a04574 	movhi	r2,33045
8110c510:	10aacf04 	addi	r2,r2,-21700
8110c514:	1885883a 	add	r2,r3,r2
8110c518:	1009883a 	mov	r4,r2
8110c51c:	11136500 	call	81113650 <puts>
	xBuffer128[ucIL].bSent = TRUE;
8110c520:	e0fffb03 	ldbu	r3,-20(fp)
8110c524:	00a04574 	movhi	r2,33045
8110c528:	10aacf04 	addi	r2,r2,-21700
8110c52c:	18c02324 	muli	r3,r3,140
8110c530:	10c5883a 	add	r2,r2,r3
8110c534:	10802004 	addi	r2,r2,128
8110c538:	00c00044 	movi	r3,1
8110c53c:	10c00015 	stw	r3,0(r2)


	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */
#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART128v2 - Tentando devolver Mutex TX \n");
8110c540:	d0a04f17 	ldw	r2,-32452(gp)
8110c544:	100f883a 	mov	r7,r2
8110c548:	01800b44 	movi	r6,45
8110c54c:	01400044 	movi	r5,1
8110c550:	01204534 	movhi	r4,33044
8110c554:	213a5b04 	addi	r4,r4,-5780
8110c558:	11126a00 	call	811126a0 <fwrite>
#endif
	OSMutexPost(xTxUARTMutex);
8110c55c:	d0a05d17 	ldw	r2,-32396(gp)
8110c560:	1009883a 	mov	r4,r2
8110c564:	112e73c0 	call	8112e73c <OSMutexPost>
#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART128v2 - Devolveu \n");
8110c568:	d0a04f17 	ldw	r2,-32452(gp)
8110c56c:	100f883a 	mov	r7,r2
8110c570:	018006c4 	movi	r6,27
8110c574:	01400044 	movi	r5,1
8110c578:	01204534 	movhi	r4,33044
8110c57c:	213a6704 	addi	r4,r4,-5732
8110c580:	11126a00 	call	811126a0 <fwrite>
#endif
	OSMutexPost(xMutexBuffer128);
8110c584:	d0a05917 	ldw	r2,-32412(gp)
8110c588:	1009883a 	mov	r4,r2
8110c58c:	112e73c0 	call	8112e73c <OSMutexPost>

	return bSuccessL;
8110c590:	e0bffc17 	ldw	r2,-16(fp)
}
8110c594:	e037883a 	mov	sp,fp
8110c598:	dfc00117 	ldw	ra,4(sp)
8110c59c:	df000017 	ldw	fp,0(sp)
8110c5a0:	dec00204 	addi	sp,sp,8
8110c5a4:	f800283a 	ret

8110c5a8 <bSendUART64v2>:



/* Make sure that there is only 63 characters to send */
/* Always, ALWAYS send only an char[64] that you first did a memset(cBuffer,0,64), before put some string on it. */
bool bSendUART64v2 ( char *cBuffer, short int siIdMessage ) {
8110c5a8:	defff904 	addi	sp,sp,-28
8110c5ac:	de00012e 	bgeu	sp,et,8110c5b4 <bSendUART64v2+0xc>
8110c5b0:	003b68fa 	trap	3
8110c5b4:	dfc00615 	stw	ra,24(sp)
8110c5b8:	df000515 	stw	fp,20(sp)
8110c5bc:	df000504 	addi	fp,sp,20
8110c5c0:	e13ffe15 	stw	r4,-8(fp)
8110c5c4:	2805883a 	mov	r2,r5
8110c5c8:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;
8110c5cc:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110c5d0:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110c5d4:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110c5d8:	e03ffc15 	stw	zero,-16(fp)

	OSSemPend(xSemCountBuffer64, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110c5dc:	d0a04c17 	ldw	r2,-32464(gp)
8110c5e0:	e0fffd04 	addi	r3,fp,-12
8110c5e4:	180d883a 	mov	r6,r3
8110c5e8:	01400504 	movi	r5,20
8110c5ec:	1009883a 	mov	r4,r2
8110c5f0:	11301a40 	call	811301a4 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110c5f4:	e0bffd03 	ldbu	r2,-12(fp)
8110c5f8:	10803fcc 	andi	r2,r2,255
8110c5fc:	10000326 	beq	r2,zero,8110c60c <bSendUART64v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c600:	110eb7c0 	call	8110eb7c <vFailGetCountSemaphorexBuffer64>
		return bSuccessL;
8110c604:	e0bffc17 	ldw	r2,-16(fp)
8110c608:	0000bc06 	br	8110c8fc <bSendUART64v2+0x354>
	/* ---> At this point we know that there is some space in the buffer */

	
	
	/* Need to get the Mutex that protects xBuffer64 */
	OSMutexPend(xMutexBuffer64, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110c60c:	d0a05b17 	ldw	r2,-32404(gp)
8110c610:	e0fffd04 	addi	r3,fp,-12
8110c614:	180d883a 	mov	r6,r3
8110c618:	01400104 	movi	r5,4
8110c61c:	1009883a 	mov	r4,r2
8110c620:	112e1980 	call	8112e198 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c624:	e0bffd03 	ldbu	r2,-12(fp)
8110c628:	10803fcc 	andi	r2,r2,255
8110c62c:	10001126 	beq	r2,zero,8110c674 <bSendUART64v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer64 that protect xBuffer64. (bSendUART64v2)\n");
8110c630:	d0a04f17 	ldw	r2,-32452(gp)
8110c634:	100f883a 	mov	r7,r2
8110c638:	018013c4 	movi	r6,79
8110c63c:	01400044 	movi	r5,1
8110c640:	01204534 	movhi	r4,33044
8110c644:	213a6e04 	addi	r4,r4,-5704
8110c648:	11126a00 	call	811126a0 <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer64);
8110c64c:	d0a04c17 	ldw	r2,-32464(gp)
8110c650:	1009883a 	mov	r4,r2
8110c654:	113052c0 	call	8113052c <OSSemPost>
8110c658:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110c65c:	e0bffd03 	ldbu	r2,-12(fp)
8110c660:	10803fcc 	andi	r2,r2,255
8110c664:	10000126 	beq	r2,zero,8110c66c <bSendUART64v2+0xc4>
			vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c668:	110ea440 	call	8110ea44 <vFailSetCountSemaphorexBuffer64>
		}

		return bSuccessL;
8110c66c:	e0bffc17 	ldw	r2,-16(fp)
8110c670:	0000a206 	br	8110c8fc <bSendUART64v2+0x354>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_64; ucIL++)
8110c674:	e03ffb05 	stb	zero,-20(fp)
8110c678:	00004506 	br	8110c790 <bSendUART64v2+0x1e8>
	{
		if ( xInUseRetrans.b64[ucIL] == FALSE ) {
8110c67c:	e0fffb03 	ldbu	r3,-20(fp)
8110c680:	00a04574 	movhi	r2,33045
8110c684:	10aab904 	addi	r2,r2,-21788
8110c688:	18c00184 	addi	r3,r3,6
8110c68c:	18c7883a 	add	r3,r3,r3
8110c690:	18c7883a 	add	r3,r3,r3
8110c694:	10c5883a 	add	r2,r2,r3
8110c698:	10800017 	ldw	r2,0(r2)
8110c69c:	1000391e 	bne	r2,zero,8110c784 <bSendUART64v2+0x1dc>
			/* Clear the buffer */
			memset(xBuffer64[ucIL].buffer, 0, 64);
8110c6a0:	e0bffb03 	ldbu	r2,-20(fp)
8110c6a4:	10c01324 	muli	r3,r2,76
8110c6a8:	00a04534 	movhi	r2,33044
8110c6ac:	1090b204 	addi	r2,r2,17096
8110c6b0:	1885883a 	add	r2,r3,r2
8110c6b4:	01801004 	movi	r6,64
8110c6b8:	000b883a 	mov	r5,zero
8110c6bc:	1009883a 	mov	r4,r2
8110c6c0:	11132040 	call	81113204 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer64[ucIL].buffer, cBuffer, 63);
8110c6c4:	e0bffb03 	ldbu	r2,-20(fp)
8110c6c8:	10c01324 	muli	r3,r2,76
8110c6cc:	00a04534 	movhi	r2,33044
8110c6d0:	1090b204 	addi	r2,r2,17096
8110c6d4:	1885883a 	add	r2,r3,r2
8110c6d8:	01800fc4 	movi	r6,63
8110c6dc:	e17ffe17 	ldw	r5,-8(fp)
8110c6e0:	1009883a 	mov	r4,r2
8110c6e4:	11130b40 	call	811130b4 <memcpy>
			xBuffer64[ucIL].usiId = siIdMessage;
8110c6e8:	e13ffb03 	ldbu	r4,-20(fp)
8110c6ec:	e0ffff0b 	ldhu	r3,-4(fp)
8110c6f0:	00a04534 	movhi	r2,33044
8110c6f4:	1090b204 	addi	r2,r2,17096
8110c6f8:	21001324 	muli	r4,r4,76
8110c6fc:	1105883a 	add	r2,r2,r4
8110c700:	10801104 	addi	r2,r2,68
8110c704:	10c0000d 	sth	r3,0(r2)
			xBuffer64[ucIL].ucNofRetries = 0;
8110c708:	e0fffb03 	ldbu	r3,-20(fp)
8110c70c:	00a04534 	movhi	r2,33044
8110c710:	1090b204 	addi	r2,r2,17096
8110c714:	18c01324 	muli	r3,r3,76
8110c718:	10c5883a 	add	r2,r2,r3
8110c71c:	10801204 	addi	r2,r2,72
8110c720:	10000005 	stb	zero,0(r2)
			xBuffer64[ucIL].usiTimeOut = 0;
8110c724:	e0fffb03 	ldbu	r3,-20(fp)
8110c728:	00a04534 	movhi	r2,33044
8110c72c:	1090b204 	addi	r2,r2,17096
8110c730:	18c01324 	muli	r3,r3,76
8110c734:	10c5883a 	add	r2,r2,r3
8110c738:	10801184 	addi	r2,r2,70
8110c73c:	1000000d 	sth	zero,0(r2)
			xBuffer64[ucIL].bSent = FALSE;
8110c740:	e0fffb03 	ldbu	r3,-20(fp)
8110c744:	00a04534 	movhi	r2,33044
8110c748:	1090b204 	addi	r2,r2,17096
8110c74c:	18c01324 	muli	r3,r3,76
8110c750:	10c5883a 	add	r2,r2,r3
8110c754:	10801004 	addi	r2,r2,64
8110c758:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b64[ucIL] = TRUE;
8110c75c:	e0fffb03 	ldbu	r3,-20(fp)
8110c760:	00a04574 	movhi	r2,33045
8110c764:	10aab904 	addi	r2,r2,-21788
8110c768:	18c00184 	addi	r3,r3,6
8110c76c:	18c7883a 	add	r3,r3,r3
8110c770:	18c7883a 	add	r3,r3,r3
8110c774:	10c5883a 	add	r2,r2,r3
8110c778:	00c00044 	movi	r3,1
8110c77c:	10c00015 	stw	r3,0(r2)
			break;
8110c780:	00000606 	br	8110c79c <bSendUART64v2+0x1f4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_64; ucIL++)
8110c784:	e0bffb03 	ldbu	r2,-20(fp)
8110c788:	10800044 	addi	r2,r2,1
8110c78c:	e0bffb05 	stb	r2,-20(fp)
8110c790:	e0bffb03 	ldbu	r2,-20(fp)
8110c794:	10800230 	cmpltui	r2,r2,8
8110c798:	103fb81e 	bne	r2,zero,8110c67c <__reset+0xfb0ec67c>
			break;
		}
	}


	if ( ucIL >= N_64 ) {
8110c79c:	e0bffb03 	ldbu	r2,-20(fp)
8110c7a0:	10800230 	cmpltui	r2,r2,8
8110c7a4:	1000091e 	bne	r2,zero,8110c7cc <bSendUART64v2+0x224>
		ucErrorCode = OSSemPost(xSemCountBuffer64);
8110c7a8:	d0a04c17 	ldw	r2,-32464(gp)
8110c7ac:	1009883a 	mov	r4,r2
8110c7b0:	113052c0 	call	8113052c <OSSemPost>
8110c7b4:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer64);
8110c7b8:	d0a05b17 	ldw	r2,-32404(gp)
8110c7bc:	1009883a 	mov	r4,r2
8110c7c0:	112e73c0 	call	8112e73c <OSMutexPost>
		return bSuccessL;
8110c7c4:	e0bffc17 	ldw	r2,-16(fp)
8110c7c8:	00004c06 	br	8110c8fc <bSendUART64v2+0x354>
	}

	bSuccessL = TRUE;
8110c7cc:	00800044 	movi	r2,1
8110c7d0:	e0bffc15 	stw	r2,-16(fp)
	SemCount64--; /* Sure that you get the semaphore */
8110c7d4:	d0a05e03 	ldbu	r2,-32392(gp)
8110c7d8:	10bfffc4 	addi	r2,r2,-1
8110c7dc:	d0a05e05 	stb	r2,-32392(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */

#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART64v2 - Tentando pegar Mutex TX \n");
8110c7e0:	d0a04f17 	ldw	r2,-32452(gp)
8110c7e4:	100f883a 	mov	r7,r2
8110c7e8:	01800a44 	movi	r6,41
8110c7ec:	01400044 	movi	r5,1
8110c7f0:	01204534 	movhi	r4,33044
8110c7f4:	213a8204 	addi	r4,r4,-5624
8110c7f8:	11126a00 	call	811126a0 <fwrite>
#endif
	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110c7fc:	d0a05d17 	ldw	r2,-32396(gp)
8110c800:	e0fffd04 	addi	r3,fp,-12
8110c804:	180d883a 	mov	r6,r3
8110c808:	01400084 	movi	r5,2
8110c80c:	1009883a 	mov	r4,r2
8110c810:	112e1980 	call	8112e198 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c814:	e0bffd03 	ldbu	r2,-12(fp)
8110c818:	10803fcc 	andi	r2,r2,255
8110c81c:	10000c26 	beq	r2,zero,8110c850 <bSendUART64v2+0x2a8>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART64v2)\n");
8110c820:	d0a04f17 	ldw	r2,-32452(gp)
8110c824:	100f883a 	mov	r7,r2
8110c828:	01801bc4 	movi	r6,111
8110c82c:	01400044 	movi	r5,1
8110c830:	01204534 	movhi	r4,33044
8110c834:	213a8d04 	addi	r4,r4,-5580
8110c838:	11126a00 	call	811126a0 <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer64 */
		OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64 */
8110c83c:	d0a05b17 	ldw	r2,-32404(gp)
8110c840:	1009883a 	mov	r4,r2
8110c844:	112e73c0 	call	8112e73c <OSMutexPost>
		return bSuccessL;
8110c848:	e0bffc17 	ldw	r2,-16(fp)
8110c84c:	00002b06 	br	8110c8fc <bSendUART64v2+0x354>
	}

#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART64v2 - Sucesso Mutex TX \n");
8110c850:	d0a04f17 	ldw	r2,-32452(gp)
8110c854:	100f883a 	mov	r7,r2
8110c858:	01800884 	movi	r6,34
8110c85c:	01400044 	movi	r5,1
8110c860:	01204534 	movhi	r4,33044
8110c864:	213aa904 	addi	r4,r4,-5468
8110c868:	11126a00 	call	811126a0 <fwrite>
#endif
	/* ---> At this point we have all resources to send the message */


	puts(xBuffer64[ucIL].buffer);
8110c86c:	e0bffb03 	ldbu	r2,-20(fp)
8110c870:	10c01324 	muli	r3,r2,76
8110c874:	00a04534 	movhi	r2,33044
8110c878:	1090b204 	addi	r2,r2,17096
8110c87c:	1885883a 	add	r2,r3,r2
8110c880:	1009883a 	mov	r4,r2
8110c884:	11136500 	call	81113650 <puts>
	xBuffer64[ucIL].bSent = TRUE;
8110c888:	e0fffb03 	ldbu	r3,-20(fp)
8110c88c:	00a04534 	movhi	r2,33044
8110c890:	1090b204 	addi	r2,r2,17096
8110c894:	18c01324 	muli	r3,r3,76
8110c898:	10c5883a 	add	r2,r2,r3
8110c89c:	10801004 	addi	r2,r2,64
8110c8a0:	00c00044 	movi	r3,1
8110c8a4:	10c00015 	stw	r3,0(r2)


	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */
#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART64v2 - Tentando devolver Mutex TX \n");
8110c8a8:	d0a04f17 	ldw	r2,-32452(gp)
8110c8ac:	100f883a 	mov	r7,r2
8110c8b0:	01800b04 	movi	r6,44
8110c8b4:	01400044 	movi	r5,1
8110c8b8:	01204534 	movhi	r4,33044
8110c8bc:	213ab204 	addi	r4,r4,-5432
8110c8c0:	11126a00 	call	811126a0 <fwrite>
#endif
	OSMutexPost(xTxUARTMutex);
8110c8c4:	d0a05d17 	ldw	r2,-32396(gp)
8110c8c8:	1009883a 	mov	r4,r2
8110c8cc:	112e73c0 	call	8112e73c <OSMutexPost>
#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART64v2 - Devolveu \n");
8110c8d0:	d0a04f17 	ldw	r2,-32452(gp)
8110c8d4:	100f883a 	mov	r7,r2
8110c8d8:	01800684 	movi	r6,26
8110c8dc:	01400044 	movi	r5,1
8110c8e0:	01204534 	movhi	r4,33044
8110c8e4:	213abe04 	addi	r4,r4,-5384
8110c8e8:	11126a00 	call	811126a0 <fwrite>
#endif
	OSMutexPost(xMutexBuffer64);
8110c8ec:	d0a05b17 	ldw	r2,-32404(gp)
8110c8f0:	1009883a 	mov	r4,r2
8110c8f4:	112e73c0 	call	8112e73c <OSMutexPost>

	return bSuccessL;
8110c8f8:	e0bffc17 	ldw	r2,-16(fp)
}
8110c8fc:	e037883a 	mov	sp,fp
8110c900:	dfc00117 	ldw	ra,4(sp)
8110c904:	df000017 	ldw	fp,0(sp)
8110c908:	dec00204 	addi	sp,sp,8
8110c90c:	f800283a 	ret

8110c910 <bSendUART32v2>:



/* Make sure that there is only 31 characters to send */
/* Always, ALWAYS send only an char[32] that you first did a memset(cBuffer,0,32), before put some string on it. */
bool bSendUART32v2 ( char *cBuffer, short int siIdMessage ) {
8110c910:	defff904 	addi	sp,sp,-28
8110c914:	de00012e 	bgeu	sp,et,8110c91c <bSendUART32v2+0xc>
8110c918:	003b68fa 	trap	3
8110c91c:	dfc00615 	stw	ra,24(sp)
8110c920:	df000515 	stw	fp,20(sp)
8110c924:	df000504 	addi	fp,sp,20
8110c928:	e13ffe15 	stw	r4,-8(fp)
8110c92c:	2805883a 	mov	r2,r5
8110c930:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;
8110c934:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110c938:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110c93c:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110c940:	e03ffc15 	stw	zero,-16(fp)
	
	OSSemPend(xSemCountBuffer32, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110c944:	d0a05a17 	ldw	r2,-32408(gp)
8110c948:	e0fffd04 	addi	r3,fp,-12
8110c94c:	180d883a 	mov	r6,r3
8110c950:	01400504 	movi	r5,20
8110c954:	1009883a 	mov	r4,r2
8110c958:	11301a40 	call	811301a4 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110c95c:	e0bffd03 	ldbu	r2,-12(fp)
8110c960:	10803fcc 	andi	r2,r2,255
8110c964:	10000326 	beq	r2,zero,8110c974 <bSendUART32v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110c968:	110ebe40 	call	8110ebe4 <vFailGetCountSemaphorexBuffer32>
		return bSuccessL;
8110c96c:	e0bffc17 	ldw	r2,-16(fp)
8110c970:	0000bc06 	br	8110cc64 <bSendUART32v2+0x354>

	/* ---> At this point we know that there is some space in the buffer */


	/* Need to get the Mutex that protects xBuffer32 */
	OSMutexPend(xMutexBuffer32, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110c974:	d0a05717 	ldw	r2,-32420(gp)
8110c978:	e0fffd04 	addi	r3,fp,-12
8110c97c:	180d883a 	mov	r6,r3
8110c980:	01400104 	movi	r5,4
8110c984:	1009883a 	mov	r4,r2
8110c988:	112e1980 	call	8112e198 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c98c:	e0bffd03 	ldbu	r2,-12(fp)
8110c990:	10803fcc 	andi	r2,r2,255
8110c994:	10001126 	beq	r2,zero,8110c9dc <bSendUART32v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer32 that protect xBuffer32. (bSendUART32v2)\n");
8110c998:	d0a04f17 	ldw	r2,-32452(gp)
8110c99c:	100f883a 	mov	r7,r2
8110c9a0:	018013c4 	movi	r6,79
8110c9a4:	01400044 	movi	r5,1
8110c9a8:	01204534 	movhi	r4,33044
8110c9ac:	213ac504 	addi	r4,r4,-5356
8110c9b0:	11126a00 	call	811126a0 <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer32);
8110c9b4:	d0a05a17 	ldw	r2,-32408(gp)
8110c9b8:	1009883a 	mov	r4,r2
8110c9bc:	113052c0 	call	8113052c <OSSemPost>
8110c9c0:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110c9c4:	e0bffd03 	ldbu	r2,-12(fp)
8110c9c8:	10803fcc 	andi	r2,r2,255
8110c9cc:	10000126 	beq	r2,zero,8110c9d4 <bSendUART32v2+0xc4>
			vFailSetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110c9d0:	110e9dc0 	call	8110e9dc <vFailSetCountSemaphorexBuffer32>
		}

		return bSuccessL;
8110c9d4:	e0bffc17 	ldw	r2,-16(fp)
8110c9d8:	0000a206 	br	8110cc64 <bSendUART32v2+0x354>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_32; ucIL++)
8110c9dc:	e03ffb05 	stb	zero,-20(fp)
8110c9e0:	00004506 	br	8110caf8 <bSendUART32v2+0x1e8>
	{
		if ( xInUseRetrans.b32[ucIL] == FALSE ) {
8110c9e4:	e0fffb03 	ldbu	r3,-20(fp)
8110c9e8:	00a04574 	movhi	r2,33045
8110c9ec:	10aab904 	addi	r2,r2,-21788
8110c9f0:	18c00384 	addi	r3,r3,14
8110c9f4:	18c7883a 	add	r3,r3,r3
8110c9f8:	18c7883a 	add	r3,r3,r3
8110c9fc:	10c5883a 	add	r2,r2,r3
8110ca00:	10800017 	ldw	r2,0(r2)
8110ca04:	1000391e 	bne	r2,zero,8110caec <bSendUART32v2+0x1dc>
			/* Clear the buffer */
			memset(xBuffer32[ucIL].buffer, 0, 32);
8110ca08:	e0bffb03 	ldbu	r2,-20(fp)
8110ca0c:	10c00b24 	muli	r3,r2,44
8110ca10:	00a04534 	movhi	r2,33044
8110ca14:	109a6104 	addi	r2,r2,27012
8110ca18:	1885883a 	add	r2,r3,r2
8110ca1c:	01800804 	movi	r6,32
8110ca20:	000b883a 	mov	r5,zero
8110ca24:	1009883a 	mov	r4,r2
8110ca28:	11132040 	call	81113204 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer32[ucIL].buffer, cBuffer, 31);
8110ca2c:	e0bffb03 	ldbu	r2,-20(fp)
8110ca30:	10c00b24 	muli	r3,r2,44
8110ca34:	00a04534 	movhi	r2,33044
8110ca38:	109a6104 	addi	r2,r2,27012
8110ca3c:	1885883a 	add	r2,r3,r2
8110ca40:	018007c4 	movi	r6,31
8110ca44:	e17ffe17 	ldw	r5,-8(fp)
8110ca48:	1009883a 	mov	r4,r2
8110ca4c:	11130b40 	call	811130b4 <memcpy>
			xBuffer32[ucIL].usiId = siIdMessage;
8110ca50:	e13ffb03 	ldbu	r4,-20(fp)
8110ca54:	e0ffff0b 	ldhu	r3,-4(fp)
8110ca58:	00a04534 	movhi	r2,33044
8110ca5c:	109a6104 	addi	r2,r2,27012
8110ca60:	21000b24 	muli	r4,r4,44
8110ca64:	1105883a 	add	r2,r2,r4
8110ca68:	10800904 	addi	r2,r2,36
8110ca6c:	10c0000d 	sth	r3,0(r2)
			xBuffer32[ucIL].ucNofRetries = 0;
8110ca70:	e0fffb03 	ldbu	r3,-20(fp)
8110ca74:	00a04534 	movhi	r2,33044
8110ca78:	109a6104 	addi	r2,r2,27012
8110ca7c:	18c00b24 	muli	r3,r3,44
8110ca80:	10c5883a 	add	r2,r2,r3
8110ca84:	10800a04 	addi	r2,r2,40
8110ca88:	10000005 	stb	zero,0(r2)
			xBuffer32[ucIL].usiTimeOut = 0;
8110ca8c:	e0fffb03 	ldbu	r3,-20(fp)
8110ca90:	00a04534 	movhi	r2,33044
8110ca94:	109a6104 	addi	r2,r2,27012
8110ca98:	18c00b24 	muli	r3,r3,44
8110ca9c:	10c5883a 	add	r2,r2,r3
8110caa0:	10800984 	addi	r2,r2,38
8110caa4:	1000000d 	sth	zero,0(r2)
			xBuffer32[ucIL].bSent = FALSE;
8110caa8:	e0fffb03 	ldbu	r3,-20(fp)
8110caac:	00a04534 	movhi	r2,33044
8110cab0:	109a6104 	addi	r2,r2,27012
8110cab4:	18c00b24 	muli	r3,r3,44
8110cab8:	10c5883a 	add	r2,r2,r3
8110cabc:	10800804 	addi	r2,r2,32
8110cac0:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b32[ucIL] = TRUE;
8110cac4:	e0fffb03 	ldbu	r3,-20(fp)
8110cac8:	00a04574 	movhi	r2,33045
8110cacc:	10aab904 	addi	r2,r2,-21788
8110cad0:	18c00384 	addi	r3,r3,14
8110cad4:	18c7883a 	add	r3,r3,r3
8110cad8:	18c7883a 	add	r3,r3,r3
8110cadc:	10c5883a 	add	r2,r2,r3
8110cae0:	00c00044 	movi	r3,1
8110cae4:	10c00015 	stw	r3,0(r2)
			break;
8110cae8:	00000606 	br	8110cb04 <bSendUART32v2+0x1f4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_32; ucIL++)
8110caec:	e0bffb03 	ldbu	r2,-20(fp)
8110caf0:	10800044 	addi	r2,r2,1
8110caf4:	e0bffb05 	stb	r2,-20(fp)
8110caf8:	e0bffb03 	ldbu	r2,-20(fp)
8110cafc:	10800230 	cmpltui	r2,r2,8
8110cb00:	103fb81e 	bne	r2,zero,8110c9e4 <__reset+0xfb0ec9e4>
			xInUseRetrans.b32[ucIL] = TRUE;
			break;
		}
	}	

	if ( ucIL >= N_32 ) {
8110cb04:	e0bffb03 	ldbu	r2,-20(fp)
8110cb08:	10800230 	cmpltui	r2,r2,8
8110cb0c:	1000091e 	bne	r2,zero,8110cb34 <bSendUART32v2+0x224>
		ucErrorCode = OSSemPost(xSemCountBuffer32);
8110cb10:	d0a05a17 	ldw	r2,-32408(gp)
8110cb14:	1009883a 	mov	r4,r2
8110cb18:	113052c0 	call	8113052c <OSSemPost>
8110cb1c:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer32);
8110cb20:	d0a05717 	ldw	r2,-32420(gp)
8110cb24:	1009883a 	mov	r4,r2
8110cb28:	112e73c0 	call	8112e73c <OSMutexPost>
		return bSuccessL;
8110cb2c:	e0bffc17 	ldw	r2,-16(fp)
8110cb30:	00004c06 	br	8110cc64 <bSendUART32v2+0x354>
	}
	
	bSuccessL = TRUE;
8110cb34:	00800044 	movi	r2,1
8110cb38:	e0bffc15 	stw	r2,-16(fp)
	SemCount32--; /* Sure that you get the semaphore */
8110cb3c:	d0a05583 	ldbu	r2,-32426(gp)
8110cb40:	10bfffc4 	addi	r2,r2,-1
8110cb44:	d0a05585 	stb	r2,-32426(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */

#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART32v2 - Tentando pegar Mutex TX \n");
8110cb48:	d0a04f17 	ldw	r2,-32452(gp)
8110cb4c:	100f883a 	mov	r7,r2
8110cb50:	01800a44 	movi	r6,41
8110cb54:	01400044 	movi	r5,1
8110cb58:	01204534 	movhi	r4,33044
8110cb5c:	213ad904 	addi	r4,r4,-5276
8110cb60:	11126a00 	call	811126a0 <fwrite>
#endif
	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110cb64:	d0a05d17 	ldw	r2,-32396(gp)
8110cb68:	e0fffd04 	addi	r3,fp,-12
8110cb6c:	180d883a 	mov	r6,r3
8110cb70:	01400084 	movi	r5,2
8110cb74:	1009883a 	mov	r4,r2
8110cb78:	112e1980 	call	8112e198 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110cb7c:	e0bffd03 	ldbu	r2,-12(fp)
8110cb80:	10803fcc 	andi	r2,r2,255
8110cb84:	10000c26 	beq	r2,zero,8110cbb8 <bSendUART32v2+0x2a8>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART32v2)\n");
8110cb88:	d0a04f17 	ldw	r2,-32452(gp)
8110cb8c:	100f883a 	mov	r7,r2
8110cb90:	01801bc4 	movi	r6,111
8110cb94:	01400044 	movi	r5,1
8110cb98:	01204534 	movhi	r4,33044
8110cb9c:	213ae404 	addi	r4,r4,-5232
8110cba0:	11126a00 	call	811126a0 <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer64 */
		OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xMutexBuffer32 */
8110cba4:	d0a05717 	ldw	r2,-32420(gp)
8110cba8:	1009883a 	mov	r4,r2
8110cbac:	112e73c0 	call	8112e73c <OSMutexPost>
		return bSuccessL;
8110cbb0:	e0bffc17 	ldw	r2,-16(fp)
8110cbb4:	00002b06 	br	8110cc64 <bSendUART32v2+0x354>
	}
#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART32v2 - Sucesso Mutex TX \n");
8110cbb8:	d0a04f17 	ldw	r2,-32452(gp)
8110cbbc:	100f883a 	mov	r7,r2
8110cbc0:	01800884 	movi	r6,34
8110cbc4:	01400044 	movi	r5,1
8110cbc8:	01204534 	movhi	r4,33044
8110cbcc:	213b0004 	addi	r4,r4,-5120
8110cbd0:	11126a00 	call	811126a0 <fwrite>
#endif

	/* ---> At this point we have all resources to send the message */

	puts(xBuffer32[ucIL].buffer);
8110cbd4:	e0bffb03 	ldbu	r2,-20(fp)
8110cbd8:	10c00b24 	muli	r3,r2,44
8110cbdc:	00a04534 	movhi	r2,33044
8110cbe0:	109a6104 	addi	r2,r2,27012
8110cbe4:	1885883a 	add	r2,r3,r2
8110cbe8:	1009883a 	mov	r4,r2
8110cbec:	11136500 	call	81113650 <puts>
	xBuffer32[ucIL].bSent = TRUE;
8110cbf0:	e0fffb03 	ldbu	r3,-20(fp)
8110cbf4:	00a04534 	movhi	r2,33044
8110cbf8:	109a6104 	addi	r2,r2,27012
8110cbfc:	18c00b24 	muli	r3,r3,44
8110cc00:	10c5883a 	add	r2,r2,r3
8110cc04:	10800804 	addi	r2,r2,32
8110cc08:	00c00044 	movi	r3,1
8110cc0c:	10c00015 	stw	r3,0(r2)

	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */

#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART32v2 - Tentando devolver Mutex TX \n");
8110cc10:	d0a04f17 	ldw	r2,-32452(gp)
8110cc14:	100f883a 	mov	r7,r2
8110cc18:	01800b04 	movi	r6,44
8110cc1c:	01400044 	movi	r5,1
8110cc20:	01204534 	movhi	r4,33044
8110cc24:	213b0904 	addi	r4,r4,-5084
8110cc28:	11126a00 	call	811126a0 <fwrite>
#endif
	OSMutexPost(xTxUARTMutex);
8110cc2c:	d0a05d17 	ldw	r2,-32396(gp)
8110cc30:	1009883a 	mov	r4,r2
8110cc34:	112e73c0 	call	8112e73c <OSMutexPost>
#ifdef DEBUG_ON//todo:remover
    debug(fp,"bSendUART32v2 - Devolveu \n");
8110cc38:	d0a04f17 	ldw	r2,-32452(gp)
8110cc3c:	100f883a 	mov	r7,r2
8110cc40:	01800684 	movi	r6,26
8110cc44:	01400044 	movi	r5,1
8110cc48:	01204534 	movhi	r4,33044
8110cc4c:	213b1504 	addi	r4,r4,-5036
8110cc50:	11126a00 	call	811126a0 <fwrite>
#endif
	OSMutexPost(xMutexBuffer32);
8110cc54:	d0a05717 	ldw	r2,-32420(gp)
8110cc58:	1009883a 	mov	r4,r2
8110cc5c:	112e73c0 	call	8112e73c <OSMutexPost>

	return bSuccessL;
8110cc60:	e0bffc17 	ldw	r2,-16(fp)
}
8110cc64:	e037883a 	mov	sp,fp
8110cc68:	dfc00117 	ldw	ra,4(sp)
8110cc6c:	df000017 	ldw	fp,0(sp)
8110cc70:	dec00204 	addi	sp,sp,8
8110cc74:	f800283a 	ret

8110cc78 <vSendEthConf>:


void vSendEthConf ( void ) {
8110cc78:	deffc304 	addi	sp,sp,-244
8110cc7c:	de00012e 	bgeu	sp,et,8110cc84 <vSendEthConf+0xc>
8110cc80:	003b68fa 	trap	3
8110cc84:	dfc03c15 	stw	ra,240(sp)
8110cc88:	df003b15 	stw	fp,236(sp)
8110cc8c:	dd403a15 	stw	r21,232(sp)
8110cc90:	dd003915 	stw	r20,228(sp)
8110cc94:	dcc03815 	stw	r19,224(sp)
8110cc98:	dc803715 	stw	r18,220(sp)
8110cc9c:	dc403615 	stw	r17,216(sp)
8110cca0:	dc003515 	stw	r16,212(sp)
8110cca4:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
8110cca8:	e03fd98d 	sth	zero,-154(fp)
8110ccac:	e03fda0d 	sth	zero,-152(fp)
8110ccb0:	e0bfda84 	addi	r2,fp,-150
8110ccb4:	00c01f04 	movi	r3,124
8110ccb8:	180d883a 	mov	r6,r3
8110ccbc:	000b883a 	mov	r5,zero
8110ccc0:	1009883a 	mov	r4,r2
8110ccc4:	11132040 	call	81113204 <memset>
    unsigned char crc = 0;
8110ccc8:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110cccc:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110ccd0:	110d1200 	call	8110d120 <usiGetIdCMD>
8110ccd4:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ccd8:	e57fd90b 	ldhu	r21,-156(fp)
8110ccdc:	00a04574 	movhi	r2,33045
8110cce0:	10b04704 	addi	r2,r2,-16100
8110cce4:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110cce8:	00a04574 	movhi	r2,33045
8110ccec:	10b04704 	addi	r2,r2,-16100
8110ccf0:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110ccf4:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110ccf8:	00a04574 	movhi	r2,33045
8110ccfc:	10b04704 	addi	r2,r2,-16100
8110cd00:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd04:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110cd08:	00a04574 	movhi	r2,33045
8110cd0c:	10b04704 	addi	r2,r2,-16100
8110cd10:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd14:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110cd18:	00a04574 	movhi	r2,33045
8110cd1c:	10b04704 	addi	r2,r2,-16100
8110cd20:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd24:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110cd28:	00a04574 	movhi	r2,33045
8110cd2c:	10b04704 	addi	r2,r2,-16100
8110cd30:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd34:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110cd38:	00a04574 	movhi	r2,33045
8110cd3c:	10b04704 	addi	r2,r2,-16100
8110cd40:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd44:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110cd48:	00a04574 	movhi	r2,33045
8110cd4c:	10b04704 	addi	r2,r2,-16100
8110cd50:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd54:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110cd58:	00a04574 	movhi	r2,33045
8110cd5c:	10b04704 	addi	r2,r2,-16100
8110cd60:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd64:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110cd68:	00a04574 	movhi	r2,33045
8110cd6c:	10b04704 	addi	r2,r2,-16100
8110cd70:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd74:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110cd78:	00a04574 	movhi	r2,33045
8110cd7c:	10b04704 	addi	r2,r2,-16100
8110cd80:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd84:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110cd88:	00a04574 	movhi	r2,33045
8110cd8c:	10b04704 	addi	r2,r2,-16100
8110cd90:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cd94:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110cd98:	00a04574 	movhi	r2,33045
8110cd9c:	10b04704 	addi	r2,r2,-16100
8110cda0:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cda4:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110cda8:	00a04574 	movhi	r2,33045
8110cdac:	10b04704 	addi	r2,r2,-16100
8110cdb0:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cdb4:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110cdb8:	00a04574 	movhi	r2,33045
8110cdbc:	10b04704 	addi	r2,r2,-16100
8110cdc0:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cdc4:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110cdc8:	00a04574 	movhi	r2,33045
8110cdcc:	10b04704 	addi	r2,r2,-16100
8110cdd0:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cdd4:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110cdd8:	00a04574 	movhi	r2,33045
8110cddc:	10b04704 	addi	r2,r2,-16100
8110cde0:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cde4:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
8110cde8:	00a04574 	movhi	r2,33045
8110cdec:	10b04704 	addi	r2,r2,-16100
8110cdf0:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cdf4:	10bfffcc 	andi	r2,r2,65535
8110cdf8:	e53fd984 	addi	r20,fp,-154
8110cdfc:	d8801115 	stw	r2,68(sp)
8110ce00:	dcc01015 	stw	r19,64(sp)
8110ce04:	dc800f15 	stw	r18,60(sp)
8110ce08:	dc400e15 	stw	r17,56(sp)
8110ce0c:	dc000d15 	stw	r16,52(sp)
8110ce10:	dbc00c15 	stw	r15,48(sp)
8110ce14:	db800b15 	stw	r14,44(sp)
8110ce18:	db400a15 	stw	r13,40(sp)
8110ce1c:	db000915 	stw	r12,36(sp)
8110ce20:	dac00815 	stw	r11,32(sp)
8110ce24:	da800715 	stw	r10,28(sp)
8110ce28:	da400615 	stw	r9,24(sp)
8110ce2c:	da000515 	stw	r8,20(sp)
8110ce30:	d9c00415 	stw	r7,16(sp)
8110ce34:	d9800315 	stw	r6,12(sp)
8110ce38:	d9400215 	stw	r5,8(sp)
8110ce3c:	d9000115 	stw	r4,4(sp)
8110ce40:	d8c00015 	stw	r3,0(sp)
8110ce44:	a80f883a 	mov	r7,r21
8110ce48:	018010c4 	movi	r6,67
8110ce4c:	01604534 	movhi	r5,33044
8110ce50:	297b1c04 	addi	r5,r5,-5008
8110ce54:	a009883a 	mov	r4,r20
8110ce58:	11139940 	call	81113994 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
8110ce5c:	e0bfd984 	addi	r2,fp,-154
8110ce60:	1009883a 	mov	r4,r2
8110ce64:	1113ba80 	call	81113ba8 <strlen>
8110ce68:	1007883a 	mov	r3,r2
8110ce6c:	e0bfd984 	addi	r2,fp,-154
8110ce70:	180b883a 	mov	r5,r3
8110ce74:	1009883a 	mov	r4,r2
8110ce78:	110e3480 	call	8110e348 <ucCrc8wInit>
8110ce7c:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
8110ce80:	e13fd703 	ldbu	r4,-164(fp)
8110ce84:	e0ffd984 	addi	r3,fp,-154
8110ce88:	e0bfd984 	addi	r2,fp,-154
8110ce8c:	200f883a 	mov	r7,r4
8110ce90:	180d883a 	mov	r6,r3
8110ce94:	01604534 	movhi	r5,33044
8110ce98:	297b3404 	addi	r5,r5,-4912
8110ce9c:	1009883a 	mov	r4,r2
8110cea0:	11139940 	call	81113994 <sprintf>

	bSuccees = bSendUART128v2(cBufferETH, usiIdCMDLocal);
8110cea4:	e0bfd90b 	ldhu	r2,-156(fp)
8110cea8:	10ffffcc 	andi	r3,r2,65535
8110ceac:	18e0001c 	xori	r3,r3,32768
8110ceb0:	18e00004 	addi	r3,r3,-32768
8110ceb4:	e0bfd984 	addi	r2,fp,-154
8110ceb8:	180b883a 	mov	r5,r3
8110cebc:	1009883a 	mov	r4,r2
8110cec0:	110c2480 	call	8110c248 <bSendUART128v2>
8110cec4:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
8110cec8:	e0bfd817 	ldw	r2,-160(fp)
8110cecc:	10800060 	cmpeqi	r2,r2,1
8110ced0:	1000011e 	bne	r2,zero,8110ced8 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
8110ced4:	110edec0 	call	8110edec <vCouldNotSendEthConfUART>
	}
}
8110ced8:	0001883a 	nop
8110cedc:	e6fffa04 	addi	sp,fp,-24
8110cee0:	dfc00717 	ldw	ra,28(sp)
8110cee4:	df000617 	ldw	fp,24(sp)
8110cee8:	dd400517 	ldw	r21,20(sp)
8110ceec:	dd000417 	ldw	r20,16(sp)
8110cef0:	dcc00317 	ldw	r19,12(sp)
8110cef4:	dc800217 	ldw	r18,8(sp)
8110cef8:	dc400117 	ldw	r17,4(sp)
8110cefc:	dc000017 	ldw	r16,0(sp)
8110cf00:	dec00804 	addi	sp,sp,32
8110cf04:	f800283a 	ret

8110cf08 <vSendTurnOff>:


void vSendTurnOff ( void ) {
8110cf08:	defff304 	addi	sp,sp,-52
8110cf0c:	de00012e 	bgeu	sp,et,8110cf14 <vSendTurnOff+0xc>
8110cf10:	003b68fa 	trap	3
8110cf14:	dfc00c15 	stw	ra,48(sp)
8110cf18:	df000b15 	stw	fp,44(sp)
8110cf1c:	df000b04 	addi	fp,sp,44
    char cBufferTurnOff[32] = "";
8110cf20:	e03ff78d 	sth	zero,-34(fp)
8110cf24:	e03ff80d 	sth	zero,-32(fp)
8110cf28:	e03ff88d 	sth	zero,-30(fp)
8110cf2c:	e03ff90d 	sth	zero,-28(fp)
8110cf30:	e03ff98d 	sth	zero,-26(fp)
8110cf34:	e03ffa0d 	sth	zero,-24(fp)
8110cf38:	e03ffa8d 	sth	zero,-22(fp)
8110cf3c:	e03ffb0d 	sth	zero,-20(fp)
8110cf40:	e03ffb8d 	sth	zero,-18(fp)
8110cf44:	e03ffc0d 	sth	zero,-16(fp)
8110cf48:	e03ffc8d 	sth	zero,-14(fp)
8110cf4c:	e03ffd0d 	sth	zero,-12(fp)
8110cf50:	e03ffd8d 	sth	zero,-10(fp)
8110cf54:	e03ffe0d 	sth	zero,-8(fp)
8110cf58:	e03ffe8d 	sth	zero,-6(fp)
8110cf5c:	e03fff0d 	sth	zero,-4(fp)
    unsigned char crc = 0;
8110cf60:	e03ff505 	stb	zero,-44(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110cf64:	e03ff615 	stw	zero,-40(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110cf68:	110d1200 	call	8110d120 <usiGetIdCMD>
8110cf6c:	e0bff70d 	sth	r2,-36(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferTurnOff, TURNOFF_SPRINTF, usiIdCMDLocal);
8110cf70:	e0fff70b 	ldhu	r3,-36(fp)
8110cf74:	e0bff784 	addi	r2,fp,-34
8110cf78:	180d883a 	mov	r6,r3
8110cf7c:	01604534 	movhi	r5,33044
8110cf80:	297b3704 	addi	r5,r5,-4900
8110cf84:	1009883a 	mov	r4,r2
8110cf88:	11139940 	call	81113994 <sprintf>
    crc = ucCrc8wInit( cBufferTurnOff , strlen(cBufferTurnOff));
8110cf8c:	e0bff784 	addi	r2,fp,-34
8110cf90:	1009883a 	mov	r4,r2
8110cf94:	1113ba80 	call	81113ba8 <strlen>
8110cf98:	1007883a 	mov	r3,r2
8110cf9c:	e0bff784 	addi	r2,fp,-34
8110cfa0:	180b883a 	mov	r5,r3
8110cfa4:	1009883a 	mov	r4,r2
8110cfa8:	110e3480 	call	8110e348 <ucCrc8wInit>
8110cfac:	e0bff505 	stb	r2,-44(fp)
    sprintf(cBufferTurnOff, "%s|%hhu;", cBufferTurnOff, crc );
8110cfb0:	e13ff503 	ldbu	r4,-44(fp)
8110cfb4:	e0fff784 	addi	r3,fp,-34
8110cfb8:	e0bff784 	addi	r2,fp,-34
8110cfbc:	200f883a 	mov	r7,r4
8110cfc0:	180d883a 	mov	r6,r3
8110cfc4:	01604534 	movhi	r5,33044
8110cfc8:	297b3404 	addi	r5,r5,-4912
8110cfcc:	1009883a 	mov	r4,r2
8110cfd0:	11139940 	call	81113994 <sprintf>

	bSuccees = bSendUART32v2(cBufferTurnOff, usiIdCMDLocal);
8110cfd4:	e0bff70b 	ldhu	r2,-36(fp)
8110cfd8:	10ffffcc 	andi	r3,r2,65535
8110cfdc:	18e0001c 	xori	r3,r3,32768
8110cfe0:	18e00004 	addi	r3,r3,-32768
8110cfe4:	e0bff784 	addi	r2,fp,-34
8110cfe8:	180b883a 	mov	r5,r3
8110cfec:	1009883a 	mov	r4,r2
8110cff0:	110c9100 	call	8110c910 <bSendUART32v2>
8110cff4:	e0bff615 	stw	r2,-40(fp)

	if ( bSuccees != TRUE ) {
8110cff8:	e0bff617 	ldw	r2,-40(fp)
8110cffc:	10800060 	cmpeqi	r2,r2,1
8110d000:	1000011e 	bne	r2,zero,8110d008 <vSendTurnOff+0x100>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTurnOff();
8110d004:	110f4940 	call	8110f494 <vCouldNotSendTurnOff>
	}
}
8110d008:	0001883a 	nop
8110d00c:	e037883a 	mov	sp,fp
8110d010:	dfc00117 	ldw	ra,4(sp)
8110d014:	df000017 	ldw	fp,0(sp)
8110d018:	dec00204 	addi	sp,sp,8
8110d01c:	f800283a 	ret

8110d020 <vSendLog>:

void vSendLog ( const char * cDataIn ) {
8110d020:	deffda04 	addi	sp,sp,-152
8110d024:	de00012e 	bgeu	sp,et,8110d02c <vSendLog+0xc>
8110d028:	003b68fa 	trap	3
8110d02c:	dfc02515 	stw	ra,148(sp)
8110d030:	df002415 	stw	fp,144(sp)
8110d034:	df002404 	addi	fp,sp,144
8110d038:	e13fff15 	stw	r4,-4(fp)
    char cBufferLog[128] = "";
8110d03c:	e03fde8d 	sth	zero,-134(fp)
8110d040:	e03fdf0d 	sth	zero,-132(fp)
8110d044:	e0bfdf84 	addi	r2,fp,-130
8110d048:	00c01f04 	movi	r3,124
8110d04c:	180d883a 	mov	r6,r3
8110d050:	000b883a 	mov	r5,zero
8110d054:	1009883a 	mov	r4,r2
8110d058:	11132040 	call	81113204 <memset>
    unsigned char crc = 0;
8110d05c:	e03fdc05 	stb	zero,-144(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110d060:	e03fdd15 	stw	zero,-140(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110d064:	110d1200 	call	8110d120 <usiGetIdCMD>
8110d068:	e0bfde0d 	sth	r2,-136(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferLog, LOG_SPRINTF, usiIdCMDLocal, cDataIn);
8110d06c:	e0ffde0b 	ldhu	r3,-136(fp)
8110d070:	e0bfde84 	addi	r2,fp,-134
8110d074:	e1ffff17 	ldw	r7,-4(fp)
8110d078:	180d883a 	mov	r6,r3
8110d07c:	01604534 	movhi	r5,33044
8110d080:	297b3904 	addi	r5,r5,-4892
8110d084:	1009883a 	mov	r4,r2
8110d088:	11139940 	call	81113994 <sprintf>
    crc = ucCrc8wInit( cBufferLog , strlen(cBufferLog));
8110d08c:	e0bfde84 	addi	r2,fp,-134
8110d090:	1009883a 	mov	r4,r2
8110d094:	1113ba80 	call	81113ba8 <strlen>
8110d098:	1007883a 	mov	r3,r2
8110d09c:	e0bfde84 	addi	r2,fp,-134
8110d0a0:	180b883a 	mov	r5,r3
8110d0a4:	1009883a 	mov	r4,r2
8110d0a8:	110e3480 	call	8110e348 <ucCrc8wInit>
8110d0ac:	e0bfdc05 	stb	r2,-144(fp)
    sprintf(cBufferLog, "%s|%hhu;", cBufferLog, crc );
8110d0b0:	e13fdc03 	ldbu	r4,-144(fp)
8110d0b4:	e0ffde84 	addi	r3,fp,-134
8110d0b8:	e0bfde84 	addi	r2,fp,-134
8110d0bc:	200f883a 	mov	r7,r4
8110d0c0:	180d883a 	mov	r6,r3
8110d0c4:	01604534 	movhi	r5,33044
8110d0c8:	297b3404 	addi	r5,r5,-4912
8110d0cc:	1009883a 	mov	r4,r2
8110d0d0:	11139940 	call	81113994 <sprintf>

	bSuccees = bSendUART128v2(cBufferLog, usiIdCMDLocal);
8110d0d4:	e0bfde0b 	ldhu	r2,-136(fp)
8110d0d8:	10ffffcc 	andi	r3,r2,65535
8110d0dc:	18e0001c 	xori	r3,r3,32768
8110d0e0:	18e00004 	addi	r3,r3,-32768
8110d0e4:	e0bfde84 	addi	r2,fp,-134
8110d0e8:	180b883a 	mov	r5,r3
8110d0ec:	1009883a 	mov	r4,r2
8110d0f0:	110c2480 	call	8110c248 <bSendUART128v2>
8110d0f4:	e0bfdd15 	stw	r2,-140(fp)

	if ( bSuccees != TRUE ) {
8110d0f8:	e0bfdd17 	ldw	r2,-140(fp)
8110d0fc:	10800060 	cmpeqi	r2,r2,1
8110d100:	1000011e 	bne	r2,zero,8110d108 <vSendLog+0xe8>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendLog();
8110d104:	110f4fc0 	call	8110f4fc <vCouldNotSendLog>
	}
}
8110d108:	0001883a 	nop
8110d10c:	e037883a 	mov	sp,fp
8110d110:	dfc00117 	ldw	ra,4(sp)
8110d114:	df000017 	ldw	fp,0(sp)
8110d118:	dec00204 	addi	sp,sp,8
8110d11c:	f800283a 	ret

8110d120 <usiGetIdCMD>:

unsigned short int usiGetIdCMD ( void ) {
8110d120:	deffff04 	addi	sp,sp,-4
8110d124:	de00012e 	bgeu	sp,et,8110d12c <usiGetIdCMD+0xc>
8110d128:	003b68fa 	trap	3
8110d12c:	df000015 	stw	fp,0(sp)
8110d130:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
8110d134:	d0a0550b 	ldhu	r2,-32428(gp)
8110d138:	10ffffcc 	andi	r3,r2,65535
8110d13c:	00bfffd4 	movui	r2,65535
8110d140:	1880031e 	bne	r3,r2,8110d150 <usiGetIdCMD+0x30>
        usiIdCMD = 2;
8110d144:	00800084 	movi	r2,2
8110d148:	d0a0550d 	sth	r2,-32428(gp)
8110d14c:	00000306 	br	8110d15c <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
8110d150:	d0a0550b 	ldhu	r2,-32428(gp)
8110d154:	10800044 	addi	r2,r2,1
8110d158:	d0a0550d 	sth	r2,-32428(gp)

    return usiIdCMD;
8110d15c:	d0a0550b 	ldhu	r2,-32428(gp)
}
8110d160:	e037883a 	mov	sp,fp
8110d164:	df000017 	ldw	fp,0(sp)
8110d168:	dec00104 	addi	sp,sp,4
8110d16c:	f800283a 	ret

8110d170 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
8110d170:	defffb04 	addi	sp,sp,-20
8110d174:	de00012e 	bgeu	sp,et,8110d17c <siPosStr+0xc>
8110d178:	003b68fa 	trap	3
8110d17c:	dfc00415 	stw	ra,16(sp)
8110d180:	df000315 	stw	fp,12(sp)
8110d184:	df000304 	addi	fp,sp,12
8110d188:	e13ffe15 	stw	r4,-8(fp)
8110d18c:	2805883a 	mov	r2,r5
8110d190:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
8110d194:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
8110d198:	e0bfff03 	ldbu	r2,-4(fp)
8110d19c:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
8110d1a0:	e17ffd04 	addi	r5,fp,-12
8110d1a4:	e13ffe17 	ldw	r4,-8(fp)
8110d1a8:	1113b5c0 	call	81113b5c <strcspn>
}
8110d1ac:	e037883a 	mov	sp,fp
8110d1b0:	dfc00117 	ldw	ra,4(sp)
8110d1b4:	df000017 	ldw	fp,0(sp)
8110d1b8:	dec00204 	addi	sp,sp,8
8110d1bc:	f800283a 	ret

8110d1c0 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110d1c0:	defffc04 	addi	sp,sp,-16
8110d1c4:	de00012e 	bgeu	sp,et,8110d1cc <vTimeoutCheck+0xc>
8110d1c8:	003b68fa 	trap	3
8110d1cc:	dfc00315 	stw	ra,12(sp)
8110d1d0:	df000215 	stw	fp,8(sp)
8110d1d4:	df000204 	addi	fp,sp,8
8110d1d8:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110d1dc:	d0a05417 	ldw	r2,-32432(gp)
8110d1e0:	1009883a 	mov	r4,r2
8110d1e4:	113052c0 	call	8113052c <OSSemPost>
8110d1e8:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110d1ec:	e0bffe03 	ldbu	r2,-8(fp)
8110d1f0:	10000126 	beq	r2,zero,8110d1f8 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110d1f4:	110f2240 	call	8110f224 <vFailPostBlockingSemTimeoutTask>
	}
}
8110d1f8:	0001883a 	nop
8110d1fc:	e037883a 	mov	sp,fp
8110d200:	dfc00117 	ldw	ra,4(sp)
8110d204:	df000017 	ldw	fp,0(sp)
8110d208:	dec00204 	addi	sp,sp,8
8110d20c:	f800283a 	ret

8110d210 <vSendPusTM64>:


/* Send through a medium buffer */
void vSendPusTM64 ( tTMPus xPcktPus ) {
8110d210:	deffe304 	addi	sp,sp,-116
8110d214:	de00012e 	bgeu	sp,et,8110d21c <vSendPusTM64+0xc>
8110d218:	003b68fa 	trap	3
8110d21c:	dfc01815 	stw	ra,96(sp)
8110d220:	df001715 	stw	fp,92(sp)
8110d224:	df001704 	addi	fp,sp,92
8110d228:	e1000215 	stw	r4,8(fp)
8110d22c:	e1400315 	stw	r5,12(fp)
8110d230:	e1800415 	stw	r6,16(fp)
8110d234:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[64] = "";
8110d238:	e03fef8d 	sth	zero,-66(fp)
8110d23c:	e03ff00d 	sth	zero,-64(fp)
8110d240:	e0bff084 	addi	r2,fp,-62
8110d244:	00c00f04 	movi	r3,60
8110d248:	180d883a 	mov	r6,r3
8110d24c:	000b883a 	mov	r5,zero
8110d250:	1009883a 	mov	r4,r2
8110d254:	11132040 	call	81113204 <memset>
    unsigned char crc = 0;
8110d258:	e03fed45 	stb	zero,-75(fp)
	unsigned char ucIL = 0;
8110d25c:	e03fed05 	stb	zero,-76(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110d260:	e03fee15 	stw	zero,-72(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110d264:	110d1200 	call	8110d120 <usiGetIdCMD>
8110d268:	e0bfef0d 	sth	r2,-68(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110d26c:	e1bfef0b 	ldhu	r6,-68(fp)
8110d270:	e080030b 	ldhu	r2,12(fp)
8110d274:	11ffffcc 	andi	r7,r2,65535
8110d278:	e080038b 	ldhu	r2,14(fp)
8110d27c:	10bfffcc 	andi	r2,r2,65535
8110d280:	e0c0040b 	ldhu	r3,16(fp)
8110d284:	18ffffcc 	andi	r3,r3,65535
8110d288:	e100048b 	ldhu	r4,18(fp)
8110d28c:	213fffcc 	andi	r4,r4,65535
8110d290:	e140050b 	ldhu	r5,20(fp)
8110d294:	297fffcc 	andi	r5,r5,65535
8110d298:	e23fef84 	addi	r8,fp,-66
8110d29c:	d9400315 	stw	r5,12(sp)
8110d2a0:	d9000215 	stw	r4,8(sp)
8110d2a4:	d8c00115 	stw	r3,4(sp)
8110d2a8:	d8800015 	stw	r2,0(sp)
8110d2ac:	01604534 	movhi	r5,33044
8110d2b0:	297b3c04 	addi	r5,r5,-4880
8110d2b4:	4009883a 	mov	r4,r8
8110d2b8:	11139940 	call	81113994 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d2bc:	e03fed05 	stb	zero,-76(fp)
8110d2c0:	00001206 	br	8110d30c <vSendPusTM64+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110d2c4:	e0bfed03 	ldbu	r2,-76(fp)
8110d2c8:	10800204 	addi	r2,r2,8
8110d2cc:	1085883a 	add	r2,r2,r2
8110d2d0:	e0c00204 	addi	r3,fp,8
8110d2d4:	1885883a 	add	r2,r3,r2
8110d2d8:	1080000b 	ldhu	r2,0(r2)
8110d2dc:	113fffcc 	andi	r4,r2,65535
8110d2e0:	e0ffef84 	addi	r3,fp,-66
8110d2e4:	e0bfef84 	addi	r2,fp,-66
8110d2e8:	200f883a 	mov	r7,r4
8110d2ec:	180d883a 	mov	r6,r3
8110d2f0:	01604534 	movhi	r5,33044
8110d2f4:	297b4304 	addi	r5,r5,-4852
8110d2f8:	1009883a 	mov	r4,r2
8110d2fc:	11139940 	call	81113994 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d300:	e0bfed03 	ldbu	r2,-76(fp)
8110d304:	10800044 	addi	r2,r2,1
8110d308:	e0bfed05 	stb	r2,-76(fp)
8110d30c:	e0800583 	ldbu	r2,22(fp)
8110d310:	10803fcc 	andi	r2,r2,255
8110d314:	e0ffed03 	ldbu	r3,-76(fp)
8110d318:	18bfea36 	bltu	r3,r2,8110d2c4 <__reset+0xfb0ed2c4>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110d31c:	e0bfef84 	addi	r2,fp,-66
8110d320:	1009883a 	mov	r4,r2
8110d324:	1113ba80 	call	81113ba8 <strlen>
8110d328:	1007883a 	mov	r3,r2
8110d32c:	e0bfef84 	addi	r2,fp,-66
8110d330:	180b883a 	mov	r5,r3
8110d334:	1009883a 	mov	r4,r2
8110d338:	110e3480 	call	8110e348 <ucCrc8wInit>
8110d33c:	e0bfed45 	stb	r2,-75(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110d340:	e13fed43 	ldbu	r4,-75(fp)
8110d344:	e0ffef84 	addi	r3,fp,-66
8110d348:	e0bfef84 	addi	r2,fp,-66
8110d34c:	200f883a 	mov	r7,r4
8110d350:	180d883a 	mov	r6,r3
8110d354:	01604534 	movhi	r5,33044
8110d358:	297b3404 	addi	r5,r5,-4912
8110d35c:	1009883a 	mov	r4,r2
8110d360:	11139940 	call	81113994 <sprintf>

	bSuccees = bSendUART64v2(cBufferPus, usiIdCMDLocal);
8110d364:	e0bfef0b 	ldhu	r2,-68(fp)
8110d368:	10ffffcc 	andi	r3,r2,65535
8110d36c:	18e0001c 	xori	r3,r3,32768
8110d370:	18e00004 	addi	r3,r3,-32768
8110d374:	e0bfef84 	addi	r2,fp,-66
8110d378:	180b883a 	mov	r5,r3
8110d37c:	1009883a 	mov	r4,r2
8110d380:	110c5a80 	call	8110c5a8 <bSendUART64v2>
8110d384:	e0bfee15 	stw	r2,-72(fp)

	if ( bSuccees != TRUE ) {
8110d388:	e0bfee17 	ldw	r2,-72(fp)
8110d38c:	10800060 	cmpeqi	r2,r2,1
8110d390:	1000031e 	bne	r2,zero,8110d3a0 <vSendPusTM64+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110d394:	e0bfef84 	addi	r2,fp,-66
8110d398:	1009883a 	mov	r4,r2
8110d39c:	110f5640 	call	8110f564 <vCouldNotSendTMPusCommand>
	}
}
8110d3a0:	0001883a 	nop
8110d3a4:	e037883a 	mov	sp,fp
8110d3a8:	dfc00117 	ldw	ra,4(sp)
8110d3ac:	df000017 	ldw	fp,0(sp)
8110d3b0:	dec00604 	addi	sp,sp,24
8110d3b4:	f800283a 	ret

8110d3b8 <vSendPusTM128>:

/* Send through a big buffer */
void vSendPusTM128 ( tTMPus xPcktPus ) {
8110d3b8:	deffd304 	addi	sp,sp,-180
8110d3bc:	de00012e 	bgeu	sp,et,8110d3c4 <vSendPusTM128+0xc>
8110d3c0:	003b68fa 	trap	3
8110d3c4:	dfc02815 	stw	ra,160(sp)
8110d3c8:	df002715 	stw	fp,156(sp)
8110d3cc:	df002704 	addi	fp,sp,156
8110d3d0:	e1000215 	stw	r4,8(fp)
8110d3d4:	e1400315 	stw	r5,12(fp)
8110d3d8:	e1800415 	stw	r6,16(fp)
8110d3dc:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[128] = "";
8110d3e0:	e03fdf8d 	sth	zero,-130(fp)
8110d3e4:	e03fe00d 	sth	zero,-128(fp)
8110d3e8:	e0bfe084 	addi	r2,fp,-126
8110d3ec:	00c01f04 	movi	r3,124
8110d3f0:	180d883a 	mov	r6,r3
8110d3f4:	000b883a 	mov	r5,zero
8110d3f8:	1009883a 	mov	r4,r2
8110d3fc:	11132040 	call	81113204 <memset>
    unsigned char crc = 0;
8110d400:	e03fdd45 	stb	zero,-139(fp)
	unsigned char ucIL = 0;
8110d404:	e03fdd05 	stb	zero,-140(fp)
    unsigned short int usiIdCMDLocal;
	bool bSuccees = FALSE;
8110d408:	e03fde15 	stw	zero,-136(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110d40c:	110d1200 	call	8110d120 <usiGetIdCMD>
8110d410:	e0bfdf0d 	sth	r2,-132(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110d414:	e1bfdf0b 	ldhu	r6,-132(fp)
8110d418:	e080030b 	ldhu	r2,12(fp)
8110d41c:	11ffffcc 	andi	r7,r2,65535
8110d420:	e080038b 	ldhu	r2,14(fp)
8110d424:	10bfffcc 	andi	r2,r2,65535
8110d428:	e0c0040b 	ldhu	r3,16(fp)
8110d42c:	18ffffcc 	andi	r3,r3,65535
8110d430:	e100048b 	ldhu	r4,18(fp)
8110d434:	213fffcc 	andi	r4,r4,65535
8110d438:	e140050b 	ldhu	r5,20(fp)
8110d43c:	297fffcc 	andi	r5,r5,65535
8110d440:	e23fdf84 	addi	r8,fp,-130
8110d444:	d9400315 	stw	r5,12(sp)
8110d448:	d9000215 	stw	r4,8(sp)
8110d44c:	d8c00115 	stw	r3,4(sp)
8110d450:	d8800015 	stw	r2,0(sp)
8110d454:	01604534 	movhi	r5,33044
8110d458:	297b3c04 	addi	r5,r5,-4880
8110d45c:	4009883a 	mov	r4,r8
8110d460:	11139940 	call	81113994 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d464:	e03fdd05 	stb	zero,-140(fp)
8110d468:	00001206 	br	8110d4b4 <vSendPusTM128+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110d46c:	e0bfdd03 	ldbu	r2,-140(fp)
8110d470:	10800204 	addi	r2,r2,8
8110d474:	1085883a 	add	r2,r2,r2
8110d478:	e0c00204 	addi	r3,fp,8
8110d47c:	1885883a 	add	r2,r3,r2
8110d480:	1080000b 	ldhu	r2,0(r2)
8110d484:	113fffcc 	andi	r4,r2,65535
8110d488:	e0ffdf84 	addi	r3,fp,-130
8110d48c:	e0bfdf84 	addi	r2,fp,-130
8110d490:	200f883a 	mov	r7,r4
8110d494:	180d883a 	mov	r6,r3
8110d498:	01604534 	movhi	r5,33044
8110d49c:	297b4304 	addi	r5,r5,-4852
8110d4a0:	1009883a 	mov	r4,r2
8110d4a4:	11139940 	call	81113994 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d4a8:	e0bfdd03 	ldbu	r2,-140(fp)
8110d4ac:	10800044 	addi	r2,r2,1
8110d4b0:	e0bfdd05 	stb	r2,-140(fp)
8110d4b4:	e0800583 	ldbu	r2,22(fp)
8110d4b8:	10803fcc 	andi	r2,r2,255
8110d4bc:	e0ffdd03 	ldbu	r3,-140(fp)
8110d4c0:	18bfea36 	bltu	r3,r2,8110d46c <__reset+0xfb0ed46c>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110d4c4:	e0bfdf84 	addi	r2,fp,-130
8110d4c8:	1009883a 	mov	r4,r2
8110d4cc:	1113ba80 	call	81113ba8 <strlen>
8110d4d0:	1007883a 	mov	r3,r2
8110d4d4:	e0bfdf84 	addi	r2,fp,-130
8110d4d8:	180b883a 	mov	r5,r3
8110d4dc:	1009883a 	mov	r4,r2
8110d4e0:	110e3480 	call	8110e348 <ucCrc8wInit>
8110d4e4:	e0bfdd45 	stb	r2,-139(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110d4e8:	e13fdd43 	ldbu	r4,-139(fp)
8110d4ec:	e0ffdf84 	addi	r3,fp,-130
8110d4f0:	e0bfdf84 	addi	r2,fp,-130
8110d4f4:	200f883a 	mov	r7,r4
8110d4f8:	180d883a 	mov	r6,r3
8110d4fc:	01604534 	movhi	r5,33044
8110d500:	297b3404 	addi	r5,r5,-4912
8110d504:	1009883a 	mov	r4,r2
8110d508:	11139940 	call	81113994 <sprintf>

	bSuccees = bSendUART128v2(cBufferPus, usiIdCMDLocal);
8110d50c:	e0bfdf0b 	ldhu	r2,-132(fp)
8110d510:	10ffffcc 	andi	r3,r2,65535
8110d514:	18e0001c 	xori	r3,r3,32768
8110d518:	18e00004 	addi	r3,r3,-32768
8110d51c:	e0bfdf84 	addi	r2,fp,-130
8110d520:	180b883a 	mov	r5,r3
8110d524:	1009883a 	mov	r4,r2
8110d528:	110c2480 	call	8110c248 <bSendUART128v2>
8110d52c:	e0bfde15 	stw	r2,-136(fp)

	if ( bSuccees != TRUE ) {
8110d530:	e0bfde17 	ldw	r2,-136(fp)
8110d534:	10800060 	cmpeqi	r2,r2,1
8110d538:	1000031e 	bne	r2,zero,8110d548 <vSendPusTM128+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110d53c:	e0bfdf84 	addi	r2,fp,-130
8110d540:	1009883a 	mov	r4,r2
8110d544:	110f5640 	call	8110f564 <vCouldNotSendTMPusCommand>
	}
}
8110d548:	0001883a 	nop
8110d54c:	e037883a 	mov	sp,fp
8110d550:	dfc00117 	ldw	ra,4(sp)
8110d554:	df000017 	ldw	fp,0(sp)
8110d558:	dec00604 	addi	sp,sp,24
8110d55c:	f800283a 	ret

8110d560 <vTMPusTestConnection>:
/* TM_SCAM_TEST_CONNECTION */
/* 
hp-pck-type		hp-pid		hp-pcat		hp-srv-type		hp-srv-subtype
0				112			0			17				2
*/
void vTMPusTestConnection( unsigned short int usiPusId ) {
8110d560:	deffd904 	addi	sp,sp,-156
8110d564:	de00012e 	bgeu	sp,et,8110d56c <vTMPusTestConnection+0xc>
8110d568:	003b68fa 	trap	3
8110d56c:	dfc02615 	stw	ra,152(sp)
8110d570:	df002515 	stw	fp,148(sp)
8110d574:	df002504 	addi	fp,sp,148
8110d578:	2005883a 	mov	r2,r4
8110d57c:	e0bfff0d 	sth	r2,-4(fp)
	tTMPus xTmPusL;

	/* For now is hardcoded after full release of the pus I will create defines */
	xTmPusL.usiPusId = usiPusId;
8110d580:	e0bfff0b 	ldhu	r2,-4(fp)
8110d584:	e0bfee0d 	sth	r2,-72(fp)
	xTmPusL.usiPid = 64;
8110d588:	00801004 	movi	r2,64
8110d58c:	e0bfec0d 	sth	r2,-80(fp)
	xTmPusL.usiCat = 0;
8110d590:	e03fec8d 	sth	zero,-78(fp)
	xTmPusL.usiType = 17;
8110d594:	00800444 	movi	r2,17
8110d598:	e0bfed0d 	sth	r2,-76(fp)
	xTmPusL.usiSubType = 2;
8110d59c:	00800084 	movi	r2,2
8110d5a0:	e0bfed8d 	sth	r2,-74(fp)

	vSendPusTM64( xTmPusL );
8110d5a4:	d809883a 	mov	r4,sp
8110d5a8:	e0bfef04 	addi	r2,fp,-68
8110d5ac:	00c01004 	movi	r3,64
8110d5b0:	180d883a 	mov	r6,r3
8110d5b4:	100b883a 	mov	r5,r2
8110d5b8:	11130b40 	call	811130b4 <memcpy>
8110d5bc:	e13feb17 	ldw	r4,-84(fp)
8110d5c0:	e17fec17 	ldw	r5,-80(fp)
8110d5c4:	e1bfed17 	ldw	r6,-76(fp)
8110d5c8:	e1ffee17 	ldw	r7,-72(fp)
8110d5cc:	110d2100 	call	8110d210 <vSendPusTM64>
}
8110d5d0:	0001883a 	nop
8110d5d4:	e037883a 	mov	sp,fp
8110d5d8:	dfc00117 	ldw	ra,4(sp)
8110d5dc:	df000017 	ldw	fp,0(sp)
8110d5e0:	dec00204 	addi	sp,sp,8
8110d5e4:	f800283a 	ret

8110d5e8 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110d5e8:	defff504 	addi	sp,sp,-44
8110d5ec:	de00012e 	bgeu	sp,et,8110d5f4 <vLoadDefaultETHConf+0xc>
8110d5f0:	003b68fa 	trap	3
8110d5f4:	dfc00a15 	stw	ra,40(sp)
8110d5f8:	df000915 	stw	fp,36(sp)
8110d5fc:	dc000815 	stw	r16,32(sp)
8110d600:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110d604:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110d608:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110d60c:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110d610:	d0a05f17 	ldw	r2,-32388(gp)
8110d614:	10800058 	cmpnei	r2,r2,1
8110d618:	1001f61e 	bne	r2,zero,8110ddf4 <vLoadDefaultETHConf+0x80c>
8110d61c:	111035c0 	call	8111035c <bSDcardIsPresent>
8110d620:	1001f426 	beq	r2,zero,8110ddf4 <vLoadDefaultETHConf+0x80c>
8110d624:	111038c0 	call	8111038c <bSDcardFAT16Check>
8110d628:	1001f226 	beq	r2,zero,8110ddf4 <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110d62c:	01204534 	movhi	r4,33044
8110d630:	213b4504 	addi	r4,r4,-4844
8110d634:	11104b40 	call	811104b4 <siOpenFile>
8110d638:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110d63c:	e0bffc0f 	ldh	r2,-16(fp)
8110d640:	1001e816 	blt	r2,zero,8110dde4 <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110d644:	e0bffd04 	addi	r2,fp,-12
8110d648:	01800204 	movi	r6,8
8110d64c:	01400284 	movi	r5,10
8110d650:	1009883a 	mov	r4,r2
8110d654:	11132040 	call	81113204 <memset>
			p_inteiro = inteiro;
8110d658:	e0bffd04 	addi	r2,fp,-12
8110d65c:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110d660:	e0bffc0f 	ldh	r2,-16(fp)
8110d664:	1009883a 	mov	r4,r2
8110d668:	11105300 	call	81110530 <cGetNextChar>
8110d66c:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110d670:	e0bff947 	ldb	r2,-27(fp)
8110d674:	10800084 	addi	r2,r2,2
8110d678:	10c015a8 	cmpgeui	r3,r2,86
8110d67c:	1801cf1e 	bne	r3,zero,8110ddbc <vLoadDefaultETHConf+0x7d4>
8110d680:	100690ba 	slli	r3,r2,2
8110d684:	00a04474 	movhi	r2,33041
8110d688:	10b5a604 	addi	r2,r2,-10600
8110d68c:	1885883a 	add	r2,r3,r2
8110d690:	10800017 	ldw	r2,0(r2)
8110d694:	1000683a 	jmp	r2
8110d698:	8110d830 	cmpltui	r4,r16,17248
8110d69c:	8110d824 	muli	r4,r16,17248
8110d6a0:	8110ddbc 	xorhi	r4,r16,17270
8110d6a4:	8110ddbc 	xorhi	r4,r16,17270
8110d6a8:	8110ddbc 	xorhi	r4,r16,17270
8110d6ac:	8110ddbc 	xorhi	r4,r16,17270
8110d6b0:	8110ddbc 	xorhi	r4,r16,17270
8110d6b4:	8110ddbc 	xorhi	r4,r16,17270
8110d6b8:	8110ddbc 	xorhi	r4,r16,17270
8110d6bc:	8110ddbc 	xorhi	r4,r16,17270
8110d6c0:	8110ddbc 	xorhi	r4,r16,17270
8110d6c4:	8110ddbc 	xorhi	r4,r16,17270
8110d6c8:	8110ddd4 	ori	r4,r16,17271
8110d6cc:	8110ddbc 	xorhi	r4,r16,17270
8110d6d0:	8110ddbc 	xorhi	r4,r16,17270
8110d6d4:	8110ddd4 	ori	r4,r16,17271
8110d6d8:	8110ddbc 	xorhi	r4,r16,17270
8110d6dc:	8110ddbc 	xorhi	r4,r16,17270
8110d6e0:	8110ddbc 	xorhi	r4,r16,17270
8110d6e4:	8110ddbc 	xorhi	r4,r16,17270
8110d6e8:	8110ddbc 	xorhi	r4,r16,17270
8110d6ec:	8110ddbc 	xorhi	r4,r16,17270
8110d6f0:	8110ddbc 	xorhi	r4,r16,17270
8110d6f4:	8110ddbc 	xorhi	r4,r16,17270
8110d6f8:	8110ddbc 	xorhi	r4,r16,17270
8110d6fc:	8110ddbc 	xorhi	r4,r16,17270
8110d700:	8110ddbc 	xorhi	r4,r16,17270
8110d704:	8110ddbc 	xorhi	r4,r16,17270
8110d708:	8110ddbc 	xorhi	r4,r16,17270
8110d70c:	8110ddbc 	xorhi	r4,r16,17270
8110d710:	8110ddbc 	xorhi	r4,r16,17270
8110d714:	8110ddbc 	xorhi	r4,r16,17270
8110d718:	8110ddbc 	xorhi	r4,r16,17270
8110d71c:	8110ddbc 	xorhi	r4,r16,17270
8110d720:	8110ddd4 	ori	r4,r16,17271
8110d724:	8110ddbc 	xorhi	r4,r16,17270
8110d728:	8110ddbc 	xorhi	r4,r16,17270
8110d72c:	8110ddbc 	xorhi	r4,r16,17270
8110d730:	8110ddbc 	xorhi	r4,r16,17270
8110d734:	8110ddbc 	xorhi	r4,r16,17270
8110d738:	8110ddbc 	xorhi	r4,r16,17270
8110d73c:	8110d7f0 	cmpltui	r4,r16,17247
8110d740:	8110ddbc 	xorhi	r4,r16,17270
8110d744:	8110ddbc 	xorhi	r4,r16,17270
8110d748:	8110ddbc 	xorhi	r4,r16,17270
8110d74c:	8110ddbc 	xorhi	r4,r16,17270
8110d750:	8110ddbc 	xorhi	r4,r16,17270
8110d754:	8110ddbc 	xorhi	r4,r16,17270
8110d758:	8110ddbc 	xorhi	r4,r16,17270
8110d75c:	8110ddbc 	xorhi	r4,r16,17270
8110d760:	8110ddbc 	xorhi	r4,r16,17270
8110d764:	8110ddbc 	xorhi	r4,r16,17270
8110d768:	8110ddbc 	xorhi	r4,r16,17270
8110d76c:	8110ddbc 	xorhi	r4,r16,17270
8110d770:	8110ddbc 	xorhi	r4,r16,17270
8110d774:	8110ddbc 	xorhi	r4,r16,17270
8110d778:	8110ddbc 	xorhi	r4,r16,17270
8110d77c:	8110ddbc 	xorhi	r4,r16,17270
8110d780:	8110ddbc 	xorhi	r4,r16,17270
8110d784:	8110ddbc 	xorhi	r4,r16,17270
8110d788:	8110ddbc 	xorhi	r4,r16,17270
8110d78c:	8110ddbc 	xorhi	r4,r16,17270
8110d790:	8110dd84 	addi	r4,r16,17270
8110d794:	8110ddbc 	xorhi	r4,r16,17270
8110d798:	8110ddbc 	xorhi	r4,r16,17270
8110d79c:	8110ddbc 	xorhi	r4,r16,17270
8110d7a0:	8110ddbc 	xorhi	r4,r16,17270
8110d7a4:	8110ddbc 	xorhi	r4,r16,17270
8110d7a8:	8110ddbc 	xorhi	r4,r16,17270
8110d7ac:	8110ddbc 	xorhi	r4,r16,17270
8110d7b0:	8110db84 	addi	r4,r16,17262
8110d7b4:	8110ddbc 	xorhi	r4,r16,17270
8110d7b8:	8110ddbc 	xorhi	r4,r16,17270
8110d7bc:	8110d9e4 	muli	r4,r16,17255
8110d7c0:	8110dcdc 	xori	r4,r16,17267
8110d7c4:	8110d918 	cmpnei	r4,r16,17252
8110d7c8:	8110ddbc 	xorhi	r4,r16,17270
8110d7cc:	8110ddbc 	xorhi	r4,r16,17270
8110d7d0:	8110ddbc 	xorhi	r4,r16,17270
8110d7d4:	8110d848 	cmpgei	r4,r16,17249
8110d7d8:	8110ddbc 	xorhi	r4,r16,17270
8110d7dc:	8110ddbc 	xorhi	r4,r16,17270
8110d7e0:	8110dc54 	ori	r4,r16,17265
8110d7e4:	8110ddbc 	xorhi	r4,r16,17270
8110d7e8:	8110ddbc 	xorhi	r4,r16,17270
8110d7ec:	8110dab4 	orhi	r4,r16,17258
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110d7f0:	e0bffc0f 	ldh	r2,-16(fp)
8110d7f4:	1009883a 	mov	r4,r2
8110d7f8:	11105300 	call	81110530 <cGetNextChar>
8110d7fc:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110d800:	00000406 	br	8110d814 <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110d804:	e0bffc0f 	ldh	r2,-16(fp)
8110d808:	1009883a 	mov	r4,r2
8110d80c:	11105300 	call	81110530 <cGetNextChar>
8110d810:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110d814:	e0bff947 	ldb	r2,-27(fp)
8110d818:	108009d8 	cmpnei	r2,r2,39
8110d81c:	103ff91e 	bne	r2,zero,8110d804 <__reset+0xfb0ed804>
							c = cGetNextChar(siFile);
						}
						break;
8110d820:	00016d06 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110d824:	00800044 	movi	r2,1
8110d828:	e0bff815 	stw	r2,-32(fp)
						break;
8110d82c:	00016a06 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110d830:	01204534 	movhi	r4,33044
8110d834:	213b4704 	addi	r4,r4,-4836
8110d838:	11133cc0 	call	811133cc <printf>
						bEOF = TRUE;
8110d83c:	00800044 	movi	r2,1
8110d840:	e0bff815 	stw	r2,-32(fp)
						break;
8110d844:	00016406 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110d848:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d84c:	e0bffc0f 	ldh	r2,-16(fp)
8110d850:	1009883a 	mov	r4,r2
8110d854:	11105300 	call	81110530 <cGetNextChar>
8110d858:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d85c:	d0e00317 	ldw	r3,-32756(gp)
8110d860:	e0bff947 	ldb	r2,-27(fp)
8110d864:	10800044 	addi	r2,r2,1
8110d868:	1885883a 	add	r2,r3,r2
8110d86c:	10800003 	ldbu	r2,0(r2)
8110d870:	10803fcc 	andi	r2,r2,255
8110d874:	1080010c 	andi	r2,r2,4
8110d878:	10000626 	beq	r2,zero,8110d894 <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110d87c:	e0bffa17 	ldw	r2,-24(fp)
8110d880:	e0fff943 	ldbu	r3,-27(fp)
8110d884:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d888:	e0bffa17 	ldw	r2,-24(fp)
8110d88c:	10800044 	addi	r2,r2,1
8110d890:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110d894:	e0bff947 	ldb	r2,-27(fp)
8110d898:	10800ea0 	cmpeqi	r2,r2,58
8110d89c:	1000031e 	bne	r2,zero,8110d8ac <vLoadDefaultETHConf+0x2c4>
8110d8a0:	e0bff947 	ldb	r2,-27(fp)
8110d8a4:	10800ed8 	cmpnei	r2,r2,59
8110d8a8:	103fe81e 	bne	r2,zero,8110d84c <__reset+0xfb0ed84c>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d8ac:	e0bffa17 	ldw	r2,-24(fp)
8110d8b0:	00c00284 	movi	r3,10
8110d8b4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110d8b8:	e0bff903 	ldbu	r2,-28(fp)
8110d8bc:	10800168 	cmpgeui	r2,r2,5
8110d8c0:	1000021e 	bne	r2,zero,8110d8cc <vLoadDefaultETHConf+0x2e4>
8110d8c4:	e43ff903 	ldbu	r16,-28(fp)
8110d8c8:	00000106 	br	8110d8d0 <vLoadDefaultETHConf+0x2e8>
8110d8cc:	04000144 	movi	r16,5
8110d8d0:	e0bffd04 	addi	r2,fp,-12
8110d8d4:	1009883a 	mov	r4,r2
8110d8d8:	1111ea80 	call	81111ea8 <atoi>
8110d8dc:	1007883a 	mov	r3,r2
8110d8e0:	00a04574 	movhi	r2,33045
8110d8e4:	10b04704 	addi	r2,r2,-16100
8110d8e8:	1405883a 	add	r2,r2,r16
8110d8ec:	10800404 	addi	r2,r2,16
8110d8f0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d8f4:	e0bffd04 	addi	r2,fp,-12
8110d8f8:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d8fc:	e0bff903 	ldbu	r2,-28(fp)
8110d900:	10800044 	addi	r2,r2,1
8110d904:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d908:	e0bff947 	ldb	r2,-27(fp)
8110d90c:	10800ed8 	cmpnei	r2,r2,59
8110d910:	103fce1e 	bne	r2,zero,8110d84c <__reset+0xfb0ed84c>

						break;
8110d914:	00013006 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110d918:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d91c:	e0bffc0f 	ldh	r2,-16(fp)
8110d920:	1009883a 	mov	r4,r2
8110d924:	11105300 	call	81110530 <cGetNextChar>
8110d928:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d92c:	d0e00317 	ldw	r3,-32756(gp)
8110d930:	e0bff947 	ldb	r2,-27(fp)
8110d934:	10800044 	addi	r2,r2,1
8110d938:	1885883a 	add	r2,r3,r2
8110d93c:	10800003 	ldbu	r2,0(r2)
8110d940:	10803fcc 	andi	r2,r2,255
8110d944:	1080010c 	andi	r2,r2,4
8110d948:	10000626 	beq	r2,zero,8110d964 <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110d94c:	e0bffa17 	ldw	r2,-24(fp)
8110d950:	e0fff943 	ldbu	r3,-27(fp)
8110d954:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d958:	e0bffa17 	ldw	r2,-24(fp)
8110d95c:	10800044 	addi	r2,r2,1
8110d960:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d964:	e0bff947 	ldb	r2,-27(fp)
8110d968:	10800ba0 	cmpeqi	r2,r2,46
8110d96c:	1000031e 	bne	r2,zero,8110d97c <vLoadDefaultETHConf+0x394>
8110d970:	e0bff947 	ldb	r2,-27(fp)
8110d974:	10800ed8 	cmpnei	r2,r2,59
8110d978:	103fe81e 	bne	r2,zero,8110d91c <__reset+0xfb0ed91c>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d97c:	e0bffa17 	ldw	r2,-24(fp)
8110d980:	00c00284 	movi	r3,10
8110d984:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110d988:	e0bff903 	ldbu	r2,-28(fp)
8110d98c:	108000e8 	cmpgeui	r2,r2,3
8110d990:	1000021e 	bne	r2,zero,8110d99c <vLoadDefaultETHConf+0x3b4>
8110d994:	e43ff903 	ldbu	r16,-28(fp)
8110d998:	00000106 	br	8110d9a0 <vLoadDefaultETHConf+0x3b8>
8110d99c:	040000c4 	movi	r16,3
8110d9a0:	e0bffd04 	addi	r2,fp,-12
8110d9a4:	1009883a 	mov	r4,r2
8110d9a8:	1111ea80 	call	81111ea8 <atoi>
8110d9ac:	1007883a 	mov	r3,r2
8110d9b0:	00a04574 	movhi	r2,33045
8110d9b4:	10b04704 	addi	r2,r2,-16100
8110d9b8:	1405883a 	add	r2,r2,r16
8110d9bc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d9c0:	e0bffd04 	addi	r2,fp,-12
8110d9c4:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d9c8:	e0bff903 	ldbu	r2,-28(fp)
8110d9cc:	10800044 	addi	r2,r2,1
8110d9d0:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d9d4:	e0bff947 	ldb	r2,-27(fp)
8110d9d8:	10800ed8 	cmpnei	r2,r2,59
8110d9dc:	103fcf1e 	bne	r2,zero,8110d91c <__reset+0xfb0ed91c>

						break;
8110d9e0:	0000fd06 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110d9e4:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d9e8:	e0bffc0f 	ldh	r2,-16(fp)
8110d9ec:	1009883a 	mov	r4,r2
8110d9f0:	11105300 	call	81110530 <cGetNextChar>
8110d9f4:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d9f8:	d0e00317 	ldw	r3,-32756(gp)
8110d9fc:	e0bff947 	ldb	r2,-27(fp)
8110da00:	10800044 	addi	r2,r2,1
8110da04:	1885883a 	add	r2,r3,r2
8110da08:	10800003 	ldbu	r2,0(r2)
8110da0c:	10803fcc 	andi	r2,r2,255
8110da10:	1080010c 	andi	r2,r2,4
8110da14:	10000626 	beq	r2,zero,8110da30 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110da18:	e0bffa17 	ldw	r2,-24(fp)
8110da1c:	e0fff943 	ldbu	r3,-27(fp)
8110da20:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110da24:	e0bffa17 	ldw	r2,-24(fp)
8110da28:	10800044 	addi	r2,r2,1
8110da2c:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110da30:	e0bff947 	ldb	r2,-27(fp)
8110da34:	10800ba0 	cmpeqi	r2,r2,46
8110da38:	1000031e 	bne	r2,zero,8110da48 <vLoadDefaultETHConf+0x460>
8110da3c:	e0bff947 	ldb	r2,-27(fp)
8110da40:	10800ed8 	cmpnei	r2,r2,59
8110da44:	103fe81e 	bne	r2,zero,8110d9e8 <__reset+0xfb0ed9e8>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110da48:	e0bffa17 	ldw	r2,-24(fp)
8110da4c:	00c00284 	movi	r3,10
8110da50:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110da54:	e0bff903 	ldbu	r2,-28(fp)
8110da58:	108000e8 	cmpgeui	r2,r2,3
8110da5c:	1000021e 	bne	r2,zero,8110da68 <vLoadDefaultETHConf+0x480>
8110da60:	e43ff903 	ldbu	r16,-28(fp)
8110da64:	00000106 	br	8110da6c <vLoadDefaultETHConf+0x484>
8110da68:	040000c4 	movi	r16,3
8110da6c:	e0bffd04 	addi	r2,fp,-12
8110da70:	1009883a 	mov	r4,r2
8110da74:	1111ea80 	call	81111ea8 <atoi>
8110da78:	1007883a 	mov	r3,r2
8110da7c:	00a04574 	movhi	r2,33045
8110da80:	10b04704 	addi	r2,r2,-16100
8110da84:	1405883a 	add	r2,r2,r16
8110da88:	10800104 	addi	r2,r2,4
8110da8c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110da90:	e0bffd04 	addi	r2,fp,-12
8110da94:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110da98:	e0bff903 	ldbu	r2,-28(fp)
8110da9c:	10800044 	addi	r2,r2,1
8110daa0:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110daa4:	e0bff947 	ldb	r2,-27(fp)
8110daa8:	10800ed8 	cmpnei	r2,r2,59
8110daac:	103fce1e 	bne	r2,zero,8110d9e8 <__reset+0xfb0ed9e8>

						break;
8110dab0:	0000c906 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110dab4:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110dab8:	e0bffc0f 	ldh	r2,-16(fp)
8110dabc:	1009883a 	mov	r4,r2
8110dac0:	11105300 	call	81110530 <cGetNextChar>
8110dac4:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110dac8:	d0e00317 	ldw	r3,-32756(gp)
8110dacc:	e0bff947 	ldb	r2,-27(fp)
8110dad0:	10800044 	addi	r2,r2,1
8110dad4:	1885883a 	add	r2,r3,r2
8110dad8:	10800003 	ldbu	r2,0(r2)
8110dadc:	10803fcc 	andi	r2,r2,255
8110dae0:	1080010c 	andi	r2,r2,4
8110dae4:	10000626 	beq	r2,zero,8110db00 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110dae8:	e0bffa17 	ldw	r2,-24(fp)
8110daec:	e0fff943 	ldbu	r3,-27(fp)
8110daf0:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110daf4:	e0bffa17 	ldw	r2,-24(fp)
8110daf8:	10800044 	addi	r2,r2,1
8110dafc:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110db00:	e0bff947 	ldb	r2,-27(fp)
8110db04:	10800ba0 	cmpeqi	r2,r2,46
8110db08:	1000031e 	bne	r2,zero,8110db18 <vLoadDefaultETHConf+0x530>
8110db0c:	e0bff947 	ldb	r2,-27(fp)
8110db10:	10800ed8 	cmpnei	r2,r2,59
8110db14:	103fe81e 	bne	r2,zero,8110dab8 <__reset+0xfb0edab8>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110db18:	e0bffa17 	ldw	r2,-24(fp)
8110db1c:	00c00284 	movi	r3,10
8110db20:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110db24:	e0bff903 	ldbu	r2,-28(fp)
8110db28:	108000e8 	cmpgeui	r2,r2,3
8110db2c:	1000021e 	bne	r2,zero,8110db38 <vLoadDefaultETHConf+0x550>
8110db30:	e43ff903 	ldbu	r16,-28(fp)
8110db34:	00000106 	br	8110db3c <vLoadDefaultETHConf+0x554>
8110db38:	040000c4 	movi	r16,3
8110db3c:	e0bffd04 	addi	r2,fp,-12
8110db40:	1009883a 	mov	r4,r2
8110db44:	1111ea80 	call	81111ea8 <atoi>
8110db48:	1007883a 	mov	r3,r2
8110db4c:	00a04574 	movhi	r2,33045
8110db50:	10b04704 	addi	r2,r2,-16100
8110db54:	1405883a 	add	r2,r2,r16
8110db58:	10800204 	addi	r2,r2,8
8110db5c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110db60:	e0bffd04 	addi	r2,fp,-12
8110db64:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110db68:	e0bff903 	ldbu	r2,-28(fp)
8110db6c:	10800044 	addi	r2,r2,1
8110db70:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110db74:	e0bff947 	ldb	r2,-27(fp)
8110db78:	10800ed8 	cmpnei	r2,r2,59
8110db7c:	103fce1e 	bne	r2,zero,8110dab8 <__reset+0xfb0edab8>

						break;
8110db80:	00009506 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110db84:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110db88:	e0bffc0f 	ldh	r2,-16(fp)
8110db8c:	1009883a 	mov	r4,r2
8110db90:	11105300 	call	81110530 <cGetNextChar>
8110db94:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110db98:	d0e00317 	ldw	r3,-32756(gp)
8110db9c:	e0bff947 	ldb	r2,-27(fp)
8110dba0:	10800044 	addi	r2,r2,1
8110dba4:	1885883a 	add	r2,r3,r2
8110dba8:	10800003 	ldbu	r2,0(r2)
8110dbac:	10803fcc 	andi	r2,r2,255
8110dbb0:	1080010c 	andi	r2,r2,4
8110dbb4:	10000626 	beq	r2,zero,8110dbd0 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110dbb8:	e0bffa17 	ldw	r2,-24(fp)
8110dbbc:	e0fff943 	ldbu	r3,-27(fp)
8110dbc0:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110dbc4:	e0bffa17 	ldw	r2,-24(fp)
8110dbc8:	10800044 	addi	r2,r2,1
8110dbcc:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110dbd0:	e0bff947 	ldb	r2,-27(fp)
8110dbd4:	10800ba0 	cmpeqi	r2,r2,46
8110dbd8:	1000031e 	bne	r2,zero,8110dbe8 <vLoadDefaultETHConf+0x600>
8110dbdc:	e0bff947 	ldb	r2,-27(fp)
8110dbe0:	10800ed8 	cmpnei	r2,r2,59
8110dbe4:	103fe81e 	bne	r2,zero,8110db88 <__reset+0xfb0edb88>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110dbe8:	e0bffa17 	ldw	r2,-24(fp)
8110dbec:	00c00284 	movi	r3,10
8110dbf0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110dbf4:	e0bff903 	ldbu	r2,-28(fp)
8110dbf8:	108000e8 	cmpgeui	r2,r2,3
8110dbfc:	1000021e 	bne	r2,zero,8110dc08 <vLoadDefaultETHConf+0x620>
8110dc00:	e43ff903 	ldbu	r16,-28(fp)
8110dc04:	00000106 	br	8110dc0c <vLoadDefaultETHConf+0x624>
8110dc08:	040000c4 	movi	r16,3
8110dc0c:	e0bffd04 	addi	r2,fp,-12
8110dc10:	1009883a 	mov	r4,r2
8110dc14:	1111ea80 	call	81111ea8 <atoi>
8110dc18:	1007883a 	mov	r3,r2
8110dc1c:	00a04574 	movhi	r2,33045
8110dc20:	10b04704 	addi	r2,r2,-16100
8110dc24:	1405883a 	add	r2,r2,r16
8110dc28:	10800304 	addi	r2,r2,12
8110dc2c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110dc30:	e0bffd04 	addi	r2,fp,-12
8110dc34:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110dc38:	e0bff903 	ldbu	r2,-28(fp)
8110dc3c:	10800044 	addi	r2,r2,1
8110dc40:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110dc44:	e0bff947 	ldb	r2,-27(fp)
8110dc48:	10800ed8 	cmpnei	r2,r2,59
8110dc4c:	103fce1e 	bne	r2,zero,8110db88 <__reset+0xfb0edb88>

						break;						
8110dc50:	00006106 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110dc54:	e0bffc0f 	ldh	r2,-16(fp)
8110dc58:	1009883a 	mov	r4,r2
8110dc5c:	11105300 	call	81110530 <cGetNextChar>
8110dc60:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110dc64:	d0e00317 	ldw	r3,-32756(gp)
8110dc68:	e0bff947 	ldb	r2,-27(fp)
8110dc6c:	10800044 	addi	r2,r2,1
8110dc70:	1885883a 	add	r2,r3,r2
8110dc74:	10800003 	ldbu	r2,0(r2)
8110dc78:	10803fcc 	andi	r2,r2,255
8110dc7c:	1080010c 	andi	r2,r2,4
8110dc80:	10000626 	beq	r2,zero,8110dc9c <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110dc84:	e0bffa17 	ldw	r2,-24(fp)
8110dc88:	e0fff943 	ldbu	r3,-27(fp)
8110dc8c:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110dc90:	e0bffa17 	ldw	r2,-24(fp)
8110dc94:	10800044 	addi	r2,r2,1
8110dc98:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110dc9c:	e0bff947 	ldb	r2,-27(fp)
8110dca0:	10800ed8 	cmpnei	r2,r2,59
8110dca4:	103feb1e 	bne	r2,zero,8110dc54 <__reset+0xfb0edc54>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110dca8:	e0bffa17 	ldw	r2,-24(fp)
8110dcac:	00c00284 	movi	r3,10
8110dcb0:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110dcb4:	e0bffd04 	addi	r2,fp,-12
8110dcb8:	1009883a 	mov	r4,r2
8110dcbc:	1111ea80 	call	81111ea8 <atoi>
8110dcc0:	1007883a 	mov	r3,r2
8110dcc4:	00a04574 	movhi	r2,33045
8110dcc8:	10b04704 	addi	r2,r2,-16100
8110dccc:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110dcd0:	e0bffd04 	addi	r2,fp,-12
8110dcd4:	e0bffa15 	stw	r2,-24(fp)

						break;
8110dcd8:	00003f06 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110dcdc:	e0bffc0f 	ldh	r2,-16(fp)
8110dce0:	1009883a 	mov	r4,r2
8110dce4:	11105300 	call	81110530 <cGetNextChar>
8110dce8:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110dcec:	d0e00317 	ldw	r3,-32756(gp)
8110dcf0:	e0bff947 	ldb	r2,-27(fp)
8110dcf4:	10800044 	addi	r2,r2,1
8110dcf8:	1885883a 	add	r2,r3,r2
8110dcfc:	10800003 	ldbu	r2,0(r2)
8110dd00:	10803fcc 	andi	r2,r2,255
8110dd04:	1080010c 	andi	r2,r2,4
8110dd08:	10000626 	beq	r2,zero,8110dd24 <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110dd0c:	e0bffa17 	ldw	r2,-24(fp)
8110dd10:	e0fff943 	ldbu	r3,-27(fp)
8110dd14:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110dd18:	e0bffa17 	ldw	r2,-24(fp)
8110dd1c:	10800044 	addi	r2,r2,1
8110dd20:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110dd24:	e0bff947 	ldb	r2,-27(fp)
8110dd28:	10800ed8 	cmpnei	r2,r2,59
8110dd2c:	103feb1e 	bne	r2,zero,8110dcdc <__reset+0xfb0edcdc>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110dd30:	e0bffa17 	ldw	r2,-24(fp)
8110dd34:	00c00284 	movi	r3,10
8110dd38:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110dd3c:	e0bffd04 	addi	r2,fp,-12
8110dd40:	1009883a 	mov	r4,r2
8110dd44:	1111ea80 	call	81111ea8 <atoi>
8110dd48:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110dd4c:	e0bffc8f 	ldh	r2,-14(fp)
8110dd50:	10800058 	cmpnei	r2,r2,1
8110dd54:	1000051e 	bne	r2,zero,8110dd6c <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110dd58:	00a04574 	movhi	r2,33045
8110dd5c:	10b04704 	addi	r2,r2,-16100
8110dd60:	00c00044 	movi	r3,1
8110dd64:	10c00615 	stw	r3,24(r2)
8110dd68:	00000306 	br	8110dd78 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110dd6c:	00a04574 	movhi	r2,33045
8110dd70:	10b04704 	addi	r2,r2,-16100
8110dd74:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110dd78:	e0bffd04 	addi	r2,fp,-12
8110dd7c:	e0bffa15 	stw	r2,-24(fp)

						break;
8110dd80:	00001506 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110dd84:	e0bffc0f 	ldh	r2,-16(fp)
8110dd88:	1009883a 	mov	r4,r2
8110dd8c:	11104f00 	call	811104f0 <siCloseFile>
8110dd90:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110dd94:	e0bffb17 	ldw	r2,-20(fp)
8110dd98:	1000031e 	bne	r2,zero,8110dda8 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110dd9c:	01204534 	movhi	r4,33044
8110dda0:	213b4c04 	addi	r4,r4,-4816
8110dda4:	11136500 	call	81113650 <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110dda8:	00800044 	movi	r2,1
8110ddac:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110ddb0:	00800044 	movi	r2,1
8110ddb4:	e0bff715 	stw	r2,-36(fp)
						break;
8110ddb8:	00000706 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110ddbc:	e0bff947 	ldb	r2,-27(fp)
8110ddc0:	100b883a 	mov	r5,r2
8110ddc4:	01204534 	movhi	r4,33044
8110ddc8:	213b5404 	addi	r4,r4,-4784
8110ddcc:	11133cc0 	call	811133cc <printf>
						break;
8110ddd0:	00000106 	br	8110ddd8 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110ddd4:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110ddd8:	e0bff817 	ldw	r2,-32(fp)
8110dddc:	103e2026 	beq	r2,zero,8110d660 <__reset+0xfb0ed660>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110dde0:	00000706 	br	8110de00 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110dde4:	01204534 	movhi	r4,33044
8110dde8:	213b6104 	addi	r4,r4,-4732
8110ddec:	11136500 	call	81113650 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110ddf0:	00000306 	br	8110de00 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110ddf4:	01204534 	movhi	r4,33044
8110ddf8:	213b6a04 	addi	r4,r4,-4696
8110ddfc:	11136500 	call	81113650 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110de00:	e0bff717 	ldw	r2,-36(fp)
8110de04:	1000541e 	bne	r2,zero,8110df58 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110de08:	01204534 	movhi	r4,33044
8110de0c:	213b6d04 	addi	r4,r4,-4684
8110de10:	11136500 	call	81113650 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110de14:	01604534 	movhi	r5,33044
8110de18:	297b4504 	addi	r5,r5,-4844
8110de1c:	01204534 	movhi	r4,33044
8110de20:	213b8104 	addi	r4,r4,-4604
8110de24:	11133cc0 	call	811133cc <printf>


		xConfEth.siPortPUS = 17000;
8110de28:	00a04574 	movhi	r2,33045
8110de2c:	10b04704 	addi	r2,r2,-16100
8110de30:	00d09a04 	movi	r3,17000
8110de34:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110de38:	00a04574 	movhi	r2,33045
8110de3c:	10b04704 	addi	r2,r2,-16100
8110de40:	00fff004 	movi	r3,-64
8110de44:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110de48:	00a04574 	movhi	r2,33045
8110de4c:	10b04704 	addi	r2,r2,-16100
8110de50:	00ffea04 	movi	r3,-88
8110de54:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110de58:	00a04574 	movhi	r2,33045
8110de5c:	10b04704 	addi	r2,r2,-16100
8110de60:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110de64:	00a04574 	movhi	r2,33045
8110de68:	10b04704 	addi	r2,r2,-16100
8110de6c:	00c00144 	movi	r3,5
8110de70:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110de74:	00a04574 	movhi	r2,33045
8110de78:	10b04704 	addi	r2,r2,-16100
8110de7c:	00fff004 	movi	r3,-64
8110de80:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110de84:	00a04574 	movhi	r2,33045
8110de88:	10b04704 	addi	r2,r2,-16100
8110de8c:	00ffea04 	movi	r3,-88
8110de90:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110de94:	00a04574 	movhi	r2,33045
8110de98:	10b04704 	addi	r2,r2,-16100
8110de9c:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110dea0:	00a04574 	movhi	r2,33045
8110dea4:	10b04704 	addi	r2,r2,-16100
8110dea8:	00c00044 	movi	r3,1
8110deac:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110deb0:	00a04574 	movhi	r2,33045
8110deb4:	10b04704 	addi	r2,r2,-16100
8110deb8:	00ffffc4 	movi	r3,-1
8110debc:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110dec0:	00a04574 	movhi	r2,33045
8110dec4:	10b04704 	addi	r2,r2,-16100
8110dec8:	00ffffc4 	movi	r3,-1
8110decc:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110ded0:	00a04574 	movhi	r2,33045
8110ded4:	10b04704 	addi	r2,r2,-16100
8110ded8:	00ffffc4 	movi	r3,-1
8110dedc:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110dee0:	00a04574 	movhi	r2,33045
8110dee4:	10b04704 	addi	r2,r2,-16100
8110dee8:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110deec:	00a04574 	movhi	r2,33045
8110def0:	10b04704 	addi	r2,r2,-16100
8110def4:	00ffff04 	movi	r3,-4
8110def8:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110defc:	00a04574 	movhi	r2,33045
8110df00:	10b04704 	addi	r2,r2,-16100
8110df04:	00fffdc4 	movi	r3,-9
8110df08:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110df0c:	00a04574 	movhi	r2,33045
8110df10:	10b04704 	addi	r2,r2,-16100
8110df14:	00c018c4 	movi	r3,99
8110df18:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110df1c:	00a04574 	movhi	r2,33045
8110df20:	10b04704 	addi	r2,r2,-16100
8110df24:	00c01344 	movi	r3,77
8110df28:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110df2c:	00a04574 	movhi	r2,33045
8110df30:	10b04704 	addi	r2,r2,-16100
8110df34:	00c007c4 	movi	r3,31
8110df38:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110df3c:	00a04574 	movhi	r2,33045
8110df40:	10b04704 	addi	r2,r2,-16100
8110df44:	00c01084 	movi	r3,66
8110df48:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110df4c:	00a04574 	movhi	r2,33045
8110df50:	10b04704 	addi	r2,r2,-16100
8110df54:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110df58:	e0bff717 	ldw	r2,-36(fp)
}
8110df5c:	e6ffff04 	addi	sp,fp,-4
8110df60:	dfc00217 	ldw	ra,8(sp)
8110df64:	df000117 	ldw	fp,4(sp)
8110df68:	dc000017 	ldw	r16,0(sp)
8110df6c:	dec00304 	addi	sp,sp,12
8110df70:	f800283a 	ret

8110df74 <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110df74:	defff004 	addi	sp,sp,-64
8110df78:	de00012e 	bgeu	sp,et,8110df80 <vShowEthConfig+0xc>
8110df7c:	003b68fa 	trap	3
8110df80:	dfc00f15 	stw	ra,60(sp)
8110df84:	df000e15 	stw	fp,56(sp)
8110df88:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110df8c:	d0a04f17 	ldw	r2,-32452(gp)
8110df90:	100f883a 	mov	r7,r2
8110df94:	018007c4 	movi	r6,31
8110df98:	01400044 	movi	r5,1
8110df9c:	01204534 	movhi	r4,33044
8110dfa0:	213b8704 	addi	r4,r4,-4580
8110dfa4:	11126a00 	call	811126a0 <fwrite>

		memset(buffer,0,40);
8110dfa8:	01800a04 	movi	r6,40
8110dfac:	000b883a 	mov	r5,zero
8110dfb0:	e13ff604 	addi	r4,fp,-40
8110dfb4:	11132040 	call	81113204 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110dfb8:	00a04574 	movhi	r2,33045
8110dfbc:	10b04704 	addi	r2,r2,-16100
8110dfc0:	10800403 	ldbu	r2,16(r2)
8110dfc4:	11803fcc 	andi	r6,r2,255
8110dfc8:	00a04574 	movhi	r2,33045
8110dfcc:	10b04704 	addi	r2,r2,-16100
8110dfd0:	10800443 	ldbu	r2,17(r2)
8110dfd4:	11c03fcc 	andi	r7,r2,255
8110dfd8:	00a04574 	movhi	r2,33045
8110dfdc:	10b04704 	addi	r2,r2,-16100
8110dfe0:	10800483 	ldbu	r2,18(r2)
8110dfe4:	10c03fcc 	andi	r3,r2,255
8110dfe8:	00a04574 	movhi	r2,33045
8110dfec:	10b04704 	addi	r2,r2,-16100
8110dff0:	108004c3 	ldbu	r2,19(r2)
8110dff4:	11003fcc 	andi	r4,r2,255
8110dff8:	00a04574 	movhi	r2,33045
8110dffc:	10b04704 	addi	r2,r2,-16100
8110e000:	10800503 	ldbu	r2,20(r2)
8110e004:	11403fcc 	andi	r5,r2,255
8110e008:	00a04574 	movhi	r2,33045
8110e00c:	10b04704 	addi	r2,r2,-16100
8110e010:	10800543 	ldbu	r2,21(r2)
8110e014:	10803fcc 	andi	r2,r2,255
8110e018:	d8800315 	stw	r2,12(sp)
8110e01c:	d9400215 	stw	r5,8(sp)
8110e020:	d9000115 	stw	r4,4(sp)
8110e024:	d8c00015 	stw	r3,0(sp)
8110e028:	01604534 	movhi	r5,33044
8110e02c:	297b8f04 	addi	r5,r5,-4548
8110e030:	e13ff604 	addi	r4,fp,-40
8110e034:	11139940 	call	81113994 <sprintf>
		debug(fp, buffer );
8110e038:	d0a04f17 	ldw	r2,-32452(gp)
8110e03c:	e17ff604 	addi	r5,fp,-40
8110e040:	1009883a 	mov	r4,r2
8110e044:	11120040 	call	81112004 <fprintf>

		memset(buffer,0,40);
8110e048:	01800a04 	movi	r6,40
8110e04c:	000b883a 	mov	r5,zero
8110e050:	e13ff604 	addi	r4,fp,-40
8110e054:	11132040 	call	81113204 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110e058:	00a04574 	movhi	r2,33045
8110e05c:	10b04704 	addi	r2,r2,-16100
8110e060:	10800003 	ldbu	r2,0(r2)
8110e064:	11003fcc 	andi	r4,r2,255
8110e068:	00a04574 	movhi	r2,33045
8110e06c:	10b04704 	addi	r2,r2,-16100
8110e070:	10800043 	ldbu	r2,1(r2)
8110e074:	11403fcc 	andi	r5,r2,255
8110e078:	00a04574 	movhi	r2,33045
8110e07c:	10b04704 	addi	r2,r2,-16100
8110e080:	10800083 	ldbu	r2,2(r2)
8110e084:	10c03fcc 	andi	r3,r2,255
8110e088:	00a04574 	movhi	r2,33045
8110e08c:	10b04704 	addi	r2,r2,-16100
8110e090:	108000c3 	ldbu	r2,3(r2)
8110e094:	10803fcc 	andi	r2,r2,255
8110e098:	d8800115 	stw	r2,4(sp)
8110e09c:	d8c00015 	stw	r3,0(sp)
8110e0a0:	280f883a 	mov	r7,r5
8110e0a4:	200d883a 	mov	r6,r4
8110e0a8:	01604534 	movhi	r5,33044
8110e0ac:	297b9804 	addi	r5,r5,-4512
8110e0b0:	e13ff604 	addi	r4,fp,-40
8110e0b4:	11139940 	call	81113994 <sprintf>
		debug(fp, buffer );
8110e0b8:	d0a04f17 	ldw	r2,-32452(gp)
8110e0bc:	e17ff604 	addi	r5,fp,-40
8110e0c0:	1009883a 	mov	r4,r2
8110e0c4:	11120040 	call	81112004 <fprintf>

		memset(buffer,0,40);
8110e0c8:	01800a04 	movi	r6,40
8110e0cc:	000b883a 	mov	r5,zero
8110e0d0:	e13ff604 	addi	r4,fp,-40
8110e0d4:	11132040 	call	81113204 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110e0d8:	00a04574 	movhi	r2,33045
8110e0dc:	10b04704 	addi	r2,r2,-16100
8110e0e0:	10800103 	ldbu	r2,4(r2)
8110e0e4:	11003fcc 	andi	r4,r2,255
8110e0e8:	00a04574 	movhi	r2,33045
8110e0ec:	10b04704 	addi	r2,r2,-16100
8110e0f0:	10800143 	ldbu	r2,5(r2)
8110e0f4:	11403fcc 	andi	r5,r2,255
8110e0f8:	00a04574 	movhi	r2,33045
8110e0fc:	10b04704 	addi	r2,r2,-16100
8110e100:	10800183 	ldbu	r2,6(r2)
8110e104:	10c03fcc 	andi	r3,r2,255
8110e108:	00a04574 	movhi	r2,33045
8110e10c:	10b04704 	addi	r2,r2,-16100
8110e110:	108001c3 	ldbu	r2,7(r2)
8110e114:	10803fcc 	andi	r2,r2,255
8110e118:	d8800115 	stw	r2,4(sp)
8110e11c:	d8c00015 	stw	r3,0(sp)
8110e120:	280f883a 	mov	r7,r5
8110e124:	200d883a 	mov	r6,r4
8110e128:	01604534 	movhi	r5,33044
8110e12c:	297b9e04 	addi	r5,r5,-4488
8110e130:	e13ff604 	addi	r4,fp,-40
8110e134:	11139940 	call	81113994 <sprintf>
		debug(fp, buffer );
8110e138:	d0a04f17 	ldw	r2,-32452(gp)
8110e13c:	e17ff604 	addi	r5,fp,-40
8110e140:	1009883a 	mov	r4,r2
8110e144:	11120040 	call	81112004 <fprintf>

		memset(buffer,0,40);
8110e148:	01800a04 	movi	r6,40
8110e14c:	000b883a 	mov	r5,zero
8110e150:	e13ff604 	addi	r4,fp,-40
8110e154:	11132040 	call	81113204 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110e158:	00a04574 	movhi	r2,33045
8110e15c:	10b04704 	addi	r2,r2,-16100
8110e160:	10800203 	ldbu	r2,8(r2)
8110e164:	11003fcc 	andi	r4,r2,255
8110e168:	00a04574 	movhi	r2,33045
8110e16c:	10b04704 	addi	r2,r2,-16100
8110e170:	10800243 	ldbu	r2,9(r2)
8110e174:	11403fcc 	andi	r5,r2,255
8110e178:	00a04574 	movhi	r2,33045
8110e17c:	10b04704 	addi	r2,r2,-16100
8110e180:	10800283 	ldbu	r2,10(r2)
8110e184:	10c03fcc 	andi	r3,r2,255
8110e188:	00a04574 	movhi	r2,33045
8110e18c:	10b04704 	addi	r2,r2,-16100
8110e190:	108002c3 	ldbu	r2,11(r2)
8110e194:	10803fcc 	andi	r2,r2,255
8110e198:	d8800115 	stw	r2,4(sp)
8110e19c:	d8c00015 	stw	r3,0(sp)
8110e1a0:	280f883a 	mov	r7,r5
8110e1a4:	200d883a 	mov	r6,r4
8110e1a8:	01604534 	movhi	r5,33044
8110e1ac:	297ba504 	addi	r5,r5,-4460
8110e1b0:	e13ff604 	addi	r4,fp,-40
8110e1b4:	11139940 	call	81113994 <sprintf>
		debug(fp, buffer );
8110e1b8:	d0a04f17 	ldw	r2,-32452(gp)
8110e1bc:	e17ff604 	addi	r5,fp,-40
8110e1c0:	1009883a 	mov	r4,r2
8110e1c4:	11120040 	call	81112004 <fprintf>

		memset(buffer,0,40);
8110e1c8:	01800a04 	movi	r6,40
8110e1cc:	000b883a 	mov	r5,zero
8110e1d0:	e13ff604 	addi	r4,fp,-40
8110e1d4:	11132040 	call	81113204 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110e1d8:	00a04574 	movhi	r2,33045
8110e1dc:	10b04704 	addi	r2,r2,-16100
8110e1e0:	10800303 	ldbu	r2,12(r2)
8110e1e4:	11003fcc 	andi	r4,r2,255
8110e1e8:	00a04574 	movhi	r2,33045
8110e1ec:	10b04704 	addi	r2,r2,-16100
8110e1f0:	10800343 	ldbu	r2,13(r2)
8110e1f4:	11403fcc 	andi	r5,r2,255
8110e1f8:	00a04574 	movhi	r2,33045
8110e1fc:	10b04704 	addi	r2,r2,-16100
8110e200:	10800383 	ldbu	r2,14(r2)
8110e204:	10c03fcc 	andi	r3,r2,255
8110e208:	00a04574 	movhi	r2,33045
8110e20c:	10b04704 	addi	r2,r2,-16100
8110e210:	108003c3 	ldbu	r2,15(r2)
8110e214:	10803fcc 	andi	r2,r2,255
8110e218:	d8800115 	stw	r2,4(sp)
8110e21c:	d8c00015 	stw	r3,0(sp)
8110e220:	280f883a 	mov	r7,r5
8110e224:	200d883a 	mov	r6,r4
8110e228:	01604534 	movhi	r5,33044
8110e22c:	297bac04 	addi	r5,r5,-4432
8110e230:	e13ff604 	addi	r4,fp,-40
8110e234:	11139940 	call	81113994 <sprintf>
		debug(fp, buffer );
8110e238:	d0a04f17 	ldw	r2,-32452(gp)
8110e23c:	e17ff604 	addi	r5,fp,-40
8110e240:	1009883a 	mov	r4,r2
8110e244:	11120040 	call	81112004 <fprintf>

		memset(buffer,0,40);
8110e248:	01800a04 	movi	r6,40
8110e24c:	000b883a 	mov	r5,zero
8110e250:	e13ff604 	addi	r4,fp,-40
8110e254:	11132040 	call	81113204 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110e258:	00a04574 	movhi	r2,33045
8110e25c:	10b04704 	addi	r2,r2,-16100
8110e260:	1080058b 	ldhu	r2,22(r2)
8110e264:	10bfffcc 	andi	r2,r2,65535
8110e268:	100d883a 	mov	r6,r2
8110e26c:	01604534 	movhi	r5,33044
8110e270:	297bb304 	addi	r5,r5,-4404
8110e274:	e13ff604 	addi	r4,fp,-40
8110e278:	11139940 	call	81113994 <sprintf>
		debug(fp, buffer );
8110e27c:	d0a04f17 	ldw	r2,-32452(gp)
8110e280:	e17ff604 	addi	r5,fp,-40
8110e284:	1009883a 	mov	r4,r2
8110e288:	11120040 	call	81112004 <fprintf>

	}
8110e28c:	0001883a 	nop
8110e290:	e037883a 	mov	sp,fp
8110e294:	dfc00117 	ldw	ra,4(sp)
8110e298:	df000017 	ldw	fp,0(sp)
8110e29c:	dec00204 	addi	sp,sp,8
8110e2a0:	f800283a 	ret

8110e2a4 <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110e2a4:	defffb04 	addi	sp,sp,-20
8110e2a8:	de00012e 	bgeu	sp,et,8110e2b0 <ucCrc8+0xc>
8110e2ac:	003b68fa 	trap	3
8110e2b0:	df000415 	stw	fp,16(sp)
8110e2b4:	df000404 	addi	fp,sp,16
8110e2b8:	e13ffd15 	stw	r4,-12(fp)
8110e2bc:	e17ffe15 	stw	r5,-8(fp)
8110e2c0:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110e2c4:	e0bffe17 	ldw	r2,-8(fp)
8110e2c8:	1000021e 	bne	r2,zero,8110e2d4 <ucCrc8+0x30>
        return 0;
8110e2cc:	0005883a 	mov	r2,zero
8110e2d0:	00001906 	br	8110e338 <ucCrc8+0x94>
    crc &= 0xff;
8110e2d4:	e0bffd17 	ldw	r2,-12(fp)
8110e2d8:	10803fcc 	andi	r2,r2,255
8110e2dc:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110e2e0:	e0fffe17 	ldw	r3,-8(fp)
8110e2e4:	e0bfff17 	ldw	r2,-4(fp)
8110e2e8:	1885883a 	add	r2,r3,r2
8110e2ec:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110e2f0:	00000d06 	br	8110e328 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110e2f4:	e0bffe17 	ldw	r2,-8(fp)
8110e2f8:	10c00044 	addi	r3,r2,1
8110e2fc:	e0fffe15 	stw	r3,-8(fp)
8110e300:	10800003 	ldbu	r2,0(r2)
8110e304:	10c03fcc 	andi	r3,r2,255
8110e308:	e0bffd17 	ldw	r2,-12(fp)
8110e30c:	1886f03a 	xor	r3,r3,r2
8110e310:	00a04534 	movhi	r2,33044
8110e314:	10bbb6c4 	addi	r2,r2,-4389
8110e318:	10c5883a 	add	r2,r2,r3
8110e31c:	10800003 	ldbu	r2,0(r2)
8110e320:	10803fcc 	andi	r2,r2,255
8110e324:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110e328:	e0fffe17 	ldw	r3,-8(fp)
8110e32c:	e0bffc17 	ldw	r2,-16(fp)
8110e330:	18bff036 	bltu	r3,r2,8110e2f4 <__reset+0xfb0ee2f4>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110e334:	e0bffd17 	ldw	r2,-12(fp)
}
8110e338:	e037883a 	mov	sp,fp
8110e33c:	df000017 	ldw	fp,0(sp)
8110e340:	dec00104 	addi	sp,sp,4
8110e344:	f800283a 	ret

8110e348 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110e348:	defffb04 	addi	sp,sp,-20
8110e34c:	de00012e 	bgeu	sp,et,8110e354 <ucCrc8wInit+0xc>
8110e350:	003b68fa 	trap	3
8110e354:	dfc00415 	stw	ra,16(sp)
8110e358:	df000315 	stw	fp,12(sp)
8110e35c:	df000304 	addi	fp,sp,12
8110e360:	e13ffe15 	stw	r4,-8(fp)
8110e364:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;

	crc = ucCrc8(0, NULL, 0);
8110e368:	000d883a 	mov	r6,zero
8110e36c:	000b883a 	mov	r5,zero
8110e370:	0009883a 	mov	r4,zero
8110e374:	110e2a40 	call	8110e2a4 <ucCrc8>
8110e378:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110e37c:	e0bffd03 	ldbu	r2,-12(fp)
8110e380:	e1bfff17 	ldw	r6,-4(fp)
8110e384:	e17ffe17 	ldw	r5,-8(fp)
8110e388:	1009883a 	mov	r4,r2
8110e38c:	110e2a40 	call	8110e2a4 <ucCrc8>
}
8110e390:	e037883a 	mov	sp,fp
8110e394:	dfc00117 	ldw	ra,4(sp)
8110e398:	df000017 	ldw	fp,0(sp)
8110e39c:	dec00204 	addi	sp,sp,8
8110e3a0:	f800283a 	ret

8110e3a4 <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110e3a4:	defff904 	addi	sp,sp,-28
8110e3a8:	de00012e 	bgeu	sp,et,8110e3b0 <printErrorTask+0xc>
8110e3ac:	003b68fa 	trap	3
8110e3b0:	dfc00615 	stw	ra,24(sp)
8110e3b4:	df000515 	stw	fp,20(sp)
8110e3b8:	df000504 	addi	fp,sp,20
8110e3bc:	2005883a 	mov	r2,r4
8110e3c0:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110e3c4:	e03ffb15 	stw	zero,-20(fp)
8110e3c8:	e03ffc15 	stw	zero,-16(fp)
8110e3cc:	e03ffd15 	stw	zero,-12(fp)
8110e3d0:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110e3d4:	e0bfff03 	ldbu	r2,-4(fp)
8110e3d8:	100d883a 	mov	r6,r2
8110e3dc:	01604534 	movhi	r5,33044
8110e3e0:	297bf704 	addi	r5,r5,-4132
8110e3e4:	e13ffb04 	addi	r4,fp,-20
8110e3e8:	11139940 	call	81113994 <sprintf>
		debug(fp, buffer);
8110e3ec:	d0a04f17 	ldw	r2,-32452(gp)
8110e3f0:	e17ffb04 	addi	r5,fp,-20
8110e3f4:	1009883a 	mov	r4,r2
8110e3f8:	11120040 	call	81112004 <fprintf>
	}
8110e3fc:	0001883a 	nop
8110e400:	e037883a 	mov	sp,fp
8110e404:	dfc00117 	ldw	ra,4(sp)
8110e408:	df000017 	ldw	fp,0(sp)
8110e40c:	dec00204 	addi	sp,sp,8
8110e410:	f800283a 	ret

8110e414 <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110e414:	defffd04 	addi	sp,sp,-12
8110e418:	de00012e 	bgeu	sp,et,8110e420 <vFailCreateMutexSResources+0xc>
8110e41c:	003b68fa 	trap	3
8110e420:	dfc00215 	stw	ra,8(sp)
8110e424:	df000115 	stw	fp,4(sp)
8110e428:	df000104 	addi	fp,sp,4
8110e42c:	2005883a 	mov	r2,r4
8110e430:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)\n");
8110e434:	d0a04f17 	ldw	r2,-32452(gp)
8110e438:	100f883a 	mov	r7,r2
8110e43c:	018008c4 	movi	r6,35
8110e440:	01400044 	movi	r5,1
8110e444:	01204534 	movhi	r4,33044
8110e448:	213bfa04 	addi	r4,r4,-4120
8110e44c:	11126a00 	call	811126a0 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110e450:	e0bfff03 	ldbu	r2,-4(fp)
8110e454:	1009883a 	mov	r4,r2
8110e458:	110e3a40 	call	8110e3a4 <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e45c:	0001883a 	nop
8110e460:	e037883a 	mov	sp,fp
8110e464:	dfc00117 	ldw	ra,4(sp)
8110e468:	df000017 	ldw	fp,0(sp)
8110e46c:	dec00204 	addi	sp,sp,8
8110e470:	f800283a 	ret

8110e474 <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110e474:	defffe04 	addi	sp,sp,-8
8110e478:	de00012e 	bgeu	sp,et,8110e480 <vFailCreateSemaphoreResources+0xc>
8110e47c:	003b68fa 	trap	3
8110e480:	dfc00115 	stw	ra,4(sp)
8110e484:	df000015 	stw	fp,0(sp)
8110e488:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)\n");
8110e48c:	d0a04f17 	ldw	r2,-32452(gp)
8110e490:	100f883a 	mov	r7,r2
8110e494:	01800984 	movi	r6,38
8110e498:	01400044 	movi	r5,1
8110e49c:	01204534 	movhi	r4,33044
8110e4a0:	213c0304 	addi	r4,r4,-4084
8110e4a4:	11126a00 	call	811126a0 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e4a8:	0001883a 	nop
8110e4ac:	e037883a 	mov	sp,fp
8110e4b0:	dfc00117 	ldw	ra,4(sp)
8110e4b4:	df000017 	ldw	fp,0(sp)
8110e4b8:	dec00204 	addi	sp,sp,8
8110e4bc:	f800283a 	ret

8110e4c0 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110e4c0:	defffe04 	addi	sp,sp,-8
8110e4c4:	de00012e 	bgeu	sp,et,8110e4cc <vFailTestCriticasParts+0xc>
8110e4c8:	003b68fa 	trap	3
8110e4cc:	dfc00115 	stw	ra,4(sp)
8110e4d0:	df000015 	stw	fp,0(sp)
8110e4d4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)\n");
8110e4d8:	d0a04f17 	ldw	r2,-32452(gp)
8110e4dc:	100f883a 	mov	r7,r2
8110e4e0:	018007c4 	movi	r6,31
8110e4e4:	01400044 	movi	r5,1
8110e4e8:	01204534 	movhi	r4,33044
8110e4ec:	213c0d04 	addi	r4,r4,-4044
8110e4f0:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e4f4:	0001883a 	nop
8110e4f8:	e037883a 	mov	sp,fp
8110e4fc:	dfc00117 	ldw	ra,4(sp)
8110e500:	df000017 	ldw	fp,0(sp)
8110e504:	dec00204 	addi	sp,sp,8
8110e508:	f800283a 	ret

8110e50c <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110e50c:	defffe04 	addi	sp,sp,-8
8110e510:	de00012e 	bgeu	sp,et,8110e518 <vFailSendxSemCommInit+0xc>
8110e514:	003b68fa 	trap	3
8110e518:	dfc00115 	stw	ra,4(sp)
8110e51c:	df000015 	stw	fp,0(sp)
8110e520:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110e524:	d0a04f17 	ldw	r2,-32452(gp)
8110e528:	100f883a 	mov	r7,r2
8110e52c:	01800744 	movi	r6,29
8110e530:	01400044 	movi	r5,1
8110e534:	01204534 	movhi	r4,33044
8110e538:	213c1504 	addi	r4,r4,-4012
8110e53c:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)\n");
8110e540:	d0a04f17 	ldw	r2,-32452(gp)
8110e544:	100f883a 	mov	r7,r2
8110e548:	01800a44 	movi	r6,41
8110e54c:	01400044 	movi	r5,1
8110e550:	01204534 	movhi	r4,33044
8110e554:	213c1d04 	addi	r4,r4,-3980
8110e558:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e55c:	0001883a 	nop
8110e560:	e037883a 	mov	sp,fp
8110e564:	dfc00117 	ldw	ra,4(sp)
8110e568:	df000017 	ldw	fp,0(sp)
8110e56c:	dec00204 	addi	sp,sp,8
8110e570:	f800283a 	ret

8110e574 <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110e574:	defffe04 	addi	sp,sp,-8
8110e578:	de00012e 	bgeu	sp,et,8110e580 <vFailSendPreParsedSemaphore+0xc>
8110e57c:	003b68fa 	trap	3
8110e580:	dfc00115 	stw	ra,4(sp)
8110e584:	df000015 	stw	fp,0(sp)
8110e588:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)\n");
8110e58c:	d0a04f17 	ldw	r2,-32452(gp)
8110e590:	100f883a 	mov	r7,r2
8110e594:	01800904 	movi	r6,36
8110e598:	01400044 	movi	r5,1
8110e59c:	01204534 	movhi	r4,33044
8110e5a0:	213c2804 	addi	r4,r4,-3936
8110e5a4:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e5a8:	0001883a 	nop
8110e5ac:	e037883a 	mov	sp,fp
8110e5b0:	dfc00117 	ldw	ra,4(sp)
8110e5b4:	df000017 	ldw	fp,0(sp)
8110e5b8:	dec00204 	addi	sp,sp,8
8110e5bc:	f800283a 	ret

8110e5c0 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110e5c0:	defffe04 	addi	sp,sp,-8
8110e5c4:	de00012e 	bgeu	sp,et,8110e5cc <vFailSendPreAckReceiverSemaphore+0xc>
8110e5c8:	003b68fa 	trap	3
8110e5cc:	dfc00115 	stw	ra,4(sp)
8110e5d0:	df000015 	stw	fp,0(sp)
8110e5d4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)\n");
8110e5d8:	d0a04f17 	ldw	r2,-32452(gp)
8110e5dc:	100f883a 	mov	r7,r2
8110e5e0:	01800a44 	movi	r6,41
8110e5e4:	01400044 	movi	r5,1
8110e5e8:	01204534 	movhi	r4,33044
8110e5ec:	213c3204 	addi	r4,r4,-3896
8110e5f0:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e5f4:	0001883a 	nop
8110e5f8:	e037883a 	mov	sp,fp
8110e5fc:	dfc00117 	ldw	ra,4(sp)
8110e600:	df000017 	ldw	fp,0(sp)
8110e604:	dec00204 	addi	sp,sp,8
8110e608:	f800283a 	ret

8110e60c <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110e60c:	defffe04 	addi	sp,sp,-8
8110e610:	de00012e 	bgeu	sp,et,8110e618 <vFailSendPreAckSenderSemaphore+0xc>
8110e614:	003b68fa 	trap	3
8110e618:	dfc00115 	stw	ra,4(sp)
8110e61c:	df000015 	stw	fp,0(sp)
8110e620:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)\n");
8110e624:	d0a04f17 	ldw	r2,-32452(gp)
8110e628:	100f883a 	mov	r7,r2
8110e62c:	018009c4 	movi	r6,39
8110e630:	01400044 	movi	r5,1
8110e634:	01204534 	movhi	r4,33044
8110e638:	213c3d04 	addi	r4,r4,-3852
8110e63c:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e640:	0001883a 	nop
8110e644:	e037883a 	mov	sp,fp
8110e648:	dfc00117 	ldw	ra,4(sp)
8110e64c:	df000017 	ldw	fp,0(sp)
8110e650:	dec00204 	addi	sp,sp,8
8110e654:	f800283a 	ret

8110e658 <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110e658:	defffe04 	addi	sp,sp,-8
8110e65c:	de00012e 	bgeu	sp,et,8110e664 <vFailGetCountSemaphoreSenderTask+0xc>
8110e660:	003b68fa 	trap	3
8110e664:	dfc00115 	stw	ra,4(sp)
8110e668:	df000015 	stw	fp,0(sp)
8110e66c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)\n");
8110e670:	d0a04f17 	ldw	r2,-32452(gp)
8110e674:	100f883a 	mov	r7,r2
8110e678:	01800a44 	movi	r6,41
8110e67c:	01400044 	movi	r5,1
8110e680:	01204534 	movhi	r4,33044
8110e684:	213c4704 	addi	r4,r4,-3812
8110e688:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110e68c:	d0a04f17 	ldw	r2,-32452(gp)
8110e690:	100f883a 	mov	r7,r2
8110e694:	01801104 	movi	r6,68
8110e698:	01400044 	movi	r5,1
8110e69c:	01204534 	movhi	r4,33044
8110e6a0:	213c5204 	addi	r4,r4,-3768
8110e6a4:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e6a8:	0001883a 	nop
8110e6ac:	e037883a 	mov	sp,fp
8110e6b0:	dfc00117 	ldw	ra,4(sp)
8110e6b4:	df000017 	ldw	fp,0(sp)
8110e6b8:	dec00204 	addi	sp,sp,8
8110e6bc:	f800283a 	ret

8110e6c0 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110e6c0:	defffe04 	addi	sp,sp,-8
8110e6c4:	de00012e 	bgeu	sp,et,8110e6cc <vFailGetMutexSenderTask+0xc>
8110e6c8:	003b68fa 	trap	3
8110e6cc:	dfc00115 	stw	ra,4(sp)
8110e6d0:	df000015 	stw	fp,0(sp)
8110e6d4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)\n");
8110e6d8:	d0a04f17 	ldw	r2,-32452(gp)
8110e6dc:	100f883a 	mov	r7,r2
8110e6e0:	01800804 	movi	r6,32
8110e6e4:	01400044 	movi	r5,1
8110e6e8:	01204534 	movhi	r4,33044
8110e6ec:	213c6404 	addi	r4,r4,-3696
8110e6f0:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110e6f4:	d0a04f17 	ldw	r2,-32452(gp)
8110e6f8:	100f883a 	mov	r7,r2
8110e6fc:	01801084 	movi	r6,66
8110e700:	01400044 	movi	r5,1
8110e704:	01204534 	movhi	r4,33044
8110e708:	213c6d04 	addi	r4,r4,-3660
8110e70c:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e710:	0001883a 	nop
8110e714:	e037883a 	mov	sp,fp
8110e718:	dfc00117 	ldw	ra,4(sp)
8110e71c:	df000017 	ldw	fp,0(sp)
8110e720:	dec00204 	addi	sp,sp,8
8110e724:	f800283a 	ret

8110e728 <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110e728:	defffe04 	addi	sp,sp,-8
8110e72c:	de00012e 	bgeu	sp,et,8110e734 <vFailGetCountSemaphoreReceiverTask+0xc>
8110e730:	003b68fa 	trap	3
8110e734:	dfc00115 	stw	ra,4(sp)
8110e738:	df000015 	stw	fp,0(sp)
8110e73c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)\n");
8110e740:	d0a04f17 	ldw	r2,-32452(gp)
8110e744:	100f883a 	mov	r7,r2
8110e748:	01800ac4 	movi	r6,43
8110e74c:	01400044 	movi	r5,1
8110e750:	01204534 	movhi	r4,33044
8110e754:	213c7e04 	addi	r4,r4,-3592
8110e758:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110e75c:	d0a04f17 	ldw	r2,-32452(gp)
8110e760:	100f883a 	mov	r7,r2
8110e764:	01801184 	movi	r6,70
8110e768:	01400044 	movi	r5,1
8110e76c:	01204534 	movhi	r4,33044
8110e770:	213c8904 	addi	r4,r4,-3548
8110e774:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e778:	0001883a 	nop
8110e77c:	e037883a 	mov	sp,fp
8110e780:	dfc00117 	ldw	ra,4(sp)
8110e784:	df000017 	ldw	fp,0(sp)
8110e788:	dec00204 	addi	sp,sp,8
8110e78c:	f800283a 	ret

8110e790 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110e790:	defffe04 	addi	sp,sp,-8
8110e794:	de00012e 	bgeu	sp,et,8110e79c <vFailGetMutexReceiverTask+0xc>
8110e798:	003b68fa 	trap	3
8110e79c:	dfc00115 	stw	ra,4(sp)
8110e7a0:	df000015 	stw	fp,0(sp)
8110e7a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)\n");
8110e7a8:	d0a04f17 	ldw	r2,-32452(gp)
8110e7ac:	100f883a 	mov	r7,r2
8110e7b0:	01800884 	movi	r6,34
8110e7b4:	01400044 	movi	r5,1
8110e7b8:	01204534 	movhi	r4,33044
8110e7bc:	213c9b04 	addi	r4,r4,-3476
8110e7c0:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110e7c4:	d0a04f17 	ldw	r2,-32452(gp)
8110e7c8:	100f883a 	mov	r7,r2
8110e7cc:	01801104 	movi	r6,68
8110e7d0:	01400044 	movi	r5,1
8110e7d4:	01204534 	movhi	r4,33044
8110e7d8:	213ca404 	addi	r4,r4,-3440
8110e7dc:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e7e0:	0001883a 	nop
8110e7e4:	e037883a 	mov	sp,fp
8110e7e8:	dfc00117 	ldw	ra,4(sp)
8110e7ec:	df000017 	ldw	fp,0(sp)
8110e7f0:	dec00204 	addi	sp,sp,8
8110e7f4:	f800283a 	ret

8110e7f8 <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110e7f8:	defffe04 	addi	sp,sp,-8
8110e7fc:	de00012e 	bgeu	sp,et,8110e804 <vFailGetMutexTxUARTSenderTask+0xc>
8110e800:	003b68fa 	trap	3
8110e804:	dfc00115 	stw	ra,4(sp)
8110e808:	df000015 	stw	fp,0(sp)
8110e80c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)\n");
8110e810:	d0a04f17 	ldw	r2,-32452(gp)
8110e814:	100f883a 	mov	r7,r2
8110e818:	01800984 	movi	r6,38
8110e81c:	01400044 	movi	r5,1
8110e820:	01204534 	movhi	r4,33044
8110e824:	213cb604 	addi	r4,r4,-3368
8110e828:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110e82c:	d0a04f17 	ldw	r2,-32452(gp)
8110e830:	100f883a 	mov	r7,r2
8110e834:	01801044 	movi	r6,65
8110e838:	01400044 	movi	r5,1
8110e83c:	01204534 	movhi	r4,33044
8110e840:	213cc004 	addi	r4,r4,-3328
8110e844:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e848:	0001883a 	nop
8110e84c:	e037883a 	mov	sp,fp
8110e850:	dfc00117 	ldw	ra,4(sp)
8110e854:	df000017 	ldw	fp,0(sp)
8110e858:	dec00204 	addi	sp,sp,8
8110e85c:	f800283a 	ret

8110e860 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110e860:	defffe04 	addi	sp,sp,-8
8110e864:	de00012e 	bgeu	sp,et,8110e86c <vFailGetMacRTC+0xc>
8110e868:	003b68fa 	trap	3
8110e86c:	dfc00115 	stw	ra,4(sp)
8110e870:	df000015 	stw	fp,0(sp)
8110e874:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC\n");
8110e878:	d0a04f17 	ldw	r2,-32452(gp)
8110e87c:	100f883a 	mov	r7,r2
8110e880:	018003c4 	movi	r6,15
8110e884:	01400044 	movi	r5,1
8110e888:	01204534 	movhi	r4,33044
8110e88c:	213cd104 	addi	r4,r4,-3260
8110e890:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e894:	0001883a 	nop
8110e898:	e037883a 	mov	sp,fp
8110e89c:	dfc00117 	ldw	ra,4(sp)
8110e8a0:	df000017 	ldw	fp,0(sp)
8110e8a4:	dec00204 	addi	sp,sp,8
8110e8a8:	f800283a 	ret

8110e8ac <vFailInitialization>:


void vFailInitialization( void )
{
8110e8ac:	defffe04 	addi	sp,sp,-8
8110e8b0:	de00012e 	bgeu	sp,et,8110e8b8 <vFailInitialization+0xc>
8110e8b4:	003b68fa 	trap	3
8110e8b8:	dfc00115 	stw	ra,4(sp)
8110e8bc:	df000015 	stw	fp,0(sp)
8110e8c0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization\n");
8110e8c4:	d0a04f17 	ldw	r2,-32452(gp)
8110e8c8:	100f883a 	mov	r7,r2
8110e8cc:	01800504 	movi	r6,20
8110e8d0:	01400044 	movi	r5,1
8110e8d4:	01204534 	movhi	r4,33044
8110e8d8:	213cd504 	addi	r4,r4,-3244
8110e8dc:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e8e0:	0001883a 	nop
8110e8e4:	e037883a 	mov	sp,fp
8110e8e8:	dfc00117 	ldw	ra,4(sp)
8110e8ec:	df000017 	ldw	fp,0(sp)
8110e8f0:	dec00204 	addi	sp,sp,8
8110e8f4:	f800283a 	ret

8110e8f8 <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110e8f8:	defffe04 	addi	sp,sp,-8
8110e8fc:	de00012e 	bgeu	sp,et,8110e904 <vFailReceiverCreate+0xc>
8110e900:	003b68fa 	trap	3
8110e904:	dfc00115 	stw	ra,4(sp)
8110e908:	df000015 	stw	fp,0(sp)
8110e90c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask\n");
8110e910:	d0a04f17 	ldw	r2,-32452(gp)
8110e914:	100f883a 	mov	r7,r2
8110e918:	01800484 	movi	r6,18
8110e91c:	01400044 	movi	r5,1
8110e920:	01204534 	movhi	r4,33044
8110e924:	213cdb04 	addi	r4,r4,-3220
8110e928:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e92c:	0001883a 	nop
8110e930:	e037883a 	mov	sp,fp
8110e934:	dfc00117 	ldw	ra,4(sp)
8110e938:	df000017 	ldw	fp,0(sp)
8110e93c:	dec00204 	addi	sp,sp,8
8110e940:	f800283a 	ret

8110e944 <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110e944:	defffe04 	addi	sp,sp,-8
8110e948:	de00012e 	bgeu	sp,et,8110e950 <vFailSenderCreate+0xc>
8110e94c:	003b68fa 	trap	3
8110e950:	dfc00115 	stw	ra,4(sp)
8110e954:	df000015 	stw	fp,0(sp)
8110e958:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate\n");
8110e95c:	d0a04f17 	ldw	r2,-32452(gp)
8110e960:	100f883a 	mov	r7,r2
8110e964:	01800484 	movi	r6,18
8110e968:	01400044 	movi	r5,1
8110e96c:	01204534 	movhi	r4,33044
8110e970:	213ce004 	addi	r4,r4,-3200
8110e974:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e978:	0001883a 	nop
8110e97c:	e037883a 	mov	sp,fp
8110e980:	dfc00117 	ldw	ra,4(sp)
8110e984:	df000017 	ldw	fp,0(sp)
8110e988:	dec00204 	addi	sp,sp,8
8110e98c:	f800283a 	ret

8110e990 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110e990:	defffe04 	addi	sp,sp,-8
8110e994:	de00012e 	bgeu	sp,et,8110e99c <vFailDeleteInitialization+0xc>
8110e998:	003b68fa 	trap	3
8110e99c:	dfc00115 	stw	ra,4(sp)
8110e9a0:	df000015 	stw	fp,0(sp)
8110e9a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization\n");
8110e9a8:	d0a04f17 	ldw	r2,-32452(gp)
8110e9ac:	100f883a 	mov	r7,r2
8110e9b0:	01800684 	movi	r6,26
8110e9b4:	01400044 	movi	r5,1
8110e9b8:	01204534 	movhi	r4,33044
8110e9bc:	213ce504 	addi	r4,r4,-3180
8110e9c0:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e9c4:	0001883a 	nop
8110e9c8:	e037883a 	mov	sp,fp
8110e9cc:	dfc00117 	ldw	ra,4(sp)
8110e9d0:	df000017 	ldw	fp,0(sp)
8110e9d4:	dec00204 	addi	sp,sp,8
8110e9d8:	f800283a 	ret

8110e9dc <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110e9dc:	defffe04 	addi	sp,sp,-8
8110e9e0:	de00012e 	bgeu	sp,et,8110e9e8 <vFailSetCountSemaphorexBuffer32+0xc>
8110e9e4:	003b68fa 	trap	3
8110e9e8:	dfc00115 	stw	ra,4(sp)
8110e9ec:	df000015 	stw	fp,0(sp)
8110e9f0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)\n");
8110e9f4:	d0a04f17 	ldw	r2,-32452(gp)
8110e9f8:	100f883a 	mov	r7,r2
8110e9fc:	01800a04 	movi	r6,40
8110ea00:	01400044 	movi	r5,1
8110ea04:	01204534 	movhi	r4,33044
8110ea08:	213cec04 	addi	r4,r4,-3152
8110ea0c:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110ea10:	d0a04f17 	ldw	r2,-32452(gp)
8110ea14:	100f883a 	mov	r7,r2
8110ea18:	018008c4 	movi	r6,35
8110ea1c:	01400044 	movi	r5,1
8110ea20:	01204534 	movhi	r4,33044
8110ea24:	213cf704 	addi	r4,r4,-3108
8110ea28:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ea2c:	0001883a 	nop
8110ea30:	e037883a 	mov	sp,fp
8110ea34:	dfc00117 	ldw	ra,4(sp)
8110ea38:	df000017 	ldw	fp,0(sp)
8110ea3c:	dec00204 	addi	sp,sp,8
8110ea40:	f800283a 	ret

8110ea44 <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110ea44:	defffe04 	addi	sp,sp,-8
8110ea48:	de00012e 	bgeu	sp,et,8110ea50 <vFailSetCountSemaphorexBuffer64+0xc>
8110ea4c:	003b68fa 	trap	3
8110ea50:	dfc00115 	stw	ra,4(sp)
8110ea54:	df000015 	stw	fp,0(sp)
8110ea58:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)\n");
8110ea5c:	d0a04f17 	ldw	r2,-32452(gp)
8110ea60:	100f883a 	mov	r7,r2
8110ea64:	01800a04 	movi	r6,40
8110ea68:	01400044 	movi	r5,1
8110ea6c:	01204534 	movhi	r4,33044
8110ea70:	213d0004 	addi	r4,r4,-3072
8110ea74:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110ea78:	d0a04f17 	ldw	r2,-32452(gp)
8110ea7c:	100f883a 	mov	r7,r2
8110ea80:	018008c4 	movi	r6,35
8110ea84:	01400044 	movi	r5,1
8110ea88:	01204534 	movhi	r4,33044
8110ea8c:	213cf704 	addi	r4,r4,-3108
8110ea90:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ea94:	0001883a 	nop
8110ea98:	e037883a 	mov	sp,fp
8110ea9c:	dfc00117 	ldw	ra,4(sp)
8110eaa0:	df000017 	ldw	fp,0(sp)
8110eaa4:	dec00204 	addi	sp,sp,8
8110eaa8:	f800283a 	ret

8110eaac <vFailSetCountSemaphorexBuffer128>:

/*CRITICAL*/
void vFailSetCountSemaphorexBuffer128( void )
{
8110eaac:	defffe04 	addi	sp,sp,-8
8110eab0:	de00012e 	bgeu	sp,et,8110eab8 <vFailSetCountSemaphorexBuffer128+0xc>
8110eab4:	003b68fa 	trap	3
8110eab8:	dfc00115 	stw	ra,4(sp)
8110eabc:	df000015 	stw	fp,0(sp)
8110eac0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)\n");
8110eac4:	d0a04f17 	ldw	r2,-32452(gp)
8110eac8:	100f883a 	mov	r7,r2
8110eacc:	01800a44 	movi	r6,41
8110ead0:	01400044 	movi	r5,1
8110ead4:	01204534 	movhi	r4,33044
8110ead8:	213d0b04 	addi	r4,r4,-3028
8110eadc:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110eae0:	d0a04f17 	ldw	r2,-32452(gp)
8110eae4:	100f883a 	mov	r7,r2
8110eae8:	018008c4 	movi	r6,35
8110eaec:	01400044 	movi	r5,1
8110eaf0:	01204534 	movhi	r4,33044
8110eaf4:	213cf704 	addi	r4,r4,-3108
8110eaf8:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eafc:	0001883a 	nop
8110eb00:	e037883a 	mov	sp,fp
8110eb04:	dfc00117 	ldw	ra,4(sp)
8110eb08:	df000017 	ldw	fp,0(sp)
8110eb0c:	dec00204 	addi	sp,sp,8
8110eb10:	f800283a 	ret

8110eb14 <vFailGetCountSemaphorexBuffer128>:

void vFailGetCountSemaphorexBuffer128( void )
{
8110eb14:	defffe04 	addi	sp,sp,-8
8110eb18:	de00012e 	bgeu	sp,et,8110eb20 <vFailGetCountSemaphorexBuffer128+0xc>
8110eb1c:	003b68fa 	trap	3
8110eb20:	dfc00115 	stw	ra,4(sp)
8110eb24:	df000015 	stw	fp,0(sp)
8110eb28:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer128. (exit)\n");
8110eb2c:	d0a04f17 	ldw	r2,-32452(gp)
8110eb30:	100f883a 	mov	r7,r2
8110eb34:	01800a44 	movi	r6,41
8110eb38:	01400044 	movi	r5,1
8110eb3c:	01204534 	movhi	r4,33044
8110eb40:	213d1604 	addi	r4,r4,-2984
8110eb44:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8110eb48:	d0a04f17 	ldw	r2,-32452(gp)
8110eb4c:	100f883a 	mov	r7,r2
8110eb50:	01800884 	movi	r6,34
8110eb54:	01400044 	movi	r5,1
8110eb58:	01204534 	movhi	r4,33044
8110eb5c:	213d2104 	addi	r4,r4,-2940
8110eb60:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eb64:	0001883a 	nop
8110eb68:	e037883a 	mov	sp,fp
8110eb6c:	dfc00117 	ldw	ra,4(sp)
8110eb70:	df000017 	ldw	fp,0(sp)
8110eb74:	dec00204 	addi	sp,sp,8
8110eb78:	f800283a 	ret

8110eb7c <vFailGetCountSemaphorexBuffer64>:

void vFailGetCountSemaphorexBuffer64( void )
{
8110eb7c:	defffe04 	addi	sp,sp,-8
8110eb80:	de00012e 	bgeu	sp,et,8110eb88 <vFailGetCountSemaphorexBuffer64+0xc>
8110eb84:	003b68fa 	trap	3
8110eb88:	dfc00115 	stw	ra,4(sp)
8110eb8c:	df000015 	stw	fp,0(sp)
8110eb90:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer64. (exit)\n");
8110eb94:	d0a04f17 	ldw	r2,-32452(gp)
8110eb98:	100f883a 	mov	r7,r2
8110eb9c:	01800a04 	movi	r6,40
8110eba0:	01400044 	movi	r5,1
8110eba4:	01204534 	movhi	r4,33044
8110eba8:	213d2a04 	addi	r4,r4,-2904
8110ebac:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8110ebb0:	d0a04f17 	ldw	r2,-32452(gp)
8110ebb4:	100f883a 	mov	r7,r2
8110ebb8:	01800884 	movi	r6,34
8110ebbc:	01400044 	movi	r5,1
8110ebc0:	01204534 	movhi	r4,33044
8110ebc4:	213d2104 	addi	r4,r4,-2940
8110ebc8:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ebcc:	0001883a 	nop
8110ebd0:	e037883a 	mov	sp,fp
8110ebd4:	dfc00117 	ldw	ra,4(sp)
8110ebd8:	df000017 	ldw	fp,0(sp)
8110ebdc:	dec00204 	addi	sp,sp,8
8110ebe0:	f800283a 	ret

8110ebe4 <vFailGetCountSemaphorexBuffer32>:

void vFailGetCountSemaphorexBuffer32( void )
{
8110ebe4:	defffe04 	addi	sp,sp,-8
8110ebe8:	de00012e 	bgeu	sp,et,8110ebf0 <vFailGetCountSemaphorexBuffer32+0xc>
8110ebec:	003b68fa 	trap	3
8110ebf0:	dfc00115 	stw	ra,4(sp)
8110ebf4:	df000015 	stw	fp,0(sp)
8110ebf8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer32. (exit)\n");
8110ebfc:	d0a04f17 	ldw	r2,-32452(gp)
8110ec00:	100f883a 	mov	r7,r2
8110ec04:	01800a04 	movi	r6,40
8110ec08:	01400044 	movi	r5,1
8110ec0c:	01204534 	movhi	r4,33044
8110ec10:	213d3504 	addi	r4,r4,-2860
8110ec14:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8110ec18:	d0a04f17 	ldw	r2,-32452(gp)
8110ec1c:	100f883a 	mov	r7,r2
8110ec20:	01800884 	movi	r6,34
8110ec24:	01400044 	movi	r5,1
8110ec28:	01204534 	movhi	r4,33044
8110ec2c:	213d2104 	addi	r4,r4,-2940
8110ec30:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ec34:	0001883a 	nop
8110ec38:	e037883a 	mov	sp,fp
8110ec3c:	dfc00117 	ldw	ra,4(sp)
8110ec40:	df000017 	ldw	fp,0(sp)
8110ec44:	dec00204 	addi	sp,sp,8
8110ec48:	f800283a 	ret

8110ec4c <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110ec4c:	defffe04 	addi	sp,sp,-8
8110ec50:	de00012e 	bgeu	sp,et,8110ec58 <vFailFoundBufferRetransmission+0xc>
8110ec54:	003b68fa 	trap	3
8110ec58:	dfc00115 	stw	ra,4(sp)
8110ec5c:	df000015 	stw	fp,0(sp)
8110ec60:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"Warning: Incomming Ack id doesn't exists.\n");
8110ec64:	d0a04f17 	ldw	r2,-32452(gp)
8110ec68:	100f883a 	mov	r7,r2
8110ec6c:	01800a84 	movi	r6,42
8110ec70:	01400044 	movi	r5,1
8110ec74:	01204534 	movhi	r4,33044
8110ec78:	213d4004 	addi	r4,r4,-2816
8110ec7c:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(In Ack Handler)\n");
8110ec80:	d0a04f17 	ldw	r2,-32452(gp)
8110ec84:	100f883a 	mov	r7,r2
8110ec88:	01801204 	movi	r6,72
8110ec8c:	01400044 	movi	r5,1
8110ec90:	01204534 	movhi	r4,33044
8110ec94:	213d4b04 	addi	r4,r4,-2772
8110ec98:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ec9c:	0001883a 	nop
8110eca0:	e037883a 	mov	sp,fp
8110eca4:	dfc00117 	ldw	ra,4(sp)
8110eca8:	df000017 	ldw	fp,0(sp)
8110ecac:	dec00204 	addi	sp,sp,8
8110ecb0:	f800283a 	ret

8110ecb4 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110ecb4:	defffe04 	addi	sp,sp,-8
8110ecb8:	de00012e 	bgeu	sp,et,8110ecc0 <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110ecbc:	003b68fa 	trap	3
8110ecc0:	dfc00115 	stw	ra,4(sp)
8110ecc4:	df000015 	stw	fp,0(sp)
8110ecc8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)\n");
8110eccc:	d0a04f17 	ldw	r2,-32452(gp)
8110ecd0:	100f883a 	mov	r7,r2
8110ecd4:	01800b84 	movi	r6,46
8110ecd8:	01400044 	movi	r5,1
8110ecdc:	01204534 	movhi	r4,33044
8110ece0:	213d5e04 	addi	r4,r4,-2696
8110ece4:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110ece8:	d0a04f17 	ldw	r2,-32452(gp)
8110ecec:	100f883a 	mov	r7,r2
8110ecf0:	018010c4 	movi	r6,67
8110ecf4:	01400044 	movi	r5,1
8110ecf8:	01204534 	movhi	r4,33044
8110ecfc:	213d6a04 	addi	r4,r4,-2648
8110ed00:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ed04:	0001883a 	nop
8110ed08:	e037883a 	mov	sp,fp
8110ed0c:	dfc00117 	ldw	ra,4(sp)
8110ed10:	df000017 	ldw	fp,0(sp)
8110ed14:	dec00204 	addi	sp,sp,8
8110ed18:	f800283a 	ret

8110ed1c <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110ed1c:	defffe04 	addi	sp,sp,-8
8110ed20:	de00012e 	bgeu	sp,et,8110ed28 <vFailGetxMutexPreParsedParserRxTask+0xc>
8110ed24:	003b68fa 	trap	3
8110ed28:	dfc00115 	stw	ra,4(sp)
8110ed2c:	df000015 	stw	fp,0(sp)
8110ed30:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)\n");
8110ed34:	d0a04f17 	ldw	r2,-32452(gp)
8110ed38:	100f883a 	mov	r7,r2
8110ed3c:	01800b04 	movi	r6,44
8110ed40:	01400044 	movi	r5,1
8110ed44:	01204534 	movhi	r4,33044
8110ed48:	213d7b04 	addi	r4,r4,-2580
8110ed4c:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110ed50:	d0a04f17 	ldw	r2,-32452(gp)
8110ed54:	100f883a 	mov	r7,r2
8110ed58:	01800fc4 	movi	r6,63
8110ed5c:	01400044 	movi	r5,1
8110ed60:	01204534 	movhi	r4,33044
8110ed64:	213d8704 	addi	r4,r4,-2532
8110ed68:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ed6c:	0001883a 	nop
8110ed70:	e037883a 	mov	sp,fp
8110ed74:	dfc00117 	ldw	ra,4(sp)
8110ed78:	df000017 	ldw	fp,0(sp)
8110ed7c:	dec00204 	addi	sp,sp,8
8110ed80:	f800283a 	ret

8110ed84 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110ed84:	defffe04 	addi	sp,sp,-8
8110ed88:	de00012e 	bgeu	sp,et,8110ed90 <vNoContentInPreParsedBuffer+0xc>
8110ed8c:	003b68fa 	trap	3
8110ed90:	dfc00115 	stw	ra,4(sp)
8110ed94:	df000015 	stw	fp,0(sp)
8110ed98:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)\n");
8110ed9c:	d0a04f17 	ldw	r2,-32452(gp)
8110eda0:	100f883a 	mov	r7,r2
8110eda4:	01800904 	movi	r6,36
8110eda8:	01400044 	movi	r5,1
8110edac:	01204534 	movhi	r4,33044
8110edb0:	213d9704 	addi	r4,r4,-2468
8110edb4:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110edb8:	d0a04f17 	ldw	r2,-32452(gp)
8110edbc:	100f883a 	mov	r7,r2
8110edc0:	01801684 	movi	r6,90
8110edc4:	01400044 	movi	r5,1
8110edc8:	01204534 	movhi	r4,33044
8110edcc:	213da104 	addi	r4,r4,-2428
8110edd0:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110edd4:	0001883a 	nop
8110edd8:	e037883a 	mov	sp,fp
8110eddc:	dfc00117 	ldw	ra,4(sp)
8110ede0:	df000017 	ldw	fp,0(sp)
8110ede4:	dec00204 	addi	sp,sp,8
8110ede8:	f800283a 	ret

8110edec <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110edec:	defffe04 	addi	sp,sp,-8
8110edf0:	de00012e 	bgeu	sp,et,8110edf8 <vCouldNotSendEthConfUART+0xc>
8110edf4:	003b68fa 	trap	3
8110edf8:	dfc00115 	stw	ra,4(sp)
8110edfc:	df000015 	stw	fp,0(sp)
8110ee00:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)\n");
8110ee04:	d0a04f17 	ldw	r2,-32452(gp)
8110ee08:	100f883a 	mov	r7,r2
8110ee0c:	01800844 	movi	r6,33
8110ee10:	01400044 	movi	r5,1
8110ee14:	01204534 	movhi	r4,33044
8110ee18:	213db804 	addi	r4,r4,-2336
8110ee1c:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110ee20:	d0a04f17 	ldw	r2,-32452(gp)
8110ee24:	100f883a 	mov	r7,r2
8110ee28:	01801784 	movi	r6,94
8110ee2c:	01400044 	movi	r5,1
8110ee30:	01204534 	movhi	r4,33044
8110ee34:	213dc104 	addi	r4,r4,-2300
8110ee38:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ee3c:	0001883a 	nop
8110ee40:	e037883a 	mov	sp,fp
8110ee44:	dfc00117 	ldw	ra,4(sp)
8110ee48:	df000017 	ldw	fp,0(sp)
8110ee4c:	dec00204 	addi	sp,sp,8
8110ee50:	f800283a 	ret

8110ee54 <vFailSendNack>:

void vFailSendNack( void )
{
8110ee54:	defffe04 	addi	sp,sp,-8
8110ee58:	de00012e 	bgeu	sp,et,8110ee60 <vFailSendNack+0xc>
8110ee5c:	003b68fa 	trap	3
8110ee60:	dfc00115 	stw	ra,4(sp)
8110ee64:	df000015 	stw	fp,0(sp)
8110ee68:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)\n");
8110ee6c:	d0a04f17 	ldw	r2,-32452(gp)
8110ee70:	100f883a 	mov	r7,r2
8110ee74:	01800584 	movi	r6,22
8110ee78:	01400044 	movi	r5,1
8110ee7c:	01204534 	movhi	r4,33044
8110ee80:	213dd904 	addi	r4,r4,-2204
8110ee84:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110ee88:	d0a04f17 	ldw	r2,-32452(gp)
8110ee8c:	100f883a 	mov	r7,r2
8110ee90:	01800a84 	movi	r6,42
8110ee94:	01400044 	movi	r5,1
8110ee98:	01204534 	movhi	r4,33044
8110ee9c:	213ddf04 	addi	r4,r4,-2180
8110eea0:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eea4:	0001883a 	nop
8110eea8:	e037883a 	mov	sp,fp
8110eeac:	dfc00117 	ldw	ra,4(sp)
8110eeb0:	df000017 	ldw	fp,0(sp)
8110eeb4:	dec00204 	addi	sp,sp,8
8110eeb8:	f800283a 	ret

8110eebc <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110eebc:	defffe04 	addi	sp,sp,-8
8110eec0:	de00012e 	bgeu	sp,et,8110eec8 <vFailSetPreAckSenderBuffer+0xc>
8110eec4:	003b68fa 	trap	3
8110eec8:	dfc00115 	stw	ra,4(sp)
8110eecc:	df000015 	stw	fp,0(sp)
8110eed0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)\n");
8110eed4:	d0a04f17 	ldw	r2,-32452(gp)
8110eed8:	100f883a 	mov	r7,r2
8110eedc:	018008c4 	movi	r6,35
8110eee0:	01400044 	movi	r5,1
8110eee4:	01204534 	movhi	r4,33044
8110eee8:	213dea04 	addi	r4,r4,-2136
8110eeec:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110eef0:	d0a04f17 	ldw	r2,-32452(gp)
8110eef4:	100f883a 	mov	r7,r2
8110eef8:	01801584 	movi	r6,86
8110eefc:	01400044 	movi	r5,1
8110ef00:	01204534 	movhi	r4,33044
8110ef04:	213df304 	addi	r4,r4,-2100
8110ef08:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ef0c:	0001883a 	nop
8110ef10:	e037883a 	mov	sp,fp
8110ef14:	dfc00117 	ldw	ra,4(sp)
8110ef18:	df000017 	ldw	fp,0(sp)
8110ef1c:	dec00204 	addi	sp,sp,8
8110ef20:	f800283a 	ret

8110ef24 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110ef24:	defffe04 	addi	sp,sp,-8
8110ef28:	de00012e 	bgeu	sp,et,8110ef30 <vFailSetPreParsedBuffer+0xc>
8110ef2c:	003b68fa 	trap	3
8110ef30:	dfc00115 	stw	ra,4(sp)
8110ef34:	df000015 	stw	fp,0(sp)
8110ef38:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)\n");
8110ef3c:	d0a04f17 	ldw	r2,-32452(gp)
8110ef40:	100f883a 	mov	r7,r2
8110ef44:	01800804 	movi	r6,32
8110ef48:	01400044 	movi	r5,1
8110ef4c:	01204534 	movhi	r4,33044
8110ef50:	213e0904 	addi	r4,r4,-2012
8110ef54:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110ef58:	d0a04f17 	ldw	r2,-32452(gp)
8110ef5c:	100f883a 	mov	r7,r2
8110ef60:	018013c4 	movi	r6,79
8110ef64:	01400044 	movi	r5,1
8110ef68:	01204534 	movhi	r4,33044
8110ef6c:	213e1204 	addi	r4,r4,-1976
8110ef70:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ef74:	0001883a 	nop
8110ef78:	e037883a 	mov	sp,fp
8110ef7c:	dfc00117 	ldw	ra,4(sp)
8110ef80:	df000017 	ldw	fp,0(sp)
8110ef84:	dec00204 	addi	sp,sp,8
8110ef88:	f800283a 	ret

8110ef8c <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110ef8c:	defffe04 	addi	sp,sp,-8
8110ef90:	de00012e 	bgeu	sp,et,8110ef98 <vFailSetPreAckReceiverBuffer+0xc>
8110ef94:	003b68fa 	trap	3
8110ef98:	dfc00115 	stw	ra,4(sp)
8110ef9c:	df000015 	stw	fp,0(sp)
8110efa0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)\n");
8110efa4:	d0a04f17 	ldw	r2,-32452(gp)
8110efa8:	100f883a 	mov	r7,r2
8110efac:	01800944 	movi	r6,37
8110efb0:	01400044 	movi	r5,1
8110efb4:	01204534 	movhi	r4,33044
8110efb8:	213e2604 	addi	r4,r4,-1896
8110efbc:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110efc0:	d0a04f17 	ldw	r2,-32452(gp)
8110efc4:	100f883a 	mov	r7,r2
8110efc8:	018015c4 	movi	r6,87
8110efcc:	01400044 	movi	r5,1
8110efd0:	01204534 	movhi	r4,33044
8110efd4:	213e3004 	addi	r4,r4,-1856
8110efd8:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110efdc:	0001883a 	nop
8110efe0:	e037883a 	mov	sp,fp
8110efe4:	dfc00117 	ldw	ra,4(sp)
8110efe8:	df000017 	ldw	fp,0(sp)
8110efec:	dec00204 	addi	sp,sp,8
8110eff0:	f800283a 	ret

8110eff4 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110eff4:	defffe04 	addi	sp,sp,-8
8110eff8:	de00012e 	bgeu	sp,et,8110f000 <vFailParserCommTaskCreate+0xc>
8110effc:	003b68fa 	trap	3
8110f000:	dfc00115 	stw	ra,4(sp)
8110f004:	df000015 	stw	fp,0(sp)
8110f008:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate\n");
8110f00c:	d0a04f17 	ldw	r2,-32452(gp)
8110f010:	100f883a 	mov	r7,r2
8110f014:	01800684 	movi	r6,26
8110f018:	01400044 	movi	r5,1
8110f01c:	01204534 	movhi	r4,33044
8110f020:	213e4604 	addi	r4,r4,-1768
8110f024:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110f028:	0001883a 	nop
8110f02c:	e037883a 	mov	sp,fp
8110f030:	dfc00117 	ldw	ra,4(sp)
8110f034:	df000017 	ldw	fp,0(sp)
8110f038:	dec00204 	addi	sp,sp,8
8110f03c:	f800283a 	ret

8110f040 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110f040:	defffe04 	addi	sp,sp,-8
8110f044:	de00012e 	bgeu	sp,et,8110f04c <vFailInAckHandlerTaskCreate+0xc>
8110f048:	003b68fa 	trap	3
8110f04c:	dfc00115 	stw	ra,4(sp)
8110f050:	df000015 	stw	fp,0(sp)
8110f054:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110f058:	d0a04f17 	ldw	r2,-32452(gp)
8110f05c:	100f883a 	mov	r7,r2
8110f060:	01800704 	movi	r6,28
8110f064:	01400044 	movi	r5,1
8110f068:	01204534 	movhi	r4,33044
8110f06c:	213e4d04 	addi	r4,r4,-1740
8110f070:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110f074:	0001883a 	nop
8110f078:	e037883a 	mov	sp,fp
8110f07c:	dfc00117 	ldw	ra,4(sp)
8110f080:	df000017 	ldw	fp,0(sp)
8110f084:	dec00204 	addi	sp,sp,8
8110f088:	f800283a 	ret

8110f08c <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110f08c:	defffe04 	addi	sp,sp,-8
8110f090:	de00012e 	bgeu	sp,et,8110f098 <vFailOutAckHandlerTaskCreate+0xc>
8110f094:	003b68fa 	trap	3
8110f098:	dfc00115 	stw	ra,4(sp)
8110f09c:	df000015 	stw	fp,0(sp)
8110f0a0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110f0a4:	d0a04f17 	ldw	r2,-32452(gp)
8110f0a8:	100f883a 	mov	r7,r2
8110f0ac:	01800704 	movi	r6,28
8110f0b0:	01400044 	movi	r5,1
8110f0b4:	01204534 	movhi	r4,33044
8110f0b8:	213e4d04 	addi	r4,r4,-1740
8110f0bc:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110f0c0:	0001883a 	nop
8110f0c4:	e037883a 	mov	sp,fp
8110f0c8:	dfc00117 	ldw	ra,4(sp)
8110f0cc:	df000017 	ldw	fp,0(sp)
8110f0d0:	dec00204 	addi	sp,sp,8
8110f0d4:	f800283a 	ret

8110f0d8 <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8110f0d8:	defffe04 	addi	sp,sp,-8
8110f0dc:	de00012e 	bgeu	sp,et,8110f0e4 <vFailCreateTimerRetransmisison+0xc>
8110f0e0:	003b68fa 	trap	3
8110f0e4:	dfc00115 	stw	ra,4(sp)
8110f0e8:	df000015 	stw	fp,0(sp)
8110f0ec:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison\n");
8110f0f0:	d0a04f17 	ldw	r2,-32452(gp)
8110f0f4:	100f883a 	mov	r7,r2
8110f0f8:	018007c4 	movi	r6,31
8110f0fc:	01400044 	movi	r5,1
8110f100:	01204534 	movhi	r4,33044
8110f104:	213e5504 	addi	r4,r4,-1708
8110f108:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110f10c:	0001883a 	nop
8110f110:	e037883a 	mov	sp,fp
8110f114:	dfc00117 	ldw	ra,4(sp)
8110f118:	df000017 	ldw	fp,0(sp)
8110f11c:	dec00204 	addi	sp,sp,8
8110f120:	f800283a 	ret

8110f124 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
8110f124:	defffe04 	addi	sp,sp,-8
8110f128:	de00012e 	bgeu	sp,et,8110f130 <vCouldNotCheckBufferTimeOutFunction+0xc>
8110f12c:	003b68fa 	trap	3
8110f130:	dfc00115 	stw	ra,4(sp)
8110f134:	df000015 	stw	fp,0(sp)
8110f138:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction\n");
8110f13c:	d0a04f17 	ldw	r2,-32452(gp)
8110f140:	100f883a 	mov	r7,r2
8110f144:	01800904 	movi	r6,36
8110f148:	01400044 	movi	r5,1
8110f14c:	01204534 	movhi	r4,33044
8110f150:	213e5d04 	addi	r4,r4,-1676
8110f154:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110f158:	0001883a 	nop
8110f15c:	e037883a 	mov	sp,fp
8110f160:	dfc00117 	ldw	ra,4(sp)
8110f164:	df000017 	ldw	fp,0(sp)
8110f168:	dec00204 	addi	sp,sp,8
8110f16c:	f800283a 	ret

8110f170 <vFailTimeoutCheckerTaskCreate>:

/* Critico */
void vFailTimeoutCheckerTaskCreate( void )
{
8110f170:	defffe04 	addi	sp,sp,-8
8110f174:	de00012e 	bgeu	sp,et,8110f17c <vFailTimeoutCheckerTaskCreate+0xc>
8110f178:	003b68fa 	trap	3
8110f17c:	dfc00115 	stw	ra,4(sp)
8110f180:	df000015 	stw	fp,0(sp)
8110f184:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate (Critico)\n");
8110f188:	d0a04f17 	ldw	r2,-32452(gp)
8110f18c:	100f883a 	mov	r7,r2
8110f190:	01800a04 	movi	r6,40
8110f194:	01400044 	movi	r5,1
8110f198:	01204534 	movhi	r4,33044
8110f19c:	213e6704 	addi	r4,r4,-1636
8110f1a0:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110f1a4:	0001883a 	nop
8110f1a8:	e037883a 	mov	sp,fp
8110f1ac:	dfc00117 	ldw	ra,4(sp)
8110f1b0:	df000017 	ldw	fp,0(sp)
8110f1b4:	dec00204 	addi	sp,sp,8
8110f1b8:	f800283a 	ret

8110f1bc <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
8110f1bc:	defffe04 	addi	sp,sp,-8
8110f1c0:	de00012e 	bgeu	sp,et,8110f1c8 <vFailGetBlockingSemTimeoutTask+0xc>
8110f1c4:	003b68fa 	trap	3
8110f1c8:	dfc00115 	stw	ra,4(sp)
8110f1cc:	df000015 	stw	fp,0(sp)
8110f1d0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)\n");
8110f1d4:	d0a04f17 	ldw	r2,-32452(gp)
8110f1d8:	100f883a 	mov	r7,r2
8110f1dc:	018009c4 	movi	r6,39
8110f1e0:	01400044 	movi	r5,1
8110f1e4:	01204534 	movhi	r4,33044
8110f1e8:	213e7204 	addi	r4,r4,-1592
8110f1ec:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.\n");
8110f1f0:	d0a04f17 	ldw	r2,-32452(gp)
8110f1f4:	100f883a 	mov	r7,r2
8110f1f8:	01800cc4 	movi	r6,51
8110f1fc:	01400044 	movi	r5,1
8110f200:	01204534 	movhi	r4,33044
8110f204:	213e7c04 	addi	r4,r4,-1552
8110f208:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f20c:	0001883a 	nop
8110f210:	e037883a 	mov	sp,fp
8110f214:	dfc00117 	ldw	ra,4(sp)
8110f218:	df000017 	ldw	fp,0(sp)
8110f21c:	dec00204 	addi	sp,sp,8
8110f220:	f800283a 	ret

8110f224 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
8110f224:	defffe04 	addi	sp,sp,-8
8110f228:	de00012e 	bgeu	sp,et,8110f230 <vFailPostBlockingSemTimeoutTask+0xc>
8110f22c:	003b68fa 	trap	3
8110f230:	dfc00115 	stw	ra,4(sp)
8110f234:	df000015 	stw	fp,0(sp)
8110f238:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)\n");
8110f23c:	d0a04f17 	ldw	r2,-32452(gp)
8110f240:	100f883a 	mov	r7,r2
8110f244:	01800a04 	movi	r6,40
8110f248:	01400044 	movi	r5,1
8110f24c:	01204534 	movhi	r4,33044
8110f250:	213e8904 	addi	r4,r4,-1500
8110f254:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.\n");
8110f258:	d0a04f17 	ldw	r2,-32452(gp)
8110f25c:	100f883a 	mov	r7,r2
8110f260:	01800c84 	movi	r6,50
8110f264:	01400044 	movi	r5,1
8110f268:	01204534 	movhi	r4,33044
8110f26c:	213e9404 	addi	r4,r4,-1456
8110f270:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f274:	0001883a 	nop
8110f278:	e037883a 	mov	sp,fp
8110f27c:	dfc00117 	ldw	ra,4(sp)
8110f280:	df000017 	ldw	fp,0(sp)
8110f284:	dec00204 	addi	sp,sp,8
8110f288:	f800283a 	ret

8110f28c <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
8110f28c:	defffe04 	addi	sp,sp,-8
8110f290:	de00012e 	bgeu	sp,et,8110f298 <vFailCouldNotRetransmitTimeoutTask+0xc>
8110f294:	003b68fa 	trap	3
8110f298:	dfc00115 	stw	ra,4(sp)
8110f29c:	df000015 	stw	fp,0(sp)
8110f2a0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)\n");
8110f2a4:	d0a04f17 	ldw	r2,-32452(gp)
8110f2a8:	100f883a 	mov	r7,r2
8110f2ac:	01800ac4 	movi	r6,43
8110f2b0:	01400044 	movi	r5,1
8110f2b4:	01204534 	movhi	r4,33044
8110f2b8:	213ea104 	addi	r4,r4,-1404
8110f2bc:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.\n");
8110f2c0:	d0a04f17 	ldw	r2,-32452(gp)
8110f2c4:	100f883a 	mov	r7,r2
8110f2c8:	01801644 	movi	r6,89
8110f2cc:	01400044 	movi	r5,1
8110f2d0:	01204534 	movhi	r4,33044
8110f2d4:	213eac04 	addi	r4,r4,-1360
8110f2d8:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f2dc:	0001883a 	nop
8110f2e0:	e037883a 	mov	sp,fp
8110f2e4:	dfc00117 	ldw	ra,4(sp)
8110f2e8:	df000017 	ldw	fp,0(sp)
8110f2ec:	dec00204 	addi	sp,sp,8
8110f2f0:	f800283a 	ret

8110f2f4 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
8110f2f4:	defffe04 	addi	sp,sp,-8
8110f2f8:	de00012e 	bgeu	sp,et,8110f300 <vCouldNotRetransmitB32TimeoutTask+0xc>
8110f2fc:	003b68fa 	trap	3
8110f300:	dfc00115 	stw	ra,4(sp)
8110f304:	df000015 	stw	fp,0(sp)
8110f308:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)\n");
8110f30c:	d0a04f17 	ldw	r2,-32452(gp)
8110f310:	100f883a 	mov	r7,r2
8110f314:	01800a84 	movi	r6,42
8110f318:	01400044 	movi	r5,1
8110f31c:	01204534 	movhi	r4,33044
8110f320:	213ec304 	addi	r4,r4,-1268
8110f324:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).\n");
8110f328:	d0a04f17 	ldw	r2,-32452(gp)
8110f32c:	100f883a 	mov	r7,r2
8110f330:	01801444 	movi	r6,81
8110f334:	01400044 	movi	r5,1
8110f338:	01204534 	movhi	r4,33044
8110f33c:	213ece04 	addi	r4,r4,-1224
8110f340:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f344:	0001883a 	nop
8110f348:	e037883a 	mov	sp,fp
8110f34c:	dfc00117 	ldw	ra,4(sp)
8110f350:	df000017 	ldw	fp,0(sp)
8110f354:	dec00204 	addi	sp,sp,8
8110f358:	f800283a 	ret

8110f35c <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
8110f35c:	defffe04 	addi	sp,sp,-8
8110f360:	de00012e 	bgeu	sp,et,8110f368 <vCouldNotRetransmitB64TimeoutTask+0xc>
8110f364:	003b68fa 	trap	3
8110f368:	dfc00115 	stw	ra,4(sp)
8110f36c:	df000015 	stw	fp,0(sp)
8110f370:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)\n");
8110f374:	d0a04f17 	ldw	r2,-32452(gp)
8110f378:	100f883a 	mov	r7,r2
8110f37c:	01800a84 	movi	r6,42
8110f380:	01400044 	movi	r5,1
8110f384:	01204534 	movhi	r4,33044
8110f388:	213ee304 	addi	r4,r4,-1140
8110f38c:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).\n");
8110f390:	d0a04f17 	ldw	r2,-32452(gp)
8110f394:	100f883a 	mov	r7,r2
8110f398:	01801444 	movi	r6,81
8110f39c:	01400044 	movi	r5,1
8110f3a0:	01204534 	movhi	r4,33044
8110f3a4:	213eee04 	addi	r4,r4,-1096
8110f3a8:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f3ac:	0001883a 	nop
8110f3b0:	e037883a 	mov	sp,fp
8110f3b4:	dfc00117 	ldw	ra,4(sp)
8110f3b8:	df000017 	ldw	fp,0(sp)
8110f3bc:	dec00204 	addi	sp,sp,8
8110f3c0:	f800283a 	ret

8110f3c4 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
8110f3c4:	defffe04 	addi	sp,sp,-8
8110f3c8:	de00012e 	bgeu	sp,et,8110f3d0 <vCouldNotRetransmitB128TimeoutTask+0xc>
8110f3cc:	003b68fa 	trap	3
8110f3d0:	dfc00115 	stw	ra,4(sp)
8110f3d4:	df000015 	stw	fp,0(sp)
8110f3d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)\n");
8110f3dc:	d0a04f17 	ldw	r2,-32452(gp)
8110f3e0:	100f883a 	mov	r7,r2
8110f3e4:	01800ac4 	movi	r6,43
8110f3e8:	01400044 	movi	r5,1
8110f3ec:	01204534 	movhi	r4,33044
8110f3f0:	213f0304 	addi	r4,r4,-1012
8110f3f4:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).\n");
8110f3f8:	d0a04f17 	ldw	r2,-32452(gp)
8110f3fc:	100f883a 	mov	r7,r2
8110f400:	01801484 	movi	r6,82
8110f404:	01400044 	movi	r5,1
8110f408:	01204534 	movhi	r4,33044
8110f40c:	213f0e04 	addi	r4,r4,-968
8110f410:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f414:	0001883a 	nop
8110f418:	e037883a 	mov	sp,fp
8110f41c:	dfc00117 	ldw	ra,4(sp)
8110f420:	df000017 	ldw	fp,0(sp)
8110f424:	dec00204 	addi	sp,sp,8
8110f428:	f800283a 	ret

8110f42c <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
8110f42c:	defffe04 	addi	sp,sp,-8
8110f430:	de00012e 	bgeu	sp,et,8110f438 <vFailStartTimerRetransmission+0xc>
8110f434:	003b68fa 	trap	3
8110f438:	dfc00115 	stw	ra,4(sp)
8110f43c:	df000015 	stw	fp,0(sp)
8110f440:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)\n");
8110f444:	d0a04f17 	ldw	r2,-32452(gp)
8110f448:	100f883a 	mov	r7,r2
8110f44c:	01800984 	movi	r6,38
8110f450:	01400044 	movi	r5,1
8110f454:	01204534 	movhi	r4,33044
8110f458:	213f2304 	addi	r4,r4,-884
8110f45c:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.\n");
8110f460:	d0a04f17 	ldw	r2,-32452(gp)
8110f464:	100f883a 	mov	r7,r2
8110f468:	01800d44 	movi	r6,53
8110f46c:	01400044 	movi	r5,1
8110f470:	01204534 	movhi	r4,33044
8110f474:	213f2d04 	addi	r4,r4,-844
8110f478:	11126a00 	call	811126a0 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f47c:	0001883a 	nop
8110f480:	e037883a 	mov	sp,fp
8110f484:	dfc00117 	ldw	ra,4(sp)
8110f488:	df000017 	ldw	fp,0(sp)
8110f48c:	dec00204 	addi	sp,sp,8
8110f490:	f800283a 	ret

8110f494 <vCouldNotSendTurnOff>:


void vCouldNotSendTurnOff( void )
{
8110f494:	defffe04 	addi	sp,sp,-8
8110f498:	de00012e 	bgeu	sp,et,8110f4a0 <vCouldNotSendTurnOff+0xc>
8110f49c:	003b68fa 	trap	3
8110f4a0:	dfc00115 	stw	ra,4(sp)
8110f4a4:	df000015 	stw	fp,0(sp)
8110f4a8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTurnOff. (exit)\n");
8110f4ac:	d0a04f17 	ldw	r2,-32452(gp)
8110f4b0:	100f883a 	mov	r7,r2
8110f4b4:	01800744 	movi	r6,29
8110f4b8:	01400044 	movi	r5,1
8110f4bc:	01204534 	movhi	r4,33044
8110f4c0:	213f3b04 	addi	r4,r4,-788
8110f4c4:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the turn off command. \n");
8110f4c8:	d0a04f17 	ldw	r2,-32452(gp)
8110f4cc:	100f883a 	mov	r7,r2
8110f4d0:	01800984 	movi	r6,38
8110f4d4:	01400044 	movi	r5,1
8110f4d8:	01204534 	movhi	r4,33044
8110f4dc:	213f4304 	addi	r4,r4,-756
8110f4e0:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f4e4:	0001883a 	nop
8110f4e8:	e037883a 	mov	sp,fp
8110f4ec:	dfc00117 	ldw	ra,4(sp)
8110f4f0:	df000017 	ldw	fp,0(sp)
8110f4f4:	dec00204 	addi	sp,sp,8
8110f4f8:	f800283a 	ret

8110f4fc <vCouldNotSendLog>:


void vCouldNotSendLog( void )
{
8110f4fc:	defffe04 	addi	sp,sp,-8
8110f500:	de00012e 	bgeu	sp,et,8110f508 <vCouldNotSendLog+0xc>
8110f504:	003b68fa 	trap	3
8110f508:	dfc00115 	stw	ra,4(sp)
8110f50c:	df000015 	stw	fp,0(sp)
8110f510:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendLog. (exit)\n");
8110f514:	d0a04f17 	ldw	r2,-32452(gp)
8110f518:	100f883a 	mov	r7,r2
8110f51c:	01800644 	movi	r6,25
8110f520:	01400044 	movi	r5,1
8110f524:	01204534 	movhi	r4,33044
8110f528:	213f4d04 	addi	r4,r4,-716
8110f52c:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send log packet to NUC. \n");
8110f530:	d0a04f17 	ldw	r2,-32452(gp)
8110f534:	100f883a 	mov	r7,r2
8110f538:	018008c4 	movi	r6,35
8110f53c:	01400044 	movi	r5,1
8110f540:	01204534 	movhi	r4,33044
8110f544:	213f5404 	addi	r4,r4,-688
8110f548:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f54c:	0001883a 	nop
8110f550:	e037883a 	mov	sp,fp
8110f554:	dfc00117 	ldw	ra,4(sp)
8110f558:	df000017 	ldw	fp,0(sp)
8110f55c:	dec00204 	addi	sp,sp,8
8110f560:	f800283a 	ret

8110f564 <vCouldNotSendTMPusCommand>:


void vCouldNotSendTMPusCommand( const char *cData )
{
8110f564:	defffd04 	addi	sp,sp,-12
8110f568:	de00012e 	bgeu	sp,et,8110f570 <vCouldNotSendTMPusCommand+0xc>
8110f56c:	003b68fa 	trap	3
8110f570:	dfc00215 	stw	ra,8(sp)
8110f574:	df000115 	stw	fp,4(sp)
8110f578:	df000104 	addi	fp,sp,4
8110f57c:	e13fff15 	stw	r4,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTMPusCommand. (exit)\n");
8110f580:	d0a04f17 	ldw	r2,-32452(gp)
8110f584:	100f883a 	mov	r7,r2
8110f588:	01800884 	movi	r6,34
8110f58c:	01400044 	movi	r5,1
8110f590:	01204534 	movhi	r4,33044
8110f594:	213f5d04 	addi	r4,r4,-652
8110f598:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the TM PUS command to NUC. \n");
8110f59c:	d0a04f17 	ldw	r2,-32452(gp)
8110f5a0:	100f883a 	mov	r7,r2
8110f5a4:	01800ac4 	movi	r6,43
8110f5a8:	01400044 	movi	r5,1
8110f5ac:	01204534 	movhi	r4,33044
8110f5b0:	213f6604 	addi	r4,r4,-616
8110f5b4:	11126a00 	call	811126a0 <fwrite>
		debug(fp,"cData");
8110f5b8:	d0a04f17 	ldw	r2,-32452(gp)
8110f5bc:	100f883a 	mov	r7,r2
8110f5c0:	01800144 	movi	r6,5
8110f5c4:	01400044 	movi	r5,1
8110f5c8:	01204534 	movhi	r4,33044
8110f5cc:	213f7104 	addi	r4,r4,-572
8110f5d0:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f5d4:	0001883a 	nop
8110f5d8:	e037883a 	mov	sp,fp
8110f5dc:	dfc00117 	ldw	ra,4(sp)
8110f5e0:	df000017 	ldw	fp,0(sp)
8110f5e4:	dec00204 	addi	sp,sp,8
8110f5e8:	f800283a 	ret

8110f5ec <vWarnCouldNotgetMutexRetrans128>:

/* Not send message is bad but the Simucam will continue to work. */
void vWarnCouldNotgetMutexRetrans128( void )
{
8110f5ec:	defffe04 	addi	sp,sp,-8
8110f5f0:	de00012e 	bgeu	sp,et,8110f5f8 <vWarnCouldNotgetMutexRetrans128+0xc>
8110f5f4:	003b68fa 	trap	3
8110f5f8:	dfc00115 	stw	ra,4(sp)
8110f5fc:	df000015 	stw	fp,0(sp)
8110f600:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vWarnCouldNotgetMutexRetrans128. (exit)\n");
8110f604:	d0a04f17 	ldw	r2,-32452(gp)
8110f608:	100f883a 	mov	r7,r2
8110f60c:	01800a04 	movi	r6,40
8110f610:	01400044 	movi	r5,1
8110f614:	01204534 	movhi	r4,33044
8110f618:	213f7304 	addi	r4,r4,-564
8110f61c:	11126a00 	call	811126a0 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Warning: Could not get the mutex for the retransmission. The message will be lost.\n");
8110f620:	d0a04f17 	ldw	r2,-32452(gp)
8110f624:	100f883a 	mov	r7,r2
8110f628:	018014c4 	movi	r6,83
8110f62c:	01400044 	movi	r5,1
8110f630:	01204534 	movhi	r4,33044
8110f634:	213f7e04 	addi	r4,r4,-520
8110f638:	11126a00 	call	811126a0 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f63c:	0001883a 	nop
8110f640:	e037883a 	mov	sp,fp
8110f644:	dfc00117 	ldw	ra,4(sp)
8110f648:	df000017 	ldw	fp,0(sp)
8110f64c:	dec00204 	addi	sp,sp,8
8110f650:	f800283a 	ret

8110f654 <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110f654:	defffd04 	addi	sp,sp,-12
8110f658:	de00012e 	bgeu	sp,et,8110f660 <vNFeeNotInUse+0xc>
8110f65c:	003b68fa 	trap	3
8110f660:	df000215 	stw	fp,8(sp)
8110f664:	df000204 	addi	fp,sp,8
8110f668:	e13ffe15 	stw	r4,-8(fp)
8110f66c:	2805883a 	mov	r2,r5
8110f670:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
8110f674:	e0bffe17 	ldw	r2,-8(fp)
8110f678:	e0ffff03 	ldbu	r3,-4(fp)
8110f67c:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
8110f680:	e0bffe17 	ldw	r2,-8(fp)
8110f684:	10002015 	stw	zero,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110f688:	e0bffe17 	ldw	r2,-8(fp)
8110f68c:	10002115 	stw	zero,132(r2)
}
8110f690:	0001883a 	nop
8110f694:	e037883a 	mov	sp,fp
8110f698:	df000017 	ldw	fp,0(sp)
8110f69c:	dec00104 	addi	sp,sp,4
8110f6a0:	f800283a 	ret

8110f6a4 <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110f6a4:	defffb04 	addi	sp,sp,-20
8110f6a8:	de00012e 	bgeu	sp,et,8110f6b0 <vNFeeStructureInit+0xc>
8110f6ac:	003b68fa 	trap	3
8110f6b0:	dfc00415 	stw	ra,16(sp)
8110f6b4:	df000315 	stw	fp,12(sp)
8110f6b8:	df000304 	addi	fp,sp,12
8110f6bc:	e13ffe15 	stw	r4,-8(fp)
8110f6c0:	2805883a 	mov	r2,r5
8110f6c4:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
8110f6c8:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
8110f6cc:	e0bffe17 	ldw	r2,-8(fp)
8110f6d0:	e0ffff03 	ldbu	r3,-4(fp)
8110f6d4:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
8110f6d8:	e0bffe17 	ldw	r2,-8(fp)
8110f6dc:	10802804 	addi	r2,r2,160
8110f6e0:	1009883a 	mov	r4,r2
8110f6e4:	110c1500 	call	8110c150 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
8110f6e8:	e13ffe17 	ldw	r4,-8(fp)
8110f6ec:	110f77c0 	call	8110f77c <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
8110f6f0:	e0bffe17 	ldw	r2,-8(fp)
8110f6f4:	00c00044 	movi	r3,1
8110f6f8:	10c02015 	stw	r3,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110f6fc:	e0bffe17 	ldw	r2,-8(fp)
8110f700:	10002115 	stw	zero,132(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
8110f704:	e0bffe17 	ldw	r2,-8(fp)
8110f708:	10002615 	stw	zero,152(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110f70c:	e03ffd05 	stb	zero,-12(fp)
8110f710:	00000906 	br	8110f738 <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
8110f714:	e0bffd03 	ldbu	r2,-12(fp)
8110f718:	e0fffe17 	ldw	r3,-8(fp)
8110f71c:	1885883a 	add	r2,r3,r2
8110f720:	10802504 	addi	r2,r2,148
8110f724:	e0fffd03 	ldbu	r3,-12(fp)
8110f728:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110f72c:	e0bffd03 	ldbu	r2,-12(fp)
8110f730:	10800044 	addi	r2,r2,1
8110f734:	e0bffd05 	stb	r2,-12(fp)
8110f738:	e0bffd03 	ldbu	r2,-12(fp)
8110f73c:	10800130 	cmpltui	r2,r2,4
8110f740:	103ff41e 	bne	r2,zero,8110f714 <__reset+0xfb0ef714>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
8110f744:	e0bffe17 	ldw	r2,-8(fp)
8110f748:	10002715 	stw	zero,156(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
8110f74c:	e0bffe17 	ldw	r2,-8(fp)
8110f750:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bLogging = FALSE;
8110f754:	e0bffe17 	ldw	r2,-8(fp)
8110f758:	10002215 	stw	zero,136(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
8110f75c:	e0bffe17 	ldw	r2,-8(fp)
8110f760:	10002415 	stw	zero,144(r2)

}
8110f764:	0001883a 	nop
8110f768:	e037883a 	mov	sp,fp
8110f76c:	dfc00117 	ldw	ra,4(sp)
8110f770:	df000017 	ldw	fp,0(sp)
8110f774:	dec00204 	addi	sp,sp,8
8110f778:	f800283a 	ret

8110f77c <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
8110f77c:	defff404 	addi	sp,sp,-48
8110f780:	de00012e 	bgeu	sp,et,8110f788 <vUpdateMemMapFEE+0xc>
8110f784:	003b68fa 	trap	3
8110f788:	df000b15 	stw	fp,44(sp)
8110f78c:	df000b04 	addi	fp,sp,44
8110f790:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
8110f794:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
8110f798:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
8110f79c:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
8110f7a0:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
8110f7a4:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
8110f7a8:	e03ff615 	stw	zero,-40(fp)
    unsigned char ucPixelsInLastBlockL = 0;
8110f7ac:	e03ff705 	stb	zero,-36(fp)
    unsigned char ucShiftsL = 0;
8110f7b0:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
8110f7b4:	e03ff745 	stb	zero,-35(fp)
    unsigned long ulLastOffset = 0;
8110f7b8:	e03ff815 	stw	zero,-32(fp)
    unsigned long ulStepHalfCCD = 0;
8110f7bc:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
8110f7c0:	e17fff17 	ldw	r5,-4(fp)
8110f7c4:	01035a34 	movhi	r4,3432
8110f7c8:	21348c04 	addi	r4,r4,-11728
8110f7cc:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
8110f7d0:	e13fff17 	ldw	r4,-4(fp)
8110f7d4:	21000003 	ldbu	r4,0(r4)
8110f7d8:	21403fcc 	andi	r5,r4,255
8110f7dc:	01035a34 	movhi	r4,3432
8110f7e0:	21348c04 	addi	r4,r4,-11728
8110f7e4:	2909383a 	mul	r4,r5,r4
8110f7e8:	200b883a 	mov	r5,r4
8110f7ec:	e13fff17 	ldw	r4,-4(fp)
8110f7f0:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
8110f7f4:	e13fff17 	ldw	r4,-4(fp)
8110f7f8:	21400117 	ldw	r5,4(r4)
8110f7fc:	01033234 	movhi	r4,3272
8110f800:	21348c04 	addi	r4,r4,-11728
8110f804:	290b883a 	add	r5,r5,r4
8110f808:	e13fff17 	ldw	r4,-4(fp)
8110f80c:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110f810:	e13fff17 	ldw	r4,-4(fp)
8110f814:	21002a0b 	ldhu	r4,168(r4)
8110f818:	217fffcc 	andi	r5,r4,65535
8110f81c:	e13fff17 	ldw	r4,-4(fp)
8110f820:	2100290b 	ldhu	r4,164(r4)
8110f824:	213fffcc 	andi	r4,r4,65535
8110f828:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
8110f82c:	e13fff17 	ldw	r4,-4(fp)
8110f830:	2100298b 	ldhu	r4,166(r4)
8110f834:	21bfffcc 	andi	r6,r4,65535
8110f838:	e13fff17 	ldw	r4,-4(fp)
8110f83c:	2100288b 	ldhu	r4,162(r4)
8110f840:	213fffcc 	andi	r4,r4,65535
8110f844:	310d883a 	add	r6,r6,r4
8110f848:	e13fff17 	ldw	r4,-4(fp)
8110f84c:	2100280b 	ldhu	r4,160(r4)
8110f850:	213fffcc 	andi	r4,r4,65535
8110f854:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110f858:	2909383a 	mul	r4,r5,r4
8110f85c:	e13ff915 	stw	r4,-28(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
8110f860:	e13ff917 	ldw	r4,-28(fp)
8110f864:	2109883a 	add	r4,r4,r4
8110f868:	200b883a 	mov	r5,r4
8110f86c:	e13fff17 	ldw	r4,-4(fp)
8110f870:	2140048d 	sth	r5,18(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
8110f874:	e13fff17 	ldw	r4,-4(fp)
8110f878:	2100048b 	ldhu	r4,18(r4)
8110f87c:	213fffcc 	andi	r4,r4,65535
8110f880:	2008d0fa 	srli	r4,r4,3
8110f884:	213fffcc 	andi	r4,r4,65535
8110f888:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
8110f88c:	e13fff17 	ldw	r4,-4(fp)
8110f890:	2100048b 	ldhu	r4,18(r4)
8110f894:	213fffcc 	andi	r4,r4,65535
8110f898:	210001cc 	andi	r4,r4,7
8110f89c:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
8110f8a0:	e13ffb17 	ldw	r4,-20(fp)
8110f8a4:	20001326 	beq	r4,zero,8110f8f4 <vUpdateMemMapFEE+0x178>
        ulMemLinesL = ulMemLinesL + 1;
8110f8a8:	e13ff517 	ldw	r4,-44(fp)
8110f8ac:	21000044 	addi	r4,r4,1
8110f8b0:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
8110f8b4:	e13fff17 	ldw	r4,-4(fp)
8110f8b8:	2100048b 	ldhu	r4,18(r4)
8110f8bc:	e17ffb17 	ldw	r5,-20(fp)
8110f8c0:	2149c83a 	sub	r4,r4,r5
8110f8c4:	21000204 	addi	r4,r4,8
8110f8c8:	200b883a 	mov	r5,r4
8110f8cc:	e13fff17 	ldw	r4,-4(fp)
8110f8d0:	2140048d 	sth	r5,18(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
8110f8d4:	e13ffb17 	ldw	r4,-20(fp)
8110f8d8:	200b883a 	mov	r5,r4
8110f8dc:	01000204 	movi	r4,8
8110f8e0:	2149c83a 	sub	r4,r4,r5
8110f8e4:	200b883a 	mov	r5,r4
8110f8e8:	e13fff17 	ldw	r4,-4(fp)
8110f8ec:	21400505 	stb	r5,20(r4)
8110f8f0:	00000206 	br	8110f8fc <vUpdateMemMapFEE+0x180>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
8110f8f4:	e13fff17 	ldw	r4,-4(fp)
8110f8f8:	20000505 	stb	zero,20(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
8110f8fc:	e13ff517 	ldw	r4,-44(fp)
8110f900:	2008d13a 	srli	r4,r4,4
8110f904:	e13ff615 	stw	r4,-40(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
8110f908:	e13ff517 	ldw	r4,-44(fp)
8110f90c:	210003cc 	andi	r4,r4,15
8110f910:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
8110f914:	e13ffc17 	ldw	r4,-16(fp)
8110f918:	20000b26 	beq	r4,zero,8110f948 <vUpdateMemMapFEE+0x1cc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
8110f91c:	e13ff617 	ldw	r4,-40(fp)
8110f920:	21000044 	addi	r4,r4,1
8110f924:	e13ff615 	stw	r4,-40(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
8110f928:	e17ff517 	ldw	r5,-44(fp)
8110f92c:	e13ffc17 	ldw	r4,-16(fp)
8110f930:	290bc83a 	sub	r5,r5,r4
8110f934:	e13ff617 	ldw	r4,-40(fp)
8110f938:	2909883a 	add	r4,r5,r4
8110f93c:	21000404 	addi	r4,r4,16
8110f940:	e13ffa15 	stw	r4,-24(fp)
8110f944:	00000406 	br	8110f958 <vUpdateMemMapFEE+0x1dc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
8110f948:	e17ff517 	ldw	r5,-44(fp)
8110f94c:	e13ff617 	ldw	r4,-40(fp)
8110f950:	2909883a 	add	r4,r5,r4
8110f954:	e13ffa15 	stw	r4,-24(fp)
    }

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
8110f958:	e13ffb17 	ldw	r4,-20(fp)
8110f95c:	20000926 	beq	r4,zero,8110f984 <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
8110f960:	e13ffc17 	ldw	r4,-16(fp)
8110f964:	2109883a 	add	r4,r4,r4
8110f968:	2109883a 	add	r4,r4,r4
8110f96c:	200b883a 	mov	r5,r4
8110f970:	e13ffb17 	ldw	r4,-20(fp)
8110f974:	2008d07a 	srli	r4,r4,1
8110f978:	2909883a 	add	r4,r5,r4
8110f97c:	e13ff705 	stb	r4,-36(fp)
8110f980:	00000406 	br	8110f994 <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
8110f984:	e13ffc17 	ldw	r4,-16(fp)
8110f988:	2109883a 	add	r4,r4,r4
8110f98c:	2109883a 	add	r4,r4,r4
8110f990:	e13ff705 	stb	r4,-36(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
8110f994:	e13ff703 	ldbu	r4,-36(fp)
8110f998:	01401004 	movi	r5,64
8110f99c:	2909c83a 	sub	r4,r5,r4
8110f9a0:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
8110f9a4:	e13ffd03 	ldbu	r4,-12(fp)
8110f9a8:	217ff804 	addi	r5,r4,-32
8110f9ac:	28000416 	blt	r5,zero,8110f9c0 <vUpdateMemMapFEE+0x244>
8110f9b0:	013fffc4 	movi	r4,-1
8110f9b4:	2144d83a 	srl	r2,r4,r5
8110f9b8:	0007883a 	mov	r3,zero
8110f9bc:	00000a06 	br	8110f9e8 <vUpdateMemMapFEE+0x26c>
8110f9c0:	017fffc4 	movi	r5,-1
8110f9c4:	280c907a 	slli	r6,r5,1
8110f9c8:	014007c4 	movi	r5,31
8110f9cc:	290bc83a 	sub	r5,r5,r4
8110f9d0:	314a983a 	sll	r5,r6,r5
8110f9d4:	01bfffc4 	movi	r6,-1
8110f9d8:	3104d83a 	srl	r2,r6,r4
8110f9dc:	2884b03a 	or	r2,r5,r2
8110f9e0:	017fffc4 	movi	r5,-1
8110f9e4:	2906d83a 	srl	r3,r5,r4
8110f9e8:	e13fff17 	ldw	r4,-4(fp)
8110f9ec:	20800615 	stw	r2,24(r4)
8110f9f0:	20c00715 	stw	r3,28(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
8110f9f4:	e0bff617 	ldw	r2,-40(fp)
8110f9f8:	1007883a 	mov	r3,r2
8110f9fc:	e0bfff17 	ldw	r2,-4(fp)
8110fa00:	10c0040d 	sth	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
8110fa04:	e0bfff17 	ldw	r2,-4(fp)
8110fa08:	10c00117 	ldw	r3,4(r2)
8110fa0c:	008004b4 	movhi	r2,18
8110fa10:	10a40004 	addi	r2,r2,-28672
8110fa14:	1885883a 	add	r2,r3,r2
8110fa18:	e0bff815 	stw	r2,-32(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
8110fa1c:	e0bfff17 	ldw	r2,-4(fp)
8110fa20:	1080048b 	ldhu	r2,18(r2)
8110fa24:	10ffffcc 	andi	r3,r2,65535
8110fa28:	008000b4 	movhi	r2,2
8110fa2c:	10a40004 	addi	r2,r2,-28672
8110fa30:	1885883a 	add	r2,r3,r2
8110fa34:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110fa38:	e03ff745 	stb	zero,-35(fp)
8110fa3c:	00001906 	br	8110faa4 <vUpdateMemMapFEE+0x328>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
8110fa40:	e0bff743 	ldbu	r2,-35(fp)
8110fa44:	e0ffff17 	ldw	r3,-4(fp)
8110fa48:	10800624 	muli	r2,r2,24
8110fa4c:	1885883a 	add	r2,r3,r2
8110fa50:	10800804 	addi	r2,r2,32
8110fa54:	e0fff817 	ldw	r3,-32(fp)
8110fa58:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110fa5c:	e0fff817 	ldw	r3,-32(fp)
8110fa60:	e0bffe17 	ldw	r2,-8(fp)
8110fa64:	1885883a 	add	r2,r3,r2
8110fa68:	e0bff815 	stw	r2,-32(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
8110fa6c:	e0bff743 	ldbu	r2,-35(fp)
8110fa70:	e0ffff17 	ldw	r3,-4(fp)
8110fa74:	10800624 	muli	r2,r2,24
8110fa78:	1885883a 	add	r2,r3,r2
8110fa7c:	10800b04 	addi	r2,r2,44
8110fa80:	e0fff817 	ldw	r3,-32(fp)
8110fa84:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110fa88:	e0fff817 	ldw	r3,-32(fp)
8110fa8c:	e0bffe17 	ldw	r2,-8(fp)
8110fa90:	1885883a 	add	r2,r3,r2
8110fa94:	e0bff815 	stw	r2,-32(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110fa98:	e0bff743 	ldbu	r2,-35(fp)
8110fa9c:	10800044 	addi	r2,r2,1
8110faa0:	e0bff745 	stb	r2,-35(fp)
8110faa4:	e0bff743 	ldbu	r2,-35(fp)
8110faa8:	10800130 	cmpltui	r2,r2,4
8110faac:	103fe41e 	bne	r2,zero,8110fa40 <__reset+0xfb0efa40>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
8110fab0:	0001883a 	nop
8110fab4:	e037883a 	mov	sp,fp
8110fab8:	df000017 	ldw	fp,0(sp)
8110fabc:	dec00104 	addi	sp,sp,4
8110fac0:	f800283a 	ret

8110fac4 <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
8110fac4:	defffe04 	addi	sp,sp,-8
8110fac8:	de00012e 	bgeu	sp,et,8110fad0 <vFeeSpwRMAPLoadDefault+0xc>
8110facc:	003b68fa 	trap	3
8110fad0:	df000115 	stw	fp,4(sp)
8110fad4:	df000104 	addi	fp,sp,4
8110fad8:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
8110fadc:	0001883a 	nop
8110fae0:	e037883a 	mov	sp,fp
8110fae4:	df000017 	ldw	fp,0(sp)
8110fae8:	dec00104 	addi	sp,sp,4
8110faec:	f800283a 	ret

8110faf0 <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
8110faf0:	defffe04 	addi	sp,sp,-8
8110faf4:	de00012e 	bgeu	sp,et,8110fafc <vFeeSpwRMAPChangeConfig+0xc>
8110faf8:	003b68fa 	trap	3
8110fafc:	df000115 	stw	fp,4(sp)
8110fb00:	df000104 	addi	fp,sp,4
8110fb04:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
8110fb08:	0001883a 	nop
8110fb0c:	e037883a 	mov	sp,fp
8110fb10:	df000017 	ldw	fp,0(sp)
8110fb14:	dec00104 	addi	sp,sp,4
8110fb18:	f800283a 	ret

8110fb1c <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
8110fb1c:	defffe04 	addi	sp,sp,-8
8110fb20:	de00012e 	bgeu	sp,et,8110fb28 <vFeeSpwRMAPChangeDefault+0xc>
8110fb24:	003b68fa 	trap	3
8110fb28:	df000115 	stw	fp,4(sp)
8110fb2c:	df000104 	addi	fp,sp,4
8110fb30:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
8110fb34:	0001883a 	nop
8110fb38:	e037883a 	mov	sp,fp
8110fb3c:	df000017 	ldw	fp,0(sp)
8110fb40:	dec00104 	addi	sp,sp,4
8110fb44:	f800283a 	ret

8110fb48 <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
8110fb48:	defffe04 	addi	sp,sp,-8
8110fb4c:	de00012e 	bgeu	sp,et,8110fb54 <cFeeSpwChannelEnable+0xc>
8110fb50:	003b68fa 	trap	3
8110fb54:	df000115 	stw	fp,4(sp)
8110fb58:	df000104 	addi	fp,sp,4
8110fb5c:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110fb60:	0001883a 	nop
8110fb64:	e037883a 	mov	sp,fp
8110fb68:	df000017 	ldw	fp,0(sp)
8110fb6c:	dec00104 	addi	sp,sp,4
8110fb70:	f800283a 	ret

8110fb74 <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
8110fb74:	defffe04 	addi	sp,sp,-8
8110fb78:	de00012e 	bgeu	sp,et,8110fb80 <cFeeSpwChannelDisable+0xc>
8110fb7c:	003b68fa 	trap	3
8110fb80:	df000115 	stw	fp,4(sp)
8110fb84:	df000104 	addi	fp,sp,4
8110fb88:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110fb8c:	0001883a 	nop
8110fb90:	e037883a 	mov	sp,fp
8110fb94:	df000017 	ldw	fp,0(sp)
8110fb98:	dec00104 	addi	sp,sp,4
8110fb9c:	f800283a 	ret

8110fba0 <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
8110fba0:	defffe04 	addi	sp,sp,-8
8110fba4:	de00012e 	bgeu	sp,et,8110fbac <cFeeRMAPDump+0xc>
8110fba8:	003b68fa 	trap	3
8110fbac:	df000115 	stw	fp,4(sp)
8110fbb0:	df000104 	addi	fp,sp,4
8110fbb4:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
8110fbb8:	0001883a 	nop
8110fbbc:	e037883a 	mov	sp,fp
8110fbc0:	df000017 	ldw	fp,0(sp)
8110fbc4:	dec00104 	addi	sp,sp,4
8110fbc8:	f800283a 	ret

8110fbcc <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
8110fbcc:	defffe04 	addi	sp,sp,-8
8110fbd0:	de00012e 	bgeu	sp,et,8110fbd8 <cFeeRMAPEchoingEnable+0xc>
8110fbd4:	003b68fa 	trap	3
8110fbd8:	df000115 	stw	fp,4(sp)
8110fbdc:	df000104 	addi	fp,sp,4
8110fbe0:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
8110fbe4:	e0bfff17 	ldw	r2,-4(fp)
8110fbe8:	00c00044 	movi	r3,1
8110fbec:	10c02315 	stw	r3,140(r2)
}
8110fbf0:	0001883a 	nop
8110fbf4:	e037883a 	mov	sp,fp
8110fbf8:	df000017 	ldw	fp,0(sp)
8110fbfc:	dec00104 	addi	sp,sp,4
8110fc00:	f800283a 	ret

8110fc04 <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
8110fc04:	defffe04 	addi	sp,sp,-8
8110fc08:	de00012e 	bgeu	sp,et,8110fc10 <cFeeRMAPEchoingDisable+0xc>
8110fc0c:	003b68fa 	trap	3
8110fc10:	df000115 	stw	fp,4(sp)
8110fc14:	df000104 	addi	fp,sp,4
8110fc18:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
8110fc1c:	e0bfff17 	ldw	r2,-4(fp)
8110fc20:	10002315 	stw	zero,140(r2)
}
8110fc24:	0001883a 	nop
8110fc28:	e037883a 	mov	sp,fp
8110fc2c:	df000017 	ldw	fp,0(sp)
8110fc30:	dec00104 	addi	sp,sp,4
8110fc34:	f800283a 	ret

8110fc38 <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
8110fc38:	defffe04 	addi	sp,sp,-8
8110fc3c:	de00012e 	bgeu	sp,et,8110fc44 <cFeeRMAPLogEnable+0xc>
8110fc40:	003b68fa 	trap	3
8110fc44:	df000115 	stw	fp,4(sp)
8110fc48:	df000104 	addi	fp,sp,4
8110fc4c:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
8110fc50:	e0bfff17 	ldw	r2,-4(fp)
8110fc54:	00c00044 	movi	r3,1
8110fc58:	10c02215 	stw	r3,136(r2)
}
8110fc5c:	0001883a 	nop
8110fc60:	e037883a 	mov	sp,fp
8110fc64:	df000017 	ldw	fp,0(sp)
8110fc68:	dec00104 	addi	sp,sp,4
8110fc6c:	f800283a 	ret

8110fc70 <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
8110fc70:	defffe04 	addi	sp,sp,-8
8110fc74:	de00012e 	bgeu	sp,et,8110fc7c <cFeeRMAPLogDisable+0xc>
8110fc78:	003b68fa 	trap	3
8110fc7c:	df000115 	stw	fp,4(sp)
8110fc80:	df000104 	addi	fp,sp,4
8110fc84:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
8110fc88:	e0bfff17 	ldw	r2,-4(fp)
8110fc8c:	10002215 	stw	zero,136(r2)
}
8110fc90:	0001883a 	nop
8110fc94:	e037883a 	mov	sp,fp
8110fc98:	df000017 	ldw	fp,0(sp)
8110fc9c:	dec00104 	addi	sp,sp,4
8110fca0:	f800283a 	ret

8110fca4 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110fca4:	defffe04 	addi	sp,sp,-8
8110fca8:	de00012e 	bgeu	sp,et,8110fcb0 <vInitSimucamBasicHW+0xc>
8110fcac:	003b68fa 	trap	3
8110fcb0:	dfc00115 	stw	ra,4(sp)
8110fcb4:	df000015 	stw	fp,0(sp)
8110fcb8:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110fcbc:	01403fc4 	movi	r5,255
8110fcc0:	0009883a 	mov	r4,zero
8110fcc4:	11061440 	call	81106144 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110fcc8:	01400834 	movhi	r5,32
8110fccc:	297fffc4 	addi	r5,r5,-1
8110fcd0:	0009883a 	mov	r4,zero
8110fcd4:	11061c40 	call	811061c4 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110fcd8:	01400074 	movhi	r5,1
8110fcdc:	01000044 	movi	r4,1
8110fce0:	11061c40 	call	811061c4 <bSetPainelLeds>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110fce4:	0009883a 	mov	r4,zero
8110fce8:	11077a00 	call	811077a0 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110fcec:	0009883a 	mov	r4,zero
8110fcf0:	11078700 	call	81107870 <bSSDisplayUpdate>

}
8110fcf4:	0001883a 	nop
8110fcf8:	e037883a 	mov	sp,fp
8110fcfc:	dfc00117 	ldw	ra,4(sp)
8110fd00:	df000017 	ldw	fp,0(sp)
8110fd04:	dec00204 	addi	sp,sp,8
8110fd08:	f800283a 	ret

8110fd0c <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110fd0c:	defffd04 	addi	sp,sp,-12
8110fd10:	de00012e 	bgeu	sp,et,8110fd18 <bLogWriteSDCard+0xc>
8110fd14:	003b68fa 	trap	3
8110fd18:	df000215 	stw	fp,8(sp)
8110fd1c:	df000204 	addi	fp,sp,8
8110fd20:	e13ffe15 	stw	r4,-8(fp)
8110fd24:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110fd28:	00800044 	movi	r2,1
}
8110fd2c:	e037883a 	mov	sp,fp
8110fd30:	df000017 	ldw	fp,0(sp)
8110fd34:	dec00104 	addi	sp,sp,4
8110fd38:	f800283a 	ret

8110fd3c <vLogWriteNUC>:

/* Prefer to use directly vSendLog, if there's any error use this function */
void vLogWriteNUC ( const char * cDataIn )
{
8110fd3c:	deffe004 	addi	sp,sp,-128
8110fd40:	de00012e 	bgeu	sp,et,8110fd48 <vLogWriteNUC+0xc>
8110fd44:	003b68fa 	trap	3
8110fd48:	dfc01f15 	stw	ra,124(sp)
8110fd4c:	df001e15 	stw	fp,120(sp)
8110fd50:	df001e04 	addi	fp,sp,120
8110fd54:	e13fff15 	stw	r4,-4(fp)
	char cTemp[114] = "";
8110fd58:	e03fe215 	stw	zero,-120(fp)
8110fd5c:	e0bfe304 	addi	r2,fp,-116
8110fd60:	00c01b84 	movi	r3,110
8110fd64:	180d883a 	mov	r6,r3
8110fd68:	000b883a 	mov	r5,zero
8110fd6c:	1009883a 	mov	r4,r2
8110fd70:	11132040 	call	81113204 <memset>
	memset(cTemp,0,114);
8110fd74:	01801c84 	movi	r6,114
8110fd78:	000b883a 	mov	r5,zero
8110fd7c:	e13fe204 	addi	r4,fp,-120
8110fd80:	11132040 	call	81113204 <memset>
	memcpy(cTemp,cDataIn, min_sim( strlen(cDataIn), 113 ) ); /* 113 to let a zero terminator in the worst case (truc the message) */
8110fd84:	e13fff17 	ldw	r4,-4(fp)
8110fd88:	1113ba80 	call	81113ba8 <strlen>
8110fd8c:	10801c68 	cmpgeui	r2,r2,113
8110fd90:	1000031e 	bne	r2,zero,8110fda0 <vLogWriteNUC+0x64>
8110fd94:	e13fff17 	ldw	r4,-4(fp)
8110fd98:	1113ba80 	call	81113ba8 <strlen>
8110fd9c:	00000106 	br	8110fda4 <vLogWriteNUC+0x68>
8110fda0:	00801c44 	movi	r2,113
8110fda4:	100d883a 	mov	r6,r2
8110fda8:	e17fff17 	ldw	r5,-4(fp)
8110fdac:	e13fe204 	addi	r4,fp,-120
8110fdb0:	11130b40 	call	811130b4 <memcpy>
	vSendLog ( cDataIn );
8110fdb4:	e13fff17 	ldw	r4,-4(fp)
8110fdb8:	110d0200 	call	8110d020 <vSendLog>
}
8110fdbc:	0001883a 	nop
8110fdc0:	e037883a 	mov	sp,fp
8110fdc4:	dfc00117 	ldw	ra,4(sp)
8110fdc8:	df000017 	ldw	fp,0(sp)
8110fdcc:	dec00204 	addi	sp,sp,8
8110fdd0:	f800283a 	ret

8110fdd4 <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
8110fdd4:	defffc04 	addi	sp,sp,-16
8110fdd8:	de00012e 	bgeu	sp,et,8110fde0 <vSimucamStructureInit+0xc>
8110fddc:	003b68fa 	trap	3
8110fde0:	dfc00315 	stw	ra,12(sp)
8110fde4:	df000215 	stw	fp,8(sp)
8110fde8:	df000204 	addi	fp,sp,8
8110fdec:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
8110fdf0:	e03ffe05 	stb	zero,-8(fp)

    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
8110fdf4:	e0bfff17 	ldw	r2,-4(fp)
8110fdf8:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
8110fdfc:	e0bfff17 	ldw	r2,-4(fp)
8110fe00:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
8110fe04:	e13fff17 	ldw	r4,-4(fp)
8110fe08:	110ff700 	call	8110ff70 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
8110fe0c:	e13fff17 	ldw	r4,-4(fp)
8110fe10:	11100140 	call	81110014 <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
8110fe14:	e13fff17 	ldw	r4,-4(fp)
8110fe18:	11100bc0 	call	811100bc <vLoadDefaultSyncSource>
    /* Reset TimeCode */
    vResetTimeCode( xMeb );
8110fe1c:	e13fff17 	ldw	r4,-4(fp)
8110fe20:	111019c0 	call	8111019c <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xMeb );
8110fe24:	e13fff17 	ldw	r4,-4(fp)
8110fe28:	11102740 	call	81110274 <vLoadDefaultIdNFEEMaster>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
8110fe2c:	e13fff17 	ldw	r4,-4(fp)
8110fe30:	11101d00 	call	811101d0 <vLoadDefaultAutoResetSync>

    // LoadNumberOfNFeesSDCard();
    /* todo: Load from SDCard for now is Hardcoded for 4 instances of NFEE */
    xMeb->ucNofFeesInUse = 2;
8110fe34:	e0bfff17 	ldw	r2,-4(fp)
8110fe38:	00c00084 	movi	r3,2
8110fe3c:	10c00205 	stb	r3,8(r2)

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
8110fe40:	e0bfff17 	ldw	r2,-4(fp)
8110fe44:	10800017 	ldw	r2,0(r2)
8110fe48:	1000391e 	bne	r2,zero,8110ff30 <vSimucamStructureInit+0x15c>
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110fe4c:	e03ffe05 	stb	zero,-8(fp)
8110fe50:	00003306 	br	8110ff20 <vSimucamStructureInit+0x14c>
            if ( ucIL < xMeb->ucNofFeesInUse ) {
8110fe54:	e0bfff17 	ldw	r2,-4(fp)
8110fe58:	10800203 	ldbu	r2,8(r2)
8110fe5c:	10803fcc 	andi	r2,r2,255
8110fe60:	e0fffe03 	ldbu	r3,-8(fp)
8110fe64:	18800a2e 	bgeu	r3,r2,8110fe90 <vSimucamStructureInit+0xbc>
                vNFeeStructureInit( &xMeb->xNfee[ ucIL ], ucIL);
8110fe68:	e0bffe03 	ldbu	r2,-8(fp)
8110fe6c:	10802b24 	muli	r2,r2,172
8110fe70:	10800304 	addi	r2,r2,12
8110fe74:	e0ffff17 	ldw	r3,-4(fp)
8110fe78:	1885883a 	add	r2,r3,r2
8110fe7c:	e0fffe03 	ldbu	r3,-8(fp)
8110fe80:	180b883a 	mov	r5,r3
8110fe84:	1009883a 	mov	r4,r2
8110fe88:	110f6a40 	call	8110f6a4 <vNFeeStructureInit>
8110fe8c:	00000906 	br	8110feb4 <vSimucamStructureInit+0xe0>
            } else {
                vNFeeNotInUse( &xMeb->xNfee[ ucIL ], ucIL);
8110fe90:	e0bffe03 	ldbu	r2,-8(fp)
8110fe94:	10802b24 	muli	r2,r2,172
8110fe98:	10800304 	addi	r2,r2,12
8110fe9c:	e0ffff17 	ldw	r3,-4(fp)
8110fea0:	1885883a 	add	r2,r3,r2
8110fea4:	e0fffe03 	ldbu	r3,-8(fp)
8110fea8:	180b883a 	mov	r5,r3
8110feac:	1009883a 	mov	r4,r2
8110feb0:	110f6540 	call	8110f654 <vNFeeNotInUse>
            }
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
8110feb4:	e0bffe03 	ldbu	r2,-8(fp)
8110feb8:	e0fffe03 	ldbu	r3,-8(fp)
8110febc:	18c02b24 	muli	r3,r3,172
8110fec0:	18c02304 	addi	r3,r3,140
8110fec4:	e13fff17 	ldw	r4,-4(fp)
8110fec8:	20c7883a 	add	r3,r4,r3
8110fecc:	e13fff17 	ldw	r4,-4(fp)
8110fed0:	108042c4 	addi	r2,r2,267
8110fed4:	1085883a 	add	r2,r2,r2
8110fed8:	1085883a 	add	r2,r2,r2
8110fedc:	2085883a 	add	r2,r4,r2
8110fee0:	10c00015 	stw	r3,0(r2)
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
8110fee4:	e0bffe03 	ldbu	r2,-8(fp)
8110fee8:	e0fffe03 	ldbu	r3,-8(fp)
8110feec:	18c02b24 	muli	r3,r3,172
8110fef0:	18c02404 	addi	r3,r3,144
8110fef4:	e13fff17 	ldw	r4,-4(fp)
8110fef8:	20c7883a 	add	r3,r4,r3
8110fefc:	e13fff17 	ldw	r4,-4(fp)
8110ff00:	10804444 	addi	r2,r2,273
8110ff04:	1085883a 	add	r2,r2,r2
8110ff08:	1085883a 	add	r2,r2,r2
8110ff0c:	2085883a 	add	r2,r4,r2
8110ff10:	10c00015 	stw	r3,0(r2)
    xMeb->ucNofFeesInUse = 2;

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110ff14:	e0bffe03 	ldbu	r2,-8(fp)
8110ff18:	10800044 	addi	r2,r2,1
8110ff1c:	e0bffe05 	stb	r2,-8(fp)
8110ff20:	e0bffe03 	ldbu	r2,-8(fp)
8110ff24:	108001b0 	cmpltui	r2,r2,6
8110ff28:	103fca1e 	bne	r2,zero,8110fe54 <__reset+0xfb0efe54>
8110ff2c:	00000806 	br	8110ff50 <vSimucamStructureInit+0x17c>
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
        }
    } else {
        /* Are Fast Fee instances */
        for ( ucIL = 0; ucIL < N_OF_FastFEE; ucIL++ ) {
8110ff30:	e03ffe05 	stb	zero,-8(fp)
8110ff34:	00000306 	br	8110ff44 <vSimucamStructureInit+0x170>
8110ff38:	e0bffe03 	ldbu	r2,-8(fp)
8110ff3c:	10800044 	addi	r2,r2,1
8110ff40:	e0bffe05 	stb	r2,-8(fp)
8110ff44:	e0bffe03 	ldbu	r2,-8(fp)
8110ff48:	108000b0 	cmpltui	r2,r2,2
8110ff4c:	103ffa1e 	bne	r2,zero,8110ff38 <__reset+0xfb0eff38>
            }            
        }
    }

    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
8110ff50:	e0bfff17 	ldw	r2,-4(fp)
8110ff54:	10010505 	stb	zero,1044(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
8110ff58:	0001883a 	nop
8110ff5c:	e037883a 	mov	sp,fp
8110ff60:	dfc00117 	ldw	ra,4(sp)
8110ff64:	df000017 	ldw	fp,0(sp)
8110ff68:	dec00204 	addi	sp,sp,8
8110ff6c:	f800283a 	ret

8110ff70 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
8110ff70:	defffe04 	addi	sp,sp,-8
8110ff74:	de00012e 	bgeu	sp,et,8110ff7c <vLoadDefaultEPValue+0xc>
8110ff78:	003b68fa 	trap	3
8110ff7c:	df000115 	stw	fp,4(sp)
8110ff80:	df000104 	addi	fp,sp,4
8110ff84:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
8110ff88:	e0bfff17 	ldw	r2,-4(fp)
8110ff8c:	00d07234 	movhi	r3,16840
8110ff90:	10c10615 	stw	r3,1048(r2)
}
8110ff94:	0001883a 	nop
8110ff98:	e037883a 	mov	sp,fp
8110ff9c:	df000017 	ldw	fp,0(sp)
8110ffa0:	dec00104 	addi	sp,sp,4
8110ffa4:	f800283a 	ret

8110ffa8 <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110ffa8:	defffd04 	addi	sp,sp,-12
8110ffac:	de00012e 	bgeu	sp,et,8110ffb4 <vChangeEPValue+0xc>
8110ffb0:	003b68fa 	trap	3
8110ffb4:	df000215 	stw	fp,8(sp)
8110ffb8:	df000204 	addi	fp,sp,8
8110ffbc:	e13ffe15 	stw	r4,-8(fp)
8110ffc0:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
8110ffc4:	e0bffe17 	ldw	r2,-8(fp)
8110ffc8:	e0ffff17 	ldw	r3,-4(fp)
8110ffcc:	10c10615 	stw	r3,1048(r2)
}
8110ffd0:	0001883a 	nop
8110ffd4:	e037883a 	mov	sp,fp
8110ffd8:	df000017 	ldw	fp,0(sp)
8110ffdc:	dec00104 	addi	sp,sp,4
8110ffe0:	f800283a 	ret

8110ffe4 <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110ffe4:	defffd04 	addi	sp,sp,-12
8110ffe8:	de00012e 	bgeu	sp,et,8110fff0 <vChangeDefaultEPValue+0xc>
8110ffec:	003b68fa 	trap	3
8110fff0:	df000215 	stw	fp,8(sp)
8110fff4:	df000204 	addi	fp,sp,8
8110fff8:	e13ffe15 	stw	r4,-8(fp)
8110fffc:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
81110000:	0001883a 	nop
81110004:	e037883a 	mov	sp,fp
81110008:	df000017 	ldw	fp,0(sp)
8111000c:	dec00104 	addi	sp,sp,4
81110010:	f800283a 	ret

81110014 <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
81110014:	defffe04 	addi	sp,sp,-8
81110018:	de00012e 	bgeu	sp,et,81110020 <vLoadDefaultRTValue+0xc>
8111001c:	003b68fa 	trap	3
81110020:	df000115 	stw	fp,4(sp)
81110024:	df000104 	addi	fp,sp,4
81110028:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
8111002c:	e0ffff17 	ldw	r3,-4(fp)
81110030:	00901eb4 	movhi	r2,16506
81110034:	10a66684 	addi	r2,r2,-26214
81110038:	18810715 	stw	r2,1052(r3)
}
8111003c:	0001883a 	nop
81110040:	e037883a 	mov	sp,fp
81110044:	df000017 	ldw	fp,0(sp)
81110048:	dec00104 	addi	sp,sp,4
8111004c:	f800283a 	ret

81110050 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
81110050:	defffd04 	addi	sp,sp,-12
81110054:	de00012e 	bgeu	sp,et,8111005c <vChangeRTValue+0xc>
81110058:	003b68fa 	trap	3
8111005c:	df000215 	stw	fp,8(sp)
81110060:	df000204 	addi	fp,sp,8
81110064:	e13ffe15 	stw	r4,-8(fp)
81110068:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
8111006c:	e0bffe17 	ldw	r2,-8(fp)
81110070:	e0ffff17 	ldw	r3,-4(fp)
81110074:	10c10715 	stw	r3,1052(r2)
}
81110078:	0001883a 	nop
8111007c:	e037883a 	mov	sp,fp
81110080:	df000017 	ldw	fp,0(sp)
81110084:	dec00104 	addi	sp,sp,4
81110088:	f800283a 	ret

8111008c <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8111008c:	defffd04 	addi	sp,sp,-12
81110090:	de00012e 	bgeu	sp,et,81110098 <vChangeDefaultRTValue+0xc>
81110094:	003b68fa 	trap	3
81110098:	df000215 	stw	fp,8(sp)
8111009c:	df000204 	addi	fp,sp,8
811100a0:	e13ffe15 	stw	r4,-8(fp)
811100a4:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
811100a8:	0001883a 	nop
811100ac:	e037883a 	mov	sp,fp
811100b0:	df000017 	ldw	fp,0(sp)
811100b4:	dec00104 	addi	sp,sp,4
811100b8:	f800283a 	ret

811100bc <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
811100bc:	defffe04 	addi	sp,sp,-8
811100c0:	de00012e 	bgeu	sp,et,811100c8 <vLoadDefaultSyncSource+0xc>
811100c4:	003b68fa 	trap	3
811100c8:	df000115 	stw	fp,4(sp)
811100cc:	df000104 	addi	fp,sp,4
811100d0:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
811100d4:	e0bfff17 	ldw	r2,-4(fp)
811100d8:	10010815 	stw	zero,1056(r2)
}
811100dc:	0001883a 	nop
811100e0:	e037883a 	mov	sp,fp
811100e4:	df000017 	ldw	fp,0(sp)
811100e8:	dec00104 	addi	sp,sp,4
811100ec:	f800283a 	ret

811100f0 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
811100f0:	defffd04 	addi	sp,sp,-12
811100f4:	de00012e 	bgeu	sp,et,811100fc <vChangeSyncSource+0xc>
811100f8:	003b68fa 	trap	3
811100fc:	df000215 	stw	fp,8(sp)
81110100:	df000204 	addi	fp,sp,8
81110104:	e13ffe15 	stw	r4,-8(fp)
81110108:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
8111010c:	e0bffe17 	ldw	r2,-8(fp)
81110110:	e0ffff17 	ldw	r3,-4(fp)
81110114:	10c10815 	stw	r3,1056(r2)
}
81110118:	0001883a 	nop
8111011c:	e037883a 	mov	sp,fp
81110120:	df000017 	ldw	fp,0(sp)
81110124:	dec00104 	addi	sp,sp,4
81110128:	f800283a 	ret

8111012c <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8111012c:	defffd04 	addi	sp,sp,-12
81110130:	de00012e 	bgeu	sp,et,81110138 <vChangeDefaultSyncSource+0xc>
81110134:	003b68fa 	trap	3
81110138:	df000215 	stw	fp,8(sp)
8111013c:	df000204 	addi	fp,sp,8
81110140:	e13ffe15 	stw	r4,-8(fp)
81110144:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
81110148:	0001883a 	nop
8111014c:	e037883a 	mov	sp,fp
81110150:	df000017 	ldw	fp,0(sp)
81110154:	dec00104 	addi	sp,sp,4
81110158:	f800283a 	ret

8111015c <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TSimucam_MEB *xMeb, unsigned char ucTime ) {
8111015c:	defffd04 	addi	sp,sp,-12
81110160:	de00012e 	bgeu	sp,et,81110168 <vSetTimeCode+0xc>
81110164:	003b68fa 	trap	3
81110168:	df000215 	stw	fp,8(sp)
8111016c:	df000204 	addi	fp,sp,8
81110170:	e13ffe15 	stw	r4,-8(fp)
81110174:	2805883a 	mov	r2,r5
81110178:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucTimeCode = ucTime;
8111017c:	e0bffe17 	ldw	r2,-8(fp)
81110180:	e0ffff03 	ldbu	r3,-4(fp)
81110184:	10c10905 	stb	r3,1060(r2)
}
81110188:	0001883a 	nop
8111018c:	e037883a 	mov	sp,fp
81110190:	df000017 	ldw	fp,0(sp)
81110194:	dec00104 	addi	sp,sp,4
81110198:	f800283a 	ret

8111019c <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TSimucam_MEB *xMeb ) {
8111019c:	defffe04 	addi	sp,sp,-8
811101a0:	de00012e 	bgeu	sp,et,811101a8 <vResetTimeCode+0xc>
811101a4:	003b68fa 	trap	3
811101a8:	df000115 	stw	fp,4(sp)
811101ac:	df000104 	addi	fp,sp,4
811101b0:	e13fff15 	stw	r4,-4(fp)
    xMeb->ucTimeCode = 0;
811101b4:	e0bfff17 	ldw	r2,-4(fp)
811101b8:	10010905 	stb	zero,1060(r2)
}
811101bc:	0001883a 	nop
811101c0:	e037883a 	mov	sp,fp
811101c4:	df000017 	ldw	fp,0(sp)
811101c8:	dec00104 	addi	sp,sp,4
811101cc:	f800283a 	ret

811101d0 <vLoadDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
811101d0:	defffe04 	addi	sp,sp,-8
811101d4:	de00012e 	bgeu	sp,et,811101dc <vLoadDefaultAutoResetSync+0xc>
811101d8:	003b68fa 	trap	3
811101dc:	df000115 	stw	fp,4(sp)
811101e0:	df000104 	addi	fp,sp,4
811101e4:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
811101e8:	e0bfff17 	ldw	r2,-4(fp)
811101ec:	00c00044 	movi	r3,1
811101f0:	10c10a15 	stw	r3,1064(r2)
}
811101f4:	0001883a 	nop
811101f8:	e037883a 	mov	sp,fp
811101fc:	df000017 	ldw	fp,0(sp)
81110200:	dec00104 	addi	sp,sp,4
81110204:	f800283a 	ret

81110208 <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
81110208:	defffd04 	addi	sp,sp,-12
8111020c:	de00012e 	bgeu	sp,et,81110214 <vChangeAutoResetSync+0xc>
81110210:	003b68fa 	trap	3
81110214:	df000215 	stw	fp,8(sp)
81110218:	df000204 	addi	fp,sp,8
8111021c:	e13ffe15 	stw	r4,-8(fp)
81110220:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
81110224:	e0bffe17 	ldw	r2,-8(fp)
81110228:	e0ffff17 	ldw	r3,-4(fp)
8111022c:	10c10a15 	stw	r3,1064(r2)
}
81110230:	0001883a 	nop
81110234:	e037883a 	mov	sp,fp
81110238:	df000017 	ldw	fp,0(sp)
8111023c:	dec00104 	addi	sp,sp,4
81110240:	f800283a 	ret

81110244 <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
81110244:	defffd04 	addi	sp,sp,-12
81110248:	de00012e 	bgeu	sp,et,81110250 <vChangeDefaultAutoResetSync+0xc>
8111024c:	003b68fa 	trap	3
81110250:	df000215 	stw	fp,8(sp)
81110254:	df000204 	addi	fp,sp,8
81110258:	e13ffe15 	stw	r4,-8(fp)
8111025c:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
81110260:	0001883a 	nop
81110264:	e037883a 	mov	sp,fp
81110268:	df000017 	ldw	fp,0(sp)
8111026c:	dec00104 	addi	sp,sp,4
81110270:	f800283a 	ret

81110274 <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TSimucam_MEB *xMeb ) {
81110274:	defffe04 	addi	sp,sp,-8
81110278:	de00012e 	bgeu	sp,et,81110280 <vLoadDefaultIdNFEEMaster+0xc>
8111027c:	003b68fa 	trap	3
81110280:	df000115 	stw	fp,4(sp)
81110284:	df000104 	addi	fp,sp,4
81110288:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xMeb->ucIdNFEEMaster = 0;
8111028c:	e0bfff17 	ldw	r2,-4(fp)
81110290:	10010945 	stb	zero,1061(r2)
}
81110294:	0001883a 	nop
81110298:	e037883a 	mov	sp,fp
8111029c:	df000017 	ldw	fp,0(sp)
811102a0:	dec00104 	addi	sp,sp,4
811102a4:	f800283a 	ret

811102a8 <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
811102a8:	defffd04 	addi	sp,sp,-12
811102ac:	de00012e 	bgeu	sp,et,811102b4 <vChangeIdNFEEMaster+0xc>
811102b0:	003b68fa 	trap	3
811102b4:	df000215 	stw	fp,8(sp)
811102b8:	df000204 	addi	fp,sp,8
811102bc:	e13ffe15 	stw	r4,-8(fp)
811102c0:	2805883a 	mov	r2,r5
811102c4:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucIdNFEEMaster = ucIdMaster;
811102c8:	e0bffe17 	ldw	r2,-8(fp)
811102cc:	e0ffff03 	ldbu	r3,-4(fp)
811102d0:	10c10945 	stb	r3,1061(r2)
}
811102d4:	0001883a 	nop
811102d8:	e037883a 	mov	sp,fp
811102dc:	df000017 	ldw	fp,0(sp)
811102e0:	dec00104 	addi	sp,sp,4
811102e4:	f800283a 	ret

811102e8 <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
811102e8:	defffd04 	addi	sp,sp,-12
811102ec:	de00012e 	bgeu	sp,et,811102f4 <vChangeDefaultIdNFEEMaster+0xc>
811102f0:	003b68fa 	trap	3
811102f4:	df000215 	stw	fp,8(sp)
811102f8:	df000204 	addi	fp,sp,8
811102fc:	e13ffe15 	stw	r4,-8(fp)
81110300:	2805883a 	mov	r2,r5
81110304:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
81110308:	0001883a 	nop
8111030c:	e037883a 	mov	sp,fp
81110310:	df000017 	ldw	fp,0(sp)
81110314:	dec00104 	addi	sp,sp,4
81110318:	f800283a 	ret

8111031c <vSyncReset>:

/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
8111031c:	defffc04 	addi	sp,sp,-16
81110320:	de00012e 	bgeu	sp,et,81110328 <vSyncReset+0xc>
81110324:	003b68fa 	trap	3
81110328:	dfc00315 	stw	ra,12(sp)
8111032c:	df000215 	stw	fp,8(sp)
81110330:	df000204 	addi	fp,sp,8
81110334:	e13ffe15 	stw	r4,-8(fp)
81110338:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(xMeb);
8111033c:	e13ffe17 	ldw	r4,-8(fp)
81110340:	111019c0 	call	8111019c <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
81110344:	0001883a 	nop
81110348:	e037883a 	mov	sp,fp
8111034c:	dfc00117 	ldw	ra,4(sp)
81110350:	df000017 	ldw	fp,0(sp)
81110354:	dec00204 	addi	sp,sp,8
81110358:	f800283a 	ret

8111035c <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8111035c:	defffe04 	addi	sp,sp,-8
81110360:	de00012e 	bgeu	sp,et,81110368 <bSDcardIsPresent+0xc>
81110364:	003b68fa 	trap	3
81110368:	dfc00115 	stw	ra,4(sp)
8111036c:	df000015 	stw	fp,0(sp)
81110370:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
81110374:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
}
81110378:	e037883a 	mov	sp,fp
8111037c:	dfc00117 	ldw	ra,4(sp)
81110380:	df000017 	ldw	fp,0(sp)
81110384:	dec00204 	addi	sp,sp,8
81110388:	f800283a 	ret

8111038c <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8111038c:	defffe04 	addi	sp,sp,-8
81110390:	de00012e 	bgeu	sp,et,81110398 <bSDcardFAT16Check+0xc>
81110394:	003b68fa 	trap	3
81110398:	dfc00115 	stw	ra,4(sp)
8111039c:	df000015 	stw	fp,0(sp)
811103a0:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
811103a4:	11366b00 	call	811366b0 <alt_up_sd_card_is_FAT16>
}
811103a8:	e037883a 	mov	sp,fp
811103ac:	dfc00117 	ldw	ra,4(sp)
811103b0:	df000017 	ldw	fp,0(sp)
811103b4:	dec00204 	addi	sp,sp,8
811103b8:	f800283a 	ret

811103bc <bInitializeSDCard>:

bool bInitializeSDCard( void ){
811103bc:	defffd04 	addi	sp,sp,-12
811103c0:	de00012e 	bgeu	sp,et,811103c8 <bInitializeSDCard+0xc>
811103c4:	003b68fa 	trap	3
811103c8:	dfc00215 	stw	ra,8(sp)
811103cc:	df000115 	stw	fp,4(sp)
811103d0:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
811103d4:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
811103d8:	d0206015 	stw	zero,-32384(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
811103dc:	01204534 	movhi	r4,33044
811103e0:	213f9304 	addi	r4,r4,-436
811103e4:	11365200 	call	81136520 <alt_up_sd_card_open_dev>
811103e8:	d0a06015 	stw	r2,-32384(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
811103ec:	d0a06017 	ldw	r2,-32384(gp)
811103f0:	10002226 	beq	r2,zero,8111047c <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
811103f4:	111035c0 	call	8111035c <bSDcardIsPresent>
811103f8:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
811103fc:	e0bfff17 	ldw	r2,-4(fp)
81110400:	10001626 	beq	r2,zero,8111045c <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
81110404:	111038c0 	call	8111038c <bSDcardFAT16Check>
81110408:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
8111040c:	e0bfff17 	ldw	r2,-4(fp)
81110410:	10000a26 	beq	r2,zero,8111043c <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
81110414:	00800044 	movi	r2,1
81110418:	d0a05f15 	stw	r2,-32388(gp)
				debug(fp, "SD is up.\r\n");
8111041c:	d0a04f17 	ldw	r2,-32452(gp)
81110420:	100f883a 	mov	r7,r2
81110424:	018002c4 	movi	r6,11
81110428:	01400044 	movi	r5,1
8111042c:	01204534 	movhi	r4,33044
81110430:	213f9e04 	addi	r4,r4,-392
81110434:	11126a00 	call	811126a0 <fwrite>
81110438:	00001806 	br	8111049c <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8111043c:	d0a04f17 	ldw	r2,-32452(gp)
81110440:	100f883a 	mov	r7,r2
81110444:	01800984 	movi	r6,38
81110448:	01400044 	movi	r5,1
8111044c:	01204534 	movhi	r4,33044
81110450:	213fa104 	addi	r4,r4,-380
81110454:	11126a00 	call	811126a0 <fwrite>
81110458:	00001006 	br	8111049c <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8111045c:	d0a04f17 	ldw	r2,-32452(gp)
81110460:	100f883a 	mov	r7,r2
81110464:	01800744 	movi	r6,29
81110468:	01400044 	movi	r5,1
8111046c:	01204534 	movhi	r4,33044
81110470:	213fab04 	addi	r4,r4,-340
81110474:	11126a00 	call	811126a0 <fwrite>
81110478:	00000806 	br	8111049c <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8111047c:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
81110480:	d0a04f17 	ldw	r2,-32452(gp)
81110484:	100f883a 	mov	r7,r2
81110488:	018008c4 	movi	r6,35
8111048c:	01400044 	movi	r5,1
81110490:	01204534 	movhi	r4,33044
81110494:	213fb304 	addi	r4,r4,-308
81110498:	11126a00 	call	811126a0 <fwrite>
	}

	return bSucess;
8111049c:	e0bfff17 	ldw	r2,-4(fp)
}
811104a0:	e037883a 	mov	sp,fp
811104a4:	dfc00117 	ldw	ra,4(sp)
811104a8:	df000017 	ldw	fp,0(sp)
811104ac:	dec00204 	addi	sp,sp,8
811104b0:	f800283a 	ret

811104b4 <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
811104b4:	defffd04 	addi	sp,sp,-12
811104b8:	de00012e 	bgeu	sp,et,811104c0 <siOpenFile+0xc>
811104bc:	003b68fa 	trap	3
811104c0:	dfc00215 	stw	ra,8(sp)
811104c4:	df000115 	stw	fp,4(sp)
811104c8:	df000104 	addi	fp,sp,4
811104cc:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
811104d0:	000b883a 	mov	r5,zero
811104d4:	e13fff17 	ldw	r4,-4(fp)
811104d8:	1136bbc0 	call	81136bbc <alt_up_sd_card_fopen>
}
811104dc:	e037883a 	mov	sp,fp
811104e0:	dfc00117 	ldw	ra,4(sp)
811104e4:	df000017 	ldw	fp,0(sp)
811104e8:	dec00204 	addi	sp,sp,8
811104ec:	f800283a 	ret

811104f0 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
811104f0:	defffd04 	addi	sp,sp,-12
811104f4:	de00012e 	bgeu	sp,et,811104fc <siCloseFile+0xc>
811104f8:	003b68fa 	trap	3
811104fc:	dfc00215 	stw	ra,8(sp)
81110500:	df000115 	stw	fp,4(sp)
81110504:	df000104 	addi	fp,sp,4
81110508:	2005883a 	mov	r2,r4
8111050c:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
81110510:	e0bfff0f 	ldh	r2,-4(fp)
81110514:	1009883a 	mov	r4,r2
81110518:	1137a080 	call	81137a08 <alt_up_sd_card_fclose>
}
8111051c:	e037883a 	mov	sp,fp
81110520:	dfc00117 	ldw	ra,4(sp)
81110524:	df000017 	ldw	fp,0(sp)
81110528:	dec00204 	addi	sp,sp,8
8111052c:	f800283a 	ret

81110530 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
81110530:	defffd04 	addi	sp,sp,-12
81110534:	de00012e 	bgeu	sp,et,8111053c <cGetNextChar+0xc>
81110538:	003b68fa 	trap	3
8111053c:	dfc00215 	stw	ra,8(sp)
81110540:	df000115 	stw	fp,4(sp)
81110544:	df000104 	addi	fp,sp,4
81110548:	2005883a 	mov	r2,r4
8111054c:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
81110550:	e0bfff0f 	ldh	r2,-4(fp)
81110554:	1009883a 	mov	r4,r2
81110558:	11370600 	call	81137060 <alt_up_sd_card_read>
}
8111055c:	e037883a 	mov	sp,fp
81110560:	dfc00117 	ldw	ra,4(sp)
81110564:	df000017 	ldw	fp,0(sp)
81110568:	dec00204 	addi	sp,sp,8
8111056c:	f800283a 	ret

81110570 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
81110570:	deffff04 	addi	sp,sp,-4
81110574:	de00012e 	bgeu	sp,et,8111057c <bTestSimucamCriticalHW+0xc>
81110578:	003b68fa 	trap	3
8111057c:	df000015 	stw	fp,0(sp)
81110580:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
81110584:	00800044 	movi	r2,1
}
81110588:	e037883a 	mov	sp,fp
8111058c:	df000017 	ldw	fp,0(sp)
81110590:	dec00104 	addi	sp,sp,4
81110594:	f800283a 	ret

81110598 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
81110598:	defffc04 	addi	sp,sp,-16
8111059c:	de00012e 	bgeu	sp,et,811105a4 <_reg_write+0xc>
811105a0:	003b68fa 	trap	3
811105a4:	df000315 	stw	fp,12(sp)
811105a8:	df000304 	addi	fp,sp,12
811105ac:	e13ffd15 	stw	r4,-12(fp)
811105b0:	e17ffe15 	stw	r5,-8(fp)
811105b4:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
811105b8:	e0bffe17 	ldw	r2,-8(fp)
811105bc:	1085883a 	add	r2,r2,r2
811105c0:	1085883a 	add	r2,r2,r2
811105c4:	1007883a 	mov	r3,r2
811105c8:	e0bffd17 	ldw	r2,-12(fp)
811105cc:	1885883a 	add	r2,r3,r2
811105d0:	1007883a 	mov	r3,r2
811105d4:	e0bfff17 	ldw	r2,-4(fp)
811105d8:	18800035 	stwio	r2,0(r3)
	return 1;
811105dc:	00800044 	movi	r2,1

}
811105e0:	e037883a 	mov	sp,fp
811105e4:	df000017 	ldw	fp,0(sp)
811105e8:	dec00104 	addi	sp,sp,4
811105ec:	f800283a 	ret

811105f0 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
811105f0:	defffc04 	addi	sp,sp,-16
811105f4:	de00012e 	bgeu	sp,et,811105fc <_reg_read+0xc>
811105f8:	003b68fa 	trap	3
811105fc:	df000315 	stw	fp,12(sp)
81110600:	df000304 	addi	fp,sp,12
81110604:	e13ffd15 	stw	r4,-12(fp)
81110608:	e17ffe15 	stw	r5,-8(fp)
8111060c:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
81110610:	e0bffe17 	ldw	r2,-8(fp)
81110614:	1085883a 	add	r2,r2,r2
81110618:	1085883a 	add	r2,r2,r2
8111061c:	1007883a 	mov	r3,r2
81110620:	e0bffd17 	ldw	r2,-12(fp)
81110624:	1885883a 	add	r2,r3,r2
81110628:	10c00037 	ldwio	r3,0(r2)
8111062c:	e0bfff17 	ldw	r2,-4(fp)
81110630:	10c00015 	stw	r3,0(r2)
	return 1;
81110634:	00800044 	movi	r2,1

}
81110638:	e037883a 	mov	sp,fp
8111063c:	df000017 	ldw	fp,0(sp)
81110640:	dec00104 	addi	sp,sp,4
81110644:	f800283a 	ret

81110648 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
81110648:	defffa04 	addi	sp,sp,-24
8111064c:	de00012e 	bgeu	sp,et,81110654 <_print_codec_status+0xc>
81110650:	003b68fa 	trap	3
81110654:	dfc00515 	stw	ra,20(sp)
81110658:	df000415 	stw	fp,16(sp)
8111065c:	df000404 	addi	fp,sp,16
81110660:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
81110664:	e0bfff17 	ldw	r2,-4(fp)
81110668:	1005d1ba 	srai	r2,r2,6
8111066c:	1080004c 	andi	r2,r2,1
81110670:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
81110674:	e0bfff17 	ldw	r2,-4(fp)
81110678:	1005d17a 	srai	r2,r2,5
8111067c:	1080004c 	andi	r2,r2,1
81110680:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
81110684:	e0bfff17 	ldw	r2,-4(fp)
81110688:	1005d13a 	srai	r2,r2,4
8111068c:	1080004c 	andi	r2,r2,1
81110690:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
81110694:	00e04534 	movhi	r3,33044
81110698:	18cb7204 	addi	r3,r3,11720
8111069c:	00a04534 	movhi	r2,33044
811106a0:	10bfbc04 	addi	r2,r2,-272
811106a4:	1009883a 	mov	r4,r2
811106a8:	008005c4 	movi	r2,23
811106ac:	100d883a 	mov	r6,r2
811106b0:	200b883a 	mov	r5,r4
811106b4:	1809883a 	mov	r4,r3
811106b8:	11130b40 	call	811130b4 <memcpy>
	debug(fp, cDebugBuffer);
811106bc:	d0a04f17 	ldw	r2,-32452(gp)
811106c0:	01604534 	movhi	r5,33044
811106c4:	294b7204 	addi	r5,r5,11720
811106c8:	1009883a 	mov	r4,r2
811106cc:	11120040 	call	81112004 <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
811106d0:	e0bffc17 	ldw	r2,-16(fp)
811106d4:	10800058 	cmpnei	r2,r2,1
811106d8:	1000031e 	bne	r2,zero,811106e8 <_print_codec_status+0xa0>
811106dc:	00a04534 	movhi	r2,33044
811106e0:	10bfc204 	addi	r2,r2,-248
811106e4:	00000206 	br	811106f0 <_print_codec_status+0xa8>
811106e8:	00a04534 	movhi	r2,33044
811106ec:	10bfc304 	addi	r2,r2,-244
811106f0:	100d883a 	mov	r6,r2
811106f4:	01604534 	movhi	r5,33044
811106f8:	297fc404 	addi	r5,r5,-240
811106fc:	01204534 	movhi	r4,33044
81110700:	210b7204 	addi	r4,r4,11720
81110704:	11139940 	call	81113994 <sprintf>
	debug(fp, cDebugBuffer);
81110708:	d0a04f17 	ldw	r2,-32452(gp)
8111070c:	01604534 	movhi	r5,33044
81110710:	294b7204 	addi	r5,r5,11720
81110714:	1009883a 	mov	r4,r2
81110718:	11120040 	call	81112004 <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8111071c:	e0bffd17 	ldw	r2,-12(fp)
81110720:	10800058 	cmpnei	r2,r2,1
81110724:	1000031e 	bne	r2,zero,81110734 <_print_codec_status+0xec>
81110728:	00a04534 	movhi	r2,33044
8111072c:	10bfc204 	addi	r2,r2,-248
81110730:	00000206 	br	8111073c <_print_codec_status+0xf4>
81110734:	00a04534 	movhi	r2,33044
81110738:	10bfc304 	addi	r2,r2,-244
8111073c:	100d883a 	mov	r6,r2
81110740:	01604534 	movhi	r5,33044
81110744:	297fca04 	addi	r5,r5,-216
81110748:	01204534 	movhi	r4,33044
8111074c:	210b7204 	addi	r4,r4,11720
81110750:	11139940 	call	81113994 <sprintf>
	debug(fp, cDebugBuffer);
81110754:	d0a04f17 	ldw	r2,-32452(gp)
81110758:	01604534 	movhi	r5,33044
8111075c:	294b7204 	addi	r5,r5,11720
81110760:	1009883a 	mov	r4,r2
81110764:	11120040 	call	81112004 <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
81110768:	e0bffe17 	ldw	r2,-8(fp)
8111076c:	10800058 	cmpnei	r2,r2,1
81110770:	1000031e 	bne	r2,zero,81110780 <_print_codec_status+0x138>
81110774:	00a04534 	movhi	r2,33044
81110778:	10bfc204 	addi	r2,r2,-248
8111077c:	00000206 	br	81110788 <_print_codec_status+0x140>
81110780:	00a04534 	movhi	r2,33044
81110784:	10bfc304 	addi	r2,r2,-244
81110788:	100d883a 	mov	r6,r2
8111078c:	01604534 	movhi	r5,33044
81110790:	297fd004 	addi	r5,r5,-192
81110794:	01204534 	movhi	r4,33044
81110798:	210b7204 	addi	r4,r4,11720
8111079c:	11139940 	call	81113994 <sprintf>
	debug(fp, cDebugBuffer);
811107a0:	d0a04f17 	ldw	r2,-32452(gp)
811107a4:	01604534 	movhi	r5,33044
811107a8:	294b7204 	addi	r5,r5,11720
811107ac:	1009883a 	mov	r4,r2
811107b0:	11120040 	call	81112004 <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
811107b4:	00a04534 	movhi	r2,33044
811107b8:	108b7204 	addi	r2,r2,11720
811107bc:	00c00b44 	movi	r3,45
811107c0:	10c00005 	stb	r3,0(r2)
811107c4:	00c00b44 	movi	r3,45
811107c8:	10c00045 	stb	r3,1(r2)
811107cc:	00c00b44 	movi	r3,45
811107d0:	10c00085 	stb	r3,2(r2)
811107d4:	00c00b44 	movi	r3,45
811107d8:	10c000c5 	stb	r3,3(r2)
811107dc:	00c00b44 	movi	r3,45
811107e0:	10c00105 	stb	r3,4(r2)
811107e4:	00c00b44 	movi	r3,45
811107e8:	10c00145 	stb	r3,5(r2)
811107ec:	00c00b44 	movi	r3,45
811107f0:	10c00185 	stb	r3,6(r2)
811107f4:	00c00b44 	movi	r3,45
811107f8:	10c001c5 	stb	r3,7(r2)
811107fc:	00c00804 	movi	r3,32
81110800:	10c00205 	stb	r3,8(r2)
81110804:	00c00804 	movi	r3,32
81110808:	10c00245 	stb	r3,9(r2)
8111080c:	00c00284 	movi	r3,10
81110810:	10c00285 	stb	r3,10(r2)
81110814:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
81110818:	d0a04f17 	ldw	r2,-32452(gp)
8111081c:	01604534 	movhi	r5,33044
81110820:	294b7204 	addi	r5,r5,11720
81110824:	1009883a 	mov	r4,r2
81110828:	11120040 	call	81112004 <fprintf>
#endif
}
8111082c:	0001883a 	nop
81110830:	e037883a 	mov	sp,fp
81110834:	dfc00117 	ldw	ra,4(sp)
81110838:	df000017 	ldw	fp,0(sp)
8111083c:	dec00204 	addi	sp,sp,8
81110840:	f800283a 	ret

81110844 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
81110844:	defffb04 	addi	sp,sp,-20
81110848:	de00012e 	bgeu	sp,et,81110850 <_split_codec_status+0xc>
8111084c:	003b68fa 	trap	3
81110850:	df000415 	stw	fp,16(sp)
81110854:	df000404 	addi	fp,sp,16
81110858:	e13ffc15 	stw	r4,-16(fp)
8111085c:	e17ffd15 	stw	r5,-12(fp)
81110860:	e1bffe15 	stw	r6,-8(fp)
81110864:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
81110868:	e0bffc17 	ldw	r2,-16(fp)
8111086c:	1005d1ba 	srai	r2,r2,6
81110870:	10c0004c 	andi	r3,r2,1
81110874:	e0bffd17 	ldw	r2,-12(fp)
81110878:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8111087c:	e0bffc17 	ldw	r2,-16(fp)
81110880:	1005d17a 	srai	r2,r2,5
81110884:	10c0004c 	andi	r3,r2,1
81110888:	e0bffe17 	ldw	r2,-8(fp)
8111088c:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
81110890:	e0bffc17 	ldw	r2,-16(fp)
81110894:	1005d13a 	srai	r2,r2,4
81110898:	10c0004c 	andi	r3,r2,1
8111089c:	e0bfff17 	ldw	r2,-4(fp)
811108a0:	10c00015 	stw	r3,0(r2)
}
811108a4:	0001883a 	nop
811108a8:	e037883a 	mov	sp,fp
811108ac:	df000017 	ldw	fp,0(sp)
811108b0:	dec00104 	addi	sp,sp,4
811108b4:	f800283a 	ret

811108b8 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
811108b8:	defffc04 	addi	sp,sp,-16
811108bc:	de00012e 	bgeu	sp,et,811108c4 <aatoh+0xc>
811108c0:	003b68fa 	trap	3
811108c4:	df000315 	stw	fp,12(sp)
811108c8:	df000304 	addi	fp,sp,12
811108cc:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
811108d0:	e0bfff17 	ldw	r2,-4(fp)
811108d4:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
811108d8:	e0bffd17 	ldw	r2,-12(fp)
811108dc:	10c00003 	ldbu	r3,0(r2)
811108e0:	e0bffd17 	ldw	r2,-12(fp)
811108e4:	10800003 	ldbu	r2,0(r2)
811108e8:	10803fcc 	andi	r2,r2,255
811108ec:	10800eb0 	cmpltui	r2,r2,58
811108f0:	1000021e 	bne	r2,zero,811108fc <aatoh+0x44>
811108f4:	00800dc4 	movi	r2,55
811108f8:	00000106 	br	81110900 <aatoh+0x48>
811108fc:	00800c04 	movi	r2,48
81110900:	1885c83a 	sub	r2,r3,r2
81110904:	1004913a 	slli	r2,r2,4
81110908:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8111090c:	e0bffd17 	ldw	r2,-12(fp)
81110910:	10800044 	addi	r2,r2,1
81110914:	10c00003 	ldbu	r3,0(r2)
81110918:	e0bffd17 	ldw	r2,-12(fp)
8111091c:	10800044 	addi	r2,r2,1
81110920:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
81110924:	10803fcc 	andi	r2,r2,255
81110928:	10800eb0 	cmpltui	r2,r2,58
8111092c:	1000021e 	bne	r2,zero,81110938 <aatoh+0x80>
81110930:	00800dc4 	movi	r2,55
81110934:	00000106 	br	8111093c <aatoh+0x84>
81110938:	00800c04 	movi	r2,48
8111093c:	1885c83a 	sub	r2,r3,r2
81110940:	2085883a 	add	r2,r4,r2
81110944:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
81110948:	e0bffe03 	ldbu	r2,-8(fp)
}
8111094c:	e037883a 	mov	sp,fp
81110950:	df000017 	ldw	fp,0(sp)
81110954:	dec00104 	addi	sp,sp,4
81110958:	f800283a 	ret

8111095c <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
8111095c:	defffd04 	addi	sp,sp,-12
81110960:	de00012e 	bgeu	sp,et,81110968 <Verif_Error+0xc>
81110964:	003b68fa 	trap	3
81110968:	dfc00215 	stw	ra,8(sp)
8111096c:	df000115 	stw	fp,4(sp)
81110970:	df000104 	addi	fp,sp,4
81110974:	2005883a 	mov	r2,r4
81110978:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8111097c:	e0bfff03 	ldbu	r2,-4(fp)
81110980:	1000091e 	bne	r2,zero,811109a8 <Verif_Error+0x4c>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
81110984:	d0a04f17 	ldw	r2,-32452(gp)
81110988:	100f883a 	mov	r7,r2
8111098c:	018001c4 	movi	r6,7
81110990:	01400044 	movi	r5,1
81110994:	01204534 	movhi	r4,33044
81110998:	213fd604 	addi	r4,r4,-168
8111099c:	11126a00 	call	811126a0 <fwrite>
#endif
		return 0;
811109a0:	0005883a 	mov	r2,zero
811109a4:	00000106 	br	811109ac <Verif_Error+0x50>
	} else
		return 1;
811109a8:	00800044 	movi	r2,1
}
811109ac:	e037883a 	mov	sp,fp
811109b0:	dfc00117 	ldw	ra,4(sp)
811109b4:	df000017 	ldw	fp,0(sp)
811109b8:	dec00204 	addi	sp,sp,8
811109bc:	f800283a 	ret

811109c0 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
811109c0:	defffe04 	addi	sp,sp,-8
811109c4:	de00012e 	bgeu	sp,et,811109cc <toInt+0xc>
811109c8:	003b68fa 	trap	3
811109cc:	df000115 	stw	fp,4(sp)
811109d0:	df000104 	addi	fp,sp,4
811109d4:	2005883a 	mov	r2,r4
811109d8:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
811109dc:	e0bfff03 	ldbu	r2,-4(fp)
811109e0:	10bff404 	addi	r2,r2,-48
}
811109e4:	e037883a 	mov	sp,fp
811109e8:	df000017 	ldw	fp,0(sp)
811109ec:	dec00104 	addi	sp,sp,4
811109f0:	f800283a 	ret

811109f4 <__divsf3>:
811109f4:	defff504 	addi	sp,sp,-44
811109f8:	200cd5fa 	srli	r6,r4,23
811109fc:	de00012e 	bgeu	sp,et,81110a04 <__divsf3+0x10>
81110a00:	003b68fa 	trap	3
81110a04:	dcc00415 	stw	r19,16(sp)
81110a08:	2026d7fa 	srli	r19,r4,31
81110a0c:	00c02034 	movhi	r3,128
81110a10:	dd800715 	stw	r22,28(sp)
81110a14:	dd000515 	stw	r20,20(sp)
81110a18:	dc800315 	stw	r18,12(sp)
81110a1c:	18ffffc4 	addi	r3,r3,-1
81110a20:	dfc00a15 	stw	ra,40(sp)
81110a24:	df000915 	stw	fp,36(sp)
81110a28:	ddc00815 	stw	r23,32(sp)
81110a2c:	dd400615 	stw	r21,24(sp)
81110a30:	dc400215 	stw	r17,8(sp)
81110a34:	dc000115 	stw	r16,4(sp)
81110a38:	35003fcc 	andi	r20,r6,255
81110a3c:	1924703a 	and	r18,r3,r4
81110a40:	9d803fcc 	andi	r22,r19,255
81110a44:	a0005226 	beq	r20,zero,81110b90 <__divsf3+0x19c>
81110a48:	00803fc4 	movi	r2,255
81110a4c:	a0802e26 	beq	r20,r2,81110b08 <__divsf3+0x114>
81110a50:	91002034 	orhi	r4,r18,128
81110a54:	202490fa 	slli	r18,r4,3
81110a58:	a53fe044 	addi	r20,r20,-127
81110a5c:	0021883a 	mov	r16,zero
81110a60:	002f883a 	mov	r23,zero
81110a64:	280cd5fa 	srli	r6,r5,23
81110a68:	282ad7fa 	srli	r21,r5,31
81110a6c:	00c02034 	movhi	r3,128
81110a70:	18ffffc4 	addi	r3,r3,-1
81110a74:	31803fcc 	andi	r6,r6,255
81110a78:	1962703a 	and	r17,r3,r5
81110a7c:	af003fcc 	andi	fp,r21,255
81110a80:	30004a26 	beq	r6,zero,81110bac <__divsf3+0x1b8>
81110a84:	00803fc4 	movi	r2,255
81110a88:	30804526 	beq	r6,r2,81110ba0 <__divsf3+0x1ac>
81110a8c:	89402034 	orhi	r5,r17,128
81110a90:	282290fa 	slli	r17,r5,3
81110a94:	31bfe044 	addi	r6,r6,-127
81110a98:	000b883a 	mov	r5,zero
81110a9c:	2c20b03a 	or	r16,r5,r16
81110aa0:	802090ba 	slli	r16,r16,2
81110aa4:	00a04474 	movhi	r2,33041
81110aa8:	1082b204 	addi	r2,r2,2760
81110aac:	80a1883a 	add	r16,r16,r2
81110ab0:	81000017 	ldw	r4,0(r16)
81110ab4:	9d46f03a 	xor	r3,r19,r21
81110ab8:	180f883a 	mov	r7,r3
81110abc:	18803fcc 	andi	r2,r3,255
81110ac0:	a18dc83a 	sub	r6,r20,r6
81110ac4:	2000683a 	jmp	r4
81110ac8:	81110cac 	andhi	r4,r16,17458
81110acc:	81110b30 	cmpltui	r4,r16,17452
81110ad0:	81110ca0 	cmpeqi	r4,r16,17458
81110ad4:	81110b1c 	xori	r4,r16,17452
81110ad8:	81110ca0 	cmpeqi	r4,r16,17458
81110adc:	81110c78 	rdprs	r4,r16,17457
81110ae0:	81110ca0 	cmpeqi	r4,r16,17458
81110ae4:	81110b1c 	xori	r4,r16,17452
81110ae8:	81110b30 	cmpltui	r4,r16,17452
81110aec:	81110b30 	cmpltui	r4,r16,17452
81110af0:	81110c78 	rdprs	r4,r16,17457
81110af4:	81110b1c 	xori	r4,r16,17452
81110af8:	81110d8c 	andi	r4,r16,17462
81110afc:	81110d8c 	andi	r4,r16,17462
81110b00:	81110d8c 	andi	r4,r16,17462
81110b04:	81110d40 	call	881110d4 <__reset+0x20f10d4>
81110b08:	9000581e 	bne	r18,zero,81110c6c <__divsf3+0x278>
81110b0c:	04000204 	movi	r16,8
81110b10:	05c00084 	movi	r23,2
81110b14:	003fd306 	br	81110a64 <__reset+0xfb0f0a64>
81110b18:	0023883a 	mov	r17,zero
81110b1c:	e02d883a 	mov	r22,fp
81110b20:	282f883a 	mov	r23,r5
81110b24:	00800084 	movi	r2,2
81110b28:	b8808f1e 	bne	r23,r2,81110d68 <__divsf3+0x374>
81110b2c:	b005883a 	mov	r2,r22
81110b30:	11c0004c 	andi	r7,r2,1
81110b34:	013fffc4 	movi	r4,-1
81110b38:	000d883a 	mov	r6,zero
81110b3c:	21003fcc 	andi	r4,r4,255
81110b40:	200895fa 	slli	r4,r4,23
81110b44:	38803fcc 	andi	r2,r7,255
81110b48:	00c02034 	movhi	r3,128
81110b4c:	100497fa 	slli	r2,r2,31
81110b50:	18ffffc4 	addi	r3,r3,-1
81110b54:	30c6703a 	and	r3,r6,r3
81110b58:	1906b03a 	or	r3,r3,r4
81110b5c:	1884b03a 	or	r2,r3,r2
81110b60:	dfc00a17 	ldw	ra,40(sp)
81110b64:	df000917 	ldw	fp,36(sp)
81110b68:	ddc00817 	ldw	r23,32(sp)
81110b6c:	dd800717 	ldw	r22,28(sp)
81110b70:	dd400617 	ldw	r21,24(sp)
81110b74:	dd000517 	ldw	r20,20(sp)
81110b78:	dcc00417 	ldw	r19,16(sp)
81110b7c:	dc800317 	ldw	r18,12(sp)
81110b80:	dc400217 	ldw	r17,8(sp)
81110b84:	dc000117 	ldw	r16,4(sp)
81110b88:	dec00b04 	addi	sp,sp,44
81110b8c:	f800283a 	ret
81110b90:	90002b1e 	bne	r18,zero,81110c40 <__divsf3+0x24c>
81110b94:	04000104 	movi	r16,4
81110b98:	05c00044 	movi	r23,1
81110b9c:	003fb106 	br	81110a64 <__reset+0xfb0f0a64>
81110ba0:	8800251e 	bne	r17,zero,81110c38 <__divsf3+0x244>
81110ba4:	01400084 	movi	r5,2
81110ba8:	00000206 	br	81110bb4 <__divsf3+0x1c0>
81110bac:	88001a1e 	bne	r17,zero,81110c18 <__divsf3+0x224>
81110bb0:	01400044 	movi	r5,1
81110bb4:	8160b03a 	or	r16,r16,r5
81110bb8:	802090ba 	slli	r16,r16,2
81110bbc:	00e04474 	movhi	r3,33041
81110bc0:	18c2f604 	addi	r3,r3,3032
81110bc4:	80e1883a 	add	r16,r16,r3
81110bc8:	80c00017 	ldw	r3,0(r16)
81110bcc:	9d44f03a 	xor	r2,r19,r21
81110bd0:	a18dc83a 	sub	r6,r20,r6
81110bd4:	1800683a 	jmp	r3
81110bd8:	81110b30 	cmpltui	r4,r16,17452
81110bdc:	81110b30 	cmpltui	r4,r16,17452
81110be0:	81110d7c 	xorhi	r4,r16,17461
81110be4:	81110b18 	cmpnei	r4,r16,17452
81110be8:	81110d7c 	xorhi	r4,r16,17461
81110bec:	81110c78 	rdprs	r4,r16,17457
81110bf0:	81110d7c 	xorhi	r4,r16,17461
81110bf4:	81110b18 	cmpnei	r4,r16,17452
81110bf8:	81110b30 	cmpltui	r4,r16,17452
81110bfc:	81110b30 	cmpltui	r4,r16,17452
81110c00:	81110c78 	rdprs	r4,r16,17457
81110c04:	81110b18 	cmpnei	r4,r16,17452
81110c08:	81110d8c 	andi	r4,r16,17462
81110c0c:	81110d8c 	andi	r4,r16,17462
81110c10:	81110d8c 	andi	r4,r16,17462
81110c14:	81110da4 	muli	r4,r16,17462
81110c18:	8809883a 	mov	r4,r17
81110c1c:	1111e440 	call	81111e44 <__clzsi2>
81110c20:	10fffec4 	addi	r3,r2,-5
81110c24:	10801d84 	addi	r2,r2,118
81110c28:	88e2983a 	sll	r17,r17,r3
81110c2c:	008dc83a 	sub	r6,zero,r2
81110c30:	000b883a 	mov	r5,zero
81110c34:	003f9906 	br	81110a9c <__reset+0xfb0f0a9c>
81110c38:	014000c4 	movi	r5,3
81110c3c:	003f9706 	br	81110a9c <__reset+0xfb0f0a9c>
81110c40:	9009883a 	mov	r4,r18
81110c44:	d9400015 	stw	r5,0(sp)
81110c48:	1111e440 	call	81111e44 <__clzsi2>
81110c4c:	10fffec4 	addi	r3,r2,-5
81110c50:	11801d84 	addi	r6,r2,118
81110c54:	90e4983a 	sll	r18,r18,r3
81110c58:	01a9c83a 	sub	r20,zero,r6
81110c5c:	0021883a 	mov	r16,zero
81110c60:	002f883a 	mov	r23,zero
81110c64:	d9400017 	ldw	r5,0(sp)
81110c68:	003f7e06 	br	81110a64 <__reset+0xfb0f0a64>
81110c6c:	04000304 	movi	r16,12
81110c70:	05c000c4 	movi	r23,3
81110c74:	003f7b06 	br	81110a64 <__reset+0xfb0f0a64>
81110c78:	01802034 	movhi	r6,128
81110c7c:	000f883a 	mov	r7,zero
81110c80:	31bfffc4 	addi	r6,r6,-1
81110c84:	013fffc4 	movi	r4,-1
81110c88:	003fac06 	br	81110b3c <__reset+0xfb0f0b3c>
81110c8c:	01400044 	movi	r5,1
81110c90:	2909c83a 	sub	r4,r5,r4
81110c94:	00c006c4 	movi	r3,27
81110c98:	19004b0e 	bge	r3,r4,81110dc8 <__divsf3+0x3d4>
81110c9c:	114e703a 	and	r7,r2,r5
81110ca0:	0009883a 	mov	r4,zero
81110ca4:	000d883a 	mov	r6,zero
81110ca8:	003fa406 	br	81110b3c <__reset+0xfb0f0b3c>
81110cac:	9006917a 	slli	r3,r18,5
81110cb0:	8822917a 	slli	r17,r17,5
81110cb4:	1c40372e 	bgeu	r3,r17,81110d94 <__divsf3+0x3a0>
81110cb8:	31bfffc4 	addi	r6,r6,-1
81110cbc:	010006c4 	movi	r4,27
81110cc0:	000b883a 	mov	r5,zero
81110cc4:	180f883a 	mov	r7,r3
81110cc8:	294b883a 	add	r5,r5,r5
81110ccc:	18c7883a 	add	r3,r3,r3
81110cd0:	38000116 	blt	r7,zero,81110cd8 <__divsf3+0x2e4>
81110cd4:	1c400236 	bltu	r3,r17,81110ce0 <__divsf3+0x2ec>
81110cd8:	1c47c83a 	sub	r3,r3,r17
81110cdc:	29400054 	ori	r5,r5,1
81110ce0:	213fffc4 	addi	r4,r4,-1
81110ce4:	203ff71e 	bne	r4,zero,81110cc4 <__reset+0xfb0f0cc4>
81110ce8:	1806c03a 	cmpne	r3,r3,zero
81110cec:	1962b03a 	or	r17,r3,r5
81110cf0:	31001fc4 	addi	r4,r6,127
81110cf4:	013fe50e 	bge	zero,r4,81110c8c <__reset+0xfb0f0c8c>
81110cf8:	88c001cc 	andi	r3,r17,7
81110cfc:	18000426 	beq	r3,zero,81110d10 <__divsf3+0x31c>
81110d00:	88c003cc 	andi	r3,r17,15
81110d04:	01400104 	movi	r5,4
81110d08:	19400126 	beq	r3,r5,81110d10 <__divsf3+0x31c>
81110d0c:	8963883a 	add	r17,r17,r5
81110d10:	88c2002c 	andhi	r3,r17,2048
81110d14:	18000426 	beq	r3,zero,81110d28 <__divsf3+0x334>
81110d18:	00fe0034 	movhi	r3,63488
81110d1c:	18ffffc4 	addi	r3,r3,-1
81110d20:	31002004 	addi	r4,r6,128
81110d24:	88e2703a 	and	r17,r17,r3
81110d28:	00c03f84 	movi	r3,254
81110d2c:	193f8016 	blt	r3,r4,81110b30 <__reset+0xfb0f0b30>
81110d30:	880c91ba 	slli	r6,r17,6
81110d34:	11c0004c 	andi	r7,r2,1
81110d38:	300cd27a 	srli	r6,r6,9
81110d3c:	003f7f06 	br	81110b3c <__reset+0xfb0f0b3c>
81110d40:	9080102c 	andhi	r2,r18,64
81110d44:	10000226 	beq	r2,zero,81110d50 <__divsf3+0x35c>
81110d48:	8880102c 	andhi	r2,r17,64
81110d4c:	10001826 	beq	r2,zero,81110db0 <__divsf3+0x3bc>
81110d50:	00802034 	movhi	r2,128
81110d54:	91801034 	orhi	r6,r18,64
81110d58:	10bfffc4 	addi	r2,r2,-1
81110d5c:	980f883a 	mov	r7,r19
81110d60:	308c703a 	and	r6,r6,r2
81110d64:	003fc706 	br	81110c84 <__reset+0xfb0f0c84>
81110d68:	008000c4 	movi	r2,3
81110d6c:	b8802d26 	beq	r23,r2,81110e24 <__divsf3+0x430>
81110d70:	00c00044 	movi	r3,1
81110d74:	b005883a 	mov	r2,r22
81110d78:	b8ffdd1e 	bne	r23,r3,81110cf0 <__reset+0xfb0f0cf0>
81110d7c:	11c0004c 	andi	r7,r2,1
81110d80:	0009883a 	mov	r4,zero
81110d84:	000d883a 	mov	r6,zero
81110d88:	003f6c06 	br	81110b3c <__reset+0xfb0f0b3c>
81110d8c:	9023883a 	mov	r17,r18
81110d90:	003f6406 	br	81110b24 <__reset+0xfb0f0b24>
81110d94:	1c47c83a 	sub	r3,r3,r17
81110d98:	01000684 	movi	r4,26
81110d9c:	01400044 	movi	r5,1
81110da0:	003fc806 	br	81110cc4 <__reset+0xfb0f0cc4>
81110da4:	9080102c 	andhi	r2,r18,64
81110da8:	103fe926 	beq	r2,zero,81110d50 <__reset+0xfb0f0d50>
81110dac:	0023883a 	mov	r17,zero
81110db0:	00802034 	movhi	r2,128
81110db4:	89801034 	orhi	r6,r17,64
81110db8:	10bfffc4 	addi	r2,r2,-1
81110dbc:	a80f883a 	mov	r7,r21
81110dc0:	308c703a 	and	r6,r6,r2
81110dc4:	003faf06 	br	81110c84 <__reset+0xfb0f0c84>
81110dc8:	01c00804 	movi	r7,32
81110dcc:	390fc83a 	sub	r7,r7,r4
81110dd0:	89ce983a 	sll	r7,r17,r7
81110dd4:	890ad83a 	srl	r5,r17,r4
81110dd8:	380ec03a 	cmpne	r7,r7,zero
81110ddc:	29cab03a 	or	r5,r5,r7
81110de0:	28c001cc 	andi	r3,r5,7
81110de4:	18000426 	beq	r3,zero,81110df8 <__divsf3+0x404>
81110de8:	28c003cc 	andi	r3,r5,15
81110dec:	01000104 	movi	r4,4
81110df0:	19000126 	beq	r3,r4,81110df8 <__divsf3+0x404>
81110df4:	290b883a 	add	r5,r5,r4
81110df8:	28c1002c 	andhi	r3,r5,1024
81110dfc:	18000426 	beq	r3,zero,81110e10 <__divsf3+0x41c>
81110e00:	11c0004c 	andi	r7,r2,1
81110e04:	01000044 	movi	r4,1
81110e08:	000d883a 	mov	r6,zero
81110e0c:	003f4b06 	br	81110b3c <__reset+0xfb0f0b3c>
81110e10:	280a91ba 	slli	r5,r5,6
81110e14:	11c0004c 	andi	r7,r2,1
81110e18:	0009883a 	mov	r4,zero
81110e1c:	280cd27a 	srli	r6,r5,9
81110e20:	003f4606 	br	81110b3c <__reset+0xfb0f0b3c>
81110e24:	00802034 	movhi	r2,128
81110e28:	89801034 	orhi	r6,r17,64
81110e2c:	10bfffc4 	addi	r2,r2,-1
81110e30:	b00f883a 	mov	r7,r22
81110e34:	308c703a 	and	r6,r6,r2
81110e38:	003f9206 	br	81110c84 <__reset+0xfb0f0c84>

81110e3c <__mulsf3>:
81110e3c:	defff504 	addi	sp,sp,-44
81110e40:	de00012e 	bgeu	sp,et,81110e48 <__mulsf3+0xc>
81110e44:	003b68fa 	trap	3
81110e48:	dc000115 	stw	r16,4(sp)
81110e4c:	2020d5fa 	srli	r16,r4,23
81110e50:	dd400615 	stw	r21,24(sp)
81110e54:	202ad7fa 	srli	r21,r4,31
81110e58:	dc800315 	stw	r18,12(sp)
81110e5c:	04802034 	movhi	r18,128
81110e60:	df000915 	stw	fp,36(sp)
81110e64:	dd000515 	stw	r20,20(sp)
81110e68:	94bfffc4 	addi	r18,r18,-1
81110e6c:	dfc00a15 	stw	ra,40(sp)
81110e70:	ddc00815 	stw	r23,32(sp)
81110e74:	dd800715 	stw	r22,28(sp)
81110e78:	dcc00415 	stw	r19,16(sp)
81110e7c:	dc400215 	stw	r17,8(sp)
81110e80:	84003fcc 	andi	r16,r16,255
81110e84:	9124703a 	and	r18,r18,r4
81110e88:	a829883a 	mov	r20,r21
81110e8c:	af003fcc 	andi	fp,r21,255
81110e90:	80005426 	beq	r16,zero,81110fe4 <__mulsf3+0x1a8>
81110e94:	00803fc4 	movi	r2,255
81110e98:	80802f26 	beq	r16,r2,81110f58 <__mulsf3+0x11c>
81110e9c:	91002034 	orhi	r4,r18,128
81110ea0:	202490fa 	slli	r18,r4,3
81110ea4:	843fe044 	addi	r16,r16,-127
81110ea8:	0023883a 	mov	r17,zero
81110eac:	002f883a 	mov	r23,zero
81110eb0:	2804d5fa 	srli	r2,r5,23
81110eb4:	282cd7fa 	srli	r22,r5,31
81110eb8:	01002034 	movhi	r4,128
81110ebc:	213fffc4 	addi	r4,r4,-1
81110ec0:	10803fcc 	andi	r2,r2,255
81110ec4:	2166703a 	and	r19,r4,r5
81110ec8:	b1803fcc 	andi	r6,r22,255
81110ecc:	10004c26 	beq	r2,zero,81111000 <__mulsf3+0x1c4>
81110ed0:	00c03fc4 	movi	r3,255
81110ed4:	10c04726 	beq	r2,r3,81110ff4 <__mulsf3+0x1b8>
81110ed8:	99002034 	orhi	r4,r19,128
81110edc:	202690fa 	slli	r19,r4,3
81110ee0:	10bfe044 	addi	r2,r2,-127
81110ee4:	0007883a 	mov	r3,zero
81110ee8:	80a1883a 	add	r16,r16,r2
81110eec:	010003c4 	movi	r4,15
81110ef0:	1c44b03a 	or	r2,r3,r17
81110ef4:	b56af03a 	xor	r21,r22,r21
81110ef8:	81c00044 	addi	r7,r16,1
81110efc:	20806b36 	bltu	r4,r2,811110ac <__mulsf3+0x270>
81110f00:	100490ba 	slli	r2,r2,2
81110f04:	01204474 	movhi	r4,33041
81110f08:	2103c604 	addi	r4,r4,3864
81110f0c:	1105883a 	add	r2,r2,r4
81110f10:	10800017 	ldw	r2,0(r2)
81110f14:	1000683a 	jmp	r2
81110f18:	811110ac 	andhi	r4,r16,17474
81110f1c:	81110f6c 	andhi	r4,r16,17469
81110f20:	81110f6c 	andhi	r4,r16,17469
81110f24:	81110f68 	cmpgeui	r4,r16,17469
81110f28:	81111090 	cmplti	r4,r16,17474
81110f2c:	81111090 	cmplti	r4,r16,17474
81110f30:	8111107c 	xorhi	r4,r16,17473
81110f34:	81110f68 	cmpgeui	r4,r16,17469
81110f38:	81111090 	cmplti	r4,r16,17474
81110f3c:	8111107c 	xorhi	r4,r16,17473
81110f40:	81111090 	cmplti	r4,r16,17474
81110f44:	81110f68 	cmpgeui	r4,r16,17469
81110f48:	8111109c 	xori	r4,r16,17474
81110f4c:	8111109c 	xori	r4,r16,17474
81110f50:	8111109c 	xori	r4,r16,17474
81110f54:	81111178 	rdprs	r4,r16,17477
81110f58:	90003b1e 	bne	r18,zero,81111048 <__mulsf3+0x20c>
81110f5c:	04400204 	movi	r17,8
81110f60:	05c00084 	movi	r23,2
81110f64:	003fd206 	br	81110eb0 <__reset+0xfb0f0eb0>
81110f68:	302b883a 	mov	r21,r6
81110f6c:	00800084 	movi	r2,2
81110f70:	18802626 	beq	r3,r2,8111100c <__mulsf3+0x1d0>
81110f74:	008000c4 	movi	r2,3
81110f78:	1880ab26 	beq	r3,r2,81111228 <__mulsf3+0x3ec>
81110f7c:	00800044 	movi	r2,1
81110f80:	1880a21e 	bne	r3,r2,8111120c <__mulsf3+0x3d0>
81110f84:	a829883a 	mov	r20,r21
81110f88:	0007883a 	mov	r3,zero
81110f8c:	0009883a 	mov	r4,zero
81110f90:	18803fcc 	andi	r2,r3,255
81110f94:	100695fa 	slli	r3,r2,23
81110f98:	a0803fcc 	andi	r2,r20,255
81110f9c:	100a97fa 	slli	r5,r2,31
81110fa0:	00802034 	movhi	r2,128
81110fa4:	10bfffc4 	addi	r2,r2,-1
81110fa8:	2084703a 	and	r2,r4,r2
81110fac:	10c4b03a 	or	r2,r2,r3
81110fb0:	1144b03a 	or	r2,r2,r5
81110fb4:	dfc00a17 	ldw	ra,40(sp)
81110fb8:	df000917 	ldw	fp,36(sp)
81110fbc:	ddc00817 	ldw	r23,32(sp)
81110fc0:	dd800717 	ldw	r22,28(sp)
81110fc4:	dd400617 	ldw	r21,24(sp)
81110fc8:	dd000517 	ldw	r20,20(sp)
81110fcc:	dcc00417 	ldw	r19,16(sp)
81110fd0:	dc800317 	ldw	r18,12(sp)
81110fd4:	dc400217 	ldw	r17,8(sp)
81110fd8:	dc000117 	ldw	r16,4(sp)
81110fdc:	dec00b04 	addi	sp,sp,44
81110fe0:	f800283a 	ret
81110fe4:	90000d1e 	bne	r18,zero,8111101c <__mulsf3+0x1e0>
81110fe8:	04400104 	movi	r17,4
81110fec:	05c00044 	movi	r23,1
81110ff0:	003faf06 	br	81110eb0 <__reset+0xfb0f0eb0>
81110ff4:	9806c03a 	cmpne	r3,r19,zero
81110ff8:	18c00084 	addi	r3,r3,2
81110ffc:	003fba06 	br	81110ee8 <__reset+0xfb0f0ee8>
81111000:	9800141e 	bne	r19,zero,81111054 <__mulsf3+0x218>
81111004:	00c00044 	movi	r3,1
81111008:	003fb706 	br	81110ee8 <__reset+0xfb0f0ee8>
8111100c:	a829883a 	mov	r20,r21
81111010:	00ffffc4 	movi	r3,-1
81111014:	0009883a 	mov	r4,zero
81111018:	003fdd06 	br	81110f90 <__reset+0xfb0f0f90>
8111101c:	9009883a 	mov	r4,r18
81111020:	d9400015 	stw	r5,0(sp)
81111024:	1111e440 	call	81111e44 <__clzsi2>
81111028:	10fffec4 	addi	r3,r2,-5
8111102c:	10801d84 	addi	r2,r2,118
81111030:	90e4983a 	sll	r18,r18,r3
81111034:	00a1c83a 	sub	r16,zero,r2
81111038:	0023883a 	mov	r17,zero
8111103c:	002f883a 	mov	r23,zero
81111040:	d9400017 	ldw	r5,0(sp)
81111044:	003f9a06 	br	81110eb0 <__reset+0xfb0f0eb0>
81111048:	04400304 	movi	r17,12
8111104c:	05c000c4 	movi	r23,3
81111050:	003f9706 	br	81110eb0 <__reset+0xfb0f0eb0>
81111054:	9809883a 	mov	r4,r19
81111058:	d9800015 	stw	r6,0(sp)
8111105c:	1111e440 	call	81111e44 <__clzsi2>
81111060:	10fffec4 	addi	r3,r2,-5
81111064:	10801d84 	addi	r2,r2,118
81111068:	98e6983a 	sll	r19,r19,r3
8111106c:	0085c83a 	sub	r2,zero,r2
81111070:	0007883a 	mov	r3,zero
81111074:	d9800017 	ldw	r6,0(sp)
81111078:	003f9b06 	br	81110ee8 <__reset+0xfb0f0ee8>
8111107c:	01002034 	movhi	r4,128
81111080:	0029883a 	mov	r20,zero
81111084:	213fffc4 	addi	r4,r4,-1
81111088:	00ffffc4 	movi	r3,-1
8111108c:	003fc006 	br	81110f90 <__reset+0xfb0f0f90>
81111090:	9027883a 	mov	r19,r18
81111094:	b807883a 	mov	r3,r23
81111098:	003fb406 	br	81110f6c <__reset+0xfb0f0f6c>
8111109c:	9027883a 	mov	r19,r18
811110a0:	e02b883a 	mov	r21,fp
811110a4:	b807883a 	mov	r3,r23
811110a8:	003fb006 	br	81110f6c <__reset+0xfb0f0f6c>
811110ac:	9004d43a 	srli	r2,r18,16
811110b0:	9810d43a 	srli	r8,r19,16
811110b4:	94bfffcc 	andi	r18,r18,65535
811110b8:	993fffcc 	andi	r4,r19,65535
811110bc:	910d383a 	mul	r6,r18,r4
811110c0:	20a7383a 	mul	r19,r4,r2
811110c4:	9225383a 	mul	r18,r18,r8
811110c8:	3006d43a 	srli	r3,r6,16
811110cc:	1211383a 	mul	r8,r2,r8
811110d0:	94e5883a 	add	r18,r18,r19
811110d4:	1c87883a 	add	r3,r3,r18
811110d8:	1cc0022e 	bgeu	r3,r19,811110e4 <__mulsf3+0x2a8>
811110dc:	00800074 	movhi	r2,1
811110e0:	4091883a 	add	r8,r8,r2
811110e4:	1804943a 	slli	r2,r3,16
811110e8:	31bfffcc 	andi	r6,r6,65535
811110ec:	1806d43a 	srli	r3,r3,16
811110f0:	1185883a 	add	r2,r2,r6
811110f4:	102691ba 	slli	r19,r2,6
811110f8:	1a07883a 	add	r3,r3,r8
811110fc:	1004d6ba 	srli	r2,r2,26
81111100:	180891ba 	slli	r4,r3,6
81111104:	9826c03a 	cmpne	r19,r19,zero
81111108:	9884b03a 	or	r2,r19,r2
8111110c:	1126b03a 	or	r19,r2,r4
81111110:	9882002c 	andhi	r2,r19,2048
81111114:	10000426 	beq	r2,zero,81111128 <__mulsf3+0x2ec>
81111118:	9804d07a 	srli	r2,r19,1
8111111c:	9900004c 	andi	r4,r19,1
81111120:	3821883a 	mov	r16,r7
81111124:	1126b03a 	or	r19,r2,r4
81111128:	80c01fc4 	addi	r3,r16,127
8111112c:	00c0210e 	bge	zero,r3,811111b4 <__mulsf3+0x378>
81111130:	988001cc 	andi	r2,r19,7
81111134:	10000426 	beq	r2,zero,81111148 <__mulsf3+0x30c>
81111138:	988003cc 	andi	r2,r19,15
8111113c:	01000104 	movi	r4,4
81111140:	11000126 	beq	r2,r4,81111148 <__mulsf3+0x30c>
81111144:	9927883a 	add	r19,r19,r4
81111148:	9882002c 	andhi	r2,r19,2048
8111114c:	10000426 	beq	r2,zero,81111160 <__mulsf3+0x324>
81111150:	00be0034 	movhi	r2,63488
81111154:	10bfffc4 	addi	r2,r2,-1
81111158:	80c02004 	addi	r3,r16,128
8111115c:	98a6703a 	and	r19,r19,r2
81111160:	00803f84 	movi	r2,254
81111164:	10ffa916 	blt	r2,r3,8111100c <__reset+0xfb0f100c>
81111168:	980891ba 	slli	r4,r19,6
8111116c:	a829883a 	mov	r20,r21
81111170:	2008d27a 	srli	r4,r4,9
81111174:	003f8606 	br	81110f90 <__reset+0xfb0f0f90>
81111178:	9080102c 	andhi	r2,r18,64
8111117c:	10000826 	beq	r2,zero,811111a0 <__mulsf3+0x364>
81111180:	9880102c 	andhi	r2,r19,64
81111184:	1000061e 	bne	r2,zero,811111a0 <__mulsf3+0x364>
81111188:	00802034 	movhi	r2,128
8111118c:	99001034 	orhi	r4,r19,64
81111190:	10bfffc4 	addi	r2,r2,-1
81111194:	b029883a 	mov	r20,r22
81111198:	2088703a 	and	r4,r4,r2
8111119c:	003fba06 	br	81111088 <__reset+0xfb0f1088>
811111a0:	00802034 	movhi	r2,128
811111a4:	91001034 	orhi	r4,r18,64
811111a8:	10bfffc4 	addi	r2,r2,-1
811111ac:	2088703a 	and	r4,r4,r2
811111b0:	003fb506 	br	81111088 <__reset+0xfb0f1088>
811111b4:	00800044 	movi	r2,1
811111b8:	10c7c83a 	sub	r3,r2,r3
811111bc:	008006c4 	movi	r2,27
811111c0:	10ff7016 	blt	r2,r3,81110f84 <__reset+0xfb0f0f84>
811111c4:	00800804 	movi	r2,32
811111c8:	10c5c83a 	sub	r2,r2,r3
811111cc:	9884983a 	sll	r2,r19,r2
811111d0:	98c6d83a 	srl	r3,r19,r3
811111d4:	1004c03a 	cmpne	r2,r2,zero
811111d8:	1884b03a 	or	r2,r3,r2
811111dc:	10c001cc 	andi	r3,r2,7
811111e0:	18000426 	beq	r3,zero,811111f4 <__mulsf3+0x3b8>
811111e4:	10c003cc 	andi	r3,r2,15
811111e8:	01000104 	movi	r4,4
811111ec:	19000126 	beq	r3,r4,811111f4 <__mulsf3+0x3b8>
811111f0:	1105883a 	add	r2,r2,r4
811111f4:	10c1002c 	andhi	r3,r2,1024
811111f8:	18000626 	beq	r3,zero,81111214 <__mulsf3+0x3d8>
811111fc:	a829883a 	mov	r20,r21
81111200:	00c00044 	movi	r3,1
81111204:	0009883a 	mov	r4,zero
81111208:	003f6106 	br	81110f90 <__reset+0xfb0f0f90>
8111120c:	3821883a 	mov	r16,r7
81111210:	003fc506 	br	81111128 <__reset+0xfb0f1128>
81111214:	100491ba 	slli	r2,r2,6
81111218:	a829883a 	mov	r20,r21
8111121c:	0007883a 	mov	r3,zero
81111220:	1008d27a 	srli	r4,r2,9
81111224:	003f5a06 	br	81110f90 <__reset+0xfb0f0f90>
81111228:	00802034 	movhi	r2,128
8111122c:	99001034 	orhi	r4,r19,64
81111230:	10bfffc4 	addi	r2,r2,-1
81111234:	a829883a 	mov	r20,r21
81111238:	2088703a 	and	r4,r4,r2
8111123c:	003f9206 	br	81111088 <__reset+0xfb0f1088>

81111240 <__floatsisf>:
81111240:	defffd04 	addi	sp,sp,-12
81111244:	de00012e 	bgeu	sp,et,8111124c <__floatsisf+0xc>
81111248:	003b68fa 	trap	3
8111124c:	dfc00215 	stw	ra,8(sp)
81111250:	dc400115 	stw	r17,4(sp)
81111254:	dc000015 	stw	r16,0(sp)
81111258:	20003526 	beq	r4,zero,81111330 <__floatsisf+0xf0>
8111125c:	2021883a 	mov	r16,r4
81111260:	2022d7fa 	srli	r17,r4,31
81111264:	20003616 	blt	r4,zero,81111340 <__floatsisf+0x100>
81111268:	8009883a 	mov	r4,r16
8111126c:	1111e440 	call	81111e44 <__clzsi2>
81111270:	00c02784 	movi	r3,158
81111274:	1887c83a 	sub	r3,r3,r2
81111278:	01002584 	movi	r4,150
8111127c:	20c01416 	blt	r4,r3,811112d0 <__floatsisf+0x90>
81111280:	20c9c83a 	sub	r4,r4,r3
81111284:	8120983a 	sll	r16,r16,r4
81111288:	00802034 	movhi	r2,128
8111128c:	10bfffc4 	addi	r2,r2,-1
81111290:	8809883a 	mov	r4,r17
81111294:	80a0703a 	and	r16,r16,r2
81111298:	18803fcc 	andi	r2,r3,255
8111129c:	100695fa 	slli	r3,r2,23
811112a0:	20803fcc 	andi	r2,r4,255
811112a4:	100897fa 	slli	r4,r2,31
811112a8:	00802034 	movhi	r2,128
811112ac:	10bfffc4 	addi	r2,r2,-1
811112b0:	8084703a 	and	r2,r16,r2
811112b4:	10c4b03a 	or	r2,r2,r3
811112b8:	1104b03a 	or	r2,r2,r4
811112bc:	dfc00217 	ldw	ra,8(sp)
811112c0:	dc400117 	ldw	r17,4(sp)
811112c4:	dc000017 	ldw	r16,0(sp)
811112c8:	dec00304 	addi	sp,sp,12
811112cc:	f800283a 	ret
811112d0:	01002644 	movi	r4,153
811112d4:	20c01c16 	blt	r4,r3,81111348 <__floatsisf+0x108>
811112d8:	20c9c83a 	sub	r4,r4,r3
811112dc:	8120983a 	sll	r16,r16,r4
811112e0:	013f0034 	movhi	r4,64512
811112e4:	213fffc4 	addi	r4,r4,-1
811112e8:	814001cc 	andi	r5,r16,7
811112ec:	8108703a 	and	r4,r16,r4
811112f0:	28000426 	beq	r5,zero,81111304 <__floatsisf+0xc4>
811112f4:	840003cc 	andi	r16,r16,15
811112f8:	01400104 	movi	r5,4
811112fc:	81400126 	beq	r16,r5,81111304 <__floatsisf+0xc4>
81111300:	2149883a 	add	r4,r4,r5
81111304:	2141002c 	andhi	r5,r4,1024
81111308:	28000526 	beq	r5,zero,81111320 <__floatsisf+0xe0>
8111130c:	00c027c4 	movi	r3,159
81111310:	1887c83a 	sub	r3,r3,r2
81111314:	00bf0034 	movhi	r2,64512
81111318:	10bfffc4 	addi	r2,r2,-1
8111131c:	2088703a 	and	r4,r4,r2
81111320:	202091ba 	slli	r16,r4,6
81111324:	8809883a 	mov	r4,r17
81111328:	8020d27a 	srli	r16,r16,9
8111132c:	003fda06 	br	81111298 <__reset+0xfb0f1298>
81111330:	0009883a 	mov	r4,zero
81111334:	0007883a 	mov	r3,zero
81111338:	0021883a 	mov	r16,zero
8111133c:	003fd606 	br	81111298 <__reset+0xfb0f1298>
81111340:	0121c83a 	sub	r16,zero,r4
81111344:	003fc806 	br	81111268 <__reset+0xfb0f1268>
81111348:	01002e44 	movi	r4,185
8111134c:	20c9c83a 	sub	r4,r4,r3
81111350:	01400144 	movi	r5,5
81111354:	8108983a 	sll	r4,r16,r4
81111358:	288bc83a 	sub	r5,r5,r2
8111135c:	8160d83a 	srl	r16,r16,r5
81111360:	2008c03a 	cmpne	r4,r4,zero
81111364:	8120b03a 	or	r16,r16,r4
81111368:	003fdd06 	br	811112e0 <__reset+0xfb0f12e0>

8111136c <__floatunsisf>:
8111136c:	defffe04 	addi	sp,sp,-8
81111370:	de00012e 	bgeu	sp,et,81111378 <__floatunsisf+0xc>
81111374:	003b68fa 	trap	3
81111378:	dfc00115 	stw	ra,4(sp)
8111137c:	dc000015 	stw	r16,0(sp)
81111380:	20002c26 	beq	r4,zero,81111434 <__floatunsisf+0xc8>
81111384:	2021883a 	mov	r16,r4
81111388:	1111e440 	call	81111e44 <__clzsi2>
8111138c:	00c02784 	movi	r3,158
81111390:	1887c83a 	sub	r3,r3,r2
81111394:	01002584 	movi	r4,150
81111398:	20c00f16 	blt	r4,r3,811113d8 <__floatunsisf+0x6c>
8111139c:	20c9c83a 	sub	r4,r4,r3
811113a0:	8108983a 	sll	r4,r16,r4
811113a4:	00802034 	movhi	r2,128
811113a8:	10bfffc4 	addi	r2,r2,-1
811113ac:	2088703a 	and	r4,r4,r2
811113b0:	18803fcc 	andi	r2,r3,255
811113b4:	100695fa 	slli	r3,r2,23
811113b8:	00802034 	movhi	r2,128
811113bc:	10bfffc4 	addi	r2,r2,-1
811113c0:	2084703a 	and	r2,r4,r2
811113c4:	10c4b03a 	or	r2,r2,r3
811113c8:	dfc00117 	ldw	ra,4(sp)
811113cc:	dc000017 	ldw	r16,0(sp)
811113d0:	dec00204 	addi	sp,sp,8
811113d4:	f800283a 	ret
811113d8:	01002644 	movi	r4,153
811113dc:	20c01816 	blt	r4,r3,81111440 <__floatunsisf+0xd4>
811113e0:	20c9c83a 	sub	r4,r4,r3
811113e4:	8108983a 	sll	r4,r16,r4
811113e8:	017f0034 	movhi	r5,64512
811113ec:	297fffc4 	addi	r5,r5,-1
811113f0:	218001cc 	andi	r6,r4,7
811113f4:	214a703a 	and	r5,r4,r5
811113f8:	30000426 	beq	r6,zero,8111140c <__floatunsisf+0xa0>
811113fc:	210003cc 	andi	r4,r4,15
81111400:	01800104 	movi	r6,4
81111404:	21800126 	beq	r4,r6,8111140c <__floatunsisf+0xa0>
81111408:	298b883a 	add	r5,r5,r6
8111140c:	2901002c 	andhi	r4,r5,1024
81111410:	20000526 	beq	r4,zero,81111428 <__floatunsisf+0xbc>
81111414:	00c027c4 	movi	r3,159
81111418:	1887c83a 	sub	r3,r3,r2
8111141c:	00bf0034 	movhi	r2,64512
81111420:	10bfffc4 	addi	r2,r2,-1
81111424:	288a703a 	and	r5,r5,r2
81111428:	280891ba 	slli	r4,r5,6
8111142c:	2008d27a 	srli	r4,r4,9
81111430:	003fdf06 	br	811113b0 <__reset+0xfb0f13b0>
81111434:	0007883a 	mov	r3,zero
81111438:	0009883a 	mov	r4,zero
8111143c:	003fdc06 	br	811113b0 <__reset+0xfb0f13b0>
81111440:	01402e44 	movi	r5,185
81111444:	28cbc83a 	sub	r5,r5,r3
81111448:	01000144 	movi	r4,5
8111144c:	2089c83a 	sub	r4,r4,r2
81111450:	814a983a 	sll	r5,r16,r5
81111454:	8108d83a 	srl	r4,r16,r4
81111458:	2820c03a 	cmpne	r16,r5,zero
8111145c:	2408b03a 	or	r4,r4,r16
81111460:	003fe106 	br	811113e8 <__reset+0xfb0f13e8>

81111464 <__muldf3>:
81111464:	defff304 	addi	sp,sp,-52
81111468:	2804d53a 	srli	r2,r5,20
8111146c:	de00012e 	bgeu	sp,et,81111474 <__muldf3+0x10>
81111470:	003b68fa 	trap	3
81111474:	dd800915 	stw	r22,36(sp)
81111478:	282cd7fa 	srli	r22,r5,31
8111147c:	dc000315 	stw	r16,12(sp)
81111480:	04000434 	movhi	r16,16
81111484:	dd400815 	stw	r21,32(sp)
81111488:	dc800515 	stw	r18,20(sp)
8111148c:	843fffc4 	addi	r16,r16,-1
81111490:	dfc00c15 	stw	ra,48(sp)
81111494:	df000b15 	stw	fp,44(sp)
81111498:	ddc00a15 	stw	r23,40(sp)
8111149c:	dd000715 	stw	r20,28(sp)
811114a0:	dcc00615 	stw	r19,24(sp)
811114a4:	dc400415 	stw	r17,16(sp)
811114a8:	1481ffcc 	andi	r18,r2,2047
811114ac:	2c20703a 	and	r16,r5,r16
811114b0:	b02b883a 	mov	r21,r22
811114b4:	b2403fcc 	andi	r9,r22,255
811114b8:	90006026 	beq	r18,zero,8111163c <__muldf3+0x1d8>
811114bc:	0081ffc4 	movi	r2,2047
811114c0:	2029883a 	mov	r20,r4
811114c4:	90803626 	beq	r18,r2,811115a0 <__muldf3+0x13c>
811114c8:	80800434 	orhi	r2,r16,16
811114cc:	100490fa 	slli	r2,r2,3
811114d0:	2020d77a 	srli	r16,r4,29
811114d4:	202890fa 	slli	r20,r4,3
811114d8:	94bf0044 	addi	r18,r18,-1023
811114dc:	80a0b03a 	or	r16,r16,r2
811114e0:	0027883a 	mov	r19,zero
811114e4:	0039883a 	mov	fp,zero
811114e8:	3804d53a 	srli	r2,r7,20
811114ec:	382ed7fa 	srli	r23,r7,31
811114f0:	04400434 	movhi	r17,16
811114f4:	8c7fffc4 	addi	r17,r17,-1
811114f8:	1081ffcc 	andi	r2,r2,2047
811114fc:	3011883a 	mov	r8,r6
81111500:	3c62703a 	and	r17,r7,r17
81111504:	ba803fcc 	andi	r10,r23,255
81111508:	10006d26 	beq	r2,zero,811116c0 <__muldf3+0x25c>
8111150c:	00c1ffc4 	movi	r3,2047
81111510:	10c06526 	beq	r2,r3,811116a8 <__muldf3+0x244>
81111514:	88c00434 	orhi	r3,r17,16
81111518:	180690fa 	slli	r3,r3,3
8111151c:	3022d77a 	srli	r17,r6,29
81111520:	301090fa 	slli	r8,r6,3
81111524:	10bf0044 	addi	r2,r2,-1023
81111528:	88e2b03a 	or	r17,r17,r3
8111152c:	000b883a 	mov	r5,zero
81111530:	9085883a 	add	r2,r18,r2
81111534:	2cc8b03a 	or	r4,r5,r19
81111538:	00c003c4 	movi	r3,15
8111153c:	bdacf03a 	xor	r22,r23,r22
81111540:	12c00044 	addi	r11,r2,1
81111544:	19009936 	bltu	r3,r4,811117ac <__muldf3+0x348>
81111548:	200890ba 	slli	r4,r4,2
8111154c:	00e04474 	movhi	r3,33041
81111550:	18c55804 	addi	r3,r3,5472
81111554:	20c9883a 	add	r4,r4,r3
81111558:	20c00017 	ldw	r3,0(r4)
8111155c:	1800683a 	jmp	r3
81111560:	811117ac 	andhi	r4,r16,17502
81111564:	811115c0 	call	8811115c <__reset+0x20f115c>
81111568:	811115c0 	call	8811115c <__reset+0x20f115c>
8111156c:	811115bc 	xorhi	r4,r16,17494
81111570:	81111788 	cmpgei	r4,r16,17502
81111574:	81111788 	cmpgei	r4,r16,17502
81111578:	81111770 	cmpltui	r4,r16,17501
8111157c:	811115bc 	xorhi	r4,r16,17494
81111580:	81111788 	cmpgei	r4,r16,17502
81111584:	81111770 	cmpltui	r4,r16,17501
81111588:	81111788 	cmpgei	r4,r16,17502
8111158c:	811115bc 	xorhi	r4,r16,17494
81111590:	81111798 	cmpnei	r4,r16,17502
81111594:	81111798 	cmpnei	r4,r16,17502
81111598:	81111798 	cmpnei	r4,r16,17502
8111159c:	811119b4 	orhi	r4,r16,17510
811115a0:	2404b03a 	or	r2,r4,r16
811115a4:	10006f1e 	bne	r2,zero,81111764 <__muldf3+0x300>
811115a8:	04c00204 	movi	r19,8
811115ac:	0021883a 	mov	r16,zero
811115b0:	0029883a 	mov	r20,zero
811115b4:	07000084 	movi	fp,2
811115b8:	003fcb06 	br	811114e8 <__reset+0xfb0f14e8>
811115bc:	502d883a 	mov	r22,r10
811115c0:	00800084 	movi	r2,2
811115c4:	28805726 	beq	r5,r2,81111724 <__muldf3+0x2c0>
811115c8:	008000c4 	movi	r2,3
811115cc:	28816626 	beq	r5,r2,81111b68 <__muldf3+0x704>
811115d0:	00800044 	movi	r2,1
811115d4:	2881411e 	bne	r5,r2,81111adc <__muldf3+0x678>
811115d8:	b02b883a 	mov	r21,r22
811115dc:	0005883a 	mov	r2,zero
811115e0:	000b883a 	mov	r5,zero
811115e4:	0029883a 	mov	r20,zero
811115e8:	1004953a 	slli	r2,r2,20
811115ec:	a8c03fcc 	andi	r3,r21,255
811115f0:	04400434 	movhi	r17,16
811115f4:	8c7fffc4 	addi	r17,r17,-1
811115f8:	180697fa 	slli	r3,r3,31
811115fc:	2c4a703a 	and	r5,r5,r17
81111600:	288ab03a 	or	r5,r5,r2
81111604:	28c6b03a 	or	r3,r5,r3
81111608:	a005883a 	mov	r2,r20
8111160c:	dfc00c17 	ldw	ra,48(sp)
81111610:	df000b17 	ldw	fp,44(sp)
81111614:	ddc00a17 	ldw	r23,40(sp)
81111618:	dd800917 	ldw	r22,36(sp)
8111161c:	dd400817 	ldw	r21,32(sp)
81111620:	dd000717 	ldw	r20,28(sp)
81111624:	dcc00617 	ldw	r19,24(sp)
81111628:	dc800517 	ldw	r18,20(sp)
8111162c:	dc400417 	ldw	r17,16(sp)
81111630:	dc000317 	ldw	r16,12(sp)
81111634:	dec00d04 	addi	sp,sp,52
81111638:	f800283a 	ret
8111163c:	2404b03a 	or	r2,r4,r16
81111640:	2027883a 	mov	r19,r4
81111644:	10004226 	beq	r2,zero,81111750 <__muldf3+0x2ec>
81111648:	8000fc26 	beq	r16,zero,81111a3c <__muldf3+0x5d8>
8111164c:	8009883a 	mov	r4,r16
81111650:	d9800215 	stw	r6,8(sp)
81111654:	d9c00015 	stw	r7,0(sp)
81111658:	da400115 	stw	r9,4(sp)
8111165c:	1111e440 	call	81111e44 <__clzsi2>
81111660:	d9800217 	ldw	r6,8(sp)
81111664:	d9c00017 	ldw	r7,0(sp)
81111668:	da400117 	ldw	r9,4(sp)
8111166c:	113ffd44 	addi	r4,r2,-11
81111670:	00c00704 	movi	r3,28
81111674:	1900ed16 	blt	r3,r4,81111a2c <__muldf3+0x5c8>
81111678:	00c00744 	movi	r3,29
8111167c:	147ffe04 	addi	r17,r2,-8
81111680:	1907c83a 	sub	r3,r3,r4
81111684:	8460983a 	sll	r16,r16,r17
81111688:	98c6d83a 	srl	r3,r19,r3
8111168c:	9c68983a 	sll	r20,r19,r17
81111690:	1c20b03a 	or	r16,r3,r16
81111694:	1080fcc4 	addi	r2,r2,1011
81111698:	00a5c83a 	sub	r18,zero,r2
8111169c:	0027883a 	mov	r19,zero
811116a0:	0039883a 	mov	fp,zero
811116a4:	003f9006 	br	811114e8 <__reset+0xfb0f14e8>
811116a8:	3446b03a 	or	r3,r6,r17
811116ac:	1800261e 	bne	r3,zero,81111748 <__muldf3+0x2e4>
811116b0:	0023883a 	mov	r17,zero
811116b4:	0011883a 	mov	r8,zero
811116b8:	01400084 	movi	r5,2
811116bc:	003f9c06 	br	81111530 <__reset+0xfb0f1530>
811116c0:	3446b03a 	or	r3,r6,r17
811116c4:	18001c26 	beq	r3,zero,81111738 <__muldf3+0x2d4>
811116c8:	8800ce26 	beq	r17,zero,81111a04 <__muldf3+0x5a0>
811116cc:	8809883a 	mov	r4,r17
811116d0:	d9800215 	stw	r6,8(sp)
811116d4:	da400115 	stw	r9,4(sp)
811116d8:	da800015 	stw	r10,0(sp)
811116dc:	1111e440 	call	81111e44 <__clzsi2>
811116e0:	d9800217 	ldw	r6,8(sp)
811116e4:	da400117 	ldw	r9,4(sp)
811116e8:	da800017 	ldw	r10,0(sp)
811116ec:	113ffd44 	addi	r4,r2,-11
811116f0:	00c00704 	movi	r3,28
811116f4:	1900bf16 	blt	r3,r4,811119f4 <__muldf3+0x590>
811116f8:	00c00744 	movi	r3,29
811116fc:	123ffe04 	addi	r8,r2,-8
81111700:	1907c83a 	sub	r3,r3,r4
81111704:	8a22983a 	sll	r17,r17,r8
81111708:	30c6d83a 	srl	r3,r6,r3
8111170c:	3210983a 	sll	r8,r6,r8
81111710:	1c62b03a 	or	r17,r3,r17
81111714:	1080fcc4 	addi	r2,r2,1011
81111718:	0085c83a 	sub	r2,zero,r2
8111171c:	000b883a 	mov	r5,zero
81111720:	003f8306 	br	81111530 <__reset+0xfb0f1530>
81111724:	b02b883a 	mov	r21,r22
81111728:	0081ffc4 	movi	r2,2047
8111172c:	000b883a 	mov	r5,zero
81111730:	0029883a 	mov	r20,zero
81111734:	003fac06 	br	811115e8 <__reset+0xfb0f15e8>
81111738:	0023883a 	mov	r17,zero
8111173c:	0011883a 	mov	r8,zero
81111740:	01400044 	movi	r5,1
81111744:	003f7a06 	br	81111530 <__reset+0xfb0f1530>
81111748:	014000c4 	movi	r5,3
8111174c:	003f7806 	br	81111530 <__reset+0xfb0f1530>
81111750:	04c00104 	movi	r19,4
81111754:	0021883a 	mov	r16,zero
81111758:	0029883a 	mov	r20,zero
8111175c:	07000044 	movi	fp,1
81111760:	003f6106 	br	811114e8 <__reset+0xfb0f14e8>
81111764:	04c00304 	movi	r19,12
81111768:	070000c4 	movi	fp,3
8111176c:	003f5e06 	br	811114e8 <__reset+0xfb0f14e8>
81111770:	01400434 	movhi	r5,16
81111774:	002b883a 	mov	r21,zero
81111778:	297fffc4 	addi	r5,r5,-1
8111177c:	053fffc4 	movi	r20,-1
81111780:	0081ffc4 	movi	r2,2047
81111784:	003f9806 	br	811115e8 <__reset+0xfb0f15e8>
81111788:	8023883a 	mov	r17,r16
8111178c:	a011883a 	mov	r8,r20
81111790:	e00b883a 	mov	r5,fp
81111794:	003f8a06 	br	811115c0 <__reset+0xfb0f15c0>
81111798:	8023883a 	mov	r17,r16
8111179c:	a011883a 	mov	r8,r20
811117a0:	482d883a 	mov	r22,r9
811117a4:	e00b883a 	mov	r5,fp
811117a8:	003f8506 	br	811115c0 <__reset+0xfb0f15c0>
811117ac:	a00ad43a 	srli	r5,r20,16
811117b0:	401ad43a 	srli	r13,r8,16
811117b4:	a53fffcc 	andi	r20,r20,65535
811117b8:	423fffcc 	andi	r8,r8,65535
811117bc:	4519383a 	mul	r12,r8,r20
811117c0:	4147383a 	mul	r3,r8,r5
811117c4:	6d09383a 	mul	r4,r13,r20
811117c8:	600cd43a 	srli	r6,r12,16
811117cc:	2b5d383a 	mul	r14,r5,r13
811117d0:	20c9883a 	add	r4,r4,r3
811117d4:	310d883a 	add	r6,r6,r4
811117d8:	30c0022e 	bgeu	r6,r3,811117e4 <__muldf3+0x380>
811117dc:	00c00074 	movhi	r3,1
811117e0:	70dd883a 	add	r14,r14,r3
811117e4:	8826d43a 	srli	r19,r17,16
811117e8:	8bffffcc 	andi	r15,r17,65535
811117ec:	7d23383a 	mul	r17,r15,r20
811117f0:	7949383a 	mul	r4,r15,r5
811117f4:	9d29383a 	mul	r20,r19,r20
811117f8:	8814d43a 	srli	r10,r17,16
811117fc:	3012943a 	slli	r9,r6,16
81111800:	a129883a 	add	r20,r20,r4
81111804:	633fffcc 	andi	r12,r12,65535
81111808:	5515883a 	add	r10,r10,r20
8111180c:	3006d43a 	srli	r3,r6,16
81111810:	4b13883a 	add	r9,r9,r12
81111814:	2ccb383a 	mul	r5,r5,r19
81111818:	5100022e 	bgeu	r10,r4,81111824 <__muldf3+0x3c0>
8111181c:	01000074 	movhi	r4,1
81111820:	290b883a 	add	r5,r5,r4
81111824:	802ad43a 	srli	r21,r16,16
81111828:	843fffcc 	andi	r16,r16,65535
8111182c:	440d383a 	mul	r6,r8,r16
81111830:	4565383a 	mul	r18,r8,r21
81111834:	8349383a 	mul	r4,r16,r13
81111838:	500e943a 	slli	r7,r10,16
8111183c:	3010d43a 	srli	r8,r6,16
81111840:	5028d43a 	srli	r20,r10,16
81111844:	2489883a 	add	r4,r4,r18
81111848:	8abfffcc 	andi	r10,r17,65535
8111184c:	3a95883a 	add	r10,r7,r10
81111850:	4119883a 	add	r12,r8,r4
81111854:	a169883a 	add	r20,r20,r5
81111858:	1a87883a 	add	r3,r3,r10
8111185c:	6d5b383a 	mul	r13,r13,r21
81111860:	6480022e 	bgeu	r12,r18,8111186c <__muldf3+0x408>
81111864:	01000074 	movhi	r4,1
81111868:	691b883a 	add	r13,r13,r4
8111186c:	7c25383a 	mul	r18,r15,r16
81111870:	7d4b383a 	mul	r5,r15,r21
81111874:	84cf383a 	mul	r7,r16,r19
81111878:	901ed43a 	srli	r15,r18,16
8111187c:	6008d43a 	srli	r4,r12,16
81111880:	6010943a 	slli	r8,r12,16
81111884:	394f883a 	add	r7,r7,r5
81111888:	333fffcc 	andi	r12,r6,65535
8111188c:	79df883a 	add	r15,r15,r7
81111890:	235b883a 	add	r13,r4,r13
81111894:	9d63383a 	mul	r17,r19,r21
81111898:	4309883a 	add	r4,r8,r12
8111189c:	7940022e 	bgeu	r15,r5,811118a8 <__muldf3+0x444>
811118a0:	01400074 	movhi	r5,1
811118a4:	8963883a 	add	r17,r17,r5
811118a8:	780a943a 	slli	r5,r15,16
811118ac:	91bfffcc 	andi	r6,r18,65535
811118b0:	70c7883a 	add	r3,r14,r3
811118b4:	298d883a 	add	r6,r5,r6
811118b8:	1a8f803a 	cmpltu	r7,r3,r10
811118bc:	350b883a 	add	r5,r6,r20
811118c0:	20c7883a 	add	r3,r4,r3
811118c4:	3955883a 	add	r10,r7,r5
811118c8:	1909803a 	cmpltu	r4,r3,r4
811118cc:	6a91883a 	add	r8,r13,r10
811118d0:	780cd43a 	srli	r6,r15,16
811118d4:	2219883a 	add	r12,r4,r8
811118d8:	2d0b803a 	cmpltu	r5,r5,r20
811118dc:	51cf803a 	cmpltu	r7,r10,r7
811118e0:	29ceb03a 	or	r7,r5,r7
811118e4:	4351803a 	cmpltu	r8,r8,r13
811118e8:	610b803a 	cmpltu	r5,r12,r4
811118ec:	4148b03a 	or	r4,r8,r5
811118f0:	398f883a 	add	r7,r7,r6
811118f4:	3909883a 	add	r4,r7,r4
811118f8:	1810927a 	slli	r8,r3,9
811118fc:	2449883a 	add	r4,r4,r17
81111900:	2008927a 	slli	r4,r4,9
81111904:	6022d5fa 	srli	r17,r12,23
81111908:	1806d5fa 	srli	r3,r3,23
8111190c:	4252b03a 	or	r9,r8,r9
81111910:	600a927a 	slli	r5,r12,9
81111914:	4810c03a 	cmpne	r8,r9,zero
81111918:	2462b03a 	or	r17,r4,r17
8111191c:	40c6b03a 	or	r3,r8,r3
81111920:	8900402c 	andhi	r4,r17,256
81111924:	1950b03a 	or	r8,r3,r5
81111928:	20000726 	beq	r4,zero,81111948 <__muldf3+0x4e4>
8111192c:	4006d07a 	srli	r3,r8,1
81111930:	880497fa 	slli	r2,r17,31
81111934:	4200004c 	andi	r8,r8,1
81111938:	8822d07a 	srli	r17,r17,1
8111193c:	1a10b03a 	or	r8,r3,r8
81111940:	1210b03a 	or	r8,r2,r8
81111944:	5805883a 	mov	r2,r11
81111948:	1140ffc4 	addi	r5,r2,1023
8111194c:	0140440e 	bge	zero,r5,81111a60 <__muldf3+0x5fc>
81111950:	40c001cc 	andi	r3,r8,7
81111954:	18000726 	beq	r3,zero,81111974 <__muldf3+0x510>
81111958:	40c003cc 	andi	r3,r8,15
8111195c:	01000104 	movi	r4,4
81111960:	19000426 	beq	r3,r4,81111974 <__muldf3+0x510>
81111964:	4107883a 	add	r3,r8,r4
81111968:	1a11803a 	cmpltu	r8,r3,r8
8111196c:	8a23883a 	add	r17,r17,r8
81111970:	1811883a 	mov	r8,r3
81111974:	88c0402c 	andhi	r3,r17,256
81111978:	18000426 	beq	r3,zero,8111198c <__muldf3+0x528>
8111197c:	11410004 	addi	r5,r2,1024
81111980:	00bfc034 	movhi	r2,65280
81111984:	10bfffc4 	addi	r2,r2,-1
81111988:	88a2703a 	and	r17,r17,r2
8111198c:	0081ff84 	movi	r2,2046
81111990:	117f6416 	blt	r2,r5,81111724 <__reset+0xfb0f1724>
81111994:	8828977a 	slli	r20,r17,29
81111998:	4010d0fa 	srli	r8,r8,3
8111199c:	8822927a 	slli	r17,r17,9
811119a0:	2881ffcc 	andi	r2,r5,2047
811119a4:	a228b03a 	or	r20,r20,r8
811119a8:	880ad33a 	srli	r5,r17,12
811119ac:	b02b883a 	mov	r21,r22
811119b0:	003f0d06 	br	811115e8 <__reset+0xfb0f15e8>
811119b4:	8080022c 	andhi	r2,r16,8
811119b8:	10000926 	beq	r2,zero,811119e0 <__muldf3+0x57c>
811119bc:	8880022c 	andhi	r2,r17,8
811119c0:	1000071e 	bne	r2,zero,811119e0 <__muldf3+0x57c>
811119c4:	00800434 	movhi	r2,16
811119c8:	89400234 	orhi	r5,r17,8
811119cc:	10bfffc4 	addi	r2,r2,-1
811119d0:	b82b883a 	mov	r21,r23
811119d4:	288a703a 	and	r5,r5,r2
811119d8:	4029883a 	mov	r20,r8
811119dc:	003f6806 	br	81111780 <__reset+0xfb0f1780>
811119e0:	00800434 	movhi	r2,16
811119e4:	81400234 	orhi	r5,r16,8
811119e8:	10bfffc4 	addi	r2,r2,-1
811119ec:	288a703a 	and	r5,r5,r2
811119f0:	003f6306 	br	81111780 <__reset+0xfb0f1780>
811119f4:	147ff604 	addi	r17,r2,-40
811119f8:	3462983a 	sll	r17,r6,r17
811119fc:	0011883a 	mov	r8,zero
81111a00:	003f4406 	br	81111714 <__reset+0xfb0f1714>
81111a04:	3009883a 	mov	r4,r6
81111a08:	d9800215 	stw	r6,8(sp)
81111a0c:	da400115 	stw	r9,4(sp)
81111a10:	da800015 	stw	r10,0(sp)
81111a14:	1111e440 	call	81111e44 <__clzsi2>
81111a18:	10800804 	addi	r2,r2,32
81111a1c:	da800017 	ldw	r10,0(sp)
81111a20:	da400117 	ldw	r9,4(sp)
81111a24:	d9800217 	ldw	r6,8(sp)
81111a28:	003f3006 	br	811116ec <__reset+0xfb0f16ec>
81111a2c:	143ff604 	addi	r16,r2,-40
81111a30:	9c20983a 	sll	r16,r19,r16
81111a34:	0029883a 	mov	r20,zero
81111a38:	003f1606 	br	81111694 <__reset+0xfb0f1694>
81111a3c:	d9800215 	stw	r6,8(sp)
81111a40:	d9c00015 	stw	r7,0(sp)
81111a44:	da400115 	stw	r9,4(sp)
81111a48:	1111e440 	call	81111e44 <__clzsi2>
81111a4c:	10800804 	addi	r2,r2,32
81111a50:	da400117 	ldw	r9,4(sp)
81111a54:	d9c00017 	ldw	r7,0(sp)
81111a58:	d9800217 	ldw	r6,8(sp)
81111a5c:	003f0306 	br	8111166c <__reset+0xfb0f166c>
81111a60:	00c00044 	movi	r3,1
81111a64:	1947c83a 	sub	r3,r3,r5
81111a68:	00800e04 	movi	r2,56
81111a6c:	10feda16 	blt	r2,r3,811115d8 <__reset+0xfb0f15d8>
81111a70:	008007c4 	movi	r2,31
81111a74:	10c01b16 	blt	r2,r3,81111ae4 <__muldf3+0x680>
81111a78:	00800804 	movi	r2,32
81111a7c:	10c5c83a 	sub	r2,r2,r3
81111a80:	888a983a 	sll	r5,r17,r2
81111a84:	40c8d83a 	srl	r4,r8,r3
81111a88:	4084983a 	sll	r2,r8,r2
81111a8c:	88e2d83a 	srl	r17,r17,r3
81111a90:	2906b03a 	or	r3,r5,r4
81111a94:	1004c03a 	cmpne	r2,r2,zero
81111a98:	1886b03a 	or	r3,r3,r2
81111a9c:	188001cc 	andi	r2,r3,7
81111aa0:	10000726 	beq	r2,zero,81111ac0 <__muldf3+0x65c>
81111aa4:	188003cc 	andi	r2,r3,15
81111aa8:	01000104 	movi	r4,4
81111aac:	11000426 	beq	r2,r4,81111ac0 <__muldf3+0x65c>
81111ab0:	1805883a 	mov	r2,r3
81111ab4:	10c00104 	addi	r3,r2,4
81111ab8:	1885803a 	cmpltu	r2,r3,r2
81111abc:	88a3883a 	add	r17,r17,r2
81111ac0:	8880202c 	andhi	r2,r17,128
81111ac4:	10001c26 	beq	r2,zero,81111b38 <__muldf3+0x6d4>
81111ac8:	b02b883a 	mov	r21,r22
81111acc:	00800044 	movi	r2,1
81111ad0:	000b883a 	mov	r5,zero
81111ad4:	0029883a 	mov	r20,zero
81111ad8:	003ec306 	br	811115e8 <__reset+0xfb0f15e8>
81111adc:	5805883a 	mov	r2,r11
81111ae0:	003f9906 	br	81111948 <__reset+0xfb0f1948>
81111ae4:	00bff844 	movi	r2,-31
81111ae8:	1145c83a 	sub	r2,r2,r5
81111aec:	8888d83a 	srl	r4,r17,r2
81111af0:	00800804 	movi	r2,32
81111af4:	18801a26 	beq	r3,r2,81111b60 <__muldf3+0x6fc>
81111af8:	00801004 	movi	r2,64
81111afc:	10c5c83a 	sub	r2,r2,r3
81111b00:	8884983a 	sll	r2,r17,r2
81111b04:	1204b03a 	or	r2,r2,r8
81111b08:	1004c03a 	cmpne	r2,r2,zero
81111b0c:	2084b03a 	or	r2,r4,r2
81111b10:	144001cc 	andi	r17,r2,7
81111b14:	88000d1e 	bne	r17,zero,81111b4c <__muldf3+0x6e8>
81111b18:	000b883a 	mov	r5,zero
81111b1c:	1028d0fa 	srli	r20,r2,3
81111b20:	b02b883a 	mov	r21,r22
81111b24:	0005883a 	mov	r2,zero
81111b28:	a468b03a 	or	r20,r20,r17
81111b2c:	003eae06 	br	811115e8 <__reset+0xfb0f15e8>
81111b30:	1007883a 	mov	r3,r2
81111b34:	0023883a 	mov	r17,zero
81111b38:	880a927a 	slli	r5,r17,9
81111b3c:	1805883a 	mov	r2,r3
81111b40:	8822977a 	slli	r17,r17,29
81111b44:	280ad33a 	srli	r5,r5,12
81111b48:	003ff406 	br	81111b1c <__reset+0xfb0f1b1c>
81111b4c:	10c003cc 	andi	r3,r2,15
81111b50:	01000104 	movi	r4,4
81111b54:	193ff626 	beq	r3,r4,81111b30 <__reset+0xfb0f1b30>
81111b58:	0023883a 	mov	r17,zero
81111b5c:	003fd506 	br	81111ab4 <__reset+0xfb0f1ab4>
81111b60:	0005883a 	mov	r2,zero
81111b64:	003fe706 	br	81111b04 <__reset+0xfb0f1b04>
81111b68:	00800434 	movhi	r2,16
81111b6c:	89400234 	orhi	r5,r17,8
81111b70:	10bfffc4 	addi	r2,r2,-1
81111b74:	b02b883a 	mov	r21,r22
81111b78:	288a703a 	and	r5,r5,r2
81111b7c:	4029883a 	mov	r20,r8
81111b80:	003eff06 	br	81111780 <__reset+0xfb0f1780>

81111b84 <__extendsfdf2>:
81111b84:	200ad5fa 	srli	r5,r4,23
81111b88:	defffd04 	addi	sp,sp,-12
81111b8c:	de00012e 	bgeu	sp,et,81111b94 <__extendsfdf2+0x10>
81111b90:	003b68fa 	trap	3
81111b94:	29403fcc 	andi	r5,r5,255
81111b98:	dc400115 	stw	r17,4(sp)
81111b9c:	29800044 	addi	r6,r5,1
81111ba0:	04402034 	movhi	r17,128
81111ba4:	dc000015 	stw	r16,0(sp)
81111ba8:	8c7fffc4 	addi	r17,r17,-1
81111bac:	dfc00215 	stw	ra,8(sp)
81111bb0:	31803fcc 	andi	r6,r6,255
81111bb4:	00800044 	movi	r2,1
81111bb8:	8922703a 	and	r17,r17,r4
81111bbc:	2020d7fa 	srli	r16,r4,31
81111bc0:	1180110e 	bge	r2,r6,81111c08 <__extendsfdf2+0x84>
81111bc4:	880cd0fa 	srli	r6,r17,3
81111bc8:	8822977a 	slli	r17,r17,29
81111bcc:	2940e004 	addi	r5,r5,896
81111bd0:	2941ffcc 	andi	r5,r5,2047
81111bd4:	2804953a 	slli	r2,r5,20
81111bd8:	01400434 	movhi	r5,16
81111bdc:	800697fa 	slli	r3,r16,31
81111be0:	297fffc4 	addi	r5,r5,-1
81111be4:	314a703a 	and	r5,r6,r5
81111be8:	288ab03a 	or	r5,r5,r2
81111bec:	28c6b03a 	or	r3,r5,r3
81111bf0:	8805883a 	mov	r2,r17
81111bf4:	dfc00217 	ldw	ra,8(sp)
81111bf8:	dc400117 	ldw	r17,4(sp)
81111bfc:	dc000017 	ldw	r16,0(sp)
81111c00:	dec00304 	addi	sp,sp,12
81111c04:	f800283a 	ret
81111c08:	2800111e 	bne	r5,zero,81111c50 <__extendsfdf2+0xcc>
81111c0c:	88001c26 	beq	r17,zero,81111c80 <__extendsfdf2+0xfc>
81111c10:	8809883a 	mov	r4,r17
81111c14:	1111e440 	call	81111e44 <__clzsi2>
81111c18:	00c00284 	movi	r3,10
81111c1c:	18801b16 	blt	r3,r2,81111c8c <__extendsfdf2+0x108>
81111c20:	018002c4 	movi	r6,11
81111c24:	308dc83a 	sub	r6,r6,r2
81111c28:	11000544 	addi	r4,r2,21
81111c2c:	8986d83a 	srl	r3,r17,r6
81111c30:	8922983a 	sll	r17,r17,r4
81111c34:	0180e244 	movi	r6,905
81111c38:	01400434 	movhi	r5,16
81111c3c:	3085c83a 	sub	r2,r6,r2
81111c40:	297fffc4 	addi	r5,r5,-1
81111c44:	194c703a 	and	r6,r3,r5
81111c48:	1141ffcc 	andi	r5,r2,2047
81111c4c:	003fe006 	br	81111bd0 <__reset+0xfb0f1bd0>
81111c50:	88000826 	beq	r17,zero,81111c74 <__extendsfdf2+0xf0>
81111c54:	880cd0fa 	srli	r6,r17,3
81111c58:	00800434 	movhi	r2,16
81111c5c:	10bfffc4 	addi	r2,r2,-1
81111c60:	31800234 	orhi	r6,r6,8
81111c64:	8822977a 	slli	r17,r17,29
81111c68:	308c703a 	and	r6,r6,r2
81111c6c:	0141ffc4 	movi	r5,2047
81111c70:	003fd706 	br	81111bd0 <__reset+0xfb0f1bd0>
81111c74:	0141ffc4 	movi	r5,2047
81111c78:	000d883a 	mov	r6,zero
81111c7c:	003fd406 	br	81111bd0 <__reset+0xfb0f1bd0>
81111c80:	000b883a 	mov	r5,zero
81111c84:	000d883a 	mov	r6,zero
81111c88:	003fd106 	br	81111bd0 <__reset+0xfb0f1bd0>
81111c8c:	11bffd44 	addi	r6,r2,-11
81111c90:	8986983a 	sll	r3,r17,r6
81111c94:	0023883a 	mov	r17,zero
81111c98:	003fe606 	br	81111c34 <__reset+0xfb0f1c34>

81111c9c <__truncdfsf2>:
81111c9c:	2810d53a 	srli	r8,r5,20
81111ca0:	01c00434 	movhi	r7,16
81111ca4:	39ffffc4 	addi	r7,r7,-1
81111ca8:	29ce703a 	and	r7,r5,r7
81111cac:	4201ffcc 	andi	r8,r8,2047
81111cb0:	380e90fa 	slli	r7,r7,3
81111cb4:	200cd77a 	srli	r6,r4,29
81111cb8:	42400044 	addi	r9,r8,1
81111cbc:	4a41ffcc 	andi	r9,r9,2047
81111cc0:	00c00044 	movi	r3,1
81111cc4:	280ad7fa 	srli	r5,r5,31
81111cc8:	31ceb03a 	or	r7,r6,r7
81111ccc:	200490fa 	slli	r2,r4,3
81111cd0:	1a40230e 	bge	r3,r9,81111d60 <__truncdfsf2+0xc4>
81111cd4:	40ff2004 	addi	r3,r8,-896
81111cd8:	01803f84 	movi	r6,254
81111cdc:	30c01516 	blt	r6,r3,81111d34 <__truncdfsf2+0x98>
81111ce0:	00c0380e 	bge	zero,r3,81111dc4 <__truncdfsf2+0x128>
81111ce4:	200c91ba 	slli	r6,r4,6
81111ce8:	380e90fa 	slli	r7,r7,3
81111cec:	1004d77a 	srli	r2,r2,29
81111cf0:	300cc03a 	cmpne	r6,r6,zero
81111cf4:	31ccb03a 	or	r6,r6,r7
81111cf8:	308cb03a 	or	r6,r6,r2
81111cfc:	308001cc 	andi	r2,r6,7
81111d00:	10000426 	beq	r2,zero,81111d14 <__truncdfsf2+0x78>
81111d04:	308003cc 	andi	r2,r6,15
81111d08:	01000104 	movi	r4,4
81111d0c:	11000126 	beq	r2,r4,81111d14 <__truncdfsf2+0x78>
81111d10:	31800104 	addi	r6,r6,4
81111d14:	3081002c 	andhi	r2,r6,1024
81111d18:	10001626 	beq	r2,zero,81111d74 <__truncdfsf2+0xd8>
81111d1c:	18c00044 	addi	r3,r3,1
81111d20:	00803fc4 	movi	r2,255
81111d24:	18800326 	beq	r3,r2,81111d34 <__truncdfsf2+0x98>
81111d28:	300c91ba 	slli	r6,r6,6
81111d2c:	300cd27a 	srli	r6,r6,9
81111d30:	00000206 	br	81111d3c <__truncdfsf2+0xa0>
81111d34:	00ffffc4 	movi	r3,-1
81111d38:	000d883a 	mov	r6,zero
81111d3c:	18c03fcc 	andi	r3,r3,255
81111d40:	180895fa 	slli	r4,r3,23
81111d44:	00c02034 	movhi	r3,128
81111d48:	280a97fa 	slli	r5,r5,31
81111d4c:	18ffffc4 	addi	r3,r3,-1
81111d50:	30c6703a 	and	r3,r6,r3
81111d54:	1906b03a 	or	r3,r3,r4
81111d58:	1944b03a 	or	r2,r3,r5
81111d5c:	f800283a 	ret
81111d60:	40000b1e 	bne	r8,zero,81111d90 <__truncdfsf2+0xf4>
81111d64:	388cb03a 	or	r6,r7,r2
81111d68:	0007883a 	mov	r3,zero
81111d6c:	30000426 	beq	r6,zero,81111d80 <__truncdfsf2+0xe4>
81111d70:	01800144 	movi	r6,5
81111d74:	00803fc4 	movi	r2,255
81111d78:	300cd0fa 	srli	r6,r6,3
81111d7c:	18800a26 	beq	r3,r2,81111da8 <__truncdfsf2+0x10c>
81111d80:	00802034 	movhi	r2,128
81111d84:	10bfffc4 	addi	r2,r2,-1
81111d88:	308c703a 	and	r6,r6,r2
81111d8c:	003feb06 	br	81111d3c <__reset+0xfb0f1d3c>
81111d90:	3888b03a 	or	r4,r7,r2
81111d94:	203fe726 	beq	r4,zero,81111d34 <__reset+0xfb0f1d34>
81111d98:	380c90fa 	slli	r6,r7,3
81111d9c:	00c03fc4 	movi	r3,255
81111da0:	31808034 	orhi	r6,r6,512
81111da4:	003fd506 	br	81111cfc <__reset+0xfb0f1cfc>
81111da8:	303fe226 	beq	r6,zero,81111d34 <__reset+0xfb0f1d34>
81111dac:	00802034 	movhi	r2,128
81111db0:	31801034 	orhi	r6,r6,64
81111db4:	10bfffc4 	addi	r2,r2,-1
81111db8:	00ffffc4 	movi	r3,-1
81111dbc:	308c703a 	and	r6,r6,r2
81111dc0:	003fde06 	br	81111d3c <__reset+0xfb0f1d3c>
81111dc4:	013ffa44 	movi	r4,-23
81111dc8:	19000e16 	blt	r3,r4,81111e04 <__truncdfsf2+0x168>
81111dcc:	01000784 	movi	r4,30
81111dd0:	20c9c83a 	sub	r4,r4,r3
81111dd4:	018007c4 	movi	r6,31
81111dd8:	39c02034 	orhi	r7,r7,128
81111ddc:	31000b16 	blt	r6,r4,81111e0c <__truncdfsf2+0x170>
81111de0:	423f2084 	addi	r8,r8,-894
81111de4:	120c983a 	sll	r6,r2,r8
81111de8:	3a0e983a 	sll	r7,r7,r8
81111dec:	1104d83a 	srl	r2,r2,r4
81111df0:	300cc03a 	cmpne	r6,r6,zero
81111df4:	31ceb03a 	or	r7,r6,r7
81111df8:	388cb03a 	or	r6,r7,r2
81111dfc:	0007883a 	mov	r3,zero
81111e00:	003fbe06 	br	81111cfc <__reset+0xfb0f1cfc>
81111e04:	0007883a 	mov	r3,zero
81111e08:	003fd906 	br	81111d70 <__reset+0xfb0f1d70>
81111e0c:	01bfff84 	movi	r6,-2
81111e10:	30cdc83a 	sub	r6,r6,r3
81111e14:	00c00804 	movi	r3,32
81111e18:	398cd83a 	srl	r6,r7,r6
81111e1c:	20c00726 	beq	r4,r3,81111e3c <__truncdfsf2+0x1a0>
81111e20:	423f2884 	addi	r8,r8,-862
81111e24:	3a0e983a 	sll	r7,r7,r8
81111e28:	3884b03a 	or	r2,r7,r2
81111e2c:	1004c03a 	cmpne	r2,r2,zero
81111e30:	118cb03a 	or	r6,r2,r6
81111e34:	0007883a 	mov	r3,zero
81111e38:	003fb006 	br	81111cfc <__reset+0xfb0f1cfc>
81111e3c:	000f883a 	mov	r7,zero
81111e40:	003ff906 	br	81111e28 <__reset+0xfb0f1e28>

81111e44 <__clzsi2>:
81111e44:	00bfffd4 	movui	r2,65535
81111e48:	11000536 	bltu	r2,r4,81111e60 <__clzsi2+0x1c>
81111e4c:	00803fc4 	movi	r2,255
81111e50:	11000f36 	bltu	r2,r4,81111e90 <__clzsi2+0x4c>
81111e54:	00800804 	movi	r2,32
81111e58:	0007883a 	mov	r3,zero
81111e5c:	00000506 	br	81111e74 <__clzsi2+0x30>
81111e60:	00804034 	movhi	r2,256
81111e64:	10bfffc4 	addi	r2,r2,-1
81111e68:	11000c2e 	bgeu	r2,r4,81111e9c <__clzsi2+0x58>
81111e6c:	00800204 	movi	r2,8
81111e70:	00c00604 	movi	r3,24
81111e74:	20c8d83a 	srl	r4,r4,r3
81111e78:	00e04534 	movhi	r3,33044
81111e7c:	18ffd804 	addi	r3,r3,-160
81111e80:	1909883a 	add	r4,r3,r4
81111e84:	20c00003 	ldbu	r3,0(r4)
81111e88:	10c5c83a 	sub	r2,r2,r3
81111e8c:	f800283a 	ret
81111e90:	00800604 	movi	r2,24
81111e94:	00c00204 	movi	r3,8
81111e98:	003ff606 	br	81111e74 <__reset+0xfb0f1e74>
81111e9c:	00800404 	movi	r2,16
81111ea0:	1007883a 	mov	r3,r2
81111ea4:	003ff306 	br	81111e74 <__reset+0xfb0f1e74>

81111ea8 <atoi>:
81111ea8:	01800284 	movi	r6,10
81111eac:	000b883a 	mov	r5,zero
81111eb0:	1113ec41 	jmpi	81113ec4 <strtol>

81111eb4 <_atoi_r>:
81111eb4:	01c00284 	movi	r7,10
81111eb8:	000d883a 	mov	r6,zero
81111ebc:	1113c841 	jmpi	81113c84 <_strtol_r>

81111ec0 <_fopen_r>:
81111ec0:	defffa04 	addi	sp,sp,-24
81111ec4:	3005883a 	mov	r2,r6
81111ec8:	de00012e 	bgeu	sp,et,81111ed0 <_fopen_r+0x10>
81111ecc:	003b68fa 	trap	3
81111ed0:	d80d883a 	mov	r6,sp
81111ed4:	dcc00415 	stw	r19,16(sp)
81111ed8:	2827883a 	mov	r19,r5
81111edc:	100b883a 	mov	r5,r2
81111ee0:	dc800315 	stw	r18,12(sp)
81111ee4:	dfc00515 	stw	ra,20(sp)
81111ee8:	dc400215 	stw	r17,8(sp)
81111eec:	dc000115 	stw	r16,4(sp)
81111ef0:	2025883a 	mov	r18,r4
81111ef4:	111becc0 	call	8111becc <__sflags>
81111ef8:	10002726 	beq	r2,zero,81111f98 <_fopen_r+0xd8>
81111efc:	9009883a 	mov	r4,r18
81111f00:	1023883a 	mov	r17,r2
81111f04:	111bd440 	call	8111bd44 <__sfp>
81111f08:	1021883a 	mov	r16,r2
81111f0c:	10002226 	beq	r2,zero,81111f98 <_fopen_r+0xd8>
81111f10:	d9800017 	ldw	r6,0(sp)
81111f14:	01c06d84 	movi	r7,438
81111f18:	980b883a 	mov	r5,r19
81111f1c:	9009883a 	mov	r4,r18
81111f20:	111332c0 	call	8111332c <_open_r>
81111f24:	10001916 	blt	r2,zero,81111f8c <_fopen_r+0xcc>
81111f28:	8080038d 	sth	r2,14(r16)
81111f2c:	00a04474 	movhi	r2,33041
81111f30:	108e8204 	addi	r2,r2,14856
81111f34:	80800815 	stw	r2,32(r16)
81111f38:	00a04474 	movhi	r2,33041
81111f3c:	108e9b04 	addi	r2,r2,14956
81111f40:	80800915 	stw	r2,36(r16)
81111f44:	00a04474 	movhi	r2,33041
81111f48:	108ebc04 	addi	r2,r2,15088
81111f4c:	80800a15 	stw	r2,40(r16)
81111f50:	00a04474 	movhi	r2,33041
81111f54:	108ed504 	addi	r2,r2,15188
81111f58:	8440030d 	sth	r17,12(r16)
81111f5c:	84000715 	stw	r16,28(r16)
81111f60:	80800b15 	stw	r2,44(r16)
81111f64:	8c40400c 	andi	r17,r17,256
81111f68:	88000d1e 	bne	r17,zero,81111fa0 <_fopen_r+0xe0>
81111f6c:	8005883a 	mov	r2,r16
81111f70:	dfc00517 	ldw	ra,20(sp)
81111f74:	dcc00417 	ldw	r19,16(sp)
81111f78:	dc800317 	ldw	r18,12(sp)
81111f7c:	dc400217 	ldw	r17,8(sp)
81111f80:	dc000117 	ldw	r16,4(sp)
81111f84:	dec00604 	addi	sp,sp,24
81111f88:	f800283a 	ret
81111f8c:	111be8c0 	call	8111be8c <__sfp_lock_acquire>
81111f90:	8000030d 	sth	zero,12(r16)
81111f94:	111be900 	call	8111be90 <__sfp_lock_release>
81111f98:	0005883a 	mov	r2,zero
81111f9c:	003ff406 	br	81111f70 <__reset+0xfb0f1f70>
81111fa0:	01c00084 	movi	r7,2
81111fa4:	000d883a 	mov	r6,zero
81111fa8:	800b883a 	mov	r5,r16
81111fac:	9009883a 	mov	r4,r18
81111fb0:	11120e00 	call	811120e0 <_fseek_r>
81111fb4:	8005883a 	mov	r2,r16
81111fb8:	003fed06 	br	81111f70 <__reset+0xfb0f1f70>

81111fbc <fopen>:
81111fbc:	00a04534 	movhi	r2,33044
81111fc0:	108aa604 	addi	r2,r2,10904
81111fc4:	280d883a 	mov	r6,r5
81111fc8:	200b883a 	mov	r5,r4
81111fcc:	11000017 	ldw	r4,0(r2)
81111fd0:	1111ec01 	jmpi	81111ec0 <_fopen_r>

81111fd4 <_fprintf_r>:
81111fd4:	defffe04 	addi	sp,sp,-8
81111fd8:	2809883a 	mov	r4,r5
81111fdc:	300b883a 	mov	r5,r6
81111fe0:	de00012e 	bgeu	sp,et,81111fe8 <_fprintf_r+0x14>
81111fe4:	003b68fa 	trap	3
81111fe8:	dfc00015 	stw	ra,0(sp)
81111fec:	d9c00115 	stw	r7,4(sp)
81111ff0:	d9800104 	addi	r6,sp,4
81111ff4:	11182c00 	call	811182c0 <__vfprintf_internal>
81111ff8:	dfc00017 	ldw	ra,0(sp)
81111ffc:	dec00204 	addi	sp,sp,8
81112000:	f800283a 	ret

81112004 <fprintf>:
81112004:	defffd04 	addi	sp,sp,-12
81112008:	de00012e 	bgeu	sp,et,81112010 <fprintf+0xc>
8111200c:	003b68fa 	trap	3
81112010:	dfc00015 	stw	ra,0(sp)
81112014:	d9800115 	stw	r6,4(sp)
81112018:	d9c00215 	stw	r7,8(sp)
8111201c:	d9800104 	addi	r6,sp,4
81112020:	11182c00 	call	811182c0 <__vfprintf_internal>
81112024:	dfc00017 	ldw	ra,0(sp)
81112028:	dec00304 	addi	sp,sp,12
8111202c:	f800283a 	ret

81112030 <_fputc_r>:
81112030:	defffc04 	addi	sp,sp,-16
81112034:	de00012e 	bgeu	sp,et,8111203c <_fputc_r+0xc>
81112038:	003b68fa 	trap	3
8111203c:	dc000215 	stw	r16,8(sp)
81112040:	dfc00315 	stw	ra,12(sp)
81112044:	2021883a 	mov	r16,r4
81112048:	20000726 	beq	r4,zero,81112068 <_fputc_r+0x38>
8111204c:	20800e17 	ldw	r2,56(r4)
81112050:	1000051e 	bne	r2,zero,81112068 <_fputc_r+0x38>
81112054:	d9400015 	stw	r5,0(sp)
81112058:	d9800115 	stw	r6,4(sp)
8111205c:	111be7c0 	call	8111be7c <__sinit>
81112060:	d9800117 	ldw	r6,4(sp)
81112064:	d9400017 	ldw	r5,0(sp)
81112068:	8009883a 	mov	r4,r16
8111206c:	dfc00317 	ldw	ra,12(sp)
81112070:	dc000217 	ldw	r16,8(sp)
81112074:	dec00404 	addi	sp,sp,16
81112078:	11134101 	jmpi	81113410 <_putc_r>

8111207c <fputc>:
8111207c:	00a04534 	movhi	r2,33044
81112080:	defffc04 	addi	sp,sp,-16
81112084:	108aa604 	addi	r2,r2,10904
81112088:	de00012e 	bgeu	sp,et,81112090 <fputc+0x14>
8111208c:	003b68fa 	trap	3
81112090:	dc000115 	stw	r16,4(sp)
81112094:	14000017 	ldw	r16,0(r2)
81112098:	dc400215 	stw	r17,8(sp)
8111209c:	dfc00315 	stw	ra,12(sp)
811120a0:	2023883a 	mov	r17,r4
811120a4:	80000626 	beq	r16,zero,811120c0 <fputc+0x44>
811120a8:	80800e17 	ldw	r2,56(r16)
811120ac:	1000041e 	bne	r2,zero,811120c0 <fputc+0x44>
811120b0:	8009883a 	mov	r4,r16
811120b4:	d9400015 	stw	r5,0(sp)
811120b8:	111be7c0 	call	8111be7c <__sinit>
811120bc:	d9400017 	ldw	r5,0(sp)
811120c0:	280d883a 	mov	r6,r5
811120c4:	8009883a 	mov	r4,r16
811120c8:	880b883a 	mov	r5,r17
811120cc:	dfc00317 	ldw	ra,12(sp)
811120d0:	dc400217 	ldw	r17,8(sp)
811120d4:	dc000117 	ldw	r16,4(sp)
811120d8:	dec00404 	addi	sp,sp,16
811120dc:	11134101 	jmpi	81113410 <_putc_r>

811120e0 <_fseek_r>:
811120e0:	11121001 	jmpi	81112100 <_fseeko_r>

811120e4 <fseek>:
811120e4:	00a04534 	movhi	r2,33044
811120e8:	108aa604 	addi	r2,r2,10904
811120ec:	300f883a 	mov	r7,r6
811120f0:	280d883a 	mov	r6,r5
811120f4:	200b883a 	mov	r5,r4
811120f8:	11000017 	ldw	r4,0(r2)
811120fc:	11121001 	jmpi	81112100 <_fseeko_r>

81112100 <_fseeko_r>:
81112100:	deffe804 	addi	sp,sp,-96
81112104:	de00012e 	bgeu	sp,et,8111210c <_fseeko_r+0xc>
81112108:	003b68fa 	trap	3
8111210c:	dd401415 	stw	r21,80(sp)
81112110:	dc801115 	stw	r18,68(sp)
81112114:	dc401015 	stw	r17,64(sp)
81112118:	dc000f15 	stw	r16,60(sp)
8111211c:	dfc01715 	stw	ra,92(sp)
81112120:	ddc01615 	stw	r23,88(sp)
81112124:	dd801515 	stw	r22,84(sp)
81112128:	dd001315 	stw	r20,76(sp)
8111212c:	dcc01215 	stw	r19,72(sp)
81112130:	2023883a 	mov	r17,r4
81112134:	2821883a 	mov	r16,r5
81112138:	302b883a 	mov	r21,r6
8111213c:	3825883a 	mov	r18,r7
81112140:	20000226 	beq	r4,zero,8111214c <_fseeko_r+0x4c>
81112144:	20800e17 	ldw	r2,56(r4)
81112148:	10005a26 	beq	r2,zero,811122b4 <_fseeko_r+0x1b4>
8111214c:	8080030b 	ldhu	r2,12(r16)
81112150:	00c04204 	movi	r3,264
81112154:	1080420c 	andi	r2,r2,264
81112158:	10c05b26 	beq	r2,r3,811122c8 <_fseeko_r+0x1c8>
8111215c:	85000a17 	ldw	r20,40(r16)
81112160:	a000f626 	beq	r20,zero,8111253c <_fseeko_r+0x43c>
81112164:	00800044 	movi	r2,1
81112168:	90803e26 	beq	r18,r2,81112264 <_fseeko_r+0x164>
8111216c:	00800084 	movi	r2,2
81112170:	90801026 	beq	r18,r2,811121b4 <_fseeko_r+0xb4>
81112174:	90000f26 	beq	r18,zero,811121b4 <_fseeko_r+0xb4>
81112178:	00800584 	movi	r2,22
8111217c:	88800015 	stw	r2,0(r17)
81112180:	04ffffc4 	movi	r19,-1
81112184:	9805883a 	mov	r2,r19
81112188:	dfc01717 	ldw	ra,92(sp)
8111218c:	ddc01617 	ldw	r23,88(sp)
81112190:	dd801517 	ldw	r22,84(sp)
81112194:	dd401417 	ldw	r21,80(sp)
81112198:	dd001317 	ldw	r20,76(sp)
8111219c:	dcc01217 	ldw	r19,72(sp)
811121a0:	dc801117 	ldw	r18,68(sp)
811121a4:	dc401017 	ldw	r17,64(sp)
811121a8:	dc000f17 	ldw	r16,60(sp)
811121ac:	dec01804 	addi	sp,sp,96
811121b0:	f800283a 	ret
811121b4:	80800417 	ldw	r2,16(r16)
811121b8:	002f883a 	mov	r23,zero
811121bc:	0027883a 	mov	r19,zero
811121c0:	1000cb26 	beq	r2,zero,811124f0 <_fseeko_r+0x3f0>
811121c4:	8080030b 	ldhu	r2,12(r16)
811121c8:	10c2068c 	andi	r3,r2,2074
811121cc:	1800071e 	bne	r3,zero,811121ec <_fseeko_r+0xec>
811121d0:	10c1000c 	andi	r3,r2,1024
811121d4:	1800451e 	bne	r3,zero,811122ec <_fseeko_r+0x1ec>
811121d8:	00e04474 	movhi	r3,33041
811121dc:	18cebc04 	addi	r3,r3,15088
811121e0:	a0c0b726 	beq	r20,r3,811124c0 <_fseeko_r+0x3c0>
811121e4:	10820014 	ori	r2,r2,2048
811121e8:	8080030d 	sth	r2,12(r16)
811121ec:	800b883a 	mov	r5,r16
811121f0:	8809883a 	mov	r4,r17
811121f4:	111ba800 	call	8111ba80 <_fflush_r>
811121f8:	1027883a 	mov	r19,r2
811121fc:	103fe01e 	bne	r2,zero,81112180 <__reset+0xfb0f2180>
81112200:	81400717 	ldw	r5,28(r16)
81112204:	900f883a 	mov	r7,r18
81112208:	a80d883a 	mov	r6,r21
8111220c:	8809883a 	mov	r4,r17
81112210:	a03ee83a 	callr	r20
81112214:	00ffffc4 	movi	r3,-1
81112218:	10ffd926 	beq	r2,r3,81112180 <__reset+0xfb0f2180>
8111221c:	81400c17 	ldw	r5,48(r16)
81112220:	28000526 	beq	r5,zero,81112238 <_fseeko_r+0x138>
81112224:	80801004 	addi	r2,r16,64
81112228:	28800226 	beq	r5,r2,81112234 <_fseeko_r+0x134>
8111222c:	8809883a 	mov	r4,r17
81112230:	111c3140 	call	8111c314 <_free_r>
81112234:	80000c15 	stw	zero,48(r16)
81112238:	8080030b 	ldhu	r2,12(r16)
8111223c:	80c00417 	ldw	r3,16(r16)
81112240:	80000115 	stw	zero,4(r16)
81112244:	10bdf7cc 	andi	r2,r2,63455
81112248:	80c00015 	stw	r3,0(r16)
8111224c:	8080030d 	sth	r2,12(r16)
81112250:	01800204 	movi	r6,8
81112254:	000b883a 	mov	r5,zero
81112258:	81001704 	addi	r4,r16,92
8111225c:	11132040 	call	81113204 <memset>
81112260:	003fc806 	br	81112184 <__reset+0xfb0f2184>
81112264:	800b883a 	mov	r5,r16
81112268:	8809883a 	mov	r4,r17
8111226c:	111ba800 	call	8111ba80 <_fflush_r>
81112270:	8080030b 	ldhu	r2,12(r16)
81112274:	10c4000c 	andi	r3,r2,4096
81112278:	18008726 	beq	r3,zero,81112498 <_fseeko_r+0x398>
8111227c:	84c01417 	ldw	r19,80(r16)
81112280:	10c0010c 	andi	r3,r2,4
81112284:	1800431e 	bne	r3,zero,81112394 <_fseeko_r+0x294>
81112288:	1080020c 	andi	r2,r2,8
8111228c:	10008026 	beq	r2,zero,81112490 <_fseeko_r+0x390>
81112290:	80c00017 	ldw	r3,0(r16)
81112294:	80800417 	ldw	r2,16(r16)
81112298:	18000226 	beq	r3,zero,811122a4 <_fseeko_r+0x1a4>
8111229c:	1887c83a 	sub	r3,r3,r2
811122a0:	98e7883a 	add	r19,r19,r3
811122a4:	aceb883a 	add	r21,r21,r19
811122a8:	05c00044 	movi	r23,1
811122ac:	0025883a 	mov	r18,zero
811122b0:	003fc306 	br	811121c0 <__reset+0xfb0f21c0>
811122b4:	111be7c0 	call	8111be7c <__sinit>
811122b8:	8080030b 	ldhu	r2,12(r16)
811122bc:	00c04204 	movi	r3,264
811122c0:	1080420c 	andi	r2,r2,264
811122c4:	10ffa51e 	bne	r2,r3,8111215c <__reset+0xfb0f215c>
811122c8:	800b883a 	mov	r5,r16
811122cc:	8809883a 	mov	r4,r17
811122d0:	111ba800 	call	8111ba80 <_fflush_r>
811122d4:	003fa106 	br	8111215c <__reset+0xfb0f215c>
811122d8:	8080030b 	ldhu	r2,12(r16)
811122dc:	00c10004 	movi	r3,1024
811122e0:	80c01315 	stw	r3,76(r16)
811122e4:	10c4b03a 	or	r2,r2,r3
811122e8:	8080030d 	sth	r2,12(r16)
811122ec:	9000311e 	bne	r18,zero,811123b4 <_fseeko_r+0x2b4>
811122f0:	a82d883a 	mov	r22,r21
811122f4:	b800371e 	bne	r23,zero,811123d4 <_fseeko_r+0x2d4>
811122f8:	8080030b 	ldhu	r2,12(r16)
811122fc:	1084000c 	andi	r2,r2,4096
81112300:	10007f26 	beq	r2,zero,81112500 <_fseeko_r+0x400>
81112304:	80801417 	ldw	r2,80(r16)
81112308:	81800117 	ldw	r6,4(r16)
8111230c:	81400c17 	ldw	r5,48(r16)
81112310:	11a7c83a 	sub	r19,r2,r6
81112314:	28008226 	beq	r5,zero,81112520 <_fseeko_r+0x420>
81112318:	81c00f17 	ldw	r7,60(r16)
8111231c:	99e7c83a 	sub	r19,r19,r7
81112320:	81000e17 	ldw	r4,56(r16)
81112324:	80800417 	ldw	r2,16(r16)
81112328:	99a7883a 	add	r19,r19,r6
8111232c:	2087c83a 	sub	r3,r4,r2
81112330:	98e7c83a 	sub	r19,r19,r3
81112334:	38c7883a 	add	r3,r7,r3
81112338:	b4c02b16 	blt	r22,r19,811123e8 <_fseeko_r+0x2e8>
8111233c:	98c9883a 	add	r4,r19,r3
81112340:	b100292e 	bgeu	r22,r4,811123e8 <_fseeko_r+0x2e8>
81112344:	b4e7c83a 	sub	r19,r22,r19
81112348:	14c5883a 	add	r2,r2,r19
8111234c:	1ce7c83a 	sub	r19,r3,r19
81112350:	80800015 	stw	r2,0(r16)
81112354:	84c00115 	stw	r19,4(r16)
81112358:	28000526 	beq	r5,zero,81112370 <_fseeko_r+0x270>
8111235c:	80801004 	addi	r2,r16,64
81112360:	28800226 	beq	r5,r2,8111236c <_fseeko_r+0x26c>
81112364:	8809883a 	mov	r4,r17
81112368:	111c3140 	call	8111c314 <_free_r>
8111236c:	80000c15 	stw	zero,48(r16)
81112370:	8080030b 	ldhu	r2,12(r16)
81112374:	01800204 	movi	r6,8
81112378:	000b883a 	mov	r5,zero
8111237c:	10bff7cc 	andi	r2,r2,65503
81112380:	8080030d 	sth	r2,12(r16)
81112384:	81001704 	addi	r4,r16,92
81112388:	11132040 	call	81113204 <memset>
8111238c:	0027883a 	mov	r19,zero
81112390:	003f7c06 	br	81112184 <__reset+0xfb0f2184>
81112394:	80c00117 	ldw	r3,4(r16)
81112398:	80800c17 	ldw	r2,48(r16)
8111239c:	98e7c83a 	sub	r19,r19,r3
811123a0:	10003b26 	beq	r2,zero,81112490 <_fseeko_r+0x390>
811123a4:	80c00f17 	ldw	r3,60(r16)
811123a8:	80800417 	ldw	r2,16(r16)
811123ac:	98e7c83a 	sub	r19,r19,r3
811123b0:	003fbc06 	br	811122a4 <__reset+0xfb0f22a4>
811123b4:	8140038f 	ldh	r5,14(r16)
811123b8:	d80d883a 	mov	r6,sp
811123bc:	8809883a 	mov	r4,r17
811123c0:	11125680 	call	81112568 <_fstat_r>
811123c4:	103f891e 	bne	r2,zero,811121ec <__reset+0xfb0f21ec>
811123c8:	dd800417 	ldw	r22,16(sp)
811123cc:	adad883a 	add	r22,r21,r22
811123d0:	b83fc926 	beq	r23,zero,811122f8 <__reset+0xfb0f22f8>
811123d4:	81400c17 	ldw	r5,48(r16)
811123d8:	81800117 	ldw	r6,4(r16)
811123dc:	28005026 	beq	r5,zero,81112520 <_fseeko_r+0x420>
811123e0:	81c00f17 	ldw	r7,60(r16)
811123e4:	003fce06 	br	81112320 <__reset+0xfb0f2320>
811123e8:	84c01317 	ldw	r19,76(r16)
811123ec:	81400717 	ldw	r5,28(r16)
811123f0:	000f883a 	mov	r7,zero
811123f4:	04e7c83a 	sub	r19,zero,r19
811123f8:	9da6703a 	and	r19,r19,r22
811123fc:	980d883a 	mov	r6,r19
81112400:	8809883a 	mov	r4,r17
81112404:	a03ee83a 	callr	r20
81112408:	00ffffc4 	movi	r3,-1
8111240c:	10ff7726 	beq	r2,r3,811121ec <__reset+0xfb0f21ec>
81112410:	80800417 	ldw	r2,16(r16)
81112414:	81400c17 	ldw	r5,48(r16)
81112418:	80000115 	stw	zero,4(r16)
8111241c:	80800015 	stw	r2,0(r16)
81112420:	28000526 	beq	r5,zero,81112438 <_fseeko_r+0x338>
81112424:	80801004 	addi	r2,r16,64
81112428:	28800226 	beq	r5,r2,81112434 <_fseeko_r+0x334>
8111242c:	8809883a 	mov	r4,r17
81112430:	111c3140 	call	8111c314 <_free_r>
81112434:	80000c15 	stw	zero,48(r16)
81112438:	8080030b 	ldhu	r2,12(r16)
8111243c:	b4e7c83a 	sub	r19,r22,r19
81112440:	10bff7cc 	andi	r2,r2,65503
81112444:	8080030d 	sth	r2,12(r16)
81112448:	98000b26 	beq	r19,zero,81112478 <_fseeko_r+0x378>
8111244c:	800b883a 	mov	r5,r16
81112450:	8809883a 	mov	r4,r17
81112454:	11136800 	call	81113680 <__srefill_r>
81112458:	103f641e 	bne	r2,zero,811121ec <__reset+0xfb0f21ec>
8111245c:	80800117 	ldw	r2,4(r16)
81112460:	14ff6236 	bltu	r2,r19,811121ec <__reset+0xfb0f21ec>
81112464:	80c00017 	ldw	r3,0(r16)
81112468:	14c5c83a 	sub	r2,r2,r19
8111246c:	80800115 	stw	r2,4(r16)
81112470:	1ce7883a 	add	r19,r3,r19
81112474:	84c00015 	stw	r19,0(r16)
81112478:	01800204 	movi	r6,8
8111247c:	000b883a 	mov	r5,zero
81112480:	81001704 	addi	r4,r16,92
81112484:	11132040 	call	81113204 <memset>
81112488:	0027883a 	mov	r19,zero
8111248c:	003f3d06 	br	81112184 <__reset+0xfb0f2184>
81112490:	80800417 	ldw	r2,16(r16)
81112494:	003f8306 	br	811122a4 <__reset+0xfb0f22a4>
81112498:	81400717 	ldw	r5,28(r16)
8111249c:	900f883a 	mov	r7,r18
811124a0:	000d883a 	mov	r6,zero
811124a4:	8809883a 	mov	r4,r17
811124a8:	a03ee83a 	callr	r20
811124ac:	1027883a 	mov	r19,r2
811124b0:	00bfffc4 	movi	r2,-1
811124b4:	98bf3226 	beq	r19,r2,81112180 <__reset+0xfb0f2180>
811124b8:	8080030b 	ldhu	r2,12(r16)
811124bc:	003f7006 	br	81112280 <__reset+0xfb0f2280>
811124c0:	8140038f 	ldh	r5,14(r16)
811124c4:	283f4716 	blt	r5,zero,811121e4 <__reset+0xfb0f21e4>
811124c8:	d80d883a 	mov	r6,sp
811124cc:	8809883a 	mov	r4,r17
811124d0:	11125680 	call	81112568 <_fstat_r>
811124d4:	1000041e 	bne	r2,zero,811124e8 <_fseeko_r+0x3e8>
811124d8:	d8800117 	ldw	r2,4(sp)
811124dc:	00e00014 	movui	r3,32768
811124e0:	10bc000c 	andi	r2,r2,61440
811124e4:	10ff7c26 	beq	r2,r3,811122d8 <__reset+0xfb0f22d8>
811124e8:	8080030b 	ldhu	r2,12(r16)
811124ec:	003f3d06 	br	811121e4 <__reset+0xfb0f21e4>
811124f0:	800b883a 	mov	r5,r16
811124f4:	8809883a 	mov	r4,r17
811124f8:	11126dc0 	call	811126dc <__smakebuf_r>
811124fc:	003f3106 	br	811121c4 <__reset+0xfb0f21c4>
81112500:	81400717 	ldw	r5,28(r16)
81112504:	01c00044 	movi	r7,1
81112508:	000d883a 	mov	r6,zero
8111250c:	8809883a 	mov	r4,r17
81112510:	a03ee83a 	callr	r20
81112514:	00ffffc4 	movi	r3,-1
81112518:	10ff7b1e 	bne	r2,r3,81112308 <__reset+0xfb0f2308>
8111251c:	003f3306 	br	811121ec <__reset+0xfb0f21ec>
81112520:	80c00017 	ldw	r3,0(r16)
81112524:	80800417 	ldw	r2,16(r16)
81112528:	000b883a 	mov	r5,zero
8111252c:	1887c83a 	sub	r3,r3,r2
81112530:	98e7c83a 	sub	r19,r19,r3
81112534:	30c7883a 	add	r3,r6,r3
81112538:	003f7f06 	br	81112338 <__reset+0xfb0f2338>
8111253c:	00800744 	movi	r2,29
81112540:	88800015 	stw	r2,0(r17)
81112544:	04ffffc4 	movi	r19,-1
81112548:	003f0e06 	br	81112184 <__reset+0xfb0f2184>

8111254c <fseeko>:
8111254c:	00a04534 	movhi	r2,33044
81112550:	108aa604 	addi	r2,r2,10904
81112554:	300f883a 	mov	r7,r6
81112558:	280d883a 	mov	r6,r5
8111255c:	200b883a 	mov	r5,r4
81112560:	11000017 	ldw	r4,0(r2)
81112564:	11121001 	jmpi	81112100 <_fseeko_r>

81112568 <_fstat_r>:
81112568:	defffd04 	addi	sp,sp,-12
8111256c:	de00012e 	bgeu	sp,et,81112574 <_fstat_r+0xc>
81112570:	003b68fa 	trap	3
81112574:	2805883a 	mov	r2,r5
81112578:	dc000015 	stw	r16,0(sp)
8111257c:	04204534 	movhi	r16,33044
81112580:	dc400115 	stw	r17,4(sp)
81112584:	840b0204 	addi	r16,r16,11272
81112588:	2023883a 	mov	r17,r4
8111258c:	300b883a 	mov	r5,r6
81112590:	1009883a 	mov	r4,r2
81112594:	dfc00215 	stw	ra,8(sp)
81112598:	80000015 	stw	zero,0(r16)
8111259c:	1127b540 	call	81127b54 <fstat>
811125a0:	00ffffc4 	movi	r3,-1
811125a4:	10c00526 	beq	r2,r3,811125bc <_fstat_r+0x54>
811125a8:	dfc00217 	ldw	ra,8(sp)
811125ac:	dc400117 	ldw	r17,4(sp)
811125b0:	dc000017 	ldw	r16,0(sp)
811125b4:	dec00304 	addi	sp,sp,12
811125b8:	f800283a 	ret
811125bc:	80c00017 	ldw	r3,0(r16)
811125c0:	183ff926 	beq	r3,zero,811125a8 <__reset+0xfb0f25a8>
811125c4:	88c00015 	stw	r3,0(r17)
811125c8:	003ff706 	br	811125a8 <__reset+0xfb0f25a8>

811125cc <_fwrite_r>:
811125cc:	defff504 	addi	sp,sp,-44
811125d0:	de00012e 	bgeu	sp,et,811125d8 <_fwrite_r+0xc>
811125d4:	003b68fa 	trap	3
811125d8:	dc800815 	stw	r18,32(sp)
811125dc:	39a5383a 	mul	r18,r7,r6
811125e0:	d8800304 	addi	r2,sp,12
811125e4:	d8800015 	stw	r2,0(sp)
811125e8:	00800044 	movi	r2,1
811125ec:	dcc00915 	stw	r19,36(sp)
811125f0:	dc400715 	stw	r17,28(sp)
811125f4:	dc000615 	stw	r16,24(sp)
811125f8:	d9400315 	stw	r5,12(sp)
811125fc:	dfc00a15 	stw	ra,40(sp)
81112600:	dc800415 	stw	r18,16(sp)
81112604:	dc800215 	stw	r18,8(sp)
81112608:	d8800115 	stw	r2,4(sp)
8111260c:	3027883a 	mov	r19,r6
81112610:	3821883a 	mov	r16,r7
81112614:	2023883a 	mov	r17,r4
81112618:	d9400b17 	ldw	r5,44(sp)
8111261c:	20000226 	beq	r4,zero,81112628 <_fwrite_r+0x5c>
81112620:	20800e17 	ldw	r2,56(r4)
81112624:	10001a26 	beq	r2,zero,81112690 <_fwrite_r+0xc4>
81112628:	2880030b 	ldhu	r2,12(r5)
8111262c:	10c8000c 	andi	r3,r2,8192
81112630:	1800061e 	bne	r3,zero,8111264c <_fwrite_r+0x80>
81112634:	29001917 	ldw	r4,100(r5)
81112638:	00f7ffc4 	movi	r3,-8193
8111263c:	10880014 	ori	r2,r2,8192
81112640:	20c6703a 	and	r3,r4,r3
81112644:	2880030d 	sth	r2,12(r5)
81112648:	28c01915 	stw	r3,100(r5)
8111264c:	d80d883a 	mov	r6,sp
81112650:	8809883a 	mov	r4,r17
81112654:	111c62c0 	call	8111c62c <__sfvwrite_r>
81112658:	10000b26 	beq	r2,zero,81112688 <_fwrite_r+0xbc>
8111265c:	d9000217 	ldw	r4,8(sp)
81112660:	980b883a 	mov	r5,r19
81112664:	9109c83a 	sub	r4,r18,r4
81112668:	112569c0 	call	8112569c <__udivsi3>
8111266c:	dfc00a17 	ldw	ra,40(sp)
81112670:	dcc00917 	ldw	r19,36(sp)
81112674:	dc800817 	ldw	r18,32(sp)
81112678:	dc400717 	ldw	r17,28(sp)
8111267c:	dc000617 	ldw	r16,24(sp)
81112680:	dec00b04 	addi	sp,sp,44
81112684:	f800283a 	ret
81112688:	8005883a 	mov	r2,r16
8111268c:	003ff706 	br	8111266c <__reset+0xfb0f266c>
81112690:	d9400515 	stw	r5,20(sp)
81112694:	111be7c0 	call	8111be7c <__sinit>
81112698:	d9400517 	ldw	r5,20(sp)
8111269c:	003fe206 	br	81112628 <__reset+0xfb0f2628>

811126a0 <fwrite>:
811126a0:	defffe04 	addi	sp,sp,-8
811126a4:	00a04534 	movhi	r2,33044
811126a8:	de00012e 	bgeu	sp,et,811126b0 <fwrite+0x10>
811126ac:	003b68fa 	trap	3
811126b0:	108aa604 	addi	r2,r2,10904
811126b4:	d9c00015 	stw	r7,0(sp)
811126b8:	300f883a 	mov	r7,r6
811126bc:	280d883a 	mov	r6,r5
811126c0:	200b883a 	mov	r5,r4
811126c4:	11000017 	ldw	r4,0(r2)
811126c8:	dfc00115 	stw	ra,4(sp)
811126cc:	11125cc0 	call	811125cc <_fwrite_r>
811126d0:	dfc00117 	ldw	ra,4(sp)
811126d4:	dec00204 	addi	sp,sp,8
811126d8:	f800283a 	ret

811126dc <__smakebuf_r>:
811126dc:	2880030b 	ldhu	r2,12(r5)
811126e0:	10c0008c 	andi	r3,r2,2
811126e4:	1800431e 	bne	r3,zero,811127f4 <__smakebuf_r+0x118>
811126e8:	deffec04 	addi	sp,sp,-80
811126ec:	de00012e 	bgeu	sp,et,811126f4 <__smakebuf_r+0x18>
811126f0:	003b68fa 	trap	3
811126f4:	dc000f15 	stw	r16,60(sp)
811126f8:	2821883a 	mov	r16,r5
811126fc:	2940038f 	ldh	r5,14(r5)
81112700:	dc401015 	stw	r17,64(sp)
81112704:	dfc01315 	stw	ra,76(sp)
81112708:	dcc01215 	stw	r19,72(sp)
8111270c:	dc801115 	stw	r18,68(sp)
81112710:	2023883a 	mov	r17,r4
81112714:	28001c16 	blt	r5,zero,81112788 <__smakebuf_r+0xac>
81112718:	d80d883a 	mov	r6,sp
8111271c:	11125680 	call	81112568 <_fstat_r>
81112720:	10001816 	blt	r2,zero,81112784 <__smakebuf_r+0xa8>
81112724:	d8800117 	ldw	r2,4(sp)
81112728:	00e00014 	movui	r3,32768
8111272c:	10bc000c 	andi	r2,r2,61440
81112730:	14c80020 	cmpeqi	r19,r2,8192
81112734:	10c03726 	beq	r2,r3,81112814 <__smakebuf_r+0x138>
81112738:	80c0030b 	ldhu	r3,12(r16)
8111273c:	18c20014 	ori	r3,r3,2048
81112740:	80c0030d 	sth	r3,12(r16)
81112744:	00c80004 	movi	r3,8192
81112748:	10c0521e 	bne	r2,r3,81112894 <__smakebuf_r+0x1b8>
8111274c:	8140038f 	ldh	r5,14(r16)
81112750:	8809883a 	mov	r4,r17
81112754:	111cc880 	call	8111cc88 <_isatty_r>
81112758:	10004c26 	beq	r2,zero,8111288c <__smakebuf_r+0x1b0>
8111275c:	8080030b 	ldhu	r2,12(r16)
81112760:	80c010c4 	addi	r3,r16,67
81112764:	80c00015 	stw	r3,0(r16)
81112768:	10800054 	ori	r2,r2,1
8111276c:	8080030d 	sth	r2,12(r16)
81112770:	00800044 	movi	r2,1
81112774:	80c00415 	stw	r3,16(r16)
81112778:	80800515 	stw	r2,20(r16)
8111277c:	04810004 	movi	r18,1024
81112780:	00000706 	br	811127a0 <__smakebuf_r+0xc4>
81112784:	8080030b 	ldhu	r2,12(r16)
81112788:	10c0200c 	andi	r3,r2,128
8111278c:	18001f1e 	bne	r3,zero,8111280c <__smakebuf_r+0x130>
81112790:	04810004 	movi	r18,1024
81112794:	10820014 	ori	r2,r2,2048
81112798:	8080030d 	sth	r2,12(r16)
8111279c:	0027883a 	mov	r19,zero
811127a0:	900b883a 	mov	r5,r18
811127a4:	8809883a 	mov	r4,r17
811127a8:	11128a00 	call	811128a0 <_malloc_r>
811127ac:	10002c26 	beq	r2,zero,81112860 <__smakebuf_r+0x184>
811127b0:	80c0030b 	ldhu	r3,12(r16)
811127b4:	012044b4 	movhi	r4,33042
811127b8:	212ec704 	addi	r4,r4,-17636
811127bc:	89000f15 	stw	r4,60(r17)
811127c0:	18c02014 	ori	r3,r3,128
811127c4:	80c0030d 	sth	r3,12(r16)
811127c8:	80800015 	stw	r2,0(r16)
811127cc:	80800415 	stw	r2,16(r16)
811127d0:	84800515 	stw	r18,20(r16)
811127d4:	98001a1e 	bne	r19,zero,81112840 <__smakebuf_r+0x164>
811127d8:	dfc01317 	ldw	ra,76(sp)
811127dc:	dcc01217 	ldw	r19,72(sp)
811127e0:	dc801117 	ldw	r18,68(sp)
811127e4:	dc401017 	ldw	r17,64(sp)
811127e8:	dc000f17 	ldw	r16,60(sp)
811127ec:	dec01404 	addi	sp,sp,80
811127f0:	f800283a 	ret
811127f4:	288010c4 	addi	r2,r5,67
811127f8:	28800015 	stw	r2,0(r5)
811127fc:	28800415 	stw	r2,16(r5)
81112800:	00800044 	movi	r2,1
81112804:	28800515 	stw	r2,20(r5)
81112808:	f800283a 	ret
8111280c:	04801004 	movi	r18,64
81112810:	003fe006 	br	81112794 <__reset+0xfb0f2794>
81112814:	81000a17 	ldw	r4,40(r16)
81112818:	00e04474 	movhi	r3,33041
8111281c:	18cebc04 	addi	r3,r3,15088
81112820:	20ffc51e 	bne	r4,r3,81112738 <__reset+0xfb0f2738>
81112824:	8080030b 	ldhu	r2,12(r16)
81112828:	04810004 	movi	r18,1024
8111282c:	84801315 	stw	r18,76(r16)
81112830:	1484b03a 	or	r2,r2,r18
81112834:	8080030d 	sth	r2,12(r16)
81112838:	0027883a 	mov	r19,zero
8111283c:	003fd806 	br	811127a0 <__reset+0xfb0f27a0>
81112840:	8140038f 	ldh	r5,14(r16)
81112844:	8809883a 	mov	r4,r17
81112848:	111cc880 	call	8111cc88 <_isatty_r>
8111284c:	103fe226 	beq	r2,zero,811127d8 <__reset+0xfb0f27d8>
81112850:	8080030b 	ldhu	r2,12(r16)
81112854:	10800054 	ori	r2,r2,1
81112858:	8080030d 	sth	r2,12(r16)
8111285c:	003fde06 	br	811127d8 <__reset+0xfb0f27d8>
81112860:	8080030b 	ldhu	r2,12(r16)
81112864:	10c0800c 	andi	r3,r2,512
81112868:	183fdb1e 	bne	r3,zero,811127d8 <__reset+0xfb0f27d8>
8111286c:	10800094 	ori	r2,r2,2
81112870:	80c010c4 	addi	r3,r16,67
81112874:	8080030d 	sth	r2,12(r16)
81112878:	00800044 	movi	r2,1
8111287c:	80c00015 	stw	r3,0(r16)
81112880:	80c00415 	stw	r3,16(r16)
81112884:	80800515 	stw	r2,20(r16)
81112888:	003fd306 	br	811127d8 <__reset+0xfb0f27d8>
8111288c:	04810004 	movi	r18,1024
81112890:	003fc306 	br	811127a0 <__reset+0xfb0f27a0>
81112894:	0027883a 	mov	r19,zero
81112898:	04810004 	movi	r18,1024
8111289c:	003fc006 	br	811127a0 <__reset+0xfb0f27a0>

811128a0 <_malloc_r>:
811128a0:	defff504 	addi	sp,sp,-44
811128a4:	de00012e 	bgeu	sp,et,811128ac <_malloc_r+0xc>
811128a8:	003b68fa 	trap	3
811128ac:	288002c4 	addi	r2,r5,11
811128b0:	dc800315 	stw	r18,12(sp)
811128b4:	dfc00a15 	stw	ra,40(sp)
811128b8:	df000915 	stw	fp,36(sp)
811128bc:	ddc00815 	stw	r23,32(sp)
811128c0:	dd800715 	stw	r22,28(sp)
811128c4:	dd400615 	stw	r21,24(sp)
811128c8:	dd000515 	stw	r20,20(sp)
811128cc:	dcc00415 	stw	r19,16(sp)
811128d0:	dc400215 	stw	r17,8(sp)
811128d4:	dc000115 	stw	r16,4(sp)
811128d8:	00c00584 	movi	r3,22
811128dc:	2025883a 	mov	r18,r4
811128e0:	18807f2e 	bgeu	r3,r2,81112ae0 <_malloc_r+0x240>
811128e4:	047ffe04 	movi	r17,-8
811128e8:	1462703a 	and	r17,r2,r17
811128ec:	8800a316 	blt	r17,zero,81112b7c <_malloc_r+0x2dc>
811128f0:	8940a236 	bltu	r17,r5,81112b7c <_malloc_r+0x2dc>
811128f4:	11296dc0 	call	811296dc <__malloc_lock>
811128f8:	00807dc4 	movi	r2,503
811128fc:	1441e92e 	bgeu	r2,r17,811130a4 <_malloc_r+0x804>
81112900:	8804d27a 	srli	r2,r17,9
81112904:	1000a126 	beq	r2,zero,81112b8c <_malloc_r+0x2ec>
81112908:	00c00104 	movi	r3,4
8111290c:	18811e36 	bltu	r3,r2,81112d88 <_malloc_r+0x4e8>
81112910:	8804d1ba 	srli	r2,r17,6
81112914:	12000e44 	addi	r8,r2,57
81112918:	11c00e04 	addi	r7,r2,56
8111291c:	4209883a 	add	r4,r8,r8
81112920:	04e04534 	movhi	r19,33044
81112924:	2109883a 	add	r4,r4,r4
81112928:	9cc46404 	addi	r19,r19,4496
8111292c:	2109883a 	add	r4,r4,r4
81112930:	9909883a 	add	r4,r19,r4
81112934:	24000117 	ldw	r16,4(r4)
81112938:	213ffe04 	addi	r4,r4,-8
8111293c:	24009726 	beq	r4,r16,81112b9c <_malloc_r+0x2fc>
81112940:	80800117 	ldw	r2,4(r16)
81112944:	01bfff04 	movi	r6,-4
81112948:	014003c4 	movi	r5,15
8111294c:	1184703a 	and	r2,r2,r6
81112950:	1447c83a 	sub	r3,r2,r17
81112954:	28c00716 	blt	r5,r3,81112974 <_malloc_r+0xd4>
81112958:	1800920e 	bge	r3,zero,81112ba4 <_malloc_r+0x304>
8111295c:	84000317 	ldw	r16,12(r16)
81112960:	24008e26 	beq	r4,r16,81112b9c <_malloc_r+0x2fc>
81112964:	80800117 	ldw	r2,4(r16)
81112968:	1184703a 	and	r2,r2,r6
8111296c:	1447c83a 	sub	r3,r2,r17
81112970:	28fff90e 	bge	r5,r3,81112958 <__reset+0xfb0f2958>
81112974:	3809883a 	mov	r4,r7
81112978:	01a04534 	movhi	r6,33044
8111297c:	9c000417 	ldw	r16,16(r19)
81112980:	31846404 	addi	r6,r6,4496
81112984:	32000204 	addi	r8,r6,8
81112988:	82013426 	beq	r16,r8,81112e5c <_malloc_r+0x5bc>
8111298c:	80c00117 	ldw	r3,4(r16)
81112990:	00bfff04 	movi	r2,-4
81112994:	188e703a 	and	r7,r3,r2
81112998:	3c45c83a 	sub	r2,r7,r17
8111299c:	00c003c4 	movi	r3,15
811129a0:	18811f16 	blt	r3,r2,81112e20 <_malloc_r+0x580>
811129a4:	32000515 	stw	r8,20(r6)
811129a8:	32000415 	stw	r8,16(r6)
811129ac:	10007f0e 	bge	r2,zero,81112bac <_malloc_r+0x30c>
811129b0:	00807fc4 	movi	r2,511
811129b4:	11c0fd36 	bltu	r2,r7,81112dac <_malloc_r+0x50c>
811129b8:	3806d0fa 	srli	r3,r7,3
811129bc:	01c00044 	movi	r7,1
811129c0:	30800117 	ldw	r2,4(r6)
811129c4:	19400044 	addi	r5,r3,1
811129c8:	294b883a 	add	r5,r5,r5
811129cc:	1807d0ba 	srai	r3,r3,2
811129d0:	294b883a 	add	r5,r5,r5
811129d4:	294b883a 	add	r5,r5,r5
811129d8:	298b883a 	add	r5,r5,r6
811129dc:	38c6983a 	sll	r3,r7,r3
811129e0:	29c00017 	ldw	r7,0(r5)
811129e4:	2a7ffe04 	addi	r9,r5,-8
811129e8:	1886b03a 	or	r3,r3,r2
811129ec:	82400315 	stw	r9,12(r16)
811129f0:	81c00215 	stw	r7,8(r16)
811129f4:	30c00115 	stw	r3,4(r6)
811129f8:	2c000015 	stw	r16,0(r5)
811129fc:	3c000315 	stw	r16,12(r7)
81112a00:	2005d0ba 	srai	r2,r4,2
81112a04:	01400044 	movi	r5,1
81112a08:	288a983a 	sll	r5,r5,r2
81112a0c:	19406f36 	bltu	r3,r5,81112bcc <_malloc_r+0x32c>
81112a10:	28c4703a 	and	r2,r5,r3
81112a14:	10000a1e 	bne	r2,zero,81112a40 <_malloc_r+0x1a0>
81112a18:	00bfff04 	movi	r2,-4
81112a1c:	294b883a 	add	r5,r5,r5
81112a20:	2088703a 	and	r4,r4,r2
81112a24:	28c4703a 	and	r2,r5,r3
81112a28:	21000104 	addi	r4,r4,4
81112a2c:	1000041e 	bne	r2,zero,81112a40 <_malloc_r+0x1a0>
81112a30:	294b883a 	add	r5,r5,r5
81112a34:	28c4703a 	and	r2,r5,r3
81112a38:	21000104 	addi	r4,r4,4
81112a3c:	103ffc26 	beq	r2,zero,81112a30 <__reset+0xfb0f2a30>
81112a40:	02bfff04 	movi	r10,-4
81112a44:	024003c4 	movi	r9,15
81112a48:	21800044 	addi	r6,r4,1
81112a4c:	318d883a 	add	r6,r6,r6
81112a50:	318d883a 	add	r6,r6,r6
81112a54:	318d883a 	add	r6,r6,r6
81112a58:	998d883a 	add	r6,r19,r6
81112a5c:	333ffe04 	addi	r12,r6,-8
81112a60:	2017883a 	mov	r11,r4
81112a64:	31800104 	addi	r6,r6,4
81112a68:	34000017 	ldw	r16,0(r6)
81112a6c:	31fffd04 	addi	r7,r6,-12
81112a70:	81c0041e 	bne	r16,r7,81112a84 <_malloc_r+0x1e4>
81112a74:	0000fb06 	br	81112e64 <_malloc_r+0x5c4>
81112a78:	1801030e 	bge	r3,zero,81112e88 <_malloc_r+0x5e8>
81112a7c:	84000317 	ldw	r16,12(r16)
81112a80:	81c0f826 	beq	r16,r7,81112e64 <_malloc_r+0x5c4>
81112a84:	80800117 	ldw	r2,4(r16)
81112a88:	1284703a 	and	r2,r2,r10
81112a8c:	1447c83a 	sub	r3,r2,r17
81112a90:	48fff90e 	bge	r9,r3,81112a78 <__reset+0xfb0f2a78>
81112a94:	80800317 	ldw	r2,12(r16)
81112a98:	81000217 	ldw	r4,8(r16)
81112a9c:	89400054 	ori	r5,r17,1
81112aa0:	81400115 	stw	r5,4(r16)
81112aa4:	20800315 	stw	r2,12(r4)
81112aa8:	11000215 	stw	r4,8(r2)
81112aac:	8463883a 	add	r17,r16,r17
81112ab0:	9c400515 	stw	r17,20(r19)
81112ab4:	9c400415 	stw	r17,16(r19)
81112ab8:	18800054 	ori	r2,r3,1
81112abc:	88800115 	stw	r2,4(r17)
81112ac0:	8a000315 	stw	r8,12(r17)
81112ac4:	8a000215 	stw	r8,8(r17)
81112ac8:	88e3883a 	add	r17,r17,r3
81112acc:	88c00015 	stw	r3,0(r17)
81112ad0:	9009883a 	mov	r4,r18
81112ad4:	11298040 	call	81129804 <__malloc_unlock>
81112ad8:	80800204 	addi	r2,r16,8
81112adc:	00001b06 	br	81112b4c <_malloc_r+0x2ac>
81112ae0:	04400404 	movi	r17,16
81112ae4:	89402536 	bltu	r17,r5,81112b7c <_malloc_r+0x2dc>
81112ae8:	11296dc0 	call	811296dc <__malloc_lock>
81112aec:	00800184 	movi	r2,6
81112af0:	01000084 	movi	r4,2
81112af4:	04e04534 	movhi	r19,33044
81112af8:	1085883a 	add	r2,r2,r2
81112afc:	9cc46404 	addi	r19,r19,4496
81112b00:	1085883a 	add	r2,r2,r2
81112b04:	9885883a 	add	r2,r19,r2
81112b08:	14000117 	ldw	r16,4(r2)
81112b0c:	10fffe04 	addi	r3,r2,-8
81112b10:	80c0d926 	beq	r16,r3,81112e78 <_malloc_r+0x5d8>
81112b14:	80c00117 	ldw	r3,4(r16)
81112b18:	81000317 	ldw	r4,12(r16)
81112b1c:	00bfff04 	movi	r2,-4
81112b20:	1884703a 	and	r2,r3,r2
81112b24:	81400217 	ldw	r5,8(r16)
81112b28:	8085883a 	add	r2,r16,r2
81112b2c:	10c00117 	ldw	r3,4(r2)
81112b30:	29000315 	stw	r4,12(r5)
81112b34:	21400215 	stw	r5,8(r4)
81112b38:	18c00054 	ori	r3,r3,1
81112b3c:	10c00115 	stw	r3,4(r2)
81112b40:	9009883a 	mov	r4,r18
81112b44:	11298040 	call	81129804 <__malloc_unlock>
81112b48:	80800204 	addi	r2,r16,8
81112b4c:	dfc00a17 	ldw	ra,40(sp)
81112b50:	df000917 	ldw	fp,36(sp)
81112b54:	ddc00817 	ldw	r23,32(sp)
81112b58:	dd800717 	ldw	r22,28(sp)
81112b5c:	dd400617 	ldw	r21,24(sp)
81112b60:	dd000517 	ldw	r20,20(sp)
81112b64:	dcc00417 	ldw	r19,16(sp)
81112b68:	dc800317 	ldw	r18,12(sp)
81112b6c:	dc400217 	ldw	r17,8(sp)
81112b70:	dc000117 	ldw	r16,4(sp)
81112b74:	dec00b04 	addi	sp,sp,44
81112b78:	f800283a 	ret
81112b7c:	00800304 	movi	r2,12
81112b80:	90800015 	stw	r2,0(r18)
81112b84:	0005883a 	mov	r2,zero
81112b88:	003ff006 	br	81112b4c <__reset+0xfb0f2b4c>
81112b8c:	01002004 	movi	r4,128
81112b90:	02001004 	movi	r8,64
81112b94:	01c00fc4 	movi	r7,63
81112b98:	003f6106 	br	81112920 <__reset+0xfb0f2920>
81112b9c:	4009883a 	mov	r4,r8
81112ba0:	003f7506 	br	81112978 <__reset+0xfb0f2978>
81112ba4:	81000317 	ldw	r4,12(r16)
81112ba8:	003fde06 	br	81112b24 <__reset+0xfb0f2b24>
81112bac:	81c5883a 	add	r2,r16,r7
81112bb0:	11400117 	ldw	r5,4(r2)
81112bb4:	9009883a 	mov	r4,r18
81112bb8:	29400054 	ori	r5,r5,1
81112bbc:	11400115 	stw	r5,4(r2)
81112bc0:	11298040 	call	81129804 <__malloc_unlock>
81112bc4:	80800204 	addi	r2,r16,8
81112bc8:	003fe006 	br	81112b4c <__reset+0xfb0f2b4c>
81112bcc:	9c000217 	ldw	r16,8(r19)
81112bd0:	00bfff04 	movi	r2,-4
81112bd4:	85800117 	ldw	r22,4(r16)
81112bd8:	b0ac703a 	and	r22,r22,r2
81112bdc:	b4400336 	bltu	r22,r17,81112bec <_malloc_r+0x34c>
81112be0:	b445c83a 	sub	r2,r22,r17
81112be4:	00c003c4 	movi	r3,15
81112be8:	18805d16 	blt	r3,r2,81112d60 <_malloc_r+0x4c0>
81112bec:	05e04534 	movhi	r23,33044
81112bf0:	00a04534 	movhi	r2,33044
81112bf4:	108b0504 	addi	r2,r2,11284
81112bf8:	bdcaa704 	addi	r23,r23,10908
81112bfc:	15400017 	ldw	r21,0(r2)
81112c00:	b8c00017 	ldw	r3,0(r23)
81112c04:	00bfffc4 	movi	r2,-1
81112c08:	858d883a 	add	r6,r16,r22
81112c0c:	8d6b883a 	add	r21,r17,r21
81112c10:	1880ea26 	beq	r3,r2,81112fbc <_malloc_r+0x71c>
81112c14:	ad4403c4 	addi	r21,r21,4111
81112c18:	00bc0004 	movi	r2,-4096
81112c1c:	a8aa703a 	and	r21,r21,r2
81112c20:	a80b883a 	mov	r5,r21
81112c24:	9009883a 	mov	r4,r18
81112c28:	d9800015 	stw	r6,0(sp)
81112c2c:	111385c0 	call	8111385c <_sbrk_r>
81112c30:	1029883a 	mov	r20,r2
81112c34:	00bfffc4 	movi	r2,-1
81112c38:	d9800017 	ldw	r6,0(sp)
81112c3c:	a080e826 	beq	r20,r2,81112fe0 <_malloc_r+0x740>
81112c40:	a180a636 	bltu	r20,r6,81112edc <_malloc_r+0x63c>
81112c44:	07204534 	movhi	fp,33044
81112c48:	e70b6804 	addi	fp,fp,11680
81112c4c:	e0800017 	ldw	r2,0(fp)
81112c50:	a887883a 	add	r3,r21,r2
81112c54:	e0c00015 	stw	r3,0(fp)
81112c58:	3500e626 	beq	r6,r20,81112ff4 <_malloc_r+0x754>
81112c5c:	b9000017 	ldw	r4,0(r23)
81112c60:	00bfffc4 	movi	r2,-1
81112c64:	2080ee26 	beq	r4,r2,81113020 <_malloc_r+0x780>
81112c68:	a185c83a 	sub	r2,r20,r6
81112c6c:	10c5883a 	add	r2,r2,r3
81112c70:	e0800015 	stw	r2,0(fp)
81112c74:	a0c001cc 	andi	r3,r20,7
81112c78:	1800bc26 	beq	r3,zero,81112f6c <_malloc_r+0x6cc>
81112c7c:	a0e9c83a 	sub	r20,r20,r3
81112c80:	00840204 	movi	r2,4104
81112c84:	a5000204 	addi	r20,r20,8
81112c88:	10c7c83a 	sub	r3,r2,r3
81112c8c:	a545883a 	add	r2,r20,r21
81112c90:	1083ffcc 	andi	r2,r2,4095
81112c94:	18abc83a 	sub	r21,r3,r2
81112c98:	a80b883a 	mov	r5,r21
81112c9c:	9009883a 	mov	r4,r18
81112ca0:	111385c0 	call	8111385c <_sbrk_r>
81112ca4:	00ffffc4 	movi	r3,-1
81112ca8:	10c0e126 	beq	r2,r3,81113030 <_malloc_r+0x790>
81112cac:	1505c83a 	sub	r2,r2,r20
81112cb0:	1545883a 	add	r2,r2,r21
81112cb4:	10800054 	ori	r2,r2,1
81112cb8:	e0c00017 	ldw	r3,0(fp)
81112cbc:	9d000215 	stw	r20,8(r19)
81112cc0:	a0800115 	stw	r2,4(r20)
81112cc4:	a8c7883a 	add	r3,r21,r3
81112cc8:	e0c00015 	stw	r3,0(fp)
81112ccc:	84c00e26 	beq	r16,r19,81112d08 <_malloc_r+0x468>
81112cd0:	018003c4 	movi	r6,15
81112cd4:	3580a72e 	bgeu	r6,r22,81112f74 <_malloc_r+0x6d4>
81112cd8:	81400117 	ldw	r5,4(r16)
81112cdc:	013ffe04 	movi	r4,-8
81112ce0:	b0bffd04 	addi	r2,r22,-12
81112ce4:	1104703a 	and	r2,r2,r4
81112ce8:	2900004c 	andi	r4,r5,1
81112cec:	2088b03a 	or	r4,r4,r2
81112cf0:	81000115 	stw	r4,4(r16)
81112cf4:	01400144 	movi	r5,5
81112cf8:	8089883a 	add	r4,r16,r2
81112cfc:	21400115 	stw	r5,4(r4)
81112d00:	21400215 	stw	r5,8(r4)
81112d04:	3080cd36 	bltu	r6,r2,8111303c <_malloc_r+0x79c>
81112d08:	00a04534 	movhi	r2,33044
81112d0c:	108b0404 	addi	r2,r2,11280
81112d10:	11000017 	ldw	r4,0(r2)
81112d14:	20c0012e 	bgeu	r4,r3,81112d1c <_malloc_r+0x47c>
81112d18:	10c00015 	stw	r3,0(r2)
81112d1c:	00a04534 	movhi	r2,33044
81112d20:	108b0304 	addi	r2,r2,11276
81112d24:	11000017 	ldw	r4,0(r2)
81112d28:	9c000217 	ldw	r16,8(r19)
81112d2c:	20c0012e 	bgeu	r4,r3,81112d34 <_malloc_r+0x494>
81112d30:	10c00015 	stw	r3,0(r2)
81112d34:	80c00117 	ldw	r3,4(r16)
81112d38:	00bfff04 	movi	r2,-4
81112d3c:	1886703a 	and	r3,r3,r2
81112d40:	1c45c83a 	sub	r2,r3,r17
81112d44:	1c400236 	bltu	r3,r17,81112d50 <_malloc_r+0x4b0>
81112d48:	00c003c4 	movi	r3,15
81112d4c:	18800416 	blt	r3,r2,81112d60 <_malloc_r+0x4c0>
81112d50:	9009883a 	mov	r4,r18
81112d54:	11298040 	call	81129804 <__malloc_unlock>
81112d58:	0005883a 	mov	r2,zero
81112d5c:	003f7b06 	br	81112b4c <__reset+0xfb0f2b4c>
81112d60:	88c00054 	ori	r3,r17,1
81112d64:	80c00115 	stw	r3,4(r16)
81112d68:	8463883a 	add	r17,r16,r17
81112d6c:	10800054 	ori	r2,r2,1
81112d70:	9c400215 	stw	r17,8(r19)
81112d74:	88800115 	stw	r2,4(r17)
81112d78:	9009883a 	mov	r4,r18
81112d7c:	11298040 	call	81129804 <__malloc_unlock>
81112d80:	80800204 	addi	r2,r16,8
81112d84:	003f7106 	br	81112b4c <__reset+0xfb0f2b4c>
81112d88:	00c00504 	movi	r3,20
81112d8c:	18804a2e 	bgeu	r3,r2,81112eb8 <_malloc_r+0x618>
81112d90:	00c01504 	movi	r3,84
81112d94:	18806e36 	bltu	r3,r2,81112f50 <_malloc_r+0x6b0>
81112d98:	8804d33a 	srli	r2,r17,12
81112d9c:	12001bc4 	addi	r8,r2,111
81112da0:	11c01b84 	addi	r7,r2,110
81112da4:	4209883a 	add	r4,r8,r8
81112da8:	003edd06 	br	81112920 <__reset+0xfb0f2920>
81112dac:	3804d27a 	srli	r2,r7,9
81112db0:	00c00104 	movi	r3,4
81112db4:	1880442e 	bgeu	r3,r2,81112ec8 <_malloc_r+0x628>
81112db8:	00c00504 	movi	r3,20
81112dbc:	18808136 	bltu	r3,r2,81112fc4 <_malloc_r+0x724>
81112dc0:	11401704 	addi	r5,r2,92
81112dc4:	10c016c4 	addi	r3,r2,91
81112dc8:	294b883a 	add	r5,r5,r5
81112dcc:	294b883a 	add	r5,r5,r5
81112dd0:	294b883a 	add	r5,r5,r5
81112dd4:	994b883a 	add	r5,r19,r5
81112dd8:	28800017 	ldw	r2,0(r5)
81112ddc:	01a04534 	movhi	r6,33044
81112de0:	297ffe04 	addi	r5,r5,-8
81112de4:	31846404 	addi	r6,r6,4496
81112de8:	28806526 	beq	r5,r2,81112f80 <_malloc_r+0x6e0>
81112dec:	01bfff04 	movi	r6,-4
81112df0:	10c00117 	ldw	r3,4(r2)
81112df4:	1986703a 	and	r3,r3,r6
81112df8:	38c0022e 	bgeu	r7,r3,81112e04 <_malloc_r+0x564>
81112dfc:	10800217 	ldw	r2,8(r2)
81112e00:	28bffb1e 	bne	r5,r2,81112df0 <__reset+0xfb0f2df0>
81112e04:	11400317 	ldw	r5,12(r2)
81112e08:	98c00117 	ldw	r3,4(r19)
81112e0c:	81400315 	stw	r5,12(r16)
81112e10:	80800215 	stw	r2,8(r16)
81112e14:	2c000215 	stw	r16,8(r5)
81112e18:	14000315 	stw	r16,12(r2)
81112e1c:	003ef806 	br	81112a00 <__reset+0xfb0f2a00>
81112e20:	88c00054 	ori	r3,r17,1
81112e24:	80c00115 	stw	r3,4(r16)
81112e28:	8463883a 	add	r17,r16,r17
81112e2c:	34400515 	stw	r17,20(r6)
81112e30:	34400415 	stw	r17,16(r6)
81112e34:	10c00054 	ori	r3,r2,1
81112e38:	8a000315 	stw	r8,12(r17)
81112e3c:	8a000215 	stw	r8,8(r17)
81112e40:	88c00115 	stw	r3,4(r17)
81112e44:	88a3883a 	add	r17,r17,r2
81112e48:	88800015 	stw	r2,0(r17)
81112e4c:	9009883a 	mov	r4,r18
81112e50:	11298040 	call	81129804 <__malloc_unlock>
81112e54:	80800204 	addi	r2,r16,8
81112e58:	003f3c06 	br	81112b4c <__reset+0xfb0f2b4c>
81112e5c:	30c00117 	ldw	r3,4(r6)
81112e60:	003ee706 	br	81112a00 <__reset+0xfb0f2a00>
81112e64:	5ac00044 	addi	r11,r11,1
81112e68:	588000cc 	andi	r2,r11,3
81112e6c:	31800204 	addi	r6,r6,8
81112e70:	103efd1e 	bne	r2,zero,81112a68 <__reset+0xfb0f2a68>
81112e74:	00002406 	br	81112f08 <_malloc_r+0x668>
81112e78:	14000317 	ldw	r16,12(r2)
81112e7c:	143f251e 	bne	r2,r16,81112b14 <__reset+0xfb0f2b14>
81112e80:	21000084 	addi	r4,r4,2
81112e84:	003ebc06 	br	81112978 <__reset+0xfb0f2978>
81112e88:	8085883a 	add	r2,r16,r2
81112e8c:	10c00117 	ldw	r3,4(r2)
81112e90:	81000317 	ldw	r4,12(r16)
81112e94:	81400217 	ldw	r5,8(r16)
81112e98:	18c00054 	ori	r3,r3,1
81112e9c:	10c00115 	stw	r3,4(r2)
81112ea0:	29000315 	stw	r4,12(r5)
81112ea4:	21400215 	stw	r5,8(r4)
81112ea8:	9009883a 	mov	r4,r18
81112eac:	11298040 	call	81129804 <__malloc_unlock>
81112eb0:	80800204 	addi	r2,r16,8
81112eb4:	003f2506 	br	81112b4c <__reset+0xfb0f2b4c>
81112eb8:	12001704 	addi	r8,r2,92
81112ebc:	11c016c4 	addi	r7,r2,91
81112ec0:	4209883a 	add	r4,r8,r8
81112ec4:	003e9606 	br	81112920 <__reset+0xfb0f2920>
81112ec8:	3804d1ba 	srli	r2,r7,6
81112ecc:	11400e44 	addi	r5,r2,57
81112ed0:	10c00e04 	addi	r3,r2,56
81112ed4:	294b883a 	add	r5,r5,r5
81112ed8:	003fbc06 	br	81112dcc <__reset+0xfb0f2dcc>
81112edc:	84ff5926 	beq	r16,r19,81112c44 <__reset+0xfb0f2c44>
81112ee0:	00a04534 	movhi	r2,33044
81112ee4:	10846404 	addi	r2,r2,4496
81112ee8:	14000217 	ldw	r16,8(r2)
81112eec:	00bfff04 	movi	r2,-4
81112ef0:	80c00117 	ldw	r3,4(r16)
81112ef4:	1886703a 	and	r3,r3,r2
81112ef8:	003f9106 	br	81112d40 <__reset+0xfb0f2d40>
81112efc:	60800217 	ldw	r2,8(r12)
81112f00:	213fffc4 	addi	r4,r4,-1
81112f04:	1300651e 	bne	r2,r12,8111309c <_malloc_r+0x7fc>
81112f08:	208000cc 	andi	r2,r4,3
81112f0c:	633ffe04 	addi	r12,r12,-8
81112f10:	103ffa1e 	bne	r2,zero,81112efc <__reset+0xfb0f2efc>
81112f14:	98800117 	ldw	r2,4(r19)
81112f18:	0146303a 	nor	r3,zero,r5
81112f1c:	1884703a 	and	r2,r3,r2
81112f20:	98800115 	stw	r2,4(r19)
81112f24:	294b883a 	add	r5,r5,r5
81112f28:	117f2836 	bltu	r2,r5,81112bcc <__reset+0xfb0f2bcc>
81112f2c:	283f2726 	beq	r5,zero,81112bcc <__reset+0xfb0f2bcc>
81112f30:	2886703a 	and	r3,r5,r2
81112f34:	5809883a 	mov	r4,r11
81112f38:	183ec31e 	bne	r3,zero,81112a48 <__reset+0xfb0f2a48>
81112f3c:	294b883a 	add	r5,r5,r5
81112f40:	2886703a 	and	r3,r5,r2
81112f44:	21000104 	addi	r4,r4,4
81112f48:	183ffc26 	beq	r3,zero,81112f3c <__reset+0xfb0f2f3c>
81112f4c:	003ebe06 	br	81112a48 <__reset+0xfb0f2a48>
81112f50:	00c05504 	movi	r3,340
81112f54:	18801236 	bltu	r3,r2,81112fa0 <_malloc_r+0x700>
81112f58:	8804d3fa 	srli	r2,r17,15
81112f5c:	12001e04 	addi	r8,r2,120
81112f60:	11c01dc4 	addi	r7,r2,119
81112f64:	4209883a 	add	r4,r8,r8
81112f68:	003e6d06 	br	81112920 <__reset+0xfb0f2920>
81112f6c:	00c40004 	movi	r3,4096
81112f70:	003f4606 	br	81112c8c <__reset+0xfb0f2c8c>
81112f74:	00800044 	movi	r2,1
81112f78:	a0800115 	stw	r2,4(r20)
81112f7c:	003f7406 	br	81112d50 <__reset+0xfb0f2d50>
81112f80:	1805d0ba 	srai	r2,r3,2
81112f84:	01c00044 	movi	r7,1
81112f88:	30c00117 	ldw	r3,4(r6)
81112f8c:	388e983a 	sll	r7,r7,r2
81112f90:	2805883a 	mov	r2,r5
81112f94:	38c6b03a 	or	r3,r7,r3
81112f98:	30c00115 	stw	r3,4(r6)
81112f9c:	003f9b06 	br	81112e0c <__reset+0xfb0f2e0c>
81112fa0:	00c15504 	movi	r3,1364
81112fa4:	18801a36 	bltu	r3,r2,81113010 <_malloc_r+0x770>
81112fa8:	8804d4ba 	srli	r2,r17,18
81112fac:	12001f44 	addi	r8,r2,125
81112fb0:	11c01f04 	addi	r7,r2,124
81112fb4:	4209883a 	add	r4,r8,r8
81112fb8:	003e5906 	br	81112920 <__reset+0xfb0f2920>
81112fbc:	ad400404 	addi	r21,r21,16
81112fc0:	003f1706 	br	81112c20 <__reset+0xfb0f2c20>
81112fc4:	00c01504 	movi	r3,84
81112fc8:	18802336 	bltu	r3,r2,81113058 <_malloc_r+0x7b8>
81112fcc:	3804d33a 	srli	r2,r7,12
81112fd0:	11401bc4 	addi	r5,r2,111
81112fd4:	10c01b84 	addi	r3,r2,110
81112fd8:	294b883a 	add	r5,r5,r5
81112fdc:	003f7b06 	br	81112dcc <__reset+0xfb0f2dcc>
81112fe0:	9c000217 	ldw	r16,8(r19)
81112fe4:	00bfff04 	movi	r2,-4
81112fe8:	80c00117 	ldw	r3,4(r16)
81112fec:	1886703a 	and	r3,r3,r2
81112ff0:	003f5306 	br	81112d40 <__reset+0xfb0f2d40>
81112ff4:	3083ffcc 	andi	r2,r6,4095
81112ff8:	103f181e 	bne	r2,zero,81112c5c <__reset+0xfb0f2c5c>
81112ffc:	99000217 	ldw	r4,8(r19)
81113000:	b545883a 	add	r2,r22,r21
81113004:	10800054 	ori	r2,r2,1
81113008:	20800115 	stw	r2,4(r4)
8111300c:	003f3e06 	br	81112d08 <__reset+0xfb0f2d08>
81113010:	01003f84 	movi	r4,254
81113014:	02001fc4 	movi	r8,127
81113018:	01c01f84 	movi	r7,126
8111301c:	003e4006 	br	81112920 <__reset+0xfb0f2920>
81113020:	00a04534 	movhi	r2,33044
81113024:	108aa704 	addi	r2,r2,10908
81113028:	15000015 	stw	r20,0(r2)
8111302c:	003f1106 	br	81112c74 <__reset+0xfb0f2c74>
81113030:	00800044 	movi	r2,1
81113034:	002b883a 	mov	r21,zero
81113038:	003f1f06 	br	81112cb8 <__reset+0xfb0f2cb8>
8111303c:	81400204 	addi	r5,r16,8
81113040:	9009883a 	mov	r4,r18
81113044:	111c3140 	call	8111c314 <_free_r>
81113048:	00a04534 	movhi	r2,33044
8111304c:	108b6804 	addi	r2,r2,11680
81113050:	10c00017 	ldw	r3,0(r2)
81113054:	003f2c06 	br	81112d08 <__reset+0xfb0f2d08>
81113058:	00c05504 	movi	r3,340
8111305c:	18800536 	bltu	r3,r2,81113074 <_malloc_r+0x7d4>
81113060:	3804d3fa 	srli	r2,r7,15
81113064:	11401e04 	addi	r5,r2,120
81113068:	10c01dc4 	addi	r3,r2,119
8111306c:	294b883a 	add	r5,r5,r5
81113070:	003f5606 	br	81112dcc <__reset+0xfb0f2dcc>
81113074:	00c15504 	movi	r3,1364
81113078:	18800536 	bltu	r3,r2,81113090 <_malloc_r+0x7f0>
8111307c:	3804d4ba 	srli	r2,r7,18
81113080:	11401f44 	addi	r5,r2,125
81113084:	10c01f04 	addi	r3,r2,124
81113088:	294b883a 	add	r5,r5,r5
8111308c:	003f4f06 	br	81112dcc <__reset+0xfb0f2dcc>
81113090:	01403f84 	movi	r5,254
81113094:	00c01f84 	movi	r3,126
81113098:	003f4c06 	br	81112dcc <__reset+0xfb0f2dcc>
8111309c:	98800117 	ldw	r2,4(r19)
811130a0:	003fa006 	br	81112f24 <__reset+0xfb0f2f24>
811130a4:	8808d0fa 	srli	r4,r17,3
811130a8:	20800044 	addi	r2,r4,1
811130ac:	1085883a 	add	r2,r2,r2
811130b0:	003e9006 	br	81112af4 <__reset+0xfb0f2af4>

811130b4 <memcpy>:
811130b4:	defffd04 	addi	sp,sp,-12
811130b8:	de00012e 	bgeu	sp,et,811130c0 <memcpy+0xc>
811130bc:	003b68fa 	trap	3
811130c0:	00c003c4 	movi	r3,15
811130c4:	dfc00215 	stw	ra,8(sp)
811130c8:	dc400115 	stw	r17,4(sp)
811130cc:	dc000015 	stw	r16,0(sp)
811130d0:	2005883a 	mov	r2,r4
811130d4:	1980452e 	bgeu	r3,r6,811131ec <memcpy+0x138>
811130d8:	2906b03a 	or	r3,r5,r4
811130dc:	18c000cc 	andi	r3,r3,3
811130e0:	1800441e 	bne	r3,zero,811131f4 <memcpy+0x140>
811130e4:	347ffc04 	addi	r17,r6,-16
811130e8:	8822d13a 	srli	r17,r17,4
811130ec:	28c00104 	addi	r3,r5,4
811130f0:	23400104 	addi	r13,r4,4
811130f4:	8820913a 	slli	r16,r17,4
811130f8:	2b000204 	addi	r12,r5,8
811130fc:	22c00204 	addi	r11,r4,8
81113100:	84000504 	addi	r16,r16,20
81113104:	2a800304 	addi	r10,r5,12
81113108:	22400304 	addi	r9,r4,12
8111310c:	2c21883a 	add	r16,r5,r16
81113110:	2811883a 	mov	r8,r5
81113114:	200f883a 	mov	r7,r4
81113118:	41000017 	ldw	r4,0(r8)
8111311c:	1fc00017 	ldw	ra,0(r3)
81113120:	63c00017 	ldw	r15,0(r12)
81113124:	39000015 	stw	r4,0(r7)
81113128:	53800017 	ldw	r14,0(r10)
8111312c:	6fc00015 	stw	ra,0(r13)
81113130:	5bc00015 	stw	r15,0(r11)
81113134:	4b800015 	stw	r14,0(r9)
81113138:	18c00404 	addi	r3,r3,16
8111313c:	39c00404 	addi	r7,r7,16
81113140:	42000404 	addi	r8,r8,16
81113144:	6b400404 	addi	r13,r13,16
81113148:	63000404 	addi	r12,r12,16
8111314c:	5ac00404 	addi	r11,r11,16
81113150:	52800404 	addi	r10,r10,16
81113154:	4a400404 	addi	r9,r9,16
81113158:	1c3fef1e 	bne	r3,r16,81113118 <__reset+0xfb0f3118>
8111315c:	89c00044 	addi	r7,r17,1
81113160:	380e913a 	slli	r7,r7,4
81113164:	310003cc 	andi	r4,r6,15
81113168:	02c000c4 	movi	r11,3
8111316c:	11c7883a 	add	r3,r2,r7
81113170:	29cb883a 	add	r5,r5,r7
81113174:	5900212e 	bgeu	r11,r4,811131fc <memcpy+0x148>
81113178:	1813883a 	mov	r9,r3
8111317c:	2811883a 	mov	r8,r5
81113180:	200f883a 	mov	r7,r4
81113184:	42800017 	ldw	r10,0(r8)
81113188:	4a400104 	addi	r9,r9,4
8111318c:	39ffff04 	addi	r7,r7,-4
81113190:	4abfff15 	stw	r10,-4(r9)
81113194:	42000104 	addi	r8,r8,4
81113198:	59fffa36 	bltu	r11,r7,81113184 <__reset+0xfb0f3184>
8111319c:	213fff04 	addi	r4,r4,-4
811131a0:	2008d0ba 	srli	r4,r4,2
811131a4:	318000cc 	andi	r6,r6,3
811131a8:	21000044 	addi	r4,r4,1
811131ac:	2109883a 	add	r4,r4,r4
811131b0:	2109883a 	add	r4,r4,r4
811131b4:	1907883a 	add	r3,r3,r4
811131b8:	290b883a 	add	r5,r5,r4
811131bc:	30000626 	beq	r6,zero,811131d8 <memcpy+0x124>
811131c0:	198d883a 	add	r6,r3,r6
811131c4:	29c00003 	ldbu	r7,0(r5)
811131c8:	18c00044 	addi	r3,r3,1
811131cc:	29400044 	addi	r5,r5,1
811131d0:	19ffffc5 	stb	r7,-1(r3)
811131d4:	19bffb1e 	bne	r3,r6,811131c4 <__reset+0xfb0f31c4>
811131d8:	dfc00217 	ldw	ra,8(sp)
811131dc:	dc400117 	ldw	r17,4(sp)
811131e0:	dc000017 	ldw	r16,0(sp)
811131e4:	dec00304 	addi	sp,sp,12
811131e8:	f800283a 	ret
811131ec:	2007883a 	mov	r3,r4
811131f0:	003ff206 	br	811131bc <__reset+0xfb0f31bc>
811131f4:	2007883a 	mov	r3,r4
811131f8:	003ff106 	br	811131c0 <__reset+0xfb0f31c0>
811131fc:	200d883a 	mov	r6,r4
81113200:	003fee06 	br	811131bc <__reset+0xfb0f31bc>

81113204 <memset>:
81113204:	20c000cc 	andi	r3,r4,3
81113208:	2005883a 	mov	r2,r4
8111320c:	18004426 	beq	r3,zero,81113320 <memset+0x11c>
81113210:	31ffffc4 	addi	r7,r6,-1
81113214:	30004026 	beq	r6,zero,81113318 <memset+0x114>
81113218:	2813883a 	mov	r9,r5
8111321c:	200d883a 	mov	r6,r4
81113220:	2007883a 	mov	r3,r4
81113224:	00000406 	br	81113238 <memset+0x34>
81113228:	3a3fffc4 	addi	r8,r7,-1
8111322c:	31800044 	addi	r6,r6,1
81113230:	38003926 	beq	r7,zero,81113318 <memset+0x114>
81113234:	400f883a 	mov	r7,r8
81113238:	18c00044 	addi	r3,r3,1
8111323c:	32400005 	stb	r9,0(r6)
81113240:	1a0000cc 	andi	r8,r3,3
81113244:	403ff81e 	bne	r8,zero,81113228 <__reset+0xfb0f3228>
81113248:	010000c4 	movi	r4,3
8111324c:	21c02d2e 	bgeu	r4,r7,81113304 <memset+0x100>
81113250:	29003fcc 	andi	r4,r5,255
81113254:	200c923a 	slli	r6,r4,8
81113258:	3108b03a 	or	r4,r6,r4
8111325c:	200c943a 	slli	r6,r4,16
81113260:	218cb03a 	or	r6,r4,r6
81113264:	010003c4 	movi	r4,15
81113268:	21c0182e 	bgeu	r4,r7,811132cc <memset+0xc8>
8111326c:	3b3ffc04 	addi	r12,r7,-16
81113270:	6018d13a 	srli	r12,r12,4
81113274:	1a000104 	addi	r8,r3,4
81113278:	1ac00204 	addi	r11,r3,8
8111327c:	6008913a 	slli	r4,r12,4
81113280:	1a800304 	addi	r10,r3,12
81113284:	1813883a 	mov	r9,r3
81113288:	21000504 	addi	r4,r4,20
8111328c:	1909883a 	add	r4,r3,r4
81113290:	49800015 	stw	r6,0(r9)
81113294:	41800015 	stw	r6,0(r8)
81113298:	59800015 	stw	r6,0(r11)
8111329c:	51800015 	stw	r6,0(r10)
811132a0:	42000404 	addi	r8,r8,16
811132a4:	4a400404 	addi	r9,r9,16
811132a8:	5ac00404 	addi	r11,r11,16
811132ac:	52800404 	addi	r10,r10,16
811132b0:	413ff71e 	bne	r8,r4,81113290 <__reset+0xfb0f3290>
811132b4:	63000044 	addi	r12,r12,1
811132b8:	6018913a 	slli	r12,r12,4
811132bc:	39c003cc 	andi	r7,r7,15
811132c0:	010000c4 	movi	r4,3
811132c4:	1b07883a 	add	r3,r3,r12
811132c8:	21c00e2e 	bgeu	r4,r7,81113304 <memset+0x100>
811132cc:	1813883a 	mov	r9,r3
811132d0:	3811883a 	mov	r8,r7
811132d4:	010000c4 	movi	r4,3
811132d8:	49800015 	stw	r6,0(r9)
811132dc:	423fff04 	addi	r8,r8,-4
811132e0:	4a400104 	addi	r9,r9,4
811132e4:	223ffc36 	bltu	r4,r8,811132d8 <__reset+0xfb0f32d8>
811132e8:	393fff04 	addi	r4,r7,-4
811132ec:	2008d0ba 	srli	r4,r4,2
811132f0:	39c000cc 	andi	r7,r7,3
811132f4:	21000044 	addi	r4,r4,1
811132f8:	2109883a 	add	r4,r4,r4
811132fc:	2109883a 	add	r4,r4,r4
81113300:	1907883a 	add	r3,r3,r4
81113304:	38000526 	beq	r7,zero,8111331c <memset+0x118>
81113308:	19cf883a 	add	r7,r3,r7
8111330c:	19400005 	stb	r5,0(r3)
81113310:	18c00044 	addi	r3,r3,1
81113314:	38fffd1e 	bne	r7,r3,8111330c <__reset+0xfb0f330c>
81113318:	f800283a 	ret
8111331c:	f800283a 	ret
81113320:	2007883a 	mov	r3,r4
81113324:	300f883a 	mov	r7,r6
81113328:	003fc706 	br	81113248 <__reset+0xfb0f3248>

8111332c <_open_r>:
8111332c:	defffd04 	addi	sp,sp,-12
81113330:	de00012e 	bgeu	sp,et,81113338 <_open_r+0xc>
81113334:	003b68fa 	trap	3
81113338:	2805883a 	mov	r2,r5
8111333c:	dc000015 	stw	r16,0(sp)
81113340:	04204534 	movhi	r16,33044
81113344:	dc400115 	stw	r17,4(sp)
81113348:	300b883a 	mov	r5,r6
8111334c:	840b0204 	addi	r16,r16,11272
81113350:	2023883a 	mov	r17,r4
81113354:	380d883a 	mov	r6,r7
81113358:	1009883a 	mov	r4,r2
8111335c:	dfc00215 	stw	ra,8(sp)
81113360:	80000015 	stw	zero,0(r16)
81113364:	1128d5c0 	call	81128d5c <open>
81113368:	00ffffc4 	movi	r3,-1
8111336c:	10c00526 	beq	r2,r3,81113384 <_open_r+0x58>
81113370:	dfc00217 	ldw	ra,8(sp)
81113374:	dc400117 	ldw	r17,4(sp)
81113378:	dc000017 	ldw	r16,0(sp)
8111337c:	dec00304 	addi	sp,sp,12
81113380:	f800283a 	ret
81113384:	80c00017 	ldw	r3,0(r16)
81113388:	183ff926 	beq	r3,zero,81113370 <__reset+0xfb0f3370>
8111338c:	88c00015 	stw	r3,0(r17)
81113390:	003ff706 	br	81113370 <__reset+0xfb0f3370>

81113394 <_printf_r>:
81113394:	defffd04 	addi	sp,sp,-12
81113398:	2805883a 	mov	r2,r5
8111339c:	de00012e 	bgeu	sp,et,811133a4 <_printf_r+0x10>
811133a0:	003b68fa 	trap	3
811133a4:	dfc00015 	stw	ra,0(sp)
811133a8:	d9800115 	stw	r6,4(sp)
811133ac:	d9c00215 	stw	r7,8(sp)
811133b0:	21400217 	ldw	r5,8(r4)
811133b4:	d9c00104 	addi	r7,sp,4
811133b8:	100d883a 	mov	r6,r2
811133bc:	11160c00 	call	811160c0 <___vfprintf_internal_r>
811133c0:	dfc00017 	ldw	ra,0(sp)
811133c4:	dec00304 	addi	sp,sp,12
811133c8:	f800283a 	ret

811133cc <printf>:
811133cc:	defffc04 	addi	sp,sp,-16
811133d0:	de00012e 	bgeu	sp,et,811133d8 <printf+0xc>
811133d4:	003b68fa 	trap	3
811133d8:	dfc00015 	stw	ra,0(sp)
811133dc:	d9400115 	stw	r5,4(sp)
811133e0:	d9800215 	stw	r6,8(sp)
811133e4:	d9c00315 	stw	r7,12(sp)
811133e8:	00a04534 	movhi	r2,33044
811133ec:	108aa604 	addi	r2,r2,10904
811133f0:	10800017 	ldw	r2,0(r2)
811133f4:	200b883a 	mov	r5,r4
811133f8:	d9800104 	addi	r6,sp,4
811133fc:	11000217 	ldw	r4,8(r2)
81113400:	11182c00 	call	811182c0 <__vfprintf_internal>
81113404:	dfc00017 	ldw	ra,0(sp)
81113408:	dec00404 	addi	sp,sp,16
8111340c:	f800283a 	ret

81113410 <_putc_r>:
81113410:	defffc04 	addi	sp,sp,-16
81113414:	de00012e 	bgeu	sp,et,8111341c <_putc_r+0xc>
81113418:	003b68fa 	trap	3
8111341c:	dc000215 	stw	r16,8(sp)
81113420:	dfc00315 	stw	ra,12(sp)
81113424:	2021883a 	mov	r16,r4
81113428:	20000226 	beq	r4,zero,81113434 <_putc_r+0x24>
8111342c:	20800e17 	ldw	r2,56(r4)
81113430:	10001b26 	beq	r2,zero,811134a0 <_putc_r+0x90>
81113434:	30800217 	ldw	r2,8(r6)
81113438:	10bfffc4 	addi	r2,r2,-1
8111343c:	30800215 	stw	r2,8(r6)
81113440:	10000a16 	blt	r2,zero,8111346c <_putc_r+0x5c>
81113444:	30800017 	ldw	r2,0(r6)
81113448:	11400005 	stb	r5,0(r2)
8111344c:	30800017 	ldw	r2,0(r6)
81113450:	10c00044 	addi	r3,r2,1
81113454:	30c00015 	stw	r3,0(r6)
81113458:	10800003 	ldbu	r2,0(r2)
8111345c:	dfc00317 	ldw	ra,12(sp)
81113460:	dc000217 	ldw	r16,8(sp)
81113464:	dec00404 	addi	sp,sp,16
81113468:	f800283a 	ret
8111346c:	30c00617 	ldw	r3,24(r6)
81113470:	10c00616 	blt	r2,r3,8111348c <_putc_r+0x7c>
81113474:	30800017 	ldw	r2,0(r6)
81113478:	00c00284 	movi	r3,10
8111347c:	11400005 	stb	r5,0(r2)
81113480:	30800017 	ldw	r2,0(r6)
81113484:	11400003 	ldbu	r5,0(r2)
81113488:	28fff11e 	bne	r5,r3,81113450 <__reset+0xfb0f3450>
8111348c:	8009883a 	mov	r4,r16
81113490:	dfc00317 	ldw	ra,12(sp)
81113494:	dc000217 	ldw	r16,8(sp)
81113498:	dec00404 	addi	sp,sp,16
8111349c:	1119c441 	jmpi	81119c44 <__swbuf_r>
811134a0:	d9400015 	stw	r5,0(sp)
811134a4:	d9800115 	stw	r6,4(sp)
811134a8:	111be7c0 	call	8111be7c <__sinit>
811134ac:	d9800117 	ldw	r6,4(sp)
811134b0:	d9400017 	ldw	r5,0(sp)
811134b4:	003fdf06 	br	81113434 <__reset+0xfb0f3434>

811134b8 <putc>:
811134b8:	00a04534 	movhi	r2,33044
811134bc:	defffc04 	addi	sp,sp,-16
811134c0:	108aa604 	addi	r2,r2,10904
811134c4:	de00012e 	bgeu	sp,et,811134cc <putc+0x14>
811134c8:	003b68fa 	trap	3
811134cc:	dc000115 	stw	r16,4(sp)
811134d0:	14000017 	ldw	r16,0(r2)
811134d4:	dc400215 	stw	r17,8(sp)
811134d8:	dfc00315 	stw	ra,12(sp)
811134dc:	2023883a 	mov	r17,r4
811134e0:	80000226 	beq	r16,zero,811134ec <putc+0x34>
811134e4:	80800e17 	ldw	r2,56(r16)
811134e8:	10001a26 	beq	r2,zero,81113554 <putc+0x9c>
811134ec:	28800217 	ldw	r2,8(r5)
811134f0:	10bfffc4 	addi	r2,r2,-1
811134f4:	28800215 	stw	r2,8(r5)
811134f8:	10000b16 	blt	r2,zero,81113528 <putc+0x70>
811134fc:	28800017 	ldw	r2,0(r5)
81113500:	14400005 	stb	r17,0(r2)
81113504:	28800017 	ldw	r2,0(r5)
81113508:	10c00044 	addi	r3,r2,1
8111350c:	28c00015 	stw	r3,0(r5)
81113510:	10800003 	ldbu	r2,0(r2)
81113514:	dfc00317 	ldw	ra,12(sp)
81113518:	dc400217 	ldw	r17,8(sp)
8111351c:	dc000117 	ldw	r16,4(sp)
81113520:	dec00404 	addi	sp,sp,16
81113524:	f800283a 	ret
81113528:	28c00617 	ldw	r3,24(r5)
8111352c:	10c00e16 	blt	r2,r3,81113568 <putc+0xb0>
81113530:	28800017 	ldw	r2,0(r5)
81113534:	01000284 	movi	r4,10
81113538:	14400005 	stb	r17,0(r2)
8111353c:	28800017 	ldw	r2,0(r5)
81113540:	10c00003 	ldbu	r3,0(r2)
81113544:	193ff01e 	bne	r3,r4,81113508 <__reset+0xfb0f3508>
81113548:	280d883a 	mov	r6,r5
8111354c:	180b883a 	mov	r5,r3
81113550:	00000706 	br	81113570 <putc+0xb8>
81113554:	8009883a 	mov	r4,r16
81113558:	d9400015 	stw	r5,0(sp)
8111355c:	111be7c0 	call	8111be7c <__sinit>
81113560:	d9400017 	ldw	r5,0(sp)
81113564:	003fe106 	br	811134ec <__reset+0xfb0f34ec>
81113568:	280d883a 	mov	r6,r5
8111356c:	880b883a 	mov	r5,r17
81113570:	8009883a 	mov	r4,r16
81113574:	dfc00317 	ldw	ra,12(sp)
81113578:	dc400217 	ldw	r17,8(sp)
8111357c:	dc000117 	ldw	r16,4(sp)
81113580:	dec00404 	addi	sp,sp,16
81113584:	1119c441 	jmpi	81119c44 <__swbuf_r>

81113588 <_puts_r>:
81113588:	defff604 	addi	sp,sp,-40
8111358c:	de00012e 	bgeu	sp,et,81113594 <_puts_r+0xc>
81113590:	003b68fa 	trap	3
81113594:	dc000715 	stw	r16,28(sp)
81113598:	2021883a 	mov	r16,r4
8111359c:	2809883a 	mov	r4,r5
811135a0:	dc400815 	stw	r17,32(sp)
811135a4:	dfc00915 	stw	ra,36(sp)
811135a8:	2823883a 	mov	r17,r5
811135ac:	1113ba80 	call	81113ba8 <strlen>
811135b0:	10c00044 	addi	r3,r2,1
811135b4:	d8800115 	stw	r2,4(sp)
811135b8:	00a04534 	movhi	r2,33044
811135bc:	1080ba04 	addi	r2,r2,744
811135c0:	d8800215 	stw	r2,8(sp)
811135c4:	00800044 	movi	r2,1
811135c8:	d8800315 	stw	r2,12(sp)
811135cc:	00800084 	movi	r2,2
811135d0:	dc400015 	stw	r17,0(sp)
811135d4:	d8c00615 	stw	r3,24(sp)
811135d8:	dec00415 	stw	sp,16(sp)
811135dc:	d8800515 	stw	r2,20(sp)
811135e0:	80000226 	beq	r16,zero,811135ec <_puts_r+0x64>
811135e4:	80800e17 	ldw	r2,56(r16)
811135e8:	10001426 	beq	r2,zero,8111363c <_puts_r+0xb4>
811135ec:	81400217 	ldw	r5,8(r16)
811135f0:	2880030b 	ldhu	r2,12(r5)
811135f4:	10c8000c 	andi	r3,r2,8192
811135f8:	1800061e 	bne	r3,zero,81113614 <_puts_r+0x8c>
811135fc:	29001917 	ldw	r4,100(r5)
81113600:	00f7ffc4 	movi	r3,-8193
81113604:	10880014 	ori	r2,r2,8192
81113608:	20c6703a 	and	r3,r4,r3
8111360c:	2880030d 	sth	r2,12(r5)
81113610:	28c01915 	stw	r3,100(r5)
81113614:	d9800404 	addi	r6,sp,16
81113618:	8009883a 	mov	r4,r16
8111361c:	111c62c0 	call	8111c62c <__sfvwrite_r>
81113620:	1000091e 	bne	r2,zero,81113648 <_puts_r+0xc0>
81113624:	00800284 	movi	r2,10
81113628:	dfc00917 	ldw	ra,36(sp)
8111362c:	dc400817 	ldw	r17,32(sp)
81113630:	dc000717 	ldw	r16,28(sp)
81113634:	dec00a04 	addi	sp,sp,40
81113638:	f800283a 	ret
8111363c:	8009883a 	mov	r4,r16
81113640:	111be7c0 	call	8111be7c <__sinit>
81113644:	003fe906 	br	811135ec <__reset+0xfb0f35ec>
81113648:	00bfffc4 	movi	r2,-1
8111364c:	003ff606 	br	81113628 <__reset+0xfb0f3628>

81113650 <puts>:
81113650:	00a04534 	movhi	r2,33044
81113654:	108aa604 	addi	r2,r2,10904
81113658:	200b883a 	mov	r5,r4
8111365c:	11000017 	ldw	r4,0(r2)
81113660:	11135881 	jmpi	81113588 <_puts_r>

81113664 <lflush>:
81113664:	2080030b 	ldhu	r2,12(r4)
81113668:	00c00244 	movi	r3,9
8111366c:	1080024c 	andi	r2,r2,9
81113670:	10c00226 	beq	r2,r3,8111367c <lflush+0x18>
81113674:	0005883a 	mov	r2,zero
81113678:	f800283a 	ret
8111367c:	111bae41 	jmpi	8111bae4 <fflush>

81113680 <__srefill_r>:
81113680:	defffc04 	addi	sp,sp,-16
81113684:	de00012e 	bgeu	sp,et,8111368c <__srefill_r+0xc>
81113688:	003b68fa 	trap	3
8111368c:	dc400115 	stw	r17,4(sp)
81113690:	dc000015 	stw	r16,0(sp)
81113694:	dfc00315 	stw	ra,12(sp)
81113698:	dc800215 	stw	r18,8(sp)
8111369c:	2023883a 	mov	r17,r4
811136a0:	2821883a 	mov	r16,r5
811136a4:	20000226 	beq	r4,zero,811136b0 <__srefill_r+0x30>
811136a8:	20800e17 	ldw	r2,56(r4)
811136ac:	10003c26 	beq	r2,zero,811137a0 <__srefill_r+0x120>
811136b0:	80c0030b 	ldhu	r3,12(r16)
811136b4:	1908000c 	andi	r4,r3,8192
811136b8:	1805883a 	mov	r2,r3
811136bc:	2000071e 	bne	r4,zero,811136dc <__srefill_r+0x5c>
811136c0:	81001917 	ldw	r4,100(r16)
811136c4:	18880014 	ori	r2,r3,8192
811136c8:	00f7ffc4 	movi	r3,-8193
811136cc:	20c8703a 	and	r4,r4,r3
811136d0:	8080030d 	sth	r2,12(r16)
811136d4:	1007883a 	mov	r3,r2
811136d8:	81001915 	stw	r4,100(r16)
811136dc:	80000115 	stw	zero,4(r16)
811136e0:	1100080c 	andi	r4,r2,32
811136e4:	2000571e 	bne	r4,zero,81113844 <__srefill_r+0x1c4>
811136e8:	1100010c 	andi	r4,r2,4
811136ec:	20001f26 	beq	r4,zero,8111376c <__srefill_r+0xec>
811136f0:	81400c17 	ldw	r5,48(r16)
811136f4:	28000826 	beq	r5,zero,81113718 <__srefill_r+0x98>
811136f8:	80801004 	addi	r2,r16,64
811136fc:	28800226 	beq	r5,r2,81113708 <__srefill_r+0x88>
81113700:	8809883a 	mov	r4,r17
81113704:	111c3140 	call	8111c314 <_free_r>
81113708:	80800f17 	ldw	r2,60(r16)
8111370c:	80000c15 	stw	zero,48(r16)
81113710:	80800115 	stw	r2,4(r16)
81113714:	1000391e 	bne	r2,zero,811137fc <__srefill_r+0x17c>
81113718:	80800417 	ldw	r2,16(r16)
8111371c:	10004b26 	beq	r2,zero,8111384c <__srefill_r+0x1cc>
81113720:	8480030b 	ldhu	r18,12(r16)
81113724:	908000cc 	andi	r2,r18,3
81113728:	10001f1e 	bne	r2,zero,811137a8 <__srefill_r+0x128>
8111372c:	81800417 	ldw	r6,16(r16)
81113730:	80800817 	ldw	r2,32(r16)
81113734:	81c00517 	ldw	r7,20(r16)
81113738:	81400717 	ldw	r5,28(r16)
8111373c:	81800015 	stw	r6,0(r16)
81113740:	8809883a 	mov	r4,r17
81113744:	103ee83a 	callr	r2
81113748:	80800115 	stw	r2,4(r16)
8111374c:	00800e0e 	bge	zero,r2,81113788 <__srefill_r+0x108>
81113750:	0005883a 	mov	r2,zero
81113754:	dfc00317 	ldw	ra,12(sp)
81113758:	dc800217 	ldw	r18,8(sp)
8111375c:	dc400117 	ldw	r17,4(sp)
81113760:	dc000017 	ldw	r16,0(sp)
81113764:	dec00404 	addi	sp,sp,16
81113768:	f800283a 	ret
8111376c:	1100040c 	andi	r4,r2,16
81113770:	20003026 	beq	r4,zero,81113834 <__srefill_r+0x1b4>
81113774:	1080020c 	andi	r2,r2,8
81113778:	1000241e 	bne	r2,zero,8111380c <__srefill_r+0x18c>
8111377c:	18c00114 	ori	r3,r3,4
81113780:	80c0030d 	sth	r3,12(r16)
81113784:	003fe406 	br	81113718 <__reset+0xfb0f3718>
81113788:	80c0030b 	ldhu	r3,12(r16)
8111378c:	1000161e 	bne	r2,zero,811137e8 <__srefill_r+0x168>
81113790:	18c00814 	ori	r3,r3,32
81113794:	00bfffc4 	movi	r2,-1
81113798:	80c0030d 	sth	r3,12(r16)
8111379c:	003fed06 	br	81113754 <__reset+0xfb0f3754>
811137a0:	111be7c0 	call	8111be7c <__sinit>
811137a4:	003fc206 	br	811136b0 <__reset+0xfb0f36b0>
811137a8:	00a04534 	movhi	r2,33044
811137ac:	108aa504 	addi	r2,r2,10900
811137b0:	11000017 	ldw	r4,0(r2)
811137b4:	01604474 	movhi	r5,33041
811137b8:	00800044 	movi	r2,1
811137bc:	294d9904 	addi	r5,r5,13924
811137c0:	8080030d 	sth	r2,12(r16)
811137c4:	111caf00 	call	8111caf0 <_fwalk>
811137c8:	00800244 	movi	r2,9
811137cc:	8480030d 	sth	r18,12(r16)
811137d0:	9480024c 	andi	r18,r18,9
811137d4:	90bfd51e 	bne	r18,r2,8111372c <__reset+0xfb0f372c>
811137d8:	800b883a 	mov	r5,r16
811137dc:	8809883a 	mov	r4,r17
811137e0:	111b85c0 	call	8111b85c <__sflush_r>
811137e4:	003fd106 	br	8111372c <__reset+0xfb0f372c>
811137e8:	18c01014 	ori	r3,r3,64
811137ec:	80000115 	stw	zero,4(r16)
811137f0:	00bfffc4 	movi	r2,-1
811137f4:	80c0030d 	sth	r3,12(r16)
811137f8:	003fd606 	br	81113754 <__reset+0xfb0f3754>
811137fc:	80c00e17 	ldw	r3,56(r16)
81113800:	0005883a 	mov	r2,zero
81113804:	80c00015 	stw	r3,0(r16)
81113808:	003fd206 	br	81113754 <__reset+0xfb0f3754>
8111380c:	800b883a 	mov	r5,r16
81113810:	8809883a 	mov	r4,r17
81113814:	111ba800 	call	8111ba80 <_fflush_r>
81113818:	10000a1e 	bne	r2,zero,81113844 <__srefill_r+0x1c4>
8111381c:	8080030b 	ldhu	r2,12(r16)
81113820:	00fffdc4 	movi	r3,-9
81113824:	80000215 	stw	zero,8(r16)
81113828:	1886703a 	and	r3,r3,r2
8111382c:	80000615 	stw	zero,24(r16)
81113830:	003fd206 	br	8111377c <__reset+0xfb0f377c>
81113834:	00800244 	movi	r2,9
81113838:	88800015 	stw	r2,0(r17)
8111383c:	18c01014 	ori	r3,r3,64
81113840:	80c0030d 	sth	r3,12(r16)
81113844:	00bfffc4 	movi	r2,-1
81113848:	003fc206 	br	81113754 <__reset+0xfb0f3754>
8111384c:	800b883a 	mov	r5,r16
81113850:	8809883a 	mov	r4,r17
81113854:	11126dc0 	call	811126dc <__smakebuf_r>
81113858:	003fb106 	br	81113720 <__reset+0xfb0f3720>

8111385c <_sbrk_r>:
8111385c:	defffd04 	addi	sp,sp,-12
81113860:	de00012e 	bgeu	sp,et,81113868 <_sbrk_r+0xc>
81113864:	003b68fa 	trap	3
81113868:	dc000015 	stw	r16,0(sp)
8111386c:	04204534 	movhi	r16,33044
81113870:	dc400115 	stw	r17,4(sp)
81113874:	840b0204 	addi	r16,r16,11272
81113878:	2023883a 	mov	r17,r4
8111387c:	2809883a 	mov	r4,r5
81113880:	dfc00215 	stw	ra,8(sp)
81113884:	80000015 	stw	zero,0(r16)
81113888:	112906c0 	call	8112906c <sbrk>
8111388c:	00ffffc4 	movi	r3,-1
81113890:	10c00526 	beq	r2,r3,811138a8 <_sbrk_r+0x4c>
81113894:	dfc00217 	ldw	ra,8(sp)
81113898:	dc400117 	ldw	r17,4(sp)
8111389c:	dc000017 	ldw	r16,0(sp)
811138a0:	dec00304 	addi	sp,sp,12
811138a4:	f800283a 	ret
811138a8:	80c00017 	ldw	r3,0(r16)
811138ac:	183ff926 	beq	r3,zero,81113894 <__reset+0xfb0f3894>
811138b0:	88c00015 	stw	r3,0(r17)
811138b4:	003ff706 	br	81113894 <__reset+0xfb0f3894>

811138b8 <scanf>:
811138b8:	defffc04 	addi	sp,sp,-16
811138bc:	de00012e 	bgeu	sp,et,811138c4 <scanf+0xc>
811138c0:	003b68fa 	trap	3
811138c4:	dfc00015 	stw	ra,0(sp)
811138c8:	d9400115 	stw	r5,4(sp)
811138cc:	d9800215 	stw	r6,8(sp)
811138d0:	d9c00315 	stw	r7,12(sp)
811138d4:	00a04534 	movhi	r2,33044
811138d8:	108aa604 	addi	r2,r2,10904
811138dc:	200d883a 	mov	r6,r4
811138e0:	11000017 	ldw	r4,0(r2)
811138e4:	d9c00104 	addi	r7,sp,4
811138e8:	21400117 	ldw	r5,4(r4)
811138ec:	1119bf00 	call	81119bf0 <_vfscanf_r>
811138f0:	dfc00017 	ldw	ra,0(sp)
811138f4:	dec00404 	addi	sp,sp,16
811138f8:	f800283a 	ret

811138fc <_scanf_r>:
811138fc:	defffd04 	addi	sp,sp,-12
81113900:	2805883a 	mov	r2,r5
81113904:	de00012e 	bgeu	sp,et,8111390c <_scanf_r+0x10>
81113908:	003b68fa 	trap	3
8111390c:	dfc00015 	stw	ra,0(sp)
81113910:	d9800115 	stw	r6,4(sp)
81113914:	d9c00215 	stw	r7,8(sp)
81113918:	21400117 	ldw	r5,4(r4)
8111391c:	d9c00104 	addi	r7,sp,4
81113920:	100d883a 	mov	r6,r2
81113924:	1119bf00 	call	81119bf0 <_vfscanf_r>
81113928:	dfc00017 	ldw	ra,0(sp)
8111392c:	dec00304 	addi	sp,sp,12
81113930:	f800283a 	ret

81113934 <_sprintf_r>:
81113934:	deffe404 	addi	sp,sp,-112
81113938:	2807883a 	mov	r3,r5
8111393c:	de00012e 	bgeu	sp,et,81113944 <_sprintf_r+0x10>
81113940:	003b68fa 	trap	3
81113944:	dfc01a15 	stw	ra,104(sp)
81113948:	d9c01b15 	stw	r7,108(sp)
8111394c:	00a00034 	movhi	r2,32768
81113950:	10bfffc4 	addi	r2,r2,-1
81113954:	02008204 	movi	r8,520
81113958:	d8800215 	stw	r2,8(sp)
8111395c:	d8800515 	stw	r2,20(sp)
81113960:	d9c01b04 	addi	r7,sp,108
81113964:	d80b883a 	mov	r5,sp
81113968:	00bfffc4 	movi	r2,-1
8111396c:	d8c00015 	stw	r3,0(sp)
81113970:	d8c00415 	stw	r3,16(sp)
81113974:	da00030d 	sth	r8,12(sp)
81113978:	d880038d 	sth	r2,14(sp)
8111397c:	1113ee00 	call	81113ee0 <___svfprintf_internal_r>
81113980:	d8c00017 	ldw	r3,0(sp)
81113984:	18000005 	stb	zero,0(r3)
81113988:	dfc01a17 	ldw	ra,104(sp)
8111398c:	dec01c04 	addi	sp,sp,112
81113990:	f800283a 	ret

81113994 <sprintf>:
81113994:	deffe304 	addi	sp,sp,-116
81113998:	2007883a 	mov	r3,r4
8111399c:	de00012e 	bgeu	sp,et,811139a4 <sprintf+0x10>
811139a0:	003b68fa 	trap	3
811139a4:	dfc01a15 	stw	ra,104(sp)
811139a8:	d9801b15 	stw	r6,108(sp)
811139ac:	d9c01c15 	stw	r7,112(sp)
811139b0:	01204534 	movhi	r4,33044
811139b4:	210aa604 	addi	r4,r4,10904
811139b8:	21000017 	ldw	r4,0(r4)
811139bc:	00a00034 	movhi	r2,32768
811139c0:	10bfffc4 	addi	r2,r2,-1
811139c4:	280d883a 	mov	r6,r5
811139c8:	02008204 	movi	r8,520
811139cc:	d8800215 	stw	r2,8(sp)
811139d0:	d8800515 	stw	r2,20(sp)
811139d4:	d9c01b04 	addi	r7,sp,108
811139d8:	d80b883a 	mov	r5,sp
811139dc:	00bfffc4 	movi	r2,-1
811139e0:	d8c00015 	stw	r3,0(sp)
811139e4:	d8c00415 	stw	r3,16(sp)
811139e8:	da00030d 	sth	r8,12(sp)
811139ec:	d880038d 	sth	r2,14(sp)
811139f0:	1113ee00 	call	81113ee0 <___svfprintf_internal_r>
811139f4:	d8c00017 	ldw	r3,0(sp)
811139f8:	18000005 	stb	zero,0(r3)
811139fc:	dfc01a17 	ldw	ra,104(sp)
81113a00:	dec01d04 	addi	sp,sp,116
81113a04:	f800283a 	ret

81113a08 <__sread>:
81113a08:	defffe04 	addi	sp,sp,-8
81113a0c:	de00012e 	bgeu	sp,et,81113a14 <__sread+0xc>
81113a10:	003b68fa 	trap	3
81113a14:	dc000015 	stw	r16,0(sp)
81113a18:	2821883a 	mov	r16,r5
81113a1c:	2940038f 	ldh	r5,14(r5)
81113a20:	dfc00115 	stw	ra,4(sp)
81113a24:	111e3400 	call	8111e340 <_read_r>
81113a28:	10000716 	blt	r2,zero,81113a48 <__sread+0x40>
81113a2c:	80c01417 	ldw	r3,80(r16)
81113a30:	1887883a 	add	r3,r3,r2
81113a34:	80c01415 	stw	r3,80(r16)
81113a38:	dfc00117 	ldw	ra,4(sp)
81113a3c:	dc000017 	ldw	r16,0(sp)
81113a40:	dec00204 	addi	sp,sp,8
81113a44:	f800283a 	ret
81113a48:	80c0030b 	ldhu	r3,12(r16)
81113a4c:	18fbffcc 	andi	r3,r3,61439
81113a50:	80c0030d 	sth	r3,12(r16)
81113a54:	dfc00117 	ldw	ra,4(sp)
81113a58:	dc000017 	ldw	r16,0(sp)
81113a5c:	dec00204 	addi	sp,sp,8
81113a60:	f800283a 	ret

81113a64 <__seofread>:
81113a64:	0005883a 	mov	r2,zero
81113a68:	f800283a 	ret

81113a6c <__swrite>:
81113a6c:	defffb04 	addi	sp,sp,-20
81113a70:	de00012e 	bgeu	sp,et,81113a78 <__swrite+0xc>
81113a74:	003b68fa 	trap	3
81113a78:	2880030b 	ldhu	r2,12(r5)
81113a7c:	dcc00315 	stw	r19,12(sp)
81113a80:	dc800215 	stw	r18,8(sp)
81113a84:	dc400115 	stw	r17,4(sp)
81113a88:	dc000015 	stw	r16,0(sp)
81113a8c:	dfc00415 	stw	ra,16(sp)
81113a90:	10c0400c 	andi	r3,r2,256
81113a94:	2821883a 	mov	r16,r5
81113a98:	2023883a 	mov	r17,r4
81113a9c:	3025883a 	mov	r18,r6
81113aa0:	3827883a 	mov	r19,r7
81113aa4:	18000526 	beq	r3,zero,81113abc <__swrite+0x50>
81113aa8:	2940038f 	ldh	r5,14(r5)
81113aac:	01c00084 	movi	r7,2
81113ab0:	000d883a 	mov	r6,zero
81113ab4:	111cdf80 	call	8111cdf8 <_lseek_r>
81113ab8:	8080030b 	ldhu	r2,12(r16)
81113abc:	8140038f 	ldh	r5,14(r16)
81113ac0:	10bbffcc 	andi	r2,r2,61439
81113ac4:	980f883a 	mov	r7,r19
81113ac8:	900d883a 	mov	r6,r18
81113acc:	8809883a 	mov	r4,r17
81113ad0:	8080030d 	sth	r2,12(r16)
81113ad4:	dfc00417 	ldw	ra,16(sp)
81113ad8:	dcc00317 	ldw	r19,12(sp)
81113adc:	dc800217 	ldw	r18,8(sp)
81113ae0:	dc400117 	ldw	r17,4(sp)
81113ae4:	dc000017 	ldw	r16,0(sp)
81113ae8:	dec00504 	addi	sp,sp,20
81113aec:	1119da41 	jmpi	81119da4 <_write_r>

81113af0 <__sseek>:
81113af0:	defffe04 	addi	sp,sp,-8
81113af4:	de00012e 	bgeu	sp,et,81113afc <__sseek+0xc>
81113af8:	003b68fa 	trap	3
81113afc:	dc000015 	stw	r16,0(sp)
81113b00:	2821883a 	mov	r16,r5
81113b04:	2940038f 	ldh	r5,14(r5)
81113b08:	dfc00115 	stw	ra,4(sp)
81113b0c:	111cdf80 	call	8111cdf8 <_lseek_r>
81113b10:	00ffffc4 	movi	r3,-1
81113b14:	10c00826 	beq	r2,r3,81113b38 <__sseek+0x48>
81113b18:	80c0030b 	ldhu	r3,12(r16)
81113b1c:	80801415 	stw	r2,80(r16)
81113b20:	18c40014 	ori	r3,r3,4096
81113b24:	80c0030d 	sth	r3,12(r16)
81113b28:	dfc00117 	ldw	ra,4(sp)
81113b2c:	dc000017 	ldw	r16,0(sp)
81113b30:	dec00204 	addi	sp,sp,8
81113b34:	f800283a 	ret
81113b38:	80c0030b 	ldhu	r3,12(r16)
81113b3c:	18fbffcc 	andi	r3,r3,61439
81113b40:	80c0030d 	sth	r3,12(r16)
81113b44:	dfc00117 	ldw	ra,4(sp)
81113b48:	dc000017 	ldw	r16,0(sp)
81113b4c:	dec00204 	addi	sp,sp,8
81113b50:	f800283a 	ret

81113b54 <__sclose>:
81113b54:	2940038f 	ldh	r5,14(r5)
81113b58:	1119f681 	jmpi	81119f68 <_close_r>

81113b5c <strcspn>:
81113b5c:	21c00007 	ldb	r7,0(r4)
81113b60:	38000f26 	beq	r7,zero,81113ba0 <strcspn+0x44>
81113b64:	2a000007 	ldb	r8,0(r5)
81113b68:	2005883a 	mov	r2,r4
81113b6c:	40000726 	beq	r8,zero,81113b8c <strcspn+0x30>
81113b70:	3a000926 	beq	r7,r8,81113b98 <strcspn+0x3c>
81113b74:	2807883a 	mov	r3,r5
81113b78:	00000106 	br	81113b80 <strcspn+0x24>
81113b7c:	31c00626 	beq	r6,r7,81113b98 <strcspn+0x3c>
81113b80:	18c00044 	addi	r3,r3,1
81113b84:	19800007 	ldb	r6,0(r3)
81113b88:	303ffc1e 	bne	r6,zero,81113b7c <__reset+0xfb0f3b7c>
81113b8c:	10800044 	addi	r2,r2,1
81113b90:	11c00007 	ldb	r7,0(r2)
81113b94:	383ff51e 	bne	r7,zero,81113b6c <__reset+0xfb0f3b6c>
81113b98:	1105c83a 	sub	r2,r2,r4
81113b9c:	f800283a 	ret
81113ba0:	0005883a 	mov	r2,zero
81113ba4:	f800283a 	ret

81113ba8 <strlen>:
81113ba8:	208000cc 	andi	r2,r4,3
81113bac:	10002026 	beq	r2,zero,81113c30 <strlen+0x88>
81113bb0:	20800007 	ldb	r2,0(r4)
81113bb4:	10002026 	beq	r2,zero,81113c38 <strlen+0x90>
81113bb8:	2005883a 	mov	r2,r4
81113bbc:	00000206 	br	81113bc8 <strlen+0x20>
81113bc0:	10c00007 	ldb	r3,0(r2)
81113bc4:	18001826 	beq	r3,zero,81113c28 <strlen+0x80>
81113bc8:	10800044 	addi	r2,r2,1
81113bcc:	10c000cc 	andi	r3,r2,3
81113bd0:	183ffb1e 	bne	r3,zero,81113bc0 <__reset+0xfb0f3bc0>
81113bd4:	10c00017 	ldw	r3,0(r2)
81113bd8:	01ffbff4 	movhi	r7,65279
81113bdc:	39ffbfc4 	addi	r7,r7,-257
81113be0:	00ca303a 	nor	r5,zero,r3
81113be4:	01a02074 	movhi	r6,32897
81113be8:	19c7883a 	add	r3,r3,r7
81113bec:	31a02004 	addi	r6,r6,-32640
81113bf0:	1946703a 	and	r3,r3,r5
81113bf4:	1986703a 	and	r3,r3,r6
81113bf8:	1800091e 	bne	r3,zero,81113c20 <strlen+0x78>
81113bfc:	10800104 	addi	r2,r2,4
81113c00:	10c00017 	ldw	r3,0(r2)
81113c04:	19cb883a 	add	r5,r3,r7
81113c08:	00c6303a 	nor	r3,zero,r3
81113c0c:	28c6703a 	and	r3,r5,r3
81113c10:	1986703a 	and	r3,r3,r6
81113c14:	183ff926 	beq	r3,zero,81113bfc <__reset+0xfb0f3bfc>
81113c18:	00000106 	br	81113c20 <strlen+0x78>
81113c1c:	10800044 	addi	r2,r2,1
81113c20:	10c00007 	ldb	r3,0(r2)
81113c24:	183ffd1e 	bne	r3,zero,81113c1c <__reset+0xfb0f3c1c>
81113c28:	1105c83a 	sub	r2,r2,r4
81113c2c:	f800283a 	ret
81113c30:	2005883a 	mov	r2,r4
81113c34:	003fe706 	br	81113bd4 <__reset+0xfb0f3bd4>
81113c38:	0005883a 	mov	r2,zero
81113c3c:	f800283a 	ret

81113c40 <strnlen>:
81113c40:	28000e26 	beq	r5,zero,81113c7c <strnlen+0x3c>
81113c44:	20800007 	ldb	r2,0(r4)
81113c48:	10000c26 	beq	r2,zero,81113c7c <strnlen+0x3c>
81113c4c:	20c00044 	addi	r3,r4,1
81113c50:	214b883a 	add	r5,r4,r5
81113c54:	28c00526 	beq	r5,r3,81113c6c <strnlen+0x2c>
81113c58:	19800007 	ldb	r6,0(r3)
81113c5c:	19c00044 	addi	r7,r3,1
81113c60:	30000426 	beq	r6,zero,81113c74 <strnlen+0x34>
81113c64:	3807883a 	mov	r3,r7
81113c68:	28fffb1e 	bne	r5,r3,81113c58 <__reset+0xfb0f3c58>
81113c6c:	2905c83a 	sub	r2,r5,r4
81113c70:	f800283a 	ret
81113c74:	1905c83a 	sub	r2,r3,r4
81113c78:	f800283a 	ret
81113c7c:	0005883a 	mov	r2,zero
81113c80:	f800283a 	ret

81113c84 <_strtol_r>:
81113c84:	00a04534 	movhi	r2,33044
81113c88:	defff404 	addi	sp,sp,-48
81113c8c:	108aa404 	addi	r2,r2,10896
81113c90:	de00012e 	bgeu	sp,et,81113c98 <_strtol_r+0x14>
81113c94:	003b68fa 	trap	3
81113c98:	dd400715 	stw	r21,28(sp)
81113c9c:	15400017 	ldw	r21,0(r2)
81113ca0:	dd800815 	stw	r22,32(sp)
81113ca4:	dd000615 	stw	r20,24(sp)
81113ca8:	dcc00515 	stw	r19,20(sp)
81113cac:	d9000015 	stw	r4,0(sp)
81113cb0:	dfc00b15 	stw	ra,44(sp)
81113cb4:	df000a15 	stw	fp,40(sp)
81113cb8:	ddc00915 	stw	r23,36(sp)
81113cbc:	dc800415 	stw	r18,16(sp)
81113cc0:	dc400315 	stw	r17,12(sp)
81113cc4:	dc000215 	stw	r16,8(sp)
81113cc8:	2829883a 	mov	r20,r5
81113ccc:	3027883a 	mov	r19,r6
81113cd0:	382d883a 	mov	r22,r7
81113cd4:	2809883a 	mov	r4,r5
81113cd8:	24000003 	ldbu	r16,0(r4)
81113cdc:	24400044 	addi	r17,r4,1
81113ce0:	2007883a 	mov	r3,r4
81113ce4:	ac05883a 	add	r2,r21,r16
81113ce8:	10800043 	ldbu	r2,1(r2)
81113cec:	8809883a 	mov	r4,r17
81113cf0:	1080020c 	andi	r2,r2,8
81113cf4:	103ff81e 	bne	r2,zero,81113cd8 <__reset+0xfb0f3cd8>
81113cf8:	00800b44 	movi	r2,45
81113cfc:	80805826 	beq	r16,r2,81113e60 <_strtol_r+0x1dc>
81113d00:	00800ac4 	movi	r2,43
81113d04:	80805a26 	beq	r16,r2,81113e70 <_strtol_r+0x1ec>
81113d08:	0039883a 	mov	fp,zero
81113d0c:	b0004426 	beq	r22,zero,81113e20 <_strtol_r+0x19c>
81113d10:	00800404 	movi	r2,16
81113d14:	b0806026 	beq	r22,r2,81113e98 <_strtol_r+0x214>
81113d18:	b02f883a 	mov	r23,r22
81113d1c:	00a00034 	movhi	r2,32768
81113d20:	e025003a 	cmpeq	r18,fp,zero
81113d24:	14a5c83a 	sub	r18,r2,r18
81113d28:	b80b883a 	mov	r5,r23
81113d2c:	9009883a 	mov	r4,r18
81113d30:	11257000 	call	81125700 <__umodsi3>
81113d34:	b80b883a 	mov	r5,r23
81113d38:	9009883a 	mov	r4,r18
81113d3c:	d8800115 	stw	r2,4(sp)
81113d40:	112569c0 	call	8112569c <__udivsi3>
81113d44:	ac07883a 	add	r3,r21,r16
81113d48:	18c00043 	ldbu	r3,1(r3)
81113d4c:	880b883a 	mov	r5,r17
81113d50:	000d883a 	mov	r6,zero
81113d54:	1a00010c 	andi	r8,r3,4
81113d58:	0009883a 	mov	r4,zero
81113d5c:	02800044 	movi	r10,1
81113d60:	027fffc4 	movi	r9,-1
81113d64:	d9c00117 	ldw	r7,4(sp)
81113d68:	40000e26 	beq	r8,zero,81113da4 <_strtol_r+0x120>
81113d6c:	843ff404 	addi	r16,r16,-48
81113d70:	8580120e 	bge	r16,r22,81113dbc <_strtol_r+0x138>
81113d74:	32400526 	beq	r6,r9,81113d8c <_strtol_r+0x108>
81113d78:	11002536 	bltu	r2,r4,81113e10 <_strtol_r+0x18c>
81113d7c:	20802326 	beq	r4,r2,81113e0c <_strtol_r+0x188>
81113d80:	25c9383a 	mul	r4,r4,r23
81113d84:	01800044 	movi	r6,1
81113d88:	8109883a 	add	r4,r16,r4
81113d8c:	2c000003 	ldbu	r16,0(r5)
81113d90:	29400044 	addi	r5,r5,1
81113d94:	ac07883a 	add	r3,r21,r16
81113d98:	18c00043 	ldbu	r3,1(r3)
81113d9c:	1a00010c 	andi	r8,r3,4
81113da0:	403ff21e 	bne	r8,zero,81113d6c <__reset+0xfb0f3d6c>
81113da4:	18c000cc 	andi	r3,r3,3
81113da8:	18000426 	beq	r3,zero,81113dbc <_strtol_r+0x138>
81113dac:	1a801a26 	beq	r3,r10,81113e18 <_strtol_r+0x194>
81113db0:	00c015c4 	movi	r3,87
81113db4:	80e1c83a 	sub	r16,r16,r3
81113db8:	85bfee16 	blt	r16,r22,81113d74 <__reset+0xfb0f3d74>
81113dbc:	00bfffc4 	movi	r2,-1
81113dc0:	30801e26 	beq	r6,r2,81113e3c <_strtol_r+0x1b8>
81113dc4:	e0001b1e 	bne	fp,zero,81113e34 <_strtol_r+0x1b0>
81113dc8:	2005883a 	mov	r2,r4
81113dcc:	98000326 	beq	r19,zero,81113ddc <_strtol_r+0x158>
81113dd0:	3000211e 	bne	r6,zero,81113e58 <_strtol_r+0x1d4>
81113dd4:	a00b883a 	mov	r5,r20
81113dd8:	99400015 	stw	r5,0(r19)
81113ddc:	dfc00b17 	ldw	ra,44(sp)
81113de0:	df000a17 	ldw	fp,40(sp)
81113de4:	ddc00917 	ldw	r23,36(sp)
81113de8:	dd800817 	ldw	r22,32(sp)
81113dec:	dd400717 	ldw	r21,28(sp)
81113df0:	dd000617 	ldw	r20,24(sp)
81113df4:	dcc00517 	ldw	r19,20(sp)
81113df8:	dc800417 	ldw	r18,16(sp)
81113dfc:	dc400317 	ldw	r17,12(sp)
81113e00:	dc000217 	ldw	r16,8(sp)
81113e04:	dec00c04 	addi	sp,sp,48
81113e08:	f800283a 	ret
81113e0c:	3c3fdc0e 	bge	r7,r16,81113d80 <__reset+0xfb0f3d80>
81113e10:	01bfffc4 	movi	r6,-1
81113e14:	003fdd06 	br	81113d8c <__reset+0xfb0f3d8c>
81113e18:	00c00dc4 	movi	r3,55
81113e1c:	003fe506 	br	81113db4 <__reset+0xfb0f3db4>
81113e20:	00800c04 	movi	r2,48
81113e24:	80801626 	beq	r16,r2,81113e80 <_strtol_r+0x1fc>
81113e28:	05800284 	movi	r22,10
81113e2c:	b02f883a 	mov	r23,r22
81113e30:	003fba06 	br	81113d1c <__reset+0xfb0f3d1c>
81113e34:	0109c83a 	sub	r4,zero,r4
81113e38:	003fe306 	br	81113dc8 <__reset+0xfb0f3dc8>
81113e3c:	d9000017 	ldw	r4,0(sp)
81113e40:	00c00884 	movi	r3,34
81113e44:	e005003a 	cmpeq	r2,fp,zero
81113e48:	20c00015 	stw	r3,0(r4)
81113e4c:	00e00034 	movhi	r3,32768
81113e50:	1885c83a 	sub	r2,r3,r2
81113e54:	983fe126 	beq	r19,zero,81113ddc <__reset+0xfb0f3ddc>
81113e58:	297fffc4 	addi	r5,r5,-1
81113e5c:	003fde06 	br	81113dd8 <__reset+0xfb0f3dd8>
81113e60:	1c400084 	addi	r17,r3,2
81113e64:	1c000043 	ldbu	r16,1(r3)
81113e68:	07000044 	movi	fp,1
81113e6c:	003fa706 	br	81113d0c <__reset+0xfb0f3d0c>
81113e70:	1c400084 	addi	r17,r3,2
81113e74:	1c000043 	ldbu	r16,1(r3)
81113e78:	0039883a 	mov	fp,zero
81113e7c:	003fa306 	br	81113d0c <__reset+0xfb0f3d0c>
81113e80:	88800003 	ldbu	r2,0(r17)
81113e84:	00c01604 	movi	r3,88
81113e88:	108037cc 	andi	r2,r2,223
81113e8c:	10c00826 	beq	r2,r3,81113eb0 <_strtol_r+0x22c>
81113e90:	05800204 	movi	r22,8
81113e94:	003fa006 	br	81113d18 <__reset+0xfb0f3d18>
81113e98:	00800c04 	movi	r2,48
81113e9c:	80bf9e1e 	bne	r16,r2,81113d18 <__reset+0xfb0f3d18>
81113ea0:	88800003 	ldbu	r2,0(r17)
81113ea4:	00c01604 	movi	r3,88
81113ea8:	108037cc 	andi	r2,r2,223
81113eac:	10ff9a1e 	bne	r2,r3,81113d18 <__reset+0xfb0f3d18>
81113eb0:	05c00404 	movi	r23,16
81113eb4:	8c000043 	ldbu	r16,1(r17)
81113eb8:	b82d883a 	mov	r22,r23
81113ebc:	8c400084 	addi	r17,r17,2
81113ec0:	003f9606 	br	81113d1c <__reset+0xfb0f3d1c>

81113ec4 <strtol>:
81113ec4:	00a04534 	movhi	r2,33044
81113ec8:	108aa604 	addi	r2,r2,10904
81113ecc:	300f883a 	mov	r7,r6
81113ed0:	280d883a 	mov	r6,r5
81113ed4:	200b883a 	mov	r5,r4
81113ed8:	11000017 	ldw	r4,0(r2)
81113edc:	1113c841 	jmpi	81113c84 <_strtol_r>

81113ee0 <___svfprintf_internal_r>:
81113ee0:	deffb704 	addi	sp,sp,-292
81113ee4:	de00012e 	bgeu	sp,et,81113eec <___svfprintf_internal_r+0xc>
81113ee8:	003b68fa 	trap	3
81113eec:	dfc04815 	stw	ra,288(sp)
81113ef0:	ddc04615 	stw	r23,280(sp)
81113ef4:	d9402c15 	stw	r5,176(sp)
81113ef8:	d9003915 	stw	r4,228(sp)
81113efc:	302f883a 	mov	r23,r6
81113f00:	d9c02d15 	stw	r7,180(sp)
81113f04:	df004715 	stw	fp,284(sp)
81113f08:	dd804515 	stw	r22,276(sp)
81113f0c:	dd404415 	stw	r21,272(sp)
81113f10:	dd004315 	stw	r20,268(sp)
81113f14:	dcc04215 	stw	r19,264(sp)
81113f18:	dc804115 	stw	r18,260(sp)
81113f1c:	dc404015 	stw	r17,256(sp)
81113f20:	dc003f15 	stw	r16,252(sp)
81113f24:	111cdc80 	call	8111cdc8 <_localeconv_r>
81113f28:	10800017 	ldw	r2,0(r2)
81113f2c:	1009883a 	mov	r4,r2
81113f30:	d8803415 	stw	r2,208(sp)
81113f34:	1113ba80 	call	81113ba8 <strlen>
81113f38:	d8c02c17 	ldw	r3,176(sp)
81113f3c:	d8803815 	stw	r2,224(sp)
81113f40:	1880030b 	ldhu	r2,12(r3)
81113f44:	1080200c 	andi	r2,r2,128
81113f48:	10000226 	beq	r2,zero,81113f54 <___svfprintf_internal_r+0x74>
81113f4c:	18800417 	ldw	r2,16(r3)
81113f50:	10067f26 	beq	r2,zero,81115950 <___svfprintf_internal_r+0x1a70>
81113f54:	dcc03917 	ldw	r19,228(sp)
81113f58:	d8c00404 	addi	r3,sp,16
81113f5c:	05604534 	movhi	r21,33044
81113f60:	d9001e04 	addi	r4,sp,120
81113f64:	ad40cb84 	addi	r21,r21,814
81113f68:	d8c01e15 	stw	r3,120(sp)
81113f6c:	d8002015 	stw	zero,128(sp)
81113f70:	d8001f15 	stw	zero,124(sp)
81113f74:	d8003315 	stw	zero,204(sp)
81113f78:	d8003615 	stw	zero,216(sp)
81113f7c:	d8003715 	stw	zero,220(sp)
81113f80:	1811883a 	mov	r8,r3
81113f84:	d8003a15 	stw	zero,232(sp)
81113f88:	d8003b15 	stw	zero,236(sp)
81113f8c:	d8002f15 	stw	zero,188(sp)
81113f90:	d9002815 	stw	r4,160(sp)
81113f94:	b8800007 	ldb	r2,0(r23)
81113f98:	10026726 	beq	r2,zero,81114938 <___svfprintf_internal_r+0xa58>
81113f9c:	00c00944 	movi	r3,37
81113fa0:	b821883a 	mov	r16,r23
81113fa4:	10c0021e 	bne	r2,r3,81113fb0 <___svfprintf_internal_r+0xd0>
81113fa8:	00001406 	br	81113ffc <___svfprintf_internal_r+0x11c>
81113fac:	10c00326 	beq	r2,r3,81113fbc <___svfprintf_internal_r+0xdc>
81113fb0:	84000044 	addi	r16,r16,1
81113fb4:	80800007 	ldb	r2,0(r16)
81113fb8:	103ffc1e 	bne	r2,zero,81113fac <__reset+0xfb0f3fac>
81113fbc:	85e3c83a 	sub	r17,r16,r23
81113fc0:	88000e26 	beq	r17,zero,81113ffc <___svfprintf_internal_r+0x11c>
81113fc4:	d8c02017 	ldw	r3,128(sp)
81113fc8:	d8801f17 	ldw	r2,124(sp)
81113fcc:	45c00015 	stw	r23,0(r8)
81113fd0:	1c47883a 	add	r3,r3,r17
81113fd4:	10800044 	addi	r2,r2,1
81113fd8:	d8c02015 	stw	r3,128(sp)
81113fdc:	44400115 	stw	r17,4(r8)
81113fe0:	d8801f15 	stw	r2,124(sp)
81113fe4:	00c001c4 	movi	r3,7
81113fe8:	18809716 	blt	r3,r2,81114248 <___svfprintf_internal_r+0x368>
81113fec:	42000204 	addi	r8,r8,8
81113ff0:	d9402f17 	ldw	r5,188(sp)
81113ff4:	2c4b883a 	add	r5,r5,r17
81113ff8:	d9402f15 	stw	r5,188(sp)
81113ffc:	80800007 	ldb	r2,0(r16)
81114000:	10009826 	beq	r2,zero,81114264 <___svfprintf_internal_r+0x384>
81114004:	84400047 	ldb	r17,1(r16)
81114008:	00bfffc4 	movi	r2,-1
8111400c:	85c00044 	addi	r23,r16,1
81114010:	d8002785 	stb	zero,158(sp)
81114014:	0007883a 	mov	r3,zero
81114018:	000f883a 	mov	r7,zero
8111401c:	d8802915 	stw	r2,164(sp)
81114020:	d8003115 	stw	zero,196(sp)
81114024:	0025883a 	mov	r18,zero
81114028:	01401604 	movi	r5,88
8111402c:	01800244 	movi	r6,9
81114030:	02800a84 	movi	r10,42
81114034:	02401b04 	movi	r9,108
81114038:	bdc00044 	addi	r23,r23,1
8111403c:	88bff804 	addi	r2,r17,-32
81114040:	2882f036 	bltu	r5,r2,81114c04 <___svfprintf_internal_r+0xd24>
81114044:	100490ba 	slli	r2,r2,2
81114048:	01204474 	movhi	r4,33041
8111404c:	21101704 	addi	r4,r4,16476
81114050:	1105883a 	add	r2,r2,r4
81114054:	10800017 	ldw	r2,0(r2)
81114058:	1000683a 	jmp	r2
8111405c:	81114b6c 	andhi	r4,r16,17709
81114060:	81114c04 	addi	r4,r16,17712
81114064:	81114c04 	addi	r4,r16,17712
81114068:	81114b60 	cmpeqi	r4,r16,17709
8111406c:	81114c04 	addi	r4,r16,17712
81114070:	81114c04 	addi	r4,r16,17712
81114074:	81114c04 	addi	r4,r16,17712
81114078:	81114c04 	addi	r4,r16,17712
8111407c:	81114c04 	addi	r4,r16,17712
81114080:	81114c04 	addi	r4,r16,17712
81114084:	811142c0 	call	8811142c <__reset+0x20f142c>
81114088:	81114a9c 	xori	r4,r16,17706
8111408c:	81114c04 	addi	r4,r16,17712
81114090:	811141d0 	cmplti	r4,r16,17671
81114094:	811142e8 	cmpgeui	r4,r16,17675
81114098:	81114c04 	addi	r4,r16,17712
8111409c:	8111435c 	xori	r4,r16,17677
811140a0:	81114328 	cmpgeui	r4,r16,17676
811140a4:	81114328 	cmpgeui	r4,r16,17676
811140a8:	81114328 	cmpgeui	r4,r16,17676
811140ac:	81114328 	cmpgeui	r4,r16,17676
811140b0:	81114328 	cmpgeui	r4,r16,17676
811140b4:	81114328 	cmpgeui	r4,r16,17676
811140b8:	81114328 	cmpgeui	r4,r16,17676
811140bc:	81114328 	cmpgeui	r4,r16,17676
811140c0:	81114328 	cmpgeui	r4,r16,17676
811140c4:	81114c04 	addi	r4,r16,17712
811140c8:	81114c04 	addi	r4,r16,17712
811140cc:	81114c04 	addi	r4,r16,17712
811140d0:	81114c04 	addi	r4,r16,17712
811140d4:	81114c04 	addi	r4,r16,17712
811140d8:	81114c04 	addi	r4,r16,17712
811140dc:	81114c04 	addi	r4,r16,17712
811140e0:	81114c04 	addi	r4,r16,17712
811140e4:	81114c04 	addi	r4,r16,17712
811140e8:	81114c04 	addi	r4,r16,17712
811140ec:	81114414 	ori	r4,r16,17680
811140f0:	81114368 	cmpgeui	r4,r16,17677
811140f4:	81114c04 	addi	r4,r16,17712
811140f8:	81114368 	cmpgeui	r4,r16,17677
811140fc:	81114c04 	addi	r4,r16,17712
81114100:	81114c04 	addi	r4,r16,17712
81114104:	81114c04 	addi	r4,r16,17712
81114108:	81114c04 	addi	r4,r16,17712
8111410c:	81114408 	cmpgei	r4,r16,17680
81114110:	81114c04 	addi	r4,r16,17712
81114114:	81114c04 	addi	r4,r16,17712
81114118:	811144d0 	cmplti	r4,r16,17683
8111411c:	81114c04 	addi	r4,r16,17712
81114120:	81114c04 	addi	r4,r16,17712
81114124:	81114c04 	addi	r4,r16,17712
81114128:	81114c04 	addi	r4,r16,17712
8111412c:	81114c04 	addi	r4,r16,17712
81114130:	81114940 	call	88111494 <__reset+0x20f1494>
81114134:	81114c04 	addi	r4,r16,17712
81114138:	81114c04 	addi	r4,r16,17712
8111413c:	811149a0 	cmpeqi	r4,r16,17702
81114140:	81114c04 	addi	r4,r16,17712
81114144:	81114c04 	addi	r4,r16,17712
81114148:	81114c04 	addi	r4,r16,17712
8111414c:	81114c04 	addi	r4,r16,17712
81114150:	81114c04 	addi	r4,r16,17712
81114154:	81114c04 	addi	r4,r16,17712
81114158:	81114c04 	addi	r4,r16,17712
8111415c:	81114c04 	addi	r4,r16,17712
81114160:	81114c04 	addi	r4,r16,17712
81114164:	81114c04 	addi	r4,r16,17712
81114168:	81114a50 	cmplti	r4,r16,17705
8111416c:	81114b8c 	andi	r4,r16,17710
81114170:	81114368 	cmpgeui	r4,r16,17677
81114174:	81114368 	cmpgeui	r4,r16,17677
81114178:	81114368 	cmpgeui	r4,r16,17677
8111417c:	81114be0 	cmpeqi	r4,r16,17711
81114180:	81114b8c 	andi	r4,r16,17710
81114184:	81114c04 	addi	r4,r16,17712
81114188:	81114c04 	addi	r4,r16,17712
8111418c:	81114b9c 	xori	r4,r16,17710
81114190:	81114c04 	addi	r4,r16,17712
81114194:	81114bac 	andhi	r4,r16,17710
81114198:	81114a8c 	andi	r4,r16,17706
8111419c:	811141dc 	xori	r4,r16,17671
811141a0:	81114aac 	andhi	r4,r16,17706
811141a4:	81114c04 	addi	r4,r16,17712
811141a8:	81114ab8 	rdprs	r4,r16,17706
811141ac:	81114c04 	addi	r4,r16,17712
811141b0:	81114b14 	ori	r4,r16,17708
811141b4:	81114c04 	addi	r4,r16,17712
811141b8:	81114c04 	addi	r4,r16,17712
811141bc:	81114b24 	muli	r4,r16,17708
811141c0:	d9003117 	ldw	r4,196(sp)
811141c4:	d8802d15 	stw	r2,180(sp)
811141c8:	0109c83a 	sub	r4,zero,r4
811141cc:	d9003115 	stw	r4,196(sp)
811141d0:	94800114 	ori	r18,r18,4
811141d4:	bc400007 	ldb	r17,0(r23)
811141d8:	003f9706 	br	81114038 <__reset+0xfb0f4038>
811141dc:	00800c04 	movi	r2,48
811141e0:	d9002d17 	ldw	r4,180(sp)
811141e4:	d9402917 	ldw	r5,164(sp)
811141e8:	d8802705 	stb	r2,156(sp)
811141ec:	00801e04 	movi	r2,120
811141f0:	d8802745 	stb	r2,157(sp)
811141f4:	d8002785 	stb	zero,158(sp)
811141f8:	20c00104 	addi	r3,r4,4
811141fc:	25000017 	ldw	r20,0(r4)
81114200:	002d883a 	mov	r22,zero
81114204:	90800094 	ori	r2,r18,2
81114208:	28028616 	blt	r5,zero,81114c24 <___svfprintf_internal_r+0xd44>
8111420c:	00bfdfc4 	movi	r2,-129
81114210:	90a4703a 	and	r18,r18,r2
81114214:	d8c02d15 	stw	r3,180(sp)
81114218:	94800094 	ori	r18,r18,2
8111421c:	a002731e 	bne	r20,zero,81114bec <___svfprintf_internal_r+0xd0c>
81114220:	00a04534 	movhi	r2,33044
81114224:	1080c404 	addi	r2,r2,784
81114228:	d8803a15 	stw	r2,232(sp)
8111422c:	04401e04 	movi	r17,120
81114230:	d8c02917 	ldw	r3,164(sp)
81114234:	0039883a 	mov	fp,zero
81114238:	1801d526 	beq	r3,zero,81114990 <___svfprintf_internal_r+0xab0>
8111423c:	0029883a 	mov	r20,zero
81114240:	002d883a 	mov	r22,zero
81114244:	0001f106 	br	81114a0c <___svfprintf_internal_r+0xb2c>
81114248:	d9402c17 	ldw	r5,176(sp)
8111424c:	d9801e04 	addi	r6,sp,120
81114250:	9809883a 	mov	r4,r19
81114254:	1120b000 	call	81120b00 <__ssprint_r>
81114258:	1000081e 	bne	r2,zero,8111427c <___svfprintf_internal_r+0x39c>
8111425c:	da000404 	addi	r8,sp,16
81114260:	003f6306 	br	81113ff0 <__reset+0xfb0f3ff0>
81114264:	d8802017 	ldw	r2,128(sp)
81114268:	10000426 	beq	r2,zero,8111427c <___svfprintf_internal_r+0x39c>
8111426c:	d9402c17 	ldw	r5,176(sp)
81114270:	d9003917 	ldw	r4,228(sp)
81114274:	d9801e04 	addi	r6,sp,120
81114278:	1120b000 	call	81120b00 <__ssprint_r>
8111427c:	d8802c17 	ldw	r2,176(sp)
81114280:	10c0030b 	ldhu	r3,12(r2)
81114284:	d8802f17 	ldw	r2,188(sp)
81114288:	18c0100c 	andi	r3,r3,64
8111428c:	1805f51e 	bne	r3,zero,81115a64 <___svfprintf_internal_r+0x1b84>
81114290:	dfc04817 	ldw	ra,288(sp)
81114294:	df004717 	ldw	fp,284(sp)
81114298:	ddc04617 	ldw	r23,280(sp)
8111429c:	dd804517 	ldw	r22,276(sp)
811142a0:	dd404417 	ldw	r21,272(sp)
811142a4:	dd004317 	ldw	r20,268(sp)
811142a8:	dcc04217 	ldw	r19,264(sp)
811142ac:	dc804117 	ldw	r18,260(sp)
811142b0:	dc404017 	ldw	r17,256(sp)
811142b4:	dc003f17 	ldw	r16,252(sp)
811142b8:	dec04904 	addi	sp,sp,292
811142bc:	f800283a 	ret
811142c0:	d8802d17 	ldw	r2,180(sp)
811142c4:	d9002d17 	ldw	r4,180(sp)
811142c8:	10800017 	ldw	r2,0(r2)
811142cc:	d8803115 	stw	r2,196(sp)
811142d0:	20800104 	addi	r2,r4,4
811142d4:	d9003117 	ldw	r4,196(sp)
811142d8:	203fb916 	blt	r4,zero,811141c0 <__reset+0xfb0f41c0>
811142dc:	d8802d15 	stw	r2,180(sp)
811142e0:	bc400007 	ldb	r17,0(r23)
811142e4:	003f5406 	br	81114038 <__reset+0xfb0f4038>
811142e8:	bc400007 	ldb	r17,0(r23)
811142ec:	bac00044 	addi	r11,r23,1
811142f0:	8a873926 	beq	r17,r10,81115fd8 <___svfprintf_internal_r+0x20f8>
811142f4:	88bff404 	addi	r2,r17,-48
811142f8:	0009883a 	mov	r4,zero
811142fc:	30868836 	bltu	r6,r2,81115d20 <___svfprintf_internal_r+0x1e40>
81114300:	5c400007 	ldb	r17,0(r11)
81114304:	210002a4 	muli	r4,r4,10
81114308:	5dc00044 	addi	r23,r11,1
8111430c:	b817883a 	mov	r11,r23
81114310:	2089883a 	add	r4,r4,r2
81114314:	88bff404 	addi	r2,r17,-48
81114318:	30bff92e 	bgeu	r6,r2,81114300 <__reset+0xfb0f4300>
8111431c:	2005d716 	blt	r4,zero,81115a7c <___svfprintf_internal_r+0x1b9c>
81114320:	d9002915 	stw	r4,164(sp)
81114324:	003f4506 	br	8111403c <__reset+0xfb0f403c>
81114328:	b809883a 	mov	r4,r23
8111432c:	d8003115 	stw	zero,196(sp)
81114330:	88bff404 	addi	r2,r17,-48
81114334:	0017883a 	mov	r11,zero
81114338:	24400007 	ldb	r17,0(r4)
8111433c:	5ac002a4 	muli	r11,r11,10
81114340:	bdc00044 	addi	r23,r23,1
81114344:	b809883a 	mov	r4,r23
81114348:	12d7883a 	add	r11,r2,r11
8111434c:	88bff404 	addi	r2,r17,-48
81114350:	30bff92e 	bgeu	r6,r2,81114338 <__reset+0xfb0f4338>
81114354:	dac03115 	stw	r11,196(sp)
81114358:	003f3806 	br	8111403c <__reset+0xfb0f403c>
8111435c:	94802014 	ori	r18,r18,128
81114360:	bc400007 	ldb	r17,0(r23)
81114364:	003f3406 	br	81114038 <__reset+0xfb0f4038>
81114368:	18c03fcc 	andi	r3,r3,255
8111436c:	1807471e 	bne	r3,zero,8111608c <___svfprintf_internal_r+0x21ac>
81114370:	9080020c 	andi	r2,r18,8
81114374:	10047d26 	beq	r2,zero,8111556c <___svfprintf_internal_r+0x168c>
81114378:	d8c02d17 	ldw	r3,180(sp)
8111437c:	d9002d17 	ldw	r4,180(sp)
81114380:	d9402d17 	ldw	r5,180(sp)
81114384:	18c00017 	ldw	r3,0(r3)
81114388:	21000117 	ldw	r4,4(r4)
8111438c:	29400204 	addi	r5,r5,8
81114390:	d8c03615 	stw	r3,216(sp)
81114394:	d9003715 	stw	r4,220(sp)
81114398:	d9402d15 	stw	r5,180(sp)
8111439c:	d9003617 	ldw	r4,216(sp)
811143a0:	d9403717 	ldw	r5,220(sp)
811143a4:	da003e15 	stw	r8,248(sp)
811143a8:	04000044 	movi	r16,1
811143ac:	111e9140 	call	8111e914 <__fpclassifyd>
811143b0:	da003e17 	ldw	r8,248(sp)
811143b4:	14044b1e 	bne	r2,r16,811154e4 <___svfprintf_internal_r+0x1604>
811143b8:	d9003617 	ldw	r4,216(sp)
811143bc:	d9403717 	ldw	r5,220(sp)
811143c0:	000d883a 	mov	r6,zero
811143c4:	000f883a 	mov	r7,zero
811143c8:	1126c5c0 	call	81126c5c <__ledf2>
811143cc:	da003e17 	ldw	r8,248(sp)
811143d0:	1005f316 	blt	r2,zero,81115ba0 <___svfprintf_internal_r+0x1cc0>
811143d4:	df002783 	ldbu	fp,158(sp)
811143d8:	008011c4 	movi	r2,71
811143dc:	1445590e 	bge	r2,r17,81115944 <___svfprintf_internal_r+0x1a64>
811143e0:	04204534 	movhi	r16,33044
811143e4:	8400bc04 	addi	r16,r16,752
811143e8:	00c000c4 	movi	r3,3
811143ec:	00bfdfc4 	movi	r2,-129
811143f0:	d8c02a15 	stw	r3,168(sp)
811143f4:	90a4703a 	and	r18,r18,r2
811143f8:	d8c02e15 	stw	r3,184(sp)
811143fc:	d8002915 	stw	zero,164(sp)
81114400:	d8003215 	stw	zero,200(sp)
81114404:	00006606 	br	811145a0 <___svfprintf_internal_r+0x6c0>
81114408:	94800214 	ori	r18,r18,8
8111440c:	bc400007 	ldb	r17,0(r23)
81114410:	003f0906 	br	81114038 <__reset+0xfb0f4038>
81114414:	18c03fcc 	andi	r3,r3,255
81114418:	1807181e 	bne	r3,zero,8111607c <___svfprintf_internal_r+0x219c>
8111441c:	94800414 	ori	r18,r18,16
81114420:	9080080c 	andi	r2,r18,32
81114424:	10039626 	beq	r2,zero,81115280 <___svfprintf_internal_r+0x13a0>
81114428:	d9402d17 	ldw	r5,180(sp)
8111442c:	28800117 	ldw	r2,4(r5)
81114430:	2d000017 	ldw	r20,0(r5)
81114434:	29400204 	addi	r5,r5,8
81114438:	d9402d15 	stw	r5,180(sp)
8111443c:	102d883a 	mov	r22,r2
81114440:	10039816 	blt	r2,zero,811152a4 <___svfprintf_internal_r+0x13c4>
81114444:	d9402917 	ldw	r5,164(sp)
81114448:	df002783 	ldbu	fp,158(sp)
8111444c:	2803ab16 	blt	r5,zero,811152fc <___svfprintf_internal_r+0x141c>
81114450:	00ffdfc4 	movi	r3,-129
81114454:	a584b03a 	or	r2,r20,r22
81114458:	90e4703a 	and	r18,r18,r3
8111445c:	10014a26 	beq	r2,zero,81114988 <___svfprintf_internal_r+0xaa8>
81114460:	b0034b26 	beq	r22,zero,81115190 <___svfprintf_internal_r+0x12b0>
81114464:	dc402a15 	stw	r17,168(sp)
81114468:	dc001e04 	addi	r16,sp,120
8111446c:	b023883a 	mov	r17,r22
81114470:	402d883a 	mov	r22,r8
81114474:	a009883a 	mov	r4,r20
81114478:	880b883a 	mov	r5,r17
8111447c:	01800284 	movi	r6,10
81114480:	000f883a 	mov	r7,zero
81114484:	11250640 	call	81125064 <__umoddi3>
81114488:	10800c04 	addi	r2,r2,48
8111448c:	843fffc4 	addi	r16,r16,-1
81114490:	a009883a 	mov	r4,r20
81114494:	880b883a 	mov	r5,r17
81114498:	80800005 	stb	r2,0(r16)
8111449c:	01800284 	movi	r6,10
811144a0:	000f883a 	mov	r7,zero
811144a4:	1124ae40 	call	81124ae4 <__udivdi3>
811144a8:	1029883a 	mov	r20,r2
811144ac:	10c4b03a 	or	r2,r2,r3
811144b0:	1823883a 	mov	r17,r3
811144b4:	103fef1e 	bne	r2,zero,81114474 <__reset+0xfb0f4474>
811144b8:	d8c02817 	ldw	r3,160(sp)
811144bc:	dc402a17 	ldw	r17,168(sp)
811144c0:	b011883a 	mov	r8,r22
811144c4:	1c07c83a 	sub	r3,r3,r16
811144c8:	d8c02e15 	stw	r3,184(sp)
811144cc:	00002e06 	br	81114588 <___svfprintf_internal_r+0x6a8>
811144d0:	18c03fcc 	andi	r3,r3,255
811144d4:	1806e71e 	bne	r3,zero,81116074 <___svfprintf_internal_r+0x2194>
811144d8:	94800414 	ori	r18,r18,16
811144dc:	9080080c 	andi	r2,r18,32
811144e0:	1002d426 	beq	r2,zero,81115034 <___svfprintf_internal_r+0x1154>
811144e4:	d9402d17 	ldw	r5,180(sp)
811144e8:	d8c02917 	ldw	r3,164(sp)
811144ec:	d8002785 	stb	zero,158(sp)
811144f0:	28800204 	addi	r2,r5,8
811144f4:	2d000017 	ldw	r20,0(r5)
811144f8:	2d800117 	ldw	r22,4(r5)
811144fc:	18041516 	blt	r3,zero,81115554 <___svfprintf_internal_r+0x1674>
81114500:	013fdfc4 	movi	r4,-129
81114504:	a586b03a 	or	r3,r20,r22
81114508:	d8802d15 	stw	r2,180(sp)
8111450c:	9124703a 	and	r18,r18,r4
81114510:	1802d51e 	bne	r3,zero,81115068 <___svfprintf_internal_r+0x1188>
81114514:	d9402917 	ldw	r5,164(sp)
81114518:	0039883a 	mov	fp,zero
8111451c:	2806be26 	beq	r5,zero,81116018 <___svfprintf_internal_r+0x2138>
81114520:	0029883a 	mov	r20,zero
81114524:	002d883a 	mov	r22,zero
81114528:	dc001e04 	addi	r16,sp,120
8111452c:	a006d0fa 	srli	r3,r20,3
81114530:	b008977a 	slli	r4,r22,29
81114534:	b02cd0fa 	srli	r22,r22,3
81114538:	a50001cc 	andi	r20,r20,7
8111453c:	a0800c04 	addi	r2,r20,48
81114540:	843fffc4 	addi	r16,r16,-1
81114544:	20e8b03a 	or	r20,r4,r3
81114548:	80800005 	stb	r2,0(r16)
8111454c:	a586b03a 	or	r3,r20,r22
81114550:	183ff61e 	bne	r3,zero,8111452c <__reset+0xfb0f452c>
81114554:	90c0004c 	andi	r3,r18,1
81114558:	18013926 	beq	r3,zero,81114a40 <___svfprintf_internal_r+0xb60>
8111455c:	10803fcc 	andi	r2,r2,255
81114560:	1080201c 	xori	r2,r2,128
81114564:	10bfe004 	addi	r2,r2,-128
81114568:	00c00c04 	movi	r3,48
8111456c:	10c13426 	beq	r2,r3,81114a40 <___svfprintf_internal_r+0xb60>
81114570:	80ffffc5 	stb	r3,-1(r16)
81114574:	d8c02817 	ldw	r3,160(sp)
81114578:	80bfffc4 	addi	r2,r16,-1
8111457c:	1021883a 	mov	r16,r2
81114580:	1887c83a 	sub	r3,r3,r2
81114584:	d8c02e15 	stw	r3,184(sp)
81114588:	d8802e17 	ldw	r2,184(sp)
8111458c:	d9002917 	ldw	r4,164(sp)
81114590:	1100010e 	bge	r2,r4,81114598 <___svfprintf_internal_r+0x6b8>
81114594:	2005883a 	mov	r2,r4
81114598:	d8802a15 	stw	r2,168(sp)
8111459c:	d8003215 	stw	zero,200(sp)
811145a0:	e7003fcc 	andi	fp,fp,255
811145a4:	e700201c 	xori	fp,fp,128
811145a8:	e73fe004 	addi	fp,fp,-128
811145ac:	e0000326 	beq	fp,zero,811145bc <___svfprintf_internal_r+0x6dc>
811145b0:	d8c02a17 	ldw	r3,168(sp)
811145b4:	18c00044 	addi	r3,r3,1
811145b8:	d8c02a15 	stw	r3,168(sp)
811145bc:	90c0008c 	andi	r3,r18,2
811145c0:	d8c02b15 	stw	r3,172(sp)
811145c4:	18000326 	beq	r3,zero,811145d4 <___svfprintf_internal_r+0x6f4>
811145c8:	d8c02a17 	ldw	r3,168(sp)
811145cc:	18c00084 	addi	r3,r3,2
811145d0:	d8c02a15 	stw	r3,168(sp)
811145d4:	90c0210c 	andi	r3,r18,132
811145d8:	d8c03015 	stw	r3,192(sp)
811145dc:	1801a11e 	bne	r3,zero,81114c64 <___svfprintf_internal_r+0xd84>
811145e0:	d9003117 	ldw	r4,196(sp)
811145e4:	d8c02a17 	ldw	r3,168(sp)
811145e8:	20e9c83a 	sub	r20,r4,r3
811145ec:	05019d0e 	bge	zero,r20,81114c64 <___svfprintf_internal_r+0xd84>
811145f0:	02400404 	movi	r9,16
811145f4:	d8c02017 	ldw	r3,128(sp)
811145f8:	d8801f17 	ldw	r2,124(sp)
811145fc:	4d051b0e 	bge	r9,r20,81115a6c <___svfprintf_internal_r+0x1b8c>
81114600:	01604534 	movhi	r5,33044
81114604:	2940cf84 	addi	r5,r5,830
81114608:	dc403c15 	stw	r17,240(sp)
8111460c:	d9403515 	stw	r5,212(sp)
81114610:	a023883a 	mov	r17,r20
81114614:	482d883a 	mov	r22,r9
81114618:	9029883a 	mov	r20,r18
8111461c:	070001c4 	movi	fp,7
81114620:	8025883a 	mov	r18,r16
81114624:	dc002c17 	ldw	r16,176(sp)
81114628:	00000306 	br	81114638 <___svfprintf_internal_r+0x758>
8111462c:	8c7ffc04 	addi	r17,r17,-16
81114630:	42000204 	addi	r8,r8,8
81114634:	b440130e 	bge	r22,r17,81114684 <___svfprintf_internal_r+0x7a4>
81114638:	01204534 	movhi	r4,33044
8111463c:	18c00404 	addi	r3,r3,16
81114640:	10800044 	addi	r2,r2,1
81114644:	2100cf84 	addi	r4,r4,830
81114648:	41000015 	stw	r4,0(r8)
8111464c:	45800115 	stw	r22,4(r8)
81114650:	d8c02015 	stw	r3,128(sp)
81114654:	d8801f15 	stw	r2,124(sp)
81114658:	e0bff40e 	bge	fp,r2,8111462c <__reset+0xfb0f462c>
8111465c:	d9801e04 	addi	r6,sp,120
81114660:	800b883a 	mov	r5,r16
81114664:	9809883a 	mov	r4,r19
81114668:	1120b000 	call	81120b00 <__ssprint_r>
8111466c:	103f031e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81114670:	8c7ffc04 	addi	r17,r17,-16
81114674:	d8c02017 	ldw	r3,128(sp)
81114678:	d8801f17 	ldw	r2,124(sp)
8111467c:	da000404 	addi	r8,sp,16
81114680:	b47fed16 	blt	r22,r17,81114638 <__reset+0xfb0f4638>
81114684:	9021883a 	mov	r16,r18
81114688:	a025883a 	mov	r18,r20
8111468c:	8829883a 	mov	r20,r17
81114690:	dc403c17 	ldw	r17,240(sp)
81114694:	d9403517 	ldw	r5,212(sp)
81114698:	a0c7883a 	add	r3,r20,r3
8111469c:	10800044 	addi	r2,r2,1
811146a0:	41400015 	stw	r5,0(r8)
811146a4:	45000115 	stw	r20,4(r8)
811146a8:	d8c02015 	stw	r3,128(sp)
811146ac:	d8801f15 	stw	r2,124(sp)
811146b0:	010001c4 	movi	r4,7
811146b4:	20829f16 	blt	r4,r2,81115134 <___svfprintf_internal_r+0x1254>
811146b8:	df002787 	ldb	fp,158(sp)
811146bc:	42000204 	addi	r8,r8,8
811146c0:	e0000c26 	beq	fp,zero,811146f4 <___svfprintf_internal_r+0x814>
811146c4:	d8801f17 	ldw	r2,124(sp)
811146c8:	d9002784 	addi	r4,sp,158
811146cc:	18c00044 	addi	r3,r3,1
811146d0:	10800044 	addi	r2,r2,1
811146d4:	41000015 	stw	r4,0(r8)
811146d8:	01000044 	movi	r4,1
811146dc:	41000115 	stw	r4,4(r8)
811146e0:	d8c02015 	stw	r3,128(sp)
811146e4:	d8801f15 	stw	r2,124(sp)
811146e8:	010001c4 	movi	r4,7
811146ec:	20823816 	blt	r4,r2,81114fd0 <___svfprintf_internal_r+0x10f0>
811146f0:	42000204 	addi	r8,r8,8
811146f4:	d8802b17 	ldw	r2,172(sp)
811146f8:	10000c26 	beq	r2,zero,8111472c <___svfprintf_internal_r+0x84c>
811146fc:	d8801f17 	ldw	r2,124(sp)
81114700:	d9002704 	addi	r4,sp,156
81114704:	18c00084 	addi	r3,r3,2
81114708:	10800044 	addi	r2,r2,1
8111470c:	41000015 	stw	r4,0(r8)
81114710:	01000084 	movi	r4,2
81114714:	41000115 	stw	r4,4(r8)
81114718:	d8c02015 	stw	r3,128(sp)
8111471c:	d8801f15 	stw	r2,124(sp)
81114720:	010001c4 	movi	r4,7
81114724:	20823216 	blt	r4,r2,81114ff0 <___svfprintf_internal_r+0x1110>
81114728:	42000204 	addi	r8,r8,8
8111472c:	d9003017 	ldw	r4,192(sp)
81114730:	00802004 	movi	r2,128
81114734:	20819726 	beq	r4,r2,81114d94 <___svfprintf_internal_r+0xeb4>
81114738:	d9402917 	ldw	r5,164(sp)
8111473c:	d8802e17 	ldw	r2,184(sp)
81114740:	28adc83a 	sub	r22,r5,r2
81114744:	05802f0e 	bge	zero,r22,81114804 <___svfprintf_internal_r+0x924>
81114748:	07000404 	movi	fp,16
8111474c:	d8801f17 	ldw	r2,124(sp)
81114750:	e583c00e 	bge	fp,r22,81115654 <___svfprintf_internal_r+0x1774>
81114754:	01604534 	movhi	r5,33044
81114758:	2940cb84 	addi	r5,r5,814
8111475c:	dc402915 	stw	r17,164(sp)
81114760:	d9402b15 	stw	r5,172(sp)
81114764:	b023883a 	mov	r17,r22
81114768:	050001c4 	movi	r20,7
8111476c:	902d883a 	mov	r22,r18
81114770:	8025883a 	mov	r18,r16
81114774:	dc002c17 	ldw	r16,176(sp)
81114778:	00000306 	br	81114788 <___svfprintf_internal_r+0x8a8>
8111477c:	8c7ffc04 	addi	r17,r17,-16
81114780:	42000204 	addi	r8,r8,8
81114784:	e440110e 	bge	fp,r17,811147cc <___svfprintf_internal_r+0x8ec>
81114788:	18c00404 	addi	r3,r3,16
8111478c:	10800044 	addi	r2,r2,1
81114790:	45400015 	stw	r21,0(r8)
81114794:	47000115 	stw	fp,4(r8)
81114798:	d8c02015 	stw	r3,128(sp)
8111479c:	d8801f15 	stw	r2,124(sp)
811147a0:	a0bff60e 	bge	r20,r2,8111477c <__reset+0xfb0f477c>
811147a4:	d9801e04 	addi	r6,sp,120
811147a8:	800b883a 	mov	r5,r16
811147ac:	9809883a 	mov	r4,r19
811147b0:	1120b000 	call	81120b00 <__ssprint_r>
811147b4:	103eb11e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
811147b8:	8c7ffc04 	addi	r17,r17,-16
811147bc:	d8c02017 	ldw	r3,128(sp)
811147c0:	d8801f17 	ldw	r2,124(sp)
811147c4:	da000404 	addi	r8,sp,16
811147c8:	e47fef16 	blt	fp,r17,81114788 <__reset+0xfb0f4788>
811147cc:	9021883a 	mov	r16,r18
811147d0:	b025883a 	mov	r18,r22
811147d4:	882d883a 	mov	r22,r17
811147d8:	dc402917 	ldw	r17,164(sp)
811147dc:	d9002b17 	ldw	r4,172(sp)
811147e0:	1d87883a 	add	r3,r3,r22
811147e4:	10800044 	addi	r2,r2,1
811147e8:	41000015 	stw	r4,0(r8)
811147ec:	45800115 	stw	r22,4(r8)
811147f0:	d8c02015 	stw	r3,128(sp)
811147f4:	d8801f15 	stw	r2,124(sp)
811147f8:	010001c4 	movi	r4,7
811147fc:	2081ec16 	blt	r4,r2,81114fb0 <___svfprintf_internal_r+0x10d0>
81114800:	42000204 	addi	r8,r8,8
81114804:	9080400c 	andi	r2,r18,256
81114808:	1001181e 	bne	r2,zero,81114c6c <___svfprintf_internal_r+0xd8c>
8111480c:	d9402e17 	ldw	r5,184(sp)
81114810:	d8801f17 	ldw	r2,124(sp)
81114814:	44000015 	stw	r16,0(r8)
81114818:	1947883a 	add	r3,r3,r5
8111481c:	10800044 	addi	r2,r2,1
81114820:	41400115 	stw	r5,4(r8)
81114824:	d8c02015 	stw	r3,128(sp)
81114828:	d8801f15 	stw	r2,124(sp)
8111482c:	010001c4 	movi	r4,7
81114830:	2081d116 	blt	r4,r2,81114f78 <___svfprintf_internal_r+0x1098>
81114834:	42000204 	addi	r8,r8,8
81114838:	9480010c 	andi	r18,r18,4
8111483c:	90003226 	beq	r18,zero,81114908 <___svfprintf_internal_r+0xa28>
81114840:	d9403117 	ldw	r5,196(sp)
81114844:	d8802a17 	ldw	r2,168(sp)
81114848:	28a1c83a 	sub	r16,r5,r2
8111484c:	04002e0e 	bge	zero,r16,81114908 <___svfprintf_internal_r+0xa28>
81114850:	04400404 	movi	r17,16
81114854:	d8801f17 	ldw	r2,124(sp)
81114858:	8c04b90e 	bge	r17,r16,81115b40 <___svfprintf_internal_r+0x1c60>
8111485c:	01604534 	movhi	r5,33044
81114860:	2940cf84 	addi	r5,r5,830
81114864:	d9403515 	stw	r5,212(sp)
81114868:	048001c4 	movi	r18,7
8111486c:	dd002c17 	ldw	r20,176(sp)
81114870:	00000306 	br	81114880 <___svfprintf_internal_r+0x9a0>
81114874:	843ffc04 	addi	r16,r16,-16
81114878:	42000204 	addi	r8,r8,8
8111487c:	8c00130e 	bge	r17,r16,811148cc <___svfprintf_internal_r+0x9ec>
81114880:	01204534 	movhi	r4,33044
81114884:	18c00404 	addi	r3,r3,16
81114888:	10800044 	addi	r2,r2,1
8111488c:	2100cf84 	addi	r4,r4,830
81114890:	41000015 	stw	r4,0(r8)
81114894:	44400115 	stw	r17,4(r8)
81114898:	d8c02015 	stw	r3,128(sp)
8111489c:	d8801f15 	stw	r2,124(sp)
811148a0:	90bff40e 	bge	r18,r2,81114874 <__reset+0xfb0f4874>
811148a4:	d9801e04 	addi	r6,sp,120
811148a8:	a00b883a 	mov	r5,r20
811148ac:	9809883a 	mov	r4,r19
811148b0:	1120b000 	call	81120b00 <__ssprint_r>
811148b4:	103e711e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
811148b8:	843ffc04 	addi	r16,r16,-16
811148bc:	d8c02017 	ldw	r3,128(sp)
811148c0:	d8801f17 	ldw	r2,124(sp)
811148c4:	da000404 	addi	r8,sp,16
811148c8:	8c3fed16 	blt	r17,r16,81114880 <__reset+0xfb0f4880>
811148cc:	d9403517 	ldw	r5,212(sp)
811148d0:	1c07883a 	add	r3,r3,r16
811148d4:	10800044 	addi	r2,r2,1
811148d8:	41400015 	stw	r5,0(r8)
811148dc:	44000115 	stw	r16,4(r8)
811148e0:	d8c02015 	stw	r3,128(sp)
811148e4:	d8801f15 	stw	r2,124(sp)
811148e8:	010001c4 	movi	r4,7
811148ec:	2080060e 	bge	r4,r2,81114908 <___svfprintf_internal_r+0xa28>
811148f0:	d9402c17 	ldw	r5,176(sp)
811148f4:	d9801e04 	addi	r6,sp,120
811148f8:	9809883a 	mov	r4,r19
811148fc:	1120b000 	call	81120b00 <__ssprint_r>
81114900:	103e5e1e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81114904:	d8c02017 	ldw	r3,128(sp)
81114908:	d8803117 	ldw	r2,196(sp)
8111490c:	d9002a17 	ldw	r4,168(sp)
81114910:	1100010e 	bge	r2,r4,81114918 <___svfprintf_internal_r+0xa38>
81114914:	2005883a 	mov	r2,r4
81114918:	d9402f17 	ldw	r5,188(sp)
8111491c:	288b883a 	add	r5,r5,r2
81114920:	d9402f15 	stw	r5,188(sp)
81114924:	18019c1e 	bne	r3,zero,81114f98 <___svfprintf_internal_r+0x10b8>
81114928:	b8800007 	ldb	r2,0(r23)
8111492c:	d8001f15 	stw	zero,124(sp)
81114930:	da000404 	addi	r8,sp,16
81114934:	103d991e 	bne	r2,zero,81113f9c <__reset+0xfb0f3f9c>
81114938:	b821883a 	mov	r16,r23
8111493c:	003daf06 	br	81113ffc <__reset+0xfb0f3ffc>
81114940:	18c03fcc 	andi	r3,r3,255
81114944:	1805c71e 	bne	r3,zero,81116064 <___svfprintf_internal_r+0x2184>
81114948:	94800414 	ori	r18,r18,16
8111494c:	9080080c 	andi	r2,r18,32
81114950:	10020126 	beq	r2,zero,81115158 <___svfprintf_internal_r+0x1278>
81114954:	d8802d17 	ldw	r2,180(sp)
81114958:	d9002917 	ldw	r4,164(sp)
8111495c:	d8002785 	stb	zero,158(sp)
81114960:	10c00204 	addi	r3,r2,8
81114964:	15000017 	ldw	r20,0(r2)
81114968:	15800117 	ldw	r22,4(r2)
8111496c:	20038e16 	blt	r4,zero,811157a8 <___svfprintf_internal_r+0x18c8>
81114970:	013fdfc4 	movi	r4,-129
81114974:	a584b03a 	or	r2,r20,r22
81114978:	d8c02d15 	stw	r3,180(sp)
8111497c:	9124703a 	and	r18,r18,r4
81114980:	0039883a 	mov	fp,zero
81114984:	103eb61e 	bne	r2,zero,81114460 <__reset+0xfb0f4460>
81114988:	d8802917 	ldw	r2,164(sp)
8111498c:	1002c81e 	bne	r2,zero,811154b0 <___svfprintf_internal_r+0x15d0>
81114990:	d8002915 	stw	zero,164(sp)
81114994:	d8002e15 	stw	zero,184(sp)
81114998:	dc001e04 	addi	r16,sp,120
8111499c:	003efa06 	br	81114588 <__reset+0xfb0f4588>
811149a0:	18c03fcc 	andi	r3,r3,255
811149a4:	1805ad1e 	bne	r3,zero,8111605c <___svfprintf_internal_r+0x217c>
811149a8:	01604534 	movhi	r5,33044
811149ac:	2940bf04 	addi	r5,r5,764
811149b0:	d9403a15 	stw	r5,232(sp)
811149b4:	9080080c 	andi	r2,r18,32
811149b8:	10006126 	beq	r2,zero,81114b40 <___svfprintf_internal_r+0xc60>
811149bc:	d8802d17 	ldw	r2,180(sp)
811149c0:	15000017 	ldw	r20,0(r2)
811149c4:	15800117 	ldw	r22,4(r2)
811149c8:	10800204 	addi	r2,r2,8
811149cc:	d8802d15 	stw	r2,180(sp)
811149d0:	9080004c 	andi	r2,r18,1
811149d4:	10018e26 	beq	r2,zero,81115010 <___svfprintf_internal_r+0x1130>
811149d8:	a584b03a 	or	r2,r20,r22
811149dc:	10030926 	beq	r2,zero,81115604 <___svfprintf_internal_r+0x1724>
811149e0:	d8c02917 	ldw	r3,164(sp)
811149e4:	00800c04 	movi	r2,48
811149e8:	d8802705 	stb	r2,156(sp)
811149ec:	dc402745 	stb	r17,157(sp)
811149f0:	d8002785 	stb	zero,158(sp)
811149f4:	90800094 	ori	r2,r18,2
811149f8:	18048716 	blt	r3,zero,81115c18 <___svfprintf_internal_r+0x1d38>
811149fc:	00bfdfc4 	movi	r2,-129
81114a00:	90a4703a 	and	r18,r18,r2
81114a04:	94800094 	ori	r18,r18,2
81114a08:	0039883a 	mov	fp,zero
81114a0c:	d9003a17 	ldw	r4,232(sp)
81114a10:	dc001e04 	addi	r16,sp,120
81114a14:	a08003cc 	andi	r2,r20,15
81114a18:	b006973a 	slli	r3,r22,28
81114a1c:	2085883a 	add	r2,r4,r2
81114a20:	a028d13a 	srli	r20,r20,4
81114a24:	10800003 	ldbu	r2,0(r2)
81114a28:	b02cd13a 	srli	r22,r22,4
81114a2c:	843fffc4 	addi	r16,r16,-1
81114a30:	1d28b03a 	or	r20,r3,r20
81114a34:	80800005 	stb	r2,0(r16)
81114a38:	a584b03a 	or	r2,r20,r22
81114a3c:	103ff51e 	bne	r2,zero,81114a14 <__reset+0xfb0f4a14>
81114a40:	d8c02817 	ldw	r3,160(sp)
81114a44:	1c07c83a 	sub	r3,r3,r16
81114a48:	d8c02e15 	stw	r3,184(sp)
81114a4c:	003ece06 	br	81114588 <__reset+0xfb0f4588>
81114a50:	d8c02d17 	ldw	r3,180(sp)
81114a54:	d9002d17 	ldw	r4,180(sp)
81114a58:	d8002785 	stb	zero,158(sp)
81114a5c:	18800017 	ldw	r2,0(r3)
81114a60:	21000104 	addi	r4,r4,4
81114a64:	00c00044 	movi	r3,1
81114a68:	d8c02a15 	stw	r3,168(sp)
81114a6c:	d8801405 	stb	r2,80(sp)
81114a70:	d9002d15 	stw	r4,180(sp)
81114a74:	d8c02e15 	stw	r3,184(sp)
81114a78:	d8002915 	stw	zero,164(sp)
81114a7c:	d8003215 	stw	zero,200(sp)
81114a80:	dc001404 	addi	r16,sp,80
81114a84:	0039883a 	mov	fp,zero
81114a88:	003ecc06 	br	811145bc <__reset+0xfb0f45bc>
81114a8c:	18c03fcc 	andi	r3,r3,255
81114a90:	183e9226 	beq	r3,zero,811144dc <__reset+0xfb0f44dc>
81114a94:	d9c02785 	stb	r7,158(sp)
81114a98:	003e9006 	br	811144dc <__reset+0xfb0f44dc>
81114a9c:	00c00044 	movi	r3,1
81114aa0:	01c00ac4 	movi	r7,43
81114aa4:	bc400007 	ldb	r17,0(r23)
81114aa8:	003d6306 	br	81114038 <__reset+0xfb0f4038>
81114aac:	94800814 	ori	r18,r18,32
81114ab0:	bc400007 	ldb	r17,0(r23)
81114ab4:	003d6006 	br	81114038 <__reset+0xfb0f4038>
81114ab8:	d8c02d17 	ldw	r3,180(sp)
81114abc:	d8002785 	stb	zero,158(sp)
81114ac0:	1c000017 	ldw	r16,0(r3)
81114ac4:	1d000104 	addi	r20,r3,4
81114ac8:	80040f26 	beq	r16,zero,81115b08 <___svfprintf_internal_r+0x1c28>
81114acc:	d9002917 	ldw	r4,164(sp)
81114ad0:	2003dc16 	blt	r4,zero,81115a44 <___svfprintf_internal_r+0x1b64>
81114ad4:	200d883a 	mov	r6,r4
81114ad8:	000b883a 	mov	r5,zero
81114adc:	8009883a 	mov	r4,r16
81114ae0:	da003e15 	stw	r8,248(sp)
81114ae4:	111d0a40 	call	8111d0a4 <memchr>
81114ae8:	da003e17 	ldw	r8,248(sp)
81114aec:	10045826 	beq	r2,zero,81115c50 <___svfprintf_internal_r+0x1d70>
81114af0:	1405c83a 	sub	r2,r2,r16
81114af4:	d8802e15 	stw	r2,184(sp)
81114af8:	1003d816 	blt	r2,zero,81115a5c <___svfprintf_internal_r+0x1b7c>
81114afc:	df002783 	ldbu	fp,158(sp)
81114b00:	d8802a15 	stw	r2,168(sp)
81114b04:	dd002d15 	stw	r20,180(sp)
81114b08:	d8002915 	stw	zero,164(sp)
81114b0c:	d8003215 	stw	zero,200(sp)
81114b10:	003ea306 	br	811145a0 <__reset+0xfb0f45a0>
81114b14:	18c03fcc 	andi	r3,r3,255
81114b18:	183f8c26 	beq	r3,zero,8111494c <__reset+0xfb0f494c>
81114b1c:	d9c02785 	stb	r7,158(sp)
81114b20:	003f8a06 	br	8111494c <__reset+0xfb0f494c>
81114b24:	18c03fcc 	andi	r3,r3,255
81114b28:	1805631e 	bne	r3,zero,811160b8 <___svfprintf_internal_r+0x21d8>
81114b2c:	01604534 	movhi	r5,33044
81114b30:	2940c404 	addi	r5,r5,784
81114b34:	d9403a15 	stw	r5,232(sp)
81114b38:	9080080c 	andi	r2,r18,32
81114b3c:	103f9f1e 	bne	r2,zero,811149bc <__reset+0xfb0f49bc>
81114b40:	9080040c 	andi	r2,r18,16
81114b44:	10029c26 	beq	r2,zero,811155b8 <___svfprintf_internal_r+0x16d8>
81114b48:	d8c02d17 	ldw	r3,180(sp)
81114b4c:	002d883a 	mov	r22,zero
81114b50:	1d000017 	ldw	r20,0(r3)
81114b54:	18c00104 	addi	r3,r3,4
81114b58:	d8c02d15 	stw	r3,180(sp)
81114b5c:	003f9c06 	br	811149d0 <__reset+0xfb0f49d0>
81114b60:	94800054 	ori	r18,r18,1
81114b64:	bc400007 	ldb	r17,0(r23)
81114b68:	003d3306 	br	81114038 <__reset+0xfb0f4038>
81114b6c:	38803fcc 	andi	r2,r7,255
81114b70:	1080201c 	xori	r2,r2,128
81114b74:	10bfe004 	addi	r2,r2,-128
81114b78:	1002971e 	bne	r2,zero,811155d8 <___svfprintf_internal_r+0x16f8>
81114b7c:	00c00044 	movi	r3,1
81114b80:	01c00804 	movi	r7,32
81114b84:	bc400007 	ldb	r17,0(r23)
81114b88:	003d2b06 	br	81114038 <__reset+0xfb0f4038>
81114b8c:	18c03fcc 	andi	r3,r3,255
81114b90:	183e2326 	beq	r3,zero,81114420 <__reset+0xfb0f4420>
81114b94:	d9c02785 	stb	r7,158(sp)
81114b98:	003e2106 	br	81114420 <__reset+0xfb0f4420>
81114b9c:	bc400007 	ldb	r17,0(r23)
81114ba0:	8a430426 	beq	r17,r9,811157b4 <___svfprintf_internal_r+0x18d4>
81114ba4:	94800414 	ori	r18,r18,16
81114ba8:	003d2306 	br	81114038 <__reset+0xfb0f4038>
81114bac:	18c03fcc 	andi	r3,r3,255
81114bb0:	18053f1e 	bne	r3,zero,811160b0 <___svfprintf_internal_r+0x21d0>
81114bb4:	9080080c 	andi	r2,r18,32
81114bb8:	10028926 	beq	r2,zero,811155e0 <___svfprintf_internal_r+0x1700>
81114bbc:	d9402d17 	ldw	r5,180(sp)
81114bc0:	d9002f17 	ldw	r4,188(sp)
81114bc4:	28800017 	ldw	r2,0(r5)
81114bc8:	2007d7fa 	srai	r3,r4,31
81114bcc:	29400104 	addi	r5,r5,4
81114bd0:	d9402d15 	stw	r5,180(sp)
81114bd4:	11000015 	stw	r4,0(r2)
81114bd8:	10c00115 	stw	r3,4(r2)
81114bdc:	003ced06 	br	81113f94 <__reset+0xfb0f3f94>
81114be0:	94801014 	ori	r18,r18,64
81114be4:	bc400007 	ldb	r17,0(r23)
81114be8:	003d1306 	br	81114038 <__reset+0xfb0f4038>
81114bec:	01204534 	movhi	r4,33044
81114bf0:	2100c404 	addi	r4,r4,784
81114bf4:	0039883a 	mov	fp,zero
81114bf8:	d9003a15 	stw	r4,232(sp)
81114bfc:	04401e04 	movi	r17,120
81114c00:	003f8206 	br	81114a0c <__reset+0xfb0f4a0c>
81114c04:	18c03fcc 	andi	r3,r3,255
81114c08:	1805221e 	bne	r3,zero,81116094 <___svfprintf_internal_r+0x21b4>
81114c0c:	883d9526 	beq	r17,zero,81114264 <__reset+0xfb0f4264>
81114c10:	00c00044 	movi	r3,1
81114c14:	d8c02a15 	stw	r3,168(sp)
81114c18:	dc401405 	stb	r17,80(sp)
81114c1c:	d8002785 	stb	zero,158(sp)
81114c20:	003f9406 	br	81114a74 <__reset+0xfb0f4a74>
81114c24:	01204534 	movhi	r4,33044
81114c28:	2100c404 	addi	r4,r4,784
81114c2c:	d9003a15 	stw	r4,232(sp)
81114c30:	d8c02d15 	stw	r3,180(sp)
81114c34:	1025883a 	mov	r18,r2
81114c38:	04401e04 	movi	r17,120
81114c3c:	a584b03a 	or	r2,r20,r22
81114c40:	1000fa1e 	bne	r2,zero,8111502c <___svfprintf_internal_r+0x114c>
81114c44:	0039883a 	mov	fp,zero
81114c48:	00800084 	movi	r2,2
81114c4c:	10803fcc 	andi	r2,r2,255
81114c50:	00c00044 	movi	r3,1
81114c54:	10c21626 	beq	r2,r3,811154b0 <___svfprintf_internal_r+0x15d0>
81114c58:	00c00084 	movi	r3,2
81114c5c:	10fe301e 	bne	r2,r3,81114520 <__reset+0xfb0f4520>
81114c60:	003d7606 	br	8111423c <__reset+0xfb0f423c>
81114c64:	d8c02017 	ldw	r3,128(sp)
81114c68:	003e9506 	br	811146c0 <__reset+0xfb0f46c0>
81114c6c:	00801944 	movi	r2,101
81114c70:	14407c0e 	bge	r2,r17,81114e64 <___svfprintf_internal_r+0xf84>
81114c74:	d9003617 	ldw	r4,216(sp)
81114c78:	d9403717 	ldw	r5,220(sp)
81114c7c:	000d883a 	mov	r6,zero
81114c80:	000f883a 	mov	r7,zero
81114c84:	d8c03d15 	stw	r3,244(sp)
81114c88:	da003e15 	stw	r8,248(sp)
81114c8c:	1126af80 	call	81126af8 <__eqdf2>
81114c90:	d8c03d17 	ldw	r3,244(sp)
81114c94:	da003e17 	ldw	r8,248(sp)
81114c98:	1000f51e 	bne	r2,zero,81115070 <___svfprintf_internal_r+0x1190>
81114c9c:	d8801f17 	ldw	r2,124(sp)
81114ca0:	01204534 	movhi	r4,33044
81114ca4:	2100cb04 	addi	r4,r4,812
81114ca8:	18c00044 	addi	r3,r3,1
81114cac:	10800044 	addi	r2,r2,1
81114cb0:	41000015 	stw	r4,0(r8)
81114cb4:	01000044 	movi	r4,1
81114cb8:	41000115 	stw	r4,4(r8)
81114cbc:	d8c02015 	stw	r3,128(sp)
81114cc0:	d8801f15 	stw	r2,124(sp)
81114cc4:	010001c4 	movi	r4,7
81114cc8:	20826616 	blt	r4,r2,81115664 <___svfprintf_internal_r+0x1784>
81114ccc:	42000204 	addi	r8,r8,8
81114cd0:	d8802617 	ldw	r2,152(sp)
81114cd4:	d9403317 	ldw	r5,204(sp)
81114cd8:	11400216 	blt	r2,r5,81114ce4 <___svfprintf_internal_r+0xe04>
81114cdc:	9080004c 	andi	r2,r18,1
81114ce0:	103ed526 	beq	r2,zero,81114838 <__reset+0xfb0f4838>
81114ce4:	d8803817 	ldw	r2,224(sp)
81114ce8:	d9003417 	ldw	r4,208(sp)
81114cec:	d9403817 	ldw	r5,224(sp)
81114cf0:	1887883a 	add	r3,r3,r2
81114cf4:	d8801f17 	ldw	r2,124(sp)
81114cf8:	41000015 	stw	r4,0(r8)
81114cfc:	41400115 	stw	r5,4(r8)
81114d00:	10800044 	addi	r2,r2,1
81114d04:	d8c02015 	stw	r3,128(sp)
81114d08:	d8801f15 	stw	r2,124(sp)
81114d0c:	010001c4 	movi	r4,7
81114d10:	2082af16 	blt	r4,r2,811157d0 <___svfprintf_internal_r+0x18f0>
81114d14:	42000204 	addi	r8,r8,8
81114d18:	d8803317 	ldw	r2,204(sp)
81114d1c:	143fffc4 	addi	r16,r2,-1
81114d20:	043ec50e 	bge	zero,r16,81114838 <__reset+0xfb0f4838>
81114d24:	04400404 	movi	r17,16
81114d28:	d8801f17 	ldw	r2,124(sp)
81114d2c:	8c00860e 	bge	r17,r16,81114f48 <___svfprintf_internal_r+0x1068>
81114d30:	01604534 	movhi	r5,33044
81114d34:	2940cb84 	addi	r5,r5,814
81114d38:	d9402b15 	stw	r5,172(sp)
81114d3c:	058001c4 	movi	r22,7
81114d40:	dd002c17 	ldw	r20,176(sp)
81114d44:	00000306 	br	81114d54 <___svfprintf_internal_r+0xe74>
81114d48:	42000204 	addi	r8,r8,8
81114d4c:	843ffc04 	addi	r16,r16,-16
81114d50:	8c00800e 	bge	r17,r16,81114f54 <___svfprintf_internal_r+0x1074>
81114d54:	18c00404 	addi	r3,r3,16
81114d58:	10800044 	addi	r2,r2,1
81114d5c:	45400015 	stw	r21,0(r8)
81114d60:	44400115 	stw	r17,4(r8)
81114d64:	d8c02015 	stw	r3,128(sp)
81114d68:	d8801f15 	stw	r2,124(sp)
81114d6c:	b0bff60e 	bge	r22,r2,81114d48 <__reset+0xfb0f4d48>
81114d70:	d9801e04 	addi	r6,sp,120
81114d74:	a00b883a 	mov	r5,r20
81114d78:	9809883a 	mov	r4,r19
81114d7c:	1120b000 	call	81120b00 <__ssprint_r>
81114d80:	103d3e1e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81114d84:	d8c02017 	ldw	r3,128(sp)
81114d88:	d8801f17 	ldw	r2,124(sp)
81114d8c:	da000404 	addi	r8,sp,16
81114d90:	003fee06 	br	81114d4c <__reset+0xfb0f4d4c>
81114d94:	d9403117 	ldw	r5,196(sp)
81114d98:	d8802a17 	ldw	r2,168(sp)
81114d9c:	28adc83a 	sub	r22,r5,r2
81114da0:	05be650e 	bge	zero,r22,81114738 <__reset+0xfb0f4738>
81114da4:	07000404 	movi	fp,16
81114da8:	d8801f17 	ldw	r2,124(sp)
81114dac:	e583a20e 	bge	fp,r22,81115c38 <___svfprintf_internal_r+0x1d58>
81114db0:	01604534 	movhi	r5,33044
81114db4:	2940cb84 	addi	r5,r5,814
81114db8:	dc403015 	stw	r17,192(sp)
81114dbc:	d9402b15 	stw	r5,172(sp)
81114dc0:	b023883a 	mov	r17,r22
81114dc4:	050001c4 	movi	r20,7
81114dc8:	902d883a 	mov	r22,r18
81114dcc:	8025883a 	mov	r18,r16
81114dd0:	dc002c17 	ldw	r16,176(sp)
81114dd4:	00000306 	br	81114de4 <___svfprintf_internal_r+0xf04>
81114dd8:	8c7ffc04 	addi	r17,r17,-16
81114ddc:	42000204 	addi	r8,r8,8
81114de0:	e440110e 	bge	fp,r17,81114e28 <___svfprintf_internal_r+0xf48>
81114de4:	18c00404 	addi	r3,r3,16
81114de8:	10800044 	addi	r2,r2,1
81114dec:	45400015 	stw	r21,0(r8)
81114df0:	47000115 	stw	fp,4(r8)
81114df4:	d8c02015 	stw	r3,128(sp)
81114df8:	d8801f15 	stw	r2,124(sp)
81114dfc:	a0bff60e 	bge	r20,r2,81114dd8 <__reset+0xfb0f4dd8>
81114e00:	d9801e04 	addi	r6,sp,120
81114e04:	800b883a 	mov	r5,r16
81114e08:	9809883a 	mov	r4,r19
81114e0c:	1120b000 	call	81120b00 <__ssprint_r>
81114e10:	103d1a1e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81114e14:	8c7ffc04 	addi	r17,r17,-16
81114e18:	d8c02017 	ldw	r3,128(sp)
81114e1c:	d8801f17 	ldw	r2,124(sp)
81114e20:	da000404 	addi	r8,sp,16
81114e24:	e47fef16 	blt	fp,r17,81114de4 <__reset+0xfb0f4de4>
81114e28:	9021883a 	mov	r16,r18
81114e2c:	b025883a 	mov	r18,r22
81114e30:	882d883a 	mov	r22,r17
81114e34:	dc403017 	ldw	r17,192(sp)
81114e38:	d9002b17 	ldw	r4,172(sp)
81114e3c:	1d87883a 	add	r3,r3,r22
81114e40:	10800044 	addi	r2,r2,1
81114e44:	41000015 	stw	r4,0(r8)
81114e48:	45800115 	stw	r22,4(r8)
81114e4c:	d8c02015 	stw	r3,128(sp)
81114e50:	d8801f15 	stw	r2,124(sp)
81114e54:	010001c4 	movi	r4,7
81114e58:	20819a16 	blt	r4,r2,811154c4 <___svfprintf_internal_r+0x15e4>
81114e5c:	42000204 	addi	r8,r8,8
81114e60:	003e3506 	br	81114738 <__reset+0xfb0f4738>
81114e64:	d9403317 	ldw	r5,204(sp)
81114e68:	00800044 	movi	r2,1
81114e6c:	18c00044 	addi	r3,r3,1
81114e70:	1141710e 	bge	r2,r5,81115438 <___svfprintf_internal_r+0x1558>
81114e74:	dc401f17 	ldw	r17,124(sp)
81114e78:	00800044 	movi	r2,1
81114e7c:	40800115 	stw	r2,4(r8)
81114e80:	8c400044 	addi	r17,r17,1
81114e84:	44000015 	stw	r16,0(r8)
81114e88:	d8c02015 	stw	r3,128(sp)
81114e8c:	dc401f15 	stw	r17,124(sp)
81114e90:	008001c4 	movi	r2,7
81114e94:	14417416 	blt	r2,r17,81115468 <___svfprintf_internal_r+0x1588>
81114e98:	42000204 	addi	r8,r8,8
81114e9c:	d8803817 	ldw	r2,224(sp)
81114ea0:	d9003417 	ldw	r4,208(sp)
81114ea4:	8c400044 	addi	r17,r17,1
81114ea8:	10c7883a 	add	r3,r2,r3
81114eac:	40800115 	stw	r2,4(r8)
81114eb0:	41000015 	stw	r4,0(r8)
81114eb4:	d8c02015 	stw	r3,128(sp)
81114eb8:	dc401f15 	stw	r17,124(sp)
81114ebc:	008001c4 	movi	r2,7
81114ec0:	14417216 	blt	r2,r17,8111548c <___svfprintf_internal_r+0x15ac>
81114ec4:	45800204 	addi	r22,r8,8
81114ec8:	d9003617 	ldw	r4,216(sp)
81114ecc:	d9403717 	ldw	r5,220(sp)
81114ed0:	000d883a 	mov	r6,zero
81114ed4:	000f883a 	mov	r7,zero
81114ed8:	d8c03d15 	stw	r3,244(sp)
81114edc:	1126af80 	call	81126af8 <__eqdf2>
81114ee0:	d8c03d17 	ldw	r3,244(sp)
81114ee4:	1000b326 	beq	r2,zero,811151b4 <___svfprintf_internal_r+0x12d4>
81114ee8:	d9403317 	ldw	r5,204(sp)
81114eec:	84000044 	addi	r16,r16,1
81114ef0:	8c400044 	addi	r17,r17,1
81114ef4:	28bfffc4 	addi	r2,r5,-1
81114ef8:	1887883a 	add	r3,r3,r2
81114efc:	b0800115 	stw	r2,4(r22)
81114f00:	b4000015 	stw	r16,0(r22)
81114f04:	d8c02015 	stw	r3,128(sp)
81114f08:	dc401f15 	stw	r17,124(sp)
81114f0c:	008001c4 	movi	r2,7
81114f10:	1440d216 	blt	r2,r17,8111525c <___svfprintf_internal_r+0x137c>
81114f14:	b5800204 	addi	r22,r22,8
81114f18:	d9003b17 	ldw	r4,236(sp)
81114f1c:	df0022c4 	addi	fp,sp,139
81114f20:	8c400044 	addi	r17,r17,1
81114f24:	20c7883a 	add	r3,r4,r3
81114f28:	b7000015 	stw	fp,0(r22)
81114f2c:	b1000115 	stw	r4,4(r22)
81114f30:	d8c02015 	stw	r3,128(sp)
81114f34:	dc401f15 	stw	r17,124(sp)
81114f38:	008001c4 	movi	r2,7
81114f3c:	14400e16 	blt	r2,r17,81114f78 <___svfprintf_internal_r+0x1098>
81114f40:	b2000204 	addi	r8,r22,8
81114f44:	003e3c06 	br	81114838 <__reset+0xfb0f4838>
81114f48:	01204534 	movhi	r4,33044
81114f4c:	2100cb84 	addi	r4,r4,814
81114f50:	d9002b15 	stw	r4,172(sp)
81114f54:	d9002b17 	ldw	r4,172(sp)
81114f58:	1c07883a 	add	r3,r3,r16
81114f5c:	44000115 	stw	r16,4(r8)
81114f60:	41000015 	stw	r4,0(r8)
81114f64:	10800044 	addi	r2,r2,1
81114f68:	d8c02015 	stw	r3,128(sp)
81114f6c:	d8801f15 	stw	r2,124(sp)
81114f70:	010001c4 	movi	r4,7
81114f74:	20be2f0e 	bge	r4,r2,81114834 <__reset+0xfb0f4834>
81114f78:	d9402c17 	ldw	r5,176(sp)
81114f7c:	d9801e04 	addi	r6,sp,120
81114f80:	9809883a 	mov	r4,r19
81114f84:	1120b000 	call	81120b00 <__ssprint_r>
81114f88:	103cbc1e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81114f8c:	d8c02017 	ldw	r3,128(sp)
81114f90:	da000404 	addi	r8,sp,16
81114f94:	003e2806 	br	81114838 <__reset+0xfb0f4838>
81114f98:	d9402c17 	ldw	r5,176(sp)
81114f9c:	d9801e04 	addi	r6,sp,120
81114fa0:	9809883a 	mov	r4,r19
81114fa4:	1120b000 	call	81120b00 <__ssprint_r>
81114fa8:	103e5f26 	beq	r2,zero,81114928 <__reset+0xfb0f4928>
81114fac:	003cb306 	br	8111427c <__reset+0xfb0f427c>
81114fb0:	d9402c17 	ldw	r5,176(sp)
81114fb4:	d9801e04 	addi	r6,sp,120
81114fb8:	9809883a 	mov	r4,r19
81114fbc:	1120b000 	call	81120b00 <__ssprint_r>
81114fc0:	103cae1e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81114fc4:	d8c02017 	ldw	r3,128(sp)
81114fc8:	da000404 	addi	r8,sp,16
81114fcc:	003e0d06 	br	81114804 <__reset+0xfb0f4804>
81114fd0:	d9402c17 	ldw	r5,176(sp)
81114fd4:	d9801e04 	addi	r6,sp,120
81114fd8:	9809883a 	mov	r4,r19
81114fdc:	1120b000 	call	81120b00 <__ssprint_r>
81114fe0:	103ca61e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81114fe4:	d8c02017 	ldw	r3,128(sp)
81114fe8:	da000404 	addi	r8,sp,16
81114fec:	003dc106 	br	811146f4 <__reset+0xfb0f46f4>
81114ff0:	d9402c17 	ldw	r5,176(sp)
81114ff4:	d9801e04 	addi	r6,sp,120
81114ff8:	9809883a 	mov	r4,r19
81114ffc:	1120b000 	call	81120b00 <__ssprint_r>
81115000:	103c9e1e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115004:	d8c02017 	ldw	r3,128(sp)
81115008:	da000404 	addi	r8,sp,16
8111500c:	003dc706 	br	8111472c <__reset+0xfb0f472c>
81115010:	d8802917 	ldw	r2,164(sp)
81115014:	d8002785 	stb	zero,158(sp)
81115018:	103f0816 	blt	r2,zero,81114c3c <__reset+0xfb0f4c3c>
8111501c:	00ffdfc4 	movi	r3,-129
81115020:	a584b03a 	or	r2,r20,r22
81115024:	90e4703a 	and	r18,r18,r3
81115028:	103c8126 	beq	r2,zero,81114230 <__reset+0xfb0f4230>
8111502c:	0039883a 	mov	fp,zero
81115030:	003e7606 	br	81114a0c <__reset+0xfb0f4a0c>
81115034:	9080040c 	andi	r2,r18,16
81115038:	10013d26 	beq	r2,zero,81115530 <___svfprintf_internal_r+0x1650>
8111503c:	d9002d17 	ldw	r4,180(sp)
81115040:	d9402917 	ldw	r5,164(sp)
81115044:	d8002785 	stb	zero,158(sp)
81115048:	20800104 	addi	r2,r4,4
8111504c:	25000017 	ldw	r20,0(r4)
81115050:	002d883a 	mov	r22,zero
81115054:	28013f16 	blt	r5,zero,81115554 <___svfprintf_internal_r+0x1674>
81115058:	00ffdfc4 	movi	r3,-129
8111505c:	d8802d15 	stw	r2,180(sp)
81115060:	90e4703a 	and	r18,r18,r3
81115064:	a03d2b26 	beq	r20,zero,81114514 <__reset+0xfb0f4514>
81115068:	0039883a 	mov	fp,zero
8111506c:	003d2e06 	br	81114528 <__reset+0xfb0f4528>
81115070:	dc402617 	ldw	r17,152(sp)
81115074:	0441830e 	bge	zero,r17,81115684 <___svfprintf_internal_r+0x17a4>
81115078:	dc403217 	ldw	r17,200(sp)
8111507c:	d8803317 	ldw	r2,204(sp)
81115080:	1440010e 	bge	r2,r17,81115088 <___svfprintf_internal_r+0x11a8>
81115084:	1023883a 	mov	r17,r2
81115088:	04400a0e 	bge	zero,r17,811150b4 <___svfprintf_internal_r+0x11d4>
8111508c:	d8801f17 	ldw	r2,124(sp)
81115090:	1c47883a 	add	r3,r3,r17
81115094:	44000015 	stw	r16,0(r8)
81115098:	10800044 	addi	r2,r2,1
8111509c:	44400115 	stw	r17,4(r8)
811150a0:	d8c02015 	stw	r3,128(sp)
811150a4:	d8801f15 	stw	r2,124(sp)
811150a8:	010001c4 	movi	r4,7
811150ac:	20827516 	blt	r4,r2,81115a84 <___svfprintf_internal_r+0x1ba4>
811150b0:	42000204 	addi	r8,r8,8
811150b4:	88027b16 	blt	r17,zero,81115aa4 <___svfprintf_internal_r+0x1bc4>
811150b8:	d9003217 	ldw	r4,200(sp)
811150bc:	2463c83a 	sub	r17,r4,r17
811150c0:	0440990e 	bge	zero,r17,81115328 <___svfprintf_internal_r+0x1448>
811150c4:	05800404 	movi	r22,16
811150c8:	d8801f17 	ldw	r2,124(sp)
811150cc:	b441530e 	bge	r22,r17,8111561c <___svfprintf_internal_r+0x173c>
811150d0:	01204534 	movhi	r4,33044
811150d4:	2100cb84 	addi	r4,r4,814
811150d8:	d9002b15 	stw	r4,172(sp)
811150dc:	070001c4 	movi	fp,7
811150e0:	dd002c17 	ldw	r20,176(sp)
811150e4:	00000306 	br	811150f4 <___svfprintf_internal_r+0x1214>
811150e8:	42000204 	addi	r8,r8,8
811150ec:	8c7ffc04 	addi	r17,r17,-16
811150f0:	b4414d0e 	bge	r22,r17,81115628 <___svfprintf_internal_r+0x1748>
811150f4:	18c00404 	addi	r3,r3,16
811150f8:	10800044 	addi	r2,r2,1
811150fc:	45400015 	stw	r21,0(r8)
81115100:	45800115 	stw	r22,4(r8)
81115104:	d8c02015 	stw	r3,128(sp)
81115108:	d8801f15 	stw	r2,124(sp)
8111510c:	e0bff60e 	bge	fp,r2,811150e8 <__reset+0xfb0f50e8>
81115110:	d9801e04 	addi	r6,sp,120
81115114:	a00b883a 	mov	r5,r20
81115118:	9809883a 	mov	r4,r19
8111511c:	1120b000 	call	81120b00 <__ssprint_r>
81115120:	103c561e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115124:	d8c02017 	ldw	r3,128(sp)
81115128:	d8801f17 	ldw	r2,124(sp)
8111512c:	da000404 	addi	r8,sp,16
81115130:	003fee06 	br	811150ec <__reset+0xfb0f50ec>
81115134:	d9402c17 	ldw	r5,176(sp)
81115138:	d9801e04 	addi	r6,sp,120
8111513c:	9809883a 	mov	r4,r19
81115140:	1120b000 	call	81120b00 <__ssprint_r>
81115144:	103c4d1e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115148:	d8c02017 	ldw	r3,128(sp)
8111514c:	df002787 	ldb	fp,158(sp)
81115150:	da000404 	addi	r8,sp,16
81115154:	003d5a06 	br	811146c0 <__reset+0xfb0f46c0>
81115158:	9080040c 	andi	r2,r18,16
8111515c:	10005c26 	beq	r2,zero,811152d0 <___svfprintf_internal_r+0x13f0>
81115160:	d9402d17 	ldw	r5,180(sp)
81115164:	d8c02917 	ldw	r3,164(sp)
81115168:	d8002785 	stb	zero,158(sp)
8111516c:	28800104 	addi	r2,r5,4
81115170:	2d000017 	ldw	r20,0(r5)
81115174:	002d883a 	mov	r22,zero
81115178:	18005e16 	blt	r3,zero,811152f4 <___svfprintf_internal_r+0x1414>
8111517c:	00ffdfc4 	movi	r3,-129
81115180:	d8802d15 	stw	r2,180(sp)
81115184:	90e4703a 	and	r18,r18,r3
81115188:	0039883a 	mov	fp,zero
8111518c:	a03dfe26 	beq	r20,zero,81114988 <__reset+0xfb0f4988>
81115190:	00800244 	movi	r2,9
81115194:	153cb336 	bltu	r2,r20,81114464 <__reset+0xfb0f4464>
81115198:	a5000c04 	addi	r20,r20,48
8111519c:	dc001dc4 	addi	r16,sp,119
811151a0:	dd001dc5 	stb	r20,119(sp)
811151a4:	d8c02817 	ldw	r3,160(sp)
811151a8:	1c07c83a 	sub	r3,r3,r16
811151ac:	d8c02e15 	stw	r3,184(sp)
811151b0:	003cf506 	br	81114588 <__reset+0xfb0f4588>
811151b4:	d8803317 	ldw	r2,204(sp)
811151b8:	143fffc4 	addi	r16,r2,-1
811151bc:	043f560e 	bge	zero,r16,81114f18 <__reset+0xfb0f4f18>
811151c0:	07000404 	movi	fp,16
811151c4:	e403530e 	bge	fp,r16,81115f14 <___svfprintf_internal_r+0x2034>
811151c8:	01604534 	movhi	r5,33044
811151cc:	2940cb84 	addi	r5,r5,814
811151d0:	d9402b15 	stw	r5,172(sp)
811151d4:	01c001c4 	movi	r7,7
811151d8:	dd002c17 	ldw	r20,176(sp)
811151dc:	00000306 	br	811151ec <___svfprintf_internal_r+0x130c>
811151e0:	843ffc04 	addi	r16,r16,-16
811151e4:	b5800204 	addi	r22,r22,8
811151e8:	e400130e 	bge	fp,r16,81115238 <___svfprintf_internal_r+0x1358>
811151ec:	18c00404 	addi	r3,r3,16
811151f0:	8c400044 	addi	r17,r17,1
811151f4:	b5400015 	stw	r21,0(r22)
811151f8:	b7000115 	stw	fp,4(r22)
811151fc:	d8c02015 	stw	r3,128(sp)
81115200:	dc401f15 	stw	r17,124(sp)
81115204:	3c7ff60e 	bge	r7,r17,811151e0 <__reset+0xfb0f51e0>
81115208:	d9801e04 	addi	r6,sp,120
8111520c:	a00b883a 	mov	r5,r20
81115210:	9809883a 	mov	r4,r19
81115214:	d9c03d15 	stw	r7,244(sp)
81115218:	1120b000 	call	81120b00 <__ssprint_r>
8111521c:	d9c03d17 	ldw	r7,244(sp)
81115220:	103c161e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115224:	843ffc04 	addi	r16,r16,-16
81115228:	d8c02017 	ldw	r3,128(sp)
8111522c:	dc401f17 	ldw	r17,124(sp)
81115230:	dd800404 	addi	r22,sp,16
81115234:	e43fed16 	blt	fp,r16,811151ec <__reset+0xfb0f51ec>
81115238:	d8802b17 	ldw	r2,172(sp)
8111523c:	1c07883a 	add	r3,r3,r16
81115240:	8c400044 	addi	r17,r17,1
81115244:	b0800015 	stw	r2,0(r22)
81115248:	b4000115 	stw	r16,4(r22)
8111524c:	d8c02015 	stw	r3,128(sp)
81115250:	dc401f15 	stw	r17,124(sp)
81115254:	008001c4 	movi	r2,7
81115258:	147f2e0e 	bge	r2,r17,81114f14 <__reset+0xfb0f4f14>
8111525c:	d9402c17 	ldw	r5,176(sp)
81115260:	d9801e04 	addi	r6,sp,120
81115264:	9809883a 	mov	r4,r19
81115268:	1120b000 	call	81120b00 <__ssprint_r>
8111526c:	103c031e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115270:	d8c02017 	ldw	r3,128(sp)
81115274:	dc401f17 	ldw	r17,124(sp)
81115278:	dd800404 	addi	r22,sp,16
8111527c:	003f2606 	br	81114f18 <__reset+0xfb0f4f18>
81115280:	9080040c 	andi	r2,r18,16
81115284:	1000c326 	beq	r2,zero,81115594 <___svfprintf_internal_r+0x16b4>
81115288:	d8802d17 	ldw	r2,180(sp)
8111528c:	15000017 	ldw	r20,0(r2)
81115290:	10800104 	addi	r2,r2,4
81115294:	d8802d15 	stw	r2,180(sp)
81115298:	a02dd7fa 	srai	r22,r20,31
8111529c:	b005883a 	mov	r2,r22
811152a0:	103c680e 	bge	r2,zero,81114444 <__reset+0xfb0f4444>
811152a4:	0529c83a 	sub	r20,zero,r20
811152a8:	a004c03a 	cmpne	r2,r20,zero
811152ac:	05adc83a 	sub	r22,zero,r22
811152b0:	b0adc83a 	sub	r22,r22,r2
811152b4:	d8802917 	ldw	r2,164(sp)
811152b8:	07000b44 	movi	fp,45
811152bc:	df002785 	stb	fp,158(sp)
811152c0:	10022e16 	blt	r2,zero,81115b7c <___svfprintf_internal_r+0x1c9c>
811152c4:	00bfdfc4 	movi	r2,-129
811152c8:	90a4703a 	and	r18,r18,r2
811152cc:	003c6406 	br	81114460 <__reset+0xfb0f4460>
811152d0:	9080100c 	andi	r2,r18,64
811152d4:	d8002785 	stb	zero,158(sp)
811152d8:	10012526 	beq	r2,zero,81115770 <___svfprintf_internal_r+0x1890>
811152dc:	d9002d17 	ldw	r4,180(sp)
811152e0:	d9402917 	ldw	r5,164(sp)
811152e4:	002d883a 	mov	r22,zero
811152e8:	20800104 	addi	r2,r4,4
811152ec:	2500000b 	ldhu	r20,0(r4)
811152f0:	283fa20e 	bge	r5,zero,8111517c <__reset+0xfb0f517c>
811152f4:	d8802d15 	stw	r2,180(sp)
811152f8:	0039883a 	mov	fp,zero
811152fc:	a584b03a 	or	r2,r20,r22
81115300:	103c571e 	bne	r2,zero,81114460 <__reset+0xfb0f4460>
81115304:	00800044 	movi	r2,1
81115308:	003e5006 	br	81114c4c <__reset+0xfb0f4c4c>
8111530c:	d9402c17 	ldw	r5,176(sp)
81115310:	d9801e04 	addi	r6,sp,120
81115314:	9809883a 	mov	r4,r19
81115318:	1120b000 	call	81120b00 <__ssprint_r>
8111531c:	103bd71e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115320:	d8c02017 	ldw	r3,128(sp)
81115324:	da000404 	addi	r8,sp,16
81115328:	d9003217 	ldw	r4,200(sp)
8111532c:	d8802617 	ldw	r2,152(sp)
81115330:	d9403317 	ldw	r5,204(sp)
81115334:	8123883a 	add	r17,r16,r4
81115338:	11400216 	blt	r2,r5,81115344 <___svfprintf_internal_r+0x1464>
8111533c:	9100004c 	andi	r4,r18,1
81115340:	20000d26 	beq	r4,zero,81115378 <___svfprintf_internal_r+0x1498>
81115344:	d9003817 	ldw	r4,224(sp)
81115348:	d9403417 	ldw	r5,208(sp)
8111534c:	1907883a 	add	r3,r3,r4
81115350:	d9001f17 	ldw	r4,124(sp)
81115354:	41400015 	stw	r5,0(r8)
81115358:	d9403817 	ldw	r5,224(sp)
8111535c:	21000044 	addi	r4,r4,1
81115360:	d8c02015 	stw	r3,128(sp)
81115364:	41400115 	stw	r5,4(r8)
81115368:	d9001f15 	stw	r4,124(sp)
8111536c:	014001c4 	movi	r5,7
81115370:	2901dc16 	blt	r5,r4,81115ae4 <___svfprintf_internal_r+0x1c04>
81115374:	42000204 	addi	r8,r8,8
81115378:	d9003317 	ldw	r4,204(sp)
8111537c:	8121883a 	add	r16,r16,r4
81115380:	2085c83a 	sub	r2,r4,r2
81115384:	8461c83a 	sub	r16,r16,r17
81115388:	1400010e 	bge	r2,r16,81115390 <___svfprintf_internal_r+0x14b0>
8111538c:	1021883a 	mov	r16,r2
81115390:	04000a0e 	bge	zero,r16,811153bc <___svfprintf_internal_r+0x14dc>
81115394:	d9001f17 	ldw	r4,124(sp)
81115398:	1c07883a 	add	r3,r3,r16
8111539c:	44400015 	stw	r17,0(r8)
811153a0:	21000044 	addi	r4,r4,1
811153a4:	44000115 	stw	r16,4(r8)
811153a8:	d8c02015 	stw	r3,128(sp)
811153ac:	d9001f15 	stw	r4,124(sp)
811153b0:	014001c4 	movi	r5,7
811153b4:	2901e616 	blt	r5,r4,81115b50 <___svfprintf_internal_r+0x1c70>
811153b8:	42000204 	addi	r8,r8,8
811153bc:	8001f616 	blt	r16,zero,81115b98 <___svfprintf_internal_r+0x1cb8>
811153c0:	1421c83a 	sub	r16,r2,r16
811153c4:	043d1c0e 	bge	zero,r16,81114838 <__reset+0xfb0f4838>
811153c8:	04400404 	movi	r17,16
811153cc:	d8801f17 	ldw	r2,124(sp)
811153d0:	8c3edd0e 	bge	r17,r16,81114f48 <__reset+0xfb0f4f48>
811153d4:	01604534 	movhi	r5,33044
811153d8:	2940cb84 	addi	r5,r5,814
811153dc:	d9402b15 	stw	r5,172(sp)
811153e0:	058001c4 	movi	r22,7
811153e4:	dd002c17 	ldw	r20,176(sp)
811153e8:	00000306 	br	811153f8 <___svfprintf_internal_r+0x1518>
811153ec:	42000204 	addi	r8,r8,8
811153f0:	843ffc04 	addi	r16,r16,-16
811153f4:	8c3ed70e 	bge	r17,r16,81114f54 <__reset+0xfb0f4f54>
811153f8:	18c00404 	addi	r3,r3,16
811153fc:	10800044 	addi	r2,r2,1
81115400:	45400015 	stw	r21,0(r8)
81115404:	44400115 	stw	r17,4(r8)
81115408:	d8c02015 	stw	r3,128(sp)
8111540c:	d8801f15 	stw	r2,124(sp)
81115410:	b0bff60e 	bge	r22,r2,811153ec <__reset+0xfb0f53ec>
81115414:	d9801e04 	addi	r6,sp,120
81115418:	a00b883a 	mov	r5,r20
8111541c:	9809883a 	mov	r4,r19
81115420:	1120b000 	call	81120b00 <__ssprint_r>
81115424:	103b951e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115428:	d8c02017 	ldw	r3,128(sp)
8111542c:	d8801f17 	ldw	r2,124(sp)
81115430:	da000404 	addi	r8,sp,16
81115434:	003fee06 	br	811153f0 <__reset+0xfb0f53f0>
81115438:	9088703a 	and	r4,r18,r2
8111543c:	203e8d1e 	bne	r4,zero,81114e74 <__reset+0xfb0f4e74>
81115440:	dc401f17 	ldw	r17,124(sp)
81115444:	40800115 	stw	r2,4(r8)
81115448:	44000015 	stw	r16,0(r8)
8111544c:	8c400044 	addi	r17,r17,1
81115450:	d8c02015 	stw	r3,128(sp)
81115454:	dc401f15 	stw	r17,124(sp)
81115458:	008001c4 	movi	r2,7
8111545c:	147f7f16 	blt	r2,r17,8111525c <__reset+0xfb0f525c>
81115460:	45800204 	addi	r22,r8,8
81115464:	003eac06 	br	81114f18 <__reset+0xfb0f4f18>
81115468:	d9402c17 	ldw	r5,176(sp)
8111546c:	d9801e04 	addi	r6,sp,120
81115470:	9809883a 	mov	r4,r19
81115474:	1120b000 	call	81120b00 <__ssprint_r>
81115478:	103b801e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
8111547c:	d8c02017 	ldw	r3,128(sp)
81115480:	dc401f17 	ldw	r17,124(sp)
81115484:	da000404 	addi	r8,sp,16
81115488:	003e8406 	br	81114e9c <__reset+0xfb0f4e9c>
8111548c:	d9402c17 	ldw	r5,176(sp)
81115490:	d9801e04 	addi	r6,sp,120
81115494:	9809883a 	mov	r4,r19
81115498:	1120b000 	call	81120b00 <__ssprint_r>
8111549c:	103b771e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
811154a0:	d8c02017 	ldw	r3,128(sp)
811154a4:	dc401f17 	ldw	r17,124(sp)
811154a8:	dd800404 	addi	r22,sp,16
811154ac:	003e8606 	br	81114ec8 <__reset+0xfb0f4ec8>
811154b0:	0029883a 	mov	r20,zero
811154b4:	a5000c04 	addi	r20,r20,48
811154b8:	dc001dc4 	addi	r16,sp,119
811154bc:	dd001dc5 	stb	r20,119(sp)
811154c0:	003f3806 	br	811151a4 <__reset+0xfb0f51a4>
811154c4:	d9402c17 	ldw	r5,176(sp)
811154c8:	d9801e04 	addi	r6,sp,120
811154cc:	9809883a 	mov	r4,r19
811154d0:	1120b000 	call	81120b00 <__ssprint_r>
811154d4:	103b691e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
811154d8:	d8c02017 	ldw	r3,128(sp)
811154dc:	da000404 	addi	r8,sp,16
811154e0:	003c9506 	br	81114738 <__reset+0xfb0f4738>
811154e4:	d9003617 	ldw	r4,216(sp)
811154e8:	d9403717 	ldw	r5,220(sp)
811154ec:	da003e15 	stw	r8,248(sp)
811154f0:	111e9140 	call	8111e914 <__fpclassifyd>
811154f4:	da003e17 	ldw	r8,248(sp)
811154f8:	1000bd1e 	bne	r2,zero,811157f0 <___svfprintf_internal_r+0x1910>
811154fc:	008011c4 	movi	r2,71
81115500:	14411e0e 	bge	r2,r17,8111597c <___svfprintf_internal_r+0x1a9c>
81115504:	04204534 	movhi	r16,33044
81115508:	8400be04 	addi	r16,r16,760
8111550c:	00c000c4 	movi	r3,3
81115510:	00bfdfc4 	movi	r2,-129
81115514:	d8c02a15 	stw	r3,168(sp)
81115518:	90a4703a 	and	r18,r18,r2
8111551c:	df002783 	ldbu	fp,158(sp)
81115520:	d8c02e15 	stw	r3,184(sp)
81115524:	d8002915 	stw	zero,164(sp)
81115528:	d8003215 	stw	zero,200(sp)
8111552c:	003c1c06 	br	811145a0 <__reset+0xfb0f45a0>
81115530:	9080100c 	andi	r2,r18,64
81115534:	d8002785 	stb	zero,158(sp)
81115538:	10009426 	beq	r2,zero,8111578c <___svfprintf_internal_r+0x18ac>
8111553c:	d8c02d17 	ldw	r3,180(sp)
81115540:	d9002917 	ldw	r4,164(sp)
81115544:	002d883a 	mov	r22,zero
81115548:	18800104 	addi	r2,r3,4
8111554c:	1d00000b 	ldhu	r20,0(r3)
81115550:	203ec10e 	bge	r4,zero,81115058 <__reset+0xfb0f5058>
81115554:	a586b03a 	or	r3,r20,r22
81115558:	d8802d15 	stw	r2,180(sp)
8111555c:	183ec21e 	bne	r3,zero,81115068 <__reset+0xfb0f5068>
81115560:	0039883a 	mov	fp,zero
81115564:	0005883a 	mov	r2,zero
81115568:	003db806 	br	81114c4c <__reset+0xfb0f4c4c>
8111556c:	d8802d17 	ldw	r2,180(sp)
81115570:	d8c02d17 	ldw	r3,180(sp)
81115574:	d9002d17 	ldw	r4,180(sp)
81115578:	10800017 	ldw	r2,0(r2)
8111557c:	18c00117 	ldw	r3,4(r3)
81115580:	21000204 	addi	r4,r4,8
81115584:	d8803615 	stw	r2,216(sp)
81115588:	d8c03715 	stw	r3,220(sp)
8111558c:	d9002d15 	stw	r4,180(sp)
81115590:	003b8206 	br	8111439c <__reset+0xfb0f439c>
81115594:	9080100c 	andi	r2,r18,64
81115598:	10010726 	beq	r2,zero,811159b8 <___svfprintf_internal_r+0x1ad8>
8111559c:	d8c02d17 	ldw	r3,180(sp)
811155a0:	1d00000f 	ldh	r20,0(r3)
811155a4:	18c00104 	addi	r3,r3,4
811155a8:	d8c02d15 	stw	r3,180(sp)
811155ac:	a02dd7fa 	srai	r22,r20,31
811155b0:	b005883a 	mov	r2,r22
811155b4:	003ba206 	br	81114440 <__reset+0xfb0f4440>
811155b8:	9080100c 	andi	r2,r18,64
811155bc:	10010526 	beq	r2,zero,811159d4 <___svfprintf_internal_r+0x1af4>
811155c0:	d9002d17 	ldw	r4,180(sp)
811155c4:	002d883a 	mov	r22,zero
811155c8:	2500000b 	ldhu	r20,0(r4)
811155cc:	21000104 	addi	r4,r4,4
811155d0:	d9002d15 	stw	r4,180(sp)
811155d4:	003cfe06 	br	811149d0 <__reset+0xfb0f49d0>
811155d8:	bc400007 	ldb	r17,0(r23)
811155dc:	003a9606 	br	81114038 <__reset+0xfb0f4038>
811155e0:	9080040c 	andi	r2,r18,16
811155e4:	10010126 	beq	r2,zero,811159ec <___svfprintf_internal_r+0x1b0c>
811155e8:	d9402d17 	ldw	r5,180(sp)
811155ec:	d8c02f17 	ldw	r3,188(sp)
811155f0:	28800017 	ldw	r2,0(r5)
811155f4:	29400104 	addi	r5,r5,4
811155f8:	d9402d15 	stw	r5,180(sp)
811155fc:	10c00015 	stw	r3,0(r2)
81115600:	003a6406 	br	81113f94 <__reset+0xfb0f3f94>
81115604:	d9002917 	ldw	r4,164(sp)
81115608:	d8002785 	stb	zero,158(sp)
8111560c:	203d8d16 	blt	r4,zero,81114c44 <__reset+0xfb0f4c44>
81115610:	00bfdfc4 	movi	r2,-129
81115614:	90a4703a 	and	r18,r18,r2
81115618:	003b0506 	br	81114230 <__reset+0xfb0f4230>
8111561c:	01604534 	movhi	r5,33044
81115620:	2940cb84 	addi	r5,r5,814
81115624:	d9402b15 	stw	r5,172(sp)
81115628:	d9402b17 	ldw	r5,172(sp)
8111562c:	1c47883a 	add	r3,r3,r17
81115630:	10800044 	addi	r2,r2,1
81115634:	41400015 	stw	r5,0(r8)
81115638:	44400115 	stw	r17,4(r8)
8111563c:	d8c02015 	stw	r3,128(sp)
81115640:	d8801f15 	stw	r2,124(sp)
81115644:	010001c4 	movi	r4,7
81115648:	20bf3016 	blt	r4,r2,8111530c <__reset+0xfb0f530c>
8111564c:	42000204 	addi	r8,r8,8
81115650:	003f3506 	br	81115328 <__reset+0xfb0f5328>
81115654:	01204534 	movhi	r4,33044
81115658:	2100cb84 	addi	r4,r4,814
8111565c:	d9002b15 	stw	r4,172(sp)
81115660:	003c5e06 	br	811147dc <__reset+0xfb0f47dc>
81115664:	d9402c17 	ldw	r5,176(sp)
81115668:	d9801e04 	addi	r6,sp,120
8111566c:	9809883a 	mov	r4,r19
81115670:	1120b000 	call	81120b00 <__ssprint_r>
81115674:	103b011e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115678:	d8c02017 	ldw	r3,128(sp)
8111567c:	da000404 	addi	r8,sp,16
81115680:	003d9306 	br	81114cd0 <__reset+0xfb0f4cd0>
81115684:	d8801f17 	ldw	r2,124(sp)
81115688:	01604534 	movhi	r5,33044
8111568c:	01000044 	movi	r4,1
81115690:	18c00044 	addi	r3,r3,1
81115694:	10800044 	addi	r2,r2,1
81115698:	2940cb04 	addi	r5,r5,812
8111569c:	41000115 	stw	r4,4(r8)
811156a0:	41400015 	stw	r5,0(r8)
811156a4:	d8c02015 	stw	r3,128(sp)
811156a8:	d8801f15 	stw	r2,124(sp)
811156ac:	010001c4 	movi	r4,7
811156b0:	2080b516 	blt	r4,r2,81115988 <___svfprintf_internal_r+0x1aa8>
811156b4:	42000204 	addi	r8,r8,8
811156b8:	8800041e 	bne	r17,zero,811156cc <___svfprintf_internal_r+0x17ec>
811156bc:	d8803317 	ldw	r2,204(sp)
811156c0:	1000021e 	bne	r2,zero,811156cc <___svfprintf_internal_r+0x17ec>
811156c4:	9080004c 	andi	r2,r18,1
811156c8:	103c5b26 	beq	r2,zero,81114838 <__reset+0xfb0f4838>
811156cc:	d9003817 	ldw	r4,224(sp)
811156d0:	d8801f17 	ldw	r2,124(sp)
811156d4:	d9403417 	ldw	r5,208(sp)
811156d8:	20c7883a 	add	r3,r4,r3
811156dc:	10800044 	addi	r2,r2,1
811156e0:	41000115 	stw	r4,4(r8)
811156e4:	41400015 	stw	r5,0(r8)
811156e8:	d8c02015 	stw	r3,128(sp)
811156ec:	d8801f15 	stw	r2,124(sp)
811156f0:	010001c4 	movi	r4,7
811156f4:	20818016 	blt	r4,r2,81115cf8 <___svfprintf_internal_r+0x1e18>
811156f8:	42000204 	addi	r8,r8,8
811156fc:	0463c83a 	sub	r17,zero,r17
81115700:	0440cb0e 	bge	zero,r17,81115a30 <___svfprintf_internal_r+0x1b50>
81115704:	05800404 	movi	r22,16
81115708:	b440e80e 	bge	r22,r17,81115aac <___svfprintf_internal_r+0x1bcc>
8111570c:	01604534 	movhi	r5,33044
81115710:	2940cb84 	addi	r5,r5,814
81115714:	d9402b15 	stw	r5,172(sp)
81115718:	070001c4 	movi	fp,7
8111571c:	dd002c17 	ldw	r20,176(sp)
81115720:	00000306 	br	81115730 <___svfprintf_internal_r+0x1850>
81115724:	42000204 	addi	r8,r8,8
81115728:	8c7ffc04 	addi	r17,r17,-16
8111572c:	b440e20e 	bge	r22,r17,81115ab8 <___svfprintf_internal_r+0x1bd8>
81115730:	18c00404 	addi	r3,r3,16
81115734:	10800044 	addi	r2,r2,1
81115738:	45400015 	stw	r21,0(r8)
8111573c:	45800115 	stw	r22,4(r8)
81115740:	d8c02015 	stw	r3,128(sp)
81115744:	d8801f15 	stw	r2,124(sp)
81115748:	e0bff60e 	bge	fp,r2,81115724 <__reset+0xfb0f5724>
8111574c:	d9801e04 	addi	r6,sp,120
81115750:	a00b883a 	mov	r5,r20
81115754:	9809883a 	mov	r4,r19
81115758:	1120b000 	call	81120b00 <__ssprint_r>
8111575c:	103ac71e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115760:	d8c02017 	ldw	r3,128(sp)
81115764:	d8801f17 	ldw	r2,124(sp)
81115768:	da000404 	addi	r8,sp,16
8111576c:	003fee06 	br	81115728 <__reset+0xfb0f5728>
81115770:	d8c02d17 	ldw	r3,180(sp)
81115774:	d9002917 	ldw	r4,164(sp)
81115778:	002d883a 	mov	r22,zero
8111577c:	18800104 	addi	r2,r3,4
81115780:	1d000017 	ldw	r20,0(r3)
81115784:	203e7d0e 	bge	r4,zero,8111517c <__reset+0xfb0f517c>
81115788:	003eda06 	br	811152f4 <__reset+0xfb0f52f4>
8111578c:	d9402d17 	ldw	r5,180(sp)
81115790:	d8c02917 	ldw	r3,164(sp)
81115794:	002d883a 	mov	r22,zero
81115798:	28800104 	addi	r2,r5,4
8111579c:	2d000017 	ldw	r20,0(r5)
811157a0:	183e2d0e 	bge	r3,zero,81115058 <__reset+0xfb0f5058>
811157a4:	003f6b06 	br	81115554 <__reset+0xfb0f5554>
811157a8:	d8c02d15 	stw	r3,180(sp)
811157ac:	0039883a 	mov	fp,zero
811157b0:	003ed206 	br	811152fc <__reset+0xfb0f52fc>
811157b4:	bc400043 	ldbu	r17,1(r23)
811157b8:	94800814 	ori	r18,r18,32
811157bc:	bdc00044 	addi	r23,r23,1
811157c0:	8c403fcc 	andi	r17,r17,255
811157c4:	8c40201c 	xori	r17,r17,128
811157c8:	8c7fe004 	addi	r17,r17,-128
811157cc:	003a1a06 	br	81114038 <__reset+0xfb0f4038>
811157d0:	d9402c17 	ldw	r5,176(sp)
811157d4:	d9801e04 	addi	r6,sp,120
811157d8:	9809883a 	mov	r4,r19
811157dc:	1120b000 	call	81120b00 <__ssprint_r>
811157e0:	103aa61e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
811157e4:	d8c02017 	ldw	r3,128(sp)
811157e8:	da000404 	addi	r8,sp,16
811157ec:	003d4a06 	br	81114d18 <__reset+0xfb0f4d18>
811157f0:	d9002917 	ldw	r4,164(sp)
811157f4:	05bff7c4 	movi	r22,-33
811157f8:	00bfffc4 	movi	r2,-1
811157fc:	8dac703a 	and	r22,r17,r22
81115800:	20806a26 	beq	r4,r2,811159ac <___svfprintf_internal_r+0x1acc>
81115804:	008011c4 	movi	r2,71
81115808:	b0813726 	beq	r22,r2,81115ce8 <___svfprintf_internal_r+0x1e08>
8111580c:	d9003717 	ldw	r4,220(sp)
81115810:	90c04014 	ori	r3,r18,256
81115814:	d8c02b15 	stw	r3,172(sp)
81115818:	20015d16 	blt	r4,zero,81115d90 <___svfprintf_internal_r+0x1eb0>
8111581c:	dd003717 	ldw	r20,220(sp)
81115820:	d8002a05 	stb	zero,168(sp)
81115824:	00801984 	movi	r2,102
81115828:	88814026 	beq	r17,r2,81115d2c <___svfprintf_internal_r+0x1e4c>
8111582c:	00801184 	movi	r2,70
81115830:	88817126 	beq	r17,r2,81115df8 <___svfprintf_internal_r+0x1f18>
81115834:	00801144 	movi	r2,69
81115838:	b0816226 	beq	r22,r2,81115dc4 <___svfprintf_internal_r+0x1ee4>
8111583c:	d8c02917 	ldw	r3,164(sp)
81115840:	d8802104 	addi	r2,sp,132
81115844:	d8800315 	stw	r2,12(sp)
81115848:	d9403617 	ldw	r5,216(sp)
8111584c:	d8802504 	addi	r2,sp,148
81115850:	d8800215 	stw	r2,8(sp)
81115854:	d8802604 	addi	r2,sp,152
81115858:	d8c00015 	stw	r3,0(sp)
8111585c:	d8800115 	stw	r2,4(sp)
81115860:	01c00084 	movi	r7,2
81115864:	a00d883a 	mov	r6,r20
81115868:	9809883a 	mov	r4,r19
8111586c:	d8c03d15 	stw	r3,244(sp)
81115870:	da003e15 	stw	r8,248(sp)
81115874:	111a1cc0 	call	8111a1cc <_dtoa_r>
81115878:	1021883a 	mov	r16,r2
8111587c:	008019c4 	movi	r2,103
81115880:	d8c03d17 	ldw	r3,244(sp)
81115884:	da003e17 	ldw	r8,248(sp)
81115888:	8880e726 	beq	r17,r2,81115c28 <___svfprintf_internal_r+0x1d48>
8111588c:	008011c4 	movi	r2,71
81115890:	8880d426 	beq	r17,r2,81115be4 <___svfprintf_internal_r+0x1d04>
81115894:	80f9883a 	add	fp,r16,r3
81115898:	d9003617 	ldw	r4,216(sp)
8111589c:	000d883a 	mov	r6,zero
811158a0:	000f883a 	mov	r7,zero
811158a4:	a00b883a 	mov	r5,r20
811158a8:	da003e15 	stw	r8,248(sp)
811158ac:	1126af80 	call	81126af8 <__eqdf2>
811158b0:	da003e17 	ldw	r8,248(sp)
811158b4:	1000e426 	beq	r2,zero,81115c48 <___svfprintf_internal_r+0x1d68>
811158b8:	d8802117 	ldw	r2,132(sp)
811158bc:	1700062e 	bgeu	r2,fp,811158d8 <___svfprintf_internal_r+0x19f8>
811158c0:	01000c04 	movi	r4,48
811158c4:	10c00044 	addi	r3,r2,1
811158c8:	d8c02115 	stw	r3,132(sp)
811158cc:	11000005 	stb	r4,0(r2)
811158d0:	d8802117 	ldw	r2,132(sp)
811158d4:	173ffb36 	bltu	r2,fp,811158c4 <__reset+0xfb0f58c4>
811158d8:	1405c83a 	sub	r2,r2,r16
811158dc:	d8803315 	stw	r2,204(sp)
811158e0:	008011c4 	movi	r2,71
811158e4:	b080c526 	beq	r22,r2,81115bfc <___svfprintf_internal_r+0x1d1c>
811158e8:	00801944 	movi	r2,101
811158ec:	1441d90e 	bge	r2,r17,81116054 <___svfprintf_internal_r+0x2174>
811158f0:	d8c02617 	ldw	r3,152(sp)
811158f4:	00801984 	movi	r2,102
811158f8:	d8c03215 	stw	r3,200(sp)
811158fc:	88813426 	beq	r17,r2,81115dd0 <___svfprintf_internal_r+0x1ef0>
81115900:	d8c03217 	ldw	r3,200(sp)
81115904:	d9003317 	ldw	r4,204(sp)
81115908:	19012516 	blt	r3,r4,81115da0 <___svfprintf_internal_r+0x1ec0>
8111590c:	9480004c 	andi	r18,r18,1
81115910:	9001841e 	bne	r18,zero,81115f24 <___svfprintf_internal_r+0x2044>
81115914:	1805883a 	mov	r2,r3
81115918:	1801cc16 	blt	r3,zero,8111604c <___svfprintf_internal_r+0x216c>
8111591c:	d8c03217 	ldw	r3,200(sp)
81115920:	044019c4 	movi	r17,103
81115924:	d8c02e15 	stw	r3,184(sp)
81115928:	df002a07 	ldb	fp,168(sp)
8111592c:	e000a61e 	bne	fp,zero,81115bc8 <___svfprintf_internal_r+0x1ce8>
81115930:	df002783 	ldbu	fp,158(sp)
81115934:	d8802a15 	stw	r2,168(sp)
81115938:	dc802b17 	ldw	r18,172(sp)
8111593c:	d8002915 	stw	zero,164(sp)
81115940:	003b1706 	br	811145a0 <__reset+0xfb0f45a0>
81115944:	04204534 	movhi	r16,33044
81115948:	8400bb04 	addi	r16,r16,748
8111594c:	003aa606 	br	811143e8 <__reset+0xfb0f43e8>
81115950:	d9003917 	ldw	r4,228(sp)
81115954:	04001004 	movi	r16,64
81115958:	800b883a 	mov	r5,r16
8111595c:	11128a00 	call	811128a0 <_malloc_r>
81115960:	d9002c17 	ldw	r4,176(sp)
81115964:	20800015 	stw	r2,0(r4)
81115968:	20800415 	stw	r2,16(r4)
8111596c:	1001cb26 	beq	r2,zero,8111609c <___svfprintf_internal_r+0x21bc>
81115970:	d8802c17 	ldw	r2,176(sp)
81115974:	14000515 	stw	r16,20(r2)
81115978:	00397606 	br	81113f54 <__reset+0xfb0f3f54>
8111597c:	04204534 	movhi	r16,33044
81115980:	8400bd04 	addi	r16,r16,756
81115984:	003ee106 	br	8111550c <__reset+0xfb0f550c>
81115988:	d9402c17 	ldw	r5,176(sp)
8111598c:	d9801e04 	addi	r6,sp,120
81115990:	9809883a 	mov	r4,r19
81115994:	1120b000 	call	81120b00 <__ssprint_r>
81115998:	103a381e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
8111599c:	dc402617 	ldw	r17,152(sp)
811159a0:	d8c02017 	ldw	r3,128(sp)
811159a4:	da000404 	addi	r8,sp,16
811159a8:	003f4306 	br	811156b8 <__reset+0xfb0f56b8>
811159ac:	01400184 	movi	r5,6
811159b0:	d9402915 	stw	r5,164(sp)
811159b4:	003f9506 	br	8111580c <__reset+0xfb0f580c>
811159b8:	d9002d17 	ldw	r4,180(sp)
811159bc:	25000017 	ldw	r20,0(r4)
811159c0:	21000104 	addi	r4,r4,4
811159c4:	d9002d15 	stw	r4,180(sp)
811159c8:	a02dd7fa 	srai	r22,r20,31
811159cc:	b005883a 	mov	r2,r22
811159d0:	003a9b06 	br	81114440 <__reset+0xfb0f4440>
811159d4:	d9402d17 	ldw	r5,180(sp)
811159d8:	002d883a 	mov	r22,zero
811159dc:	2d000017 	ldw	r20,0(r5)
811159e0:	29400104 	addi	r5,r5,4
811159e4:	d9402d15 	stw	r5,180(sp)
811159e8:	003bf906 	br	811149d0 <__reset+0xfb0f49d0>
811159ec:	9480100c 	andi	r18,r18,64
811159f0:	90006e26 	beq	r18,zero,81115bac <___svfprintf_internal_r+0x1ccc>
811159f4:	d9002d17 	ldw	r4,180(sp)
811159f8:	d9402f17 	ldw	r5,188(sp)
811159fc:	20800017 	ldw	r2,0(r4)
81115a00:	21000104 	addi	r4,r4,4
81115a04:	d9002d15 	stw	r4,180(sp)
81115a08:	1140000d 	sth	r5,0(r2)
81115a0c:	00396106 	br	81113f94 <__reset+0xfb0f3f94>
81115a10:	d9402c17 	ldw	r5,176(sp)
81115a14:	d9801e04 	addi	r6,sp,120
81115a18:	9809883a 	mov	r4,r19
81115a1c:	1120b000 	call	81120b00 <__ssprint_r>
81115a20:	103a161e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115a24:	d8c02017 	ldw	r3,128(sp)
81115a28:	d8801f17 	ldw	r2,124(sp)
81115a2c:	da000404 	addi	r8,sp,16
81115a30:	d9403317 	ldw	r5,204(sp)
81115a34:	10800044 	addi	r2,r2,1
81115a38:	44000015 	stw	r16,0(r8)
81115a3c:	28c7883a 	add	r3,r5,r3
81115a40:	003b7706 	br	81114820 <__reset+0xfb0f4820>
81115a44:	8009883a 	mov	r4,r16
81115a48:	da003e15 	stw	r8,248(sp)
81115a4c:	1113ba80 	call	81113ba8 <strlen>
81115a50:	d8802e15 	stw	r2,184(sp)
81115a54:	da003e17 	ldw	r8,248(sp)
81115a58:	103c280e 	bge	r2,zero,81114afc <__reset+0xfb0f4afc>
81115a5c:	0005883a 	mov	r2,zero
81115a60:	003c2606 	br	81114afc <__reset+0xfb0f4afc>
81115a64:	00bfffc4 	movi	r2,-1
81115a68:	003a0906 	br	81114290 <__reset+0xfb0f4290>
81115a6c:	01204534 	movhi	r4,33044
81115a70:	2100cf84 	addi	r4,r4,830
81115a74:	d9003515 	stw	r4,212(sp)
81115a78:	003b0606 	br	81114694 <__reset+0xfb0f4694>
81115a7c:	013fffc4 	movi	r4,-1
81115a80:	003a2706 	br	81114320 <__reset+0xfb0f4320>
81115a84:	d9402c17 	ldw	r5,176(sp)
81115a88:	d9801e04 	addi	r6,sp,120
81115a8c:	9809883a 	mov	r4,r19
81115a90:	1120b000 	call	81120b00 <__ssprint_r>
81115a94:	1039f91e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115a98:	d8c02017 	ldw	r3,128(sp)
81115a9c:	da000404 	addi	r8,sp,16
81115aa0:	003d8406 	br	811150b4 <__reset+0xfb0f50b4>
81115aa4:	0023883a 	mov	r17,zero
81115aa8:	003d8306 	br	811150b8 <__reset+0xfb0f50b8>
81115aac:	01204534 	movhi	r4,33044
81115ab0:	2100cb84 	addi	r4,r4,814
81115ab4:	d9002b15 	stw	r4,172(sp)
81115ab8:	d9002b17 	ldw	r4,172(sp)
81115abc:	1c47883a 	add	r3,r3,r17
81115ac0:	10800044 	addi	r2,r2,1
81115ac4:	41000015 	stw	r4,0(r8)
81115ac8:	44400115 	stw	r17,4(r8)
81115acc:	d8c02015 	stw	r3,128(sp)
81115ad0:	d8801f15 	stw	r2,124(sp)
81115ad4:	010001c4 	movi	r4,7
81115ad8:	20bfcd16 	blt	r4,r2,81115a10 <__reset+0xfb0f5a10>
81115adc:	42000204 	addi	r8,r8,8
81115ae0:	003fd306 	br	81115a30 <__reset+0xfb0f5a30>
81115ae4:	d9402c17 	ldw	r5,176(sp)
81115ae8:	d9801e04 	addi	r6,sp,120
81115aec:	9809883a 	mov	r4,r19
81115af0:	1120b000 	call	81120b00 <__ssprint_r>
81115af4:	1039e11e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115af8:	d8802617 	ldw	r2,152(sp)
81115afc:	d8c02017 	ldw	r3,128(sp)
81115b00:	da000404 	addi	r8,sp,16
81115b04:	003e1c06 	br	81115378 <__reset+0xfb0f5378>
81115b08:	d8802917 	ldw	r2,164(sp)
81115b0c:	00c00184 	movi	r3,6
81115b10:	1880012e 	bgeu	r3,r2,81115b18 <___svfprintf_internal_r+0x1c38>
81115b14:	1805883a 	mov	r2,r3
81115b18:	d8802e15 	stw	r2,184(sp)
81115b1c:	1000f316 	blt	r2,zero,81115eec <___svfprintf_internal_r+0x200c>
81115b20:	04204534 	movhi	r16,33044
81115b24:	d8802a15 	stw	r2,168(sp)
81115b28:	dd002d15 	stw	r20,180(sp)
81115b2c:	d8002915 	stw	zero,164(sp)
81115b30:	d8003215 	stw	zero,200(sp)
81115b34:	8400c904 	addi	r16,r16,804
81115b38:	0039883a 	mov	fp,zero
81115b3c:	003a9f06 	br	811145bc <__reset+0xfb0f45bc>
81115b40:	01204534 	movhi	r4,33044
81115b44:	2100cf84 	addi	r4,r4,830
81115b48:	d9003515 	stw	r4,212(sp)
81115b4c:	003b5f06 	br	811148cc <__reset+0xfb0f48cc>
81115b50:	d9402c17 	ldw	r5,176(sp)
81115b54:	d9801e04 	addi	r6,sp,120
81115b58:	9809883a 	mov	r4,r19
81115b5c:	1120b000 	call	81120b00 <__ssprint_r>
81115b60:	1039c61e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115b64:	d8802617 	ldw	r2,152(sp)
81115b68:	d9403317 	ldw	r5,204(sp)
81115b6c:	d8c02017 	ldw	r3,128(sp)
81115b70:	da000404 	addi	r8,sp,16
81115b74:	2885c83a 	sub	r2,r5,r2
81115b78:	003e1006 	br	811153bc <__reset+0xfb0f53bc>
81115b7c:	00800044 	movi	r2,1
81115b80:	10803fcc 	andi	r2,r2,255
81115b84:	00c00044 	movi	r3,1
81115b88:	10fa3526 	beq	r2,r3,81114460 <__reset+0xfb0f4460>
81115b8c:	00c00084 	movi	r3,2
81115b90:	10fb9e26 	beq	r2,r3,81114a0c <__reset+0xfb0f4a0c>
81115b94:	003a6406 	br	81114528 <__reset+0xfb0f4528>
81115b98:	0021883a 	mov	r16,zero
81115b9c:	003e0806 	br	811153c0 <__reset+0xfb0f53c0>
81115ba0:	07000b44 	movi	fp,45
81115ba4:	df002785 	stb	fp,158(sp)
81115ba8:	003a0b06 	br	811143d8 <__reset+0xfb0f43d8>
81115bac:	d8c02d17 	ldw	r3,180(sp)
81115bb0:	d9002f17 	ldw	r4,188(sp)
81115bb4:	18800017 	ldw	r2,0(r3)
81115bb8:	18c00104 	addi	r3,r3,4
81115bbc:	d8c02d15 	stw	r3,180(sp)
81115bc0:	11000015 	stw	r4,0(r2)
81115bc4:	0038f306 	br	81113f94 <__reset+0xfb0f3f94>
81115bc8:	00c00b44 	movi	r3,45
81115bcc:	d8c02785 	stb	r3,158(sp)
81115bd0:	d8802a15 	stw	r2,168(sp)
81115bd4:	dc802b17 	ldw	r18,172(sp)
81115bd8:	d8002915 	stw	zero,164(sp)
81115bdc:	07000b44 	movi	fp,45
81115be0:	003a7306 	br	811145b0 <__reset+0xfb0f45b0>
81115be4:	9080004c 	andi	r2,r18,1
81115be8:	1000941e 	bne	r2,zero,81115e3c <___svfprintf_internal_r+0x1f5c>
81115bec:	d8802117 	ldw	r2,132(sp)
81115bf0:	1405c83a 	sub	r2,r2,r16
81115bf4:	d8803315 	stw	r2,204(sp)
81115bf8:	b441161e 	bne	r22,r17,81116054 <___svfprintf_internal_r+0x2174>
81115bfc:	dd802617 	ldw	r22,152(sp)
81115c00:	00bfff44 	movi	r2,-3
81115c04:	b0801a16 	blt	r22,r2,81115c70 <___svfprintf_internal_r+0x1d90>
81115c08:	d9402917 	ldw	r5,164(sp)
81115c0c:	2d801816 	blt	r5,r22,81115c70 <___svfprintf_internal_r+0x1d90>
81115c10:	dd803215 	stw	r22,200(sp)
81115c14:	003f3a06 	br	81115900 <__reset+0xfb0f5900>
81115c18:	1025883a 	mov	r18,r2
81115c1c:	0039883a 	mov	fp,zero
81115c20:	00800084 	movi	r2,2
81115c24:	003fd606 	br	81115b80 <__reset+0xfb0f5b80>
81115c28:	9080004c 	andi	r2,r18,1
81115c2c:	103f191e 	bne	r2,zero,81115894 <__reset+0xfb0f5894>
81115c30:	d8802117 	ldw	r2,132(sp)
81115c34:	003f2806 	br	811158d8 <__reset+0xfb0f58d8>
81115c38:	01204534 	movhi	r4,33044
81115c3c:	2100cb84 	addi	r4,r4,814
81115c40:	d9002b15 	stw	r4,172(sp)
81115c44:	003c7c06 	br	81114e38 <__reset+0xfb0f4e38>
81115c48:	e005883a 	mov	r2,fp
81115c4c:	003f2206 	br	811158d8 <__reset+0xfb0f58d8>
81115c50:	d9402917 	ldw	r5,164(sp)
81115c54:	df002783 	ldbu	fp,158(sp)
81115c58:	dd002d15 	stw	r20,180(sp)
81115c5c:	d9402a15 	stw	r5,168(sp)
81115c60:	d9402e15 	stw	r5,184(sp)
81115c64:	d8002915 	stw	zero,164(sp)
81115c68:	d8003215 	stw	zero,200(sp)
81115c6c:	003a4c06 	br	811145a0 <__reset+0xfb0f45a0>
81115c70:	8c7fff84 	addi	r17,r17,-2
81115c74:	b5bfffc4 	addi	r22,r22,-1
81115c78:	dd802615 	stw	r22,152(sp)
81115c7c:	dc4022c5 	stb	r17,139(sp)
81115c80:	b000c316 	blt	r22,zero,81115f90 <___svfprintf_internal_r+0x20b0>
81115c84:	00800ac4 	movi	r2,43
81115c88:	d8802305 	stb	r2,140(sp)
81115c8c:	00800244 	movi	r2,9
81115c90:	15806e16 	blt	r2,r22,81115e4c <___svfprintf_internal_r+0x1f6c>
81115c94:	00800c04 	movi	r2,48
81115c98:	b5800c04 	addi	r22,r22,48
81115c9c:	d8802345 	stb	r2,141(sp)
81115ca0:	dd802385 	stb	r22,142(sp)
81115ca4:	d88023c4 	addi	r2,sp,143
81115ca8:	df0022c4 	addi	fp,sp,139
81115cac:	d8c03317 	ldw	r3,204(sp)
81115cb0:	1739c83a 	sub	fp,r2,fp
81115cb4:	d9003317 	ldw	r4,204(sp)
81115cb8:	e0c7883a 	add	r3,fp,r3
81115cbc:	df003b15 	stw	fp,236(sp)
81115cc0:	d8c02e15 	stw	r3,184(sp)
81115cc4:	00800044 	movi	r2,1
81115cc8:	1100b70e 	bge	r2,r4,81115fa8 <___svfprintf_internal_r+0x20c8>
81115ccc:	d8c02e17 	ldw	r3,184(sp)
81115cd0:	18c00044 	addi	r3,r3,1
81115cd4:	d8c02e15 	stw	r3,184(sp)
81115cd8:	1805883a 	mov	r2,r3
81115cdc:	1800b016 	blt	r3,zero,81115fa0 <___svfprintf_internal_r+0x20c0>
81115ce0:	d8003215 	stw	zero,200(sp)
81115ce4:	003f1006 	br	81115928 <__reset+0xfb0f5928>
81115ce8:	d8802917 	ldw	r2,164(sp)
81115cec:	103ec71e 	bne	r2,zero,8111580c <__reset+0xfb0f580c>
81115cf0:	dc002915 	stw	r16,164(sp)
81115cf4:	003ec506 	br	8111580c <__reset+0xfb0f580c>
81115cf8:	d9402c17 	ldw	r5,176(sp)
81115cfc:	d9801e04 	addi	r6,sp,120
81115d00:	9809883a 	mov	r4,r19
81115d04:	1120b000 	call	81120b00 <__ssprint_r>
81115d08:	10395c1e 	bne	r2,zero,8111427c <__reset+0xfb0f427c>
81115d0c:	dc402617 	ldw	r17,152(sp)
81115d10:	d8c02017 	ldw	r3,128(sp)
81115d14:	d8801f17 	ldw	r2,124(sp)
81115d18:	da000404 	addi	r8,sp,16
81115d1c:	003e7706 	br	811156fc <__reset+0xfb0f56fc>
81115d20:	582f883a 	mov	r23,r11
81115d24:	d8002915 	stw	zero,164(sp)
81115d28:	0038c406 	br	8111403c <__reset+0xfb0f403c>
81115d2c:	d8c02917 	ldw	r3,164(sp)
81115d30:	d8802104 	addi	r2,sp,132
81115d34:	d8800315 	stw	r2,12(sp)
81115d38:	d9403617 	ldw	r5,216(sp)
81115d3c:	d8802504 	addi	r2,sp,148
81115d40:	d8800215 	stw	r2,8(sp)
81115d44:	d8802604 	addi	r2,sp,152
81115d48:	d8c00015 	stw	r3,0(sp)
81115d4c:	9809883a 	mov	r4,r19
81115d50:	d8800115 	stw	r2,4(sp)
81115d54:	01c000c4 	movi	r7,3
81115d58:	a00d883a 	mov	r6,r20
81115d5c:	da003e15 	stw	r8,248(sp)
81115d60:	111a1cc0 	call	8111a1cc <_dtoa_r>
81115d64:	d9002917 	ldw	r4,164(sp)
81115d68:	da003e17 	ldw	r8,248(sp)
81115d6c:	1021883a 	mov	r16,r2
81115d70:	1139883a 	add	fp,r2,r4
81115d74:	2007883a 	mov	r3,r4
81115d78:	81000007 	ldb	r4,0(r16)
81115d7c:	00800c04 	movi	r2,48
81115d80:	20806f26 	beq	r4,r2,81115f40 <___svfprintf_internal_r+0x2060>
81115d84:	d8c02617 	ldw	r3,152(sp)
81115d88:	e0f9883a 	add	fp,fp,r3
81115d8c:	003ec206 	br	81115898 <__reset+0xfb0f5898>
81115d90:	00c00b44 	movi	r3,45
81115d94:	2520003c 	xorhi	r20,r4,32768
81115d98:	d8c02a05 	stb	r3,168(sp)
81115d9c:	003ea106 	br	81115824 <__reset+0xfb0f5824>
81115da0:	d8c03217 	ldw	r3,200(sp)
81115da4:	00c0890e 	bge	zero,r3,81115fcc <___svfprintf_internal_r+0x20ec>
81115da8:	00800044 	movi	r2,1
81115dac:	d9003317 	ldw	r4,204(sp)
81115db0:	1105883a 	add	r2,r2,r4
81115db4:	d8802e15 	stw	r2,184(sp)
81115db8:	10005f16 	blt	r2,zero,81115f38 <___svfprintf_internal_r+0x2058>
81115dbc:	044019c4 	movi	r17,103
81115dc0:	003ed906 	br	81115928 <__reset+0xfb0f5928>
81115dc4:	d9002917 	ldw	r4,164(sp)
81115dc8:	20c00044 	addi	r3,r4,1
81115dcc:	003e9c06 	br	81115840 <__reset+0xfb0f5840>
81115dd0:	d9002917 	ldw	r4,164(sp)
81115dd4:	00c0680e 	bge	zero,r3,81115f78 <___svfprintf_internal_r+0x2098>
81115dd8:	2000461e 	bne	r4,zero,81115ef4 <___svfprintf_internal_r+0x2014>
81115ddc:	9480004c 	andi	r18,r18,1
81115de0:	9000441e 	bne	r18,zero,81115ef4 <___svfprintf_internal_r+0x2014>
81115de4:	1805883a 	mov	r2,r3
81115de8:	1800a016 	blt	r3,zero,8111606c <___svfprintf_internal_r+0x218c>
81115dec:	d8c03217 	ldw	r3,200(sp)
81115df0:	d8c02e15 	stw	r3,184(sp)
81115df4:	003ecc06 	br	81115928 <__reset+0xfb0f5928>
81115df8:	d9402917 	ldw	r5,164(sp)
81115dfc:	d8802104 	addi	r2,sp,132
81115e00:	d8800315 	stw	r2,12(sp)
81115e04:	d9400015 	stw	r5,0(sp)
81115e08:	d8802504 	addi	r2,sp,148
81115e0c:	d9403617 	ldw	r5,216(sp)
81115e10:	d8800215 	stw	r2,8(sp)
81115e14:	d8802604 	addi	r2,sp,152
81115e18:	d8800115 	stw	r2,4(sp)
81115e1c:	01c000c4 	movi	r7,3
81115e20:	a00d883a 	mov	r6,r20
81115e24:	9809883a 	mov	r4,r19
81115e28:	da003e15 	stw	r8,248(sp)
81115e2c:	111a1cc0 	call	8111a1cc <_dtoa_r>
81115e30:	d8c02917 	ldw	r3,164(sp)
81115e34:	da003e17 	ldw	r8,248(sp)
81115e38:	1021883a 	mov	r16,r2
81115e3c:	00801184 	movi	r2,70
81115e40:	80f9883a 	add	fp,r16,r3
81115e44:	88bfcc26 	beq	r17,r2,81115d78 <__reset+0xfb0f5d78>
81115e48:	003e9306 	br	81115898 <__reset+0xfb0f5898>
81115e4c:	df0022c4 	addi	fp,sp,139
81115e50:	dc002915 	stw	r16,164(sp)
81115e54:	9829883a 	mov	r20,r19
81115e58:	e021883a 	mov	r16,fp
81115e5c:	4027883a 	mov	r19,r8
81115e60:	b009883a 	mov	r4,r22
81115e64:	01400284 	movi	r5,10
81115e68:	11256280 	call	81125628 <__modsi3>
81115e6c:	10800c04 	addi	r2,r2,48
81115e70:	843fffc4 	addi	r16,r16,-1
81115e74:	b009883a 	mov	r4,r22
81115e78:	01400284 	movi	r5,10
81115e7c:	80800005 	stb	r2,0(r16)
81115e80:	11255a40 	call	811255a4 <__divsi3>
81115e84:	102d883a 	mov	r22,r2
81115e88:	00800244 	movi	r2,9
81115e8c:	15bff416 	blt	r2,r22,81115e60 <__reset+0xfb0f5e60>
81115e90:	9811883a 	mov	r8,r19
81115e94:	b0800c04 	addi	r2,r22,48
81115e98:	a027883a 	mov	r19,r20
81115e9c:	8029883a 	mov	r20,r16
81115ea0:	a17fffc4 	addi	r5,r20,-1
81115ea4:	a0bfffc5 	stb	r2,-1(r20)
81115ea8:	dc002917 	ldw	r16,164(sp)
81115eac:	2f00752e 	bgeu	r5,fp,81116084 <___svfprintf_internal_r+0x21a4>
81115eb0:	d9c02384 	addi	r7,sp,142
81115eb4:	3d0fc83a 	sub	r7,r7,r20
81115eb8:	d9002344 	addi	r4,sp,141
81115ebc:	e1cf883a 	add	r7,fp,r7
81115ec0:	00000106 	br	81115ec8 <___svfprintf_internal_r+0x1fe8>
81115ec4:	28800003 	ldbu	r2,0(r5)
81115ec8:	20800005 	stb	r2,0(r4)
81115ecc:	21000044 	addi	r4,r4,1
81115ed0:	29400044 	addi	r5,r5,1
81115ed4:	21fffb1e 	bne	r4,r7,81115ec4 <__reset+0xfb0f5ec4>
81115ed8:	d8802304 	addi	r2,sp,140
81115edc:	1505c83a 	sub	r2,r2,r20
81115ee0:	d8c02344 	addi	r3,sp,141
81115ee4:	1885883a 	add	r2,r3,r2
81115ee8:	003f7006 	br	81115cac <__reset+0xfb0f5cac>
81115eec:	0005883a 	mov	r2,zero
81115ef0:	003f0b06 	br	81115b20 <__reset+0xfb0f5b20>
81115ef4:	d9002917 	ldw	r4,164(sp)
81115ef8:	d8c03217 	ldw	r3,200(sp)
81115efc:	20800044 	addi	r2,r4,1
81115f00:	1885883a 	add	r2,r3,r2
81115f04:	d8802e15 	stw	r2,184(sp)
81115f08:	103e870e 	bge	r2,zero,81115928 <__reset+0xfb0f5928>
81115f0c:	0005883a 	mov	r2,zero
81115f10:	003e8506 	br	81115928 <__reset+0xfb0f5928>
81115f14:	01204534 	movhi	r4,33044
81115f18:	2100cb84 	addi	r4,r4,814
81115f1c:	d9002b15 	stw	r4,172(sp)
81115f20:	003cc506 	br	81115238 <__reset+0xfb0f5238>
81115f24:	d8c03217 	ldw	r3,200(sp)
81115f28:	18c00044 	addi	r3,r3,1
81115f2c:	d8c02e15 	stw	r3,184(sp)
81115f30:	1805883a 	mov	r2,r3
81115f34:	183fa10e 	bge	r3,zero,81115dbc <__reset+0xfb0f5dbc>
81115f38:	0005883a 	mov	r2,zero
81115f3c:	003f9f06 	br	81115dbc <__reset+0xfb0f5dbc>
81115f40:	d9003617 	ldw	r4,216(sp)
81115f44:	000d883a 	mov	r6,zero
81115f48:	000f883a 	mov	r7,zero
81115f4c:	a00b883a 	mov	r5,r20
81115f50:	d8c03d15 	stw	r3,244(sp)
81115f54:	da003e15 	stw	r8,248(sp)
81115f58:	1126af80 	call	81126af8 <__eqdf2>
81115f5c:	d8c03d17 	ldw	r3,244(sp)
81115f60:	da003e17 	ldw	r8,248(sp)
81115f64:	103f8726 	beq	r2,zero,81115d84 <__reset+0xfb0f5d84>
81115f68:	00800044 	movi	r2,1
81115f6c:	10c7c83a 	sub	r3,r2,r3
81115f70:	d8c02615 	stw	r3,152(sp)
81115f74:	003f8406 	br	81115d88 <__reset+0xfb0f5d88>
81115f78:	20000e1e 	bne	r4,zero,81115fb4 <___svfprintf_internal_r+0x20d4>
81115f7c:	9480004c 	andi	r18,r18,1
81115f80:	90000c1e 	bne	r18,zero,81115fb4 <___svfprintf_internal_r+0x20d4>
81115f84:	00800044 	movi	r2,1
81115f88:	d8802e15 	stw	r2,184(sp)
81115f8c:	003e6606 	br	81115928 <__reset+0xfb0f5928>
81115f90:	00800b44 	movi	r2,45
81115f94:	05adc83a 	sub	r22,zero,r22
81115f98:	d8802305 	stb	r2,140(sp)
81115f9c:	003f3b06 	br	81115c8c <__reset+0xfb0f5c8c>
81115fa0:	0005883a 	mov	r2,zero
81115fa4:	003f4e06 	br	81115ce0 <__reset+0xfb0f5ce0>
81115fa8:	90a4703a 	and	r18,r18,r2
81115fac:	903f4a26 	beq	r18,zero,81115cd8 <__reset+0xfb0f5cd8>
81115fb0:	003f4606 	br	81115ccc <__reset+0xfb0f5ccc>
81115fb4:	d8c02917 	ldw	r3,164(sp)
81115fb8:	18c00084 	addi	r3,r3,2
81115fbc:	d8c02e15 	stw	r3,184(sp)
81115fc0:	1805883a 	mov	r2,r3
81115fc4:	183e580e 	bge	r3,zero,81115928 <__reset+0xfb0f5928>
81115fc8:	003fd006 	br	81115f0c <__reset+0xfb0f5f0c>
81115fcc:	00800084 	movi	r2,2
81115fd0:	10c5c83a 	sub	r2,r2,r3
81115fd4:	003f7506 	br	81115dac <__reset+0xfb0f5dac>
81115fd8:	d8802d17 	ldw	r2,180(sp)
81115fdc:	d9002d17 	ldw	r4,180(sp)
81115fe0:	bc400043 	ldbu	r17,1(r23)
81115fe4:	10800017 	ldw	r2,0(r2)
81115fe8:	582f883a 	mov	r23,r11
81115fec:	d8802915 	stw	r2,164(sp)
81115ff0:	20800104 	addi	r2,r4,4
81115ff4:	d9002917 	ldw	r4,164(sp)
81115ff8:	d8802d15 	stw	r2,180(sp)
81115ffc:	203df00e 	bge	r4,zero,811157c0 <__reset+0xfb0f57c0>
81116000:	8c403fcc 	andi	r17,r17,255
81116004:	00bfffc4 	movi	r2,-1
81116008:	8c40201c 	xori	r17,r17,128
8111600c:	d8802915 	stw	r2,164(sp)
81116010:	8c7fe004 	addi	r17,r17,-128
81116014:	00380806 	br	81114038 <__reset+0xfb0f4038>
81116018:	9080004c 	andi	r2,r18,1
8111601c:	0039883a 	mov	fp,zero
81116020:	10000726 	beq	r2,zero,81116040 <___svfprintf_internal_r+0x2160>
81116024:	d8c02817 	ldw	r3,160(sp)
81116028:	dc001dc4 	addi	r16,sp,119
8111602c:	00800c04 	movi	r2,48
81116030:	1c07c83a 	sub	r3,r3,r16
81116034:	d8801dc5 	stb	r2,119(sp)
81116038:	d8c02e15 	stw	r3,184(sp)
8111603c:	00395206 	br	81114588 <__reset+0xfb0f4588>
81116040:	d8002e15 	stw	zero,184(sp)
81116044:	dc001e04 	addi	r16,sp,120
81116048:	00394f06 	br	81114588 <__reset+0xfb0f4588>
8111604c:	0005883a 	mov	r2,zero
81116050:	003e3206 	br	8111591c <__reset+0xfb0f591c>
81116054:	dd802617 	ldw	r22,152(sp)
81116058:	003f0606 	br	81115c74 <__reset+0xfb0f5c74>
8111605c:	d9c02785 	stb	r7,158(sp)
81116060:	003a5106 	br	811149a8 <__reset+0xfb0f49a8>
81116064:	d9c02785 	stb	r7,158(sp)
81116068:	003a3706 	br	81114948 <__reset+0xfb0f4948>
8111606c:	0005883a 	mov	r2,zero
81116070:	003f5e06 	br	81115dec <__reset+0xfb0f5dec>
81116074:	d9c02785 	stb	r7,158(sp)
81116078:	00391706 	br	811144d8 <__reset+0xfb0f44d8>
8111607c:	d9c02785 	stb	r7,158(sp)
81116080:	0038e606 	br	8111441c <__reset+0xfb0f441c>
81116084:	d8802344 	addi	r2,sp,141
81116088:	003f0806 	br	81115cac <__reset+0xfb0f5cac>
8111608c:	d9c02785 	stb	r7,158(sp)
81116090:	0038b706 	br	81114370 <__reset+0xfb0f4370>
81116094:	d9c02785 	stb	r7,158(sp)
81116098:	003adc06 	br	81114c0c <__reset+0xfb0f4c0c>
8111609c:	d9403917 	ldw	r5,228(sp)
811160a0:	00800304 	movi	r2,12
811160a4:	28800015 	stw	r2,0(r5)
811160a8:	00bfffc4 	movi	r2,-1
811160ac:	00387806 	br	81114290 <__reset+0xfb0f4290>
811160b0:	d9c02785 	stb	r7,158(sp)
811160b4:	003abf06 	br	81114bb4 <__reset+0xfb0f4bb4>
811160b8:	d9c02785 	stb	r7,158(sp)
811160bc:	003a9b06 	br	81114b2c <__reset+0xfb0f4b2c>

811160c0 <___vfprintf_internal_r>:
811160c0:	deffb804 	addi	sp,sp,-288
811160c4:	de00012e 	bgeu	sp,et,811160cc <___vfprintf_internal_r+0xc>
811160c8:	003b68fa 	trap	3
811160cc:	dfc04715 	stw	ra,284(sp)
811160d0:	ddc04515 	stw	r23,276(sp)
811160d4:	dd404315 	stw	r21,268(sp)
811160d8:	d9002c15 	stw	r4,176(sp)
811160dc:	282f883a 	mov	r23,r5
811160e0:	302b883a 	mov	r21,r6
811160e4:	d9c02d15 	stw	r7,180(sp)
811160e8:	df004615 	stw	fp,280(sp)
811160ec:	dd804415 	stw	r22,272(sp)
811160f0:	dd004215 	stw	r20,264(sp)
811160f4:	dcc04115 	stw	r19,260(sp)
811160f8:	dc804015 	stw	r18,256(sp)
811160fc:	dc403f15 	stw	r17,252(sp)
81116100:	dc003e15 	stw	r16,248(sp)
81116104:	111cdc80 	call	8111cdc8 <_localeconv_r>
81116108:	10800017 	ldw	r2,0(r2)
8111610c:	1009883a 	mov	r4,r2
81116110:	d8803415 	stw	r2,208(sp)
81116114:	1113ba80 	call	81113ba8 <strlen>
81116118:	d8803715 	stw	r2,220(sp)
8111611c:	d8802c17 	ldw	r2,176(sp)
81116120:	10000226 	beq	r2,zero,8111612c <___vfprintf_internal_r+0x6c>
81116124:	10800e17 	ldw	r2,56(r2)
81116128:	1000f926 	beq	r2,zero,81116510 <___vfprintf_internal_r+0x450>
8111612c:	b880030b 	ldhu	r2,12(r23)
81116130:	10c8000c 	andi	r3,r2,8192
81116134:	1800061e 	bne	r3,zero,81116150 <___vfprintf_internal_r+0x90>
81116138:	b9001917 	ldw	r4,100(r23)
8111613c:	00f7ffc4 	movi	r3,-8193
81116140:	10880014 	ori	r2,r2,8192
81116144:	20c6703a 	and	r3,r4,r3
81116148:	b880030d 	sth	r2,12(r23)
8111614c:	b8c01915 	stw	r3,100(r23)
81116150:	10c0020c 	andi	r3,r2,8
81116154:	1800c126 	beq	r3,zero,8111645c <___vfprintf_internal_r+0x39c>
81116158:	b8c00417 	ldw	r3,16(r23)
8111615c:	1800bf26 	beq	r3,zero,8111645c <___vfprintf_internal_r+0x39c>
81116160:	1080068c 	andi	r2,r2,26
81116164:	00c00284 	movi	r3,10
81116168:	10c0c426 	beq	r2,r3,8111647c <___vfprintf_internal_r+0x3bc>
8111616c:	d8c00404 	addi	r3,sp,16
81116170:	05204534 	movhi	r20,33044
81116174:	d9001e04 	addi	r4,sp,120
81116178:	a500d384 	addi	r20,r20,846
8111617c:	d8c01e15 	stw	r3,120(sp)
81116180:	d8002015 	stw	zero,128(sp)
81116184:	d8001f15 	stw	zero,124(sp)
81116188:	d8003315 	stw	zero,204(sp)
8111618c:	d8003615 	stw	zero,216(sp)
81116190:	d8003815 	stw	zero,224(sp)
81116194:	1811883a 	mov	r8,r3
81116198:	d8003915 	stw	zero,228(sp)
8111619c:	d8003a15 	stw	zero,232(sp)
811161a0:	d8002f15 	stw	zero,188(sp)
811161a4:	d9002815 	stw	r4,160(sp)
811161a8:	a8800007 	ldb	r2,0(r21)
811161ac:	10027b26 	beq	r2,zero,81116b9c <___vfprintf_internal_r+0xadc>
811161b0:	00c00944 	movi	r3,37
811161b4:	a821883a 	mov	r16,r21
811161b8:	10c0021e 	bne	r2,r3,811161c4 <___vfprintf_internal_r+0x104>
811161bc:	00001406 	br	81116210 <___vfprintf_internal_r+0x150>
811161c0:	10c00326 	beq	r2,r3,811161d0 <___vfprintf_internal_r+0x110>
811161c4:	84000044 	addi	r16,r16,1
811161c8:	80800007 	ldb	r2,0(r16)
811161cc:	103ffc1e 	bne	r2,zero,811161c0 <__reset+0xfb0f61c0>
811161d0:	8563c83a 	sub	r17,r16,r21
811161d4:	88000e26 	beq	r17,zero,81116210 <___vfprintf_internal_r+0x150>
811161d8:	d8c02017 	ldw	r3,128(sp)
811161dc:	d8801f17 	ldw	r2,124(sp)
811161e0:	45400015 	stw	r21,0(r8)
811161e4:	1c47883a 	add	r3,r3,r17
811161e8:	10800044 	addi	r2,r2,1
811161ec:	d8c02015 	stw	r3,128(sp)
811161f0:	44400115 	stw	r17,4(r8)
811161f4:	d8801f15 	stw	r2,124(sp)
811161f8:	00c001c4 	movi	r3,7
811161fc:	1880a716 	blt	r3,r2,8111649c <___vfprintf_internal_r+0x3dc>
81116200:	42000204 	addi	r8,r8,8
81116204:	d9402f17 	ldw	r5,188(sp)
81116208:	2c4b883a 	add	r5,r5,r17
8111620c:	d9402f15 	stw	r5,188(sp)
81116210:	80800007 	ldb	r2,0(r16)
81116214:	1000a826 	beq	r2,zero,811164b8 <___vfprintf_internal_r+0x3f8>
81116218:	84400047 	ldb	r17,1(r16)
8111621c:	00bfffc4 	movi	r2,-1
81116220:	85400044 	addi	r21,r16,1
81116224:	d8002785 	stb	zero,158(sp)
81116228:	0007883a 	mov	r3,zero
8111622c:	000f883a 	mov	r7,zero
81116230:	d8802915 	stw	r2,164(sp)
81116234:	d8003115 	stw	zero,196(sp)
81116238:	0025883a 	mov	r18,zero
8111623c:	01401604 	movi	r5,88
81116240:	01800244 	movi	r6,9
81116244:	02800a84 	movi	r10,42
81116248:	02401b04 	movi	r9,108
8111624c:	ad400044 	addi	r21,r21,1
81116250:	88bff804 	addi	r2,r17,-32
81116254:	28830436 	bltu	r5,r2,81116e68 <___vfprintf_internal_r+0xda8>
81116258:	100490ba 	slli	r2,r2,2
8111625c:	01204474 	movhi	r4,33041
81116260:	21189c04 	addi	r4,r4,25200
81116264:	1105883a 	add	r2,r2,r4
81116268:	10800017 	ldw	r2,0(r2)
8111626c:	1000683a 	jmp	r2
81116270:	81116d88 	cmpgei	r4,r16,17846
81116274:	81116e68 	cmpgeui	r4,r16,17849
81116278:	81116e68 	cmpgeui	r4,r16,17849
8111627c:	81116da8 	cmpgeui	r4,r16,17846
81116280:	81116e68 	cmpgeui	r4,r16,17849
81116284:	81116e68 	cmpgeui	r4,r16,17849
81116288:	81116e68 	cmpgeui	r4,r16,17849
8111628c:	81116e68 	cmpgeui	r4,r16,17849
81116290:	81116e68 	cmpgeui	r4,r16,17849
81116294:	81116e68 	cmpgeui	r4,r16,17849
81116298:	8111651c 	xori	r4,r16,17812
8111629c:	81116cc4 	addi	r4,r16,17843
811162a0:	81116e68 	cmpgeui	r4,r16,17849
811162a4:	811163e4 	muli	r4,r16,17807
811162a8:	81116544 	addi	r4,r16,17813
811162ac:	81116e68 	cmpgeui	r4,r16,17849
811162b0:	81116584 	addi	r4,r16,17814
811162b4:	81116590 	cmplti	r4,r16,17814
811162b8:	81116590 	cmplti	r4,r16,17814
811162bc:	81116590 	cmplti	r4,r16,17814
811162c0:	81116590 	cmplti	r4,r16,17814
811162c4:	81116590 	cmplti	r4,r16,17814
811162c8:	81116590 	cmplti	r4,r16,17814
811162cc:	81116590 	cmplti	r4,r16,17814
811162d0:	81116590 	cmplti	r4,r16,17814
811162d4:	81116590 	cmplti	r4,r16,17814
811162d8:	81116e68 	cmpgeui	r4,r16,17849
811162dc:	81116e68 	cmpgeui	r4,r16,17849
811162e0:	81116e68 	cmpgeui	r4,r16,17849
811162e4:	81116e68 	cmpgeui	r4,r16,17849
811162e8:	81116e68 	cmpgeui	r4,r16,17849
811162ec:	81116e68 	cmpgeui	r4,r16,17849
811162f0:	81116e68 	cmpgeui	r4,r16,17849
811162f4:	81116e68 	cmpgeui	r4,r16,17849
811162f8:	81116e68 	cmpgeui	r4,r16,17849
811162fc:	81116e68 	cmpgeui	r4,r16,17849
81116300:	811165c4 	addi	r4,r16,17815
81116304:	81116680 	call	88111668 <__reset+0x20f1668>
81116308:	81116e68 	cmpgeui	r4,r16,17849
8111630c:	81116680 	call	88111668 <__reset+0x20f1668>
81116310:	81116e68 	cmpgeui	r4,r16,17849
81116314:	81116e68 	cmpgeui	r4,r16,17849
81116318:	81116e68 	cmpgeui	r4,r16,17849
8111631c:	81116e68 	cmpgeui	r4,r16,17849
81116320:	81116720 	cmpeqi	r4,r16,17820
81116324:	81116e68 	cmpgeui	r4,r16,17849
81116328:	81116e68 	cmpgeui	r4,r16,17849
8111632c:	8111672c 	andhi	r4,r16,17820
81116330:	81116e68 	cmpgeui	r4,r16,17849
81116334:	81116e68 	cmpgeui	r4,r16,17849
81116338:	81116e68 	cmpgeui	r4,r16,17849
8111633c:	81116e68 	cmpgeui	r4,r16,17849
81116340:	81116e68 	cmpgeui	r4,r16,17849
81116344:	81116ba4 	muli	r4,r16,17838
81116348:	81116e68 	cmpgeui	r4,r16,17849
8111634c:	81116e68 	cmpgeui	r4,r16,17849
81116350:	81116c04 	addi	r4,r16,17840
81116354:	81116e68 	cmpgeui	r4,r16,17849
81116358:	81116e68 	cmpgeui	r4,r16,17849
8111635c:	81116e68 	cmpgeui	r4,r16,17849
81116360:	81116e68 	cmpgeui	r4,r16,17849
81116364:	81116e68 	cmpgeui	r4,r16,17849
81116368:	81116e68 	cmpgeui	r4,r16,17849
8111636c:	81116e68 	cmpgeui	r4,r16,17849
81116370:	81116e68 	cmpgeui	r4,r16,17849
81116374:	81116e68 	cmpgeui	r4,r16,17849
81116378:	81116e68 	cmpgeui	r4,r16,17849
8111637c:	81116e14 	ori	r4,r16,17848
81116380:	81116db4 	orhi	r4,r16,17846
81116384:	81116680 	call	88111668 <__reset+0x20f1668>
81116388:	81116680 	call	88111668 <__reset+0x20f1668>
8111638c:	81116680 	call	88111668 <__reset+0x20f1668>
81116390:	81116dc4 	addi	r4,r16,17847
81116394:	81116db4 	orhi	r4,r16,17846
81116398:	81116e68 	cmpgeui	r4,r16,17849
8111639c:	81116e68 	cmpgeui	r4,r16,17849
811163a0:	81116dd0 	cmplti	r4,r16,17847
811163a4:	81116e68 	cmpgeui	r4,r16,17849
811163a8:	81116de0 	cmpeqi	r4,r16,17847
811163ac:	81116cb4 	orhi	r4,r16,17842
811163b0:	811163f0 	cmpltui	r4,r16,17807
811163b4:	81116cd4 	ori	r4,r16,17843
811163b8:	81116e68 	cmpgeui	r4,r16,17849
811163bc:	81116ce0 	cmpeqi	r4,r16,17843
811163c0:	81116e68 	cmpgeui	r4,r16,17849
811163c4:	81116d3c 	xorhi	r4,r16,17844
811163c8:	81116e68 	cmpgeui	r4,r16,17849
811163cc:	81116e68 	cmpgeui	r4,r16,17849
811163d0:	81116d4c 	andi	r4,r16,17845
811163d4:	d9003117 	ldw	r4,196(sp)
811163d8:	d8802d15 	stw	r2,180(sp)
811163dc:	0109c83a 	sub	r4,zero,r4
811163e0:	d9003115 	stw	r4,196(sp)
811163e4:	94800114 	ori	r18,r18,4
811163e8:	ac400007 	ldb	r17,0(r21)
811163ec:	003f9706 	br	8111624c <__reset+0xfb0f624c>
811163f0:	00800c04 	movi	r2,48
811163f4:	d9002d17 	ldw	r4,180(sp)
811163f8:	d9402917 	ldw	r5,164(sp)
811163fc:	d8802705 	stb	r2,156(sp)
81116400:	00801e04 	movi	r2,120
81116404:	d8802745 	stb	r2,157(sp)
81116408:	d8002785 	stb	zero,158(sp)
8111640c:	20c00104 	addi	r3,r4,4
81116410:	24c00017 	ldw	r19,0(r4)
81116414:	002d883a 	mov	r22,zero
81116418:	90800094 	ori	r2,r18,2
8111641c:	28029a16 	blt	r5,zero,81116e88 <___vfprintf_internal_r+0xdc8>
81116420:	00bfdfc4 	movi	r2,-129
81116424:	90a4703a 	and	r18,r18,r2
81116428:	d8c02d15 	stw	r3,180(sp)
8111642c:	94800094 	ori	r18,r18,2
81116430:	9802871e 	bne	r19,zero,81116e50 <___vfprintf_internal_r+0xd90>
81116434:	00a04534 	movhi	r2,33044
81116438:	1080c404 	addi	r2,r2,784
8111643c:	d8803915 	stw	r2,228(sp)
81116440:	04401e04 	movi	r17,120
81116444:	d8802917 	ldw	r2,164(sp)
81116448:	0039883a 	mov	fp,zero
8111644c:	1001e926 	beq	r2,zero,81116bf4 <___vfprintf_internal_r+0xb34>
81116450:	0027883a 	mov	r19,zero
81116454:	002d883a 	mov	r22,zero
81116458:	00020506 	br	81116c70 <___vfprintf_internal_r+0xbb0>
8111645c:	d9002c17 	ldw	r4,176(sp)
81116460:	b80b883a 	mov	r5,r23
81116464:	1119e0c0 	call	81119e0c <__swsetup_r>
81116468:	1005ac1e 	bne	r2,zero,81117b1c <___vfprintf_internal_r+0x1a5c>
8111646c:	b880030b 	ldhu	r2,12(r23)
81116470:	00c00284 	movi	r3,10
81116474:	1080068c 	andi	r2,r2,26
81116478:	10ff3c1e 	bne	r2,r3,8111616c <__reset+0xfb0f616c>
8111647c:	b880038f 	ldh	r2,14(r23)
81116480:	103f3a16 	blt	r2,zero,8111616c <__reset+0xfb0f616c>
81116484:	d9c02d17 	ldw	r7,180(sp)
81116488:	d9002c17 	ldw	r4,176(sp)
8111648c:	a80d883a 	mov	r6,r21
81116490:	b80b883a 	mov	r5,r23
81116494:	11182dc0 	call	811182dc <__sbprintf>
81116498:	00001106 	br	811164e0 <___vfprintf_internal_r+0x420>
8111649c:	d9002c17 	ldw	r4,176(sp)
811164a0:	d9801e04 	addi	r6,sp,120
811164a4:	b80b883a 	mov	r5,r23
811164a8:	11222b00 	call	811222b0 <__sprint_r>
811164ac:	1000081e 	bne	r2,zero,811164d0 <___vfprintf_internal_r+0x410>
811164b0:	da000404 	addi	r8,sp,16
811164b4:	003f5306 	br	81116204 <__reset+0xfb0f6204>
811164b8:	d8802017 	ldw	r2,128(sp)
811164bc:	10000426 	beq	r2,zero,811164d0 <___vfprintf_internal_r+0x410>
811164c0:	d9002c17 	ldw	r4,176(sp)
811164c4:	d9801e04 	addi	r6,sp,120
811164c8:	b80b883a 	mov	r5,r23
811164cc:	11222b00 	call	811222b0 <__sprint_r>
811164d0:	b880030b 	ldhu	r2,12(r23)
811164d4:	1080100c 	andi	r2,r2,64
811164d8:	1005901e 	bne	r2,zero,81117b1c <___vfprintf_internal_r+0x1a5c>
811164dc:	d8802f17 	ldw	r2,188(sp)
811164e0:	dfc04717 	ldw	ra,284(sp)
811164e4:	df004617 	ldw	fp,280(sp)
811164e8:	ddc04517 	ldw	r23,276(sp)
811164ec:	dd804417 	ldw	r22,272(sp)
811164f0:	dd404317 	ldw	r21,268(sp)
811164f4:	dd004217 	ldw	r20,264(sp)
811164f8:	dcc04117 	ldw	r19,260(sp)
811164fc:	dc804017 	ldw	r18,256(sp)
81116500:	dc403f17 	ldw	r17,252(sp)
81116504:	dc003e17 	ldw	r16,248(sp)
81116508:	dec04804 	addi	sp,sp,288
8111650c:	f800283a 	ret
81116510:	d9002c17 	ldw	r4,176(sp)
81116514:	111be7c0 	call	8111be7c <__sinit>
81116518:	003f0406 	br	8111612c <__reset+0xfb0f612c>
8111651c:	d8802d17 	ldw	r2,180(sp)
81116520:	d9002d17 	ldw	r4,180(sp)
81116524:	10800017 	ldw	r2,0(r2)
81116528:	d8803115 	stw	r2,196(sp)
8111652c:	20800104 	addi	r2,r4,4
81116530:	d9003117 	ldw	r4,196(sp)
81116534:	203fa716 	blt	r4,zero,811163d4 <__reset+0xfb0f63d4>
81116538:	d8802d15 	stw	r2,180(sp)
8111653c:	ac400007 	ldb	r17,0(r21)
81116540:	003f4206 	br	8111624c <__reset+0xfb0f624c>
81116544:	ac400007 	ldb	r17,0(r21)
81116548:	aac00044 	addi	r11,r21,1
8111654c:	8a872826 	beq	r17,r10,811181f0 <___vfprintf_internal_r+0x2130>
81116550:	88bff404 	addi	r2,r17,-48
81116554:	0009883a 	mov	r4,zero
81116558:	30867d36 	bltu	r6,r2,81117f50 <___vfprintf_internal_r+0x1e90>
8111655c:	5c400007 	ldb	r17,0(r11)
81116560:	210002a4 	muli	r4,r4,10
81116564:	5d400044 	addi	r21,r11,1
81116568:	a817883a 	mov	r11,r21
8111656c:	2089883a 	add	r4,r4,r2
81116570:	88bff404 	addi	r2,r17,-48
81116574:	30bff92e 	bgeu	r6,r2,8111655c <__reset+0xfb0f655c>
81116578:	2005c916 	blt	r4,zero,81117ca0 <___vfprintf_internal_r+0x1be0>
8111657c:	d9002915 	stw	r4,164(sp)
81116580:	003f3306 	br	81116250 <__reset+0xfb0f6250>
81116584:	94802014 	ori	r18,r18,128
81116588:	ac400007 	ldb	r17,0(r21)
8111658c:	003f2f06 	br	8111624c <__reset+0xfb0f624c>
81116590:	a809883a 	mov	r4,r21
81116594:	d8003115 	stw	zero,196(sp)
81116598:	88bff404 	addi	r2,r17,-48
8111659c:	0017883a 	mov	r11,zero
811165a0:	24400007 	ldb	r17,0(r4)
811165a4:	5ac002a4 	muli	r11,r11,10
811165a8:	ad400044 	addi	r21,r21,1
811165ac:	a809883a 	mov	r4,r21
811165b0:	12d7883a 	add	r11,r2,r11
811165b4:	88bff404 	addi	r2,r17,-48
811165b8:	30bff92e 	bgeu	r6,r2,811165a0 <__reset+0xfb0f65a0>
811165bc:	dac03115 	stw	r11,196(sp)
811165c0:	003f2306 	br	81116250 <__reset+0xfb0f6250>
811165c4:	18c03fcc 	andi	r3,r3,255
811165c8:	18072b1e 	bne	r3,zero,81118278 <___vfprintf_internal_r+0x21b8>
811165cc:	94800414 	ori	r18,r18,16
811165d0:	9080080c 	andi	r2,r18,32
811165d4:	10037b26 	beq	r2,zero,811173c4 <___vfprintf_internal_r+0x1304>
811165d8:	d9402d17 	ldw	r5,180(sp)
811165dc:	28800117 	ldw	r2,4(r5)
811165e0:	2cc00017 	ldw	r19,0(r5)
811165e4:	29400204 	addi	r5,r5,8
811165e8:	d9402d15 	stw	r5,180(sp)
811165ec:	102d883a 	mov	r22,r2
811165f0:	10044b16 	blt	r2,zero,81117720 <___vfprintf_internal_r+0x1660>
811165f4:	d9402917 	ldw	r5,164(sp)
811165f8:	df002783 	ldbu	fp,158(sp)
811165fc:	2803bc16 	blt	r5,zero,811174f0 <___vfprintf_internal_r+0x1430>
81116600:	00ffdfc4 	movi	r3,-129
81116604:	9d84b03a 	or	r2,r19,r22
81116608:	90e4703a 	and	r18,r18,r3
8111660c:	10017726 	beq	r2,zero,81116bec <___vfprintf_internal_r+0xb2c>
81116610:	b0038326 	beq	r22,zero,81117420 <___vfprintf_internal_r+0x1360>
81116614:	dc402a15 	stw	r17,168(sp)
81116618:	dc001e04 	addi	r16,sp,120
8111661c:	b023883a 	mov	r17,r22
81116620:	402d883a 	mov	r22,r8
81116624:	9809883a 	mov	r4,r19
81116628:	880b883a 	mov	r5,r17
8111662c:	01800284 	movi	r6,10
81116630:	000f883a 	mov	r7,zero
81116634:	11250640 	call	81125064 <__umoddi3>
81116638:	10800c04 	addi	r2,r2,48
8111663c:	843fffc4 	addi	r16,r16,-1
81116640:	9809883a 	mov	r4,r19
81116644:	880b883a 	mov	r5,r17
81116648:	80800005 	stb	r2,0(r16)
8111664c:	01800284 	movi	r6,10
81116650:	000f883a 	mov	r7,zero
81116654:	1124ae40 	call	81124ae4 <__udivdi3>
81116658:	1027883a 	mov	r19,r2
8111665c:	10c4b03a 	or	r2,r2,r3
81116660:	1823883a 	mov	r17,r3
81116664:	103fef1e 	bne	r2,zero,81116624 <__reset+0xfb0f6624>
81116668:	d8c02817 	ldw	r3,160(sp)
8111666c:	dc402a17 	ldw	r17,168(sp)
81116670:	b011883a 	mov	r8,r22
81116674:	1c07c83a 	sub	r3,r3,r16
81116678:	d8c02e15 	stw	r3,184(sp)
8111667c:	00005906 	br	811167e4 <___vfprintf_internal_r+0x724>
81116680:	18c03fcc 	andi	r3,r3,255
81116684:	1806fa1e 	bne	r3,zero,81118270 <___vfprintf_internal_r+0x21b0>
81116688:	9080020c 	andi	r2,r18,8
8111668c:	10048a26 	beq	r2,zero,811178b8 <___vfprintf_internal_r+0x17f8>
81116690:	d8c02d17 	ldw	r3,180(sp)
81116694:	d9002d17 	ldw	r4,180(sp)
81116698:	d9402d17 	ldw	r5,180(sp)
8111669c:	18c00017 	ldw	r3,0(r3)
811166a0:	21000117 	ldw	r4,4(r4)
811166a4:	29400204 	addi	r5,r5,8
811166a8:	d8c03615 	stw	r3,216(sp)
811166ac:	d9003815 	stw	r4,224(sp)
811166b0:	d9402d15 	stw	r5,180(sp)
811166b4:	d9003617 	ldw	r4,216(sp)
811166b8:	d9403817 	ldw	r5,224(sp)
811166bc:	da003d15 	stw	r8,244(sp)
811166c0:	04000044 	movi	r16,1
811166c4:	111e9140 	call	8111e914 <__fpclassifyd>
811166c8:	da003d17 	ldw	r8,244(sp)
811166cc:	14041f1e 	bne	r2,r16,8111774c <___vfprintf_internal_r+0x168c>
811166d0:	d9003617 	ldw	r4,216(sp)
811166d4:	d9403817 	ldw	r5,224(sp)
811166d8:	000d883a 	mov	r6,zero
811166dc:	000f883a 	mov	r7,zero
811166e0:	1126c5c0 	call	81126c5c <__ledf2>
811166e4:	da003d17 	ldw	r8,244(sp)
811166e8:	1005be16 	blt	r2,zero,81117de4 <___vfprintf_internal_r+0x1d24>
811166ec:	df002783 	ldbu	fp,158(sp)
811166f0:	008011c4 	movi	r2,71
811166f4:	1445330e 	bge	r2,r17,81117bc4 <___vfprintf_internal_r+0x1b04>
811166f8:	04204534 	movhi	r16,33044
811166fc:	8400bc04 	addi	r16,r16,752
81116700:	00c000c4 	movi	r3,3
81116704:	00bfdfc4 	movi	r2,-129
81116708:	d8c02a15 	stw	r3,168(sp)
8111670c:	90a4703a 	and	r18,r18,r2
81116710:	d8c02e15 	stw	r3,184(sp)
81116714:	d8002915 	stw	zero,164(sp)
81116718:	d8003215 	stw	zero,200(sp)
8111671c:	00003706 	br	811167fc <___vfprintf_internal_r+0x73c>
81116720:	94800214 	ori	r18,r18,8
81116724:	ac400007 	ldb	r17,0(r21)
81116728:	003ec806 	br	8111624c <__reset+0xfb0f624c>
8111672c:	18c03fcc 	andi	r3,r3,255
81116730:	1806db1e 	bne	r3,zero,811182a0 <___vfprintf_internal_r+0x21e0>
81116734:	94800414 	ori	r18,r18,16
81116738:	9080080c 	andi	r2,r18,32
8111673c:	1002d826 	beq	r2,zero,811172a0 <___vfprintf_internal_r+0x11e0>
81116740:	d9402d17 	ldw	r5,180(sp)
81116744:	d8c02917 	ldw	r3,164(sp)
81116748:	d8002785 	stb	zero,158(sp)
8111674c:	28800204 	addi	r2,r5,8
81116750:	2cc00017 	ldw	r19,0(r5)
81116754:	2d800117 	ldw	r22,4(r5)
81116758:	18048f16 	blt	r3,zero,81117998 <___vfprintf_internal_r+0x18d8>
8111675c:	013fdfc4 	movi	r4,-129
81116760:	9d86b03a 	or	r3,r19,r22
81116764:	d8802d15 	stw	r2,180(sp)
81116768:	9124703a 	and	r18,r18,r4
8111676c:	1802d91e 	bne	r3,zero,811172d4 <___vfprintf_internal_r+0x1214>
81116770:	d8c02917 	ldw	r3,164(sp)
81116774:	0039883a 	mov	fp,zero
81116778:	1805c326 	beq	r3,zero,81117e88 <___vfprintf_internal_r+0x1dc8>
8111677c:	0027883a 	mov	r19,zero
81116780:	002d883a 	mov	r22,zero
81116784:	dc001e04 	addi	r16,sp,120
81116788:	9806d0fa 	srli	r3,r19,3
8111678c:	b008977a 	slli	r4,r22,29
81116790:	b02cd0fa 	srli	r22,r22,3
81116794:	9cc001cc 	andi	r19,r19,7
81116798:	98800c04 	addi	r2,r19,48
8111679c:	843fffc4 	addi	r16,r16,-1
811167a0:	20e6b03a 	or	r19,r4,r3
811167a4:	80800005 	stb	r2,0(r16)
811167a8:	9d86b03a 	or	r3,r19,r22
811167ac:	183ff61e 	bne	r3,zero,81116788 <__reset+0xfb0f6788>
811167b0:	90c0004c 	andi	r3,r18,1
811167b4:	18013b26 	beq	r3,zero,81116ca4 <___vfprintf_internal_r+0xbe4>
811167b8:	10803fcc 	andi	r2,r2,255
811167bc:	1080201c 	xori	r2,r2,128
811167c0:	10bfe004 	addi	r2,r2,-128
811167c4:	00c00c04 	movi	r3,48
811167c8:	10c13626 	beq	r2,r3,81116ca4 <___vfprintf_internal_r+0xbe4>
811167cc:	80ffffc5 	stb	r3,-1(r16)
811167d0:	d8c02817 	ldw	r3,160(sp)
811167d4:	80bfffc4 	addi	r2,r16,-1
811167d8:	1021883a 	mov	r16,r2
811167dc:	1887c83a 	sub	r3,r3,r2
811167e0:	d8c02e15 	stw	r3,184(sp)
811167e4:	d8802e17 	ldw	r2,184(sp)
811167e8:	d9002917 	ldw	r4,164(sp)
811167ec:	1100010e 	bge	r2,r4,811167f4 <___vfprintf_internal_r+0x734>
811167f0:	2005883a 	mov	r2,r4
811167f4:	d8802a15 	stw	r2,168(sp)
811167f8:	d8003215 	stw	zero,200(sp)
811167fc:	e7003fcc 	andi	fp,fp,255
81116800:	e700201c 	xori	fp,fp,128
81116804:	e73fe004 	addi	fp,fp,-128
81116808:	e0000326 	beq	fp,zero,81116818 <___vfprintf_internal_r+0x758>
8111680c:	d8c02a17 	ldw	r3,168(sp)
81116810:	18c00044 	addi	r3,r3,1
81116814:	d8c02a15 	stw	r3,168(sp)
81116818:	90c0008c 	andi	r3,r18,2
8111681c:	d8c02b15 	stw	r3,172(sp)
81116820:	18000326 	beq	r3,zero,81116830 <___vfprintf_internal_r+0x770>
81116824:	d8c02a17 	ldw	r3,168(sp)
81116828:	18c00084 	addi	r3,r3,2
8111682c:	d8c02a15 	stw	r3,168(sp)
81116830:	90c0210c 	andi	r3,r18,132
81116834:	d8c03015 	stw	r3,192(sp)
81116838:	1801a31e 	bne	r3,zero,81116ec8 <___vfprintf_internal_r+0xe08>
8111683c:	d9003117 	ldw	r4,196(sp)
81116840:	d8c02a17 	ldw	r3,168(sp)
81116844:	20e7c83a 	sub	r19,r4,r3
81116848:	04c19f0e 	bge	zero,r19,81116ec8 <___vfprintf_internal_r+0xe08>
8111684c:	02400404 	movi	r9,16
81116850:	d8c02017 	ldw	r3,128(sp)
81116854:	d8801f17 	ldw	r2,124(sp)
81116858:	4cc50d0e 	bge	r9,r19,81117c90 <___vfprintf_internal_r+0x1bd0>
8111685c:	01604534 	movhi	r5,33044
81116860:	2940d784 	addi	r5,r5,862
81116864:	dc403b15 	stw	r17,236(sp)
81116868:	d9403515 	stw	r5,212(sp)
8111686c:	9823883a 	mov	r17,r19
81116870:	482d883a 	mov	r22,r9
81116874:	9027883a 	mov	r19,r18
81116878:	070001c4 	movi	fp,7
8111687c:	8025883a 	mov	r18,r16
81116880:	dc002c17 	ldw	r16,176(sp)
81116884:	00000306 	br	81116894 <___vfprintf_internal_r+0x7d4>
81116888:	8c7ffc04 	addi	r17,r17,-16
8111688c:	42000204 	addi	r8,r8,8
81116890:	b440130e 	bge	r22,r17,811168e0 <___vfprintf_internal_r+0x820>
81116894:	01204534 	movhi	r4,33044
81116898:	18c00404 	addi	r3,r3,16
8111689c:	10800044 	addi	r2,r2,1
811168a0:	2100d784 	addi	r4,r4,862
811168a4:	41000015 	stw	r4,0(r8)
811168a8:	45800115 	stw	r22,4(r8)
811168ac:	d8c02015 	stw	r3,128(sp)
811168b0:	d8801f15 	stw	r2,124(sp)
811168b4:	e0bff40e 	bge	fp,r2,81116888 <__reset+0xfb0f6888>
811168b8:	d9801e04 	addi	r6,sp,120
811168bc:	b80b883a 	mov	r5,r23
811168c0:	8009883a 	mov	r4,r16
811168c4:	11222b00 	call	811222b0 <__sprint_r>
811168c8:	103f011e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
811168cc:	8c7ffc04 	addi	r17,r17,-16
811168d0:	d8c02017 	ldw	r3,128(sp)
811168d4:	d8801f17 	ldw	r2,124(sp)
811168d8:	da000404 	addi	r8,sp,16
811168dc:	b47fed16 	blt	r22,r17,81116894 <__reset+0xfb0f6894>
811168e0:	9021883a 	mov	r16,r18
811168e4:	9825883a 	mov	r18,r19
811168e8:	8827883a 	mov	r19,r17
811168ec:	dc403b17 	ldw	r17,236(sp)
811168f0:	d9403517 	ldw	r5,212(sp)
811168f4:	98c7883a 	add	r3,r19,r3
811168f8:	10800044 	addi	r2,r2,1
811168fc:	41400015 	stw	r5,0(r8)
81116900:	44c00115 	stw	r19,4(r8)
81116904:	d8c02015 	stw	r3,128(sp)
81116908:	d8801f15 	stw	r2,124(sp)
8111690c:	010001c4 	movi	r4,7
81116910:	2082a316 	blt	r4,r2,811173a0 <___vfprintf_internal_r+0x12e0>
81116914:	df002787 	ldb	fp,158(sp)
81116918:	42000204 	addi	r8,r8,8
8111691c:	e0000c26 	beq	fp,zero,81116950 <___vfprintf_internal_r+0x890>
81116920:	d8801f17 	ldw	r2,124(sp)
81116924:	d9002784 	addi	r4,sp,158
81116928:	18c00044 	addi	r3,r3,1
8111692c:	10800044 	addi	r2,r2,1
81116930:	41000015 	stw	r4,0(r8)
81116934:	01000044 	movi	r4,1
81116938:	41000115 	stw	r4,4(r8)
8111693c:	d8c02015 	stw	r3,128(sp)
81116940:	d8801f15 	stw	r2,124(sp)
81116944:	010001c4 	movi	r4,7
81116948:	20823c16 	blt	r4,r2,8111723c <___vfprintf_internal_r+0x117c>
8111694c:	42000204 	addi	r8,r8,8
81116950:	d8802b17 	ldw	r2,172(sp)
81116954:	10000c26 	beq	r2,zero,81116988 <___vfprintf_internal_r+0x8c8>
81116958:	d8801f17 	ldw	r2,124(sp)
8111695c:	d9002704 	addi	r4,sp,156
81116960:	18c00084 	addi	r3,r3,2
81116964:	10800044 	addi	r2,r2,1
81116968:	41000015 	stw	r4,0(r8)
8111696c:	01000084 	movi	r4,2
81116970:	41000115 	stw	r4,4(r8)
81116974:	d8c02015 	stw	r3,128(sp)
81116978:	d8801f15 	stw	r2,124(sp)
8111697c:	010001c4 	movi	r4,7
81116980:	20823616 	blt	r4,r2,8111725c <___vfprintf_internal_r+0x119c>
81116984:	42000204 	addi	r8,r8,8
81116988:	d9003017 	ldw	r4,192(sp)
8111698c:	00802004 	movi	r2,128
81116990:	20819926 	beq	r4,r2,81116ff8 <___vfprintf_internal_r+0xf38>
81116994:	d9402917 	ldw	r5,164(sp)
81116998:	d8802e17 	ldw	r2,184(sp)
8111699c:	28adc83a 	sub	r22,r5,r2
811169a0:	0580310e 	bge	zero,r22,81116a68 <___vfprintf_internal_r+0x9a8>
811169a4:	07000404 	movi	fp,16
811169a8:	d8801f17 	ldw	r2,124(sp)
811169ac:	e584140e 	bge	fp,r22,81117a00 <___vfprintf_internal_r+0x1940>
811169b0:	01604534 	movhi	r5,33044
811169b4:	2940d384 	addi	r5,r5,846
811169b8:	dc402915 	stw	r17,164(sp)
811169bc:	d9402b15 	stw	r5,172(sp)
811169c0:	b023883a 	mov	r17,r22
811169c4:	04c001c4 	movi	r19,7
811169c8:	a82d883a 	mov	r22,r21
811169cc:	902b883a 	mov	r21,r18
811169d0:	8025883a 	mov	r18,r16
811169d4:	dc002c17 	ldw	r16,176(sp)
811169d8:	00000306 	br	811169e8 <___vfprintf_internal_r+0x928>
811169dc:	8c7ffc04 	addi	r17,r17,-16
811169e0:	42000204 	addi	r8,r8,8
811169e4:	e440110e 	bge	fp,r17,81116a2c <___vfprintf_internal_r+0x96c>
811169e8:	18c00404 	addi	r3,r3,16
811169ec:	10800044 	addi	r2,r2,1
811169f0:	45000015 	stw	r20,0(r8)
811169f4:	47000115 	stw	fp,4(r8)
811169f8:	d8c02015 	stw	r3,128(sp)
811169fc:	d8801f15 	stw	r2,124(sp)
81116a00:	98bff60e 	bge	r19,r2,811169dc <__reset+0xfb0f69dc>
81116a04:	d9801e04 	addi	r6,sp,120
81116a08:	b80b883a 	mov	r5,r23
81116a0c:	8009883a 	mov	r4,r16
81116a10:	11222b00 	call	811222b0 <__sprint_r>
81116a14:	103eae1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81116a18:	8c7ffc04 	addi	r17,r17,-16
81116a1c:	d8c02017 	ldw	r3,128(sp)
81116a20:	d8801f17 	ldw	r2,124(sp)
81116a24:	da000404 	addi	r8,sp,16
81116a28:	e47fef16 	blt	fp,r17,811169e8 <__reset+0xfb0f69e8>
81116a2c:	9021883a 	mov	r16,r18
81116a30:	a825883a 	mov	r18,r21
81116a34:	b02b883a 	mov	r21,r22
81116a38:	882d883a 	mov	r22,r17
81116a3c:	dc402917 	ldw	r17,164(sp)
81116a40:	d9002b17 	ldw	r4,172(sp)
81116a44:	1d87883a 	add	r3,r3,r22
81116a48:	10800044 	addi	r2,r2,1
81116a4c:	41000015 	stw	r4,0(r8)
81116a50:	45800115 	stw	r22,4(r8)
81116a54:	d8c02015 	stw	r3,128(sp)
81116a58:	d8801f15 	stw	r2,124(sp)
81116a5c:	010001c4 	movi	r4,7
81116a60:	2081ee16 	blt	r4,r2,8111721c <___vfprintf_internal_r+0x115c>
81116a64:	42000204 	addi	r8,r8,8
81116a68:	9080400c 	andi	r2,r18,256
81116a6c:	1001181e 	bne	r2,zero,81116ed0 <___vfprintf_internal_r+0xe10>
81116a70:	d9402e17 	ldw	r5,184(sp)
81116a74:	d8801f17 	ldw	r2,124(sp)
81116a78:	44000015 	stw	r16,0(r8)
81116a7c:	1947883a 	add	r3,r3,r5
81116a80:	10800044 	addi	r2,r2,1
81116a84:	41400115 	stw	r5,4(r8)
81116a88:	d8c02015 	stw	r3,128(sp)
81116a8c:	d8801f15 	stw	r2,124(sp)
81116a90:	010001c4 	movi	r4,7
81116a94:	2081d316 	blt	r4,r2,811171e4 <___vfprintf_internal_r+0x1124>
81116a98:	42000204 	addi	r8,r8,8
81116a9c:	9480010c 	andi	r18,r18,4
81116aa0:	90003226 	beq	r18,zero,81116b6c <___vfprintf_internal_r+0xaac>
81116aa4:	d9403117 	ldw	r5,196(sp)
81116aa8:	d8802a17 	ldw	r2,168(sp)
81116aac:	28a1c83a 	sub	r16,r5,r2
81116ab0:	04002e0e 	bge	zero,r16,81116b6c <___vfprintf_internal_r+0xaac>
81116ab4:	04400404 	movi	r17,16
81116ab8:	d8801f17 	ldw	r2,124(sp)
81116abc:	8c04a20e 	bge	r17,r16,81117d48 <___vfprintf_internal_r+0x1c88>
81116ac0:	01604534 	movhi	r5,33044
81116ac4:	2940d784 	addi	r5,r5,862
81116ac8:	d9403515 	stw	r5,212(sp)
81116acc:	048001c4 	movi	r18,7
81116ad0:	dcc02c17 	ldw	r19,176(sp)
81116ad4:	00000306 	br	81116ae4 <___vfprintf_internal_r+0xa24>
81116ad8:	843ffc04 	addi	r16,r16,-16
81116adc:	42000204 	addi	r8,r8,8
81116ae0:	8c00130e 	bge	r17,r16,81116b30 <___vfprintf_internal_r+0xa70>
81116ae4:	01204534 	movhi	r4,33044
81116ae8:	18c00404 	addi	r3,r3,16
81116aec:	10800044 	addi	r2,r2,1
81116af0:	2100d784 	addi	r4,r4,862
81116af4:	41000015 	stw	r4,0(r8)
81116af8:	44400115 	stw	r17,4(r8)
81116afc:	d8c02015 	stw	r3,128(sp)
81116b00:	d8801f15 	stw	r2,124(sp)
81116b04:	90bff40e 	bge	r18,r2,81116ad8 <__reset+0xfb0f6ad8>
81116b08:	d9801e04 	addi	r6,sp,120
81116b0c:	b80b883a 	mov	r5,r23
81116b10:	9809883a 	mov	r4,r19
81116b14:	11222b00 	call	811222b0 <__sprint_r>
81116b18:	103e6d1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81116b1c:	843ffc04 	addi	r16,r16,-16
81116b20:	d8c02017 	ldw	r3,128(sp)
81116b24:	d8801f17 	ldw	r2,124(sp)
81116b28:	da000404 	addi	r8,sp,16
81116b2c:	8c3fed16 	blt	r17,r16,81116ae4 <__reset+0xfb0f6ae4>
81116b30:	d9403517 	ldw	r5,212(sp)
81116b34:	1c07883a 	add	r3,r3,r16
81116b38:	10800044 	addi	r2,r2,1
81116b3c:	41400015 	stw	r5,0(r8)
81116b40:	44000115 	stw	r16,4(r8)
81116b44:	d8c02015 	stw	r3,128(sp)
81116b48:	d8801f15 	stw	r2,124(sp)
81116b4c:	010001c4 	movi	r4,7
81116b50:	2080060e 	bge	r4,r2,81116b6c <___vfprintf_internal_r+0xaac>
81116b54:	d9002c17 	ldw	r4,176(sp)
81116b58:	d9801e04 	addi	r6,sp,120
81116b5c:	b80b883a 	mov	r5,r23
81116b60:	11222b00 	call	811222b0 <__sprint_r>
81116b64:	103e5a1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81116b68:	d8c02017 	ldw	r3,128(sp)
81116b6c:	d8803117 	ldw	r2,196(sp)
81116b70:	d9002a17 	ldw	r4,168(sp)
81116b74:	1100010e 	bge	r2,r4,81116b7c <___vfprintf_internal_r+0xabc>
81116b78:	2005883a 	mov	r2,r4
81116b7c:	d9402f17 	ldw	r5,188(sp)
81116b80:	288b883a 	add	r5,r5,r2
81116b84:	d9402f15 	stw	r5,188(sp)
81116b88:	18019e1e 	bne	r3,zero,81117204 <___vfprintf_internal_r+0x1144>
81116b8c:	a8800007 	ldb	r2,0(r21)
81116b90:	d8001f15 	stw	zero,124(sp)
81116b94:	da000404 	addi	r8,sp,16
81116b98:	103d851e 	bne	r2,zero,811161b0 <__reset+0xfb0f61b0>
81116b9c:	a821883a 	mov	r16,r21
81116ba0:	003d9b06 	br	81116210 <__reset+0xfb0f6210>
81116ba4:	18c03fcc 	andi	r3,r3,255
81116ba8:	1805c11e 	bne	r3,zero,811182b0 <___vfprintf_internal_r+0x21f0>
81116bac:	94800414 	ori	r18,r18,16
81116bb0:	9080080c 	andi	r2,r18,32
81116bb4:	10020c26 	beq	r2,zero,811173e8 <___vfprintf_internal_r+0x1328>
81116bb8:	d8802d17 	ldw	r2,180(sp)
81116bbc:	d9002917 	ldw	r4,164(sp)
81116bc0:	d8002785 	stb	zero,158(sp)
81116bc4:	10c00204 	addi	r3,r2,8
81116bc8:	14c00017 	ldw	r19,0(r2)
81116bcc:	15800117 	ldw	r22,4(r2)
81116bd0:	20040f16 	blt	r4,zero,81117c10 <___vfprintf_internal_r+0x1b50>
81116bd4:	013fdfc4 	movi	r4,-129
81116bd8:	9d84b03a 	or	r2,r19,r22
81116bdc:	d8c02d15 	stw	r3,180(sp)
81116be0:	9124703a 	and	r18,r18,r4
81116be4:	0039883a 	mov	fp,zero
81116be8:	103e891e 	bne	r2,zero,81116610 <__reset+0xfb0f6610>
81116bec:	d9002917 	ldw	r4,164(sp)
81116bf0:	2002c11e 	bne	r4,zero,811176f8 <___vfprintf_internal_r+0x1638>
81116bf4:	d8002915 	stw	zero,164(sp)
81116bf8:	d8002e15 	stw	zero,184(sp)
81116bfc:	dc001e04 	addi	r16,sp,120
81116c00:	003ef806 	br	811167e4 <__reset+0xfb0f67e4>
81116c04:	18c03fcc 	andi	r3,r3,255
81116c08:	18059d1e 	bne	r3,zero,81118280 <___vfprintf_internal_r+0x21c0>
81116c0c:	01604534 	movhi	r5,33044
81116c10:	2940bf04 	addi	r5,r5,764
81116c14:	d9403915 	stw	r5,228(sp)
81116c18:	9080080c 	andi	r2,r18,32
81116c1c:	10005226 	beq	r2,zero,81116d68 <___vfprintf_internal_r+0xca8>
81116c20:	d8802d17 	ldw	r2,180(sp)
81116c24:	14c00017 	ldw	r19,0(r2)
81116c28:	15800117 	ldw	r22,4(r2)
81116c2c:	10800204 	addi	r2,r2,8
81116c30:	d8802d15 	stw	r2,180(sp)
81116c34:	9080004c 	andi	r2,r18,1
81116c38:	10019026 	beq	r2,zero,8111727c <___vfprintf_internal_r+0x11bc>
81116c3c:	9d84b03a 	or	r2,r19,r22
81116c40:	10036926 	beq	r2,zero,811179e8 <___vfprintf_internal_r+0x1928>
81116c44:	d8c02917 	ldw	r3,164(sp)
81116c48:	00800c04 	movi	r2,48
81116c4c:	d8802705 	stb	r2,156(sp)
81116c50:	dc402745 	stb	r17,157(sp)
81116c54:	d8002785 	stb	zero,158(sp)
81116c58:	90800094 	ori	r2,r18,2
81116c5c:	18045d16 	blt	r3,zero,81117dd4 <___vfprintf_internal_r+0x1d14>
81116c60:	00bfdfc4 	movi	r2,-129
81116c64:	90a4703a 	and	r18,r18,r2
81116c68:	94800094 	ori	r18,r18,2
81116c6c:	0039883a 	mov	fp,zero
81116c70:	d9003917 	ldw	r4,228(sp)
81116c74:	dc001e04 	addi	r16,sp,120
81116c78:	988003cc 	andi	r2,r19,15
81116c7c:	b006973a 	slli	r3,r22,28
81116c80:	2085883a 	add	r2,r4,r2
81116c84:	9826d13a 	srli	r19,r19,4
81116c88:	10800003 	ldbu	r2,0(r2)
81116c8c:	b02cd13a 	srli	r22,r22,4
81116c90:	843fffc4 	addi	r16,r16,-1
81116c94:	1ce6b03a 	or	r19,r3,r19
81116c98:	80800005 	stb	r2,0(r16)
81116c9c:	9d84b03a 	or	r2,r19,r22
81116ca0:	103ff51e 	bne	r2,zero,81116c78 <__reset+0xfb0f6c78>
81116ca4:	d8c02817 	ldw	r3,160(sp)
81116ca8:	1c07c83a 	sub	r3,r3,r16
81116cac:	d8c02e15 	stw	r3,184(sp)
81116cb0:	003ecc06 	br	811167e4 <__reset+0xfb0f67e4>
81116cb4:	18c03fcc 	andi	r3,r3,255
81116cb8:	183e9f26 	beq	r3,zero,81116738 <__reset+0xfb0f6738>
81116cbc:	d9c02785 	stb	r7,158(sp)
81116cc0:	003e9d06 	br	81116738 <__reset+0xfb0f6738>
81116cc4:	00c00044 	movi	r3,1
81116cc8:	01c00ac4 	movi	r7,43
81116ccc:	ac400007 	ldb	r17,0(r21)
81116cd0:	003d5e06 	br	8111624c <__reset+0xfb0f624c>
81116cd4:	94800814 	ori	r18,r18,32
81116cd8:	ac400007 	ldb	r17,0(r21)
81116cdc:	003d5b06 	br	8111624c <__reset+0xfb0f624c>
81116ce0:	d8c02d17 	ldw	r3,180(sp)
81116ce4:	d8002785 	stb	zero,158(sp)
81116ce8:	1c000017 	ldw	r16,0(r3)
81116cec:	1cc00104 	addi	r19,r3,4
81116cf0:	80041926 	beq	r16,zero,81117d58 <___vfprintf_internal_r+0x1c98>
81116cf4:	d9002917 	ldw	r4,164(sp)
81116cf8:	2003d016 	blt	r4,zero,81117c3c <___vfprintf_internal_r+0x1b7c>
81116cfc:	200d883a 	mov	r6,r4
81116d00:	000b883a 	mov	r5,zero
81116d04:	8009883a 	mov	r4,r16
81116d08:	da003d15 	stw	r8,244(sp)
81116d0c:	111d0a40 	call	8111d0a4 <memchr>
81116d10:	da003d17 	ldw	r8,244(sp)
81116d14:	10045426 	beq	r2,zero,81117e68 <___vfprintf_internal_r+0x1da8>
81116d18:	1405c83a 	sub	r2,r2,r16
81116d1c:	d8802e15 	stw	r2,184(sp)
81116d20:	1003cc16 	blt	r2,zero,81117c54 <___vfprintf_internal_r+0x1b94>
81116d24:	df002783 	ldbu	fp,158(sp)
81116d28:	d8802a15 	stw	r2,168(sp)
81116d2c:	dcc02d15 	stw	r19,180(sp)
81116d30:	d8002915 	stw	zero,164(sp)
81116d34:	d8003215 	stw	zero,200(sp)
81116d38:	003eb006 	br	811167fc <__reset+0xfb0f67fc>
81116d3c:	18c03fcc 	andi	r3,r3,255
81116d40:	183f9b26 	beq	r3,zero,81116bb0 <__reset+0xfb0f6bb0>
81116d44:	d9c02785 	stb	r7,158(sp)
81116d48:	003f9906 	br	81116bb0 <__reset+0xfb0f6bb0>
81116d4c:	18c03fcc 	andi	r3,r3,255
81116d50:	1805551e 	bne	r3,zero,811182a8 <___vfprintf_internal_r+0x21e8>
81116d54:	01604534 	movhi	r5,33044
81116d58:	2940c404 	addi	r5,r5,784
81116d5c:	d9403915 	stw	r5,228(sp)
81116d60:	9080080c 	andi	r2,r18,32
81116d64:	103fae1e 	bne	r2,zero,81116c20 <__reset+0xfb0f6c20>
81116d68:	9080040c 	andi	r2,r18,16
81116d6c:	1002de26 	beq	r2,zero,811178e8 <___vfprintf_internal_r+0x1828>
81116d70:	d8c02d17 	ldw	r3,180(sp)
81116d74:	002d883a 	mov	r22,zero
81116d78:	1cc00017 	ldw	r19,0(r3)
81116d7c:	18c00104 	addi	r3,r3,4
81116d80:	d8c02d15 	stw	r3,180(sp)
81116d84:	003fab06 	br	81116c34 <__reset+0xfb0f6c34>
81116d88:	38803fcc 	andi	r2,r7,255
81116d8c:	1080201c 	xori	r2,r2,128
81116d90:	10bfe004 	addi	r2,r2,-128
81116d94:	1002d21e 	bne	r2,zero,811178e0 <___vfprintf_internal_r+0x1820>
81116d98:	00c00044 	movi	r3,1
81116d9c:	01c00804 	movi	r7,32
81116da0:	ac400007 	ldb	r17,0(r21)
81116da4:	003d2906 	br	8111624c <__reset+0xfb0f624c>
81116da8:	94800054 	ori	r18,r18,1
81116dac:	ac400007 	ldb	r17,0(r21)
81116db0:	003d2606 	br	8111624c <__reset+0xfb0f624c>
81116db4:	18c03fcc 	andi	r3,r3,255
81116db8:	183e0526 	beq	r3,zero,811165d0 <__reset+0xfb0f65d0>
81116dbc:	d9c02785 	stb	r7,158(sp)
81116dc0:	003e0306 	br	811165d0 <__reset+0xfb0f65d0>
81116dc4:	94801014 	ori	r18,r18,64
81116dc8:	ac400007 	ldb	r17,0(r21)
81116dcc:	003d1f06 	br	8111624c <__reset+0xfb0f624c>
81116dd0:	ac400007 	ldb	r17,0(r21)
81116dd4:	8a438726 	beq	r17,r9,81117bf4 <___vfprintf_internal_r+0x1b34>
81116dd8:	94800414 	ori	r18,r18,16
81116ddc:	003d1b06 	br	8111624c <__reset+0xfb0f624c>
81116de0:	18c03fcc 	andi	r3,r3,255
81116de4:	1805341e 	bne	r3,zero,811182b8 <___vfprintf_internal_r+0x21f8>
81116de8:	9080080c 	andi	r2,r18,32
81116dec:	1002cd26 	beq	r2,zero,81117924 <___vfprintf_internal_r+0x1864>
81116df0:	d9402d17 	ldw	r5,180(sp)
81116df4:	d9002f17 	ldw	r4,188(sp)
81116df8:	28800017 	ldw	r2,0(r5)
81116dfc:	2007d7fa 	srai	r3,r4,31
81116e00:	29400104 	addi	r5,r5,4
81116e04:	d9402d15 	stw	r5,180(sp)
81116e08:	11000015 	stw	r4,0(r2)
81116e0c:	10c00115 	stw	r3,4(r2)
81116e10:	003ce506 	br	811161a8 <__reset+0xfb0f61a8>
81116e14:	d8c02d17 	ldw	r3,180(sp)
81116e18:	d9002d17 	ldw	r4,180(sp)
81116e1c:	d8002785 	stb	zero,158(sp)
81116e20:	18800017 	ldw	r2,0(r3)
81116e24:	21000104 	addi	r4,r4,4
81116e28:	00c00044 	movi	r3,1
81116e2c:	d8c02a15 	stw	r3,168(sp)
81116e30:	d8801405 	stb	r2,80(sp)
81116e34:	d9002d15 	stw	r4,180(sp)
81116e38:	d8c02e15 	stw	r3,184(sp)
81116e3c:	d8002915 	stw	zero,164(sp)
81116e40:	d8003215 	stw	zero,200(sp)
81116e44:	dc001404 	addi	r16,sp,80
81116e48:	0039883a 	mov	fp,zero
81116e4c:	003e7206 	br	81116818 <__reset+0xfb0f6818>
81116e50:	01204534 	movhi	r4,33044
81116e54:	2100c404 	addi	r4,r4,784
81116e58:	0039883a 	mov	fp,zero
81116e5c:	d9003915 	stw	r4,228(sp)
81116e60:	04401e04 	movi	r17,120
81116e64:	003f8206 	br	81116c70 <__reset+0xfb0f6c70>
81116e68:	18c03fcc 	andi	r3,r3,255
81116e6c:	1805061e 	bne	r3,zero,81118288 <___vfprintf_internal_r+0x21c8>
81116e70:	883d9126 	beq	r17,zero,811164b8 <__reset+0xfb0f64b8>
81116e74:	00c00044 	movi	r3,1
81116e78:	d8c02a15 	stw	r3,168(sp)
81116e7c:	dc401405 	stb	r17,80(sp)
81116e80:	d8002785 	stb	zero,158(sp)
81116e84:	003fec06 	br	81116e38 <__reset+0xfb0f6e38>
81116e88:	01604534 	movhi	r5,33044
81116e8c:	2940c404 	addi	r5,r5,784
81116e90:	d9403915 	stw	r5,228(sp)
81116e94:	d8c02d15 	stw	r3,180(sp)
81116e98:	1025883a 	mov	r18,r2
81116e9c:	04401e04 	movi	r17,120
81116ea0:	9d84b03a 	or	r2,r19,r22
81116ea4:	1000fc1e 	bne	r2,zero,81117298 <___vfprintf_internal_r+0x11d8>
81116ea8:	0039883a 	mov	fp,zero
81116eac:	00800084 	movi	r2,2
81116eb0:	10803fcc 	andi	r2,r2,255
81116eb4:	00c00044 	movi	r3,1
81116eb8:	10c20f26 	beq	r2,r3,811176f8 <___vfprintf_internal_r+0x1638>
81116ebc:	00c00084 	movi	r3,2
81116ec0:	10fd6326 	beq	r2,r3,81116450 <__reset+0xfb0f6450>
81116ec4:	003e2d06 	br	8111677c <__reset+0xfb0f677c>
81116ec8:	d8c02017 	ldw	r3,128(sp)
81116ecc:	003e9306 	br	8111691c <__reset+0xfb0f691c>
81116ed0:	00801944 	movi	r2,101
81116ed4:	14407e0e 	bge	r2,r17,811170d0 <___vfprintf_internal_r+0x1010>
81116ed8:	d9003617 	ldw	r4,216(sp)
81116edc:	d9403817 	ldw	r5,224(sp)
81116ee0:	000d883a 	mov	r6,zero
81116ee4:	000f883a 	mov	r7,zero
81116ee8:	d8c03c15 	stw	r3,240(sp)
81116eec:	da003d15 	stw	r8,244(sp)
81116ef0:	1126af80 	call	81126af8 <__eqdf2>
81116ef4:	d8c03c17 	ldw	r3,240(sp)
81116ef8:	da003d17 	ldw	r8,244(sp)
81116efc:	1000f71e 	bne	r2,zero,811172dc <___vfprintf_internal_r+0x121c>
81116f00:	d8801f17 	ldw	r2,124(sp)
81116f04:	01204534 	movhi	r4,33044
81116f08:	2100cb04 	addi	r4,r4,812
81116f0c:	18c00044 	addi	r3,r3,1
81116f10:	10800044 	addi	r2,r2,1
81116f14:	41000015 	stw	r4,0(r8)
81116f18:	01000044 	movi	r4,1
81116f1c:	41000115 	stw	r4,4(r8)
81116f20:	d8c02015 	stw	r3,128(sp)
81116f24:	d8801f15 	stw	r2,124(sp)
81116f28:	010001c4 	movi	r4,7
81116f2c:	2082b816 	blt	r4,r2,81117a10 <___vfprintf_internal_r+0x1950>
81116f30:	42000204 	addi	r8,r8,8
81116f34:	d8802617 	ldw	r2,152(sp)
81116f38:	d9403317 	ldw	r5,204(sp)
81116f3c:	11400216 	blt	r2,r5,81116f48 <___vfprintf_internal_r+0xe88>
81116f40:	9080004c 	andi	r2,r18,1
81116f44:	103ed526 	beq	r2,zero,81116a9c <__reset+0xfb0f6a9c>
81116f48:	d8803717 	ldw	r2,220(sp)
81116f4c:	d9003417 	ldw	r4,208(sp)
81116f50:	d9403717 	ldw	r5,220(sp)
81116f54:	1887883a 	add	r3,r3,r2
81116f58:	d8801f17 	ldw	r2,124(sp)
81116f5c:	41000015 	stw	r4,0(r8)
81116f60:	41400115 	stw	r5,4(r8)
81116f64:	10800044 	addi	r2,r2,1
81116f68:	d8c02015 	stw	r3,128(sp)
81116f6c:	d8801f15 	stw	r2,124(sp)
81116f70:	010001c4 	movi	r4,7
81116f74:	20832916 	blt	r4,r2,81117c1c <___vfprintf_internal_r+0x1b5c>
81116f78:	42000204 	addi	r8,r8,8
81116f7c:	d8803317 	ldw	r2,204(sp)
81116f80:	143fffc4 	addi	r16,r2,-1
81116f84:	043ec50e 	bge	zero,r16,81116a9c <__reset+0xfb0f6a9c>
81116f88:	04400404 	movi	r17,16
81116f8c:	d8801f17 	ldw	r2,124(sp)
81116f90:	8c00880e 	bge	r17,r16,811171b4 <___vfprintf_internal_r+0x10f4>
81116f94:	01604534 	movhi	r5,33044
81116f98:	2940d384 	addi	r5,r5,846
81116f9c:	d9402b15 	stw	r5,172(sp)
81116fa0:	058001c4 	movi	r22,7
81116fa4:	dcc02c17 	ldw	r19,176(sp)
81116fa8:	00000306 	br	81116fb8 <___vfprintf_internal_r+0xef8>
81116fac:	42000204 	addi	r8,r8,8
81116fb0:	843ffc04 	addi	r16,r16,-16
81116fb4:	8c00820e 	bge	r17,r16,811171c0 <___vfprintf_internal_r+0x1100>
81116fb8:	18c00404 	addi	r3,r3,16
81116fbc:	10800044 	addi	r2,r2,1
81116fc0:	45000015 	stw	r20,0(r8)
81116fc4:	44400115 	stw	r17,4(r8)
81116fc8:	d8c02015 	stw	r3,128(sp)
81116fcc:	d8801f15 	stw	r2,124(sp)
81116fd0:	b0bff60e 	bge	r22,r2,81116fac <__reset+0xfb0f6fac>
81116fd4:	d9801e04 	addi	r6,sp,120
81116fd8:	b80b883a 	mov	r5,r23
81116fdc:	9809883a 	mov	r4,r19
81116fe0:	11222b00 	call	811222b0 <__sprint_r>
81116fe4:	103d3a1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81116fe8:	d8c02017 	ldw	r3,128(sp)
81116fec:	d8801f17 	ldw	r2,124(sp)
81116ff0:	da000404 	addi	r8,sp,16
81116ff4:	003fee06 	br	81116fb0 <__reset+0xfb0f6fb0>
81116ff8:	d9403117 	ldw	r5,196(sp)
81116ffc:	d8802a17 	ldw	r2,168(sp)
81117000:	28adc83a 	sub	r22,r5,r2
81117004:	05be630e 	bge	zero,r22,81116994 <__reset+0xfb0f6994>
81117008:	07000404 	movi	fp,16
8111700c:	d8801f17 	ldw	r2,124(sp)
81117010:	e5838f0e 	bge	fp,r22,81117e50 <___vfprintf_internal_r+0x1d90>
81117014:	01604534 	movhi	r5,33044
81117018:	2940d384 	addi	r5,r5,846
8111701c:	dc403015 	stw	r17,192(sp)
81117020:	d9402b15 	stw	r5,172(sp)
81117024:	b023883a 	mov	r17,r22
81117028:	04c001c4 	movi	r19,7
8111702c:	a82d883a 	mov	r22,r21
81117030:	902b883a 	mov	r21,r18
81117034:	8025883a 	mov	r18,r16
81117038:	dc002c17 	ldw	r16,176(sp)
8111703c:	00000306 	br	8111704c <___vfprintf_internal_r+0xf8c>
81117040:	8c7ffc04 	addi	r17,r17,-16
81117044:	42000204 	addi	r8,r8,8
81117048:	e440110e 	bge	fp,r17,81117090 <___vfprintf_internal_r+0xfd0>
8111704c:	18c00404 	addi	r3,r3,16
81117050:	10800044 	addi	r2,r2,1
81117054:	45000015 	stw	r20,0(r8)
81117058:	47000115 	stw	fp,4(r8)
8111705c:	d8c02015 	stw	r3,128(sp)
81117060:	d8801f15 	stw	r2,124(sp)
81117064:	98bff60e 	bge	r19,r2,81117040 <__reset+0xfb0f7040>
81117068:	d9801e04 	addi	r6,sp,120
8111706c:	b80b883a 	mov	r5,r23
81117070:	8009883a 	mov	r4,r16
81117074:	11222b00 	call	811222b0 <__sprint_r>
81117078:	103d151e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
8111707c:	8c7ffc04 	addi	r17,r17,-16
81117080:	d8c02017 	ldw	r3,128(sp)
81117084:	d8801f17 	ldw	r2,124(sp)
81117088:	da000404 	addi	r8,sp,16
8111708c:	e47fef16 	blt	fp,r17,8111704c <__reset+0xfb0f704c>
81117090:	9021883a 	mov	r16,r18
81117094:	a825883a 	mov	r18,r21
81117098:	b02b883a 	mov	r21,r22
8111709c:	882d883a 	mov	r22,r17
811170a0:	dc403017 	ldw	r17,192(sp)
811170a4:	d9002b17 	ldw	r4,172(sp)
811170a8:	1d87883a 	add	r3,r3,r22
811170ac:	10800044 	addi	r2,r2,1
811170b0:	41000015 	stw	r4,0(r8)
811170b4:	45800115 	stw	r22,4(r8)
811170b8:	d8c02015 	stw	r3,128(sp)
811170bc:	d8801f15 	stw	r2,124(sp)
811170c0:	010001c4 	movi	r4,7
811170c4:	20818e16 	blt	r4,r2,81117700 <___vfprintf_internal_r+0x1640>
811170c8:	42000204 	addi	r8,r8,8
811170cc:	003e3106 	br	81116994 <__reset+0xfb0f6994>
811170d0:	d9403317 	ldw	r5,204(sp)
811170d4:	00800044 	movi	r2,1
811170d8:	18c00044 	addi	r3,r3,1
811170dc:	1141530e 	bge	r2,r5,8111762c <___vfprintf_internal_r+0x156c>
811170e0:	dc401f17 	ldw	r17,124(sp)
811170e4:	00800044 	movi	r2,1
811170e8:	40800115 	stw	r2,4(r8)
811170ec:	8c400044 	addi	r17,r17,1
811170f0:	44000015 	stw	r16,0(r8)
811170f4:	d8c02015 	stw	r3,128(sp)
811170f8:	dc401f15 	stw	r17,124(sp)
811170fc:	008001c4 	movi	r2,7
81117100:	14416b16 	blt	r2,r17,811176b0 <___vfprintf_internal_r+0x15f0>
81117104:	42000204 	addi	r8,r8,8
81117108:	d8803717 	ldw	r2,220(sp)
8111710c:	d9003417 	ldw	r4,208(sp)
81117110:	8c400044 	addi	r17,r17,1
81117114:	10c7883a 	add	r3,r2,r3
81117118:	40800115 	stw	r2,4(r8)
8111711c:	41000015 	stw	r4,0(r8)
81117120:	d8c02015 	stw	r3,128(sp)
81117124:	dc401f15 	stw	r17,124(sp)
81117128:	008001c4 	movi	r2,7
8111712c:	14416916 	blt	r2,r17,811176d4 <___vfprintf_internal_r+0x1614>
81117130:	45800204 	addi	r22,r8,8
81117134:	d9003617 	ldw	r4,216(sp)
81117138:	d9403817 	ldw	r5,224(sp)
8111713c:	000d883a 	mov	r6,zero
81117140:	000f883a 	mov	r7,zero
81117144:	d8c03c15 	stw	r3,240(sp)
81117148:	1126af80 	call	81126af8 <__eqdf2>
8111714c:	d8c03c17 	ldw	r3,240(sp)
81117150:	1000bc26 	beq	r2,zero,81117444 <___vfprintf_internal_r+0x1384>
81117154:	d9403317 	ldw	r5,204(sp)
81117158:	84000044 	addi	r16,r16,1
8111715c:	8c400044 	addi	r17,r17,1
81117160:	28bfffc4 	addi	r2,r5,-1
81117164:	1887883a 	add	r3,r3,r2
81117168:	b0800115 	stw	r2,4(r22)
8111716c:	b4000015 	stw	r16,0(r22)
81117170:	d8c02015 	stw	r3,128(sp)
81117174:	dc401f15 	stw	r17,124(sp)
81117178:	008001c4 	movi	r2,7
8111717c:	14414316 	blt	r2,r17,8111768c <___vfprintf_internal_r+0x15cc>
81117180:	b5800204 	addi	r22,r22,8
81117184:	d9003a17 	ldw	r4,232(sp)
81117188:	df0022c4 	addi	fp,sp,139
8111718c:	8c400044 	addi	r17,r17,1
81117190:	20c7883a 	add	r3,r4,r3
81117194:	b7000015 	stw	fp,0(r22)
81117198:	b1000115 	stw	r4,4(r22)
8111719c:	d8c02015 	stw	r3,128(sp)
811171a0:	dc401f15 	stw	r17,124(sp)
811171a4:	008001c4 	movi	r2,7
811171a8:	14400e16 	blt	r2,r17,811171e4 <___vfprintf_internal_r+0x1124>
811171ac:	b2000204 	addi	r8,r22,8
811171b0:	003e3a06 	br	81116a9c <__reset+0xfb0f6a9c>
811171b4:	01204534 	movhi	r4,33044
811171b8:	2100d384 	addi	r4,r4,846
811171bc:	d9002b15 	stw	r4,172(sp)
811171c0:	d9002b17 	ldw	r4,172(sp)
811171c4:	1c07883a 	add	r3,r3,r16
811171c8:	44000115 	stw	r16,4(r8)
811171cc:	41000015 	stw	r4,0(r8)
811171d0:	10800044 	addi	r2,r2,1
811171d4:	d8c02015 	stw	r3,128(sp)
811171d8:	d8801f15 	stw	r2,124(sp)
811171dc:	010001c4 	movi	r4,7
811171e0:	20be2d0e 	bge	r4,r2,81116a98 <__reset+0xfb0f6a98>
811171e4:	d9002c17 	ldw	r4,176(sp)
811171e8:	d9801e04 	addi	r6,sp,120
811171ec:	b80b883a 	mov	r5,r23
811171f0:	11222b00 	call	811222b0 <__sprint_r>
811171f4:	103cb61e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
811171f8:	d8c02017 	ldw	r3,128(sp)
811171fc:	da000404 	addi	r8,sp,16
81117200:	003e2606 	br	81116a9c <__reset+0xfb0f6a9c>
81117204:	d9002c17 	ldw	r4,176(sp)
81117208:	d9801e04 	addi	r6,sp,120
8111720c:	b80b883a 	mov	r5,r23
81117210:	11222b00 	call	811222b0 <__sprint_r>
81117214:	103e5d26 	beq	r2,zero,81116b8c <__reset+0xfb0f6b8c>
81117218:	003cad06 	br	811164d0 <__reset+0xfb0f64d0>
8111721c:	d9002c17 	ldw	r4,176(sp)
81117220:	d9801e04 	addi	r6,sp,120
81117224:	b80b883a 	mov	r5,r23
81117228:	11222b00 	call	811222b0 <__sprint_r>
8111722c:	103ca81e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117230:	d8c02017 	ldw	r3,128(sp)
81117234:	da000404 	addi	r8,sp,16
81117238:	003e0b06 	br	81116a68 <__reset+0xfb0f6a68>
8111723c:	d9002c17 	ldw	r4,176(sp)
81117240:	d9801e04 	addi	r6,sp,120
81117244:	b80b883a 	mov	r5,r23
81117248:	11222b00 	call	811222b0 <__sprint_r>
8111724c:	103ca01e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117250:	d8c02017 	ldw	r3,128(sp)
81117254:	da000404 	addi	r8,sp,16
81117258:	003dbd06 	br	81116950 <__reset+0xfb0f6950>
8111725c:	d9002c17 	ldw	r4,176(sp)
81117260:	d9801e04 	addi	r6,sp,120
81117264:	b80b883a 	mov	r5,r23
81117268:	11222b00 	call	811222b0 <__sprint_r>
8111726c:	103c981e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117270:	d8c02017 	ldw	r3,128(sp)
81117274:	da000404 	addi	r8,sp,16
81117278:	003dc306 	br	81116988 <__reset+0xfb0f6988>
8111727c:	d8802917 	ldw	r2,164(sp)
81117280:	d8002785 	stb	zero,158(sp)
81117284:	103f0616 	blt	r2,zero,81116ea0 <__reset+0xfb0f6ea0>
81117288:	00ffdfc4 	movi	r3,-129
8111728c:	9d84b03a 	or	r2,r19,r22
81117290:	90e4703a 	and	r18,r18,r3
81117294:	103c6b26 	beq	r2,zero,81116444 <__reset+0xfb0f6444>
81117298:	0039883a 	mov	fp,zero
8111729c:	003e7406 	br	81116c70 <__reset+0xfb0f6c70>
811172a0:	9080040c 	andi	r2,r18,16
811172a4:	1001b326 	beq	r2,zero,81117974 <___vfprintf_internal_r+0x18b4>
811172a8:	d9002d17 	ldw	r4,180(sp)
811172ac:	d9402917 	ldw	r5,164(sp)
811172b0:	d8002785 	stb	zero,158(sp)
811172b4:	20800104 	addi	r2,r4,4
811172b8:	24c00017 	ldw	r19,0(r4)
811172bc:	002d883a 	mov	r22,zero
811172c0:	2801b516 	blt	r5,zero,81117998 <___vfprintf_internal_r+0x18d8>
811172c4:	00ffdfc4 	movi	r3,-129
811172c8:	d8802d15 	stw	r2,180(sp)
811172cc:	90e4703a 	and	r18,r18,r3
811172d0:	983d2726 	beq	r19,zero,81116770 <__reset+0xfb0f6770>
811172d4:	0039883a 	mov	fp,zero
811172d8:	003d2a06 	br	81116784 <__reset+0xfb0f6784>
811172dc:	dc402617 	ldw	r17,152(sp)
811172e0:	0441d30e 	bge	zero,r17,81117a30 <___vfprintf_internal_r+0x1970>
811172e4:	dc403217 	ldw	r17,200(sp)
811172e8:	d8803317 	ldw	r2,204(sp)
811172ec:	1440010e 	bge	r2,r17,811172f4 <___vfprintf_internal_r+0x1234>
811172f0:	1023883a 	mov	r17,r2
811172f4:	04400a0e 	bge	zero,r17,81117320 <___vfprintf_internal_r+0x1260>
811172f8:	d8801f17 	ldw	r2,124(sp)
811172fc:	1c47883a 	add	r3,r3,r17
81117300:	44000015 	stw	r16,0(r8)
81117304:	10800044 	addi	r2,r2,1
81117308:	44400115 	stw	r17,4(r8)
8111730c:	d8c02015 	stw	r3,128(sp)
81117310:	d8801f15 	stw	r2,124(sp)
81117314:	010001c4 	movi	r4,7
81117318:	20826516 	blt	r4,r2,81117cb0 <___vfprintf_internal_r+0x1bf0>
8111731c:	42000204 	addi	r8,r8,8
81117320:	88026116 	blt	r17,zero,81117ca8 <___vfprintf_internal_r+0x1be8>
81117324:	d9003217 	ldw	r4,200(sp)
81117328:	2463c83a 	sub	r17,r4,r17
8111732c:	04407b0e 	bge	zero,r17,8111751c <___vfprintf_internal_r+0x145c>
81117330:	05800404 	movi	r22,16
81117334:	d8801f17 	ldw	r2,124(sp)
81117338:	b4419d0e 	bge	r22,r17,811179b0 <___vfprintf_internal_r+0x18f0>
8111733c:	01204534 	movhi	r4,33044
81117340:	2100d384 	addi	r4,r4,846
81117344:	d9002b15 	stw	r4,172(sp)
81117348:	070001c4 	movi	fp,7
8111734c:	dcc02c17 	ldw	r19,176(sp)
81117350:	00000306 	br	81117360 <___vfprintf_internal_r+0x12a0>
81117354:	42000204 	addi	r8,r8,8
81117358:	8c7ffc04 	addi	r17,r17,-16
8111735c:	b441970e 	bge	r22,r17,811179bc <___vfprintf_internal_r+0x18fc>
81117360:	18c00404 	addi	r3,r3,16
81117364:	10800044 	addi	r2,r2,1
81117368:	45000015 	stw	r20,0(r8)
8111736c:	45800115 	stw	r22,4(r8)
81117370:	d8c02015 	stw	r3,128(sp)
81117374:	d8801f15 	stw	r2,124(sp)
81117378:	e0bff60e 	bge	fp,r2,81117354 <__reset+0xfb0f7354>
8111737c:	d9801e04 	addi	r6,sp,120
81117380:	b80b883a 	mov	r5,r23
81117384:	9809883a 	mov	r4,r19
81117388:	11222b00 	call	811222b0 <__sprint_r>
8111738c:	103c501e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117390:	d8c02017 	ldw	r3,128(sp)
81117394:	d8801f17 	ldw	r2,124(sp)
81117398:	da000404 	addi	r8,sp,16
8111739c:	003fee06 	br	81117358 <__reset+0xfb0f7358>
811173a0:	d9002c17 	ldw	r4,176(sp)
811173a4:	d9801e04 	addi	r6,sp,120
811173a8:	b80b883a 	mov	r5,r23
811173ac:	11222b00 	call	811222b0 <__sprint_r>
811173b0:	103c471e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
811173b4:	d8c02017 	ldw	r3,128(sp)
811173b8:	df002787 	ldb	fp,158(sp)
811173bc:	da000404 	addi	r8,sp,16
811173c0:	003d5606 	br	8111691c <__reset+0xfb0f691c>
811173c4:	9080040c 	andi	r2,r18,16
811173c8:	10016126 	beq	r2,zero,81117950 <___vfprintf_internal_r+0x1890>
811173cc:	d8802d17 	ldw	r2,180(sp)
811173d0:	14c00017 	ldw	r19,0(r2)
811173d4:	10800104 	addi	r2,r2,4
811173d8:	d8802d15 	stw	r2,180(sp)
811173dc:	982dd7fa 	srai	r22,r19,31
811173e0:	b005883a 	mov	r2,r22
811173e4:	003c8206 	br	811165f0 <__reset+0xfb0f65f0>
811173e8:	9080040c 	andi	r2,r18,16
811173ec:	10003526 	beq	r2,zero,811174c4 <___vfprintf_internal_r+0x1404>
811173f0:	d9402d17 	ldw	r5,180(sp)
811173f4:	d8c02917 	ldw	r3,164(sp)
811173f8:	d8002785 	stb	zero,158(sp)
811173fc:	28800104 	addi	r2,r5,4
81117400:	2cc00017 	ldw	r19,0(r5)
81117404:	002d883a 	mov	r22,zero
81117408:	18003716 	blt	r3,zero,811174e8 <___vfprintf_internal_r+0x1428>
8111740c:	00ffdfc4 	movi	r3,-129
81117410:	d8802d15 	stw	r2,180(sp)
81117414:	90e4703a 	and	r18,r18,r3
81117418:	0039883a 	mov	fp,zero
8111741c:	983df326 	beq	r19,zero,81116bec <__reset+0xfb0f6bec>
81117420:	00800244 	movi	r2,9
81117424:	14fc7b36 	bltu	r2,r19,81116614 <__reset+0xfb0f6614>
81117428:	d8c02817 	ldw	r3,160(sp)
8111742c:	dc001dc4 	addi	r16,sp,119
81117430:	9cc00c04 	addi	r19,r19,48
81117434:	1c07c83a 	sub	r3,r3,r16
81117438:	dcc01dc5 	stb	r19,119(sp)
8111743c:	d8c02e15 	stw	r3,184(sp)
81117440:	003ce806 	br	811167e4 <__reset+0xfb0f67e4>
81117444:	d8803317 	ldw	r2,204(sp)
81117448:	143fffc4 	addi	r16,r2,-1
8111744c:	043f4d0e 	bge	zero,r16,81117184 <__reset+0xfb0f7184>
81117450:	07000404 	movi	fp,16
81117454:	e400810e 	bge	fp,r16,8111765c <___vfprintf_internal_r+0x159c>
81117458:	01604534 	movhi	r5,33044
8111745c:	2940d384 	addi	r5,r5,846
81117460:	d9402b15 	stw	r5,172(sp)
81117464:	01c001c4 	movi	r7,7
81117468:	dcc02c17 	ldw	r19,176(sp)
8111746c:	00000306 	br	8111747c <___vfprintf_internal_r+0x13bc>
81117470:	b5800204 	addi	r22,r22,8
81117474:	843ffc04 	addi	r16,r16,-16
81117478:	e4007b0e 	bge	fp,r16,81117668 <___vfprintf_internal_r+0x15a8>
8111747c:	18c00404 	addi	r3,r3,16
81117480:	8c400044 	addi	r17,r17,1
81117484:	b5000015 	stw	r20,0(r22)
81117488:	b7000115 	stw	fp,4(r22)
8111748c:	d8c02015 	stw	r3,128(sp)
81117490:	dc401f15 	stw	r17,124(sp)
81117494:	3c7ff60e 	bge	r7,r17,81117470 <__reset+0xfb0f7470>
81117498:	d9801e04 	addi	r6,sp,120
8111749c:	b80b883a 	mov	r5,r23
811174a0:	9809883a 	mov	r4,r19
811174a4:	d9c03c15 	stw	r7,240(sp)
811174a8:	11222b00 	call	811222b0 <__sprint_r>
811174ac:	d9c03c17 	ldw	r7,240(sp)
811174b0:	103c071e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
811174b4:	d8c02017 	ldw	r3,128(sp)
811174b8:	dc401f17 	ldw	r17,124(sp)
811174bc:	dd800404 	addi	r22,sp,16
811174c0:	003fec06 	br	81117474 <__reset+0xfb0f7474>
811174c4:	9080100c 	andi	r2,r18,64
811174c8:	d8002785 	stb	zero,158(sp)
811174cc:	10010e26 	beq	r2,zero,81117908 <___vfprintf_internal_r+0x1848>
811174d0:	d9002d17 	ldw	r4,180(sp)
811174d4:	d9402917 	ldw	r5,164(sp)
811174d8:	002d883a 	mov	r22,zero
811174dc:	20800104 	addi	r2,r4,4
811174e0:	24c0000b 	ldhu	r19,0(r4)
811174e4:	283fc90e 	bge	r5,zero,8111740c <__reset+0xfb0f740c>
811174e8:	d8802d15 	stw	r2,180(sp)
811174ec:	0039883a 	mov	fp,zero
811174f0:	9d84b03a 	or	r2,r19,r22
811174f4:	103c461e 	bne	r2,zero,81116610 <__reset+0xfb0f6610>
811174f8:	00800044 	movi	r2,1
811174fc:	003e6c06 	br	81116eb0 <__reset+0xfb0f6eb0>
81117500:	d9002c17 	ldw	r4,176(sp)
81117504:	d9801e04 	addi	r6,sp,120
81117508:	b80b883a 	mov	r5,r23
8111750c:	11222b00 	call	811222b0 <__sprint_r>
81117510:	103bef1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117514:	d8c02017 	ldw	r3,128(sp)
81117518:	da000404 	addi	r8,sp,16
8111751c:	d9003217 	ldw	r4,200(sp)
81117520:	d8802617 	ldw	r2,152(sp)
81117524:	d9403317 	ldw	r5,204(sp)
81117528:	8123883a 	add	r17,r16,r4
8111752c:	11400216 	blt	r2,r5,81117538 <___vfprintf_internal_r+0x1478>
81117530:	9100004c 	andi	r4,r18,1
81117534:	20000d26 	beq	r4,zero,8111756c <___vfprintf_internal_r+0x14ac>
81117538:	d9003717 	ldw	r4,220(sp)
8111753c:	d9403417 	ldw	r5,208(sp)
81117540:	1907883a 	add	r3,r3,r4
81117544:	d9001f17 	ldw	r4,124(sp)
81117548:	41400015 	stw	r5,0(r8)
8111754c:	d9403717 	ldw	r5,220(sp)
81117550:	21000044 	addi	r4,r4,1
81117554:	d8c02015 	stw	r3,128(sp)
81117558:	41400115 	stw	r5,4(r8)
8111755c:	d9001f15 	stw	r4,124(sp)
81117560:	014001c4 	movi	r5,7
81117564:	2901e816 	blt	r5,r4,81117d08 <___vfprintf_internal_r+0x1c48>
81117568:	42000204 	addi	r8,r8,8
8111756c:	d9003317 	ldw	r4,204(sp)
81117570:	8121883a 	add	r16,r16,r4
81117574:	2085c83a 	sub	r2,r4,r2
81117578:	8461c83a 	sub	r16,r16,r17
8111757c:	1400010e 	bge	r2,r16,81117584 <___vfprintf_internal_r+0x14c4>
81117580:	1021883a 	mov	r16,r2
81117584:	04000a0e 	bge	zero,r16,811175b0 <___vfprintf_internal_r+0x14f0>
81117588:	d9001f17 	ldw	r4,124(sp)
8111758c:	1c07883a 	add	r3,r3,r16
81117590:	44400015 	stw	r17,0(r8)
81117594:	21000044 	addi	r4,r4,1
81117598:	44000115 	stw	r16,4(r8)
8111759c:	d8c02015 	stw	r3,128(sp)
811175a0:	d9001f15 	stw	r4,124(sp)
811175a4:	014001c4 	movi	r5,7
811175a8:	2901fb16 	blt	r5,r4,81117d98 <___vfprintf_internal_r+0x1cd8>
811175ac:	42000204 	addi	r8,r8,8
811175b0:	8001f716 	blt	r16,zero,81117d90 <___vfprintf_internal_r+0x1cd0>
811175b4:	1421c83a 	sub	r16,r2,r16
811175b8:	043d380e 	bge	zero,r16,81116a9c <__reset+0xfb0f6a9c>
811175bc:	04400404 	movi	r17,16
811175c0:	d8801f17 	ldw	r2,124(sp)
811175c4:	8c3efb0e 	bge	r17,r16,811171b4 <__reset+0xfb0f71b4>
811175c8:	01604534 	movhi	r5,33044
811175cc:	2940d384 	addi	r5,r5,846
811175d0:	d9402b15 	stw	r5,172(sp)
811175d4:	058001c4 	movi	r22,7
811175d8:	dcc02c17 	ldw	r19,176(sp)
811175dc:	00000306 	br	811175ec <___vfprintf_internal_r+0x152c>
811175e0:	42000204 	addi	r8,r8,8
811175e4:	843ffc04 	addi	r16,r16,-16
811175e8:	8c3ef50e 	bge	r17,r16,811171c0 <__reset+0xfb0f71c0>
811175ec:	18c00404 	addi	r3,r3,16
811175f0:	10800044 	addi	r2,r2,1
811175f4:	45000015 	stw	r20,0(r8)
811175f8:	44400115 	stw	r17,4(r8)
811175fc:	d8c02015 	stw	r3,128(sp)
81117600:	d8801f15 	stw	r2,124(sp)
81117604:	b0bff60e 	bge	r22,r2,811175e0 <__reset+0xfb0f75e0>
81117608:	d9801e04 	addi	r6,sp,120
8111760c:	b80b883a 	mov	r5,r23
81117610:	9809883a 	mov	r4,r19
81117614:	11222b00 	call	811222b0 <__sprint_r>
81117618:	103bad1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
8111761c:	d8c02017 	ldw	r3,128(sp)
81117620:	d8801f17 	ldw	r2,124(sp)
81117624:	da000404 	addi	r8,sp,16
81117628:	003fee06 	br	811175e4 <__reset+0xfb0f75e4>
8111762c:	9088703a 	and	r4,r18,r2
81117630:	203eab1e 	bne	r4,zero,811170e0 <__reset+0xfb0f70e0>
81117634:	dc401f17 	ldw	r17,124(sp)
81117638:	40800115 	stw	r2,4(r8)
8111763c:	44000015 	stw	r16,0(r8)
81117640:	8c400044 	addi	r17,r17,1
81117644:	d8c02015 	stw	r3,128(sp)
81117648:	dc401f15 	stw	r17,124(sp)
8111764c:	008001c4 	movi	r2,7
81117650:	14400e16 	blt	r2,r17,8111768c <___vfprintf_internal_r+0x15cc>
81117654:	45800204 	addi	r22,r8,8
81117658:	003eca06 	br	81117184 <__reset+0xfb0f7184>
8111765c:	01204534 	movhi	r4,33044
81117660:	2100d384 	addi	r4,r4,846
81117664:	d9002b15 	stw	r4,172(sp)
81117668:	d8802b17 	ldw	r2,172(sp)
8111766c:	1c07883a 	add	r3,r3,r16
81117670:	8c400044 	addi	r17,r17,1
81117674:	b0800015 	stw	r2,0(r22)
81117678:	b4000115 	stw	r16,4(r22)
8111767c:	d8c02015 	stw	r3,128(sp)
81117680:	dc401f15 	stw	r17,124(sp)
81117684:	008001c4 	movi	r2,7
81117688:	147ebd0e 	bge	r2,r17,81117180 <__reset+0xfb0f7180>
8111768c:	d9002c17 	ldw	r4,176(sp)
81117690:	d9801e04 	addi	r6,sp,120
81117694:	b80b883a 	mov	r5,r23
81117698:	11222b00 	call	811222b0 <__sprint_r>
8111769c:	103b8c1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
811176a0:	d8c02017 	ldw	r3,128(sp)
811176a4:	dc401f17 	ldw	r17,124(sp)
811176a8:	dd800404 	addi	r22,sp,16
811176ac:	003eb506 	br	81117184 <__reset+0xfb0f7184>
811176b0:	d9002c17 	ldw	r4,176(sp)
811176b4:	d9801e04 	addi	r6,sp,120
811176b8:	b80b883a 	mov	r5,r23
811176bc:	11222b00 	call	811222b0 <__sprint_r>
811176c0:	103b831e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
811176c4:	d8c02017 	ldw	r3,128(sp)
811176c8:	dc401f17 	ldw	r17,124(sp)
811176cc:	da000404 	addi	r8,sp,16
811176d0:	003e8d06 	br	81117108 <__reset+0xfb0f7108>
811176d4:	d9002c17 	ldw	r4,176(sp)
811176d8:	d9801e04 	addi	r6,sp,120
811176dc:	b80b883a 	mov	r5,r23
811176e0:	11222b00 	call	811222b0 <__sprint_r>
811176e4:	103b7a1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
811176e8:	d8c02017 	ldw	r3,128(sp)
811176ec:	dc401f17 	ldw	r17,124(sp)
811176f0:	dd800404 	addi	r22,sp,16
811176f4:	003e8f06 	br	81117134 <__reset+0xfb0f7134>
811176f8:	0027883a 	mov	r19,zero
811176fc:	003f4a06 	br	81117428 <__reset+0xfb0f7428>
81117700:	d9002c17 	ldw	r4,176(sp)
81117704:	d9801e04 	addi	r6,sp,120
81117708:	b80b883a 	mov	r5,r23
8111770c:	11222b00 	call	811222b0 <__sprint_r>
81117710:	103b6f1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117714:	d8c02017 	ldw	r3,128(sp)
81117718:	da000404 	addi	r8,sp,16
8111771c:	003c9d06 	br	81116994 <__reset+0xfb0f6994>
81117720:	04e7c83a 	sub	r19,zero,r19
81117724:	9804c03a 	cmpne	r2,r19,zero
81117728:	05adc83a 	sub	r22,zero,r22
8111772c:	b0adc83a 	sub	r22,r22,r2
81117730:	d8802917 	ldw	r2,164(sp)
81117734:	07000b44 	movi	fp,45
81117738:	df002785 	stb	fp,158(sp)
8111773c:	10017b16 	blt	r2,zero,81117d2c <___vfprintf_internal_r+0x1c6c>
81117740:	00bfdfc4 	movi	r2,-129
81117744:	90a4703a 	and	r18,r18,r2
81117748:	003bb106 	br	81116610 <__reset+0xfb0f6610>
8111774c:	d9003617 	ldw	r4,216(sp)
81117750:	d9403817 	ldw	r5,224(sp)
81117754:	da003d15 	stw	r8,244(sp)
81117758:	111e9140 	call	8111e914 <__fpclassifyd>
8111775c:	da003d17 	ldw	r8,244(sp)
81117760:	1000f026 	beq	r2,zero,81117b24 <___vfprintf_internal_r+0x1a64>
81117764:	d9002917 	ldw	r4,164(sp)
81117768:	05bff7c4 	movi	r22,-33
8111776c:	00bfffc4 	movi	r2,-1
81117770:	8dac703a 	and	r22,r17,r22
81117774:	20820026 	beq	r4,r2,81117f78 <___vfprintf_internal_r+0x1eb8>
81117778:	008011c4 	movi	r2,71
8111777c:	b081f726 	beq	r22,r2,81117f5c <___vfprintf_internal_r+0x1e9c>
81117780:	d9003817 	ldw	r4,224(sp)
81117784:	90c04014 	ori	r3,r18,256
81117788:	d8c02b15 	stw	r3,172(sp)
8111778c:	20021516 	blt	r4,zero,81117fe4 <___vfprintf_internal_r+0x1f24>
81117790:	dcc03817 	ldw	r19,224(sp)
81117794:	d8002a05 	stb	zero,168(sp)
81117798:	00801984 	movi	r2,102
8111779c:	8881f926 	beq	r17,r2,81117f84 <___vfprintf_internal_r+0x1ec4>
811177a0:	00801184 	movi	r2,70
811177a4:	88821c26 	beq	r17,r2,81118018 <___vfprintf_internal_r+0x1f58>
811177a8:	00801144 	movi	r2,69
811177ac:	b081ef26 	beq	r22,r2,81117f6c <___vfprintf_internal_r+0x1eac>
811177b0:	d8c02917 	ldw	r3,164(sp)
811177b4:	d8802104 	addi	r2,sp,132
811177b8:	d8800315 	stw	r2,12(sp)
811177bc:	d9403617 	ldw	r5,216(sp)
811177c0:	d8802504 	addi	r2,sp,148
811177c4:	d9002c17 	ldw	r4,176(sp)
811177c8:	d8800215 	stw	r2,8(sp)
811177cc:	d8802604 	addi	r2,sp,152
811177d0:	d8c00015 	stw	r3,0(sp)
811177d4:	d8800115 	stw	r2,4(sp)
811177d8:	01c00084 	movi	r7,2
811177dc:	980d883a 	mov	r6,r19
811177e0:	d8c03c15 	stw	r3,240(sp)
811177e4:	da003d15 	stw	r8,244(sp)
811177e8:	111a1cc0 	call	8111a1cc <_dtoa_r>
811177ec:	1021883a 	mov	r16,r2
811177f0:	008019c4 	movi	r2,103
811177f4:	d8c03c17 	ldw	r3,240(sp)
811177f8:	da003d17 	ldw	r8,244(sp)
811177fc:	88817126 	beq	r17,r2,81117dc4 <___vfprintf_internal_r+0x1d04>
81117800:	008011c4 	movi	r2,71
81117804:	88829226 	beq	r17,r2,81118250 <___vfprintf_internal_r+0x2190>
81117808:	80f9883a 	add	fp,r16,r3
8111780c:	d9003617 	ldw	r4,216(sp)
81117810:	000d883a 	mov	r6,zero
81117814:	000f883a 	mov	r7,zero
81117818:	980b883a 	mov	r5,r19
8111781c:	da003d15 	stw	r8,244(sp)
81117820:	1126af80 	call	81126af8 <__eqdf2>
81117824:	da003d17 	ldw	r8,244(sp)
81117828:	10018d26 	beq	r2,zero,81117e60 <___vfprintf_internal_r+0x1da0>
8111782c:	d8802117 	ldw	r2,132(sp)
81117830:	1700062e 	bgeu	r2,fp,8111784c <___vfprintf_internal_r+0x178c>
81117834:	01000c04 	movi	r4,48
81117838:	10c00044 	addi	r3,r2,1
8111783c:	d8c02115 	stw	r3,132(sp)
81117840:	11000005 	stb	r4,0(r2)
81117844:	d8802117 	ldw	r2,132(sp)
81117848:	173ffb36 	bltu	r2,fp,81117838 <__reset+0xfb0f7838>
8111784c:	1405c83a 	sub	r2,r2,r16
81117850:	d8803315 	stw	r2,204(sp)
81117854:	008011c4 	movi	r2,71
81117858:	b0817626 	beq	r22,r2,81117e34 <___vfprintf_internal_r+0x1d74>
8111785c:	00801944 	movi	r2,101
81117860:	1442810e 	bge	r2,r17,81118268 <___vfprintf_internal_r+0x21a8>
81117864:	d8c02617 	ldw	r3,152(sp)
81117868:	00801984 	movi	r2,102
8111786c:	d8c03215 	stw	r3,200(sp)
81117870:	8881fe26 	beq	r17,r2,8111806c <___vfprintf_internal_r+0x1fac>
81117874:	d8c03217 	ldw	r3,200(sp)
81117878:	d9003317 	ldw	r4,204(sp)
8111787c:	1901dd16 	blt	r3,r4,81117ff4 <___vfprintf_internal_r+0x1f34>
81117880:	9480004c 	andi	r18,r18,1
81117884:	90022b1e 	bne	r18,zero,81118134 <___vfprintf_internal_r+0x2074>
81117888:	1805883a 	mov	r2,r3
8111788c:	18028016 	blt	r3,zero,81118290 <___vfprintf_internal_r+0x21d0>
81117890:	d8c03217 	ldw	r3,200(sp)
81117894:	044019c4 	movi	r17,103
81117898:	d8c02e15 	stw	r3,184(sp)
8111789c:	df002a07 	ldb	fp,168(sp)
811178a0:	e001531e 	bne	fp,zero,81117df0 <___vfprintf_internal_r+0x1d30>
811178a4:	df002783 	ldbu	fp,158(sp)
811178a8:	d8802a15 	stw	r2,168(sp)
811178ac:	dc802b17 	ldw	r18,172(sp)
811178b0:	d8002915 	stw	zero,164(sp)
811178b4:	003bd106 	br	811167fc <__reset+0xfb0f67fc>
811178b8:	d8802d17 	ldw	r2,180(sp)
811178bc:	d8c02d17 	ldw	r3,180(sp)
811178c0:	d9002d17 	ldw	r4,180(sp)
811178c4:	10800017 	ldw	r2,0(r2)
811178c8:	18c00117 	ldw	r3,4(r3)
811178cc:	21000204 	addi	r4,r4,8
811178d0:	d8803615 	stw	r2,216(sp)
811178d4:	d8c03815 	stw	r3,224(sp)
811178d8:	d9002d15 	stw	r4,180(sp)
811178dc:	003b7506 	br	811166b4 <__reset+0xfb0f66b4>
811178e0:	ac400007 	ldb	r17,0(r21)
811178e4:	003a5906 	br	8111624c <__reset+0xfb0f624c>
811178e8:	9080100c 	andi	r2,r18,64
811178ec:	1000a826 	beq	r2,zero,81117b90 <___vfprintf_internal_r+0x1ad0>
811178f0:	d9002d17 	ldw	r4,180(sp)
811178f4:	002d883a 	mov	r22,zero
811178f8:	24c0000b 	ldhu	r19,0(r4)
811178fc:	21000104 	addi	r4,r4,4
81117900:	d9002d15 	stw	r4,180(sp)
81117904:	003ccb06 	br	81116c34 <__reset+0xfb0f6c34>
81117908:	d8c02d17 	ldw	r3,180(sp)
8111790c:	d9002917 	ldw	r4,164(sp)
81117910:	002d883a 	mov	r22,zero
81117914:	18800104 	addi	r2,r3,4
81117918:	1cc00017 	ldw	r19,0(r3)
8111791c:	203ebb0e 	bge	r4,zero,8111740c <__reset+0xfb0f740c>
81117920:	003ef106 	br	811174e8 <__reset+0xfb0f74e8>
81117924:	9080040c 	andi	r2,r18,16
81117928:	1000921e 	bne	r2,zero,81117b74 <___vfprintf_internal_r+0x1ab4>
8111792c:	9480100c 	andi	r18,r18,64
81117930:	90013926 	beq	r18,zero,81117e18 <___vfprintf_internal_r+0x1d58>
81117934:	d9002d17 	ldw	r4,180(sp)
81117938:	d9402f17 	ldw	r5,188(sp)
8111793c:	20800017 	ldw	r2,0(r4)
81117940:	21000104 	addi	r4,r4,4
81117944:	d9002d15 	stw	r4,180(sp)
81117948:	1140000d 	sth	r5,0(r2)
8111794c:	003a1606 	br	811161a8 <__reset+0xfb0f61a8>
81117950:	9080100c 	andi	r2,r18,64
81117954:	10008026 	beq	r2,zero,81117b58 <___vfprintf_internal_r+0x1a98>
81117958:	d8c02d17 	ldw	r3,180(sp)
8111795c:	1cc0000f 	ldh	r19,0(r3)
81117960:	18c00104 	addi	r3,r3,4
81117964:	d8c02d15 	stw	r3,180(sp)
81117968:	982dd7fa 	srai	r22,r19,31
8111796c:	b005883a 	mov	r2,r22
81117970:	003b1f06 	br	811165f0 <__reset+0xfb0f65f0>
81117974:	9080100c 	andi	r2,r18,64
81117978:	d8002785 	stb	zero,158(sp)
8111797c:	10008a1e 	bne	r2,zero,81117ba8 <___vfprintf_internal_r+0x1ae8>
81117980:	d9402d17 	ldw	r5,180(sp)
81117984:	d8c02917 	ldw	r3,164(sp)
81117988:	002d883a 	mov	r22,zero
8111798c:	28800104 	addi	r2,r5,4
81117990:	2cc00017 	ldw	r19,0(r5)
81117994:	183e4b0e 	bge	r3,zero,811172c4 <__reset+0xfb0f72c4>
81117998:	9d86b03a 	or	r3,r19,r22
8111799c:	d8802d15 	stw	r2,180(sp)
811179a0:	183e4c1e 	bne	r3,zero,811172d4 <__reset+0xfb0f72d4>
811179a4:	0039883a 	mov	fp,zero
811179a8:	0005883a 	mov	r2,zero
811179ac:	003d4006 	br	81116eb0 <__reset+0xfb0f6eb0>
811179b0:	01604534 	movhi	r5,33044
811179b4:	2940d384 	addi	r5,r5,846
811179b8:	d9402b15 	stw	r5,172(sp)
811179bc:	d9402b17 	ldw	r5,172(sp)
811179c0:	1c47883a 	add	r3,r3,r17
811179c4:	10800044 	addi	r2,r2,1
811179c8:	41400015 	stw	r5,0(r8)
811179cc:	44400115 	stw	r17,4(r8)
811179d0:	d8c02015 	stw	r3,128(sp)
811179d4:	d8801f15 	stw	r2,124(sp)
811179d8:	010001c4 	movi	r4,7
811179dc:	20bec816 	blt	r4,r2,81117500 <__reset+0xfb0f7500>
811179e0:	42000204 	addi	r8,r8,8
811179e4:	003ecd06 	br	8111751c <__reset+0xfb0f751c>
811179e8:	d9002917 	ldw	r4,164(sp)
811179ec:	d8002785 	stb	zero,158(sp)
811179f0:	203d2d16 	blt	r4,zero,81116ea8 <__reset+0xfb0f6ea8>
811179f4:	00bfdfc4 	movi	r2,-129
811179f8:	90a4703a 	and	r18,r18,r2
811179fc:	003a9106 	br	81116444 <__reset+0xfb0f6444>
81117a00:	01204534 	movhi	r4,33044
81117a04:	2100d384 	addi	r4,r4,846
81117a08:	d9002b15 	stw	r4,172(sp)
81117a0c:	003c0c06 	br	81116a40 <__reset+0xfb0f6a40>
81117a10:	d9002c17 	ldw	r4,176(sp)
81117a14:	d9801e04 	addi	r6,sp,120
81117a18:	b80b883a 	mov	r5,r23
81117a1c:	11222b00 	call	811222b0 <__sprint_r>
81117a20:	103aab1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117a24:	d8c02017 	ldw	r3,128(sp)
81117a28:	da000404 	addi	r8,sp,16
81117a2c:	003d4106 	br	81116f34 <__reset+0xfb0f6f34>
81117a30:	d8801f17 	ldw	r2,124(sp)
81117a34:	01604534 	movhi	r5,33044
81117a38:	01000044 	movi	r4,1
81117a3c:	18c00044 	addi	r3,r3,1
81117a40:	10800044 	addi	r2,r2,1
81117a44:	2940cb04 	addi	r5,r5,812
81117a48:	41000115 	stw	r4,4(r8)
81117a4c:	41400015 	stw	r5,0(r8)
81117a50:	d8c02015 	stw	r3,128(sp)
81117a54:	d8801f15 	stw	r2,124(sp)
81117a58:	010001c4 	movi	r4,7
81117a5c:	20805c16 	blt	r4,r2,81117bd0 <___vfprintf_internal_r+0x1b10>
81117a60:	42000204 	addi	r8,r8,8
81117a64:	8800041e 	bne	r17,zero,81117a78 <___vfprintf_internal_r+0x19b8>
81117a68:	d8803317 	ldw	r2,204(sp)
81117a6c:	1000021e 	bne	r2,zero,81117a78 <___vfprintf_internal_r+0x19b8>
81117a70:	9080004c 	andi	r2,r18,1
81117a74:	103c0926 	beq	r2,zero,81116a9c <__reset+0xfb0f6a9c>
81117a78:	d9003717 	ldw	r4,220(sp)
81117a7c:	d8801f17 	ldw	r2,124(sp)
81117a80:	d9403417 	ldw	r5,208(sp)
81117a84:	20c7883a 	add	r3,r4,r3
81117a88:	10800044 	addi	r2,r2,1
81117a8c:	41000115 	stw	r4,4(r8)
81117a90:	41400015 	stw	r5,0(r8)
81117a94:	d8c02015 	stw	r3,128(sp)
81117a98:	d8801f15 	stw	r2,124(sp)
81117a9c:	010001c4 	movi	r4,7
81117aa0:	20812116 	blt	r4,r2,81117f28 <___vfprintf_internal_r+0x1e68>
81117aa4:	42000204 	addi	r8,r8,8
81117aa8:	0463c83a 	sub	r17,zero,r17
81117aac:	0440730e 	bge	zero,r17,81117c7c <___vfprintf_internal_r+0x1bbc>
81117ab0:	05800404 	movi	r22,16
81117ab4:	b440860e 	bge	r22,r17,81117cd0 <___vfprintf_internal_r+0x1c10>
81117ab8:	01604534 	movhi	r5,33044
81117abc:	2940d384 	addi	r5,r5,846
81117ac0:	d9402b15 	stw	r5,172(sp)
81117ac4:	070001c4 	movi	fp,7
81117ac8:	dcc02c17 	ldw	r19,176(sp)
81117acc:	00000306 	br	81117adc <___vfprintf_internal_r+0x1a1c>
81117ad0:	42000204 	addi	r8,r8,8
81117ad4:	8c7ffc04 	addi	r17,r17,-16
81117ad8:	b440800e 	bge	r22,r17,81117cdc <___vfprintf_internal_r+0x1c1c>
81117adc:	18c00404 	addi	r3,r3,16
81117ae0:	10800044 	addi	r2,r2,1
81117ae4:	45000015 	stw	r20,0(r8)
81117ae8:	45800115 	stw	r22,4(r8)
81117aec:	d8c02015 	stw	r3,128(sp)
81117af0:	d8801f15 	stw	r2,124(sp)
81117af4:	e0bff60e 	bge	fp,r2,81117ad0 <__reset+0xfb0f7ad0>
81117af8:	d9801e04 	addi	r6,sp,120
81117afc:	b80b883a 	mov	r5,r23
81117b00:	9809883a 	mov	r4,r19
81117b04:	11222b00 	call	811222b0 <__sprint_r>
81117b08:	103a711e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117b0c:	d8c02017 	ldw	r3,128(sp)
81117b10:	d8801f17 	ldw	r2,124(sp)
81117b14:	da000404 	addi	r8,sp,16
81117b18:	003fee06 	br	81117ad4 <__reset+0xfb0f7ad4>
81117b1c:	00bfffc4 	movi	r2,-1
81117b20:	003a6f06 	br	811164e0 <__reset+0xfb0f64e0>
81117b24:	008011c4 	movi	r2,71
81117b28:	1440b816 	blt	r2,r17,81117e0c <___vfprintf_internal_r+0x1d4c>
81117b2c:	04204534 	movhi	r16,33044
81117b30:	8400bd04 	addi	r16,r16,756
81117b34:	00c000c4 	movi	r3,3
81117b38:	00bfdfc4 	movi	r2,-129
81117b3c:	d8c02a15 	stw	r3,168(sp)
81117b40:	90a4703a 	and	r18,r18,r2
81117b44:	df002783 	ldbu	fp,158(sp)
81117b48:	d8c02e15 	stw	r3,184(sp)
81117b4c:	d8002915 	stw	zero,164(sp)
81117b50:	d8003215 	stw	zero,200(sp)
81117b54:	003b2906 	br	811167fc <__reset+0xfb0f67fc>
81117b58:	d9002d17 	ldw	r4,180(sp)
81117b5c:	24c00017 	ldw	r19,0(r4)
81117b60:	21000104 	addi	r4,r4,4
81117b64:	d9002d15 	stw	r4,180(sp)
81117b68:	982dd7fa 	srai	r22,r19,31
81117b6c:	b005883a 	mov	r2,r22
81117b70:	003a9f06 	br	811165f0 <__reset+0xfb0f65f0>
81117b74:	d9402d17 	ldw	r5,180(sp)
81117b78:	d8c02f17 	ldw	r3,188(sp)
81117b7c:	28800017 	ldw	r2,0(r5)
81117b80:	29400104 	addi	r5,r5,4
81117b84:	d9402d15 	stw	r5,180(sp)
81117b88:	10c00015 	stw	r3,0(r2)
81117b8c:	00398606 	br	811161a8 <__reset+0xfb0f61a8>
81117b90:	d9402d17 	ldw	r5,180(sp)
81117b94:	002d883a 	mov	r22,zero
81117b98:	2cc00017 	ldw	r19,0(r5)
81117b9c:	29400104 	addi	r5,r5,4
81117ba0:	d9402d15 	stw	r5,180(sp)
81117ba4:	003c2306 	br	81116c34 <__reset+0xfb0f6c34>
81117ba8:	d8c02d17 	ldw	r3,180(sp)
81117bac:	d9002917 	ldw	r4,164(sp)
81117bb0:	002d883a 	mov	r22,zero
81117bb4:	18800104 	addi	r2,r3,4
81117bb8:	1cc0000b 	ldhu	r19,0(r3)
81117bbc:	203dc10e 	bge	r4,zero,811172c4 <__reset+0xfb0f72c4>
81117bc0:	003f7506 	br	81117998 <__reset+0xfb0f7998>
81117bc4:	04204534 	movhi	r16,33044
81117bc8:	8400bb04 	addi	r16,r16,748
81117bcc:	003acc06 	br	81116700 <__reset+0xfb0f6700>
81117bd0:	d9002c17 	ldw	r4,176(sp)
81117bd4:	d9801e04 	addi	r6,sp,120
81117bd8:	b80b883a 	mov	r5,r23
81117bdc:	11222b00 	call	811222b0 <__sprint_r>
81117be0:	103a3b1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117be4:	dc402617 	ldw	r17,152(sp)
81117be8:	d8c02017 	ldw	r3,128(sp)
81117bec:	da000404 	addi	r8,sp,16
81117bf0:	003f9c06 	br	81117a64 <__reset+0xfb0f7a64>
81117bf4:	ac400043 	ldbu	r17,1(r21)
81117bf8:	94800814 	ori	r18,r18,32
81117bfc:	ad400044 	addi	r21,r21,1
81117c00:	8c403fcc 	andi	r17,r17,255
81117c04:	8c40201c 	xori	r17,r17,128
81117c08:	8c7fe004 	addi	r17,r17,-128
81117c0c:	00398f06 	br	8111624c <__reset+0xfb0f624c>
81117c10:	d8c02d15 	stw	r3,180(sp)
81117c14:	0039883a 	mov	fp,zero
81117c18:	003e3506 	br	811174f0 <__reset+0xfb0f74f0>
81117c1c:	d9002c17 	ldw	r4,176(sp)
81117c20:	d9801e04 	addi	r6,sp,120
81117c24:	b80b883a 	mov	r5,r23
81117c28:	11222b00 	call	811222b0 <__sprint_r>
81117c2c:	103a281e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117c30:	d8c02017 	ldw	r3,128(sp)
81117c34:	da000404 	addi	r8,sp,16
81117c38:	003cd006 	br	81116f7c <__reset+0xfb0f6f7c>
81117c3c:	8009883a 	mov	r4,r16
81117c40:	da003d15 	stw	r8,244(sp)
81117c44:	1113ba80 	call	81113ba8 <strlen>
81117c48:	d8802e15 	stw	r2,184(sp)
81117c4c:	da003d17 	ldw	r8,244(sp)
81117c50:	103c340e 	bge	r2,zero,81116d24 <__reset+0xfb0f6d24>
81117c54:	0005883a 	mov	r2,zero
81117c58:	003c3206 	br	81116d24 <__reset+0xfb0f6d24>
81117c5c:	d9002c17 	ldw	r4,176(sp)
81117c60:	d9801e04 	addi	r6,sp,120
81117c64:	b80b883a 	mov	r5,r23
81117c68:	11222b00 	call	811222b0 <__sprint_r>
81117c6c:	103a181e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117c70:	d8c02017 	ldw	r3,128(sp)
81117c74:	d8801f17 	ldw	r2,124(sp)
81117c78:	da000404 	addi	r8,sp,16
81117c7c:	d9403317 	ldw	r5,204(sp)
81117c80:	10800044 	addi	r2,r2,1
81117c84:	44000015 	stw	r16,0(r8)
81117c88:	28c7883a 	add	r3,r5,r3
81117c8c:	003b7d06 	br	81116a84 <__reset+0xfb0f6a84>
81117c90:	01204534 	movhi	r4,33044
81117c94:	2100d784 	addi	r4,r4,862
81117c98:	d9003515 	stw	r4,212(sp)
81117c9c:	003b1406 	br	811168f0 <__reset+0xfb0f68f0>
81117ca0:	013fffc4 	movi	r4,-1
81117ca4:	003a3506 	br	8111657c <__reset+0xfb0f657c>
81117ca8:	0023883a 	mov	r17,zero
81117cac:	003d9d06 	br	81117324 <__reset+0xfb0f7324>
81117cb0:	d9002c17 	ldw	r4,176(sp)
81117cb4:	d9801e04 	addi	r6,sp,120
81117cb8:	b80b883a 	mov	r5,r23
81117cbc:	11222b00 	call	811222b0 <__sprint_r>
81117cc0:	103a031e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117cc4:	d8c02017 	ldw	r3,128(sp)
81117cc8:	da000404 	addi	r8,sp,16
81117ccc:	003d9406 	br	81117320 <__reset+0xfb0f7320>
81117cd0:	01204534 	movhi	r4,33044
81117cd4:	2100d384 	addi	r4,r4,846
81117cd8:	d9002b15 	stw	r4,172(sp)
81117cdc:	d9002b17 	ldw	r4,172(sp)
81117ce0:	1c47883a 	add	r3,r3,r17
81117ce4:	10800044 	addi	r2,r2,1
81117ce8:	41000015 	stw	r4,0(r8)
81117cec:	44400115 	stw	r17,4(r8)
81117cf0:	d8c02015 	stw	r3,128(sp)
81117cf4:	d8801f15 	stw	r2,124(sp)
81117cf8:	010001c4 	movi	r4,7
81117cfc:	20bfd716 	blt	r4,r2,81117c5c <__reset+0xfb0f7c5c>
81117d00:	42000204 	addi	r8,r8,8
81117d04:	003fdd06 	br	81117c7c <__reset+0xfb0f7c7c>
81117d08:	d9002c17 	ldw	r4,176(sp)
81117d0c:	d9801e04 	addi	r6,sp,120
81117d10:	b80b883a 	mov	r5,r23
81117d14:	11222b00 	call	811222b0 <__sprint_r>
81117d18:	1039ed1e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117d1c:	d8802617 	ldw	r2,152(sp)
81117d20:	d8c02017 	ldw	r3,128(sp)
81117d24:	da000404 	addi	r8,sp,16
81117d28:	003e1006 	br	8111756c <__reset+0xfb0f756c>
81117d2c:	00800044 	movi	r2,1
81117d30:	10803fcc 	andi	r2,r2,255
81117d34:	00c00044 	movi	r3,1
81117d38:	10fa3526 	beq	r2,r3,81116610 <__reset+0xfb0f6610>
81117d3c:	00c00084 	movi	r3,2
81117d40:	10fbcb26 	beq	r2,r3,81116c70 <__reset+0xfb0f6c70>
81117d44:	003a8f06 	br	81116784 <__reset+0xfb0f6784>
81117d48:	01204534 	movhi	r4,33044
81117d4c:	2100d784 	addi	r4,r4,862
81117d50:	d9003515 	stw	r4,212(sp)
81117d54:	003b7606 	br	81116b30 <__reset+0xfb0f6b30>
81117d58:	d8802917 	ldw	r2,164(sp)
81117d5c:	00c00184 	movi	r3,6
81117d60:	1880012e 	bgeu	r3,r2,81117d68 <___vfprintf_internal_r+0x1ca8>
81117d64:	1805883a 	mov	r2,r3
81117d68:	d8802e15 	stw	r2,184(sp)
81117d6c:	1000ef16 	blt	r2,zero,8111812c <___vfprintf_internal_r+0x206c>
81117d70:	04204534 	movhi	r16,33044
81117d74:	d8802a15 	stw	r2,168(sp)
81117d78:	dcc02d15 	stw	r19,180(sp)
81117d7c:	d8002915 	stw	zero,164(sp)
81117d80:	d8003215 	stw	zero,200(sp)
81117d84:	8400c904 	addi	r16,r16,804
81117d88:	0039883a 	mov	fp,zero
81117d8c:	003aa206 	br	81116818 <__reset+0xfb0f6818>
81117d90:	0021883a 	mov	r16,zero
81117d94:	003e0706 	br	811175b4 <__reset+0xfb0f75b4>
81117d98:	d9002c17 	ldw	r4,176(sp)
81117d9c:	d9801e04 	addi	r6,sp,120
81117da0:	b80b883a 	mov	r5,r23
81117da4:	11222b00 	call	811222b0 <__sprint_r>
81117da8:	1039c91e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117dac:	d8802617 	ldw	r2,152(sp)
81117db0:	d9403317 	ldw	r5,204(sp)
81117db4:	d8c02017 	ldw	r3,128(sp)
81117db8:	da000404 	addi	r8,sp,16
81117dbc:	2885c83a 	sub	r2,r5,r2
81117dc0:	003dfb06 	br	811175b0 <__reset+0xfb0f75b0>
81117dc4:	9080004c 	andi	r2,r18,1
81117dc8:	103e8f1e 	bne	r2,zero,81117808 <__reset+0xfb0f7808>
81117dcc:	d8802117 	ldw	r2,132(sp)
81117dd0:	003e9e06 	br	8111784c <__reset+0xfb0f784c>
81117dd4:	1025883a 	mov	r18,r2
81117dd8:	0039883a 	mov	fp,zero
81117ddc:	00800084 	movi	r2,2
81117de0:	003fd306 	br	81117d30 <__reset+0xfb0f7d30>
81117de4:	07000b44 	movi	fp,45
81117de8:	df002785 	stb	fp,158(sp)
81117dec:	003a4006 	br	811166f0 <__reset+0xfb0f66f0>
81117df0:	00c00b44 	movi	r3,45
81117df4:	d8c02785 	stb	r3,158(sp)
81117df8:	d8802a15 	stw	r2,168(sp)
81117dfc:	dc802b17 	ldw	r18,172(sp)
81117e00:	d8002915 	stw	zero,164(sp)
81117e04:	07000b44 	movi	fp,45
81117e08:	003a8006 	br	8111680c <__reset+0xfb0f680c>
81117e0c:	04204534 	movhi	r16,33044
81117e10:	8400be04 	addi	r16,r16,760
81117e14:	003f4706 	br	81117b34 <__reset+0xfb0f7b34>
81117e18:	d8c02d17 	ldw	r3,180(sp)
81117e1c:	d9002f17 	ldw	r4,188(sp)
81117e20:	18800017 	ldw	r2,0(r3)
81117e24:	18c00104 	addi	r3,r3,4
81117e28:	d8c02d15 	stw	r3,180(sp)
81117e2c:	11000015 	stw	r4,0(r2)
81117e30:	0038dd06 	br	811161a8 <__reset+0xfb0f61a8>
81117e34:	dd802617 	ldw	r22,152(sp)
81117e38:	00bfff44 	movi	r2,-3
81117e3c:	b0801c16 	blt	r22,r2,81117eb0 <___vfprintf_internal_r+0x1df0>
81117e40:	d9402917 	ldw	r5,164(sp)
81117e44:	2d801a16 	blt	r5,r22,81117eb0 <___vfprintf_internal_r+0x1df0>
81117e48:	dd803215 	stw	r22,200(sp)
81117e4c:	003e8906 	br	81117874 <__reset+0xfb0f7874>
81117e50:	01204534 	movhi	r4,33044
81117e54:	2100d384 	addi	r4,r4,846
81117e58:	d9002b15 	stw	r4,172(sp)
81117e5c:	003c9106 	br	811170a4 <__reset+0xfb0f70a4>
81117e60:	e005883a 	mov	r2,fp
81117e64:	003e7906 	br	8111784c <__reset+0xfb0f784c>
81117e68:	d9402917 	ldw	r5,164(sp)
81117e6c:	df002783 	ldbu	fp,158(sp)
81117e70:	dcc02d15 	stw	r19,180(sp)
81117e74:	d9402a15 	stw	r5,168(sp)
81117e78:	d9402e15 	stw	r5,184(sp)
81117e7c:	d8002915 	stw	zero,164(sp)
81117e80:	d8003215 	stw	zero,200(sp)
81117e84:	003a5d06 	br	811167fc <__reset+0xfb0f67fc>
81117e88:	9080004c 	andi	r2,r18,1
81117e8c:	0039883a 	mov	fp,zero
81117e90:	10000426 	beq	r2,zero,81117ea4 <___vfprintf_internal_r+0x1de4>
81117e94:	00800c04 	movi	r2,48
81117e98:	dc001dc4 	addi	r16,sp,119
81117e9c:	d8801dc5 	stb	r2,119(sp)
81117ea0:	003b8006 	br	81116ca4 <__reset+0xfb0f6ca4>
81117ea4:	d8002e15 	stw	zero,184(sp)
81117ea8:	dc001e04 	addi	r16,sp,120
81117eac:	003a4d06 	br	811167e4 <__reset+0xfb0f67e4>
81117eb0:	8c7fff84 	addi	r17,r17,-2
81117eb4:	b5bfffc4 	addi	r22,r22,-1
81117eb8:	dd802615 	stw	r22,152(sp)
81117ebc:	dc4022c5 	stb	r17,139(sp)
81117ec0:	b000bf16 	blt	r22,zero,811181c0 <___vfprintf_internal_r+0x2100>
81117ec4:	00800ac4 	movi	r2,43
81117ec8:	d8802305 	stb	r2,140(sp)
81117ecc:	00800244 	movi	r2,9
81117ed0:	15807016 	blt	r2,r22,81118094 <___vfprintf_internal_r+0x1fd4>
81117ed4:	00800c04 	movi	r2,48
81117ed8:	b5800c04 	addi	r22,r22,48
81117edc:	d8802345 	stb	r2,141(sp)
81117ee0:	dd802385 	stb	r22,142(sp)
81117ee4:	d88023c4 	addi	r2,sp,143
81117ee8:	df0022c4 	addi	fp,sp,139
81117eec:	d8c03317 	ldw	r3,204(sp)
81117ef0:	1739c83a 	sub	fp,r2,fp
81117ef4:	d9003317 	ldw	r4,204(sp)
81117ef8:	e0c7883a 	add	r3,fp,r3
81117efc:	df003a15 	stw	fp,232(sp)
81117f00:	d8c02e15 	stw	r3,184(sp)
81117f04:	00800044 	movi	r2,1
81117f08:	1100b30e 	bge	r2,r4,811181d8 <___vfprintf_internal_r+0x2118>
81117f0c:	d8c02e17 	ldw	r3,184(sp)
81117f10:	18c00044 	addi	r3,r3,1
81117f14:	d8c02e15 	stw	r3,184(sp)
81117f18:	1805883a 	mov	r2,r3
81117f1c:	1800ac16 	blt	r3,zero,811181d0 <___vfprintf_internal_r+0x2110>
81117f20:	d8003215 	stw	zero,200(sp)
81117f24:	003e5d06 	br	8111789c <__reset+0xfb0f789c>
81117f28:	d9002c17 	ldw	r4,176(sp)
81117f2c:	d9801e04 	addi	r6,sp,120
81117f30:	b80b883a 	mov	r5,r23
81117f34:	11222b00 	call	811222b0 <__sprint_r>
81117f38:	1039651e 	bne	r2,zero,811164d0 <__reset+0xfb0f64d0>
81117f3c:	dc402617 	ldw	r17,152(sp)
81117f40:	d8c02017 	ldw	r3,128(sp)
81117f44:	d8801f17 	ldw	r2,124(sp)
81117f48:	da000404 	addi	r8,sp,16
81117f4c:	003ed606 	br	81117aa8 <__reset+0xfb0f7aa8>
81117f50:	582b883a 	mov	r21,r11
81117f54:	d8002915 	stw	zero,164(sp)
81117f58:	0038bd06 	br	81116250 <__reset+0xfb0f6250>
81117f5c:	d8802917 	ldw	r2,164(sp)
81117f60:	103e071e 	bne	r2,zero,81117780 <__reset+0xfb0f7780>
81117f64:	dc002915 	stw	r16,164(sp)
81117f68:	003e0506 	br	81117780 <__reset+0xfb0f7780>
81117f6c:	d9002917 	ldw	r4,164(sp)
81117f70:	20c00044 	addi	r3,r4,1
81117f74:	003e0f06 	br	811177b4 <__reset+0xfb0f77b4>
81117f78:	01400184 	movi	r5,6
81117f7c:	d9402915 	stw	r5,164(sp)
81117f80:	003dff06 	br	81117780 <__reset+0xfb0f7780>
81117f84:	d8802104 	addi	r2,sp,132
81117f88:	d8800315 	stw	r2,12(sp)
81117f8c:	d8802504 	addi	r2,sp,148
81117f90:	d8800215 	stw	r2,8(sp)
81117f94:	d8802604 	addi	r2,sp,152
81117f98:	d8800115 	stw	r2,4(sp)
81117f9c:	d8802917 	ldw	r2,164(sp)
81117fa0:	d9403617 	ldw	r5,216(sp)
81117fa4:	d9002c17 	ldw	r4,176(sp)
81117fa8:	d8800015 	stw	r2,0(sp)
81117fac:	01c000c4 	movi	r7,3
81117fb0:	980d883a 	mov	r6,r19
81117fb4:	da003d15 	stw	r8,244(sp)
81117fb8:	111a1cc0 	call	8111a1cc <_dtoa_r>
81117fbc:	d8c02917 	ldw	r3,164(sp)
81117fc0:	da003d17 	ldw	r8,244(sp)
81117fc4:	1021883a 	mov	r16,r2
81117fc8:	10f9883a 	add	fp,r2,r3
81117fcc:	81000007 	ldb	r4,0(r16)
81117fd0:	00800c04 	movi	r2,48
81117fd4:	20805e26 	beq	r4,r2,81118150 <___vfprintf_internal_r+0x2090>
81117fd8:	d8c02617 	ldw	r3,152(sp)
81117fdc:	e0f9883a 	add	fp,fp,r3
81117fe0:	003e0a06 	br	8111780c <__reset+0xfb0f780c>
81117fe4:	00c00b44 	movi	r3,45
81117fe8:	24e0003c 	xorhi	r19,r4,32768
81117fec:	d8c02a05 	stb	r3,168(sp)
81117ff0:	003de906 	br	81117798 <__reset+0xfb0f7798>
81117ff4:	d8c03217 	ldw	r3,200(sp)
81117ff8:	00c07a0e 	bge	zero,r3,811181e4 <___vfprintf_internal_r+0x2124>
81117ffc:	00800044 	movi	r2,1
81118000:	d9003317 	ldw	r4,204(sp)
81118004:	1105883a 	add	r2,r2,r4
81118008:	d8802e15 	stw	r2,184(sp)
8111800c:	10004e16 	blt	r2,zero,81118148 <___vfprintf_internal_r+0x2088>
81118010:	044019c4 	movi	r17,103
81118014:	003e2106 	br	8111789c <__reset+0xfb0f789c>
81118018:	d9002917 	ldw	r4,164(sp)
8111801c:	d8802104 	addi	r2,sp,132
81118020:	d8800315 	stw	r2,12(sp)
81118024:	d9000015 	stw	r4,0(sp)
81118028:	d8802504 	addi	r2,sp,148
8111802c:	d9403617 	ldw	r5,216(sp)
81118030:	d9002c17 	ldw	r4,176(sp)
81118034:	d8800215 	stw	r2,8(sp)
81118038:	d8802604 	addi	r2,sp,152
8111803c:	d8800115 	stw	r2,4(sp)
81118040:	01c000c4 	movi	r7,3
81118044:	980d883a 	mov	r6,r19
81118048:	da003d15 	stw	r8,244(sp)
8111804c:	111a1cc0 	call	8111a1cc <_dtoa_r>
81118050:	d8c02917 	ldw	r3,164(sp)
81118054:	da003d17 	ldw	r8,244(sp)
81118058:	1021883a 	mov	r16,r2
8111805c:	00801184 	movi	r2,70
81118060:	80f9883a 	add	fp,r16,r3
81118064:	88bfd926 	beq	r17,r2,81117fcc <__reset+0xfb0f7fcc>
81118068:	003de806 	br	8111780c <__reset+0xfb0f780c>
8111806c:	d9002917 	ldw	r4,164(sp)
81118070:	00c04d0e 	bge	zero,r3,811181a8 <___vfprintf_internal_r+0x20e8>
81118074:	2000441e 	bne	r4,zero,81118188 <___vfprintf_internal_r+0x20c8>
81118078:	9480004c 	andi	r18,r18,1
8111807c:	9000421e 	bne	r18,zero,81118188 <___vfprintf_internal_r+0x20c8>
81118080:	1805883a 	mov	r2,r3
81118084:	18007016 	blt	r3,zero,81118248 <___vfprintf_internal_r+0x2188>
81118088:	d8c03217 	ldw	r3,200(sp)
8111808c:	d8c02e15 	stw	r3,184(sp)
81118090:	003e0206 	br	8111789c <__reset+0xfb0f789c>
81118094:	df0022c4 	addi	fp,sp,139
81118098:	dc002915 	stw	r16,164(sp)
8111809c:	4027883a 	mov	r19,r8
811180a0:	e021883a 	mov	r16,fp
811180a4:	b009883a 	mov	r4,r22
811180a8:	01400284 	movi	r5,10
811180ac:	11256280 	call	81125628 <__modsi3>
811180b0:	10800c04 	addi	r2,r2,48
811180b4:	843fffc4 	addi	r16,r16,-1
811180b8:	b009883a 	mov	r4,r22
811180bc:	01400284 	movi	r5,10
811180c0:	80800005 	stb	r2,0(r16)
811180c4:	11255a40 	call	811255a4 <__divsi3>
811180c8:	102d883a 	mov	r22,r2
811180cc:	00800244 	movi	r2,9
811180d0:	15bff416 	blt	r2,r22,811180a4 <__reset+0xfb0f80a4>
811180d4:	9811883a 	mov	r8,r19
811180d8:	b0800c04 	addi	r2,r22,48
811180dc:	8027883a 	mov	r19,r16
811180e0:	997fffc4 	addi	r5,r19,-1
811180e4:	98bfffc5 	stb	r2,-1(r19)
811180e8:	dc002917 	ldw	r16,164(sp)
811180ec:	2f006a2e 	bgeu	r5,fp,81118298 <___vfprintf_internal_r+0x21d8>
811180f0:	d9c02384 	addi	r7,sp,142
811180f4:	3ccfc83a 	sub	r7,r7,r19
811180f8:	d9002344 	addi	r4,sp,141
811180fc:	e1cf883a 	add	r7,fp,r7
81118100:	00000106 	br	81118108 <___vfprintf_internal_r+0x2048>
81118104:	28800003 	ldbu	r2,0(r5)
81118108:	20800005 	stb	r2,0(r4)
8111810c:	21000044 	addi	r4,r4,1
81118110:	29400044 	addi	r5,r5,1
81118114:	393ffb1e 	bne	r7,r4,81118104 <__reset+0xfb0f8104>
81118118:	d8802304 	addi	r2,sp,140
8111811c:	14c5c83a 	sub	r2,r2,r19
81118120:	d8c02344 	addi	r3,sp,141
81118124:	1885883a 	add	r2,r3,r2
81118128:	003f7006 	br	81117eec <__reset+0xfb0f7eec>
8111812c:	0005883a 	mov	r2,zero
81118130:	003f0f06 	br	81117d70 <__reset+0xfb0f7d70>
81118134:	d8c03217 	ldw	r3,200(sp)
81118138:	18c00044 	addi	r3,r3,1
8111813c:	d8c02e15 	stw	r3,184(sp)
81118140:	1805883a 	mov	r2,r3
81118144:	183fb20e 	bge	r3,zero,81118010 <__reset+0xfb0f8010>
81118148:	0005883a 	mov	r2,zero
8111814c:	003fb006 	br	81118010 <__reset+0xfb0f8010>
81118150:	d9003617 	ldw	r4,216(sp)
81118154:	000d883a 	mov	r6,zero
81118158:	000f883a 	mov	r7,zero
8111815c:	980b883a 	mov	r5,r19
81118160:	d8c03c15 	stw	r3,240(sp)
81118164:	da003d15 	stw	r8,244(sp)
81118168:	1126af80 	call	81126af8 <__eqdf2>
8111816c:	d8c03c17 	ldw	r3,240(sp)
81118170:	da003d17 	ldw	r8,244(sp)
81118174:	103f9826 	beq	r2,zero,81117fd8 <__reset+0xfb0f7fd8>
81118178:	00800044 	movi	r2,1
8111817c:	10c7c83a 	sub	r3,r2,r3
81118180:	d8c02615 	stw	r3,152(sp)
81118184:	003f9506 	br	81117fdc <__reset+0xfb0f7fdc>
81118188:	d9002917 	ldw	r4,164(sp)
8111818c:	d8c03217 	ldw	r3,200(sp)
81118190:	20800044 	addi	r2,r4,1
81118194:	1885883a 	add	r2,r3,r2
81118198:	d8802e15 	stw	r2,184(sp)
8111819c:	103dbf0e 	bge	r2,zero,8111789c <__reset+0xfb0f789c>
811181a0:	0005883a 	mov	r2,zero
811181a4:	003dbd06 	br	8111789c <__reset+0xfb0f789c>
811181a8:	2000211e 	bne	r4,zero,81118230 <___vfprintf_internal_r+0x2170>
811181ac:	9480004c 	andi	r18,r18,1
811181b0:	90001f1e 	bne	r18,zero,81118230 <___vfprintf_internal_r+0x2170>
811181b4:	00800044 	movi	r2,1
811181b8:	d8802e15 	stw	r2,184(sp)
811181bc:	003db706 	br	8111789c <__reset+0xfb0f789c>
811181c0:	00800b44 	movi	r2,45
811181c4:	05adc83a 	sub	r22,zero,r22
811181c8:	d8802305 	stb	r2,140(sp)
811181cc:	003f3f06 	br	81117ecc <__reset+0xfb0f7ecc>
811181d0:	0005883a 	mov	r2,zero
811181d4:	003f5206 	br	81117f20 <__reset+0xfb0f7f20>
811181d8:	90a4703a 	and	r18,r18,r2
811181dc:	903f4e26 	beq	r18,zero,81117f18 <__reset+0xfb0f7f18>
811181e0:	003f4a06 	br	81117f0c <__reset+0xfb0f7f0c>
811181e4:	00800084 	movi	r2,2
811181e8:	10c5c83a 	sub	r2,r2,r3
811181ec:	003f8406 	br	81118000 <__reset+0xfb0f8000>
811181f0:	d8802d17 	ldw	r2,180(sp)
811181f4:	d9002d17 	ldw	r4,180(sp)
811181f8:	ac400043 	ldbu	r17,1(r21)
811181fc:	10800017 	ldw	r2,0(r2)
81118200:	582b883a 	mov	r21,r11
81118204:	d8802915 	stw	r2,164(sp)
81118208:	20800104 	addi	r2,r4,4
8111820c:	d9002917 	ldw	r4,164(sp)
81118210:	d8802d15 	stw	r2,180(sp)
81118214:	203e7a0e 	bge	r4,zero,81117c00 <__reset+0xfb0f7c00>
81118218:	8c403fcc 	andi	r17,r17,255
8111821c:	00bfffc4 	movi	r2,-1
81118220:	8c40201c 	xori	r17,r17,128
81118224:	d8802915 	stw	r2,164(sp)
81118228:	8c7fe004 	addi	r17,r17,-128
8111822c:	00380706 	br	8111624c <__reset+0xfb0f624c>
81118230:	d8c02917 	ldw	r3,164(sp)
81118234:	18c00084 	addi	r3,r3,2
81118238:	d8c02e15 	stw	r3,184(sp)
8111823c:	1805883a 	mov	r2,r3
81118240:	183d960e 	bge	r3,zero,8111789c <__reset+0xfb0f789c>
81118244:	003fd606 	br	811181a0 <__reset+0xfb0f81a0>
81118248:	0005883a 	mov	r2,zero
8111824c:	003f8e06 	br	81118088 <__reset+0xfb0f8088>
81118250:	9080004c 	andi	r2,r18,1
81118254:	103f811e 	bne	r2,zero,8111805c <__reset+0xfb0f805c>
81118258:	d8802117 	ldw	r2,132(sp)
8111825c:	1405c83a 	sub	r2,r2,r16
81118260:	d8803315 	stw	r2,204(sp)
81118264:	b47ef326 	beq	r22,r17,81117e34 <__reset+0xfb0f7e34>
81118268:	dd802617 	ldw	r22,152(sp)
8111826c:	003f1106 	br	81117eb4 <__reset+0xfb0f7eb4>
81118270:	d9c02785 	stb	r7,158(sp)
81118274:	00390406 	br	81116688 <__reset+0xfb0f6688>
81118278:	d9c02785 	stb	r7,158(sp)
8111827c:	0038d306 	br	811165cc <__reset+0xfb0f65cc>
81118280:	d9c02785 	stb	r7,158(sp)
81118284:	003a6106 	br	81116c0c <__reset+0xfb0f6c0c>
81118288:	d9c02785 	stb	r7,158(sp)
8111828c:	003af806 	br	81116e70 <__reset+0xfb0f6e70>
81118290:	0005883a 	mov	r2,zero
81118294:	003d7e06 	br	81117890 <__reset+0xfb0f7890>
81118298:	d8802344 	addi	r2,sp,141
8111829c:	003f1306 	br	81117eec <__reset+0xfb0f7eec>
811182a0:	d9c02785 	stb	r7,158(sp)
811182a4:	00392306 	br	81116734 <__reset+0xfb0f6734>
811182a8:	d9c02785 	stb	r7,158(sp)
811182ac:	003aa906 	br	81116d54 <__reset+0xfb0f6d54>
811182b0:	d9c02785 	stb	r7,158(sp)
811182b4:	003a3d06 	br	81116bac <__reset+0xfb0f6bac>
811182b8:	d9c02785 	stb	r7,158(sp)
811182bc:	003aca06 	br	81116de8 <__reset+0xfb0f6de8>

811182c0 <__vfprintf_internal>:
811182c0:	00a04534 	movhi	r2,33044
811182c4:	108aa604 	addi	r2,r2,10904
811182c8:	300f883a 	mov	r7,r6
811182cc:	280d883a 	mov	r6,r5
811182d0:	200b883a 	mov	r5,r4
811182d4:	11000017 	ldw	r4,0(r2)
811182d8:	11160c01 	jmpi	811160c0 <___vfprintf_internal_r>

811182dc <__sbprintf>:
811182dc:	defee204 	addi	sp,sp,-1144
811182e0:	de00012e 	bgeu	sp,et,811182e8 <__sbprintf+0xc>
811182e4:	003b68fa 	trap	3
811182e8:	2880030b 	ldhu	r2,12(r5)
811182ec:	2ac01917 	ldw	r11,100(r5)
811182f0:	2a80038b 	ldhu	r10,14(r5)
811182f4:	2a400717 	ldw	r9,28(r5)
811182f8:	2a000917 	ldw	r8,36(r5)
811182fc:	00c10004 	movi	r3,1024
81118300:	dc011a15 	stw	r16,1128(sp)
81118304:	10bfff4c 	andi	r2,r2,65533
81118308:	2821883a 	mov	r16,r5
8111830c:	d8cb883a 	add	r5,sp,r3
81118310:	dc811c15 	stw	r18,1136(sp)
81118314:	dc411b15 	stw	r17,1132(sp)
81118318:	dfc11d15 	stw	ra,1140(sp)
8111831c:	2025883a 	mov	r18,r4
81118320:	d881030d 	sth	r2,1036(sp)
81118324:	dac11915 	stw	r11,1124(sp)
81118328:	da81038d 	sth	r10,1038(sp)
8111832c:	da410715 	stw	r9,1052(sp)
81118330:	da010915 	stw	r8,1060(sp)
81118334:	dec10015 	stw	sp,1024(sp)
81118338:	dec10415 	stw	sp,1040(sp)
8111833c:	d8c10215 	stw	r3,1032(sp)
81118340:	d8c10515 	stw	r3,1044(sp)
81118344:	d8010615 	stw	zero,1048(sp)
81118348:	11160c00 	call	811160c0 <___vfprintf_internal_r>
8111834c:	1023883a 	mov	r17,r2
81118350:	10000416 	blt	r2,zero,81118364 <__sbprintf+0x88>
81118354:	d9410004 	addi	r5,sp,1024
81118358:	9009883a 	mov	r4,r18
8111835c:	111ba800 	call	8111ba80 <_fflush_r>
81118360:	10000d1e 	bne	r2,zero,81118398 <__sbprintf+0xbc>
81118364:	d881030b 	ldhu	r2,1036(sp)
81118368:	1080100c 	andi	r2,r2,64
8111836c:	10000326 	beq	r2,zero,8111837c <__sbprintf+0xa0>
81118370:	8080030b 	ldhu	r2,12(r16)
81118374:	10801014 	ori	r2,r2,64
81118378:	8080030d 	sth	r2,12(r16)
8111837c:	8805883a 	mov	r2,r17
81118380:	dfc11d17 	ldw	ra,1140(sp)
81118384:	dc811c17 	ldw	r18,1136(sp)
81118388:	dc411b17 	ldw	r17,1132(sp)
8111838c:	dc011a17 	ldw	r16,1128(sp)
81118390:	dec11e04 	addi	sp,sp,1144
81118394:	f800283a 	ret
81118398:	047fffc4 	movi	r17,-1
8111839c:	003ff106 	br	81118364 <__reset+0xfb0f8364>

811183a0 <__svfscanf_r>:
811183a0:	deff4b04 	addi	sp,sp,-724
811183a4:	de00012e 	bgeu	sp,et,811183ac <__svfscanf_r+0xc>
811183a8:	003b68fa 	trap	3
811183ac:	2880030b 	ldhu	r2,12(r5)
811183b0:	df00b315 	stw	fp,716(sp)
811183b4:	dd80b115 	stw	r22,708(sp)
811183b8:	dfc0b415 	stw	ra,720(sp)
811183bc:	ddc0b215 	stw	r23,712(sp)
811183c0:	dd40b015 	stw	r21,704(sp)
811183c4:	dd00af15 	stw	r20,700(sp)
811183c8:	dcc0ae15 	stw	r19,696(sp)
811183cc:	dc80ad15 	stw	r18,692(sp)
811183d0:	dc40ac15 	stw	r17,688(sp)
811183d4:	dc00ab15 	stw	r16,684(sp)
811183d8:	10c8000c 	andi	r3,r2,8192
811183dc:	d9c09c15 	stw	r7,624(sp)
811183e0:	2839883a 	mov	fp,r5
811183e4:	202d883a 	mov	r22,r4
811183e8:	1800061e 	bne	r3,zero,81118404 <__svfscanf_r+0x64>
811183ec:	29001917 	ldw	r4,100(r5)
811183f0:	00f7ffc4 	movi	r3,-8193
811183f4:	10880014 	ori	r2,r2,8192
811183f8:	20c6703a 	and	r3,r4,r3
811183fc:	2880030d 	sth	r2,12(r5)
81118400:	28c01915 	stw	r3,100(r5)
81118404:	30800003 	ldbu	r2,0(r6)
81118408:	0021883a 	mov	r16,zero
8111840c:	05e04534 	movhi	r23,33044
81118410:	d800a115 	stw	zero,644(sp)
81118414:	d8009e15 	stw	zero,632(sp)
81118418:	d800a015 	stw	zero,640(sp)
8111841c:	d8809b15 	stw	r2,620(sp)
81118420:	bdcaa404 	addi	r23,r23,10896
81118424:	8025883a 	mov	r18,r16
81118428:	35000044 	addi	r20,r6,1
8111842c:	10001e26 	beq	r2,zero,811184a8 <__svfscanf_r+0x108>
81118430:	b9c00017 	ldw	r7,0(r23)
81118434:	3887883a 	add	r3,r7,r2
81118438:	18c00043 	ldbu	r3,1(r3)
8111843c:	18c0020c 	andi	r3,r3,8
81118440:	18001b26 	beq	r3,zero,811184b0 <__svfscanf_r+0x110>
81118444:	e0800117 	ldw	r2,4(fp)
81118448:	00800e0e 	bge	zero,r2,81118484 <__svfscanf_r+0xe4>
8111844c:	e0c00017 	ldw	r3,0(fp)
81118450:	b9000017 	ldw	r4,0(r23)
81118454:	18800003 	ldbu	r2,0(r3)
81118458:	2085883a 	add	r2,r4,r2
8111845c:	10800043 	ldbu	r2,1(r2)
81118460:	1080020c 	andi	r2,r2,8
81118464:	10000b26 	beq	r2,zero,81118494 <__svfscanf_r+0xf4>
81118468:	e0800117 	ldw	r2,4(fp)
8111846c:	18c00044 	addi	r3,r3,1
81118470:	e0c00015 	stw	r3,0(fp)
81118474:	10bfffc4 	addi	r2,r2,-1
81118478:	e0800115 	stw	r2,4(fp)
8111847c:	94800044 	addi	r18,r18,1
81118480:	00bff216 	blt	zero,r2,8111844c <__reset+0xfb0f844c>
81118484:	e00b883a 	mov	r5,fp
81118488:	b009883a 	mov	r4,r22
8111848c:	11136800 	call	81113680 <__srefill_r>
81118490:	103fee26 	beq	r2,zero,8111844c <__reset+0xfb0f844c>
81118494:	a00d883a 	mov	r6,r20
81118498:	30800003 	ldbu	r2,0(r6)
8111849c:	35000044 	addi	r20,r6,1
811184a0:	d8809b15 	stw	r2,620(sp)
811184a4:	103fe21e 	bne	r2,zero,81118430 <__reset+0xfb0f8430>
811184a8:	d880a017 	ldw	r2,640(sp)
811184ac:	00009906 	br	81118714 <__svfscanf_r+0x374>
811184b0:	00c00944 	movi	r3,37
811184b4:	10c0881e 	bne	r2,r3,811186d8 <__svfscanf_r+0x338>
811184b8:	30c00043 	ldbu	r3,1(r6)
811184bc:	0023883a 	mov	r17,zero
811184c0:	0027883a 	mov	r19,zero
811184c4:	01001e04 	movi	r4,120
811184c8:	01401b04 	movi	r5,108
811184cc:	a1800044 	addi	r6,r20,1
811184d0:	20c0a236 	bltu	r4,r3,8111875c <__svfscanf_r+0x3bc>
811184d4:	180490ba 	slli	r2,r3,2
811184d8:	022044b4 	movhi	r8,33042
811184dc:	42213b04 	addi	r8,r8,-31508
811184e0:	1205883a 	add	r2,r2,r8
811184e4:	10800017 	ldw	r2,0(r2)
811184e8:	1000683a 	jmp	r2
811184ec:	81118710 	cmplti	r4,r16,17948
811184f0:	8111875c 	xori	r4,r16,17949
811184f4:	8111875c 	xori	r4,r16,17949
811184f8:	8111875c 	xori	r4,r16,17949
811184fc:	8111875c 	xori	r4,r16,17949
81118500:	8111875c 	xori	r4,r16,17949
81118504:	8111875c 	xori	r4,r16,17949
81118508:	8111875c 	xori	r4,r16,17949
8111850c:	8111875c 	xori	r4,r16,17949
81118510:	8111875c 	xori	r4,r16,17949
81118514:	8111875c 	xori	r4,r16,17949
81118518:	8111875c 	xori	r4,r16,17949
8111851c:	8111875c 	xori	r4,r16,17949
81118520:	8111875c 	xori	r4,r16,17949
81118524:	8111875c 	xori	r4,r16,17949
81118528:	8111875c 	xori	r4,r16,17949
8111852c:	8111875c 	xori	r4,r16,17949
81118530:	8111875c 	xori	r4,r16,17949
81118534:	8111875c 	xori	r4,r16,17949
81118538:	8111875c 	xori	r4,r16,17949
8111853c:	8111875c 	xori	r4,r16,17949
81118540:	8111875c 	xori	r4,r16,17949
81118544:	8111875c 	xori	r4,r16,17949
81118548:	8111875c 	xori	r4,r16,17949
8111854c:	8111875c 	xori	r4,r16,17949
81118550:	8111875c 	xori	r4,r16,17949
81118554:	8111875c 	xori	r4,r16,17949
81118558:	8111875c 	xori	r4,r16,17949
8111855c:	8111875c 	xori	r4,r16,17949
81118560:	8111875c 	xori	r4,r16,17949
81118564:	8111875c 	xori	r4,r16,17949
81118568:	8111875c 	xori	r4,r16,17949
8111856c:	8111875c 	xori	r4,r16,17949
81118570:	8111875c 	xori	r4,r16,17949
81118574:	8111875c 	xori	r4,r16,17949
81118578:	8111875c 	xori	r4,r16,17949
8111857c:	8111875c 	xori	r4,r16,17949
81118580:	811186d0 	cmplti	r4,r16,17947
81118584:	8111875c 	xori	r4,r16,17949
81118588:	8111875c 	xori	r4,r16,17949
8111858c:	8111875c 	xori	r4,r16,17949
81118590:	8111875c 	xori	r4,r16,17949
81118594:	81118744 	addi	r4,r16,17949
81118598:	8111875c 	xori	r4,r16,17949
8111859c:	8111875c 	xori	r4,r16,17949
811185a0:	8111875c 	xori	r4,r16,17949
811185a4:	8111875c 	xori	r4,r16,17949
811185a8:	8111875c 	xori	r4,r16,17949
811185ac:	81118878 	rdprs	r4,r16,17953
811185b0:	81118878 	rdprs	r4,r16,17953
811185b4:	81118878 	rdprs	r4,r16,17953
811185b8:	81118878 	rdprs	r4,r16,17953
811185bc:	81118878 	rdprs	r4,r16,17953
811185c0:	81118878 	rdprs	r4,r16,17953
811185c4:	81118878 	rdprs	r4,r16,17953
811185c8:	81118878 	rdprs	r4,r16,17953
811185cc:	81118878 	rdprs	r4,r16,17953
811185d0:	81118878 	rdprs	r4,r16,17953
811185d4:	8111875c 	xori	r4,r16,17949
811185d8:	8111875c 	xori	r4,r16,17949
811185dc:	8111875c 	xori	r4,r16,17949
811185e0:	8111875c 	xori	r4,r16,17949
811185e4:	8111875c 	xori	r4,r16,17949
811185e8:	8111875c 	xori	r4,r16,17949
811185ec:	8111875c 	xori	r4,r16,17949
811185f0:	8111875c 	xori	r4,r16,17949
811185f4:	8111875c 	xori	r4,r16,17949
811185f8:	8111875c 	xori	r4,r16,17949
811185fc:	8111884c 	andi	r4,r16,17953
81118600:	811188fc 	xorhi	r4,r16,17955
81118604:	8111875c 	xori	r4,r16,17949
81118608:	811188fc 	xorhi	r4,r16,17955
8111860c:	8111875c 	xori	r4,r16,17949
81118610:	8111875c 	xori	r4,r16,17949
81118614:	8111875c 	xori	r4,r16,17949
81118618:	8111875c 	xori	r4,r16,17949
8111861c:	811188e8 	cmpgeui	r4,r16,17955
81118620:	8111875c 	xori	r4,r16,17949
81118624:	8111875c 	xori	r4,r16,17949
81118628:	811188bc 	xorhi	r4,r16,17954
8111862c:	8111875c 	xori	r4,r16,17949
81118630:	8111875c 	xori	r4,r16,17949
81118634:	8111875c 	xori	r4,r16,17949
81118638:	8111875c 	xori	r4,r16,17949
8111863c:	8111875c 	xori	r4,r16,17949
81118640:	8111875c 	xori	r4,r16,17949
81118644:	8111875c 	xori	r4,r16,17949
81118648:	8111875c 	xori	r4,r16,17949
8111864c:	81118894 	ori	r4,r16,17954
81118650:	8111875c 	xori	r4,r16,17949
81118654:	8111875c 	xori	r4,r16,17949
81118658:	81118a30 	cmpltui	r4,r16,17960
8111865c:	8111875c 	xori	r4,r16,17949
81118660:	8111875c 	xori	r4,r16,17949
81118664:	8111875c 	xori	r4,r16,17949
81118668:	8111875c 	xori	r4,r16,17949
8111866c:	8111875c 	xori	r4,r16,17949
81118670:	8111875c 	xori	r4,r16,17949
81118674:	8111875c 	xori	r4,r16,17949
81118678:	811189b4 	orhi	r4,r16,17958
8111867c:	8111898c 	andi	r4,r16,17958
81118680:	811188fc 	xorhi	r4,r16,17955
81118684:	811188fc 	xorhi	r4,r16,17955
81118688:	811188fc 	xorhi	r4,r16,17955
8111868c:	81118978 	rdprs	r4,r16,17957
81118690:	81118abc 	xorhi	r4,r16,17962
81118694:	8111875c 	xori	r4,r16,17949
81118698:	8111875c 	xori	r4,r16,17949
8111869c:	81118964 	muli	r4,r16,17957
811186a0:	8111875c 	xori	r4,r16,17949
811186a4:	81118934 	orhi	r4,r16,17956
811186a8:	81118910 	cmplti	r4,r16,17956
811186ac:	81118820 	cmpeqi	r4,r16,17952
811186b0:	8111875c 	xori	r4,r16,17949
811186b4:	8111875c 	xori	r4,r16,17949
811186b8:	8111880c 	andi	r4,r16,17952
811186bc:	8111875c 	xori	r4,r16,17949
811186c0:	81118794 	ori	r4,r16,17950
811186c4:	8111875c 	xori	r4,r16,17949
811186c8:	8111875c 	xori	r4,r16,17949
811186cc:	81118894 	ori	r4,r16,17954
811186d0:	d9809d15 	stw	r6,628(sp)
811186d4:	3029883a 	mov	r20,r6
811186d8:	e0800117 	ldw	r2,4(fp)
811186dc:	0081aa0e 	bge	zero,r2,81118d88 <__svfscanf_r+0x9e8>
811186e0:	e0800017 	ldw	r2,0(fp)
811186e4:	a0ffffc3 	ldbu	r3,-1(r20)
811186e8:	11000003 	ldbu	r4,0(r2)
811186ec:	20ff6e1e 	bne	r4,r3,811184a8 <__reset+0xfb0f84a8>
811186f0:	e0c00117 	ldw	r3,4(fp)
811186f4:	10800044 	addi	r2,r2,1
811186f8:	e0800015 	stw	r2,0(fp)
811186fc:	18bfffc4 	addi	r2,r3,-1
81118700:	e0800115 	stw	r2,4(fp)
81118704:	94800044 	addi	r18,r18,1
81118708:	a00d883a 	mov	r6,r20
8111870c:	003f6206 	br	81118498 <__reset+0xfb0f8498>
81118710:	00bfffc4 	movi	r2,-1
81118714:	dfc0b417 	ldw	ra,720(sp)
81118718:	df00b317 	ldw	fp,716(sp)
8111871c:	ddc0b217 	ldw	r23,712(sp)
81118720:	dd80b117 	ldw	r22,708(sp)
81118724:	dd40b017 	ldw	r21,704(sp)
81118728:	dd00af17 	ldw	r20,700(sp)
8111872c:	dcc0ae17 	ldw	r19,696(sp)
81118730:	dc80ad17 	ldw	r18,692(sp)
81118734:	dc40ac17 	ldw	r17,688(sp)
81118738:	dc00ab17 	ldw	r16,684(sp)
8111873c:	dec0b504 	addi	sp,sp,724
81118740:	f800283a 	ret
81118744:	a0800043 	ldbu	r2,1(r20)
81118748:	3029883a 	mov	r20,r6
8111874c:	8c400414 	ori	r17,r17,16
81118750:	10c03fcc 	andi	r3,r2,255
81118754:	a1800044 	addi	r6,r20,1
81118758:	20ff5e2e 	bgeu	r4,r3,811184d4 <__reset+0xfb0f84d4>
8111875c:	38c7883a 	add	r3,r7,r3
81118760:	18800043 	ldbu	r2,1(r3)
81118764:	d9809d15 	stw	r6,628(sp)
81118768:	00c00044 	movi	r3,1
8111876c:	108000cc 	andi	r2,r2,3
81118770:	10c18f26 	beq	r2,r3,81118db0 <__svfscanf_r+0xa10>
81118774:	e0800117 	ldw	r2,4(fp)
81118778:	00808716 	blt	zero,r2,81118998 <__svfscanf_r+0x5f8>
8111877c:	e00b883a 	mov	r5,fp
81118780:	b009883a 	mov	r4,r22
81118784:	11136800 	call	81113680 <__srefill_r>
81118788:	1001431e 	bne	r2,zero,81118c98 <__svfscanf_r+0x8f8>
8111878c:	b9c00017 	ldw	r7,0(r23)
81118790:	00008106 	br	81118998 <__svfscanf_r+0x5f8>
81118794:	e0800117 	ldw	r2,4(fp)
81118798:	d9809d15 	stw	r6,628(sp)
8111879c:	0081a30e 	bge	zero,r2,81118e2c <__svfscanf_r+0xa8c>
811187a0:	00a044b4 	movhi	r2,33042
811187a4:	10816c04 	addi	r2,r2,1456
811187a8:	02000284 	movi	r8,10
811187ac:	d880a115 	stw	r2,644(sp)
811187b0:	da009e15 	stw	r8,632(sp)
811187b4:	050000c4 	movi	r20,3
811187b8:	e0c00017 	ldw	r3,0(fp)
811187bc:	00000206 	br	811187c8 <__svfscanf_r+0x428>
811187c0:	18c00044 	addi	r3,r3,1
811187c4:	e0c00015 	stw	r3,0(fp)
811187c8:	19000003 	ldbu	r4,0(r3)
811187cc:	20803fcc 	andi	r2,r4,255
811187d0:	3885883a 	add	r2,r7,r2
811187d4:	10800043 	ldbu	r2,1(r2)
811187d8:	1140020c 	andi	r5,r2,8
811187dc:	2801ab26 	beq	r5,zero,81118e8c <__svfscanf_r+0xaec>
811187e0:	e0800117 	ldw	r2,4(fp)
811187e4:	94800044 	addi	r18,r18,1
811187e8:	10bfffc4 	addi	r2,r2,-1
811187ec:	e0800115 	stw	r2,4(fp)
811187f0:	00bff316 	blt	zero,r2,811187c0 <__reset+0xfb0f87c0>
811187f4:	e00b883a 	mov	r5,fp
811187f8:	b009883a 	mov	r4,r22
811187fc:	11136800 	call	81113680 <__srefill_r>
81118800:	1001251e 	bne	r2,zero,81118c98 <__svfscanf_r+0x8f8>
81118804:	b9c00017 	ldw	r7,0(r23)
81118808:	003feb06 	br	811187b8 <__reset+0xfb0f87b8>
8111880c:	e0800117 	ldw	r2,4(fp)
81118810:	d9809d15 	stw	r6,628(sp)
81118814:	00818b0e 	bge	zero,r2,81118e44 <__svfscanf_r+0xaa4>
81118818:	05000084 	movi	r20,2
8111881c:	003fe606 	br	811187b8 <__reset+0xfb0f87b8>
81118820:	e0800117 	ldw	r2,4(fp)
81118824:	d9809d15 	stw	r6,628(sp)
81118828:	8c408814 	ori	r17,r17,544
8111882c:	00801d0e 	bge	zero,r2,811188a4 <__svfscanf_r+0x504>
81118830:	00a044b4 	movhi	r2,33042
81118834:	10816c04 	addi	r2,r2,1456
81118838:	02000404 	movi	r8,16
8111883c:	d880a115 	stw	r2,644(sp)
81118840:	da009e15 	stw	r8,632(sp)
81118844:	050000c4 	movi	r20,3
81118848:	003fdb06 	br	811187b8 <__reset+0xfb0f87b8>
8111884c:	e0800117 	ldw	r2,4(fp)
81118850:	d9809d15 	stw	r6,628(sp)
81118854:	8c400054 	ori	r17,r17,1
81118858:	00bfc80e 	bge	zero,r2,8111877c <__reset+0xfb0f877c>
8111885c:	00e04474 	movhi	r3,33041
81118860:	18cf2104 	addi	r3,r3,15492
81118864:	02000284 	movi	r8,10
81118868:	d8c0a115 	stw	r3,644(sp)
8111886c:	da009e15 	stw	r8,632(sp)
81118870:	050000c4 	movi	r20,3
81118874:	003fd006 	br	811187b8 <__reset+0xfb0f87b8>
81118878:	9cc002a4 	muli	r19,r19,10
8111887c:	a0800043 	ldbu	r2,1(r20)
81118880:	3029883a 	mov	r20,r6
81118884:	98e7883a 	add	r19,r19,r3
81118888:	9cfff404 	addi	r19,r19,-48
8111888c:	10c03fcc 	andi	r3,r2,255
81118890:	003f0e06 	br	811184cc <__reset+0xfb0f84cc>
81118894:	e0800117 	ldw	r2,4(fp)
81118898:	d9809d15 	stw	r6,628(sp)
8111889c:	8c408014 	ori	r17,r17,512
811188a0:	00bfe316 	blt	zero,r2,81118830 <__reset+0xfb0f8830>
811188a4:	e00b883a 	mov	r5,fp
811188a8:	b009883a 	mov	r4,r22
811188ac:	11136800 	call	81113680 <__srefill_r>
811188b0:	1000f91e 	bne	r2,zero,81118c98 <__svfscanf_r+0x8f8>
811188b4:	b9c00017 	ldw	r7,0(r23)
811188b8:	003fdd06 	br	81118830 <__reset+0xfb0f8830>
811188bc:	e0800117 	ldw	r2,4(fp)
811188c0:	d9809d15 	stw	r6,628(sp)
811188c4:	8c400054 	ori	r17,r17,1
811188c8:	0080140e 	bge	zero,r2,8111891c <__svfscanf_r+0x57c>
811188cc:	00a044b4 	movhi	r2,33042
811188d0:	10816c04 	addi	r2,r2,1456
811188d4:	02000204 	movi	r8,8
811188d8:	d880a115 	stw	r2,644(sp)
811188dc:	da009e15 	stw	r8,632(sp)
811188e0:	050000c4 	movi	r20,3
811188e4:	003fb406 	br	811187b8 <__reset+0xfb0f87b8>
811188e8:	a0800043 	ldbu	r2,1(r20)
811188ec:	8c400094 	ori	r17,r17,2
811188f0:	3029883a 	mov	r20,r6
811188f4:	10c03fcc 	andi	r3,r2,255
811188f8:	003ef406 	br	811184cc <__reset+0xfb0f84cc>
811188fc:	e0800117 	ldw	r2,4(fp)
81118900:	d9809d15 	stw	r6,628(sp)
81118904:	0081420e 	bge	zero,r2,81118e10 <__svfscanf_r+0xa70>
81118908:	05000104 	movi	r20,4
8111890c:	003faa06 	br	811187b8 <__reset+0xfb0f87b8>
81118910:	e0800117 	ldw	r2,4(fp)
81118914:	d9809d15 	stw	r6,628(sp)
81118918:	00bfec16 	blt	zero,r2,811188cc <__reset+0xfb0f88cc>
8111891c:	e00b883a 	mov	r5,fp
81118920:	b009883a 	mov	r4,r22
81118924:	11136800 	call	81113680 <__srefill_r>
81118928:	1000db1e 	bne	r2,zero,81118c98 <__svfscanf_r+0x8f8>
8111892c:	b9c00017 	ldw	r7,0(r23)
81118930:	003fe606 	br	811188cc <__reset+0xfb0f88cc>
81118934:	d9809d15 	stw	r6,628(sp)
81118938:	8880040c 	andi	r2,r17,16
8111893c:	10009c1e 	bne	r2,zero,81118bb0 <__svfscanf_r+0x810>
81118940:	8880010c 	andi	r2,r17,4
81118944:	10011e26 	beq	r2,zero,81118dc0 <__svfscanf_r+0xa20>
81118948:	da009c17 	ldw	r8,624(sp)
8111894c:	3029883a 	mov	r20,r6
81118950:	40800017 	ldw	r2,0(r8)
81118954:	42000104 	addi	r8,r8,4
81118958:	da009c15 	stw	r8,624(sp)
8111895c:	1480000d 	sth	r18,0(r2)
81118960:	003ecc06 	br	81118494 <__reset+0xfb0f8494>
81118964:	a0c00043 	ldbu	r3,1(r20)
81118968:	19410c26 	beq	r3,r5,81118d9c <__svfscanf_r+0x9fc>
8111896c:	8c400054 	ori	r17,r17,1
81118970:	3029883a 	mov	r20,r6
81118974:	003ed506 	br	811184cc <__reset+0xfb0f84cc>
81118978:	a0800043 	ldbu	r2,1(r20)
8111897c:	8c400114 	ori	r17,r17,4
81118980:	3029883a 	mov	r20,r6
81118984:	10c03fcc 	andi	r3,r2,255
81118988:	003ed006 	br	811184cc <__reset+0xfb0f84cc>
8111898c:	e0800117 	ldw	r2,4(fp)
81118990:	d9809d15 	stw	r6,628(sp)
81118994:	00bf790e 	bge	zero,r2,8111877c <__reset+0xfb0f877c>
81118998:	00a04474 	movhi	r2,33041
8111899c:	108f2104 	addi	r2,r2,15492
811189a0:	02000284 	movi	r8,10
811189a4:	d880a115 	stw	r2,644(sp)
811189a8:	da009e15 	stw	r8,632(sp)
811189ac:	050000c4 	movi	r20,3
811189b0:	003f8106 	br	811187b8 <__reset+0xfb0f87b8>
811189b4:	e0800117 	ldw	r2,4(fp)
811189b8:	d9809d15 	stw	r6,628(sp)
811189bc:	0080c40e 	bge	zero,r2,81118cd0 <__svfscanf_r+0x930>
811189c0:	9800011e 	bne	r19,zero,811189c8 <__svfscanf_r+0x628>
811189c4:	04c00044 	movi	r19,1
811189c8:	8880004c 	andi	r2,r17,1
811189cc:	1000441e 	bne	r2,zero,81118ae0 <__svfscanf_r+0x740>
811189d0:	8c40040c 	andi	r17,r17,16
811189d4:	8800da26 	beq	r17,zero,81118d40 <__svfscanf_r+0x9a0>
811189d8:	0021883a 	mov	r16,zero
811189dc:	00000806 	br	81118a00 <__svfscanf_r+0x660>
811189e0:	1887883a 	add	r3,r3,r2
811189e4:	e00b883a 	mov	r5,fp
811189e8:	b009883a 	mov	r4,r22
811189ec:	e0c00015 	stw	r3,0(fp)
811189f0:	80a1883a 	add	r16,r16,r2
811189f4:	98a7c83a 	sub	r19,r19,r2
811189f8:	11136800 	call	81113680 <__srefill_r>
811189fc:	1000ca1e 	bne	r2,zero,81118d28 <__svfscanf_r+0x988>
81118a00:	e0800117 	ldw	r2,4(fp)
81118a04:	e0c00017 	ldw	r3,0(fp)
81118a08:	14fff516 	blt	r2,r19,811189e0 <__reset+0xfb0f89e0>
81118a0c:	14c5c83a 	sub	r2,r2,r19
81118a10:	1cd5883a 	add	r10,r3,r19
81118a14:	84e1883a 	add	r16,r16,r19
81118a18:	e0800115 	stw	r2,4(fp)
81118a1c:	e2800015 	stw	r10,0(fp)
81118a20:	dd009d17 	ldw	r20,628(sp)
81118a24:	9425883a 	add	r18,r18,r16
81118a28:	a00d883a 	mov	r6,r20
81118a2c:	003e9a06 	br	81118498 <__reset+0xfb0f8498>
81118a30:	300b883a 	mov	r5,r6
81118a34:	d9005884 	addi	r4,sp,354
81118a38:	d9809d15 	stw	r6,628(sp)
81118a3c:	111e9880 	call	8111e988 <__sccl>
81118a40:	1029883a 	mov	r20,r2
81118a44:	e0800117 	ldw	r2,4(fp)
81118a48:	0081050e 	bge	zero,r2,81118e60 <__svfscanf_r+0xac0>
81118a4c:	e1000017 	ldw	r4,0(fp)
81118a50:	20800003 	ldbu	r2,0(r4)
81118a54:	98005926 	beq	r19,zero,81118bbc <__svfscanf_r+0x81c>
81118a58:	8c40040c 	andi	r17,r17,16
81118a5c:	88005a26 	beq	r17,zero,81118bc8 <__svfscanf_r+0x828>
81118a60:	9823883a 	mov	r17,r19
81118a64:	0021883a 	mov	r16,zero
81118a68:	00000106 	br	81118a70 <__svfscanf_r+0x6d0>
81118a6c:	20800003 	ldbu	r2,0(r4)
81118a70:	10803fcc 	andi	r2,r2,255
81118a74:	d8c05884 	addi	r3,sp,354
81118a78:	1885883a 	add	r2,r3,r2
81118a7c:	10800007 	ldb	r2,0(r2)
81118a80:	1000ad26 	beq	r2,zero,81118d38 <__svfscanf_r+0x998>
81118a84:	e0800117 	ldw	r2,4(fp)
81118a88:	21000044 	addi	r4,r4,1
81118a8c:	84000044 	addi	r16,r16,1
81118a90:	10bfffc4 	addi	r2,r2,-1
81118a94:	e0800115 	stw	r2,4(fp)
81118a98:	e1000015 	stw	r4,0(fp)
81118a9c:	84c0a026 	beq	r16,r19,81118d20 <__svfscanf_r+0x980>
81118aa0:	00bff216 	blt	zero,r2,81118a6c <__reset+0xfb0f8a6c>
81118aa4:	e00b883a 	mov	r5,fp
81118aa8:	b009883a 	mov	r4,r22
81118aac:	11136800 	call	81113680 <__srefill_r>
81118ab0:	10009a1e 	bne	r2,zero,81118d1c <__svfscanf_r+0x97c>
81118ab4:	e1000017 	ldw	r4,0(fp)
81118ab8:	003fec06 	br	81118a6c <__reset+0xfb0f8a6c>
81118abc:	e0800117 	ldw	r2,4(fp)
81118ac0:	d9809d15 	stw	r6,628(sp)
81118ac4:	0080eb0e 	bge	zero,r2,81118e74 <__svfscanf_r+0xad4>
81118ac8:	00a04474 	movhi	r2,33041
81118acc:	108f2104 	addi	r2,r2,15492
81118ad0:	d880a115 	stw	r2,644(sp)
81118ad4:	d8009e15 	stw	zero,632(sp)
81118ad8:	050000c4 	movi	r20,3
81118adc:	003f3606 	br	811187b8 <__reset+0xfb0f87b8>
81118ae0:	dd409904 	addi	r21,sp,612
81118ae4:	8c40040c 	andi	r17,r17,16
81118ae8:	01800204 	movi	r6,8
81118aec:	000b883a 	mov	r5,zero
81118af0:	a809883a 	mov	r4,r21
81118af4:	dc409f15 	stw	r17,636(sp)
81118af8:	11132040 	call	81113204 <memset>
81118afc:	dc409f17 	ldw	r17,636(sp)
81118b00:	88006e26 	beq	r17,zero,81118cbc <__svfscanf_r+0x91c>
81118b04:	0029883a 	mov	r20,zero
81118b08:	0023883a 	mov	r17,zero
81118b0c:	111cda40 	call	8111cda4 <__locale_mb_cur_max>
81118b10:	14406126 	beq	r2,r17,81118c98 <__svfscanf_r+0x8f8>
81118b14:	e0800017 	ldw	r2,0(fp)
81118b18:	e0c00117 	ldw	r3,4(fp)
81118b1c:	d9000104 	addi	r4,sp,4
81118b20:	12000003 	ldbu	r8,0(r2)
81118b24:	18ffffc4 	addi	r3,r3,-1
81118b28:	10800044 	addi	r2,r2,1
81118b2c:	e0c00115 	stw	r3,4(fp)
81118b30:	e0800015 	stw	r2,0(fp)
81118b34:	8c000044 	addi	r16,r17,1
81118b38:	dd400015 	stw	r21,0(sp)
81118b3c:	2463883a 	add	r17,r4,r17
81118b40:	200d883a 	mov	r6,r4
81118b44:	a00b883a 	mov	r5,r20
81118b48:	800f883a 	mov	r7,r16
81118b4c:	b009883a 	mov	r4,r22
81118b50:	8a000005 	stb	r8,0(r17)
81118b54:	111ce600 	call	8111ce60 <_mbrtowc_r>
81118b58:	017fffc4 	movi	r5,-1
81118b5c:	11404e26 	beq	r2,r5,81118c98 <__svfscanf_r+0x8f8>
81118b60:	1000601e 	bne	r2,zero,81118ce4 <__svfscanf_r+0x944>
81118b64:	da009f17 	ldw	r8,636(sp)
81118b68:	4000641e 	bne	r8,zero,81118cfc <__svfscanf_r+0x95c>
81118b6c:	a0000015 	stw	zero,0(r20)
81118b70:	9425883a 	add	r18,r18,r16
81118b74:	9967883a 	add	r19,r19,r5
81118b78:	a5000104 	addi	r20,r20,4
81118b7c:	e0800117 	ldw	r2,4(fp)
81118b80:	0023883a 	mov	r17,zero
81118b84:	00804b16 	blt	zero,r2,81118cb4 <__svfscanf_r+0x914>
81118b88:	e00b883a 	mov	r5,fp
81118b8c:	b009883a 	mov	r4,r22
81118b90:	11136800 	call	81113680 <__srefill_r>
81118b94:	10004726 	beq	r2,zero,81118cb4 <__svfscanf_r+0x914>
81118b98:	88003f1e 	bne	r17,zero,81118c98 <__svfscanf_r+0x8f8>
81118b9c:	d8c09f17 	ldw	r3,636(sp)
81118ba0:	1800031e 	bne	r3,zero,81118bb0 <__svfscanf_r+0x810>
81118ba4:	da00a017 	ldw	r8,640(sp)
81118ba8:	42000044 	addi	r8,r8,1
81118bac:	da00a015 	stw	r8,640(sp)
81118bb0:	dd009d17 	ldw	r20,628(sp)
81118bb4:	a00d883a 	mov	r6,r20
81118bb8:	003e3706 	br	81118498 <__reset+0xfb0f8498>
81118bbc:	8c40040c 	andi	r17,r17,16
81118bc0:	04ffffc4 	movi	r19,-1
81118bc4:	883fa61e 	bne	r17,zero,81118a60 <__reset+0xfb0f8a60>
81118bc8:	da009c17 	ldw	r8,624(sp)
81118bcc:	9abfffc4 	addi	r10,r19,-1
81118bd0:	44000017 	ldw	r16,0(r8)
81118bd4:	44400104 	addi	r17,r8,4
81118bd8:	8007883a 	mov	r3,r16
81118bdc:	82ab883a 	add	r21,r16,r10
81118be0:	00000306 	br	81118bf0 <__svfscanf_r+0x850>
81118be4:	e1000017 	ldw	r4,0(fp)
81118be8:	9807883a 	mov	r3,r19
81118bec:	20800003 	ldbu	r2,0(r4)
81118bf0:	10803fcc 	andi	r2,r2,255
81118bf4:	d9405884 	addi	r5,sp,354
81118bf8:	2885883a 	add	r2,r5,r2
81118bfc:	10800007 	ldb	r2,0(r2)
81118c00:	10004b26 	beq	r2,zero,81118d30 <__svfscanf_r+0x990>
81118c04:	e0800117 	ldw	r2,4(fp)
81118c08:	21400044 	addi	r5,r4,1
81118c0c:	e1400015 	stw	r5,0(fp)
81118c10:	10bfffc4 	addi	r2,r2,-1
81118c14:	e0800115 	stw	r2,4(fp)
81118c18:	20800003 	ldbu	r2,0(r4)
81118c1c:	1cc00044 	addi	r19,r3,1
81118c20:	18800005 	stb	r2,0(r3)
81118c24:	1d400726 	beq	r3,r21,81118c44 <__svfscanf_r+0x8a4>
81118c28:	e0800117 	ldw	r2,4(fp)
81118c2c:	00bfed16 	blt	zero,r2,81118be4 <__reset+0xfb0f8be4>
81118c30:	e00b883a 	mov	r5,fp
81118c34:	b009883a 	mov	r4,r22
81118c38:	11136800 	call	81113680 <__srefill_r>
81118c3c:	103fe926 	beq	r2,zero,81118be4 <__reset+0xfb0f8be4>
81118c40:	84c01526 	beq	r16,r19,81118c98 <__svfscanf_r+0x8f8>
81118c44:	9c21c83a 	sub	r16,r19,r16
81118c48:	803e1726 	beq	r16,zero,811184a8 <__reset+0xfb0f84a8>
81118c4c:	da00a017 	ldw	r8,640(sp)
81118c50:	98000005 	stb	zero,0(r19)
81118c54:	dc409c15 	stw	r17,624(sp)
81118c58:	42000044 	addi	r8,r8,1
81118c5c:	da00a015 	stw	r8,640(sp)
81118c60:	9425883a 	add	r18,r18,r16
81118c64:	a00d883a 	mov	r6,r20
81118c68:	003e0b06 	br	81118498 <__reset+0xfb0f8498>
81118c6c:	017fff84 	movi	r5,-2
81118c70:	11439b1e 	bne	r2,r5,81119ae0 <__svfscanf_r+0x1740>
81118c74:	8821883a 	mov	r16,r17
81118c78:	e0800117 	ldw	r2,4(fp)
81118c7c:	0082e516 	blt	zero,r2,81119814 <__svfscanf_r+0x1474>
81118c80:	e00b883a 	mov	r5,fp
81118c84:	b009883a 	mov	r4,r22
81118c88:	11136800 	call	81113680 <__srefill_r>
81118c8c:	1002e126 	beq	r2,zero,81119814 <__svfscanf_r+0x1474>
81118c90:	dc409f17 	ldw	r17,636(sp)
81118c94:	8002e826 	beq	r16,zero,81119838 <__svfscanf_r+0x1498>
81118c98:	da00a017 	ldw	r8,640(sp)
81118c9c:	403e9c26 	beq	r8,zero,81118710 <__reset+0xfb0f8710>
81118ca0:	e080030b 	ldhu	r2,12(fp)
81118ca4:	1080100c 	andi	r2,r2,64
81118ca8:	103e991e 	bne	r2,zero,81118710 <__reset+0xfb0f8710>
81118cac:	4005883a 	mov	r2,r8
81118cb0:	003e9806 	br	81118714 <__reset+0xfb0f8714>
81118cb4:	983f951e 	bne	r19,zero,81118b0c <__reset+0xfb0f8b0c>
81118cb8:	003fb806 	br	81118b9c <__reset+0xfb0f8b9c>
81118cbc:	da009c17 	ldw	r8,624(sp)
81118cc0:	45000017 	ldw	r20,0(r8)
81118cc4:	42000104 	addi	r8,r8,4
81118cc8:	da009c15 	stw	r8,624(sp)
81118ccc:	003f8e06 	br	81118b08 <__reset+0xfb0f8b08>
81118cd0:	e00b883a 	mov	r5,fp
81118cd4:	b009883a 	mov	r4,r22
81118cd8:	11136800 	call	81113680 <__srefill_r>
81118cdc:	103f3826 	beq	r2,zero,811189c0 <__reset+0xfb0f89c0>
81118ce0:	003fed06 	br	81118c98 <__reset+0xfb0f8c98>
81118ce4:	00ffff84 	movi	r3,-2
81118ce8:	10c0071e 	bne	r2,r3,81118d08 <__svfscanf_r+0x968>
81118cec:	e0800117 	ldw	r2,4(fp)
81118cf0:	8023883a 	mov	r17,r16
81118cf4:	00bf8516 	blt	zero,r2,81118b0c <__reset+0xfb0f8b0c>
81118cf8:	003fa306 	br	81118b88 <__reset+0xfb0f8b88>
81118cfc:	9425883a 	add	r18,r18,r16
81118d00:	9cffffc4 	addi	r19,r19,-1
81118d04:	003f9d06 	br	81118b7c <__reset+0xfb0f8b7c>
81118d08:	da009f17 	ldw	r8,636(sp)
81118d0c:	9425883a 	add	r18,r18,r16
81118d10:	9cffffc4 	addi	r19,r19,-1
81118d14:	403f9826 	beq	r8,zero,81118b78 <__reset+0xfb0f8b78>
81118d18:	003f9806 	br	81118b7c <__reset+0xfb0f8b7c>
81118d1c:	8023883a 	mov	r17,r16
81118d20:	8821883a 	mov	r16,r17
81118d24:	003fce06 	br	81118c60 <__reset+0xfb0f8c60>
81118d28:	803f3d1e 	bne	r16,zero,81118a20 <__reset+0xfb0f8a20>
81118d2c:	003fda06 	br	81118c98 <__reset+0xfb0f8c98>
81118d30:	1827883a 	mov	r19,r3
81118d34:	003fc306 	br	81118c44 <__reset+0xfb0f8c44>
81118d38:	803fc91e 	bne	r16,zero,81118c60 <__reset+0xfb0f8c60>
81118d3c:	003dda06 	br	811184a8 <__reset+0xfb0f84a8>
81118d40:	da009c17 	ldw	r8,624(sp)
81118d44:	df000015 	stw	fp,0(sp)
81118d48:	980f883a 	mov	r7,r19
81118d4c:	41400017 	ldw	r5,0(r8)
81118d50:	01800044 	movi	r6,1
81118d54:	b009883a 	mov	r4,r22
81118d58:	111bf780 	call	8111bf78 <_fread_r>
81118d5c:	da009c17 	ldw	r8,624(sp)
81118d60:	40c00104 	addi	r3,r8,4
81118d64:	103fcc26 	beq	r2,zero,81118c98 <__reset+0xfb0f8c98>
81118d68:	da00a017 	ldw	r8,640(sp)
81118d6c:	dd009d17 	ldw	r20,628(sp)
81118d70:	90a5883a 	add	r18,r18,r2
81118d74:	42000044 	addi	r8,r8,1
81118d78:	da00a015 	stw	r8,640(sp)
81118d7c:	d8c09c15 	stw	r3,624(sp)
81118d80:	a00d883a 	mov	r6,r20
81118d84:	003dc406 	br	81118498 <__reset+0xfb0f8498>
81118d88:	e00b883a 	mov	r5,fp
81118d8c:	b009883a 	mov	r4,r22
81118d90:	11136800 	call	81113680 <__srefill_r>
81118d94:	103e5226 	beq	r2,zero,811186e0 <__reset+0xfb0f86e0>
81118d98:	003fbf06 	br	81118c98 <__reset+0xfb0f8c98>
81118d9c:	a0800083 	ldbu	r2,2(r20)
81118da0:	8c400094 	ori	r17,r17,2
81118da4:	a5000084 	addi	r20,r20,2
81118da8:	10c03fcc 	andi	r3,r2,255
81118dac:	003dc706 	br	811184cc <__reset+0xfb0f84cc>
81118db0:	e0800117 	ldw	r2,4(fp)
81118db4:	88e2b03a 	or	r17,r17,r3
81118db8:	00bef716 	blt	zero,r2,81118998 <__reset+0xfb0f8998>
81118dbc:	003e6f06 	br	8111877c <__reset+0xfb0f877c>
81118dc0:	8880004c 	andi	r2,r17,1
81118dc4:	10000b1e 	bne	r2,zero,81118df4 <__svfscanf_r+0xa54>
81118dc8:	8c40008c 	andi	r17,r17,2
81118dcc:	88000926 	beq	r17,zero,81118df4 <__svfscanf_r+0xa54>
81118dd0:	da009c17 	ldw	r8,624(sp)
81118dd4:	9007d7fa 	srai	r3,r18,31
81118dd8:	dd009d17 	ldw	r20,628(sp)
81118ddc:	40800017 	ldw	r2,0(r8)
81118de0:	42000104 	addi	r8,r8,4
81118de4:	da009c15 	stw	r8,624(sp)
81118de8:	14800015 	stw	r18,0(r2)
81118dec:	10c00115 	stw	r3,4(r2)
81118df0:	003da806 	br	81118494 <__reset+0xfb0f8494>
81118df4:	da009c17 	ldw	r8,624(sp)
81118df8:	dd009d17 	ldw	r20,628(sp)
81118dfc:	40800017 	ldw	r2,0(r8)
81118e00:	42000104 	addi	r8,r8,4
81118e04:	da009c15 	stw	r8,624(sp)
81118e08:	14800015 	stw	r18,0(r2)
81118e0c:	003da106 	br	81118494 <__reset+0xfb0f8494>
81118e10:	e00b883a 	mov	r5,fp
81118e14:	b009883a 	mov	r4,r22
81118e18:	11136800 	call	81113680 <__srefill_r>
81118e1c:	103f9e1e 	bne	r2,zero,81118c98 <__reset+0xfb0f8c98>
81118e20:	b9c00017 	ldw	r7,0(r23)
81118e24:	05000104 	movi	r20,4
81118e28:	003e6306 	br	811187b8 <__reset+0xfb0f87b8>
81118e2c:	e00b883a 	mov	r5,fp
81118e30:	b009883a 	mov	r4,r22
81118e34:	11136800 	call	81113680 <__srefill_r>
81118e38:	103f971e 	bne	r2,zero,81118c98 <__reset+0xfb0f8c98>
81118e3c:	b9c00017 	ldw	r7,0(r23)
81118e40:	003e5706 	br	811187a0 <__reset+0xfb0f87a0>
81118e44:	e00b883a 	mov	r5,fp
81118e48:	b009883a 	mov	r4,r22
81118e4c:	11136800 	call	81113680 <__srefill_r>
81118e50:	103f911e 	bne	r2,zero,81118c98 <__reset+0xfb0f8c98>
81118e54:	b9c00017 	ldw	r7,0(r23)
81118e58:	05000084 	movi	r20,2
81118e5c:	003e5606 	br	811187b8 <__reset+0xfb0f87b8>
81118e60:	e00b883a 	mov	r5,fp
81118e64:	b009883a 	mov	r4,r22
81118e68:	11136800 	call	81113680 <__srefill_r>
81118e6c:	103ef726 	beq	r2,zero,81118a4c <__reset+0xfb0f8a4c>
81118e70:	003f8906 	br	81118c98 <__reset+0xfb0f8c98>
81118e74:	e00b883a 	mov	r5,fp
81118e78:	b009883a 	mov	r4,r22
81118e7c:	11136800 	call	81113680 <__srefill_r>
81118e80:	103f851e 	bne	r2,zero,81118c98 <__reset+0xfb0f8c98>
81118e84:	b9c00017 	ldw	r7,0(r23)
81118e88:	003f0f06 	br	81118ac8 <__reset+0xfb0f8ac8>
81118e8c:	014000c4 	movi	r5,3
81118e90:	a1414a26 	beq	r20,r5,811193bc <__svfscanf_r+0x101c>
81118e94:	01000104 	movi	r4,4
81118e98:	a101f11e 	bne	r20,r4,81119660 <__svfscanf_r+0x12c0>
81118e9c:	b009883a 	mov	r4,r22
81118ea0:	111cdc80 	call	8111cdc8 <_localeconv_r>
81118ea4:	10800017 	ldw	r2,0(r2)
81118ea8:	98ffffc4 	addi	r3,r19,-1
81118eac:	d880a315 	stw	r2,652(sp)
81118eb0:	00805704 	movi	r2,348
81118eb4:	10c21e2e 	bgeu	r2,r3,81119730 <__svfscanf_r+0x1390>
81118eb8:	9cffa8c4 	addi	r19,r19,-349
81118ebc:	dcc0a215 	stw	r19,648(sp)
81118ec0:	04c05744 	movi	r19,349
81118ec4:	8d01e014 	ori	r20,r17,1920
81118ec8:	0023883a 	mov	r17,zero
81118ecc:	dc000104 	addi	r16,sp,4
81118ed0:	8805883a 	mov	r2,r17
81118ed4:	0019883a 	mov	r12,zero
81118ed8:	8023883a 	mov	r17,r16
81118edc:	b007883a 	mov	r3,r22
81118ee0:	9821883a 	mov	r16,r19
81118ee4:	002b883a 	mov	r21,zero
81118ee8:	d800a515 	stw	zero,660(sp)
81118eec:	d800a415 	stw	zero,656(sp)
81118ef0:	d8009f15 	stw	zero,636(sp)
81118ef4:	01c01384 	movi	r7,78
81118ef8:	602d883a 	mov	r22,r12
81118efc:	1027883a 	mov	r19,r2
81118f00:	e1000017 	ldw	r4,0(fp)
81118f04:	21400003 	ldbu	r5,0(r4)
81118f08:	28bff544 	addi	r2,r5,-43
81118f0c:	10803fcc 	andi	r2,r2,255
81118f10:	38810e36 	bltu	r7,r2,8111934c <__svfscanf_r+0xfac>
81118f14:	100490ba 	slli	r2,r2,2
81118f18:	01a044b4 	movhi	r6,33042
81118f1c:	31a3cb04 	addi	r6,r6,-28884
81118f20:	1185883a 	add	r2,r2,r6
81118f24:	10800017 	ldw	r2,0(r2)
81118f28:	1000683a 	jmp	r2
81118f2c:	81119224 	muli	r4,r16,17992
81118f30:	8111934c 	andi	r4,r16,17997
81118f34:	81119224 	muli	r4,r16,17992
81118f38:	8111934c 	andi	r4,r16,17997
81118f3c:	8111934c 	andi	r4,r16,17997
81118f40:	811191f8 	rdprs	r4,r16,17991
81118f44:	81119068 	cmpgeui	r4,r16,17985
81118f48:	81119068 	cmpgeui	r4,r16,17985
81118f4c:	81119068 	cmpgeui	r4,r16,17985
81118f50:	81119068 	cmpgeui	r4,r16,17985
81118f54:	81119068 	cmpgeui	r4,r16,17985
81118f58:	81119068 	cmpgeui	r4,r16,17985
81118f5c:	81119068 	cmpgeui	r4,r16,17985
81118f60:	81119068 	cmpgeui	r4,r16,17985
81118f64:	81119068 	cmpgeui	r4,r16,17985
81118f68:	8111934c 	andi	r4,r16,17997
81118f6c:	8111934c 	andi	r4,r16,17997
81118f70:	8111934c 	andi	r4,r16,17997
81118f74:	8111934c 	andi	r4,r16,17997
81118f78:	8111934c 	andi	r4,r16,17997
81118f7c:	8111934c 	andi	r4,r16,17997
81118f80:	8111934c 	andi	r4,r16,17997
81118f84:	8111933c 	xorhi	r4,r16,17996
81118f88:	8111934c 	andi	r4,r16,17997
81118f8c:	8111934c 	andi	r4,r16,17997
81118f90:	8111934c 	andi	r4,r16,17997
81118f94:	811192f8 	rdprs	r4,r16,17995
81118f98:	811192dc 	xori	r4,r16,17995
81118f9c:	8111934c 	andi	r4,r16,17997
81118fa0:	8111934c 	andi	r4,r16,17997
81118fa4:	811192a8 	cmpgeui	r4,r16,17994
81118fa8:	8111934c 	andi	r4,r16,17997
81118fac:	8111934c 	andi	r4,r16,17997
81118fb0:	8111934c 	andi	r4,r16,17997
81118fb4:	8111934c 	andi	r4,r16,17997
81118fb8:	81119270 	cmpltui	r4,r16,17993
81118fbc:	8111934c 	andi	r4,r16,17997
81118fc0:	8111934c 	andi	r4,r16,17997
81118fc4:	8111934c 	andi	r4,r16,17997
81118fc8:	8111934c 	andi	r4,r16,17997
81118fcc:	8111934c 	andi	r4,r16,17997
81118fd0:	81119254 	ori	r4,r16,17993
81118fd4:	8111934c 	andi	r4,r16,17997
81118fd8:	8111934c 	andi	r4,r16,17997
81118fdc:	8111934c 	andi	r4,r16,17997
81118fe0:	8111934c 	andi	r4,r16,17997
81118fe4:	81119238 	rdprs	r4,r16,17992
81118fe8:	8111934c 	andi	r4,r16,17997
81118fec:	8111934c 	andi	r4,r16,17997
81118ff0:	8111934c 	andi	r4,r16,17997
81118ff4:	8111934c 	andi	r4,r16,17997
81118ff8:	8111934c 	andi	r4,r16,17997
81118ffc:	8111934c 	andi	r4,r16,17997
81119000:	8111934c 	andi	r4,r16,17997
81119004:	8111933c 	xorhi	r4,r16,17996
81119008:	8111934c 	andi	r4,r16,17997
8111900c:	8111934c 	andi	r4,r16,17997
81119010:	8111934c 	andi	r4,r16,17997
81119014:	811192f8 	rdprs	r4,r16,17995
81119018:	811192dc 	xori	r4,r16,17995
8111901c:	8111934c 	andi	r4,r16,17997
81119020:	8111934c 	andi	r4,r16,17997
81119024:	811192a8 	cmpgeui	r4,r16,17994
81119028:	8111934c 	andi	r4,r16,17997
8111902c:	8111934c 	andi	r4,r16,17997
81119030:	8111934c 	andi	r4,r16,17997
81119034:	8111934c 	andi	r4,r16,17997
81119038:	81119270 	cmpltui	r4,r16,17993
8111903c:	8111934c 	andi	r4,r16,17997
81119040:	8111934c 	andi	r4,r16,17997
81119044:	8111934c 	andi	r4,r16,17997
81119048:	8111934c 	andi	r4,r16,17997
8111904c:	8111934c 	andi	r4,r16,17997
81119050:	81119254 	ori	r4,r16,17993
81119054:	8111934c 	andi	r4,r16,17997
81119058:	8111934c 	andi	r4,r16,17997
8111905c:	8111934c 	andi	r4,r16,17997
81119060:	8111934c 	andi	r4,r16,17997
81119064:	81119238 	rdprs	r4,r16,17992
81119068:	a8803fcc 	andi	r2,r21,255
8111906c:	1080201c 	xori	r2,r2,128
81119070:	10bfe004 	addi	r2,r2,-128
81119074:	b085883a 	add	r2,r22,r2
81119078:	10000d1e 	bne	r2,zero,811190b0 <__svfscanf_r+0xd10>
8111907c:	00bf9fc4 	movi	r2,-385
81119080:	a0a8703a 	and	r20,r20,r2
81119084:	89400005 	stb	r5,0(r17)
81119088:	8c400044 	addi	r17,r17,1
8111908c:	e0800117 	ldw	r2,4(fp)
81119090:	843fffc4 	addi	r16,r16,-1
81119094:	94800044 	addi	r18,r18,1
81119098:	10bfffc4 	addi	r2,r2,-1
8111909c:	e0800115 	stw	r2,4(fp)
811190a0:	0080b40e 	bge	zero,r2,81119374 <__svfscanf_r+0xfd4>
811190a4:	21000044 	addi	r4,r4,1
811190a8:	e1000015 	stw	r4,0(fp)
811190ac:	803f941e 	bne	r16,zero,81118f00 <__reset+0xfb0f8f00>
811190b0:	8821883a 	mov	r16,r17
811190b4:	b019883a 	mov	r12,r22
811190b8:	9823883a 	mov	r17,r19
811190bc:	182d883a 	mov	r22,r3
811190c0:	9801961e 	bne	r19,zero,8111971c <__svfscanf_r+0x137c>
811190c4:	633fffc4 	addi	r12,r12,-1
811190c8:	00800044 	movi	r2,1
811190cc:	1302882e 	bgeu	r2,r12,81119af0 <__svfscanf_r+0x1750>
811190d0:	a8803fcc 	andi	r2,r21,255
811190d4:	1080201c 	xori	r2,r2,128
811190d8:	10bfe004 	addi	r2,r2,-128
811190dc:	113fffc4 	addi	r4,r2,-1
811190e0:	01400184 	movi	r5,6
811190e4:	29001136 	bltu	r5,r4,8111912c <__svfscanf_r+0xd8c>
811190e8:	01000084 	movi	r4,2
811190ec:	2082900e 	bge	r4,r2,81119b30 <__svfscanf_r+0x1790>
811190f0:	00c000c4 	movi	r3,3
811190f4:	10c00d26 	beq	r2,r3,8111912c <__svfscanf_r+0xd8c>
811190f8:	9425c83a 	sub	r18,r18,r16
811190fc:	1827883a 	mov	r19,r3
81119100:	843fffc4 	addi	r16,r16,-1
81119104:	81400007 	ldb	r5,0(r16)
81119108:	e00d883a 	mov	r6,fp
8111910c:	b009883a 	mov	r4,r22
81119110:	1121ff80 	call	81121ff8 <_ungetc_r>
81119114:	a8bfffc4 	addi	r2,r21,-1
81119118:	10c03fcc 	andi	r3,r2,255
8111911c:	8493883a 	add	r9,r16,r18
81119120:	102b883a 	mov	r21,r2
81119124:	98fff636 	bltu	r19,r3,81119100 <__reset+0xfb0f9100>
81119128:	4825883a 	mov	r18,r9
8111912c:	a080400c 	andi	r2,r20,256
81119130:	10001426 	beq	r2,zero,81119184 <__svfscanf_r+0xde4>
81119134:	a081000c 	andi	r2,r20,1024
81119138:	1002571e 	bne	r2,zero,81119a98 <__svfscanf_r+0x16f8>
8111913c:	817fffc7 	ldb	r5,-1(r16)
81119140:	00801944 	movi	r2,101
81119144:	84ffffc4 	addi	r19,r16,-1
81119148:	957fffc4 	addi	r21,r18,-1
8111914c:	28800826 	beq	r5,r2,81119170 <__svfscanf_r+0xdd0>
81119150:	00801144 	movi	r2,69
81119154:	28800626 	beq	r5,r2,81119170 <__svfscanf_r+0xdd0>
81119158:	e00d883a 	mov	r6,fp
8111915c:	b009883a 	mov	r4,r22
81119160:	1121ff80 	call	81121ff8 <_ungetc_r>
81119164:	817fff87 	ldb	r5,-2(r16)
81119168:	84ffff84 	addi	r19,r16,-2
8111916c:	957fff84 	addi	r21,r18,-2
81119170:	e00d883a 	mov	r6,fp
81119174:	b009883a 	mov	r4,r22
81119178:	1121ff80 	call	81121ff8 <_ungetc_r>
8111917c:	a825883a 	mov	r18,r21
81119180:	9821883a 	mov	r16,r19
81119184:	a080040c 	andi	r2,r20,16
81119188:	103e891e 	bne	r2,zero,81118bb0 <__reset+0xfb0f8bb0>
8111918c:	80000005 	stb	zero,0(r16)
81119190:	a081800c 	andi	r2,r20,1536
81119194:	01010004 	movi	r4,1024
81119198:	1101dd26 	beq	r2,r4,81119910 <__svfscanf_r+0x1570>
8111919c:	da00a417 	ldw	r8,656(sp)
811191a0:	4001e71e 	bne	r8,zero,81119940 <__svfscanf_r+0x15a0>
811191a4:	000d883a 	mov	r6,zero
811191a8:	d9400104 	addi	r5,sp,4
811191ac:	b009883a 	mov	r4,r22
811191b0:	111eba80 	call	8111eba8 <_strtod_r>
811191b4:	1021883a 	mov	r16,r2
811191b8:	a080004c 	andi	r2,r20,1
811191bc:	1000021e 	bne	r2,zero,811191c8 <__svfscanf_r+0xe28>
811191c0:	a2c0008c 	andi	r11,r20,2
811191c4:	5801e826 	beq	r11,zero,81119968 <__svfscanf_r+0x15c8>
811191c8:	da009c17 	ldw	r8,624(sp)
811191cc:	40800017 	ldw	r2,0(r8)
811191d0:	42000104 	addi	r8,r8,4
811191d4:	da009c15 	stw	r8,624(sp)
811191d8:	14000015 	stw	r16,0(r2)
811191dc:	10c00115 	stw	r3,4(r2)
811191e0:	da00a017 	ldw	r8,640(sp)
811191e4:	dd009d17 	ldw	r20,628(sp)
811191e8:	42000044 	addi	r8,r8,1
811191ec:	da00a015 	stw	r8,640(sp)
811191f0:	a00d883a 	mov	r6,r20
811191f4:	003ca806 	br	81118498 <__reset+0xfb0f8498>
811191f8:	a080400c 	andi	r2,r20,256
811191fc:	103f9a26 	beq	r2,zero,81119068 <__reset+0xfb0f9068>
81119200:	da00a217 	ldw	r8,648(sp)
81119204:	00bfdfc4 	movi	r2,-129
81119208:	a0a8703a 	and	r20,r20,r2
8111920c:	9cc00044 	addi	r19,r19,1
81119210:	403f9e26 	beq	r8,zero,8111908c <__reset+0xfb0f908c>
81119214:	423fffc4 	addi	r8,r8,-1
81119218:	da00a215 	stw	r8,648(sp)
8111921c:	84000044 	addi	r16,r16,1
81119220:	003f9a06 	br	8111908c <__reset+0xfb0f908c>
81119224:	a080200c 	andi	r2,r20,128
81119228:	103fa126 	beq	r2,zero,811190b0 <__reset+0xfb0f90b0>
8111922c:	00bfdfc4 	movi	r2,-129
81119230:	a0a8703a 	and	r20,r20,r2
81119234:	003f9306 	br	81119084 <__reset+0xfb0f9084>
81119238:	a8803fcc 	andi	r2,r21,255
8111923c:	1080201c 	xori	r2,r2,128
81119240:	10bfe004 	addi	r2,r2,-128
81119244:	020001c4 	movi	r8,7
81119248:	123f991e 	bne	r2,r8,811190b0 <__reset+0xfb0f90b0>
8111924c:	05400204 	movi	r21,8
81119250:	003f8c06 	br	81119084 <__reset+0xfb0f9084>
81119254:	a8803fcc 	andi	r2,r21,255
81119258:	1080201c 	xori	r2,r2,128
8111925c:	10bfe004 	addi	r2,r2,-128
81119260:	01800184 	movi	r6,6
81119264:	11bf921e 	bne	r2,r6,811190b0 <__reset+0xfb0f90b0>
81119268:	054001c4 	movi	r21,7
8111926c:	003f8506 	br	81119084 <__reset+0xfb0f9084>
81119270:	b000491e 	bne	r22,zero,81119398 <__svfscanf_r+0xff8>
81119274:	9800031e 	bne	r19,zero,81119284 <__svfscanf_r+0xee4>
81119278:	a081c00c 	andi	r2,r20,1792
8111927c:	0181c004 	movi	r6,1792
81119280:	11819f26 	beq	r2,r6,81119900 <__svfscanf_r+0x1560>
81119284:	a8803fcc 	andi	r2,r21,255
81119288:	1080201c 	xori	r2,r2,128
8111928c:	10bfe004 	addi	r2,r2,-128
81119290:	01800044 	movi	r6,1
81119294:	11800226 	beq	r2,r6,811192a0 <__svfscanf_r+0xf00>
81119298:	01800104 	movi	r6,4
8111929c:	11bf841e 	bne	r2,r6,811190b0 <__reset+0xfb0f90b0>
811192a0:	ad400044 	addi	r21,r21,1
811192a4:	003f7706 	br	81119084 <__reset+0xfb0f9084>
811192a8:	a8803fcc 	andi	r2,r21,255
811192ac:	1080201c 	xori	r2,r2,128
811192b0:	10bfe004 	addi	r2,r2,-128
811192b4:	10003c1e 	bne	r2,zero,811193a8 <__svfscanf_r+0x1008>
811192b8:	9801141e 	bne	r19,zero,8111970c <__svfscanf_r+0x136c>
811192bc:	a081c00c 	andi	r2,r20,1792
811192c0:	0181c004 	movi	r6,1792
811192c4:	11818226 	beq	r2,r6,811198d0 <__svfscanf_r+0x1530>
811192c8:	8821883a 	mov	r16,r17
811192cc:	b019883a 	mov	r12,r22
811192d0:	9823883a 	mov	r17,r19
811192d4:	182d883a 	mov	r22,r3
811192d8:	003f7a06 	br	811190c4 <__reset+0xfb0f90c4>
811192dc:	a8803fcc 	andi	r2,r21,255
811192e0:	1080201c 	xori	r2,r2,128
811192e4:	10bfe004 	addi	r2,r2,-128
811192e8:	01800084 	movi	r6,2
811192ec:	11bf701e 	bne	r2,r6,811190b0 <__reset+0xfb0f90b0>
811192f0:	054000c4 	movi	r21,3
811192f4:	003f6306 	br	81119084 <__reset+0xfb0f9084>
811192f8:	a081400c 	andi	r2,r20,1280
811192fc:	01810004 	movi	r6,1024
81119300:	11800326 	beq	r2,r6,81119310 <__svfscanf_r+0xf70>
81119304:	a184703a 	and	r2,r20,r6
81119308:	103f6926 	beq	r2,zero,811190b0 <__reset+0xfb0f90b0>
8111930c:	983fee26 	beq	r19,zero,811192c8 <__reset+0xfb0f92c8>
81119310:	a080800c 	andi	r2,r20,512
81119314:	1000041e 	bne	r2,zero,81119328 <__svfscanf_r+0xf88>
81119318:	da009f17 	ldw	r8,636(sp)
8111931c:	dc40a515 	stw	r17,660(sp)
81119320:	9a27c83a 	sub	r19,r19,r8
81119324:	dcc0a415 	stw	r19,656(sp)
81119328:	00be1fc4 	movi	r2,-1921
8111932c:	a0a8703a 	and	r20,r20,r2
81119330:	a5006014 	ori	r20,r20,384
81119334:	0027883a 	mov	r19,zero
81119338:	003f5206 	br	81119084 <__reset+0xfb0f9084>
8111933c:	00800044 	movi	r2,1
81119340:	b0bf5b1e 	bne	r22,r2,811190b0 <__reset+0xfb0f90b0>
81119344:	05800084 	movi	r22,2
81119348:	003f4e06 	br	81119084 <__reset+0xfb0f9084>
8111934c:	d980a317 	ldw	r6,652(sp)
81119350:	30800003 	ldbu	r2,0(r6)
81119354:	29803fcc 	andi	r6,r5,255
81119358:	30bf551e 	bne	r6,r2,811190b0 <__reset+0xfb0f90b0>
8111935c:	a080800c 	andi	r2,r20,512
81119360:	103f5326 	beq	r2,zero,811190b0 <__reset+0xfb0f90b0>
81119364:	023f5fc4 	movi	r8,-641
81119368:	a228703a 	and	r20,r20,r8
8111936c:	dcc09f15 	stw	r19,636(sp)
81119370:	003f4406 	br	81119084 <__reset+0xfb0f9084>
81119374:	1809883a 	mov	r4,r3
81119378:	e00b883a 	mov	r5,fp
8111937c:	d8c0a615 	stw	r3,664(sp)
81119380:	d9c0aa15 	stw	r7,680(sp)
81119384:	11136800 	call	81113680 <__srefill_r>
81119388:	d8c0a617 	ldw	r3,664(sp)
8111938c:	d9c0aa17 	ldw	r7,680(sp)
81119390:	103f4626 	beq	r2,zero,811190ac <__reset+0xfb0f90ac>
81119394:	003f4606 	br	811190b0 <__reset+0xfb0f90b0>
81119398:	00800084 	movi	r2,2
8111939c:	b0bfb91e 	bne	r22,r2,81119284 <__reset+0xfb0f9284>
811193a0:	058000c4 	movi	r22,3
811193a4:	003f3706 	br	81119084 <__reset+0xfb0f9084>
811193a8:	018000c4 	movi	r6,3
811193ac:	11bfbc26 	beq	r2,r6,811192a0 <__reset+0xfb0f92a0>
811193b0:	01800144 	movi	r6,5
811193b4:	11bfba26 	beq	r2,r6,811192a0 <__reset+0xfb0f92a0>
811193b8:	003f3d06 	br	811190b0 <__reset+0xfb0f90b0>
811193bc:	98bfffc4 	addi	r2,r19,-1
811193c0:	01405704 	movi	r5,348
811193c4:	2880d82e 	bgeu	r5,r2,81119728 <__svfscanf_r+0x1388>
811193c8:	99ffa8c4 	addi	r7,r19,-349
811193cc:	04c05744 	movi	r19,349
811193d0:	8c436014 	ori	r17,r17,3456
811193d4:	9013883a 	mov	r9,r18
811193d8:	8825883a 	mov	r18,r17
811193dc:	dc409e17 	ldw	r17,632(sp)
811193e0:	0029883a 	mov	r20,zero
811193e4:	dc000104 	addi	r16,sp,4
811193e8:	05401344 	movi	r21,77
811193ec:	02c08004 	movi	r11,512
811193f0:	01bf7fc4 	movi	r6,-513
811193f4:	023fdfc4 	movi	r8,-129
811193f8:	20bff544 	addi	r2,r4,-43
811193fc:	10803fcc 	andi	r2,r2,255
81119400:	a8807236 	bltu	r21,r2,811195cc <__svfscanf_r+0x122c>
81119404:	100490ba 	slli	r2,r2,2
81119408:	016044b4 	movhi	r5,33042
8111940c:	29650704 	addi	r5,r5,-27620
81119410:	1145883a 	add	r2,r2,r5
81119414:	10800017 	ldw	r2,0(r2)
81119418:	1000683a 	jmp	r2
8111941c:	81119650 	cmplti	r4,r16,18009
81119420:	811195cc 	andi	r4,r16,18007
81119424:	81119650 	cmplti	r4,r16,18009
81119428:	811195cc 	andi	r4,r16,18007
8111942c:	811195cc 	andi	r4,r16,18007
81119430:	81119628 	cmpgeui	r4,r16,18008
81119434:	81119608 	cmpgei	r4,r16,18008
81119438:	81119608 	cmpgei	r4,r16,18008
8111943c:	81119608 	cmpgei	r4,r16,18008
81119440:	81119608 	cmpgei	r4,r16,18008
81119444:	81119608 	cmpgei	r4,r16,18008
81119448:	81119608 	cmpgei	r4,r16,18008
8111944c:	81119608 	cmpgei	r4,r16,18008
81119450:	811195b0 	cmpltui	r4,r16,18006
81119454:	811195b0 	cmpltui	r4,r16,18006
81119458:	811195cc 	andi	r4,r16,18007
8111945c:	811195cc 	andi	r4,r16,18007
81119460:	811195cc 	andi	r4,r16,18007
81119464:	811195cc 	andi	r4,r16,18007
81119468:	811195cc 	andi	r4,r16,18007
8111946c:	811195cc 	andi	r4,r16,18007
81119470:	811195cc 	andi	r4,r16,18007
81119474:	8111959c 	xori	r4,r16,18006
81119478:	8111959c 	xori	r4,r16,18006
8111947c:	8111959c 	xori	r4,r16,18006
81119480:	8111959c 	xori	r4,r16,18006
81119484:	8111959c 	xori	r4,r16,18006
81119488:	8111959c 	xori	r4,r16,18006
8111948c:	811195cc 	andi	r4,r16,18007
81119490:	811195cc 	andi	r4,r16,18007
81119494:	811195cc 	andi	r4,r16,18007
81119498:	811195cc 	andi	r4,r16,18007
8111949c:	811195cc 	andi	r4,r16,18007
811194a0:	811195cc 	andi	r4,r16,18007
811194a4:	811195cc 	andi	r4,r16,18007
811194a8:	811195cc 	andi	r4,r16,18007
811194ac:	811195cc 	andi	r4,r16,18007
811194b0:	811195cc 	andi	r4,r16,18007
811194b4:	811195cc 	andi	r4,r16,18007
811194b8:	811195cc 	andi	r4,r16,18007
811194bc:	811195cc 	andi	r4,r16,18007
811194c0:	811195cc 	andi	r4,r16,18007
811194c4:	811195cc 	andi	r4,r16,18007
811194c8:	811195cc 	andi	r4,r16,18007
811194cc:	811195cc 	andi	r4,r16,18007
811194d0:	81119554 	ori	r4,r16,18005
811194d4:	811195cc 	andi	r4,r16,18007
811194d8:	811195cc 	andi	r4,r16,18007
811194dc:	811195cc 	andi	r4,r16,18007
811194e0:	811195cc 	andi	r4,r16,18007
811194e4:	811195cc 	andi	r4,r16,18007
811194e8:	811195cc 	andi	r4,r16,18007
811194ec:	811195cc 	andi	r4,r16,18007
811194f0:	811195cc 	andi	r4,r16,18007
811194f4:	8111959c 	xori	r4,r16,18006
811194f8:	8111959c 	xori	r4,r16,18006
811194fc:	8111959c 	xori	r4,r16,18006
81119500:	8111959c 	xori	r4,r16,18006
81119504:	8111959c 	xori	r4,r16,18006
81119508:	8111959c 	xori	r4,r16,18006
8111950c:	811195cc 	andi	r4,r16,18007
81119510:	811195cc 	andi	r4,r16,18007
81119514:	811195cc 	andi	r4,r16,18007
81119518:	811195cc 	andi	r4,r16,18007
8111951c:	811195cc 	andi	r4,r16,18007
81119520:	811195cc 	andi	r4,r16,18007
81119524:	811195cc 	andi	r4,r16,18007
81119528:	811195cc 	andi	r4,r16,18007
8111952c:	811195cc 	andi	r4,r16,18007
81119530:	811195cc 	andi	r4,r16,18007
81119534:	811195cc 	andi	r4,r16,18007
81119538:	811195cc 	andi	r4,r16,18007
8111953c:	811195cc 	andi	r4,r16,18007
81119540:	811195cc 	andi	r4,r16,18007
81119544:	811195cc 	andi	r4,r16,18007
81119548:	811195cc 	andi	r4,r16,18007
8111954c:	811195cc 	andi	r4,r16,18007
81119550:	81119554 	ori	r4,r16,18005
81119554:	9081800c 	andi	r2,r18,1536
81119558:	12c01c1e 	bne	r2,r11,811195cc <__svfscanf_r+0x122c>
8111955c:	91a4703a 	and	r18,r18,r6
81119560:	94814014 	ori	r18,r18,1280
81119564:	04400404 	movi	r17,16
81119568:	81000005 	stb	r4,0(r16)
8111956c:	84000044 	addi	r16,r16,1
81119570:	e0800117 	ldw	r2,4(fp)
81119574:	10bfffc4 	addi	r2,r2,-1
81119578:	e0800115 	stw	r2,4(fp)
8111957c:	0080540e 	bge	zero,r2,811196d0 <__svfscanf_r+0x1330>
81119580:	18c00044 	addi	r3,r3,1
81119584:	e0c00015 	stw	r3,0(fp)
81119588:	9cffffc4 	addi	r19,r19,-1
8111958c:	98000f26 	beq	r19,zero,811195cc <__svfscanf_r+0x122c>
81119590:	e0c00017 	ldw	r3,0(fp)
81119594:	19000003 	ldbu	r4,0(r3)
81119598:	003f9706 	br	811193f8 <__reset+0xfb0f93f8>
8111959c:	00800284 	movi	r2,10
811195a0:	14400a0e 	bge	r2,r17,811195cc <__svfscanf_r+0x122c>
811195a4:	00bd1fc4 	movi	r2,-2945
811195a8:	90a4703a 	and	r18,r18,r2
811195ac:	003fee06 	br	81119568 <__reset+0xfb0f9568>
811195b0:	01604534 	movhi	r5,33044
811195b4:	8c63883a 	add	r17,r17,r17
811195b8:	2940dd84 	addi	r5,r5,886
811195bc:	2c45883a 	add	r2,r5,r17
811195c0:	1440000f 	ldh	r17,0(r2)
811195c4:	00800204 	movi	r2,8
811195c8:	147ff616 	blt	r2,r17,811195a4 <__reset+0xfb0f95a4>
811195cc:	dc409e15 	stw	r17,632(sp)
811195d0:	9023883a 	mov	r17,r18
811195d4:	8880400c 	andi	r2,r17,256
811195d8:	4825883a 	mov	r18,r9
811195dc:	10000426 	beq	r2,zero,811195f0 <__svfscanf_r+0x1250>
811195e0:	d9800104 	addi	r6,sp,4
811195e4:	3400be36 	bltu	r6,r16,811198e0 <__svfscanf_r+0x1540>
811195e8:	da000104 	addi	r8,sp,4
811195ec:	443bae26 	beq	r8,r16,811184a8 <__reset+0xfb0f84a8>
811195f0:	8880040c 	andi	r2,r17,16
811195f4:	10009326 	beq	r2,zero,81119844 <__svfscanf_r+0x14a4>
811195f8:	d8800104 	addi	r2,sp,4
811195fc:	80a1c83a 	sub	r16,r16,r2
81119600:	8521883a 	add	r16,r16,r20
81119604:	003d0606 	br	81118a20 <__reset+0xfb0f8a20>
81119608:	01604534 	movhi	r5,33044
8111960c:	8c63883a 	add	r17,r17,r17
81119610:	2940dd84 	addi	r5,r5,886
81119614:	2c45883a 	add	r2,r5,r17
81119618:	1440000f 	ldh	r17,0(r2)
8111961c:	00bd1fc4 	movi	r2,-2945
81119620:	90a4703a 	and	r18,r18,r2
81119624:	003fd006 	br	81119568 <__reset+0xfb0f9568>
81119628:	9082000c 	andi	r2,r18,2048
8111962c:	103fce26 	beq	r2,zero,81119568 <__reset+0xfb0f9568>
81119630:	8800021e 	bne	r17,zero,8111963c <__svfscanf_r+0x129c>
81119634:	94808014 	ori	r18,r18,512
81119638:	04400204 	movi	r17,8
8111963c:	9081000c 	andi	r2,r18,1024
81119640:	10009426 	beq	r2,zero,81119894 <__svfscanf_r+0x14f4>
81119644:	00be9fc4 	movi	r2,-1409
81119648:	90a4703a 	and	r18,r18,r2
8111964c:	003fc606 	br	81119568 <__reset+0xfb0f9568>
81119650:	9080200c 	andi	r2,r18,128
81119654:	103fdd26 	beq	r2,zero,811195cc <__reset+0xfb0f95cc>
81119658:	9224703a 	and	r18,r18,r8
8111965c:	003fc206 	br	81119568 <__reset+0xfb0f9568>
81119660:	9800011e 	bne	r19,zero,81119668 <__svfscanf_r+0x12c8>
81119664:	04ffffc4 	movi	r19,-1
81119668:	8900004c 	andi	r4,r17,1
8111966c:	20005b1e 	bne	r4,zero,811197dc <__svfscanf_r+0x143c>
81119670:	8c40040c 	andi	r17,r17,16
81119674:	88003026 	beq	r17,zero,81119738 <__svfscanf_r+0x1398>
81119678:	0021883a 	mov	r16,zero
8111967c:	00000306 	br	8111968c <__svfscanf_r+0x12ec>
81119680:	18800003 	ldbu	r2,0(r3)
81119684:	3885883a 	add	r2,r7,r2
81119688:	10800043 	ldbu	r2,1(r2)
8111968c:	1080020c 	andi	r2,r2,8
81119690:	103ce31e 	bne	r2,zero,81118a20 <__reset+0xfb0f8a20>
81119694:	e0800117 	ldw	r2,4(fp)
81119698:	18c00044 	addi	r3,r3,1
8111969c:	84000044 	addi	r16,r16,1
811196a0:	10bfffc4 	addi	r2,r2,-1
811196a4:	e0800115 	stw	r2,4(fp)
811196a8:	e0c00015 	stw	r3,0(fp)
811196ac:	84fcdc26 	beq	r16,r19,81118a20 <__reset+0xfb0f8a20>
811196b0:	00bff316 	blt	zero,r2,81119680 <__reset+0xfb0f9680>
811196b4:	e00b883a 	mov	r5,fp
811196b8:	b009883a 	mov	r4,r22
811196bc:	11136800 	call	81113680 <__srefill_r>
811196c0:	103cd71e 	bne	r2,zero,81118a20 <__reset+0xfb0f8a20>
811196c4:	b9c00017 	ldw	r7,0(r23)
811196c8:	e0c00017 	ldw	r3,0(fp)
811196cc:	003fec06 	br	81119680 <__reset+0xfb0f9680>
811196d0:	e00b883a 	mov	r5,fp
811196d4:	b009883a 	mov	r4,r22
811196d8:	d980a715 	stw	r6,668(sp)
811196dc:	d9c0aa15 	stw	r7,680(sp)
811196e0:	da00a815 	stw	r8,672(sp)
811196e4:	da40a915 	stw	r9,676(sp)
811196e8:	dac0a615 	stw	r11,664(sp)
811196ec:	11136800 	call	81113680 <__srefill_r>
811196f0:	d980a717 	ldw	r6,668(sp)
811196f4:	d9c0aa17 	ldw	r7,680(sp)
811196f8:	da00a817 	ldw	r8,672(sp)
811196fc:	da40a917 	ldw	r9,676(sp)
81119700:	dac0a617 	ldw	r11,664(sp)
81119704:	103fa026 	beq	r2,zero,81119588 <__reset+0xfb0f9588>
81119708:	003fb006 	br	811195cc <__reset+0xfb0f95cc>
8111970c:	8821883a 	mov	r16,r17
81119710:	b019883a 	mov	r12,r22
81119714:	9823883a 	mov	r17,r19
81119718:	182d883a 	mov	r22,r3
8111971c:	00bfbfc4 	movi	r2,-257
81119720:	a0a8703a 	and	r20,r20,r2
81119724:	003e6706 	br	811190c4 <__reset+0xfb0f90c4>
81119728:	000f883a 	mov	r7,zero
8111972c:	003f2806 	br	811193d0 <__reset+0xfb0f93d0>
81119730:	d800a215 	stw	zero,648(sp)
81119734:	003de306 	br	81118ec4 <__reset+0xfb0f8ec4>
81119738:	da009c17 	ldw	r8,624(sp)
8111973c:	9abfffc4 	addi	r10,r19,-1
81119740:	44400017 	ldw	r17,0(r8)
81119744:	44000104 	addi	r16,r8,4
81119748:	880b883a 	mov	r5,r17
8111974c:	8aa9883a 	add	r20,r17,r10
81119750:	00000606 	br	8111976c <__svfscanf_r+0x13cc>
81119754:	e0c00017 	ldw	r3,0(fp)
81119758:	b9000017 	ldw	r4,0(r23)
8111975c:	a80b883a 	mov	r5,r21
81119760:	18800003 	ldbu	r2,0(r3)
81119764:	2085883a 	add	r2,r4,r2
81119768:	10800043 	ldbu	r2,1(r2)
8111976c:	1080020c 	andi	r2,r2,8
81119770:	1000551e 	bne	r2,zero,811198c8 <__svfscanf_r+0x1528>
81119774:	e0800117 	ldw	r2,4(fp)
81119778:	19000044 	addi	r4,r3,1
8111977c:	e1000015 	stw	r4,0(fp)
81119780:	10bfffc4 	addi	r2,r2,-1
81119784:	e0800115 	stw	r2,4(fp)
81119788:	18800003 	ldbu	r2,0(r3)
8111978c:	2d400044 	addi	r21,r5,1
81119790:	a827883a 	mov	r19,r21
81119794:	28800005 	stb	r2,0(r5)
81119798:	2d000626 	beq	r5,r20,811197b4 <__svfscanf_r+0x1414>
8111979c:	e0800117 	ldw	r2,4(fp)
811197a0:	00bfec16 	blt	zero,r2,81119754 <__reset+0xfb0f9754>
811197a4:	e00b883a 	mov	r5,fp
811197a8:	b009883a 	mov	r4,r22
811197ac:	11136800 	call	81113680 <__srefill_r>
811197b0:	103fe826 	beq	r2,zero,81119754 <__reset+0xfb0f9754>
811197b4:	da00a017 	ldw	r8,640(sp)
811197b8:	dd009d17 	ldw	r20,628(sp)
811197bc:	9c63c83a 	sub	r17,r19,r17
811197c0:	42000044 	addi	r8,r8,1
811197c4:	98000005 	stb	zero,0(r19)
811197c8:	9465883a 	add	r18,r18,r17
811197cc:	da00a015 	stw	r8,640(sp)
811197d0:	dc009c15 	stw	r16,624(sp)
811197d4:	a00d883a 	mov	r6,r20
811197d8:	003b2f06 	br	81118498 <__reset+0xfb0f8498>
811197dc:	dd409904 	addi	r21,sp,612
811197e0:	8c40040c 	andi	r17,r17,16
811197e4:	01800204 	movi	r6,8
811197e8:	000b883a 	mov	r5,zero
811197ec:	a809883a 	mov	r4,r21
811197f0:	11132040 	call	81113204 <memset>
811197f4:	8800401e 	bne	r17,zero,811198f8 <__svfscanf_r+0x1558>
811197f8:	da009c17 	ldw	r8,624(sp)
811197fc:	45000017 	ldw	r20,0(r8)
81119800:	42000104 	addi	r8,r8,4
81119804:	da009c15 	stw	r8,624(sp)
81119808:	000d883a 	mov	r6,zero
8111980c:	3021883a 	mov	r16,r6
81119810:	dc409f15 	stw	r17,636(sp)
81119814:	e0800017 	ldw	r2,0(fp)
81119818:	b8c00017 	ldw	r3,0(r23)
8111981c:	10800003 	ldbu	r2,0(r2)
81119820:	1885883a 	add	r2,r3,r2
81119824:	10800043 	ldbu	r2,1(r2)
81119828:	1080020c 	andi	r2,r2,8
8111982c:	1000011e 	bne	r2,zero,81119834 <__svfscanf_r+0x1494>
81119830:	9800701e 	bne	r19,zero,811199f4 <__svfscanf_r+0x1654>
81119834:	dc409f17 	ldw	r17,636(sp)
81119838:	883cdd1e 	bne	r17,zero,81118bb0 <__reset+0xfb0f8bb0>
8111983c:	a0000015 	stw	zero,0(r20)
81119840:	003cd806 	br	81118ba4 <__reset+0xfb0f8ba4>
81119844:	d9c09e17 	ldw	r7,632(sp)
81119848:	da00a117 	ldw	r8,644(sp)
8111984c:	000d883a 	mov	r6,zero
81119850:	d9400104 	addi	r5,sp,4
81119854:	b009883a 	mov	r4,r22
81119858:	80000005 	stb	zero,0(r16)
8111985c:	403ee83a 	callr	r8
81119860:	88c0080c 	andi	r3,r17,32
81119864:	1800121e 	bne	r3,zero,811198b0 <__svfscanf_r+0x1510>
81119868:	88c0010c 	andi	r3,r17,4
8111986c:	18004d26 	beq	r3,zero,811199a4 <__svfscanf_r+0x1604>
81119870:	da009c17 	ldw	r8,624(sp)
81119874:	40c00017 	ldw	r3,0(r8)
81119878:	42000104 	addi	r8,r8,4
8111987c:	da009c15 	stw	r8,624(sp)
81119880:	1880000d 	sth	r2,0(r3)
81119884:	da00a017 	ldw	r8,640(sp)
81119888:	42000044 	addi	r8,r8,1
8111988c:	da00a015 	stw	r8,640(sp)
81119890:	003f5906 	br	811195f8 <__reset+0xfb0f95f8>
81119894:	00bf1fc4 	movi	r2,-897
81119898:	90a4703a 	and	r18,r18,r2
8111989c:	38000226 	beq	r7,zero,811198a8 <__svfscanf_r+0x1508>
811198a0:	39ffffc4 	addi	r7,r7,-1
811198a4:	9cc00044 	addi	r19,r19,1
811198a8:	a5000044 	addi	r20,r20,1
811198ac:	003f3006 	br	81119570 <__reset+0xfb0f9570>
811198b0:	da009c17 	ldw	r8,624(sp)
811198b4:	40c00017 	ldw	r3,0(r8)
811198b8:	42000104 	addi	r8,r8,4
811198bc:	da009c15 	stw	r8,624(sp)
811198c0:	18800015 	stw	r2,0(r3)
811198c4:	003fef06 	br	81119884 <__reset+0xfb0f9884>
811198c8:	2827883a 	mov	r19,r5
811198cc:	003fb906 	br	811197b4 <__reset+0xfb0f97b4>
811198d0:	01be1fc4 	movi	r6,-1921
811198d4:	a1a8703a 	and	r20,r20,r6
811198d8:	05400044 	movi	r21,1
811198dc:	003de906 	br	81119084 <__reset+0xfb0f9084>
811198e0:	817fffc7 	ldb	r5,-1(r16)
811198e4:	e00d883a 	mov	r6,fp
811198e8:	b009883a 	mov	r4,r22
811198ec:	843fffc4 	addi	r16,r16,-1
811198f0:	1121ff80 	call	81121ff8 <_ungetc_r>
811198f4:	003f3c06 	br	811195e8 <__reset+0xfb0f95e8>
811198f8:	dd009b04 	addi	r20,sp,620
811198fc:	003fc206 	br	81119808 <__reset+0xfb0f9808>
81119900:	00be1fc4 	movi	r2,-1921
81119904:	a0a8703a 	and	r20,r20,r2
81119908:	05800044 	movi	r22,1
8111990c:	003ddd06 	br	81119084 <__reset+0xfb0f9084>
81119910:	d8c09f17 	ldw	r3,636(sp)
81119914:	88e3c83a 	sub	r17,r17,r3
81119918:	044dc83a 	sub	r6,zero,r17
8111991c:	883e2126 	beq	r17,zero,811191a4 <__reset+0xfb0f91a4>
81119920:	d88055c4 	addi	r2,sp,343
81119924:	80800136 	bltu	r16,r2,8111992c <__svfscanf_r+0x158c>
81119928:	dc005584 	addi	r16,sp,342
8111992c:	01604534 	movhi	r5,33044
81119930:	2940dc04 	addi	r5,r5,880
81119934:	8009883a 	mov	r4,r16
81119938:	11139940 	call	81113994 <sprintf>
8111993c:	003e1906 	br	811191a4 <__reset+0xfb0f91a4>
81119940:	d8c0a517 	ldw	r3,660(sp)
81119944:	000d883a 	mov	r6,zero
81119948:	01c00284 	movi	r7,10
8111994c:	19400044 	addi	r5,r3,1
81119950:	b009883a 	mov	r4,r22
81119954:	1113c840 	call	81113c84 <_strtol_r>
81119958:	da00a417 	ldw	r8,656(sp)
8111995c:	dc00a517 	ldw	r16,660(sp)
81119960:	120dc83a 	sub	r6,r2,r8
81119964:	003fee06 	br	81119920 <__reset+0xfb0f9920>
81119968:	da009c17 	ldw	r8,624(sp)
8111996c:	180b883a 	mov	r5,r3
81119970:	8009883a 	mov	r4,r16
81119974:	45000017 	ldw	r20,0(r8)
81119978:	44400104 	addi	r17,r8,4
8111997c:	d8c0a615 	stw	r3,664(sp)
81119980:	111e9140 	call	8111e914 <__fpclassifyd>
81119984:	d8c0a617 	ldw	r3,664(sp)
81119988:	10006426 	beq	r2,zero,81119b1c <__svfscanf_r+0x177c>
8111998c:	8009883a 	mov	r4,r16
81119990:	180b883a 	mov	r5,r3
81119994:	1111c9c0 	call	81111c9c <__truncdfsf2>
81119998:	a0800015 	stw	r2,0(r20)
8111999c:	dc409c15 	stw	r17,624(sp)
811199a0:	003e0f06 	br	811191e0 <__reset+0xfb0f91e0>
811199a4:	88c0004c 	andi	r3,r17,1
811199a8:	183fc11e 	bne	r3,zero,811198b0 <__reset+0xfb0f98b0>
811199ac:	8c40008c 	andi	r17,r17,2
811199b0:	883fbf26 	beq	r17,zero,811198b0 <__reset+0xfb0f98b0>
811199b4:	da00a117 	ldw	r8,644(sp)
811199b8:	00a044b4 	movhi	r2,33042
811199bc:	10816c04 	addi	r2,r2,1456
811199c0:	d9c09e17 	ldw	r7,632(sp)
811199c4:	000d883a 	mov	r6,zero
811199c8:	d9400104 	addi	r5,sp,4
811199cc:	b009883a 	mov	r4,r22
811199d0:	40806226 	beq	r8,r2,81119b5c <__svfscanf_r+0x17bc>
811199d4:	11202c80 	call	811202c8 <_strtoll_r>
811199d8:	da009c17 	ldw	r8,624(sp)
811199dc:	41000017 	ldw	r4,0(r8)
811199e0:	42000104 	addi	r8,r8,4
811199e4:	da009c15 	stw	r8,624(sp)
811199e8:	20800015 	stw	r2,0(r4)
811199ec:	20c00115 	stw	r3,4(r4)
811199f0:	003fa406 	br	81119884 <__reset+0xfb0f9884>
811199f4:	111cda40 	call	8111cda4 <__locale_mb_cur_max>
811199f8:	80bca726 	beq	r16,r2,81118c98 <__reset+0xfb0f8c98>
811199fc:	e0800017 	ldw	r2,0(fp)
81119a00:	e1000117 	ldw	r4,4(fp)
81119a04:	d8c00104 	addi	r3,sp,4
81119a08:	12000003 	ldbu	r8,0(r2)
81119a0c:	213fffc4 	addi	r4,r4,-1
81119a10:	10800044 	addi	r2,r2,1
81119a14:	e1000115 	stw	r4,4(fp)
81119a18:	e0800015 	stw	r2,0(fp)
81119a1c:	84400044 	addi	r17,r16,1
81119a20:	dd400015 	stw	r21,0(sp)
81119a24:	1c21883a 	add	r16,r3,r16
81119a28:	b009883a 	mov	r4,r22
81119a2c:	880f883a 	mov	r7,r17
81119a30:	180d883a 	mov	r6,r3
81119a34:	a00b883a 	mov	r5,r20
81119a38:	82000005 	stb	r8,0(r16)
81119a3c:	111ce600 	call	8111ce60 <_mbrtowc_r>
81119a40:	013fffc4 	movi	r4,-1
81119a44:	113c9426 	beq	r2,r4,81118c98 <__reset+0xfb0f8c98>
81119a48:	103c881e 	bne	r2,zero,81118c6c <__reset+0xfb0f8c6c>
81119a4c:	a0000015 	stw	zero,0(r20)
81119a50:	0009883a 	mov	r4,zero
81119a54:	111cce40 	call	8111cce4 <iswspace>
81119a58:	10001a26 	beq	r2,zero,81119ac4 <__svfscanf_r+0x1724>
81119a5c:	8821883a 	mov	r16,r17
81119a60:	dc409f17 	ldw	r17,636(sp)
81119a64:	803f7426 	beq	r16,zero,81119838 <__reset+0xfb0f9838>
81119a68:	843fffc4 	addi	r16,r16,-1
81119a6c:	d9800104 	addi	r6,sp,4
81119a70:	342b883a 	add	r21,r6,r16
81119a74:	00000106 	br	81119a7c <__svfscanf_r+0x16dc>
81119a78:	843fffc4 	addi	r16,r16,-1
81119a7c:	a9400003 	ldbu	r5,0(r21)
81119a80:	e00d883a 	mov	r6,fp
81119a84:	b009883a 	mov	r4,r22
81119a88:	1121ff80 	call	81121ff8 <_ungetc_r>
81119a8c:	ad7fffc4 	addi	r21,r21,-1
81119a90:	803ff91e 	bne	r16,zero,81119a78 <__reset+0xfb0f9a78>
81119a94:	003f6806 	br	81119838 <__reset+0xfb0f9838>
81119a98:	d9800104 	addi	r6,sp,4
81119a9c:	802b883a 	mov	r21,r16
81119aa0:	343a812e 	bgeu	r6,r16,811184a8 <__reset+0xfb0f84a8>
81119aa4:	ad7fffc4 	addi	r21,r21,-1
81119aa8:	a9400007 	ldb	r5,0(r21)
81119aac:	e00d883a 	mov	r6,fp
81119ab0:	b009883a 	mov	r4,r22
81119ab4:	1121ff80 	call	81121ff8 <_ungetc_r>
81119ab8:	da000104 	addi	r8,sp,4
81119abc:	457ff91e 	bne	r8,r21,81119aa4 <__reset+0xfb0f9aa4>
81119ac0:	003a7906 	br	811184a8 <__reset+0xfb0f84a8>
81119ac4:	da009f17 	ldw	r8,636(sp)
81119ac8:	9465883a 	add	r18,r18,r17
81119acc:	9cffffc4 	addi	r19,r19,-1
81119ad0:	4000051e 	bne	r8,zero,81119ae8 <__svfscanf_r+0x1748>
81119ad4:	a5000104 	addi	r20,r20,4
81119ad8:	0021883a 	mov	r16,zero
81119adc:	003c6606 	br	81118c78 <__reset+0xfb0f8c78>
81119ae0:	a1000017 	ldw	r4,0(r20)
81119ae4:	003fdb06 	br	81119a54 <__reset+0xfb0f9a54>
81119ae8:	0021883a 	mov	r16,zero
81119aec:	003c6206 	br	81118c78 <__reset+0xfb0f8c78>
81119af0:	d8800104 	addi	r2,sp,4
81119af4:	802b883a 	mov	r21,r16
81119af8:	143a6b2e 	bgeu	r2,r16,811184a8 <__reset+0xfb0f84a8>
81119afc:	ad7fffc4 	addi	r21,r21,-1
81119b00:	a9400007 	ldb	r5,0(r21)
81119b04:	e00d883a 	mov	r6,fp
81119b08:	b009883a 	mov	r4,r22
81119b0c:	1121ff80 	call	81121ff8 <_ungetc_r>
81119b10:	d8c00104 	addi	r3,sp,4
81119b14:	1d7ff91e 	bne	r3,r21,81119afc <__reset+0xfb0f9afc>
81119b18:	003a6306 	br	811184a8 <__reset+0xfb0f84a8>
81119b1c:	0009883a 	mov	r4,zero
81119b20:	111ea580 	call	8111ea58 <nanf>
81119b24:	a0800015 	stw	r2,0(r20)
81119b28:	dc409c15 	stw	r17,624(sp)
81119b2c:	003dac06 	br	811191e0 <__reset+0xfb0f91e0>
81119b30:	d9000104 	addi	r4,sp,4
81119b34:	802b883a 	mov	r21,r16
81119b38:	243a5b2e 	bgeu	r4,r16,811184a8 <__reset+0xfb0f84a8>
81119b3c:	ad7fffc4 	addi	r21,r21,-1
81119b40:	a9400007 	ldb	r5,0(r21)
81119b44:	e00d883a 	mov	r6,fp
81119b48:	b009883a 	mov	r4,r22
81119b4c:	1121ff80 	call	81121ff8 <_ungetc_r>
81119b50:	d9400104 	addi	r5,sp,4
81119b54:	2d7ff91e 	bne	r5,r21,81119b3c <__reset+0xfb0f9b3c>
81119b58:	003a5306 	br	811184a8 <__reset+0xfb0f84a8>
81119b5c:	11208200 	call	81120820 <_strtoull_r>
81119b60:	003f9d06 	br	811199d8 <__reset+0xfb0f99d8>

81119b64 <vfscanf>:
81119b64:	00a04534 	movhi	r2,33044
81119b68:	defffb04 	addi	sp,sp,-20
81119b6c:	108aa604 	addi	r2,r2,10904
81119b70:	de00012e 	bgeu	sp,et,81119b78 <vfscanf+0x14>
81119b74:	003b68fa 	trap	3
81119b78:	dc000215 	stw	r16,8(sp)
81119b7c:	14000017 	ldw	r16,0(r2)
81119b80:	dc400315 	stw	r17,12(sp)
81119b84:	dfc00415 	stw	ra,16(sp)
81119b88:	2023883a 	mov	r17,r4
81119b8c:	80000826 	beq	r16,zero,81119bb0 <vfscanf+0x4c>
81119b90:	80800e17 	ldw	r2,56(r16)
81119b94:	1000061e 	bne	r2,zero,81119bb0 <vfscanf+0x4c>
81119b98:	8009883a 	mov	r4,r16
81119b9c:	d9400015 	stw	r5,0(sp)
81119ba0:	d9800115 	stw	r6,4(sp)
81119ba4:	111be7c0 	call	8111be7c <__sinit>
81119ba8:	d9800117 	ldw	r6,4(sp)
81119bac:	d9400017 	ldw	r5,0(sp)
81119bb0:	300f883a 	mov	r7,r6
81119bb4:	8009883a 	mov	r4,r16
81119bb8:	280d883a 	mov	r6,r5
81119bbc:	880b883a 	mov	r5,r17
81119bc0:	dfc00417 	ldw	ra,16(sp)
81119bc4:	dc400317 	ldw	r17,12(sp)
81119bc8:	dc000217 	ldw	r16,8(sp)
81119bcc:	dec00504 	addi	sp,sp,20
81119bd0:	11183a01 	jmpi	811183a0 <__svfscanf_r>

81119bd4 <__svfscanf>:
81119bd4:	00a04534 	movhi	r2,33044
81119bd8:	108aa604 	addi	r2,r2,10904
81119bdc:	300f883a 	mov	r7,r6
81119be0:	280d883a 	mov	r6,r5
81119be4:	200b883a 	mov	r5,r4
81119be8:	11000017 	ldw	r4,0(r2)
81119bec:	11183a01 	jmpi	811183a0 <__svfscanf_r>

81119bf0 <_vfscanf_r>:
81119bf0:	defffb04 	addi	sp,sp,-20
81119bf4:	de00012e 	bgeu	sp,et,81119bfc <_vfscanf_r+0xc>
81119bf8:	003b68fa 	trap	3
81119bfc:	dc000315 	stw	r16,12(sp)
81119c00:	dfc00415 	stw	ra,16(sp)
81119c04:	2021883a 	mov	r16,r4
81119c08:	20000926 	beq	r4,zero,81119c30 <_vfscanf_r+0x40>
81119c0c:	20800e17 	ldw	r2,56(r4)
81119c10:	1000071e 	bne	r2,zero,81119c30 <_vfscanf_r+0x40>
81119c14:	d9400015 	stw	r5,0(sp)
81119c18:	d9800115 	stw	r6,4(sp)
81119c1c:	d9c00215 	stw	r7,8(sp)
81119c20:	111be7c0 	call	8111be7c <__sinit>
81119c24:	d9c00217 	ldw	r7,8(sp)
81119c28:	d9800117 	ldw	r6,4(sp)
81119c2c:	d9400017 	ldw	r5,0(sp)
81119c30:	8009883a 	mov	r4,r16
81119c34:	dfc00417 	ldw	ra,16(sp)
81119c38:	dc000317 	ldw	r16,12(sp)
81119c3c:	dec00504 	addi	sp,sp,20
81119c40:	11183a01 	jmpi	811183a0 <__svfscanf_r>

81119c44 <__swbuf_r>:
81119c44:	defffb04 	addi	sp,sp,-20
81119c48:	de00012e 	bgeu	sp,et,81119c50 <__swbuf_r+0xc>
81119c4c:	003b68fa 	trap	3
81119c50:	dcc00315 	stw	r19,12(sp)
81119c54:	dc800215 	stw	r18,8(sp)
81119c58:	dc000015 	stw	r16,0(sp)
81119c5c:	dfc00415 	stw	ra,16(sp)
81119c60:	dc400115 	stw	r17,4(sp)
81119c64:	2025883a 	mov	r18,r4
81119c68:	2827883a 	mov	r19,r5
81119c6c:	3021883a 	mov	r16,r6
81119c70:	20000226 	beq	r4,zero,81119c7c <__swbuf_r+0x38>
81119c74:	20800e17 	ldw	r2,56(r4)
81119c78:	10004226 	beq	r2,zero,81119d84 <__swbuf_r+0x140>
81119c7c:	80800617 	ldw	r2,24(r16)
81119c80:	8100030b 	ldhu	r4,12(r16)
81119c84:	80800215 	stw	r2,8(r16)
81119c88:	2080020c 	andi	r2,r4,8
81119c8c:	10003626 	beq	r2,zero,81119d68 <__swbuf_r+0x124>
81119c90:	80c00417 	ldw	r3,16(r16)
81119c94:	18003426 	beq	r3,zero,81119d68 <__swbuf_r+0x124>
81119c98:	2088000c 	andi	r2,r4,8192
81119c9c:	9c403fcc 	andi	r17,r19,255
81119ca0:	10001a26 	beq	r2,zero,81119d0c <__swbuf_r+0xc8>
81119ca4:	80800017 	ldw	r2,0(r16)
81119ca8:	81000517 	ldw	r4,20(r16)
81119cac:	10c7c83a 	sub	r3,r2,r3
81119cb0:	1900200e 	bge	r3,r4,81119d34 <__swbuf_r+0xf0>
81119cb4:	18c00044 	addi	r3,r3,1
81119cb8:	81000217 	ldw	r4,8(r16)
81119cbc:	11400044 	addi	r5,r2,1
81119cc0:	81400015 	stw	r5,0(r16)
81119cc4:	213fffc4 	addi	r4,r4,-1
81119cc8:	81000215 	stw	r4,8(r16)
81119ccc:	14c00005 	stb	r19,0(r2)
81119cd0:	80800517 	ldw	r2,20(r16)
81119cd4:	10c01e26 	beq	r2,r3,81119d50 <__swbuf_r+0x10c>
81119cd8:	8080030b 	ldhu	r2,12(r16)
81119cdc:	1080004c 	andi	r2,r2,1
81119ce0:	10000226 	beq	r2,zero,81119cec <__swbuf_r+0xa8>
81119ce4:	00800284 	movi	r2,10
81119ce8:	88801926 	beq	r17,r2,81119d50 <__swbuf_r+0x10c>
81119cec:	8805883a 	mov	r2,r17
81119cf0:	dfc00417 	ldw	ra,16(sp)
81119cf4:	dcc00317 	ldw	r19,12(sp)
81119cf8:	dc800217 	ldw	r18,8(sp)
81119cfc:	dc400117 	ldw	r17,4(sp)
81119d00:	dc000017 	ldw	r16,0(sp)
81119d04:	dec00504 	addi	sp,sp,20
81119d08:	f800283a 	ret
81119d0c:	81401917 	ldw	r5,100(r16)
81119d10:	00b7ffc4 	movi	r2,-8193
81119d14:	21080014 	ori	r4,r4,8192
81119d18:	2884703a 	and	r2,r5,r2
81119d1c:	80801915 	stw	r2,100(r16)
81119d20:	80800017 	ldw	r2,0(r16)
81119d24:	8100030d 	sth	r4,12(r16)
81119d28:	81000517 	ldw	r4,20(r16)
81119d2c:	10c7c83a 	sub	r3,r2,r3
81119d30:	193fe016 	blt	r3,r4,81119cb4 <__reset+0xfb0f9cb4>
81119d34:	800b883a 	mov	r5,r16
81119d38:	9009883a 	mov	r4,r18
81119d3c:	111ba800 	call	8111ba80 <_fflush_r>
81119d40:	1000071e 	bne	r2,zero,81119d60 <__swbuf_r+0x11c>
81119d44:	80800017 	ldw	r2,0(r16)
81119d48:	00c00044 	movi	r3,1
81119d4c:	003fda06 	br	81119cb8 <__reset+0xfb0f9cb8>
81119d50:	800b883a 	mov	r5,r16
81119d54:	9009883a 	mov	r4,r18
81119d58:	111ba800 	call	8111ba80 <_fflush_r>
81119d5c:	103fe326 	beq	r2,zero,81119cec <__reset+0xfb0f9cec>
81119d60:	00bfffc4 	movi	r2,-1
81119d64:	003fe206 	br	81119cf0 <__reset+0xfb0f9cf0>
81119d68:	800b883a 	mov	r5,r16
81119d6c:	9009883a 	mov	r4,r18
81119d70:	1119e0c0 	call	81119e0c <__swsetup_r>
81119d74:	103ffa1e 	bne	r2,zero,81119d60 <__reset+0xfb0f9d60>
81119d78:	8100030b 	ldhu	r4,12(r16)
81119d7c:	80c00417 	ldw	r3,16(r16)
81119d80:	003fc506 	br	81119c98 <__reset+0xfb0f9c98>
81119d84:	111be7c0 	call	8111be7c <__sinit>
81119d88:	003fbc06 	br	81119c7c <__reset+0xfb0f9c7c>

81119d8c <__swbuf>:
81119d8c:	00a04534 	movhi	r2,33044
81119d90:	108aa604 	addi	r2,r2,10904
81119d94:	280d883a 	mov	r6,r5
81119d98:	200b883a 	mov	r5,r4
81119d9c:	11000017 	ldw	r4,0(r2)
81119da0:	1119c441 	jmpi	81119c44 <__swbuf_r>

81119da4 <_write_r>:
81119da4:	defffd04 	addi	sp,sp,-12
81119da8:	de00012e 	bgeu	sp,et,81119db0 <_write_r+0xc>
81119dac:	003b68fa 	trap	3
81119db0:	2805883a 	mov	r2,r5
81119db4:	dc000015 	stw	r16,0(sp)
81119db8:	04204534 	movhi	r16,33044
81119dbc:	dc400115 	stw	r17,4(sp)
81119dc0:	300b883a 	mov	r5,r6
81119dc4:	840b0204 	addi	r16,r16,11272
81119dc8:	2023883a 	mov	r17,r4
81119dcc:	380d883a 	mov	r6,r7
81119dd0:	1009883a 	mov	r4,r2
81119dd4:	dfc00215 	stw	ra,8(sp)
81119dd8:	80000015 	stw	zero,0(r16)
81119ddc:	112949c0 	call	8112949c <write>
81119de0:	00ffffc4 	movi	r3,-1
81119de4:	10c00526 	beq	r2,r3,81119dfc <_write_r+0x58>
81119de8:	dfc00217 	ldw	ra,8(sp)
81119dec:	dc400117 	ldw	r17,4(sp)
81119df0:	dc000017 	ldw	r16,0(sp)
81119df4:	dec00304 	addi	sp,sp,12
81119df8:	f800283a 	ret
81119dfc:	80c00017 	ldw	r3,0(r16)
81119e00:	183ff926 	beq	r3,zero,81119de8 <__reset+0xfb0f9de8>
81119e04:	88c00015 	stw	r3,0(r17)
81119e08:	003ff706 	br	81119de8 <__reset+0xfb0f9de8>

81119e0c <__swsetup_r>:
81119e0c:	00a04534 	movhi	r2,33044
81119e10:	defffd04 	addi	sp,sp,-12
81119e14:	108aa604 	addi	r2,r2,10904
81119e18:	de00012e 	bgeu	sp,et,81119e20 <__swsetup_r+0x14>
81119e1c:	003b68fa 	trap	3
81119e20:	dc400115 	stw	r17,4(sp)
81119e24:	2023883a 	mov	r17,r4
81119e28:	11000017 	ldw	r4,0(r2)
81119e2c:	dc000015 	stw	r16,0(sp)
81119e30:	dfc00215 	stw	ra,8(sp)
81119e34:	2821883a 	mov	r16,r5
81119e38:	20000226 	beq	r4,zero,81119e44 <__swsetup_r+0x38>
81119e3c:	20800e17 	ldw	r2,56(r4)
81119e40:	10003126 	beq	r2,zero,81119f08 <__swsetup_r+0xfc>
81119e44:	8080030b 	ldhu	r2,12(r16)
81119e48:	10c0020c 	andi	r3,r2,8
81119e4c:	1009883a 	mov	r4,r2
81119e50:	18000f26 	beq	r3,zero,81119e90 <__swsetup_r+0x84>
81119e54:	80c00417 	ldw	r3,16(r16)
81119e58:	18001526 	beq	r3,zero,81119eb0 <__swsetup_r+0xa4>
81119e5c:	1100004c 	andi	r4,r2,1
81119e60:	20001c1e 	bne	r4,zero,81119ed4 <__swsetup_r+0xc8>
81119e64:	1080008c 	andi	r2,r2,2
81119e68:	1000291e 	bne	r2,zero,81119f10 <__swsetup_r+0x104>
81119e6c:	80800517 	ldw	r2,20(r16)
81119e70:	80800215 	stw	r2,8(r16)
81119e74:	18001c26 	beq	r3,zero,81119ee8 <__swsetup_r+0xdc>
81119e78:	0005883a 	mov	r2,zero
81119e7c:	dfc00217 	ldw	ra,8(sp)
81119e80:	dc400117 	ldw	r17,4(sp)
81119e84:	dc000017 	ldw	r16,0(sp)
81119e88:	dec00304 	addi	sp,sp,12
81119e8c:	f800283a 	ret
81119e90:	2080040c 	andi	r2,r4,16
81119e94:	10002e26 	beq	r2,zero,81119f50 <__swsetup_r+0x144>
81119e98:	2080010c 	andi	r2,r4,4
81119e9c:	10001e1e 	bne	r2,zero,81119f18 <__swsetup_r+0x10c>
81119ea0:	80c00417 	ldw	r3,16(r16)
81119ea4:	20800214 	ori	r2,r4,8
81119ea8:	8080030d 	sth	r2,12(r16)
81119eac:	183feb1e 	bne	r3,zero,81119e5c <__reset+0xfb0f9e5c>
81119eb0:	1100a00c 	andi	r4,r2,640
81119eb4:	01408004 	movi	r5,512
81119eb8:	217fe826 	beq	r4,r5,81119e5c <__reset+0xfb0f9e5c>
81119ebc:	800b883a 	mov	r5,r16
81119ec0:	8809883a 	mov	r4,r17
81119ec4:	11126dc0 	call	811126dc <__smakebuf_r>
81119ec8:	8080030b 	ldhu	r2,12(r16)
81119ecc:	80c00417 	ldw	r3,16(r16)
81119ed0:	003fe206 	br	81119e5c <__reset+0xfb0f9e5c>
81119ed4:	80800517 	ldw	r2,20(r16)
81119ed8:	80000215 	stw	zero,8(r16)
81119edc:	0085c83a 	sub	r2,zero,r2
81119ee0:	80800615 	stw	r2,24(r16)
81119ee4:	183fe41e 	bne	r3,zero,81119e78 <__reset+0xfb0f9e78>
81119ee8:	80c0030b 	ldhu	r3,12(r16)
81119eec:	0005883a 	mov	r2,zero
81119ef0:	1900200c 	andi	r4,r3,128
81119ef4:	203fe126 	beq	r4,zero,81119e7c <__reset+0xfb0f9e7c>
81119ef8:	18c01014 	ori	r3,r3,64
81119efc:	80c0030d 	sth	r3,12(r16)
81119f00:	00bfffc4 	movi	r2,-1
81119f04:	003fdd06 	br	81119e7c <__reset+0xfb0f9e7c>
81119f08:	111be7c0 	call	8111be7c <__sinit>
81119f0c:	003fcd06 	br	81119e44 <__reset+0xfb0f9e44>
81119f10:	0005883a 	mov	r2,zero
81119f14:	003fd606 	br	81119e70 <__reset+0xfb0f9e70>
81119f18:	81400c17 	ldw	r5,48(r16)
81119f1c:	28000626 	beq	r5,zero,81119f38 <__swsetup_r+0x12c>
81119f20:	80801004 	addi	r2,r16,64
81119f24:	28800326 	beq	r5,r2,81119f34 <__swsetup_r+0x128>
81119f28:	8809883a 	mov	r4,r17
81119f2c:	111c3140 	call	8111c314 <_free_r>
81119f30:	8100030b 	ldhu	r4,12(r16)
81119f34:	80000c15 	stw	zero,48(r16)
81119f38:	80c00417 	ldw	r3,16(r16)
81119f3c:	00bff6c4 	movi	r2,-37
81119f40:	1108703a 	and	r4,r2,r4
81119f44:	80000115 	stw	zero,4(r16)
81119f48:	80c00015 	stw	r3,0(r16)
81119f4c:	003fd506 	br	81119ea4 <__reset+0xfb0f9ea4>
81119f50:	00800244 	movi	r2,9
81119f54:	88800015 	stw	r2,0(r17)
81119f58:	20801014 	ori	r2,r4,64
81119f5c:	8080030d 	sth	r2,12(r16)
81119f60:	00bfffc4 	movi	r2,-1
81119f64:	003fc506 	br	81119e7c <__reset+0xfb0f9e7c>

81119f68 <_close_r>:
81119f68:	defffd04 	addi	sp,sp,-12
81119f6c:	de00012e 	bgeu	sp,et,81119f74 <_close_r+0xc>
81119f70:	003b68fa 	trap	3
81119f74:	dc000015 	stw	r16,0(sp)
81119f78:	04204534 	movhi	r16,33044
81119f7c:	dc400115 	stw	r17,4(sp)
81119f80:	840b0204 	addi	r16,r16,11272
81119f84:	2023883a 	mov	r17,r4
81119f88:	2809883a 	mov	r4,r5
81119f8c:	dfc00215 	stw	ra,8(sp)
81119f90:	80000015 	stw	zero,0(r16)
81119f94:	11279dc0 	call	811279dc <close>
81119f98:	00ffffc4 	movi	r3,-1
81119f9c:	10c00526 	beq	r2,r3,81119fb4 <_close_r+0x4c>
81119fa0:	dfc00217 	ldw	ra,8(sp)
81119fa4:	dc400117 	ldw	r17,4(sp)
81119fa8:	dc000017 	ldw	r16,0(sp)
81119fac:	dec00304 	addi	sp,sp,12
81119fb0:	f800283a 	ret
81119fb4:	80c00017 	ldw	r3,0(r16)
81119fb8:	183ff926 	beq	r3,zero,81119fa0 <__reset+0xfb0f9fa0>
81119fbc:	88c00015 	stw	r3,0(r17)
81119fc0:	003ff706 	br	81119fa0 <__reset+0xfb0f9fa0>

81119fc4 <quorem>:
81119fc4:	defff704 	addi	sp,sp,-36
81119fc8:	de00012e 	bgeu	sp,et,81119fd0 <quorem+0xc>
81119fcc:	003b68fa 	trap	3
81119fd0:	dc800215 	stw	r18,8(sp)
81119fd4:	20800417 	ldw	r2,16(r4)
81119fd8:	2c800417 	ldw	r18,16(r5)
81119fdc:	dfc00815 	stw	ra,32(sp)
81119fe0:	ddc00715 	stw	r23,28(sp)
81119fe4:	dd800615 	stw	r22,24(sp)
81119fe8:	dd400515 	stw	r21,20(sp)
81119fec:	dd000415 	stw	r20,16(sp)
81119ff0:	dcc00315 	stw	r19,12(sp)
81119ff4:	dc400115 	stw	r17,4(sp)
81119ff8:	dc000015 	stw	r16,0(sp)
81119ffc:	14807116 	blt	r2,r18,8111a1c4 <quorem+0x200>
8111a000:	94bfffc4 	addi	r18,r18,-1
8111a004:	94ad883a 	add	r22,r18,r18
8111a008:	b5ad883a 	add	r22,r22,r22
8111a00c:	2c400504 	addi	r17,r5,20
8111a010:	8da9883a 	add	r20,r17,r22
8111a014:	25400504 	addi	r21,r4,20
8111a018:	282f883a 	mov	r23,r5
8111a01c:	adad883a 	add	r22,r21,r22
8111a020:	a1400017 	ldw	r5,0(r20)
8111a024:	2021883a 	mov	r16,r4
8111a028:	b1000017 	ldw	r4,0(r22)
8111a02c:	29400044 	addi	r5,r5,1
8111a030:	112569c0 	call	8112569c <__udivsi3>
8111a034:	1027883a 	mov	r19,r2
8111a038:	10002c26 	beq	r2,zero,8111a0ec <quorem+0x128>
8111a03c:	a813883a 	mov	r9,r21
8111a040:	880b883a 	mov	r5,r17
8111a044:	0009883a 	mov	r4,zero
8111a048:	000d883a 	mov	r6,zero
8111a04c:	2a000017 	ldw	r8,0(r5)
8111a050:	49c00017 	ldw	r7,0(r9)
8111a054:	29400104 	addi	r5,r5,4
8111a058:	40bfffcc 	andi	r2,r8,65535
8111a05c:	14c5383a 	mul	r2,r2,r19
8111a060:	4010d43a 	srli	r8,r8,16
8111a064:	38ffffcc 	andi	r3,r7,65535
8111a068:	1105883a 	add	r2,r2,r4
8111a06c:	1008d43a 	srli	r4,r2,16
8111a070:	44d1383a 	mul	r8,r8,r19
8111a074:	198d883a 	add	r6,r3,r6
8111a078:	10ffffcc 	andi	r3,r2,65535
8111a07c:	30c7c83a 	sub	r3,r6,r3
8111a080:	380ed43a 	srli	r7,r7,16
8111a084:	4105883a 	add	r2,r8,r4
8111a088:	180dd43a 	srai	r6,r3,16
8111a08c:	113fffcc 	andi	r4,r2,65535
8111a090:	390fc83a 	sub	r7,r7,r4
8111a094:	398d883a 	add	r6,r7,r6
8111a098:	300e943a 	slli	r7,r6,16
8111a09c:	18ffffcc 	andi	r3,r3,65535
8111a0a0:	1008d43a 	srli	r4,r2,16
8111a0a4:	38ceb03a 	or	r7,r7,r3
8111a0a8:	49c00015 	stw	r7,0(r9)
8111a0ac:	300dd43a 	srai	r6,r6,16
8111a0b0:	4a400104 	addi	r9,r9,4
8111a0b4:	a17fe52e 	bgeu	r20,r5,8111a04c <__reset+0xfb0fa04c>
8111a0b8:	b0800017 	ldw	r2,0(r22)
8111a0bc:	10000b1e 	bne	r2,zero,8111a0ec <quorem+0x128>
8111a0c0:	b0bfff04 	addi	r2,r22,-4
8111a0c4:	a880082e 	bgeu	r21,r2,8111a0e8 <quorem+0x124>
8111a0c8:	b0ffff17 	ldw	r3,-4(r22)
8111a0cc:	18000326 	beq	r3,zero,8111a0dc <quorem+0x118>
8111a0d0:	00000506 	br	8111a0e8 <quorem+0x124>
8111a0d4:	10c00017 	ldw	r3,0(r2)
8111a0d8:	1800031e 	bne	r3,zero,8111a0e8 <quorem+0x124>
8111a0dc:	10bfff04 	addi	r2,r2,-4
8111a0e0:	94bfffc4 	addi	r18,r18,-1
8111a0e4:	a8bffb36 	bltu	r21,r2,8111a0d4 <__reset+0xfb0fa0d4>
8111a0e8:	84800415 	stw	r18,16(r16)
8111a0ec:	b80b883a 	mov	r5,r23
8111a0f0:	8009883a 	mov	r4,r16
8111a0f4:	111dbe40 	call	8111dbe4 <__mcmp>
8111a0f8:	10002616 	blt	r2,zero,8111a194 <quorem+0x1d0>
8111a0fc:	9cc00044 	addi	r19,r19,1
8111a100:	a805883a 	mov	r2,r21
8111a104:	000b883a 	mov	r5,zero
8111a108:	11000017 	ldw	r4,0(r2)
8111a10c:	89800017 	ldw	r6,0(r17)
8111a110:	10800104 	addi	r2,r2,4
8111a114:	20ffffcc 	andi	r3,r4,65535
8111a118:	194b883a 	add	r5,r3,r5
8111a11c:	30ffffcc 	andi	r3,r6,65535
8111a120:	28c7c83a 	sub	r3,r5,r3
8111a124:	300cd43a 	srli	r6,r6,16
8111a128:	2008d43a 	srli	r4,r4,16
8111a12c:	180bd43a 	srai	r5,r3,16
8111a130:	18ffffcc 	andi	r3,r3,65535
8111a134:	2189c83a 	sub	r4,r4,r6
8111a138:	2149883a 	add	r4,r4,r5
8111a13c:	200c943a 	slli	r6,r4,16
8111a140:	8c400104 	addi	r17,r17,4
8111a144:	200bd43a 	srai	r5,r4,16
8111a148:	30c6b03a 	or	r3,r6,r3
8111a14c:	10ffff15 	stw	r3,-4(r2)
8111a150:	a47fed2e 	bgeu	r20,r17,8111a108 <__reset+0xfb0fa108>
8111a154:	9485883a 	add	r2,r18,r18
8111a158:	1085883a 	add	r2,r2,r2
8111a15c:	a887883a 	add	r3,r21,r2
8111a160:	18800017 	ldw	r2,0(r3)
8111a164:	10000b1e 	bne	r2,zero,8111a194 <quorem+0x1d0>
8111a168:	18bfff04 	addi	r2,r3,-4
8111a16c:	a880082e 	bgeu	r21,r2,8111a190 <quorem+0x1cc>
8111a170:	18ffff17 	ldw	r3,-4(r3)
8111a174:	18000326 	beq	r3,zero,8111a184 <quorem+0x1c0>
8111a178:	00000506 	br	8111a190 <quorem+0x1cc>
8111a17c:	10c00017 	ldw	r3,0(r2)
8111a180:	1800031e 	bne	r3,zero,8111a190 <quorem+0x1cc>
8111a184:	10bfff04 	addi	r2,r2,-4
8111a188:	94bfffc4 	addi	r18,r18,-1
8111a18c:	a8bffb36 	bltu	r21,r2,8111a17c <__reset+0xfb0fa17c>
8111a190:	84800415 	stw	r18,16(r16)
8111a194:	9805883a 	mov	r2,r19
8111a198:	dfc00817 	ldw	ra,32(sp)
8111a19c:	ddc00717 	ldw	r23,28(sp)
8111a1a0:	dd800617 	ldw	r22,24(sp)
8111a1a4:	dd400517 	ldw	r21,20(sp)
8111a1a8:	dd000417 	ldw	r20,16(sp)
8111a1ac:	dcc00317 	ldw	r19,12(sp)
8111a1b0:	dc800217 	ldw	r18,8(sp)
8111a1b4:	dc400117 	ldw	r17,4(sp)
8111a1b8:	dc000017 	ldw	r16,0(sp)
8111a1bc:	dec00904 	addi	sp,sp,36
8111a1c0:	f800283a 	ret
8111a1c4:	0005883a 	mov	r2,zero
8111a1c8:	003ff306 	br	8111a198 <__reset+0xfb0fa198>

8111a1cc <_dtoa_r>:
8111a1cc:	deffde04 	addi	sp,sp,-136
8111a1d0:	de00012e 	bgeu	sp,et,8111a1d8 <_dtoa_r+0xc>
8111a1d4:	003b68fa 	trap	3
8111a1d8:	20801017 	ldw	r2,64(r4)
8111a1dc:	df002015 	stw	fp,128(sp)
8111a1e0:	dcc01b15 	stw	r19,108(sp)
8111a1e4:	dc801a15 	stw	r18,104(sp)
8111a1e8:	dc401915 	stw	r17,100(sp)
8111a1ec:	dc001815 	stw	r16,96(sp)
8111a1f0:	dfc02115 	stw	ra,132(sp)
8111a1f4:	ddc01f15 	stw	r23,124(sp)
8111a1f8:	dd801e15 	stw	r22,120(sp)
8111a1fc:	dd401d15 	stw	r21,116(sp)
8111a200:	dd001c15 	stw	r20,112(sp)
8111a204:	d9c00315 	stw	r7,12(sp)
8111a208:	2039883a 	mov	fp,r4
8111a20c:	3023883a 	mov	r17,r6
8111a210:	2825883a 	mov	r18,r5
8111a214:	dc002417 	ldw	r16,144(sp)
8111a218:	3027883a 	mov	r19,r6
8111a21c:	10000826 	beq	r2,zero,8111a240 <_dtoa_r+0x74>
8111a220:	21801117 	ldw	r6,68(r4)
8111a224:	00c00044 	movi	r3,1
8111a228:	100b883a 	mov	r5,r2
8111a22c:	1986983a 	sll	r3,r3,r6
8111a230:	11800115 	stw	r6,4(r2)
8111a234:	10c00215 	stw	r3,8(r2)
8111a238:	111d3940 	call	8111d394 <_Bfree>
8111a23c:	e0001015 	stw	zero,64(fp)
8111a240:	88002e16 	blt	r17,zero,8111a2fc <_dtoa_r+0x130>
8111a244:	80000015 	stw	zero,0(r16)
8111a248:	889ffc2c 	andhi	r2,r17,32752
8111a24c:	00dffc34 	movhi	r3,32752
8111a250:	10c01c26 	beq	r2,r3,8111a2c4 <_dtoa_r+0xf8>
8111a254:	000d883a 	mov	r6,zero
8111a258:	000f883a 	mov	r7,zero
8111a25c:	9009883a 	mov	r4,r18
8111a260:	980b883a 	mov	r5,r19
8111a264:	1126af80 	call	81126af8 <__eqdf2>
8111a268:	10002b1e 	bne	r2,zero,8111a318 <_dtoa_r+0x14c>
8111a26c:	d9c02317 	ldw	r7,140(sp)
8111a270:	00800044 	movi	r2,1
8111a274:	38800015 	stw	r2,0(r7)
8111a278:	d8802517 	ldw	r2,148(sp)
8111a27c:	10019e26 	beq	r2,zero,8111a8f8 <_dtoa_r+0x72c>
8111a280:	d8c02517 	ldw	r3,148(sp)
8111a284:	00a04534 	movhi	r2,33044
8111a288:	1080cb44 	addi	r2,r2,813
8111a28c:	18800015 	stw	r2,0(r3)
8111a290:	10bfffc4 	addi	r2,r2,-1
8111a294:	dfc02117 	ldw	ra,132(sp)
8111a298:	df002017 	ldw	fp,128(sp)
8111a29c:	ddc01f17 	ldw	r23,124(sp)
8111a2a0:	dd801e17 	ldw	r22,120(sp)
8111a2a4:	dd401d17 	ldw	r21,116(sp)
8111a2a8:	dd001c17 	ldw	r20,112(sp)
8111a2ac:	dcc01b17 	ldw	r19,108(sp)
8111a2b0:	dc801a17 	ldw	r18,104(sp)
8111a2b4:	dc401917 	ldw	r17,100(sp)
8111a2b8:	dc001817 	ldw	r16,96(sp)
8111a2bc:	dec02204 	addi	sp,sp,136
8111a2c0:	f800283a 	ret
8111a2c4:	d8c02317 	ldw	r3,140(sp)
8111a2c8:	0089c3c4 	movi	r2,9999
8111a2cc:	18800015 	stw	r2,0(r3)
8111a2d0:	90017726 	beq	r18,zero,8111a8b0 <_dtoa_r+0x6e4>
8111a2d4:	00a04534 	movhi	r2,33044
8111a2d8:	1080e904 	addi	r2,r2,932
8111a2dc:	d9002517 	ldw	r4,148(sp)
8111a2e0:	203fec26 	beq	r4,zero,8111a294 <__reset+0xfb0fa294>
8111a2e4:	10c000c7 	ldb	r3,3(r2)
8111a2e8:	1801781e 	bne	r3,zero,8111a8cc <_dtoa_r+0x700>
8111a2ec:	10c000c4 	addi	r3,r2,3
8111a2f0:	d9802517 	ldw	r6,148(sp)
8111a2f4:	30c00015 	stw	r3,0(r6)
8111a2f8:	003fe606 	br	8111a294 <__reset+0xfb0fa294>
8111a2fc:	04e00034 	movhi	r19,32768
8111a300:	9cffffc4 	addi	r19,r19,-1
8111a304:	00800044 	movi	r2,1
8111a308:	8ce6703a 	and	r19,r17,r19
8111a30c:	80800015 	stw	r2,0(r16)
8111a310:	9823883a 	mov	r17,r19
8111a314:	003fcc06 	br	8111a248 <__reset+0xfb0fa248>
8111a318:	d8800204 	addi	r2,sp,8
8111a31c:	d8800015 	stw	r2,0(sp)
8111a320:	d9c00104 	addi	r7,sp,4
8111a324:	900b883a 	mov	r5,r18
8111a328:	980d883a 	mov	r6,r19
8111a32c:	e009883a 	mov	r4,fp
8111a330:	8820d53a 	srli	r16,r17,20
8111a334:	111dfc00 	call	8111dfc0 <__d2b>
8111a338:	d8800915 	stw	r2,36(sp)
8111a33c:	8001651e 	bne	r16,zero,8111a8d4 <_dtoa_r+0x708>
8111a340:	dd800217 	ldw	r22,8(sp)
8111a344:	dc000117 	ldw	r16,4(sp)
8111a348:	00800804 	movi	r2,32
8111a34c:	b421883a 	add	r16,r22,r16
8111a350:	80c10c84 	addi	r3,r16,1074
8111a354:	10c2d10e 	bge	r2,r3,8111ae9c <_dtoa_r+0xcd0>
8111a358:	00801004 	movi	r2,64
8111a35c:	81010484 	addi	r4,r16,1042
8111a360:	10c7c83a 	sub	r3,r2,r3
8111a364:	9108d83a 	srl	r4,r18,r4
8111a368:	88e2983a 	sll	r17,r17,r3
8111a36c:	2448b03a 	or	r4,r4,r17
8111a370:	11277b80 	call	811277b8 <__floatunsidf>
8111a374:	017f8434 	movhi	r5,65040
8111a378:	01800044 	movi	r6,1
8111a37c:	1009883a 	mov	r4,r2
8111a380:	194b883a 	add	r5,r3,r5
8111a384:	843fffc4 	addi	r16,r16,-1
8111a388:	d9801115 	stw	r6,68(sp)
8111a38c:	000d883a 	mov	r6,zero
8111a390:	01cffe34 	movhi	r7,16376
8111a394:	1126d500 	call	81126d50 <__subdf3>
8111a398:	0198dbf4 	movhi	r6,25455
8111a39c:	01cff4f4 	movhi	r7,16339
8111a3a0:	3190d844 	addi	r6,r6,17249
8111a3a4:	39e1e9c4 	addi	r7,r7,-30809
8111a3a8:	1009883a 	mov	r4,r2
8111a3ac:	180b883a 	mov	r5,r3
8111a3b0:	11114640 	call	81111464 <__muldf3>
8111a3b4:	01a2d874 	movhi	r6,35681
8111a3b8:	01cff1f4 	movhi	r7,16327
8111a3bc:	31b22cc4 	addi	r6,r6,-14157
8111a3c0:	39e28a04 	addi	r7,r7,-30168
8111a3c4:	180b883a 	mov	r5,r3
8111a3c8:	1009883a 	mov	r4,r2
8111a3cc:	11259540 	call	81125954 <__adddf3>
8111a3d0:	8009883a 	mov	r4,r16
8111a3d4:	1029883a 	mov	r20,r2
8111a3d8:	1823883a 	mov	r17,r3
8111a3dc:	11276d40 	call	811276d4 <__floatsidf>
8111a3e0:	019427f4 	movhi	r6,20639
8111a3e4:	01cff4f4 	movhi	r7,16339
8111a3e8:	319e7ec4 	addi	r6,r6,31227
8111a3ec:	39d104c4 	addi	r7,r7,17427
8111a3f0:	1009883a 	mov	r4,r2
8111a3f4:	180b883a 	mov	r5,r3
8111a3f8:	11114640 	call	81111464 <__muldf3>
8111a3fc:	100d883a 	mov	r6,r2
8111a400:	180f883a 	mov	r7,r3
8111a404:	a009883a 	mov	r4,r20
8111a408:	880b883a 	mov	r5,r17
8111a40c:	11259540 	call	81125954 <__adddf3>
8111a410:	1009883a 	mov	r4,r2
8111a414:	180b883a 	mov	r5,r3
8111a418:	1029883a 	mov	r20,r2
8111a41c:	1823883a 	mov	r17,r3
8111a420:	11276540 	call	81127654 <__fixdfsi>
8111a424:	000d883a 	mov	r6,zero
8111a428:	000f883a 	mov	r7,zero
8111a42c:	a009883a 	mov	r4,r20
8111a430:	880b883a 	mov	r5,r17
8111a434:	d8800515 	stw	r2,20(sp)
8111a438:	1126c5c0 	call	81126c5c <__ledf2>
8111a43c:	10028716 	blt	r2,zero,8111ae5c <_dtoa_r+0xc90>
8111a440:	d8c00517 	ldw	r3,20(sp)
8111a444:	00800584 	movi	r2,22
8111a448:	10c27536 	bltu	r2,r3,8111ae20 <_dtoa_r+0xc54>
8111a44c:	180490fa 	slli	r2,r3,3
8111a450:	00e04534 	movhi	r3,33044
8111a454:	18c10404 	addi	r3,r3,1040
8111a458:	1885883a 	add	r2,r3,r2
8111a45c:	11000017 	ldw	r4,0(r2)
8111a460:	11400117 	ldw	r5,4(r2)
8111a464:	900d883a 	mov	r6,r18
8111a468:	980f883a 	mov	r7,r19
8111a46c:	1126b800 	call	81126b80 <__gedf2>
8111a470:	00828d0e 	bge	zero,r2,8111aea8 <_dtoa_r+0xcdc>
8111a474:	d9000517 	ldw	r4,20(sp)
8111a478:	d8000e15 	stw	zero,56(sp)
8111a47c:	213fffc4 	addi	r4,r4,-1
8111a480:	d9000515 	stw	r4,20(sp)
8111a484:	b42dc83a 	sub	r22,r22,r16
8111a488:	b5bfffc4 	addi	r22,r22,-1
8111a48c:	b0026f16 	blt	r22,zero,8111ae4c <_dtoa_r+0xc80>
8111a490:	d8000815 	stw	zero,32(sp)
8111a494:	d9c00517 	ldw	r7,20(sp)
8111a498:	38026416 	blt	r7,zero,8111ae2c <_dtoa_r+0xc60>
8111a49c:	b1ed883a 	add	r22,r22,r7
8111a4a0:	d9c00d15 	stw	r7,52(sp)
8111a4a4:	d8000a15 	stw	zero,40(sp)
8111a4a8:	d9800317 	ldw	r6,12(sp)
8111a4ac:	00800244 	movi	r2,9
8111a4b0:	11811436 	bltu	r2,r6,8111a904 <_dtoa_r+0x738>
8111a4b4:	00800144 	movi	r2,5
8111a4b8:	1184e10e 	bge	r2,r6,8111b840 <_dtoa_r+0x1674>
8111a4bc:	31bfff04 	addi	r6,r6,-4
8111a4c0:	d9800315 	stw	r6,12(sp)
8111a4c4:	0023883a 	mov	r17,zero
8111a4c8:	d9800317 	ldw	r6,12(sp)
8111a4cc:	008000c4 	movi	r2,3
8111a4d0:	30836726 	beq	r6,r2,8111b270 <_dtoa_r+0x10a4>
8111a4d4:	1183410e 	bge	r2,r6,8111b1dc <_dtoa_r+0x1010>
8111a4d8:	d9c00317 	ldw	r7,12(sp)
8111a4dc:	00800104 	movi	r2,4
8111a4e0:	38827c26 	beq	r7,r2,8111aed4 <_dtoa_r+0xd08>
8111a4e4:	00800144 	movi	r2,5
8111a4e8:	3884c41e 	bne	r7,r2,8111b7fc <_dtoa_r+0x1630>
8111a4ec:	00800044 	movi	r2,1
8111a4f0:	d8800b15 	stw	r2,44(sp)
8111a4f4:	d8c00517 	ldw	r3,20(sp)
8111a4f8:	d9002217 	ldw	r4,136(sp)
8111a4fc:	1907883a 	add	r3,r3,r4
8111a500:	19800044 	addi	r6,r3,1
8111a504:	d8c00c15 	stw	r3,48(sp)
8111a508:	d9800615 	stw	r6,24(sp)
8111a50c:	0183a40e 	bge	zero,r6,8111b3a0 <_dtoa_r+0x11d4>
8111a510:	d9800617 	ldw	r6,24(sp)
8111a514:	3021883a 	mov	r16,r6
8111a518:	e0001115 	stw	zero,68(fp)
8111a51c:	008005c4 	movi	r2,23
8111a520:	1184c92e 	bgeu	r2,r6,8111b848 <_dtoa_r+0x167c>
8111a524:	00c00044 	movi	r3,1
8111a528:	00800104 	movi	r2,4
8111a52c:	1085883a 	add	r2,r2,r2
8111a530:	11000504 	addi	r4,r2,20
8111a534:	180b883a 	mov	r5,r3
8111a538:	18c00044 	addi	r3,r3,1
8111a53c:	313ffb2e 	bgeu	r6,r4,8111a52c <__reset+0xfb0fa52c>
8111a540:	e1401115 	stw	r5,68(fp)
8111a544:	e009883a 	mov	r4,fp
8111a548:	111d2e40 	call	8111d2e4 <_Balloc>
8111a54c:	d8800715 	stw	r2,28(sp)
8111a550:	e0801015 	stw	r2,64(fp)
8111a554:	00800384 	movi	r2,14
8111a558:	1400f736 	bltu	r2,r16,8111a938 <_dtoa_r+0x76c>
8111a55c:	8800f626 	beq	r17,zero,8111a938 <_dtoa_r+0x76c>
8111a560:	d9c00517 	ldw	r7,20(sp)
8111a564:	01c39a0e 	bge	zero,r7,8111b3d0 <_dtoa_r+0x1204>
8111a568:	388003cc 	andi	r2,r7,15
8111a56c:	100490fa 	slli	r2,r2,3
8111a570:	382bd13a 	srai	r21,r7,4
8111a574:	00e04534 	movhi	r3,33044
8111a578:	18c10404 	addi	r3,r3,1040
8111a57c:	1885883a 	add	r2,r3,r2
8111a580:	a8c0040c 	andi	r3,r21,16
8111a584:	12400017 	ldw	r9,0(r2)
8111a588:	12000117 	ldw	r8,4(r2)
8111a58c:	18037926 	beq	r3,zero,8111b374 <_dtoa_r+0x11a8>
8111a590:	00a04534 	movhi	r2,33044
8111a594:	1080fa04 	addi	r2,r2,1000
8111a598:	11800817 	ldw	r6,32(r2)
8111a59c:	11c00917 	ldw	r7,36(r2)
8111a5a0:	9009883a 	mov	r4,r18
8111a5a4:	980b883a 	mov	r5,r19
8111a5a8:	da001715 	stw	r8,92(sp)
8111a5ac:	da401615 	stw	r9,88(sp)
8111a5b0:	11262080 	call	81126208 <__divdf3>
8111a5b4:	da001717 	ldw	r8,92(sp)
8111a5b8:	da401617 	ldw	r9,88(sp)
8111a5bc:	ad4003cc 	andi	r21,r21,15
8111a5c0:	040000c4 	movi	r16,3
8111a5c4:	1023883a 	mov	r17,r2
8111a5c8:	1829883a 	mov	r20,r3
8111a5cc:	a8001126 	beq	r21,zero,8111a614 <_dtoa_r+0x448>
8111a5d0:	05e04534 	movhi	r23,33044
8111a5d4:	bdc0fa04 	addi	r23,r23,1000
8111a5d8:	4805883a 	mov	r2,r9
8111a5dc:	4007883a 	mov	r3,r8
8111a5e0:	a980004c 	andi	r6,r21,1
8111a5e4:	1009883a 	mov	r4,r2
8111a5e8:	a82bd07a 	srai	r21,r21,1
8111a5ec:	180b883a 	mov	r5,r3
8111a5f0:	30000426 	beq	r6,zero,8111a604 <_dtoa_r+0x438>
8111a5f4:	b9800017 	ldw	r6,0(r23)
8111a5f8:	b9c00117 	ldw	r7,4(r23)
8111a5fc:	84000044 	addi	r16,r16,1
8111a600:	11114640 	call	81111464 <__muldf3>
8111a604:	bdc00204 	addi	r23,r23,8
8111a608:	a83ff51e 	bne	r21,zero,8111a5e0 <__reset+0xfb0fa5e0>
8111a60c:	1013883a 	mov	r9,r2
8111a610:	1811883a 	mov	r8,r3
8111a614:	480d883a 	mov	r6,r9
8111a618:	400f883a 	mov	r7,r8
8111a61c:	8809883a 	mov	r4,r17
8111a620:	a00b883a 	mov	r5,r20
8111a624:	11262080 	call	81126208 <__divdf3>
8111a628:	d8800f15 	stw	r2,60(sp)
8111a62c:	d8c01015 	stw	r3,64(sp)
8111a630:	d8c00e17 	ldw	r3,56(sp)
8111a634:	18000626 	beq	r3,zero,8111a650 <_dtoa_r+0x484>
8111a638:	d9000f17 	ldw	r4,60(sp)
8111a63c:	d9401017 	ldw	r5,64(sp)
8111a640:	000d883a 	mov	r6,zero
8111a644:	01cffc34 	movhi	r7,16368
8111a648:	1126c5c0 	call	81126c5c <__ledf2>
8111a64c:	10040b16 	blt	r2,zero,8111b67c <_dtoa_r+0x14b0>
8111a650:	8009883a 	mov	r4,r16
8111a654:	11276d40 	call	811276d4 <__floatsidf>
8111a658:	d9800f17 	ldw	r6,60(sp)
8111a65c:	d9c01017 	ldw	r7,64(sp)
8111a660:	1009883a 	mov	r4,r2
8111a664:	180b883a 	mov	r5,r3
8111a668:	11114640 	call	81111464 <__muldf3>
8111a66c:	000d883a 	mov	r6,zero
8111a670:	01d00734 	movhi	r7,16412
8111a674:	1009883a 	mov	r4,r2
8111a678:	180b883a 	mov	r5,r3
8111a67c:	11259540 	call	81125954 <__adddf3>
8111a680:	1021883a 	mov	r16,r2
8111a684:	d8800617 	ldw	r2,24(sp)
8111a688:	047f3034 	movhi	r17,64704
8111a68c:	1c63883a 	add	r17,r3,r17
8111a690:	10031826 	beq	r2,zero,8111b2f4 <_dtoa_r+0x1128>
8111a694:	d8c00517 	ldw	r3,20(sp)
8111a698:	db000617 	ldw	r12,24(sp)
8111a69c:	d8c01315 	stw	r3,76(sp)
8111a6a0:	d9000b17 	ldw	r4,44(sp)
8111a6a4:	20038f26 	beq	r4,zero,8111b4e4 <_dtoa_r+0x1318>
8111a6a8:	60bfffc4 	addi	r2,r12,-1
8111a6ac:	100490fa 	slli	r2,r2,3
8111a6b0:	00e04534 	movhi	r3,33044
8111a6b4:	18c10404 	addi	r3,r3,1040
8111a6b8:	1885883a 	add	r2,r3,r2
8111a6bc:	11800017 	ldw	r6,0(r2)
8111a6c0:	11c00117 	ldw	r7,4(r2)
8111a6c4:	d8800717 	ldw	r2,28(sp)
8111a6c8:	0009883a 	mov	r4,zero
8111a6cc:	014ff834 	movhi	r5,16352
8111a6d0:	db001615 	stw	r12,88(sp)
8111a6d4:	15c00044 	addi	r23,r2,1
8111a6d8:	11262080 	call	81126208 <__divdf3>
8111a6dc:	800d883a 	mov	r6,r16
8111a6e0:	880f883a 	mov	r7,r17
8111a6e4:	1009883a 	mov	r4,r2
8111a6e8:	180b883a 	mov	r5,r3
8111a6ec:	1126d500 	call	81126d50 <__subdf3>
8111a6f0:	d9401017 	ldw	r5,64(sp)
8111a6f4:	d9000f17 	ldw	r4,60(sp)
8111a6f8:	102b883a 	mov	r21,r2
8111a6fc:	d8c01215 	stw	r3,72(sp)
8111a700:	11276540 	call	81127654 <__fixdfsi>
8111a704:	1009883a 	mov	r4,r2
8111a708:	1029883a 	mov	r20,r2
8111a70c:	11276d40 	call	811276d4 <__floatsidf>
8111a710:	d9000f17 	ldw	r4,60(sp)
8111a714:	d9401017 	ldw	r5,64(sp)
8111a718:	100d883a 	mov	r6,r2
8111a71c:	180f883a 	mov	r7,r3
8111a720:	1126d500 	call	81126d50 <__subdf3>
8111a724:	1823883a 	mov	r17,r3
8111a728:	d8c00717 	ldw	r3,28(sp)
8111a72c:	d9401217 	ldw	r5,72(sp)
8111a730:	a2000c04 	addi	r8,r20,48
8111a734:	1021883a 	mov	r16,r2
8111a738:	1a000005 	stb	r8,0(r3)
8111a73c:	800d883a 	mov	r6,r16
8111a740:	880f883a 	mov	r7,r17
8111a744:	a809883a 	mov	r4,r21
8111a748:	4029883a 	mov	r20,r8
8111a74c:	1126b800 	call	81126b80 <__gedf2>
8111a750:	00841d16 	blt	zero,r2,8111b7c8 <_dtoa_r+0x15fc>
8111a754:	800d883a 	mov	r6,r16
8111a758:	880f883a 	mov	r7,r17
8111a75c:	0009883a 	mov	r4,zero
8111a760:	014ffc34 	movhi	r5,16368
8111a764:	1126d500 	call	81126d50 <__subdf3>
8111a768:	d9401217 	ldw	r5,72(sp)
8111a76c:	100d883a 	mov	r6,r2
8111a770:	180f883a 	mov	r7,r3
8111a774:	a809883a 	mov	r4,r21
8111a778:	1126b800 	call	81126b80 <__gedf2>
8111a77c:	db001617 	ldw	r12,88(sp)
8111a780:	00840e16 	blt	zero,r2,8111b7bc <_dtoa_r+0x15f0>
8111a784:	00800044 	movi	r2,1
8111a788:	13006b0e 	bge	r2,r12,8111a938 <_dtoa_r+0x76c>
8111a78c:	d9000717 	ldw	r4,28(sp)
8111a790:	dd800f15 	stw	r22,60(sp)
8111a794:	dcc01015 	stw	r19,64(sp)
8111a798:	2319883a 	add	r12,r4,r12
8111a79c:	dcc01217 	ldw	r19,72(sp)
8111a7a0:	602d883a 	mov	r22,r12
8111a7a4:	dc801215 	stw	r18,72(sp)
8111a7a8:	b825883a 	mov	r18,r23
8111a7ac:	00000906 	br	8111a7d4 <_dtoa_r+0x608>
8111a7b0:	1126d500 	call	81126d50 <__subdf3>
8111a7b4:	a80d883a 	mov	r6,r21
8111a7b8:	980f883a 	mov	r7,r19
8111a7bc:	1009883a 	mov	r4,r2
8111a7c0:	180b883a 	mov	r5,r3
8111a7c4:	1126c5c0 	call	81126c5c <__ledf2>
8111a7c8:	1003e816 	blt	r2,zero,8111b76c <_dtoa_r+0x15a0>
8111a7cc:	b825883a 	mov	r18,r23
8111a7d0:	bd83e926 	beq	r23,r22,8111b778 <_dtoa_r+0x15ac>
8111a7d4:	a809883a 	mov	r4,r21
8111a7d8:	980b883a 	mov	r5,r19
8111a7dc:	000d883a 	mov	r6,zero
8111a7e0:	01d00934 	movhi	r7,16420
8111a7e4:	11114640 	call	81111464 <__muldf3>
8111a7e8:	000d883a 	mov	r6,zero
8111a7ec:	01d00934 	movhi	r7,16420
8111a7f0:	8009883a 	mov	r4,r16
8111a7f4:	880b883a 	mov	r5,r17
8111a7f8:	102b883a 	mov	r21,r2
8111a7fc:	1827883a 	mov	r19,r3
8111a800:	11114640 	call	81111464 <__muldf3>
8111a804:	180b883a 	mov	r5,r3
8111a808:	1009883a 	mov	r4,r2
8111a80c:	1821883a 	mov	r16,r3
8111a810:	1023883a 	mov	r17,r2
8111a814:	11276540 	call	81127654 <__fixdfsi>
8111a818:	1009883a 	mov	r4,r2
8111a81c:	1029883a 	mov	r20,r2
8111a820:	11276d40 	call	811276d4 <__floatsidf>
8111a824:	8809883a 	mov	r4,r17
8111a828:	800b883a 	mov	r5,r16
8111a82c:	100d883a 	mov	r6,r2
8111a830:	180f883a 	mov	r7,r3
8111a834:	1126d500 	call	81126d50 <__subdf3>
8111a838:	a5000c04 	addi	r20,r20,48
8111a83c:	a80d883a 	mov	r6,r21
8111a840:	980f883a 	mov	r7,r19
8111a844:	1009883a 	mov	r4,r2
8111a848:	180b883a 	mov	r5,r3
8111a84c:	95000005 	stb	r20,0(r18)
8111a850:	1021883a 	mov	r16,r2
8111a854:	1823883a 	mov	r17,r3
8111a858:	1126c5c0 	call	81126c5c <__ledf2>
8111a85c:	bdc00044 	addi	r23,r23,1
8111a860:	800d883a 	mov	r6,r16
8111a864:	880f883a 	mov	r7,r17
8111a868:	0009883a 	mov	r4,zero
8111a86c:	014ffc34 	movhi	r5,16368
8111a870:	103fcf0e 	bge	r2,zero,8111a7b0 <__reset+0xfb0fa7b0>
8111a874:	d8c01317 	ldw	r3,76(sp)
8111a878:	d8c00515 	stw	r3,20(sp)
8111a87c:	d9400917 	ldw	r5,36(sp)
8111a880:	e009883a 	mov	r4,fp
8111a884:	111d3940 	call	8111d394 <_Bfree>
8111a888:	d9000517 	ldw	r4,20(sp)
8111a88c:	d9802317 	ldw	r6,140(sp)
8111a890:	d9c02517 	ldw	r7,148(sp)
8111a894:	b8000005 	stb	zero,0(r23)
8111a898:	20800044 	addi	r2,r4,1
8111a89c:	30800015 	stw	r2,0(r6)
8111a8a0:	3802aa26 	beq	r7,zero,8111b34c <_dtoa_r+0x1180>
8111a8a4:	3dc00015 	stw	r23,0(r7)
8111a8a8:	d8800717 	ldw	r2,28(sp)
8111a8ac:	003e7906 	br	8111a294 <__reset+0xfb0fa294>
8111a8b0:	00800434 	movhi	r2,16
8111a8b4:	10bfffc4 	addi	r2,r2,-1
8111a8b8:	88a2703a 	and	r17,r17,r2
8111a8bc:	883e851e 	bne	r17,zero,8111a2d4 <__reset+0xfb0fa2d4>
8111a8c0:	00a04534 	movhi	r2,33044
8111a8c4:	1080e604 	addi	r2,r2,920
8111a8c8:	003e8406 	br	8111a2dc <__reset+0xfb0fa2dc>
8111a8cc:	10c00204 	addi	r3,r2,8
8111a8d0:	003e8706 	br	8111a2f0 <__reset+0xfb0fa2f0>
8111a8d4:	01400434 	movhi	r5,16
8111a8d8:	297fffc4 	addi	r5,r5,-1
8111a8dc:	994a703a 	and	r5,r19,r5
8111a8e0:	9009883a 	mov	r4,r18
8111a8e4:	843f0044 	addi	r16,r16,-1023
8111a8e8:	294ffc34 	orhi	r5,r5,16368
8111a8ec:	dd800217 	ldw	r22,8(sp)
8111a8f0:	d8001115 	stw	zero,68(sp)
8111a8f4:	003ea506 	br	8111a38c <__reset+0xfb0fa38c>
8111a8f8:	00a04534 	movhi	r2,33044
8111a8fc:	1080cb04 	addi	r2,r2,812
8111a900:	003e6406 	br	8111a294 <__reset+0xfb0fa294>
8111a904:	e0001115 	stw	zero,68(fp)
8111a908:	000b883a 	mov	r5,zero
8111a90c:	e009883a 	mov	r4,fp
8111a910:	111d2e40 	call	8111d2e4 <_Balloc>
8111a914:	01bfffc4 	movi	r6,-1
8111a918:	01c00044 	movi	r7,1
8111a91c:	d8800715 	stw	r2,28(sp)
8111a920:	d9800c15 	stw	r6,48(sp)
8111a924:	e0801015 	stw	r2,64(fp)
8111a928:	d8000315 	stw	zero,12(sp)
8111a92c:	d9c00b15 	stw	r7,44(sp)
8111a930:	d9800615 	stw	r6,24(sp)
8111a934:	d8002215 	stw	zero,136(sp)
8111a938:	d8800117 	ldw	r2,4(sp)
8111a93c:	10008916 	blt	r2,zero,8111ab64 <_dtoa_r+0x998>
8111a940:	d9000517 	ldw	r4,20(sp)
8111a944:	00c00384 	movi	r3,14
8111a948:	19008616 	blt	r3,r4,8111ab64 <_dtoa_r+0x998>
8111a94c:	200490fa 	slli	r2,r4,3
8111a950:	00e04534 	movhi	r3,33044
8111a954:	d9802217 	ldw	r6,136(sp)
8111a958:	18c10404 	addi	r3,r3,1040
8111a95c:	1885883a 	add	r2,r3,r2
8111a960:	14000017 	ldw	r16,0(r2)
8111a964:	14400117 	ldw	r17,4(r2)
8111a968:	30016316 	blt	r6,zero,8111aef8 <_dtoa_r+0xd2c>
8111a96c:	800d883a 	mov	r6,r16
8111a970:	880f883a 	mov	r7,r17
8111a974:	9009883a 	mov	r4,r18
8111a978:	980b883a 	mov	r5,r19
8111a97c:	11262080 	call	81126208 <__divdf3>
8111a980:	180b883a 	mov	r5,r3
8111a984:	1009883a 	mov	r4,r2
8111a988:	11276540 	call	81127654 <__fixdfsi>
8111a98c:	1009883a 	mov	r4,r2
8111a990:	102b883a 	mov	r21,r2
8111a994:	11276d40 	call	811276d4 <__floatsidf>
8111a998:	800d883a 	mov	r6,r16
8111a99c:	880f883a 	mov	r7,r17
8111a9a0:	1009883a 	mov	r4,r2
8111a9a4:	180b883a 	mov	r5,r3
8111a9a8:	11114640 	call	81111464 <__muldf3>
8111a9ac:	100d883a 	mov	r6,r2
8111a9b0:	180f883a 	mov	r7,r3
8111a9b4:	9009883a 	mov	r4,r18
8111a9b8:	980b883a 	mov	r5,r19
8111a9bc:	1126d500 	call	81126d50 <__subdf3>
8111a9c0:	d9c00717 	ldw	r7,28(sp)
8111a9c4:	1009883a 	mov	r4,r2
8111a9c8:	a8800c04 	addi	r2,r21,48
8111a9cc:	38800005 	stb	r2,0(r7)
8111a9d0:	3dc00044 	addi	r23,r7,1
8111a9d4:	d9c00617 	ldw	r7,24(sp)
8111a9d8:	01800044 	movi	r6,1
8111a9dc:	180b883a 	mov	r5,r3
8111a9e0:	2005883a 	mov	r2,r4
8111a9e4:	39803826 	beq	r7,r6,8111aac8 <_dtoa_r+0x8fc>
8111a9e8:	000d883a 	mov	r6,zero
8111a9ec:	01d00934 	movhi	r7,16420
8111a9f0:	11114640 	call	81111464 <__muldf3>
8111a9f4:	000d883a 	mov	r6,zero
8111a9f8:	000f883a 	mov	r7,zero
8111a9fc:	1009883a 	mov	r4,r2
8111aa00:	180b883a 	mov	r5,r3
8111aa04:	1025883a 	mov	r18,r2
8111aa08:	1827883a 	mov	r19,r3
8111aa0c:	1126af80 	call	81126af8 <__eqdf2>
8111aa10:	103f9a26 	beq	r2,zero,8111a87c <__reset+0xfb0fa87c>
8111aa14:	d9c00617 	ldw	r7,24(sp)
8111aa18:	d8c00717 	ldw	r3,28(sp)
8111aa1c:	b829883a 	mov	r20,r23
8111aa20:	38bfffc4 	addi	r2,r7,-1
8111aa24:	18ad883a 	add	r22,r3,r2
8111aa28:	00000a06 	br	8111aa54 <_dtoa_r+0x888>
8111aa2c:	11114640 	call	81111464 <__muldf3>
8111aa30:	000d883a 	mov	r6,zero
8111aa34:	000f883a 	mov	r7,zero
8111aa38:	1009883a 	mov	r4,r2
8111aa3c:	180b883a 	mov	r5,r3
8111aa40:	1025883a 	mov	r18,r2
8111aa44:	1827883a 	mov	r19,r3
8111aa48:	b829883a 	mov	r20,r23
8111aa4c:	1126af80 	call	81126af8 <__eqdf2>
8111aa50:	103f8a26 	beq	r2,zero,8111a87c <__reset+0xfb0fa87c>
8111aa54:	800d883a 	mov	r6,r16
8111aa58:	880f883a 	mov	r7,r17
8111aa5c:	9009883a 	mov	r4,r18
8111aa60:	980b883a 	mov	r5,r19
8111aa64:	11262080 	call	81126208 <__divdf3>
8111aa68:	180b883a 	mov	r5,r3
8111aa6c:	1009883a 	mov	r4,r2
8111aa70:	11276540 	call	81127654 <__fixdfsi>
8111aa74:	1009883a 	mov	r4,r2
8111aa78:	102b883a 	mov	r21,r2
8111aa7c:	11276d40 	call	811276d4 <__floatsidf>
8111aa80:	800d883a 	mov	r6,r16
8111aa84:	880f883a 	mov	r7,r17
8111aa88:	1009883a 	mov	r4,r2
8111aa8c:	180b883a 	mov	r5,r3
8111aa90:	11114640 	call	81111464 <__muldf3>
8111aa94:	100d883a 	mov	r6,r2
8111aa98:	180f883a 	mov	r7,r3
8111aa9c:	9009883a 	mov	r4,r18
8111aaa0:	980b883a 	mov	r5,r19
8111aaa4:	1126d500 	call	81126d50 <__subdf3>
8111aaa8:	aa000c04 	addi	r8,r21,48
8111aaac:	a2000005 	stb	r8,0(r20)
8111aab0:	000d883a 	mov	r6,zero
8111aab4:	01d00934 	movhi	r7,16420
8111aab8:	1009883a 	mov	r4,r2
8111aabc:	180b883a 	mov	r5,r3
8111aac0:	a5c00044 	addi	r23,r20,1
8111aac4:	b53fd91e 	bne	r22,r20,8111aa2c <__reset+0xfb0faa2c>
8111aac8:	100d883a 	mov	r6,r2
8111aacc:	180f883a 	mov	r7,r3
8111aad0:	1009883a 	mov	r4,r2
8111aad4:	180b883a 	mov	r5,r3
8111aad8:	11259540 	call	81125954 <__adddf3>
8111aadc:	100d883a 	mov	r6,r2
8111aae0:	180f883a 	mov	r7,r3
8111aae4:	8009883a 	mov	r4,r16
8111aae8:	880b883a 	mov	r5,r17
8111aaec:	1027883a 	mov	r19,r2
8111aaf0:	1825883a 	mov	r18,r3
8111aaf4:	1126c5c0 	call	81126c5c <__ledf2>
8111aaf8:	10000816 	blt	r2,zero,8111ab1c <_dtoa_r+0x950>
8111aafc:	980d883a 	mov	r6,r19
8111ab00:	900f883a 	mov	r7,r18
8111ab04:	8009883a 	mov	r4,r16
8111ab08:	880b883a 	mov	r5,r17
8111ab0c:	1126af80 	call	81126af8 <__eqdf2>
8111ab10:	103f5a1e 	bne	r2,zero,8111a87c <__reset+0xfb0fa87c>
8111ab14:	ad40004c 	andi	r21,r21,1
8111ab18:	a83f5826 	beq	r21,zero,8111a87c <__reset+0xfb0fa87c>
8111ab1c:	bd3fffc3 	ldbu	r20,-1(r23)
8111ab20:	b8bfffc4 	addi	r2,r23,-1
8111ab24:	1007883a 	mov	r3,r2
8111ab28:	01400e44 	movi	r5,57
8111ab2c:	d9800717 	ldw	r6,28(sp)
8111ab30:	00000506 	br	8111ab48 <_dtoa_r+0x97c>
8111ab34:	18ffffc4 	addi	r3,r3,-1
8111ab38:	11824726 	beq	r2,r6,8111b458 <_dtoa_r+0x128c>
8111ab3c:	1d000003 	ldbu	r20,0(r3)
8111ab40:	102f883a 	mov	r23,r2
8111ab44:	10bfffc4 	addi	r2,r2,-1
8111ab48:	a1003fcc 	andi	r4,r20,255
8111ab4c:	2100201c 	xori	r4,r4,128
8111ab50:	213fe004 	addi	r4,r4,-128
8111ab54:	217ff726 	beq	r4,r5,8111ab34 <__reset+0xfb0fab34>
8111ab58:	a2000044 	addi	r8,r20,1
8111ab5c:	12000005 	stb	r8,0(r2)
8111ab60:	003f4606 	br	8111a87c <__reset+0xfb0fa87c>
8111ab64:	d9000b17 	ldw	r4,44(sp)
8111ab68:	2000c826 	beq	r4,zero,8111ae8c <_dtoa_r+0xcc0>
8111ab6c:	d9800317 	ldw	r6,12(sp)
8111ab70:	00c00044 	movi	r3,1
8111ab74:	1980f90e 	bge	r3,r6,8111af5c <_dtoa_r+0xd90>
8111ab78:	d8800617 	ldw	r2,24(sp)
8111ab7c:	d8c00a17 	ldw	r3,40(sp)
8111ab80:	157fffc4 	addi	r21,r2,-1
8111ab84:	1d41f316 	blt	r3,r21,8111b354 <_dtoa_r+0x1188>
8111ab88:	1d6bc83a 	sub	r21,r3,r21
8111ab8c:	d9c00617 	ldw	r7,24(sp)
8111ab90:	3802aa16 	blt	r7,zero,8111b63c <_dtoa_r+0x1470>
8111ab94:	dd000817 	ldw	r20,32(sp)
8111ab98:	d8800617 	ldw	r2,24(sp)
8111ab9c:	d8c00817 	ldw	r3,32(sp)
8111aba0:	01400044 	movi	r5,1
8111aba4:	e009883a 	mov	r4,fp
8111aba8:	1887883a 	add	r3,r3,r2
8111abac:	d8c00815 	stw	r3,32(sp)
8111abb0:	b0ad883a 	add	r22,r22,r2
8111abb4:	111d7080 	call	8111d708 <__i2b>
8111abb8:	1023883a 	mov	r17,r2
8111abbc:	a0000826 	beq	r20,zero,8111abe0 <_dtoa_r+0xa14>
8111abc0:	0580070e 	bge	zero,r22,8111abe0 <_dtoa_r+0xa14>
8111abc4:	a005883a 	mov	r2,r20
8111abc8:	b500b916 	blt	r22,r20,8111aeb0 <_dtoa_r+0xce4>
8111abcc:	d9000817 	ldw	r4,32(sp)
8111abd0:	a0a9c83a 	sub	r20,r20,r2
8111abd4:	b0adc83a 	sub	r22,r22,r2
8111abd8:	2089c83a 	sub	r4,r4,r2
8111abdc:	d9000815 	stw	r4,32(sp)
8111abe0:	d9800a17 	ldw	r6,40(sp)
8111abe4:	0181810e 	bge	zero,r6,8111b1ec <_dtoa_r+0x1020>
8111abe8:	d9c00b17 	ldw	r7,44(sp)
8111abec:	3800b326 	beq	r7,zero,8111aebc <_dtoa_r+0xcf0>
8111abf0:	a800b226 	beq	r21,zero,8111aebc <_dtoa_r+0xcf0>
8111abf4:	880b883a 	mov	r5,r17
8111abf8:	a80d883a 	mov	r6,r21
8111abfc:	e009883a 	mov	r4,fp
8111ac00:	111d94c0 	call	8111d94c <__pow5mult>
8111ac04:	d9800917 	ldw	r6,36(sp)
8111ac08:	100b883a 	mov	r5,r2
8111ac0c:	e009883a 	mov	r4,fp
8111ac10:	1023883a 	mov	r17,r2
8111ac14:	111d74c0 	call	8111d74c <__multiply>
8111ac18:	1021883a 	mov	r16,r2
8111ac1c:	d8800a17 	ldw	r2,40(sp)
8111ac20:	d9400917 	ldw	r5,36(sp)
8111ac24:	e009883a 	mov	r4,fp
8111ac28:	1545c83a 	sub	r2,r2,r21
8111ac2c:	d8800a15 	stw	r2,40(sp)
8111ac30:	111d3940 	call	8111d394 <_Bfree>
8111ac34:	d8c00a17 	ldw	r3,40(sp)
8111ac38:	18009f1e 	bne	r3,zero,8111aeb8 <_dtoa_r+0xcec>
8111ac3c:	05c00044 	movi	r23,1
8111ac40:	e009883a 	mov	r4,fp
8111ac44:	b80b883a 	mov	r5,r23
8111ac48:	111d7080 	call	8111d708 <__i2b>
8111ac4c:	d9000d17 	ldw	r4,52(sp)
8111ac50:	102b883a 	mov	r21,r2
8111ac54:	2000ce26 	beq	r4,zero,8111af90 <_dtoa_r+0xdc4>
8111ac58:	200d883a 	mov	r6,r4
8111ac5c:	100b883a 	mov	r5,r2
8111ac60:	e009883a 	mov	r4,fp
8111ac64:	111d94c0 	call	8111d94c <__pow5mult>
8111ac68:	d9800317 	ldw	r6,12(sp)
8111ac6c:	102b883a 	mov	r21,r2
8111ac70:	b981810e 	bge	r23,r6,8111b278 <_dtoa_r+0x10ac>
8111ac74:	0027883a 	mov	r19,zero
8111ac78:	a8800417 	ldw	r2,16(r21)
8111ac7c:	05c00804 	movi	r23,32
8111ac80:	10800104 	addi	r2,r2,4
8111ac84:	1085883a 	add	r2,r2,r2
8111ac88:	1085883a 	add	r2,r2,r2
8111ac8c:	a885883a 	add	r2,r21,r2
8111ac90:	11000017 	ldw	r4,0(r2)
8111ac94:	111d5f00 	call	8111d5f0 <__hi0bits>
8111ac98:	b885c83a 	sub	r2,r23,r2
8111ac9c:	1585883a 	add	r2,r2,r22
8111aca0:	108007cc 	andi	r2,r2,31
8111aca4:	1000b326 	beq	r2,zero,8111af74 <_dtoa_r+0xda8>
8111aca8:	00c00804 	movi	r3,32
8111acac:	1887c83a 	sub	r3,r3,r2
8111acb0:	01000104 	movi	r4,4
8111acb4:	20c2cd0e 	bge	r4,r3,8111b7ec <_dtoa_r+0x1620>
8111acb8:	00c00704 	movi	r3,28
8111acbc:	1885c83a 	sub	r2,r3,r2
8111acc0:	d8c00817 	ldw	r3,32(sp)
8111acc4:	a0a9883a 	add	r20,r20,r2
8111acc8:	b0ad883a 	add	r22,r22,r2
8111accc:	1887883a 	add	r3,r3,r2
8111acd0:	d8c00815 	stw	r3,32(sp)
8111acd4:	d9800817 	ldw	r6,32(sp)
8111acd8:	0180040e 	bge	zero,r6,8111acec <_dtoa_r+0xb20>
8111acdc:	800b883a 	mov	r5,r16
8111ace0:	e009883a 	mov	r4,fp
8111ace4:	111da940 	call	8111da94 <__lshift>
8111ace8:	1021883a 	mov	r16,r2
8111acec:	0580050e 	bge	zero,r22,8111ad04 <_dtoa_r+0xb38>
8111acf0:	a80b883a 	mov	r5,r21
8111acf4:	b00d883a 	mov	r6,r22
8111acf8:	e009883a 	mov	r4,fp
8111acfc:	111da940 	call	8111da94 <__lshift>
8111ad00:	102b883a 	mov	r21,r2
8111ad04:	d9c00e17 	ldw	r7,56(sp)
8111ad08:	3801211e 	bne	r7,zero,8111b190 <_dtoa_r+0xfc4>
8111ad0c:	d9800617 	ldw	r6,24(sp)
8111ad10:	0181380e 	bge	zero,r6,8111b1f4 <_dtoa_r+0x1028>
8111ad14:	d8c00b17 	ldw	r3,44(sp)
8111ad18:	1800ab1e 	bne	r3,zero,8111afc8 <_dtoa_r+0xdfc>
8111ad1c:	dc800717 	ldw	r18,28(sp)
8111ad20:	dcc00617 	ldw	r19,24(sp)
8111ad24:	9029883a 	mov	r20,r18
8111ad28:	00000206 	br	8111ad34 <_dtoa_r+0xb68>
8111ad2c:	111d3bc0 	call	8111d3bc <__multadd>
8111ad30:	1021883a 	mov	r16,r2
8111ad34:	a80b883a 	mov	r5,r21
8111ad38:	8009883a 	mov	r4,r16
8111ad3c:	1119fc40 	call	81119fc4 <quorem>
8111ad40:	10800c04 	addi	r2,r2,48
8111ad44:	90800005 	stb	r2,0(r18)
8111ad48:	94800044 	addi	r18,r18,1
8111ad4c:	9507c83a 	sub	r3,r18,r20
8111ad50:	000f883a 	mov	r7,zero
8111ad54:	01800284 	movi	r6,10
8111ad58:	800b883a 	mov	r5,r16
8111ad5c:	e009883a 	mov	r4,fp
8111ad60:	1cfff216 	blt	r3,r19,8111ad2c <__reset+0xfb0fad2c>
8111ad64:	1011883a 	mov	r8,r2
8111ad68:	d8800617 	ldw	r2,24(sp)
8111ad6c:	0082370e 	bge	zero,r2,8111b64c <_dtoa_r+0x1480>
8111ad70:	d9000717 	ldw	r4,28(sp)
8111ad74:	0025883a 	mov	r18,zero
8111ad78:	20af883a 	add	r23,r4,r2
8111ad7c:	01800044 	movi	r6,1
8111ad80:	800b883a 	mov	r5,r16
8111ad84:	e009883a 	mov	r4,fp
8111ad88:	da001715 	stw	r8,92(sp)
8111ad8c:	111da940 	call	8111da94 <__lshift>
8111ad90:	a80b883a 	mov	r5,r21
8111ad94:	1009883a 	mov	r4,r2
8111ad98:	d8800915 	stw	r2,36(sp)
8111ad9c:	111dbe40 	call	8111dbe4 <__mcmp>
8111ada0:	da001717 	ldw	r8,92(sp)
8111ada4:	0081800e 	bge	zero,r2,8111b3a8 <_dtoa_r+0x11dc>
8111ada8:	b93fffc3 	ldbu	r4,-1(r23)
8111adac:	b8bfffc4 	addi	r2,r23,-1
8111adb0:	1007883a 	mov	r3,r2
8111adb4:	01800e44 	movi	r6,57
8111adb8:	d9c00717 	ldw	r7,28(sp)
8111adbc:	00000506 	br	8111add4 <_dtoa_r+0xc08>
8111adc0:	18ffffc4 	addi	r3,r3,-1
8111adc4:	11c12326 	beq	r2,r7,8111b254 <_dtoa_r+0x1088>
8111adc8:	19000003 	ldbu	r4,0(r3)
8111adcc:	102f883a 	mov	r23,r2
8111add0:	10bfffc4 	addi	r2,r2,-1
8111add4:	21403fcc 	andi	r5,r4,255
8111add8:	2940201c 	xori	r5,r5,128
8111addc:	297fe004 	addi	r5,r5,-128
8111ade0:	29bff726 	beq	r5,r6,8111adc0 <__reset+0xfb0fadc0>
8111ade4:	21000044 	addi	r4,r4,1
8111ade8:	11000005 	stb	r4,0(r2)
8111adec:	a80b883a 	mov	r5,r21
8111adf0:	e009883a 	mov	r4,fp
8111adf4:	111d3940 	call	8111d394 <_Bfree>
8111adf8:	883ea026 	beq	r17,zero,8111a87c <__reset+0xfb0fa87c>
8111adfc:	90000426 	beq	r18,zero,8111ae10 <_dtoa_r+0xc44>
8111ae00:	94400326 	beq	r18,r17,8111ae10 <_dtoa_r+0xc44>
8111ae04:	900b883a 	mov	r5,r18
8111ae08:	e009883a 	mov	r4,fp
8111ae0c:	111d3940 	call	8111d394 <_Bfree>
8111ae10:	880b883a 	mov	r5,r17
8111ae14:	e009883a 	mov	r4,fp
8111ae18:	111d3940 	call	8111d394 <_Bfree>
8111ae1c:	003e9706 	br	8111a87c <__reset+0xfb0fa87c>
8111ae20:	01800044 	movi	r6,1
8111ae24:	d9800e15 	stw	r6,56(sp)
8111ae28:	003d9606 	br	8111a484 <__reset+0xfb0fa484>
8111ae2c:	d8800817 	ldw	r2,32(sp)
8111ae30:	d8c00517 	ldw	r3,20(sp)
8111ae34:	d8000d15 	stw	zero,52(sp)
8111ae38:	10c5c83a 	sub	r2,r2,r3
8111ae3c:	00c9c83a 	sub	r4,zero,r3
8111ae40:	d8800815 	stw	r2,32(sp)
8111ae44:	d9000a15 	stw	r4,40(sp)
8111ae48:	003d9706 	br	8111a4a8 <__reset+0xfb0fa4a8>
8111ae4c:	05adc83a 	sub	r22,zero,r22
8111ae50:	dd800815 	stw	r22,32(sp)
8111ae54:	002d883a 	mov	r22,zero
8111ae58:	003d8e06 	br	8111a494 <__reset+0xfb0fa494>
8111ae5c:	d9000517 	ldw	r4,20(sp)
8111ae60:	11276d40 	call	811276d4 <__floatsidf>
8111ae64:	100d883a 	mov	r6,r2
8111ae68:	180f883a 	mov	r7,r3
8111ae6c:	a009883a 	mov	r4,r20
8111ae70:	880b883a 	mov	r5,r17
8111ae74:	1126af80 	call	81126af8 <__eqdf2>
8111ae78:	103d7126 	beq	r2,zero,8111a440 <__reset+0xfb0fa440>
8111ae7c:	d9c00517 	ldw	r7,20(sp)
8111ae80:	39ffffc4 	addi	r7,r7,-1
8111ae84:	d9c00515 	stw	r7,20(sp)
8111ae88:	003d6d06 	br	8111a440 <__reset+0xfb0fa440>
8111ae8c:	dd400a17 	ldw	r21,40(sp)
8111ae90:	dd000817 	ldw	r20,32(sp)
8111ae94:	0023883a 	mov	r17,zero
8111ae98:	003f4806 	br	8111abbc <__reset+0xfb0fabbc>
8111ae9c:	10e3c83a 	sub	r17,r2,r3
8111aea0:	9448983a 	sll	r4,r18,r17
8111aea4:	003d3206 	br	8111a370 <__reset+0xfb0fa370>
8111aea8:	d8000e15 	stw	zero,56(sp)
8111aeac:	003d7506 	br	8111a484 <__reset+0xfb0fa484>
8111aeb0:	b005883a 	mov	r2,r22
8111aeb4:	003f4506 	br	8111abcc <__reset+0xfb0fabcc>
8111aeb8:	dc000915 	stw	r16,36(sp)
8111aebc:	d9800a17 	ldw	r6,40(sp)
8111aec0:	d9400917 	ldw	r5,36(sp)
8111aec4:	e009883a 	mov	r4,fp
8111aec8:	111d94c0 	call	8111d94c <__pow5mult>
8111aecc:	1021883a 	mov	r16,r2
8111aed0:	003f5a06 	br	8111ac3c <__reset+0xfb0fac3c>
8111aed4:	01c00044 	movi	r7,1
8111aed8:	d9c00b15 	stw	r7,44(sp)
8111aedc:	d8802217 	ldw	r2,136(sp)
8111aee0:	0081280e 	bge	zero,r2,8111b384 <_dtoa_r+0x11b8>
8111aee4:	100d883a 	mov	r6,r2
8111aee8:	1021883a 	mov	r16,r2
8111aeec:	d8800c15 	stw	r2,48(sp)
8111aef0:	d8800615 	stw	r2,24(sp)
8111aef4:	003d8806 	br	8111a518 <__reset+0xfb0fa518>
8111aef8:	d8800617 	ldw	r2,24(sp)
8111aefc:	00be9b16 	blt	zero,r2,8111a96c <__reset+0xfb0fa96c>
8111af00:	10010f1e 	bne	r2,zero,8111b340 <_dtoa_r+0x1174>
8111af04:	880b883a 	mov	r5,r17
8111af08:	000d883a 	mov	r6,zero
8111af0c:	01d00534 	movhi	r7,16404
8111af10:	8009883a 	mov	r4,r16
8111af14:	11114640 	call	81111464 <__muldf3>
8111af18:	900d883a 	mov	r6,r18
8111af1c:	980f883a 	mov	r7,r19
8111af20:	1009883a 	mov	r4,r2
8111af24:	180b883a 	mov	r5,r3
8111af28:	1126b800 	call	81126b80 <__gedf2>
8111af2c:	002b883a 	mov	r21,zero
8111af30:	0023883a 	mov	r17,zero
8111af34:	1000bf16 	blt	r2,zero,8111b234 <_dtoa_r+0x1068>
8111af38:	d9802217 	ldw	r6,136(sp)
8111af3c:	ddc00717 	ldw	r23,28(sp)
8111af40:	018c303a 	nor	r6,zero,r6
8111af44:	d9800515 	stw	r6,20(sp)
8111af48:	a80b883a 	mov	r5,r21
8111af4c:	e009883a 	mov	r4,fp
8111af50:	111d3940 	call	8111d394 <_Bfree>
8111af54:	883e4926 	beq	r17,zero,8111a87c <__reset+0xfb0fa87c>
8111af58:	003fad06 	br	8111ae10 <__reset+0xfb0fae10>
8111af5c:	d9c01117 	ldw	r7,68(sp)
8111af60:	3801bc26 	beq	r7,zero,8111b654 <_dtoa_r+0x1488>
8111af64:	10810cc4 	addi	r2,r2,1075
8111af68:	dd400a17 	ldw	r21,40(sp)
8111af6c:	dd000817 	ldw	r20,32(sp)
8111af70:	003f0a06 	br	8111ab9c <__reset+0xfb0fab9c>
8111af74:	00800704 	movi	r2,28
8111af78:	d9000817 	ldw	r4,32(sp)
8111af7c:	a0a9883a 	add	r20,r20,r2
8111af80:	b0ad883a 	add	r22,r22,r2
8111af84:	2089883a 	add	r4,r4,r2
8111af88:	d9000815 	stw	r4,32(sp)
8111af8c:	003f5106 	br	8111acd4 <__reset+0xfb0facd4>
8111af90:	d8c00317 	ldw	r3,12(sp)
8111af94:	b8c1fc0e 	bge	r23,r3,8111b788 <_dtoa_r+0x15bc>
8111af98:	0027883a 	mov	r19,zero
8111af9c:	b805883a 	mov	r2,r23
8111afa0:	003f3e06 	br	8111ac9c <__reset+0xfb0fac9c>
8111afa4:	880b883a 	mov	r5,r17
8111afa8:	e009883a 	mov	r4,fp
8111afac:	000f883a 	mov	r7,zero
8111afb0:	01800284 	movi	r6,10
8111afb4:	111d3bc0 	call	8111d3bc <__multadd>
8111afb8:	d9000c17 	ldw	r4,48(sp)
8111afbc:	1023883a 	mov	r17,r2
8111afc0:	0102040e 	bge	zero,r4,8111b7d4 <_dtoa_r+0x1608>
8111afc4:	d9000615 	stw	r4,24(sp)
8111afc8:	0500050e 	bge	zero,r20,8111afe0 <_dtoa_r+0xe14>
8111afcc:	880b883a 	mov	r5,r17
8111afd0:	a00d883a 	mov	r6,r20
8111afd4:	e009883a 	mov	r4,fp
8111afd8:	111da940 	call	8111da94 <__lshift>
8111afdc:	1023883a 	mov	r17,r2
8111afe0:	9801241e 	bne	r19,zero,8111b474 <_dtoa_r+0x12a8>
8111afe4:	8829883a 	mov	r20,r17
8111afe8:	d9000617 	ldw	r4,24(sp)
8111afec:	dcc00717 	ldw	r19,28(sp)
8111aff0:	9480004c 	andi	r18,r18,1
8111aff4:	20bfffc4 	addi	r2,r4,-1
8111aff8:	9885883a 	add	r2,r19,r2
8111affc:	d8800415 	stw	r2,16(sp)
8111b000:	dc800615 	stw	r18,24(sp)
8111b004:	a80b883a 	mov	r5,r21
8111b008:	8009883a 	mov	r4,r16
8111b00c:	1119fc40 	call	81119fc4 <quorem>
8111b010:	880b883a 	mov	r5,r17
8111b014:	8009883a 	mov	r4,r16
8111b018:	102f883a 	mov	r23,r2
8111b01c:	111dbe40 	call	8111dbe4 <__mcmp>
8111b020:	a80b883a 	mov	r5,r21
8111b024:	a00d883a 	mov	r6,r20
8111b028:	e009883a 	mov	r4,fp
8111b02c:	102d883a 	mov	r22,r2
8111b030:	111dc440 	call	8111dc44 <__mdiff>
8111b034:	1007883a 	mov	r3,r2
8111b038:	10800317 	ldw	r2,12(r2)
8111b03c:	bc800c04 	addi	r18,r23,48
8111b040:	180b883a 	mov	r5,r3
8111b044:	10004e1e 	bne	r2,zero,8111b180 <_dtoa_r+0xfb4>
8111b048:	8009883a 	mov	r4,r16
8111b04c:	d8c01615 	stw	r3,88(sp)
8111b050:	111dbe40 	call	8111dbe4 <__mcmp>
8111b054:	d8c01617 	ldw	r3,88(sp)
8111b058:	e009883a 	mov	r4,fp
8111b05c:	d8801615 	stw	r2,88(sp)
8111b060:	180b883a 	mov	r5,r3
8111b064:	111d3940 	call	8111d394 <_Bfree>
8111b068:	d8801617 	ldw	r2,88(sp)
8111b06c:	1000041e 	bne	r2,zero,8111b080 <_dtoa_r+0xeb4>
8111b070:	d9800317 	ldw	r6,12(sp)
8111b074:	3000021e 	bne	r6,zero,8111b080 <_dtoa_r+0xeb4>
8111b078:	d8c00617 	ldw	r3,24(sp)
8111b07c:	18003726 	beq	r3,zero,8111b15c <_dtoa_r+0xf90>
8111b080:	b0002016 	blt	r22,zero,8111b104 <_dtoa_r+0xf38>
8111b084:	b000041e 	bne	r22,zero,8111b098 <_dtoa_r+0xecc>
8111b088:	d9000317 	ldw	r4,12(sp)
8111b08c:	2000021e 	bne	r4,zero,8111b098 <_dtoa_r+0xecc>
8111b090:	d8c00617 	ldw	r3,24(sp)
8111b094:	18001b26 	beq	r3,zero,8111b104 <_dtoa_r+0xf38>
8111b098:	00810716 	blt	zero,r2,8111b4b8 <_dtoa_r+0x12ec>
8111b09c:	d8c00417 	ldw	r3,16(sp)
8111b0a0:	9d800044 	addi	r22,r19,1
8111b0a4:	9c800005 	stb	r18,0(r19)
8111b0a8:	b02f883a 	mov	r23,r22
8111b0ac:	98c10626 	beq	r19,r3,8111b4c8 <_dtoa_r+0x12fc>
8111b0b0:	800b883a 	mov	r5,r16
8111b0b4:	000f883a 	mov	r7,zero
8111b0b8:	01800284 	movi	r6,10
8111b0bc:	e009883a 	mov	r4,fp
8111b0c0:	111d3bc0 	call	8111d3bc <__multadd>
8111b0c4:	1021883a 	mov	r16,r2
8111b0c8:	000f883a 	mov	r7,zero
8111b0cc:	01800284 	movi	r6,10
8111b0d0:	880b883a 	mov	r5,r17
8111b0d4:	e009883a 	mov	r4,fp
8111b0d8:	8d002526 	beq	r17,r20,8111b170 <_dtoa_r+0xfa4>
8111b0dc:	111d3bc0 	call	8111d3bc <__multadd>
8111b0e0:	a00b883a 	mov	r5,r20
8111b0e4:	000f883a 	mov	r7,zero
8111b0e8:	01800284 	movi	r6,10
8111b0ec:	e009883a 	mov	r4,fp
8111b0f0:	1023883a 	mov	r17,r2
8111b0f4:	111d3bc0 	call	8111d3bc <__multadd>
8111b0f8:	1029883a 	mov	r20,r2
8111b0fc:	b027883a 	mov	r19,r22
8111b100:	003fc006 	br	8111b004 <__reset+0xfb0fb004>
8111b104:	9011883a 	mov	r8,r18
8111b108:	00800e0e 	bge	zero,r2,8111b144 <_dtoa_r+0xf78>
8111b10c:	800b883a 	mov	r5,r16
8111b110:	01800044 	movi	r6,1
8111b114:	e009883a 	mov	r4,fp
8111b118:	da001715 	stw	r8,92(sp)
8111b11c:	111da940 	call	8111da94 <__lshift>
8111b120:	a80b883a 	mov	r5,r21
8111b124:	1009883a 	mov	r4,r2
8111b128:	1021883a 	mov	r16,r2
8111b12c:	111dbe40 	call	8111dbe4 <__mcmp>
8111b130:	da001717 	ldw	r8,92(sp)
8111b134:	0081960e 	bge	zero,r2,8111b790 <_dtoa_r+0x15c4>
8111b138:	00800e44 	movi	r2,57
8111b13c:	40817026 	beq	r8,r2,8111b700 <_dtoa_r+0x1534>
8111b140:	ba000c44 	addi	r8,r23,49
8111b144:	8825883a 	mov	r18,r17
8111b148:	9dc00044 	addi	r23,r19,1
8111b14c:	9a000005 	stb	r8,0(r19)
8111b150:	a023883a 	mov	r17,r20
8111b154:	dc000915 	stw	r16,36(sp)
8111b158:	003f2406 	br	8111adec <__reset+0xfb0fadec>
8111b15c:	00800e44 	movi	r2,57
8111b160:	9011883a 	mov	r8,r18
8111b164:	90816626 	beq	r18,r2,8111b700 <_dtoa_r+0x1534>
8111b168:	05bff516 	blt	zero,r22,8111b140 <__reset+0xfb0fb140>
8111b16c:	003ff506 	br	8111b144 <__reset+0xfb0fb144>
8111b170:	111d3bc0 	call	8111d3bc <__multadd>
8111b174:	1023883a 	mov	r17,r2
8111b178:	1029883a 	mov	r20,r2
8111b17c:	003fdf06 	br	8111b0fc <__reset+0xfb0fb0fc>
8111b180:	e009883a 	mov	r4,fp
8111b184:	111d3940 	call	8111d394 <_Bfree>
8111b188:	00800044 	movi	r2,1
8111b18c:	003fbc06 	br	8111b080 <__reset+0xfb0fb080>
8111b190:	a80b883a 	mov	r5,r21
8111b194:	8009883a 	mov	r4,r16
8111b198:	111dbe40 	call	8111dbe4 <__mcmp>
8111b19c:	103edb0e 	bge	r2,zero,8111ad0c <__reset+0xfb0fad0c>
8111b1a0:	800b883a 	mov	r5,r16
8111b1a4:	000f883a 	mov	r7,zero
8111b1a8:	01800284 	movi	r6,10
8111b1ac:	e009883a 	mov	r4,fp
8111b1b0:	111d3bc0 	call	8111d3bc <__multadd>
8111b1b4:	1021883a 	mov	r16,r2
8111b1b8:	d8800517 	ldw	r2,20(sp)
8111b1bc:	d8c00b17 	ldw	r3,44(sp)
8111b1c0:	10bfffc4 	addi	r2,r2,-1
8111b1c4:	d8800515 	stw	r2,20(sp)
8111b1c8:	183f761e 	bne	r3,zero,8111afa4 <__reset+0xfb0fafa4>
8111b1cc:	d9000c17 	ldw	r4,48(sp)
8111b1d0:	0101730e 	bge	zero,r4,8111b7a0 <_dtoa_r+0x15d4>
8111b1d4:	d9000615 	stw	r4,24(sp)
8111b1d8:	003ed006 	br	8111ad1c <__reset+0xfb0fad1c>
8111b1dc:	00800084 	movi	r2,2
8111b1e0:	3081861e 	bne	r6,r2,8111b7fc <_dtoa_r+0x1630>
8111b1e4:	d8000b15 	stw	zero,44(sp)
8111b1e8:	003f3c06 	br	8111aedc <__reset+0xfb0faedc>
8111b1ec:	dc000917 	ldw	r16,36(sp)
8111b1f0:	003e9206 	br	8111ac3c <__reset+0xfb0fac3c>
8111b1f4:	d9c00317 	ldw	r7,12(sp)
8111b1f8:	00800084 	movi	r2,2
8111b1fc:	11fec50e 	bge	r2,r7,8111ad14 <__reset+0xfb0fad14>
8111b200:	d9000617 	ldw	r4,24(sp)
8111b204:	20013c1e 	bne	r4,zero,8111b6f8 <_dtoa_r+0x152c>
8111b208:	a80b883a 	mov	r5,r21
8111b20c:	000f883a 	mov	r7,zero
8111b210:	01800144 	movi	r6,5
8111b214:	e009883a 	mov	r4,fp
8111b218:	111d3bc0 	call	8111d3bc <__multadd>
8111b21c:	100b883a 	mov	r5,r2
8111b220:	8009883a 	mov	r4,r16
8111b224:	102b883a 	mov	r21,r2
8111b228:	111dbe40 	call	8111dbe4 <__mcmp>
8111b22c:	dc000915 	stw	r16,36(sp)
8111b230:	00bf410e 	bge	zero,r2,8111af38 <__reset+0xfb0faf38>
8111b234:	d9c00717 	ldw	r7,28(sp)
8111b238:	00800c44 	movi	r2,49
8111b23c:	38800005 	stb	r2,0(r7)
8111b240:	d8800517 	ldw	r2,20(sp)
8111b244:	3dc00044 	addi	r23,r7,1
8111b248:	10800044 	addi	r2,r2,1
8111b24c:	d8800515 	stw	r2,20(sp)
8111b250:	003f3d06 	br	8111af48 <__reset+0xfb0faf48>
8111b254:	d9800517 	ldw	r6,20(sp)
8111b258:	d9c00717 	ldw	r7,28(sp)
8111b25c:	00800c44 	movi	r2,49
8111b260:	31800044 	addi	r6,r6,1
8111b264:	d9800515 	stw	r6,20(sp)
8111b268:	38800005 	stb	r2,0(r7)
8111b26c:	003edf06 	br	8111adec <__reset+0xfb0fadec>
8111b270:	d8000b15 	stw	zero,44(sp)
8111b274:	003c9f06 	br	8111a4f4 <__reset+0xfb0fa4f4>
8111b278:	903e7e1e 	bne	r18,zero,8111ac74 <__reset+0xfb0fac74>
8111b27c:	00800434 	movhi	r2,16
8111b280:	10bfffc4 	addi	r2,r2,-1
8111b284:	9884703a 	and	r2,r19,r2
8111b288:	1000ea1e 	bne	r2,zero,8111b634 <_dtoa_r+0x1468>
8111b28c:	9cdffc2c 	andhi	r19,r19,32752
8111b290:	9800e826 	beq	r19,zero,8111b634 <_dtoa_r+0x1468>
8111b294:	d9c00817 	ldw	r7,32(sp)
8111b298:	b5800044 	addi	r22,r22,1
8111b29c:	04c00044 	movi	r19,1
8111b2a0:	39c00044 	addi	r7,r7,1
8111b2a4:	d9c00815 	stw	r7,32(sp)
8111b2a8:	d8800d17 	ldw	r2,52(sp)
8111b2ac:	103e721e 	bne	r2,zero,8111ac78 <__reset+0xfb0fac78>
8111b2b0:	00800044 	movi	r2,1
8111b2b4:	003e7906 	br	8111ac9c <__reset+0xfb0fac9c>
8111b2b8:	8009883a 	mov	r4,r16
8111b2bc:	11276d40 	call	811276d4 <__floatsidf>
8111b2c0:	d9800f17 	ldw	r6,60(sp)
8111b2c4:	d9c01017 	ldw	r7,64(sp)
8111b2c8:	1009883a 	mov	r4,r2
8111b2cc:	180b883a 	mov	r5,r3
8111b2d0:	11114640 	call	81111464 <__muldf3>
8111b2d4:	000d883a 	mov	r6,zero
8111b2d8:	01d00734 	movhi	r7,16412
8111b2dc:	1009883a 	mov	r4,r2
8111b2e0:	180b883a 	mov	r5,r3
8111b2e4:	11259540 	call	81125954 <__adddf3>
8111b2e8:	047f3034 	movhi	r17,64704
8111b2ec:	1021883a 	mov	r16,r2
8111b2f0:	1c63883a 	add	r17,r3,r17
8111b2f4:	d9000f17 	ldw	r4,60(sp)
8111b2f8:	d9401017 	ldw	r5,64(sp)
8111b2fc:	000d883a 	mov	r6,zero
8111b300:	01d00534 	movhi	r7,16404
8111b304:	1126d500 	call	81126d50 <__subdf3>
8111b308:	800d883a 	mov	r6,r16
8111b30c:	880f883a 	mov	r7,r17
8111b310:	1009883a 	mov	r4,r2
8111b314:	180b883a 	mov	r5,r3
8111b318:	102b883a 	mov	r21,r2
8111b31c:	1829883a 	mov	r20,r3
8111b320:	1126b800 	call	81126b80 <__gedf2>
8111b324:	00806c16 	blt	zero,r2,8111b4d8 <_dtoa_r+0x130c>
8111b328:	89e0003c 	xorhi	r7,r17,32768
8111b32c:	800d883a 	mov	r6,r16
8111b330:	a809883a 	mov	r4,r21
8111b334:	a00b883a 	mov	r5,r20
8111b338:	1126c5c0 	call	81126c5c <__ledf2>
8111b33c:	103d7e0e 	bge	r2,zero,8111a938 <__reset+0xfb0fa938>
8111b340:	002b883a 	mov	r21,zero
8111b344:	0023883a 	mov	r17,zero
8111b348:	003efb06 	br	8111af38 <__reset+0xfb0faf38>
8111b34c:	d8800717 	ldw	r2,28(sp)
8111b350:	003bd006 	br	8111a294 <__reset+0xfb0fa294>
8111b354:	d9000a17 	ldw	r4,40(sp)
8111b358:	d9800d17 	ldw	r6,52(sp)
8111b35c:	dd400a15 	stw	r21,40(sp)
8111b360:	a905c83a 	sub	r2,r21,r4
8111b364:	308d883a 	add	r6,r6,r2
8111b368:	d9800d15 	stw	r6,52(sp)
8111b36c:	002b883a 	mov	r21,zero
8111b370:	003e0606 	br	8111ab8c <__reset+0xfb0fab8c>
8111b374:	9023883a 	mov	r17,r18
8111b378:	9829883a 	mov	r20,r19
8111b37c:	04000084 	movi	r16,2
8111b380:	003c9206 	br	8111a5cc <__reset+0xfb0fa5cc>
8111b384:	04000044 	movi	r16,1
8111b388:	dc000c15 	stw	r16,48(sp)
8111b38c:	dc000615 	stw	r16,24(sp)
8111b390:	dc002215 	stw	r16,136(sp)
8111b394:	e0001115 	stw	zero,68(fp)
8111b398:	000b883a 	mov	r5,zero
8111b39c:	003c6906 	br	8111a544 <__reset+0xfb0fa544>
8111b3a0:	3021883a 	mov	r16,r6
8111b3a4:	003ffb06 	br	8111b394 <__reset+0xfb0fb394>
8111b3a8:	1000021e 	bne	r2,zero,8111b3b4 <_dtoa_r+0x11e8>
8111b3ac:	4200004c 	andi	r8,r8,1
8111b3b0:	403e7d1e 	bne	r8,zero,8111ada8 <__reset+0xfb0fada8>
8111b3b4:	01000c04 	movi	r4,48
8111b3b8:	00000106 	br	8111b3c0 <_dtoa_r+0x11f4>
8111b3bc:	102f883a 	mov	r23,r2
8111b3c0:	b8bfffc4 	addi	r2,r23,-1
8111b3c4:	10c00007 	ldb	r3,0(r2)
8111b3c8:	193ffc26 	beq	r3,r4,8111b3bc <__reset+0xfb0fb3bc>
8111b3cc:	003e8706 	br	8111adec <__reset+0xfb0fadec>
8111b3d0:	d8800517 	ldw	r2,20(sp)
8111b3d4:	00a3c83a 	sub	r17,zero,r2
8111b3d8:	8800a426 	beq	r17,zero,8111b66c <_dtoa_r+0x14a0>
8111b3dc:	888003cc 	andi	r2,r17,15
8111b3e0:	100490fa 	slli	r2,r2,3
8111b3e4:	00e04534 	movhi	r3,33044
8111b3e8:	18c10404 	addi	r3,r3,1040
8111b3ec:	1885883a 	add	r2,r3,r2
8111b3f0:	11800017 	ldw	r6,0(r2)
8111b3f4:	11c00117 	ldw	r7,4(r2)
8111b3f8:	9009883a 	mov	r4,r18
8111b3fc:	980b883a 	mov	r5,r19
8111b400:	8823d13a 	srai	r17,r17,4
8111b404:	11114640 	call	81111464 <__muldf3>
8111b408:	d8800f15 	stw	r2,60(sp)
8111b40c:	d8c01015 	stw	r3,64(sp)
8111b410:	8800e826 	beq	r17,zero,8111b7b4 <_dtoa_r+0x15e8>
8111b414:	05204534 	movhi	r20,33044
8111b418:	a500fa04 	addi	r20,r20,1000
8111b41c:	04000084 	movi	r16,2
8111b420:	8980004c 	andi	r6,r17,1
8111b424:	1009883a 	mov	r4,r2
8111b428:	8823d07a 	srai	r17,r17,1
8111b42c:	180b883a 	mov	r5,r3
8111b430:	30000426 	beq	r6,zero,8111b444 <_dtoa_r+0x1278>
8111b434:	a1800017 	ldw	r6,0(r20)
8111b438:	a1c00117 	ldw	r7,4(r20)
8111b43c:	84000044 	addi	r16,r16,1
8111b440:	11114640 	call	81111464 <__muldf3>
8111b444:	a5000204 	addi	r20,r20,8
8111b448:	883ff51e 	bne	r17,zero,8111b420 <__reset+0xfb0fb420>
8111b44c:	d8800f15 	stw	r2,60(sp)
8111b450:	d8c01015 	stw	r3,64(sp)
8111b454:	003c7606 	br	8111a630 <__reset+0xfb0fa630>
8111b458:	00c00c04 	movi	r3,48
8111b45c:	10c00005 	stb	r3,0(r2)
8111b460:	d8c00517 	ldw	r3,20(sp)
8111b464:	bd3fffc3 	ldbu	r20,-1(r23)
8111b468:	18c00044 	addi	r3,r3,1
8111b46c:	d8c00515 	stw	r3,20(sp)
8111b470:	003db906 	br	8111ab58 <__reset+0xfb0fab58>
8111b474:	89400117 	ldw	r5,4(r17)
8111b478:	e009883a 	mov	r4,fp
8111b47c:	111d2e40 	call	8111d2e4 <_Balloc>
8111b480:	89800417 	ldw	r6,16(r17)
8111b484:	89400304 	addi	r5,r17,12
8111b488:	11000304 	addi	r4,r2,12
8111b48c:	31800084 	addi	r6,r6,2
8111b490:	318d883a 	add	r6,r6,r6
8111b494:	318d883a 	add	r6,r6,r6
8111b498:	1027883a 	mov	r19,r2
8111b49c:	11130b40 	call	811130b4 <memcpy>
8111b4a0:	01800044 	movi	r6,1
8111b4a4:	980b883a 	mov	r5,r19
8111b4a8:	e009883a 	mov	r4,fp
8111b4ac:	111da940 	call	8111da94 <__lshift>
8111b4b0:	1029883a 	mov	r20,r2
8111b4b4:	003ecc06 	br	8111afe8 <__reset+0xfb0fafe8>
8111b4b8:	00800e44 	movi	r2,57
8111b4bc:	90809026 	beq	r18,r2,8111b700 <_dtoa_r+0x1534>
8111b4c0:	92000044 	addi	r8,r18,1
8111b4c4:	003f1f06 	br	8111b144 <__reset+0xfb0fb144>
8111b4c8:	9011883a 	mov	r8,r18
8111b4cc:	8825883a 	mov	r18,r17
8111b4d0:	a023883a 	mov	r17,r20
8111b4d4:	003e2906 	br	8111ad7c <__reset+0xfb0fad7c>
8111b4d8:	002b883a 	mov	r21,zero
8111b4dc:	0023883a 	mov	r17,zero
8111b4e0:	003f5406 	br	8111b234 <__reset+0xfb0fb234>
8111b4e4:	61bfffc4 	addi	r6,r12,-1
8111b4e8:	300490fa 	slli	r2,r6,3
8111b4ec:	00e04534 	movhi	r3,33044
8111b4f0:	18c10404 	addi	r3,r3,1040
8111b4f4:	1885883a 	add	r2,r3,r2
8111b4f8:	11000017 	ldw	r4,0(r2)
8111b4fc:	11400117 	ldw	r5,4(r2)
8111b500:	d8800717 	ldw	r2,28(sp)
8111b504:	880f883a 	mov	r7,r17
8111b508:	d9801215 	stw	r6,72(sp)
8111b50c:	800d883a 	mov	r6,r16
8111b510:	db001615 	stw	r12,88(sp)
8111b514:	15c00044 	addi	r23,r2,1
8111b518:	11114640 	call	81111464 <__muldf3>
8111b51c:	d9401017 	ldw	r5,64(sp)
8111b520:	d9000f17 	ldw	r4,60(sp)
8111b524:	d8c01515 	stw	r3,84(sp)
8111b528:	d8801415 	stw	r2,80(sp)
8111b52c:	11276540 	call	81127654 <__fixdfsi>
8111b530:	1009883a 	mov	r4,r2
8111b534:	1021883a 	mov	r16,r2
8111b538:	11276d40 	call	811276d4 <__floatsidf>
8111b53c:	d9000f17 	ldw	r4,60(sp)
8111b540:	d9401017 	ldw	r5,64(sp)
8111b544:	100d883a 	mov	r6,r2
8111b548:	180f883a 	mov	r7,r3
8111b54c:	1126d500 	call	81126d50 <__subdf3>
8111b550:	1829883a 	mov	r20,r3
8111b554:	d8c00717 	ldw	r3,28(sp)
8111b558:	84000c04 	addi	r16,r16,48
8111b55c:	1023883a 	mov	r17,r2
8111b560:	1c000005 	stb	r16,0(r3)
8111b564:	db001617 	ldw	r12,88(sp)
8111b568:	00800044 	movi	r2,1
8111b56c:	60802226 	beq	r12,r2,8111b5f8 <_dtoa_r+0x142c>
8111b570:	d9c00717 	ldw	r7,28(sp)
8111b574:	8805883a 	mov	r2,r17
8111b578:	b82b883a 	mov	r21,r23
8111b57c:	3b19883a 	add	r12,r7,r12
8111b580:	6023883a 	mov	r17,r12
8111b584:	a007883a 	mov	r3,r20
8111b588:	dc800f15 	stw	r18,60(sp)
8111b58c:	000d883a 	mov	r6,zero
8111b590:	01d00934 	movhi	r7,16420
8111b594:	1009883a 	mov	r4,r2
8111b598:	180b883a 	mov	r5,r3
8111b59c:	11114640 	call	81111464 <__muldf3>
8111b5a0:	180b883a 	mov	r5,r3
8111b5a4:	1009883a 	mov	r4,r2
8111b5a8:	1829883a 	mov	r20,r3
8111b5ac:	1025883a 	mov	r18,r2
8111b5b0:	11276540 	call	81127654 <__fixdfsi>
8111b5b4:	1009883a 	mov	r4,r2
8111b5b8:	1021883a 	mov	r16,r2
8111b5bc:	11276d40 	call	811276d4 <__floatsidf>
8111b5c0:	100d883a 	mov	r6,r2
8111b5c4:	180f883a 	mov	r7,r3
8111b5c8:	9009883a 	mov	r4,r18
8111b5cc:	a00b883a 	mov	r5,r20
8111b5d0:	84000c04 	addi	r16,r16,48
8111b5d4:	1126d500 	call	81126d50 <__subdf3>
8111b5d8:	ad400044 	addi	r21,r21,1
8111b5dc:	ac3fffc5 	stb	r16,-1(r21)
8111b5e0:	ac7fea1e 	bne	r21,r17,8111b58c <__reset+0xfb0fb58c>
8111b5e4:	1023883a 	mov	r17,r2
8111b5e8:	d8801217 	ldw	r2,72(sp)
8111b5ec:	dc800f17 	ldw	r18,60(sp)
8111b5f0:	1829883a 	mov	r20,r3
8111b5f4:	b8af883a 	add	r23,r23,r2
8111b5f8:	d9001417 	ldw	r4,80(sp)
8111b5fc:	d9401517 	ldw	r5,84(sp)
8111b600:	000d883a 	mov	r6,zero
8111b604:	01cff834 	movhi	r7,16352
8111b608:	11259540 	call	81125954 <__adddf3>
8111b60c:	880d883a 	mov	r6,r17
8111b610:	a00f883a 	mov	r7,r20
8111b614:	1009883a 	mov	r4,r2
8111b618:	180b883a 	mov	r5,r3
8111b61c:	1126c5c0 	call	81126c5c <__ledf2>
8111b620:	10003e0e 	bge	r2,zero,8111b71c <_dtoa_r+0x1550>
8111b624:	d9001317 	ldw	r4,76(sp)
8111b628:	bd3fffc3 	ldbu	r20,-1(r23)
8111b62c:	d9000515 	stw	r4,20(sp)
8111b630:	003d3b06 	br	8111ab20 <__reset+0xfb0fab20>
8111b634:	0027883a 	mov	r19,zero
8111b638:	003f1b06 	br	8111b2a8 <__reset+0xfb0fb2a8>
8111b63c:	d8800817 	ldw	r2,32(sp)
8111b640:	11e9c83a 	sub	r20,r2,r7
8111b644:	0005883a 	mov	r2,zero
8111b648:	003d5406 	br	8111ab9c <__reset+0xfb0fab9c>
8111b64c:	00800044 	movi	r2,1
8111b650:	003dc706 	br	8111ad70 <__reset+0xfb0fad70>
8111b654:	d8c00217 	ldw	r3,8(sp)
8111b658:	00800d84 	movi	r2,54
8111b65c:	dd400a17 	ldw	r21,40(sp)
8111b660:	10c5c83a 	sub	r2,r2,r3
8111b664:	dd000817 	ldw	r20,32(sp)
8111b668:	003d4c06 	br	8111ab9c <__reset+0xfb0fab9c>
8111b66c:	dc800f15 	stw	r18,60(sp)
8111b670:	dcc01015 	stw	r19,64(sp)
8111b674:	04000084 	movi	r16,2
8111b678:	003bed06 	br	8111a630 <__reset+0xfb0fa630>
8111b67c:	d9000617 	ldw	r4,24(sp)
8111b680:	203f0d26 	beq	r4,zero,8111b2b8 <__reset+0xfb0fb2b8>
8111b684:	d9800c17 	ldw	r6,48(sp)
8111b688:	01bcab0e 	bge	zero,r6,8111a938 <__reset+0xfb0fa938>
8111b68c:	d9401017 	ldw	r5,64(sp)
8111b690:	d9000f17 	ldw	r4,60(sp)
8111b694:	000d883a 	mov	r6,zero
8111b698:	01d00934 	movhi	r7,16420
8111b69c:	11114640 	call	81111464 <__muldf3>
8111b6a0:	81000044 	addi	r4,r16,1
8111b6a4:	d8800f15 	stw	r2,60(sp)
8111b6a8:	d8c01015 	stw	r3,64(sp)
8111b6ac:	11276d40 	call	811276d4 <__floatsidf>
8111b6b0:	d9800f17 	ldw	r6,60(sp)
8111b6b4:	d9c01017 	ldw	r7,64(sp)
8111b6b8:	1009883a 	mov	r4,r2
8111b6bc:	180b883a 	mov	r5,r3
8111b6c0:	11114640 	call	81111464 <__muldf3>
8111b6c4:	01d00734 	movhi	r7,16412
8111b6c8:	000d883a 	mov	r6,zero
8111b6cc:	1009883a 	mov	r4,r2
8111b6d0:	180b883a 	mov	r5,r3
8111b6d4:	11259540 	call	81125954 <__adddf3>
8111b6d8:	d9c00517 	ldw	r7,20(sp)
8111b6dc:	047f3034 	movhi	r17,64704
8111b6e0:	1021883a 	mov	r16,r2
8111b6e4:	39ffffc4 	addi	r7,r7,-1
8111b6e8:	d9c01315 	stw	r7,76(sp)
8111b6ec:	1c63883a 	add	r17,r3,r17
8111b6f0:	db000c17 	ldw	r12,48(sp)
8111b6f4:	003bea06 	br	8111a6a0 <__reset+0xfb0fa6a0>
8111b6f8:	dc000915 	stw	r16,36(sp)
8111b6fc:	003e0e06 	br	8111af38 <__reset+0xfb0faf38>
8111b700:	01000e44 	movi	r4,57
8111b704:	8825883a 	mov	r18,r17
8111b708:	9dc00044 	addi	r23,r19,1
8111b70c:	99000005 	stb	r4,0(r19)
8111b710:	a023883a 	mov	r17,r20
8111b714:	dc000915 	stw	r16,36(sp)
8111b718:	003da406 	br	8111adac <__reset+0xfb0fadac>
8111b71c:	d9801417 	ldw	r6,80(sp)
8111b720:	d9c01517 	ldw	r7,84(sp)
8111b724:	0009883a 	mov	r4,zero
8111b728:	014ff834 	movhi	r5,16352
8111b72c:	1126d500 	call	81126d50 <__subdf3>
8111b730:	880d883a 	mov	r6,r17
8111b734:	a00f883a 	mov	r7,r20
8111b738:	1009883a 	mov	r4,r2
8111b73c:	180b883a 	mov	r5,r3
8111b740:	1126b800 	call	81126b80 <__gedf2>
8111b744:	00bc7c0e 	bge	zero,r2,8111a938 <__reset+0xfb0fa938>
8111b748:	01000c04 	movi	r4,48
8111b74c:	00000106 	br	8111b754 <_dtoa_r+0x1588>
8111b750:	102f883a 	mov	r23,r2
8111b754:	b8bfffc4 	addi	r2,r23,-1
8111b758:	10c00007 	ldb	r3,0(r2)
8111b75c:	193ffc26 	beq	r3,r4,8111b750 <__reset+0xfb0fb750>
8111b760:	d9801317 	ldw	r6,76(sp)
8111b764:	d9800515 	stw	r6,20(sp)
8111b768:	003c4406 	br	8111a87c <__reset+0xfb0fa87c>
8111b76c:	d9801317 	ldw	r6,76(sp)
8111b770:	d9800515 	stw	r6,20(sp)
8111b774:	003cea06 	br	8111ab20 <__reset+0xfb0fab20>
8111b778:	dd800f17 	ldw	r22,60(sp)
8111b77c:	dcc01017 	ldw	r19,64(sp)
8111b780:	dc801217 	ldw	r18,72(sp)
8111b784:	003c6c06 	br	8111a938 <__reset+0xfb0fa938>
8111b788:	903e031e 	bne	r18,zero,8111af98 <__reset+0xfb0faf98>
8111b78c:	003ebb06 	br	8111b27c <__reset+0xfb0fb27c>
8111b790:	103e6c1e 	bne	r2,zero,8111b144 <__reset+0xfb0fb144>
8111b794:	4080004c 	andi	r2,r8,1
8111b798:	103e6a26 	beq	r2,zero,8111b144 <__reset+0xfb0fb144>
8111b79c:	003e6606 	br	8111b138 <__reset+0xfb0fb138>
8111b7a0:	d8c00317 	ldw	r3,12(sp)
8111b7a4:	00800084 	movi	r2,2
8111b7a8:	10c02916 	blt	r2,r3,8111b850 <_dtoa_r+0x1684>
8111b7ac:	d9000c17 	ldw	r4,48(sp)
8111b7b0:	003e8806 	br	8111b1d4 <__reset+0xfb0fb1d4>
8111b7b4:	04000084 	movi	r16,2
8111b7b8:	003b9d06 	br	8111a630 <__reset+0xfb0fa630>
8111b7bc:	d9001317 	ldw	r4,76(sp)
8111b7c0:	d9000515 	stw	r4,20(sp)
8111b7c4:	003cd606 	br	8111ab20 <__reset+0xfb0fab20>
8111b7c8:	d8801317 	ldw	r2,76(sp)
8111b7cc:	d8800515 	stw	r2,20(sp)
8111b7d0:	003c2a06 	br	8111a87c <__reset+0xfb0fa87c>
8111b7d4:	d9800317 	ldw	r6,12(sp)
8111b7d8:	00800084 	movi	r2,2
8111b7dc:	11801516 	blt	r2,r6,8111b834 <_dtoa_r+0x1668>
8111b7e0:	d9c00c17 	ldw	r7,48(sp)
8111b7e4:	d9c00615 	stw	r7,24(sp)
8111b7e8:	003df706 	br	8111afc8 <__reset+0xfb0fafc8>
8111b7ec:	193d3926 	beq	r3,r4,8111acd4 <__reset+0xfb0facd4>
8111b7f0:	00c00f04 	movi	r3,60
8111b7f4:	1885c83a 	sub	r2,r3,r2
8111b7f8:	003ddf06 	br	8111af78 <__reset+0xfb0faf78>
8111b7fc:	e009883a 	mov	r4,fp
8111b800:	e0001115 	stw	zero,68(fp)
8111b804:	000b883a 	mov	r5,zero
8111b808:	111d2e40 	call	8111d2e4 <_Balloc>
8111b80c:	d8800715 	stw	r2,28(sp)
8111b810:	d8c00717 	ldw	r3,28(sp)
8111b814:	00bfffc4 	movi	r2,-1
8111b818:	01000044 	movi	r4,1
8111b81c:	d8800c15 	stw	r2,48(sp)
8111b820:	e0c01015 	stw	r3,64(fp)
8111b824:	d9000b15 	stw	r4,44(sp)
8111b828:	d8800615 	stw	r2,24(sp)
8111b82c:	d8002215 	stw	zero,136(sp)
8111b830:	003c4106 	br	8111a938 <__reset+0xfb0fa938>
8111b834:	d8c00c17 	ldw	r3,48(sp)
8111b838:	d8c00615 	stw	r3,24(sp)
8111b83c:	003e7006 	br	8111b200 <__reset+0xfb0fb200>
8111b840:	04400044 	movi	r17,1
8111b844:	003b2006 	br	8111a4c8 <__reset+0xfb0fa4c8>
8111b848:	000b883a 	mov	r5,zero
8111b84c:	003b3d06 	br	8111a544 <__reset+0xfb0fa544>
8111b850:	d8800c17 	ldw	r2,48(sp)
8111b854:	d8800615 	stw	r2,24(sp)
8111b858:	003e6906 	br	8111b200 <__reset+0xfb0fb200>

8111b85c <__sflush_r>:
8111b85c:	defffb04 	addi	sp,sp,-20
8111b860:	de00012e 	bgeu	sp,et,8111b868 <__sflush_r+0xc>
8111b864:	003b68fa 	trap	3
8111b868:	2880030b 	ldhu	r2,12(r5)
8111b86c:	dcc00315 	stw	r19,12(sp)
8111b870:	dc400115 	stw	r17,4(sp)
8111b874:	dfc00415 	stw	ra,16(sp)
8111b878:	dc800215 	stw	r18,8(sp)
8111b87c:	dc000015 	stw	r16,0(sp)
8111b880:	10c0020c 	andi	r3,r2,8
8111b884:	2823883a 	mov	r17,r5
8111b888:	2027883a 	mov	r19,r4
8111b88c:	1800311e 	bne	r3,zero,8111b954 <__sflush_r+0xf8>
8111b890:	28c00117 	ldw	r3,4(r5)
8111b894:	10820014 	ori	r2,r2,2048
8111b898:	2880030d 	sth	r2,12(r5)
8111b89c:	00c04b0e 	bge	zero,r3,8111b9cc <__sflush_r+0x170>
8111b8a0:	8a000a17 	ldw	r8,40(r17)
8111b8a4:	40002326 	beq	r8,zero,8111b934 <__sflush_r+0xd8>
8111b8a8:	9c000017 	ldw	r16,0(r19)
8111b8ac:	10c4000c 	andi	r3,r2,4096
8111b8b0:	98000015 	stw	zero,0(r19)
8111b8b4:	18004826 	beq	r3,zero,8111b9d8 <__sflush_r+0x17c>
8111b8b8:	89801417 	ldw	r6,80(r17)
8111b8bc:	10c0010c 	andi	r3,r2,4
8111b8c0:	18000626 	beq	r3,zero,8111b8dc <__sflush_r+0x80>
8111b8c4:	88c00117 	ldw	r3,4(r17)
8111b8c8:	88800c17 	ldw	r2,48(r17)
8111b8cc:	30cdc83a 	sub	r6,r6,r3
8111b8d0:	10000226 	beq	r2,zero,8111b8dc <__sflush_r+0x80>
8111b8d4:	88800f17 	ldw	r2,60(r17)
8111b8d8:	308dc83a 	sub	r6,r6,r2
8111b8dc:	89400717 	ldw	r5,28(r17)
8111b8e0:	000f883a 	mov	r7,zero
8111b8e4:	9809883a 	mov	r4,r19
8111b8e8:	403ee83a 	callr	r8
8111b8ec:	00ffffc4 	movi	r3,-1
8111b8f0:	10c04426 	beq	r2,r3,8111ba04 <__sflush_r+0x1a8>
8111b8f4:	88c0030b 	ldhu	r3,12(r17)
8111b8f8:	89000417 	ldw	r4,16(r17)
8111b8fc:	88000115 	stw	zero,4(r17)
8111b900:	197dffcc 	andi	r5,r3,63487
8111b904:	8940030d 	sth	r5,12(r17)
8111b908:	89000015 	stw	r4,0(r17)
8111b90c:	18c4000c 	andi	r3,r3,4096
8111b910:	18002c1e 	bne	r3,zero,8111b9c4 <__sflush_r+0x168>
8111b914:	89400c17 	ldw	r5,48(r17)
8111b918:	9c000015 	stw	r16,0(r19)
8111b91c:	28000526 	beq	r5,zero,8111b934 <__sflush_r+0xd8>
8111b920:	88801004 	addi	r2,r17,64
8111b924:	28800226 	beq	r5,r2,8111b930 <__sflush_r+0xd4>
8111b928:	9809883a 	mov	r4,r19
8111b92c:	111c3140 	call	8111c314 <_free_r>
8111b930:	88000c15 	stw	zero,48(r17)
8111b934:	0005883a 	mov	r2,zero
8111b938:	dfc00417 	ldw	ra,16(sp)
8111b93c:	dcc00317 	ldw	r19,12(sp)
8111b940:	dc800217 	ldw	r18,8(sp)
8111b944:	dc400117 	ldw	r17,4(sp)
8111b948:	dc000017 	ldw	r16,0(sp)
8111b94c:	dec00504 	addi	sp,sp,20
8111b950:	f800283a 	ret
8111b954:	2c800417 	ldw	r18,16(r5)
8111b958:	903ff626 	beq	r18,zero,8111b934 <__reset+0xfb0fb934>
8111b95c:	2c000017 	ldw	r16,0(r5)
8111b960:	108000cc 	andi	r2,r2,3
8111b964:	2c800015 	stw	r18,0(r5)
8111b968:	84a1c83a 	sub	r16,r16,r18
8111b96c:	1000131e 	bne	r2,zero,8111b9bc <__sflush_r+0x160>
8111b970:	28800517 	ldw	r2,20(r5)
8111b974:	88800215 	stw	r2,8(r17)
8111b978:	04000316 	blt	zero,r16,8111b988 <__sflush_r+0x12c>
8111b97c:	003fed06 	br	8111b934 <__reset+0xfb0fb934>
8111b980:	90a5883a 	add	r18,r18,r2
8111b984:	043feb0e 	bge	zero,r16,8111b934 <__reset+0xfb0fb934>
8111b988:	88800917 	ldw	r2,36(r17)
8111b98c:	89400717 	ldw	r5,28(r17)
8111b990:	800f883a 	mov	r7,r16
8111b994:	900d883a 	mov	r6,r18
8111b998:	9809883a 	mov	r4,r19
8111b99c:	103ee83a 	callr	r2
8111b9a0:	80a1c83a 	sub	r16,r16,r2
8111b9a4:	00bff616 	blt	zero,r2,8111b980 <__reset+0xfb0fb980>
8111b9a8:	88c0030b 	ldhu	r3,12(r17)
8111b9ac:	00bfffc4 	movi	r2,-1
8111b9b0:	18c01014 	ori	r3,r3,64
8111b9b4:	88c0030d 	sth	r3,12(r17)
8111b9b8:	003fdf06 	br	8111b938 <__reset+0xfb0fb938>
8111b9bc:	0005883a 	mov	r2,zero
8111b9c0:	003fec06 	br	8111b974 <__reset+0xfb0fb974>
8111b9c4:	88801415 	stw	r2,80(r17)
8111b9c8:	003fd206 	br	8111b914 <__reset+0xfb0fb914>
8111b9cc:	28c00f17 	ldw	r3,60(r5)
8111b9d0:	00ffb316 	blt	zero,r3,8111b8a0 <__reset+0xfb0fb8a0>
8111b9d4:	003fd706 	br	8111b934 <__reset+0xfb0fb934>
8111b9d8:	89400717 	ldw	r5,28(r17)
8111b9dc:	000d883a 	mov	r6,zero
8111b9e0:	01c00044 	movi	r7,1
8111b9e4:	9809883a 	mov	r4,r19
8111b9e8:	403ee83a 	callr	r8
8111b9ec:	100d883a 	mov	r6,r2
8111b9f0:	00bfffc4 	movi	r2,-1
8111b9f4:	30801426 	beq	r6,r2,8111ba48 <__sflush_r+0x1ec>
8111b9f8:	8880030b 	ldhu	r2,12(r17)
8111b9fc:	8a000a17 	ldw	r8,40(r17)
8111ba00:	003fae06 	br	8111b8bc <__reset+0xfb0fb8bc>
8111ba04:	98c00017 	ldw	r3,0(r19)
8111ba08:	183fba26 	beq	r3,zero,8111b8f4 <__reset+0xfb0fb8f4>
8111ba0c:	01000744 	movi	r4,29
8111ba10:	19000626 	beq	r3,r4,8111ba2c <__sflush_r+0x1d0>
8111ba14:	01000584 	movi	r4,22
8111ba18:	19000426 	beq	r3,r4,8111ba2c <__sflush_r+0x1d0>
8111ba1c:	88c0030b 	ldhu	r3,12(r17)
8111ba20:	18c01014 	ori	r3,r3,64
8111ba24:	88c0030d 	sth	r3,12(r17)
8111ba28:	003fc306 	br	8111b938 <__reset+0xfb0fb938>
8111ba2c:	8880030b 	ldhu	r2,12(r17)
8111ba30:	88c00417 	ldw	r3,16(r17)
8111ba34:	88000115 	stw	zero,4(r17)
8111ba38:	10bdffcc 	andi	r2,r2,63487
8111ba3c:	8880030d 	sth	r2,12(r17)
8111ba40:	88c00015 	stw	r3,0(r17)
8111ba44:	003fb306 	br	8111b914 <__reset+0xfb0fb914>
8111ba48:	98800017 	ldw	r2,0(r19)
8111ba4c:	103fea26 	beq	r2,zero,8111b9f8 <__reset+0xfb0fb9f8>
8111ba50:	00c00744 	movi	r3,29
8111ba54:	10c00226 	beq	r2,r3,8111ba60 <__sflush_r+0x204>
8111ba58:	00c00584 	movi	r3,22
8111ba5c:	10c0031e 	bne	r2,r3,8111ba6c <__sflush_r+0x210>
8111ba60:	9c000015 	stw	r16,0(r19)
8111ba64:	0005883a 	mov	r2,zero
8111ba68:	003fb306 	br	8111b938 <__reset+0xfb0fb938>
8111ba6c:	88c0030b 	ldhu	r3,12(r17)
8111ba70:	3005883a 	mov	r2,r6
8111ba74:	18c01014 	ori	r3,r3,64
8111ba78:	88c0030d 	sth	r3,12(r17)
8111ba7c:	003fae06 	br	8111b938 <__reset+0xfb0fb938>

8111ba80 <_fflush_r>:
8111ba80:	defffd04 	addi	sp,sp,-12
8111ba84:	de00012e 	bgeu	sp,et,8111ba8c <_fflush_r+0xc>
8111ba88:	003b68fa 	trap	3
8111ba8c:	dc000115 	stw	r16,4(sp)
8111ba90:	dfc00215 	stw	ra,8(sp)
8111ba94:	2021883a 	mov	r16,r4
8111ba98:	20000226 	beq	r4,zero,8111baa4 <_fflush_r+0x24>
8111ba9c:	20800e17 	ldw	r2,56(r4)
8111baa0:	10000c26 	beq	r2,zero,8111bad4 <_fflush_r+0x54>
8111baa4:	2880030f 	ldh	r2,12(r5)
8111baa8:	1000051e 	bne	r2,zero,8111bac0 <_fflush_r+0x40>
8111baac:	0005883a 	mov	r2,zero
8111bab0:	dfc00217 	ldw	ra,8(sp)
8111bab4:	dc000117 	ldw	r16,4(sp)
8111bab8:	dec00304 	addi	sp,sp,12
8111babc:	f800283a 	ret
8111bac0:	8009883a 	mov	r4,r16
8111bac4:	dfc00217 	ldw	ra,8(sp)
8111bac8:	dc000117 	ldw	r16,4(sp)
8111bacc:	dec00304 	addi	sp,sp,12
8111bad0:	111b85c1 	jmpi	8111b85c <__sflush_r>
8111bad4:	d9400015 	stw	r5,0(sp)
8111bad8:	111be7c0 	call	8111be7c <__sinit>
8111badc:	d9400017 	ldw	r5,0(sp)
8111bae0:	003ff006 	br	8111baa4 <__reset+0xfb0fbaa4>

8111bae4 <fflush>:
8111bae4:	20000526 	beq	r4,zero,8111bafc <fflush+0x18>
8111bae8:	00a04534 	movhi	r2,33044
8111baec:	108aa604 	addi	r2,r2,10904
8111baf0:	200b883a 	mov	r5,r4
8111baf4:	11000017 	ldw	r4,0(r2)
8111baf8:	111ba801 	jmpi	8111ba80 <_fflush_r>
8111bafc:	00a04534 	movhi	r2,33044
8111bb00:	108aa504 	addi	r2,r2,10900
8111bb04:	11000017 	ldw	r4,0(r2)
8111bb08:	016044b4 	movhi	r5,33042
8111bb0c:	296ea004 	addi	r5,r5,-17792
8111bb10:	111cbbc1 	jmpi	8111cbbc <_fwalk_reent>

8111bb14 <__fp_unlock>:
8111bb14:	0005883a 	mov	r2,zero
8111bb18:	f800283a 	ret

8111bb1c <_cleanup_r>:
8111bb1c:	016044b4 	movhi	r5,33042
8111bb20:	294e3604 	addi	r5,r5,14552
8111bb24:	111cbbc1 	jmpi	8111cbbc <_fwalk_reent>

8111bb28 <__sinit.part.1>:
8111bb28:	defff704 	addi	sp,sp,-36
8111bb2c:	00e044b4 	movhi	r3,33042
8111bb30:	de00012e 	bgeu	sp,et,8111bb38 <__sinit.part.1+0x10>
8111bb34:	003b68fa 	trap	3
8111bb38:	18eec704 	addi	r3,r3,-17636
8111bb3c:	dfc00815 	stw	ra,32(sp)
8111bb40:	ddc00715 	stw	r23,28(sp)
8111bb44:	dd800615 	stw	r22,24(sp)
8111bb48:	dd400515 	stw	r21,20(sp)
8111bb4c:	dd000415 	stw	r20,16(sp)
8111bb50:	dcc00315 	stw	r19,12(sp)
8111bb54:	dc800215 	stw	r18,8(sp)
8111bb58:	dc400115 	stw	r17,4(sp)
8111bb5c:	dc000015 	stw	r16,0(sp)
8111bb60:	24000117 	ldw	r16,4(r4)
8111bb64:	20c00f15 	stw	r3,60(r4)
8111bb68:	2080bb04 	addi	r2,r4,748
8111bb6c:	00c000c4 	movi	r3,3
8111bb70:	20c0b915 	stw	r3,740(r4)
8111bb74:	2080ba15 	stw	r2,744(r4)
8111bb78:	2000b815 	stw	zero,736(r4)
8111bb7c:	05c00204 	movi	r23,8
8111bb80:	00800104 	movi	r2,4
8111bb84:	2025883a 	mov	r18,r4
8111bb88:	b80d883a 	mov	r6,r23
8111bb8c:	81001704 	addi	r4,r16,92
8111bb90:	000b883a 	mov	r5,zero
8111bb94:	80000015 	stw	zero,0(r16)
8111bb98:	80000115 	stw	zero,4(r16)
8111bb9c:	80000215 	stw	zero,8(r16)
8111bba0:	8080030d 	sth	r2,12(r16)
8111bba4:	80001915 	stw	zero,100(r16)
8111bba8:	8000038d 	sth	zero,14(r16)
8111bbac:	80000415 	stw	zero,16(r16)
8111bbb0:	80000515 	stw	zero,20(r16)
8111bbb4:	80000615 	stw	zero,24(r16)
8111bbb8:	11132040 	call	81113204 <memset>
8111bbbc:	05a04474 	movhi	r22,33041
8111bbc0:	94400217 	ldw	r17,8(r18)
8111bbc4:	05604474 	movhi	r21,33041
8111bbc8:	05204474 	movhi	r20,33041
8111bbcc:	04e04474 	movhi	r19,33041
8111bbd0:	b58e8204 	addi	r22,r22,14856
8111bbd4:	ad4e9b04 	addi	r21,r21,14956
8111bbd8:	a50ebc04 	addi	r20,r20,15088
8111bbdc:	9cced504 	addi	r19,r19,15188
8111bbe0:	85800815 	stw	r22,32(r16)
8111bbe4:	85400915 	stw	r21,36(r16)
8111bbe8:	85000a15 	stw	r20,40(r16)
8111bbec:	84c00b15 	stw	r19,44(r16)
8111bbf0:	84000715 	stw	r16,28(r16)
8111bbf4:	00800284 	movi	r2,10
8111bbf8:	8880030d 	sth	r2,12(r17)
8111bbfc:	00800044 	movi	r2,1
8111bc00:	b80d883a 	mov	r6,r23
8111bc04:	89001704 	addi	r4,r17,92
8111bc08:	000b883a 	mov	r5,zero
8111bc0c:	88000015 	stw	zero,0(r17)
8111bc10:	88000115 	stw	zero,4(r17)
8111bc14:	88000215 	stw	zero,8(r17)
8111bc18:	88001915 	stw	zero,100(r17)
8111bc1c:	8880038d 	sth	r2,14(r17)
8111bc20:	88000415 	stw	zero,16(r17)
8111bc24:	88000515 	stw	zero,20(r17)
8111bc28:	88000615 	stw	zero,24(r17)
8111bc2c:	11132040 	call	81113204 <memset>
8111bc30:	94000317 	ldw	r16,12(r18)
8111bc34:	00800484 	movi	r2,18
8111bc38:	8c400715 	stw	r17,28(r17)
8111bc3c:	8d800815 	stw	r22,32(r17)
8111bc40:	8d400915 	stw	r21,36(r17)
8111bc44:	8d000a15 	stw	r20,40(r17)
8111bc48:	8cc00b15 	stw	r19,44(r17)
8111bc4c:	8080030d 	sth	r2,12(r16)
8111bc50:	00800084 	movi	r2,2
8111bc54:	80000015 	stw	zero,0(r16)
8111bc58:	80000115 	stw	zero,4(r16)
8111bc5c:	80000215 	stw	zero,8(r16)
8111bc60:	80001915 	stw	zero,100(r16)
8111bc64:	8080038d 	sth	r2,14(r16)
8111bc68:	80000415 	stw	zero,16(r16)
8111bc6c:	80000515 	stw	zero,20(r16)
8111bc70:	80000615 	stw	zero,24(r16)
8111bc74:	b80d883a 	mov	r6,r23
8111bc78:	000b883a 	mov	r5,zero
8111bc7c:	81001704 	addi	r4,r16,92
8111bc80:	11132040 	call	81113204 <memset>
8111bc84:	00800044 	movi	r2,1
8111bc88:	84000715 	stw	r16,28(r16)
8111bc8c:	85800815 	stw	r22,32(r16)
8111bc90:	85400915 	stw	r21,36(r16)
8111bc94:	85000a15 	stw	r20,40(r16)
8111bc98:	84c00b15 	stw	r19,44(r16)
8111bc9c:	90800e15 	stw	r2,56(r18)
8111bca0:	dfc00817 	ldw	ra,32(sp)
8111bca4:	ddc00717 	ldw	r23,28(sp)
8111bca8:	dd800617 	ldw	r22,24(sp)
8111bcac:	dd400517 	ldw	r21,20(sp)
8111bcb0:	dd000417 	ldw	r20,16(sp)
8111bcb4:	dcc00317 	ldw	r19,12(sp)
8111bcb8:	dc800217 	ldw	r18,8(sp)
8111bcbc:	dc400117 	ldw	r17,4(sp)
8111bcc0:	dc000017 	ldw	r16,0(sp)
8111bcc4:	dec00904 	addi	sp,sp,36
8111bcc8:	f800283a 	ret

8111bccc <__fp_lock>:
8111bccc:	0005883a 	mov	r2,zero
8111bcd0:	f800283a 	ret

8111bcd4 <__sfmoreglue>:
8111bcd4:	defffc04 	addi	sp,sp,-16
8111bcd8:	de00012e 	bgeu	sp,et,8111bce0 <__sfmoreglue+0xc>
8111bcdc:	003b68fa 	trap	3
8111bce0:	dc400115 	stw	r17,4(sp)
8111bce4:	2c7fffc4 	addi	r17,r5,-1
8111bce8:	8c401a24 	muli	r17,r17,104
8111bcec:	dc800215 	stw	r18,8(sp)
8111bcf0:	2825883a 	mov	r18,r5
8111bcf4:	89401d04 	addi	r5,r17,116
8111bcf8:	dc000015 	stw	r16,0(sp)
8111bcfc:	dfc00315 	stw	ra,12(sp)
8111bd00:	11128a00 	call	811128a0 <_malloc_r>
8111bd04:	1021883a 	mov	r16,r2
8111bd08:	10000726 	beq	r2,zero,8111bd28 <__sfmoreglue+0x54>
8111bd0c:	11000304 	addi	r4,r2,12
8111bd10:	10000015 	stw	zero,0(r2)
8111bd14:	14800115 	stw	r18,4(r2)
8111bd18:	11000215 	stw	r4,8(r2)
8111bd1c:	89801a04 	addi	r6,r17,104
8111bd20:	000b883a 	mov	r5,zero
8111bd24:	11132040 	call	81113204 <memset>
8111bd28:	8005883a 	mov	r2,r16
8111bd2c:	dfc00317 	ldw	ra,12(sp)
8111bd30:	dc800217 	ldw	r18,8(sp)
8111bd34:	dc400117 	ldw	r17,4(sp)
8111bd38:	dc000017 	ldw	r16,0(sp)
8111bd3c:	dec00404 	addi	sp,sp,16
8111bd40:	f800283a 	ret

8111bd44 <__sfp>:
8111bd44:	defffb04 	addi	sp,sp,-20
8111bd48:	de00012e 	bgeu	sp,et,8111bd50 <__sfp+0xc>
8111bd4c:	003b68fa 	trap	3
8111bd50:	dc000015 	stw	r16,0(sp)
8111bd54:	04204534 	movhi	r16,33044
8111bd58:	840aa504 	addi	r16,r16,10900
8111bd5c:	dcc00315 	stw	r19,12(sp)
8111bd60:	2027883a 	mov	r19,r4
8111bd64:	81000017 	ldw	r4,0(r16)
8111bd68:	dfc00415 	stw	ra,16(sp)
8111bd6c:	dc800215 	stw	r18,8(sp)
8111bd70:	20800e17 	ldw	r2,56(r4)
8111bd74:	dc400115 	stw	r17,4(sp)
8111bd78:	1000021e 	bne	r2,zero,8111bd84 <__sfp+0x40>
8111bd7c:	111bb280 	call	8111bb28 <__sinit.part.1>
8111bd80:	81000017 	ldw	r4,0(r16)
8111bd84:	2480b804 	addi	r18,r4,736
8111bd88:	047fffc4 	movi	r17,-1
8111bd8c:	91000117 	ldw	r4,4(r18)
8111bd90:	94000217 	ldw	r16,8(r18)
8111bd94:	213fffc4 	addi	r4,r4,-1
8111bd98:	20000a16 	blt	r4,zero,8111bdc4 <__sfp+0x80>
8111bd9c:	8080030f 	ldh	r2,12(r16)
8111bda0:	10000c26 	beq	r2,zero,8111bdd4 <__sfp+0x90>
8111bda4:	80c01d04 	addi	r3,r16,116
8111bda8:	00000206 	br	8111bdb4 <__sfp+0x70>
8111bdac:	18bfe60f 	ldh	r2,-104(r3)
8111bdb0:	10000826 	beq	r2,zero,8111bdd4 <__sfp+0x90>
8111bdb4:	213fffc4 	addi	r4,r4,-1
8111bdb8:	1c3ffd04 	addi	r16,r3,-12
8111bdbc:	18c01a04 	addi	r3,r3,104
8111bdc0:	247ffa1e 	bne	r4,r17,8111bdac <__reset+0xfb0fbdac>
8111bdc4:	90800017 	ldw	r2,0(r18)
8111bdc8:	10001d26 	beq	r2,zero,8111be40 <__sfp+0xfc>
8111bdcc:	1025883a 	mov	r18,r2
8111bdd0:	003fee06 	br	8111bd8c <__reset+0xfb0fbd8c>
8111bdd4:	00bfffc4 	movi	r2,-1
8111bdd8:	8080038d 	sth	r2,14(r16)
8111bddc:	00800044 	movi	r2,1
8111bde0:	8080030d 	sth	r2,12(r16)
8111bde4:	80001915 	stw	zero,100(r16)
8111bde8:	80000015 	stw	zero,0(r16)
8111bdec:	80000215 	stw	zero,8(r16)
8111bdf0:	80000115 	stw	zero,4(r16)
8111bdf4:	80000415 	stw	zero,16(r16)
8111bdf8:	80000515 	stw	zero,20(r16)
8111bdfc:	80000615 	stw	zero,24(r16)
8111be00:	01800204 	movi	r6,8
8111be04:	000b883a 	mov	r5,zero
8111be08:	81001704 	addi	r4,r16,92
8111be0c:	11132040 	call	81113204 <memset>
8111be10:	8005883a 	mov	r2,r16
8111be14:	80000c15 	stw	zero,48(r16)
8111be18:	80000d15 	stw	zero,52(r16)
8111be1c:	80001115 	stw	zero,68(r16)
8111be20:	80001215 	stw	zero,72(r16)
8111be24:	dfc00417 	ldw	ra,16(sp)
8111be28:	dcc00317 	ldw	r19,12(sp)
8111be2c:	dc800217 	ldw	r18,8(sp)
8111be30:	dc400117 	ldw	r17,4(sp)
8111be34:	dc000017 	ldw	r16,0(sp)
8111be38:	dec00504 	addi	sp,sp,20
8111be3c:	f800283a 	ret
8111be40:	01400104 	movi	r5,4
8111be44:	9809883a 	mov	r4,r19
8111be48:	111bcd40 	call	8111bcd4 <__sfmoreglue>
8111be4c:	90800015 	stw	r2,0(r18)
8111be50:	103fde1e 	bne	r2,zero,8111bdcc <__reset+0xfb0fbdcc>
8111be54:	00800304 	movi	r2,12
8111be58:	98800015 	stw	r2,0(r19)
8111be5c:	0005883a 	mov	r2,zero
8111be60:	003ff006 	br	8111be24 <__reset+0xfb0fbe24>

8111be64 <_cleanup>:
8111be64:	00a04534 	movhi	r2,33044
8111be68:	108aa504 	addi	r2,r2,10900
8111be6c:	11000017 	ldw	r4,0(r2)
8111be70:	016044b4 	movhi	r5,33042
8111be74:	294e3604 	addi	r5,r5,14552
8111be78:	111cbbc1 	jmpi	8111cbbc <_fwalk_reent>

8111be7c <__sinit>:
8111be7c:	20800e17 	ldw	r2,56(r4)
8111be80:	10000126 	beq	r2,zero,8111be88 <__sinit+0xc>
8111be84:	f800283a 	ret
8111be88:	111bb281 	jmpi	8111bb28 <__sinit.part.1>

8111be8c <__sfp_lock_acquire>:
8111be8c:	f800283a 	ret

8111be90 <__sfp_lock_release>:
8111be90:	f800283a 	ret

8111be94 <__sinit_lock_acquire>:
8111be94:	f800283a 	ret

8111be98 <__sinit_lock_release>:
8111be98:	f800283a 	ret

8111be9c <__fp_lock_all>:
8111be9c:	00a04534 	movhi	r2,33044
8111bea0:	108aa604 	addi	r2,r2,10904
8111bea4:	11000017 	ldw	r4,0(r2)
8111bea8:	016044b4 	movhi	r5,33042
8111beac:	296f3304 	addi	r5,r5,-17204
8111beb0:	111caf01 	jmpi	8111caf0 <_fwalk>

8111beb4 <__fp_unlock_all>:
8111beb4:	00a04534 	movhi	r2,33044
8111beb8:	108aa604 	addi	r2,r2,10904
8111bebc:	11000017 	ldw	r4,0(r2)
8111bec0:	016044b4 	movhi	r5,33042
8111bec4:	296ec504 	addi	r5,r5,-17644
8111bec8:	111caf01 	jmpi	8111caf0 <_fwalk>

8111becc <__sflags>:
8111becc:	28800007 	ldb	r2,0(r5)
8111bed0:	00c01c84 	movi	r3,114
8111bed4:	10c02426 	beq	r2,r3,8111bf68 <__sflags+0x9c>
8111bed8:	00c01dc4 	movi	r3,119
8111bedc:	10c01e26 	beq	r2,r3,8111bf58 <__sflags+0x8c>
8111bee0:	00c01844 	movi	r3,97
8111bee4:	10c00426 	beq	r2,r3,8111bef8 <__sflags+0x2c>
8111bee8:	00800584 	movi	r2,22
8111beec:	20800015 	stw	r2,0(r4)
8111bef0:	0005883a 	mov	r2,zero
8111bef4:	f800283a 	ret
8111bef8:	02c08204 	movi	r11,520
8111befc:	01000044 	movi	r4,1
8111bf00:	00804204 	movi	r2,264
8111bf04:	01c00ac4 	movi	r7,43
8111bf08:	02bff8c4 	movi	r10,-29
8111bf0c:	027fff04 	movi	r9,-4
8111bf10:	02001e04 	movi	r8,120
8111bf14:	29400044 	addi	r5,r5,1
8111bf18:	28c00007 	ldb	r3,0(r5)
8111bf1c:	18000626 	beq	r3,zero,8111bf38 <__sflags+0x6c>
8111bf20:	19c00826 	beq	r3,r7,8111bf44 <__sflags+0x78>
8111bf24:	1a3ffb1e 	bne	r3,r8,8111bf14 <__reset+0xfb0fbf14>
8111bf28:	29400044 	addi	r5,r5,1
8111bf2c:	28c00007 	ldb	r3,0(r5)
8111bf30:	21020014 	ori	r4,r4,2048
8111bf34:	183ffa1e 	bne	r3,zero,8111bf20 <__reset+0xfb0fbf20>
8111bf38:	22c8b03a 	or	r4,r4,r11
8111bf3c:	31000015 	stw	r4,0(r6)
8111bf40:	f800283a 	ret
8111bf44:	1284703a 	and	r2,r2,r10
8111bf48:	2248703a 	and	r4,r4,r9
8111bf4c:	10800414 	ori	r2,r2,16
8111bf50:	21000094 	ori	r4,r4,2
8111bf54:	003fef06 	br	8111bf14 <__reset+0xfb0fbf14>
8111bf58:	02c18004 	movi	r11,1536
8111bf5c:	01000044 	movi	r4,1
8111bf60:	00800204 	movi	r2,8
8111bf64:	003fe706 	br	8111bf04 <__reset+0xfb0fbf04>
8111bf68:	0017883a 	mov	r11,zero
8111bf6c:	0009883a 	mov	r4,zero
8111bf70:	00800104 	movi	r2,4
8111bf74:	003fe306 	br	8111bf04 <__reset+0xfb0fbf04>

8111bf78 <_fread_r>:
8111bf78:	defff404 	addi	sp,sp,-48
8111bf7c:	de00012e 	bgeu	sp,et,8111bf84 <_fread_r+0xc>
8111bf80:	003b68fa 	trap	3
8111bf84:	dd800815 	stw	r22,32(sp)
8111bf88:	39ad383a 	mul	r22,r7,r6
8111bf8c:	dc000215 	stw	r16,8(sp)
8111bf90:	dfc00b15 	stw	ra,44(sp)
8111bf94:	df000a15 	stw	fp,40(sp)
8111bf98:	ddc00915 	stw	r23,36(sp)
8111bf9c:	dd400715 	stw	r21,28(sp)
8111bfa0:	dd000615 	stw	r20,24(sp)
8111bfa4:	dcc00515 	stw	r19,20(sp)
8111bfa8:	dc800415 	stw	r18,16(sp)
8111bfac:	dc400315 	stw	r17,12(sp)
8111bfb0:	dc000c17 	ldw	r16,48(sp)
8111bfb4:	b0003b26 	beq	r22,zero,8111c0a4 <_fread_r+0x12c>
8111bfb8:	302f883a 	mov	r23,r6
8111bfbc:	382b883a 	mov	r21,r7
8111bfc0:	2029883a 	mov	r20,r4
8111bfc4:	2827883a 	mov	r19,r5
8111bfc8:	20000226 	beq	r4,zero,8111bfd4 <_fread_r+0x5c>
8111bfcc:	20800e17 	ldw	r2,56(r4)
8111bfd0:	10006e26 	beq	r2,zero,8111c18c <_fread_r+0x214>
8111bfd4:	8080030b 	ldhu	r2,12(r16)
8111bfd8:	10c8000c 	andi	r3,r2,8192
8111bfdc:	1800061e 	bne	r3,zero,8111bff8 <_fread_r+0x80>
8111bfe0:	81001917 	ldw	r4,100(r16)
8111bfe4:	00f7ffc4 	movi	r3,-8193
8111bfe8:	10880014 	ori	r2,r2,8192
8111bfec:	20c6703a 	and	r3,r4,r3
8111bff0:	8080030d 	sth	r2,12(r16)
8111bff4:	80c01915 	stw	r3,100(r16)
8111bff8:	84400117 	ldw	r17,4(r16)
8111bffc:	88005f16 	blt	r17,zero,8111c17c <_fread_r+0x204>
8111c000:	8809883a 	mov	r4,r17
8111c004:	1080008c 	andi	r2,r2,2
8111c008:	1000281e 	bne	r2,zero,8111c0ac <_fread_r+0x134>
8111c00c:	b025883a 	mov	r18,r22
8111c010:	00000b06 	br	8111c040 <_fread_r+0xc8>
8111c014:	11130b40 	call	811130b4 <memcpy>
8111c018:	80800017 	ldw	r2,0(r16)
8111c01c:	9c67883a 	add	r19,r19,r17
8111c020:	9465c83a 	sub	r18,r18,r17
8111c024:	1463883a 	add	r17,r2,r17
8111c028:	800b883a 	mov	r5,r16
8111c02c:	a009883a 	mov	r4,r20
8111c030:	84400015 	stw	r17,0(r16)
8111c034:	11136800 	call	81113680 <__srefill_r>
8111c038:	10004c1e 	bne	r2,zero,8111c16c <_fread_r+0x1f4>
8111c03c:	84400117 	ldw	r17,4(r16)
8111c040:	880d883a 	mov	r6,r17
8111c044:	9809883a 	mov	r4,r19
8111c048:	81400017 	ldw	r5,0(r16)
8111c04c:	8cbff136 	bltu	r17,r18,8111c014 <__reset+0xfb0fc014>
8111c050:	900d883a 	mov	r6,r18
8111c054:	11130b40 	call	811130b4 <memcpy>
8111c058:	80c00117 	ldw	r3,4(r16)
8111c05c:	81000017 	ldw	r4,0(r16)
8111c060:	a805883a 	mov	r2,r21
8111c064:	1c87c83a 	sub	r3,r3,r18
8111c068:	24a5883a 	add	r18,r4,r18
8111c06c:	80c00115 	stw	r3,4(r16)
8111c070:	84800015 	stw	r18,0(r16)
8111c074:	dfc00b17 	ldw	ra,44(sp)
8111c078:	df000a17 	ldw	fp,40(sp)
8111c07c:	ddc00917 	ldw	r23,36(sp)
8111c080:	dd800817 	ldw	r22,32(sp)
8111c084:	dd400717 	ldw	r21,28(sp)
8111c088:	dd000617 	ldw	r20,24(sp)
8111c08c:	dcc00517 	ldw	r19,20(sp)
8111c090:	dc800417 	ldw	r18,16(sp)
8111c094:	dc400317 	ldw	r17,12(sp)
8111c098:	dc000217 	ldw	r16,8(sp)
8111c09c:	dec00c04 	addi	sp,sp,48
8111c0a0:	f800283a 	ret
8111c0a4:	0005883a 	mov	r2,zero
8111c0a8:	003ff206 	br	8111c074 <__reset+0xfb0fc074>
8111c0ac:	b007883a 	mov	r3,r22
8111c0b0:	2580012e 	bgeu	r4,r22,8111c0b8 <_fread_r+0x140>
8111c0b4:	2007883a 	mov	r3,r4
8111c0b8:	81400017 	ldw	r5,0(r16)
8111c0bc:	180d883a 	mov	r6,r3
8111c0c0:	9809883a 	mov	r4,r19
8111c0c4:	d8c00115 	stw	r3,4(sp)
8111c0c8:	11130b40 	call	811130b4 <memcpy>
8111c0cc:	d8c00117 	ldw	r3,4(sp)
8111c0d0:	84400017 	ldw	r17,0(r16)
8111c0d4:	80800117 	ldw	r2,4(r16)
8111c0d8:	81400c17 	ldw	r5,48(r16)
8111c0dc:	88e3883a 	add	r17,r17,r3
8111c0e0:	10c5c83a 	sub	r2,r2,r3
8111c0e4:	84400015 	stw	r17,0(r16)
8111c0e8:	80800115 	stw	r2,4(r16)
8111c0ec:	b0e5c83a 	sub	r18,r22,r3
8111c0f0:	28002b26 	beq	r5,zero,8111c1a0 <_fread_r+0x228>
8111c0f4:	90002b26 	beq	r18,zero,8111c1a4 <_fread_r+0x22c>
8111c0f8:	80801004 	addi	r2,r16,64
8111c0fc:	28800526 	beq	r5,r2,8111c114 <_fread_r+0x19c>
8111c100:	a009883a 	mov	r4,r20
8111c104:	d8c00115 	stw	r3,4(sp)
8111c108:	111c3140 	call	8111c314 <_free_r>
8111c10c:	d8c00117 	ldw	r3,4(sp)
8111c110:	84400017 	ldw	r17,0(r16)
8111c114:	80000c15 	stw	zero,48(r16)
8111c118:	80800517 	ldw	r2,20(r16)
8111c11c:	87000417 	ldw	fp,16(r16)
8111c120:	98e7883a 	add	r19,r19,r3
8111c124:	d8800015 	stw	r2,0(sp)
8111c128:	00000106 	br	8111c130 <_fread_r+0x1b8>
8111c12c:	90001d26 	beq	r18,zero,8111c1a4 <_fread_r+0x22c>
8111c130:	84c00415 	stw	r19,16(r16)
8111c134:	84800515 	stw	r18,20(r16)
8111c138:	84c00015 	stw	r19,0(r16)
8111c13c:	a009883a 	mov	r4,r20
8111c140:	800b883a 	mov	r5,r16
8111c144:	11136800 	call	81113680 <__srefill_r>
8111c148:	d9000017 	ldw	r4,0(sp)
8111c14c:	80c00117 	ldw	r3,4(r16)
8111c150:	87000415 	stw	fp,16(r16)
8111c154:	81000515 	stw	r4,20(r16)
8111c158:	84400015 	stw	r17,0(r16)
8111c15c:	80000115 	stw	zero,4(r16)
8111c160:	90e5c83a 	sub	r18,r18,r3
8111c164:	98e7883a 	add	r19,r19,r3
8111c168:	103ff026 	beq	r2,zero,8111c12c <__reset+0xfb0fc12c>
8111c16c:	b80b883a 	mov	r5,r23
8111c170:	b489c83a 	sub	r4,r22,r18
8111c174:	112569c0 	call	8112569c <__udivsi3>
8111c178:	003fbe06 	br	8111c074 <__reset+0xfb0fc074>
8111c17c:	80000115 	stw	zero,4(r16)
8111c180:	0009883a 	mov	r4,zero
8111c184:	0023883a 	mov	r17,zero
8111c188:	003f9e06 	br	8111c004 <__reset+0xfb0fc004>
8111c18c:	111be7c0 	call	8111be7c <__sinit>
8111c190:	8080030b 	ldhu	r2,12(r16)
8111c194:	10c8000c 	andi	r3,r2,8192
8111c198:	183f971e 	bne	r3,zero,8111bff8 <__reset+0xfb0fbff8>
8111c19c:	003f9006 	br	8111bfe0 <__reset+0xfb0fbfe0>
8111c1a0:	903fdd1e 	bne	r18,zero,8111c118 <__reset+0xfb0fc118>
8111c1a4:	a805883a 	mov	r2,r21
8111c1a8:	003fb206 	br	8111c074 <__reset+0xfb0fc074>

8111c1ac <fread>:
8111c1ac:	defffe04 	addi	sp,sp,-8
8111c1b0:	00a04534 	movhi	r2,33044
8111c1b4:	de00012e 	bgeu	sp,et,8111c1bc <fread+0x10>
8111c1b8:	003b68fa 	trap	3
8111c1bc:	108aa604 	addi	r2,r2,10904
8111c1c0:	d9c00015 	stw	r7,0(sp)
8111c1c4:	300f883a 	mov	r7,r6
8111c1c8:	280d883a 	mov	r6,r5
8111c1cc:	200b883a 	mov	r5,r4
8111c1d0:	11000017 	ldw	r4,0(r2)
8111c1d4:	dfc00115 	stw	ra,4(sp)
8111c1d8:	111bf780 	call	8111bf78 <_fread_r>
8111c1dc:	dfc00117 	ldw	ra,4(sp)
8111c1e0:	dec00204 	addi	sp,sp,8
8111c1e4:	f800283a 	ret

8111c1e8 <_malloc_trim_r>:
8111c1e8:	defffb04 	addi	sp,sp,-20
8111c1ec:	de00012e 	bgeu	sp,et,8111c1f4 <_malloc_trim_r+0xc>
8111c1f0:	003b68fa 	trap	3
8111c1f4:	dcc00315 	stw	r19,12(sp)
8111c1f8:	04e04534 	movhi	r19,33044
8111c1fc:	dc800215 	stw	r18,8(sp)
8111c200:	dc400115 	stw	r17,4(sp)
8111c204:	dc000015 	stw	r16,0(sp)
8111c208:	dfc00415 	stw	ra,16(sp)
8111c20c:	2821883a 	mov	r16,r5
8111c210:	9cc46404 	addi	r19,r19,4496
8111c214:	2025883a 	mov	r18,r4
8111c218:	11296dc0 	call	811296dc <__malloc_lock>
8111c21c:	98800217 	ldw	r2,8(r19)
8111c220:	14400117 	ldw	r17,4(r2)
8111c224:	00bfff04 	movi	r2,-4
8111c228:	88a2703a 	and	r17,r17,r2
8111c22c:	8c21c83a 	sub	r16,r17,r16
8111c230:	8403fbc4 	addi	r16,r16,4079
8111c234:	8020d33a 	srli	r16,r16,12
8111c238:	0083ffc4 	movi	r2,4095
8111c23c:	843fffc4 	addi	r16,r16,-1
8111c240:	8020933a 	slli	r16,r16,12
8111c244:	1400060e 	bge	r2,r16,8111c260 <_malloc_trim_r+0x78>
8111c248:	000b883a 	mov	r5,zero
8111c24c:	9009883a 	mov	r4,r18
8111c250:	111385c0 	call	8111385c <_sbrk_r>
8111c254:	98c00217 	ldw	r3,8(r19)
8111c258:	1c47883a 	add	r3,r3,r17
8111c25c:	10c00a26 	beq	r2,r3,8111c288 <_malloc_trim_r+0xa0>
8111c260:	9009883a 	mov	r4,r18
8111c264:	11298040 	call	81129804 <__malloc_unlock>
8111c268:	0005883a 	mov	r2,zero
8111c26c:	dfc00417 	ldw	ra,16(sp)
8111c270:	dcc00317 	ldw	r19,12(sp)
8111c274:	dc800217 	ldw	r18,8(sp)
8111c278:	dc400117 	ldw	r17,4(sp)
8111c27c:	dc000017 	ldw	r16,0(sp)
8111c280:	dec00504 	addi	sp,sp,20
8111c284:	f800283a 	ret
8111c288:	040bc83a 	sub	r5,zero,r16
8111c28c:	9009883a 	mov	r4,r18
8111c290:	111385c0 	call	8111385c <_sbrk_r>
8111c294:	00ffffc4 	movi	r3,-1
8111c298:	10c00d26 	beq	r2,r3,8111c2d0 <_malloc_trim_r+0xe8>
8111c29c:	00e04534 	movhi	r3,33044
8111c2a0:	18cb6804 	addi	r3,r3,11680
8111c2a4:	18800017 	ldw	r2,0(r3)
8111c2a8:	99000217 	ldw	r4,8(r19)
8111c2ac:	8c23c83a 	sub	r17,r17,r16
8111c2b0:	8c400054 	ori	r17,r17,1
8111c2b4:	1421c83a 	sub	r16,r2,r16
8111c2b8:	24400115 	stw	r17,4(r4)
8111c2bc:	9009883a 	mov	r4,r18
8111c2c0:	1c000015 	stw	r16,0(r3)
8111c2c4:	11298040 	call	81129804 <__malloc_unlock>
8111c2c8:	00800044 	movi	r2,1
8111c2cc:	003fe706 	br	8111c26c <__reset+0xfb0fc26c>
8111c2d0:	000b883a 	mov	r5,zero
8111c2d4:	9009883a 	mov	r4,r18
8111c2d8:	111385c0 	call	8111385c <_sbrk_r>
8111c2dc:	99000217 	ldw	r4,8(r19)
8111c2e0:	014003c4 	movi	r5,15
8111c2e4:	1107c83a 	sub	r3,r2,r4
8111c2e8:	28ffdd0e 	bge	r5,r3,8111c260 <__reset+0xfb0fc260>
8111c2ec:	01604534 	movhi	r5,33044
8111c2f0:	294aa704 	addi	r5,r5,10908
8111c2f4:	29400017 	ldw	r5,0(r5)
8111c2f8:	18c00054 	ori	r3,r3,1
8111c2fc:	20c00115 	stw	r3,4(r4)
8111c300:	00e04534 	movhi	r3,33044
8111c304:	1145c83a 	sub	r2,r2,r5
8111c308:	18cb6804 	addi	r3,r3,11680
8111c30c:	18800015 	stw	r2,0(r3)
8111c310:	003fd306 	br	8111c260 <__reset+0xfb0fc260>

8111c314 <_free_r>:
8111c314:	28004326 	beq	r5,zero,8111c424 <_free_r+0x110>
8111c318:	defffd04 	addi	sp,sp,-12
8111c31c:	de00012e 	bgeu	sp,et,8111c324 <_free_r+0x10>
8111c320:	003b68fa 	trap	3
8111c324:	dc400115 	stw	r17,4(sp)
8111c328:	dc000015 	stw	r16,0(sp)
8111c32c:	2023883a 	mov	r17,r4
8111c330:	2821883a 	mov	r16,r5
8111c334:	dfc00215 	stw	ra,8(sp)
8111c338:	11296dc0 	call	811296dc <__malloc_lock>
8111c33c:	81ffff17 	ldw	r7,-4(r16)
8111c340:	00bfff84 	movi	r2,-2
8111c344:	01204534 	movhi	r4,33044
8111c348:	81bffe04 	addi	r6,r16,-8
8111c34c:	3884703a 	and	r2,r7,r2
8111c350:	21046404 	addi	r4,r4,4496
8111c354:	308b883a 	add	r5,r6,r2
8111c358:	2a400117 	ldw	r9,4(r5)
8111c35c:	22000217 	ldw	r8,8(r4)
8111c360:	00ffff04 	movi	r3,-4
8111c364:	48c6703a 	and	r3,r9,r3
8111c368:	2a005726 	beq	r5,r8,8111c4c8 <_free_r+0x1b4>
8111c36c:	28c00115 	stw	r3,4(r5)
8111c370:	39c0004c 	andi	r7,r7,1
8111c374:	3800091e 	bne	r7,zero,8111c39c <_free_r+0x88>
8111c378:	823ffe17 	ldw	r8,-8(r16)
8111c37c:	22400204 	addi	r9,r4,8
8111c380:	320dc83a 	sub	r6,r6,r8
8111c384:	31c00217 	ldw	r7,8(r6)
8111c388:	1205883a 	add	r2,r2,r8
8111c38c:	3a406526 	beq	r7,r9,8111c524 <_free_r+0x210>
8111c390:	32000317 	ldw	r8,12(r6)
8111c394:	3a000315 	stw	r8,12(r7)
8111c398:	41c00215 	stw	r7,8(r8)
8111c39c:	28cf883a 	add	r7,r5,r3
8111c3a0:	39c00117 	ldw	r7,4(r7)
8111c3a4:	39c0004c 	andi	r7,r7,1
8111c3a8:	38003a26 	beq	r7,zero,8111c494 <_free_r+0x180>
8111c3ac:	10c00054 	ori	r3,r2,1
8111c3b0:	30c00115 	stw	r3,4(r6)
8111c3b4:	3087883a 	add	r3,r6,r2
8111c3b8:	18800015 	stw	r2,0(r3)
8111c3bc:	00c07fc4 	movi	r3,511
8111c3c0:	18801936 	bltu	r3,r2,8111c428 <_free_r+0x114>
8111c3c4:	1004d0fa 	srli	r2,r2,3
8111c3c8:	01c00044 	movi	r7,1
8111c3cc:	21400117 	ldw	r5,4(r4)
8111c3d0:	10c00044 	addi	r3,r2,1
8111c3d4:	18c7883a 	add	r3,r3,r3
8111c3d8:	1005d0ba 	srai	r2,r2,2
8111c3dc:	18c7883a 	add	r3,r3,r3
8111c3e0:	18c7883a 	add	r3,r3,r3
8111c3e4:	1907883a 	add	r3,r3,r4
8111c3e8:	3884983a 	sll	r2,r7,r2
8111c3ec:	19c00017 	ldw	r7,0(r3)
8111c3f0:	1a3ffe04 	addi	r8,r3,-8
8111c3f4:	1144b03a 	or	r2,r2,r5
8111c3f8:	32000315 	stw	r8,12(r6)
8111c3fc:	31c00215 	stw	r7,8(r6)
8111c400:	20800115 	stw	r2,4(r4)
8111c404:	19800015 	stw	r6,0(r3)
8111c408:	39800315 	stw	r6,12(r7)
8111c40c:	8809883a 	mov	r4,r17
8111c410:	dfc00217 	ldw	ra,8(sp)
8111c414:	dc400117 	ldw	r17,4(sp)
8111c418:	dc000017 	ldw	r16,0(sp)
8111c41c:	dec00304 	addi	sp,sp,12
8111c420:	11298041 	jmpi	81129804 <__malloc_unlock>
8111c424:	f800283a 	ret
8111c428:	100ad27a 	srli	r5,r2,9
8111c42c:	00c00104 	movi	r3,4
8111c430:	19404a36 	bltu	r3,r5,8111c55c <_free_r+0x248>
8111c434:	100ad1ba 	srli	r5,r2,6
8111c438:	28c00e44 	addi	r3,r5,57
8111c43c:	18c7883a 	add	r3,r3,r3
8111c440:	29400e04 	addi	r5,r5,56
8111c444:	18c7883a 	add	r3,r3,r3
8111c448:	18c7883a 	add	r3,r3,r3
8111c44c:	1909883a 	add	r4,r3,r4
8111c450:	20c00017 	ldw	r3,0(r4)
8111c454:	01e04534 	movhi	r7,33044
8111c458:	213ffe04 	addi	r4,r4,-8
8111c45c:	39c46404 	addi	r7,r7,4496
8111c460:	20c04426 	beq	r4,r3,8111c574 <_free_r+0x260>
8111c464:	01ffff04 	movi	r7,-4
8111c468:	19400117 	ldw	r5,4(r3)
8111c46c:	29ca703a 	and	r5,r5,r7
8111c470:	1140022e 	bgeu	r2,r5,8111c47c <_free_r+0x168>
8111c474:	18c00217 	ldw	r3,8(r3)
8111c478:	20fffb1e 	bne	r4,r3,8111c468 <__reset+0xfb0fc468>
8111c47c:	19000317 	ldw	r4,12(r3)
8111c480:	31000315 	stw	r4,12(r6)
8111c484:	30c00215 	stw	r3,8(r6)
8111c488:	21800215 	stw	r6,8(r4)
8111c48c:	19800315 	stw	r6,12(r3)
8111c490:	003fde06 	br	8111c40c <__reset+0xfb0fc40c>
8111c494:	29c00217 	ldw	r7,8(r5)
8111c498:	10c5883a 	add	r2,r2,r3
8111c49c:	00e04534 	movhi	r3,33044
8111c4a0:	18c46604 	addi	r3,r3,4504
8111c4a4:	38c03b26 	beq	r7,r3,8111c594 <_free_r+0x280>
8111c4a8:	2a000317 	ldw	r8,12(r5)
8111c4ac:	11400054 	ori	r5,r2,1
8111c4b0:	3087883a 	add	r3,r6,r2
8111c4b4:	3a000315 	stw	r8,12(r7)
8111c4b8:	41c00215 	stw	r7,8(r8)
8111c4bc:	31400115 	stw	r5,4(r6)
8111c4c0:	18800015 	stw	r2,0(r3)
8111c4c4:	003fbd06 	br	8111c3bc <__reset+0xfb0fc3bc>
8111c4c8:	39c0004c 	andi	r7,r7,1
8111c4cc:	10c5883a 	add	r2,r2,r3
8111c4d0:	3800071e 	bne	r7,zero,8111c4f0 <_free_r+0x1dc>
8111c4d4:	81fffe17 	ldw	r7,-8(r16)
8111c4d8:	31cdc83a 	sub	r6,r6,r7
8111c4dc:	30c00317 	ldw	r3,12(r6)
8111c4e0:	31400217 	ldw	r5,8(r6)
8111c4e4:	11c5883a 	add	r2,r2,r7
8111c4e8:	28c00315 	stw	r3,12(r5)
8111c4ec:	19400215 	stw	r5,8(r3)
8111c4f0:	10c00054 	ori	r3,r2,1
8111c4f4:	30c00115 	stw	r3,4(r6)
8111c4f8:	00e04534 	movhi	r3,33044
8111c4fc:	18caa804 	addi	r3,r3,10912
8111c500:	18c00017 	ldw	r3,0(r3)
8111c504:	21800215 	stw	r6,8(r4)
8111c508:	10ffc036 	bltu	r2,r3,8111c40c <__reset+0xfb0fc40c>
8111c50c:	00a04534 	movhi	r2,33044
8111c510:	108b0504 	addi	r2,r2,11284
8111c514:	11400017 	ldw	r5,0(r2)
8111c518:	8809883a 	mov	r4,r17
8111c51c:	111c1e80 	call	8111c1e8 <_malloc_trim_r>
8111c520:	003fba06 	br	8111c40c <__reset+0xfb0fc40c>
8111c524:	28c9883a 	add	r4,r5,r3
8111c528:	21000117 	ldw	r4,4(r4)
8111c52c:	2100004c 	andi	r4,r4,1
8111c530:	2000391e 	bne	r4,zero,8111c618 <_free_r+0x304>
8111c534:	29c00217 	ldw	r7,8(r5)
8111c538:	29000317 	ldw	r4,12(r5)
8111c53c:	1885883a 	add	r2,r3,r2
8111c540:	10c00054 	ori	r3,r2,1
8111c544:	39000315 	stw	r4,12(r7)
8111c548:	21c00215 	stw	r7,8(r4)
8111c54c:	30c00115 	stw	r3,4(r6)
8111c550:	308d883a 	add	r6,r6,r2
8111c554:	30800015 	stw	r2,0(r6)
8111c558:	003fac06 	br	8111c40c <__reset+0xfb0fc40c>
8111c55c:	00c00504 	movi	r3,20
8111c560:	19401536 	bltu	r3,r5,8111c5b8 <_free_r+0x2a4>
8111c564:	28c01704 	addi	r3,r5,92
8111c568:	18c7883a 	add	r3,r3,r3
8111c56c:	294016c4 	addi	r5,r5,91
8111c570:	003fb406 	br	8111c444 <__reset+0xfb0fc444>
8111c574:	280bd0ba 	srai	r5,r5,2
8111c578:	00c00044 	movi	r3,1
8111c57c:	38800117 	ldw	r2,4(r7)
8111c580:	194a983a 	sll	r5,r3,r5
8111c584:	2007883a 	mov	r3,r4
8111c588:	2884b03a 	or	r2,r5,r2
8111c58c:	38800115 	stw	r2,4(r7)
8111c590:	003fbb06 	br	8111c480 <__reset+0xfb0fc480>
8111c594:	21800515 	stw	r6,20(r4)
8111c598:	21800415 	stw	r6,16(r4)
8111c59c:	10c00054 	ori	r3,r2,1
8111c5a0:	31c00315 	stw	r7,12(r6)
8111c5a4:	31c00215 	stw	r7,8(r6)
8111c5a8:	30c00115 	stw	r3,4(r6)
8111c5ac:	308d883a 	add	r6,r6,r2
8111c5b0:	30800015 	stw	r2,0(r6)
8111c5b4:	003f9506 	br	8111c40c <__reset+0xfb0fc40c>
8111c5b8:	00c01504 	movi	r3,84
8111c5bc:	19400536 	bltu	r3,r5,8111c5d4 <_free_r+0x2c0>
8111c5c0:	100ad33a 	srli	r5,r2,12
8111c5c4:	28c01bc4 	addi	r3,r5,111
8111c5c8:	18c7883a 	add	r3,r3,r3
8111c5cc:	29401b84 	addi	r5,r5,110
8111c5d0:	003f9c06 	br	8111c444 <__reset+0xfb0fc444>
8111c5d4:	00c05504 	movi	r3,340
8111c5d8:	19400536 	bltu	r3,r5,8111c5f0 <_free_r+0x2dc>
8111c5dc:	100ad3fa 	srli	r5,r2,15
8111c5e0:	28c01e04 	addi	r3,r5,120
8111c5e4:	18c7883a 	add	r3,r3,r3
8111c5e8:	29401dc4 	addi	r5,r5,119
8111c5ec:	003f9506 	br	8111c444 <__reset+0xfb0fc444>
8111c5f0:	00c15504 	movi	r3,1364
8111c5f4:	19400536 	bltu	r3,r5,8111c60c <_free_r+0x2f8>
8111c5f8:	100ad4ba 	srli	r5,r2,18
8111c5fc:	28c01f44 	addi	r3,r5,125
8111c600:	18c7883a 	add	r3,r3,r3
8111c604:	29401f04 	addi	r5,r5,124
8111c608:	003f8e06 	br	8111c444 <__reset+0xfb0fc444>
8111c60c:	00c03f84 	movi	r3,254
8111c610:	01401f84 	movi	r5,126
8111c614:	003f8b06 	br	8111c444 <__reset+0xfb0fc444>
8111c618:	10c00054 	ori	r3,r2,1
8111c61c:	30c00115 	stw	r3,4(r6)
8111c620:	308d883a 	add	r6,r6,r2
8111c624:	30800015 	stw	r2,0(r6)
8111c628:	003f7806 	br	8111c40c <__reset+0xfb0fc40c>

8111c62c <__sfvwrite_r>:
8111c62c:	30800217 	ldw	r2,8(r6)
8111c630:	10006926 	beq	r2,zero,8111c7d8 <__sfvwrite_r+0x1ac>
8111c634:	defff404 	addi	sp,sp,-48
8111c638:	de00012e 	bgeu	sp,et,8111c640 <__sfvwrite_r+0x14>
8111c63c:	003b68fa 	trap	3
8111c640:	28c0030b 	ldhu	r3,12(r5)
8111c644:	dd400715 	stw	r21,28(sp)
8111c648:	dd000615 	stw	r20,24(sp)
8111c64c:	dc000215 	stw	r16,8(sp)
8111c650:	dfc00b15 	stw	ra,44(sp)
8111c654:	df000a15 	stw	fp,40(sp)
8111c658:	ddc00915 	stw	r23,36(sp)
8111c65c:	dd800815 	stw	r22,32(sp)
8111c660:	dcc00515 	stw	r19,20(sp)
8111c664:	dc800415 	stw	r18,16(sp)
8111c668:	dc400315 	stw	r17,12(sp)
8111c66c:	1880020c 	andi	r2,r3,8
8111c670:	2821883a 	mov	r16,r5
8111c674:	202b883a 	mov	r21,r4
8111c678:	3029883a 	mov	r20,r6
8111c67c:	10002726 	beq	r2,zero,8111c71c <__sfvwrite_r+0xf0>
8111c680:	28800417 	ldw	r2,16(r5)
8111c684:	10002526 	beq	r2,zero,8111c71c <__sfvwrite_r+0xf0>
8111c688:	1880008c 	andi	r2,r3,2
8111c68c:	a4400017 	ldw	r17,0(r20)
8111c690:	10002a26 	beq	r2,zero,8111c73c <__sfvwrite_r+0x110>
8111c694:	05a00034 	movhi	r22,32768
8111c698:	0027883a 	mov	r19,zero
8111c69c:	0025883a 	mov	r18,zero
8111c6a0:	b5bf0004 	addi	r22,r22,-1024
8111c6a4:	980d883a 	mov	r6,r19
8111c6a8:	a809883a 	mov	r4,r21
8111c6ac:	90004626 	beq	r18,zero,8111c7c8 <__sfvwrite_r+0x19c>
8111c6b0:	900f883a 	mov	r7,r18
8111c6b4:	b480022e 	bgeu	r22,r18,8111c6c0 <__sfvwrite_r+0x94>
8111c6b8:	01e00034 	movhi	r7,32768
8111c6bc:	39ff0004 	addi	r7,r7,-1024
8111c6c0:	80800917 	ldw	r2,36(r16)
8111c6c4:	81400717 	ldw	r5,28(r16)
8111c6c8:	103ee83a 	callr	r2
8111c6cc:	0080570e 	bge	zero,r2,8111c82c <__sfvwrite_r+0x200>
8111c6d0:	a0c00217 	ldw	r3,8(r20)
8111c6d4:	98a7883a 	add	r19,r19,r2
8111c6d8:	90a5c83a 	sub	r18,r18,r2
8111c6dc:	1885c83a 	sub	r2,r3,r2
8111c6e0:	a0800215 	stw	r2,8(r20)
8111c6e4:	103fef1e 	bne	r2,zero,8111c6a4 <__reset+0xfb0fc6a4>
8111c6e8:	0005883a 	mov	r2,zero
8111c6ec:	dfc00b17 	ldw	ra,44(sp)
8111c6f0:	df000a17 	ldw	fp,40(sp)
8111c6f4:	ddc00917 	ldw	r23,36(sp)
8111c6f8:	dd800817 	ldw	r22,32(sp)
8111c6fc:	dd400717 	ldw	r21,28(sp)
8111c700:	dd000617 	ldw	r20,24(sp)
8111c704:	dcc00517 	ldw	r19,20(sp)
8111c708:	dc800417 	ldw	r18,16(sp)
8111c70c:	dc400317 	ldw	r17,12(sp)
8111c710:	dc000217 	ldw	r16,8(sp)
8111c714:	dec00c04 	addi	sp,sp,48
8111c718:	f800283a 	ret
8111c71c:	800b883a 	mov	r5,r16
8111c720:	a809883a 	mov	r4,r21
8111c724:	1119e0c0 	call	81119e0c <__swsetup_r>
8111c728:	1000eb1e 	bne	r2,zero,8111cad8 <__sfvwrite_r+0x4ac>
8111c72c:	80c0030b 	ldhu	r3,12(r16)
8111c730:	a4400017 	ldw	r17,0(r20)
8111c734:	1880008c 	andi	r2,r3,2
8111c738:	103fd61e 	bne	r2,zero,8111c694 <__reset+0xfb0fc694>
8111c73c:	1880004c 	andi	r2,r3,1
8111c740:	10003f1e 	bne	r2,zero,8111c840 <__sfvwrite_r+0x214>
8111c744:	0039883a 	mov	fp,zero
8111c748:	0025883a 	mov	r18,zero
8111c74c:	90001a26 	beq	r18,zero,8111c7b8 <__sfvwrite_r+0x18c>
8111c750:	1880800c 	andi	r2,r3,512
8111c754:	84c00217 	ldw	r19,8(r16)
8111c758:	10002126 	beq	r2,zero,8111c7e0 <__sfvwrite_r+0x1b4>
8111c75c:	982f883a 	mov	r23,r19
8111c760:	94c09336 	bltu	r18,r19,8111c9b0 <__sfvwrite_r+0x384>
8111c764:	1881200c 	andi	r2,r3,1152
8111c768:	10009e1e 	bne	r2,zero,8111c9e4 <__sfvwrite_r+0x3b8>
8111c76c:	81000017 	ldw	r4,0(r16)
8111c770:	b80d883a 	mov	r6,r23
8111c774:	e00b883a 	mov	r5,fp
8111c778:	111d1880 	call	8111d188 <memmove>
8111c77c:	80c00217 	ldw	r3,8(r16)
8111c780:	81000017 	ldw	r4,0(r16)
8111c784:	9005883a 	mov	r2,r18
8111c788:	1ce7c83a 	sub	r19,r3,r19
8111c78c:	25cf883a 	add	r7,r4,r23
8111c790:	84c00215 	stw	r19,8(r16)
8111c794:	81c00015 	stw	r7,0(r16)
8111c798:	a0c00217 	ldw	r3,8(r20)
8111c79c:	e0b9883a 	add	fp,fp,r2
8111c7a0:	90a5c83a 	sub	r18,r18,r2
8111c7a4:	18a7c83a 	sub	r19,r3,r2
8111c7a8:	a4c00215 	stw	r19,8(r20)
8111c7ac:	983fce26 	beq	r19,zero,8111c6e8 <__reset+0xfb0fc6e8>
8111c7b0:	80c0030b 	ldhu	r3,12(r16)
8111c7b4:	903fe61e 	bne	r18,zero,8111c750 <__reset+0xfb0fc750>
8111c7b8:	8f000017 	ldw	fp,0(r17)
8111c7bc:	8c800117 	ldw	r18,4(r17)
8111c7c0:	8c400204 	addi	r17,r17,8
8111c7c4:	003fe106 	br	8111c74c <__reset+0xfb0fc74c>
8111c7c8:	8cc00017 	ldw	r19,0(r17)
8111c7cc:	8c800117 	ldw	r18,4(r17)
8111c7d0:	8c400204 	addi	r17,r17,8
8111c7d4:	003fb306 	br	8111c6a4 <__reset+0xfb0fc6a4>
8111c7d8:	0005883a 	mov	r2,zero
8111c7dc:	f800283a 	ret
8111c7e0:	81000017 	ldw	r4,0(r16)
8111c7e4:	80800417 	ldw	r2,16(r16)
8111c7e8:	11005736 	bltu	r2,r4,8111c948 <__sfvwrite_r+0x31c>
8111c7ec:	85c00517 	ldw	r23,20(r16)
8111c7f0:	95c05536 	bltu	r18,r23,8111c948 <__sfvwrite_r+0x31c>
8111c7f4:	00a00034 	movhi	r2,32768
8111c7f8:	10bfffc4 	addi	r2,r2,-1
8111c7fc:	9009883a 	mov	r4,r18
8111c800:	1480012e 	bgeu	r2,r18,8111c808 <__sfvwrite_r+0x1dc>
8111c804:	1009883a 	mov	r4,r2
8111c808:	b80b883a 	mov	r5,r23
8111c80c:	11255a40 	call	811255a4 <__divsi3>
8111c810:	15cf383a 	mul	r7,r2,r23
8111c814:	81400717 	ldw	r5,28(r16)
8111c818:	80800917 	ldw	r2,36(r16)
8111c81c:	e00d883a 	mov	r6,fp
8111c820:	a809883a 	mov	r4,r21
8111c824:	103ee83a 	callr	r2
8111c828:	00bfdb16 	blt	zero,r2,8111c798 <__reset+0xfb0fc798>
8111c82c:	8080030b 	ldhu	r2,12(r16)
8111c830:	10801014 	ori	r2,r2,64
8111c834:	8080030d 	sth	r2,12(r16)
8111c838:	00bfffc4 	movi	r2,-1
8111c83c:	003fab06 	br	8111c6ec <__reset+0xfb0fc6ec>
8111c840:	0027883a 	mov	r19,zero
8111c844:	0011883a 	mov	r8,zero
8111c848:	0039883a 	mov	fp,zero
8111c84c:	0025883a 	mov	r18,zero
8111c850:	90001f26 	beq	r18,zero,8111c8d0 <__sfvwrite_r+0x2a4>
8111c854:	40005a26 	beq	r8,zero,8111c9c0 <__sfvwrite_r+0x394>
8111c858:	982d883a 	mov	r22,r19
8111c85c:	94c0012e 	bgeu	r18,r19,8111c864 <__sfvwrite_r+0x238>
8111c860:	902d883a 	mov	r22,r18
8111c864:	81000017 	ldw	r4,0(r16)
8111c868:	80800417 	ldw	r2,16(r16)
8111c86c:	b02f883a 	mov	r23,r22
8111c870:	81c00517 	ldw	r7,20(r16)
8111c874:	1100032e 	bgeu	r2,r4,8111c884 <__sfvwrite_r+0x258>
8111c878:	80c00217 	ldw	r3,8(r16)
8111c87c:	38c7883a 	add	r3,r7,r3
8111c880:	1d801816 	blt	r3,r22,8111c8e4 <__sfvwrite_r+0x2b8>
8111c884:	b1c03e16 	blt	r22,r7,8111c980 <__sfvwrite_r+0x354>
8111c888:	80800917 	ldw	r2,36(r16)
8111c88c:	81400717 	ldw	r5,28(r16)
8111c890:	e00d883a 	mov	r6,fp
8111c894:	da000115 	stw	r8,4(sp)
8111c898:	a809883a 	mov	r4,r21
8111c89c:	103ee83a 	callr	r2
8111c8a0:	102f883a 	mov	r23,r2
8111c8a4:	da000117 	ldw	r8,4(sp)
8111c8a8:	00bfe00e 	bge	zero,r2,8111c82c <__reset+0xfb0fc82c>
8111c8ac:	9de7c83a 	sub	r19,r19,r23
8111c8b0:	98001f26 	beq	r19,zero,8111c930 <__sfvwrite_r+0x304>
8111c8b4:	a0800217 	ldw	r2,8(r20)
8111c8b8:	e5f9883a 	add	fp,fp,r23
8111c8bc:	95e5c83a 	sub	r18,r18,r23
8111c8c0:	15efc83a 	sub	r23,r2,r23
8111c8c4:	a5c00215 	stw	r23,8(r20)
8111c8c8:	b83f8726 	beq	r23,zero,8111c6e8 <__reset+0xfb0fc6e8>
8111c8cc:	903fe11e 	bne	r18,zero,8111c854 <__reset+0xfb0fc854>
8111c8d0:	8f000017 	ldw	fp,0(r17)
8111c8d4:	8c800117 	ldw	r18,4(r17)
8111c8d8:	0011883a 	mov	r8,zero
8111c8dc:	8c400204 	addi	r17,r17,8
8111c8e0:	003fdb06 	br	8111c850 <__reset+0xfb0fc850>
8111c8e4:	180d883a 	mov	r6,r3
8111c8e8:	e00b883a 	mov	r5,fp
8111c8ec:	da000115 	stw	r8,4(sp)
8111c8f0:	d8c00015 	stw	r3,0(sp)
8111c8f4:	111d1880 	call	8111d188 <memmove>
8111c8f8:	d8c00017 	ldw	r3,0(sp)
8111c8fc:	80800017 	ldw	r2,0(r16)
8111c900:	800b883a 	mov	r5,r16
8111c904:	a809883a 	mov	r4,r21
8111c908:	10c5883a 	add	r2,r2,r3
8111c90c:	80800015 	stw	r2,0(r16)
8111c910:	d8c00015 	stw	r3,0(sp)
8111c914:	111ba800 	call	8111ba80 <_fflush_r>
8111c918:	d8c00017 	ldw	r3,0(sp)
8111c91c:	da000117 	ldw	r8,4(sp)
8111c920:	103fc21e 	bne	r2,zero,8111c82c <__reset+0xfb0fc82c>
8111c924:	182f883a 	mov	r23,r3
8111c928:	9de7c83a 	sub	r19,r19,r23
8111c92c:	983fe11e 	bne	r19,zero,8111c8b4 <__reset+0xfb0fc8b4>
8111c930:	800b883a 	mov	r5,r16
8111c934:	a809883a 	mov	r4,r21
8111c938:	111ba800 	call	8111ba80 <_fflush_r>
8111c93c:	103fbb1e 	bne	r2,zero,8111c82c <__reset+0xfb0fc82c>
8111c940:	0011883a 	mov	r8,zero
8111c944:	003fdb06 	br	8111c8b4 <__reset+0xfb0fc8b4>
8111c948:	94c0012e 	bgeu	r18,r19,8111c950 <__sfvwrite_r+0x324>
8111c94c:	9027883a 	mov	r19,r18
8111c950:	980d883a 	mov	r6,r19
8111c954:	e00b883a 	mov	r5,fp
8111c958:	111d1880 	call	8111d188 <memmove>
8111c95c:	80800217 	ldw	r2,8(r16)
8111c960:	80c00017 	ldw	r3,0(r16)
8111c964:	14c5c83a 	sub	r2,r2,r19
8111c968:	1cc7883a 	add	r3,r3,r19
8111c96c:	80800215 	stw	r2,8(r16)
8111c970:	80c00015 	stw	r3,0(r16)
8111c974:	10004326 	beq	r2,zero,8111ca84 <__sfvwrite_r+0x458>
8111c978:	9805883a 	mov	r2,r19
8111c97c:	003f8606 	br	8111c798 <__reset+0xfb0fc798>
8111c980:	b00d883a 	mov	r6,r22
8111c984:	e00b883a 	mov	r5,fp
8111c988:	da000115 	stw	r8,4(sp)
8111c98c:	111d1880 	call	8111d188 <memmove>
8111c990:	80800217 	ldw	r2,8(r16)
8111c994:	80c00017 	ldw	r3,0(r16)
8111c998:	da000117 	ldw	r8,4(sp)
8111c99c:	1585c83a 	sub	r2,r2,r22
8111c9a0:	1dad883a 	add	r22,r3,r22
8111c9a4:	80800215 	stw	r2,8(r16)
8111c9a8:	85800015 	stw	r22,0(r16)
8111c9ac:	003fbf06 	br	8111c8ac <__reset+0xfb0fc8ac>
8111c9b0:	81000017 	ldw	r4,0(r16)
8111c9b4:	9027883a 	mov	r19,r18
8111c9b8:	902f883a 	mov	r23,r18
8111c9bc:	003f6c06 	br	8111c770 <__reset+0xfb0fc770>
8111c9c0:	900d883a 	mov	r6,r18
8111c9c4:	01400284 	movi	r5,10
8111c9c8:	e009883a 	mov	r4,fp
8111c9cc:	111d0a40 	call	8111d0a4 <memchr>
8111c9d0:	10003e26 	beq	r2,zero,8111cacc <__sfvwrite_r+0x4a0>
8111c9d4:	10800044 	addi	r2,r2,1
8111c9d8:	1727c83a 	sub	r19,r2,fp
8111c9dc:	02000044 	movi	r8,1
8111c9e0:	003f9d06 	br	8111c858 <__reset+0xfb0fc858>
8111c9e4:	80800517 	ldw	r2,20(r16)
8111c9e8:	81400417 	ldw	r5,16(r16)
8111c9ec:	81c00017 	ldw	r7,0(r16)
8111c9f0:	10a7883a 	add	r19,r2,r2
8111c9f4:	9885883a 	add	r2,r19,r2
8111c9f8:	1026d7fa 	srli	r19,r2,31
8111c9fc:	396dc83a 	sub	r22,r7,r5
8111ca00:	b1000044 	addi	r4,r22,1
8111ca04:	9885883a 	add	r2,r19,r2
8111ca08:	1027d07a 	srai	r19,r2,1
8111ca0c:	2485883a 	add	r2,r4,r18
8111ca10:	980d883a 	mov	r6,r19
8111ca14:	9880022e 	bgeu	r19,r2,8111ca20 <__sfvwrite_r+0x3f4>
8111ca18:	1027883a 	mov	r19,r2
8111ca1c:	100d883a 	mov	r6,r2
8111ca20:	18c1000c 	andi	r3,r3,1024
8111ca24:	18001c26 	beq	r3,zero,8111ca98 <__sfvwrite_r+0x46c>
8111ca28:	300b883a 	mov	r5,r6
8111ca2c:	a809883a 	mov	r4,r21
8111ca30:	11128a00 	call	811128a0 <_malloc_r>
8111ca34:	102f883a 	mov	r23,r2
8111ca38:	10002926 	beq	r2,zero,8111cae0 <__sfvwrite_r+0x4b4>
8111ca3c:	81400417 	ldw	r5,16(r16)
8111ca40:	b00d883a 	mov	r6,r22
8111ca44:	1009883a 	mov	r4,r2
8111ca48:	11130b40 	call	811130b4 <memcpy>
8111ca4c:	8080030b 	ldhu	r2,12(r16)
8111ca50:	00fedfc4 	movi	r3,-1153
8111ca54:	10c4703a 	and	r2,r2,r3
8111ca58:	10802014 	ori	r2,r2,128
8111ca5c:	8080030d 	sth	r2,12(r16)
8111ca60:	bd89883a 	add	r4,r23,r22
8111ca64:	9d8fc83a 	sub	r7,r19,r22
8111ca68:	85c00415 	stw	r23,16(r16)
8111ca6c:	84c00515 	stw	r19,20(r16)
8111ca70:	81000015 	stw	r4,0(r16)
8111ca74:	9027883a 	mov	r19,r18
8111ca78:	81c00215 	stw	r7,8(r16)
8111ca7c:	902f883a 	mov	r23,r18
8111ca80:	003f3b06 	br	8111c770 <__reset+0xfb0fc770>
8111ca84:	800b883a 	mov	r5,r16
8111ca88:	a809883a 	mov	r4,r21
8111ca8c:	111ba800 	call	8111ba80 <_fflush_r>
8111ca90:	103fb926 	beq	r2,zero,8111c978 <__reset+0xfb0fc978>
8111ca94:	003f6506 	br	8111c82c <__reset+0xfb0fc82c>
8111ca98:	a809883a 	mov	r4,r21
8111ca9c:	111e3a80 	call	8111e3a8 <_realloc_r>
8111caa0:	102f883a 	mov	r23,r2
8111caa4:	103fee1e 	bne	r2,zero,8111ca60 <__reset+0xfb0fca60>
8111caa8:	81400417 	ldw	r5,16(r16)
8111caac:	a809883a 	mov	r4,r21
8111cab0:	111c3140 	call	8111c314 <_free_r>
8111cab4:	8080030b 	ldhu	r2,12(r16)
8111cab8:	00ffdfc4 	movi	r3,-129
8111cabc:	1884703a 	and	r2,r3,r2
8111cac0:	00c00304 	movi	r3,12
8111cac4:	a8c00015 	stw	r3,0(r21)
8111cac8:	003f5906 	br	8111c830 <__reset+0xfb0fc830>
8111cacc:	94c00044 	addi	r19,r18,1
8111cad0:	02000044 	movi	r8,1
8111cad4:	003f6006 	br	8111c858 <__reset+0xfb0fc858>
8111cad8:	00bfffc4 	movi	r2,-1
8111cadc:	003f0306 	br	8111c6ec <__reset+0xfb0fc6ec>
8111cae0:	00800304 	movi	r2,12
8111cae4:	a8800015 	stw	r2,0(r21)
8111cae8:	8080030b 	ldhu	r2,12(r16)
8111caec:	003f5006 	br	8111c830 <__reset+0xfb0fc830>

8111caf0 <_fwalk>:
8111caf0:	defff704 	addi	sp,sp,-36
8111caf4:	de00012e 	bgeu	sp,et,8111cafc <_fwalk+0xc>
8111caf8:	003b68fa 	trap	3
8111cafc:	dd000415 	stw	r20,16(sp)
8111cb00:	dfc00815 	stw	ra,32(sp)
8111cb04:	ddc00715 	stw	r23,28(sp)
8111cb08:	dd800615 	stw	r22,24(sp)
8111cb0c:	dd400515 	stw	r21,20(sp)
8111cb10:	dcc00315 	stw	r19,12(sp)
8111cb14:	dc800215 	stw	r18,8(sp)
8111cb18:	dc400115 	stw	r17,4(sp)
8111cb1c:	dc000015 	stw	r16,0(sp)
8111cb20:	2500b804 	addi	r20,r4,736
8111cb24:	a0002326 	beq	r20,zero,8111cbb4 <_fwalk+0xc4>
8111cb28:	282b883a 	mov	r21,r5
8111cb2c:	002f883a 	mov	r23,zero
8111cb30:	05800044 	movi	r22,1
8111cb34:	04ffffc4 	movi	r19,-1
8111cb38:	a4400117 	ldw	r17,4(r20)
8111cb3c:	a4800217 	ldw	r18,8(r20)
8111cb40:	8c7fffc4 	addi	r17,r17,-1
8111cb44:	88000d16 	blt	r17,zero,8111cb7c <_fwalk+0x8c>
8111cb48:	94000304 	addi	r16,r18,12
8111cb4c:	94800384 	addi	r18,r18,14
8111cb50:	8080000b 	ldhu	r2,0(r16)
8111cb54:	8c7fffc4 	addi	r17,r17,-1
8111cb58:	813ffd04 	addi	r4,r16,-12
8111cb5c:	b080042e 	bgeu	r22,r2,8111cb70 <_fwalk+0x80>
8111cb60:	9080000f 	ldh	r2,0(r18)
8111cb64:	14c00226 	beq	r2,r19,8111cb70 <_fwalk+0x80>
8111cb68:	a83ee83a 	callr	r21
8111cb6c:	b8aeb03a 	or	r23,r23,r2
8111cb70:	84001a04 	addi	r16,r16,104
8111cb74:	94801a04 	addi	r18,r18,104
8111cb78:	8cfff51e 	bne	r17,r19,8111cb50 <__reset+0xfb0fcb50>
8111cb7c:	a5000017 	ldw	r20,0(r20)
8111cb80:	a03fed1e 	bne	r20,zero,8111cb38 <__reset+0xfb0fcb38>
8111cb84:	b805883a 	mov	r2,r23
8111cb88:	dfc00817 	ldw	ra,32(sp)
8111cb8c:	ddc00717 	ldw	r23,28(sp)
8111cb90:	dd800617 	ldw	r22,24(sp)
8111cb94:	dd400517 	ldw	r21,20(sp)
8111cb98:	dd000417 	ldw	r20,16(sp)
8111cb9c:	dcc00317 	ldw	r19,12(sp)
8111cba0:	dc800217 	ldw	r18,8(sp)
8111cba4:	dc400117 	ldw	r17,4(sp)
8111cba8:	dc000017 	ldw	r16,0(sp)
8111cbac:	dec00904 	addi	sp,sp,36
8111cbb0:	f800283a 	ret
8111cbb4:	002f883a 	mov	r23,zero
8111cbb8:	003ff206 	br	8111cb84 <__reset+0xfb0fcb84>

8111cbbc <_fwalk_reent>:
8111cbbc:	defff704 	addi	sp,sp,-36
8111cbc0:	de00012e 	bgeu	sp,et,8111cbc8 <_fwalk_reent+0xc>
8111cbc4:	003b68fa 	trap	3
8111cbc8:	dd000415 	stw	r20,16(sp)
8111cbcc:	dfc00815 	stw	ra,32(sp)
8111cbd0:	ddc00715 	stw	r23,28(sp)
8111cbd4:	dd800615 	stw	r22,24(sp)
8111cbd8:	dd400515 	stw	r21,20(sp)
8111cbdc:	dcc00315 	stw	r19,12(sp)
8111cbe0:	dc800215 	stw	r18,8(sp)
8111cbe4:	dc400115 	stw	r17,4(sp)
8111cbe8:	dc000015 	stw	r16,0(sp)
8111cbec:	2500b804 	addi	r20,r4,736
8111cbf0:	a0002326 	beq	r20,zero,8111cc80 <_fwalk_reent+0xc4>
8111cbf4:	282b883a 	mov	r21,r5
8111cbf8:	2027883a 	mov	r19,r4
8111cbfc:	002f883a 	mov	r23,zero
8111cc00:	05800044 	movi	r22,1
8111cc04:	04bfffc4 	movi	r18,-1
8111cc08:	a4400117 	ldw	r17,4(r20)
8111cc0c:	a4000217 	ldw	r16,8(r20)
8111cc10:	8c7fffc4 	addi	r17,r17,-1
8111cc14:	88000c16 	blt	r17,zero,8111cc48 <_fwalk_reent+0x8c>
8111cc18:	84000304 	addi	r16,r16,12
8111cc1c:	8080000b 	ldhu	r2,0(r16)
8111cc20:	8c7fffc4 	addi	r17,r17,-1
8111cc24:	817ffd04 	addi	r5,r16,-12
8111cc28:	b080052e 	bgeu	r22,r2,8111cc40 <_fwalk_reent+0x84>
8111cc2c:	8080008f 	ldh	r2,2(r16)
8111cc30:	9809883a 	mov	r4,r19
8111cc34:	14800226 	beq	r2,r18,8111cc40 <_fwalk_reent+0x84>
8111cc38:	a83ee83a 	callr	r21
8111cc3c:	b8aeb03a 	or	r23,r23,r2
8111cc40:	84001a04 	addi	r16,r16,104
8111cc44:	8cbff51e 	bne	r17,r18,8111cc1c <__reset+0xfb0fcc1c>
8111cc48:	a5000017 	ldw	r20,0(r20)
8111cc4c:	a03fee1e 	bne	r20,zero,8111cc08 <__reset+0xfb0fcc08>
8111cc50:	b805883a 	mov	r2,r23
8111cc54:	dfc00817 	ldw	ra,32(sp)
8111cc58:	ddc00717 	ldw	r23,28(sp)
8111cc5c:	dd800617 	ldw	r22,24(sp)
8111cc60:	dd400517 	ldw	r21,20(sp)
8111cc64:	dd000417 	ldw	r20,16(sp)
8111cc68:	dcc00317 	ldw	r19,12(sp)
8111cc6c:	dc800217 	ldw	r18,8(sp)
8111cc70:	dc400117 	ldw	r17,4(sp)
8111cc74:	dc000017 	ldw	r16,0(sp)
8111cc78:	dec00904 	addi	sp,sp,36
8111cc7c:	f800283a 	ret
8111cc80:	002f883a 	mov	r23,zero
8111cc84:	003ff206 	br	8111cc50 <__reset+0xfb0fcc50>

8111cc88 <_isatty_r>:
8111cc88:	defffd04 	addi	sp,sp,-12
8111cc8c:	de00012e 	bgeu	sp,et,8111cc94 <_isatty_r+0xc>
8111cc90:	003b68fa 	trap	3
8111cc94:	dc000015 	stw	r16,0(sp)
8111cc98:	04204534 	movhi	r16,33044
8111cc9c:	dc400115 	stw	r17,4(sp)
8111cca0:	840b0204 	addi	r16,r16,11272
8111cca4:	2023883a 	mov	r17,r4
8111cca8:	2809883a 	mov	r4,r5
8111ccac:	dfc00215 	stw	ra,8(sp)
8111ccb0:	80000015 	stw	zero,0(r16)
8111ccb4:	1127dd80 	call	81127dd8 <isatty>
8111ccb8:	00ffffc4 	movi	r3,-1
8111ccbc:	10c00526 	beq	r2,r3,8111ccd4 <_isatty_r+0x4c>
8111ccc0:	dfc00217 	ldw	ra,8(sp)
8111ccc4:	dc400117 	ldw	r17,4(sp)
8111ccc8:	dc000017 	ldw	r16,0(sp)
8111cccc:	dec00304 	addi	sp,sp,12
8111ccd0:	f800283a 	ret
8111ccd4:	80c00017 	ldw	r3,0(r16)
8111ccd8:	183ff926 	beq	r3,zero,8111ccc0 <__reset+0xfb0fccc0>
8111ccdc:	88c00015 	stw	r3,0(r17)
8111cce0:	003ff706 	br	8111ccc0 <__reset+0xfb0fccc0>

8111cce4 <iswspace>:
8111cce4:	00803fc4 	movi	r2,255
8111cce8:	11000836 	bltu	r2,r4,8111cd0c <iswspace+0x28>
8111ccec:	00a04534 	movhi	r2,33044
8111ccf0:	108aa404 	addi	r2,r2,10896
8111ccf4:	10800017 	ldw	r2,0(r2)
8111ccf8:	1109883a 	add	r4,r2,r4
8111ccfc:	20800043 	ldbu	r2,1(r4)
8111cd00:	1080020c 	andi	r2,r2,8
8111cd04:	10803fcc 	andi	r2,r2,255
8111cd08:	f800283a 	ret
8111cd0c:	0005883a 	mov	r2,zero
8111cd10:	f800283a 	ret

8111cd14 <_setlocale_r>:
8111cd14:	30001d26 	beq	r6,zero,8111cd8c <_setlocale_r+0x78>
8111cd18:	01604534 	movhi	r5,33044
8111cd1c:	defffe04 	addi	sp,sp,-8
8111cd20:	2940ea04 	addi	r5,r5,936
8111cd24:	3009883a 	mov	r4,r6
8111cd28:	de00012e 	bgeu	sp,et,8111cd30 <_setlocale_r+0x1c>
8111cd2c:	003b68fa 	trap	3
8111cd30:	dc000015 	stw	r16,0(sp)
8111cd34:	dfc00115 	stw	ra,4(sp)
8111cd38:	3021883a 	mov	r16,r6
8111cd3c:	111ea600 	call	8111ea60 <strcmp>
8111cd40:	1000061e 	bne	r2,zero,8111cd5c <_setlocale_r+0x48>
8111cd44:	00a04534 	movhi	r2,33044
8111cd48:	1080b904 	addi	r2,r2,740
8111cd4c:	dfc00117 	ldw	ra,4(sp)
8111cd50:	dc000017 	ldw	r16,0(sp)
8111cd54:	dec00204 	addi	sp,sp,8
8111cd58:	f800283a 	ret
8111cd5c:	01604534 	movhi	r5,33044
8111cd60:	2940b904 	addi	r5,r5,740
8111cd64:	8009883a 	mov	r4,r16
8111cd68:	111ea600 	call	8111ea60 <strcmp>
8111cd6c:	103ff526 	beq	r2,zero,8111cd44 <__reset+0xfb0fcd44>
8111cd70:	01604534 	movhi	r5,33044
8111cd74:	2940c304 	addi	r5,r5,780
8111cd78:	8009883a 	mov	r4,r16
8111cd7c:	111ea600 	call	8111ea60 <strcmp>
8111cd80:	103ff026 	beq	r2,zero,8111cd44 <__reset+0xfb0fcd44>
8111cd84:	0005883a 	mov	r2,zero
8111cd88:	003ff006 	br	8111cd4c <__reset+0xfb0fcd4c>
8111cd8c:	00a04534 	movhi	r2,33044
8111cd90:	1080b904 	addi	r2,r2,740
8111cd94:	f800283a 	ret

8111cd98 <__locale_charset>:
8111cd98:	00a04534 	movhi	r2,33044
8111cd9c:	10856e04 	addi	r2,r2,5560
8111cda0:	f800283a 	ret

8111cda4 <__locale_mb_cur_max>:
8111cda4:	00a04534 	movhi	r2,33044
8111cda8:	108aa904 	addi	r2,r2,10916
8111cdac:	10800017 	ldw	r2,0(r2)
8111cdb0:	f800283a 	ret

8111cdb4 <__locale_msgcharset>:
8111cdb4:	00a04534 	movhi	r2,33044
8111cdb8:	10856604 	addi	r2,r2,5528
8111cdbc:	f800283a 	ret

8111cdc0 <__locale_cjk_lang>:
8111cdc0:	0005883a 	mov	r2,zero
8111cdc4:	f800283a 	ret

8111cdc8 <_localeconv_r>:
8111cdc8:	00a04534 	movhi	r2,33044
8111cdcc:	10857604 	addi	r2,r2,5592
8111cdd0:	f800283a 	ret

8111cdd4 <setlocale>:
8111cdd4:	00a04534 	movhi	r2,33044
8111cdd8:	108aa604 	addi	r2,r2,10904
8111cddc:	280d883a 	mov	r6,r5
8111cde0:	200b883a 	mov	r5,r4
8111cde4:	11000017 	ldw	r4,0(r2)
8111cde8:	111cd141 	jmpi	8111cd14 <_setlocale_r>

8111cdec <localeconv>:
8111cdec:	00a04534 	movhi	r2,33044
8111cdf0:	10857604 	addi	r2,r2,5592
8111cdf4:	f800283a 	ret

8111cdf8 <_lseek_r>:
8111cdf8:	defffd04 	addi	sp,sp,-12
8111cdfc:	de00012e 	bgeu	sp,et,8111ce04 <_lseek_r+0xc>
8111ce00:	003b68fa 	trap	3
8111ce04:	2805883a 	mov	r2,r5
8111ce08:	dc000015 	stw	r16,0(sp)
8111ce0c:	04204534 	movhi	r16,33044
8111ce10:	dc400115 	stw	r17,4(sp)
8111ce14:	300b883a 	mov	r5,r6
8111ce18:	840b0204 	addi	r16,r16,11272
8111ce1c:	2023883a 	mov	r17,r4
8111ce20:	380d883a 	mov	r6,r7
8111ce24:	1009883a 	mov	r4,r2
8111ce28:	dfc00215 	stw	ra,8(sp)
8111ce2c:	80000015 	stw	zero,0(r16)
8111ce30:	11289d40 	call	811289d4 <lseek>
8111ce34:	00ffffc4 	movi	r3,-1
8111ce38:	10c00526 	beq	r2,r3,8111ce50 <_lseek_r+0x58>
8111ce3c:	dfc00217 	ldw	ra,8(sp)
8111ce40:	dc400117 	ldw	r17,4(sp)
8111ce44:	dc000017 	ldw	r16,0(sp)
8111ce48:	dec00304 	addi	sp,sp,12
8111ce4c:	f800283a 	ret
8111ce50:	80c00017 	ldw	r3,0(r16)
8111ce54:	183ff926 	beq	r3,zero,8111ce3c <__reset+0xfb0fce3c>
8111ce58:	88c00015 	stw	r3,0(r17)
8111ce5c:	003ff706 	br	8111ce3c <__reset+0xfb0fce3c>

8111ce60 <_mbrtowc_r>:
8111ce60:	defff704 	addi	sp,sp,-36
8111ce64:	00a04534 	movhi	r2,33044
8111ce68:	de00012e 	bgeu	sp,et,8111ce70 <_mbrtowc_r+0x10>
8111ce6c:	003b68fa 	trap	3
8111ce70:	108aaa04 	addi	r2,r2,10920
8111ce74:	dc800715 	stw	r18,28(sp)
8111ce78:	dc400615 	stw	r17,24(sp)
8111ce7c:	dc000515 	stw	r16,20(sp)
8111ce80:	dfc00815 	stw	ra,32(sp)
8111ce84:	2021883a 	mov	r16,r4
8111ce88:	dc400917 	ldw	r17,36(sp)
8111ce8c:	14800017 	ldw	r18,0(r2)
8111ce90:	30001626 	beq	r6,zero,8111ceec <_mbrtowc_r+0x8c>
8111ce94:	d9400215 	stw	r5,8(sp)
8111ce98:	d9800315 	stw	r6,12(sp)
8111ce9c:	d9c00415 	stw	r7,16(sp)
8111cea0:	111cd980 	call	8111cd98 <__locale_charset>
8111cea4:	d9c00417 	ldw	r7,16(sp)
8111cea8:	d9800317 	ldw	r6,12(sp)
8111ceac:	d9400217 	ldw	r5,8(sp)
8111ceb0:	d8800015 	stw	r2,0(sp)
8111ceb4:	dc400115 	stw	r17,4(sp)
8111ceb8:	8009883a 	mov	r4,r16
8111cebc:	903ee83a 	callr	r18
8111cec0:	00ffffc4 	movi	r3,-1
8111cec4:	10c0031e 	bne	r2,r3,8111ced4 <_mbrtowc_r+0x74>
8111cec8:	88000015 	stw	zero,0(r17)
8111cecc:	00c02284 	movi	r3,138
8111ced0:	80c00015 	stw	r3,0(r16)
8111ced4:	dfc00817 	ldw	ra,32(sp)
8111ced8:	dc800717 	ldw	r18,28(sp)
8111cedc:	dc400617 	ldw	r17,24(sp)
8111cee0:	dc000517 	ldw	r16,20(sp)
8111cee4:	dec00904 	addi	sp,sp,36
8111cee8:	f800283a 	ret
8111ceec:	111cd980 	call	8111cd98 <__locale_charset>
8111cef0:	01a04534 	movhi	r6,33044
8111cef4:	3180c304 	addi	r6,r6,780
8111cef8:	dc400115 	stw	r17,4(sp)
8111cefc:	d8800015 	stw	r2,0(sp)
8111cf00:	01c00044 	movi	r7,1
8111cf04:	000b883a 	mov	r5,zero
8111cf08:	8009883a 	mov	r4,r16
8111cf0c:	903ee83a 	callr	r18
8111cf10:	003feb06 	br	8111cec0 <__reset+0xfb0fcec0>

8111cf14 <mbrtowc>:
8111cf14:	defff704 	addi	sp,sp,-36
8111cf18:	00a04534 	movhi	r2,33044
8111cf1c:	de00012e 	bgeu	sp,et,8111cf24 <mbrtowc+0x10>
8111cf20:	003b68fa 	trap	3
8111cf24:	108aa604 	addi	r2,r2,10904
8111cf28:	dc800415 	stw	r18,16(sp)
8111cf2c:	dc400315 	stw	r17,12(sp)
8111cf30:	dfc00815 	stw	ra,32(sp)
8111cf34:	dd400715 	stw	r21,28(sp)
8111cf38:	dd000615 	stw	r20,24(sp)
8111cf3c:	dcc00515 	stw	r19,20(sp)
8111cf40:	dc000215 	stw	r16,8(sp)
8111cf44:	3825883a 	mov	r18,r7
8111cf48:	14400017 	ldw	r17,0(r2)
8111cf4c:	28001c26 	beq	r5,zero,8111cfc0 <mbrtowc+0xac>
8111cf50:	00a04534 	movhi	r2,33044
8111cf54:	108aaa04 	addi	r2,r2,10920
8111cf58:	15400017 	ldw	r21,0(r2)
8111cf5c:	2821883a 	mov	r16,r5
8111cf60:	2027883a 	mov	r19,r4
8111cf64:	3029883a 	mov	r20,r6
8111cf68:	111cd980 	call	8111cd98 <__locale_charset>
8111cf6c:	d8800015 	stw	r2,0(sp)
8111cf70:	dc800115 	stw	r18,4(sp)
8111cf74:	a00f883a 	mov	r7,r20
8111cf78:	800d883a 	mov	r6,r16
8111cf7c:	980b883a 	mov	r5,r19
8111cf80:	8809883a 	mov	r4,r17
8111cf84:	a83ee83a 	callr	r21
8111cf88:	00ffffc4 	movi	r3,-1
8111cf8c:	10c0031e 	bne	r2,r3,8111cf9c <mbrtowc+0x88>
8111cf90:	90000015 	stw	zero,0(r18)
8111cf94:	00c02284 	movi	r3,138
8111cf98:	88c00015 	stw	r3,0(r17)
8111cf9c:	dfc00817 	ldw	ra,32(sp)
8111cfa0:	dd400717 	ldw	r21,28(sp)
8111cfa4:	dd000617 	ldw	r20,24(sp)
8111cfa8:	dcc00517 	ldw	r19,20(sp)
8111cfac:	dc800417 	ldw	r18,16(sp)
8111cfb0:	dc400317 	ldw	r17,12(sp)
8111cfb4:	dc000217 	ldw	r16,8(sp)
8111cfb8:	dec00904 	addi	sp,sp,36
8111cfbc:	f800283a 	ret
8111cfc0:	00a04534 	movhi	r2,33044
8111cfc4:	108aaa04 	addi	r2,r2,10920
8111cfc8:	14000017 	ldw	r16,0(r2)
8111cfcc:	111cd980 	call	8111cd98 <__locale_charset>
8111cfd0:	01a04534 	movhi	r6,33044
8111cfd4:	3180c304 	addi	r6,r6,780
8111cfd8:	dc800115 	stw	r18,4(sp)
8111cfdc:	d8800015 	stw	r2,0(sp)
8111cfe0:	01c00044 	movi	r7,1
8111cfe4:	000b883a 	mov	r5,zero
8111cfe8:	8809883a 	mov	r4,r17
8111cfec:	803ee83a 	callr	r16
8111cff0:	003fe506 	br	8111cf88 <__reset+0xfb0fcf88>

8111cff4 <__ascii_mbtowc>:
8111cff4:	deffff04 	addi	sp,sp,-4
8111cff8:	de00012e 	bgeu	sp,et,8111d000 <__ascii_mbtowc+0xc>
8111cffc:	003b68fa 	trap	3
8111d000:	28000826 	beq	r5,zero,8111d024 <__ascii_mbtowc+0x30>
8111d004:	30000926 	beq	r6,zero,8111d02c <__ascii_mbtowc+0x38>
8111d008:	38000b26 	beq	r7,zero,8111d038 <__ascii_mbtowc+0x44>
8111d00c:	30800003 	ldbu	r2,0(r6)
8111d010:	28800015 	stw	r2,0(r5)
8111d014:	30800003 	ldbu	r2,0(r6)
8111d018:	1004c03a 	cmpne	r2,r2,zero
8111d01c:	dec00104 	addi	sp,sp,4
8111d020:	f800283a 	ret
8111d024:	d80b883a 	mov	r5,sp
8111d028:	303ff71e 	bne	r6,zero,8111d008 <__reset+0xfb0fd008>
8111d02c:	0005883a 	mov	r2,zero
8111d030:	dec00104 	addi	sp,sp,4
8111d034:	f800283a 	ret
8111d038:	00bfff84 	movi	r2,-2
8111d03c:	003ff706 	br	8111d01c <__reset+0xfb0fd01c>

8111d040 <_mbtowc_r>:
8111d040:	00a04534 	movhi	r2,33044
8111d044:	defff804 	addi	sp,sp,-32
8111d048:	108aaa04 	addi	r2,r2,10920
8111d04c:	de00012e 	bgeu	sp,et,8111d054 <_mbtowc_r+0x14>
8111d050:	003b68fa 	trap	3
8111d054:	dfc00715 	stw	ra,28(sp)
8111d058:	dc000615 	stw	r16,24(sp)
8111d05c:	14000017 	ldw	r16,0(r2)
8111d060:	d9000215 	stw	r4,8(sp)
8111d064:	d9400315 	stw	r5,12(sp)
8111d068:	d9800415 	stw	r6,16(sp)
8111d06c:	d9c00515 	stw	r7,20(sp)
8111d070:	111cd980 	call	8111cd98 <__locale_charset>
8111d074:	d8800015 	stw	r2,0(sp)
8111d078:	d8800817 	ldw	r2,32(sp)
8111d07c:	d9c00517 	ldw	r7,20(sp)
8111d080:	d9800417 	ldw	r6,16(sp)
8111d084:	d9400317 	ldw	r5,12(sp)
8111d088:	d9000217 	ldw	r4,8(sp)
8111d08c:	d8800115 	stw	r2,4(sp)
8111d090:	803ee83a 	callr	r16
8111d094:	dfc00717 	ldw	ra,28(sp)
8111d098:	dc000617 	ldw	r16,24(sp)
8111d09c:	dec00804 	addi	sp,sp,32
8111d0a0:	f800283a 	ret

8111d0a4 <memchr>:
8111d0a4:	208000cc 	andi	r2,r4,3
8111d0a8:	280f883a 	mov	r7,r5
8111d0ac:	10003426 	beq	r2,zero,8111d180 <memchr+0xdc>
8111d0b0:	30bfffc4 	addi	r2,r6,-1
8111d0b4:	30001a26 	beq	r6,zero,8111d120 <memchr+0x7c>
8111d0b8:	20c00003 	ldbu	r3,0(r4)
8111d0bc:	29803fcc 	andi	r6,r5,255
8111d0c0:	30c0051e 	bne	r6,r3,8111d0d8 <memchr+0x34>
8111d0c4:	00001806 	br	8111d128 <memchr+0x84>
8111d0c8:	10001526 	beq	r2,zero,8111d120 <memchr+0x7c>
8111d0cc:	20c00003 	ldbu	r3,0(r4)
8111d0d0:	10bfffc4 	addi	r2,r2,-1
8111d0d4:	30c01426 	beq	r6,r3,8111d128 <memchr+0x84>
8111d0d8:	21000044 	addi	r4,r4,1
8111d0dc:	20c000cc 	andi	r3,r4,3
8111d0e0:	183ff91e 	bne	r3,zero,8111d0c8 <__reset+0xfb0fd0c8>
8111d0e4:	020000c4 	movi	r8,3
8111d0e8:	40801136 	bltu	r8,r2,8111d130 <memchr+0x8c>
8111d0ec:	10000c26 	beq	r2,zero,8111d120 <memchr+0x7c>
8111d0f0:	20c00003 	ldbu	r3,0(r4)
8111d0f4:	29403fcc 	andi	r5,r5,255
8111d0f8:	28c00b26 	beq	r5,r3,8111d128 <memchr+0x84>
8111d0fc:	20c00044 	addi	r3,r4,1
8111d100:	39803fcc 	andi	r6,r7,255
8111d104:	2089883a 	add	r4,r4,r2
8111d108:	00000306 	br	8111d118 <memchr+0x74>
8111d10c:	18c00044 	addi	r3,r3,1
8111d110:	197fffc3 	ldbu	r5,-1(r3)
8111d114:	31400526 	beq	r6,r5,8111d12c <memchr+0x88>
8111d118:	1805883a 	mov	r2,r3
8111d11c:	20fffb1e 	bne	r4,r3,8111d10c <__reset+0xfb0fd10c>
8111d120:	0005883a 	mov	r2,zero
8111d124:	f800283a 	ret
8111d128:	2005883a 	mov	r2,r4
8111d12c:	f800283a 	ret
8111d130:	28c03fcc 	andi	r3,r5,255
8111d134:	1812923a 	slli	r9,r3,8
8111d138:	02ffbff4 	movhi	r11,65279
8111d13c:	02a02074 	movhi	r10,32897
8111d140:	48d2b03a 	or	r9,r9,r3
8111d144:	4806943a 	slli	r3,r9,16
8111d148:	5affbfc4 	addi	r11,r11,-257
8111d14c:	52a02004 	addi	r10,r10,-32640
8111d150:	48d2b03a 	or	r9,r9,r3
8111d154:	20c00017 	ldw	r3,0(r4)
8111d158:	48c6f03a 	xor	r3,r9,r3
8111d15c:	1acd883a 	add	r6,r3,r11
8111d160:	00c6303a 	nor	r3,zero,r3
8111d164:	30c6703a 	and	r3,r6,r3
8111d168:	1a86703a 	and	r3,r3,r10
8111d16c:	183fe01e 	bne	r3,zero,8111d0f0 <__reset+0xfb0fd0f0>
8111d170:	10bfff04 	addi	r2,r2,-4
8111d174:	21000104 	addi	r4,r4,4
8111d178:	40bff636 	bltu	r8,r2,8111d154 <__reset+0xfb0fd154>
8111d17c:	003fdb06 	br	8111d0ec <__reset+0xfb0fd0ec>
8111d180:	3005883a 	mov	r2,r6
8111d184:	003fd706 	br	8111d0e4 <__reset+0xfb0fd0e4>

8111d188 <memmove>:
8111d188:	2005883a 	mov	r2,r4
8111d18c:	29000b2e 	bgeu	r5,r4,8111d1bc <memmove+0x34>
8111d190:	298f883a 	add	r7,r5,r6
8111d194:	21c0092e 	bgeu	r4,r7,8111d1bc <memmove+0x34>
8111d198:	2187883a 	add	r3,r4,r6
8111d19c:	198bc83a 	sub	r5,r3,r6
8111d1a0:	30004826 	beq	r6,zero,8111d2c4 <memmove+0x13c>
8111d1a4:	39ffffc4 	addi	r7,r7,-1
8111d1a8:	39000003 	ldbu	r4,0(r7)
8111d1ac:	18ffffc4 	addi	r3,r3,-1
8111d1b0:	19000005 	stb	r4,0(r3)
8111d1b4:	28fffb1e 	bne	r5,r3,8111d1a4 <__reset+0xfb0fd1a4>
8111d1b8:	f800283a 	ret
8111d1bc:	00c003c4 	movi	r3,15
8111d1c0:	1980412e 	bgeu	r3,r6,8111d2c8 <memmove+0x140>
8111d1c4:	2886b03a 	or	r3,r5,r2
8111d1c8:	18c000cc 	andi	r3,r3,3
8111d1cc:	1800401e 	bne	r3,zero,8111d2d0 <memmove+0x148>
8111d1d0:	33fffc04 	addi	r15,r6,-16
8111d1d4:	781ed13a 	srli	r15,r15,4
8111d1d8:	28c00104 	addi	r3,r5,4
8111d1dc:	13400104 	addi	r13,r2,4
8111d1e0:	781c913a 	slli	r14,r15,4
8111d1e4:	2b000204 	addi	r12,r5,8
8111d1e8:	12c00204 	addi	r11,r2,8
8111d1ec:	73800504 	addi	r14,r14,20
8111d1f0:	2a800304 	addi	r10,r5,12
8111d1f4:	12400304 	addi	r9,r2,12
8111d1f8:	2b9d883a 	add	r14,r5,r14
8111d1fc:	2811883a 	mov	r8,r5
8111d200:	100f883a 	mov	r7,r2
8111d204:	41000017 	ldw	r4,0(r8)
8111d208:	39c00404 	addi	r7,r7,16
8111d20c:	18c00404 	addi	r3,r3,16
8111d210:	393ffc15 	stw	r4,-16(r7)
8111d214:	193ffc17 	ldw	r4,-16(r3)
8111d218:	6b400404 	addi	r13,r13,16
8111d21c:	5ac00404 	addi	r11,r11,16
8111d220:	693ffc15 	stw	r4,-16(r13)
8111d224:	61000017 	ldw	r4,0(r12)
8111d228:	4a400404 	addi	r9,r9,16
8111d22c:	42000404 	addi	r8,r8,16
8111d230:	593ffc15 	stw	r4,-16(r11)
8111d234:	51000017 	ldw	r4,0(r10)
8111d238:	63000404 	addi	r12,r12,16
8111d23c:	52800404 	addi	r10,r10,16
8111d240:	493ffc15 	stw	r4,-16(r9)
8111d244:	1bbfef1e 	bne	r3,r14,8111d204 <__reset+0xfb0fd204>
8111d248:	79000044 	addi	r4,r15,1
8111d24c:	2008913a 	slli	r4,r4,4
8111d250:	328003cc 	andi	r10,r6,15
8111d254:	02c000c4 	movi	r11,3
8111d258:	1107883a 	add	r3,r2,r4
8111d25c:	290b883a 	add	r5,r5,r4
8111d260:	5a801e2e 	bgeu	r11,r10,8111d2dc <memmove+0x154>
8111d264:	1813883a 	mov	r9,r3
8111d268:	2811883a 	mov	r8,r5
8111d26c:	500f883a 	mov	r7,r10
8111d270:	41000017 	ldw	r4,0(r8)
8111d274:	4a400104 	addi	r9,r9,4
8111d278:	39ffff04 	addi	r7,r7,-4
8111d27c:	493fff15 	stw	r4,-4(r9)
8111d280:	42000104 	addi	r8,r8,4
8111d284:	59fffa36 	bltu	r11,r7,8111d270 <__reset+0xfb0fd270>
8111d288:	513fff04 	addi	r4,r10,-4
8111d28c:	2008d0ba 	srli	r4,r4,2
8111d290:	318000cc 	andi	r6,r6,3
8111d294:	21000044 	addi	r4,r4,1
8111d298:	2109883a 	add	r4,r4,r4
8111d29c:	2109883a 	add	r4,r4,r4
8111d2a0:	1907883a 	add	r3,r3,r4
8111d2a4:	290b883a 	add	r5,r5,r4
8111d2a8:	30000b26 	beq	r6,zero,8111d2d8 <memmove+0x150>
8111d2ac:	198d883a 	add	r6,r3,r6
8111d2b0:	29c00003 	ldbu	r7,0(r5)
8111d2b4:	18c00044 	addi	r3,r3,1
8111d2b8:	29400044 	addi	r5,r5,1
8111d2bc:	19ffffc5 	stb	r7,-1(r3)
8111d2c0:	19bffb1e 	bne	r3,r6,8111d2b0 <__reset+0xfb0fd2b0>
8111d2c4:	f800283a 	ret
8111d2c8:	1007883a 	mov	r3,r2
8111d2cc:	003ff606 	br	8111d2a8 <__reset+0xfb0fd2a8>
8111d2d0:	1007883a 	mov	r3,r2
8111d2d4:	003ff506 	br	8111d2ac <__reset+0xfb0fd2ac>
8111d2d8:	f800283a 	ret
8111d2dc:	500d883a 	mov	r6,r10
8111d2e0:	003ff106 	br	8111d2a8 <__reset+0xfb0fd2a8>

8111d2e4 <_Balloc>:
8111d2e4:	defffc04 	addi	sp,sp,-16
8111d2e8:	de00012e 	bgeu	sp,et,8111d2f0 <_Balloc+0xc>
8111d2ec:	003b68fa 	trap	3
8111d2f0:	20801317 	ldw	r2,76(r4)
8111d2f4:	dc400115 	stw	r17,4(sp)
8111d2f8:	dc000015 	stw	r16,0(sp)
8111d2fc:	dfc00315 	stw	ra,12(sp)
8111d300:	dc800215 	stw	r18,8(sp)
8111d304:	2023883a 	mov	r17,r4
8111d308:	2821883a 	mov	r16,r5
8111d30c:	10000f26 	beq	r2,zero,8111d34c <_Balloc+0x68>
8111d310:	8407883a 	add	r3,r16,r16
8111d314:	18c7883a 	add	r3,r3,r3
8111d318:	10c7883a 	add	r3,r2,r3
8111d31c:	18800017 	ldw	r2,0(r3)
8111d320:	10001126 	beq	r2,zero,8111d368 <_Balloc+0x84>
8111d324:	11000017 	ldw	r4,0(r2)
8111d328:	19000015 	stw	r4,0(r3)
8111d32c:	10000415 	stw	zero,16(r2)
8111d330:	10000315 	stw	zero,12(r2)
8111d334:	dfc00317 	ldw	ra,12(sp)
8111d338:	dc800217 	ldw	r18,8(sp)
8111d33c:	dc400117 	ldw	r17,4(sp)
8111d340:	dc000017 	ldw	r16,0(sp)
8111d344:	dec00404 	addi	sp,sp,16
8111d348:	f800283a 	ret
8111d34c:	01800844 	movi	r6,33
8111d350:	01400104 	movi	r5,4
8111d354:	112380c0 	call	8112380c <_calloc_r>
8111d358:	88801315 	stw	r2,76(r17)
8111d35c:	103fec1e 	bne	r2,zero,8111d310 <__reset+0xfb0fd310>
8111d360:	0005883a 	mov	r2,zero
8111d364:	003ff306 	br	8111d334 <__reset+0xfb0fd334>
8111d368:	01400044 	movi	r5,1
8111d36c:	2c24983a 	sll	r18,r5,r16
8111d370:	8809883a 	mov	r4,r17
8111d374:	91800144 	addi	r6,r18,5
8111d378:	318d883a 	add	r6,r6,r6
8111d37c:	318d883a 	add	r6,r6,r6
8111d380:	112380c0 	call	8112380c <_calloc_r>
8111d384:	103ff626 	beq	r2,zero,8111d360 <__reset+0xfb0fd360>
8111d388:	14000115 	stw	r16,4(r2)
8111d38c:	14800215 	stw	r18,8(r2)
8111d390:	003fe606 	br	8111d32c <__reset+0xfb0fd32c>

8111d394 <_Bfree>:
8111d394:	28000826 	beq	r5,zero,8111d3b8 <_Bfree+0x24>
8111d398:	28c00117 	ldw	r3,4(r5)
8111d39c:	20801317 	ldw	r2,76(r4)
8111d3a0:	18c7883a 	add	r3,r3,r3
8111d3a4:	18c7883a 	add	r3,r3,r3
8111d3a8:	10c5883a 	add	r2,r2,r3
8111d3ac:	10c00017 	ldw	r3,0(r2)
8111d3b0:	28c00015 	stw	r3,0(r5)
8111d3b4:	11400015 	stw	r5,0(r2)
8111d3b8:	f800283a 	ret

8111d3bc <__multadd>:
8111d3bc:	defffa04 	addi	sp,sp,-24
8111d3c0:	de00012e 	bgeu	sp,et,8111d3c8 <__multadd+0xc>
8111d3c4:	003b68fa 	trap	3
8111d3c8:	0011883a 	mov	r8,zero
8111d3cc:	dc800315 	stw	r18,12(sp)
8111d3d0:	dc400215 	stw	r17,8(sp)
8111d3d4:	dc000115 	stw	r16,4(sp)
8111d3d8:	2823883a 	mov	r17,r5
8111d3dc:	2c000417 	ldw	r16,16(r5)
8111d3e0:	dfc00515 	stw	ra,20(sp)
8111d3e4:	dcc00415 	stw	r19,16(sp)
8111d3e8:	2025883a 	mov	r18,r4
8111d3ec:	29400504 	addi	r5,r5,20
8111d3f0:	28c00017 	ldw	r3,0(r5)
8111d3f4:	29400104 	addi	r5,r5,4
8111d3f8:	42000044 	addi	r8,r8,1
8111d3fc:	18bfffcc 	andi	r2,r3,65535
8111d400:	1185383a 	mul	r2,r2,r6
8111d404:	1806d43a 	srli	r3,r3,16
8111d408:	11cf883a 	add	r7,r2,r7
8111d40c:	3808d43a 	srli	r4,r7,16
8111d410:	1987383a 	mul	r3,r3,r6
8111d414:	38bfffcc 	andi	r2,r7,65535
8111d418:	1907883a 	add	r3,r3,r4
8111d41c:	1808943a 	slli	r4,r3,16
8111d420:	180ed43a 	srli	r7,r3,16
8111d424:	2085883a 	add	r2,r4,r2
8111d428:	28bfff15 	stw	r2,-4(r5)
8111d42c:	443ff016 	blt	r8,r16,8111d3f0 <__reset+0xfb0fd3f0>
8111d430:	38000926 	beq	r7,zero,8111d458 <__multadd+0x9c>
8111d434:	88800217 	ldw	r2,8(r17)
8111d438:	80800f0e 	bge	r16,r2,8111d478 <__multadd+0xbc>
8111d43c:	80800144 	addi	r2,r16,5
8111d440:	1085883a 	add	r2,r2,r2
8111d444:	1085883a 	add	r2,r2,r2
8111d448:	8885883a 	add	r2,r17,r2
8111d44c:	11c00015 	stw	r7,0(r2)
8111d450:	84000044 	addi	r16,r16,1
8111d454:	8c000415 	stw	r16,16(r17)
8111d458:	8805883a 	mov	r2,r17
8111d45c:	dfc00517 	ldw	ra,20(sp)
8111d460:	dcc00417 	ldw	r19,16(sp)
8111d464:	dc800317 	ldw	r18,12(sp)
8111d468:	dc400217 	ldw	r17,8(sp)
8111d46c:	dc000117 	ldw	r16,4(sp)
8111d470:	dec00604 	addi	sp,sp,24
8111d474:	f800283a 	ret
8111d478:	89400117 	ldw	r5,4(r17)
8111d47c:	9009883a 	mov	r4,r18
8111d480:	d9c00015 	stw	r7,0(sp)
8111d484:	29400044 	addi	r5,r5,1
8111d488:	111d2e40 	call	8111d2e4 <_Balloc>
8111d48c:	89800417 	ldw	r6,16(r17)
8111d490:	89400304 	addi	r5,r17,12
8111d494:	11000304 	addi	r4,r2,12
8111d498:	31800084 	addi	r6,r6,2
8111d49c:	318d883a 	add	r6,r6,r6
8111d4a0:	318d883a 	add	r6,r6,r6
8111d4a4:	1027883a 	mov	r19,r2
8111d4a8:	11130b40 	call	811130b4 <memcpy>
8111d4ac:	d9c00017 	ldw	r7,0(sp)
8111d4b0:	88000a26 	beq	r17,zero,8111d4dc <__multadd+0x120>
8111d4b4:	88c00117 	ldw	r3,4(r17)
8111d4b8:	90801317 	ldw	r2,76(r18)
8111d4bc:	18c7883a 	add	r3,r3,r3
8111d4c0:	18c7883a 	add	r3,r3,r3
8111d4c4:	10c5883a 	add	r2,r2,r3
8111d4c8:	10c00017 	ldw	r3,0(r2)
8111d4cc:	88c00015 	stw	r3,0(r17)
8111d4d0:	14400015 	stw	r17,0(r2)
8111d4d4:	9823883a 	mov	r17,r19
8111d4d8:	003fd806 	br	8111d43c <__reset+0xfb0fd43c>
8111d4dc:	9823883a 	mov	r17,r19
8111d4e0:	003fd606 	br	8111d43c <__reset+0xfb0fd43c>

8111d4e4 <__s2b>:
8111d4e4:	defff904 	addi	sp,sp,-28
8111d4e8:	de00012e 	bgeu	sp,et,8111d4f0 <__s2b+0xc>
8111d4ec:	003b68fa 	trap	3
8111d4f0:	dc400115 	stw	r17,4(sp)
8111d4f4:	dc000015 	stw	r16,0(sp)
8111d4f8:	2023883a 	mov	r17,r4
8111d4fc:	2821883a 	mov	r16,r5
8111d500:	39000204 	addi	r4,r7,8
8111d504:	01400244 	movi	r5,9
8111d508:	dcc00315 	stw	r19,12(sp)
8111d50c:	dc800215 	stw	r18,8(sp)
8111d510:	dfc00615 	stw	ra,24(sp)
8111d514:	dd400515 	stw	r21,20(sp)
8111d518:	dd000415 	stw	r20,16(sp)
8111d51c:	3825883a 	mov	r18,r7
8111d520:	3027883a 	mov	r19,r6
8111d524:	11255a40 	call	811255a4 <__divsi3>
8111d528:	00c00044 	movi	r3,1
8111d52c:	000b883a 	mov	r5,zero
8111d530:	1880030e 	bge	r3,r2,8111d540 <__s2b+0x5c>
8111d534:	18c7883a 	add	r3,r3,r3
8111d538:	29400044 	addi	r5,r5,1
8111d53c:	18bffd16 	blt	r3,r2,8111d534 <__reset+0xfb0fd534>
8111d540:	8809883a 	mov	r4,r17
8111d544:	111d2e40 	call	8111d2e4 <_Balloc>
8111d548:	d8c00717 	ldw	r3,28(sp)
8111d54c:	10c00515 	stw	r3,20(r2)
8111d550:	00c00044 	movi	r3,1
8111d554:	10c00415 	stw	r3,16(r2)
8111d558:	00c00244 	movi	r3,9
8111d55c:	1cc0210e 	bge	r3,r19,8111d5e4 <__s2b+0x100>
8111d560:	80eb883a 	add	r21,r16,r3
8111d564:	a829883a 	mov	r20,r21
8111d568:	84e1883a 	add	r16,r16,r19
8111d56c:	a1c00007 	ldb	r7,0(r20)
8111d570:	01800284 	movi	r6,10
8111d574:	a5000044 	addi	r20,r20,1
8111d578:	100b883a 	mov	r5,r2
8111d57c:	39fff404 	addi	r7,r7,-48
8111d580:	8809883a 	mov	r4,r17
8111d584:	111d3bc0 	call	8111d3bc <__multadd>
8111d588:	a43ff81e 	bne	r20,r16,8111d56c <__reset+0xfb0fd56c>
8111d58c:	ace1883a 	add	r16,r21,r19
8111d590:	843ffe04 	addi	r16,r16,-8
8111d594:	9c800a0e 	bge	r19,r18,8111d5c0 <__s2b+0xdc>
8111d598:	94e5c83a 	sub	r18,r18,r19
8111d59c:	84a5883a 	add	r18,r16,r18
8111d5a0:	81c00007 	ldb	r7,0(r16)
8111d5a4:	01800284 	movi	r6,10
8111d5a8:	84000044 	addi	r16,r16,1
8111d5ac:	100b883a 	mov	r5,r2
8111d5b0:	39fff404 	addi	r7,r7,-48
8111d5b4:	8809883a 	mov	r4,r17
8111d5b8:	111d3bc0 	call	8111d3bc <__multadd>
8111d5bc:	84bff81e 	bne	r16,r18,8111d5a0 <__reset+0xfb0fd5a0>
8111d5c0:	dfc00617 	ldw	ra,24(sp)
8111d5c4:	dd400517 	ldw	r21,20(sp)
8111d5c8:	dd000417 	ldw	r20,16(sp)
8111d5cc:	dcc00317 	ldw	r19,12(sp)
8111d5d0:	dc800217 	ldw	r18,8(sp)
8111d5d4:	dc400117 	ldw	r17,4(sp)
8111d5d8:	dc000017 	ldw	r16,0(sp)
8111d5dc:	dec00704 	addi	sp,sp,28
8111d5e0:	f800283a 	ret
8111d5e4:	84000284 	addi	r16,r16,10
8111d5e8:	1827883a 	mov	r19,r3
8111d5ec:	003fe906 	br	8111d594 <__reset+0xfb0fd594>

8111d5f0 <__hi0bits>:
8111d5f0:	20bfffec 	andhi	r2,r4,65535
8111d5f4:	1000141e 	bne	r2,zero,8111d648 <__hi0bits+0x58>
8111d5f8:	2008943a 	slli	r4,r4,16
8111d5fc:	00800404 	movi	r2,16
8111d600:	20ffc02c 	andhi	r3,r4,65280
8111d604:	1800021e 	bne	r3,zero,8111d610 <__hi0bits+0x20>
8111d608:	2008923a 	slli	r4,r4,8
8111d60c:	10800204 	addi	r2,r2,8
8111d610:	20fc002c 	andhi	r3,r4,61440
8111d614:	1800021e 	bne	r3,zero,8111d620 <__hi0bits+0x30>
8111d618:	2008913a 	slli	r4,r4,4
8111d61c:	10800104 	addi	r2,r2,4
8111d620:	20f0002c 	andhi	r3,r4,49152
8111d624:	1800031e 	bne	r3,zero,8111d634 <__hi0bits+0x44>
8111d628:	2109883a 	add	r4,r4,r4
8111d62c:	10800084 	addi	r2,r2,2
8111d630:	2109883a 	add	r4,r4,r4
8111d634:	20000316 	blt	r4,zero,8111d644 <__hi0bits+0x54>
8111d638:	2110002c 	andhi	r4,r4,16384
8111d63c:	2000041e 	bne	r4,zero,8111d650 <__hi0bits+0x60>
8111d640:	00800804 	movi	r2,32
8111d644:	f800283a 	ret
8111d648:	0005883a 	mov	r2,zero
8111d64c:	003fec06 	br	8111d600 <__reset+0xfb0fd600>
8111d650:	10800044 	addi	r2,r2,1
8111d654:	f800283a 	ret

8111d658 <__lo0bits>:
8111d658:	20c00017 	ldw	r3,0(r4)
8111d65c:	188001cc 	andi	r2,r3,7
8111d660:	10000826 	beq	r2,zero,8111d684 <__lo0bits+0x2c>
8111d664:	1880004c 	andi	r2,r3,1
8111d668:	1000211e 	bne	r2,zero,8111d6f0 <__lo0bits+0x98>
8111d66c:	1880008c 	andi	r2,r3,2
8111d670:	1000211e 	bne	r2,zero,8111d6f8 <__lo0bits+0xa0>
8111d674:	1806d0ba 	srli	r3,r3,2
8111d678:	00800084 	movi	r2,2
8111d67c:	20c00015 	stw	r3,0(r4)
8111d680:	f800283a 	ret
8111d684:	18bfffcc 	andi	r2,r3,65535
8111d688:	10001326 	beq	r2,zero,8111d6d8 <__lo0bits+0x80>
8111d68c:	0005883a 	mov	r2,zero
8111d690:	19403fcc 	andi	r5,r3,255
8111d694:	2800021e 	bne	r5,zero,8111d6a0 <__lo0bits+0x48>
8111d698:	1806d23a 	srli	r3,r3,8
8111d69c:	10800204 	addi	r2,r2,8
8111d6a0:	194003cc 	andi	r5,r3,15
8111d6a4:	2800021e 	bne	r5,zero,8111d6b0 <__lo0bits+0x58>
8111d6a8:	1806d13a 	srli	r3,r3,4
8111d6ac:	10800104 	addi	r2,r2,4
8111d6b0:	194000cc 	andi	r5,r3,3
8111d6b4:	2800021e 	bne	r5,zero,8111d6c0 <__lo0bits+0x68>
8111d6b8:	1806d0ba 	srli	r3,r3,2
8111d6bc:	10800084 	addi	r2,r2,2
8111d6c0:	1940004c 	andi	r5,r3,1
8111d6c4:	2800081e 	bne	r5,zero,8111d6e8 <__lo0bits+0x90>
8111d6c8:	1806d07a 	srli	r3,r3,1
8111d6cc:	1800051e 	bne	r3,zero,8111d6e4 <__lo0bits+0x8c>
8111d6d0:	00800804 	movi	r2,32
8111d6d4:	f800283a 	ret
8111d6d8:	1806d43a 	srli	r3,r3,16
8111d6dc:	00800404 	movi	r2,16
8111d6e0:	003feb06 	br	8111d690 <__reset+0xfb0fd690>
8111d6e4:	10800044 	addi	r2,r2,1
8111d6e8:	20c00015 	stw	r3,0(r4)
8111d6ec:	f800283a 	ret
8111d6f0:	0005883a 	mov	r2,zero
8111d6f4:	f800283a 	ret
8111d6f8:	1806d07a 	srli	r3,r3,1
8111d6fc:	00800044 	movi	r2,1
8111d700:	20c00015 	stw	r3,0(r4)
8111d704:	f800283a 	ret

8111d708 <__i2b>:
8111d708:	defffd04 	addi	sp,sp,-12
8111d70c:	de00012e 	bgeu	sp,et,8111d714 <__i2b+0xc>
8111d710:	003b68fa 	trap	3
8111d714:	dc000015 	stw	r16,0(sp)
8111d718:	04000044 	movi	r16,1
8111d71c:	dc400115 	stw	r17,4(sp)
8111d720:	2823883a 	mov	r17,r5
8111d724:	800b883a 	mov	r5,r16
8111d728:	dfc00215 	stw	ra,8(sp)
8111d72c:	111d2e40 	call	8111d2e4 <_Balloc>
8111d730:	14400515 	stw	r17,20(r2)
8111d734:	14000415 	stw	r16,16(r2)
8111d738:	dfc00217 	ldw	ra,8(sp)
8111d73c:	dc400117 	ldw	r17,4(sp)
8111d740:	dc000017 	ldw	r16,0(sp)
8111d744:	dec00304 	addi	sp,sp,12
8111d748:	f800283a 	ret

8111d74c <__multiply>:
8111d74c:	defffa04 	addi	sp,sp,-24
8111d750:	de00012e 	bgeu	sp,et,8111d758 <__multiply+0xc>
8111d754:	003b68fa 	trap	3
8111d758:	dcc00315 	stw	r19,12(sp)
8111d75c:	dc800215 	stw	r18,8(sp)
8111d760:	34c00417 	ldw	r19,16(r6)
8111d764:	2c800417 	ldw	r18,16(r5)
8111d768:	dd000415 	stw	r20,16(sp)
8111d76c:	dc400115 	stw	r17,4(sp)
8111d770:	dfc00515 	stw	ra,20(sp)
8111d774:	dc000015 	stw	r16,0(sp)
8111d778:	2829883a 	mov	r20,r5
8111d77c:	3023883a 	mov	r17,r6
8111d780:	94c0050e 	bge	r18,r19,8111d798 <__multiply+0x4c>
8111d784:	9007883a 	mov	r3,r18
8111d788:	3029883a 	mov	r20,r6
8111d78c:	9825883a 	mov	r18,r19
8111d790:	2823883a 	mov	r17,r5
8111d794:	1827883a 	mov	r19,r3
8111d798:	a0800217 	ldw	r2,8(r20)
8111d79c:	94e1883a 	add	r16,r18,r19
8111d7a0:	a1400117 	ldw	r5,4(r20)
8111d7a4:	1400010e 	bge	r2,r16,8111d7ac <__multiply+0x60>
8111d7a8:	29400044 	addi	r5,r5,1
8111d7ac:	111d2e40 	call	8111d2e4 <_Balloc>
8111d7b0:	8415883a 	add	r10,r16,r16
8111d7b4:	12c00504 	addi	r11,r2,20
8111d7b8:	5295883a 	add	r10,r10,r10
8111d7bc:	5a95883a 	add	r10,r11,r10
8111d7c0:	5807883a 	mov	r3,r11
8111d7c4:	5a80032e 	bgeu	r11,r10,8111d7d4 <__multiply+0x88>
8111d7c8:	18000015 	stw	zero,0(r3)
8111d7cc:	18c00104 	addi	r3,r3,4
8111d7d0:	1abffd36 	bltu	r3,r10,8111d7c8 <__reset+0xfb0fd7c8>
8111d7d4:	9ce7883a 	add	r19,r19,r19
8111d7d8:	94a5883a 	add	r18,r18,r18
8111d7dc:	89800504 	addi	r6,r17,20
8111d7e0:	9ce7883a 	add	r19,r19,r19
8111d7e4:	a3400504 	addi	r13,r20,20
8111d7e8:	94a5883a 	add	r18,r18,r18
8111d7ec:	34d9883a 	add	r12,r6,r19
8111d7f0:	6c93883a 	add	r9,r13,r18
8111d7f4:	3300422e 	bgeu	r6,r12,8111d900 <__multiply+0x1b4>
8111d7f8:	37c00017 	ldw	ra,0(r6)
8111d7fc:	fbffffcc 	andi	r15,ra,65535
8111d800:	78001b26 	beq	r15,zero,8111d870 <__multiply+0x124>
8111d804:	5811883a 	mov	r8,r11
8111d808:	681d883a 	mov	r14,r13
8111d80c:	000f883a 	mov	r7,zero
8111d810:	71000017 	ldw	r4,0(r14)
8111d814:	40c00017 	ldw	r3,0(r8)
8111d818:	73800104 	addi	r14,r14,4
8111d81c:	217fffcc 	andi	r5,r4,65535
8111d820:	2bcb383a 	mul	r5,r5,r15
8111d824:	2008d43a 	srli	r4,r4,16
8111d828:	1c7fffcc 	andi	r17,r3,65535
8111d82c:	2c4b883a 	add	r5,r5,r17
8111d830:	29cb883a 	add	r5,r5,r7
8111d834:	23c9383a 	mul	r4,r4,r15
8111d838:	1806d43a 	srli	r3,r3,16
8111d83c:	280ed43a 	srli	r7,r5,16
8111d840:	297fffcc 	andi	r5,r5,65535
8111d844:	20c7883a 	add	r3,r4,r3
8111d848:	19c7883a 	add	r3,r3,r7
8111d84c:	1808943a 	slli	r4,r3,16
8111d850:	4023883a 	mov	r17,r8
8111d854:	180ed43a 	srli	r7,r3,16
8111d858:	214ab03a 	or	r5,r4,r5
8111d85c:	41400015 	stw	r5,0(r8)
8111d860:	42000104 	addi	r8,r8,4
8111d864:	727fea36 	bltu	r14,r9,8111d810 <__reset+0xfb0fd810>
8111d868:	89c00115 	stw	r7,4(r17)
8111d86c:	37c00017 	ldw	ra,0(r6)
8111d870:	f83ed43a 	srli	ra,ra,16
8111d874:	f8001f26 	beq	ra,zero,8111d8f4 <__multiply+0x1a8>
8111d878:	58c00017 	ldw	r3,0(r11)
8111d87c:	681d883a 	mov	r14,r13
8111d880:	581f883a 	mov	r15,r11
8111d884:	1811883a 	mov	r8,r3
8111d888:	5825883a 	mov	r18,r11
8111d88c:	000f883a 	mov	r7,zero
8111d890:	00000106 	br	8111d898 <__multiply+0x14c>
8111d894:	8825883a 	mov	r18,r17
8111d898:	7140000b 	ldhu	r5,0(r14)
8111d89c:	4010d43a 	srli	r8,r8,16
8111d8a0:	193fffcc 	andi	r4,r3,65535
8111d8a4:	2fcb383a 	mul	r5,r5,ra
8111d8a8:	7bc00104 	addi	r15,r15,4
8111d8ac:	73800104 	addi	r14,r14,4
8111d8b0:	2a0b883a 	add	r5,r5,r8
8111d8b4:	29cb883a 	add	r5,r5,r7
8111d8b8:	2806943a 	slli	r3,r5,16
8111d8bc:	94400104 	addi	r17,r18,4
8111d8c0:	280ad43a 	srli	r5,r5,16
8111d8c4:	1908b03a 	or	r4,r3,r4
8111d8c8:	793fff15 	stw	r4,-4(r15)
8111d8cc:	70ffff17 	ldw	r3,-4(r14)
8111d8d0:	8a000017 	ldw	r8,0(r17)
8111d8d4:	1806d43a 	srli	r3,r3,16
8111d8d8:	413fffcc 	andi	r4,r8,65535
8111d8dc:	1fc7383a 	mul	r3,r3,ra
8111d8e0:	1907883a 	add	r3,r3,r4
8111d8e4:	1947883a 	add	r3,r3,r5
8111d8e8:	180ed43a 	srli	r7,r3,16
8111d8ec:	727fe936 	bltu	r14,r9,8111d894 <__reset+0xfb0fd894>
8111d8f0:	90c00115 	stw	r3,4(r18)
8111d8f4:	31800104 	addi	r6,r6,4
8111d8f8:	5ac00104 	addi	r11,r11,4
8111d8fc:	333fbe36 	bltu	r6,r12,8111d7f8 <__reset+0xfb0fd7f8>
8111d900:	0400090e 	bge	zero,r16,8111d928 <__multiply+0x1dc>
8111d904:	50ffff17 	ldw	r3,-4(r10)
8111d908:	52bfff04 	addi	r10,r10,-4
8111d90c:	18000326 	beq	r3,zero,8111d91c <__multiply+0x1d0>
8111d910:	00000506 	br	8111d928 <__multiply+0x1dc>
8111d914:	50c00017 	ldw	r3,0(r10)
8111d918:	1800031e 	bne	r3,zero,8111d928 <__multiply+0x1dc>
8111d91c:	843fffc4 	addi	r16,r16,-1
8111d920:	52bfff04 	addi	r10,r10,-4
8111d924:	803ffb1e 	bne	r16,zero,8111d914 <__reset+0xfb0fd914>
8111d928:	14000415 	stw	r16,16(r2)
8111d92c:	dfc00517 	ldw	ra,20(sp)
8111d930:	dd000417 	ldw	r20,16(sp)
8111d934:	dcc00317 	ldw	r19,12(sp)
8111d938:	dc800217 	ldw	r18,8(sp)
8111d93c:	dc400117 	ldw	r17,4(sp)
8111d940:	dc000017 	ldw	r16,0(sp)
8111d944:	dec00604 	addi	sp,sp,24
8111d948:	f800283a 	ret

8111d94c <__pow5mult>:
8111d94c:	defffa04 	addi	sp,sp,-24
8111d950:	de00012e 	bgeu	sp,et,8111d958 <__pow5mult+0xc>
8111d954:	003b68fa 	trap	3
8111d958:	308000cc 	andi	r2,r6,3
8111d95c:	dcc00315 	stw	r19,12(sp)
8111d960:	dc000015 	stw	r16,0(sp)
8111d964:	dfc00515 	stw	ra,20(sp)
8111d968:	dd000415 	stw	r20,16(sp)
8111d96c:	dc800215 	stw	r18,8(sp)
8111d970:	dc400115 	stw	r17,4(sp)
8111d974:	3021883a 	mov	r16,r6
8111d978:	2027883a 	mov	r19,r4
8111d97c:	10002f1e 	bne	r2,zero,8111da3c <__pow5mult+0xf0>
8111d980:	2825883a 	mov	r18,r5
8111d984:	8021d0ba 	srai	r16,r16,2
8111d988:	80001a26 	beq	r16,zero,8111d9f4 <__pow5mult+0xa8>
8111d98c:	9c401217 	ldw	r17,72(r19)
8111d990:	8800061e 	bne	r17,zero,8111d9ac <__pow5mult+0x60>
8111d994:	00003406 	br	8111da68 <__pow5mult+0x11c>
8111d998:	8021d07a 	srai	r16,r16,1
8111d99c:	80001526 	beq	r16,zero,8111d9f4 <__pow5mult+0xa8>
8111d9a0:	88800017 	ldw	r2,0(r17)
8111d9a4:	10001c26 	beq	r2,zero,8111da18 <__pow5mult+0xcc>
8111d9a8:	1023883a 	mov	r17,r2
8111d9ac:	8080004c 	andi	r2,r16,1
8111d9b0:	103ff926 	beq	r2,zero,8111d998 <__reset+0xfb0fd998>
8111d9b4:	880d883a 	mov	r6,r17
8111d9b8:	900b883a 	mov	r5,r18
8111d9bc:	9809883a 	mov	r4,r19
8111d9c0:	111d74c0 	call	8111d74c <__multiply>
8111d9c4:	90001b26 	beq	r18,zero,8111da34 <__pow5mult+0xe8>
8111d9c8:	91000117 	ldw	r4,4(r18)
8111d9cc:	98c01317 	ldw	r3,76(r19)
8111d9d0:	8021d07a 	srai	r16,r16,1
8111d9d4:	2109883a 	add	r4,r4,r4
8111d9d8:	2109883a 	add	r4,r4,r4
8111d9dc:	1907883a 	add	r3,r3,r4
8111d9e0:	19000017 	ldw	r4,0(r3)
8111d9e4:	91000015 	stw	r4,0(r18)
8111d9e8:	1c800015 	stw	r18,0(r3)
8111d9ec:	1025883a 	mov	r18,r2
8111d9f0:	803feb1e 	bne	r16,zero,8111d9a0 <__reset+0xfb0fd9a0>
8111d9f4:	9005883a 	mov	r2,r18
8111d9f8:	dfc00517 	ldw	ra,20(sp)
8111d9fc:	dd000417 	ldw	r20,16(sp)
8111da00:	dcc00317 	ldw	r19,12(sp)
8111da04:	dc800217 	ldw	r18,8(sp)
8111da08:	dc400117 	ldw	r17,4(sp)
8111da0c:	dc000017 	ldw	r16,0(sp)
8111da10:	dec00604 	addi	sp,sp,24
8111da14:	f800283a 	ret
8111da18:	880d883a 	mov	r6,r17
8111da1c:	880b883a 	mov	r5,r17
8111da20:	9809883a 	mov	r4,r19
8111da24:	111d74c0 	call	8111d74c <__multiply>
8111da28:	88800015 	stw	r2,0(r17)
8111da2c:	10000015 	stw	zero,0(r2)
8111da30:	003fdd06 	br	8111d9a8 <__reset+0xfb0fd9a8>
8111da34:	1025883a 	mov	r18,r2
8111da38:	003fd706 	br	8111d998 <__reset+0xfb0fd998>
8111da3c:	10bfffc4 	addi	r2,r2,-1
8111da40:	1085883a 	add	r2,r2,r2
8111da44:	00e04534 	movhi	r3,33044
8111da48:	18c0ed04 	addi	r3,r3,948
8111da4c:	1085883a 	add	r2,r2,r2
8111da50:	1885883a 	add	r2,r3,r2
8111da54:	11800017 	ldw	r6,0(r2)
8111da58:	000f883a 	mov	r7,zero
8111da5c:	111d3bc0 	call	8111d3bc <__multadd>
8111da60:	1025883a 	mov	r18,r2
8111da64:	003fc706 	br	8111d984 <__reset+0xfb0fd984>
8111da68:	05000044 	movi	r20,1
8111da6c:	a00b883a 	mov	r5,r20
8111da70:	9809883a 	mov	r4,r19
8111da74:	111d2e40 	call	8111d2e4 <_Balloc>
8111da78:	1023883a 	mov	r17,r2
8111da7c:	00809c44 	movi	r2,625
8111da80:	88800515 	stw	r2,20(r17)
8111da84:	8d000415 	stw	r20,16(r17)
8111da88:	9c401215 	stw	r17,72(r19)
8111da8c:	88000015 	stw	zero,0(r17)
8111da90:	003fc606 	br	8111d9ac <__reset+0xfb0fd9ac>

8111da94 <__lshift>:
8111da94:	defff904 	addi	sp,sp,-28
8111da98:	de00012e 	bgeu	sp,et,8111daa0 <__lshift+0xc>
8111da9c:	003b68fa 	trap	3
8111daa0:	dd400515 	stw	r21,20(sp)
8111daa4:	dcc00315 	stw	r19,12(sp)
8111daa8:	302bd17a 	srai	r21,r6,5
8111daac:	2cc00417 	ldw	r19,16(r5)
8111dab0:	28800217 	ldw	r2,8(r5)
8111dab4:	dd000415 	stw	r20,16(sp)
8111dab8:	ace7883a 	add	r19,r21,r19
8111dabc:	dc800215 	stw	r18,8(sp)
8111dac0:	dc400115 	stw	r17,4(sp)
8111dac4:	dc000015 	stw	r16,0(sp)
8111dac8:	dfc00615 	stw	ra,24(sp)
8111dacc:	9c000044 	addi	r16,r19,1
8111dad0:	2823883a 	mov	r17,r5
8111dad4:	3029883a 	mov	r20,r6
8111dad8:	2025883a 	mov	r18,r4
8111dadc:	29400117 	ldw	r5,4(r5)
8111dae0:	1400030e 	bge	r2,r16,8111daf0 <__lshift+0x5c>
8111dae4:	1085883a 	add	r2,r2,r2
8111dae8:	29400044 	addi	r5,r5,1
8111daec:	143ffd16 	blt	r2,r16,8111dae4 <__reset+0xfb0fdae4>
8111daf0:	9009883a 	mov	r4,r18
8111daf4:	111d2e40 	call	8111d2e4 <_Balloc>
8111daf8:	10c00504 	addi	r3,r2,20
8111dafc:	0540070e 	bge	zero,r21,8111db1c <__lshift+0x88>
8111db00:	ad6b883a 	add	r21,r21,r21
8111db04:	ad6b883a 	add	r21,r21,r21
8111db08:	1809883a 	mov	r4,r3
8111db0c:	1d47883a 	add	r3,r3,r21
8111db10:	20000015 	stw	zero,0(r4)
8111db14:	21000104 	addi	r4,r4,4
8111db18:	193ffd1e 	bne	r3,r4,8111db10 <__reset+0xfb0fdb10>
8111db1c:	8a000417 	ldw	r8,16(r17)
8111db20:	89000504 	addi	r4,r17,20
8111db24:	a18007cc 	andi	r6,r20,31
8111db28:	4211883a 	add	r8,r8,r8
8111db2c:	4211883a 	add	r8,r8,r8
8111db30:	2211883a 	add	r8,r4,r8
8111db34:	30002326 	beq	r6,zero,8111dbc4 <__lshift+0x130>
8111db38:	02400804 	movi	r9,32
8111db3c:	4993c83a 	sub	r9,r9,r6
8111db40:	000b883a 	mov	r5,zero
8111db44:	21c00017 	ldw	r7,0(r4)
8111db48:	1815883a 	mov	r10,r3
8111db4c:	18c00104 	addi	r3,r3,4
8111db50:	398e983a 	sll	r7,r7,r6
8111db54:	21000104 	addi	r4,r4,4
8111db58:	394ab03a 	or	r5,r7,r5
8111db5c:	197fff15 	stw	r5,-4(r3)
8111db60:	217fff17 	ldw	r5,-4(r4)
8111db64:	2a4ad83a 	srl	r5,r5,r9
8111db68:	223ff636 	bltu	r4,r8,8111db44 <__reset+0xfb0fdb44>
8111db6c:	51400115 	stw	r5,4(r10)
8111db70:	28001a1e 	bne	r5,zero,8111dbdc <__lshift+0x148>
8111db74:	843fffc4 	addi	r16,r16,-1
8111db78:	14000415 	stw	r16,16(r2)
8111db7c:	88000826 	beq	r17,zero,8111dba0 <__lshift+0x10c>
8111db80:	89000117 	ldw	r4,4(r17)
8111db84:	90c01317 	ldw	r3,76(r18)
8111db88:	2109883a 	add	r4,r4,r4
8111db8c:	2109883a 	add	r4,r4,r4
8111db90:	1907883a 	add	r3,r3,r4
8111db94:	19000017 	ldw	r4,0(r3)
8111db98:	89000015 	stw	r4,0(r17)
8111db9c:	1c400015 	stw	r17,0(r3)
8111dba0:	dfc00617 	ldw	ra,24(sp)
8111dba4:	dd400517 	ldw	r21,20(sp)
8111dba8:	dd000417 	ldw	r20,16(sp)
8111dbac:	dcc00317 	ldw	r19,12(sp)
8111dbb0:	dc800217 	ldw	r18,8(sp)
8111dbb4:	dc400117 	ldw	r17,4(sp)
8111dbb8:	dc000017 	ldw	r16,0(sp)
8111dbbc:	dec00704 	addi	sp,sp,28
8111dbc0:	f800283a 	ret
8111dbc4:	21400017 	ldw	r5,0(r4)
8111dbc8:	18c00104 	addi	r3,r3,4
8111dbcc:	21000104 	addi	r4,r4,4
8111dbd0:	197fff15 	stw	r5,-4(r3)
8111dbd4:	223ffb36 	bltu	r4,r8,8111dbc4 <__reset+0xfb0fdbc4>
8111dbd8:	003fe606 	br	8111db74 <__reset+0xfb0fdb74>
8111dbdc:	9c000084 	addi	r16,r19,2
8111dbe0:	003fe406 	br	8111db74 <__reset+0xfb0fdb74>

8111dbe4 <__mcmp>:
8111dbe4:	20800417 	ldw	r2,16(r4)
8111dbe8:	28c00417 	ldw	r3,16(r5)
8111dbec:	10c5c83a 	sub	r2,r2,r3
8111dbf0:	1000111e 	bne	r2,zero,8111dc38 <__mcmp+0x54>
8111dbf4:	18c7883a 	add	r3,r3,r3
8111dbf8:	18c7883a 	add	r3,r3,r3
8111dbfc:	21000504 	addi	r4,r4,20
8111dc00:	29400504 	addi	r5,r5,20
8111dc04:	20c5883a 	add	r2,r4,r3
8111dc08:	28cb883a 	add	r5,r5,r3
8111dc0c:	00000106 	br	8111dc14 <__mcmp+0x30>
8111dc10:	20800a2e 	bgeu	r4,r2,8111dc3c <__mcmp+0x58>
8111dc14:	10bfff04 	addi	r2,r2,-4
8111dc18:	297fff04 	addi	r5,r5,-4
8111dc1c:	11800017 	ldw	r6,0(r2)
8111dc20:	28c00017 	ldw	r3,0(r5)
8111dc24:	30fffa26 	beq	r6,r3,8111dc10 <__reset+0xfb0fdc10>
8111dc28:	30c00236 	bltu	r6,r3,8111dc34 <__mcmp+0x50>
8111dc2c:	00800044 	movi	r2,1
8111dc30:	f800283a 	ret
8111dc34:	00bfffc4 	movi	r2,-1
8111dc38:	f800283a 	ret
8111dc3c:	0005883a 	mov	r2,zero
8111dc40:	f800283a 	ret

8111dc44 <__mdiff>:
8111dc44:	defffa04 	addi	sp,sp,-24
8111dc48:	de00012e 	bgeu	sp,et,8111dc50 <__mdiff+0xc>
8111dc4c:	003b68fa 	trap	3
8111dc50:	28c00417 	ldw	r3,16(r5)
8111dc54:	30800417 	ldw	r2,16(r6)
8111dc58:	dcc00315 	stw	r19,12(sp)
8111dc5c:	dc800215 	stw	r18,8(sp)
8111dc60:	dfc00515 	stw	ra,20(sp)
8111dc64:	dd000415 	stw	r20,16(sp)
8111dc68:	dc400115 	stw	r17,4(sp)
8111dc6c:	dc000015 	stw	r16,0(sp)
8111dc70:	1887c83a 	sub	r3,r3,r2
8111dc74:	2825883a 	mov	r18,r5
8111dc78:	3027883a 	mov	r19,r6
8111dc7c:	1800141e 	bne	r3,zero,8111dcd0 <__mdiff+0x8c>
8111dc80:	1085883a 	add	r2,r2,r2
8111dc84:	1085883a 	add	r2,r2,r2
8111dc88:	2a000504 	addi	r8,r5,20
8111dc8c:	34000504 	addi	r16,r6,20
8111dc90:	4087883a 	add	r3,r8,r2
8111dc94:	8085883a 	add	r2,r16,r2
8111dc98:	00000106 	br	8111dca0 <__mdiff+0x5c>
8111dc9c:	40c0592e 	bgeu	r8,r3,8111de04 <__mdiff+0x1c0>
8111dca0:	18ffff04 	addi	r3,r3,-4
8111dca4:	10bfff04 	addi	r2,r2,-4
8111dca8:	19c00017 	ldw	r7,0(r3)
8111dcac:	11400017 	ldw	r5,0(r2)
8111dcb0:	397ffa26 	beq	r7,r5,8111dc9c <__reset+0xfb0fdc9c>
8111dcb4:	3940592e 	bgeu	r7,r5,8111de1c <__mdiff+0x1d8>
8111dcb8:	9005883a 	mov	r2,r18
8111dcbc:	4023883a 	mov	r17,r8
8111dcc0:	9825883a 	mov	r18,r19
8111dcc4:	05000044 	movi	r20,1
8111dcc8:	1027883a 	mov	r19,r2
8111dccc:	00000406 	br	8111dce0 <__mdiff+0x9c>
8111dcd0:	18005616 	blt	r3,zero,8111de2c <__mdiff+0x1e8>
8111dcd4:	34400504 	addi	r17,r6,20
8111dcd8:	2c000504 	addi	r16,r5,20
8111dcdc:	0029883a 	mov	r20,zero
8111dce0:	91400117 	ldw	r5,4(r18)
8111dce4:	111d2e40 	call	8111d2e4 <_Balloc>
8111dce8:	92400417 	ldw	r9,16(r18)
8111dcec:	9b000417 	ldw	r12,16(r19)
8111dcf0:	12c00504 	addi	r11,r2,20
8111dcf4:	4a51883a 	add	r8,r9,r9
8111dcf8:	6319883a 	add	r12,r12,r12
8111dcfc:	4211883a 	add	r8,r8,r8
8111dd00:	6319883a 	add	r12,r12,r12
8111dd04:	15000315 	stw	r20,12(r2)
8111dd08:	8211883a 	add	r8,r16,r8
8111dd0c:	8b19883a 	add	r12,r17,r12
8111dd10:	0007883a 	mov	r3,zero
8111dd14:	81400017 	ldw	r5,0(r16)
8111dd18:	89c00017 	ldw	r7,0(r17)
8111dd1c:	59800104 	addi	r6,r11,4
8111dd20:	293fffcc 	andi	r4,r5,65535
8111dd24:	20c7883a 	add	r3,r4,r3
8111dd28:	393fffcc 	andi	r4,r7,65535
8111dd2c:	1909c83a 	sub	r4,r3,r4
8111dd30:	280ad43a 	srli	r5,r5,16
8111dd34:	380ed43a 	srli	r7,r7,16
8111dd38:	2007d43a 	srai	r3,r4,16
8111dd3c:	213fffcc 	andi	r4,r4,65535
8111dd40:	29cbc83a 	sub	r5,r5,r7
8111dd44:	28c7883a 	add	r3,r5,r3
8111dd48:	180a943a 	slli	r5,r3,16
8111dd4c:	8c400104 	addi	r17,r17,4
8111dd50:	84000104 	addi	r16,r16,4
8111dd54:	2908b03a 	or	r4,r5,r4
8111dd58:	59000015 	stw	r4,0(r11)
8111dd5c:	1807d43a 	srai	r3,r3,16
8111dd60:	3015883a 	mov	r10,r6
8111dd64:	3017883a 	mov	r11,r6
8111dd68:	8b3fea36 	bltu	r17,r12,8111dd14 <__reset+0xfb0fdd14>
8111dd6c:	8200162e 	bgeu	r16,r8,8111ddc8 <__mdiff+0x184>
8111dd70:	8017883a 	mov	r11,r16
8111dd74:	59400017 	ldw	r5,0(r11)
8111dd78:	31800104 	addi	r6,r6,4
8111dd7c:	5ac00104 	addi	r11,r11,4
8111dd80:	293fffcc 	andi	r4,r5,65535
8111dd84:	20c7883a 	add	r3,r4,r3
8111dd88:	280ed43a 	srli	r7,r5,16
8111dd8c:	180bd43a 	srai	r5,r3,16
8111dd90:	193fffcc 	andi	r4,r3,65535
8111dd94:	3947883a 	add	r3,r7,r5
8111dd98:	180a943a 	slli	r5,r3,16
8111dd9c:	1807d43a 	srai	r3,r3,16
8111dda0:	2908b03a 	or	r4,r5,r4
8111dda4:	313fff15 	stw	r4,-4(r6)
8111dda8:	5a3ff236 	bltu	r11,r8,8111dd74 <__reset+0xfb0fdd74>
8111ddac:	0406303a 	nor	r3,zero,r16
8111ddb0:	1a07883a 	add	r3,r3,r8
8111ddb4:	1806d0ba 	srli	r3,r3,2
8111ddb8:	18c00044 	addi	r3,r3,1
8111ddbc:	18c7883a 	add	r3,r3,r3
8111ddc0:	18c7883a 	add	r3,r3,r3
8111ddc4:	50d5883a 	add	r10,r10,r3
8111ddc8:	50ffff04 	addi	r3,r10,-4
8111ddcc:	2000041e 	bne	r4,zero,8111dde0 <__mdiff+0x19c>
8111ddd0:	18ffff04 	addi	r3,r3,-4
8111ddd4:	19000017 	ldw	r4,0(r3)
8111ddd8:	4a7fffc4 	addi	r9,r9,-1
8111dddc:	203ffc26 	beq	r4,zero,8111ddd0 <__reset+0xfb0fddd0>
8111dde0:	12400415 	stw	r9,16(r2)
8111dde4:	dfc00517 	ldw	ra,20(sp)
8111dde8:	dd000417 	ldw	r20,16(sp)
8111ddec:	dcc00317 	ldw	r19,12(sp)
8111ddf0:	dc800217 	ldw	r18,8(sp)
8111ddf4:	dc400117 	ldw	r17,4(sp)
8111ddf8:	dc000017 	ldw	r16,0(sp)
8111ddfc:	dec00604 	addi	sp,sp,24
8111de00:	f800283a 	ret
8111de04:	000b883a 	mov	r5,zero
8111de08:	111d2e40 	call	8111d2e4 <_Balloc>
8111de0c:	00c00044 	movi	r3,1
8111de10:	10c00415 	stw	r3,16(r2)
8111de14:	10000515 	stw	zero,20(r2)
8111de18:	003ff206 	br	8111dde4 <__reset+0xfb0fdde4>
8111de1c:	8023883a 	mov	r17,r16
8111de20:	0029883a 	mov	r20,zero
8111de24:	4021883a 	mov	r16,r8
8111de28:	003fad06 	br	8111dce0 <__reset+0xfb0fdce0>
8111de2c:	9005883a 	mov	r2,r18
8111de30:	94400504 	addi	r17,r18,20
8111de34:	9c000504 	addi	r16,r19,20
8111de38:	9825883a 	mov	r18,r19
8111de3c:	05000044 	movi	r20,1
8111de40:	1027883a 	mov	r19,r2
8111de44:	003fa606 	br	8111dce0 <__reset+0xfb0fdce0>

8111de48 <__ulp>:
8111de48:	295ffc2c 	andhi	r5,r5,32752
8111de4c:	00bf3034 	movhi	r2,64704
8111de50:	2887883a 	add	r3,r5,r2
8111de54:	00c0020e 	bge	zero,r3,8111de60 <__ulp+0x18>
8111de58:	0005883a 	mov	r2,zero
8111de5c:	f800283a 	ret
8111de60:	00c7c83a 	sub	r3,zero,r3
8111de64:	1807d53a 	srai	r3,r3,20
8111de68:	008004c4 	movi	r2,19
8111de6c:	10c00b0e 	bge	r2,r3,8111de9c <__ulp+0x54>
8111de70:	18bffb04 	addi	r2,r3,-20
8111de74:	01000784 	movi	r4,30
8111de78:	0007883a 	mov	r3,zero
8111de7c:	20800516 	blt	r4,r2,8111de94 <__ulp+0x4c>
8111de80:	010007c4 	movi	r4,31
8111de84:	2089c83a 	sub	r4,r4,r2
8111de88:	00800044 	movi	r2,1
8111de8c:	1104983a 	sll	r2,r2,r4
8111de90:	f800283a 	ret
8111de94:	00800044 	movi	r2,1
8111de98:	f800283a 	ret
8111de9c:	01400234 	movhi	r5,8
8111dea0:	28c7d83a 	sra	r3,r5,r3
8111dea4:	0005883a 	mov	r2,zero
8111dea8:	f800283a 	ret

8111deac <__b2d>:
8111deac:	defffa04 	addi	sp,sp,-24
8111deb0:	de00012e 	bgeu	sp,et,8111deb8 <__b2d+0xc>
8111deb4:	003b68fa 	trap	3
8111deb8:	dc000015 	stw	r16,0(sp)
8111debc:	24000417 	ldw	r16,16(r4)
8111dec0:	dc400115 	stw	r17,4(sp)
8111dec4:	24400504 	addi	r17,r4,20
8111dec8:	8421883a 	add	r16,r16,r16
8111decc:	8421883a 	add	r16,r16,r16
8111ded0:	8c21883a 	add	r16,r17,r16
8111ded4:	dc800215 	stw	r18,8(sp)
8111ded8:	84bfff17 	ldw	r18,-4(r16)
8111dedc:	dd000415 	stw	r20,16(sp)
8111dee0:	dcc00315 	stw	r19,12(sp)
8111dee4:	9009883a 	mov	r4,r18
8111dee8:	2829883a 	mov	r20,r5
8111deec:	dfc00515 	stw	ra,20(sp)
8111def0:	111d5f00 	call	8111d5f0 <__hi0bits>
8111def4:	00c00804 	movi	r3,32
8111def8:	1889c83a 	sub	r4,r3,r2
8111defc:	a1000015 	stw	r4,0(r20)
8111df00:	01000284 	movi	r4,10
8111df04:	84ffff04 	addi	r19,r16,-4
8111df08:	20801216 	blt	r4,r2,8111df54 <__b2d+0xa8>
8111df0c:	018002c4 	movi	r6,11
8111df10:	308dc83a 	sub	r6,r6,r2
8111df14:	9186d83a 	srl	r3,r18,r6
8111df18:	18cffc34 	orhi	r3,r3,16368
8111df1c:	8cc0212e 	bgeu	r17,r19,8111dfa4 <__b2d+0xf8>
8111df20:	813ffe17 	ldw	r4,-8(r16)
8111df24:	218cd83a 	srl	r6,r4,r6
8111df28:	10800544 	addi	r2,r2,21
8111df2c:	9084983a 	sll	r2,r18,r2
8111df30:	1184b03a 	or	r2,r2,r6
8111df34:	dfc00517 	ldw	ra,20(sp)
8111df38:	dd000417 	ldw	r20,16(sp)
8111df3c:	dcc00317 	ldw	r19,12(sp)
8111df40:	dc800217 	ldw	r18,8(sp)
8111df44:	dc400117 	ldw	r17,4(sp)
8111df48:	dc000017 	ldw	r16,0(sp)
8111df4c:	dec00604 	addi	sp,sp,24
8111df50:	f800283a 	ret
8111df54:	8cc00f2e 	bgeu	r17,r19,8111df94 <__b2d+0xe8>
8111df58:	117ffd44 	addi	r5,r2,-11
8111df5c:	80bffe17 	ldw	r2,-8(r16)
8111df60:	28000e26 	beq	r5,zero,8111df9c <__b2d+0xf0>
8111df64:	1949c83a 	sub	r4,r3,r5
8111df68:	9164983a 	sll	r18,r18,r5
8111df6c:	1106d83a 	srl	r3,r2,r4
8111df70:	81bffe04 	addi	r6,r16,-8
8111df74:	948ffc34 	orhi	r18,r18,16368
8111df78:	90c6b03a 	or	r3,r18,r3
8111df7c:	89800e2e 	bgeu	r17,r6,8111dfb8 <__b2d+0x10c>
8111df80:	81bffd17 	ldw	r6,-12(r16)
8111df84:	1144983a 	sll	r2,r2,r5
8111df88:	310ad83a 	srl	r5,r6,r4
8111df8c:	2884b03a 	or	r2,r5,r2
8111df90:	003fe806 	br	8111df34 <__reset+0xfb0fdf34>
8111df94:	10bffd44 	addi	r2,r2,-11
8111df98:	1000041e 	bne	r2,zero,8111dfac <__b2d+0x100>
8111df9c:	90cffc34 	orhi	r3,r18,16368
8111dfa0:	003fe406 	br	8111df34 <__reset+0xfb0fdf34>
8111dfa4:	000d883a 	mov	r6,zero
8111dfa8:	003fdf06 	br	8111df28 <__reset+0xfb0fdf28>
8111dfac:	90a4983a 	sll	r18,r18,r2
8111dfb0:	0005883a 	mov	r2,zero
8111dfb4:	003ff906 	br	8111df9c <__reset+0xfb0fdf9c>
8111dfb8:	1144983a 	sll	r2,r2,r5
8111dfbc:	003fdd06 	br	8111df34 <__reset+0xfb0fdf34>

8111dfc0 <__d2b>:
8111dfc0:	defff804 	addi	sp,sp,-32
8111dfc4:	de00012e 	bgeu	sp,et,8111dfcc <__d2b+0xc>
8111dfc8:	003b68fa 	trap	3
8111dfcc:	dc000215 	stw	r16,8(sp)
8111dfd0:	3021883a 	mov	r16,r6
8111dfd4:	dc400315 	stw	r17,12(sp)
8111dfd8:	8022907a 	slli	r17,r16,1
8111dfdc:	dd000615 	stw	r20,24(sp)
8111dfe0:	2829883a 	mov	r20,r5
8111dfe4:	01400044 	movi	r5,1
8111dfe8:	dcc00515 	stw	r19,20(sp)
8111dfec:	dc800415 	stw	r18,16(sp)
8111dff0:	dfc00715 	stw	ra,28(sp)
8111dff4:	3825883a 	mov	r18,r7
8111dff8:	8822d57a 	srli	r17,r17,21
8111dffc:	111d2e40 	call	8111d2e4 <_Balloc>
8111e000:	1027883a 	mov	r19,r2
8111e004:	00800434 	movhi	r2,16
8111e008:	10bfffc4 	addi	r2,r2,-1
8111e00c:	808c703a 	and	r6,r16,r2
8111e010:	88000126 	beq	r17,zero,8111e018 <__d2b+0x58>
8111e014:	31800434 	orhi	r6,r6,16
8111e018:	d9800015 	stw	r6,0(sp)
8111e01c:	a0002426 	beq	r20,zero,8111e0b0 <__d2b+0xf0>
8111e020:	d9000104 	addi	r4,sp,4
8111e024:	dd000115 	stw	r20,4(sp)
8111e028:	111d6580 	call	8111d658 <__lo0bits>
8111e02c:	d8c00017 	ldw	r3,0(sp)
8111e030:	10002f1e 	bne	r2,zero,8111e0f0 <__d2b+0x130>
8111e034:	d9000117 	ldw	r4,4(sp)
8111e038:	99000515 	stw	r4,20(r19)
8111e03c:	1821003a 	cmpeq	r16,r3,zero
8111e040:	01000084 	movi	r4,2
8111e044:	2421c83a 	sub	r16,r4,r16
8111e048:	98c00615 	stw	r3,24(r19)
8111e04c:	9c000415 	stw	r16,16(r19)
8111e050:	88001f1e 	bne	r17,zero,8111e0d0 <__d2b+0x110>
8111e054:	10bef384 	addi	r2,r2,-1074
8111e058:	90800015 	stw	r2,0(r18)
8111e05c:	00900034 	movhi	r2,16384
8111e060:	10bfffc4 	addi	r2,r2,-1
8111e064:	8085883a 	add	r2,r16,r2
8111e068:	1085883a 	add	r2,r2,r2
8111e06c:	1085883a 	add	r2,r2,r2
8111e070:	9885883a 	add	r2,r19,r2
8111e074:	11000517 	ldw	r4,20(r2)
8111e078:	8020917a 	slli	r16,r16,5
8111e07c:	111d5f00 	call	8111d5f0 <__hi0bits>
8111e080:	d8c00817 	ldw	r3,32(sp)
8111e084:	8085c83a 	sub	r2,r16,r2
8111e088:	18800015 	stw	r2,0(r3)
8111e08c:	9805883a 	mov	r2,r19
8111e090:	dfc00717 	ldw	ra,28(sp)
8111e094:	dd000617 	ldw	r20,24(sp)
8111e098:	dcc00517 	ldw	r19,20(sp)
8111e09c:	dc800417 	ldw	r18,16(sp)
8111e0a0:	dc400317 	ldw	r17,12(sp)
8111e0a4:	dc000217 	ldw	r16,8(sp)
8111e0a8:	dec00804 	addi	sp,sp,32
8111e0ac:	f800283a 	ret
8111e0b0:	d809883a 	mov	r4,sp
8111e0b4:	111d6580 	call	8111d658 <__lo0bits>
8111e0b8:	d8c00017 	ldw	r3,0(sp)
8111e0bc:	04000044 	movi	r16,1
8111e0c0:	9c000415 	stw	r16,16(r19)
8111e0c4:	98c00515 	stw	r3,20(r19)
8111e0c8:	10800804 	addi	r2,r2,32
8111e0cc:	883fe126 	beq	r17,zero,8111e054 <__reset+0xfb0fe054>
8111e0d0:	00c00d44 	movi	r3,53
8111e0d4:	8c7ef344 	addi	r17,r17,-1075
8111e0d8:	88a3883a 	add	r17,r17,r2
8111e0dc:	1885c83a 	sub	r2,r3,r2
8111e0e0:	d8c00817 	ldw	r3,32(sp)
8111e0e4:	94400015 	stw	r17,0(r18)
8111e0e8:	18800015 	stw	r2,0(r3)
8111e0ec:	003fe706 	br	8111e08c <__reset+0xfb0fe08c>
8111e0f0:	01000804 	movi	r4,32
8111e0f4:	2089c83a 	sub	r4,r4,r2
8111e0f8:	1908983a 	sll	r4,r3,r4
8111e0fc:	d9400117 	ldw	r5,4(sp)
8111e100:	1886d83a 	srl	r3,r3,r2
8111e104:	2148b03a 	or	r4,r4,r5
8111e108:	99000515 	stw	r4,20(r19)
8111e10c:	d8c00015 	stw	r3,0(sp)
8111e110:	003fca06 	br	8111e03c <__reset+0xfb0fe03c>

8111e114 <__ratio>:
8111e114:	defff904 	addi	sp,sp,-28
8111e118:	de00012e 	bgeu	sp,et,8111e120 <__ratio+0xc>
8111e11c:	003b68fa 	trap	3
8111e120:	dc400315 	stw	r17,12(sp)
8111e124:	2823883a 	mov	r17,r5
8111e128:	d9400104 	addi	r5,sp,4
8111e12c:	dfc00615 	stw	ra,24(sp)
8111e130:	dcc00515 	stw	r19,20(sp)
8111e134:	dc800415 	stw	r18,16(sp)
8111e138:	2027883a 	mov	r19,r4
8111e13c:	dc000215 	stw	r16,8(sp)
8111e140:	111deac0 	call	8111deac <__b2d>
8111e144:	d80b883a 	mov	r5,sp
8111e148:	8809883a 	mov	r4,r17
8111e14c:	1025883a 	mov	r18,r2
8111e150:	1821883a 	mov	r16,r3
8111e154:	111deac0 	call	8111deac <__b2d>
8111e158:	8a000417 	ldw	r8,16(r17)
8111e15c:	99000417 	ldw	r4,16(r19)
8111e160:	d9400117 	ldw	r5,4(sp)
8111e164:	2209c83a 	sub	r4,r4,r8
8111e168:	2010917a 	slli	r8,r4,5
8111e16c:	d9000017 	ldw	r4,0(sp)
8111e170:	2909c83a 	sub	r4,r5,r4
8111e174:	4109883a 	add	r4,r8,r4
8111e178:	01000e0e 	bge	zero,r4,8111e1b4 <__ratio+0xa0>
8111e17c:	2008953a 	slli	r4,r4,20
8111e180:	2421883a 	add	r16,r4,r16
8111e184:	100d883a 	mov	r6,r2
8111e188:	180f883a 	mov	r7,r3
8111e18c:	9009883a 	mov	r4,r18
8111e190:	800b883a 	mov	r5,r16
8111e194:	11262080 	call	81126208 <__divdf3>
8111e198:	dfc00617 	ldw	ra,24(sp)
8111e19c:	dcc00517 	ldw	r19,20(sp)
8111e1a0:	dc800417 	ldw	r18,16(sp)
8111e1a4:	dc400317 	ldw	r17,12(sp)
8111e1a8:	dc000217 	ldw	r16,8(sp)
8111e1ac:	dec00704 	addi	sp,sp,28
8111e1b0:	f800283a 	ret
8111e1b4:	2008953a 	slli	r4,r4,20
8111e1b8:	1907c83a 	sub	r3,r3,r4
8111e1bc:	003ff106 	br	8111e184 <__reset+0xfb0fe184>

8111e1c0 <_mprec_log10>:
8111e1c0:	defffe04 	addi	sp,sp,-8
8111e1c4:	de00012e 	bgeu	sp,et,8111e1cc <_mprec_log10+0xc>
8111e1c8:	003b68fa 	trap	3
8111e1cc:	008005c4 	movi	r2,23
8111e1d0:	dc000015 	stw	r16,0(sp)
8111e1d4:	dfc00115 	stw	ra,4(sp)
8111e1d8:	2021883a 	mov	r16,r4
8111e1dc:	11000d0e 	bge	r2,r4,8111e214 <_mprec_log10+0x54>
8111e1e0:	0005883a 	mov	r2,zero
8111e1e4:	00cffc34 	movhi	r3,16368
8111e1e8:	843fffc4 	addi	r16,r16,-1
8111e1ec:	000d883a 	mov	r6,zero
8111e1f0:	01d00934 	movhi	r7,16420
8111e1f4:	1009883a 	mov	r4,r2
8111e1f8:	180b883a 	mov	r5,r3
8111e1fc:	11114640 	call	81111464 <__muldf3>
8111e200:	803ff91e 	bne	r16,zero,8111e1e8 <__reset+0xfb0fe1e8>
8111e204:	dfc00117 	ldw	ra,4(sp)
8111e208:	dc000017 	ldw	r16,0(sp)
8111e20c:	dec00204 	addi	sp,sp,8
8111e210:	f800283a 	ret
8111e214:	202090fa 	slli	r16,r4,3
8111e218:	00a04534 	movhi	r2,33044
8111e21c:	10810404 	addi	r2,r2,1040
8111e220:	1421883a 	add	r16,r2,r16
8111e224:	80800017 	ldw	r2,0(r16)
8111e228:	80c00117 	ldw	r3,4(r16)
8111e22c:	dfc00117 	ldw	ra,4(sp)
8111e230:	dc000017 	ldw	r16,0(sp)
8111e234:	dec00204 	addi	sp,sp,8
8111e238:	f800283a 	ret

8111e23c <__copybits>:
8111e23c:	297fffc4 	addi	r5,r5,-1
8111e240:	280fd17a 	srai	r7,r5,5
8111e244:	30c00417 	ldw	r3,16(r6)
8111e248:	30800504 	addi	r2,r6,20
8111e24c:	39c00044 	addi	r7,r7,1
8111e250:	18c7883a 	add	r3,r3,r3
8111e254:	39cf883a 	add	r7,r7,r7
8111e258:	18c7883a 	add	r3,r3,r3
8111e25c:	39cf883a 	add	r7,r7,r7
8111e260:	10c7883a 	add	r3,r2,r3
8111e264:	21cf883a 	add	r7,r4,r7
8111e268:	10c00d2e 	bgeu	r2,r3,8111e2a0 <__copybits+0x64>
8111e26c:	200b883a 	mov	r5,r4
8111e270:	12000017 	ldw	r8,0(r2)
8111e274:	29400104 	addi	r5,r5,4
8111e278:	10800104 	addi	r2,r2,4
8111e27c:	2a3fff15 	stw	r8,-4(r5)
8111e280:	10fffb36 	bltu	r2,r3,8111e270 <__reset+0xfb0fe270>
8111e284:	1985c83a 	sub	r2,r3,r6
8111e288:	10bffac4 	addi	r2,r2,-21
8111e28c:	1004d0ba 	srli	r2,r2,2
8111e290:	10800044 	addi	r2,r2,1
8111e294:	1085883a 	add	r2,r2,r2
8111e298:	1085883a 	add	r2,r2,r2
8111e29c:	2089883a 	add	r4,r4,r2
8111e2a0:	21c0032e 	bgeu	r4,r7,8111e2b0 <__copybits+0x74>
8111e2a4:	20000015 	stw	zero,0(r4)
8111e2a8:	21000104 	addi	r4,r4,4
8111e2ac:	21fffd36 	bltu	r4,r7,8111e2a4 <__reset+0xfb0fe2a4>
8111e2b0:	f800283a 	ret

8111e2b4 <__any_on>:
8111e2b4:	20c00417 	ldw	r3,16(r4)
8111e2b8:	2805d17a 	srai	r2,r5,5
8111e2bc:	21000504 	addi	r4,r4,20
8111e2c0:	18800d0e 	bge	r3,r2,8111e2f8 <__any_on+0x44>
8111e2c4:	18c7883a 	add	r3,r3,r3
8111e2c8:	18c7883a 	add	r3,r3,r3
8111e2cc:	20c7883a 	add	r3,r4,r3
8111e2d0:	20c0192e 	bgeu	r4,r3,8111e338 <__any_on+0x84>
8111e2d4:	18bfff17 	ldw	r2,-4(r3)
8111e2d8:	18ffff04 	addi	r3,r3,-4
8111e2dc:	1000041e 	bne	r2,zero,8111e2f0 <__any_on+0x3c>
8111e2e0:	20c0142e 	bgeu	r4,r3,8111e334 <__any_on+0x80>
8111e2e4:	18ffff04 	addi	r3,r3,-4
8111e2e8:	19400017 	ldw	r5,0(r3)
8111e2ec:	283ffc26 	beq	r5,zero,8111e2e0 <__reset+0xfb0fe2e0>
8111e2f0:	00800044 	movi	r2,1
8111e2f4:	f800283a 	ret
8111e2f8:	10c00a0e 	bge	r2,r3,8111e324 <__any_on+0x70>
8111e2fc:	1085883a 	add	r2,r2,r2
8111e300:	1085883a 	add	r2,r2,r2
8111e304:	294007cc 	andi	r5,r5,31
8111e308:	2087883a 	add	r3,r4,r2
8111e30c:	283ff026 	beq	r5,zero,8111e2d0 <__reset+0xfb0fe2d0>
8111e310:	19800017 	ldw	r6,0(r3)
8111e314:	3144d83a 	srl	r2,r6,r5
8111e318:	114a983a 	sll	r5,r2,r5
8111e31c:	317ff41e 	bne	r6,r5,8111e2f0 <__reset+0xfb0fe2f0>
8111e320:	003feb06 	br	8111e2d0 <__reset+0xfb0fe2d0>
8111e324:	1085883a 	add	r2,r2,r2
8111e328:	1085883a 	add	r2,r2,r2
8111e32c:	2087883a 	add	r3,r4,r2
8111e330:	003fe706 	br	8111e2d0 <__reset+0xfb0fe2d0>
8111e334:	f800283a 	ret
8111e338:	0005883a 	mov	r2,zero
8111e33c:	f800283a 	ret

8111e340 <_read_r>:
8111e340:	defffd04 	addi	sp,sp,-12
8111e344:	de00012e 	bgeu	sp,et,8111e34c <_read_r+0xc>
8111e348:	003b68fa 	trap	3
8111e34c:	2805883a 	mov	r2,r5
8111e350:	dc000015 	stw	r16,0(sp)
8111e354:	04204534 	movhi	r16,33044
8111e358:	dc400115 	stw	r17,4(sp)
8111e35c:	300b883a 	mov	r5,r6
8111e360:	840b0204 	addi	r16,r16,11272
8111e364:	2023883a 	mov	r17,r4
8111e368:	380d883a 	mov	r6,r7
8111e36c:	1009883a 	mov	r4,r2
8111e370:	dfc00215 	stw	ra,8(sp)
8111e374:	80000015 	stw	zero,0(r16)
8111e378:	1128efc0 	call	81128efc <read>
8111e37c:	00ffffc4 	movi	r3,-1
8111e380:	10c00526 	beq	r2,r3,8111e398 <_read_r+0x58>
8111e384:	dfc00217 	ldw	ra,8(sp)
8111e388:	dc400117 	ldw	r17,4(sp)
8111e38c:	dc000017 	ldw	r16,0(sp)
8111e390:	dec00304 	addi	sp,sp,12
8111e394:	f800283a 	ret
8111e398:	80c00017 	ldw	r3,0(r16)
8111e39c:	183ff926 	beq	r3,zero,8111e384 <__reset+0xfb0fe384>
8111e3a0:	88c00015 	stw	r3,0(r17)
8111e3a4:	003ff706 	br	8111e384 <__reset+0xfb0fe384>

8111e3a8 <_realloc_r>:
8111e3a8:	defff604 	addi	sp,sp,-40
8111e3ac:	de00012e 	bgeu	sp,et,8111e3b4 <_realloc_r+0xc>
8111e3b0:	003b68fa 	trap	3
8111e3b4:	dc800215 	stw	r18,8(sp)
8111e3b8:	dfc00915 	stw	ra,36(sp)
8111e3bc:	df000815 	stw	fp,32(sp)
8111e3c0:	ddc00715 	stw	r23,28(sp)
8111e3c4:	dd800615 	stw	r22,24(sp)
8111e3c8:	dd400515 	stw	r21,20(sp)
8111e3cc:	dd000415 	stw	r20,16(sp)
8111e3d0:	dcc00315 	stw	r19,12(sp)
8111e3d4:	dc400115 	stw	r17,4(sp)
8111e3d8:	dc000015 	stw	r16,0(sp)
8111e3dc:	3025883a 	mov	r18,r6
8111e3e0:	2800b726 	beq	r5,zero,8111e6c0 <_realloc_r+0x318>
8111e3e4:	282b883a 	mov	r21,r5
8111e3e8:	2029883a 	mov	r20,r4
8111e3ec:	11296dc0 	call	811296dc <__malloc_lock>
8111e3f0:	a8bfff17 	ldw	r2,-4(r21)
8111e3f4:	043fff04 	movi	r16,-4
8111e3f8:	90c002c4 	addi	r3,r18,11
8111e3fc:	01000584 	movi	r4,22
8111e400:	acfffe04 	addi	r19,r21,-8
8111e404:	1420703a 	and	r16,r2,r16
8111e408:	20c0332e 	bgeu	r4,r3,8111e4d8 <_realloc_r+0x130>
8111e40c:	047ffe04 	movi	r17,-8
8111e410:	1c62703a 	and	r17,r3,r17
8111e414:	8807883a 	mov	r3,r17
8111e418:	88005816 	blt	r17,zero,8111e57c <_realloc_r+0x1d4>
8111e41c:	8c805736 	bltu	r17,r18,8111e57c <_realloc_r+0x1d4>
8111e420:	80c0300e 	bge	r16,r3,8111e4e4 <_realloc_r+0x13c>
8111e424:	07204534 	movhi	fp,33044
8111e428:	e7046404 	addi	fp,fp,4496
8111e42c:	e1c00217 	ldw	r7,8(fp)
8111e430:	9c09883a 	add	r4,r19,r16
8111e434:	22000117 	ldw	r8,4(r4)
8111e438:	21c06326 	beq	r4,r7,8111e5c8 <_realloc_r+0x220>
8111e43c:	017fff84 	movi	r5,-2
8111e440:	414a703a 	and	r5,r8,r5
8111e444:	214b883a 	add	r5,r4,r5
8111e448:	29800117 	ldw	r6,4(r5)
8111e44c:	3180004c 	andi	r6,r6,1
8111e450:	30003f26 	beq	r6,zero,8111e550 <_realloc_r+0x1a8>
8111e454:	1080004c 	andi	r2,r2,1
8111e458:	10008326 	beq	r2,zero,8111e668 <_realloc_r+0x2c0>
8111e45c:	900b883a 	mov	r5,r18
8111e460:	a009883a 	mov	r4,r20
8111e464:	11128a00 	call	811128a0 <_malloc_r>
8111e468:	1025883a 	mov	r18,r2
8111e46c:	10011e26 	beq	r2,zero,8111e8e8 <_realloc_r+0x540>
8111e470:	a93fff17 	ldw	r4,-4(r21)
8111e474:	10fffe04 	addi	r3,r2,-8
8111e478:	00bfff84 	movi	r2,-2
8111e47c:	2084703a 	and	r2,r4,r2
8111e480:	9885883a 	add	r2,r19,r2
8111e484:	1880ee26 	beq	r3,r2,8111e840 <_realloc_r+0x498>
8111e488:	81bfff04 	addi	r6,r16,-4
8111e48c:	00800904 	movi	r2,36
8111e490:	1180b836 	bltu	r2,r6,8111e774 <_realloc_r+0x3cc>
8111e494:	00c004c4 	movi	r3,19
8111e498:	19809636 	bltu	r3,r6,8111e6f4 <_realloc_r+0x34c>
8111e49c:	9005883a 	mov	r2,r18
8111e4a0:	a807883a 	mov	r3,r21
8111e4a4:	19000017 	ldw	r4,0(r3)
8111e4a8:	11000015 	stw	r4,0(r2)
8111e4ac:	19000117 	ldw	r4,4(r3)
8111e4b0:	11000115 	stw	r4,4(r2)
8111e4b4:	18c00217 	ldw	r3,8(r3)
8111e4b8:	10c00215 	stw	r3,8(r2)
8111e4bc:	a80b883a 	mov	r5,r21
8111e4c0:	a009883a 	mov	r4,r20
8111e4c4:	111c3140 	call	8111c314 <_free_r>
8111e4c8:	a009883a 	mov	r4,r20
8111e4cc:	11298040 	call	81129804 <__malloc_unlock>
8111e4d0:	9005883a 	mov	r2,r18
8111e4d4:	00001206 	br	8111e520 <_realloc_r+0x178>
8111e4d8:	00c00404 	movi	r3,16
8111e4dc:	1823883a 	mov	r17,r3
8111e4e0:	003fce06 	br	8111e41c <__reset+0xfb0fe41c>
8111e4e4:	a825883a 	mov	r18,r21
8111e4e8:	8445c83a 	sub	r2,r16,r17
8111e4ec:	00c003c4 	movi	r3,15
8111e4f0:	18802636 	bltu	r3,r2,8111e58c <_realloc_r+0x1e4>
8111e4f4:	99800117 	ldw	r6,4(r19)
8111e4f8:	9c07883a 	add	r3,r19,r16
8111e4fc:	3180004c 	andi	r6,r6,1
8111e500:	3420b03a 	or	r16,r6,r16
8111e504:	9c000115 	stw	r16,4(r19)
8111e508:	18800117 	ldw	r2,4(r3)
8111e50c:	10800054 	ori	r2,r2,1
8111e510:	18800115 	stw	r2,4(r3)
8111e514:	a009883a 	mov	r4,r20
8111e518:	11298040 	call	81129804 <__malloc_unlock>
8111e51c:	9005883a 	mov	r2,r18
8111e520:	dfc00917 	ldw	ra,36(sp)
8111e524:	df000817 	ldw	fp,32(sp)
8111e528:	ddc00717 	ldw	r23,28(sp)
8111e52c:	dd800617 	ldw	r22,24(sp)
8111e530:	dd400517 	ldw	r21,20(sp)
8111e534:	dd000417 	ldw	r20,16(sp)
8111e538:	dcc00317 	ldw	r19,12(sp)
8111e53c:	dc800217 	ldw	r18,8(sp)
8111e540:	dc400117 	ldw	r17,4(sp)
8111e544:	dc000017 	ldw	r16,0(sp)
8111e548:	dec00a04 	addi	sp,sp,40
8111e54c:	f800283a 	ret
8111e550:	017fff04 	movi	r5,-4
8111e554:	414a703a 	and	r5,r8,r5
8111e558:	814d883a 	add	r6,r16,r5
8111e55c:	30c01f16 	blt	r6,r3,8111e5dc <_realloc_r+0x234>
8111e560:	20800317 	ldw	r2,12(r4)
8111e564:	20c00217 	ldw	r3,8(r4)
8111e568:	a825883a 	mov	r18,r21
8111e56c:	3021883a 	mov	r16,r6
8111e570:	18800315 	stw	r2,12(r3)
8111e574:	10c00215 	stw	r3,8(r2)
8111e578:	003fdb06 	br	8111e4e8 <__reset+0xfb0fe4e8>
8111e57c:	00800304 	movi	r2,12
8111e580:	a0800015 	stw	r2,0(r20)
8111e584:	0005883a 	mov	r2,zero
8111e588:	003fe506 	br	8111e520 <__reset+0xfb0fe520>
8111e58c:	98c00117 	ldw	r3,4(r19)
8111e590:	9c4b883a 	add	r5,r19,r17
8111e594:	11000054 	ori	r4,r2,1
8111e598:	18c0004c 	andi	r3,r3,1
8111e59c:	1c62b03a 	or	r17,r3,r17
8111e5a0:	9c400115 	stw	r17,4(r19)
8111e5a4:	29000115 	stw	r4,4(r5)
8111e5a8:	2885883a 	add	r2,r5,r2
8111e5ac:	10c00117 	ldw	r3,4(r2)
8111e5b0:	29400204 	addi	r5,r5,8
8111e5b4:	a009883a 	mov	r4,r20
8111e5b8:	18c00054 	ori	r3,r3,1
8111e5bc:	10c00115 	stw	r3,4(r2)
8111e5c0:	111c3140 	call	8111c314 <_free_r>
8111e5c4:	003fd306 	br	8111e514 <__reset+0xfb0fe514>
8111e5c8:	017fff04 	movi	r5,-4
8111e5cc:	414a703a 	and	r5,r8,r5
8111e5d0:	89800404 	addi	r6,r17,16
8111e5d4:	8151883a 	add	r8,r16,r5
8111e5d8:	4180590e 	bge	r8,r6,8111e740 <_realloc_r+0x398>
8111e5dc:	1080004c 	andi	r2,r2,1
8111e5e0:	103f9e1e 	bne	r2,zero,8111e45c <__reset+0xfb0fe45c>
8111e5e4:	adbffe17 	ldw	r22,-8(r21)
8111e5e8:	00bfff04 	movi	r2,-4
8111e5ec:	9dadc83a 	sub	r22,r19,r22
8111e5f0:	b1800117 	ldw	r6,4(r22)
8111e5f4:	3084703a 	and	r2,r6,r2
8111e5f8:	20002026 	beq	r4,zero,8111e67c <_realloc_r+0x2d4>
8111e5fc:	80af883a 	add	r23,r16,r2
8111e600:	b96f883a 	add	r23,r23,r5
8111e604:	21c05f26 	beq	r4,r7,8111e784 <_realloc_r+0x3dc>
8111e608:	b8c01c16 	blt	r23,r3,8111e67c <_realloc_r+0x2d4>
8111e60c:	20800317 	ldw	r2,12(r4)
8111e610:	20c00217 	ldw	r3,8(r4)
8111e614:	81bfff04 	addi	r6,r16,-4
8111e618:	01000904 	movi	r4,36
8111e61c:	18800315 	stw	r2,12(r3)
8111e620:	10c00215 	stw	r3,8(r2)
8111e624:	b0c00217 	ldw	r3,8(r22)
8111e628:	b0800317 	ldw	r2,12(r22)
8111e62c:	b4800204 	addi	r18,r22,8
8111e630:	18800315 	stw	r2,12(r3)
8111e634:	10c00215 	stw	r3,8(r2)
8111e638:	21801b36 	bltu	r4,r6,8111e6a8 <_realloc_r+0x300>
8111e63c:	008004c4 	movi	r2,19
8111e640:	1180352e 	bgeu	r2,r6,8111e718 <_realloc_r+0x370>
8111e644:	a8800017 	ldw	r2,0(r21)
8111e648:	b0800215 	stw	r2,8(r22)
8111e64c:	a8800117 	ldw	r2,4(r21)
8111e650:	b0800315 	stw	r2,12(r22)
8111e654:	008006c4 	movi	r2,27
8111e658:	11807f36 	bltu	r2,r6,8111e858 <_realloc_r+0x4b0>
8111e65c:	b0800404 	addi	r2,r22,16
8111e660:	ad400204 	addi	r21,r21,8
8111e664:	00002d06 	br	8111e71c <_realloc_r+0x374>
8111e668:	adbffe17 	ldw	r22,-8(r21)
8111e66c:	00bfff04 	movi	r2,-4
8111e670:	9dadc83a 	sub	r22,r19,r22
8111e674:	b1000117 	ldw	r4,4(r22)
8111e678:	2084703a 	and	r2,r4,r2
8111e67c:	b03f7726 	beq	r22,zero,8111e45c <__reset+0xfb0fe45c>
8111e680:	80af883a 	add	r23,r16,r2
8111e684:	b8ff7516 	blt	r23,r3,8111e45c <__reset+0xfb0fe45c>
8111e688:	b0800317 	ldw	r2,12(r22)
8111e68c:	b0c00217 	ldw	r3,8(r22)
8111e690:	81bfff04 	addi	r6,r16,-4
8111e694:	01000904 	movi	r4,36
8111e698:	18800315 	stw	r2,12(r3)
8111e69c:	10c00215 	stw	r3,8(r2)
8111e6a0:	b4800204 	addi	r18,r22,8
8111e6a4:	21bfe52e 	bgeu	r4,r6,8111e63c <__reset+0xfb0fe63c>
8111e6a8:	a80b883a 	mov	r5,r21
8111e6ac:	9009883a 	mov	r4,r18
8111e6b0:	111d1880 	call	8111d188 <memmove>
8111e6b4:	b821883a 	mov	r16,r23
8111e6b8:	b027883a 	mov	r19,r22
8111e6bc:	003f8a06 	br	8111e4e8 <__reset+0xfb0fe4e8>
8111e6c0:	300b883a 	mov	r5,r6
8111e6c4:	dfc00917 	ldw	ra,36(sp)
8111e6c8:	df000817 	ldw	fp,32(sp)
8111e6cc:	ddc00717 	ldw	r23,28(sp)
8111e6d0:	dd800617 	ldw	r22,24(sp)
8111e6d4:	dd400517 	ldw	r21,20(sp)
8111e6d8:	dd000417 	ldw	r20,16(sp)
8111e6dc:	dcc00317 	ldw	r19,12(sp)
8111e6e0:	dc800217 	ldw	r18,8(sp)
8111e6e4:	dc400117 	ldw	r17,4(sp)
8111e6e8:	dc000017 	ldw	r16,0(sp)
8111e6ec:	dec00a04 	addi	sp,sp,40
8111e6f0:	11128a01 	jmpi	811128a0 <_malloc_r>
8111e6f4:	a8c00017 	ldw	r3,0(r21)
8111e6f8:	90c00015 	stw	r3,0(r18)
8111e6fc:	a8c00117 	ldw	r3,4(r21)
8111e700:	90c00115 	stw	r3,4(r18)
8111e704:	00c006c4 	movi	r3,27
8111e708:	19804536 	bltu	r3,r6,8111e820 <_realloc_r+0x478>
8111e70c:	90800204 	addi	r2,r18,8
8111e710:	a8c00204 	addi	r3,r21,8
8111e714:	003f6306 	br	8111e4a4 <__reset+0xfb0fe4a4>
8111e718:	9005883a 	mov	r2,r18
8111e71c:	a8c00017 	ldw	r3,0(r21)
8111e720:	b821883a 	mov	r16,r23
8111e724:	b027883a 	mov	r19,r22
8111e728:	10c00015 	stw	r3,0(r2)
8111e72c:	a8c00117 	ldw	r3,4(r21)
8111e730:	10c00115 	stw	r3,4(r2)
8111e734:	a8c00217 	ldw	r3,8(r21)
8111e738:	10c00215 	stw	r3,8(r2)
8111e73c:	003f6a06 	br	8111e4e8 <__reset+0xfb0fe4e8>
8111e740:	9c67883a 	add	r19,r19,r17
8111e744:	4445c83a 	sub	r2,r8,r17
8111e748:	e4c00215 	stw	r19,8(fp)
8111e74c:	10800054 	ori	r2,r2,1
8111e750:	98800115 	stw	r2,4(r19)
8111e754:	a8bfff17 	ldw	r2,-4(r21)
8111e758:	a009883a 	mov	r4,r20
8111e75c:	1080004c 	andi	r2,r2,1
8111e760:	1462b03a 	or	r17,r2,r17
8111e764:	ac7fff15 	stw	r17,-4(r21)
8111e768:	11298040 	call	81129804 <__malloc_unlock>
8111e76c:	a805883a 	mov	r2,r21
8111e770:	003f6b06 	br	8111e520 <__reset+0xfb0fe520>
8111e774:	a80b883a 	mov	r5,r21
8111e778:	9009883a 	mov	r4,r18
8111e77c:	111d1880 	call	8111d188 <memmove>
8111e780:	003f4e06 	br	8111e4bc <__reset+0xfb0fe4bc>
8111e784:	89000404 	addi	r4,r17,16
8111e788:	b93fbc16 	blt	r23,r4,8111e67c <__reset+0xfb0fe67c>
8111e78c:	b0800317 	ldw	r2,12(r22)
8111e790:	b0c00217 	ldw	r3,8(r22)
8111e794:	81bfff04 	addi	r6,r16,-4
8111e798:	01000904 	movi	r4,36
8111e79c:	18800315 	stw	r2,12(r3)
8111e7a0:	10c00215 	stw	r3,8(r2)
8111e7a4:	b4800204 	addi	r18,r22,8
8111e7a8:	21804336 	bltu	r4,r6,8111e8b8 <_realloc_r+0x510>
8111e7ac:	008004c4 	movi	r2,19
8111e7b0:	11803f2e 	bgeu	r2,r6,8111e8b0 <_realloc_r+0x508>
8111e7b4:	a8800017 	ldw	r2,0(r21)
8111e7b8:	b0800215 	stw	r2,8(r22)
8111e7bc:	a8800117 	ldw	r2,4(r21)
8111e7c0:	b0800315 	stw	r2,12(r22)
8111e7c4:	008006c4 	movi	r2,27
8111e7c8:	11803f36 	bltu	r2,r6,8111e8c8 <_realloc_r+0x520>
8111e7cc:	b0800404 	addi	r2,r22,16
8111e7d0:	ad400204 	addi	r21,r21,8
8111e7d4:	a8c00017 	ldw	r3,0(r21)
8111e7d8:	10c00015 	stw	r3,0(r2)
8111e7dc:	a8c00117 	ldw	r3,4(r21)
8111e7e0:	10c00115 	stw	r3,4(r2)
8111e7e4:	a8c00217 	ldw	r3,8(r21)
8111e7e8:	10c00215 	stw	r3,8(r2)
8111e7ec:	b447883a 	add	r3,r22,r17
8111e7f0:	bc45c83a 	sub	r2,r23,r17
8111e7f4:	e0c00215 	stw	r3,8(fp)
8111e7f8:	10800054 	ori	r2,r2,1
8111e7fc:	18800115 	stw	r2,4(r3)
8111e800:	b0800117 	ldw	r2,4(r22)
8111e804:	a009883a 	mov	r4,r20
8111e808:	1080004c 	andi	r2,r2,1
8111e80c:	1462b03a 	or	r17,r2,r17
8111e810:	b4400115 	stw	r17,4(r22)
8111e814:	11298040 	call	81129804 <__malloc_unlock>
8111e818:	9005883a 	mov	r2,r18
8111e81c:	003f4006 	br	8111e520 <__reset+0xfb0fe520>
8111e820:	a8c00217 	ldw	r3,8(r21)
8111e824:	90c00215 	stw	r3,8(r18)
8111e828:	a8c00317 	ldw	r3,12(r21)
8111e82c:	90c00315 	stw	r3,12(r18)
8111e830:	30801126 	beq	r6,r2,8111e878 <_realloc_r+0x4d0>
8111e834:	90800404 	addi	r2,r18,16
8111e838:	a8c00404 	addi	r3,r21,16
8111e83c:	003f1906 	br	8111e4a4 <__reset+0xfb0fe4a4>
8111e840:	90ffff17 	ldw	r3,-4(r18)
8111e844:	00bfff04 	movi	r2,-4
8111e848:	a825883a 	mov	r18,r21
8111e84c:	1884703a 	and	r2,r3,r2
8111e850:	80a1883a 	add	r16,r16,r2
8111e854:	003f2406 	br	8111e4e8 <__reset+0xfb0fe4e8>
8111e858:	a8800217 	ldw	r2,8(r21)
8111e85c:	b0800415 	stw	r2,16(r22)
8111e860:	a8800317 	ldw	r2,12(r21)
8111e864:	b0800515 	stw	r2,20(r22)
8111e868:	31000a26 	beq	r6,r4,8111e894 <_realloc_r+0x4ec>
8111e86c:	b0800604 	addi	r2,r22,24
8111e870:	ad400404 	addi	r21,r21,16
8111e874:	003fa906 	br	8111e71c <__reset+0xfb0fe71c>
8111e878:	a9000417 	ldw	r4,16(r21)
8111e87c:	90800604 	addi	r2,r18,24
8111e880:	a8c00604 	addi	r3,r21,24
8111e884:	91000415 	stw	r4,16(r18)
8111e888:	a9000517 	ldw	r4,20(r21)
8111e88c:	91000515 	stw	r4,20(r18)
8111e890:	003f0406 	br	8111e4a4 <__reset+0xfb0fe4a4>
8111e894:	a8c00417 	ldw	r3,16(r21)
8111e898:	ad400604 	addi	r21,r21,24
8111e89c:	b0800804 	addi	r2,r22,32
8111e8a0:	b0c00615 	stw	r3,24(r22)
8111e8a4:	a8ffff17 	ldw	r3,-4(r21)
8111e8a8:	b0c00715 	stw	r3,28(r22)
8111e8ac:	003f9b06 	br	8111e71c <__reset+0xfb0fe71c>
8111e8b0:	9005883a 	mov	r2,r18
8111e8b4:	003fc706 	br	8111e7d4 <__reset+0xfb0fe7d4>
8111e8b8:	a80b883a 	mov	r5,r21
8111e8bc:	9009883a 	mov	r4,r18
8111e8c0:	111d1880 	call	8111d188 <memmove>
8111e8c4:	003fc906 	br	8111e7ec <__reset+0xfb0fe7ec>
8111e8c8:	a8800217 	ldw	r2,8(r21)
8111e8cc:	b0800415 	stw	r2,16(r22)
8111e8d0:	a8800317 	ldw	r2,12(r21)
8111e8d4:	b0800515 	stw	r2,20(r22)
8111e8d8:	31000726 	beq	r6,r4,8111e8f8 <_realloc_r+0x550>
8111e8dc:	b0800604 	addi	r2,r22,24
8111e8e0:	ad400404 	addi	r21,r21,16
8111e8e4:	003fbb06 	br	8111e7d4 <__reset+0xfb0fe7d4>
8111e8e8:	a009883a 	mov	r4,r20
8111e8ec:	11298040 	call	81129804 <__malloc_unlock>
8111e8f0:	0005883a 	mov	r2,zero
8111e8f4:	003f0a06 	br	8111e520 <__reset+0xfb0fe520>
8111e8f8:	a8c00417 	ldw	r3,16(r21)
8111e8fc:	ad400604 	addi	r21,r21,24
8111e900:	b0800804 	addi	r2,r22,32
8111e904:	b0c00615 	stw	r3,24(r22)
8111e908:	a8ffff17 	ldw	r3,-4(r21)
8111e90c:	b0c00715 	stw	r3,28(r22)
8111e910:	003fb006 	br	8111e7d4 <__reset+0xfb0fe7d4>

8111e914 <__fpclassifyd>:
8111e914:	00a00034 	movhi	r2,32768
8111e918:	10bfffc4 	addi	r2,r2,-1
8111e91c:	2884703a 	and	r2,r5,r2
8111e920:	10000726 	beq	r2,zero,8111e940 <__fpclassifyd+0x2c>
8111e924:	00fffc34 	movhi	r3,65520
8111e928:	019ff834 	movhi	r6,32736
8111e92c:	28c7883a 	add	r3,r5,r3
8111e930:	31bfffc4 	addi	r6,r6,-1
8111e934:	30c00536 	bltu	r6,r3,8111e94c <__fpclassifyd+0x38>
8111e938:	00800104 	movi	r2,4
8111e93c:	f800283a 	ret
8111e940:	2000021e 	bne	r4,zero,8111e94c <__fpclassifyd+0x38>
8111e944:	00800084 	movi	r2,2
8111e948:	f800283a 	ret
8111e94c:	00dffc34 	movhi	r3,32752
8111e950:	019ff834 	movhi	r6,32736
8111e954:	28cb883a 	add	r5,r5,r3
8111e958:	31bfffc4 	addi	r6,r6,-1
8111e95c:	317ff62e 	bgeu	r6,r5,8111e938 <__reset+0xfb0fe938>
8111e960:	01400434 	movhi	r5,16
8111e964:	297fffc4 	addi	r5,r5,-1
8111e968:	28800236 	bltu	r5,r2,8111e974 <__fpclassifyd+0x60>
8111e96c:	008000c4 	movi	r2,3
8111e970:	f800283a 	ret
8111e974:	10c00226 	beq	r2,r3,8111e980 <__fpclassifyd+0x6c>
8111e978:	0005883a 	mov	r2,zero
8111e97c:	f800283a 	ret
8111e980:	2005003a 	cmpeq	r2,r4,zero
8111e984:	f800283a 	ret

8111e988 <__sccl>:
8111e988:	2a000003 	ldbu	r8,0(r5)
8111e98c:	00801784 	movi	r2,94
8111e990:	40802a26 	beq	r8,r2,8111ea3c <__sccl+0xb4>
8111e994:	29400044 	addi	r5,r5,1
8111e998:	000f883a 	mov	r7,zero
8111e99c:	0013883a 	mov	r9,zero
8111e9a0:	2007883a 	mov	r3,r4
8111e9a4:	21804004 	addi	r6,r4,256
8111e9a8:	19c00005 	stb	r7,0(r3)
8111e9ac:	18c00044 	addi	r3,r3,1
8111e9b0:	19bffd1e 	bne	r3,r6,8111e9a8 <__reset+0xfb0fe9a8>
8111e9b4:	40001126 	beq	r8,zero,8111e9fc <__sccl+0x74>
8111e9b8:	00800044 	movi	r2,1
8111e9bc:	124fc83a 	sub	r7,r2,r9
8111e9c0:	02800b44 	movi	r10,45
8111e9c4:	02c01744 	movi	r11,93
8111e9c8:	2205883a 	add	r2,r4,r8
8111e9cc:	11c00005 	stb	r7,0(r2)
8111e9d0:	28800044 	addi	r2,r5,1
8111e9d4:	28c00003 	ldbu	r3,0(r5)
8111e9d8:	1a800a26 	beq	r3,r10,8111ea04 <__sccl+0x7c>
8111e9dc:	1ac00426 	beq	r3,r11,8111e9f0 <__sccl+0x68>
8111e9e0:	18000426 	beq	r3,zero,8111e9f4 <__sccl+0x6c>
8111e9e4:	1811883a 	mov	r8,r3
8111e9e8:	100b883a 	mov	r5,r2
8111e9ec:	003ff606 	br	8111e9c8 <__reset+0xfb0fe9c8>
8111e9f0:	f800283a 	ret
8111e9f4:	2805883a 	mov	r2,r5
8111e9f8:	f800283a 	ret
8111e9fc:	28bfffc4 	addi	r2,r5,-1
8111ea00:	f800283a 	ret
8111ea04:	12400003 	ldbu	r9,0(r2)
8111ea08:	4ac01126 	beq	r9,r11,8111ea50 <__sccl+0xc8>
8111ea0c:	4a001016 	blt	r9,r8,8111ea50 <__sccl+0xc8>
8111ea10:	41800044 	addi	r6,r8,1
8111ea14:	29400084 	addi	r5,r5,2
8111ea18:	2187883a 	add	r3,r4,r6
8111ea1c:	00000106 	br	8111ea24 <__sccl+0x9c>
8111ea20:	31800044 	addi	r6,r6,1
8111ea24:	19c00005 	stb	r7,0(r3)
8111ea28:	3011883a 	mov	r8,r6
8111ea2c:	18c00044 	addi	r3,r3,1
8111ea30:	327ffb16 	blt	r6,r9,8111ea20 <__reset+0xfb0fea20>
8111ea34:	10800084 	addi	r2,r2,2
8111ea38:	003fe606 	br	8111e9d4 <__reset+0xfb0fe9d4>
8111ea3c:	2a000043 	ldbu	r8,1(r5)
8111ea40:	01c00044 	movi	r7,1
8111ea44:	29400084 	addi	r5,r5,2
8111ea48:	02400044 	movi	r9,1
8111ea4c:	003fd406 	br	8111e9a0 <__reset+0xfb0fe9a0>
8111ea50:	5011883a 	mov	r8,r10
8111ea54:	003fe406 	br	8111e9e8 <__reset+0xfb0fe9e8>

8111ea58 <nanf>:
8111ea58:	009ff034 	movhi	r2,32704
8111ea5c:	f800283a 	ret

8111ea60 <strcmp>:
8111ea60:	2144b03a 	or	r2,r4,r5
8111ea64:	108000cc 	andi	r2,r2,3
8111ea68:	1000171e 	bne	r2,zero,8111eac8 <strcmp+0x68>
8111ea6c:	20800017 	ldw	r2,0(r4)
8111ea70:	28c00017 	ldw	r3,0(r5)
8111ea74:	10c0141e 	bne	r2,r3,8111eac8 <strcmp+0x68>
8111ea78:	027fbff4 	movhi	r9,65279
8111ea7c:	4a7fbfc4 	addi	r9,r9,-257
8111ea80:	0086303a 	nor	r3,zero,r2
8111ea84:	02202074 	movhi	r8,32897
8111ea88:	1245883a 	add	r2,r2,r9
8111ea8c:	42202004 	addi	r8,r8,-32640
8111ea90:	10c4703a 	and	r2,r2,r3
8111ea94:	1204703a 	and	r2,r2,r8
8111ea98:	10000226 	beq	r2,zero,8111eaa4 <strcmp+0x44>
8111ea9c:	00002306 	br	8111eb2c <strcmp+0xcc>
8111eaa0:	1000221e 	bne	r2,zero,8111eb2c <strcmp+0xcc>
8111eaa4:	21000104 	addi	r4,r4,4
8111eaa8:	20c00017 	ldw	r3,0(r4)
8111eaac:	29400104 	addi	r5,r5,4
8111eab0:	29800017 	ldw	r6,0(r5)
8111eab4:	1a4f883a 	add	r7,r3,r9
8111eab8:	00c4303a 	nor	r2,zero,r3
8111eabc:	3884703a 	and	r2,r7,r2
8111eac0:	1204703a 	and	r2,r2,r8
8111eac4:	19bff626 	beq	r3,r6,8111eaa0 <__reset+0xfb0feaa0>
8111eac8:	20800003 	ldbu	r2,0(r4)
8111eacc:	10c03fcc 	andi	r3,r2,255
8111ead0:	18c0201c 	xori	r3,r3,128
8111ead4:	18ffe004 	addi	r3,r3,-128
8111ead8:	18000c26 	beq	r3,zero,8111eb0c <strcmp+0xac>
8111eadc:	29800007 	ldb	r6,0(r5)
8111eae0:	19800326 	beq	r3,r6,8111eaf0 <strcmp+0x90>
8111eae4:	00001306 	br	8111eb34 <strcmp+0xd4>
8111eae8:	29800007 	ldb	r6,0(r5)
8111eaec:	11800b1e 	bne	r2,r6,8111eb1c <strcmp+0xbc>
8111eaf0:	21000044 	addi	r4,r4,1
8111eaf4:	20c00003 	ldbu	r3,0(r4)
8111eaf8:	29400044 	addi	r5,r5,1
8111eafc:	18803fcc 	andi	r2,r3,255
8111eb00:	1080201c 	xori	r2,r2,128
8111eb04:	10bfe004 	addi	r2,r2,-128
8111eb08:	103ff71e 	bne	r2,zero,8111eae8 <__reset+0xfb0feae8>
8111eb0c:	0007883a 	mov	r3,zero
8111eb10:	28800003 	ldbu	r2,0(r5)
8111eb14:	1885c83a 	sub	r2,r3,r2
8111eb18:	f800283a 	ret
8111eb1c:	28800003 	ldbu	r2,0(r5)
8111eb20:	18c03fcc 	andi	r3,r3,255
8111eb24:	1885c83a 	sub	r2,r3,r2
8111eb28:	f800283a 	ret
8111eb2c:	0005883a 	mov	r2,zero
8111eb30:	f800283a 	ret
8111eb34:	10c03fcc 	andi	r3,r2,255
8111eb38:	003ff506 	br	8111eb10 <__reset+0xfb0feb10>

8111eb3c <sulp>:
8111eb3c:	defffd04 	addi	sp,sp,-12
8111eb40:	de00012e 	bgeu	sp,et,8111eb48 <sulp+0xc>
8111eb44:	003b68fa 	trap	3
8111eb48:	dc400115 	stw	r17,4(sp)
8111eb4c:	3023883a 	mov	r17,r6
8111eb50:	dc000015 	stw	r16,0(sp)
8111eb54:	dfc00215 	stw	ra,8(sp)
8111eb58:	2821883a 	mov	r16,r5
8111eb5c:	111de480 	call	8111de48 <__ulp>
8111eb60:	88000c26 	beq	r17,zero,8111eb94 <sulp+0x58>
8111eb64:	841ffc2c 	andhi	r16,r16,32752
8111eb68:	8020d53a 	srli	r16,r16,20
8111eb6c:	01c01ac4 	movi	r7,107
8111eb70:	3c21c83a 	sub	r16,r7,r16
8111eb74:	0400070e 	bge	zero,r16,8111eb94 <sulp+0x58>
8111eb78:	8020953a 	slli	r16,r16,20
8111eb7c:	01cffc34 	movhi	r7,16368
8111eb80:	000d883a 	mov	r6,zero
8111eb84:	81cf883a 	add	r7,r16,r7
8111eb88:	1009883a 	mov	r4,r2
8111eb8c:	180b883a 	mov	r5,r3
8111eb90:	11114640 	call	81111464 <__muldf3>
8111eb94:	dfc00217 	ldw	ra,8(sp)
8111eb98:	dc400117 	ldw	r17,4(sp)
8111eb9c:	dc000017 	ldw	r16,0(sp)
8111eba0:	dec00304 	addi	sp,sp,12
8111eba4:	f800283a 	ret

8111eba8 <_strtod_r>:
8111eba8:	deffe204 	addi	sp,sp,-120
8111ebac:	de00012e 	bgeu	sp,et,8111ebb4 <_strtod_r+0xc>
8111ebb0:	003b68fa 	trap	3
8111ebb4:	ddc01b15 	stw	r23,108(sp)
8111ebb8:	dd001815 	stw	r20,96(sp)
8111ebbc:	dc801615 	stw	r18,88(sp)
8111ebc0:	dc401515 	stw	r17,84(sp)
8111ebc4:	dc001415 	stw	r16,80(sp)
8111ebc8:	d9400615 	stw	r5,24(sp)
8111ebcc:	dfc01d15 	stw	ra,116(sp)
8111ebd0:	df001c15 	stw	fp,112(sp)
8111ebd4:	dd801a15 	stw	r22,104(sp)
8111ebd8:	dd401915 	stw	r21,100(sp)
8111ebdc:	dcc01715 	stw	r19,92(sp)
8111ebe0:	2021883a 	mov	r16,r4
8111ebe4:	d8000515 	stw	zero,20(sp)
8111ebe8:	2809883a 	mov	r4,r5
8111ebec:	20800003 	ldbu	r2,0(r4)
8111ebf0:	01e044b4 	movhi	r7,33042
8111ebf4:	282f883a 	mov	r23,r5
8111ebf8:	10c03fcc 	andi	r3,r2,255
8111ebfc:	01400b44 	movi	r5,45
8111ec00:	39fb0904 	addi	r7,r7,-5084
8111ec04:	3029883a 	mov	r20,r6
8111ec08:	0025883a 	mov	r18,zero
8111ec0c:	0023883a 	mov	r17,zero
8111ec10:	28c0ba36 	bltu	r5,r3,8111eefc <_strtod_r+0x354>
8111ec14:	180690ba 	slli	r3,r3,2
8111ec18:	19c7883a 	add	r3,r3,r7
8111ec1c:	18c00017 	ldw	r3,0(r3)
8111ec20:	1800683a 	jmp	r3
8111ec24:	8111ece4 	muli	r4,r16,18355
8111ec28:	8111eefc 	xorhi	r4,r16,18363
8111ec2c:	8111eefc 	xorhi	r4,r16,18363
8111ec30:	8111eefc 	xorhi	r4,r16,18363
8111ec34:	8111eefc 	xorhi	r4,r16,18363
8111ec38:	8111eefc 	xorhi	r4,r16,18363
8111ec3c:	8111eefc 	xorhi	r4,r16,18363
8111ec40:	8111eefc 	xorhi	r4,r16,18363
8111ec44:	8111eefc 	xorhi	r4,r16,18363
8111ec48:	8111eee8 	cmpgeui	r4,r16,18363
8111ec4c:	8111eee8 	cmpgeui	r4,r16,18363
8111ec50:	8111eee8 	cmpgeui	r4,r16,18363
8111ec54:	8111eee8 	cmpgeui	r4,r16,18363
8111ec58:	8111eee8 	cmpgeui	r4,r16,18363
8111ec5c:	8111eefc 	xorhi	r4,r16,18363
8111ec60:	8111eefc 	xorhi	r4,r16,18363
8111ec64:	8111eefc 	xorhi	r4,r16,18363
8111ec68:	8111eefc 	xorhi	r4,r16,18363
8111ec6c:	8111eefc 	xorhi	r4,r16,18363
8111ec70:	8111eefc 	xorhi	r4,r16,18363
8111ec74:	8111eefc 	xorhi	r4,r16,18363
8111ec78:	8111eefc 	xorhi	r4,r16,18363
8111ec7c:	8111eefc 	xorhi	r4,r16,18363
8111ec80:	8111eefc 	xorhi	r4,r16,18363
8111ec84:	8111eefc 	xorhi	r4,r16,18363
8111ec88:	8111eefc 	xorhi	r4,r16,18363
8111ec8c:	8111eefc 	xorhi	r4,r16,18363
8111ec90:	8111eefc 	xorhi	r4,r16,18363
8111ec94:	8111eefc 	xorhi	r4,r16,18363
8111ec98:	8111eefc 	xorhi	r4,r16,18363
8111ec9c:	8111eefc 	xorhi	r4,r16,18363
8111eca0:	8111eefc 	xorhi	r4,r16,18363
8111eca4:	8111eee8 	cmpgeui	r4,r16,18363
8111eca8:	8111eefc 	xorhi	r4,r16,18363
8111ecac:	8111eefc 	xorhi	r4,r16,18363
8111ecb0:	8111eefc 	xorhi	r4,r16,18363
8111ecb4:	8111eefc 	xorhi	r4,r16,18363
8111ecb8:	8111eefc 	xorhi	r4,r16,18363
8111ecbc:	8111eefc 	xorhi	r4,r16,18363
8111ecc0:	8111eefc 	xorhi	r4,r16,18363
8111ecc4:	8111eefc 	xorhi	r4,r16,18363
8111ecc8:	8111eefc 	xorhi	r4,r16,18363
8111eccc:	8111eefc 	xorhi	r4,r16,18363
8111ecd0:	8111ed3c 	xorhi	r4,r16,18356
8111ecd4:	8111eefc 	xorhi	r4,r16,18363
8111ecd8:	8111eedc 	xori	r4,r16,18363
8111ecdc:	00801244 	movi	r2,73
8111ece0:	88843526 	beq	r17,r2,8111fdb8 <_strtod_r+0x1210>
8111ece4:	002b883a 	mov	r21,zero
8111ece8:	002d883a 	mov	r22,zero
8111ecec:	a0000526 	beq	r20,zero,8111ed04 <_strtod_r+0x15c>
8111ecf0:	d8000715 	stw	zero,28(sp)
8111ecf4:	a5c00015 	stw	r23,0(r20)
8111ecf8:	d9000717 	ldw	r4,28(sp)
8111ecfc:	20000126 	beq	r4,zero,8111ed04 <_strtod_r+0x15c>
8111ed00:	b5a0003c 	xorhi	r22,r22,32768
8111ed04:	a805883a 	mov	r2,r21
8111ed08:	b007883a 	mov	r3,r22
8111ed0c:	dfc01d17 	ldw	ra,116(sp)
8111ed10:	df001c17 	ldw	fp,112(sp)
8111ed14:	ddc01b17 	ldw	r23,108(sp)
8111ed18:	dd801a17 	ldw	r22,104(sp)
8111ed1c:	dd401917 	ldw	r21,100(sp)
8111ed20:	dd001817 	ldw	r20,96(sp)
8111ed24:	dcc01717 	ldw	r19,92(sp)
8111ed28:	dc801617 	ldw	r18,88(sp)
8111ed2c:	dc401517 	ldw	r17,84(sp)
8111ed30:	dc001417 	ldw	r16,80(sp)
8111ed34:	dec01e04 	addi	sp,sp,120
8111ed38:	f800283a 	ret
8111ed3c:	d8000715 	stw	zero,28(sp)
8111ed40:	24c00044 	addi	r19,r4,1
8111ed44:	dcc00615 	stw	r19,24(sp)
8111ed48:	20800043 	ldbu	r2,1(r4)
8111ed4c:	10c03fcc 	andi	r3,r2,255
8111ed50:	18c0201c 	xori	r3,r3,128
8111ed54:	18ffe004 	addi	r3,r3,-128
8111ed58:	183fe226 	beq	r3,zero,8111ece4 <__reset+0xfb0fece4>
8111ed5c:	11403fcc 	andi	r5,r2,255
8111ed60:	2940201c 	xori	r5,r5,128
8111ed64:	297fe004 	addi	r5,r5,-128
8111ed68:	00c00c04 	movi	r3,48
8111ed6c:	28c0e526 	beq	r5,r3,8111f104 <_strtod_r+0x55c>
8111ed70:	dcc00815 	stw	r19,32(sp)
8111ed74:	0025883a 	mov	r18,zero
8111ed78:	10fff404 	addi	r3,r2,-48
8111ed7c:	18c03fcc 	andi	r3,r3,255
8111ed80:	01000244 	movi	r4,9
8111ed84:	20c37536 	bltu	r4,r3,8111fb5c <_strtod_r+0xfb4>
8111ed88:	dd400817 	ldw	r21,32(sp)
8111ed8c:	0027883a 	mov	r19,zero
8111ed90:	0039883a 	mov	fp,zero
8111ed94:	002d883a 	mov	r22,zero
8111ed98:	01400204 	movi	r5,8
8111ed9c:	2d805a16 	blt	r5,r22,8111ef08 <_strtod_r+0x360>
8111eda0:	e70002a4 	muli	fp,fp,10
8111eda4:	10c03fcc 	andi	r3,r2,255
8111eda8:	18c0201c 	xori	r3,r3,128
8111edac:	18ffe004 	addi	r3,r3,-128
8111edb0:	e0f9883a 	add	fp,fp,r3
8111edb4:	e73ff404 	addi	fp,fp,-48
8111edb8:	ad400044 	addi	r21,r21,1
8111edbc:	dd400615 	stw	r21,24(sp)
8111edc0:	a8800003 	ldbu	r2,0(r21)
8111edc4:	b5800044 	addi	r22,r22,1
8111edc8:	10fff404 	addi	r3,r2,-48
8111edcc:	18c03fcc 	andi	r3,r3,255
8111edd0:	20fff22e 	bgeu	r4,r3,8111ed9c <__reset+0xfb0fed9c>
8111edd4:	14403fcc 	andi	r17,r2,255
8111edd8:	8c40201c 	xori	r17,r17,128
8111eddc:	8c7fe004 	addi	r17,r17,-128
8111ede0:	8009883a 	mov	r4,r16
8111ede4:	111cdc80 	call	8111cdc8 <_localeconv_r>
8111ede8:	11400017 	ldw	r5,0(r2)
8111edec:	8009883a 	mov	r4,r16
8111edf0:	d9401315 	stw	r5,76(sp)
8111edf4:	111cdc80 	call	8111cdc8 <_localeconv_r>
8111edf8:	11000017 	ldw	r4,0(r2)
8111edfc:	1113ba80 	call	81113ba8 <strlen>
8111ee00:	d9401317 	ldw	r5,76(sp)
8111ee04:	100d883a 	mov	r6,r2
8111ee08:	a809883a 	mov	r4,r21
8111ee0c:	11247980 	call	81124798 <strncmp>
8111ee10:	1000ce26 	beq	r2,zero,8111f14c <_strtod_r+0x5a4>
8111ee14:	b013883a 	mov	r9,r22
8111ee18:	000b883a 	mov	r5,zero
8111ee1c:	0015883a 	mov	r10,zero
8111ee20:	0017883a 	mov	r11,zero
8111ee24:	00801944 	movi	r2,101
8111ee28:	88807826 	beq	r17,r2,8111f00c <_strtod_r+0x464>
8111ee2c:	00801144 	movi	r2,69
8111ee30:	88807626 	beq	r17,r2,8111f00c <_strtod_r+0x464>
8111ee34:	002b883a 	mov	r21,zero
8111ee38:	48003d1e 	bne	r9,zero,8111ef30 <_strtod_r+0x388>
8111ee3c:	2800391e 	bne	r5,zero,8111ef24 <_strtod_r+0x37c>
8111ee40:	9000381e 	bne	r18,zero,8111ef24 <_strtod_r+0x37c>
8111ee44:	583fa71e 	bne	r11,zero,8111ece4 <__reset+0xfb0fece4>
8111ee48:	00801384 	movi	r2,78
8111ee4c:	88800526 	beq	r17,r2,8111ee64 <_strtod_r+0x2bc>
8111ee50:	147fa20e 	bge	r2,r17,8111ecdc <__reset+0xfb0fecdc>
8111ee54:	00801a44 	movi	r2,105
8111ee58:	8883d726 	beq	r17,r2,8111fdb8 <_strtod_r+0x1210>
8111ee5c:	00801b84 	movi	r2,110
8111ee60:	88bfa01e 	bne	r17,r2,8111ece4 <__reset+0xfb0fece4>
8111ee64:	01604534 	movhi	r5,33044
8111ee68:	d9000617 	ldw	r4,24(sp)
8111ee6c:	29413904 	addi	r5,r5,1252
8111ee70:	01c00644 	movi	r7,25
8111ee74:	00000b06 	br	8111eea4 <_strtod_r+0x2fc>
8111ee78:	21000044 	addi	r4,r4,1
8111ee7c:	20800003 	ldbu	r2,0(r4)
8111ee80:	10ffefc4 	addi	r3,r2,-65
8111ee84:	10803fcc 	andi	r2,r2,255
8111ee88:	1080201c 	xori	r2,r2,128
8111ee8c:	18c03fcc 	andi	r3,r3,255
8111ee90:	10bfe004 	addi	r2,r2,-128
8111ee94:	38c00136 	bltu	r7,r3,8111ee9c <_strtod_r+0x2f4>
8111ee98:	10800804 	addi	r2,r2,32
8111ee9c:	29400044 	addi	r5,r5,1
8111eea0:	11bf901e 	bne	r2,r6,8111ece4 <__reset+0xfb0fece4>
8111eea4:	29800007 	ldb	r6,0(r5)
8111eea8:	303ff31e 	bne	r6,zero,8111ee78 <__reset+0xfb0fee78>
8111eeac:	20800044 	addi	r2,r4,1
8111eeb0:	d8800615 	stw	r2,24(sp)
8111eeb4:	20c00047 	ldb	r3,1(r4)
8111eeb8:	00800a04 	movi	r2,40
8111eebc:	18849d26 	beq	r3,r2,81120134 <_strtod_r+0x158c>
8111eec0:	047ffe34 	movhi	r17,65528
8111eec4:	0025883a 	mov	r18,zero
8111eec8:	902b883a 	mov	r21,r18
8111eecc:	882d883a 	mov	r22,r17
8111eed0:	a03f8926 	beq	r20,zero,8111ecf8 <__reset+0xfb0fecf8>
8111eed4:	ddc00617 	ldw	r23,24(sp)
8111eed8:	003f8606 	br	8111ecf4 <__reset+0xfb0fecf4>
8111eedc:	00800044 	movi	r2,1
8111eee0:	d8800715 	stw	r2,28(sp)
8111eee4:	003f9606 	br	8111ed40 <__reset+0xfb0fed40>
8111eee8:	21000044 	addi	r4,r4,1
8111eeec:	d9000615 	stw	r4,24(sp)
8111eef0:	20800003 	ldbu	r2,0(r4)
8111eef4:	10c03fcc 	andi	r3,r2,255
8111eef8:	28ff462e 	bgeu	r5,r3,8111ec14 <__reset+0xfb0fec14>
8111eefc:	2027883a 	mov	r19,r4
8111ef00:	d8000715 	stw	zero,28(sp)
8111ef04:	003f9506 	br	8111ed5c <__reset+0xfb0fed5c>
8111ef08:	9cc002a4 	muli	r19,r19,10
8111ef0c:	10803fcc 	andi	r2,r2,255
8111ef10:	1080201c 	xori	r2,r2,128
8111ef14:	10bfe004 	addi	r2,r2,-128
8111ef18:	9885883a 	add	r2,r19,r2
8111ef1c:	14fff404 	addi	r19,r2,-48
8111ef20:	003fa506 	br	8111edb8 <__reset+0xfb0fedb8>
8111ef24:	002b883a 	mov	r21,zero
8111ef28:	002d883a 	mov	r22,zero
8111ef2c:	003fe806 	br	8111eed0 <__reset+0xfb0feed0>
8111ef30:	aaabc83a 	sub	r21,r21,r10
8111ef34:	b000011e 	bne	r22,zero,8111ef3c <_strtod_r+0x394>
8111ef38:	482d883a 	mov	r22,r9
8111ef3c:	00800404 	movi	r2,16
8111ef40:	482f883a 	mov	r23,r9
8111ef44:	1240010e 	bge	r2,r9,8111ef4c <_strtod_r+0x3a4>
8111ef48:	102f883a 	mov	r23,r2
8111ef4c:	e009883a 	mov	r4,fp
8111ef50:	da401315 	stw	r9,76(sp)
8111ef54:	11277b80 	call	811277b8 <__floatunsidf>
8111ef58:	1025883a 	mov	r18,r2
8111ef5c:	00800244 	movi	r2,9
8111ef60:	1823883a 	mov	r17,r3
8111ef64:	da401317 	ldw	r9,76(sp)
8111ef68:	15c0160e 	bge	r2,r23,8111efc4 <_strtod_r+0x41c>
8111ef6c:	b8bffdc4 	addi	r2,r23,-9
8111ef70:	100490fa 	slli	r2,r2,3
8111ef74:	180b883a 	mov	r5,r3
8111ef78:	00e04534 	movhi	r3,33044
8111ef7c:	18c10404 	addi	r3,r3,1040
8111ef80:	1885883a 	add	r2,r3,r2
8111ef84:	11800017 	ldw	r6,0(r2)
8111ef88:	11c00117 	ldw	r7,4(r2)
8111ef8c:	9009883a 	mov	r4,r18
8111ef90:	11114640 	call	81111464 <__muldf3>
8111ef94:	9809883a 	mov	r4,r19
8111ef98:	1025883a 	mov	r18,r2
8111ef9c:	1823883a 	mov	r17,r3
8111efa0:	11277b80 	call	811277b8 <__floatunsidf>
8111efa4:	9009883a 	mov	r4,r18
8111efa8:	880b883a 	mov	r5,r17
8111efac:	100d883a 	mov	r6,r2
8111efb0:	180f883a 	mov	r7,r3
8111efb4:	11259540 	call	81125954 <__adddf3>
8111efb8:	da401317 	ldw	r9,76(sp)
8111efbc:	1025883a 	mov	r18,r2
8111efc0:	1823883a 	mov	r17,r3
8111efc4:	008003c4 	movi	r2,15
8111efc8:	12407b16 	blt	r2,r9,8111f1b8 <_strtod_r+0x610>
8111efcc:	a83fbe26 	beq	r21,zero,8111eec8 <__reset+0xfb0feec8>
8111efd0:	0543670e 	bge	zero,r21,8111fd70 <_strtod_r+0x11c8>
8111efd4:	00c00584 	movi	r3,22
8111efd8:	1d42e816 	blt	r3,r21,8111fb7c <_strtod_r+0xfd4>
8111efdc:	a82a90fa 	slli	r21,r21,3
8111efe0:	00a04534 	movhi	r2,33044
8111efe4:	10810404 	addi	r2,r2,1040
8111efe8:	1545883a 	add	r2,r2,r21
8111efec:	11000017 	ldw	r4,0(r2)
8111eff0:	11400117 	ldw	r5,4(r2)
8111eff4:	900d883a 	mov	r6,r18
8111eff8:	880f883a 	mov	r7,r17
8111effc:	11114640 	call	81111464 <__muldf3>
8111f000:	102b883a 	mov	r21,r2
8111f004:	182d883a 	mov	r22,r3
8111f008:	003fb106 	br	8111eed0 <__reset+0xfb0feed0>
8111f00c:	4801b526 	beq	r9,zero,8111f6e4 <_strtod_r+0xb3c>
8111f010:	ddc00617 	ldw	r23,24(sp)
8111f014:	00c00ac4 	movi	r3,43
8111f018:	b8800044 	addi	r2,r23,1
8111f01c:	d8800615 	stw	r2,24(sp)
8111f020:	b8800047 	ldb	r2,1(r23)
8111f024:	10c1e926 	beq	r2,r3,8111f7cc <_strtod_r+0xc24>
8111f028:	00c00b44 	movi	r3,45
8111f02c:	10c1ec26 	beq	r2,r3,8111f7e0 <_strtod_r+0xc38>
8111f030:	1023883a 	mov	r17,r2
8111f034:	0019883a 	mov	r12,zero
8111f038:	88bff404 	addi	r2,r17,-48
8111f03c:	00c00244 	movi	r3,9
8111f040:	1881b736 	bltu	r3,r2,8111f720 <_strtod_r+0xb78>
8111f044:	00800c04 	movi	r2,48
8111f048:	8880071e 	bne	r17,r2,8111f068 <_strtod_r+0x4c0>
8111f04c:	d8800617 	ldw	r2,24(sp)
8111f050:	8807883a 	mov	r3,r17
8111f054:	10800044 	addi	r2,r2,1
8111f058:	d8800615 	stw	r2,24(sp)
8111f05c:	14400007 	ldb	r17,0(r2)
8111f060:	10800044 	addi	r2,r2,1
8111f064:	88fffc26 	beq	r17,r3,8111f058 <__reset+0xfb0ff058>
8111f068:	88bff3c4 	addi	r2,r17,-49
8111f06c:	00c00204 	movi	r3,8
8111f070:	18bf7036 	bltu	r3,r2,8111ee34 <__reset+0xfb0fee34>
8111f074:	db800617 	ldw	r14,24(sp)
8111f078:	88bff404 	addi	r2,r17,-48
8111f07c:	03400244 	movi	r13,9
8111f080:	71c00044 	addi	r7,r14,1
8111f084:	d9c00615 	stw	r7,24(sp)
8111f088:	74400043 	ldbu	r17,1(r14)
8111f08c:	88fff404 	addi	r3,r17,-48
8111f090:	8c403fcc 	andi	r17,r17,255
8111f094:	8c40201c 	xori	r17,r17,128
8111f098:	18c03fcc 	andi	r3,r3,255
8111f09c:	8c7fe004 	addi	r17,r17,-128
8111f0a0:	68c00e36 	bltu	r13,r3,8111f0dc <_strtod_r+0x534>
8111f0a4:	71000084 	addi	r4,r14,2
8111f0a8:	d9000615 	stw	r4,24(sp)
8111f0ac:	108002a4 	muli	r2,r2,10
8111f0b0:	21800003 	ldbu	r6,0(r4)
8111f0b4:	200f883a 	mov	r7,r4
8111f0b8:	1463883a 	add	r17,r2,r17
8111f0bc:	30fff404 	addi	r3,r6,-48
8111f0c0:	88bff404 	addi	r2,r17,-48
8111f0c4:	34403fcc 	andi	r17,r6,255
8111f0c8:	8c40201c 	xori	r17,r17,128
8111f0cc:	18c03fcc 	andi	r3,r3,255
8111f0d0:	8c7fe004 	addi	r17,r17,-128
8111f0d4:	21000044 	addi	r4,r4,1
8111f0d8:	68fff32e 	bgeu	r13,r3,8111f0a8 <__reset+0xfb0ff0a8>
8111f0dc:	3b8fc83a 	sub	r7,r7,r14
8111f0e0:	00c00204 	movi	r3,8
8111f0e4:	19c29716 	blt	r3,r7,8111fb44 <_strtod_r+0xf9c>
8111f0e8:	102b883a 	mov	r21,r2
8111f0ec:	009387c4 	movi	r2,19999
8111f0f0:	1540010e 	bge	r2,r21,8111f0f8 <_strtod_r+0x550>
8111f0f4:	102b883a 	mov	r21,r2
8111f0f8:	603f4f26 	beq	r12,zero,8111ee38 <__reset+0xfb0fee38>
8111f0fc:	056bc83a 	sub	r21,zero,r21
8111f100:	003f4d06 	br	8111ee38 <__reset+0xfb0fee38>
8111f104:	98800047 	ldb	r2,1(r19)
8111f108:	00c01604 	movi	r3,88
8111f10c:	10c1de26 	beq	r2,r3,8111f888 <_strtod_r+0xce0>
8111f110:	00c01e04 	movi	r3,120
8111f114:	10c1dc26 	beq	r2,r3,8111f888 <_strtod_r+0xce0>
8111f118:	98c00044 	addi	r3,r19,1
8111f11c:	1827883a 	mov	r19,r3
8111f120:	d8c00615 	stw	r3,24(sp)
8111f124:	18c00044 	addi	r3,r3,1
8111f128:	18bfffc3 	ldbu	r2,-1(r3)
8111f12c:	11003fcc 	andi	r4,r2,255
8111f130:	2100201c 	xori	r4,r4,128
8111f134:	213fe004 	addi	r4,r4,-128
8111f138:	217ff826 	beq	r4,r5,8111f11c <__reset+0xfb0ff11c>
8111f13c:	203f7926 	beq	r4,zero,8111ef24 <__reset+0xfb0fef24>
8111f140:	dcc00815 	stw	r19,32(sp)
8111f144:	04800044 	movi	r18,1
8111f148:	003f0b06 	br	8111ed78 <__reset+0xfb0fed78>
8111f14c:	8009883a 	mov	r4,r16
8111f150:	111cdc80 	call	8111cdc8 <_localeconv_r>
8111f154:	11000017 	ldw	r4,0(r2)
8111f158:	1113ba80 	call	81113ba8 <strlen>
8111f15c:	d8c00617 	ldw	r3,24(sp)
8111f160:	1885883a 	add	r2,r3,r2
8111f164:	d8800615 	stw	r2,24(sp)
8111f168:	14400007 	ldb	r17,0(r2)
8111f16c:	b001881e 	bne	r22,zero,8111f790 <_strtod_r+0xbe8>
8111f170:	00c00c04 	movi	r3,48
8111f174:	88c3391e 	bne	r17,r3,8111fe5c <_strtod_r+0x12b4>
8111f178:	10c00044 	addi	r3,r2,1
8111f17c:	8809883a 	mov	r4,r17
8111f180:	d8c00615 	stw	r3,24(sp)
8111f184:	1c400007 	ldb	r17,0(r3)
8111f188:	188bc83a 	sub	r5,r3,r2
8111f18c:	18c00044 	addi	r3,r3,1
8111f190:	893ffb26 	beq	r17,r4,8111f180 <__reset+0xfb0ff180>
8111f194:	88bff3c4 	addi	r2,r17,-49
8111f198:	00c00204 	movi	r3,8
8111f19c:	1882e72e 	bgeu	r3,r2,8111fd3c <_strtod_r+0x1194>
8111f1a0:	00801944 	movi	r2,101
8111f1a4:	88814d26 	beq	r17,r2,8111f6dc <_strtod_r+0xb34>
8111f1a8:	0013883a 	mov	r9,zero
8111f1ac:	0015883a 	mov	r10,zero
8111f1b0:	02c00044 	movi	r11,1
8111f1b4:	003f1d06 	br	8111ee2c <__reset+0xfb0fee2c>
8111f1b8:	4defc83a 	sub	r23,r9,r23
8111f1bc:	bd6f883a 	add	r23,r23,r21
8111f1c0:	05c21e0e 	bge	zero,r23,8111fa3c <_strtod_r+0xe94>
8111f1c4:	b88003cc 	andi	r2,r23,15
8111f1c8:	10000d26 	beq	r2,zero,8111f200 <_strtod_r+0x658>
8111f1cc:	100490fa 	slli	r2,r2,3
8111f1d0:	00e04534 	movhi	r3,33044
8111f1d4:	18c10404 	addi	r3,r3,1040
8111f1d8:	1885883a 	add	r2,r3,r2
8111f1dc:	11000017 	ldw	r4,0(r2)
8111f1e0:	11400117 	ldw	r5,4(r2)
8111f1e4:	900d883a 	mov	r6,r18
8111f1e8:	880f883a 	mov	r7,r17
8111f1ec:	da401315 	stw	r9,76(sp)
8111f1f0:	11114640 	call	81111464 <__muldf3>
8111f1f4:	da401317 	ldw	r9,76(sp)
8111f1f8:	1025883a 	mov	r18,r2
8111f1fc:	1823883a 	mov	r17,r3
8111f200:	023ffc04 	movi	r8,-16
8111f204:	ba10703a 	and	r8,r23,r8
8111f208:	40003c26 	beq	r8,zero,8111f2fc <_strtod_r+0x754>
8111f20c:	00804d04 	movi	r2,308
8111f210:	1201cd16 	blt	r2,r8,8111f948 <_strtod_r+0xda0>
8111f214:	4011d13a 	srai	r8,r8,4
8111f218:	03000044 	movi	r12,1
8111f21c:	62037c0e 	bge	r12,r8,81120010 <_strtod_r+0x1468>
8111f220:	01204534 	movhi	r4,33044
8111f224:	2100fa04 	addi	r4,r4,1000
8111f228:	2015883a 	mov	r10,r4
8111f22c:	0027883a 	mov	r19,zero
8111f230:	d9000915 	stw	r4,36(sp)
8111f234:	9005883a 	mov	r2,r18
8111f238:	8807883a 	mov	r3,r17
8111f23c:	dc000c15 	stw	r16,48(sp)
8111f240:	dc800e15 	stw	r18,56(sp)
8111f244:	9821883a 	mov	r16,r19
8111f248:	0009883a 	mov	r4,zero
8111f24c:	8827883a 	mov	r19,r17
8111f250:	602f883a 	mov	r23,r12
8111f254:	da400a15 	stw	r9,40(sp)
8111f258:	5025883a 	mov	r18,r10
8111f25c:	4023883a 	mov	r17,r8
8111f260:	8980004c 	andi	r6,r17,1
8111f264:	30000626 	beq	r6,zero,8111f280 <_strtod_r+0x6d8>
8111f268:	91800017 	ldw	r6,0(r18)
8111f26c:	91c00117 	ldw	r7,4(r18)
8111f270:	1009883a 	mov	r4,r2
8111f274:	180b883a 	mov	r5,r3
8111f278:	11114640 	call	81111464 <__muldf3>
8111f27c:	01000044 	movi	r4,1
8111f280:	8823d07a 	srai	r17,r17,1
8111f284:	84000044 	addi	r16,r16,1
8111f288:	94800204 	addi	r18,r18,8
8111f28c:	8dfff41e 	bne	r17,r23,8111f260 <__reset+0xfb0ff260>
8111f290:	21003fcc 	andi	r4,r4,255
8111f294:	9823883a 	mov	r17,r19
8111f298:	da400a17 	ldw	r9,40(sp)
8111f29c:	8027883a 	mov	r19,r16
8111f2a0:	dc800e17 	ldw	r18,56(sp)
8111f2a4:	dc000c17 	ldw	r16,48(sp)
8111f2a8:	2003b11e 	bne	r4,zero,81120170 <_strtod_r+0x15c8>
8111f2ac:	981690fa 	slli	r11,r19,3
8111f2b0:	d8800917 	ldw	r2,36(sp)
8111f2b4:	01ff2c34 	movhi	r7,64688
8111f2b8:	900d883a 	mov	r6,r18
8111f2bc:	12ef883a 	add	r23,r2,r11
8111f2c0:	b9000017 	ldw	r4,0(r23)
8111f2c4:	b9400117 	ldw	r5,4(r23)
8111f2c8:	89cf883a 	add	r7,r17,r7
8111f2cc:	da401315 	stw	r9,76(sp)
8111f2d0:	11114640 	call	81111464 <__muldf3>
8111f2d4:	1025883a 	mov	r18,r2
8111f2d8:	011f2834 	movhi	r4,31904
8111f2dc:	189ffc2c 	andhi	r2,r3,32752
8111f2e0:	da401317 	ldw	r9,76(sp)
8111f2e4:	20819836 	bltu	r4,r2,8111f948 <_strtod_r+0xda0>
8111f2e8:	011f2434 	movhi	r4,31888
8111f2ec:	2083382e 	bgeu	r4,r2,8111ffd0 <_strtod_r+0x1428>
8111f2f0:	045ffc34 	movhi	r17,32752
8111f2f4:	8c7fffc4 	addi	r17,r17,-1
8111f2f8:	04bfffc4 	movi	r18,-1
8111f2fc:	d8000915 	stw	zero,36(sp)
8111f300:	d9400817 	ldw	r5,32(sp)
8111f304:	df000015 	stw	fp,0(sp)
8111f308:	480f883a 	mov	r7,r9
8111f30c:	b00d883a 	mov	r6,r22
8111f310:	8009883a 	mov	r4,r16
8111f314:	111d4e40 	call	8111d4e4 <__s2b>
8111f318:	d8800815 	stw	r2,32(sp)
8111f31c:	10018a26 	beq	r2,zero,8111f948 <_strtod_r+0xda0>
8111f320:	a807d7fa 	srai	r3,r21,31
8111f324:	0545c83a 	sub	r2,zero,r21
8111f328:	dd400a15 	stw	r21,40(sp)
8111f32c:	1886703a 	and	r3,r3,r2
8111f330:	d8c00c15 	stw	r3,48(sp)
8111f334:	a8013516 	blt	r21,zero,8111f80c <_strtod_r+0xc64>
8111f338:	d9400817 	ldw	r5,32(sp)
8111f33c:	0011883a 	mov	r8,zero
8111f340:	0027883a 	mov	r19,zero
8111f344:	29400304 	addi	r5,r5,12
8111f348:	d9400f15 	stw	r5,60(sp)
8111f34c:	402b883a 	mov	r21,r8
8111f350:	dd001215 	stw	r20,72(sp)
8111f354:	d8800817 	ldw	r2,32(sp)
8111f358:	8009883a 	mov	r4,r16
8111f35c:	11400117 	ldw	r5,4(r2)
8111f360:	111d2e40 	call	8111d2e4 <_Balloc>
8111f364:	1029883a 	mov	r20,r2
8111f368:	10012d26 	beq	r2,zero,8111f820 <_strtod_r+0xc78>
8111f36c:	d8c00817 	ldw	r3,32(sp)
8111f370:	d9400f17 	ldw	r5,60(sp)
8111f374:	11000304 	addi	r4,r2,12
8111f378:	19800417 	ldw	r6,16(r3)
8111f37c:	31800084 	addi	r6,r6,2
8111f380:	318d883a 	add	r6,r6,r6
8111f384:	318d883a 	add	r6,r6,r6
8111f388:	11130b40 	call	811130b4 <memcpy>
8111f38c:	d9000204 	addi	r4,sp,8
8111f390:	d9000015 	stw	r4,0(sp)
8111f394:	d9c00404 	addi	r7,sp,16
8111f398:	900b883a 	mov	r5,r18
8111f39c:	880d883a 	mov	r6,r17
8111f3a0:	8009883a 	mov	r4,r16
8111f3a4:	111dfc00 	call	8111dfc0 <__d2b>
8111f3a8:	d8800515 	stw	r2,20(sp)
8111f3ac:	dc801115 	stw	r18,68(sp)
8111f3b0:	dc401015 	stw	r17,64(sp)
8111f3b4:	10027c26 	beq	r2,zero,8111fda8 <_strtod_r+0x1200>
8111f3b8:	01400044 	movi	r5,1
8111f3bc:	8009883a 	mov	r4,r16
8111f3c0:	111d7080 	call	8111d708 <__i2b>
8111f3c4:	1027883a 	mov	r19,r2
8111f3c8:	10011526 	beq	r2,zero,8111f820 <_strtod_r+0xc78>
8111f3cc:	d8800417 	ldw	r2,16(sp)
8111f3d0:	1000c816 	blt	r2,zero,8111f6f4 <_strtod_r+0xb4c>
8111f3d4:	d9400c17 	ldw	r5,48(sp)
8111f3d8:	d9000a17 	ldw	r4,40(sp)
8111f3dc:	28ad883a 	add	r22,r5,r2
8111f3e0:	d9400917 	ldw	r5,36(sp)
8111f3e4:	df000217 	ldw	fp,8(sp)
8111f3e8:	05ff0084 	movi	r23,-1022
8111f3ec:	1147c83a 	sub	r3,r2,r5
8111f3f0:	1f07883a 	add	r3,r3,fp
8111f3f4:	00800d84 	movi	r2,54
8111f3f8:	18ffffc4 	addi	r3,r3,-1
8111f3fc:	1739c83a 	sub	fp,r2,fp
8111f400:	1dc0a50e 	bge	r3,r23,8111f698 <_strtod_r+0xaf0>
8111f404:	b8efc83a 	sub	r23,r23,r3
8111f408:	008007c4 	movi	r2,31
8111f40c:	e5f9c83a 	sub	fp,fp,r23
8111f410:	15c0bc16 	blt	r2,r23,8111f704 <_strtod_r+0xb5c>
8111f414:	00800044 	movi	r2,1
8111f418:	15c4983a 	sll	r2,r2,r23
8111f41c:	d8000b15 	stw	zero,44(sp)
8111f420:	d8800d15 	stw	r2,52(sp)
8111f424:	2707883a 	add	r3,r4,fp
8111f428:	d9000917 	ldw	r4,36(sp)
8111f42c:	b739883a 	add	fp,r22,fp
8111f430:	20ef883a 	add	r23,r4,r3
8111f434:	b009883a 	mov	r4,r22
8111f438:	e580010e 	bge	fp,r22,8111f440 <_strtod_r+0x898>
8111f43c:	e009883a 	mov	r4,fp
8111f440:	b805883a 	mov	r2,r23
8111f444:	25c0010e 	bge	r4,r23,8111f44c <_strtod_r+0x8a4>
8111f448:	2005883a 	mov	r2,r4
8111f44c:	0080030e 	bge	zero,r2,8111f45c <_strtod_r+0x8b4>
8111f450:	e0b9c83a 	sub	fp,fp,r2
8111f454:	b8afc83a 	sub	r23,r23,r2
8111f458:	b0adc83a 	sub	r22,r22,r2
8111f45c:	d9400c17 	ldw	r5,48(sp)
8111f460:	28001126 	beq	r5,zero,8111f4a8 <_strtod_r+0x900>
8111f464:	280d883a 	mov	r6,r5
8111f468:	8009883a 	mov	r4,r16
8111f46c:	980b883a 	mov	r5,r19
8111f470:	111d94c0 	call	8111d94c <__pow5mult>
8111f474:	1027883a 	mov	r19,r2
8111f478:	1000e926 	beq	r2,zero,8111f820 <_strtod_r+0xc78>
8111f47c:	d9800517 	ldw	r6,20(sp)
8111f480:	100b883a 	mov	r5,r2
8111f484:	8009883a 	mov	r4,r16
8111f488:	111d74c0 	call	8111d74c <__multiply>
8111f48c:	1000e426 	beq	r2,zero,8111f820 <_strtod_r+0xc78>
8111f490:	d9400517 	ldw	r5,20(sp)
8111f494:	8009883a 	mov	r4,r16
8111f498:	d8801315 	stw	r2,76(sp)
8111f49c:	111d3940 	call	8111d394 <_Bfree>
8111f4a0:	d8801317 	ldw	r2,76(sp)
8111f4a4:	d8800515 	stw	r2,20(sp)
8111f4a8:	0700060e 	bge	zero,fp,8111f4c4 <_strtod_r+0x91c>
8111f4ac:	d9400517 	ldw	r5,20(sp)
8111f4b0:	e00d883a 	mov	r6,fp
8111f4b4:	8009883a 	mov	r4,r16
8111f4b8:	111da940 	call	8111da94 <__lshift>
8111f4bc:	d8800515 	stw	r2,20(sp)
8111f4c0:	10023926 	beq	r2,zero,8111fda8 <_strtod_r+0x1200>
8111f4c4:	d8800a17 	ldw	r2,40(sp)
8111f4c8:	10000626 	beq	r2,zero,8111f4e4 <_strtod_r+0x93c>
8111f4cc:	d9800a17 	ldw	r6,40(sp)
8111f4d0:	a00b883a 	mov	r5,r20
8111f4d4:	8009883a 	mov	r4,r16
8111f4d8:	111d94c0 	call	8111d94c <__pow5mult>
8111f4dc:	1029883a 	mov	r20,r2
8111f4e0:	1000cf26 	beq	r2,zero,8111f820 <_strtod_r+0xc78>
8111f4e4:	05c0060e 	bge	zero,r23,8111f500 <_strtod_r+0x958>
8111f4e8:	a00b883a 	mov	r5,r20
8111f4ec:	b80d883a 	mov	r6,r23
8111f4f0:	8009883a 	mov	r4,r16
8111f4f4:	111da940 	call	8111da94 <__lshift>
8111f4f8:	1029883a 	mov	r20,r2
8111f4fc:	1000c826 	beq	r2,zero,8111f820 <_strtod_r+0xc78>
8111f500:	0580060e 	bge	zero,r22,8111f51c <_strtod_r+0x974>
8111f504:	980b883a 	mov	r5,r19
8111f508:	b00d883a 	mov	r6,r22
8111f50c:	8009883a 	mov	r4,r16
8111f510:	111da940 	call	8111da94 <__lshift>
8111f514:	1027883a 	mov	r19,r2
8111f518:	1000c126 	beq	r2,zero,8111f820 <_strtod_r+0xc78>
8111f51c:	d9400517 	ldw	r5,20(sp)
8111f520:	a00d883a 	mov	r6,r20
8111f524:	8009883a 	mov	r4,r16
8111f528:	111dc440 	call	8111dc44 <__mdiff>
8111f52c:	102b883a 	mov	r21,r2
8111f530:	1000bb26 	beq	r2,zero,8111f820 <_strtod_r+0xc78>
8111f534:	10c00317 	ldw	r3,12(r2)
8111f538:	980b883a 	mov	r5,r19
8111f53c:	10000315 	stw	zero,12(r2)
8111f540:	1009883a 	mov	r4,r2
8111f544:	d8c00e15 	stw	r3,56(sp)
8111f548:	111dbe40 	call	8111dbe4 <__mcmp>
8111f54c:	10027616 	blt	r2,zero,8111ff28 <_strtod_r+0x1380>
8111f550:	10024426 	beq	r2,zero,8111fe64 <_strtod_r+0x12bc>
8111f554:	980b883a 	mov	r5,r19
8111f558:	a809883a 	mov	r4,r21
8111f55c:	111e1140 	call	8111e114 <__ratio>
8111f560:	000d883a 	mov	r6,zero
8111f564:	01d00034 	movhi	r7,16384
8111f568:	1009883a 	mov	r4,r2
8111f56c:	180b883a 	mov	r5,r3
8111f570:	102f883a 	mov	r23,r2
8111f574:	182d883a 	mov	r22,r3
8111f578:	1126c5c0 	call	81126c5c <__ledf2>
8111f57c:	00804a16 	blt	zero,r2,8111f6a8 <_strtod_r+0xb00>
8111f580:	d9400e17 	ldw	r5,56(sp)
8111f584:	28006b26 	beq	r5,zero,8111f734 <_strtod_r+0xb8c>
8111f588:	058ffc34 	movhi	r22,16368
8111f58c:	d8000b15 	stw	zero,44(sp)
8111f590:	d8000d15 	stw	zero,52(sp)
8111f594:	b02f883a 	mov	r23,r22
8111f598:	8f1ffc2c 	andhi	fp,r17,32752
8111f59c:	009ff834 	movhi	r2,32736
8111f5a0:	e080cd26 	beq	fp,r2,8111f8d8 <_strtod_r+0xd30>
8111f5a4:	d9400917 	ldw	r5,36(sp)
8111f5a8:	28001a26 	beq	r5,zero,8111f614 <_strtod_r+0xa6c>
8111f5ac:	0081a834 	movhi	r2,1696
8111f5b0:	17001836 	bltu	r2,fp,8111f614 <_strtod_r+0xa6c>
8111f5b4:	d9000d17 	ldw	r4,52(sp)
8111f5b8:	01d07834 	movhi	r7,16864
8111f5bc:	39ffffc4 	addi	r7,r7,-1
8111f5c0:	01bff034 	movhi	r6,65472
8111f5c4:	b80b883a 	mov	r5,r23
8111f5c8:	1126c5c0 	call	81126c5c <__ledf2>
8111f5cc:	00800e16 	blt	zero,r2,8111f608 <_strtod_r+0xa60>
8111f5d0:	d9000d17 	ldw	r4,52(sp)
8111f5d4:	b80b883a 	mov	r5,r23
8111f5d8:	1124a680 	call	81124a68 <__fixunsdfsi>
8111f5dc:	10018126 	beq	r2,zero,8111fbe4 <_strtod_r+0x103c>
8111f5e0:	1009883a 	mov	r4,r2
8111f5e4:	11277b80 	call	811277b8 <__floatunsidf>
8111f5e8:	d8800d15 	stw	r2,52(sp)
8111f5ec:	182f883a 	mov	r23,r3
8111f5f0:	d8800e17 	ldw	r2,56(sp)
8111f5f4:	1001791e 	bne	r2,zero,8111fbdc <_strtod_r+0x1034>
8111f5f8:	ba20003c 	xorhi	r8,r23,32768
8111f5fc:	d8c00d17 	ldw	r3,52(sp)
8111f600:	402d883a 	mov	r22,r8
8111f604:	d8c00b15 	stw	r3,44(sp)
8111f608:	0081ac34 	movhi	r2,1712
8111f60c:	b091883a 	add	r8,r22,r2
8111f610:	472dc83a 	sub	r22,r8,fp
8111f614:	9009883a 	mov	r4,r18
8111f618:	880b883a 	mov	r5,r17
8111f61c:	111de480 	call	8111de48 <__ulp>
8111f620:	d9000b17 	ldw	r4,44(sp)
8111f624:	b00b883a 	mov	r5,r22
8111f628:	100d883a 	mov	r6,r2
8111f62c:	180f883a 	mov	r7,r3
8111f630:	11114640 	call	81111464 <__muldf3>
8111f634:	900d883a 	mov	r6,r18
8111f638:	880f883a 	mov	r7,r17
8111f63c:	1009883a 	mov	r4,r2
8111f640:	180b883a 	mov	r5,r3
8111f644:	11259540 	call	81125954 <__adddf3>
8111f648:	1025883a 	mov	r18,r2
8111f64c:	1823883a 	mov	r17,r3
8111f650:	182d883a 	mov	r22,r3
8111f654:	d9000917 	ldw	r4,36(sp)
8111f658:	2000021e 	bne	r4,zero,8111f664 <_strtod_r+0xabc>
8111f65c:	b09ffc2c 	andhi	r2,r22,32752
8111f660:	e080be26 	beq	fp,r2,8111f95c <_strtod_r+0xdb4>
8111f664:	d9400517 	ldw	r5,20(sp)
8111f668:	8009883a 	mov	r4,r16
8111f66c:	111d3940 	call	8111d394 <_Bfree>
8111f670:	a00b883a 	mov	r5,r20
8111f674:	8009883a 	mov	r4,r16
8111f678:	111d3940 	call	8111d394 <_Bfree>
8111f67c:	980b883a 	mov	r5,r19
8111f680:	8009883a 	mov	r4,r16
8111f684:	111d3940 	call	8111d394 <_Bfree>
8111f688:	a80b883a 	mov	r5,r21
8111f68c:	8009883a 	mov	r4,r16
8111f690:	111d3940 	call	8111d394 <_Bfree>
8111f694:	003f2f06 	br	8111f354 <__reset+0xfb0ff354>
8111f698:	00c00044 	movi	r3,1
8111f69c:	d8000b15 	stw	zero,44(sp)
8111f6a0:	d8c00d15 	stw	r3,52(sp)
8111f6a4:	003f5f06 	br	8111f424 <__reset+0xfb0ff424>
8111f6a8:	b809883a 	mov	r4,r23
8111f6ac:	000d883a 	mov	r6,zero
8111f6b0:	01cff834 	movhi	r7,16352
8111f6b4:	b00b883a 	mov	r5,r22
8111f6b8:	11114640 	call	81111464 <__muldf3>
8111f6bc:	d9000e17 	ldw	r4,56(sp)
8111f6c0:	d8800d15 	stw	r2,52(sp)
8111f6c4:	182f883a 	mov	r23,r3
8111f6c8:	2000181e 	bne	r4,zero,8111f72c <_strtod_r+0xb84>
8111f6cc:	1a20003c 	xorhi	r8,r3,32768
8111f6d0:	d8800b15 	stw	r2,44(sp)
8111f6d4:	402d883a 	mov	r22,r8
8111f6d8:	003faf06 	br	8111f598 <__reset+0xfb0ff598>
8111f6dc:	0015883a 	mov	r10,zero
8111f6e0:	02c00044 	movi	r11,1
8111f6e4:	2800011e 	bne	r5,zero,8111f6ec <_strtod_r+0xb44>
8111f6e8:	903d7e26 	beq	r18,zero,8111ece4 <__reset+0xfb0fece4>
8111f6ec:	0013883a 	mov	r9,zero
8111f6f0:	003e4706 	br	8111f010 <__reset+0xfb0ff010>
8111f6f4:	d8c00a17 	ldw	r3,40(sp)
8111f6f8:	dd800c17 	ldw	r22,48(sp)
8111f6fc:	1889c83a 	sub	r4,r3,r2
8111f700:	003f3706 	br	8111f3e0 <__reset+0xfb0ff3e0>
8111f704:	00bef884 	movi	r2,-1054
8111f708:	05c00044 	movi	r23,1
8111f70c:	10c5c83a 	sub	r2,r2,r3
8111f710:	b884983a 	sll	r2,r23,r2
8111f714:	ddc00d15 	stw	r23,52(sp)
8111f718:	d8800b15 	stw	r2,44(sp)
8111f71c:	003f4106 	br	8111f424 <__reset+0xfb0ff424>
8111f720:	ddc00615 	stw	r23,24(sp)
8111f724:	002b883a 	mov	r21,zero
8111f728:	003dc306 	br	8111ee38 <__reset+0xfb0fee38>
8111f72c:	1811883a 	mov	r8,r3
8111f730:	003fe706 	br	8111f6d0 <__reset+0xfb0ff6d0>
8111f734:	90002e1e 	bne	r18,zero,8111f7f0 <_strtod_r+0xc48>
8111f738:	00c00434 	movhi	r3,16
8111f73c:	18ffffc4 	addi	r3,r3,-1
8111f740:	88c4703a 	and	r2,r17,r3
8111f744:	10002c1e 	bne	r2,zero,8111f7f8 <_strtod_r+0xc50>
8111f748:	000d883a 	mov	r6,zero
8111f74c:	01cffc34 	movhi	r7,16368
8111f750:	b809883a 	mov	r4,r23
8111f754:	b00b883a 	mov	r5,r22
8111f758:	1126c5c0 	call	81126c5c <__ledf2>
8111f75c:	10021716 	blt	r2,zero,8111ffbc <_strtod_r+0x1414>
8111f760:	b809883a 	mov	r4,r23
8111f764:	b00b883a 	mov	r5,r22
8111f768:	000d883a 	mov	r6,zero
8111f76c:	01cff834 	movhi	r7,16352
8111f770:	11114640 	call	81111464 <__muldf3>
8111f774:	d8800d15 	stw	r2,52(sp)
8111f778:	182f883a 	mov	r23,r3
8111f77c:	102d883a 	mov	r22,r2
8111f780:	1a20003c 	xorhi	r8,r3,32768
8111f784:	dd800b15 	stw	r22,44(sp)
8111f788:	402d883a 	mov	r22,r8
8111f78c:	003f8206 	br	8111f598 <__reset+0xfb0ff598>
8111f790:	b013883a 	mov	r9,r22
8111f794:	000b883a 	mov	r5,zero
8111f798:	0015883a 	mov	r10,zero
8111f79c:	893ff404 	addi	r4,r17,-48
8111f7a0:	00800244 	movi	r2,9
8111f7a4:	11001036 	bltu	r2,r4,8111f7e8 <_strtod_r+0xc40>
8111f7a8:	28c00044 	addi	r3,r5,1
8111f7ac:	2023883a 	mov	r17,r4
8111f7b0:	20014d1e 	bne	r4,zero,8111fce8 <_strtod_r+0x1140>
8111f7b4:	d9800617 	ldw	r6,24(sp)
8111f7b8:	180b883a 	mov	r5,r3
8111f7bc:	30800044 	addi	r2,r6,1
8111f7c0:	d8800615 	stw	r2,24(sp)
8111f7c4:	34400047 	ldb	r17,1(r6)
8111f7c8:	003ff406 	br	8111f79c <__reset+0xfb0ff79c>
8111f7cc:	0019883a 	mov	r12,zero
8111f7d0:	b8800084 	addi	r2,r23,2
8111f7d4:	d8800615 	stw	r2,24(sp)
8111f7d8:	bc400087 	ldb	r17,2(r23)
8111f7dc:	003e1606 	br	8111f038 <__reset+0xfb0ff038>
8111f7e0:	03000044 	movi	r12,1
8111f7e4:	003ffa06 	br	8111f7d0 <__reset+0xfb0ff7d0>
8111f7e8:	02c00044 	movi	r11,1
8111f7ec:	003d8d06 	br	8111ee24 <__reset+0xfb0fee24>
8111f7f0:	00800044 	movi	r2,1
8111f7f4:	9080fe26 	beq	r18,r2,8111fbf0 <_strtod_r+0x1048>
8111f7f8:	d8000b15 	stw	zero,44(sp)
8111f7fc:	05affc34 	movhi	r22,49136
8111f800:	d8000d15 	stw	zero,52(sp)
8111f804:	05cffc34 	movhi	r23,16368
8111f808:	003f6306 	br	8111f598 <__reset+0xfb0ff598>
8111f80c:	d8000a15 	stw	zero,40(sp)
8111f810:	003ec906 	br	8111f338 <__reset+0xfb0ff338>
8111f814:	d9001117 	ldw	r4,68(sp)
8111f818:	00bfffc4 	movi	r2,-1
8111f81c:	2080461e 	bne	r4,r2,8111f938 <_strtod_r+0xd90>
8111f820:	dd000a15 	stw	r20,40(sp)
8111f824:	dd001217 	ldw	r20,72(sp)
8111f828:	a811883a 	mov	r8,r21
8111f82c:	d8800517 	ldw	r2,20(sp)
8111f830:	00c00884 	movi	r3,34
8111f834:	80c00015 	stw	r3,0(r16)
8111f838:	002b883a 	mov	r21,zero
8111f83c:	059ffc34 	movhi	r22,32752
8111f840:	100b883a 	mov	r5,r2
8111f844:	8009883a 	mov	r4,r16
8111f848:	da001315 	stw	r8,76(sp)
8111f84c:	111d3940 	call	8111d394 <_Bfree>
8111f850:	d9400a17 	ldw	r5,40(sp)
8111f854:	8009883a 	mov	r4,r16
8111f858:	111d3940 	call	8111d394 <_Bfree>
8111f85c:	980b883a 	mov	r5,r19
8111f860:	8009883a 	mov	r4,r16
8111f864:	111d3940 	call	8111d394 <_Bfree>
8111f868:	d9400817 	ldw	r5,32(sp)
8111f86c:	8009883a 	mov	r4,r16
8111f870:	111d3940 	call	8111d394 <_Bfree>
8111f874:	da001317 	ldw	r8,76(sp)
8111f878:	8009883a 	mov	r4,r16
8111f87c:	400b883a 	mov	r5,r8
8111f880:	111d3940 	call	8111d394 <_Bfree>
8111f884:	003d9206 	br	8111eed0 <__reset+0xfb0feed0>
8111f888:	d8c00717 	ldw	r3,28(sp)
8111f88c:	d8800504 	addi	r2,sp,20
8111f890:	01a04534 	movhi	r6,33044
8111f894:	31813f04 	addi	r6,r6,1276
8111f898:	d8c00115 	stw	r3,4(sp)
8111f89c:	d8800015 	stw	r2,0(sp)
8111f8a0:	d9c00404 	addi	r7,sp,16
8111f8a4:	d9400604 	addi	r5,sp,24
8111f8a8:	8009883a 	mov	r4,r16
8111f8ac:	1123cfc0 	call	81123cfc <__gethex>
8111f8b0:	154001cc 	andi	r21,r2,7
8111f8b4:	a83d9b26 	beq	r21,zero,8111ef24 <__reset+0xfb0fef24>
8111f8b8:	00c00184 	movi	r3,6
8111f8bc:	a8c0d61e 	bne	r21,r3,8111fc18 <_strtod_r+0x1070>
8111f8c0:	9cc00044 	addi	r19,r19,1
8111f8c4:	dcc00615 	stw	r19,24(sp)
8111f8c8:	002b883a 	mov	r21,zero
8111f8cc:	002d883a 	mov	r22,zero
8111f8d0:	d8000715 	stw	zero,28(sp)
8111f8d4:	003d7e06 	br	8111eed0 <__reset+0xfb0feed0>
8111f8d8:	00bf2c34 	movhi	r2,64688
8111f8dc:	88a3883a 	add	r17,r17,r2
8111f8e0:	9009883a 	mov	r4,r18
8111f8e4:	880b883a 	mov	r5,r17
8111f8e8:	111de480 	call	8111de48 <__ulp>
8111f8ec:	d9000b17 	ldw	r4,44(sp)
8111f8f0:	100d883a 	mov	r6,r2
8111f8f4:	180f883a 	mov	r7,r3
8111f8f8:	b00b883a 	mov	r5,r22
8111f8fc:	11114640 	call	81111464 <__muldf3>
8111f900:	900d883a 	mov	r6,r18
8111f904:	180b883a 	mov	r5,r3
8111f908:	880f883a 	mov	r7,r17
8111f90c:	1009883a 	mov	r4,r2
8111f910:	11259540 	call	81125954 <__adddf3>
8111f914:	015f2834 	movhi	r5,31904
8111f918:	1025883a 	mov	r18,r2
8111f91c:	297fffc4 	addi	r5,r5,-1
8111f920:	189ffc2c 	andhi	r2,r3,32752
8111f924:	2880892e 	bgeu	r5,r2,8111fb4c <_strtod_r+0xfa4>
8111f928:	d8801017 	ldw	r2,64(sp)
8111f92c:	00dffc34 	movhi	r3,32752
8111f930:	18ffffc4 	addi	r3,r3,-1
8111f934:	10ffb726 	beq	r2,r3,8111f814 <__reset+0xfb0ff814>
8111f938:	045ffc34 	movhi	r17,32752
8111f93c:	8c7fffc4 	addi	r17,r17,-1
8111f940:	04bfffc4 	movi	r18,-1
8111f944:	003f4706 	br	8111f664 <__reset+0xfb0ff664>
8111f948:	00800884 	movi	r2,34
8111f94c:	80800015 	stw	r2,0(r16)
8111f950:	002b883a 	mov	r21,zero
8111f954:	059ffc34 	movhi	r22,32752
8111f958:	003d5d06 	br	8111eed0 <__reset+0xfb0feed0>
8111f95c:	d9000d17 	ldw	r4,52(sp)
8111f960:	b80b883a 	mov	r5,r23
8111f964:	11276540 	call	81127654 <__fixdfsi>
8111f968:	1009883a 	mov	r4,r2
8111f96c:	11276d40 	call	811276d4 <__floatsidf>
8111f970:	d9000d17 	ldw	r4,52(sp)
8111f974:	b80b883a 	mov	r5,r23
8111f978:	100d883a 	mov	r6,r2
8111f97c:	180f883a 	mov	r7,r3
8111f980:	1126d500 	call	81126d50 <__subdf3>
8111f984:	d9400e17 	ldw	r5,56(sp)
8111f988:	1039883a 	mov	fp,r2
8111f98c:	182f883a 	mov	r23,r3
8111f990:	2800141e 	bne	r5,zero,8111f9e4 <_strtod_r+0xe3c>
8111f994:	9000131e 	bne	r18,zero,8111f9e4 <_strtod_r+0xe3c>
8111f998:	00800434 	movhi	r2,16
8111f99c:	10bfffc4 	addi	r2,r2,-1
8111f9a0:	b0ac703a 	and	r22,r22,r2
8111f9a4:	b0000f1e 	bne	r22,zero,8111f9e4 <_strtod_r+0xe3c>
8111f9a8:	01a52834 	movhi	r6,38048
8111f9ac:	01cff434 	movhi	r7,16336
8111f9b0:	318d6544 	addi	r6,r6,13717
8111f9b4:	39ffffc4 	addi	r7,r7,-1
8111f9b8:	e009883a 	mov	r4,fp
8111f9bc:	180b883a 	mov	r5,r3
8111f9c0:	1126c5c0 	call	81126c5c <__ledf2>
8111f9c4:	103f270e 	bge	r2,zero,8111f664 <__reset+0xfb0ff664>
8111f9c8:	dd000a15 	stw	r20,40(sp)
8111f9cc:	a811883a 	mov	r8,r21
8111f9d0:	dd001217 	ldw	r20,72(sp)
8111f9d4:	d8800517 	ldw	r2,20(sp)
8111f9d8:	002b883a 	mov	r21,zero
8111f9dc:	882d883a 	mov	r22,r17
8111f9e0:	003f9706 	br	8111f840 <__reset+0xfb0ff840>
8111f9e4:	01a52834 	movhi	r6,38048
8111f9e8:	01cff834 	movhi	r7,16352
8111f9ec:	318d6544 	addi	r6,r6,13717
8111f9f0:	39ffffc4 	addi	r7,r7,-1
8111f9f4:	e009883a 	mov	r4,fp
8111f9f8:	b80b883a 	mov	r5,r23
8111f9fc:	1126c5c0 	call	81126c5c <__ledf2>
8111fa00:	10000716 	blt	r2,zero,8111fa20 <_strtod_r+0xe78>
8111fa04:	018d6c34 	movhi	r6,13744
8111fa08:	31b94d44 	addi	r6,r6,-6859
8111fa0c:	01cff834 	movhi	r7,16352
8111fa10:	e009883a 	mov	r4,fp
8111fa14:	b80b883a 	mov	r5,r23
8111fa18:	1126b800 	call	81126b80 <__gedf2>
8111fa1c:	00bf110e 	bge	zero,r2,8111f664 <__reset+0xfb0ff664>
8111fa20:	dd000a15 	stw	r20,40(sp)
8111fa24:	a811883a 	mov	r8,r21
8111fa28:	dd001217 	ldw	r20,72(sp)
8111fa2c:	d8800517 	ldw	r2,20(sp)
8111fa30:	902b883a 	mov	r21,r18
8111fa34:	882d883a 	mov	r22,r17
8111fa38:	003f8106 	br	8111f840 <__reset+0xfb0ff840>
8111fa3c:	b83e2f26 	beq	r23,zero,8111f2fc <__reset+0xfb0ff2fc>
8111fa40:	05efc83a 	sub	r23,zero,r23
8111fa44:	b88003cc 	andi	r2,r23,15
8111fa48:	10000d26 	beq	r2,zero,8111fa80 <_strtod_r+0xed8>
8111fa4c:	100490fa 	slli	r2,r2,3
8111fa50:	00e04534 	movhi	r3,33044
8111fa54:	18c10404 	addi	r3,r3,1040
8111fa58:	1885883a 	add	r2,r3,r2
8111fa5c:	11800017 	ldw	r6,0(r2)
8111fa60:	11c00117 	ldw	r7,4(r2)
8111fa64:	9009883a 	mov	r4,r18
8111fa68:	880b883a 	mov	r5,r17
8111fa6c:	da401315 	stw	r9,76(sp)
8111fa70:	11262080 	call	81126208 <__divdf3>
8111fa74:	da401317 	ldw	r9,76(sp)
8111fa78:	1025883a 	mov	r18,r2
8111fa7c:	1823883a 	mov	r17,r3
8111fa80:	b82fd13a 	srai	r23,r23,4
8111fa84:	b83e1d26 	beq	r23,zero,8111f2fc <__reset+0xfb0ff2fc>
8111fa88:	008007c4 	movi	r2,31
8111fa8c:	15c02816 	blt	r2,r23,8111fb30 <_strtod_r+0xf88>
8111fa90:	b880040c 	andi	r2,r23,16
8111fa94:	10019726 	beq	r2,zero,811200f4 <_strtod_r+0x154c>
8111fa98:	05c1880e 	bge	zero,r23,811200bc <_strtod_r+0x1514>
8111fa9c:	00c01a84 	movi	r3,106
8111faa0:	d8c00915 	stw	r3,36(sp)
8111faa4:	04e04534 	movhi	r19,33044
8111faa8:	9cc14404 	addi	r19,r19,1296
8111faac:	8807883a 	mov	r3,r17
8111fab0:	9005883a 	mov	r2,r18
8111fab4:	8023883a 	mov	r17,r16
8111fab8:	0009883a 	mov	r4,zero
8111fabc:	9821883a 	mov	r16,r19
8111fac0:	da400a15 	stw	r9,40(sp)
8111fac4:	1827883a 	mov	r19,r3
8111fac8:	b980004c 	andi	r6,r23,1
8111facc:	30000626 	beq	r6,zero,8111fae8 <_strtod_r+0xf40>
8111fad0:	81800017 	ldw	r6,0(r16)
8111fad4:	81c00117 	ldw	r7,4(r16)
8111fad8:	1009883a 	mov	r4,r2
8111fadc:	180b883a 	mov	r5,r3
8111fae0:	11114640 	call	81111464 <__muldf3>
8111fae4:	01000044 	movi	r4,1
8111fae8:	b82fd07a 	srai	r23,r23,1
8111faec:	84000204 	addi	r16,r16,8
8111faf0:	b83ff51e 	bne	r23,zero,8111fac8 <__reset+0xfb0ffac8>
8111faf4:	21003fcc 	andi	r4,r4,255
8111faf8:	8821883a 	mov	r16,r17
8111fafc:	da400a17 	ldw	r9,40(sp)
8111fb00:	9823883a 	mov	r17,r19
8111fb04:	2001a51e 	bne	r4,zero,8112019c <_strtod_r+0x15f4>
8111fb08:	d9000917 	ldw	r4,36(sp)
8111fb0c:	20016d1e 	bne	r4,zero,811200c4 <_strtod_r+0x151c>
8111fb10:	000d883a 	mov	r6,zero
8111fb14:	000f883a 	mov	r7,zero
8111fb18:	9009883a 	mov	r4,r18
8111fb1c:	880b883a 	mov	r5,r17
8111fb20:	da401315 	stw	r9,76(sp)
8111fb24:	1126af80 	call	81126af8 <__eqdf2>
8111fb28:	da401317 	ldw	r9,76(sp)
8111fb2c:	103df41e 	bne	r2,zero,8111f300 <__reset+0xfb0ff300>
8111fb30:	00800884 	movi	r2,34
8111fb34:	80800015 	stw	r2,0(r16)
8111fb38:	002b883a 	mov	r21,zero
8111fb3c:	002d883a 	mov	r22,zero
8111fb40:	003ce306 	br	8111eed0 <__reset+0xfb0feed0>
8111fb44:	055387c4 	movi	r21,19999
8111fb48:	003d6b06 	br	8111f0f8 <__reset+0xfb0ff0f8>
8111fb4c:	0440d434 	movhi	r17,848
8111fb50:	1c63883a 	add	r17,r3,r17
8111fb54:	882d883a 	mov	r22,r17
8111fb58:	003ebe06 	br	8111f654 <__reset+0xfb0ff654>
8111fb5c:	14403fcc 	andi	r17,r2,255
8111fb60:	8c40201c 	xori	r17,r17,128
8111fb64:	8c7fe004 	addi	r17,r17,-128
8111fb68:	dd400817 	ldw	r21,32(sp)
8111fb6c:	0027883a 	mov	r19,zero
8111fb70:	0039883a 	mov	fp,zero
8111fb74:	002d883a 	mov	r22,zero
8111fb78:	003c9906 	br	8111ede0 <__reset+0xfb0fede0>
8111fb7c:	00c00944 	movi	r3,37
8111fb80:	1a47c83a 	sub	r3,r3,r9
8111fb84:	1d7d8c16 	blt	r3,r21,8111f1b8 <__reset+0xfb0ff1b8>
8111fb88:	1261c83a 	sub	r16,r2,r9
8111fb8c:	800490fa 	slli	r2,r16,3
8111fb90:	04e04534 	movhi	r19,33044
8111fb94:	9cc10404 	addi	r19,r19,1040
8111fb98:	9885883a 	add	r2,r19,r2
8111fb9c:	11000017 	ldw	r4,0(r2)
8111fba0:	11400117 	ldw	r5,4(r2)
8111fba4:	900d883a 	mov	r6,r18
8111fba8:	880f883a 	mov	r7,r17
8111fbac:	11114640 	call	81111464 <__muldf3>
8111fbb0:	ac0dc83a 	sub	r6,r21,r16
8111fbb4:	300c90fa 	slli	r6,r6,3
8111fbb8:	1009883a 	mov	r4,r2
8111fbbc:	180b883a 	mov	r5,r3
8111fbc0:	9985883a 	add	r2,r19,r6
8111fbc4:	11800017 	ldw	r6,0(r2)
8111fbc8:	11c00117 	ldw	r7,4(r2)
8111fbcc:	11114640 	call	81111464 <__muldf3>
8111fbd0:	102b883a 	mov	r21,r2
8111fbd4:	182d883a 	mov	r22,r3
8111fbd8:	003cbd06 	br	8111eed0 <__reset+0xfb0feed0>
8111fbdc:	b811883a 	mov	r8,r23
8111fbe0:	003e8606 	br	8111f5fc <__reset+0xfb0ff5fc>
8111fbe4:	d8000d15 	stw	zero,52(sp)
8111fbe8:	05cffc34 	movhi	r23,16368
8111fbec:	003e8006 	br	8111f5f0 <__reset+0xfb0ff5f0>
8111fbf0:	883f011e 	bne	r17,zero,8111f7f8 <__reset+0xfb0ff7f8>
8111fbf4:	dd000a15 	stw	r20,40(sp)
8111fbf8:	dd001217 	ldw	r20,72(sp)
8111fbfc:	a811883a 	mov	r8,r21
8111fc00:	00800884 	movi	r2,34
8111fc04:	80800015 	stw	r2,0(r16)
8111fc08:	002b883a 	mov	r21,zero
8111fc0c:	d8800517 	ldw	r2,20(sp)
8111fc10:	002d883a 	mov	r22,zero
8111fc14:	003f0a06 	br	8111f840 <__reset+0xfb0ff840>
8111fc18:	d9800517 	ldw	r6,20(sp)
8111fc1c:	30000826 	beq	r6,zero,8111fc40 <_strtod_r+0x1098>
8111fc20:	01400d44 	movi	r5,53
8111fc24:	d9000204 	addi	r4,sp,8
8111fc28:	d8801315 	stw	r2,76(sp)
8111fc2c:	111e23c0 	call	8111e23c <__copybits>
8111fc30:	d9400517 	ldw	r5,20(sp)
8111fc34:	8009883a 	mov	r4,r16
8111fc38:	111d3940 	call	8111d394 <_Bfree>
8111fc3c:	d8801317 	ldw	r2,76(sp)
8111fc40:	00c00184 	movi	r3,6
8111fc44:	1d400f36 	bltu	r3,r21,8111fc84 <_strtod_r+0x10dc>
8111fc48:	a82a90ba 	slli	r21,r21,2
8111fc4c:	00e044b4 	movhi	r3,33042
8111fc50:	18ff1804 	addi	r3,r3,-928
8111fc54:	a8eb883a 	add	r21,r21,r3
8111fc58:	a8c00017 	ldw	r3,0(r21)
8111fc5c:	1800683a 	jmp	r3
8111fc60:	8111fcdc 	xori	r4,r16,18419
8111fc64:	8111fcb4 	orhi	r4,r16,18418
8111fc68:	8111fc98 	cmpnei	r4,r16,18418
8111fc6c:	8111fc7c 	xorhi	r4,r16,18417
8111fc70:	8111fca4 	muli	r4,r16,18418
8111fc74:	8111fcb4 	orhi	r4,r16,18418
8111fc78:	8111fcdc 	xori	r4,r16,18419
8111fc7c:	045ffc34 	movhi	r17,32752
8111fc80:	0025883a 	mov	r18,zero
8111fc84:	1080020c 	andi	r2,r2,8
8111fc88:	902b883a 	mov	r21,r18
8111fc8c:	103c8f26 	beq	r2,zero,8111eecc <__reset+0xfb0feecc>
8111fc90:	8da00034 	orhi	r22,r17,32768
8111fc94:	003c8e06 	br	8111eed0 <__reset+0xfb0feed0>
8111fc98:	dc800217 	ldw	r18,8(sp)
8111fc9c:	dc400317 	ldw	r17,12(sp)
8111fca0:	003ff806 	br	8111fc84 <__reset+0xfb0ffc84>
8111fca4:	04600034 	movhi	r17,32768
8111fca8:	8c7fffc4 	addi	r17,r17,-1
8111fcac:	04bfffc4 	movi	r18,-1
8111fcb0:	003ff406 	br	8111fc84 <__reset+0xfb0ffc84>
8111fcb4:	d8c00417 	ldw	r3,16(sp)
8111fcb8:	dc400317 	ldw	r17,12(sp)
8111fcbc:	013ffc34 	movhi	r4,65520
8111fcc0:	18c10cc4 	addi	r3,r3,1075
8111fcc4:	1806953a 	slli	r3,r3,20
8111fcc8:	213fffc4 	addi	r4,r4,-1
8111fccc:	8922703a 	and	r17,r17,r4
8111fcd0:	dc800217 	ldw	r18,8(sp)
8111fcd4:	88e2b03a 	or	r17,r17,r3
8111fcd8:	003fea06 	br	8111fc84 <__reset+0xfb0ffc84>
8111fcdc:	0023883a 	mov	r17,zero
8111fce0:	0025883a 	mov	r18,zero
8111fce4:	003fe706 	br	8111fc84 <__reset+0xfb0ffc84>
8111fce8:	01800044 	movi	r6,1
8111fcec:	50d5883a 	add	r10,r10,r3
8111fcf0:	2a4b883a 	add	r5,r5,r9
8111fcf4:	19811a26 	beq	r3,r6,81120160 <_strtod_r+0x15b8>
8111fcf8:	01800204 	movi	r6,8
8111fcfc:	01c00404 	movi	r7,16
8111fd00:	4a400044 	addi	r9,r9,1
8111fd04:	48bfffc4 	addi	r2,r9,-1
8111fd08:	30801616 	blt	r6,r2,8111fd64 <_strtod_r+0x11bc>
8111fd0c:	e70002a4 	muli	fp,fp,10
8111fd10:	497ffb1e 	bne	r9,r5,8111fd00 <__reset+0xfb0ffd00>
8111fd14:	d9800617 	ldw	r6,24(sp)
8111fd18:	4a400044 	addi	r9,r9,1
8111fd1c:	00c00204 	movi	r3,8
8111fd20:	19400c0e 	bge	r3,r5,8111fd54 <_strtod_r+0x11ac>
8111fd24:	00800404 	movi	r2,16
8111fd28:	000b883a 	mov	r5,zero
8111fd2c:	127ea316 	blt	r2,r9,8111f7bc <__reset+0xfb0ff7bc>
8111fd30:	988002a4 	muli	r2,r19,10
8111fd34:	20a7883a 	add	r19,r4,r2
8111fd38:	003ea006 	br	8111f7bc <__reset+0xfb0ff7bc>
8111fd3c:	d8800617 	ldw	r2,24(sp)
8111fd40:	8c7ff404 	addi	r17,r17,-48
8111fd44:	2a800044 	addi	r10,r5,1
8111fd48:	d8800815 	stw	r2,32(sp)
8111fd4c:	100d883a 	mov	r6,r2
8111fd50:	02400044 	movi	r9,1
8111fd54:	e08002a4 	muli	r2,fp,10
8111fd58:	000b883a 	mov	r5,zero
8111fd5c:	88b9883a 	add	fp,r17,r2
8111fd60:	003e9606 	br	8111f7bc <__reset+0xfb0ff7bc>
8111fd64:	3a7fea16 	blt	r7,r9,8111fd10 <__reset+0xfb0ffd10>
8111fd68:	9cc002a4 	muli	r19,r19,10
8111fd6c:	003fe806 	br	8111fd10 <__reset+0xfb0ffd10>
8111fd70:	00bffa84 	movi	r2,-22
8111fd74:	a8bd1016 	blt	r21,r2,8111f1b8 <__reset+0xfb0ff1b8>
8111fd78:	a82a90fa 	slli	r21,r21,3
8111fd7c:	00a04534 	movhi	r2,33044
8111fd80:	10810404 	addi	r2,r2,1040
8111fd84:	1545c83a 	sub	r2,r2,r21
8111fd88:	11800017 	ldw	r6,0(r2)
8111fd8c:	11c00117 	ldw	r7,4(r2)
8111fd90:	9009883a 	mov	r4,r18
8111fd94:	880b883a 	mov	r5,r17
8111fd98:	11262080 	call	81126208 <__divdf3>
8111fd9c:	102b883a 	mov	r21,r2
8111fda0:	182d883a 	mov	r22,r3
8111fda4:	003c4a06 	br	8111eed0 <__reset+0xfb0feed0>
8111fda8:	dd000a15 	stw	r20,40(sp)
8111fdac:	a811883a 	mov	r8,r21
8111fdb0:	dd001217 	ldw	r20,72(sp)
8111fdb4:	003e9e06 	br	8111f830 <__reset+0xfb0ff830>
8111fdb8:	01604534 	movhi	r5,33044
8111fdbc:	d9000617 	ldw	r4,24(sp)
8111fdc0:	29413604 	addi	r5,r5,1240
8111fdc4:	01c00644 	movi	r7,25
8111fdc8:	00000b06 	br	8111fdf8 <_strtod_r+0x1250>
8111fdcc:	21000044 	addi	r4,r4,1
8111fdd0:	20800003 	ldbu	r2,0(r4)
8111fdd4:	10ffefc4 	addi	r3,r2,-65
8111fdd8:	10803fcc 	andi	r2,r2,255
8111fddc:	1080201c 	xori	r2,r2,128
8111fde0:	18c03fcc 	andi	r3,r3,255
8111fde4:	10bfe004 	addi	r2,r2,-128
8111fde8:	38c00136 	bltu	r7,r3,8111fdf0 <_strtod_r+0x1248>
8111fdec:	10800804 	addi	r2,r2,32
8111fdf0:	29400044 	addi	r5,r5,1
8111fdf4:	11bbbb1e 	bne	r2,r6,8111ece4 <__reset+0xfb0fece4>
8111fdf8:	29800007 	ldb	r6,0(r5)
8111fdfc:	303ff31e 	bne	r6,zero,8111fdcc <__reset+0xfb0ffdcc>
8111fe00:	01a04534 	movhi	r6,33044
8111fe04:	d9000615 	stw	r4,24(sp)
8111fe08:	31813704 	addi	r6,r6,1244
8111fe0c:	200b883a 	mov	r5,r4
8111fe10:	02000644 	movi	r8,25
8111fe14:	00000a06 	br	8111fe40 <_strtod_r+0x1298>
8111fe18:	28800003 	ldbu	r2,0(r5)
8111fe1c:	10ffefc4 	addi	r3,r2,-65
8111fe20:	10803fcc 	andi	r2,r2,255
8111fe24:	1080201c 	xori	r2,r2,128
8111fe28:	18c03fcc 	andi	r3,r3,255
8111fe2c:	10bfe004 	addi	r2,r2,-128
8111fe30:	40c00136 	bltu	r8,r3,8111fe38 <_strtod_r+0x1290>
8111fe34:	10800804 	addi	r2,r2,32
8111fe38:	31800044 	addi	r6,r6,1
8111fe3c:	11c0711e 	bne	r2,r7,81120004 <_strtod_r+0x145c>
8111fe40:	31c00007 	ldb	r7,0(r6)
8111fe44:	29400044 	addi	r5,r5,1
8111fe48:	383ff31e 	bne	r7,zero,8111fe18 <__reset+0xfb0ffe18>
8111fe4c:	d9400615 	stw	r5,24(sp)
8111fe50:	045ffc34 	movhi	r17,32752
8111fe54:	0025883a 	mov	r18,zero
8111fe58:	003c1b06 	br	8111eec8 <__reset+0xfb0feec8>
8111fe5c:	000b883a 	mov	r5,zero
8111fe60:	003ccc06 	br	8111f194 <__reset+0xfb0ff194>
8111fe64:	d9400e17 	ldw	r5,56(sp)
8111fe68:	dd000a15 	stw	r20,40(sp)
8111fe6c:	00800434 	movhi	r2,16
8111fe70:	a811883a 	mov	r8,r21
8111fe74:	dd001217 	ldw	r20,72(sp)
8111fe78:	dd401117 	ldw	r21,68(sp)
8111fe7c:	dd801017 	ldw	r22,64(sp)
8111fe80:	10bfffc4 	addi	r2,r2,-1
8111fe84:	28005626 	beq	r5,zero,8111ffe0 <_strtod_r+0x1438>
8111fe88:	8886703a 	and	r3,r17,r2
8111fe8c:	18807826 	beq	r3,r2,81120070 <_strtod_r+0x14c8>
8111fe90:	d8c00b17 	ldw	r3,44(sp)
8111fe94:	18005726 	beq	r3,zero,8111fff4 <_strtod_r+0x144c>
8111fe98:	1c44703a 	and	r2,r3,r17
8111fe9c:	10000f26 	beq	r2,zero,8111fedc <_strtod_r+0x1334>
8111fea0:	d9000e17 	ldw	r4,56(sp)
8111fea4:	d9800917 	ldw	r6,36(sp)
8111fea8:	20005e26 	beq	r4,zero,81120024 <_strtod_r+0x147c>
8111feac:	9009883a 	mov	r4,r18
8111feb0:	880b883a 	mov	r5,r17
8111feb4:	da001315 	stw	r8,76(sp)
8111feb8:	111eb3c0 	call	8111eb3c <sulp>
8111febc:	100d883a 	mov	r6,r2
8111fec0:	180f883a 	mov	r7,r3
8111fec4:	9009883a 	mov	r4,r18
8111fec8:	880b883a 	mov	r5,r17
8111fecc:	11259540 	call	81125954 <__adddf3>
8111fed0:	da001317 	ldw	r8,76(sp)
8111fed4:	102b883a 	mov	r21,r2
8111fed8:	182d883a 	mov	r22,r3
8111fedc:	d8c00917 	ldw	r3,36(sp)
8111fee0:	18000f26 	beq	r3,zero,8111ff20 <_strtod_r+0x1378>
8111fee4:	a809883a 	mov	r4,r21
8111fee8:	b00b883a 	mov	r5,r22
8111feec:	000d883a 	mov	r6,zero
8111fef0:	01ce5434 	movhi	r7,14672
8111fef4:	da001315 	stw	r8,76(sp)
8111fef8:	11114640 	call	81111464 <__muldf3>
8111fefc:	102b883a 	mov	r21,r2
8111ff00:	182d883a 	mov	r22,r3
8111ff04:	da001317 	ldw	r8,76(sp)
8111ff08:	1800051e 	bne	r3,zero,8111ff20 <_strtod_r+0x1378>
8111ff0c:	d8800517 	ldw	r2,20(sp)
8111ff10:	a83e4b1e 	bne	r21,zero,8111f840 <__reset+0xfb0ff840>
8111ff14:	00c00884 	movi	r3,34
8111ff18:	80c00015 	stw	r3,0(r16)
8111ff1c:	003e4806 	br	8111f840 <__reset+0xfb0ff840>
8111ff20:	d8800517 	ldw	r2,20(sp)
8111ff24:	003e4606 	br	8111f840 <__reset+0xfb0ff840>
8111ff28:	d9000e17 	ldw	r4,56(sp)
8111ff2c:	dd000a15 	stw	r20,40(sp)
8111ff30:	a811883a 	mov	r8,r21
8111ff34:	dd001217 	ldw	r20,72(sp)
8111ff38:	dd401117 	ldw	r21,68(sp)
8111ff3c:	dd801017 	ldw	r22,64(sp)
8111ff40:	203fe61e 	bne	r4,zero,8111fedc <__reset+0xfb0ffedc>
8111ff44:	903fe51e 	bne	r18,zero,8111fedc <__reset+0xfb0ffedc>
8111ff48:	00800434 	movhi	r2,16
8111ff4c:	10bfffc4 	addi	r2,r2,-1
8111ff50:	8884703a 	and	r2,r17,r2
8111ff54:	103fe11e 	bne	r2,zero,8111fedc <__reset+0xfb0ffedc>
8111ff58:	8ddffc2c 	andhi	r23,r17,32752
8111ff5c:	0081ac34 	movhi	r2,1712
8111ff60:	15ffde2e 	bgeu	r2,r23,8111fedc <__reset+0xfb0ffedc>
8111ff64:	40800517 	ldw	r2,20(r8)
8111ff68:	1000031e 	bne	r2,zero,8111ff78 <_strtod_r+0x13d0>
8111ff6c:	40800417 	ldw	r2,16(r8)
8111ff70:	00c00044 	movi	r3,1
8111ff74:	18bfd90e 	bge	r3,r2,8111fedc <__reset+0xfb0ffedc>
8111ff78:	400b883a 	mov	r5,r8
8111ff7c:	01800044 	movi	r6,1
8111ff80:	8009883a 	mov	r4,r16
8111ff84:	111da940 	call	8111da94 <__lshift>
8111ff88:	980b883a 	mov	r5,r19
8111ff8c:	1009883a 	mov	r4,r2
8111ff90:	d8801315 	stw	r2,76(sp)
8111ff94:	111dbe40 	call	8111dbe4 <__mcmp>
8111ff98:	da001317 	ldw	r8,76(sp)
8111ff9c:	00bfcf0e 	bge	zero,r2,8111fedc <__reset+0xfb0ffedc>
8111ffa0:	d8c00917 	ldw	r3,36(sp)
8111ffa4:	18005c26 	beq	r3,zero,81120118 <_strtod_r+0x1570>
8111ffa8:	0081ac34 	movhi	r2,1712
8111ffac:	15c05a16 	blt	r2,r23,81120118 <_strtod_r+0x1570>
8111ffb0:	0080dc34 	movhi	r2,880
8111ffb4:	15ffcb16 	blt	r2,r23,8111fee4 <__reset+0xfb0ffee4>
8111ffb8:	003f1106 	br	8111fc00 <__reset+0xfb0ffc00>
8111ffbc:	002d883a 	mov	r22,zero
8111ffc0:	022ff834 	movhi	r8,49120
8111ffc4:	d8000d15 	stw	zero,52(sp)
8111ffc8:	05cff834 	movhi	r23,16352
8111ffcc:	003ded06 	br	8111f784 <__reset+0xfb0ff784>
8111ffd0:	0440d434 	movhi	r17,848
8111ffd4:	1c63883a 	add	r17,r3,r17
8111ffd8:	d8000915 	stw	zero,36(sp)
8111ffdc:	003cc806 	br	8111f300 <__reset+0xfb0ff300>
8111ffe0:	8884703a 	and	r2,r17,r2
8111ffe4:	103faa1e 	bne	r2,zero,8111fe90 <__reset+0xfb0ffe90>
8111ffe8:	903fa91e 	bne	r18,zero,8111fe90 <__reset+0xfb0ffe90>
8111ffec:	8ddffc2c 	andhi	r23,r17,32752
8111fff0:	003feb06 	br	8111ffa0 <__reset+0xfb0fffa0>
8111fff4:	d8c00d17 	ldw	r3,52(sp)
8111fff8:	1cae703a 	and	r23,r3,r18
8111fffc:	b83fb726 	beq	r23,zero,8111fedc <__reset+0xfb0ffedc>
81120000:	003fa706 	br	8111fea0 <__reset+0xfb0ffea0>
81120004:	21000044 	addi	r4,r4,1
81120008:	d9000615 	stw	r4,24(sp)
8112000c:	003f9006 	br	8111fe50 <__reset+0xfb0ffe50>
81120010:	01604534 	movhi	r5,33044
81120014:	2940fa04 	addi	r5,r5,1000
81120018:	d9400915 	stw	r5,36(sp)
8112001c:	0027883a 	mov	r19,zero
81120020:	003ca206 	br	8111f2ac <__reset+0xfb0ff2ac>
81120024:	9009883a 	mov	r4,r18
81120028:	880b883a 	mov	r5,r17
8112002c:	da001315 	stw	r8,76(sp)
81120030:	111eb3c0 	call	8111eb3c <sulp>
81120034:	100d883a 	mov	r6,r2
81120038:	180f883a 	mov	r7,r3
8112003c:	9009883a 	mov	r4,r18
81120040:	880b883a 	mov	r5,r17
81120044:	1126d500 	call	81126d50 <__subdf3>
81120048:	000d883a 	mov	r6,zero
8112004c:	000f883a 	mov	r7,zero
81120050:	1009883a 	mov	r4,r2
81120054:	180b883a 	mov	r5,r3
81120058:	102b883a 	mov	r21,r2
8112005c:	182d883a 	mov	r22,r3
81120060:	1126af80 	call	81126af8 <__eqdf2>
81120064:	da001317 	ldw	r8,76(sp)
81120068:	103ee526 	beq	r2,zero,8111fc00 <__reset+0xfb0ffc00>
8112006c:	003f9b06 	br	8111fedc <__reset+0xfb0ffedc>
81120070:	d8800917 	ldw	r2,36(sp)
81120074:	10002226 	beq	r2,zero,81120100 <_strtod_r+0x1558>
81120078:	889ffc2c 	andhi	r2,r17,32752
8112007c:	00c1a834 	movhi	r3,1696
81120080:	18801f36 	bltu	r3,r2,81120100 <_strtod_r+0x1558>
81120084:	1004d53a 	srli	r2,r2,20
81120088:	00c01ac4 	movi	r3,107
8112008c:	1887c83a 	sub	r3,r3,r2
81120090:	00bfffc4 	movi	r2,-1
81120094:	10c4983a 	sll	r2,r2,r3
81120098:	14bf7d1e 	bne	r2,r18,8111fe90 <__reset+0xfb0ffe90>
8112009c:	00dffc34 	movhi	r3,32752
811200a0:	18ffffc4 	addi	r3,r3,-1
811200a4:	88c03526 	beq	r17,r3,8112017c <_strtod_r+0x15d4>
811200a8:	8c5ffc2c 	andhi	r17,r17,32752
811200ac:	00800434 	movhi	r2,16
811200b0:	002b883a 	mov	r21,zero
811200b4:	88ad883a 	add	r22,r17,r2
811200b8:	003f8806 	br	8111fedc <__reset+0xfb0ffedc>
811200bc:	01401a84 	movi	r5,106
811200c0:	d9400915 	stw	r5,36(sp)
811200c4:	8ddffc2c 	andhi	r23,r17,32752
811200c8:	b82ed53a 	srli	r23,r23,20
811200cc:	00801ac4 	movi	r2,107
811200d0:	15c5c83a 	sub	r2,r2,r23
811200d4:	00be8e0e 	bge	zero,r2,8111fb10 <__reset+0xfb0ffb10>
811200d8:	00c007c4 	movi	r3,31
811200dc:	18800a0e 	bge	r3,r2,81120108 <_strtod_r+0x1560>
811200e0:	00c00d04 	movi	r3,52
811200e4:	0025883a 	mov	r18,zero
811200e8:	1880270e 	bge	r3,r2,81120188 <_strtod_r+0x15e0>
811200ec:	0440dc34 	movhi	r17,880
811200f0:	003e8706 	br	8111fb10 <__reset+0xfb0ffb10>
811200f4:	d8000915 	stw	zero,36(sp)
811200f8:	05fe6a16 	blt	zero,r23,8111faa4 <__reset+0xfb0ffaa4>
811200fc:	003e8406 	br	8111fb10 <__reset+0xfb0ffb10>
81120100:	00bfffc4 	movi	r2,-1
81120104:	003fe406 	br	81120098 <__reset+0xfb100098>
81120108:	00ffffc4 	movi	r3,-1
8112010c:	1884983a 	sll	r2,r3,r2
81120110:	14a4703a 	and	r18,r2,r18
81120114:	003e7e06 	br	8111fb10 <__reset+0xfb0ffb10>
81120118:	00bffc34 	movhi	r2,65520
8112011c:	b8af883a 	add	r23,r23,r2
81120120:	057fffc4 	movi	r21,-1
81120124:	00800434 	movhi	r2,16
81120128:	1545883a 	add	r2,r2,r21
8112012c:	b8acb03a 	or	r22,r23,r2
81120130:	003f6a06 	br	8111fedc <__reset+0xfb0ffedc>
81120134:	01604534 	movhi	r5,33044
81120138:	29413a04 	addi	r5,r5,1256
8112013c:	d9800204 	addi	r6,sp,8
81120140:	d9000604 	addi	r4,sp,24
81120144:	11245340 	call	81124534 <__hexnan>
81120148:	00c00144 	movi	r3,5
8112014c:	10fb5c1e 	bne	r2,r3,8111eec0 <__reset+0xfb0feec0>
81120150:	dc400317 	ldw	r17,12(sp)
81120154:	dc800217 	ldw	r18,8(sp)
81120158:	8c5ffc34 	orhi	r17,r17,32752
8112015c:	003b5a06 	br	8111eec8 <__reset+0xfb0feec8>
81120160:	480b883a 	mov	r5,r9
81120164:	d9800617 	ldw	r6,24(sp)
81120168:	4a400044 	addi	r9,r9,1
8112016c:	003eeb06 	br	8111fd1c <__reset+0xfb0ffd1c>
81120170:	1025883a 	mov	r18,r2
81120174:	1823883a 	mov	r17,r3
81120178:	003c4c06 	br	8111f2ac <__reset+0xfb0ff2ac>
8112017c:	00ffffc4 	movi	r3,-1
81120180:	10ffc91e 	bne	r2,r3,811200a8 <__reset+0xfb1000a8>
81120184:	003da906 	br	8111f82c <__reset+0xfb0ff82c>
81120188:	10bff804 	addi	r2,r2,-32
8112018c:	00ffffc4 	movi	r3,-1
81120190:	1884983a 	sll	r2,r3,r2
81120194:	1462703a 	and	r17,r2,r17
81120198:	003e5d06 	br	8111fb10 <__reset+0xfb0ffb10>
8112019c:	1025883a 	mov	r18,r2
811201a0:	1823883a 	mov	r17,r3
811201a4:	003e5806 	br	8111fb08 <__reset+0xfb0ffb08>

811201a8 <strtod>:
811201a8:	00a04534 	movhi	r2,33044
811201ac:	108aa604 	addi	r2,r2,10904
811201b0:	280d883a 	mov	r6,r5
811201b4:	200b883a 	mov	r5,r4
811201b8:	11000017 	ldw	r4,0(r2)
811201bc:	111eba81 	jmpi	8111eba8 <_strtod_r>

811201c0 <strtof>:
811201c0:	defffb04 	addi	sp,sp,-20
811201c4:	de00012e 	bgeu	sp,et,811201cc <strtof+0xc>
811201c8:	003b68fa 	trap	3
811201cc:	dcc00315 	stw	r19,12(sp)
811201d0:	04e04534 	movhi	r19,33044
811201d4:	9ccaa604 	addi	r19,r19,10904
811201d8:	280d883a 	mov	r6,r5
811201dc:	200b883a 	mov	r5,r4
811201e0:	99000017 	ldw	r4,0(r19)
811201e4:	dfc00415 	stw	ra,16(sp)
811201e8:	dc800215 	stw	r18,8(sp)
811201ec:	dc400115 	stw	r17,4(sp)
811201f0:	dc000015 	stw	r16,0(sp)
811201f4:	111eba80 	call	8111eba8 <_strtod_r>
811201f8:	1009883a 	mov	r4,r2
811201fc:	180b883a 	mov	r5,r3
81120200:	1025883a 	mov	r18,r2
81120204:	1823883a 	mov	r17,r3
81120208:	1111c9c0 	call	81111c9c <__truncdfsf2>
8112020c:	000b883a 	mov	r5,zero
81120210:	1009883a 	mov	r4,r2
81120214:	1021883a 	mov	r16,r2
81120218:	11257580 	call	81125758 <__eqsf2>
8112021c:	1000111e 	bne	r2,zero,81120264 <strtof+0xa4>
81120220:	000d883a 	mov	r6,zero
81120224:	000f883a 	mov	r7,zero
81120228:	9009883a 	mov	r4,r18
8112022c:	880b883a 	mov	r5,r17
81120230:	1126af80 	call	81126af8 <__eqdf2>
81120234:	10000b26 	beq	r2,zero,81120264 <strtof+0xa4>
81120238:	98800017 	ldw	r2,0(r19)
8112023c:	00c00884 	movi	r3,34
81120240:	10c00015 	stw	r3,0(r2)
81120244:	8005883a 	mov	r2,r16
81120248:	dfc00417 	ldw	ra,16(sp)
8112024c:	dcc00317 	ldw	r19,12(sp)
81120250:	dc800217 	ldw	r18,8(sp)
81120254:	dc400117 	ldw	r17,4(sp)
81120258:	dc000017 	ldw	r16,0(sp)
8112025c:	dec00504 	addi	sp,sp,20
81120260:	f800283a 	ret
81120264:	015fe034 	movhi	r5,32640
81120268:	297fffc4 	addi	r5,r5,-1
8112026c:	8009883a 	mov	r4,r16
81120270:	11257d00 	call	811257d0 <__gesf2>
81120274:	0080070e 	bge	zero,r2,81120294 <strtof+0xd4>
81120278:	01dffc34 	movhi	r7,32752
8112027c:	39ffffc4 	addi	r7,r7,-1
81120280:	01bfffc4 	movi	r6,-1
81120284:	9009883a 	mov	r4,r18
81120288:	880b883a 	mov	r5,r17
8112028c:	1126b800 	call	81126b80 <__gedf2>
81120290:	00bfe90e 	bge	zero,r2,81120238 <__reset+0xfb100238>
81120294:	017fe034 	movhi	r5,65408
81120298:	297fffc4 	addi	r5,r5,-1
8112029c:	8009883a 	mov	r4,r16
811202a0:	112588c0 	call	8112588c <__lesf2>
811202a4:	103fe70e 	bge	r2,zero,81120244 <__reset+0xfb100244>
811202a8:	01fffc34 	movhi	r7,65520
811202ac:	39ffffc4 	addi	r7,r7,-1
811202b0:	01bfffc4 	movi	r6,-1
811202b4:	9009883a 	mov	r4,r18
811202b8:	880b883a 	mov	r5,r17
811202bc:	1126c5c0 	call	81126c5c <__ledf2>
811202c0:	103fdd0e 	bge	r2,zero,81120238 <__reset+0xfb100238>
811202c4:	003fdf06 	br	81120244 <__reset+0xfb100244>

811202c8 <_strtoll_r>:
811202c8:	00a04534 	movhi	r2,33044
811202cc:	defff304 	addi	sp,sp,-52
811202d0:	108aa404 	addi	r2,r2,10896
811202d4:	de00012e 	bgeu	sp,et,811202dc <_strtoll_r+0x14>
811202d8:	003b68fa 	trap	3
811202dc:	dc800515 	stw	r18,20(sp)
811202e0:	14800017 	ldw	r18,0(r2)
811202e4:	dd800915 	stw	r22,36(sp)
811202e8:	dd400815 	stw	r21,32(sp)
811202ec:	dcc00615 	stw	r19,24(sp)
811202f0:	d9000015 	stw	r4,0(sp)
811202f4:	dfc00c15 	stw	ra,48(sp)
811202f8:	df000b15 	stw	fp,44(sp)
811202fc:	ddc00a15 	stw	r23,40(sp)
81120300:	dd000715 	stw	r20,28(sp)
81120304:	dc400415 	stw	r17,16(sp)
81120308:	dc000315 	stw	r16,12(sp)
8112030c:	282d883a 	mov	r22,r5
81120310:	302b883a 	mov	r21,r6
81120314:	3827883a 	mov	r19,r7
81120318:	2809883a 	mov	r4,r5
8112031c:	24000003 	ldbu	r16,0(r4)
81120320:	24400044 	addi	r17,r4,1
81120324:	2007883a 	mov	r3,r4
81120328:	9405883a 	add	r2,r18,r16
8112032c:	10800043 	ldbu	r2,1(r2)
81120330:	8809883a 	mov	r4,r17
81120334:	1080020c 	andi	r2,r2,8
81120338:	103ff81e 	bne	r2,zero,8112031c <__reset+0xfb10031c>
8112033c:	00800b44 	movi	r2,45
81120340:	80807826 	beq	r16,r2,81120524 <_strtoll_r+0x25c>
81120344:	00800ac4 	movi	r2,43
81120348:	80807a26 	beq	r16,r2,81120534 <_strtoll_r+0x26c>
8112034c:	0039883a 	mov	fp,zero
81120350:	98004e26 	beq	r19,zero,8112048c <_strtoll_r+0x1c4>
81120354:	00800404 	movi	r2,16
81120358:	98808226 	beq	r19,r2,81120564 <_strtoll_r+0x29c>
8112035c:	982fd7fa 	srai	r23,r19,31
81120360:	9829883a 	mov	r20,r19
81120364:	e0004f26 	beq	fp,zero,811204a4 <_strtoll_r+0x1dc>
81120368:	0017883a 	mov	r11,zero
8112036c:	02a00034 	movhi	r10,32768
81120370:	5809883a 	mov	r4,r11
81120374:	500b883a 	mov	r5,r10
81120378:	a00d883a 	mov	r6,r20
8112037c:	b80f883a 	mov	r7,r23
81120380:	da800215 	stw	r10,8(sp)
81120384:	dac00115 	stw	r11,4(sp)
81120388:	11250640 	call	81125064 <__umoddi3>
8112038c:	dac00117 	ldw	r11,4(sp)
81120390:	da800217 	ldw	r10,8(sp)
81120394:	a00d883a 	mov	r6,r20
81120398:	5809883a 	mov	r4,r11
8112039c:	500b883a 	mov	r5,r10
811203a0:	b80f883a 	mov	r7,r23
811203a4:	d8800115 	stw	r2,4(sp)
811203a8:	1124ae40 	call	81124ae4 <__udivdi3>
811203ac:	9409883a 	add	r4,r18,r16
811203b0:	21000043 	ldbu	r4,1(r4)
811203b4:	1019883a 	mov	r12,r2
811203b8:	880b883a 	mov	r5,r17
811203bc:	2240010c 	andi	r9,r4,4
811203c0:	0015883a 	mov	r10,zero
811203c4:	000d883a 	mov	r6,zero
811203c8:	000f883a 	mov	r7,zero
811203cc:	03400044 	movi	r13,1
811203d0:	02ffffc4 	movi	r11,-1
811203d4:	da000117 	ldw	r8,4(sp)
811203d8:	48000d26 	beq	r9,zero,81120410 <_strtoll_r+0x148>
811203dc:	843ff404 	addi	r16,r16,-48
811203e0:	84c0110e 	bge	r16,r19,81120428 <_strtoll_r+0x160>
811203e4:	52c00426 	beq	r10,r11,811203f8 <_strtoll_r+0x130>
811203e8:	19c00236 	bltu	r3,r7,811203f4 <_strtoll_r+0x12c>
811203ec:	38c0311e 	bne	r7,r3,811204b4 <_strtoll_r+0x1ec>
811203f0:	6180302e 	bgeu	r12,r6,811204b4 <_strtoll_r+0x1ec>
811203f4:	02bfffc4 	movi	r10,-1
811203f8:	2c000003 	ldbu	r16,0(r5)
811203fc:	29400044 	addi	r5,r5,1
81120400:	9409883a 	add	r4,r18,r16
81120404:	21000043 	ldbu	r4,1(r4)
81120408:	2240010c 	andi	r9,r4,4
8112040c:	483ff31e 	bne	r9,zero,811203dc <__reset+0xfb1003dc>
81120410:	210000cc 	andi	r4,r4,3
81120414:	20000426 	beq	r4,zero,81120428 <_strtoll_r+0x160>
81120418:	23403426 	beq	r4,r13,811204ec <_strtoll_r+0x224>
8112041c:	008015c4 	movi	r2,87
81120420:	80a1c83a 	sub	r16,r16,r2
81120424:	84ffef16 	blt	r16,r19,811203e4 <__reset+0xfb1003e4>
81120428:	00bfffc4 	movi	r2,-1
8112042c:	50803426 	beq	r10,r2,81120500 <_strtoll_r+0x238>
81120430:	e0000426 	beq	fp,zero,81120444 <_strtoll_r+0x17c>
81120434:	018dc83a 	sub	r6,zero,r6
81120438:	3004c03a 	cmpne	r2,r6,zero
8112043c:	01e1c83a 	sub	r16,zero,r7
81120440:	808fc83a 	sub	r7,r16,r2
81120444:	3005883a 	mov	r2,r6
81120448:	3807883a 	mov	r3,r7
8112044c:	a8000326 	beq	r21,zero,8112045c <_strtoll_r+0x194>
81120450:	5000321e 	bne	r10,zero,8112051c <_strtoll_r+0x254>
81120454:	b00b883a 	mov	r5,r22
81120458:	a9400015 	stw	r5,0(r21)
8112045c:	dfc00c17 	ldw	ra,48(sp)
81120460:	df000b17 	ldw	fp,44(sp)
81120464:	ddc00a17 	ldw	r23,40(sp)
81120468:	dd800917 	ldw	r22,36(sp)
8112046c:	dd400817 	ldw	r21,32(sp)
81120470:	dd000717 	ldw	r20,28(sp)
81120474:	dcc00617 	ldw	r19,24(sp)
81120478:	dc800517 	ldw	r18,20(sp)
8112047c:	dc400417 	ldw	r17,16(sp)
81120480:	dc000317 	ldw	r16,12(sp)
81120484:	dec00d04 	addi	sp,sp,52
81120488:	f800283a 	ret
8112048c:	00800c04 	movi	r2,48
81120490:	80802c26 	beq	r16,r2,81120544 <_strtoll_r+0x27c>
81120494:	05000284 	movi	r20,10
81120498:	002f883a 	mov	r23,zero
8112049c:	a027883a 	mov	r19,r20
811204a0:	e03fb11e 	bne	fp,zero,81120368 <__reset+0xfb100368>
811204a4:	02a00034 	movhi	r10,32768
811204a8:	52bfffc4 	addi	r10,r10,-1
811204ac:	02ffffc4 	movi	r11,-1
811204b0:	003faf06 	br	81120370 <__reset+0xfb100370>
811204b4:	33000f26 	beq	r6,r12,811204f4 <_strtoll_r+0x22c>
811204b8:	b985383a 	mul	r2,r23,r6
811204bc:	3d0f383a 	mul	r7,r7,r20
811204c0:	3508383a 	mulxuu	r4,r6,r20
811204c4:	350d383a 	mul	r6,r6,r20
811204c8:	8013d7fa 	srai	r9,r16,31
811204cc:	388f883a 	add	r7,r7,r2
811204d0:	818d883a 	add	r6,r16,r6
811204d4:	390f883a 	add	r7,r7,r4
811204d8:	3421803a 	cmpltu	r16,r6,r16
811204dc:	49cf883a 	add	r7,r9,r7
811204e0:	81cf883a 	add	r7,r16,r7
811204e4:	02800044 	movi	r10,1
811204e8:	003fc306 	br	811203f8 <__reset+0xfb1003f8>
811204ec:	00800dc4 	movi	r2,55
811204f0:	003fcb06 	br	81120420 <__reset+0xfb100420>
811204f4:	38fff01e 	bne	r7,r3,811204b8 <__reset+0xfb1004b8>
811204f8:	443fbe16 	blt	r8,r16,811203f4 <__reset+0xfb1003f4>
811204fc:	003fee06 	br	811204b8 <__reset+0xfb1004b8>
81120500:	e0002426 	beq	fp,zero,81120594 <_strtoll_r+0x2cc>
81120504:	0005883a 	mov	r2,zero
81120508:	00e00034 	movhi	r3,32768
8112050c:	d9800017 	ldw	r6,0(sp)
81120510:	01000884 	movi	r4,34
81120514:	31000015 	stw	r4,0(r6)
81120518:	a83fd026 	beq	r21,zero,8112045c <__reset+0xfb10045c>
8112051c:	297fffc4 	addi	r5,r5,-1
81120520:	003fcd06 	br	81120458 <__reset+0xfb100458>
81120524:	1c400084 	addi	r17,r3,2
81120528:	1c000043 	ldbu	r16,1(r3)
8112052c:	07000044 	movi	fp,1
81120530:	003f8706 	br	81120350 <__reset+0xfb100350>
81120534:	1c400084 	addi	r17,r3,2
81120538:	1c000043 	ldbu	r16,1(r3)
8112053c:	0039883a 	mov	fp,zero
81120540:	003f8306 	br	81120350 <__reset+0xfb100350>
81120544:	88800003 	ldbu	r2,0(r17)
81120548:	00c01604 	movi	r3,88
8112054c:	108037cc 	andi	r2,r2,223
81120550:	10c00a26 	beq	r2,r3,8112057c <_strtoll_r+0x2b4>
81120554:	05000204 	movi	r20,8
81120558:	002f883a 	mov	r23,zero
8112055c:	a027883a 	mov	r19,r20
81120560:	003f8006 	br	81120364 <__reset+0xfb100364>
81120564:	00800c04 	movi	r2,48
81120568:	80800e1e 	bne	r16,r2,811205a4 <_strtoll_r+0x2dc>
8112056c:	88800003 	ldbu	r2,0(r17)
81120570:	00c01604 	movi	r3,88
81120574:	108037cc 	andi	r2,r2,223
81120578:	10c00a1e 	bne	r2,r3,811205a4 <_strtoll_r+0x2dc>
8112057c:	05000404 	movi	r20,16
81120580:	8c000043 	ldbu	r16,1(r17)
81120584:	002f883a 	mov	r23,zero
81120588:	8c400084 	addi	r17,r17,2
8112058c:	a027883a 	mov	r19,r20
81120590:	003f7406 	br	81120364 <__reset+0xfb100364>
81120594:	00e00034 	movhi	r3,32768
81120598:	18ffffc4 	addi	r3,r3,-1
8112059c:	5005883a 	mov	r2,r10
811205a0:	003fda06 	br	8112050c <__reset+0xfb10050c>
811205a4:	9829883a 	mov	r20,r19
811205a8:	002f883a 	mov	r23,zero
811205ac:	003f6d06 	br	81120364 <__reset+0xfb100364>

811205b0 <_strtoul_r>:
811205b0:	00a04534 	movhi	r2,33044
811205b4:	defff604 	addi	sp,sp,-40
811205b8:	108aa404 	addi	r2,r2,10896
811205bc:	de00012e 	bgeu	sp,et,811205c4 <_strtoul_r+0x14>
811205c0:	003b68fa 	trap	3
811205c4:	dc800315 	stw	r18,12(sp)
811205c8:	14800017 	ldw	r18,0(r2)
811205cc:	dd400615 	stw	r21,24(sp)
811205d0:	dd000515 	stw	r20,20(sp)
811205d4:	dcc00415 	stw	r19,16(sp)
811205d8:	2029883a 	mov	r20,r4
811205dc:	dfc00915 	stw	ra,36(sp)
811205e0:	ddc00815 	stw	r23,32(sp)
811205e4:	dd800715 	stw	r22,28(sp)
811205e8:	dc400215 	stw	r17,8(sp)
811205ec:	dc000115 	stw	r16,4(sp)
811205f0:	2827883a 	mov	r19,r5
811205f4:	382b883a 	mov	r21,r7
811205f8:	2809883a 	mov	r4,r5
811205fc:	24000003 	ldbu	r16,0(r4)
81120600:	24400044 	addi	r17,r4,1
81120604:	2007883a 	mov	r3,r4
81120608:	9405883a 	add	r2,r18,r16
8112060c:	10800043 	ldbu	r2,1(r2)
81120610:	8809883a 	mov	r4,r17
81120614:	1080020c 	andi	r2,r2,8
81120618:	103ff81e 	bne	r2,zero,811205fc <__reset+0xfb1005fc>
8112061c:	00800b44 	movi	r2,45
81120620:	80805326 	beq	r16,r2,81120770 <_strtoul_r+0x1c0>
81120624:	00800ac4 	movi	r2,43
81120628:	80805526 	beq	r16,r2,81120780 <_strtoul_r+0x1d0>
8112062c:	002f883a 	mov	r23,zero
81120630:	a8000f26 	beq	r21,zero,81120670 <_strtoul_r+0xc0>
81120634:	00800404 	movi	r2,16
81120638:	a8805f26 	beq	r21,r2,811207b8 <_strtoul_r+0x208>
8112063c:	013fffc4 	movi	r4,-1
81120640:	a80b883a 	mov	r5,r21
81120644:	d9800015 	stw	r6,0(sp)
81120648:	112569c0 	call	8112569c <__udivsi3>
8112064c:	a80b883a 	mov	r5,r21
81120650:	013fffc4 	movi	r4,-1
81120654:	102d883a 	mov	r22,r2
81120658:	11257000 	call	81125700 <__umodsi3>
8112065c:	d9800017 	ldw	r6,0(sp)
81120660:	1019883a 	mov	r12,r2
81120664:	a817883a 	mov	r11,r21
81120668:	b00f883a 	mov	r7,r22
8112066c:	00000706 	br	8112068c <_strtoul_r+0xdc>
81120670:	00800c04 	movi	r2,48
81120674:	80804626 	beq	r16,r2,81120790 <_strtoul_r+0x1e0>
81120678:	05400284 	movi	r21,10
8112067c:	01c666b4 	movhi	r7,6554
81120680:	03000144 	movi	r12,5
81120684:	39e66644 	addi	r7,r7,-26215
81120688:	a817883a 	mov	r11,r21
8112068c:	9407883a 	add	r3,r18,r16
81120690:	18c00043 	ldbu	r3,1(r3)
81120694:	8809883a 	mov	r4,r17
81120698:	0011883a 	mov	r8,zero
8112069c:	1940010c 	andi	r5,r3,4
811206a0:	0005883a 	mov	r2,zero
811206a4:	02800044 	movi	r10,1
811206a8:	027fffc4 	movi	r9,-1
811206ac:	28000e26 	beq	r5,zero,811206e8 <_strtoul_r+0x138>
811206b0:	843ff404 	addi	r16,r16,-48
811206b4:	8540120e 	bge	r16,r21,81120700 <_strtoul_r+0x150>
811206b8:	42400526 	beq	r8,r9,811206d0 <_strtoul_r+0x120>
811206bc:	38802236 	bltu	r7,r2,81120748 <_strtoul_r+0x198>
811206c0:	11c02026 	beq	r2,r7,81120744 <_strtoul_r+0x194>
811206c4:	12c5383a 	mul	r2,r2,r11
811206c8:	02000044 	movi	r8,1
811206cc:	8085883a 	add	r2,r16,r2
811206d0:	24000003 	ldbu	r16,0(r4)
811206d4:	21000044 	addi	r4,r4,1
811206d8:	9407883a 	add	r3,r18,r16
811206dc:	18c00043 	ldbu	r3,1(r3)
811206e0:	1940010c 	andi	r5,r3,4
811206e4:	283ff21e 	bne	r5,zero,811206b0 <__reset+0xfb1006b0>
811206e8:	18c000cc 	andi	r3,r3,3
811206ec:	18000426 	beq	r3,zero,81120700 <_strtoul_r+0x150>
811206f0:	1a801726 	beq	r3,r10,81120750 <_strtoul_r+0x1a0>
811206f4:	00c015c4 	movi	r3,87
811206f8:	80e1c83a 	sub	r16,r16,r3
811206fc:	857fee16 	blt	r16,r21,811206b8 <__reset+0xfb1006b8>
81120700:	40001516 	blt	r8,zero,81120758 <_strtoul_r+0x1a8>
81120704:	b8000126 	beq	r23,zero,8112070c <_strtoul_r+0x15c>
81120708:	0085c83a 	sub	r2,zero,r2
8112070c:	30000226 	beq	r6,zero,81120718 <_strtoul_r+0x168>
81120710:	4000151e 	bne	r8,zero,81120768 <_strtoul_r+0x1b8>
81120714:	34c00015 	stw	r19,0(r6)
81120718:	dfc00917 	ldw	ra,36(sp)
8112071c:	ddc00817 	ldw	r23,32(sp)
81120720:	dd800717 	ldw	r22,28(sp)
81120724:	dd400617 	ldw	r21,24(sp)
81120728:	dd000517 	ldw	r20,20(sp)
8112072c:	dcc00417 	ldw	r19,16(sp)
81120730:	dc800317 	ldw	r18,12(sp)
81120734:	dc400217 	ldw	r17,8(sp)
81120738:	dc000117 	ldw	r16,4(sp)
8112073c:	dec00a04 	addi	sp,sp,40
81120740:	f800283a 	ret
81120744:	643fdf0e 	bge	r12,r16,811206c4 <__reset+0xfb1006c4>
81120748:	023fffc4 	movi	r8,-1
8112074c:	003fe006 	br	811206d0 <__reset+0xfb1006d0>
81120750:	00c00dc4 	movi	r3,55
81120754:	003fe806 	br	811206f8 <__reset+0xfb1006f8>
81120758:	00800884 	movi	r2,34
8112075c:	a0800015 	stw	r2,0(r20)
81120760:	00bfffc4 	movi	r2,-1
81120764:	303fec26 	beq	r6,zero,81120718 <__reset+0xfb100718>
81120768:	24ffffc4 	addi	r19,r4,-1
8112076c:	003fe906 	br	81120714 <__reset+0xfb100714>
81120770:	1c400084 	addi	r17,r3,2
81120774:	1c000043 	ldbu	r16,1(r3)
81120778:	05c00044 	movi	r23,1
8112077c:	003fac06 	br	81120630 <__reset+0xfb100630>
81120780:	1c400084 	addi	r17,r3,2
81120784:	1c000043 	ldbu	r16,1(r3)
81120788:	002f883a 	mov	r23,zero
8112078c:	003fa806 	br	81120630 <__reset+0xfb100630>
81120790:	88800003 	ldbu	r2,0(r17)
81120794:	00c01604 	movi	r3,88
81120798:	108037cc 	andi	r2,r2,223
8112079c:	10c00c26 	beq	r2,r3,811207d0 <_strtoul_r+0x220>
811207a0:	05400204 	movi	r21,8
811207a4:	01c80034 	movhi	r7,8192
811207a8:	030001c4 	movi	r12,7
811207ac:	39ffffc4 	addi	r7,r7,-1
811207b0:	a817883a 	mov	r11,r21
811207b4:	003fb506 	br	8112068c <__reset+0xfb10068c>
811207b8:	00800c04 	movi	r2,48
811207bc:	80800c1e 	bne	r16,r2,811207f0 <_strtoul_r+0x240>
811207c0:	88800003 	ldbu	r2,0(r17)
811207c4:	00c01604 	movi	r3,88
811207c8:	108037cc 	andi	r2,r2,223
811207cc:	10c0081e 	bne	r2,r3,811207f0 <_strtoul_r+0x240>
811207d0:	02c00404 	movi	r11,16
811207d4:	05840034 	movhi	r22,4096
811207d8:	8c000043 	ldbu	r16,1(r17)
811207dc:	030003c4 	movi	r12,15
811207e0:	8c400084 	addi	r17,r17,2
811207e4:	b5bfffc4 	addi	r22,r22,-1
811207e8:	582b883a 	mov	r21,r11
811207ec:	003f9e06 	br	81120668 <__reset+0xfb100668>
811207f0:	01c40034 	movhi	r7,4096
811207f4:	030003c4 	movi	r12,15
811207f8:	39ffffc4 	addi	r7,r7,-1
811207fc:	a817883a 	mov	r11,r21
81120800:	003fa206 	br	8112068c <__reset+0xfb10068c>

81120804 <strtoul>:
81120804:	00a04534 	movhi	r2,33044
81120808:	108aa604 	addi	r2,r2,10904
8112080c:	300f883a 	mov	r7,r6
81120810:	280d883a 	mov	r6,r5
81120814:	200b883a 	mov	r5,r4
81120818:	11000017 	ldw	r4,0(r2)
8112081c:	11205b01 	jmpi	811205b0 <_strtoul_r>

81120820 <_strtoull_r>:
81120820:	00a04534 	movhi	r2,33044
81120824:	defff404 	addi	sp,sp,-48
81120828:	108aa404 	addi	r2,r2,10896
8112082c:	de00012e 	bgeu	sp,et,81120834 <_strtoull_r+0x14>
81120830:	003b68fa 	trap	3
81120834:	dc400315 	stw	r17,12(sp)
81120838:	14400017 	ldw	r17,0(r2)
8112083c:	dd400715 	stw	r21,28(sp)
81120840:	dd000615 	stw	r20,24(sp)
81120844:	dcc00515 	stw	r19,20(sp)
81120848:	dc800415 	stw	r18,16(sp)
8112084c:	dfc00b15 	stw	ra,44(sp)
81120850:	df000a15 	stw	fp,40(sp)
81120854:	ddc00915 	stw	r23,36(sp)
81120858:	dd800815 	stw	r22,32(sp)
8112085c:	dc000215 	stw	r16,8(sp)
81120860:	2827883a 	mov	r19,r5
81120864:	202b883a 	mov	r21,r4
81120868:	3029883a 	mov	r20,r6
8112086c:	3825883a 	mov	r18,r7
81120870:	2807883a 	mov	r3,r5
81120874:	1c000003 	ldbu	r16,0(r3)
81120878:	1f000044 	addi	fp,r3,1
8112087c:	1809883a 	mov	r4,r3
81120880:	8c05883a 	add	r2,r17,r16
81120884:	10800043 	ldbu	r2,1(r2)
81120888:	e007883a 	mov	r3,fp
8112088c:	1080020c 	andi	r2,r2,8
81120890:	103ff81e 	bne	r2,zero,81120874 <__reset+0xfb100874>
81120894:	00800b44 	movi	r2,45
81120898:	80806e26 	beq	r16,r2,81120a54 <_strtoull_r+0x234>
8112089c:	00800ac4 	movi	r2,43
811208a0:	80807026 	beq	r16,r2,81120a64 <_strtoull_r+0x244>
811208a4:	002f883a 	mov	r23,zero
811208a8:	90001426 	beq	r18,zero,811208fc <_strtoull_r+0xdc>
811208ac:	00800404 	movi	r2,16
811208b0:	90807c26 	beq	r18,r2,81120aa4 <_strtoull_r+0x284>
811208b4:	902dd7fa 	srai	r22,r18,31
811208b8:	013fffc4 	movi	r4,-1
811208bc:	200b883a 	mov	r5,r4
811208c0:	900d883a 	mov	r6,r18
811208c4:	b00f883a 	mov	r7,r22
811208c8:	1124ae40 	call	81124ae4 <__udivdi3>
811208cc:	013fffc4 	movi	r4,-1
811208d0:	900d883a 	mov	r6,r18
811208d4:	b00f883a 	mov	r7,r22
811208d8:	200b883a 	mov	r5,r4
811208dc:	d8c00115 	stw	r3,4(sp)
811208e0:	d8800015 	stw	r2,0(sp)
811208e4:	11250640 	call	81125064 <__umoddi3>
811208e8:	101b883a 	mov	r13,r2
811208ec:	9015883a 	mov	r10,r18
811208f0:	dac00017 	ldw	r11,0(sp)
811208f4:	da000117 	ldw	r8,4(sp)
811208f8:	00000a06 	br	81120924 <_strtoull_r+0x104>
811208fc:	00800c04 	movi	r2,48
81120900:	80805c26 	beq	r16,r2,81120a74 <_strtoull_r+0x254>
81120904:	02800284 	movi	r10,10
81120908:	02e666b4 	movhi	r11,39322
8112090c:	020666b4 	movhi	r8,6554
81120910:	03400144 	movi	r13,5
81120914:	5ae66644 	addi	r11,r11,-26215
81120918:	42266644 	addi	r8,r8,-26215
8112091c:	002d883a 	mov	r22,zero
81120920:	5025883a 	mov	r18,r10
81120924:	8c0b883a 	add	r5,r17,r16
81120928:	29400043 	ldbu	r5,1(r5)
8112092c:	e009883a 	mov	r4,fp
81120930:	000f883a 	mov	r7,zero
81120934:	2980010c 	andi	r6,r5,4
81120938:	0005883a 	mov	r2,zero
8112093c:	0007883a 	mov	r3,zero
81120940:	03000044 	movi	r12,1
81120944:	027fffc4 	movi	r9,-1
81120948:	30000d26 	beq	r6,zero,81120980 <_strtoull_r+0x160>
8112094c:	843ff404 	addi	r16,r16,-48
81120950:	8480110e 	bge	r16,r18,81120998 <_strtoull_r+0x178>
81120954:	3a400426 	beq	r7,r9,81120968 <_strtoull_r+0x148>
81120958:	40c00236 	bltu	r8,r3,81120964 <_strtoull_r+0x144>
8112095c:	1a00231e 	bne	r3,r8,811209ec <_strtoull_r+0x1cc>
81120960:	5880222e 	bgeu	r11,r2,811209ec <_strtoull_r+0x1cc>
81120964:	01ffffc4 	movi	r7,-1
81120968:	24000003 	ldbu	r16,0(r4)
8112096c:	21000044 	addi	r4,r4,1
81120970:	8c0b883a 	add	r5,r17,r16
81120974:	29400043 	ldbu	r5,1(r5)
81120978:	2980010c 	andi	r6,r5,4
8112097c:	303ff31e 	bne	r6,zero,8112094c <__reset+0xfb10094c>
81120980:	294000cc 	andi	r5,r5,3
81120984:	28000426 	beq	r5,zero,81120998 <_strtoull_r+0x178>
81120988:	2b002626 	beq	r5,r12,81120a24 <_strtoull_r+0x204>
8112098c:	014015c4 	movi	r5,87
81120990:	8161c83a 	sub	r16,r16,r5
81120994:	84bfef16 	blt	r16,r18,81120954 <__reset+0xfb100954>
81120998:	38002716 	blt	r7,zero,81120a38 <_strtoull_r+0x218>
8112099c:	b8000426 	beq	r23,zero,811209b0 <_strtoull_r+0x190>
811209a0:	0085c83a 	sub	r2,zero,r2
811209a4:	100ac03a 	cmpne	r5,r2,zero
811209a8:	00e1c83a 	sub	r16,zero,r3
811209ac:	8147c83a 	sub	r3,r16,r5
811209b0:	a0000226 	beq	r20,zero,811209bc <_strtoull_r+0x19c>
811209b4:	3800251e 	bne	r7,zero,81120a4c <_strtoull_r+0x22c>
811209b8:	a4c00015 	stw	r19,0(r20)
811209bc:	dfc00b17 	ldw	ra,44(sp)
811209c0:	df000a17 	ldw	fp,40(sp)
811209c4:	ddc00917 	ldw	r23,36(sp)
811209c8:	dd800817 	ldw	r22,32(sp)
811209cc:	dd400717 	ldw	r21,28(sp)
811209d0:	dd000617 	ldw	r20,24(sp)
811209d4:	dcc00517 	ldw	r19,20(sp)
811209d8:	dc800417 	ldw	r18,16(sp)
811209dc:	dc400317 	ldw	r17,12(sp)
811209e0:	dc000217 	ldw	r16,8(sp)
811209e4:	dec00c04 	addi	sp,sp,48
811209e8:	f800283a 	ret
811209ec:	12c00f26 	beq	r2,r11,81120a2c <_strtoull_r+0x20c>
811209f0:	b08d383a 	mul	r6,r22,r2
811209f4:	1a87383a 	mul	r3,r3,r10
811209f8:	128a383a 	mulxuu	r5,r2,r10
811209fc:	1285383a 	mul	r2,r2,r10
81120a00:	800fd7fa 	srai	r7,r16,31
81120a04:	1987883a 	add	r3,r3,r6
81120a08:	8085883a 	add	r2,r16,r2
81120a0c:	1947883a 	add	r3,r3,r5
81120a10:	38c7883a 	add	r3,r7,r3
81120a14:	1421803a 	cmpltu	r16,r2,r16
81120a18:	80c7883a 	add	r3,r16,r3
81120a1c:	01c00044 	movi	r7,1
81120a20:	003fd106 	br	81120968 <__reset+0xfb100968>
81120a24:	01400dc4 	movi	r5,55
81120a28:	003fd906 	br	81120990 <__reset+0xfb100990>
81120a2c:	1a3ff01e 	bne	r3,r8,811209f0 <__reset+0xfb1009f0>
81120a30:	6c3fcc16 	blt	r13,r16,81120964 <__reset+0xfb100964>
81120a34:	003fee06 	br	811209f0 <__reset+0xfb1009f0>
81120a38:	00800884 	movi	r2,34
81120a3c:	a8800015 	stw	r2,0(r21)
81120a40:	00bfffc4 	movi	r2,-1
81120a44:	1007883a 	mov	r3,r2
81120a48:	a03fdc26 	beq	r20,zero,811209bc <__reset+0xfb1009bc>
81120a4c:	24ffffc4 	addi	r19,r4,-1
81120a50:	003fd906 	br	811209b8 <__reset+0xfb1009b8>
81120a54:	27000084 	addi	fp,r4,2
81120a58:	24000043 	ldbu	r16,1(r4)
81120a5c:	05c00044 	movi	r23,1
81120a60:	003f9106 	br	811208a8 <__reset+0xfb1008a8>
81120a64:	27000084 	addi	fp,r4,2
81120a68:	24000043 	ldbu	r16,1(r4)
81120a6c:	002f883a 	mov	r23,zero
81120a70:	003f8d06 	br	811208a8 <__reset+0xfb1008a8>
81120a74:	e0800003 	ldbu	r2,0(fp)
81120a78:	00c01604 	movi	r3,88
81120a7c:	108037cc 	andi	r2,r2,223
81120a80:	10c00e26 	beq	r2,r3,81120abc <_strtoull_r+0x29c>
81120a84:	02800204 	movi	r10,8
81120a88:	02ffffc4 	movi	r11,-1
81120a8c:	02080034 	movhi	r8,8192
81120a90:	034001c4 	movi	r13,7
81120a94:	42d1883a 	add	r8,r8,r11
81120a98:	002d883a 	mov	r22,zero
81120a9c:	5025883a 	mov	r18,r10
81120aa0:	003fa006 	br	81120924 <__reset+0xfb100924>
81120aa4:	00800c04 	movi	r2,48
81120aa8:	80800e1e 	bne	r16,r2,81120ae4 <_strtoull_r+0x2c4>
81120aac:	e0800003 	ldbu	r2,0(fp)
81120ab0:	00c01604 	movi	r3,88
81120ab4:	108037cc 	andi	r2,r2,223
81120ab8:	10c00a1e 	bne	r2,r3,81120ae4 <_strtoull_r+0x2c4>
81120abc:	02800404 	movi	r10,16
81120ac0:	02ffffc4 	movi	r11,-1
81120ac4:	02040034 	movhi	r8,4096
81120ac8:	e4000043 	ldbu	r16,1(fp)
81120acc:	034003c4 	movi	r13,15
81120ad0:	e7000084 	addi	fp,fp,2
81120ad4:	42d1883a 	add	r8,r8,r11
81120ad8:	002d883a 	mov	r22,zero
81120adc:	5025883a 	mov	r18,r10
81120ae0:	003f9006 	br	81120924 <__reset+0xfb100924>
81120ae4:	02ffffc4 	movi	r11,-1
81120ae8:	02040034 	movhi	r8,4096
81120aec:	034003c4 	movi	r13,15
81120af0:	42d1883a 	add	r8,r8,r11
81120af4:	9015883a 	mov	r10,r18
81120af8:	002d883a 	mov	r22,zero
81120afc:	003f8906 	br	81120924 <__reset+0xfb100924>

81120b00 <__ssprint_r>:
81120b00:	defff604 	addi	sp,sp,-40
81120b04:	de00012e 	bgeu	sp,et,81120b0c <__ssprint_r+0xc>
81120b08:	003b68fa 	trap	3
81120b0c:	30800217 	ldw	r2,8(r6)
81120b10:	dc800215 	stw	r18,8(sp)
81120b14:	dfc00915 	stw	ra,36(sp)
81120b18:	df000815 	stw	fp,32(sp)
81120b1c:	ddc00715 	stw	r23,28(sp)
81120b20:	dd800615 	stw	r22,24(sp)
81120b24:	dd400515 	stw	r21,20(sp)
81120b28:	dd000415 	stw	r20,16(sp)
81120b2c:	dcc00315 	stw	r19,12(sp)
81120b30:	dc400115 	stw	r17,4(sp)
81120b34:	dc000015 	stw	r16,0(sp)
81120b38:	3025883a 	mov	r18,r6
81120b3c:	10005826 	beq	r2,zero,81120ca0 <__ssprint_r+0x1a0>
81120b40:	2027883a 	mov	r19,r4
81120b44:	35c00017 	ldw	r23,0(r6)
81120b48:	29000017 	ldw	r4,0(r5)
81120b4c:	28800217 	ldw	r2,8(r5)
81120b50:	2823883a 	mov	r17,r5
81120b54:	0039883a 	mov	fp,zero
81120b58:	0021883a 	mov	r16,zero
81120b5c:	80003926 	beq	r16,zero,81120c44 <__ssprint_r+0x144>
81120b60:	102b883a 	mov	r21,r2
81120b64:	102d883a 	mov	r22,r2
81120b68:	80803a36 	bltu	r16,r2,81120c54 <__ssprint_r+0x154>
81120b6c:	88c0030b 	ldhu	r3,12(r17)
81120b70:	1881200c 	andi	r2,r3,1152
81120b74:	10002626 	beq	r2,zero,81120c10 <__ssprint_r+0x110>
81120b78:	88800517 	ldw	r2,20(r17)
81120b7c:	89400417 	ldw	r5,16(r17)
81120b80:	81800044 	addi	r6,r16,1
81120b84:	108f883a 	add	r7,r2,r2
81120b88:	3885883a 	add	r2,r7,r2
81120b8c:	100ed7fa 	srli	r7,r2,31
81120b90:	216dc83a 	sub	r22,r4,r5
81120b94:	3589883a 	add	r4,r6,r22
81120b98:	3885883a 	add	r2,r7,r2
81120b9c:	102bd07a 	srai	r21,r2,1
81120ba0:	a80d883a 	mov	r6,r21
81120ba4:	a900022e 	bgeu	r21,r4,81120bb0 <__ssprint_r+0xb0>
81120ba8:	202b883a 	mov	r21,r4
81120bac:	200d883a 	mov	r6,r4
81120bb0:	18c1000c 	andi	r3,r3,1024
81120bb4:	18002a26 	beq	r3,zero,81120c60 <__ssprint_r+0x160>
81120bb8:	300b883a 	mov	r5,r6
81120bbc:	9809883a 	mov	r4,r19
81120bc0:	11128a00 	call	811128a0 <_malloc_r>
81120bc4:	1029883a 	mov	r20,r2
81120bc8:	10002c26 	beq	r2,zero,81120c7c <__ssprint_r+0x17c>
81120bcc:	89400417 	ldw	r5,16(r17)
81120bd0:	b00d883a 	mov	r6,r22
81120bd4:	1009883a 	mov	r4,r2
81120bd8:	11130b40 	call	811130b4 <memcpy>
81120bdc:	8880030b 	ldhu	r2,12(r17)
81120be0:	00fedfc4 	movi	r3,-1153
81120be4:	10c4703a 	and	r2,r2,r3
81120be8:	10802014 	ori	r2,r2,128
81120bec:	8880030d 	sth	r2,12(r17)
81120bf0:	a589883a 	add	r4,r20,r22
81120bf4:	adadc83a 	sub	r22,r21,r22
81120bf8:	8d400515 	stw	r21,20(r17)
81120bfc:	8d800215 	stw	r22,8(r17)
81120c00:	8d000415 	stw	r20,16(r17)
81120c04:	89000015 	stw	r4,0(r17)
81120c08:	802b883a 	mov	r21,r16
81120c0c:	802d883a 	mov	r22,r16
81120c10:	b00d883a 	mov	r6,r22
81120c14:	e00b883a 	mov	r5,fp
81120c18:	111d1880 	call	8111d188 <memmove>
81120c1c:	88800217 	ldw	r2,8(r17)
81120c20:	89000017 	ldw	r4,0(r17)
81120c24:	90c00217 	ldw	r3,8(r18)
81120c28:	1545c83a 	sub	r2,r2,r21
81120c2c:	2589883a 	add	r4,r4,r22
81120c30:	88800215 	stw	r2,8(r17)
81120c34:	89000015 	stw	r4,0(r17)
81120c38:	1c21c83a 	sub	r16,r3,r16
81120c3c:	94000215 	stw	r16,8(r18)
81120c40:	80001726 	beq	r16,zero,81120ca0 <__ssprint_r+0x1a0>
81120c44:	bf000017 	ldw	fp,0(r23)
81120c48:	bc000117 	ldw	r16,4(r23)
81120c4c:	bdc00204 	addi	r23,r23,8
81120c50:	003fc206 	br	81120b5c <__reset+0xfb100b5c>
81120c54:	802b883a 	mov	r21,r16
81120c58:	802d883a 	mov	r22,r16
81120c5c:	003fec06 	br	81120c10 <__reset+0xfb100c10>
81120c60:	9809883a 	mov	r4,r19
81120c64:	111e3a80 	call	8111e3a8 <_realloc_r>
81120c68:	1029883a 	mov	r20,r2
81120c6c:	103fe01e 	bne	r2,zero,81120bf0 <__reset+0xfb100bf0>
81120c70:	89400417 	ldw	r5,16(r17)
81120c74:	9809883a 	mov	r4,r19
81120c78:	111c3140 	call	8111c314 <_free_r>
81120c7c:	88c0030b 	ldhu	r3,12(r17)
81120c80:	00800304 	movi	r2,12
81120c84:	98800015 	stw	r2,0(r19)
81120c88:	18c01014 	ori	r3,r3,64
81120c8c:	88c0030d 	sth	r3,12(r17)
81120c90:	00bfffc4 	movi	r2,-1
81120c94:	90000215 	stw	zero,8(r18)
81120c98:	90000115 	stw	zero,4(r18)
81120c9c:	00000206 	br	81120ca8 <__ssprint_r+0x1a8>
81120ca0:	90000115 	stw	zero,4(r18)
81120ca4:	0005883a 	mov	r2,zero
81120ca8:	dfc00917 	ldw	ra,36(sp)
81120cac:	df000817 	ldw	fp,32(sp)
81120cb0:	ddc00717 	ldw	r23,28(sp)
81120cb4:	dd800617 	ldw	r22,24(sp)
81120cb8:	dd400517 	ldw	r21,20(sp)
81120cbc:	dd000417 	ldw	r20,16(sp)
81120cc0:	dcc00317 	ldw	r19,12(sp)
81120cc4:	dc800217 	ldw	r18,8(sp)
81120cc8:	dc400117 	ldw	r17,4(sp)
81120ccc:	dc000017 	ldw	r16,0(sp)
81120cd0:	dec00a04 	addi	sp,sp,40
81120cd4:	f800283a 	ret

81120cd8 <___svfiprintf_internal_r>:
81120cd8:	deffc804 	addi	sp,sp,-224
81120cdc:	de00012e 	bgeu	sp,et,81120ce4 <___svfiprintf_internal_r+0xc>
81120ce0:	003b68fa 	trap	3
81120ce4:	2880030b 	ldhu	r2,12(r5)
81120ce8:	dcc03115 	stw	r19,196(sp)
81120cec:	dfc03715 	stw	ra,220(sp)
81120cf0:	df003615 	stw	fp,216(sp)
81120cf4:	ddc03515 	stw	r23,212(sp)
81120cf8:	dd803415 	stw	r22,208(sp)
81120cfc:	dd403315 	stw	r21,204(sp)
81120d00:	dd003215 	stw	r20,200(sp)
81120d04:	dc803015 	stw	r18,192(sp)
81120d08:	dc402f15 	stw	r17,188(sp)
81120d0c:	dc002e15 	stw	r16,184(sp)
81120d10:	d9402715 	stw	r5,156(sp)
81120d14:	d9002a15 	stw	r4,168(sp)
81120d18:	1080200c 	andi	r2,r2,128
81120d1c:	d9c02315 	stw	r7,140(sp)
81120d20:	3027883a 	mov	r19,r6
81120d24:	10000226 	beq	r2,zero,81120d30 <___svfiprintf_internal_r+0x58>
81120d28:	28800417 	ldw	r2,16(r5)
81120d2c:	10041d26 	beq	r2,zero,81121da4 <___svfiprintf_internal_r+0x10cc>
81120d30:	dac01a04 	addi	r11,sp,104
81120d34:	dac01e15 	stw	r11,120(sp)
81120d38:	d8801e17 	ldw	r2,120(sp)
81120d3c:	dac019c4 	addi	r11,sp,103
81120d40:	dd402a17 	ldw	r21,168(sp)
81120d44:	ddc02717 	ldw	r23,156(sp)
81120d48:	05a04534 	movhi	r22,33044
81120d4c:	05204534 	movhi	r20,33044
81120d50:	dac01f15 	stw	r11,124(sp)
81120d54:	12d7c83a 	sub	r11,r2,r11
81120d58:	b5815204 	addi	r22,r22,1352
81120d5c:	a5014e04 	addi	r20,r20,1336
81120d60:	dec01a15 	stw	sp,104(sp)
81120d64:	d8001c15 	stw	zero,112(sp)
81120d68:	d8001b15 	stw	zero,108(sp)
81120d6c:	d811883a 	mov	r8,sp
81120d70:	d8002915 	stw	zero,164(sp)
81120d74:	d8002515 	stw	zero,148(sp)
81120d78:	dac02b15 	stw	r11,172(sp)
81120d7c:	98800007 	ldb	r2,0(r19)
81120d80:	1002dd26 	beq	r2,zero,811218f8 <___svfiprintf_internal_r+0xc20>
81120d84:	00c00944 	movi	r3,37
81120d88:	9823883a 	mov	r17,r19
81120d8c:	10c0021e 	bne	r2,r3,81120d98 <___svfiprintf_internal_r+0xc0>
81120d90:	00001406 	br	81120de4 <___svfiprintf_internal_r+0x10c>
81120d94:	10c00326 	beq	r2,r3,81120da4 <___svfiprintf_internal_r+0xcc>
81120d98:	8c400044 	addi	r17,r17,1
81120d9c:	88800007 	ldb	r2,0(r17)
81120da0:	103ffc1e 	bne	r2,zero,81120d94 <__reset+0xfb100d94>
81120da4:	8ce1c83a 	sub	r16,r17,r19
81120da8:	80000e26 	beq	r16,zero,81120de4 <___svfiprintf_internal_r+0x10c>
81120dac:	d8c01c17 	ldw	r3,112(sp)
81120db0:	d8801b17 	ldw	r2,108(sp)
81120db4:	44c00015 	stw	r19,0(r8)
81120db8:	1c07883a 	add	r3,r3,r16
81120dbc:	10800044 	addi	r2,r2,1
81120dc0:	d8c01c15 	stw	r3,112(sp)
81120dc4:	44000115 	stw	r16,4(r8)
81120dc8:	d8801b15 	stw	r2,108(sp)
81120dcc:	00c001c4 	movi	r3,7
81120dd0:	18831e16 	blt	r3,r2,81121a4c <___svfiprintf_internal_r+0xd74>
81120dd4:	42000204 	addi	r8,r8,8
81120dd8:	dac02517 	ldw	r11,148(sp)
81120ddc:	5c17883a 	add	r11,r11,r16
81120de0:	dac02515 	stw	r11,148(sp)
81120de4:	88800007 	ldb	r2,0(r17)
81120de8:	1002c526 	beq	r2,zero,81121900 <___svfiprintf_internal_r+0xc28>
81120dec:	88c00047 	ldb	r3,1(r17)
81120df0:	8cc00044 	addi	r19,r17,1
81120df4:	d8001d85 	stb	zero,118(sp)
81120df8:	0009883a 	mov	r4,zero
81120dfc:	000f883a 	mov	r7,zero
81120e00:	043fffc4 	movi	r16,-1
81120e04:	d8002415 	stw	zero,144(sp)
81120e08:	0025883a 	mov	r18,zero
81120e0c:	01401604 	movi	r5,88
81120e10:	01800244 	movi	r6,9
81120e14:	02800a84 	movi	r10,42
81120e18:	02401b04 	movi	r9,108
81120e1c:	9cc00044 	addi	r19,r19,1
81120e20:	18bff804 	addi	r2,r3,-32
81120e24:	2881dd36 	bltu	r5,r2,8112159c <___svfiprintf_internal_r+0x8c4>
81120e28:	100490ba 	slli	r2,r2,2
81120e2c:	02e044b4 	movhi	r11,33042
81120e30:	5ac39004 	addi	r11,r11,3648
81120e34:	12c5883a 	add	r2,r2,r11
81120e38:	10800017 	ldw	r2,0(r2)
81120e3c:	1000683a 	jmp	r2
81120e40:	8112103c 	xorhi	r4,r16,18496
81120e44:	8112159c 	xori	r4,r16,18518
81120e48:	8112159c 	xori	r4,r16,18518
81120e4c:	81121030 	cmpltui	r4,r16,18496
81120e50:	8112159c 	xori	r4,r16,18518
81120e54:	8112159c 	xori	r4,r16,18518
81120e58:	8112159c 	xori	r4,r16,18518
81120e5c:	8112159c 	xori	r4,r16,18518
81120e60:	8112159c 	xori	r4,r16,18518
81120e64:	8112159c 	xori	r4,r16,18518
81120e68:	81120fa4 	muli	r4,r16,18494
81120e6c:	81121180 	call	88112118 <__reset+0x20f2118>
81120e70:	8112159c 	xori	r4,r16,18518
81120e74:	81120fd0 	cmplti	r4,r16,18495
81120e78:	811215d0 	cmplti	r4,r16,18519
81120e7c:	8112159c 	xori	r4,r16,18518
81120e80:	811215c4 	addi	r4,r16,18519
81120e84:	81121564 	muli	r4,r16,18517
81120e88:	81121564 	muli	r4,r16,18517
81120e8c:	81121564 	muli	r4,r16,18517
81120e90:	81121564 	muli	r4,r16,18517
81120e94:	81121564 	muli	r4,r16,18517
81120e98:	81121564 	muli	r4,r16,18517
81120e9c:	81121564 	muli	r4,r16,18517
81120ea0:	81121564 	muli	r4,r16,18517
81120ea4:	81121564 	muli	r4,r16,18517
81120ea8:	8112159c 	xori	r4,r16,18518
81120eac:	8112159c 	xori	r4,r16,18518
81120eb0:	8112159c 	xori	r4,r16,18518
81120eb4:	8112159c 	xori	r4,r16,18518
81120eb8:	8112159c 	xori	r4,r16,18518
81120ebc:	8112159c 	xori	r4,r16,18518
81120ec0:	8112159c 	xori	r4,r16,18518
81120ec4:	8112159c 	xori	r4,r16,18518
81120ec8:	8112159c 	xori	r4,r16,18518
81120ecc:	8112159c 	xori	r4,r16,18518
81120ed0:	81121500 	call	88112150 <__reset+0x20f2150>
81120ed4:	8112159c 	xori	r4,r16,18518
81120ed8:	8112159c 	xori	r4,r16,18518
81120edc:	8112159c 	xori	r4,r16,18518
81120ee0:	8112159c 	xori	r4,r16,18518
81120ee4:	8112159c 	xori	r4,r16,18518
81120ee8:	8112159c 	xori	r4,r16,18518
81120eec:	8112159c 	xori	r4,r16,18518
81120ef0:	8112159c 	xori	r4,r16,18518
81120ef4:	8112159c 	xori	r4,r16,18518
81120ef8:	8112159c 	xori	r4,r16,18518
81120efc:	81121678 	rdprs	r4,r16,18521
81120f00:	8112159c 	xori	r4,r16,18518
81120f04:	8112159c 	xori	r4,r16,18518
81120f08:	8112159c 	xori	r4,r16,18518
81120f0c:	8112159c 	xori	r4,r16,18518
81120f10:	8112159c 	xori	r4,r16,18518
81120f14:	81121610 	cmplti	r4,r16,18520
81120f18:	8112159c 	xori	r4,r16,18518
81120f1c:	8112159c 	xori	r4,r16,18518
81120f20:	81121344 	addi	r4,r16,18509
81120f24:	8112159c 	xori	r4,r16,18518
81120f28:	8112159c 	xori	r4,r16,18518
81120f2c:	8112159c 	xori	r4,r16,18518
81120f30:	8112159c 	xori	r4,r16,18518
81120f34:	8112159c 	xori	r4,r16,18518
81120f38:	8112159c 	xori	r4,r16,18518
81120f3c:	8112159c 	xori	r4,r16,18518
81120f40:	8112159c 	xori	r4,r16,18518
81120f44:	8112159c 	xori	r4,r16,18518
81120f48:	8112159c 	xori	r4,r16,18518
81120f4c:	81121234 	orhi	r4,r16,18504
81120f50:	811213e0 	cmpeqi	r4,r16,18511
81120f54:	8112159c 	xori	r4,r16,18518
81120f58:	8112159c 	xori	r4,r16,18518
81120f5c:	8112159c 	xori	r4,r16,18518
81120f60:	811213d4 	ori	r4,r16,18511
81120f64:	811213e0 	cmpeqi	r4,r16,18511
81120f68:	8112159c 	xori	r4,r16,18518
81120f6c:	8112159c 	xori	r4,r16,18518
81120f70:	811213c4 	addi	r4,r16,18511
81120f74:	8112159c 	xori	r4,r16,18518
81120f78:	81121388 	cmpgei	r4,r16,18510
81120f7c:	81121190 	cmplti	r4,r16,18502
81120f80:	81120fdc 	xori	r4,r16,18495
81120f84:	811214f4 	orhi	r4,r16,18515
81120f88:	8112159c 	xori	r4,r16,18518
81120f8c:	811214a8 	cmpgeui	r4,r16,18514
81120f90:	8112159c 	xori	r4,r16,18518
81120f94:	81121100 	call	88112110 <__reset+0x20f2110>
81120f98:	8112159c 	xori	r4,r16,18518
81120f9c:	8112159c 	xori	r4,r16,18518
81120fa0:	8112105c 	xori	r4,r16,18497
81120fa4:	dac02317 	ldw	r11,140(sp)
81120fa8:	5ac00017 	ldw	r11,0(r11)
81120fac:	dac02415 	stw	r11,144(sp)
81120fb0:	dac02317 	ldw	r11,140(sp)
81120fb4:	58800104 	addi	r2,r11,4
81120fb8:	dac02417 	ldw	r11,144(sp)
81120fbc:	5802e90e 	bge	r11,zero,81121b64 <___svfiprintf_internal_r+0xe8c>
81120fc0:	dac02417 	ldw	r11,144(sp)
81120fc4:	d8802315 	stw	r2,140(sp)
81120fc8:	02d7c83a 	sub	r11,zero,r11
81120fcc:	dac02415 	stw	r11,144(sp)
81120fd0:	94800114 	ori	r18,r18,4
81120fd4:	98c00007 	ldb	r3,0(r19)
81120fd8:	003f9006 	br	81120e1c <__reset+0xfb100e1c>
81120fdc:	00800c04 	movi	r2,48
81120fe0:	dac02317 	ldw	r11,140(sp)
81120fe4:	d8801d05 	stb	r2,116(sp)
81120fe8:	00801e04 	movi	r2,120
81120fec:	d8801d45 	stb	r2,117(sp)
81120ff0:	d8001d85 	stb	zero,118(sp)
81120ff4:	58c00104 	addi	r3,r11,4
81120ff8:	5f000017 	ldw	fp,0(r11)
81120ffc:	0013883a 	mov	r9,zero
81121000:	90800094 	ori	r2,r18,2
81121004:	80032b16 	blt	r16,zero,81121cb4 <___svfiprintf_internal_r+0xfdc>
81121008:	00bfdfc4 	movi	r2,-129
8112100c:	90a4703a 	and	r18,r18,r2
81121010:	d8c02315 	stw	r3,140(sp)
81121014:	94800094 	ori	r18,r18,2
81121018:	e002dc26 	beq	fp,zero,81121b8c <___svfiprintf_internal_r+0xeb4>
8112101c:	01204534 	movhi	r4,33044
81121020:	2100c404 	addi	r4,r4,784
81121024:	0015883a 	mov	r10,zero
81121028:	d9002915 	stw	r4,164(sp)
8112102c:	00002306 	br	811210bc <___svfiprintf_internal_r+0x3e4>
81121030:	94800054 	ori	r18,r18,1
81121034:	98c00007 	ldb	r3,0(r19)
81121038:	003f7806 	br	81120e1c <__reset+0xfb100e1c>
8112103c:	38803fcc 	andi	r2,r7,255
81121040:	1080201c 	xori	r2,r2,128
81121044:	10bfe004 	addi	r2,r2,-128
81121048:	1002f31e 	bne	r2,zero,81121c18 <___svfiprintf_internal_r+0xf40>
8112104c:	01000044 	movi	r4,1
81121050:	01c00804 	movi	r7,32
81121054:	98c00007 	ldb	r3,0(r19)
81121058:	003f7006 	br	81120e1c <__reset+0xfb100e1c>
8112105c:	21003fcc 	andi	r4,r4,255
81121060:	2003aa1e 	bne	r4,zero,81121f0c <___svfiprintf_internal_r+0x1234>
81121064:	00a04534 	movhi	r2,33044
81121068:	1080c404 	addi	r2,r2,784
8112106c:	d8802915 	stw	r2,164(sp)
81121070:	9080080c 	andi	r2,r18,32
81121074:	1000ba26 	beq	r2,zero,81121360 <___svfiprintf_internal_r+0x688>
81121078:	dac02317 	ldw	r11,140(sp)
8112107c:	5f000017 	ldw	fp,0(r11)
81121080:	5a400117 	ldw	r9,4(r11)
81121084:	5ac00204 	addi	r11,r11,8
81121088:	dac02315 	stw	r11,140(sp)
8112108c:	9080004c 	andi	r2,r18,1
81121090:	10029026 	beq	r2,zero,81121ad4 <___svfiprintf_internal_r+0xdfc>
81121094:	e244b03a 	or	r2,fp,r9
81121098:	1002d41e 	bne	r2,zero,81121bec <___svfiprintf_internal_r+0xf14>
8112109c:	d8001d85 	stb	zero,118(sp)
811210a0:	80030b16 	blt	r16,zero,81121cd0 <___svfiprintf_internal_r+0xff8>
811210a4:	00bfdfc4 	movi	r2,-129
811210a8:	90a4703a 	and	r18,r18,r2
811210ac:	0015883a 	mov	r10,zero
811210b0:	80002426 	beq	r16,zero,81121144 <___svfiprintf_internal_r+0x46c>
811210b4:	0039883a 	mov	fp,zero
811210b8:	0013883a 	mov	r9,zero
811210bc:	d9002917 	ldw	r4,164(sp)
811210c0:	dc401a04 	addi	r17,sp,104
811210c4:	e08003cc 	andi	r2,fp,15
811210c8:	4806973a 	slli	r3,r9,28
811210cc:	2085883a 	add	r2,r4,r2
811210d0:	e038d13a 	srli	fp,fp,4
811210d4:	10800003 	ldbu	r2,0(r2)
811210d8:	4812d13a 	srli	r9,r9,4
811210dc:	8c7fffc4 	addi	r17,r17,-1
811210e0:	1f38b03a 	or	fp,r3,fp
811210e4:	88800005 	stb	r2,0(r17)
811210e8:	e244b03a 	or	r2,fp,r9
811210ec:	103ff51e 	bne	r2,zero,811210c4 <__reset+0xfb1010c4>
811210f0:	dac01e17 	ldw	r11,120(sp)
811210f4:	5c57c83a 	sub	r11,r11,r17
811210f8:	dac02115 	stw	r11,132(sp)
811210fc:	00001406 	br	81121150 <___svfiprintf_internal_r+0x478>
81121100:	21003fcc 	andi	r4,r4,255
81121104:	2003741e 	bne	r4,zero,81121ed8 <___svfiprintf_internal_r+0x1200>
81121108:	9080080c 	andi	r2,r18,32
8112110c:	10014526 	beq	r2,zero,81121624 <___svfiprintf_internal_r+0x94c>
81121110:	dac02317 	ldw	r11,140(sp)
81121114:	d8001d85 	stb	zero,118(sp)
81121118:	58c00204 	addi	r3,r11,8
8112111c:	5f000017 	ldw	fp,0(r11)
81121120:	5a400117 	ldw	r9,4(r11)
81121124:	8002d916 	blt	r16,zero,81121c8c <___svfiprintf_internal_r+0xfb4>
81121128:	013fdfc4 	movi	r4,-129
8112112c:	e244b03a 	or	r2,fp,r9
81121130:	d8c02315 	stw	r3,140(sp)
81121134:	9124703a 	and	r18,r18,r4
81121138:	0015883a 	mov	r10,zero
8112113c:	1000b91e 	bne	r2,zero,81121424 <___svfiprintf_internal_r+0x74c>
81121140:	8002e61e 	bne	r16,zero,81121cdc <___svfiprintf_internal_r+0x1004>
81121144:	0021883a 	mov	r16,zero
81121148:	d8002115 	stw	zero,132(sp)
8112114c:	dc401a04 	addi	r17,sp,104
81121150:	d8c02117 	ldw	r3,132(sp)
81121154:	dc002015 	stw	r16,128(sp)
81121158:	80c0010e 	bge	r16,r3,81121160 <___svfiprintf_internal_r+0x488>
8112115c:	d8c02015 	stw	r3,128(sp)
81121160:	52803fcc 	andi	r10,r10,255
81121164:	5280201c 	xori	r10,r10,128
81121168:	52bfe004 	addi	r10,r10,-128
8112116c:	50003c26 	beq	r10,zero,81121260 <___svfiprintf_internal_r+0x588>
81121170:	dac02017 	ldw	r11,128(sp)
81121174:	5ac00044 	addi	r11,r11,1
81121178:	dac02015 	stw	r11,128(sp)
8112117c:	00003806 	br	81121260 <___svfiprintf_internal_r+0x588>
81121180:	01000044 	movi	r4,1
81121184:	01c00ac4 	movi	r7,43
81121188:	98c00007 	ldb	r3,0(r19)
8112118c:	003f2306 	br	81120e1c <__reset+0xfb100e1c>
81121190:	21003fcc 	andi	r4,r4,255
81121194:	2003481e 	bne	r4,zero,81121eb8 <___svfiprintf_internal_r+0x11e0>
81121198:	9080080c 	andi	r2,r18,32
8112119c:	10013b26 	beq	r2,zero,8112168c <___svfiprintf_internal_r+0x9b4>
811211a0:	dac02317 	ldw	r11,140(sp)
811211a4:	d8001d85 	stb	zero,118(sp)
811211a8:	58800204 	addi	r2,r11,8
811211ac:	5f000017 	ldw	fp,0(r11)
811211b0:	5a400117 	ldw	r9,4(r11)
811211b4:	8002a816 	blt	r16,zero,81121c58 <___svfiprintf_internal_r+0xf80>
811211b8:	013fdfc4 	movi	r4,-129
811211bc:	e246b03a 	or	r3,fp,r9
811211c0:	d8802315 	stw	r2,140(sp)
811211c4:	9124703a 	and	r18,r18,r4
811211c8:	18013c26 	beq	r3,zero,811216bc <___svfiprintf_internal_r+0x9e4>
811211cc:	0015883a 	mov	r10,zero
811211d0:	dc401a04 	addi	r17,sp,104
811211d4:	e006d0fa 	srli	r3,fp,3
811211d8:	4808977a 	slli	r4,r9,29
811211dc:	4812d0fa 	srli	r9,r9,3
811211e0:	e70001cc 	andi	fp,fp,7
811211e4:	e0800c04 	addi	r2,fp,48
811211e8:	8c7fffc4 	addi	r17,r17,-1
811211ec:	20f8b03a 	or	fp,r4,r3
811211f0:	88800005 	stb	r2,0(r17)
811211f4:	e246b03a 	or	r3,fp,r9
811211f8:	183ff61e 	bne	r3,zero,811211d4 <__reset+0xfb1011d4>
811211fc:	90c0004c 	andi	r3,r18,1
81121200:	1800a526 	beq	r3,zero,81121498 <___svfiprintf_internal_r+0x7c0>
81121204:	10803fcc 	andi	r2,r2,255
81121208:	1080201c 	xori	r2,r2,128
8112120c:	10bfe004 	addi	r2,r2,-128
81121210:	00c00c04 	movi	r3,48
81121214:	10ffb626 	beq	r2,r3,811210f0 <__reset+0xfb1010f0>
81121218:	88ffffc5 	stb	r3,-1(r17)
8112121c:	d8c01e17 	ldw	r3,120(sp)
81121220:	88bfffc4 	addi	r2,r17,-1
81121224:	1023883a 	mov	r17,r2
81121228:	1887c83a 	sub	r3,r3,r2
8112122c:	d8c02115 	stw	r3,132(sp)
81121230:	003fc706 	br	81121150 <__reset+0xfb101150>
81121234:	dac02317 	ldw	r11,140(sp)
81121238:	00c00044 	movi	r3,1
8112123c:	d8c02015 	stw	r3,128(sp)
81121240:	58800017 	ldw	r2,0(r11)
81121244:	5ac00104 	addi	r11,r11,4
81121248:	d8001d85 	stb	zero,118(sp)
8112124c:	d8801005 	stb	r2,64(sp)
81121250:	dac02315 	stw	r11,140(sp)
81121254:	d8c02115 	stw	r3,132(sp)
81121258:	dc401004 	addi	r17,sp,64
8112125c:	0021883a 	mov	r16,zero
81121260:	90c0008c 	andi	r3,r18,2
81121264:	d8c02215 	stw	r3,136(sp)
81121268:	18000326 	beq	r3,zero,81121278 <___svfiprintf_internal_r+0x5a0>
8112126c:	dac02017 	ldw	r11,128(sp)
81121270:	5ac00084 	addi	r11,r11,2
81121274:	dac02015 	stw	r11,128(sp)
81121278:	90c0210c 	andi	r3,r18,132
8112127c:	d8c02615 	stw	r3,152(sp)
81121280:	1801131e 	bne	r3,zero,811216d0 <___svfiprintf_internal_r+0x9f8>
81121284:	dac02417 	ldw	r11,144(sp)
81121288:	d8c02017 	ldw	r3,128(sp)
8112128c:	58f9c83a 	sub	fp,r11,r3
81121290:	07010f0e 	bge	zero,fp,811216d0 <___svfiprintf_internal_r+0x9f8>
81121294:	02400404 	movi	r9,16
81121298:	d8c01c17 	ldw	r3,112(sp)
8112129c:	d8801b17 	ldw	r2,108(sp)
811212a0:	4f02d60e 	bge	r9,fp,81121dfc <___svfiprintf_internal_r+0x1124>
811212a4:	01604534 	movhi	r5,33044
811212a8:	29415204 	addi	r5,r5,1352
811212ac:	d9402815 	stw	r5,160(sp)
811212b0:	028001c4 	movi	r10,7
811212b4:	00000306 	br	811212c4 <___svfiprintf_internal_r+0x5ec>
811212b8:	e73ffc04 	addi	fp,fp,-16
811212bc:	42000204 	addi	r8,r8,8
811212c0:	4f00150e 	bge	r9,fp,81121318 <___svfiprintf_internal_r+0x640>
811212c4:	18c00404 	addi	r3,r3,16
811212c8:	10800044 	addi	r2,r2,1
811212cc:	45800015 	stw	r22,0(r8)
811212d0:	42400115 	stw	r9,4(r8)
811212d4:	d8c01c15 	stw	r3,112(sp)
811212d8:	d8801b15 	stw	r2,108(sp)
811212dc:	50bff60e 	bge	r10,r2,811212b8 <__reset+0xfb1012b8>
811212e0:	d9801a04 	addi	r6,sp,104
811212e4:	b80b883a 	mov	r5,r23
811212e8:	a809883a 	mov	r4,r21
811212ec:	da402c15 	stw	r9,176(sp)
811212f0:	da802d15 	stw	r10,180(sp)
811212f4:	1120b000 	call	81120b00 <__ssprint_r>
811212f8:	da402c17 	ldw	r9,176(sp)
811212fc:	da802d17 	ldw	r10,180(sp)
81121300:	1001851e 	bne	r2,zero,81121918 <___svfiprintf_internal_r+0xc40>
81121304:	e73ffc04 	addi	fp,fp,-16
81121308:	d8c01c17 	ldw	r3,112(sp)
8112130c:	d8801b17 	ldw	r2,108(sp)
81121310:	d811883a 	mov	r8,sp
81121314:	4f3feb16 	blt	r9,fp,811212c4 <__reset+0xfb1012c4>
81121318:	dac02817 	ldw	r11,160(sp)
8112131c:	e0c7883a 	add	r3,fp,r3
81121320:	10800044 	addi	r2,r2,1
81121324:	42c00015 	stw	r11,0(r8)
81121328:	47000115 	stw	fp,4(r8)
8112132c:	d8c01c15 	stw	r3,112(sp)
81121330:	d8801b15 	stw	r2,108(sp)
81121334:	010001c4 	movi	r4,7
81121338:	2081ee16 	blt	r4,r2,81121af4 <___svfiprintf_internal_r+0xe1c>
8112133c:	42000204 	addi	r8,r8,8
81121340:	0000e506 	br	811216d8 <___svfiprintf_internal_r+0xa00>
81121344:	21003fcc 	andi	r4,r4,255
81121348:	2002dd1e 	bne	r4,zero,81121ec0 <___svfiprintf_internal_r+0x11e8>
8112134c:	00a04534 	movhi	r2,33044
81121350:	1080bf04 	addi	r2,r2,764
81121354:	d8802915 	stw	r2,164(sp)
81121358:	9080080c 	andi	r2,r18,32
8112135c:	103f461e 	bne	r2,zero,81121078 <__reset+0xfb101078>
81121360:	9080040c 	andi	r2,r18,16
81121364:	10022e1e 	bne	r2,zero,81121c20 <___svfiprintf_internal_r+0xf48>
81121368:	9080100c 	andi	r2,r18,64
8112136c:	dac02317 	ldw	r11,140(sp)
81121370:	10027326 	beq	r2,zero,81121d40 <___svfiprintf_internal_r+0x1068>
81121374:	5f00000b 	ldhu	fp,0(r11)
81121378:	5ac00104 	addi	r11,r11,4
8112137c:	0013883a 	mov	r9,zero
81121380:	dac02315 	stw	r11,140(sp)
81121384:	003f4106 	br	8112108c <__reset+0xfb10108c>
81121388:	21003fcc 	andi	r4,r4,255
8112138c:	2002e11e 	bne	r4,zero,81121f14 <___svfiprintf_internal_r+0x123c>
81121390:	9080080c 	andi	r2,r18,32
81121394:	1002011e 	bne	r2,zero,81121b9c <___svfiprintf_internal_r+0xec4>
81121398:	9080040c 	andi	r2,r18,16
8112139c:	10023e1e 	bne	r2,zero,81121c98 <___svfiprintf_internal_r+0xfc0>
811213a0:	9480100c 	andi	r18,r18,64
811213a4:	90023c26 	beq	r18,zero,81121c98 <___svfiprintf_internal_r+0xfc0>
811213a8:	dac02317 	ldw	r11,140(sp)
811213ac:	58800017 	ldw	r2,0(r11)
811213b0:	5ac00104 	addi	r11,r11,4
811213b4:	dac02315 	stw	r11,140(sp)
811213b8:	dac02517 	ldw	r11,148(sp)
811213bc:	12c0000d 	sth	r11,0(r2)
811213c0:	003e6e06 	br	81120d7c <__reset+0xfb100d7c>
811213c4:	98c00007 	ldb	r3,0(r19)
811213c8:	1a422926 	beq	r3,r9,81121c70 <___svfiprintf_internal_r+0xf98>
811213cc:	94800414 	ori	r18,r18,16
811213d0:	003e9206 	br	81120e1c <__reset+0xfb100e1c>
811213d4:	94801014 	ori	r18,r18,64
811213d8:	98c00007 	ldb	r3,0(r19)
811213dc:	003e8f06 	br	81120e1c <__reset+0xfb100e1c>
811213e0:	21003fcc 	andi	r4,r4,255
811213e4:	2002c71e 	bne	r4,zero,81121f04 <___svfiprintf_internal_r+0x122c>
811213e8:	9080080c 	andi	r2,r18,32
811213ec:	10004926 	beq	r2,zero,81121514 <___svfiprintf_internal_r+0x83c>
811213f0:	dac02317 	ldw	r11,140(sp)
811213f4:	58800117 	ldw	r2,4(r11)
811213f8:	5f000017 	ldw	fp,0(r11)
811213fc:	5ac00204 	addi	r11,r11,8
81121400:	dac02315 	stw	r11,140(sp)
81121404:	1013883a 	mov	r9,r2
81121408:	10004b16 	blt	r2,zero,81121538 <___svfiprintf_internal_r+0x860>
8112140c:	da801d83 	ldbu	r10,118(sp)
81121410:	8001cb16 	blt	r16,zero,81121b40 <___svfiprintf_internal_r+0xe68>
81121414:	00ffdfc4 	movi	r3,-129
81121418:	e244b03a 	or	r2,fp,r9
8112141c:	90e4703a 	and	r18,r18,r3
81121420:	103f4726 	beq	r2,zero,81121140 <__reset+0xfb101140>
81121424:	48008c26 	beq	r9,zero,81121658 <___svfiprintf_internal_r+0x980>
81121428:	dc802015 	stw	r18,128(sp)
8112142c:	dc002115 	stw	r16,132(sp)
81121430:	dc401a04 	addi	r17,sp,104
81121434:	e021883a 	mov	r16,fp
81121438:	da002215 	stw	r8,136(sp)
8112143c:	5039883a 	mov	fp,r10
81121440:	4825883a 	mov	r18,r9
81121444:	8009883a 	mov	r4,r16
81121448:	900b883a 	mov	r5,r18
8112144c:	01800284 	movi	r6,10
81121450:	000f883a 	mov	r7,zero
81121454:	11250640 	call	81125064 <__umoddi3>
81121458:	10800c04 	addi	r2,r2,48
8112145c:	8c7fffc4 	addi	r17,r17,-1
81121460:	8009883a 	mov	r4,r16
81121464:	900b883a 	mov	r5,r18
81121468:	88800005 	stb	r2,0(r17)
8112146c:	01800284 	movi	r6,10
81121470:	000f883a 	mov	r7,zero
81121474:	1124ae40 	call	81124ae4 <__udivdi3>
81121478:	1021883a 	mov	r16,r2
8112147c:	10c4b03a 	or	r2,r2,r3
81121480:	1825883a 	mov	r18,r3
81121484:	103fef1e 	bne	r2,zero,81121444 <__reset+0xfb101444>
81121488:	dc802017 	ldw	r18,128(sp)
8112148c:	dc002117 	ldw	r16,132(sp)
81121490:	da002217 	ldw	r8,136(sp)
81121494:	e015883a 	mov	r10,fp
81121498:	d8c01e17 	ldw	r3,120(sp)
8112149c:	1c47c83a 	sub	r3,r3,r17
811214a0:	d8c02115 	stw	r3,132(sp)
811214a4:	003f2a06 	br	81121150 <__reset+0xfb101150>
811214a8:	dac02317 	ldw	r11,140(sp)
811214ac:	d8001d85 	stb	zero,118(sp)
811214b0:	5c400017 	ldw	r17,0(r11)
811214b4:	5f000104 	addi	fp,r11,4
811214b8:	88022f26 	beq	r17,zero,81121d78 <___svfiprintf_internal_r+0x10a0>
811214bc:	80022516 	blt	r16,zero,81121d54 <___svfiprintf_internal_r+0x107c>
811214c0:	800d883a 	mov	r6,r16
811214c4:	000b883a 	mov	r5,zero
811214c8:	8809883a 	mov	r4,r17
811214cc:	da002c15 	stw	r8,176(sp)
811214d0:	111d0a40 	call	8111d0a4 <memchr>
811214d4:	da002c17 	ldw	r8,176(sp)
811214d8:	10026426 	beq	r2,zero,81121e6c <___svfiprintf_internal_r+0x1194>
811214dc:	1445c83a 	sub	r2,r2,r17
811214e0:	d8802115 	stw	r2,132(sp)
811214e4:	da801d83 	ldbu	r10,118(sp)
811214e8:	df002315 	stw	fp,140(sp)
811214ec:	0021883a 	mov	r16,zero
811214f0:	003f1706 	br	81121150 <__reset+0xfb101150>
811214f4:	94800814 	ori	r18,r18,32
811214f8:	98c00007 	ldb	r3,0(r19)
811214fc:	003e4706 	br	81120e1c <__reset+0xfb100e1c>
81121500:	21003fcc 	andi	r4,r4,255
81121504:	2002701e 	bne	r4,zero,81121ec8 <___svfiprintf_internal_r+0x11f0>
81121508:	94800414 	ori	r18,r18,16
8112150c:	9080080c 	andi	r2,r18,32
81121510:	103fb71e 	bne	r2,zero,811213f0 <__reset+0xfb1013f0>
81121514:	9080040c 	andi	r2,r18,16
81121518:	1001ab26 	beq	r2,zero,81121bc8 <___svfiprintf_internal_r+0xef0>
8112151c:	dac02317 	ldw	r11,140(sp)
81121520:	5f000017 	ldw	fp,0(r11)
81121524:	5ac00104 	addi	r11,r11,4
81121528:	dac02315 	stw	r11,140(sp)
8112152c:	e013d7fa 	srai	r9,fp,31
81121530:	4805883a 	mov	r2,r9
81121534:	103fb50e 	bge	r2,zero,8112140c <__reset+0xfb10140c>
81121538:	0739c83a 	sub	fp,zero,fp
8112153c:	02800b44 	movi	r10,45
81121540:	e004c03a 	cmpne	r2,fp,zero
81121544:	0253c83a 	sub	r9,zero,r9
81121548:	da801d85 	stb	r10,118(sp)
8112154c:	4893c83a 	sub	r9,r9,r2
81121550:	80023016 	blt	r16,zero,81121e14 <___svfiprintf_internal_r+0x113c>
81121554:	00bfdfc4 	movi	r2,-129
81121558:	90a4703a 	and	r18,r18,r2
8112155c:	483fb21e 	bne	r9,zero,81121428 <__reset+0xfb101428>
81121560:	00003d06 	br	81121658 <___svfiprintf_internal_r+0x980>
81121564:	9817883a 	mov	r11,r19
81121568:	d8002415 	stw	zero,144(sp)
8112156c:	18bff404 	addi	r2,r3,-48
81121570:	0019883a 	mov	r12,zero
81121574:	58c00007 	ldb	r3,0(r11)
81121578:	630002a4 	muli	r12,r12,10
8112157c:	9cc00044 	addi	r19,r19,1
81121580:	9817883a 	mov	r11,r19
81121584:	1319883a 	add	r12,r2,r12
81121588:	18bff404 	addi	r2,r3,-48
8112158c:	30bff92e 	bgeu	r6,r2,81121574 <__reset+0xfb101574>
81121590:	db002415 	stw	r12,144(sp)
81121594:	18bff804 	addi	r2,r3,-32
81121598:	28be232e 	bgeu	r5,r2,81120e28 <__reset+0xfb100e28>
8112159c:	21003fcc 	andi	r4,r4,255
811215a0:	20024b1e 	bne	r4,zero,81121ed0 <___svfiprintf_internal_r+0x11f8>
811215a4:	1800d626 	beq	r3,zero,81121900 <___svfiprintf_internal_r+0xc28>
811215a8:	02c00044 	movi	r11,1
811215ac:	dac02015 	stw	r11,128(sp)
811215b0:	d8c01005 	stb	r3,64(sp)
811215b4:	d8001d85 	stb	zero,118(sp)
811215b8:	dac02115 	stw	r11,132(sp)
811215bc:	dc401004 	addi	r17,sp,64
811215c0:	003f2606 	br	8112125c <__reset+0xfb10125c>
811215c4:	94802014 	ori	r18,r18,128
811215c8:	98c00007 	ldb	r3,0(r19)
811215cc:	003e1306 	br	81120e1c <__reset+0xfb100e1c>
811215d0:	98c00007 	ldb	r3,0(r19)
811215d4:	9ac00044 	addi	r11,r19,1
811215d8:	1a822b26 	beq	r3,r10,81121e88 <___svfiprintf_internal_r+0x11b0>
811215dc:	18bff404 	addi	r2,r3,-48
811215e0:	0021883a 	mov	r16,zero
811215e4:	30821e36 	bltu	r6,r2,81121e60 <___svfiprintf_internal_r+0x1188>
811215e8:	58c00007 	ldb	r3,0(r11)
811215ec:	840002a4 	muli	r16,r16,10
811215f0:	5cc00044 	addi	r19,r11,1
811215f4:	9817883a 	mov	r11,r19
811215f8:	80a1883a 	add	r16,r16,r2
811215fc:	18bff404 	addi	r2,r3,-48
81121600:	30bff92e 	bgeu	r6,r2,811215e8 <__reset+0xfb1015e8>
81121604:	803e060e 	bge	r16,zero,81120e20 <__reset+0xfb100e20>
81121608:	043fffc4 	movi	r16,-1
8112160c:	003e0406 	br	81120e20 <__reset+0xfb100e20>
81121610:	21003fcc 	andi	r4,r4,255
81121614:	2002371e 	bne	r4,zero,81121ef4 <___svfiprintf_internal_r+0x121c>
81121618:	94800414 	ori	r18,r18,16
8112161c:	9080080c 	andi	r2,r18,32
81121620:	103ebb1e 	bne	r2,zero,81121110 <__reset+0xfb101110>
81121624:	9080040c 	andi	r2,r18,16
81121628:	10013b26 	beq	r2,zero,81121b18 <___svfiprintf_internal_r+0xe40>
8112162c:	dac02317 	ldw	r11,140(sp)
81121630:	d8001d85 	stb	zero,118(sp)
81121634:	0013883a 	mov	r9,zero
81121638:	58800104 	addi	r2,r11,4
8112163c:	5f000017 	ldw	fp,0(r11)
81121640:	80013d16 	blt	r16,zero,81121b38 <___svfiprintf_internal_r+0xe60>
81121644:	00ffdfc4 	movi	r3,-129
81121648:	d8802315 	stw	r2,140(sp)
8112164c:	90e4703a 	and	r18,r18,r3
81121650:	0015883a 	mov	r10,zero
81121654:	e03eba26 	beq	fp,zero,81121140 <__reset+0xfb101140>
81121658:	00800244 	movi	r2,9
8112165c:	173f7236 	bltu	r2,fp,81121428 <__reset+0xfb101428>
81121660:	dac02b17 	ldw	r11,172(sp)
81121664:	e7000c04 	addi	fp,fp,48
81121668:	df0019c5 	stb	fp,103(sp)
8112166c:	dac02115 	stw	r11,132(sp)
81121670:	dc4019c4 	addi	r17,sp,103
81121674:	003eb606 	br	81121150 <__reset+0xfb101150>
81121678:	21003fcc 	andi	r4,r4,255
8112167c:	20021f1e 	bne	r4,zero,81121efc <___svfiprintf_internal_r+0x1224>
81121680:	94800414 	ori	r18,r18,16
81121684:	9080080c 	andi	r2,r18,32
81121688:	103ec51e 	bne	r2,zero,811211a0 <__reset+0xfb1011a0>
8112168c:	9080040c 	andi	r2,r18,16
81121690:	10016926 	beq	r2,zero,81121c38 <___svfiprintf_internal_r+0xf60>
81121694:	dac02317 	ldw	r11,140(sp)
81121698:	d8001d85 	stb	zero,118(sp)
8112169c:	0013883a 	mov	r9,zero
811216a0:	58800104 	addi	r2,r11,4
811216a4:	5f000017 	ldw	fp,0(r11)
811216a8:	80016b16 	blt	r16,zero,81121c58 <___svfiprintf_internal_r+0xf80>
811216ac:	00ffdfc4 	movi	r3,-129
811216b0:	d8802315 	stw	r2,140(sp)
811216b4:	90e4703a 	and	r18,r18,r3
811216b8:	e03ec41e 	bne	fp,zero,811211cc <__reset+0xfb1011cc>
811216bc:	0015883a 	mov	r10,zero
811216c0:	8001c226 	beq	r16,zero,81121dcc <___svfiprintf_internal_r+0x10f4>
811216c4:	0039883a 	mov	fp,zero
811216c8:	0013883a 	mov	r9,zero
811216cc:	003ec006 	br	811211d0 <__reset+0xfb1011d0>
811216d0:	d8c01c17 	ldw	r3,112(sp)
811216d4:	d8801b17 	ldw	r2,108(sp)
811216d8:	d9001d87 	ldb	r4,118(sp)
811216dc:	20000b26 	beq	r4,zero,8112170c <___svfiprintf_internal_r+0xa34>
811216e0:	d9001d84 	addi	r4,sp,118
811216e4:	18c00044 	addi	r3,r3,1
811216e8:	10800044 	addi	r2,r2,1
811216ec:	41000015 	stw	r4,0(r8)
811216f0:	01000044 	movi	r4,1
811216f4:	41000115 	stw	r4,4(r8)
811216f8:	d8c01c15 	stw	r3,112(sp)
811216fc:	d8801b15 	stw	r2,108(sp)
81121700:	010001c4 	movi	r4,7
81121704:	2080e116 	blt	r4,r2,81121a8c <___svfiprintf_internal_r+0xdb4>
81121708:	42000204 	addi	r8,r8,8
8112170c:	dac02217 	ldw	r11,136(sp)
81121710:	58000b26 	beq	r11,zero,81121740 <___svfiprintf_internal_r+0xa68>
81121714:	d9001d04 	addi	r4,sp,116
81121718:	18c00084 	addi	r3,r3,2
8112171c:	10800044 	addi	r2,r2,1
81121720:	41000015 	stw	r4,0(r8)
81121724:	01000084 	movi	r4,2
81121728:	41000115 	stw	r4,4(r8)
8112172c:	d8c01c15 	stw	r3,112(sp)
81121730:	d8801b15 	stw	r2,108(sp)
81121734:	010001c4 	movi	r4,7
81121738:	2080dd16 	blt	r4,r2,81121ab0 <___svfiprintf_internal_r+0xdd8>
8112173c:	42000204 	addi	r8,r8,8
81121740:	dac02617 	ldw	r11,152(sp)
81121744:	01002004 	movi	r4,128
81121748:	59008426 	beq	r11,r4,8112195c <___svfiprintf_internal_r+0xc84>
8112174c:	dac02117 	ldw	r11,132(sp)
81121750:	82e1c83a 	sub	r16,r16,r11
81121754:	0400270e 	bge	zero,r16,811217f4 <___svfiprintf_internal_r+0xb1c>
81121758:	01c00404 	movi	r7,16
8112175c:	3c016a0e 	bge	r7,r16,81121d08 <___svfiprintf_internal_r+0x1030>
81121760:	01604534 	movhi	r5,33044
81121764:	29414e04 	addi	r5,r5,1336
81121768:	d9402215 	stw	r5,136(sp)
8112176c:	070001c4 	movi	fp,7
81121770:	00000306 	br	81121780 <___svfiprintf_internal_r+0xaa8>
81121774:	843ffc04 	addi	r16,r16,-16
81121778:	42000204 	addi	r8,r8,8
8112177c:	3c00130e 	bge	r7,r16,811217cc <___svfiprintf_internal_r+0xaf4>
81121780:	18c00404 	addi	r3,r3,16
81121784:	10800044 	addi	r2,r2,1
81121788:	45000015 	stw	r20,0(r8)
8112178c:	41c00115 	stw	r7,4(r8)
81121790:	d8c01c15 	stw	r3,112(sp)
81121794:	d8801b15 	stw	r2,108(sp)
81121798:	e0bff60e 	bge	fp,r2,81121774 <__reset+0xfb101774>
8112179c:	d9801a04 	addi	r6,sp,104
811217a0:	b80b883a 	mov	r5,r23
811217a4:	a809883a 	mov	r4,r21
811217a8:	d9c02c15 	stw	r7,176(sp)
811217ac:	1120b000 	call	81120b00 <__ssprint_r>
811217b0:	d9c02c17 	ldw	r7,176(sp)
811217b4:	1000581e 	bne	r2,zero,81121918 <___svfiprintf_internal_r+0xc40>
811217b8:	843ffc04 	addi	r16,r16,-16
811217bc:	d8c01c17 	ldw	r3,112(sp)
811217c0:	d8801b17 	ldw	r2,108(sp)
811217c4:	d811883a 	mov	r8,sp
811217c8:	3c3fed16 	blt	r7,r16,81121780 <__reset+0xfb101780>
811217cc:	dac02217 	ldw	r11,136(sp)
811217d0:	1c07883a 	add	r3,r3,r16
811217d4:	10800044 	addi	r2,r2,1
811217d8:	42c00015 	stw	r11,0(r8)
811217dc:	44000115 	stw	r16,4(r8)
811217e0:	d8c01c15 	stw	r3,112(sp)
811217e4:	d8801b15 	stw	r2,108(sp)
811217e8:	010001c4 	movi	r4,7
811217ec:	20809e16 	blt	r4,r2,81121a68 <___svfiprintf_internal_r+0xd90>
811217f0:	42000204 	addi	r8,r8,8
811217f4:	dac02117 	ldw	r11,132(sp)
811217f8:	10800044 	addi	r2,r2,1
811217fc:	44400015 	stw	r17,0(r8)
81121800:	58c7883a 	add	r3,r11,r3
81121804:	42c00115 	stw	r11,4(r8)
81121808:	d8c01c15 	stw	r3,112(sp)
8112180c:	d8801b15 	stw	r2,108(sp)
81121810:	010001c4 	movi	r4,7
81121814:	20807f16 	blt	r4,r2,81121a14 <___svfiprintf_internal_r+0xd3c>
81121818:	42000204 	addi	r8,r8,8
8112181c:	9480010c 	andi	r18,r18,4
81121820:	90002926 	beq	r18,zero,811218c8 <___svfiprintf_internal_r+0xbf0>
81121824:	dac02417 	ldw	r11,144(sp)
81121828:	d8802017 	ldw	r2,128(sp)
8112182c:	58a1c83a 	sub	r16,r11,r2
81121830:	0400250e 	bge	zero,r16,811218c8 <___svfiprintf_internal_r+0xbf0>
81121834:	04400404 	movi	r17,16
81121838:	d8801b17 	ldw	r2,108(sp)
8112183c:	8c017c0e 	bge	r17,r16,81121e30 <___svfiprintf_internal_r+0x1158>
81121840:	01604534 	movhi	r5,33044
81121844:	29415204 	addi	r5,r5,1352
81121848:	d9402815 	stw	r5,160(sp)
8112184c:	048001c4 	movi	r18,7
81121850:	00000306 	br	81121860 <___svfiprintf_internal_r+0xb88>
81121854:	843ffc04 	addi	r16,r16,-16
81121858:	42000204 	addi	r8,r8,8
8112185c:	8c00110e 	bge	r17,r16,811218a4 <___svfiprintf_internal_r+0xbcc>
81121860:	18c00404 	addi	r3,r3,16
81121864:	10800044 	addi	r2,r2,1
81121868:	45800015 	stw	r22,0(r8)
8112186c:	44400115 	stw	r17,4(r8)
81121870:	d8c01c15 	stw	r3,112(sp)
81121874:	d8801b15 	stw	r2,108(sp)
81121878:	90bff60e 	bge	r18,r2,81121854 <__reset+0xfb101854>
8112187c:	d9801a04 	addi	r6,sp,104
81121880:	b80b883a 	mov	r5,r23
81121884:	a809883a 	mov	r4,r21
81121888:	1120b000 	call	81120b00 <__ssprint_r>
8112188c:	1000221e 	bne	r2,zero,81121918 <___svfiprintf_internal_r+0xc40>
81121890:	843ffc04 	addi	r16,r16,-16
81121894:	d8c01c17 	ldw	r3,112(sp)
81121898:	d8801b17 	ldw	r2,108(sp)
8112189c:	d811883a 	mov	r8,sp
811218a0:	8c3fef16 	blt	r17,r16,81121860 <__reset+0xfb101860>
811218a4:	dac02817 	ldw	r11,160(sp)
811218a8:	1c07883a 	add	r3,r3,r16
811218ac:	10800044 	addi	r2,r2,1
811218b0:	42c00015 	stw	r11,0(r8)
811218b4:	44000115 	stw	r16,4(r8)
811218b8:	d8c01c15 	stw	r3,112(sp)
811218bc:	d8801b15 	stw	r2,108(sp)
811218c0:	010001c4 	movi	r4,7
811218c4:	2080aa16 	blt	r4,r2,81121b70 <___svfiprintf_internal_r+0xe98>
811218c8:	d8802417 	ldw	r2,144(sp)
811218cc:	dac02017 	ldw	r11,128(sp)
811218d0:	12c0010e 	bge	r2,r11,811218d8 <___svfiprintf_internal_r+0xc00>
811218d4:	5805883a 	mov	r2,r11
811218d8:	dac02517 	ldw	r11,148(sp)
811218dc:	5897883a 	add	r11,r11,r2
811218e0:	dac02515 	stw	r11,148(sp)
811218e4:	1800531e 	bne	r3,zero,81121a34 <___svfiprintf_internal_r+0xd5c>
811218e8:	98800007 	ldb	r2,0(r19)
811218ec:	d8001b15 	stw	zero,108(sp)
811218f0:	d811883a 	mov	r8,sp
811218f4:	103d231e 	bne	r2,zero,81120d84 <__reset+0xfb100d84>
811218f8:	9823883a 	mov	r17,r19
811218fc:	003d3906 	br	81120de4 <__reset+0xfb100de4>
81121900:	d8801c17 	ldw	r2,112(sp)
81121904:	10000426 	beq	r2,zero,81121918 <___svfiprintf_internal_r+0xc40>
81121908:	d9402717 	ldw	r5,156(sp)
8112190c:	d9002a17 	ldw	r4,168(sp)
81121910:	d9801a04 	addi	r6,sp,104
81121914:	1120b000 	call	81120b00 <__ssprint_r>
81121918:	dac02717 	ldw	r11,156(sp)
8112191c:	d8802517 	ldw	r2,148(sp)
81121920:	58c0030b 	ldhu	r3,12(r11)
81121924:	18c0100c 	andi	r3,r3,64
81121928:	1801381e 	bne	r3,zero,81121e0c <___svfiprintf_internal_r+0x1134>
8112192c:	dfc03717 	ldw	ra,220(sp)
81121930:	df003617 	ldw	fp,216(sp)
81121934:	ddc03517 	ldw	r23,212(sp)
81121938:	dd803417 	ldw	r22,208(sp)
8112193c:	dd403317 	ldw	r21,204(sp)
81121940:	dd003217 	ldw	r20,200(sp)
81121944:	dcc03117 	ldw	r19,196(sp)
81121948:	dc803017 	ldw	r18,192(sp)
8112194c:	dc402f17 	ldw	r17,188(sp)
81121950:	dc002e17 	ldw	r16,184(sp)
81121954:	dec03804 	addi	sp,sp,224
81121958:	f800283a 	ret
8112195c:	dac02417 	ldw	r11,144(sp)
81121960:	d9002017 	ldw	r4,128(sp)
81121964:	5939c83a 	sub	fp,r11,r4
81121968:	073f780e 	bge	zero,fp,8112174c <__reset+0xfb10174c>
8112196c:	02400404 	movi	r9,16
81121970:	4f01370e 	bge	r9,fp,81121e50 <___svfiprintf_internal_r+0x1178>
81121974:	02e04534 	movhi	r11,33044
81121978:	5ac14e04 	addi	r11,r11,1336
8112197c:	dac02215 	stw	r11,136(sp)
81121980:	028001c4 	movi	r10,7
81121984:	00000306 	br	81121994 <___svfiprintf_internal_r+0xcbc>
81121988:	e73ffc04 	addi	fp,fp,-16
8112198c:	42000204 	addi	r8,r8,8
81121990:	4f00150e 	bge	r9,fp,811219e8 <___svfiprintf_internal_r+0xd10>
81121994:	18c00404 	addi	r3,r3,16
81121998:	10800044 	addi	r2,r2,1
8112199c:	45000015 	stw	r20,0(r8)
811219a0:	42400115 	stw	r9,4(r8)
811219a4:	d8c01c15 	stw	r3,112(sp)
811219a8:	d8801b15 	stw	r2,108(sp)
811219ac:	50bff60e 	bge	r10,r2,81121988 <__reset+0xfb101988>
811219b0:	d9801a04 	addi	r6,sp,104
811219b4:	b80b883a 	mov	r5,r23
811219b8:	a809883a 	mov	r4,r21
811219bc:	da402c15 	stw	r9,176(sp)
811219c0:	da802d15 	stw	r10,180(sp)
811219c4:	1120b000 	call	81120b00 <__ssprint_r>
811219c8:	da402c17 	ldw	r9,176(sp)
811219cc:	da802d17 	ldw	r10,180(sp)
811219d0:	103fd11e 	bne	r2,zero,81121918 <__reset+0xfb101918>
811219d4:	e73ffc04 	addi	fp,fp,-16
811219d8:	d8c01c17 	ldw	r3,112(sp)
811219dc:	d8801b17 	ldw	r2,108(sp)
811219e0:	d811883a 	mov	r8,sp
811219e4:	4f3feb16 	blt	r9,fp,81121994 <__reset+0xfb101994>
811219e8:	dac02217 	ldw	r11,136(sp)
811219ec:	1f07883a 	add	r3,r3,fp
811219f0:	10800044 	addi	r2,r2,1
811219f4:	42c00015 	stw	r11,0(r8)
811219f8:	47000115 	stw	fp,4(r8)
811219fc:	d8c01c15 	stw	r3,112(sp)
81121a00:	d8801b15 	stw	r2,108(sp)
81121a04:	010001c4 	movi	r4,7
81121a08:	2080b616 	blt	r4,r2,81121ce4 <___svfiprintf_internal_r+0x100c>
81121a0c:	42000204 	addi	r8,r8,8
81121a10:	003f4e06 	br	8112174c <__reset+0xfb10174c>
81121a14:	d9801a04 	addi	r6,sp,104
81121a18:	b80b883a 	mov	r5,r23
81121a1c:	a809883a 	mov	r4,r21
81121a20:	1120b000 	call	81120b00 <__ssprint_r>
81121a24:	103fbc1e 	bne	r2,zero,81121918 <__reset+0xfb101918>
81121a28:	d8c01c17 	ldw	r3,112(sp)
81121a2c:	d811883a 	mov	r8,sp
81121a30:	003f7a06 	br	8112181c <__reset+0xfb10181c>
81121a34:	d9801a04 	addi	r6,sp,104
81121a38:	b80b883a 	mov	r5,r23
81121a3c:	a809883a 	mov	r4,r21
81121a40:	1120b000 	call	81120b00 <__ssprint_r>
81121a44:	103fa826 	beq	r2,zero,811218e8 <__reset+0xfb1018e8>
81121a48:	003fb306 	br	81121918 <__reset+0xfb101918>
81121a4c:	d9801a04 	addi	r6,sp,104
81121a50:	b80b883a 	mov	r5,r23
81121a54:	a809883a 	mov	r4,r21
81121a58:	1120b000 	call	81120b00 <__ssprint_r>
81121a5c:	103fae1e 	bne	r2,zero,81121918 <__reset+0xfb101918>
81121a60:	d811883a 	mov	r8,sp
81121a64:	003cdc06 	br	81120dd8 <__reset+0xfb100dd8>
81121a68:	d9801a04 	addi	r6,sp,104
81121a6c:	b80b883a 	mov	r5,r23
81121a70:	a809883a 	mov	r4,r21
81121a74:	1120b000 	call	81120b00 <__ssprint_r>
81121a78:	103fa71e 	bne	r2,zero,81121918 <__reset+0xfb101918>
81121a7c:	d8c01c17 	ldw	r3,112(sp)
81121a80:	d8801b17 	ldw	r2,108(sp)
81121a84:	d811883a 	mov	r8,sp
81121a88:	003f5a06 	br	811217f4 <__reset+0xfb1017f4>
81121a8c:	d9801a04 	addi	r6,sp,104
81121a90:	b80b883a 	mov	r5,r23
81121a94:	a809883a 	mov	r4,r21
81121a98:	1120b000 	call	81120b00 <__ssprint_r>
81121a9c:	103f9e1e 	bne	r2,zero,81121918 <__reset+0xfb101918>
81121aa0:	d8c01c17 	ldw	r3,112(sp)
81121aa4:	d8801b17 	ldw	r2,108(sp)
81121aa8:	d811883a 	mov	r8,sp
81121aac:	003f1706 	br	8112170c <__reset+0xfb10170c>
81121ab0:	d9801a04 	addi	r6,sp,104
81121ab4:	b80b883a 	mov	r5,r23
81121ab8:	a809883a 	mov	r4,r21
81121abc:	1120b000 	call	81120b00 <__ssprint_r>
81121ac0:	103f951e 	bne	r2,zero,81121918 <__reset+0xfb101918>
81121ac4:	d8c01c17 	ldw	r3,112(sp)
81121ac8:	d8801b17 	ldw	r2,108(sp)
81121acc:	d811883a 	mov	r8,sp
81121ad0:	003f1b06 	br	81121740 <__reset+0xfb101740>
81121ad4:	d8001d85 	stb	zero,118(sp)
81121ad8:	80007b16 	blt	r16,zero,81121cc8 <___svfiprintf_internal_r+0xff0>
81121adc:	00ffdfc4 	movi	r3,-129
81121ae0:	e244b03a 	or	r2,fp,r9
81121ae4:	90e4703a 	and	r18,r18,r3
81121ae8:	103d7026 	beq	r2,zero,811210ac <__reset+0xfb1010ac>
81121aec:	0015883a 	mov	r10,zero
81121af0:	003d7206 	br	811210bc <__reset+0xfb1010bc>
81121af4:	d9801a04 	addi	r6,sp,104
81121af8:	b80b883a 	mov	r5,r23
81121afc:	a809883a 	mov	r4,r21
81121b00:	1120b000 	call	81120b00 <__ssprint_r>
81121b04:	103f841e 	bne	r2,zero,81121918 <__reset+0xfb101918>
81121b08:	d8c01c17 	ldw	r3,112(sp)
81121b0c:	d8801b17 	ldw	r2,108(sp)
81121b10:	d811883a 	mov	r8,sp
81121b14:	003ef006 	br	811216d8 <__reset+0xfb1016d8>
81121b18:	9080100c 	andi	r2,r18,64
81121b1c:	d8001d85 	stb	zero,118(sp)
81121b20:	dac02317 	ldw	r11,140(sp)
81121b24:	10008126 	beq	r2,zero,81121d2c <___svfiprintf_internal_r+0x1054>
81121b28:	58800104 	addi	r2,r11,4
81121b2c:	5f00000b 	ldhu	fp,0(r11)
81121b30:	0013883a 	mov	r9,zero
81121b34:	803ec30e 	bge	r16,zero,81121644 <__reset+0xfb101644>
81121b38:	d8802315 	stw	r2,140(sp)
81121b3c:	0015883a 	mov	r10,zero
81121b40:	e244b03a 	or	r2,fp,r9
81121b44:	103e371e 	bne	r2,zero,81121424 <__reset+0xfb101424>
81121b48:	00800044 	movi	r2,1
81121b4c:	10803fcc 	andi	r2,r2,255
81121b50:	00c00044 	movi	r3,1
81121b54:	10c06126 	beq	r2,r3,81121cdc <___svfiprintf_internal_r+0x1004>
81121b58:	00c00084 	movi	r3,2
81121b5c:	10fd5526 	beq	r2,r3,811210b4 <__reset+0xfb1010b4>
81121b60:	003ed806 	br	811216c4 <__reset+0xfb1016c4>
81121b64:	d8802315 	stw	r2,140(sp)
81121b68:	98c00007 	ldb	r3,0(r19)
81121b6c:	003cab06 	br	81120e1c <__reset+0xfb100e1c>
81121b70:	d9801a04 	addi	r6,sp,104
81121b74:	b80b883a 	mov	r5,r23
81121b78:	a809883a 	mov	r4,r21
81121b7c:	1120b000 	call	81120b00 <__ssprint_r>
81121b80:	103f651e 	bne	r2,zero,81121918 <__reset+0xfb101918>
81121b84:	d8c01c17 	ldw	r3,112(sp)
81121b88:	003f4f06 	br	811218c8 <__reset+0xfb1018c8>
81121b8c:	00a04534 	movhi	r2,33044
81121b90:	1080c404 	addi	r2,r2,784
81121b94:	d8802915 	stw	r2,164(sp)
81121b98:	003d4406 	br	811210ac <__reset+0xfb1010ac>
81121b9c:	dac02317 	ldw	r11,140(sp)
81121ba0:	58800017 	ldw	r2,0(r11)
81121ba4:	dac02517 	ldw	r11,148(sp)
81121ba8:	5807d7fa 	srai	r3,r11,31
81121bac:	dac02317 	ldw	r11,140(sp)
81121bb0:	10c00115 	stw	r3,4(r2)
81121bb4:	5ac00104 	addi	r11,r11,4
81121bb8:	dac02315 	stw	r11,140(sp)
81121bbc:	dac02517 	ldw	r11,148(sp)
81121bc0:	12c00015 	stw	r11,0(r2)
81121bc4:	003c6d06 	br	81120d7c <__reset+0xfb100d7c>
81121bc8:	9080100c 	andi	r2,r18,64
81121bcc:	dac02317 	ldw	r11,140(sp)
81121bd0:	103e5326 	beq	r2,zero,81121520 <__reset+0xfb101520>
81121bd4:	5f00000f 	ldh	fp,0(r11)
81121bd8:	5ac00104 	addi	r11,r11,4
81121bdc:	dac02315 	stw	r11,140(sp)
81121be0:	e013d7fa 	srai	r9,fp,31
81121be4:	4805883a 	mov	r2,r9
81121be8:	003e0706 	br	81121408 <__reset+0xfb101408>
81121bec:	00800c04 	movi	r2,48
81121bf0:	d8801d05 	stb	r2,116(sp)
81121bf4:	d8c01d45 	stb	r3,117(sp)
81121bf8:	d8001d85 	stb	zero,118(sp)
81121bfc:	90800094 	ori	r2,r18,2
81121c00:	80008f16 	blt	r16,zero,81121e40 <___svfiprintf_internal_r+0x1168>
81121c04:	00bfdfc4 	movi	r2,-129
81121c08:	90a4703a 	and	r18,r18,r2
81121c0c:	94800094 	ori	r18,r18,2
81121c10:	0015883a 	mov	r10,zero
81121c14:	003d2906 	br	811210bc <__reset+0xfb1010bc>
81121c18:	98c00007 	ldb	r3,0(r19)
81121c1c:	003c7f06 	br	81120e1c <__reset+0xfb100e1c>
81121c20:	dac02317 	ldw	r11,140(sp)
81121c24:	0013883a 	mov	r9,zero
81121c28:	5f000017 	ldw	fp,0(r11)
81121c2c:	5ac00104 	addi	r11,r11,4
81121c30:	dac02315 	stw	r11,140(sp)
81121c34:	003d1506 	br	8112108c <__reset+0xfb10108c>
81121c38:	9080100c 	andi	r2,r18,64
81121c3c:	d8001d85 	stb	zero,118(sp)
81121c40:	dac02317 	ldw	r11,140(sp)
81121c44:	10003426 	beq	r2,zero,81121d18 <___svfiprintf_internal_r+0x1040>
81121c48:	58800104 	addi	r2,r11,4
81121c4c:	5f00000b 	ldhu	fp,0(r11)
81121c50:	0013883a 	mov	r9,zero
81121c54:	803e950e 	bge	r16,zero,811216ac <__reset+0xfb1016ac>
81121c58:	e246b03a 	or	r3,fp,r9
81121c5c:	d8802315 	stw	r2,140(sp)
81121c60:	183d5a1e 	bne	r3,zero,811211cc <__reset+0xfb1011cc>
81121c64:	0015883a 	mov	r10,zero
81121c68:	0005883a 	mov	r2,zero
81121c6c:	003fb706 	br	81121b4c <__reset+0xfb101b4c>
81121c70:	98c00043 	ldbu	r3,1(r19)
81121c74:	94800814 	ori	r18,r18,32
81121c78:	9cc00044 	addi	r19,r19,1
81121c7c:	18c03fcc 	andi	r3,r3,255
81121c80:	18c0201c 	xori	r3,r3,128
81121c84:	18ffe004 	addi	r3,r3,-128
81121c88:	003c6406 	br	81120e1c <__reset+0xfb100e1c>
81121c8c:	d8c02315 	stw	r3,140(sp)
81121c90:	0015883a 	mov	r10,zero
81121c94:	003faa06 	br	81121b40 <__reset+0xfb101b40>
81121c98:	dac02317 	ldw	r11,140(sp)
81121c9c:	58800017 	ldw	r2,0(r11)
81121ca0:	5ac00104 	addi	r11,r11,4
81121ca4:	dac02315 	stw	r11,140(sp)
81121ca8:	dac02517 	ldw	r11,148(sp)
81121cac:	12c00015 	stw	r11,0(r2)
81121cb0:	003c3206 	br	81120d7c <__reset+0xfb100d7c>
81121cb4:	01204534 	movhi	r4,33044
81121cb8:	2100c404 	addi	r4,r4,784
81121cbc:	d9002915 	stw	r4,164(sp)
81121cc0:	d8c02315 	stw	r3,140(sp)
81121cc4:	1025883a 	mov	r18,r2
81121cc8:	e244b03a 	or	r2,fp,r9
81121ccc:	103f871e 	bne	r2,zero,81121aec <__reset+0xfb101aec>
81121cd0:	0015883a 	mov	r10,zero
81121cd4:	00800084 	movi	r2,2
81121cd8:	003f9c06 	br	81121b4c <__reset+0xfb101b4c>
81121cdc:	0039883a 	mov	fp,zero
81121ce0:	003e5f06 	br	81121660 <__reset+0xfb101660>
81121ce4:	d9801a04 	addi	r6,sp,104
81121ce8:	b80b883a 	mov	r5,r23
81121cec:	a809883a 	mov	r4,r21
81121cf0:	1120b000 	call	81120b00 <__ssprint_r>
81121cf4:	103f081e 	bne	r2,zero,81121918 <__reset+0xfb101918>
81121cf8:	d8c01c17 	ldw	r3,112(sp)
81121cfc:	d8801b17 	ldw	r2,108(sp)
81121d00:	d811883a 	mov	r8,sp
81121d04:	003e9106 	br	8112174c <__reset+0xfb10174c>
81121d08:	01204534 	movhi	r4,33044
81121d0c:	21014e04 	addi	r4,r4,1336
81121d10:	d9002215 	stw	r4,136(sp)
81121d14:	003ead06 	br	811217cc <__reset+0xfb1017cc>
81121d18:	58800104 	addi	r2,r11,4
81121d1c:	5f000017 	ldw	fp,0(r11)
81121d20:	0013883a 	mov	r9,zero
81121d24:	803e610e 	bge	r16,zero,811216ac <__reset+0xfb1016ac>
81121d28:	003fcb06 	br	81121c58 <__reset+0xfb101c58>
81121d2c:	58800104 	addi	r2,r11,4
81121d30:	5f000017 	ldw	fp,0(r11)
81121d34:	0013883a 	mov	r9,zero
81121d38:	803e420e 	bge	r16,zero,81121644 <__reset+0xfb101644>
81121d3c:	003f7e06 	br	81121b38 <__reset+0xfb101b38>
81121d40:	5f000017 	ldw	fp,0(r11)
81121d44:	5ac00104 	addi	r11,r11,4
81121d48:	0013883a 	mov	r9,zero
81121d4c:	dac02315 	stw	r11,140(sp)
81121d50:	003cce06 	br	8112108c <__reset+0xfb10108c>
81121d54:	8809883a 	mov	r4,r17
81121d58:	da002c15 	stw	r8,176(sp)
81121d5c:	1113ba80 	call	81113ba8 <strlen>
81121d60:	d8802115 	stw	r2,132(sp)
81121d64:	da801d83 	ldbu	r10,118(sp)
81121d68:	df002315 	stw	fp,140(sp)
81121d6c:	0021883a 	mov	r16,zero
81121d70:	da002c17 	ldw	r8,176(sp)
81121d74:	003cf606 	br	81121150 <__reset+0xfb101150>
81121d78:	00800184 	movi	r2,6
81121d7c:	1400012e 	bgeu	r2,r16,81121d84 <___svfiprintf_internal_r+0x10ac>
81121d80:	1021883a 	mov	r16,r2
81121d84:	dc002115 	stw	r16,132(sp)
81121d88:	8005883a 	mov	r2,r16
81121d8c:	80003c16 	blt	r16,zero,81121e80 <___svfiprintf_internal_r+0x11a8>
81121d90:	04604534 	movhi	r17,33044
81121d94:	d8802015 	stw	r2,128(sp)
81121d98:	df002315 	stw	fp,140(sp)
81121d9c:	8c40c904 	addi	r17,r17,804
81121da0:	003d2e06 	br	8112125c <__reset+0xfb10125c>
81121da4:	04001004 	movi	r16,64
81121da8:	800b883a 	mov	r5,r16
81121dac:	11128a00 	call	811128a0 <_malloc_r>
81121db0:	dac02717 	ldw	r11,156(sp)
81121db4:	58800015 	stw	r2,0(r11)
81121db8:	58800415 	stw	r2,16(r11)
81121dbc:	10004826 	beq	r2,zero,81121ee0 <___svfiprintf_internal_r+0x1208>
81121dc0:	dac02717 	ldw	r11,156(sp)
81121dc4:	5c000515 	stw	r16,20(r11)
81121dc8:	003bd906 	br	81120d30 <__reset+0xfb100d30>
81121dcc:	9080004c 	andi	r2,r18,1
81121dd0:	0015883a 	mov	r10,zero
81121dd4:	10000626 	beq	r2,zero,81121df0 <___svfiprintf_internal_r+0x1118>
81121dd8:	dac02b17 	ldw	r11,172(sp)
81121ddc:	00800c04 	movi	r2,48
81121de0:	d88019c5 	stb	r2,103(sp)
81121de4:	dac02115 	stw	r11,132(sp)
81121de8:	dc4019c4 	addi	r17,sp,103
81121dec:	003cd806 	br	81121150 <__reset+0xfb101150>
81121df0:	d8002115 	stw	zero,132(sp)
81121df4:	dc401a04 	addi	r17,sp,104
81121df8:	003cd506 	br	81121150 <__reset+0xfb101150>
81121dfc:	01204534 	movhi	r4,33044
81121e00:	21015204 	addi	r4,r4,1352
81121e04:	d9002815 	stw	r4,160(sp)
81121e08:	003d4306 	br	81121318 <__reset+0xfb101318>
81121e0c:	00bfffc4 	movi	r2,-1
81121e10:	003ec606 	br	8112192c <__reset+0xfb10192c>
81121e14:	00800044 	movi	r2,1
81121e18:	10803fcc 	andi	r2,r2,255
81121e1c:	00c00044 	movi	r3,1
81121e20:	10fd8026 	beq	r2,r3,81121424 <__reset+0xfb101424>
81121e24:	00c00084 	movi	r3,2
81121e28:	10fca426 	beq	r2,r3,811210bc <__reset+0xfb1010bc>
81121e2c:	003ce806 	br	811211d0 <__reset+0xfb1011d0>
81121e30:	01204534 	movhi	r4,33044
81121e34:	21015204 	addi	r4,r4,1352
81121e38:	d9002815 	stw	r4,160(sp)
81121e3c:	003e9906 	br	811218a4 <__reset+0xfb1018a4>
81121e40:	1025883a 	mov	r18,r2
81121e44:	0015883a 	mov	r10,zero
81121e48:	00800084 	movi	r2,2
81121e4c:	003ff206 	br	81121e18 <__reset+0xfb101e18>
81121e50:	01604534 	movhi	r5,33044
81121e54:	29414e04 	addi	r5,r5,1336
81121e58:	d9402215 	stw	r5,136(sp)
81121e5c:	003ee206 	br	811219e8 <__reset+0xfb1019e8>
81121e60:	5827883a 	mov	r19,r11
81121e64:	0021883a 	mov	r16,zero
81121e68:	003bed06 	br	81120e20 <__reset+0xfb100e20>
81121e6c:	dc002115 	stw	r16,132(sp)
81121e70:	da801d83 	ldbu	r10,118(sp)
81121e74:	df002315 	stw	fp,140(sp)
81121e78:	0021883a 	mov	r16,zero
81121e7c:	003cb406 	br	81121150 <__reset+0xfb101150>
81121e80:	0005883a 	mov	r2,zero
81121e84:	003fc206 	br	81121d90 <__reset+0xfb101d90>
81121e88:	d8802317 	ldw	r2,140(sp)
81121e8c:	98c00043 	ldbu	r3,1(r19)
81121e90:	5827883a 	mov	r19,r11
81121e94:	14000017 	ldw	r16,0(r2)
81121e98:	10800104 	addi	r2,r2,4
81121e9c:	d8802315 	stw	r2,140(sp)
81121ea0:	803f760e 	bge	r16,zero,81121c7c <__reset+0xfb101c7c>
81121ea4:	18c03fcc 	andi	r3,r3,255
81121ea8:	18c0201c 	xori	r3,r3,128
81121eac:	043fffc4 	movi	r16,-1
81121eb0:	18ffe004 	addi	r3,r3,-128
81121eb4:	003bd906 	br	81120e1c <__reset+0xfb100e1c>
81121eb8:	d9c01d85 	stb	r7,118(sp)
81121ebc:	003cb606 	br	81121198 <__reset+0xfb101198>
81121ec0:	d9c01d85 	stb	r7,118(sp)
81121ec4:	003d2106 	br	8112134c <__reset+0xfb10134c>
81121ec8:	d9c01d85 	stb	r7,118(sp)
81121ecc:	003d8e06 	br	81121508 <__reset+0xfb101508>
81121ed0:	d9c01d85 	stb	r7,118(sp)
81121ed4:	003db306 	br	811215a4 <__reset+0xfb1015a4>
81121ed8:	d9c01d85 	stb	r7,118(sp)
81121edc:	003c8a06 	br	81121108 <__reset+0xfb101108>
81121ee0:	dac02a17 	ldw	r11,168(sp)
81121ee4:	00800304 	movi	r2,12
81121ee8:	58800015 	stw	r2,0(r11)
81121eec:	00bfffc4 	movi	r2,-1
81121ef0:	003e8e06 	br	8112192c <__reset+0xfb10192c>
81121ef4:	d9c01d85 	stb	r7,118(sp)
81121ef8:	003dc706 	br	81121618 <__reset+0xfb101618>
81121efc:	d9c01d85 	stb	r7,118(sp)
81121f00:	003ddf06 	br	81121680 <__reset+0xfb101680>
81121f04:	d9c01d85 	stb	r7,118(sp)
81121f08:	003d3706 	br	811213e8 <__reset+0xfb1013e8>
81121f0c:	d9c01d85 	stb	r7,118(sp)
81121f10:	003c5406 	br	81121064 <__reset+0xfb101064>
81121f14:	d9c01d85 	stb	r7,118(sp)
81121f18:	003d1d06 	br	81121390 <__reset+0xfb101390>

81121f1c <__submore>:
81121f1c:	defffa04 	addi	sp,sp,-24
81121f20:	de00012e 	bgeu	sp,et,81121f28 <__submore+0xc>
81121f24:	003b68fa 	trap	3
81121f28:	dc000015 	stw	r16,0(sp)
81121f2c:	2821883a 	mov	r16,r5
81121f30:	29400c17 	ldw	r5,48(r5)
81121f34:	dfc00515 	stw	ra,20(sp)
81121f38:	dd000415 	stw	r20,16(sp)
81121f3c:	dcc00315 	stw	r19,12(sp)
81121f40:	dc800215 	stw	r18,8(sp)
81121f44:	dc400115 	stw	r17,4(sp)
81121f48:	80801004 	addi	r2,r16,64
81121f4c:	28801726 	beq	r5,r2,81121fac <__submore+0x90>
81121f50:	84400d17 	ldw	r17,52(r16)
81121f54:	8c67883a 	add	r19,r17,r17
81121f58:	980d883a 	mov	r6,r19
81121f5c:	111e3a80 	call	8111e3a8 <_realloc_r>
81121f60:	1025883a 	mov	r18,r2
81121f64:	10002226 	beq	r2,zero,81121ff0 <__submore+0xd4>
81121f68:	1469883a 	add	r20,r2,r17
81121f6c:	880d883a 	mov	r6,r17
81121f70:	100b883a 	mov	r5,r2
81121f74:	a009883a 	mov	r4,r20
81121f78:	11130b40 	call	811130b4 <memcpy>
81121f7c:	0005883a 	mov	r2,zero
81121f80:	85000015 	stw	r20,0(r16)
81121f84:	84800c15 	stw	r18,48(r16)
81121f88:	84c00d15 	stw	r19,52(r16)
81121f8c:	dfc00517 	ldw	ra,20(sp)
81121f90:	dd000417 	ldw	r20,16(sp)
81121f94:	dcc00317 	ldw	r19,12(sp)
81121f98:	dc800217 	ldw	r18,8(sp)
81121f9c:	dc400117 	ldw	r17,4(sp)
81121fa0:	dc000017 	ldw	r16,0(sp)
81121fa4:	dec00604 	addi	sp,sp,24
81121fa8:	f800283a 	ret
81121fac:	04410004 	movi	r17,1024
81121fb0:	880b883a 	mov	r5,r17
81121fb4:	11128a00 	call	811128a0 <_malloc_r>
81121fb8:	1007883a 	mov	r3,r2
81121fbc:	10000c26 	beq	r2,zero,81121ff0 <__submore+0xd4>
81121fc0:	80801083 	ldbu	r2,66(r16)
81121fc4:	80c00c15 	stw	r3,48(r16)
81121fc8:	84400d15 	stw	r17,52(r16)
81121fcc:	1880ffc5 	stb	r2,1023(r3)
81121fd0:	81401043 	ldbu	r5,65(r16)
81121fd4:	1900ff44 	addi	r4,r3,1021
81121fd8:	0005883a 	mov	r2,zero
81121fdc:	1940ff85 	stb	r5,1022(r3)
81121fe0:	81401003 	ldbu	r5,64(r16)
81121fe4:	1940ff45 	stb	r5,1021(r3)
81121fe8:	81000015 	stw	r4,0(r16)
81121fec:	003fe706 	br	81121f8c <__reset+0xfb101f8c>
81121ff0:	00bfffc4 	movi	r2,-1
81121ff4:	003fe506 	br	81121f8c <__reset+0xfb101f8c>

81121ff8 <_ungetc_r>:
81121ff8:	00bfffc4 	movi	r2,-1
81121ffc:	28806326 	beq	r5,r2,8112218c <_ungetc_r+0x194>
81122000:	defffb04 	addi	sp,sp,-20
81122004:	de00012e 	bgeu	sp,et,8112200c <_ungetc_r+0x14>
81122008:	003b68fa 	trap	3
8112200c:	dcc00315 	stw	r19,12(sp)
81122010:	dc400115 	stw	r17,4(sp)
81122014:	dc000015 	stw	r16,0(sp)
81122018:	dfc00415 	stw	ra,16(sp)
8112201c:	dc800215 	stw	r18,8(sp)
81122020:	2023883a 	mov	r17,r4
81122024:	3021883a 	mov	r16,r6
81122028:	2827883a 	mov	r19,r5
8112202c:	20000226 	beq	r4,zero,81122038 <_ungetc_r+0x40>
81122030:	20800e17 	ldw	r2,56(r4)
81122034:	10002e26 	beq	r2,zero,811220f0 <_ungetc_r+0xf8>
81122038:	80c0030b 	ldhu	r3,12(r16)
8112203c:	1888000c 	andi	r2,r3,8192
81122040:	1000051e 	bne	r2,zero,81122058 <_ungetc_r+0x60>
81122044:	81001917 	ldw	r4,100(r16)
81122048:	00b7ffc4 	movi	r2,-8193
8112204c:	18c80014 	ori	r3,r3,8192
81122050:	2084703a 	and	r2,r4,r2
81122054:	80801915 	stw	r2,100(r16)
81122058:	00bff7c4 	movi	r2,-33
8112205c:	1884703a 	and	r2,r3,r2
81122060:	8080030d 	sth	r2,12(r16)
81122064:	1900010c 	andi	r4,r3,4
81122068:	2000061e 	bne	r4,zero,81122084 <_ungetc_r+0x8c>
8112206c:	1900040c 	andi	r4,r3,16
81122070:	20001d26 	beq	r4,zero,811220e8 <_ungetc_r+0xf0>
81122074:	18c0020c 	andi	r3,r3,8
81122078:	1800331e 	bne	r3,zero,81122148 <_ungetc_r+0x150>
8112207c:	10800114 	ori	r2,r2,4
81122080:	8080030d 	sth	r2,12(r16)
81122084:	80800c17 	ldw	r2,48(r16)
81122088:	9c803fcc 	andi	r18,r19,255
8112208c:	10001a26 	beq	r2,zero,811220f8 <_ungetc_r+0x100>
81122090:	80c00117 	ldw	r3,4(r16)
81122094:	80800d17 	ldw	r2,52(r16)
81122098:	18800f0e 	bge	r3,r2,811220d8 <_ungetc_r+0xe0>
8112209c:	80c00017 	ldw	r3,0(r16)
811220a0:	9005883a 	mov	r2,r18
811220a4:	193fffc4 	addi	r4,r3,-1
811220a8:	81000015 	stw	r4,0(r16)
811220ac:	1cffffc5 	stb	r19,-1(r3)
811220b0:	80c00117 	ldw	r3,4(r16)
811220b4:	18c00044 	addi	r3,r3,1
811220b8:	80c00115 	stw	r3,4(r16)
811220bc:	dfc00417 	ldw	ra,16(sp)
811220c0:	dcc00317 	ldw	r19,12(sp)
811220c4:	dc800217 	ldw	r18,8(sp)
811220c8:	dc400117 	ldw	r17,4(sp)
811220cc:	dc000017 	ldw	r16,0(sp)
811220d0:	dec00504 	addi	sp,sp,20
811220d4:	f800283a 	ret
811220d8:	800b883a 	mov	r5,r16
811220dc:	8809883a 	mov	r4,r17
811220e0:	1121f1c0 	call	81121f1c <__submore>
811220e4:	103fed26 	beq	r2,zero,8112209c <__reset+0xfb10209c>
811220e8:	00bfffc4 	movi	r2,-1
811220ec:	003ff306 	br	811220bc <__reset+0xfb1020bc>
811220f0:	111be7c0 	call	8111be7c <__sinit>
811220f4:	003fd006 	br	81122038 <__reset+0xfb102038>
811220f8:	80c00417 	ldw	r3,16(r16)
811220fc:	80800017 	ldw	r2,0(r16)
81122100:	18000326 	beq	r3,zero,81122110 <_ungetc_r+0x118>
81122104:	1880022e 	bgeu	r3,r2,81122110 <_ungetc_r+0x118>
81122108:	10ffffc3 	ldbu	r3,-1(r2)
8112210c:	90c01826 	beq	r18,r3,81122170 <_ungetc_r+0x178>
81122110:	81400117 	ldw	r5,4(r16)
81122114:	80800e15 	stw	r2,56(r16)
81122118:	008000c4 	movi	r2,3
8112211c:	81001004 	addi	r4,r16,64
81122120:	80c01084 	addi	r3,r16,66
81122124:	80800d15 	stw	r2,52(r16)
81122128:	00800044 	movi	r2,1
8112212c:	80800115 	stw	r2,4(r16)
81122130:	81400f15 	stw	r5,60(r16)
81122134:	81000c15 	stw	r4,48(r16)
81122138:	84c01085 	stb	r19,66(r16)
8112213c:	80c00015 	stw	r3,0(r16)
81122140:	9005883a 	mov	r2,r18
81122144:	003fdd06 	br	811220bc <__reset+0xfb1020bc>
81122148:	800b883a 	mov	r5,r16
8112214c:	8809883a 	mov	r4,r17
81122150:	111ba800 	call	8111ba80 <_fflush_r>
81122154:	103fe41e 	bne	r2,zero,811220e8 <__reset+0xfb1020e8>
81122158:	8080030b 	ldhu	r2,12(r16)
8112215c:	00fffdc4 	movi	r3,-9
81122160:	80000215 	stw	zero,8(r16)
81122164:	1884703a 	and	r2,r3,r2
81122168:	80000615 	stw	zero,24(r16)
8112216c:	003fc306 	br	8112207c <__reset+0xfb10207c>
81122170:	80c00117 	ldw	r3,4(r16)
81122174:	10bfffc4 	addi	r2,r2,-1
81122178:	80800015 	stw	r2,0(r16)
8112217c:	18800044 	addi	r2,r3,1
81122180:	80800115 	stw	r2,4(r16)
81122184:	9005883a 	mov	r2,r18
81122188:	003fcc06 	br	811220bc <__reset+0xfb1020bc>
8112218c:	00bfffc4 	movi	r2,-1
81122190:	f800283a 	ret

81122194 <ungetc>:
81122194:	00a04534 	movhi	r2,33044
81122198:	108aa604 	addi	r2,r2,10904
8112219c:	280d883a 	mov	r6,r5
811221a0:	200b883a 	mov	r5,r4
811221a4:	11000017 	ldw	r4,0(r2)
811221a8:	1121ff81 	jmpi	81121ff8 <_ungetc_r>

811221ac <__sprint_r.part.0>:
811221ac:	defff604 	addi	sp,sp,-40
811221b0:	de00012e 	bgeu	sp,et,811221b8 <__sprint_r.part.0+0xc>
811221b4:	003b68fa 	trap	3
811221b8:	28801917 	ldw	r2,100(r5)
811221bc:	dd400515 	stw	r21,20(sp)
811221c0:	dfc00915 	stw	ra,36(sp)
811221c4:	df000815 	stw	fp,32(sp)
811221c8:	ddc00715 	stw	r23,28(sp)
811221cc:	dd800615 	stw	r22,24(sp)
811221d0:	dd000415 	stw	r20,16(sp)
811221d4:	dcc00315 	stw	r19,12(sp)
811221d8:	dc800215 	stw	r18,8(sp)
811221dc:	dc400115 	stw	r17,4(sp)
811221e0:	dc000015 	stw	r16,0(sp)
811221e4:	1088000c 	andi	r2,r2,8192
811221e8:	302b883a 	mov	r21,r6
811221ec:	10002e26 	beq	r2,zero,811222a8 <__sprint_r.part.0+0xfc>
811221f0:	30800217 	ldw	r2,8(r6)
811221f4:	35800017 	ldw	r22,0(r6)
811221f8:	10002926 	beq	r2,zero,811222a0 <__sprint_r.part.0+0xf4>
811221fc:	2827883a 	mov	r19,r5
81122200:	2029883a 	mov	r20,r4
81122204:	b5c00104 	addi	r23,r22,4
81122208:	04bfffc4 	movi	r18,-1
8112220c:	bc400017 	ldw	r17,0(r23)
81122210:	b4000017 	ldw	r16,0(r22)
81122214:	0039883a 	mov	fp,zero
81122218:	8822d0ba 	srli	r17,r17,2
8112221c:	8800031e 	bne	r17,zero,8112222c <__sprint_r.part.0+0x80>
81122220:	00001806 	br	81122284 <__sprint_r.part.0+0xd8>
81122224:	84000104 	addi	r16,r16,4
81122228:	8f001526 	beq	r17,fp,81122280 <__sprint_r.part.0+0xd4>
8112222c:	81400017 	ldw	r5,0(r16)
81122230:	980d883a 	mov	r6,r19
81122234:	a009883a 	mov	r4,r20
81122238:	1123b500 	call	81123b50 <_fputwc_r>
8112223c:	e7000044 	addi	fp,fp,1
81122240:	14bff81e 	bne	r2,r18,81122224 <__reset+0xfb102224>
81122244:	9005883a 	mov	r2,r18
81122248:	a8000215 	stw	zero,8(r21)
8112224c:	a8000115 	stw	zero,4(r21)
81122250:	dfc00917 	ldw	ra,36(sp)
81122254:	df000817 	ldw	fp,32(sp)
81122258:	ddc00717 	ldw	r23,28(sp)
8112225c:	dd800617 	ldw	r22,24(sp)
81122260:	dd400517 	ldw	r21,20(sp)
81122264:	dd000417 	ldw	r20,16(sp)
81122268:	dcc00317 	ldw	r19,12(sp)
8112226c:	dc800217 	ldw	r18,8(sp)
81122270:	dc400117 	ldw	r17,4(sp)
81122274:	dc000017 	ldw	r16,0(sp)
81122278:	dec00a04 	addi	sp,sp,40
8112227c:	f800283a 	ret
81122280:	a8800217 	ldw	r2,8(r21)
81122284:	8c63883a 	add	r17,r17,r17
81122288:	8c63883a 	add	r17,r17,r17
8112228c:	1445c83a 	sub	r2,r2,r17
81122290:	a8800215 	stw	r2,8(r21)
81122294:	b5800204 	addi	r22,r22,8
81122298:	bdc00204 	addi	r23,r23,8
8112229c:	103fdb1e 	bne	r2,zero,8112220c <__reset+0xfb10220c>
811222a0:	0005883a 	mov	r2,zero
811222a4:	003fe806 	br	81122248 <__reset+0xfb102248>
811222a8:	111c62c0 	call	8111c62c <__sfvwrite_r>
811222ac:	003fe606 	br	81122248 <__reset+0xfb102248>

811222b0 <__sprint_r>:
811222b0:	30c00217 	ldw	r3,8(r6)
811222b4:	18000126 	beq	r3,zero,811222bc <__sprint_r+0xc>
811222b8:	11221ac1 	jmpi	811221ac <__sprint_r.part.0>
811222bc:	30000115 	stw	zero,4(r6)
811222c0:	0005883a 	mov	r2,zero
811222c4:	f800283a 	ret

811222c8 <___vfiprintf_internal_r>:
811222c8:	deffc904 	addi	sp,sp,-220
811222cc:	de00012e 	bgeu	sp,et,811222d4 <___vfiprintf_internal_r+0xc>
811222d0:	003b68fa 	trap	3
811222d4:	df003515 	stw	fp,212(sp)
811222d8:	dd003115 	stw	r20,196(sp)
811222dc:	dfc03615 	stw	ra,216(sp)
811222e0:	ddc03415 	stw	r23,208(sp)
811222e4:	dd803315 	stw	r22,204(sp)
811222e8:	dd403215 	stw	r21,200(sp)
811222ec:	dcc03015 	stw	r19,192(sp)
811222f0:	dc802f15 	stw	r18,188(sp)
811222f4:	dc402e15 	stw	r17,184(sp)
811222f8:	dc002d15 	stw	r16,180(sp)
811222fc:	d9002015 	stw	r4,128(sp)
81122300:	d9c02215 	stw	r7,136(sp)
81122304:	2829883a 	mov	r20,r5
81122308:	3039883a 	mov	fp,r6
8112230c:	20000226 	beq	r4,zero,81122318 <___vfiprintf_internal_r+0x50>
81122310:	20800e17 	ldw	r2,56(r4)
81122314:	1000cf26 	beq	r2,zero,81122654 <___vfiprintf_internal_r+0x38c>
81122318:	a080030b 	ldhu	r2,12(r20)
8112231c:	10c8000c 	andi	r3,r2,8192
81122320:	1800061e 	bne	r3,zero,8112233c <___vfiprintf_internal_r+0x74>
81122324:	a1001917 	ldw	r4,100(r20)
81122328:	00f7ffc4 	movi	r3,-8193
8112232c:	10880014 	ori	r2,r2,8192
81122330:	20c6703a 	and	r3,r4,r3
81122334:	a080030d 	sth	r2,12(r20)
81122338:	a0c01915 	stw	r3,100(r20)
8112233c:	10c0020c 	andi	r3,r2,8
81122340:	1800a926 	beq	r3,zero,811225e8 <___vfiprintf_internal_r+0x320>
81122344:	a0c00417 	ldw	r3,16(r20)
81122348:	1800a726 	beq	r3,zero,811225e8 <___vfiprintf_internal_r+0x320>
8112234c:	1080068c 	andi	r2,r2,26
81122350:	00c00284 	movi	r3,10
81122354:	10c0ac26 	beq	r2,r3,81122608 <___vfiprintf_internal_r+0x340>
81122358:	da801a04 	addi	r10,sp,104
8112235c:	da801e15 	stw	r10,120(sp)
81122360:	d8801e17 	ldw	r2,120(sp)
81122364:	da8019c4 	addi	r10,sp,103
81122368:	05a04534 	movhi	r22,33044
8112236c:	05e04534 	movhi	r23,33044
81122370:	da801f15 	stw	r10,124(sp)
81122374:	1295c83a 	sub	r10,r2,r10
81122378:	b5815a04 	addi	r22,r22,1384
8112237c:	bdc15604 	addi	r23,r23,1368
81122380:	dec01a15 	stw	sp,104(sp)
81122384:	d8001c15 	stw	zero,112(sp)
81122388:	d8001b15 	stw	zero,108(sp)
8112238c:	d8002615 	stw	zero,152(sp)
81122390:	d8002315 	stw	zero,140(sp)
81122394:	da802715 	stw	r10,156(sp)
81122398:	d811883a 	mov	r8,sp
8112239c:	dd002115 	stw	r20,132(sp)
811223a0:	e021883a 	mov	r16,fp
811223a4:	80800007 	ldb	r2,0(r16)
811223a8:	1003ea26 	beq	r2,zero,81123354 <___vfiprintf_internal_r+0x108c>
811223ac:	00c00944 	movi	r3,37
811223b0:	8025883a 	mov	r18,r16
811223b4:	10c0021e 	bne	r2,r3,811223c0 <___vfiprintf_internal_r+0xf8>
811223b8:	00001606 	br	81122414 <___vfiprintf_internal_r+0x14c>
811223bc:	10c00326 	beq	r2,r3,811223cc <___vfiprintf_internal_r+0x104>
811223c0:	94800044 	addi	r18,r18,1
811223c4:	90800007 	ldb	r2,0(r18)
811223c8:	103ffc1e 	bne	r2,zero,811223bc <__reset+0xfb1023bc>
811223cc:	9423c83a 	sub	r17,r18,r16
811223d0:	88001026 	beq	r17,zero,81122414 <___vfiprintf_internal_r+0x14c>
811223d4:	d8c01c17 	ldw	r3,112(sp)
811223d8:	d8801b17 	ldw	r2,108(sp)
811223dc:	44000015 	stw	r16,0(r8)
811223e0:	88c7883a 	add	r3,r17,r3
811223e4:	10800044 	addi	r2,r2,1
811223e8:	44400115 	stw	r17,4(r8)
811223ec:	d8c01c15 	stw	r3,112(sp)
811223f0:	d8801b15 	stw	r2,108(sp)
811223f4:	010001c4 	movi	r4,7
811223f8:	2080760e 	bge	r4,r2,811225d4 <___vfiprintf_internal_r+0x30c>
811223fc:	1803821e 	bne	r3,zero,81123208 <___vfiprintf_internal_r+0xf40>
81122400:	da802317 	ldw	r10,140(sp)
81122404:	d8001b15 	stw	zero,108(sp)
81122408:	d811883a 	mov	r8,sp
8112240c:	5455883a 	add	r10,r10,r17
81122410:	da802315 	stw	r10,140(sp)
81122414:	90800007 	ldb	r2,0(r18)
81122418:	10044626 	beq	r2,zero,81123534 <___vfiprintf_internal_r+0x126c>
8112241c:	90c00047 	ldb	r3,1(r18)
81122420:	94000044 	addi	r16,r18,1
81122424:	d8001d85 	stb	zero,118(sp)
81122428:	0009883a 	mov	r4,zero
8112242c:	000f883a 	mov	r7,zero
81122430:	027fffc4 	movi	r9,-1
81122434:	0023883a 	mov	r17,zero
81122438:	0029883a 	mov	r20,zero
8112243c:	01401604 	movi	r5,88
81122440:	01800244 	movi	r6,9
81122444:	03400a84 	movi	r13,42
81122448:	03001b04 	movi	r12,108
8112244c:	84000044 	addi	r16,r16,1
81122450:	18bff804 	addi	r2,r3,-32
81122454:	28827336 	bltu	r5,r2,81122e24 <___vfiprintf_internal_r+0xb5c>
81122458:	100490ba 	slli	r2,r2,2
8112245c:	02a044b4 	movhi	r10,33042
81122460:	52891c04 	addi	r10,r10,9328
81122464:	1285883a 	add	r2,r2,r10
81122468:	10800017 	ldw	r2,0(r2)
8112246c:	1000683a 	jmp	r2
81122470:	81122b58 	cmpnei	r4,r16,18605
81122474:	81122e24 	muli	r4,r16,18616
81122478:	81122e24 	muli	r4,r16,18616
8112247c:	81122b78 	rdprs	r4,r16,18605
81122480:	81122e24 	muli	r4,r16,18616
81122484:	81122e24 	muli	r4,r16,18616
81122488:	81122e24 	muli	r4,r16,18616
8112248c:	81122e24 	muli	r4,r16,18616
81122490:	81122e24 	muli	r4,r16,18616
81122494:	81122e24 	muli	r4,r16,18616
81122498:	81122d60 	cmpeqi	r4,r16,18613
8112249c:	81122d7c 	xorhi	r4,r16,18613
811224a0:	81122e24 	muli	r4,r16,18616
811224a4:	81122664 	muli	r4,r16,18585
811224a8:	81122d8c 	andi	r4,r16,18614
811224ac:	81122e24 	muli	r4,r16,18616
811224b0:	81122b84 	addi	r4,r16,18606
811224b4:	81122b90 	cmplti	r4,r16,18606
811224b8:	81122b90 	cmplti	r4,r16,18606
811224bc:	81122b90 	cmplti	r4,r16,18606
811224c0:	81122b90 	cmplti	r4,r16,18606
811224c4:	81122b90 	cmplti	r4,r16,18606
811224c8:	81122b90 	cmplti	r4,r16,18606
811224cc:	81122b90 	cmplti	r4,r16,18606
811224d0:	81122b90 	cmplti	r4,r16,18606
811224d4:	81122b90 	cmplti	r4,r16,18606
811224d8:	81122e24 	muli	r4,r16,18616
811224dc:	81122e24 	muli	r4,r16,18616
811224e0:	81122e24 	muli	r4,r16,18616
811224e4:	81122e24 	muli	r4,r16,18616
811224e8:	81122e24 	muli	r4,r16,18616
811224ec:	81122e24 	muli	r4,r16,18616
811224f0:	81122e24 	muli	r4,r16,18616
811224f4:	81122e24 	muli	r4,r16,18616
811224f8:	81122e24 	muli	r4,r16,18616
811224fc:	81122e24 	muli	r4,r16,18616
81122500:	81122bbc 	xorhi	r4,r16,18606
81122504:	81122e24 	muli	r4,r16,18616
81122508:	81122e24 	muli	r4,r16,18616
8112250c:	81122e24 	muli	r4,r16,18616
81122510:	81122e24 	muli	r4,r16,18616
81122514:	81122e24 	muli	r4,r16,18616
81122518:	81122e24 	muli	r4,r16,18616
8112251c:	81122e24 	muli	r4,r16,18616
81122520:	81122e24 	muli	r4,r16,18616
81122524:	81122e24 	muli	r4,r16,18616
81122528:	81122e24 	muli	r4,r16,18616
8112252c:	81122bf4 	orhi	r4,r16,18607
81122530:	81122e24 	muli	r4,r16,18616
81122534:	81122e24 	muli	r4,r16,18616
81122538:	81122e24 	muli	r4,r16,18616
8112253c:	81122e24 	muli	r4,r16,18616
81122540:	81122e24 	muli	r4,r16,18616
81122544:	81122c4c 	andi	r4,r16,18609
81122548:	81122e24 	muli	r4,r16,18616
8112254c:	81122e24 	muli	r4,r16,18616
81122550:	81122cbc 	xorhi	r4,r16,18610
81122554:	81122e24 	muli	r4,r16,18616
81122558:	81122e24 	muli	r4,r16,18616
8112255c:	81122e24 	muli	r4,r16,18616
81122560:	81122e24 	muli	r4,r16,18616
81122564:	81122e24 	muli	r4,r16,18616
81122568:	81122e24 	muli	r4,r16,18616
8112256c:	81122e24 	muli	r4,r16,18616
81122570:	81122e24 	muli	r4,r16,18616
81122574:	81122e24 	muli	r4,r16,18616
81122578:	81122e24 	muli	r4,r16,18616
8112257c:	81122a68 	cmpgeui	r4,r16,18601
81122580:	81122a94 	ori	r4,r16,18602
81122584:	81122e24 	muli	r4,r16,18616
81122588:	81122e24 	muli	r4,r16,18616
8112258c:	81122e24 	muli	r4,r16,18616
81122590:	81122dcc 	andi	r4,r16,18615
81122594:	81122a94 	ori	r4,r16,18602
81122598:	81122e24 	muli	r4,r16,18616
8112259c:	81122e24 	muli	r4,r16,18616
811225a0:	81122928 	cmpgeui	r4,r16,18596
811225a4:	81122e24 	muli	r4,r16,18616
811225a8:	81122938 	rdprs	r4,r16,18596
811225ac:	81122974 	orhi	r4,r16,18597
811225b0:	81122670 	cmpltui	r4,r16,18585
811225b4:	8112291c 	xori	r4,r16,18596
811225b8:	81122e24 	muli	r4,r16,18616
811225bc:	81122cf8 	rdprs	r4,r16,18611
811225c0:	81122e24 	muli	r4,r16,18616
811225c4:	81122d50 	cmplti	r4,r16,18613
811225c8:	81122e24 	muli	r4,r16,18616
811225cc:	81122e24 	muli	r4,r16,18616
811225d0:	81122a14 	ori	r4,r16,18600
811225d4:	42000204 	addi	r8,r8,8
811225d8:	da802317 	ldw	r10,140(sp)
811225dc:	5455883a 	add	r10,r10,r17
811225e0:	da802315 	stw	r10,140(sp)
811225e4:	003f8b06 	br	81122414 <__reset+0xfb102414>
811225e8:	d9002017 	ldw	r4,128(sp)
811225ec:	a00b883a 	mov	r5,r20
811225f0:	1119e0c0 	call	81119e0c <__swsetup_r>
811225f4:	1003b11e 	bne	r2,zero,811234bc <___vfiprintf_internal_r+0x11f4>
811225f8:	a080030b 	ldhu	r2,12(r20)
811225fc:	00c00284 	movi	r3,10
81122600:	1080068c 	andi	r2,r2,26
81122604:	10ff541e 	bne	r2,r3,81122358 <__reset+0xfb102358>
81122608:	a080038f 	ldh	r2,14(r20)
8112260c:	103f5216 	blt	r2,zero,81122358 <__reset+0xfb102358>
81122610:	d9c02217 	ldw	r7,136(sp)
81122614:	d9002017 	ldw	r4,128(sp)
81122618:	e00d883a 	mov	r6,fp
8112261c:	a00b883a 	mov	r5,r20
81122620:	11237480 	call	81123748 <__sbprintf>
81122624:	dfc03617 	ldw	ra,216(sp)
81122628:	df003517 	ldw	fp,212(sp)
8112262c:	ddc03417 	ldw	r23,208(sp)
81122630:	dd803317 	ldw	r22,204(sp)
81122634:	dd403217 	ldw	r21,200(sp)
81122638:	dd003117 	ldw	r20,196(sp)
8112263c:	dcc03017 	ldw	r19,192(sp)
81122640:	dc802f17 	ldw	r18,188(sp)
81122644:	dc402e17 	ldw	r17,184(sp)
81122648:	dc002d17 	ldw	r16,180(sp)
8112264c:	dec03704 	addi	sp,sp,220
81122650:	f800283a 	ret
81122654:	111be7c0 	call	8111be7c <__sinit>
81122658:	003f2f06 	br	81122318 <__reset+0xfb102318>
8112265c:	0463c83a 	sub	r17,zero,r17
81122660:	d8802215 	stw	r2,136(sp)
81122664:	a5000114 	ori	r20,r20,4
81122668:	80c00007 	ldb	r3,0(r16)
8112266c:	003f7706 	br	8112244c <__reset+0xfb10244c>
81122670:	00800c04 	movi	r2,48
81122674:	da802217 	ldw	r10,136(sp)
81122678:	d8801d05 	stb	r2,116(sp)
8112267c:	00801e04 	movi	r2,120
81122680:	d8801d45 	stb	r2,117(sp)
81122684:	d8001d85 	stb	zero,118(sp)
81122688:	50c00104 	addi	r3,r10,4
8112268c:	54800017 	ldw	r18,0(r10)
81122690:	0027883a 	mov	r19,zero
81122694:	a0800094 	ori	r2,r20,2
81122698:	48030b16 	blt	r9,zero,811232c8 <___vfiprintf_internal_r+0x1000>
8112269c:	00bfdfc4 	movi	r2,-129
811226a0:	a096703a 	and	r11,r20,r2
811226a4:	d8c02215 	stw	r3,136(sp)
811226a8:	5d000094 	ori	r20,r11,2
811226ac:	90032b1e 	bne	r18,zero,8112335c <___vfiprintf_internal_r+0x1094>
811226b0:	00a04534 	movhi	r2,33044
811226b4:	1080c404 	addi	r2,r2,784
811226b8:	d8802615 	stw	r2,152(sp)
811226bc:	0039883a 	mov	fp,zero
811226c0:	48017b1e 	bne	r9,zero,81122cb0 <___vfiprintf_internal_r+0x9e8>
811226c4:	0013883a 	mov	r9,zero
811226c8:	0027883a 	mov	r19,zero
811226cc:	dd401a04 	addi	r21,sp,104
811226d0:	4825883a 	mov	r18,r9
811226d4:	4cc0010e 	bge	r9,r19,811226dc <___vfiprintf_internal_r+0x414>
811226d8:	9825883a 	mov	r18,r19
811226dc:	e7003fcc 	andi	fp,fp,255
811226e0:	e700201c 	xori	fp,fp,128
811226e4:	e73fe004 	addi	fp,fp,-128
811226e8:	e0000126 	beq	fp,zero,811226f0 <___vfiprintf_internal_r+0x428>
811226ec:	94800044 	addi	r18,r18,1
811226f0:	a380008c 	andi	r14,r20,2
811226f4:	70000126 	beq	r14,zero,811226fc <___vfiprintf_internal_r+0x434>
811226f8:	94800084 	addi	r18,r18,2
811226fc:	a700210c 	andi	fp,r20,132
81122700:	e001df1e 	bne	fp,zero,81122e80 <___vfiprintf_internal_r+0xbb8>
81122704:	8c87c83a 	sub	r3,r17,r18
81122708:	00c1dd0e 	bge	zero,r3,81122e80 <___vfiprintf_internal_r+0xbb8>
8112270c:	01c00404 	movi	r7,16
81122710:	d8801c17 	ldw	r2,112(sp)
81122714:	38c3ad0e 	bge	r7,r3,811235cc <___vfiprintf_internal_r+0x1304>
81122718:	02a04534 	movhi	r10,33044
8112271c:	52815a04 	addi	r10,r10,1384
81122720:	dc002915 	stw	r16,164(sp)
81122724:	d9801b17 	ldw	r6,108(sp)
81122728:	da802415 	stw	r10,144(sp)
8112272c:	03c001c4 	movi	r15,7
81122730:	da402515 	stw	r9,148(sp)
81122734:	db802815 	stw	r14,160(sp)
81122738:	1821883a 	mov	r16,r3
8112273c:	00000506 	br	81122754 <___vfiprintf_internal_r+0x48c>
81122740:	31400084 	addi	r5,r6,2
81122744:	42000204 	addi	r8,r8,8
81122748:	200d883a 	mov	r6,r4
8112274c:	843ffc04 	addi	r16,r16,-16
81122750:	3c000d0e 	bge	r7,r16,81122788 <___vfiprintf_internal_r+0x4c0>
81122754:	10800404 	addi	r2,r2,16
81122758:	31000044 	addi	r4,r6,1
8112275c:	45800015 	stw	r22,0(r8)
81122760:	41c00115 	stw	r7,4(r8)
81122764:	d8801c15 	stw	r2,112(sp)
81122768:	d9001b15 	stw	r4,108(sp)
8112276c:	793ff40e 	bge	r15,r4,81122740 <__reset+0xfb102740>
81122770:	1001b51e 	bne	r2,zero,81122e48 <___vfiprintf_internal_r+0xb80>
81122774:	843ffc04 	addi	r16,r16,-16
81122778:	000d883a 	mov	r6,zero
8112277c:	01400044 	movi	r5,1
81122780:	d811883a 	mov	r8,sp
81122784:	3c3ff316 	blt	r7,r16,81122754 <__reset+0xfb102754>
81122788:	8007883a 	mov	r3,r16
8112278c:	da402517 	ldw	r9,148(sp)
81122790:	db802817 	ldw	r14,160(sp)
81122794:	dc002917 	ldw	r16,164(sp)
81122798:	da802417 	ldw	r10,144(sp)
8112279c:	1885883a 	add	r2,r3,r2
811227a0:	40c00115 	stw	r3,4(r8)
811227a4:	42800015 	stw	r10,0(r8)
811227a8:	d8801c15 	stw	r2,112(sp)
811227ac:	d9401b15 	stw	r5,108(sp)
811227b0:	00c001c4 	movi	r3,7
811227b4:	19426016 	blt	r3,r5,81123138 <___vfiprintf_internal_r+0xe70>
811227b8:	d8c01d87 	ldb	r3,118(sp)
811227bc:	42000204 	addi	r8,r8,8
811227c0:	29000044 	addi	r4,r5,1
811227c4:	1801b31e 	bne	r3,zero,81122e94 <___vfiprintf_internal_r+0xbcc>
811227c8:	7001c026 	beq	r14,zero,81122ecc <___vfiprintf_internal_r+0xc04>
811227cc:	d8c01d04 	addi	r3,sp,116
811227d0:	10800084 	addi	r2,r2,2
811227d4:	40c00015 	stw	r3,0(r8)
811227d8:	00c00084 	movi	r3,2
811227dc:	40c00115 	stw	r3,4(r8)
811227e0:	d8801c15 	stw	r2,112(sp)
811227e4:	d9001b15 	stw	r4,108(sp)
811227e8:	00c001c4 	movi	r3,7
811227ec:	1902650e 	bge	r3,r4,81123184 <___vfiprintf_internal_r+0xebc>
811227f0:	10029a1e 	bne	r2,zero,8112325c <___vfiprintf_internal_r+0xf94>
811227f4:	00c02004 	movi	r3,128
811227f8:	01000044 	movi	r4,1
811227fc:	000b883a 	mov	r5,zero
81122800:	d811883a 	mov	r8,sp
81122804:	e0c1b31e 	bne	fp,r3,81122ed4 <___vfiprintf_internal_r+0xc0c>
81122808:	8cb9c83a 	sub	fp,r17,r18
8112280c:	0701b10e 	bge	zero,fp,81122ed4 <___vfiprintf_internal_r+0xc0c>
81122810:	01c00404 	movi	r7,16
81122814:	3f03890e 	bge	r7,fp,8112363c <___vfiprintf_internal_r+0x1374>
81122818:	00e04534 	movhi	r3,33044
8112281c:	18c15604 	addi	r3,r3,1368
81122820:	d8c02415 	stw	r3,144(sp)
81122824:	8007883a 	mov	r3,r16
81122828:	034001c4 	movi	r13,7
8112282c:	e021883a 	mov	r16,fp
81122830:	da402515 	stw	r9,148(sp)
81122834:	1839883a 	mov	fp,r3
81122838:	00000506 	br	81122850 <___vfiprintf_internal_r+0x588>
8112283c:	29800084 	addi	r6,r5,2
81122840:	42000204 	addi	r8,r8,8
81122844:	180b883a 	mov	r5,r3
81122848:	843ffc04 	addi	r16,r16,-16
8112284c:	3c000d0e 	bge	r7,r16,81122884 <___vfiprintf_internal_r+0x5bc>
81122850:	10800404 	addi	r2,r2,16
81122854:	28c00044 	addi	r3,r5,1
81122858:	45c00015 	stw	r23,0(r8)
8112285c:	41c00115 	stw	r7,4(r8)
81122860:	d8801c15 	stw	r2,112(sp)
81122864:	d8c01b15 	stw	r3,108(sp)
81122868:	68fff40e 	bge	r13,r3,8112283c <__reset+0xfb10283c>
8112286c:	1002241e 	bne	r2,zero,81123100 <___vfiprintf_internal_r+0xe38>
81122870:	843ffc04 	addi	r16,r16,-16
81122874:	01800044 	movi	r6,1
81122878:	000b883a 	mov	r5,zero
8112287c:	d811883a 	mov	r8,sp
81122880:	3c3ff316 	blt	r7,r16,81122850 <__reset+0xfb102850>
81122884:	da402517 	ldw	r9,148(sp)
81122888:	e007883a 	mov	r3,fp
8112288c:	8039883a 	mov	fp,r16
81122890:	1821883a 	mov	r16,r3
81122894:	d8c02417 	ldw	r3,144(sp)
81122898:	1705883a 	add	r2,r2,fp
8112289c:	47000115 	stw	fp,4(r8)
811228a0:	40c00015 	stw	r3,0(r8)
811228a4:	d8801c15 	stw	r2,112(sp)
811228a8:	d9801b15 	stw	r6,108(sp)
811228ac:	00c001c4 	movi	r3,7
811228b0:	19827616 	blt	r3,r6,8112328c <___vfiprintf_internal_r+0xfc4>
811228b4:	4cf9c83a 	sub	fp,r9,r19
811228b8:	42000204 	addi	r8,r8,8
811228bc:	31000044 	addi	r4,r6,1
811228c0:	300b883a 	mov	r5,r6
811228c4:	07018516 	blt	zero,fp,81122edc <___vfiprintf_internal_r+0xc14>
811228c8:	9885883a 	add	r2,r19,r2
811228cc:	45400015 	stw	r21,0(r8)
811228d0:	44c00115 	stw	r19,4(r8)
811228d4:	d8801c15 	stw	r2,112(sp)
811228d8:	d9001b15 	stw	r4,108(sp)
811228dc:	00c001c4 	movi	r3,7
811228e0:	1901dd0e 	bge	r3,r4,81123058 <___vfiprintf_internal_r+0xd90>
811228e4:	1002401e 	bne	r2,zero,811231e8 <___vfiprintf_internal_r+0xf20>
811228e8:	d8001b15 	stw	zero,108(sp)
811228ec:	a2c0010c 	andi	r11,r20,4
811228f0:	58000226 	beq	r11,zero,811228fc <___vfiprintf_internal_r+0x634>
811228f4:	8ca7c83a 	sub	r19,r17,r18
811228f8:	04c2f216 	blt	zero,r19,811234c4 <___vfiprintf_internal_r+0x11fc>
811228fc:	8c80010e 	bge	r17,r18,81122904 <___vfiprintf_internal_r+0x63c>
81122900:	9023883a 	mov	r17,r18
81122904:	da802317 	ldw	r10,140(sp)
81122908:	5455883a 	add	r10,r10,r17
8112290c:	da802315 	stw	r10,140(sp)
81122910:	d8001b15 	stw	zero,108(sp)
81122914:	d811883a 	mov	r8,sp
81122918:	003ea206 	br	811223a4 <__reset+0xfb1023a4>
8112291c:	a5000814 	ori	r20,r20,32
81122920:	80c00007 	ldb	r3,0(r16)
81122924:	003ec906 	br	8112244c <__reset+0xfb10244c>
81122928:	80c00007 	ldb	r3,0(r16)
8112292c:	1b030926 	beq	r3,r12,81123554 <___vfiprintf_internal_r+0x128c>
81122930:	a5000414 	ori	r20,r20,16
81122934:	003ec506 	br	8112244c <__reset+0xfb10244c>
81122938:	21003fcc 	andi	r4,r4,255
8112293c:	20035e1e 	bne	r4,zero,811236b8 <___vfiprintf_internal_r+0x13f0>
81122940:	a080080c 	andi	r2,r20,32
81122944:	1002a526 	beq	r2,zero,811233dc <___vfiprintf_internal_r+0x1114>
81122948:	da802217 	ldw	r10,136(sp)
8112294c:	50800017 	ldw	r2,0(r10)
81122950:	da802317 	ldw	r10,140(sp)
81122954:	5007d7fa 	srai	r3,r10,31
81122958:	da802217 	ldw	r10,136(sp)
8112295c:	10c00115 	stw	r3,4(r2)
81122960:	52800104 	addi	r10,r10,4
81122964:	da802215 	stw	r10,136(sp)
81122968:	da802317 	ldw	r10,140(sp)
8112296c:	12800015 	stw	r10,0(r2)
81122970:	003e8c06 	br	811223a4 <__reset+0xfb1023a4>
81122974:	21003fcc 	andi	r4,r4,255
81122978:	2003511e 	bne	r4,zero,811236c0 <___vfiprintf_internal_r+0x13f8>
8112297c:	a080080c 	andi	r2,r20,32
81122980:	1000a126 	beq	r2,zero,81122c08 <___vfiprintf_internal_r+0x940>
81122984:	da802217 	ldw	r10,136(sp)
81122988:	d8001d85 	stb	zero,118(sp)
8112298c:	50800204 	addi	r2,r10,8
81122990:	54800017 	ldw	r18,0(r10)
81122994:	54c00117 	ldw	r19,4(r10)
81122998:	4802b416 	blt	r9,zero,8112346c <___vfiprintf_internal_r+0x11a4>
8112299c:	013fdfc4 	movi	r4,-129
811229a0:	94c6b03a 	or	r3,r18,r19
811229a4:	d8802215 	stw	r2,136(sp)
811229a8:	a128703a 	and	r20,r20,r4
811229ac:	1800a226 	beq	r3,zero,81122c38 <___vfiprintf_internal_r+0x970>
811229b0:	0039883a 	mov	fp,zero
811229b4:	dd401a04 	addi	r21,sp,104
811229b8:	9006d0fa 	srli	r3,r18,3
811229bc:	9808977a 	slli	r4,r19,29
811229c0:	9826d0fa 	srli	r19,r19,3
811229c4:	948001cc 	andi	r18,r18,7
811229c8:	90800c04 	addi	r2,r18,48
811229cc:	ad7fffc4 	addi	r21,r21,-1
811229d0:	20e4b03a 	or	r18,r4,r3
811229d4:	a8800005 	stb	r2,0(r21)
811229d8:	94c6b03a 	or	r3,r18,r19
811229dc:	183ff61e 	bne	r3,zero,811229b8 <__reset+0xfb1029b8>
811229e0:	a0c0004c 	andi	r3,r20,1
811229e4:	18005926 	beq	r3,zero,81122b4c <___vfiprintf_internal_r+0x884>
811229e8:	10803fcc 	andi	r2,r2,255
811229ec:	1080201c 	xori	r2,r2,128
811229f0:	10bfe004 	addi	r2,r2,-128
811229f4:	00c00c04 	movi	r3,48
811229f8:	10c05426 	beq	r2,r3,81122b4c <___vfiprintf_internal_r+0x884>
811229fc:	da801e17 	ldw	r10,120(sp)
81122a00:	a8bfffc4 	addi	r2,r21,-1
81122a04:	a8ffffc5 	stb	r3,-1(r21)
81122a08:	50a7c83a 	sub	r19,r10,r2
81122a0c:	102b883a 	mov	r21,r2
81122a10:	003f2f06 	br	811226d0 <__reset+0xfb1026d0>
81122a14:	21003fcc 	andi	r4,r4,255
81122a18:	2003421e 	bne	r4,zero,81123724 <___vfiprintf_internal_r+0x145c>
81122a1c:	00a04534 	movhi	r2,33044
81122a20:	1080c404 	addi	r2,r2,784
81122a24:	d8802615 	stw	r2,152(sp)
81122a28:	a080080c 	andi	r2,r20,32
81122a2c:	1000aa26 	beq	r2,zero,81122cd8 <___vfiprintf_internal_r+0xa10>
81122a30:	da802217 	ldw	r10,136(sp)
81122a34:	54800017 	ldw	r18,0(r10)
81122a38:	54c00117 	ldw	r19,4(r10)
81122a3c:	52800204 	addi	r10,r10,8
81122a40:	da802215 	stw	r10,136(sp)
81122a44:	a080004c 	andi	r2,r20,1
81122a48:	1001d226 	beq	r2,zero,81123194 <___vfiprintf_internal_r+0xecc>
81122a4c:	94c4b03a 	or	r2,r18,r19
81122a50:	1002351e 	bne	r2,zero,81123328 <___vfiprintf_internal_r+0x1060>
81122a54:	d8001d85 	stb	zero,118(sp)
81122a58:	48022216 	blt	r9,zero,811232e4 <___vfiprintf_internal_r+0x101c>
81122a5c:	00bfdfc4 	movi	r2,-129
81122a60:	a0a8703a 	and	r20,r20,r2
81122a64:	003f1506 	br	811226bc <__reset+0xfb1026bc>
81122a68:	da802217 	ldw	r10,136(sp)
81122a6c:	04800044 	movi	r18,1
81122a70:	d8001d85 	stb	zero,118(sp)
81122a74:	50800017 	ldw	r2,0(r10)
81122a78:	52800104 	addi	r10,r10,4
81122a7c:	da802215 	stw	r10,136(sp)
81122a80:	d8801005 	stb	r2,64(sp)
81122a84:	9027883a 	mov	r19,r18
81122a88:	dd401004 	addi	r21,sp,64
81122a8c:	0013883a 	mov	r9,zero
81122a90:	003f1706 	br	811226f0 <__reset+0xfb1026f0>
81122a94:	21003fcc 	andi	r4,r4,255
81122a98:	2003201e 	bne	r4,zero,8112371c <___vfiprintf_internal_r+0x1454>
81122a9c:	a080080c 	andi	r2,r20,32
81122aa0:	10004b26 	beq	r2,zero,81122bd0 <___vfiprintf_internal_r+0x908>
81122aa4:	da802217 	ldw	r10,136(sp)
81122aa8:	50800117 	ldw	r2,4(r10)
81122aac:	54800017 	ldw	r18,0(r10)
81122ab0:	52800204 	addi	r10,r10,8
81122ab4:	da802215 	stw	r10,136(sp)
81122ab8:	1027883a 	mov	r19,r2
81122abc:	10022c16 	blt	r2,zero,81123370 <___vfiprintf_internal_r+0x10a8>
81122ac0:	df001d83 	ldbu	fp,118(sp)
81122ac4:	48007216 	blt	r9,zero,81122c90 <___vfiprintf_internal_r+0x9c8>
81122ac8:	00ffdfc4 	movi	r3,-129
81122acc:	94c4b03a 	or	r2,r18,r19
81122ad0:	a0e8703a 	and	r20,r20,r3
81122ad4:	1000cc26 	beq	r2,zero,81122e08 <___vfiprintf_internal_r+0xb40>
81122ad8:	98021026 	beq	r19,zero,8112331c <___vfiprintf_internal_r+0x1054>
81122adc:	dc402415 	stw	r17,144(sp)
81122ae0:	dc002515 	stw	r16,148(sp)
81122ae4:	9823883a 	mov	r17,r19
81122ae8:	9021883a 	mov	r16,r18
81122aec:	dd401a04 	addi	r21,sp,104
81122af0:	4825883a 	mov	r18,r9
81122af4:	4027883a 	mov	r19,r8
81122af8:	8009883a 	mov	r4,r16
81122afc:	880b883a 	mov	r5,r17
81122b00:	01800284 	movi	r6,10
81122b04:	000f883a 	mov	r7,zero
81122b08:	11250640 	call	81125064 <__umoddi3>
81122b0c:	10800c04 	addi	r2,r2,48
81122b10:	ad7fffc4 	addi	r21,r21,-1
81122b14:	8009883a 	mov	r4,r16
81122b18:	880b883a 	mov	r5,r17
81122b1c:	a8800005 	stb	r2,0(r21)
81122b20:	01800284 	movi	r6,10
81122b24:	000f883a 	mov	r7,zero
81122b28:	1124ae40 	call	81124ae4 <__udivdi3>
81122b2c:	1021883a 	mov	r16,r2
81122b30:	10c4b03a 	or	r2,r2,r3
81122b34:	1823883a 	mov	r17,r3
81122b38:	103fef1e 	bne	r2,zero,81122af8 <__reset+0xfb102af8>
81122b3c:	dc402417 	ldw	r17,144(sp)
81122b40:	dc002517 	ldw	r16,148(sp)
81122b44:	9013883a 	mov	r9,r18
81122b48:	9811883a 	mov	r8,r19
81122b4c:	da801e17 	ldw	r10,120(sp)
81122b50:	5567c83a 	sub	r19,r10,r21
81122b54:	003ede06 	br	811226d0 <__reset+0xfb1026d0>
81122b58:	38803fcc 	andi	r2,r7,255
81122b5c:	1080201c 	xori	r2,r2,128
81122b60:	10bfe004 	addi	r2,r2,-128
81122b64:	1002371e 	bne	r2,zero,81123444 <___vfiprintf_internal_r+0x117c>
81122b68:	01000044 	movi	r4,1
81122b6c:	01c00804 	movi	r7,32
81122b70:	80c00007 	ldb	r3,0(r16)
81122b74:	003e3506 	br	8112244c <__reset+0xfb10244c>
81122b78:	a5000054 	ori	r20,r20,1
81122b7c:	80c00007 	ldb	r3,0(r16)
81122b80:	003e3206 	br	8112244c <__reset+0xfb10244c>
81122b84:	a5002014 	ori	r20,r20,128
81122b88:	80c00007 	ldb	r3,0(r16)
81122b8c:	003e2f06 	br	8112244c <__reset+0xfb10244c>
81122b90:	8015883a 	mov	r10,r16
81122b94:	0023883a 	mov	r17,zero
81122b98:	18bff404 	addi	r2,r3,-48
81122b9c:	50c00007 	ldb	r3,0(r10)
81122ba0:	8c4002a4 	muli	r17,r17,10
81122ba4:	84000044 	addi	r16,r16,1
81122ba8:	8015883a 	mov	r10,r16
81122bac:	1463883a 	add	r17,r2,r17
81122bb0:	18bff404 	addi	r2,r3,-48
81122bb4:	30bff92e 	bgeu	r6,r2,81122b9c <__reset+0xfb102b9c>
81122bb8:	003e2506 	br	81122450 <__reset+0xfb102450>
81122bbc:	21003fcc 	andi	r4,r4,255
81122bc0:	2002d41e 	bne	r4,zero,81123714 <___vfiprintf_internal_r+0x144c>
81122bc4:	a5000414 	ori	r20,r20,16
81122bc8:	a080080c 	andi	r2,r20,32
81122bcc:	103fb51e 	bne	r2,zero,81122aa4 <__reset+0xfb102aa4>
81122bd0:	a080040c 	andi	r2,r20,16
81122bd4:	1001f826 	beq	r2,zero,811233b8 <___vfiprintf_internal_r+0x10f0>
81122bd8:	da802217 	ldw	r10,136(sp)
81122bdc:	54800017 	ldw	r18,0(r10)
81122be0:	52800104 	addi	r10,r10,4
81122be4:	da802215 	stw	r10,136(sp)
81122be8:	9027d7fa 	srai	r19,r18,31
81122bec:	9805883a 	mov	r2,r19
81122bf0:	003fb206 	br	81122abc <__reset+0xfb102abc>
81122bf4:	21003fcc 	andi	r4,r4,255
81122bf8:	2002c41e 	bne	r4,zero,8112370c <___vfiprintf_internal_r+0x1444>
81122bfc:	a5000414 	ori	r20,r20,16
81122c00:	a080080c 	andi	r2,r20,32
81122c04:	103f5f1e 	bne	r2,zero,81122984 <__reset+0xfb102984>
81122c08:	a080040c 	andi	r2,r20,16
81122c0c:	10020f26 	beq	r2,zero,8112344c <___vfiprintf_internal_r+0x1184>
81122c10:	da802217 	ldw	r10,136(sp)
81122c14:	d8001d85 	stb	zero,118(sp)
81122c18:	0027883a 	mov	r19,zero
81122c1c:	50800104 	addi	r2,r10,4
81122c20:	54800017 	ldw	r18,0(r10)
81122c24:	48021116 	blt	r9,zero,8112346c <___vfiprintf_internal_r+0x11a4>
81122c28:	00ffdfc4 	movi	r3,-129
81122c2c:	d8802215 	stw	r2,136(sp)
81122c30:	a0e8703a 	and	r20,r20,r3
81122c34:	903f5e1e 	bne	r18,zero,811229b0 <__reset+0xfb1029b0>
81122c38:	0039883a 	mov	fp,zero
81122c3c:	4802a626 	beq	r9,zero,811236d8 <___vfiprintf_internal_r+0x1410>
81122c40:	0025883a 	mov	r18,zero
81122c44:	0027883a 	mov	r19,zero
81122c48:	003f5a06 	br	811229b4 <__reset+0xfb1029b4>
81122c4c:	21003fcc 	andi	r4,r4,255
81122c50:	20029f1e 	bne	r4,zero,811236d0 <___vfiprintf_internal_r+0x1408>
81122c54:	a5000414 	ori	r20,r20,16
81122c58:	a080080c 	andi	r2,r20,32
81122c5c:	10005e1e 	bne	r2,zero,81122dd8 <___vfiprintf_internal_r+0xb10>
81122c60:	a080040c 	andi	r2,r20,16
81122c64:	1001a21e 	bne	r2,zero,811232f0 <___vfiprintf_internal_r+0x1028>
81122c68:	a080100c 	andi	r2,r20,64
81122c6c:	d8001d85 	stb	zero,118(sp)
81122c70:	da802217 	ldw	r10,136(sp)
81122c74:	1002231e 	bne	r2,zero,81123504 <___vfiprintf_internal_r+0x123c>
81122c78:	50800104 	addi	r2,r10,4
81122c7c:	54800017 	ldw	r18,0(r10)
81122c80:	0027883a 	mov	r19,zero
81122c84:	4801a00e 	bge	r9,zero,81123308 <___vfiprintf_internal_r+0x1040>
81122c88:	d8802215 	stw	r2,136(sp)
81122c8c:	0039883a 	mov	fp,zero
81122c90:	94c4b03a 	or	r2,r18,r19
81122c94:	103f901e 	bne	r2,zero,81122ad8 <__reset+0xfb102ad8>
81122c98:	00800044 	movi	r2,1
81122c9c:	10803fcc 	andi	r2,r2,255
81122ca0:	00c00044 	movi	r3,1
81122ca4:	10c05926 	beq	r2,r3,81122e0c <___vfiprintf_internal_r+0xb44>
81122ca8:	00c00084 	movi	r3,2
81122cac:	10ffe41e 	bne	r2,r3,81122c40 <__reset+0xfb102c40>
81122cb0:	0025883a 	mov	r18,zero
81122cb4:	0027883a 	mov	r19,zero
81122cb8:	00013d06 	br	811231b0 <___vfiprintf_internal_r+0xee8>
81122cbc:	21003fcc 	andi	r4,r4,255
81122cc0:	2002811e 	bne	r4,zero,811236c8 <___vfiprintf_internal_r+0x1400>
81122cc4:	00a04534 	movhi	r2,33044
81122cc8:	1080bf04 	addi	r2,r2,764
81122ccc:	d8802615 	stw	r2,152(sp)
81122cd0:	a080080c 	andi	r2,r20,32
81122cd4:	103f561e 	bne	r2,zero,81122a30 <__reset+0xfb102a30>
81122cd8:	a080040c 	andi	r2,r20,16
81122cdc:	1001d126 	beq	r2,zero,81123424 <___vfiprintf_internal_r+0x115c>
81122ce0:	da802217 	ldw	r10,136(sp)
81122ce4:	0027883a 	mov	r19,zero
81122ce8:	54800017 	ldw	r18,0(r10)
81122cec:	52800104 	addi	r10,r10,4
81122cf0:	da802215 	stw	r10,136(sp)
81122cf4:	003f5306 	br	81122a44 <__reset+0xfb102a44>
81122cf8:	da802217 	ldw	r10,136(sp)
81122cfc:	d8001d85 	stb	zero,118(sp)
81122d00:	55400017 	ldw	r21,0(r10)
81122d04:	50c00104 	addi	r3,r10,4
81122d08:	a8024226 	beq	r21,zero,81123614 <___vfiprintf_internal_r+0x134c>
81122d0c:	48021816 	blt	r9,zero,81123570 <___vfiprintf_internal_r+0x12a8>
81122d10:	480d883a 	mov	r6,r9
81122d14:	000b883a 	mov	r5,zero
81122d18:	a809883a 	mov	r4,r21
81122d1c:	d8c02a15 	stw	r3,168(sp)
81122d20:	da002b15 	stw	r8,172(sp)
81122d24:	da402c15 	stw	r9,176(sp)
81122d28:	111d0a40 	call	8111d0a4 <memchr>
81122d2c:	d8c02a17 	ldw	r3,168(sp)
81122d30:	da002b17 	ldw	r8,172(sp)
81122d34:	da402c17 	ldw	r9,176(sp)
81122d38:	10024826 	beq	r2,zero,8112365c <___vfiprintf_internal_r+0x1394>
81122d3c:	1567c83a 	sub	r19,r2,r21
81122d40:	df001d83 	ldbu	fp,118(sp)
81122d44:	d8c02215 	stw	r3,136(sp)
81122d48:	0013883a 	mov	r9,zero
81122d4c:	003e6006 	br	811226d0 <__reset+0xfb1026d0>
81122d50:	21003fcc 	andi	r4,r4,255
81122d54:	203fc026 	beq	r4,zero,81122c58 <__reset+0xfb102c58>
81122d58:	d9c01d85 	stb	r7,118(sp)
81122d5c:	003fbe06 	br	81122c58 <__reset+0xfb102c58>
81122d60:	da802217 	ldw	r10,136(sp)
81122d64:	54400017 	ldw	r17,0(r10)
81122d68:	50800104 	addi	r2,r10,4
81122d6c:	883e3b16 	blt	r17,zero,8112265c <__reset+0xfb10265c>
81122d70:	d8802215 	stw	r2,136(sp)
81122d74:	80c00007 	ldb	r3,0(r16)
81122d78:	003db406 	br	8112244c <__reset+0xfb10244c>
81122d7c:	01000044 	movi	r4,1
81122d80:	01c00ac4 	movi	r7,43
81122d84:	80c00007 	ldb	r3,0(r16)
81122d88:	003db006 	br	8112244c <__reset+0xfb10244c>
81122d8c:	80c00007 	ldb	r3,0(r16)
81122d90:	82800044 	addi	r10,r16,1
81122d94:	1b423c26 	beq	r3,r13,81123688 <___vfiprintf_internal_r+0x13c0>
81122d98:	18bff404 	addi	r2,r3,-48
81122d9c:	0013883a 	mov	r9,zero
81122da0:	30822b36 	bltu	r6,r2,81123650 <___vfiprintf_internal_r+0x1388>
81122da4:	50c00007 	ldb	r3,0(r10)
81122da8:	4a4002a4 	muli	r9,r9,10
81122dac:	54000044 	addi	r16,r10,1
81122db0:	8015883a 	mov	r10,r16
81122db4:	4893883a 	add	r9,r9,r2
81122db8:	18bff404 	addi	r2,r3,-48
81122dbc:	30bff92e 	bgeu	r6,r2,81122da4 <__reset+0xfb102da4>
81122dc0:	483da30e 	bge	r9,zero,81122450 <__reset+0xfb102450>
81122dc4:	027fffc4 	movi	r9,-1
81122dc8:	003da106 	br	81122450 <__reset+0xfb102450>
81122dcc:	a5001014 	ori	r20,r20,64
81122dd0:	80c00007 	ldb	r3,0(r16)
81122dd4:	003d9d06 	br	8112244c <__reset+0xfb10244c>
81122dd8:	da802217 	ldw	r10,136(sp)
81122ddc:	d8001d85 	stb	zero,118(sp)
81122de0:	50c00204 	addi	r3,r10,8
81122de4:	54800017 	ldw	r18,0(r10)
81122de8:	54c00117 	ldw	r19,4(r10)
81122dec:	4801ca16 	blt	r9,zero,81123518 <___vfiprintf_internal_r+0x1250>
81122df0:	013fdfc4 	movi	r4,-129
81122df4:	94c4b03a 	or	r2,r18,r19
81122df8:	d8c02215 	stw	r3,136(sp)
81122dfc:	a128703a 	and	r20,r20,r4
81122e00:	0039883a 	mov	fp,zero
81122e04:	103f341e 	bne	r2,zero,81122ad8 <__reset+0xfb102ad8>
81122e08:	483e2e26 	beq	r9,zero,811226c4 <__reset+0xfb1026c4>
81122e0c:	0025883a 	mov	r18,zero
81122e10:	94800c04 	addi	r18,r18,48
81122e14:	dc8019c5 	stb	r18,103(sp)
81122e18:	dcc02717 	ldw	r19,156(sp)
81122e1c:	dd4019c4 	addi	r21,sp,103
81122e20:	003e2b06 	br	811226d0 <__reset+0xfb1026d0>
81122e24:	21003fcc 	andi	r4,r4,255
81122e28:	2002361e 	bne	r4,zero,81123704 <___vfiprintf_internal_r+0x143c>
81122e2c:	1801c126 	beq	r3,zero,81123534 <___vfiprintf_internal_r+0x126c>
81122e30:	04800044 	movi	r18,1
81122e34:	d8c01005 	stb	r3,64(sp)
81122e38:	d8001d85 	stb	zero,118(sp)
81122e3c:	9027883a 	mov	r19,r18
81122e40:	dd401004 	addi	r21,sp,64
81122e44:	003f1106 	br	81122a8c <__reset+0xfb102a8c>
81122e48:	d9402117 	ldw	r5,132(sp)
81122e4c:	d9002017 	ldw	r4,128(sp)
81122e50:	d9801a04 	addi	r6,sp,104
81122e54:	d9c02b15 	stw	r7,172(sp)
81122e58:	dbc02a15 	stw	r15,168(sp)
81122e5c:	11221ac0 	call	811221ac <__sprint_r.part.0>
81122e60:	d9c02b17 	ldw	r7,172(sp)
81122e64:	dbc02a17 	ldw	r15,168(sp)
81122e68:	10006d1e 	bne	r2,zero,81123020 <___vfiprintf_internal_r+0xd58>
81122e6c:	d9801b17 	ldw	r6,108(sp)
81122e70:	d8801c17 	ldw	r2,112(sp)
81122e74:	d811883a 	mov	r8,sp
81122e78:	31400044 	addi	r5,r6,1
81122e7c:	003e3306 	br	8112274c <__reset+0xfb10274c>
81122e80:	d9401b17 	ldw	r5,108(sp)
81122e84:	d8801c17 	ldw	r2,112(sp)
81122e88:	29000044 	addi	r4,r5,1
81122e8c:	d8c01d87 	ldb	r3,118(sp)
81122e90:	183e4d26 	beq	r3,zero,811227c8 <__reset+0xfb1027c8>
81122e94:	00c00044 	movi	r3,1
81122e98:	d9401d84 	addi	r5,sp,118
81122e9c:	10c5883a 	add	r2,r2,r3
81122ea0:	41400015 	stw	r5,0(r8)
81122ea4:	40c00115 	stw	r3,4(r8)
81122ea8:	d8801c15 	stw	r2,112(sp)
81122eac:	d9001b15 	stw	r4,108(sp)
81122eb0:	014001c4 	movi	r5,7
81122eb4:	2900a90e 	bge	r5,r4,8112315c <___vfiprintf_internal_r+0xe94>
81122eb8:	1000da1e 	bne	r2,zero,81123224 <___vfiprintf_internal_r+0xf5c>
81122ebc:	7000ab1e 	bne	r14,zero,8112316c <___vfiprintf_internal_r+0xea4>
81122ec0:	000b883a 	mov	r5,zero
81122ec4:	1809883a 	mov	r4,r3
81122ec8:	d811883a 	mov	r8,sp
81122ecc:	00c02004 	movi	r3,128
81122ed0:	e0fe4d26 	beq	fp,r3,81122808 <__reset+0xfb102808>
81122ed4:	4cf9c83a 	sub	fp,r9,r19
81122ed8:	073e7b0e 	bge	zero,fp,811228c8 <__reset+0xfb1028c8>
81122edc:	01c00404 	movi	r7,16
81122ee0:	3f01900e 	bge	r7,fp,81123524 <___vfiprintf_internal_r+0x125c>
81122ee4:	00e04534 	movhi	r3,33044
81122ee8:	18c15604 	addi	r3,r3,1368
81122eec:	d8c02415 	stw	r3,144(sp)
81122ef0:	034001c4 	movi	r13,7
81122ef4:	00000506 	br	81122f0c <___vfiprintf_internal_r+0xc44>
81122ef8:	29000084 	addi	r4,r5,2
81122efc:	42000204 	addi	r8,r8,8
81122f00:	180b883a 	mov	r5,r3
81122f04:	e73ffc04 	addi	fp,fp,-16
81122f08:	3f000d0e 	bge	r7,fp,81122f40 <___vfiprintf_internal_r+0xc78>
81122f0c:	10800404 	addi	r2,r2,16
81122f10:	28c00044 	addi	r3,r5,1
81122f14:	45c00015 	stw	r23,0(r8)
81122f18:	41c00115 	stw	r7,4(r8)
81122f1c:	d8801c15 	stw	r2,112(sp)
81122f20:	d8c01b15 	stw	r3,108(sp)
81122f24:	68fff40e 	bge	r13,r3,81122ef8 <__reset+0xfb102ef8>
81122f28:	1000101e 	bne	r2,zero,81122f6c <___vfiprintf_internal_r+0xca4>
81122f2c:	e73ffc04 	addi	fp,fp,-16
81122f30:	01000044 	movi	r4,1
81122f34:	000b883a 	mov	r5,zero
81122f38:	d811883a 	mov	r8,sp
81122f3c:	3f3ff316 	blt	r7,fp,81122f0c <__reset+0xfb102f0c>
81122f40:	da802417 	ldw	r10,144(sp)
81122f44:	1705883a 	add	r2,r2,fp
81122f48:	47000115 	stw	fp,4(r8)
81122f4c:	42800015 	stw	r10,0(r8)
81122f50:	d8801c15 	stw	r2,112(sp)
81122f54:	d9001b15 	stw	r4,108(sp)
81122f58:	00c001c4 	movi	r3,7
81122f5c:	19003616 	blt	r3,r4,81123038 <___vfiprintf_internal_r+0xd70>
81122f60:	42000204 	addi	r8,r8,8
81122f64:	21000044 	addi	r4,r4,1
81122f68:	003e5706 	br	811228c8 <__reset+0xfb1028c8>
81122f6c:	d9402117 	ldw	r5,132(sp)
81122f70:	d9002017 	ldw	r4,128(sp)
81122f74:	d9801a04 	addi	r6,sp,104
81122f78:	d9c02b15 	stw	r7,172(sp)
81122f7c:	db402a15 	stw	r13,168(sp)
81122f80:	11221ac0 	call	811221ac <__sprint_r.part.0>
81122f84:	d9c02b17 	ldw	r7,172(sp)
81122f88:	db402a17 	ldw	r13,168(sp)
81122f8c:	1000241e 	bne	r2,zero,81123020 <___vfiprintf_internal_r+0xd58>
81122f90:	d9401b17 	ldw	r5,108(sp)
81122f94:	d8801c17 	ldw	r2,112(sp)
81122f98:	d811883a 	mov	r8,sp
81122f9c:	29000044 	addi	r4,r5,1
81122fa0:	003fd806 	br	81122f04 <__reset+0xfb102f04>
81122fa4:	d9401b17 	ldw	r5,108(sp)
81122fa8:	00e04534 	movhi	r3,33044
81122fac:	18c15a04 	addi	r3,r3,1384
81122fb0:	d8c02415 	stw	r3,144(sp)
81122fb4:	29400044 	addi	r5,r5,1
81122fb8:	d8c02417 	ldw	r3,144(sp)
81122fbc:	14c5883a 	add	r2,r2,r19
81122fc0:	44c00115 	stw	r19,4(r8)
81122fc4:	40c00015 	stw	r3,0(r8)
81122fc8:	d8801c15 	stw	r2,112(sp)
81122fcc:	d9401b15 	stw	r5,108(sp)
81122fd0:	00c001c4 	movi	r3,7
81122fd4:	1940070e 	bge	r3,r5,81122ff4 <___vfiprintf_internal_r+0xd2c>
81122fd8:	103e4826 	beq	r2,zero,811228fc <__reset+0xfb1028fc>
81122fdc:	d9402117 	ldw	r5,132(sp)
81122fe0:	d9002017 	ldw	r4,128(sp)
81122fe4:	d9801a04 	addi	r6,sp,104
81122fe8:	11221ac0 	call	811221ac <__sprint_r.part.0>
81122fec:	10000c1e 	bne	r2,zero,81123020 <___vfiprintf_internal_r+0xd58>
81122ff0:	d8801c17 	ldw	r2,112(sp)
81122ff4:	8c80010e 	bge	r17,r18,81122ffc <___vfiprintf_internal_r+0xd34>
81122ff8:	9023883a 	mov	r17,r18
81122ffc:	da802317 	ldw	r10,140(sp)
81123000:	5455883a 	add	r10,r10,r17
81123004:	da802315 	stw	r10,140(sp)
81123008:	103e4126 	beq	r2,zero,81122910 <__reset+0xfb102910>
8112300c:	d9402117 	ldw	r5,132(sp)
81123010:	d9002017 	ldw	r4,128(sp)
81123014:	d9801a04 	addi	r6,sp,104
81123018:	11221ac0 	call	811221ac <__sprint_r.part.0>
8112301c:	103e3c26 	beq	r2,zero,81122910 <__reset+0xfb102910>
81123020:	dd002117 	ldw	r20,132(sp)
81123024:	a080030b 	ldhu	r2,12(r20)
81123028:	1080100c 	andi	r2,r2,64
8112302c:	1001231e 	bne	r2,zero,811234bc <___vfiprintf_internal_r+0x11f4>
81123030:	d8802317 	ldw	r2,140(sp)
81123034:	003d7b06 	br	81122624 <__reset+0xfb102624>
81123038:	1000991e 	bne	r2,zero,811232a0 <___vfiprintf_internal_r+0xfd8>
8112303c:	00c00044 	movi	r3,1
81123040:	9805883a 	mov	r2,r19
81123044:	dd400015 	stw	r21,0(sp)
81123048:	dcc00115 	stw	r19,4(sp)
8112304c:	dcc01c15 	stw	r19,112(sp)
81123050:	d8c01b15 	stw	r3,108(sp)
81123054:	d811883a 	mov	r8,sp
81123058:	42000204 	addi	r8,r8,8
8112305c:	a2c0010c 	andi	r11,r20,4
81123060:	583fe426 	beq	r11,zero,81122ff4 <__reset+0xfb102ff4>
81123064:	8ca7c83a 	sub	r19,r17,r18
81123068:	04ffe20e 	bge	zero,r19,81122ff4 <__reset+0xfb102ff4>
8112306c:	01c00404 	movi	r7,16
81123070:	3cffcc0e 	bge	r7,r19,81122fa4 <__reset+0xfb102fa4>
81123074:	02a04534 	movhi	r10,33044
81123078:	52815a04 	addi	r10,r10,1384
8112307c:	d9001b17 	ldw	r4,108(sp)
81123080:	da802415 	stw	r10,144(sp)
81123084:	382b883a 	mov	r21,r7
81123088:	050001c4 	movi	r20,7
8112308c:	df002017 	ldw	fp,128(sp)
81123090:	00000506 	br	811230a8 <___vfiprintf_internal_r+0xde0>
81123094:	21400084 	addi	r5,r4,2
81123098:	42000204 	addi	r8,r8,8
8112309c:	1809883a 	mov	r4,r3
811230a0:	9cfffc04 	addi	r19,r19,-16
811230a4:	acffc40e 	bge	r21,r19,81122fb8 <__reset+0xfb102fb8>
811230a8:	10800404 	addi	r2,r2,16
811230ac:	20c00044 	addi	r3,r4,1
811230b0:	45800015 	stw	r22,0(r8)
811230b4:	45400115 	stw	r21,4(r8)
811230b8:	d8801c15 	stw	r2,112(sp)
811230bc:	d8c01b15 	stw	r3,108(sp)
811230c0:	a0fff40e 	bge	r20,r3,81123094 <__reset+0xfb103094>
811230c4:	1000041e 	bne	r2,zero,811230d8 <___vfiprintf_internal_r+0xe10>
811230c8:	01400044 	movi	r5,1
811230cc:	0009883a 	mov	r4,zero
811230d0:	d811883a 	mov	r8,sp
811230d4:	003ff206 	br	811230a0 <__reset+0xfb1030a0>
811230d8:	d9402117 	ldw	r5,132(sp)
811230dc:	d9801a04 	addi	r6,sp,104
811230e0:	e009883a 	mov	r4,fp
811230e4:	11221ac0 	call	811221ac <__sprint_r.part.0>
811230e8:	103fcd1e 	bne	r2,zero,81123020 <__reset+0xfb103020>
811230ec:	d9001b17 	ldw	r4,108(sp)
811230f0:	d8801c17 	ldw	r2,112(sp)
811230f4:	d811883a 	mov	r8,sp
811230f8:	21400044 	addi	r5,r4,1
811230fc:	003fe806 	br	811230a0 <__reset+0xfb1030a0>
81123100:	d9402117 	ldw	r5,132(sp)
81123104:	d9002017 	ldw	r4,128(sp)
81123108:	d9801a04 	addi	r6,sp,104
8112310c:	d9c02b15 	stw	r7,172(sp)
81123110:	db402a15 	stw	r13,168(sp)
81123114:	11221ac0 	call	811221ac <__sprint_r.part.0>
81123118:	d9c02b17 	ldw	r7,172(sp)
8112311c:	db402a17 	ldw	r13,168(sp)
81123120:	103fbf1e 	bne	r2,zero,81123020 <__reset+0xfb103020>
81123124:	d9401b17 	ldw	r5,108(sp)
81123128:	d8801c17 	ldw	r2,112(sp)
8112312c:	d811883a 	mov	r8,sp
81123130:	29800044 	addi	r6,r5,1
81123134:	003dc406 	br	81122848 <__reset+0xfb102848>
81123138:	1000d21e 	bne	r2,zero,81123484 <___vfiprintf_internal_r+0x11bc>
8112313c:	d8c01d87 	ldb	r3,118(sp)
81123140:	18009526 	beq	r3,zero,81123398 <___vfiprintf_internal_r+0x10d0>
81123144:	00800044 	movi	r2,1
81123148:	d8c01d84 	addi	r3,sp,118
8112314c:	1009883a 	mov	r4,r2
81123150:	d8c00015 	stw	r3,0(sp)
81123154:	d8800115 	stw	r2,4(sp)
81123158:	d811883a 	mov	r8,sp
8112315c:	200b883a 	mov	r5,r4
81123160:	42000204 	addi	r8,r8,8
81123164:	21000044 	addi	r4,r4,1
81123168:	003d9706 	br	811227c8 <__reset+0xfb1027c8>
8112316c:	d9001d04 	addi	r4,sp,116
81123170:	00800084 	movi	r2,2
81123174:	d9000015 	stw	r4,0(sp)
81123178:	d8800115 	stw	r2,4(sp)
8112317c:	1809883a 	mov	r4,r3
81123180:	d811883a 	mov	r8,sp
81123184:	200b883a 	mov	r5,r4
81123188:	42000204 	addi	r8,r8,8
8112318c:	21000044 	addi	r4,r4,1
81123190:	003f4e06 	br	81122ecc <__reset+0xfb102ecc>
81123194:	d8001d85 	stb	zero,118(sp)
81123198:	48005016 	blt	r9,zero,811232dc <___vfiprintf_internal_r+0x1014>
8112319c:	00ffdfc4 	movi	r3,-129
811231a0:	94c4b03a 	or	r2,r18,r19
811231a4:	a0e8703a 	and	r20,r20,r3
811231a8:	103d4426 	beq	r2,zero,811226bc <__reset+0xfb1026bc>
811231ac:	0039883a 	mov	fp,zero
811231b0:	d9002617 	ldw	r4,152(sp)
811231b4:	dd401a04 	addi	r21,sp,104
811231b8:	908003cc 	andi	r2,r18,15
811231bc:	9806973a 	slli	r3,r19,28
811231c0:	2085883a 	add	r2,r4,r2
811231c4:	9024d13a 	srli	r18,r18,4
811231c8:	10800003 	ldbu	r2,0(r2)
811231cc:	9826d13a 	srli	r19,r19,4
811231d0:	ad7fffc4 	addi	r21,r21,-1
811231d4:	1ca4b03a 	or	r18,r3,r18
811231d8:	a8800005 	stb	r2,0(r21)
811231dc:	94c4b03a 	or	r2,r18,r19
811231e0:	103ff51e 	bne	r2,zero,811231b8 <__reset+0xfb1031b8>
811231e4:	003e5906 	br	81122b4c <__reset+0xfb102b4c>
811231e8:	d9402117 	ldw	r5,132(sp)
811231ec:	d9002017 	ldw	r4,128(sp)
811231f0:	d9801a04 	addi	r6,sp,104
811231f4:	11221ac0 	call	811221ac <__sprint_r.part.0>
811231f8:	103f891e 	bne	r2,zero,81123020 <__reset+0xfb103020>
811231fc:	d8801c17 	ldw	r2,112(sp)
81123200:	d811883a 	mov	r8,sp
81123204:	003f9506 	br	8112305c <__reset+0xfb10305c>
81123208:	d9402117 	ldw	r5,132(sp)
8112320c:	d9002017 	ldw	r4,128(sp)
81123210:	d9801a04 	addi	r6,sp,104
81123214:	11221ac0 	call	811221ac <__sprint_r.part.0>
81123218:	103f811e 	bne	r2,zero,81123020 <__reset+0xfb103020>
8112321c:	d811883a 	mov	r8,sp
81123220:	003ced06 	br	811225d8 <__reset+0xfb1025d8>
81123224:	d9402117 	ldw	r5,132(sp)
81123228:	d9002017 	ldw	r4,128(sp)
8112322c:	d9801a04 	addi	r6,sp,104
81123230:	da402c15 	stw	r9,176(sp)
81123234:	db802a15 	stw	r14,168(sp)
81123238:	11221ac0 	call	811221ac <__sprint_r.part.0>
8112323c:	da402c17 	ldw	r9,176(sp)
81123240:	db802a17 	ldw	r14,168(sp)
81123244:	103f761e 	bne	r2,zero,81123020 <__reset+0xfb103020>
81123248:	d9401b17 	ldw	r5,108(sp)
8112324c:	d8801c17 	ldw	r2,112(sp)
81123250:	d811883a 	mov	r8,sp
81123254:	29000044 	addi	r4,r5,1
81123258:	003d5b06 	br	811227c8 <__reset+0xfb1027c8>
8112325c:	d9402117 	ldw	r5,132(sp)
81123260:	d9002017 	ldw	r4,128(sp)
81123264:	d9801a04 	addi	r6,sp,104
81123268:	da402c15 	stw	r9,176(sp)
8112326c:	11221ac0 	call	811221ac <__sprint_r.part.0>
81123270:	da402c17 	ldw	r9,176(sp)
81123274:	103f6a1e 	bne	r2,zero,81123020 <__reset+0xfb103020>
81123278:	d9401b17 	ldw	r5,108(sp)
8112327c:	d8801c17 	ldw	r2,112(sp)
81123280:	d811883a 	mov	r8,sp
81123284:	29000044 	addi	r4,r5,1
81123288:	003f1006 	br	81122ecc <__reset+0xfb102ecc>
8112328c:	1000c31e 	bne	r2,zero,8112359c <___vfiprintf_internal_r+0x12d4>
81123290:	01000044 	movi	r4,1
81123294:	000b883a 	mov	r5,zero
81123298:	d811883a 	mov	r8,sp
8112329c:	003f0d06 	br	81122ed4 <__reset+0xfb102ed4>
811232a0:	d9402117 	ldw	r5,132(sp)
811232a4:	d9002017 	ldw	r4,128(sp)
811232a8:	d9801a04 	addi	r6,sp,104
811232ac:	11221ac0 	call	811221ac <__sprint_r.part.0>
811232b0:	103f5b1e 	bne	r2,zero,81123020 <__reset+0xfb103020>
811232b4:	d9001b17 	ldw	r4,108(sp)
811232b8:	d8801c17 	ldw	r2,112(sp)
811232bc:	d811883a 	mov	r8,sp
811232c0:	21000044 	addi	r4,r4,1
811232c4:	003d8006 	br	811228c8 <__reset+0xfb1028c8>
811232c8:	01204534 	movhi	r4,33044
811232cc:	2100c404 	addi	r4,r4,784
811232d0:	d9002615 	stw	r4,152(sp)
811232d4:	d8c02215 	stw	r3,136(sp)
811232d8:	1029883a 	mov	r20,r2
811232dc:	94c4b03a 	or	r2,r18,r19
811232e0:	103fb21e 	bne	r2,zero,811231ac <__reset+0xfb1031ac>
811232e4:	0039883a 	mov	fp,zero
811232e8:	00800084 	movi	r2,2
811232ec:	003e6b06 	br	81122c9c <__reset+0xfb102c9c>
811232f0:	da802217 	ldw	r10,136(sp)
811232f4:	d8001d85 	stb	zero,118(sp)
811232f8:	0027883a 	mov	r19,zero
811232fc:	50800104 	addi	r2,r10,4
81123300:	54800017 	ldw	r18,0(r10)
81123304:	483e6016 	blt	r9,zero,81122c88 <__reset+0xfb102c88>
81123308:	00ffdfc4 	movi	r3,-129
8112330c:	d8802215 	stw	r2,136(sp)
81123310:	a0e8703a 	and	r20,r20,r3
81123314:	0039883a 	mov	fp,zero
81123318:	903ebb26 	beq	r18,zero,81122e08 <__reset+0xfb102e08>
8112331c:	00800244 	movi	r2,9
81123320:	14bdee36 	bltu	r2,r18,81122adc <__reset+0xfb102adc>
81123324:	003eba06 	br	81122e10 <__reset+0xfb102e10>
81123328:	00800c04 	movi	r2,48
8112332c:	d8c01d45 	stb	r3,117(sp)
81123330:	d8801d05 	stb	r2,116(sp)
81123334:	d8001d85 	stb	zero,118(sp)
81123338:	a0c00094 	ori	r3,r20,2
8112333c:	4800a916 	blt	r9,zero,811235e4 <___vfiprintf_internal_r+0x131c>
81123340:	00bfdfc4 	movi	r2,-129
81123344:	a096703a 	and	r11,r20,r2
81123348:	5d000094 	ori	r20,r11,2
8112334c:	0039883a 	mov	fp,zero
81123350:	003f9706 	br	811231b0 <__reset+0xfb1031b0>
81123354:	8025883a 	mov	r18,r16
81123358:	003c2e06 	br	81122414 <__reset+0xfb102414>
8112335c:	00a04534 	movhi	r2,33044
81123360:	1080c404 	addi	r2,r2,784
81123364:	0039883a 	mov	fp,zero
81123368:	d8802615 	stw	r2,152(sp)
8112336c:	003f9006 	br	811231b0 <__reset+0xfb1031b0>
81123370:	04a5c83a 	sub	r18,zero,r18
81123374:	07000b44 	movi	fp,45
81123378:	9004c03a 	cmpne	r2,r18,zero
8112337c:	04e7c83a 	sub	r19,zero,r19
81123380:	df001d85 	stb	fp,118(sp)
81123384:	98a7c83a 	sub	r19,r19,r2
81123388:	48009f16 	blt	r9,zero,81123608 <___vfiprintf_internal_r+0x1340>
8112338c:	00bfdfc4 	movi	r2,-129
81123390:	a0a8703a 	and	r20,r20,r2
81123394:	003dd006 	br	81122ad8 <__reset+0xfb102ad8>
81123398:	70004c26 	beq	r14,zero,811234cc <___vfiprintf_internal_r+0x1204>
8112339c:	00800084 	movi	r2,2
811233a0:	d8c01d04 	addi	r3,sp,116
811233a4:	d8c00015 	stw	r3,0(sp)
811233a8:	d8800115 	stw	r2,4(sp)
811233ac:	01000044 	movi	r4,1
811233b0:	d811883a 	mov	r8,sp
811233b4:	003f7306 	br	81123184 <__reset+0xfb103184>
811233b8:	a080100c 	andi	r2,r20,64
811233bc:	da802217 	ldw	r10,136(sp)
811233c0:	103e0626 	beq	r2,zero,81122bdc <__reset+0xfb102bdc>
811233c4:	5480000f 	ldh	r18,0(r10)
811233c8:	52800104 	addi	r10,r10,4
811233cc:	da802215 	stw	r10,136(sp)
811233d0:	9027d7fa 	srai	r19,r18,31
811233d4:	9805883a 	mov	r2,r19
811233d8:	003db806 	br	81122abc <__reset+0xfb102abc>
811233dc:	a080040c 	andi	r2,r20,16
811233e0:	1000091e 	bne	r2,zero,81123408 <___vfiprintf_internal_r+0x1140>
811233e4:	a2c0100c 	andi	r11,r20,64
811233e8:	58000726 	beq	r11,zero,81123408 <___vfiprintf_internal_r+0x1140>
811233ec:	da802217 	ldw	r10,136(sp)
811233f0:	50800017 	ldw	r2,0(r10)
811233f4:	52800104 	addi	r10,r10,4
811233f8:	da802215 	stw	r10,136(sp)
811233fc:	da802317 	ldw	r10,140(sp)
81123400:	1280000d 	sth	r10,0(r2)
81123404:	003be706 	br	811223a4 <__reset+0xfb1023a4>
81123408:	da802217 	ldw	r10,136(sp)
8112340c:	50800017 	ldw	r2,0(r10)
81123410:	52800104 	addi	r10,r10,4
81123414:	da802215 	stw	r10,136(sp)
81123418:	da802317 	ldw	r10,140(sp)
8112341c:	12800015 	stw	r10,0(r2)
81123420:	003be006 	br	811223a4 <__reset+0xfb1023a4>
81123424:	a080100c 	andi	r2,r20,64
81123428:	da802217 	ldw	r10,136(sp)
8112342c:	10003026 	beq	r2,zero,811234f0 <___vfiprintf_internal_r+0x1228>
81123430:	5480000b 	ldhu	r18,0(r10)
81123434:	52800104 	addi	r10,r10,4
81123438:	0027883a 	mov	r19,zero
8112343c:	da802215 	stw	r10,136(sp)
81123440:	003d8006 	br	81122a44 <__reset+0xfb102a44>
81123444:	80c00007 	ldb	r3,0(r16)
81123448:	003c0006 	br	8112244c <__reset+0xfb10244c>
8112344c:	a080100c 	andi	r2,r20,64
81123450:	d8001d85 	stb	zero,118(sp)
81123454:	da802217 	ldw	r10,136(sp)
81123458:	1000201e 	bne	r2,zero,811234dc <___vfiprintf_internal_r+0x1214>
8112345c:	50800104 	addi	r2,r10,4
81123460:	54800017 	ldw	r18,0(r10)
81123464:	0027883a 	mov	r19,zero
81123468:	483def0e 	bge	r9,zero,81122c28 <__reset+0xfb102c28>
8112346c:	94c6b03a 	or	r3,r18,r19
81123470:	d8802215 	stw	r2,136(sp)
81123474:	183d4e1e 	bne	r3,zero,811229b0 <__reset+0xfb1029b0>
81123478:	0039883a 	mov	fp,zero
8112347c:	0005883a 	mov	r2,zero
81123480:	003e0606 	br	81122c9c <__reset+0xfb102c9c>
81123484:	d9402117 	ldw	r5,132(sp)
81123488:	d9002017 	ldw	r4,128(sp)
8112348c:	d9801a04 	addi	r6,sp,104
81123490:	da402c15 	stw	r9,176(sp)
81123494:	db802a15 	stw	r14,168(sp)
81123498:	11221ac0 	call	811221ac <__sprint_r.part.0>
8112349c:	da402c17 	ldw	r9,176(sp)
811234a0:	db802a17 	ldw	r14,168(sp)
811234a4:	103ede1e 	bne	r2,zero,81123020 <__reset+0xfb103020>
811234a8:	d9401b17 	ldw	r5,108(sp)
811234ac:	d8801c17 	ldw	r2,112(sp)
811234b0:	d811883a 	mov	r8,sp
811234b4:	29000044 	addi	r4,r5,1
811234b8:	003e7406 	br	81122e8c <__reset+0xfb102e8c>
811234bc:	00bfffc4 	movi	r2,-1
811234c0:	003c5806 	br	81122624 <__reset+0xfb102624>
811234c4:	d811883a 	mov	r8,sp
811234c8:	003ee806 	br	8112306c <__reset+0xfb10306c>
811234cc:	000b883a 	mov	r5,zero
811234d0:	01000044 	movi	r4,1
811234d4:	d811883a 	mov	r8,sp
811234d8:	003e7c06 	br	81122ecc <__reset+0xfb102ecc>
811234dc:	50800104 	addi	r2,r10,4
811234e0:	5480000b 	ldhu	r18,0(r10)
811234e4:	0027883a 	mov	r19,zero
811234e8:	483dcf0e 	bge	r9,zero,81122c28 <__reset+0xfb102c28>
811234ec:	003fdf06 	br	8112346c <__reset+0xfb10346c>
811234f0:	54800017 	ldw	r18,0(r10)
811234f4:	52800104 	addi	r10,r10,4
811234f8:	0027883a 	mov	r19,zero
811234fc:	da802215 	stw	r10,136(sp)
81123500:	003d5006 	br	81122a44 <__reset+0xfb102a44>
81123504:	50800104 	addi	r2,r10,4
81123508:	5480000b 	ldhu	r18,0(r10)
8112350c:	0027883a 	mov	r19,zero
81123510:	483f7d0e 	bge	r9,zero,81123308 <__reset+0xfb103308>
81123514:	003ddc06 	br	81122c88 <__reset+0xfb102c88>
81123518:	d8c02215 	stw	r3,136(sp)
8112351c:	0039883a 	mov	fp,zero
81123520:	003ddb06 	br	81122c90 <__reset+0xfb102c90>
81123524:	02a04534 	movhi	r10,33044
81123528:	52815604 	addi	r10,r10,1368
8112352c:	da802415 	stw	r10,144(sp)
81123530:	003e8306 	br	81122f40 <__reset+0xfb102f40>
81123534:	d8801c17 	ldw	r2,112(sp)
81123538:	dd002117 	ldw	r20,132(sp)
8112353c:	103eb926 	beq	r2,zero,81123024 <__reset+0xfb103024>
81123540:	d9002017 	ldw	r4,128(sp)
81123544:	d9801a04 	addi	r6,sp,104
81123548:	a00b883a 	mov	r5,r20
8112354c:	11221ac0 	call	811221ac <__sprint_r.part.0>
81123550:	003eb406 	br	81123024 <__reset+0xfb103024>
81123554:	80c00043 	ldbu	r3,1(r16)
81123558:	a5000814 	ori	r20,r20,32
8112355c:	84000044 	addi	r16,r16,1
81123560:	18c03fcc 	andi	r3,r3,255
81123564:	18c0201c 	xori	r3,r3,128
81123568:	18ffe004 	addi	r3,r3,-128
8112356c:	003bb706 	br	8112244c <__reset+0xfb10244c>
81123570:	a809883a 	mov	r4,r21
81123574:	d8c02a15 	stw	r3,168(sp)
81123578:	da002b15 	stw	r8,172(sp)
8112357c:	1113ba80 	call	81113ba8 <strlen>
81123580:	d8c02a17 	ldw	r3,168(sp)
81123584:	1027883a 	mov	r19,r2
81123588:	df001d83 	ldbu	fp,118(sp)
8112358c:	d8c02215 	stw	r3,136(sp)
81123590:	0013883a 	mov	r9,zero
81123594:	da002b17 	ldw	r8,172(sp)
81123598:	003c4d06 	br	811226d0 <__reset+0xfb1026d0>
8112359c:	d9402117 	ldw	r5,132(sp)
811235a0:	d9002017 	ldw	r4,128(sp)
811235a4:	d9801a04 	addi	r6,sp,104
811235a8:	da402c15 	stw	r9,176(sp)
811235ac:	11221ac0 	call	811221ac <__sprint_r.part.0>
811235b0:	da402c17 	ldw	r9,176(sp)
811235b4:	103e9a1e 	bne	r2,zero,81123020 <__reset+0xfb103020>
811235b8:	d9401b17 	ldw	r5,108(sp)
811235bc:	d8801c17 	ldw	r2,112(sp)
811235c0:	d811883a 	mov	r8,sp
811235c4:	29000044 	addi	r4,r5,1
811235c8:	003e4206 	br	81122ed4 <__reset+0xfb102ed4>
811235cc:	d9401b17 	ldw	r5,108(sp)
811235d0:	01204534 	movhi	r4,33044
811235d4:	21015a04 	addi	r4,r4,1384
811235d8:	d9002415 	stw	r4,144(sp)
811235dc:	29400044 	addi	r5,r5,1
811235e0:	003c6d06 	br	81122798 <__reset+0xfb102798>
811235e4:	0039883a 	mov	fp,zero
811235e8:	00800084 	movi	r2,2
811235ec:	10803fcc 	andi	r2,r2,255
811235f0:	01000044 	movi	r4,1
811235f4:	11001e26 	beq	r2,r4,81123670 <___vfiprintf_internal_r+0x13a8>
811235f8:	01000084 	movi	r4,2
811235fc:	11001e1e 	bne	r2,r4,81123678 <___vfiprintf_internal_r+0x13b0>
81123600:	1829883a 	mov	r20,r3
81123604:	003eea06 	br	811231b0 <__reset+0xfb1031b0>
81123608:	a007883a 	mov	r3,r20
8112360c:	00800044 	movi	r2,1
81123610:	003ff606 	br	811235ec <__reset+0xfb1035ec>
81123614:	00800184 	movi	r2,6
81123618:	1240012e 	bgeu	r2,r9,81123620 <___vfiprintf_internal_r+0x1358>
8112361c:	1013883a 	mov	r9,r2
81123620:	4827883a 	mov	r19,r9
81123624:	4825883a 	mov	r18,r9
81123628:	48001516 	blt	r9,zero,81123680 <___vfiprintf_internal_r+0x13b8>
8112362c:	05604534 	movhi	r21,33044
81123630:	d8c02215 	stw	r3,136(sp)
81123634:	ad40c904 	addi	r21,r21,804
81123638:	003d1406 	br	81122a8c <__reset+0xfb102a8c>
8112363c:	02a04534 	movhi	r10,33044
81123640:	52815604 	addi	r10,r10,1368
81123644:	da802415 	stw	r10,144(sp)
81123648:	200d883a 	mov	r6,r4
8112364c:	003c9106 	br	81122894 <__reset+0xfb102894>
81123650:	5021883a 	mov	r16,r10
81123654:	0013883a 	mov	r9,zero
81123658:	003b7d06 	br	81122450 <__reset+0xfb102450>
8112365c:	4827883a 	mov	r19,r9
81123660:	df001d83 	ldbu	fp,118(sp)
81123664:	d8c02215 	stw	r3,136(sp)
81123668:	0013883a 	mov	r9,zero
8112366c:	003c1806 	br	811226d0 <__reset+0xfb1026d0>
81123670:	1829883a 	mov	r20,r3
81123674:	003d1806 	br	81122ad8 <__reset+0xfb102ad8>
81123678:	1829883a 	mov	r20,r3
8112367c:	003ccd06 	br	811229b4 <__reset+0xfb1029b4>
81123680:	0025883a 	mov	r18,zero
81123684:	003fe906 	br	8112362c <__reset+0xfb10362c>
81123688:	d8802217 	ldw	r2,136(sp)
8112368c:	80c00043 	ldbu	r3,1(r16)
81123690:	5021883a 	mov	r16,r10
81123694:	12400017 	ldw	r9,0(r2)
81123698:	10800104 	addi	r2,r2,4
8112369c:	d8802215 	stw	r2,136(sp)
811236a0:	483faf0e 	bge	r9,zero,81123560 <__reset+0xfb103560>
811236a4:	18c03fcc 	andi	r3,r3,255
811236a8:	18c0201c 	xori	r3,r3,128
811236ac:	027fffc4 	movi	r9,-1
811236b0:	18ffe004 	addi	r3,r3,-128
811236b4:	003b6506 	br	8112244c <__reset+0xfb10244c>
811236b8:	d9c01d85 	stb	r7,118(sp)
811236bc:	003ca006 	br	81122940 <__reset+0xfb102940>
811236c0:	d9c01d85 	stb	r7,118(sp)
811236c4:	003cad06 	br	8112297c <__reset+0xfb10297c>
811236c8:	d9c01d85 	stb	r7,118(sp)
811236cc:	003d7d06 	br	81122cc4 <__reset+0xfb102cc4>
811236d0:	d9c01d85 	stb	r7,118(sp)
811236d4:	003d5f06 	br	81122c54 <__reset+0xfb102c54>
811236d8:	a080004c 	andi	r2,r20,1
811236dc:	0039883a 	mov	fp,zero
811236e0:	10000526 	beq	r2,zero,811236f8 <___vfiprintf_internal_r+0x1430>
811236e4:	00800c04 	movi	r2,48
811236e8:	d88019c5 	stb	r2,103(sp)
811236ec:	dcc02717 	ldw	r19,156(sp)
811236f0:	dd4019c4 	addi	r21,sp,103
811236f4:	003bf606 	br	811226d0 <__reset+0xfb1026d0>
811236f8:	0027883a 	mov	r19,zero
811236fc:	dd401a04 	addi	r21,sp,104
81123700:	003bf306 	br	811226d0 <__reset+0xfb1026d0>
81123704:	d9c01d85 	stb	r7,118(sp)
81123708:	003dc806 	br	81122e2c <__reset+0xfb102e2c>
8112370c:	d9c01d85 	stb	r7,118(sp)
81123710:	003d3a06 	br	81122bfc <__reset+0xfb102bfc>
81123714:	d9c01d85 	stb	r7,118(sp)
81123718:	003d2a06 	br	81122bc4 <__reset+0xfb102bc4>
8112371c:	d9c01d85 	stb	r7,118(sp)
81123720:	003cde06 	br	81122a9c <__reset+0xfb102a9c>
81123724:	d9c01d85 	stb	r7,118(sp)
81123728:	003cbc06 	br	81122a1c <__reset+0xfb102a1c>

8112372c <__vfiprintf_internal>:
8112372c:	00a04534 	movhi	r2,33044
81123730:	108aa604 	addi	r2,r2,10904
81123734:	300f883a 	mov	r7,r6
81123738:	280d883a 	mov	r6,r5
8112373c:	200b883a 	mov	r5,r4
81123740:	11000017 	ldw	r4,0(r2)
81123744:	11222c81 	jmpi	811222c8 <___vfiprintf_internal_r>

81123748 <__sbprintf>:
81123748:	defee204 	addi	sp,sp,-1144
8112374c:	de00012e 	bgeu	sp,et,81123754 <__sbprintf+0xc>
81123750:	003b68fa 	trap	3
81123754:	2880030b 	ldhu	r2,12(r5)
81123758:	2ac01917 	ldw	r11,100(r5)
8112375c:	2a80038b 	ldhu	r10,14(r5)
81123760:	2a400717 	ldw	r9,28(r5)
81123764:	2a000917 	ldw	r8,36(r5)
81123768:	00c10004 	movi	r3,1024
8112376c:	dc011a15 	stw	r16,1128(sp)
81123770:	10bfff4c 	andi	r2,r2,65533
81123774:	2821883a 	mov	r16,r5
81123778:	d8cb883a 	add	r5,sp,r3
8112377c:	dc811c15 	stw	r18,1136(sp)
81123780:	dc411b15 	stw	r17,1132(sp)
81123784:	dfc11d15 	stw	ra,1140(sp)
81123788:	2025883a 	mov	r18,r4
8112378c:	d881030d 	sth	r2,1036(sp)
81123790:	dac11915 	stw	r11,1124(sp)
81123794:	da81038d 	sth	r10,1038(sp)
81123798:	da410715 	stw	r9,1052(sp)
8112379c:	da010915 	stw	r8,1060(sp)
811237a0:	dec10015 	stw	sp,1024(sp)
811237a4:	dec10415 	stw	sp,1040(sp)
811237a8:	d8c10215 	stw	r3,1032(sp)
811237ac:	d8c10515 	stw	r3,1044(sp)
811237b0:	d8010615 	stw	zero,1048(sp)
811237b4:	11222c80 	call	811222c8 <___vfiprintf_internal_r>
811237b8:	1023883a 	mov	r17,r2
811237bc:	10000416 	blt	r2,zero,811237d0 <__sbprintf+0x88>
811237c0:	d9410004 	addi	r5,sp,1024
811237c4:	9009883a 	mov	r4,r18
811237c8:	111ba800 	call	8111ba80 <_fflush_r>
811237cc:	10000d1e 	bne	r2,zero,81123804 <__sbprintf+0xbc>
811237d0:	d881030b 	ldhu	r2,1036(sp)
811237d4:	1080100c 	andi	r2,r2,64
811237d8:	10000326 	beq	r2,zero,811237e8 <__sbprintf+0xa0>
811237dc:	8080030b 	ldhu	r2,12(r16)
811237e0:	10801014 	ori	r2,r2,64
811237e4:	8080030d 	sth	r2,12(r16)
811237e8:	8805883a 	mov	r2,r17
811237ec:	dfc11d17 	ldw	ra,1140(sp)
811237f0:	dc811c17 	ldw	r18,1136(sp)
811237f4:	dc411b17 	ldw	r17,1132(sp)
811237f8:	dc011a17 	ldw	r16,1128(sp)
811237fc:	dec11e04 	addi	sp,sp,1144
81123800:	f800283a 	ret
81123804:	047fffc4 	movi	r17,-1
81123808:	003ff106 	br	811237d0 <__reset+0xfb1037d0>

8112380c <_calloc_r>:
8112380c:	298b383a 	mul	r5,r5,r6
81123810:	defffe04 	addi	sp,sp,-8
81123814:	de00012e 	bgeu	sp,et,8112381c <_calloc_r+0x10>
81123818:	003b68fa 	trap	3
8112381c:	dfc00115 	stw	ra,4(sp)
81123820:	dc000015 	stw	r16,0(sp)
81123824:	11128a00 	call	811128a0 <_malloc_r>
81123828:	10002926 	beq	r2,zero,811238d0 <_calloc_r+0xc4>
8112382c:	11bfff17 	ldw	r6,-4(r2)
81123830:	1021883a 	mov	r16,r2
81123834:	00bfff04 	movi	r2,-4
81123838:	308c703a 	and	r6,r6,r2
8112383c:	00c00904 	movi	r3,36
81123840:	308d883a 	add	r6,r6,r2
81123844:	19801636 	bltu	r3,r6,811238a0 <_calloc_r+0x94>
81123848:	008004c4 	movi	r2,19
8112384c:	11800b2e 	bgeu	r2,r6,8112387c <_calloc_r+0x70>
81123850:	80000015 	stw	zero,0(r16)
81123854:	80000115 	stw	zero,4(r16)
81123858:	008006c4 	movi	r2,27
8112385c:	11801a2e 	bgeu	r2,r6,811238c8 <_calloc_r+0xbc>
81123860:	80000215 	stw	zero,8(r16)
81123864:	80000315 	stw	zero,12(r16)
81123868:	30c0151e 	bne	r6,r3,811238c0 <_calloc_r+0xb4>
8112386c:	80000415 	stw	zero,16(r16)
81123870:	80800604 	addi	r2,r16,24
81123874:	80000515 	stw	zero,20(r16)
81123878:	00000106 	br	81123880 <_calloc_r+0x74>
8112387c:	8005883a 	mov	r2,r16
81123880:	10000015 	stw	zero,0(r2)
81123884:	10000115 	stw	zero,4(r2)
81123888:	10000215 	stw	zero,8(r2)
8112388c:	8005883a 	mov	r2,r16
81123890:	dfc00117 	ldw	ra,4(sp)
81123894:	dc000017 	ldw	r16,0(sp)
81123898:	dec00204 	addi	sp,sp,8
8112389c:	f800283a 	ret
811238a0:	000b883a 	mov	r5,zero
811238a4:	8009883a 	mov	r4,r16
811238a8:	11132040 	call	81113204 <memset>
811238ac:	8005883a 	mov	r2,r16
811238b0:	dfc00117 	ldw	ra,4(sp)
811238b4:	dc000017 	ldw	r16,0(sp)
811238b8:	dec00204 	addi	sp,sp,8
811238bc:	f800283a 	ret
811238c0:	80800404 	addi	r2,r16,16
811238c4:	003fee06 	br	81123880 <__reset+0xfb103880>
811238c8:	80800204 	addi	r2,r16,8
811238cc:	003fec06 	br	81123880 <__reset+0xfb103880>
811238d0:	0005883a 	mov	r2,zero
811238d4:	003fee06 	br	81123890 <__reset+0xfb103890>

811238d8 <_fclose_r>:
811238d8:	28003b26 	beq	r5,zero,811239c8 <_fclose_r+0xf0>
811238dc:	defffc04 	addi	sp,sp,-16
811238e0:	de00012e 	bgeu	sp,et,811238e8 <_fclose_r+0x10>
811238e4:	003b68fa 	trap	3
811238e8:	dc400115 	stw	r17,4(sp)
811238ec:	dc000015 	stw	r16,0(sp)
811238f0:	dfc00315 	stw	ra,12(sp)
811238f4:	dc800215 	stw	r18,8(sp)
811238f8:	2023883a 	mov	r17,r4
811238fc:	2821883a 	mov	r16,r5
81123900:	20000226 	beq	r4,zero,8112390c <_fclose_r+0x34>
81123904:	20800e17 	ldw	r2,56(r4)
81123908:	10002726 	beq	r2,zero,811239a8 <_fclose_r+0xd0>
8112390c:	8080030f 	ldh	r2,12(r16)
81123910:	1000071e 	bne	r2,zero,81123930 <_fclose_r+0x58>
81123914:	0005883a 	mov	r2,zero
81123918:	dfc00317 	ldw	ra,12(sp)
8112391c:	dc800217 	ldw	r18,8(sp)
81123920:	dc400117 	ldw	r17,4(sp)
81123924:	dc000017 	ldw	r16,0(sp)
81123928:	dec00404 	addi	sp,sp,16
8112392c:	f800283a 	ret
81123930:	800b883a 	mov	r5,r16
81123934:	8809883a 	mov	r4,r17
81123938:	111b85c0 	call	8111b85c <__sflush_r>
8112393c:	1025883a 	mov	r18,r2
81123940:	80800b17 	ldw	r2,44(r16)
81123944:	10000426 	beq	r2,zero,81123958 <_fclose_r+0x80>
81123948:	81400717 	ldw	r5,28(r16)
8112394c:	8809883a 	mov	r4,r17
81123950:	103ee83a 	callr	r2
81123954:	10001616 	blt	r2,zero,811239b0 <_fclose_r+0xd8>
81123958:	8080030b 	ldhu	r2,12(r16)
8112395c:	1080200c 	andi	r2,r2,128
81123960:	1000151e 	bne	r2,zero,811239b8 <_fclose_r+0xe0>
81123964:	81400c17 	ldw	r5,48(r16)
81123968:	28000526 	beq	r5,zero,81123980 <_fclose_r+0xa8>
8112396c:	80801004 	addi	r2,r16,64
81123970:	28800226 	beq	r5,r2,8112397c <_fclose_r+0xa4>
81123974:	8809883a 	mov	r4,r17
81123978:	111c3140 	call	8111c314 <_free_r>
8112397c:	80000c15 	stw	zero,48(r16)
81123980:	81401117 	ldw	r5,68(r16)
81123984:	28000326 	beq	r5,zero,81123994 <_fclose_r+0xbc>
81123988:	8809883a 	mov	r4,r17
8112398c:	111c3140 	call	8111c314 <_free_r>
81123990:	80001115 	stw	zero,68(r16)
81123994:	111be8c0 	call	8111be8c <__sfp_lock_acquire>
81123998:	8000030d 	sth	zero,12(r16)
8112399c:	111be900 	call	8111be90 <__sfp_lock_release>
811239a0:	9005883a 	mov	r2,r18
811239a4:	003fdc06 	br	81123918 <__reset+0xfb103918>
811239a8:	111be7c0 	call	8111be7c <__sinit>
811239ac:	003fd706 	br	8112390c <__reset+0xfb10390c>
811239b0:	04bfffc4 	movi	r18,-1
811239b4:	003fe806 	br	81123958 <__reset+0xfb103958>
811239b8:	81400417 	ldw	r5,16(r16)
811239bc:	8809883a 	mov	r4,r17
811239c0:	111c3140 	call	8111c314 <_free_r>
811239c4:	003fe706 	br	81123964 <__reset+0xfb103964>
811239c8:	0005883a 	mov	r2,zero
811239cc:	f800283a 	ret

811239d0 <fclose>:
811239d0:	00a04534 	movhi	r2,33044
811239d4:	108aa604 	addi	r2,r2,10904
811239d8:	200b883a 	mov	r5,r4
811239dc:	11000017 	ldw	r4,0(r2)
811239e0:	11238d81 	jmpi	811238d8 <_fclose_r>

811239e4 <__fputwc>:
811239e4:	defff804 	addi	sp,sp,-32
811239e8:	de00012e 	bgeu	sp,et,811239f0 <__fputwc+0xc>
811239ec:	003b68fa 	trap	3
811239f0:	dcc00415 	stw	r19,16(sp)
811239f4:	dc800315 	stw	r18,12(sp)
811239f8:	dc000115 	stw	r16,4(sp)
811239fc:	dfc00715 	stw	ra,28(sp)
81123a00:	dd400615 	stw	r21,24(sp)
81123a04:	dd000515 	stw	r20,20(sp)
81123a08:	dc400215 	stw	r17,8(sp)
81123a0c:	2027883a 	mov	r19,r4
81123a10:	2825883a 	mov	r18,r5
81123a14:	3021883a 	mov	r16,r6
81123a18:	111cda40 	call	8111cda4 <__locale_mb_cur_max>
81123a1c:	00c00044 	movi	r3,1
81123a20:	10c03e26 	beq	r2,r3,81123b1c <__fputwc+0x138>
81123a24:	81c01704 	addi	r7,r16,92
81123a28:	900d883a 	mov	r6,r18
81123a2c:	d80b883a 	mov	r5,sp
81123a30:	9809883a 	mov	r4,r19
81123a34:	11248680 	call	81124868 <_wcrtomb_r>
81123a38:	1029883a 	mov	r20,r2
81123a3c:	00bfffc4 	movi	r2,-1
81123a40:	a0802026 	beq	r20,r2,81123ac4 <__fputwc+0xe0>
81123a44:	d9400003 	ldbu	r5,0(sp)
81123a48:	a0001c26 	beq	r20,zero,81123abc <__fputwc+0xd8>
81123a4c:	0023883a 	mov	r17,zero
81123a50:	05400284 	movi	r21,10
81123a54:	00000906 	br	81123a7c <__fputwc+0x98>
81123a58:	80800017 	ldw	r2,0(r16)
81123a5c:	11400005 	stb	r5,0(r2)
81123a60:	80c00017 	ldw	r3,0(r16)
81123a64:	18c00044 	addi	r3,r3,1
81123a68:	80c00015 	stw	r3,0(r16)
81123a6c:	8c400044 	addi	r17,r17,1
81123a70:	dc45883a 	add	r2,sp,r17
81123a74:	8d00112e 	bgeu	r17,r20,81123abc <__fputwc+0xd8>
81123a78:	11400003 	ldbu	r5,0(r2)
81123a7c:	80c00217 	ldw	r3,8(r16)
81123a80:	18ffffc4 	addi	r3,r3,-1
81123a84:	80c00215 	stw	r3,8(r16)
81123a88:	183ff30e 	bge	r3,zero,81123a58 <__reset+0xfb103a58>
81123a8c:	80800617 	ldw	r2,24(r16)
81123a90:	18801916 	blt	r3,r2,81123af8 <__fputwc+0x114>
81123a94:	80800017 	ldw	r2,0(r16)
81123a98:	11400005 	stb	r5,0(r2)
81123a9c:	80800017 	ldw	r2,0(r16)
81123aa0:	10c00003 	ldbu	r3,0(r2)
81123aa4:	10800044 	addi	r2,r2,1
81123aa8:	1d402326 	beq	r3,r21,81123b38 <__fputwc+0x154>
81123aac:	80800015 	stw	r2,0(r16)
81123ab0:	8c400044 	addi	r17,r17,1
81123ab4:	dc45883a 	add	r2,sp,r17
81123ab8:	8d3fef36 	bltu	r17,r20,81123a78 <__reset+0xfb103a78>
81123abc:	9005883a 	mov	r2,r18
81123ac0:	00000406 	br	81123ad4 <__fputwc+0xf0>
81123ac4:	80c0030b 	ldhu	r3,12(r16)
81123ac8:	a005883a 	mov	r2,r20
81123acc:	18c01014 	ori	r3,r3,64
81123ad0:	80c0030d 	sth	r3,12(r16)
81123ad4:	dfc00717 	ldw	ra,28(sp)
81123ad8:	dd400617 	ldw	r21,24(sp)
81123adc:	dd000517 	ldw	r20,20(sp)
81123ae0:	dcc00417 	ldw	r19,16(sp)
81123ae4:	dc800317 	ldw	r18,12(sp)
81123ae8:	dc400217 	ldw	r17,8(sp)
81123aec:	dc000117 	ldw	r16,4(sp)
81123af0:	dec00804 	addi	sp,sp,32
81123af4:	f800283a 	ret
81123af8:	800d883a 	mov	r6,r16
81123afc:	29403fcc 	andi	r5,r5,255
81123b00:	9809883a 	mov	r4,r19
81123b04:	1119c440 	call	81119c44 <__swbuf_r>
81123b08:	10bfffe0 	cmpeqi	r2,r2,-1
81123b0c:	10803fcc 	andi	r2,r2,255
81123b10:	103fd626 	beq	r2,zero,81123a6c <__reset+0xfb103a6c>
81123b14:	00bfffc4 	movi	r2,-1
81123b18:	003fee06 	br	81123ad4 <__reset+0xfb103ad4>
81123b1c:	90ffffc4 	addi	r3,r18,-1
81123b20:	01003f84 	movi	r4,254
81123b24:	20ffbf36 	bltu	r4,r3,81123a24 <__reset+0xfb103a24>
81123b28:	900b883a 	mov	r5,r18
81123b2c:	dc800005 	stb	r18,0(sp)
81123b30:	1029883a 	mov	r20,r2
81123b34:	003fc506 	br	81123a4c <__reset+0xfb103a4c>
81123b38:	800d883a 	mov	r6,r16
81123b3c:	a80b883a 	mov	r5,r21
81123b40:	9809883a 	mov	r4,r19
81123b44:	1119c440 	call	81119c44 <__swbuf_r>
81123b48:	10bfffe0 	cmpeqi	r2,r2,-1
81123b4c:	003fef06 	br	81123b0c <__reset+0xfb103b0c>

81123b50 <_fputwc_r>:
81123b50:	3080030b 	ldhu	r2,12(r6)
81123b54:	10c8000c 	andi	r3,r2,8192
81123b58:	1800051e 	bne	r3,zero,81123b70 <_fputwc_r+0x20>
81123b5c:	30c01917 	ldw	r3,100(r6)
81123b60:	10880014 	ori	r2,r2,8192
81123b64:	3080030d 	sth	r2,12(r6)
81123b68:	18880014 	ori	r2,r3,8192
81123b6c:	30801915 	stw	r2,100(r6)
81123b70:	11239e41 	jmpi	811239e4 <__fputwc>

81123b74 <fputwc>:
81123b74:	00a04534 	movhi	r2,33044
81123b78:	defffc04 	addi	sp,sp,-16
81123b7c:	108aa604 	addi	r2,r2,10904
81123b80:	de00012e 	bgeu	sp,et,81123b88 <fputwc+0x14>
81123b84:	003b68fa 	trap	3
81123b88:	dc000115 	stw	r16,4(sp)
81123b8c:	14000017 	ldw	r16,0(r2)
81123b90:	dc400215 	stw	r17,8(sp)
81123b94:	dfc00315 	stw	ra,12(sp)
81123b98:	2023883a 	mov	r17,r4
81123b9c:	80000226 	beq	r16,zero,81123ba8 <fputwc+0x34>
81123ba0:	80800e17 	ldw	r2,56(r16)
81123ba4:	10001026 	beq	r2,zero,81123be8 <fputwc+0x74>
81123ba8:	2880030b 	ldhu	r2,12(r5)
81123bac:	10c8000c 	andi	r3,r2,8192
81123bb0:	1800051e 	bne	r3,zero,81123bc8 <fputwc+0x54>
81123bb4:	28c01917 	ldw	r3,100(r5)
81123bb8:	10880014 	ori	r2,r2,8192
81123bbc:	2880030d 	sth	r2,12(r5)
81123bc0:	18880014 	ori	r2,r3,8192
81123bc4:	28801915 	stw	r2,100(r5)
81123bc8:	280d883a 	mov	r6,r5
81123bcc:	8009883a 	mov	r4,r16
81123bd0:	880b883a 	mov	r5,r17
81123bd4:	dfc00317 	ldw	ra,12(sp)
81123bd8:	dc400217 	ldw	r17,8(sp)
81123bdc:	dc000117 	ldw	r16,4(sp)
81123be0:	dec00404 	addi	sp,sp,16
81123be4:	11239e41 	jmpi	811239e4 <__fputwc>
81123be8:	8009883a 	mov	r4,r16
81123bec:	d9400015 	stw	r5,0(sp)
81123bf0:	111be7c0 	call	8111be7c <__sinit>
81123bf4:	d9400017 	ldw	r5,0(sp)
81123bf8:	003feb06 	br	81123ba8 <__reset+0xfb103ba8>

81123bfc <rshift>:
81123bfc:	2807d17a 	srai	r3,r5,5
81123c00:	20800417 	ldw	r2,16(r4)
81123c04:	22000504 	addi	r8,r4,20
81123c08:	1880250e 	bge	r3,r2,81123ca0 <rshift+0xa4>
81123c0c:	1085883a 	add	r2,r2,r2
81123c10:	18c7883a 	add	r3,r3,r3
81123c14:	1085883a 	add	r2,r2,r2
81123c18:	18c7883a 	add	r3,r3,r3
81123c1c:	294007cc 	andi	r5,r5,31
81123c20:	4085883a 	add	r2,r8,r2
81123c24:	40c7883a 	add	r3,r8,r3
81123c28:	28002026 	beq	r5,zero,81123cac <rshift+0xb0>
81123c2c:	19800017 	ldw	r6,0(r3)
81123c30:	02c00804 	movi	r11,32
81123c34:	19c00104 	addi	r7,r3,4
81123c38:	5957c83a 	sub	r11,r11,r5
81123c3c:	314cd83a 	srl	r6,r6,r5
81123c40:	38802c2e 	bgeu	r7,r2,81123cf4 <rshift+0xf8>
81123c44:	4015883a 	mov	r10,r8
81123c48:	3a400017 	ldw	r9,0(r7)
81123c4c:	52800104 	addi	r10,r10,4
81123c50:	39c00104 	addi	r7,r7,4
81123c54:	4ad2983a 	sll	r9,r9,r11
81123c58:	498cb03a 	or	r6,r9,r6
81123c5c:	51bfff15 	stw	r6,-4(r10)
81123c60:	39bfff17 	ldw	r6,-4(r7)
81123c64:	314cd83a 	srl	r6,r6,r5
81123c68:	38bff736 	bltu	r7,r2,81123c48 <__reset+0xfb103c48>
81123c6c:	10c7c83a 	sub	r3,r2,r3
81123c70:	18fffec4 	addi	r3,r3,-5
81123c74:	1806d0ba 	srli	r3,r3,2
81123c78:	18c00044 	addi	r3,r3,1
81123c7c:	18c7883a 	add	r3,r3,r3
81123c80:	18c7883a 	add	r3,r3,r3
81123c84:	40c7883a 	add	r3,r8,r3
81123c88:	19800015 	stw	r6,0(r3)
81123c8c:	30000126 	beq	r6,zero,81123c94 <rshift+0x98>
81123c90:	18c00104 	addi	r3,r3,4
81123c94:	1a05c83a 	sub	r2,r3,r8
81123c98:	1005d0ba 	srai	r2,r2,2
81123c9c:	00001206 	br	81123ce8 <rshift+0xec>
81123ca0:	20000415 	stw	zero,16(r4)
81123ca4:	20000515 	stw	zero,20(r4)
81123ca8:	f800283a 	ret
81123cac:	18bffc2e 	bgeu	r3,r2,81123ca0 <__reset+0xfb103ca0>
81123cb0:	180d883a 	mov	r6,r3
81123cb4:	400b883a 	mov	r5,r8
81123cb8:	31c00017 	ldw	r7,0(r6)
81123cbc:	29400104 	addi	r5,r5,4
81123cc0:	31800104 	addi	r6,r6,4
81123cc4:	29ffff15 	stw	r7,-4(r5)
81123cc8:	30bffb36 	bltu	r6,r2,81123cb8 <__reset+0xfb103cb8>
81123ccc:	00c6303a 	nor	r3,zero,r3
81123cd0:	1885883a 	add	r2,r3,r2
81123cd4:	1004d0ba 	srli	r2,r2,2
81123cd8:	10800044 	addi	r2,r2,1
81123cdc:	1085883a 	add	r2,r2,r2
81123ce0:	1085883a 	add	r2,r2,r2
81123ce4:	1005d0ba 	srai	r2,r2,2
81123ce8:	20800415 	stw	r2,16(r4)
81123cec:	103fed26 	beq	r2,zero,81123ca4 <__reset+0xfb103ca4>
81123cf0:	f800283a 	ret
81123cf4:	4007883a 	mov	r3,r8
81123cf8:	003fe306 	br	81123c88 <__reset+0xfb103c88>

81123cfc <__gethex>:
81123cfc:	deffeb04 	addi	sp,sp,-84
81123d00:	de00012e 	bgeu	sp,et,81123d08 <__gethex+0xc>
81123d04:	003b68fa 	trap	3
81123d08:	dfc01415 	stw	ra,80(sp)
81123d0c:	dd801115 	stw	r22,68(sp)
81123d10:	dcc00e15 	stw	r19,56(sp)
81123d14:	dc800d15 	stw	r18,52(sp)
81123d18:	2827883a 	mov	r19,r5
81123d1c:	d9000115 	stw	r4,4(sp)
81123d20:	d9800015 	stw	r6,0(sp)
81123d24:	d9c00415 	stw	r7,16(sp)
81123d28:	df001315 	stw	fp,76(sp)
81123d2c:	ddc01215 	stw	r23,72(sp)
81123d30:	dd401015 	stw	r21,64(sp)
81123d34:	dd000f15 	stw	r20,60(sp)
81123d38:	dc400c15 	stw	r17,48(sp)
81123d3c:	dc000b15 	stw	r16,44(sp)
81123d40:	111cdc80 	call	8111cdc8 <_localeconv_r>
81123d44:	14800017 	ldw	r18,0(r2)
81123d48:	9009883a 	mov	r4,r18
81123d4c:	1113ba80 	call	81113ba8 <strlen>
81123d50:	98c00017 	ldw	r3,0(r19)
81123d54:	102d883a 	mov	r22,r2
81123d58:	9085883a 	add	r2,r18,r2
81123d5c:	10bfffc3 	ldbu	r2,-1(r2)
81123d60:	19000083 	ldbu	r4,2(r3)
81123d64:	d8800305 	stb	r2,12(sp)
81123d68:	00800c04 	movi	r2,48
81123d6c:	2081521e 	bne	r4,r2,811242b8 <__gethex+0x5bc>
81123d70:	017fff84 	movi	r5,-2
81123d74:	188000c4 	addi	r2,r3,3
81123d78:	28cbc83a 	sub	r5,r5,r3
81123d7c:	200d883a 	mov	r6,r4
81123d80:	28a3883a 	add	r17,r5,r2
81123d84:	102b883a 	mov	r21,r2
81123d88:	10800044 	addi	r2,r2,1
81123d8c:	113fffc3 	ldbu	r4,-1(r2)
81123d90:	21bffb26 	beq	r4,r6,81123d80 <__reset+0xfb103d80>
81123d94:	05204534 	movhi	r20,33044
81123d98:	a5015e04 	addi	r20,r20,1400
81123d9c:	a109883a 	add	r4,r20,r4
81123da0:	20800003 	ldbu	r2,0(r4)
81123da4:	10008826 	beq	r2,zero,81123fc8 <__gethex+0x2cc>
81123da8:	a8800003 	ldbu	r2,0(r21)
81123dac:	0015883a 	mov	r10,zero
81123db0:	002f883a 	mov	r23,zero
81123db4:	a085883a 	add	r2,r20,r2
81123db8:	10800003 	ldbu	r2,0(r2)
81123dbc:	a821883a 	mov	r16,r21
81123dc0:	10000526 	beq	r2,zero,81123dd8 <__gethex+0xdc>
81123dc4:	84000044 	addi	r16,r16,1
81123dc8:	80800003 	ldbu	r2,0(r16)
81123dcc:	a085883a 	add	r2,r20,r2
81123dd0:	10800003 	ldbu	r2,0(r2)
81123dd4:	103ffb1e 	bne	r2,zero,81123dc4 <__reset+0xfb103dc4>
81123dd8:	b00d883a 	mov	r6,r22
81123ddc:	900b883a 	mov	r5,r18
81123de0:	8009883a 	mov	r4,r16
81123de4:	da800a15 	stw	r10,40(sp)
81123de8:	11247980 	call	81124798 <strncmp>
81123dec:	da800a17 	ldw	r10,40(sp)
81123df0:	1000031e 	bne	r2,zero,81123e00 <__gethex+0x104>
81123df4:	b8015226 	beq	r23,zero,81124340 <__gethex+0x644>
81123df8:	80800003 	ldbu	r2,0(r16)
81123dfc:	00000206 	br	81123e08 <__gethex+0x10c>
81123e00:	80800003 	ldbu	r2,0(r16)
81123e04:	b8011f26 	beq	r23,zero,81124284 <__gethex+0x588>
81123e08:	85efc83a 	sub	r23,r16,r23
81123e0c:	bdef883a 	add	r23,r23,r23
81123e10:	bdef883a 	add	r23,r23,r23
81123e14:	05efc83a 	sub	r23,zero,r23
81123e18:	10803fcc 	andi	r2,r2,255
81123e1c:	01001404 	movi	r4,80
81123e20:	11008626 	beq	r2,r4,8112403c <__gethex+0x340>
81123e24:	01001c04 	movi	r4,112
81123e28:	11008426 	beq	r2,r4,8112403c <__gethex+0x340>
81123e2c:	8039883a 	mov	fp,r16
81123e30:	9c000015 	stw	r16,0(r19)
81123e34:	5000711e 	bne	r10,zero,81123ffc <__gethex+0x300>
81123e38:	e545c83a 	sub	r2,fp,r21
81123e3c:	10bfffc4 	addi	r2,r2,-1
81123e40:	010001c4 	movi	r4,7
81123e44:	000b883a 	mov	r5,zero
81123e48:	2080030e 	bge	r4,r2,81123e58 <__gethex+0x15c>
81123e4c:	1005d07a 	srai	r2,r2,1
81123e50:	29400044 	addi	r5,r5,1
81123e54:	20bffd16 	blt	r4,r2,81123e4c <__reset+0xfb103e4c>
81123e58:	d9000117 	ldw	r4,4(sp)
81123e5c:	111d2e40 	call	8111d2e4 <_Balloc>
81123e60:	10c00504 	addi	r3,r2,20
81123e64:	d8c00215 	stw	r3,8(sp)
81123e68:	1021883a 	mov	r16,r2
81123e6c:	af01732e 	bgeu	r21,fp,8112443c <__gethex+0x740>
81123e70:	dc400303 	ldbu	r17,12(sp)
81123e74:	03400044 	movi	r13,1
81123e78:	1815883a 	mov	r10,r3
81123e7c:	0013883a 	mov	r9,zero
81123e80:	0027883a 	mov	r19,zero
81123e84:	6d9bc83a 	sub	r13,r13,r22
81123e88:	02c00804 	movi	r11,32
81123e8c:	e0bfffc3 	ldbu	r2,-1(fp)
81123e90:	e3bfffc4 	addi	r14,fp,-1
81123e94:	88803026 	beq	r17,r2,81123f58 <__gethex+0x25c>
81123e98:	9ac04526 	beq	r19,r11,81123fb0 <__gethex+0x2b4>
81123e9c:	980b883a 	mov	r5,r19
81123ea0:	9cc00104 	addi	r19,r19,4
81123ea4:	e13fffc3 	ldbu	r4,-1(fp)
81123ea8:	7039883a 	mov	fp,r14
81123eac:	a109883a 	add	r4,r20,r4
81123eb0:	20800003 	ldbu	r2,0(r4)
81123eb4:	108003cc 	andi	r2,r2,15
81123eb8:	1144983a 	sll	r2,r2,r5
81123ebc:	4892b03a 	or	r9,r9,r2
81123ec0:	af3ff236 	bltu	r21,fp,81123e8c <__reset+0xfb103e8c>
81123ec4:	d8c00217 	ldw	r3,8(sp)
81123ec8:	50800104 	addi	r2,r10,4
81123ecc:	52400015 	stw	r9,0(r10)
81123ed0:	10c5c83a 	sub	r2,r2,r3
81123ed4:	1005d0ba 	srai	r2,r2,2
81123ed8:	4809883a 	mov	r4,r9
81123edc:	80800415 	stw	r2,16(r16)
81123ee0:	1022917a 	slli	r17,r2,5
81123ee4:	111d5f00 	call	8111d5f0 <__hi0bits>
81123ee8:	d8c00017 	ldw	r3,0(sp)
81123eec:	8885c83a 	sub	r2,r17,r2
81123ef0:	1c800017 	ldw	r18,0(r3)
81123ef4:	9080c716 	blt	r18,r2,81124214 <__gethex+0x518>
81123ef8:	1480e416 	blt	r2,r18,8112428c <__gethex+0x590>
81123efc:	0027883a 	mov	r19,zero
81123f00:	d8c00017 	ldw	r3,0(sp)
81123f04:	18800217 	ldw	r2,8(r3)
81123f08:	15c08d16 	blt	r2,r23,81124140 <__gethex+0x444>
81123f0c:	d8c00017 	ldw	r3,0(sp)
81123f10:	18800117 	ldw	r2,4(r3)
81123f14:	b880aa0e 	bge	r23,r2,811241c0 <__gethex+0x4c4>
81123f18:	15efc83a 	sub	r23,r2,r23
81123f1c:	bc80ed16 	blt	r23,r18,811242d4 <__gethex+0x5d8>
81123f20:	18c00317 	ldw	r3,12(r3)
81123f24:	01000084 	movi	r4,2
81123f28:	19014926 	beq	r3,r4,81124450 <__gethex+0x754>
81123f2c:	010000c4 	movi	r4,3
81123f30:	19012e26 	beq	r3,r4,811243ec <__gethex+0x6f0>
81123f34:	01000044 	movi	r4,1
81123f38:	19014826 	beq	r3,r4,8112445c <__gethex+0x760>
81123f3c:	d9000117 	ldw	r4,4(sp)
81123f40:	800b883a 	mov	r5,r16
81123f44:	111d3940 	call	8111d394 <_Bfree>
81123f48:	d8801517 	ldw	r2,84(sp)
81123f4c:	10000015 	stw	zero,0(r2)
81123f50:	00801404 	movi	r2,80
81123f54:	00002b06 	br	81124004 <__gethex+0x308>
81123f58:	735f883a 	add	r15,r14,r13
81123f5c:	7d7fce36 	bltu	r15,r21,81123e98 <__reset+0xfb103e98>
81123f60:	7809883a 	mov	r4,r15
81123f64:	b00d883a 	mov	r6,r22
81123f68:	900b883a 	mov	r5,r18
81123f6c:	da400515 	stw	r9,20(sp)
81123f70:	da800a15 	stw	r10,40(sp)
81123f74:	dac00915 	stw	r11,36(sp)
81123f78:	db400815 	stw	r13,32(sp)
81123f7c:	db800615 	stw	r14,24(sp)
81123f80:	dbc00715 	stw	r15,28(sp)
81123f84:	11247980 	call	81124798 <strncmp>
81123f88:	da400517 	ldw	r9,20(sp)
81123f8c:	da800a17 	ldw	r10,40(sp)
81123f90:	dac00917 	ldw	r11,36(sp)
81123f94:	db400817 	ldw	r13,32(sp)
81123f98:	db800617 	ldw	r14,24(sp)
81123f9c:	dbc00717 	ldw	r15,28(sp)
81123fa0:	103fbd1e 	bne	r2,zero,81123e98 <__reset+0xfb103e98>
81123fa4:	7839883a 	mov	fp,r15
81123fa8:	af3fb836 	bltu	r21,fp,81123e8c <__reset+0xfb103e8c>
81123fac:	003fc506 	br	81123ec4 <__reset+0xfb103ec4>
81123fb0:	04c00104 	movi	r19,4
81123fb4:	52400015 	stw	r9,0(r10)
81123fb8:	000b883a 	mov	r5,zero
81123fbc:	54d5883a 	add	r10,r10,r19
81123fc0:	0013883a 	mov	r9,zero
81123fc4:	003fb706 	br	81123ea4 <__reset+0xfb103ea4>
81123fc8:	b00d883a 	mov	r6,r22
81123fcc:	900b883a 	mov	r5,r18
81123fd0:	a809883a 	mov	r4,r21
81123fd4:	11247980 	call	81124798 <strncmp>
81123fd8:	10006426 	beq	r2,zero,8112416c <__gethex+0x470>
81123fdc:	a8800003 	ldbu	r2,0(r21)
81123fe0:	a821883a 	mov	r16,r21
81123fe4:	10803fcc 	andi	r2,r2,255
81123fe8:	01001404 	movi	r4,80
81123fec:	11001126 	beq	r2,r4,81124034 <__gethex+0x338>
81123ff0:	01001c04 	movi	r4,112
81123ff4:	11000f26 	beq	r2,r4,81124034 <__gethex+0x338>
81123ff8:	9c000015 	stw	r16,0(r19)
81123ffc:	8800831e 	bne	r17,zero,8112420c <__gethex+0x510>
81124000:	00800184 	movi	r2,6
81124004:	dfc01417 	ldw	ra,80(sp)
81124008:	df001317 	ldw	fp,76(sp)
8112400c:	ddc01217 	ldw	r23,72(sp)
81124010:	dd801117 	ldw	r22,68(sp)
81124014:	dd401017 	ldw	r21,64(sp)
81124018:	dd000f17 	ldw	r20,60(sp)
8112401c:	dcc00e17 	ldw	r19,56(sp)
81124020:	dc800d17 	ldw	r18,52(sp)
81124024:	dc400c17 	ldw	r17,48(sp)
81124028:	dc000b17 	ldw	r16,44(sp)
8112402c:	dec01504 	addi	sp,sp,84
81124030:	f800283a 	ret
81124034:	002f883a 	mov	r23,zero
81124038:	02800044 	movi	r10,1
8112403c:	80800043 	ldbu	r2,1(r16)
81124040:	01400ac4 	movi	r5,43
81124044:	11003fcc 	andi	r4,r2,255
81124048:	21406e26 	beq	r4,r5,81124204 <__gethex+0x508>
8112404c:	01400b44 	movi	r5,45
81124050:	21404226 	beq	r4,r5,8112415c <__gethex+0x460>
81124054:	81400044 	addi	r5,r16,1
81124058:	000d883a 	mov	r6,zero
8112405c:	10803fcc 	andi	r2,r2,255
81124060:	a085883a 	add	r2,r20,r2
81124064:	11000003 	ldbu	r4,0(r2)
81124068:	03000604 	movi	r12,24
8112406c:	20bfffc4 	addi	r2,r4,-1
81124070:	10803fcc 	andi	r2,r2,255
81124074:	60bf6d36 	bltu	r12,r2,81123e2c <__reset+0xfb103e2c>
81124078:	2ac00043 	ldbu	r11,1(r5)
8112407c:	20803fcc 	andi	r2,r4,255
81124080:	01204534 	movhi	r4,33044
81124084:	21015e04 	addi	r4,r4,1400
81124088:	22c9883a 	add	r4,r4,r11
8112408c:	23400003 	ldbu	r13,0(r4)
81124090:	10bffc04 	addi	r2,r2,-16
81124094:	29400044 	addi	r5,r5,1
81124098:	693fffc4 	addi	r4,r13,-1
8112409c:	21003fcc 	andi	r4,r4,255
811240a0:	6b403fcc 	andi	r13,r13,255
811240a4:	61000b36 	bltu	r12,r4,811240d4 <__gethex+0x3d8>
811240a8:	29400044 	addi	r5,r5,1
811240ac:	29000003 	ldbu	r4,0(r5)
811240b0:	108002a4 	muli	r2,r2,10
811240b4:	a109883a 	add	r4,r20,r4
811240b8:	22c00003 	ldbu	r11,0(r4)
811240bc:	1345883a 	add	r2,r2,r13
811240c0:	10bffc04 	addi	r2,r2,-16
811240c4:	593fffc4 	addi	r4,r11,-1
811240c8:	21003fcc 	andi	r4,r4,255
811240cc:	5b403fcc 	andi	r13,r11,255
811240d0:	613ff52e 	bgeu	r12,r4,811240a8 <__reset+0xfb1040a8>
811240d4:	30000126 	beq	r6,zero,811240dc <__gethex+0x3e0>
811240d8:	0085c83a 	sub	r2,zero,r2
811240dc:	8039883a 	mov	fp,r16
811240e0:	b8af883a 	add	r23,r23,r2
811240e4:	2821883a 	mov	r16,r5
811240e8:	003f5106 	br	81123e30 <__reset+0xfb103e30>
811240ec:	80800217 	ldw	r2,8(r16)
811240f0:	e080f00e 	bge	fp,r2,811244b4 <__gethex+0x7b8>
811240f4:	e007883a 	mov	r3,fp
811240f8:	18800144 	addi	r2,r3,5
811240fc:	1085883a 	add	r2,r2,r2
81124100:	18c00044 	addi	r3,r3,1
81124104:	1085883a 	add	r2,r2,r2
81124108:	8085883a 	add	r2,r16,r2
8112410c:	80c00415 	stw	r3,16(r16)
81124110:	01000044 	movi	r4,1
81124114:	11000015 	stw	r4,0(r2)
81124118:	00800084 	movi	r2,2
8112411c:	8880d826 	beq	r17,r2,81124480 <__gethex+0x784>
81124120:	e0c0ac0e 	bge	fp,r3,811243d4 <__gethex+0x6d8>
81124124:	01400044 	movi	r5,1
81124128:	8009883a 	mov	r4,r16
8112412c:	1123bfc0 	call	81123bfc <rshift>
81124130:	d8c00017 	ldw	r3,0(sp)
81124134:	bdc00044 	addi	r23,r23,1
81124138:	18800217 	ldw	r2,8(r3)
8112413c:	15c0a70e 	bge	r2,r23,811243dc <__gethex+0x6e0>
81124140:	d9000117 	ldw	r4,4(sp)
81124144:	800b883a 	mov	r5,r16
81124148:	111d3940 	call	8111d394 <_Bfree>
8112414c:	d9001517 	ldw	r4,84(sp)
81124150:	008028c4 	movi	r2,163
81124154:	20000015 	stw	zero,0(r4)
81124158:	003faa06 	br	81124004 <__reset+0xfb104004>
8112415c:	01800044 	movi	r6,1
81124160:	80800083 	ldbu	r2,2(r16)
81124164:	81400084 	addi	r5,r16,2
81124168:	003fbc06 	br	8112405c <__reset+0xfb10405c>
8112416c:	ada1883a 	add	r16,r21,r22
81124170:	81000003 	ldbu	r4,0(r16)
81124174:	21403fcc 	andi	r5,r4,255
81124178:	a145883a 	add	r2,r20,r5
8112417c:	10800003 	ldbu	r2,0(r2)
81124180:	11803fcc 	andi	r6,r2,255
81124184:	30004f26 	beq	r6,zero,811242c4 <__gethex+0x5c8>
81124188:	00c00c04 	movi	r3,48
8112418c:	802b883a 	mov	r21,r16
81124190:	28c0061e 	bne	r5,r3,811241ac <__gethex+0x4b0>
81124194:	2809883a 	mov	r4,r5
81124198:	ad400044 	addi	r21,r21,1
8112419c:	a8800003 	ldbu	r2,0(r21)
811241a0:	113ffd26 	beq	r2,r4,81124198 <__reset+0xfb104198>
811241a4:	a085883a 	add	r2,r20,r2
811241a8:	10800003 	ldbu	r2,0(r2)
811241ac:	10803fcc 	andi	r2,r2,255
811241b0:	1015003a 	cmpeq	r10,r2,zero
811241b4:	802f883a 	mov	r23,r16
811241b8:	04400044 	movi	r17,1
811241bc:	003eff06 	br	81123dbc <__reset+0xfb103dbc>
811241c0:	04400044 	movi	r17,1
811241c4:	98000926 	beq	r19,zero,811241ec <__gethex+0x4f0>
811241c8:	d8c00017 	ldw	r3,0(sp)
811241cc:	18800317 	ldw	r2,12(r3)
811241d0:	00c00084 	movi	r3,2
811241d4:	10c06826 	beq	r2,r3,81124378 <__gethex+0x67c>
811241d8:	00c000c4 	movi	r3,3
811241dc:	10c06a26 	beq	r2,r3,81124388 <__gethex+0x68c>
811241e0:	00c00044 	movi	r3,1
811241e4:	10c08d26 	beq	r2,r3,8112441c <__gethex+0x720>
811241e8:	8c400414 	ori	r17,r17,16
811241ec:	d9001517 	ldw	r4,84(sp)
811241f0:	d8c00417 	ldw	r3,16(sp)
811241f4:	8805883a 	mov	r2,r17
811241f8:	24000015 	stw	r16,0(r4)
811241fc:	1dc00015 	stw	r23,0(r3)
81124200:	003f8006 	br	81124004 <__reset+0xfb104004>
81124204:	000d883a 	mov	r6,zero
81124208:	003fd506 	br	81124160 <__reset+0xfb104160>
8112420c:	0005883a 	mov	r2,zero
81124210:	003f7c06 	br	81124004 <__reset+0xfb104004>
81124214:	14a3c83a 	sub	r17,r2,r18
81124218:	880b883a 	mov	r5,r17
8112421c:	8009883a 	mov	r4,r16
81124220:	111e2b40 	call	8111e2b4 <__any_on>
81124224:	10002926 	beq	r2,zero,811242cc <__gethex+0x5d0>
81124228:	897fffc4 	addi	r5,r17,-1
8112422c:	2807d17a 	srai	r3,r5,5
81124230:	d8800217 	ldw	r2,8(sp)
81124234:	290007cc 	andi	r4,r5,31
81124238:	18c7883a 	add	r3,r3,r3
8112423c:	18c7883a 	add	r3,r3,r3
81124240:	04c00044 	movi	r19,1
81124244:	10c7883a 	add	r3,r2,r3
81124248:	9908983a 	sll	r4,r19,r4
8112424c:	18c00017 	ldw	r3,0(r3)
81124250:	20c6703a 	and	r3,r4,r3
81124254:	18000626 	beq	r3,zero,81124270 <__gethex+0x574>
81124258:	99407b0e 	bge	r19,r5,81124448 <__gethex+0x74c>
8112425c:	897fff84 	addi	r5,r17,-2
81124260:	8009883a 	mov	r4,r16
81124264:	111e2b40 	call	8111e2b4 <__any_on>
81124268:	10007726 	beq	r2,zero,81124448 <__gethex+0x74c>
8112426c:	04c000c4 	movi	r19,3
81124270:	880b883a 	mov	r5,r17
81124274:	8009883a 	mov	r4,r16
81124278:	1123bfc0 	call	81123bfc <rshift>
8112427c:	bc6f883a 	add	r23,r23,r17
81124280:	003f1f06 	br	81123f00 <__reset+0xfb103f00>
81124284:	002f883a 	mov	r23,zero
81124288:	003ee306 	br	81123e18 <__reset+0xfb103e18>
8112428c:	d9000117 	ldw	r4,4(sp)
81124290:	90a3c83a 	sub	r17,r18,r2
81124294:	800b883a 	mov	r5,r16
81124298:	880d883a 	mov	r6,r17
8112429c:	111da940 	call	8111da94 <__lshift>
811242a0:	10c00504 	addi	r3,r2,20
811242a4:	1021883a 	mov	r16,r2
811242a8:	bc6fc83a 	sub	r23,r23,r17
811242ac:	d8c00215 	stw	r3,8(sp)
811242b0:	0027883a 	mov	r19,zero
811242b4:	003f1206 	br	81123f00 <__reset+0xfb103f00>
811242b8:	1d400084 	addi	r21,r3,2
811242bc:	0023883a 	mov	r17,zero
811242c0:	003eb406 	br	81123d94 <__reset+0xfb103d94>
811242c4:	2005883a 	mov	r2,r4
811242c8:	003f4606 	br	81123fe4 <__reset+0xfb103fe4>
811242cc:	0027883a 	mov	r19,zero
811242d0:	003fe706 	br	81124270 <__reset+0xfb104270>
811242d4:	bc7fffc4 	addi	r17,r23,-1
811242d8:	9800421e 	bne	r19,zero,811243e4 <__gethex+0x6e8>
811242dc:	88000426 	beq	r17,zero,811242f0 <__gethex+0x5f4>
811242e0:	880b883a 	mov	r5,r17
811242e4:	8009883a 	mov	r4,r16
811242e8:	111e2b40 	call	8111e2b4 <__any_on>
811242ec:	1027883a 	mov	r19,r2
811242f0:	8805d17a 	srai	r2,r17,5
811242f4:	d8c00217 	ldw	r3,8(sp)
811242f8:	8c4007cc 	andi	r17,r17,31
811242fc:	1085883a 	add	r2,r2,r2
81124300:	1085883a 	add	r2,r2,r2
81124304:	1885883a 	add	r2,r3,r2
81124308:	00c00044 	movi	r3,1
8112430c:	1c62983a 	sll	r17,r3,r17
81124310:	10800017 	ldw	r2,0(r2)
81124314:	8884703a 	and	r2,r17,r2
81124318:	10000126 	beq	r2,zero,81124320 <__gethex+0x624>
8112431c:	9cc00094 	ori	r19,r19,2
81124320:	b80b883a 	mov	r5,r23
81124324:	8009883a 	mov	r4,r16
81124328:	1123bfc0 	call	81123bfc <rshift>
8112432c:	d8c00017 	ldw	r3,0(sp)
81124330:	95e5c83a 	sub	r18,r18,r23
81124334:	04400084 	movi	r17,2
81124338:	1dc00117 	ldw	r23,4(r3)
8112433c:	003fa106 	br	811241c4 <__reset+0xfb1041c4>
81124340:	85af883a 	add	r23,r16,r22
81124344:	b8800003 	ldbu	r2,0(r23)
81124348:	b821883a 	mov	r16,r23
8112434c:	11003fcc 	andi	r4,r2,255
81124350:	a109883a 	add	r4,r20,r4
81124354:	21000003 	ldbu	r4,0(r4)
81124358:	203eaa26 	beq	r4,zero,81123e04 <__reset+0xfb103e04>
8112435c:	84000044 	addi	r16,r16,1
81124360:	80800003 	ldbu	r2,0(r16)
81124364:	11003fcc 	andi	r4,r2,255
81124368:	a109883a 	add	r4,r20,r4
8112436c:	21000003 	ldbu	r4,0(r4)
81124370:	203ffa1e 	bne	r4,zero,8112435c <__reset+0xfb10435c>
81124374:	003ea306 	br	81123e04 <__reset+0xfb103e04>
81124378:	d9001617 	ldw	r4,88(sp)
8112437c:	00800044 	movi	r2,1
81124380:	1109c83a 	sub	r4,r2,r4
81124384:	d9001615 	stw	r4,88(sp)
81124388:	d8801617 	ldw	r2,88(sp)
8112438c:	103f9626 	beq	r2,zero,811241e8 <__reset+0xfb1041e8>
81124390:	87000417 	ldw	fp,16(r16)
81124394:	d9800217 	ldw	r6,8(sp)
81124398:	013fffc4 	movi	r4,-1
8112439c:	e727883a 	add	r19,fp,fp
811243a0:	9ce7883a 	add	r19,r19,r19
811243a4:	3005883a 	mov	r2,r6
811243a8:	34cb883a 	add	r5,r6,r19
811243ac:	00000306 	br	811243bc <__gethex+0x6c0>
811243b0:	10000015 	stw	zero,0(r2)
811243b4:	10800104 	addi	r2,r2,4
811243b8:	117f4c2e 	bgeu	r2,r5,811240ec <__reset+0xfb1040ec>
811243bc:	10c00017 	ldw	r3,0(r2)
811243c0:	193ffb26 	beq	r3,r4,811243b0 <__reset+0xfb1043b0>
811243c4:	18c00044 	addi	r3,r3,1
811243c8:	10c00015 	stw	r3,0(r2)
811243cc:	00800084 	movi	r2,2
811243d0:	88802b26 	beq	r17,r2,81124480 <__gethex+0x784>
811243d4:	948007cc 	andi	r18,r18,31
811243d8:	90002f1e 	bne	r18,zero,81124498 <__gethex+0x79c>
811243dc:	04400844 	movi	r17,33
811243e0:	003f8206 	br	811241ec <__reset+0xfb1041ec>
811243e4:	04c00044 	movi	r19,1
811243e8:	003fc106 	br	811242f0 <__reset+0xfb1042f0>
811243ec:	d8c01617 	ldw	r3,88(sp)
811243f0:	183ed226 	beq	r3,zero,81123f3c <__reset+0xfb103f3c>
811243f4:	d8c00417 	ldw	r3,16(sp)
811243f8:	d9001517 	ldw	r4,84(sp)
811243fc:	18800015 	stw	r2,0(r3)
81124400:	d8c00217 	ldw	r3,8(sp)
81124404:	00800044 	movi	r2,1
81124408:	80800415 	stw	r2,16(r16)
8112440c:	18800015 	stw	r2,0(r3)
81124410:	24000015 	stw	r16,0(r4)
81124414:	00801884 	movi	r2,98
81124418:	003efa06 	br	81124004 <__reset+0xfb104004>
8112441c:	9880008c 	andi	r2,r19,2
81124420:	103f7126 	beq	r2,zero,811241e8 <__reset+0xfb1041e8>
81124424:	d8c00217 	ldw	r3,8(sp)
81124428:	18800017 	ldw	r2,0(r3)
8112442c:	9884b03a 	or	r2,r19,r2
81124430:	1080004c 	andi	r2,r2,1
81124434:	103fd61e 	bne	r2,zero,81124390 <__reset+0xfb104390>
81124438:	003f6b06 	br	811241e8 <__reset+0xfb1041e8>
8112443c:	da800217 	ldw	r10,8(sp)
81124440:	0013883a 	mov	r9,zero
81124444:	003e9f06 	br	81123ec4 <__reset+0xfb103ec4>
81124448:	04c00084 	movi	r19,2
8112444c:	003f8806 	br	81124270 <__reset+0xfb104270>
81124450:	d9001617 	ldw	r4,88(sp)
81124454:	203fe726 	beq	r4,zero,811243f4 <__reset+0xfb1043f4>
81124458:	003eb806 	br	81123f3c <__reset+0xfb103f3c>
8112445c:	95feb71e 	bne	r18,r23,81123f3c <__reset+0xfb103f3c>
81124460:	1cbfe40e 	bge	r3,r18,811243f4 <__reset+0xfb1043f4>
81124464:	917fffc4 	addi	r5,r18,-1
81124468:	8009883a 	mov	r4,r16
8112446c:	111e2b40 	call	8111e2b4 <__any_on>
81124470:	103eb226 	beq	r2,zero,81123f3c <__reset+0xfb103f3c>
81124474:	d8c00017 	ldw	r3,0(sp)
81124478:	18800117 	ldw	r2,4(r3)
8112447c:	003fdd06 	br	811243f4 <__reset+0xfb1043f4>
81124480:	d8c00017 	ldw	r3,0(sp)
81124484:	18800017 	ldw	r2,0(r3)
81124488:	10bfffc4 	addi	r2,r2,-1
8112448c:	90801c26 	beq	r18,r2,81124500 <__gethex+0x804>
81124490:	04400884 	movi	r17,34
81124494:	003f5506 	br	811241ec <__reset+0xfb1041ec>
81124498:	34c5883a 	add	r2,r6,r19
8112449c:	113fff17 	ldw	r4,-4(r2)
811244a0:	111d5f00 	call	8111d5f0 <__hi0bits>
811244a4:	00c00804 	movi	r3,32
811244a8:	1ca5c83a 	sub	r18,r3,r18
811244ac:	14bfcb0e 	bge	r2,r18,811243dc <__reset+0xfb1043dc>
811244b0:	003f1c06 	br	81124124 <__reset+0xfb104124>
811244b4:	81400117 	ldw	r5,4(r16)
811244b8:	d9000117 	ldw	r4,4(sp)
811244bc:	29400044 	addi	r5,r5,1
811244c0:	111d2e40 	call	8111d2e4 <_Balloc>
811244c4:	81800417 	ldw	r6,16(r16)
811244c8:	81400304 	addi	r5,r16,12
811244cc:	11000304 	addi	r4,r2,12
811244d0:	31800084 	addi	r6,r6,2
811244d4:	318d883a 	add	r6,r6,r6
811244d8:	318d883a 	add	r6,r6,r6
811244dc:	1029883a 	mov	r20,r2
811244e0:	11130b40 	call	811130b4 <memcpy>
811244e4:	d9000117 	ldw	r4,4(sp)
811244e8:	800b883a 	mov	r5,r16
811244ec:	a021883a 	mov	r16,r20
811244f0:	111d3940 	call	8111d394 <_Bfree>
811244f4:	a0c00417 	ldw	r3,16(r20)
811244f8:	a1800504 	addi	r6,r20,20
811244fc:	003efe06 	br	811240f8 <__reset+0xfb1040f8>
81124500:	9005d17a 	srai	r2,r18,5
81124504:	944007cc 	andi	r17,r18,31
81124508:	1085883a 	add	r2,r2,r2
8112450c:	1085883a 	add	r2,r2,r2
81124510:	3087883a 	add	r3,r6,r2
81124514:	00800044 	movi	r2,1
81124518:	1462983a 	sll	r17,r2,r17
8112451c:	18800017 	ldw	r2,0(r3)
81124520:	8884703a 	and	r2,r17,r2
81124524:	1022c03a 	cmpne	r17,r2,zero
81124528:	00800884 	movi	r2,34
8112452c:	1463c83a 	sub	r17,r2,r17
81124530:	003f2e06 	br	811241ec <__reset+0xfb1041ec>

81124534 <__hexnan>:
81124534:	defff904 	addi	sp,sp,-28
81124538:	de00012e 	bgeu	sp,et,81124540 <__hexnan+0xc>
8112453c:	003b68fa 	trap	3
81124540:	dc800215 	stw	r18,8(sp)
81124544:	2c800017 	ldw	r18,0(r5)
81124548:	dfc00615 	stw	ra,24(sp)
8112454c:	dd400515 	stw	r21,20(sp)
81124550:	901fd17a 	srai	r15,r18,5
81124554:	dd000415 	stw	r20,16(sp)
81124558:	dcc00315 	stw	r19,12(sp)
8112455c:	7bdf883a 	add	r15,r15,r15
81124560:	7bdf883a 	add	r15,r15,r15
81124564:	dc400115 	stw	r17,4(sp)
81124568:	dc000015 	stw	r16,0(sp)
8112456c:	948007cc 	andi	r18,r18,31
81124570:	33df883a 	add	r15,r6,r15
81124574:	90000126 	beq	r18,zero,8112457c <__hexnan+0x48>
81124578:	7bc00104 	addi	r15,r15,4
8112457c:	22000017 	ldw	r8,0(r4)
81124580:	7affff04 	addi	r11,r15,-4
81124584:	03a04534 	movhi	r14,33044
81124588:	783fff15 	stw	zero,-4(r15)
8112458c:	581b883a 	mov	r13,r11
81124590:	580b883a 	mov	r5,r11
81124594:	000f883a 	mov	r7,zero
81124598:	003f883a 	mov	ra,zero
8112459c:	0019883a 	mov	r12,zero
811245a0:	73815e04 	addi	r14,r14,1400
811245a4:	04400204 	movi	r17,8
811245a8:	04000804 	movi	r16,32
811245ac:	04c001c4 	movi	r19,7
811245b0:	42000044 	addi	r8,r8,1
811245b4:	40c00003 	ldbu	r3,0(r8)
811245b8:	18001d26 	beq	r3,zero,81124630 <__hexnan+0xfc>
811245bc:	70c5883a 	add	r2,r14,r3
811245c0:	10800003 	ldbu	r2,0(r2)
811245c4:	12403fcc 	andi	r9,r2,255
811245c8:	4800301e 	bne	r9,zero,8112468c <__hexnan+0x158>
811245cc:	80c04236 	bltu	r16,r3,811246d8 <__hexnan+0x1a4>
811245d0:	fb3ff70e 	bge	ra,r12,811245b0 <__reset+0xfb1045b0>
811245d4:	2b40112e 	bgeu	r5,r13,8112461c <__hexnan+0xe8>
811245d8:	99c01016 	blt	r19,r7,8112461c <__hexnan+0xe8>
811245dc:	89e9c83a 	sub	r20,r17,r7
811245e0:	a529883a 	add	r20,r20,r20
811245e4:	2a800017 	ldw	r10,0(r5)
811245e8:	a529883a 	add	r20,r20,r20
811245ec:	852bc83a 	sub	r21,r16,r20
811245f0:	28c00104 	addi	r3,r5,4
811245f4:	2805883a 	mov	r2,r5
811245f8:	19c00017 	ldw	r7,0(r3)
811245fc:	10800104 	addi	r2,r2,4
81124600:	18c00104 	addi	r3,r3,4
81124604:	3d52983a 	sll	r9,r7,r21
81124608:	4a92b03a 	or	r9,r9,r10
8112460c:	3d14d83a 	srl	r10,r7,r20
81124610:	127fff15 	stw	r9,-4(r2)
81124614:	1abfff15 	stw	r10,-4(r3)
81124618:	137ff736 	bltu	r2,r13,811245f8 <__reset+0xfb1045f8>
8112461c:	31402836 	bltu	r6,r5,811246c0 <__hexnan+0x18c>
81124620:	42000044 	addi	r8,r8,1
81124624:	40c00003 	ldbu	r3,0(r8)
81124628:	01c00204 	movi	r7,8
8112462c:	183fe31e 	bne	r3,zero,811245bc <__reset+0xfb1045bc>
81124630:	60002b26 	beq	r12,zero,811246e0 <__hexnan+0x1ac>
81124634:	2b40022e 	bgeu	r5,r13,81124640 <__hexnan+0x10c>
81124638:	008001c4 	movi	r2,7
8112463c:	11c0430e 	bge	r2,r7,8112474c <__hexnan+0x218>
81124640:	3140312e 	bgeu	r6,r5,81124708 <__hexnan+0x1d4>
81124644:	3007883a 	mov	r3,r6
81124648:	29000017 	ldw	r4,0(r5)
8112464c:	18800104 	addi	r2,r3,4
81124650:	29400104 	addi	r5,r5,4
81124654:	19000015 	stw	r4,0(r3)
81124658:	1007883a 	mov	r3,r2
8112465c:	597ffa2e 	bgeu	r11,r5,81124648 <__reset+0xfb104648>
81124660:	10000015 	stw	zero,0(r2)
81124664:	10800104 	addi	r2,r2,4
81124668:	58bffd2e 	bgeu	r11,r2,81124660 <__reset+0xfb104660>
8112466c:	78bfff17 	ldw	r2,-4(r15)
81124670:	1000041e 	bne	r2,zero,81124684 <__hexnan+0x150>
81124674:	32c02d26 	beq	r6,r11,8112472c <__hexnan+0x1f8>
81124678:	5affff04 	addi	r11,r11,-4
8112467c:	58800017 	ldw	r2,0(r11)
81124680:	103ffc26 	beq	r2,zero,81124674 <__reset+0xfb104674>
81124684:	00800144 	movi	r2,5
81124688:	00001606 	br	811246e4 <__hexnan+0x1b0>
8112468c:	39c00044 	addi	r7,r7,1
81124690:	63000044 	addi	r12,r12,1
81124694:	89c0040e 	bge	r17,r7,811246a8 <__hexnan+0x174>
81124698:	317fc52e 	bgeu	r6,r5,811245b0 <__reset+0xfb1045b0>
8112469c:	283fff15 	stw	zero,-4(r5)
811246a0:	01c00044 	movi	r7,1
811246a4:	297fff04 	addi	r5,r5,-4
811246a8:	28c00017 	ldw	r3,0(r5)
811246ac:	108003cc 	andi	r2,r2,15
811246b0:	1806913a 	slli	r3,r3,4
811246b4:	1884b03a 	or	r2,r3,r2
811246b8:	28800015 	stw	r2,0(r5)
811246bc:	003fbc06 	br	811245b0 <__reset+0xfb1045b0>
811246c0:	2b7fff04 	addi	r13,r5,-4
811246c4:	283fff15 	stw	zero,-4(r5)
811246c8:	603f883a 	mov	ra,r12
811246cc:	680b883a 	mov	r5,r13
811246d0:	000f883a 	mov	r7,zero
811246d4:	003fb606 	br	811245b0 <__reset+0xfb1045b0>
811246d8:	00800a44 	movi	r2,41
811246dc:	18801726 	beq	r3,r2,8112473c <__hexnan+0x208>
811246e0:	00800104 	movi	r2,4
811246e4:	dfc00617 	ldw	ra,24(sp)
811246e8:	dd400517 	ldw	r21,20(sp)
811246ec:	dd000417 	ldw	r20,16(sp)
811246f0:	dcc00317 	ldw	r19,12(sp)
811246f4:	dc800217 	ldw	r18,8(sp)
811246f8:	dc400117 	ldw	r17,4(sp)
811246fc:	dc000017 	ldw	r16,0(sp)
81124700:	dec00704 	addi	sp,sp,28
81124704:	f800283a 	ret
81124708:	903fd826 	beq	r18,zero,8112466c <__reset+0xfb10466c>
8112470c:	00c00804 	movi	r3,32
81124710:	1ca5c83a 	sub	r18,r3,r18
81124714:	00ffffc4 	movi	r3,-1
81124718:	78bfff17 	ldw	r2,-4(r15)
8112471c:	1c86d83a 	srl	r3,r3,r18
81124720:	1884703a 	and	r2,r3,r2
81124724:	78bfff15 	stw	r2,-4(r15)
81124728:	003fd106 	br	81124670 <__reset+0xfb104670>
8112472c:	00800044 	movi	r2,1
81124730:	58800015 	stw	r2,0(r11)
81124734:	00800144 	movi	r2,5
81124738:	003fea06 	br	811246e4 <__reset+0xfb1046e4>
8112473c:	42000044 	addi	r8,r8,1
81124740:	22000015 	stw	r8,0(r4)
81124744:	603fbb1e 	bne	r12,zero,81124634 <__reset+0xfb104634>
81124748:	003fe506 	br	811246e0 <__reset+0xfb1046e0>
8112474c:	02400204 	movi	r9,8
81124750:	49d3c83a 	sub	r9,r9,r7
81124754:	4a53883a 	add	r9,r9,r9
81124758:	2a000017 	ldw	r8,0(r5)
8112475c:	4a53883a 	add	r9,r9,r9
81124760:	02800804 	movi	r10,32
81124764:	5255c83a 	sub	r10,r10,r9
81124768:	28c00104 	addi	r3,r5,4
8112476c:	2805883a 	mov	r2,r5
81124770:	19c00017 	ldw	r7,0(r3)
81124774:	10800104 	addi	r2,r2,4
81124778:	18c00104 	addi	r3,r3,4
8112477c:	3a88983a 	sll	r4,r7,r10
81124780:	2208b03a 	or	r4,r4,r8
81124784:	3a50d83a 	srl	r8,r7,r9
81124788:	113fff15 	stw	r4,-4(r2)
8112478c:	1a3fff15 	stw	r8,-4(r3)
81124790:	137ff736 	bltu	r2,r13,81124770 <__reset+0xfb104770>
81124794:	003faa06 	br	81124640 <__reset+0xfb104640>

81124798 <strncmp>:
81124798:	30003126 	beq	r6,zero,81124860 <strncmp+0xc8>
8112479c:	2144b03a 	or	r2,r4,r5
811247a0:	108000cc 	andi	r2,r2,3
811247a4:	10001e1e 	bne	r2,zero,81124820 <strncmp+0x88>
811247a8:	024000c4 	movi	r9,3
811247ac:	49801c2e 	bgeu	r9,r6,81124820 <strncmp+0x88>
811247b0:	20800017 	ldw	r2,0(r4)
811247b4:	28c00017 	ldw	r3,0(r5)
811247b8:	10c0191e 	bne	r2,r3,81124820 <strncmp+0x88>
811247bc:	31bfff04 	addi	r6,r6,-4
811247c0:	30002726 	beq	r6,zero,81124860 <strncmp+0xc8>
811247c4:	02ffbff4 	movhi	r11,65279
811247c8:	5affbfc4 	addi	r11,r11,-257
811247cc:	0086303a 	nor	r3,zero,r2
811247d0:	02a02074 	movhi	r10,32897
811247d4:	12c5883a 	add	r2,r2,r11
811247d8:	52a02004 	addi	r10,r10,-32640
811247dc:	10c4703a 	and	r2,r2,r3
811247e0:	1284703a 	and	r2,r2,r10
811247e4:	10000b26 	beq	r2,zero,81124814 <strncmp+0x7c>
811247e8:	00001d06 	br	81124860 <strncmp+0xc8>
811247ec:	20c00017 	ldw	r3,0(r4)
811247f0:	29c00017 	ldw	r7,0(r5)
811247f4:	1ad1883a 	add	r8,r3,r11
811247f8:	00c4303a 	nor	r2,zero,r3
811247fc:	4084703a 	and	r2,r8,r2
81124800:	1284703a 	and	r2,r2,r10
81124804:	19c0061e 	bne	r3,r7,81124820 <strncmp+0x88>
81124808:	31bfff04 	addi	r6,r6,-4
8112480c:	30001426 	beq	r6,zero,81124860 <strncmp+0xc8>
81124810:	1000131e 	bne	r2,zero,81124860 <strncmp+0xc8>
81124814:	21000104 	addi	r4,r4,4
81124818:	29400104 	addi	r5,r5,4
8112481c:	49bff336 	bltu	r9,r6,811247ec <__reset+0xfb1047ec>
81124820:	28800007 	ldb	r2,0(r5)
81124824:	20c00007 	ldb	r3,0(r4)
81124828:	31bfffc4 	addi	r6,r6,-1
8112482c:	10c0081e 	bne	r2,r3,81124850 <strncmp+0xb8>
81124830:	30000b26 	beq	r6,zero,81124860 <strncmp+0xc8>
81124834:	10000a26 	beq	r2,zero,81124860 <strncmp+0xc8>
81124838:	21000044 	addi	r4,r4,1
8112483c:	29400044 	addi	r5,r5,1
81124840:	20800007 	ldb	r2,0(r4)
81124844:	28c00007 	ldb	r3,0(r5)
81124848:	31bfffc4 	addi	r6,r6,-1
8112484c:	10fff826 	beq	r2,r3,81124830 <__reset+0xfb104830>
81124850:	20800003 	ldbu	r2,0(r4)
81124854:	28c00003 	ldbu	r3,0(r5)
81124858:	10c5c83a 	sub	r2,r2,r3
8112485c:	f800283a 	ret
81124860:	0005883a 	mov	r2,zero
81124864:	f800283a 	ret

81124868 <_wcrtomb_r>:
81124868:	defff604 	addi	sp,sp,-40
8112486c:	00a04534 	movhi	r2,33044
81124870:	de00012e 	bgeu	sp,et,81124878 <_wcrtomb_r+0x10>
81124874:	003b68fa 	trap	3
81124878:	108aab04 	addi	r2,r2,10924
8112487c:	dc800815 	stw	r18,32(sp)
81124880:	dc400715 	stw	r17,28(sp)
81124884:	dc000615 	stw	r16,24(sp)
81124888:	dfc00915 	stw	ra,36(sp)
8112488c:	2021883a 	mov	r16,r4
81124890:	3823883a 	mov	r17,r7
81124894:	14800017 	ldw	r18,0(r2)
81124898:	28001426 	beq	r5,zero,811248ec <_wcrtomb_r+0x84>
8112489c:	d9400415 	stw	r5,16(sp)
811248a0:	d9800515 	stw	r6,20(sp)
811248a4:	111cd980 	call	8111cd98 <__locale_charset>
811248a8:	d9800517 	ldw	r6,20(sp)
811248ac:	d9400417 	ldw	r5,16(sp)
811248b0:	100f883a 	mov	r7,r2
811248b4:	dc400015 	stw	r17,0(sp)
811248b8:	8009883a 	mov	r4,r16
811248bc:	903ee83a 	callr	r18
811248c0:	00ffffc4 	movi	r3,-1
811248c4:	10c0031e 	bne	r2,r3,811248d4 <_wcrtomb_r+0x6c>
811248c8:	88000015 	stw	zero,0(r17)
811248cc:	00c02284 	movi	r3,138
811248d0:	80c00015 	stw	r3,0(r16)
811248d4:	dfc00917 	ldw	ra,36(sp)
811248d8:	dc800817 	ldw	r18,32(sp)
811248dc:	dc400717 	ldw	r17,28(sp)
811248e0:	dc000617 	ldw	r16,24(sp)
811248e4:	dec00a04 	addi	sp,sp,40
811248e8:	f800283a 	ret
811248ec:	111cd980 	call	8111cd98 <__locale_charset>
811248f0:	100f883a 	mov	r7,r2
811248f4:	dc400015 	stw	r17,0(sp)
811248f8:	000d883a 	mov	r6,zero
811248fc:	d9400104 	addi	r5,sp,4
81124900:	8009883a 	mov	r4,r16
81124904:	903ee83a 	callr	r18
81124908:	003fed06 	br	811248c0 <__reset+0xfb1048c0>

8112490c <wcrtomb>:
8112490c:	defff604 	addi	sp,sp,-40
81124910:	00a04534 	movhi	r2,33044
81124914:	de00012e 	bgeu	sp,et,8112491c <wcrtomb+0x10>
81124918:	003b68fa 	trap	3
8112491c:	108aa604 	addi	r2,r2,10904
81124920:	dc800615 	stw	r18,24(sp)
81124924:	dc400515 	stw	r17,20(sp)
81124928:	dfc00915 	stw	ra,36(sp)
8112492c:	dd000815 	stw	r20,32(sp)
81124930:	dcc00715 	stw	r19,28(sp)
81124934:	dc000415 	stw	r16,16(sp)
81124938:	3025883a 	mov	r18,r6
8112493c:	14400017 	ldw	r17,0(r2)
81124940:	20001926 	beq	r4,zero,811249a8 <wcrtomb+0x9c>
81124944:	00a04534 	movhi	r2,33044
81124948:	108aab04 	addi	r2,r2,10924
8112494c:	15000017 	ldw	r20,0(r2)
81124950:	2021883a 	mov	r16,r4
81124954:	2827883a 	mov	r19,r5
81124958:	111cd980 	call	8111cd98 <__locale_charset>
8112495c:	100f883a 	mov	r7,r2
81124960:	dc800015 	stw	r18,0(sp)
81124964:	980d883a 	mov	r6,r19
81124968:	800b883a 	mov	r5,r16
8112496c:	8809883a 	mov	r4,r17
81124970:	a03ee83a 	callr	r20
81124974:	00ffffc4 	movi	r3,-1
81124978:	10c0031e 	bne	r2,r3,81124988 <wcrtomb+0x7c>
8112497c:	90000015 	stw	zero,0(r18)
81124980:	00c02284 	movi	r3,138
81124984:	88c00015 	stw	r3,0(r17)
81124988:	dfc00917 	ldw	ra,36(sp)
8112498c:	dd000817 	ldw	r20,32(sp)
81124990:	dcc00717 	ldw	r19,28(sp)
81124994:	dc800617 	ldw	r18,24(sp)
81124998:	dc400517 	ldw	r17,20(sp)
8112499c:	dc000417 	ldw	r16,16(sp)
811249a0:	dec00a04 	addi	sp,sp,40
811249a4:	f800283a 	ret
811249a8:	00a04534 	movhi	r2,33044
811249ac:	108aab04 	addi	r2,r2,10924
811249b0:	14000017 	ldw	r16,0(r2)
811249b4:	111cd980 	call	8111cd98 <__locale_charset>
811249b8:	100f883a 	mov	r7,r2
811249bc:	dc800015 	stw	r18,0(sp)
811249c0:	000d883a 	mov	r6,zero
811249c4:	d9400104 	addi	r5,sp,4
811249c8:	8809883a 	mov	r4,r17
811249cc:	803ee83a 	callr	r16
811249d0:	003fe806 	br	81124974 <__reset+0xfb104974>

811249d4 <__ascii_wctomb>:
811249d4:	28000526 	beq	r5,zero,811249ec <__ascii_wctomb+0x18>
811249d8:	00803fc4 	movi	r2,255
811249dc:	11800536 	bltu	r2,r6,811249f4 <__ascii_wctomb+0x20>
811249e0:	29800005 	stb	r6,0(r5)
811249e4:	00800044 	movi	r2,1
811249e8:	f800283a 	ret
811249ec:	0005883a 	mov	r2,zero
811249f0:	f800283a 	ret
811249f4:	00802284 	movi	r2,138
811249f8:	20800015 	stw	r2,0(r4)
811249fc:	00bfffc4 	movi	r2,-1
81124a00:	f800283a 	ret

81124a04 <_wctomb_r>:
81124a04:	00a04534 	movhi	r2,33044
81124a08:	defff904 	addi	sp,sp,-28
81124a0c:	108aab04 	addi	r2,r2,10924
81124a10:	de00012e 	bgeu	sp,et,81124a18 <_wctomb_r+0x14>
81124a14:	003b68fa 	trap	3
81124a18:	dfc00615 	stw	ra,24(sp)
81124a1c:	dc400515 	stw	r17,20(sp)
81124a20:	dc000415 	stw	r16,16(sp)
81124a24:	3823883a 	mov	r17,r7
81124a28:	14000017 	ldw	r16,0(r2)
81124a2c:	d9000115 	stw	r4,4(sp)
81124a30:	d9400215 	stw	r5,8(sp)
81124a34:	d9800315 	stw	r6,12(sp)
81124a38:	111cd980 	call	8111cd98 <__locale_charset>
81124a3c:	d9800317 	ldw	r6,12(sp)
81124a40:	d9400217 	ldw	r5,8(sp)
81124a44:	d9000117 	ldw	r4,4(sp)
81124a48:	100f883a 	mov	r7,r2
81124a4c:	dc400015 	stw	r17,0(sp)
81124a50:	803ee83a 	callr	r16
81124a54:	dfc00617 	ldw	ra,24(sp)
81124a58:	dc400517 	ldw	r17,20(sp)
81124a5c:	dc000417 	ldw	r16,16(sp)
81124a60:	dec00704 	addi	sp,sp,28
81124a64:	f800283a 	ret

81124a68 <__fixunsdfsi>:
81124a68:	defffd04 	addi	sp,sp,-12
81124a6c:	000d883a 	mov	r6,zero
81124a70:	01d07834 	movhi	r7,16864
81124a74:	de00012e 	bgeu	sp,et,81124a7c <__fixunsdfsi+0x14>
81124a78:	003b68fa 	trap	3
81124a7c:	dc400115 	stw	r17,4(sp)
81124a80:	dc000015 	stw	r16,0(sp)
81124a84:	dfc00215 	stw	ra,8(sp)
81124a88:	2023883a 	mov	r17,r4
81124a8c:	2821883a 	mov	r16,r5
81124a90:	1126b800 	call	81126b80 <__gedf2>
81124a94:	1000080e 	bge	r2,zero,81124ab8 <__fixunsdfsi+0x50>
81124a98:	8809883a 	mov	r4,r17
81124a9c:	800b883a 	mov	r5,r16
81124aa0:	11276540 	call	81127654 <__fixdfsi>
81124aa4:	dfc00217 	ldw	ra,8(sp)
81124aa8:	dc400117 	ldw	r17,4(sp)
81124aac:	dc000017 	ldw	r16,0(sp)
81124ab0:	dec00304 	addi	sp,sp,12
81124ab4:	f800283a 	ret
81124ab8:	000d883a 	mov	r6,zero
81124abc:	01d07834 	movhi	r7,16864
81124ac0:	8809883a 	mov	r4,r17
81124ac4:	800b883a 	mov	r5,r16
81124ac8:	1126d500 	call	81126d50 <__subdf3>
81124acc:	180b883a 	mov	r5,r3
81124ad0:	1009883a 	mov	r4,r2
81124ad4:	11276540 	call	81127654 <__fixdfsi>
81124ad8:	00e00034 	movhi	r3,32768
81124adc:	10c5883a 	add	r2,r2,r3
81124ae0:	003ff006 	br	81124aa4 <__reset+0xfb104aa4>

81124ae4 <__udivdi3>:
81124ae4:	defff504 	addi	sp,sp,-44
81124ae8:	de00012e 	bgeu	sp,et,81124af0 <__udivdi3+0xc>
81124aec:	003b68fa 	trap	3
81124af0:	dcc00415 	stw	r19,16(sp)
81124af4:	dc000115 	stw	r16,4(sp)
81124af8:	dfc00a15 	stw	ra,40(sp)
81124afc:	df000915 	stw	fp,36(sp)
81124b00:	ddc00815 	stw	r23,32(sp)
81124b04:	dd800715 	stw	r22,28(sp)
81124b08:	dd400615 	stw	r21,24(sp)
81124b0c:	dd000515 	stw	r20,20(sp)
81124b10:	dc800315 	stw	r18,12(sp)
81124b14:	dc400215 	stw	r17,8(sp)
81124b18:	2027883a 	mov	r19,r4
81124b1c:	2821883a 	mov	r16,r5
81124b20:	3800411e 	bne	r7,zero,81124c28 <__udivdi3+0x144>
81124b24:	3023883a 	mov	r17,r6
81124b28:	2025883a 	mov	r18,r4
81124b2c:	2980522e 	bgeu	r5,r6,81124c78 <__udivdi3+0x194>
81124b30:	00bfffd4 	movui	r2,65535
81124b34:	282d883a 	mov	r22,r5
81124b38:	1180a836 	bltu	r2,r6,81124ddc <__udivdi3+0x2f8>
81124b3c:	00803fc4 	movi	r2,255
81124b40:	1185803a 	cmpltu	r2,r2,r6
81124b44:	100490fa 	slli	r2,r2,3
81124b48:	3086d83a 	srl	r3,r6,r2
81124b4c:	01204534 	movhi	r4,33044
81124b50:	213fd804 	addi	r4,r4,-160
81124b54:	20c7883a 	add	r3,r4,r3
81124b58:	18c00003 	ldbu	r3,0(r3)
81124b5c:	1885883a 	add	r2,r3,r2
81124b60:	00c00804 	movi	r3,32
81124b64:	1887c83a 	sub	r3,r3,r2
81124b68:	18000526 	beq	r3,zero,81124b80 <__udivdi3+0x9c>
81124b6c:	80e0983a 	sll	r16,r16,r3
81124b70:	9884d83a 	srl	r2,r19,r2
81124b74:	30e2983a 	sll	r17,r6,r3
81124b78:	98e4983a 	sll	r18,r19,r3
81124b7c:	142cb03a 	or	r22,r2,r16
81124b80:	882ad43a 	srli	r21,r17,16
81124b84:	b009883a 	mov	r4,r22
81124b88:	8d3fffcc 	andi	r20,r17,65535
81124b8c:	a80b883a 	mov	r5,r21
81124b90:	11257000 	call	81125700 <__umodsi3>
81124b94:	b009883a 	mov	r4,r22
81124b98:	a80b883a 	mov	r5,r21
81124b9c:	1027883a 	mov	r19,r2
81124ba0:	112569c0 	call	8112569c <__udivsi3>
81124ba4:	102d883a 	mov	r22,r2
81124ba8:	9826943a 	slli	r19,r19,16
81124bac:	9004d43a 	srli	r2,r18,16
81124bb0:	a5a1383a 	mul	r16,r20,r22
81124bb4:	14c4b03a 	or	r2,r2,r19
81124bb8:	1400052e 	bgeu	r2,r16,81124bd0 <__udivdi3+0xec>
81124bbc:	1445883a 	add	r2,r2,r17
81124bc0:	b0ffffc4 	addi	r3,r22,-1
81124bc4:	14400136 	bltu	r2,r17,81124bcc <__udivdi3+0xe8>
81124bc8:	14012336 	bltu	r2,r16,81125058 <__udivdi3+0x574>
81124bcc:	182d883a 	mov	r22,r3
81124bd0:	1421c83a 	sub	r16,r2,r16
81124bd4:	a80b883a 	mov	r5,r21
81124bd8:	8009883a 	mov	r4,r16
81124bdc:	11257000 	call	81125700 <__umodsi3>
81124be0:	1027883a 	mov	r19,r2
81124be4:	a80b883a 	mov	r5,r21
81124be8:	8009883a 	mov	r4,r16
81124bec:	112569c0 	call	8112569c <__udivsi3>
81124bf0:	9826943a 	slli	r19,r19,16
81124bf4:	a0a9383a 	mul	r20,r20,r2
81124bf8:	94bfffcc 	andi	r18,r18,65535
81124bfc:	94e4b03a 	or	r18,r18,r19
81124c00:	9500052e 	bgeu	r18,r20,81124c18 <__udivdi3+0x134>
81124c04:	8ca5883a 	add	r18,r17,r18
81124c08:	10ffffc4 	addi	r3,r2,-1
81124c0c:	9440f136 	bltu	r18,r17,81124fd4 <__udivdi3+0x4f0>
81124c10:	9500f02e 	bgeu	r18,r20,81124fd4 <__udivdi3+0x4f0>
81124c14:	10bfff84 	addi	r2,r2,-2
81124c18:	b00c943a 	slli	r6,r22,16
81124c1c:	0007883a 	mov	r3,zero
81124c20:	3084b03a 	or	r2,r6,r2
81124c24:	00005906 	br	81124d8c <__udivdi3+0x2a8>
81124c28:	29c05636 	bltu	r5,r7,81124d84 <__udivdi3+0x2a0>
81124c2c:	00bfffd4 	movui	r2,65535
81124c30:	11c0622e 	bgeu	r2,r7,81124dbc <__udivdi3+0x2d8>
81124c34:	00804034 	movhi	r2,256
81124c38:	10bfffc4 	addi	r2,r2,-1
81124c3c:	11c0ee36 	bltu	r2,r7,81124ff8 <__udivdi3+0x514>
81124c40:	00800404 	movi	r2,16
81124c44:	3886d83a 	srl	r3,r7,r2
81124c48:	01204534 	movhi	r4,33044
81124c4c:	213fd804 	addi	r4,r4,-160
81124c50:	20c7883a 	add	r3,r4,r3
81124c54:	18c00003 	ldbu	r3,0(r3)
81124c58:	05400804 	movi	r21,32
81124c5c:	1885883a 	add	r2,r3,r2
81124c60:	a8abc83a 	sub	r21,r21,r2
81124c64:	a800621e 	bne	r21,zero,81124df0 <__udivdi3+0x30c>
81124c68:	3c00e936 	bltu	r7,r16,81125010 <__udivdi3+0x52c>
81124c6c:	9985403a 	cmpgeu	r2,r19,r6
81124c70:	0007883a 	mov	r3,zero
81124c74:	00004506 	br	81124d8c <__udivdi3+0x2a8>
81124c78:	3000041e 	bne	r6,zero,81124c8c <__udivdi3+0x1a8>
81124c7c:	000b883a 	mov	r5,zero
81124c80:	01000044 	movi	r4,1
81124c84:	112569c0 	call	8112569c <__udivsi3>
81124c88:	1023883a 	mov	r17,r2
81124c8c:	00bfffd4 	movui	r2,65535
81124c90:	14404e2e 	bgeu	r2,r17,81124dcc <__udivdi3+0x2e8>
81124c94:	00804034 	movhi	r2,256
81124c98:	10bfffc4 	addi	r2,r2,-1
81124c9c:	1440d836 	bltu	r2,r17,81125000 <__udivdi3+0x51c>
81124ca0:	00800404 	movi	r2,16
81124ca4:	8886d83a 	srl	r3,r17,r2
81124ca8:	01204534 	movhi	r4,33044
81124cac:	213fd804 	addi	r4,r4,-160
81124cb0:	20c7883a 	add	r3,r4,r3
81124cb4:	18c00003 	ldbu	r3,0(r3)
81124cb8:	1885883a 	add	r2,r3,r2
81124cbc:	00c00804 	movi	r3,32
81124cc0:	1887c83a 	sub	r3,r3,r2
81124cc4:	18008f1e 	bne	r3,zero,81124f04 <__udivdi3+0x420>
81124cc8:	882ad43a 	srli	r21,r17,16
81124ccc:	8461c83a 	sub	r16,r16,r17
81124cd0:	8d3fffcc 	andi	r20,r17,65535
81124cd4:	00c00044 	movi	r3,1
81124cd8:	8009883a 	mov	r4,r16
81124cdc:	a80b883a 	mov	r5,r21
81124ce0:	d8c00015 	stw	r3,0(sp)
81124ce4:	11257000 	call	81125700 <__umodsi3>
81124ce8:	8009883a 	mov	r4,r16
81124cec:	a80b883a 	mov	r5,r21
81124cf0:	1027883a 	mov	r19,r2
81124cf4:	112569c0 	call	8112569c <__udivsi3>
81124cf8:	9826943a 	slli	r19,r19,16
81124cfc:	9008d43a 	srli	r4,r18,16
81124d00:	1521383a 	mul	r16,r2,r20
81124d04:	102d883a 	mov	r22,r2
81124d08:	24c8b03a 	or	r4,r4,r19
81124d0c:	d8c00017 	ldw	r3,0(sp)
81124d10:	2400052e 	bgeu	r4,r16,81124d28 <__udivdi3+0x244>
81124d14:	2449883a 	add	r4,r4,r17
81124d18:	b0bfffc4 	addi	r2,r22,-1
81124d1c:	24400136 	bltu	r4,r17,81124d24 <__udivdi3+0x240>
81124d20:	2400ca36 	bltu	r4,r16,8112504c <__udivdi3+0x568>
81124d24:	102d883a 	mov	r22,r2
81124d28:	2421c83a 	sub	r16,r4,r16
81124d2c:	a80b883a 	mov	r5,r21
81124d30:	8009883a 	mov	r4,r16
81124d34:	d8c00015 	stw	r3,0(sp)
81124d38:	11257000 	call	81125700 <__umodsi3>
81124d3c:	1027883a 	mov	r19,r2
81124d40:	a80b883a 	mov	r5,r21
81124d44:	8009883a 	mov	r4,r16
81124d48:	112569c0 	call	8112569c <__udivsi3>
81124d4c:	9826943a 	slli	r19,r19,16
81124d50:	1529383a 	mul	r20,r2,r20
81124d54:	94bfffcc 	andi	r18,r18,65535
81124d58:	94e4b03a 	or	r18,r18,r19
81124d5c:	d8c00017 	ldw	r3,0(sp)
81124d60:	9500052e 	bgeu	r18,r20,81124d78 <__udivdi3+0x294>
81124d64:	8ca5883a 	add	r18,r17,r18
81124d68:	113fffc4 	addi	r4,r2,-1
81124d6c:	94409736 	bltu	r18,r17,81124fcc <__udivdi3+0x4e8>
81124d70:	9500962e 	bgeu	r18,r20,81124fcc <__udivdi3+0x4e8>
81124d74:	10bfff84 	addi	r2,r2,-2
81124d78:	b00c943a 	slli	r6,r22,16
81124d7c:	3084b03a 	or	r2,r6,r2
81124d80:	00000206 	br	81124d8c <__udivdi3+0x2a8>
81124d84:	0007883a 	mov	r3,zero
81124d88:	0005883a 	mov	r2,zero
81124d8c:	dfc00a17 	ldw	ra,40(sp)
81124d90:	df000917 	ldw	fp,36(sp)
81124d94:	ddc00817 	ldw	r23,32(sp)
81124d98:	dd800717 	ldw	r22,28(sp)
81124d9c:	dd400617 	ldw	r21,24(sp)
81124da0:	dd000517 	ldw	r20,20(sp)
81124da4:	dcc00417 	ldw	r19,16(sp)
81124da8:	dc800317 	ldw	r18,12(sp)
81124dac:	dc400217 	ldw	r17,8(sp)
81124db0:	dc000117 	ldw	r16,4(sp)
81124db4:	dec00b04 	addi	sp,sp,44
81124db8:	f800283a 	ret
81124dbc:	00803fc4 	movi	r2,255
81124dc0:	11c5803a 	cmpltu	r2,r2,r7
81124dc4:	100490fa 	slli	r2,r2,3
81124dc8:	003f9e06 	br	81124c44 <__reset+0xfb104c44>
81124dcc:	00803fc4 	movi	r2,255
81124dd0:	1445803a 	cmpltu	r2,r2,r17
81124dd4:	100490fa 	slli	r2,r2,3
81124dd8:	003fb206 	br	81124ca4 <__reset+0xfb104ca4>
81124ddc:	00804034 	movhi	r2,256
81124de0:	10bfffc4 	addi	r2,r2,-1
81124de4:	11808836 	bltu	r2,r6,81125008 <__udivdi3+0x524>
81124de8:	00800404 	movi	r2,16
81124dec:	003f5606 	br	81124b48 <__reset+0xfb104b48>
81124df0:	30aed83a 	srl	r23,r6,r2
81124df4:	3d4e983a 	sll	r7,r7,r21
81124df8:	80acd83a 	srl	r22,r16,r2
81124dfc:	9884d83a 	srl	r2,r19,r2
81124e00:	3deeb03a 	or	r23,r7,r23
81124e04:	b824d43a 	srli	r18,r23,16
81124e08:	8560983a 	sll	r16,r16,r21
81124e0c:	b009883a 	mov	r4,r22
81124e10:	900b883a 	mov	r5,r18
81124e14:	3568983a 	sll	r20,r6,r21
81124e18:	1420b03a 	or	r16,r2,r16
81124e1c:	11257000 	call	81125700 <__umodsi3>
81124e20:	b009883a 	mov	r4,r22
81124e24:	900b883a 	mov	r5,r18
81124e28:	1023883a 	mov	r17,r2
81124e2c:	112569c0 	call	8112569c <__udivsi3>
81124e30:	8808943a 	slli	r4,r17,16
81124e34:	bf3fffcc 	andi	fp,r23,65535
81124e38:	8006d43a 	srli	r3,r16,16
81124e3c:	e0a3383a 	mul	r17,fp,r2
81124e40:	100d883a 	mov	r6,r2
81124e44:	1906b03a 	or	r3,r3,r4
81124e48:	1c40042e 	bgeu	r3,r17,81124e5c <__udivdi3+0x378>
81124e4c:	1dc7883a 	add	r3,r3,r23
81124e50:	10bfffc4 	addi	r2,r2,-1
81124e54:	1dc0752e 	bgeu	r3,r23,8112502c <__udivdi3+0x548>
81124e58:	100d883a 	mov	r6,r2
81124e5c:	1c63c83a 	sub	r17,r3,r17
81124e60:	900b883a 	mov	r5,r18
81124e64:	8809883a 	mov	r4,r17
81124e68:	d9800015 	stw	r6,0(sp)
81124e6c:	11257000 	call	81125700 <__umodsi3>
81124e70:	102d883a 	mov	r22,r2
81124e74:	8809883a 	mov	r4,r17
81124e78:	900b883a 	mov	r5,r18
81124e7c:	112569c0 	call	8112569c <__udivsi3>
81124e80:	b02c943a 	slli	r22,r22,16
81124e84:	e089383a 	mul	r4,fp,r2
81124e88:	843fffcc 	andi	r16,r16,65535
81124e8c:	85a0b03a 	or	r16,r16,r22
81124e90:	d9800017 	ldw	r6,0(sp)
81124e94:	8100042e 	bgeu	r16,r4,81124ea8 <__udivdi3+0x3c4>
81124e98:	85e1883a 	add	r16,r16,r23
81124e9c:	10ffffc4 	addi	r3,r2,-1
81124ea0:	85c05e2e 	bgeu	r16,r23,8112501c <__udivdi3+0x538>
81124ea4:	1805883a 	mov	r2,r3
81124ea8:	300c943a 	slli	r6,r6,16
81124eac:	a17fffcc 	andi	r5,r20,65535
81124eb0:	a028d43a 	srli	r20,r20,16
81124eb4:	3084b03a 	or	r2,r6,r2
81124eb8:	10ffffcc 	andi	r3,r2,65535
81124ebc:	100cd43a 	srli	r6,r2,16
81124ec0:	194f383a 	mul	r7,r3,r5
81124ec4:	1d07383a 	mul	r3,r3,r20
81124ec8:	314b383a 	mul	r5,r6,r5
81124ecc:	3810d43a 	srli	r8,r7,16
81124ed0:	8121c83a 	sub	r16,r16,r4
81124ed4:	1947883a 	add	r3,r3,r5
81124ed8:	40c7883a 	add	r3,r8,r3
81124edc:	350d383a 	mul	r6,r6,r20
81124ee0:	1940022e 	bgeu	r3,r5,81124eec <__udivdi3+0x408>
81124ee4:	01000074 	movhi	r4,1
81124ee8:	310d883a 	add	r6,r6,r4
81124eec:	1828d43a 	srli	r20,r3,16
81124ef0:	a18d883a 	add	r6,r20,r6
81124ef4:	81803e36 	bltu	r16,r6,81124ff0 <__udivdi3+0x50c>
81124ef8:	81803826 	beq	r16,r6,81124fdc <__udivdi3+0x4f8>
81124efc:	0007883a 	mov	r3,zero
81124f00:	003fa206 	br	81124d8c <__reset+0xfb104d8c>
81124f04:	88e2983a 	sll	r17,r17,r3
81124f08:	80a8d83a 	srl	r20,r16,r2
81124f0c:	80e0983a 	sll	r16,r16,r3
81124f10:	882ad43a 	srli	r21,r17,16
81124f14:	9884d83a 	srl	r2,r19,r2
81124f18:	a009883a 	mov	r4,r20
81124f1c:	a80b883a 	mov	r5,r21
81124f20:	142eb03a 	or	r23,r2,r16
81124f24:	98e4983a 	sll	r18,r19,r3
81124f28:	11257000 	call	81125700 <__umodsi3>
81124f2c:	a009883a 	mov	r4,r20
81124f30:	a80b883a 	mov	r5,r21
81124f34:	1021883a 	mov	r16,r2
81124f38:	112569c0 	call	8112569c <__udivsi3>
81124f3c:	1039883a 	mov	fp,r2
81124f40:	8d3fffcc 	andi	r20,r17,65535
81124f44:	8020943a 	slli	r16,r16,16
81124f48:	b804d43a 	srli	r2,r23,16
81124f4c:	a72d383a 	mul	r22,r20,fp
81124f50:	1404b03a 	or	r2,r2,r16
81124f54:	1580062e 	bgeu	r2,r22,81124f70 <__udivdi3+0x48c>
81124f58:	1445883a 	add	r2,r2,r17
81124f5c:	e0ffffc4 	addi	r3,fp,-1
81124f60:	14403836 	bltu	r2,r17,81125044 <__udivdi3+0x560>
81124f64:	1580372e 	bgeu	r2,r22,81125044 <__udivdi3+0x560>
81124f68:	e73fff84 	addi	fp,fp,-2
81124f6c:	1445883a 	add	r2,r2,r17
81124f70:	15adc83a 	sub	r22,r2,r22
81124f74:	a80b883a 	mov	r5,r21
81124f78:	b009883a 	mov	r4,r22
81124f7c:	11257000 	call	81125700 <__umodsi3>
81124f80:	1027883a 	mov	r19,r2
81124f84:	b009883a 	mov	r4,r22
81124f88:	a80b883a 	mov	r5,r21
81124f8c:	112569c0 	call	8112569c <__udivsi3>
81124f90:	9826943a 	slli	r19,r19,16
81124f94:	a0a1383a 	mul	r16,r20,r2
81124f98:	b93fffcc 	andi	r4,r23,65535
81124f9c:	24c8b03a 	or	r4,r4,r19
81124fa0:	2400062e 	bgeu	r4,r16,81124fbc <__udivdi3+0x4d8>
81124fa4:	2449883a 	add	r4,r4,r17
81124fa8:	10ffffc4 	addi	r3,r2,-1
81124fac:	24402336 	bltu	r4,r17,8112503c <__udivdi3+0x558>
81124fb0:	2400222e 	bgeu	r4,r16,8112503c <__udivdi3+0x558>
81124fb4:	10bfff84 	addi	r2,r2,-2
81124fb8:	2449883a 	add	r4,r4,r17
81124fbc:	e038943a 	slli	fp,fp,16
81124fc0:	2421c83a 	sub	r16,r4,r16
81124fc4:	e086b03a 	or	r3,fp,r2
81124fc8:	003f4306 	br	81124cd8 <__reset+0xfb104cd8>
81124fcc:	2005883a 	mov	r2,r4
81124fd0:	003f6906 	br	81124d78 <__reset+0xfb104d78>
81124fd4:	1805883a 	mov	r2,r3
81124fd8:	003f0f06 	br	81124c18 <__reset+0xfb104c18>
81124fdc:	1806943a 	slli	r3,r3,16
81124fe0:	9d66983a 	sll	r19,r19,r21
81124fe4:	39ffffcc 	andi	r7,r7,65535
81124fe8:	19c7883a 	add	r3,r3,r7
81124fec:	98ffc32e 	bgeu	r19,r3,81124efc <__reset+0xfb104efc>
81124ff0:	10bfffc4 	addi	r2,r2,-1
81124ff4:	003fc106 	br	81124efc <__reset+0xfb104efc>
81124ff8:	00800604 	movi	r2,24
81124ffc:	003f1106 	br	81124c44 <__reset+0xfb104c44>
81125000:	00800604 	movi	r2,24
81125004:	003f2706 	br	81124ca4 <__reset+0xfb104ca4>
81125008:	00800604 	movi	r2,24
8112500c:	003ece06 	br	81124b48 <__reset+0xfb104b48>
81125010:	0007883a 	mov	r3,zero
81125014:	00800044 	movi	r2,1
81125018:	003f5c06 	br	81124d8c <__reset+0xfb104d8c>
8112501c:	813fa12e 	bgeu	r16,r4,81124ea4 <__reset+0xfb104ea4>
81125020:	10bfff84 	addi	r2,r2,-2
81125024:	85e1883a 	add	r16,r16,r23
81125028:	003f9f06 	br	81124ea8 <__reset+0xfb104ea8>
8112502c:	1c7f8a2e 	bgeu	r3,r17,81124e58 <__reset+0xfb104e58>
81125030:	31bfff84 	addi	r6,r6,-2
81125034:	1dc7883a 	add	r3,r3,r23
81125038:	003f8806 	br	81124e5c <__reset+0xfb104e5c>
8112503c:	1805883a 	mov	r2,r3
81125040:	003fde06 	br	81124fbc <__reset+0xfb104fbc>
81125044:	1839883a 	mov	fp,r3
81125048:	003fc906 	br	81124f70 <__reset+0xfb104f70>
8112504c:	b5bfff84 	addi	r22,r22,-2
81125050:	2449883a 	add	r4,r4,r17
81125054:	003f3406 	br	81124d28 <__reset+0xfb104d28>
81125058:	b5bfff84 	addi	r22,r22,-2
8112505c:	1445883a 	add	r2,r2,r17
81125060:	003edb06 	br	81124bd0 <__reset+0xfb104bd0>

81125064 <__umoddi3>:
81125064:	defff404 	addi	sp,sp,-48
81125068:	de00012e 	bgeu	sp,et,81125070 <__umoddi3+0xc>
8112506c:	003b68fa 	trap	3
81125070:	df000a15 	stw	fp,40(sp)
81125074:	dc400315 	stw	r17,12(sp)
81125078:	dc000215 	stw	r16,8(sp)
8112507c:	dfc00b15 	stw	ra,44(sp)
81125080:	ddc00915 	stw	r23,36(sp)
81125084:	dd800815 	stw	r22,32(sp)
81125088:	dd400715 	stw	r21,28(sp)
8112508c:	dd000615 	stw	r20,24(sp)
81125090:	dcc00515 	stw	r19,20(sp)
81125094:	dc800415 	stw	r18,16(sp)
81125098:	2021883a 	mov	r16,r4
8112509c:	2823883a 	mov	r17,r5
811250a0:	2839883a 	mov	fp,r5
811250a4:	38003c1e 	bne	r7,zero,81125198 <__umoddi3+0x134>
811250a8:	3027883a 	mov	r19,r6
811250ac:	2029883a 	mov	r20,r4
811250b0:	2980512e 	bgeu	r5,r6,811251f8 <__umoddi3+0x194>
811250b4:	00bfffd4 	movui	r2,65535
811250b8:	11809a36 	bltu	r2,r6,81125324 <__umoddi3+0x2c0>
811250bc:	01003fc4 	movi	r4,255
811250c0:	2189803a 	cmpltu	r4,r4,r6
811250c4:	200890fa 	slli	r4,r4,3
811250c8:	3104d83a 	srl	r2,r6,r4
811250cc:	00e04534 	movhi	r3,33044
811250d0:	18ffd804 	addi	r3,r3,-160
811250d4:	1885883a 	add	r2,r3,r2
811250d8:	10c00003 	ldbu	r3,0(r2)
811250dc:	00800804 	movi	r2,32
811250e0:	1909883a 	add	r4,r3,r4
811250e4:	1125c83a 	sub	r18,r2,r4
811250e8:	90000526 	beq	r18,zero,81125100 <__umoddi3+0x9c>
811250ec:	8ca2983a 	sll	r17,r17,r18
811250f0:	8108d83a 	srl	r4,r16,r4
811250f4:	34a6983a 	sll	r19,r6,r18
811250f8:	84a8983a 	sll	r20,r16,r18
811250fc:	2478b03a 	or	fp,r4,r17
81125100:	982ed43a 	srli	r23,r19,16
81125104:	e009883a 	mov	r4,fp
81125108:	9dbfffcc 	andi	r22,r19,65535
8112510c:	b80b883a 	mov	r5,r23
81125110:	11257000 	call	81125700 <__umodsi3>
81125114:	e009883a 	mov	r4,fp
81125118:	b80b883a 	mov	r5,r23
8112511c:	102b883a 	mov	r21,r2
81125120:	112569c0 	call	8112569c <__udivsi3>
81125124:	a806943a 	slli	r3,r21,16
81125128:	a008d43a 	srli	r4,r20,16
8112512c:	b085383a 	mul	r2,r22,r2
81125130:	20c8b03a 	or	r4,r4,r3
81125134:	2080032e 	bgeu	r4,r2,81125144 <__umoddi3+0xe0>
81125138:	24c9883a 	add	r4,r4,r19
8112513c:	24c00136 	bltu	r4,r19,81125144 <__umoddi3+0xe0>
81125140:	20811036 	bltu	r4,r2,81125584 <__umoddi3+0x520>
81125144:	20abc83a 	sub	r21,r4,r2
81125148:	b80b883a 	mov	r5,r23
8112514c:	a809883a 	mov	r4,r21
81125150:	11257000 	call	81125700 <__umodsi3>
81125154:	1023883a 	mov	r17,r2
81125158:	b80b883a 	mov	r5,r23
8112515c:	a809883a 	mov	r4,r21
81125160:	112569c0 	call	8112569c <__udivsi3>
81125164:	8822943a 	slli	r17,r17,16
81125168:	b085383a 	mul	r2,r22,r2
8112516c:	a0ffffcc 	andi	r3,r20,65535
81125170:	1c46b03a 	or	r3,r3,r17
81125174:	1880042e 	bgeu	r3,r2,81125188 <__umoddi3+0x124>
81125178:	1cc7883a 	add	r3,r3,r19
8112517c:	1cc00236 	bltu	r3,r19,81125188 <__umoddi3+0x124>
81125180:	1880012e 	bgeu	r3,r2,81125188 <__umoddi3+0x124>
81125184:	1cc7883a 	add	r3,r3,r19
81125188:	1885c83a 	sub	r2,r3,r2
8112518c:	1484d83a 	srl	r2,r2,r18
81125190:	0007883a 	mov	r3,zero
81125194:	00004f06 	br	811252d4 <__umoddi3+0x270>
81125198:	29c04c36 	bltu	r5,r7,811252cc <__umoddi3+0x268>
8112519c:	00bfffd4 	movui	r2,65535
811251a0:	11c0582e 	bgeu	r2,r7,81125304 <__umoddi3+0x2a0>
811251a4:	00804034 	movhi	r2,256
811251a8:	10bfffc4 	addi	r2,r2,-1
811251ac:	11c0e736 	bltu	r2,r7,8112554c <__umoddi3+0x4e8>
811251b0:	01000404 	movi	r4,16
811251b4:	3904d83a 	srl	r2,r7,r4
811251b8:	00e04534 	movhi	r3,33044
811251bc:	18ffd804 	addi	r3,r3,-160
811251c0:	1885883a 	add	r2,r3,r2
811251c4:	14c00003 	ldbu	r19,0(r2)
811251c8:	00c00804 	movi	r3,32
811251cc:	9927883a 	add	r19,r19,r4
811251d0:	1ce9c83a 	sub	r20,r3,r19
811251d4:	a000581e 	bne	r20,zero,81125338 <__umoddi3+0x2d4>
811251d8:	3c400136 	bltu	r7,r17,811251e0 <__umoddi3+0x17c>
811251dc:	8180eb36 	bltu	r16,r6,8112558c <__umoddi3+0x528>
811251e0:	8185c83a 	sub	r2,r16,r6
811251e4:	89e3c83a 	sub	r17,r17,r7
811251e8:	8089803a 	cmpltu	r4,r16,r2
811251ec:	8939c83a 	sub	fp,r17,r4
811251f0:	e007883a 	mov	r3,fp
811251f4:	00003706 	br	811252d4 <__umoddi3+0x270>
811251f8:	3000041e 	bne	r6,zero,8112520c <__umoddi3+0x1a8>
811251fc:	000b883a 	mov	r5,zero
81125200:	01000044 	movi	r4,1
81125204:	112569c0 	call	8112569c <__udivsi3>
81125208:	1027883a 	mov	r19,r2
8112520c:	00bfffd4 	movui	r2,65535
81125210:	14c0402e 	bgeu	r2,r19,81125314 <__umoddi3+0x2b0>
81125214:	00804034 	movhi	r2,256
81125218:	10bfffc4 	addi	r2,r2,-1
8112521c:	14c0cd36 	bltu	r2,r19,81125554 <__umoddi3+0x4f0>
81125220:	00800404 	movi	r2,16
81125224:	9886d83a 	srl	r3,r19,r2
81125228:	01204534 	movhi	r4,33044
8112522c:	213fd804 	addi	r4,r4,-160
81125230:	20c7883a 	add	r3,r4,r3
81125234:	18c00003 	ldbu	r3,0(r3)
81125238:	1887883a 	add	r3,r3,r2
8112523c:	00800804 	movi	r2,32
81125240:	10e5c83a 	sub	r18,r2,r3
81125244:	9000901e 	bne	r18,zero,81125488 <__umoddi3+0x424>
81125248:	982cd43a 	srli	r22,r19,16
8112524c:	8ce3c83a 	sub	r17,r17,r19
81125250:	9d7fffcc 	andi	r21,r19,65535
81125254:	b00b883a 	mov	r5,r22
81125258:	8809883a 	mov	r4,r17
8112525c:	11257000 	call	81125700 <__umodsi3>
81125260:	8809883a 	mov	r4,r17
81125264:	b00b883a 	mov	r5,r22
81125268:	1021883a 	mov	r16,r2
8112526c:	112569c0 	call	8112569c <__udivsi3>
81125270:	8006943a 	slli	r3,r16,16
81125274:	a008d43a 	srli	r4,r20,16
81125278:	1545383a 	mul	r2,r2,r21
8112527c:	20c8b03a 	or	r4,r4,r3
81125280:	2080042e 	bgeu	r4,r2,81125294 <__umoddi3+0x230>
81125284:	24c9883a 	add	r4,r4,r19
81125288:	24c00236 	bltu	r4,r19,81125294 <__umoddi3+0x230>
8112528c:	2080012e 	bgeu	r4,r2,81125294 <__umoddi3+0x230>
81125290:	24c9883a 	add	r4,r4,r19
81125294:	20a1c83a 	sub	r16,r4,r2
81125298:	b00b883a 	mov	r5,r22
8112529c:	8009883a 	mov	r4,r16
811252a0:	11257000 	call	81125700 <__umodsi3>
811252a4:	1023883a 	mov	r17,r2
811252a8:	b00b883a 	mov	r5,r22
811252ac:	8009883a 	mov	r4,r16
811252b0:	112569c0 	call	8112569c <__udivsi3>
811252b4:	8822943a 	slli	r17,r17,16
811252b8:	1545383a 	mul	r2,r2,r21
811252bc:	a53fffcc 	andi	r20,r20,65535
811252c0:	a446b03a 	or	r3,r20,r17
811252c4:	18bfb02e 	bgeu	r3,r2,81125188 <__reset+0xfb105188>
811252c8:	003fab06 	br	81125178 <__reset+0xfb105178>
811252cc:	2005883a 	mov	r2,r4
811252d0:	2807883a 	mov	r3,r5
811252d4:	dfc00b17 	ldw	ra,44(sp)
811252d8:	df000a17 	ldw	fp,40(sp)
811252dc:	ddc00917 	ldw	r23,36(sp)
811252e0:	dd800817 	ldw	r22,32(sp)
811252e4:	dd400717 	ldw	r21,28(sp)
811252e8:	dd000617 	ldw	r20,24(sp)
811252ec:	dcc00517 	ldw	r19,20(sp)
811252f0:	dc800417 	ldw	r18,16(sp)
811252f4:	dc400317 	ldw	r17,12(sp)
811252f8:	dc000217 	ldw	r16,8(sp)
811252fc:	dec00c04 	addi	sp,sp,48
81125300:	f800283a 	ret
81125304:	04c03fc4 	movi	r19,255
81125308:	99c9803a 	cmpltu	r4,r19,r7
8112530c:	200890fa 	slli	r4,r4,3
81125310:	003fa806 	br	811251b4 <__reset+0xfb1051b4>
81125314:	00803fc4 	movi	r2,255
81125318:	14c5803a 	cmpltu	r2,r2,r19
8112531c:	100490fa 	slli	r2,r2,3
81125320:	003fc006 	br	81125224 <__reset+0xfb105224>
81125324:	00804034 	movhi	r2,256
81125328:	10bfffc4 	addi	r2,r2,-1
8112532c:	11808b36 	bltu	r2,r6,8112555c <__umoddi3+0x4f8>
81125330:	01000404 	movi	r4,16
81125334:	003f6406 	br	811250c8 <__reset+0xfb1050c8>
81125338:	34c4d83a 	srl	r2,r6,r19
8112533c:	3d0e983a 	sll	r7,r7,r20
81125340:	8cf8d83a 	srl	fp,r17,r19
81125344:	8d10983a 	sll	r8,r17,r20
81125348:	38aab03a 	or	r21,r7,r2
8112534c:	a82cd43a 	srli	r22,r21,16
81125350:	84e2d83a 	srl	r17,r16,r19
81125354:	e009883a 	mov	r4,fp
81125358:	b00b883a 	mov	r5,r22
8112535c:	8a22b03a 	or	r17,r17,r8
81125360:	3524983a 	sll	r18,r6,r20
81125364:	11257000 	call	81125700 <__umodsi3>
81125368:	e009883a 	mov	r4,fp
8112536c:	b00b883a 	mov	r5,r22
81125370:	102f883a 	mov	r23,r2
81125374:	112569c0 	call	8112569c <__udivsi3>
81125378:	100d883a 	mov	r6,r2
8112537c:	b808943a 	slli	r4,r23,16
81125380:	aa3fffcc 	andi	r8,r21,65535
81125384:	8804d43a 	srli	r2,r17,16
81125388:	41af383a 	mul	r23,r8,r6
8112538c:	8520983a 	sll	r16,r16,r20
81125390:	1104b03a 	or	r2,r2,r4
81125394:	15c0042e 	bgeu	r2,r23,811253a8 <__umoddi3+0x344>
81125398:	1545883a 	add	r2,r2,r21
8112539c:	30ffffc4 	addi	r3,r6,-1
811253a0:	1540742e 	bgeu	r2,r21,81125574 <__umoddi3+0x510>
811253a4:	180d883a 	mov	r6,r3
811253a8:	15efc83a 	sub	r23,r2,r23
811253ac:	b00b883a 	mov	r5,r22
811253b0:	b809883a 	mov	r4,r23
811253b4:	d9800115 	stw	r6,4(sp)
811253b8:	da000015 	stw	r8,0(sp)
811253bc:	11257000 	call	81125700 <__umodsi3>
811253c0:	b00b883a 	mov	r5,r22
811253c4:	b809883a 	mov	r4,r23
811253c8:	1039883a 	mov	fp,r2
811253cc:	112569c0 	call	8112569c <__udivsi3>
811253d0:	da000017 	ldw	r8,0(sp)
811253d4:	e038943a 	slli	fp,fp,16
811253d8:	100b883a 	mov	r5,r2
811253dc:	4089383a 	mul	r4,r8,r2
811253e0:	8a3fffcc 	andi	r8,r17,65535
811253e4:	4710b03a 	or	r8,r8,fp
811253e8:	d9800117 	ldw	r6,4(sp)
811253ec:	4100042e 	bgeu	r8,r4,81125400 <__umoddi3+0x39c>
811253f0:	4551883a 	add	r8,r8,r21
811253f4:	10bfffc4 	addi	r2,r2,-1
811253f8:	45405a2e 	bgeu	r8,r21,81125564 <__umoddi3+0x500>
811253fc:	100b883a 	mov	r5,r2
81125400:	300c943a 	slli	r6,r6,16
81125404:	91ffffcc 	andi	r7,r18,65535
81125408:	9004d43a 	srli	r2,r18,16
8112540c:	314cb03a 	or	r6,r6,r5
81125410:	317fffcc 	andi	r5,r6,65535
81125414:	300cd43a 	srli	r6,r6,16
81125418:	29d3383a 	mul	r9,r5,r7
8112541c:	288b383a 	mul	r5,r5,r2
81125420:	31cf383a 	mul	r7,r6,r7
81125424:	4806d43a 	srli	r3,r9,16
81125428:	4111c83a 	sub	r8,r8,r4
8112542c:	29cb883a 	add	r5,r5,r7
81125430:	194b883a 	add	r5,r3,r5
81125434:	3085383a 	mul	r2,r6,r2
81125438:	29c0022e 	bgeu	r5,r7,81125444 <__umoddi3+0x3e0>
8112543c:	00c00074 	movhi	r3,1
81125440:	10c5883a 	add	r2,r2,r3
81125444:	2808d43a 	srli	r4,r5,16
81125448:	280a943a 	slli	r5,r5,16
8112544c:	4a7fffcc 	andi	r9,r9,65535
81125450:	2085883a 	add	r2,r4,r2
81125454:	2a4b883a 	add	r5,r5,r9
81125458:	40803636 	bltu	r8,r2,81125534 <__umoddi3+0x4d0>
8112545c:	40804d26 	beq	r8,r2,81125594 <__umoddi3+0x530>
81125460:	4089c83a 	sub	r4,r8,r2
81125464:	280f883a 	mov	r7,r5
81125468:	81cfc83a 	sub	r7,r16,r7
8112546c:	81c7803a 	cmpltu	r3,r16,r7
81125470:	20c7c83a 	sub	r3,r4,r3
81125474:	1cc4983a 	sll	r2,r3,r19
81125478:	3d0ed83a 	srl	r7,r7,r20
8112547c:	1d06d83a 	srl	r3,r3,r20
81125480:	11c4b03a 	or	r2,r2,r7
81125484:	003f9306 	br	811252d4 <__reset+0xfb1052d4>
81125488:	9ca6983a 	sll	r19,r19,r18
8112548c:	88e8d83a 	srl	r20,r17,r3
81125490:	80c4d83a 	srl	r2,r16,r3
81125494:	982cd43a 	srli	r22,r19,16
81125498:	8ca2983a 	sll	r17,r17,r18
8112549c:	a009883a 	mov	r4,r20
811254a0:	b00b883a 	mov	r5,r22
811254a4:	1478b03a 	or	fp,r2,r17
811254a8:	11257000 	call	81125700 <__umodsi3>
811254ac:	a009883a 	mov	r4,r20
811254b0:	b00b883a 	mov	r5,r22
811254b4:	1023883a 	mov	r17,r2
811254b8:	112569c0 	call	8112569c <__udivsi3>
811254bc:	9d7fffcc 	andi	r21,r19,65535
811254c0:	880a943a 	slli	r5,r17,16
811254c4:	e008d43a 	srli	r4,fp,16
811254c8:	a885383a 	mul	r2,r21,r2
811254cc:	84a8983a 	sll	r20,r16,r18
811254d0:	2148b03a 	or	r4,r4,r5
811254d4:	2080042e 	bgeu	r4,r2,811254e8 <__umoddi3+0x484>
811254d8:	24c9883a 	add	r4,r4,r19
811254dc:	24c00236 	bltu	r4,r19,811254e8 <__umoddi3+0x484>
811254e0:	2080012e 	bgeu	r4,r2,811254e8 <__umoddi3+0x484>
811254e4:	24c9883a 	add	r4,r4,r19
811254e8:	20a3c83a 	sub	r17,r4,r2
811254ec:	b00b883a 	mov	r5,r22
811254f0:	8809883a 	mov	r4,r17
811254f4:	11257000 	call	81125700 <__umodsi3>
811254f8:	102f883a 	mov	r23,r2
811254fc:	8809883a 	mov	r4,r17
81125500:	b00b883a 	mov	r5,r22
81125504:	112569c0 	call	8112569c <__udivsi3>
81125508:	b82e943a 	slli	r23,r23,16
8112550c:	a885383a 	mul	r2,r21,r2
81125510:	e13fffcc 	andi	r4,fp,65535
81125514:	25c8b03a 	or	r4,r4,r23
81125518:	2080042e 	bgeu	r4,r2,8112552c <__umoddi3+0x4c8>
8112551c:	24c9883a 	add	r4,r4,r19
81125520:	24c00236 	bltu	r4,r19,8112552c <__umoddi3+0x4c8>
81125524:	2080012e 	bgeu	r4,r2,8112552c <__umoddi3+0x4c8>
81125528:	24c9883a 	add	r4,r4,r19
8112552c:	20a3c83a 	sub	r17,r4,r2
81125530:	003f4806 	br	81125254 <__reset+0xfb105254>
81125534:	2c8fc83a 	sub	r7,r5,r18
81125538:	1545c83a 	sub	r2,r2,r21
8112553c:	29cb803a 	cmpltu	r5,r5,r7
81125540:	1145c83a 	sub	r2,r2,r5
81125544:	4089c83a 	sub	r4,r8,r2
81125548:	003fc706 	br	81125468 <__reset+0xfb105468>
8112554c:	01000604 	movi	r4,24
81125550:	003f1806 	br	811251b4 <__reset+0xfb1051b4>
81125554:	00800604 	movi	r2,24
81125558:	003f3206 	br	81125224 <__reset+0xfb105224>
8112555c:	01000604 	movi	r4,24
81125560:	003ed906 	br	811250c8 <__reset+0xfb1050c8>
81125564:	413fa52e 	bgeu	r8,r4,811253fc <__reset+0xfb1053fc>
81125568:	297fff84 	addi	r5,r5,-2
8112556c:	4551883a 	add	r8,r8,r21
81125570:	003fa306 	br	81125400 <__reset+0xfb105400>
81125574:	15ff8b2e 	bgeu	r2,r23,811253a4 <__reset+0xfb1053a4>
81125578:	31bfff84 	addi	r6,r6,-2
8112557c:	1545883a 	add	r2,r2,r21
81125580:	003f8906 	br	811253a8 <__reset+0xfb1053a8>
81125584:	24c9883a 	add	r4,r4,r19
81125588:	003eee06 	br	81125144 <__reset+0xfb105144>
8112558c:	8005883a 	mov	r2,r16
81125590:	003f1706 	br	811251f0 <__reset+0xfb1051f0>
81125594:	817fe736 	bltu	r16,r5,81125534 <__reset+0xfb105534>
81125598:	280f883a 	mov	r7,r5
8112559c:	0009883a 	mov	r4,zero
811255a0:	003fb106 	br	81125468 <__reset+0xfb105468>

811255a4 <__divsi3>:
811255a4:	20001b16 	blt	r4,zero,81125614 <__divsi3+0x70>
811255a8:	000f883a 	mov	r7,zero
811255ac:	28001616 	blt	r5,zero,81125608 <__divsi3+0x64>
811255b0:	200d883a 	mov	r6,r4
811255b4:	29001a2e 	bgeu	r5,r4,81125620 <__divsi3+0x7c>
811255b8:	00800804 	movi	r2,32
811255bc:	00c00044 	movi	r3,1
811255c0:	00000106 	br	811255c8 <__divsi3+0x24>
811255c4:	10000d26 	beq	r2,zero,811255fc <__divsi3+0x58>
811255c8:	294b883a 	add	r5,r5,r5
811255cc:	10bfffc4 	addi	r2,r2,-1
811255d0:	18c7883a 	add	r3,r3,r3
811255d4:	293ffb36 	bltu	r5,r4,811255c4 <__reset+0xfb1055c4>
811255d8:	0005883a 	mov	r2,zero
811255dc:	18000726 	beq	r3,zero,811255fc <__divsi3+0x58>
811255e0:	0005883a 	mov	r2,zero
811255e4:	31400236 	bltu	r6,r5,811255f0 <__divsi3+0x4c>
811255e8:	314dc83a 	sub	r6,r6,r5
811255ec:	10c4b03a 	or	r2,r2,r3
811255f0:	1806d07a 	srli	r3,r3,1
811255f4:	280ad07a 	srli	r5,r5,1
811255f8:	183ffa1e 	bne	r3,zero,811255e4 <__reset+0xfb1055e4>
811255fc:	38000126 	beq	r7,zero,81125604 <__divsi3+0x60>
81125600:	0085c83a 	sub	r2,zero,r2
81125604:	f800283a 	ret
81125608:	014bc83a 	sub	r5,zero,r5
8112560c:	39c0005c 	xori	r7,r7,1
81125610:	003fe706 	br	811255b0 <__reset+0xfb1055b0>
81125614:	0109c83a 	sub	r4,zero,r4
81125618:	01c00044 	movi	r7,1
8112561c:	003fe306 	br	811255ac <__reset+0xfb1055ac>
81125620:	00c00044 	movi	r3,1
81125624:	003fee06 	br	811255e0 <__reset+0xfb1055e0>

81125628 <__modsi3>:
81125628:	20001716 	blt	r4,zero,81125688 <__modsi3+0x60>
8112562c:	000f883a 	mov	r7,zero
81125630:	2005883a 	mov	r2,r4
81125634:	28001216 	blt	r5,zero,81125680 <__modsi3+0x58>
81125638:	2900162e 	bgeu	r5,r4,81125694 <__modsi3+0x6c>
8112563c:	01800804 	movi	r6,32
81125640:	00c00044 	movi	r3,1
81125644:	00000106 	br	8112564c <__modsi3+0x24>
81125648:	30000a26 	beq	r6,zero,81125674 <__modsi3+0x4c>
8112564c:	294b883a 	add	r5,r5,r5
81125650:	31bfffc4 	addi	r6,r6,-1
81125654:	18c7883a 	add	r3,r3,r3
81125658:	293ffb36 	bltu	r5,r4,81125648 <__reset+0xfb105648>
8112565c:	18000526 	beq	r3,zero,81125674 <__modsi3+0x4c>
81125660:	1806d07a 	srli	r3,r3,1
81125664:	11400136 	bltu	r2,r5,8112566c <__modsi3+0x44>
81125668:	1145c83a 	sub	r2,r2,r5
8112566c:	280ad07a 	srli	r5,r5,1
81125670:	183ffb1e 	bne	r3,zero,81125660 <__reset+0xfb105660>
81125674:	38000126 	beq	r7,zero,8112567c <__modsi3+0x54>
81125678:	0085c83a 	sub	r2,zero,r2
8112567c:	f800283a 	ret
81125680:	014bc83a 	sub	r5,zero,r5
81125684:	003fec06 	br	81125638 <__reset+0xfb105638>
81125688:	0109c83a 	sub	r4,zero,r4
8112568c:	01c00044 	movi	r7,1
81125690:	003fe706 	br	81125630 <__reset+0xfb105630>
81125694:	00c00044 	movi	r3,1
81125698:	003ff106 	br	81125660 <__reset+0xfb105660>

8112569c <__udivsi3>:
8112569c:	200d883a 	mov	r6,r4
811256a0:	2900152e 	bgeu	r5,r4,811256f8 <__udivsi3+0x5c>
811256a4:	28001416 	blt	r5,zero,811256f8 <__udivsi3+0x5c>
811256a8:	00800804 	movi	r2,32
811256ac:	00c00044 	movi	r3,1
811256b0:	00000206 	br	811256bc <__udivsi3+0x20>
811256b4:	10000e26 	beq	r2,zero,811256f0 <__udivsi3+0x54>
811256b8:	28000516 	blt	r5,zero,811256d0 <__udivsi3+0x34>
811256bc:	294b883a 	add	r5,r5,r5
811256c0:	10bfffc4 	addi	r2,r2,-1
811256c4:	18c7883a 	add	r3,r3,r3
811256c8:	293ffa36 	bltu	r5,r4,811256b4 <__reset+0xfb1056b4>
811256cc:	18000826 	beq	r3,zero,811256f0 <__udivsi3+0x54>
811256d0:	0005883a 	mov	r2,zero
811256d4:	31400236 	bltu	r6,r5,811256e0 <__udivsi3+0x44>
811256d8:	314dc83a 	sub	r6,r6,r5
811256dc:	10c4b03a 	or	r2,r2,r3
811256e0:	1806d07a 	srli	r3,r3,1
811256e4:	280ad07a 	srli	r5,r5,1
811256e8:	183ffa1e 	bne	r3,zero,811256d4 <__reset+0xfb1056d4>
811256ec:	f800283a 	ret
811256f0:	0005883a 	mov	r2,zero
811256f4:	f800283a 	ret
811256f8:	00c00044 	movi	r3,1
811256fc:	003ff406 	br	811256d0 <__reset+0xfb1056d0>

81125700 <__umodsi3>:
81125700:	2005883a 	mov	r2,r4
81125704:	2900122e 	bgeu	r5,r4,81125750 <__umodsi3+0x50>
81125708:	28001116 	blt	r5,zero,81125750 <__umodsi3+0x50>
8112570c:	01800804 	movi	r6,32
81125710:	00c00044 	movi	r3,1
81125714:	00000206 	br	81125720 <__umodsi3+0x20>
81125718:	30000c26 	beq	r6,zero,8112574c <__umodsi3+0x4c>
8112571c:	28000516 	blt	r5,zero,81125734 <__umodsi3+0x34>
81125720:	294b883a 	add	r5,r5,r5
81125724:	31bfffc4 	addi	r6,r6,-1
81125728:	18c7883a 	add	r3,r3,r3
8112572c:	293ffa36 	bltu	r5,r4,81125718 <__reset+0xfb105718>
81125730:	18000626 	beq	r3,zero,8112574c <__umodsi3+0x4c>
81125734:	1806d07a 	srli	r3,r3,1
81125738:	11400136 	bltu	r2,r5,81125740 <__umodsi3+0x40>
8112573c:	1145c83a 	sub	r2,r2,r5
81125740:	280ad07a 	srli	r5,r5,1
81125744:	183ffb1e 	bne	r3,zero,81125734 <__reset+0xfb105734>
81125748:	f800283a 	ret
8112574c:	f800283a 	ret
81125750:	00c00044 	movi	r3,1
81125754:	003ff706 	br	81125734 <__reset+0xfb105734>

81125758 <__eqsf2>:
81125758:	2006d5fa 	srli	r3,r4,23
8112575c:	280cd5fa 	srli	r6,r5,23
81125760:	01c02034 	movhi	r7,128
81125764:	39ffffc4 	addi	r7,r7,-1
81125768:	18c03fcc 	andi	r3,r3,255
8112576c:	02003fc4 	movi	r8,255
81125770:	3904703a 	and	r2,r7,r4
81125774:	31803fcc 	andi	r6,r6,255
81125778:	394e703a 	and	r7,r7,r5
8112577c:	2008d7fa 	srli	r4,r4,31
81125780:	280ad7fa 	srli	r5,r5,31
81125784:	1a000d26 	beq	r3,r8,811257bc <__eqsf2+0x64>
81125788:	02003fc4 	movi	r8,255
8112578c:	32000826 	beq	r6,r8,811257b0 <__eqsf2+0x58>
81125790:	19800226 	beq	r3,r6,8112579c <__eqsf2+0x44>
81125794:	00800044 	movi	r2,1
81125798:	f800283a 	ret
8112579c:	11fffd1e 	bne	r2,r7,81125794 <__reset+0xfb105794>
811257a0:	21400926 	beq	r4,r5,811257c8 <__eqsf2+0x70>
811257a4:	183ffb1e 	bne	r3,zero,81125794 <__reset+0xfb105794>
811257a8:	1004c03a 	cmpne	r2,r2,zero
811257ac:	f800283a 	ret
811257b0:	383ff726 	beq	r7,zero,81125790 <__reset+0xfb105790>
811257b4:	00800044 	movi	r2,1
811257b8:	f800283a 	ret
811257bc:	103ff226 	beq	r2,zero,81125788 <__reset+0xfb105788>
811257c0:	00800044 	movi	r2,1
811257c4:	f800283a 	ret
811257c8:	0005883a 	mov	r2,zero
811257cc:	f800283a 	ret

811257d0 <__gesf2>:
811257d0:	2004d5fa 	srli	r2,r4,23
811257d4:	2806d5fa 	srli	r3,r5,23
811257d8:	01802034 	movhi	r6,128
811257dc:	31bfffc4 	addi	r6,r6,-1
811257e0:	10803fcc 	andi	r2,r2,255
811257e4:	01c03fc4 	movi	r7,255
811257e8:	3110703a 	and	r8,r6,r4
811257ec:	18c03fcc 	andi	r3,r3,255
811257f0:	314c703a 	and	r6,r6,r5
811257f4:	2008d7fa 	srli	r4,r4,31
811257f8:	280ad7fa 	srli	r5,r5,31
811257fc:	11c01926 	beq	r2,r7,81125864 <__gesf2+0x94>
81125800:	01c03fc4 	movi	r7,255
81125804:	19c00f26 	beq	r3,r7,81125844 <__gesf2+0x74>
81125808:	1000061e 	bne	r2,zero,81125824 <__gesf2+0x54>
8112580c:	400f003a 	cmpeq	r7,r8,zero
81125810:	1800071e 	bne	r3,zero,81125830 <__gesf2+0x60>
81125814:	3000061e 	bne	r6,zero,81125830 <__gesf2+0x60>
81125818:	0005883a 	mov	r2,zero
8112581c:	40000e1e 	bne	r8,zero,81125858 <__gesf2+0x88>
81125820:	f800283a 	ret
81125824:	18000a1e 	bne	r3,zero,81125850 <__gesf2+0x80>
81125828:	30000b26 	beq	r6,zero,81125858 <__gesf2+0x88>
8112582c:	000f883a 	mov	r7,zero
81125830:	29403fcc 	andi	r5,r5,255
81125834:	38000726 	beq	r7,zero,81125854 <__gesf2+0x84>
81125838:	28000826 	beq	r5,zero,8112585c <__gesf2+0x8c>
8112583c:	00800044 	movi	r2,1
81125840:	f800283a 	ret
81125844:	303ff026 	beq	r6,zero,81125808 <__reset+0xfb105808>
81125848:	00bfff84 	movi	r2,-2
8112584c:	f800283a 	ret
81125850:	29403fcc 	andi	r5,r5,255
81125854:	21400526 	beq	r4,r5,8112586c <__gesf2+0x9c>
81125858:	203ff826 	beq	r4,zero,8112583c <__reset+0xfb10583c>
8112585c:	00bfffc4 	movi	r2,-1
81125860:	f800283a 	ret
81125864:	403fe626 	beq	r8,zero,81125800 <__reset+0xfb105800>
81125868:	003ff706 	br	81125848 <__reset+0xfb105848>
8112586c:	18bffa16 	blt	r3,r2,81125858 <__reset+0xfb105858>
81125870:	10c00216 	blt	r2,r3,8112587c <__gesf2+0xac>
81125874:	323ff836 	bltu	r6,r8,81125858 <__reset+0xfb105858>
81125878:	4180022e 	bgeu	r8,r6,81125884 <__gesf2+0xb4>
8112587c:	203fef1e 	bne	r4,zero,8112583c <__reset+0xfb10583c>
81125880:	003ff606 	br	8112585c <__reset+0xfb10585c>
81125884:	0005883a 	mov	r2,zero
81125888:	f800283a 	ret

8112588c <__lesf2>:
8112588c:	2004d5fa 	srli	r2,r4,23
81125890:	280cd5fa 	srli	r6,r5,23
81125894:	00c02034 	movhi	r3,128
81125898:	18ffffc4 	addi	r3,r3,-1
8112589c:	10803fcc 	andi	r2,r2,255
811258a0:	01c03fc4 	movi	r7,255
811258a4:	1910703a 	and	r8,r3,r4
811258a8:	31803fcc 	andi	r6,r6,255
811258ac:	1946703a 	and	r3,r3,r5
811258b0:	2008d7fa 	srli	r4,r4,31
811258b4:	280ad7fa 	srli	r5,r5,31
811258b8:	11c01b26 	beq	r2,r7,81125928 <__lesf2+0x9c>
811258bc:	01c03fc4 	movi	r7,255
811258c0:	31c01126 	beq	r6,r7,81125908 <__lesf2+0x7c>
811258c4:	1000071e 	bne	r2,zero,811258e4 <__lesf2+0x58>
811258c8:	400f003a 	cmpeq	r7,r8,zero
811258cc:	21003fcc 	andi	r4,r4,255
811258d0:	3000081e 	bne	r6,zero,811258f4 <__lesf2+0x68>
811258d4:	1800071e 	bne	r3,zero,811258f4 <__lesf2+0x68>
811258d8:	0005883a 	mov	r2,zero
811258dc:	40000f1e 	bne	r8,zero,8112591c <__lesf2+0x90>
811258e0:	f800283a 	ret
811258e4:	21003fcc 	andi	r4,r4,255
811258e8:	30000a1e 	bne	r6,zero,81125914 <__lesf2+0x88>
811258ec:	18000b26 	beq	r3,zero,8112591c <__lesf2+0x90>
811258f0:	000f883a 	mov	r7,zero
811258f4:	29403fcc 	andi	r5,r5,255
811258f8:	38000726 	beq	r7,zero,81125918 <__lesf2+0x8c>
811258fc:	28000826 	beq	r5,zero,81125920 <__lesf2+0x94>
81125900:	00800044 	movi	r2,1
81125904:	f800283a 	ret
81125908:	183fee26 	beq	r3,zero,811258c4 <__reset+0xfb1058c4>
8112590c:	00800084 	movi	r2,2
81125910:	f800283a 	ret
81125914:	29403fcc 	andi	r5,r5,255
81125918:	21400626 	beq	r4,r5,81125934 <__lesf2+0xa8>
8112591c:	203ff826 	beq	r4,zero,81125900 <__reset+0xfb105900>
81125920:	00bfffc4 	movi	r2,-1
81125924:	f800283a 	ret
81125928:	403fe426 	beq	r8,zero,811258bc <__reset+0xfb1058bc>
8112592c:	00800084 	movi	r2,2
81125930:	f800283a 	ret
81125934:	30bff916 	blt	r6,r2,8112591c <__reset+0xfb10591c>
81125938:	11800216 	blt	r2,r6,81125944 <__lesf2+0xb8>
8112593c:	1a3ff736 	bltu	r3,r8,8112591c <__reset+0xfb10591c>
81125940:	40c0022e 	bgeu	r8,r3,8112594c <__lesf2+0xc0>
81125944:	203fee1e 	bne	r4,zero,81125900 <__reset+0xfb105900>
81125948:	003ff506 	br	81125920 <__reset+0xfb105920>
8112594c:	0005883a 	mov	r2,zero
81125950:	f800283a 	ret

81125954 <__adddf3>:
81125954:	02c00434 	movhi	r11,16
81125958:	5affffc4 	addi	r11,r11,-1
8112595c:	2806d7fa 	srli	r3,r5,31
81125960:	2ad4703a 	and	r10,r5,r11
81125964:	3ad2703a 	and	r9,r7,r11
81125968:	3804d53a 	srli	r2,r7,20
8112596c:	3018d77a 	srli	r12,r6,29
81125970:	280ad53a 	srli	r5,r5,20
81125974:	501490fa 	slli	r10,r10,3
81125978:	2010d77a 	srli	r8,r4,29
8112597c:	481290fa 	slli	r9,r9,3
81125980:	380ed7fa 	srli	r7,r7,31
81125984:	defffb04 	addi	sp,sp,-20
81125988:	de00012e 	bgeu	sp,et,81125990 <__adddf3+0x3c>
8112598c:	003b68fa 	trap	3
81125990:	dc800215 	stw	r18,8(sp)
81125994:	dc400115 	stw	r17,4(sp)
81125998:	dc000015 	stw	r16,0(sp)
8112599c:	dfc00415 	stw	ra,16(sp)
811259a0:	dcc00315 	stw	r19,12(sp)
811259a4:	1c803fcc 	andi	r18,r3,255
811259a8:	2c01ffcc 	andi	r16,r5,2047
811259ac:	5210b03a 	or	r8,r10,r8
811259b0:	202290fa 	slli	r17,r4,3
811259b4:	1081ffcc 	andi	r2,r2,2047
811259b8:	4b12b03a 	or	r9,r9,r12
811259bc:	300c90fa 	slli	r6,r6,3
811259c0:	91c07526 	beq	r18,r7,81125b98 <__adddf3+0x244>
811259c4:	8087c83a 	sub	r3,r16,r2
811259c8:	00c0ab0e 	bge	zero,r3,81125c78 <__adddf3+0x324>
811259cc:	10002a1e 	bne	r2,zero,81125a78 <__adddf3+0x124>
811259d0:	4984b03a 	or	r2,r9,r6
811259d4:	1000961e 	bne	r2,zero,81125c30 <__adddf3+0x2dc>
811259d8:	888001cc 	andi	r2,r17,7
811259dc:	10000726 	beq	r2,zero,811259fc <__adddf3+0xa8>
811259e0:	888003cc 	andi	r2,r17,15
811259e4:	00c00104 	movi	r3,4
811259e8:	10c00426 	beq	r2,r3,811259fc <__adddf3+0xa8>
811259ec:	88c7883a 	add	r3,r17,r3
811259f0:	1c63803a 	cmpltu	r17,r3,r17
811259f4:	4451883a 	add	r8,r8,r17
811259f8:	1823883a 	mov	r17,r3
811259fc:	4080202c 	andhi	r2,r8,128
81125a00:	10005926 	beq	r2,zero,81125b68 <__adddf3+0x214>
81125a04:	84000044 	addi	r16,r16,1
81125a08:	0081ffc4 	movi	r2,2047
81125a0c:	8080ba26 	beq	r16,r2,81125cf8 <__adddf3+0x3a4>
81125a10:	00bfe034 	movhi	r2,65408
81125a14:	10bfffc4 	addi	r2,r2,-1
81125a18:	4090703a 	and	r8,r8,r2
81125a1c:	4004977a 	slli	r2,r8,29
81125a20:	4010927a 	slli	r8,r8,9
81125a24:	8822d0fa 	srli	r17,r17,3
81125a28:	8401ffcc 	andi	r16,r16,2047
81125a2c:	4010d33a 	srli	r8,r8,12
81125a30:	9007883a 	mov	r3,r18
81125a34:	1444b03a 	or	r2,r2,r17
81125a38:	8401ffcc 	andi	r16,r16,2047
81125a3c:	8020953a 	slli	r16,r16,20
81125a40:	18c03fcc 	andi	r3,r3,255
81125a44:	01000434 	movhi	r4,16
81125a48:	213fffc4 	addi	r4,r4,-1
81125a4c:	180697fa 	slli	r3,r3,31
81125a50:	4110703a 	and	r8,r8,r4
81125a54:	4410b03a 	or	r8,r8,r16
81125a58:	40c6b03a 	or	r3,r8,r3
81125a5c:	dfc00417 	ldw	ra,16(sp)
81125a60:	dcc00317 	ldw	r19,12(sp)
81125a64:	dc800217 	ldw	r18,8(sp)
81125a68:	dc400117 	ldw	r17,4(sp)
81125a6c:	dc000017 	ldw	r16,0(sp)
81125a70:	dec00504 	addi	sp,sp,20
81125a74:	f800283a 	ret
81125a78:	0081ffc4 	movi	r2,2047
81125a7c:	80bfd626 	beq	r16,r2,811259d8 <__reset+0xfb1059d8>
81125a80:	4a402034 	orhi	r9,r9,128
81125a84:	00800e04 	movi	r2,56
81125a88:	10c09f16 	blt	r2,r3,81125d08 <__adddf3+0x3b4>
81125a8c:	008007c4 	movi	r2,31
81125a90:	10c0c216 	blt	r2,r3,81125d9c <__adddf3+0x448>
81125a94:	00800804 	movi	r2,32
81125a98:	10c5c83a 	sub	r2,r2,r3
81125a9c:	488a983a 	sll	r5,r9,r2
81125aa0:	30c8d83a 	srl	r4,r6,r3
81125aa4:	3084983a 	sll	r2,r6,r2
81125aa8:	48c6d83a 	srl	r3,r9,r3
81125aac:	290cb03a 	or	r6,r5,r4
81125ab0:	1004c03a 	cmpne	r2,r2,zero
81125ab4:	308cb03a 	or	r6,r6,r2
81125ab8:	898dc83a 	sub	r6,r17,r6
81125abc:	89a3803a 	cmpltu	r17,r17,r6
81125ac0:	40d1c83a 	sub	r8,r8,r3
81125ac4:	4451c83a 	sub	r8,r8,r17
81125ac8:	3023883a 	mov	r17,r6
81125acc:	4080202c 	andhi	r2,r8,128
81125ad0:	10002326 	beq	r2,zero,81125b60 <__adddf3+0x20c>
81125ad4:	04c02034 	movhi	r19,128
81125ad8:	9cffffc4 	addi	r19,r19,-1
81125adc:	44e6703a 	and	r19,r8,r19
81125ae0:	98007626 	beq	r19,zero,81125cbc <__adddf3+0x368>
81125ae4:	9809883a 	mov	r4,r19
81125ae8:	1111e440 	call	81111e44 <__clzsi2>
81125aec:	10fffe04 	addi	r3,r2,-8
81125af0:	010007c4 	movi	r4,31
81125af4:	20c07716 	blt	r4,r3,81125cd4 <__adddf3+0x380>
81125af8:	00800804 	movi	r2,32
81125afc:	10c5c83a 	sub	r2,r2,r3
81125b00:	8884d83a 	srl	r2,r17,r2
81125b04:	98d0983a 	sll	r8,r19,r3
81125b08:	88e2983a 	sll	r17,r17,r3
81125b0c:	1204b03a 	or	r2,r2,r8
81125b10:	1c007416 	blt	r3,r16,81125ce4 <__adddf3+0x390>
81125b14:	1c21c83a 	sub	r16,r3,r16
81125b18:	82000044 	addi	r8,r16,1
81125b1c:	00c007c4 	movi	r3,31
81125b20:	1a009116 	blt	r3,r8,81125d68 <__adddf3+0x414>
81125b24:	00c00804 	movi	r3,32
81125b28:	1a07c83a 	sub	r3,r3,r8
81125b2c:	8a08d83a 	srl	r4,r17,r8
81125b30:	88e2983a 	sll	r17,r17,r3
81125b34:	10c6983a 	sll	r3,r2,r3
81125b38:	1210d83a 	srl	r8,r2,r8
81125b3c:	8804c03a 	cmpne	r2,r17,zero
81125b40:	1906b03a 	or	r3,r3,r4
81125b44:	18a2b03a 	or	r17,r3,r2
81125b48:	0021883a 	mov	r16,zero
81125b4c:	003fa206 	br	811259d8 <__reset+0xfb1059d8>
81125b50:	1890b03a 	or	r8,r3,r2
81125b54:	40017d26 	beq	r8,zero,8112614c <__adddf3+0x7f8>
81125b58:	1011883a 	mov	r8,r2
81125b5c:	1823883a 	mov	r17,r3
81125b60:	888001cc 	andi	r2,r17,7
81125b64:	103f9e1e 	bne	r2,zero,811259e0 <__reset+0xfb1059e0>
81125b68:	4004977a 	slli	r2,r8,29
81125b6c:	8822d0fa 	srli	r17,r17,3
81125b70:	4010d0fa 	srli	r8,r8,3
81125b74:	9007883a 	mov	r3,r18
81125b78:	1444b03a 	or	r2,r2,r17
81125b7c:	0101ffc4 	movi	r4,2047
81125b80:	81002426 	beq	r16,r4,81125c14 <__adddf3+0x2c0>
81125b84:	8120703a 	and	r16,r16,r4
81125b88:	01000434 	movhi	r4,16
81125b8c:	213fffc4 	addi	r4,r4,-1
81125b90:	4110703a 	and	r8,r8,r4
81125b94:	003fa806 	br	81125a38 <__reset+0xfb105a38>
81125b98:	8089c83a 	sub	r4,r16,r2
81125b9c:	01005e0e 	bge	zero,r4,81125d18 <__adddf3+0x3c4>
81125ba0:	10002b26 	beq	r2,zero,81125c50 <__adddf3+0x2fc>
81125ba4:	0081ffc4 	movi	r2,2047
81125ba8:	80bf8b26 	beq	r16,r2,811259d8 <__reset+0xfb1059d8>
81125bac:	4a402034 	orhi	r9,r9,128
81125bb0:	00800e04 	movi	r2,56
81125bb4:	1100a40e 	bge	r2,r4,81125e48 <__adddf3+0x4f4>
81125bb8:	498cb03a 	or	r6,r9,r6
81125bbc:	300ac03a 	cmpne	r5,r6,zero
81125bc0:	0013883a 	mov	r9,zero
81125bc4:	2c4b883a 	add	r5,r5,r17
81125bc8:	2c63803a 	cmpltu	r17,r5,r17
81125bcc:	4a11883a 	add	r8,r9,r8
81125bd0:	8a11883a 	add	r8,r17,r8
81125bd4:	2823883a 	mov	r17,r5
81125bd8:	4080202c 	andhi	r2,r8,128
81125bdc:	103fe026 	beq	r2,zero,81125b60 <__reset+0xfb105b60>
81125be0:	84000044 	addi	r16,r16,1
81125be4:	0081ffc4 	movi	r2,2047
81125be8:	8080d226 	beq	r16,r2,81125f34 <__adddf3+0x5e0>
81125bec:	00bfe034 	movhi	r2,65408
81125bf0:	10bfffc4 	addi	r2,r2,-1
81125bf4:	4090703a 	and	r8,r8,r2
81125bf8:	880ad07a 	srli	r5,r17,1
81125bfc:	400897fa 	slli	r4,r8,31
81125c00:	88c0004c 	andi	r3,r17,1
81125c04:	28e2b03a 	or	r17,r5,r3
81125c08:	4010d07a 	srli	r8,r8,1
81125c0c:	2462b03a 	or	r17,r4,r17
81125c10:	003f7106 	br	811259d8 <__reset+0xfb1059d8>
81125c14:	4088b03a 	or	r4,r8,r2
81125c18:	20014526 	beq	r4,zero,81126130 <__adddf3+0x7dc>
81125c1c:	01000434 	movhi	r4,16
81125c20:	42000234 	orhi	r8,r8,8
81125c24:	213fffc4 	addi	r4,r4,-1
81125c28:	4110703a 	and	r8,r8,r4
81125c2c:	003f8206 	br	81125a38 <__reset+0xfb105a38>
81125c30:	18ffffc4 	addi	r3,r3,-1
81125c34:	1800491e 	bne	r3,zero,81125d5c <__adddf3+0x408>
81125c38:	898bc83a 	sub	r5,r17,r6
81125c3c:	8963803a 	cmpltu	r17,r17,r5
81125c40:	4251c83a 	sub	r8,r8,r9
81125c44:	4451c83a 	sub	r8,r8,r17
81125c48:	2823883a 	mov	r17,r5
81125c4c:	003f9f06 	br	81125acc <__reset+0xfb105acc>
81125c50:	4984b03a 	or	r2,r9,r6
81125c54:	103f6026 	beq	r2,zero,811259d8 <__reset+0xfb1059d8>
81125c58:	213fffc4 	addi	r4,r4,-1
81125c5c:	2000931e 	bne	r4,zero,81125eac <__adddf3+0x558>
81125c60:	898d883a 	add	r6,r17,r6
81125c64:	3463803a 	cmpltu	r17,r6,r17
81125c68:	4251883a 	add	r8,r8,r9
81125c6c:	8a11883a 	add	r8,r17,r8
81125c70:	3023883a 	mov	r17,r6
81125c74:	003fd806 	br	81125bd8 <__reset+0xfb105bd8>
81125c78:	1800541e 	bne	r3,zero,81125dcc <__adddf3+0x478>
81125c7c:	80800044 	addi	r2,r16,1
81125c80:	1081ffcc 	andi	r2,r2,2047
81125c84:	00c00044 	movi	r3,1
81125c88:	1880a00e 	bge	r3,r2,81125f0c <__adddf3+0x5b8>
81125c8c:	8989c83a 	sub	r4,r17,r6
81125c90:	8905803a 	cmpltu	r2,r17,r4
81125c94:	4267c83a 	sub	r19,r8,r9
81125c98:	98a7c83a 	sub	r19,r19,r2
81125c9c:	9880202c 	andhi	r2,r19,128
81125ca0:	10006326 	beq	r2,zero,81125e30 <__adddf3+0x4dc>
81125ca4:	3463c83a 	sub	r17,r6,r17
81125ca8:	4a07c83a 	sub	r3,r9,r8
81125cac:	344d803a 	cmpltu	r6,r6,r17
81125cb0:	19a7c83a 	sub	r19,r3,r6
81125cb4:	3825883a 	mov	r18,r7
81125cb8:	983f8a1e 	bne	r19,zero,81125ae4 <__reset+0xfb105ae4>
81125cbc:	8809883a 	mov	r4,r17
81125cc0:	1111e440 	call	81111e44 <__clzsi2>
81125cc4:	10800804 	addi	r2,r2,32
81125cc8:	10fffe04 	addi	r3,r2,-8
81125ccc:	010007c4 	movi	r4,31
81125cd0:	20ff890e 	bge	r4,r3,81125af8 <__reset+0xfb105af8>
81125cd4:	10bff604 	addi	r2,r2,-40
81125cd8:	8884983a 	sll	r2,r17,r2
81125cdc:	0023883a 	mov	r17,zero
81125ce0:	1c3f8c0e 	bge	r3,r16,81125b14 <__reset+0xfb105b14>
81125ce4:	023fe034 	movhi	r8,65408
81125ce8:	423fffc4 	addi	r8,r8,-1
81125cec:	80e1c83a 	sub	r16,r16,r3
81125cf0:	1210703a 	and	r8,r2,r8
81125cf4:	003f3806 	br	811259d8 <__reset+0xfb1059d8>
81125cf8:	9007883a 	mov	r3,r18
81125cfc:	0011883a 	mov	r8,zero
81125d00:	0005883a 	mov	r2,zero
81125d04:	003f4c06 	br	81125a38 <__reset+0xfb105a38>
81125d08:	498cb03a 	or	r6,r9,r6
81125d0c:	300cc03a 	cmpne	r6,r6,zero
81125d10:	0007883a 	mov	r3,zero
81125d14:	003f6806 	br	81125ab8 <__reset+0xfb105ab8>
81125d18:	20009c1e 	bne	r4,zero,81125f8c <__adddf3+0x638>
81125d1c:	80800044 	addi	r2,r16,1
81125d20:	1141ffcc 	andi	r5,r2,2047
81125d24:	01000044 	movi	r4,1
81125d28:	2140670e 	bge	r4,r5,81125ec8 <__adddf3+0x574>
81125d2c:	0101ffc4 	movi	r4,2047
81125d30:	11007f26 	beq	r2,r4,81125f30 <__adddf3+0x5dc>
81125d34:	898d883a 	add	r6,r17,r6
81125d38:	4247883a 	add	r3,r8,r9
81125d3c:	3451803a 	cmpltu	r8,r6,r17
81125d40:	40d1883a 	add	r8,r8,r3
81125d44:	402297fa 	slli	r17,r8,31
81125d48:	300cd07a 	srli	r6,r6,1
81125d4c:	4010d07a 	srli	r8,r8,1
81125d50:	1021883a 	mov	r16,r2
81125d54:	89a2b03a 	or	r17,r17,r6
81125d58:	003f1f06 	br	811259d8 <__reset+0xfb1059d8>
81125d5c:	0081ffc4 	movi	r2,2047
81125d60:	80bf481e 	bne	r16,r2,81125a84 <__reset+0xfb105a84>
81125d64:	003f1c06 	br	811259d8 <__reset+0xfb1059d8>
81125d68:	843ff844 	addi	r16,r16,-31
81125d6c:	01000804 	movi	r4,32
81125d70:	1406d83a 	srl	r3,r2,r16
81125d74:	41005026 	beq	r8,r4,81125eb8 <__adddf3+0x564>
81125d78:	01001004 	movi	r4,64
81125d7c:	2211c83a 	sub	r8,r4,r8
81125d80:	1204983a 	sll	r2,r2,r8
81125d84:	88a2b03a 	or	r17,r17,r2
81125d88:	8822c03a 	cmpne	r17,r17,zero
81125d8c:	1c62b03a 	or	r17,r3,r17
81125d90:	0011883a 	mov	r8,zero
81125d94:	0021883a 	mov	r16,zero
81125d98:	003f7106 	br	81125b60 <__reset+0xfb105b60>
81125d9c:	193ff804 	addi	r4,r3,-32
81125da0:	00800804 	movi	r2,32
81125da4:	4908d83a 	srl	r4,r9,r4
81125da8:	18804526 	beq	r3,r2,81125ec0 <__adddf3+0x56c>
81125dac:	00801004 	movi	r2,64
81125db0:	10c5c83a 	sub	r2,r2,r3
81125db4:	4886983a 	sll	r3,r9,r2
81125db8:	198cb03a 	or	r6,r3,r6
81125dbc:	300cc03a 	cmpne	r6,r6,zero
81125dc0:	218cb03a 	or	r6,r4,r6
81125dc4:	0007883a 	mov	r3,zero
81125dc8:	003f3b06 	br	81125ab8 <__reset+0xfb105ab8>
81125dcc:	80002a26 	beq	r16,zero,81125e78 <__adddf3+0x524>
81125dd0:	0101ffc4 	movi	r4,2047
81125dd4:	11006826 	beq	r2,r4,81125f78 <__adddf3+0x624>
81125dd8:	00c7c83a 	sub	r3,zero,r3
81125ddc:	42002034 	orhi	r8,r8,128
81125de0:	01000e04 	movi	r4,56
81125de4:	20c07c16 	blt	r4,r3,81125fd8 <__adddf3+0x684>
81125de8:	010007c4 	movi	r4,31
81125dec:	20c0da16 	blt	r4,r3,81126158 <__adddf3+0x804>
81125df0:	01000804 	movi	r4,32
81125df4:	20c9c83a 	sub	r4,r4,r3
81125df8:	4114983a 	sll	r10,r8,r4
81125dfc:	88cad83a 	srl	r5,r17,r3
81125e00:	8908983a 	sll	r4,r17,r4
81125e04:	40c6d83a 	srl	r3,r8,r3
81125e08:	5162b03a 	or	r17,r10,r5
81125e0c:	2008c03a 	cmpne	r4,r4,zero
81125e10:	8922b03a 	or	r17,r17,r4
81125e14:	3463c83a 	sub	r17,r6,r17
81125e18:	48c7c83a 	sub	r3,r9,r3
81125e1c:	344d803a 	cmpltu	r6,r6,r17
81125e20:	1991c83a 	sub	r8,r3,r6
81125e24:	1021883a 	mov	r16,r2
81125e28:	3825883a 	mov	r18,r7
81125e2c:	003f2706 	br	81125acc <__reset+0xfb105acc>
81125e30:	24d0b03a 	or	r8,r4,r19
81125e34:	40001b1e 	bne	r8,zero,81125ea4 <__adddf3+0x550>
81125e38:	0005883a 	mov	r2,zero
81125e3c:	0007883a 	mov	r3,zero
81125e40:	0021883a 	mov	r16,zero
81125e44:	003f4d06 	br	81125b7c <__reset+0xfb105b7c>
81125e48:	008007c4 	movi	r2,31
81125e4c:	11003c16 	blt	r2,r4,81125f40 <__adddf3+0x5ec>
81125e50:	00800804 	movi	r2,32
81125e54:	1105c83a 	sub	r2,r2,r4
81125e58:	488e983a 	sll	r7,r9,r2
81125e5c:	310ad83a 	srl	r5,r6,r4
81125e60:	3084983a 	sll	r2,r6,r2
81125e64:	4912d83a 	srl	r9,r9,r4
81125e68:	394ab03a 	or	r5,r7,r5
81125e6c:	1004c03a 	cmpne	r2,r2,zero
81125e70:	288ab03a 	or	r5,r5,r2
81125e74:	003f5306 	br	81125bc4 <__reset+0xfb105bc4>
81125e78:	4448b03a 	or	r4,r8,r17
81125e7c:	20003e26 	beq	r4,zero,81125f78 <__adddf3+0x624>
81125e80:	00c6303a 	nor	r3,zero,r3
81125e84:	18003a1e 	bne	r3,zero,81125f70 <__adddf3+0x61c>
81125e88:	3463c83a 	sub	r17,r6,r17
81125e8c:	4a07c83a 	sub	r3,r9,r8
81125e90:	344d803a 	cmpltu	r6,r6,r17
81125e94:	1991c83a 	sub	r8,r3,r6
81125e98:	1021883a 	mov	r16,r2
81125e9c:	3825883a 	mov	r18,r7
81125ea0:	003f0a06 	br	81125acc <__reset+0xfb105acc>
81125ea4:	2023883a 	mov	r17,r4
81125ea8:	003f0d06 	br	81125ae0 <__reset+0xfb105ae0>
81125eac:	0081ffc4 	movi	r2,2047
81125eb0:	80bf3f1e 	bne	r16,r2,81125bb0 <__reset+0xfb105bb0>
81125eb4:	003ec806 	br	811259d8 <__reset+0xfb1059d8>
81125eb8:	0005883a 	mov	r2,zero
81125ebc:	003fb106 	br	81125d84 <__reset+0xfb105d84>
81125ec0:	0007883a 	mov	r3,zero
81125ec4:	003fbc06 	br	81125db8 <__reset+0xfb105db8>
81125ec8:	4444b03a 	or	r2,r8,r17
81125ecc:	8000871e 	bne	r16,zero,811260ec <__adddf3+0x798>
81125ed0:	1000ba26 	beq	r2,zero,811261bc <__adddf3+0x868>
81125ed4:	4984b03a 	or	r2,r9,r6
81125ed8:	103ebf26 	beq	r2,zero,811259d8 <__reset+0xfb1059d8>
81125edc:	8985883a 	add	r2,r17,r6
81125ee0:	4247883a 	add	r3,r8,r9
81125ee4:	1451803a 	cmpltu	r8,r2,r17
81125ee8:	40d1883a 	add	r8,r8,r3
81125eec:	40c0202c 	andhi	r3,r8,128
81125ef0:	1023883a 	mov	r17,r2
81125ef4:	183f1a26 	beq	r3,zero,81125b60 <__reset+0xfb105b60>
81125ef8:	00bfe034 	movhi	r2,65408
81125efc:	10bfffc4 	addi	r2,r2,-1
81125f00:	2021883a 	mov	r16,r4
81125f04:	4090703a 	and	r8,r8,r2
81125f08:	003eb306 	br	811259d8 <__reset+0xfb1059d8>
81125f0c:	4444b03a 	or	r2,r8,r17
81125f10:	8000291e 	bne	r16,zero,81125fb8 <__adddf3+0x664>
81125f14:	10004b1e 	bne	r2,zero,81126044 <__adddf3+0x6f0>
81125f18:	4990b03a 	or	r8,r9,r6
81125f1c:	40008b26 	beq	r8,zero,8112614c <__adddf3+0x7f8>
81125f20:	4811883a 	mov	r8,r9
81125f24:	3023883a 	mov	r17,r6
81125f28:	3825883a 	mov	r18,r7
81125f2c:	003eaa06 	br	811259d8 <__reset+0xfb1059d8>
81125f30:	1021883a 	mov	r16,r2
81125f34:	0011883a 	mov	r8,zero
81125f38:	0005883a 	mov	r2,zero
81125f3c:	003f0f06 	br	81125b7c <__reset+0xfb105b7c>
81125f40:	217ff804 	addi	r5,r4,-32
81125f44:	00800804 	movi	r2,32
81125f48:	494ad83a 	srl	r5,r9,r5
81125f4c:	20807d26 	beq	r4,r2,81126144 <__adddf3+0x7f0>
81125f50:	00801004 	movi	r2,64
81125f54:	1109c83a 	sub	r4,r2,r4
81125f58:	4912983a 	sll	r9,r9,r4
81125f5c:	498cb03a 	or	r6,r9,r6
81125f60:	300cc03a 	cmpne	r6,r6,zero
81125f64:	298ab03a 	or	r5,r5,r6
81125f68:	0013883a 	mov	r9,zero
81125f6c:	003f1506 	br	81125bc4 <__reset+0xfb105bc4>
81125f70:	0101ffc4 	movi	r4,2047
81125f74:	113f9a1e 	bne	r2,r4,81125de0 <__reset+0xfb105de0>
81125f78:	4811883a 	mov	r8,r9
81125f7c:	3023883a 	mov	r17,r6
81125f80:	1021883a 	mov	r16,r2
81125f84:	3825883a 	mov	r18,r7
81125f88:	003e9306 	br	811259d8 <__reset+0xfb1059d8>
81125f8c:	8000161e 	bne	r16,zero,81125fe8 <__adddf3+0x694>
81125f90:	444ab03a 	or	r5,r8,r17
81125f94:	28005126 	beq	r5,zero,811260dc <__adddf3+0x788>
81125f98:	0108303a 	nor	r4,zero,r4
81125f9c:	20004d1e 	bne	r4,zero,811260d4 <__adddf3+0x780>
81125fa0:	89a3883a 	add	r17,r17,r6
81125fa4:	4253883a 	add	r9,r8,r9
81125fa8:	898d803a 	cmpltu	r6,r17,r6
81125fac:	3251883a 	add	r8,r6,r9
81125fb0:	1021883a 	mov	r16,r2
81125fb4:	003f0806 	br	81125bd8 <__reset+0xfb105bd8>
81125fb8:	1000301e 	bne	r2,zero,8112607c <__adddf3+0x728>
81125fbc:	4984b03a 	or	r2,r9,r6
81125fc0:	10007126 	beq	r2,zero,81126188 <__adddf3+0x834>
81125fc4:	4811883a 	mov	r8,r9
81125fc8:	3023883a 	mov	r17,r6
81125fcc:	3825883a 	mov	r18,r7
81125fd0:	0401ffc4 	movi	r16,2047
81125fd4:	003e8006 	br	811259d8 <__reset+0xfb1059d8>
81125fd8:	4462b03a 	or	r17,r8,r17
81125fdc:	8822c03a 	cmpne	r17,r17,zero
81125fe0:	0007883a 	mov	r3,zero
81125fe4:	003f8b06 	br	81125e14 <__reset+0xfb105e14>
81125fe8:	0141ffc4 	movi	r5,2047
81125fec:	11403b26 	beq	r2,r5,811260dc <__adddf3+0x788>
81125ff0:	0109c83a 	sub	r4,zero,r4
81125ff4:	42002034 	orhi	r8,r8,128
81125ff8:	01400e04 	movi	r5,56
81125ffc:	29006716 	blt	r5,r4,8112619c <__adddf3+0x848>
81126000:	014007c4 	movi	r5,31
81126004:	29007016 	blt	r5,r4,811261c8 <__adddf3+0x874>
81126008:	01400804 	movi	r5,32
8112600c:	290bc83a 	sub	r5,r5,r4
81126010:	4154983a 	sll	r10,r8,r5
81126014:	890ed83a 	srl	r7,r17,r4
81126018:	894a983a 	sll	r5,r17,r5
8112601c:	4108d83a 	srl	r4,r8,r4
81126020:	51e2b03a 	or	r17,r10,r7
81126024:	280ac03a 	cmpne	r5,r5,zero
81126028:	8962b03a 	or	r17,r17,r5
8112602c:	89a3883a 	add	r17,r17,r6
81126030:	2253883a 	add	r9,r4,r9
81126034:	898d803a 	cmpltu	r6,r17,r6
81126038:	3251883a 	add	r8,r6,r9
8112603c:	1021883a 	mov	r16,r2
81126040:	003ee506 	br	81125bd8 <__reset+0xfb105bd8>
81126044:	4984b03a 	or	r2,r9,r6
81126048:	103e6326 	beq	r2,zero,811259d8 <__reset+0xfb1059d8>
8112604c:	8987c83a 	sub	r3,r17,r6
81126050:	88c9803a 	cmpltu	r4,r17,r3
81126054:	4245c83a 	sub	r2,r8,r9
81126058:	1105c83a 	sub	r2,r2,r4
8112605c:	1100202c 	andhi	r4,r2,128
81126060:	203ebb26 	beq	r4,zero,81125b50 <__reset+0xfb105b50>
81126064:	3463c83a 	sub	r17,r6,r17
81126068:	4a07c83a 	sub	r3,r9,r8
8112606c:	344d803a 	cmpltu	r6,r6,r17
81126070:	1991c83a 	sub	r8,r3,r6
81126074:	3825883a 	mov	r18,r7
81126078:	003e5706 	br	811259d8 <__reset+0xfb1059d8>
8112607c:	4984b03a 	or	r2,r9,r6
81126080:	10002e26 	beq	r2,zero,8112613c <__adddf3+0x7e8>
81126084:	4004d0fa 	srli	r2,r8,3
81126088:	8822d0fa 	srli	r17,r17,3
8112608c:	4010977a 	slli	r8,r8,29
81126090:	10c0022c 	andhi	r3,r2,8
81126094:	4462b03a 	or	r17,r8,r17
81126098:	18000826 	beq	r3,zero,811260bc <__adddf3+0x768>
8112609c:	4808d0fa 	srli	r4,r9,3
811260a0:	20c0022c 	andhi	r3,r4,8
811260a4:	1800051e 	bne	r3,zero,811260bc <__adddf3+0x768>
811260a8:	300cd0fa 	srli	r6,r6,3
811260ac:	4806977a 	slli	r3,r9,29
811260b0:	2005883a 	mov	r2,r4
811260b4:	3825883a 	mov	r18,r7
811260b8:	19a2b03a 	or	r17,r3,r6
811260bc:	8810d77a 	srli	r8,r17,29
811260c0:	100490fa 	slli	r2,r2,3
811260c4:	882290fa 	slli	r17,r17,3
811260c8:	0401ffc4 	movi	r16,2047
811260cc:	4090b03a 	or	r8,r8,r2
811260d0:	003e4106 	br	811259d8 <__reset+0xfb1059d8>
811260d4:	0141ffc4 	movi	r5,2047
811260d8:	117fc71e 	bne	r2,r5,81125ff8 <__reset+0xfb105ff8>
811260dc:	4811883a 	mov	r8,r9
811260e0:	3023883a 	mov	r17,r6
811260e4:	1021883a 	mov	r16,r2
811260e8:	003e3b06 	br	811259d8 <__reset+0xfb1059d8>
811260ec:	10002f26 	beq	r2,zero,811261ac <__adddf3+0x858>
811260f0:	4984b03a 	or	r2,r9,r6
811260f4:	10001126 	beq	r2,zero,8112613c <__adddf3+0x7e8>
811260f8:	4004d0fa 	srli	r2,r8,3
811260fc:	8822d0fa 	srli	r17,r17,3
81126100:	4010977a 	slli	r8,r8,29
81126104:	10c0022c 	andhi	r3,r2,8
81126108:	4462b03a 	or	r17,r8,r17
8112610c:	183feb26 	beq	r3,zero,811260bc <__reset+0xfb1060bc>
81126110:	4808d0fa 	srli	r4,r9,3
81126114:	20c0022c 	andhi	r3,r4,8
81126118:	183fe81e 	bne	r3,zero,811260bc <__reset+0xfb1060bc>
8112611c:	300cd0fa 	srli	r6,r6,3
81126120:	4806977a 	slli	r3,r9,29
81126124:	2005883a 	mov	r2,r4
81126128:	19a2b03a 	or	r17,r3,r6
8112612c:	003fe306 	br	811260bc <__reset+0xfb1060bc>
81126130:	0011883a 	mov	r8,zero
81126134:	0005883a 	mov	r2,zero
81126138:	003e3f06 	br	81125a38 <__reset+0xfb105a38>
8112613c:	0401ffc4 	movi	r16,2047
81126140:	003e2506 	br	811259d8 <__reset+0xfb1059d8>
81126144:	0013883a 	mov	r9,zero
81126148:	003f8406 	br	81125f5c <__reset+0xfb105f5c>
8112614c:	0005883a 	mov	r2,zero
81126150:	0007883a 	mov	r3,zero
81126154:	003e8906 	br	81125b7c <__reset+0xfb105b7c>
81126158:	197ff804 	addi	r5,r3,-32
8112615c:	01000804 	movi	r4,32
81126160:	414ad83a 	srl	r5,r8,r5
81126164:	19002426 	beq	r3,r4,811261f8 <__adddf3+0x8a4>
81126168:	01001004 	movi	r4,64
8112616c:	20c7c83a 	sub	r3,r4,r3
81126170:	40c6983a 	sll	r3,r8,r3
81126174:	1c46b03a 	or	r3,r3,r17
81126178:	1806c03a 	cmpne	r3,r3,zero
8112617c:	28e2b03a 	or	r17,r5,r3
81126180:	0007883a 	mov	r3,zero
81126184:	003f2306 	br	81125e14 <__reset+0xfb105e14>
81126188:	0007883a 	mov	r3,zero
8112618c:	5811883a 	mov	r8,r11
81126190:	00bfffc4 	movi	r2,-1
81126194:	0401ffc4 	movi	r16,2047
81126198:	003e7806 	br	81125b7c <__reset+0xfb105b7c>
8112619c:	4462b03a 	or	r17,r8,r17
811261a0:	8822c03a 	cmpne	r17,r17,zero
811261a4:	0009883a 	mov	r4,zero
811261a8:	003fa006 	br	8112602c <__reset+0xfb10602c>
811261ac:	4811883a 	mov	r8,r9
811261b0:	3023883a 	mov	r17,r6
811261b4:	0401ffc4 	movi	r16,2047
811261b8:	003e0706 	br	811259d8 <__reset+0xfb1059d8>
811261bc:	4811883a 	mov	r8,r9
811261c0:	3023883a 	mov	r17,r6
811261c4:	003e0406 	br	811259d8 <__reset+0xfb1059d8>
811261c8:	21fff804 	addi	r7,r4,-32
811261cc:	01400804 	movi	r5,32
811261d0:	41ced83a 	srl	r7,r8,r7
811261d4:	21400a26 	beq	r4,r5,81126200 <__adddf3+0x8ac>
811261d8:	01401004 	movi	r5,64
811261dc:	2909c83a 	sub	r4,r5,r4
811261e0:	4108983a 	sll	r4,r8,r4
811261e4:	2448b03a 	or	r4,r4,r17
811261e8:	2008c03a 	cmpne	r4,r4,zero
811261ec:	3922b03a 	or	r17,r7,r4
811261f0:	0009883a 	mov	r4,zero
811261f4:	003f8d06 	br	8112602c <__reset+0xfb10602c>
811261f8:	0007883a 	mov	r3,zero
811261fc:	003fdd06 	br	81126174 <__reset+0xfb106174>
81126200:	0009883a 	mov	r4,zero
81126204:	003ff706 	br	811261e4 <__reset+0xfb1061e4>

81126208 <__divdf3>:
81126208:	defff204 	addi	sp,sp,-56
8112620c:	de00012e 	bgeu	sp,et,81126214 <__divdf3+0xc>
81126210:	003b68fa 	trap	3
81126214:	dd400915 	stw	r21,36(sp)
81126218:	282ad53a 	srli	r21,r5,20
8112621c:	dd000815 	stw	r20,32(sp)
81126220:	2828d7fa 	srli	r20,r5,31
81126224:	dc000415 	stw	r16,16(sp)
81126228:	04000434 	movhi	r16,16
8112622c:	df000c15 	stw	fp,48(sp)
81126230:	843fffc4 	addi	r16,r16,-1
81126234:	dfc00d15 	stw	ra,52(sp)
81126238:	ddc00b15 	stw	r23,44(sp)
8112623c:	dd800a15 	stw	r22,40(sp)
81126240:	dcc00715 	stw	r19,28(sp)
81126244:	dc800615 	stw	r18,24(sp)
81126248:	dc400515 	stw	r17,20(sp)
8112624c:	ad41ffcc 	andi	r21,r21,2047
81126250:	2c20703a 	and	r16,r5,r16
81126254:	a7003fcc 	andi	fp,r20,255
81126258:	a8006126 	beq	r21,zero,811263e0 <__divdf3+0x1d8>
8112625c:	0081ffc4 	movi	r2,2047
81126260:	2025883a 	mov	r18,r4
81126264:	a8803726 	beq	r21,r2,81126344 <__divdf3+0x13c>
81126268:	80800434 	orhi	r2,r16,16
8112626c:	100490fa 	slli	r2,r2,3
81126270:	2020d77a 	srli	r16,r4,29
81126274:	202490fa 	slli	r18,r4,3
81126278:	ad7f0044 	addi	r21,r21,-1023
8112627c:	80a0b03a 	or	r16,r16,r2
81126280:	0027883a 	mov	r19,zero
81126284:	0013883a 	mov	r9,zero
81126288:	3804d53a 	srli	r2,r7,20
8112628c:	382cd7fa 	srli	r22,r7,31
81126290:	04400434 	movhi	r17,16
81126294:	8c7fffc4 	addi	r17,r17,-1
81126298:	1081ffcc 	andi	r2,r2,2047
8112629c:	3011883a 	mov	r8,r6
811262a0:	3c62703a 	and	r17,r7,r17
811262a4:	b5c03fcc 	andi	r23,r22,255
811262a8:	10006c26 	beq	r2,zero,8112645c <__divdf3+0x254>
811262ac:	00c1ffc4 	movi	r3,2047
811262b0:	10c06426 	beq	r2,r3,81126444 <__divdf3+0x23c>
811262b4:	88c00434 	orhi	r3,r17,16
811262b8:	180690fa 	slli	r3,r3,3
811262bc:	3022d77a 	srli	r17,r6,29
811262c0:	301090fa 	slli	r8,r6,3
811262c4:	10bf0044 	addi	r2,r2,-1023
811262c8:	88e2b03a 	or	r17,r17,r3
811262cc:	000f883a 	mov	r7,zero
811262d0:	a58cf03a 	xor	r6,r20,r22
811262d4:	3cc8b03a 	or	r4,r7,r19
811262d8:	a8abc83a 	sub	r21,r21,r2
811262dc:	008003c4 	movi	r2,15
811262e0:	3007883a 	mov	r3,r6
811262e4:	34c03fcc 	andi	r19,r6,255
811262e8:	11009036 	bltu	r2,r4,8112652c <__divdf3+0x324>
811262ec:	200890ba 	slli	r4,r4,2
811262f0:	00a044b4 	movhi	r2,33042
811262f4:	1098c104 	addi	r2,r2,25348
811262f8:	2089883a 	add	r4,r4,r2
811262fc:	20800017 	ldw	r2,0(r4)
81126300:	1000683a 	jmp	r2
81126304:	8112652c 	andhi	r4,r16,18836
81126308:	8112637c 	xorhi	r4,r16,18829
8112630c:	8112651c 	xori	r4,r16,18836
81126310:	81126370 	cmpltui	r4,r16,18829
81126314:	8112651c 	xori	r4,r16,18836
81126318:	811264f0 	cmpltui	r4,r16,18835
8112631c:	8112651c 	xori	r4,r16,18836
81126320:	81126370 	cmpltui	r4,r16,18829
81126324:	8112637c 	xorhi	r4,r16,18829
81126328:	8112637c 	xorhi	r4,r16,18829
8112632c:	811264f0 	cmpltui	r4,r16,18835
81126330:	81126370 	cmpltui	r4,r16,18829
81126334:	81126360 	cmpeqi	r4,r16,18829
81126338:	81126360 	cmpeqi	r4,r16,18829
8112633c:	81126360 	cmpeqi	r4,r16,18829
81126340:	81126810 	cmplti	r4,r16,18848
81126344:	2404b03a 	or	r2,r4,r16
81126348:	1000661e 	bne	r2,zero,811264e4 <__divdf3+0x2dc>
8112634c:	04c00204 	movi	r19,8
81126350:	0021883a 	mov	r16,zero
81126354:	0025883a 	mov	r18,zero
81126358:	02400084 	movi	r9,2
8112635c:	003fca06 	br	81126288 <__reset+0xfb106288>
81126360:	8023883a 	mov	r17,r16
81126364:	9011883a 	mov	r8,r18
81126368:	e02f883a 	mov	r23,fp
8112636c:	480f883a 	mov	r7,r9
81126370:	00800084 	movi	r2,2
81126374:	3881311e 	bne	r7,r2,8112683c <__divdf3+0x634>
81126378:	b827883a 	mov	r19,r23
8112637c:	98c0004c 	andi	r3,r19,1
81126380:	0081ffc4 	movi	r2,2047
81126384:	000b883a 	mov	r5,zero
81126388:	0025883a 	mov	r18,zero
8112638c:	1004953a 	slli	r2,r2,20
81126390:	18c03fcc 	andi	r3,r3,255
81126394:	04400434 	movhi	r17,16
81126398:	8c7fffc4 	addi	r17,r17,-1
8112639c:	180697fa 	slli	r3,r3,31
811263a0:	2c4a703a 	and	r5,r5,r17
811263a4:	288ab03a 	or	r5,r5,r2
811263a8:	28c6b03a 	or	r3,r5,r3
811263ac:	9005883a 	mov	r2,r18
811263b0:	dfc00d17 	ldw	ra,52(sp)
811263b4:	df000c17 	ldw	fp,48(sp)
811263b8:	ddc00b17 	ldw	r23,44(sp)
811263bc:	dd800a17 	ldw	r22,40(sp)
811263c0:	dd400917 	ldw	r21,36(sp)
811263c4:	dd000817 	ldw	r20,32(sp)
811263c8:	dcc00717 	ldw	r19,28(sp)
811263cc:	dc800617 	ldw	r18,24(sp)
811263d0:	dc400517 	ldw	r17,20(sp)
811263d4:	dc000417 	ldw	r16,16(sp)
811263d8:	dec00e04 	addi	sp,sp,56
811263dc:	f800283a 	ret
811263e0:	2404b03a 	or	r2,r4,r16
811263e4:	2027883a 	mov	r19,r4
811263e8:	10003926 	beq	r2,zero,811264d0 <__divdf3+0x2c8>
811263ec:	80012e26 	beq	r16,zero,811268a8 <__divdf3+0x6a0>
811263f0:	8009883a 	mov	r4,r16
811263f4:	d9800315 	stw	r6,12(sp)
811263f8:	d9c00215 	stw	r7,8(sp)
811263fc:	1111e440 	call	81111e44 <__clzsi2>
81126400:	d9800317 	ldw	r6,12(sp)
81126404:	d9c00217 	ldw	r7,8(sp)
81126408:	113ffd44 	addi	r4,r2,-11
8112640c:	00c00704 	movi	r3,28
81126410:	19012116 	blt	r3,r4,81126898 <__divdf3+0x690>
81126414:	00c00744 	movi	r3,29
81126418:	147ffe04 	addi	r17,r2,-8
8112641c:	1907c83a 	sub	r3,r3,r4
81126420:	8460983a 	sll	r16,r16,r17
81126424:	98c6d83a 	srl	r3,r19,r3
81126428:	9c64983a 	sll	r18,r19,r17
8112642c:	1c20b03a 	or	r16,r3,r16
81126430:	1080fcc4 	addi	r2,r2,1011
81126434:	00abc83a 	sub	r21,zero,r2
81126438:	0027883a 	mov	r19,zero
8112643c:	0013883a 	mov	r9,zero
81126440:	003f9106 	br	81126288 <__reset+0xfb106288>
81126444:	3446b03a 	or	r3,r6,r17
81126448:	18001f1e 	bne	r3,zero,811264c8 <__divdf3+0x2c0>
8112644c:	0023883a 	mov	r17,zero
81126450:	0011883a 	mov	r8,zero
81126454:	01c00084 	movi	r7,2
81126458:	003f9d06 	br	811262d0 <__reset+0xfb1062d0>
8112645c:	3446b03a 	or	r3,r6,r17
81126460:	18001526 	beq	r3,zero,811264b8 <__divdf3+0x2b0>
81126464:	88011b26 	beq	r17,zero,811268d4 <__divdf3+0x6cc>
81126468:	8809883a 	mov	r4,r17
8112646c:	d9800315 	stw	r6,12(sp)
81126470:	da400115 	stw	r9,4(sp)
81126474:	1111e440 	call	81111e44 <__clzsi2>
81126478:	d9800317 	ldw	r6,12(sp)
8112647c:	da400117 	ldw	r9,4(sp)
81126480:	113ffd44 	addi	r4,r2,-11
81126484:	00c00704 	movi	r3,28
81126488:	19010e16 	blt	r3,r4,811268c4 <__divdf3+0x6bc>
8112648c:	00c00744 	movi	r3,29
81126490:	123ffe04 	addi	r8,r2,-8
81126494:	1907c83a 	sub	r3,r3,r4
81126498:	8a22983a 	sll	r17,r17,r8
8112649c:	30c6d83a 	srl	r3,r6,r3
811264a0:	3210983a 	sll	r8,r6,r8
811264a4:	1c62b03a 	or	r17,r3,r17
811264a8:	1080fcc4 	addi	r2,r2,1011
811264ac:	0085c83a 	sub	r2,zero,r2
811264b0:	000f883a 	mov	r7,zero
811264b4:	003f8606 	br	811262d0 <__reset+0xfb1062d0>
811264b8:	0023883a 	mov	r17,zero
811264bc:	0011883a 	mov	r8,zero
811264c0:	01c00044 	movi	r7,1
811264c4:	003f8206 	br	811262d0 <__reset+0xfb1062d0>
811264c8:	01c000c4 	movi	r7,3
811264cc:	003f8006 	br	811262d0 <__reset+0xfb1062d0>
811264d0:	04c00104 	movi	r19,4
811264d4:	0021883a 	mov	r16,zero
811264d8:	0025883a 	mov	r18,zero
811264dc:	02400044 	movi	r9,1
811264e0:	003f6906 	br	81126288 <__reset+0xfb106288>
811264e4:	04c00304 	movi	r19,12
811264e8:	024000c4 	movi	r9,3
811264ec:	003f6606 	br	81126288 <__reset+0xfb106288>
811264f0:	01400434 	movhi	r5,16
811264f4:	0007883a 	mov	r3,zero
811264f8:	297fffc4 	addi	r5,r5,-1
811264fc:	04bfffc4 	movi	r18,-1
81126500:	0081ffc4 	movi	r2,2047
81126504:	003fa106 	br	8112638c <__reset+0xfb10638c>
81126508:	00c00044 	movi	r3,1
8112650c:	1887c83a 	sub	r3,r3,r2
81126510:	01000e04 	movi	r4,56
81126514:	20c1210e 	bge	r4,r3,8112699c <__divdf3+0x794>
81126518:	98c0004c 	andi	r3,r19,1
8112651c:	0005883a 	mov	r2,zero
81126520:	000b883a 	mov	r5,zero
81126524:	0025883a 	mov	r18,zero
81126528:	003f9806 	br	8112638c <__reset+0xfb10638c>
8112652c:	8c00fd36 	bltu	r17,r16,81126924 <__divdf3+0x71c>
81126530:	8440fb26 	beq	r16,r17,81126920 <__divdf3+0x718>
81126534:	8007883a 	mov	r3,r16
81126538:	ad7fffc4 	addi	r21,r21,-1
8112653c:	0021883a 	mov	r16,zero
81126540:	4004d63a 	srli	r2,r8,24
81126544:	8822923a 	slli	r17,r17,8
81126548:	1809883a 	mov	r4,r3
8112654c:	402c923a 	slli	r22,r8,8
81126550:	88b8b03a 	or	fp,r17,r2
81126554:	e028d43a 	srli	r20,fp,16
81126558:	d8c00015 	stw	r3,0(sp)
8112655c:	e5ffffcc 	andi	r23,fp,65535
81126560:	a00b883a 	mov	r5,r20
81126564:	112569c0 	call	8112569c <__udivsi3>
81126568:	d8c00017 	ldw	r3,0(sp)
8112656c:	a00b883a 	mov	r5,r20
81126570:	d8800315 	stw	r2,12(sp)
81126574:	1809883a 	mov	r4,r3
81126578:	11257000 	call	81125700 <__umodsi3>
8112657c:	d9800317 	ldw	r6,12(sp)
81126580:	1006943a 	slli	r3,r2,16
81126584:	9004d43a 	srli	r2,r18,16
81126588:	b9a3383a 	mul	r17,r23,r6
8112658c:	10c4b03a 	or	r2,r2,r3
81126590:	1440062e 	bgeu	r2,r17,811265ac <__divdf3+0x3a4>
81126594:	1705883a 	add	r2,r2,fp
81126598:	30ffffc4 	addi	r3,r6,-1
8112659c:	1700ee36 	bltu	r2,fp,81126958 <__divdf3+0x750>
811265a0:	1440ed2e 	bgeu	r2,r17,81126958 <__divdf3+0x750>
811265a4:	31bfff84 	addi	r6,r6,-2
811265a8:	1705883a 	add	r2,r2,fp
811265ac:	1463c83a 	sub	r17,r2,r17
811265b0:	a00b883a 	mov	r5,r20
811265b4:	8809883a 	mov	r4,r17
811265b8:	d9800315 	stw	r6,12(sp)
811265bc:	112569c0 	call	8112569c <__udivsi3>
811265c0:	a00b883a 	mov	r5,r20
811265c4:	8809883a 	mov	r4,r17
811265c8:	d8800215 	stw	r2,8(sp)
811265cc:	11257000 	call	81125700 <__umodsi3>
811265d0:	d9c00217 	ldw	r7,8(sp)
811265d4:	1004943a 	slli	r2,r2,16
811265d8:	94bfffcc 	andi	r18,r18,65535
811265dc:	b9d1383a 	mul	r8,r23,r7
811265e0:	90a4b03a 	or	r18,r18,r2
811265e4:	d9800317 	ldw	r6,12(sp)
811265e8:	9200062e 	bgeu	r18,r8,81126604 <__divdf3+0x3fc>
811265ec:	9725883a 	add	r18,r18,fp
811265f0:	38bfffc4 	addi	r2,r7,-1
811265f4:	9700d636 	bltu	r18,fp,81126950 <__divdf3+0x748>
811265f8:	9200d52e 	bgeu	r18,r8,81126950 <__divdf3+0x748>
811265fc:	39ffff84 	addi	r7,r7,-2
81126600:	9725883a 	add	r18,r18,fp
81126604:	3004943a 	slli	r2,r6,16
81126608:	b012d43a 	srli	r9,r22,16
8112660c:	b1bfffcc 	andi	r6,r22,65535
81126610:	11e2b03a 	or	r17,r2,r7
81126614:	8806d43a 	srli	r3,r17,16
81126618:	893fffcc 	andi	r4,r17,65535
8112661c:	218b383a 	mul	r5,r4,r6
81126620:	30c5383a 	mul	r2,r6,r3
81126624:	2249383a 	mul	r4,r4,r9
81126628:	280ed43a 	srli	r7,r5,16
8112662c:	9225c83a 	sub	r18,r18,r8
81126630:	2089883a 	add	r4,r4,r2
81126634:	3909883a 	add	r4,r7,r4
81126638:	1a47383a 	mul	r3,r3,r9
8112663c:	2080022e 	bgeu	r4,r2,81126648 <__divdf3+0x440>
81126640:	00800074 	movhi	r2,1
81126644:	1887883a 	add	r3,r3,r2
81126648:	2004d43a 	srli	r2,r4,16
8112664c:	2008943a 	slli	r4,r4,16
81126650:	297fffcc 	andi	r5,r5,65535
81126654:	10c7883a 	add	r3,r2,r3
81126658:	2149883a 	add	r4,r4,r5
8112665c:	90c0a536 	bltu	r18,r3,811268f4 <__divdf3+0x6ec>
81126660:	90c0bf26 	beq	r18,r3,81126960 <__divdf3+0x758>
81126664:	90c7c83a 	sub	r3,r18,r3
81126668:	810fc83a 	sub	r7,r16,r4
8112666c:	81e5803a 	cmpltu	r18,r16,r7
81126670:	1ca5c83a 	sub	r18,r3,r18
81126674:	e480c126 	beq	fp,r18,8112697c <__divdf3+0x774>
81126678:	a00b883a 	mov	r5,r20
8112667c:	9009883a 	mov	r4,r18
81126680:	d9800315 	stw	r6,12(sp)
81126684:	d9c00215 	stw	r7,8(sp)
81126688:	da400115 	stw	r9,4(sp)
8112668c:	112569c0 	call	8112569c <__udivsi3>
81126690:	a00b883a 	mov	r5,r20
81126694:	9009883a 	mov	r4,r18
81126698:	d8800015 	stw	r2,0(sp)
8112669c:	11257000 	call	81125700 <__umodsi3>
811266a0:	d9c00217 	ldw	r7,8(sp)
811266a4:	da000017 	ldw	r8,0(sp)
811266a8:	1006943a 	slli	r3,r2,16
811266ac:	3804d43a 	srli	r2,r7,16
811266b0:	ba21383a 	mul	r16,r23,r8
811266b4:	d9800317 	ldw	r6,12(sp)
811266b8:	10c4b03a 	or	r2,r2,r3
811266bc:	da400117 	ldw	r9,4(sp)
811266c0:	1400062e 	bgeu	r2,r16,811266dc <__divdf3+0x4d4>
811266c4:	1705883a 	add	r2,r2,fp
811266c8:	40ffffc4 	addi	r3,r8,-1
811266cc:	1700ad36 	bltu	r2,fp,81126984 <__divdf3+0x77c>
811266d0:	1400ac2e 	bgeu	r2,r16,81126984 <__divdf3+0x77c>
811266d4:	423fff84 	addi	r8,r8,-2
811266d8:	1705883a 	add	r2,r2,fp
811266dc:	1421c83a 	sub	r16,r2,r16
811266e0:	a00b883a 	mov	r5,r20
811266e4:	8009883a 	mov	r4,r16
811266e8:	d9800315 	stw	r6,12(sp)
811266ec:	d9c00215 	stw	r7,8(sp)
811266f0:	da000015 	stw	r8,0(sp)
811266f4:	da400115 	stw	r9,4(sp)
811266f8:	112569c0 	call	8112569c <__udivsi3>
811266fc:	8009883a 	mov	r4,r16
81126700:	a00b883a 	mov	r5,r20
81126704:	1025883a 	mov	r18,r2
81126708:	11257000 	call	81125700 <__umodsi3>
8112670c:	d9c00217 	ldw	r7,8(sp)
81126710:	1004943a 	slli	r2,r2,16
81126714:	bcaf383a 	mul	r23,r23,r18
81126718:	393fffcc 	andi	r4,r7,65535
8112671c:	2088b03a 	or	r4,r4,r2
81126720:	d9800317 	ldw	r6,12(sp)
81126724:	da000017 	ldw	r8,0(sp)
81126728:	da400117 	ldw	r9,4(sp)
8112672c:	25c0062e 	bgeu	r4,r23,81126748 <__divdf3+0x540>
81126730:	2709883a 	add	r4,r4,fp
81126734:	90bfffc4 	addi	r2,r18,-1
81126738:	27009436 	bltu	r4,fp,8112698c <__divdf3+0x784>
8112673c:	25c0932e 	bgeu	r4,r23,8112698c <__divdf3+0x784>
81126740:	94bfff84 	addi	r18,r18,-2
81126744:	2709883a 	add	r4,r4,fp
81126748:	4004943a 	slli	r2,r8,16
8112674c:	25efc83a 	sub	r23,r4,r23
81126750:	1490b03a 	or	r8,r2,r18
81126754:	4008d43a 	srli	r4,r8,16
81126758:	40ffffcc 	andi	r3,r8,65535
8112675c:	30c5383a 	mul	r2,r6,r3
81126760:	1a47383a 	mul	r3,r3,r9
81126764:	310d383a 	mul	r6,r6,r4
81126768:	100ad43a 	srli	r5,r2,16
8112676c:	4913383a 	mul	r9,r9,r4
81126770:	1987883a 	add	r3,r3,r6
81126774:	28c7883a 	add	r3,r5,r3
81126778:	1980022e 	bgeu	r3,r6,81126784 <__divdf3+0x57c>
8112677c:	01000074 	movhi	r4,1
81126780:	4913883a 	add	r9,r9,r4
81126784:	1808d43a 	srli	r4,r3,16
81126788:	1806943a 	slli	r3,r3,16
8112678c:	10bfffcc 	andi	r2,r2,65535
81126790:	2253883a 	add	r9,r4,r9
81126794:	1887883a 	add	r3,r3,r2
81126798:	ba403836 	bltu	r23,r9,8112687c <__divdf3+0x674>
8112679c:	ba403626 	beq	r23,r9,81126878 <__divdf3+0x670>
811267a0:	42000054 	ori	r8,r8,1
811267a4:	a880ffc4 	addi	r2,r21,1023
811267a8:	00bf570e 	bge	zero,r2,81126508 <__reset+0xfb106508>
811267ac:	40c001cc 	andi	r3,r8,7
811267b0:	18000726 	beq	r3,zero,811267d0 <__divdf3+0x5c8>
811267b4:	40c003cc 	andi	r3,r8,15
811267b8:	01000104 	movi	r4,4
811267bc:	19000426 	beq	r3,r4,811267d0 <__divdf3+0x5c8>
811267c0:	4107883a 	add	r3,r8,r4
811267c4:	1a11803a 	cmpltu	r8,r3,r8
811267c8:	8a23883a 	add	r17,r17,r8
811267cc:	1811883a 	mov	r8,r3
811267d0:	88c0402c 	andhi	r3,r17,256
811267d4:	18000426 	beq	r3,zero,811267e8 <__divdf3+0x5e0>
811267d8:	00ffc034 	movhi	r3,65280
811267dc:	18ffffc4 	addi	r3,r3,-1
811267e0:	a8810004 	addi	r2,r21,1024
811267e4:	88e2703a 	and	r17,r17,r3
811267e8:	00c1ff84 	movi	r3,2046
811267ec:	18bee316 	blt	r3,r2,8112637c <__reset+0xfb10637c>
811267f0:	8824977a 	slli	r18,r17,29
811267f4:	4010d0fa 	srli	r8,r8,3
811267f8:	8822927a 	slli	r17,r17,9
811267fc:	1081ffcc 	andi	r2,r2,2047
81126800:	9224b03a 	or	r18,r18,r8
81126804:	880ad33a 	srli	r5,r17,12
81126808:	98c0004c 	andi	r3,r19,1
8112680c:	003edf06 	br	8112638c <__reset+0xfb10638c>
81126810:	8080022c 	andhi	r2,r16,8
81126814:	10001226 	beq	r2,zero,81126860 <__divdf3+0x658>
81126818:	8880022c 	andhi	r2,r17,8
8112681c:	1000101e 	bne	r2,zero,81126860 <__divdf3+0x658>
81126820:	00800434 	movhi	r2,16
81126824:	89400234 	orhi	r5,r17,8
81126828:	10bfffc4 	addi	r2,r2,-1
8112682c:	b007883a 	mov	r3,r22
81126830:	288a703a 	and	r5,r5,r2
81126834:	4025883a 	mov	r18,r8
81126838:	003f3106 	br	81126500 <__reset+0xfb106500>
8112683c:	008000c4 	movi	r2,3
81126840:	3880a626 	beq	r7,r2,81126adc <__divdf3+0x8d4>
81126844:	00800044 	movi	r2,1
81126848:	3880521e 	bne	r7,r2,81126994 <__divdf3+0x78c>
8112684c:	b807883a 	mov	r3,r23
81126850:	0005883a 	mov	r2,zero
81126854:	000b883a 	mov	r5,zero
81126858:	0025883a 	mov	r18,zero
8112685c:	003ecb06 	br	8112638c <__reset+0xfb10638c>
81126860:	00800434 	movhi	r2,16
81126864:	81400234 	orhi	r5,r16,8
81126868:	10bfffc4 	addi	r2,r2,-1
8112686c:	a007883a 	mov	r3,r20
81126870:	288a703a 	and	r5,r5,r2
81126874:	003f2206 	br	81126500 <__reset+0xfb106500>
81126878:	183fca26 	beq	r3,zero,811267a4 <__reset+0xfb1067a4>
8112687c:	e5ef883a 	add	r23,fp,r23
81126880:	40bfffc4 	addi	r2,r8,-1
81126884:	bf00392e 	bgeu	r23,fp,8112696c <__divdf3+0x764>
81126888:	1011883a 	mov	r8,r2
8112688c:	ba7fc41e 	bne	r23,r9,811267a0 <__reset+0xfb1067a0>
81126890:	b0ffc31e 	bne	r22,r3,811267a0 <__reset+0xfb1067a0>
81126894:	003fc306 	br	811267a4 <__reset+0xfb1067a4>
81126898:	143ff604 	addi	r16,r2,-40
8112689c:	9c20983a 	sll	r16,r19,r16
811268a0:	0025883a 	mov	r18,zero
811268a4:	003ee206 	br	81126430 <__reset+0xfb106430>
811268a8:	d9800315 	stw	r6,12(sp)
811268ac:	d9c00215 	stw	r7,8(sp)
811268b0:	1111e440 	call	81111e44 <__clzsi2>
811268b4:	10800804 	addi	r2,r2,32
811268b8:	d9c00217 	ldw	r7,8(sp)
811268bc:	d9800317 	ldw	r6,12(sp)
811268c0:	003ed106 	br	81126408 <__reset+0xfb106408>
811268c4:	147ff604 	addi	r17,r2,-40
811268c8:	3462983a 	sll	r17,r6,r17
811268cc:	0011883a 	mov	r8,zero
811268d0:	003ef506 	br	811264a8 <__reset+0xfb1064a8>
811268d4:	3009883a 	mov	r4,r6
811268d8:	d9800315 	stw	r6,12(sp)
811268dc:	da400115 	stw	r9,4(sp)
811268e0:	1111e440 	call	81111e44 <__clzsi2>
811268e4:	10800804 	addi	r2,r2,32
811268e8:	da400117 	ldw	r9,4(sp)
811268ec:	d9800317 	ldw	r6,12(sp)
811268f0:	003ee306 	br	81126480 <__reset+0xfb106480>
811268f4:	85a1883a 	add	r16,r16,r22
811268f8:	8585803a 	cmpltu	r2,r16,r22
811268fc:	1705883a 	add	r2,r2,fp
81126900:	14a5883a 	add	r18,r2,r18
81126904:	88bfffc4 	addi	r2,r17,-1
81126908:	e4800c2e 	bgeu	fp,r18,8112693c <__divdf3+0x734>
8112690c:	90c03e36 	bltu	r18,r3,81126a08 <__divdf3+0x800>
81126910:	1c806926 	beq	r3,r18,81126ab8 <__divdf3+0x8b0>
81126914:	90c7c83a 	sub	r3,r18,r3
81126918:	1023883a 	mov	r17,r2
8112691c:	003f5206 	br	81126668 <__reset+0xfb106668>
81126920:	923f0436 	bltu	r18,r8,81126534 <__reset+0xfb106534>
81126924:	800897fa 	slli	r4,r16,31
81126928:	9004d07a 	srli	r2,r18,1
8112692c:	8006d07a 	srli	r3,r16,1
81126930:	902097fa 	slli	r16,r18,31
81126934:	20a4b03a 	or	r18,r4,r2
81126938:	003f0106 	br	81126540 <__reset+0xfb106540>
8112693c:	e4bff51e 	bne	fp,r18,81126914 <__reset+0xfb106914>
81126940:	85bff22e 	bgeu	r16,r22,8112690c <__reset+0xfb10690c>
81126944:	e0c7c83a 	sub	r3,fp,r3
81126948:	1023883a 	mov	r17,r2
8112694c:	003f4606 	br	81126668 <__reset+0xfb106668>
81126950:	100f883a 	mov	r7,r2
81126954:	003f2b06 	br	81126604 <__reset+0xfb106604>
81126958:	180d883a 	mov	r6,r3
8112695c:	003f1306 	br	811265ac <__reset+0xfb1065ac>
81126960:	813fe436 	bltu	r16,r4,811268f4 <__reset+0xfb1068f4>
81126964:	0007883a 	mov	r3,zero
81126968:	003f3f06 	br	81126668 <__reset+0xfb106668>
8112696c:	ba402c36 	bltu	r23,r9,81126a20 <__divdf3+0x818>
81126970:	4dc05426 	beq	r9,r23,81126ac4 <__divdf3+0x8bc>
81126974:	1011883a 	mov	r8,r2
81126978:	003f8906 	br	811267a0 <__reset+0xfb1067a0>
8112697c:	023fffc4 	movi	r8,-1
81126980:	003f8806 	br	811267a4 <__reset+0xfb1067a4>
81126984:	1811883a 	mov	r8,r3
81126988:	003f5406 	br	811266dc <__reset+0xfb1066dc>
8112698c:	1025883a 	mov	r18,r2
81126990:	003f6d06 	br	81126748 <__reset+0xfb106748>
81126994:	b827883a 	mov	r19,r23
81126998:	003f8206 	br	811267a4 <__reset+0xfb1067a4>
8112699c:	010007c4 	movi	r4,31
811269a0:	20c02616 	blt	r4,r3,81126a3c <__divdf3+0x834>
811269a4:	00800804 	movi	r2,32
811269a8:	10c5c83a 	sub	r2,r2,r3
811269ac:	888a983a 	sll	r5,r17,r2
811269b0:	40c8d83a 	srl	r4,r8,r3
811269b4:	4084983a 	sll	r2,r8,r2
811269b8:	88e2d83a 	srl	r17,r17,r3
811269bc:	2906b03a 	or	r3,r5,r4
811269c0:	1004c03a 	cmpne	r2,r2,zero
811269c4:	1886b03a 	or	r3,r3,r2
811269c8:	188001cc 	andi	r2,r3,7
811269cc:	10000726 	beq	r2,zero,811269ec <__divdf3+0x7e4>
811269d0:	188003cc 	andi	r2,r3,15
811269d4:	01000104 	movi	r4,4
811269d8:	11000426 	beq	r2,r4,811269ec <__divdf3+0x7e4>
811269dc:	1805883a 	mov	r2,r3
811269e0:	10c00104 	addi	r3,r2,4
811269e4:	1885803a 	cmpltu	r2,r3,r2
811269e8:	88a3883a 	add	r17,r17,r2
811269ec:	8880202c 	andhi	r2,r17,128
811269f0:	10002726 	beq	r2,zero,81126a90 <__divdf3+0x888>
811269f4:	98c0004c 	andi	r3,r19,1
811269f8:	00800044 	movi	r2,1
811269fc:	000b883a 	mov	r5,zero
81126a00:	0025883a 	mov	r18,zero
81126a04:	003e6106 	br	8112638c <__reset+0xfb10638c>
81126a08:	85a1883a 	add	r16,r16,r22
81126a0c:	8585803a 	cmpltu	r2,r16,r22
81126a10:	1705883a 	add	r2,r2,fp
81126a14:	14a5883a 	add	r18,r2,r18
81126a18:	8c7fff84 	addi	r17,r17,-2
81126a1c:	003f1106 	br	81126664 <__reset+0xfb106664>
81126a20:	b589883a 	add	r4,r22,r22
81126a24:	25ad803a 	cmpltu	r22,r4,r22
81126a28:	b739883a 	add	fp,r22,fp
81126a2c:	40bfff84 	addi	r2,r8,-2
81126a30:	bf2f883a 	add	r23,r23,fp
81126a34:	202d883a 	mov	r22,r4
81126a38:	003f9306 	br	81126888 <__reset+0xfb106888>
81126a3c:	013ff844 	movi	r4,-31
81126a40:	2085c83a 	sub	r2,r4,r2
81126a44:	8888d83a 	srl	r4,r17,r2
81126a48:	00800804 	movi	r2,32
81126a4c:	18802126 	beq	r3,r2,81126ad4 <__divdf3+0x8cc>
81126a50:	00801004 	movi	r2,64
81126a54:	10c5c83a 	sub	r2,r2,r3
81126a58:	8884983a 	sll	r2,r17,r2
81126a5c:	1204b03a 	or	r2,r2,r8
81126a60:	1004c03a 	cmpne	r2,r2,zero
81126a64:	2084b03a 	or	r2,r4,r2
81126a68:	144001cc 	andi	r17,r2,7
81126a6c:	88000d1e 	bne	r17,zero,81126aa4 <__divdf3+0x89c>
81126a70:	000b883a 	mov	r5,zero
81126a74:	1024d0fa 	srli	r18,r2,3
81126a78:	98c0004c 	andi	r3,r19,1
81126a7c:	0005883a 	mov	r2,zero
81126a80:	9464b03a 	or	r18,r18,r17
81126a84:	003e4106 	br	8112638c <__reset+0xfb10638c>
81126a88:	1007883a 	mov	r3,r2
81126a8c:	0023883a 	mov	r17,zero
81126a90:	880a927a 	slli	r5,r17,9
81126a94:	1805883a 	mov	r2,r3
81126a98:	8822977a 	slli	r17,r17,29
81126a9c:	280ad33a 	srli	r5,r5,12
81126aa0:	003ff406 	br	81126a74 <__reset+0xfb106a74>
81126aa4:	10c003cc 	andi	r3,r2,15
81126aa8:	01000104 	movi	r4,4
81126aac:	193ff626 	beq	r3,r4,81126a88 <__reset+0xfb106a88>
81126ab0:	0023883a 	mov	r17,zero
81126ab4:	003fca06 	br	811269e0 <__reset+0xfb1069e0>
81126ab8:	813fd336 	bltu	r16,r4,81126a08 <__reset+0xfb106a08>
81126abc:	1023883a 	mov	r17,r2
81126ac0:	003fa806 	br	81126964 <__reset+0xfb106964>
81126ac4:	b0ffd636 	bltu	r22,r3,81126a20 <__reset+0xfb106a20>
81126ac8:	1011883a 	mov	r8,r2
81126acc:	b0ff341e 	bne	r22,r3,811267a0 <__reset+0xfb1067a0>
81126ad0:	003f3406 	br	811267a4 <__reset+0xfb1067a4>
81126ad4:	0005883a 	mov	r2,zero
81126ad8:	003fe006 	br	81126a5c <__reset+0xfb106a5c>
81126adc:	00800434 	movhi	r2,16
81126ae0:	89400234 	orhi	r5,r17,8
81126ae4:	10bfffc4 	addi	r2,r2,-1
81126ae8:	b807883a 	mov	r3,r23
81126aec:	288a703a 	and	r5,r5,r2
81126af0:	4025883a 	mov	r18,r8
81126af4:	003e8206 	br	81126500 <__reset+0xfb106500>

81126af8 <__eqdf2>:
81126af8:	2804d53a 	srli	r2,r5,20
81126afc:	3806d53a 	srli	r3,r7,20
81126b00:	02000434 	movhi	r8,16
81126b04:	423fffc4 	addi	r8,r8,-1
81126b08:	1081ffcc 	andi	r2,r2,2047
81126b0c:	0281ffc4 	movi	r10,2047
81126b10:	2a12703a 	and	r9,r5,r8
81126b14:	18c1ffcc 	andi	r3,r3,2047
81126b18:	3a10703a 	and	r8,r7,r8
81126b1c:	280ad7fa 	srli	r5,r5,31
81126b20:	380ed7fa 	srli	r7,r7,31
81126b24:	12801026 	beq	r2,r10,81126b68 <__eqdf2+0x70>
81126b28:	0281ffc4 	movi	r10,2047
81126b2c:	1a800a26 	beq	r3,r10,81126b58 <__eqdf2+0x60>
81126b30:	10c00226 	beq	r2,r3,81126b3c <__eqdf2+0x44>
81126b34:	00800044 	movi	r2,1
81126b38:	f800283a 	ret
81126b3c:	4a3ffd1e 	bne	r9,r8,81126b34 <__reset+0xfb106b34>
81126b40:	21bffc1e 	bne	r4,r6,81126b34 <__reset+0xfb106b34>
81126b44:	29c00c26 	beq	r5,r7,81126b78 <__eqdf2+0x80>
81126b48:	103ffa1e 	bne	r2,zero,81126b34 <__reset+0xfb106b34>
81126b4c:	2244b03a 	or	r2,r4,r9
81126b50:	1004c03a 	cmpne	r2,r2,zero
81126b54:	f800283a 	ret
81126b58:	3214b03a 	or	r10,r6,r8
81126b5c:	503ff426 	beq	r10,zero,81126b30 <__reset+0xfb106b30>
81126b60:	00800044 	movi	r2,1
81126b64:	f800283a 	ret
81126b68:	2254b03a 	or	r10,r4,r9
81126b6c:	503fee26 	beq	r10,zero,81126b28 <__reset+0xfb106b28>
81126b70:	00800044 	movi	r2,1
81126b74:	f800283a 	ret
81126b78:	0005883a 	mov	r2,zero
81126b7c:	f800283a 	ret

81126b80 <__gedf2>:
81126b80:	2804d53a 	srli	r2,r5,20
81126b84:	3806d53a 	srli	r3,r7,20
81126b88:	02000434 	movhi	r8,16
81126b8c:	423fffc4 	addi	r8,r8,-1
81126b90:	1081ffcc 	andi	r2,r2,2047
81126b94:	0241ffc4 	movi	r9,2047
81126b98:	2a14703a 	and	r10,r5,r8
81126b9c:	18c1ffcc 	andi	r3,r3,2047
81126ba0:	3a10703a 	and	r8,r7,r8
81126ba4:	280ad7fa 	srli	r5,r5,31
81126ba8:	380ed7fa 	srli	r7,r7,31
81126bac:	12401d26 	beq	r2,r9,81126c24 <__gedf2+0xa4>
81126bb0:	0241ffc4 	movi	r9,2047
81126bb4:	1a401226 	beq	r3,r9,81126c00 <__gedf2+0x80>
81126bb8:	1000081e 	bne	r2,zero,81126bdc <__gedf2+0x5c>
81126bbc:	2296b03a 	or	r11,r4,r10
81126bc0:	5813003a 	cmpeq	r9,r11,zero
81126bc4:	1800091e 	bne	r3,zero,81126bec <__gedf2+0x6c>
81126bc8:	3218b03a 	or	r12,r6,r8
81126bcc:	6000071e 	bne	r12,zero,81126bec <__gedf2+0x6c>
81126bd0:	0005883a 	mov	r2,zero
81126bd4:	5800101e 	bne	r11,zero,81126c18 <__gedf2+0x98>
81126bd8:	f800283a 	ret
81126bdc:	18000c1e 	bne	r3,zero,81126c10 <__gedf2+0x90>
81126be0:	3212b03a 	or	r9,r6,r8
81126be4:	48000c26 	beq	r9,zero,81126c18 <__gedf2+0x98>
81126be8:	0013883a 	mov	r9,zero
81126bec:	39c03fcc 	andi	r7,r7,255
81126bf0:	48000826 	beq	r9,zero,81126c14 <__gedf2+0x94>
81126bf4:	38000926 	beq	r7,zero,81126c1c <__gedf2+0x9c>
81126bf8:	00800044 	movi	r2,1
81126bfc:	f800283a 	ret
81126c00:	3212b03a 	or	r9,r6,r8
81126c04:	483fec26 	beq	r9,zero,81126bb8 <__reset+0xfb106bb8>
81126c08:	00bfff84 	movi	r2,-2
81126c0c:	f800283a 	ret
81126c10:	39c03fcc 	andi	r7,r7,255
81126c14:	29c00626 	beq	r5,r7,81126c30 <__gedf2+0xb0>
81126c18:	283ff726 	beq	r5,zero,81126bf8 <__reset+0xfb106bf8>
81126c1c:	00bfffc4 	movi	r2,-1
81126c20:	f800283a 	ret
81126c24:	2292b03a 	or	r9,r4,r10
81126c28:	483fe126 	beq	r9,zero,81126bb0 <__reset+0xfb106bb0>
81126c2c:	003ff606 	br	81126c08 <__reset+0xfb106c08>
81126c30:	18bff916 	blt	r3,r2,81126c18 <__reset+0xfb106c18>
81126c34:	10c00316 	blt	r2,r3,81126c44 <__gedf2+0xc4>
81126c38:	42bff736 	bltu	r8,r10,81126c18 <__reset+0xfb106c18>
81126c3c:	52000326 	beq	r10,r8,81126c4c <__gedf2+0xcc>
81126c40:	5200042e 	bgeu	r10,r8,81126c54 <__gedf2+0xd4>
81126c44:	283fec1e 	bne	r5,zero,81126bf8 <__reset+0xfb106bf8>
81126c48:	003ff406 	br	81126c1c <__reset+0xfb106c1c>
81126c4c:	313ff236 	bltu	r6,r4,81126c18 <__reset+0xfb106c18>
81126c50:	21bffc36 	bltu	r4,r6,81126c44 <__reset+0xfb106c44>
81126c54:	0005883a 	mov	r2,zero
81126c58:	f800283a 	ret

81126c5c <__ledf2>:
81126c5c:	2804d53a 	srli	r2,r5,20
81126c60:	3810d53a 	srli	r8,r7,20
81126c64:	00c00434 	movhi	r3,16
81126c68:	18ffffc4 	addi	r3,r3,-1
81126c6c:	1081ffcc 	andi	r2,r2,2047
81126c70:	0241ffc4 	movi	r9,2047
81126c74:	28d4703a 	and	r10,r5,r3
81126c78:	4201ffcc 	andi	r8,r8,2047
81126c7c:	38c6703a 	and	r3,r7,r3
81126c80:	280ad7fa 	srli	r5,r5,31
81126c84:	380ed7fa 	srli	r7,r7,31
81126c88:	12401f26 	beq	r2,r9,81126d08 <__ledf2+0xac>
81126c8c:	0241ffc4 	movi	r9,2047
81126c90:	42401426 	beq	r8,r9,81126ce4 <__ledf2+0x88>
81126c94:	1000091e 	bne	r2,zero,81126cbc <__ledf2+0x60>
81126c98:	2296b03a 	or	r11,r4,r10
81126c9c:	5813003a 	cmpeq	r9,r11,zero
81126ca0:	29403fcc 	andi	r5,r5,255
81126ca4:	40000a1e 	bne	r8,zero,81126cd0 <__ledf2+0x74>
81126ca8:	30d8b03a 	or	r12,r6,r3
81126cac:	6000081e 	bne	r12,zero,81126cd0 <__ledf2+0x74>
81126cb0:	0005883a 	mov	r2,zero
81126cb4:	5800111e 	bne	r11,zero,81126cfc <__ledf2+0xa0>
81126cb8:	f800283a 	ret
81126cbc:	29403fcc 	andi	r5,r5,255
81126cc0:	40000c1e 	bne	r8,zero,81126cf4 <__ledf2+0x98>
81126cc4:	30d2b03a 	or	r9,r6,r3
81126cc8:	48000c26 	beq	r9,zero,81126cfc <__ledf2+0xa0>
81126ccc:	0013883a 	mov	r9,zero
81126cd0:	39c03fcc 	andi	r7,r7,255
81126cd4:	48000826 	beq	r9,zero,81126cf8 <__ledf2+0x9c>
81126cd8:	38001126 	beq	r7,zero,81126d20 <__ledf2+0xc4>
81126cdc:	00800044 	movi	r2,1
81126ce0:	f800283a 	ret
81126ce4:	30d2b03a 	or	r9,r6,r3
81126ce8:	483fea26 	beq	r9,zero,81126c94 <__reset+0xfb106c94>
81126cec:	00800084 	movi	r2,2
81126cf0:	f800283a 	ret
81126cf4:	39c03fcc 	andi	r7,r7,255
81126cf8:	39400726 	beq	r7,r5,81126d18 <__ledf2+0xbc>
81126cfc:	2800081e 	bne	r5,zero,81126d20 <__ledf2+0xc4>
81126d00:	00800044 	movi	r2,1
81126d04:	f800283a 	ret
81126d08:	2292b03a 	or	r9,r4,r10
81126d0c:	483fdf26 	beq	r9,zero,81126c8c <__reset+0xfb106c8c>
81126d10:	00800084 	movi	r2,2
81126d14:	f800283a 	ret
81126d18:	4080030e 	bge	r8,r2,81126d28 <__ledf2+0xcc>
81126d1c:	383fef26 	beq	r7,zero,81126cdc <__reset+0xfb106cdc>
81126d20:	00bfffc4 	movi	r2,-1
81126d24:	f800283a 	ret
81126d28:	123feb16 	blt	r2,r8,81126cd8 <__reset+0xfb106cd8>
81126d2c:	1abff336 	bltu	r3,r10,81126cfc <__reset+0xfb106cfc>
81126d30:	50c00326 	beq	r10,r3,81126d40 <__ledf2+0xe4>
81126d34:	50c0042e 	bgeu	r10,r3,81126d48 <__ledf2+0xec>
81126d38:	283fe81e 	bne	r5,zero,81126cdc <__reset+0xfb106cdc>
81126d3c:	003ff806 	br	81126d20 <__reset+0xfb106d20>
81126d40:	313fee36 	bltu	r6,r4,81126cfc <__reset+0xfb106cfc>
81126d44:	21bffc36 	bltu	r4,r6,81126d38 <__reset+0xfb106d38>
81126d48:	0005883a 	mov	r2,zero
81126d4c:	f800283a 	ret

81126d50 <__subdf3>:
81126d50:	02000434 	movhi	r8,16
81126d54:	423fffc4 	addi	r8,r8,-1
81126d58:	defffb04 	addi	sp,sp,-20
81126d5c:	2a14703a 	and	r10,r5,r8
81126d60:	3812d53a 	srli	r9,r7,20
81126d64:	3a10703a 	and	r8,r7,r8
81126d68:	de00012e 	bgeu	sp,et,81126d70 <__subdf3+0x20>
81126d6c:	003b68fa 	trap	3
81126d70:	2006d77a 	srli	r3,r4,29
81126d74:	3004d77a 	srli	r2,r6,29
81126d78:	dc000015 	stw	r16,0(sp)
81126d7c:	501490fa 	slli	r10,r10,3
81126d80:	2820d53a 	srli	r16,r5,20
81126d84:	401090fa 	slli	r8,r8,3
81126d88:	dc800215 	stw	r18,8(sp)
81126d8c:	dc400115 	stw	r17,4(sp)
81126d90:	dfc00415 	stw	ra,16(sp)
81126d94:	202290fa 	slli	r17,r4,3
81126d98:	dcc00315 	stw	r19,12(sp)
81126d9c:	4a41ffcc 	andi	r9,r9,2047
81126da0:	0101ffc4 	movi	r4,2047
81126da4:	2824d7fa 	srli	r18,r5,31
81126da8:	8401ffcc 	andi	r16,r16,2047
81126dac:	50c6b03a 	or	r3,r10,r3
81126db0:	380ed7fa 	srli	r7,r7,31
81126db4:	408ab03a 	or	r5,r8,r2
81126db8:	300c90fa 	slli	r6,r6,3
81126dbc:	49009626 	beq	r9,r4,81127018 <__subdf3+0x2c8>
81126dc0:	39c0005c 	xori	r7,r7,1
81126dc4:	8245c83a 	sub	r2,r16,r9
81126dc8:	3c807426 	beq	r7,r18,81126f9c <__subdf3+0x24c>
81126dcc:	0080af0e 	bge	zero,r2,8112708c <__subdf3+0x33c>
81126dd0:	48002a1e 	bne	r9,zero,81126e7c <__subdf3+0x12c>
81126dd4:	2988b03a 	or	r4,r5,r6
81126dd8:	20009a1e 	bne	r4,zero,81127044 <__subdf3+0x2f4>
81126ddc:	888001cc 	andi	r2,r17,7
81126de0:	10000726 	beq	r2,zero,81126e00 <__subdf3+0xb0>
81126de4:	888003cc 	andi	r2,r17,15
81126de8:	01000104 	movi	r4,4
81126dec:	11000426 	beq	r2,r4,81126e00 <__subdf3+0xb0>
81126df0:	890b883a 	add	r5,r17,r4
81126df4:	2c63803a 	cmpltu	r17,r5,r17
81126df8:	1c47883a 	add	r3,r3,r17
81126dfc:	2823883a 	mov	r17,r5
81126e00:	1880202c 	andhi	r2,r3,128
81126e04:	10005926 	beq	r2,zero,81126f6c <__subdf3+0x21c>
81126e08:	84000044 	addi	r16,r16,1
81126e0c:	0081ffc4 	movi	r2,2047
81126e10:	8080be26 	beq	r16,r2,8112710c <__subdf3+0x3bc>
81126e14:	017fe034 	movhi	r5,65408
81126e18:	297fffc4 	addi	r5,r5,-1
81126e1c:	1946703a 	and	r3,r3,r5
81126e20:	1804977a 	slli	r2,r3,29
81126e24:	1806927a 	slli	r3,r3,9
81126e28:	8822d0fa 	srli	r17,r17,3
81126e2c:	8401ffcc 	andi	r16,r16,2047
81126e30:	180ad33a 	srli	r5,r3,12
81126e34:	9100004c 	andi	r4,r18,1
81126e38:	1444b03a 	or	r2,r2,r17
81126e3c:	80c1ffcc 	andi	r3,r16,2047
81126e40:	1820953a 	slli	r16,r3,20
81126e44:	20c03fcc 	andi	r3,r4,255
81126e48:	180897fa 	slli	r4,r3,31
81126e4c:	00c00434 	movhi	r3,16
81126e50:	18ffffc4 	addi	r3,r3,-1
81126e54:	28c6703a 	and	r3,r5,r3
81126e58:	1c06b03a 	or	r3,r3,r16
81126e5c:	1906b03a 	or	r3,r3,r4
81126e60:	dfc00417 	ldw	ra,16(sp)
81126e64:	dcc00317 	ldw	r19,12(sp)
81126e68:	dc800217 	ldw	r18,8(sp)
81126e6c:	dc400117 	ldw	r17,4(sp)
81126e70:	dc000017 	ldw	r16,0(sp)
81126e74:	dec00504 	addi	sp,sp,20
81126e78:	f800283a 	ret
81126e7c:	0101ffc4 	movi	r4,2047
81126e80:	813fd626 	beq	r16,r4,81126ddc <__reset+0xfb106ddc>
81126e84:	29402034 	orhi	r5,r5,128
81126e88:	01000e04 	movi	r4,56
81126e8c:	2080a316 	blt	r4,r2,8112711c <__subdf3+0x3cc>
81126e90:	010007c4 	movi	r4,31
81126e94:	2080c616 	blt	r4,r2,811271b0 <__subdf3+0x460>
81126e98:	01000804 	movi	r4,32
81126e9c:	2089c83a 	sub	r4,r4,r2
81126ea0:	2910983a 	sll	r8,r5,r4
81126ea4:	308ed83a 	srl	r7,r6,r2
81126ea8:	3108983a 	sll	r4,r6,r4
81126eac:	2884d83a 	srl	r2,r5,r2
81126eb0:	41ccb03a 	or	r6,r8,r7
81126eb4:	2008c03a 	cmpne	r4,r4,zero
81126eb8:	310cb03a 	or	r6,r6,r4
81126ebc:	898dc83a 	sub	r6,r17,r6
81126ec0:	89a3803a 	cmpltu	r17,r17,r6
81126ec4:	1887c83a 	sub	r3,r3,r2
81126ec8:	1c47c83a 	sub	r3,r3,r17
81126ecc:	3023883a 	mov	r17,r6
81126ed0:	1880202c 	andhi	r2,r3,128
81126ed4:	10002326 	beq	r2,zero,81126f64 <__subdf3+0x214>
81126ed8:	04c02034 	movhi	r19,128
81126edc:	9cffffc4 	addi	r19,r19,-1
81126ee0:	1ce6703a 	and	r19,r3,r19
81126ee4:	98007a26 	beq	r19,zero,811270d0 <__subdf3+0x380>
81126ee8:	9809883a 	mov	r4,r19
81126eec:	1111e440 	call	81111e44 <__clzsi2>
81126ef0:	113ffe04 	addi	r4,r2,-8
81126ef4:	00c007c4 	movi	r3,31
81126ef8:	19007b16 	blt	r3,r4,811270e8 <__subdf3+0x398>
81126efc:	00800804 	movi	r2,32
81126f00:	1105c83a 	sub	r2,r2,r4
81126f04:	8884d83a 	srl	r2,r17,r2
81126f08:	9906983a 	sll	r3,r19,r4
81126f0c:	8922983a 	sll	r17,r17,r4
81126f10:	10c4b03a 	or	r2,r2,r3
81126f14:	24007816 	blt	r4,r16,811270f8 <__subdf3+0x3a8>
81126f18:	2421c83a 	sub	r16,r4,r16
81126f1c:	80c00044 	addi	r3,r16,1
81126f20:	010007c4 	movi	r4,31
81126f24:	20c09516 	blt	r4,r3,8112717c <__subdf3+0x42c>
81126f28:	01400804 	movi	r5,32
81126f2c:	28cbc83a 	sub	r5,r5,r3
81126f30:	88c8d83a 	srl	r4,r17,r3
81126f34:	8962983a 	sll	r17,r17,r5
81126f38:	114a983a 	sll	r5,r2,r5
81126f3c:	10c6d83a 	srl	r3,r2,r3
81126f40:	8804c03a 	cmpne	r2,r17,zero
81126f44:	290ab03a 	or	r5,r5,r4
81126f48:	28a2b03a 	or	r17,r5,r2
81126f4c:	0021883a 	mov	r16,zero
81126f50:	003fa206 	br	81126ddc <__reset+0xfb106ddc>
81126f54:	2090b03a 	or	r8,r4,r2
81126f58:	40018e26 	beq	r8,zero,81127594 <__subdf3+0x844>
81126f5c:	1007883a 	mov	r3,r2
81126f60:	2023883a 	mov	r17,r4
81126f64:	888001cc 	andi	r2,r17,7
81126f68:	103f9e1e 	bne	r2,zero,81126de4 <__reset+0xfb106de4>
81126f6c:	1804977a 	slli	r2,r3,29
81126f70:	8822d0fa 	srli	r17,r17,3
81126f74:	1810d0fa 	srli	r8,r3,3
81126f78:	9100004c 	andi	r4,r18,1
81126f7c:	1444b03a 	or	r2,r2,r17
81126f80:	00c1ffc4 	movi	r3,2047
81126f84:	80c02826 	beq	r16,r3,81127028 <__subdf3+0x2d8>
81126f88:	01400434 	movhi	r5,16
81126f8c:	297fffc4 	addi	r5,r5,-1
81126f90:	80e0703a 	and	r16,r16,r3
81126f94:	414a703a 	and	r5,r8,r5
81126f98:	003fa806 	br	81126e3c <__reset+0xfb106e3c>
81126f9c:	0080630e 	bge	zero,r2,8112712c <__subdf3+0x3dc>
81126fa0:	48003026 	beq	r9,zero,81127064 <__subdf3+0x314>
81126fa4:	0101ffc4 	movi	r4,2047
81126fa8:	813f8c26 	beq	r16,r4,81126ddc <__reset+0xfb106ddc>
81126fac:	29402034 	orhi	r5,r5,128
81126fb0:	01000e04 	movi	r4,56
81126fb4:	2080a90e 	bge	r4,r2,8112725c <__subdf3+0x50c>
81126fb8:	298cb03a 	or	r6,r5,r6
81126fbc:	3012c03a 	cmpne	r9,r6,zero
81126fc0:	0005883a 	mov	r2,zero
81126fc4:	4c53883a 	add	r9,r9,r17
81126fc8:	4c63803a 	cmpltu	r17,r9,r17
81126fcc:	10c7883a 	add	r3,r2,r3
81126fd0:	88c7883a 	add	r3,r17,r3
81126fd4:	4823883a 	mov	r17,r9
81126fd8:	1880202c 	andhi	r2,r3,128
81126fdc:	1000d026 	beq	r2,zero,81127320 <__subdf3+0x5d0>
81126fe0:	84000044 	addi	r16,r16,1
81126fe4:	0081ffc4 	movi	r2,2047
81126fe8:	8080fe26 	beq	r16,r2,811273e4 <__subdf3+0x694>
81126fec:	00bfe034 	movhi	r2,65408
81126ff0:	10bfffc4 	addi	r2,r2,-1
81126ff4:	1886703a 	and	r3,r3,r2
81126ff8:	880ad07a 	srli	r5,r17,1
81126ffc:	180497fa 	slli	r2,r3,31
81127000:	8900004c 	andi	r4,r17,1
81127004:	2922b03a 	or	r17,r5,r4
81127008:	1806d07a 	srli	r3,r3,1
8112700c:	1462b03a 	or	r17,r2,r17
81127010:	3825883a 	mov	r18,r7
81127014:	003f7106 	br	81126ddc <__reset+0xfb106ddc>
81127018:	2984b03a 	or	r2,r5,r6
8112701c:	103f6826 	beq	r2,zero,81126dc0 <__reset+0xfb106dc0>
81127020:	39c03fcc 	andi	r7,r7,255
81127024:	003f6706 	br	81126dc4 <__reset+0xfb106dc4>
81127028:	4086b03a 	or	r3,r8,r2
8112702c:	18015226 	beq	r3,zero,81127578 <__subdf3+0x828>
81127030:	00c00434 	movhi	r3,16
81127034:	41400234 	orhi	r5,r8,8
81127038:	18ffffc4 	addi	r3,r3,-1
8112703c:	28ca703a 	and	r5,r5,r3
81127040:	003f7e06 	br	81126e3c <__reset+0xfb106e3c>
81127044:	10bfffc4 	addi	r2,r2,-1
81127048:	1000491e 	bne	r2,zero,81127170 <__subdf3+0x420>
8112704c:	898fc83a 	sub	r7,r17,r6
81127050:	89e3803a 	cmpltu	r17,r17,r7
81127054:	1947c83a 	sub	r3,r3,r5
81127058:	1c47c83a 	sub	r3,r3,r17
8112705c:	3823883a 	mov	r17,r7
81127060:	003f9b06 	br	81126ed0 <__reset+0xfb106ed0>
81127064:	2988b03a 	or	r4,r5,r6
81127068:	203f5c26 	beq	r4,zero,81126ddc <__reset+0xfb106ddc>
8112706c:	10bfffc4 	addi	r2,r2,-1
81127070:	1000931e 	bne	r2,zero,811272c0 <__subdf3+0x570>
81127074:	898d883a 	add	r6,r17,r6
81127078:	3463803a 	cmpltu	r17,r6,r17
8112707c:	1947883a 	add	r3,r3,r5
81127080:	88c7883a 	add	r3,r17,r3
81127084:	3023883a 	mov	r17,r6
81127088:	003fd306 	br	81126fd8 <__reset+0xfb106fd8>
8112708c:	1000541e 	bne	r2,zero,811271e0 <__subdf3+0x490>
81127090:	80800044 	addi	r2,r16,1
81127094:	1081ffcc 	andi	r2,r2,2047
81127098:	01000044 	movi	r4,1
8112709c:	2080a20e 	bge	r4,r2,81127328 <__subdf3+0x5d8>
811270a0:	8989c83a 	sub	r4,r17,r6
811270a4:	8905803a 	cmpltu	r2,r17,r4
811270a8:	1967c83a 	sub	r19,r3,r5
811270ac:	98a7c83a 	sub	r19,r19,r2
811270b0:	9880202c 	andhi	r2,r19,128
811270b4:	10006326 	beq	r2,zero,81127244 <__subdf3+0x4f4>
811270b8:	3463c83a 	sub	r17,r6,r17
811270bc:	28c7c83a 	sub	r3,r5,r3
811270c0:	344d803a 	cmpltu	r6,r6,r17
811270c4:	19a7c83a 	sub	r19,r3,r6
811270c8:	3825883a 	mov	r18,r7
811270cc:	983f861e 	bne	r19,zero,81126ee8 <__reset+0xfb106ee8>
811270d0:	8809883a 	mov	r4,r17
811270d4:	1111e440 	call	81111e44 <__clzsi2>
811270d8:	10800804 	addi	r2,r2,32
811270dc:	113ffe04 	addi	r4,r2,-8
811270e0:	00c007c4 	movi	r3,31
811270e4:	193f850e 	bge	r3,r4,81126efc <__reset+0xfb106efc>
811270e8:	10bff604 	addi	r2,r2,-40
811270ec:	8884983a 	sll	r2,r17,r2
811270f0:	0023883a 	mov	r17,zero
811270f4:	243f880e 	bge	r4,r16,81126f18 <__reset+0xfb106f18>
811270f8:	00ffe034 	movhi	r3,65408
811270fc:	18ffffc4 	addi	r3,r3,-1
81127100:	8121c83a 	sub	r16,r16,r4
81127104:	10c6703a 	and	r3,r2,r3
81127108:	003f3406 	br	81126ddc <__reset+0xfb106ddc>
8112710c:	9100004c 	andi	r4,r18,1
81127110:	000b883a 	mov	r5,zero
81127114:	0005883a 	mov	r2,zero
81127118:	003f4806 	br	81126e3c <__reset+0xfb106e3c>
8112711c:	298cb03a 	or	r6,r5,r6
81127120:	300cc03a 	cmpne	r6,r6,zero
81127124:	0005883a 	mov	r2,zero
81127128:	003f6406 	br	81126ebc <__reset+0xfb106ebc>
8112712c:	10009a1e 	bne	r2,zero,81127398 <__subdf3+0x648>
81127130:	82400044 	addi	r9,r16,1
81127134:	4881ffcc 	andi	r2,r9,2047
81127138:	02800044 	movi	r10,1
8112713c:	5080670e 	bge	r10,r2,811272dc <__subdf3+0x58c>
81127140:	0081ffc4 	movi	r2,2047
81127144:	4880af26 	beq	r9,r2,81127404 <__subdf3+0x6b4>
81127148:	898d883a 	add	r6,r17,r6
8112714c:	1945883a 	add	r2,r3,r5
81127150:	3447803a 	cmpltu	r3,r6,r17
81127154:	1887883a 	add	r3,r3,r2
81127158:	182297fa 	slli	r17,r3,31
8112715c:	300cd07a 	srli	r6,r6,1
81127160:	1806d07a 	srli	r3,r3,1
81127164:	4821883a 	mov	r16,r9
81127168:	89a2b03a 	or	r17,r17,r6
8112716c:	003f1b06 	br	81126ddc <__reset+0xfb106ddc>
81127170:	0101ffc4 	movi	r4,2047
81127174:	813f441e 	bne	r16,r4,81126e88 <__reset+0xfb106e88>
81127178:	003f1806 	br	81126ddc <__reset+0xfb106ddc>
8112717c:	843ff844 	addi	r16,r16,-31
81127180:	01400804 	movi	r5,32
81127184:	1408d83a 	srl	r4,r2,r16
81127188:	19405026 	beq	r3,r5,811272cc <__subdf3+0x57c>
8112718c:	01401004 	movi	r5,64
81127190:	28c7c83a 	sub	r3,r5,r3
81127194:	10c4983a 	sll	r2,r2,r3
81127198:	88a2b03a 	or	r17,r17,r2
8112719c:	8822c03a 	cmpne	r17,r17,zero
811271a0:	2462b03a 	or	r17,r4,r17
811271a4:	0007883a 	mov	r3,zero
811271a8:	0021883a 	mov	r16,zero
811271ac:	003f6d06 	br	81126f64 <__reset+0xfb106f64>
811271b0:	11fff804 	addi	r7,r2,-32
811271b4:	01000804 	movi	r4,32
811271b8:	29ced83a 	srl	r7,r5,r7
811271bc:	11004526 	beq	r2,r4,811272d4 <__subdf3+0x584>
811271c0:	01001004 	movi	r4,64
811271c4:	2089c83a 	sub	r4,r4,r2
811271c8:	2904983a 	sll	r2,r5,r4
811271cc:	118cb03a 	or	r6,r2,r6
811271d0:	300cc03a 	cmpne	r6,r6,zero
811271d4:	398cb03a 	or	r6,r7,r6
811271d8:	0005883a 	mov	r2,zero
811271dc:	003f3706 	br	81126ebc <__reset+0xfb106ebc>
811271e0:	80002a26 	beq	r16,zero,8112728c <__subdf3+0x53c>
811271e4:	0101ffc4 	movi	r4,2047
811271e8:	49006626 	beq	r9,r4,81127384 <__subdf3+0x634>
811271ec:	0085c83a 	sub	r2,zero,r2
811271f0:	18c02034 	orhi	r3,r3,128
811271f4:	01000e04 	movi	r4,56
811271f8:	20807e16 	blt	r4,r2,811273f4 <__subdf3+0x6a4>
811271fc:	010007c4 	movi	r4,31
81127200:	2080e716 	blt	r4,r2,811275a0 <__subdf3+0x850>
81127204:	01000804 	movi	r4,32
81127208:	2089c83a 	sub	r4,r4,r2
8112720c:	1914983a 	sll	r10,r3,r4
81127210:	8890d83a 	srl	r8,r17,r2
81127214:	8908983a 	sll	r4,r17,r4
81127218:	1884d83a 	srl	r2,r3,r2
8112721c:	5222b03a 	or	r17,r10,r8
81127220:	2006c03a 	cmpne	r3,r4,zero
81127224:	88e2b03a 	or	r17,r17,r3
81127228:	3463c83a 	sub	r17,r6,r17
8112722c:	2885c83a 	sub	r2,r5,r2
81127230:	344d803a 	cmpltu	r6,r6,r17
81127234:	1187c83a 	sub	r3,r2,r6
81127238:	4821883a 	mov	r16,r9
8112723c:	3825883a 	mov	r18,r7
81127240:	003f2306 	br	81126ed0 <__reset+0xfb106ed0>
81127244:	24d0b03a 	or	r8,r4,r19
81127248:	40001b1e 	bne	r8,zero,811272b8 <__subdf3+0x568>
8112724c:	0005883a 	mov	r2,zero
81127250:	0009883a 	mov	r4,zero
81127254:	0021883a 	mov	r16,zero
81127258:	003f4906 	br	81126f80 <__reset+0xfb106f80>
8112725c:	010007c4 	movi	r4,31
81127260:	20803a16 	blt	r4,r2,8112734c <__subdf3+0x5fc>
81127264:	01000804 	movi	r4,32
81127268:	2089c83a 	sub	r4,r4,r2
8112726c:	2912983a 	sll	r9,r5,r4
81127270:	3090d83a 	srl	r8,r6,r2
81127274:	3108983a 	sll	r4,r6,r4
81127278:	2884d83a 	srl	r2,r5,r2
8112727c:	4a12b03a 	or	r9,r9,r8
81127280:	2008c03a 	cmpne	r4,r4,zero
81127284:	4912b03a 	or	r9,r9,r4
81127288:	003f4e06 	br	81126fc4 <__reset+0xfb106fc4>
8112728c:	1c48b03a 	or	r4,r3,r17
81127290:	20003c26 	beq	r4,zero,81127384 <__subdf3+0x634>
81127294:	0084303a 	nor	r2,zero,r2
81127298:	1000381e 	bne	r2,zero,8112737c <__subdf3+0x62c>
8112729c:	3463c83a 	sub	r17,r6,r17
811272a0:	28c5c83a 	sub	r2,r5,r3
811272a4:	344d803a 	cmpltu	r6,r6,r17
811272a8:	1187c83a 	sub	r3,r2,r6
811272ac:	4821883a 	mov	r16,r9
811272b0:	3825883a 	mov	r18,r7
811272b4:	003f0606 	br	81126ed0 <__reset+0xfb106ed0>
811272b8:	2023883a 	mov	r17,r4
811272bc:	003f0906 	br	81126ee4 <__reset+0xfb106ee4>
811272c0:	0101ffc4 	movi	r4,2047
811272c4:	813f3a1e 	bne	r16,r4,81126fb0 <__reset+0xfb106fb0>
811272c8:	003ec406 	br	81126ddc <__reset+0xfb106ddc>
811272cc:	0005883a 	mov	r2,zero
811272d0:	003fb106 	br	81127198 <__reset+0xfb107198>
811272d4:	0005883a 	mov	r2,zero
811272d8:	003fbc06 	br	811271cc <__reset+0xfb1071cc>
811272dc:	1c44b03a 	or	r2,r3,r17
811272e0:	80008e1e 	bne	r16,zero,8112751c <__subdf3+0x7cc>
811272e4:	1000c826 	beq	r2,zero,81127608 <__subdf3+0x8b8>
811272e8:	2984b03a 	or	r2,r5,r6
811272ec:	103ebb26 	beq	r2,zero,81126ddc <__reset+0xfb106ddc>
811272f0:	8989883a 	add	r4,r17,r6
811272f4:	1945883a 	add	r2,r3,r5
811272f8:	2447803a 	cmpltu	r3,r4,r17
811272fc:	1887883a 	add	r3,r3,r2
81127300:	1880202c 	andhi	r2,r3,128
81127304:	2023883a 	mov	r17,r4
81127308:	103f1626 	beq	r2,zero,81126f64 <__reset+0xfb106f64>
8112730c:	00bfe034 	movhi	r2,65408
81127310:	10bfffc4 	addi	r2,r2,-1
81127314:	5021883a 	mov	r16,r10
81127318:	1886703a 	and	r3,r3,r2
8112731c:	003eaf06 	br	81126ddc <__reset+0xfb106ddc>
81127320:	3825883a 	mov	r18,r7
81127324:	003f0f06 	br	81126f64 <__reset+0xfb106f64>
81127328:	1c44b03a 	or	r2,r3,r17
8112732c:	8000251e 	bne	r16,zero,811273c4 <__subdf3+0x674>
81127330:	1000661e 	bne	r2,zero,811274cc <__subdf3+0x77c>
81127334:	2990b03a 	or	r8,r5,r6
81127338:	40009626 	beq	r8,zero,81127594 <__subdf3+0x844>
8112733c:	2807883a 	mov	r3,r5
81127340:	3023883a 	mov	r17,r6
81127344:	3825883a 	mov	r18,r7
81127348:	003ea406 	br	81126ddc <__reset+0xfb106ddc>
8112734c:	127ff804 	addi	r9,r2,-32
81127350:	01000804 	movi	r4,32
81127354:	2a52d83a 	srl	r9,r5,r9
81127358:	11008c26 	beq	r2,r4,8112758c <__subdf3+0x83c>
8112735c:	01001004 	movi	r4,64
81127360:	2085c83a 	sub	r2,r4,r2
81127364:	2884983a 	sll	r2,r5,r2
81127368:	118cb03a 	or	r6,r2,r6
8112736c:	300cc03a 	cmpne	r6,r6,zero
81127370:	4992b03a 	or	r9,r9,r6
81127374:	0005883a 	mov	r2,zero
81127378:	003f1206 	br	81126fc4 <__reset+0xfb106fc4>
8112737c:	0101ffc4 	movi	r4,2047
81127380:	493f9c1e 	bne	r9,r4,811271f4 <__reset+0xfb1071f4>
81127384:	2807883a 	mov	r3,r5
81127388:	3023883a 	mov	r17,r6
8112738c:	4821883a 	mov	r16,r9
81127390:	3825883a 	mov	r18,r7
81127394:	003e9106 	br	81126ddc <__reset+0xfb106ddc>
81127398:	80001f1e 	bne	r16,zero,81127418 <__subdf3+0x6c8>
8112739c:	1c48b03a 	or	r4,r3,r17
811273a0:	20005a26 	beq	r4,zero,8112750c <__subdf3+0x7bc>
811273a4:	0084303a 	nor	r2,zero,r2
811273a8:	1000561e 	bne	r2,zero,81127504 <__subdf3+0x7b4>
811273ac:	89a3883a 	add	r17,r17,r6
811273b0:	1945883a 	add	r2,r3,r5
811273b4:	898d803a 	cmpltu	r6,r17,r6
811273b8:	3087883a 	add	r3,r6,r2
811273bc:	4821883a 	mov	r16,r9
811273c0:	003f0506 	br	81126fd8 <__reset+0xfb106fd8>
811273c4:	10002b1e 	bne	r2,zero,81127474 <__subdf3+0x724>
811273c8:	2984b03a 	or	r2,r5,r6
811273cc:	10008026 	beq	r2,zero,811275d0 <__subdf3+0x880>
811273d0:	2807883a 	mov	r3,r5
811273d4:	3023883a 	mov	r17,r6
811273d8:	3825883a 	mov	r18,r7
811273dc:	0401ffc4 	movi	r16,2047
811273e0:	003e7e06 	br	81126ddc <__reset+0xfb106ddc>
811273e4:	3809883a 	mov	r4,r7
811273e8:	0011883a 	mov	r8,zero
811273ec:	0005883a 	mov	r2,zero
811273f0:	003ee306 	br	81126f80 <__reset+0xfb106f80>
811273f4:	1c62b03a 	or	r17,r3,r17
811273f8:	8822c03a 	cmpne	r17,r17,zero
811273fc:	0005883a 	mov	r2,zero
81127400:	003f8906 	br	81127228 <__reset+0xfb107228>
81127404:	3809883a 	mov	r4,r7
81127408:	4821883a 	mov	r16,r9
8112740c:	0011883a 	mov	r8,zero
81127410:	0005883a 	mov	r2,zero
81127414:	003eda06 	br	81126f80 <__reset+0xfb106f80>
81127418:	0101ffc4 	movi	r4,2047
8112741c:	49003b26 	beq	r9,r4,8112750c <__subdf3+0x7bc>
81127420:	0085c83a 	sub	r2,zero,r2
81127424:	18c02034 	orhi	r3,r3,128
81127428:	01000e04 	movi	r4,56
8112742c:	20806e16 	blt	r4,r2,811275e8 <__subdf3+0x898>
81127430:	010007c4 	movi	r4,31
81127434:	20807716 	blt	r4,r2,81127614 <__subdf3+0x8c4>
81127438:	01000804 	movi	r4,32
8112743c:	2089c83a 	sub	r4,r4,r2
81127440:	1914983a 	sll	r10,r3,r4
81127444:	8890d83a 	srl	r8,r17,r2
81127448:	8908983a 	sll	r4,r17,r4
8112744c:	1884d83a 	srl	r2,r3,r2
81127450:	5222b03a 	or	r17,r10,r8
81127454:	2006c03a 	cmpne	r3,r4,zero
81127458:	88e2b03a 	or	r17,r17,r3
8112745c:	89a3883a 	add	r17,r17,r6
81127460:	1145883a 	add	r2,r2,r5
81127464:	898d803a 	cmpltu	r6,r17,r6
81127468:	3087883a 	add	r3,r6,r2
8112746c:	4821883a 	mov	r16,r9
81127470:	003ed906 	br	81126fd8 <__reset+0xfb106fd8>
81127474:	2984b03a 	or	r2,r5,r6
81127478:	10004226 	beq	r2,zero,81127584 <__subdf3+0x834>
8112747c:	1808d0fa 	srli	r4,r3,3
81127480:	8822d0fa 	srli	r17,r17,3
81127484:	1806977a 	slli	r3,r3,29
81127488:	2080022c 	andhi	r2,r4,8
8112748c:	1c62b03a 	or	r17,r3,r17
81127490:	10000826 	beq	r2,zero,811274b4 <__subdf3+0x764>
81127494:	2812d0fa 	srli	r9,r5,3
81127498:	4880022c 	andhi	r2,r9,8
8112749c:	1000051e 	bne	r2,zero,811274b4 <__subdf3+0x764>
811274a0:	300cd0fa 	srli	r6,r6,3
811274a4:	2804977a 	slli	r2,r5,29
811274a8:	4809883a 	mov	r4,r9
811274ac:	3825883a 	mov	r18,r7
811274b0:	11a2b03a 	or	r17,r2,r6
811274b4:	8806d77a 	srli	r3,r17,29
811274b8:	200890fa 	slli	r4,r4,3
811274bc:	882290fa 	slli	r17,r17,3
811274c0:	0401ffc4 	movi	r16,2047
811274c4:	1906b03a 	or	r3,r3,r4
811274c8:	003e4406 	br	81126ddc <__reset+0xfb106ddc>
811274cc:	2984b03a 	or	r2,r5,r6
811274d0:	103e4226 	beq	r2,zero,81126ddc <__reset+0xfb106ddc>
811274d4:	8989c83a 	sub	r4,r17,r6
811274d8:	8911803a 	cmpltu	r8,r17,r4
811274dc:	1945c83a 	sub	r2,r3,r5
811274e0:	1205c83a 	sub	r2,r2,r8
811274e4:	1200202c 	andhi	r8,r2,128
811274e8:	403e9a26 	beq	r8,zero,81126f54 <__reset+0xfb106f54>
811274ec:	3463c83a 	sub	r17,r6,r17
811274f0:	28c5c83a 	sub	r2,r5,r3
811274f4:	344d803a 	cmpltu	r6,r6,r17
811274f8:	1187c83a 	sub	r3,r2,r6
811274fc:	3825883a 	mov	r18,r7
81127500:	003e3606 	br	81126ddc <__reset+0xfb106ddc>
81127504:	0101ffc4 	movi	r4,2047
81127508:	493fc71e 	bne	r9,r4,81127428 <__reset+0xfb107428>
8112750c:	2807883a 	mov	r3,r5
81127510:	3023883a 	mov	r17,r6
81127514:	4821883a 	mov	r16,r9
81127518:	003e3006 	br	81126ddc <__reset+0xfb106ddc>
8112751c:	10003626 	beq	r2,zero,811275f8 <__subdf3+0x8a8>
81127520:	2984b03a 	or	r2,r5,r6
81127524:	10001726 	beq	r2,zero,81127584 <__subdf3+0x834>
81127528:	1808d0fa 	srli	r4,r3,3
8112752c:	8822d0fa 	srli	r17,r17,3
81127530:	1806977a 	slli	r3,r3,29
81127534:	2080022c 	andhi	r2,r4,8
81127538:	1c62b03a 	or	r17,r3,r17
8112753c:	10000726 	beq	r2,zero,8112755c <__subdf3+0x80c>
81127540:	2812d0fa 	srli	r9,r5,3
81127544:	4880022c 	andhi	r2,r9,8
81127548:	1000041e 	bne	r2,zero,8112755c <__subdf3+0x80c>
8112754c:	300cd0fa 	srli	r6,r6,3
81127550:	2804977a 	slli	r2,r5,29
81127554:	4809883a 	mov	r4,r9
81127558:	11a2b03a 	or	r17,r2,r6
8112755c:	8806d77a 	srli	r3,r17,29
81127560:	200890fa 	slli	r4,r4,3
81127564:	882290fa 	slli	r17,r17,3
81127568:	3825883a 	mov	r18,r7
8112756c:	1906b03a 	or	r3,r3,r4
81127570:	0401ffc4 	movi	r16,2047
81127574:	003e1906 	br	81126ddc <__reset+0xfb106ddc>
81127578:	000b883a 	mov	r5,zero
8112757c:	0005883a 	mov	r2,zero
81127580:	003e2e06 	br	81126e3c <__reset+0xfb106e3c>
81127584:	0401ffc4 	movi	r16,2047
81127588:	003e1406 	br	81126ddc <__reset+0xfb106ddc>
8112758c:	0005883a 	mov	r2,zero
81127590:	003f7506 	br	81127368 <__reset+0xfb107368>
81127594:	0005883a 	mov	r2,zero
81127598:	0009883a 	mov	r4,zero
8112759c:	003e7806 	br	81126f80 <__reset+0xfb106f80>
811275a0:	123ff804 	addi	r8,r2,-32
811275a4:	01000804 	movi	r4,32
811275a8:	1a10d83a 	srl	r8,r3,r8
811275ac:	11002526 	beq	r2,r4,81127644 <__subdf3+0x8f4>
811275b0:	01001004 	movi	r4,64
811275b4:	2085c83a 	sub	r2,r4,r2
811275b8:	1884983a 	sll	r2,r3,r2
811275bc:	1444b03a 	or	r2,r2,r17
811275c0:	1004c03a 	cmpne	r2,r2,zero
811275c4:	40a2b03a 	or	r17,r8,r2
811275c8:	0005883a 	mov	r2,zero
811275cc:	003f1606 	br	81127228 <__reset+0xfb107228>
811275d0:	02000434 	movhi	r8,16
811275d4:	0009883a 	mov	r4,zero
811275d8:	423fffc4 	addi	r8,r8,-1
811275dc:	00bfffc4 	movi	r2,-1
811275e0:	0401ffc4 	movi	r16,2047
811275e4:	003e6606 	br	81126f80 <__reset+0xfb106f80>
811275e8:	1c62b03a 	or	r17,r3,r17
811275ec:	8822c03a 	cmpne	r17,r17,zero
811275f0:	0005883a 	mov	r2,zero
811275f4:	003f9906 	br	8112745c <__reset+0xfb10745c>
811275f8:	2807883a 	mov	r3,r5
811275fc:	3023883a 	mov	r17,r6
81127600:	0401ffc4 	movi	r16,2047
81127604:	003df506 	br	81126ddc <__reset+0xfb106ddc>
81127608:	2807883a 	mov	r3,r5
8112760c:	3023883a 	mov	r17,r6
81127610:	003df206 	br	81126ddc <__reset+0xfb106ddc>
81127614:	123ff804 	addi	r8,r2,-32
81127618:	01000804 	movi	r4,32
8112761c:	1a10d83a 	srl	r8,r3,r8
81127620:	11000a26 	beq	r2,r4,8112764c <__subdf3+0x8fc>
81127624:	01001004 	movi	r4,64
81127628:	2085c83a 	sub	r2,r4,r2
8112762c:	1884983a 	sll	r2,r3,r2
81127630:	1444b03a 	or	r2,r2,r17
81127634:	1004c03a 	cmpne	r2,r2,zero
81127638:	40a2b03a 	or	r17,r8,r2
8112763c:	0005883a 	mov	r2,zero
81127640:	003f8606 	br	8112745c <__reset+0xfb10745c>
81127644:	0005883a 	mov	r2,zero
81127648:	003fdc06 	br	811275bc <__reset+0xfb1075bc>
8112764c:	0005883a 	mov	r2,zero
81127650:	003ff706 	br	81127630 <__reset+0xfb107630>

81127654 <__fixdfsi>:
81127654:	280cd53a 	srli	r6,r5,20
81127658:	00c00434 	movhi	r3,16
8112765c:	18ffffc4 	addi	r3,r3,-1
81127660:	3181ffcc 	andi	r6,r6,2047
81127664:	01c0ff84 	movi	r7,1022
81127668:	28c6703a 	and	r3,r5,r3
8112766c:	280ad7fa 	srli	r5,r5,31
81127670:	3980120e 	bge	r7,r6,811276bc <__fixdfsi+0x68>
81127674:	00810744 	movi	r2,1053
81127678:	11800c16 	blt	r2,r6,811276ac <__fixdfsi+0x58>
8112767c:	00810cc4 	movi	r2,1075
81127680:	1185c83a 	sub	r2,r2,r6
81127684:	01c007c4 	movi	r7,31
81127688:	18c00434 	orhi	r3,r3,16
8112768c:	38800d16 	blt	r7,r2,811276c4 <__fixdfsi+0x70>
81127690:	31befb44 	addi	r6,r6,-1043
81127694:	2084d83a 	srl	r2,r4,r2
81127698:	1986983a 	sll	r3,r3,r6
8112769c:	1884b03a 	or	r2,r3,r2
811276a0:	28000726 	beq	r5,zero,811276c0 <__fixdfsi+0x6c>
811276a4:	0085c83a 	sub	r2,zero,r2
811276a8:	f800283a 	ret
811276ac:	00a00034 	movhi	r2,32768
811276b0:	10bfffc4 	addi	r2,r2,-1
811276b4:	2885883a 	add	r2,r5,r2
811276b8:	f800283a 	ret
811276bc:	0005883a 	mov	r2,zero
811276c0:	f800283a 	ret
811276c4:	008104c4 	movi	r2,1043
811276c8:	1185c83a 	sub	r2,r2,r6
811276cc:	1884d83a 	srl	r2,r3,r2
811276d0:	003ff306 	br	811276a0 <__reset+0xfb1076a0>

811276d4 <__floatsidf>:
811276d4:	defffd04 	addi	sp,sp,-12
811276d8:	de00012e 	bgeu	sp,et,811276e0 <__floatsidf+0xc>
811276dc:	003b68fa 	trap	3
811276e0:	dfc00215 	stw	ra,8(sp)
811276e4:	dc400115 	stw	r17,4(sp)
811276e8:	dc000015 	stw	r16,0(sp)
811276ec:	20002b26 	beq	r4,zero,8112779c <__floatsidf+0xc8>
811276f0:	2023883a 	mov	r17,r4
811276f4:	2020d7fa 	srli	r16,r4,31
811276f8:	20002d16 	blt	r4,zero,811277b0 <__floatsidf+0xdc>
811276fc:	8809883a 	mov	r4,r17
81127700:	1111e440 	call	81111e44 <__clzsi2>
81127704:	01410784 	movi	r5,1054
81127708:	288bc83a 	sub	r5,r5,r2
8112770c:	01010cc4 	movi	r4,1075
81127710:	2149c83a 	sub	r4,r4,r5
81127714:	00c007c4 	movi	r3,31
81127718:	1900160e 	bge	r3,r4,81127774 <__floatsidf+0xa0>
8112771c:	00c104c4 	movi	r3,1043
81127720:	1947c83a 	sub	r3,r3,r5
81127724:	88c6983a 	sll	r3,r17,r3
81127728:	00800434 	movhi	r2,16
8112772c:	10bfffc4 	addi	r2,r2,-1
81127730:	1886703a 	and	r3,r3,r2
81127734:	2941ffcc 	andi	r5,r5,2047
81127738:	800d883a 	mov	r6,r16
8112773c:	0005883a 	mov	r2,zero
81127740:	280a953a 	slli	r5,r5,20
81127744:	31803fcc 	andi	r6,r6,255
81127748:	01000434 	movhi	r4,16
8112774c:	300c97fa 	slli	r6,r6,31
81127750:	213fffc4 	addi	r4,r4,-1
81127754:	1906703a 	and	r3,r3,r4
81127758:	1946b03a 	or	r3,r3,r5
8112775c:	1986b03a 	or	r3,r3,r6
81127760:	dfc00217 	ldw	ra,8(sp)
81127764:	dc400117 	ldw	r17,4(sp)
81127768:	dc000017 	ldw	r16,0(sp)
8112776c:	dec00304 	addi	sp,sp,12
81127770:	f800283a 	ret
81127774:	00c002c4 	movi	r3,11
81127778:	1887c83a 	sub	r3,r3,r2
8112777c:	88c6d83a 	srl	r3,r17,r3
81127780:	8904983a 	sll	r2,r17,r4
81127784:	01000434 	movhi	r4,16
81127788:	213fffc4 	addi	r4,r4,-1
8112778c:	2941ffcc 	andi	r5,r5,2047
81127790:	1906703a 	and	r3,r3,r4
81127794:	800d883a 	mov	r6,r16
81127798:	003fe906 	br	81127740 <__reset+0xfb107740>
8112779c:	000d883a 	mov	r6,zero
811277a0:	000b883a 	mov	r5,zero
811277a4:	0007883a 	mov	r3,zero
811277a8:	0005883a 	mov	r2,zero
811277ac:	003fe406 	br	81127740 <__reset+0xfb107740>
811277b0:	0123c83a 	sub	r17,zero,r4
811277b4:	003fd106 	br	811276fc <__reset+0xfb1076fc>

811277b8 <__floatunsidf>:
811277b8:	defffe04 	addi	sp,sp,-8
811277bc:	de00012e 	bgeu	sp,et,811277c4 <__floatunsidf+0xc>
811277c0:	003b68fa 	trap	3
811277c4:	dc000015 	stw	r16,0(sp)
811277c8:	dfc00115 	stw	ra,4(sp)
811277cc:	2021883a 	mov	r16,r4
811277d0:	20002226 	beq	r4,zero,8112785c <__floatunsidf+0xa4>
811277d4:	1111e440 	call	81111e44 <__clzsi2>
811277d8:	01010784 	movi	r4,1054
811277dc:	2089c83a 	sub	r4,r4,r2
811277e0:	01810cc4 	movi	r6,1075
811277e4:	310dc83a 	sub	r6,r6,r4
811277e8:	00c007c4 	movi	r3,31
811277ec:	1980120e 	bge	r3,r6,81127838 <__floatunsidf+0x80>
811277f0:	00c104c4 	movi	r3,1043
811277f4:	1907c83a 	sub	r3,r3,r4
811277f8:	80ca983a 	sll	r5,r16,r3
811277fc:	00800434 	movhi	r2,16
81127800:	10bfffc4 	addi	r2,r2,-1
81127804:	2101ffcc 	andi	r4,r4,2047
81127808:	0021883a 	mov	r16,zero
8112780c:	288a703a 	and	r5,r5,r2
81127810:	2008953a 	slli	r4,r4,20
81127814:	00c00434 	movhi	r3,16
81127818:	18ffffc4 	addi	r3,r3,-1
8112781c:	28c6703a 	and	r3,r5,r3
81127820:	8005883a 	mov	r2,r16
81127824:	1906b03a 	or	r3,r3,r4
81127828:	dfc00117 	ldw	ra,4(sp)
8112782c:	dc000017 	ldw	r16,0(sp)
81127830:	dec00204 	addi	sp,sp,8
81127834:	f800283a 	ret
81127838:	00c002c4 	movi	r3,11
8112783c:	188bc83a 	sub	r5,r3,r2
81127840:	814ad83a 	srl	r5,r16,r5
81127844:	00c00434 	movhi	r3,16
81127848:	18ffffc4 	addi	r3,r3,-1
8112784c:	81a0983a 	sll	r16,r16,r6
81127850:	2101ffcc 	andi	r4,r4,2047
81127854:	28ca703a 	and	r5,r5,r3
81127858:	003fed06 	br	81127810 <__reset+0xfb107810>
8112785c:	0009883a 	mov	r4,zero
81127860:	000b883a 	mov	r5,zero
81127864:	003fea06 	br	81127810 <__reset+0xfb107810>

81127868 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81127868:	defffb04 	addi	sp,sp,-20
8112786c:	de00012e 	bgeu	sp,et,81127874 <alt_busy_sleep+0xc>
81127870:	003b68fa 	trap	3
81127874:	df000415 	stw	fp,16(sp)
81127878:	df000404 	addi	fp,sp,16
8112787c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81127880:	008000c4 	movi	r2,3
81127884:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81127888:	e0fffd17 	ldw	r3,-12(fp)
8112788c:	008003f4 	movhi	r2,15
81127890:	10909004 	addi	r2,r2,16960
81127894:	1887383a 	mul	r3,r3,r2
81127898:	00817db4 	movhi	r2,1526
8112789c:	10b84004 	addi	r2,r2,-7936
811278a0:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
811278a4:	00a00034 	movhi	r2,32768
811278a8:	10bfffc4 	addi	r2,r2,-1
811278ac:	10c5203a 	divu	r2,r2,r3
811278b0:	e0ffff17 	ldw	r3,-4(fp)
811278b4:	1885203a 	divu	r2,r3,r2
811278b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
811278bc:	e0bffe17 	ldw	r2,-8(fp)
811278c0:	10002526 	beq	r2,zero,81127958 <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
811278c4:	e03ffc15 	stw	zero,-16(fp)
811278c8:	00001406 	br	8112791c <alt_busy_sleep+0xb4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
811278cc:	00a00034 	movhi	r2,32768
811278d0:	10bfffc4 	addi	r2,r2,-1
811278d4:	10bfffc4 	addi	r2,r2,-1
811278d8:	103ffe1e 	bne	r2,zero,811278d4 <__reset+0xfb1078d4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
811278dc:	e0fffd17 	ldw	r3,-12(fp)
811278e0:	008003f4 	movhi	r2,15
811278e4:	10909004 	addi	r2,r2,16960
811278e8:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
811278ec:	00817db4 	movhi	r2,1526
811278f0:	10b84004 	addi	r2,r2,-7936
811278f4:	10c7203a 	divu	r3,r2,r3
811278f8:	00a00034 	movhi	r2,32768
811278fc:	10bfffc4 	addi	r2,r2,-1
81127900:	10c5203a 	divu	r2,r2,r3
81127904:	e0ffff17 	ldw	r3,-4(fp)
81127908:	1885c83a 	sub	r2,r3,r2
8112790c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81127910:	e0bffc17 	ldw	r2,-16(fp)
81127914:	10800044 	addi	r2,r2,1
81127918:	e0bffc15 	stw	r2,-16(fp)
8112791c:	e0fffc17 	ldw	r3,-16(fp)
81127920:	e0bffe17 	ldw	r2,-8(fp)
81127924:	18bfe916 	blt	r3,r2,811278cc <__reset+0xfb1078cc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81127928:	e0fffd17 	ldw	r3,-12(fp)
8112792c:	008003f4 	movhi	r2,15
81127930:	10909004 	addi	r2,r2,16960
81127934:	1887383a 	mul	r3,r3,r2
81127938:	00817db4 	movhi	r2,1526
8112793c:	10b84004 	addi	r2,r2,-7936
81127940:	10c7203a 	divu	r3,r2,r3
81127944:	e0bfff17 	ldw	r2,-4(fp)
81127948:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8112794c:	10bfffc4 	addi	r2,r2,-1
81127950:	103ffe1e 	bne	r2,zero,8112794c <__reset+0xfb10794c>
81127954:	00000b06 	br	81127984 <alt_busy_sleep+0x11c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81127958:	e0fffd17 	ldw	r3,-12(fp)
8112795c:	008003f4 	movhi	r2,15
81127960:	10909004 	addi	r2,r2,16960
81127964:	1887383a 	mul	r3,r3,r2
81127968:	00817db4 	movhi	r2,1526
8112796c:	10b84004 	addi	r2,r2,-7936
81127970:	10c7203a 	divu	r3,r2,r3
81127974:	e0bfff17 	ldw	r2,-4(fp)
81127978:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8112797c:	10bfffc4 	addi	r2,r2,-1
81127980:	00bffe16 	blt	zero,r2,8112797c <__reset+0xfb10797c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81127984:	0005883a 	mov	r2,zero
}
81127988:	e037883a 	mov	sp,fp
8112798c:	df000017 	ldw	fp,0(sp)
81127990:	dec00104 	addi	sp,sp,4
81127994:	f800283a 	ret

81127998 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127998:	defffe04 	addi	sp,sp,-8
8112799c:	de00012e 	bgeu	sp,et,811279a4 <alt_get_errno+0xc>
811279a0:	003b68fa 	trap	3
811279a4:	dfc00115 	stw	ra,4(sp)
811279a8:	df000015 	stw	fp,0(sp)
811279ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811279b0:	d0a01017 	ldw	r2,-32704(gp)
811279b4:	10000326 	beq	r2,zero,811279c4 <alt_get_errno+0x2c>
811279b8:	d0a01017 	ldw	r2,-32704(gp)
811279bc:	103ee83a 	callr	r2
811279c0:	00000106 	br	811279c8 <alt_get_errno+0x30>
811279c4:	d0a06104 	addi	r2,gp,-32380
}
811279c8:	e037883a 	mov	sp,fp
811279cc:	dfc00117 	ldw	ra,4(sp)
811279d0:	df000017 	ldw	fp,0(sp)
811279d4:	dec00204 	addi	sp,sp,8
811279d8:	f800283a 	ret

811279dc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811279dc:	defffb04 	addi	sp,sp,-20
811279e0:	de00012e 	bgeu	sp,et,811279e8 <close+0xc>
811279e4:	003b68fa 	trap	3
811279e8:	dfc00415 	stw	ra,16(sp)
811279ec:	df000315 	stw	fp,12(sp)
811279f0:	df000304 	addi	fp,sp,12
811279f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
811279f8:	e0bfff17 	ldw	r2,-4(fp)
811279fc:	10000616 	blt	r2,zero,81127a18 <close+0x3c>
81127a00:	e0bfff17 	ldw	r2,-4(fp)
81127a04:	10c00324 	muli	r3,r2,12
81127a08:	00a04534 	movhi	r2,33044
81127a0c:	10858e04 	addi	r2,r2,5688
81127a10:	1885883a 	add	r2,r3,r2
81127a14:	00000106 	br	81127a1c <close+0x40>
81127a18:	0005883a 	mov	r2,zero
81127a1c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
81127a20:	e0bffd17 	ldw	r2,-12(fp)
81127a24:	10001926 	beq	r2,zero,81127a8c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81127a28:	e0bffd17 	ldw	r2,-12(fp)
81127a2c:	10800017 	ldw	r2,0(r2)
81127a30:	10800417 	ldw	r2,16(r2)
81127a34:	10000626 	beq	r2,zero,81127a50 <close+0x74>
81127a38:	e0bffd17 	ldw	r2,-12(fp)
81127a3c:	10800017 	ldw	r2,0(r2)
81127a40:	10800417 	ldw	r2,16(r2)
81127a44:	e13ffd17 	ldw	r4,-12(fp)
81127a48:	103ee83a 	callr	r2
81127a4c:	00000106 	br	81127a54 <close+0x78>
81127a50:	0005883a 	mov	r2,zero
81127a54:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81127a58:	e13fff17 	ldw	r4,-4(fp)
81127a5c:	11290000 	call	81129000 <alt_release_fd>
    if (rval < 0)
81127a60:	e0bffe17 	ldw	r2,-8(fp)
81127a64:	1000070e 	bge	r2,zero,81127a84 <close+0xa8>
    {
      ALT_ERRNO = -rval;
81127a68:	11279980 	call	81127998 <alt_get_errno>
81127a6c:	1007883a 	mov	r3,r2
81127a70:	e0bffe17 	ldw	r2,-8(fp)
81127a74:	0085c83a 	sub	r2,zero,r2
81127a78:	18800015 	stw	r2,0(r3)
      return -1;
81127a7c:	00bfffc4 	movi	r2,-1
81127a80:	00000706 	br	81127aa0 <close+0xc4>
    }
    return 0;
81127a84:	0005883a 	mov	r2,zero
81127a88:	00000506 	br	81127aa0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81127a8c:	11279980 	call	81127998 <alt_get_errno>
81127a90:	1007883a 	mov	r3,r2
81127a94:	00801444 	movi	r2,81
81127a98:	18800015 	stw	r2,0(r3)
    return -1;
81127a9c:	00bfffc4 	movi	r2,-1
  }
}
81127aa0:	e037883a 	mov	sp,fp
81127aa4:	dfc00117 	ldw	ra,4(sp)
81127aa8:	df000017 	ldw	fp,0(sp)
81127aac:	dec00204 	addi	sp,sp,8
81127ab0:	f800283a 	ret

81127ab4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81127ab4:	deffff04 	addi	sp,sp,-4
81127ab8:	de00012e 	bgeu	sp,et,81127ac0 <alt_dcache_flush_all+0xc>
81127abc:	003b68fa 	trap	3
81127ac0:	df000015 	stw	fp,0(sp)
81127ac4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81127ac8:	0001883a 	nop
81127acc:	e037883a 	mov	sp,fp
81127ad0:	df000017 	ldw	fp,0(sp)
81127ad4:	dec00104 	addi	sp,sp,4
81127ad8:	f800283a 	ret

81127adc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81127adc:	defffc04 	addi	sp,sp,-16
81127ae0:	de00012e 	bgeu	sp,et,81127ae8 <alt_dev_null_write+0xc>
81127ae4:	003b68fa 	trap	3
81127ae8:	df000315 	stw	fp,12(sp)
81127aec:	df000304 	addi	fp,sp,12
81127af0:	e13ffd15 	stw	r4,-12(fp)
81127af4:	e17ffe15 	stw	r5,-8(fp)
81127af8:	e1bfff15 	stw	r6,-4(fp)
  return len;
81127afc:	e0bfff17 	ldw	r2,-4(fp)
}
81127b00:	e037883a 	mov	sp,fp
81127b04:	df000017 	ldw	fp,0(sp)
81127b08:	dec00104 	addi	sp,sp,4
81127b0c:	f800283a 	ret

81127b10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127b10:	defffe04 	addi	sp,sp,-8
81127b14:	de00012e 	bgeu	sp,et,81127b1c <alt_get_errno+0xc>
81127b18:	003b68fa 	trap	3
81127b1c:	dfc00115 	stw	ra,4(sp)
81127b20:	df000015 	stw	fp,0(sp)
81127b24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127b28:	d0a01017 	ldw	r2,-32704(gp)
81127b2c:	10000326 	beq	r2,zero,81127b3c <alt_get_errno+0x2c>
81127b30:	d0a01017 	ldw	r2,-32704(gp)
81127b34:	103ee83a 	callr	r2
81127b38:	00000106 	br	81127b40 <alt_get_errno+0x30>
81127b3c:	d0a06104 	addi	r2,gp,-32380
}
81127b40:	e037883a 	mov	sp,fp
81127b44:	dfc00117 	ldw	ra,4(sp)
81127b48:	df000017 	ldw	fp,0(sp)
81127b4c:	dec00204 	addi	sp,sp,8
81127b50:	f800283a 	ret

81127b54 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81127b54:	defffb04 	addi	sp,sp,-20
81127b58:	de00012e 	bgeu	sp,et,81127b60 <fstat+0xc>
81127b5c:	003b68fa 	trap	3
81127b60:	dfc00415 	stw	ra,16(sp)
81127b64:	df000315 	stw	fp,12(sp)
81127b68:	df000304 	addi	fp,sp,12
81127b6c:	e13ffe15 	stw	r4,-8(fp)
81127b70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127b74:	e0bffe17 	ldw	r2,-8(fp)
81127b78:	10000616 	blt	r2,zero,81127b94 <fstat+0x40>
81127b7c:	e0bffe17 	ldw	r2,-8(fp)
81127b80:	10c00324 	muli	r3,r2,12
81127b84:	00a04534 	movhi	r2,33044
81127b88:	10858e04 	addi	r2,r2,5688
81127b8c:	1885883a 	add	r2,r3,r2
81127b90:	00000106 	br	81127b98 <fstat+0x44>
81127b94:	0005883a 	mov	r2,zero
81127b98:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81127b9c:	e0bffd17 	ldw	r2,-12(fp)
81127ba0:	10001026 	beq	r2,zero,81127be4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81127ba4:	e0bffd17 	ldw	r2,-12(fp)
81127ba8:	10800017 	ldw	r2,0(r2)
81127bac:	10800817 	ldw	r2,32(r2)
81127bb0:	10000726 	beq	r2,zero,81127bd0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
81127bb4:	e0bffd17 	ldw	r2,-12(fp)
81127bb8:	10800017 	ldw	r2,0(r2)
81127bbc:	10800817 	ldw	r2,32(r2)
81127bc0:	e17fff17 	ldw	r5,-4(fp)
81127bc4:	e13ffd17 	ldw	r4,-12(fp)
81127bc8:	103ee83a 	callr	r2
81127bcc:	00000a06 	br	81127bf8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81127bd0:	e0bfff17 	ldw	r2,-4(fp)
81127bd4:	00c80004 	movi	r3,8192
81127bd8:	10c00115 	stw	r3,4(r2)
      return 0;
81127bdc:	0005883a 	mov	r2,zero
81127be0:	00000506 	br	81127bf8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81127be4:	1127b100 	call	81127b10 <alt_get_errno>
81127be8:	1007883a 	mov	r3,r2
81127bec:	00801444 	movi	r2,81
81127bf0:	18800015 	stw	r2,0(r3)
    return -1;
81127bf4:	00bfffc4 	movi	r2,-1
  }
}
81127bf8:	e037883a 	mov	sp,fp
81127bfc:	dfc00117 	ldw	ra,4(sp)
81127c00:	df000017 	ldw	fp,0(sp)
81127c04:	dec00204 	addi	sp,sp,8
81127c08:	f800283a 	ret

81127c0c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
81127c0c:	defff004 	addi	sp,sp,-64
81127c10:	de00012e 	bgeu	sp,et,81127c18 <alt_irq_register+0xc>
81127c14:	003b68fa 	trap	3
81127c18:	df000f15 	stw	fp,60(sp)
81127c1c:	df000f04 	addi	fp,sp,60
81127c20:	e13ffd15 	stw	r4,-12(fp)
81127c24:	e17ffe15 	stw	r5,-8(fp)
81127c28:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
81127c2c:	00bffa84 	movi	r2,-22
81127c30:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81127c34:	e0bffd17 	ldw	r2,-12(fp)
81127c38:	10800828 	cmpgeui	r2,r2,32
81127c3c:	1000501e 	bne	r2,zero,81127d80 <alt_irq_register+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127c40:	0005303a 	rdctl	r2,status
81127c44:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127c48:	e0fff617 	ldw	r3,-40(fp)
81127c4c:	00bfff84 	movi	r2,-2
81127c50:	1884703a 	and	r2,r3,r2
81127c54:	1001703a 	wrctl	status,r2
  
  return context;
81127c58:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
81127c5c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
81127c60:	00a04574 	movhi	r2,33045
81127c64:	10834a04 	addi	r2,r2,3368
81127c68:	e0fffd17 	ldw	r3,-12(fp)
81127c6c:	180690fa 	slli	r3,r3,3
81127c70:	10c5883a 	add	r2,r2,r3
81127c74:	e0ffff17 	ldw	r3,-4(fp)
81127c78:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
81127c7c:	00a04574 	movhi	r2,33045
81127c80:	10834a04 	addi	r2,r2,3368
81127c84:	e0fffd17 	ldw	r3,-12(fp)
81127c88:	180690fa 	slli	r3,r3,3
81127c8c:	10c5883a 	add	r2,r2,r3
81127c90:	10800104 	addi	r2,r2,4
81127c94:	e0fffe17 	ldw	r3,-8(fp)
81127c98:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
81127c9c:	e0bfff17 	ldw	r2,-4(fp)
81127ca0:	10001926 	beq	r2,zero,81127d08 <alt_irq_register+0xfc>
81127ca4:	e0bffd17 	ldw	r2,-12(fp)
81127ca8:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127cac:	0005303a 	rdctl	r2,status
81127cb0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127cb4:	e0fff717 	ldw	r3,-36(fp)
81127cb8:	00bfff84 	movi	r2,-2
81127cbc:	1884703a 	and	r2,r3,r2
81127cc0:	1001703a 	wrctl	status,r2
  
  return context;
81127cc4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81127cc8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
81127ccc:	00c00044 	movi	r3,1
81127cd0:	e0bff217 	ldw	r2,-56(fp)
81127cd4:	1884983a 	sll	r2,r3,r2
81127cd8:	1007883a 	mov	r3,r2
81127cdc:	d0a06917 	ldw	r2,-32348(gp)
81127ce0:	1884b03a 	or	r2,r3,r2
81127ce4:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81127ce8:	d0a06917 	ldw	r2,-32348(gp)
81127cec:	100170fa 	wrctl	ienable,r2
81127cf0:	e0bff817 	ldw	r2,-32(fp)
81127cf4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127cf8:	e0bff917 	ldw	r2,-28(fp)
81127cfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81127d00:	0005883a 	mov	r2,zero
81127d04:	00001906 	br	81127d6c <alt_irq_register+0x160>
81127d08:	e0bffd17 	ldw	r2,-12(fp)
81127d0c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127d10:	0005303a 	rdctl	r2,status
81127d14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127d18:	e0fffa17 	ldw	r3,-24(fp)
81127d1c:	00bfff84 	movi	r2,-2
81127d20:	1884703a 	and	r2,r3,r2
81127d24:	1001703a 	wrctl	status,r2
  
  return context;
81127d28:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81127d2c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
81127d30:	00c00044 	movi	r3,1
81127d34:	e0bff417 	ldw	r2,-48(fp)
81127d38:	1884983a 	sll	r2,r3,r2
81127d3c:	0084303a 	nor	r2,zero,r2
81127d40:	1007883a 	mov	r3,r2
81127d44:	d0a06917 	ldw	r2,-32348(gp)
81127d48:	1884703a 	and	r2,r3,r2
81127d4c:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81127d50:	d0a06917 	ldw	r2,-32348(gp)
81127d54:	100170fa 	wrctl	ienable,r2
81127d58:	e0bffb17 	ldw	r2,-20(fp)
81127d5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127d60:	e0bffc17 	ldw	r2,-16(fp)
81127d64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81127d68:	0005883a 	mov	r2,zero
81127d6c:	e0bff115 	stw	r2,-60(fp)
81127d70:	e0bff317 	ldw	r2,-52(fp)
81127d74:	e0bff515 	stw	r2,-44(fp)
81127d78:	e0bff517 	ldw	r2,-44(fp)
81127d7c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
81127d80:	e0bff117 	ldw	r2,-60(fp)
}
81127d84:	e037883a 	mov	sp,fp
81127d88:	df000017 	ldw	fp,0(sp)
81127d8c:	dec00104 	addi	sp,sp,4
81127d90:	f800283a 	ret

81127d94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127d94:	defffe04 	addi	sp,sp,-8
81127d98:	de00012e 	bgeu	sp,et,81127da0 <alt_get_errno+0xc>
81127d9c:	003b68fa 	trap	3
81127da0:	dfc00115 	stw	ra,4(sp)
81127da4:	df000015 	stw	fp,0(sp)
81127da8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127dac:	d0a01017 	ldw	r2,-32704(gp)
81127db0:	10000326 	beq	r2,zero,81127dc0 <alt_get_errno+0x2c>
81127db4:	d0a01017 	ldw	r2,-32704(gp)
81127db8:	103ee83a 	callr	r2
81127dbc:	00000106 	br	81127dc4 <alt_get_errno+0x30>
81127dc0:	d0a06104 	addi	r2,gp,-32380
}
81127dc4:	e037883a 	mov	sp,fp
81127dc8:	dfc00117 	ldw	ra,4(sp)
81127dcc:	df000017 	ldw	fp,0(sp)
81127dd0:	dec00204 	addi	sp,sp,8
81127dd4:	f800283a 	ret

81127dd8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
81127dd8:	deffed04 	addi	sp,sp,-76
81127ddc:	de00012e 	bgeu	sp,et,81127de4 <isatty+0xc>
81127de0:	003b68fa 	trap	3
81127de4:	dfc01215 	stw	ra,72(sp)
81127de8:	df001115 	stw	fp,68(sp)
81127dec:	df001104 	addi	fp,sp,68
81127df0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127df4:	e0bfff17 	ldw	r2,-4(fp)
81127df8:	10000616 	blt	r2,zero,81127e14 <isatty+0x3c>
81127dfc:	e0bfff17 	ldw	r2,-4(fp)
81127e00:	10c00324 	muli	r3,r2,12
81127e04:	00a04534 	movhi	r2,33044
81127e08:	10858e04 	addi	r2,r2,5688
81127e0c:	1885883a 	add	r2,r3,r2
81127e10:	00000106 	br	81127e18 <isatty+0x40>
81127e14:	0005883a 	mov	r2,zero
81127e18:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81127e1c:	e0bfef17 	ldw	r2,-68(fp)
81127e20:	10000e26 	beq	r2,zero,81127e5c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81127e24:	e0bfef17 	ldw	r2,-68(fp)
81127e28:	10800017 	ldw	r2,0(r2)
81127e2c:	10800817 	ldw	r2,32(r2)
81127e30:	1000021e 	bne	r2,zero,81127e3c <isatty+0x64>
    {
      return 1;
81127e34:	00800044 	movi	r2,1
81127e38:	00000d06 	br	81127e70 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81127e3c:	e0bff004 	addi	r2,fp,-64
81127e40:	100b883a 	mov	r5,r2
81127e44:	e13fff17 	ldw	r4,-4(fp)
81127e48:	1127b540 	call	81127b54 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81127e4c:	e0bff117 	ldw	r2,-60(fp)
81127e50:	10880020 	cmpeqi	r2,r2,8192
81127e54:	10803fcc 	andi	r2,r2,255
81127e58:	00000506 	br	81127e70 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81127e5c:	1127d940 	call	81127d94 <alt_get_errno>
81127e60:	1007883a 	mov	r3,r2
81127e64:	00801444 	movi	r2,81
81127e68:	18800015 	stw	r2,0(r3)
    return 0;
81127e6c:	0005883a 	mov	r2,zero
  }
}
81127e70:	e037883a 	mov	sp,fp
81127e74:	dfc00117 	ldw	ra,4(sp)
81127e78:	df000017 	ldw	fp,0(sp)
81127e7c:	dec00204 	addi	sp,sp,8
81127e80:	f800283a 	ret

81127e84 <tx_log_str>:
	#include "sys/alt_log_printf.h"

        .global tx_log_str
tx_log_str:
	/* load base uart / jtag uart address into r6 */
	movhi r6, %hiadj(ALT_LOG_PORT_BASE)
81127e84:	01a04834 	movhi	r6,33056
	addi r6, r6, %lo(ALT_LOG_PORT_BASE)
81127e88:	318c2404 	addi	r6,r6,12432

81127e8c <tx_next_char>:
tx_next_char:
        /* if pointer points to null, return 
         * r4 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	ldb r7, (r4)
81127e8c:	21c00007 	ldb	r7,0(r4)
	beq r0, r7, end_tx
81127e90:	01c00826 	beq	zero,r7,81127eb4 <end_tx>

81127e94 <wait_tx_ready_loop>:

	/* check device transmit ready  */
wait_tx_ready_loop:
        ldwio   r8, ALT_LOG_PRINT_REG_OFFSET(r6)
81127e94:	32000137 	ldwio	r8,4(r6)
        /*UART, ALT_LOG_PRINT_MSK == 0x40
          JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000 */
        andhi   r5, r8, %hi(ALT_LOG_PRINT_MSK)
81127e98:	417fffec 	andhi	r5,r8,65535
        andi    r8, r8, %lo(ALT_LOG_PRINT_MSK)
81127e9c:	4200000c 	andi	r8,r8,0
        or      r5, r5, r8
81127ea0:	2a0ab03a 	or	r5,r5,r8
        beq     r5, r0, wait_tx_ready_loop	
81127ea4:	283ffb26 	beq	r5,zero,81127e94 <__reset+0xfb107e94>
	/* write char */
	stwio   r7, ALT_LOG_PRINT_TXDATA_REG_OFFSET (r6)		
81127ea8:	31c00035 	stwio	r7,0(r6)
	/* advance string pointer */
	addi r4, r4, 1
81127eac:	21000044 	addi	r4,r4,1
	br tx_next_char
81127eb0:	003ff606 	br	81127e8c <__reset+0xfb107e8c>

81127eb4 <end_tx>:
end_tx:	
        ret
81127eb4:	f800283a 	ret

81127eb8 <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
81127eb8:	defffd04 	addi	sp,sp,-12
81127ebc:	de00012e 	bgeu	sp,et,81127ec4 <alt_log_txchar+0xc>
81127ec0:	003b68fa 	trap	3
81127ec4:	df000215 	stw	fp,8(sp)
81127ec8:	df000204 	addi	fp,sp,8
81127ecc:	e13ffe15 	stw	r4,-8(fp)
81127ed0:	e17fff15 	stw	r5,-4(fp)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
81127ed4:	0001883a 	nop
81127ed8:	e0bfff17 	ldw	r2,-4(fp)
81127edc:	10800104 	addi	r2,r2,4
81127ee0:	10800037 	ldwio	r2,0(r2)
81127ee4:	10bfffec 	andhi	r2,r2,65535
81127ee8:	103ffb26 	beq	r2,zero,81127ed8 <__reset+0xfb107ed8>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
81127eec:	e0bfff17 	ldw	r2,-4(fp)
81127ef0:	e0fffe17 	ldw	r3,-8(fp)
81127ef4:	10c00035 	stwio	r3,0(r2)
}
81127ef8:	0001883a 	nop
81127efc:	e037883a 	mov	sp,fp
81127f00:	df000017 	ldw	fp,0(sp)
81127f04:	dec00104 	addi	sp,sp,4
81127f08:	f800283a 	ret

81127f0c <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
81127f0c:	defffb04 	addi	sp,sp,-20
81127f10:	de00012e 	bgeu	sp,et,81127f18 <alt_log_repchar+0xc>
81127f14:	003b68fa 	trap	3
81127f18:	dfc00415 	stw	ra,16(sp)
81127f1c:	df000315 	stw	fp,12(sp)
81127f20:	df000304 	addi	fp,sp,12
81127f24:	2005883a 	mov	r2,r4
81127f28:	e17ffe15 	stw	r5,-8(fp)
81127f2c:	e1bfff15 	stw	r6,-4(fp)
81127f30:	e0bffd05 	stb	r2,-12(fp)
  while(r-- > 0)
81127f34:	00000506 	br	81127f4c <alt_log_repchar+0x40>
    alt_log_txchar(c,(char*) base);
81127f38:	e0bffd07 	ldb	r2,-12(fp)
81127f3c:	e0ffff17 	ldw	r3,-4(fp)
81127f40:	180b883a 	mov	r5,r3
81127f44:	1009883a 	mov	r4,r2
81127f48:	1127eb80 	call	81127eb8 <alt_log_txchar>


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
  while(r-- > 0)
81127f4c:	e0bffe17 	ldw	r2,-8(fp)
81127f50:	10ffffc4 	addi	r3,r2,-1
81127f54:	e0fffe15 	stw	r3,-8(fp)
81127f58:	00bff716 	blt	zero,r2,81127f38 <__reset+0xfb107f38>
    alt_log_txchar(c,(char*) base);
}
81127f5c:	0001883a 	nop
81127f60:	e037883a 	mov	sp,fp
81127f64:	dfc00117 	ldw	ra,4(sp)
81127f68:	df000017 	ldw	fp,0(sp)
81127f6c:	dec00204 	addi	sp,sp,8
81127f70:	f800283a 	ret

81127f74 <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
81127f74:	deffe904 	addi	sp,sp,-92
81127f78:	de00012e 	bgeu	sp,et,81127f80 <alt_log_private_printf+0xc>
81127f7c:	003b68fa 	trap	3
81127f80:	dfc01615 	stw	ra,88(sp)
81127f84:	df001515 	stw	fp,84(sp)
81127f88:	dc001415 	stw	r16,80(sp)
81127f8c:	df001504 	addi	fp,sp,84
81127f90:	e13ffc15 	stw	r4,-16(fp)
81127f94:	e17ffd15 	stw	r5,-12(fp)
81127f98:	e1bffe15 	stw	r6,-8(fp)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
81127f9c:	e03fed15 	stw	zero,-76(fp)
  int fmtLong = 0;
81127fa0:	e03fee15 	stw	zero,-72(fp)
  int fmtBeforeDecimal = 0;
81127fa4:	e03fef15 	stw	zero,-68(fp)
  int fmtAfterDecimal = 0;
81127fa8:	e03ff015 	stw	zero,-64(fp)
  int fmtBase = 0;
81127fac:	e03ff115 	stw	zero,-60(fp)
  int fmtSigned = 0;
81127fb0:	e03ff215 	stw	zero,-56(fp)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
81127fb4:	e03ff315 	stw	zero,-52(fp)

  w = fmt;
81127fb8:	e0bffc17 	ldw	r2,-16(fp)
81127fbc:	e0bfeb15 	stw	r2,-84(fp)
  state = pfState_chars;
81127fc0:	e03fec15 	stw	zero,-80(fp)

  while(0 != (c = *w++))
81127fc4:	00014b06 	br	811284f4 <alt_log_private_printf+0x580>
    {
    switch(state)
81127fc8:	e0bfec17 	ldw	r2,-80(fp)
81127fcc:	10c00060 	cmpeqi	r3,r2,1
81127fd0:	18001b1e 	bne	r3,zero,81128040 <alt_log_private_printf+0xcc>
81127fd4:	10c000a0 	cmpeqi	r3,r2,2
81127fd8:	18002d1e 	bne	r3,zero,81128090 <alt_log_private_printf+0x11c>
81127fdc:	10000126 	beq	r2,zero,81127fe4 <alt_log_private_printf+0x70>
81127fe0:	00014406 	br	811284f4 <alt_log_private_printf+0x580>
      {
      case pfState_chars:
        if(c == '%')
81127fe4:	e0bffb07 	ldb	r2,-20(fp)
81127fe8:	10800958 	cmpnei	r2,r2,37
81127fec:	10000e1e 	bne	r2,zero,81128028 <alt_log_private_printf+0xb4>
        {
          fmtLeadingZero = 0;
81127ff0:	e03fed15 	stw	zero,-76(fp)
          fmtLong = 0;
81127ff4:	e03fee15 	stw	zero,-72(fp)
          fmtBase = 10;
81127ff8:	00800284 	movi	r2,10
81127ffc:	e0bff115 	stw	r2,-60(fp)
          fmtSigned = 1;
81128000:	00800044 	movi	r2,1
81128004:	e0bff215 	stw	r2,-56(fp)
          fmtCase = 0; /* Only %X sets this. */
81128008:	e03ff315 	stw	zero,-52(fp)
          fmtBeforeDecimal = -1;
8112800c:	00bfffc4 	movi	r2,-1
81128010:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = -1;
81128014:	00bfffc4 	movi	r2,-1
81128018:	e0bff015 	stw	r2,-64(fp)
          state = pfState_firstFmtChar;
8112801c:	00800044 	movi	r2,1
81128020:	e0bfec15 	stw	r2,-80(fp)
81128024:	00013306 	br	811284f4 <alt_log_private_printf+0x580>
        }
        else
        {
          alt_log_txchar(c,(char*)base);
81128028:	e0bffb07 	ldb	r2,-20(fp)
8112802c:	e0fffd17 	ldw	r3,-12(fp)
81128030:	180b883a 	mov	r5,r3
81128034:	1009883a 	mov	r4,r2
81128038:	1127eb80 	call	81127eb8 <alt_log_txchar>
        }
        break;
8112803c:	00012d06 	br	811284f4 <alt_log_private_printf+0x580>

      case pfState_firstFmtChar:
        if(c == '0')
81128040:	e0bffb07 	ldb	r2,-20(fp)
81128044:	10800c18 	cmpnei	r2,r2,48
81128048:	1000051e 	bne	r2,zero,81128060 <alt_log_private_printf+0xec>
        {
          fmtLeadingZero = 1;
8112804c:	00800044 	movi	r2,1
81128050:	e0bfed15 	stw	r2,-76(fp)
          state = pfState_otherFmtChar;
81128054:	00800084 	movi	r2,2
81128058:	e0bfec15 	stw	r2,-80(fp)
8112805c:	00012506 	br	811284f4 <alt_log_private_printf+0x580>
        }
        else if(c == '%')
81128060:	e0bffb07 	ldb	r2,-20(fp)
81128064:	10800958 	cmpnei	r2,r2,37
81128068:	1000071e 	bne	r2,zero,81128088 <alt_log_private_printf+0x114>
        {
          alt_log_txchar(c,(char*)base);
8112806c:	e0bffb07 	ldb	r2,-20(fp)
81128070:	e0fffd17 	ldw	r3,-12(fp)
81128074:	180b883a 	mov	r5,r3
81128078:	1009883a 	mov	r4,r2
8112807c:	1127eb80 	call	81127eb8 <alt_log_txchar>
          state = pfState_chars;
81128080:	e03fec15 	stw	zero,-80(fp)
81128084:	00011b06 	br	811284f4 <alt_log_private_printf+0x580>
        }
        else
        {
          state = pfState_otherFmtChar;
81128088:	00800084 	movi	r2,2
8112808c:	e0bfec15 	stw	r2,-80(fp)
        }
        break;

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
81128090:	e0bffb07 	ldb	r2,-20(fp)
81128094:	10800b98 	cmpnei	r2,r2,46
81128098:	1000021e 	bne	r2,zero,811280a4 <alt_log_private_printf+0x130>
        {
          fmtAfterDecimal = 0;
8112809c:	e03ff015 	stw	zero,-64(fp)
811280a0:	00011306 	br	811284f0 <alt_log_private_printf+0x57c>
        }
        else if('0' <= c && c <= '9')
811280a4:	e0bffb07 	ldb	r2,-20(fp)
811280a8:	10800c10 	cmplti	r2,r2,48
811280ac:	10001a1e 	bne	r2,zero,81128118 <alt_log_private_printf+0x1a4>
811280b0:	e0bffb07 	ldb	r2,-20(fp)
811280b4:	10800e88 	cmpgei	r2,r2,58
811280b8:	1000171e 	bne	r2,zero,81128118 <alt_log_private_printf+0x1a4>
        {
          c -= '0';
811280bc:	e0bffb03 	ldbu	r2,-20(fp)
811280c0:	10bff404 	addi	r2,r2,-48
811280c4:	e0bffb05 	stb	r2,-20(fp)
          if(fmtAfterDecimal < 0)     /* still before decimal */
811280c8:	e0bff017 	ldw	r2,-64(fp)
811280cc:	10000c0e 	bge	r2,zero,81128100 <alt_log_private_printf+0x18c>
          {
            if(fmtBeforeDecimal < 0)
811280d0:	e0bfef17 	ldw	r2,-68(fp)
811280d4:	1000020e 	bge	r2,zero,811280e0 <alt_log_private_printf+0x16c>
            {
              fmtBeforeDecimal = 0;
811280d8:	e03fef15 	stw	zero,-68(fp)
811280dc:	00000306 	br	811280ec <alt_log_private_printf+0x178>
            }
            else
            {
              fmtBeforeDecimal *= 10;
811280e0:	e0bfef17 	ldw	r2,-68(fp)
811280e4:	108002a4 	muli	r2,r2,10
811280e8:	e0bfef15 	stw	r2,-68(fp)
            }
            fmtBeforeDecimal += c;
811280ec:	e0bffb07 	ldb	r2,-20(fp)
811280f0:	e0ffef17 	ldw	r3,-68(fp)
811280f4:	1885883a 	add	r2,r3,r2
811280f8:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
811280fc:	0000fc06 	br	811284f0 <alt_log_private_printf+0x57c>
            }
            fmtBeforeDecimal += c;
          }
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
81128100:	e0bff017 	ldw	r2,-64(fp)
81128104:	10c002a4 	muli	r3,r2,10
81128108:	e0bffb07 	ldb	r2,-20(fp)
8112810c:	1885883a 	add	r2,r3,r2
81128110:	e0bff015 	stw	r2,-64(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
81128114:	0000f606 	br	811284f0 <alt_log_private_printf+0x57c>
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
          }
        }
        else if(c == 'l')
81128118:	e0bffb07 	ldb	r2,-20(fp)
8112811c:	10801b18 	cmpnei	r2,r2,108
81128120:	1000031e 	bne	r2,zero,81128130 <alt_log_private_printf+0x1bc>
        {
          fmtLong = 1;
81128124:	00800044 	movi	r2,1
81128128:	e0bfee15 	stw	r2,-72(fp)
8112812c:	0000f006 	br	811284f0 <alt_log_private_printf+0x57c>
        }
        else                  /* we're up to the letter which determines type */
        {
          switch(c)
81128130:	e0bffb07 	ldb	r2,-20(fp)
81128134:	10bfea04 	addi	r2,r2,-88
81128138:	10c00868 	cmpgeui	r3,r2,33
8112813c:	1800eb1e 	bne	r3,zero,811284ec <alt_log_private_printf+0x578>
81128140:	100690ba 	slli	r3,r2,2
81128144:	00a044f4 	movhi	r2,33043
81128148:	10a05604 	addi	r2,r2,-32424
8112814c:	1885883a 	add	r2,r3,r2
81128150:	10800017 	ldw	r2,0(r2)
81128154:	1000683a 	jmp	r2
81128158:	81128418 	cmpnei	r4,r16,18960
8112815c:	811284ec 	andhi	r4,r16,18963
81128160:	811284ec 	andhi	r4,r16,18963
81128164:	811284ec 	andhi	r4,r16,18963
81128168:	811284ec 	andhi	r4,r16,18963
8112816c:	811284ec 	andhi	r4,r16,18963
81128170:	811284ec 	andhi	r4,r16,18963
81128174:	811284ec 	andhi	r4,r16,18963
81128178:	811284ec 	andhi	r4,r16,18963
8112817c:	811284ec 	andhi	r4,r16,18963
81128180:	811284ec 	andhi	r4,r16,18963
81128184:	81128430 	cmpltui	r4,r16,18960
81128188:	811281dc 	xori	r4,r16,18951
8112818c:	811284ec 	andhi	r4,r16,18963
81128190:	811284ec 	andhi	r4,r16,18963
81128194:	811284ec 	andhi	r4,r16,18963
81128198:	811284ec 	andhi	r4,r16,18963
8112819c:	811281dc 	xori	r4,r16,18951
811281a0:	811284ec 	andhi	r4,r16,18963
811281a4:	811284ec 	andhi	r4,r16,18963
811281a8:	811284ec 	andhi	r4,r16,18963
811281ac:	811284ec 	andhi	r4,r16,18963
811281b0:	811284ec 	andhi	r4,r16,18963
811281b4:	811283f8 	rdprs	r4,r16,18959
811281b8:	811284ec 	andhi	r4,r16,18963
811281bc:	811284ec 	andhi	r4,r16,18963
811281c0:	811284ec 	andhi	r4,r16,18963
811281c4:	8112846c 	andhi	r4,r16,18961
811281c8:	811284ec 	andhi	r4,r16,18963
811281cc:	811283f0 	cmpltui	r4,r16,18959
811281d0:	811284ec 	andhi	r4,r16,18963
811281d4:	811284ec 	andhi	r4,r16,18963
811281d8:	81128408 	cmpgei	r4,r16,18960
                unsigned long vShrink;  /* used to count digits */
                int sign;
                int digitCount;

                /* Get the value */
                if(fmtLong)
811281dc:	e0bfee17 	ldw	r2,-72(fp)
811281e0:	10000e26 	beq	r2,zero,8112821c <alt_log_private_printf+0x2a8>
                {
                  if (fmtSigned)
811281e4:	e0bff217 	ldw	r2,-56(fp)
811281e8:	10000626 	beq	r2,zero,81128204 <alt_log_private_printf+0x290>
                  {
                    v = va_arg(args,long);
811281ec:	e0bffe17 	ldw	r2,-8(fp)
811281f0:	10c00104 	addi	r3,r2,4
811281f4:	e0fffe15 	stw	r3,-8(fp)
811281f8:	10800017 	ldw	r2,0(r2)
811281fc:	e0bff415 	stw	r2,-48(fp)
81128200:	00001306 	br	81128250 <alt_log_private_printf+0x2dc>
                  }
                  else
                  {
                    v = va_arg(args,unsigned long);
81128204:	e0bffe17 	ldw	r2,-8(fp)
81128208:	10c00104 	addi	r3,r2,4
8112820c:	e0fffe15 	stw	r3,-8(fp)
81128210:	10800017 	ldw	r2,0(r2)
81128214:	e0bff415 	stw	r2,-48(fp)
81128218:	00000d06 	br	81128250 <alt_log_private_printf+0x2dc>
                  }
                }
                else
                {
                  if (fmtSigned)
8112821c:	e0bff217 	ldw	r2,-56(fp)
81128220:	10000626 	beq	r2,zero,8112823c <alt_log_private_printf+0x2c8>
                  {
                    v = va_arg(args,int);
81128224:	e0bffe17 	ldw	r2,-8(fp)
81128228:	10c00104 	addi	r3,r2,4
8112822c:	e0fffe15 	stw	r3,-8(fp)
81128230:	10800017 	ldw	r2,0(r2)
81128234:	e0bff415 	stw	r2,-48(fp)
81128238:	00000506 	br	81128250 <alt_log_private_printf+0x2dc>
                  }
                  else
                  {
                    v = va_arg(args,unsigned int);
8112823c:	e0bffe17 	ldw	r2,-8(fp)
81128240:	10c00104 	addi	r3,r2,4
81128244:	e0fffe15 	stw	r3,-8(fp)
81128248:	10800017 	ldw	r2,0(r2)
8112824c:	e0bff415 	stw	r2,-48(fp)
                  }
                }

                /* Strip sign */
                sign = 0;
81128250:	e03ff715 	stw	zero,-36(fp)
                  /* (assumes sign bit is #31) */
                if( fmtSigned && (v & (0x80000000)) )
81128254:	e0bff217 	ldw	r2,-56(fp)
81128258:	10000726 	beq	r2,zero,81128278 <alt_log_private_printf+0x304>
8112825c:	e0bff417 	ldw	r2,-48(fp)
81128260:	1000050e 	bge	r2,zero,81128278 <alt_log_private_printf+0x304>
                  {
                  v = ~v + 1;
81128264:	e0bff417 	ldw	r2,-48(fp)
81128268:	0085c83a 	sub	r2,zero,r2
8112826c:	e0bff415 	stw	r2,-48(fp)
                  sign = 1;
81128270:	00800044 	movi	r2,1
81128274:	e0bff715 	stw	r2,-36(fp)
                  }

                /* Count digits, and get largest place value */
                vShrink = v;
81128278:	e0bff417 	ldw	r2,-48(fp)
8112827c:	e0bff615 	stw	r2,-40(fp)
                p = 1;
81128280:	00800044 	movi	r2,1
81128284:	e0bff515 	stw	r2,-44(fp)
                digitCount = 1;
81128288:	00800044 	movi	r2,1
8112828c:	e0bff815 	stw	r2,-32(fp)
                while( (vShrink = vShrink / fmtBase) > 0 )
81128290:	00000706 	br	811282b0 <alt_log_private_printf+0x33c>
                  {
                  digitCount++;
81128294:	e0bff817 	ldw	r2,-32(fp)
81128298:	10800044 	addi	r2,r2,1
8112829c:	e0bff815 	stw	r2,-32(fp)
                  p *= fmtBase;
811282a0:	e0bff117 	ldw	r2,-60(fp)
811282a4:	e0fff517 	ldw	r3,-44(fp)
811282a8:	1885383a 	mul	r2,r3,r2
811282ac:	e0bff515 	stw	r2,-44(fp)

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
                while( (vShrink = vShrink / fmtBase) > 0 )
811282b0:	e0bff117 	ldw	r2,-60(fp)
811282b4:	e0fff617 	ldw	r3,-40(fp)
811282b8:	1885203a 	divu	r2,r3,r2
811282bc:	e0bff615 	stw	r2,-40(fp)
811282c0:	e0bff617 	ldw	r2,-40(fp)
811282c4:	103ff31e 	bne	r2,zero,81128294 <__reset+0xfb108294>
                  digitCount++;
                  p *= fmtBase;
                  }

                /* Print leading characters & sign */
                fmtBeforeDecimal -= digitCount;
811282c8:	e0ffef17 	ldw	r3,-68(fp)
811282cc:	e0bff817 	ldw	r2,-32(fp)
811282d0:	1885c83a 	sub	r2,r3,r2
811282d4:	e0bfef15 	stw	r2,-68(fp)
                if(fmtLeadingZero)
811282d8:	e0bfed17 	ldw	r2,-76(fp)
811282dc:	10000e26 	beq	r2,zero,81128318 <alt_log_private_printf+0x3a4>
                  {
                  if(sign)
811282e0:	e0bff717 	ldw	r2,-36(fp)
811282e4:	10000726 	beq	r2,zero,81128304 <alt_log_private_printf+0x390>
                    {
                    alt_log_txchar('-',(char*)base);
811282e8:	e0bffd17 	ldw	r2,-12(fp)
811282ec:	100b883a 	mov	r5,r2
811282f0:	01000b44 	movi	r4,45
811282f4:	1127eb80 	call	81127eb8 <alt_log_txchar>
                    fmtBeforeDecimal--;
811282f8:	e0bfef17 	ldw	r2,-68(fp)
811282fc:	10bfffc4 	addi	r2,r2,-1
81128300:	e0bfef15 	stw	r2,-68(fp)
                    }
                  alt_log_repchar('0',fmtBeforeDecimal,base);
81128304:	e1bffd17 	ldw	r6,-12(fp)
81128308:	e17fef17 	ldw	r5,-68(fp)
8112830c:	01000c04 	movi	r4,48
81128310:	1127f0c0 	call	81127f0c <alt_log_repchar>
81128314:	00003206 	br	811283e0 <alt_log_private_printf+0x46c>
                  }
                else
                  {
                    if(sign)
81128318:	e0bff717 	ldw	r2,-36(fp)
8112831c:	10000326 	beq	r2,zero,8112832c <alt_log_private_printf+0x3b8>
                    {
                      fmtBeforeDecimal--;
81128320:	e0bfef17 	ldw	r2,-68(fp)
81128324:	10bfffc4 	addi	r2,r2,-1
81128328:	e0bfef15 	stw	r2,-68(fp)
                    }
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
8112832c:	e1bffd17 	ldw	r6,-12(fp)
81128330:	e17fef17 	ldw	r5,-68(fp)
81128334:	01000804 	movi	r4,32
81128338:	1127f0c0 	call	81127f0c <alt_log_repchar>
                    if(sign)
8112833c:	e0bff717 	ldw	r2,-36(fp)
81128340:	10002726 	beq	r2,zero,811283e0 <alt_log_private_printf+0x46c>
                    {
                      alt_log_txchar('-',(char*)base);
81128344:	e0bffd17 	ldw	r2,-12(fp)
81128348:	100b883a 	mov	r5,r2
8112834c:	01000b44 	movi	r4,45
81128350:	1127eb80 	call	81127eb8 <alt_log_txchar>
                    }
                  }

                /* Print numbery parts */
                while(p)
81128354:	00002206 	br	811283e0 <alt_log_private_printf+0x46c>
                  {
                  unsigned char d;

                  d = v / p;
81128358:	e0fff417 	ldw	r3,-48(fp)
8112835c:	e0bff517 	ldw	r2,-44(fp)
81128360:	1885203a 	divu	r2,r3,r2
81128364:	e0bff905 	stb	r2,-28(fp)
                  d += '0';
81128368:	e0bff903 	ldbu	r2,-28(fp)
8112836c:	10800c04 	addi	r2,r2,48
81128370:	e0bff905 	stb	r2,-28(fp)
                  if(d > '9')
81128374:	e0bff903 	ldbu	r2,-28(fp)
81128378:	10800eb0 	cmpltui	r2,r2,58
8112837c:	1000081e 	bne	r2,zero,811283a0 <alt_log_private_printf+0x42c>
                  {
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
81128380:	e0bff317 	ldw	r2,-52(fp)
81128384:	10000226 	beq	r2,zero,81128390 <alt_log_private_printf+0x41c>
81128388:	008001c4 	movi	r2,7
8112838c:	00000106 	br	81128394 <alt_log_private_printf+0x420>
81128390:	008009c4 	movi	r2,39
81128394:	e0fff903 	ldbu	r3,-28(fp)
81128398:	10c5883a 	add	r2,r2,r3
8112839c:	e0bff905 	stb	r2,-28(fp)
                  }
                  alt_log_txchar(d,(char*)base);
811283a0:	e0bff903 	ldbu	r2,-28(fp)
811283a4:	e0fffd17 	ldw	r3,-12(fp)
811283a8:	180b883a 	mov	r5,r3
811283ac:	1009883a 	mov	r4,r2
811283b0:	1127eb80 	call	81127eb8 <alt_log_txchar>

                  v = v % p;
811283b4:	e0bff417 	ldw	r2,-48(fp)
811283b8:	e0fff517 	ldw	r3,-44(fp)
811283bc:	10c9203a 	divu	r4,r2,r3
811283c0:	e0fff517 	ldw	r3,-44(fp)
811283c4:	20c7383a 	mul	r3,r4,r3
811283c8:	10c5c83a 	sub	r2,r2,r3
811283cc:	e0bff415 	stw	r2,-48(fp)
                  p = p / fmtBase;
811283d0:	e0bff117 	ldw	r2,-60(fp)
811283d4:	e0fff517 	ldw	r3,-44(fp)
811283d8:	1885203a 	divu	r2,r3,r2
811283dc:	e0bff515 	stw	r2,-44(fp)
                      alt_log_txchar('-',(char*)base);
                    }
                  }

                /* Print numbery parts */
                while(p)
811283e0:	e0bff517 	ldw	r2,-44(fp)
811283e4:	103fdc1e 	bne	r2,zero,81128358 <__reset+0xfb108358>
                  v = v % p;
                  p = p / fmtBase;
                  }
                }

              state = pfState_chars;
811283e8:	e03fec15 	stw	zero,-80(fp)
              break;
811283ec:	00003f06 	br	811284ec <alt_log_private_printf+0x578>

            case 'u':
              fmtSigned = 0;
811283f0:	e03ff215 	stw	zero,-56(fp)
              goto doIntegerPrint;
811283f4:	003f7906 	br	811281dc <__reset+0xfb1081dc>
            case 'o':
              fmtSigned = 0;
811283f8:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 8;
811283fc:	00800204 	movi	r2,8
81128400:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
81128404:	003f7506 	br	811281dc <__reset+0xfb1081dc>
            case 'x':
              fmtSigned = 0;
81128408:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
8112840c:	00800404 	movi	r2,16
81128410:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
81128414:	003f7106 	br	811281dc <__reset+0xfb1081dc>
            case 'X':
              fmtSigned = 0;
81128418:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
8112841c:	00800404 	movi	r2,16
81128420:	e0bff115 	stw	r2,-60(fp)
              fmtCase = 1;
81128424:	00800044 	movi	r2,1
81128428:	e0bff315 	stw	r2,-52(fp)
              goto doIntegerPrint;
8112842c:	003f6b06 	br	811281dc <__reset+0xfb1081dc>

            case 'c':
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
81128430:	e0bfef17 	ldw	r2,-68(fp)
81128434:	10bfffc4 	addi	r2,r2,-1
81128438:	e1bffd17 	ldw	r6,-12(fp)
8112843c:	100b883a 	mov	r5,r2
81128440:	01000804 	movi	r4,32
81128444:	1127f0c0 	call	81127f0c <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
81128448:	e0bffe17 	ldw	r2,-8(fp)
8112844c:	10c00104 	addi	r3,r2,4
81128450:	e0fffe15 	stw	r3,-8(fp)
81128454:	10800017 	ldw	r2,0(r2)
81128458:	e0fffd17 	ldw	r3,-12(fp)
8112845c:	180b883a 	mov	r5,r3
81128460:	1009883a 	mov	r4,r2
81128464:	1127eb80 	call	81127eb8 <alt_log_txchar>
              break;
81128468:	00002006 	br	811284ec <alt_log_private_printf+0x578>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
8112846c:	e0bffe17 	ldw	r2,-8(fp)
81128470:	10c00104 	addi	r3,r2,4
81128474:	e0fffe15 	stw	r3,-8(fp)
81128478:	10800017 	ldw	r2,0(r2)
8112847c:	e0bffa15 	stw	r2,-24(fp)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
81128480:	e43fef17 	ldw	r16,-68(fp)
81128484:	e13ffa17 	ldw	r4,-24(fp)
81128488:	1113ba80 	call	81113ba8 <strlen>
8112848c:	8085c83a 	sub	r2,r16,r2
81128490:	e1bffd17 	ldw	r6,-12(fp)
81128494:	100b883a 	mov	r5,r2
81128498:	01000804 	movi	r4,32
8112849c:	1127f0c0 	call	81127f0c <alt_log_repchar>

                while(*s)
811284a0:	00000b06 	br	811284d0 <alt_log_private_printf+0x55c>
                  alt_log_txchar(*s++,(char*)base);
811284a4:	e0bffa17 	ldw	r2,-24(fp)
811284a8:	10c00044 	addi	r3,r2,1
811284ac:	e0fffa15 	stw	r3,-24(fp)
811284b0:	10800003 	ldbu	r2,0(r2)
811284b4:	10803fcc 	andi	r2,r2,255
811284b8:	1080201c 	xori	r2,r2,128
811284bc:	10bfe004 	addi	r2,r2,-128
811284c0:	e0fffd17 	ldw	r3,-12(fp)
811284c4:	180b883a 	mov	r5,r3
811284c8:	1009883a 	mov	r4,r2
811284cc:	1127eb80 	call	81127eb8 <alt_log_txchar>
                char *s;

                s = va_arg(args,char *);
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);

                while(*s)
811284d0:	e0bffa17 	ldw	r2,-24(fp)
811284d4:	10800003 	ldbu	r2,0(r2)
811284d8:	10803fcc 	andi	r2,r2,255
811284dc:	1080201c 	xori	r2,r2,128
811284e0:	10bfe004 	addi	r2,r2,-128
811284e4:	103fef1e 	bne	r2,zero,811284a4 <__reset+0xfb1084a4>
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
811284e8:	0001883a 	nop
            } /* switch last letter of fmt */
          state=pfState_chars;
811284ec:	e03fec15 	stw	zero,-80(fp)
          }
        break;
811284f0:	0001883a 	nop
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;

  while(0 != (c = *w++))
811284f4:	e0bfeb17 	ldw	r2,-84(fp)
811284f8:	10c00044 	addi	r3,r2,1
811284fc:	e0ffeb15 	stw	r3,-84(fp)
81128500:	10800003 	ldbu	r2,0(r2)
81128504:	e0bffb05 	stb	r2,-20(fp)
81128508:	e0bffb07 	ldb	r2,-20(fp)
8112850c:	103eae1e 	bne	r2,zero,81127fc8 <__reset+0xfb107fc8>
          state=pfState_chars;
          }
        break;
      } /* switch */
    } /* while chars left */
  } /* printf */
81128510:	0001883a 	nop
81128514:	e6ffff04 	addi	sp,fp,-4
81128518:	dfc00217 	ldw	ra,8(sp)
8112851c:	df000117 	ldw	fp,4(sp)
81128520:	dc000017 	ldw	r16,0(sp)
81128524:	dec00304 	addi	sp,sp,12
81128528:	f800283a 	ret

8112852c <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
8112852c:	defff904 	addi	sp,sp,-28
81128530:	de00012e 	bgeu	sp,et,81128538 <alt_log_printf_proc+0xc>
81128534:	003b68fa 	trap	3
81128538:	dfc00315 	stw	ra,12(sp)
8112853c:	df000215 	stw	fp,8(sp)
81128540:	df000204 	addi	fp,sp,8
81128544:	e13fff15 	stw	r4,-4(fp)
81128548:	e1400215 	stw	r5,8(fp)
8112854c:	e1800315 	stw	r6,12(fp)
81128550:	e1c00415 	stw	r7,16(fp)
    va_list args;

    va_start (args, fmt);
81128554:	e0800204 	addi	r2,fp,8
81128558:	e0bffe15 	stw	r2,-8(fp)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
8112855c:	e0bffe17 	ldw	r2,-8(fp)
81128560:	100d883a 	mov	r6,r2
81128564:	01604834 	movhi	r5,33056
81128568:	294c2404 	addi	r5,r5,12432
8112856c:	e13fff17 	ldw	r4,-4(fp)
81128570:	1127f740 	call	81127f74 <alt_log_private_printf>
    return (0);
81128574:	0005883a 	mov	r2,zero
}
81128578:	e037883a 	mov	sp,fp
8112857c:	dfc00117 	ldw	ra,4(sp)
81128580:	df000017 	ldw	fp,0(sp)
81128584:	dec00504 	addi	sp,sp,20
81128588:	f800283a 	ret

8112858c <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
8112858c:	defff904 	addi	sp,sp,-28
81128590:	de00012e 	bgeu	sp,et,81128598 <altera_avalon_jtag_uart_report_log+0xc>
81128594:	003b68fa 	trap	3
81128598:	dfc00615 	stw	ra,24(sp)
8112859c:	df000515 	stw	fp,20(sp)
811285a0:	dc400415 	stw	r17,16(sp)
811285a4:	dc000315 	stw	r16,12(sp)
811285a8:	df000504 	addi	fp,sp,20
811285ac:	e13ffd15 	stw	r4,-12(fp)
    if (alt_log_jtag_uart_alarm_on_flag) {
811285b0:	d0a06a83 	ldbu	r2,-32342(gp)
811285b4:	10803fcc 	andi	r2,r2,255
811285b8:	10001426 	beq	r2,zero,8112860c <altera_avalon_jtag_uart_report_log+0x80>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
811285bc:	e0bffd17 	ldw	r2,-12(fp)
811285c0:	e0bffb15 	stw	r2,-20(fp)
        const char* header="JTAG Alarm:";
811285c4:	00a04534 	movhi	r2,33044
811285c8:	1081a104 	addi	r2,r2,1668
811285cc:	e0bffc15 	stw	r2,-16(fp)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
811285d0:	e0bffb17 	ldw	r2,-20(fp)
811285d4:	10800017 	ldw	r2,0(r2)
811285d8:	e1bffc17 	ldw	r6,-16(fp)
811285dc:	100b883a 	mov	r5,r2
811285e0:	e13ffb17 	ldw	r4,-20(fp)
811285e4:	112862c0 	call	8112862c <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811285e8:	d0e07117 	ldw	r3,-32316(gp)
        return ALT_LOG_JTAG_UART_TICKS;
811285ec:	00b33374 	movhi	r2,52429
811285f0:	10b33344 	addi	r2,r2,-13107
811285f4:	1888383a 	mulxuu	r4,r3,r2
811285f8:	1885383a 	mul	r2,r3,r2
811285fc:	1021883a 	mov	r16,r2
81128600:	2023883a 	mov	r17,r4
81128604:	8804d0fa 	srli	r2,r17,3
81128608:	00000106 	br	81128610 <altera_avalon_jtag_uart_report_log+0x84>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
8112860c:	0005883a 	mov	r2,zero
    }
}
81128610:	e6fffe04 	addi	sp,fp,-8
81128614:	dfc00317 	ldw	ra,12(sp)
81128618:	df000217 	ldw	fp,8(sp)
8112861c:	dc400117 	ldw	r17,4(sp)
81128620:	dc000017 	ldw	r16,0(sp)
81128624:	dec00404 	addi	sp,sp,16
81128628:	f800283a 	ret

8112862c <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
8112862c:	deffef04 	addi	sp,sp,-68
81128630:	de00012e 	bgeu	sp,et,81128638 <alt_log_jtag_uart_print_control_reg+0xc>
81128634:	003b68fa 	trap	3
81128638:	dfc01015 	stw	ra,64(sp)
8112863c:	df000f15 	stw	fp,60(sp)
81128640:	df000f04 	addi	fp,sp,60
81128644:	e13ffd15 	stw	r4,-12(fp)
81128648:	e17ffe15 	stw	r5,-8(fp)
8112864c:	e1bfff15 	stw	r6,-4(fp)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81128650:	e0bffe17 	ldw	r2,-8(fp)
81128654:	10800104 	addi	r2,r2,4
81128658:	10800037 	ldwio	r2,0(r2)
8112865c:	e0bff615 	stw	r2,-40(fp)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
81128660:	e0bff617 	ldw	r2,-40(fp)
81128664:	1004d43a 	srli	r2,r2,16
81128668:	e0bff715 	stw	r2,-36(fp)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
8112866c:	e0bff617 	ldw	r2,-40(fp)
81128670:	1080008c 	andi	r2,r2,2
81128674:	1004d07a 	srli	r2,r2,1
81128678:	e0bff815 	stw	r2,-32(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
8112867c:	e0bff617 	ldw	r2,-40(fp)
81128680:	1080004c 	andi	r2,r2,1
81128684:	e0bff915 	stw	r2,-28(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
81128688:	e0bff617 	ldw	r2,-40(fp)
8112868c:	1080400c 	andi	r2,r2,256
81128690:	1004d23a 	srli	r2,r2,8
81128694:	e0bffa15 	stw	r2,-24(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
81128698:	e0bff617 	ldw	r2,-40(fp)
8112869c:	1080800c 	andi	r2,r2,512
811286a0:	1004d27a 	srli	r2,r2,9
811286a4:	e0bffb15 	stw	r2,-20(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
811286a8:	e0bff617 	ldw	r2,-40(fp)
811286ac:	1081000c 	andi	r2,r2,1024
811286b0:	1004d2ba 	srli	r2,r2,10
811286b4:	e0bffc15 	stw	r2,-16(fp)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
811286b8:	e0bffd17 	ldw	r2,-12(fp)
811286bc:	10c01017 	ldw	r3,64(r2)
811286c0:	e0bffd17 	ldw	r2,-12(fp)
811286c4:	10800f17 	ldw	r2,60(r2)
811286c8:	1887c83a 	sub	r3,r3,r2
811286cc:	e0bff917 	ldw	r2,-28(fp)
811286d0:	d8800415 	stw	r2,16(sp)
811286d4:	e0bff817 	ldw	r2,-32(fp)
811286d8:	d8800315 	stw	r2,12(sp)
811286dc:	e0bffa17 	ldw	r2,-24(fp)
811286e0:	d8800215 	stw	r2,8(sp)
811286e4:	e0bffb17 	ldw	r2,-20(fp)
811286e8:	d8800115 	stw	r2,4(sp)
811286ec:	e0bffc17 	ldw	r2,-16(fp)
811286f0:	d8800015 	stw	r2,0(sp)
811286f4:	e1fff717 	ldw	r7,-36(fp)
811286f8:	180d883a 	mov	r6,r3
811286fc:	e17fff17 	ldw	r5,-4(fp)
81128700:	01204534 	movhi	r4,33044
81128704:	2101a404 	addi	r4,r4,1680
81128708:	112852c0 	call	8112852c <alt_log_printf_proc>
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
8112870c:	0001883a 	nop

}
81128710:	e037883a 	mov	sp,fp
81128714:	dfc00117 	ldw	ra,4(sp)
81128718:	df000017 	ldw	fp,0(sp)
8112871c:	dec00204 	addi	sp,sp,8
81128720:	f800283a 	ret

81128724 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
81128724:	defffb04 	addi	sp,sp,-20
81128728:	de00012e 	bgeu	sp,et,81128730 <alt_log_jtag_uart_startup_info+0xc>
8112872c:	003b68fa 	trap	3
81128730:	dfc00415 	stw	ra,16(sp)
81128734:	df000315 	stw	fp,12(sp)
81128738:	df000304 	addi	fp,sp,12
8112873c:	e13ffe15 	stw	r4,-8(fp)
81128740:	e17fff15 	stw	r5,-4(fp)
     const char* header="JTAG Startup Info:";
81128744:	00a04534 	movhi	r2,33044
81128748:	1081b604 	addi	r2,r2,1752
8112874c:	e0bffd15 	stw	r2,-12(fp)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
81128750:	e1bffd17 	ldw	r6,-12(fp)
81128754:	e17fff17 	ldw	r5,-4(fp)
81128758:	e13ffe17 	ldw	r4,-8(fp)
8112875c:	112862c0 	call	8112862c <alt_log_jtag_uart_print_control_reg>
     return;
81128760:	0001883a 	nop
}
81128764:	e037883a 	mov	sp,fp
81128768:	dfc00117 	ldw	ra,4(sp)
8112876c:	df000017 	ldw	fp,0(sp)
81128770:	dec00204 	addi	sp,sp,8
81128774:	f800283a 	ret

81128778 <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
81128778:	defffb04 	addi	sp,sp,-20
8112877c:	de00012e 	bgeu	sp,et,81128784 <alt_log_jtag_uart_isr_proc+0xc>
81128780:	003b68fa 	trap	3
81128784:	dfc00415 	stw	ra,16(sp)
81128788:	df000315 	stw	fp,12(sp)
8112878c:	df000304 	addi	fp,sp,12
81128790:	e13ffe15 	stw	r4,-8(fp)
81128794:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_jtag_uart_isr_on_flag) {
81128798:	d0a06ac3 	ldbu	r2,-32341(gp)
8112879c:	10803fcc 	andi	r2,r2,255
811287a0:	10000826 	beq	r2,zero,811287c4 <alt_log_jtag_uart_isr_proc+0x4c>
        const char* header="JTAG IRQ:";
811287a4:	00a04534 	movhi	r2,33044
811287a8:	1081bb04 	addi	r2,r2,1772
811287ac:	e0bffd15 	stw	r2,-12(fp)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
811287b0:	e1bffd17 	ldw	r6,-12(fp)
811287b4:	e17ffe17 	ldw	r5,-8(fp)
811287b8:	e13fff17 	ldw	r4,-4(fp)
811287bc:	112862c0 	call	8112862c <alt_log_jtag_uart_print_control_reg>
    }
    return;
811287c0:	0001883a 	nop
811287c4:	0001883a 	nop
}
811287c8:	e037883a 	mov	sp,fp
811287cc:	dfc00117 	ldw	ra,4(sp)
811287d0:	df000017 	ldw	fp,0(sp)
811287d4:	dec00204 	addi	sp,sp,8
811287d8:	f800283a 	ret

811287dc <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
811287dc:	defffa04 	addi	sp,sp,-24
811287e0:	de00012e 	bgeu	sp,et,811287e8 <alt_log_write+0xc>
811287e4:	003b68fa 	trap	3
811287e8:	dfc00515 	stw	ra,20(sp)
811287ec:	df000415 	stw	fp,16(sp)
811287f0:	df000404 	addi	fp,sp,16
811287f4:	e13ffe15 	stw	r4,-8(fp)
811287f8:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_write_on_flag) {
811287fc:	d0a06a03 	ldbu	r2,-32344(gp)
81128800:	10803fcc 	andi	r2,r2,255
81128804:	10004026 	beq	r2,zero,81128908 <alt_log_write+0x12c>
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
81128808:	e0bfff17 	ldw	r2,-4(fp)
8112880c:	10c00430 	cmpltui	r3,r2,16
81128810:	1800011e 	bne	r3,zero,81128818 <alt_log_write+0x3c>
81128814:	008003c4 	movi	r2,15
81128818:	e0bffd15 	stw	r2,-12(fp)

        if (length < 2) return;
8112881c:	e0bffd17 	ldw	r2,-12(fp)
81128820:	10800088 	cmpgei	r2,r2,2
81128824:	10003726 	beq	r2,zero,81128904 <alt_log_write+0x128>

        strncpy (alt_log_write_buf,ptr,length);
81128828:	e0bffd17 	ldw	r2,-12(fp)
8112882c:	100d883a 	mov	r6,r2
81128830:	e17ffe17 	ldw	r5,-8(fp)
81128834:	01204574 	movhi	r4,33045
81128838:	21304e04 	addi	r4,r4,-16072
8112883c:	113c9500 	call	8113c950 <strncpy>
    alt_log_write_buf[length-1]='\n';
81128840:	e0bffd17 	ldw	r2,-12(fp)
81128844:	10ffffc4 	addi	r3,r2,-1
81128848:	00a04574 	movhi	r2,33045
8112884c:	10b04e04 	addi	r2,r2,-16072
81128850:	10c5883a 	add	r2,r2,r3
81128854:	00c00284 	movi	r3,10
81128858:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
8112885c:	00a04574 	movhi	r2,33045
81128860:	10b04e04 	addi	r2,r2,-16072
81128864:	e0fffd17 	ldw	r3,-12(fp)
81128868:	10c5883a 	add	r2,r2,r3
8112886c:	00c00344 	movi	r3,13
81128870:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length+1]='\0';
81128874:	e0bffd17 	ldw	r2,-12(fp)
81128878:	10c00044 	addi	r3,r2,1
8112887c:	00a04574 	movhi	r2,33045
81128880:	10b04e04 	addi	r2,r2,-16072
81128884:	10c5883a 	add	r2,r2,r3
81128888:	10000005 	stb	zero,0(r2)

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
8112888c:	e03ffc15 	stw	zero,-16(fp)
81128890:	00001306 	br	811288e0 <alt_log_write+0x104>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
81128894:	00a04574 	movhi	r2,33045
81128898:	10b04e04 	addi	r2,r2,-16072
8112889c:	e0fffc17 	ldw	r3,-16(fp)
811288a0:	10c5883a 	add	r2,r2,r3
811288a4:	10800003 	ldbu	r2,0(r2)
811288a8:	10803fcc 	andi	r2,r2,255
811288ac:	1080201c 	xori	r2,r2,128
811288b0:	10bfe004 	addi	r2,r2,-128
811288b4:	10800118 	cmpnei	r2,r2,4
811288b8:	1000061e 	bne	r2,zero,811288d4 <alt_log_write+0xf8>
            alt_log_write_buf[temp_cnt]='D';
811288bc:	00a04574 	movhi	r2,33045
811288c0:	10b04e04 	addi	r2,r2,-16072
811288c4:	e0fffc17 	ldw	r3,-16(fp)
811288c8:	10c5883a 	add	r2,r2,r3
811288cc:	00c01104 	movi	r3,68
811288d0:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
    alt_log_write_buf[length+1]='\0';

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
811288d4:	e0bffc17 	ldw	r2,-16(fp)
811288d8:	10800044 	addi	r2,r2,1
811288dc:	e0bffc15 	stw	r2,-16(fp)
811288e0:	e0fffc17 	ldw	r3,-16(fp)
811288e4:	e0bffd17 	ldw	r2,-12(fp)
811288e8:	18bfea16 	blt	r3,r2,81128894 <__reset+0xfb108894>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
811288ec:	01604574 	movhi	r5,33045
811288f0:	29704e04 	addi	r5,r5,-16072
811288f4:	01204534 	movhi	r4,33044
811288f8:	2101be04 	addi	r4,r4,1784
811288fc:	112852c0 	call	8112852c <alt_log_printf_proc>
81128900:	00000106 	br	81128908 <alt_log_write+0x12c>
{
    if (alt_log_write_on_flag) {
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;

        if (length < 2) return;
81128904:	0001883a 	nop
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
    }
}
81128908:	e037883a 	mov	sp,fp
8112890c:	dfc00117 	ldw	ra,4(sp)
81128910:	df000017 	ldw	fp,0(sp)
81128914:	dec00204 	addi	sp,sp,8
81128918:	f800283a 	ret

8112891c <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
8112891c:	defffe04 	addi	sp,sp,-8
81128920:	de00012e 	bgeu	sp,et,81128928 <alt_log_system_clock+0xc>
81128924:	003b68fa 	trap	3
81128928:	dfc00115 	stw	ra,4(sp)
8112892c:	df000015 	stw	fp,0(sp)
81128930:	d839883a 	mov	fp,sp
    if (alt_log_sys_clk_on_flag) {
81128934:	d0a06a43 	ldbu	r2,-32343(gp)
81128938:	10803fcc 	andi	r2,r2,255
8112893c:	10000e26 	beq	r2,zero,81128978 <alt_log_system_clock+0x5c>
    alt_log_sys_clk_count++;
81128940:	d0a06d17 	ldw	r2,-32332(gp)
81128944:	10800044 	addi	r2,r2,1
81128948:	d0a06d15 	stw	r2,-32332(gp)
8112894c:	d0a07117 	ldw	r2,-32316(gp)
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
81128950:	d0e06d17 	ldw	r3,-32332(gp)
81128954:	10c0082e 	bgeu	r2,r3,81128978 <alt_log_system_clock+0x5c>
            alt_log_sys_clk_count = 0;
81128958:	d0206d15 	stw	zero,-32332(gp)
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
8112895c:	d0a06c17 	ldw	r2,-32336(gp)
81128960:	10c00044 	addi	r3,r2,1
81128964:	d0e06c15 	stw	r3,-32336(gp)
81128968:	100b883a 	mov	r5,r2
8112896c:	01204534 	movhi	r4,33044
81128970:	2101c204 	addi	r4,r4,1800
81128974:	112852c0 	call	8112852c <alt_log_printf_proc>
        }
    }
}
81128978:	0001883a 	nop
8112897c:	e037883a 	mov	sp,fp
81128980:	dfc00117 	ldw	ra,4(sp)
81128984:	df000017 	ldw	fp,0(sp)
81128988:	dec00204 	addi	sp,sp,8
8112898c:	f800283a 	ret

81128990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81128990:	defffe04 	addi	sp,sp,-8
81128994:	de00012e 	bgeu	sp,et,8112899c <alt_get_errno+0xc>
81128998:	003b68fa 	trap	3
8112899c:	dfc00115 	stw	ra,4(sp)
811289a0:	df000015 	stw	fp,0(sp)
811289a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811289a8:	d0a01017 	ldw	r2,-32704(gp)
811289ac:	10000326 	beq	r2,zero,811289bc <alt_get_errno+0x2c>
811289b0:	d0a01017 	ldw	r2,-32704(gp)
811289b4:	103ee83a 	callr	r2
811289b8:	00000106 	br	811289c0 <alt_get_errno+0x30>
811289bc:	d0a06104 	addi	r2,gp,-32380
}
811289c0:	e037883a 	mov	sp,fp
811289c4:	dfc00117 	ldw	ra,4(sp)
811289c8:	df000017 	ldw	fp,0(sp)
811289cc:	dec00204 	addi	sp,sp,8
811289d0:	f800283a 	ret

811289d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
811289d4:	defff904 	addi	sp,sp,-28
811289d8:	de00012e 	bgeu	sp,et,811289e0 <lseek+0xc>
811289dc:	003b68fa 	trap	3
811289e0:	dfc00615 	stw	ra,24(sp)
811289e4:	df000515 	stw	fp,20(sp)
811289e8:	df000504 	addi	fp,sp,20
811289ec:	e13ffd15 	stw	r4,-12(fp)
811289f0:	e17ffe15 	stw	r5,-8(fp)
811289f4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
811289f8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811289fc:	e0bffd17 	ldw	r2,-12(fp)
81128a00:	10000616 	blt	r2,zero,81128a1c <lseek+0x48>
81128a04:	e0bffd17 	ldw	r2,-12(fp)
81128a08:	10c00324 	muli	r3,r2,12
81128a0c:	00a04534 	movhi	r2,33044
81128a10:	10858e04 	addi	r2,r2,5688
81128a14:	1885883a 	add	r2,r3,r2
81128a18:	00000106 	br	81128a20 <lseek+0x4c>
81128a1c:	0005883a 	mov	r2,zero
81128a20:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81128a24:	e0bffc17 	ldw	r2,-16(fp)
81128a28:	10001026 	beq	r2,zero,81128a6c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81128a2c:	e0bffc17 	ldw	r2,-16(fp)
81128a30:	10800017 	ldw	r2,0(r2)
81128a34:	10800717 	ldw	r2,28(r2)
81128a38:	10000926 	beq	r2,zero,81128a60 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81128a3c:	e0bffc17 	ldw	r2,-16(fp)
81128a40:	10800017 	ldw	r2,0(r2)
81128a44:	10800717 	ldw	r2,28(r2)
81128a48:	e1bfff17 	ldw	r6,-4(fp)
81128a4c:	e17ffe17 	ldw	r5,-8(fp)
81128a50:	e13ffc17 	ldw	r4,-16(fp)
81128a54:	103ee83a 	callr	r2
81128a58:	e0bffb15 	stw	r2,-20(fp)
81128a5c:	00000506 	br	81128a74 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81128a60:	00bfde84 	movi	r2,-134
81128a64:	e0bffb15 	stw	r2,-20(fp)
81128a68:	00000206 	br	81128a74 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
81128a6c:	00bfebc4 	movi	r2,-81
81128a70:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81128a74:	e0bffb17 	ldw	r2,-20(fp)
81128a78:	1000070e 	bge	r2,zero,81128a98 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
81128a7c:	11289900 	call	81128990 <alt_get_errno>
81128a80:	1007883a 	mov	r3,r2
81128a84:	e0bffb17 	ldw	r2,-20(fp)
81128a88:	0085c83a 	sub	r2,zero,r2
81128a8c:	18800015 	stw	r2,0(r3)
    rc = -1;
81128a90:	00bfffc4 	movi	r2,-1
81128a94:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81128a98:	e0bffb17 	ldw	r2,-20(fp)
}
81128a9c:	e037883a 	mov	sp,fp
81128aa0:	dfc00117 	ldw	ra,4(sp)
81128aa4:	df000017 	ldw	fp,0(sp)
81128aa8:	dec00204 	addi	sp,sp,8
81128aac:	f800283a 	ret

81128ab0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81128ab0:	defff904 	addi	sp,sp,-28
81128ab4:	de00012e 	bgeu	sp,et,81128abc <alt_main+0xc>
81128ab8:	003b68fa 	trap	3
81128abc:	dfc00615 	stw	ra,24(sp)
81128ac0:	df000515 	stw	fp,20(sp)
81128ac4:	df000504 	addi	fp,sp,20
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
81128ac8:	d0a01217 	ldw	r2,-32696(gp)
81128acc:	10800058 	cmpnei	r2,r2,1
81128ad0:	1000031e 	bne	r2,zero,81128ae0 <alt_main+0x30>
81128ad4:	01204534 	movhi	r4,33044
81128ad8:	2101c804 	addi	r4,r4,1824
81128adc:	112852c0 	call	8112852c <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81128ae0:	0009883a 	mov	r4,zero
81128ae4:	11336cc0 	call	811336cc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
81128ae8:	d0a01217 	ldw	r2,-32696(gp)
81128aec:	10800058 	cmpnei	r2,r2,1
81128af0:	1000031e 	bne	r2,zero,81128b00 <alt_main+0x50>
81128af4:	01204534 	movhi	r4,33044
81128af8:	2101d604 	addi	r4,r4,1880
81128afc:	112852c0 	call	8112852c <alt_log_printf_proc>
  ALT_OS_INIT();
81128b00:	112a1600 	call	8112a160 <OSInit>
81128b04:	01000044 	movi	r4,1
81128b08:	112fe7c0 	call	8112fe7c <OSSemCreate>
81128b0c:	d0a07415 	stw	r2,-32304(gp)
81128b10:	01000044 	movi	r4,1
81128b14:	112fe7c0 	call	8112fe7c <OSSemCreate>
81128b18:	d0a07615 	stw	r2,-32296(gp)
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
81128b1c:	d0a01217 	ldw	r2,-32696(gp)
81128b20:	10800058 	cmpnei	r2,r2,1
81128b24:	1000031e 	bne	r2,zero,81128b34 <alt_main+0x84>
81128b28:	01204534 	movhi	r4,33044
81128b2c:	2101e404 	addi	r4,r4,1936
81128b30:	112852c0 	call	8112852c <alt_log_printf_proc>
81128b34:	d0a06804 	addi	r2,gp,-32352
81128b38:	e0bffc15 	stw	r2,-16(fp)
81128b3c:	00800044 	movi	r2,1
81128b40:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81128b44:	e0bffd0b 	ldhu	r2,-12(fp)
81128b48:	1009883a 	mov	r4,r2
81128b4c:	112fe7c0 	call	8112fe7c <OSSemCreate>
81128b50:	1007883a 	mov	r3,r2
81128b54:	e0bffc17 	ldw	r2,-16(fp)
81128b58:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
81128b5c:	d0a01217 	ldw	r2,-32696(gp)
81128b60:	10800058 	cmpnei	r2,r2,1
81128b64:	1000031e 	bne	r2,zero,81128b74 <alt_main+0xc4>
81128b68:	01204534 	movhi	r4,33044
81128b6c:	2101f204 	addi	r4,r4,1992
81128b70:	112852c0 	call	8112852c <alt_log_printf_proc>
  alt_sys_init();
81128b74:	113370c0 	call	8113370c <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
81128b78:	d0a01217 	ldw	r2,-32696(gp)
81128b7c:	10800058 	cmpnei	r2,r2,1
81128b80:	1000031e 	bne	r2,zero,81128b90 <alt_main+0xe0>
81128b84:	01204534 	movhi	r4,33044
81128b88:	2101fc04 	addi	r4,r4,2032
81128b8c:	112852c0 	call	8112852c <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
81128b90:	d0a01217 	ldw	r2,-32696(gp)
81128b94:	10800058 	cmpnei	r2,r2,1
81128b98:	1000031e 	bne	r2,zero,81128ba8 <alt_main+0xf8>
81128b9c:	01204534 	movhi	r4,33044
81128ba0:	21020504 	addi	r4,r4,2068
81128ba4:	112852c0 	call	8112852c <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81128ba8:	01a04534 	movhi	r6,33044
81128bac:	31820d04 	addi	r6,r6,2100
81128bb0:	01604534 	movhi	r5,33044
81128bb4:	29421204 	addi	r5,r5,2120
81128bb8:	01204534 	movhi	r4,33044
81128bbc:	21021204 	addi	r4,r4,2120
81128bc0:	113c0cc0 	call	8113c0cc <alt_io_redirect>
#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
81128bc4:	d0a01217 	ldw	r2,-32696(gp)
81128bc8:	10800058 	cmpnei	r2,r2,1
81128bcc:	1000031e 	bne	r2,zero,81128bdc <alt_main+0x12c>
81128bd0:	01204534 	movhi	r4,33044
81128bd4:	21021604 	addi	r4,r4,2136
81128bd8:	112852c0 	call	8112852c <alt_log_printf_proc>
  _do_ctors ();
81128bdc:	113b9dc0 	call	8113b9dc <_do_ctors>
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
81128be0:	d0a01217 	ldw	r2,-32696(gp)
81128be4:	10800058 	cmpnei	r2,r2,1
81128be8:	1000031e 	bne	r2,zero,81128bf8 <alt_main+0x148>
81128bec:	01204534 	movhi	r4,33044
81128bf0:	21022104 	addi	r4,r4,2180
81128bf4:	112852c0 	call	8112852c <alt_log_printf_proc>
  atexit (_do_dtors);
81128bf8:	01204534 	movhi	r4,33044
81128bfc:	212e9104 	addi	r4,r4,-17852
81128c00:	113c8800 	call	8113c880 <atexit>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
81128c04:	d0a01217 	ldw	r2,-32696(gp)
81128c08:	10800058 	cmpnei	r2,r2,1
81128c0c:	1000031e 	bne	r2,zero,81128c1c <alt_main+0x16c>
81128c10:	01204534 	movhi	r4,33044
81128c14:	21022904 	addi	r4,r4,2212
81128c18:	112852c0 	call	8112852c <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
81128c1c:	d0a06e17 	ldw	r2,-32328(gp)
81128c20:	d0e06f17 	ldw	r3,-32324(gp)
81128c24:	d1207017 	ldw	r4,-32320(gp)
81128c28:	200d883a 	mov	r6,r4
81128c2c:	180b883a 	mov	r5,r3
81128c30:	1009883a 	mov	r4,r2
81128c34:	110bfd40 	call	8110bfd4 <main>
81128c38:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
81128c3c:	01000044 	movi	r4,1
81128c40:	11279dc0 	call	811279dc <close>
  exit (result);
81128c44:	e13ffb17 	ldw	r4,-20(fp)
81128c48:	113c8940 	call	8113c894 <exit>

81128c4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81128c4c:	defffe04 	addi	sp,sp,-8
81128c50:	de00012e 	bgeu	sp,et,81128c58 <alt_get_errno+0xc>
81128c54:	003b68fa 	trap	3
81128c58:	dfc00115 	stw	ra,4(sp)
81128c5c:	df000015 	stw	fp,0(sp)
81128c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81128c64:	d0a01017 	ldw	r2,-32704(gp)
81128c68:	10000326 	beq	r2,zero,81128c78 <alt_get_errno+0x2c>
81128c6c:	d0a01017 	ldw	r2,-32704(gp)
81128c70:	103ee83a 	callr	r2
81128c74:	00000106 	br	81128c7c <alt_get_errno+0x30>
81128c78:	d0a06104 	addi	r2,gp,-32380
}
81128c7c:	e037883a 	mov	sp,fp
81128c80:	dfc00117 	ldw	ra,4(sp)
81128c84:	df000017 	ldw	fp,0(sp)
81128c88:	dec00204 	addi	sp,sp,8
81128c8c:	f800283a 	ret

81128c90 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81128c90:	defffd04 	addi	sp,sp,-12
81128c94:	de00012e 	bgeu	sp,et,81128c9c <alt_file_locked+0xc>
81128c98:	003b68fa 	trap	3
81128c9c:	df000215 	stw	fp,8(sp)
81128ca0:	df000204 	addi	fp,sp,8
81128ca4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81128ca8:	e0bfff17 	ldw	r2,-4(fp)
81128cac:	10800217 	ldw	r2,8(r2)
81128cb0:	10d00034 	orhi	r3,r2,16384
81128cb4:	e0bfff17 	ldw	r2,-4(fp)
81128cb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81128cbc:	e03ffe15 	stw	zero,-8(fp)
81128cc0:	00001d06 	br	81128d38 <alt_file_locked+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81128cc4:	00a04534 	movhi	r2,33044
81128cc8:	10858e04 	addi	r2,r2,5688
81128ccc:	e0fffe17 	ldw	r3,-8(fp)
81128cd0:	18c00324 	muli	r3,r3,12
81128cd4:	10c5883a 	add	r2,r2,r3
81128cd8:	10c00017 	ldw	r3,0(r2)
81128cdc:	e0bfff17 	ldw	r2,-4(fp)
81128ce0:	10800017 	ldw	r2,0(r2)
81128ce4:	1880111e 	bne	r3,r2,81128d2c <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81128ce8:	00a04534 	movhi	r2,33044
81128cec:	10858e04 	addi	r2,r2,5688
81128cf0:	e0fffe17 	ldw	r3,-8(fp)
81128cf4:	18c00324 	muli	r3,r3,12
81128cf8:	10c5883a 	add	r2,r2,r3
81128cfc:	10800204 	addi	r2,r2,8
81128d00:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81128d04:	1000090e 	bge	r2,zero,81128d2c <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81128d08:	e0bffe17 	ldw	r2,-8(fp)
81128d0c:	10c00324 	muli	r3,r2,12
81128d10:	00a04534 	movhi	r2,33044
81128d14:	10858e04 	addi	r2,r2,5688
81128d18:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81128d1c:	e0bfff17 	ldw	r2,-4(fp)
81128d20:	18800226 	beq	r3,r2,81128d2c <alt_file_locked+0x9c>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81128d24:	00bffcc4 	movi	r2,-13
81128d28:	00000806 	br	81128d4c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81128d2c:	e0bffe17 	ldw	r2,-8(fp)
81128d30:	10800044 	addi	r2,r2,1
81128d34:	e0bffe15 	stw	r2,-8(fp)
81128d38:	d0a00f17 	ldw	r2,-32708(gp)
81128d3c:	1007883a 	mov	r3,r2
81128d40:	e0bffe17 	ldw	r2,-8(fp)
81128d44:	18bfdf2e 	bgeu	r3,r2,81128cc4 <__reset+0xfb108cc4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
81128d48:	0005883a 	mov	r2,zero
}
81128d4c:	e037883a 	mov	sp,fp
81128d50:	df000017 	ldw	fp,0(sp)
81128d54:	dec00104 	addi	sp,sp,4
81128d58:	f800283a 	ret

81128d5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81128d5c:	defff604 	addi	sp,sp,-40
81128d60:	de00012e 	bgeu	sp,et,81128d68 <open+0xc>
81128d64:	003b68fa 	trap	3
81128d68:	dfc00915 	stw	ra,36(sp)
81128d6c:	df000815 	stw	fp,32(sp)
81128d70:	df000804 	addi	fp,sp,32
81128d74:	e13ffd15 	stw	r4,-12(fp)
81128d78:	e17ffe15 	stw	r5,-8(fp)
81128d7c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81128d80:	00bfffc4 	movi	r2,-1
81128d84:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81128d88:	00bffb44 	movi	r2,-19
81128d8c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81128d90:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81128d94:	d1600d04 	addi	r5,gp,-32716
81128d98:	e13ffd17 	ldw	r4,-12(fp)
81128d9c:	113baac0 	call	8113baac <alt_find_dev>
81128da0:	e0bff815 	stw	r2,-32(fp)
81128da4:	e0bff817 	ldw	r2,-32(fp)
81128da8:	1000051e 	bne	r2,zero,81128dc0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81128dac:	e13ffd17 	ldw	r4,-12(fp)
81128db0:	113bb440 	call	8113bb44 <alt_find_file>
81128db4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81128db8:	00800044 	movi	r2,1
81128dbc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81128dc0:	e0bff817 	ldw	r2,-32(fp)
81128dc4:	10002926 	beq	r2,zero,81128e6c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
81128dc8:	e13ff817 	ldw	r4,-32(fp)
81128dcc:	113bc540 	call	8113bc54 <alt_get_fd>
81128dd0:	e0bff915 	stw	r2,-28(fp)
81128dd4:	e0bff917 	ldw	r2,-28(fp)
81128dd8:	1000030e 	bge	r2,zero,81128de8 <open+0x8c>
    {
      status = index;
81128ddc:	e0bff917 	ldw	r2,-28(fp)
81128de0:	e0bffa15 	stw	r2,-24(fp)
81128de4:	00002306 	br	81128e74 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
81128de8:	e0bff917 	ldw	r2,-28(fp)
81128dec:	10c00324 	muli	r3,r2,12
81128df0:	00a04534 	movhi	r2,33044
81128df4:	10858e04 	addi	r2,r2,5688
81128df8:	1885883a 	add	r2,r3,r2
81128dfc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
81128e00:	e0fffe17 	ldw	r3,-8(fp)
81128e04:	00900034 	movhi	r2,16384
81128e08:	10bfffc4 	addi	r2,r2,-1
81128e0c:	1886703a 	and	r3,r3,r2
81128e10:	e0bffc17 	ldw	r2,-16(fp)
81128e14:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81128e18:	e0bffb17 	ldw	r2,-20(fp)
81128e1c:	1000051e 	bne	r2,zero,81128e34 <open+0xd8>
81128e20:	e13ffc17 	ldw	r4,-16(fp)
81128e24:	1128c900 	call	81128c90 <alt_file_locked>
81128e28:	e0bffa15 	stw	r2,-24(fp)
81128e2c:	e0bffa17 	ldw	r2,-24(fp)
81128e30:	10001016 	blt	r2,zero,81128e74 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
81128e34:	e0bff817 	ldw	r2,-32(fp)
81128e38:	10800317 	ldw	r2,12(r2)
81128e3c:	10000826 	beq	r2,zero,81128e60 <open+0x104>
81128e40:	e0bff817 	ldw	r2,-32(fp)
81128e44:	10800317 	ldw	r2,12(r2)
81128e48:	e1ffff17 	ldw	r7,-4(fp)
81128e4c:	e1bffe17 	ldw	r6,-8(fp)
81128e50:	e17ffd17 	ldw	r5,-12(fp)
81128e54:	e13ffc17 	ldw	r4,-16(fp)
81128e58:	103ee83a 	callr	r2
81128e5c:	00000106 	br	81128e64 <open+0x108>
81128e60:	0005883a 	mov	r2,zero
81128e64:	e0bffa15 	stw	r2,-24(fp)
81128e68:	00000206 	br	81128e74 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
81128e6c:	00bffb44 	movi	r2,-19
81128e70:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
81128e74:	e0bffa17 	ldw	r2,-24(fp)
81128e78:	1000090e 	bge	r2,zero,81128ea0 <open+0x144>
  {
    alt_release_fd (index);  
81128e7c:	e13ff917 	ldw	r4,-28(fp)
81128e80:	11290000 	call	81129000 <alt_release_fd>
    ALT_ERRNO = -status;
81128e84:	1128c4c0 	call	81128c4c <alt_get_errno>
81128e88:	1007883a 	mov	r3,r2
81128e8c:	e0bffa17 	ldw	r2,-24(fp)
81128e90:	0085c83a 	sub	r2,zero,r2
81128e94:	18800015 	stw	r2,0(r3)
    return -1;
81128e98:	00bfffc4 	movi	r2,-1
81128e9c:	00000106 	br	81128ea4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
81128ea0:	e0bff917 	ldw	r2,-28(fp)
}
81128ea4:	e037883a 	mov	sp,fp
81128ea8:	dfc00117 	ldw	ra,4(sp)
81128eac:	df000017 	ldw	fp,0(sp)
81128eb0:	dec00204 	addi	sp,sp,8
81128eb4:	f800283a 	ret

81128eb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81128eb8:	defffe04 	addi	sp,sp,-8
81128ebc:	de00012e 	bgeu	sp,et,81128ec4 <alt_get_errno+0xc>
81128ec0:	003b68fa 	trap	3
81128ec4:	dfc00115 	stw	ra,4(sp)
81128ec8:	df000015 	stw	fp,0(sp)
81128ecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81128ed0:	d0a01017 	ldw	r2,-32704(gp)
81128ed4:	10000326 	beq	r2,zero,81128ee4 <alt_get_errno+0x2c>
81128ed8:	d0a01017 	ldw	r2,-32704(gp)
81128edc:	103ee83a 	callr	r2
81128ee0:	00000106 	br	81128ee8 <alt_get_errno+0x30>
81128ee4:	d0a06104 	addi	r2,gp,-32380
}
81128ee8:	e037883a 	mov	sp,fp
81128eec:	dfc00117 	ldw	ra,4(sp)
81128ef0:	df000017 	ldw	fp,0(sp)
81128ef4:	dec00204 	addi	sp,sp,8
81128ef8:	f800283a 	ret

81128efc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81128efc:	defff904 	addi	sp,sp,-28
81128f00:	de00012e 	bgeu	sp,et,81128f08 <read+0xc>
81128f04:	003b68fa 	trap	3
81128f08:	dfc00615 	stw	ra,24(sp)
81128f0c:	df000515 	stw	fp,20(sp)
81128f10:	df000504 	addi	fp,sp,20
81128f14:	e13ffd15 	stw	r4,-12(fp)
81128f18:	e17ffe15 	stw	r5,-8(fp)
81128f1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81128f20:	e0bffd17 	ldw	r2,-12(fp)
81128f24:	10000616 	blt	r2,zero,81128f40 <read+0x44>
81128f28:	e0bffd17 	ldw	r2,-12(fp)
81128f2c:	10c00324 	muli	r3,r2,12
81128f30:	00a04534 	movhi	r2,33044
81128f34:	10858e04 	addi	r2,r2,5688
81128f38:	1885883a 	add	r2,r3,r2
81128f3c:	00000106 	br	81128f44 <read+0x48>
81128f40:	0005883a 	mov	r2,zero
81128f44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81128f48:	e0bffb17 	ldw	r2,-20(fp)
81128f4c:	10002226 	beq	r2,zero,81128fd8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81128f50:	e0bffb17 	ldw	r2,-20(fp)
81128f54:	10800217 	ldw	r2,8(r2)
81128f58:	108000cc 	andi	r2,r2,3
81128f5c:	10800060 	cmpeqi	r2,r2,1
81128f60:	1000181e 	bne	r2,zero,81128fc4 <read+0xc8>
        (fd->dev->read))
81128f64:	e0bffb17 	ldw	r2,-20(fp)
81128f68:	10800017 	ldw	r2,0(r2)
81128f6c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81128f70:	10001426 	beq	r2,zero,81128fc4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81128f74:	e0bffb17 	ldw	r2,-20(fp)
81128f78:	10800017 	ldw	r2,0(r2)
81128f7c:	10800517 	ldw	r2,20(r2)
81128f80:	e0ffff17 	ldw	r3,-4(fp)
81128f84:	180d883a 	mov	r6,r3
81128f88:	e17ffe17 	ldw	r5,-8(fp)
81128f8c:	e13ffb17 	ldw	r4,-20(fp)
81128f90:	103ee83a 	callr	r2
81128f94:	e0bffc15 	stw	r2,-16(fp)
81128f98:	e0bffc17 	ldw	r2,-16(fp)
81128f9c:	1000070e 	bge	r2,zero,81128fbc <read+0xc0>
        {
          ALT_ERRNO = -rval;
81128fa0:	1128eb80 	call	81128eb8 <alt_get_errno>
81128fa4:	1007883a 	mov	r3,r2
81128fa8:	e0bffc17 	ldw	r2,-16(fp)
81128fac:	0085c83a 	sub	r2,zero,r2
81128fb0:	18800015 	stw	r2,0(r3)
          return -1;
81128fb4:	00bfffc4 	movi	r2,-1
81128fb8:	00000c06 	br	81128fec <read+0xf0>
        }
        return rval;
81128fbc:	e0bffc17 	ldw	r2,-16(fp)
81128fc0:	00000a06 	br	81128fec <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
81128fc4:	1128eb80 	call	81128eb8 <alt_get_errno>
81128fc8:	1007883a 	mov	r3,r2
81128fcc:	00800344 	movi	r2,13
81128fd0:	18800015 	stw	r2,0(r3)
81128fd4:	00000406 	br	81128fe8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81128fd8:	1128eb80 	call	81128eb8 <alt_get_errno>
81128fdc:	1007883a 	mov	r3,r2
81128fe0:	00801444 	movi	r2,81
81128fe4:	18800015 	stw	r2,0(r3)
  }
  return -1;
81128fe8:	00bfffc4 	movi	r2,-1
}
81128fec:	e037883a 	mov	sp,fp
81128ff0:	dfc00117 	ldw	ra,4(sp)
81128ff4:	df000017 	ldw	fp,0(sp)
81128ff8:	dec00204 	addi	sp,sp,8
81128ffc:	f800283a 	ret

81129000 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81129000:	defffe04 	addi	sp,sp,-8
81129004:	de00012e 	bgeu	sp,et,8112900c <alt_release_fd+0xc>
81129008:	003b68fa 	trap	3
8112900c:	df000115 	stw	fp,4(sp)
81129010:	df000104 	addi	fp,sp,4
81129014:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81129018:	e0bfff17 	ldw	r2,-4(fp)
8112901c:	108000d0 	cmplti	r2,r2,3
81129020:	10000d1e 	bne	r2,zero,81129058 <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
81129024:	00a04534 	movhi	r2,33044
81129028:	10858e04 	addi	r2,r2,5688
8112902c:	e0ffff17 	ldw	r3,-4(fp)
81129030:	18c00324 	muli	r3,r3,12
81129034:	10c5883a 	add	r2,r2,r3
81129038:	10800204 	addi	r2,r2,8
8112903c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81129040:	00a04534 	movhi	r2,33044
81129044:	10858e04 	addi	r2,r2,5688
81129048:	e0ffff17 	ldw	r3,-4(fp)
8112904c:	18c00324 	muli	r3,r3,12
81129050:	10c5883a 	add	r2,r2,r3
81129054:	10000015 	stw	zero,0(r2)
  }
}
81129058:	0001883a 	nop
8112905c:	e037883a 	mov	sp,fp
81129060:	df000017 	ldw	fp,0(sp)
81129064:	dec00104 	addi	sp,sp,4
81129068:	f800283a 	ret

8112906c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
8112906c:	defff604 	addi	sp,sp,-40
81129070:	de00012e 	bgeu	sp,et,81129078 <sbrk+0xc>
81129074:	003b68fa 	trap	3
81129078:	df000915 	stw	fp,36(sp)
8112907c:	df000904 	addi	fp,sp,36
81129080:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129084:	0005303a 	rdctl	r2,status
81129088:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112908c:	e0fffe17 	ldw	r3,-8(fp)
81129090:	00bfff84 	movi	r2,-2
81129094:	1884703a 	and	r2,r3,r2
81129098:	1001703a 	wrctl	status,r2
  
  return context;
8112909c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
811290a0:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
811290a4:	d0a01317 	ldw	r2,-32692(gp)
811290a8:	10c000c4 	addi	r3,r2,3
811290ac:	00bfff04 	movi	r2,-4
811290b0:	1884703a 	and	r2,r3,r2
811290b4:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
811290b8:	d0e01317 	ldw	r3,-32692(gp)
811290bc:	e0bfff17 	ldw	r2,-4(fp)
811290c0:	1887883a 	add	r3,r3,r2
811290c4:	00a04834 	movhi	r2,33056
811290c8:	10a80004 	addi	r2,r2,-24576
811290cc:	10c0062e 	bgeu	r2,r3,811290e8 <sbrk+0x7c>
811290d0:	e0bff817 	ldw	r2,-32(fp)
811290d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811290d8:	e0bff717 	ldw	r2,-36(fp)
811290dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
811290e0:	00bfffc4 	movi	r2,-1
811290e4:	00001c06 	br	81129158 <sbrk+0xec>
  }
#endif

  prev_heap_end = heap_end; 
811290e8:	d0a01317 	ldw	r2,-32692(gp)
811290ec:	e0bffa15 	stw	r2,-24(fp)
  heap_end += incr; 
811290f0:	d0e01317 	ldw	r3,-32692(gp)
811290f4:	e0bfff17 	ldw	r2,-4(fp)
811290f8:	1885883a 	add	r2,r3,r2
811290fc:	d0a01315 	stw	r2,-32692(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
81129100:	c005883a 	mov	r2,et
81129104:	e0bff915 	stw	r2,-28(fp)

  return limit; 
81129108:	e0fff917 	ldw	r3,-28(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
8112910c:	e0bffa17 	ldw	r2,-24(fp)
81129110:	18800c1e 	bne	r3,r2,81129144 <sbrk+0xd8>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
81129114:	d805883a 	mov	r2,sp
81129118:	e0bffb15 	stw	r2,-20(fp)

  return pointer; 
8112911c:	e0bffb17 	ldw	r2,-20(fp)
  {
    if (alt_stack_pointer() <= heap_end)
81129120:	d0e01317 	ldw	r3,-32692(gp)
81129124:	18800136 	bltu	r3,r2,8112912c <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
81129128:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
8112912c:	d0a01317 	ldw	r2,-32692(gp)
81129130:	e0bffc15 	stw	r2,-16(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
81129134:	e0bffc17 	ldw	r2,-16(fp)
81129138:	d0a00015 	stw	r2,-32768(gp)
  NIOS2_WRITE_ET(limit);
8112913c:	e0bffc17 	ldw	r2,-16(fp)
81129140:	1031883a 	mov	et,r2
81129144:	e0bff817 	ldw	r2,-32(fp)
81129148:	e0bffd15 	stw	r2,-12(fp)
8112914c:	e0bffd17 	ldw	r2,-12(fp)
81129150:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81129154:	e0bffa17 	ldw	r2,-24(fp)
} 
81129158:	e037883a 	mov	sp,fp
8112915c:	df000017 	ldw	fp,0(sp)
81129160:	dec00104 	addi	sp,sp,4
81129164:	f800283a 	ret

81129168 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81129168:	defffa04 	addi	sp,sp,-24
8112916c:	de00012e 	bgeu	sp,et,81129174 <alt_alarm_stop+0xc>
81129170:	003b68fa 	trap	3
81129174:	df000515 	stw	fp,20(sp)
81129178:	df000504 	addi	fp,sp,20
8112917c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129180:	0005303a 	rdctl	r2,status
81129184:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129188:	e0fffc17 	ldw	r3,-16(fp)
8112918c:	00bfff84 	movi	r2,-2
81129190:	1884703a 	and	r2,r3,r2
81129194:	1001703a 	wrctl	status,r2
  
  return context;
81129198:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
8112919c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
811291a0:	e0bfff17 	ldw	r2,-4(fp)
811291a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
811291a8:	e0bffd17 	ldw	r2,-12(fp)
811291ac:	10800017 	ldw	r2,0(r2)
811291b0:	e0fffd17 	ldw	r3,-12(fp)
811291b4:	18c00117 	ldw	r3,4(r3)
811291b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
811291bc:	e0bffd17 	ldw	r2,-12(fp)
811291c0:	10800117 	ldw	r2,4(r2)
811291c4:	e0fffd17 	ldw	r3,-12(fp)
811291c8:	18c00017 	ldw	r3,0(r3)
811291cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
811291d0:	e0bffd17 	ldw	r2,-12(fp)
811291d4:	e0fffd17 	ldw	r3,-12(fp)
811291d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
811291dc:	e0bffd17 	ldw	r2,-12(fp)
811291e0:	e0fffd17 	ldw	r3,-12(fp)
811291e4:	10c00015 	stw	r3,0(r2)
811291e8:	e0bffb17 	ldw	r2,-20(fp)
811291ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811291f0:	e0bffe17 	ldw	r2,-8(fp)
811291f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
811291f8:	0001883a 	nop
811291fc:	e037883a 	mov	sp,fp
81129200:	df000017 	ldw	fp,0(sp)
81129204:	dec00104 	addi	sp,sp,4
81129208:	f800283a 	ret

8112920c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8112920c:	defffb04 	addi	sp,sp,-20
81129210:	de00012e 	bgeu	sp,et,81129218 <alt_tick+0xc>
81129214:	003b68fa 	trap	3
81129218:	dfc00415 	stw	ra,16(sp)
8112921c:	df000315 	stw	fp,12(sp)
81129220:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81129224:	d0a01417 	ldw	r2,-32688(gp)
81129228:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8112922c:	d0a07217 	ldw	r2,-32312(gp)
81129230:	10800044 	addi	r2,r2,1
81129234:	d0a07215 	stw	r2,-32312(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81129238:	00002e06 	br	811292f4 <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
8112923c:	e0bffd17 	ldw	r2,-12(fp)
81129240:	10800017 	ldw	r2,0(r2)
81129244:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81129248:	e0bffd17 	ldw	r2,-12(fp)
8112924c:	10800403 	ldbu	r2,16(r2)
81129250:	10803fcc 	andi	r2,r2,255
81129254:	10000426 	beq	r2,zero,81129268 <alt_tick+0x5c>
81129258:	d0a07217 	ldw	r2,-32312(gp)
8112925c:	1000021e 	bne	r2,zero,81129268 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
81129260:	e0bffd17 	ldw	r2,-12(fp)
81129264:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81129268:	e0bffd17 	ldw	r2,-12(fp)
8112926c:	10800217 	ldw	r2,8(r2)
81129270:	d0e07217 	ldw	r3,-32312(gp)
81129274:	18801d36 	bltu	r3,r2,811292ec <alt_tick+0xe0>
81129278:	e0bffd17 	ldw	r2,-12(fp)
8112927c:	10800403 	ldbu	r2,16(r2)
81129280:	10803fcc 	andi	r2,r2,255
81129284:	1000191e 	bne	r2,zero,811292ec <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
81129288:	e0bffd17 	ldw	r2,-12(fp)
8112928c:	10800317 	ldw	r2,12(r2)
81129290:	e0fffd17 	ldw	r3,-12(fp)
81129294:	18c00517 	ldw	r3,20(r3)
81129298:	1809883a 	mov	r4,r3
8112929c:	103ee83a 	callr	r2
811292a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
811292a4:	e0bfff17 	ldw	r2,-4(fp)
811292a8:	1000031e 	bne	r2,zero,811292b8 <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
811292ac:	e13ffd17 	ldw	r4,-12(fp)
811292b0:	11291680 	call	81129168 <alt_alarm_stop>
811292b4:	00000d06 	br	811292ec <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
811292b8:	e0bffd17 	ldw	r2,-12(fp)
811292bc:	10c00217 	ldw	r3,8(r2)
811292c0:	e0bfff17 	ldw	r2,-4(fp)
811292c4:	1887883a 	add	r3,r3,r2
811292c8:	e0bffd17 	ldw	r2,-12(fp)
811292cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
811292d0:	e0bffd17 	ldw	r2,-12(fp)
811292d4:	10c00217 	ldw	r3,8(r2)
811292d8:	d0a07217 	ldw	r2,-32312(gp)
811292dc:	1880032e 	bgeu	r3,r2,811292ec <alt_tick+0xe0>
        {
          alarm->rollover = 1;
811292e0:	e0bffd17 	ldw	r2,-12(fp)
811292e4:	00c00044 	movi	r3,1
811292e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
811292ec:	e0bffe17 	ldw	r2,-8(fp)
811292f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
811292f4:	e0fffd17 	ldw	r3,-12(fp)
811292f8:	d0a01404 	addi	r2,gp,-32688
811292fc:	18bfcf1e 	bne	r3,r2,8112923c <__reset+0xfb10923c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81129300:	112a5c00 	call	8112a5c0 <OSTimeTick>
}
81129304:	0001883a 	nop
81129308:	e037883a 	mov	sp,fp
8112930c:	dfc00117 	ldw	ra,4(sp)
81129310:	df000017 	ldw	fp,0(sp)
81129314:	dec00204 	addi	sp,sp,8
81129318:	f800283a 	ret

8112931c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
8112931c:	defffb04 	addi	sp,sp,-20
81129320:	de00012e 	bgeu	sp,et,81129328 <usleep+0xc>
81129324:	003b68fa 	trap	3
81129328:	dfc00415 	stw	ra,16(sp)
8112932c:	df000315 	stw	fp,12(sp)
81129330:	df000304 	addi	fp,sp,12
81129334:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
81129338:	d0a07a03 	ldbu	r2,-32280(gp)
8112933c:	10803fcc 	andi	r2,r2,255
81129340:	1000031e 	bne	r2,zero,81129350 <usleep+0x34>
  {
    return alt_busy_sleep (us);
81129344:	e13fff17 	ldw	r4,-4(fp)
81129348:	11278680 	call	81127868 <alt_busy_sleep>
8112934c:	00003d06 	br	81129444 <usleep+0x128>
81129350:	d0a07117 	ldw	r2,-32316(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
81129354:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
81129358:	e0ffff17 	ldw	r3,-4(fp)
8112935c:	0090c734 	movhi	r2,17180
81129360:	10b7a0c4 	addi	r2,r2,-8573
81129364:	1888383a 	mulxuu	r4,r3,r2
81129368:	1885383a 	mul	r2,r3,r2
8112936c:	1013883a 	mov	r9,r2
81129370:	2015883a 	mov	r10,r4
81129374:	5006d4ba 	srli	r3,r10,18
81129378:	e0bffe17 	ldw	r2,-8(fp)
8112937c:	1893383a 	mul	r9,r3,r2
81129380:	e0ffff17 	ldw	r3,-4(fp)
81129384:	0090c734 	movhi	r2,17180
81129388:	10b7a0c4 	addi	r2,r2,-8573
8112938c:	1888383a 	mulxuu	r4,r3,r2
81129390:	1885383a 	mul	r2,r3,r2
81129394:	100f883a 	mov	r7,r2
81129398:	2011883a 	mov	r8,r4
8112939c:	4004d4ba 	srli	r2,r8,18
811293a0:	010003f4 	movhi	r4,15
811293a4:	21109004 	addi	r4,r4,16960
811293a8:	1105383a 	mul	r2,r2,r4
811293ac:	1885c83a 	sub	r2,r3,r2
811293b0:	e0fffe17 	ldw	r3,-8(fp)
811293b4:	10c7383a 	mul	r3,r2,r3
811293b8:	0090c734 	movhi	r2,17180
811293bc:	10b7a0c4 	addi	r2,r2,-8573
811293c0:	1888383a 	mulxuu	r4,r3,r2
811293c4:	1885383a 	mul	r2,r3,r2
811293c8:	100b883a 	mov	r5,r2
811293cc:	200d883a 	mov	r6,r4
811293d0:	3004d4ba 	srli	r2,r6,18
811293d4:	4885883a 	add	r2,r9,r2
811293d8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
811293dc:	00000706 	br	811293fc <usleep+0xe0>
  {
    OSTimeDly(0xffff);
811293e0:	013fffd4 	movui	r4,65535
811293e4:	11320300 	call	81132030 <OSTimeDly>
    ticks -= 0xffff;
811293e8:	e0fffd17 	ldw	r3,-12(fp)
811293ec:	00bffff4 	movhi	r2,65535
811293f0:	10800044 	addi	r2,r2,1
811293f4:	1885883a 	add	r2,r3,r2
811293f8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
811293fc:	e0bffd17 	ldw	r2,-12(fp)
81129400:	00ffffd4 	movui	r3,65535
81129404:	18bff636 	bltu	r3,r2,811293e0 <__reset+0xfb1093e0>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
81129408:	e0bffd17 	ldw	r2,-12(fp)
8112940c:	10bfffcc 	andi	r2,r2,65535
81129410:	1009883a 	mov	r4,r2
81129414:	11320300 	call	81132030 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
81129418:	008003f4 	movhi	r2,15
8112941c:	10909004 	addi	r2,r2,16960
81129420:	e0fffe17 	ldw	r3,-8(fp)
81129424:	10c7203a 	divu	r3,r2,r3
81129428:	e0bfff17 	ldw	r2,-4(fp)
8112942c:	10c9203a 	divu	r4,r2,r3
81129430:	20c7383a 	mul	r3,r4,r3
81129434:	10c5c83a 	sub	r2,r2,r3
81129438:	1009883a 	mov	r4,r2
8112943c:	11278680 	call	81127868 <alt_busy_sleep>

  return 0;  
81129440:	0005883a 	mov	r2,zero
}
81129444:	e037883a 	mov	sp,fp
81129448:	dfc00117 	ldw	ra,4(sp)
8112944c:	df000017 	ldw	fp,0(sp)
81129450:	dec00204 	addi	sp,sp,8
81129454:	f800283a 	ret

81129458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81129458:	defffe04 	addi	sp,sp,-8
8112945c:	de00012e 	bgeu	sp,et,81129464 <alt_get_errno+0xc>
81129460:	003b68fa 	trap	3
81129464:	dfc00115 	stw	ra,4(sp)
81129468:	df000015 	stw	fp,0(sp)
8112946c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81129470:	d0a01017 	ldw	r2,-32704(gp)
81129474:	10000326 	beq	r2,zero,81129484 <alt_get_errno+0x2c>
81129478:	d0a01017 	ldw	r2,-32704(gp)
8112947c:	103ee83a 	callr	r2
81129480:	00000106 	br	81129488 <alt_get_errno+0x30>
81129484:	d0a06104 	addi	r2,gp,-32380
}
81129488:	e037883a 	mov	sp,fp
8112948c:	dfc00117 	ldw	ra,4(sp)
81129490:	df000017 	ldw	fp,0(sp)
81129494:	dec00204 	addi	sp,sp,8
81129498:	f800283a 	ret

8112949c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8112949c:	defff904 	addi	sp,sp,-28
811294a0:	de00012e 	bgeu	sp,et,811294a8 <write+0xc>
811294a4:	003b68fa 	trap	3
811294a8:	dfc00615 	stw	ra,24(sp)
811294ac:	df000515 	stw	fp,20(sp)
811294b0:	df000504 	addi	fp,sp,20
811294b4:	e13ffd15 	stw	r4,-12(fp)
811294b8:	e17ffe15 	stw	r5,-8(fp)
811294bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811294c0:	e0bffd17 	ldw	r2,-12(fp)
811294c4:	10000616 	blt	r2,zero,811294e0 <write+0x44>
811294c8:	e0bffd17 	ldw	r2,-12(fp)
811294cc:	10c00324 	muli	r3,r2,12
811294d0:	00a04534 	movhi	r2,33044
811294d4:	10858e04 	addi	r2,r2,5688
811294d8:	1885883a 	add	r2,r3,r2
811294dc:	00000106 	br	811294e4 <write+0x48>
811294e0:	0005883a 	mov	r2,zero
811294e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
811294e8:	e0bffb17 	ldw	r2,-20(fp)
811294ec:	10002426 	beq	r2,zero,81129580 <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
811294f0:	e0bffb17 	ldw	r2,-20(fp)
811294f4:	10800217 	ldw	r2,8(r2)
811294f8:	108000cc 	andi	r2,r2,3
811294fc:	10001b26 	beq	r2,zero,8112956c <write+0xd0>
81129500:	e0bffb17 	ldw	r2,-20(fp)
81129504:	10800017 	ldw	r2,0(r2)
81129508:	10800617 	ldw	r2,24(r2)
8112950c:	10001726 	beq	r2,zero,8112956c <write+0xd0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
81129510:	e17fff17 	ldw	r5,-4(fp)
81129514:	e13ffe17 	ldw	r4,-8(fp)
81129518:	11287dc0 	call	811287dc <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8112951c:	e0bffb17 	ldw	r2,-20(fp)
81129520:	10800017 	ldw	r2,0(r2)
81129524:	10800617 	ldw	r2,24(r2)
81129528:	e0ffff17 	ldw	r3,-4(fp)
8112952c:	180d883a 	mov	r6,r3
81129530:	e17ffe17 	ldw	r5,-8(fp)
81129534:	e13ffb17 	ldw	r4,-20(fp)
81129538:	103ee83a 	callr	r2
8112953c:	e0bffc15 	stw	r2,-16(fp)
81129540:	e0bffc17 	ldw	r2,-16(fp)
81129544:	1000070e 	bge	r2,zero,81129564 <write+0xc8>
      {
        ALT_ERRNO = -rval;
81129548:	11294580 	call	81129458 <alt_get_errno>
8112954c:	1007883a 	mov	r3,r2
81129550:	e0bffc17 	ldw	r2,-16(fp)
81129554:	0085c83a 	sub	r2,zero,r2
81129558:	18800015 	stw	r2,0(r3)
        return -1;
8112955c:	00bfffc4 	movi	r2,-1
81129560:	00000c06 	br	81129594 <write+0xf8>
      }
      return rval;
81129564:	e0bffc17 	ldw	r2,-16(fp)
81129568:	00000a06 	br	81129594 <write+0xf8>
    }
    else
    {
      ALT_ERRNO = EACCES;
8112956c:	11294580 	call	81129458 <alt_get_errno>
81129570:	1007883a 	mov	r3,r2
81129574:	00800344 	movi	r2,13
81129578:	18800015 	stw	r2,0(r3)
8112957c:	00000406 	br	81129590 <write+0xf4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81129580:	11294580 	call	81129458 <alt_get_errno>
81129584:	1007883a 	mov	r3,r2
81129588:	00801444 	movi	r2,81
8112958c:	18800015 	stw	r2,0(r3)
  }
  return -1;
81129590:	00bfffc4 	movi	r2,-1
}
81129594:	e037883a 	mov	sp,fp
81129598:	dfc00117 	ldw	ra,4(sp)
8112959c:	df000017 	ldw	fp,0(sp)
811295a0:	dec00204 	addi	sp,sp,8
811295a4:	f800283a 	ret

811295a8 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
811295a8:	deffde04 	addi	sp,sp,-136
811295ac:	de00012e 	bgeu	sp,et,811295b4 <__env_lock+0xc>
811295b0:	003b68fa 	trap	3
811295b4:	dfc02115 	stw	ra,132(sp)
811295b8:	df002015 	stw	fp,128(sp)
811295bc:	df002004 	addi	fp,sp,128
811295c0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
811295c4:	e0bfe104 	addi	r2,fp,-124
811295c8:	100b883a 	mov	r5,r2
811295cc:	01003fc4 	movi	r4,255
811295d0:	1131e8c0 	call	81131e8c <OSTaskQuery>
811295d4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
811295d8:	e0bffe83 	ldbu	r2,-6(fp)
811295dc:	10803fcc 	andi	r2,r2,255
811295e0:	10001e1e 	bne	r2,zero,8112965c <__env_lock+0xb4>
    return;

  id = tcb.OSTCBPrio;
811295e4:	e0bfed83 	ldbu	r2,-74(fp)
811295e8:	10803fcc 	andi	r2,r2,255
811295ec:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
811295f0:	d0a07417 	ldw	r2,-32304(gp)
811295f4:	e0fffc04 	addi	r3,fp,-16
811295f8:	180b883a 	mov	r5,r3
811295fc:	1009883a 	mov	r4,r2
81129600:	11306440 	call	81130644 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
81129604:	e0bffe03 	ldbu	r2,-8(fp)
81129608:	10803fcc 	andi	r2,r2,255
8112960c:	10000726 	beq	r2,zero,8112962c <__env_lock+0x84>
81129610:	d0a01617 	ldw	r2,-32680(gp)
81129614:	e0ffe017 	ldw	r3,-128(fp)
81129618:	1880041e 	bne	r3,r2,8112962c <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
8112961c:	d0a07317 	ldw	r2,-32308(gp)
81129620:	10800044 	addi	r2,r2,1
81129624:	d0a07315 	stw	r2,-32308(gp)
81129628:	00000a06 	br	81129654 <__env_lock+0xac>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
8112962c:	d0a07417 	ldw	r2,-32304(gp)
81129630:	e0fffe84 	addi	r3,fp,-6
81129634:	180d883a 	mov	r6,r3
81129638:	000b883a 	mov	r5,zero
8112963c:	1009883a 	mov	r4,r2
81129640:	11301a40 	call	811301a4 <OSSemPend>
    locks  = 1;
81129644:	00800044 	movi	r2,1
81129648:	d0a07315 	stw	r2,-32308(gp)
    lockid = id;
8112964c:	e0bfe017 	ldw	r2,-128(fp)
81129650:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81129654:	0001883a 	nop
81129658:	00000106 	br	81129660 <__env_lock+0xb8>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
8112965c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81129660:	e037883a 	mov	sp,fp
81129664:	dfc00117 	ldw	ra,4(sp)
81129668:	df000017 	ldw	fp,0(sp)
8112966c:	dec00204 	addi	sp,sp,8
81129670:	f800283a 	ret

81129674 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
81129674:	defffd04 	addi	sp,sp,-12
81129678:	de00012e 	bgeu	sp,et,81129680 <__env_unlock+0xc>
8112967c:	003b68fa 	trap	3
81129680:	dfc00215 	stw	ra,8(sp)
81129684:	df000115 	stw	fp,4(sp)
81129688:	df000104 	addi	fp,sp,4
8112968c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
81129690:	d0a07317 	ldw	r2,-32308(gp)
81129694:	10000b26 	beq	r2,zero,811296c4 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
81129698:	d0a07317 	ldw	r2,-32308(gp)
8112969c:	10bfffc4 	addi	r2,r2,-1
811296a0:	d0a07315 	stw	r2,-32308(gp)
811296a4:	d0a07317 	ldw	r2,-32308(gp)
811296a8:	1000071e 	bne	r2,zero,811296c8 <__env_unlock+0x54>
  {
    lockid = -1;
811296ac:	00bfffc4 	movi	r2,-1
811296b0:	d0a01615 	stw	r2,-32680(gp)
    OSSemPost( alt_envsem );
811296b4:	d0a07417 	ldw	r2,-32304(gp)
811296b8:	1009883a 	mov	r4,r2
811296bc:	113052c0 	call	8113052c <OSSemPost>
811296c0:	00000106 	br	811296c8 <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
811296c4:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811296c8:	e037883a 	mov	sp,fp
811296cc:	dfc00117 	ldw	ra,4(sp)
811296d0:	df000017 	ldw	fp,0(sp)
811296d4:	dec00204 	addi	sp,sp,8
811296d8:	f800283a 	ret

811296dc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
811296dc:	deffda04 	addi	sp,sp,-152
811296e0:	de00012e 	bgeu	sp,et,811296e8 <__malloc_lock+0xc>
811296e4:	003b68fa 	trap	3
811296e8:	dfc02515 	stw	ra,148(sp)
811296ec:	df002415 	stw	fp,144(sp)
811296f0:	df002404 	addi	fp,sp,144
811296f4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811296f8:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
811296fc:	d0a07a03 	ldbu	r2,-32280(gp)
81129700:	10803fcc 	andi	r2,r2,255
81129704:	10800060 	cmpeqi	r2,r2,1
81129708:	10003626 	beq	r2,zero,811297e4 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
8112970c:	e0bfe104 	addi	r2,fp,-124
81129710:	100b883a 	mov	r5,r2
81129714:	01003fc4 	movi	r4,255
81129718:	1131e8c0 	call	81131e8c <OSTaskQuery>
8112971c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
81129720:	e0bffe83 	ldbu	r2,-6(fp)
81129724:	10803fcc 	andi	r2,r2,255
81129728:	1000301e 	bne	r2,zero,811297ec <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
8112972c:	e0bfed83 	ldbu	r2,-74(fp)
81129730:	10803fcc 	andi	r2,r2,255
81129734:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
81129738:	d0a07617 	ldw	r2,-32296(gp)
8112973c:	e0fffc04 	addi	r3,fp,-16
81129740:	180b883a 	mov	r5,r3
81129744:	1009883a 	mov	r4,r2
81129748:	11306440 	call	81130644 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112974c:	0005303a 	rdctl	r2,status
81129750:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129754:	e0ffe017 	ldw	r3,-128(fp)
81129758:	00bfff84 	movi	r2,-2
8112975c:	1884703a 	and	r2,r3,r2
81129760:	1001703a 	wrctl	status,r2
  
  return context;
81129764:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
81129768:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
8112976c:	e0bffc0b 	ldhu	r2,-16(fp)
81129770:	10bfffcc 	andi	r2,r2,65535
81129774:	10000b1e 	bne	r2,zero,811297a4 <__malloc_lock+0xc8>
81129778:	d0a01717 	ldw	r2,-32676(gp)
8112977c:	e0ffdd17 	ldw	r3,-140(fp)
81129780:	1880081e 	bne	r3,r2,811297a4 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
81129784:	d0a07517 	ldw	r2,-32300(gp)
81129788:	10800044 	addi	r2,r2,1
8112978c:	d0a07515 	stw	r2,-32300(gp)
81129790:	e0bfdc17 	ldw	r2,-144(fp)
81129794:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129798:	e0bfde17 	ldw	r2,-136(fp)
8112979c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
811297a0:	00000e06 	br	811297dc <__malloc_lock+0x100>
811297a4:	e0bfdc17 	ldw	r2,-144(fp)
811297a8:	e0bfdf15 	stw	r2,-132(fp)
811297ac:	e0bfdf17 	ldw	r2,-132(fp)
811297b0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
811297b4:	d0a07617 	ldw	r2,-32296(gp)
811297b8:	e0fffe84 	addi	r3,fp,-6
811297bc:	180d883a 	mov	r6,r3
811297c0:	000b883a 	mov	r5,zero
811297c4:	1009883a 	mov	r4,r2
811297c8:	11301a40 	call	811301a4 <OSSemPend>
    locks  = 1;
811297cc:	00800044 	movi	r2,1
811297d0:	d0a07515 	stw	r2,-32300(gp)
    lockid = id;
811297d4:	e0bfdd17 	ldw	r2,-140(fp)
811297d8:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
811297dc:	0001883a 	nop
811297e0:	00000306 	br	811297f0 <__malloc_lock+0x114>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
811297e4:	0001883a 	nop
811297e8:	00000106 	br	811297f0 <__malloc_lock+0x114>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
811297ec:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
811297f0:	e037883a 	mov	sp,fp
811297f4:	dfc00117 	ldw	ra,4(sp)
811297f8:	df000017 	ldw	fp,0(sp)
811297fc:	dec00204 	addi	sp,sp,8
81129800:	f800283a 	ret

81129804 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81129804:	defff804 	addi	sp,sp,-32
81129808:	de00012e 	bgeu	sp,et,81129810 <__malloc_unlock+0xc>
8112980c:	003b68fa 	trap	3
81129810:	dfc00715 	stw	ra,28(sp)
81129814:	df000615 	stw	fp,24(sp)
81129818:	df000604 	addi	fp,sp,24
8112981c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81129820:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
81129824:	d0a07a03 	ldbu	r2,-32280(gp)
81129828:	10803fcc 	andi	r2,r2,255
8112982c:	10800060 	cmpeqi	r2,r2,1
81129830:	10002326 	beq	r2,zero,811298c0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129834:	0005303a 	rdctl	r2,status
81129838:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112983c:	e0fffe17 	ldw	r3,-8(fp)
81129840:	00bfff84 	movi	r2,-2
81129844:	1884703a 	and	r2,r3,r2
81129848:	1001703a 	wrctl	status,r2
  
  return context;
8112984c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
81129850:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
81129854:	d0a07517 	ldw	r2,-32300(gp)
81129858:	1000051e 	bne	r2,zero,81129870 <__malloc_unlock+0x6c>
8112985c:	e0bffa17 	ldw	r2,-24(fp)
81129860:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129864:	e0bffb17 	ldw	r2,-20(fp)
81129868:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
8112986c:	00001506 	br	811298c4 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
81129870:	d0a07517 	ldw	r2,-32300(gp)
81129874:	10bfffc4 	addi	r2,r2,-1
81129878:	d0a07515 	stw	r2,-32300(gp)
8112987c:	d0a07517 	ldw	r2,-32300(gp)
81129880:	10000a1e 	bne	r2,zero,811298ac <__malloc_unlock+0xa8>
  {
    lockid = -1;
81129884:	00bfffc4 	movi	r2,-1
81129888:	d0a01715 	stw	r2,-32676(gp)
8112988c:	e0bffa17 	ldw	r2,-24(fp)
81129890:	e0bffc15 	stw	r2,-16(fp)
81129894:	e0bffc17 	ldw	r2,-16(fp)
81129898:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
8112989c:	d0a07617 	ldw	r2,-32296(gp)
811298a0:	1009883a 	mov	r4,r2
811298a4:	113052c0 	call	8113052c <OSSemPost>
811298a8:	00000606 	br	811298c4 <__malloc_unlock+0xc0>
811298ac:	e0bffa17 	ldw	r2,-24(fp)
811298b0:	e0bffd15 	stw	r2,-12(fp)
811298b4:	e0bffd17 	ldw	r2,-12(fp)
811298b8:	1001703a 	wrctl	status,r2
811298bc:	00000106 	br	811298c4 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
811298c0:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811298c4:	e037883a 	mov	sp,fp
811298c8:	dfc00117 	ldw	ra,4(sp)
811298cc:	df000017 	ldw	fp,0(sp)
811298d0:	dec00204 	addi	sp,sp,8
811298d4:	f800283a 	ret

811298d8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811298d8:	defff704 	addi	sp,sp,-36
811298dc:	de00012e 	bgeu	sp,et,811298e4 <OSEventNameGet+0xc>
811298e0:	003b68fa 	trap	3
811298e4:	dfc00815 	stw	ra,32(sp)
811298e8:	df000715 	stw	fp,28(sp)
811298ec:	df000704 	addi	fp,sp,28
811298f0:	e13ffd15 	stw	r4,-12(fp)
811298f4:	e17ffe15 	stw	r5,-8(fp)
811298f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811298fc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81129900:	e0bfff17 	ldw	r2,-4(fp)
81129904:	1000021e 	bne	r2,zero,81129910 <OSEventNameGet+0x38>
        return (0);
81129908:	0005883a 	mov	r2,zero
8112990c:	00003706 	br	811299ec <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81129910:	e0bffd17 	ldw	r2,-12(fp)
81129914:	1000051e 	bne	r2,zero,8112992c <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
81129918:	e0bfff17 	ldw	r2,-4(fp)
8112991c:	00c00104 	movi	r3,4
81129920:	10c00005 	stb	r3,0(r2)
        return (0);
81129924:	0005883a 	mov	r2,zero
81129928:	00003006 	br	811299ec <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112992c:	e0bffe17 	ldw	r2,-8(fp)
81129930:	1000051e 	bne	r2,zero,81129948 <OSEventNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81129934:	e0bfff17 	ldw	r2,-4(fp)
81129938:	00c00304 	movi	r3,12
8112993c:	10c00005 	stb	r3,0(r2)
        return (0);
81129940:	0005883a 	mov	r2,zero
81129944:	00002906 	br	811299ec <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81129948:	d0a08a03 	ldbu	r2,-32216(gp)
8112994c:	10803fcc 	andi	r2,r2,255
81129950:	10000526 	beq	r2,zero,81129968 <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
81129954:	e0bfff17 	ldw	r2,-4(fp)
81129958:	00c00444 	movi	r3,17
8112995c:	10c00005 	stb	r3,0(r2)
        return (0);
81129960:	0005883a 	mov	r2,zero
81129964:	00002106 	br	811299ec <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
81129968:	e0bffd17 	ldw	r2,-12(fp)
8112996c:	10800003 	ldbu	r2,0(r2)
81129970:	10803fcc 	andi	r2,r2,255
81129974:	10bfffc4 	addi	r2,r2,-1
81129978:	10800128 	cmpgeui	r2,r2,4
8112997c:	10000526 	beq	r2,zero,81129994 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81129980:	e0bfff17 	ldw	r2,-4(fp)
81129984:	00c00044 	movi	r3,1
81129988:	10c00005 	stb	r3,0(r2)
             return (0);
8112998c:	0005883a 	mov	r2,zero
81129990:	00001606 	br	811299ec <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81129994:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129998:	0005303a 	rdctl	r2,status
8112999c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811299a0:	e0fffb17 	ldw	r3,-20(fp)
811299a4:	00bfff84 	movi	r2,-2
811299a8:	1884703a 	and	r2,r3,r2
811299ac:	1001703a 	wrctl	status,r2
  
  return context;
811299b0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
811299b4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
811299b8:	e0bffd17 	ldw	r2,-12(fp)
811299bc:	10800444 	addi	r2,r2,17
811299c0:	100b883a 	mov	r5,r2
811299c4:	e13ffe17 	ldw	r4,-8(fp)
811299c8:	112b4480 	call	8112b448 <OS_StrCopy>
811299cc:	e0bffa05 	stb	r2,-24(fp)
811299d0:	e0bff917 	ldw	r2,-28(fp)
811299d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811299d8:	e0bffc17 	ldw	r2,-16(fp)
811299dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811299e0:	e0bfff17 	ldw	r2,-4(fp)
811299e4:	10000005 	stb	zero,0(r2)
    return (len);
811299e8:	e0bffa03 	ldbu	r2,-24(fp)
}
811299ec:	e037883a 	mov	sp,fp
811299f0:	dfc00117 	ldw	ra,4(sp)
811299f4:	df000017 	ldw	fp,0(sp)
811299f8:	dec00204 	addi	sp,sp,8
811299fc:	f800283a 	ret

81129a00 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
81129a00:	defff604 	addi	sp,sp,-40
81129a04:	de00012e 	bgeu	sp,et,81129a0c <OSEventNameSet+0xc>
81129a08:	003b68fa 	trap	3
81129a0c:	dfc00915 	stw	ra,36(sp)
81129a10:	df000815 	stw	fp,32(sp)
81129a14:	df000804 	addi	fp,sp,32
81129a18:	e13ffd15 	stw	r4,-12(fp)
81129a1c:	e17ffe15 	stw	r5,-8(fp)
81129a20:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81129a24:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81129a28:	e0bfff17 	ldw	r2,-4(fp)
81129a2c:	10004026 	beq	r2,zero,81129b30 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81129a30:	e0bffd17 	ldw	r2,-12(fp)
81129a34:	1000041e 	bne	r2,zero,81129a48 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
81129a38:	e0bfff17 	ldw	r2,-4(fp)
81129a3c:	00c00104 	movi	r3,4
81129a40:	10c00005 	stb	r3,0(r2)
        return;
81129a44:	00003b06 	br	81129b34 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81129a48:	e0bffe17 	ldw	r2,-8(fp)
81129a4c:	1000041e 	bne	r2,zero,81129a60 <OSEventNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
81129a50:	e0bfff17 	ldw	r2,-4(fp)
81129a54:	00c00304 	movi	r3,12
81129a58:	10c00005 	stb	r3,0(r2)
        return;
81129a5c:	00003506 	br	81129b34 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81129a60:	d0a08a03 	ldbu	r2,-32216(gp)
81129a64:	10803fcc 	andi	r2,r2,255
81129a68:	10000426 	beq	r2,zero,81129a7c <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81129a6c:	e0bfff17 	ldw	r2,-4(fp)
81129a70:	00c00484 	movi	r3,18
81129a74:	10c00005 	stb	r3,0(r2)
        return;
81129a78:	00002e06 	br	81129b34 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
81129a7c:	e0bffd17 	ldw	r2,-12(fp)
81129a80:	10800003 	ldbu	r2,0(r2)
81129a84:	10803fcc 	andi	r2,r2,255
81129a88:	10bfffc4 	addi	r2,r2,-1
81129a8c:	10800128 	cmpgeui	r2,r2,4
81129a90:	10000426 	beq	r2,zero,81129aa4 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81129a94:	e0bfff17 	ldw	r2,-4(fp)
81129a98:	00c00044 	movi	r3,1
81129a9c:	10c00005 	stb	r3,0(r2)
             return;
81129aa0:	00002406 	br	81129b34 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81129aa4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129aa8:	0005303a 	rdctl	r2,status
81129aac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129ab0:	e0fffc17 	ldw	r3,-16(fp)
81129ab4:	00bfff84 	movi	r2,-2
81129ab8:	1884703a 	and	r2,r3,r2
81129abc:	1001703a 	wrctl	status,r2
  
  return context;
81129ac0:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
81129ac4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
81129ac8:	e13ffe17 	ldw	r4,-8(fp)
81129acc:	112b4c40 	call	8112b4c4 <OS_StrLen>
81129ad0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
81129ad4:	e0bffa03 	ldbu	r2,-24(fp)
81129ad8:	10800830 	cmpltui	r2,r2,32
81129adc:	1000081e 	bne	r2,zero,81129b00 <OSEventNameSet+0x100>
81129ae0:	e0bff817 	ldw	r2,-32(fp)
81129ae4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129ae8:	e0bff917 	ldw	r2,-28(fp)
81129aec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
81129af0:	e0bfff17 	ldw	r2,-4(fp)
81129af4:	00c002c4 	movi	r3,11
81129af8:	10c00005 	stb	r3,0(r2)
        return;
81129afc:	00000d06 	br	81129b34 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
81129b00:	e0bffd17 	ldw	r2,-12(fp)
81129b04:	10800444 	addi	r2,r2,17
81129b08:	e17ffe17 	ldw	r5,-8(fp)
81129b0c:	1009883a 	mov	r4,r2
81129b10:	112b4480 	call	8112b448 <OS_StrCopy>
81129b14:	e0bff817 	ldw	r2,-32(fp)
81129b18:	e0bffb15 	stw	r2,-20(fp)
81129b1c:	e0bffb17 	ldw	r2,-20(fp)
81129b20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81129b24:	e0bfff17 	ldw	r2,-4(fp)
81129b28:	10000005 	stb	zero,0(r2)
81129b2c:	00000106 	br	81129b34 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81129b30:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81129b34:	e037883a 	mov	sp,fp
81129b38:	dfc00117 	ldw	ra,4(sp)
81129b3c:	df000017 	ldw	fp,0(sp)
81129b40:	dec00204 	addi	sp,sp,8
81129b44:	f800283a 	ret

81129b48 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
81129b48:	deffed04 	addi	sp,sp,-76
81129b4c:	de00012e 	bgeu	sp,et,81129b54 <OSEventPendMulti+0xc>
81129b50:	003b68fa 	trap	3
81129b54:	dfc01215 	stw	ra,72(sp)
81129b58:	df001115 	stw	fp,68(sp)
81129b5c:	df001104 	addi	fp,sp,68
81129b60:	e13ffc15 	stw	r4,-16(fp)
81129b64:	e17ffd15 	stw	r5,-12(fp)
81129b68:	e1bffe15 	stw	r6,-8(fp)
81129b6c:	3805883a 	mov	r2,r7
81129b70:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
81129b74:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
81129b78:	e0800217 	ldw	r2,8(fp)
81129b7c:	1000021e 	bne	r2,zero,81129b88 <OSEventPendMulti+0x40>
        return (0);
81129b80:	0005883a 	mov	r2,zero
81129b84:	00017106 	br	8112a14c <OSEventPendMulti+0x604>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
81129b88:	e0bffc17 	ldw	r2,-16(fp)
81129b8c:	1000051e 	bne	r2,zero,81129ba4 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEVENT_NULL;
81129b90:	e0800217 	ldw	r2,8(fp)
81129b94:	00c00104 	movi	r3,4
81129b98:	10c00005 	stb	r3,0(r2)
        return (0);
81129b9c:	0005883a 	mov	r2,zero
81129ba0:	00016a06 	br	8112a14c <OSEventPendMulti+0x604>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
81129ba4:	e0bffd17 	ldw	r2,-12(fp)
81129ba8:	1000051e 	bne	r2,zero,81129bc0 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
81129bac:	e0800217 	ldw	r2,8(fp)
81129bb0:	00c00104 	movi	r3,4
81129bb4:	10c00005 	stb	r3,0(r2)
        return (0);
81129bb8:	0005883a 	mov	r2,zero
81129bbc:	00016306 	br	8112a14c <OSEventPendMulti+0x604>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
81129bc0:	e0bffe17 	ldw	r2,-8(fp)
81129bc4:	1000051e 	bne	r2,zero,81129bdc <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEVENT_NULL;
81129bc8:	e0800217 	ldw	r2,8(fp)
81129bcc:	00c00104 	movi	r3,4
81129bd0:	10c00005 	stb	r3,0(r2)
        return (0);
81129bd4:	0005883a 	mov	r2,zero
81129bd8:	00015c06 	br	8112a14c <OSEventPendMulti+0x604>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
81129bdc:	e0bffd17 	ldw	r2,-12(fp)
81129be0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
81129be4:	e0bffc17 	ldw	r2,-16(fp)
81129be8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
81129bec:	e0bfef17 	ldw	r2,-68(fp)
81129bf0:	10800017 	ldw	r2,0(r2)
81129bf4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
81129bf8:	00001906 	br	81129c60 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
81129bfc:	e0bff017 	ldw	r2,-64(fp)
81129c00:	10800003 	ldbu	r2,0(r2)
81129c04:	10803fcc 	andi	r2,r2,255
81129c08:	10c000a0 	cmpeqi	r3,r2,2
81129c0c:	1800091e 	bne	r3,zero,81129c34 <OSEventPendMulti+0xec>
81129c10:	10c000e0 	cmpeqi	r3,r2,3
81129c14:	1800091e 	bne	r3,zero,81129c3c <OSEventPendMulti+0xf4>
81129c18:	10800060 	cmpeqi	r2,r2,1
81129c1c:	1000091e 	bne	r2,zero,81129c44 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
81129c20:	e0800217 	ldw	r2,8(fp)
81129c24:	00c00044 	movi	r3,1
81129c28:	10c00005 	stb	r3,0(r2)
                 return (0);
81129c2c:	0005883a 	mov	r2,zero
81129c30:	00014606 	br	8112a14c <OSEventPendMulti+0x604>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
81129c34:	0001883a 	nop
81129c38:	00000306 	br	81129c48 <OSEventPendMulti+0x100>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
81129c3c:	0001883a 	nop
81129c40:	00000106 	br	81129c48 <OSEventPendMulti+0x100>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
81129c44:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
81129c48:	e0bfef17 	ldw	r2,-68(fp)
81129c4c:	10800104 	addi	r2,r2,4
81129c50:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81129c54:	e0bfef17 	ldw	r2,-68(fp)
81129c58:	10800017 	ldw	r2,0(r2)
81129c5c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
81129c60:	e0bff017 	ldw	r2,-64(fp)
81129c64:	103fe51e 	bne	r2,zero,81129bfc <__reset+0xfb109bfc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
81129c68:	d0a08a03 	ldbu	r2,-32216(gp)
81129c6c:	10803fcc 	andi	r2,r2,255
81129c70:	10000526 	beq	r2,zero,81129c88 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
81129c74:	e0800217 	ldw	r2,8(fp)
81129c78:	00c00084 	movi	r3,2
81129c7c:	10c00005 	stb	r3,0(r2)
        return (0);
81129c80:	0005883a 	mov	r2,zero
81129c84:	00013106 	br	8112a14c <OSEventPendMulti+0x604>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
81129c88:	d0a07803 	ldbu	r2,-32288(gp)
81129c8c:	10803fcc 	andi	r2,r2,255
81129c90:	10000526 	beq	r2,zero,81129ca8 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
81129c94:	e0800217 	ldw	r2,8(fp)
81129c98:	00c00344 	movi	r3,13
81129c9c:	10c00005 	stb	r3,0(r2)
        return (0);
81129ca0:	0005883a 	mov	r2,zero
81129ca4:	00012906 	br	8112a14c <OSEventPendMulti+0x604>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129ca8:	0005303a 	rdctl	r2,status
81129cac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129cb0:	e0fffb17 	ldw	r3,-20(fp)
81129cb4:	00bfff84 	movi	r2,-2
81129cb8:	1884703a 	and	r2,r3,r2
81129cbc:	1001703a 	wrctl	status,r2
  
  return context;
81129cc0:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
81129cc4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
81129cc8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
81129ccc:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
81129cd0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
81129cd4:	e0bffc17 	ldw	r2,-16(fp)
81129cd8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
81129cdc:	e0bfef17 	ldw	r2,-68(fp)
81129ce0:	10800017 	ldw	r2,0(r2)
81129ce4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81129ce8:	00008106 	br	81129ef0 <OSEventPendMulti+0x3a8>
        switch (pevent->OSEventType) {
81129cec:	e0bff017 	ldw	r2,-64(fp)
81129cf0:	10800003 	ldbu	r2,0(r2)
81129cf4:	10803fcc 	andi	r2,r2,255
81129cf8:	10c000a0 	cmpeqi	r3,r2,2
81129cfc:	18003c1e 	bne	r3,zero,81129df0 <OSEventPendMulti+0x2a8>
81129d00:	10c000e0 	cmpeqi	r3,r2,3
81129d04:	1800031e 	bne	r3,zero,81129d14 <OSEventPendMulti+0x1cc>
81129d08:	10800060 	cmpeqi	r2,r2,1
81129d0c:	10001e1e 	bne	r2,zero,81129d88 <OSEventPendMulti+0x240>
81129d10:	00006606 	br	81129eac <OSEventPendMulti+0x364>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
81129d14:	e0bff017 	ldw	r2,-64(fp)
81129d18:	1080020b 	ldhu	r2,8(r2)
81129d1c:	10bfffcc 	andi	r2,r2,65535
81129d20:	10001526 	beq	r2,zero,81129d78 <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
81129d24:	e0bff017 	ldw	r2,-64(fp)
81129d28:	1080020b 	ldhu	r2,8(r2)
81129d2c:	10bfffc4 	addi	r2,r2,-1
81129d30:	1007883a 	mov	r3,r2
81129d34:	e0bff017 	ldw	r2,-64(fp)
81129d38:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
81129d3c:	e0bffd17 	ldw	r2,-12(fp)
81129d40:	10c00104 	addi	r3,r2,4
81129d44:	e0fffd15 	stw	r3,-12(fp)
81129d48:	e0fff017 	ldw	r3,-64(fp)
81129d4c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
81129d50:	00800044 	movi	r2,1
81129d54:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
81129d58:	e0bffe17 	ldw	r2,-8(fp)
81129d5c:	10c00104 	addi	r3,r2,4
81129d60:	e0fffe15 	stw	r3,-8(fp)
81129d64:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
81129d68:	e0bff18b 	ldhu	r2,-58(fp)
81129d6c:	10800044 	addi	r2,r2,1
81129d70:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
81129d74:	00005806 	br	81129ed8 <OSEventPendMulti+0x390>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
81129d78:	e0bff203 	ldbu	r2,-56(fp)
81129d7c:	10800054 	ori	r2,r2,1
81129d80:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81129d84:	00005406 	br	81129ed8 <OSEventPendMulti+0x390>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
81129d88:	e0bff017 	ldw	r2,-64(fp)
81129d8c:	10800117 	ldw	r2,4(r2)
81129d90:	10001326 	beq	r2,zero,81129de0 <OSEventPendMulti+0x298>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
81129d94:	e0bffe17 	ldw	r2,-8(fp)
81129d98:	10c00104 	addi	r3,r2,4
81129d9c:	e0fffe15 	stw	r3,-8(fp)
81129da0:	e0fff017 	ldw	r3,-64(fp)
81129da4:	18c00117 	ldw	r3,4(r3)
81129da8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
81129dac:	e0bff017 	ldw	r2,-64(fp)
81129db0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
81129db4:	e0bffd17 	ldw	r2,-12(fp)
81129db8:	10c00104 	addi	r3,r2,4
81129dbc:	e0fffd15 	stw	r3,-12(fp)
81129dc0:	e0fff017 	ldw	r3,-64(fp)
81129dc4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
81129dc8:	00800044 	movi	r2,1
81129dcc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81129dd0:	e0bff18b 	ldhu	r2,-58(fp)
81129dd4:	10800044 	addi	r2,r2,1
81129dd8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
81129ddc:	00003e06 	br	81129ed8 <OSEventPendMulti+0x390>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
81129de0:	e0bff203 	ldbu	r2,-56(fp)
81129de4:	10800094 	ori	r2,r2,2
81129de8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81129dec:	00003a06 	br	81129ed8 <OSEventPendMulti+0x390>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
81129df0:	e0bff017 	ldw	r2,-64(fp)
81129df4:	10800117 	ldw	r2,4(r2)
81129df8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
81129dfc:	e0bff517 	ldw	r2,-44(fp)
81129e00:	1080058b 	ldhu	r2,22(r2)
81129e04:	10bfffcc 	andi	r2,r2,65535
81129e08:	10002426 	beq	r2,zero,81129e9c <OSEventPendMulti+0x354>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
81129e0c:	e0bffe17 	ldw	r2,-8(fp)
81129e10:	10c00104 	addi	r3,r2,4
81129e14:	e0fffe15 	stw	r3,-8(fp)
81129e18:	e0fff517 	ldw	r3,-44(fp)
81129e1c:	18c00417 	ldw	r3,16(r3)
81129e20:	19400104 	addi	r5,r3,4
81129e24:	e13ff517 	ldw	r4,-44(fp)
81129e28:	21400415 	stw	r5,16(r4)
81129e2c:	18c00017 	ldw	r3,0(r3)
81129e30:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
81129e34:	e0bff517 	ldw	r2,-44(fp)
81129e38:	10c00417 	ldw	r3,16(r2)
81129e3c:	e0bff517 	ldw	r2,-44(fp)
81129e40:	10800217 	ldw	r2,8(r2)
81129e44:	1880041e 	bne	r3,r2,81129e58 <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
81129e48:	e0bff517 	ldw	r2,-44(fp)
81129e4c:	10c00117 	ldw	r3,4(r2)
81129e50:	e0bff517 	ldw	r2,-44(fp)
81129e54:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
81129e58:	e0bff517 	ldw	r2,-44(fp)
81129e5c:	1080058b 	ldhu	r2,22(r2)
81129e60:	10bfffc4 	addi	r2,r2,-1
81129e64:	1007883a 	mov	r3,r2
81129e68:	e0bff517 	ldw	r2,-44(fp)
81129e6c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
81129e70:	e0bffd17 	ldw	r2,-12(fp)
81129e74:	10c00104 	addi	r3,r2,4
81129e78:	e0fffd15 	stw	r3,-12(fp)
81129e7c:	e0fff017 	ldw	r3,-64(fp)
81129e80:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
81129e84:	00800044 	movi	r2,1
81129e88:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81129e8c:	e0bff18b 	ldhu	r2,-58(fp)
81129e90:	10800044 	addi	r2,r2,1
81129e94:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
81129e98:	00000f06 	br	81129ed8 <OSEventPendMulti+0x390>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
81129e9c:	e0bff203 	ldbu	r2,-56(fp)
81129ea0:	10800114 	ori	r2,r2,4
81129ea4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81129ea8:	00000b06 	br	81129ed8 <OSEventPendMulti+0x390>
81129eac:	e0bff317 	ldw	r2,-52(fp)
81129eb0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129eb4:	e0bff417 	ldw	r2,-48(fp)
81129eb8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
81129ebc:	e0bffd17 	ldw	r2,-12(fp)
81129ec0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
81129ec4:	e0800217 	ldw	r2,8(fp)
81129ec8:	00c00044 	movi	r3,1
81129ecc:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
81129ed0:	e0bff18b 	ldhu	r2,-58(fp)
81129ed4:	00009d06 	br	8112a14c <OSEventPendMulti+0x604>
        }
        pevents++;
81129ed8:	e0bfef17 	ldw	r2,-68(fp)
81129edc:	10800104 	addi	r2,r2,4
81129ee0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81129ee4:	e0bfef17 	ldw	r2,-68(fp)
81129ee8:	10800017 	ldw	r2,0(r2)
81129eec:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81129ef0:	e0bff017 	ldw	r2,-64(fp)
81129ef4:	103f7d1e 	bne	r2,zero,81129cec <__reset+0xfb109cec>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
81129ef8:	e0bff103 	ldbu	r2,-60(fp)
81129efc:	10800058 	cmpnei	r2,r2,1
81129f00:	10000a1e 	bne	r2,zero,81129f2c <OSEventPendMulti+0x3e4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
81129f04:	e0bffd17 	ldw	r2,-12(fp)
81129f08:	10000015 	stw	zero,0(r2)
81129f0c:	e0bff317 	ldw	r2,-52(fp)
81129f10:	e0bff615 	stw	r2,-40(fp)
81129f14:	e0bff617 	ldw	r2,-40(fp)
81129f18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
81129f1c:	e0800217 	ldw	r2,8(fp)
81129f20:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
81129f24:	e0bff18b 	ldhu	r2,-58(fp)
81129f28:	00008806 	br	8112a14c <OSEventPendMulti+0x604>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
81129f2c:	d0a08b17 	ldw	r2,-32212(gp)
81129f30:	d0e08b17 	ldw	r3,-32212(gp)
81129f34:	19000c03 	ldbu	r4,48(r3)
81129f38:	e0fff203 	ldbu	r3,-56(fp)
81129f3c:	20c6b03a 	or	r3,r4,r3
81129f40:	1809883a 	mov	r4,r3
81129f44:	00ffe004 	movi	r3,-128
81129f48:	20c6b03a 	or	r3,r4,r3
81129f4c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81129f50:	d0a08b17 	ldw	r2,-32212(gp)
81129f54:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
81129f58:	d0a08b17 	ldw	r2,-32212(gp)
81129f5c:	e0ffff0b 	ldhu	r3,-4(fp)
81129f60:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
81129f64:	e13ffc17 	ldw	r4,-16(fp)
81129f68:	112aaf00 	call	8112aaf0 <OS_EventTaskWaitMulti>
81129f6c:	e0bff317 	ldw	r2,-52(fp)
81129f70:	e0bff915 	stw	r2,-28(fp)
81129f74:	e0bff917 	ldw	r2,-28(fp)
81129f78:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
81129f7c:	112b2f40 	call	8112b2f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129f80:	0005303a 	rdctl	r2,status
81129f84:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129f88:	e0fff717 	ldw	r3,-36(fp)
81129f8c:	00bfff84 	movi	r2,-2
81129f90:	1884703a 	and	r2,r3,r2
81129f94:	1001703a 	wrctl	status,r2
  
  return context;
81129f98:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
81129f9c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
81129fa0:	d0a08b17 	ldw	r2,-32212(gp)
81129fa4:	10800c43 	ldbu	r2,49(r2)
81129fa8:	10803fcc 	andi	r2,r2,255
81129fac:	10000226 	beq	r2,zero,81129fb8 <OSEventPendMulti+0x470>
81129fb0:	108000a0 	cmpeqi	r2,r2,2
81129fb4:	10001826 	beq	r2,zero,8112a018 <OSEventPendMulti+0x4d0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
81129fb8:	d0a08b17 	ldw	r2,-32212(gp)
81129fbc:	10800717 	ldw	r2,28(r2)
81129fc0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
81129fc4:	e0bff017 	ldw	r2,-64(fp)
81129fc8:	10000b26 	beq	r2,zero,81129ff8 <OSEventPendMulti+0x4b0>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
81129fcc:	e0bffd17 	ldw	r2,-12(fp)
81129fd0:	10c00104 	addi	r3,r2,4
81129fd4:	e0fffd15 	stw	r3,-12(fp)
81129fd8:	e0fff017 	ldw	r3,-64(fp)
81129fdc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
81129fe0:	e0bffd17 	ldw	r2,-12(fp)
81129fe4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
81129fe8:	e0bff18b 	ldhu	r2,-58(fp)
81129fec:	10800044 	addi	r2,r2,1
81129ff0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
81129ff4:	00000d06 	br	8112a02c <OSEventPendMulti+0x4e4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
81129ff8:	d0a08b17 	ldw	r2,-32212(gp)
81129ffc:	00c00044 	movi	r3,1
8112a000:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
8112a004:	d0a08b17 	ldw	r2,-32212(gp)
8112a008:	e17ffc17 	ldw	r5,-16(fp)
8112a00c:	1009883a 	mov	r4,r2
8112a010:	112ad080 	call	8112ad08 <OS_EventTaskRemoveMulti>
             }
			 break;
8112a014:	00000506 	br	8112a02c <OSEventPendMulti+0x4e4>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
8112a018:	d0a08b17 	ldw	r2,-32212(gp)
8112a01c:	e17ffc17 	ldw	r5,-16(fp)
8112a020:	1009883a 	mov	r4,r2
8112a024:	112ad080 	call	8112ad08 <OS_EventTaskRemoveMulti>
             break;
8112a028:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
8112a02c:	d0a08b17 	ldw	r2,-32212(gp)
8112a030:	10800c43 	ldbu	r2,49(r2)
8112a034:	10803fcc 	andi	r2,r2,255
8112a038:	10000326 	beq	r2,zero,8112a048 <OSEventPendMulti+0x500>
8112a03c:	108000a0 	cmpeqi	r2,r2,2
8112a040:	1000231e 	bne	r2,zero,8112a0d0 <OSEventPendMulti+0x588>
8112a044:	00002a06 	br	8112a0f0 <OSEventPendMulti+0x5a8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
8112a048:	e0bff017 	ldw	r2,-64(fp)
8112a04c:	10800003 	ldbu	r2,0(r2)
8112a050:	10803fcc 	andi	r2,r2,255
8112a054:	0080100e 	bge	zero,r2,8112a098 <OSEventPendMulti+0x550>
8112a058:	10c000d0 	cmplti	r3,r2,3
8112a05c:	1800071e 	bne	r3,zero,8112a07c <OSEventPendMulti+0x534>
8112a060:	108000e0 	cmpeqi	r2,r2,3
8112a064:	10000c26 	beq	r2,zero,8112a098 <OSEventPendMulti+0x550>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
8112a068:	e0bffe17 	ldw	r2,-8(fp)
8112a06c:	10c00104 	addi	r3,r2,4
8112a070:	e0fffe15 	stw	r3,-8(fp)
8112a074:	10000015 	stw	zero,0(r2)
                      break;
8112a078:	00001206 	br	8112a0c4 <OSEventPendMulti+0x57c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
8112a07c:	e0bffe17 	ldw	r2,-8(fp)
8112a080:	10c00104 	addi	r3,r2,4
8112a084:	e0fffe15 	stw	r3,-8(fp)
8112a088:	d0e08b17 	ldw	r3,-32212(gp)
8112a08c:	18c00917 	ldw	r3,36(r3)
8112a090:	10c00015 	stw	r3,0(r2)
                      break;
8112a094:	00000b06 	br	8112a0c4 <OSEventPendMulti+0x57c>
8112a098:	e0bff317 	ldw	r2,-52(fp)
8112a09c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a0a0:	e0bff817 	ldw	r2,-32(fp)
8112a0a4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
8112a0a8:	e0bffd17 	ldw	r2,-12(fp)
8112a0ac:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
8112a0b0:	e0800217 	ldw	r2,8(fp)
8112a0b4:	00c00044 	movi	r3,1
8112a0b8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
8112a0bc:	e0bff18b 	ldhu	r2,-58(fp)
8112a0c0:	00002206 	br	8112a14c <OSEventPendMulti+0x604>
             }
            *perr = OS_ERR_NONE;
8112a0c4:	e0800217 	ldw	r2,8(fp)
8112a0c8:	10000005 	stb	zero,0(r2)
             break;
8112a0cc:	00001006 	br	8112a110 <OSEventPendMulti+0x5c8>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
8112a0d0:	e0bffe17 	ldw	r2,-8(fp)
8112a0d4:	10c00104 	addi	r3,r2,4
8112a0d8:	e0fffe15 	stw	r3,-8(fp)
8112a0dc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
8112a0e0:	e0800217 	ldw	r2,8(fp)
8112a0e4:	00c00384 	movi	r3,14
8112a0e8:	10c00005 	stb	r3,0(r2)
             break;
8112a0ec:	00000806 	br	8112a110 <OSEventPendMulti+0x5c8>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
8112a0f0:	e0bffe17 	ldw	r2,-8(fp)
8112a0f4:	10c00104 	addi	r3,r2,4
8112a0f8:	e0fffe15 	stw	r3,-8(fp)
8112a0fc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
8112a100:	e0800217 	ldw	r2,8(fp)
8112a104:	00c00284 	movi	r3,10
8112a108:	10c00005 	stb	r3,0(r2)
             break;
8112a10c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
8112a110:	d0a08b17 	ldw	r2,-32212(gp)
8112a114:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
8112a118:	d0a08b17 	ldw	r2,-32212(gp)
8112a11c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
8112a120:	d0a08b17 	ldw	r2,-32212(gp)
8112a124:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112a128:	d0a08b17 	ldw	r2,-32212(gp)
8112a12c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
8112a130:	d0a08b17 	ldw	r2,-32212(gp)
8112a134:	10000915 	stw	zero,36(r2)
8112a138:	e0bff317 	ldw	r2,-52(fp)
8112a13c:	e0bffa15 	stw	r2,-24(fp)
8112a140:	e0bffa17 	ldw	r2,-24(fp)
8112a144:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
8112a148:	e0bff18b 	ldhu	r2,-58(fp)
}
8112a14c:	e037883a 	mov	sp,fp
8112a150:	dfc00117 	ldw	ra,4(sp)
8112a154:	df000017 	ldw	fp,0(sp)
8112a158:	dec00204 	addi	sp,sp,8
8112a15c:	f800283a 	ret

8112a160 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
8112a160:	defffe04 	addi	sp,sp,-8
8112a164:	de00012e 	bgeu	sp,et,8112a16c <OSInit+0xc>
8112a168:	003b68fa 	trap	3
8112a16c:	dfc00115 	stw	ra,4(sp)
8112a170:	df000015 	stw	fp,0(sp)
8112a174:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
8112a178:	113c7340 	call	8113c734 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
8112a17c:	112af680 	call	8112af68 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
8112a180:	112afb80 	call	8112afb8 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
8112a184:	112b13c0 	call	8112b13c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
8112a188:	112ae800 	call	8112ae80 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
8112a18c:	112d0fc0 	call	8112d0fc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
8112a190:	112da440 	call	8112da44 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
8112a194:	112fd140 	call	8112fd14 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
8112a198:	112b02c0 	call	8112b02c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
8112a19c:	112b0b40 	call	8112b0b4 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
8112a1a0:	11330b80 	call	811330b8 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
8112a1a4:	113c7600 	call	8113c760 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
8112a1a8:	112ba180 	call	8112ba18 <OSDebugInit>
#endif
}
8112a1ac:	0001883a 	nop
8112a1b0:	e037883a 	mov	sp,fp
8112a1b4:	dfc00117 	ldw	ra,4(sp)
8112a1b8:	df000017 	ldw	fp,0(sp)
8112a1bc:	dec00204 	addi	sp,sp,8
8112a1c0:	f800283a 	ret

8112a1c4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
8112a1c4:	deffff04 	addi	sp,sp,-4
8112a1c8:	de00012e 	bgeu	sp,et,8112a1d0 <OSIntEnter+0xc>
8112a1cc:	003b68fa 	trap	3
8112a1d0:	df000015 	stw	fp,0(sp)
8112a1d4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
8112a1d8:	d0a07a03 	ldbu	r2,-32280(gp)
8112a1dc:	10803fcc 	andi	r2,r2,255
8112a1e0:	10800058 	cmpnei	r2,r2,1
8112a1e4:	1000071e 	bne	r2,zero,8112a204 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
8112a1e8:	d0a08a03 	ldbu	r2,-32216(gp)
8112a1ec:	10803fcc 	andi	r2,r2,255
8112a1f0:	10803fe0 	cmpeqi	r2,r2,255
8112a1f4:	1000031e 	bne	r2,zero,8112a204 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
8112a1f8:	d0a08a03 	ldbu	r2,-32216(gp)
8112a1fc:	10800044 	addi	r2,r2,1
8112a200:	d0a08a05 	stb	r2,-32216(gp)
        }
    }
}
8112a204:	0001883a 	nop
8112a208:	e037883a 	mov	sp,fp
8112a20c:	df000017 	ldw	fp,0(sp)
8112a210:	dec00104 	addi	sp,sp,4
8112a214:	f800283a 	ret

8112a218 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
8112a218:	defffb04 	addi	sp,sp,-20
8112a21c:	de00012e 	bgeu	sp,et,8112a224 <OSIntExit+0xc>
8112a220:	003b68fa 	trap	3
8112a224:	dfc00415 	stw	ra,16(sp)
8112a228:	df000315 	stw	fp,12(sp)
8112a22c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112a230:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
8112a234:	d0a07a03 	ldbu	r2,-32280(gp)
8112a238:	10803fcc 	andi	r2,r2,255
8112a23c:	10800058 	cmpnei	r2,r2,1
8112a240:	10002f1e 	bne	r2,zero,8112a300 <OSIntExit+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a244:	0005303a 	rdctl	r2,status
8112a248:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a24c:	e0ffff17 	ldw	r3,-4(fp)
8112a250:	00bfff84 	movi	r2,-2
8112a254:	1884703a 	and	r2,r3,r2
8112a258:	1001703a 	wrctl	status,r2
  
  return context;
8112a25c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112a260:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
8112a264:	d0a08a03 	ldbu	r2,-32216(gp)
8112a268:	10803fcc 	andi	r2,r2,255
8112a26c:	10000326 	beq	r2,zero,8112a27c <OSIntExit+0x64>
            OSIntNesting--;
8112a270:	d0a08a03 	ldbu	r2,-32216(gp)
8112a274:	10bfffc4 	addi	r2,r2,-1
8112a278:	d0a08a05 	stb	r2,-32216(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
8112a27c:	d0a08a03 	ldbu	r2,-32216(gp)
8112a280:	10803fcc 	andi	r2,r2,255
8112a284:	10001a1e 	bne	r2,zero,8112a2f0 <OSIntExit+0xd8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
8112a288:	d0a07803 	ldbu	r2,-32288(gp)
8112a28c:	10803fcc 	andi	r2,r2,255
8112a290:	1000171e 	bne	r2,zero,8112a2f0 <OSIntExit+0xd8>
                OS_SchedNew();
8112a294:	112b3cc0 	call	8112b3cc <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
8112a298:	d0e07c83 	ldbu	r3,-32270(gp)
8112a29c:	d0a07cc3 	ldbu	r2,-32269(gp)
8112a2a0:	18c03fcc 	andi	r3,r3,255
8112a2a4:	10803fcc 	andi	r2,r2,255
8112a2a8:	18801126 	beq	r3,r2,8112a2f0 <OSIntExit+0xd8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
8112a2ac:	d0a07c83 	ldbu	r2,-32270(gp)
8112a2b0:	10c03fcc 	andi	r3,r2,255
8112a2b4:	00a04574 	movhi	r2,33045
8112a2b8:	1081c704 	addi	r2,r2,1820
8112a2bc:	18c7883a 	add	r3,r3,r3
8112a2c0:	18c7883a 	add	r3,r3,r3
8112a2c4:	10c5883a 	add	r2,r2,r3
8112a2c8:	10800017 	ldw	r2,0(r2)
8112a2cc:	d0a08515 	stw	r2,-32236(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
8112a2d0:	d0a08517 	ldw	r2,-32236(gp)
8112a2d4:	10c00e17 	ldw	r3,56(r2)
8112a2d8:	18c00044 	addi	r3,r3,1
8112a2dc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
8112a2e0:	d0a07f17 	ldw	r2,-32260(gp)
8112a2e4:	10800044 	addi	r2,r2,1
8112a2e8:	d0a07f15 	stw	r2,-32260(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
8112a2ec:	113c3f40 	call	8113c3f4 <OSCtxSw>
8112a2f0:	e0bffd17 	ldw	r2,-12(fp)
8112a2f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a2f8:	e0bffe17 	ldw	r2,-8(fp)
8112a2fc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112a300:	0001883a 	nop
8112a304:	e037883a 	mov	sp,fp
8112a308:	dfc00117 	ldw	ra,4(sp)
8112a30c:	df000017 	ldw	fp,0(sp)
8112a310:	dec00204 	addi	sp,sp,8
8112a314:	f800283a 	ret

8112a318 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
8112a318:	defffc04 	addi	sp,sp,-16
8112a31c:	de00012e 	bgeu	sp,et,8112a324 <OSSchedLock+0xc>
8112a320:	003b68fa 	trap	3
8112a324:	df000315 	stw	fp,12(sp)
8112a328:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a32c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
8112a330:	d0a07a03 	ldbu	r2,-32280(gp)
8112a334:	10803fcc 	andi	r2,r2,255
8112a338:	10800058 	cmpnei	r2,r2,1
8112a33c:	1000161e 	bne	r2,zero,8112a398 <OSSchedLock+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a340:	0005303a 	rdctl	r2,status
8112a344:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a348:	e0ffff17 	ldw	r3,-4(fp)
8112a34c:	00bfff84 	movi	r2,-2
8112a350:	1884703a 	and	r2,r3,r2
8112a354:	1001703a 	wrctl	status,r2
  
  return context;
8112a358:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112a35c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
8112a360:	d0a08a03 	ldbu	r2,-32216(gp)
8112a364:	10803fcc 	andi	r2,r2,255
8112a368:	1000071e 	bne	r2,zero,8112a388 <OSSchedLock+0x70>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
8112a36c:	d0a07803 	ldbu	r2,-32288(gp)
8112a370:	10803fcc 	andi	r2,r2,255
8112a374:	10803fe0 	cmpeqi	r2,r2,255
8112a378:	1000031e 	bne	r2,zero,8112a388 <OSSchedLock+0x70>
                OSLockNesting++;                 /* Increment lock nesting level                       */
8112a37c:	d0a07803 	ldbu	r2,-32288(gp)
8112a380:	10800044 	addi	r2,r2,1
8112a384:	d0a07805 	stb	r2,-32288(gp)
8112a388:	e0bffd17 	ldw	r2,-12(fp)
8112a38c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a390:	e0bffe17 	ldw	r2,-8(fp)
8112a394:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112a398:	0001883a 	nop
8112a39c:	e037883a 	mov	sp,fp
8112a3a0:	df000017 	ldw	fp,0(sp)
8112a3a4:	dec00104 	addi	sp,sp,4
8112a3a8:	f800283a 	ret

8112a3ac <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
8112a3ac:	defff804 	addi	sp,sp,-32
8112a3b0:	de00012e 	bgeu	sp,et,8112a3b8 <OSSchedUnlock+0xc>
8112a3b4:	003b68fa 	trap	3
8112a3b8:	dfc00715 	stw	ra,28(sp)
8112a3bc:	df000615 	stw	fp,24(sp)
8112a3c0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112a3c4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
8112a3c8:	d0a07a03 	ldbu	r2,-32280(gp)
8112a3cc:	10803fcc 	andi	r2,r2,255
8112a3d0:	10800058 	cmpnei	r2,r2,1
8112a3d4:	1000281e 	bne	r2,zero,8112a478 <OSSchedUnlock+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a3d8:	0005303a 	rdctl	r2,status
8112a3dc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a3e0:	e0ffff17 	ldw	r3,-4(fp)
8112a3e4:	00bfff84 	movi	r2,-2
8112a3e8:	1884703a 	and	r2,r3,r2
8112a3ec:	1001703a 	wrctl	status,r2
  
  return context;
8112a3f0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112a3f4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
8112a3f8:	d0a07803 	ldbu	r2,-32288(gp)
8112a3fc:	10803fcc 	andi	r2,r2,255
8112a400:	10001926 	beq	r2,zero,8112a468 <OSSchedUnlock+0xbc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
8112a404:	d0a07803 	ldbu	r2,-32288(gp)
8112a408:	10bfffc4 	addi	r2,r2,-1
8112a40c:	d0a07805 	stb	r2,-32288(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
8112a410:	d0a07803 	ldbu	r2,-32288(gp)
8112a414:	10803fcc 	andi	r2,r2,255
8112a418:	10000e1e 	bne	r2,zero,8112a454 <OSSchedUnlock+0xa8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
8112a41c:	d0a08a03 	ldbu	r2,-32216(gp)
8112a420:	10803fcc 	andi	r2,r2,255
8112a424:	1000061e 	bne	r2,zero,8112a440 <OSSchedUnlock+0x94>
8112a428:	e0bffa17 	ldw	r2,-24(fp)
8112a42c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a430:	e0bffb17 	ldw	r2,-20(fp)
8112a434:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
8112a438:	112b2f40 	call	8112b2f4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
8112a43c:	00000e06 	br	8112a478 <OSSchedUnlock+0xcc>
8112a440:	e0bffa17 	ldw	r2,-24(fp)
8112a444:	e0bffc15 	stw	r2,-16(fp)
8112a448:	e0bffc17 	ldw	r2,-16(fp)
8112a44c:	1001703a 	wrctl	status,r2
8112a450:	00000906 	br	8112a478 <OSSchedUnlock+0xcc>
8112a454:	e0bffa17 	ldw	r2,-24(fp)
8112a458:	e0bffd15 	stw	r2,-12(fp)
8112a45c:	e0bffd17 	ldw	r2,-12(fp)
8112a460:	1001703a 	wrctl	status,r2
8112a464:	00000406 	br	8112a478 <OSSchedUnlock+0xcc>
8112a468:	e0bffa17 	ldw	r2,-24(fp)
8112a46c:	e0bffe15 	stw	r2,-8(fp)
8112a470:	e0bffe17 	ldw	r2,-8(fp)
8112a474:	1001703a 	wrctl	status,r2
8112a478:	0001883a 	nop
8112a47c:	e037883a 	mov	sp,fp
8112a480:	dfc00117 	ldw	ra,4(sp)
8112a484:	df000017 	ldw	fp,0(sp)
8112a488:	dec00204 	addi	sp,sp,8
8112a48c:	f800283a 	ret

8112a490 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
8112a490:	defffe04 	addi	sp,sp,-8
8112a494:	de00012e 	bgeu	sp,et,8112a49c <OSStart+0xc>
8112a498:	003b68fa 	trap	3
8112a49c:	dfc00115 	stw	ra,4(sp)
8112a4a0:	df000015 	stw	fp,0(sp)
8112a4a4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
8112a4a8:	d0a07a03 	ldbu	r2,-32280(gp)
8112a4ac:	10803fcc 	andi	r2,r2,255
8112a4b0:	10000f1e 	bne	r2,zero,8112a4f0 <OSStart+0x60>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
8112a4b4:	112b3cc0 	call	8112b3cc <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
8112a4b8:	d0a07c83 	ldbu	r2,-32270(gp)
8112a4bc:	d0a07cc5 	stb	r2,-32269(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
8112a4c0:	d0a07c83 	ldbu	r2,-32270(gp)
8112a4c4:	10c03fcc 	andi	r3,r2,255
8112a4c8:	00a04574 	movhi	r2,33045
8112a4cc:	1081c704 	addi	r2,r2,1820
8112a4d0:	18c7883a 	add	r3,r3,r3
8112a4d4:	18c7883a 	add	r3,r3,r3
8112a4d8:	10c5883a 	add	r2,r2,r3
8112a4dc:	10800017 	ldw	r2,0(r2)
8112a4e0:	d0a08515 	stw	r2,-32236(gp)
        OSTCBCur      = OSTCBHighRdy;
8112a4e4:	d0a08517 	ldw	r2,-32236(gp)
8112a4e8:	d0a08b15 	stw	r2,-32212(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
8112a4ec:	113c4900 	call	8113c490 <OSStartHighRdy>
    }
}
8112a4f0:	0001883a 	nop
8112a4f4:	e037883a 	mov	sp,fp
8112a4f8:	dfc00117 	ldw	ra,4(sp)
8112a4fc:	df000017 	ldw	fp,0(sp)
8112a500:	dec00204 	addi	sp,sp,8
8112a504:	f800283a 	ret

8112a508 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
8112a508:	defff904 	addi	sp,sp,-28
8112a50c:	de00012e 	bgeu	sp,et,8112a514 <OSStatInit+0xc>
8112a510:	003b68fa 	trap	3
8112a514:	dfc00615 	stw	ra,24(sp)
8112a518:	df000515 	stw	fp,20(sp)
8112a51c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a520:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
8112a524:	01000084 	movi	r4,2
8112a528:	11320300 	call	81132030 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a52c:	0005303a 	rdctl	r2,status
8112a530:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a534:	e0fffc17 	ldw	r3,-16(fp)
8112a538:	00bfff84 	movi	r2,-2
8112a53c:	1884703a 	and	r2,r3,r2
8112a540:	1001703a 	wrctl	status,r2
  
  return context;
8112a544:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
8112a548:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
8112a54c:	d0207b15 	stw	zero,-32276(gp)
8112a550:	e0bffb17 	ldw	r2,-20(fp)
8112a554:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a558:	e0bffd17 	ldw	r2,-12(fp)
8112a55c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
8112a560:	01001904 	movi	r4,100
8112a564:	11320300 	call	81132030 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a568:	0005303a 	rdctl	r2,status
8112a56c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a570:	e0fffe17 	ldw	r3,-8(fp)
8112a574:	00bfff84 	movi	r2,-2
8112a578:	1884703a 	and	r2,r3,r2
8112a57c:	1001703a 	wrctl	status,r2
  
  return context;
8112a580:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
8112a584:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
8112a588:	d0a07b17 	ldw	r2,-32276(gp)
8112a58c:	d0a08115 	stw	r2,-32252(gp)
    OSStatRdy    = OS_TRUE;
8112a590:	00800044 	movi	r2,1
8112a594:	d0a09005 	stb	r2,-32192(gp)
8112a598:	e0bffb17 	ldw	r2,-20(fp)
8112a59c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a5a0:	e0bfff17 	ldw	r2,-4(fp)
8112a5a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8112a5a8:	0001883a 	nop
8112a5ac:	e037883a 	mov	sp,fp
8112a5b0:	dfc00117 	ldw	ra,4(sp)
8112a5b4:	df000017 	ldw	fp,0(sp)
8112a5b8:	dec00204 	addi	sp,sp,8
8112a5bc:	f800283a 	ret

8112a5c0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
8112a5c0:	defff704 	addi	sp,sp,-36
8112a5c4:	de00012e 	bgeu	sp,et,8112a5cc <OSTimeTick+0xc>
8112a5c8:	003b68fa 	trap	3
8112a5cc:	dfc00815 	stw	ra,32(sp)
8112a5d0:	df000715 	stw	fp,28(sp)
8112a5d4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112a5d8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
8112a5dc:	113c6e00 	call	8113c6e0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a5e0:	0005303a 	rdctl	r2,status
8112a5e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a5e8:	e0fffd17 	ldw	r3,-12(fp)
8112a5ec:	00bfff84 	movi	r2,-2
8112a5f0:	1884703a 	and	r2,r3,r2
8112a5f4:	1001703a 	wrctl	status,r2
  
  return context;
8112a5f8:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
8112a5fc:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
8112a600:	d0a08d17 	ldw	r2,-32204(gp)
8112a604:	10800044 	addi	r2,r2,1
8112a608:	d0a08d15 	stw	r2,-32204(gp)
8112a60c:	e0bffb17 	ldw	r2,-20(fp)
8112a610:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a614:	e0bfff17 	ldw	r2,-4(fp)
8112a618:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
8112a61c:	d0a07a03 	ldbu	r2,-32280(gp)
8112a620:	10803fcc 	andi	r2,r2,255
8112a624:	10800058 	cmpnei	r2,r2,1
8112a628:	10006a1e 	bne	r2,zero,8112a7d4 <OSTimeTick+0x214>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
8112a62c:	d0a07e03 	ldbu	r2,-32264(gp)
8112a630:	10803fcc 	andi	r2,r2,255
8112a634:	10c00060 	cmpeqi	r3,r2,1
8112a638:	1800061e 	bne	r3,zero,8112a654 <OSTimeTick+0x94>
8112a63c:	10c000a0 	cmpeqi	r3,r2,2
8112a640:	1800061e 	bne	r3,zero,8112a65c <OSTimeTick+0x9c>
8112a644:	10000a1e 	bne	r2,zero,8112a670 <OSTimeTick+0xb0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
8112a648:	00800044 	movi	r2,1
8112a64c:	e0bffa05 	stb	r2,-24(fp)
                 break;
8112a650:	00000b06 	br	8112a680 <OSTimeTick+0xc0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
8112a654:	e03ffa05 	stb	zero,-24(fp)
                 break;
8112a658:	00000906 	br	8112a680 <OSTimeTick+0xc0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
8112a65c:	00800044 	movi	r2,1
8112a660:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
8112a664:	00800044 	movi	r2,1
8112a668:	d0a07e05 	stb	r2,-32264(gp)
                 break;
8112a66c:	00000406 	br	8112a680 <OSTimeTick+0xc0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
8112a670:	00800044 	movi	r2,1
8112a674:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
8112a678:	d0207e05 	stb	zero,-32264(gp)
                 break;
8112a67c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
8112a680:	e0bffa03 	ldbu	r2,-24(fp)
8112a684:	10005226 	beq	r2,zero,8112a7d0 <OSTimeTick+0x210>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
8112a688:	d0a07d17 	ldw	r2,-32268(gp)
8112a68c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112a690:	00004906 	br	8112a7b8 <OSTimeTick+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a694:	0005303a 	rdctl	r2,status
8112a698:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a69c:	e0fffc17 	ldw	r3,-16(fp)
8112a6a0:	00bfff84 	movi	r2,-2
8112a6a4:	1884703a 	and	r2,r3,r2
8112a6a8:	1001703a 	wrctl	status,r2
  
  return context;
8112a6ac:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
8112a6b0:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
8112a6b4:	e0bff917 	ldw	r2,-28(fp)
8112a6b8:	10800b8b 	ldhu	r2,46(r2)
8112a6bc:	10bfffcc 	andi	r2,r2,65535
8112a6c0:	10003626 	beq	r2,zero,8112a79c <OSTimeTick+0x1dc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
8112a6c4:	e0bff917 	ldw	r2,-28(fp)
8112a6c8:	10800b8b 	ldhu	r2,46(r2)
8112a6cc:	10bfffc4 	addi	r2,r2,-1
8112a6d0:	1007883a 	mov	r3,r2
8112a6d4:	e0bff917 	ldw	r2,-28(fp)
8112a6d8:	10c00b8d 	sth	r3,46(r2)
8112a6dc:	e0bff917 	ldw	r2,-28(fp)
8112a6e0:	10800b8b 	ldhu	r2,46(r2)
8112a6e4:	10bfffcc 	andi	r2,r2,65535
8112a6e8:	10002c1e 	bne	r2,zero,8112a79c <OSTimeTick+0x1dc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8112a6ec:	e0bff917 	ldw	r2,-28(fp)
8112a6f0:	10800c03 	ldbu	r2,48(r2)
8112a6f4:	10803fcc 	andi	r2,r2,255
8112a6f8:	10800dcc 	andi	r2,r2,55
8112a6fc:	10000b26 	beq	r2,zero,8112a72c <OSTimeTick+0x16c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
8112a700:	e0bff917 	ldw	r2,-28(fp)
8112a704:	10c00c03 	ldbu	r3,48(r2)
8112a708:	00bff204 	movi	r2,-56
8112a70c:	1884703a 	and	r2,r3,r2
8112a710:	1007883a 	mov	r3,r2
8112a714:	e0bff917 	ldw	r2,-28(fp)
8112a718:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
8112a71c:	e0bff917 	ldw	r2,-28(fp)
8112a720:	00c00044 	movi	r3,1
8112a724:	10c00c45 	stb	r3,49(r2)
8112a728:	00000206 	br	8112a734 <OSTimeTick+0x174>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112a72c:	e0bff917 	ldw	r2,-28(fp)
8112a730:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
8112a734:	e0bff917 	ldw	r2,-28(fp)
8112a738:	10800c03 	ldbu	r2,48(r2)
8112a73c:	10803fcc 	andi	r2,r2,255
8112a740:	1080020c 	andi	r2,r2,8
8112a744:	1000151e 	bne	r2,zero,8112a79c <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
8112a748:	e0bff917 	ldw	r2,-28(fp)
8112a74c:	10c00d83 	ldbu	r3,54(r2)
8112a750:	d0a08703 	ldbu	r2,-32228(gp)
8112a754:	1884b03a 	or	r2,r3,r2
8112a758:	d0a08705 	stb	r2,-32228(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112a75c:	e0bff917 	ldw	r2,-28(fp)
8112a760:	10800d03 	ldbu	r2,52(r2)
8112a764:	10c03fcc 	andi	r3,r2,255
8112a768:	e0bff917 	ldw	r2,-28(fp)
8112a76c:	10800d03 	ldbu	r2,52(r2)
8112a770:	11003fcc 	andi	r4,r2,255
8112a774:	d0a08744 	addi	r2,gp,-32227
8112a778:	2085883a 	add	r2,r4,r2
8112a77c:	11000003 	ldbu	r4,0(r2)
8112a780:	e0bff917 	ldw	r2,-28(fp)
8112a784:	10800d43 	ldbu	r2,53(r2)
8112a788:	2084b03a 	or	r2,r4,r2
8112a78c:	1009883a 	mov	r4,r2
8112a790:	d0a08744 	addi	r2,gp,-32227
8112a794:	1885883a 	add	r2,r3,r2
8112a798:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
8112a79c:	e0bff917 	ldw	r2,-28(fp)
8112a7a0:	10800517 	ldw	r2,20(r2)
8112a7a4:	e0bff915 	stw	r2,-28(fp)
8112a7a8:	e0bffb17 	ldw	r2,-20(fp)
8112a7ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a7b0:	e0bffe17 	ldw	r2,-8(fp)
8112a7b4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112a7b8:	e0bff917 	ldw	r2,-28(fp)
8112a7bc:	10800c83 	ldbu	r2,50(r2)
8112a7c0:	10803fcc 	andi	r2,r2,255
8112a7c4:	10800a18 	cmpnei	r2,r2,40
8112a7c8:	103fb21e 	bne	r2,zero,8112a694 <__reset+0xfb10a694>
8112a7cc:	00000106 	br	8112a7d4 <OSTimeTick+0x214>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
8112a7d0:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
8112a7d4:	e037883a 	mov	sp,fp
8112a7d8:	dfc00117 	ldw	ra,4(sp)
8112a7dc:	df000017 	ldw	fp,0(sp)
8112a7e0:	dec00204 	addi	sp,sp,8
8112a7e4:	f800283a 	ret

8112a7e8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
8112a7e8:	deffff04 	addi	sp,sp,-4
8112a7ec:	de00012e 	bgeu	sp,et,8112a7f4 <OSVersion+0xc>
8112a7f0:	003b68fa 	trap	3
8112a7f4:	df000015 	stw	fp,0(sp)
8112a7f8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
8112a7fc:	00804784 	movi	r2,286
}
8112a800:	e037883a 	mov	sp,fp
8112a804:	df000017 	ldw	fp,0(sp)
8112a808:	dec00104 	addi	sp,sp,4
8112a80c:	f800283a 	ret

8112a810 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
8112a810:	deffff04 	addi	sp,sp,-4
8112a814:	de00012e 	bgeu	sp,et,8112a81c <OS_Dummy+0xc>
8112a818:	003b68fa 	trap	3
8112a81c:	df000015 	stw	fp,0(sp)
8112a820:	d839883a 	mov	fp,sp
}
8112a824:	0001883a 	nop
8112a828:	e037883a 	mov	sp,fp
8112a82c:	df000017 	ldw	fp,0(sp)
8112a830:	dec00104 	addi	sp,sp,4
8112a834:	f800283a 	ret

8112a838 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
8112a838:	defff804 	addi	sp,sp,-32
8112a83c:	de00012e 	bgeu	sp,et,8112a844 <OS_EventTaskRdy+0xc>
8112a840:	003b68fa 	trap	3
8112a844:	dfc00715 	stw	ra,28(sp)
8112a848:	df000615 	stw	fp,24(sp)
8112a84c:	df000604 	addi	fp,sp,24
8112a850:	e13ffc15 	stw	r4,-16(fp)
8112a854:	e17ffd15 	stw	r5,-12(fp)
8112a858:	3007883a 	mov	r3,r6
8112a85c:	3805883a 	mov	r2,r7
8112a860:	e0fffe05 	stb	r3,-8(fp)
8112a864:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
8112a868:	e0bffc17 	ldw	r2,-16(fp)
8112a86c:	10800283 	ldbu	r2,10(r2)
8112a870:	10c03fcc 	andi	r3,r2,255
8112a874:	00a04534 	movhi	r2,33044
8112a878:	10823104 	addi	r2,r2,2244
8112a87c:	10c5883a 	add	r2,r2,r3
8112a880:	10800003 	ldbu	r2,0(r2)
8112a884:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
8112a888:	e0bffa03 	ldbu	r2,-24(fp)
8112a88c:	e0fffc17 	ldw	r3,-16(fp)
8112a890:	1885883a 	add	r2,r3,r2
8112a894:	108002c4 	addi	r2,r2,11
8112a898:	10800003 	ldbu	r2,0(r2)
8112a89c:	10c03fcc 	andi	r3,r2,255
8112a8a0:	00a04534 	movhi	r2,33044
8112a8a4:	10823104 	addi	r2,r2,2244
8112a8a8:	10c5883a 	add	r2,r2,r3
8112a8ac:	10800003 	ldbu	r2,0(r2)
8112a8b0:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
8112a8b4:	e0bffa03 	ldbu	r2,-24(fp)
8112a8b8:	100490fa 	slli	r2,r2,3
8112a8bc:	1007883a 	mov	r3,r2
8112a8c0:	e0bffa43 	ldbu	r2,-23(fp)
8112a8c4:	1885883a 	add	r2,r3,r2
8112a8c8:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
8112a8cc:	e0fffa83 	ldbu	r3,-22(fp)
8112a8d0:	00a04574 	movhi	r2,33045
8112a8d4:	1081c704 	addi	r2,r2,1820
8112a8d8:	18c7883a 	add	r3,r3,r3
8112a8dc:	18c7883a 	add	r3,r3,r3
8112a8e0:	10c5883a 	add	r2,r2,r3
8112a8e4:	10800017 	ldw	r2,0(r2)
8112a8e8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
8112a8ec:	e0bffb17 	ldw	r2,-20(fp)
8112a8f0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
8112a8f4:	e0bffb17 	ldw	r2,-20(fp)
8112a8f8:	e0fffd17 	ldw	r3,-12(fp)
8112a8fc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
8112a900:	e0bffb17 	ldw	r2,-20(fp)
8112a904:	10800c03 	ldbu	r2,48(r2)
8112a908:	1007883a 	mov	r3,r2
8112a90c:	e0bffe03 	ldbu	r2,-8(fp)
8112a910:	0084303a 	nor	r2,zero,r2
8112a914:	1884703a 	and	r2,r3,r2
8112a918:	1007883a 	mov	r3,r2
8112a91c:	e0bffb17 	ldw	r2,-20(fp)
8112a920:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
8112a924:	e0bffb17 	ldw	r2,-20(fp)
8112a928:	e0ffff03 	ldbu	r3,-4(fp)
8112a92c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
8112a930:	e0bffb17 	ldw	r2,-20(fp)
8112a934:	10800c03 	ldbu	r2,48(r2)
8112a938:	10803fcc 	andi	r2,r2,255
8112a93c:	1080020c 	andi	r2,r2,8
8112a940:	1000111e 	bne	r2,zero,8112a988 <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
8112a944:	e0bffb17 	ldw	r2,-20(fp)
8112a948:	10c00d83 	ldbu	r3,54(r2)
8112a94c:	d0a08703 	ldbu	r2,-32228(gp)
8112a950:	1884b03a 	or	r2,r3,r2
8112a954:	d0a08705 	stb	r2,-32228(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
8112a958:	e0fffa03 	ldbu	r3,-24(fp)
8112a95c:	e13ffa03 	ldbu	r4,-24(fp)
8112a960:	d0a08744 	addi	r2,gp,-32227
8112a964:	2085883a 	add	r2,r4,r2
8112a968:	11000003 	ldbu	r4,0(r2)
8112a96c:	e0bffb17 	ldw	r2,-20(fp)
8112a970:	10800d43 	ldbu	r2,53(r2)
8112a974:	2084b03a 	or	r2,r4,r2
8112a978:	1009883a 	mov	r4,r2
8112a97c:	d0a08744 	addi	r2,gp,-32227
8112a980:	1885883a 	add	r2,r3,r2
8112a984:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
8112a988:	e17ffc17 	ldw	r5,-16(fp)
8112a98c:	e13ffb17 	ldw	r4,-20(fp)
8112a990:	112ac480 	call	8112ac48 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
8112a994:	e0bffb17 	ldw	r2,-20(fp)
8112a998:	10800817 	ldw	r2,32(r2)
8112a99c:	10000826 	beq	r2,zero,8112a9c0 <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112a9a0:	e0bffb17 	ldw	r2,-20(fp)
8112a9a4:	10800817 	ldw	r2,32(r2)
8112a9a8:	100b883a 	mov	r5,r2
8112a9ac:	e13ffb17 	ldw	r4,-20(fp)
8112a9b0:	112ad080 	call	8112ad08 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
8112a9b4:	e0bffb17 	ldw	r2,-20(fp)
8112a9b8:	e0fffc17 	ldw	r3,-16(fp)
8112a9bc:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
8112a9c0:	e0bffa83 	ldbu	r2,-22(fp)
}
8112a9c4:	e037883a 	mov	sp,fp
8112a9c8:	dfc00117 	ldw	ra,4(sp)
8112a9cc:	df000017 	ldw	fp,0(sp)
8112a9d0:	dec00204 	addi	sp,sp,8
8112a9d4:	f800283a 	ret

8112a9d8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
8112a9d8:	defffd04 	addi	sp,sp,-12
8112a9dc:	de00012e 	bgeu	sp,et,8112a9e4 <OS_EventTaskWait+0xc>
8112a9e0:	003b68fa 	trap	3
8112a9e4:	df000215 	stw	fp,8(sp)
8112a9e8:	df000204 	addi	fp,sp,8
8112a9ec:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
8112a9f0:	d0a08b17 	ldw	r2,-32212(gp)
8112a9f4:	e0ffff17 	ldw	r3,-4(fp)
8112a9f8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
8112a9fc:	d0a08b17 	ldw	r2,-32212(gp)
8112aa00:	10800d03 	ldbu	r2,52(r2)
8112aa04:	10803fcc 	andi	r2,r2,255
8112aa08:	d0e08b17 	ldw	r3,-32212(gp)
8112aa0c:	18c00d03 	ldbu	r3,52(r3)
8112aa10:	18c03fcc 	andi	r3,r3,255
8112aa14:	e13fff17 	ldw	r4,-4(fp)
8112aa18:	20c7883a 	add	r3,r4,r3
8112aa1c:	18c002c4 	addi	r3,r3,11
8112aa20:	19000003 	ldbu	r4,0(r3)
8112aa24:	d0e08b17 	ldw	r3,-32212(gp)
8112aa28:	18c00d43 	ldbu	r3,53(r3)
8112aa2c:	20c6b03a 	or	r3,r4,r3
8112aa30:	1809883a 	mov	r4,r3
8112aa34:	e0ffff17 	ldw	r3,-4(fp)
8112aa38:	1885883a 	add	r2,r3,r2
8112aa3c:	108002c4 	addi	r2,r2,11
8112aa40:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
8112aa44:	e0bfff17 	ldw	r2,-4(fp)
8112aa48:	10c00283 	ldbu	r3,10(r2)
8112aa4c:	d0a08b17 	ldw	r2,-32212(gp)
8112aa50:	10800d83 	ldbu	r2,54(r2)
8112aa54:	1884b03a 	or	r2,r3,r2
8112aa58:	1007883a 	mov	r3,r2
8112aa5c:	e0bfff17 	ldw	r2,-4(fp)
8112aa60:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8112aa64:	d0a08b17 	ldw	r2,-32212(gp)
8112aa68:	10800d03 	ldbu	r2,52(r2)
8112aa6c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112aa70:	e0fffe03 	ldbu	r3,-8(fp)
8112aa74:	e13ffe03 	ldbu	r4,-8(fp)
8112aa78:	d0a08744 	addi	r2,gp,-32227
8112aa7c:	2085883a 	add	r2,r4,r2
8112aa80:	10800003 	ldbu	r2,0(r2)
8112aa84:	1009883a 	mov	r4,r2
8112aa88:	d0a08b17 	ldw	r2,-32212(gp)
8112aa8c:	10800d43 	ldbu	r2,53(r2)
8112aa90:	0084303a 	nor	r2,zero,r2
8112aa94:	2084703a 	and	r2,r4,r2
8112aa98:	1009883a 	mov	r4,r2
8112aa9c:	d0a08744 	addi	r2,gp,-32227
8112aaa0:	1885883a 	add	r2,r3,r2
8112aaa4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112aaa8:	e0fffe03 	ldbu	r3,-8(fp)
8112aaac:	d0a08744 	addi	r2,gp,-32227
8112aab0:	1885883a 	add	r2,r3,r2
8112aab4:	10800003 	ldbu	r2,0(r2)
8112aab8:	10803fcc 	andi	r2,r2,255
8112aabc:	1000071e 	bne	r2,zero,8112aadc <OS_EventTaskWait+0x104>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8112aac0:	d0a08b17 	ldw	r2,-32212(gp)
8112aac4:	10800d83 	ldbu	r2,54(r2)
8112aac8:	0084303a 	nor	r2,zero,r2
8112aacc:	1007883a 	mov	r3,r2
8112aad0:	d0a08703 	ldbu	r2,-32228(gp)
8112aad4:	1884703a 	and	r2,r3,r2
8112aad8:	d0a08705 	stb	r2,-32228(gp)
    }
}
8112aadc:	0001883a 	nop
8112aae0:	e037883a 	mov	sp,fp
8112aae4:	df000017 	ldw	fp,0(sp)
8112aae8:	dec00104 	addi	sp,sp,4
8112aaec:	f800283a 	ret

8112aaf0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
8112aaf0:	defffb04 	addi	sp,sp,-20
8112aaf4:	de00012e 	bgeu	sp,et,8112aafc <OS_EventTaskWaitMulti+0xc>
8112aaf8:	003b68fa 	trap	3
8112aafc:	df000415 	stw	fp,16(sp)
8112ab00:	df000404 	addi	fp,sp,16
8112ab04:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
8112ab08:	d0a08b17 	ldw	r2,-32212(gp)
8112ab0c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
8112ab10:	d0a08b17 	ldw	r2,-32212(gp)
8112ab14:	e0ffff17 	ldw	r3,-4(fp)
8112ab18:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
8112ab1c:	e0bfff17 	ldw	r2,-4(fp)
8112ab20:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
8112ab24:	e0bffc17 	ldw	r2,-16(fp)
8112ab28:	10800017 	ldw	r2,0(r2)
8112ab2c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112ab30:	00002006 	br	8112abb4 <OS_EventTaskWaitMulti+0xc4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
8112ab34:	d0a08b17 	ldw	r2,-32212(gp)
8112ab38:	10800d03 	ldbu	r2,52(r2)
8112ab3c:	10803fcc 	andi	r2,r2,255
8112ab40:	d0e08b17 	ldw	r3,-32212(gp)
8112ab44:	18c00d03 	ldbu	r3,52(r3)
8112ab48:	18c03fcc 	andi	r3,r3,255
8112ab4c:	e13ffd17 	ldw	r4,-12(fp)
8112ab50:	20c7883a 	add	r3,r4,r3
8112ab54:	18c002c4 	addi	r3,r3,11
8112ab58:	19000003 	ldbu	r4,0(r3)
8112ab5c:	d0e08b17 	ldw	r3,-32212(gp)
8112ab60:	18c00d43 	ldbu	r3,53(r3)
8112ab64:	20c6b03a 	or	r3,r4,r3
8112ab68:	1809883a 	mov	r4,r3
8112ab6c:	e0fffd17 	ldw	r3,-12(fp)
8112ab70:	1885883a 	add	r2,r3,r2
8112ab74:	108002c4 	addi	r2,r2,11
8112ab78:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
8112ab7c:	e0bffd17 	ldw	r2,-12(fp)
8112ab80:	10c00283 	ldbu	r3,10(r2)
8112ab84:	d0a08b17 	ldw	r2,-32212(gp)
8112ab88:	10800d83 	ldbu	r2,54(r2)
8112ab8c:	1884b03a 	or	r2,r3,r2
8112ab90:	1007883a 	mov	r3,r2
8112ab94:	e0bffd17 	ldw	r2,-12(fp)
8112ab98:	10c00285 	stb	r3,10(r2)
        pevents++;
8112ab9c:	e0bffc17 	ldw	r2,-16(fp)
8112aba0:	10800104 	addi	r2,r2,4
8112aba4:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
8112aba8:	e0bffc17 	ldw	r2,-16(fp)
8112abac:	10800017 	ldw	r2,0(r2)
8112abb0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112abb4:	e0bffd17 	ldw	r2,-12(fp)
8112abb8:	103fde1e 	bne	r2,zero,8112ab34 <__reset+0xfb10ab34>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8112abbc:	d0a08b17 	ldw	r2,-32212(gp)
8112abc0:	10800d03 	ldbu	r2,52(r2)
8112abc4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112abc8:	e0fffe03 	ldbu	r3,-8(fp)
8112abcc:	e13ffe03 	ldbu	r4,-8(fp)
8112abd0:	d0a08744 	addi	r2,gp,-32227
8112abd4:	2085883a 	add	r2,r4,r2
8112abd8:	10800003 	ldbu	r2,0(r2)
8112abdc:	1009883a 	mov	r4,r2
8112abe0:	d0a08b17 	ldw	r2,-32212(gp)
8112abe4:	10800d43 	ldbu	r2,53(r2)
8112abe8:	0084303a 	nor	r2,zero,r2
8112abec:	2084703a 	and	r2,r4,r2
8112abf0:	1009883a 	mov	r4,r2
8112abf4:	d0a08744 	addi	r2,gp,-32227
8112abf8:	1885883a 	add	r2,r3,r2
8112abfc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112ac00:	e0fffe03 	ldbu	r3,-8(fp)
8112ac04:	d0a08744 	addi	r2,gp,-32227
8112ac08:	1885883a 	add	r2,r3,r2
8112ac0c:	10800003 	ldbu	r2,0(r2)
8112ac10:	10803fcc 	andi	r2,r2,255
8112ac14:	1000071e 	bne	r2,zero,8112ac34 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8112ac18:	d0a08b17 	ldw	r2,-32212(gp)
8112ac1c:	10800d83 	ldbu	r2,54(r2)
8112ac20:	0084303a 	nor	r2,zero,r2
8112ac24:	1007883a 	mov	r3,r2
8112ac28:	d0a08703 	ldbu	r2,-32228(gp)
8112ac2c:	1884703a 	and	r2,r3,r2
8112ac30:	d0a08705 	stb	r2,-32228(gp)
    }
}
8112ac34:	0001883a 	nop
8112ac38:	e037883a 	mov	sp,fp
8112ac3c:	df000017 	ldw	fp,0(sp)
8112ac40:	dec00104 	addi	sp,sp,4
8112ac44:	f800283a 	ret

8112ac48 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
8112ac48:	defffc04 	addi	sp,sp,-16
8112ac4c:	de00012e 	bgeu	sp,et,8112ac54 <OS_EventTaskRemove+0xc>
8112ac50:	003b68fa 	trap	3
8112ac54:	df000315 	stw	fp,12(sp)
8112ac58:	df000304 	addi	fp,sp,12
8112ac5c:	e13ffe15 	stw	r4,-8(fp)
8112ac60:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
8112ac64:	e0bffe17 	ldw	r2,-8(fp)
8112ac68:	10800d03 	ldbu	r2,52(r2)
8112ac6c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
8112ac70:	e0bffd03 	ldbu	r2,-12(fp)
8112ac74:	e0fffd03 	ldbu	r3,-12(fp)
8112ac78:	e13fff17 	ldw	r4,-4(fp)
8112ac7c:	20c7883a 	add	r3,r4,r3
8112ac80:	18c002c4 	addi	r3,r3,11
8112ac84:	18c00003 	ldbu	r3,0(r3)
8112ac88:	1809883a 	mov	r4,r3
8112ac8c:	e0fffe17 	ldw	r3,-8(fp)
8112ac90:	18c00d43 	ldbu	r3,53(r3)
8112ac94:	00c6303a 	nor	r3,zero,r3
8112ac98:	20c6703a 	and	r3,r4,r3
8112ac9c:	1809883a 	mov	r4,r3
8112aca0:	e0ffff17 	ldw	r3,-4(fp)
8112aca4:	1885883a 	add	r2,r3,r2
8112aca8:	108002c4 	addi	r2,r2,11
8112acac:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
8112acb0:	e0bffd03 	ldbu	r2,-12(fp)
8112acb4:	e0ffff17 	ldw	r3,-4(fp)
8112acb8:	1885883a 	add	r2,r3,r2
8112acbc:	108002c4 	addi	r2,r2,11
8112acc0:	10800003 	ldbu	r2,0(r2)
8112acc4:	10803fcc 	andi	r2,r2,255
8112acc8:	10000a1e 	bne	r2,zero,8112acf4 <OS_EventTaskRemove+0xac>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
8112accc:	e0bfff17 	ldw	r2,-4(fp)
8112acd0:	10800283 	ldbu	r2,10(r2)
8112acd4:	1007883a 	mov	r3,r2
8112acd8:	e0bffe17 	ldw	r2,-8(fp)
8112acdc:	10800d83 	ldbu	r2,54(r2)
8112ace0:	0084303a 	nor	r2,zero,r2
8112ace4:	1884703a 	and	r2,r3,r2
8112ace8:	1007883a 	mov	r3,r2
8112acec:	e0bfff17 	ldw	r2,-4(fp)
8112acf0:	10c00285 	stb	r3,10(r2)
    }
}
8112acf4:	0001883a 	nop
8112acf8:	e037883a 	mov	sp,fp
8112acfc:	df000017 	ldw	fp,0(sp)
8112ad00:	dec00104 	addi	sp,sp,4
8112ad04:	f800283a 	ret

8112ad08 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
8112ad08:	defffa04 	addi	sp,sp,-24
8112ad0c:	de00012e 	bgeu	sp,et,8112ad14 <OS_EventTaskRemoveMulti+0xc>
8112ad10:	003b68fa 	trap	3
8112ad14:	df000515 	stw	fp,20(sp)
8112ad18:	df000504 	addi	fp,sp,20
8112ad1c:	e13ffe15 	stw	r4,-8(fp)
8112ad20:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
8112ad24:	e0bffe17 	ldw	r2,-8(fp)
8112ad28:	10800d03 	ldbu	r2,52(r2)
8112ad2c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
8112ad30:	e0bffe17 	ldw	r2,-8(fp)
8112ad34:	10800d83 	ldbu	r2,54(r2)
8112ad38:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
8112ad3c:	e0bffe17 	ldw	r2,-8(fp)
8112ad40:	10800d43 	ldbu	r2,53(r2)
8112ad44:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
8112ad48:	e0bfff17 	ldw	r2,-4(fp)
8112ad4c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
8112ad50:	e0bffb17 	ldw	r2,-20(fp)
8112ad54:	10800017 	ldw	r2,0(r2)
8112ad58:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
8112ad5c:	00002506 	br	8112adf4 <OS_EventTaskRemoveMulti+0xec>
        pevent->OSEventTbl[y]  &= ~bitx;
8112ad60:	e0bffd03 	ldbu	r2,-12(fp)
8112ad64:	e0fffd03 	ldbu	r3,-12(fp)
8112ad68:	e13ffc17 	ldw	r4,-16(fp)
8112ad6c:	20c7883a 	add	r3,r4,r3
8112ad70:	18c002c4 	addi	r3,r3,11
8112ad74:	18c00003 	ldbu	r3,0(r3)
8112ad78:	1809883a 	mov	r4,r3
8112ad7c:	e0fffd83 	ldbu	r3,-10(fp)
8112ad80:	00c6303a 	nor	r3,zero,r3
8112ad84:	20c6703a 	and	r3,r4,r3
8112ad88:	1809883a 	mov	r4,r3
8112ad8c:	e0fffc17 	ldw	r3,-16(fp)
8112ad90:	1885883a 	add	r2,r3,r2
8112ad94:	108002c4 	addi	r2,r2,11
8112ad98:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
8112ad9c:	e0bffd03 	ldbu	r2,-12(fp)
8112ada0:	e0fffc17 	ldw	r3,-16(fp)
8112ada4:	1885883a 	add	r2,r3,r2
8112ada8:	108002c4 	addi	r2,r2,11
8112adac:	10800003 	ldbu	r2,0(r2)
8112adb0:	10803fcc 	andi	r2,r2,255
8112adb4:	1000091e 	bne	r2,zero,8112addc <OS_EventTaskRemoveMulti+0xd4>
            pevent->OSEventGrp &= ~bity;
8112adb8:	e0bffc17 	ldw	r2,-16(fp)
8112adbc:	10800283 	ldbu	r2,10(r2)
8112adc0:	1007883a 	mov	r3,r2
8112adc4:	e0bffd43 	ldbu	r2,-11(fp)
8112adc8:	0084303a 	nor	r2,zero,r2
8112adcc:	1884703a 	and	r2,r3,r2
8112add0:	1007883a 	mov	r3,r2
8112add4:	e0bffc17 	ldw	r2,-16(fp)
8112add8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
8112addc:	e0bffb17 	ldw	r2,-20(fp)
8112ade0:	10800104 	addi	r2,r2,4
8112ade4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
8112ade8:	e0bffb17 	ldw	r2,-20(fp)
8112adec:	10800017 	ldw	r2,0(r2)
8112adf0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
8112adf4:	e0bffc17 	ldw	r2,-16(fp)
8112adf8:	103fd91e 	bne	r2,zero,8112ad60 <__reset+0xfb10ad60>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
8112adfc:	0001883a 	nop
8112ae00:	e037883a 	mov	sp,fp
8112ae04:	df000017 	ldw	fp,0(sp)
8112ae08:	dec00104 	addi	sp,sp,4
8112ae0c:	f800283a 	ret

8112ae10 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
8112ae10:	defffc04 	addi	sp,sp,-16
8112ae14:	de00012e 	bgeu	sp,et,8112ae1c <OS_EventWaitListInit+0xc>
8112ae18:	003b68fa 	trap	3
8112ae1c:	df000315 	stw	fp,12(sp)
8112ae20:	df000304 	addi	fp,sp,12
8112ae24:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
8112ae28:	e0bfff17 	ldw	r2,-4(fp)
8112ae2c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
8112ae30:	e0bfff17 	ldw	r2,-4(fp)
8112ae34:	108002c4 	addi	r2,r2,11
8112ae38:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112ae3c:	e03ffe05 	stb	zero,-8(fp)
8112ae40:	00000706 	br	8112ae60 <OS_EventWaitListInit+0x50>
        *ptbl++ = 0;
8112ae44:	e0bffd17 	ldw	r2,-12(fp)
8112ae48:	10c00044 	addi	r3,r2,1
8112ae4c:	e0fffd15 	stw	r3,-12(fp)
8112ae50:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112ae54:	e0bffe03 	ldbu	r2,-8(fp)
8112ae58:	10800044 	addi	r2,r2,1
8112ae5c:	e0bffe05 	stb	r2,-8(fp)
8112ae60:	e0bffe03 	ldbu	r2,-8(fp)
8112ae64:	108001b0 	cmpltui	r2,r2,6
8112ae68:	103ff61e 	bne	r2,zero,8112ae44 <__reset+0xfb10ae44>
        *ptbl++ = 0;
    }
}
8112ae6c:	0001883a 	nop
8112ae70:	e037883a 	mov	sp,fp
8112ae74:	df000017 	ldw	fp,0(sp)
8112ae78:	dec00104 	addi	sp,sp,4
8112ae7c:	f800283a 	ret

8112ae80 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
8112ae80:	defffb04 	addi	sp,sp,-20
8112ae84:	de00012e 	bgeu	sp,et,8112ae8c <OS_InitEventList+0xc>
8112ae88:	003b68fa 	trap	3
8112ae8c:	dfc00415 	stw	ra,16(sp)
8112ae90:	df000315 	stw	fp,12(sp)
8112ae94:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
8112ae98:	01430c04 	movi	r5,3120
8112ae9c:	01204574 	movhi	r4,33045
8112aea0:	213b2504 	addi	r4,r4,-4972
8112aea4:	112b2280 	call	8112b228 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
8112aea8:	00a04574 	movhi	r2,33045
8112aeac:	10bb2504 	addi	r2,r2,-4972
8112aeb0:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
8112aeb4:	00a04574 	movhi	r2,33045
8112aeb8:	10bb3204 	addi	r2,r2,-4920
8112aebc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8112aec0:	e03ffd0d 	sth	zero,-12(fp)
8112aec4:	00001306 	br	8112af14 <OS_InitEventList+0x94>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112aec8:	e0bffe17 	ldw	r2,-8(fp)
8112aecc:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
8112aed0:	e0bffe17 	ldw	r2,-8(fp)
8112aed4:	e0ffff17 	ldw	r3,-4(fp)
8112aed8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
8112aedc:	e0bffe17 	ldw	r2,-8(fp)
8112aee0:	00c00fc4 	movi	r3,63
8112aee4:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
8112aee8:	e0bffe17 	ldw	r2,-8(fp)
8112aeec:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
8112aef0:	e0bffe17 	ldw	r2,-8(fp)
8112aef4:	10800d04 	addi	r2,r2,52
8112aef8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
8112aefc:	e0bfff17 	ldw	r2,-4(fp)
8112af00:	10800d04 	addi	r2,r2,52
8112af04:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8112af08:	e0bffd0b 	ldhu	r2,-12(fp)
8112af0c:	10800044 	addi	r2,r2,1
8112af10:	e0bffd0d 	sth	r2,-12(fp)
8112af14:	e0bffd0b 	ldhu	r2,-12(fp)
8112af18:	10800ef0 	cmpltui	r2,r2,59
8112af1c:	103fea1e 	bne	r2,zero,8112aec8 <__reset+0xfb10aec8>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
8112af20:	e0bffe17 	ldw	r2,-8(fp)
8112af24:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
8112af28:	e0bffe17 	ldw	r2,-8(fp)
8112af2c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
8112af30:	e0bffe17 	ldw	r2,-8(fp)
8112af34:	00c00fc4 	movi	r3,63
8112af38:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
8112af3c:	e0bffe17 	ldw	r2,-8(fp)
8112af40:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
8112af44:	00a04574 	movhi	r2,33045
8112af48:	10bb2504 	addi	r2,r2,-4972
8112af4c:	d0a08915 	stw	r2,-32220(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
8112af50:	0001883a 	nop
8112af54:	e037883a 	mov	sp,fp
8112af58:	dfc00117 	ldw	ra,4(sp)
8112af5c:	df000017 	ldw	fp,0(sp)
8112af60:	dec00204 	addi	sp,sp,8
8112af64:	f800283a 	ret

8112af68 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
8112af68:	deffff04 	addi	sp,sp,-4
8112af6c:	de00012e 	bgeu	sp,et,8112af74 <OS_InitMisc+0xc>
8112af70:	003b68fa 	trap	3
8112af74:	df000015 	stw	fp,0(sp)
8112af78:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
8112af7c:	d0208d15 	stw	zero,-32204(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
8112af80:	d0208a05 	stb	zero,-32216(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
8112af84:	d0207805 	stb	zero,-32288(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
8112af88:	d0208345 	stb	zero,-32243(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
8112af8c:	d0207a05 	stb	zero,-32280(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
8112af90:	d0207f15 	stw	zero,-32260(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
8112af94:	d0207b15 	stw	zero,-32276(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
8112af98:	d0209115 	stw	zero,-32188(gp)
    OSIdleCtrMax  = 0L;
8112af9c:	d0208115 	stw	zero,-32252(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
8112afa0:	d0209005 	stb	zero,-32192(gp)
#endif
}
8112afa4:	0001883a 	nop
8112afa8:	e037883a 	mov	sp,fp
8112afac:	df000017 	ldw	fp,0(sp)
8112afb0:	dec00104 	addi	sp,sp,4
8112afb4:	f800283a 	ret

8112afb8 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
8112afb8:	defffd04 	addi	sp,sp,-12
8112afbc:	de00012e 	bgeu	sp,et,8112afc4 <OS_InitRdyList+0xc>
8112afc0:	003b68fa 	trap	3
8112afc4:	df000215 	stw	fp,8(sp)
8112afc8:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
8112afcc:	d0208705 	stb	zero,-32228(gp)
    prdytbl       = &OSRdyTbl[0];
8112afd0:	d0a08744 	addi	r2,gp,-32227
8112afd4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
8112afd8:	e03ffe05 	stb	zero,-8(fp)
8112afdc:	00000706 	br	8112affc <OS_InitRdyList+0x44>
        *prdytbl++ = 0;
8112afe0:	e0bfff17 	ldw	r2,-4(fp)
8112afe4:	10c00044 	addi	r3,r2,1
8112afe8:	e0ffff15 	stw	r3,-4(fp)
8112afec:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
8112aff0:	e0bffe03 	ldbu	r2,-8(fp)
8112aff4:	10800044 	addi	r2,r2,1
8112aff8:	e0bffe05 	stb	r2,-8(fp)
8112affc:	e0bffe03 	ldbu	r2,-8(fp)
8112b000:	108001b0 	cmpltui	r2,r2,6
8112b004:	103ff61e 	bne	r2,zero,8112afe0 <__reset+0xfb10afe0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
8112b008:	d0207cc5 	stb	zero,-32269(gp)
    OSPrioHighRdy = 0;
8112b00c:	d0207c85 	stb	zero,-32270(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
8112b010:	d0208515 	stw	zero,-32236(gp)
    OSTCBCur      = (OS_TCB *)0;
8112b014:	d0208b15 	stw	zero,-32212(gp)
}
8112b018:	0001883a 	nop
8112b01c:	e037883a 	mov	sp,fp
8112b020:	df000017 	ldw	fp,0(sp)
8112b024:	dec00104 	addi	sp,sp,4
8112b028:	f800283a 	ret

8112b02c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
8112b02c:	defff804 	addi	sp,sp,-32
8112b030:	de00012e 	bgeu	sp,et,8112b038 <OS_InitTaskIdle+0xc>
8112b034:	003b68fa 	trap	3
8112b038:	dfc00715 	stw	ra,28(sp)
8112b03c:	df000615 	stw	fp,24(sp)
8112b040:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
8112b044:	008000c4 	movi	r2,3
8112b048:	d8800415 	stw	r2,16(sp)
8112b04c:	d8000315 	stw	zero,12(sp)
8112b050:	00808004 	movi	r2,512
8112b054:	d8800215 	stw	r2,8(sp)
8112b058:	00a04574 	movhi	r2,33045
8112b05c:	10b92504 	addi	r2,r2,-7020
8112b060:	d8800115 	stw	r2,4(sp)
8112b064:	00bfffd4 	movui	r2,65535
8112b068:	d8800015 	stw	r2,0(sp)
8112b06c:	01c00a04 	movi	r7,40
8112b070:	01a04574 	movhi	r6,33045
8112b074:	31bb2404 	addi	r6,r6,-4976
8112b078:	000b883a 	mov	r5,zero
8112b07c:	012044f4 	movhi	r4,33043
8112b080:	212d4804 	addi	r4,r4,-19168
8112b084:	1130f100 	call	81130f10 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
8112b088:	e1bfff04 	addi	r6,fp,-4
8112b08c:	01604534 	movhi	r5,33044
8112b090:	29427104 	addi	r5,r5,2500
8112b094:	01000a04 	movi	r4,40
8112b098:	11317400 	call	81131740 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
8112b09c:	0001883a 	nop
8112b0a0:	e037883a 	mov	sp,fp
8112b0a4:	dfc00117 	ldw	ra,4(sp)
8112b0a8:	df000017 	ldw	fp,0(sp)
8112b0ac:	dec00204 	addi	sp,sp,8
8112b0b0:	f800283a 	ret

8112b0b4 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
8112b0b4:	defff804 	addi	sp,sp,-32
8112b0b8:	de00012e 	bgeu	sp,et,8112b0c0 <OS_InitTaskStat+0xc>
8112b0bc:	003b68fa 	trap	3
8112b0c0:	dfc00715 	stw	ra,28(sp)
8112b0c4:	df000615 	stw	fp,24(sp)
8112b0c8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
8112b0cc:	008000c4 	movi	r2,3
8112b0d0:	d8800415 	stw	r2,16(sp)
8112b0d4:	d8000315 	stw	zero,12(sp)
8112b0d8:	00808004 	movi	r2,512
8112b0dc:	d8800215 	stw	r2,8(sp)
8112b0e0:	00a04574 	movhi	r2,33045
8112b0e4:	10b4ad04 	addi	r2,r2,-11596
8112b0e8:	d8800115 	stw	r2,4(sp)
8112b0ec:	00bfff94 	movui	r2,65534
8112b0f0:	d8800015 	stw	r2,0(sp)
8112b0f4:	01c009c4 	movi	r7,39
8112b0f8:	01a04574 	movhi	r6,33045
8112b0fc:	31b6ac04 	addi	r6,r6,-9552
8112b100:	000b883a 	mov	r5,zero
8112b104:	012044f4 	movhi	r4,33043
8112b108:	212d6104 	addi	r4,r4,-19068
8112b10c:	1130f100 	call	81130f10 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
8112b110:	e1bfff04 	addi	r6,fp,-4
8112b114:	01604534 	movhi	r5,33044
8112b118:	29427504 	addi	r5,r5,2516
8112b11c:	010009c4 	movi	r4,39
8112b120:	11317400 	call	81131740 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
8112b124:	0001883a 	nop
8112b128:	e037883a 	mov	sp,fp
8112b12c:	dfc00117 	ldw	ra,4(sp)
8112b130:	df000017 	ldw	fp,0(sp)
8112b134:	dec00204 	addi	sp,sp,8
8112b138:	f800283a 	ret

8112b13c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
8112b13c:	defffb04 	addi	sp,sp,-20
8112b140:	de00012e 	bgeu	sp,et,8112b148 <OS_InitTCBList+0xc>
8112b144:	003b68fa 	trap	3
8112b148:	dfc00415 	stw	ra,16(sp)
8112b14c:	df000315 	stw	fp,12(sp)
8112b150:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
8112b154:	01439604 	movi	r5,3672
8112b158:	01204574 	movhi	r4,33045
8112b15c:	213e3104 	addi	r4,r4,-1852
8112b160:	112b2280 	call	8112b228 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
8112b164:	01402904 	movi	r5,164
8112b168:	01204574 	movhi	r4,33045
8112b16c:	2101c704 	addi	r4,r4,1820
8112b170:	112b2280 	call	8112b228 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
8112b174:	00a04574 	movhi	r2,33045
8112b178:	10be3104 	addi	r2,r2,-1852
8112b17c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
8112b180:	00a04574 	movhi	r2,33045
8112b184:	10be4c04 	addi	r2,r2,-1744
8112b188:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
8112b18c:	e03ffd05 	stb	zero,-12(fp)
8112b190:	00001106 	br	8112b1d8 <OS_InitTCBList+0x9c>
        ptcb1->OSTCBNext = ptcb2;
8112b194:	e0bffe17 	ldw	r2,-8(fp)
8112b198:	e0ffff17 	ldw	r3,-4(fp)
8112b19c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
8112b1a0:	e0bffe17 	ldw	r2,-8(fp)
8112b1a4:	00c00fc4 	movi	r3,63
8112b1a8:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
8112b1ac:	e0bffe17 	ldw	r2,-8(fp)
8112b1b0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
8112b1b4:	e0bffe17 	ldw	r2,-8(fp)
8112b1b8:	10801b04 	addi	r2,r2,108
8112b1bc:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
8112b1c0:	e0bfff17 	ldw	r2,-4(fp)
8112b1c4:	10801b04 	addi	r2,r2,108
8112b1c8:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
8112b1cc:	e0bffd03 	ldbu	r2,-12(fp)
8112b1d0:	10800044 	addi	r2,r2,1
8112b1d4:	e0bffd05 	stb	r2,-12(fp)
8112b1d8:	e0bffd03 	ldbu	r2,-12(fp)
8112b1dc:	10800870 	cmpltui	r2,r2,33
8112b1e0:	103fec1e 	bne	r2,zero,8112b194 <__reset+0xfb10b194>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
8112b1e4:	e0bffe17 	ldw	r2,-8(fp)
8112b1e8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
8112b1ec:	e0bffe17 	ldw	r2,-8(fp)
8112b1f0:	00c00fc4 	movi	r3,63
8112b1f4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
8112b1f8:	e0bffe17 	ldw	r2,-8(fp)
8112b1fc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
8112b200:	d0207d15 	stw	zero,-32268(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
8112b204:	00a04574 	movhi	r2,33045
8112b208:	10be3104 	addi	r2,r2,-1852
8112b20c:	d0a08215 	stw	r2,-32248(gp)
}
8112b210:	0001883a 	nop
8112b214:	e037883a 	mov	sp,fp
8112b218:	dfc00117 	ldw	ra,4(sp)
8112b21c:	df000017 	ldw	fp,0(sp)
8112b220:	dec00204 	addi	sp,sp,8
8112b224:	f800283a 	ret

8112b228 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
8112b228:	defffd04 	addi	sp,sp,-12
8112b22c:	de00012e 	bgeu	sp,et,8112b234 <OS_MemClr+0xc>
8112b230:	003b68fa 	trap	3
8112b234:	df000215 	stw	fp,8(sp)
8112b238:	df000204 	addi	fp,sp,8
8112b23c:	e13ffe15 	stw	r4,-8(fp)
8112b240:	2805883a 	mov	r2,r5
8112b244:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
8112b248:	00000706 	br	8112b268 <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
8112b24c:	e0bffe17 	ldw	r2,-8(fp)
8112b250:	10c00044 	addi	r3,r2,1
8112b254:	e0fffe15 	stw	r3,-8(fp)
8112b258:	10000005 	stb	zero,0(r2)
        size--;
8112b25c:	e0bfff0b 	ldhu	r2,-4(fp)
8112b260:	10bfffc4 	addi	r2,r2,-1
8112b264:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
8112b268:	e0bfff0b 	ldhu	r2,-4(fp)
8112b26c:	103ff71e 	bne	r2,zero,8112b24c <__reset+0xfb10b24c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
8112b270:	0001883a 	nop
8112b274:	e037883a 	mov	sp,fp
8112b278:	df000017 	ldw	fp,0(sp)
8112b27c:	dec00104 	addi	sp,sp,4
8112b280:	f800283a 	ret

8112b284 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
8112b284:	defffc04 	addi	sp,sp,-16
8112b288:	de00012e 	bgeu	sp,et,8112b290 <OS_MemCopy+0xc>
8112b28c:	003b68fa 	trap	3
8112b290:	df000315 	stw	fp,12(sp)
8112b294:	df000304 	addi	fp,sp,12
8112b298:	e13ffd15 	stw	r4,-12(fp)
8112b29c:	e17ffe15 	stw	r5,-8(fp)
8112b2a0:	3005883a 	mov	r2,r6
8112b2a4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
8112b2a8:	00000b06 	br	8112b2d8 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
8112b2ac:	e0bffd17 	ldw	r2,-12(fp)
8112b2b0:	10c00044 	addi	r3,r2,1
8112b2b4:	e0fffd15 	stw	r3,-12(fp)
8112b2b8:	e0fffe17 	ldw	r3,-8(fp)
8112b2bc:	19000044 	addi	r4,r3,1
8112b2c0:	e13ffe15 	stw	r4,-8(fp)
8112b2c4:	18c00003 	ldbu	r3,0(r3)
8112b2c8:	10c00005 	stb	r3,0(r2)
        size--;
8112b2cc:	e0bfff0b 	ldhu	r2,-4(fp)
8112b2d0:	10bfffc4 	addi	r2,r2,-1
8112b2d4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
8112b2d8:	e0bfff0b 	ldhu	r2,-4(fp)
8112b2dc:	103ff31e 	bne	r2,zero,8112b2ac <__reset+0xfb10b2ac>
        *pdest++ = *psrc++;
        size--;
    }
}
8112b2e0:	0001883a 	nop
8112b2e4:	e037883a 	mov	sp,fp
8112b2e8:	df000017 	ldw	fp,0(sp)
8112b2ec:	dec00104 	addi	sp,sp,4
8112b2f0:	f800283a 	ret

8112b2f4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
8112b2f4:	defffb04 	addi	sp,sp,-20
8112b2f8:	de00012e 	bgeu	sp,et,8112b300 <OS_Sched+0xc>
8112b2fc:	003b68fa 	trap	3
8112b300:	dfc00415 	stw	ra,16(sp)
8112b304:	df000315 	stw	fp,12(sp)
8112b308:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112b30c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b310:	0005303a 	rdctl	r2,status
8112b314:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b318:	e0ffff17 	ldw	r3,-4(fp)
8112b31c:	00bfff84 	movi	r2,-2
8112b320:	1884703a 	and	r2,r3,r2
8112b324:	1001703a 	wrctl	status,r2
  
  return context;
8112b328:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
8112b32c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
8112b330:	d0a08a03 	ldbu	r2,-32216(gp)
8112b334:	10803fcc 	andi	r2,r2,255
8112b338:	10001a1e 	bne	r2,zero,8112b3a4 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
8112b33c:	d0a07803 	ldbu	r2,-32288(gp)
8112b340:	10803fcc 	andi	r2,r2,255
8112b344:	1000171e 	bne	r2,zero,8112b3a4 <OS_Sched+0xb0>
            OS_SchedNew();
8112b348:	112b3cc0 	call	8112b3cc <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
8112b34c:	d0e07c83 	ldbu	r3,-32270(gp)
8112b350:	d0a07cc3 	ldbu	r2,-32269(gp)
8112b354:	18c03fcc 	andi	r3,r3,255
8112b358:	10803fcc 	andi	r2,r2,255
8112b35c:	18801126 	beq	r3,r2,8112b3a4 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
8112b360:	d0a07c83 	ldbu	r2,-32270(gp)
8112b364:	10c03fcc 	andi	r3,r2,255
8112b368:	00a04574 	movhi	r2,33045
8112b36c:	1081c704 	addi	r2,r2,1820
8112b370:	18c7883a 	add	r3,r3,r3
8112b374:	18c7883a 	add	r3,r3,r3
8112b378:	10c5883a 	add	r2,r2,r3
8112b37c:	10800017 	ldw	r2,0(r2)
8112b380:	d0a08515 	stw	r2,-32236(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
8112b384:	d0a08517 	ldw	r2,-32236(gp)
8112b388:	10c00e17 	ldw	r3,56(r2)
8112b38c:	18c00044 	addi	r3,r3,1
8112b390:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
8112b394:	d0a07f17 	ldw	r2,-32260(gp)
8112b398:	10800044 	addi	r2,r2,1
8112b39c:	d0a07f15 	stw	r2,-32260(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
8112b3a0:	113c3f40 	call	8113c3f4 <OSCtxSw>
8112b3a4:	e0bffd17 	ldw	r2,-12(fp)
8112b3a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b3ac:	e0bffe17 	ldw	r2,-8(fp)
8112b3b0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
8112b3b4:	0001883a 	nop
8112b3b8:	e037883a 	mov	sp,fp
8112b3bc:	dfc00117 	ldw	ra,4(sp)
8112b3c0:	df000017 	ldw	fp,0(sp)
8112b3c4:	dec00204 	addi	sp,sp,8
8112b3c8:	f800283a 	ret

8112b3cc <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
8112b3cc:	defffe04 	addi	sp,sp,-8
8112b3d0:	de00012e 	bgeu	sp,et,8112b3d8 <OS_SchedNew+0xc>
8112b3d4:	003b68fa 	trap	3
8112b3d8:	df000115 	stw	fp,4(sp)
8112b3dc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
8112b3e0:	d0a08703 	ldbu	r2,-32228(gp)
8112b3e4:	10c03fcc 	andi	r3,r2,255
8112b3e8:	00a04534 	movhi	r2,33044
8112b3ec:	10823104 	addi	r2,r2,2244
8112b3f0:	10c5883a 	add	r2,r2,r3
8112b3f4:	10800003 	ldbu	r2,0(r2)
8112b3f8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
8112b3fc:	e0bfff03 	ldbu	r2,-4(fp)
8112b400:	100490fa 	slli	r2,r2,3
8112b404:	1009883a 	mov	r4,r2
8112b408:	e0ffff03 	ldbu	r3,-4(fp)
8112b40c:	d0a08744 	addi	r2,gp,-32227
8112b410:	1885883a 	add	r2,r3,r2
8112b414:	10800003 	ldbu	r2,0(r2)
8112b418:	10c03fcc 	andi	r3,r2,255
8112b41c:	00a04534 	movhi	r2,33044
8112b420:	10823104 	addi	r2,r2,2244
8112b424:	10c5883a 	add	r2,r2,r3
8112b428:	10800003 	ldbu	r2,0(r2)
8112b42c:	2085883a 	add	r2,r4,r2
8112b430:	d0a07c85 	stb	r2,-32270(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
8112b434:	0001883a 	nop
8112b438:	e037883a 	mov	sp,fp
8112b43c:	df000017 	ldw	fp,0(sp)
8112b440:	dec00104 	addi	sp,sp,4
8112b444:	f800283a 	ret

8112b448 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
8112b448:	defffc04 	addi	sp,sp,-16
8112b44c:	de00012e 	bgeu	sp,et,8112b454 <OS_StrCopy+0xc>
8112b450:	003b68fa 	trap	3
8112b454:	df000315 	stw	fp,12(sp)
8112b458:	df000304 	addi	fp,sp,12
8112b45c:	e13ffe15 	stw	r4,-8(fp)
8112b460:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
8112b464:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
8112b468:	00000b06 	br	8112b498 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
8112b46c:	e0bffe17 	ldw	r2,-8(fp)
8112b470:	10c00044 	addi	r3,r2,1
8112b474:	e0fffe15 	stw	r3,-8(fp)
8112b478:	e0ffff17 	ldw	r3,-4(fp)
8112b47c:	19000044 	addi	r4,r3,1
8112b480:	e13fff15 	stw	r4,-4(fp)
8112b484:	18c00003 	ldbu	r3,0(r3)
8112b488:	10c00005 	stb	r3,0(r2)
        len++;
8112b48c:	e0bffd03 	ldbu	r2,-12(fp)
8112b490:	10800044 	addi	r2,r2,1
8112b494:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112b498:	e0bfff17 	ldw	r2,-4(fp)
8112b49c:	10800003 	ldbu	r2,0(r2)
8112b4a0:	10803fcc 	andi	r2,r2,255
8112b4a4:	103ff11e 	bne	r2,zero,8112b46c <__reset+0xfb10b46c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
8112b4a8:	e0bffe17 	ldw	r2,-8(fp)
8112b4ac:	10000005 	stb	zero,0(r2)
    return (len);
8112b4b0:	e0bffd03 	ldbu	r2,-12(fp)
}
8112b4b4:	e037883a 	mov	sp,fp
8112b4b8:	df000017 	ldw	fp,0(sp)
8112b4bc:	dec00104 	addi	sp,sp,4
8112b4c0:	f800283a 	ret

8112b4c4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
8112b4c4:	defffd04 	addi	sp,sp,-12
8112b4c8:	de00012e 	bgeu	sp,et,8112b4d0 <OS_StrLen+0xc>
8112b4cc:	003b68fa 	trap	3
8112b4d0:	df000215 	stw	fp,8(sp)
8112b4d4:	df000204 	addi	fp,sp,8
8112b4d8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
8112b4dc:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
8112b4e0:	00000606 	br	8112b4fc <OS_StrLen+0x38>
        psrc++;
8112b4e4:	e0bfff17 	ldw	r2,-4(fp)
8112b4e8:	10800044 	addi	r2,r2,1
8112b4ec:	e0bfff15 	stw	r2,-4(fp)
        len++;
8112b4f0:	e0bffe03 	ldbu	r2,-8(fp)
8112b4f4:	10800044 	addi	r2,r2,1
8112b4f8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112b4fc:	e0bfff17 	ldw	r2,-4(fp)
8112b500:	10800003 	ldbu	r2,0(r2)
8112b504:	10803fcc 	andi	r2,r2,255
8112b508:	103ff61e 	bne	r2,zero,8112b4e4 <__reset+0xfb10b4e4>
        psrc++;
        len++;
    }
    return (len);
8112b50c:	e0bffe03 	ldbu	r2,-8(fp)
}
8112b510:	e037883a 	mov	sp,fp
8112b514:	df000017 	ldw	fp,0(sp)
8112b518:	dec00104 	addi	sp,sp,4
8112b51c:	f800283a 	ret

8112b520 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
8112b520:	defffa04 	addi	sp,sp,-24
8112b524:	de00012e 	bgeu	sp,et,8112b52c <OS_TaskIdle+0xc>
8112b528:	003b68fa 	trap	3
8112b52c:	dfc00515 	stw	ra,20(sp)
8112b530:	df000415 	stw	fp,16(sp)
8112b534:	df000404 	addi	fp,sp,16
8112b538:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b53c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b540:	0005303a 	rdctl	r2,status
8112b544:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b548:	e0fffd17 	ldw	r3,-12(fp)
8112b54c:	00bfff84 	movi	r2,-2
8112b550:	1884703a 	and	r2,r3,r2
8112b554:	1001703a 	wrctl	status,r2
  
  return context;
8112b558:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
8112b55c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
8112b560:	d0a07b17 	ldw	r2,-32276(gp)
8112b564:	10800044 	addi	r2,r2,1
8112b568:	d0a07b15 	stw	r2,-32276(gp)
8112b56c:	e0bffc17 	ldw	r2,-16(fp)
8112b570:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b574:	e0bffe17 	ldw	r2,-8(fp)
8112b578:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
8112b57c:	113c7880 	call	8113c788 <OSTaskIdleHook>
    }
8112b580:	003fef06 	br	8112b540 <__reset+0xfb10b540>

8112b584 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
8112b584:	defff804 	addi	sp,sp,-32
8112b588:	de00012e 	bgeu	sp,et,8112b590 <OS_TaskStat+0xc>
8112b58c:	003b68fa 	trap	3
8112b590:	dfc00715 	stw	ra,28(sp)
8112b594:	df000615 	stw	fp,24(sp)
8112b598:	dc400515 	stw	r17,20(sp)
8112b59c:	dc000415 	stw	r16,16(sp)
8112b5a0:	df000604 	addi	fp,sp,24
8112b5a4:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b5a8:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112b5ac:	00000206 	br	8112b5b8 <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
8112b5b0:	01003204 	movi	r4,200
8112b5b4:	11320300 	call	81132030 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112b5b8:	d0a09003 	ldbu	r2,-32192(gp)
8112b5bc:	10803fcc 	andi	r2,r2,255
8112b5c0:	103ffb26 	beq	r2,zero,8112b5b0 <__reset+0xfb10b5b0>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
8112b5c4:	d0e08117 	ldw	r3,-32252(gp)
8112b5c8:	00947b34 	movhi	r2,20972
8112b5cc:	10a147c4 	addi	r2,r2,-31457
8112b5d0:	1888383a 	mulxuu	r4,r3,r2
8112b5d4:	1885383a 	mul	r2,r3,r2
8112b5d8:	1021883a 	mov	r16,r2
8112b5dc:	2023883a 	mov	r17,r4
8112b5e0:	8804d17a 	srli	r2,r17,5
8112b5e4:	d0a08115 	stw	r2,-32252(gp)
    if (OSIdleCtrMax == 0L) {
8112b5e8:	d0a08117 	ldw	r2,-32252(gp)
8112b5ec:	1000031e 	bne	r2,zero,8112b5fc <OS_TaskStat+0x78>
        OSCPUUsage = 0;
8112b5f0:	d0208305 	stb	zero,-32244(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
8112b5f4:	01003fc4 	movi	r4,255
8112b5f8:	1131ca00 	call	81131ca0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b5fc:	0005303a 	rdctl	r2,status
8112b600:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b604:	e0fffb17 	ldw	r3,-20(fp)
8112b608:	00bfff84 	movi	r2,-2
8112b60c:	1884703a 	and	r2,r3,r2
8112b610:	1001703a 	wrctl	status,r2
  
  return context;
8112b614:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
8112b618:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
8112b61c:	d0a07b17 	ldw	r2,-32276(gp)
8112b620:	d0a09115 	stw	r2,-32188(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
8112b624:	d0207b15 	stw	zero,-32276(gp)
8112b628:	e0bffa17 	ldw	r2,-24(fp)
8112b62c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b630:	e0bffc17 	ldw	r2,-16(fp)
8112b634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
8112b638:	d0e09117 	ldw	r3,-32188(gp)
8112b63c:	d0a08117 	ldw	r2,-32252(gp)
8112b640:	1885203a 	divu	r2,r3,r2
8112b644:	1007883a 	mov	r3,r2
8112b648:	00801904 	movi	r2,100
8112b64c:	10c5c83a 	sub	r2,r2,r3
8112b650:	d0a08305 	stb	r2,-32244(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
8112b654:	113c6b80 	call	8113c6b8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
8112b658:	112b6680 	call	8112b668 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
8112b65c:	01001904 	movi	r4,100
8112b660:	11320300 	call	81132030 <OSTimeDly>
    }
8112b664:	003fe506 	br	8112b5fc <__reset+0xfb10b5fc>

8112b668 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
8112b668:	defffa04 	addi	sp,sp,-24
8112b66c:	de00012e 	bgeu	sp,et,8112b674 <OS_TaskStatStkChk+0xc>
8112b670:	003b68fa 	trap	3
8112b674:	dfc00515 	stw	ra,20(sp)
8112b678:	df000415 	stw	fp,16(sp)
8112b67c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112b680:	e03ffc05 	stb	zero,-16(fp)
8112b684:	00002406 	br	8112b718 <OS_TaskStatStkChk+0xb0>
        err = OSTaskStkChk(prio, &stk_data);
8112b688:	e0bffc03 	ldbu	r2,-16(fp)
8112b68c:	e0fffe04 	addi	r3,fp,-8
8112b690:	180b883a 	mov	r5,r3
8112b694:	1009883a 	mov	r4,r2
8112b698:	1131ad80 	call	81131ad8 <OSTaskStkChk>
8112b69c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
8112b6a0:	e0bffc43 	ldbu	r2,-15(fp)
8112b6a4:	1000191e 	bne	r2,zero,8112b70c <OS_TaskStatStkChk+0xa4>
            ptcb = OSTCBPrioTbl[prio];
8112b6a8:	e0fffc03 	ldbu	r3,-16(fp)
8112b6ac:	00a04574 	movhi	r2,33045
8112b6b0:	1081c704 	addi	r2,r2,1820
8112b6b4:	18c7883a 	add	r3,r3,r3
8112b6b8:	18c7883a 	add	r3,r3,r3
8112b6bc:	10c5883a 	add	r2,r2,r3
8112b6c0:	10800017 	ldw	r2,0(r2)
8112b6c4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
8112b6c8:	e0bffd17 	ldw	r2,-12(fp)
8112b6cc:	10000f26 	beq	r2,zero,8112b70c <OS_TaskStatStkChk+0xa4>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
8112b6d0:	e0bffd17 	ldw	r2,-12(fp)
8112b6d4:	10800060 	cmpeqi	r2,r2,1
8112b6d8:	10000c1e 	bne	r2,zero,8112b70c <OS_TaskStatStkChk+0xa4>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
8112b6dc:	e0bffd17 	ldw	r2,-12(fp)
8112b6e0:	10c00217 	ldw	r3,8(r2)
8112b6e4:	e0bffd17 	ldw	r2,-12(fp)
8112b6e8:	10800317 	ldw	r2,12(r2)
8112b6ec:	1085883a 	add	r2,r2,r2
8112b6f0:	1085883a 	add	r2,r2,r2
8112b6f4:	1887883a 	add	r3,r3,r2
8112b6f8:	e0bffd17 	ldw	r2,-12(fp)
8112b6fc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
8112b700:	e0ffff17 	ldw	r3,-4(fp)
8112b704:	e0bffd17 	ldw	r2,-12(fp)
8112b708:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112b70c:	e0bffc03 	ldbu	r2,-16(fp)
8112b710:	10800044 	addi	r2,r2,1
8112b714:	e0bffc05 	stb	r2,-16(fp)
8112b718:	e0bffc03 	ldbu	r2,-16(fp)
8112b71c:	10800a70 	cmpltui	r2,r2,41
8112b720:	103fd91e 	bne	r2,zero,8112b688 <__reset+0xfb10b688>
#endif
                }
            }
        }
    }
}
8112b724:	0001883a 	nop
8112b728:	e037883a 	mov	sp,fp
8112b72c:	dfc00117 	ldw	ra,4(sp)
8112b730:	df000017 	ldw	fp,0(sp)
8112b734:	dec00204 	addi	sp,sp,8
8112b738:	f800283a 	ret

8112b73c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
8112b73c:	defff204 	addi	sp,sp,-56
8112b740:	de00012e 	bgeu	sp,et,8112b748 <OS_TCBInit+0xc>
8112b744:	003b68fa 	trap	3
8112b748:	dfc00d15 	stw	ra,52(sp)
8112b74c:	df000c15 	stw	fp,48(sp)
8112b750:	df000c04 	addi	fp,sp,48
8112b754:	e17ffc15 	stw	r5,-16(fp)
8112b758:	e1bffd15 	stw	r6,-12(fp)
8112b75c:	3807883a 	mov	r3,r7
8112b760:	e0800417 	ldw	r2,16(fp)
8112b764:	e13ffb05 	stb	r4,-20(fp)
8112b768:	e0fffe0d 	sth	r3,-8(fp)
8112b76c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112b770:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b774:	0005303a 	rdctl	r2,status
8112b778:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b77c:	e0fffa17 	ldw	r3,-24(fp)
8112b780:	00bfff84 	movi	r2,-2
8112b784:	1884703a 	and	r2,r3,r2
8112b788:	1001703a 	wrctl	status,r2
  
  return context;
8112b78c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
8112b790:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
8112b794:	d0a08217 	ldw	r2,-32248(gp)
8112b798:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
8112b79c:	e0bff617 	ldw	r2,-40(fp)
8112b7a0:	10009326 	beq	r2,zero,8112b9f0 <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
8112b7a4:	e0bff617 	ldw	r2,-40(fp)
8112b7a8:	10800517 	ldw	r2,20(r2)
8112b7ac:	d0a08215 	stw	r2,-32248(gp)
8112b7b0:	e0bff417 	ldw	r2,-48(fp)
8112b7b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b7b8:	e0bff817 	ldw	r2,-32(fp)
8112b7bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
8112b7c0:	e0bff617 	ldw	r2,-40(fp)
8112b7c4:	e0fffc17 	ldw	r3,-16(fp)
8112b7c8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
8112b7cc:	e0bff617 	ldw	r2,-40(fp)
8112b7d0:	e0fffb03 	ldbu	r3,-20(fp)
8112b7d4:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
8112b7d8:	e0bff617 	ldw	r2,-40(fp)
8112b7dc:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
8112b7e0:	e0bff617 	ldw	r2,-40(fp)
8112b7e4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
8112b7e8:	e0bff617 	ldw	r2,-40(fp)
8112b7ec:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
8112b7f0:	e0bff617 	ldw	r2,-40(fp)
8112b7f4:	e0c00317 	ldw	r3,12(fp)
8112b7f8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
8112b7fc:	e0bff617 	ldw	r2,-40(fp)
8112b800:	e0c00217 	ldw	r3,8(fp)
8112b804:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
8112b808:	e0bff617 	ldw	r2,-40(fp)
8112b80c:	e0fffd17 	ldw	r3,-12(fp)
8112b810:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
8112b814:	e0bff617 	ldw	r2,-40(fp)
8112b818:	e0ffff0b 	ldhu	r3,-4(fp)
8112b81c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
8112b820:	e0bff617 	ldw	r2,-40(fp)
8112b824:	e0fffe0b 	ldhu	r3,-8(fp)
8112b828:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
8112b82c:	e0bff617 	ldw	r2,-40(fp)
8112b830:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
8112b834:	e0bffb03 	ldbu	r2,-20(fp)
8112b838:	1004d0fa 	srli	r2,r2,3
8112b83c:	1007883a 	mov	r3,r2
8112b840:	e0bff617 	ldw	r2,-40(fp)
8112b844:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
8112b848:	e0bffb03 	ldbu	r2,-20(fp)
8112b84c:	108001cc 	andi	r2,r2,7
8112b850:	1007883a 	mov	r3,r2
8112b854:	e0bff617 	ldw	r2,-40(fp)
8112b858:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
8112b85c:	e0bff617 	ldw	r2,-40(fp)
8112b860:	10800d03 	ldbu	r2,52(r2)
8112b864:	10803fcc 	andi	r2,r2,255
8112b868:	00c00044 	movi	r3,1
8112b86c:	1884983a 	sll	r2,r3,r2
8112b870:	1007883a 	mov	r3,r2
8112b874:	e0bff617 	ldw	r2,-40(fp)
8112b878:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
8112b87c:	e0bff617 	ldw	r2,-40(fp)
8112b880:	10800cc3 	ldbu	r2,51(r2)
8112b884:	10803fcc 	andi	r2,r2,255
8112b888:	00c00044 	movi	r3,1
8112b88c:	1884983a 	sll	r2,r3,r2
8112b890:	1007883a 	mov	r3,r2
8112b894:	e0bff617 	ldw	r2,-40(fp)
8112b898:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
8112b89c:	e0bff617 	ldw	r2,-40(fp)
8112b8a0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
8112b8a4:	e0bff617 	ldw	r2,-40(fp)
8112b8a8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
8112b8ac:	e0bff617 	ldw	r2,-40(fp)
8112b8b0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
8112b8b4:	e0bff617 	ldw	r2,-40(fp)
8112b8b8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
8112b8bc:	e0bff617 	ldw	r2,-40(fp)
8112b8c0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
8112b8c4:	e0bff617 	ldw	r2,-40(fp)
8112b8c8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
8112b8cc:	e0bff617 	ldw	r2,-40(fp)
8112b8d0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
8112b8d4:	e0bff617 	ldw	r2,-40(fp)
8112b8d8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
8112b8dc:	e0bff617 	ldw	r2,-40(fp)
8112b8e0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
8112b8e4:	e0bff617 	ldw	r2,-40(fp)
8112b8e8:	00c00fc4 	movi	r3,63
8112b8ec:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112b8f0:	e0bff617 	ldw	r2,-40(fp)
8112b8f4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
8112b8f8:	e13ff617 	ldw	r4,-40(fp)
8112b8fc:	113c7b00 	call	8113c7b0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
8112b900:	e13ff617 	ldw	r4,-40(fp)
8112b904:	113c6380 	call	8113c638 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b908:	0005303a 	rdctl	r2,status
8112b90c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b910:	e0fff517 	ldw	r3,-44(fp)
8112b914:	00bfff84 	movi	r2,-2
8112b918:	1884703a 	and	r2,r3,r2
8112b91c:	1001703a 	wrctl	status,r2
  
  return context;
8112b920:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
8112b924:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
8112b928:	e0fffb03 	ldbu	r3,-20(fp)
8112b92c:	00a04574 	movhi	r2,33045
8112b930:	1081c704 	addi	r2,r2,1820
8112b934:	18c7883a 	add	r3,r3,r3
8112b938:	18c7883a 	add	r3,r3,r3
8112b93c:	10c5883a 	add	r2,r2,r3
8112b940:	e0fff617 	ldw	r3,-40(fp)
8112b944:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
8112b948:	d0e07d17 	ldw	r3,-32268(gp)
8112b94c:	e0bff617 	ldw	r2,-40(fp)
8112b950:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
8112b954:	e0bff617 	ldw	r2,-40(fp)
8112b958:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
8112b95c:	d0a07d17 	ldw	r2,-32268(gp)
8112b960:	10000326 	beq	r2,zero,8112b970 <OS_TCBInit+0x234>
            OSTCBList->OSTCBPrev = ptcb;
8112b964:	d0a07d17 	ldw	r2,-32268(gp)
8112b968:	e0fff617 	ldw	r3,-40(fp)
8112b96c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
8112b970:	e0bff617 	ldw	r2,-40(fp)
8112b974:	d0a07d15 	stw	r2,-32268(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
8112b978:	e0bff617 	ldw	r2,-40(fp)
8112b97c:	10c00d83 	ldbu	r3,54(r2)
8112b980:	d0a08703 	ldbu	r2,-32228(gp)
8112b984:	1884b03a 	or	r2,r3,r2
8112b988:	d0a08705 	stb	r2,-32228(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112b98c:	e0bff617 	ldw	r2,-40(fp)
8112b990:	10800d03 	ldbu	r2,52(r2)
8112b994:	10c03fcc 	andi	r3,r2,255
8112b998:	e0bff617 	ldw	r2,-40(fp)
8112b99c:	10800d03 	ldbu	r2,52(r2)
8112b9a0:	11003fcc 	andi	r4,r2,255
8112b9a4:	d0a08744 	addi	r2,gp,-32227
8112b9a8:	2085883a 	add	r2,r4,r2
8112b9ac:	11000003 	ldbu	r4,0(r2)
8112b9b0:	e0bff617 	ldw	r2,-40(fp)
8112b9b4:	10800d43 	ldbu	r2,53(r2)
8112b9b8:	2084b03a 	or	r2,r4,r2
8112b9bc:	1009883a 	mov	r4,r2
8112b9c0:	d0a08744 	addi	r2,gp,-32227
8112b9c4:	1885883a 	add	r2,r3,r2
8112b9c8:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
8112b9cc:	d0a08343 	ldbu	r2,-32243(gp)
8112b9d0:	10800044 	addi	r2,r2,1
8112b9d4:	d0a08345 	stb	r2,-32243(gp)
8112b9d8:	e0bff417 	ldw	r2,-48(fp)
8112b9dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b9e0:	e0bff717 	ldw	r2,-36(fp)
8112b9e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112b9e8:	0005883a 	mov	r2,zero
8112b9ec:	00000506 	br	8112ba04 <OS_TCBInit+0x2c8>
8112b9f0:	e0bff417 	ldw	r2,-48(fp)
8112b9f4:	e0bff915 	stw	r2,-28(fp)
8112b9f8:	e0bff917 	ldw	r2,-28(fp)
8112b9fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
8112ba00:	00801084 	movi	r2,66
}
8112ba04:	e037883a 	mov	sp,fp
8112ba08:	dfc00117 	ldw	ra,4(sp)
8112ba0c:	df000017 	ldw	fp,0(sp)
8112ba10:	dec00204 	addi	sp,sp,8
8112ba14:	f800283a 	ret

8112ba18 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
8112ba18:	defffe04 	addi	sp,sp,-8
8112ba1c:	de00012e 	bgeu	sp,et,8112ba24 <OSDebugInit+0xc>
8112ba20:	003b68fa 	trap	3
8112ba24:	df000115 	stw	fp,4(sp)
8112ba28:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
8112ba2c:	d0a01804 	addi	r2,gp,-32672
8112ba30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
8112ba34:	d0a01904 	addi	r2,gp,-32668
8112ba38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
8112ba3c:	d0a01a84 	addi	r2,gp,-32662
8112ba40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
8112ba44:	d0a01b04 	addi	r2,gp,-32660
8112ba48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
8112ba4c:	d0a01a04 	addi	r2,gp,-32664
8112ba50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
8112ba54:	d0a01b84 	addi	r2,gp,-32658
8112ba58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
8112ba5c:	d0a01c04 	addi	r2,gp,-32656
8112ba60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
8112ba64:	d0a01c84 	addi	r2,gp,-32654
8112ba68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
8112ba6c:	d0a01d04 	addi	r2,gp,-32652
8112ba70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
8112ba74:	d0a01d84 	addi	r2,gp,-32650
8112ba78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
8112ba7c:	d0a01e04 	addi	r2,gp,-32648
8112ba80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
8112ba84:	d0a01e84 	addi	r2,gp,-32646
8112ba88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
8112ba8c:	d0a01f04 	addi	r2,gp,-32644
8112ba90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
8112ba94:	d0a01f84 	addi	r2,gp,-32642
8112ba98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
8112ba9c:	d0a02004 	addi	r2,gp,-32640
8112baa0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
8112baa4:	d0a02084 	addi	r2,gp,-32638
8112baa8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
8112baac:	d0a02104 	addi	r2,gp,-32636
8112bab0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
8112bab4:	d0a02184 	addi	r2,gp,-32634
8112bab8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
8112babc:	d0a02204 	addi	r2,gp,-32632
8112bac0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
8112bac4:	d0a02284 	addi	r2,gp,-32630
8112bac8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
8112bacc:	d0a02304 	addi	r2,gp,-32628
8112bad0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
8112bad4:	d0a02384 	addi	r2,gp,-32626
8112bad8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
8112badc:	d0a02404 	addi	r2,gp,-32624
8112bae0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
8112bae4:	d0a02484 	addi	r2,gp,-32622
8112bae8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
8112baec:	d0a02504 	addi	r2,gp,-32620
8112baf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
8112baf4:	d0a02584 	addi	r2,gp,-32618
8112baf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
8112bafc:	d0a02604 	addi	r2,gp,-32616
8112bb00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
8112bb04:	d0a02684 	addi	r2,gp,-32614
8112bb08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
8112bb0c:	d0a02704 	addi	r2,gp,-32612
8112bb10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
8112bb14:	d0a02784 	addi	r2,gp,-32610
8112bb18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
8112bb1c:	d0a02804 	addi	r2,gp,-32608
8112bb20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
8112bb24:	d0a02884 	addi	r2,gp,-32606
8112bb28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
8112bb2c:	d0a02904 	addi	r2,gp,-32604
8112bb30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
8112bb34:	d0a02984 	addi	r2,gp,-32602
8112bb38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
8112bb3c:	d0a02a04 	addi	r2,gp,-32600
8112bb40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
8112bb44:	d0a02a84 	addi	r2,gp,-32598
8112bb48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
8112bb4c:	d0a02b04 	addi	r2,gp,-32596
8112bb50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
8112bb54:	d0a02b84 	addi	r2,gp,-32594
8112bb58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
8112bb5c:	d0a02c04 	addi	r2,gp,-32592
8112bb60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
8112bb64:	d0a02c84 	addi	r2,gp,-32590
8112bb68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
8112bb6c:	d0a02d04 	addi	r2,gp,-32588
8112bb70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
8112bb74:	d0a02d84 	addi	r2,gp,-32586
8112bb78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
8112bb7c:	d0a02e04 	addi	r2,gp,-32584
8112bb80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
8112bb84:	d0a02e84 	addi	r2,gp,-32582
8112bb88:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
8112bb8c:	00a04574 	movhi	r2,33045
8112bb90:	10b13904 	addi	r2,r2,-15132
8112bb94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
8112bb98:	00a04574 	movhi	r2,33045
8112bb9c:	10b05904 	addi	r2,r2,-16028
8112bba0:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
8112bba4:	d0a02f84 	addi	r2,gp,-32578
8112bba8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
8112bbac:	d0a03004 	addi	r2,gp,-32576
8112bbb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
8112bbb4:	d0a03084 	addi	r2,gp,-32574
8112bbb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
8112bbbc:	d0a03104 	addi	r2,gp,-32572
8112bbc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
8112bbc4:	d0a03184 	addi	r2,gp,-32570
8112bbc8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
8112bbcc:	d0a03204 	addi	r2,gp,-32568
8112bbd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
8112bbd4:	d0a03284 	addi	r2,gp,-32566
8112bbd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
8112bbdc:	d0a03304 	addi	r2,gp,-32564
8112bbe0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
8112bbe4:	d0a03384 	addi	r2,gp,-32562
8112bbe8:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
8112bbec:	d0a02f04 	addi	r2,gp,-32580
8112bbf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
8112bbf4:	d0a03404 	addi	r2,gp,-32560
8112bbf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
8112bbfc:	0001883a 	nop
8112bc00:	e037883a 	mov	sp,fp
8112bc04:	df000017 	ldw	fp,0(sp)
8112bc08:	dec00104 	addi	sp,sp,4
8112bc0c:	f800283a 	ret

8112bc10 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
8112bc10:	defff204 	addi	sp,sp,-56
8112bc14:	de00012e 	bgeu	sp,et,8112bc1c <OSFlagAccept+0xc>
8112bc18:	003b68fa 	trap	3
8112bc1c:	df000d15 	stw	fp,52(sp)
8112bc20:	df000d04 	addi	fp,sp,52
8112bc24:	e13ffc15 	stw	r4,-16(fp)
8112bc28:	2807883a 	mov	r3,r5
8112bc2c:	3005883a 	mov	r2,r6
8112bc30:	e1ffff15 	stw	r7,-4(fp)
8112bc34:	e0fffd0d 	sth	r3,-12(fp)
8112bc38:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112bc3c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112bc40:	e0bfff17 	ldw	r2,-4(fp)
8112bc44:	1000021e 	bne	r2,zero,8112bc50 <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
8112bc48:	0005883a 	mov	r2,zero
8112bc4c:	0000b006 	br	8112bf10 <OSFlagAccept+0x300>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112bc50:	e0bffc17 	ldw	r2,-16(fp)
8112bc54:	1000051e 	bne	r2,zero,8112bc6c <OSFlagAccept+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112bc58:	e0bfff17 	ldw	r2,-4(fp)
8112bc5c:	00c01b84 	movi	r3,110
8112bc60:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112bc64:	0005883a 	mov	r2,zero
8112bc68:	0000a906 	br	8112bf10 <OSFlagAccept+0x300>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112bc6c:	e0bffc17 	ldw	r2,-16(fp)
8112bc70:	10800003 	ldbu	r2,0(r2)
8112bc74:	10803fcc 	andi	r2,r2,255
8112bc78:	10800160 	cmpeqi	r2,r2,5
8112bc7c:	1000051e 	bne	r2,zero,8112bc94 <OSFlagAccept+0x84>
        *perr = OS_ERR_EVENT_TYPE;
8112bc80:	e0bfff17 	ldw	r2,-4(fp)
8112bc84:	00c00044 	movi	r3,1
8112bc88:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112bc8c:	0005883a 	mov	r2,zero
8112bc90:	00009f06 	br	8112bf10 <OSFlagAccept+0x300>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112bc94:	e0fffe03 	ldbu	r3,-8(fp)
8112bc98:	00bfe004 	movi	r2,-128
8112bc9c:	1884703a 	and	r2,r3,r2
8112bca0:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
8112bca4:	e0bff503 	ldbu	r2,-44(fp)
8112bca8:	10000626 	beq	r2,zero,8112bcc4 <OSFlagAccept+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
8112bcac:	e0bffe03 	ldbu	r2,-8(fp)
8112bcb0:	10801fcc 	andi	r2,r2,127
8112bcb4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112bcb8:	00800044 	movi	r2,1
8112bcbc:	e0bff385 	stb	r2,-50(fp)
8112bcc0:	00000106 	br	8112bcc8 <OSFlagAccept+0xb8>
    } else {
        consume    = OS_FALSE;
8112bcc4:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
8112bcc8:	e0bfff17 	ldw	r2,-4(fp)
8112bccc:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bcd0:	0005303a 	rdctl	r2,status
8112bcd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bcd8:	e0fffb17 	ldw	r3,-20(fp)
8112bcdc:	00bfff84 	movi	r2,-2
8112bce0:	1884703a 	and	r2,r3,r2
8112bce4:	1001703a 	wrctl	status,r2
  
  return context;
8112bce8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
8112bcec:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
8112bcf0:	e0bffe03 	ldbu	r2,-8(fp)
8112bcf4:	10c00060 	cmpeqi	r3,r2,1
8112bcf8:	18005f1e 	bne	r3,zero,8112be78 <OSFlagAccept+0x268>
8112bcfc:	10c00088 	cmpgei	r3,r2,2
8112bd00:	1800021e 	bne	r3,zero,8112bd0c <OSFlagAccept+0xfc>
8112bd04:	10003f26 	beq	r2,zero,8112be04 <OSFlagAccept+0x1f4>
8112bd08:	00007706 	br	8112bee8 <OSFlagAccept+0x2d8>
8112bd0c:	10c000a0 	cmpeqi	r3,r2,2
8112bd10:	1800031e 	bne	r3,zero,8112bd20 <OSFlagAccept+0x110>
8112bd14:	108000e0 	cmpeqi	r2,r2,3
8112bd18:	10001e1e 	bne	r2,zero,8112bd94 <OSFlagAccept+0x184>
8112bd1c:	00007206 	br	8112bee8 <OSFlagAccept+0x2d8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112bd20:	e0bffc17 	ldw	r2,-16(fp)
8112bd24:	10c0020b 	ldhu	r3,8(r2)
8112bd28:	e0bffd0b 	ldhu	r2,-12(fp)
8112bd2c:	1884703a 	and	r2,r3,r2
8112bd30:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112bd34:	e0fff30b 	ldhu	r3,-52(fp)
8112bd38:	e0bffd0b 	ldhu	r2,-12(fp)
8112bd3c:	18800d1e 	bne	r3,r2,8112bd74 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112bd40:	e0bff383 	ldbu	r2,-50(fp)
8112bd44:	10800058 	cmpnei	r2,r2,1
8112bd48:	10000d1e 	bne	r2,zero,8112bd80 <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112bd4c:	e0bffc17 	ldw	r2,-16(fp)
8112bd50:	1080020b 	ldhu	r2,8(r2)
8112bd54:	1007883a 	mov	r3,r2
8112bd58:	e0bff30b 	ldhu	r2,-52(fp)
8112bd5c:	0084303a 	nor	r2,zero,r2
8112bd60:	1884703a 	and	r2,r3,r2
8112bd64:	1007883a 	mov	r3,r2
8112bd68:	e0bffc17 	ldw	r2,-16(fp)
8112bd6c:	10c0020d 	sth	r3,8(r2)
8112bd70:	00000306 	br	8112bd80 <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112bd74:	e0bfff17 	ldw	r2,-4(fp)
8112bd78:	00c01c04 	movi	r3,112
8112bd7c:	10c00005 	stb	r3,0(r2)
8112bd80:	e0bff417 	ldw	r2,-48(fp)
8112bd84:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bd88:	e0bff617 	ldw	r2,-40(fp)
8112bd8c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112bd90:	00005e06 	br	8112bf0c <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112bd94:	e0bffc17 	ldw	r2,-16(fp)
8112bd98:	10c0020b 	ldhu	r3,8(r2)
8112bd9c:	e0bffd0b 	ldhu	r2,-12(fp)
8112bda0:	1884703a 	and	r2,r3,r2
8112bda4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112bda8:	e0bff30b 	ldhu	r2,-52(fp)
8112bdac:	10000d26 	beq	r2,zero,8112bde4 <OSFlagAccept+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112bdb0:	e0bff383 	ldbu	r2,-50(fp)
8112bdb4:	10800058 	cmpnei	r2,r2,1
8112bdb8:	10000d1e 	bne	r2,zero,8112bdf0 <OSFlagAccept+0x1e0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112bdbc:	e0bffc17 	ldw	r2,-16(fp)
8112bdc0:	1080020b 	ldhu	r2,8(r2)
8112bdc4:	1007883a 	mov	r3,r2
8112bdc8:	e0bff30b 	ldhu	r2,-52(fp)
8112bdcc:	0084303a 	nor	r2,zero,r2
8112bdd0:	1884703a 	and	r2,r3,r2
8112bdd4:	1007883a 	mov	r3,r2
8112bdd8:	e0bffc17 	ldw	r2,-16(fp)
8112bddc:	10c0020d 	sth	r3,8(r2)
8112bde0:	00000306 	br	8112bdf0 <OSFlagAccept+0x1e0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112bde4:	e0bfff17 	ldw	r2,-4(fp)
8112bde8:	00c01c04 	movi	r3,112
8112bdec:	10c00005 	stb	r3,0(r2)
8112bdf0:	e0bff417 	ldw	r2,-48(fp)
8112bdf4:	e0bff715 	stw	r2,-36(fp)
8112bdf8:	e0bff717 	ldw	r2,-36(fp)
8112bdfc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112be00:	00004206 	br	8112bf0c <OSFlagAccept+0x2fc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112be04:	e0bffc17 	ldw	r2,-16(fp)
8112be08:	1080020b 	ldhu	r2,8(r2)
8112be0c:	0084303a 	nor	r2,zero,r2
8112be10:	1007883a 	mov	r3,r2
8112be14:	e0bffd0b 	ldhu	r2,-12(fp)
8112be18:	1884703a 	and	r2,r3,r2
8112be1c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112be20:	e0fff30b 	ldhu	r3,-52(fp)
8112be24:	e0bffd0b 	ldhu	r2,-12(fp)
8112be28:	18800b1e 	bne	r3,r2,8112be58 <OSFlagAccept+0x248>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112be2c:	e0bff383 	ldbu	r2,-50(fp)
8112be30:	10800058 	cmpnei	r2,r2,1
8112be34:	10000b1e 	bne	r2,zero,8112be64 <OSFlagAccept+0x254>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112be38:	e0bffc17 	ldw	r2,-16(fp)
8112be3c:	10c0020b 	ldhu	r3,8(r2)
8112be40:	e0bff30b 	ldhu	r2,-52(fp)
8112be44:	1884b03a 	or	r2,r3,r2
8112be48:	1007883a 	mov	r3,r2
8112be4c:	e0bffc17 	ldw	r2,-16(fp)
8112be50:	10c0020d 	sth	r3,8(r2)
8112be54:	00000306 	br	8112be64 <OSFlagAccept+0x254>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112be58:	e0bfff17 	ldw	r2,-4(fp)
8112be5c:	00c01c04 	movi	r3,112
8112be60:	10c00005 	stb	r3,0(r2)
8112be64:	e0bff417 	ldw	r2,-48(fp)
8112be68:	e0bff815 	stw	r2,-32(fp)
8112be6c:	e0bff817 	ldw	r2,-32(fp)
8112be70:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112be74:	00002506 	br	8112bf0c <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112be78:	e0bffc17 	ldw	r2,-16(fp)
8112be7c:	1080020b 	ldhu	r2,8(r2)
8112be80:	0084303a 	nor	r2,zero,r2
8112be84:	1007883a 	mov	r3,r2
8112be88:	e0bffd0b 	ldhu	r2,-12(fp)
8112be8c:	1884703a 	and	r2,r3,r2
8112be90:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112be94:	e0bff30b 	ldhu	r2,-52(fp)
8112be98:	10000b26 	beq	r2,zero,8112bec8 <OSFlagAccept+0x2b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112be9c:	e0bff383 	ldbu	r2,-50(fp)
8112bea0:	10800058 	cmpnei	r2,r2,1
8112bea4:	10000b1e 	bne	r2,zero,8112bed4 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112bea8:	e0bffc17 	ldw	r2,-16(fp)
8112beac:	10c0020b 	ldhu	r3,8(r2)
8112beb0:	e0bff30b 	ldhu	r2,-52(fp)
8112beb4:	1884b03a 	or	r2,r3,r2
8112beb8:	1007883a 	mov	r3,r2
8112bebc:	e0bffc17 	ldw	r2,-16(fp)
8112bec0:	10c0020d 	sth	r3,8(r2)
8112bec4:	00000306 	br	8112bed4 <OSFlagAccept+0x2c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112bec8:	e0bfff17 	ldw	r2,-4(fp)
8112becc:	00c01c04 	movi	r3,112
8112bed0:	10c00005 	stb	r3,0(r2)
8112bed4:	e0bff417 	ldw	r2,-48(fp)
8112bed8:	e0bff915 	stw	r2,-28(fp)
8112bedc:	e0bff917 	ldw	r2,-28(fp)
8112bee0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112bee4:	00000906 	br	8112bf0c <OSFlagAccept+0x2fc>
8112bee8:	e0bff417 	ldw	r2,-48(fp)
8112beec:	e0bffa15 	stw	r2,-24(fp)
8112bef0:	e0bffa17 	ldw	r2,-24(fp)
8112bef4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112bef8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
8112befc:	e0bfff17 	ldw	r2,-4(fp)
8112bf00:	00c01bc4 	movi	r3,111
8112bf04:	10c00005 	stb	r3,0(r2)
             break;
8112bf08:	0001883a 	nop
    }
    return (flags_rdy);
8112bf0c:	e0bff30b 	ldhu	r2,-52(fp)
}
8112bf10:	e037883a 	mov	sp,fp
8112bf14:	df000017 	ldw	fp,0(sp)
8112bf18:	dec00104 	addi	sp,sp,4
8112bf1c:	f800283a 	ret

8112bf20 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
8112bf20:	defff804 	addi	sp,sp,-32
8112bf24:	de00012e 	bgeu	sp,et,8112bf2c <OSFlagCreate+0xc>
8112bf28:	003b68fa 	trap	3
8112bf2c:	df000715 	stw	fp,28(sp)
8112bf30:	df000704 	addi	fp,sp,28
8112bf34:	2005883a 	mov	r2,r4
8112bf38:	e17fff15 	stw	r5,-4(fp)
8112bf3c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
8112bf40:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
8112bf44:	e0bfff17 	ldw	r2,-4(fp)
8112bf48:	1000021e 	bne	r2,zero,8112bf54 <OSFlagCreate+0x34>
        return ((OS_FLAG_GRP *)0);
8112bf4c:	0005883a 	mov	r2,zero
8112bf50:	00003306 	br	8112c020 <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
8112bf54:	d0a08a03 	ldbu	r2,-32216(gp)
8112bf58:	10803fcc 	andi	r2,r2,255
8112bf5c:	10000526 	beq	r2,zero,8112bf74 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
8112bf60:	e0bfff17 	ldw	r2,-4(fp)
8112bf64:	00c00404 	movi	r3,16
8112bf68:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
8112bf6c:	0005883a 	mov	r2,zero
8112bf70:	00002b06 	br	8112c020 <OSFlagCreate+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bf74:	0005303a 	rdctl	r2,status
8112bf78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bf7c:	e0fffd17 	ldw	r3,-12(fp)
8112bf80:	00bfff84 	movi	r2,-2
8112bf84:	1884703a 	and	r2,r3,r2
8112bf88:	1001703a 	wrctl	status,r2
  
  return context;
8112bf8c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112bf90:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
8112bf94:	d0a08f17 	ldw	r2,-32196(gp)
8112bf98:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
8112bf9c:	e0bffb17 	ldw	r2,-20(fp)
8112bfa0:	10001726 	beq	r2,zero,8112c000 <OSFlagCreate+0xe0>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
8112bfa4:	d0a08f17 	ldw	r2,-32196(gp)
8112bfa8:	10800117 	ldw	r2,4(r2)
8112bfac:	d0a08f15 	stw	r2,-32196(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
8112bfb0:	e0bffb17 	ldw	r2,-20(fp)
8112bfb4:	00c00144 	movi	r3,5
8112bfb8:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
8112bfbc:	e0bffb17 	ldw	r2,-20(fp)
8112bfc0:	e0fffe0b 	ldhu	r3,-8(fp)
8112bfc4:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
8112bfc8:	e0bffb17 	ldw	r2,-20(fp)
8112bfcc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
8112bfd0:	e0bffb17 	ldw	r2,-20(fp)
8112bfd4:	00c00fc4 	movi	r3,63
8112bfd8:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112bfdc:	e0bffb17 	ldw	r2,-20(fp)
8112bfe0:	100002c5 	stb	zero,11(r2)
8112bfe4:	e0bff917 	ldw	r2,-28(fp)
8112bfe8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bfec:	e0bffa17 	ldw	r2,-24(fp)
8112bff0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
8112bff4:	e0bfff17 	ldw	r2,-4(fp)
8112bff8:	10000005 	stb	zero,0(r2)
8112bffc:	00000706 	br	8112c01c <OSFlagCreate+0xfc>
8112c000:	e0bff917 	ldw	r2,-28(fp)
8112c004:	e0bffc15 	stw	r2,-16(fp)
8112c008:	e0bffc17 	ldw	r2,-16(fp)
8112c00c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
8112c010:	e0bfff17 	ldw	r2,-4(fp)
8112c014:	00c01c84 	movi	r3,114
8112c018:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
8112c01c:	e0bffb17 	ldw	r2,-20(fp)
}
8112c020:	e037883a 	mov	sp,fp
8112c024:	df000017 	ldw	fp,0(sp)
8112c028:	dec00104 	addi	sp,sp,4
8112c02c:	f800283a 	ret

8112c030 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
8112c030:	defff204 	addi	sp,sp,-56
8112c034:	de00012e 	bgeu	sp,et,8112c03c <OSFlagDel+0xc>
8112c038:	003b68fa 	trap	3
8112c03c:	dfc00d15 	stw	ra,52(sp)
8112c040:	df000c15 	stw	fp,48(sp)
8112c044:	df000c04 	addi	fp,sp,48
8112c048:	e13ffd15 	stw	r4,-12(fp)
8112c04c:	2805883a 	mov	r2,r5
8112c050:	e1bfff15 	stw	r6,-4(fp)
8112c054:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112c058:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112c05c:	e0bfff17 	ldw	r2,-4(fp)
8112c060:	1000021e 	bne	r2,zero,8112c06c <OSFlagDel+0x3c>
        return (pgrp);
8112c064:	e0bffd17 	ldw	r2,-12(fp)
8112c068:	00008006 	br	8112c26c <OSFlagDel+0x23c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112c06c:	e0bffd17 	ldw	r2,-12(fp)
8112c070:	1000051e 	bne	r2,zero,8112c088 <OSFlagDel+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112c074:	e0bfff17 	ldw	r2,-4(fp)
8112c078:	00c01b84 	movi	r3,110
8112c07c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112c080:	e0bffd17 	ldw	r2,-12(fp)
8112c084:	00007906 	br	8112c26c <OSFlagDel+0x23c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112c088:	d0a08a03 	ldbu	r2,-32216(gp)
8112c08c:	10803fcc 	andi	r2,r2,255
8112c090:	10000526 	beq	r2,zero,8112c0a8 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112c094:	e0bfff17 	ldw	r2,-4(fp)
8112c098:	00c003c4 	movi	r3,15
8112c09c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112c0a0:	e0bffd17 	ldw	r2,-12(fp)
8112c0a4:	00007106 	br	8112c26c <OSFlagDel+0x23c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
8112c0a8:	e0bffd17 	ldw	r2,-12(fp)
8112c0ac:	10800003 	ldbu	r2,0(r2)
8112c0b0:	10803fcc 	andi	r2,r2,255
8112c0b4:	10800160 	cmpeqi	r2,r2,5
8112c0b8:	1000051e 	bne	r2,zero,8112c0d0 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
8112c0bc:	e0bfff17 	ldw	r2,-4(fp)
8112c0c0:	00c00044 	movi	r3,1
8112c0c4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112c0c8:	e0bffd17 	ldw	r2,-12(fp)
8112c0cc:	00006706 	br	8112c26c <OSFlagDel+0x23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c0d0:	0005303a 	rdctl	r2,status
8112c0d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c0d8:	e0fffc17 	ldw	r3,-16(fp)
8112c0dc:	00bfff84 	movi	r2,-2
8112c0e0:	1884703a 	and	r2,r3,r2
8112c0e4:	1001703a 	wrctl	status,r2
  
  return context;
8112c0e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c0ec:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
8112c0f0:	e0bffd17 	ldw	r2,-12(fp)
8112c0f4:	10800117 	ldw	r2,4(r2)
8112c0f8:	10000326 	beq	r2,zero,8112c108 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112c0fc:	00800044 	movi	r2,1
8112c100:	e0bff405 	stb	r2,-48(fp)
8112c104:	00000106 	br	8112c10c <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112c108:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112c10c:	e0bffe03 	ldbu	r2,-8(fp)
8112c110:	10000326 	beq	r2,zero,8112c120 <OSFlagDel+0xf0>
8112c114:	10800060 	cmpeqi	r2,r2,1
8112c118:	1000231e 	bne	r2,zero,8112c1a8 <OSFlagDel+0x178>
8112c11c:	00004806 	br	8112c240 <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
8112c120:	e0bff403 	ldbu	r2,-48(fp)
8112c124:	1000161e 	bne	r2,zero,8112c180 <OSFlagDel+0x150>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
8112c128:	e0bffd17 	ldw	r2,-12(fp)
8112c12c:	00c00fc4 	movi	r3,63
8112c130:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112c134:	e0bffd17 	ldw	r2,-12(fp)
8112c138:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112c13c:	e0bffd17 	ldw	r2,-12(fp)
8112c140:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
8112c144:	d0e08f17 	ldw	r3,-32196(gp)
8112c148:	e0bffd17 	ldw	r2,-12(fp)
8112c14c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112c150:	e0bffd17 	ldw	r2,-12(fp)
8112c154:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
8112c158:	e0bffd17 	ldw	r2,-12(fp)
8112c15c:	d0a08f15 	stw	r2,-32196(gp)
8112c160:	e0bff717 	ldw	r2,-36(fp)
8112c164:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c168:	e0bff817 	ldw	r2,-32(fp)
8112c16c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
8112c170:	e0bfff17 	ldw	r2,-4(fp)
8112c174:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
8112c178:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
8112c17c:	00003a06 	br	8112c268 <OSFlagDel+0x238>
8112c180:	e0bff717 	ldw	r2,-36(fp)
8112c184:	e0bff915 	stw	r2,-28(fp)
8112c188:	e0bff917 	ldw	r2,-28(fp)
8112c18c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
8112c190:	e0bfff17 	ldw	r2,-4(fp)
8112c194:	00c01244 	movi	r3,73
8112c198:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
8112c19c:	e0bffd17 	ldw	r2,-12(fp)
8112c1a0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112c1a4:	00003006 	br	8112c268 <OSFlagDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112c1a8:	e0bffd17 	ldw	r2,-12(fp)
8112c1ac:	10800117 	ldw	r2,4(r2)
8112c1b0:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112c1b4:	00000606 	br	8112c1d0 <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
8112c1b8:	000b883a 	mov	r5,zero
8112c1bc:	e13ff517 	ldw	r4,-44(fp)
8112c1c0:	112d1e40 	call	8112d1e4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112c1c4:	e0bff517 	ldw	r2,-44(fp)
8112c1c8:	10800017 	ldw	r2,0(r2)
8112c1cc:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112c1d0:	e0bff517 	ldw	r2,-44(fp)
8112c1d4:	103ff81e 	bne	r2,zero,8112c1b8 <__reset+0xfb10c1b8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
8112c1d8:	e0bffd17 	ldw	r2,-12(fp)
8112c1dc:	00c00fc4 	movi	r3,63
8112c1e0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112c1e4:	e0bffd17 	ldw	r2,-12(fp)
8112c1e8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112c1ec:	e0bffd17 	ldw	r2,-12(fp)
8112c1f0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
8112c1f4:	d0e08f17 	ldw	r3,-32196(gp)
8112c1f8:	e0bffd17 	ldw	r2,-12(fp)
8112c1fc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112c200:	e0bffd17 	ldw	r2,-12(fp)
8112c204:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
8112c208:	e0bffd17 	ldw	r2,-12(fp)
8112c20c:	d0a08f15 	stw	r2,-32196(gp)
8112c210:	e0bff717 	ldw	r2,-36(fp)
8112c214:	e0bffa15 	stw	r2,-24(fp)
8112c218:	e0bffa17 	ldw	r2,-24(fp)
8112c21c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112c220:	e0bff403 	ldbu	r2,-48(fp)
8112c224:	10800058 	cmpnei	r2,r2,1
8112c228:	1000011e 	bne	r2,zero,8112c230 <OSFlagDel+0x200>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112c22c:	112b2f40 	call	8112b2f4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
8112c230:	e0bfff17 	ldw	r2,-4(fp)
8112c234:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
8112c238:	e03ff615 	stw	zero,-40(fp)
             break;
8112c23c:	00000a06 	br	8112c268 <OSFlagDel+0x238>
8112c240:	e0bff717 	ldw	r2,-36(fp)
8112c244:	e0bffb15 	stw	r2,-20(fp)
8112c248:	e0bffb17 	ldw	r2,-20(fp)
8112c24c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
8112c250:	e0bfff17 	ldw	r2,-4(fp)
8112c254:	00c001c4 	movi	r3,7
8112c258:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
8112c25c:	e0bffd17 	ldw	r2,-12(fp)
8112c260:	e0bff615 	stw	r2,-40(fp)
             break;
8112c264:	0001883a 	nop
    }
    return (pgrp_return);
8112c268:	e0bff617 	ldw	r2,-40(fp)
}
8112c26c:	e037883a 	mov	sp,fp
8112c270:	dfc00117 	ldw	ra,4(sp)
8112c274:	df000017 	ldw	fp,0(sp)
8112c278:	dec00204 	addi	sp,sp,8
8112c27c:	f800283a 	ret

8112c280 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112c280:	defff604 	addi	sp,sp,-40
8112c284:	de00012e 	bgeu	sp,et,8112c28c <OSFlagNameGet+0xc>
8112c288:	003b68fa 	trap	3
8112c28c:	dfc00915 	stw	ra,36(sp)
8112c290:	df000815 	stw	fp,32(sp)
8112c294:	df000804 	addi	fp,sp,32
8112c298:	e13ffd15 	stw	r4,-12(fp)
8112c29c:	e17ffe15 	stw	r5,-8(fp)
8112c2a0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c2a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112c2a8:	e0bfff17 	ldw	r2,-4(fp)
8112c2ac:	1000021e 	bne	r2,zero,8112c2b8 <OSFlagNameGet+0x38>
        return (0);
8112c2b0:	0005883a 	mov	r2,zero
8112c2b4:	00003906 	br	8112c39c <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112c2b8:	e0bffd17 	ldw	r2,-12(fp)
8112c2bc:	1000051e 	bne	r2,zero,8112c2d4 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112c2c0:	e0bfff17 	ldw	r2,-4(fp)
8112c2c4:	00c01b84 	movi	r3,110
8112c2c8:	10c00005 	stb	r3,0(r2)
        return (0);
8112c2cc:	0005883a 	mov	r2,zero
8112c2d0:	00003206 	br	8112c39c <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112c2d4:	e0bffe17 	ldw	r2,-8(fp)
8112c2d8:	1000051e 	bne	r2,zero,8112c2f0 <OSFlagNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112c2dc:	e0bfff17 	ldw	r2,-4(fp)
8112c2e0:	00c00304 	movi	r3,12
8112c2e4:	10c00005 	stb	r3,0(r2)
        return (0);
8112c2e8:	0005883a 	mov	r2,zero
8112c2ec:	00002b06 	br	8112c39c <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112c2f0:	d0a08a03 	ldbu	r2,-32216(gp)
8112c2f4:	10803fcc 	andi	r2,r2,255
8112c2f8:	10000526 	beq	r2,zero,8112c310 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112c2fc:	e0bfff17 	ldw	r2,-4(fp)
8112c300:	00c00444 	movi	r3,17
8112c304:	10c00005 	stb	r3,0(r2)
        return (0);
8112c308:	0005883a 	mov	r2,zero
8112c30c:	00002306 	br	8112c39c <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c310:	0005303a 	rdctl	r2,status
8112c314:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c318:	e0fffc17 	ldw	r3,-16(fp)
8112c31c:	00bfff84 	movi	r2,-2
8112c320:	1884703a 	and	r2,r3,r2
8112c324:	1001703a 	wrctl	status,r2
  
  return context;
8112c328:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c32c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112c330:	e0bffd17 	ldw	r2,-12(fp)
8112c334:	10800003 	ldbu	r2,0(r2)
8112c338:	10803fcc 	andi	r2,r2,255
8112c33c:	10800160 	cmpeqi	r2,r2,5
8112c340:	1000091e 	bne	r2,zero,8112c368 <OSFlagNameGet+0xe8>
8112c344:	e0bff817 	ldw	r2,-32(fp)
8112c348:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c34c:	e0bff917 	ldw	r2,-28(fp)
8112c350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112c354:	e0bfff17 	ldw	r2,-4(fp)
8112c358:	00c00044 	movi	r3,1
8112c35c:	10c00005 	stb	r3,0(r2)
        return (0);
8112c360:	0005883a 	mov	r2,zero
8112c364:	00000d06 	br	8112c39c <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
8112c368:	e0bffd17 	ldw	r2,-12(fp)
8112c36c:	10800284 	addi	r2,r2,10
8112c370:	100b883a 	mov	r5,r2
8112c374:	e13ffe17 	ldw	r4,-8(fp)
8112c378:	112b4480 	call	8112b448 <OS_StrCopy>
8112c37c:	e0bffb05 	stb	r2,-20(fp)
8112c380:	e0bff817 	ldw	r2,-32(fp)
8112c384:	e0bffa15 	stw	r2,-24(fp)
8112c388:	e0bffa17 	ldw	r2,-24(fp)
8112c38c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c390:	e0bfff17 	ldw	r2,-4(fp)
8112c394:	10000005 	stb	zero,0(r2)
    return (len);
8112c398:	e0bffb03 	ldbu	r2,-20(fp)
}
8112c39c:	e037883a 	mov	sp,fp
8112c3a0:	dfc00117 	ldw	ra,4(sp)
8112c3a4:	df000017 	ldw	fp,0(sp)
8112c3a8:	dec00204 	addi	sp,sp,8
8112c3ac:	f800283a 	ret

8112c3b0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112c3b0:	defff504 	addi	sp,sp,-44
8112c3b4:	de00012e 	bgeu	sp,et,8112c3bc <OSFlagNameSet+0xc>
8112c3b8:	003b68fa 	trap	3
8112c3bc:	dfc00a15 	stw	ra,40(sp)
8112c3c0:	df000915 	stw	fp,36(sp)
8112c3c4:	df000904 	addi	fp,sp,36
8112c3c8:	e13ffd15 	stw	r4,-12(fp)
8112c3cc:	e17ffe15 	stw	r5,-8(fp)
8112c3d0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c3d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112c3d8:	e0bfff17 	ldw	r2,-4(fp)
8112c3dc:	10004326 	beq	r2,zero,8112c4ec <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112c3e0:	e0bffd17 	ldw	r2,-12(fp)
8112c3e4:	1000041e 	bne	r2,zero,8112c3f8 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112c3e8:	e0bfff17 	ldw	r2,-4(fp)
8112c3ec:	00c01b84 	movi	r3,110
8112c3f0:	10c00005 	stb	r3,0(r2)
        return;
8112c3f4:	00003e06 	br	8112c4f0 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112c3f8:	e0bffe17 	ldw	r2,-8(fp)
8112c3fc:	1000041e 	bne	r2,zero,8112c410 <OSFlagNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112c400:	e0bfff17 	ldw	r2,-4(fp)
8112c404:	00c00304 	movi	r3,12
8112c408:	10c00005 	stb	r3,0(r2)
        return;
8112c40c:	00003806 	br	8112c4f0 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112c410:	d0a08a03 	ldbu	r2,-32216(gp)
8112c414:	10803fcc 	andi	r2,r2,255
8112c418:	10000426 	beq	r2,zero,8112c42c <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112c41c:	e0bfff17 	ldw	r2,-4(fp)
8112c420:	00c00484 	movi	r3,18
8112c424:	10c00005 	stb	r3,0(r2)
        return;
8112c428:	00003106 	br	8112c4f0 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c42c:	0005303a 	rdctl	r2,status
8112c430:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c434:	e0fffc17 	ldw	r3,-16(fp)
8112c438:	00bfff84 	movi	r2,-2
8112c43c:	1884703a 	and	r2,r3,r2
8112c440:	1001703a 	wrctl	status,r2
  
  return context;
8112c444:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c448:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112c44c:	e0bffd17 	ldw	r2,-12(fp)
8112c450:	10800003 	ldbu	r2,0(r2)
8112c454:	10803fcc 	andi	r2,r2,255
8112c458:	10800160 	cmpeqi	r2,r2,5
8112c45c:	1000081e 	bne	r2,zero,8112c480 <OSFlagNameSet+0xd0>
8112c460:	e0bff717 	ldw	r2,-36(fp)
8112c464:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c468:	e0bff817 	ldw	r2,-32(fp)
8112c46c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112c470:	e0bfff17 	ldw	r2,-4(fp)
8112c474:	00c00044 	movi	r3,1
8112c478:	10c00005 	stb	r3,0(r2)
        return;
8112c47c:	00001c06 	br	8112c4f0 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112c480:	e13ffe17 	ldw	r4,-8(fp)
8112c484:	112b4c40 	call	8112b4c4 <OS_StrLen>
8112c488:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
8112c48c:	e0bffa03 	ldbu	r2,-24(fp)
8112c490:	10800830 	cmpltui	r2,r2,32
8112c494:	1000081e 	bne	r2,zero,8112c4b8 <OSFlagNameSet+0x108>
8112c498:	e0bff717 	ldw	r2,-36(fp)
8112c49c:	e0bff915 	stw	r2,-28(fp)
8112c4a0:	e0bff917 	ldw	r2,-28(fp)
8112c4a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
8112c4a8:	e0bfff17 	ldw	r2,-4(fp)
8112c4ac:	00c01cc4 	movi	r3,115
8112c4b0:	10c00005 	stb	r3,0(r2)
        return;
8112c4b4:	00000e06 	br	8112c4f0 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
8112c4b8:	e0bffd17 	ldw	r2,-12(fp)
8112c4bc:	10800284 	addi	r2,r2,10
8112c4c0:	e17ffe17 	ldw	r5,-8(fp)
8112c4c4:	1009883a 	mov	r4,r2
8112c4c8:	112b4480 	call	8112b448 <OS_StrCopy>
8112c4cc:	e0bff717 	ldw	r2,-36(fp)
8112c4d0:	e0bffb15 	stw	r2,-20(fp)
8112c4d4:	e0bffb17 	ldw	r2,-20(fp)
8112c4d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c4dc:	e0bfff17 	ldw	r2,-4(fp)
8112c4e0:	10000005 	stb	zero,0(r2)
    return;
8112c4e4:	0001883a 	nop
8112c4e8:	00000106 	br	8112c4f0 <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112c4ec:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
8112c4f0:	e037883a 	mov	sp,fp
8112c4f4:	dfc00117 	ldw	ra,4(sp)
8112c4f8:	df000017 	ldw	fp,0(sp)
8112c4fc:	dec00204 	addi	sp,sp,8
8112c500:	f800283a 	ret

8112c504 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
8112c504:	deffe104 	addi	sp,sp,-124
8112c508:	de00012e 	bgeu	sp,et,8112c510 <OSFlagPend+0xc>
8112c50c:	003b68fa 	trap	3
8112c510:	dfc01e15 	stw	ra,120(sp)
8112c514:	df001d15 	stw	fp,116(sp)
8112c518:	df001d04 	addi	fp,sp,116
8112c51c:	e13ffc15 	stw	r4,-16(fp)
8112c520:	2809883a 	mov	r4,r5
8112c524:	3007883a 	mov	r3,r6
8112c528:	3805883a 	mov	r2,r7
8112c52c:	e13ffd0d 	sth	r4,-12(fp)
8112c530:	e0fffe05 	stb	r3,-8(fp)
8112c534:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112c538:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112c53c:	e0800217 	ldw	r2,8(fp)
8112c540:	1000021e 	bne	r2,zero,8112c54c <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
8112c544:	0005883a 	mov	r2,zero
8112c548:	00015906 	br	8112cab0 <OSFlagPend+0x5ac>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112c54c:	e0bffc17 	ldw	r2,-16(fp)
8112c550:	1000051e 	bne	r2,zero,8112c568 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112c554:	e0800217 	ldw	r2,8(fp)
8112c558:	00c01b84 	movi	r3,110
8112c55c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c560:	0005883a 	mov	r2,zero
8112c564:	00015206 	br	8112cab0 <OSFlagPend+0x5ac>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112c568:	d0a08a03 	ldbu	r2,-32216(gp)
8112c56c:	10803fcc 	andi	r2,r2,255
8112c570:	10000526 	beq	r2,zero,8112c588 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112c574:	e0800217 	ldw	r2,8(fp)
8112c578:	00c00084 	movi	r3,2
8112c57c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c580:	0005883a 	mov	r2,zero
8112c584:	00014a06 	br	8112cab0 <OSFlagPend+0x5ac>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112c588:	d0a07803 	ldbu	r2,-32288(gp)
8112c58c:	10803fcc 	andi	r2,r2,255
8112c590:	10000526 	beq	r2,zero,8112c5a8 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112c594:	e0800217 	ldw	r2,8(fp)
8112c598:	00c00344 	movi	r3,13
8112c59c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c5a0:	0005883a 	mov	r2,zero
8112c5a4:	00014206 	br	8112cab0 <OSFlagPend+0x5ac>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112c5a8:	e0bffc17 	ldw	r2,-16(fp)
8112c5ac:	10800003 	ldbu	r2,0(r2)
8112c5b0:	10803fcc 	andi	r2,r2,255
8112c5b4:	10800160 	cmpeqi	r2,r2,5
8112c5b8:	1000051e 	bne	r2,zero,8112c5d0 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
8112c5bc:	e0800217 	ldw	r2,8(fp)
8112c5c0:	00c00044 	movi	r3,1
8112c5c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c5c8:	0005883a 	mov	r2,zero
8112c5cc:	00013806 	br	8112cab0 <OSFlagPend+0x5ac>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112c5d0:	e0fffe03 	ldbu	r3,-8(fp)
8112c5d4:	00bfe004 	movi	r2,-128
8112c5d8:	1884703a 	and	r2,r3,r2
8112c5dc:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
8112c5e0:	e0bfe603 	ldbu	r2,-104(fp)
8112c5e4:	10000626 	beq	r2,zero,8112c600 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
8112c5e8:	e0bffe03 	ldbu	r2,-8(fp)
8112c5ec:	10801fcc 	andi	r2,r2,127
8112c5f0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112c5f4:	00800044 	movi	r2,1
8112c5f8:	e0bfe405 	stb	r2,-112(fp)
8112c5fc:	00000106 	br	8112c604 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
8112c600:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c604:	0005303a 	rdctl	r2,status
8112c608:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c60c:	e0fff617 	ldw	r3,-40(fp)
8112c610:	00bfff84 	movi	r2,-2
8112c614:	1884703a 	and	r2,r3,r2
8112c618:	1001703a 	wrctl	status,r2
  
  return context;
8112c61c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112c620:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
8112c624:	e0bffe03 	ldbu	r2,-8(fp)
8112c628:	10c00060 	cmpeqi	r3,r2,1
8112c62c:	1800921e 	bne	r3,zero,8112c878 <OSFlagPend+0x374>
8112c630:	10c00088 	cmpgei	r3,r2,2
8112c634:	1800021e 	bne	r3,zero,8112c640 <OSFlagPend+0x13c>
8112c638:	10006126 	beq	r2,zero,8112c7c0 <OSFlagPend+0x2bc>
8112c63c:	0000bb06 	br	8112c92c <OSFlagPend+0x428>
8112c640:	10c000a0 	cmpeqi	r3,r2,2
8112c644:	1800031e 	bne	r3,zero,8112c654 <OSFlagPend+0x150>
8112c648:	108000e0 	cmpeqi	r2,r2,3
8112c64c:	10002f1e 	bne	r2,zero,8112c70c <OSFlagPend+0x208>
8112c650:	0000b606 	br	8112c92c <OSFlagPend+0x428>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
8112c654:	e0bffc17 	ldw	r2,-16(fp)
8112c658:	10c0020b 	ldhu	r3,8(r2)
8112c65c:	e0bffd0b 	ldhu	r2,-12(fp)
8112c660:	1884703a 	and	r2,r3,r2
8112c664:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112c668:	e0ffe80b 	ldhu	r3,-96(fp)
8112c66c:	e0bffd0b 	ldhu	r2,-12(fp)
8112c670:	1880171e 	bne	r3,r2,8112c6d0 <OSFlagPend+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112c674:	e0bfe403 	ldbu	r2,-112(fp)
8112c678:	10800058 	cmpnei	r2,r2,1
8112c67c:	1000091e 	bne	r2,zero,8112c6a4 <OSFlagPend+0x1a0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112c680:	e0bffc17 	ldw	r2,-16(fp)
8112c684:	1080020b 	ldhu	r2,8(r2)
8112c688:	1007883a 	mov	r3,r2
8112c68c:	e0bfe80b 	ldhu	r2,-96(fp)
8112c690:	0084303a 	nor	r2,zero,r2
8112c694:	1884703a 	and	r2,r3,r2
8112c698:	1007883a 	mov	r3,r2
8112c69c:	e0bffc17 	ldw	r2,-16(fp)
8112c6a0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112c6a4:	d0a08b17 	ldw	r2,-32212(gp)
8112c6a8:	e0ffe80b 	ldhu	r3,-96(fp)
8112c6ac:	10c00b0d 	sth	r3,44(r2)
8112c6b0:	e0bfe517 	ldw	r2,-108(fp)
8112c6b4:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c6b8:	e0bfe717 	ldw	r2,-100(fp)
8112c6bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112c6c0:	e0800217 	ldw	r2,8(fp)
8112c6c4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112c6c8:	e0bfe80b 	ldhu	r2,-96(fp)
8112c6cc:	0000f806 	br	8112cab0 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112c6d0:	e13ffd0b 	ldhu	r4,-12(fp)
8112c6d4:	e17ffe03 	ldbu	r5,-8(fp)
8112c6d8:	e0bfff0b 	ldhu	r2,-4(fp)
8112c6dc:	e0fff704 	addi	r3,fp,-36
8112c6e0:	d8800015 	stw	r2,0(sp)
8112c6e4:	280f883a 	mov	r7,r5
8112c6e8:	200d883a 	mov	r6,r4
8112c6ec:	180b883a 	mov	r5,r3
8112c6f0:	e13ffc17 	ldw	r4,-16(fp)
8112c6f4:	112cf940 	call	8112cf94 <OS_FlagBlock>
8112c6f8:	e0bfe517 	ldw	r2,-108(fp)
8112c6fc:	e0bfe915 	stw	r2,-92(fp)
8112c700:	e0bfe917 	ldw	r2,-92(fp)
8112c704:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112c708:	00009206 	br	8112c954 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
8112c70c:	e0bffc17 	ldw	r2,-16(fp)
8112c710:	10c0020b 	ldhu	r3,8(r2)
8112c714:	e0bffd0b 	ldhu	r2,-12(fp)
8112c718:	1884703a 	and	r2,r3,r2
8112c71c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112c720:	e0bfe80b 	ldhu	r2,-96(fp)
8112c724:	10001726 	beq	r2,zero,8112c784 <OSFlagPend+0x280>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112c728:	e0bfe403 	ldbu	r2,-112(fp)
8112c72c:	10800058 	cmpnei	r2,r2,1
8112c730:	1000091e 	bne	r2,zero,8112c758 <OSFlagPend+0x254>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112c734:	e0bffc17 	ldw	r2,-16(fp)
8112c738:	1080020b 	ldhu	r2,8(r2)
8112c73c:	1007883a 	mov	r3,r2
8112c740:	e0bfe80b 	ldhu	r2,-96(fp)
8112c744:	0084303a 	nor	r2,zero,r2
8112c748:	1884703a 	and	r2,r3,r2
8112c74c:	1007883a 	mov	r3,r2
8112c750:	e0bffc17 	ldw	r2,-16(fp)
8112c754:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112c758:	d0a08b17 	ldw	r2,-32212(gp)
8112c75c:	e0ffe80b 	ldhu	r3,-96(fp)
8112c760:	10c00b0d 	sth	r3,44(r2)
8112c764:	e0bfe517 	ldw	r2,-108(fp)
8112c768:	e0bfea15 	stw	r2,-88(fp)
8112c76c:	e0bfea17 	ldw	r2,-88(fp)
8112c770:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112c774:	e0800217 	ldw	r2,8(fp)
8112c778:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112c77c:	e0bfe80b 	ldhu	r2,-96(fp)
8112c780:	0000cb06 	br	8112cab0 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112c784:	e13ffd0b 	ldhu	r4,-12(fp)
8112c788:	e17ffe03 	ldbu	r5,-8(fp)
8112c78c:	e0bfff0b 	ldhu	r2,-4(fp)
8112c790:	e0fff704 	addi	r3,fp,-36
8112c794:	d8800015 	stw	r2,0(sp)
8112c798:	280f883a 	mov	r7,r5
8112c79c:	200d883a 	mov	r6,r4
8112c7a0:	180b883a 	mov	r5,r3
8112c7a4:	e13ffc17 	ldw	r4,-16(fp)
8112c7a8:	112cf940 	call	8112cf94 <OS_FlagBlock>
8112c7ac:	e0bfe517 	ldw	r2,-108(fp)
8112c7b0:	e0bfeb15 	stw	r2,-84(fp)
8112c7b4:	e0bfeb17 	ldw	r2,-84(fp)
8112c7b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112c7bc:	00006506 	br	8112c954 <OSFlagPend+0x450>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112c7c0:	e0bffc17 	ldw	r2,-16(fp)
8112c7c4:	1080020b 	ldhu	r2,8(r2)
8112c7c8:	0084303a 	nor	r2,zero,r2
8112c7cc:	1007883a 	mov	r3,r2
8112c7d0:	e0bffd0b 	ldhu	r2,-12(fp)
8112c7d4:	1884703a 	and	r2,r3,r2
8112c7d8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112c7dc:	e0ffe80b 	ldhu	r3,-96(fp)
8112c7e0:	e0bffd0b 	ldhu	r2,-12(fp)
8112c7e4:	1880151e 	bne	r3,r2,8112c83c <OSFlagPend+0x338>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112c7e8:	e0bfe403 	ldbu	r2,-112(fp)
8112c7ec:	10800058 	cmpnei	r2,r2,1
8112c7f0:	1000071e 	bne	r2,zero,8112c810 <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112c7f4:	e0bffc17 	ldw	r2,-16(fp)
8112c7f8:	10c0020b 	ldhu	r3,8(r2)
8112c7fc:	e0bfe80b 	ldhu	r2,-96(fp)
8112c800:	1884b03a 	or	r2,r3,r2
8112c804:	1007883a 	mov	r3,r2
8112c808:	e0bffc17 	ldw	r2,-16(fp)
8112c80c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112c810:	d0a08b17 	ldw	r2,-32212(gp)
8112c814:	e0ffe80b 	ldhu	r3,-96(fp)
8112c818:	10c00b0d 	sth	r3,44(r2)
8112c81c:	e0bfe517 	ldw	r2,-108(fp)
8112c820:	e0bfec15 	stw	r2,-80(fp)
8112c824:	e0bfec17 	ldw	r2,-80(fp)
8112c828:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112c82c:	e0800217 	ldw	r2,8(fp)
8112c830:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112c834:	e0bfe80b 	ldhu	r2,-96(fp)
8112c838:	00009d06 	br	8112cab0 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112c83c:	e13ffd0b 	ldhu	r4,-12(fp)
8112c840:	e17ffe03 	ldbu	r5,-8(fp)
8112c844:	e0bfff0b 	ldhu	r2,-4(fp)
8112c848:	e0fff704 	addi	r3,fp,-36
8112c84c:	d8800015 	stw	r2,0(sp)
8112c850:	280f883a 	mov	r7,r5
8112c854:	200d883a 	mov	r6,r4
8112c858:	180b883a 	mov	r5,r3
8112c85c:	e13ffc17 	ldw	r4,-16(fp)
8112c860:	112cf940 	call	8112cf94 <OS_FlagBlock>
8112c864:	e0bfe517 	ldw	r2,-108(fp)
8112c868:	e0bfed15 	stw	r2,-76(fp)
8112c86c:	e0bfed17 	ldw	r2,-76(fp)
8112c870:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112c874:	00003706 	br	8112c954 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112c878:	e0bffc17 	ldw	r2,-16(fp)
8112c87c:	1080020b 	ldhu	r2,8(r2)
8112c880:	0084303a 	nor	r2,zero,r2
8112c884:	1007883a 	mov	r3,r2
8112c888:	e0bffd0b 	ldhu	r2,-12(fp)
8112c88c:	1884703a 	and	r2,r3,r2
8112c890:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112c894:	e0bfe80b 	ldhu	r2,-96(fp)
8112c898:	10001526 	beq	r2,zero,8112c8f0 <OSFlagPend+0x3ec>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112c89c:	e0bfe403 	ldbu	r2,-112(fp)
8112c8a0:	10800058 	cmpnei	r2,r2,1
8112c8a4:	1000071e 	bne	r2,zero,8112c8c4 <OSFlagPend+0x3c0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112c8a8:	e0bffc17 	ldw	r2,-16(fp)
8112c8ac:	10c0020b 	ldhu	r3,8(r2)
8112c8b0:	e0bfe80b 	ldhu	r2,-96(fp)
8112c8b4:	1884b03a 	or	r2,r3,r2
8112c8b8:	1007883a 	mov	r3,r2
8112c8bc:	e0bffc17 	ldw	r2,-16(fp)
8112c8c0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112c8c4:	d0a08b17 	ldw	r2,-32212(gp)
8112c8c8:	e0ffe80b 	ldhu	r3,-96(fp)
8112c8cc:	10c00b0d 	sth	r3,44(r2)
8112c8d0:	e0bfe517 	ldw	r2,-108(fp)
8112c8d4:	e0bfee15 	stw	r2,-72(fp)
8112c8d8:	e0bfee17 	ldw	r2,-72(fp)
8112c8dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112c8e0:	e0800217 	ldw	r2,8(fp)
8112c8e4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112c8e8:	e0bfe80b 	ldhu	r2,-96(fp)
8112c8ec:	00007006 	br	8112cab0 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112c8f0:	e13ffd0b 	ldhu	r4,-12(fp)
8112c8f4:	e17ffe03 	ldbu	r5,-8(fp)
8112c8f8:	e0bfff0b 	ldhu	r2,-4(fp)
8112c8fc:	e0fff704 	addi	r3,fp,-36
8112c900:	d8800015 	stw	r2,0(sp)
8112c904:	280f883a 	mov	r7,r5
8112c908:	200d883a 	mov	r6,r4
8112c90c:	180b883a 	mov	r5,r3
8112c910:	e13ffc17 	ldw	r4,-16(fp)
8112c914:	112cf940 	call	8112cf94 <OS_FlagBlock>
8112c918:	e0bfe517 	ldw	r2,-108(fp)
8112c91c:	e0bfef15 	stw	r2,-68(fp)
8112c920:	e0bfef17 	ldw	r2,-68(fp)
8112c924:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112c928:	00000a06 	br	8112c954 <OSFlagPend+0x450>
8112c92c:	e0bfe517 	ldw	r2,-108(fp)
8112c930:	e0bff015 	stw	r2,-64(fp)
8112c934:	e0bff017 	ldw	r2,-64(fp)
8112c938:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112c93c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
8112c940:	e0800217 	ldw	r2,8(fp)
8112c944:	00c01bc4 	movi	r3,111
8112c948:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
8112c94c:	e0bfe80b 	ldhu	r2,-96(fp)
8112c950:	00005706 	br	8112cab0 <OSFlagPend+0x5ac>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
8112c954:	112b2f40 	call	8112b2f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c958:	0005303a 	rdctl	r2,status
8112c95c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c960:	e0fff117 	ldw	r3,-60(fp)
8112c964:	00bfff84 	movi	r2,-2
8112c968:	1884703a 	and	r2,r3,r2
8112c96c:	1001703a 	wrctl	status,r2
  
  return context;
8112c970:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
8112c974:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
8112c978:	d0a08b17 	ldw	r2,-32212(gp)
8112c97c:	10800c43 	ldbu	r2,49(r2)
8112c980:	10803fcc 	andi	r2,r2,255
8112c984:	10001c26 	beq	r2,zero,8112c9f8 <OSFlagPend+0x4f4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
8112c988:	d0a08b17 	ldw	r2,-32212(gp)
8112c98c:	10800c43 	ldbu	r2,49(r2)
8112c990:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112c994:	d0a08b17 	ldw	r2,-32212(gp)
8112c998:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
8112c99c:	e0bff704 	addi	r2,fp,-36
8112c9a0:	1009883a 	mov	r4,r2
8112c9a4:	112d2e00 	call	8112d2e0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
8112c9a8:	d0a08b17 	ldw	r2,-32212(gp)
8112c9ac:	10000c05 	stb	zero,48(r2)
8112c9b0:	e0bfe517 	ldw	r2,-108(fp)
8112c9b4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c9b8:	e0bff217 	ldw	r2,-56(fp)
8112c9bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
8112c9c0:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
8112c9c4:	e0bff303 	ldbu	r2,-52(fp)
8112c9c8:	108000a0 	cmpeqi	r2,r2,2
8112c9cc:	10000426 	beq	r2,zero,8112c9e0 <OSFlagPend+0x4dc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
8112c9d0:	e0800217 	ldw	r2,8(fp)
8112c9d4:	00c00384 	movi	r3,14
8112c9d8:	10c00005 	stb	r3,0(r2)
                 break;
8112c9dc:	00000406 	br	8112c9f0 <OSFlagPend+0x4ec>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
8112c9e0:	e0800217 	ldw	r2,8(fp)
8112c9e4:	00c00284 	movi	r3,10
8112c9e8:	10c00005 	stb	r3,0(r2)
                 break;
8112c9ec:	0001883a 	nop
        }
        return (flags_rdy);
8112c9f0:	e0bfe80b 	ldhu	r2,-96(fp)
8112c9f4:	00002e06 	br	8112cab0 <OSFlagPend+0x5ac>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
8112c9f8:	d0a08b17 	ldw	r2,-32212(gp)
8112c9fc:	10800b0b 	ldhu	r2,44(r2)
8112ca00:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
8112ca04:	e0bfe403 	ldbu	r2,-112(fp)
8112ca08:	10800058 	cmpnei	r2,r2,1
8112ca0c:	1000211e 	bne	r2,zero,8112ca94 <OSFlagPend+0x590>
        switch (wait_type) {
8112ca10:	e0bffe03 	ldbu	r2,-8(fp)
8112ca14:	10001616 	blt	r2,zero,8112ca70 <OSFlagPend+0x56c>
8112ca18:	10c00090 	cmplti	r3,r2,2
8112ca1c:	18000c1e 	bne	r3,zero,8112ca50 <OSFlagPend+0x54c>
8112ca20:	10800108 	cmpgei	r2,r2,4
8112ca24:	1000121e 	bne	r2,zero,8112ca70 <OSFlagPend+0x56c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
8112ca28:	e0bffc17 	ldw	r2,-16(fp)
8112ca2c:	1080020b 	ldhu	r2,8(r2)
8112ca30:	1007883a 	mov	r3,r2
8112ca34:	e0bfe80b 	ldhu	r2,-96(fp)
8112ca38:	0084303a 	nor	r2,zero,r2
8112ca3c:	1884703a 	and	r2,r3,r2
8112ca40:	1007883a 	mov	r3,r2
8112ca44:	e0bffc17 	ldw	r2,-16(fp)
8112ca48:	10c0020d 	sth	r3,8(r2)
                 break;
8112ca4c:	00001106 	br	8112ca94 <OSFlagPend+0x590>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
8112ca50:	e0bffc17 	ldw	r2,-16(fp)
8112ca54:	10c0020b 	ldhu	r3,8(r2)
8112ca58:	e0bfe80b 	ldhu	r2,-96(fp)
8112ca5c:	1884b03a 	or	r2,r3,r2
8112ca60:	1007883a 	mov	r3,r2
8112ca64:	e0bffc17 	ldw	r2,-16(fp)
8112ca68:	10c0020d 	sth	r3,8(r2)
                 break;
8112ca6c:	00000906 	br	8112ca94 <OSFlagPend+0x590>
8112ca70:	e0bfe517 	ldw	r2,-108(fp)
8112ca74:	e0bff415 	stw	r2,-48(fp)
8112ca78:	e0bff417 	ldw	r2,-48(fp)
8112ca7c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112ca80:	e0800217 	ldw	r2,8(fp)
8112ca84:	00c01bc4 	movi	r3,111
8112ca88:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112ca8c:	0005883a 	mov	r2,zero
8112ca90:	00000706 	br	8112cab0 <OSFlagPend+0x5ac>
8112ca94:	e0bfe517 	ldw	r2,-108(fp)
8112ca98:	e0bff515 	stw	r2,-44(fp)
8112ca9c:	e0bff517 	ldw	r2,-44(fp)
8112caa0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
8112caa4:	e0800217 	ldw	r2,8(fp)
8112caa8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
8112caac:	e0bfe80b 	ldhu	r2,-96(fp)
}
8112cab0:	e037883a 	mov	sp,fp
8112cab4:	dfc00117 	ldw	ra,4(sp)
8112cab8:	df000017 	ldw	fp,0(sp)
8112cabc:	dec00204 	addi	sp,sp,8
8112cac0:	f800283a 	ret

8112cac4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
8112cac4:	defffb04 	addi	sp,sp,-20
8112cac8:	de00012e 	bgeu	sp,et,8112cad0 <OSFlagPendGetFlagsRdy+0xc>
8112cacc:	003b68fa 	trap	3
8112cad0:	df000415 	stw	fp,16(sp)
8112cad4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112cad8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cadc:	0005303a 	rdctl	r2,status
8112cae0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cae4:	e0fffe17 	ldw	r3,-8(fp)
8112cae8:	00bfff84 	movi	r2,-2
8112caec:	1884703a 	and	r2,r3,r2
8112caf0:	1001703a 	wrctl	status,r2
  
  return context;
8112caf4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112caf8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
8112cafc:	d0a08b17 	ldw	r2,-32212(gp)
8112cb00:	10800b0b 	ldhu	r2,44(r2)
8112cb04:	e0bffd0d 	sth	r2,-12(fp)
8112cb08:	e0bffc17 	ldw	r2,-16(fp)
8112cb0c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cb10:	e0bfff17 	ldw	r2,-4(fp)
8112cb14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
8112cb18:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112cb1c:	e037883a 	mov	sp,fp
8112cb20:	df000017 	ldw	fp,0(sp)
8112cb24:	dec00104 	addi	sp,sp,4
8112cb28:	f800283a 	ret

8112cb2c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
8112cb2c:	deffef04 	addi	sp,sp,-68
8112cb30:	de00012e 	bgeu	sp,et,8112cb38 <OSFlagPost+0xc>
8112cb34:	003b68fa 	trap	3
8112cb38:	dfc01015 	stw	ra,64(sp)
8112cb3c:	df000f15 	stw	fp,60(sp)
8112cb40:	df000f04 	addi	fp,sp,60
8112cb44:	e13ffc15 	stw	r4,-16(fp)
8112cb48:	2807883a 	mov	r3,r5
8112cb4c:	3005883a 	mov	r2,r6
8112cb50:	e1ffff15 	stw	r7,-4(fp)
8112cb54:	e0fffd0d 	sth	r3,-12(fp)
8112cb58:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
8112cb5c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112cb60:	e0bfff17 	ldw	r2,-4(fp)
8112cb64:	1000021e 	bne	r2,zero,8112cb70 <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
8112cb68:	0005883a 	mov	r2,zero
8112cb6c:	0000d106 	br	8112ceb4 <OSFlagPost+0x388>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
8112cb70:	e0bffc17 	ldw	r2,-16(fp)
8112cb74:	1000051e 	bne	r2,zero,8112cb8c <OSFlagPost+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112cb78:	e0bfff17 	ldw	r2,-4(fp)
8112cb7c:	00c01b84 	movi	r3,110
8112cb80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112cb84:	0005883a 	mov	r2,zero
8112cb88:	0000ca06 	br	8112ceb4 <OSFlagPost+0x388>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
8112cb8c:	e0bffc17 	ldw	r2,-16(fp)
8112cb90:	10800003 	ldbu	r2,0(r2)
8112cb94:	10803fcc 	andi	r2,r2,255
8112cb98:	10800160 	cmpeqi	r2,r2,5
8112cb9c:	1000051e 	bne	r2,zero,8112cbb4 <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
8112cba0:	e0bfff17 	ldw	r2,-4(fp)
8112cba4:	00c00044 	movi	r3,1
8112cba8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112cbac:	0005883a 	mov	r2,zero
8112cbb0:	0000c006 	br	8112ceb4 <OSFlagPost+0x388>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cbb4:	0005303a 	rdctl	r2,status
8112cbb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cbbc:	e0fffb17 	ldw	r3,-20(fp)
8112cbc0:	00bfff84 	movi	r2,-2
8112cbc4:	1884703a 	and	r2,r3,r2
8112cbc8:	1001703a 	wrctl	status,r2
  
  return context;
8112cbcc:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112cbd0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
8112cbd4:	e0bffe03 	ldbu	r2,-8(fp)
8112cbd8:	10000326 	beq	r2,zero,8112cbe8 <OSFlagPost+0xbc>
8112cbdc:	10800060 	cmpeqi	r2,r2,1
8112cbe0:	10000b1e 	bne	r2,zero,8112cc10 <OSFlagPost+0xe4>
8112cbe4:	00001206 	br	8112cc30 <OSFlagPost+0x104>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
8112cbe8:	e0bffc17 	ldw	r2,-16(fp)
8112cbec:	1080020b 	ldhu	r2,8(r2)
8112cbf0:	1007883a 	mov	r3,r2
8112cbf4:	e0bffd0b 	ldhu	r2,-12(fp)
8112cbf8:	0084303a 	nor	r2,zero,r2
8112cbfc:	1884703a 	and	r2,r3,r2
8112cc00:	1007883a 	mov	r3,r2
8112cc04:	e0bffc17 	ldw	r2,-16(fp)
8112cc08:	10c0020d 	sth	r3,8(r2)
             break;
8112cc0c:	00001106 	br	8112cc54 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
8112cc10:	e0bffc17 	ldw	r2,-16(fp)
8112cc14:	10c0020b 	ldhu	r3,8(r2)
8112cc18:	e0bffd0b 	ldhu	r2,-12(fp)
8112cc1c:	1884b03a 	or	r2,r3,r2
8112cc20:	1007883a 	mov	r3,r2
8112cc24:	e0bffc17 	ldw	r2,-16(fp)
8112cc28:	10c0020d 	sth	r3,8(r2)
             break;
8112cc2c:	00000906 	br	8112cc54 <OSFlagPost+0x128>
8112cc30:	e0bff317 	ldw	r2,-52(fp)
8112cc34:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cc38:	e0bff417 	ldw	r2,-48(fp)
8112cc3c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
8112cc40:	e0bfff17 	ldw	r2,-4(fp)
8112cc44:	00c01c44 	movi	r3,113
8112cc48:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
8112cc4c:	0005883a 	mov	r2,zero
8112cc50:	00009806 	br	8112ceb4 <OSFlagPost+0x388>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
8112cc54:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112cc58:	e0bffc17 	ldw	r2,-16(fp)
8112cc5c:	10800117 	ldw	r2,4(r2)
8112cc60:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112cc64:	00007706 	br	8112ce44 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
8112cc68:	e0bff117 	ldw	r2,-60(fp)
8112cc6c:	10800483 	ldbu	r2,18(r2)
8112cc70:	10803fcc 	andi	r2,r2,255
8112cc74:	10c00060 	cmpeqi	r3,r2,1
8112cc78:	18004a1e 	bne	r3,zero,8112cda4 <OSFlagPost+0x278>
8112cc7c:	10c00088 	cmpgei	r3,r2,2
8112cc80:	1800021e 	bne	r3,zero,8112cc8c <OSFlagPost+0x160>
8112cc84:	10002f26 	beq	r2,zero,8112cd44 <OSFlagPost+0x218>
8112cc88:	00005b06 	br	8112cdf8 <OSFlagPost+0x2cc>
8112cc8c:	10c000a0 	cmpeqi	r3,r2,2
8112cc90:	1800031e 	bne	r3,zero,8112cca0 <OSFlagPost+0x174>
8112cc94:	108000e0 	cmpeqi	r2,r2,3
8112cc98:	1000171e 	bne	r2,zero,8112ccf8 <OSFlagPost+0x1cc>
8112cc9c:	00005606 	br	8112cdf8 <OSFlagPost+0x2cc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112cca0:	e0bffc17 	ldw	r2,-16(fp)
8112cca4:	10c0020b 	ldhu	r3,8(r2)
8112cca8:	e0bff117 	ldw	r2,-60(fp)
8112ccac:	1080040b 	ldhu	r2,16(r2)
8112ccb0:	1884703a 	and	r2,r3,r2
8112ccb4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112ccb8:	e0bff117 	ldw	r2,-60(fp)
8112ccbc:	1080040b 	ldhu	r2,16(r2)
8112ccc0:	10ffffcc 	andi	r3,r2,65535
8112ccc4:	e0bff60b 	ldhu	r2,-40(fp)
8112ccc8:	1880541e 	bne	r3,r2,8112ce1c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112cccc:	e0bff60b 	ldhu	r2,-40(fp)
8112ccd0:	100b883a 	mov	r5,r2
8112ccd4:	e13ff117 	ldw	r4,-60(fp)
8112ccd8:	112d1e40 	call	8112d1e4 <OS_FlagTaskRdy>
8112ccdc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112cce0:	e0bff683 	ldbu	r2,-38(fp)
8112cce4:	10800058 	cmpnei	r2,r2,1
8112cce8:	10004c1e 	bne	r2,zero,8112ce1c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112ccec:	00800044 	movi	r2,1
8112ccf0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112ccf4:	00004906 	br	8112ce1c <OSFlagPost+0x2f0>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112ccf8:	e0bffc17 	ldw	r2,-16(fp)
8112ccfc:	10c0020b 	ldhu	r3,8(r2)
8112cd00:	e0bff117 	ldw	r2,-60(fp)
8112cd04:	1080040b 	ldhu	r2,16(r2)
8112cd08:	1884703a 	and	r2,r3,r2
8112cd0c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112cd10:	e0bff60b 	ldhu	r2,-40(fp)
8112cd14:	10004326 	beq	r2,zero,8112ce24 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112cd18:	e0bff60b 	ldhu	r2,-40(fp)
8112cd1c:	100b883a 	mov	r5,r2
8112cd20:	e13ff117 	ldw	r4,-60(fp)
8112cd24:	112d1e40 	call	8112d1e4 <OS_FlagTaskRdy>
8112cd28:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112cd2c:	e0bff683 	ldbu	r2,-38(fp)
8112cd30:	10800058 	cmpnei	r2,r2,1
8112cd34:	10003b1e 	bne	r2,zero,8112ce24 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112cd38:	00800044 	movi	r2,1
8112cd3c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112cd40:	00003806 	br	8112ce24 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112cd44:	e0bffc17 	ldw	r2,-16(fp)
8112cd48:	1080020b 	ldhu	r2,8(r2)
8112cd4c:	0084303a 	nor	r2,zero,r2
8112cd50:	1007883a 	mov	r3,r2
8112cd54:	e0bff117 	ldw	r2,-60(fp)
8112cd58:	1080040b 	ldhu	r2,16(r2)
8112cd5c:	1884703a 	and	r2,r3,r2
8112cd60:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112cd64:	e0bff117 	ldw	r2,-60(fp)
8112cd68:	1080040b 	ldhu	r2,16(r2)
8112cd6c:	10ffffcc 	andi	r3,r2,65535
8112cd70:	e0bff60b 	ldhu	r2,-40(fp)
8112cd74:	18802d1e 	bne	r3,r2,8112ce2c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112cd78:	e0bff60b 	ldhu	r2,-40(fp)
8112cd7c:	100b883a 	mov	r5,r2
8112cd80:	e13ff117 	ldw	r4,-60(fp)
8112cd84:	112d1e40 	call	8112d1e4 <OS_FlagTaskRdy>
8112cd88:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112cd8c:	e0bff683 	ldbu	r2,-38(fp)
8112cd90:	10800058 	cmpnei	r2,r2,1
8112cd94:	1000251e 	bne	r2,zero,8112ce2c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112cd98:	00800044 	movi	r2,1
8112cd9c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112cda0:	00002206 	br	8112ce2c <OSFlagPost+0x300>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112cda4:	e0bffc17 	ldw	r2,-16(fp)
8112cda8:	1080020b 	ldhu	r2,8(r2)
8112cdac:	0084303a 	nor	r2,zero,r2
8112cdb0:	1007883a 	mov	r3,r2
8112cdb4:	e0bff117 	ldw	r2,-60(fp)
8112cdb8:	1080040b 	ldhu	r2,16(r2)
8112cdbc:	1884703a 	and	r2,r3,r2
8112cdc0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112cdc4:	e0bff60b 	ldhu	r2,-40(fp)
8112cdc8:	10001a26 	beq	r2,zero,8112ce34 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112cdcc:	e0bff60b 	ldhu	r2,-40(fp)
8112cdd0:	100b883a 	mov	r5,r2
8112cdd4:	e13ff117 	ldw	r4,-60(fp)
8112cdd8:	112d1e40 	call	8112d1e4 <OS_FlagTaskRdy>
8112cddc:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112cde0:	e0bff683 	ldbu	r2,-38(fp)
8112cde4:	10800058 	cmpnei	r2,r2,1
8112cde8:	1000121e 	bne	r2,zero,8112ce34 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112cdec:	00800044 	movi	r2,1
8112cdf0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112cdf4:	00000f06 	br	8112ce34 <OSFlagPost+0x308>
8112cdf8:	e0bff317 	ldw	r2,-52(fp)
8112cdfc:	e0bff515 	stw	r2,-44(fp)
8112ce00:	e0bff517 	ldw	r2,-44(fp)
8112ce04:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112ce08:	e0bfff17 	ldw	r2,-4(fp)
8112ce0c:	00c01bc4 	movi	r3,111
8112ce10:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112ce14:	0005883a 	mov	r2,zero
8112ce18:	00002606 	br	8112ceb4 <OSFlagPost+0x388>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112ce1c:	0001883a 	nop
8112ce20:	00000506 	br	8112ce38 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112ce24:	0001883a 	nop
8112ce28:	00000306 	br	8112ce38 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112ce2c:	0001883a 	nop
8112ce30:	00000106 	br	8112ce38 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112ce34:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
8112ce38:	e0bff117 	ldw	r2,-60(fp)
8112ce3c:	10800017 	ldw	r2,0(r2)
8112ce40:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112ce44:	e0bff117 	ldw	r2,-60(fp)
8112ce48:	103f871e 	bne	r2,zero,8112cc68 <__reset+0xfb10cc68>
8112ce4c:	e0bff317 	ldw	r2,-52(fp)
8112ce50:	e0bff715 	stw	r2,-36(fp)
8112ce54:	e0bff717 	ldw	r2,-36(fp)
8112ce58:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
8112ce5c:	e0bff203 	ldbu	r2,-56(fp)
8112ce60:	10800058 	cmpnei	r2,r2,1
8112ce64:	1000011e 	bne	r2,zero,8112ce6c <OSFlagPost+0x340>
        OS_Sched();
8112ce68:	112b2f40 	call	8112b2f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ce6c:	0005303a 	rdctl	r2,status
8112ce70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ce74:	e0fffa17 	ldw	r3,-24(fp)
8112ce78:	00bfff84 	movi	r2,-2
8112ce7c:	1884703a 	and	r2,r3,r2
8112ce80:	1001703a 	wrctl	status,r2
  
  return context;
8112ce84:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
8112ce88:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
8112ce8c:	e0bffc17 	ldw	r2,-16(fp)
8112ce90:	1080020b 	ldhu	r2,8(r2)
8112ce94:	e0bff90d 	sth	r2,-28(fp)
8112ce98:	e0bff317 	ldw	r2,-52(fp)
8112ce9c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cea0:	e0bff817 	ldw	r2,-32(fp)
8112cea4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
8112cea8:	e0bfff17 	ldw	r2,-4(fp)
8112ceac:	10000005 	stb	zero,0(r2)
    return (flags_cur);
8112ceb0:	e0bff90b 	ldhu	r2,-28(fp)
}
8112ceb4:	e037883a 	mov	sp,fp
8112ceb8:	dfc00117 	ldw	ra,4(sp)
8112cebc:	df000017 	ldw	fp,0(sp)
8112cec0:	dec00204 	addi	sp,sp,8
8112cec4:	f800283a 	ret

8112cec8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
8112cec8:	defff904 	addi	sp,sp,-28
8112cecc:	de00012e 	bgeu	sp,et,8112ced4 <OSFlagQuery+0xc>
8112ced0:	003b68fa 	trap	3
8112ced4:	df000615 	stw	fp,24(sp)
8112ced8:	df000604 	addi	fp,sp,24
8112cedc:	e13ffe15 	stw	r4,-8(fp)
8112cee0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
8112cee4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
8112cee8:	e0bfff17 	ldw	r2,-4(fp)
8112ceec:	1000021e 	bne	r2,zero,8112cef8 <OSFlagQuery+0x30>
        return ((OS_FLAGS)0);
8112cef0:	0005883a 	mov	r2,zero
8112cef4:	00002306 	br	8112cf84 <OSFlagQuery+0xbc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
8112cef8:	e0bffe17 	ldw	r2,-8(fp)
8112cefc:	1000051e 	bne	r2,zero,8112cf14 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112cf00:	e0bfff17 	ldw	r2,-4(fp)
8112cf04:	00c01b84 	movi	r3,110
8112cf08:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112cf0c:	0005883a 	mov	r2,zero
8112cf10:	00001c06 	br	8112cf84 <OSFlagQuery+0xbc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
8112cf14:	e0bffe17 	ldw	r2,-8(fp)
8112cf18:	10800003 	ldbu	r2,0(r2)
8112cf1c:	10803fcc 	andi	r2,r2,255
8112cf20:	10800160 	cmpeqi	r2,r2,5
8112cf24:	1000051e 	bne	r2,zero,8112cf3c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112cf28:	e0bfff17 	ldw	r2,-4(fp)
8112cf2c:	00c00044 	movi	r3,1
8112cf30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112cf34:	0005883a 	mov	r2,zero
8112cf38:	00001206 	br	8112cf84 <OSFlagQuery+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cf3c:	0005303a 	rdctl	r2,status
8112cf40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cf44:	e0fffc17 	ldw	r3,-16(fp)
8112cf48:	00bfff84 	movi	r2,-2
8112cf4c:	1884703a 	and	r2,r3,r2
8112cf50:	1001703a 	wrctl	status,r2
  
  return context;
8112cf54:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112cf58:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
8112cf5c:	e0bffe17 	ldw	r2,-8(fp)
8112cf60:	1080020b 	ldhu	r2,8(r2)
8112cf64:	e0bffb0d 	sth	r2,-20(fp)
8112cf68:	e0bffa17 	ldw	r2,-24(fp)
8112cf6c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cf70:	e0bffd17 	ldw	r2,-12(fp)
8112cf74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112cf78:	e0bfff17 	ldw	r2,-4(fp)
8112cf7c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
8112cf80:	e0bffb0b 	ldhu	r2,-20(fp)
}
8112cf84:	e037883a 	mov	sp,fp
8112cf88:	df000017 	ldw	fp,0(sp)
8112cf8c:	dec00104 	addi	sp,sp,4
8112cf90:	f800283a 	ret

8112cf94 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
8112cf94:	defff804 	addi	sp,sp,-32
8112cf98:	de00012e 	bgeu	sp,et,8112cfa0 <OS_FlagBlock+0xc>
8112cf9c:	003b68fa 	trap	3
8112cfa0:	df000715 	stw	fp,28(sp)
8112cfa4:	df000704 	addi	fp,sp,28
8112cfa8:	e13ffb15 	stw	r4,-20(fp)
8112cfac:	e17ffc15 	stw	r5,-16(fp)
8112cfb0:	3009883a 	mov	r4,r6
8112cfb4:	3807883a 	mov	r3,r7
8112cfb8:	e0800117 	ldw	r2,4(fp)
8112cfbc:	e13ffd0d 	sth	r4,-12(fp)
8112cfc0:	e0fffe05 	stb	r3,-8(fp)
8112cfc4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
8112cfc8:	d0a08b17 	ldw	r2,-32212(gp)
8112cfcc:	d0e08b17 	ldw	r3,-32212(gp)
8112cfd0:	18c00c03 	ldbu	r3,48(r3)
8112cfd4:	18c00814 	ori	r3,r3,32
8112cfd8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
8112cfdc:	d0a08b17 	ldw	r2,-32212(gp)
8112cfe0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
8112cfe4:	d0a08b17 	ldw	r2,-32212(gp)
8112cfe8:	e0ffff0b 	ldhu	r3,-4(fp)
8112cfec:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
8112cff0:	d0a08b17 	ldw	r2,-32212(gp)
8112cff4:	e0fffc17 	ldw	r3,-16(fp)
8112cff8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
8112cffc:	e0bffc17 	ldw	r2,-16(fp)
8112d000:	e0fffd0b 	ldhu	r3,-12(fp)
8112d004:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
8112d008:	e0bffc17 	ldw	r2,-16(fp)
8112d00c:	e0fffe03 	ldbu	r3,-8(fp)
8112d010:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
8112d014:	d0e08b17 	ldw	r3,-32212(gp)
8112d018:	e0bffc17 	ldw	r2,-16(fp)
8112d01c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
8112d020:	e0bffb17 	ldw	r2,-20(fp)
8112d024:	10c00117 	ldw	r3,4(r2)
8112d028:	e0bffc17 	ldw	r2,-16(fp)
8112d02c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
8112d030:	e0bffc17 	ldw	r2,-16(fp)
8112d034:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
8112d038:	e0bffc17 	ldw	r2,-16(fp)
8112d03c:	e0fffb17 	ldw	r3,-20(fp)
8112d040:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112d044:	e0bffb17 	ldw	r2,-20(fp)
8112d048:	10800117 	ldw	r2,4(r2)
8112d04c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
8112d050:	e0bff917 	ldw	r2,-28(fp)
8112d054:	10000326 	beq	r2,zero,8112d064 <OS_FlagBlock+0xd0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
8112d058:	e0bff917 	ldw	r2,-28(fp)
8112d05c:	e0fffc17 	ldw	r3,-16(fp)
8112d060:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
8112d064:	e0bffb17 	ldw	r2,-20(fp)
8112d068:	e0fffc17 	ldw	r3,-16(fp)
8112d06c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
8112d070:	d0a08b17 	ldw	r2,-32212(gp)
8112d074:	10800d03 	ldbu	r2,52(r2)
8112d078:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112d07c:	e0fffa03 	ldbu	r3,-24(fp)
8112d080:	e13ffa03 	ldbu	r4,-24(fp)
8112d084:	d0a08744 	addi	r2,gp,-32227
8112d088:	2085883a 	add	r2,r4,r2
8112d08c:	10800003 	ldbu	r2,0(r2)
8112d090:	1009883a 	mov	r4,r2
8112d094:	d0a08b17 	ldw	r2,-32212(gp)
8112d098:	10800d43 	ldbu	r2,53(r2)
8112d09c:	0084303a 	nor	r2,zero,r2
8112d0a0:	2084703a 	and	r2,r4,r2
8112d0a4:	1009883a 	mov	r4,r2
8112d0a8:	d0a08744 	addi	r2,gp,-32227
8112d0ac:	1885883a 	add	r2,r3,r2
8112d0b0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
8112d0b4:	e0fffa03 	ldbu	r3,-24(fp)
8112d0b8:	d0a08744 	addi	r2,gp,-32227
8112d0bc:	1885883a 	add	r2,r3,r2
8112d0c0:	10800003 	ldbu	r2,0(r2)
8112d0c4:	10803fcc 	andi	r2,r2,255
8112d0c8:	1000071e 	bne	r2,zero,8112d0e8 <OS_FlagBlock+0x154>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112d0cc:	d0a08b17 	ldw	r2,-32212(gp)
8112d0d0:	10800d83 	ldbu	r2,54(r2)
8112d0d4:	0084303a 	nor	r2,zero,r2
8112d0d8:	1007883a 	mov	r3,r2
8112d0dc:	d0a08703 	ldbu	r2,-32228(gp)
8112d0e0:	1884703a 	and	r2,r3,r2
8112d0e4:	d0a08705 	stb	r2,-32228(gp)
    }
}
8112d0e8:	0001883a 	nop
8112d0ec:	e037883a 	mov	sp,fp
8112d0f0:	df000017 	ldw	fp,0(sp)
8112d0f4:	dec00104 	addi	sp,sp,4
8112d0f8:	f800283a 	ret

8112d0fc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
8112d0fc:	defffb04 	addi	sp,sp,-20
8112d100:	de00012e 	bgeu	sp,et,8112d108 <OS_FlagInit+0xc>
8112d104:	003b68fa 	trap	3
8112d108:	dfc00415 	stw	ra,16(sp)
8112d10c:	df000315 	stw	fp,12(sp)
8112d110:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
8112d114:	0140dc04 	movi	r5,880
8112d118:	01204574 	movhi	r4,33045
8112d11c:	21305d04 	addi	r4,r4,-16012
8112d120:	112b2280 	call	8112b228 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
8112d124:	00a04574 	movhi	r2,33045
8112d128:	10b05d04 	addi	r2,r2,-16012
8112d12c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
8112d130:	00a04574 	movhi	r2,33045
8112d134:	10b06804 	addi	r2,r2,-15968
8112d138:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112d13c:	e03ffd0d 	sth	zero,-12(fp)
8112d140:	00001306 	br	8112d190 <OS_FlagInit+0x94>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112d144:	e0bffe17 	ldw	r2,-8(fp)
8112d148:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
8112d14c:	e0bffe17 	ldw	r2,-8(fp)
8112d150:	e0ffff17 	ldw	r3,-4(fp)
8112d154:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
8112d158:	e0bffe17 	ldw	r2,-8(fp)
8112d15c:	00c00fc4 	movi	r3,63
8112d160:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112d164:	e0bffe17 	ldw	r2,-8(fp)
8112d168:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
8112d16c:	e0bffe17 	ldw	r2,-8(fp)
8112d170:	10800b04 	addi	r2,r2,44
8112d174:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
8112d178:	e0bfff17 	ldw	r2,-4(fp)
8112d17c:	10800b04 	addi	r2,r2,44
8112d180:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112d184:	e0bffd0b 	ldhu	r2,-12(fp)
8112d188:	10800044 	addi	r2,r2,1
8112d18c:	e0bffd0d 	sth	r2,-12(fp)
8112d190:	e0bffd0b 	ldhu	r2,-12(fp)
8112d194:	108004f0 	cmpltui	r2,r2,19
8112d198:	103fea1e 	bne	r2,zero,8112d144 <__reset+0xfb10d144>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112d19c:	e0bffe17 	ldw	r2,-8(fp)
8112d1a0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
8112d1a4:	e0bffe17 	ldw	r2,-8(fp)
8112d1a8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
8112d1ac:	e0bffe17 	ldw	r2,-8(fp)
8112d1b0:	00c00fc4 	movi	r3,63
8112d1b4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112d1b8:	e0bffe17 	ldw	r2,-8(fp)
8112d1bc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
8112d1c0:	00a04574 	movhi	r2,33045
8112d1c4:	10b05d04 	addi	r2,r2,-16012
8112d1c8:	d0a08f15 	stw	r2,-32196(gp)
#endif
}
8112d1cc:	0001883a 	nop
8112d1d0:	e037883a 	mov	sp,fp
8112d1d4:	dfc00117 	ldw	ra,4(sp)
8112d1d8:	df000017 	ldw	fp,0(sp)
8112d1dc:	dec00204 	addi	sp,sp,8
8112d1e0:	f800283a 	ret

8112d1e4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
8112d1e4:	defffa04 	addi	sp,sp,-24
8112d1e8:	de00012e 	bgeu	sp,et,8112d1f0 <OS_FlagTaskRdy+0xc>
8112d1ec:	003b68fa 	trap	3
8112d1f0:	dfc00515 	stw	ra,20(sp)
8112d1f4:	df000415 	stw	fp,16(sp)
8112d1f8:	df000404 	addi	fp,sp,16
8112d1fc:	e13ffe15 	stw	r4,-8(fp)
8112d200:	2805883a 	mov	r2,r5
8112d204:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
8112d208:	e0bffe17 	ldw	r2,-8(fp)
8112d20c:	10800217 	ldw	r2,8(r2)
8112d210:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
8112d214:	e0bffd17 	ldw	r2,-12(fp)
8112d218:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
8112d21c:	e0bffd17 	ldw	r2,-12(fp)
8112d220:	e0ffff0b 	ldhu	r3,-4(fp)
8112d224:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
8112d228:	e0bffd17 	ldw	r2,-12(fp)
8112d22c:	10c00c03 	ldbu	r3,48(r2)
8112d230:	00bff7c4 	movi	r2,-33
8112d234:	1884703a 	and	r2,r3,r2
8112d238:	1007883a 	mov	r3,r2
8112d23c:	e0bffd17 	ldw	r2,-12(fp)
8112d240:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
8112d244:	e0bffd17 	ldw	r2,-12(fp)
8112d248:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
8112d24c:	e0bffd17 	ldw	r2,-12(fp)
8112d250:	10800c03 	ldbu	r2,48(r2)
8112d254:	10803fcc 	andi	r2,r2,255
8112d258:	1000181e 	bne	r2,zero,8112d2bc <OS_FlagTaskRdy+0xd8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
8112d25c:	e0bffd17 	ldw	r2,-12(fp)
8112d260:	10c00d83 	ldbu	r3,54(r2)
8112d264:	d0a08703 	ldbu	r2,-32228(gp)
8112d268:	1884b03a 	or	r2,r3,r2
8112d26c:	d0a08705 	stb	r2,-32228(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d270:	e0bffd17 	ldw	r2,-12(fp)
8112d274:	10800d03 	ldbu	r2,52(r2)
8112d278:	10c03fcc 	andi	r3,r2,255
8112d27c:	e0bffd17 	ldw	r2,-12(fp)
8112d280:	10800d03 	ldbu	r2,52(r2)
8112d284:	11003fcc 	andi	r4,r2,255
8112d288:	d0a08744 	addi	r2,gp,-32227
8112d28c:	2085883a 	add	r2,r4,r2
8112d290:	11000003 	ldbu	r4,0(r2)
8112d294:	e0bffd17 	ldw	r2,-12(fp)
8112d298:	10800d43 	ldbu	r2,53(r2)
8112d29c:	2084b03a 	or	r2,r4,r2
8112d2a0:	1009883a 	mov	r4,r2
8112d2a4:	d0a08744 	addi	r2,gp,-32227
8112d2a8:	1885883a 	add	r2,r3,r2
8112d2ac:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
8112d2b0:	00800044 	movi	r2,1
8112d2b4:	e0bffc05 	stb	r2,-16(fp)
8112d2b8:	00000106 	br	8112d2c0 <OS_FlagTaskRdy+0xdc>
    } else {
        sched                   = OS_FALSE;
8112d2bc:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
8112d2c0:	e13ffe17 	ldw	r4,-8(fp)
8112d2c4:	112d2e00 	call	8112d2e0 <OS_FlagUnlink>
    return (sched);
8112d2c8:	e0bffc03 	ldbu	r2,-16(fp)
}
8112d2cc:	e037883a 	mov	sp,fp
8112d2d0:	dfc00117 	ldw	ra,4(sp)
8112d2d4:	df000017 	ldw	fp,0(sp)
8112d2d8:	dec00204 	addi	sp,sp,8
8112d2dc:	f800283a 	ret

8112d2e0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
8112d2e0:	defffa04 	addi	sp,sp,-24
8112d2e4:	de00012e 	bgeu	sp,et,8112d2ec <OS_FlagUnlink+0xc>
8112d2e8:	003b68fa 	trap	3
8112d2ec:	df000515 	stw	fp,20(sp)
8112d2f0:	df000504 	addi	fp,sp,20
8112d2f4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
8112d2f8:	e0bfff17 	ldw	r2,-4(fp)
8112d2fc:	10800117 	ldw	r2,4(r2)
8112d300:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112d304:	e0bfff17 	ldw	r2,-4(fp)
8112d308:	10800017 	ldw	r2,0(r2)
8112d30c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
8112d310:	e0bffb17 	ldw	r2,-20(fp)
8112d314:	10000b1e 	bne	r2,zero,8112d344 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
8112d318:	e0bfff17 	ldw	r2,-4(fp)
8112d31c:	10800317 	ldw	r2,12(r2)
8112d320:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
8112d324:	e0bffd17 	ldw	r2,-12(fp)
8112d328:	e0fffc17 	ldw	r3,-16(fp)
8112d32c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
8112d330:	e0bffc17 	ldw	r2,-16(fp)
8112d334:	10000b26 	beq	r2,zero,8112d364 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
8112d338:	e0bffc17 	ldw	r2,-16(fp)
8112d33c:	10000115 	stw	zero,4(r2)
8112d340:	00000806 	br	8112d364 <OS_FlagUnlink+0x84>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
8112d344:	e0bffb17 	ldw	r2,-20(fp)
8112d348:	e0fffc17 	ldw	r3,-16(fp)
8112d34c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
8112d350:	e0bffc17 	ldw	r2,-16(fp)
8112d354:	10000326 	beq	r2,zero,8112d364 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
8112d358:	e0bffc17 	ldw	r2,-16(fp)
8112d35c:	e0fffb17 	ldw	r3,-20(fp)
8112d360:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
8112d364:	e0bfff17 	ldw	r2,-4(fp)
8112d368:	10800217 	ldw	r2,8(r2)
8112d36c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
8112d370:	e0bffe17 	ldw	r2,-8(fp)
8112d374:	10000a15 	stw	zero,40(r2)
#endif
}
8112d378:	0001883a 	nop
8112d37c:	e037883a 	mov	sp,fp
8112d380:	df000017 	ldw	fp,0(sp)
8112d384:	dec00104 	addi	sp,sp,4
8112d388:	f800283a 	ret

8112d38c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
8112d38c:	defff404 	addi	sp,sp,-48
8112d390:	de00012e 	bgeu	sp,et,8112d398 <OSMemCreate+0xc>
8112d394:	003b68fa 	trap	3
8112d398:	df000b15 	stw	fp,44(sp)
8112d39c:	df000b04 	addi	fp,sp,44
8112d3a0:	e13ffc15 	stw	r4,-16(fp)
8112d3a4:	e17ffd15 	stw	r5,-12(fp)
8112d3a8:	e1bffe15 	stw	r6,-8(fp)
8112d3ac:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d3b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112d3b4:	e0bfff17 	ldw	r2,-4(fp)
8112d3b8:	1000021e 	bne	r2,zero,8112d3c4 <OSMemCreate+0x38>
        return ((OS_MEM *)0);
8112d3bc:	0005883a 	mov	r2,zero
8112d3c0:	00006506 	br	8112d558 <OSMemCreate+0x1cc>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
8112d3c4:	e0bffc17 	ldw	r2,-16(fp)
8112d3c8:	1000051e 	bne	r2,zero,8112d3e0 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112d3cc:	e0bfff17 	ldw	r2,-4(fp)
8112d3d0:	00c01884 	movi	r3,98
8112d3d4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d3d8:	0005883a 	mov	r2,zero
8112d3dc:	00005e06 	br	8112d558 <OSMemCreate+0x1cc>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
8112d3e0:	e0bffc17 	ldw	r2,-16(fp)
8112d3e4:	108000cc 	andi	r2,r2,3
8112d3e8:	10000526 	beq	r2,zero,8112d400 <OSMemCreate+0x74>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112d3ec:	e0bfff17 	ldw	r2,-4(fp)
8112d3f0:	00c01884 	movi	r3,98
8112d3f4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d3f8:	0005883a 	mov	r2,zero
8112d3fc:	00005606 	br	8112d558 <OSMemCreate+0x1cc>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
8112d400:	e0bffd17 	ldw	r2,-12(fp)
8112d404:	108000a8 	cmpgeui	r2,r2,2
8112d408:	1000051e 	bne	r2,zero,8112d420 <OSMemCreate+0x94>
        *perr = OS_ERR_MEM_INVALID_BLKS;
8112d40c:	e0bfff17 	ldw	r2,-4(fp)
8112d410:	00c016c4 	movi	r3,91
8112d414:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d418:	0005883a 	mov	r2,zero
8112d41c:	00004e06 	br	8112d558 <OSMemCreate+0x1cc>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
8112d420:	e0bffe17 	ldw	r2,-8(fp)
8112d424:	10800128 	cmpgeui	r2,r2,4
8112d428:	1000051e 	bne	r2,zero,8112d440 <OSMemCreate+0xb4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
8112d42c:	e0bfff17 	ldw	r2,-4(fp)
8112d430:	00c01704 	movi	r3,92
8112d434:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d438:	0005883a 	mov	r2,zero
8112d43c:	00004606 	br	8112d558 <OSMemCreate+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d440:	0005303a 	rdctl	r2,status
8112d444:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d448:	e0fffb17 	ldw	r3,-20(fp)
8112d44c:	00bfff84 	movi	r2,-2
8112d450:	1884703a 	and	r2,r3,r2
8112d454:	1001703a 	wrctl	status,r2
  
  return context;
8112d458:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d45c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
8112d460:	d0a08417 	ldw	r2,-32240(gp)
8112d464:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
8112d468:	d0a08417 	ldw	r2,-32240(gp)
8112d46c:	10000326 	beq	r2,zero,8112d47c <OSMemCreate+0xf0>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
8112d470:	d0a08417 	ldw	r2,-32240(gp)
8112d474:	10800117 	ldw	r2,4(r2)
8112d478:	d0a08415 	stw	r2,-32240(gp)
8112d47c:	e0bff817 	ldw	r2,-32(fp)
8112d480:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d484:	e0bff917 	ldw	r2,-28(fp)
8112d488:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
8112d48c:	e0bffa17 	ldw	r2,-24(fp)
8112d490:	1000051e 	bne	r2,zero,8112d4a8 <OSMemCreate+0x11c>
        *perr = OS_ERR_MEM_INVALID_PART;
8112d494:	e0bfff17 	ldw	r2,-4(fp)
8112d498:	00c01684 	movi	r3,90
8112d49c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d4a0:	0005883a 	mov	r2,zero
8112d4a4:	00002c06 	br	8112d558 <OSMemCreate+0x1cc>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
8112d4a8:	e0bffc17 	ldw	r2,-16(fp)
8112d4ac:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
8112d4b0:	e0fffc17 	ldw	r3,-16(fp)
8112d4b4:	e0bffe17 	ldw	r2,-8(fp)
8112d4b8:	1885883a 	add	r2,r3,r2
8112d4bc:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
8112d4c0:	e03ff715 	stw	zero,-36(fp)
8112d4c4:	00000c06 	br	8112d4f8 <OSMemCreate+0x16c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
8112d4c8:	e0bff617 	ldw	r2,-40(fp)
8112d4cc:	e0fff517 	ldw	r3,-44(fp)
8112d4d0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
8112d4d4:	e0bff517 	ldw	r2,-44(fp)
8112d4d8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
8112d4dc:	e0fff517 	ldw	r3,-44(fp)
8112d4e0:	e0bffe17 	ldw	r2,-8(fp)
8112d4e4:	1885883a 	add	r2,r3,r2
8112d4e8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
8112d4ec:	e0bff717 	ldw	r2,-36(fp)
8112d4f0:	10800044 	addi	r2,r2,1
8112d4f4:	e0bff715 	stw	r2,-36(fp)
8112d4f8:	e0bffd17 	ldw	r2,-12(fp)
8112d4fc:	10bfffc4 	addi	r2,r2,-1
8112d500:	e0fff717 	ldw	r3,-36(fp)
8112d504:	18bff036 	bltu	r3,r2,8112d4c8 <__reset+0xfb10d4c8>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
8112d508:	e0bff617 	ldw	r2,-40(fp)
8112d50c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
8112d510:	e0bffa17 	ldw	r2,-24(fp)
8112d514:	e0fffc17 	ldw	r3,-16(fp)
8112d518:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
8112d51c:	e0bffa17 	ldw	r2,-24(fp)
8112d520:	e0fffc17 	ldw	r3,-16(fp)
8112d524:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
8112d528:	e0bffa17 	ldw	r2,-24(fp)
8112d52c:	e0fffd17 	ldw	r3,-12(fp)
8112d530:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
8112d534:	e0bffa17 	ldw	r2,-24(fp)
8112d538:	e0fffd17 	ldw	r3,-12(fp)
8112d53c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
8112d540:	e0bffa17 	ldw	r2,-24(fp)
8112d544:	e0fffe17 	ldw	r3,-8(fp)
8112d548:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
8112d54c:	e0bfff17 	ldw	r2,-4(fp)
8112d550:	10000005 	stb	zero,0(r2)
    return (pmem);
8112d554:	e0bffa17 	ldw	r2,-24(fp)
}
8112d558:	e037883a 	mov	sp,fp
8112d55c:	df000017 	ldw	fp,0(sp)
8112d560:	dec00104 	addi	sp,sp,4
8112d564:	f800283a 	ret

8112d568 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
8112d568:	defff804 	addi	sp,sp,-32
8112d56c:	de00012e 	bgeu	sp,et,8112d574 <OSMemGet+0xc>
8112d570:	003b68fa 	trap	3
8112d574:	df000715 	stw	fp,28(sp)
8112d578:	df000704 	addi	fp,sp,28
8112d57c:	e13ffe15 	stw	r4,-8(fp)
8112d580:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d584:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112d588:	e0bfff17 	ldw	r2,-4(fp)
8112d58c:	1000021e 	bne	r2,zero,8112d598 <OSMemGet+0x30>
        return ((void *)0);
8112d590:	0005883a 	mov	r2,zero
8112d594:	00002e06 	br	8112d650 <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
8112d598:	e0bffe17 	ldw	r2,-8(fp)
8112d59c:	1000051e 	bne	r2,zero,8112d5b4 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112d5a0:	e0bfff17 	ldw	r2,-4(fp)
8112d5a4:	00c01804 	movi	r3,96
8112d5a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112d5ac:	0005883a 	mov	r2,zero
8112d5b0:	00002706 	br	8112d650 <OSMemGet+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d5b4:	0005303a 	rdctl	r2,status
8112d5b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d5bc:	e0fffd17 	ldw	r3,-12(fp)
8112d5c0:	00bfff84 	movi	r2,-2
8112d5c4:	1884703a 	and	r2,r3,r2
8112d5c8:	1001703a 	wrctl	status,r2
  
  return context;
8112d5cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d5d0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
8112d5d4:	e0bffe17 	ldw	r2,-8(fp)
8112d5d8:	10800417 	ldw	r2,16(r2)
8112d5dc:	10001426 	beq	r2,zero,8112d630 <OSMemGet+0xc8>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
8112d5e0:	e0bffe17 	ldw	r2,-8(fp)
8112d5e4:	10800117 	ldw	r2,4(r2)
8112d5e8:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
8112d5ec:	e0bffb17 	ldw	r2,-20(fp)
8112d5f0:	10c00017 	ldw	r3,0(r2)
8112d5f4:	e0bffe17 	ldw	r2,-8(fp)
8112d5f8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
8112d5fc:	e0bffe17 	ldw	r2,-8(fp)
8112d600:	10800417 	ldw	r2,16(r2)
8112d604:	10ffffc4 	addi	r3,r2,-1
8112d608:	e0bffe17 	ldw	r2,-8(fp)
8112d60c:	10c00415 	stw	r3,16(r2)
8112d610:	e0bff917 	ldw	r2,-28(fp)
8112d614:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d618:	e0bffa17 	ldw	r2,-24(fp)
8112d61c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
8112d620:	e0bfff17 	ldw	r2,-4(fp)
8112d624:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
8112d628:	e0bffb17 	ldw	r2,-20(fp)
8112d62c:	00000806 	br	8112d650 <OSMemGet+0xe8>
8112d630:	e0bff917 	ldw	r2,-28(fp)
8112d634:	e0bffc15 	stw	r2,-16(fp)
8112d638:	e0bffc17 	ldw	r2,-16(fp)
8112d63c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
8112d640:	e0bfff17 	ldw	r2,-4(fp)
8112d644:	00c01744 	movi	r3,93
8112d648:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
8112d64c:	0005883a 	mov	r2,zero
}
8112d650:	e037883a 	mov	sp,fp
8112d654:	df000017 	ldw	fp,0(sp)
8112d658:	dec00104 	addi	sp,sp,4
8112d65c:	f800283a 	ret

8112d660 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112d660:	defff704 	addi	sp,sp,-36
8112d664:	de00012e 	bgeu	sp,et,8112d66c <OSMemNameGet+0xc>
8112d668:	003b68fa 	trap	3
8112d66c:	dfc00815 	stw	ra,32(sp)
8112d670:	df000715 	stw	fp,28(sp)
8112d674:	df000704 	addi	fp,sp,28
8112d678:	e13ffd15 	stw	r4,-12(fp)
8112d67c:	e17ffe15 	stw	r5,-8(fp)
8112d680:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d684:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112d688:	e0bfff17 	ldw	r2,-4(fp)
8112d68c:	1000021e 	bne	r2,zero,8112d698 <OSMemNameGet+0x38>
        return (0);
8112d690:	0005883a 	mov	r2,zero
8112d694:	00002b06 	br	8112d744 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112d698:	e0bffd17 	ldw	r2,-12(fp)
8112d69c:	1000051e 	bne	r2,zero,8112d6b4 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112d6a0:	e0bfff17 	ldw	r2,-4(fp)
8112d6a4:	00c01804 	movi	r3,96
8112d6a8:	10c00005 	stb	r3,0(r2)
        return (0);
8112d6ac:	0005883a 	mov	r2,zero
8112d6b0:	00002406 	br	8112d744 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112d6b4:	e0bffe17 	ldw	r2,-8(fp)
8112d6b8:	1000051e 	bne	r2,zero,8112d6d0 <OSMemNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112d6bc:	e0bfff17 	ldw	r2,-4(fp)
8112d6c0:	00c00304 	movi	r3,12
8112d6c4:	10c00005 	stb	r3,0(r2)
        return (0);
8112d6c8:	0005883a 	mov	r2,zero
8112d6cc:	00001d06 	br	8112d744 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112d6d0:	d0a08a03 	ldbu	r2,-32216(gp)
8112d6d4:	10803fcc 	andi	r2,r2,255
8112d6d8:	10000526 	beq	r2,zero,8112d6f0 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112d6dc:	e0bfff17 	ldw	r2,-4(fp)
8112d6e0:	00c00444 	movi	r3,17
8112d6e4:	10c00005 	stb	r3,0(r2)
        return (0);
8112d6e8:	0005883a 	mov	r2,zero
8112d6ec:	00001506 	br	8112d744 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d6f0:	0005303a 	rdctl	r2,status
8112d6f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d6f8:	e0fffb17 	ldw	r3,-20(fp)
8112d6fc:	00bfff84 	movi	r2,-2
8112d700:	1884703a 	and	r2,r3,r2
8112d704:	1001703a 	wrctl	status,r2
  
  return context;
8112d708:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8112d70c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
8112d710:	e0bffd17 	ldw	r2,-12(fp)
8112d714:	10800504 	addi	r2,r2,20
8112d718:	100b883a 	mov	r5,r2
8112d71c:	e13ffe17 	ldw	r4,-8(fp)
8112d720:	112b4480 	call	8112b448 <OS_StrCopy>
8112d724:	e0bffa05 	stb	r2,-24(fp)
8112d728:	e0bff917 	ldw	r2,-28(fp)
8112d72c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d730:	e0bffc17 	ldw	r2,-16(fp)
8112d734:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112d738:	e0bfff17 	ldw	r2,-4(fp)
8112d73c:	10000005 	stb	zero,0(r2)
    return (len);
8112d740:	e0bffa03 	ldbu	r2,-24(fp)
}
8112d744:	e037883a 	mov	sp,fp
8112d748:	dfc00117 	ldw	ra,4(sp)
8112d74c:	df000017 	ldw	fp,0(sp)
8112d750:	dec00204 	addi	sp,sp,8
8112d754:	f800283a 	ret

8112d758 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112d758:	defff604 	addi	sp,sp,-40
8112d75c:	de00012e 	bgeu	sp,et,8112d764 <OSMemNameSet+0xc>
8112d760:	003b68fa 	trap	3
8112d764:	dfc00915 	stw	ra,36(sp)
8112d768:	df000815 	stw	fp,32(sp)
8112d76c:	df000804 	addi	fp,sp,32
8112d770:	e13ffd15 	stw	r4,-12(fp)
8112d774:	e17ffe15 	stw	r5,-8(fp)
8112d778:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d77c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112d780:	e0bfff17 	ldw	r2,-4(fp)
8112d784:	10003526 	beq	r2,zero,8112d85c <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112d788:	e0bffd17 	ldw	r2,-12(fp)
8112d78c:	1000041e 	bne	r2,zero,8112d7a0 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112d790:	e0bfff17 	ldw	r2,-4(fp)
8112d794:	00c01804 	movi	r3,96
8112d798:	10c00005 	stb	r3,0(r2)
        return;
8112d79c:	00003006 	br	8112d860 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112d7a0:	e0bffe17 	ldw	r2,-8(fp)
8112d7a4:	1000041e 	bne	r2,zero,8112d7b8 <OSMemNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112d7a8:	e0bfff17 	ldw	r2,-4(fp)
8112d7ac:	00c00304 	movi	r3,12
8112d7b0:	10c00005 	stb	r3,0(r2)
        return;
8112d7b4:	00002a06 	br	8112d860 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112d7b8:	d0a08a03 	ldbu	r2,-32216(gp)
8112d7bc:	10803fcc 	andi	r2,r2,255
8112d7c0:	10000426 	beq	r2,zero,8112d7d4 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112d7c4:	e0bfff17 	ldw	r2,-4(fp)
8112d7c8:	00c00484 	movi	r3,18
8112d7cc:	10c00005 	stb	r3,0(r2)
        return;
8112d7d0:	00002306 	br	8112d860 <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d7d4:	0005303a 	rdctl	r2,status
8112d7d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d7dc:	e0fffc17 	ldw	r3,-16(fp)
8112d7e0:	00bfff84 	movi	r2,-2
8112d7e4:	1884703a 	and	r2,r3,r2
8112d7e8:	1001703a 	wrctl	status,r2
  
  return context;
8112d7ec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112d7f0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112d7f4:	e13ffe17 	ldw	r4,-8(fp)
8112d7f8:	112b4c40 	call	8112b4c4 <OS_StrLen>
8112d7fc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
8112d800:	e0bffa03 	ldbu	r2,-24(fp)
8112d804:	10800830 	cmpltui	r2,r2,32
8112d808:	1000081e 	bne	r2,zero,8112d82c <OSMemNameSet+0xd4>
8112d80c:	e0bff817 	ldw	r2,-32(fp)
8112d810:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d814:	e0bff917 	ldw	r2,-28(fp)
8112d818:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
8112d81c:	e0bfff17 	ldw	r2,-4(fp)
8112d820:	00c018c4 	movi	r3,99
8112d824:	10c00005 	stb	r3,0(r2)
        return;
8112d828:	00000d06 	br	8112d860 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
8112d82c:	e0bffd17 	ldw	r2,-12(fp)
8112d830:	10800504 	addi	r2,r2,20
8112d834:	e17ffe17 	ldw	r5,-8(fp)
8112d838:	1009883a 	mov	r4,r2
8112d83c:	112b4480 	call	8112b448 <OS_StrCopy>
8112d840:	e0bff817 	ldw	r2,-32(fp)
8112d844:	e0bffb15 	stw	r2,-20(fp)
8112d848:	e0bffb17 	ldw	r2,-20(fp)
8112d84c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112d850:	e0bfff17 	ldw	r2,-4(fp)
8112d854:	10000005 	stb	zero,0(r2)
8112d858:	00000106 	br	8112d860 <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112d85c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112d860:	e037883a 	mov	sp,fp
8112d864:	dfc00117 	ldw	ra,4(sp)
8112d868:	df000017 	ldw	fp,0(sp)
8112d86c:	dec00204 	addi	sp,sp,8
8112d870:	f800283a 	ret

8112d874 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
8112d874:	defff904 	addi	sp,sp,-28
8112d878:	de00012e 	bgeu	sp,et,8112d880 <OSMemPut+0xc>
8112d87c:	003b68fa 	trap	3
8112d880:	df000615 	stw	fp,24(sp)
8112d884:	df000604 	addi	fp,sp,24
8112d888:	e13ffe15 	stw	r4,-8(fp)
8112d88c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d890:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112d894:	e0bffe17 	ldw	r2,-8(fp)
8112d898:	1000021e 	bne	r2,zero,8112d8a4 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112d89c:	00801804 	movi	r2,96
8112d8a0:	00002806 	br	8112d944 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
8112d8a4:	e0bfff17 	ldw	r2,-4(fp)
8112d8a8:	1000021e 	bne	r2,zero,8112d8b4 <OSMemPut+0x40>
        return (OS_ERR_MEM_INVALID_PBLK);
8112d8ac:	008017c4 	movi	r2,95
8112d8b0:	00002406 	br	8112d944 <OSMemPut+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d8b4:	0005303a 	rdctl	r2,status
8112d8b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d8bc:	e0fffd17 	ldw	r3,-12(fp)
8112d8c0:	00bfff84 	movi	r2,-2
8112d8c4:	1884703a 	and	r2,r3,r2
8112d8c8:	1001703a 	wrctl	status,r2
  
  return context;
8112d8cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d8d0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
8112d8d4:	e0bffe17 	ldw	r2,-8(fp)
8112d8d8:	10c00417 	ldw	r3,16(r2)
8112d8dc:	e0bffe17 	ldw	r2,-8(fp)
8112d8e0:	10800317 	ldw	r2,12(r2)
8112d8e4:	18800636 	bltu	r3,r2,8112d900 <OSMemPut+0x8c>
8112d8e8:	e0bffa17 	ldw	r2,-24(fp)
8112d8ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d8f0:	e0bffb17 	ldw	r2,-20(fp)
8112d8f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
8112d8f8:	00801784 	movi	r2,94
8112d8fc:	00001106 	br	8112d944 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
8112d900:	e0bffe17 	ldw	r2,-8(fp)
8112d904:	10c00117 	ldw	r3,4(r2)
8112d908:	e0bfff17 	ldw	r2,-4(fp)
8112d90c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
8112d910:	e0bffe17 	ldw	r2,-8(fp)
8112d914:	e0ffff17 	ldw	r3,-4(fp)
8112d918:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8112d91c:	e0bffe17 	ldw	r2,-8(fp)
8112d920:	10800417 	ldw	r2,16(r2)
8112d924:	10c00044 	addi	r3,r2,1
8112d928:	e0bffe17 	ldw	r2,-8(fp)
8112d92c:	10c00415 	stw	r3,16(r2)
8112d930:	e0bffa17 	ldw	r2,-24(fp)
8112d934:	e0bffc15 	stw	r2,-16(fp)
8112d938:	e0bffc17 	ldw	r2,-16(fp)
8112d93c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
8112d940:	0005883a 	mov	r2,zero
}
8112d944:	e037883a 	mov	sp,fp
8112d948:	df000017 	ldw	fp,0(sp)
8112d94c:	dec00104 	addi	sp,sp,4
8112d950:	f800283a 	ret

8112d954 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
8112d954:	defffa04 	addi	sp,sp,-24
8112d958:	de00012e 	bgeu	sp,et,8112d960 <OSMemQuery+0xc>
8112d95c:	003b68fa 	trap	3
8112d960:	df000515 	stw	fp,20(sp)
8112d964:	df000504 	addi	fp,sp,20
8112d968:	e13ffe15 	stw	r4,-8(fp)
8112d96c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d970:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112d974:	e0bffe17 	ldw	r2,-8(fp)
8112d978:	1000021e 	bne	r2,zero,8112d984 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112d97c:	00801804 	movi	r2,96
8112d980:	00002c06 	br	8112da34 <OSMemQuery+0xe0>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
8112d984:	e0bfff17 	ldw	r2,-4(fp)
8112d988:	1000021e 	bne	r2,zero,8112d994 <OSMemQuery+0x40>
        return (OS_ERR_MEM_INVALID_PDATA);
8112d98c:	00801844 	movi	r2,97
8112d990:	00002806 	br	8112da34 <OSMemQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d994:	0005303a 	rdctl	r2,status
8112d998:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d99c:	e0fffc17 	ldw	r3,-16(fp)
8112d9a0:	00bfff84 	movi	r2,-2
8112d9a4:	1884703a 	and	r2,r3,r2
8112d9a8:	1001703a 	wrctl	status,r2
  
  return context;
8112d9ac:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d9b0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
8112d9b4:	e0bffe17 	ldw	r2,-8(fp)
8112d9b8:	10c00017 	ldw	r3,0(r2)
8112d9bc:	e0bfff17 	ldw	r2,-4(fp)
8112d9c0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
8112d9c4:	e0bffe17 	ldw	r2,-8(fp)
8112d9c8:	10c00117 	ldw	r3,4(r2)
8112d9cc:	e0bfff17 	ldw	r2,-4(fp)
8112d9d0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
8112d9d4:	e0bffe17 	ldw	r2,-8(fp)
8112d9d8:	10c00217 	ldw	r3,8(r2)
8112d9dc:	e0bfff17 	ldw	r2,-4(fp)
8112d9e0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
8112d9e4:	e0bffe17 	ldw	r2,-8(fp)
8112d9e8:	10c00317 	ldw	r3,12(r2)
8112d9ec:	e0bfff17 	ldw	r2,-4(fp)
8112d9f0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
8112d9f4:	e0bffe17 	ldw	r2,-8(fp)
8112d9f8:	10c00417 	ldw	r3,16(r2)
8112d9fc:	e0bfff17 	ldw	r2,-4(fp)
8112da00:	10c00415 	stw	r3,16(r2)
8112da04:	e0bffb17 	ldw	r2,-20(fp)
8112da08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112da0c:	e0bffd17 	ldw	r2,-12(fp)
8112da10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
8112da14:	e0bfff17 	ldw	r2,-4(fp)
8112da18:	10c00317 	ldw	r3,12(r2)
8112da1c:	e0bfff17 	ldw	r2,-4(fp)
8112da20:	10800417 	ldw	r2,16(r2)
8112da24:	1887c83a 	sub	r3,r3,r2
8112da28:	e0bfff17 	ldw	r2,-4(fp)
8112da2c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
8112da30:	0005883a 	mov	r2,zero
}
8112da34:	e037883a 	mov	sp,fp
8112da38:	df000017 	ldw	fp,0(sp)
8112da3c:	dec00104 	addi	sp,sp,4
8112da40:	f800283a 	ret

8112da44 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
8112da44:	defffc04 	addi	sp,sp,-16
8112da48:	de00012e 	bgeu	sp,et,8112da50 <OS_MemInit+0xc>
8112da4c:	003b68fa 	trap	3
8112da50:	dfc00315 	stw	ra,12(sp)
8112da54:	df000215 	stw	fp,8(sp)
8112da58:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
8112da5c:	01430c04 	movi	r5,3120
8112da60:	01204574 	movhi	r4,33045
8112da64:	2131a104 	addi	r4,r4,-14716
8112da68:	112b2280 	call	8112b228 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
8112da6c:	00a04574 	movhi	r2,33045
8112da70:	10b1a104 	addi	r2,r2,-14716
8112da74:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112da78:	e03fff0d 	sth	zero,-4(fp)
8112da7c:	00001306 	br	8112dacc <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8112da80:	e0bfff0b 	ldhu	r2,-4(fp)
8112da84:	10800044 	addi	r2,r2,1
8112da88:	10c00d24 	muli	r3,r2,52
8112da8c:	00a04574 	movhi	r2,33045
8112da90:	10b1a104 	addi	r2,r2,-14716
8112da94:	1887883a 	add	r3,r3,r2
8112da98:	e0bffe17 	ldw	r2,-8(fp)
8112da9c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8112daa0:	e0bffe17 	ldw	r2,-8(fp)
8112daa4:	00c00fc4 	movi	r3,63
8112daa8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8112daac:	e0bffe17 	ldw	r2,-8(fp)
8112dab0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
8112dab4:	e0bffe17 	ldw	r2,-8(fp)
8112dab8:	10800d04 	addi	r2,r2,52
8112dabc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112dac0:	e0bfff0b 	ldhu	r2,-4(fp)
8112dac4:	10800044 	addi	r2,r2,1
8112dac8:	e0bfff0d 	sth	r2,-4(fp)
8112dacc:	e0bfff0b 	ldhu	r2,-4(fp)
8112dad0:	10800ef0 	cmpltui	r2,r2,59
8112dad4:	103fea1e 	bne	r2,zero,8112da80 <__reset+0xfb10da80>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
8112dad8:	e0bffe17 	ldw	r2,-8(fp)
8112dadc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
8112dae0:	e0bffe17 	ldw	r2,-8(fp)
8112dae4:	00c00fc4 	movi	r3,63
8112dae8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
8112daec:	e0bffe17 	ldw	r2,-8(fp)
8112daf0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
8112daf4:	00a04574 	movhi	r2,33045
8112daf8:	10b1a104 	addi	r2,r2,-14716
8112dafc:	d0a08415 	stw	r2,-32240(gp)
#endif
}
8112db00:	0001883a 	nop
8112db04:	e037883a 	mov	sp,fp
8112db08:	dfc00117 	ldw	ra,4(sp)
8112db0c:	df000017 	ldw	fp,0(sp)
8112db10:	dec00204 	addi	sp,sp,8
8112db14:	f800283a 	ret

8112db18 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
8112db18:	defff704 	addi	sp,sp,-36
8112db1c:	de00012e 	bgeu	sp,et,8112db24 <OSMutexAccept+0xc>
8112db20:	003b68fa 	trap	3
8112db24:	df000815 	stw	fp,32(sp)
8112db28:	df000804 	addi	fp,sp,32
8112db2c:	e13ffe15 	stw	r4,-8(fp)
8112db30:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112db34:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
8112db38:	e0bfff17 	ldw	r2,-4(fp)
8112db3c:	1000021e 	bne	r2,zero,8112db48 <OSMutexAccept+0x30>
        return (OS_FALSE);
8112db40:	0005883a 	mov	r2,zero
8112db44:	00005b06 	br	8112dcb4 <OSMutexAccept+0x19c>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112db48:	e0bffe17 	ldw	r2,-8(fp)
8112db4c:	1000051e 	bne	r2,zero,8112db64 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112db50:	e0bfff17 	ldw	r2,-4(fp)
8112db54:	00c00104 	movi	r3,4
8112db58:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112db5c:	0005883a 	mov	r2,zero
8112db60:	00005406 	br	8112dcb4 <OSMutexAccept+0x19c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
8112db64:	e0bffe17 	ldw	r2,-8(fp)
8112db68:	10800003 	ldbu	r2,0(r2)
8112db6c:	10803fcc 	andi	r2,r2,255
8112db70:	10800120 	cmpeqi	r2,r2,4
8112db74:	1000051e 	bne	r2,zero,8112db8c <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112db78:	e0bfff17 	ldw	r2,-4(fp)
8112db7c:	00c00044 	movi	r3,1
8112db80:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112db84:	0005883a 	mov	r2,zero
8112db88:	00004a06 	br	8112dcb4 <OSMutexAccept+0x19c>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
8112db8c:	d0a08a03 	ldbu	r2,-32216(gp)
8112db90:	10803fcc 	andi	r2,r2,255
8112db94:	10000526 	beq	r2,zero,8112dbac <OSMutexAccept+0x94>
        *perr = OS_ERR_PEND_ISR;
8112db98:	e0bfff17 	ldw	r2,-4(fp)
8112db9c:	00c00084 	movi	r3,2
8112dba0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112dba4:	0005883a 	mov	r2,zero
8112dba8:	00004206 	br	8112dcb4 <OSMutexAccept+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dbac:	0005303a 	rdctl	r2,status
8112dbb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dbb4:	e0fffd17 	ldw	r3,-12(fp)
8112dbb8:	00bfff84 	movi	r2,-2
8112dbbc:	1884703a 	and	r2,r3,r2
8112dbc0:	1001703a 	wrctl	status,r2
  
  return context;
8112dbc4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
8112dbc8:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
8112dbcc:	e0bffe17 	ldw	r2,-8(fp)
8112dbd0:	1080020b 	ldhu	r2,8(r2)
8112dbd4:	10bfffcc 	andi	r2,r2,65535
8112dbd8:	1004d23a 	srli	r2,r2,8
8112dbdc:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112dbe0:	e0bffe17 	ldw	r2,-8(fp)
8112dbe4:	1080020b 	ldhu	r2,8(r2)
8112dbe8:	10bfffcc 	andi	r2,r2,65535
8112dbec:	10803fcc 	andi	r2,r2,255
8112dbf0:	10803fd8 	cmpnei	r2,r2,255
8112dbf4:	1000281e 	bne	r2,zero,8112dc98 <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
8112dbf8:	e0bffe17 	ldw	r2,-8(fp)
8112dbfc:	10c0020b 	ldhu	r3,8(r2)
8112dc00:	00bfc004 	movi	r2,-256
8112dc04:	1884703a 	and	r2,r3,r2
8112dc08:	1007883a 	mov	r3,r2
8112dc0c:	e0bffe17 	ldw	r2,-8(fp)
8112dc10:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
8112dc14:	e0bffe17 	ldw	r2,-8(fp)
8112dc18:	10c0020b 	ldhu	r3,8(r2)
8112dc1c:	d0a08b17 	ldw	r2,-32212(gp)
8112dc20:	10800c83 	ldbu	r2,50(r2)
8112dc24:	10803fcc 	andi	r2,r2,255
8112dc28:	1884b03a 	or	r2,r3,r2
8112dc2c:	1007883a 	mov	r3,r2
8112dc30:	e0bffe17 	ldw	r2,-8(fp)
8112dc34:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
8112dc38:	d0e08b17 	ldw	r3,-32212(gp)
8112dc3c:	e0bffe17 	ldw	r2,-8(fp)
8112dc40:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
8112dc44:	d0a08b17 	ldw	r2,-32212(gp)
8112dc48:	10800c83 	ldbu	r2,50(r2)
8112dc4c:	10803fcc 	andi	r2,r2,255
8112dc50:	e0fffa03 	ldbu	r3,-24(fp)
8112dc54:	18800836 	bltu	r3,r2,8112dc78 <OSMutexAccept+0x160>
8112dc58:	e0bff817 	ldw	r2,-32(fp)
8112dc5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112dc60:	e0bff917 	ldw	r2,-28(fp)
8112dc64:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
8112dc68:	e0bfff17 	ldw	r2,-4(fp)
8112dc6c:	00c01e04 	movi	r3,120
8112dc70:	10c00005 	stb	r3,0(r2)
8112dc74:	00000606 	br	8112dc90 <OSMutexAccept+0x178>
8112dc78:	e0bff817 	ldw	r2,-32(fp)
8112dc7c:	e0bffb15 	stw	r2,-20(fp)
8112dc80:	e0bffb17 	ldw	r2,-20(fp)
8112dc84:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112dc88:	e0bfff17 	ldw	r2,-4(fp)
8112dc8c:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
8112dc90:	00800044 	movi	r2,1
8112dc94:	00000706 	br	8112dcb4 <OSMutexAccept+0x19c>
8112dc98:	e0bff817 	ldw	r2,-32(fp)
8112dc9c:	e0bffc15 	stw	r2,-16(fp)
8112dca0:	e0bffc17 	ldw	r2,-16(fp)
8112dca4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112dca8:	e0bfff17 	ldw	r2,-4(fp)
8112dcac:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
8112dcb0:	0005883a 	mov	r2,zero
}
8112dcb4:	e037883a 	mov	sp,fp
8112dcb8:	df000017 	ldw	fp,0(sp)
8112dcbc:	dec00104 	addi	sp,sp,4
8112dcc0:	f800283a 	ret

8112dcc4 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
8112dcc4:	defff604 	addi	sp,sp,-40
8112dcc8:	de00012e 	bgeu	sp,et,8112dcd0 <OSMutexCreate+0xc>
8112dccc:	003b68fa 	trap	3
8112dcd0:	dfc00915 	stw	ra,36(sp)
8112dcd4:	df000815 	stw	fp,32(sp)
8112dcd8:	df000804 	addi	fp,sp,32
8112dcdc:	2005883a 	mov	r2,r4
8112dce0:	e17fff15 	stw	r5,-4(fp)
8112dce4:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112dce8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112dcec:	e0bfff17 	ldw	r2,-4(fp)
8112dcf0:	1000021e 	bne	r2,zero,8112dcfc <OSMutexCreate+0x38>
        return ((OS_EVENT *)0);
8112dcf4:	0005883a 	mov	r2,zero
8112dcf8:	00006106 	br	8112de80 <OSMutexCreate+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
8112dcfc:	e0bffe03 	ldbu	r2,-8(fp)
8112dd00:	10800a30 	cmpltui	r2,r2,40
8112dd04:	1000051e 	bne	r2,zero,8112dd1c <OSMutexCreate+0x58>
        *perr = OS_ERR_PRIO_INVALID;
8112dd08:	e0bfff17 	ldw	r2,-4(fp)
8112dd0c:	00c00a84 	movi	r3,42
8112dd10:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112dd14:	0005883a 	mov	r2,zero
8112dd18:	00005906 	br	8112de80 <OSMutexCreate+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112dd1c:	d0a08a03 	ldbu	r2,-32216(gp)
8112dd20:	10803fcc 	andi	r2,r2,255
8112dd24:	10000526 	beq	r2,zero,8112dd3c <OSMutexCreate+0x78>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
8112dd28:	e0bfff17 	ldw	r2,-4(fp)
8112dd2c:	00c00404 	movi	r3,16
8112dd30:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112dd34:	0005883a 	mov	r2,zero
8112dd38:	00005106 	br	8112de80 <OSMutexCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dd3c:	0005303a 	rdctl	r2,status
8112dd40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dd44:	e0fffd17 	ldw	r3,-12(fp)
8112dd48:	00bfff84 	movi	r2,-2
8112dd4c:	1884703a 	and	r2,r3,r2
8112dd50:	1001703a 	wrctl	status,r2
  
  return context;
8112dd54:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112dd58:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
8112dd5c:	e0fffe03 	ldbu	r3,-8(fp)
8112dd60:	00a04574 	movhi	r2,33045
8112dd64:	1081c704 	addi	r2,r2,1820
8112dd68:	18c7883a 	add	r3,r3,r3
8112dd6c:	18c7883a 	add	r3,r3,r3
8112dd70:	10c5883a 	add	r2,r2,r3
8112dd74:	10800017 	ldw	r2,0(r2)
8112dd78:	10000926 	beq	r2,zero,8112dda0 <OSMutexCreate+0xdc>
8112dd7c:	e0bff817 	ldw	r2,-32(fp)
8112dd80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112dd84:	e0bff917 	ldw	r2,-28(fp)
8112dd88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
8112dd8c:	e0bfff17 	ldw	r2,-4(fp)
8112dd90:	00c00a04 	movi	r3,40
8112dd94:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112dd98:	0005883a 	mov	r2,zero
8112dd9c:	00003806 	br	8112de80 <OSMutexCreate+0x1bc>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
8112dda0:	e0fffe03 	ldbu	r3,-8(fp)
8112dda4:	00a04574 	movhi	r2,33045
8112dda8:	1081c704 	addi	r2,r2,1820
8112ddac:	18c7883a 	add	r3,r3,r3
8112ddb0:	18c7883a 	add	r3,r3,r3
8112ddb4:	10c5883a 	add	r2,r2,r3
8112ddb8:	00c00044 	movi	r3,1
8112ddbc:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
8112ddc0:	d0a08917 	ldw	r2,-32220(gp)
8112ddc4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
8112ddc8:	e0bffb17 	ldw	r2,-20(fp)
8112ddcc:	1000101e 	bne	r2,zero,8112de10 <OSMutexCreate+0x14c>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
8112ddd0:	e0fffe03 	ldbu	r3,-8(fp)
8112ddd4:	00a04574 	movhi	r2,33045
8112ddd8:	1081c704 	addi	r2,r2,1820
8112dddc:	18c7883a 	add	r3,r3,r3
8112dde0:	18c7883a 	add	r3,r3,r3
8112dde4:	10c5883a 	add	r2,r2,r3
8112dde8:	10000015 	stw	zero,0(r2)
8112ddec:	e0bff817 	ldw	r2,-32(fp)
8112ddf0:	e0bffa15 	stw	r2,-24(fp)
8112ddf4:	e0bffa17 	ldw	r2,-24(fp)
8112ddf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
8112ddfc:	e0bfff17 	ldw	r2,-4(fp)
8112de00:	00c00104 	movi	r3,4
8112de04:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112de08:	e0bffb17 	ldw	r2,-20(fp)
8112de0c:	00001c06 	br	8112de80 <OSMutexCreate+0x1bc>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
8112de10:	d0a08917 	ldw	r2,-32220(gp)
8112de14:	10800117 	ldw	r2,4(r2)
8112de18:	d0a08915 	stw	r2,-32220(gp)
8112de1c:	e0bff817 	ldw	r2,-32(fp)
8112de20:	e0bffc15 	stw	r2,-16(fp)
8112de24:	e0bffc17 	ldw	r2,-16(fp)
8112de28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
8112de2c:	e0bffb17 	ldw	r2,-20(fp)
8112de30:	00c00104 	movi	r3,4
8112de34:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
8112de38:	e0bffe03 	ldbu	r2,-8(fp)
8112de3c:	1004923a 	slli	r2,r2,8
8112de40:	10803fd4 	ori	r2,r2,255
8112de44:	1007883a 	mov	r3,r2
8112de48:	e0bffb17 	ldw	r2,-20(fp)
8112de4c:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
8112de50:	e0bffb17 	ldw	r2,-20(fp)
8112de54:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
8112de58:	e0bffb17 	ldw	r2,-20(fp)
8112de5c:	00c00fc4 	movi	r3,63
8112de60:	10c00445 	stb	r3,17(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
8112de64:	e0bffb17 	ldw	r2,-20(fp)
8112de68:	10000485 	stb	zero,18(r2)
#endif
    OS_EventWaitListInit(pevent);
8112de6c:	e13ffb17 	ldw	r4,-20(fp)
8112de70:	112ae100 	call	8112ae10 <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
8112de74:	e0bfff17 	ldw	r2,-4(fp)
8112de78:	10000005 	stb	zero,0(r2)
    return (pevent);
8112de7c:	e0bffb17 	ldw	r2,-20(fp)
}
8112de80:	e037883a 	mov	sp,fp
8112de84:	dfc00117 	ldw	ra,4(sp)
8112de88:	df000017 	ldw	fp,0(sp)
8112de8c:	dec00204 	addi	sp,sp,8
8112de90:	f800283a 	ret

8112de94 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112de94:	defff004 	addi	sp,sp,-64
8112de98:	de00012e 	bgeu	sp,et,8112dea0 <OSMutexDel+0xc>
8112de9c:	003b68fa 	trap	3
8112dea0:	dfc00f15 	stw	ra,60(sp)
8112dea4:	df000e15 	stw	fp,56(sp)
8112dea8:	df000e04 	addi	fp,sp,56
8112deac:	e13ffd15 	stw	r4,-12(fp)
8112deb0:	2805883a 	mov	r2,r5
8112deb4:	e1bfff15 	stw	r6,-4(fp)
8112deb8:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112debc:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112dec0:	e0bfff17 	ldw	r2,-4(fp)
8112dec4:	1000021e 	bne	r2,zero,8112ded0 <OSMutexDel+0x3c>
        return (pevent);
8112dec8:	e0bffd17 	ldw	r2,-12(fp)
8112decc:	0000ad06 	br	8112e184 <OSMutexDel+0x2f0>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112ded0:	e0bffd17 	ldw	r2,-12(fp)
8112ded4:	1000051e 	bne	r2,zero,8112deec <OSMutexDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112ded8:	e0bfff17 	ldw	r2,-4(fp)
8112dedc:	00c00104 	movi	r3,4
8112dee0:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112dee4:	e0bffd17 	ldw	r2,-12(fp)
8112dee8:	0000a606 	br	8112e184 <OSMutexDel+0x2f0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112deec:	e0bffd17 	ldw	r2,-12(fp)
8112def0:	10800003 	ldbu	r2,0(r2)
8112def4:	10803fcc 	andi	r2,r2,255
8112def8:	10800120 	cmpeqi	r2,r2,4
8112defc:	1000051e 	bne	r2,zero,8112df14 <OSMutexDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112df00:	e0bfff17 	ldw	r2,-4(fp)
8112df04:	00c00044 	movi	r3,1
8112df08:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112df0c:	e0bffd17 	ldw	r2,-12(fp)
8112df10:	00009c06 	br	8112e184 <OSMutexDel+0x2f0>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112df14:	d0a08a03 	ldbu	r2,-32216(gp)
8112df18:	10803fcc 	andi	r2,r2,255
8112df1c:	10000526 	beq	r2,zero,8112df34 <OSMutexDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112df20:	e0bfff17 	ldw	r2,-4(fp)
8112df24:	00c003c4 	movi	r3,15
8112df28:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112df2c:	e0bffd17 	ldw	r2,-12(fp)
8112df30:	00009406 	br	8112e184 <OSMutexDel+0x2f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112df34:	0005303a 	rdctl	r2,status
8112df38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112df3c:	e0fffc17 	ldw	r3,-16(fp)
8112df40:	00bfff84 	movi	r2,-2
8112df44:	1884703a 	and	r2,r3,r2
8112df48:	1001703a 	wrctl	status,r2
  
  return context;
8112df4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112df50:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
8112df54:	e0bffd17 	ldw	r2,-12(fp)
8112df58:	10800283 	ldbu	r2,10(r2)
8112df5c:	10803fcc 	andi	r2,r2,255
8112df60:	10000326 	beq	r2,zero,8112df70 <OSMutexDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112df64:	00800044 	movi	r2,1
8112df68:	e0bff205 	stb	r2,-56(fp)
8112df6c:	00000106 	br	8112df74 <OSMutexDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112df70:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
8112df74:	e0bffe03 	ldbu	r2,-8(fp)
8112df78:	10000326 	beq	r2,zero,8112df88 <OSMutexDel+0xf4>
8112df7c:	10800060 	cmpeqi	r2,r2,1
8112df80:	10002f1e 	bne	r2,zero,8112e040 <OSMutexDel+0x1ac>
8112df84:	00007406 	br	8112e158 <OSMutexDel+0x2c4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
8112df88:	e0bff203 	ldbu	r2,-56(fp)
8112df8c:	1000221e 	bne	r2,zero,8112e018 <OSMutexDel+0x184>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112df90:	e0bffd17 	ldw	r2,-12(fp)
8112df94:	00c00fc4 	movi	r3,63
8112df98:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112df9c:	e0bffd17 	ldw	r2,-12(fp)
8112dfa0:	10000485 	stb	zero,18(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112dfa4:	e0bffd17 	ldw	r2,-12(fp)
8112dfa8:	1080020b 	ldhu	r2,8(r2)
8112dfac:	10bfffcc 	andi	r2,r2,65535
8112dfb0:	1004d23a 	srli	r2,r2,8
8112dfb4:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
8112dfb8:	e0fff603 	ldbu	r3,-40(fp)
8112dfbc:	00a04574 	movhi	r2,33045
8112dfc0:	1081c704 	addi	r2,r2,1820
8112dfc4:	18c7883a 	add	r3,r3,r3
8112dfc8:	18c7883a 	add	r3,r3,r3
8112dfcc:	10c5883a 	add	r2,r2,r3
8112dfd0:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112dfd4:	e0bffd17 	ldw	r2,-12(fp)
8112dfd8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
8112dfdc:	d0e08917 	ldw	r3,-32220(gp)
8112dfe0:	e0bffd17 	ldw	r2,-12(fp)
8112dfe4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
8112dfe8:	e0bffd17 	ldw	r2,-12(fp)
8112dfec:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
8112dff0:	e0bffd17 	ldw	r2,-12(fp)
8112dff4:	d0a08915 	stw	r2,-32220(gp)
8112dff8:	e0bff417 	ldw	r2,-48(fp)
8112dffc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e000:	e0bff517 	ldw	r2,-44(fp)
8112e004:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
8112e008:	e0bfff17 	ldw	r2,-4(fp)
8112e00c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
8112e010:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
8112e014:	00005a06 	br	8112e180 <OSMutexDel+0x2ec>
8112e018:	e0bff417 	ldw	r2,-48(fp)
8112e01c:	e0bff715 	stw	r2,-36(fp)
8112e020:	e0bff717 	ldw	r2,-36(fp)
8112e024:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
8112e028:	e0bfff17 	ldw	r2,-4(fp)
8112e02c:	00c01244 	movi	r3,73
8112e030:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
8112e034:	e0bffd17 	ldw	r2,-12(fp)
8112e038:	e0bff315 	stw	r2,-52(fp)
             }
             break;
8112e03c:	00005006 	br	8112e180 <OSMutexDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
8112e040:	e0bffd17 	ldw	r2,-12(fp)
8112e044:	1080020b 	ldhu	r2,8(r2)
8112e048:	10bfffcc 	andi	r2,r2,65535
8112e04c:	1004d23a 	srli	r2,r2,8
8112e050:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
8112e054:	e0bffd17 	ldw	r2,-12(fp)
8112e058:	1080020b 	ldhu	r2,8(r2)
8112e05c:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
8112e060:	e0bffd17 	ldw	r2,-12(fp)
8112e064:	10800117 	ldw	r2,4(r2)
8112e068:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
8112e06c:	e0bffa17 	ldw	r2,-24(fp)
8112e070:	10000f26 	beq	r2,zero,8112e0b0 <OSMutexDel+0x21c>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
8112e074:	e0bffa17 	ldw	r2,-24(fp)
8112e078:	10800c83 	ldbu	r2,50(r2)
8112e07c:	10c03fcc 	andi	r3,r2,255
8112e080:	e0bff603 	ldbu	r2,-40(fp)
8112e084:	18800a1e 	bne	r3,r2,8112e0b0 <OSMutexDel+0x21c>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
8112e088:	e0bff903 	ldbu	r2,-28(fp)
8112e08c:	100b883a 	mov	r5,r2
8112e090:	e13ffa17 	ldw	r4,-24(fp)
8112e094:	112ead00 	call	8112ead0 <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112e098:	00000506 	br	8112e0b0 <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112e09c:	000f883a 	mov	r7,zero
8112e0a0:	01800404 	movi	r6,16
8112e0a4:	000b883a 	mov	r5,zero
8112e0a8:	e13ffd17 	ldw	r4,-12(fp)
8112e0ac:	112a8380 	call	8112a838 <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112e0b0:	e0bffd17 	ldw	r2,-12(fp)
8112e0b4:	10800283 	ldbu	r2,10(r2)
8112e0b8:	10803fcc 	andi	r2,r2,255
8112e0bc:	103ff71e 	bne	r2,zero,8112e09c <__reset+0xfb10e09c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112e0c0:	e0bffd17 	ldw	r2,-12(fp)
8112e0c4:	00c00fc4 	movi	r3,63
8112e0c8:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112e0cc:	e0bffd17 	ldw	r2,-12(fp)
8112e0d0:	10000485 	stb	zero,18(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112e0d4:	e0bffd17 	ldw	r2,-12(fp)
8112e0d8:	1080020b 	ldhu	r2,8(r2)
8112e0dc:	10bfffcc 	andi	r2,r2,65535
8112e0e0:	1004d23a 	srli	r2,r2,8
8112e0e4:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
8112e0e8:	e0fff603 	ldbu	r3,-40(fp)
8112e0ec:	00a04574 	movhi	r2,33045
8112e0f0:	1081c704 	addi	r2,r2,1820
8112e0f4:	18c7883a 	add	r3,r3,r3
8112e0f8:	18c7883a 	add	r3,r3,r3
8112e0fc:	10c5883a 	add	r2,r2,r3
8112e100:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112e104:	e0bffd17 	ldw	r2,-12(fp)
8112e108:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
8112e10c:	d0e08917 	ldw	r3,-32220(gp)
8112e110:	e0bffd17 	ldw	r2,-12(fp)
8112e114:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
8112e118:	e0bffd17 	ldw	r2,-12(fp)
8112e11c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
8112e120:	e0bffd17 	ldw	r2,-12(fp)
8112e124:	d0a08915 	stw	r2,-32220(gp)
8112e128:	e0bff417 	ldw	r2,-48(fp)
8112e12c:	e0bff815 	stw	r2,-32(fp)
8112e130:	e0bff817 	ldw	r2,-32(fp)
8112e134:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112e138:	e0bff203 	ldbu	r2,-56(fp)
8112e13c:	10800058 	cmpnei	r2,r2,1
8112e140:	1000011e 	bne	r2,zero,8112e148 <OSMutexDel+0x2b4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112e144:	112b2f40 	call	8112b2f4 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
8112e148:	e0bfff17 	ldw	r2,-4(fp)
8112e14c:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
8112e150:	e03ff315 	stw	zero,-52(fp)
             break;
8112e154:	00000a06 	br	8112e180 <OSMutexDel+0x2ec>
8112e158:	e0bff417 	ldw	r2,-48(fp)
8112e15c:	e0bffb15 	stw	r2,-20(fp)
8112e160:	e0bffb17 	ldw	r2,-20(fp)
8112e164:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
8112e168:	e0bfff17 	ldw	r2,-4(fp)
8112e16c:	00c001c4 	movi	r3,7
8112e170:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
8112e174:	e0bffd17 	ldw	r2,-12(fp)
8112e178:	e0bff315 	stw	r2,-52(fp)
             break;
8112e17c:	0001883a 	nop
    }
    return (pevent_return);
8112e180:	e0bff317 	ldw	r2,-52(fp)
}
8112e184:	e037883a 	mov	sp,fp
8112e188:	dfc00117 	ldw	ra,4(sp)
8112e18c:	df000017 	ldw	fp,0(sp)
8112e190:	dec00204 	addi	sp,sp,8
8112e194:	f800283a 	ret

8112e198 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112e198:	deffee04 	addi	sp,sp,-72
8112e19c:	de00012e 	bgeu	sp,et,8112e1a4 <OSMutexPend+0xc>
8112e1a0:	003b68fa 	trap	3
8112e1a4:	dfc01115 	stw	ra,68(sp)
8112e1a8:	df001015 	stw	fp,64(sp)
8112e1ac:	df001004 	addi	fp,sp,64
8112e1b0:	e13ffd15 	stw	r4,-12(fp)
8112e1b4:	2805883a 	mov	r2,r5
8112e1b8:	e1bfff15 	stw	r6,-4(fp)
8112e1bc:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112e1c0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112e1c4:	e0bfff17 	ldw	r2,-4(fp)
8112e1c8:	10015626 	beq	r2,zero,8112e724 <OSMutexPend+0x58c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112e1cc:	e0bffd17 	ldw	r2,-12(fp)
8112e1d0:	1000041e 	bne	r2,zero,8112e1e4 <OSMutexPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112e1d4:	e0bfff17 	ldw	r2,-4(fp)
8112e1d8:	00c00104 	movi	r3,4
8112e1dc:	10c00005 	stb	r3,0(r2)
        return;
8112e1e0:	00015106 	br	8112e728 <OSMutexPend+0x590>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112e1e4:	e0bffd17 	ldw	r2,-12(fp)
8112e1e8:	10800003 	ldbu	r2,0(r2)
8112e1ec:	10803fcc 	andi	r2,r2,255
8112e1f0:	10800120 	cmpeqi	r2,r2,4
8112e1f4:	1000041e 	bne	r2,zero,8112e208 <OSMutexPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112e1f8:	e0bfff17 	ldw	r2,-4(fp)
8112e1fc:	00c00044 	movi	r3,1
8112e200:	10c00005 	stb	r3,0(r2)
        return;
8112e204:	00014806 	br	8112e728 <OSMutexPend+0x590>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112e208:	d0a08a03 	ldbu	r2,-32216(gp)
8112e20c:	10803fcc 	andi	r2,r2,255
8112e210:	10000426 	beq	r2,zero,8112e224 <OSMutexPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112e214:	e0bfff17 	ldw	r2,-4(fp)
8112e218:	00c00084 	movi	r3,2
8112e21c:	10c00005 	stb	r3,0(r2)
        return;
8112e220:	00014106 	br	8112e728 <OSMutexPend+0x590>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112e224:	d0a07803 	ldbu	r2,-32288(gp)
8112e228:	10803fcc 	andi	r2,r2,255
8112e22c:	10000426 	beq	r2,zero,8112e240 <OSMutexPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112e230:	e0bfff17 	ldw	r2,-4(fp)
8112e234:	00c00344 	movi	r3,13
8112e238:	10c00005 	stb	r3,0(r2)
        return;
8112e23c:	00013a06 	br	8112e728 <OSMutexPend+0x590>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e240:	0005303a 	rdctl	r2,status
8112e244:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e248:	e0fffc17 	ldw	r3,-16(fp)
8112e24c:	00bfff84 	movi	r2,-2
8112e250:	1884703a 	and	r2,r3,r2
8112e254:	1001703a 	wrctl	status,r2
  
  return context;
8112e258:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112e25c:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
8112e260:	e0bffd17 	ldw	r2,-12(fp)
8112e264:	1080020b 	ldhu	r2,8(r2)
8112e268:	10bfffcc 	andi	r2,r2,65535
8112e26c:	1004d23a 	srli	r2,r2,8
8112e270:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112e274:	e0bffd17 	ldw	r2,-12(fp)
8112e278:	1080020b 	ldhu	r2,8(r2)
8112e27c:	10803fcc 	andi	r2,r2,255
8112e280:	10803fd8 	cmpnei	r2,r2,255
8112e284:	1000271e 	bne	r2,zero,8112e324 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
8112e288:	e0bffd17 	ldw	r2,-12(fp)
8112e28c:	10c0020b 	ldhu	r3,8(r2)
8112e290:	00bfc004 	movi	r2,-256
8112e294:	1884703a 	and	r2,r3,r2
8112e298:	1007883a 	mov	r3,r2
8112e29c:	e0bffd17 	ldw	r2,-12(fp)
8112e2a0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
8112e2a4:	e0bffd17 	ldw	r2,-12(fp)
8112e2a8:	10c0020b 	ldhu	r3,8(r2)
8112e2ac:	d0a08b17 	ldw	r2,-32212(gp)
8112e2b0:	10800c83 	ldbu	r2,50(r2)
8112e2b4:	10803fcc 	andi	r2,r2,255
8112e2b8:	1884b03a 	or	r2,r3,r2
8112e2bc:	1007883a 	mov	r3,r2
8112e2c0:	e0bffd17 	ldw	r2,-12(fp)
8112e2c4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
8112e2c8:	d0e08b17 	ldw	r3,-32212(gp)
8112e2cc:	e0bffd17 	ldw	r2,-12(fp)
8112e2d0:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
8112e2d4:	d0a08b17 	ldw	r2,-32212(gp)
8112e2d8:	10800c83 	ldbu	r2,50(r2)
8112e2dc:	10803fcc 	andi	r2,r2,255
8112e2e0:	e0fff303 	ldbu	r3,-52(fp)
8112e2e4:	18800836 	bltu	r3,r2,8112e308 <OSMutexPend+0x170>
8112e2e8:	e0bff117 	ldw	r2,-60(fp)
8112e2ec:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e2f0:	e0bff217 	ldw	r2,-56(fp)
8112e2f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
8112e2f8:	e0bfff17 	ldw	r2,-4(fp)
8112e2fc:	00c01e04 	movi	r3,120
8112e300:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
8112e304:	00010806 	br	8112e728 <OSMutexPend+0x590>
8112e308:	e0bff117 	ldw	r2,-60(fp)
8112e30c:	e0bff415 	stw	r2,-48(fp)
8112e310:	e0bff417 	ldw	r2,-48(fp)
8112e314:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112e318:	e0bfff17 	ldw	r2,-4(fp)
8112e31c:	10000005 	stb	zero,0(r2)
        }
        return;
8112e320:	00010106 	br	8112e728 <OSMutexPend+0x590>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
8112e324:	e0bffd17 	ldw	r2,-12(fp)
8112e328:	1080020b 	ldhu	r2,8(r2)
8112e32c:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
8112e330:	e0bffd17 	ldw	r2,-12(fp)
8112e334:	10800117 	ldw	r2,4(r2)
8112e338:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
8112e33c:	e0bff717 	ldw	r2,-36(fp)
8112e340:	10800c83 	ldbu	r2,50(r2)
8112e344:	10803fcc 	andi	r2,r2,255
8112e348:	e0fff303 	ldbu	r3,-52(fp)
8112e34c:	1880b92e 	bgeu	r3,r2,8112e634 <OSMutexPend+0x49c>
        if (mprio > OSTCBCur->OSTCBPrio) {
8112e350:	d0a08b17 	ldw	r2,-32212(gp)
8112e354:	10800c83 	ldbu	r2,50(r2)
8112e358:	10c03fcc 	andi	r3,r2,255
8112e35c:	e0bff603 	ldbu	r2,-40(fp)
8112e360:	1880b42e 	bgeu	r3,r2,8112e634 <OSMutexPend+0x49c>
            y = ptcb->OSTCBY;
8112e364:	e0bff717 	ldw	r2,-36(fp)
8112e368:	10800d03 	ldbu	r2,52(r2)
8112e36c:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
8112e370:	e0fff803 	ldbu	r3,-32(fp)
8112e374:	d0a08744 	addi	r2,gp,-32227
8112e378:	1885883a 	add	r2,r3,r2
8112e37c:	10c00003 	ldbu	r3,0(r2)
8112e380:	e0bff717 	ldw	r2,-36(fp)
8112e384:	10800d43 	ldbu	r2,53(r2)
8112e388:	1884703a 	and	r2,r3,r2
8112e38c:	10803fcc 	andi	r2,r2,255
8112e390:	10001e26 	beq	r2,zero,8112e40c <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
8112e394:	e0fff803 	ldbu	r3,-32(fp)
8112e398:	e13ff803 	ldbu	r4,-32(fp)
8112e39c:	d0a08744 	addi	r2,gp,-32227
8112e3a0:	2085883a 	add	r2,r4,r2
8112e3a4:	10800003 	ldbu	r2,0(r2)
8112e3a8:	1009883a 	mov	r4,r2
8112e3ac:	e0bff717 	ldw	r2,-36(fp)
8112e3b0:	10800d43 	ldbu	r2,53(r2)
8112e3b4:	0084303a 	nor	r2,zero,r2
8112e3b8:	2084703a 	and	r2,r4,r2
8112e3bc:	1009883a 	mov	r4,r2
8112e3c0:	d0a08744 	addi	r2,gp,-32227
8112e3c4:	1885883a 	add	r2,r3,r2
8112e3c8:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
8112e3cc:	e0fff803 	ldbu	r3,-32(fp)
8112e3d0:	d0a08744 	addi	r2,gp,-32227
8112e3d4:	1885883a 	add	r2,r3,r2
8112e3d8:	10800003 	ldbu	r2,0(r2)
8112e3dc:	10803fcc 	andi	r2,r2,255
8112e3e0:	1000071e 	bne	r2,zero,8112e400 <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
8112e3e4:	e0bff717 	ldw	r2,-36(fp)
8112e3e8:	10800d83 	ldbu	r2,54(r2)
8112e3ec:	0084303a 	nor	r2,zero,r2
8112e3f0:	1007883a 	mov	r3,r2
8112e3f4:	d0a08703 	ldbu	r2,-32228(gp)
8112e3f8:	1884703a 	and	r2,r3,r2
8112e3fc:	d0a08705 	stb	r2,-32228(gp)
                }
                rdy = OS_TRUE;
8112e400:	00800044 	movi	r2,1
8112e404:	e0bff005 	stb	r2,-64(fp)
8112e408:	00002a06 	br	8112e4b4 <OSMutexPend+0x31c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112e40c:	e0bff717 	ldw	r2,-36(fp)
8112e410:	10800717 	ldw	r2,28(r2)
8112e414:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
8112e418:	e0bff917 	ldw	r2,-28(fp)
8112e41c:	10002426 	beq	r2,zero,8112e4b0 <OSMutexPend+0x318>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
8112e420:	e0bff717 	ldw	r2,-36(fp)
8112e424:	10800d03 	ldbu	r2,52(r2)
8112e428:	10803fcc 	andi	r2,r2,255
8112e42c:	e0fff717 	ldw	r3,-36(fp)
8112e430:	18c00d03 	ldbu	r3,52(r3)
8112e434:	18c03fcc 	andi	r3,r3,255
8112e438:	e13ff917 	ldw	r4,-28(fp)
8112e43c:	20c7883a 	add	r3,r4,r3
8112e440:	18c002c4 	addi	r3,r3,11
8112e444:	18c00003 	ldbu	r3,0(r3)
8112e448:	1809883a 	mov	r4,r3
8112e44c:	e0fff717 	ldw	r3,-36(fp)
8112e450:	18c00d43 	ldbu	r3,53(r3)
8112e454:	00c6303a 	nor	r3,zero,r3
8112e458:	20c6703a 	and	r3,r4,r3
8112e45c:	1809883a 	mov	r4,r3
8112e460:	e0fff917 	ldw	r3,-28(fp)
8112e464:	1887883a 	add	r3,r3,r2
8112e468:	18c002c4 	addi	r3,r3,11
8112e46c:	19000005 	stb	r4,0(r3)
8112e470:	e0fff917 	ldw	r3,-28(fp)
8112e474:	1885883a 	add	r2,r3,r2
8112e478:	108002c4 	addi	r2,r2,11
8112e47c:	10800003 	ldbu	r2,0(r2)
8112e480:	10803fcc 	andi	r2,r2,255
8112e484:	10000a1e 	bne	r2,zero,8112e4b0 <OSMutexPend+0x318>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
8112e488:	e0bff917 	ldw	r2,-28(fp)
8112e48c:	10800283 	ldbu	r2,10(r2)
8112e490:	1007883a 	mov	r3,r2
8112e494:	e0bff717 	ldw	r2,-36(fp)
8112e498:	10800d83 	ldbu	r2,54(r2)
8112e49c:	0084303a 	nor	r2,zero,r2
8112e4a0:	1884703a 	and	r2,r3,r2
8112e4a4:	1007883a 	mov	r3,r2
8112e4a8:	e0bff917 	ldw	r2,-28(fp)
8112e4ac:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
8112e4b0:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
8112e4b4:	e0bff717 	ldw	r2,-36(fp)
8112e4b8:	e0fff303 	ldbu	r3,-52(fp)
8112e4bc:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
8112e4c0:	e0bff717 	ldw	r2,-36(fp)
8112e4c4:	10800c83 	ldbu	r2,50(r2)
8112e4c8:	10803fcc 	andi	r2,r2,255
8112e4cc:	1004d0fa 	srli	r2,r2,3
8112e4d0:	1007883a 	mov	r3,r2
8112e4d4:	e0bff717 	ldw	r2,-36(fp)
8112e4d8:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
8112e4dc:	e0bff717 	ldw	r2,-36(fp)
8112e4e0:	10800c83 	ldbu	r2,50(r2)
8112e4e4:	108001cc 	andi	r2,r2,7
8112e4e8:	1007883a 	mov	r3,r2
8112e4ec:	e0bff717 	ldw	r2,-36(fp)
8112e4f0:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
8112e4f4:	e0bff717 	ldw	r2,-36(fp)
8112e4f8:	10800d03 	ldbu	r2,52(r2)
8112e4fc:	10803fcc 	andi	r2,r2,255
8112e500:	00c00044 	movi	r3,1
8112e504:	1884983a 	sll	r2,r3,r2
8112e508:	1007883a 	mov	r3,r2
8112e50c:	e0bff717 	ldw	r2,-36(fp)
8112e510:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
8112e514:	e0bff717 	ldw	r2,-36(fp)
8112e518:	10800cc3 	ldbu	r2,51(r2)
8112e51c:	10803fcc 	andi	r2,r2,255
8112e520:	00c00044 	movi	r3,1
8112e524:	1884983a 	sll	r2,r3,r2
8112e528:	1007883a 	mov	r3,r2
8112e52c:	e0bff717 	ldw	r2,-36(fp)
8112e530:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
8112e534:	e0bff003 	ldbu	r2,-64(fp)
8112e538:	10800058 	cmpnei	r2,r2,1
8112e53c:	1000161e 	bne	r2,zero,8112e598 <OSMutexPend+0x400>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
8112e540:	e0bff717 	ldw	r2,-36(fp)
8112e544:	10c00d83 	ldbu	r3,54(r2)
8112e548:	d0a08703 	ldbu	r2,-32228(gp)
8112e54c:	1884b03a 	or	r2,r3,r2
8112e550:	d0a08705 	stb	r2,-32228(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112e554:	e0bff717 	ldw	r2,-36(fp)
8112e558:	10800d03 	ldbu	r2,52(r2)
8112e55c:	10c03fcc 	andi	r3,r2,255
8112e560:	e0bff717 	ldw	r2,-36(fp)
8112e564:	10800d03 	ldbu	r2,52(r2)
8112e568:	11003fcc 	andi	r4,r2,255
8112e56c:	d0a08744 	addi	r2,gp,-32227
8112e570:	2085883a 	add	r2,r4,r2
8112e574:	11000003 	ldbu	r4,0(r2)
8112e578:	e0bff717 	ldw	r2,-36(fp)
8112e57c:	10800d43 	ldbu	r2,53(r2)
8112e580:	2084b03a 	or	r2,r4,r2
8112e584:	1009883a 	mov	r4,r2
8112e588:	d0a08744 	addi	r2,gp,-32227
8112e58c:	1885883a 	add	r2,r3,r2
8112e590:	11000005 	stb	r4,0(r2)
8112e594:	00001f06 	br	8112e614 <OSMutexPend+0x47c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112e598:	e0bff717 	ldw	r2,-36(fp)
8112e59c:	10800717 	ldw	r2,28(r2)
8112e5a0:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
8112e5a4:	e0bff917 	ldw	r2,-28(fp)
8112e5a8:	10001a26 	beq	r2,zero,8112e614 <OSMutexPend+0x47c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
8112e5ac:	e0bff917 	ldw	r2,-28(fp)
8112e5b0:	10c00283 	ldbu	r3,10(r2)
8112e5b4:	e0bff717 	ldw	r2,-36(fp)
8112e5b8:	10800d83 	ldbu	r2,54(r2)
8112e5bc:	1884b03a 	or	r2,r3,r2
8112e5c0:	1007883a 	mov	r3,r2
8112e5c4:	e0bff917 	ldw	r2,-28(fp)
8112e5c8:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112e5cc:	e0bff717 	ldw	r2,-36(fp)
8112e5d0:	10800d03 	ldbu	r2,52(r2)
8112e5d4:	10803fcc 	andi	r2,r2,255
8112e5d8:	e0fff717 	ldw	r3,-36(fp)
8112e5dc:	18c00d03 	ldbu	r3,52(r3)
8112e5e0:	18c03fcc 	andi	r3,r3,255
8112e5e4:	e13ff917 	ldw	r4,-28(fp)
8112e5e8:	20c7883a 	add	r3,r4,r3
8112e5ec:	18c002c4 	addi	r3,r3,11
8112e5f0:	19000003 	ldbu	r4,0(r3)
8112e5f4:	e0fff717 	ldw	r3,-36(fp)
8112e5f8:	18c00d43 	ldbu	r3,53(r3)
8112e5fc:	20c6b03a 	or	r3,r4,r3
8112e600:	1809883a 	mov	r4,r3
8112e604:	e0fff917 	ldw	r3,-28(fp)
8112e608:	1885883a 	add	r2,r3,r2
8112e60c:	108002c4 	addi	r2,r2,11
8112e610:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
8112e614:	e0fff303 	ldbu	r3,-52(fp)
8112e618:	00a04574 	movhi	r2,33045
8112e61c:	1081c704 	addi	r2,r2,1820
8112e620:	18c7883a 	add	r3,r3,r3
8112e624:	18c7883a 	add	r3,r3,r3
8112e628:	10c5883a 	add	r2,r2,r3
8112e62c:	e0fff717 	ldw	r3,-36(fp)
8112e630:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
8112e634:	d0a08b17 	ldw	r2,-32212(gp)
8112e638:	d0e08b17 	ldw	r3,-32212(gp)
8112e63c:	18c00c03 	ldbu	r3,48(r3)
8112e640:	18c00414 	ori	r3,r3,16
8112e644:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112e648:	d0a08b17 	ldw	r2,-32212(gp)
8112e64c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
8112e650:	d0a08b17 	ldw	r2,-32212(gp)
8112e654:	e0fffe0b 	ldhu	r3,-8(fp)
8112e658:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112e65c:	e13ffd17 	ldw	r4,-12(fp)
8112e660:	112a9d80 	call	8112a9d8 <OS_EventTaskWait>
8112e664:	e0bff117 	ldw	r2,-60(fp)
8112e668:	e0bffb15 	stw	r2,-20(fp)
8112e66c:	e0bffb17 	ldw	r2,-20(fp)
8112e670:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112e674:	112b2f40 	call	8112b2f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e678:	0005303a 	rdctl	r2,status
8112e67c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e680:	e0fff517 	ldw	r3,-44(fp)
8112e684:	00bfff84 	movi	r2,-2
8112e688:	1884703a 	and	r2,r3,r2
8112e68c:	1001703a 	wrctl	status,r2
  
  return context;
8112e690:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
8112e694:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112e698:	d0a08b17 	ldw	r2,-32212(gp)
8112e69c:	10800c43 	ldbu	r2,49(r2)
8112e6a0:	10803fcc 	andi	r2,r2,255
8112e6a4:	10000326 	beq	r2,zero,8112e6b4 <OSMutexPend+0x51c>
8112e6a8:	108000a0 	cmpeqi	r2,r2,2
8112e6ac:	1000041e 	bne	r2,zero,8112e6c0 <OSMutexPend+0x528>
8112e6b0:	00000706 	br	8112e6d0 <OSMutexPend+0x538>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112e6b4:	e0bfff17 	ldw	r2,-4(fp)
8112e6b8:	10000005 	stb	zero,0(r2)
             break;
8112e6bc:	00000c06 	br	8112e6f0 <OSMutexPend+0x558>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
8112e6c0:	e0bfff17 	ldw	r2,-4(fp)
8112e6c4:	00c00384 	movi	r3,14
8112e6c8:	10c00005 	stb	r3,0(r2)
             break;
8112e6cc:	00000806 	br	8112e6f0 <OSMutexPend+0x558>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112e6d0:	d0a08b17 	ldw	r2,-32212(gp)
8112e6d4:	e17ffd17 	ldw	r5,-12(fp)
8112e6d8:	1009883a 	mov	r4,r2
8112e6dc:	112ac480 	call	8112ac48 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
8112e6e0:	e0bfff17 	ldw	r2,-4(fp)
8112e6e4:	00c00284 	movi	r3,10
8112e6e8:	10c00005 	stb	r3,0(r2)
             break;
8112e6ec:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112e6f0:	d0a08b17 	ldw	r2,-32212(gp)
8112e6f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112e6f8:	d0a08b17 	ldw	r2,-32212(gp)
8112e6fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112e700:	d0a08b17 	ldw	r2,-32212(gp)
8112e704:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112e708:	d0a08b17 	ldw	r2,-32212(gp)
8112e70c:	10000815 	stw	zero,32(r2)
8112e710:	e0bff117 	ldw	r2,-60(fp)
8112e714:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e718:	e0bffa17 	ldw	r2,-24(fp)
8112e71c:	1001703a 	wrctl	status,r2
8112e720:	00000106 	br	8112e728 <OSMutexPend+0x590>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
8112e724:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112e728:	e037883a 	mov	sp,fp
8112e72c:	dfc00117 	ldw	ra,4(sp)
8112e730:	df000017 	ldw	fp,0(sp)
8112e734:	dec00204 	addi	sp,sp,8
8112e738:	f800283a 	ret

8112e73c <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
8112e73c:	defff604 	addi	sp,sp,-40
8112e740:	de00012e 	bgeu	sp,et,8112e748 <OSMutexPost+0xc>
8112e744:	003b68fa 	trap	3
8112e748:	dfc00915 	stw	ra,36(sp)
8112e74c:	df000815 	stw	fp,32(sp)
8112e750:	df000804 	addi	fp,sp,32
8112e754:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112e758:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112e75c:	d0a08a03 	ldbu	r2,-32216(gp)
8112e760:	10803fcc 	andi	r2,r2,255
8112e764:	10000226 	beq	r2,zero,8112e770 <OSMutexPost+0x34>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
8112e768:	00800144 	movi	r2,5
8112e76c:	00007606 	br	8112e948 <OSMutexPost+0x20c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112e770:	e0bfff17 	ldw	r2,-4(fp)
8112e774:	1000021e 	bne	r2,zero,8112e780 <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
8112e778:	00800104 	movi	r2,4
8112e77c:	00007206 	br	8112e948 <OSMutexPost+0x20c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
8112e780:	e0bfff17 	ldw	r2,-4(fp)
8112e784:	10800003 	ldbu	r2,0(r2)
8112e788:	10803fcc 	andi	r2,r2,255
8112e78c:	10800120 	cmpeqi	r2,r2,4
8112e790:	1000021e 	bne	r2,zero,8112e79c <OSMutexPost+0x60>
        return (OS_ERR_EVENT_TYPE);
8112e794:	00800044 	movi	r2,1
8112e798:	00006b06 	br	8112e948 <OSMutexPost+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e79c:	0005303a 	rdctl	r2,status
8112e7a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e7a4:	e0fffe17 	ldw	r3,-8(fp)
8112e7a8:	00bfff84 	movi	r2,-2
8112e7ac:	1884703a 	and	r2,r3,r2
8112e7b0:	1001703a 	wrctl	status,r2
  
  return context;
8112e7b4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112e7b8:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
8112e7bc:	e0bfff17 	ldw	r2,-4(fp)
8112e7c0:	1080020b 	ldhu	r2,8(r2)
8112e7c4:	10bfffcc 	andi	r2,r2,65535
8112e7c8:	1004d23a 	srli	r2,r2,8
8112e7cc:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
8112e7d0:	e0bfff17 	ldw	r2,-4(fp)
8112e7d4:	1080020b 	ldhu	r2,8(r2)
8112e7d8:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
8112e7dc:	e0bfff17 	ldw	r2,-4(fp)
8112e7e0:	10c00117 	ldw	r3,4(r2)
8112e7e4:	d0a08b17 	ldw	r2,-32212(gp)
8112e7e8:	18800626 	beq	r3,r2,8112e804 <OSMutexPost+0xc8>
8112e7ec:	e0bff817 	ldw	r2,-32(fp)
8112e7f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e7f4:	e0bff917 	ldw	r2,-28(fp)
8112e7f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
8112e7fc:	00801904 	movi	r2,100
8112e800:	00005106 	br	8112e948 <OSMutexPost+0x20c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
8112e804:	d0a08b17 	ldw	r2,-32212(gp)
8112e808:	10800c83 	ldbu	r2,50(r2)
8112e80c:	10c03fcc 	andi	r3,r2,255
8112e810:	e0bffa03 	ldbu	r2,-24(fp)
8112e814:	1880051e 	bne	r3,r2,8112e82c <OSMutexPost+0xf0>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
8112e818:	d0a08b17 	ldw	r2,-32212(gp)
8112e81c:	e0fffa43 	ldbu	r3,-23(fp)
8112e820:	180b883a 	mov	r5,r3
8112e824:	1009883a 	mov	r4,r2
8112e828:	112ead00 	call	8112ead0 <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
8112e82c:	e0fffa03 	ldbu	r3,-24(fp)
8112e830:	00a04574 	movhi	r2,33045
8112e834:	1081c704 	addi	r2,r2,1820
8112e838:	18c7883a 	add	r3,r3,r3
8112e83c:	18c7883a 	add	r3,r3,r3
8112e840:	10c5883a 	add	r2,r2,r3
8112e844:	00c00044 	movi	r3,1
8112e848:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
8112e84c:	e0bfff17 	ldw	r2,-4(fp)
8112e850:	10800283 	ldbu	r2,10(r2)
8112e854:	10803fcc 	andi	r2,r2,255
8112e858:	10002e26 	beq	r2,zero,8112e914 <OSMutexPost+0x1d8>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112e85c:	000f883a 	mov	r7,zero
8112e860:	01800404 	movi	r6,16
8112e864:	000b883a 	mov	r5,zero
8112e868:	e13fff17 	ldw	r4,-4(fp)
8112e86c:	112a8380 	call	8112a838 <OS_EventTaskRdy>
8112e870:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
8112e874:	e0bfff17 	ldw	r2,-4(fp)
8112e878:	10c0020b 	ldhu	r3,8(r2)
8112e87c:	00bfc004 	movi	r2,-256
8112e880:	1884703a 	and	r2,r3,r2
8112e884:	1007883a 	mov	r3,r2
8112e888:	e0bfff17 	ldw	r2,-4(fp)
8112e88c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
8112e890:	e0bfff17 	ldw	r2,-4(fp)
8112e894:	10c0020b 	ldhu	r3,8(r2)
8112e898:	e0bffa43 	ldbu	r2,-23(fp)
8112e89c:	1884b03a 	or	r2,r3,r2
8112e8a0:	1007883a 	mov	r3,r2
8112e8a4:	e0bfff17 	ldw	r2,-4(fp)
8112e8a8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
8112e8ac:	e0fffa43 	ldbu	r3,-23(fp)
8112e8b0:	00a04574 	movhi	r2,33045
8112e8b4:	1081c704 	addi	r2,r2,1820
8112e8b8:	18c7883a 	add	r3,r3,r3
8112e8bc:	18c7883a 	add	r3,r3,r3
8112e8c0:	10c5883a 	add	r2,r2,r3
8112e8c4:	10c00017 	ldw	r3,0(r2)
8112e8c8:	e0bfff17 	ldw	r2,-4(fp)
8112e8cc:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
8112e8d0:	e0bffa43 	ldbu	r2,-23(fp)
8112e8d4:	e0fffa03 	ldbu	r3,-24(fp)
8112e8d8:	18800736 	bltu	r3,r2,8112e8f8 <OSMutexPost+0x1bc>
8112e8dc:	e0bff817 	ldw	r2,-32(fp)
8112e8e0:	e0bffb15 	stw	r2,-20(fp)
8112e8e4:	e0bffb17 	ldw	r2,-20(fp)
8112e8e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112e8ec:	112b2f40 	call	8112b2f4 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
8112e8f0:	00801e04 	movi	r2,120
8112e8f4:	00001406 	br	8112e948 <OSMutexPost+0x20c>
8112e8f8:	e0bff817 	ldw	r2,-32(fp)
8112e8fc:	e0bffc15 	stw	r2,-16(fp)
8112e900:	e0bffc17 	ldw	r2,-16(fp)
8112e904:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112e908:	112b2f40 	call	8112b2f4 <OS_Sched>
            return (OS_ERR_NONE);
8112e90c:	0005883a 	mov	r2,zero
8112e910:	00000d06 	br	8112e948 <OSMutexPost+0x20c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
8112e914:	e0bfff17 	ldw	r2,-4(fp)
8112e918:	1080020b 	ldhu	r2,8(r2)
8112e91c:	10803fd4 	ori	r2,r2,255
8112e920:	1007883a 	mov	r3,r2
8112e924:	e0bfff17 	ldw	r2,-4(fp)
8112e928:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
8112e92c:	e0bfff17 	ldw	r2,-4(fp)
8112e930:	10000115 	stw	zero,4(r2)
8112e934:	e0bff817 	ldw	r2,-32(fp)
8112e938:	e0bffd15 	stw	r2,-12(fp)
8112e93c:	e0bffd17 	ldw	r2,-12(fp)
8112e940:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e944:	0005883a 	mov	r2,zero
}
8112e948:	e037883a 	mov	sp,fp
8112e94c:	dfc00117 	ldw	ra,4(sp)
8112e950:	df000017 	ldw	fp,0(sp)
8112e954:	dec00204 	addi	sp,sp,8
8112e958:	f800283a 	ret

8112e95c <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
8112e95c:	defff704 	addi	sp,sp,-36
8112e960:	de00012e 	bgeu	sp,et,8112e968 <OSMutexQuery+0xc>
8112e964:	003b68fa 	trap	3
8112e968:	df000815 	stw	fp,32(sp)
8112e96c:	df000804 	addi	fp,sp,32
8112e970:	e13ffe15 	stw	r4,-8(fp)
8112e974:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112e978:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112e97c:	d0a08a03 	ldbu	r2,-32216(gp)
8112e980:	10803fcc 	andi	r2,r2,255
8112e984:	10000226 	beq	r2,zero,8112e990 <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
8112e988:	00800184 	movi	r2,6
8112e98c:	00004c06 	br	8112eac0 <OSMutexQuery+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112e990:	e0bffe17 	ldw	r2,-8(fp)
8112e994:	1000021e 	bne	r2,zero,8112e9a0 <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
8112e998:	00800104 	movi	r2,4
8112e99c:	00004806 	br	8112eac0 <OSMutexQuery+0x164>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
8112e9a0:	e0bfff17 	ldw	r2,-4(fp)
8112e9a4:	1000021e 	bne	r2,zero,8112e9b0 <OSMutexQuery+0x54>
        return (OS_ERR_PDATA_NULL);
8112e9a8:	00800244 	movi	r2,9
8112e9ac:	00004406 	br	8112eac0 <OSMutexQuery+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112e9b0:	e0bffe17 	ldw	r2,-8(fp)
8112e9b4:	10800003 	ldbu	r2,0(r2)
8112e9b8:	10803fcc 	andi	r2,r2,255
8112e9bc:	10800120 	cmpeqi	r2,r2,4
8112e9c0:	1000021e 	bne	r2,zero,8112e9cc <OSMutexQuery+0x70>
        return (OS_ERR_EVENT_TYPE);
8112e9c4:	00800044 	movi	r2,1
8112e9c8:	00003d06 	br	8112eac0 <OSMutexQuery+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e9cc:	0005303a 	rdctl	r2,status
8112e9d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e9d4:	e0fffd17 	ldw	r3,-12(fp)
8112e9d8:	00bfff84 	movi	r2,-2
8112e9dc:	1884703a 	and	r2,r3,r2
8112e9e0:	1001703a 	wrctl	status,r2
  
  return context;
8112e9e4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112e9e8:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
8112e9ec:	e0bffe17 	ldw	r2,-8(fp)
8112e9f0:	1080020b 	ldhu	r2,8(r2)
8112e9f4:	10bfffcc 	andi	r2,r2,65535
8112e9f8:	1004d23a 	srli	r2,r2,8
8112e9fc:	1007883a 	mov	r3,r2
8112ea00:	e0bfff17 	ldw	r2,-4(fp)
8112ea04:	10c00245 	stb	r3,9(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
8112ea08:	e0bffe17 	ldw	r2,-8(fp)
8112ea0c:	1080020b 	ldhu	r2,8(r2)
8112ea10:	1007883a 	mov	r3,r2
8112ea14:	e0bfff17 	ldw	r2,-4(fp)
8112ea18:	10c00205 	stb	r3,8(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
8112ea1c:	e0bfff17 	ldw	r2,-4(fp)
8112ea20:	10800203 	ldbu	r2,8(r2)
8112ea24:	10803fcc 	andi	r2,r2,255
8112ea28:	10803fd8 	cmpnei	r2,r2,255
8112ea2c:	1000041e 	bne	r2,zero,8112ea40 <OSMutexQuery+0xe4>
        p_mutex_data->OSValue = OS_TRUE;
8112ea30:	e0bfff17 	ldw	r2,-4(fp)
8112ea34:	00c00044 	movi	r3,1
8112ea38:	10c001c5 	stb	r3,7(r2)
8112ea3c:	00000206 	br	8112ea48 <OSMutexQuery+0xec>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
8112ea40:	e0bfff17 	ldw	r2,-4(fp)
8112ea44:	100001c5 	stb	zero,7(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
8112ea48:	e0bffe17 	ldw	r2,-8(fp)
8112ea4c:	10c00283 	ldbu	r3,10(r2)
8112ea50:	e0bfff17 	ldw	r2,-4(fp)
8112ea54:	10c00185 	stb	r3,6(r2)
    psrc                      = &pevent->OSEventTbl[0];
8112ea58:	e0bffe17 	ldw	r2,-8(fp)
8112ea5c:	108002c4 	addi	r2,r2,11
8112ea60:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
8112ea64:	e0bfff17 	ldw	r2,-4(fp)
8112ea68:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112ea6c:	e03ff805 	stb	zero,-32(fp)
8112ea70:	00000b06 	br	8112eaa0 <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
8112ea74:	e0bffa17 	ldw	r2,-24(fp)
8112ea78:	10c00044 	addi	r3,r2,1
8112ea7c:	e0fffa15 	stw	r3,-24(fp)
8112ea80:	e0fff917 	ldw	r3,-28(fp)
8112ea84:	19000044 	addi	r4,r3,1
8112ea88:	e13ff915 	stw	r4,-28(fp)
8112ea8c:	18c00003 	ldbu	r3,0(r3)
8112ea90:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112ea94:	e0bff803 	ldbu	r2,-32(fp)
8112ea98:	10800044 	addi	r2,r2,1
8112ea9c:	e0bff805 	stb	r2,-32(fp)
8112eaa0:	e0bff803 	ldbu	r2,-32(fp)
8112eaa4:	108001b0 	cmpltui	r2,r2,6
8112eaa8:	103ff21e 	bne	r2,zero,8112ea74 <__reset+0xfb10ea74>
8112eaac:	e0bffb17 	ldw	r2,-20(fp)
8112eab0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112eab4:	e0bffc17 	ldw	r2,-16(fp)
8112eab8:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112eabc:	0005883a 	mov	r2,zero
}
8112eac0:	e037883a 	mov	sp,fp
8112eac4:	df000017 	ldw	fp,0(sp)
8112eac8:	dec00104 	addi	sp,sp,4
8112eacc:	f800283a 	ret

8112ead0 <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
8112ead0:	defffc04 	addi	sp,sp,-16
8112ead4:	de00012e 	bgeu	sp,et,8112eadc <OSMutex_RdyAtPrio+0xc>
8112ead8:	003b68fa 	trap	3
8112eadc:	df000315 	stw	fp,12(sp)
8112eae0:	df000304 	addi	fp,sp,12
8112eae4:	e13ffe15 	stw	r4,-8(fp)
8112eae8:	2805883a 	mov	r2,r5
8112eaec:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
8112eaf0:	e0bffe17 	ldw	r2,-8(fp)
8112eaf4:	10800d03 	ldbu	r2,52(r2)
8112eaf8:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
8112eafc:	e0fffd03 	ldbu	r3,-12(fp)
8112eb00:	e13ffd03 	ldbu	r4,-12(fp)
8112eb04:	d0a08744 	addi	r2,gp,-32227
8112eb08:	2085883a 	add	r2,r4,r2
8112eb0c:	10800003 	ldbu	r2,0(r2)
8112eb10:	1009883a 	mov	r4,r2
8112eb14:	e0bffe17 	ldw	r2,-8(fp)
8112eb18:	10800d43 	ldbu	r2,53(r2)
8112eb1c:	0084303a 	nor	r2,zero,r2
8112eb20:	2084703a 	and	r2,r4,r2
8112eb24:	1009883a 	mov	r4,r2
8112eb28:	d0a08744 	addi	r2,gp,-32227
8112eb2c:	1885883a 	add	r2,r3,r2
8112eb30:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112eb34:	e0fffd03 	ldbu	r3,-12(fp)
8112eb38:	d0a08744 	addi	r2,gp,-32227
8112eb3c:	1885883a 	add	r2,r3,r2
8112eb40:	10800003 	ldbu	r2,0(r2)
8112eb44:	10803fcc 	andi	r2,r2,255
8112eb48:	1000071e 	bne	r2,zero,8112eb68 <OSMutex_RdyAtPrio+0x98>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112eb4c:	e0bffe17 	ldw	r2,-8(fp)
8112eb50:	10800d83 	ldbu	r2,54(r2)
8112eb54:	0084303a 	nor	r2,zero,r2
8112eb58:	1007883a 	mov	r3,r2
8112eb5c:	d0a08703 	ldbu	r2,-32228(gp)
8112eb60:	1884703a 	and	r2,r3,r2
8112eb64:	d0a08705 	stb	r2,-32228(gp)
    }
    ptcb->OSTCBPrio         = prio;
8112eb68:	e0bffe17 	ldw	r2,-8(fp)
8112eb6c:	e0ffff03 	ldbu	r3,-4(fp)
8112eb70:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
8112eb74:	e0bfff03 	ldbu	r2,-4(fp)
8112eb78:	1004d0fa 	srli	r2,r2,3
8112eb7c:	108001cc 	andi	r2,r2,7
8112eb80:	1007883a 	mov	r3,r2
8112eb84:	e0bffe17 	ldw	r2,-8(fp)
8112eb88:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
8112eb8c:	e0bfff03 	ldbu	r2,-4(fp)
8112eb90:	108001cc 	andi	r2,r2,7
8112eb94:	1007883a 	mov	r3,r2
8112eb98:	e0bffe17 	ldw	r2,-8(fp)
8112eb9c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
8112eba0:	e0bffe17 	ldw	r2,-8(fp)
8112eba4:	10800d03 	ldbu	r2,52(r2)
8112eba8:	10803fcc 	andi	r2,r2,255
8112ebac:	00c00044 	movi	r3,1
8112ebb0:	1884983a 	sll	r2,r3,r2
8112ebb4:	1007883a 	mov	r3,r2
8112ebb8:	e0bffe17 	ldw	r2,-8(fp)
8112ebbc:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
8112ebc0:	e0bffe17 	ldw	r2,-8(fp)
8112ebc4:	10800cc3 	ldbu	r2,51(r2)
8112ebc8:	10803fcc 	andi	r2,r2,255
8112ebcc:	00c00044 	movi	r3,1
8112ebd0:	1884983a 	sll	r2,r3,r2
8112ebd4:	1007883a 	mov	r3,r2
8112ebd8:	e0bffe17 	ldw	r2,-8(fp)
8112ebdc:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
8112ebe0:	e0bffe17 	ldw	r2,-8(fp)
8112ebe4:	10c00d83 	ldbu	r3,54(r2)
8112ebe8:	d0a08703 	ldbu	r2,-32228(gp)
8112ebec:	1884b03a 	or	r2,r3,r2
8112ebf0:	d0a08705 	stb	r2,-32228(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112ebf4:	e0bffe17 	ldw	r2,-8(fp)
8112ebf8:	10800d03 	ldbu	r2,52(r2)
8112ebfc:	10c03fcc 	andi	r3,r2,255
8112ec00:	e0bffe17 	ldw	r2,-8(fp)
8112ec04:	10800d03 	ldbu	r2,52(r2)
8112ec08:	11003fcc 	andi	r4,r2,255
8112ec0c:	d0a08744 	addi	r2,gp,-32227
8112ec10:	2085883a 	add	r2,r4,r2
8112ec14:	11000003 	ldbu	r4,0(r2)
8112ec18:	e0bffe17 	ldw	r2,-8(fp)
8112ec1c:	10800d43 	ldbu	r2,53(r2)
8112ec20:	2084b03a 	or	r2,r4,r2
8112ec24:	1009883a 	mov	r4,r2
8112ec28:	d0a08744 	addi	r2,gp,-32227
8112ec2c:	1885883a 	add	r2,r3,r2
8112ec30:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
8112ec34:	e0ffff03 	ldbu	r3,-4(fp)
8112ec38:	00a04574 	movhi	r2,33045
8112ec3c:	1081c704 	addi	r2,r2,1820
8112ec40:	18c7883a 	add	r3,r3,r3
8112ec44:	18c7883a 	add	r3,r3,r3
8112ec48:	10c5883a 	add	r2,r2,r3
8112ec4c:	e0fffe17 	ldw	r3,-8(fp)
8112ec50:	10c00015 	stw	r3,0(r2)
}
8112ec54:	0001883a 	nop
8112ec58:	e037883a 	mov	sp,fp
8112ec5c:	df000017 	ldw	fp,0(sp)
8112ec60:	dec00104 	addi	sp,sp,4
8112ec64:	f800283a 	ret

8112ec68 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
8112ec68:	defff804 	addi	sp,sp,-32
8112ec6c:	de00012e 	bgeu	sp,et,8112ec74 <OSQAccept+0xc>
8112ec70:	003b68fa 	trap	3
8112ec74:	df000715 	stw	fp,28(sp)
8112ec78:	df000704 	addi	fp,sp,28
8112ec7c:	e13ffe15 	stw	r4,-8(fp)
8112ec80:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ec84:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112ec88:	e0bfff17 	ldw	r2,-4(fp)
8112ec8c:	1000021e 	bne	r2,zero,8112ec98 <OSQAccept+0x30>
        return ((void *)0);
8112ec90:	0005883a 	mov	r2,zero
8112ec94:	00004206 	br	8112eda0 <OSQAccept+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112ec98:	e0bffe17 	ldw	r2,-8(fp)
8112ec9c:	1000051e 	bne	r2,zero,8112ecb4 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112eca0:	e0bfff17 	ldw	r2,-4(fp)
8112eca4:	00c00104 	movi	r3,4
8112eca8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112ecac:	0005883a 	mov	r2,zero
8112ecb0:	00003b06 	br	8112eda0 <OSQAccept+0x138>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112ecb4:	e0bffe17 	ldw	r2,-8(fp)
8112ecb8:	10800003 	ldbu	r2,0(r2)
8112ecbc:	10803fcc 	andi	r2,r2,255
8112ecc0:	108000a0 	cmpeqi	r2,r2,2
8112ecc4:	1000051e 	bne	r2,zero,8112ecdc <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112ecc8:	e0bfff17 	ldw	r2,-4(fp)
8112eccc:	00c00044 	movi	r3,1
8112ecd0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112ecd4:	0005883a 	mov	r2,zero
8112ecd8:	00003106 	br	8112eda0 <OSQAccept+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ecdc:	0005303a 	rdctl	r2,status
8112ece0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ece4:	e0fffd17 	ldw	r3,-12(fp)
8112ece8:	00bfff84 	movi	r2,-2
8112ecec:	1884703a 	and	r2,r3,r2
8112ecf0:	1001703a 	wrctl	status,r2
  
  return context;
8112ecf4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112ecf8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112ecfc:	e0bffe17 	ldw	r2,-8(fp)
8112ed00:	10800117 	ldw	r2,4(r2)
8112ed04:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112ed08:	e0bffc17 	ldw	r2,-16(fp)
8112ed0c:	1080058b 	ldhu	r2,22(r2)
8112ed10:	10bfffcc 	andi	r2,r2,65535
8112ed14:	10001926 	beq	r2,zero,8112ed7c <OSQAccept+0x114>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112ed18:	e0bffc17 	ldw	r2,-16(fp)
8112ed1c:	10800417 	ldw	r2,16(r2)
8112ed20:	11000104 	addi	r4,r2,4
8112ed24:	e0fffc17 	ldw	r3,-16(fp)
8112ed28:	19000415 	stw	r4,16(r3)
8112ed2c:	10800017 	ldw	r2,0(r2)
8112ed30:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112ed34:	e0bffc17 	ldw	r2,-16(fp)
8112ed38:	1080058b 	ldhu	r2,22(r2)
8112ed3c:	10bfffc4 	addi	r2,r2,-1
8112ed40:	1007883a 	mov	r3,r2
8112ed44:	e0bffc17 	ldw	r2,-16(fp)
8112ed48:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112ed4c:	e0bffc17 	ldw	r2,-16(fp)
8112ed50:	10c00417 	ldw	r3,16(r2)
8112ed54:	e0bffc17 	ldw	r2,-16(fp)
8112ed58:	10800217 	ldw	r2,8(r2)
8112ed5c:	1880041e 	bne	r3,r2,8112ed70 <OSQAccept+0x108>
            pq->OSQOut = pq->OSQStart;
8112ed60:	e0bffc17 	ldw	r2,-16(fp)
8112ed64:	10c00117 	ldw	r3,4(r2)
8112ed68:	e0bffc17 	ldw	r2,-16(fp)
8112ed6c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
8112ed70:	e0bfff17 	ldw	r2,-4(fp)
8112ed74:	10000005 	stb	zero,0(r2)
8112ed78:	00000406 	br	8112ed8c <OSQAccept+0x124>
    } else {
        *perr = OS_ERR_Q_EMPTY;
8112ed7c:	e0bfff17 	ldw	r2,-4(fp)
8112ed80:	00c007c4 	movi	r3,31
8112ed84:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
8112ed88:	e03ff915 	stw	zero,-28(fp)
8112ed8c:	e0bffa17 	ldw	r2,-24(fp)
8112ed90:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ed94:	e0bffb17 	ldw	r2,-20(fp)
8112ed98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
8112ed9c:	e0bff917 	ldw	r2,-28(fp)
}
8112eda0:	e037883a 	mov	sp,fp
8112eda4:	df000017 	ldw	fp,0(sp)
8112eda8:	dec00104 	addi	sp,sp,4
8112edac:	f800283a 	ret

8112edb0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
8112edb0:	defff404 	addi	sp,sp,-48
8112edb4:	de00012e 	bgeu	sp,et,8112edbc <OSQCreate+0xc>
8112edb8:	003b68fa 	trap	3
8112edbc:	dfc00b15 	stw	ra,44(sp)
8112edc0:	df000a15 	stw	fp,40(sp)
8112edc4:	df000a04 	addi	fp,sp,40
8112edc8:	e13ffe15 	stw	r4,-8(fp)
8112edcc:	2805883a 	mov	r2,r5
8112edd0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112edd4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112edd8:	d0a08a03 	ldbu	r2,-32216(gp)
8112eddc:	10803fcc 	andi	r2,r2,255
8112ede0:	10000226 	beq	r2,zero,8112edec <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
8112ede4:	0005883a 	mov	r2,zero
8112ede8:	00005906 	br	8112ef50 <OSQCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112edec:	0005303a 	rdctl	r2,status
8112edf0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112edf4:	e0fffd17 	ldw	r3,-12(fp)
8112edf8:	00bfff84 	movi	r2,-2
8112edfc:	1884703a 	and	r2,r3,r2
8112ee00:	1001703a 	wrctl	status,r2
  
  return context;
8112ee04:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112ee08:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
8112ee0c:	d0a08917 	ldw	r2,-32220(gp)
8112ee10:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
8112ee14:	d0a08917 	ldw	r2,-32220(gp)
8112ee18:	10000326 	beq	r2,zero,8112ee28 <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112ee1c:	d0a08917 	ldw	r2,-32220(gp)
8112ee20:	10800117 	ldw	r2,4(r2)
8112ee24:	d0a08915 	stw	r2,-32220(gp)
8112ee28:	e0bff717 	ldw	r2,-36(fp)
8112ee2c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ee30:	e0bff817 	ldw	r2,-32(fp)
8112ee34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
8112ee38:	e0bff617 	ldw	r2,-40(fp)
8112ee3c:	10004326 	beq	r2,zero,8112ef4c <OSQCreate+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ee40:	0005303a 	rdctl	r2,status
8112ee44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ee48:	e0fff917 	ldw	r3,-28(fp)
8112ee4c:	00bfff84 	movi	r2,-2
8112ee50:	1884703a 	and	r2,r3,r2
8112ee54:	1001703a 	wrctl	status,r2
  
  return context;
8112ee58:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
8112ee5c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
8112ee60:	d0a08617 	ldw	r2,-32232(gp)
8112ee64:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
8112ee68:	e0bffb17 	ldw	r2,-20(fp)
8112ee6c:	10002d26 	beq	r2,zero,8112ef24 <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
8112ee70:	d0a08617 	ldw	r2,-32232(gp)
8112ee74:	10800017 	ldw	r2,0(r2)
8112ee78:	d0a08615 	stw	r2,-32232(gp)
8112ee7c:	e0bff717 	ldw	r2,-36(fp)
8112ee80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ee84:	e0bffa17 	ldw	r2,-24(fp)
8112ee88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
8112ee8c:	e0bffb17 	ldw	r2,-20(fp)
8112ee90:	e0fffe17 	ldw	r3,-8(fp)
8112ee94:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
8112ee98:	e0bfff0b 	ldhu	r2,-4(fp)
8112ee9c:	1085883a 	add	r2,r2,r2
8112eea0:	1085883a 	add	r2,r2,r2
8112eea4:	1007883a 	mov	r3,r2
8112eea8:	e0bffe17 	ldw	r2,-8(fp)
8112eeac:	10c7883a 	add	r3,r2,r3
8112eeb0:	e0bffb17 	ldw	r2,-20(fp)
8112eeb4:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
8112eeb8:	e0bffb17 	ldw	r2,-20(fp)
8112eebc:	e0fffe17 	ldw	r3,-8(fp)
8112eec0:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
8112eec4:	e0bffb17 	ldw	r2,-20(fp)
8112eec8:	e0fffe17 	ldw	r3,-8(fp)
8112eecc:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
8112eed0:	e0bffb17 	ldw	r2,-20(fp)
8112eed4:	e0ffff0b 	ldhu	r3,-4(fp)
8112eed8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
8112eedc:	e0bffb17 	ldw	r2,-20(fp)
8112eee0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
8112eee4:	e0bff617 	ldw	r2,-40(fp)
8112eee8:	00c00084 	movi	r3,2
8112eeec:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
8112eef0:	e0bff617 	ldw	r2,-40(fp)
8112eef4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
8112eef8:	e0bff617 	ldw	r2,-40(fp)
8112eefc:	e0fffb17 	ldw	r3,-20(fp)
8112ef00:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
8112ef04:	e0bff617 	ldw	r2,-40(fp)
8112ef08:	00c00fc4 	movi	r3,63
8112ef0c:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
8112ef10:	e0bff617 	ldw	r2,-40(fp)
8112ef14:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
8112ef18:	e13ff617 	ldw	r4,-40(fp)
8112ef1c:	112ae100 	call	8112ae10 <OS_EventWaitListInit>
8112ef20:	00000a06 	br	8112ef4c <OSQCreate+0x19c>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
8112ef24:	d0e08917 	ldw	r3,-32220(gp)
8112ef28:	e0bff617 	ldw	r2,-40(fp)
8112ef2c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
8112ef30:	e0bff617 	ldw	r2,-40(fp)
8112ef34:	d0a08915 	stw	r2,-32220(gp)
8112ef38:	e0bff717 	ldw	r2,-36(fp)
8112ef3c:	e0bffc15 	stw	r2,-16(fp)
8112ef40:	e0bffc17 	ldw	r2,-16(fp)
8112ef44:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
8112ef48:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
8112ef4c:	e0bff617 	ldw	r2,-40(fp)
}
8112ef50:	e037883a 	mov	sp,fp
8112ef54:	dfc00117 	ldw	ra,4(sp)
8112ef58:	df000017 	ldw	fp,0(sp)
8112ef5c:	dec00204 	addi	sp,sp,8
8112ef60:	f800283a 	ret

8112ef64 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112ef64:	defff204 	addi	sp,sp,-56
8112ef68:	de00012e 	bgeu	sp,et,8112ef70 <OSQDel+0xc>
8112ef6c:	003b68fa 	trap	3
8112ef70:	dfc00d15 	stw	ra,52(sp)
8112ef74:	df000c15 	stw	fp,48(sp)
8112ef78:	df000c04 	addi	fp,sp,48
8112ef7c:	e13ffd15 	stw	r4,-12(fp)
8112ef80:	2805883a 	mov	r2,r5
8112ef84:	e1bfff15 	stw	r6,-4(fp)
8112ef88:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112ef8c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112ef90:	e0bfff17 	ldw	r2,-4(fp)
8112ef94:	1000021e 	bne	r2,zero,8112efa0 <OSQDel+0x3c>
        return (pevent);
8112ef98:	e0bffd17 	ldw	r2,-12(fp)
8112ef9c:	00008e06 	br	8112f1d8 <OSQDel+0x274>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112efa0:	e0bffd17 	ldw	r2,-12(fp)
8112efa4:	1000051e 	bne	r2,zero,8112efbc <OSQDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112efa8:	e0bfff17 	ldw	r2,-4(fp)
8112efac:	00c00104 	movi	r3,4
8112efb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112efb4:	e0bffd17 	ldw	r2,-12(fp)
8112efb8:	00008706 	br	8112f1d8 <OSQDel+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112efbc:	e0bffd17 	ldw	r2,-12(fp)
8112efc0:	10800003 	ldbu	r2,0(r2)
8112efc4:	10803fcc 	andi	r2,r2,255
8112efc8:	108000a0 	cmpeqi	r2,r2,2
8112efcc:	1000051e 	bne	r2,zero,8112efe4 <OSQDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112efd0:	e0bfff17 	ldw	r2,-4(fp)
8112efd4:	00c00044 	movi	r3,1
8112efd8:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112efdc:	e0bffd17 	ldw	r2,-12(fp)
8112efe0:	00007d06 	br	8112f1d8 <OSQDel+0x274>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112efe4:	d0a08a03 	ldbu	r2,-32216(gp)
8112efe8:	10803fcc 	andi	r2,r2,255
8112efec:	10000526 	beq	r2,zero,8112f004 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112eff0:	e0bfff17 	ldw	r2,-4(fp)
8112eff4:	00c003c4 	movi	r3,15
8112eff8:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112effc:	e0bffd17 	ldw	r2,-12(fp)
8112f000:	00007506 	br	8112f1d8 <OSQDel+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f004:	0005303a 	rdctl	r2,status
8112f008:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f00c:	e0fffc17 	ldw	r3,-16(fp)
8112f010:	00bfff84 	movi	r2,-2
8112f014:	1884703a 	and	r2,r3,r2
8112f018:	1001703a 	wrctl	status,r2
  
  return context;
8112f01c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f020:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
8112f024:	e0bffd17 	ldw	r2,-12(fp)
8112f028:	10800283 	ldbu	r2,10(r2)
8112f02c:	10803fcc 	andi	r2,r2,255
8112f030:	10000326 	beq	r2,zero,8112f040 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112f034:	00800044 	movi	r2,1
8112f038:	e0bff405 	stb	r2,-48(fp)
8112f03c:	00000106 	br	8112f044 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112f040:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112f044:	e0bffe03 	ldbu	r2,-8(fp)
8112f048:	10000326 	beq	r2,zero,8112f058 <OSQDel+0xf4>
8112f04c:	10800060 	cmpeqi	r2,r2,1
8112f050:	1000301e 	bne	r2,zero,8112f114 <OSQDel+0x1b0>
8112f054:	00005506 	br	8112f1ac <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
8112f058:	e0bff403 	ldbu	r2,-48(fp)
8112f05c:	10001e1e 	bne	r2,zero,8112f0d8 <OSQDel+0x174>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112f060:	e0bffd17 	ldw	r2,-12(fp)
8112f064:	00c00fc4 	movi	r3,63
8112f068:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112f06c:	e0bffd17 	ldw	r2,-12(fp)
8112f070:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
8112f074:	e0bffd17 	ldw	r2,-12(fp)
8112f078:	10800117 	ldw	r2,4(r2)
8112f07c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
8112f080:	d0e08617 	ldw	r3,-32232(gp)
8112f084:	e0bff817 	ldw	r2,-32(fp)
8112f088:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
8112f08c:	e0bff817 	ldw	r2,-32(fp)
8112f090:	d0a08615 	stw	r2,-32232(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112f094:	e0bffd17 	ldw	r2,-12(fp)
8112f098:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112f09c:	d0e08917 	ldw	r3,-32220(gp)
8112f0a0:	e0bffd17 	ldw	r2,-12(fp)
8112f0a4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112f0a8:	e0bffd17 	ldw	r2,-12(fp)
8112f0ac:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112f0b0:	e0bffd17 	ldw	r2,-12(fp)
8112f0b4:	d0a08915 	stw	r2,-32220(gp)
8112f0b8:	e0bff617 	ldw	r2,-40(fp)
8112f0bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f0c0:	e0bff717 	ldw	r2,-36(fp)
8112f0c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112f0c8:	e0bfff17 	ldw	r2,-4(fp)
8112f0cc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
8112f0d0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112f0d4:	00003f06 	br	8112f1d4 <OSQDel+0x270>
8112f0d8:	e0bff617 	ldw	r2,-40(fp)
8112f0dc:	e0bff915 	stw	r2,-28(fp)
8112f0e0:	e0bff917 	ldw	r2,-28(fp)
8112f0e4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112f0e8:	e0bfff17 	ldw	r2,-4(fp)
8112f0ec:	00c01244 	movi	r3,73
8112f0f0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112f0f4:	e0bffd17 	ldw	r2,-12(fp)
8112f0f8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
8112f0fc:	00003506 	br	8112f1d4 <OSQDel+0x270>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
8112f100:	000f883a 	mov	r7,zero
8112f104:	01800104 	movi	r6,4
8112f108:	000b883a 	mov	r5,zero
8112f10c:	e13ffd17 	ldw	r4,-12(fp)
8112f110:	112a8380 	call	8112a838 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
8112f114:	e0bffd17 	ldw	r2,-12(fp)
8112f118:	10800283 	ldbu	r2,10(r2)
8112f11c:	10803fcc 	andi	r2,r2,255
8112f120:	103ff71e 	bne	r2,zero,8112f100 <__reset+0xfb10f100>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112f124:	e0bffd17 	ldw	r2,-12(fp)
8112f128:	00c00fc4 	movi	r3,63
8112f12c:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112f130:	e0bffd17 	ldw	r2,-12(fp)
8112f134:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
8112f138:	e0bffd17 	ldw	r2,-12(fp)
8112f13c:	10800117 	ldw	r2,4(r2)
8112f140:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
8112f144:	d0e08617 	ldw	r3,-32232(gp)
8112f148:	e0bff817 	ldw	r2,-32(fp)
8112f14c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
8112f150:	e0bff817 	ldw	r2,-32(fp)
8112f154:	d0a08615 	stw	r2,-32232(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112f158:	e0bffd17 	ldw	r2,-12(fp)
8112f15c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112f160:	d0e08917 	ldw	r3,-32220(gp)
8112f164:	e0bffd17 	ldw	r2,-12(fp)
8112f168:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112f16c:	e0bffd17 	ldw	r2,-12(fp)
8112f170:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112f174:	e0bffd17 	ldw	r2,-12(fp)
8112f178:	d0a08915 	stw	r2,-32220(gp)
8112f17c:	e0bff617 	ldw	r2,-40(fp)
8112f180:	e0bffa15 	stw	r2,-24(fp)
8112f184:	e0bffa17 	ldw	r2,-24(fp)
8112f188:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112f18c:	e0bff403 	ldbu	r2,-48(fp)
8112f190:	10800058 	cmpnei	r2,r2,1
8112f194:	1000011e 	bne	r2,zero,8112f19c <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112f198:	112b2f40 	call	8112b2f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112f19c:	e0bfff17 	ldw	r2,-4(fp)
8112f1a0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
8112f1a4:	e03ff515 	stw	zero,-44(fp)
             break;
8112f1a8:	00000a06 	br	8112f1d4 <OSQDel+0x270>
8112f1ac:	e0bff617 	ldw	r2,-40(fp)
8112f1b0:	e0bffb15 	stw	r2,-20(fp)
8112f1b4:	e0bffb17 	ldw	r2,-20(fp)
8112f1b8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112f1bc:	e0bfff17 	ldw	r2,-4(fp)
8112f1c0:	00c001c4 	movi	r3,7
8112f1c4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112f1c8:	e0bffd17 	ldw	r2,-12(fp)
8112f1cc:	e0bff515 	stw	r2,-44(fp)
             break;
8112f1d0:	0001883a 	nop
    }
    return (pevent_return);
8112f1d4:	e0bff517 	ldw	r2,-44(fp)
}
8112f1d8:	e037883a 	mov	sp,fp
8112f1dc:	dfc00117 	ldw	ra,4(sp)
8112f1e0:	df000017 	ldw	fp,0(sp)
8112f1e4:	dec00204 	addi	sp,sp,8
8112f1e8:	f800283a 	ret

8112f1ec <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
8112f1ec:	defffa04 	addi	sp,sp,-24
8112f1f0:	de00012e 	bgeu	sp,et,8112f1f8 <OSQFlush+0xc>
8112f1f4:	003b68fa 	trap	3
8112f1f8:	df000515 	stw	fp,20(sp)
8112f1fc:	df000504 	addi	fp,sp,20
8112f200:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f204:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f208:	e0bfff17 	ldw	r2,-4(fp)
8112f20c:	1000021e 	bne	r2,zero,8112f218 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
8112f210:	00800104 	movi	r2,4
8112f214:	00002106 	br	8112f29c <OSQFlush+0xb0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112f218:	e0bfff17 	ldw	r2,-4(fp)
8112f21c:	10800003 	ldbu	r2,0(r2)
8112f220:	10803fcc 	andi	r2,r2,255
8112f224:	108000a0 	cmpeqi	r2,r2,2
8112f228:	1000021e 	bne	r2,zero,8112f234 <OSQFlush+0x48>
        return (OS_ERR_EVENT_TYPE);
8112f22c:	00800044 	movi	r2,1
8112f230:	00001a06 	br	8112f29c <OSQFlush+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f234:	0005303a 	rdctl	r2,status
8112f238:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f23c:	e0fffd17 	ldw	r3,-12(fp)
8112f240:	00bfff84 	movi	r2,-2
8112f244:	1884703a 	and	r2,r3,r2
8112f248:	1001703a 	wrctl	status,r2
  
  return context;
8112f24c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112f250:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
8112f254:	e0bfff17 	ldw	r2,-4(fp)
8112f258:	10800117 	ldw	r2,4(r2)
8112f25c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
8112f260:	e0bffc17 	ldw	r2,-16(fp)
8112f264:	10c00117 	ldw	r3,4(r2)
8112f268:	e0bffc17 	ldw	r2,-16(fp)
8112f26c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
8112f270:	e0bffc17 	ldw	r2,-16(fp)
8112f274:	10c00117 	ldw	r3,4(r2)
8112f278:	e0bffc17 	ldw	r2,-16(fp)
8112f27c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
8112f280:	e0bffc17 	ldw	r2,-16(fp)
8112f284:	1000058d 	sth	zero,22(r2)
8112f288:	e0bffb17 	ldw	r2,-20(fp)
8112f28c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f290:	e0bffe17 	ldw	r2,-8(fp)
8112f294:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112f298:	0005883a 	mov	r2,zero
}
8112f29c:	e037883a 	mov	sp,fp
8112f2a0:	df000017 	ldw	fp,0(sp)
8112f2a4:	dec00104 	addi	sp,sp,4
8112f2a8:	f800283a 	ret

8112f2ac <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112f2ac:	defff304 	addi	sp,sp,-52
8112f2b0:	de00012e 	bgeu	sp,et,8112f2b8 <OSQPend+0xc>
8112f2b4:	003b68fa 	trap	3
8112f2b8:	dfc00c15 	stw	ra,48(sp)
8112f2bc:	df000b15 	stw	fp,44(sp)
8112f2c0:	df000b04 	addi	fp,sp,44
8112f2c4:	e13ffd15 	stw	r4,-12(fp)
8112f2c8:	2805883a 	mov	r2,r5
8112f2cc:	e1bfff15 	stw	r6,-4(fp)
8112f2d0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112f2d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112f2d8:	e0bfff17 	ldw	r2,-4(fp)
8112f2dc:	1000021e 	bne	r2,zero,8112f2e8 <OSQPend+0x3c>
        return ((void *)0);
8112f2e0:	0005883a 	mov	r2,zero
8112f2e4:	00009106 	br	8112f52c <OSQPend+0x280>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112f2e8:	e0bffd17 	ldw	r2,-12(fp)
8112f2ec:	1000051e 	bne	r2,zero,8112f304 <OSQPend+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112f2f0:	e0bfff17 	ldw	r2,-4(fp)
8112f2f4:	00c00104 	movi	r3,4
8112f2f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112f2fc:	0005883a 	mov	r2,zero
8112f300:	00008a06 	br	8112f52c <OSQPend+0x280>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112f304:	e0bffd17 	ldw	r2,-12(fp)
8112f308:	10800003 	ldbu	r2,0(r2)
8112f30c:	10803fcc 	andi	r2,r2,255
8112f310:	108000a0 	cmpeqi	r2,r2,2
8112f314:	1000051e 	bne	r2,zero,8112f32c <OSQPend+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112f318:	e0bfff17 	ldw	r2,-4(fp)
8112f31c:	00c00044 	movi	r3,1
8112f320:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112f324:	0005883a 	mov	r2,zero
8112f328:	00008006 	br	8112f52c <OSQPend+0x280>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112f32c:	d0a08a03 	ldbu	r2,-32216(gp)
8112f330:	10803fcc 	andi	r2,r2,255
8112f334:	10000526 	beq	r2,zero,8112f34c <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
8112f338:	e0bfff17 	ldw	r2,-4(fp)
8112f33c:	00c00084 	movi	r3,2
8112f340:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112f344:	0005883a 	mov	r2,zero
8112f348:	00007806 	br	8112f52c <OSQPend+0x280>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
8112f34c:	d0a07803 	ldbu	r2,-32288(gp)
8112f350:	10803fcc 	andi	r2,r2,255
8112f354:	10000526 	beq	r2,zero,8112f36c <OSQPend+0xc0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
8112f358:	e0bfff17 	ldw	r2,-4(fp)
8112f35c:	00c00344 	movi	r3,13
8112f360:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112f364:	0005883a 	mov	r2,zero
8112f368:	00007006 	br	8112f52c <OSQPend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f36c:	0005303a 	rdctl	r2,status
8112f370:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f374:	e0fffc17 	ldw	r3,-16(fp)
8112f378:	00bfff84 	movi	r2,-2
8112f37c:	1884703a 	and	r2,r3,r2
8112f380:	1001703a 	wrctl	status,r2
  
  return context;
8112f384:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f388:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112f38c:	e0bffd17 	ldw	r2,-12(fp)
8112f390:	10800117 	ldw	r2,4(r2)
8112f394:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112f398:	e0bff817 	ldw	r2,-32(fp)
8112f39c:	1080058b 	ldhu	r2,22(r2)
8112f3a0:	10bfffcc 	andi	r2,r2,65535
8112f3a4:	10001e26 	beq	r2,zero,8112f420 <OSQPend+0x174>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112f3a8:	e0bff817 	ldw	r2,-32(fp)
8112f3ac:	10800417 	ldw	r2,16(r2)
8112f3b0:	11000104 	addi	r4,r2,4
8112f3b4:	e0fff817 	ldw	r3,-32(fp)
8112f3b8:	19000415 	stw	r4,16(r3)
8112f3bc:	10800017 	ldw	r2,0(r2)
8112f3c0:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112f3c4:	e0bff817 	ldw	r2,-32(fp)
8112f3c8:	1080058b 	ldhu	r2,22(r2)
8112f3cc:	10bfffc4 	addi	r2,r2,-1
8112f3d0:	1007883a 	mov	r3,r2
8112f3d4:	e0bff817 	ldw	r2,-32(fp)
8112f3d8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112f3dc:	e0bff817 	ldw	r2,-32(fp)
8112f3e0:	10c00417 	ldw	r3,16(r2)
8112f3e4:	e0bff817 	ldw	r2,-32(fp)
8112f3e8:	10800217 	ldw	r2,8(r2)
8112f3ec:	1880041e 	bne	r3,r2,8112f400 <OSQPend+0x154>
            pq->OSQOut = pq->OSQStart;
8112f3f0:	e0bff817 	ldw	r2,-32(fp)
8112f3f4:	10c00117 	ldw	r3,4(r2)
8112f3f8:	e0bff817 	ldw	r2,-32(fp)
8112f3fc:	10c00415 	stw	r3,16(r2)
8112f400:	e0bff617 	ldw	r2,-40(fp)
8112f404:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f408:	e0bff717 	ldw	r2,-36(fp)
8112f40c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112f410:	e0bfff17 	ldw	r2,-4(fp)
8112f414:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
8112f418:	e0bff517 	ldw	r2,-44(fp)
8112f41c:	00004306 	br	8112f52c <OSQPend+0x280>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
8112f420:	d0a08b17 	ldw	r2,-32212(gp)
8112f424:	d0e08b17 	ldw	r3,-32212(gp)
8112f428:	18c00c03 	ldbu	r3,48(r3)
8112f42c:	18c00114 	ori	r3,r3,4
8112f430:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112f434:	d0a08b17 	ldw	r2,-32212(gp)
8112f438:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
8112f43c:	d0a08b17 	ldw	r2,-32212(gp)
8112f440:	e0fffe0b 	ldhu	r3,-8(fp)
8112f444:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
8112f448:	e13ffd17 	ldw	r4,-12(fp)
8112f44c:	112a9d80 	call	8112a9d8 <OS_EventTaskWait>
8112f450:	e0bff617 	ldw	r2,-40(fp)
8112f454:	e0bffb15 	stw	r2,-20(fp)
8112f458:	e0bffb17 	ldw	r2,-20(fp)
8112f45c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
8112f460:	112b2f40 	call	8112b2f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f464:	0005303a 	rdctl	r2,status
8112f468:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f46c:	e0fff917 	ldw	r3,-28(fp)
8112f470:	00bfff84 	movi	r2,-2
8112f474:	1884703a 	and	r2,r3,r2
8112f478:	1001703a 	wrctl	status,r2
  
  return context;
8112f47c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112f480:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112f484:	d0a08b17 	ldw	r2,-32212(gp)
8112f488:	10800c43 	ldbu	r2,49(r2)
8112f48c:	10803fcc 	andi	r2,r2,255
8112f490:	10000326 	beq	r2,zero,8112f4a0 <OSQPend+0x1f4>
8112f494:	108000a0 	cmpeqi	r2,r2,2
8112f498:	1000071e 	bne	r2,zero,8112f4b8 <OSQPend+0x20c>
8112f49c:	00000b06 	br	8112f4cc <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
8112f4a0:	d0a08b17 	ldw	r2,-32212(gp)
8112f4a4:	10800917 	ldw	r2,36(r2)
8112f4a8:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
8112f4ac:	e0bfff17 	ldw	r2,-4(fp)
8112f4b0:	10000005 	stb	zero,0(r2)
             break;
8112f4b4:	00000e06 	br	8112f4f0 <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
8112f4b8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112f4bc:	e0bfff17 	ldw	r2,-4(fp)
8112f4c0:	00c00384 	movi	r3,14
8112f4c4:	10c00005 	stb	r3,0(r2)
             break;
8112f4c8:	00000906 	br	8112f4f0 <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112f4cc:	d0a08b17 	ldw	r2,-32212(gp)
8112f4d0:	e17ffd17 	ldw	r5,-12(fp)
8112f4d4:	1009883a 	mov	r4,r2
8112f4d8:	112ac480 	call	8112ac48 <OS_EventTaskRemove>
             pmsg = (void *)0;
8112f4dc:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112f4e0:	e0bfff17 	ldw	r2,-4(fp)
8112f4e4:	00c00284 	movi	r3,10
8112f4e8:	10c00005 	stb	r3,0(r2)
             break;
8112f4ec:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112f4f0:	d0a08b17 	ldw	r2,-32212(gp)
8112f4f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112f4f8:	d0a08b17 	ldw	r2,-32212(gp)
8112f4fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112f500:	d0a08b17 	ldw	r2,-32212(gp)
8112f504:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112f508:	d0a08b17 	ldw	r2,-32212(gp)
8112f50c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
8112f510:	d0a08b17 	ldw	r2,-32212(gp)
8112f514:	10000915 	stw	zero,36(r2)
8112f518:	e0bff617 	ldw	r2,-40(fp)
8112f51c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f520:	e0bffa17 	ldw	r2,-24(fp)
8112f524:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
8112f528:	e0bff517 	ldw	r2,-44(fp)
}
8112f52c:	e037883a 	mov	sp,fp
8112f530:	dfc00117 	ldw	ra,4(sp)
8112f534:	df000017 	ldw	fp,0(sp)
8112f538:	dec00204 	addi	sp,sp,8
8112f53c:	f800283a 	ret

8112f540 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112f540:	defff604 	addi	sp,sp,-40
8112f544:	de00012e 	bgeu	sp,et,8112f54c <OSQPendAbort+0xc>
8112f548:	003b68fa 	trap	3
8112f54c:	dfc00915 	stw	ra,36(sp)
8112f550:	df000815 	stw	fp,32(sp)
8112f554:	df000804 	addi	fp,sp,32
8112f558:	e13ffd15 	stw	r4,-12(fp)
8112f55c:	2805883a 	mov	r2,r5
8112f560:	e1bfff15 	stw	r6,-4(fp)
8112f564:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112f568:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112f56c:	e0bfff17 	ldw	r2,-4(fp)
8112f570:	1000021e 	bne	r2,zero,8112f57c <OSQPendAbort+0x3c>
        return (0);
8112f574:	0005883a 	mov	r2,zero
8112f578:	00004906 	br	8112f6a0 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112f57c:	e0bffd17 	ldw	r2,-12(fp)
8112f580:	1000051e 	bne	r2,zero,8112f598 <OSQPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112f584:	e0bfff17 	ldw	r2,-4(fp)
8112f588:	00c00104 	movi	r3,4
8112f58c:	10c00005 	stb	r3,0(r2)
        return (0);
8112f590:	0005883a 	mov	r2,zero
8112f594:	00004206 	br	8112f6a0 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112f598:	e0bffd17 	ldw	r2,-12(fp)
8112f59c:	10800003 	ldbu	r2,0(r2)
8112f5a0:	10803fcc 	andi	r2,r2,255
8112f5a4:	108000a0 	cmpeqi	r2,r2,2
8112f5a8:	1000051e 	bne	r2,zero,8112f5c0 <OSQPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112f5ac:	e0bfff17 	ldw	r2,-4(fp)
8112f5b0:	00c00044 	movi	r3,1
8112f5b4:	10c00005 	stb	r3,0(r2)
        return (0);
8112f5b8:	0005883a 	mov	r2,zero
8112f5bc:	00003806 	br	8112f6a0 <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f5c0:	0005303a 	rdctl	r2,status
8112f5c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f5c8:	e0fffc17 	ldw	r3,-16(fp)
8112f5cc:	00bfff84 	movi	r2,-2
8112f5d0:	1884703a 	and	r2,r3,r2
8112f5d4:	1001703a 	wrctl	status,r2
  
  return context;
8112f5d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f5dc:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
8112f5e0:	e0bffd17 	ldw	r2,-12(fp)
8112f5e4:	10800283 	ldbu	r2,10(r2)
8112f5e8:	10803fcc 	andi	r2,r2,255
8112f5ec:	10002526 	beq	r2,zero,8112f684 <OSQPendAbort+0x144>
        nbr_tasks = 0;
8112f5f0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112f5f4:	e0bffe03 	ldbu	r2,-8(fp)
8112f5f8:	10800060 	cmpeqi	r2,r2,1
8112f5fc:	10000e26 	beq	r2,zero,8112f638 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112f600:	00000806 	br	8112f624 <OSQPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112f604:	01c00084 	movi	r7,2
8112f608:	01800104 	movi	r6,4
8112f60c:	000b883a 	mov	r5,zero
8112f610:	e13ffd17 	ldw	r4,-12(fp)
8112f614:	112a8380 	call	8112a838 <OS_EventTaskRdy>
                     nbr_tasks++;
8112f618:	e0bff803 	ldbu	r2,-32(fp)
8112f61c:	10800044 	addi	r2,r2,1
8112f620:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112f624:	e0bffd17 	ldw	r2,-12(fp)
8112f628:	10800283 	ldbu	r2,10(r2)
8112f62c:	10803fcc 	andi	r2,r2,255
8112f630:	103ff41e 	bne	r2,zero,8112f604 <__reset+0xfb10f604>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112f634:	00000906 	br	8112f65c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112f638:	01c00084 	movi	r7,2
8112f63c:	01800104 	movi	r6,4
8112f640:	000b883a 	mov	r5,zero
8112f644:	e13ffd17 	ldw	r4,-12(fp)
8112f648:	112a8380 	call	8112a838 <OS_EventTaskRdy>
                 nbr_tasks++;
8112f64c:	e0bff803 	ldbu	r2,-32(fp)
8112f650:	10800044 	addi	r2,r2,1
8112f654:	e0bff805 	stb	r2,-32(fp)
                 break;
8112f658:	0001883a 	nop
8112f65c:	e0bff917 	ldw	r2,-28(fp)
8112f660:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f664:	e0bffa17 	ldw	r2,-24(fp)
8112f668:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
8112f66c:	112b2f40 	call	8112b2f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112f670:	e0bfff17 	ldw	r2,-4(fp)
8112f674:	00c00384 	movi	r3,14
8112f678:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112f67c:	e0bff803 	ldbu	r2,-32(fp)
8112f680:	00000706 	br	8112f6a0 <OSQPendAbort+0x160>
8112f684:	e0bff917 	ldw	r2,-28(fp)
8112f688:	e0bffb15 	stw	r2,-20(fp)
8112f68c:	e0bffb17 	ldw	r2,-20(fp)
8112f690:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112f694:	e0bfff17 	ldw	r2,-4(fp)
8112f698:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
8112f69c:	0005883a 	mov	r2,zero
}
8112f6a0:	e037883a 	mov	sp,fp
8112f6a4:	dfc00117 	ldw	ra,4(sp)
8112f6a8:	df000017 	ldw	fp,0(sp)
8112f6ac:	dec00204 	addi	sp,sp,8
8112f6b0:	f800283a 	ret

8112f6b4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
8112f6b4:	defff604 	addi	sp,sp,-40
8112f6b8:	de00012e 	bgeu	sp,et,8112f6c0 <OSQPost+0xc>
8112f6bc:	003b68fa 	trap	3
8112f6c0:	dfc00915 	stw	ra,36(sp)
8112f6c4:	df000815 	stw	fp,32(sp)
8112f6c8:	df000804 	addi	fp,sp,32
8112f6cc:	e13ffe15 	stw	r4,-8(fp)
8112f6d0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112f6d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112f6d8:	e0bffe17 	ldw	r2,-8(fp)
8112f6dc:	1000021e 	bne	r2,zero,8112f6e8 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
8112f6e0:	00800104 	movi	r2,4
8112f6e4:	00004a06 	br	8112f810 <OSQPost+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112f6e8:	e0bffe17 	ldw	r2,-8(fp)
8112f6ec:	10800003 	ldbu	r2,0(r2)
8112f6f0:	10803fcc 	andi	r2,r2,255
8112f6f4:	108000a0 	cmpeqi	r2,r2,2
8112f6f8:	1000021e 	bne	r2,zero,8112f704 <OSQPost+0x50>
        return (OS_ERR_EVENT_TYPE);
8112f6fc:	00800044 	movi	r2,1
8112f700:	00004306 	br	8112f810 <OSQPost+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f704:	0005303a 	rdctl	r2,status
8112f708:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f70c:	e0fffd17 	ldw	r3,-12(fp)
8112f710:	00bfff84 	movi	r2,-2
8112f714:	1884703a 	and	r2,r3,r2
8112f718:	1001703a 	wrctl	status,r2
  
  return context;
8112f71c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112f720:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
8112f724:	e0bffe17 	ldw	r2,-8(fp)
8112f728:	10800283 	ldbu	r2,10(r2)
8112f72c:	10803fcc 	andi	r2,r2,255
8112f730:	10000c26 	beq	r2,zero,8112f764 <OSQPost+0xb0>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112f734:	000f883a 	mov	r7,zero
8112f738:	01800104 	movi	r6,4
8112f73c:	e17fff17 	ldw	r5,-4(fp)
8112f740:	e13ffe17 	ldw	r4,-8(fp)
8112f744:	112a8380 	call	8112a838 <OS_EventTaskRdy>
8112f748:	e0bff817 	ldw	r2,-32(fp)
8112f74c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f750:	e0bff917 	ldw	r2,-28(fp)
8112f754:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
8112f758:	112b2f40 	call	8112b2f4 <OS_Sched>
        return (OS_ERR_NONE);
8112f75c:	0005883a 	mov	r2,zero
8112f760:	00002b06 	br	8112f810 <OSQPost+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
8112f764:	e0bffe17 	ldw	r2,-8(fp)
8112f768:	10800117 	ldw	r2,4(r2)
8112f76c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
8112f770:	e0bffb17 	ldw	r2,-20(fp)
8112f774:	10c0058b 	ldhu	r3,22(r2)
8112f778:	e0bffb17 	ldw	r2,-20(fp)
8112f77c:	1080050b 	ldhu	r2,20(r2)
8112f780:	18ffffcc 	andi	r3,r3,65535
8112f784:	10bfffcc 	andi	r2,r2,65535
8112f788:	18800636 	bltu	r3,r2,8112f7a4 <OSQPost+0xf0>
8112f78c:	e0bff817 	ldw	r2,-32(fp)
8112f790:	e0bffa15 	stw	r2,-24(fp)
8112f794:	e0bffa17 	ldw	r2,-24(fp)
8112f798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112f79c:	00800784 	movi	r2,30
8112f7a0:	00001b06 	br	8112f810 <OSQPost+0x15c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
8112f7a4:	e0bffb17 	ldw	r2,-20(fp)
8112f7a8:	10800317 	ldw	r2,12(r2)
8112f7ac:	11000104 	addi	r4,r2,4
8112f7b0:	e0fffb17 	ldw	r3,-20(fp)
8112f7b4:	19000315 	stw	r4,12(r3)
8112f7b8:	e0ffff17 	ldw	r3,-4(fp)
8112f7bc:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
8112f7c0:	e0bffb17 	ldw	r2,-20(fp)
8112f7c4:	1080058b 	ldhu	r2,22(r2)
8112f7c8:	10800044 	addi	r2,r2,1
8112f7cc:	1007883a 	mov	r3,r2
8112f7d0:	e0bffb17 	ldw	r2,-20(fp)
8112f7d4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
8112f7d8:	e0bffb17 	ldw	r2,-20(fp)
8112f7dc:	10c00317 	ldw	r3,12(r2)
8112f7e0:	e0bffb17 	ldw	r2,-20(fp)
8112f7e4:	10800217 	ldw	r2,8(r2)
8112f7e8:	1880041e 	bne	r3,r2,8112f7fc <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
8112f7ec:	e0bffb17 	ldw	r2,-20(fp)
8112f7f0:	10c00117 	ldw	r3,4(r2)
8112f7f4:	e0bffb17 	ldw	r2,-20(fp)
8112f7f8:	10c00315 	stw	r3,12(r2)
8112f7fc:	e0bff817 	ldw	r2,-32(fp)
8112f800:	e0bffc15 	stw	r2,-16(fp)
8112f804:	e0bffc17 	ldw	r2,-16(fp)
8112f808:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112f80c:	0005883a 	mov	r2,zero
}
8112f810:	e037883a 	mov	sp,fp
8112f814:	dfc00117 	ldw	ra,4(sp)
8112f818:	df000017 	ldw	fp,0(sp)
8112f81c:	dec00204 	addi	sp,sp,8
8112f820:	f800283a 	ret

8112f824 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
8112f824:	defff604 	addi	sp,sp,-40
8112f828:	de00012e 	bgeu	sp,et,8112f830 <OSQPostFront+0xc>
8112f82c:	003b68fa 	trap	3
8112f830:	dfc00915 	stw	ra,36(sp)
8112f834:	df000815 	stw	fp,32(sp)
8112f838:	df000804 	addi	fp,sp,32
8112f83c:	e13ffe15 	stw	r4,-8(fp)
8112f840:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f844:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f848:	e0bffe17 	ldw	r2,-8(fp)
8112f84c:	1000021e 	bne	r2,zero,8112f858 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
8112f850:	00800104 	movi	r2,4
8112f854:	00004c06 	br	8112f988 <OSQPostFront+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112f858:	e0bffe17 	ldw	r2,-8(fp)
8112f85c:	10800003 	ldbu	r2,0(r2)
8112f860:	10803fcc 	andi	r2,r2,255
8112f864:	108000a0 	cmpeqi	r2,r2,2
8112f868:	1000021e 	bne	r2,zero,8112f874 <OSQPostFront+0x50>
        return (OS_ERR_EVENT_TYPE);
8112f86c:	00800044 	movi	r2,1
8112f870:	00004506 	br	8112f988 <OSQPostFront+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f874:	0005303a 	rdctl	r2,status
8112f878:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f87c:	e0fffd17 	ldw	r3,-12(fp)
8112f880:	00bfff84 	movi	r2,-2
8112f884:	1884703a 	and	r2,r3,r2
8112f888:	1001703a 	wrctl	status,r2
  
  return context;
8112f88c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112f890:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
8112f894:	e0bffe17 	ldw	r2,-8(fp)
8112f898:	10800283 	ldbu	r2,10(r2)
8112f89c:	10803fcc 	andi	r2,r2,255
8112f8a0:	10000c26 	beq	r2,zero,8112f8d4 <OSQPostFront+0xb0>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112f8a4:	000f883a 	mov	r7,zero
8112f8a8:	01800104 	movi	r6,4
8112f8ac:	e17fff17 	ldw	r5,-4(fp)
8112f8b0:	e13ffe17 	ldw	r4,-8(fp)
8112f8b4:	112a8380 	call	8112a838 <OS_EventTaskRdy>
8112f8b8:	e0bff817 	ldw	r2,-32(fp)
8112f8bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f8c0:	e0bff917 	ldw	r2,-28(fp)
8112f8c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
8112f8c8:	112b2f40 	call	8112b2f4 <OS_Sched>
        return (OS_ERR_NONE);
8112f8cc:	0005883a 	mov	r2,zero
8112f8d0:	00002d06 	br	8112f988 <OSQPostFront+0x164>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112f8d4:	e0bffe17 	ldw	r2,-8(fp)
8112f8d8:	10800117 	ldw	r2,4(r2)
8112f8dc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112f8e0:	e0bffb17 	ldw	r2,-20(fp)
8112f8e4:	10c0058b 	ldhu	r3,22(r2)
8112f8e8:	e0bffb17 	ldw	r2,-20(fp)
8112f8ec:	1080050b 	ldhu	r2,20(r2)
8112f8f0:	18ffffcc 	andi	r3,r3,65535
8112f8f4:	10bfffcc 	andi	r2,r2,65535
8112f8f8:	18800636 	bltu	r3,r2,8112f914 <OSQPostFront+0xf0>
8112f8fc:	e0bff817 	ldw	r2,-32(fp)
8112f900:	e0bffa15 	stw	r2,-24(fp)
8112f904:	e0bffa17 	ldw	r2,-24(fp)
8112f908:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112f90c:	00800784 	movi	r2,30
8112f910:	00001d06 	br	8112f988 <OSQPostFront+0x164>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
8112f914:	e0bffb17 	ldw	r2,-20(fp)
8112f918:	10c00417 	ldw	r3,16(r2)
8112f91c:	e0bffb17 	ldw	r2,-20(fp)
8112f920:	10800117 	ldw	r2,4(r2)
8112f924:	1880041e 	bne	r3,r2,8112f938 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
8112f928:	e0bffb17 	ldw	r2,-20(fp)
8112f92c:	10c00217 	ldw	r3,8(r2)
8112f930:	e0bffb17 	ldw	r2,-20(fp)
8112f934:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
8112f938:	e0bffb17 	ldw	r2,-20(fp)
8112f93c:	10800417 	ldw	r2,16(r2)
8112f940:	10ffff04 	addi	r3,r2,-4
8112f944:	e0bffb17 	ldw	r2,-20(fp)
8112f948:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
8112f94c:	e0bffb17 	ldw	r2,-20(fp)
8112f950:	10800417 	ldw	r2,16(r2)
8112f954:	e0ffff17 	ldw	r3,-4(fp)
8112f958:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112f95c:	e0bffb17 	ldw	r2,-20(fp)
8112f960:	1080058b 	ldhu	r2,22(r2)
8112f964:	10800044 	addi	r2,r2,1
8112f968:	1007883a 	mov	r3,r2
8112f96c:	e0bffb17 	ldw	r2,-20(fp)
8112f970:	10c0058d 	sth	r3,22(r2)
8112f974:	e0bff817 	ldw	r2,-32(fp)
8112f978:	e0bffc15 	stw	r2,-16(fp)
8112f97c:	e0bffc17 	ldw	r2,-16(fp)
8112f980:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112f984:	0005883a 	mov	r2,zero
}
8112f988:	e037883a 	mov	sp,fp
8112f98c:	dfc00117 	ldw	ra,4(sp)
8112f990:	df000017 	ldw	fp,0(sp)
8112f994:	dec00204 	addi	sp,sp,8
8112f998:	f800283a 	ret

8112f99c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
8112f99c:	defff504 	addi	sp,sp,-44
8112f9a0:	de00012e 	bgeu	sp,et,8112f9a8 <OSQPostOpt+0xc>
8112f9a4:	003b68fa 	trap	3
8112f9a8:	dfc00a15 	stw	ra,40(sp)
8112f9ac:	df000915 	stw	fp,36(sp)
8112f9b0:	df000904 	addi	fp,sp,36
8112f9b4:	e13ffd15 	stw	r4,-12(fp)
8112f9b8:	e17ffe15 	stw	r5,-8(fp)
8112f9bc:	3005883a 	mov	r2,r6
8112f9c0:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f9c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f9c8:	e0bffd17 	ldw	r2,-12(fp)
8112f9cc:	1000021e 	bne	r2,zero,8112f9d8 <OSQPostOpt+0x3c>
        return (OS_ERR_PEVENT_NULL);
8112f9d0:	00800104 	movi	r2,4
8112f9d4:	00007106 	br	8112fb9c <OSQPostOpt+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112f9d8:	e0bffd17 	ldw	r2,-12(fp)
8112f9dc:	10800003 	ldbu	r2,0(r2)
8112f9e0:	10803fcc 	andi	r2,r2,255
8112f9e4:	108000a0 	cmpeqi	r2,r2,2
8112f9e8:	1000021e 	bne	r2,zero,8112f9f4 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
8112f9ec:	00800044 	movi	r2,1
8112f9f0:	00006a06 	br	8112fb9c <OSQPostOpt+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f9f4:	0005303a 	rdctl	r2,status
8112f9f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f9fc:	e0fffc17 	ldw	r3,-16(fp)
8112fa00:	00bfff84 	movi	r2,-2
8112fa04:	1884703a 	and	r2,r3,r2
8112fa08:	1001703a 	wrctl	status,r2
  
  return context;
8112fa0c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112fa10:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
8112fa14:	e0bffd17 	ldw	r2,-12(fp)
8112fa18:	10800283 	ldbu	r2,10(r2)
8112fa1c:	10803fcc 	andi	r2,r2,255
8112fa20:	10001d26 	beq	r2,zero,8112fa98 <OSQPostOpt+0xfc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
8112fa24:	e0bfff03 	ldbu	r2,-4(fp)
8112fa28:	1080004c 	andi	r2,r2,1
8112fa2c:	10000b26 	beq	r2,zero,8112fa5c <OSQPostOpt+0xc0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112fa30:	00000506 	br	8112fa48 <OSQPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112fa34:	000f883a 	mov	r7,zero
8112fa38:	01800104 	movi	r6,4
8112fa3c:	e17ffe17 	ldw	r5,-8(fp)
8112fa40:	e13ffd17 	ldw	r4,-12(fp)
8112fa44:	112a8380 	call	8112a838 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112fa48:	e0bffd17 	ldw	r2,-12(fp)
8112fa4c:	10800283 	ldbu	r2,10(r2)
8112fa50:	10803fcc 	andi	r2,r2,255
8112fa54:	103ff71e 	bne	r2,zero,8112fa34 <__reset+0xfb10fa34>
8112fa58:	00000506 	br	8112fa70 <OSQPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112fa5c:	000f883a 	mov	r7,zero
8112fa60:	01800104 	movi	r6,4
8112fa64:	e17ffe17 	ldw	r5,-8(fp)
8112fa68:	e13ffd17 	ldw	r4,-12(fp)
8112fa6c:	112a8380 	call	8112a838 <OS_EventTaskRdy>
8112fa70:	e0bff717 	ldw	r2,-36(fp)
8112fa74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fa78:	e0bff817 	ldw	r2,-32(fp)
8112fa7c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
8112fa80:	e0bfff03 	ldbu	r2,-4(fp)
8112fa84:	1080010c 	andi	r2,r2,4
8112fa88:	1000011e 	bne	r2,zero,8112fa90 <OSQPostOpt+0xf4>
            OS_Sched();                               /* Find highest priority task ready to run       */
8112fa8c:	112b2f40 	call	8112b2f4 <OS_Sched>
        }
        return (OS_ERR_NONE);
8112fa90:	0005883a 	mov	r2,zero
8112fa94:	00004106 	br	8112fb9c <OSQPostOpt+0x200>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112fa98:	e0bffd17 	ldw	r2,-12(fp)
8112fa9c:	10800117 	ldw	r2,4(r2)
8112faa0:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112faa4:	e0bffa17 	ldw	r2,-24(fp)
8112faa8:	10c0058b 	ldhu	r3,22(r2)
8112faac:	e0bffa17 	ldw	r2,-24(fp)
8112fab0:	1080050b 	ldhu	r2,20(r2)
8112fab4:	18ffffcc 	andi	r3,r3,65535
8112fab8:	10bfffcc 	andi	r2,r2,65535
8112fabc:	18800636 	bltu	r3,r2,8112fad8 <OSQPostOpt+0x13c>
8112fac0:	e0bff717 	ldw	r2,-36(fp)
8112fac4:	e0bff915 	stw	r2,-28(fp)
8112fac8:	e0bff917 	ldw	r2,-28(fp)
8112facc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112fad0:	00800784 	movi	r2,30
8112fad4:	00003106 	br	8112fb9c <OSQPostOpt+0x200>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8112fad8:	e0bfff03 	ldbu	r2,-4(fp)
8112fadc:	1080008c 	andi	r2,r2,2
8112fae0:	10001326 	beq	r2,zero,8112fb30 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
8112fae4:	e0bffa17 	ldw	r2,-24(fp)
8112fae8:	10c00417 	ldw	r3,16(r2)
8112faec:	e0bffa17 	ldw	r2,-24(fp)
8112faf0:	10800117 	ldw	r2,4(r2)
8112faf4:	1880041e 	bne	r3,r2,8112fb08 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8112faf8:	e0bffa17 	ldw	r2,-24(fp)
8112fafc:	10c00217 	ldw	r3,8(r2)
8112fb00:	e0bffa17 	ldw	r2,-24(fp)
8112fb04:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8112fb08:	e0bffa17 	ldw	r2,-24(fp)
8112fb0c:	10800417 	ldw	r2,16(r2)
8112fb10:	10ffff04 	addi	r3,r2,-4
8112fb14:	e0bffa17 	ldw	r2,-24(fp)
8112fb18:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
8112fb1c:	e0bffa17 	ldw	r2,-24(fp)
8112fb20:	10800417 	ldw	r2,16(r2)
8112fb24:	e0fffe17 	ldw	r3,-8(fp)
8112fb28:	10c00015 	stw	r3,0(r2)
8112fb2c:	00001006 	br	8112fb70 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
8112fb30:	e0bffa17 	ldw	r2,-24(fp)
8112fb34:	10800317 	ldw	r2,12(r2)
8112fb38:	11000104 	addi	r4,r2,4
8112fb3c:	e0fffa17 	ldw	r3,-24(fp)
8112fb40:	19000315 	stw	r4,12(r3)
8112fb44:	e0fffe17 	ldw	r3,-8(fp)
8112fb48:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
8112fb4c:	e0bffa17 	ldw	r2,-24(fp)
8112fb50:	10c00317 	ldw	r3,12(r2)
8112fb54:	e0bffa17 	ldw	r2,-24(fp)
8112fb58:	10800217 	ldw	r2,8(r2)
8112fb5c:	1880041e 	bne	r3,r2,8112fb70 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
8112fb60:	e0bffa17 	ldw	r2,-24(fp)
8112fb64:	10c00117 	ldw	r3,4(r2)
8112fb68:	e0bffa17 	ldw	r2,-24(fp)
8112fb6c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112fb70:	e0bffa17 	ldw	r2,-24(fp)
8112fb74:	1080058b 	ldhu	r2,22(r2)
8112fb78:	10800044 	addi	r2,r2,1
8112fb7c:	1007883a 	mov	r3,r2
8112fb80:	e0bffa17 	ldw	r2,-24(fp)
8112fb84:	10c0058d 	sth	r3,22(r2)
8112fb88:	e0bff717 	ldw	r2,-36(fp)
8112fb8c:	e0bffb15 	stw	r2,-20(fp)
8112fb90:	e0bffb17 	ldw	r2,-20(fp)
8112fb94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112fb98:	0005883a 	mov	r2,zero
}
8112fb9c:	e037883a 	mov	sp,fp
8112fba0:	dfc00117 	ldw	ra,4(sp)
8112fba4:	df000017 	ldw	fp,0(sp)
8112fba8:	dec00204 	addi	sp,sp,8
8112fbac:	f800283a 	ret

8112fbb0 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
8112fbb0:	defff604 	addi	sp,sp,-40
8112fbb4:	de00012e 	bgeu	sp,et,8112fbbc <OSQQuery+0xc>
8112fbb8:	003b68fa 	trap	3
8112fbbc:	df000915 	stw	fp,36(sp)
8112fbc0:	df000904 	addi	fp,sp,36
8112fbc4:	e13ffe15 	stw	r4,-8(fp)
8112fbc8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112fbcc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112fbd0:	e0bffe17 	ldw	r2,-8(fp)
8112fbd4:	1000021e 	bne	r2,zero,8112fbe0 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112fbd8:	00800104 	movi	r2,4
8112fbdc:	00004906 	br	8112fd04 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
8112fbe0:	e0bfff17 	ldw	r2,-4(fp)
8112fbe4:	1000021e 	bne	r2,zero,8112fbf0 <OSQQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112fbe8:	00800244 	movi	r2,9
8112fbec:	00004506 	br	8112fd04 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112fbf0:	e0bffe17 	ldw	r2,-8(fp)
8112fbf4:	10800003 	ldbu	r2,0(r2)
8112fbf8:	10803fcc 	andi	r2,r2,255
8112fbfc:	108000a0 	cmpeqi	r2,r2,2
8112fc00:	1000021e 	bne	r2,zero,8112fc0c <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112fc04:	00800044 	movi	r2,1
8112fc08:	00003e06 	br	8112fd04 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fc0c:	0005303a 	rdctl	r2,status
8112fc10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fc14:	e0fffd17 	ldw	r3,-12(fp)
8112fc18:	00bfff84 	movi	r2,-2
8112fc1c:	1884703a 	and	r2,r3,r2
8112fc20:	1001703a 	wrctl	status,r2
  
  return context;
8112fc24:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112fc28:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
8112fc2c:	e0bffe17 	ldw	r2,-8(fp)
8112fc30:	10c00283 	ldbu	r3,10(r2)
8112fc34:	e0bfff17 	ldw	r2,-4(fp)
8112fc38:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
8112fc3c:	e0bffe17 	ldw	r2,-8(fp)
8112fc40:	108002c4 	addi	r2,r2,11
8112fc44:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
8112fc48:	e0bfff17 	ldw	r2,-4(fp)
8112fc4c:	10800204 	addi	r2,r2,8
8112fc50:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112fc54:	e03ff705 	stb	zero,-36(fp)
8112fc58:	00000b06 	br	8112fc88 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
8112fc5c:	e0bff917 	ldw	r2,-28(fp)
8112fc60:	10c00044 	addi	r3,r2,1
8112fc64:	e0fff915 	stw	r3,-28(fp)
8112fc68:	e0fff817 	ldw	r3,-32(fp)
8112fc6c:	19000044 	addi	r4,r3,1
8112fc70:	e13ff815 	stw	r4,-32(fp)
8112fc74:	18c00003 	ldbu	r3,0(r3)
8112fc78:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112fc7c:	e0bff703 	ldbu	r2,-36(fp)
8112fc80:	10800044 	addi	r2,r2,1
8112fc84:	e0bff705 	stb	r2,-36(fp)
8112fc88:	e0bff703 	ldbu	r2,-36(fp)
8112fc8c:	108001b0 	cmpltui	r2,r2,6
8112fc90:	103ff21e 	bne	r2,zero,8112fc5c <__reset+0xfb10fc5c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
8112fc94:	e0bffe17 	ldw	r2,-8(fp)
8112fc98:	10800117 	ldw	r2,4(r2)
8112fc9c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
8112fca0:	e0bffc17 	ldw	r2,-16(fp)
8112fca4:	1080058b 	ldhu	r2,22(r2)
8112fca8:	10bfffcc 	andi	r2,r2,65535
8112fcac:	10000626 	beq	r2,zero,8112fcc8 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
8112fcb0:	e0bffc17 	ldw	r2,-16(fp)
8112fcb4:	10800417 	ldw	r2,16(r2)
8112fcb8:	10c00017 	ldw	r3,0(r2)
8112fcbc:	e0bfff17 	ldw	r2,-4(fp)
8112fcc0:	10c00015 	stw	r3,0(r2)
8112fcc4:	00000206 	br	8112fcd0 <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
8112fcc8:	e0bfff17 	ldw	r2,-4(fp)
8112fccc:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
8112fcd0:	e0bffc17 	ldw	r2,-16(fp)
8112fcd4:	10c0058b 	ldhu	r3,22(r2)
8112fcd8:	e0bfff17 	ldw	r2,-4(fp)
8112fcdc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
8112fce0:	e0bffc17 	ldw	r2,-16(fp)
8112fce4:	10c0050b 	ldhu	r3,20(r2)
8112fce8:	e0bfff17 	ldw	r2,-4(fp)
8112fcec:	10c0018d 	sth	r3,6(r2)
8112fcf0:	e0bffa17 	ldw	r2,-24(fp)
8112fcf4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fcf8:	e0bffb17 	ldw	r2,-20(fp)
8112fcfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112fd00:	0005883a 	mov	r2,zero
}
8112fd04:	e037883a 	mov	sp,fp
8112fd08:	df000017 	ldw	fp,0(sp)
8112fd0c:	dec00104 	addi	sp,sp,4
8112fd10:	f800283a 	ret

8112fd14 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
8112fd14:	defffb04 	addi	sp,sp,-20
8112fd18:	de00012e 	bgeu	sp,et,8112fd20 <OS_QInit+0xc>
8112fd1c:	003b68fa 	trap	3
8112fd20:	dfc00415 	stw	ra,16(sp)
8112fd24:	df000315 	stw	fp,12(sp)
8112fd28:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
8112fd2c:	01407804 	movi	r5,480
8112fd30:	01204574 	movhi	r4,33045
8112fd34:	2136ad04 	addi	r4,r4,-9548
8112fd38:	112b2280 	call	8112b228 <OS_MemClr>
    pq1 = &OSQTbl[0];
8112fd3c:	00a04574 	movhi	r2,33045
8112fd40:	10b6ad04 	addi	r2,r2,-9548
8112fd44:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
8112fd48:	00a04574 	movhi	r2,33045
8112fd4c:	10b6b304 	addi	r2,r2,-9524
8112fd50:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112fd54:	e03ffd0d 	sth	zero,-12(fp)
8112fd58:	00000c06 	br	8112fd8c <OS_QInit+0x78>
        pq1->OSQPtr = pq2;
8112fd5c:	e0bffe17 	ldw	r2,-8(fp)
8112fd60:	e0ffff17 	ldw	r3,-4(fp)
8112fd64:	10c00015 	stw	r3,0(r2)
        pq1++;
8112fd68:	e0bffe17 	ldw	r2,-8(fp)
8112fd6c:	10800604 	addi	r2,r2,24
8112fd70:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
8112fd74:	e0bfff17 	ldw	r2,-4(fp)
8112fd78:	10800604 	addi	r2,r2,24
8112fd7c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112fd80:	e0bffd0b 	ldhu	r2,-12(fp)
8112fd84:	10800044 	addi	r2,r2,1
8112fd88:	e0bffd0d 	sth	r2,-12(fp)
8112fd8c:	e0bffd0b 	ldhu	r2,-12(fp)
8112fd90:	108004f0 	cmpltui	r2,r2,19
8112fd94:	103ff11e 	bne	r2,zero,8112fd5c <__reset+0xfb10fd5c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
8112fd98:	e0bffe17 	ldw	r2,-8(fp)
8112fd9c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
8112fda0:	00a04574 	movhi	r2,33045
8112fda4:	10b6ad04 	addi	r2,r2,-9548
8112fda8:	d0a08615 	stw	r2,-32232(gp)
#endif
}
8112fdac:	0001883a 	nop
8112fdb0:	e037883a 	mov	sp,fp
8112fdb4:	dfc00117 	ldw	ra,4(sp)
8112fdb8:	df000017 	ldw	fp,0(sp)
8112fdbc:	dec00204 	addi	sp,sp,8
8112fdc0:	f800283a 	ret

8112fdc4 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
8112fdc4:	defffa04 	addi	sp,sp,-24
8112fdc8:	de00012e 	bgeu	sp,et,8112fdd0 <OSSemAccept+0xc>
8112fdcc:	003b68fa 	trap	3
8112fdd0:	df000515 	stw	fp,20(sp)
8112fdd4:	df000504 	addi	fp,sp,20
8112fdd8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112fddc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112fde0:	e0bfff17 	ldw	r2,-4(fp)
8112fde4:	1000021e 	bne	r2,zero,8112fdf0 <OSSemAccept+0x2c>
        return (0);
8112fde8:	0005883a 	mov	r2,zero
8112fdec:	00001f06 	br	8112fe6c <OSSemAccept+0xa8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112fdf0:	e0bfff17 	ldw	r2,-4(fp)
8112fdf4:	10800003 	ldbu	r2,0(r2)
8112fdf8:	10803fcc 	andi	r2,r2,255
8112fdfc:	108000e0 	cmpeqi	r2,r2,3
8112fe00:	1000021e 	bne	r2,zero,8112fe0c <OSSemAccept+0x48>
        return (0);
8112fe04:	0005883a 	mov	r2,zero
8112fe08:	00001806 	br	8112fe6c <OSSemAccept+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fe0c:	0005303a 	rdctl	r2,status
8112fe10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fe14:	e0fffe17 	ldw	r3,-8(fp)
8112fe18:	00bfff84 	movi	r2,-2
8112fe1c:	1884703a 	and	r2,r3,r2
8112fe20:	1001703a 	wrctl	status,r2
  
  return context;
8112fe24:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112fe28:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
8112fe2c:	e0bfff17 	ldw	r2,-4(fp)
8112fe30:	1080020b 	ldhu	r2,8(r2)
8112fe34:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
8112fe38:	e0bffd0b 	ldhu	r2,-12(fp)
8112fe3c:	10000626 	beq	r2,zero,8112fe58 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8112fe40:	e0bfff17 	ldw	r2,-4(fp)
8112fe44:	1080020b 	ldhu	r2,8(r2)
8112fe48:	10bfffc4 	addi	r2,r2,-1
8112fe4c:	1007883a 	mov	r3,r2
8112fe50:	e0bfff17 	ldw	r2,-4(fp)
8112fe54:	10c0020d 	sth	r3,8(r2)
8112fe58:	e0bffb17 	ldw	r2,-20(fp)
8112fe5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fe60:	e0bffc17 	ldw	r2,-16(fp)
8112fe64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
8112fe68:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112fe6c:	e037883a 	mov	sp,fp
8112fe70:	df000017 	ldw	fp,0(sp)
8112fe74:	dec00104 	addi	sp,sp,4
8112fe78:	f800283a 	ret

8112fe7c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
8112fe7c:	defff904 	addi	sp,sp,-28
8112fe80:	de00012e 	bgeu	sp,et,8112fe88 <OSSemCreate+0xc>
8112fe84:	003b68fa 	trap	3
8112fe88:	dfc00615 	stw	ra,24(sp)
8112fe8c:	df000515 	stw	fp,20(sp)
8112fe90:	df000504 	addi	fp,sp,20
8112fe94:	2005883a 	mov	r2,r4
8112fe98:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112fe9c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112fea0:	d0a08a03 	ldbu	r2,-32216(gp)
8112fea4:	10803fcc 	andi	r2,r2,255
8112fea8:	10000226 	beq	r2,zero,8112feb4 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
8112feac:	0005883a 	mov	r2,zero
8112feb0:	00002506 	br	8112ff48 <OSSemCreate+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112feb4:	0005303a 	rdctl	r2,status
8112feb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112febc:	e0fffe17 	ldw	r3,-8(fp)
8112fec0:	00bfff84 	movi	r2,-2
8112fec4:	1884703a 	and	r2,r3,r2
8112fec8:	1001703a 	wrctl	status,r2
  
  return context;
8112fecc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112fed0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
8112fed4:	d0a08917 	ldw	r2,-32220(gp)
8112fed8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
8112fedc:	d0a08917 	ldw	r2,-32220(gp)
8112fee0:	10000326 	beq	r2,zero,8112fef0 <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112fee4:	d0a08917 	ldw	r2,-32220(gp)
8112fee8:	10800117 	ldw	r2,4(r2)
8112feec:	d0a08915 	stw	r2,-32220(gp)
8112fef0:	e0bffb17 	ldw	r2,-20(fp)
8112fef4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fef8:	e0bffc17 	ldw	r2,-16(fp)
8112fefc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
8112ff00:	e0bffd17 	ldw	r2,-12(fp)
8112ff04:	10000f26 	beq	r2,zero,8112ff44 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
8112ff08:	e0bffd17 	ldw	r2,-12(fp)
8112ff0c:	00c000c4 	movi	r3,3
8112ff10:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
8112ff14:	e0bffd17 	ldw	r2,-12(fp)
8112ff18:	e0ffff0b 	ldhu	r3,-4(fp)
8112ff1c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
8112ff20:	e0bffd17 	ldw	r2,-12(fp)
8112ff24:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
8112ff28:	e0bffd17 	ldw	r2,-12(fp)
8112ff2c:	00c00fc4 	movi	r3,63
8112ff30:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
8112ff34:	e0bffd17 	ldw	r2,-12(fp)
8112ff38:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
8112ff3c:	e13ffd17 	ldw	r4,-12(fp)
8112ff40:	112ae100 	call	8112ae10 <OS_EventWaitListInit>
    }
    return (pevent);
8112ff44:	e0bffd17 	ldw	r2,-12(fp)
}
8112ff48:	e037883a 	mov	sp,fp
8112ff4c:	dfc00117 	ldw	ra,4(sp)
8112ff50:	df000017 	ldw	fp,0(sp)
8112ff54:	dec00204 	addi	sp,sp,8
8112ff58:	f800283a 	ret

8112ff5c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112ff5c:	defff304 	addi	sp,sp,-52
8112ff60:	de00012e 	bgeu	sp,et,8112ff68 <OSSemDel+0xc>
8112ff64:	003b68fa 	trap	3
8112ff68:	dfc00c15 	stw	ra,48(sp)
8112ff6c:	df000b15 	stw	fp,44(sp)
8112ff70:	df000b04 	addi	fp,sp,44
8112ff74:	e13ffd15 	stw	r4,-12(fp)
8112ff78:	2805883a 	mov	r2,r5
8112ff7c:	e1bfff15 	stw	r6,-4(fp)
8112ff80:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112ff84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112ff88:	e0bfff17 	ldw	r2,-4(fp)
8112ff8c:	1000021e 	bne	r2,zero,8112ff98 <OSSemDel+0x3c>
        return (pevent);
8112ff90:	e0bffd17 	ldw	r2,-12(fp)
8112ff94:	00007e06 	br	81130190 <OSSemDel+0x234>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112ff98:	e0bffd17 	ldw	r2,-12(fp)
8112ff9c:	1000051e 	bne	r2,zero,8112ffb4 <OSSemDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112ffa0:	e0bfff17 	ldw	r2,-4(fp)
8112ffa4:	00c00104 	movi	r3,4
8112ffa8:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112ffac:	e0bffd17 	ldw	r2,-12(fp)
8112ffb0:	00007706 	br	81130190 <OSSemDel+0x234>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112ffb4:	e0bffd17 	ldw	r2,-12(fp)
8112ffb8:	10800003 	ldbu	r2,0(r2)
8112ffbc:	10803fcc 	andi	r2,r2,255
8112ffc0:	108000e0 	cmpeqi	r2,r2,3
8112ffc4:	1000051e 	bne	r2,zero,8112ffdc <OSSemDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112ffc8:	e0bfff17 	ldw	r2,-4(fp)
8112ffcc:	00c00044 	movi	r3,1
8112ffd0:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112ffd4:	e0bffd17 	ldw	r2,-12(fp)
8112ffd8:	00006d06 	br	81130190 <OSSemDel+0x234>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112ffdc:	d0a08a03 	ldbu	r2,-32216(gp)
8112ffe0:	10803fcc 	andi	r2,r2,255
8112ffe4:	10000526 	beq	r2,zero,8112fffc <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112ffe8:	e0bfff17 	ldw	r2,-4(fp)
8112ffec:	00c003c4 	movi	r3,15
8112fff0:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112fff4:	e0bffd17 	ldw	r2,-12(fp)
8112fff8:	00006506 	br	81130190 <OSSemDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fffc:	0005303a 	rdctl	r2,status
81130000:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130004:	e0fffc17 	ldw	r3,-16(fp)
81130008:	00bfff84 	movi	r2,-2
8113000c:	1884703a 	and	r2,r3,r2
81130010:	1001703a 	wrctl	status,r2
  
  return context;
81130014:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130018:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
8113001c:	e0bffd17 	ldw	r2,-12(fp)
81130020:	10800283 	ldbu	r2,10(r2)
81130024:	10803fcc 	andi	r2,r2,255
81130028:	10000326 	beq	r2,zero,81130038 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8113002c:	00800044 	movi	r2,1
81130030:	e0bff505 	stb	r2,-44(fp)
81130034:	00000106 	br	8113003c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81130038:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
8113003c:	e0bffe03 	ldbu	r2,-8(fp)
81130040:	10000326 	beq	r2,zero,81130050 <OSSemDel+0xf4>
81130044:	10800060 	cmpeqi	r2,r2,1
81130048:	1000281e 	bne	r2,zero,811300ec <OSSemDel+0x190>
8113004c:	00004506 	br	81130164 <OSSemDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
81130050:	e0bff503 	ldbu	r2,-44(fp)
81130054:	1000161e 	bne	r2,zero,811300b0 <OSSemDel+0x154>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
81130058:	e0bffd17 	ldw	r2,-12(fp)
8113005c:	00c00fc4 	movi	r3,63
81130060:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
81130064:	e0bffd17 	ldw	r2,-12(fp)
81130068:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8113006c:	e0bffd17 	ldw	r2,-12(fp)
81130070:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
81130074:	d0e08917 	ldw	r3,-32220(gp)
81130078:	e0bffd17 	ldw	r2,-12(fp)
8113007c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
81130080:	e0bffd17 	ldw	r2,-12(fp)
81130084:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
81130088:	e0bffd17 	ldw	r2,-12(fp)
8113008c:	d0a08915 	stw	r2,-32220(gp)
81130090:	e0bff717 	ldw	r2,-36(fp)
81130094:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130098:	e0bff817 	ldw	r2,-32(fp)
8113009c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
811300a0:	e0bfff17 	ldw	r2,-4(fp)
811300a4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
811300a8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
811300ac:	00003706 	br	8113018c <OSSemDel+0x230>
811300b0:	e0bff717 	ldw	r2,-36(fp)
811300b4:	e0bff915 	stw	r2,-28(fp)
811300b8:	e0bff917 	ldw	r2,-28(fp)
811300bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
811300c0:	e0bfff17 	ldw	r2,-4(fp)
811300c4:	00c01244 	movi	r3,73
811300c8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
811300cc:	e0bffd17 	ldw	r2,-12(fp)
811300d0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
811300d4:	00002d06 	br	8113018c <OSSemDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
811300d8:	000f883a 	mov	r7,zero
811300dc:	01800044 	movi	r6,1
811300e0:	000b883a 	mov	r5,zero
811300e4:	e13ffd17 	ldw	r4,-12(fp)
811300e8:	112a8380 	call	8112a838 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
811300ec:	e0bffd17 	ldw	r2,-12(fp)
811300f0:	10800283 	ldbu	r2,10(r2)
811300f4:	10803fcc 	andi	r2,r2,255
811300f8:	103ff71e 	bne	r2,zero,811300d8 <__reset+0xfb1100d8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
811300fc:	e0bffd17 	ldw	r2,-12(fp)
81130100:	00c00fc4 	movi	r3,63
81130104:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81130108:	e0bffd17 	ldw	r2,-12(fp)
8113010c:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81130110:	e0bffd17 	ldw	r2,-12(fp)
81130114:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
81130118:	d0e08917 	ldw	r3,-32220(gp)
8113011c:	e0bffd17 	ldw	r2,-12(fp)
81130120:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
81130124:	e0bffd17 	ldw	r2,-12(fp)
81130128:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8113012c:	e0bffd17 	ldw	r2,-12(fp)
81130130:	d0a08915 	stw	r2,-32220(gp)
81130134:	e0bff717 	ldw	r2,-36(fp)
81130138:	e0bffa15 	stw	r2,-24(fp)
8113013c:	e0bffa17 	ldw	r2,-24(fp)
81130140:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81130144:	e0bff503 	ldbu	r2,-44(fp)
81130148:	10800058 	cmpnei	r2,r2,1
8113014c:	1000011e 	bne	r2,zero,81130154 <OSSemDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81130150:	112b2f40 	call	8112b2f4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
81130154:	e0bfff17 	ldw	r2,-4(fp)
81130158:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
8113015c:	e03ff615 	stw	zero,-40(fp)
             break;
81130160:	00000a06 	br	8113018c <OSSemDel+0x230>
81130164:	e0bff717 	ldw	r2,-36(fp)
81130168:	e0bffb15 	stw	r2,-20(fp)
8113016c:	e0bffb17 	ldw	r2,-20(fp)
81130170:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
81130174:	e0bfff17 	ldw	r2,-4(fp)
81130178:	00c001c4 	movi	r3,7
8113017c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
81130180:	e0bffd17 	ldw	r2,-12(fp)
81130184:	e0bff615 	stw	r2,-40(fp)
             break;
81130188:	0001883a 	nop
    }
    return (pevent_return);
8113018c:	e0bff617 	ldw	r2,-40(fp)
}
81130190:	e037883a 	mov	sp,fp
81130194:	dfc00117 	ldw	ra,4(sp)
81130198:	df000017 	ldw	fp,0(sp)
8113019c:	dec00204 	addi	sp,sp,8
811301a0:	f800283a 	ret

811301a4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
811301a4:	defff504 	addi	sp,sp,-44
811301a8:	de00012e 	bgeu	sp,et,811301b0 <OSSemPend+0xc>
811301ac:	003b68fa 	trap	3
811301b0:	dfc00a15 	stw	ra,40(sp)
811301b4:	df000915 	stw	fp,36(sp)
811301b8:	df000904 	addi	fp,sp,36
811301bc:	e13ffd15 	stw	r4,-12(fp)
811301c0:	2805883a 	mov	r2,r5
811301c4:	e1bfff15 	stw	r6,-4(fp)
811301c8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811301cc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
811301d0:	e0bfff17 	ldw	r2,-4(fp)
811301d4:	10007226 	beq	r2,zero,811303a0 <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
811301d8:	e0bffd17 	ldw	r2,-12(fp)
811301dc:	1000041e 	bne	r2,zero,811301f0 <OSSemPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
811301e0:	e0bfff17 	ldw	r2,-4(fp)
811301e4:	00c00104 	movi	r3,4
811301e8:	10c00005 	stb	r3,0(r2)
        return;
811301ec:	00006d06 	br	811303a4 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
811301f0:	e0bffd17 	ldw	r2,-12(fp)
811301f4:	10800003 	ldbu	r2,0(r2)
811301f8:	10803fcc 	andi	r2,r2,255
811301fc:	108000e0 	cmpeqi	r2,r2,3
81130200:	1000041e 	bne	r2,zero,81130214 <OSSemPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
81130204:	e0bfff17 	ldw	r2,-4(fp)
81130208:	00c00044 	movi	r3,1
8113020c:	10c00005 	stb	r3,0(r2)
        return;
81130210:	00006406 	br	811303a4 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
81130214:	d0a08a03 	ldbu	r2,-32216(gp)
81130218:	10803fcc 	andi	r2,r2,255
8113021c:	10000426 	beq	r2,zero,81130230 <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
81130220:	e0bfff17 	ldw	r2,-4(fp)
81130224:	00c00084 	movi	r3,2
81130228:	10c00005 	stb	r3,0(r2)
        return;
8113022c:	00005d06 	br	811303a4 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
81130230:	d0a07803 	ldbu	r2,-32288(gp)
81130234:	10803fcc 	andi	r2,r2,255
81130238:	10000426 	beq	r2,zero,8113024c <OSSemPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
8113023c:	e0bfff17 	ldw	r2,-4(fp)
81130240:	00c00344 	movi	r3,13
81130244:	10c00005 	stb	r3,0(r2)
        return;
81130248:	00005606 	br	811303a4 <OSSemPend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113024c:	0005303a 	rdctl	r2,status
81130250:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130254:	e0fffc17 	ldw	r3,-16(fp)
81130258:	00bfff84 	movi	r2,-2
8113025c:	1884703a 	and	r2,r3,r2
81130260:	1001703a 	wrctl	status,r2
  
  return context;
81130264:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130268:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
8113026c:	e0bffd17 	ldw	r2,-12(fp)
81130270:	1080020b 	ldhu	r2,8(r2)
81130274:	10bfffcc 	andi	r2,r2,65535
81130278:	10000d26 	beq	r2,zero,811302b0 <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
8113027c:	e0bffd17 	ldw	r2,-12(fp)
81130280:	1080020b 	ldhu	r2,8(r2)
81130284:	10bfffc4 	addi	r2,r2,-1
81130288:	1007883a 	mov	r3,r2
8113028c:	e0bffd17 	ldw	r2,-12(fp)
81130290:	10c0020d 	sth	r3,8(r2)
81130294:	e0bff717 	ldw	r2,-36(fp)
81130298:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113029c:	e0bff817 	ldw	r2,-32(fp)
811302a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
811302a4:	e0bfff17 	ldw	r2,-4(fp)
811302a8:	10000005 	stb	zero,0(r2)
        return;
811302ac:	00003d06 	br	811303a4 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
811302b0:	d0a08b17 	ldw	r2,-32212(gp)
811302b4:	d0e08b17 	ldw	r3,-32212(gp)
811302b8:	18c00c03 	ldbu	r3,48(r3)
811302bc:	18c00054 	ori	r3,r3,1
811302c0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
811302c4:	d0a08b17 	ldw	r2,-32212(gp)
811302c8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
811302cc:	d0a08b17 	ldw	r2,-32212(gp)
811302d0:	e0fffe0b 	ldhu	r3,-8(fp)
811302d4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
811302d8:	e13ffd17 	ldw	r4,-12(fp)
811302dc:	112a9d80 	call	8112a9d8 <OS_EventTaskWait>
811302e0:	e0bff717 	ldw	r2,-36(fp)
811302e4:	e0bffb15 	stw	r2,-20(fp)
811302e8:	e0bffb17 	ldw	r2,-20(fp)
811302ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
811302f0:	112b2f40 	call	8112b2f4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811302f4:	0005303a 	rdctl	r2,status
811302f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811302fc:	e0fff917 	ldw	r3,-28(fp)
81130300:	00bfff84 	movi	r2,-2
81130304:	1884703a 	and	r2,r3,r2
81130308:	1001703a 	wrctl	status,r2
  
  return context;
8113030c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
81130310:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81130314:	d0a08b17 	ldw	r2,-32212(gp)
81130318:	10800c43 	ldbu	r2,49(r2)
8113031c:	10803fcc 	andi	r2,r2,255
81130320:	10000326 	beq	r2,zero,81130330 <OSSemPend+0x18c>
81130324:	108000a0 	cmpeqi	r2,r2,2
81130328:	1000041e 	bne	r2,zero,8113033c <OSSemPend+0x198>
8113032c:	00000706 	br	8113034c <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81130330:	e0bfff17 	ldw	r2,-4(fp)
81130334:	10000005 	stb	zero,0(r2)
             break;
81130338:	00000c06 	br	8113036c <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8113033c:	e0bfff17 	ldw	r2,-4(fp)
81130340:	00c00384 	movi	r3,14
81130344:	10c00005 	stb	r3,0(r2)
             break;
81130348:	00000806 	br	8113036c <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
8113034c:	d0a08b17 	ldw	r2,-32212(gp)
81130350:	e17ffd17 	ldw	r5,-12(fp)
81130354:	1009883a 	mov	r4,r2
81130358:	112ac480 	call	8112ac48 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8113035c:	e0bfff17 	ldw	r2,-4(fp)
81130360:	00c00284 	movi	r3,10
81130364:	10c00005 	stb	r3,0(r2)
             break;
81130368:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8113036c:	d0a08b17 	ldw	r2,-32212(gp)
81130370:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81130374:	d0a08b17 	ldw	r2,-32212(gp)
81130378:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8113037c:	d0a08b17 	ldw	r2,-32212(gp)
81130380:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81130384:	d0a08b17 	ldw	r2,-32212(gp)
81130388:	10000815 	stw	zero,32(r2)
8113038c:	e0bff717 	ldw	r2,-36(fp)
81130390:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130394:	e0bffa17 	ldw	r2,-24(fp)
81130398:	1001703a 	wrctl	status,r2
8113039c:	00000106 	br	811303a4 <OSSemPend+0x200>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
811303a0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
811303a4:	e037883a 	mov	sp,fp
811303a8:	dfc00117 	ldw	ra,4(sp)
811303ac:	df000017 	ldw	fp,0(sp)
811303b0:	dec00204 	addi	sp,sp,8
811303b4:	f800283a 	ret

811303b8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
811303b8:	defff604 	addi	sp,sp,-40
811303bc:	de00012e 	bgeu	sp,et,811303c4 <OSSemPendAbort+0xc>
811303c0:	003b68fa 	trap	3
811303c4:	dfc00915 	stw	ra,36(sp)
811303c8:	df000815 	stw	fp,32(sp)
811303cc:	df000804 	addi	fp,sp,32
811303d0:	e13ffd15 	stw	r4,-12(fp)
811303d4:	2805883a 	mov	r2,r5
811303d8:	e1bfff15 	stw	r6,-4(fp)
811303dc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811303e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
811303e4:	e0bfff17 	ldw	r2,-4(fp)
811303e8:	1000021e 	bne	r2,zero,811303f4 <OSSemPendAbort+0x3c>
        return (0);
811303ec:	0005883a 	mov	r2,zero
811303f0:	00004906 	br	81130518 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
811303f4:	e0bffd17 	ldw	r2,-12(fp)
811303f8:	1000051e 	bne	r2,zero,81130410 <OSSemPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
811303fc:	e0bfff17 	ldw	r2,-4(fp)
81130400:	00c00104 	movi	r3,4
81130404:	10c00005 	stb	r3,0(r2)
        return (0);
81130408:	0005883a 	mov	r2,zero
8113040c:	00004206 	br	81130518 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81130410:	e0bffd17 	ldw	r2,-12(fp)
81130414:	10800003 	ldbu	r2,0(r2)
81130418:	10803fcc 	andi	r2,r2,255
8113041c:	108000e0 	cmpeqi	r2,r2,3
81130420:	1000051e 	bne	r2,zero,81130438 <OSSemPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81130424:	e0bfff17 	ldw	r2,-4(fp)
81130428:	00c00044 	movi	r3,1
8113042c:	10c00005 	stb	r3,0(r2)
        return (0);
81130430:	0005883a 	mov	r2,zero
81130434:	00003806 	br	81130518 <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130438:	0005303a 	rdctl	r2,status
8113043c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130440:	e0fffc17 	ldw	r3,-16(fp)
81130444:	00bfff84 	movi	r2,-2
81130448:	1884703a 	and	r2,r3,r2
8113044c:	1001703a 	wrctl	status,r2
  
  return context;
81130450:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130454:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
81130458:	e0bffd17 	ldw	r2,-12(fp)
8113045c:	10800283 	ldbu	r2,10(r2)
81130460:	10803fcc 	andi	r2,r2,255
81130464:	10002526 	beq	r2,zero,811304fc <OSSemPendAbort+0x144>
        nbr_tasks = 0;
81130468:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8113046c:	e0bffe03 	ldbu	r2,-8(fp)
81130470:	10800060 	cmpeqi	r2,r2,1
81130474:	10000e26 	beq	r2,zero,811304b0 <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
81130478:	00000806 	br	8113049c <OSSemPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8113047c:	01c00084 	movi	r7,2
81130480:	01800044 	movi	r6,1
81130484:	000b883a 	mov	r5,zero
81130488:	e13ffd17 	ldw	r4,-12(fp)
8113048c:	112a8380 	call	8112a838 <OS_EventTaskRdy>
                     nbr_tasks++;
81130490:	e0bff803 	ldbu	r2,-32(fp)
81130494:	10800044 	addi	r2,r2,1
81130498:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8113049c:	e0bffd17 	ldw	r2,-12(fp)
811304a0:	10800283 	ldbu	r2,10(r2)
811304a4:	10803fcc 	andi	r2,r2,255
811304a8:	103ff41e 	bne	r2,zero,8113047c <__reset+0xfb11047c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
811304ac:	00000906 	br	811304d4 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
811304b0:	01c00084 	movi	r7,2
811304b4:	01800044 	movi	r6,1
811304b8:	000b883a 	mov	r5,zero
811304bc:	e13ffd17 	ldw	r4,-12(fp)
811304c0:	112a8380 	call	8112a838 <OS_EventTaskRdy>
                 nbr_tasks++;
811304c4:	e0bff803 	ldbu	r2,-32(fp)
811304c8:	10800044 	addi	r2,r2,1
811304cc:	e0bff805 	stb	r2,-32(fp)
                 break;
811304d0:	0001883a 	nop
811304d4:	e0bff917 	ldw	r2,-28(fp)
811304d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811304dc:	e0bffa17 	ldw	r2,-24(fp)
811304e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
811304e4:	112b2f40 	call	8112b2f4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
811304e8:	e0bfff17 	ldw	r2,-4(fp)
811304ec:	00c00384 	movi	r3,14
811304f0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
811304f4:	e0bff803 	ldbu	r2,-32(fp)
811304f8:	00000706 	br	81130518 <OSSemPendAbort+0x160>
811304fc:	e0bff917 	ldw	r2,-28(fp)
81130500:	e0bffb15 	stw	r2,-20(fp)
81130504:	e0bffb17 	ldw	r2,-20(fp)
81130508:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8113050c:	e0bfff17 	ldw	r2,-4(fp)
81130510:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
81130514:	0005883a 	mov	r2,zero
}
81130518:	e037883a 	mov	sp,fp
8113051c:	dfc00117 	ldw	ra,4(sp)
81130520:	df000017 	ldw	fp,0(sp)
81130524:	dec00204 	addi	sp,sp,8
81130528:	f800283a 	ret

8113052c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
8113052c:	defff804 	addi	sp,sp,-32
81130530:	de00012e 	bgeu	sp,et,81130538 <OSSemPost+0xc>
81130534:	003b68fa 	trap	3
81130538:	dfc00715 	stw	ra,28(sp)
8113053c:	df000615 	stw	fp,24(sp)
81130540:	df000604 	addi	fp,sp,24
81130544:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130548:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8113054c:	e0bfff17 	ldw	r2,-4(fp)
81130550:	1000021e 	bne	r2,zero,8113055c <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
81130554:	00800104 	movi	r2,4
81130558:	00003506 	br	81130630 <OSSemPost+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8113055c:	e0bfff17 	ldw	r2,-4(fp)
81130560:	10800003 	ldbu	r2,0(r2)
81130564:	10803fcc 	andi	r2,r2,255
81130568:	108000e0 	cmpeqi	r2,r2,3
8113056c:	1000021e 	bne	r2,zero,81130578 <OSSemPost+0x4c>
        return (OS_ERR_EVENT_TYPE);
81130570:	00800044 	movi	r2,1
81130574:	00002e06 	br	81130630 <OSSemPost+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130578:	0005303a 	rdctl	r2,status
8113057c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130580:	e0fffe17 	ldw	r3,-8(fp)
81130584:	00bfff84 	movi	r2,-2
81130588:	1884703a 	and	r2,r3,r2
8113058c:	1001703a 	wrctl	status,r2
  
  return context;
81130590:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81130594:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
81130598:	e0bfff17 	ldw	r2,-4(fp)
8113059c:	10800283 	ldbu	r2,10(r2)
811305a0:	10803fcc 	andi	r2,r2,255
811305a4:	10000c26 	beq	r2,zero,811305d8 <OSSemPost+0xac>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
811305a8:	000f883a 	mov	r7,zero
811305ac:	01800044 	movi	r6,1
811305b0:	000b883a 	mov	r5,zero
811305b4:	e13fff17 	ldw	r4,-4(fp)
811305b8:	112a8380 	call	8112a838 <OS_EventTaskRdy>
811305bc:	e0bffa17 	ldw	r2,-24(fp)
811305c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811305c4:	e0bffb17 	ldw	r2,-20(fp)
811305c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
811305cc:	112b2f40 	call	8112b2f4 <OS_Sched>
        return (OS_ERR_NONE);
811305d0:	0005883a 	mov	r2,zero
811305d4:	00001606 	br	81130630 <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
811305d8:	e0bfff17 	ldw	r2,-4(fp)
811305dc:	1080020b 	ldhu	r2,8(r2)
811305e0:	10ffffcc 	andi	r3,r2,65535
811305e4:	00bfffd4 	movui	r2,65535
811305e8:	18800c26 	beq	r3,r2,8113061c <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
811305ec:	e0bfff17 	ldw	r2,-4(fp)
811305f0:	1080020b 	ldhu	r2,8(r2)
811305f4:	10800044 	addi	r2,r2,1
811305f8:	1007883a 	mov	r3,r2
811305fc:	e0bfff17 	ldw	r2,-4(fp)
81130600:	10c0020d 	sth	r3,8(r2)
81130604:	e0bffa17 	ldw	r2,-24(fp)
81130608:	e0bffc15 	stw	r2,-16(fp)
8113060c:	e0bffc17 	ldw	r2,-16(fp)
81130610:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
81130614:	0005883a 	mov	r2,zero
81130618:	00000506 	br	81130630 <OSSemPost+0x104>
8113061c:	e0bffa17 	ldw	r2,-24(fp)
81130620:	e0bffd15 	stw	r2,-12(fp)
81130624:	e0bffd17 	ldw	r2,-12(fp)
81130628:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
8113062c:	00800c84 	movi	r2,50
}
81130630:	e037883a 	mov	sp,fp
81130634:	dfc00117 	ldw	ra,4(sp)
81130638:	df000017 	ldw	fp,0(sp)
8113063c:	dec00204 	addi	sp,sp,8
81130640:	f800283a 	ret

81130644 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
81130644:	defff704 	addi	sp,sp,-36
81130648:	de00012e 	bgeu	sp,et,81130650 <OSSemQuery+0xc>
8113064c:	003b68fa 	trap	3
81130650:	df000815 	stw	fp,32(sp)
81130654:	df000804 	addi	fp,sp,32
81130658:	e13ffe15 	stw	r4,-8(fp)
8113065c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81130660:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81130664:	e0bffe17 	ldw	r2,-8(fp)
81130668:	1000021e 	bne	r2,zero,81130674 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8113066c:	00800104 	movi	r2,4
81130670:	00003606 	br	8113074c <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
81130674:	e0bfff17 	ldw	r2,-4(fp)
81130678:	1000021e 	bne	r2,zero,81130684 <OSSemQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8113067c:	00800244 	movi	r2,9
81130680:	00003206 	br	8113074c <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
81130684:	e0bffe17 	ldw	r2,-8(fp)
81130688:	10800003 	ldbu	r2,0(r2)
8113068c:	10803fcc 	andi	r2,r2,255
81130690:	108000e0 	cmpeqi	r2,r2,3
81130694:	1000021e 	bne	r2,zero,811306a0 <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
81130698:	00800044 	movi	r2,1
8113069c:	00002b06 	br	8113074c <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811306a0:	0005303a 	rdctl	r2,status
811306a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811306a8:	e0fffd17 	ldw	r3,-12(fp)
811306ac:	00bfff84 	movi	r2,-2
811306b0:	1884703a 	and	r2,r3,r2
811306b4:	1001703a 	wrctl	status,r2
  
  return context;
811306b8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811306bc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
811306c0:	e0bffe17 	ldw	r2,-8(fp)
811306c4:	10c00283 	ldbu	r3,10(r2)
811306c8:	e0bfff17 	ldw	r2,-4(fp)
811306cc:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
811306d0:	e0bffe17 	ldw	r2,-8(fp)
811306d4:	108002c4 	addi	r2,r2,11
811306d8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
811306dc:	e0bfff17 	ldw	r2,-4(fp)
811306e0:	10800084 	addi	r2,r2,2
811306e4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811306e8:	e03ffa05 	stb	zero,-24(fp)
811306ec:	00000b06 	br	8113071c <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
811306f0:	e0bff917 	ldw	r2,-28(fp)
811306f4:	10c00044 	addi	r3,r2,1
811306f8:	e0fff915 	stw	r3,-28(fp)
811306fc:	e0fff817 	ldw	r3,-32(fp)
81130700:	19000044 	addi	r4,r3,1
81130704:	e13ff815 	stw	r4,-32(fp)
81130708:	18c00003 	ldbu	r3,0(r3)
8113070c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81130710:	e0bffa03 	ldbu	r2,-24(fp)
81130714:	10800044 	addi	r2,r2,1
81130718:	e0bffa05 	stb	r2,-24(fp)
8113071c:	e0bffa03 	ldbu	r2,-24(fp)
81130720:	108001b0 	cmpltui	r2,r2,6
81130724:	103ff21e 	bne	r2,zero,811306f0 <__reset+0xfb1106f0>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
81130728:	e0bffe17 	ldw	r2,-8(fp)
8113072c:	10c0020b 	ldhu	r3,8(r2)
81130730:	e0bfff17 	ldw	r2,-4(fp)
81130734:	10c0000d 	sth	r3,0(r2)
81130738:	e0bffb17 	ldw	r2,-20(fp)
8113073c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130740:	e0bffc17 	ldw	r2,-16(fp)
81130744:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130748:	0005883a 	mov	r2,zero
}
8113074c:	e037883a 	mov	sp,fp
81130750:	df000017 	ldw	fp,0(sp)
81130754:	dec00104 	addi	sp,sp,4
81130758:	f800283a 	ret

8113075c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
8113075c:	defff904 	addi	sp,sp,-28
81130760:	de00012e 	bgeu	sp,et,81130768 <OSSemSet+0xc>
81130764:	003b68fa 	trap	3
81130768:	df000615 	stw	fp,24(sp)
8113076c:	df000604 	addi	fp,sp,24
81130770:	e13ffd15 	stw	r4,-12(fp)
81130774:	2805883a 	mov	r2,r5
81130778:	e1bfff15 	stw	r6,-4(fp)
8113077c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130780:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81130784:	e0bfff17 	ldw	r2,-4(fp)
81130788:	10003126 	beq	r2,zero,81130850 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8113078c:	e0bffd17 	ldw	r2,-12(fp)
81130790:	1000041e 	bne	r2,zero,811307a4 <OSSemSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
81130794:	e0bfff17 	ldw	r2,-4(fp)
81130798:	00c00104 	movi	r3,4
8113079c:	10c00005 	stb	r3,0(r2)
        return;
811307a0:	00002c06 	br	81130854 <OSSemSet+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
811307a4:	e0bffd17 	ldw	r2,-12(fp)
811307a8:	10800003 	ldbu	r2,0(r2)
811307ac:	10803fcc 	andi	r2,r2,255
811307b0:	108000e0 	cmpeqi	r2,r2,3
811307b4:	1000041e 	bne	r2,zero,811307c8 <OSSemSet+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
811307b8:	e0bfff17 	ldw	r2,-4(fp)
811307bc:	00c00044 	movi	r3,1
811307c0:	10c00005 	stb	r3,0(r2)
        return;
811307c4:	00002306 	br	81130854 <OSSemSet+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811307c8:	0005303a 	rdctl	r2,status
811307cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811307d0:	e0fffc17 	ldw	r3,-16(fp)
811307d4:	00bfff84 	movi	r2,-2
811307d8:	1884703a 	and	r2,r3,r2
811307dc:	1001703a 	wrctl	status,r2
  
  return context;
811307e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811307e4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
811307e8:	e0bfff17 	ldw	r2,-4(fp)
811307ec:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
811307f0:	e0bffd17 	ldw	r2,-12(fp)
811307f4:	1080020b 	ldhu	r2,8(r2)
811307f8:	10bfffcc 	andi	r2,r2,65535
811307fc:	10000426 	beq	r2,zero,81130810 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
81130800:	e0bffd17 	ldw	r2,-12(fp)
81130804:	e0fffe0b 	ldhu	r3,-8(fp)
81130808:	10c0020d 	sth	r3,8(r2)
8113080c:	00000b06 	br	8113083c <OSSemSet+0xe0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
81130810:	e0bffd17 	ldw	r2,-12(fp)
81130814:	10800283 	ldbu	r2,10(r2)
81130818:	10803fcc 	andi	r2,r2,255
8113081c:	1000041e 	bne	r2,zero,81130830 <OSSemSet+0xd4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
81130820:	e0bffd17 	ldw	r2,-12(fp)
81130824:	e0fffe0b 	ldhu	r3,-8(fp)
81130828:	10c0020d 	sth	r3,8(r2)
8113082c:	00000306 	br	8113083c <OSSemSet+0xe0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
81130830:	e0bfff17 	ldw	r2,-4(fp)
81130834:	00c01244 	movi	r3,73
81130838:	10c00005 	stb	r3,0(r2)
8113083c:	e0bffa17 	ldw	r2,-24(fp)
81130840:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130844:	e0bffb17 	ldw	r2,-20(fp)
81130848:	1001703a 	wrctl	status,r2
8113084c:	00000106 	br	81130854 <OSSemSet+0xf8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
81130850:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
81130854:	e037883a 	mov	sp,fp
81130858:	df000017 	ldw	fp,0(sp)
8113085c:	dec00104 	addi	sp,sp,4
81130860:	f800283a 	ret

81130864 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
81130864:	defff104 	addi	sp,sp,-60
81130868:	de00012e 	bgeu	sp,et,81130870 <OSTaskChangePrio+0xc>
8113086c:	003b68fa 	trap	3
81130870:	dfc00e15 	stw	ra,56(sp)
81130874:	df000d15 	stw	fp,52(sp)
81130878:	df000d04 	addi	fp,sp,52
8113087c:	2007883a 	mov	r3,r4
81130880:	2805883a 	mov	r2,r5
81130884:	e0fffe05 	stb	r3,-8(fp)
81130888:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
8113088c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
81130890:	e0bffe03 	ldbu	r2,-8(fp)
81130894:	10800a30 	cmpltui	r2,r2,40
81130898:	1000051e 	bne	r2,zero,811308b0 <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
8113089c:	e0bffe03 	ldbu	r2,-8(fp)
811308a0:	10803fe0 	cmpeqi	r2,r2,255
811308a4:	1000021e 	bne	r2,zero,811308b0 <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
811308a8:	00800a84 	movi	r2,42
811308ac:	00012606 	br	81130d48 <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
811308b0:	e0bfff03 	ldbu	r2,-4(fp)
811308b4:	10800a30 	cmpltui	r2,r2,40
811308b8:	1000021e 	bne	r2,zero,811308c4 <OSTaskChangePrio+0x60>
        return (OS_ERR_PRIO_INVALID);
811308bc:	00800a84 	movi	r2,42
811308c0:	00012106 	br	81130d48 <OSTaskChangePrio+0x4e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811308c4:	0005303a 	rdctl	r2,status
811308c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811308cc:	e0fffd17 	ldw	r3,-12(fp)
811308d0:	00bfff84 	movi	r2,-2
811308d4:	1884703a 	and	r2,r3,r2
811308d8:	1001703a 	wrctl	status,r2
  
  return context;
811308dc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811308e0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
811308e4:	e0ffff03 	ldbu	r3,-4(fp)
811308e8:	00a04574 	movhi	r2,33045
811308ec:	1081c704 	addi	r2,r2,1820
811308f0:	18c7883a 	add	r3,r3,r3
811308f4:	18c7883a 	add	r3,r3,r3
811308f8:	10c5883a 	add	r2,r2,r3
811308fc:	10800017 	ldw	r2,0(r2)
81130900:	10000626 	beq	r2,zero,8113091c <OSTaskChangePrio+0xb8>
81130904:	e0bff517 	ldw	r2,-44(fp)
81130908:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113090c:	e0bff617 	ldw	r2,-40(fp)
81130910:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
81130914:	00800a04 	movi	r2,40
81130918:	00010b06 	br	81130d48 <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
8113091c:	e0bffe03 	ldbu	r2,-8(fp)
81130920:	10803fd8 	cmpnei	r2,r2,255
81130924:	1000031e 	bne	r2,zero,81130934 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
81130928:	d0a08b17 	ldw	r2,-32212(gp)
8113092c:	10800c83 	ldbu	r2,50(r2)
81130930:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
81130934:	e0fffe03 	ldbu	r3,-8(fp)
81130938:	00a04574 	movhi	r2,33045
8113093c:	1081c704 	addi	r2,r2,1820
81130940:	18c7883a 	add	r3,r3,r3
81130944:	18c7883a 	add	r3,r3,r3
81130948:	10c5883a 	add	r2,r2,r3
8113094c:	10800017 	ldw	r2,0(r2)
81130950:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
81130954:	e0bff817 	ldw	r2,-32(fp)
81130958:	1000061e 	bne	r2,zero,81130974 <OSTaskChangePrio+0x110>
8113095c:	e0bff517 	ldw	r2,-44(fp)
81130960:	e0bff715 	stw	r2,-36(fp)
81130964:	e0bff717 	ldw	r2,-36(fp)
81130968:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
8113096c:	00800a44 	movi	r2,41
81130970:	0000f506 	br	81130d48 <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
81130974:	e0bff817 	ldw	r2,-32(fp)
81130978:	10800058 	cmpnei	r2,r2,1
8113097c:	1000061e 	bne	r2,zero,81130998 <OSTaskChangePrio+0x134>
81130980:	e0bff517 	ldw	r2,-44(fp)
81130984:	e0bff915 	stw	r2,-28(fp)
81130988:	e0bff917 	ldw	r2,-28(fp)
8113098c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
81130990:	008010c4 	movi	r2,67
81130994:	0000ec06 	br	81130d48 <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
81130998:	e0bfff03 	ldbu	r2,-4(fp)
8113099c:	1004d0fa 	srli	r2,r2,3
811309a0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
811309a4:	e0bfff03 	ldbu	r2,-4(fp)
811309a8:	108001cc 	andi	r2,r2,7
811309ac:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
811309b0:	e0bffb03 	ldbu	r2,-20(fp)
811309b4:	00c00044 	movi	r3,1
811309b8:	1884983a 	sll	r2,r3,r2
811309bc:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
811309c0:	e0bffb43 	ldbu	r2,-19(fp)
811309c4:	00c00044 	movi	r3,1
811309c8:	1884983a 	sll	r2,r3,r2
811309cc:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
811309d0:	e0fffe03 	ldbu	r3,-8(fp)
811309d4:	00a04574 	movhi	r2,33045
811309d8:	1081c704 	addi	r2,r2,1820
811309dc:	18c7883a 	add	r3,r3,r3
811309e0:	18c7883a 	add	r3,r3,r3
811309e4:	10c5883a 	add	r2,r2,r3
811309e8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
811309ec:	e0ffff03 	ldbu	r3,-4(fp)
811309f0:	00a04574 	movhi	r2,33045
811309f4:	1081c704 	addi	r2,r2,1820
811309f8:	18c7883a 	add	r3,r3,r3
811309fc:	18c7883a 	add	r3,r3,r3
81130a00:	10c5883a 	add	r2,r2,r3
81130a04:	e0fff817 	ldw	r3,-32(fp)
81130a08:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
81130a0c:	e0bff817 	ldw	r2,-32(fp)
81130a10:	10800d03 	ldbu	r2,52(r2)
81130a14:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
81130a18:	e0bff817 	ldw	r2,-32(fp)
81130a1c:	10800d83 	ldbu	r2,54(r2)
81130a20:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
81130a24:	e0bff817 	ldw	r2,-32(fp)
81130a28:	10800d43 	ldbu	r2,53(r2)
81130a2c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
81130a30:	e0fffc03 	ldbu	r3,-16(fp)
81130a34:	d0a08744 	addi	r2,gp,-32227
81130a38:	1885883a 	add	r2,r3,r2
81130a3c:	10c00003 	ldbu	r3,0(r2)
81130a40:	e0bffc83 	ldbu	r2,-14(fp)
81130a44:	1884703a 	and	r2,r3,r2
81130a48:	10803fcc 	andi	r2,r2,255
81130a4c:	10002826 	beq	r2,zero,81130af0 <OSTaskChangePrio+0x28c>
         OSRdyTbl[y_old] &= ~bitx_old;
81130a50:	e0fffc03 	ldbu	r3,-16(fp)
81130a54:	e13ffc03 	ldbu	r4,-16(fp)
81130a58:	d0a08744 	addi	r2,gp,-32227
81130a5c:	2085883a 	add	r2,r4,r2
81130a60:	10800003 	ldbu	r2,0(r2)
81130a64:	1009883a 	mov	r4,r2
81130a68:	e0bffc83 	ldbu	r2,-14(fp)
81130a6c:	0084303a 	nor	r2,zero,r2
81130a70:	2084703a 	and	r2,r4,r2
81130a74:	1009883a 	mov	r4,r2
81130a78:	d0a08744 	addi	r2,gp,-32227
81130a7c:	1885883a 	add	r2,r3,r2
81130a80:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
81130a84:	e0fffc03 	ldbu	r3,-16(fp)
81130a88:	d0a08744 	addi	r2,gp,-32227
81130a8c:	1885883a 	add	r2,r3,r2
81130a90:	10800003 	ldbu	r2,0(r2)
81130a94:	10803fcc 	andi	r2,r2,255
81130a98:	1000061e 	bne	r2,zero,81130ab4 <OSTaskChangePrio+0x250>
             OSRdyGrp &= ~bity_old;
81130a9c:	e0bffc43 	ldbu	r2,-15(fp)
81130aa0:	0084303a 	nor	r2,zero,r2
81130aa4:	1007883a 	mov	r3,r2
81130aa8:	d0a08703 	ldbu	r2,-32228(gp)
81130aac:	1884703a 	and	r2,r3,r2
81130ab0:	d0a08705 	stb	r2,-32228(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
81130ab4:	d0e08703 	ldbu	r3,-32228(gp)
81130ab8:	e0bffb83 	ldbu	r2,-18(fp)
81130abc:	1884b03a 	or	r2,r3,r2
81130ac0:	d0a08705 	stb	r2,-32228(gp)
         OSRdyTbl[y_new] |= bitx_new;
81130ac4:	e0fffb03 	ldbu	r3,-20(fp)
81130ac8:	e13ffb03 	ldbu	r4,-20(fp)
81130acc:	d0a08744 	addi	r2,gp,-32227
81130ad0:	2085883a 	add	r2,r4,r2
81130ad4:	11000003 	ldbu	r4,0(r2)
81130ad8:	e0bffbc3 	ldbu	r2,-17(fp)
81130adc:	2084b03a 	or	r2,r4,r2
81130ae0:	1009883a 	mov	r4,r2
81130ae4:	d0a08744 	addi	r2,gp,-32227
81130ae8:	1885883a 	add	r2,r3,r2
81130aec:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
81130af0:	e0bff817 	ldw	r2,-32(fp)
81130af4:	10800717 	ldw	r2,28(r2)
81130af8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
81130afc:	e0bff317 	ldw	r2,-52(fp)
81130b00:	10003326 	beq	r2,zero,81130bd0 <OSTaskChangePrio+0x36c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
81130b04:	e0bffc03 	ldbu	r2,-16(fp)
81130b08:	e0fffc03 	ldbu	r3,-16(fp)
81130b0c:	e13ff317 	ldw	r4,-52(fp)
81130b10:	20c7883a 	add	r3,r4,r3
81130b14:	18c002c4 	addi	r3,r3,11
81130b18:	18c00003 	ldbu	r3,0(r3)
81130b1c:	1809883a 	mov	r4,r3
81130b20:	e0fffc83 	ldbu	r3,-14(fp)
81130b24:	00c6303a 	nor	r3,zero,r3
81130b28:	20c6703a 	and	r3,r4,r3
81130b2c:	1809883a 	mov	r4,r3
81130b30:	e0fff317 	ldw	r3,-52(fp)
81130b34:	1885883a 	add	r2,r3,r2
81130b38:	108002c4 	addi	r2,r2,11
81130b3c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
81130b40:	e0bffc03 	ldbu	r2,-16(fp)
81130b44:	e0fff317 	ldw	r3,-52(fp)
81130b48:	1885883a 	add	r2,r3,r2
81130b4c:	108002c4 	addi	r2,r2,11
81130b50:	10800003 	ldbu	r2,0(r2)
81130b54:	10803fcc 	andi	r2,r2,255
81130b58:	1000091e 	bne	r2,zero,81130b80 <OSTaskChangePrio+0x31c>
            pevent->OSEventGrp    &= ~bity_old;
81130b5c:	e0bff317 	ldw	r2,-52(fp)
81130b60:	10800283 	ldbu	r2,10(r2)
81130b64:	1007883a 	mov	r3,r2
81130b68:	e0bffc43 	ldbu	r2,-15(fp)
81130b6c:	0084303a 	nor	r2,zero,r2
81130b70:	1884703a 	and	r2,r3,r2
81130b74:	1007883a 	mov	r3,r2
81130b78:	e0bff317 	ldw	r2,-52(fp)
81130b7c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
81130b80:	e0bff317 	ldw	r2,-52(fp)
81130b84:	10c00283 	ldbu	r3,10(r2)
81130b88:	e0bffb83 	ldbu	r2,-18(fp)
81130b8c:	1884b03a 	or	r2,r3,r2
81130b90:	1007883a 	mov	r3,r2
81130b94:	e0bff317 	ldw	r2,-52(fp)
81130b98:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
81130b9c:	e0bffb03 	ldbu	r2,-20(fp)
81130ba0:	e0fffb03 	ldbu	r3,-20(fp)
81130ba4:	e13ff317 	ldw	r4,-52(fp)
81130ba8:	20c7883a 	add	r3,r4,r3
81130bac:	18c002c4 	addi	r3,r3,11
81130bb0:	19000003 	ldbu	r4,0(r3)
81130bb4:	e0fffbc3 	ldbu	r3,-17(fp)
81130bb8:	20c6b03a 	or	r3,r4,r3
81130bbc:	1809883a 	mov	r4,r3
81130bc0:	e0fff317 	ldw	r3,-52(fp)
81130bc4:	1885883a 	add	r2,r3,r2
81130bc8:	108002c4 	addi	r2,r2,11
81130bcc:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
81130bd0:	e0bff817 	ldw	r2,-32(fp)
81130bd4:	10800817 	ldw	r2,32(r2)
81130bd8:	10004226 	beq	r2,zero,81130ce4 <OSTaskChangePrio+0x480>
        pevents =  ptcb->OSTCBEventMultiPtr;
81130bdc:	e0bff817 	ldw	r2,-32(fp)
81130be0:	10800817 	ldw	r2,32(r2)
81130be4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
81130be8:	e0bff417 	ldw	r2,-48(fp)
81130bec:	10800017 	ldw	r2,0(r2)
81130bf0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
81130bf4:	00003906 	br	81130cdc <OSTaskChangePrio+0x478>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
81130bf8:	e0bffc03 	ldbu	r2,-16(fp)
81130bfc:	e0fffc03 	ldbu	r3,-16(fp)
81130c00:	e13ff317 	ldw	r4,-52(fp)
81130c04:	20c7883a 	add	r3,r4,r3
81130c08:	18c002c4 	addi	r3,r3,11
81130c0c:	18c00003 	ldbu	r3,0(r3)
81130c10:	1809883a 	mov	r4,r3
81130c14:	e0fffc83 	ldbu	r3,-14(fp)
81130c18:	00c6303a 	nor	r3,zero,r3
81130c1c:	20c6703a 	and	r3,r4,r3
81130c20:	1809883a 	mov	r4,r3
81130c24:	e0fff317 	ldw	r3,-52(fp)
81130c28:	1885883a 	add	r2,r3,r2
81130c2c:	108002c4 	addi	r2,r2,11
81130c30:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
81130c34:	e0bffc03 	ldbu	r2,-16(fp)
81130c38:	e0fff317 	ldw	r3,-52(fp)
81130c3c:	1885883a 	add	r2,r3,r2
81130c40:	108002c4 	addi	r2,r2,11
81130c44:	10800003 	ldbu	r2,0(r2)
81130c48:	10803fcc 	andi	r2,r2,255
81130c4c:	1000091e 	bne	r2,zero,81130c74 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= ~bity_old;
81130c50:	e0bff317 	ldw	r2,-52(fp)
81130c54:	10800283 	ldbu	r2,10(r2)
81130c58:	1007883a 	mov	r3,r2
81130c5c:	e0bffc43 	ldbu	r2,-15(fp)
81130c60:	0084303a 	nor	r2,zero,r2
81130c64:	1884703a 	and	r2,r3,r2
81130c68:	1007883a 	mov	r3,r2
81130c6c:	e0bff317 	ldw	r2,-52(fp)
81130c70:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
81130c74:	e0bff317 	ldw	r2,-52(fp)
81130c78:	10c00283 	ldbu	r3,10(r2)
81130c7c:	e0bffb83 	ldbu	r2,-18(fp)
81130c80:	1884b03a 	or	r2,r3,r2
81130c84:	1007883a 	mov	r3,r2
81130c88:	e0bff317 	ldw	r2,-52(fp)
81130c8c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
81130c90:	e0bffb03 	ldbu	r2,-20(fp)
81130c94:	e0fffb03 	ldbu	r3,-20(fp)
81130c98:	e13ff317 	ldw	r4,-52(fp)
81130c9c:	20c7883a 	add	r3,r4,r3
81130ca0:	18c002c4 	addi	r3,r3,11
81130ca4:	19000003 	ldbu	r4,0(r3)
81130ca8:	e0fffbc3 	ldbu	r3,-17(fp)
81130cac:	20c6b03a 	or	r3,r4,r3
81130cb0:	1809883a 	mov	r4,r3
81130cb4:	e0fff317 	ldw	r3,-52(fp)
81130cb8:	1885883a 	add	r2,r3,r2
81130cbc:	108002c4 	addi	r2,r2,11
81130cc0:	11000005 	stb	r4,0(r2)
            pevents++;
81130cc4:	e0bff417 	ldw	r2,-48(fp)
81130cc8:	10800104 	addi	r2,r2,4
81130ccc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
81130cd0:	e0bff417 	ldw	r2,-48(fp)
81130cd4:	10800017 	ldw	r2,0(r2)
81130cd8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
81130cdc:	e0bff317 	ldw	r2,-52(fp)
81130ce0:	103fc51e 	bne	r2,zero,81130bf8 <__reset+0xfb110bf8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
81130ce4:	e0bff817 	ldw	r2,-32(fp)
81130ce8:	e0ffff03 	ldbu	r3,-4(fp)
81130cec:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
81130cf0:	e0bff817 	ldw	r2,-32(fp)
81130cf4:	e0fffb03 	ldbu	r3,-20(fp)
81130cf8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
81130cfc:	e0bff817 	ldw	r2,-32(fp)
81130d00:	e0fffb43 	ldbu	r3,-19(fp)
81130d04:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
81130d08:	e0bff817 	ldw	r2,-32(fp)
81130d0c:	e0fffb83 	ldbu	r3,-18(fp)
81130d10:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
81130d14:	e0bff817 	ldw	r2,-32(fp)
81130d18:	e0fffbc3 	ldbu	r3,-17(fp)
81130d1c:	10c00d45 	stb	r3,53(r2)
81130d20:	e0bff517 	ldw	r2,-44(fp)
81130d24:	e0bffa15 	stw	r2,-24(fp)
81130d28:	e0bffa17 	ldw	r2,-24(fp)
81130d2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
81130d30:	d0a07a03 	ldbu	r2,-32280(gp)
81130d34:	10803fcc 	andi	r2,r2,255
81130d38:	10800058 	cmpnei	r2,r2,1
81130d3c:	1000011e 	bne	r2,zero,81130d44 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
81130d40:	112b2f40 	call	8112b2f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
81130d44:	0005883a 	mov	r2,zero
}
81130d48:	e037883a 	mov	sp,fp
81130d4c:	dfc00117 	ldw	ra,4(sp)
81130d50:	df000017 	ldw	fp,0(sp)
81130d54:	dec00204 	addi	sp,sp,8
81130d58:	f800283a 	ret

81130d5c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
81130d5c:	deffee04 	addi	sp,sp,-72
81130d60:	de00012e 	bgeu	sp,et,81130d68 <OSTaskCreate+0xc>
81130d64:	003b68fa 	trap	3
81130d68:	dfc01115 	stw	ra,68(sp)
81130d6c:	df001015 	stw	fp,64(sp)
81130d70:	df001004 	addi	fp,sp,64
81130d74:	e13ffc15 	stw	r4,-16(fp)
81130d78:	e17ffd15 	stw	r5,-12(fp)
81130d7c:	e1bffe15 	stw	r6,-8(fp)
81130d80:	3805883a 	mov	r2,r7
81130d84:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
81130d88:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
81130d8c:	e0bfff03 	ldbu	r2,-4(fp)
81130d90:	10800a70 	cmpltui	r2,r2,41
81130d94:	1000021e 	bne	r2,zero,81130da0 <OSTaskCreate+0x44>
        return (OS_ERR_PRIO_INVALID);
81130d98:	00800a84 	movi	r2,42
81130d9c:	00005706 	br	81130efc <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130da0:	0005303a 	rdctl	r2,status
81130da4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130da8:	e0fffb17 	ldw	r3,-20(fp)
81130dac:	00bfff84 	movi	r2,-2
81130db0:	1884703a 	and	r2,r3,r2
81130db4:	1001703a 	wrctl	status,r2
  
  return context;
81130db8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81130dbc:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81130dc0:	d0a08a03 	ldbu	r2,-32216(gp)
81130dc4:	10803fcc 	andi	r2,r2,255
81130dc8:	10000626 	beq	r2,zero,81130de4 <OSTaskCreate+0x88>
81130dcc:	e0bff317 	ldw	r2,-52(fp)
81130dd0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130dd4:	e0bff417 	ldw	r2,-48(fp)
81130dd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
81130ddc:	00800f04 	movi	r2,60
81130de0:	00004606 	br	81130efc <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
81130de4:	e0ffff03 	ldbu	r3,-4(fp)
81130de8:	00a04574 	movhi	r2,33045
81130dec:	1081c704 	addi	r2,r2,1820
81130df0:	18c7883a 	add	r3,r3,r3
81130df4:	18c7883a 	add	r3,r3,r3
81130df8:	10c5883a 	add	r2,r2,r3
81130dfc:	10800017 	ldw	r2,0(r2)
81130e00:	1000391e 	bne	r2,zero,81130ee8 <OSTaskCreate+0x18c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
81130e04:	e0ffff03 	ldbu	r3,-4(fp)
81130e08:	00a04574 	movhi	r2,33045
81130e0c:	1081c704 	addi	r2,r2,1820
81130e10:	18c7883a 	add	r3,r3,r3
81130e14:	18c7883a 	add	r3,r3,r3
81130e18:	10c5883a 	add	r2,r2,r3
81130e1c:	00c00044 	movi	r3,1
81130e20:	10c00015 	stw	r3,0(r2)
81130e24:	e0bff317 	ldw	r2,-52(fp)
81130e28:	e0bff515 	stw	r2,-44(fp)
81130e2c:	e0bff517 	ldw	r2,-44(fp)
81130e30:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
81130e34:	000f883a 	mov	r7,zero
81130e38:	e1bffe17 	ldw	r6,-8(fp)
81130e3c:	e17ffd17 	ldw	r5,-12(fp)
81130e40:	e13ffc17 	ldw	r4,-16(fp)
81130e44:	113c4d40 	call	8113c4d4 <OSTaskStkInit>
81130e48:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
81130e4c:	e0bfff03 	ldbu	r2,-4(fp)
81130e50:	d8000215 	stw	zero,8(sp)
81130e54:	d8000115 	stw	zero,4(sp)
81130e58:	d8000015 	stw	zero,0(sp)
81130e5c:	000f883a 	mov	r7,zero
81130e60:	000d883a 	mov	r6,zero
81130e64:	e17ff717 	ldw	r5,-36(fp)
81130e68:	1009883a 	mov	r4,r2
81130e6c:	112b73c0 	call	8112b73c <OS_TCBInit>
81130e70:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
81130e74:	e0bff803 	ldbu	r2,-32(fp)
81130e78:	1000061e 	bne	r2,zero,81130e94 <OSTaskCreate+0x138>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
81130e7c:	d0a07a03 	ldbu	r2,-32280(gp)
81130e80:	10803fcc 	andi	r2,r2,255
81130e84:	10800058 	cmpnei	r2,r2,1
81130e88:	1000151e 	bne	r2,zero,81130ee0 <OSTaskCreate+0x184>
                OS_Sched();
81130e8c:	112b2f40 	call	8112b2f4 <OS_Sched>
81130e90:	00001306 	br	81130ee0 <OSTaskCreate+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130e94:	0005303a 	rdctl	r2,status
81130e98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130e9c:	e0fffa17 	ldw	r3,-24(fp)
81130ea0:	00bfff84 	movi	r2,-2
81130ea4:	1884703a 	and	r2,r3,r2
81130ea8:	1001703a 	wrctl	status,r2
  
  return context;
81130eac:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81130eb0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
81130eb4:	e0ffff03 	ldbu	r3,-4(fp)
81130eb8:	00a04574 	movhi	r2,33045
81130ebc:	1081c704 	addi	r2,r2,1820
81130ec0:	18c7883a 	add	r3,r3,r3
81130ec4:	18c7883a 	add	r3,r3,r3
81130ec8:	10c5883a 	add	r2,r2,r3
81130ecc:	10000015 	stw	zero,0(r2)
81130ed0:	e0bff317 	ldw	r2,-52(fp)
81130ed4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130ed8:	e0bff617 	ldw	r2,-40(fp)
81130edc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
81130ee0:	e0bff803 	ldbu	r2,-32(fp)
81130ee4:	00000506 	br	81130efc <OSTaskCreate+0x1a0>
81130ee8:	e0bff317 	ldw	r2,-52(fp)
81130eec:	e0bff915 	stw	r2,-28(fp)
81130ef0:	e0bff917 	ldw	r2,-28(fp)
81130ef4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
81130ef8:	00800a04 	movi	r2,40
}
81130efc:	e037883a 	mov	sp,fp
81130f00:	dfc00117 	ldw	ra,4(sp)
81130f04:	df000017 	ldw	fp,0(sp)
81130f08:	dec00204 	addi	sp,sp,8
81130f0c:	f800283a 	ret

81130f10 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
81130f10:	deffec04 	addi	sp,sp,-80
81130f14:	de00012e 	bgeu	sp,et,81130f1c <OSTaskCreateExt+0xc>
81130f18:	003b68fa 	trap	3
81130f1c:	dfc01315 	stw	ra,76(sp)
81130f20:	df001215 	stw	fp,72(sp)
81130f24:	df001204 	addi	fp,sp,72
81130f28:	e13ffa15 	stw	r4,-24(fp)
81130f2c:	e17ffb15 	stw	r5,-20(fp)
81130f30:	e1bffc15 	stw	r6,-16(fp)
81130f34:	3809883a 	mov	r4,r7
81130f38:	e0c00217 	ldw	r3,8(fp)
81130f3c:	e0800617 	ldw	r2,24(fp)
81130f40:	e13ffd05 	stb	r4,-12(fp)
81130f44:	e0fffe0d 	sth	r3,-8(fp)
81130f48:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
81130f4c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
81130f50:	e0bffd03 	ldbu	r2,-12(fp)
81130f54:	10800a70 	cmpltui	r2,r2,41
81130f58:	1000021e 	bne	r2,zero,81130f64 <OSTaskCreateExt+0x54>
        return (OS_ERR_PRIO_INVALID);
81130f5c:	00800a84 	movi	r2,42
81130f60:	00006106 	br	811310e8 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130f64:	0005303a 	rdctl	r2,status
81130f68:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130f6c:	e0fff917 	ldw	r3,-28(fp)
81130f70:	00bfff84 	movi	r2,-2
81130f74:	1884703a 	and	r2,r3,r2
81130f78:	1001703a 	wrctl	status,r2
  
  return context;
81130f7c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81130f80:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81130f84:	d0a08a03 	ldbu	r2,-32216(gp)
81130f88:	10803fcc 	andi	r2,r2,255
81130f8c:	10000626 	beq	r2,zero,81130fa8 <OSTaskCreateExt+0x98>
81130f90:	e0bff117 	ldw	r2,-60(fp)
81130f94:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130f98:	e0bff217 	ldw	r2,-56(fp)
81130f9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
81130fa0:	00800f04 	movi	r2,60
81130fa4:	00005006 	br	811310e8 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
81130fa8:	e0fffd03 	ldbu	r3,-12(fp)
81130fac:	00a04574 	movhi	r2,33045
81130fb0:	1081c704 	addi	r2,r2,1820
81130fb4:	18c7883a 	add	r3,r3,r3
81130fb8:	18c7883a 	add	r3,r3,r3
81130fbc:	10c5883a 	add	r2,r2,r3
81130fc0:	10800017 	ldw	r2,0(r2)
81130fc4:	1000431e 	bne	r2,zero,811310d4 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
81130fc8:	e0fffd03 	ldbu	r3,-12(fp)
81130fcc:	00a04574 	movhi	r2,33045
81130fd0:	1081c704 	addi	r2,r2,1820
81130fd4:	18c7883a 	add	r3,r3,r3
81130fd8:	18c7883a 	add	r3,r3,r3
81130fdc:	10c5883a 	add	r2,r2,r3
81130fe0:	00c00044 	movi	r3,1
81130fe4:	10c00015 	stw	r3,0(r2)
81130fe8:	e0bff117 	ldw	r2,-60(fp)
81130fec:	e0bff315 	stw	r2,-52(fp)
81130ff0:	e0bff317 	ldw	r2,-52(fp)
81130ff4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
81130ff8:	e0bfff0b 	ldhu	r2,-4(fp)
81130ffc:	100d883a 	mov	r6,r2
81131000:	e1400417 	ldw	r5,16(fp)
81131004:	e1000317 	ldw	r4,12(fp)
81131008:	1131fb80 	call	81131fb8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
8113100c:	e0bfff0b 	ldhu	r2,-4(fp)
81131010:	100f883a 	mov	r7,r2
81131014:	e1bffc17 	ldw	r6,-16(fp)
81131018:	e17ffb17 	ldw	r5,-20(fp)
8113101c:	e13ffa17 	ldw	r4,-24(fp)
81131020:	113c4d40 	call	8113c4d4 <OSTaskStkInit>
81131024:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
81131028:	e0fffd03 	ldbu	r3,-12(fp)
8113102c:	e13ffe0b 	ldhu	r4,-8(fp)
81131030:	e0bfff0b 	ldhu	r2,-4(fp)
81131034:	d8800215 	stw	r2,8(sp)
81131038:	e0800517 	ldw	r2,20(fp)
8113103c:	d8800115 	stw	r2,4(sp)
81131040:	e0800417 	ldw	r2,16(fp)
81131044:	d8800015 	stw	r2,0(sp)
81131048:	200f883a 	mov	r7,r4
8113104c:	e1800317 	ldw	r6,12(fp)
81131050:	e17ff517 	ldw	r5,-44(fp)
81131054:	1809883a 	mov	r4,r3
81131058:	112b73c0 	call	8112b73c <OS_TCBInit>
8113105c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
81131060:	e0bff603 	ldbu	r2,-40(fp)
81131064:	1000061e 	bne	r2,zero,81131080 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
81131068:	d0a07a03 	ldbu	r2,-32280(gp)
8113106c:	10803fcc 	andi	r2,r2,255
81131070:	10800058 	cmpnei	r2,r2,1
81131074:	1000151e 	bne	r2,zero,811310cc <OSTaskCreateExt+0x1bc>
                OS_Sched();
81131078:	112b2f40 	call	8112b2f4 <OS_Sched>
8113107c:	00001306 	br	811310cc <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131080:	0005303a 	rdctl	r2,status
81131084:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131088:	e0fff817 	ldw	r3,-32(fp)
8113108c:	00bfff84 	movi	r2,-2
81131090:	1884703a 	and	r2,r3,r2
81131094:	1001703a 	wrctl	status,r2
  
  return context;
81131098:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8113109c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
811310a0:	e0fffd03 	ldbu	r3,-12(fp)
811310a4:	00a04574 	movhi	r2,33045
811310a8:	1081c704 	addi	r2,r2,1820
811310ac:	18c7883a 	add	r3,r3,r3
811310b0:	18c7883a 	add	r3,r3,r3
811310b4:	10c5883a 	add	r2,r2,r3
811310b8:	10000015 	stw	zero,0(r2)
811310bc:	e0bff117 	ldw	r2,-60(fp)
811310c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811310c4:	e0bff417 	ldw	r2,-48(fp)
811310c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
811310cc:	e0bff603 	ldbu	r2,-40(fp)
811310d0:	00000506 	br	811310e8 <OSTaskCreateExt+0x1d8>
811310d4:	e0bff117 	ldw	r2,-60(fp)
811310d8:	e0bff715 	stw	r2,-36(fp)
811310dc:	e0bff717 	ldw	r2,-36(fp)
811310e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
811310e4:	00800a04 	movi	r2,40
}
811310e8:	e037883a 	mov	sp,fp
811310ec:	dfc00117 	ldw	ra,4(sp)
811310f0:	df000017 	ldw	fp,0(sp)
811310f4:	dec00204 	addi	sp,sp,8
811310f8:	f800283a 	ret

811310fc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
811310fc:	defff404 	addi	sp,sp,-48
81131100:	de00012e 	bgeu	sp,et,81131108 <OSTaskDel+0xc>
81131104:	003b68fa 	trap	3
81131108:	dfc00b15 	stw	ra,44(sp)
8113110c:	df000a15 	stw	fp,40(sp)
81131110:	df000a04 	addi	fp,sp,40
81131114:	2005883a 	mov	r2,r4
81131118:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
8113111c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
81131120:	d0a08a03 	ldbu	r2,-32216(gp)
81131124:	10803fcc 	andi	r2,r2,255
81131128:	10000226 	beq	r2,zero,81131134 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
8113112c:	00801004 	movi	r2,64
81131130:	0000c006 	br	81131434 <OSTaskDel+0x338>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
81131134:	e0bfff03 	ldbu	r2,-4(fp)
81131138:	10800a18 	cmpnei	r2,r2,40
8113113c:	1000021e 	bne	r2,zero,81131148 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
81131140:	00800f84 	movi	r2,62
81131144:	0000bb06 	br	81131434 <OSTaskDel+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
81131148:	e0bfff03 	ldbu	r2,-4(fp)
8113114c:	10800a30 	cmpltui	r2,r2,40
81131150:	1000051e 	bne	r2,zero,81131168 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
81131154:	e0bfff03 	ldbu	r2,-4(fp)
81131158:	10803fe0 	cmpeqi	r2,r2,255
8113115c:	1000021e 	bne	r2,zero,81131168 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
81131160:	00800a84 	movi	r2,42
81131164:	0000b306 	br	81131434 <OSTaskDel+0x338>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131168:	0005303a 	rdctl	r2,status
8113116c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131170:	e0fffe17 	ldw	r3,-8(fp)
81131174:	00bfff84 	movi	r2,-2
81131178:	1884703a 	and	r2,r3,r2
8113117c:	1001703a 	wrctl	status,r2
  
  return context;
81131180:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
81131184:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
81131188:	e0bfff03 	ldbu	r2,-4(fp)
8113118c:	10803fd8 	cmpnei	r2,r2,255
81131190:	1000031e 	bne	r2,zero,811311a0 <OSTaskDel+0xa4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
81131194:	d0a08b17 	ldw	r2,-32212(gp)
81131198:	10800c83 	ldbu	r2,50(r2)
8113119c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811311a0:	e0ffff03 	ldbu	r3,-4(fp)
811311a4:	00a04574 	movhi	r2,33045
811311a8:	1081c704 	addi	r2,r2,1820
811311ac:	18c7883a 	add	r3,r3,r3
811311b0:	18c7883a 	add	r3,r3,r3
811311b4:	10c5883a 	add	r2,r2,r3
811311b8:	10800017 	ldw	r2,0(r2)
811311bc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
811311c0:	e0bff817 	ldw	r2,-32(fp)
811311c4:	1000061e 	bne	r2,zero,811311e0 <OSTaskDel+0xe4>
811311c8:	e0bff617 	ldw	r2,-40(fp)
811311cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811311d0:	e0bff717 	ldw	r2,-36(fp)
811311d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811311d8:	008010c4 	movi	r2,67
811311dc:	00009506 	br	81131434 <OSTaskDel+0x338>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
811311e0:	e0bff817 	ldw	r2,-32(fp)
811311e4:	10800058 	cmpnei	r2,r2,1
811311e8:	1000061e 	bne	r2,zero,81131204 <OSTaskDel+0x108>
811311ec:	e0bff617 	ldw	r2,-40(fp)
811311f0:	e0bff915 	stw	r2,-28(fp)
811311f4:	e0bff917 	ldw	r2,-28(fp)
811311f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
811311fc:	00800f44 	movi	r2,61
81131200:	00008c06 	br	81131434 <OSTaskDel+0x338>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
81131204:	e0bff817 	ldw	r2,-32(fp)
81131208:	10800d03 	ldbu	r2,52(r2)
8113120c:	10c03fcc 	andi	r3,r2,255
81131210:	e0bff817 	ldw	r2,-32(fp)
81131214:	10800d03 	ldbu	r2,52(r2)
81131218:	11003fcc 	andi	r4,r2,255
8113121c:	d0a08744 	addi	r2,gp,-32227
81131220:	2085883a 	add	r2,r4,r2
81131224:	10800003 	ldbu	r2,0(r2)
81131228:	1009883a 	mov	r4,r2
8113122c:	e0bff817 	ldw	r2,-32(fp)
81131230:	10800d43 	ldbu	r2,53(r2)
81131234:	0084303a 	nor	r2,zero,r2
81131238:	2084703a 	and	r2,r4,r2
8113123c:	1009883a 	mov	r4,r2
81131240:	d0a08744 	addi	r2,gp,-32227
81131244:	1885883a 	add	r2,r3,r2
81131248:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
8113124c:	e0bff817 	ldw	r2,-32(fp)
81131250:	10800d03 	ldbu	r2,52(r2)
81131254:	10c03fcc 	andi	r3,r2,255
81131258:	d0a08744 	addi	r2,gp,-32227
8113125c:	1885883a 	add	r2,r3,r2
81131260:	10800003 	ldbu	r2,0(r2)
81131264:	10803fcc 	andi	r2,r2,255
81131268:	1000071e 	bne	r2,zero,81131288 <OSTaskDel+0x18c>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
8113126c:	e0bff817 	ldw	r2,-32(fp)
81131270:	10800d83 	ldbu	r2,54(r2)
81131274:	0084303a 	nor	r2,zero,r2
81131278:	1007883a 	mov	r3,r2
8113127c:	d0a08703 	ldbu	r2,-32228(gp)
81131280:	1884703a 	and	r2,r3,r2
81131284:	d0a08705 	stb	r2,-32228(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
81131288:	e0bff817 	ldw	r2,-32(fp)
8113128c:	10800717 	ldw	r2,28(r2)
81131290:	10000526 	beq	r2,zero,811312a8 <OSTaskDel+0x1ac>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
81131294:	e0bff817 	ldw	r2,-32(fp)
81131298:	10800717 	ldw	r2,28(r2)
8113129c:	100b883a 	mov	r5,r2
811312a0:	e13ff817 	ldw	r4,-32(fp)
811312a4:	112ac480 	call	8112ac48 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
811312a8:	e0bff817 	ldw	r2,-32(fp)
811312ac:	10800817 	ldw	r2,32(r2)
811312b0:	10000526 	beq	r2,zero,811312c8 <OSTaskDel+0x1cc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
811312b4:	e0bff817 	ldw	r2,-32(fp)
811312b8:	10800817 	ldw	r2,32(r2)
811312bc:	100b883a 	mov	r5,r2
811312c0:	e13ff817 	ldw	r4,-32(fp)
811312c4:	112ad080 	call	8112ad08 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
811312c8:	e0bff817 	ldw	r2,-32(fp)
811312cc:	10800a17 	ldw	r2,40(r2)
811312d0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
811312d4:	e0bffb17 	ldw	r2,-20(fp)
811312d8:	10000226 	beq	r2,zero,811312e4 <OSTaskDel+0x1e8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
811312dc:	e13ffb17 	ldw	r4,-20(fp)
811312e0:	112d2e00 	call	8112d2e0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
811312e4:	e0bff817 	ldw	r2,-32(fp)
811312e8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
811312ec:	e0bff817 	ldw	r2,-32(fp)
811312f0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
811312f4:	e0bff817 	ldw	r2,-32(fp)
811312f8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
811312fc:	d0a07803 	ldbu	r2,-32288(gp)
81131300:	10803fcc 	andi	r2,r2,255
81131304:	10803fe0 	cmpeqi	r2,r2,255
81131308:	1000031e 	bne	r2,zero,81131318 <OSTaskDel+0x21c>
        OSLockNesting++;
8113130c:	d0a07803 	ldbu	r2,-32288(gp)
81131310:	10800044 	addi	r2,r2,1
81131314:	d0a07805 	stb	r2,-32288(gp)
81131318:	e0bff617 	ldw	r2,-40(fp)
8113131c:	e0bffd15 	stw	r2,-12(fp)
81131320:	e0bffd17 	ldw	r2,-12(fp)
81131324:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
81131328:	112a8100 	call	8112a810 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113132c:	0005303a 	rdctl	r2,status
81131330:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131334:	e0fffa17 	ldw	r3,-24(fp)
81131338:	00bfff84 	movi	r2,-2
8113133c:	1884703a 	and	r2,r3,r2
81131340:	1001703a 	wrctl	status,r2
  
  return context;
81131344:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
81131348:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
8113134c:	d0a07803 	ldbu	r2,-32288(gp)
81131350:	10803fcc 	andi	r2,r2,255
81131354:	10000326 	beq	r2,zero,81131364 <OSTaskDel+0x268>
        OSLockNesting--;
81131358:	d0a07803 	ldbu	r2,-32288(gp)
8113135c:	10bfffc4 	addi	r2,r2,-1
81131360:	d0a07805 	stb	r2,-32288(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
81131364:	e13ff817 	ldw	r4,-32(fp)
81131368:	113c6640 	call	8113c664 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
8113136c:	d0a08343 	ldbu	r2,-32243(gp)
81131370:	10bfffc4 	addi	r2,r2,-1
81131374:	d0a08345 	stb	r2,-32243(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
81131378:	e0ffff03 	ldbu	r3,-4(fp)
8113137c:	00a04574 	movhi	r2,33045
81131380:	1081c704 	addi	r2,r2,1820
81131384:	18c7883a 	add	r3,r3,r3
81131388:	18c7883a 	add	r3,r3,r3
8113138c:	10c5883a 	add	r2,r2,r3
81131390:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
81131394:	e0bff817 	ldw	r2,-32(fp)
81131398:	10800617 	ldw	r2,24(r2)
8113139c:	1000071e 	bne	r2,zero,811313bc <OSTaskDel+0x2c0>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
811313a0:	e0bff817 	ldw	r2,-32(fp)
811313a4:	10800517 	ldw	r2,20(r2)
811313a8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
811313ac:	e0bff817 	ldw	r2,-32(fp)
811313b0:	10800517 	ldw	r2,20(r2)
811313b4:	d0a07d15 	stw	r2,-32268(gp)
811313b8:	00000a06 	br	811313e4 <OSTaskDel+0x2e8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
811313bc:	e0bff817 	ldw	r2,-32(fp)
811313c0:	10800617 	ldw	r2,24(r2)
811313c4:	e0fff817 	ldw	r3,-32(fp)
811313c8:	18c00517 	ldw	r3,20(r3)
811313cc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
811313d0:	e0bff817 	ldw	r2,-32(fp)
811313d4:	10800517 	ldw	r2,20(r2)
811313d8:	e0fff817 	ldw	r3,-32(fp)
811313dc:	18c00617 	ldw	r3,24(r3)
811313e0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
811313e4:	d0e08217 	ldw	r3,-32248(gp)
811313e8:	e0bff817 	ldw	r2,-32(fp)
811313ec:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
811313f0:	e0bff817 	ldw	r2,-32(fp)
811313f4:	d0a08215 	stw	r2,-32248(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
811313f8:	e0bff817 	ldw	r2,-32(fp)
811313fc:	00c00fc4 	movi	r3,63
81131400:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
81131404:	e0bff817 	ldw	r2,-32(fp)
81131408:	10001345 	stb	zero,77(r2)
8113140c:	e0bff617 	ldw	r2,-40(fp)
81131410:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131414:	e0bffc17 	ldw	r2,-16(fp)
81131418:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8113141c:	d0a07a03 	ldbu	r2,-32280(gp)
81131420:	10803fcc 	andi	r2,r2,255
81131424:	10800058 	cmpnei	r2,r2,1
81131428:	1000011e 	bne	r2,zero,81131430 <OSTaskDel+0x334>
        OS_Sched();                                     /* Find new highest priority task              */
8113142c:	112b2f40 	call	8112b2f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
81131430:	0005883a 	mov	r2,zero
}
81131434:	e037883a 	mov	sp,fp
81131438:	dfc00117 	ldw	ra,4(sp)
8113143c:	df000017 	ldw	fp,0(sp)
81131440:	dec00204 	addi	sp,sp,8
81131444:	f800283a 	ret

81131448 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
81131448:	defff504 	addi	sp,sp,-44
8113144c:	de00012e 	bgeu	sp,et,81131454 <OSTaskDelReq+0xc>
81131450:	003b68fa 	trap	3
81131454:	df000a15 	stw	fp,40(sp)
81131458:	df000a04 	addi	fp,sp,40
8113145c:	2005883a 	mov	r2,r4
81131460:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81131464:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
81131468:	e0bfff03 	ldbu	r2,-4(fp)
8113146c:	10800a18 	cmpnei	r2,r2,40
81131470:	1000021e 	bne	r2,zero,8113147c <OSTaskDelReq+0x34>
        return (OS_ERR_TASK_DEL_IDLE);
81131474:	00800f84 	movi	r2,62
81131478:	00004506 	br	81131590 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8113147c:	e0bfff03 	ldbu	r2,-4(fp)
81131480:	10800a30 	cmpltui	r2,r2,40
81131484:	1000051e 	bne	r2,zero,8113149c <OSTaskDelReq+0x54>
        if (prio != OS_PRIO_SELF) {
81131488:	e0bfff03 	ldbu	r2,-4(fp)
8113148c:	10803fe0 	cmpeqi	r2,r2,255
81131490:	1000021e 	bne	r2,zero,8113149c <OSTaskDelReq+0x54>
            return (OS_ERR_PRIO_INVALID);
81131494:	00800a84 	movi	r2,42
81131498:	00003d06 	br	81131590 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
8113149c:	e0bfff03 	ldbu	r2,-4(fp)
811314a0:	10803fd8 	cmpnei	r2,r2,255
811314a4:	1000111e 	bne	r2,zero,811314ec <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811314a8:	0005303a 	rdctl	r2,status
811314ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811314b0:	e0fff917 	ldw	r3,-28(fp)
811314b4:	00bfff84 	movi	r2,-2
811314b8:	1884703a 	and	r2,r3,r2
811314bc:	1001703a 	wrctl	status,r2
  
  return context;
811314c0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
811314c4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
811314c8:	d0a08b17 	ldw	r2,-32212(gp)
811314cc:	10800dc3 	ldbu	r2,55(r2)
811314d0:	e0bff805 	stb	r2,-32(fp)
811314d4:	e0bff617 	ldw	r2,-40(fp)
811314d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811314dc:	e0bffe17 	ldw	r2,-8(fp)
811314e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
811314e4:	e0bff803 	ldbu	r2,-32(fp)
811314e8:	00002906 	br	81131590 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811314ec:	0005303a 	rdctl	r2,status
811314f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811314f4:	e0fff717 	ldw	r3,-36(fp)
811314f8:	00bfff84 	movi	r2,-2
811314fc:	1884703a 	and	r2,r3,r2
81131500:	1001703a 	wrctl	status,r2
  
  return context;
81131504:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
81131508:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8113150c:	e0ffff03 	ldbu	r3,-4(fp)
81131510:	00a04574 	movhi	r2,33045
81131514:	1081c704 	addi	r2,r2,1820
81131518:	18c7883a 	add	r3,r3,r3
8113151c:	18c7883a 	add	r3,r3,r3
81131520:	10c5883a 	add	r2,r2,r3
81131524:	10800017 	ldw	r2,0(r2)
81131528:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
8113152c:	e0bffb17 	ldw	r2,-20(fp)
81131530:	1000061e 	bne	r2,zero,8113154c <OSTaskDelReq+0x104>
81131534:	e0bff617 	ldw	r2,-40(fp)
81131538:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113153c:	e0bffa17 	ldw	r2,-24(fp)
81131540:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
81131544:	008010c4 	movi	r2,67
81131548:	00001106 	br	81131590 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
8113154c:	e0bffb17 	ldw	r2,-20(fp)
81131550:	10800058 	cmpnei	r2,r2,1
81131554:	1000061e 	bne	r2,zero,81131570 <OSTaskDelReq+0x128>
81131558:	e0bff617 	ldw	r2,-40(fp)
8113155c:	e0bffc15 	stw	r2,-16(fp)
81131560:	e0bffc17 	ldw	r2,-16(fp)
81131564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81131568:	00800f44 	movi	r2,61
8113156c:	00000806 	br	81131590 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
81131570:	e0bffb17 	ldw	r2,-20(fp)
81131574:	00c00fc4 	movi	r3,63
81131578:	10c00dc5 	stb	r3,55(r2)
8113157c:	e0bff617 	ldw	r2,-40(fp)
81131580:	e0bffd15 	stw	r2,-12(fp)
81131584:	e0bffd17 	ldw	r2,-12(fp)
81131588:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8113158c:	0005883a 	mov	r2,zero
}
81131590:	e037883a 	mov	sp,fp
81131594:	df000017 	ldw	fp,0(sp)
81131598:	dec00104 	addi	sp,sp,4
8113159c:	f800283a 	ret

811315a0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
811315a0:	defff404 	addi	sp,sp,-48
811315a4:	de00012e 	bgeu	sp,et,811315ac <OSTaskNameGet+0xc>
811315a8:	003b68fa 	trap	3
811315ac:	dfc00b15 	stw	ra,44(sp)
811315b0:	df000a15 	stw	fp,40(sp)
811315b4:	df000a04 	addi	fp,sp,40
811315b8:	2005883a 	mov	r2,r4
811315bc:	e17ffe15 	stw	r5,-8(fp)
811315c0:	e1bfff15 	stw	r6,-4(fp)
811315c4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
811315c8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
811315cc:	e0bfff17 	ldw	r2,-4(fp)
811315d0:	1000021e 	bne	r2,zero,811315dc <OSTaskNameGet+0x3c>
        return (0);
811315d4:	0005883a 	mov	r2,zero
811315d8:	00005406 	br	8113172c <OSTaskNameGet+0x18c>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
811315dc:	e0bffd03 	ldbu	r2,-12(fp)
811315e0:	10800a70 	cmpltui	r2,r2,41
811315e4:	1000081e 	bne	r2,zero,81131608 <OSTaskNameGet+0x68>
        if (prio != OS_PRIO_SELF) {
811315e8:	e0bffd03 	ldbu	r2,-12(fp)
811315ec:	10803fe0 	cmpeqi	r2,r2,255
811315f0:	1000051e 	bne	r2,zero,81131608 <OSTaskNameGet+0x68>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
811315f4:	e0bfff17 	ldw	r2,-4(fp)
811315f8:	00c00a84 	movi	r3,42
811315fc:	10c00005 	stb	r3,0(r2)
            return (0);
81131600:	0005883a 	mov	r2,zero
81131604:	00004906 	br	8113172c <OSTaskNameGet+0x18c>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
81131608:	e0bffe17 	ldw	r2,-8(fp)
8113160c:	1000051e 	bne	r2,zero,81131624 <OSTaskNameGet+0x84>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
81131610:	e0bfff17 	ldw	r2,-4(fp)
81131614:	00c00304 	movi	r3,12
81131618:	10c00005 	stb	r3,0(r2)
        return (0);
8113161c:	0005883a 	mov	r2,zero
81131620:	00004206 	br	8113172c <OSTaskNameGet+0x18c>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
81131624:	d0a08a03 	ldbu	r2,-32216(gp)
81131628:	10803fcc 	andi	r2,r2,255
8113162c:	10000526 	beq	r2,zero,81131644 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
81131630:	e0bfff17 	ldw	r2,-4(fp)
81131634:	00c00444 	movi	r3,17
81131638:	10c00005 	stb	r3,0(r2)
        return (0);
8113163c:	0005883a 	mov	r2,zero
81131640:	00003a06 	br	8113172c <OSTaskNameGet+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131644:	0005303a 	rdctl	r2,status
81131648:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113164c:	e0fffc17 	ldw	r3,-16(fp)
81131650:	00bfff84 	movi	r2,-2
81131654:	1884703a 	and	r2,r3,r2
81131658:	1001703a 	wrctl	status,r2
  
  return context;
8113165c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81131660:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
81131664:	e0bffd03 	ldbu	r2,-12(fp)
81131668:	10803fd8 	cmpnei	r2,r2,255
8113166c:	1000031e 	bne	r2,zero,8113167c <OSTaskNameGet+0xdc>
        prio = OSTCBCur->OSTCBPrio;
81131670:	d0a08b17 	ldw	r2,-32212(gp)
81131674:	10800c83 	ldbu	r2,50(r2)
81131678:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8113167c:	e0fffd03 	ldbu	r3,-12(fp)
81131680:	00a04574 	movhi	r2,33045
81131684:	1081c704 	addi	r2,r2,1820
81131688:	18c7883a 	add	r3,r3,r3
8113168c:	18c7883a 	add	r3,r3,r3
81131690:	10c5883a 	add	r2,r2,r3
81131694:	10800017 	ldw	r2,0(r2)
81131698:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
8113169c:	e0bff817 	ldw	r2,-32(fp)
811316a0:	1000091e 	bne	r2,zero,811316c8 <OSTaskNameGet+0x128>
811316a4:	e0bff617 	ldw	r2,-40(fp)
811316a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811316ac:	e0bff717 	ldw	r2,-36(fp)
811316b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
811316b4:	e0bfff17 	ldw	r2,-4(fp)
811316b8:	00c010c4 	movi	r3,67
811316bc:	10c00005 	stb	r3,0(r2)
        return (0);
811316c0:	0005883a 	mov	r2,zero
811316c4:	00001906 	br	8113172c <OSTaskNameGet+0x18c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
811316c8:	e0bff817 	ldw	r2,-32(fp)
811316cc:	10800058 	cmpnei	r2,r2,1
811316d0:	1000091e 	bne	r2,zero,811316f8 <OSTaskNameGet+0x158>
811316d4:	e0bff617 	ldw	r2,-40(fp)
811316d8:	e0bff915 	stw	r2,-28(fp)
811316dc:	e0bff917 	ldw	r2,-28(fp)
811316e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
811316e4:	e0bfff17 	ldw	r2,-4(fp)
811316e8:	00c010c4 	movi	r3,67
811316ec:	10c00005 	stb	r3,0(r2)
        return (0);
811316f0:	0005883a 	mov	r2,zero
811316f4:	00000d06 	br	8113172c <OSTaskNameGet+0x18c>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
811316f8:	e0bff817 	ldw	r2,-32(fp)
811316fc:	10801304 	addi	r2,r2,76
81131700:	100b883a 	mov	r5,r2
81131704:	e13ffe17 	ldw	r4,-8(fp)
81131708:	112b4480 	call	8112b448 <OS_StrCopy>
8113170c:	e0bffb05 	stb	r2,-20(fp)
81131710:	e0bff617 	ldw	r2,-40(fp)
81131714:	e0bffa15 	stw	r2,-24(fp)
81131718:	e0bffa17 	ldw	r2,-24(fp)
8113171c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81131720:	e0bfff17 	ldw	r2,-4(fp)
81131724:	10000005 	stb	zero,0(r2)
    return (len);
81131728:	e0bffb03 	ldbu	r2,-20(fp)
}
8113172c:	e037883a 	mov	sp,fp
81131730:	dfc00117 	ldw	ra,4(sp)
81131734:	df000017 	ldw	fp,0(sp)
81131738:	dec00204 	addi	sp,sp,8
8113173c:	f800283a 	ret

81131740 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
81131740:	defff304 	addi	sp,sp,-52
81131744:	de00012e 	bgeu	sp,et,8113174c <OSTaskNameSet+0xc>
81131748:	003b68fa 	trap	3
8113174c:	dfc00c15 	stw	ra,48(sp)
81131750:	df000b15 	stw	fp,44(sp)
81131754:	df000b04 	addi	fp,sp,44
81131758:	2005883a 	mov	r2,r4
8113175c:	e17ffe15 	stw	r5,-8(fp)
81131760:	e1bfff15 	stw	r6,-4(fp)
81131764:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
81131768:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8113176c:	e0bfff17 	ldw	r2,-4(fp)
81131770:	10005c26 	beq	r2,zero,811318e4 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
81131774:	e0bffd03 	ldbu	r2,-12(fp)
81131778:	10800a70 	cmpltui	r2,r2,41
8113177c:	1000071e 	bne	r2,zero,8113179c <OSTaskNameSet+0x5c>
        if (prio != OS_PRIO_SELF) {
81131780:	e0bffd03 	ldbu	r2,-12(fp)
81131784:	10803fe0 	cmpeqi	r2,r2,255
81131788:	1000041e 	bne	r2,zero,8113179c <OSTaskNameSet+0x5c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
8113178c:	e0bfff17 	ldw	r2,-4(fp)
81131790:	00c00a84 	movi	r3,42
81131794:	10c00005 	stb	r3,0(r2)
            return;
81131798:	00005306 	br	811318e8 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
8113179c:	e0bffe17 	ldw	r2,-8(fp)
811317a0:	1000041e 	bne	r2,zero,811317b4 <OSTaskNameSet+0x74>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
811317a4:	e0bfff17 	ldw	r2,-4(fp)
811317a8:	00c00304 	movi	r3,12
811317ac:	10c00005 	stb	r3,0(r2)
        return;
811317b0:	00004d06 	br	811318e8 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
811317b4:	d0a08a03 	ldbu	r2,-32216(gp)
811317b8:	10803fcc 	andi	r2,r2,255
811317bc:	10000426 	beq	r2,zero,811317d0 <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
811317c0:	e0bfff17 	ldw	r2,-4(fp)
811317c4:	00c00484 	movi	r3,18
811317c8:	10c00005 	stb	r3,0(r2)
        return;
811317cc:	00004606 	br	811318e8 <OSTaskNameSet+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811317d0:	0005303a 	rdctl	r2,status
811317d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811317d8:	e0fffc17 	ldw	r3,-16(fp)
811317dc:	00bfff84 	movi	r2,-2
811317e0:	1884703a 	and	r2,r3,r2
811317e4:	1001703a 	wrctl	status,r2
  
  return context;
811317e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811317ec:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
811317f0:	e0bffd03 	ldbu	r2,-12(fp)
811317f4:	10803fd8 	cmpnei	r2,r2,255
811317f8:	1000031e 	bne	r2,zero,81131808 <OSTaskNameSet+0xc8>
        prio = OSTCBCur->OSTCBPrio;
811317fc:	d0a08b17 	ldw	r2,-32212(gp)
81131800:	10800c83 	ldbu	r2,50(r2)
81131804:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81131808:	e0fffd03 	ldbu	r3,-12(fp)
8113180c:	00a04574 	movhi	r2,33045
81131810:	1081c704 	addi	r2,r2,1820
81131814:	18c7883a 	add	r3,r3,r3
81131818:	18c7883a 	add	r3,r3,r3
8113181c:	10c5883a 	add	r2,r2,r3
81131820:	10800017 	ldw	r2,0(r2)
81131824:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
81131828:	e0bff717 	ldw	r2,-36(fp)
8113182c:	1000081e 	bne	r2,zero,81131850 <OSTaskNameSet+0x110>
81131830:	e0bff517 	ldw	r2,-44(fp)
81131834:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131838:	e0bff617 	ldw	r2,-40(fp)
8113183c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
81131840:	e0bfff17 	ldw	r2,-4(fp)
81131844:	00c010c4 	movi	r3,67
81131848:	10c00005 	stb	r3,0(r2)
        return;
8113184c:	00002606 	br	811318e8 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
81131850:	e0bff717 	ldw	r2,-36(fp)
81131854:	10800058 	cmpnei	r2,r2,1
81131858:	1000081e 	bne	r2,zero,8113187c <OSTaskNameSet+0x13c>
8113185c:	e0bff517 	ldw	r2,-44(fp)
81131860:	e0bff815 	stw	r2,-32(fp)
81131864:	e0bff817 	ldw	r2,-32(fp)
81131868:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
8113186c:	e0bfff17 	ldw	r2,-4(fp)
81131870:	00c010c4 	movi	r3,67
81131874:	10c00005 	stb	r3,0(r2)
        return;
81131878:	00001b06 	br	811318e8 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
8113187c:	e13ffe17 	ldw	r4,-8(fp)
81131880:	112b4c40 	call	8112b4c4 <OS_StrLen>
81131884:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
81131888:	e0bffa03 	ldbu	r2,-24(fp)
8113188c:	10800830 	cmpltui	r2,r2,32
81131890:	1000081e 	bne	r2,zero,811318b4 <OSTaskNameSet+0x174>
81131894:	e0bff517 	ldw	r2,-44(fp)
81131898:	e0bff915 	stw	r2,-28(fp)
8113189c:	e0bff917 	ldw	r2,-28(fp)
811318a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
811318a4:	e0bfff17 	ldw	r2,-4(fp)
811318a8:	00c01044 	movi	r3,65
811318ac:	10c00005 	stb	r3,0(r2)
        return;
811318b0:	00000d06 	br	811318e8 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
811318b4:	e0bff717 	ldw	r2,-36(fp)
811318b8:	10801304 	addi	r2,r2,76
811318bc:	e17ffe17 	ldw	r5,-8(fp)
811318c0:	1009883a 	mov	r4,r2
811318c4:	112b4480 	call	8112b448 <OS_StrCopy>
811318c8:	e0bff517 	ldw	r2,-44(fp)
811318cc:	e0bffb15 	stw	r2,-20(fp)
811318d0:	e0bffb17 	ldw	r2,-20(fp)
811318d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811318d8:	e0bfff17 	ldw	r2,-4(fp)
811318dc:	10000005 	stb	zero,0(r2)
811318e0:	00000106 	br	811318e8 <OSTaskNameSet+0x1a8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
811318e4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
811318e8:	e037883a 	mov	sp,fp
811318ec:	dfc00117 	ldw	ra,4(sp)
811318f0:	df000017 	ldw	fp,0(sp)
811318f4:	dec00204 	addi	sp,sp,8
811318f8:	f800283a 	ret

811318fc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
811318fc:	defff404 	addi	sp,sp,-48
81131900:	de00012e 	bgeu	sp,et,81131908 <OSTaskResume+0xc>
81131904:	003b68fa 	trap	3
81131908:	dfc00b15 	stw	ra,44(sp)
8113190c:	df000a15 	stw	fp,40(sp)
81131910:	df000a04 	addi	fp,sp,40
81131914:	2005883a 	mov	r2,r4
81131918:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8113191c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
81131920:	e0bfff03 	ldbu	r2,-4(fp)
81131924:	10800a30 	cmpltui	r2,r2,40
81131928:	1000021e 	bne	r2,zero,81131934 <OSTaskResume+0x38>
        return (OS_ERR_PRIO_INVALID);
8113192c:	00800a84 	movi	r2,42
81131930:	00006406 	br	81131ac4 <OSTaskResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131934:	0005303a 	rdctl	r2,status
81131938:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113193c:	e0fffe17 	ldw	r3,-8(fp)
81131940:	00bfff84 	movi	r2,-2
81131944:	1884703a 	and	r2,r3,r2
81131948:	1001703a 	wrctl	status,r2
  
  return context;
8113194c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81131950:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81131954:	e0ffff03 	ldbu	r3,-4(fp)
81131958:	00a04574 	movhi	r2,33045
8113195c:	1081c704 	addi	r2,r2,1820
81131960:	18c7883a 	add	r3,r3,r3
81131964:	18c7883a 	add	r3,r3,r3
81131968:	10c5883a 	add	r2,r2,r3
8113196c:	10800017 	ldw	r2,0(r2)
81131970:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
81131974:	e0bff817 	ldw	r2,-32(fp)
81131978:	1000061e 	bne	r2,zero,81131994 <OSTaskResume+0x98>
8113197c:	e0bff617 	ldw	r2,-40(fp)
81131980:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131984:	e0bff717 	ldw	r2,-36(fp)
81131988:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
8113198c:	00801184 	movi	r2,70
81131990:	00004c06 	br	81131ac4 <OSTaskResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
81131994:	e0bff817 	ldw	r2,-32(fp)
81131998:	10800058 	cmpnei	r2,r2,1
8113199c:	1000061e 	bne	r2,zero,811319b8 <OSTaskResume+0xbc>
811319a0:	e0bff617 	ldw	r2,-40(fp)
811319a4:	e0bff915 	stw	r2,-28(fp)
811319a8:	e0bff917 	ldw	r2,-28(fp)
811319ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811319b0:	008010c4 	movi	r2,67
811319b4:	00004306 	br	81131ac4 <OSTaskResume+0x1c8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
811319b8:	e0bff817 	ldw	r2,-32(fp)
811319bc:	10800c03 	ldbu	r2,48(r2)
811319c0:	10803fcc 	andi	r2,r2,255
811319c4:	1080020c 	andi	r2,r2,8
811319c8:	10003926 	beq	r2,zero,81131ab0 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
811319cc:	e0bff817 	ldw	r2,-32(fp)
811319d0:	10c00c03 	ldbu	r3,48(r2)
811319d4:	00bffdc4 	movi	r2,-9
811319d8:	1884703a 	and	r2,r3,r2
811319dc:	1007883a 	mov	r3,r2
811319e0:	e0bff817 	ldw	r2,-32(fp)
811319e4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
811319e8:	e0bff817 	ldw	r2,-32(fp)
811319ec:	10800c03 	ldbu	r2,48(r2)
811319f0:	10803fcc 	andi	r2,r2,255
811319f4:	1000281e 	bne	r2,zero,81131a98 <OSTaskResume+0x19c>
            if (ptcb->OSTCBDly == 0) {
811319f8:	e0bff817 	ldw	r2,-32(fp)
811319fc:	10800b8b 	ldhu	r2,46(r2)
81131a00:	10bfffcc 	andi	r2,r2,65535
81131a04:	10001f1e 	bne	r2,zero,81131a84 <OSTaskResume+0x188>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
81131a08:	e0bff817 	ldw	r2,-32(fp)
81131a0c:	10c00d83 	ldbu	r3,54(r2)
81131a10:	d0a08703 	ldbu	r2,-32228(gp)
81131a14:	1884b03a 	or	r2,r3,r2
81131a18:	d0a08705 	stb	r2,-32228(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81131a1c:	e0bff817 	ldw	r2,-32(fp)
81131a20:	10800d03 	ldbu	r2,52(r2)
81131a24:	10c03fcc 	andi	r3,r2,255
81131a28:	e0bff817 	ldw	r2,-32(fp)
81131a2c:	10800d03 	ldbu	r2,52(r2)
81131a30:	11003fcc 	andi	r4,r2,255
81131a34:	d0a08744 	addi	r2,gp,-32227
81131a38:	2085883a 	add	r2,r4,r2
81131a3c:	11000003 	ldbu	r4,0(r2)
81131a40:	e0bff817 	ldw	r2,-32(fp)
81131a44:	10800d43 	ldbu	r2,53(r2)
81131a48:	2084b03a 	or	r2,r4,r2
81131a4c:	1009883a 	mov	r4,r2
81131a50:	d0a08744 	addi	r2,gp,-32227
81131a54:	1885883a 	add	r2,r3,r2
81131a58:	11000005 	stb	r4,0(r2)
81131a5c:	e0bff617 	ldw	r2,-40(fp)
81131a60:	e0bffa15 	stw	r2,-24(fp)
81131a64:	e0bffa17 	ldw	r2,-24(fp)
81131a68:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
81131a6c:	d0a07a03 	ldbu	r2,-32280(gp)
81131a70:	10803fcc 	andi	r2,r2,255
81131a74:	10800058 	cmpnei	r2,r2,1
81131a78:	10000b1e 	bne	r2,zero,81131aa8 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
81131a7c:	112b2f40 	call	8112b2f4 <OS_Sched>
81131a80:	00000906 	br	81131aa8 <OSTaskResume+0x1ac>
81131a84:	e0bff617 	ldw	r2,-40(fp)
81131a88:	e0bffb15 	stw	r2,-20(fp)
81131a8c:	e0bffb17 	ldw	r2,-20(fp)
81131a90:	1001703a 	wrctl	status,r2
81131a94:	00000406 	br	81131aa8 <OSTaskResume+0x1ac>
81131a98:	e0bff617 	ldw	r2,-40(fp)
81131a9c:	e0bffc15 	stw	r2,-16(fp)
81131aa0:	e0bffc17 	ldw	r2,-16(fp)
81131aa4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
81131aa8:	0005883a 	mov	r2,zero
81131aac:	00000506 	br	81131ac4 <OSTaskResume+0x1c8>
81131ab0:	e0bff617 	ldw	r2,-40(fp)
81131ab4:	e0bffd15 	stw	r2,-12(fp)
81131ab8:	e0bffd17 	ldw	r2,-12(fp)
81131abc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
81131ac0:	00801104 	movi	r2,68
}
81131ac4:	e037883a 	mov	sp,fp
81131ac8:	dfc00117 	ldw	ra,4(sp)
81131acc:	df000017 	ldw	fp,0(sp)
81131ad0:	dec00204 	addi	sp,sp,8
81131ad4:	f800283a 	ret

81131ad8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
81131ad8:	defff304 	addi	sp,sp,-52
81131adc:	de00012e 	bgeu	sp,et,81131ae4 <OSTaskStkChk+0xc>
81131ae0:	003b68fa 	trap	3
81131ae4:	df000c15 	stw	fp,48(sp)
81131ae8:	df000c04 	addi	fp,sp,48
81131aec:	2005883a 	mov	r2,r4
81131af0:	e17fff15 	stw	r5,-4(fp)
81131af4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81131af8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
81131afc:	e0bffe03 	ldbu	r2,-8(fp)
81131b00:	10800a70 	cmpltui	r2,r2,41
81131b04:	1000051e 	bne	r2,zero,81131b1c <OSTaskStkChk+0x44>
        if (prio != OS_PRIO_SELF) {
81131b08:	e0bffe03 	ldbu	r2,-8(fp)
81131b0c:	10803fe0 	cmpeqi	r2,r2,255
81131b10:	1000021e 	bne	r2,zero,81131b1c <OSTaskStkChk+0x44>
            return (OS_ERR_PRIO_INVALID);
81131b14:	00800a84 	movi	r2,42
81131b18:	00005d06 	br	81131c90 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
81131b1c:	e0bfff17 	ldw	r2,-4(fp)
81131b20:	1000021e 	bne	r2,zero,81131b2c <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
81131b24:	00800244 	movi	r2,9
81131b28:	00005906 	br	81131c90 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
81131b2c:	e0bfff17 	ldw	r2,-4(fp)
81131b30:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
81131b34:	e0bfff17 	ldw	r2,-4(fp)
81131b38:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131b3c:	0005303a 	rdctl	r2,status
81131b40:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131b44:	e0fffd17 	ldw	r3,-12(fp)
81131b48:	00bfff84 	movi	r2,-2
81131b4c:	1884703a 	and	r2,r3,r2
81131b50:	1001703a 	wrctl	status,r2
  
  return context;
81131b54:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
81131b58:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
81131b5c:	e0bffe03 	ldbu	r2,-8(fp)
81131b60:	10803fd8 	cmpnei	r2,r2,255
81131b64:	1000031e 	bne	r2,zero,81131b74 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
81131b68:	d0a08b17 	ldw	r2,-32212(gp)
81131b6c:	10800c83 	ldbu	r2,50(r2)
81131b70:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81131b74:	e0fffe03 	ldbu	r3,-8(fp)
81131b78:	00a04574 	movhi	r2,33045
81131b7c:	1081c704 	addi	r2,r2,1820
81131b80:	18c7883a 	add	r3,r3,r3
81131b84:	18c7883a 	add	r3,r3,r3
81131b88:	10c5883a 	add	r2,r2,r3
81131b8c:	10800017 	ldw	r2,0(r2)
81131b90:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
81131b94:	e0bff817 	ldw	r2,-32(fp)
81131b98:	1000061e 	bne	r2,zero,81131bb4 <OSTaskStkChk+0xdc>
81131b9c:	e0bff617 	ldw	r2,-40(fp)
81131ba0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131ba4:	e0bff717 	ldw	r2,-36(fp)
81131ba8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81131bac:	008010c4 	movi	r2,67
81131bb0:	00003706 	br	81131c90 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
81131bb4:	e0bff817 	ldw	r2,-32(fp)
81131bb8:	10800058 	cmpnei	r2,r2,1
81131bbc:	1000061e 	bne	r2,zero,81131bd8 <OSTaskStkChk+0x100>
81131bc0:	e0bff617 	ldw	r2,-40(fp)
81131bc4:	e0bff915 	stw	r2,-28(fp)
81131bc8:	e0bff917 	ldw	r2,-28(fp)
81131bcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81131bd0:	008010c4 	movi	r2,67
81131bd4:	00002e06 	br	81131c90 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
81131bd8:	e0bff817 	ldw	r2,-32(fp)
81131bdc:	1080040b 	ldhu	r2,16(r2)
81131be0:	10bfffcc 	andi	r2,r2,65535
81131be4:	1080004c 	andi	r2,r2,1
81131be8:	1000061e 	bne	r2,zero,81131c04 <OSTaskStkChk+0x12c>
81131bec:	e0bff617 	ldw	r2,-40(fp)
81131bf0:	e0bffa15 	stw	r2,-24(fp)
81131bf4:	e0bffa17 	ldw	r2,-24(fp)
81131bf8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
81131bfc:	00801144 	movi	r2,69
81131c00:	00002306 	br	81131c90 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
81131c04:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
81131c08:	e0bff817 	ldw	r2,-32(fp)
81131c0c:	10800317 	ldw	r2,12(r2)
81131c10:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
81131c14:	e0bff817 	ldw	r2,-32(fp)
81131c18:	10800217 	ldw	r2,8(r2)
81131c1c:	e0bff415 	stw	r2,-48(fp)
81131c20:	e0bff617 	ldw	r2,-40(fp)
81131c24:	e0bffb15 	stw	r2,-20(fp)
81131c28:	e0bffb17 	ldw	r2,-20(fp)
81131c2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
81131c30:	00000306 	br	81131c40 <OSTaskStkChk+0x168>
        nfree++;
81131c34:	e0bff517 	ldw	r2,-44(fp)
81131c38:	10800044 	addi	r2,r2,1
81131c3c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
81131c40:	e0bff417 	ldw	r2,-48(fp)
81131c44:	10c00104 	addi	r3,r2,4
81131c48:	e0fff415 	stw	r3,-48(fp)
81131c4c:	10800017 	ldw	r2,0(r2)
81131c50:	103ff826 	beq	r2,zero,81131c34 <__reset+0xfb111c34>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
81131c54:	e0bff517 	ldw	r2,-44(fp)
81131c58:	1085883a 	add	r2,r2,r2
81131c5c:	1085883a 	add	r2,r2,r2
81131c60:	1007883a 	mov	r3,r2
81131c64:	e0bfff17 	ldw	r2,-4(fp)
81131c68:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
81131c6c:	e0fffc17 	ldw	r3,-16(fp)
81131c70:	e0bff517 	ldw	r2,-44(fp)
81131c74:	1885c83a 	sub	r2,r3,r2
81131c78:	1085883a 	add	r2,r2,r2
81131c7c:	1085883a 	add	r2,r2,r2
81131c80:	1007883a 	mov	r3,r2
81131c84:	e0bfff17 	ldw	r2,-4(fp)
81131c88:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
81131c8c:	0005883a 	mov	r2,zero
}
81131c90:	e037883a 	mov	sp,fp
81131c94:	df000017 	ldw	fp,0(sp)
81131c98:	dec00104 	addi	sp,sp,4
81131c9c:	f800283a 	ret

81131ca0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
81131ca0:	defff504 	addi	sp,sp,-44
81131ca4:	de00012e 	bgeu	sp,et,81131cac <OSTaskSuspend+0xc>
81131ca8:	003b68fa 	trap	3
81131cac:	dfc00a15 	stw	ra,40(sp)
81131cb0:	df000915 	stw	fp,36(sp)
81131cb4:	df000904 	addi	fp,sp,36
81131cb8:	2005883a 	mov	r2,r4
81131cbc:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81131cc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
81131cc4:	e0bfff03 	ldbu	r2,-4(fp)
81131cc8:	10800a18 	cmpnei	r2,r2,40
81131ccc:	1000021e 	bne	r2,zero,81131cd8 <OSTaskSuspend+0x38>
        return (OS_ERR_TASK_SUSPEND_IDLE);
81131cd0:	008011c4 	movi	r2,71
81131cd4:	00006806 	br	81131e78 <OSTaskSuspend+0x1d8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
81131cd8:	e0bfff03 	ldbu	r2,-4(fp)
81131cdc:	10800a30 	cmpltui	r2,r2,40
81131ce0:	1000051e 	bne	r2,zero,81131cf8 <OSTaskSuspend+0x58>
        if (prio != OS_PRIO_SELF) {
81131ce4:	e0bfff03 	ldbu	r2,-4(fp)
81131ce8:	10803fe0 	cmpeqi	r2,r2,255
81131cec:	1000021e 	bne	r2,zero,81131cf8 <OSTaskSuspend+0x58>
            return (OS_ERR_PRIO_INVALID);
81131cf0:	00800a84 	movi	r2,42
81131cf4:	00006006 	br	81131e78 <OSTaskSuspend+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131cf8:	0005303a 	rdctl	r2,status
81131cfc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131d00:	e0fffe17 	ldw	r3,-8(fp)
81131d04:	00bfff84 	movi	r2,-2
81131d08:	1884703a 	and	r2,r3,r2
81131d0c:	1001703a 	wrctl	status,r2
  
  return context;
81131d10:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
81131d14:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
81131d18:	e0bfff03 	ldbu	r2,-4(fp)
81131d1c:	10803fd8 	cmpnei	r2,r2,255
81131d20:	1000061e 	bne	r2,zero,81131d3c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
81131d24:	d0a08b17 	ldw	r2,-32212(gp)
81131d28:	10800c83 	ldbu	r2,50(r2)
81131d2c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
81131d30:	00800044 	movi	r2,1
81131d34:	e0bff705 	stb	r2,-36(fp)
81131d38:	00000906 	br	81131d60 <OSTaskSuspend+0xc0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
81131d3c:	d0a08b17 	ldw	r2,-32212(gp)
81131d40:	10800c83 	ldbu	r2,50(r2)
81131d44:	10c03fcc 	andi	r3,r2,255
81131d48:	e0bfff03 	ldbu	r2,-4(fp)
81131d4c:	1880031e 	bne	r3,r2,81131d5c <OSTaskSuspend+0xbc>
        self = OS_TRUE;
81131d50:	00800044 	movi	r2,1
81131d54:	e0bff705 	stb	r2,-36(fp)
81131d58:	00000106 	br	81131d60 <OSTaskSuspend+0xc0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
81131d5c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81131d60:	e0ffff03 	ldbu	r3,-4(fp)
81131d64:	00a04574 	movhi	r2,33045
81131d68:	1081c704 	addi	r2,r2,1820
81131d6c:	18c7883a 	add	r3,r3,r3
81131d70:	18c7883a 	add	r3,r3,r3
81131d74:	10c5883a 	add	r2,r2,r3
81131d78:	10800017 	ldw	r2,0(r2)
81131d7c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
81131d80:	e0bffa17 	ldw	r2,-24(fp)
81131d84:	1000061e 	bne	r2,zero,81131da0 <OSTaskSuspend+0x100>
81131d88:	e0bff817 	ldw	r2,-32(fp)
81131d8c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131d90:	e0bff917 	ldw	r2,-28(fp)
81131d94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
81131d98:	00801204 	movi	r2,72
81131d9c:	00003606 	br	81131e78 <OSTaskSuspend+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
81131da0:	e0bffa17 	ldw	r2,-24(fp)
81131da4:	10800058 	cmpnei	r2,r2,1
81131da8:	1000061e 	bne	r2,zero,81131dc4 <OSTaskSuspend+0x124>
81131dac:	e0bff817 	ldw	r2,-32(fp)
81131db0:	e0bffb15 	stw	r2,-20(fp)
81131db4:	e0bffb17 	ldw	r2,-20(fp)
81131db8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81131dbc:	008010c4 	movi	r2,67
81131dc0:	00002d06 	br	81131e78 <OSTaskSuspend+0x1d8>
    }
    y            = ptcb->OSTCBY;
81131dc4:	e0bffa17 	ldw	r2,-24(fp)
81131dc8:	10800d03 	ldbu	r2,52(r2)
81131dcc:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
81131dd0:	e0fffd03 	ldbu	r3,-12(fp)
81131dd4:	e13ffd03 	ldbu	r4,-12(fp)
81131dd8:	d0a08744 	addi	r2,gp,-32227
81131ddc:	2085883a 	add	r2,r4,r2
81131de0:	10800003 	ldbu	r2,0(r2)
81131de4:	1009883a 	mov	r4,r2
81131de8:	e0bffa17 	ldw	r2,-24(fp)
81131dec:	10800d43 	ldbu	r2,53(r2)
81131df0:	0084303a 	nor	r2,zero,r2
81131df4:	2084703a 	and	r2,r4,r2
81131df8:	1009883a 	mov	r4,r2
81131dfc:	d0a08744 	addi	r2,gp,-32227
81131e00:	1885883a 	add	r2,r3,r2
81131e04:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81131e08:	e0fffd03 	ldbu	r3,-12(fp)
81131e0c:	d0a08744 	addi	r2,gp,-32227
81131e10:	1885883a 	add	r2,r3,r2
81131e14:	10800003 	ldbu	r2,0(r2)
81131e18:	10803fcc 	andi	r2,r2,255
81131e1c:	1000071e 	bne	r2,zero,81131e3c <OSTaskSuspend+0x19c>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
81131e20:	e0bffa17 	ldw	r2,-24(fp)
81131e24:	10800d83 	ldbu	r2,54(r2)
81131e28:	0084303a 	nor	r2,zero,r2
81131e2c:	1007883a 	mov	r3,r2
81131e30:	d0a08703 	ldbu	r2,-32228(gp)
81131e34:	1884703a 	and	r2,r3,r2
81131e38:	d0a08705 	stb	r2,-32228(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
81131e3c:	e0bffa17 	ldw	r2,-24(fp)
81131e40:	10800c03 	ldbu	r2,48(r2)
81131e44:	10800214 	ori	r2,r2,8
81131e48:	1007883a 	mov	r3,r2
81131e4c:	e0bffa17 	ldw	r2,-24(fp)
81131e50:	10c00c05 	stb	r3,48(r2)
81131e54:	e0bff817 	ldw	r2,-32(fp)
81131e58:	e0bffc15 	stw	r2,-16(fp)
81131e5c:	e0bffc17 	ldw	r2,-16(fp)
81131e60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
81131e64:	e0bff703 	ldbu	r2,-36(fp)
81131e68:	10800058 	cmpnei	r2,r2,1
81131e6c:	1000011e 	bne	r2,zero,81131e74 <OSTaskSuspend+0x1d4>
        OS_Sched();                                             /* Find new highest priority task      */
81131e70:	112b2f40 	call	8112b2f4 <OS_Sched>
    }
    return (OS_ERR_NONE);
81131e74:	0005883a 	mov	r2,zero
}
81131e78:	e037883a 	mov	sp,fp
81131e7c:	dfc00117 	ldw	ra,4(sp)
81131e80:	df000017 	ldw	fp,0(sp)
81131e84:	dec00204 	addi	sp,sp,8
81131e88:	f800283a 	ret

81131e8c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
81131e8c:	defff604 	addi	sp,sp,-40
81131e90:	de00012e 	bgeu	sp,et,81131e98 <OSTaskQuery+0xc>
81131e94:	003b68fa 	trap	3
81131e98:	dfc00915 	stw	ra,36(sp)
81131e9c:	df000815 	stw	fp,32(sp)
81131ea0:	df000804 	addi	fp,sp,32
81131ea4:	2005883a 	mov	r2,r4
81131ea8:	e17fff15 	stw	r5,-4(fp)
81131eac:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81131eb0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
81131eb4:	e0bffe03 	ldbu	r2,-8(fp)
81131eb8:	10800a70 	cmpltui	r2,r2,41
81131ebc:	1000051e 	bne	r2,zero,81131ed4 <OSTaskQuery+0x48>
        if (prio != OS_PRIO_SELF) {
81131ec0:	e0bffe03 	ldbu	r2,-8(fp)
81131ec4:	10803fe0 	cmpeqi	r2,r2,255
81131ec8:	1000021e 	bne	r2,zero,81131ed4 <OSTaskQuery+0x48>
            return (OS_ERR_PRIO_INVALID);
81131ecc:	00800a84 	movi	r2,42
81131ed0:	00003406 	br	81131fa4 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
81131ed4:	e0bfff17 	ldw	r2,-4(fp)
81131ed8:	1000021e 	bne	r2,zero,81131ee4 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
81131edc:	00800244 	movi	r2,9
81131ee0:	00003006 	br	81131fa4 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131ee4:	0005303a 	rdctl	r2,status
81131ee8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131eec:	e0fffd17 	ldw	r3,-12(fp)
81131ef0:	00bfff84 	movi	r2,-2
81131ef4:	1884703a 	and	r2,r3,r2
81131ef8:	1001703a 	wrctl	status,r2
  
  return context;
81131efc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81131f00:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
81131f04:	e0bffe03 	ldbu	r2,-8(fp)
81131f08:	10803fd8 	cmpnei	r2,r2,255
81131f0c:	1000031e 	bne	r2,zero,81131f1c <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
81131f10:	d0a08b17 	ldw	r2,-32212(gp)
81131f14:	10800c83 	ldbu	r2,50(r2)
81131f18:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81131f1c:	e0fffe03 	ldbu	r3,-8(fp)
81131f20:	00a04574 	movhi	r2,33045
81131f24:	1081c704 	addi	r2,r2,1820
81131f28:	18c7883a 	add	r3,r3,r3
81131f2c:	18c7883a 	add	r3,r3,r3
81131f30:	10c5883a 	add	r2,r2,r3
81131f34:	10800017 	ldw	r2,0(r2)
81131f38:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
81131f3c:	e0bffa17 	ldw	r2,-24(fp)
81131f40:	1000061e 	bne	r2,zero,81131f5c <OSTaskQuery+0xd0>
81131f44:	e0bff817 	ldw	r2,-32(fp)
81131f48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131f4c:	e0bff917 	ldw	r2,-28(fp)
81131f50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
81131f54:	00800a44 	movi	r2,41
81131f58:	00001206 	br	81131fa4 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
81131f5c:	e0bffa17 	ldw	r2,-24(fp)
81131f60:	10800058 	cmpnei	r2,r2,1
81131f64:	1000061e 	bne	r2,zero,81131f80 <OSTaskQuery+0xf4>
81131f68:	e0bff817 	ldw	r2,-32(fp)
81131f6c:	e0bffb15 	stw	r2,-20(fp)
81131f70:	e0bffb17 	ldw	r2,-20(fp)
81131f74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81131f78:	008010c4 	movi	r2,67
81131f7c:	00000906 	br	81131fa4 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
81131f80:	01801b04 	movi	r6,108
81131f84:	e17ffa17 	ldw	r5,-24(fp)
81131f88:	e13fff17 	ldw	r4,-4(fp)
81131f8c:	112b2840 	call	8112b284 <OS_MemCopy>
81131f90:	e0bff817 	ldw	r2,-32(fp)
81131f94:	e0bffc15 	stw	r2,-16(fp)
81131f98:	e0bffc17 	ldw	r2,-16(fp)
81131f9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81131fa0:	0005883a 	mov	r2,zero
}
81131fa4:	e037883a 	mov	sp,fp
81131fa8:	dfc00117 	ldw	ra,4(sp)
81131fac:	df000017 	ldw	fp,0(sp)
81131fb0:	dec00204 	addi	sp,sp,8
81131fb4:	f800283a 	ret

81131fb8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
81131fb8:	defffc04 	addi	sp,sp,-16
81131fbc:	de00012e 	bgeu	sp,et,81131fc4 <OS_TaskStkClr+0xc>
81131fc0:	003b68fa 	trap	3
81131fc4:	df000315 	stw	fp,12(sp)
81131fc8:	df000304 	addi	fp,sp,12
81131fcc:	e13ffd15 	stw	r4,-12(fp)
81131fd0:	e17ffe15 	stw	r5,-8(fp)
81131fd4:	3005883a 	mov	r2,r6
81131fd8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
81131fdc:	e0bfff0b 	ldhu	r2,-4(fp)
81131fe0:	1080004c 	andi	r2,r2,1
81131fe4:	10000d26 	beq	r2,zero,8113201c <OS_TaskStkClr+0x64>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
81131fe8:	e0bfff0b 	ldhu	r2,-4(fp)
81131fec:	1080008c 	andi	r2,r2,2
81131ff0:	10000a26 	beq	r2,zero,8113201c <OS_TaskStkClr+0x64>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81131ff4:	00000706 	br	81132014 <OS_TaskStkClr+0x5c>
                size--;
81131ff8:	e0bffe17 	ldw	r2,-8(fp)
81131ffc:	10bfffc4 	addi	r2,r2,-1
81132000:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
81132004:	e0bffd17 	ldw	r2,-12(fp)
81132008:	10c00104 	addi	r3,r2,4
8113200c:	e0fffd15 	stw	r3,-12(fp)
81132010:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81132014:	e0bffe17 	ldw	r2,-8(fp)
81132018:	103ff71e 	bne	r2,zero,81131ff8 <__reset+0xfb111ff8>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
8113201c:	0001883a 	nop
81132020:	e037883a 	mov	sp,fp
81132024:	df000017 	ldw	fp,0(sp)
81132028:	dec00104 	addi	sp,sp,4
8113202c:	f800283a 	ret

81132030 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
81132030:	defff904 	addi	sp,sp,-28
81132034:	de00012e 	bgeu	sp,et,8113203c <OSTimeDly+0xc>
81132038:	003b68fa 	trap	3
8113203c:	dfc00615 	stw	ra,24(sp)
81132040:	df000515 	stw	fp,20(sp)
81132044:	df000504 	addi	fp,sp,20
81132048:	2005883a 	mov	r2,r4
8113204c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81132050:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81132054:	d0a08a03 	ldbu	r2,-32216(gp)
81132058:	10803fcc 	andi	r2,r2,255
8113205c:	1000311e 	bne	r2,zero,81132124 <OSTimeDly+0xf4>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
81132060:	e0bfff0b 	ldhu	r2,-4(fp)
81132064:	10003026 	beq	r2,zero,81132128 <OSTimeDly+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132068:	0005303a 	rdctl	r2,status
8113206c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132070:	e0fffe17 	ldw	r3,-8(fp)
81132074:	00bfff84 	movi	r2,-2
81132078:	1884703a 	and	r2,r3,r2
8113207c:	1001703a 	wrctl	status,r2
  
  return context;
81132080:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
81132084:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
81132088:	d0a08b17 	ldw	r2,-32212(gp)
8113208c:	10800d03 	ldbu	r2,52(r2)
81132090:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
81132094:	e0fffd03 	ldbu	r3,-12(fp)
81132098:	e13ffd03 	ldbu	r4,-12(fp)
8113209c:	d0a08744 	addi	r2,gp,-32227
811320a0:	2085883a 	add	r2,r4,r2
811320a4:	10800003 	ldbu	r2,0(r2)
811320a8:	1009883a 	mov	r4,r2
811320ac:	d0a08b17 	ldw	r2,-32212(gp)
811320b0:	10800d43 	ldbu	r2,53(r2)
811320b4:	0084303a 	nor	r2,zero,r2
811320b8:	2084703a 	and	r2,r4,r2
811320bc:	1009883a 	mov	r4,r2
811320c0:	d0a08744 	addi	r2,gp,-32227
811320c4:	1885883a 	add	r2,r3,r2
811320c8:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
811320cc:	e0fffd03 	ldbu	r3,-12(fp)
811320d0:	d0a08744 	addi	r2,gp,-32227
811320d4:	1885883a 	add	r2,r3,r2
811320d8:	10800003 	ldbu	r2,0(r2)
811320dc:	10803fcc 	andi	r2,r2,255
811320e0:	1000071e 	bne	r2,zero,81132100 <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
811320e4:	d0a08b17 	ldw	r2,-32212(gp)
811320e8:	10800d83 	ldbu	r2,54(r2)
811320ec:	0084303a 	nor	r2,zero,r2
811320f0:	1007883a 	mov	r3,r2
811320f4:	d0a08703 	ldbu	r2,-32228(gp)
811320f8:	1884703a 	and	r2,r3,r2
811320fc:	d0a08705 	stb	r2,-32228(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
81132100:	d0a08b17 	ldw	r2,-32212(gp)
81132104:	e0ffff0b 	ldhu	r3,-4(fp)
81132108:	10c00b8d 	sth	r3,46(r2)
8113210c:	e0bffb17 	ldw	r2,-20(fp)
81132110:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132114:	e0bffc17 	ldw	r2,-16(fp)
81132118:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
8113211c:	112b2f40 	call	8112b2f4 <OS_Sched>
81132120:	00000106 	br	81132128 <OSTimeDly+0xf8>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
81132124:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
81132128:	e037883a 	mov	sp,fp
8113212c:	dfc00117 	ldw	ra,4(sp)
81132130:	df000017 	ldw	fp,0(sp)
81132134:	dec00204 	addi	sp,sp,8
81132138:	f800283a 	ret

8113213c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
8113213c:	defff804 	addi	sp,sp,-32
81132140:	de00012e 	bgeu	sp,et,81132148 <OSTimeDlyHMSM+0xc>
81132144:	003b68fa 	trap	3
81132148:	dfc00715 	stw	ra,28(sp)
8113214c:	df000615 	stw	fp,24(sp)
81132150:	df000604 	addi	fp,sp,24
81132154:	2015883a 	mov	r10,r4
81132158:	2809883a 	mov	r4,r5
8113215c:	3007883a 	mov	r3,r6
81132160:	3805883a 	mov	r2,r7
81132164:	e2bffc05 	stb	r10,-16(fp)
81132168:	e13ffd05 	stb	r4,-12(fp)
8113216c:	e0fffe05 	stb	r3,-8(fp)
81132170:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81132174:	d0a08a03 	ldbu	r2,-32216(gp)
81132178:	10803fcc 	andi	r2,r2,255
8113217c:	10000226 	beq	r2,zero,81132188 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
81132180:	00801544 	movi	r2,85
81132184:	00004106 	br	8113228c <OSTimeDlyHMSM+0x150>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
81132188:	e0bffc03 	ldbu	r2,-16(fp)
8113218c:	1000081e 	bne	r2,zero,811321b0 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
81132190:	e0bffd03 	ldbu	r2,-12(fp)
81132194:	1000061e 	bne	r2,zero,811321b0 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
81132198:	e0bffe03 	ldbu	r2,-8(fp)
8113219c:	1000041e 	bne	r2,zero,811321b0 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
811321a0:	e0bfff0b 	ldhu	r2,-4(fp)
811321a4:	1000021e 	bne	r2,zero,811321b0 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
811321a8:	00801504 	movi	r2,84
811321ac:	00003706 	br	8113228c <OSTimeDlyHMSM+0x150>
                }
            }
        }
    }
    if (minutes > 59) {
811321b0:	e0bffd03 	ldbu	r2,-12(fp)
811321b4:	10800f30 	cmpltui	r2,r2,60
811321b8:	1000021e 	bne	r2,zero,811321c4 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
811321bc:	00801444 	movi	r2,81
811321c0:	00003206 	br	8113228c <OSTimeDlyHMSM+0x150>
    }
    if (seconds > 59) {
811321c4:	e0bffe03 	ldbu	r2,-8(fp)
811321c8:	10800f30 	cmpltui	r2,r2,60
811321cc:	1000021e 	bne	r2,zero,811321d8 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
811321d0:	00801484 	movi	r2,82
811321d4:	00002d06 	br	8113228c <OSTimeDlyHMSM+0x150>
    }
    if (ms > 999) {
811321d8:	e0bfff0b 	ldhu	r2,-4(fp)
811321dc:	1080fa30 	cmpltui	r2,r2,1000
811321e0:	1000021e 	bne	r2,zero,811321ec <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
811321e4:	008014c4 	movi	r2,83
811321e8:	00002806 	br	8113228c <OSTimeDlyHMSM+0x150>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
811321ec:	e0bffc03 	ldbu	r2,-16(fp)
811321f0:	10c38424 	muli	r3,r2,3600
811321f4:	e0bffd03 	ldbu	r2,-12(fp)
811321f8:	10800f24 	muli	r2,r2,60
811321fc:	1887883a 	add	r3,r3,r2
81132200:	e0bffe03 	ldbu	r2,-8(fp)
81132204:	1885883a 	add	r2,r3,r2
81132208:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
8113220c:	e0bfff0b 	ldhu	r2,-4(fp)
81132210:	10c0fa24 	muli	r3,r2,1000
81132214:	008418b4 	movhi	r2,4194
81132218:	109374c4 	addi	r2,r2,19923
8113221c:	188a383a 	mulxuu	r5,r3,r2
81132220:	1885383a 	mul	r2,r3,r2
81132224:	1011883a 	mov	r8,r2
81132228:	2813883a 	mov	r9,r5
8113222c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81132230:	2085883a 	add	r2,r4,r2
81132234:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
81132238:	e0bffb17 	ldw	r2,-20(fp)
8113223c:	1004d43a 	srli	r2,r2,16
81132240:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
81132244:	e0bffb17 	ldw	r2,-20(fp)
81132248:	10bfffcc 	andi	r2,r2,65535
8113224c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
81132250:	e0bffb17 	ldw	r2,-20(fp)
81132254:	10bfffcc 	andi	r2,r2,65535
81132258:	1009883a 	mov	r4,r2
8113225c:	11320300 	call	81132030 <OSTimeDly>
    while (loops > 0) {
81132260:	00000706 	br	81132280 <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
81132264:	01200014 	movui	r4,32768
81132268:	11320300 	call	81132030 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
8113226c:	01200014 	movui	r4,32768
81132270:	11320300 	call	81132030 <OSTimeDly>
        loops--;
81132274:	e0bffa0b 	ldhu	r2,-24(fp)
81132278:	10bfffc4 	addi	r2,r2,-1
8113227c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
81132280:	e0bffa0b 	ldhu	r2,-24(fp)
81132284:	103ff71e 	bne	r2,zero,81132264 <__reset+0xfb112264>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
81132288:	0005883a 	mov	r2,zero
}
8113228c:	e037883a 	mov	sp,fp
81132290:	dfc00117 	ldw	ra,4(sp)
81132294:	df000017 	ldw	fp,0(sp)
81132298:	dec00204 	addi	sp,sp,8
8113229c:	f800283a 	ret

811322a0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
811322a0:	defff504 	addi	sp,sp,-44
811322a4:	de00012e 	bgeu	sp,et,811322ac <OSTimeDlyResume+0xc>
811322a8:	003b68fa 	trap	3
811322ac:	dfc00a15 	stw	ra,40(sp)
811322b0:	df000915 	stw	fp,36(sp)
811322b4:	df000904 	addi	fp,sp,36
811322b8:	2005883a 	mov	r2,r4
811322bc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811322c0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
811322c4:	e0bfff03 	ldbu	r2,-4(fp)
811322c8:	10800a30 	cmpltui	r2,r2,40
811322cc:	1000021e 	bne	r2,zero,811322d8 <OSTimeDlyResume+0x38>
        return (OS_ERR_PRIO_INVALID);
811322d0:	00800a84 	movi	r2,42
811322d4:	00006406 	br	81132468 <OSTimeDlyResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811322d8:	0005303a 	rdctl	r2,status
811322dc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811322e0:	e0fffe17 	ldw	r3,-8(fp)
811322e4:	00bfff84 	movi	r2,-2
811322e8:	1884703a 	and	r2,r3,r2
811322ec:	1001703a 	wrctl	status,r2
  
  return context;
811322f0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
811322f4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
811322f8:	e0ffff03 	ldbu	r3,-4(fp)
811322fc:	00a04574 	movhi	r2,33045
81132300:	1081c704 	addi	r2,r2,1820
81132304:	18c7883a 	add	r3,r3,r3
81132308:	18c7883a 	add	r3,r3,r3
8113230c:	10c5883a 	add	r2,r2,r3
81132310:	10800017 	ldw	r2,0(r2)
81132314:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
81132318:	e0bff917 	ldw	r2,-28(fp)
8113231c:	1000061e 	bne	r2,zero,81132338 <OSTimeDlyResume+0x98>
81132320:	e0bff717 	ldw	r2,-36(fp)
81132324:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132328:	e0bff817 	ldw	r2,-32(fp)
8113232c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81132330:	008010c4 	movi	r2,67
81132334:	00004c06 	br	81132468 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {
81132338:	e0bff917 	ldw	r2,-28(fp)
8113233c:	10800058 	cmpnei	r2,r2,1
81132340:	1000061e 	bne	r2,zero,8113235c <OSTimeDlyResume+0xbc>
81132344:	e0bff717 	ldw	r2,-36(fp)
81132348:	e0bffa15 	stw	r2,-24(fp)
8113234c:	e0bffa17 	ldw	r2,-24(fp)
81132350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81132354:	008010c4 	movi	r2,67
81132358:	00004306 	br	81132468 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
8113235c:	e0bff917 	ldw	r2,-28(fp)
81132360:	10800b8b 	ldhu	r2,46(r2)
81132364:	10bfffcc 	andi	r2,r2,65535
81132368:	1000061e 	bne	r2,zero,81132384 <OSTimeDlyResume+0xe4>
8113236c:	e0bff717 	ldw	r2,-36(fp)
81132370:	e0bffb15 	stw	r2,-20(fp)
81132374:	e0bffb17 	ldw	r2,-20(fp)
81132378:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
8113237c:	00801404 	movi	r2,80
81132380:	00003906 	br	81132468 <OSTimeDlyResume+0x1c8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
81132384:	e0bff917 	ldw	r2,-28(fp)
81132388:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8113238c:	e0bff917 	ldw	r2,-28(fp)
81132390:	10800c03 	ldbu	r2,48(r2)
81132394:	10803fcc 	andi	r2,r2,255
81132398:	10800dcc 	andi	r2,r2,55
8113239c:	10000b26 	beq	r2,zero,811323cc <OSTimeDlyResume+0x12c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
811323a0:	e0bff917 	ldw	r2,-28(fp)
811323a4:	10c00c03 	ldbu	r3,48(r2)
811323a8:	00bff204 	movi	r2,-56
811323ac:	1884703a 	and	r2,r3,r2
811323b0:	1007883a 	mov	r3,r2
811323b4:	e0bff917 	ldw	r2,-28(fp)
811323b8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
811323bc:	e0bff917 	ldw	r2,-28(fp)
811323c0:	00c00044 	movi	r3,1
811323c4:	10c00c45 	stb	r3,49(r2)
811323c8:	00000206 	br	811323d4 <OSTimeDlyResume+0x134>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
811323cc:	e0bff917 	ldw	r2,-28(fp)
811323d0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
811323d4:	e0bff917 	ldw	r2,-28(fp)
811323d8:	10800c03 	ldbu	r2,48(r2)
811323dc:	10803fcc 	andi	r2,r2,255
811323e0:	1080020c 	andi	r2,r2,8
811323e4:	10001b1e 	bne	r2,zero,81132454 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
811323e8:	e0bff917 	ldw	r2,-28(fp)
811323ec:	10c00d83 	ldbu	r3,54(r2)
811323f0:	d0a08703 	ldbu	r2,-32228(gp)
811323f4:	1884b03a 	or	r2,r3,r2
811323f8:	d0a08705 	stb	r2,-32228(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811323fc:	e0bff917 	ldw	r2,-28(fp)
81132400:	10800d03 	ldbu	r2,52(r2)
81132404:	10c03fcc 	andi	r3,r2,255
81132408:	e0bff917 	ldw	r2,-28(fp)
8113240c:	10800d03 	ldbu	r2,52(r2)
81132410:	11003fcc 	andi	r4,r2,255
81132414:	d0a08744 	addi	r2,gp,-32227
81132418:	2085883a 	add	r2,r4,r2
8113241c:	11000003 	ldbu	r4,0(r2)
81132420:	e0bff917 	ldw	r2,-28(fp)
81132424:	10800d43 	ldbu	r2,53(r2)
81132428:	2084b03a 	or	r2,r4,r2
8113242c:	1009883a 	mov	r4,r2
81132430:	d0a08744 	addi	r2,gp,-32227
81132434:	1885883a 	add	r2,r3,r2
81132438:	11000005 	stb	r4,0(r2)
8113243c:	e0bff717 	ldw	r2,-36(fp)
81132440:	e0bffc15 	stw	r2,-16(fp)
81132444:	e0bffc17 	ldw	r2,-16(fp)
81132448:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
8113244c:	112b2f40 	call	8112b2f4 <OS_Sched>
81132450:	00000406 	br	81132464 <OSTimeDlyResume+0x1c4>
81132454:	e0bff717 	ldw	r2,-36(fp)
81132458:	e0bffd15 	stw	r2,-12(fp)
8113245c:	e0bffd17 	ldw	r2,-12(fp)
81132460:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
81132464:	0005883a 	mov	r2,zero
}
81132468:	e037883a 	mov	sp,fp
8113246c:	dfc00117 	ldw	ra,4(sp)
81132470:	df000017 	ldw	fp,0(sp)
81132474:	dec00204 	addi	sp,sp,8
81132478:	f800283a 	ret

8113247c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
8113247c:	defffb04 	addi	sp,sp,-20
81132480:	de00012e 	bgeu	sp,et,81132488 <OSTimeGet+0xc>
81132484:	003b68fa 	trap	3
81132488:	df000415 	stw	fp,16(sp)
8113248c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81132490:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132494:	0005303a 	rdctl	r2,status
81132498:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113249c:	e0fffe17 	ldw	r3,-8(fp)
811324a0:	00bfff84 	movi	r2,-2
811324a4:	1884703a 	and	r2,r3,r2
811324a8:	1001703a 	wrctl	status,r2
  
  return context;
811324ac:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
811324b0:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
811324b4:	d0a08d17 	ldw	r2,-32204(gp)
811324b8:	e0bffd15 	stw	r2,-12(fp)
811324bc:	e0bffc17 	ldw	r2,-16(fp)
811324c0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811324c4:	e0bfff17 	ldw	r2,-4(fp)
811324c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
811324cc:	e0bffd17 	ldw	r2,-12(fp)
}
811324d0:	e037883a 	mov	sp,fp
811324d4:	df000017 	ldw	fp,0(sp)
811324d8:	dec00104 	addi	sp,sp,4
811324dc:	f800283a 	ret

811324e0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
811324e0:	defffb04 	addi	sp,sp,-20
811324e4:	de00012e 	bgeu	sp,et,811324ec <OSTimeSet+0xc>
811324e8:	003b68fa 	trap	3
811324ec:	df000415 	stw	fp,16(sp)
811324f0:	df000404 	addi	fp,sp,16
811324f4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811324f8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811324fc:	0005303a 	rdctl	r2,status
81132500:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132504:	e0fffd17 	ldw	r3,-12(fp)
81132508:	00bfff84 	movi	r2,-2
8113250c:	1884703a 	and	r2,r3,r2
81132510:	1001703a 	wrctl	status,r2
  
  return context;
81132514:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
81132518:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
8113251c:	e0bfff17 	ldw	r2,-4(fp)
81132520:	d0a08d15 	stw	r2,-32204(gp)
81132524:	e0bffc17 	ldw	r2,-16(fp)
81132528:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113252c:	e0bffe17 	ldw	r2,-8(fp)
81132530:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81132534:	0001883a 	nop
81132538:	e037883a 	mov	sp,fp
8113253c:	df000017 	ldw	fp,0(sp)
81132540:	dec00104 	addi	sp,sp,4
81132544:	f800283a 	ret

81132548 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
81132548:	defff804 	addi	sp,sp,-32
8113254c:	de00012e 	bgeu	sp,et,81132554 <OSTmrCreate+0xc>
81132550:	003b68fa 	trap	3
81132554:	dfc00715 	stw	ra,28(sp)
81132558:	df000615 	stw	fp,24(sp)
8113255c:	df000604 	addi	fp,sp,24
81132560:	e13ffc15 	stw	r4,-16(fp)
81132564:	e17ffd15 	stw	r5,-12(fp)
81132568:	3005883a 	mov	r2,r6
8113256c:	e1ffff15 	stw	r7,-4(fp)
81132570:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81132574:	e0800417 	ldw	r2,16(fp)
81132578:	1000021e 	bne	r2,zero,81132584 <OSTmrCreate+0x3c>
        return ((OS_TMR *)0);
8113257c:	0005883a 	mov	r2,zero
81132580:	00005d06 	br	811326f8 <OSTmrCreate+0x1b0>
    }
    switch (opt) {
81132584:	e0bffe03 	ldbu	r2,-8(fp)
81132588:	10c00060 	cmpeqi	r3,r2,1
8113258c:	1800091e 	bne	r3,zero,811325b4 <OSTmrCreate+0x6c>
81132590:	108000a0 	cmpeqi	r2,r2,2
81132594:	10000e26 	beq	r2,zero,811325d0 <OSTmrCreate+0x88>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
81132598:	e0bffd17 	ldw	r2,-12(fp)
8113259c:	1000111e 	bne	r2,zero,811325e4 <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
811325a0:	e0800417 	ldw	r2,16(fp)
811325a4:	00ffe0c4 	movi	r3,-125
811325a8:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
811325ac:	0005883a 	mov	r2,zero
811325b0:	00005106 	br	811326f8 <OSTmrCreate+0x1b0>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
811325b4:	e0bffc17 	ldw	r2,-16(fp)
811325b8:	10000c1e 	bne	r2,zero,811325ec <OSTmrCreate+0xa4>
                 *perr = OS_ERR_TMR_INVALID_DLY;
811325bc:	e0800417 	ldw	r2,16(fp)
811325c0:	00ffe084 	movi	r3,-126
811325c4:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
811325c8:	0005883a 	mov	r2,zero
811325cc:	00004a06 	br	811326f8 <OSTmrCreate+0x1b0>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
811325d0:	e0800417 	ldw	r2,16(fp)
811325d4:	00ffe104 	movi	r3,-124
811325d8:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
811325dc:	0005883a 	mov	r2,zero
811325e0:	00004506 	br	811326f8 <OSTmrCreate+0x1b0>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
811325e4:	0001883a 	nop
811325e8:	00000106 	br	811325f0 <OSTmrCreate+0xa8>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
811325ec:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
811325f0:	d0a08a03 	ldbu	r2,-32216(gp)
811325f4:	10803fcc 	andi	r2,r2,255
811325f8:	10000526 	beq	r2,zero,81132610 <OSTmrCreate+0xc8>
        *perr  = OS_ERR_TMR_ISR;
811325fc:	e0800417 	ldw	r2,16(fp)
81132600:	00ffe2c4 	movi	r3,-117
81132604:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81132608:	0005883a 	mov	r2,zero
8113260c:	00003a06 	br	811326f8 <OSTmrCreate+0x1b0>
    }
    OSTmr_Lock();
81132610:	11335000 	call	81133500 <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
81132614:	1132fa00 	call	81132fa0 <OSTmr_Alloc>
81132618:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
8113261c:	e0bffa17 	ldw	r2,-24(fp)
81132620:	1000061e 	bne	r2,zero,8113263c <OSTmrCreate+0xf4>
        OSTmr_Unlock();
81132624:	11335440 	call	81133544 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
81132628:	e0800417 	ldw	r2,16(fp)
8113262c:	00ffe184 	movi	r3,-122
81132630:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81132634:	0005883a 	mov	r2,zero
81132638:	00002f06 	br	811326f8 <OSTmrCreate+0x1b0>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
8113263c:	e0bffa17 	ldw	r2,-24(fp)
81132640:	00c00044 	movi	r3,1
81132644:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
81132648:	e0bffa17 	ldw	r2,-24(fp)
8113264c:	e0fffc17 	ldw	r3,-16(fp)
81132650:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
81132654:	e0bffa17 	ldw	r2,-24(fp)
81132658:	e0fffd17 	ldw	r3,-12(fp)
8113265c:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
81132660:	e0bffa17 	ldw	r2,-24(fp)
81132664:	e0fffe03 	ldbu	r3,-8(fp)
81132668:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
8113266c:	e0bffa17 	ldw	r2,-24(fp)
81132670:	e0ffff17 	ldw	r3,-4(fp)
81132674:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
81132678:	e0bffa17 	ldw	r2,-24(fp)
8113267c:	e0c00217 	ldw	r3,8(fp)
81132680:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
81132684:	e0800317 	ldw	r2,12(fp)
81132688:	10001726 	beq	r2,zero,811326e8 <OSTmrCreate+0x1a0>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
8113268c:	e1000317 	ldw	r4,12(fp)
81132690:	112b4c40 	call	8112b4c4 <OS_StrLen>
81132694:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
81132698:	e0bffb03 	ldbu	r2,-20(fp)
8113269c:	10800428 	cmpgeui	r2,r2,16
811326a0:	1000061e 	bne	r2,zero,811326bc <OSTmrCreate+0x174>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
811326a4:	e0bffa17 	ldw	r2,-24(fp)
811326a8:	10800804 	addi	r2,r2,32
811326ac:	e1400317 	ldw	r5,12(fp)
811326b0:	1009883a 	mov	r4,r2
811326b4:	112b4480 	call	8112b448 <OS_StrCopy>
811326b8:	00000b06 	br	811326e8 <OSTmrCreate+0x1a0>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
811326bc:	e0bffa17 	ldw	r2,-24(fp)
811326c0:	00c008c4 	movi	r3,35
811326c4:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
811326c8:	e0bffa17 	ldw	r2,-24(fp)
811326cc:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
811326d0:	e0800417 	ldw	r2,16(fp)
811326d4:	00ffe304 	movi	r3,-116
811326d8:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
811326dc:	11335440 	call	81133544 <OSTmr_Unlock>
            return (ptmr);
811326e0:	e0bffa17 	ldw	r2,-24(fp)
811326e4:	00000406 	br	811326f8 <OSTmrCreate+0x1b0>
        }
    }
#endif
    OSTmr_Unlock();
811326e8:	11335440 	call	81133544 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
811326ec:	e0800417 	ldw	r2,16(fp)
811326f0:	10000005 	stb	zero,0(r2)
    return (ptmr);
811326f4:	e0bffa17 	ldw	r2,-24(fp)
}
811326f8:	e037883a 	mov	sp,fp
811326fc:	dfc00117 	ldw	ra,4(sp)
81132700:	df000017 	ldw	fp,0(sp)
81132704:	dec00204 	addi	sp,sp,8
81132708:	f800283a 	ret

8113270c <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
8113270c:	defffc04 	addi	sp,sp,-16
81132710:	de00012e 	bgeu	sp,et,81132718 <OSTmrDel+0xc>
81132714:	003b68fa 	trap	3
81132718:	dfc00315 	stw	ra,12(sp)
8113271c:	df000215 	stw	fp,8(sp)
81132720:	df000204 	addi	fp,sp,8
81132724:	e13ffe15 	stw	r4,-8(fp)
81132728:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8113272c:	e0bfff17 	ldw	r2,-4(fp)
81132730:	1000021e 	bne	r2,zero,8113273c <OSTmrDel+0x30>
        return (OS_FALSE);
81132734:	0005883a 	mov	r2,zero
81132738:	00003f06 	br	81132838 <OSTmrDel+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8113273c:	e0bffe17 	ldw	r2,-8(fp)
81132740:	1000051e 	bne	r2,zero,81132758 <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81132744:	e0bfff17 	ldw	r2,-4(fp)
81132748:	00ffe284 	movi	r3,-118
8113274c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132750:	0005883a 	mov	r2,zero
81132754:	00003806 	br	81132838 <OSTmrDel+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81132758:	e0bffe17 	ldw	r2,-8(fp)
8113275c:	10800003 	ldbu	r2,0(r2)
81132760:	10803fcc 	andi	r2,r2,255
81132764:	10801920 	cmpeqi	r2,r2,100
81132768:	1000051e 	bne	r2,zero,81132780 <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8113276c:	e0bfff17 	ldw	r2,-4(fp)
81132770:	00ffe244 	movi	r3,-119
81132774:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132778:	0005883a 	mov	r2,zero
8113277c:	00002e06 	br	81132838 <OSTmrDel+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81132780:	d0a08a03 	ldbu	r2,-32216(gp)
81132784:	10803fcc 	andi	r2,r2,255
81132788:	10000526 	beq	r2,zero,811327a0 <OSTmrDel+0x94>
        *perr  = OS_ERR_TMR_ISR;
8113278c:	e0bfff17 	ldw	r2,-4(fp)
81132790:	00ffe2c4 	movi	r3,-117
81132794:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132798:	0005883a 	mov	r2,zero
8113279c:	00002606 	br	81132838 <OSTmrDel+0x12c>
    }
    OSTmr_Lock();
811327a0:	11335000 	call	81133500 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811327a4:	e0bffe17 	ldw	r2,-8(fp)
811327a8:	10800c43 	ldbu	r2,49(r2)
811327ac:	10803fcc 	andi	r2,r2,255
811327b0:	10c000c8 	cmpgei	r3,r2,3
811327b4:	1800031e 	bne	r3,zero,811327c4 <OSTmrDel+0xb8>
811327b8:	00800d16 	blt	zero,r2,811327f0 <OSTmrDel+0xe4>
811327bc:	10001326 	beq	r2,zero,8113280c <OSTmrDel+0x100>
811327c0:	00001806 	br	81132824 <OSTmrDel+0x118>
811327c4:	108000e0 	cmpeqi	r2,r2,3
811327c8:	10001626 	beq	r2,zero,81132824 <OSTmrDel+0x118>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
811327cc:	e13ffe17 	ldw	r4,-8(fp)
811327d0:	11334040 	call	81133404 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
811327d4:	e13ffe17 	ldw	r4,-8(fp)
811327d8:	11330140 	call	81133014 <OSTmr_Free>
             OSTmr_Unlock();
811327dc:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811327e0:	e0bfff17 	ldw	r2,-4(fp)
811327e4:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
811327e8:	00800044 	movi	r2,1
811327ec:	00001206 	br	81132838 <OSTmrDel+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
811327f0:	e13ffe17 	ldw	r4,-8(fp)
811327f4:	11330140 	call	81133014 <OSTmr_Free>
             OSTmr_Unlock();
811327f8:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811327fc:	e0bfff17 	ldw	r2,-4(fp)
81132800:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81132804:	00800044 	movi	r2,1
81132808:	00000b06 	br	81132838 <OSTmrDel+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
8113280c:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81132810:	e0bfff17 	ldw	r2,-4(fp)
81132814:	00ffe1c4 	movi	r3,-121
81132818:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8113281c:	0005883a 	mov	r2,zero
81132820:	00000506 	br	81132838 <OSTmrDel+0x12c>

        default:
             OSTmr_Unlock();
81132824:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81132828:	e0bfff17 	ldw	r2,-4(fp)
8113282c:	00ffe344 	movi	r3,-115
81132830:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132834:	0005883a 	mov	r2,zero
    }
}
81132838:	e037883a 	mov	sp,fp
8113283c:	dfc00117 	ldw	ra,4(sp)
81132840:	df000017 	ldw	fp,0(sp)
81132844:	dec00204 	addi	sp,sp,8
81132848:	f800283a 	ret

8113284c <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
8113284c:	defffa04 	addi	sp,sp,-24
81132850:	de00012e 	bgeu	sp,et,81132858 <OSTmrNameGet+0xc>
81132854:	003b68fa 	trap	3
81132858:	dfc00515 	stw	ra,20(sp)
8113285c:	df000415 	stw	fp,16(sp)
81132860:	df000404 	addi	fp,sp,16
81132864:	e13ffd15 	stw	r4,-12(fp)
81132868:	e17ffe15 	stw	r5,-8(fp)
8113286c:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81132870:	e0bfff17 	ldw	r2,-4(fp)
81132874:	1000021e 	bne	r2,zero,81132880 <OSTmrNameGet+0x34>
        return (0);
81132878:	0005883a 	mov	r2,zero
8113287c:	00003e06 	br	81132978 <OSTmrNameGet+0x12c>
    }
    if (pdest == (INT8U *)0) {
81132880:	e0bffe17 	ldw	r2,-8(fp)
81132884:	1000051e 	bne	r2,zero,8113289c <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
81132888:	e0bfff17 	ldw	r2,-4(fp)
8113288c:	00ffe204 	movi	r3,-120
81132890:	10c00005 	stb	r3,0(r2)
        return (0);
81132894:	0005883a 	mov	r2,zero
81132898:	00003706 	br	81132978 <OSTmrNameGet+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8113289c:	e0bffd17 	ldw	r2,-12(fp)
811328a0:	1000051e 	bne	r2,zero,811328b8 <OSTmrNameGet+0x6c>
        *perr = OS_ERR_TMR_INVALID;
811328a4:	e0bfff17 	ldw	r2,-4(fp)
811328a8:	00ffe284 	movi	r3,-118
811328ac:	10c00005 	stb	r3,0(r2)
        return (0);
811328b0:	0005883a 	mov	r2,zero
811328b4:	00003006 	br	81132978 <OSTmrNameGet+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
811328b8:	e0bffd17 	ldw	r2,-12(fp)
811328bc:	10800003 	ldbu	r2,0(r2)
811328c0:	10803fcc 	andi	r2,r2,255
811328c4:	10801920 	cmpeqi	r2,r2,100
811328c8:	1000051e 	bne	r2,zero,811328e0 <OSTmrNameGet+0x94>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811328cc:	e0bfff17 	ldw	r2,-4(fp)
811328d0:	00ffe244 	movi	r3,-119
811328d4:	10c00005 	stb	r3,0(r2)
        return (0);
811328d8:	0005883a 	mov	r2,zero
811328dc:	00002606 	br	81132978 <OSTmrNameGet+0x12c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
811328e0:	d0a08a03 	ldbu	r2,-32216(gp)
811328e4:	10803fcc 	andi	r2,r2,255
811328e8:	10000526 	beq	r2,zero,81132900 <OSTmrNameGet+0xb4>
        *perr = OS_ERR_NAME_GET_ISR;
811328ec:	e0bfff17 	ldw	r2,-4(fp)
811328f0:	00c00444 	movi	r3,17
811328f4:	10c00005 	stb	r3,0(r2)
        return (0);
811328f8:	0005883a 	mov	r2,zero
811328fc:	00001e06 	br	81132978 <OSTmrNameGet+0x12c>
    }
    OSTmr_Lock();
81132900:	11335000 	call	81133500 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81132904:	e0bffd17 	ldw	r2,-12(fp)
81132908:	10800c43 	ldbu	r2,49(r2)
8113290c:	10803fcc 	andi	r2,r2,255
81132910:	10000e26 	beq	r2,zero,8113294c <OSTmrNameGet+0x100>
81132914:	10001316 	blt	r2,zero,81132964 <OSTmrNameGet+0x118>
81132918:	10800108 	cmpgei	r2,r2,4
8113291c:	1000111e 	bne	r2,zero,81132964 <OSTmrNameGet+0x118>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
81132920:	e0bffd17 	ldw	r2,-12(fp)
81132924:	10800804 	addi	r2,r2,32
81132928:	100b883a 	mov	r5,r2
8113292c:	e13ffe17 	ldw	r4,-8(fp)
81132930:	112b4480 	call	8112b448 <OS_StrCopy>
81132934:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
81132938:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8113293c:	e0bfff17 	ldw	r2,-4(fp)
81132940:	10000005 	stb	zero,0(r2)
             return (len);
81132944:	e0bffc03 	ldbu	r2,-16(fp)
81132948:	00000b06 	br	81132978 <OSTmrNameGet+0x12c>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
8113294c:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81132950:	e0bfff17 	ldw	r2,-4(fp)
81132954:	00ffe1c4 	movi	r3,-121
81132958:	10c00005 	stb	r3,0(r2)
             return (0);
8113295c:	0005883a 	mov	r2,zero
81132960:	00000506 	br	81132978 <OSTmrNameGet+0x12c>

        default:
             OSTmr_Unlock();
81132964:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81132968:	e0bfff17 	ldw	r2,-4(fp)
8113296c:	00ffe344 	movi	r3,-115
81132970:	10c00005 	stb	r3,0(r2)
             return (0);
81132974:	0005883a 	mov	r2,zero
    }
}
81132978:	e037883a 	mov	sp,fp
8113297c:	dfc00117 	ldw	ra,4(sp)
81132980:	df000017 	ldw	fp,0(sp)
81132984:	dec00204 	addi	sp,sp,8
81132988:	f800283a 	ret

8113298c <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
8113298c:	defffb04 	addi	sp,sp,-20
81132990:	de00012e 	bgeu	sp,et,81132998 <OSTmrRemainGet+0xc>
81132994:	003b68fa 	trap	3
81132998:	dfc00415 	stw	ra,16(sp)
8113299c:	df000315 	stw	fp,12(sp)
811329a0:	df000304 	addi	fp,sp,12
811329a4:	e13ffe15 	stw	r4,-8(fp)
811329a8:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
811329ac:	e0bfff17 	ldw	r2,-4(fp)
811329b0:	1000021e 	bne	r2,zero,811329bc <OSTmrRemainGet+0x30>
        return (0);
811329b4:	0005883a 	mov	r2,zero
811329b8:	00005d06 	br	81132b30 <OSTmrRemainGet+0x1a4>
    }
    if (ptmr == (OS_TMR *)0) {
811329bc:	e0bffe17 	ldw	r2,-8(fp)
811329c0:	1000051e 	bne	r2,zero,811329d8 <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
811329c4:	e0bfff17 	ldw	r2,-4(fp)
811329c8:	00ffe284 	movi	r3,-118
811329cc:	10c00005 	stb	r3,0(r2)
        return (0);
811329d0:	0005883a 	mov	r2,zero
811329d4:	00005606 	br	81132b30 <OSTmrRemainGet+0x1a4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
811329d8:	e0bffe17 	ldw	r2,-8(fp)
811329dc:	10800003 	ldbu	r2,0(r2)
811329e0:	10803fcc 	andi	r2,r2,255
811329e4:	10801920 	cmpeqi	r2,r2,100
811329e8:	1000051e 	bne	r2,zero,81132a00 <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811329ec:	e0bfff17 	ldw	r2,-4(fp)
811329f0:	00ffe244 	movi	r3,-119
811329f4:	10c00005 	stb	r3,0(r2)
        return (0);
811329f8:	0005883a 	mov	r2,zero
811329fc:	00004c06 	br	81132b30 <OSTmrRemainGet+0x1a4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
81132a00:	d0a08a03 	ldbu	r2,-32216(gp)
81132a04:	10803fcc 	andi	r2,r2,255
81132a08:	10000526 	beq	r2,zero,81132a20 <OSTmrRemainGet+0x94>
        *perr = OS_ERR_TMR_ISR;
81132a0c:	e0bfff17 	ldw	r2,-4(fp)
81132a10:	00ffe2c4 	movi	r3,-117
81132a14:	10c00005 	stb	r3,0(r2)
        return (0);
81132a18:	0005883a 	mov	r2,zero
81132a1c:	00004406 	br	81132b30 <OSTmrRemainGet+0x1a4>
    }
    OSTmr_Lock();
81132a20:	11335000 	call	81133500 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81132a24:	e0bffe17 	ldw	r2,-8(fp)
81132a28:	10800c43 	ldbu	r2,49(r2)
81132a2c:	10803fcc 	andi	r2,r2,255
81132a30:	10c00060 	cmpeqi	r3,r2,1
81132a34:	1800121e 	bne	r3,zero,81132a80 <OSTmrRemainGet+0xf4>
81132a38:	10c00088 	cmpgei	r3,r2,2
81132a3c:	1800021e 	bne	r3,zero,81132a48 <OSTmrRemainGet+0xbc>
81132a40:	10003026 	beq	r2,zero,81132b04 <OSTmrRemainGet+0x178>
81132a44:	00003506 	br	81132b1c <OSTmrRemainGet+0x190>
81132a48:	10c000a0 	cmpeqi	r3,r2,2
81132a4c:	1800281e 	bne	r3,zero,81132af0 <OSTmrRemainGet+0x164>
81132a50:	108000e0 	cmpeqi	r2,r2,3
81132a54:	10003126 	beq	r2,zero,81132b1c <OSTmrRemainGet+0x190>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
81132a58:	e0bffe17 	ldw	r2,-8(fp)
81132a5c:	10c00517 	ldw	r3,20(r2)
81132a60:	d0a08c17 	ldw	r2,-32208(gp)
81132a64:	1885c83a 	sub	r2,r3,r2
81132a68:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
81132a6c:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
81132a70:	e0bfff17 	ldw	r2,-4(fp)
81132a74:	10000005 	stb	zero,0(r2)
             return (remain);
81132a78:	e0bffd17 	ldw	r2,-12(fp)
81132a7c:	00002c06 	br	81132b30 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
81132a80:	e0bffe17 	ldw	r2,-8(fp)
81132a84:	10800c03 	ldbu	r2,48(r2)
81132a88:	10803fcc 	andi	r2,r2,255
81132a8c:	108000a0 	cmpeqi	r2,r2,2
81132a90:	10000e26 	beq	r2,zero,81132acc <OSTmrRemainGet+0x140>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
81132a94:	e0bffe17 	ldw	r2,-8(fp)
81132a98:	10800617 	ldw	r2,24(r2)
81132a9c:	1000041e 	bne	r2,zero,81132ab0 <OSTmrRemainGet+0x124>
                          remain = ptmr->OSTmrPeriod;
81132aa0:	e0bffe17 	ldw	r2,-8(fp)
81132aa4:	10800717 	ldw	r2,28(r2)
81132aa8:	e0bffd15 	stw	r2,-12(fp)
81132aac:	00000306 	br	81132abc <OSTmrRemainGet+0x130>
                      } else {
                          remain = ptmr->OSTmrDly;
81132ab0:	e0bffe17 	ldw	r2,-8(fp)
81132ab4:	10800617 	ldw	r2,24(r2)
81132ab8:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
81132abc:	11335440 	call	81133544 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
81132ac0:	e0bfff17 	ldw	r2,-4(fp)
81132ac4:	10000005 	stb	zero,0(r2)
                      break;
81132ac8:	00000706 	br	81132ae8 <OSTmrRemainGet+0x15c>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
81132acc:	e0bffe17 	ldw	r2,-8(fp)
81132ad0:	10800617 	ldw	r2,24(r2)
81132ad4:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
81132ad8:	11335440 	call	81133544 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
81132adc:	e0bfff17 	ldw	r2,-4(fp)
81132ae0:	10000005 	stb	zero,0(r2)
                      break;
81132ae4:	0001883a 	nop
             }
             return (remain);
81132ae8:	e0bffd17 	ldw	r2,-12(fp)
81132aec:	00001006 	br	81132b30 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
81132af0:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81132af4:	e0bfff17 	ldw	r2,-4(fp)
81132af8:	10000005 	stb	zero,0(r2)
             return (0);
81132afc:	0005883a 	mov	r2,zero
81132b00:	00000b06 	br	81132b30 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
81132b04:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81132b08:	e0bfff17 	ldw	r2,-4(fp)
81132b0c:	00ffe1c4 	movi	r3,-121
81132b10:	10c00005 	stb	r3,0(r2)
             return (0);
81132b14:	0005883a 	mov	r2,zero
81132b18:	00000506 	br	81132b30 <OSTmrRemainGet+0x1a4>

        default:
             OSTmr_Unlock();
81132b1c:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81132b20:	e0bfff17 	ldw	r2,-4(fp)
81132b24:	00ffe344 	movi	r3,-115
81132b28:	10c00005 	stb	r3,0(r2)
             return (0);
81132b2c:	0005883a 	mov	r2,zero
    }
}
81132b30:	e037883a 	mov	sp,fp
81132b34:	dfc00117 	ldw	ra,4(sp)
81132b38:	df000017 	ldw	fp,0(sp)
81132b3c:	dec00204 	addi	sp,sp,8
81132b40:	f800283a 	ret

81132b44 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
81132b44:	defffb04 	addi	sp,sp,-20
81132b48:	de00012e 	bgeu	sp,et,81132b50 <OSTmrStateGet+0xc>
81132b4c:	003b68fa 	trap	3
81132b50:	dfc00415 	stw	ra,16(sp)
81132b54:	df000315 	stw	fp,12(sp)
81132b58:	df000304 	addi	fp,sp,12
81132b5c:	e13ffe15 	stw	r4,-8(fp)
81132b60:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81132b64:	e0bfff17 	ldw	r2,-4(fp)
81132b68:	1000021e 	bne	r2,zero,81132b74 <OSTmrStateGet+0x30>
        return (0);
81132b6c:	0005883a 	mov	r2,zero
81132b70:	00002a06 	br	81132c1c <OSTmrStateGet+0xd8>
    }
    if (ptmr == (OS_TMR *)0) {
81132b74:	e0bffe17 	ldw	r2,-8(fp)
81132b78:	1000051e 	bne	r2,zero,81132b90 <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81132b7c:	e0bfff17 	ldw	r2,-4(fp)
81132b80:	00ffe284 	movi	r3,-118
81132b84:	10c00005 	stb	r3,0(r2)
        return (0);
81132b88:	0005883a 	mov	r2,zero
81132b8c:	00002306 	br	81132c1c <OSTmrStateGet+0xd8>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
81132b90:	e0bffe17 	ldw	r2,-8(fp)
81132b94:	10800003 	ldbu	r2,0(r2)
81132b98:	10803fcc 	andi	r2,r2,255
81132b9c:	10801920 	cmpeqi	r2,r2,100
81132ba0:	1000051e 	bne	r2,zero,81132bb8 <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81132ba4:	e0bfff17 	ldw	r2,-4(fp)
81132ba8:	00ffe244 	movi	r3,-119
81132bac:	10c00005 	stb	r3,0(r2)
        return (0);
81132bb0:	0005883a 	mov	r2,zero
81132bb4:	00001906 	br	81132c1c <OSTmrStateGet+0xd8>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
81132bb8:	d0a08a03 	ldbu	r2,-32216(gp)
81132bbc:	10803fcc 	andi	r2,r2,255
81132bc0:	10000526 	beq	r2,zero,81132bd8 <OSTmrStateGet+0x94>
        *perr = OS_ERR_TMR_ISR;
81132bc4:	e0bfff17 	ldw	r2,-4(fp)
81132bc8:	00ffe2c4 	movi	r3,-117
81132bcc:	10c00005 	stb	r3,0(r2)
        return (0);
81132bd0:	0005883a 	mov	r2,zero
81132bd4:	00001106 	br	81132c1c <OSTmrStateGet+0xd8>
    }
    OSTmr_Lock();
81132bd8:	11335000 	call	81133500 <OSTmr_Lock>
    state = ptmr->OSTmrState;
81132bdc:	e0bffe17 	ldw	r2,-8(fp)
81132be0:	10800c43 	ldbu	r2,49(r2)
81132be4:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
81132be8:	e0bffd03 	ldbu	r2,-12(fp)
81132bec:	1005883a 	mov	r2,r2
81132bf0:	10800128 	cmpgeui	r2,r2,4
81132bf4:	1000031e 	bne	r2,zero,81132c04 <OSTmrStateGet+0xc0>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
81132bf8:	e0bfff17 	ldw	r2,-4(fp)
81132bfc:	10000005 	stb	zero,0(r2)
             break;
81132c00:	00000406 	br	81132c14 <OSTmrStateGet+0xd0>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
81132c04:	e0bfff17 	ldw	r2,-4(fp)
81132c08:	00ffe344 	movi	r3,-115
81132c0c:	10c00005 	stb	r3,0(r2)
             break;
81132c10:	0001883a 	nop
    }
    OSTmr_Unlock();
81132c14:	11335440 	call	81133544 <OSTmr_Unlock>
    return (state);
81132c18:	e0bffd03 	ldbu	r2,-12(fp)
}
81132c1c:	e037883a 	mov	sp,fp
81132c20:	dfc00117 	ldw	ra,4(sp)
81132c24:	df000017 	ldw	fp,0(sp)
81132c28:	dec00204 	addi	sp,sp,8
81132c2c:	f800283a 	ret

81132c30 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
81132c30:	defffc04 	addi	sp,sp,-16
81132c34:	de00012e 	bgeu	sp,et,81132c3c <OSTmrStart+0xc>
81132c38:	003b68fa 	trap	3
81132c3c:	dfc00315 	stw	ra,12(sp)
81132c40:	df000215 	stw	fp,8(sp)
81132c44:	df000204 	addi	fp,sp,8
81132c48:	e13ffe15 	stw	r4,-8(fp)
81132c4c:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81132c50:	e0bfff17 	ldw	r2,-4(fp)
81132c54:	1000021e 	bne	r2,zero,81132c60 <OSTmrStart+0x30>
        return (OS_FALSE);
81132c58:	0005883a 	mov	r2,zero
81132c5c:	00004106 	br	81132d64 <OSTmrStart+0x134>
    }
    if (ptmr == (OS_TMR *)0) {
81132c60:	e0bffe17 	ldw	r2,-8(fp)
81132c64:	1000051e 	bne	r2,zero,81132c7c <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81132c68:	e0bfff17 	ldw	r2,-4(fp)
81132c6c:	00ffe284 	movi	r3,-118
81132c70:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132c74:	0005883a 	mov	r2,zero
81132c78:	00003a06 	br	81132d64 <OSTmrStart+0x134>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81132c7c:	e0bffe17 	ldw	r2,-8(fp)
81132c80:	10800003 	ldbu	r2,0(r2)
81132c84:	10803fcc 	andi	r2,r2,255
81132c88:	10801920 	cmpeqi	r2,r2,100
81132c8c:	1000051e 	bne	r2,zero,81132ca4 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81132c90:	e0bfff17 	ldw	r2,-4(fp)
81132c94:	00ffe244 	movi	r3,-119
81132c98:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132c9c:	0005883a 	mov	r2,zero
81132ca0:	00003006 	br	81132d64 <OSTmrStart+0x134>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81132ca4:	d0a08a03 	ldbu	r2,-32216(gp)
81132ca8:	10803fcc 	andi	r2,r2,255
81132cac:	10000526 	beq	r2,zero,81132cc4 <OSTmrStart+0x94>
        *perr  = OS_ERR_TMR_ISR;
81132cb0:	e0bfff17 	ldw	r2,-4(fp)
81132cb4:	00ffe2c4 	movi	r3,-117
81132cb8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132cbc:	0005883a 	mov	r2,zero
81132cc0:	00002806 	br	81132d64 <OSTmrStart+0x134>
    }
    OSTmr_Lock();
81132cc4:	11335000 	call	81133500 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81132cc8:	e0bffe17 	ldw	r2,-8(fp)
81132ccc:	10800c43 	ldbu	r2,49(r2)
81132cd0:	10803fcc 	andi	r2,r2,255
81132cd4:	10c000c8 	cmpgei	r3,r2,3
81132cd8:	1800031e 	bne	r3,zero,81132ce8 <OSTmrStart+0xb8>
81132cdc:	00800e16 	blt	zero,r2,81132d18 <OSTmrStart+0xe8>
81132ce0:	10001526 	beq	r2,zero,81132d38 <OSTmrStart+0x108>
81132ce4:	00001a06 	br	81132d50 <OSTmrStart+0x120>
81132ce8:	108000e0 	cmpeqi	r2,r2,3
81132cec:	10001826 	beq	r2,zero,81132d50 <OSTmrStart+0x120>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
81132cf0:	e13ffe17 	ldw	r4,-8(fp)
81132cf4:	11334040 	call	81133404 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
81132cf8:	000b883a 	mov	r5,zero
81132cfc:	e13ffe17 	ldw	r4,-8(fp)
81132d00:	11332b40 	call	811332b4 <OSTmr_Link>
             OSTmr_Unlock();
81132d04:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81132d08:	e0bfff17 	ldw	r2,-4(fp)
81132d0c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81132d10:	00800044 	movi	r2,1
81132d14:	00001306 	br	81132d64 <OSTmrStart+0x134>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
81132d18:	000b883a 	mov	r5,zero
81132d1c:	e13ffe17 	ldw	r4,-8(fp)
81132d20:	11332b40 	call	811332b4 <OSTmr_Link>
             OSTmr_Unlock();
81132d24:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81132d28:	e0bfff17 	ldw	r2,-4(fp)
81132d2c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81132d30:	00800044 	movi	r2,1
81132d34:	00000b06 	br	81132d64 <OSTmrStart+0x134>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
81132d38:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81132d3c:	e0bfff17 	ldw	r2,-4(fp)
81132d40:	00ffe1c4 	movi	r3,-121
81132d44:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132d48:	0005883a 	mov	r2,zero
81132d4c:	00000506 	br	81132d64 <OSTmrStart+0x134>

        default:
             OSTmr_Unlock();
81132d50:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81132d54:	e0bfff17 	ldw	r2,-4(fp)
81132d58:	00ffe344 	movi	r3,-115
81132d5c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132d60:	0005883a 	mov	r2,zero
    }
}
81132d64:	e037883a 	mov	sp,fp
81132d68:	dfc00117 	ldw	ra,4(sp)
81132d6c:	df000017 	ldw	fp,0(sp)
81132d70:	dec00204 	addi	sp,sp,8
81132d74:	f800283a 	ret

81132d78 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
81132d78:	defff904 	addi	sp,sp,-28
81132d7c:	de00012e 	bgeu	sp,et,81132d84 <OSTmrStop+0xc>
81132d80:	003b68fa 	trap	3
81132d84:	dfc00615 	stw	ra,24(sp)
81132d88:	df000515 	stw	fp,20(sp)
81132d8c:	df000504 	addi	fp,sp,20
81132d90:	e13ffc15 	stw	r4,-16(fp)
81132d94:	2805883a 	mov	r2,r5
81132d98:	e1bffe15 	stw	r6,-8(fp)
81132d9c:	e1ffff15 	stw	r7,-4(fp)
81132da0:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
81132da4:	e0bfff17 	ldw	r2,-4(fp)
81132da8:	1000021e 	bne	r2,zero,81132db4 <OSTmrStop+0x3c>
        return (OS_FALSE);
81132dac:	0005883a 	mov	r2,zero
81132db0:	00006606 	br	81132f4c <OSTmrStop+0x1d4>
    }
    if (ptmr == (OS_TMR *)0) {
81132db4:	e0bffc17 	ldw	r2,-16(fp)
81132db8:	1000051e 	bne	r2,zero,81132dd0 <OSTmrStop+0x58>
        *perr = OS_ERR_TMR_INVALID;
81132dbc:	e0bfff17 	ldw	r2,-4(fp)
81132dc0:	00ffe284 	movi	r3,-118
81132dc4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132dc8:	0005883a 	mov	r2,zero
81132dcc:	00005f06 	br	81132f4c <OSTmrStop+0x1d4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
81132dd0:	e0bffc17 	ldw	r2,-16(fp)
81132dd4:	10800003 	ldbu	r2,0(r2)
81132dd8:	10803fcc 	andi	r2,r2,255
81132ddc:	10801920 	cmpeqi	r2,r2,100
81132de0:	1000051e 	bne	r2,zero,81132df8 <OSTmrStop+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81132de4:	e0bfff17 	ldw	r2,-4(fp)
81132de8:	00ffe244 	movi	r3,-119
81132dec:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132df0:	0005883a 	mov	r2,zero
81132df4:	00005506 	br	81132f4c <OSTmrStop+0x1d4>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
81132df8:	d0a08a03 	ldbu	r2,-32216(gp)
81132dfc:	10803fcc 	andi	r2,r2,255
81132e00:	10000526 	beq	r2,zero,81132e18 <OSTmrStop+0xa0>
        *perr  = OS_ERR_TMR_ISR;
81132e04:	e0bfff17 	ldw	r2,-4(fp)
81132e08:	00ffe2c4 	movi	r3,-117
81132e0c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132e10:	0005883a 	mov	r2,zero
81132e14:	00004d06 	br	81132f4c <OSTmrStop+0x1d4>
    }
    OSTmr_Lock();
81132e18:	11335000 	call	81133500 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81132e1c:	e0bffc17 	ldw	r2,-16(fp)
81132e20:	10800c43 	ldbu	r2,49(r2)
81132e24:	10803fcc 	andi	r2,r2,255
81132e28:	10c000c8 	cmpgei	r3,r2,3
81132e2c:	1800031e 	bne	r3,zero,81132e3c <OSTmrStop+0xc4>
81132e30:	00803516 	blt	zero,r2,81132f08 <OSTmrStop+0x190>
81132e34:	10003a26 	beq	r2,zero,81132f20 <OSTmrStop+0x1a8>
81132e38:	00003f06 	br	81132f38 <OSTmrStop+0x1c0>
81132e3c:	108000e0 	cmpeqi	r2,r2,3
81132e40:	10003d26 	beq	r2,zero,81132f38 <OSTmrStop+0x1c0>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
81132e44:	e13ffc17 	ldw	r4,-16(fp)
81132e48:	11334040 	call	81133404 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
81132e4c:	e0bfff17 	ldw	r2,-4(fp)
81132e50:	10000005 	stb	zero,0(r2)
             switch (opt) {
81132e54:	e0bffd03 	ldbu	r2,-12(fp)
81132e58:	10c000e0 	cmpeqi	r3,r2,3
81132e5c:	1800041e 	bne	r3,zero,81132e70 <OSTmrStop+0xf8>
81132e60:	10c00120 	cmpeqi	r3,r2,4
81132e64:	1800121e 	bne	r3,zero,81132eb0 <OSTmrStop+0x138>
81132e68:	10002326 	beq	r2,zero,81132ef8 <OSTmrStop+0x180>
81132e6c:	00001e06 	br	81132ee8 <OSTmrStop+0x170>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
81132e70:	e0bffc17 	ldw	r2,-16(fp)
81132e74:	10800117 	ldw	r2,4(r2)
81132e78:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81132e7c:	e0bffb17 	ldw	r2,-20(fp)
81132e80:	10000726 	beq	r2,zero,81132ea0 <OSTmrStop+0x128>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
81132e84:	e0bffc17 	ldw	r2,-16(fp)
81132e88:	10c00217 	ldw	r3,8(r2)
81132e8c:	e0bffb17 	ldw	r2,-20(fp)
81132e90:	180b883a 	mov	r5,r3
81132e94:	e13ffc17 	ldw	r4,-16(fp)
81132e98:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
81132e9c:	00001706 	br	81132efc <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
81132ea0:	e0bfff17 	ldw	r2,-4(fp)
81132ea4:	00ffe3c4 	movi	r3,-113
81132ea8:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81132eac:	00001306 	br	81132efc <OSTmrStop+0x184>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
81132eb0:	e0bffc17 	ldw	r2,-16(fp)
81132eb4:	10800117 	ldw	r2,4(r2)
81132eb8:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81132ebc:	e0bffb17 	ldw	r2,-20(fp)
81132ec0:	10000526 	beq	r2,zero,81132ed8 <OSTmrStop+0x160>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
81132ec4:	e0bffb17 	ldw	r2,-20(fp)
81132ec8:	e17ffe17 	ldw	r5,-8(fp)
81132ecc:	e13ffc17 	ldw	r4,-16(fp)
81132ed0:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
81132ed4:	00000906 	br	81132efc <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
81132ed8:	e0bfff17 	ldw	r2,-4(fp)
81132edc:	00ffe3c4 	movi	r3,-113
81132ee0:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81132ee4:	00000506 	br	81132efc <OSTmrStop+0x184>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
81132ee8:	e0bfff17 	ldw	r2,-4(fp)
81132eec:	00ffe104 	movi	r3,-124
81132ef0:	10c00005 	stb	r3,0(r2)
                     break;
81132ef4:	00000106 	br	81132efc <OSTmrStop+0x184>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
81132ef8:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
81132efc:	11335440 	call	81133544 <OSTmr_Unlock>
             return (OS_TRUE);
81132f00:	00800044 	movi	r2,1
81132f04:	00001106 	br	81132f4c <OSTmrStop+0x1d4>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
81132f08:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
81132f0c:	e0bfff17 	ldw	r2,-4(fp)
81132f10:	00ffe384 	movi	r3,-114
81132f14:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
81132f18:	00800044 	movi	r2,1
81132f1c:	00000b06 	br	81132f4c <OSTmrStop+0x1d4>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
81132f20:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81132f24:	e0bfff17 	ldw	r2,-4(fp)
81132f28:	00ffe1c4 	movi	r3,-121
81132f2c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132f30:	0005883a 	mov	r2,zero
81132f34:	00000506 	br	81132f4c <OSTmrStop+0x1d4>

        default:
             OSTmr_Unlock();
81132f38:	11335440 	call	81133544 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81132f3c:	e0bfff17 	ldw	r2,-4(fp)
81132f40:	00ffe344 	movi	r3,-115
81132f44:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132f48:	0005883a 	mov	r2,zero
    }
}
81132f4c:	e037883a 	mov	sp,fp
81132f50:	dfc00117 	ldw	ra,4(sp)
81132f54:	df000017 	ldw	fp,0(sp)
81132f58:	dec00204 	addi	sp,sp,8
81132f5c:	f800283a 	ret

81132f60 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
81132f60:	defffd04 	addi	sp,sp,-12
81132f64:	de00012e 	bgeu	sp,et,81132f6c <OSTmrSignal+0xc>
81132f68:	003b68fa 	trap	3
81132f6c:	dfc00215 	stw	ra,8(sp)
81132f70:	df000115 	stw	fp,4(sp)
81132f74:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
81132f78:	d0a07917 	ldw	r2,-32284(gp)
81132f7c:	1009883a 	mov	r4,r2
81132f80:	113052c0 	call	8113052c <OSSemPost>
81132f84:	e0bfff05 	stb	r2,-4(fp)
    return (err);
81132f88:	e0bfff03 	ldbu	r2,-4(fp)
}
81132f8c:	e037883a 	mov	sp,fp
81132f90:	dfc00117 	ldw	ra,4(sp)
81132f94:	df000017 	ldw	fp,0(sp)
81132f98:	dec00204 	addi	sp,sp,8
81132f9c:	f800283a 	ret

81132fa0 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
81132fa0:	defffe04 	addi	sp,sp,-8
81132fa4:	de00012e 	bgeu	sp,et,81132fac <OSTmr_Alloc+0xc>
81132fa8:	003b68fa 	trap	3
81132fac:	df000115 	stw	fp,4(sp)
81132fb0:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
81132fb4:	d0a07717 	ldw	r2,-32292(gp)
81132fb8:	1000021e 	bne	r2,zero,81132fc4 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
81132fbc:	0005883a 	mov	r2,zero
81132fc0:	00001006 	br	81133004 <OSTmr_Alloc+0x64>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
81132fc4:	d0a07717 	ldw	r2,-32292(gp)
81132fc8:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
81132fcc:	e0bfff17 	ldw	r2,-4(fp)
81132fd0:	10800317 	ldw	r2,12(r2)
81132fd4:	d0a07715 	stw	r2,-32292(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
81132fd8:	e0bfff17 	ldw	r2,-4(fp)
81132fdc:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
81132fe0:	e0bfff17 	ldw	r2,-4(fp)
81132fe4:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
81132fe8:	d0a07c0b 	ldhu	r2,-32272(gp)
81132fec:	10800044 	addi	r2,r2,1
81132ff0:	d0a07c0d 	sth	r2,-32272(gp)
    OSTmrFree--;
81132ff4:	d0a0800b 	ldhu	r2,-32256(gp)
81132ff8:	10bfffc4 	addi	r2,r2,-1
81132ffc:	d0a0800d 	sth	r2,-32256(gp)
    return (ptmr);
81133000:	e0bfff17 	ldw	r2,-4(fp)
}
81133004:	e037883a 	mov	sp,fp
81133008:	df000017 	ldw	fp,0(sp)
8113300c:	dec00104 	addi	sp,sp,4
81133010:	f800283a 	ret

81133014 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
81133014:	defffe04 	addi	sp,sp,-8
81133018:	de00012e 	bgeu	sp,et,81133020 <OSTmr_Free+0xc>
8113301c:	003b68fa 	trap	3
81133020:	df000115 	stw	fp,4(sp)
81133024:	df000104 	addi	fp,sp,4
81133028:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
8113302c:	e0bfff17 	ldw	r2,-4(fp)
81133030:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
81133034:	e0bfff17 	ldw	r2,-4(fp)
81133038:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
8113303c:	e0bfff17 	ldw	r2,-4(fp)
81133040:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
81133044:	e0bfff17 	ldw	r2,-4(fp)
81133048:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
8113304c:	e0bfff17 	ldw	r2,-4(fp)
81133050:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
81133054:	e0bfff17 	ldw	r2,-4(fp)
81133058:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
8113305c:	e0bfff17 	ldw	r2,-4(fp)
81133060:	00c00fc4 	movi	r3,63
81133064:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
81133068:	e0bfff17 	ldw	r2,-4(fp)
8113306c:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
81133070:	e0bfff17 	ldw	r2,-4(fp)
81133074:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
81133078:	d0e07717 	ldw	r3,-32292(gp)
8113307c:	e0bfff17 	ldw	r2,-4(fp)
81133080:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
81133084:	e0bfff17 	ldw	r2,-4(fp)
81133088:	d0a07715 	stw	r2,-32292(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
8113308c:	d0a07c0b 	ldhu	r2,-32272(gp)
81133090:	10bfffc4 	addi	r2,r2,-1
81133094:	d0a07c0d 	sth	r2,-32272(gp)
    OSTmrFree++;
81133098:	d0a0800b 	ldhu	r2,-32256(gp)
8113309c:	10800044 	addi	r2,r2,1
811330a0:	d0a0800d 	sth	r2,-32256(gp)
}
811330a4:	0001883a 	nop
811330a8:	e037883a 	mov	sp,fp
811330ac:	df000017 	ldw	fp,0(sp)
811330b0:	dec00104 	addi	sp,sp,4
811330b4:	f800283a 	ret

811330b8 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
811330b8:	defffa04 	addi	sp,sp,-24
811330bc:	de00012e 	bgeu	sp,et,811330c4 <OSTmr_Init+0xc>
811330c0:	003b68fa 	trap	3
811330c4:	dfc00515 	stw	ra,20(sp)
811330c8:	df000415 	stw	fp,16(sp)
811330cc:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
811330d0:	01406804 	movi	r5,416
811330d4:	01204574 	movhi	r4,33045
811330d8:	21313904 	addi	r4,r4,-15132
811330dc:	112b2280 	call	8112b228 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
811330e0:	01400404 	movi	r5,16
811330e4:	01204574 	movhi	r4,33045
811330e8:	21305904 	addi	r4,r4,-16028
811330ec:	112b2280 	call	8112b228 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
811330f0:	00a04574 	movhi	r2,33045
811330f4:	10b13904 	addi	r2,r2,-15132
811330f8:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
811330fc:	00a04574 	movhi	r2,33045
81133100:	10b14604 	addi	r2,r2,-15080
81133104:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81133108:	e03ffc0d 	sth	zero,-16(fp)
8113310c:	00001606 	br	81133168 <OSTmr_Init+0xb0>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
81133110:	e0bffd17 	ldw	r2,-12(fp)
81133114:	00c01904 	movi	r3,100
81133118:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
8113311c:	e0bffd17 	ldw	r2,-12(fp)
81133120:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
81133124:	e0bffd17 	ldw	r2,-12(fp)
81133128:	e0fffe17 	ldw	r3,-8(fp)
8113312c:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
81133130:	e0bffd17 	ldw	r2,-12(fp)
81133134:	00c00fc4 	movi	r3,63
81133138:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
8113313c:	e0bffd17 	ldw	r2,-12(fp)
81133140:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
81133144:	e0bffd17 	ldw	r2,-12(fp)
81133148:	10800d04 	addi	r2,r2,52
8113314c:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
81133150:	e0bffe17 	ldw	r2,-8(fp)
81133154:	10800d04 	addi	r2,r2,52
81133158:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
8113315c:	e0bffc0b 	ldhu	r2,-16(fp)
81133160:	10800044 	addi	r2,r2,1
81133164:	e0bffc0d 	sth	r2,-16(fp)
81133168:	e0bffc0b 	ldhu	r2,-16(fp)
8113316c:	108001f0 	cmpltui	r2,r2,7
81133170:	103fe71e 	bne	r2,zero,81133110 <__reset+0xfb113110>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
81133174:	e0bffd17 	ldw	r2,-12(fp)
81133178:	00c01904 	movi	r3,100
8113317c:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
81133180:	e0bffd17 	ldw	r2,-12(fp)
81133184:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
81133188:	e0bffd17 	ldw	r2,-12(fp)
8113318c:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
81133190:	e0bffd17 	ldw	r2,-12(fp)
81133194:	00c00fc4 	movi	r3,63
81133198:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
8113319c:	e0bffd17 	ldw	r2,-12(fp)
811331a0:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
811331a4:	d0208c15 	stw	zero,-32208(gp)
    OSTmrUsed           = 0;
811331a8:	d0207c0d 	sth	zero,-32272(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
811331ac:	00800204 	movi	r2,8
811331b0:	d0a0800d 	sth	r2,-32256(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
811331b4:	00a04574 	movhi	r2,33045
811331b8:	10b13904 	addi	r2,r2,-15132
811331bc:	d0a07715 	stw	r2,-32292(gp)
    OSTmrSem            = OSSemCreate(1);
811331c0:	01000044 	movi	r4,1
811331c4:	112fe7c0 	call	8112fe7c <OSSemCreate>
811331c8:	d0a08e15 	stw	r2,-32200(gp)
    OSTmrSemSignal      = OSSemCreate(0);
811331cc:	0009883a 	mov	r4,zero
811331d0:	112fe7c0 	call	8112fe7c <OSSemCreate>
811331d4:	d0a07915 	stw	r2,-32284(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
811331d8:	d0a08e17 	ldw	r2,-32200(gp)
811331dc:	e0ffff04 	addi	r3,fp,-4
811331e0:	180d883a 	mov	r6,r3
811331e4:	01604534 	movhi	r5,33044
811331e8:	29427904 	addi	r5,r5,2532
811331ec:	1009883a 	mov	r4,r2
811331f0:	1129a000 	call	81129a00 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
811331f4:	d0a07917 	ldw	r2,-32284(gp)
811331f8:	e0ffff04 	addi	r3,fp,-4
811331fc:	180d883a 	mov	r6,r3
81133200:	01604534 	movhi	r5,33044
81133204:	29427e04 	addi	r5,r5,2552
81133208:	1009883a 	mov	r4,r2
8113320c:	1129a000 	call	81129a00 <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
81133210:	113322c0 	call	8113322c <OSTmr_InitTask>
}
81133214:	0001883a 	nop
81133218:	e037883a 	mov	sp,fp
8113321c:	dfc00117 	ldw	ra,4(sp)
81133220:	df000017 	ldw	fp,0(sp)
81133224:	dec00204 	addi	sp,sp,8
81133228:	f800283a 	ret

8113322c <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
8113322c:	defff804 	addi	sp,sp,-32
81133230:	de00012e 	bgeu	sp,et,81133238 <OSTmr_InitTask+0xc>
81133234:	003b68fa 	trap	3
81133238:	dfc00715 	stw	ra,28(sp)
8113323c:	df000615 	stw	fp,24(sp)
81133240:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
81133244:	008000c4 	movi	r2,3
81133248:	d8800415 	stw	r2,16(sp)
8113324c:	d8000315 	stw	zero,12(sp)
81133250:	00808004 	movi	r2,512
81133254:	d8800215 	stw	r2,8(sp)
81133258:	00a04574 	movhi	r2,33045
8113325c:	10b72504 	addi	r2,r2,-9068
81133260:	d8800115 	stw	r2,4(sp)
81133264:	00bfff54 	movui	r2,65533
81133268:	d8800015 	stw	r2,0(sp)
8113326c:	01c00484 	movi	r7,18
81133270:	01a04574 	movhi	r6,33045
81133274:	31b92404 	addi	r6,r6,-7024
81133278:	000b883a 	mov	r5,zero
8113327c:	012044f4 	movhi	r4,33043
81133280:	210d6004 	addi	r4,r4,13696
81133284:	1130f100 	call	81130f10 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
81133288:	e1bfff04 	addi	r6,fp,-4
8113328c:	01604534 	movhi	r5,33044
81133290:	29428304 	addi	r5,r5,2572
81133294:	01000484 	movi	r4,18
81133298:	11317400 	call	81131740 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
8113329c:	0001883a 	nop
811332a0:	e037883a 	mov	sp,fp
811332a4:	dfc00117 	ldw	ra,4(sp)
811332a8:	df000017 	ldw	fp,0(sp)
811332ac:	dec00204 	addi	sp,sp,8
811332b0:	f800283a 	ret

811332b4 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
811332b4:	defffa04 	addi	sp,sp,-24
811332b8:	de00012e 	bgeu	sp,et,811332c0 <OSTmr_Link+0xc>
811332bc:	003b68fa 	trap	3
811332c0:	df000515 	stw	fp,20(sp)
811332c4:	df000504 	addi	fp,sp,20
811332c8:	e13ffe15 	stw	r4,-8(fp)
811332cc:	2805883a 	mov	r2,r5
811332d0:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
811332d4:	e0bffe17 	ldw	r2,-8(fp)
811332d8:	00c000c4 	movi	r3,3
811332dc:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
811332e0:	e0bfff03 	ldbu	r2,-4(fp)
811332e4:	10800058 	cmpnei	r2,r2,1
811332e8:	1000071e 	bne	r2,zero,81133308 <OSTmr_Link+0x54>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
811332ec:	e0bffe17 	ldw	r2,-8(fp)
811332f0:	10c00717 	ldw	r3,28(r2)
811332f4:	d0a08c17 	ldw	r2,-32208(gp)
811332f8:	1887883a 	add	r3,r3,r2
811332fc:	e0bffe17 	ldw	r2,-8(fp)
81133300:	10c00515 	stw	r3,20(r2)
81133304:	00001006 	br	81133348 <OSTmr_Link+0x94>
    } else {
        if (ptmr->OSTmrDly == 0) {
81133308:	e0bffe17 	ldw	r2,-8(fp)
8113330c:	10800617 	ldw	r2,24(r2)
81133310:	1000071e 	bne	r2,zero,81133330 <OSTmr_Link+0x7c>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81133314:	e0bffe17 	ldw	r2,-8(fp)
81133318:	10c00717 	ldw	r3,28(r2)
8113331c:	d0a08c17 	ldw	r2,-32208(gp)
81133320:	1887883a 	add	r3,r3,r2
81133324:	e0bffe17 	ldw	r2,-8(fp)
81133328:	10c00515 	stw	r3,20(r2)
8113332c:	00000606 	br	81133348 <OSTmr_Link+0x94>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
81133330:	e0bffe17 	ldw	r2,-8(fp)
81133334:	10c00617 	ldw	r3,24(r2)
81133338:	d0a08c17 	ldw	r2,-32208(gp)
8113333c:	1887883a 	add	r3,r3,r2
81133340:	e0bffe17 	ldw	r2,-8(fp)
81133344:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
81133348:	e0bffe17 	ldw	r2,-8(fp)
8113334c:	10800517 	ldw	r2,20(r2)
81133350:	1080004c 	andi	r2,r2,1
81133354:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81133358:	e0bffb0b 	ldhu	r2,-20(fp)
8113335c:	100690fa 	slli	r3,r2,3
81133360:	00a04574 	movhi	r2,33045
81133364:	10b05904 	addi	r2,r2,-16028
81133368:	1885883a 	add	r2,r3,r2
8113336c:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
81133370:	e0bffc17 	ldw	r2,-16(fp)
81133374:	10800017 	ldw	r2,0(r2)
81133378:	1000091e 	bne	r2,zero,811333a0 <OSTmr_Link+0xec>
        pspoke->OSTmrFirst   = ptmr;
8113337c:	e0bffc17 	ldw	r2,-16(fp)
81133380:	e0fffe17 	ldw	r3,-8(fp)
81133384:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
81133388:	e0bffe17 	ldw	r2,-8(fp)
8113338c:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
81133390:	e0bffc17 	ldw	r2,-16(fp)
81133394:	00c00044 	movi	r3,1
81133398:	10c0010d 	sth	r3,4(r2)
8113339c:	00001206 	br	811333e8 <OSTmr_Link+0x134>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
811333a0:	e0bffc17 	ldw	r2,-16(fp)
811333a4:	10800017 	ldw	r2,0(r2)
811333a8:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
811333ac:	e0bffc17 	ldw	r2,-16(fp)
811333b0:	e0fffe17 	ldw	r3,-8(fp)
811333b4:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
811333b8:	e0bffe17 	ldw	r2,-8(fp)
811333bc:	e0fffd17 	ldw	r3,-12(fp)
811333c0:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
811333c4:	e0bffd17 	ldw	r2,-12(fp)
811333c8:	e0fffe17 	ldw	r3,-8(fp)
811333cc:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
811333d0:	e0bffc17 	ldw	r2,-16(fp)
811333d4:	1080010b 	ldhu	r2,4(r2)
811333d8:	10800044 	addi	r2,r2,1
811333dc:	1007883a 	mov	r3,r2
811333e0:	e0bffc17 	ldw	r2,-16(fp)
811333e4:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
811333e8:	e0bffe17 	ldw	r2,-8(fp)
811333ec:	10000415 	stw	zero,16(r2)
}
811333f0:	0001883a 	nop
811333f4:	e037883a 	mov	sp,fp
811333f8:	df000017 	ldw	fp,0(sp)
811333fc:	dec00104 	addi	sp,sp,4
81133400:	f800283a 	ret

81133404 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
81133404:	defffa04 	addi	sp,sp,-24
81133408:	de00012e 	bgeu	sp,et,81133410 <OSTmr_Unlink+0xc>
8113340c:	003b68fa 	trap	3
81133410:	df000515 	stw	fp,20(sp)
81133414:	df000504 	addi	fp,sp,20
81133418:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
8113341c:	e0bfff17 	ldw	r2,-4(fp)
81133420:	10800517 	ldw	r2,20(r2)
81133424:	1080004c 	andi	r2,r2,1
81133428:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
8113342c:	e0bffb0b 	ldhu	r2,-20(fp)
81133430:	100690fa 	slli	r3,r2,3
81133434:	00a04574 	movhi	r2,33045
81133438:	10b05904 	addi	r2,r2,-16028
8113343c:	1885883a 	add	r2,r3,r2
81133440:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
81133444:	e0bffc17 	ldw	r2,-16(fp)
81133448:	10c00017 	ldw	r3,0(r2)
8113344c:	e0bfff17 	ldw	r2,-4(fp)
81133450:	18800b1e 	bne	r3,r2,81133480 <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
81133454:	e0bfff17 	ldw	r2,-4(fp)
81133458:	10800317 	ldw	r2,12(r2)
8113345c:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
81133460:	e0bffc17 	ldw	r2,-16(fp)
81133464:	e0fffd17 	ldw	r3,-12(fp)
81133468:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
8113346c:	e0bffd17 	ldw	r2,-12(fp)
81133470:	10001126 	beq	r2,zero,811334b8 <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
81133474:	e0bffd17 	ldw	r2,-12(fp)
81133478:	10000415 	stw	zero,16(r2)
8113347c:	00000e06 	br	811334b8 <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
81133480:	e0bfff17 	ldw	r2,-4(fp)
81133484:	10800417 	ldw	r2,16(r2)
81133488:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
8113348c:	e0bfff17 	ldw	r2,-4(fp)
81133490:	10800317 	ldw	r2,12(r2)
81133494:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
81133498:	e0bffd17 	ldw	r2,-12(fp)
8113349c:	e0fffe17 	ldw	r3,-8(fp)
811334a0:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
811334a4:	e0bffe17 	ldw	r2,-8(fp)
811334a8:	10000326 	beq	r2,zero,811334b8 <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
811334ac:	e0bffe17 	ldw	r2,-8(fp)
811334b0:	e0fffd17 	ldw	r3,-12(fp)
811334b4:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
811334b8:	e0bfff17 	ldw	r2,-4(fp)
811334bc:	00c00044 	movi	r3,1
811334c0:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
811334c4:	e0bfff17 	ldw	r2,-4(fp)
811334c8:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
811334cc:	e0bfff17 	ldw	r2,-4(fp)
811334d0:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
811334d4:	e0bffc17 	ldw	r2,-16(fp)
811334d8:	1080010b 	ldhu	r2,4(r2)
811334dc:	10bfffc4 	addi	r2,r2,-1
811334e0:	1007883a 	mov	r3,r2
811334e4:	e0bffc17 	ldw	r2,-16(fp)
811334e8:	10c0010d 	sth	r3,4(r2)
}
811334ec:	0001883a 	nop
811334f0:	e037883a 	mov	sp,fp
811334f4:	df000017 	ldw	fp,0(sp)
811334f8:	dec00104 	addi	sp,sp,4
811334fc:	f800283a 	ret

81133500 <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
81133500:	defffd04 	addi	sp,sp,-12
81133504:	de00012e 	bgeu	sp,et,8113350c <OSTmr_Lock+0xc>
81133508:	003b68fa 	trap	3
8113350c:	dfc00215 	stw	ra,8(sp)
81133510:	df000115 	stw	fp,4(sp)
81133514:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
81133518:	d0a08e17 	ldw	r2,-32200(gp)
8113351c:	e1bfff04 	addi	r6,fp,-4
81133520:	000b883a 	mov	r5,zero
81133524:	1009883a 	mov	r4,r2
81133528:	11301a40 	call	811301a4 <OSSemPend>
    (void)err;
}
8113352c:	0001883a 	nop
81133530:	e037883a 	mov	sp,fp
81133534:	dfc00117 	ldw	ra,4(sp)
81133538:	df000017 	ldw	fp,0(sp)
8113353c:	dec00204 	addi	sp,sp,8
81133540:	f800283a 	ret

81133544 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
81133544:	defffe04 	addi	sp,sp,-8
81133548:	de00012e 	bgeu	sp,et,81133550 <OSTmr_Unlock+0xc>
8113354c:	003b68fa 	trap	3
81133550:	dfc00115 	stw	ra,4(sp)
81133554:	df000015 	stw	fp,0(sp)
81133558:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
8113355c:	d0a08e17 	ldw	r2,-32200(gp)
81133560:	1009883a 	mov	r4,r2
81133564:	113052c0 	call	8113052c <OSSemPost>
}
81133568:	0001883a 	nop
8113356c:	e037883a 	mov	sp,fp
81133570:	dfc00117 	ldw	ra,4(sp)
81133574:	df000017 	ldw	fp,0(sp)
81133578:	dec00204 	addi	sp,sp,8
8113357c:	f800283a 	ret

81133580 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
81133580:	defff704 	addi	sp,sp,-36
81133584:	de00012e 	bgeu	sp,et,8113358c <OSTmr_Task+0xc>
81133588:	003b68fa 	trap	3
8113358c:	dfc00815 	stw	ra,32(sp)
81133590:	df000715 	stw	fp,28(sp)
81133594:	df000704 	addi	fp,sp,28
81133598:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
8113359c:	d0a07917 	ldw	r2,-32284(gp)
811335a0:	e0fffe04 	addi	r3,fp,-8
811335a4:	180d883a 	mov	r6,r3
811335a8:	000b883a 	mov	r5,zero
811335ac:	1009883a 	mov	r4,r2
811335b0:	11301a40 	call	811301a4 <OSSemPend>
        OSTmr_Lock();
811335b4:	11335000 	call	81133500 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
811335b8:	d0a08c17 	ldw	r2,-32208(gp)
811335bc:	10800044 	addi	r2,r2,1
811335c0:	d0a08c15 	stw	r2,-32208(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
811335c4:	d0a08c17 	ldw	r2,-32208(gp)
811335c8:	1080004c 	andi	r2,r2,1
811335cc:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
811335d0:	e0bffa0b 	ldhu	r2,-24(fp)
811335d4:	100690fa 	slli	r3,r2,3
811335d8:	00a04574 	movhi	r2,33045
811335dc:	10b05904 	addi	r2,r2,-16028
811335e0:	1885883a 	add	r2,r3,r2
811335e4:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
811335e8:	e0bffb17 	ldw	r2,-20(fp)
811335ec:	10800017 	ldw	r2,0(r2)
811335f0:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
811335f4:	00002206 	br	81133680 <OSTmr_Task+0x100>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
811335f8:	e0bff917 	ldw	r2,-28(fp)
811335fc:	10800317 	ldw	r2,12(r2)
81133600:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
81133604:	e0bff917 	ldw	r2,-28(fp)
81133608:	10c00517 	ldw	r3,20(r2)
8113360c:	d0a08c17 	ldw	r2,-32208(gp)
81133610:	1880191e 	bne	r3,r2,81133678 <OSTmr_Task+0xf8>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
81133614:	e0bff917 	ldw	r2,-28(fp)
81133618:	10800117 	ldw	r2,4(r2)
8113361c:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
81133620:	e0bffd17 	ldw	r2,-12(fp)
81133624:	10000626 	beq	r2,zero,81133640 <OSTmr_Task+0xc0>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
81133628:	e0bff917 	ldw	r2,-28(fp)
8113362c:	10c00217 	ldw	r3,8(r2)
81133630:	e0bffd17 	ldw	r2,-12(fp)
81133634:	180b883a 	mov	r5,r3
81133638:	e13ff917 	ldw	r4,-28(fp)
8113363c:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
81133640:	e13ff917 	ldw	r4,-28(fp)
81133644:	11334040 	call	81133404 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
81133648:	e0bff917 	ldw	r2,-28(fp)
8113364c:	10800c03 	ldbu	r2,48(r2)
81133650:	10803fcc 	andi	r2,r2,255
81133654:	10800098 	cmpnei	r2,r2,2
81133658:	1000041e 	bne	r2,zero,8113366c <OSTmr_Task+0xec>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
8113365c:	01400044 	movi	r5,1
81133660:	e13ff917 	ldw	r4,-28(fp)
81133664:	11332b40 	call	811332b4 <OSTmr_Link>
81133668:	00000306 	br	81133678 <OSTmr_Task+0xf8>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
8113366c:	e0bff917 	ldw	r2,-28(fp)
81133670:	00c00084 	movi	r3,2
81133674:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
81133678:	e0bffc17 	ldw	r2,-16(fp)
8113367c:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
81133680:	e0bff917 	ldw	r2,-28(fp)
81133684:	103fdc1e 	bne	r2,zero,811335f8 <__reset+0xfb1135f8>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
81133688:	11335440 	call	81133544 <OSTmr_Unlock>
    }
8113368c:	003fc306 	br	8113359c <__reset+0xfb11359c>

81133690 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
81133690:	defffd04 	addi	sp,sp,-12
81133694:	de00012e 	bgeu	sp,et,8113369c <alt_dev_reg+0xc>
81133698:	003b68fa 	trap	3
8113369c:	dfc00215 	stw	ra,8(sp)
811336a0:	df000115 	stw	fp,4(sp)
811336a4:	df000104 	addi	fp,sp,4
811336a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
811336ac:	d1600d04 	addi	r5,gp,-32716
811336b0:	e13fff17 	ldw	r4,-4(fp)
811336b4:	113b9300 	call	8113b930 <alt_dev_llist_insert>
}
811336b8:	e037883a 	mov	sp,fp
811336bc:	dfc00117 	ldw	ra,4(sp)
811336c0:	df000017 	ldw	fp,0(sp)
811336c4:	dec00204 	addi	sp,sp,8
811336c8:	f800283a 	ret

811336cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
811336cc:	defffd04 	addi	sp,sp,-12
811336d0:	de00012e 	bgeu	sp,et,811336d8 <alt_irq_init+0xc>
811336d4:	003b68fa 	trap	3
811336d8:	dfc00215 	stw	ra,8(sp)
811336dc:	df000115 	stw	fp,4(sp)
811336e0:	df000104 	addi	fp,sp,4
811336e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
811336e8:	113c3c80 	call	8113c3c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
811336ec:	00800044 	movi	r2,1
811336f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
811336f4:	0001883a 	nop
811336f8:	e037883a 	mov	sp,fp
811336fc:	dfc00117 	ldw	ra,4(sp)
81133700:	df000017 	ldw	fp,0(sp)
81133704:	dec00204 	addi	sp,sp,8
81133708:	f800283a 	ret

8113370c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8113370c:	defffe04 	addi	sp,sp,-8
81133710:	de00012e 	bgeu	sp,et,81133718 <alt_sys_init+0xc>
81133714:	003b68fa 	trap	3
81133718:	dfc00115 	stw	ra,4(sp)
8113371c:	df000015 	stw	fp,0(sp)
81133720:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81133724:	01c0fa04 	movi	r7,1000
81133728:	01800304 	movi	r6,12
8113372c:	000b883a 	mov	r5,zero
81133730:	01200034 	movhi	r4,32768
81133734:	21022004 	addi	r4,r4,2176
81133738:	1138a640 	call	81138a64 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8113373c:	018002c4 	movi	r6,11
81133740:	000b883a 	mov	r5,zero
81133744:	01204534 	movhi	r4,33044
81133748:	21061f04 	addi	r4,r4,6268
8113374c:	1137d500 	call	81137d50 <altera_avalon_jtag_uart_init>
81133750:	01204534 	movhi	r4,33044
81133754:	21061504 	addi	r4,r4,6228
81133758:	11336900 	call	81133690 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8113375c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
81133760:	018003c4 	movi	r6,15
81133764:	000b883a 	mov	r5,zero
81133768:	01204534 	movhi	r4,33044
8113376c:	210a3a04 	addi	r4,r4,10472
81133770:	1138c100 	call	81138c10 <altera_avalon_uart_init>
81133774:	01204534 	movhi	r4,33044
81133778:	210a3004 	addi	r4,r4,10432
8113377c:	11336900 	call	81133690 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
81133780:	00a04534 	movhi	r2,33044
81133784:	108a6404 	addi	r2,r2,10640
81133788:	10c00717 	ldw	r3,28(r2)
8113378c:	00a04534 	movhi	r2,33044
81133790:	108a6404 	addi	r2,r2,10640
81133794:	10800817 	ldw	r2,32(r2)
81133798:	100d883a 	mov	r6,r2
8113379c:	180b883a 	mov	r5,r3
811337a0:	01204534 	movhi	r4,33044
811337a4:	210a6404 	addi	r4,r4,10640
811337a8:	113b4980 	call	8113b498 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
811337ac:	00a04534 	movhi	r2,33044
811337b0:	108a7d04 	addi	r2,r2,10740
811337b4:	10c00717 	ldw	r3,28(r2)
811337b8:	00a04534 	movhi	r2,33044
811337bc:	108a7d04 	addi	r2,r2,10740
811337c0:	10800817 	ldw	r2,32(r2)
811337c4:	100d883a 	mov	r6,r2
811337c8:	180b883a 	mov	r5,r3
811337cc:	01204534 	movhi	r4,33044
811337d0:	210a7d04 	addi	r4,r4,10740
811337d4:	113b4980 	call	8113b498 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
811337d8:	01204534 	movhi	r4,33044
811337dc:	210a9604 	addi	r4,r4,10840
811337e0:	11336900 	call	81133690 <alt_dev_reg>
}
811337e4:	0001883a 	nop
811337e8:	e037883a 	mov	sp,fp
811337ec:	dfc00117 	ldw	ra,4(sp)
811337f0:	df000017 	ldw	fp,0(sp)
811337f4:	dec00204 	addi	sp,sp,8
811337f8:	f800283a 	ret

811337fc <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
811337fc:	defffa04 	addi	sp,sp,-24
81133800:	de00012e 	bgeu	sp,et,81133808 <Write_Sector_Data+0xc>
81133804:	003b68fa 	trap	3
81133808:	dfc00515 	stw	ra,20(sp)
8113380c:	df000415 	stw	fp,16(sp)
81133810:	df000404 	addi	fp,sp,16
81133814:	e13ffe15 	stw	r4,-8(fp)
81133818:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
8113381c:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
81133820:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
81133824:	10001e26 	beq	r2,zero,811338a0 <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
81133828:	00803fc4 	movi	r2,255
8113382c:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81133830:	d0a09817 	ldw	r2,-32160(gp)
81133834:	e13ffe17 	ldw	r4,-8(fp)
81133838:	e0ffff17 	ldw	r3,-4(fp)
8113383c:	20c7883a 	add	r3,r4,r3
81133840:	1806927a 	slli	r3,r3,9
81133844:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
81133848:	d0a09717 	ldw	r2,-32164(gp)
8113384c:	00c00604 	movi	r3,24
81133850:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81133854:	d0a09417 	ldw	r2,-32176(gp)
81133858:	1080002b 	ldhuio	r2,0(r2)
8113385c:	10bfffcc 	andi	r2,r2,65535
81133860:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
81133864:	e0bffd0b 	ldhu	r2,-12(fp)
81133868:	10bfffcc 	andi	r2,r2,65535
8113386c:	1080010c 	andi	r2,r2,4
81133870:	103ff81e 	bne	r2,zero,81133854 <__reset+0xfb113854>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
81133874:	e0bffd0b 	ldhu	r2,-12(fp)
81133878:	10bfffcc 	andi	r2,r2,65535
8113387c:	1080040c 	andi	r2,r2,16
81133880:	1000071e 	bne	r2,zero,811338a0 <Write_Sector_Data+0xa4>
        {
            result = true;
81133884:	00800044 	movi	r2,1
81133888:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
8113388c:	d0209d15 	stw	zero,-32140(gp)
            current_sector_index = sector_index+partition_offset;
81133890:	e0fffe17 	ldw	r3,-8(fp)
81133894:	e0bfff17 	ldw	r2,-4(fp)
81133898:	1885883a 	add	r2,r3,r2
8113389c:	d0a09e15 	stw	r2,-32136(gp)
        }
    }
    return result;
811338a0:	e0bffc17 	ldw	r2,-16(fp)
}
811338a4:	e037883a 	mov	sp,fp
811338a8:	dfc00117 	ldw	ra,4(sp)
811338ac:	df000017 	ldw	fp,0(sp)
811338b0:	dec00204 	addi	sp,sp,8
811338b4:	f800283a 	ret

811338b8 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
811338b8:	defffd04 	addi	sp,sp,-12
811338bc:	de00012e 	bgeu	sp,et,811338c4 <Save_Modified_Sector+0xc>
811338c0:	003b68fa 	trap	3
811338c4:	dfc00215 	stw	ra,8(sp)
811338c8:	df000115 	stw	fp,4(sp)
811338cc:	df000104 	addi	fp,sp,4
    bool result = true;
811338d0:	00800044 	movi	r2,1
811338d4:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
811338d8:	d0a09d17 	ldw	r2,-32140(gp)
811338dc:	10000526 	beq	r2,zero,811338f4 <Save_Modified_Sector+0x3c>
    {
        result = Write_Sector_Data(current_sector_index, 0);
811338e0:	d0a09e17 	ldw	r2,-32136(gp)
811338e4:	000b883a 	mov	r5,zero
811338e8:	1009883a 	mov	r4,r2
811338ec:	11337fc0 	call	811337fc <Write_Sector_Data>
811338f0:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
811338f4:	e0bfff17 	ldw	r2,-4(fp)
}
811338f8:	e037883a 	mov	sp,fp
811338fc:	dfc00117 	ldw	ra,4(sp)
81133900:	df000017 	ldw	fp,0(sp)
81133904:	dec00204 	addi	sp,sp,8
81133908:	f800283a 	ret

8113390c <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
8113390c:	defffa04 	addi	sp,sp,-24
81133910:	de00012e 	bgeu	sp,et,81133918 <Read_Sector_Data+0xc>
81133914:	003b68fa 	trap	3
81133918:	dfc00515 	stw	ra,20(sp)
8113391c:	df000415 	stw	fp,16(sp)
81133920:	df000404 	addi	fp,sp,16
81133924:	e13ffe15 	stw	r4,-8(fp)
81133928:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
8113392c:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
81133930:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
81133934:	10002726 	beq	r2,zero,811339d4 <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
81133938:	00803fc4 	movi	r2,255
8113393c:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
81133940:	d0a09d17 	ldw	r2,-32140(gp)
81133944:	10000726 	beq	r2,zero,81133964 <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
81133948:	d0a09e17 	ldw	r2,-32136(gp)
8113394c:	000b883a 	mov	r5,zero
81133950:	1009883a 	mov	r4,r2
81133954:	11337fc0 	call	811337fc <Write_Sector_Data>
81133958:	1000021e 	bne	r2,zero,81133964 <Read_Sector_Data+0x58>
            {
                return false;
8113395c:	0005883a 	mov	r2,zero
81133960:	00001d06 	br	811339d8 <Read_Sector_Data+0xcc>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81133964:	d0a09817 	ldw	r2,-32160(gp)
81133968:	e13ffe17 	ldw	r4,-8(fp)
8113396c:	e0ffff17 	ldw	r3,-4(fp)
81133970:	20c7883a 	add	r3,r4,r3
81133974:	1806927a 	slli	r3,r3,9
81133978:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
8113397c:	d0a09717 	ldw	r2,-32164(gp)
81133980:	00c00444 	movi	r3,17
81133984:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81133988:	d0a09417 	ldw	r2,-32176(gp)
8113398c:	1080002b 	ldhuio	r2,0(r2)
81133990:	10bfffcc 	andi	r2,r2,65535
81133994:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
81133998:	e0bffd0b 	ldhu	r2,-12(fp)
8113399c:	10bfffcc 	andi	r2,r2,65535
811339a0:	1080010c 	andi	r2,r2,4
811339a4:	103ff81e 	bne	r2,zero,81133988 <__reset+0xfb113988>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
811339a8:	e0bffd0b 	ldhu	r2,-12(fp)
811339ac:	10bfffcc 	andi	r2,r2,65535
811339b0:	1080040c 	andi	r2,r2,16
811339b4:	1000071e 	bne	r2,zero,811339d4 <Read_Sector_Data+0xc8>
		{
			result = true;
811339b8:	00800044 	movi	r2,1
811339bc:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
811339c0:	d0209d15 	stw	zero,-32140(gp)
            current_sector_index = sector_index+partition_offset;
811339c4:	e0fffe17 	ldw	r3,-8(fp)
811339c8:	e0bfff17 	ldw	r2,-4(fp)
811339cc:	1885883a 	add	r2,r3,r2
811339d0:	d0a09e15 	stw	r2,-32136(gp)
		}
	}
	return result;
811339d4:	e0bffc17 	ldw	r2,-16(fp)
}
811339d8:	e037883a 	mov	sp,fp
811339dc:	dfc00117 	ldw	ra,4(sp)
811339e0:	df000017 	ldw	fp,0(sp)
811339e4:	dec00204 	addi	sp,sp,8
811339e8:	f800283a 	ret

811339ec <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
811339ec:	defffb04 	addi	sp,sp,-20
811339f0:	de00012e 	bgeu	sp,et,811339f8 <get_cluster_flag+0xc>
811339f4:	003b68fa 	trap	3
811339f8:	dfc00415 	stw	ra,16(sp)
811339fc:	df000315 	stw	fp,12(sp)
81133a00:	df000304 	addi	fp,sp,12
81133a04:	e13ffe15 	stw	r4,-8(fp)
81133a08:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
81133a0c:	e0bffe17 	ldw	r2,-8(fp)
81133a10:	1004d23a 	srli	r2,r2,8
81133a14:	d0e09a17 	ldw	r3,-32152(gp)
81133a18:	10c5883a 	add	r2,r2,r3
81133a1c:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
81133a20:	00a04574 	movhi	r2,33045
81133a24:	1081f504 	addi	r2,r2,2004
81133a28:	10801117 	ldw	r2,68(r2)
81133a2c:	e0fffd17 	ldw	r3,-12(fp)
81133a30:	1885883a 	add	r2,r3,r2
81133a34:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
81133a38:	d0a09e17 	ldw	r2,-32136(gp)
81133a3c:	e0fffd17 	ldw	r3,-12(fp)
81133a40:	18800726 	beq	r3,r2,81133a60 <get_cluster_flag+0x74>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81133a44:	e0bffd17 	ldw	r2,-12(fp)
81133a48:	000b883a 	mov	r5,zero
81133a4c:	1009883a 	mov	r4,r2
81133a50:	113390c0 	call	8113390c <Read_Sector_Data>
81133a54:	1000021e 	bne	r2,zero,81133a60 <get_cluster_flag+0x74>
        {
            return false;
81133a58:	0005883a 	mov	r2,zero
81133a5c:	00000d06 	br	81133a94 <get_cluster_flag+0xa8>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
81133a60:	e0bffe17 	ldw	r2,-8(fp)
81133a64:	10803fcc 	andi	r2,r2,255
81133a68:	1085883a 	add	r2,r2,r2
81133a6c:	1007883a 	mov	r3,r2
81133a70:	d0a09c17 	ldw	r2,-32144(gp)
81133a74:	10800a17 	ldw	r2,40(r2)
81133a78:	1885883a 	add	r2,r3,r2
81133a7c:	1080002b 	ldhuio	r2,0(r2)
81133a80:	10bfffcc 	andi	r2,r2,65535
81133a84:	1007883a 	mov	r3,r2
81133a88:	e0bfff17 	ldw	r2,-4(fp)
81133a8c:	10c0000d 	sth	r3,0(r2)
    return true;
81133a90:	00800044 	movi	r2,1
}
81133a94:	e037883a 	mov	sp,fp
81133a98:	dfc00117 	ldw	ra,4(sp)
81133a9c:	df000017 	ldw	fp,0(sp)
81133aa0:	dec00204 	addi	sp,sp,8
81133aa4:	f800283a 	ret

81133aa8 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
81133aa8:	defffa04 	addi	sp,sp,-24
81133aac:	de00012e 	bgeu	sp,et,81133ab4 <mark_cluster+0xc>
81133ab0:	003b68fa 	trap	3
81133ab4:	dfc00515 	stw	ra,20(sp)
81133ab8:	df000415 	stw	fp,16(sp)
81133abc:	df000404 	addi	fp,sp,16
81133ac0:	e13ffd15 	stw	r4,-12(fp)
81133ac4:	2805883a 	mov	r2,r5
81133ac8:	e1bfff15 	stw	r6,-4(fp)
81133acc:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
81133ad0:	e0bffd17 	ldw	r2,-12(fp)
81133ad4:	1004d23a 	srli	r2,r2,8
81133ad8:	d0e09a17 	ldw	r3,-32152(gp)
81133adc:	10c5883a 	add	r2,r2,r3
81133ae0:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
81133ae4:	e0bfff17 	ldw	r2,-4(fp)
81133ae8:	10000726 	beq	r2,zero,81133b08 <mark_cluster+0x60>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
81133aec:	00a04574 	movhi	r2,33045
81133af0:	1081f504 	addi	r2,r2,2004
81133af4:	10801117 	ldw	r2,68(r2)
81133af8:	e0fffc17 	ldw	r3,-16(fp)
81133afc:	1885883a 	add	r2,r3,r2
81133b00:	e0bffc15 	stw	r2,-16(fp)
81133b04:	00000606 	br	81133b20 <mark_cluster+0x78>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
81133b08:	00a04574 	movhi	r2,33045
81133b0c:	1081f504 	addi	r2,r2,2004
81133b10:	10801217 	ldw	r2,72(r2)
81133b14:	e0fffc17 	ldw	r3,-16(fp)
81133b18:	1885883a 	add	r2,r3,r2
81133b1c:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
81133b20:	d0a09e17 	ldw	r2,-32136(gp)
81133b24:	e0fffc17 	ldw	r3,-16(fp)
81133b28:	18800726 	beq	r3,r2,81133b48 <mark_cluster+0xa0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81133b2c:	e0bffc17 	ldw	r2,-16(fp)
81133b30:	000b883a 	mov	r5,zero
81133b34:	1009883a 	mov	r4,r2
81133b38:	113390c0 	call	8113390c <Read_Sector_Data>
81133b3c:	1000021e 	bne	r2,zero,81133b48 <mark_cluster+0xa0>
        {
            return false;
81133b40:	0005883a 	mov	r2,zero
81133b44:	00000d06 	br	81133b7c <mark_cluster+0xd4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
81133b48:	e0bffd17 	ldw	r2,-12(fp)
81133b4c:	10803fcc 	andi	r2,r2,255
81133b50:	1085883a 	add	r2,r2,r2
81133b54:	1007883a 	mov	r3,r2
81133b58:	d0a09c17 	ldw	r2,-32144(gp)
81133b5c:	10800a17 	ldw	r2,40(r2)
81133b60:	1885883a 	add	r2,r3,r2
81133b64:	1007883a 	mov	r3,r2
81133b68:	e0bffe0f 	ldh	r2,-8(fp)
81133b6c:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
81133b70:	00800044 	movi	r2,1
81133b74:	d0a09d15 	stw	r2,-32140(gp)
    return true;
81133b78:	00800044 	movi	r2,1
}
81133b7c:	e037883a 	mov	sp,fp
81133b80:	dfc00117 	ldw	ra,4(sp)
81133b84:	df000017 	ldw	fp,0(sp)
81133b88:	dec00204 	addi	sp,sp,8
81133b8c:	f800283a 	ret

81133b90 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
81133b90:	defff704 	addi	sp,sp,-36
81133b94:	de00012e 	bgeu	sp,et,81133b9c <Check_for_Master_Boot_Record+0xc>
81133b98:	003b68fa 	trap	3
81133b9c:	dfc00815 	stw	ra,32(sp)
81133ba0:	df000715 	stw	fp,28(sp)
81133ba4:	df000704 	addi	fp,sp,28
	bool result = false;
81133ba8:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
81133bac:	000b883a 	mov	r5,zero
81133bb0:	0009883a 	mov	r4,zero
81133bb4:	113390c0 	call	8113390c <Read_Sector_Data>
81133bb8:	10005a26 	beq	r2,zero,81133d24 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
81133bbc:	d0a09c17 	ldw	r2,-32144(gp)
81133bc0:	10800a17 	ldw	r2,40(r2)
81133bc4:	10807f84 	addi	r2,r2,510
81133bc8:	1080002b 	ldhuio	r2,0(r2)
81133bcc:	10bfffcc 	andi	r2,r2,65535
81133bd0:	10bfffcc 	andi	r2,r2,65535
81133bd4:	10a0001c 	xori	r2,r2,32768
81133bd8:	10a00004 	addi	r2,r2,-32768
81133bdc:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
81133be0:	e0bffb17 	ldw	r2,-20(fp)
81133be4:	10ffffcc 	andi	r3,r2,65535
81133be8:	00aa9554 	movui	r2,43605
81133bec:	18804d1e 	bne	r3,r2,81133d24 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
81133bf0:	e03ffa15 	stw	zero,-24(fp)
81133bf4:	00004806 	br	81133d18 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
81133bf8:	e0bffa17 	ldw	r2,-24(fp)
81133bfc:	1004913a 	slli	r2,r2,4
81133c00:	10806f84 	addi	r2,r2,446
81133c04:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
81133c08:	d0a09c17 	ldw	r2,-32144(gp)
81133c0c:	10c00a17 	ldw	r3,40(r2)
81133c10:	e0bffc17 	ldw	r2,-16(fp)
81133c14:	1885883a 	add	r2,r3,r2
81133c18:	10800104 	addi	r2,r2,4
81133c1c:	10800023 	ldbuio	r2,0(r2)
81133c20:	10803fcc 	andi	r2,r2,255
81133c24:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
81133c28:	e0bffd07 	ldb	r2,-12(fp)
81133c2c:	10800060 	cmpeqi	r2,r2,1
81133c30:	1000091e 	bne	r2,zero,81133c58 <Check_for_Master_Boot_Record+0xc8>
81133c34:	e0bffd07 	ldb	r2,-12(fp)
81133c38:	10800120 	cmpeqi	r2,r2,4
81133c3c:	1000061e 	bne	r2,zero,81133c58 <Check_for_Master_Boot_Record+0xc8>
81133c40:	e0bffd07 	ldb	r2,-12(fp)
81133c44:	108001a0 	cmpeqi	r2,r2,6
81133c48:	1000031e 	bne	r2,zero,81133c58 <Check_for_Master_Boot_Record+0xc8>
81133c4c:	e0bffd07 	ldb	r2,-12(fp)
81133c50:	10800398 	cmpnei	r2,r2,14
81133c54:	10002d1e 	bne	r2,zero,81133d0c <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
81133c58:	d0a09c17 	ldw	r2,-32144(gp)
81133c5c:	10c00a17 	ldw	r3,40(r2)
81133c60:	e0bffc17 	ldw	r2,-16(fp)
81133c64:	1885883a 	add	r2,r3,r2
81133c68:	10800284 	addi	r2,r2,10
81133c6c:	1080002b 	ldhuio	r2,0(r2)
81133c70:	10bfffcc 	andi	r2,r2,65535
81133c74:	1006943a 	slli	r3,r2,16
81133c78:	d0a09c17 	ldw	r2,-32144(gp)
81133c7c:	11000a17 	ldw	r4,40(r2)
81133c80:	e0bffc17 	ldw	r2,-16(fp)
81133c84:	2085883a 	add	r2,r4,r2
81133c88:	10800204 	addi	r2,r2,8
81133c8c:	1080002b 	ldhuio	r2,0(r2)
81133c90:	10bfffcc 	andi	r2,r2,65535
81133c94:	10bfffcc 	andi	r2,r2,65535
81133c98:	1884b03a 	or	r2,r3,r2
81133c9c:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
81133ca0:	d0a09c17 	ldw	r2,-32144(gp)
81133ca4:	10c00a17 	ldw	r3,40(r2)
81133ca8:	e0bffc17 	ldw	r2,-16(fp)
81133cac:	1885883a 	add	r2,r3,r2
81133cb0:	10800384 	addi	r2,r2,14
81133cb4:	1080002b 	ldhuio	r2,0(r2)
81133cb8:	10bfffcc 	andi	r2,r2,65535
81133cbc:	1006943a 	slli	r3,r2,16
81133cc0:	d0a09c17 	ldw	r2,-32144(gp)
81133cc4:	11000a17 	ldw	r4,40(r2)
81133cc8:	e0bffc17 	ldw	r2,-16(fp)
81133ccc:	2085883a 	add	r2,r4,r2
81133cd0:	10800304 	addi	r2,r2,12
81133cd4:	1080002b 	ldhuio	r2,0(r2)
81133cd8:	10bfffcc 	andi	r2,r2,65535
81133cdc:	10bfffcc 	andi	r2,r2,65535
81133ce0:	1884b03a 	or	r2,r3,r2
81133ce4:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
81133ce8:	e0bfff17 	ldw	r2,-4(fp)
81133cec:	0080070e 	bge	zero,r2,81133d0c <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
81133cf0:	00800044 	movi	r2,1
81133cf4:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
81133cf8:	e0bfff17 	ldw	r2,-4(fp)
81133cfc:	d0a09b15 	stw	r2,-32148(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
81133d00:	e0bffe17 	ldw	r2,-8(fp)
81133d04:	d0a09a15 	stw	r2,-32152(gp)
						break;
81133d08:	00000606 	br	81133d24 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
81133d0c:	e0bffa17 	ldw	r2,-24(fp)
81133d10:	10800044 	addi	r2,r2,1
81133d14:	e0bffa15 	stw	r2,-24(fp)
81133d18:	e0bffa17 	ldw	r2,-24(fp)
81133d1c:	10800110 	cmplti	r2,r2,4
81133d20:	103fb51e 	bne	r2,zero,81133bf8 <__reset+0xfb113bf8>
				}
			}
		}
	}

	return result;
81133d24:	e0bff917 	ldw	r2,-28(fp)
}
81133d28:	e037883a 	mov	sp,fp
81133d2c:	dfc00117 	ldw	ra,4(sp)
81133d30:	df000017 	ldw	fp,0(sp)
81133d34:	dec00204 	addi	sp,sp,8
81133d38:	f800283a 	ret

81133d3c <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
81133d3c:	defff804 	addi	sp,sp,-32
81133d40:	de00012e 	bgeu	sp,et,81133d48 <Read_File_Record_At_Offset+0xc>
81133d44:	003b68fa 	trap	3
81133d48:	dfc00715 	stw	ra,28(sp)
81133d4c:	df000615 	stw	fp,24(sp)
81133d50:	df000604 	addi	fp,sp,24
81133d54:	e13ffc15 	stw	r4,-16(fp)
81133d58:	e17ffd15 	stw	r5,-12(fp)
81133d5c:	e1bffe15 	stw	r6,-8(fp)
81133d60:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
81133d64:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81133d68:	e0bffc17 	ldw	r2,-16(fp)
81133d6c:	108007cc 	andi	r2,r2,31
81133d70:	10008d1e 	bne	r2,zero,81133fa8 <Read_File_Record_At_Offset+0x26c>
81133d74:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
81133d78:	10008b26 	beq	r2,zero,81133fa8 <Read_File_Record_At_Offset+0x26c>
81133d7c:	d0a09317 	ldw	r2,-32180(gp)
81133d80:	10008926 	beq	r2,zero,81133fa8 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81133d84:	e03ffb15 	stw	zero,-20(fp)
81133d88:	00001106 	br	81133dd0 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
81133d8c:	e0fffc17 	ldw	r3,-16(fp)
81133d90:	e0bffb17 	ldw	r2,-20(fp)
81133d94:	1885883a 	add	r2,r3,r2
81133d98:	1007883a 	mov	r3,r2
81133d9c:	d0a09c17 	ldw	r2,-32144(gp)
81133da0:	10800a17 	ldw	r2,40(r2)
81133da4:	1885883a 	add	r2,r3,r2
81133da8:	10800023 	ldbuio	r2,0(r2)
81133dac:	10803fcc 	andi	r2,r2,255
81133db0:	1009883a 	mov	r4,r2
81133db4:	e0fffd17 	ldw	r3,-12(fp)
81133db8:	e0bffb17 	ldw	r2,-20(fp)
81133dbc:	1885883a 	add	r2,r3,r2
81133dc0:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81133dc4:	e0bffb17 	ldw	r2,-20(fp)
81133dc8:	10800044 	addi	r2,r2,1
81133dcc:	e0bffb15 	stw	r2,-20(fp)
81133dd0:	e0bffb17 	ldw	r2,-20(fp)
81133dd4:	10800210 	cmplti	r2,r2,8
81133dd8:	103fec1e 	bne	r2,zero,81133d8c <__reset+0xfb113d8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81133ddc:	e03ffb15 	stw	zero,-20(fp)
81133de0:	00001306 	br	81133e30 <Read_File_Record_At_Offset+0xf4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
81133de4:	e0fffc17 	ldw	r3,-16(fp)
81133de8:	e0bffb17 	ldw	r2,-20(fp)
81133dec:	1885883a 	add	r2,r3,r2
81133df0:	1007883a 	mov	r3,r2
81133df4:	d0a09c17 	ldw	r2,-32144(gp)
81133df8:	10800a17 	ldw	r2,40(r2)
81133dfc:	1885883a 	add	r2,r3,r2
81133e00:	10800204 	addi	r2,r2,8
81133e04:	10800023 	ldbuio	r2,0(r2)
81133e08:	10803fcc 	andi	r2,r2,255
81133e0c:	1009883a 	mov	r4,r2
81133e10:	e0fffd17 	ldw	r3,-12(fp)
81133e14:	e0bffb17 	ldw	r2,-20(fp)
81133e18:	1885883a 	add	r2,r3,r2
81133e1c:	10800204 	addi	r2,r2,8
81133e20:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81133e24:	e0bffb17 	ldw	r2,-20(fp)
81133e28:	10800044 	addi	r2,r2,1
81133e2c:	e0bffb15 	stw	r2,-20(fp)
81133e30:	e0bffb17 	ldw	r2,-20(fp)
81133e34:	108000d0 	cmplti	r2,r2,3
81133e38:	103fea1e 	bne	r2,zero,81133de4 <__reset+0xfb113de4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
81133e3c:	d0a09c17 	ldw	r2,-32144(gp)
81133e40:	10c00a17 	ldw	r3,40(r2)
81133e44:	e0bffc17 	ldw	r2,-16(fp)
81133e48:	1885883a 	add	r2,r3,r2
81133e4c:	108002c4 	addi	r2,r2,11
81133e50:	10800023 	ldbuio	r2,0(r2)
81133e54:	10803fcc 	andi	r2,r2,255
81133e58:	1007883a 	mov	r3,r2
81133e5c:	e0bffd17 	ldw	r2,-12(fp)
81133e60:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
81133e64:	d0a09c17 	ldw	r2,-32144(gp)
81133e68:	10c00a17 	ldw	r3,40(r2)
81133e6c:	e0bffc17 	ldw	r2,-16(fp)
81133e70:	1885883a 	add	r2,r3,r2
81133e74:	10800384 	addi	r2,r2,14
81133e78:	1080002b 	ldhuio	r2,0(r2)
81133e7c:	10bfffcc 	andi	r2,r2,65535
81133e80:	1007883a 	mov	r3,r2
81133e84:	e0bffd17 	ldw	r2,-12(fp)
81133e88:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
81133e8c:	d0a09c17 	ldw	r2,-32144(gp)
81133e90:	10c00a17 	ldw	r3,40(r2)
81133e94:	e0bffc17 	ldw	r2,-16(fp)
81133e98:	1885883a 	add	r2,r3,r2
81133e9c:	10800404 	addi	r2,r2,16
81133ea0:	1080002b 	ldhuio	r2,0(r2)
81133ea4:	10bfffcc 	andi	r2,r2,65535
81133ea8:	1007883a 	mov	r3,r2
81133eac:	e0bffd17 	ldw	r2,-12(fp)
81133eb0:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
81133eb4:	d0a09c17 	ldw	r2,-32144(gp)
81133eb8:	10c00a17 	ldw	r3,40(r2)
81133ebc:	e0bffc17 	ldw	r2,-16(fp)
81133ec0:	1885883a 	add	r2,r3,r2
81133ec4:	10800484 	addi	r2,r2,18
81133ec8:	1080002b 	ldhuio	r2,0(r2)
81133ecc:	10bfffcc 	andi	r2,r2,65535
81133ed0:	1007883a 	mov	r3,r2
81133ed4:	e0bffd17 	ldw	r2,-12(fp)
81133ed8:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
81133edc:	d0a09c17 	ldw	r2,-32144(gp)
81133ee0:	10c00a17 	ldw	r3,40(r2)
81133ee4:	e0bffc17 	ldw	r2,-16(fp)
81133ee8:	1885883a 	add	r2,r3,r2
81133eec:	10800584 	addi	r2,r2,22
81133ef0:	1080002b 	ldhuio	r2,0(r2)
81133ef4:	10bfffcc 	andi	r2,r2,65535
81133ef8:	1007883a 	mov	r3,r2
81133efc:	e0bffd17 	ldw	r2,-12(fp)
81133f00:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
81133f04:	d0a09c17 	ldw	r2,-32144(gp)
81133f08:	10c00a17 	ldw	r3,40(r2)
81133f0c:	e0bffc17 	ldw	r2,-16(fp)
81133f10:	1885883a 	add	r2,r3,r2
81133f14:	10800604 	addi	r2,r2,24
81133f18:	1080002b 	ldhuio	r2,0(r2)
81133f1c:	10bfffcc 	andi	r2,r2,65535
81133f20:	1007883a 	mov	r3,r2
81133f24:	e0bffd17 	ldw	r2,-12(fp)
81133f28:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
81133f2c:	d0a09c17 	ldw	r2,-32144(gp)
81133f30:	10c00a17 	ldw	r3,40(r2)
81133f34:	e0bffc17 	ldw	r2,-16(fp)
81133f38:	1885883a 	add	r2,r3,r2
81133f3c:	10800684 	addi	r2,r2,26
81133f40:	1080002b 	ldhuio	r2,0(r2)
81133f44:	10bfffcc 	andi	r2,r2,65535
81133f48:	1007883a 	mov	r3,r2
81133f4c:	e0bffd17 	ldw	r2,-12(fp)
81133f50:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
81133f54:	d0a09c17 	ldw	r2,-32144(gp)
81133f58:	10c00a17 	ldw	r3,40(r2)
81133f5c:	e0bffc17 	ldw	r2,-16(fp)
81133f60:	1885883a 	add	r2,r3,r2
81133f64:	10800704 	addi	r2,r2,28
81133f68:	10800037 	ldwio	r2,0(r2)
81133f6c:	1007883a 	mov	r3,r2
81133f70:	e0bffd17 	ldw	r2,-12(fp)
81133f74:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
81133f78:	e0bffd17 	ldw	r2,-12(fp)
81133f7c:	e0fffe17 	ldw	r3,-8(fp)
81133f80:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
81133f84:	e0bffd17 	ldw	r2,-12(fp)
81133f88:	e0ffff17 	ldw	r3,-4(fp)
81133f8c:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
81133f90:	e0bffc17 	ldw	r2,-16(fp)
81133f94:	1007883a 	mov	r3,r2
81133f98:	e0bffd17 	ldw	r2,-12(fp)
81133f9c:	10c00c0d 	sth	r3,48(r2)
		result = true;
81133fa0:	00800044 	movi	r2,1
81133fa4:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
81133fa8:	e0bffa17 	ldw	r2,-24(fp)
}
81133fac:	e037883a 	mov	sp,fp
81133fb0:	dfc00117 	ldw	ra,4(sp)
81133fb4:	df000017 	ldw	fp,0(sp)
81133fb8:	dec00204 	addi	sp,sp,8
81133fbc:	f800283a 	ret

81133fc0 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
81133fc0:	defff904 	addi	sp,sp,-28
81133fc4:	de00012e 	bgeu	sp,et,81133fcc <Write_File_Record_At_Offset+0xc>
81133fc8:	003b68fa 	trap	3
81133fcc:	dfc00615 	stw	ra,24(sp)
81133fd0:	df000515 	stw	fp,20(sp)
81133fd4:	df000504 	addi	fp,sp,20
81133fd8:	e13ffe15 	stw	r4,-8(fp)
81133fdc:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81133fe0:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81133fe4:	e0bffe17 	ldw	r2,-8(fp)
81133fe8:	108007cc 	andi	r2,r2,31
81133fec:	1000931e 	bne	r2,zero,8113423c <Write_File_Record_At_Offset+0x27c>
81133ff0:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
81133ff4:	10009126 	beq	r2,zero,8113423c <Write_File_Record_At_Offset+0x27c>
81133ff8:	d0a09317 	ldw	r2,-32180(gp)
81133ffc:	10008f26 	beq	r2,zero,8113423c <Write_File_Record_At_Offset+0x27c>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81134000:	e03ffc15 	stw	zero,-16(fp)
81134004:	00001f06 	br	81134084 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
81134008:	e0bffc17 	ldw	r2,-16(fp)
8113400c:	10800044 	addi	r2,r2,1
81134010:	e0ffff17 	ldw	r3,-4(fp)
81134014:	1885883a 	add	r2,r3,r2
81134018:	10800003 	ldbu	r2,0(r2)
8113401c:	10803fcc 	andi	r2,r2,255
81134020:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
81134024:	e0bffd0f 	ldh	r2,-12(fp)
81134028:	1004923a 	slli	r2,r2,8
8113402c:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
81134030:	e0ffff17 	ldw	r3,-4(fp)
81134034:	e0bffc17 	ldw	r2,-16(fp)
81134038:	1885883a 	add	r2,r3,r2
8113403c:	10800003 	ldbu	r2,0(r2)
81134040:	10c03fcc 	andi	r3,r2,255
81134044:	e0bffd0b 	ldhu	r2,-12(fp)
81134048:	1884b03a 	or	r2,r3,r2
8113404c:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
81134050:	e0fffe17 	ldw	r3,-8(fp)
81134054:	e0bffc17 	ldw	r2,-16(fp)
81134058:	1885883a 	add	r2,r3,r2
8113405c:	1007883a 	mov	r3,r2
81134060:	d0a09c17 	ldw	r2,-32144(gp)
81134064:	10800a17 	ldw	r2,40(r2)
81134068:	1885883a 	add	r2,r3,r2
8113406c:	1007883a 	mov	r3,r2
81134070:	e0bffd0f 	ldh	r2,-12(fp)
81134074:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81134078:	e0bffc17 	ldw	r2,-16(fp)
8113407c:	10800084 	addi	r2,r2,2
81134080:	e0bffc15 	stw	r2,-16(fp)
81134084:	e0bffc17 	ldw	r2,-16(fp)
81134088:	10800210 	cmplti	r2,r2,8
8113408c:	103fde1e 	bne	r2,zero,81134008 <__reset+0xfb114008>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81134090:	e03ffc15 	stw	zero,-16(fp)
81134094:	00001306 	br	811340e4 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
81134098:	e0fffe17 	ldw	r3,-8(fp)
8113409c:	e0bffc17 	ldw	r2,-16(fp)
811340a0:	1885883a 	add	r2,r3,r2
811340a4:	1007883a 	mov	r3,r2
811340a8:	d0a09c17 	ldw	r2,-32144(gp)
811340ac:	10800a17 	ldw	r2,40(r2)
811340b0:	1885883a 	add	r2,r3,r2
811340b4:	10800204 	addi	r2,r2,8
811340b8:	1009883a 	mov	r4,r2
811340bc:	e0ffff17 	ldw	r3,-4(fp)
811340c0:	e0bffc17 	ldw	r2,-16(fp)
811340c4:	1885883a 	add	r2,r3,r2
811340c8:	10800204 	addi	r2,r2,8
811340cc:	10800003 	ldbu	r2,0(r2)
811340d0:	10803fcc 	andi	r2,r2,255
811340d4:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
811340d8:	e0bffc17 	ldw	r2,-16(fp)
811340dc:	10800044 	addi	r2,r2,1
811340e0:	e0bffc15 	stw	r2,-16(fp)
811340e4:	e0bffc17 	ldw	r2,-16(fp)
811340e8:	108000d0 	cmplti	r2,r2,3
811340ec:	103fea1e 	bne	r2,zero,81134098 <__reset+0xfb114098>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
811340f0:	d0a09c17 	ldw	r2,-32144(gp)
811340f4:	10c00a17 	ldw	r3,40(r2)
811340f8:	e0bffe17 	ldw	r2,-8(fp)
811340fc:	1885883a 	add	r2,r3,r2
81134100:	108002c4 	addi	r2,r2,11
81134104:	1007883a 	mov	r3,r2
81134108:	e0bfff17 	ldw	r2,-4(fp)
8113410c:	108002c3 	ldbu	r2,11(r2)
81134110:	10803fcc 	andi	r2,r2,255
81134114:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
81134118:	d0a09c17 	ldw	r2,-32144(gp)
8113411c:	10c00a17 	ldw	r3,40(r2)
81134120:	e0bffe17 	ldw	r2,-8(fp)
81134124:	1885883a 	add	r2,r3,r2
81134128:	10800384 	addi	r2,r2,14
8113412c:	1007883a 	mov	r3,r2
81134130:	e0bfff17 	ldw	r2,-4(fp)
81134134:	1080030b 	ldhu	r2,12(r2)
81134138:	10bfffcc 	andi	r2,r2,65535
8113413c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
81134140:	d0a09c17 	ldw	r2,-32144(gp)
81134144:	10c00a17 	ldw	r3,40(r2)
81134148:	e0bffe17 	ldw	r2,-8(fp)
8113414c:	1885883a 	add	r2,r3,r2
81134150:	10800404 	addi	r2,r2,16
81134154:	1007883a 	mov	r3,r2
81134158:	e0bfff17 	ldw	r2,-4(fp)
8113415c:	1080038b 	ldhu	r2,14(r2)
81134160:	10bfffcc 	andi	r2,r2,65535
81134164:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
81134168:	d0a09c17 	ldw	r2,-32144(gp)
8113416c:	10c00a17 	ldw	r3,40(r2)
81134170:	e0bffe17 	ldw	r2,-8(fp)
81134174:	1885883a 	add	r2,r3,r2
81134178:	10800484 	addi	r2,r2,18
8113417c:	1007883a 	mov	r3,r2
81134180:	e0bfff17 	ldw	r2,-4(fp)
81134184:	1080040b 	ldhu	r2,16(r2)
81134188:	10bfffcc 	andi	r2,r2,65535
8113418c:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
81134190:	d0a09c17 	ldw	r2,-32144(gp)
81134194:	10c00a17 	ldw	r3,40(r2)
81134198:	e0bffe17 	ldw	r2,-8(fp)
8113419c:	1885883a 	add	r2,r3,r2
811341a0:	10800584 	addi	r2,r2,22
811341a4:	1007883a 	mov	r3,r2
811341a8:	e0bfff17 	ldw	r2,-4(fp)
811341ac:	1080048b 	ldhu	r2,18(r2)
811341b0:	10bfffcc 	andi	r2,r2,65535
811341b4:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
811341b8:	d0a09c17 	ldw	r2,-32144(gp)
811341bc:	10c00a17 	ldw	r3,40(r2)
811341c0:	e0bffe17 	ldw	r2,-8(fp)
811341c4:	1885883a 	add	r2,r3,r2
811341c8:	10800604 	addi	r2,r2,24
811341cc:	1007883a 	mov	r3,r2
811341d0:	e0bfff17 	ldw	r2,-4(fp)
811341d4:	1080050b 	ldhu	r2,20(r2)
811341d8:	10bfffcc 	andi	r2,r2,65535
811341dc:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
811341e0:	d0a09c17 	ldw	r2,-32144(gp)
811341e4:	10c00a17 	ldw	r3,40(r2)
811341e8:	e0bffe17 	ldw	r2,-8(fp)
811341ec:	1885883a 	add	r2,r3,r2
811341f0:	10800684 	addi	r2,r2,26
811341f4:	1007883a 	mov	r3,r2
811341f8:	e0bfff17 	ldw	r2,-4(fp)
811341fc:	1080058b 	ldhu	r2,22(r2)
81134200:	10bfffcc 	andi	r2,r2,65535
81134204:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
81134208:	d0a09c17 	ldw	r2,-32144(gp)
8113420c:	10c00a17 	ldw	r3,40(r2)
81134210:	e0bffe17 	ldw	r2,-8(fp)
81134214:	1885883a 	add	r2,r3,r2
81134218:	10800704 	addi	r2,r2,28
8113421c:	1007883a 	mov	r3,r2
81134220:	e0bfff17 	ldw	r2,-4(fp)
81134224:	10800617 	ldw	r2,24(r2)
81134228:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
8113422c:	00800044 	movi	r2,1
81134230:	d0a09d15 	stw	r2,-32140(gp)
        result = true;
81134234:	00800044 	movi	r2,1
81134238:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
8113423c:	e0bffb17 	ldw	r2,-20(fp)
}
81134240:	e037883a 	mov	sp,fp
81134244:	dfc00117 	ldw	ra,4(sp)
81134248:	df000017 	ldw	fp,0(sp)
8113424c:	dec00204 	addi	sp,sp,8
81134250:	f800283a 	ret

81134254 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
81134254:	defff904 	addi	sp,sp,-28
81134258:	de00012e 	bgeu	sp,et,81134260 <Check_for_DOS_FAT+0xc>
8113425c:	003b68fa 	trap	3
81134260:	dfc00615 	stw	ra,24(sp)
81134264:	df000515 	stw	fp,20(sp)
81134268:	df000504 	addi	fp,sp,20
8113426c:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
81134270:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
81134274:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
81134278:	e17fff17 	ldw	r5,-4(fp)
8113427c:	0009883a 	mov	r4,zero
81134280:	113390c0 	call	8113390c <Read_Sector_Data>
81134284:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
81134288:	d0a09c17 	ldw	r2,-32144(gp)
8113428c:	10800a17 	ldw	r2,40(r2)
81134290:	10807f84 	addi	r2,r2,510
81134294:	1080002b 	ldhuio	r2,0(r2)
81134298:	10bfffcc 	andi	r2,r2,65535
8113429c:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
811342a0:	e0bffe0f 	ldh	r2,-8(fp)
811342a4:	10ffffcc 	andi	r3,r2,65535
811342a8:	00aa9554 	movui	r2,43605
811342ac:	1881841e 	bne	r3,r2,811348c0 <Check_for_DOS_FAT+0x66c>
811342b0:	e0bffb17 	ldw	r2,-20(fp)
811342b4:	10018226 	beq	r2,zero,811348c0 <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
811342b8:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
811342bc:	d0a09c17 	ldw	r2,-32144(gp)
811342c0:	10800a17 	ldw	r2,40(r2)
811342c4:	10800023 	ldbuio	r2,0(r2)
811342c8:	10803fcc 	andi	r2,r2,255
811342cc:	1007883a 	mov	r3,r2
811342d0:	00a04574 	movhi	r2,33045
811342d4:	1081f504 	addi	r2,r2,2004
811342d8:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
811342dc:	d0a09c17 	ldw	r2,-32144(gp)
811342e0:	10800a17 	ldw	r2,40(r2)
811342e4:	10800044 	addi	r2,r2,1
811342e8:	10800023 	ldbuio	r2,0(r2)
811342ec:	10803fcc 	andi	r2,r2,255
811342f0:	1007883a 	mov	r3,r2
811342f4:	00a04574 	movhi	r2,33045
811342f8:	1081f504 	addi	r2,r2,2004
811342fc:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
81134300:	d0a09c17 	ldw	r2,-32144(gp)
81134304:	10800a17 	ldw	r2,40(r2)
81134308:	10800084 	addi	r2,r2,2
8113430c:	10800023 	ldbuio	r2,0(r2)
81134310:	10803fcc 	andi	r2,r2,255
81134314:	1007883a 	mov	r3,r2
81134318:	00a04574 	movhi	r2,33045
8113431c:	1081f504 	addi	r2,r2,2004
81134320:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
81134324:	e03ffc15 	stw	zero,-16(fp)
81134328:	00001106 	br	81134370 <Check_for_DOS_FAT+0x11c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
8113432c:	d0a09c17 	ldw	r2,-32144(gp)
81134330:	10c00a17 	ldw	r3,40(r2)
81134334:	e0bffc17 	ldw	r2,-16(fp)
81134338:	1885883a 	add	r2,r3,r2
8113433c:	108000c4 	addi	r2,r2,3
81134340:	10800023 	ldbuio	r2,0(r2)
81134344:	10803fcc 	andi	r2,r2,255
81134348:	1009883a 	mov	r4,r2
8113434c:	00a04574 	movhi	r2,33045
81134350:	1081f504 	addi	r2,r2,2004
81134354:	e0fffc17 	ldw	r3,-16(fp)
81134358:	10c5883a 	add	r2,r2,r3
8113435c:	108000c4 	addi	r2,r2,3
81134360:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
81134364:	e0bffc17 	ldw	r2,-16(fp)
81134368:	10800044 	addi	r2,r2,1
8113436c:	e0bffc15 	stw	r2,-16(fp)
81134370:	e0bffc17 	ldw	r2,-16(fp)
81134374:	10800210 	cmplti	r2,r2,8
81134378:	103fec1e 	bne	r2,zero,8113432c <__reset+0xfb11432c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
8113437c:	d0a09c17 	ldw	r2,-32144(gp)
81134380:	10800a17 	ldw	r2,40(r2)
81134384:	10800304 	addi	r2,r2,12
81134388:	10800023 	ldbuio	r2,0(r2)
8113438c:	10803fcc 	andi	r2,r2,255
81134390:	1004923a 	slli	r2,r2,8
81134394:	1007883a 	mov	r3,r2
81134398:	d0a09c17 	ldw	r2,-32144(gp)
8113439c:	10800a17 	ldw	r2,40(r2)
811343a0:	108002c4 	addi	r2,r2,11
811343a4:	10800023 	ldbuio	r2,0(r2)
811343a8:	10803fcc 	andi	r2,r2,255
811343ac:	10803fcc 	andi	r2,r2,255
811343b0:	1080201c 	xori	r2,r2,128
811343b4:	10bfe004 	addi	r2,r2,-128
811343b8:	1884b03a 	or	r2,r3,r2
811343bc:	1007883a 	mov	r3,r2
811343c0:	00a04574 	movhi	r2,33045
811343c4:	1081f504 	addi	r2,r2,2004
811343c8:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
811343cc:	d0a09c17 	ldw	r2,-32144(gp)
811343d0:	10800a17 	ldw	r2,40(r2)
811343d4:	10800344 	addi	r2,r2,13
811343d8:	10800023 	ldbuio	r2,0(r2)
811343dc:	10803fcc 	andi	r2,r2,255
811343e0:	1007883a 	mov	r3,r2
811343e4:	00a04574 	movhi	r2,33045
811343e8:	1081f504 	addi	r2,r2,2004
811343ec:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
811343f0:	d0a09c17 	ldw	r2,-32144(gp)
811343f4:	10800a17 	ldw	r2,40(r2)
811343f8:	10800384 	addi	r2,r2,14
811343fc:	1080002b 	ldhuio	r2,0(r2)
81134400:	10bfffcc 	andi	r2,r2,65535
81134404:	1007883a 	mov	r3,r2
81134408:	00a04574 	movhi	r2,33045
8113440c:	1081f504 	addi	r2,r2,2004
81134410:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
81134414:	d0a09c17 	ldw	r2,-32144(gp)
81134418:	10800a17 	ldw	r2,40(r2)
8113441c:	10800404 	addi	r2,r2,16
81134420:	10800023 	ldbuio	r2,0(r2)
81134424:	10803fcc 	andi	r2,r2,255
81134428:	1007883a 	mov	r3,r2
8113442c:	00a04574 	movhi	r2,33045
81134430:	1081f504 	addi	r2,r2,2004
81134434:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
81134438:	d0a09c17 	ldw	r2,-32144(gp)
8113443c:	10800a17 	ldw	r2,40(r2)
81134440:	10800484 	addi	r2,r2,18
81134444:	10800023 	ldbuio	r2,0(r2)
81134448:	10803fcc 	andi	r2,r2,255
8113444c:	1004923a 	slli	r2,r2,8
81134450:	1007883a 	mov	r3,r2
81134454:	d0a09c17 	ldw	r2,-32144(gp)
81134458:	10800a17 	ldw	r2,40(r2)
8113445c:	10800444 	addi	r2,r2,17
81134460:	10800023 	ldbuio	r2,0(r2)
81134464:	10803fcc 	andi	r2,r2,255
81134468:	10803fcc 	andi	r2,r2,255
8113446c:	1884b03a 	or	r2,r3,r2
81134470:	1007883a 	mov	r3,r2
81134474:	00a04574 	movhi	r2,33045
81134478:	1081f504 	addi	r2,r2,2004
8113447c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
81134480:	d0a09c17 	ldw	r2,-32144(gp)
81134484:	10800a17 	ldw	r2,40(r2)
81134488:	10800504 	addi	r2,r2,20
8113448c:	10800023 	ldbuio	r2,0(r2)
81134490:	10803fcc 	andi	r2,r2,255
81134494:	1004923a 	slli	r2,r2,8
81134498:	1007883a 	mov	r3,r2
8113449c:	d0a09c17 	ldw	r2,-32144(gp)
811344a0:	10800a17 	ldw	r2,40(r2)
811344a4:	108004c4 	addi	r2,r2,19
811344a8:	10800023 	ldbuio	r2,0(r2)
811344ac:	10803fcc 	andi	r2,r2,255
811344b0:	10803fcc 	andi	r2,r2,255
811344b4:	1884b03a 	or	r2,r3,r2
811344b8:	1007883a 	mov	r3,r2
811344bc:	00a04574 	movhi	r2,33045
811344c0:	1081f504 	addi	r2,r2,2004
811344c4:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
811344c8:	d0a09c17 	ldw	r2,-32144(gp)
811344cc:	10800a17 	ldw	r2,40(r2)
811344d0:	10800544 	addi	r2,r2,21
811344d4:	10800023 	ldbuio	r2,0(r2)
811344d8:	10803fcc 	andi	r2,r2,255
811344dc:	1007883a 	mov	r3,r2
811344e0:	00a04574 	movhi	r2,33045
811344e4:	1081f504 	addi	r2,r2,2004
811344e8:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
811344ec:	d0a09c17 	ldw	r2,-32144(gp)
811344f0:	10800a17 	ldw	r2,40(r2)
811344f4:	10800584 	addi	r2,r2,22
811344f8:	1080002b 	ldhuio	r2,0(r2)
811344fc:	10bfffcc 	andi	r2,r2,65535
81134500:	1007883a 	mov	r3,r2
81134504:	00a04574 	movhi	r2,33045
81134508:	1081f504 	addi	r2,r2,2004
8113450c:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
81134510:	d0a09c17 	ldw	r2,-32144(gp)
81134514:	10800a17 	ldw	r2,40(r2)
81134518:	10800604 	addi	r2,r2,24
8113451c:	1080002b 	ldhuio	r2,0(r2)
81134520:	10bfffcc 	andi	r2,r2,65535
81134524:	1007883a 	mov	r3,r2
81134528:	00a04574 	movhi	r2,33045
8113452c:	1081f504 	addi	r2,r2,2004
81134530:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
81134534:	d0a09c17 	ldw	r2,-32144(gp)
81134538:	10800a17 	ldw	r2,40(r2)
8113453c:	10800684 	addi	r2,r2,26
81134540:	1080002b 	ldhuio	r2,0(r2)
81134544:	10bfffcc 	andi	r2,r2,65535
81134548:	1007883a 	mov	r3,r2
8113454c:	00a04574 	movhi	r2,33045
81134550:	1081f504 	addi	r2,r2,2004
81134554:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
81134558:	d0a09c17 	ldw	r2,-32144(gp)
8113455c:	10800a17 	ldw	r2,40(r2)
81134560:	10800704 	addi	r2,r2,28
81134564:	10800037 	ldwio	r2,0(r2)
81134568:	1007883a 	mov	r3,r2
8113456c:	00a04574 	movhi	r2,33045
81134570:	1081f504 	addi	r2,r2,2004
81134574:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
81134578:	d0a09c17 	ldw	r2,-32144(gp)
8113457c:	10800a17 	ldw	r2,40(r2)
81134580:	10800804 	addi	r2,r2,32
81134584:	10800037 	ldwio	r2,0(r2)
81134588:	1007883a 	mov	r3,r2
8113458c:	00a04574 	movhi	r2,33045
81134590:	1081f504 	addi	r2,r2,2004
81134594:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
81134598:	d0a09c17 	ldw	r2,-32144(gp)
8113459c:	10800a17 	ldw	r2,40(r2)
811345a0:	10800904 	addi	r2,r2,36
811345a4:	10800023 	ldbuio	r2,0(r2)
811345a8:	10803fcc 	andi	r2,r2,255
811345ac:	1007883a 	mov	r3,r2
811345b0:	00a04574 	movhi	r2,33045
811345b4:	1081f504 	addi	r2,r2,2004
811345b8:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
811345bc:	d0a09c17 	ldw	r2,-32144(gp)
811345c0:	10800a17 	ldw	r2,40(r2)
811345c4:	10800944 	addi	r2,r2,37
811345c8:	10800023 	ldbuio	r2,0(r2)
811345cc:	10803fcc 	andi	r2,r2,255
811345d0:	1007883a 	mov	r3,r2
811345d4:	00a04574 	movhi	r2,33045
811345d8:	1081f504 	addi	r2,r2,2004
811345dc:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
811345e0:	d0a09c17 	ldw	r2,-32144(gp)
811345e4:	10800a17 	ldw	r2,40(r2)
811345e8:	10800984 	addi	r2,r2,38
811345ec:	10800023 	ldbuio	r2,0(r2)
811345f0:	10803fcc 	andi	r2,r2,255
811345f4:	1007883a 	mov	r3,r2
811345f8:	00a04574 	movhi	r2,33045
811345fc:	1081f504 	addi	r2,r2,2004
81134600:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
81134604:	00a04574 	movhi	r2,33045
81134608:	1081f504 	addi	r2,r2,2004
8113460c:	1080040b 	ldhu	r2,16(r2)
81134610:	10ffffcc 	andi	r3,r2,65535
81134614:	00a04574 	movhi	r2,33045
81134618:	1081f504 	addi	r2,r2,2004
8113461c:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
81134620:	00a04574 	movhi	r2,33045
81134624:	1081f504 	addi	r2,r2,2004
81134628:	10c01117 	ldw	r3,68(r2)
8113462c:	00a04574 	movhi	r2,33045
81134630:	1081f504 	addi	r2,r2,2004
81134634:	1080068b 	ldhu	r2,26(r2)
81134638:	10bfffcc 	andi	r2,r2,65535
8113463c:	1887883a 	add	r3,r3,r2
81134640:	00a04574 	movhi	r2,33045
81134644:	1081f504 	addi	r2,r2,2004
81134648:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
8113464c:	00a04574 	movhi	r2,33045
81134650:	1081f504 	addi	r2,r2,2004
81134654:	10c01217 	ldw	r3,72(r2)
81134658:	00a04574 	movhi	r2,33045
8113465c:	1081f504 	addi	r2,r2,2004
81134660:	1080068b 	ldhu	r2,26(r2)
81134664:	10bfffcc 	andi	r2,r2,65535
81134668:	1887883a 	add	r3,r3,r2
8113466c:	00a04574 	movhi	r2,33045
81134670:	1081f504 	addi	r2,r2,2004
81134674:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
81134678:	00a04574 	movhi	r2,33045
8113467c:	1081f504 	addi	r2,r2,2004
81134680:	10c01317 	ldw	r3,76(r2)
81134684:	00a04574 	movhi	r2,33045
81134688:	1081f504 	addi	r2,r2,2004
8113468c:	1080050b 	ldhu	r2,20(r2)
81134690:	10bfffcc 	andi	r2,r2,65535
81134694:	1008917a 	slli	r4,r2,5
81134698:	00a04574 	movhi	r2,33045
8113469c:	1081f504 	addi	r2,r2,2004
811346a0:	1080030b 	ldhu	r2,12(r2)
811346a4:	10bfffcc 	andi	r2,r2,65535
811346a8:	2085283a 	div	r2,r4,r2
811346ac:	1887883a 	add	r3,r3,r2
811346b0:	00a04574 	movhi	r2,33045
811346b4:	1081f504 	addi	r2,r2,2004
811346b8:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
811346bc:	00a04574 	movhi	r2,33045
811346c0:	1081f504 	addi	r2,r2,2004
811346c4:	1080058b 	ldhu	r2,22(r2)
811346c8:	10bfffcc 	andi	r2,r2,65535
811346cc:	10000b26 	beq	r2,zero,811346fc <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
811346d0:	00a04574 	movhi	r2,33045
811346d4:	1081f504 	addi	r2,r2,2004
811346d8:	1080058b 	ldhu	r2,22(r2)
811346dc:	10ffffcc 	andi	r3,r2,65535
811346e0:	00a04574 	movhi	r2,33045
811346e4:	1081f504 	addi	r2,r2,2004
811346e8:	10800383 	ldbu	r2,14(r2)
811346ec:	10803fcc 	andi	r2,r2,255
811346f0:	1885283a 	div	r2,r3,r2
811346f4:	e0bffd15 	stw	r2,-12(fp)
811346f8:	00000906 	br	81134720 <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
811346fc:	00a04574 	movhi	r2,33045
81134700:	1081f504 	addi	r2,r2,2004
81134704:	10c00917 	ldw	r3,36(r2)
81134708:	00a04574 	movhi	r2,33045
8113470c:	1081f504 	addi	r2,r2,2004
81134710:	10800383 	ldbu	r2,14(r2)
81134714:	10803fcc 	andi	r2,r2,255
81134718:	1885203a 	divu	r2,r3,r2
8113471c:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
81134720:	e0bffd17 	ldw	r2,-12(fp)
81134724:	1083fdc8 	cmpgei	r2,r2,4087
81134728:	1000051e 	bne	r2,zero,81134740 <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
8113472c:	00a04574 	movhi	r2,33045
81134730:	1081f504 	addi	r2,r2,2004
81134734:	00c00304 	movi	r3,12
81134738:	10c01085 	stb	r3,66(r2)
8113473c:	00000c06 	br	81134770 <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
81134740:	e0bffd17 	ldw	r2,-12(fp)
81134744:	00fffb54 	movui	r3,65517
81134748:	18800516 	blt	r3,r2,81134760 <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
8113474c:	00a04574 	movhi	r2,33045
81134750:	1081f504 	addi	r2,r2,2004
81134754:	00c00404 	movi	r3,16
81134758:	10c01085 	stb	r3,66(r2)
8113475c:	00000406 	br	81134770 <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
81134760:	00a04574 	movhi	r2,33045
81134764:	1081f504 	addi	r2,r2,2004
81134768:	00c00804 	movi	r3,32
8113476c:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
81134770:	e03ffc15 	stw	zero,-16(fp)
81134774:	00001106 	br	811347bc <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
81134778:	d0a09c17 	ldw	r2,-32144(gp)
8113477c:	10c00a17 	ldw	r3,40(r2)
81134780:	e0bffc17 	ldw	r2,-16(fp)
81134784:	1885883a 	add	r2,r3,r2
81134788:	108009c4 	addi	r2,r2,39
8113478c:	10800023 	ldbuio	r2,0(r2)
81134790:	10803fcc 	andi	r2,r2,255
81134794:	1009883a 	mov	r4,r2
81134798:	00a04574 	movhi	r2,33045
8113479c:	1081f504 	addi	r2,r2,2004
811347a0:	e0fffc17 	ldw	r3,-16(fp)
811347a4:	10c5883a 	add	r2,r2,r3
811347a8:	10800ac4 	addi	r2,r2,43
811347ac:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
811347b0:	e0bffc17 	ldw	r2,-16(fp)
811347b4:	10800044 	addi	r2,r2,1
811347b8:	e0bffc15 	stw	r2,-16(fp)
811347bc:	e0bffc17 	ldw	r2,-16(fp)
811347c0:	10800110 	cmplti	r2,r2,4
811347c4:	103fec1e 	bne	r2,zero,81134778 <__reset+0xfb114778>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
811347c8:	e03ffc15 	stw	zero,-16(fp)
811347cc:	00001106 	br	81134814 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
811347d0:	d0a09c17 	ldw	r2,-32144(gp)
811347d4:	10c00a17 	ldw	r3,40(r2)
811347d8:	e0bffc17 	ldw	r2,-16(fp)
811347dc:	1885883a 	add	r2,r3,r2
811347e0:	10800ac4 	addi	r2,r2,43
811347e4:	10800023 	ldbuio	r2,0(r2)
811347e8:	10803fcc 	andi	r2,r2,255
811347ec:	1009883a 	mov	r4,r2
811347f0:	00a04574 	movhi	r2,33045
811347f4:	1081f504 	addi	r2,r2,2004
811347f8:	e0fffc17 	ldw	r3,-16(fp)
811347fc:	10c5883a 	add	r2,r2,r3
81134800:	10800bc4 	addi	r2,r2,47
81134804:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
81134808:	e0bffc17 	ldw	r2,-16(fp)
8113480c:	10800044 	addi	r2,r2,1
81134810:	e0bffc15 	stw	r2,-16(fp)
81134814:	e0bffc17 	ldw	r2,-16(fp)
81134818:	108002d0 	cmplti	r2,r2,11
8113481c:	103fec1e 	bne	r2,zero,811347d0 <__reset+0xfb1147d0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
81134820:	e03ffc15 	stw	zero,-16(fp)
81134824:	00001106 	br	8113486c <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
81134828:	d0a09c17 	ldw	r2,-32144(gp)
8113482c:	10c00a17 	ldw	r3,40(r2)
81134830:	e0bffc17 	ldw	r2,-16(fp)
81134834:	1885883a 	add	r2,r3,r2
81134838:	10800d84 	addi	r2,r2,54
8113483c:	10800023 	ldbuio	r2,0(r2)
81134840:	10803fcc 	andi	r2,r2,255
81134844:	1009883a 	mov	r4,r2
81134848:	00a04574 	movhi	r2,33045
8113484c:	1081f504 	addi	r2,r2,2004
81134850:	e0fffc17 	ldw	r3,-16(fp)
81134854:	10c5883a 	add	r2,r2,r3
81134858:	10800e84 	addi	r2,r2,58
8113485c:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
81134860:	e0bffc17 	ldw	r2,-16(fp)
81134864:	10800044 	addi	r2,r2,1
81134868:	e0bffc15 	stw	r2,-16(fp)
8113486c:	e0bffc17 	ldw	r2,-16(fp)
81134870:	10800210 	cmplti	r2,r2,8
81134874:	103fec1e 	bne	r2,zero,81134828 <__reset+0xfb114828>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81134878:	e03ffc15 	stw	zero,-16(fp)
8113487c:	00000a06 	br	811348a8 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
81134880:	00a04574 	movhi	r2,33045
81134884:	10820a04 	addi	r2,r2,2088
81134888:	e0fffc17 	ldw	r3,-16(fp)
8113488c:	180691ba 	slli	r3,r3,6
81134890:	10c5883a 	add	r2,r2,r3
81134894:	10800f04 	addi	r2,r2,60
81134898:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8113489c:	e0bffc17 	ldw	r2,-16(fp)
811348a0:	10800044 	addi	r2,r2,1
811348a4:	e0bffc15 	stw	r2,-16(fp)
811348a8:	e0bffc17 	ldw	r2,-16(fp)
811348ac:	10800510 	cmplti	r2,r2,20
811348b0:	103ff31e 	bne	r2,zero,81134880 <__reset+0xfb114880>
		{
			active_files[counter].in_use = false;
		}
		result = true;
811348b4:	00800044 	movi	r2,1
811348b8:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
811348bc:	00000106 	br	811348c4 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
811348c0:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
811348c4:	e0bffb17 	ldw	r2,-20(fp)
}
811348c8:	e037883a 	mov	sp,fp
811348cc:	dfc00117 	ldw	ra,4(sp)
811348d0:	df000017 	ldw	fp,0(sp)
811348d4:	dec00204 	addi	sp,sp,8
811348d8:	f800283a 	ret

811348dc <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
811348dc:	defffc04 	addi	sp,sp,-16
811348e0:	de00012e 	bgeu	sp,et,811348e8 <Look_for_FAT16+0xc>
811348e4:	003b68fa 	trap	3
811348e8:	dfc00315 	stw	ra,12(sp)
811348ec:	df000215 	stw	fp,8(sp)
811348f0:	df000204 	addi	fp,sp,8
	bool result = false;
811348f4:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
811348f8:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
811348fc:	10002e26 	beq	r2,zero,811349b8 <Look_for_FAT16+0xdc>
	{
		short int csd_file_format = *CSD_register_w0;
81134900:	d0a09617 	ldw	r2,-32168(gp)
81134904:	1080000b 	ldhu	r2,0(r2)
81134908:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
8113490c:	d0209a15 	stw	zero,-32152(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
81134910:	d0209b15 	stw	zero,-32148(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
81134914:	e0bfff0f 	ldh	r2,-4(fp)
81134918:	10002716 	blt	r2,zero,811349b8 <Look_for_FAT16+0xdc>
8113491c:	e0bfff0b 	ldhu	r2,-4(fp)
81134920:	10bfffcc 	andi	r2,r2,65535
81134924:	1083000c 	andi	r2,r2,3072
81134928:	10830020 	cmpeqi	r2,r2,3072
8113492c:	1000221e 	bne	r2,zero,811349b8 <Look_for_FAT16+0xdc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
81134930:	e0bfff0b 	ldhu	r2,-4(fp)
81134934:	10bfffcc 	andi	r2,r2,65535
81134938:	1083000c 	andi	r2,r2,3072
8113493c:	10810018 	cmpnei	r2,r2,1024
81134940:	1000031e 	bne	r2,zero,81134950 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
81134944:	0009883a 	mov	r4,zero
81134948:	11342540 	call	81134254 <Check_for_DOS_FAT>
8113494c:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
81134950:	e0bfff0b 	ldhu	r2,-4(fp)
81134954:	10bfffcc 	andi	r2,r2,65535
81134958:	1083000c 	andi	r2,r2,3072
8113495c:	1000061e 	bne	r2,zero,81134978 <Look_for_FAT16+0x9c>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
81134960:	1133b900 	call	81133b90 <Check_for_Master_Boot_Record>
81134964:	10000426 	beq	r2,zero,81134978 <Look_for_FAT16+0x9c>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
81134968:	d0a09a17 	ldw	r2,-32152(gp)
8113496c:	1009883a 	mov	r4,r2
81134970:	11342540 	call	81134254 <Check_for_DOS_FAT>
81134974:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
81134978:	e0bffe17 	ldw	r2,-8(fp)
8113497c:	10800058 	cmpnei	r2,r2,1
81134980:	10000d1e 	bne	r2,zero,811349b8 <Look_for_FAT16+0xdc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
81134984:	00a04574 	movhi	r2,33045
81134988:	1081f504 	addi	r2,r2,2004
8113498c:	10801083 	ldbu	r2,66(r2)
81134990:	10803fcc 	andi	r2,r2,255
81134994:	10800420 	cmpeqi	r2,r2,16
81134998:	1000021e 	bne	r2,zero,811349a4 <Look_for_FAT16+0xc8>
				{
					result = false;
8113499c:	e03ffe15 	stw	zero,-8(fp)
811349a0:	00000506 	br	811349b8 <Look_for_FAT16+0xdc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
811349a4:	00a04574 	movhi	r2,33045
811349a8:	1081f504 	addi	r2,r2,2004
811349ac:	1080058b 	ldhu	r2,22(r2)
811349b0:	10bfffcc 	andi	r2,r2,65535
811349b4:	d0a09b15 	stw	r2,-32148(gp)
				}
			}
		}
	}
	return result;
811349b8:	e0bffe17 	ldw	r2,-8(fp)
}
811349bc:	e037883a 	mov	sp,fp
811349c0:	dfc00117 	ldw	ra,4(sp)
811349c4:	df000017 	ldw	fp,0(sp)
811349c8:	dec00204 	addi	sp,sp,8
811349cc:	f800283a 	ret

811349d0 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
811349d0:	defffb04 	addi	sp,sp,-20
811349d4:	de00012e 	bgeu	sp,et,811349dc <filename_to_upper_case+0xc>
811349d8:	003b68fa 	trap	3
811349dc:	dfc00415 	stw	ra,16(sp)
811349e0:	df000315 	stw	fp,12(sp)
811349e4:	df000304 	addi	fp,sp,12
811349e8:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
811349ec:	e13fff17 	ldw	r4,-4(fp)
811349f0:	1113ba80 	call	81113ba8 <strlen>
811349f4:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
811349f8:	e03ffd15 	stw	zero,-12(fp)
811349fc:	00001e06 	br	81134a78 <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
81134a00:	e0bffd17 	ldw	r2,-12(fp)
81134a04:	e0ffff17 	ldw	r3,-4(fp)
81134a08:	1885883a 	add	r2,r3,r2
81134a0c:	10800003 	ldbu	r2,0(r2)
81134a10:	10803fcc 	andi	r2,r2,255
81134a14:	1080201c 	xori	r2,r2,128
81134a18:	10bfe004 	addi	r2,r2,-128
81134a1c:	10801850 	cmplti	r2,r2,97
81134a20:	1000121e 	bne	r2,zero,81134a6c <filename_to_upper_case+0x9c>
81134a24:	e0bffd17 	ldw	r2,-12(fp)
81134a28:	e0ffff17 	ldw	r3,-4(fp)
81134a2c:	1885883a 	add	r2,r3,r2
81134a30:	10800003 	ldbu	r2,0(r2)
81134a34:	10803fcc 	andi	r2,r2,255
81134a38:	1080201c 	xori	r2,r2,128
81134a3c:	10bfe004 	addi	r2,r2,-128
81134a40:	10801ec8 	cmpgei	r2,r2,123
81134a44:	1000091e 	bne	r2,zero,81134a6c <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
81134a48:	e0bffd17 	ldw	r2,-12(fp)
81134a4c:	e0ffff17 	ldw	r3,-4(fp)
81134a50:	1885883a 	add	r2,r3,r2
81134a54:	e0fffd17 	ldw	r3,-12(fp)
81134a58:	e13fff17 	ldw	r4,-4(fp)
81134a5c:	20c7883a 	add	r3,r4,r3
81134a60:	18c00003 	ldbu	r3,0(r3)
81134a64:	18fff804 	addi	r3,r3,-32
81134a68:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
81134a6c:	e0bffd17 	ldw	r2,-12(fp)
81134a70:	10800044 	addi	r2,r2,1
81134a74:	e0bffd15 	stw	r2,-12(fp)
81134a78:	e0fffd17 	ldw	r3,-12(fp)
81134a7c:	e0bffe17 	ldw	r2,-8(fp)
81134a80:	18bfdf16 	blt	r3,r2,81134a00 <__reset+0xfb114a00>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
81134a84:	0001883a 	nop
81134a88:	e037883a 	mov	sp,fp
81134a8c:	dfc00117 	ldw	ra,4(sp)
81134a90:	df000017 	ldw	fp,0(sp)
81134a94:	dec00204 	addi	sp,sp,8
81134a98:	f800283a 	ret

81134a9c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
81134a9c:	defff804 	addi	sp,sp,-32
81134aa0:	de00012e 	bgeu	sp,et,81134aa8 <check_file_name_for_FAT16_compliance+0xc>
81134aa4:	003b68fa 	trap	3
81134aa8:	dfc00715 	stw	ra,28(sp)
81134aac:	df000615 	stw	fp,24(sp)
81134ab0:	df000604 	addi	fp,sp,24
81134ab4:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
81134ab8:	e13fff17 	ldw	r4,-4(fp)
81134abc:	1113ba80 	call	81113ba8 <strlen>
81134ac0:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
81134ac4:	00bfffc4 	movi	r2,-1
81134ac8:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
81134acc:	00bfffc4 	movi	r2,-1
81134ad0:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
81134ad4:	00800044 	movi	r2,1
81134ad8:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
81134adc:	e03ffa15 	stw	zero,-24(fp)
81134ae0:	00006d06 	br	81134c98 <check_file_name_for_FAT16_compliance+0x1fc>
    {
        if ((file_name[index] == ' ') ||
81134ae4:	e0bffa17 	ldw	r2,-24(fp)
81134ae8:	e0ffff17 	ldw	r3,-4(fp)
81134aec:	1885883a 	add	r2,r3,r2
81134af0:	10800003 	ldbu	r2,0(r2)
81134af4:	10803fcc 	andi	r2,r2,255
81134af8:	1080201c 	xori	r2,r2,128
81134afc:	10bfe004 	addi	r2,r2,-128
81134b00:	10800820 	cmpeqi	r2,r2,32
81134b04:	10003e1e 	bne	r2,zero,81134c00 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81134b08:	e0bffa17 	ldw	r2,-24(fp)
81134b0c:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
81134b10:	e0bffb17 	ldw	r2,-20(fp)
81134b14:	1880121e 	bne	r3,r2,81134b60 <check_file_name_for_FAT16_compliance+0xc4>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81134b18:	e0bffa17 	ldw	r2,-24(fp)
81134b1c:	e0ffff17 	ldw	r3,-4(fp)
81134b20:	1885883a 	add	r2,r3,r2
81134b24:	10800003 	ldbu	r2,0(r2)
81134b28:	10803fcc 	andi	r2,r2,255
81134b2c:	1080201c 	xori	r2,r2,128
81134b30:	10bfe004 	addi	r2,r2,-128
81134b34:	10801720 	cmpeqi	r2,r2,92
81134b38:	1000311e 	bne	r2,zero,81134c00 <check_file_name_for_FAT16_compliance+0x164>
81134b3c:	e0bffa17 	ldw	r2,-24(fp)
81134b40:	e0ffff17 	ldw	r3,-4(fp)
81134b44:	1885883a 	add	r2,r3,r2
81134b48:	10800003 	ldbu	r2,0(r2)
81134b4c:	10803fcc 	andi	r2,r2,255
81134b50:	1080201c 	xori	r2,r2,128
81134b54:	10bfe004 	addi	r2,r2,-128
81134b58:	10800be0 	cmpeqi	r2,r2,47
81134b5c:	1000281e 	bne	r2,zero,81134c00 <check_file_name_for_FAT16_compliance+0x164>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81134b60:	e0fffa17 	ldw	r3,-24(fp)
81134b64:	e0bffc17 	ldw	r2,-16(fp)
81134b68:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81134b6c:	10800258 	cmpnei	r2,r2,9
81134b70:	1000091e 	bne	r2,zero,81134b98 <check_file_name_for_FAT16_compliance+0xfc>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81134b74:	e0bffa17 	ldw	r2,-24(fp)
81134b78:	e0ffff17 	ldw	r3,-4(fp)
81134b7c:	1885883a 	add	r2,r3,r2
81134b80:	10800003 	ldbu	r2,0(r2)
81134b84:	10803fcc 	andi	r2,r2,255
81134b88:	1080201c 	xori	r2,r2,128
81134b8c:	10bfe004 	addi	r2,r2,-128
81134b90:	10800b98 	cmpnei	r2,r2,46
81134b94:	10001a1e 	bne	r2,zero,81134c00 <check_file_name_for_FAT16_compliance+0x164>
81134b98:	e0fffb17 	ldw	r3,-20(fp)
81134b9c:	e0bffc17 	ldw	r2,-16(fp)
81134ba0:	18801926 	beq	r3,r2,81134c08 <check_file_name_for_FAT16_compliance+0x16c>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81134ba4:	e0fffa17 	ldw	r3,-24(fp)
81134ba8:	e0bffc17 	ldw	r2,-16(fp)
81134bac:	1885c83a 	sub	r2,r3,r2
81134bb0:	10800110 	cmplti	r2,r2,4
81134bb4:	1000141e 	bne	r2,zero,81134c08 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81134bb8:	e0bffa17 	ldw	r2,-24(fp)
81134bbc:	e0ffff17 	ldw	r3,-4(fp)
81134bc0:	1885883a 	add	r2,r3,r2
81134bc4:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81134bc8:	10803fcc 	andi	r2,r2,255
81134bcc:	1080201c 	xori	r2,r2,128
81134bd0:	10bfe004 	addi	r2,r2,-128
81134bd4:	10801720 	cmpeqi	r2,r2,92
81134bd8:	10000b1e 	bne	r2,zero,81134c08 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81134bdc:	e0bffa17 	ldw	r2,-24(fp)
81134be0:	e0ffff17 	ldw	r3,-4(fp)
81134be4:	1885883a 	add	r2,r3,r2
81134be8:	10800003 	ldbu	r2,0(r2)
81134bec:	10803fcc 	andi	r2,r2,255
81134bf0:	1080201c 	xori	r2,r2,128
81134bf4:	10bfe004 	addi	r2,r2,-128
81134bf8:	10800be0 	cmpeqi	r2,r2,47
81134bfc:	1000021e 	bne	r2,zero,81134c08 <check_file_name_for_FAT16_compliance+0x16c>
           )
        {
            result = false;
81134c00:	e03ffd15 	stw	zero,-12(fp)
            break;
81134c04:	00002706 	br	81134ca4 <check_file_name_for_FAT16_compliance+0x208>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
81134c08:	e0bffa17 	ldw	r2,-24(fp)
81134c0c:	e0ffff17 	ldw	r3,-4(fp)
81134c10:	1885883a 	add	r2,r3,r2
81134c14:	10800003 	ldbu	r2,0(r2)
81134c18:	10803fcc 	andi	r2,r2,255
81134c1c:	1080201c 	xori	r2,r2,128
81134c20:	10bfe004 	addi	r2,r2,-128
81134c24:	10801720 	cmpeqi	r2,r2,92
81134c28:	1000091e 	bne	r2,zero,81134c50 <check_file_name_for_FAT16_compliance+0x1b4>
81134c2c:	e0bffa17 	ldw	r2,-24(fp)
81134c30:	e0ffff17 	ldw	r3,-4(fp)
81134c34:	1885883a 	add	r2,r3,r2
81134c38:	10800003 	ldbu	r2,0(r2)
81134c3c:	10803fcc 	andi	r2,r2,255
81134c40:	1080201c 	xori	r2,r2,128
81134c44:	10bfe004 	addi	r2,r2,-128
81134c48:	10800bd8 	cmpnei	r2,r2,47
81134c4c:	1000041e 	bne	r2,zero,81134c60 <check_file_name_for_FAT16_compliance+0x1c4>
        {
            last_period = index;
81134c50:	e0bffa17 	ldw	r2,-24(fp)
81134c54:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
81134c58:	e0bffa17 	ldw	r2,-24(fp)
81134c5c:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
81134c60:	e0bffa17 	ldw	r2,-24(fp)
81134c64:	e0ffff17 	ldw	r3,-4(fp)
81134c68:	1885883a 	add	r2,r3,r2
81134c6c:	10800003 	ldbu	r2,0(r2)
81134c70:	10803fcc 	andi	r2,r2,255
81134c74:	1080201c 	xori	r2,r2,128
81134c78:	10bfe004 	addi	r2,r2,-128
81134c7c:	10800b98 	cmpnei	r2,r2,46
81134c80:	1000021e 	bne	r2,zero,81134c8c <check_file_name_for_FAT16_compliance+0x1f0>
        {
            last_period = index;
81134c84:	e0bffa17 	ldw	r2,-24(fp)
81134c88:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
81134c8c:	e0bffa17 	ldw	r2,-24(fp)
81134c90:	10800044 	addi	r2,r2,1
81134c94:	e0bffa15 	stw	r2,-24(fp)
81134c98:	e0fffa17 	ldw	r3,-24(fp)
81134c9c:	e0bffe17 	ldw	r2,-8(fp)
81134ca0:	18bf9016 	blt	r3,r2,81134ae4 <__reset+0xfb114ae4>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
81134ca4:	e0bffe17 	ldw	r2,-8(fp)
81134ca8:	10bfffc4 	addi	r2,r2,-1
81134cac:	e0ffff17 	ldw	r3,-4(fp)
81134cb0:	1885883a 	add	r2,r3,r2
81134cb4:	10800003 	ldbu	r2,0(r2)
81134cb8:	10803fcc 	andi	r2,r2,255
81134cbc:	1080201c 	xori	r2,r2,128
81134cc0:	10bfe004 	addi	r2,r2,-128
81134cc4:	10801720 	cmpeqi	r2,r2,92
81134cc8:	10000a1e 	bne	r2,zero,81134cf4 <check_file_name_for_FAT16_compliance+0x258>
81134ccc:	e0bffe17 	ldw	r2,-8(fp)
81134cd0:	10bfffc4 	addi	r2,r2,-1
81134cd4:	e0ffff17 	ldw	r3,-4(fp)
81134cd8:	1885883a 	add	r2,r3,r2
81134cdc:	10800003 	ldbu	r2,0(r2)
81134ce0:	10803fcc 	andi	r2,r2,255
81134ce4:	1080201c 	xori	r2,r2,128
81134ce8:	10bfe004 	addi	r2,r2,-128
81134cec:	10800bd8 	cmpnei	r2,r2,47
81134cf0:	1000011e 	bne	r2,zero,81134cf8 <check_file_name_for_FAT16_compliance+0x25c>
    {
        result = false;
81134cf4:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
81134cf8:	e0bffd17 	ldw	r2,-12(fp)
}
81134cfc:	e037883a 	mov	sp,fp
81134d00:	dfc00117 	ldw	ra,4(sp)
81134d04:	df000017 	ldw	fp,0(sp)
81134d08:	dec00204 	addi	sp,sp,8
81134d0c:	f800283a 	ret

81134d10 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
81134d10:	defffb04 	addi	sp,sp,-20
81134d14:	de00012e 	bgeu	sp,et,81134d1c <get_dir_divider_location+0xc>
81134d18:	003b68fa 	trap	3
81134d1c:	dfc00415 	stw	ra,16(sp)
81134d20:	df000315 	stw	fp,12(sp)
81134d24:	df000304 	addi	fp,sp,12
81134d28:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
81134d2c:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
81134d30:	e13fff17 	ldw	r4,-4(fp)
81134d34:	1113ba80 	call	81113ba8 <strlen>
81134d38:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
81134d3c:	e03ffd15 	stw	zero,-12(fp)
81134d40:	00001506 	br	81134d98 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
81134d44:	e0bffd17 	ldw	r2,-12(fp)
81134d48:	e0ffff17 	ldw	r3,-4(fp)
81134d4c:	1885883a 	add	r2,r3,r2
81134d50:	10800003 	ldbu	r2,0(r2)
81134d54:	10803fcc 	andi	r2,r2,255
81134d58:	1080201c 	xori	r2,r2,128
81134d5c:	10bfe004 	addi	r2,r2,-128
81134d60:	10801720 	cmpeqi	r2,r2,92
81134d64:	10000f1e 	bne	r2,zero,81134da4 <get_dir_divider_location+0x94>
81134d68:	e0bffd17 	ldw	r2,-12(fp)
81134d6c:	e0ffff17 	ldw	r3,-4(fp)
81134d70:	1885883a 	add	r2,r3,r2
81134d74:	10800003 	ldbu	r2,0(r2)
81134d78:	10803fcc 	andi	r2,r2,255
81134d7c:	1080201c 	xori	r2,r2,128
81134d80:	10bfe004 	addi	r2,r2,-128
81134d84:	10800be0 	cmpeqi	r2,r2,47
81134d88:	1000061e 	bne	r2,zero,81134da4 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
81134d8c:	e0bffd17 	ldw	r2,-12(fp)
81134d90:	10800044 	addi	r2,r2,1
81134d94:	e0bffd15 	stw	r2,-12(fp)
81134d98:	e0fffd17 	ldw	r3,-12(fp)
81134d9c:	e0bffe17 	ldw	r2,-8(fp)
81134da0:	18bfe816 	blt	r3,r2,81134d44 <__reset+0xfb114d44>
        {
            break;
        }
    }
    
    if (index == length)
81134da4:	e0fffd17 	ldw	r3,-12(fp)
81134da8:	e0bffe17 	ldw	r2,-8(fp)
81134dac:	1880021e 	bne	r3,r2,81134db8 <get_dir_divider_location+0xa8>
    {
        index = -1;
81134db0:	00bfffc4 	movi	r2,-1
81134db4:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
81134db8:	e0bffd17 	ldw	r2,-12(fp)
}
81134dbc:	e037883a 	mov	sp,fp
81134dc0:	dfc00117 	ldw	ra,4(sp)
81134dc4:	df000017 	ldw	fp,0(sp)
81134dc8:	dec00204 	addi	sp,sp,8
81134dcc:	f800283a 	ret

81134dd0 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
81134dd0:	defffa04 	addi	sp,sp,-24
81134dd4:	de00012e 	bgeu	sp,et,81134ddc <match_file_record_to_name_ext+0xc>
81134dd8:	003b68fa 	trap	3
81134ddc:	df000515 	stw	fp,20(sp)
81134de0:	df000504 	addi	fp,sp,20
81134de4:	e13ffd15 	stw	r4,-12(fp)
81134de8:	e17ffe15 	stw	r5,-8(fp)
81134dec:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
81134df0:	00800044 	movi	r2,1
81134df4:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
81134df8:	e03ffc15 	stw	zero,-16(fp)
81134dfc:	00004606 	br	81134f18 <match_file_record_to_name_ext+0x148>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
81134e00:	e0fffd17 	ldw	r3,-12(fp)
81134e04:	e0bffc17 	ldw	r2,-16(fp)
81134e08:	1885883a 	add	r2,r3,r2
81134e0c:	10800003 	ldbu	r2,0(r2)
81134e10:	10803fcc 	andi	r2,r2,255
81134e14:	10801870 	cmpltui	r2,r2,97
81134e18:	1000101e 	bne	r2,zero,81134e5c <match_file_record_to_name_ext+0x8c>
81134e1c:	e0fffd17 	ldw	r3,-12(fp)
81134e20:	e0bffc17 	ldw	r2,-16(fp)
81134e24:	1885883a 	add	r2,r3,r2
81134e28:	10800003 	ldbu	r2,0(r2)
81134e2c:	10803fcc 	andi	r2,r2,255
81134e30:	10801ee8 	cmpgeui	r2,r2,123
81134e34:	1000091e 	bne	r2,zero,81134e5c <match_file_record_to_name_ext+0x8c>
81134e38:	e0fffd17 	ldw	r3,-12(fp)
81134e3c:	e0bffc17 	ldw	r2,-16(fp)
81134e40:	1885883a 	add	r2,r3,r2
81134e44:	10800003 	ldbu	r2,0(r2)
81134e48:	10bff804 	addi	r2,r2,-32
81134e4c:	10c03fcc 	andi	r3,r2,255
81134e50:	18c0201c 	xori	r3,r3,128
81134e54:	18ffe004 	addi	r3,r3,-128
81134e58:	00000706 	br	81134e78 <match_file_record_to_name_ext+0xa8>
81134e5c:	e0fffd17 	ldw	r3,-12(fp)
81134e60:	e0bffc17 	ldw	r2,-16(fp)
81134e64:	1885883a 	add	r2,r3,r2
81134e68:	10800003 	ldbu	r2,0(r2)
81134e6c:	10c03fcc 	andi	r3,r2,255
81134e70:	18c0201c 	xori	r3,r3,128
81134e74:	18ffe004 	addi	r3,r3,-128
81134e78:	e0bffc17 	ldw	r2,-16(fp)
81134e7c:	e13ffe17 	ldw	r4,-8(fp)
81134e80:	2085883a 	add	r2,r4,r2
81134e84:	10800003 	ldbu	r2,0(r2)
81134e88:	10803fcc 	andi	r2,r2,255
81134e8c:	1080201c 	xori	r2,r2,128
81134e90:	10bfe004 	addi	r2,r2,-128
81134e94:	10801850 	cmplti	r2,r2,97
81134e98:	1000121e 	bne	r2,zero,81134ee4 <match_file_record_to_name_ext+0x114>
81134e9c:	e0bffc17 	ldw	r2,-16(fp)
81134ea0:	e13ffe17 	ldw	r4,-8(fp)
81134ea4:	2085883a 	add	r2,r4,r2
81134ea8:	10800003 	ldbu	r2,0(r2)
81134eac:	10803fcc 	andi	r2,r2,255
81134eb0:	1080201c 	xori	r2,r2,128
81134eb4:	10bfe004 	addi	r2,r2,-128
81134eb8:	10801ec8 	cmpgei	r2,r2,123
81134ebc:	1000091e 	bne	r2,zero,81134ee4 <match_file_record_to_name_ext+0x114>
81134ec0:	e0bffc17 	ldw	r2,-16(fp)
81134ec4:	e13ffe17 	ldw	r4,-8(fp)
81134ec8:	2085883a 	add	r2,r4,r2
81134ecc:	10800003 	ldbu	r2,0(r2)
81134ed0:	10bff804 	addi	r2,r2,-32
81134ed4:	10803fcc 	andi	r2,r2,255
81134ed8:	1080201c 	xori	r2,r2,128
81134edc:	10bfe004 	addi	r2,r2,-128
81134ee0:	00000706 	br	81134f00 <match_file_record_to_name_ext+0x130>
81134ee4:	e0bffc17 	ldw	r2,-16(fp)
81134ee8:	e13ffe17 	ldw	r4,-8(fp)
81134eec:	2085883a 	add	r2,r4,r2
81134ef0:	10800003 	ldbu	r2,0(r2)
81134ef4:	10803fcc 	andi	r2,r2,255
81134ef8:	1080201c 	xori	r2,r2,128
81134efc:	10bfe004 	addi	r2,r2,-128
81134f00:	18800226 	beq	r3,r2,81134f0c <match_file_record_to_name_ext+0x13c>
        {
            match = false;
81134f04:	e03ffb15 	stw	zero,-20(fp)
			break;
81134f08:	00000606 	br	81134f24 <match_file_record_to_name_ext+0x154>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
81134f0c:	e0bffc17 	ldw	r2,-16(fp)
81134f10:	10800044 	addi	r2,r2,1
81134f14:	e0bffc15 	stw	r2,-16(fp)
81134f18:	e0bffc17 	ldw	r2,-16(fp)
81134f1c:	10800210 	cmplti	r2,r2,8
81134f20:	103fb71e 	bne	r2,zero,81134e00 <__reset+0xfb114e00>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81134f24:	e03ffc15 	stw	zero,-16(fp)
81134f28:	00004a06 	br	81135054 <match_file_record_to_name_ext+0x284>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
81134f2c:	e0fffd17 	ldw	r3,-12(fp)
81134f30:	e0bffc17 	ldw	r2,-16(fp)
81134f34:	1885883a 	add	r2,r3,r2
81134f38:	10800204 	addi	r2,r2,8
81134f3c:	10800003 	ldbu	r2,0(r2)
81134f40:	10803fcc 	andi	r2,r2,255
81134f44:	10801870 	cmpltui	r2,r2,97
81134f48:	1000121e 	bne	r2,zero,81134f94 <match_file_record_to_name_ext+0x1c4>
81134f4c:	e0fffd17 	ldw	r3,-12(fp)
81134f50:	e0bffc17 	ldw	r2,-16(fp)
81134f54:	1885883a 	add	r2,r3,r2
81134f58:	10800204 	addi	r2,r2,8
81134f5c:	10800003 	ldbu	r2,0(r2)
81134f60:	10803fcc 	andi	r2,r2,255
81134f64:	10801ee8 	cmpgeui	r2,r2,123
81134f68:	10000a1e 	bne	r2,zero,81134f94 <match_file_record_to_name_ext+0x1c4>
81134f6c:	e0fffd17 	ldw	r3,-12(fp)
81134f70:	e0bffc17 	ldw	r2,-16(fp)
81134f74:	1885883a 	add	r2,r3,r2
81134f78:	10800204 	addi	r2,r2,8
81134f7c:	10800003 	ldbu	r2,0(r2)
81134f80:	10bff804 	addi	r2,r2,-32
81134f84:	10c03fcc 	andi	r3,r2,255
81134f88:	18c0201c 	xori	r3,r3,128
81134f8c:	18ffe004 	addi	r3,r3,-128
81134f90:	00000806 	br	81134fb4 <match_file_record_to_name_ext+0x1e4>
81134f94:	e0fffd17 	ldw	r3,-12(fp)
81134f98:	e0bffc17 	ldw	r2,-16(fp)
81134f9c:	1885883a 	add	r2,r3,r2
81134fa0:	10800204 	addi	r2,r2,8
81134fa4:	10800003 	ldbu	r2,0(r2)
81134fa8:	10c03fcc 	andi	r3,r2,255
81134fac:	18c0201c 	xori	r3,r3,128
81134fb0:	18ffe004 	addi	r3,r3,-128
81134fb4:	e0bffc17 	ldw	r2,-16(fp)
81134fb8:	e13fff17 	ldw	r4,-4(fp)
81134fbc:	2085883a 	add	r2,r4,r2
81134fc0:	10800003 	ldbu	r2,0(r2)
81134fc4:	10803fcc 	andi	r2,r2,255
81134fc8:	1080201c 	xori	r2,r2,128
81134fcc:	10bfe004 	addi	r2,r2,-128
81134fd0:	10801850 	cmplti	r2,r2,97
81134fd4:	1000121e 	bne	r2,zero,81135020 <match_file_record_to_name_ext+0x250>
81134fd8:	e0bffc17 	ldw	r2,-16(fp)
81134fdc:	e13fff17 	ldw	r4,-4(fp)
81134fe0:	2085883a 	add	r2,r4,r2
81134fe4:	10800003 	ldbu	r2,0(r2)
81134fe8:	10803fcc 	andi	r2,r2,255
81134fec:	1080201c 	xori	r2,r2,128
81134ff0:	10bfe004 	addi	r2,r2,-128
81134ff4:	10801ec8 	cmpgei	r2,r2,123
81134ff8:	1000091e 	bne	r2,zero,81135020 <match_file_record_to_name_ext+0x250>
81134ffc:	e0bffc17 	ldw	r2,-16(fp)
81135000:	e13fff17 	ldw	r4,-4(fp)
81135004:	2085883a 	add	r2,r4,r2
81135008:	10800003 	ldbu	r2,0(r2)
8113500c:	10bff804 	addi	r2,r2,-32
81135010:	10803fcc 	andi	r2,r2,255
81135014:	1080201c 	xori	r2,r2,128
81135018:	10bfe004 	addi	r2,r2,-128
8113501c:	00000706 	br	8113503c <match_file_record_to_name_ext+0x26c>
81135020:	e0bffc17 	ldw	r2,-16(fp)
81135024:	e13fff17 	ldw	r4,-4(fp)
81135028:	2085883a 	add	r2,r4,r2
8113502c:	10800003 	ldbu	r2,0(r2)
81135030:	10803fcc 	andi	r2,r2,255
81135034:	1080201c 	xori	r2,r2,128
81135038:	10bfe004 	addi	r2,r2,-128
8113503c:	18800226 	beq	r3,r2,81135048 <match_file_record_to_name_ext+0x278>
        {
            match = false;
81135040:	e03ffb15 	stw	zero,-20(fp)
			break;
81135044:	00000606 	br	81135060 <match_file_record_to_name_ext+0x290>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81135048:	e0bffc17 	ldw	r2,-16(fp)
8113504c:	10800044 	addi	r2,r2,1
81135050:	e0bffc15 	stw	r2,-16(fp)
81135054:	e0bffc17 	ldw	r2,-16(fp)
81135058:	108000d0 	cmplti	r2,r2,3
8113505c:	103fb31e 	bne	r2,zero,81134f2c <__reset+0xfb114f2c>
        {
            match = false;
			break;
        }
    }
	return match;
81135060:	e0bffb17 	ldw	r2,-20(fp)
}
81135064:	e037883a 	mov	sp,fp
81135068:	df000017 	ldw	fp,0(sp)
8113506c:	dec00104 	addi	sp,sp,4
81135070:	f800283a 	ret

81135074 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
81135074:	deffe704 	addi	sp,sp,-100
81135078:	de00012e 	bgeu	sp,et,81135080 <get_home_directory_cluster_for_file+0xc>
8113507c:	003b68fa 	trap	3
81135080:	dfc01815 	stw	ra,96(sp)
81135084:	df001715 	stw	fp,92(sp)
81135088:	df001704 	addi	fp,sp,92
8113508c:	e13ffd15 	stw	r4,-12(fp)
81135090:	e17ffe15 	stw	r5,-8(fp)
81135094:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
81135098:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
8113509c:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
811350a0:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
811350a4:	e13ffd17 	ldw	r4,-12(fp)
811350a8:	1134d100 	call	81134d10 <get_dir_divider_location>
811350ac:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
811350b0:	00012f06 	br	81135570 <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
811350b4:	00800804 	movi	r2,32
811350b8:	e0bff905 	stb	r2,-28(fp)
811350bc:	00800804 	movi	r2,32
811350c0:	e0bff945 	stb	r2,-27(fp)
811350c4:	00800804 	movi	r2,32
811350c8:	e0bff985 	stb	r2,-26(fp)
811350cc:	00800804 	movi	r2,32
811350d0:	e0bff9c5 	stb	r2,-25(fp)
811350d4:	00800804 	movi	r2,32
811350d8:	e0bffa05 	stb	r2,-24(fp)
811350dc:	00800804 	movi	r2,32
811350e0:	e0bffa45 	stb	r2,-23(fp)
811350e4:	00800804 	movi	r2,32
811350e8:	e0bffa85 	stb	r2,-22(fp)
811350ec:	00800804 	movi	r2,32
811350f0:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
811350f4:	00800804 	movi	r2,32
811350f8:	e0bffb05 	stb	r2,-20(fp)
811350fc:	00800804 	movi	r2,32
81135100:	e0bffb45 	stb	r2,-19(fp)
81135104:	00800804 	movi	r2,32
81135108:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
8113510c:	00bfffc4 	movi	r2,-1
81135110:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
81135114:	e0bfea17 	ldw	r2,-88(fp)
81135118:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
8113511c:	e03fec15 	stw	zero,-80(fp)
81135120:	00002d06 	br	811351d8 <get_home_directory_cluster_for_file+0x164>
        {
            if (file_name[index+start_location] == '.')
81135124:	e0ffec17 	ldw	r3,-80(fp)
81135128:	e0bfed17 	ldw	r2,-76(fp)
8113512c:	1885883a 	add	r2,r3,r2
81135130:	1007883a 	mov	r3,r2
81135134:	e0bffd17 	ldw	r2,-12(fp)
81135138:	10c5883a 	add	r2,r2,r3
8113513c:	10800003 	ldbu	r2,0(r2)
81135140:	10803fcc 	andi	r2,r2,255
81135144:	1080201c 	xori	r2,r2,128
81135148:	10bfe004 	addi	r2,r2,-128
8113514c:	10800b98 	cmpnei	r2,r2,46
81135150:	1000031e 	bne	r2,zero,81135160 <get_home_directory_cluster_for_file+0xec>
            {
                ext_index = index;
81135154:	e0bfec17 	ldw	r2,-80(fp)
81135158:	e0bfee15 	stw	r2,-72(fp)
8113515c:	00001b06 	br	811351cc <get_home_directory_cluster_for_file+0x158>
            }
            else if (ext_index < 0)
81135160:	e0bfee17 	ldw	r2,-72(fp)
81135164:	10000c0e 	bge	r2,zero,81135198 <get_home_directory_cluster_for_file+0x124>
            {
                name[index] = file_name[index+start_location];
81135168:	e0ffec17 	ldw	r3,-80(fp)
8113516c:	e0bfed17 	ldw	r2,-76(fp)
81135170:	1885883a 	add	r2,r3,r2
81135174:	1007883a 	mov	r3,r2
81135178:	e0bffd17 	ldw	r2,-12(fp)
8113517c:	10c5883a 	add	r2,r2,r3
81135180:	10c00003 	ldbu	r3,0(r2)
81135184:	e13ff904 	addi	r4,fp,-28
81135188:	e0bfec17 	ldw	r2,-80(fp)
8113518c:	2085883a 	add	r2,r4,r2
81135190:	10c00005 	stb	r3,0(r2)
81135194:	00000d06 	br	811351cc <get_home_directory_cluster_for_file+0x158>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
81135198:	e0ffec17 	ldw	r3,-80(fp)
8113519c:	e0bfee17 	ldw	r2,-72(fp)
811351a0:	1885c83a 	sub	r2,r3,r2
811351a4:	e13fec17 	ldw	r4,-80(fp)
811351a8:	e0ffed17 	ldw	r3,-76(fp)
811351ac:	20c7883a 	add	r3,r4,r3
811351b0:	1809883a 	mov	r4,r3
811351b4:	e0fffd17 	ldw	r3,-12(fp)
811351b8:	1907883a 	add	r3,r3,r4
811351bc:	18c00003 	ldbu	r3,0(r3)
811351c0:	e13ffb04 	addi	r4,fp,-20
811351c4:	2085883a 	add	r2,r4,r2
811351c8:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
811351cc:	e0bfec17 	ldw	r2,-80(fp)
811351d0:	10800044 	addi	r2,r2,1
811351d4:	e0bfec15 	stw	r2,-80(fp)
811351d8:	e0ffec17 	ldw	r3,-80(fp)
811351dc:	e0bfeb17 	ldw	r2,-84(fp)
811351e0:	18bfd016 	blt	r3,r2,81135124 <__reset+0xfb115124>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
811351e4:	e0bfea17 	ldw	r2,-88(fp)
811351e8:	10005c1e 	bne	r2,zero,8113535c <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
811351ec:	00a04574 	movhi	r2,33045
811351f0:	1081f504 	addi	r2,r2,2004
811351f4:	1080050b 	ldhu	r2,20(r2)
811351f8:	10bfffcc 	andi	r2,r2,65535
811351fc:	1006917a 	slli	r3,r2,5
81135200:	00a04574 	movhi	r2,33045
81135204:	1081f504 	addi	r2,r2,2004
81135208:	1080030b 	ldhu	r2,12(r2)
8113520c:	10bfffcc 	andi	r2,r2,65535
81135210:	1885283a 	div	r2,r3,r2
81135214:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135218:	e03ff015 	stw	zero,-64(fp)
8113521c:	00003b06 	br	8113530c <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
81135220:	00a04574 	movhi	r2,33045
81135224:	1081f504 	addi	r2,r2,2004
81135228:	10c01317 	ldw	r3,76(r2)
8113522c:	e0bff017 	ldw	r2,-64(fp)
81135230:	1885883a 	add	r2,r3,r2
81135234:	1007883a 	mov	r3,r2
81135238:	d0a09a17 	ldw	r2,-32152(gp)
8113523c:	100b883a 	mov	r5,r2
81135240:	1809883a 	mov	r4,r3
81135244:	113390c0 	call	8113390c <Read_Sector_Data>
81135248:	10003426 	beq	r2,zero,8113531c <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8113524c:	e03ff115 	stw	zero,-60(fp)
81135250:	00002506 	br	811352e8 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81135254:	e0bff117 	ldw	r2,-60(fp)
81135258:	1004917a 	slli	r2,r2,5
8113525c:	e0fff017 	ldw	r3,-64(fp)
81135260:	180f883a 	mov	r7,r3
81135264:	000d883a 	mov	r6,zero
81135268:	e17fff17 	ldw	r5,-4(fp)
8113526c:	1009883a 	mov	r4,r2
81135270:	1133d3c0 	call	81133d3c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81135274:	e0bfff17 	ldw	r2,-4(fp)
81135278:	10800003 	ldbu	r2,0(r2)
8113527c:	10803fcc 	andi	r2,r2,255
81135280:	10803960 	cmpeqi	r2,r2,229
81135284:	1000151e 	bne	r2,zero,811352dc <get_home_directory_cluster_for_file+0x268>
81135288:	e0bfff17 	ldw	r2,-4(fp)
8113528c:	10800003 	ldbu	r2,0(r2)
81135290:	10803fcc 	andi	r2,r2,255
81135294:	10001126 	beq	r2,zero,811352dc <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81135298:	e0fffb04 	addi	r3,fp,-20
8113529c:	e0bff904 	addi	r2,fp,-28
811352a0:	180d883a 	mov	r6,r3
811352a4:	100b883a 	mov	r5,r2
811352a8:	e13fff17 	ldw	r4,-4(fp)
811352ac:	1134dd00 	call	81134dd0 <match_file_record_to_name_ext>
811352b0:	e0bff815 	stw	r2,-32(fp)
                            if (match)
811352b4:	e0bff817 	ldw	r2,-32(fp)
811352b8:	10000826 	beq	r2,zero,811352dc <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
811352bc:	e0bfff17 	ldw	r2,-4(fp)
811352c0:	1080058b 	ldhu	r2,22(r2)
811352c4:	10bfffcc 	andi	r2,r2,65535
811352c8:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
811352cc:	e0bfff17 	ldw	r2,-4(fp)
811352d0:	00c00044 	movi	r3,1
811352d4:	10c00a15 	stw	r3,40(r2)
                                break;
811352d8:	00000606 	br	811352f4 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811352dc:	e0bff117 	ldw	r2,-60(fp)
811352e0:	10800044 	addi	r2,r2,1
811352e4:	e0bff115 	stw	r2,-60(fp)
811352e8:	e0bff117 	ldw	r2,-60(fp)
811352ec:	10800410 	cmplti	r2,r2,16
811352f0:	103fd81e 	bne	r2,zero,81135254 <__reset+0xfb115254>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
811352f4:	e0ffef17 	ldw	r3,-68(fp)
811352f8:	e0bfea17 	ldw	r2,-88(fp)
811352fc:	1880091e 	bne	r3,r2,81135324 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135300:	e0bff017 	ldw	r2,-64(fp)
81135304:	10800044 	addi	r2,r2,1
81135308:	e0bff015 	stw	r2,-64(fp)
8113530c:	e0fff017 	ldw	r3,-64(fp)
81135310:	e0bff717 	ldw	r2,-36(fp)
81135314:	18bfc216 	blt	r3,r2,81135220 <__reset+0xfb115220>
81135318:	00000306 	br	81135328 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
8113531c:	0001883a 	nop
81135320:	00000106 	br	81135328 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
81135324:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
81135328:	e0ffef17 	ldw	r3,-68(fp)
8113532c:	e0bfea17 	ldw	r2,-88(fp)
81135330:	18800826 	beq	r3,r2,81135354 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81135334:	e0bfef17 	ldw	r2,-68(fp)
81135338:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
8113533c:	e0ffed17 	ldw	r3,-76(fp)
81135340:	e0bfeb17 	ldw	r2,-84(fp)
81135344:	1885883a 	add	r2,r3,r2
81135348:	10800044 	addi	r2,r2,1
8113534c:	e0bfed15 	stw	r2,-76(fp)
81135350:	00007d06 	br	81135548 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81135354:	0005883a 	mov	r2,zero
81135358:	00009106 	br	811355a0 <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
8113535c:	e0bfea17 	ldw	r2,-88(fp)
81135360:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81135364:	e0bff417 	ldw	r2,-48(fp)
81135368:	10ffff84 	addi	r3,r2,-2
8113536c:	00a04574 	movhi	r2,33045
81135370:	1081f504 	addi	r2,r2,2004
81135374:	10800383 	ldbu	r2,14(r2)
81135378:	10803fcc 	andi	r2,r2,255
8113537c:	1885383a 	mul	r2,r3,r2
81135380:	1007883a 	mov	r3,r2
81135384:	00a04574 	movhi	r2,33045
81135388:	1081f504 	addi	r2,r2,2004
8113538c:	10801417 	ldw	r2,80(r2)
81135390:	1885883a 	add	r2,r3,r2
81135394:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135398:	e03ff215 	stw	zero,-56(fp)
8113539c:	00003606 	br	81135478 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811353a0:	e0fff217 	ldw	r3,-56(fp)
811353a4:	e0bff517 	ldw	r2,-44(fp)
811353a8:	1885883a 	add	r2,r3,r2
811353ac:	d0e09a17 	ldw	r3,-32152(gp)
811353b0:	180b883a 	mov	r5,r3
811353b4:	1009883a 	mov	r4,r2
811353b8:	113390c0 	call	8113390c <Read_Sector_Data>
811353bc:	10003526 	beq	r2,zero,81135494 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
811353c0:	e03ff315 	stw	zero,-52(fp)
811353c4:	00002306 	br	81135454 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
811353c8:	e0bff317 	ldw	r2,-52(fp)
811353cc:	1004917a 	slli	r2,r2,5
811353d0:	e0fff417 	ldw	r3,-48(fp)
811353d4:	e13ff217 	ldw	r4,-56(fp)
811353d8:	200f883a 	mov	r7,r4
811353dc:	180d883a 	mov	r6,r3
811353e0:	e17fff17 	ldw	r5,-4(fp)
811353e4:	1009883a 	mov	r4,r2
811353e8:	1133d3c0 	call	81133d3c <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811353ec:	e0bfff17 	ldw	r2,-4(fp)
811353f0:	10800003 	ldbu	r2,0(r2)
811353f4:	10803fcc 	andi	r2,r2,255
811353f8:	10803960 	cmpeqi	r2,r2,229
811353fc:	1000121e 	bne	r2,zero,81135448 <get_home_directory_cluster_for_file+0x3d4>
81135400:	e0bfff17 	ldw	r2,-4(fp)
81135404:	10800003 	ldbu	r2,0(r2)
81135408:	10803fcc 	andi	r2,r2,255
8113540c:	10000e26 	beq	r2,zero,81135448 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
81135410:	e0fffb04 	addi	r3,fp,-20
81135414:	e0bff904 	addi	r2,fp,-28
81135418:	180d883a 	mov	r6,r3
8113541c:	100b883a 	mov	r5,r2
81135420:	e13fff17 	ldw	r4,-4(fp)
81135424:	1134dd00 	call	81134dd0 <match_file_record_to_name_ext>
81135428:	e0bff615 	stw	r2,-40(fp)
                                if (match)
8113542c:	e0bff617 	ldw	r2,-40(fp)
81135430:	10000526 	beq	r2,zero,81135448 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
81135434:	e0bfff17 	ldw	r2,-4(fp)
81135438:	1080058b 	ldhu	r2,22(r2)
8113543c:	10bfffcc 	andi	r2,r2,65535
81135440:	e0bfef15 	stw	r2,-68(fp)
                                    break;
81135444:	00000606 	br	81135460 <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81135448:	e0bff317 	ldw	r2,-52(fp)
8113544c:	10800044 	addi	r2,r2,1
81135450:	e0bff315 	stw	r2,-52(fp)
81135454:	e0bff317 	ldw	r2,-52(fp)
81135458:	10800410 	cmplti	r2,r2,16
8113545c:	103fda1e 	bne	r2,zero,811353c8 <__reset+0xfb1153c8>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
81135460:	e0ffef17 	ldw	r3,-68(fp)
81135464:	e0bfea17 	ldw	r2,-88(fp)
81135468:	18800c1e 	bne	r3,r2,8113549c <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8113546c:	e0bff217 	ldw	r2,-56(fp)
81135470:	10800044 	addi	r2,r2,1
81135474:	e0bff215 	stw	r2,-56(fp)
81135478:	00a04574 	movhi	r2,33045
8113547c:	1081f504 	addi	r2,r2,2004
81135480:	10800383 	ldbu	r2,14(r2)
81135484:	10803fcc 	andi	r2,r2,255
81135488:	e0fff217 	ldw	r3,-56(fp)
8113548c:	18bfc416 	blt	r3,r2,811353a0 <__reset+0xfb1153a0>
81135490:	00000306 	br	811354a0 <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
81135494:	0001883a 	nop
81135498:	00000106 	br	811354a0 <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
8113549c:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
811354a0:	e0ffef17 	ldw	r3,-68(fp)
811354a4:	e0bfea17 	ldw	r2,-88(fp)
811354a8:	1880141e 	bne	r3,r2,811354fc <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
811354ac:	e0bfef17 	ldw	r2,-68(fp)
811354b0:	e0fffc04 	addi	r3,fp,-16
811354b4:	180b883a 	mov	r5,r3
811354b8:	1009883a 	mov	r4,r2
811354bc:	11339ec0 	call	811339ec <get_cluster_flag>
811354c0:	10000c26 	beq	r2,zero,811354f4 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
811354c4:	e0bffc0b 	ldhu	r2,-16(fp)
811354c8:	10bfffcc 	andi	r2,r2,65535
811354cc:	10fffe0c 	andi	r3,r2,65528
811354d0:	00bffe14 	movui	r2,65528
811354d4:	1880021e 	bne	r3,r2,811354e0 <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
811354d8:	0005883a 	mov	r2,zero
811354dc:	00003006 	br	811355a0 <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
811354e0:	e0bffc0b 	ldhu	r2,-16(fp)
811354e4:	10bfffcc 	andi	r2,r2,65535
811354e8:	10bffe0c 	andi	r2,r2,65528
811354ec:	e0bfef15 	stw	r2,-68(fp)
811354f0:	00000206 	br	811354fc <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
811354f4:	0005883a 	mov	r2,zero
811354f8:	00002906 	br	811355a0 <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
811354fc:	e0bff417 	ldw	r2,-48(fp)
81135500:	00fffdd4 	movui	r3,65527
81135504:	18800316 	blt	r3,r2,81135514 <get_home_directory_cluster_for_file+0x4a0>
81135508:	e0ffef17 	ldw	r3,-68(fp)
8113550c:	e0bfea17 	ldw	r2,-88(fp)
81135510:	18bf9426 	beq	r3,r2,81135364 <__reset+0xfb115364>
            if (new_cluster != home_dir_cluster)
81135514:	e0ffef17 	ldw	r3,-68(fp)
81135518:	e0bfea17 	ldw	r2,-88(fp)
8113551c:	18800826 	beq	r3,r2,81135540 <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81135520:	e0bfef17 	ldw	r2,-68(fp)
81135524:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81135528:	e0ffed17 	ldw	r3,-76(fp)
8113552c:	e0bfeb17 	ldw	r2,-84(fp)
81135530:	1885883a 	add	r2,r3,r2
81135534:	10800044 	addi	r2,r2,1
81135538:	e0bfed15 	stw	r2,-76(fp)
8113553c:	00000206 	br	81135548 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81135540:	0005883a 	mov	r2,zero
81135544:	00001606 	br	811355a0 <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
81135548:	e0bfed17 	ldw	r2,-76(fp)
8113554c:	e0fffd17 	ldw	r3,-12(fp)
81135550:	1885883a 	add	r2,r3,r2
81135554:	1009883a 	mov	r4,r2
81135558:	1134d100 	call	81134d10 <get_dir_divider_location>
8113555c:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
81135560:	e0bfeb17 	ldw	r2,-84(fp)
81135564:	1000020e 	bge	r2,zero,81135570 <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
81135568:	00800044 	movi	r2,1
8113556c:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
81135570:	e0bfeb17 	ldw	r2,-84(fp)
81135574:	00becf16 	blt	zero,r2,811350b4 <__reset+0xfb1150b4>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
81135578:	e0bffe17 	ldw	r2,-8(fp)
8113557c:	e0ffea17 	ldw	r3,-88(fp)
81135580:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
81135584:	e0bfea17 	ldw	r2,-88(fp)
81135588:	1000041e 	bne	r2,zero,8113559c <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
8113558c:	e0bfff17 	ldw	r2,-4(fp)
81135590:	10000a15 	stw	zero,40(r2)
		result = true;
81135594:	00800044 	movi	r2,1
81135598:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
8113559c:	e0bfe917 	ldw	r2,-92(fp)
}
811355a0:	e037883a 	mov	sp,fp
811355a4:	dfc00117 	ldw	ra,4(sp)
811355a8:	df000017 	ldw	fp,0(sp)
811355ac:	dec00204 	addi	sp,sp,8
811355b0:	f800283a 	ret

811355b4 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
811355b4:	deffe804 	addi	sp,sp,-96
811355b8:	de00012e 	bgeu	sp,et,811355c0 <find_file_in_directory+0xc>
811355bc:	003b68fa 	trap	3
811355c0:	dfc01715 	stw	ra,92(sp)
811355c4:	df001615 	stw	fp,88(sp)
811355c8:	df001604 	addi	fp,sp,88
811355cc:	e13ffd15 	stw	r4,-12(fp)
811355d0:	e17ffe15 	stw	r5,-8(fp)
811355d4:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
811355d8:	e13ffe17 	ldw	r4,-8(fp)
811355dc:	1134d100 	call	81134d10 <get_dir_divider_location>
811355e0:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
811355e4:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
811355e8:	00800804 	movi	r2,32
811355ec:	e0bff905 	stb	r2,-28(fp)
811355f0:	00800804 	movi	r2,32
811355f4:	e0bff945 	stb	r2,-27(fp)
811355f8:	00800804 	movi	r2,32
811355fc:	e0bff985 	stb	r2,-26(fp)
81135600:	00800804 	movi	r2,32
81135604:	e0bff9c5 	stb	r2,-25(fp)
81135608:	00800804 	movi	r2,32
8113560c:	e0bffa05 	stb	r2,-24(fp)
81135610:	00800804 	movi	r2,32
81135614:	e0bffa45 	stb	r2,-23(fp)
81135618:	00800804 	movi	r2,32
8113561c:	e0bffa85 	stb	r2,-22(fp)
81135620:	00800804 	movi	r2,32
81135624:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
81135628:	00800804 	movi	r2,32
8113562c:	e0bffb05 	stb	r2,-20(fp)
81135630:	00800804 	movi	r2,32
81135634:	e0bffb45 	stb	r2,-19(fp)
81135638:	00800804 	movi	r2,32
8113563c:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
81135640:	00bfffc4 	movi	r2,-1
81135644:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
81135648:	e0bffd17 	ldw	r2,-12(fp)
8113564c:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
81135650:	e13ffe17 	ldw	r4,-8(fp)
81135654:	1113ba80 	call	81113ba8 <strlen>
81135658:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
8113565c:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
81135660:	00000b06 	br	81135690 <find_file_in_directory+0xdc>
    {
        last_dir_separator = last_dir_separator+location+1;
81135664:	e0ffeb17 	ldw	r3,-84(fp)
81135668:	e0bfea17 	ldw	r2,-88(fp)
8113566c:	1885883a 	add	r2,r3,r2
81135670:	10800044 	addi	r2,r2,1
81135674:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
81135678:	e0bfeb17 	ldw	r2,-84(fp)
8113567c:	e0fffe17 	ldw	r3,-8(fp)
81135680:	1885883a 	add	r2,r3,r2
81135684:	1009883a 	mov	r4,r2
81135688:	1134d100 	call	81134d10 <get_dir_divider_location>
8113568c:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
81135690:	e0bfea17 	ldw	r2,-88(fp)
81135694:	00bff316 	blt	zero,r2,81135664 <__reset+0xfb115664>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81135698:	e0bfeb17 	ldw	r2,-84(fp)
8113569c:	e0bfee15 	stw	r2,-72(fp)
811356a0:	00002706 	br	81135740 <find_file_in_directory+0x18c>
    {
        if (file_name[index] == '.')
811356a4:	e0bfee17 	ldw	r2,-72(fp)
811356a8:	e0fffe17 	ldw	r3,-8(fp)
811356ac:	1885883a 	add	r2,r3,r2
811356b0:	10800003 	ldbu	r2,0(r2)
811356b4:	10803fcc 	andi	r2,r2,255
811356b8:	1080201c 	xori	r2,r2,128
811356bc:	10bfe004 	addi	r2,r2,-128
811356c0:	10800b98 	cmpnei	r2,r2,46
811356c4:	1000031e 	bne	r2,zero,811356d4 <find_file_in_directory+0x120>
        {
            ext_index = index;
811356c8:	e0bfee17 	ldw	r2,-72(fp)
811356cc:	e0bfec15 	stw	r2,-80(fp)
811356d0:	00001806 	br	81135734 <find_file_in_directory+0x180>
        }
        else if (ext_index < 0)
811356d4:	e0bfec17 	ldw	r2,-80(fp)
811356d8:	10000b0e 	bge	r2,zero,81135708 <find_file_in_directory+0x154>
        {
            name[index-last_dir_separator] = file_name[index];
811356dc:	e0ffee17 	ldw	r3,-72(fp)
811356e0:	e0bfeb17 	ldw	r2,-84(fp)
811356e4:	1885c83a 	sub	r2,r3,r2
811356e8:	e0ffee17 	ldw	r3,-72(fp)
811356ec:	e13ffe17 	ldw	r4,-8(fp)
811356f0:	20c7883a 	add	r3,r4,r3
811356f4:	18c00003 	ldbu	r3,0(r3)
811356f8:	e13ff904 	addi	r4,fp,-28
811356fc:	2085883a 	add	r2,r4,r2
81135700:	10c00005 	stb	r3,0(r2)
81135704:	00000b06 	br	81135734 <find_file_in_directory+0x180>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
81135708:	e0ffee17 	ldw	r3,-72(fp)
8113570c:	e0bfec17 	ldw	r2,-80(fp)
81135710:	1885c83a 	sub	r2,r3,r2
81135714:	10bfffc4 	addi	r2,r2,-1
81135718:	e0ffee17 	ldw	r3,-72(fp)
8113571c:	e13ffe17 	ldw	r4,-8(fp)
81135720:	20c7883a 	add	r3,r4,r3
81135724:	18c00003 	ldbu	r3,0(r3)
81135728:	e13ffb04 	addi	r4,fp,-20
8113572c:	2085883a 	add	r2,r4,r2
81135730:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81135734:	e0bfee17 	ldw	r2,-72(fp)
81135738:	10800044 	addi	r2,r2,1
8113573c:	e0bfee15 	stw	r2,-72(fp)
81135740:	e0ffee17 	ldw	r3,-72(fp)
81135744:	e0bff417 	ldw	r2,-48(fp)
81135748:	18bfd616 	blt	r3,r2,811356a4 <__reset+0xfb1156a4>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
8113574c:	e0bffd17 	ldw	r2,-12(fp)
81135750:	1000461e 	bne	r2,zero,8113586c <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81135754:	00a04574 	movhi	r2,33045
81135758:	1081f504 	addi	r2,r2,2004
8113575c:	1080050b 	ldhu	r2,20(r2)
81135760:	10bfffcc 	andi	r2,r2,65535
81135764:	1006917a 	slli	r3,r2,5
81135768:	00a04574 	movhi	r2,33045
8113576c:	1081f504 	addi	r2,r2,2004
81135770:	1080030b 	ldhu	r2,12(r2)
81135774:	10bfffcc 	andi	r2,r2,65535
81135778:	1885283a 	div	r2,r3,r2
8113577c:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135780:	e03ff015 	stw	zero,-64(fp)
81135784:	00003506 	br	8113585c <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81135788:	00a04574 	movhi	r2,33045
8113578c:	1081f504 	addi	r2,r2,2004
81135790:	10c01317 	ldw	r3,76(r2)
81135794:	e0bff017 	ldw	r2,-64(fp)
81135798:	1885883a 	add	r2,r3,r2
8113579c:	1007883a 	mov	r3,r2
811357a0:	d0a09a17 	ldw	r2,-32152(gp)
811357a4:	100b883a 	mov	r5,r2
811357a8:	1809883a 	mov	r4,r3
811357ac:	113390c0 	call	8113390c <Read_Sector_Data>
811357b0:	10009626 	beq	r2,zero,81135a0c <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
811357b4:	e03ff115 	stw	zero,-60(fp)
811357b8:	00002006 	br	8113583c <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
811357bc:	e0bff117 	ldw	r2,-60(fp)
811357c0:	1004917a 	slli	r2,r2,5
811357c4:	e0fff017 	ldw	r3,-64(fp)
811357c8:	180f883a 	mov	r7,r3
811357cc:	000d883a 	mov	r6,zero
811357d0:	e17fff17 	ldw	r5,-4(fp)
811357d4:	1009883a 	mov	r4,r2
811357d8:	1133d3c0 	call	81133d3c <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811357dc:	e0bfff17 	ldw	r2,-4(fp)
811357e0:	10800003 	ldbu	r2,0(r2)
811357e4:	10803fcc 	andi	r2,r2,255
811357e8:	10803960 	cmpeqi	r2,r2,229
811357ec:	1000101e 	bne	r2,zero,81135830 <find_file_in_directory+0x27c>
811357f0:	e0bfff17 	ldw	r2,-4(fp)
811357f4:	10800003 	ldbu	r2,0(r2)
811357f8:	10803fcc 	andi	r2,r2,255
811357fc:	10000c26 	beq	r2,zero,81135830 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
81135800:	e0fffb04 	addi	r3,fp,-20
81135804:	e0bff904 	addi	r2,fp,-28
81135808:	180d883a 	mov	r6,r3
8113580c:	100b883a 	mov	r5,r2
81135810:	e13fff17 	ldw	r4,-4(fp)
81135814:	1134dd00 	call	81134dd0 <match_file_record_to_name_ext>
81135818:	e0bff815 	stw	r2,-32(fp)

                        if (match)
8113581c:	e0bff817 	ldw	r2,-32(fp)
81135820:	10000326 	beq	r2,zero,81135830 <find_file_in_directory+0x27c>
                        {
                            result = true;
81135824:	00800044 	movi	r2,1
81135828:	e0bfef15 	stw	r2,-68(fp)
                            break;
8113582c:	00000606 	br	81135848 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81135830:	e0bff117 	ldw	r2,-60(fp)
81135834:	10800044 	addi	r2,r2,1
81135838:	e0bff115 	stw	r2,-60(fp)
8113583c:	e0bff117 	ldw	r2,-60(fp)
81135840:	10800410 	cmplti	r2,r2,16
81135844:	103fdd1e 	bne	r2,zero,811357bc <__reset+0xfb1157bc>
            }
            else
            {
                break;
            }
            if (result)
81135848:	e0bfef17 	ldw	r2,-68(fp)
8113584c:	1000711e 	bne	r2,zero,81135a14 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135850:	e0bff017 	ldw	r2,-64(fp)
81135854:	10800044 	addi	r2,r2,1
81135858:	e0bff015 	stw	r2,-64(fp)
8113585c:	e0fff017 	ldw	r3,-64(fp)
81135860:	e0bff717 	ldw	r2,-36(fp)
81135864:	18bfc816 	blt	r3,r2,81135788 <__reset+0xfb115788>
81135868:	00006b06 	br	81135a18 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8113586c:	e0bfed17 	ldw	r2,-76(fp)
81135870:	10ffff84 	addi	r3,r2,-2
81135874:	00a04574 	movhi	r2,33045
81135878:	1081f504 	addi	r2,r2,2004
8113587c:	10800383 	ldbu	r2,14(r2)
81135880:	10803fcc 	andi	r2,r2,255
81135884:	1885383a 	mul	r2,r3,r2
81135888:	1007883a 	mov	r3,r2
8113588c:	00a04574 	movhi	r2,33045
81135890:	1081f504 	addi	r2,r2,2004
81135894:	10801417 	ldw	r2,80(r2)
81135898:	1885883a 	add	r2,r3,r2
8113589c:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811358a0:	e03ff215 	stw	zero,-56(fp)
811358a4:	00003306 	br	81135974 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811358a8:	e0fff217 	ldw	r3,-56(fp)
811358ac:	e0bff517 	ldw	r2,-44(fp)
811358b0:	1885883a 	add	r2,r3,r2
811358b4:	d0e09a17 	ldw	r3,-32152(gp)
811358b8:	180b883a 	mov	r5,r3
811358bc:	1009883a 	mov	r4,r2
811358c0:	113390c0 	call	8113390c <Read_Sector_Data>
811358c4:	10003226 	beq	r2,zero,81135990 <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811358c8:	e03ff315 	stw	zero,-52(fp)
811358cc:	00002106 	br	81135954 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
811358d0:	e0bff317 	ldw	r2,-52(fp)
811358d4:	1004917a 	slli	r2,r2,5
811358d8:	e0ffed17 	ldw	r3,-76(fp)
811358dc:	e13ff217 	ldw	r4,-56(fp)
811358e0:	200f883a 	mov	r7,r4
811358e4:	180d883a 	mov	r6,r3
811358e8:	e17fff17 	ldw	r5,-4(fp)
811358ec:	1009883a 	mov	r4,r2
811358f0:	1133d3c0 	call	81133d3c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811358f4:	e0bfff17 	ldw	r2,-4(fp)
811358f8:	10800003 	ldbu	r2,0(r2)
811358fc:	10803fcc 	andi	r2,r2,255
81135900:	10803960 	cmpeqi	r2,r2,229
81135904:	1000101e 	bne	r2,zero,81135948 <find_file_in_directory+0x394>
81135908:	e0bfff17 	ldw	r2,-4(fp)
8113590c:	10800003 	ldbu	r2,0(r2)
81135910:	10803fcc 	andi	r2,r2,255
81135914:	10000c26 	beq	r2,zero,81135948 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81135918:	e0fffb04 	addi	r3,fp,-20
8113591c:	e0bff904 	addi	r2,fp,-28
81135920:	180d883a 	mov	r6,r3
81135924:	100b883a 	mov	r5,r2
81135928:	e13fff17 	ldw	r4,-4(fp)
8113592c:	1134dd00 	call	81134dd0 <match_file_record_to_name_ext>
81135930:	e0bff615 	stw	r2,-40(fp)

                            if (match)
81135934:	e0bff617 	ldw	r2,-40(fp)
81135938:	10000326 	beq	r2,zero,81135948 <find_file_in_directory+0x394>
                            {                               
                                result = true;
8113593c:	00800044 	movi	r2,1
81135940:	e0bfef15 	stw	r2,-68(fp)
                                break;
81135944:	00000606 	br	81135960 <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81135948:	e0bff317 	ldw	r2,-52(fp)
8113594c:	10800044 	addi	r2,r2,1
81135950:	e0bff315 	stw	r2,-52(fp)
81135954:	e0bff317 	ldw	r2,-52(fp)
81135958:	10800410 	cmplti	r2,r2,16
8113595c:	103fdc1e 	bne	r2,zero,811358d0 <__reset+0xfb1158d0>
                }
                else
                {
                    break;
                }
                if (result)
81135960:	e0bfef17 	ldw	r2,-68(fp)
81135964:	10000c1e 	bne	r2,zero,81135998 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135968:	e0bff217 	ldw	r2,-56(fp)
8113596c:	10800044 	addi	r2,r2,1
81135970:	e0bff215 	stw	r2,-56(fp)
81135974:	00a04574 	movhi	r2,33045
81135978:	1081f504 	addi	r2,r2,2004
8113597c:	10800383 	ldbu	r2,14(r2)
81135980:	10803fcc 	andi	r2,r2,255
81135984:	e0fff217 	ldw	r3,-56(fp)
81135988:	18bfc716 	blt	r3,r2,811358a8 <__reset+0xfb1158a8>
8113598c:	00000306 	br	8113599c <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
81135990:	0001883a 	nop
81135994:	00000106 	br	8113599c <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
81135998:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
8113599c:	e0bfef17 	ldw	r2,-68(fp)
811359a0:	1000141e 	bne	r2,zero,811359f4 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
811359a4:	e0bfed17 	ldw	r2,-76(fp)
811359a8:	e0fffc04 	addi	r3,fp,-16
811359ac:	180b883a 	mov	r5,r3
811359b0:	1009883a 	mov	r4,r2
811359b4:	11339ec0 	call	811339ec <get_cluster_flag>
811359b8:	10000c26 	beq	r2,zero,811359ec <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
811359bc:	e0bffc0b 	ldhu	r2,-16(fp)
811359c0:	10bfffcc 	andi	r2,r2,65535
811359c4:	10fffe0c 	andi	r3,r2,65528
811359c8:	00bffe14 	movui	r2,65528
811359cc:	1880021e 	bne	r3,r2,811359d8 <find_file_in_directory+0x424>
					{
						return false;
811359d0:	0005883a 	mov	r2,zero
811359d4:	00001106 	br	81135a1c <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
811359d8:	e0bffc0b 	ldhu	r2,-16(fp)
811359dc:	10bfffcc 	andi	r2,r2,65535
811359e0:	10bffe0c 	andi	r2,r2,65528
811359e4:	e0bfed15 	stw	r2,-76(fp)
811359e8:	00000206 	br	811359f4 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
811359ec:	0005883a 	mov	r2,zero
811359f0:	00000a06 	br	81135a1c <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
811359f4:	e0bfed17 	ldw	r2,-76(fp)
811359f8:	00fffdd4 	movui	r3,65527
811359fc:	18800616 	blt	r3,r2,81135a18 <find_file_in_directory+0x464>
81135a00:	e0bfef17 	ldw	r2,-68(fp)
81135a04:	103f9926 	beq	r2,zero,8113586c <__reset+0xfb11586c>
81135a08:	00000306 	br	81135a18 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
81135a0c:	0001883a 	nop
81135a10:	00000106 	br	81135a18 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
81135a14:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
81135a18:	e0bfef17 	ldw	r2,-68(fp)
}
81135a1c:	e037883a 	mov	sp,fp
81135a20:	dfc00117 	ldw	ra,4(sp)
81135a24:	df000017 	ldw	fp,0(sp)
81135a28:	dec00204 	addi	sp,sp,8
81135a2c:	f800283a 	ret

81135a30 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
81135a30:	defff504 	addi	sp,sp,-44
81135a34:	de00012e 	bgeu	sp,et,81135a3c <find_first_empty_cluster+0xc>
81135a38:	003b68fa 	trap	3
81135a3c:	dfc00a15 	stw	ra,40(sp)
81135a40:	df000915 	stw	fp,36(sp)
81135a44:	df000904 	addi	fp,sp,36
81135a48:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
81135a4c:	00a04574 	movhi	r2,33045
81135a50:	1081f504 	addi	r2,r2,2004
81135a54:	10801117 	ldw	r2,68(r2)
81135a58:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
81135a5c:	00800084 	movi	r2,2
81135a60:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
81135a64:	00bfffc4 	movi	r2,-1
81135a68:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
81135a6c:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
81135a70:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
81135a74:	00a04574 	movhi	r2,33045
81135a78:	1081f504 	addi	r2,r2,2004
81135a7c:	10801417 	ldw	r2,80(r2)
81135a80:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
81135a84:	00a04574 	movhi	r2,33045
81135a88:	1081f504 	addi	r2,r2,2004
81135a8c:	1080058b 	ldhu	r2,22(r2)
81135a90:	10bfffcc 	andi	r2,r2,65535
81135a94:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
81135a98:	00a04574 	movhi	r2,33045
81135a9c:	1081f504 	addi	r2,r2,2004
81135aa0:	10800917 	ldw	r2,36(r2)
81135aa4:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
81135aa8:	e0bffd17 	ldw	r2,-12(fp)
81135aac:	e0fffe17 	ldw	r3,-8(fp)
81135ab0:	18800b2e 	bgeu	r3,r2,81135ae0 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81135ab4:	e0fffd17 	ldw	r3,-12(fp)
81135ab8:	e0bffc17 	ldw	r2,-16(fp)
81135abc:	1887c83a 	sub	r3,r3,r2
81135ac0:	00a04574 	movhi	r2,33045
81135ac4:	1081f504 	addi	r2,r2,2004
81135ac8:	10800383 	ldbu	r2,14(r2)
81135acc:	10803fcc 	andi	r2,r2,255
81135ad0:	1885203a 	divu	r2,r3,r2
81135ad4:	10800044 	addi	r2,r2,1
81135ad8:	e0bffb15 	stw	r2,-20(fp)
81135adc:	00002a06 	br	81135b88 <find_first_empty_cluster+0x158>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81135ae0:	e0fffe17 	ldw	r3,-8(fp)
81135ae4:	e0bffc17 	ldw	r2,-16(fp)
81135ae8:	1887c83a 	sub	r3,r3,r2
81135aec:	00a04574 	movhi	r2,33045
81135af0:	1081f504 	addi	r2,r2,2004
81135af4:	10800383 	ldbu	r2,14(r2)
81135af8:	10803fcc 	andi	r2,r2,255
81135afc:	1885203a 	divu	r2,r3,r2
81135b00:	10800044 	addi	r2,r2,1
81135b04:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
81135b08:	00001f06 	br	81135b88 <find_first_empty_cluster+0x158>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
81135b0c:	e0bff717 	ldw	r2,-36(fp)
81135b10:	d0e09a17 	ldw	r3,-32152(gp)
81135b14:	180b883a 	mov	r5,r3
81135b18:	1009883a 	mov	r4,r2
81135b1c:	113390c0 	call	8113390c <Read_Sector_Data>
81135b20:	10001426 	beq	r2,zero,81135b74 <find_first_empty_cluster+0x144>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
81135b24:	e0bff817 	ldw	r2,-32(fp)
81135b28:	10803fcc 	andi	r2,r2,255
81135b2c:	1085883a 	add	r2,r2,r2
81135b30:	1007883a 	mov	r3,r2
81135b34:	d0a09c17 	ldw	r2,-32144(gp)
81135b38:	10800a17 	ldw	r2,40(r2)
81135b3c:	1885883a 	add	r2,r3,r2
81135b40:	1080002b 	ldhuio	r2,0(r2)
81135b44:	10bfffcc 	andi	r2,r2,65535
81135b48:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
81135b4c:	e0bff90f 	ldh	r2,-28(fp)
81135b50:	10000726 	beq	r2,zero,81135b70 <find_first_empty_cluster+0x140>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
81135b54:	e0bff817 	ldw	r2,-32(fp)
81135b58:	10800044 	addi	r2,r2,1
81135b5c:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
81135b60:	e0bff817 	ldw	r2,-32(fp)
81135b64:	10803fcc 	andi	r2,r2,255
81135b68:	103fee1e 	bne	r2,zero,81135b24 <__reset+0xfb115b24>
81135b6c:	00000106 	br	81135b74 <find_first_empty_cluster+0x144>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
81135b70:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
81135b74:	e0bff90f 	ldh	r2,-28(fp)
81135b78:	10000926 	beq	r2,zero,81135ba0 <find_first_empty_cluster+0x170>
        {
            break;
        }
        sector++;
81135b7c:	e0bff717 	ldw	r2,-36(fp)
81135b80:	10800044 	addi	r2,r2,1
81135b84:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
81135b88:	00a04574 	movhi	r2,33045
81135b8c:	1081f504 	addi	r2,r2,2004
81135b90:	10c01217 	ldw	r3,72(r2)
81135b94:	e0bff717 	ldw	r2,-36(fp)
81135b98:	18bfdc1e 	bne	r3,r2,81135b0c <__reset+0xfb115b0c>
81135b9c:	00000106 	br	81135ba4 <find_first_empty_cluster+0x174>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
81135ba0:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
81135ba4:	e0bff90f 	ldh	r2,-28(fp)
81135ba8:	1000081e 	bne	r2,zero,81135bcc <find_first_empty_cluster+0x19c>
81135bac:	e0bff90f 	ldh	r2,-28(fp)
81135bb0:	e0fffb17 	ldw	r3,-20(fp)
81135bb4:	18800536 	bltu	r3,r2,81135bcc <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
81135bb8:	e0bfff17 	ldw	r2,-4(fp)
81135bbc:	e0fff817 	ldw	r3,-32(fp)
81135bc0:	10c00015 	stw	r3,0(r2)
		result = true;
81135bc4:	00800044 	movi	r2,1
81135bc8:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
81135bcc:	e0bffa17 	ldw	r2,-24(fp)
}
81135bd0:	e037883a 	mov	sp,fp
81135bd4:	dfc00117 	ldw	ra,4(sp)
81135bd8:	df000017 	ldw	fp,0(sp)
81135bdc:	dec00204 	addi	sp,sp,8
81135be0:	f800283a 	ret

81135be4 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
81135be4:	defff604 	addi	sp,sp,-40
81135be8:	de00012e 	bgeu	sp,et,81135bf0 <find_first_empty_record_in_a_subdirectory+0xc>
81135bec:	003b68fa 	trap	3
81135bf0:	dfc00915 	stw	ra,36(sp)
81135bf4:	df000815 	stw	fp,32(sp)
81135bf8:	df000804 	addi	fp,sp,32
81135bfc:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
81135c00:	00bfffc4 	movi	r2,-1
81135c04:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
81135c08:	e0bfff17 	ldw	r2,-4(fp)
81135c0c:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81135c10:	e0bff917 	ldw	r2,-28(fp)
81135c14:	10ffff84 	addi	r3,r2,-2
81135c18:	00a04574 	movhi	r2,33045
81135c1c:	1081f504 	addi	r2,r2,2004
81135c20:	10800383 	ldbu	r2,14(r2)
81135c24:	10803fcc 	andi	r2,r2,255
81135c28:	1885383a 	mul	r2,r3,r2
81135c2c:	1007883a 	mov	r3,r2
81135c30:	00a04574 	movhi	r2,33045
81135c34:	1081f504 	addi	r2,r2,2004
81135c38:	10801417 	ldw	r2,80(r2)
81135c3c:	1885883a 	add	r2,r3,r2
81135c40:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135c44:	e03ffa15 	stw	zero,-24(fp)
81135c48:	00002c06 	br	81135cfc <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81135c4c:	e0fffa17 	ldw	r3,-24(fp)
81135c50:	e0bffc17 	ldw	r2,-16(fp)
81135c54:	1885883a 	add	r2,r3,r2
81135c58:	d0e09a17 	ldw	r3,-32152(gp)
81135c5c:	180b883a 	mov	r5,r3
81135c60:	1009883a 	mov	r4,r2
81135c64:	113390c0 	call	8113390c <Read_Sector_Data>
81135c68:	10002b26 	beq	r2,zero,81135d18 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81135c6c:	e03ffb15 	stw	zero,-20(fp)
81135c70:	00001c06 	br	81135ce4 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81135c74:	e0bffb17 	ldw	r2,-20(fp)
81135c78:	1004917a 	slli	r2,r2,5
81135c7c:	1007883a 	mov	r3,r2
81135c80:	d0a09c17 	ldw	r2,-32144(gp)
81135c84:	10800a17 	ldw	r2,40(r2)
81135c88:	1885883a 	add	r2,r3,r2
81135c8c:	10800023 	ldbuio	r2,0(r2)
81135c90:	10803fcc 	andi	r2,r2,255
81135c94:	10803fcc 	andi	r2,r2,255
81135c98:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
81135c9c:	e0bffd0b 	ldhu	r2,-12(fp)
81135ca0:	10803960 	cmpeqi	r2,r2,229
81135ca4:	1000021e 	bne	r2,zero,81135cb0 <find_first_empty_record_in_a_subdirectory+0xcc>
81135ca8:	e0bffd0b 	ldhu	r2,-12(fp)
81135cac:	10000a1e 	bne	r2,zero,81135cd8 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
81135cb0:	e0bffa17 	ldw	r2,-24(fp)
81135cb4:	1006913a 	slli	r3,r2,4
81135cb8:	e0bffb17 	ldw	r2,-20(fp)
81135cbc:	1885883a 	add	r2,r3,r2
81135cc0:	1006943a 	slli	r3,r2,16
81135cc4:	e0bff917 	ldw	r2,-28(fp)
81135cc8:	1884b03a 	or	r2,r3,r2
81135ccc:	e0bff815 	stw	r2,-32(fp)
                        return result;
81135cd0:	e0bff817 	ldw	r2,-32(fp)
81135cd4:	00005306 	br	81135e24 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81135cd8:	e0bffb17 	ldw	r2,-20(fp)
81135cdc:	10800044 	addi	r2,r2,1
81135ce0:	e0bffb15 	stw	r2,-20(fp)
81135ce4:	e0bffb17 	ldw	r2,-20(fp)
81135ce8:	10800410 	cmplti	r2,r2,16
81135cec:	103fe11e 	bne	r2,zero,81135c74 <__reset+0xfb115c74>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135cf0:	e0bffa17 	ldw	r2,-24(fp)
81135cf4:	10800044 	addi	r2,r2,1
81135cf8:	e0bffa15 	stw	r2,-24(fp)
81135cfc:	00a04574 	movhi	r2,33045
81135d00:	1081f504 	addi	r2,r2,2004
81135d04:	10800383 	ldbu	r2,14(r2)
81135d08:	10803fcc 	andi	r2,r2,255
81135d0c:	e0fffa17 	ldw	r3,-24(fp)
81135d10:	18bfce16 	blt	r3,r2,81135c4c <__reset+0xfb115c4c>
81135d14:	00000106 	br	81135d1c <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
81135d18:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
81135d1c:	e0bff817 	ldw	r2,-32(fp)
81135d20:	1000390e 	bge	r2,zero,81135e08 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
81135d24:	e0bff917 	ldw	r2,-28(fp)
81135d28:	e0fffd84 	addi	r3,fp,-10
81135d2c:	180b883a 	mov	r5,r3
81135d30:	1009883a 	mov	r4,r2
81135d34:	11339ec0 	call	811339ec <get_cluster_flag>
81135d38:	10003126 	beq	r2,zero,81135e00 <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81135d3c:	e0bffd8b 	ldhu	r2,-10(fp)
81135d40:	10bfffcc 	andi	r2,r2,65535
81135d44:	10fffe0c 	andi	r3,r2,65528
81135d48:	00bffe14 	movui	r2,65528
81135d4c:	18802e1e 	bne	r3,r2,81135e08 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
81135d50:	e0bffe04 	addi	r2,fp,-8
81135d54:	1009883a 	mov	r4,r2
81135d58:	1135a300 	call	81135a30 <find_first_empty_cluster>
81135d5c:	10002326 	beq	r2,zero,81135dec <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81135d60:	e0bff917 	ldw	r2,-28(fp)
81135d64:	e0fffe17 	ldw	r3,-8(fp)
81135d68:	18ffffcc 	andi	r3,r3,65535
81135d6c:	18e0001c 	xori	r3,r3,32768
81135d70:	18e00004 	addi	r3,r3,-32768
81135d74:	01800044 	movi	r6,1
81135d78:	180b883a 	mov	r5,r3
81135d7c:	1009883a 	mov	r4,r2
81135d80:	1133aa80 	call	81133aa8 <mark_cluster>
81135d84:	10001926 	beq	r2,zero,81135dec <find_first_empty_record_in_a_subdirectory+0x208>
81135d88:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81135d8c:	01800044 	movi	r6,1
81135d90:	017fffc4 	movi	r5,-1
81135d94:	1009883a 	mov	r4,r2
81135d98:	1133aa80 	call	81133aa8 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81135d9c:	10001326 	beq	r2,zero,81135dec <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81135da0:	e0bff917 	ldw	r2,-28(fp)
81135da4:	e0fffe17 	ldw	r3,-8(fp)
81135da8:	18ffffcc 	andi	r3,r3,65535
81135dac:	18e0001c 	xori	r3,r3,32768
81135db0:	18e00004 	addi	r3,r3,-32768
81135db4:	000d883a 	mov	r6,zero
81135db8:	180b883a 	mov	r5,r3
81135dbc:	1009883a 	mov	r4,r2
81135dc0:	1133aa80 	call	81133aa8 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81135dc4:	10000926 	beq	r2,zero,81135dec <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81135dc8:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
81135dcc:	000d883a 	mov	r6,zero
81135dd0:	017fffc4 	movi	r5,-1
81135dd4:	1009883a 	mov	r4,r2
81135dd8:	1133aa80 	call	81133aa8 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81135ddc:	10000326 	beq	r2,zero,81135dec <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
81135de0:	11338b80 	call	811338b8 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
81135de4:	e0bffe17 	ldw	r2,-8(fp)
81135de8:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
81135dec:	e0bffd8b 	ldhu	r2,-10(fp)
81135df0:	10bfffcc 	andi	r2,r2,65535
81135df4:	10bffe0c 	andi	r2,r2,65528
81135df8:	e0bff915 	stw	r2,-28(fp)
81135dfc:	00000206 	br	81135e08 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
81135e00:	00bfffc4 	movi	r2,-1
81135e04:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
81135e08:	e0bff917 	ldw	r2,-28(fp)
81135e0c:	00fffdd4 	movui	r3,65527
81135e10:	18800316 	blt	r3,r2,81135e20 <find_first_empty_record_in_a_subdirectory+0x23c>
81135e14:	e0bff817 	ldw	r2,-32(fp)
81135e18:	10bfffe0 	cmpeqi	r2,r2,-1
81135e1c:	103f7c1e 	bne	r2,zero,81135c10 <__reset+0xfb115c10>
    return result; 
81135e20:	e0bff817 	ldw	r2,-32(fp)
}
81135e24:	e037883a 	mov	sp,fp
81135e28:	dfc00117 	ldw	ra,4(sp)
81135e2c:	df000017 	ldw	fp,0(sp)
81135e30:	dec00204 	addi	sp,sp,8
81135e34:	f800283a 	ret

81135e38 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
81135e38:	defff904 	addi	sp,sp,-28
81135e3c:	de00012e 	bgeu	sp,et,81135e44 <find_first_empty_record_in_root_directory+0xc>
81135e40:	003b68fa 	trap	3
81135e44:	dfc00615 	stw	ra,24(sp)
81135e48:	df000515 	stw	fp,20(sp)
81135e4c:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81135e50:	00a04574 	movhi	r2,33045
81135e54:	1081f504 	addi	r2,r2,2004
81135e58:	1080050b 	ldhu	r2,20(r2)
81135e5c:	10bfffcc 	andi	r2,r2,65535
81135e60:	1006917a 	slli	r3,r2,5
81135e64:	00a04574 	movhi	r2,33045
81135e68:	1081f504 	addi	r2,r2,2004
81135e6c:	1080030b 	ldhu	r2,12(r2)
81135e70:	10bfffcc 	andi	r2,r2,65535
81135e74:	1885283a 	div	r2,r3,r2
81135e78:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
81135e7c:	00bfffc4 	movi	r2,-1
81135e80:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135e84:	e03ffb15 	stw	zero,-20(fp)
81135e88:	00002d06 	br	81135f40 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81135e8c:	00a04574 	movhi	r2,33045
81135e90:	1081f504 	addi	r2,r2,2004
81135e94:	10c01317 	ldw	r3,76(r2)
81135e98:	e0bffb17 	ldw	r2,-20(fp)
81135e9c:	1885883a 	add	r2,r3,r2
81135ea0:	1007883a 	mov	r3,r2
81135ea4:	d0a09a17 	ldw	r2,-32152(gp)
81135ea8:	100b883a 	mov	r5,r2
81135eac:	1809883a 	mov	r4,r3
81135eb0:	113390c0 	call	8113390c <Read_Sector_Data>
81135eb4:	10002626 	beq	r2,zero,81135f50 <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81135eb8:	e03ffc15 	stw	zero,-16(fp)
81135ebc:	00001a06 	br	81135f28 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81135ec0:	e0bffc17 	ldw	r2,-16(fp)
81135ec4:	1004917a 	slli	r2,r2,5
81135ec8:	1007883a 	mov	r3,r2
81135ecc:	d0a09c17 	ldw	r2,-32144(gp)
81135ed0:	10800a17 	ldw	r2,40(r2)
81135ed4:	1885883a 	add	r2,r3,r2
81135ed8:	10800023 	ldbuio	r2,0(r2)
81135edc:	10803fcc 	andi	r2,r2,255
81135ee0:	10803fcc 	andi	r2,r2,255
81135ee4:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
81135ee8:	e0bfff0b 	ldhu	r2,-4(fp)
81135eec:	10803960 	cmpeqi	r2,r2,229
81135ef0:	1000021e 	bne	r2,zero,81135efc <find_first_empty_record_in_root_directory+0xc4>
81135ef4:	e0bfff0b 	ldhu	r2,-4(fp)
81135ef8:	1000081e 	bne	r2,zero,81135f1c <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
81135efc:	e0bffb17 	ldw	r2,-20(fp)
81135f00:	1006913a 	slli	r3,r2,4
81135f04:	e0bffc17 	ldw	r2,-16(fp)
81135f08:	1885883a 	add	r2,r3,r2
81135f0c:	1004943a 	slli	r2,r2,16
81135f10:	e0bffe15 	stw	r2,-8(fp)
                    return result;
81135f14:	e0bffe17 	ldw	r2,-8(fp)
81135f18:	00000f06 	br	81135f58 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81135f1c:	e0bffc17 	ldw	r2,-16(fp)
81135f20:	10800044 	addi	r2,r2,1
81135f24:	e0bffc15 	stw	r2,-16(fp)
81135f28:	e0bffc17 	ldw	r2,-16(fp)
81135f2c:	10800410 	cmplti	r2,r2,16
81135f30:	103fe31e 	bne	r2,zero,81135ec0 <__reset+0xfb115ec0>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135f34:	e0bffb17 	ldw	r2,-20(fp)
81135f38:	10800044 	addi	r2,r2,1
81135f3c:	e0bffb15 	stw	r2,-20(fp)
81135f40:	e0fffb17 	ldw	r3,-20(fp)
81135f44:	e0bffd17 	ldw	r2,-12(fp)
81135f48:	18bfd016 	blt	r3,r2,81135e8c <__reset+0xfb115e8c>
81135f4c:	00000106 	br	81135f54 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
81135f50:	0001883a 	nop
        }
    }
    return result;
81135f54:	e0bffe17 	ldw	r2,-8(fp)
}
81135f58:	e037883a 	mov	sp,fp
81135f5c:	dfc00117 	ldw	ra,4(sp)
81135f60:	df000017 	ldw	fp,0(sp)
81135f64:	dec00204 	addi	sp,sp,8
81135f68:	f800283a 	ret

81135f6c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
81135f6c:	defffa04 	addi	sp,sp,-24
81135f70:	de00012e 	bgeu	sp,et,81135f78 <convert_filename_to_name_extension+0xc>
81135f74:	003b68fa 	trap	3
81135f78:	df000515 	stw	fp,20(sp)
81135f7c:	df000504 	addi	fp,sp,20
81135f80:	e13ffd15 	stw	r4,-12(fp)
81135f84:	e17ffe15 	stw	r5,-8(fp)
81135f88:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
81135f8c:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
81135f90:	e03ffb15 	stw	zero,-20(fp)
81135f94:	00002506 	br	8113602c <convert_filename_to_name_extension+0xc0>
    {
        if (filename[local] != '.')
81135f98:	e0bffc17 	ldw	r2,-16(fp)
81135f9c:	e0fffd17 	ldw	r3,-12(fp)
81135fa0:	1885883a 	add	r2,r3,r2
81135fa4:	10800003 	ldbu	r2,0(r2)
81135fa8:	10803fcc 	andi	r2,r2,255
81135fac:	1080201c 	xori	r2,r2,128
81135fb0:	10bfe004 	addi	r2,r2,-128
81135fb4:	10800ba0 	cmpeqi	r2,r2,46
81135fb8:	1000141e 	bne	r2,zero,8113600c <convert_filename_to_name_extension+0xa0>
        {
            name[counter] = filename[local];
81135fbc:	e0bffb17 	ldw	r2,-20(fp)
81135fc0:	e0fffe17 	ldw	r3,-8(fp)
81135fc4:	1885883a 	add	r2,r3,r2
81135fc8:	e0fffc17 	ldw	r3,-16(fp)
81135fcc:	e13ffd17 	ldw	r4,-12(fp)
81135fd0:	20c7883a 	add	r3,r4,r3
81135fd4:	18c00003 	ldbu	r3,0(r3)
81135fd8:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
81135fdc:	e0bffc17 	ldw	r2,-16(fp)
81135fe0:	e0fffd17 	ldw	r3,-12(fp)
81135fe4:	1885883a 	add	r2,r3,r2
81135fe8:	10800003 	ldbu	r2,0(r2)
81135fec:	10803fcc 	andi	r2,r2,255
81135ff0:	1080201c 	xori	r2,r2,128
81135ff4:	10bfe004 	addi	r2,r2,-128
81135ff8:	10000926 	beq	r2,zero,81136020 <convert_filename_to_name_extension+0xb4>
81135ffc:	e0bffc17 	ldw	r2,-16(fp)
81136000:	10800044 	addi	r2,r2,1
81136004:	e0bffc15 	stw	r2,-16(fp)
81136008:	00000506 	br	81136020 <convert_filename_to_name_extension+0xb4>
        }
        else
        {
            name[counter] = ' ';
8113600c:	e0bffb17 	ldw	r2,-20(fp)
81136010:	e0fffe17 	ldw	r3,-8(fp)
81136014:	1885883a 	add	r2,r3,r2
81136018:	00c00804 	movi	r3,32
8113601c:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
81136020:	e0bffb17 	ldw	r2,-20(fp)
81136024:	10800044 	addi	r2,r2,1
81136028:	e0bffb15 	stw	r2,-20(fp)
8113602c:	e0bffb17 	ldw	r2,-20(fp)
81136030:	10800210 	cmplti	r2,r2,8
81136034:	103fd81e 	bne	r2,zero,81135f98 <__reset+0xfb115f98>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
81136038:	e0bffc17 	ldw	r2,-16(fp)
8113603c:	e0fffd17 	ldw	r3,-12(fp)
81136040:	1885883a 	add	r2,r3,r2
81136044:	10800003 	ldbu	r2,0(r2)
81136048:	10803fcc 	andi	r2,r2,255
8113604c:	1080201c 	xori	r2,r2,128
81136050:	10bfe004 	addi	r2,r2,-128
81136054:	10800b98 	cmpnei	r2,r2,46
81136058:	1000031e 	bne	r2,zero,81136068 <convert_filename_to_name_extension+0xfc>
8113605c:	e0bffc17 	ldw	r2,-16(fp)
81136060:	10800044 	addi	r2,r2,1
81136064:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
81136068:	e03ffb15 	stw	zero,-20(fp)
8113606c:	00001c06 	br	811360e0 <convert_filename_to_name_extension+0x174>
    {
        if (filename[local] != 0)
81136070:	e0bffc17 	ldw	r2,-16(fp)
81136074:	e0fffd17 	ldw	r3,-12(fp)
81136078:	1885883a 	add	r2,r3,r2
8113607c:	10800003 	ldbu	r2,0(r2)
81136080:	10803fcc 	andi	r2,r2,255
81136084:	1080201c 	xori	r2,r2,128
81136088:	10bfe004 	addi	r2,r2,-128
8113608c:	10000c26 	beq	r2,zero,811360c0 <convert_filename_to_name_extension+0x154>
        {
            extension[counter] = filename[local];
81136090:	e0bffb17 	ldw	r2,-20(fp)
81136094:	e0ffff17 	ldw	r3,-4(fp)
81136098:	1885883a 	add	r2,r3,r2
8113609c:	e0fffc17 	ldw	r3,-16(fp)
811360a0:	e13ffd17 	ldw	r4,-12(fp)
811360a4:	20c7883a 	add	r3,r4,r3
811360a8:	18c00003 	ldbu	r3,0(r3)
811360ac:	10c00005 	stb	r3,0(r2)
            local++;
811360b0:	e0bffc17 	ldw	r2,-16(fp)
811360b4:	10800044 	addi	r2,r2,1
811360b8:	e0bffc15 	stw	r2,-16(fp)
811360bc:	00000506 	br	811360d4 <convert_filename_to_name_extension+0x168>
        }
        else
        {
            extension[counter] = ' ';
811360c0:	e0bffb17 	ldw	r2,-20(fp)
811360c4:	e0ffff17 	ldw	r3,-4(fp)
811360c8:	1885883a 	add	r2,r3,r2
811360cc:	00c00804 	movi	r3,32
811360d0:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
811360d4:	e0bffb17 	ldw	r2,-20(fp)
811360d8:	10800044 	addi	r2,r2,1
811360dc:	e0bffb15 	stw	r2,-20(fp)
811360e0:	e0bffb17 	ldw	r2,-20(fp)
811360e4:	108000d0 	cmplti	r2,r2,3
811360e8:	103fe11e 	bne	r2,zero,81136070 <__reset+0xfb116070>
        {
            extension[counter] = ' ';
        }
    }

}
811360ec:	0001883a 	nop
811360f0:	e037883a 	mov	sp,fp
811360f4:	df000017 	ldw	fp,0(sp)
811360f8:	dec00104 	addi	sp,sp,4
811360fc:	f800283a 	ret

81136100 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
81136100:	defff504 	addi	sp,sp,-44
81136104:	de00012e 	bgeu	sp,et,8113610c <create_file+0xc>
81136108:	003b68fa 	trap	3
8113610c:	dfc00a15 	stw	ra,40(sp)
81136110:	df000915 	stw	fp,36(sp)
81136114:	df000904 	addi	fp,sp,36
81136118:	e13ffd15 	stw	r4,-12(fp)
8113611c:	e17ffe15 	stw	r5,-8(fp)
81136120:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
81136124:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
81136128:	e0bffc04 	addi	r2,fp,-16
8113612c:	1009883a 	mov	r4,r2
81136130:	1135a300 	call	81135a30 <find_first_empty_cluster>
81136134:	1000a026 	beq	r2,zero,811363b8 <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
81136138:	e0bfff17 	ldw	r2,-4(fp)
8113613c:	10800a17 	ldw	r2,40(r2)
81136140:	1000031e 	bne	r2,zero,81136150 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
81136144:	1135e380 	call	81135e38 <find_first_empty_record_in_root_directory>
81136148:	e0bff815 	stw	r2,-32(fp)
8113614c:	00000606 	br	81136168 <create_file+0x68>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
81136150:	e0bfff17 	ldw	r2,-4(fp)
81136154:	1080058b 	ldhu	r2,22(r2)
81136158:	10bfffcc 	andi	r2,r2,65535
8113615c:	1009883a 	mov	r4,r2
81136160:	1135be40 	call	81135be4 <find_first_empty_record_in_a_subdirectory>
81136164:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
81136168:	e0bff817 	ldw	r2,-32(fp)
8113616c:	10009216 	blt	r2,zero,811363b8 <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
81136170:	e13ffd17 	ldw	r4,-12(fp)
81136174:	1134d100 	call	81134d10 <get_dir_divider_location>
81136178:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
8113617c:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
81136180:	00000b06 	br	811361b0 <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
81136184:	e0fffa17 	ldw	r3,-24(fp)
81136188:	e0bff917 	ldw	r2,-28(fp)
8113618c:	1885883a 	add	r2,r3,r2
81136190:	10800044 	addi	r2,r2,1
81136194:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
81136198:	e0bffa17 	ldw	r2,-24(fp)
8113619c:	e0fffd17 	ldw	r3,-12(fp)
811361a0:	1885883a 	add	r2,r3,r2
811361a4:	1009883a 	mov	r4,r2
811361a8:	1134d100 	call	81134d10 <get_dir_divider_location>
811361ac:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
811361b0:	e0bff917 	ldw	r2,-28(fp)
811361b4:	00bff316 	blt	zero,r2,81136184 <__reset+0xfb116184>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
811361b8:	e0bffa17 	ldw	r2,-24(fp)
811361bc:	e0fffd17 	ldw	r3,-12(fp)
811361c0:	1887883a 	add	r3,r3,r2
811361c4:	e13ffe17 	ldw	r4,-8(fp)
811361c8:	e0bffe17 	ldw	r2,-8(fp)
811361cc:	10800204 	addi	r2,r2,8
811361d0:	100d883a 	mov	r6,r2
811361d4:	200b883a 	mov	r5,r4
811361d8:	1809883a 	mov	r4,r3
811361dc:	1135f6c0 	call	81135f6c <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
811361e0:	e0bffe17 	ldw	r2,-8(fp)
811361e4:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
811361e8:	e0bffe17 	ldw	r2,-8(fp)
811361ec:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
811361f0:	e0bffe17 	ldw	r2,-8(fp)
811361f4:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
811361f8:	e0bffe17 	ldw	r2,-8(fp)
811361fc:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
81136200:	e0bffe17 	ldw	r2,-8(fp)
81136204:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
81136208:	e0bffe17 	ldw	r2,-8(fp)
8113620c:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
81136210:	e0bffc17 	ldw	r2,-16(fp)
81136214:	1007883a 	mov	r3,r2
81136218:	e0bffe17 	ldw	r2,-8(fp)
8113621c:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
81136220:	e0bffe17 	ldw	r2,-8(fp)
81136224:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
81136228:	e0fffc17 	ldw	r3,-16(fp)
8113622c:	e0bffe17 	ldw	r2,-8(fp)
81136230:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
81136234:	e0bffe17 	ldw	r2,-8(fp)
81136238:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
8113623c:	e0bffe17 	ldw	r2,-8(fp)
81136240:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
81136244:	e0bff817 	ldw	r2,-32(fp)
81136248:	10ffffcc 	andi	r3,r2,65535
8113624c:	e0bffe17 	ldw	r2,-8(fp)
81136250:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
81136254:	e0bff817 	ldw	r2,-32(fp)
81136258:	1004d43a 	srli	r2,r2,16
8113625c:	1000010e 	bge	r2,zero,81136264 <create_file+0x164>
81136260:	108003c4 	addi	r2,r2,15
81136264:	1005d13a 	srai	r2,r2,4
81136268:	1007883a 	mov	r3,r2
8113626c:	e0bffe17 	ldw	r2,-8(fp)
81136270:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
81136274:	e0bff817 	ldw	r2,-32(fp)
81136278:	1004d43a 	srli	r2,r2,16
8113627c:	1007883a 	mov	r3,r2
81136280:	00a00034 	movhi	r2,32768
81136284:	108003c4 	addi	r2,r2,15
81136288:	1884703a 	and	r2,r3,r2
8113628c:	1000040e 	bge	r2,zero,811362a0 <create_file+0x1a0>
81136290:	10bfffc4 	addi	r2,r2,-1
81136294:	00fffc04 	movi	r3,-16
81136298:	10c4b03a 	or	r2,r2,r3
8113629c:	10800044 	addi	r2,r2,1
811362a0:	1004917a 	slli	r2,r2,5
811362a4:	1007883a 	mov	r3,r2
811362a8:	e0bffe17 	ldw	r2,-8(fp)
811362ac:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
811362b0:	e0bfff17 	ldw	r2,-4(fp)
811362b4:	1080058b 	ldhu	r2,22(r2)
811362b8:	10ffffcc 	andi	r3,r2,65535
811362bc:	e0bffe17 	ldw	r2,-8(fp)
811362c0:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
811362c4:	e0bffe17 	ldw	r2,-8(fp)
811362c8:	00c00044 	movi	r3,1
811362cc:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
811362d0:	e0bffe17 	ldw	r2,-8(fp)
811362d4:	00c00044 	movi	r3,1
811362d8:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
811362dc:	e0bffe17 	ldw	r2,-8(fp)
811362e0:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
811362e4:	1000071e 	bne	r2,zero,81136304 <create_file+0x204>
811362e8:	00a04574 	movhi	r2,33045
811362ec:	1081f504 	addi	r2,r2,2004
811362f0:	10c01317 	ldw	r3,76(r2)
811362f4:	e0bffe17 	ldw	r2,-8(fp)
811362f8:	10800b17 	ldw	r2,44(r2)
811362fc:	1885883a 	add	r2,r3,r2
81136300:	00000f06 	br	81136340 <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
81136304:	00a04574 	movhi	r2,33045
81136308:	1081f504 	addi	r2,r2,2004
8113630c:	10c01417 	ldw	r3,80(r2)
81136310:	e0bffe17 	ldw	r2,-8(fp)
81136314:	10800a17 	ldw	r2,40(r2)
81136318:	113fff84 	addi	r4,r2,-2
8113631c:	00a04574 	movhi	r2,33045
81136320:	1081f504 	addi	r2,r2,2004
81136324:	10800383 	ldbu	r2,14(r2)
81136328:	10803fcc 	andi	r2,r2,255
8113632c:	2085383a 	mul	r2,r4,r2
81136330:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
81136334:	e0bffe17 	ldw	r2,-8(fp)
81136338:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
8113633c:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81136340:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
81136344:	e0bffb17 	ldw	r2,-20(fp)
81136348:	d0e09a17 	ldw	r3,-32152(gp)
8113634c:	180b883a 	mov	r5,r3
81136350:	1009883a 	mov	r4,r2
81136354:	113390c0 	call	8113390c <Read_Sector_Data>
81136358:	10001726 	beq	r2,zero,811363b8 <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
8113635c:	e0bffe17 	ldw	r2,-8(fp)
81136360:	10800c0b 	ldhu	r2,48(r2)
81136364:	10bfffcc 	andi	r2,r2,65535
81136368:	10a0001c 	xori	r2,r2,32768
8113636c:	10a00004 	addi	r2,r2,-32768
81136370:	e17ffe17 	ldw	r5,-8(fp)
81136374:	1009883a 	mov	r4,r2
81136378:	1133fc00 	call	81133fc0 <Write_File_Record_At_Offset>
8113637c:	10000e26 	beq	r2,zero,811363b8 <create_file+0x2b8>
                {
                    Save_Modified_Sector();
81136380:	11338b80 	call	811338b8 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
81136384:	e0bffc17 	ldw	r2,-16(fp)
81136388:	01800044 	movi	r6,1
8113638c:	017fffc4 	movi	r5,-1
81136390:	1009883a 	mov	r4,r2
81136394:	1133aa80 	call	81133aa8 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
81136398:	e0bffc17 	ldw	r2,-16(fp)
8113639c:	000d883a 	mov	r6,zero
811363a0:	017fffc4 	movi	r5,-1
811363a4:	1009883a 	mov	r4,r2
811363a8:	1133aa80 	call	81133aa8 <mark_cluster>
811363ac:	10000226 	beq	r2,zero,811363b8 <create_file+0x2b8>
                    {
                        result = true;
811363b0:	00800044 	movi	r2,1
811363b4:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
811363b8:	e0bff717 	ldw	r2,-36(fp)
}
811363bc:	e037883a 	mov	sp,fp
811363c0:	dfc00117 	ldw	ra,4(sp)
811363c4:	df000017 	ldw	fp,0(sp)
811363c8:	dec00204 	addi	sp,sp,8
811363cc:	f800283a 	ret

811363d0 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
811363d0:	defffb04 	addi	sp,sp,-20
811363d4:	de00012e 	bgeu	sp,et,811363dc <copy_file_record_name_to_string+0xc>
811363d8:	003b68fa 	trap	3
811363dc:	df000415 	stw	fp,16(sp)
811363e0:	df000404 	addi	fp,sp,16
811363e4:	e13ffe15 	stw	r4,-8(fp)
811363e8:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
811363ec:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
811363f0:	e03ffc15 	stw	zero,-16(fp)
811363f4:	00001506 	br	8113644c <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
811363f8:	e0fffe17 	ldw	r3,-8(fp)
811363fc:	e0bffc17 	ldw	r2,-16(fp)
81136400:	1885883a 	add	r2,r3,r2
81136404:	10800003 	ldbu	r2,0(r2)
81136408:	10803fcc 	andi	r2,r2,255
8113640c:	10800820 	cmpeqi	r2,r2,32
81136410:	10000b1e 	bne	r2,zero,81136440 <copy_file_record_name_to_string+0x70>
		{
			file_name[flength] = file_record->name[index];
81136414:	e0bffd17 	ldw	r2,-12(fp)
81136418:	e0ffff17 	ldw	r3,-4(fp)
8113641c:	1885883a 	add	r2,r3,r2
81136420:	e13ffe17 	ldw	r4,-8(fp)
81136424:	e0fffc17 	ldw	r3,-16(fp)
81136428:	20c7883a 	add	r3,r4,r3
8113642c:	18c00003 	ldbu	r3,0(r3)
81136430:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
81136434:	e0bffd17 	ldw	r2,-12(fp)
81136438:	10800044 	addi	r2,r2,1
8113643c:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81136440:	e0bffc17 	ldw	r2,-16(fp)
81136444:	10800044 	addi	r2,r2,1
81136448:	e0bffc15 	stw	r2,-16(fp)
8113644c:	e0bffc17 	ldw	r2,-16(fp)
81136450:	10800210 	cmplti	r2,r2,8
81136454:	103fe81e 	bne	r2,zero,811363f8 <__reset+0xfb1163f8>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
81136458:	e0bffe17 	ldw	r2,-8(fp)
8113645c:	10800203 	ldbu	r2,8(r2)
81136460:	10803fcc 	andi	r2,r2,255
81136464:	10800820 	cmpeqi	r2,r2,32
81136468:	1000241e 	bne	r2,zero,811364fc <copy_file_record_name_to_string+0x12c>
	{
		file_name[flength] = '.';
8113646c:	e0bffd17 	ldw	r2,-12(fp)
81136470:	e0ffff17 	ldw	r3,-4(fp)
81136474:	1885883a 	add	r2,r3,r2
81136478:	00c00b84 	movi	r3,46
8113647c:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
81136480:	e0bffd17 	ldw	r2,-12(fp)
81136484:	10800044 	addi	r2,r2,1
81136488:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
8113648c:	e03ffc15 	stw	zero,-16(fp)
81136490:	00001706 	br	811364f0 <copy_file_record_name_to_string+0x120>
		{
			if (file_record->extension[index] != ' ')
81136494:	e0fffe17 	ldw	r3,-8(fp)
81136498:	e0bffc17 	ldw	r2,-16(fp)
8113649c:	1885883a 	add	r2,r3,r2
811364a0:	10800204 	addi	r2,r2,8
811364a4:	10800003 	ldbu	r2,0(r2)
811364a8:	10803fcc 	andi	r2,r2,255
811364ac:	10800820 	cmpeqi	r2,r2,32
811364b0:	10000c1e 	bne	r2,zero,811364e4 <copy_file_record_name_to_string+0x114>
			{
				file_name[flength] = file_record->extension[index];
811364b4:	e0bffd17 	ldw	r2,-12(fp)
811364b8:	e0ffff17 	ldw	r3,-4(fp)
811364bc:	1885883a 	add	r2,r3,r2
811364c0:	e13ffe17 	ldw	r4,-8(fp)
811364c4:	e0fffc17 	ldw	r3,-16(fp)
811364c8:	20c7883a 	add	r3,r4,r3
811364cc:	18c00204 	addi	r3,r3,8
811364d0:	18c00003 	ldbu	r3,0(r3)
811364d4:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
811364d8:	e0bffd17 	ldw	r2,-12(fp)
811364dc:	10800044 	addi	r2,r2,1
811364e0:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
811364e4:	e0bffc17 	ldw	r2,-16(fp)
811364e8:	10800044 	addi	r2,r2,1
811364ec:	e0bffc15 	stw	r2,-16(fp)
811364f0:	e0bffc17 	ldw	r2,-16(fp)
811364f4:	108000d0 	cmplti	r2,r2,3
811364f8:	103fe61e 	bne	r2,zero,81136494 <__reset+0xfb116494>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
811364fc:	e0bffd17 	ldw	r2,-12(fp)
81136500:	e0ffff17 	ldw	r3,-4(fp)
81136504:	1885883a 	add	r2,r3,r2
81136508:	10000005 	stb	zero,0(r2)
}
8113650c:	0001883a 	nop
81136510:	e037883a 	mov	sp,fp
81136514:	df000017 	ldw	fp,0(sp)
81136518:	dec00104 	addi	sp,sp,4
8113651c:	f800283a 	ret

81136520 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
81136520:	defffc04 	addi	sp,sp,-16
81136524:	de00012e 	bgeu	sp,et,8113652c <alt_up_sd_card_open_dev+0xc>
81136528:	003b68fa 	trap	3
8113652c:	dfc00315 	stw	ra,12(sp)
81136530:	df000215 	stw	fp,8(sp)
81136534:	df000204 	addi	fp,sp,8
81136538:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
8113653c:	d1600d04 	addi	r5,gp,-32716
81136540:	e13fff17 	ldw	r4,-4(fp)
81136544:	113baac0 	call	8113baac <alt_find_dev>
81136548:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
8113654c:	e0bffe17 	ldw	r2,-8(fp)
81136550:	10001e26 	beq	r2,zero,811365cc <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
81136554:	e0bffe17 	ldw	r2,-8(fp)
81136558:	10800a17 	ldw	r2,40(r2)
8113655c:	10808d04 	addi	r2,r2,564
81136560:	d0a09415 	stw	r2,-32176(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
81136564:	e0bffe17 	ldw	r2,-8(fp)
81136568:	10800a17 	ldw	r2,40(r2)
8113656c:	10808904 	addi	r2,r2,548
81136570:	d0a09515 	stw	r2,-32172(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
81136574:	e0bffe17 	ldw	r2,-8(fp)
81136578:	10800a17 	ldw	r2,40(r2)
8113657c:	10808404 	addi	r2,r2,528
81136580:	d0a09615 	stw	r2,-32168(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
81136584:	e0bffe17 	ldw	r2,-8(fp)
81136588:	10800a17 	ldw	r2,40(r2)
8113658c:	10808c04 	addi	r2,r2,560
81136590:	d0a09715 	stw	r2,-32164(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
81136594:	e0bffe17 	ldw	r2,-8(fp)
81136598:	10800a17 	ldw	r2,40(r2)
8113659c:	10808b04 	addi	r2,r2,556
811365a0:	d0a09815 	stw	r2,-32160(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
811365a4:	e0bffe17 	ldw	r2,-8(fp)
811365a8:	10800a17 	ldw	r2,40(r2)
811365ac:	d0a09915 	stw	r2,-32156(gp)
		device_pointer = dev;
811365b0:	e0bffe17 	ldw	r2,-8(fp)
811365b4:	d0a09c15 	stw	r2,-32144(gp)
		initialized = false;
811365b8:	d0209215 	stw	zero,-32184(gp)
		is_sd_card_formated_as_FAT16 = false;
811365bc:	d0209315 	stw	zero,-32180(gp)
		search_data.valid = false;
811365c0:	00a04574 	movhi	r2,33045
811365c4:	1081f004 	addi	r2,r2,1984
811365c8:	10000415 	stw	zero,16(r2)
	}
	return dev;
811365cc:	e0bffe17 	ldw	r2,-8(fp)
}
811365d0:	e037883a 	mov	sp,fp
811365d4:	dfc00117 	ldw	ra,4(sp)
811365d8:	df000017 	ldw	fp,0(sp)
811365dc:	dec00204 	addi	sp,sp,8
811365e0:	f800283a 	ret

811365e4 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
811365e4:	defffd04 	addi	sp,sp,-12
811365e8:	de00012e 	bgeu	sp,et,811365f0 <alt_up_sd_card_is_Present+0xc>
811365ec:	003b68fa 	trap	3
811365f0:	df000215 	stw	fp,8(sp)
811365f4:	df000204 	addi	fp,sp,8
    bool result = false;
811365f8:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
811365fc:	d0a09c17 	ldw	r2,-32144(gp)
81136600:	10000826 	beq	r2,zero,81136624 <alt_up_sd_card_is_Present+0x40>
81136604:	d0a09417 	ldw	r2,-32176(gp)
81136608:	1080002b 	ldhuio	r2,0(r2)
8113660c:	10bfffcc 	andi	r2,r2,65535
81136610:	1080008c 	andi	r2,r2,2
81136614:	10000326 	beq	r2,zero,81136624 <alt_up_sd_card_is_Present+0x40>
    {
        result = true;
81136618:	00800044 	movi	r2,1
8113661c:	e0bffe15 	stw	r2,-8(fp)
81136620:	00001e06 	br	8113669c <alt_up_sd_card_is_Present+0xb8>
    }
	else if (initialized == true)
81136624:	d0a09217 	ldw	r2,-32184(gp)
81136628:	10800058 	cmpnei	r2,r2,1
8113662c:	10001b1e 	bne	r2,zero,8113669c <alt_up_sd_card_is_Present+0xb8>
	{
		int index;

		initialized = false;
81136630:	d0209215 	stw	zero,-32184(gp)
		search_data.valid = false;
81136634:	00a04574 	movhi	r2,33045
81136638:	1081f004 	addi	r2,r2,1984
8113663c:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
81136640:	d0209315 	stw	zero,-32180(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
81136644:	e03fff15 	stw	zero,-4(fp)
81136648:	00001106 	br	81136690 <alt_up_sd_card_is_Present+0xac>
		{
			active_files[index].in_use = false;
8113664c:	00a04574 	movhi	r2,33045
81136650:	10820a04 	addi	r2,r2,2088
81136654:	e0ffff17 	ldw	r3,-4(fp)
81136658:	180691ba 	slli	r3,r3,6
8113665c:	10c5883a 	add	r2,r2,r3
81136660:	10800f04 	addi	r2,r2,60
81136664:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
81136668:	00a04574 	movhi	r2,33045
8113666c:	10820a04 	addi	r2,r2,2088
81136670:	e0ffff17 	ldw	r3,-4(fp)
81136674:	180691ba 	slli	r3,r3,6
81136678:	10c5883a 	add	r2,r2,r3
8113667c:	10800e04 	addi	r2,r2,56
81136680:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
81136684:	e0bfff17 	ldw	r2,-4(fp)
81136688:	10800044 	addi	r2,r2,1
8113668c:	e0bfff15 	stw	r2,-4(fp)
81136690:	e0bfff17 	ldw	r2,-4(fp)
81136694:	10800510 	cmplti	r2,r2,20
81136698:	103fec1e 	bne	r2,zero,8113664c <__reset+0xfb11664c>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
8113669c:	e0bffe17 	ldw	r2,-8(fp)
}
811366a0:	e037883a 	mov	sp,fp
811366a4:	df000017 	ldw	fp,0(sp)
811366a8:	dec00104 	addi	sp,sp,4
811366ac:	f800283a 	ret

811366b0 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
811366b0:	defffd04 	addi	sp,sp,-12
811366b4:	de00012e 	bgeu	sp,et,811366bc <alt_up_sd_card_is_FAT16+0xc>
811366b8:	003b68fa 	trap	3
811366bc:	dfc00215 	stw	ra,8(sp)
811366c0:	df000115 	stw	fp,4(sp)
811366c4:	df000104 	addi	fp,sp,4
	bool result = false;
811366c8:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
811366cc:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
811366d0:	10000c26 	beq	r2,zero,81136704 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
811366d4:	d0a09217 	ldw	r2,-32184(gp)
811366d8:	1000071e 	bne	r2,zero,811366f8 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
811366dc:	11348dc0 	call	811348dc <Look_for_FAT16>
811366e0:	d0a09315 	stw	r2,-32180(gp)
			initialized = is_sd_card_formated_as_FAT16;
811366e4:	d0a09317 	ldw	r2,-32180(gp)
811366e8:	d0a09215 	stw	r2,-32184(gp)
			search_data.valid = false;
811366ec:	00a04574 	movhi	r2,33045
811366f0:	1081f004 	addi	r2,r2,1984
811366f4:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
811366f8:	d0a09317 	ldw	r2,-32180(gp)
811366fc:	e0bfff15 	stw	r2,-4(fp)
81136700:	00000206 	br	8113670c <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
81136704:	d0209215 	stw	zero,-32184(gp)
		is_sd_card_formated_as_FAT16 = false;
81136708:	d0209315 	stw	zero,-32180(gp)
	}

	return result;
8113670c:	e0bfff17 	ldw	r2,-4(fp)
}
81136710:	e037883a 	mov	sp,fp
81136714:	dfc00117 	ldw	ra,4(sp)
81136718:	df000017 	ldw	fp,0(sp)
8113671c:	dec00204 	addi	sp,sp,8
81136720:	f800283a 	ret

81136724 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
81136724:	deffea04 	addi	sp,sp,-88
81136728:	de00012e 	bgeu	sp,et,81136730 <alt_up_sd_card_find_first+0xc>
8113672c:	003b68fa 	trap	3
81136730:	dfc01515 	stw	ra,84(sp)
81136734:	df001415 	stw	fp,80(sp)
81136738:	df001404 	addi	fp,sp,80
8113673c:	e13ffe15 	stw	r4,-8(fp)
81136740:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
81136744:	00800084 	movi	r2,2
81136748:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8113674c:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
81136750:	10002426 	beq	r2,zero,811367e4 <alt_up_sd_card_find_first+0xc0>
81136754:	d0a09317 	ldw	r2,-32180(gp)
81136758:	10002226 	beq	r2,zero,811367e4 <alt_up_sd_card_find_first+0xc0>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
8113675c:	e0ffee04 	addi	r3,fp,-72
81136760:	e0bfed04 	addi	r2,fp,-76
81136764:	180d883a 	mov	r6,r3
81136768:	100b883a 	mov	r5,r2
8113676c:	e13ffe17 	ldw	r4,-8(fp)
81136770:	11350740 	call	81135074 <get_home_directory_cluster_for_file>
81136774:	10001926 	beq	r2,zero,811367dc <alt_up_sd_card_find_first+0xb8>
		{
			search_data.directory_root_cluster = home_directory_cluster;
81136778:	e0bfed17 	ldw	r2,-76(fp)
8113677c:	1007883a 	mov	r3,r2
81136780:	00a04574 	movhi	r2,33045
81136784:	1081f004 	addi	r2,r2,1984
81136788:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
8113678c:	e0bfed17 	ldw	r2,-76(fp)
81136790:	1007883a 	mov	r3,r2
81136794:	00a04574 	movhi	r2,33045
81136798:	1081f004 	addi	r2,r2,1984
8113679c:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
811367a0:	00a04574 	movhi	r2,33045
811367a4:	1081f004 	addi	r2,r2,1984
811367a8:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
811367ac:	00a04574 	movhi	r2,33045
811367b0:	1081f004 	addi	r2,r2,1984
811367b4:	00ffffc4 	movi	r3,-1
811367b8:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
811367bc:	00a04574 	movhi	r2,33045
811367c0:	1081f004 	addi	r2,r2,1984
811367c4:	00c00044 	movi	r3,1
811367c8:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
811367cc:	e13fff17 	ldw	r4,-4(fp)
811367d0:	11367fc0 	call	811367fc <alt_up_sd_card_find_next>
811367d4:	e0bfec0d 	sth	r2,-80(fp)
811367d8:	00000206 	br	811367e4 <alt_up_sd_card_find_first+0xc0>
		}
		else
		{
			result = 1;
811367dc:	00800044 	movi	r2,1
811367e0:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
811367e4:	e0bfec0b 	ldhu	r2,-80(fp)
}
811367e8:	e037883a 	mov	sp,fp
811367ec:	dfc00117 	ldw	ra,4(sp)
811367f0:	df000017 	ldw	fp,0(sp)
811367f4:	dec00204 	addi	sp,sp,8
811367f8:	f800283a 	ret

811367fc <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
811367fc:	deffe404 	addi	sp,sp,-112
81136800:	de00012e 	bgeu	sp,et,81136808 <alt_up_sd_card_find_next+0xc>
81136804:	003b68fa 	trap	3
81136808:	dfc01b15 	stw	ra,108(sp)
8113680c:	df001a15 	stw	fp,104(sp)
81136810:	df001a04 	addi	fp,sp,104
81136814:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
81136818:	00800084 	movi	r2,2
8113681c:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81136820:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
81136824:	1000df26 	beq	r2,zero,81136ba4 <alt_up_sd_card_find_next+0x3a8>
81136828:	d0a09317 	ldw	r2,-32180(gp)
8113682c:	1000dd26 	beq	r2,zero,81136ba4 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
81136830:	00a04574 	movhi	r2,33045
81136834:	1081f004 	addi	r2,r2,1984
81136838:	10800417 	ldw	r2,16(r2)
8113683c:	1000d726 	beq	r2,zero,81136b9c <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
81136840:	00a04574 	movhi	r2,33045
81136844:	1081f004 	addi	r2,r2,1984
81136848:	10800117 	ldw	r2,4(r2)
8113684c:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
81136850:	e0bfe717 	ldw	r2,-100(fp)
81136854:	1000561e 	bne	r2,zero,811369b0 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81136858:	00a04574 	movhi	r2,33045
8113685c:	1081f504 	addi	r2,r2,2004
81136860:	1080050b 	ldhu	r2,20(r2)
81136864:	10bfffcc 	andi	r2,r2,65535
81136868:	1006917a 	slli	r3,r2,5
8113686c:	00a04574 	movhi	r2,33045
81136870:	1081f504 	addi	r2,r2,2004
81136874:	1080030b 	ldhu	r2,12(r2)
81136878:	10bfffcc 	andi	r2,r2,65535
8113687c:	1885283a 	div	r2,r3,r2
81136880:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
81136884:	00a04574 	movhi	r2,33045
81136888:	1081f004 	addi	r2,r2,1984
8113688c:	10800217 	ldw	r2,8(r2)
81136890:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
81136894:	00a04574 	movhi	r2,33045
81136898:	1081f004 	addi	r2,r2,1984
8113689c:	1080030b 	ldhu	r2,12(r2)
811368a0:	10bfffcc 	andi	r2,r2,65535
811368a4:	10a0001c 	xori	r2,r2,32768
811368a8:	10a00004 	addi	r2,r2,-32768
811368ac:	10800044 	addi	r2,r2,1
811368b0:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
811368b4:	00003606 	br	81136990 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
811368b8:	00a04574 	movhi	r2,33045
811368bc:	1081f504 	addi	r2,r2,2004
811368c0:	10c01317 	ldw	r3,76(r2)
811368c4:	e0bfe817 	ldw	r2,-96(fp)
811368c8:	1885883a 	add	r2,r3,r2
811368cc:	1007883a 	mov	r3,r2
811368d0:	d0a09a17 	ldw	r2,-32152(gp)
811368d4:	100b883a 	mov	r5,r2
811368d8:	1809883a 	mov	r4,r3
811368dc:	113390c0 	call	8113390c <Read_Sector_Data>
811368e0:	10002f26 	beq	r2,zero,811369a0 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
811368e4:	00002306 	br	81136974 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
811368e8:	e0bfe917 	ldw	r2,-92(fp)
811368ec:	1004917a 	slli	r2,r2,5
811368f0:	e13fe817 	ldw	r4,-96(fp)
811368f4:	e0ffef04 	addi	r3,fp,-68
811368f8:	200f883a 	mov	r7,r4
811368fc:	000d883a 	mov	r6,zero
81136900:	180b883a 	mov	r5,r3
81136904:	1009883a 	mov	r4,r2
81136908:	1133d3c0 	call	81133d3c <Read_File_Record_At_Offset>
8113690c:	10001626 	beq	r2,zero,81136968 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81136910:	e0bfef03 	ldbu	r2,-68(fp)
81136914:	10803fcc 	andi	r2,r2,255
81136918:	10001326 	beq	r2,zero,81136968 <alt_up_sd_card_find_next+0x16c>
8113691c:	e0bfef03 	ldbu	r2,-68(fp)
81136920:	10803fcc 	andi	r2,r2,255
81136924:	10803960 	cmpeqi	r2,r2,229
81136928:	10000f1e 	bne	r2,zero,81136968 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
8113692c:	e0bfe917 	ldw	r2,-92(fp)
81136930:	1007883a 	mov	r3,r2
81136934:	00a04574 	movhi	r2,33045
81136938:	1081f004 	addi	r2,r2,1984
8113693c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
81136940:	e0ffe817 	ldw	r3,-96(fp)
81136944:	00a04574 	movhi	r2,33045
81136948:	1081f004 	addi	r2,r2,1984
8113694c:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
81136950:	e0bfef04 	addi	r2,fp,-68
81136954:	e17fff17 	ldw	r5,-4(fp)
81136958:	1009883a 	mov	r4,r2
8113695c:	11363d00 	call	811363d0 <copy_file_record_name_to_string>
									return 0;
81136960:	0005883a 	mov	r2,zero
81136964:	00009006 	br	81136ba8 <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81136968:	e0bfe917 	ldw	r2,-92(fp)
8113696c:	10800044 	addi	r2,r2,1
81136970:	e0bfe915 	stw	r2,-92(fp)
81136974:	e0bfe917 	ldw	r2,-92(fp)
81136978:	10800410 	cmplti	r2,r2,16
8113697c:	103fda1e 	bne	r2,zero,811368e8 <__reset+0xfb1168e8>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
81136980:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81136984:	e0bfe817 	ldw	r2,-96(fp)
81136988:	10800044 	addi	r2,r2,1
8113698c:	e0bfe815 	stw	r2,-96(fp)
81136990:	e0ffe817 	ldw	r3,-96(fp)
81136994:	e0bfec17 	ldw	r2,-80(fp)
81136998:	18bfc716 	blt	r3,r2,811368b8 <__reset+0xfb1168b8>
8113699c:	00000106 	br	811369a4 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
811369a0:	0001883a 	nop
					}
				}
				result = -1;
811369a4:	00bfffc4 	movi	r2,-1
811369a8:	e0bfe60d 	sth	r2,-104(fp)
811369ac:	00007d06 	br	81136ba4 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
811369b0:	00a04574 	movhi	r2,33045
811369b4:	1081f004 	addi	r2,r2,1984
811369b8:	1080030b 	ldhu	r2,12(r2)
811369bc:	10bfffcc 	andi	r2,r2,65535
811369c0:	10a0001c 	xori	r2,r2,32768
811369c4:	10a00004 	addi	r2,r2,-32768
811369c8:	10800044 	addi	r2,r2,1
811369cc:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811369d0:	e0bfe717 	ldw	r2,-100(fp)
811369d4:	10ffff84 	addi	r3,r2,-2
811369d8:	00a04574 	movhi	r2,33045
811369dc:	1081f504 	addi	r2,r2,2004
811369e0:	10800383 	ldbu	r2,14(r2)
811369e4:	10803fcc 	andi	r2,r2,255
811369e8:	1885383a 	mul	r2,r3,r2
811369ec:	1007883a 	mov	r3,r2
811369f0:	00a04574 	movhi	r2,33045
811369f4:	1081f504 	addi	r2,r2,2004
811369f8:	10801417 	ldw	r2,80(r2)
811369fc:	1885883a 	add	r2,r3,r2
81136a00:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
81136a04:	00a04574 	movhi	r2,33045
81136a08:	1081f004 	addi	r2,r2,1984
81136a0c:	10800217 	ldw	r2,8(r2)
81136a10:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81136a14:	00003806 	br	81136af8 <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81136a18:	e0ffeb17 	ldw	r3,-84(fp)
81136a1c:	e0bfed17 	ldw	r2,-76(fp)
81136a20:	1885883a 	add	r2,r3,r2
81136a24:	d0e09a17 	ldw	r3,-32152(gp)
81136a28:	180b883a 	mov	r5,r3
81136a2c:	1009883a 	mov	r4,r2
81136a30:	113390c0 	call	8113390c <Read_Sector_Data>
81136a34:	10003726 	beq	r2,zero,81136b14 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
81136a38:	00002806 	br	81136adc <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
81136a3c:	e0bfea17 	ldw	r2,-88(fp)
81136a40:	1004917a 	slli	r2,r2,5
81136a44:	e13fe717 	ldw	r4,-100(fp)
81136a48:	e17feb17 	ldw	r5,-84(fp)
81136a4c:	e0ffef04 	addi	r3,fp,-68
81136a50:	280f883a 	mov	r7,r5
81136a54:	200d883a 	mov	r6,r4
81136a58:	180b883a 	mov	r5,r3
81136a5c:	1009883a 	mov	r4,r2
81136a60:	1133d3c0 	call	81133d3c <Read_File_Record_At_Offset>
81136a64:	10001a26 	beq	r2,zero,81136ad0 <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81136a68:	e0bfef03 	ldbu	r2,-68(fp)
81136a6c:	10803fcc 	andi	r2,r2,255
81136a70:	10001726 	beq	r2,zero,81136ad0 <alt_up_sd_card_find_next+0x2d4>
81136a74:	e0bfef03 	ldbu	r2,-68(fp)
81136a78:	10803fcc 	andi	r2,r2,255
81136a7c:	10803960 	cmpeqi	r2,r2,229
81136a80:	1000131e 	bne	r2,zero,81136ad0 <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
81136a84:	e0ffe717 	ldw	r3,-100(fp)
81136a88:	00a04574 	movhi	r2,33045
81136a8c:	1081f004 	addi	r2,r2,1984
81136a90:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
81136a94:	e0bfea17 	ldw	r2,-88(fp)
81136a98:	1007883a 	mov	r3,r2
81136a9c:	00a04574 	movhi	r2,33045
81136aa0:	1081f004 	addi	r2,r2,1984
81136aa4:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
81136aa8:	e0ffeb17 	ldw	r3,-84(fp)
81136aac:	00a04574 	movhi	r2,33045
81136ab0:	1081f004 	addi	r2,r2,1984
81136ab4:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
81136ab8:	e0bfef04 	addi	r2,fp,-68
81136abc:	e17fff17 	ldw	r5,-4(fp)
81136ac0:	1009883a 	mov	r4,r2
81136ac4:	11363d00 	call	811363d0 <copy_file_record_name_to_string>
										return 0;
81136ac8:	0005883a 	mov	r2,zero
81136acc:	00003606 	br	81136ba8 <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
81136ad0:	e0bfea17 	ldw	r2,-88(fp)
81136ad4:	10800044 	addi	r2,r2,1
81136ad8:	e0bfea15 	stw	r2,-88(fp)
81136adc:	e0bfea17 	ldw	r2,-88(fp)
81136ae0:	10800410 	cmplti	r2,r2,16
81136ae4:	103fd51e 	bne	r2,zero,81136a3c <__reset+0xfb116a3c>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
81136ae8:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81136aec:	e0bfeb17 	ldw	r2,-84(fp)
81136af0:	10800044 	addi	r2,r2,1
81136af4:	e0bfeb15 	stw	r2,-84(fp)
81136af8:	00a04574 	movhi	r2,33045
81136afc:	1081f504 	addi	r2,r2,2004
81136b00:	10800383 	ldbu	r2,14(r2)
81136b04:	10803fcc 	andi	r2,r2,255
81136b08:	e0ffeb17 	ldw	r3,-84(fp)
81136b0c:	18bfc216 	blt	r3,r2,81136a18 <__reset+0xfb116a18>
81136b10:	00000106 	br	81136b18 <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
81136b14:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
81136b18:	00a04574 	movhi	r2,33045
81136b1c:	1081f504 	addi	r2,r2,2004
81136b20:	10800383 	ldbu	r2,14(r2)
81136b24:	10803fcc 	andi	r2,r2,255
81136b28:	e0ffeb17 	ldw	r3,-84(fp)
81136b2c:	18801716 	blt	r3,r2,81136b8c <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
81136b30:	e0bfe717 	ldw	r2,-100(fp)
81136b34:	e0ffee04 	addi	r3,fp,-72
81136b38:	180b883a 	mov	r5,r3
81136b3c:	1009883a 	mov	r4,r2
81136b40:	11339ec0 	call	811339ec <get_cluster_flag>
81136b44:	10000f26 	beq	r2,zero,81136b84 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81136b48:	e0bfee0b 	ldhu	r2,-72(fp)
81136b4c:	10bfffcc 	andi	r2,r2,65535
81136b50:	10fffe0c 	andi	r3,r2,65528
81136b54:	00bffe14 	movui	r2,65528
81136b58:	1880051e 	bne	r3,r2,81136b70 <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
81136b5c:	00bfffc4 	movi	r2,-1
81136b60:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
81136b64:	00a04574 	movhi	r2,33045
81136b68:	1081f004 	addi	r2,r2,1984
81136b6c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
81136b70:	e0bfee0b 	ldhu	r2,-72(fp)
81136b74:	10bfffcc 	andi	r2,r2,65535
81136b78:	10bffe0c 	andi	r2,r2,65528
81136b7c:	e0bfe715 	stw	r2,-100(fp)
81136b80:	00000206 	br	81136b8c <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
81136b84:	00bfffc4 	movi	r2,-1
81136b88:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
81136b8c:	e0bfe717 	ldw	r2,-100(fp)
81136b90:	00fffdd4 	movui	r3,65527
81136b94:	18bf8e0e 	bge	r3,r2,811369d0 <__reset+0xfb1169d0>
81136b98:	00000206 	br	81136ba4 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
81136b9c:	008000c4 	movi	r2,3
81136ba0:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
81136ba4:	e0bfe60b 	ldhu	r2,-104(fp)
}
81136ba8:	e037883a 	mov	sp,fp
81136bac:	dfc00117 	ldw	ra,4(sp)
81136bb0:	df000017 	ldw	fp,0(sp)
81136bb4:	dec00204 	addi	sp,sp,8
81136bb8:	f800283a 	ret

81136bbc <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
81136bbc:	deffe904 	addi	sp,sp,-92
81136bc0:	de00012e 	bgeu	sp,et,81136bc8 <alt_up_sd_card_fopen+0xc>
81136bc4:	003b68fa 	trap	3
81136bc8:	dfc01615 	stw	ra,88(sp)
81136bcc:	df001515 	stw	fp,84(sp)
81136bd0:	df001504 	addi	fp,sp,84
81136bd4:	e13ffe15 	stw	r4,-8(fp)
81136bd8:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
81136bdc:	00bfffc4 	movi	r2,-1
81136be0:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81136be4:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
81136be8:	1000cf26 	beq	r2,zero,81136f28 <alt_up_sd_card_fopen+0x36c>
81136bec:	d0a09317 	ldw	r2,-32180(gp)
81136bf0:	1000cd26 	beq	r2,zero,81136f28 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
81136bf4:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
81136bf8:	e13ffe17 	ldw	r4,-8(fp)
81136bfc:	11349d00 	call	811349d0 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
81136c00:	e13ffe17 	ldw	r4,-8(fp)
81136c04:	1134a9c0 	call	81134a9c <check_file_name_for_FAT16_compliance>
81136c08:	1000c726 	beq	r2,zero,81136f28 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
81136c0c:	e0ffee04 	addi	r3,fp,-72
81136c10:	e0bfed04 	addi	r2,fp,-76
81136c14:	180d883a 	mov	r6,r3
81136c18:	100b883a 	mov	r5,r2
81136c1c:	e13ffe17 	ldw	r4,-8(fp)
81136c20:	11350740 	call	81135074 <get_home_directory_cluster_for_file>
81136c24:	1000021e 	bne	r2,zero,81136c30 <alt_up_sd_card_fopen+0x74>
            {
                return file_record_index;
81136c28:	e0bfeb0b 	ldhu	r2,-84(fp)
81136c2c:	0000bf06 	br	81136f2c <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81136c30:	e03fec15 	stw	zero,-80(fp)
81136c34:	00000e06 	br	81136c70 <alt_up_sd_card_fopen+0xb4>
    		{
    			if (active_files[index].in_use == false)
81136c38:	00a04574 	movhi	r2,33045
81136c3c:	10820a04 	addi	r2,r2,2088
81136c40:	e0ffec17 	ldw	r3,-80(fp)
81136c44:	180691ba 	slli	r3,r3,6
81136c48:	10c5883a 	add	r2,r2,r3
81136c4c:	10800f04 	addi	r2,r2,60
81136c50:	10800017 	ldw	r2,0(r2)
81136c54:	1000031e 	bne	r2,zero,81136c64 <alt_up_sd_card_fopen+0xa8>
    			{
    				file_record_index = index;
81136c58:	e0bfec17 	ldw	r2,-80(fp)
81136c5c:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
81136c60:	00000606 	br	81136c7c <alt_up_sd_card_fopen+0xc0>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81136c64:	e0bfec17 	ldw	r2,-80(fp)
81136c68:	10800044 	addi	r2,r2,1
81136c6c:	e0bfec15 	stw	r2,-80(fp)
81136c70:	e0bfec17 	ldw	r2,-80(fp)
81136c74:	10800510 	cmplti	r2,r2,20
81136c78:	103fef1e 	bne	r2,zero,81136c38 <__reset+0xfb116c38>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
81136c7c:	e0bfeb0f 	ldh	r2,-84(fp)
81136c80:	1000a916 	blt	r2,zero,81136f28 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
81136c84:	e0bfed17 	ldw	r2,-76(fp)
81136c88:	1009883a 	mov	r4,r2
81136c8c:	e0bfeb0f 	ldh	r2,-84(fp)
81136c90:	100691ba 	slli	r3,r2,6
81136c94:	00a04574 	movhi	r2,33045
81136c98:	10820a04 	addi	r2,r2,2088
81136c9c:	1885883a 	add	r2,r3,r2
81136ca0:	100d883a 	mov	r6,r2
81136ca4:	e17ffe17 	ldw	r5,-8(fp)
81136ca8:	11355b40 	call	811355b4 <find_file_in_directory>
81136cac:	10007b26 	beq	r2,zero,81136e9c <alt_up_sd_card_fopen+0x2e0>
                {
                    if (create)
81136cb0:	e0bfff17 	ldw	r2,-4(fp)
81136cb4:	10000226 	beq	r2,zero,81136cc0 <alt_up_sd_card_fopen+0x104>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
81136cb8:	00bfffc4 	movi	r2,-1
81136cbc:	00009b06 	br	81136f2c <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
81136cc0:	e13feb0f 	ldh	r4,-84(fp)
81136cc4:	e0ffeb0f 	ldh	r3,-84(fp)
81136cc8:	00a04574 	movhi	r2,33045
81136ccc:	10820a04 	addi	r2,r2,2088
81136cd0:	180691ba 	slli	r3,r3,6
81136cd4:	10c5883a 	add	r2,r2,r3
81136cd8:	10800584 	addi	r2,r2,22
81136cdc:	1080000b 	ldhu	r2,0(r2)
81136ce0:	10ffffcc 	andi	r3,r2,65535
81136ce4:	00a04574 	movhi	r2,33045
81136ce8:	10820a04 	addi	r2,r2,2088
81136cec:	200891ba 	slli	r4,r4,6
81136cf0:	1105883a 	add	r2,r2,r4
81136cf4:	10800704 	addi	r2,r2,28
81136cf8:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
81136cfc:	e0ffeb0f 	ldh	r3,-84(fp)
81136d00:	00a04574 	movhi	r2,33045
81136d04:	10820a04 	addi	r2,r2,2088
81136d08:	180691ba 	slli	r3,r3,6
81136d0c:	10c5883a 	add	r2,r2,r3
81136d10:	10800804 	addi	r2,r2,32
81136d14:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
81136d18:	e0ffeb0f 	ldh	r3,-84(fp)
81136d1c:	00a04574 	movhi	r2,33045
81136d20:	10820a04 	addi	r2,r2,2088
81136d24:	180691ba 	slli	r3,r3,6
81136d28:	10c5883a 	add	r2,r2,r3
81136d2c:	10800904 	addi	r2,r2,36
81136d30:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
81136d34:	e0ffeb0f 	ldh	r3,-84(fp)
81136d38:	00a04574 	movhi	r2,33045
81136d3c:	10820a04 	addi	r2,r2,2088
81136d40:	180691ba 	slli	r3,r3,6
81136d44:	10c5883a 	add	r2,r2,r3
81136d48:	10800f04 	addi	r2,r2,60
81136d4c:	00c00044 	movi	r3,1
81136d50:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
81136d54:	e0ffeb0f 	ldh	r3,-84(fp)
81136d58:	00a04574 	movhi	r2,33045
81136d5c:	10820a04 	addi	r2,r2,2088
81136d60:	180691ba 	slli	r3,r3,6
81136d64:	10c5883a 	add	r2,r2,r3
81136d68:	10800e04 	addi	r2,r2,56
81136d6c:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
81136d70:	e03fec15 	stw	zero,-80(fp)
81136d74:	00004506 	br	81136e8c <alt_up_sd_card_fopen+0x2d0>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
81136d78:	e0ffeb0f 	ldh	r3,-84(fp)
81136d7c:	e0bfec17 	ldw	r2,-80(fp)
81136d80:	18803f26 	beq	r3,r2,81136e80 <alt_up_sd_card_fopen+0x2c4>
81136d84:	00a04574 	movhi	r2,33045
81136d88:	10820a04 	addi	r2,r2,2088
81136d8c:	e0ffec17 	ldw	r3,-80(fp)
81136d90:	180691ba 	slli	r3,r3,6
81136d94:	10c5883a 	add	r2,r2,r3
81136d98:	10800f04 	addi	r2,r2,60
81136d9c:	10800017 	ldw	r2,0(r2)
81136da0:	10800058 	cmpnei	r2,r2,1
81136da4:	1000361e 	bne	r2,zero,81136e80 <alt_up_sd_card_fopen+0x2c4>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81136da8:	e0ffeb0f 	ldh	r3,-84(fp)
81136dac:	00a04574 	movhi	r2,33045
81136db0:	10820a04 	addi	r2,r2,2088
81136db4:	180691ba 	slli	r3,r3,6
81136db8:	10c5883a 	add	r2,r2,r3
81136dbc:	10800a04 	addi	r2,r2,40
81136dc0:	10c00017 	ldw	r3,0(r2)
81136dc4:	00a04574 	movhi	r2,33045
81136dc8:	10820a04 	addi	r2,r2,2088
81136dcc:	e13fec17 	ldw	r4,-80(fp)
81136dd0:	200891ba 	slli	r4,r4,6
81136dd4:	1105883a 	add	r2,r2,r4
81136dd8:	10800a04 	addi	r2,r2,40
81136ddc:	10800017 	ldw	r2,0(r2)
81136de0:	1880271e 	bne	r3,r2,81136e80 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81136de4:	e0ffeb0f 	ldh	r3,-84(fp)
81136de8:	00a04574 	movhi	r2,33045
81136dec:	10820a04 	addi	r2,r2,2088
81136df0:	180691ba 	slli	r3,r3,6
81136df4:	10c5883a 	add	r2,r2,r3
81136df8:	10800b04 	addi	r2,r2,44
81136dfc:	10c00017 	ldw	r3,0(r2)
81136e00:	00a04574 	movhi	r2,33045
81136e04:	10820a04 	addi	r2,r2,2088
81136e08:	e13fec17 	ldw	r4,-80(fp)
81136e0c:	200891ba 	slli	r4,r4,6
81136e10:	1105883a 	add	r2,r2,r4
81136e14:	10800b04 	addi	r2,r2,44
81136e18:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81136e1c:	1880181e 	bne	r3,r2,81136e80 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
81136e20:	e0ffeb0f 	ldh	r3,-84(fp)
81136e24:	00a04574 	movhi	r2,33045
81136e28:	10820a04 	addi	r2,r2,2088
81136e2c:	180691ba 	slli	r3,r3,6
81136e30:	10c5883a 	add	r2,r2,r3
81136e34:	10800c04 	addi	r2,r2,48
81136e38:	1100000b 	ldhu	r4,0(r2)
81136e3c:	00a04574 	movhi	r2,33045
81136e40:	10820a04 	addi	r2,r2,2088
81136e44:	e0ffec17 	ldw	r3,-80(fp)
81136e48:	180691ba 	slli	r3,r3,6
81136e4c:	10c5883a 	add	r2,r2,r3
81136e50:	10800c04 	addi	r2,r2,48
81136e54:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81136e58:	20ffffcc 	andi	r3,r4,65535
81136e5c:	18e0001c 	xori	r3,r3,32768
81136e60:	18e00004 	addi	r3,r3,-32768
81136e64:	10bfffcc 	andi	r2,r2,65535
81136e68:	10a0001c 	xori	r2,r2,32768
81136e6c:	10a00004 	addi	r2,r2,-32768
81136e70:	1880031e 	bne	r3,r2,81136e80 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
81136e74:	00bfff84 	movi	r2,-2
81136e78:	e0bfeb0d 	sth	r2,-84(fp)
								break;
81136e7c:	00002a06 	br	81136f28 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
81136e80:	e0bfec17 	ldw	r2,-80(fp)
81136e84:	10800044 	addi	r2,r2,1
81136e88:	e0bfec15 	stw	r2,-80(fp)
81136e8c:	e0bfec17 	ldw	r2,-80(fp)
81136e90:	10800510 	cmplti	r2,r2,20
81136e94:	103fb81e 	bne	r2,zero,81136d78 <__reset+0xfb116d78>
81136e98:	00002306 	br	81136f28 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
81136e9c:	e0bfff17 	ldw	r2,-4(fp)
81136ea0:	10001f26 	beq	r2,zero,81136f20 <alt_up_sd_card_fopen+0x364>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
81136ea4:	e0bfeb0f 	ldh	r2,-84(fp)
81136ea8:	100691ba 	slli	r3,r2,6
81136eac:	00a04574 	movhi	r2,33045
81136eb0:	10820a04 	addi	r2,r2,2088
81136eb4:	1885883a 	add	r2,r3,r2
81136eb8:	e0ffee04 	addi	r3,fp,-72
81136ebc:	180d883a 	mov	r6,r3
81136ec0:	100b883a 	mov	r5,r2
81136ec4:	e13ffe17 	ldw	r4,-8(fp)
81136ec8:	11361000 	call	81136100 <create_file>
81136ecc:	10001126 	beq	r2,zero,81136f14 <alt_up_sd_card_fopen+0x358>
                    {
                        active_files[file_record_index].in_use = true;
81136ed0:	e0ffeb0f 	ldh	r3,-84(fp)
81136ed4:	00a04574 	movhi	r2,33045
81136ed8:	10820a04 	addi	r2,r2,2088
81136edc:	180691ba 	slli	r3,r3,6
81136ee0:	10c5883a 	add	r2,r2,r3
81136ee4:	10800f04 	addi	r2,r2,60
81136ee8:	00c00044 	movi	r3,1
81136eec:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
81136ef0:	e0ffeb0f 	ldh	r3,-84(fp)
81136ef4:	00a04574 	movhi	r2,33045
81136ef8:	10820a04 	addi	r2,r2,2088
81136efc:	180691ba 	slli	r3,r3,6
81136f00:	10c5883a 	add	r2,r2,r3
81136f04:	10800e04 	addi	r2,r2,56
81136f08:	00c00044 	movi	r3,1
81136f0c:	10c00015 	stw	r3,0(r2)
81136f10:	00000506 	br	81136f28 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
81136f14:	00bfffc4 	movi	r2,-1
81136f18:	e0bfeb0d 	sth	r2,-84(fp)
81136f1c:	00000206 	br	81136f28 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
81136f20:	00bfffc4 	movi	r2,-1
81136f24:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
81136f28:	e0bfeb0b 	ldhu	r2,-84(fp)
}
81136f2c:	e037883a 	mov	sp,fp
81136f30:	dfc00117 	ldw	ra,4(sp)
81136f34:	df000017 	ldw	fp,0(sp)
81136f38:	dec00204 	addi	sp,sp,8
81136f3c:	f800283a 	ret

81136f40 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81136f40:	defffd04 	addi	sp,sp,-12
81136f44:	de00012e 	bgeu	sp,et,81136f4c <alt_up_sd_card_set_attributes+0xc>
81136f48:	003b68fa 	trap	3
81136f4c:	df000215 	stw	fp,8(sp)
81136f50:	df000204 	addi	fp,sp,8
81136f54:	2007883a 	mov	r3,r4
81136f58:	2805883a 	mov	r2,r5
81136f5c:	e0fffe0d 	sth	r3,-8(fp)
81136f60:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81136f64:	e0bffe0f 	ldh	r2,-8(fp)
81136f68:	10001416 	blt	r2,zero,81136fbc <alt_up_sd_card_set_attributes+0x7c>
81136f6c:	e0bffe0f 	ldh	r2,-8(fp)
81136f70:	10800508 	cmpgei	r2,r2,20
81136f74:	1000111e 	bne	r2,zero,81136fbc <alt_up_sd_card_set_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81136f78:	e0fffe0f 	ldh	r3,-8(fp)
81136f7c:	00a04574 	movhi	r2,33045
81136f80:	10820a04 	addi	r2,r2,2088
81136f84:	180691ba 	slli	r3,r3,6
81136f88:	10c5883a 	add	r2,r2,r3
81136f8c:	10800f04 	addi	r2,r2,60
81136f90:	10800017 	ldw	r2,0(r2)
81136f94:	10000926 	beq	r2,zero,81136fbc <alt_up_sd_card_set_attributes+0x7c>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
81136f98:	e0fffe0f 	ldh	r3,-8(fp)
81136f9c:	e0bfff0b 	ldhu	r2,-4(fp)
81136fa0:	1009883a 	mov	r4,r2
81136fa4:	00a04574 	movhi	r2,33045
81136fa8:	10820a04 	addi	r2,r2,2088
81136fac:	180691ba 	slli	r3,r3,6
81136fb0:	10c5883a 	add	r2,r2,r3
81136fb4:	108002c4 	addi	r2,r2,11
81136fb8:	11000005 	stb	r4,0(r2)
        }
    }
}
81136fbc:	0001883a 	nop
81136fc0:	e037883a 	mov	sp,fp
81136fc4:	df000017 	ldw	fp,0(sp)
81136fc8:	dec00104 	addi	sp,sp,4
81136fcc:	f800283a 	ret

81136fd0 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81136fd0:	defffd04 	addi	sp,sp,-12
81136fd4:	de00012e 	bgeu	sp,et,81136fdc <alt_up_sd_card_get_attributes+0xc>
81136fd8:	003b68fa 	trap	3
81136fdc:	df000215 	stw	fp,8(sp)
81136fe0:	df000204 	addi	fp,sp,8
81136fe4:	2005883a 	mov	r2,r4
81136fe8:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
81136fec:	00bfffc4 	movi	r2,-1
81136ff0:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81136ff4:	e0bfff0f 	ldh	r2,-4(fp)
81136ff8:	10001416 	blt	r2,zero,8113704c <alt_up_sd_card_get_attributes+0x7c>
81136ffc:	e0bfff0f 	ldh	r2,-4(fp)
81137000:	10800508 	cmpgei	r2,r2,20
81137004:	1000111e 	bne	r2,zero,8113704c <alt_up_sd_card_get_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81137008:	e0ffff0f 	ldh	r3,-4(fp)
8113700c:	00a04574 	movhi	r2,33045
81137010:	10820a04 	addi	r2,r2,2088
81137014:	180691ba 	slli	r3,r3,6
81137018:	10c5883a 	add	r2,r2,r3
8113701c:	10800f04 	addi	r2,r2,60
81137020:	10800017 	ldw	r2,0(r2)
81137024:	10000926 	beq	r2,zero,8113704c <alt_up_sd_card_get_attributes+0x7c>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
81137028:	e0ffff0f 	ldh	r3,-4(fp)
8113702c:	00a04574 	movhi	r2,33045
81137030:	10820a04 	addi	r2,r2,2088
81137034:	180691ba 	slli	r3,r3,6
81137038:	10c5883a 	add	r2,r2,r3
8113703c:	108002c4 	addi	r2,r2,11
81137040:	10800003 	ldbu	r2,0(r2)
81137044:	10803fcc 	andi	r2,r2,255
81137048:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
8113704c:	e0bffe0b 	ldhu	r2,-8(fp)
}
81137050:	e037883a 	mov	sp,fp
81137054:	df000017 	ldw	fp,0(sp)
81137058:	dec00104 	addi	sp,sp,4
8113705c:	f800283a 	ret

81137060 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
81137060:	defffa04 	addi	sp,sp,-24
81137064:	de00012e 	bgeu	sp,et,8113706c <alt_up_sd_card_read+0xc>
81137068:	003b68fa 	trap	3
8113706c:	dfc00515 	stw	ra,20(sp)
81137070:	df000415 	stw	fp,16(sp)
81137074:	df000404 	addi	fp,sp,16
81137078:	2005883a 	mov	r2,r4
8113707c:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
81137080:	00bfffc4 	movi	r2,-1
81137084:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81137088:	e0bfff0f 	ldh	r2,-4(fp)
8113708c:	1000ce16 	blt	r2,zero,811373c8 <alt_up_sd_card_read+0x368>
81137090:	e0bfff0f 	ldh	r2,-4(fp)
81137094:	10800508 	cmpgei	r2,r2,20
81137098:	1000cb1e 	bne	r2,zero,811373c8 <alt_up_sd_card_read+0x368>
    {
        if (active_files[file_handle].in_use)
8113709c:	e0ffff0f 	ldh	r3,-4(fp)
811370a0:	00a04574 	movhi	r2,33045
811370a4:	10820a04 	addi	r2,r2,2088
811370a8:	180691ba 	slli	r3,r3,6
811370ac:	10c5883a 	add	r2,r2,r3
811370b0:	10800f04 	addi	r2,r2,60
811370b4:	10800017 	ldw	r2,0(r2)
811370b8:	1000c326 	beq	r2,zero,811373c8 <alt_up_sd_card_read+0x368>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
811370bc:	e0ffff0f 	ldh	r3,-4(fp)
811370c0:	00a04574 	movhi	r2,33045
811370c4:	10820a04 	addi	r2,r2,2088
811370c8:	180691ba 	slli	r3,r3,6
811370cc:	10c5883a 	add	r2,r2,r3
811370d0:	10800904 	addi	r2,r2,36
811370d4:	10c00017 	ldw	r3,0(r2)
811370d8:	e13fff0f 	ldh	r4,-4(fp)
811370dc:	00a04574 	movhi	r2,33045
811370e0:	10820a04 	addi	r2,r2,2088
811370e4:	200891ba 	slli	r4,r4,6
811370e8:	1105883a 	add	r2,r2,r4
811370ec:	10800604 	addi	r2,r2,24
811370f0:	10800017 	ldw	r2,0(r2)
811370f4:	1880b42e 	bgeu	r3,r2,811373c8 <alt_up_sd_card_read+0x368>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811370f8:	00a04574 	movhi	r2,33045
811370fc:	1081f504 	addi	r2,r2,2004
81137100:	10c01417 	ldw	r3,80(r2)
81137104:	e13fff0f 	ldh	r4,-4(fp)
81137108:	00a04574 	movhi	r2,33045
8113710c:	10820a04 	addi	r2,r2,2088
81137110:	200891ba 	slli	r4,r4,6
81137114:	1105883a 	add	r2,r2,r4
81137118:	10800704 	addi	r2,r2,28
8113711c:	10800017 	ldw	r2,0(r2)
81137120:	113fff84 	addi	r4,r2,-2
81137124:	00a04574 	movhi	r2,33045
81137128:	1081f504 	addi	r2,r2,2004
8113712c:	10800383 	ldbu	r2,14(r2)
81137130:	10803fcc 	andi	r2,r2,255
81137134:	2085383a 	mul	r2,r4,r2
81137138:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
8113713c:	e13fff0f 	ldh	r4,-4(fp)
81137140:	00a04574 	movhi	r2,33045
81137144:	10820a04 	addi	r2,r2,2088
81137148:	200891ba 	slli	r4,r4,6
8113714c:	1105883a 	add	r2,r2,r4
81137150:	10800804 	addi	r2,r2,32
81137154:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81137158:	1885883a 	add	r2,r3,r2
8113715c:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
81137160:	e0ffff0f 	ldh	r3,-4(fp)
81137164:	00a04574 	movhi	r2,33045
81137168:	10820a04 	addi	r2,r2,2088
8113716c:	180691ba 	slli	r3,r3,6
81137170:	10c5883a 	add	r2,r2,r3
81137174:	10800904 	addi	r2,r2,36
81137178:	10800017 	ldw	r2,0(r2)
8113717c:	10006826 	beq	r2,zero,81137320 <alt_up_sd_card_read+0x2c0>
81137180:	e0ffff0f 	ldh	r3,-4(fp)
81137184:	00a04574 	movhi	r2,33045
81137188:	10820a04 	addi	r2,r2,2088
8113718c:	180691ba 	slli	r3,r3,6
81137190:	10c5883a 	add	r2,r2,r3
81137194:	10800904 	addi	r2,r2,36
81137198:	10800017 	ldw	r2,0(r2)
8113719c:	10807fcc 	andi	r2,r2,511
811371a0:	10005f1e 	bne	r2,zero,81137320 <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
811371a4:	e0ffff0f 	ldh	r3,-4(fp)
811371a8:	00a04574 	movhi	r2,33045
811371ac:	10820a04 	addi	r2,r2,2088
811371b0:	180691ba 	slli	r3,r3,6
811371b4:	10c5883a 	add	r2,r2,r3
811371b8:	10800804 	addi	r2,r2,32
811371bc:	10c00017 	ldw	r3,0(r2)
811371c0:	00a04574 	movhi	r2,33045
811371c4:	1081f504 	addi	r2,r2,2004
811371c8:	10800383 	ldbu	r2,14(r2)
811371cc:	10803fcc 	andi	r2,r2,255
811371d0:	10bfffc4 	addi	r2,r2,-1
811371d4:	1880401e 	bne	r3,r2,811372d8 <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
811371d8:	e0ffff0f 	ldh	r3,-4(fp)
811371dc:	00a04574 	movhi	r2,33045
811371e0:	10820a04 	addi	r2,r2,2088
811371e4:	180691ba 	slli	r3,r3,6
811371e8:	10c5883a 	add	r2,r2,r3
811371ec:	10800704 	addi	r2,r2,28
811371f0:	10800017 	ldw	r2,0(r2)
811371f4:	e0fffe04 	addi	r3,fp,-8
811371f8:	180b883a 	mov	r5,r3
811371fc:	1009883a 	mov	r4,r2
81137200:	11339ec0 	call	811339ec <get_cluster_flag>
81137204:	10003226 	beq	r2,zero,811372d0 <alt_up_sd_card_read+0x270>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81137208:	e0bffe0b 	ldhu	r2,-8(fp)
8113720c:	10bfffcc 	andi	r2,r2,65535
81137210:	10fffe0c 	andi	r3,r2,65528
81137214:	00bffe14 	movui	r2,65528
81137218:	1880021e 	bne	r3,r2,81137224 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
8113721c:	00bfffc4 	movi	r2,-1
81137220:	00006a06 	br	811373cc <alt_up_sd_card_read+0x36c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81137224:	e13fff0f 	ldh	r4,-4(fp)
81137228:	e0bffe0b 	ldhu	r2,-8(fp)
8113722c:	10ffffcc 	andi	r3,r2,65535
81137230:	00a04574 	movhi	r2,33045
81137234:	10820a04 	addi	r2,r2,2088
81137238:	200891ba 	slli	r4,r4,6
8113723c:	1105883a 	add	r2,r2,r4
81137240:	10800704 	addi	r2,r2,28
81137244:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81137248:	e0ffff0f 	ldh	r3,-4(fp)
8113724c:	00a04574 	movhi	r2,33045
81137250:	10820a04 	addi	r2,r2,2088
81137254:	180691ba 	slli	r3,r3,6
81137258:	10c5883a 	add	r2,r2,r3
8113725c:	10800804 	addi	r2,r2,32
81137260:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81137264:	00a04574 	movhi	r2,33045
81137268:	1081f504 	addi	r2,r2,2004
8113726c:	10c01417 	ldw	r3,80(r2)
81137270:	e13fff0f 	ldh	r4,-4(fp)
81137274:	00a04574 	movhi	r2,33045
81137278:	10820a04 	addi	r2,r2,2088
8113727c:	200891ba 	slli	r4,r4,6
81137280:	1105883a 	add	r2,r2,r4
81137284:	10800704 	addi	r2,r2,28
81137288:	10800017 	ldw	r2,0(r2)
8113728c:	113fff84 	addi	r4,r2,-2
81137290:	00a04574 	movhi	r2,33045
81137294:	1081f504 	addi	r2,r2,2004
81137298:	10800383 	ldbu	r2,14(r2)
8113729c:	10803fcc 	andi	r2,r2,255
811372a0:	2085383a 	mul	r2,r4,r2
811372a4:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
811372a8:	e13fff0f 	ldh	r4,-4(fp)
811372ac:	00a04574 	movhi	r2,33045
811372b0:	10820a04 	addi	r2,r2,2088
811372b4:	200891ba 	slli	r4,r4,6
811372b8:	1105883a 	add	r2,r2,r4
811372bc:	10800804 	addi	r2,r2,32
811372c0:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811372c4:	1885883a 	add	r2,r3,r2
811372c8:	e0bffd15 	stw	r2,-12(fp)
811372cc:	00001406 	br	81137320 <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
811372d0:	00bfff84 	movi	r2,-2
811372d4:	00003d06 	br	811373cc <alt_up_sd_card_read+0x36c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
811372d8:	e13fff0f 	ldh	r4,-4(fp)
811372dc:	e0ffff0f 	ldh	r3,-4(fp)
811372e0:	00a04574 	movhi	r2,33045
811372e4:	10820a04 	addi	r2,r2,2088
811372e8:	180691ba 	slli	r3,r3,6
811372ec:	10c5883a 	add	r2,r2,r3
811372f0:	10800804 	addi	r2,r2,32
811372f4:	10800017 	ldw	r2,0(r2)
811372f8:	10c00044 	addi	r3,r2,1
811372fc:	00a04574 	movhi	r2,33045
81137300:	10820a04 	addi	r2,r2,2088
81137304:	200891ba 	slli	r4,r4,6
81137308:	1105883a 	add	r2,r2,r4
8113730c:	10800804 	addi	r2,r2,32
81137310:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81137314:	e0bffd17 	ldw	r2,-12(fp)
81137318:	10800044 	addi	r2,r2,1
8113731c:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
81137320:	d0e09a17 	ldw	r3,-32152(gp)
81137324:	e0bffd17 	ldw	r2,-12(fp)
81137328:	1885883a 	add	r2,r3,r2
8113732c:	1007883a 	mov	r3,r2
81137330:	d0a09e17 	ldw	r2,-32136(gp)
81137334:	18800726 	beq	r3,r2,81137354 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
81137338:	d0a09a17 	ldw	r2,-32152(gp)
8113733c:	100b883a 	mov	r5,r2
81137340:	e13ffd17 	ldw	r4,-12(fp)
81137344:	113390c0 	call	8113390c <Read_Sector_Data>
81137348:	1000021e 	bne	r2,zero,81137354 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
8113734c:	00bfff84 	movi	r2,-2
81137350:	00001e06 	br	811373cc <alt_up_sd_card_read+0x36c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
81137354:	d0e09917 	ldw	r3,-32156(gp)
81137358:	e13fff0f 	ldh	r4,-4(fp)
8113735c:	00a04574 	movhi	r2,33045
81137360:	10820a04 	addi	r2,r2,2088
81137364:	200891ba 	slli	r4,r4,6
81137368:	1105883a 	add	r2,r2,r4
8113736c:	10800904 	addi	r2,r2,36
81137370:	10800017 	ldw	r2,0(r2)
81137374:	10807fcc 	andi	r2,r2,511
81137378:	1885883a 	add	r2,r3,r2
8113737c:	10800023 	ldbuio	r2,0(r2)
81137380:	10803fcc 	andi	r2,r2,255
81137384:	10803fcc 	andi	r2,r2,255
81137388:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
8113738c:	e13fff0f 	ldh	r4,-4(fp)
81137390:	e0ffff0f 	ldh	r3,-4(fp)
81137394:	00a04574 	movhi	r2,33045
81137398:	10820a04 	addi	r2,r2,2088
8113739c:	180691ba 	slli	r3,r3,6
811373a0:	10c5883a 	add	r2,r2,r3
811373a4:	10800904 	addi	r2,r2,36
811373a8:	10800017 	ldw	r2,0(r2)
811373ac:	10c00044 	addi	r3,r2,1
811373b0:	00a04574 	movhi	r2,33045
811373b4:	10820a04 	addi	r2,r2,2088
811373b8:	200891ba 	slli	r4,r4,6
811373bc:	1105883a 	add	r2,r2,r4
811373c0:	10800904 	addi	r2,r2,36
811373c4:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
811373c8:	e0bffc0b 	ldhu	r2,-16(fp)
}
811373cc:	e037883a 	mov	sp,fp
811373d0:	dfc00117 	ldw	ra,4(sp)
811373d4:	df000017 	ldw	fp,0(sp)
811373d8:	dec00204 	addi	sp,sp,8
811373dc:	f800283a 	ret

811373e0 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
811373e0:	defff804 	addi	sp,sp,-32
811373e4:	de00012e 	bgeu	sp,et,811373ec <alt_up_sd_card_write+0xc>
811373e8:	003b68fa 	trap	3
811373ec:	dfc00715 	stw	ra,28(sp)
811373f0:	df000615 	stw	fp,24(sp)
811373f4:	df000604 	addi	fp,sp,24
811373f8:	2007883a 	mov	r3,r4
811373fc:	2805883a 	mov	r2,r5
81137400:	e0fffe0d 	sth	r3,-8(fp)
81137404:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
81137408:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
8113740c:	e0bffe0f 	ldh	r2,-8(fp)
81137410:	10017716 	blt	r2,zero,811379f0 <alt_up_sd_card_write+0x610>
81137414:	e0bffe0f 	ldh	r2,-8(fp)
81137418:	10800508 	cmpgei	r2,r2,20
8113741c:	1001741e 	bne	r2,zero,811379f0 <alt_up_sd_card_write+0x610>
    {
        if (active_files[file_handle].in_use)
81137420:	e0fffe0f 	ldh	r3,-8(fp)
81137424:	00a04574 	movhi	r2,33045
81137428:	10820a04 	addi	r2,r2,2088
8113742c:	180691ba 	slli	r3,r3,6
81137430:	10c5883a 	add	r2,r2,r3
81137434:	10800f04 	addi	r2,r2,60
81137438:	10800017 	ldw	r2,0(r2)
8113743c:	10016c26 	beq	r2,zero,811379f0 <alt_up_sd_card_write+0x610>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81137440:	00a04574 	movhi	r2,33045
81137444:	1081f504 	addi	r2,r2,2004
81137448:	10c01417 	ldw	r3,80(r2)
8113744c:	e13ffe0f 	ldh	r4,-8(fp)
81137450:	00a04574 	movhi	r2,33045
81137454:	10820a04 	addi	r2,r2,2088
81137458:	200891ba 	slli	r4,r4,6
8113745c:	1105883a 	add	r2,r2,r4
81137460:	10800704 	addi	r2,r2,28
81137464:	10800017 	ldw	r2,0(r2)
81137468:	113fff84 	addi	r4,r2,-2
8113746c:	00a04574 	movhi	r2,33045
81137470:	1081f504 	addi	r2,r2,2004
81137474:	10800383 	ldbu	r2,14(r2)
81137478:	10803fcc 	andi	r2,r2,255
8113747c:	2085383a 	mul	r2,r4,r2
81137480:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
81137484:	e13ffe0f 	ldh	r4,-8(fp)
81137488:	00a04574 	movhi	r2,33045
8113748c:	10820a04 	addi	r2,r2,2088
81137490:	200891ba 	slli	r4,r4,6
81137494:	1105883a 	add	r2,r2,r4
81137498:	10800804 	addi	r2,r2,32
8113749c:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811374a0:	1885883a 	add	r2,r3,r2
811374a4:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
811374a8:	e0fffe0f 	ldh	r3,-8(fp)
811374ac:	00a04574 	movhi	r2,33045
811374b0:	10820a04 	addi	r2,r2,2088
811374b4:	180691ba 	slli	r3,r3,6
811374b8:	10c5883a 	add	r2,r2,r3
811374bc:	10800904 	addi	r2,r2,36
811374c0:	10c00017 	ldw	r3,0(r2)
811374c4:	00a04574 	movhi	r2,33045
811374c8:	1081f504 	addi	r2,r2,2004
811374cc:	1080030b 	ldhu	r2,12(r2)
811374d0:	10bfffcc 	andi	r2,r2,65535
811374d4:	1889203a 	divu	r4,r3,r2
811374d8:	2085383a 	mul	r2,r4,r2
811374dc:	1885c83a 	sub	r2,r3,r2
811374e0:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
811374e4:	e0fffe0f 	ldh	r3,-8(fp)
811374e8:	00a04574 	movhi	r2,33045
811374ec:	10820a04 	addi	r2,r2,2088
811374f0:	180691ba 	slli	r3,r3,6
811374f4:	10c5883a 	add	r2,r2,r3
811374f8:	10800904 	addi	r2,r2,36
811374fc:	10c00017 	ldw	r3,0(r2)
81137500:	e13ffe0f 	ldh	r4,-8(fp)
81137504:	00a04574 	movhi	r2,33045
81137508:	10820a04 	addi	r2,r2,2088
8113750c:	200891ba 	slli	r4,r4,6
81137510:	1105883a 	add	r2,r2,r4
81137514:	10800604 	addi	r2,r2,24
81137518:	10800017 	ldw	r2,0(r2)
8113751c:	1880672e 	bgeu	r3,r2,811376bc <alt_up_sd_card_write+0x2dc>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
81137520:	e0fffe0f 	ldh	r3,-8(fp)
81137524:	00a04574 	movhi	r2,33045
81137528:	10820a04 	addi	r2,r2,2088
8113752c:	180691ba 	slli	r3,r3,6
81137530:	10c5883a 	add	r2,r2,r3
81137534:	10800904 	addi	r2,r2,36
81137538:	10800017 	ldw	r2,0(r2)
8113753c:	1000e126 	beq	r2,zero,811378c4 <alt_up_sd_card_write+0x4e4>
81137540:	e0bffc0f 	ldh	r2,-16(fp)
81137544:	1000df1e 	bne	r2,zero,811378c4 <alt_up_sd_card_write+0x4e4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81137548:	e0fffe0f 	ldh	r3,-8(fp)
8113754c:	00a04574 	movhi	r2,33045
81137550:	10820a04 	addi	r2,r2,2088
81137554:	180691ba 	slli	r3,r3,6
81137558:	10c5883a 	add	r2,r2,r3
8113755c:	10800804 	addi	r2,r2,32
81137560:	10c00017 	ldw	r3,0(r2)
81137564:	00a04574 	movhi	r2,33045
81137568:	1081f504 	addi	r2,r2,2004
8113756c:	10800383 	ldbu	r2,14(r2)
81137570:	10803fcc 	andi	r2,r2,255
81137574:	10bfffc4 	addi	r2,r2,-1
81137578:	18803d1e 	bne	r3,r2,81137670 <alt_up_sd_card_write+0x290>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
8113757c:	e0fffe0f 	ldh	r3,-8(fp)
81137580:	00a04574 	movhi	r2,33045
81137584:	10820a04 	addi	r2,r2,2088
81137588:	180691ba 	slli	r3,r3,6
8113758c:	10c5883a 	add	r2,r2,r3
81137590:	10800704 	addi	r2,r2,28
81137594:	10800017 	ldw	r2,0(r2)
81137598:	e0fffc84 	addi	r3,fp,-14
8113759c:	180b883a 	mov	r5,r3
811375a0:	1009883a 	mov	r4,r2
811375a4:	11339ec0 	call	811339ec <get_cluster_flag>
811375a8:	10002f26 	beq	r2,zero,81137668 <alt_up_sd_card_write+0x288>
                        {
                            if (next_cluster < 0x0000fff8)
811375ac:	e0bffc8b 	ldhu	r2,-14(fp)
811375b0:	10bfffcc 	andi	r2,r2,65535
811375b4:	10bffe28 	cmpgeui	r2,r2,65528
811375b8:	1000c21e 	bne	r2,zero,811378c4 <alt_up_sd_card_write+0x4e4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
811375bc:	e13ffe0f 	ldh	r4,-8(fp)
811375c0:	e0bffc8b 	ldhu	r2,-14(fp)
811375c4:	10ffffcc 	andi	r3,r2,65535
811375c8:	00a04574 	movhi	r2,33045
811375cc:	10820a04 	addi	r2,r2,2088
811375d0:	200891ba 	slli	r4,r4,6
811375d4:	1105883a 	add	r2,r2,r4
811375d8:	10800704 	addi	r2,r2,28
811375dc:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
811375e0:	e0fffe0f 	ldh	r3,-8(fp)
811375e4:	00a04574 	movhi	r2,33045
811375e8:	10820a04 	addi	r2,r2,2088
811375ec:	180691ba 	slli	r3,r3,6
811375f0:	10c5883a 	add	r2,r2,r3
811375f4:	10800804 	addi	r2,r2,32
811375f8:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811375fc:	00a04574 	movhi	r2,33045
81137600:	1081f504 	addi	r2,r2,2004
81137604:	10c01417 	ldw	r3,80(r2)
81137608:	e13ffe0f 	ldh	r4,-8(fp)
8113760c:	00a04574 	movhi	r2,33045
81137610:	10820a04 	addi	r2,r2,2088
81137614:	200891ba 	slli	r4,r4,6
81137618:	1105883a 	add	r2,r2,r4
8113761c:	10800704 	addi	r2,r2,28
81137620:	10800017 	ldw	r2,0(r2)
81137624:	113fff84 	addi	r4,r2,-2
81137628:	00a04574 	movhi	r2,33045
8113762c:	1081f504 	addi	r2,r2,2004
81137630:	10800383 	ldbu	r2,14(r2)
81137634:	10803fcc 	andi	r2,r2,255
81137638:	2085383a 	mul	r2,r4,r2
8113763c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81137640:	e13ffe0f 	ldh	r4,-8(fp)
81137644:	00a04574 	movhi	r2,33045
81137648:	10820a04 	addi	r2,r2,2088
8113764c:	200891ba 	slli	r4,r4,6
81137650:	1105883a 	add	r2,r2,r4
81137654:	10800804 	addi	r2,r2,32
81137658:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8113765c:	1885883a 	add	r2,r3,r2
81137660:	e0bffb15 	stw	r2,-20(fp)
81137664:	00009706 	br	811378c4 <alt_up_sd_card_write+0x4e4>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
81137668:	0005883a 	mov	r2,zero
8113766c:	0000e106 	br	811379f4 <alt_up_sd_card_write+0x614>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81137670:	e13ffe0f 	ldh	r4,-8(fp)
81137674:	e0fffe0f 	ldh	r3,-8(fp)
81137678:	00a04574 	movhi	r2,33045
8113767c:	10820a04 	addi	r2,r2,2088
81137680:	180691ba 	slli	r3,r3,6
81137684:	10c5883a 	add	r2,r2,r3
81137688:	10800804 	addi	r2,r2,32
8113768c:	10800017 	ldw	r2,0(r2)
81137690:	10c00044 	addi	r3,r2,1
81137694:	00a04574 	movhi	r2,33045
81137698:	10820a04 	addi	r2,r2,2088
8113769c:	200891ba 	slli	r4,r4,6
811376a0:	1105883a 	add	r2,r2,r4
811376a4:	10800804 	addi	r2,r2,32
811376a8:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
811376ac:	e0bffb17 	ldw	r2,-20(fp)
811376b0:	10800044 	addi	r2,r2,1
811376b4:	e0bffb15 	stw	r2,-20(fp)
811376b8:	00008206 	br	811378c4 <alt_up_sd_card_write+0x4e4>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
811376bc:	e0fffe0f 	ldh	r3,-8(fp)
811376c0:	00a04574 	movhi	r2,33045
811376c4:	10820a04 	addi	r2,r2,2088
811376c8:	180691ba 	slli	r3,r3,6
811376cc:	10c5883a 	add	r2,r2,r3
811376d0:	10800904 	addi	r2,r2,36
811376d4:	10800017 	ldw	r2,0(r2)
811376d8:	10007a26 	beq	r2,zero,811378c4 <alt_up_sd_card_write+0x4e4>
811376dc:	e0bffc0f 	ldh	r2,-16(fp)
811376e0:	1000781e 	bne	r2,zero,811378c4 <alt_up_sd_card_write+0x4e4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
811376e4:	e0fffe0f 	ldh	r3,-8(fp)
811376e8:	00a04574 	movhi	r2,33045
811376ec:	10820a04 	addi	r2,r2,2088
811376f0:	180691ba 	slli	r3,r3,6
811376f4:	10c5883a 	add	r2,r2,r3
811376f8:	10800804 	addi	r2,r2,32
811376fc:	10c00017 	ldw	r3,0(r2)
81137700:	00a04574 	movhi	r2,33045
81137704:	1081f504 	addi	r2,r2,2004
81137708:	10800383 	ldbu	r2,14(r2)
8113770c:	10803fcc 	andi	r2,r2,255
81137710:	10bfffc4 	addi	r2,r2,-1
81137714:	18803e1e 	bne	r3,r2,81137810 <alt_up_sd_card_write+0x430>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
81137718:	e0bffd04 	addi	r2,fp,-12
8113771c:	1009883a 	mov	r4,r2
81137720:	1135a300 	call	81135a30 <find_first_empty_cluster>
81137724:	10003826 	beq	r2,zero,81137808 <alt_up_sd_card_write+0x428>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
81137728:	e0fffe0f 	ldh	r3,-8(fp)
8113772c:	00a04574 	movhi	r2,33045
81137730:	10820a04 	addi	r2,r2,2088
81137734:	180691ba 	slli	r3,r3,6
81137738:	10c5883a 	add	r2,r2,r3
8113773c:	10800704 	addi	r2,r2,28
81137740:	10800017 	ldw	r2,0(r2)
81137744:	e0fffd17 	ldw	r3,-12(fp)
81137748:	18ffffcc 	andi	r3,r3,65535
8113774c:	18e0001c 	xori	r3,r3,32768
81137750:	18e00004 	addi	r3,r3,-32768
81137754:	01800044 	movi	r6,1
81137758:	180b883a 	mov	r5,r3
8113775c:	1009883a 	mov	r4,r2
81137760:	1133aa80 	call	81133aa8 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
81137764:	e0bffd17 	ldw	r2,-12(fp)
81137768:	01800044 	movi	r6,1
8113776c:	017fffc4 	movi	r5,-1
81137770:	1009883a 	mov	r4,r2
81137774:	1133aa80 	call	81133aa8 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
81137778:	e0fffe0f 	ldh	r3,-8(fp)
8113777c:	00a04574 	movhi	r2,33045
81137780:	10820a04 	addi	r2,r2,2088
81137784:	180691ba 	slli	r3,r3,6
81137788:	10c5883a 	add	r2,r2,r3
8113778c:	10800704 	addi	r2,r2,28
81137790:	10800017 	ldw	r2,0(r2)
81137794:	e0fffd17 	ldw	r3,-12(fp)
81137798:	18ffffcc 	andi	r3,r3,65535
8113779c:	18e0001c 	xori	r3,r3,32768
811377a0:	18e00004 	addi	r3,r3,-32768
811377a4:	000d883a 	mov	r6,zero
811377a8:	180b883a 	mov	r5,r3
811377ac:	1009883a 	mov	r4,r2
811377b0:	1133aa80 	call	81133aa8 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
811377b4:	e0bffd17 	ldw	r2,-12(fp)
811377b8:	000d883a 	mov	r6,zero
811377bc:	017fffc4 	movi	r5,-1
811377c0:	1009883a 	mov	r4,r2
811377c4:	1133aa80 	call	81133aa8 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
811377c8:	e13ffe0f 	ldh	r4,-8(fp)
811377cc:	e0fffd17 	ldw	r3,-12(fp)
811377d0:	00a04574 	movhi	r2,33045
811377d4:	10820a04 	addi	r2,r2,2088
811377d8:	200891ba 	slli	r4,r4,6
811377dc:	1105883a 	add	r2,r2,r4
811377e0:	10800704 	addi	r2,r2,28
811377e4:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
811377e8:	e0fffe0f 	ldh	r3,-8(fp)
811377ec:	00a04574 	movhi	r2,33045
811377f0:	10820a04 	addi	r2,r2,2088
811377f4:	180691ba 	slli	r3,r3,6
811377f8:	10c5883a 	add	r2,r2,r3
811377fc:	10800804 	addi	r2,r2,32
81137800:	10000015 	stw	zero,0(r2)
81137804:	00001506 	br	8113785c <alt_up_sd_card_write+0x47c>
						}
						else
						{
							return false;
81137808:	0005883a 	mov	r2,zero
8113780c:	00007906 	br	811379f4 <alt_up_sd_card_write+0x614>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
81137810:	e13ffe0f 	ldh	r4,-8(fp)
81137814:	e0fffe0f 	ldh	r3,-8(fp)
81137818:	00a04574 	movhi	r2,33045
8113781c:	10820a04 	addi	r2,r2,2088
81137820:	180691ba 	slli	r3,r3,6
81137824:	10c5883a 	add	r2,r2,r3
81137828:	10800904 	addi	r2,r2,36
8113782c:	10c00017 	ldw	r3,0(r2)
81137830:	00a04574 	movhi	r2,33045
81137834:	1081f504 	addi	r2,r2,2004
81137838:	1080030b 	ldhu	r2,12(r2)
8113783c:	10bfffcc 	andi	r2,r2,65535
81137840:	1887203a 	divu	r3,r3,r2
81137844:	00a04574 	movhi	r2,33045
81137848:	10820a04 	addi	r2,r2,2088
8113784c:	200891ba 	slli	r4,r4,6
81137850:	1105883a 	add	r2,r2,r4
81137854:	10800804 	addi	r2,r2,32
81137858:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8113785c:	00a04574 	movhi	r2,33045
81137860:	1081f504 	addi	r2,r2,2004
81137864:	10c01417 	ldw	r3,80(r2)
81137868:	e13ffe0f 	ldh	r4,-8(fp)
8113786c:	00a04574 	movhi	r2,33045
81137870:	10820a04 	addi	r2,r2,2088
81137874:	200891ba 	slli	r4,r4,6
81137878:	1105883a 	add	r2,r2,r4
8113787c:	10800704 	addi	r2,r2,28
81137880:	10800017 	ldw	r2,0(r2)
81137884:	113fff84 	addi	r4,r2,-2
81137888:	00a04574 	movhi	r2,33045
8113788c:	1081f504 	addi	r2,r2,2004
81137890:	10800383 	ldbu	r2,14(r2)
81137894:	10803fcc 	andi	r2,r2,255
81137898:	2085383a 	mul	r2,r4,r2
8113789c:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
811378a0:	e13ffe0f 	ldh	r4,-8(fp)
811378a4:	00a04574 	movhi	r2,33045
811378a8:	10820a04 	addi	r2,r2,2088
811378ac:	200891ba 	slli	r4,r4,6
811378b0:	1105883a 	add	r2,r2,r4
811378b4:	10800804 	addi	r2,r2,32
811378b8:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811378bc:	1885883a 	add	r2,r3,r2
811378c0:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
811378c4:	d0e09a17 	ldw	r3,-32152(gp)
811378c8:	e0bffb17 	ldw	r2,-20(fp)
811378cc:	1885883a 	add	r2,r3,r2
811378d0:	1007883a 	mov	r3,r2
811378d4:	d0a09e17 	ldw	r2,-32136(gp)
811378d8:	18800726 	beq	r3,r2,811378f8 <alt_up_sd_card_write+0x518>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
811378dc:	d0a09a17 	ldw	r2,-32152(gp)
811378e0:	100b883a 	mov	r5,r2
811378e4:	e13ffb17 	ldw	r4,-20(fp)
811378e8:	113390c0 	call	8113390c <Read_Sector_Data>
811378ec:	1000021e 	bne	r2,zero,811378f8 <alt_up_sd_card_write+0x518>
                {
					return false;
811378f0:	0005883a 	mov	r2,zero
811378f4:	00003f06 	br	811379f4 <alt_up_sd_card_write+0x614>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
811378f8:	d0e09917 	ldw	r3,-32156(gp)
811378fc:	e0bffc0f 	ldh	r2,-16(fp)
81137900:	1885883a 	add	r2,r3,r2
81137904:	e0ffff07 	ldb	r3,-4(fp)
81137908:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
8113790c:	e13ffe0f 	ldh	r4,-8(fp)
81137910:	e0fffe0f 	ldh	r3,-8(fp)
81137914:	00a04574 	movhi	r2,33045
81137918:	10820a04 	addi	r2,r2,2088
8113791c:	180691ba 	slli	r3,r3,6
81137920:	10c5883a 	add	r2,r2,r3
81137924:	10800904 	addi	r2,r2,36
81137928:	10800017 	ldw	r2,0(r2)
8113792c:	10c00044 	addi	r3,r2,1
81137930:	00a04574 	movhi	r2,33045
81137934:	10820a04 	addi	r2,r2,2088
81137938:	200891ba 	slli	r4,r4,6
8113793c:	1105883a 	add	r2,r2,r4
81137940:	10800904 	addi	r2,r2,36
81137944:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
81137948:	e0fffe0f 	ldh	r3,-8(fp)
8113794c:	00a04574 	movhi	r2,33045
81137950:	10820a04 	addi	r2,r2,2088
81137954:	180691ba 	slli	r3,r3,6
81137958:	10c5883a 	add	r2,r2,r3
8113795c:	10800904 	addi	r2,r2,36
81137960:	10c00017 	ldw	r3,0(r2)
81137964:	e13ffe0f 	ldh	r4,-8(fp)
81137968:	00a04574 	movhi	r2,33045
8113796c:	10820a04 	addi	r2,r2,2088
81137970:	200891ba 	slli	r4,r4,6
81137974:	1105883a 	add	r2,r2,r4
81137978:	10800604 	addi	r2,r2,24
8113797c:	10800017 	ldw	r2,0(r2)
81137980:	18801736 	bltu	r3,r2,811379e0 <alt_up_sd_card_write+0x600>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
81137984:	e13ffe0f 	ldh	r4,-8(fp)
81137988:	e0fffe0f 	ldh	r3,-8(fp)
8113798c:	00a04574 	movhi	r2,33045
81137990:	10820a04 	addi	r2,r2,2088
81137994:	180691ba 	slli	r3,r3,6
81137998:	10c5883a 	add	r2,r2,r3
8113799c:	10800604 	addi	r2,r2,24
811379a0:	10800017 	ldw	r2,0(r2)
811379a4:	10c00044 	addi	r3,r2,1
811379a8:	00a04574 	movhi	r2,33045
811379ac:	10820a04 	addi	r2,r2,2088
811379b0:	200891ba 	slli	r4,r4,6
811379b4:	1105883a 	add	r2,r2,r4
811379b8:	10800604 	addi	r2,r2,24
811379bc:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
811379c0:	e0fffe0f 	ldh	r3,-8(fp)
811379c4:	00a04574 	movhi	r2,33045
811379c8:	10820a04 	addi	r2,r2,2088
811379cc:	180691ba 	slli	r3,r3,6
811379d0:	10c5883a 	add	r2,r2,r3
811379d4:	10800e04 	addi	r2,r2,56
811379d8:	00c00044 	movi	r3,1
811379dc:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
811379e0:	00800044 	movi	r2,1
811379e4:	d0a09d15 	stw	r2,-32140(gp)
			result = true;
811379e8:	00800044 	movi	r2,1
811379ec:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
811379f0:	e0bffa17 	ldw	r2,-24(fp)
}
811379f4:	e037883a 	mov	sp,fp
811379f8:	dfc00117 	ldw	ra,4(sp)
811379fc:	df000017 	ldw	fp,0(sp)
81137a00:	dec00204 	addi	sp,sp,8
81137a04:	f800283a 	ret

81137a08 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
81137a08:	defffb04 	addi	sp,sp,-20
81137a0c:	de00012e 	bgeu	sp,et,81137a14 <alt_up_sd_card_fclose+0xc>
81137a10:	003b68fa 	trap	3
81137a14:	dfc00415 	stw	ra,16(sp)
81137a18:	df000315 	stw	fp,12(sp)
81137a1c:	df000304 	addi	fp,sp,12
81137a20:	2005883a 	mov	r2,r4
81137a24:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
81137a28:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81137a2c:	11365e40 	call	811365e4 <alt_up_sd_card_is_Present>
81137a30:	10006026 	beq	r2,zero,81137bb4 <alt_up_sd_card_fclose+0x1ac>
81137a34:	d0a09317 	ldw	r2,-32180(gp)
81137a38:	10005e26 	beq	r2,zero,81137bb4 <alt_up_sd_card_fclose+0x1ac>
    {
        if (active_files[file_handle].in_use) 
81137a3c:	e0ffff0f 	ldh	r3,-4(fp)
81137a40:	00a04574 	movhi	r2,33045
81137a44:	10820a04 	addi	r2,r2,2088
81137a48:	180691ba 	slli	r3,r3,6
81137a4c:	10c5883a 	add	r2,r2,r3
81137a50:	10800f04 	addi	r2,r2,60
81137a54:	10800017 	ldw	r2,0(r2)
81137a58:	10005626 	beq	r2,zero,81137bb4 <alt_up_sd_card_fclose+0x1ac>
        {
			if (active_files[file_handle].modified)
81137a5c:	e0ffff0f 	ldh	r3,-4(fp)
81137a60:	00a04574 	movhi	r2,33045
81137a64:	10820a04 	addi	r2,r2,2088
81137a68:	180691ba 	slli	r3,r3,6
81137a6c:	10c5883a 	add	r2,r2,r3
81137a70:	10800e04 	addi	r2,r2,56
81137a74:	10800017 	ldw	r2,0(r2)
81137a78:	10004526 	beq	r2,zero,81137b90 <alt_up_sd_card_fclose+0x188>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
81137a7c:	e0ffff0f 	ldh	r3,-4(fp)
81137a80:	00a04574 	movhi	r2,33045
81137a84:	10820a04 	addi	r2,r2,2088
81137a88:	180691ba 	slli	r3,r3,6
81137a8c:	10c5883a 	add	r2,r2,r3
81137a90:	10800b04 	addi	r2,r2,44
81137a94:	10800017 	ldw	r2,0(r2)
81137a98:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
81137a9c:	e0ffff0f 	ldh	r3,-4(fp)
81137aa0:	00a04574 	movhi	r2,33045
81137aa4:	10820a04 	addi	r2,r2,2088
81137aa8:	180691ba 	slli	r3,r3,6
81137aac:	10c5883a 	add	r2,r2,r3
81137ab0:	10800a04 	addi	r2,r2,40
81137ab4:	10800017 	ldw	r2,0(r2)
81137ab8:	1000071e 	bne	r2,zero,81137ad8 <alt_up_sd_card_fclose+0xd0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
81137abc:	00a04574 	movhi	r2,33045
81137ac0:	1081f504 	addi	r2,r2,2004
81137ac4:	10801317 	ldw	r2,76(r2)
81137ac8:	e0fffe17 	ldw	r3,-8(fp)
81137acc:	1885883a 	add	r2,r3,r2
81137ad0:	e0bffe15 	stw	r2,-8(fp)
81137ad4:	00001406 	br	81137b28 <alt_up_sd_card_fclose+0x120>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
81137ad8:	00a04574 	movhi	r2,33045
81137adc:	1081f504 	addi	r2,r2,2004
81137ae0:	10c01417 	ldw	r3,80(r2)
81137ae4:	e0bffe17 	ldw	r2,-8(fp)
81137ae8:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
81137aec:	e13fff0f 	ldh	r4,-4(fp)
81137af0:	00a04574 	movhi	r2,33045
81137af4:	10820a04 	addi	r2,r2,2088
81137af8:	200891ba 	slli	r4,r4,6
81137afc:	1105883a 	add	r2,r2,r4
81137b00:	10800a04 	addi	r2,r2,40
81137b04:	10800017 	ldw	r2,0(r2)
81137b08:	113fff84 	addi	r4,r2,-2
81137b0c:	00a04574 	movhi	r2,33045
81137b10:	1081f504 	addi	r2,r2,2004
81137b14:	10800383 	ldbu	r2,14(r2)
81137b18:	10803fcc 	andi	r2,r2,255
81137b1c:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
81137b20:	1885883a 	add	r2,r3,r2
81137b24:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
81137b28:	e0bffe17 	ldw	r2,-8(fp)
81137b2c:	d0e09a17 	ldw	r3,-32152(gp)
81137b30:	180b883a 	mov	r5,r3
81137b34:	1009883a 	mov	r4,r2
81137b38:	113390c0 	call	8113390c <Read_Sector_Data>
81137b3c:	10001426 	beq	r2,zero,81137b90 <alt_up_sd_card_fclose+0x188>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
81137b40:	e0ffff0f 	ldh	r3,-4(fp)
81137b44:	00a04574 	movhi	r2,33045
81137b48:	10820a04 	addi	r2,r2,2088
81137b4c:	180691ba 	slli	r3,r3,6
81137b50:	10c5883a 	add	r2,r2,r3
81137b54:	10800c04 	addi	r2,r2,48
81137b58:	1080000b 	ldhu	r2,0(r2)
81137b5c:	113fffcc 	andi	r4,r2,65535
81137b60:	2120001c 	xori	r4,r4,32768
81137b64:	21200004 	addi	r4,r4,-32768
81137b68:	e0bfff0f 	ldh	r2,-4(fp)
81137b6c:	100691ba 	slli	r3,r2,6
81137b70:	00a04574 	movhi	r2,33045
81137b74:	10820a04 	addi	r2,r2,2088
81137b78:	1885883a 	add	r2,r3,r2
81137b7c:	100b883a 	mov	r5,r2
81137b80:	1133fc00 	call	81133fc0 <Write_File_Record_At_Offset>
81137b84:	10000226 	beq	r2,zero,81137b90 <alt_up_sd_card_fclose+0x188>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
81137b88:	11338b80 	call	811338b8 <Save_Modified_Sector>
81137b8c:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
81137b90:	e0ffff0f 	ldh	r3,-4(fp)
81137b94:	00a04574 	movhi	r2,33045
81137b98:	10820a04 	addi	r2,r2,2088
81137b9c:	180691ba 	slli	r3,r3,6
81137ba0:	10c5883a 	add	r2,r2,r3
81137ba4:	10800f04 	addi	r2,r2,60
81137ba8:	10000015 	stw	zero,0(r2)
			result = true;
81137bac:	00800044 	movi	r2,1
81137bb0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
81137bb4:	e0bffd17 	ldw	r2,-12(fp)
}
81137bb8:	e037883a 	mov	sp,fp
81137bbc:	dfc00117 	ldw	ra,4(sp)
81137bc0:	df000017 	ldw	fp,0(sp)
81137bc4:	dec00204 	addi	sp,sp,8
81137bc8:	f800283a 	ret

81137bcc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81137bcc:	defffa04 	addi	sp,sp,-24
81137bd0:	de00012e 	bgeu	sp,et,81137bd8 <altera_avalon_jtag_uart_read_fd+0xc>
81137bd4:	003b68fa 	trap	3
81137bd8:	dfc00515 	stw	ra,20(sp)
81137bdc:	df000415 	stw	fp,16(sp)
81137be0:	df000404 	addi	fp,sp,16
81137be4:	e13ffd15 	stw	r4,-12(fp)
81137be8:	e17ffe15 	stw	r5,-8(fp)
81137bec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81137bf0:	e0bffd17 	ldw	r2,-12(fp)
81137bf4:	10800017 	ldw	r2,0(r2)
81137bf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81137bfc:	e0bffc17 	ldw	r2,-16(fp)
81137c00:	10c00a04 	addi	r3,r2,40
81137c04:	e0bffd17 	ldw	r2,-12(fp)
81137c08:	10800217 	ldw	r2,8(r2)
81137c0c:	100f883a 	mov	r7,r2
81137c10:	e1bfff17 	ldw	r6,-4(fp)
81137c14:	e17ffe17 	ldw	r5,-8(fp)
81137c18:	1809883a 	mov	r4,r3
81137c1c:	11384500 	call	81138450 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
81137c20:	e037883a 	mov	sp,fp
81137c24:	dfc00117 	ldw	ra,4(sp)
81137c28:	df000017 	ldw	fp,0(sp)
81137c2c:	dec00204 	addi	sp,sp,8
81137c30:	f800283a 	ret

81137c34 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81137c34:	defffa04 	addi	sp,sp,-24
81137c38:	de00012e 	bgeu	sp,et,81137c40 <altera_avalon_jtag_uart_write_fd+0xc>
81137c3c:	003b68fa 	trap	3
81137c40:	dfc00515 	stw	ra,20(sp)
81137c44:	df000415 	stw	fp,16(sp)
81137c48:	df000404 	addi	fp,sp,16
81137c4c:	e13ffd15 	stw	r4,-12(fp)
81137c50:	e17ffe15 	stw	r5,-8(fp)
81137c54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81137c58:	e0bffd17 	ldw	r2,-12(fp)
81137c5c:	10800017 	ldw	r2,0(r2)
81137c60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81137c64:	e0bffc17 	ldw	r2,-16(fp)
81137c68:	10c00a04 	addi	r3,r2,40
81137c6c:	e0bffd17 	ldw	r2,-12(fp)
81137c70:	10800217 	ldw	r2,8(r2)
81137c74:	100f883a 	mov	r7,r2
81137c78:	e1bfff17 	ldw	r6,-4(fp)
81137c7c:	e17ffe17 	ldw	r5,-8(fp)
81137c80:	1809883a 	mov	r4,r3
81137c84:	11387140 	call	81138714 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
81137c88:	e037883a 	mov	sp,fp
81137c8c:	dfc00117 	ldw	ra,4(sp)
81137c90:	df000017 	ldw	fp,0(sp)
81137c94:	dec00204 	addi	sp,sp,8
81137c98:	f800283a 	ret

81137c9c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81137c9c:	defffc04 	addi	sp,sp,-16
81137ca0:	de00012e 	bgeu	sp,et,81137ca8 <altera_avalon_jtag_uart_close_fd+0xc>
81137ca4:	003b68fa 	trap	3
81137ca8:	dfc00315 	stw	ra,12(sp)
81137cac:	df000215 	stw	fp,8(sp)
81137cb0:	df000204 	addi	fp,sp,8
81137cb4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81137cb8:	e0bfff17 	ldw	r2,-4(fp)
81137cbc:	10800017 	ldw	r2,0(r2)
81137cc0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81137cc4:	e0bffe17 	ldw	r2,-8(fp)
81137cc8:	10c00a04 	addi	r3,r2,40
81137ccc:	e0bfff17 	ldw	r2,-4(fp)
81137cd0:	10800217 	ldw	r2,8(r2)
81137cd4:	100b883a 	mov	r5,r2
81137cd8:	1809883a 	mov	r4,r3
81137cdc:	11382e80 	call	811382e8 <altera_avalon_jtag_uart_close>
}
81137ce0:	e037883a 	mov	sp,fp
81137ce4:	dfc00117 	ldw	ra,4(sp)
81137ce8:	df000017 	ldw	fp,0(sp)
81137cec:	dec00204 	addi	sp,sp,8
81137cf0:	f800283a 	ret

81137cf4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81137cf4:	defffa04 	addi	sp,sp,-24
81137cf8:	de00012e 	bgeu	sp,et,81137d00 <altera_avalon_jtag_uart_ioctl_fd+0xc>
81137cfc:	003b68fa 	trap	3
81137d00:	dfc00515 	stw	ra,20(sp)
81137d04:	df000415 	stw	fp,16(sp)
81137d08:	df000404 	addi	fp,sp,16
81137d0c:	e13ffd15 	stw	r4,-12(fp)
81137d10:	e17ffe15 	stw	r5,-8(fp)
81137d14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
81137d18:	e0bffd17 	ldw	r2,-12(fp)
81137d1c:	10800017 	ldw	r2,0(r2)
81137d20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81137d24:	e0bffc17 	ldw	r2,-16(fp)
81137d28:	10800a04 	addi	r2,r2,40
81137d2c:	e1bfff17 	ldw	r6,-4(fp)
81137d30:	e17ffe17 	ldw	r5,-8(fp)
81137d34:	1009883a 	mov	r4,r2
81137d38:	11383580 	call	81138358 <altera_avalon_jtag_uart_ioctl>
}
81137d3c:	e037883a 	mov	sp,fp
81137d40:	dfc00117 	ldw	ra,4(sp)
81137d44:	df000017 	ldw	fp,0(sp)
81137d48:	dec00204 	addi	sp,sp,8
81137d4c:	f800283a 	ret

81137d50 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
81137d50:	deffef04 	addi	sp,sp,-68
81137d54:	de00012e 	bgeu	sp,et,81137d5c <altera_avalon_jtag_uart_init+0xc>
81137d58:	003b68fa 	trap	3
81137d5c:	dfc01015 	stw	ra,64(sp)
81137d60:	df000f15 	stw	fp,60(sp)
81137d64:	dc400e15 	stw	r17,56(sp)
81137d68:	dc000d15 	stw	r16,52(sp)
81137d6c:	df000f04 	addi	fp,sp,60
81137d70:	e13ff715 	stw	r4,-36(fp)
81137d74:	e17ff815 	stw	r5,-32(fp)
81137d78:	e1bff915 	stw	r6,-28(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
81137d7c:	e0bff717 	ldw	r2,-36(fp)
81137d80:	10800c04 	addi	r2,r2,48
81137d84:	e0bff215 	stw	r2,-56(fp)
81137d88:	e03ff60d 	sth	zero,-40(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81137d8c:	e0bff60b 	ldhu	r2,-40(fp)
81137d90:	e0fff684 	addi	r3,fp,-38
81137d94:	180b883a 	mov	r5,r3
81137d98:	1009883a 	mov	r4,r2
81137d9c:	112bf200 	call	8112bf20 <OSFlagCreate>
81137da0:	1007883a 	mov	r3,r2
81137da4:	e0bff217 	ldw	r2,-56(fp)
81137da8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
81137dac:	e0bff717 	ldw	r2,-36(fp)
81137db0:	10800a04 	addi	r2,r2,40
81137db4:	e0bff315 	stw	r2,-52(fp)
81137db8:	00800044 	movi	r2,1
81137dbc:	e0bff58d 	sth	r2,-42(fp)
81137dc0:	e0bff58b 	ldhu	r2,-42(fp)
81137dc4:	1009883a 	mov	r4,r2
81137dc8:	112fe7c0 	call	8112fe7c <OSSemCreate>
81137dcc:	1007883a 	mov	r3,r2
81137dd0:	e0bff317 	ldw	r2,-52(fp)
81137dd4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
81137dd8:	e0bff717 	ldw	r2,-36(fp)
81137ddc:	10800b04 	addi	r2,r2,44
81137de0:	e0bff415 	stw	r2,-48(fp)
81137de4:	00800044 	movi	r2,1
81137de8:	e0bff50d 	sth	r2,-44(fp)
81137dec:	e0bff50b 	ldhu	r2,-44(fp)
81137df0:	1009883a 	mov	r4,r2
81137df4:	112fe7c0 	call	8112fe7c <OSSemCreate>
81137df8:	1007883a 	mov	r3,r2
81137dfc:	e0bff417 	ldw	r2,-48(fp)
81137e00:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81137e04:	e0bff717 	ldw	r2,-36(fp)
81137e08:	00c00044 	movi	r3,1
81137e0c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81137e10:	e0bff717 	ldw	r2,-36(fp)
81137e14:	10800017 	ldw	r2,0(r2)
81137e18:	10800104 	addi	r2,r2,4
81137e1c:	1007883a 	mov	r3,r2
81137e20:	e0bff717 	ldw	r2,-36(fp)
81137e24:	10800817 	ldw	r2,32(r2)
81137e28:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
81137e2c:	e0bff817 	ldw	r2,-32(fp)
81137e30:	e0fff917 	ldw	r3,-28(fp)
81137e34:	d8000015 	stw	zero,0(sp)
81137e38:	e1fff717 	ldw	r7,-36(fp)
81137e3c:	01a044f4 	movhi	r6,33043
81137e40:	319fc804 	addi	r6,r6,32544
81137e44:	180b883a 	mov	r5,r3
81137e48:	1009883a 	mov	r4,r2
81137e4c:	113bd380 	call	8113bd38 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
81137e50:	e0bff717 	ldw	r2,-36(fp)
81137e54:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
81137e58:	e0bff717 	ldw	r2,-36(fp)
81137e5c:	10800204 	addi	r2,r2,8
81137e60:	d0e07117 	ldw	r3,-32316(gp)
81137e64:	e1fff717 	ldw	r7,-36(fp)
81137e68:	01a04534 	movhi	r6,33044
81137e6c:	31a07704 	addi	r6,r6,-32292
81137e70:	180b883a 	mov	r5,r3
81137e74:	1009883a 	mov	r4,r2
81137e78:	113b7b80 	call	8113b7b8 <alt_alarm_start>
81137e7c:	1000040e 	bge	r2,zero,81137e90 <altera_avalon_jtag_uart_init+0x140>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
81137e80:	e0fff717 	ldw	r3,-36(fp)
81137e84:	00a00034 	movhi	r2,32768
81137e88:	10bfffc4 	addi	r2,r2,-1
81137e8c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
81137e90:	d0a06a83 	ldbu	r2,-32342(gp)
81137e94:	10803fcc 	andi	r2,r2,255
81137e98:	10800058 	cmpnei	r2,r2,1
81137e9c:	10000f1e 	bne	r2,zero,81137edc <altera_avalon_jtag_uart_init+0x18c>
81137ea0:	d0e07117 	ldw	r3,-32316(gp)
81137ea4:	00b33374 	movhi	r2,52429
81137ea8:	10b33344 	addi	r2,r2,-13107
81137eac:	1888383a 	mulxuu	r4,r3,r2
81137eb0:	1885383a 	mul	r2,r3,r2
81137eb4:	1021883a 	mov	r16,r2
81137eb8:	2023883a 	mov	r17,r4
81137ebc:	8804d0fa 	srli	r2,r17,3
81137ec0:	e1fff717 	ldw	r7,-36(fp)
81137ec4:	01a044f4 	movhi	r6,33043
81137ec8:	31a16304 	addi	r6,r6,-31348
81137ecc:	100b883a 	mov	r5,r2
81137ed0:	01204574 	movhi	r4,33045
81137ed4:	21305304 	addi	r4,r4,-16052
81137ed8:	113b7b80 	call	8113b7b8 <alt_alarm_start>
81137edc:	d0a06b03 	ldbu	r2,-32340(gp)
81137ee0:	10803fcc 	andi	r2,r2,255
81137ee4:	10800058 	cmpnei	r2,r2,1
81137ee8:	1000051e 	bne	r2,zero,81137f00 <altera_avalon_jtag_uart_init+0x1b0>
81137eec:	e0bff717 	ldw	r2,-36(fp)
81137ef0:	10800017 	ldw	r2,0(r2)
81137ef4:	100b883a 	mov	r5,r2
81137ef8:	e13ff717 	ldw	r4,-36(fp)
81137efc:	11287240 	call	81128724 <alt_log_jtag_uart_startup_info>
}
81137f00:	0001883a 	nop
81137f04:	e6fffe04 	addi	sp,fp,-8
81137f08:	dfc00317 	ldw	ra,12(sp)
81137f0c:	df000217 	ldw	fp,8(sp)
81137f10:	dc400117 	ldw	r17,4(sp)
81137f14:	dc000017 	ldw	r16,0(sp)
81137f18:	dec00404 	addi	sp,sp,16
81137f1c:	f800283a 	ret

81137f20 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81137f20:	defff204 	addi	sp,sp,-56
81137f24:	de00012e 	bgeu	sp,et,81137f2c <altera_avalon_jtag_uart_irq+0xc>
81137f28:	003b68fa 	trap	3
81137f2c:	dfc00d15 	stw	ra,52(sp)
81137f30:	df000c15 	stw	fp,48(sp)
81137f34:	df000c04 	addi	fp,sp,48
81137f38:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81137f3c:	e0bfff17 	ldw	r2,-4(fp)
81137f40:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
81137f44:	e0bff617 	ldw	r2,-40(fp)
81137f48:	10800017 	ldw	r2,0(r2)
81137f4c:	e0bff715 	stw	r2,-36(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
81137f50:	e0bff717 	ldw	r2,-36(fp)
81137f54:	e17ff617 	ldw	r5,-40(fp)
81137f58:	1009883a 	mov	r4,r2
81137f5c:	11287780 	call	81128778 <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81137f60:	e0bff717 	ldw	r2,-36(fp)
81137f64:	10800104 	addi	r2,r2,4
81137f68:	10800037 	ldwio	r2,0(r2)
81137f6c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81137f70:	e0bff817 	ldw	r2,-32(fp)
81137f74:	1080c00c 	andi	r2,r2,768
81137f78:	10009126 	beq	r2,zero,811381c0 <altera_avalon_jtag_uart_irq+0x2a0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81137f7c:	e0bff817 	ldw	r2,-32(fp)
81137f80:	1080400c 	andi	r2,r2,256
81137f84:	10004726 	beq	r2,zero,811380a4 <altera_avalon_jtag_uart_irq+0x184>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81137f88:	00800074 	movhi	r2,1
81137f8c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81137f90:	e0bff617 	ldw	r2,-40(fp)
81137f94:	10800d17 	ldw	r2,52(r2)
81137f98:	10800044 	addi	r2,r2,1
81137f9c:	1081ffcc 	andi	r2,r2,2047
81137fa0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
81137fa4:	e0bff617 	ldw	r2,-40(fp)
81137fa8:	10c00e17 	ldw	r3,56(r2)
81137fac:	e0bff917 	ldw	r2,-28(fp)
81137fb0:	18802726 	beq	r3,r2,81138050 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
81137fb4:	e0bff717 	ldw	r2,-36(fp)
81137fb8:	10800037 	ldwio	r2,0(r2)
81137fbc:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
81137fc0:	e0bff417 	ldw	r2,-48(fp)
81137fc4:	10a0000c 	andi	r2,r2,32768
81137fc8:	10002326 	beq	r2,zero,81138058 <altera_avalon_jtag_uart_irq+0x138>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
81137fcc:	e0bff617 	ldw	r2,-40(fp)
81137fd0:	10800d17 	ldw	r2,52(r2)
81137fd4:	e0fff417 	ldw	r3,-48(fp)
81137fd8:	1809883a 	mov	r4,r3
81137fdc:	e0fff617 	ldw	r3,-40(fp)
81137fe0:	1885883a 	add	r2,r3,r2
81137fe4:	10801104 	addi	r2,r2,68
81137fe8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81137fec:	e0bff617 	ldw	r2,-40(fp)
81137ff0:	10800d17 	ldw	r2,52(r2)
81137ff4:	10800044 	addi	r2,r2,1
81137ff8:	10c1ffcc 	andi	r3,r2,2047
81137ffc:	e0bff617 	ldw	r2,-40(fp)
81138000:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
81138004:	e0bff617 	ldw	r2,-40(fp)
81138008:	10800c17 	ldw	r2,48(r2)
8113800c:	e0bffb15 	stw	r2,-20(fp)
81138010:	00800044 	movi	r2,1
81138014:	e0bffc0d 	sth	r2,-16(fp)
81138018:	00800044 	movi	r2,1
8113801c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81138020:	d0a07a03 	ldbu	r2,-32280(gp)
81138024:	10803fcc 	andi	r2,r2,255
81138028:	103fd926 	beq	r2,zero,81137f90 <__reset+0xfb117f90>
  {
    OSFlagPost (group, flags, opt, &err);
8113802c:	e0bffc0b 	ldhu	r2,-16(fp)
81138030:	e0fffc83 	ldbu	r3,-14(fp)
81138034:	e13ffdc4 	addi	r4,fp,-9
81138038:	200f883a 	mov	r7,r4
8113803c:	180d883a 	mov	r6,r3
81138040:	100b883a 	mov	r5,r2
81138044:	e13ffb17 	ldw	r4,-20(fp)
81138048:	112cb2c0 	call	8112cb2c <OSFlagPost>
      }
8113804c:	003fd006 	br	81137f90 <__reset+0xfb117f90>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81138050:	0001883a 	nop
81138054:	00000106 	br	8113805c <altera_avalon_jtag_uart_irq+0x13c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81138058:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8113805c:	e0bff417 	ldw	r2,-48(fp)
81138060:	10bfffec 	andhi	r2,r2,65535
81138064:	10000f26 	beq	r2,zero,811380a4 <altera_avalon_jtag_uart_irq+0x184>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81138068:	e0bff617 	ldw	r2,-40(fp)
8113806c:	10c00817 	ldw	r3,32(r2)
81138070:	00bfff84 	movi	r2,-2
81138074:	1886703a 	and	r3,r3,r2
81138078:	e0bff617 	ldw	r2,-40(fp)
8113807c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81138080:	e0bff717 	ldw	r2,-36(fp)
81138084:	10800104 	addi	r2,r2,4
81138088:	1007883a 	mov	r3,r2
8113808c:	e0bff617 	ldw	r2,-40(fp)
81138090:	10800817 	ldw	r2,32(r2)
81138094:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81138098:	e0bff717 	ldw	r2,-36(fp)
8113809c:	10800104 	addi	r2,r2,4
811380a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
811380a4:	e0bff817 	ldw	r2,-32(fp)
811380a8:	1080800c 	andi	r2,r2,512
811380ac:	103fac26 	beq	r2,zero,81137f60 <__reset+0xfb117f60>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
811380b0:	e0bff817 	ldw	r2,-32(fp)
811380b4:	1004d43a 	srli	r2,r2,16
811380b8:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
811380bc:	00002606 	br	81138158 <altera_avalon_jtag_uart_irq+0x238>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
811380c0:	e0bff717 	ldw	r2,-36(fp)
811380c4:	e0fff617 	ldw	r3,-40(fp)
811380c8:	18c01017 	ldw	r3,64(r3)
811380cc:	e13ff617 	ldw	r4,-40(fp)
811380d0:	20c7883a 	add	r3,r4,r3
811380d4:	18c21104 	addi	r3,r3,2116
811380d8:	18c00003 	ldbu	r3,0(r3)
811380dc:	18c03fcc 	andi	r3,r3,255
811380e0:	18c0201c 	xori	r3,r3,128
811380e4:	18ffe004 	addi	r3,r3,-128
811380e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811380ec:	e0bff617 	ldw	r2,-40(fp)
811380f0:	10801017 	ldw	r2,64(r2)
811380f4:	10800044 	addi	r2,r2,1
811380f8:	10c1ffcc 	andi	r3,r2,2047
811380fc:	e0bff617 	ldw	r2,-40(fp)
81138100:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
81138104:	e0bff617 	ldw	r2,-40(fp)
81138108:	10800c17 	ldw	r2,48(r2)
8113810c:	e0bffa15 	stw	r2,-24(fp)
81138110:	00800084 	movi	r2,2
81138114:	e0bffd0d 	sth	r2,-12(fp)
81138118:	00800044 	movi	r2,1
8113811c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81138120:	d0a07a03 	ldbu	r2,-32280(gp)
81138124:	10803fcc 	andi	r2,r2,255
81138128:	10000826 	beq	r2,zero,8113814c <altera_avalon_jtag_uart_irq+0x22c>
  {
    OSFlagPost (group, flags, opt, &err);
8113812c:	e0bffd0b 	ldhu	r2,-12(fp)
81138130:	e0fffd83 	ldbu	r3,-10(fp)
81138134:	e13ffe04 	addi	r4,fp,-8
81138138:	200f883a 	mov	r7,r4
8113813c:	180d883a 	mov	r6,r3
81138140:	100b883a 	mov	r5,r2
81138144:	e13ffa17 	ldw	r4,-24(fp)
81138148:	112cb2c0 	call	8112cb2c <OSFlagPost>

        space--;
8113814c:	e0bff517 	ldw	r2,-44(fp)
81138150:	10bfffc4 	addi	r2,r2,-1
81138154:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
81138158:	e0bff517 	ldw	r2,-44(fp)
8113815c:	10000526 	beq	r2,zero,81138174 <altera_avalon_jtag_uart_irq+0x254>
81138160:	e0bff617 	ldw	r2,-40(fp)
81138164:	10c01017 	ldw	r3,64(r2)
81138168:	e0bff617 	ldw	r2,-40(fp)
8113816c:	10800f17 	ldw	r2,60(r2)
81138170:	18bfd31e 	bne	r3,r2,811380c0 <__reset+0xfb1180c0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
81138174:	e0bff517 	ldw	r2,-44(fp)
81138178:	103f7926 	beq	r2,zero,81137f60 <__reset+0xfb117f60>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8113817c:	e0bff617 	ldw	r2,-40(fp)
81138180:	10c00817 	ldw	r3,32(r2)
81138184:	00bfff44 	movi	r2,-3
81138188:	1886703a 	and	r3,r3,r2
8113818c:	e0bff617 	ldw	r2,-40(fp)
81138190:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81138194:	e0bff617 	ldw	r2,-40(fp)
81138198:	10800017 	ldw	r2,0(r2)
8113819c:	10800104 	addi	r2,r2,4
811381a0:	1007883a 	mov	r3,r2
811381a4:	e0bff617 	ldw	r2,-40(fp)
811381a8:	10800817 	ldw	r2,32(r2)
811381ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
811381b0:	e0bff717 	ldw	r2,-36(fp)
811381b4:	10800104 	addi	r2,r2,4
811381b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
811381bc:	003f6806 	br	81137f60 <__reset+0xfb117f60>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
811381c0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
811381c4:	0001883a 	nop
811381c8:	e037883a 	mov	sp,fp
811381cc:	dfc00117 	ldw	ra,4(sp)
811381d0:	df000017 	ldw	fp,0(sp)
811381d4:	dec00204 	addi	sp,sp,8
811381d8:	f800283a 	ret

811381dc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
811381dc:	defff904 	addi	sp,sp,-28
811381e0:	de00012e 	bgeu	sp,et,811381e8 <altera_avalon_jtag_uart_timeout+0xc>
811381e4:	003b68fa 	trap	3
811381e8:	dfc00615 	stw	ra,24(sp)
811381ec:	df000515 	stw	fp,20(sp)
811381f0:	df000504 	addi	fp,sp,20
811381f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
811381f8:	e0bfff17 	ldw	r2,-4(fp)
811381fc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81138200:	e0bffb17 	ldw	r2,-20(fp)
81138204:	10800017 	ldw	r2,0(r2)
81138208:	10800104 	addi	r2,r2,4
8113820c:	10800037 	ldwio	r2,0(r2)
81138210:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81138214:	e0bffc17 	ldw	r2,-16(fp)
81138218:	1081000c 	andi	r2,r2,1024
8113821c:	10000b26 	beq	r2,zero,8113824c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81138220:	e0bffb17 	ldw	r2,-20(fp)
81138224:	10800017 	ldw	r2,0(r2)
81138228:	10800104 	addi	r2,r2,4
8113822c:	1007883a 	mov	r3,r2
81138230:	e0bffb17 	ldw	r2,-20(fp)
81138234:	10800817 	ldw	r2,32(r2)
81138238:	10810014 	ori	r2,r2,1024
8113823c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
81138240:	e0bffb17 	ldw	r2,-20(fp)
81138244:	10000915 	stw	zero,36(r2)
81138248:	00002106 	br	811382d0 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8113824c:	e0bffb17 	ldw	r2,-20(fp)
81138250:	10c00917 	ldw	r3,36(r2)
81138254:	00a00034 	movhi	r2,32768
81138258:	10bfff04 	addi	r2,r2,-4
8113825c:	10c01c36 	bltu	r2,r3,811382d0 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
81138260:	e0bffb17 	ldw	r2,-20(fp)
81138264:	10800917 	ldw	r2,36(r2)
81138268:	10c00044 	addi	r3,r2,1
8113826c:	e0bffb17 	ldw	r2,-20(fp)
81138270:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
81138274:	e0bffb17 	ldw	r2,-20(fp)
81138278:	10c00917 	ldw	r3,36(r2)
8113827c:	e0bffb17 	ldw	r2,-20(fp)
81138280:	10800117 	ldw	r2,4(r2)
81138284:	18801236 	bltu	r3,r2,811382d0 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
81138288:	e0bffb17 	ldw	r2,-20(fp)
8113828c:	10800c17 	ldw	r2,48(r2)
81138290:	e0bffd15 	stw	r2,-12(fp)
81138294:	00800104 	movi	r2,4
81138298:	e0bffe0d 	sth	r2,-8(fp)
8113829c:	00800044 	movi	r2,1
811382a0:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
811382a4:	d0a07a03 	ldbu	r2,-32280(gp)
811382a8:	10803fcc 	andi	r2,r2,255
811382ac:	10000826 	beq	r2,zero,811382d0 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
811382b0:	e0bffe0b 	ldhu	r2,-8(fp)
811382b4:	e0fffe83 	ldbu	r3,-6(fp)
811382b8:	e13ffec4 	addi	r4,fp,-5
811382bc:	200f883a 	mov	r7,r4
811382c0:	180d883a 	mov	r6,r3
811382c4:	100b883a 	mov	r5,r2
811382c8:	e13ffd17 	ldw	r4,-12(fp)
811382cc:	112cb2c0 	call	8112cb2c <OSFlagPost>
811382d0:	d0a07117 	ldw	r2,-32316(gp)
    }
  }

  return alt_ticks_per_second();
}
811382d4:	e037883a 	mov	sp,fp
811382d8:	dfc00117 	ldw	ra,4(sp)
811382dc:	df000017 	ldw	fp,0(sp)
811382e0:	dec00204 	addi	sp,sp,8
811382e4:	f800283a 	ret

811382e8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
811382e8:	defffd04 	addi	sp,sp,-12
811382ec:	de00012e 	bgeu	sp,et,811382f4 <altera_avalon_jtag_uart_close+0xc>
811382f0:	003b68fa 	trap	3
811382f4:	df000215 	stw	fp,8(sp)
811382f8:	df000204 	addi	fp,sp,8
811382fc:	e13ffe15 	stw	r4,-8(fp)
81138300:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81138304:	00000506 	br	8113831c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81138308:	e0bfff17 	ldw	r2,-4(fp)
8113830c:	1090000c 	andi	r2,r2,16384
81138310:	10000226 	beq	r2,zero,8113831c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
81138314:	00bffd44 	movi	r2,-11
81138318:	00000b06 	br	81138348 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8113831c:	e0bffe17 	ldw	r2,-8(fp)
81138320:	10c01017 	ldw	r3,64(r2)
81138324:	e0bffe17 	ldw	r2,-8(fp)
81138328:	10800f17 	ldw	r2,60(r2)
8113832c:	18800526 	beq	r3,r2,81138344 <altera_avalon_jtag_uart_close+0x5c>
81138330:	e0bffe17 	ldw	r2,-8(fp)
81138334:	10c00917 	ldw	r3,36(r2)
81138338:	e0bffe17 	ldw	r2,-8(fp)
8113833c:	10800117 	ldw	r2,4(r2)
81138340:	18bff136 	bltu	r3,r2,81138308 <__reset+0xfb118308>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81138344:	0005883a 	mov	r2,zero
}
81138348:	e037883a 	mov	sp,fp
8113834c:	df000017 	ldw	fp,0(sp)
81138350:	dec00104 	addi	sp,sp,4
81138354:	f800283a 	ret

81138358 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81138358:	defffa04 	addi	sp,sp,-24
8113835c:	de00012e 	bgeu	sp,et,81138364 <altera_avalon_jtag_uart_ioctl+0xc>
81138360:	003b68fa 	trap	3
81138364:	df000515 	stw	fp,20(sp)
81138368:	df000504 	addi	fp,sp,20
8113836c:	e13ffd15 	stw	r4,-12(fp)
81138370:	e17ffe15 	stw	r5,-8(fp)
81138374:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81138378:	00bff9c4 	movi	r2,-25
8113837c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81138380:	e0bffe17 	ldw	r2,-8(fp)
81138384:	10da8060 	cmpeqi	r3,r2,27137
81138388:	1800031e 	bne	r3,zero,81138398 <altera_avalon_jtag_uart_ioctl+0x40>
8113838c:	109a80a0 	cmpeqi	r2,r2,27138
81138390:	1000181e 	bne	r2,zero,811383f4 <altera_avalon_jtag_uart_ioctl+0x9c>
      rc = 0;
    }
    break;

  default:
    break;
81138394:	00002906 	br	8113843c <altera_avalon_jtag_uart_ioctl+0xe4>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
81138398:	e0bffd17 	ldw	r2,-12(fp)
8113839c:	10c00117 	ldw	r3,4(r2)
811383a0:	00a00034 	movhi	r2,32768
811383a4:	10bfffc4 	addi	r2,r2,-1
811383a8:	18802126 	beq	r3,r2,81138430 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
811383ac:	e0bfff17 	ldw	r2,-4(fp)
811383b0:	10800017 	ldw	r2,0(r2)
811383b4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
811383b8:	e0bffc17 	ldw	r2,-16(fp)
811383bc:	10800090 	cmplti	r2,r2,2
811383c0:	1000061e 	bne	r2,zero,811383dc <altera_avalon_jtag_uart_ioctl+0x84>
811383c4:	e0fffc17 	ldw	r3,-16(fp)
811383c8:	00a00034 	movhi	r2,32768
811383cc:	10bfffc4 	addi	r2,r2,-1
811383d0:	18800226 	beq	r3,r2,811383dc <altera_avalon_jtag_uart_ioctl+0x84>
811383d4:	e0bffc17 	ldw	r2,-16(fp)
811383d8:	00000206 	br	811383e4 <altera_avalon_jtag_uart_ioctl+0x8c>
811383dc:	00a00034 	movhi	r2,32768
811383e0:	10bfff84 	addi	r2,r2,-2
811383e4:	e0fffd17 	ldw	r3,-12(fp)
811383e8:	18800115 	stw	r2,4(r3)
      rc = 0;
811383ec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
811383f0:	00000f06 	br	81138430 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
811383f4:	e0bffd17 	ldw	r2,-12(fp)
811383f8:	10c00117 	ldw	r3,4(r2)
811383fc:	00a00034 	movhi	r2,32768
81138400:	10bfffc4 	addi	r2,r2,-1
81138404:	18800c26 	beq	r3,r2,81138438 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81138408:	e0bffd17 	ldw	r2,-12(fp)
8113840c:	10c00917 	ldw	r3,36(r2)
81138410:	e0bffd17 	ldw	r2,-12(fp)
81138414:	10800117 	ldw	r2,4(r2)
81138418:	1885803a 	cmpltu	r2,r3,r2
8113841c:	10c03fcc 	andi	r3,r2,255
81138420:	e0bfff17 	ldw	r2,-4(fp)
81138424:	10c00015 	stw	r3,0(r2)
      rc = 0;
81138428:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8113842c:	00000206 	br	81138438 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81138430:	0001883a 	nop
81138434:	00000106 	br	8113843c <altera_avalon_jtag_uart_ioctl+0xe4>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81138438:	0001883a 	nop

  default:
    break;
  }

  return rc;
8113843c:	e0bffb17 	ldw	r2,-20(fp)
}
81138440:	e037883a 	mov	sp,fp
81138444:	df000017 	ldw	fp,0(sp)
81138448:	dec00104 	addi	sp,sp,4
8113844c:	f800283a 	ret

81138450 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81138450:	deffed04 	addi	sp,sp,-76
81138454:	de00012e 	bgeu	sp,et,8113845c <altera_avalon_jtag_uart_read+0xc>
81138458:	003b68fa 	trap	3
8113845c:	dfc01215 	stw	ra,72(sp)
81138460:	df001115 	stw	fp,68(sp)
81138464:	df001104 	addi	fp,sp,68
81138468:	e13ffc15 	stw	r4,-16(fp)
8113846c:	e17ffd15 	stw	r5,-12(fp)
81138470:	e1bffe15 	stw	r6,-8(fp)
81138474:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81138478:	e0bffd17 	ldw	r2,-12(fp)
8113847c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
81138480:	e0bffc17 	ldw	r2,-16(fp)
81138484:	10800a17 	ldw	r2,40(r2)
81138488:	e0bff815 	stw	r2,-32(fp)
8113848c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81138490:	e0bff90b 	ldhu	r2,-28(fp)
81138494:	e0fffb04 	addi	r3,fp,-20
81138498:	180d883a 	mov	r6,r3
8113849c:	100b883a 	mov	r5,r2
811384a0:	e13ff817 	ldw	r4,-32(fp)
811384a4:	11301a40 	call	811301a4 <OSSemPend>

  while (space > 0)
811384a8:	00006106 	br	81138630 <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
811384ac:	e0bffc17 	ldw	r2,-16(fp)
811384b0:	10800d17 	ldw	r2,52(r2)
811384b4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
811384b8:	e0bffc17 	ldw	r2,-16(fp)
811384bc:	10800e17 	ldw	r2,56(r2)
811384c0:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
811384c4:	e0fff317 	ldw	r3,-52(fp)
811384c8:	e0bff417 	ldw	r2,-48(fp)
811384cc:	18800536 	bltu	r3,r2,811384e4 <altera_avalon_jtag_uart_read+0x94>
        n = in - out;
811384d0:	e0fff317 	ldw	r3,-52(fp)
811384d4:	e0bff417 	ldw	r2,-48(fp)
811384d8:	1885c83a 	sub	r2,r3,r2
811384dc:	e0bff115 	stw	r2,-60(fp)
811384e0:	00000406 	br	811384f4 <altera_avalon_jtag_uart_read+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
811384e4:	00c20004 	movi	r3,2048
811384e8:	e0bff417 	ldw	r2,-48(fp)
811384ec:	1885c83a 	sub	r2,r3,r2
811384f0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
811384f4:	e0bff117 	ldw	r2,-60(fp)
811384f8:	10001e26 	beq	r2,zero,81138574 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */

      if (n > space)
811384fc:	e0fffe17 	ldw	r3,-8(fp)
81138500:	e0bff117 	ldw	r2,-60(fp)
81138504:	1880022e 	bgeu	r3,r2,81138510 <altera_avalon_jtag_uart_read+0xc0>
        n = space;
81138508:	e0bffe17 	ldw	r2,-8(fp)
8113850c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81138510:	e0bffc17 	ldw	r2,-16(fp)
81138514:	10c01104 	addi	r3,r2,68
81138518:	e0bff417 	ldw	r2,-48(fp)
8113851c:	1885883a 	add	r2,r3,r2
81138520:	e1bff117 	ldw	r6,-60(fp)
81138524:	100b883a 	mov	r5,r2
81138528:	e13ff017 	ldw	r4,-64(fp)
8113852c:	11130b40 	call	811130b4 <memcpy>
      ptr   += n;
81138530:	e0fff017 	ldw	r3,-64(fp)
81138534:	e0bff117 	ldw	r2,-60(fp)
81138538:	1885883a 	add	r2,r3,r2
8113853c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
81138540:	e0fffe17 	ldw	r3,-8(fp)
81138544:	e0bff117 	ldw	r2,-60(fp)
81138548:	1885c83a 	sub	r2,r3,r2
8113854c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81138550:	e0fff417 	ldw	r3,-48(fp)
81138554:	e0bff117 	ldw	r2,-60(fp)
81138558:	1885883a 	add	r2,r3,r2
8113855c:	10c1ffcc 	andi	r3,r2,2047
81138560:	e0bffc17 	ldw	r2,-16(fp)
81138564:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
81138568:	e0bffe17 	ldw	r2,-8(fp)
8113856c:	00bfcf16 	blt	zero,r2,811384ac <__reset+0xfb1184ac>
81138570:	00000106 	br	81138578 <altera_avalon_jtag_uart_read+0x128>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81138574:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81138578:	e0fff017 	ldw	r3,-64(fp)
8113857c:	e0bffd17 	ldw	r2,-12(fp)
81138580:	18802e1e 	bne	r3,r2,8113863c <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81138584:	e0bfff17 	ldw	r2,-4(fp)
81138588:	1090000c 	andi	r2,r2,16384
8113858c:	10002d1e 	bne	r2,zero,81138644 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
81138590:	d0a07a03 	ldbu	r2,-32280(gp)
81138594:	10803fcc 	andi	r2,r2,255
81138598:	10800058 	cmpnei	r2,r2,1
8113859c:	1000161e 	bne	r2,zero,811385f8 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
811385a0:	e0bffc17 	ldw	r2,-16(fp)
811385a4:	10800c17 	ldw	r2,48(r2)
811385a8:	e0bff215 	stw	r2,-56(fp)
811385ac:	00800144 	movi	r2,5
811385b0:	e0bff98d 	sth	r2,-26(fp)
811385b4:	00bfe0c4 	movi	r2,-125
811385b8:	e0bffa05 	stb	r2,-24(fp)
811385bc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
811385c0:	d0a07a03 	ldbu	r2,-32280(gp)
811385c4:	10803fcc 	andi	r2,r2,255
811385c8:	10001526 	beq	r2,zero,81138620 <altera_avalon_jtag_uart_read+0x1d0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
811385cc:	e0fff98b 	ldhu	r3,-26(fp)
811385d0:	e13ffa03 	ldbu	r4,-24(fp)
811385d4:	e17ffa8b 	ldhu	r5,-22(fp)
811385d8:	e0bffb44 	addi	r2,fp,-19
811385dc:	d8800015 	stw	r2,0(sp)
811385e0:	280f883a 	mov	r7,r5
811385e4:	200d883a 	mov	r6,r4
811385e8:	180b883a 	mov	r5,r3
811385ec:	e13ff217 	ldw	r4,-56(fp)
811385f0:	112c5040 	call	8112c504 <OSFlagPend>
811385f4:	00000a06 	br	81138620 <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
811385f8:	0001883a 	nop
811385fc:	e0bffc17 	ldw	r2,-16(fp)
81138600:	10c00d17 	ldw	r3,52(r2)
81138604:	e0bff317 	ldw	r2,-52(fp)
81138608:	1880051e 	bne	r3,r2,81138620 <altera_avalon_jtag_uart_read+0x1d0>
8113860c:	e0bffc17 	ldw	r2,-16(fp)
81138610:	10c00917 	ldw	r3,36(r2)
81138614:	e0bffc17 	ldw	r2,-16(fp)
81138618:	10800117 	ldw	r2,4(r2)
8113861c:	18bff736 	bltu	r3,r2,811385fc <__reset+0xfb1185fc>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81138620:	e0bffc17 	ldw	r2,-16(fp)
81138624:	10c00d17 	ldw	r3,52(r2)
81138628:	e0bff317 	ldw	r2,-52(fp)
8113862c:	18800726 	beq	r3,r2,8113864c <altera_avalon_jtag_uart_read+0x1fc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81138630:	e0bffe17 	ldw	r2,-8(fp)
81138634:	00bf9d16 	blt	zero,r2,811384ac <__reset+0xfb1184ac>
81138638:	00000506 	br	81138650 <altera_avalon_jtag_uart_read+0x200>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8113863c:	0001883a 	nop
81138640:	00000306 	br	81138650 <altera_avalon_jtag_uart_read+0x200>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81138644:	0001883a 	nop
81138648:	00000106 	br	81138650 <altera_avalon_jtag_uart_read+0x200>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8113864c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81138650:	e0bffc17 	ldw	r2,-16(fp)
81138654:	10800a17 	ldw	r2,40(r2)
81138658:	1009883a 	mov	r4,r2
8113865c:	113052c0 	call	8113052c <OSSemPost>

  if (ptr != buffer)
81138660:	e0fff017 	ldw	r3,-64(fp)
81138664:	e0bffd17 	ldw	r2,-12(fp)
81138668:	18801826 	beq	r3,r2,811386cc <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113866c:	0005303a 	rdctl	r2,status
81138670:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138674:	e0fff717 	ldw	r3,-36(fp)
81138678:	00bfff84 	movi	r2,-2
8113867c:	1884703a 	and	r2,r3,r2
81138680:	1001703a 	wrctl	status,r2
  
  return context;
81138684:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81138688:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8113868c:	e0bffc17 	ldw	r2,-16(fp)
81138690:	10800817 	ldw	r2,32(r2)
81138694:	10c00054 	ori	r3,r2,1
81138698:	e0bffc17 	ldw	r2,-16(fp)
8113869c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811386a0:	e0bffc17 	ldw	r2,-16(fp)
811386a4:	10800017 	ldw	r2,0(r2)
811386a8:	10800104 	addi	r2,r2,4
811386ac:	1007883a 	mov	r3,r2
811386b0:	e0bffc17 	ldw	r2,-16(fp)
811386b4:	10800817 	ldw	r2,32(r2)
811386b8:	18800035 	stwio	r2,0(r3)
811386bc:	e0bff617 	ldw	r2,-40(fp)
811386c0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811386c4:	e0bff517 	ldw	r2,-44(fp)
811386c8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
811386cc:	e0fff017 	ldw	r3,-64(fp)
811386d0:	e0bffd17 	ldw	r2,-12(fp)
811386d4:	18800426 	beq	r3,r2,811386e8 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
811386d8:	e0fff017 	ldw	r3,-64(fp)
811386dc:	e0bffd17 	ldw	r2,-12(fp)
811386e0:	1885c83a 	sub	r2,r3,r2
811386e4:	00000606 	br	81138700 <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
811386e8:	e0bfff17 	ldw	r2,-4(fp)
811386ec:	1090000c 	andi	r2,r2,16384
811386f0:	10000226 	beq	r2,zero,811386fc <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
811386f4:	00bffd44 	movi	r2,-11
811386f8:	00000106 	br	81138700 <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
811386fc:	00bffec4 	movi	r2,-5
}
81138700:	e037883a 	mov	sp,fp
81138704:	dfc00117 	ldw	ra,4(sp)
81138708:	df000017 	ldw	fp,0(sp)
8113870c:	dec00204 	addi	sp,sp,8
81138710:	f800283a 	ret

81138714 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81138714:	deffed04 	addi	sp,sp,-76
81138718:	de00012e 	bgeu	sp,et,81138720 <altera_avalon_jtag_uart_write+0xc>
8113871c:	003b68fa 	trap	3
81138720:	dfc01215 	stw	ra,72(sp)
81138724:	df001115 	stw	fp,68(sp)
81138728:	df001104 	addi	fp,sp,68
8113872c:	e13ffc15 	stw	r4,-16(fp)
81138730:	e17ffd15 	stw	r5,-12(fp)
81138734:	e1bffe15 	stw	r6,-8(fp)
81138738:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8113873c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81138740:	e0bffd17 	ldw	r2,-12(fp)
81138744:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
81138748:	e0bffc17 	ldw	r2,-16(fp)
8113874c:	10800b17 	ldw	r2,44(r2)
81138750:	e0bff815 	stw	r2,-32(fp)
81138754:	e03ff90d 	sth	zero,-28(fp)
81138758:	e0bff90b 	ldhu	r2,-28(fp)
8113875c:	e0fffb44 	addi	r3,fp,-19
81138760:	180d883a 	mov	r6,r3
81138764:	100b883a 	mov	r5,r2
81138768:	e13ff817 	ldw	r4,-32(fp)
8113876c:	11301a40 	call	811301a4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81138770:	00003706 	br	81138850 <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81138774:	e0bffc17 	ldw	r2,-16(fp)
81138778:	10800f17 	ldw	r2,60(r2)
8113877c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
81138780:	e0bffc17 	ldw	r2,-16(fp)
81138784:	10801017 	ldw	r2,64(r2)
81138788:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
8113878c:	e0fff417 	ldw	r3,-48(fp)
81138790:	e0bff017 	ldw	r2,-64(fp)
81138794:	1880062e 	bgeu	r3,r2,811387b0 <altera_avalon_jtag_uart_write+0x9c>
        n = out - 1 - in;
81138798:	e0fff017 	ldw	r3,-64(fp)
8113879c:	e0bff417 	ldw	r2,-48(fp)
811387a0:	1885c83a 	sub	r2,r3,r2
811387a4:	10bfffc4 	addi	r2,r2,-1
811387a8:	e0bff115 	stw	r2,-60(fp)
811387ac:	00000b06 	br	811387dc <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
811387b0:	e0bff017 	ldw	r2,-64(fp)
811387b4:	10000526 	beq	r2,zero,811387cc <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
811387b8:	00c20004 	movi	r3,2048
811387bc:	e0bff417 	ldw	r2,-48(fp)
811387c0:	1885c83a 	sub	r2,r3,r2
811387c4:	e0bff115 	stw	r2,-60(fp)
811387c8:	00000406 	br	811387dc <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
811387cc:	00c1ffc4 	movi	r3,2047
811387d0:	e0bff417 	ldw	r2,-48(fp)
811387d4:	1885c83a 	sub	r2,r3,r2
811387d8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
811387dc:	e0bff117 	ldw	r2,-60(fp)
811387e0:	10001e26 	beq	r2,zero,8113885c <altera_avalon_jtag_uart_write+0x148>
        break;

      if (n > count)
811387e4:	e0fffe17 	ldw	r3,-8(fp)
811387e8:	e0bff117 	ldw	r2,-60(fp)
811387ec:	1880022e 	bgeu	r3,r2,811387f8 <altera_avalon_jtag_uart_write+0xe4>
        n = count;
811387f0:	e0bffe17 	ldw	r2,-8(fp)
811387f4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
811387f8:	e0bffc17 	ldw	r2,-16(fp)
811387fc:	10c21104 	addi	r3,r2,2116
81138800:	e0bff417 	ldw	r2,-48(fp)
81138804:	1885883a 	add	r2,r3,r2
81138808:	e1bff117 	ldw	r6,-60(fp)
8113880c:	e17ffd17 	ldw	r5,-12(fp)
81138810:	1009883a 	mov	r4,r2
81138814:	11130b40 	call	811130b4 <memcpy>
      ptr   += n;
81138818:	e0fffd17 	ldw	r3,-12(fp)
8113881c:	e0bff117 	ldw	r2,-60(fp)
81138820:	1885883a 	add	r2,r3,r2
81138824:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81138828:	e0fffe17 	ldw	r3,-8(fp)
8113882c:	e0bff117 	ldw	r2,-60(fp)
81138830:	1885c83a 	sub	r2,r3,r2
81138834:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81138838:	e0fff417 	ldw	r3,-48(fp)
8113883c:	e0bff117 	ldw	r2,-60(fp)
81138840:	1885883a 	add	r2,r3,r2
81138844:	10c1ffcc 	andi	r3,r2,2047
81138848:	e0bffc17 	ldw	r2,-16(fp)
8113884c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81138850:	e0bffe17 	ldw	r2,-8(fp)
81138854:	00bfc716 	blt	zero,r2,81138774 <__reset+0xfb118774>
81138858:	00000106 	br	81138860 <altera_avalon_jtag_uart_write+0x14c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8113885c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138860:	0005303a 	rdctl	r2,status
81138864:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138868:	e0fff717 	ldw	r3,-36(fp)
8113886c:	00bfff84 	movi	r2,-2
81138870:	1884703a 	and	r2,r3,r2
81138874:	1001703a 	wrctl	status,r2
  
  return context;
81138878:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8113887c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81138880:	e0bffc17 	ldw	r2,-16(fp)
81138884:	10800817 	ldw	r2,32(r2)
81138888:	10c00094 	ori	r3,r2,2
8113888c:	e0bffc17 	ldw	r2,-16(fp)
81138890:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81138894:	e0bffc17 	ldw	r2,-16(fp)
81138898:	10800017 	ldw	r2,0(r2)
8113889c:	10800104 	addi	r2,r2,4
811388a0:	1007883a 	mov	r3,r2
811388a4:	e0bffc17 	ldw	r2,-16(fp)
811388a8:	10800817 	ldw	r2,32(r2)
811388ac:	18800035 	stwio	r2,0(r3)
811388b0:	e0bff617 	ldw	r2,-40(fp)
811388b4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811388b8:	e0bff317 	ldw	r2,-52(fp)
811388bc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
811388c0:	e0bffe17 	ldw	r2,-8(fp)
811388c4:	00802a0e 	bge	zero,r2,81138970 <altera_avalon_jtag_uart_write+0x25c>
    {
      if (flags & O_NONBLOCK)
811388c8:	e0bfff17 	ldw	r2,-4(fp)
811388cc:	1090000c 	andi	r2,r2,16384
811388d0:	10002a1e 	bne	r2,zero,8113897c <altera_avalon_jtag_uart_write+0x268>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
811388d4:	d0a07a03 	ldbu	r2,-32280(gp)
811388d8:	10803fcc 	andi	r2,r2,255
811388dc:	10800058 	cmpnei	r2,r2,1
811388e0:	1000161e 	bne	r2,zero,8113893c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
811388e4:	e0bffc17 	ldw	r2,-16(fp)
811388e8:	10800c17 	ldw	r2,48(r2)
811388ec:	e0bff515 	stw	r2,-44(fp)
811388f0:	00800184 	movi	r2,6
811388f4:	e0bff98d 	sth	r2,-26(fp)
811388f8:	00bfe0c4 	movi	r2,-125
811388fc:	e0bffa05 	stb	r2,-24(fp)
81138900:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81138904:	d0a07a03 	ldbu	r2,-32280(gp)
81138908:	10803fcc 	andi	r2,r2,255
8113890c:	10001526 	beq	r2,zero,81138964 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81138910:	e0fff98b 	ldhu	r3,-26(fp)
81138914:	e13ffa03 	ldbu	r4,-24(fp)
81138918:	e17ffa8b 	ldhu	r5,-22(fp)
8113891c:	e0bffb04 	addi	r2,fp,-20
81138920:	d8800015 	stw	r2,0(sp)
81138924:	280f883a 	mov	r7,r5
81138928:	200d883a 	mov	r6,r4
8113892c:	180b883a 	mov	r5,r3
81138930:	e13ff517 	ldw	r4,-44(fp)
81138934:	112c5040 	call	8112c504 <OSFlagPend>
81138938:	00000a06 	br	81138964 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8113893c:	0001883a 	nop
81138940:	e0bffc17 	ldw	r2,-16(fp)
81138944:	10c01017 	ldw	r3,64(r2)
81138948:	e0bff017 	ldw	r2,-64(fp)
8113894c:	1880051e 	bne	r3,r2,81138964 <altera_avalon_jtag_uart_write+0x250>
81138950:	e0bffc17 	ldw	r2,-16(fp)
81138954:	10c00917 	ldw	r3,36(r2)
81138958:	e0bffc17 	ldw	r2,-16(fp)
8113895c:	10800117 	ldw	r2,4(r2)
81138960:	18bff736 	bltu	r3,r2,81138940 <__reset+0xfb118940>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
81138964:	e0bffc17 	ldw	r2,-16(fp)
81138968:	10800917 	ldw	r2,36(r2)
8113896c:	1000051e 	bne	r2,zero,81138984 <altera_avalon_jtag_uart_write+0x270>
         break;
    }
  }
  while (count > 0);
81138970:	e0bffe17 	ldw	r2,-8(fp)
81138974:	00bfb616 	blt	zero,r2,81138850 <__reset+0xfb118850>
81138978:	00000306 	br	81138988 <altera_avalon_jtag_uart_write+0x274>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8113897c:	0001883a 	nop
81138980:	00000106 	br	81138988 <altera_avalon_jtag_uart_write+0x274>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81138984:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
81138988:	e0bffc17 	ldw	r2,-16(fp)
8113898c:	10800b17 	ldw	r2,44(r2)
81138990:	1009883a 	mov	r4,r2
81138994:	113052c0 	call	8113052c <OSSemPost>

  if (ptr != start)
81138998:	e0fffd17 	ldw	r3,-12(fp)
8113899c:	e0bff217 	ldw	r2,-56(fp)
811389a0:	18800426 	beq	r3,r2,811389b4 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
811389a4:	e0fffd17 	ldw	r3,-12(fp)
811389a8:	e0bff217 	ldw	r2,-56(fp)
811389ac:	1885c83a 	sub	r2,r3,r2
811389b0:	00000606 	br	811389cc <altera_avalon_jtag_uart_write+0x2b8>
  else if (flags & O_NONBLOCK)
811389b4:	e0bfff17 	ldw	r2,-4(fp)
811389b8:	1090000c 	andi	r2,r2,16384
811389bc:	10000226 	beq	r2,zero,811389c8 <altera_avalon_jtag_uart_write+0x2b4>
    return -EWOULDBLOCK;
811389c0:	00bffd44 	movi	r2,-11
811389c4:	00000106 	br	811389cc <altera_avalon_jtag_uart_write+0x2b8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
811389c8:	00bffec4 	movi	r2,-5
}
811389cc:	e037883a 	mov	sp,fp
811389d0:	dfc00117 	ldw	ra,4(sp)
811389d4:	df000017 	ldw	fp,0(sp)
811389d8:	dec00204 	addi	sp,sp,8
811389dc:	f800283a 	ret

811389e0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
811389e0:	defffa04 	addi	sp,sp,-24
811389e4:	de00012e 	bgeu	sp,et,811389ec <alt_avalon_timer_sc_irq+0xc>
811389e8:	003b68fa 	trap	3
811389ec:	dfc00515 	stw	ra,20(sp)
811389f0:	df000415 	stw	fp,16(sp)
811389f4:	df000404 	addi	fp,sp,16
811389f8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
811389fc:	0007883a 	mov	r3,zero
81138a00:	e0bfff17 	ldw	r2,-4(fp)
81138a04:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81138a08:	e0bfff17 	ldw	r2,-4(fp)
81138a0c:	10800104 	addi	r2,r2,4
81138a10:	10800037 	ldwio	r2,0(r2)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();
81138a14:	112891c0 	call	8112891c <alt_log_system_clock>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138a18:	0005303a 	rdctl	r2,status
81138a1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138a20:	e0fffd17 	ldw	r3,-12(fp)
81138a24:	00bfff84 	movi	r2,-2
81138a28:	1884703a 	and	r2,r3,r2
81138a2c:	1001703a 	wrctl	status,r2
  
  return context;
81138a30:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81138a34:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81138a38:	112920c0 	call	8112920c <alt_tick>
81138a3c:	e0bffc17 	ldw	r2,-16(fp)
81138a40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138a44:	e0bffe17 	ldw	r2,-8(fp)
81138a48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
81138a4c:	0001883a 	nop
81138a50:	e037883a 	mov	sp,fp
81138a54:	dfc00117 	ldw	ra,4(sp)
81138a58:	df000017 	ldw	fp,0(sp)
81138a5c:	dec00204 	addi	sp,sp,8
81138a60:	f800283a 	ret

81138a64 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81138a64:	defff804 	addi	sp,sp,-32
81138a68:	de00012e 	bgeu	sp,et,81138a70 <alt_avalon_timer_sc_init+0xc>
81138a6c:	003b68fa 	trap	3
81138a70:	dfc00715 	stw	ra,28(sp)
81138a74:	df000615 	stw	fp,24(sp)
81138a78:	df000604 	addi	fp,sp,24
81138a7c:	e13ffc15 	stw	r4,-16(fp)
81138a80:	e17ffd15 	stw	r5,-12(fp)
81138a84:	e1bffe15 	stw	r6,-8(fp)
81138a88:	e1ffff15 	stw	r7,-4(fp)
81138a8c:	e0bfff17 	ldw	r2,-4(fp)
81138a90:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81138a94:	d0a07117 	ldw	r2,-32316(gp)
81138a98:	1000021e 	bne	r2,zero,81138aa4 <alt_avalon_timer_sc_init+0x40>
  {
    _alt_tick_rate = nticks;
81138a9c:	e0bffb17 	ldw	r2,-20(fp)
81138aa0:	d0a07115 	stw	r2,-32316(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
81138aa4:	e0bffc17 	ldw	r2,-16(fp)
81138aa8:	10800104 	addi	r2,r2,4
81138aac:	00c001c4 	movi	r3,7
81138ab0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81138ab4:	d8000015 	stw	zero,0(sp)
81138ab8:	e1fffc17 	ldw	r7,-16(fp)
81138abc:	01a04534 	movhi	r6,33044
81138ac0:	31a27804 	addi	r6,r6,-30240
81138ac4:	e17ffe17 	ldw	r5,-8(fp)
81138ac8:	e13ffd17 	ldw	r4,-12(fp)
81138acc:	113bd380 	call	8113bd38 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81138ad0:	0001883a 	nop
81138ad4:	e037883a 	mov	sp,fp
81138ad8:	dfc00117 	ldw	ra,4(sp)
81138adc:	df000017 	ldw	fp,0(sp)
81138ae0:	dec00204 	addi	sp,sp,8
81138ae4:	f800283a 	ret

81138ae8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81138ae8:	defffa04 	addi	sp,sp,-24
81138aec:	de00012e 	bgeu	sp,et,81138af4 <altera_avalon_uart_read_fd+0xc>
81138af0:	003b68fa 	trap	3
81138af4:	dfc00515 	stw	ra,20(sp)
81138af8:	df000415 	stw	fp,16(sp)
81138afc:	df000404 	addi	fp,sp,16
81138b00:	e13ffd15 	stw	r4,-12(fp)
81138b04:	e17ffe15 	stw	r5,-8(fp)
81138b08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81138b0c:	e0bffd17 	ldw	r2,-12(fp)
81138b10:	10800017 	ldw	r2,0(r2)
81138b14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
81138b18:	e0bffc17 	ldw	r2,-16(fp)
81138b1c:	10c00a04 	addi	r3,r2,40
81138b20:	e0bffd17 	ldw	r2,-12(fp)
81138b24:	10800217 	ldw	r2,8(r2)
81138b28:	100f883a 	mov	r7,r2
81138b2c:	e1bfff17 	ldw	r6,-4(fp)
81138b30:	e17ffe17 	ldw	r5,-8(fp)
81138b34:	1809883a 	mov	r4,r3
81138b38:	11391a80 	call	811391a8 <altera_avalon_uart_read>
      fd->fd_flags);
}
81138b3c:	e037883a 	mov	sp,fp
81138b40:	dfc00117 	ldw	ra,4(sp)
81138b44:	df000017 	ldw	fp,0(sp)
81138b48:	dec00204 	addi	sp,sp,8
81138b4c:	f800283a 	ret

81138b50 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81138b50:	defffa04 	addi	sp,sp,-24
81138b54:	de00012e 	bgeu	sp,et,81138b5c <altera_avalon_uart_write_fd+0xc>
81138b58:	003b68fa 	trap	3
81138b5c:	dfc00515 	stw	ra,20(sp)
81138b60:	df000415 	stw	fp,16(sp)
81138b64:	df000404 	addi	fp,sp,16
81138b68:	e13ffd15 	stw	r4,-12(fp)
81138b6c:	e17ffe15 	stw	r5,-8(fp)
81138b70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81138b74:	e0bffd17 	ldw	r2,-12(fp)
81138b78:	10800017 	ldw	r2,0(r2)
81138b7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81138b80:	e0bffc17 	ldw	r2,-16(fp)
81138b84:	10c00a04 	addi	r3,r2,40
81138b88:	e0bffd17 	ldw	r2,-12(fp)
81138b8c:	10800217 	ldw	r2,8(r2)
81138b90:	100f883a 	mov	r7,r2
81138b94:	e1bfff17 	ldw	r6,-4(fp)
81138b98:	e17ffe17 	ldw	r5,-8(fp)
81138b9c:	1809883a 	mov	r4,r3
81138ba0:	113945c0 	call	8113945c <altera_avalon_uart_write>
      fd->fd_flags);
}
81138ba4:	e037883a 	mov	sp,fp
81138ba8:	dfc00117 	ldw	ra,4(sp)
81138bac:	df000017 	ldw	fp,0(sp)
81138bb0:	dec00204 	addi	sp,sp,8
81138bb4:	f800283a 	ret

81138bb8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81138bb8:	defffc04 	addi	sp,sp,-16
81138bbc:	de00012e 	bgeu	sp,et,81138bc4 <altera_avalon_uart_close_fd+0xc>
81138bc0:	003b68fa 	trap	3
81138bc4:	dfc00315 	stw	ra,12(sp)
81138bc8:	df000215 	stw	fp,8(sp)
81138bcc:	df000204 	addi	fp,sp,8
81138bd0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81138bd4:	e0bfff17 	ldw	r2,-4(fp)
81138bd8:	10800017 	ldw	r2,0(r2)
81138bdc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
81138be0:	e0bffe17 	ldw	r2,-8(fp)
81138be4:	10c00a04 	addi	r3,r2,40
81138be8:	e0bfff17 	ldw	r2,-4(fp)
81138bec:	10800217 	ldw	r2,8(r2)
81138bf0:	100b883a 	mov	r5,r2
81138bf4:	1809883a 	mov	r4,r3
81138bf8:	11391080 	call	81139108 <altera_avalon_uart_close>
}
81138bfc:	e037883a 	mov	sp,fp
81138c00:	dfc00117 	ldw	ra,4(sp)
81138c04:	df000017 	ldw	fp,0(sp)
81138c08:	dec00204 	addi	sp,sp,8
81138c0c:	f800283a 	ret

81138c10 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
81138c10:	defff304 	addi	sp,sp,-52
81138c14:	de00012e 	bgeu	sp,et,81138c1c <altera_avalon_uart_init+0xc>
81138c18:	003b68fa 	trap	3
81138c1c:	dfc00c15 	stw	ra,48(sp)
81138c20:	df000b15 	stw	fp,44(sp)
81138c24:	df000b04 	addi	fp,sp,44
81138c28:	e13ffd15 	stw	r4,-12(fp)
81138c2c:	e17ffe15 	stw	r5,-8(fp)
81138c30:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
81138c34:	e0bffd17 	ldw	r2,-12(fp)
81138c38:	10800017 	ldw	r2,0(r2)
81138c3c:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81138c40:	e0bffd17 	ldw	r2,-12(fp)
81138c44:	10800704 	addi	r2,r2,28
81138c48:	e0bffa15 	stw	r2,-24(fp)
81138c4c:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81138c50:	e0bffb0b 	ldhu	r2,-20(fp)
81138c54:	e0fffc84 	addi	r3,fp,-14
81138c58:	180b883a 	mov	r5,r3
81138c5c:	1009883a 	mov	r4,r2
81138c60:	112bf200 	call	8112bf20 <OSFlagCreate>
81138c64:	1007883a 	mov	r3,r2
81138c68:	e0bffa17 	ldw	r2,-24(fp)
81138c6c:	10c00015 	stw	r3,0(r2)
  return err;
81138c70:	e0bffc83 	ldbu	r2,-14(fp)
81138c74:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81138c78:	1000241e 	bne	r2,zero,81138d0c <altera_avalon_uart_init+0xfc>
81138c7c:	e0bffd17 	ldw	r2,-12(fp)
81138c80:	10800804 	addi	r2,r2,32
81138c84:	e0bff715 	stw	r2,-36(fp)
81138c88:	00800044 	movi	r2,1
81138c8c:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81138c90:	e0bffb8b 	ldhu	r2,-18(fp)
81138c94:	1009883a 	mov	r4,r2
81138c98:	112fe7c0 	call	8112fe7c <OSSemCreate>
81138c9c:	1007883a 	mov	r3,r2
81138ca0:	e0bff717 	ldw	r2,-36(fp)
81138ca4:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81138ca8:	e0bff717 	ldw	r2,-36(fp)
81138cac:	10800017 	ldw	r2,0(r2)
81138cb0:	10000226 	beq	r2,zero,81138cbc <altera_avalon_uart_init+0xac>
81138cb4:	0005883a 	mov	r2,zero
81138cb8:	00000106 	br	81138cc0 <altera_avalon_uart_init+0xb0>
81138cbc:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81138cc0:	1000121e 	bne	r2,zero,81138d0c <altera_avalon_uart_init+0xfc>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
81138cc4:	e0bffd17 	ldw	r2,-12(fp)
81138cc8:	10800904 	addi	r2,r2,36
81138ccc:	e0bff815 	stw	r2,-32(fp)
81138cd0:	00800044 	movi	r2,1
81138cd4:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81138cd8:	e0bffc0b 	ldhu	r2,-16(fp)
81138cdc:	1009883a 	mov	r4,r2
81138ce0:	112fe7c0 	call	8112fe7c <OSSemCreate>
81138ce4:	1007883a 	mov	r3,r2
81138ce8:	e0bff817 	ldw	r2,-32(fp)
81138cec:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81138cf0:	e0bff817 	ldw	r2,-32(fp)
81138cf4:	10800017 	ldw	r2,0(r2)
81138cf8:	10000226 	beq	r2,zero,81138d04 <altera_avalon_uart_init+0xf4>
81138cfc:	0005883a 	mov	r2,zero
81138d00:	00000106 	br	81138d08 <altera_avalon_uart_init+0xf8>
81138d04:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81138d08:	10000226 	beq	r2,zero,81138d14 <altera_avalon_uart_init+0x104>
81138d0c:	00800044 	movi	r2,1
81138d10:	00000106 	br	81138d18 <altera_avalon_uart_init+0x108>
81138d14:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81138d18:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
81138d1c:	e0bff917 	ldw	r2,-28(fp)
81138d20:	10000f1e 	bne	r2,zero,81138d60 <altera_avalon_uart_init+0x150>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
81138d24:	e0bffd17 	ldw	r2,-12(fp)
81138d28:	00c32004 	movi	r3,3200
81138d2c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
81138d30:	e0bff617 	ldw	r2,-40(fp)
81138d34:	10800304 	addi	r2,r2,12
81138d38:	e0fffd17 	ldw	r3,-12(fp)
81138d3c:	18c00117 	ldw	r3,4(r3)
81138d40:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
81138d44:	d8000015 	stw	zero,0(sp)
81138d48:	e1fffd17 	ldw	r7,-12(fp)
81138d4c:	01a04534 	movhi	r6,33044
81138d50:	31a35e04 	addi	r6,r6,-29320
81138d54:	e17fff17 	ldw	r5,-4(fp)
81138d58:	e13ffe17 	ldw	r4,-8(fp)
81138d5c:	113bd380 	call	8113bd38 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
81138d60:	0001883a 	nop
81138d64:	e037883a 	mov	sp,fp
81138d68:	dfc00117 	ldw	ra,4(sp)
81138d6c:	df000017 	ldw	fp,0(sp)
81138d70:	dec00204 	addi	sp,sp,8
81138d74:	f800283a 	ret

81138d78 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81138d78:	defffa04 	addi	sp,sp,-24
81138d7c:	de00012e 	bgeu	sp,et,81138d84 <altera_avalon_uart_irq+0xc>
81138d80:	003b68fa 	trap	3
81138d84:	dfc00515 	stw	ra,20(sp)
81138d88:	df000415 	stw	fp,16(sp)
81138d8c:	df000404 	addi	fp,sp,16
81138d90:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
81138d94:	e0bfff17 	ldw	r2,-4(fp)
81138d98:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
81138d9c:	e0bffc17 	ldw	r2,-16(fp)
81138da0:	10800017 	ldw	r2,0(r2)
81138da4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
81138da8:	e0bffd17 	ldw	r2,-12(fp)
81138dac:	10800204 	addi	r2,r2,8
81138db0:	10800037 	ldwio	r2,0(r2)
81138db4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
81138db8:	e0bffd17 	ldw	r2,-12(fp)
81138dbc:	10800204 	addi	r2,r2,8
81138dc0:	0007883a 	mov	r3,zero
81138dc4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81138dc8:	e0bffd17 	ldw	r2,-12(fp)
81138dcc:	10800204 	addi	r2,r2,8
81138dd0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81138dd4:	e0bffe17 	ldw	r2,-8(fp)
81138dd8:	1080200c 	andi	r2,r2,128
81138ddc:	10000326 	beq	r2,zero,81138dec <altera_avalon_uart_irq+0x74>
  {
    altera_avalon_uart_rxirq(sp, status);
81138de0:	e17ffe17 	ldw	r5,-8(fp)
81138de4:	e13ffc17 	ldw	r4,-16(fp)
81138de8:	1138e1c0 	call	81138e1c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
81138dec:	e0bffe17 	ldw	r2,-8(fp)
81138df0:	1081100c 	andi	r2,r2,1088
81138df4:	10000326 	beq	r2,zero,81138e04 <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
81138df8:	e17ffe17 	ldw	r5,-8(fp)
81138dfc:	e13ffc17 	ldw	r4,-16(fp)
81138e00:	1138f5c0 	call	81138f5c <altera_avalon_uart_txirq>
  }
  

}
81138e04:	0001883a 	nop
81138e08:	e037883a 	mov	sp,fp
81138e0c:	dfc00117 	ldw	ra,4(sp)
81138e10:	df000017 	ldw	fp,0(sp)
81138e14:	dec00204 	addi	sp,sp,8
81138e18:	f800283a 	ret

81138e1c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81138e1c:	defff904 	addi	sp,sp,-28
81138e20:	de00012e 	bgeu	sp,et,81138e28 <altera_avalon_uart_rxirq+0xc>
81138e24:	003b68fa 	trap	3
81138e28:	dfc00615 	stw	ra,24(sp)
81138e2c:	df000515 	stw	fp,20(sp)
81138e30:	df000504 	addi	fp,sp,20
81138e34:	e13ffe15 	stw	r4,-8(fp)
81138e38:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
81138e3c:	e0bfff17 	ldw	r2,-4(fp)
81138e40:	108000cc 	andi	r2,r2,3
81138e44:	10003f1e 	bne	r2,zero,81138f44 <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
81138e48:	e0bffe17 	ldw	r2,-8(fp)
81138e4c:	10c00317 	ldw	r3,12(r2)
81138e50:	e0bffe17 	ldw	r2,-8(fp)
81138e54:	10800217 	ldw	r2,8(r2)
81138e58:	1880121e 	bne	r3,r2,81138ea4 <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
81138e5c:	e0bffe17 	ldw	r2,-8(fp)
81138e60:	10800717 	ldw	r2,28(r2)
81138e64:	e0bffc15 	stw	r2,-16(fp)
81138e68:	00800044 	movi	r2,1
81138e6c:	e0bffd0d 	sth	r2,-12(fp)
81138e70:	00800044 	movi	r2,1
81138e74:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81138e78:	d0a07a03 	ldbu	r2,-32280(gp)
81138e7c:	10803fcc 	andi	r2,r2,255
81138e80:	10000826 	beq	r2,zero,81138ea4 <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
81138e84:	e0bffd0b 	ldhu	r2,-12(fp)
81138e88:	e0fffd83 	ldbu	r3,-10(fp)
81138e8c:	e13ffdc4 	addi	r4,fp,-9
81138e90:	200f883a 	mov	r7,r4
81138e94:	180d883a 	mov	r6,r3
81138e98:	100b883a 	mov	r5,r2
81138e9c:	e13ffc17 	ldw	r4,-16(fp)
81138ea0:	112cb2c0 	call	8112cb2c <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81138ea4:	e0bffe17 	ldw	r2,-8(fp)
81138ea8:	10800317 	ldw	r2,12(r2)
81138eac:	10800044 	addi	r2,r2,1
81138eb0:	10800fcc 	andi	r2,r2,63
81138eb4:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81138eb8:	e0bffe17 	ldw	r2,-8(fp)
81138ebc:	10800317 	ldw	r2,12(r2)
81138ec0:	e0fffe17 	ldw	r3,-8(fp)
81138ec4:	18c00017 	ldw	r3,0(r3)
81138ec8:	18c00037 	ldwio	r3,0(r3)
81138ecc:	1809883a 	mov	r4,r3
81138ed0:	e0fffe17 	ldw	r3,-8(fp)
81138ed4:	1885883a 	add	r2,r3,r2
81138ed8:	10800a04 	addi	r2,r2,40
81138edc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
81138ee0:	e0bffe17 	ldw	r2,-8(fp)
81138ee4:	e0fffb17 	ldw	r3,-20(fp)
81138ee8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81138eec:	e0bffe17 	ldw	r2,-8(fp)
81138ef0:	10800317 	ldw	r2,12(r2)
81138ef4:	10800044 	addi	r2,r2,1
81138ef8:	10800fcc 	andi	r2,r2,63
81138efc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81138f00:	e0bffe17 	ldw	r2,-8(fp)
81138f04:	10c00217 	ldw	r3,8(r2)
81138f08:	e0bffb17 	ldw	r2,-20(fp)
81138f0c:	18800e1e 	bne	r3,r2,81138f48 <altera_avalon_uart_rxirq+0x12c>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81138f10:	e0bffe17 	ldw	r2,-8(fp)
81138f14:	10c00117 	ldw	r3,4(r2)
81138f18:	00bfdfc4 	movi	r2,-129
81138f1c:	1886703a 	and	r3,r3,r2
81138f20:	e0bffe17 	ldw	r2,-8(fp)
81138f24:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
81138f28:	e0bffe17 	ldw	r2,-8(fp)
81138f2c:	10800017 	ldw	r2,0(r2)
81138f30:	10800304 	addi	r2,r2,12
81138f34:	e0fffe17 	ldw	r3,-8(fp)
81138f38:	18c00117 	ldw	r3,4(r3)
81138f3c:	10c00035 	stwio	r3,0(r2)
81138f40:	00000106 	br	81138f48 <altera_avalon_uart_rxirq+0x12c>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
81138f44:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
81138f48:	e037883a 	mov	sp,fp
81138f4c:	dfc00117 	ldw	ra,4(sp)
81138f50:	df000017 	ldw	fp,0(sp)
81138f54:	dec00204 	addi	sp,sp,8
81138f58:	f800283a 	ret

81138f5c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81138f5c:	defffa04 	addi	sp,sp,-24
81138f60:	de00012e 	bgeu	sp,et,81138f68 <altera_avalon_uart_txirq+0xc>
81138f64:	003b68fa 	trap	3
81138f68:	dfc00515 	stw	ra,20(sp)
81138f6c:	df000415 	stw	fp,16(sp)
81138f70:	df000404 	addi	fp,sp,16
81138f74:	e13ffe15 	stw	r4,-8(fp)
81138f78:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
81138f7c:	e0bffe17 	ldw	r2,-8(fp)
81138f80:	10c00417 	ldw	r3,16(r2)
81138f84:	e0bffe17 	ldw	r2,-8(fp)
81138f88:	10800517 	ldw	r2,20(r2)
81138f8c:	18804726 	beq	r3,r2,811390ac <altera_avalon_uart_txirq+0x150>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81138f90:	e0bffe17 	ldw	r2,-8(fp)
81138f94:	10800617 	ldw	r2,24(r2)
81138f98:	1080008c 	andi	r2,r2,2
81138f9c:	10000326 	beq	r2,zero,81138fac <altera_avalon_uart_txirq+0x50>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81138fa0:	e0bfff17 	ldw	r2,-4(fp)
81138fa4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81138fa8:	10003226 	beq	r2,zero,81139074 <altera_avalon_uart_txirq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
81138fac:	e0bffe17 	ldw	r2,-8(fp)
81138fb0:	10c00417 	ldw	r3,16(r2)
81138fb4:	e0bffe17 	ldw	r2,-8(fp)
81138fb8:	10800517 	ldw	r2,20(r2)
81138fbc:	10800044 	addi	r2,r2,1
81138fc0:	10800fcc 	andi	r2,r2,63
81138fc4:	1880121e 	bne	r3,r2,81139010 <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
81138fc8:	e0bffe17 	ldw	r2,-8(fp)
81138fcc:	10800717 	ldw	r2,28(r2)
81138fd0:	e0bffc15 	stw	r2,-16(fp)
81138fd4:	00800084 	movi	r2,2
81138fd8:	e0bffd0d 	sth	r2,-12(fp)
81138fdc:	00800044 	movi	r2,1
81138fe0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81138fe4:	d0a07a03 	ldbu	r2,-32280(gp)
81138fe8:	10803fcc 	andi	r2,r2,255
81138fec:	10000826 	beq	r2,zero,81139010 <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
81138ff0:	e0bffd0b 	ldhu	r2,-12(fp)
81138ff4:	e0fffd83 	ldbu	r3,-10(fp)
81138ff8:	e13ffdc4 	addi	r4,fp,-9
81138ffc:	200f883a 	mov	r7,r4
81139000:	180d883a 	mov	r6,r3
81139004:	100b883a 	mov	r5,r2
81139008:	e13ffc17 	ldw	r4,-16(fp)
8113900c:	112cb2c0 	call	8112cb2c <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81139010:	e0bffe17 	ldw	r2,-8(fp)
81139014:	10800017 	ldw	r2,0(r2)
81139018:	10800104 	addi	r2,r2,4
8113901c:	e0fffe17 	ldw	r3,-8(fp)
81139020:	18c00417 	ldw	r3,16(r3)
81139024:	e13ffe17 	ldw	r4,-8(fp)
81139028:	20c7883a 	add	r3,r4,r3
8113902c:	18c01a04 	addi	r3,r3,104
81139030:	18c00003 	ldbu	r3,0(r3)
81139034:	18c03fcc 	andi	r3,r3,255
81139038:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
8113903c:	e0bffe17 	ldw	r2,-8(fp)
81139040:	10800417 	ldw	r2,16(r2)
81139044:	10800044 	addi	r2,r2,1
81139048:	e0fffe17 	ldw	r3,-8(fp)
8113904c:	18800415 	stw	r2,16(r3)
81139050:	10c00fcc 	andi	r3,r2,63
81139054:	e0bffe17 	ldw	r2,-8(fp)
81139058:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8113905c:	e0bffe17 	ldw	r2,-8(fp)
81139060:	10800117 	ldw	r2,4(r2)
81139064:	10c01014 	ori	r3,r2,64
81139068:	e0bffe17 	ldw	r2,-8(fp)
8113906c:	10c00115 	stw	r3,4(r2)
81139070:	00000e06 	br	811390ac <altera_avalon_uart_txirq+0x150>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
81139074:	e0bffe17 	ldw	r2,-8(fp)
81139078:	10800017 	ldw	r2,0(r2)
8113907c:	10800204 	addi	r2,r2,8
81139080:	10800037 	ldwio	r2,0(r2)
81139084:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81139088:	e0bfff17 	ldw	r2,-4(fp)
8113908c:	1082000c 	andi	r2,r2,2048
81139090:	1000061e 	bne	r2,zero,811390ac <altera_avalon_uart_txirq+0x150>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81139094:	e0bffe17 	ldw	r2,-8(fp)
81139098:	10c00117 	ldw	r3,4(r2)
8113909c:	00bfefc4 	movi	r2,-65
811390a0:	1886703a 	and	r3,r3,r2
811390a4:	e0bffe17 	ldw	r2,-8(fp)
811390a8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
811390ac:	e0bffe17 	ldw	r2,-8(fp)
811390b0:	10c00417 	ldw	r3,16(r2)
811390b4:	e0bffe17 	ldw	r2,-8(fp)
811390b8:	10800517 	ldw	r2,20(r2)
811390bc:	1880061e 	bne	r3,r2,811390d8 <altera_avalon_uart_txirq+0x17c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
811390c0:	e0bffe17 	ldw	r2,-8(fp)
811390c4:	10c00117 	ldw	r3,4(r2)
811390c8:	00beefc4 	movi	r2,-1089
811390cc:	1886703a 	and	r3,r3,r2
811390d0:	e0bffe17 	ldw	r2,-8(fp)
811390d4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811390d8:	e0bffe17 	ldw	r2,-8(fp)
811390dc:	10800017 	ldw	r2,0(r2)
811390e0:	10800304 	addi	r2,r2,12
811390e4:	e0fffe17 	ldw	r3,-8(fp)
811390e8:	18c00117 	ldw	r3,4(r3)
811390ec:	10c00035 	stwio	r3,0(r2)
}
811390f0:	0001883a 	nop
811390f4:	e037883a 	mov	sp,fp
811390f8:	dfc00117 	ldw	ra,4(sp)
811390fc:	df000017 	ldw	fp,0(sp)
81139100:	dec00204 	addi	sp,sp,8
81139104:	f800283a 	ret

81139108 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81139108:	defffd04 	addi	sp,sp,-12
8113910c:	de00012e 	bgeu	sp,et,81139114 <altera_avalon_uart_close+0xc>
81139110:	003b68fa 	trap	3
81139114:	df000215 	stw	fp,8(sp)
81139118:	df000204 	addi	fp,sp,8
8113911c:	e13ffe15 	stw	r4,-8(fp)
81139120:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81139124:	00000506 	br	8113913c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81139128:	e0bfff17 	ldw	r2,-4(fp)
8113912c:	1090000c 	andi	r2,r2,16384
81139130:	10000226 	beq	r2,zero,8113913c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
81139134:	00bffd44 	movi	r2,-11
81139138:	00000606 	br	81139154 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8113913c:	e0bffe17 	ldw	r2,-8(fp)
81139140:	10c00417 	ldw	r3,16(r2)
81139144:	e0bffe17 	ldw	r2,-8(fp)
81139148:	10800517 	ldw	r2,20(r2)
8113914c:	18bff61e 	bne	r3,r2,81139128 <__reset+0xfb119128>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81139150:	0005883a 	mov	r2,zero
}
81139154:	e037883a 	mov	sp,fp
81139158:	df000017 	ldw	fp,0(sp)
8113915c:	dec00104 	addi	sp,sp,4
81139160:	f800283a 	ret

81139164 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81139164:	defffe04 	addi	sp,sp,-8
81139168:	de00012e 	bgeu	sp,et,81139170 <alt_get_errno+0xc>
8113916c:	003b68fa 	trap	3
81139170:	dfc00115 	stw	ra,4(sp)
81139174:	df000015 	stw	fp,0(sp)
81139178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113917c:	d0a01017 	ldw	r2,-32704(gp)
81139180:	10000326 	beq	r2,zero,81139190 <alt_get_errno+0x2c>
81139184:	d0a01017 	ldw	r2,-32704(gp)
81139188:	103ee83a 	callr	r2
8113918c:	00000106 	br	81139194 <alt_get_errno+0x30>
81139190:	d0a06104 	addi	r2,gp,-32380
}
81139194:	e037883a 	mov	sp,fp
81139198:	dfc00117 	ldw	ra,4(sp)
8113919c:	df000017 	ldw	fp,0(sp)
811391a0:	dec00204 	addi	sp,sp,8
811391a4:	f800283a 	ret

811391a8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
811391a8:	deffec04 	addi	sp,sp,-80
811391ac:	de00012e 	bgeu	sp,et,811391b4 <altera_avalon_uart_read+0xc>
811391b0:	003b68fa 	trap	3
811391b4:	dfc01315 	stw	ra,76(sp)
811391b8:	df001215 	stw	fp,72(sp)
811391bc:	df001204 	addi	fp,sp,72
811391c0:	e13ffc15 	stw	r4,-16(fp)
811391c4:	e17ffd15 	stw	r5,-12(fp)
811391c8:	e1bffe15 	stw	r6,-8(fp)
811391cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
811391d0:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
811391d4:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
811391d8:	e0bfff17 	ldw	r2,-4(fp)
811391dc:	1090000c 	andi	r2,r2,16384
811391e0:	1005003a 	cmpeq	r2,r2,zero
811391e4:	10803fcc 	andi	r2,r2,255
811391e8:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
811391ec:	e0bffc17 	ldw	r2,-16(fp)
811391f0:	10800817 	ldw	r2,32(r2)
811391f4:	e0bff815 	stw	r2,-32(fp)
811391f8:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
811391fc:	e0bff90b 	ldhu	r2,-28(fp)
81139200:	e0fffb44 	addi	r3,fp,-19
81139204:	180d883a 	mov	r6,r3
81139208:	100b883a 	mov	r5,r2
8113920c:	e13ff817 	ldw	r4,-32(fp)
81139210:	11301a40 	call	811301a4 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81139214:	00001306 	br	81139264 <altera_avalon_uart_read+0xbc>
    {
      count++;
81139218:	e0bff017 	ldw	r2,-64(fp)
8113921c:	10800044 	addi	r2,r2,1
81139220:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
81139224:	e0bffd17 	ldw	r2,-12(fp)
81139228:	10c00044 	addi	r3,r2,1
8113922c:	e0fffd15 	stw	r3,-12(fp)
81139230:	e0fffc17 	ldw	r3,-16(fp)
81139234:	18c00217 	ldw	r3,8(r3)
81139238:	e13ffc17 	ldw	r4,-16(fp)
8113923c:	20c7883a 	add	r3,r4,r3
81139240:	18c00a04 	addi	r3,r3,40
81139244:	18c00003 	ldbu	r3,0(r3)
81139248:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8113924c:	e0bffc17 	ldw	r2,-16(fp)
81139250:	10800217 	ldw	r2,8(r2)
81139254:	10800044 	addi	r2,r2,1
81139258:	10c00fcc 	andi	r3,r2,63
8113925c:	e0bffc17 	ldw	r2,-16(fp)
81139260:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81139264:	e0fff017 	ldw	r3,-64(fp)
81139268:	e0bffe17 	ldw	r2,-8(fp)
8113926c:	1880050e 	bge	r3,r2,81139284 <altera_avalon_uart_read+0xdc>
81139270:	e0bffc17 	ldw	r2,-16(fp)
81139274:	10c00217 	ldw	r3,8(r2)
81139278:	e0bffc17 	ldw	r2,-16(fp)
8113927c:	10800317 	ldw	r2,12(r2)
81139280:	18bfe51e 	bne	r3,r2,81139218 <__reset+0xfb119218>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
81139284:	e0bff017 	ldw	r2,-64(fp)
81139288:	10003a1e 	bne	r2,zero,81139374 <altera_avalon_uart_read+0x1cc>
8113928c:	e0bffc17 	ldw	r2,-16(fp)
81139290:	10c00217 	ldw	r3,8(r2)
81139294:	e0bffc17 	ldw	r2,-16(fp)
81139298:	10800317 	ldw	r2,12(r2)
8113929c:	1880351e 	bne	r3,r2,81139374 <altera_avalon_uart_read+0x1cc>
    {
      if (!block)
811392a0:	e0bff117 	ldw	r2,-60(fp)
811392a4:	1000071e 	bne	r2,zero,811392c4 <altera_avalon_uart_read+0x11c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
811392a8:	11391640 	call	81139164 <alt_get_errno>
811392ac:	1007883a 	mov	r3,r2
811392b0:	008002c4 	movi	r2,11
811392b4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
811392b8:	00800044 	movi	r2,1
811392bc:	e0bfef05 	stb	r2,-68(fp)
        break;
811392c0:	00003006 	br	81139384 <altera_avalon_uart_read+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811392c4:	0005303a 	rdctl	r2,status
811392c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811392cc:	e0fff517 	ldw	r3,-44(fp)
811392d0:	00bfff84 	movi	r2,-2
811392d4:	1884703a 	and	r2,r3,r2
811392d8:	1001703a 	wrctl	status,r2
  
  return context;
811392dc:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
811392e0:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
811392e4:	e0bffc17 	ldw	r2,-16(fp)
811392e8:	10800117 	ldw	r2,4(r2)
811392ec:	10c02014 	ori	r3,r2,128
811392f0:	e0bffc17 	ldw	r2,-16(fp)
811392f4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811392f8:	e0bffc17 	ldw	r2,-16(fp)
811392fc:	10800017 	ldw	r2,0(r2)
81139300:	10800304 	addi	r2,r2,12
81139304:	e0fffc17 	ldw	r3,-16(fp)
81139308:	18c00117 	ldw	r3,4(r3)
8113930c:	10c00035 	stwio	r3,0(r2)
81139310:	e0bff417 	ldw	r2,-48(fp)
81139314:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139318:	e0bff617 	ldw	r2,-40(fp)
8113931c:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
81139320:	e0bffc17 	ldw	r2,-16(fp)
81139324:	10800717 	ldw	r2,28(r2)
81139328:	e0bff215 	stw	r2,-56(fp)
8113932c:	00800044 	movi	r2,1
81139330:	e0bff98d 	sth	r2,-26(fp)
81139334:	00bfe0c4 	movi	r2,-125
81139338:	e0bffa05 	stb	r2,-24(fp)
8113933c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81139340:	d0a07a03 	ldbu	r2,-32280(gp)
81139344:	10803fcc 	andi	r2,r2,255
81139348:	10000a26 	beq	r2,zero,81139374 <altera_avalon_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113934c:	e0fff98b 	ldhu	r3,-26(fp)
81139350:	e13ffa03 	ldbu	r4,-24(fp)
81139354:	e17ffa8b 	ldhu	r5,-22(fp)
81139358:	e0bffb04 	addi	r2,fp,-20
8113935c:	d8800015 	stw	r2,0(sp)
81139360:	280f883a 	mov	r7,r5
81139364:	200d883a 	mov	r6,r4
81139368:	180b883a 	mov	r5,r3
8113936c:	e13ff217 	ldw	r4,-56(fp)
81139370:	112c5040 	call	8112c504 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
81139374:	e0bff017 	ldw	r2,-64(fp)
81139378:	1000021e 	bne	r2,zero,81139384 <altera_avalon_uart_read+0x1dc>
8113937c:	e0bffe17 	ldw	r2,-8(fp)
81139380:	103fb81e 	bne	r2,zero,81139264 <__reset+0xfb119264>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81139384:	e0bffc17 	ldw	r2,-16(fp)
81139388:	10800817 	ldw	r2,32(r2)
8113938c:	1009883a 	mov	r4,r2
81139390:	113052c0 	call	8113052c <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139394:	0005303a 	rdctl	r2,status
81139398:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113939c:	e0fff717 	ldw	r3,-36(fp)
811393a0:	00bfff84 	movi	r2,-2
811393a4:	1884703a 	and	r2,r3,r2
811393a8:	1001703a 	wrctl	status,r2
  
  return context;
811393ac:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
811393b0:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
811393b4:	e0bffc17 	ldw	r2,-16(fp)
811393b8:	10800117 	ldw	r2,4(r2)
811393bc:	10c02014 	ori	r3,r2,128
811393c0:	e0bffc17 	ldw	r2,-16(fp)
811393c4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811393c8:	e0bffc17 	ldw	r2,-16(fp)
811393cc:	10800017 	ldw	r2,0(r2)
811393d0:	10800304 	addi	r2,r2,12
811393d4:	e0fffc17 	ldw	r3,-16(fp)
811393d8:	18c00117 	ldw	r3,4(r3)
811393dc:	10c00035 	stwio	r3,0(r2)
811393e0:	e0bff417 	ldw	r2,-48(fp)
811393e4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811393e8:	e0bff317 	ldw	r2,-52(fp)
811393ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
811393f0:	e0bfef03 	ldbu	r2,-68(fp)
811393f4:	10000226 	beq	r2,zero,81139400 <altera_avalon_uart_read+0x258>
    return -EWOULDBLOCK;
811393f8:	00bffd44 	movi	r2,-11
811393fc:	00000106 	br	81139404 <altera_avalon_uart_read+0x25c>
  }
  else {
    return count;
81139400:	e0bff017 	ldw	r2,-64(fp)
  }
}
81139404:	e037883a 	mov	sp,fp
81139408:	dfc00117 	ldw	ra,4(sp)
8113940c:	df000017 	ldw	fp,0(sp)
81139410:	dec00204 	addi	sp,sp,8
81139414:	f800283a 	ret

81139418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81139418:	defffe04 	addi	sp,sp,-8
8113941c:	de00012e 	bgeu	sp,et,81139424 <alt_get_errno+0xc>
81139420:	003b68fa 	trap	3
81139424:	dfc00115 	stw	ra,4(sp)
81139428:	df000015 	stw	fp,0(sp)
8113942c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81139430:	d0a01017 	ldw	r2,-32704(gp)
81139434:	10000326 	beq	r2,zero,81139444 <alt_get_errno+0x2c>
81139438:	d0a01017 	ldw	r2,-32704(gp)
8113943c:	103ee83a 	callr	r2
81139440:	00000106 	br	81139448 <alt_get_errno+0x30>
81139444:	d0a06104 	addi	r2,gp,-32380
}
81139448:	e037883a 	mov	sp,fp
8113944c:	dfc00117 	ldw	ra,4(sp)
81139450:	df000017 	ldw	fp,0(sp)
81139454:	dec00204 	addi	sp,sp,8
81139458:	f800283a 	ret

8113945c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8113945c:	deffec04 	addi	sp,sp,-80
81139460:	de00012e 	bgeu	sp,et,81139468 <altera_avalon_uart_write+0xc>
81139464:	003b68fa 	trap	3
81139468:	dfc01315 	stw	ra,76(sp)
8113946c:	df001215 	stw	fp,72(sp)
81139470:	df001204 	addi	fp,sp,72
81139474:	e13ffc15 	stw	r4,-16(fp)
81139478:	e17ffd15 	stw	r5,-12(fp)
8113947c:	e1bffe15 	stw	r6,-8(fp)
81139480:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
81139484:	e0bffe17 	ldw	r2,-8(fp)
81139488:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8113948c:	e0bfff17 	ldw	r2,-4(fp)
81139490:	1090000c 	andi	r2,r2,16384
81139494:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
81139498:	e0bffc17 	ldw	r2,-16(fp)
8113949c:	10800917 	ldw	r2,36(r2)
811394a0:	e0bff815 	stw	r2,-32(fp)
811394a4:	e03ff90d 	sth	zero,-28(fp)
811394a8:	e0bff90b 	ldhu	r2,-28(fp)
811394ac:	e0fffb44 	addi	r3,fp,-19
811394b0:	180d883a 	mov	r6,r3
811394b4:	100b883a 	mov	r5,r2
811394b8:	e13ff817 	ldw	r4,-32(fp)
811394bc:	11301a40 	call	811301a4 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
811394c0:	00005106 	br	81139608 <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
811394c4:	e0bffc17 	ldw	r2,-16(fp)
811394c8:	10800517 	ldw	r2,20(r2)
811394cc:	10800044 	addi	r2,r2,1
811394d0:	10800fcc 	andi	r2,r2,63
811394d4:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
811394d8:	e0bffc17 	ldw	r2,-16(fp)
811394dc:	10c00417 	ldw	r3,16(r2)
811394e0:	e0bff217 	ldw	r2,-56(fp)
811394e4:	1880371e 	bne	r3,r2,811395c4 <altera_avalon_uart_write+0x168>
    {
      if (no_block)
811394e8:	e0bff017 	ldw	r2,-64(fp)
811394ec:	10000526 	beq	r2,zero,81139504 <altera_avalon_uart_write+0xa8>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
811394f0:	11394180 	call	81139418 <alt_get_errno>
811394f4:	1007883a 	mov	r3,r2
811394f8:	008002c4 	movi	r2,11
811394fc:	18800015 	stw	r2,0(r3)
        break;
81139500:	00004306 	br	81139610 <altera_avalon_uart_write+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139504:	0005303a 	rdctl	r2,status
81139508:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113950c:	e0fff517 	ldw	r3,-44(fp)
81139510:	00bfff84 	movi	r2,-2
81139514:	1884703a 	and	r2,r3,r2
81139518:	1001703a 	wrctl	status,r2
  
  return context;
8113951c:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
81139520:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81139524:	e0bffc17 	ldw	r2,-16(fp)
81139528:	10800117 	ldw	r2,4(r2)
8113952c:	10c11014 	ori	r3,r2,1088
81139530:	e0bffc17 	ldw	r2,-16(fp)
81139534:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81139538:	e0bffc17 	ldw	r2,-16(fp)
8113953c:	10800017 	ldw	r2,0(r2)
81139540:	10800304 	addi	r2,r2,12
81139544:	e0fffc17 	ldw	r3,-16(fp)
81139548:	18c00117 	ldw	r3,4(r3)
8113954c:	10c00035 	stwio	r3,0(r2)
81139550:	e0bff417 	ldw	r2,-48(fp)
81139554:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139558:	e0bff117 	ldw	r2,-60(fp)
8113955c:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
81139560:	e0bffc17 	ldw	r2,-16(fp)
81139564:	10800717 	ldw	r2,28(r2)
81139568:	e0bff315 	stw	r2,-52(fp)
8113956c:	00800084 	movi	r2,2
81139570:	e0bff98d 	sth	r2,-26(fp)
81139574:	00bfe0c4 	movi	r2,-125
81139578:	e0bffa05 	stb	r2,-24(fp)
8113957c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81139580:	d0a07a03 	ldbu	r2,-32280(gp)
81139584:	10803fcc 	andi	r2,r2,255
81139588:	10000a26 	beq	r2,zero,811395b4 <altera_avalon_uart_write+0x158>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113958c:	e0fff98b 	ldhu	r3,-26(fp)
81139590:	e13ffa03 	ldbu	r4,-24(fp)
81139594:	e17ffa8b 	ldhu	r5,-22(fp)
81139598:	e0bffb04 	addi	r2,fp,-20
8113959c:	d8800015 	stw	r2,0(sp)
811395a0:	280f883a 	mov	r7,r5
811395a4:	200d883a 	mov	r6,r4
811395a8:	180b883a 	mov	r5,r3
811395ac:	e13ff317 	ldw	r4,-52(fp)
811395b0:	112c5040 	call	8112c504 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
811395b4:	e0bffc17 	ldw	r2,-16(fp)
811395b8:	10c00417 	ldw	r3,16(r2)
811395bc:	e0bff217 	ldw	r2,-56(fp)
811395c0:	18bfe726 	beq	r3,r2,81139560 <__reset+0xfb119560>
      }
    }

    count--;
811395c4:	e0bfef17 	ldw	r2,-68(fp)
811395c8:	10bfffc4 	addi	r2,r2,-1
811395cc:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
811395d0:	e0bffc17 	ldw	r2,-16(fp)
811395d4:	10c00517 	ldw	r3,20(r2)
811395d8:	e0bffd17 	ldw	r2,-12(fp)
811395dc:	11000044 	addi	r4,r2,1
811395e0:	e13ffd15 	stw	r4,-12(fp)
811395e4:	10800003 	ldbu	r2,0(r2)
811395e8:	1009883a 	mov	r4,r2
811395ec:	e0bffc17 	ldw	r2,-16(fp)
811395f0:	10c5883a 	add	r2,r2,r3
811395f4:	10801a04 	addi	r2,r2,104
811395f8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
811395fc:	e0bffc17 	ldw	r2,-16(fp)
81139600:	e0fff217 	ldw	r3,-56(fp)
81139604:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81139608:	e0bfef17 	ldw	r2,-68(fp)
8113960c:	103fad1e 	bne	r2,zero,811394c4 <__reset+0xfb1194c4>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
81139610:	e0bffc17 	ldw	r2,-16(fp)
81139614:	10800917 	ldw	r2,36(r2)
81139618:	1009883a 	mov	r4,r2
8113961c:	113052c0 	call	8113052c <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139620:	0005303a 	rdctl	r2,status
81139624:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139628:	e0fff717 	ldw	r3,-36(fp)
8113962c:	00bfff84 	movi	r2,-2
81139630:	1884703a 	and	r2,r3,r2
81139634:	1001703a 	wrctl	status,r2
  
  return context;
81139638:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8113963c:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81139640:	e0bffc17 	ldw	r2,-16(fp)
81139644:	10800117 	ldw	r2,4(r2)
81139648:	10c11014 	ori	r3,r2,1088
8113964c:	e0bffc17 	ldw	r2,-16(fp)
81139650:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81139654:	e0bffc17 	ldw	r2,-16(fp)
81139658:	10800017 	ldw	r2,0(r2)
8113965c:	10800304 	addi	r2,r2,12
81139660:	e0fffc17 	ldw	r3,-16(fp)
81139664:	18c00117 	ldw	r3,4(r3)
81139668:	10c00035 	stwio	r3,0(r2)
8113966c:	e0bff417 	ldw	r2,-48(fp)
81139670:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139674:	e0bff617 	ldw	r2,-40(fp)
81139678:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8113967c:	e0fffe17 	ldw	r3,-8(fp)
81139680:	e0bfef17 	ldw	r2,-68(fp)
81139684:	1885c83a 	sub	r2,r3,r2
}
81139688:	e037883a 	mov	sp,fp
8113968c:	dfc00117 	ldw	ra,4(sp)
81139690:	df000017 	ldw	fp,0(sp)
81139694:	dec00204 	addi	sp,sp,8
81139698:	f800283a 	ret

8113969c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113969c:	defffe04 	addi	sp,sp,-8
811396a0:	de00012e 	bgeu	sp,et,811396a8 <alt_get_errno+0xc>
811396a4:	003b68fa 	trap	3
811396a8:	dfc00115 	stw	ra,4(sp)
811396ac:	df000015 	stw	fp,0(sp)
811396b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811396b4:	d0a01017 	ldw	r2,-32704(gp)
811396b8:	10000326 	beq	r2,zero,811396c8 <alt_get_errno+0x2c>
811396bc:	d0a01017 	ldw	r2,-32704(gp)
811396c0:	103ee83a 	callr	r2
811396c4:	00000106 	br	811396cc <alt_get_errno+0x30>
811396c8:	d0a06104 	addi	r2,gp,-32380
}
811396cc:	e037883a 	mov	sp,fp
811396d0:	dfc00117 	ldw	ra,4(sp)
811396d4:	df000017 	ldw	fp,0(sp)
811396d8:	dec00204 	addi	sp,sp,8
811396dc:	f800283a 	ret

811396e0 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
811396e0:	defffc04 	addi	sp,sp,-16
811396e4:	de00012e 	bgeu	sp,et,811396ec <alt_msgdma_write_standard_descriptor+0xc>
811396e8:	003b68fa 	trap	3
811396ec:	df000315 	stw	fp,12(sp)
811396f0:	df000304 	addi	fp,sp,12
811396f4:	e13ffd15 	stw	r4,-12(fp)
811396f8:	e17ffe15 	stw	r5,-8(fp)
811396fc:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81139700:	e0bffd17 	ldw	r2,-12(fp)
81139704:	10800037 	ldwio	r2,0(r2)
81139708:	1080010c 	andi	r2,r2,4
8113970c:	10000226 	beq	r2,zero,81139718 <alt_msgdma_write_standard_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81139710:	00bff904 	movi	r2,-28
81139714:	00001506 	br	8113976c <alt_msgdma_write_standard_descriptor+0x8c>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81139718:	e0bfff17 	ldw	r2,-4(fp)
8113971c:	10800017 	ldw	r2,0(r2)
81139720:	1007883a 	mov	r3,r2
81139724:	e0bffe17 	ldw	r2,-8(fp)
81139728:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8113972c:	e0bffe17 	ldw	r2,-8(fp)
81139730:	10800104 	addi	r2,r2,4
81139734:	e0ffff17 	ldw	r3,-4(fp)
81139738:	18c00117 	ldw	r3,4(r3)
8113973c:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81139740:	e0bffe17 	ldw	r2,-8(fp)
81139744:	10800204 	addi	r2,r2,8
81139748:	e0ffff17 	ldw	r3,-4(fp)
8113974c:	18c00217 	ldw	r3,8(r3)
81139750:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81139754:	e0bffe17 	ldw	r2,-8(fp)
81139758:	10800304 	addi	r2,r2,12
8113975c:	e0ffff17 	ldw	r3,-4(fp)
81139760:	18c00317 	ldw	r3,12(r3)
81139764:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81139768:	0005883a 	mov	r2,zero
}
8113976c:	e037883a 	mov	sp,fp
81139770:	df000017 	ldw	fp,0(sp)
81139774:	dec00104 	addi	sp,sp,4
81139778:	f800283a 	ret

8113977c <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8113977c:	defffc04 	addi	sp,sp,-16
81139780:	de00012e 	bgeu	sp,et,81139788 <alt_msgdma_write_extended_descriptor+0xc>
81139784:	003b68fa 	trap	3
81139788:	df000315 	stw	fp,12(sp)
8113978c:	df000304 	addi	fp,sp,12
81139790:	e13ffd15 	stw	r4,-12(fp)
81139794:	e17ffe15 	stw	r5,-8(fp)
81139798:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8113979c:	e0bffd17 	ldw	r2,-12(fp)
811397a0:	10800037 	ldwio	r2,0(r2)
811397a4:	1080010c 	andi	r2,r2,4
811397a8:	10000226 	beq	r2,zero,811397b4 <alt_msgdma_write_extended_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
811397ac:	00bff904 	movi	r2,-28
811397b0:	00003b06 	br	811398a0 <alt_msgdma_write_extended_descriptor+0x124>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
811397b4:	e0bfff17 	ldw	r2,-4(fp)
811397b8:	10800017 	ldw	r2,0(r2)
811397bc:	1007883a 	mov	r3,r2
811397c0:	e0bffe17 	ldw	r2,-8(fp)
811397c4:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
811397c8:	e0bffe17 	ldw	r2,-8(fp)
811397cc:	10800104 	addi	r2,r2,4
811397d0:	e0ffff17 	ldw	r3,-4(fp)
811397d4:	18c00117 	ldw	r3,4(r3)
811397d8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
811397dc:	e0bffe17 	ldw	r2,-8(fp)
811397e0:	10800204 	addi	r2,r2,8
811397e4:	e0ffff17 	ldw	r3,-4(fp)
811397e8:	18c00217 	ldw	r3,8(r3)
811397ec:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
811397f0:	e0bffe17 	ldw	r2,-8(fp)
811397f4:	10800304 	addi	r2,r2,12
811397f8:	e0ffff17 	ldw	r3,-4(fp)
811397fc:	18c0030b 	ldhu	r3,12(r3)
81139800:	18ffffcc 	andi	r3,r3,65535
81139804:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
81139808:	e0bffe17 	ldw	r2,-8(fp)
8113980c:	10800384 	addi	r2,r2,14
81139810:	e0ffff17 	ldw	r3,-4(fp)
81139814:	18c00383 	ldbu	r3,14(r3)
81139818:	18c03fcc 	andi	r3,r3,255
8113981c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81139820:	e0bffe17 	ldw	r2,-8(fp)
81139824:	108003c4 	addi	r2,r2,15
81139828:	e0ffff17 	ldw	r3,-4(fp)
8113982c:	18c003c3 	ldbu	r3,15(r3)
81139830:	18c03fcc 	andi	r3,r3,255
81139834:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81139838:	e0bffe17 	ldw	r2,-8(fp)
8113983c:	10800404 	addi	r2,r2,16
81139840:	e0ffff17 	ldw	r3,-4(fp)
81139844:	18c0040b 	ldhu	r3,16(r3)
81139848:	18ffffcc 	andi	r3,r3,65535
8113984c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81139850:	e0bffe17 	ldw	r2,-8(fp)
81139854:	10800484 	addi	r2,r2,18
81139858:	e0ffff17 	ldw	r3,-4(fp)
8113985c:	18c0048b 	ldhu	r3,18(r3)
81139860:	18ffffcc 	andi	r3,r3,65535
81139864:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
81139868:	e0bffe17 	ldw	r2,-8(fp)
8113986c:	10800504 	addi	r2,r2,20
81139870:	0007883a 	mov	r3,zero
81139874:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81139878:	e0bffe17 	ldw	r2,-8(fp)
8113987c:	10800604 	addi	r2,r2,24
81139880:	0007883a 	mov	r3,zero
81139884:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81139888:	e0bffe17 	ldw	r2,-8(fp)
8113988c:	10800704 	addi	r2,r2,28
81139890:	e0ffff17 	ldw	r3,-4(fp)
81139894:	18c00717 	ldw	r3,28(r3)
81139898:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8113989c:	0005883a 	mov	r2,zero
}
811398a0:	e037883a 	mov	sp,fp
811398a4:	df000017 	ldw	fp,0(sp)
811398a8:	dec00104 	addi	sp,sp,4
811398ac:	f800283a 	ret

811398b0 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
811398b0:	defff804 	addi	sp,sp,-32
811398b4:	de00012e 	bgeu	sp,et,811398bc <alt_msgdma_irq+0xc>
811398b8:	003b68fa 	trap	3
811398bc:	dfc00715 	stw	ra,28(sp)
811398c0:	df000615 	stw	fp,24(sp)
811398c4:	df000604 	addi	fp,sp,24
811398c8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
811398cc:	e0bfff17 	ldw	r2,-4(fp)
811398d0:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
811398d4:	e0bffa17 	ldw	r2,-24(fp)
811398d8:	10801783 	ldbu	r2,94(r2)
811398dc:	10803fcc 	andi	r2,r2,255
811398e0:	10001126 	beq	r2,zero,81139928 <alt_msgdma_irq+0x78>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
811398e4:	e0bffa17 	ldw	r2,-24(fp)
811398e8:	10800617 	ldw	r2,24(r2)
811398ec:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
811398f0:	1007883a 	mov	r3,r2
811398f4:	00bffdc4 	movi	r2,-9
811398f8:	1884703a 	and	r2,r3,r2
811398fc:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81139900:	e0bffa17 	ldw	r2,-24(fp)
81139904:	10800617 	ldw	r2,24(r2)
81139908:	e0fffb17 	ldw	r3,-20(fp)
8113990c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81139910:	e0bffa17 	ldw	r2,-24(fp)
81139914:	10800617 	ldw	r2,24(r2)
81139918:	10800404 	addi	r2,r2,16
8113991c:	00c00044 	movi	r3,1
81139920:	10c00035 	stwio	r3,0(r2)
81139924:	00001106 	br	8113996c <alt_msgdma_irq+0xbc>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81139928:	e0bffa17 	ldw	r2,-24(fp)
8113992c:	10800317 	ldw	r2,12(r2)
81139930:	10800104 	addi	r2,r2,4
81139934:	10800037 	ldwio	r2,0(r2)
81139938:	1007883a 	mov	r3,r2
8113993c:	00bffbc4 	movi	r2,-17
81139940:	1884703a 	and	r2,r3,r2
81139944:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81139948:	e0bffa17 	ldw	r2,-24(fp)
8113994c:	10800317 	ldw	r2,12(r2)
81139950:	10800104 	addi	r2,r2,4
81139954:	e0fffb17 	ldw	r3,-20(fp)
81139958:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8113995c:	e0bffa17 	ldw	r2,-24(fp)
81139960:	10800317 	ldw	r2,12(r2)
81139964:	00c08004 	movi	r3,512
81139968:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8113996c:	e0bffa17 	ldw	r2,-24(fp)
81139970:	10800b17 	ldw	r2,44(r2)
81139974:	10001226 	beq	r2,zero,811399c0 <alt_msgdma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139978:	0005303a 	rdctl	r2,status
8113997c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139980:	e0fffd17 	ldw	r3,-12(fp)
81139984:	00bfff84 	movi	r2,-2
81139988:	1884703a 	and	r2,r3,r2
8113998c:	1001703a 	wrctl	status,r2
  
  return context;
81139990:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
81139994:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
81139998:	e0bffa17 	ldw	r2,-24(fp)
8113999c:	10800b17 	ldw	r2,44(r2)
811399a0:	e0fffa17 	ldw	r3,-24(fp)
811399a4:	18c00c17 	ldw	r3,48(r3)
811399a8:	1809883a 	mov	r4,r3
811399ac:	103ee83a 	callr	r2
811399b0:	e0bffc17 	ldw	r2,-16(fp)
811399b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811399b8:	e0bffe17 	ldw	r2,-8(fp)
811399bc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
811399c0:	e0bffa17 	ldw	r2,-24(fp)
811399c4:	10801783 	ldbu	r2,94(r2)
811399c8:	10803fcc 	andi	r2,r2,255
811399cc:	10000a26 	beq	r2,zero,811399f8 <alt_msgdma_irq+0x148>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
811399d0:	e0bffa17 	ldw	r2,-24(fp)
811399d4:	10800617 	ldw	r2,24(r2)
811399d8:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
811399dc:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
811399e0:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
811399e4:	e0bffa17 	ldw	r2,-24(fp)
811399e8:	10800617 	ldw	r2,24(r2)
811399ec:	e0fffb17 	ldw	r3,-20(fp)
811399f0:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
811399f4:	00000c06 	br	81139a28 <alt_msgdma_irq+0x178>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
811399f8:	e0bffa17 	ldw	r2,-24(fp)
811399fc:	10800317 	ldw	r2,12(r2)
81139a00:	10800104 	addi	r2,r2,4
81139a04:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81139a08:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81139a0c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81139a10:	e0bffa17 	ldw	r2,-24(fp)
81139a14:	10800317 	ldw	r2,12(r2)
81139a18:	10800104 	addi	r2,r2,4
81139a1c:	e0fffb17 	ldw	r3,-20(fp)
81139a20:	10c00035 	stwio	r3,0(r2)
    }

    return;
81139a24:	0001883a 	nop
}
81139a28:	e037883a 	mov	sp,fp
81139a2c:	dfc00117 	ldw	ra,4(sp)
81139a30:	df000017 	ldw	fp,0(sp)
81139a34:	dec00204 	addi	sp,sp,8
81139a38:	f800283a 	ret

81139a3c <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81139a3c:	defffb04 	addi	sp,sp,-20
81139a40:	de00012e 	bgeu	sp,et,81139a48 <alt_msgdma_construct_standard_descriptor+0xc>
81139a44:	003b68fa 	trap	3
81139a48:	df000415 	stw	fp,16(sp)
81139a4c:	df000404 	addi	fp,sp,16
81139a50:	e13ffc15 	stw	r4,-16(fp)
81139a54:	e17ffd15 	stw	r5,-12(fp)
81139a58:	e1bffe15 	stw	r6,-8(fp)
81139a5c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81139a60:	e0bffc17 	ldw	r2,-16(fp)
81139a64:	10c01217 	ldw	r3,72(r2)
81139a68:	e0800117 	ldw	r2,4(fp)
81139a6c:	18800436 	bltu	r3,r2,81139a80 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
81139a70:	e0bffc17 	ldw	r2,-16(fp)
81139a74:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81139a78:	10803fcc 	andi	r2,r2,255
81139a7c:	10000226 	beq	r2,zero,81139a88 <alt_msgdma_construct_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81139a80:	00bffa84 	movi	r2,-22
81139a84:	00000e06 	br	81139ac0 <alt_msgdma_construct_standard_descriptor+0x84>
    }
    descriptor->read_address = read_address;
81139a88:	e0bffd17 	ldw	r2,-12(fp)
81139a8c:	e0fffe17 	ldw	r3,-8(fp)
81139a90:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81139a94:	e0bffd17 	ldw	r2,-12(fp)
81139a98:	e0ffff17 	ldw	r3,-4(fp)
81139a9c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81139aa0:	e0bffd17 	ldw	r2,-12(fp)
81139aa4:	e0c00117 	ldw	r3,4(fp)
81139aa8:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81139aac:	e0800217 	ldw	r2,8(fp)
81139ab0:	10e00034 	orhi	r3,r2,32768
81139ab4:	e0bffd17 	ldw	r2,-12(fp)
81139ab8:	10c00315 	stw	r3,12(r2)
    
    return 0;
81139abc:	0005883a 	mov	r2,zero
}
81139ac0:	e037883a 	mov	sp,fp
81139ac4:	df000017 	ldw	fp,0(sp)
81139ac8:	dec00104 	addi	sp,sp,4
81139acc:	f800283a 	ret

81139ad0 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81139ad0:	defff604 	addi	sp,sp,-40
81139ad4:	de00012e 	bgeu	sp,et,81139adc <alt_msgdma_construct_extended_descriptor+0xc>
81139ad8:	003b68fa 	trap	3
81139adc:	df000915 	stw	fp,36(sp)
81139ae0:	df000904 	addi	fp,sp,36
81139ae4:	e13ff715 	stw	r4,-36(fp)
81139ae8:	e17ff815 	stw	r5,-32(fp)
81139aec:	e1bff915 	stw	r6,-28(fp)
81139af0:	e1fffa15 	stw	r7,-24(fp)
81139af4:	e1800317 	ldw	r6,12(fp)
81139af8:	e1400417 	ldw	r5,16(fp)
81139afc:	e1000517 	ldw	r4,20(fp)
81139b00:	e0c00617 	ldw	r3,24(fp)
81139b04:	e0800717 	ldw	r2,28(fp)
81139b08:	e1bffb0d 	sth	r6,-20(fp)
81139b0c:	e17ffc05 	stb	r5,-16(fp)
81139b10:	e13ffd05 	stb	r4,-12(fp)
81139b14:	e0fffe0d 	sth	r3,-8(fp)
81139b18:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
81139b1c:	e0bff717 	ldw	r2,-36(fp)
81139b20:	10c01217 	ldw	r3,72(r2)
81139b24:	e0800117 	ldw	r2,4(fp)
81139b28:	18801936 	bltu	r3,r2,81139b90 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
81139b2c:	e13ff717 	ldw	r4,-36(fp)
81139b30:	20801317 	ldw	r2,76(r4)
81139b34:	20c01417 	ldw	r3,80(r4)
81139b38:	e13ffe0b 	ldhu	r4,-8(fp)
81139b3c:	213fffcc 	andi	r4,r4,65535
81139b40:	2015883a 	mov	r10,r4
81139b44:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81139b48:	1ac01136 	bltu	r3,r11,81139b90 <alt_msgdma_construct_extended_descriptor+0xc0>
81139b4c:	58c0011e 	bne	r11,r3,81139b54 <alt_msgdma_construct_extended_descriptor+0x84>
81139b50:	12800f36 	bltu	r2,r10,81139b90 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81139b54:	e13ff717 	ldw	r4,-36(fp)
81139b58:	20801317 	ldw	r2,76(r4)
81139b5c:	20c01417 	ldw	r3,80(r4)
81139b60:	e13fff0b 	ldhu	r4,-4(fp)
81139b64:	213fffcc 	andi	r4,r4,65535
81139b68:	2011883a 	mov	r8,r4
81139b6c:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81139b70:	1a400736 	bltu	r3,r9,81139b90 <alt_msgdma_construct_extended_descriptor+0xc0>
81139b74:	48c0011e 	bne	r9,r3,81139b7c <alt_msgdma_construct_extended_descriptor+0xac>
81139b78:	12000536 	bltu	r2,r8,81139b90 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81139b7c:	e0bff717 	ldw	r2,-36(fp)
81139b80:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81139b84:	10803fcc 	andi	r2,r2,255
81139b88:	10800060 	cmpeqi	r2,r2,1
81139b8c:	1000021e 	bne	r2,zero,81139b98 <alt_msgdma_construct_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81139b90:	00bffa84 	movi	r2,-22
81139b94:	00002106 	br	81139c1c <alt_msgdma_construct_extended_descriptor+0x14c>
    }
    
    descriptor->read_address_low = read_address;
81139b98:	e0bff817 	ldw	r2,-32(fp)
81139b9c:	e0fff917 	ldw	r3,-28(fp)
81139ba0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
81139ba4:	e0bff817 	ldw	r2,-32(fp)
81139ba8:	e0fffa17 	ldw	r3,-24(fp)
81139bac:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81139bb0:	e0bff817 	ldw	r2,-32(fp)
81139bb4:	e0c00117 	ldw	r3,4(fp)
81139bb8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81139bbc:	e0bff817 	ldw	r2,-32(fp)
81139bc0:	e0fffb0b 	ldhu	r3,-20(fp)
81139bc4:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
81139bc8:	e0bff817 	ldw	r2,-32(fp)
81139bcc:	e0fffc03 	ldbu	r3,-16(fp)
81139bd0:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
81139bd4:	e0bff817 	ldw	r2,-32(fp)
81139bd8:	e0fffd03 	ldbu	r3,-12(fp)
81139bdc:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
81139be0:	e0bff817 	ldw	r2,-32(fp)
81139be4:	e0fffe0b 	ldhu	r3,-8(fp)
81139be8:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81139bec:	e0bff817 	ldw	r2,-32(fp)
81139bf0:	e0ffff0b 	ldhu	r3,-4(fp)
81139bf4:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81139bf8:	e0bff817 	ldw	r2,-32(fp)
81139bfc:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81139c00:	e0bff817 	ldw	r2,-32(fp)
81139c04:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81139c08:	e0800217 	ldw	r2,8(fp)
81139c0c:	10e00034 	orhi	r3,r2,32768
81139c10:	e0bff817 	ldw	r2,-32(fp)
81139c14:	10c00715 	stw	r3,28(r2)

  return 0 ;
81139c18:	0005883a 	mov	r2,zero

}
81139c1c:	e037883a 	mov	sp,fp
81139c20:	df000017 	ldw	fp,0(sp)
81139c24:	dec00104 	addi	sp,sp,4
81139c28:	f800283a 	ret

81139c2c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81139c2c:	deffee04 	addi	sp,sp,-72
81139c30:	de00012e 	bgeu	sp,et,81139c38 <alt_msgdma_descriptor_async_transfer+0xc>
81139c34:	003b68fa 	trap	3
81139c38:	dfc01115 	stw	ra,68(sp)
81139c3c:	df001015 	stw	fp,64(sp)
81139c40:	df001004 	addi	fp,sp,64
81139c44:	e13ffd15 	stw	r4,-12(fp)
81139c48:	e17ffe15 	stw	r5,-8(fp)
81139c4c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81139c50:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
81139c54:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81139c58:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139c5c:	e0bffd17 	ldw	r2,-12(fp)
81139c60:	10800317 	ldw	r2,12(r2)
81139c64:	10800204 	addi	r2,r2,8
81139c68:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81139c6c:	10bfffcc 	andi	r2,r2,65535
81139c70:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139c74:	e0bffd17 	ldw	r2,-12(fp)
81139c78:	10800317 	ldw	r2,12(r2)
81139c7c:	10800204 	addi	r2,r2,8
81139c80:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81139c84:	1004d43a 	srli	r2,r2,16
81139c88:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81139c8c:	e0bffd17 	ldw	r2,-12(fp)
81139c90:	10800917 	ldw	r2,36(r2)
81139c94:	e0fff417 	ldw	r3,-48(fp)
81139c98:	1880042e 	bgeu	r3,r2,81139cac <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81139c9c:	e0bffd17 	ldw	r2,-12(fp)
81139ca0:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81139ca4:	e0fff317 	ldw	r3,-52(fp)
81139ca8:	18800236 	bltu	r3,r2,81139cb4 <alt_msgdma_descriptor_async_transfer+0x88>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
81139cac:	00bff904 	movi	r2,-28
81139cb0:	0000a906 	br	81139f58 <alt_msgdma_descriptor_async_transfer+0x32c>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
81139cb4:	e0bffd17 	ldw	r2,-12(fp)
81139cb8:	10801817 	ldw	r2,96(r2)
81139cbc:	e0bff615 	stw	r2,-40(fp)
81139cc0:	e03ffc0d 	sth	zero,-16(fp)
81139cc4:	e0bffc0b 	ldhu	r2,-16(fp)
81139cc8:	e0fffc84 	addi	r3,fp,-14
81139ccc:	180d883a 	mov	r6,r3
81139cd0:	100b883a 	mov	r5,r2
81139cd4:	e13ff617 	ldw	r4,-40(fp)
81139cd8:	11301a40 	call	811301a4 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81139cdc:	00800804 	movi	r2,32
81139ce0:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139ce4:	0005303a 	rdctl	r2,status
81139ce8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139cec:	e0fff717 	ldw	r3,-36(fp)
81139cf0:	00bfff84 	movi	r2,-2
81139cf4:	1884703a 	and	r2,r3,r2
81139cf8:	1001703a 	wrctl	status,r2
  
  return context;
81139cfc:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81139d00:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81139d04:	e0bffd17 	ldw	r2,-12(fp)
81139d08:	10800317 	ldw	r2,12(r2)
81139d0c:	10800104 	addi	r2,r2,4
81139d10:	e0fff117 	ldw	r3,-60(fp)
81139d14:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81139d18:	e0bffd17 	ldw	r2,-12(fp)
81139d1c:	10800317 	ldw	r2,12(r2)
81139d20:	e0fffd17 	ldw	r3,-12(fp)
81139d24:	18c00317 	ldw	r3,12(r3)
81139d28:	18c00037 	ldwio	r3,0(r3)
81139d2c:	10c00035 	stwio	r3,0(r2)
81139d30:	e0bff217 	ldw	r2,-56(fp)
81139d34:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139d38:	e0bffb17 	ldw	r2,-20(fp)
81139d3c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81139d40:	e0bffe17 	ldw	r2,-8(fp)
81139d44:	10001e26 	beq	r2,zero,81139dc0 <alt_msgdma_descriptor_async_transfer+0x194>
81139d48:	e0bfff17 	ldw	r2,-4(fp)
81139d4c:	10001c1e 	bne	r2,zero,81139dc0 <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81139d50:	00001106 	br	81139d98 <alt_msgdma_descriptor_async_transfer+0x16c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81139d54:	01000044 	movi	r4,1
81139d58:	11278680 	call	81127868 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81139d5c:	e0bff00b 	ldhu	r2,-64(fp)
81139d60:	1084e230 	cmpltui	r2,r2,5000
81139d64:	1000091e 	bne	r2,zero,81139d8c <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
81139d68:	01204534 	movhi	r4,33044
81139d6c:	2102ab04 	addi	r4,r4,2732
81139d70:	113c1500 	call	8113c150 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81139d74:	e0bffd17 	ldw	r2,-12(fp)
81139d78:	10801817 	ldw	r2,96(r2)
81139d7c:	1009883a 	mov	r4,r2
81139d80:	113052c0 	call	8113052c <OSSemPost>
				
                return -ETIME;
81139d84:	00bff084 	movi	r2,-62
81139d88:	00007306 	br	81139f58 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81139d8c:	e0bff00b 	ldhu	r2,-64(fp)
81139d90:	10800044 	addi	r2,r2,1
81139d94:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81139d98:	e0bffd17 	ldw	r2,-12(fp)
81139d9c:	10c00317 	ldw	r3,12(r2)
81139da0:	e0bffd17 	ldw	r2,-12(fp)
81139da4:	10800417 	ldw	r2,16(r2)
81139da8:	e1bffe17 	ldw	r6,-8(fp)
81139dac:	100b883a 	mov	r5,r2
81139db0:	1809883a 	mov	r4,r3
81139db4:	11396e00 	call	811396e0 <alt_msgdma_write_standard_descriptor>
81139db8:	103fe61e 	bne	r2,zero,81139d54 <__reset+0xfb119d54>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81139dbc:	00002706 	br	81139e5c <alt_msgdma_descriptor_async_transfer+0x230>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81139dc0:	e0bffe17 	ldw	r2,-8(fp)
81139dc4:	10001f1e 	bne	r2,zero,81139e44 <alt_msgdma_descriptor_async_transfer+0x218>
81139dc8:	e0bfff17 	ldw	r2,-4(fp)
81139dcc:	10001d26 	beq	r2,zero,81139e44 <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
81139dd0:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81139dd4:	00001106 	br	81139e1c <alt_msgdma_descriptor_async_transfer+0x1f0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81139dd8:	01000044 	movi	r4,1
81139ddc:	11278680 	call	81127868 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81139de0:	e0bff00b 	ldhu	r2,-64(fp)
81139de4:	1084e230 	cmpltui	r2,r2,5000
81139de8:	1000091e 	bne	r2,zero,81139e10 <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
81139dec:	01204534 	movhi	r4,33044
81139df0:	2102c104 	addi	r4,r4,2820
81139df4:	113c1500 	call	8113c150 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81139df8:	e0bffd17 	ldw	r2,-12(fp)
81139dfc:	10801817 	ldw	r2,96(r2)
81139e00:	1009883a 	mov	r4,r2
81139e04:	113052c0 	call	8113052c <OSSemPost>
				
                return -ETIME;
81139e08:	00bff084 	movi	r2,-62
81139e0c:	00005206 	br	81139f58 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81139e10:	e0bff00b 	ldhu	r2,-64(fp)
81139e14:	10800044 	addi	r2,r2,1
81139e18:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81139e1c:	e0bffd17 	ldw	r2,-12(fp)
81139e20:	10c00317 	ldw	r3,12(r2)
81139e24:	e0bffd17 	ldw	r2,-12(fp)
81139e28:	10800417 	ldw	r2,16(r2)
81139e2c:	e1bfff17 	ldw	r6,-4(fp)
81139e30:	100b883a 	mov	r5,r2
81139e34:	1809883a 	mov	r4,r3
81139e38:	113977c0 	call	8113977c <alt_msgdma_write_extended_descriptor>
81139e3c:	103fe61e 	bne	r2,zero,81139dd8 <__reset+0xfb119dd8>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81139e40:	00000606 	br	81139e5c <alt_msgdma_descriptor_async_transfer+0x230>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81139e44:	e0bffd17 	ldw	r2,-12(fp)
81139e48:	10801817 	ldw	r2,96(r2)
81139e4c:	1009883a 	mov	r4,r2
81139e50:	113052c0 	call	8113052c <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81139e54:	00bfffc4 	movi	r2,-1
81139e58:	00003f06 	br	81139f58 <alt_msgdma_descriptor_async_transfer+0x32c>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81139e5c:	e0bffd17 	ldw	r2,-12(fp)
81139e60:	10800b17 	ldw	r2,44(r2)
81139e64:	10001c26 	beq	r2,zero,81139ed8 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
81139e68:	e0bffd17 	ldw	r2,-12(fp)
81139e6c:	10c00d17 	ldw	r3,52(r2)
81139e70:	e0bff117 	ldw	r2,-60(fp)
81139e74:	1884b03a 	or	r2,r3,r2
81139e78:	10800514 	ori	r2,r2,20
81139e7c:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81139e80:	e0fff117 	ldw	r3,-60(fp)
81139e84:	00bff7c4 	movi	r2,-33
81139e88:	1884703a 	and	r2,r3,r2
81139e8c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139e90:	0005303a 	rdctl	r2,status
81139e94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139e98:	e0fff917 	ldw	r3,-28(fp)
81139e9c:	00bfff84 	movi	r2,-2
81139ea0:	1884703a 	and	r2,r3,r2
81139ea4:	1001703a 	wrctl	status,r2
  
  return context;
81139ea8:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
81139eac:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81139eb0:	e0bffd17 	ldw	r2,-12(fp)
81139eb4:	10800317 	ldw	r2,12(r2)
81139eb8:	10800104 	addi	r2,r2,4
81139ebc:	e0fff117 	ldw	r3,-60(fp)
81139ec0:	10c00035 	stwio	r3,0(r2)
81139ec4:	e0bff217 	ldw	r2,-56(fp)
81139ec8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139ecc:	e0bff517 	ldw	r2,-44(fp)
81139ed0:	1001703a 	wrctl	status,r2
81139ed4:	00001b06 	br	81139f44 <alt_msgdma_descriptor_async_transfer+0x318>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
81139ed8:	e0bffd17 	ldw	r2,-12(fp)
81139edc:	10c00d17 	ldw	r3,52(r2)
81139ee0:	e0bff117 	ldw	r2,-60(fp)
81139ee4:	1884b03a 	or	r2,r3,r2
81139ee8:	10800114 	ori	r2,r2,4
81139eec:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81139ef0:	e0fff117 	ldw	r3,-60(fp)
81139ef4:	00bff3c4 	movi	r2,-49
81139ef8:	1884703a 	and	r2,r3,r2
81139efc:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139f00:	0005303a 	rdctl	r2,status
81139f04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139f08:	e0fffa17 	ldw	r3,-24(fp)
81139f0c:	00bfff84 	movi	r2,-2
81139f10:	1884703a 	and	r2,r3,r2
81139f14:	1001703a 	wrctl	status,r2
  
  return context;
81139f18:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
81139f1c:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81139f20:	e0bffd17 	ldw	r2,-12(fp)
81139f24:	10800317 	ldw	r2,12(r2)
81139f28:	10800104 	addi	r2,r2,4
81139f2c:	e0fff117 	ldw	r3,-60(fp)
81139f30:	10c00035 	stwio	r3,0(r2)
81139f34:	e0bff217 	ldw	r2,-56(fp)
81139f38:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139f3c:	e0bff817 	ldw	r2,-32(fp)
81139f40:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
81139f44:	e0bffd17 	ldw	r2,-12(fp)
81139f48:	10801817 	ldw	r2,96(r2)
81139f4c:	1009883a 	mov	r4,r2
81139f50:	113052c0 	call	8113052c <OSSemPost>
    
    return 0;
81139f54:	0005883a 	mov	r2,zero
}
81139f58:	e037883a 	mov	sp,fp
81139f5c:	dfc00117 	ldw	ra,4(sp)
81139f60:	df000017 	ldw	fp,0(sp)
81139f64:	dec00204 	addi	sp,sp,8
81139f68:	f800283a 	ret

81139f6c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81139f6c:	deffee04 	addi	sp,sp,-72
81139f70:	de00012e 	bgeu	sp,et,81139f78 <alt_msgdma_descriptor_sync_transfer+0xc>
81139f74:	003b68fa 	trap	3
81139f78:	dfc01115 	stw	ra,68(sp)
81139f7c:	df001015 	stw	fp,64(sp)
81139f80:	df001004 	addi	fp,sp,64
81139f84:	e13ffd15 	stw	r4,-12(fp)
81139f88:	e17ffe15 	stw	r5,-8(fp)
81139f8c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81139f90:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
81139f94:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
81139f98:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
81139f9c:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139fa0:	e0bffd17 	ldw	r2,-12(fp)
81139fa4:	10800317 	ldw	r2,12(r2)
81139fa8:	10800204 	addi	r2,r2,8
81139fac:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81139fb0:	10bfffcc 	andi	r2,r2,65535
81139fb4:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139fb8:	e0bffd17 	ldw	r2,-12(fp)
81139fbc:	10800317 	ldw	r2,12(r2)
81139fc0:	10800204 	addi	r2,r2,8
81139fc4:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81139fc8:	1004d43a 	srli	r2,r2,16
81139fcc:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
81139fd0:	00807804 	movi	r2,480
81139fd4:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81139fd8:	00001906 	br	8113a040 <alt_msgdma_descriptor_sync_transfer+0xd4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81139fdc:	01000044 	movi	r4,1
81139fe0:	11278680 	call	81127868 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81139fe4:	e0bff10b 	ldhu	r2,-60(fp)
81139fe8:	1084e230 	cmpltui	r2,r2,5000
81139fec:	1000051e 	bne	r2,zero,8113a004 <alt_msgdma_descriptor_sync_transfer+0x98>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
81139ff0:	01204534 	movhi	r4,33044
81139ff4:	2102d704 	addi	r4,r4,2908
81139ff8:	113c1500 	call	8113c150 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81139ffc:	00bff084 	movi	r2,-62
8113a000:	0000d706 	br	8113a360 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;  
8113a004:	e0bff10b 	ldhu	r2,-60(fp)
8113a008:	10800044 	addi	r2,r2,1
8113a00c:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113a010:	e0bffd17 	ldw	r2,-12(fp)
8113a014:	10800317 	ldw	r2,12(r2)
8113a018:	10800204 	addi	r2,r2,8
8113a01c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8113a020:	10bfffcc 	andi	r2,r2,65535
8113a024:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113a028:	e0bffd17 	ldw	r2,-12(fp)
8113a02c:	10800317 	ldw	r2,12(r2)
8113a030:	10800204 	addi	r2,r2,8
8113a034:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8113a038:	1004d43a 	srli	r2,r2,16
8113a03c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113a040:	e0bffd17 	ldw	r2,-12(fp)
8113a044:	10800917 	ldw	r2,36(r2)
8113a048:	e0fff317 	ldw	r3,-52(fp)
8113a04c:	18bfe32e 	bgeu	r3,r2,81139fdc <__reset+0xfb119fdc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8113a050:	e0bffd17 	ldw	r2,-12(fp)
8113a054:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113a058:	e0fff217 	ldw	r3,-56(fp)
8113a05c:	18bfdf2e 	bgeu	r3,r2,81139fdc <__reset+0xfb119fdc>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
8113a060:	e0bffd17 	ldw	r2,-12(fp)
8113a064:	10801817 	ldw	r2,96(r2)
8113a068:	e0bff815 	stw	r2,-32(fp)
8113a06c:	e03ffc0d 	sth	zero,-16(fp)
8113a070:	e0bffc0b 	ldhu	r2,-16(fp)
8113a074:	e0fffc84 	addi	r3,fp,-14
8113a078:	180d883a 	mov	r6,r3
8113a07c:	100b883a 	mov	r5,r2
8113a080:	e13ff817 	ldw	r4,-32(fp)
8113a084:	11301a40 	call	811301a4 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a088:	0005303a 	rdctl	r2,status
8113a08c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a090:	e0fffb17 	ldw	r3,-20(fp)
8113a094:	00bfff84 	movi	r2,-2
8113a098:	1884703a 	and	r2,r3,r2
8113a09c:	1001703a 	wrctl	status,r2
  
  return context;
8113a0a0:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8113a0a4:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8113a0a8:	e0bffd17 	ldw	r2,-12(fp)
8113a0ac:	10800317 	ldw	r2,12(r2)
8113a0b0:	10800104 	addi	r2,r2,4
8113a0b4:	00c00804 	movi	r3,32
8113a0b8:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113a0bc:	e0bffd17 	ldw	r2,-12(fp)
8113a0c0:	10800317 	ldw	r2,12(r2)
8113a0c4:	e0fffd17 	ldw	r3,-12(fp)
8113a0c8:	18c00317 	ldw	r3,12(r3)
8113a0cc:	18c00037 	ldwio	r3,0(r3)
8113a0d0:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8113a0d4:	e0bffe17 	ldw	r2,-8(fp)
8113a0d8:	10001f26 	beq	r2,zero,8113a158 <alt_msgdma_descriptor_sync_transfer+0x1ec>
8113a0dc:	e0bfff17 	ldw	r2,-4(fp)
8113a0e0:	10001d1e 	bne	r2,zero,8113a158 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
8113a0e4:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113a0e8:	00001106 	br	8113a130 <alt_msgdma_descriptor_sync_transfer+0x1c4>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8113a0ec:	01000044 	movi	r4,1
8113a0f0:	11278680 	call	81127868 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113a0f4:	e0bff10b 	ldhu	r2,-60(fp)
8113a0f8:	1084e230 	cmpltui	r2,r2,5000
8113a0fc:	1000091e 	bne	r2,zero,8113a124 <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
8113a100:	01204534 	movhi	r4,33044
8113a104:	2102eb04 	addi	r4,r4,2988
8113a108:	113c1500 	call	8113c150 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113a10c:	e0bffd17 	ldw	r2,-12(fp)
8113a110:	10801817 	ldw	r2,96(r2)
8113a114:	1009883a 	mov	r4,r2
8113a118:	113052c0 	call	8113052c <OSSemPost>
				
                return -ETIME;
8113a11c:	00bff084 	movi	r2,-62
8113a120:	00008f06 	br	8113a360 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;    
8113a124:	e0bff10b 	ldhu	r2,-60(fp)
8113a128:	10800044 	addi	r2,r2,1
8113a12c:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113a130:	e0bffd17 	ldw	r2,-12(fp)
8113a134:	10c00317 	ldw	r3,12(r2)
8113a138:	e0bffd17 	ldw	r2,-12(fp)
8113a13c:	10800417 	ldw	r2,16(r2)
8113a140:	e1bffe17 	ldw	r6,-8(fp)
8113a144:	100b883a 	mov	r5,r2
8113a148:	1809883a 	mov	r4,r3
8113a14c:	11396e00 	call	811396e0 <alt_msgdma_write_standard_descriptor>
8113a150:	103fe61e 	bne	r2,zero,8113a0ec <__reset+0xfb11a0ec>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8113a154:	00002706 	br	8113a1f4 <alt_msgdma_descriptor_sync_transfer+0x288>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113a158:	e0bffe17 	ldw	r2,-8(fp)
8113a15c:	10001f1e 	bne	r2,zero,8113a1dc <alt_msgdma_descriptor_sync_transfer+0x270>
8113a160:	e0bfff17 	ldw	r2,-4(fp)
8113a164:	10001d26 	beq	r2,zero,8113a1dc <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
8113a168:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113a16c:	00001106 	br	8113a1b4 <alt_msgdma_descriptor_sync_transfer+0x248>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8113a170:	01000044 	movi	r4,1
8113a174:	11278680 	call	81127868 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113a178:	e0bff10b 	ldhu	r2,-60(fp)
8113a17c:	1084e230 	cmpltui	r2,r2,5000
8113a180:	1000091e 	bne	r2,zero,8113a1a8 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
8113a184:	01204534 	movhi	r4,33044
8113a188:	2102fc04 	addi	r4,r4,3056
8113a18c:	113c1500 	call	8113c150 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113a190:	e0bffd17 	ldw	r2,-12(fp)
8113a194:	10801817 	ldw	r2,96(r2)
8113a198:	1009883a 	mov	r4,r2
8113a19c:	113052c0 	call	8113052c <OSSemPost>
				
                return -ETIME;
8113a1a0:	00bff084 	movi	r2,-62
8113a1a4:	00006e06 	br	8113a360 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;
8113a1a8:	e0bff10b 	ldhu	r2,-60(fp)
8113a1ac:	10800044 	addi	r2,r2,1
8113a1b0:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113a1b4:	e0bffd17 	ldw	r2,-12(fp)
8113a1b8:	10c00317 	ldw	r3,12(r2)
8113a1bc:	e0bffd17 	ldw	r2,-12(fp)
8113a1c0:	10800417 	ldw	r2,16(r2)
8113a1c4:	e1bfff17 	ldw	r6,-4(fp)
8113a1c8:	100b883a 	mov	r5,r2
8113a1cc:	1809883a 	mov	r4,r3
8113a1d0:	113977c0 	call	8113977c <alt_msgdma_write_extended_descriptor>
8113a1d4:	103fe61e 	bne	r2,zero,8113a170 <__reset+0xfb11a170>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113a1d8:	00000606 	br	8113a1f4 <alt_msgdma_descriptor_sync_transfer+0x288>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8113a1dc:	e0bffd17 	ldw	r2,-12(fp)
8113a1e0:	10801817 	ldw	r2,96(r2)
8113a1e4:	1009883a 	mov	r4,r2
8113a1e8:	113052c0 	call	8113052c <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8113a1ec:	00bfffc4 	movi	r2,-1
8113a1f0:	00005b06 	br	8113a360 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8113a1f4:	e0bffd17 	ldw	r2,-12(fp)
8113a1f8:	10800317 	ldw	r2,12(r2)
8113a1fc:	10800104 	addi	r2,r2,4
8113a200:	e0fffd17 	ldw	r3,-12(fp)
8113a204:	19000d17 	ldw	r4,52(r3)
8113a208:	00fff2c4 	movi	r3,-53
8113a20c:	20c6703a 	and	r3,r4,r3
8113a210:	18c00114 	ori	r3,r3,4
8113a214:	10c00035 	stwio	r3,0(r2)
8113a218:	e0bff517 	ldw	r2,-44(fp)
8113a21c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a220:	e0bff717 	ldw	r2,-36(fp)
8113a224:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8113a228:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8113a22c:	e0bffd17 	ldw	r2,-12(fp)
8113a230:	10800317 	ldw	r2,12(r2)
8113a234:	10800037 	ldwio	r2,0(r2)
8113a238:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8113a23c:	00001506 	br	8113a294 <alt_msgdma_descriptor_sync_transfer+0x328>
    {
        alt_busy_sleep(1); /* delay 1us */
8113a240:	01000044 	movi	r4,1
8113a244:	11278680 	call	81127868 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113a248:	e0bff10b 	ldhu	r2,-60(fp)
8113a24c:	1084e230 	cmpltui	r2,r2,5000
8113a250:	1000091e 	bne	r2,zero,8113a278 <alt_msgdma_descriptor_sync_transfer+0x30c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8113a254:	01204534 	movhi	r4,33044
8113a258:	21030d04 	addi	r4,r4,3124
8113a25c:	113c1500 	call	8113c150 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
8113a260:	e0bffd17 	ldw	r2,-12(fp)
8113a264:	10801817 	ldw	r2,96(r2)
8113a268:	1009883a 	mov	r4,r2
8113a26c:	113052c0 	call	8113052c <OSSemPost>
			
            return -ETIME;
8113a270:	00bff084 	movi	r2,-62
8113a274:	00003a06 	br	8113a360 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;
8113a278:	e0bff10b 	ldhu	r2,-60(fp)
8113a27c:	10800044 	addi	r2,r2,1
8113a280:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8113a284:	e0bffd17 	ldw	r2,-12(fp)
8113a288:	10800317 	ldw	r2,12(r2)
8113a28c:	10800037 	ldwio	r2,0(r2)
8113a290:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8113a294:	e0fff017 	ldw	r3,-64(fp)
8113a298:	e0bff617 	ldw	r2,-40(fp)
8113a29c:	1884703a 	and	r2,r3,r2
8113a2a0:	1000031e 	bne	r2,zero,8113a2b0 <alt_msgdma_descriptor_sync_transfer+0x344>
8113a2a4:	e0bff017 	ldw	r2,-64(fp)
8113a2a8:	1080004c 	andi	r2,r2,1
8113a2ac:	103fe41e 	bne	r2,zero,8113a240 <__reset+0xfb11a240>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8113a2b0:	e0fff017 	ldw	r3,-64(fp)
8113a2b4:	e0bff617 	ldw	r2,-40(fp)
8113a2b8:	1884703a 	and	r2,r3,r2
8113a2bc:	10000626 	beq	r2,zero,8113a2d8 <alt_msgdma_descriptor_sync_transfer+0x36c>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8113a2c0:	e0bffd17 	ldw	r2,-12(fp)
8113a2c4:	10801817 	ldw	r2,96(r2)
8113a2c8:	1009883a 	mov	r4,r2
8113a2cc:	113052c0 	call	8113052c <OSSemPost>
		
        return error;
8113a2d0:	e0bff617 	ldw	r2,-40(fp)
8113a2d4:	00002206 	br	8113a360 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8113a2d8:	e0bffd17 	ldw	r2,-12(fp)
8113a2dc:	10800317 	ldw	r2,12(r2)
8113a2e0:	10800104 	addi	r2,r2,4
8113a2e4:	10800037 	ldwio	r2,0(r2)
8113a2e8:	10800814 	ori	r2,r2,32
8113a2ec:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a2f0:	0005303a 	rdctl	r2,status
8113a2f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a2f8:	e0fffa17 	ldw	r3,-24(fp)
8113a2fc:	00bfff84 	movi	r2,-2
8113a300:	1884703a 	and	r2,r3,r2
8113a304:	1001703a 	wrctl	status,r2
  
  return context;
8113a308:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8113a30c:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113a310:	e0bffd17 	ldw	r2,-12(fp)
8113a314:	10800317 	ldw	r2,12(r2)
8113a318:	10800104 	addi	r2,r2,4
8113a31c:	e0fff417 	ldw	r3,-48(fp)
8113a320:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113a324:	e0bffd17 	ldw	r2,-12(fp)
8113a328:	10800317 	ldw	r2,12(r2)
8113a32c:	e0fffd17 	ldw	r3,-12(fp)
8113a330:	18c00317 	ldw	r3,12(r3)
8113a334:	18c00037 	ldwio	r3,0(r3)
8113a338:	10c00035 	stwio	r3,0(r2)
8113a33c:	e0bff517 	ldw	r2,-44(fp)
8113a340:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a344:	e0bff917 	ldw	r2,-28(fp)
8113a348:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
8113a34c:	e0bffd17 	ldw	r2,-12(fp)
8113a350:	10801817 	ldw	r2,96(r2)
8113a354:	1009883a 	mov	r4,r2
8113a358:	113052c0 	call	8113052c <OSSemPost>
    
    return 0;
8113a35c:	0005883a 	mov	r2,zero

}
8113a360:	e037883a 	mov	sp,fp
8113a364:	dfc00117 	ldw	ra,4(sp)
8113a368:	df000017 	ldw	fp,0(sp)
8113a36c:	dec00204 	addi	sp,sp,8
8113a370:	f800283a 	ret

8113a374 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8113a374:	defff804 	addi	sp,sp,-32
8113a378:	de00012e 	bgeu	sp,et,8113a380 <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
8113a37c:	003b68fa 	trap	3
8113a380:	dfc00715 	stw	ra,28(sp)
8113a384:	df000615 	stw	fp,24(sp)
8113a388:	df000604 	addi	fp,sp,24
8113a38c:	e13ffc15 	stw	r4,-16(fp)
8113a390:	e17ffd15 	stw	r5,-12(fp)
8113a394:	e1bffe15 	stw	r6,-8(fp)
8113a398:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8113a39c:	e0800217 	ldw	r2,8(fp)
8113a3a0:	d8800115 	stw	r2,4(sp)
8113a3a4:	e0bfff17 	ldw	r2,-4(fp)
8113a3a8:	d8800015 	stw	r2,0(sp)
8113a3ac:	e1fffe17 	ldw	r7,-8(fp)
8113a3b0:	000d883a 	mov	r6,zero
8113a3b4:	e17ffd17 	ldw	r5,-12(fp)
8113a3b8:	e13ffc17 	ldw	r4,-16(fp)
8113a3bc:	1139a3c0 	call	81139a3c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8113a3c0:	e037883a 	mov	sp,fp
8113a3c4:	dfc00117 	ldw	ra,4(sp)
8113a3c8:	df000017 	ldw	fp,0(sp)
8113a3cc:	dec00204 	addi	sp,sp,8
8113a3d0:	f800283a 	ret

8113a3d4 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8113a3d4:	defff804 	addi	sp,sp,-32
8113a3d8:	de00012e 	bgeu	sp,et,8113a3e0 <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
8113a3dc:	003b68fa 	trap	3
8113a3e0:	dfc00715 	stw	ra,28(sp)
8113a3e4:	df000615 	stw	fp,24(sp)
8113a3e8:	df000604 	addi	fp,sp,24
8113a3ec:	e13ffc15 	stw	r4,-16(fp)
8113a3f0:	e17ffd15 	stw	r5,-12(fp)
8113a3f4:	e1bffe15 	stw	r6,-8(fp)
8113a3f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113a3fc:	e0800217 	ldw	r2,8(fp)
8113a400:	d8800115 	stw	r2,4(sp)
8113a404:	e0bfff17 	ldw	r2,-4(fp)
8113a408:	d8800015 	stw	r2,0(sp)
8113a40c:	000f883a 	mov	r7,zero
8113a410:	e1bffe17 	ldw	r6,-8(fp)
8113a414:	e17ffd17 	ldw	r5,-12(fp)
8113a418:	e13ffc17 	ldw	r4,-16(fp)
8113a41c:	1139a3c0 	call	81139a3c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8113a420:	e037883a 	mov	sp,fp
8113a424:	dfc00117 	ldw	ra,4(sp)
8113a428:	df000017 	ldw	fp,0(sp)
8113a42c:	dec00204 	addi	sp,sp,8
8113a430:	f800283a 	ret

8113a434 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113a434:	defff804 	addi	sp,sp,-32
8113a438:	de00012e 	bgeu	sp,et,8113a440 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
8113a43c:	003b68fa 	trap	3
8113a440:	dfc00715 	stw	ra,28(sp)
8113a444:	df000615 	stw	fp,24(sp)
8113a448:	df000604 	addi	fp,sp,24
8113a44c:	e13ffc15 	stw	r4,-16(fp)
8113a450:	e17ffd15 	stw	r5,-12(fp)
8113a454:	e1bffe15 	stw	r6,-8(fp)
8113a458:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113a45c:	e0800317 	ldw	r2,12(fp)
8113a460:	d8800115 	stw	r2,4(sp)
8113a464:	e0800217 	ldw	r2,8(fp)
8113a468:	d8800015 	stw	r2,0(sp)
8113a46c:	e1ffff17 	ldw	r7,-4(fp)
8113a470:	e1bffe17 	ldw	r6,-8(fp)
8113a474:	e17ffd17 	ldw	r5,-12(fp)
8113a478:	e13ffc17 	ldw	r4,-16(fp)
8113a47c:	1139a3c0 	call	81139a3c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8113a480:	e037883a 	mov	sp,fp
8113a484:	dfc00117 	ldw	ra,4(sp)
8113a488:	df000017 	ldw	fp,0(sp)
8113a48c:	dec00204 	addi	sp,sp,8
8113a490:	f800283a 	ret

8113a494 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
8113a494:	defff004 	addi	sp,sp,-64
8113a498:	de00012e 	bgeu	sp,et,8113a4a0 <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
8113a49c:	003b68fa 	trap	3
8113a4a0:	dfc00f15 	stw	ra,60(sp)
8113a4a4:	df000e15 	stw	fp,56(sp)
8113a4a8:	df000e04 	addi	fp,sp,56
8113a4ac:	e13ff915 	stw	r4,-28(fp)
8113a4b0:	e17ffa15 	stw	r5,-24(fp)
8113a4b4:	e1bffb15 	stw	r6,-20(fp)
8113a4b8:	e1fffc15 	stw	r7,-16(fp)
8113a4bc:	e1000317 	ldw	r4,12(fp)
8113a4c0:	e0c00417 	ldw	r3,16(fp)
8113a4c4:	e0800517 	ldw	r2,20(fp)
8113a4c8:	e13ffd0d 	sth	r4,-12(fp)
8113a4cc:	e0fffe05 	stb	r3,-8(fp)
8113a4d0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113a4d4:	e0bffd0b 	ldhu	r2,-12(fp)
8113a4d8:	e0fffe03 	ldbu	r3,-8(fp)
8113a4dc:	e13fff0b 	ldhu	r4,-4(fp)
8113a4e0:	d9000615 	stw	r4,24(sp)
8113a4e4:	d8000515 	stw	zero,20(sp)
8113a4e8:	d8c00415 	stw	r3,16(sp)
8113a4ec:	d8000315 	stw	zero,12(sp)
8113a4f0:	d8800215 	stw	r2,8(sp)
8113a4f4:	e0800217 	ldw	r2,8(fp)
8113a4f8:	d8800115 	stw	r2,4(sp)
8113a4fc:	e0bffc17 	ldw	r2,-16(fp)
8113a500:	d8800015 	stw	r2,0(sp)
8113a504:	e1fffb17 	ldw	r7,-20(fp)
8113a508:	000d883a 	mov	r6,zero
8113a50c:	e17ffa17 	ldw	r5,-24(fp)
8113a510:	e13ff917 	ldw	r4,-28(fp)
8113a514:	1139ad00 	call	81139ad0 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8113a518:	e037883a 	mov	sp,fp
8113a51c:	dfc00117 	ldw	ra,4(sp)
8113a520:	df000017 	ldw	fp,0(sp)
8113a524:	dec00204 	addi	sp,sp,8
8113a528:	f800283a 	ret

8113a52c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113a52c:	defff004 	addi	sp,sp,-64
8113a530:	de00012e 	bgeu	sp,et,8113a538 <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
8113a534:	003b68fa 	trap	3
8113a538:	dfc00f15 	stw	ra,60(sp)
8113a53c:	df000e15 	stw	fp,56(sp)
8113a540:	df000e04 	addi	fp,sp,56
8113a544:	e13ff915 	stw	r4,-28(fp)
8113a548:	e17ffa15 	stw	r5,-24(fp)
8113a54c:	e1bffb15 	stw	r6,-20(fp)
8113a550:	e1fffc15 	stw	r7,-16(fp)
8113a554:	e1000317 	ldw	r4,12(fp)
8113a558:	e0c00417 	ldw	r3,16(fp)
8113a55c:	e0800517 	ldw	r2,20(fp)
8113a560:	e13ffd0d 	sth	r4,-12(fp)
8113a564:	e0fffe05 	stb	r3,-8(fp)
8113a568:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8113a56c:	e0bffd0b 	ldhu	r2,-12(fp)
8113a570:	e0fffe03 	ldbu	r3,-8(fp)
8113a574:	e13fff0b 	ldhu	r4,-4(fp)
8113a578:	d8000615 	stw	zero,24(sp)
8113a57c:	d9000515 	stw	r4,20(sp)
8113a580:	d8000415 	stw	zero,16(sp)
8113a584:	d8c00315 	stw	r3,12(sp)
8113a588:	d8800215 	stw	r2,8(sp)
8113a58c:	e0800217 	ldw	r2,8(fp)
8113a590:	d8800115 	stw	r2,4(sp)
8113a594:	e0bffc17 	ldw	r2,-16(fp)
8113a598:	d8800015 	stw	r2,0(sp)
8113a59c:	000f883a 	mov	r7,zero
8113a5a0:	e1bffb17 	ldw	r6,-20(fp)
8113a5a4:	e17ffa17 	ldw	r5,-24(fp)
8113a5a8:	e13ff917 	ldw	r4,-28(fp)
8113a5ac:	1139ad00 	call	81139ad0 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8113a5b0:	e037883a 	mov	sp,fp
8113a5b4:	dfc00117 	ldw	ra,4(sp)
8113a5b8:	df000017 	ldw	fp,0(sp)
8113a5bc:	dec00204 	addi	sp,sp,8
8113a5c0:	f800283a 	ret

8113a5c4 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8113a5c4:	deffee04 	addi	sp,sp,-72
8113a5c8:	de00012e 	bgeu	sp,et,8113a5d0 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
8113a5cc:	003b68fa 	trap	3
8113a5d0:	dfc01115 	stw	ra,68(sp)
8113a5d4:	df001015 	stw	fp,64(sp)
8113a5d8:	df001004 	addi	fp,sp,64
8113a5dc:	e13ff715 	stw	r4,-36(fp)
8113a5e0:	e17ff815 	stw	r5,-32(fp)
8113a5e4:	e1bff915 	stw	r6,-28(fp)
8113a5e8:	e1fffa15 	stw	r7,-24(fp)
8113a5ec:	e1800417 	ldw	r6,16(fp)
8113a5f0:	e1400517 	ldw	r5,20(fp)
8113a5f4:	e1000617 	ldw	r4,24(fp)
8113a5f8:	e0c00717 	ldw	r3,28(fp)
8113a5fc:	e0800817 	ldw	r2,32(fp)
8113a600:	e1bffb0d 	sth	r6,-20(fp)
8113a604:	e17ffc05 	stb	r5,-16(fp)
8113a608:	e13ffd05 	stb	r4,-12(fp)
8113a60c:	e0fffe0d 	sth	r3,-8(fp)
8113a610:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113a614:	e0bffb0b 	ldhu	r2,-20(fp)
8113a618:	e0fffc03 	ldbu	r3,-16(fp)
8113a61c:	e13ffd03 	ldbu	r4,-12(fp)
8113a620:	e17ffe0b 	ldhu	r5,-8(fp)
8113a624:	e1bfff0b 	ldhu	r6,-4(fp)
8113a628:	d9800615 	stw	r6,24(sp)
8113a62c:	d9400515 	stw	r5,20(sp)
8113a630:	d9000415 	stw	r4,16(sp)
8113a634:	d8c00315 	stw	r3,12(sp)
8113a638:	d8800215 	stw	r2,8(sp)
8113a63c:	e0800317 	ldw	r2,12(fp)
8113a640:	d8800115 	stw	r2,4(sp)
8113a644:	e0800217 	ldw	r2,8(fp)
8113a648:	d8800015 	stw	r2,0(sp)
8113a64c:	e1fffa17 	ldw	r7,-24(fp)
8113a650:	e1bff917 	ldw	r6,-28(fp)
8113a654:	e17ff817 	ldw	r5,-32(fp)
8113a658:	e13ff717 	ldw	r4,-36(fp)
8113a65c:	1139ad00 	call	81139ad0 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8113a660:	e037883a 	mov	sp,fp
8113a664:	dfc00117 	ldw	ra,4(sp)
8113a668:	df000017 	ldw	fp,0(sp)
8113a66c:	dec00204 	addi	sp,sp,8
8113a670:	f800283a 	ret

8113a674 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113a674:	defffb04 	addi	sp,sp,-20
8113a678:	de00012e 	bgeu	sp,et,8113a680 <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
8113a67c:	003b68fa 	trap	3
8113a680:	df000415 	stw	fp,16(sp)
8113a684:	df000404 	addi	fp,sp,16
8113a688:	e13ffc15 	stw	r4,-16(fp)
8113a68c:	e17ffd15 	stw	r5,-12(fp)
8113a690:	e1bffe15 	stw	r6,-8(fp)
8113a694:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8113a698:	e0bffc17 	ldw	r2,-16(fp)
8113a69c:	10c01217 	ldw	r3,72(r2)
8113a6a0:	e0800117 	ldw	r2,4(fp)
8113a6a4:	18800436 	bltu	r3,r2,8113a6b8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
8113a6a8:	e0bffc17 	ldw	r2,-16(fp)
8113a6ac:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8113a6b0:	10803fcc 	andi	r2,r2,255
8113a6b4:	10000226 	beq	r2,zero,8113a6c0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8113a6b8:	00bffa84 	movi	r2,-22
8113a6bc:	00001406 	br	8113a710 <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
    }
    descriptor->read_address = read_address;
8113a6c0:	e0bffd17 	ldw	r2,-12(fp)
8113a6c4:	e0fffe17 	ldw	r3,-8(fp)
8113a6c8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8113a6cc:	e0bffd17 	ldw	r2,-12(fp)
8113a6d0:	e0ffff17 	ldw	r3,-4(fp)
8113a6d4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113a6d8:	e0bffd17 	ldw	r2,-12(fp)
8113a6dc:	e0c00117 	ldw	r3,4(fp)
8113a6e0:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8113a6e4:	e0fffd17 	ldw	r3,-12(fp)
8113a6e8:	e0bffd17 	ldw	r2,-12(fp)
8113a6ec:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113a6f0:	e0c00217 	ldw	r3,8(fp)
8113a6f4:	00900034 	movhi	r2,16384
8113a6f8:	10bfffc4 	addi	r2,r2,-1
8113a6fc:	1884703a 	and	r2,r3,r2
8113a700:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8113a704:	e0bffd17 	ldw	r2,-12(fp)
8113a708:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8113a70c:	0005883a 	mov	r2,zero
}
8113a710:	e037883a 	mov	sp,fp
8113a714:	df000017 	ldw	fp,0(sp)
8113a718:	dec00104 	addi	sp,sp,4
8113a71c:	f800283a 	ret

8113a720 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113a720:	defff404 	addi	sp,sp,-48
8113a724:	de00012e 	bgeu	sp,et,8113a72c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
8113a728:	003b68fa 	trap	3
8113a72c:	df000b15 	stw	fp,44(sp)
8113a730:	df000b04 	addi	fp,sp,44
8113a734:	e13ff715 	stw	r4,-36(fp)
8113a738:	e17ff815 	stw	r5,-32(fp)
8113a73c:	e1bff915 	stw	r6,-28(fp)
8113a740:	e1fffa15 	stw	r7,-24(fp)
8113a744:	e1800517 	ldw	r6,20(fp)
8113a748:	e1400617 	ldw	r5,24(fp)
8113a74c:	e1000717 	ldw	r4,28(fp)
8113a750:	e0c00817 	ldw	r3,32(fp)
8113a754:	e0800917 	ldw	r2,36(fp)
8113a758:	e1bffb0d 	sth	r6,-20(fp)
8113a75c:	e17ffc05 	stb	r5,-16(fp)
8113a760:	e13ffd05 	stb	r4,-12(fp)
8113a764:	e0fffe0d 	sth	r3,-8(fp)
8113a768:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8113a76c:	e0bff717 	ldw	r2,-36(fp)
8113a770:	10c01217 	ldw	r3,72(r2)
8113a774:	e0800317 	ldw	r2,12(fp)
8113a778:	18801936 	bltu	r3,r2,8113a7e0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
8113a77c:	e13ff717 	ldw	r4,-36(fp)
8113a780:	20801317 	ldw	r2,76(r4)
8113a784:	20c01417 	ldw	r3,80(r4)
8113a788:	e13ffe0b 	ldhu	r4,-8(fp)
8113a78c:	213fffcc 	andi	r4,r4,65535
8113a790:	2015883a 	mov	r10,r4
8113a794:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8113a798:	1ac01136 	bltu	r3,r11,8113a7e0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113a79c:	58c0011e 	bne	r11,r3,8113a7a4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
8113a7a0:	12800f36 	bltu	r2,r10,8113a7e0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113a7a4:	e13ff717 	ldw	r4,-36(fp)
8113a7a8:	20801317 	ldw	r2,76(r4)
8113a7ac:	20c01417 	ldw	r3,80(r4)
8113a7b0:	e13fff0b 	ldhu	r4,-4(fp)
8113a7b4:	213fffcc 	andi	r4,r4,65535
8113a7b8:	2011883a 	mov	r8,r4
8113a7bc:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8113a7c0:	1a400736 	bltu	r3,r9,8113a7e0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113a7c4:	48c0011e 	bne	r9,r3,8113a7cc <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
8113a7c8:	12000536 	bltu	r2,r8,8113a7e0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8113a7cc:	e0bff717 	ldw	r2,-36(fp)
8113a7d0:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113a7d4:	10803fcc 	andi	r2,r2,255
8113a7d8:	10800060 	cmpeqi	r2,r2,1
8113a7dc:	1000021e 	bne	r2,zero,8113a7e8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8113a7e0:	00bffa84 	movi	r2,-22
8113a7e4:	00003106 	br	8113a8ac <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
    }
    
    descriptor->read_address_high = read_address_high;
8113a7e8:	e0bff817 	ldw	r2,-32(fp)
8113a7ec:	e0fff917 	ldw	r3,-28(fp)
8113a7f0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8113a7f4:	e0bff817 	ldw	r2,-32(fp)
8113a7f8:	e0fffa17 	ldw	r3,-24(fp)
8113a7fc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8113a800:	e0bff817 	ldw	r2,-32(fp)
8113a804:	e0c00117 	ldw	r3,4(fp)
8113a808:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8113a80c:	e0bff817 	ldw	r2,-32(fp)
8113a810:	e0c00217 	ldw	r3,8(fp)
8113a814:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113a818:	e0bff817 	ldw	r2,-32(fp)
8113a81c:	e0c00317 	ldw	r3,12(fp)
8113a820:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8113a824:	e0bff817 	ldw	r2,-32(fp)
8113a828:	e0fffb0b 	ldhu	r3,-20(fp)
8113a82c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8113a830:	e0bff817 	ldw	r2,-32(fp)
8113a834:	e0fffc03 	ldbu	r3,-16(fp)
8113a838:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8113a83c:	e0bff817 	ldw	r2,-32(fp)
8113a840:	e0fffd03 	ldbu	r3,-12(fp)
8113a844:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8113a848:	e0bff817 	ldw	r2,-32(fp)
8113a84c:	e0fffe0b 	ldhu	r3,-8(fp)
8113a850:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8113a854:	e0bff817 	ldw	r2,-32(fp)
8113a858:	e0ffff0b 	ldhu	r3,-4(fp)
8113a85c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8113a860:	e0bff817 	ldw	r2,-32(fp)
8113a864:	1019883a 	mov	r12,r2
8113a868:	001b883a 	mov	r13,zero
8113a86c:	e33ff515 	stw	r12,-44(fp)
8113a870:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8113a874:	e0fff517 	ldw	r3,-44(fp)
8113a878:	e0bff817 	ldw	r2,-32(fp)
8113a87c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8113a880:	e0fff617 	ldw	r3,-40(fp)
8113a884:	e0bff817 	ldw	r2,-32(fp)
8113a888:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113a88c:	e0c00417 	ldw	r3,16(fp)
8113a890:	00900034 	movhi	r2,16384
8113a894:	10bfffc4 	addi	r2,r2,-1
8113a898:	1884703a 	and	r2,r3,r2
8113a89c:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8113a8a0:	e0bff817 	ldw	r2,-32(fp)
8113a8a4:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8113a8a8:	0005883a 	mov	r2,zero
}
8113a8ac:	e037883a 	mov	sp,fp
8113a8b0:	df000017 	ldw	fp,0(sp)
8113a8b4:	dec00104 	addi	sp,sp,4
8113a8b8:	f800283a 	ret

8113a8bc <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
8113a8bc:	defff804 	addi	sp,sp,-32
8113a8c0:	de00012e 	bgeu	sp,et,8113a8c8 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
8113a8c4:	003b68fa 	trap	3
8113a8c8:	dfc00715 	stw	ra,28(sp)
8113a8cc:	df000615 	stw	fp,24(sp)
8113a8d0:	df000604 	addi	fp,sp,24
8113a8d4:	e13ffc15 	stw	r4,-16(fp)
8113a8d8:	e17ffd15 	stw	r5,-12(fp)
8113a8dc:	e1bffe15 	stw	r6,-8(fp)
8113a8e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113a8e4:	e0800317 	ldw	r2,12(fp)
8113a8e8:	d8800115 	stw	r2,4(sp)
8113a8ec:	e0800217 	ldw	r2,8(fp)
8113a8f0:	d8800015 	stw	r2,0(sp)
8113a8f4:	e1ffff17 	ldw	r7,-4(fp)
8113a8f8:	e1bffe17 	ldw	r6,-8(fp)
8113a8fc:	e17ffd17 	ldw	r5,-12(fp)
8113a900:	e13ffc17 	ldw	r4,-16(fp)
8113a904:	113a6740 	call	8113a674 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
8113a908:	e037883a 	mov	sp,fp
8113a90c:	dfc00117 	ldw	ra,4(sp)
8113a910:	df000017 	ldw	fp,0(sp)
8113a914:	dec00204 	addi	sp,sp,8
8113a918:	f800283a 	ret

8113a91c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113a91c:	defff804 	addi	sp,sp,-32
8113a920:	de00012e 	bgeu	sp,et,8113a928 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
8113a924:	003b68fa 	trap	3
8113a928:	dfc00715 	stw	ra,28(sp)
8113a92c:	df000615 	stw	fp,24(sp)
8113a930:	df000604 	addi	fp,sp,24
8113a934:	e13ffc15 	stw	r4,-16(fp)
8113a938:	e17ffd15 	stw	r5,-12(fp)
8113a93c:	e1bffe15 	stw	r6,-8(fp)
8113a940:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113a944:	e0800217 	ldw	r2,8(fp)
8113a948:	d8800115 	stw	r2,4(sp)
8113a94c:	e0bfff17 	ldw	r2,-4(fp)
8113a950:	d8800015 	stw	r2,0(sp)
8113a954:	e1fffe17 	ldw	r7,-8(fp)
8113a958:	000d883a 	mov	r6,zero
8113a95c:	e17ffd17 	ldw	r5,-12(fp)
8113a960:	e13ffc17 	ldw	r4,-16(fp)
8113a964:	113a6740 	call	8113a674 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
8113a968:	e037883a 	mov	sp,fp
8113a96c:	dfc00117 	ldw	ra,4(sp)
8113a970:	df000017 	ldw	fp,0(sp)
8113a974:	dec00204 	addi	sp,sp,8
8113a978:	f800283a 	ret

8113a97c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113a97c:	defff804 	addi	sp,sp,-32
8113a980:	de00012e 	bgeu	sp,et,8113a988 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
8113a984:	003b68fa 	trap	3
8113a988:	dfc00715 	stw	ra,28(sp)
8113a98c:	df000615 	stw	fp,24(sp)
8113a990:	df000604 	addi	fp,sp,24
8113a994:	e13ffc15 	stw	r4,-16(fp)
8113a998:	e17ffd15 	stw	r5,-12(fp)
8113a99c:	e1bffe15 	stw	r6,-8(fp)
8113a9a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113a9a4:	e0800217 	ldw	r2,8(fp)
8113a9a8:	d8800115 	stw	r2,4(sp)
8113a9ac:	e0bfff17 	ldw	r2,-4(fp)
8113a9b0:	d8800015 	stw	r2,0(sp)
8113a9b4:	000f883a 	mov	r7,zero
8113a9b8:	e1bffe17 	ldw	r6,-8(fp)
8113a9bc:	e17ffd17 	ldw	r5,-12(fp)
8113a9c0:	e13ffc17 	ldw	r4,-16(fp)
8113a9c4:	113a6740 	call	8113a674 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8113a9c8:	e037883a 	mov	sp,fp
8113a9cc:	dfc00117 	ldw	ra,4(sp)
8113a9d0:	df000017 	ldw	fp,0(sp)
8113a9d4:	dec00204 	addi	sp,sp,8
8113a9d8:	f800283a 	ret

8113a9dc <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8113a9dc:	deffee04 	addi	sp,sp,-72
8113a9e0:	de00012e 	bgeu	sp,et,8113a9e8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
8113a9e4:	003b68fa 	trap	3
8113a9e8:	dfc01115 	stw	ra,68(sp)
8113a9ec:	df001015 	stw	fp,64(sp)
8113a9f0:	df001004 	addi	fp,sp,64
8113a9f4:	e13ff915 	stw	r4,-28(fp)
8113a9f8:	e17ffa15 	stw	r5,-24(fp)
8113a9fc:	e1bffb15 	stw	r6,-20(fp)
8113aa00:	e1fffc15 	stw	r7,-16(fp)
8113aa04:	e1000417 	ldw	r4,16(fp)
8113aa08:	e0c00517 	ldw	r3,20(fp)
8113aa0c:	e0800617 	ldw	r2,24(fp)
8113aa10:	e13ffd0d 	sth	r4,-12(fp)
8113aa14:	e0fffe05 	stb	r3,-8(fp)
8113aa18:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8113aa1c:	e0bffd0b 	ldhu	r2,-12(fp)
8113aa20:	e0fffe03 	ldbu	r3,-8(fp)
8113aa24:	e13fff0b 	ldhu	r4,-4(fp)
8113aa28:	d9000815 	stw	r4,32(sp)
8113aa2c:	d8000715 	stw	zero,28(sp)
8113aa30:	d8c00615 	stw	r3,24(sp)
8113aa34:	d8000515 	stw	zero,20(sp)
8113aa38:	d8800415 	stw	r2,16(sp)
8113aa3c:	e0800317 	ldw	r2,12(fp)
8113aa40:	d8800315 	stw	r2,12(sp)
8113aa44:	e0800217 	ldw	r2,8(fp)
8113aa48:	d8800215 	stw	r2,8(sp)
8113aa4c:	e0bffc17 	ldw	r2,-16(fp)
8113aa50:	d8800115 	stw	r2,4(sp)
8113aa54:	e0bffb17 	ldw	r2,-20(fp)
8113aa58:	d8800015 	stw	r2,0(sp)
8113aa5c:	000f883a 	mov	r7,zero
8113aa60:	000d883a 	mov	r6,zero
8113aa64:	e17ffa17 	ldw	r5,-24(fp)
8113aa68:	e13ff917 	ldw	r4,-28(fp)
8113aa6c:	113a7200 	call	8113a720 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8113aa70:	e037883a 	mov	sp,fp
8113aa74:	dfc00117 	ldw	ra,4(sp)
8113aa78:	df000017 	ldw	fp,0(sp)
8113aa7c:	dec00204 	addi	sp,sp,8
8113aa80:	f800283a 	ret

8113aa84 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113aa84:	deffee04 	addi	sp,sp,-72
8113aa88:	de00012e 	bgeu	sp,et,8113aa90 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
8113aa8c:	003b68fa 	trap	3
8113aa90:	dfc01115 	stw	ra,68(sp)
8113aa94:	df001015 	stw	fp,64(sp)
8113aa98:	df001004 	addi	fp,sp,64
8113aa9c:	e13ff915 	stw	r4,-28(fp)
8113aaa0:	e17ffa15 	stw	r5,-24(fp)
8113aaa4:	e1bffb15 	stw	r6,-20(fp)
8113aaa8:	e1fffc15 	stw	r7,-16(fp)
8113aaac:	e1000417 	ldw	r4,16(fp)
8113aab0:	e0c00517 	ldw	r3,20(fp)
8113aab4:	e0800617 	ldw	r2,24(fp)
8113aab8:	e13ffd0d 	sth	r4,-12(fp)
8113aabc:	e0fffe05 	stb	r3,-8(fp)
8113aac0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113aac4:	e0bffd0b 	ldhu	r2,-12(fp)
8113aac8:	e0fffe03 	ldbu	r3,-8(fp)
8113aacc:	e13fff0b 	ldhu	r4,-4(fp)
8113aad0:	d8000815 	stw	zero,32(sp)
8113aad4:	d9000715 	stw	r4,28(sp)
8113aad8:	d8000615 	stw	zero,24(sp)
8113aadc:	d8c00515 	stw	r3,20(sp)
8113aae0:	d8800415 	stw	r2,16(sp)
8113aae4:	e0800317 	ldw	r2,12(fp)
8113aae8:	d8800315 	stw	r2,12(sp)
8113aaec:	e0800217 	ldw	r2,8(fp)
8113aaf0:	d8800215 	stw	r2,8(sp)
8113aaf4:	d8000115 	stw	zero,4(sp)
8113aaf8:	d8000015 	stw	zero,0(sp)
8113aafc:	e1fffc17 	ldw	r7,-16(fp)
8113ab00:	e1bffb17 	ldw	r6,-20(fp)
8113ab04:	e17ffa17 	ldw	r5,-24(fp)
8113ab08:	e13ff917 	ldw	r4,-28(fp)
8113ab0c:	113a7200 	call	8113a720 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
8113ab10:	e037883a 	mov	sp,fp
8113ab14:	dfc00117 	ldw	ra,4(sp)
8113ab18:	df000017 	ldw	fp,0(sp)
8113ab1c:	dec00204 	addi	sp,sp,8
8113ab20:	f800283a 	ret

8113ab24 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113ab24:	deffec04 	addi	sp,sp,-80
8113ab28:	de00012e 	bgeu	sp,et,8113ab30 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
8113ab2c:	003b68fa 	trap	3
8113ab30:	dfc01315 	stw	ra,76(sp)
8113ab34:	df001215 	stw	fp,72(sp)
8113ab38:	df001204 	addi	fp,sp,72
8113ab3c:	e13ff715 	stw	r4,-36(fp)
8113ab40:	e17ff815 	stw	r5,-32(fp)
8113ab44:	e1bff915 	stw	r6,-28(fp)
8113ab48:	e1fffa15 	stw	r7,-24(fp)
8113ab4c:	e1800617 	ldw	r6,24(fp)
8113ab50:	e1400717 	ldw	r5,28(fp)
8113ab54:	e1000817 	ldw	r4,32(fp)
8113ab58:	e0c00917 	ldw	r3,36(fp)
8113ab5c:	e0800a17 	ldw	r2,40(fp)
8113ab60:	e1bffb0d 	sth	r6,-20(fp)
8113ab64:	e17ffc05 	stb	r5,-16(fp)
8113ab68:	e13ffd05 	stb	r4,-12(fp)
8113ab6c:	e0fffe0d 	sth	r3,-8(fp)
8113ab70:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113ab74:	e0bffb0b 	ldhu	r2,-20(fp)
8113ab78:	e0fffc03 	ldbu	r3,-16(fp)
8113ab7c:	e13ffd03 	ldbu	r4,-12(fp)
8113ab80:	e17ffe0b 	ldhu	r5,-8(fp)
8113ab84:	e1bfff0b 	ldhu	r6,-4(fp)
8113ab88:	d9800815 	stw	r6,32(sp)
8113ab8c:	d9400715 	stw	r5,28(sp)
8113ab90:	d9000615 	stw	r4,24(sp)
8113ab94:	d8c00515 	stw	r3,20(sp)
8113ab98:	d8800415 	stw	r2,16(sp)
8113ab9c:	e0800517 	ldw	r2,20(fp)
8113aba0:	d8800315 	stw	r2,12(sp)
8113aba4:	e0800417 	ldw	r2,16(fp)
8113aba8:	d8800215 	stw	r2,8(sp)
8113abac:	e0800317 	ldw	r2,12(fp)
8113abb0:	d8800115 	stw	r2,4(sp)
8113abb4:	e0800217 	ldw	r2,8(fp)
8113abb8:	d8800015 	stw	r2,0(sp)
8113abbc:	e1fffa17 	ldw	r7,-24(fp)
8113abc0:	e1bff917 	ldw	r6,-28(fp)
8113abc4:	e17ff817 	ldw	r5,-32(fp)
8113abc8:	e13ff717 	ldw	r4,-36(fp)
8113abcc:	113a7200 	call	8113a720 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8113abd0:	e037883a 	mov	sp,fp
8113abd4:	dfc00117 	ldw	ra,4(sp)
8113abd8:	df000017 	ldw	fp,0(sp)
8113abdc:	dec00204 	addi	sp,sp,8
8113abe0:	f800283a 	ret

8113abe4 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8113abe4:	defffc04 	addi	sp,sp,-16
8113abe8:	de00012e 	bgeu	sp,et,8113abf0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
8113abec:	003b68fa 	trap	3
8113abf0:	df000315 	stw	fp,12(sp)
8113abf4:	df000304 	addi	fp,sp,12
8113abf8:	e13ffe15 	stw	r4,-8(fp)
8113abfc:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8113ac00:	e0bfff17 	ldw	r2,-4(fp)
8113ac04:	1000021e 	bne	r2,zero,8113ac10 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113ac08:	00bffa84 	movi	r2,-22
8113ac0c:	00002f06 	br	8113accc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8113ac10:	e0bfff17 	ldw	r2,-4(fp)
8113ac14:	10c00317 	ldw	r3,12(r2)
8113ac18:	e0bfff17 	ldw	r2,-4(fp)
8113ac1c:	18800226 	beq	r3,r2,8113ac28 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113ac20:	00bffa84 	movi	r2,-22
8113ac24:	00002906 	br	8113accc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == NULL)
8113ac28:	e0bffe17 	ldw	r2,-8(fp)
8113ac2c:	10800017 	ldw	r2,0(r2)
8113ac30:	1000051e 	bne	r2,zero,8113ac48 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8113ac34:	e0bffe17 	ldw	r2,-8(fp)
8113ac38:	e0ffff17 	ldw	r3,-4(fp)
8113ac3c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8113ac40:	0005883a 	mov	r2,zero
8113ac44:	00002106 	br	8113accc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == descriptor)
8113ac48:	e0bffe17 	ldw	r2,-8(fp)
8113ac4c:	10c00017 	ldw	r3,0(r2)
8113ac50:	e0bfff17 	ldw	r2,-4(fp)
8113ac54:	1880021e 	bne	r3,r2,8113ac60 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8113ac58:	00bffa84 	movi	r2,-22
8113ac5c:	00001b06 	br	8113accc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113ac60:	e0bffe17 	ldw	r2,-8(fp)
8113ac64:	10800017 	ldw	r2,0(r2)
8113ac68:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113ac6c:	00000906 	br	8113ac94 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8113ac70:	e0bffd17 	ldw	r2,-12(fp)
8113ac74:	10c00317 	ldw	r3,12(r2)
8113ac78:	e0bfff17 	ldw	r2,-4(fp)
8113ac7c:	1880021e 	bne	r3,r2,8113ac88 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8113ac80:	00bffa84 	movi	r2,-22
8113ac84:	00001106 	br	8113accc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8113ac88:	e0bffd17 	ldw	r2,-12(fp)
8113ac8c:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
8113ac90:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113ac94:	e0bffd17 	ldw	r2,-12(fp)
8113ac98:	10800317 	ldw	r2,12(r2)
8113ac9c:	e0fffe17 	ldw	r3,-8(fp)
8113aca0:	18c00017 	ldw	r3,0(r3)
8113aca4:	10fff21e 	bne	r2,r3,8113ac70 <__reset+0xfb11ac70>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8113aca8:	e0ffff17 	ldw	r3,-4(fp)
8113acac:	e0bffd17 	ldw	r2,-12(fp)
8113acb0:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8113acb4:	e0bffe17 	ldw	r2,-8(fp)
8113acb8:	10800017 	ldw	r2,0(r2)
8113acbc:	1007883a 	mov	r3,r2
8113acc0:	e0bfff17 	ldw	r2,-4(fp)
8113acc4:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8113acc8:	0005883a 	mov	r2,zero
}
8113accc:	e037883a 	mov	sp,fp
8113acd0:	df000017 	ldw	fp,0(sp)
8113acd4:	dec00104 	addi	sp,sp,4
8113acd8:	f800283a 	ret

8113acdc <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8113acdc:	defff804 	addi	sp,sp,-32
8113ace0:	de00012e 	bgeu	sp,et,8113ace8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
8113ace4:	003b68fa 	trap	3
8113ace8:	df000715 	stw	fp,28(sp)
8113acec:	df000704 	addi	fp,sp,28
8113acf0:	e13ffe15 	stw	r4,-8(fp)
8113acf4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
8113acf8:	e13fff17 	ldw	r4,-4(fp)
8113acfc:	2000021e 	bne	r4,zero,8113ad08 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113ad00:	00bffa84 	movi	r2,-22
8113ad04:	00005906 	br	8113ae6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
8113ad08:	e13fff17 	ldw	r4,-4(fp)
8113ad0c:	2015883a 	mov	r10,r4
8113ad10:	0017883a 	mov	r11,zero
8113ad14:	e2bffc15 	stw	r10,-16(fp)
8113ad18:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113ad1c:	e13fff17 	ldw	r4,-4(fp)
8113ad20:	21400317 	ldw	r5,12(r4)
8113ad24:	e13ffc17 	ldw	r4,-16(fp)
8113ad28:	29000626 	beq	r5,r4,8113ad44 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8113ad2c:	e13fff17 	ldw	r4,-4(fp)
8113ad30:	21400b17 	ldw	r5,44(r4)
8113ad34:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113ad38:	29000226 	beq	r5,r4,8113ad44 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113ad3c:	00bffa84 	movi	r2,-22
8113ad40:	00004a06 	br	8113ae6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	if (*list == NULL)
8113ad44:	e13ffe17 	ldw	r4,-8(fp)
8113ad48:	21000017 	ldw	r4,0(r4)
8113ad4c:	2000051e 	bne	r4,zero,8113ad64 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
8113ad50:	e0bffe17 	ldw	r2,-8(fp)
8113ad54:	e0ffff17 	ldw	r3,-4(fp)
8113ad58:	10c00015 	stw	r3,0(r2)
		return 0;
8113ad5c:	0005883a 	mov	r2,zero
8113ad60:	00004206 	br	8113ae6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	if (*list == descriptor)
8113ad64:	e13ffe17 	ldw	r4,-8(fp)
8113ad68:	21400017 	ldw	r5,0(r4)
8113ad6c:	e13fff17 	ldw	r4,-4(fp)
8113ad70:	2900021e 	bne	r5,r4,8113ad7c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8113ad74:	00bffa84 	movi	r2,-22
8113ad78:	00003c06 	br	8113ae6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113ad7c:	e13ffe17 	ldw	r4,-8(fp)
8113ad80:	21000017 	ldw	r4,0(r4)
8113ad84:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
8113ad88:	e13ffe17 	ldw	r4,-8(fp)
8113ad8c:	21000017 	ldw	r4,0(r4)
8113ad90:	2011883a 	mov	r8,r4
8113ad94:	0013883a 	mov	r9,zero
8113ad98:	e23ffa15 	stw	r8,-24(fp)
8113ad9c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113ada0:	00001806 	br	8113ae04 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8113ada4:	e13fff17 	ldw	r4,-4(fp)
8113ada8:	200d883a 	mov	r6,r4
8113adac:	000f883a 	mov	r7,zero
8113adb0:	e1bffc15 	stw	r6,-16(fp)
8113adb4:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8113adb8:	e13ff917 	ldw	r4,-28(fp)
8113adbc:	21400317 	ldw	r5,12(r4)
8113adc0:	e13ffc17 	ldw	r4,-16(fp)
8113adc4:	2900061e 	bne	r5,r4,8113ade0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8113adc8:	e13ff917 	ldw	r4,-28(fp)
8113adcc:	21400b17 	ldw	r5,44(r4)
8113add0:	e13ffd17 	ldw	r4,-12(fp)
8113add4:	2900021e 	bne	r5,r4,8113ade0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8113add8:	00bffa84 	movi	r2,-22
8113addc:	00002306 	br	8113ae6c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113ade0:	e13ff917 	ldw	r4,-28(fp)
8113ade4:	21000317 	ldw	r4,12(r4)
8113ade8:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8113adec:	e13ff917 	ldw	r4,-28(fp)
8113adf0:	21000b17 	ldw	r4,44(r4)
8113adf4:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8113adf8:	e13ffc17 	ldw	r4,-16(fp)
8113adfc:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113ae00:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113ae04:	e13ff917 	ldw	r4,-28(fp)
8113ae08:	21400317 	ldw	r5,12(r4)
8113ae0c:	e13ffa17 	ldw	r4,-24(fp)
8113ae10:	29000426 	beq	r5,r4,8113ae24 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8113ae14:	e13ff917 	ldw	r4,-28(fp)
8113ae18:	21400b17 	ldw	r5,44(r4)
8113ae1c:	e13ffb17 	ldw	r4,-20(fp)
8113ae20:	293fe01e 	bne	r5,r4,8113ada4 <__reset+0xfb11ada4>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
8113ae24:	e13fff17 	ldw	r4,-4(fp)
8113ae28:	2005883a 	mov	r2,r4
8113ae2c:	0007883a 	mov	r3,zero
8113ae30:	e0bffc15 	stw	r2,-16(fp)
8113ae34:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8113ae38:	e0fffc17 	ldw	r3,-16(fp)
8113ae3c:	e0bff917 	ldw	r2,-28(fp)
8113ae40:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8113ae44:	e0fffd17 	ldw	r3,-12(fp)
8113ae48:	e0bff917 	ldw	r2,-28(fp)
8113ae4c:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8113ae50:	e0fffa17 	ldw	r3,-24(fp)
8113ae54:	e0bfff17 	ldw	r2,-4(fp)
8113ae58:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8113ae5c:	e0fffb17 	ldw	r3,-20(fp)
8113ae60:	e0bfff17 	ldw	r2,-4(fp)
8113ae64:	10c00b15 	stw	r3,44(r2)
	return 0;
8113ae68:	0005883a 	mov	r2,zero
}
8113ae6c:	e037883a 	mov	sp,fp
8113ae70:	df000017 	ldw	fp,0(sp)
8113ae74:	dec00104 	addi	sp,sp,4
8113ae78:	f800283a 	ret

8113ae7c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8113ae7c:	defffc04 	addi	sp,sp,-16
8113ae80:	de00012e 	bgeu	sp,et,8113ae88 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
8113ae84:	003b68fa 	trap	3
8113ae88:	df000315 	stw	fp,12(sp)
8113ae8c:	df000304 	addi	fp,sp,12
8113ae90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8113ae94:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8113ae98:	e0bfff17 	ldw	r2,-4(fp)
8113ae9c:	1000021e 	bne	r2,zero,8113aea8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
8113aea0:	00bffa84 	movi	r2,-22
8113aea4:	00001906 	br	8113af0c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8113aea8:	e0bfff17 	ldw	r2,-4(fp)
8113aeac:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8113aeb0:	00000a06 	br	8113aedc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8113aeb4:	e0bffd17 	ldw	r2,-12(fp)
8113aeb8:	10800717 	ldw	r2,28(r2)
8113aebc:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113aec0:	e0bffe17 	ldw	r2,-8(fp)
8113aec4:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113aec8:	e0bffd17 	ldw	r2,-12(fp)
8113aecc:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8113aed0:	e0bffd17 	ldw	r2,-12(fp)
8113aed4:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8113aed8:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8113aedc:	e0bffd17 	ldw	r2,-12(fp)
8113aee0:	10c00317 	ldw	r3,12(r2)
8113aee4:	e0bfff17 	ldw	r2,-4(fp)
8113aee8:	18bff21e 	bne	r3,r2,8113aeb4 <__reset+0xfb11aeb4>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
8113aeec:	e0bffd17 	ldw	r2,-12(fp)
8113aef0:	10800717 	ldw	r2,28(r2)
8113aef4:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113aef8:	e0bffe17 	ldw	r2,-8(fp)
8113aefc:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8113af00:	e0bffd17 	ldw	r2,-12(fp)
8113af04:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8113af08:	0005883a 	mov	r2,zero
}
8113af0c:	e037883a 	mov	sp,fp
8113af10:	df000017 	ldw	fp,0(sp)
8113af14:	dec00104 	addi	sp,sp,4
8113af18:	f800283a 	ret

8113af1c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
8113af1c:	defff804 	addi	sp,sp,-32
8113af20:	de00012e 	bgeu	sp,et,8113af28 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
8113af24:	003b68fa 	trap	3
8113af28:	df000715 	stw	fp,28(sp)
8113af2c:	df000704 	addi	fp,sp,28
8113af30:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8113af34:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8113af38:	e13fff17 	ldw	r4,-4(fp)
8113af3c:	2000021e 	bne	r4,zero,8113af48 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
8113af40:	00bffa84 	movi	r2,-22
8113af44:	00002806 	br	8113afe8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8113af48:	e13fff17 	ldw	r4,-4(fp)
8113af4c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8113af50:	e13fff17 	ldw	r4,-4(fp)
8113af54:	2005883a 	mov	r2,r4
8113af58:	0007883a 	mov	r3,zero
8113af5c:	e0bffb15 	stw	r2,-20(fp)
8113af60:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113af64:	00001006 	br	8113afa8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
8113af68:	e0bff917 	ldw	r2,-28(fp)
8113af6c:	10800f17 	ldw	r2,60(r2)
8113af70:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113af74:	e0bffa17 	ldw	r2,-24(fp)
8113af78:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113af7c:	e0bff917 	ldw	r2,-28(fp)
8113af80:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113af84:	e0bff917 	ldw	r2,-28(fp)
8113af88:	10800317 	ldw	r2,12(r2)
8113af8c:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8113af90:	e0bff917 	ldw	r2,-28(fp)
8113af94:	10800b17 	ldw	r2,44(r2)
8113af98:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8113af9c:	e0bffd17 	ldw	r2,-12(fp)
8113afa0:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113afa4:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113afa8:	e0bff917 	ldw	r2,-28(fp)
8113afac:	10c00317 	ldw	r3,12(r2)
8113afb0:	e0bffb17 	ldw	r2,-20(fp)
8113afb4:	18800426 	beq	r3,r2,8113afc8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8113afb8:	e0bff917 	ldw	r2,-28(fp)
8113afbc:	10c00b17 	ldw	r3,44(r2)
8113afc0:	e0bffc17 	ldw	r2,-16(fp)
8113afc4:	18bfe81e 	bne	r3,r2,8113af68 <__reset+0xfb11af68>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8113afc8:	e0bff917 	ldw	r2,-28(fp)
8113afcc:	10800f17 	ldw	r2,60(r2)
8113afd0:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113afd4:	e0bffa17 	ldw	r2,-24(fp)
8113afd8:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8113afdc:	e0bff917 	ldw	r2,-28(fp)
8113afe0:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
8113afe4:	0005883a 	mov	r2,zero
}
8113afe8:	e037883a 	mov	sp,fp
8113afec:	df000017 	ldw	fp,0(sp)
8113aff0:	dec00104 	addi	sp,sp,4
8113aff4:	f800283a 	ret

8113aff8 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8113aff8:	deffeb04 	addi	sp,sp,-84
8113affc:	de00012e 	bgeu	sp,et,8113b004 <alt_msgdma_start_prefetcher_with_list_addr+0xc>
8113b000:	003b68fa 	trap	3
8113b004:	dfc01415 	stw	ra,80(sp)
8113b008:	df001315 	stw	fp,76(sp)
8113b00c:	df001304 	addi	fp,sp,76
8113b010:	e13ffb15 	stw	r4,-20(fp)
8113b014:	e17ffc15 	stw	r5,-16(fp)
8113b018:	e1bffd15 	stw	r6,-12(fp)
8113b01c:	3807883a 	mov	r3,r7
8113b020:	e0800217 	ldw	r2,8(fp)
8113b024:	e0fffe05 	stb	r3,-8(fp)
8113b028:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
8113b02c:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
8113b030:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
8113b034:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8113b038:	e0bffc17 	ldw	r2,-16(fp)
8113b03c:	e0bff815 	stw	r2,-32(fp)
8113b040:	e0bffd17 	ldw	r2,-12(fp)
8113b044:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
8113b048:	e0bffb17 	ldw	r2,-20(fp)
8113b04c:	10801817 	ldw	r2,96(r2)
8113b050:	e0bff615 	stw	r2,-40(fp)
8113b054:	e03ff70d 	sth	zero,-36(fp)
8113b058:	e0bff70b 	ldhu	r2,-36(fp)
8113b05c:	e0fffa04 	addi	r3,fp,-24
8113b060:	180d883a 	mov	r6,r3
8113b064:	100b883a 	mov	r5,r2
8113b068:	e13ff617 	ldw	r4,-40(fp)
8113b06c:	11301a40 	call	811301a4 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8113b070:	e0bffb17 	ldw	r2,-20(fp)
8113b074:	10800617 	ldw	r2,24(r2)
8113b078:	10800037 	ldwio	r2,0(r2)
8113b07c:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8113b080:	e0bfed17 	ldw	r2,-76(fp)
8113b084:	1080004c 	andi	r2,r2,1
8113b088:	10000626 	beq	r2,zero,8113b0a4 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
8113b08c:	e0bffb17 	ldw	r2,-20(fp)
8113b090:	10801817 	ldw	r2,96(r2)
8113b094:	1009883a 	mov	r4,r2
8113b098:	113052c0 	call	8113052c <OSSemPost>
		return -EBUSY;
8113b09c:	00bffc04 	movi	r2,-16
8113b0a0:	00009606 	br	8113b2fc <alt_msgdma_start_prefetcher_with_list_addr+0x304>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113b0a4:	00800804 	movi	r2,32
8113b0a8:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b0ac:	0005303a 	rdctl	r2,status
8113b0b0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b0b4:	e0fff217 	ldw	r3,-56(fp)
8113b0b8:	00bfff84 	movi	r2,-2
8113b0bc:	1884703a 	and	r2,r3,r2
8113b0c0:	1001703a 	wrctl	status,r2
  
  return context;
8113b0c4:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8113b0c8:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113b0cc:	e0bffb17 	ldw	r2,-20(fp)
8113b0d0:	10800317 	ldw	r2,12(r2)
8113b0d4:	10800104 	addi	r2,r2,4
8113b0d8:	e0ffee17 	ldw	r3,-72(fp)
8113b0dc:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8113b0e0:	e0bffb17 	ldw	r2,-20(fp)
8113b0e4:	10800317 	ldw	r2,12(r2)
8113b0e8:	e0fffb17 	ldw	r3,-20(fp)
8113b0ec:	18c00317 	ldw	r3,12(r3)
8113b0f0:	18c00037 	ldwio	r3,0(r3)
8113b0f4:	10c00035 	stwio	r3,0(r2)
8113b0f8:	e0bfef17 	ldw	r2,-68(fp)
8113b0fc:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b100:	e0bff017 	ldw	r2,-64(fp)
8113b104:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8113b108:	e0bffb17 	ldw	r2,-20(fp)
8113b10c:	10800b17 	ldw	r2,44(r2)
8113b110:	10002326 	beq	r2,zero,8113b1a0 <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8113b114:	e0bffb17 	ldw	r2,-20(fp)
8113b118:	10c00d17 	ldw	r3,52(r2)
8113b11c:	e0bfee17 	ldw	r2,-72(fp)
8113b120:	1884b03a 	or	r2,r3,r2
8113b124:	10800514 	ori	r2,r2,20
8113b128:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8113b12c:	e0ffee17 	ldw	r3,-72(fp)
8113b130:	00bff7c4 	movi	r2,-33
8113b134:	1884703a 	and	r2,r3,r2
8113b138:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8113b13c:	e0bfed17 	ldw	r2,-76(fp)
8113b140:	10800214 	ori	r2,r2,8
8113b144:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b148:	0005303a 	rdctl	r2,status
8113b14c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b150:	e0fff417 	ldw	r3,-48(fp)
8113b154:	00bfff84 	movi	r2,-2
8113b158:	1884703a 	and	r2,r3,r2
8113b15c:	1001703a 	wrctl	status,r2
  
  return context;
8113b160:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
8113b164:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113b168:	e0bffb17 	ldw	r2,-20(fp)
8113b16c:	10800317 	ldw	r2,12(r2)
8113b170:	10800104 	addi	r2,r2,4
8113b174:	e0ffee17 	ldw	r3,-72(fp)
8113b178:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113b17c:	e0bffb17 	ldw	r2,-20(fp)
8113b180:	10800617 	ldw	r2,24(r2)
8113b184:	e0ffed17 	ldw	r3,-76(fp)
8113b188:	10c00035 	stwio	r3,0(r2)
8113b18c:	e0bfef17 	ldw	r2,-68(fp)
8113b190:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b194:	e0bff117 	ldw	r2,-60(fp)
8113b198:	1001703a 	wrctl	status,r2
8113b19c:	00002306 	br	8113b22c <alt_msgdma_start_prefetcher_with_list_addr+0x234>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8113b1a0:	e0bffb17 	ldw	r2,-20(fp)
8113b1a4:	10c00d17 	ldw	r3,52(r2)
8113b1a8:	e0bfee17 	ldw	r2,-72(fp)
8113b1ac:	1884b03a 	or	r2,r3,r2
8113b1b0:	10800114 	ori	r2,r2,4
8113b1b4:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8113b1b8:	e0ffee17 	ldw	r3,-72(fp)
8113b1bc:	00bff3c4 	movi	r2,-49
8113b1c0:	1884703a 	and	r2,r3,r2
8113b1c4:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8113b1c8:	e0ffed17 	ldw	r3,-76(fp)
8113b1cc:	00bffdc4 	movi	r2,-9
8113b1d0:	1884703a 	and	r2,r3,r2
8113b1d4:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b1d8:	0005303a 	rdctl	r2,status
8113b1dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b1e0:	e0fff517 	ldw	r3,-44(fp)
8113b1e4:	00bfff84 	movi	r2,-2
8113b1e8:	1884703a 	and	r2,r3,r2
8113b1ec:	1001703a 	wrctl	status,r2
  
  return context;
8113b1f0:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
8113b1f4:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113b1f8:	e0bffb17 	ldw	r2,-20(fp)
8113b1fc:	10800317 	ldw	r2,12(r2)
8113b200:	10800104 	addi	r2,r2,4
8113b204:	e0ffee17 	ldw	r3,-72(fp)
8113b208:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113b20c:	e0bffb17 	ldw	r2,-20(fp)
8113b210:	10800617 	ldw	r2,24(r2)
8113b214:	e0ffed17 	ldw	r3,-76(fp)
8113b218:	10c00035 	stwio	r3,0(r2)
8113b21c:	e0bfef17 	ldw	r2,-68(fp)
8113b220:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b224:	e0bff317 	ldw	r2,-52(fp)
8113b228:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8113b22c:	e0bffb17 	ldw	r2,-20(fp)
8113b230:	10800617 	ldw	r2,24(r2)
8113b234:	10800104 	addi	r2,r2,4
8113b238:	e0fff817 	ldw	r3,-32(fp)
8113b23c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8113b240:	e0bffb17 	ldw	r2,-20(fp)
8113b244:	10800617 	ldw	r2,24(r2)
8113b248:	10800204 	addi	r2,r2,8
8113b24c:	e0fff917 	ldw	r3,-28(fp)
8113b250:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
8113b254:	e0bffe03 	ldbu	r2,-8(fp)
8113b258:	10000426 	beq	r2,zero,8113b26c <alt_msgdma_start_prefetcher_with_list_addr+0x274>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8113b25c:	e0bfed17 	ldw	r2,-76(fp)
8113b260:	10800414 	ori	r2,r2,16
8113b264:	e0bfed15 	stw	r2,-76(fp)
8113b268:	00000406 	br	8113b27c <alt_msgdma_start_prefetcher_with_list_addr+0x284>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8113b26c:	e0ffed17 	ldw	r3,-76(fp)
8113b270:	00bffbc4 	movi	r2,-17
8113b274:	1884703a 	and	r2,r3,r2
8113b278:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8113b27c:	e0bfff03 	ldbu	r2,-4(fp)
8113b280:	10000e26 	beq	r2,zero,8113b2bc <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8113b284:	e0bfed17 	ldw	r2,-76(fp)
8113b288:	10800094 	ori	r2,r2,2
8113b28c:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8113b290:	e0bffb17 	ldw	r2,-20(fp)
8113b294:	10800617 	ldw	r2,24(r2)
8113b298:	10800304 	addi	r2,r2,12
8113b29c:	10800037 	ldwio	r2,0(r2)
8113b2a0:	10000a1e 	bne	r2,zero,8113b2cc <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8113b2a4:	e0bffb17 	ldw	r2,-20(fp)
8113b2a8:	10800617 	ldw	r2,24(r2)
8113b2ac:	10800304 	addi	r2,r2,12
8113b2b0:	00c03fc4 	movi	r3,255
8113b2b4:	10c00035 	stwio	r3,0(r2)
8113b2b8:	00000406 	br	8113b2cc <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8113b2bc:	e0ffed17 	ldw	r3,-76(fp)
8113b2c0:	00bfff44 	movi	r2,-3
8113b2c4:	1884703a 	and	r2,r3,r2
8113b2c8:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8113b2cc:	e0bfed17 	ldw	r2,-76(fp)
8113b2d0:	10800054 	ori	r2,r2,1
8113b2d4:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113b2d8:	e0bffb17 	ldw	r2,-20(fp)
8113b2dc:	10800617 	ldw	r2,24(r2)
8113b2e0:	e0ffed17 	ldw	r3,-76(fp)
8113b2e4:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
8113b2e8:	e0bffb17 	ldw	r2,-20(fp)
8113b2ec:	10801817 	ldw	r2,96(r2)
8113b2f0:	1009883a 	mov	r4,r2
8113b2f4:	113052c0 	call	8113052c <OSSemPost>
	 
	 return 0;
8113b2f8:	0005883a 	mov	r2,zero
}
8113b2fc:	e037883a 	mov	sp,fp
8113b300:	dfc00117 	ldw	ra,4(sp)
8113b304:	df000017 	ldw	fp,0(sp)
8113b308:	dec00204 	addi	sp,sp,8
8113b30c:	f800283a 	ret

8113b310 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8113b310:	defff704 	addi	sp,sp,-36
8113b314:	de00012e 	bgeu	sp,et,8113b31c <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
8113b318:	003b68fa 	trap	3
8113b31c:	dfc00815 	stw	ra,32(sp)
8113b320:	df000715 	stw	fp,28(sp)
8113b324:	dc400615 	stw	r17,24(sp)
8113b328:	dc000515 	stw	r16,20(sp)
8113b32c:	df000704 	addi	fp,sp,28
8113b330:	e13ffa15 	stw	r4,-24(fp)
8113b334:	e17ffb15 	stw	r5,-20(fp)
8113b338:	3007883a 	mov	r3,r6
8113b33c:	3805883a 	mov	r2,r7
8113b340:	e0fffc05 	stb	r3,-16(fp)
8113b344:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8113b348:	e13ffb17 	ldw	r4,-20(fp)
8113b34c:	113ae7c0 	call	8113ae7c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8113b350:	10000226 	beq	r2,zero,8113b35c <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
		return -EINVAL;
8113b354:	00bffa84 	movi	r2,-22
8113b358:	00000b06 	br	8113b388 <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8113b35c:	e0bffb17 	ldw	r2,-20(fp)
8113b360:	1021883a 	mov	r16,r2
8113b364:	0023883a 	mov	r17,zero
8113b368:	e0fffc03 	ldbu	r3,-16(fp)
8113b36c:	e0bffd03 	ldbu	r2,-12(fp)
8113b370:	d8800015 	stw	r2,0(sp)
8113b374:	180f883a 	mov	r7,r3
8113b378:	800b883a 	mov	r5,r16
8113b37c:	880d883a 	mov	r6,r17
8113b380:	e13ffa17 	ldw	r4,-24(fp)
8113b384:	113aff80 	call	8113aff8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8113b388:	e6fffe04 	addi	sp,fp,-8
8113b38c:	dfc00317 	ldw	ra,12(sp)
8113b390:	df000217 	ldw	fp,8(sp)
8113b394:	dc400117 	ldw	r17,4(sp)
8113b398:	dc000017 	ldw	r16,0(sp)
8113b39c:	dec00404 	addi	sp,sp,16
8113b3a0:	f800283a 	ret

8113b3a4 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8113b3a4:	defff704 	addi	sp,sp,-36
8113b3a8:	de00012e 	bgeu	sp,et,8113b3b0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
8113b3ac:	003b68fa 	trap	3
8113b3b0:	dfc00815 	stw	ra,32(sp)
8113b3b4:	df000715 	stw	fp,28(sp)
8113b3b8:	dc400615 	stw	r17,24(sp)
8113b3bc:	dc000515 	stw	r16,20(sp)
8113b3c0:	df000704 	addi	fp,sp,28
8113b3c4:	e13ffa15 	stw	r4,-24(fp)
8113b3c8:	e17ffb15 	stw	r5,-20(fp)
8113b3cc:	3007883a 	mov	r3,r6
8113b3d0:	3805883a 	mov	r2,r7
8113b3d4:	e0fffc05 	stb	r3,-16(fp)
8113b3d8:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8113b3dc:	e13ffb17 	ldw	r4,-20(fp)
8113b3e0:	113af1c0 	call	8113af1c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8113b3e4:	10000226 	beq	r2,zero,8113b3f0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		return -EINVAL;
8113b3e8:	00bffa84 	movi	r2,-22
8113b3ec:	00000b06 	br	8113b41c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8113b3f0:	e0bffb17 	ldw	r2,-20(fp)
8113b3f4:	1021883a 	mov	r16,r2
8113b3f8:	0023883a 	mov	r17,zero
8113b3fc:	e0fffc03 	ldbu	r3,-16(fp)
8113b400:	e0bffd03 	ldbu	r2,-12(fp)
8113b404:	d8800015 	stw	r2,0(sp)
8113b408:	180f883a 	mov	r7,r3
8113b40c:	800b883a 	mov	r5,r16
8113b410:	880d883a 	mov	r6,r17
8113b414:	e13ffa17 	ldw	r4,-24(fp)
8113b418:	113aff80 	call	8113aff8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8113b41c:	e6fffe04 	addi	sp,fp,-8
8113b420:	dfc00317 	ldw	ra,12(sp)
8113b424:	df000217 	ldw	fp,8(sp)
8113b428:	dc400117 	ldw	r17,4(sp)
8113b42c:	dc000017 	ldw	r16,0(sp)
8113b430:	dec00404 	addi	sp,sp,16
8113b434:	f800283a 	ret

8113b438 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8113b438:	defffc04 	addi	sp,sp,-16
8113b43c:	de00012e 	bgeu	sp,et,8113b444 <alt_msgdma_open+0xc>
8113b440:	003b68fa 	trap	3
8113b444:	dfc00315 	stw	ra,12(sp)
8113b448:	df000215 	stw	fp,8(sp)
8113b44c:	df000204 	addi	fp,sp,8
8113b450:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8113b454:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8113b458:	d1603504 	addi	r5,gp,-32556
8113b45c:	e13fff17 	ldw	r4,-4(fp)
8113b460:	113baac0 	call	8113baac <alt_find_dev>
8113b464:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8113b468:	e0bffe17 	ldw	r2,-8(fp)
8113b46c:	1000041e 	bne	r2,zero,8113b480 <alt_msgdma_open+0x48>
    {
        ALT_ERRNO = ENODEV;
8113b470:	113969c0 	call	8113969c <alt_get_errno>
8113b474:	1007883a 	mov	r3,r2
8113b478:	008004c4 	movi	r2,19
8113b47c:	18800015 	stw	r2,0(r3)
    }

    return dev;
8113b480:	e0bffe17 	ldw	r2,-8(fp)
}
8113b484:	e037883a 	mov	sp,fp
8113b488:	dfc00117 	ldw	ra,4(sp)
8113b48c:	df000017 	ldw	fp,0(sp)
8113b490:	dec00204 	addi	sp,sp,8
8113b494:	f800283a 	ret

8113b498 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8113b498:	defff604 	addi	sp,sp,-40
8113b49c:	de00012e 	bgeu	sp,et,8113b4a4 <alt_msgdma_init+0xc>
8113b4a0:	003b68fa 	trap	3
8113b4a4:	dfc00915 	stw	ra,36(sp)
8113b4a8:	df000815 	stw	fp,32(sp)
8113b4ac:	df000804 	addi	fp,sp,32
8113b4b0:	e13ffd15 	stw	r4,-12(fp)
8113b4b4:	e17ffe15 	stw	r5,-8(fp)
8113b4b8:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8113b4bc:	e0bffd17 	ldw	r2,-12(fp)
8113b4c0:	10801783 	ldbu	r2,94(r2)
8113b4c4:	10803fcc 	andi	r2,r2,255
8113b4c8:	10000b26 	beq	r2,zero,8113b4f8 <alt_msgdma_init+0x60>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8113b4cc:	e0bffd17 	ldw	r2,-12(fp)
8113b4d0:	10800617 	ldw	r2,24(r2)
8113b4d4:	00c00104 	movi	r3,4
8113b4d8:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8113b4dc:	0001883a 	nop
8113b4e0:	e0bffd17 	ldw	r2,-12(fp)
8113b4e4:	10800617 	ldw	r2,24(r2)
8113b4e8:	10800037 	ldwio	r2,0(r2)
8113b4ec:	1080010c 	andi	r2,r2,4
8113b4f0:	1005d0ba 	srai	r2,r2,2
8113b4f4:	103ffa1e 	bne	r2,zero,8113b4e0 <__reset+0xfb11b4e0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8113b4f8:	e0bffd17 	ldw	r2,-12(fp)
8113b4fc:	10800317 	ldw	r2,12(r2)
8113b500:	10800104 	addi	r2,r2,4
8113b504:	00c00084 	movi	r3,2
8113b508:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113b50c:	0001883a 	nop
8113b510:	e0bffd17 	ldw	r2,-12(fp)
8113b514:	10800317 	ldw	r2,12(r2)
8113b518:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8113b51c:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113b520:	103ffb1e 	bne	r2,zero,8113b510 <__reset+0xfb11b510>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8113b524:	e0bffd17 	ldw	r2,-12(fp)
8113b528:	10800317 	ldw	r2,12(r2)
8113b52c:	10800104 	addi	r2,r2,4
8113b530:	10800037 	ldwio	r2,0(r2)
8113b534:	1007883a 	mov	r3,r2
8113b538:	00bffbc4 	movi	r2,-17
8113b53c:	1884703a 	and	r2,r3,r2
8113b540:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113b544:	e0bff917 	ldw	r2,-28(fp)
8113b548:	10800814 	ori	r2,r2,32
8113b54c:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113b550:	e0bffd17 	ldw	r2,-12(fp)
8113b554:	10800317 	ldw	r2,12(r2)
8113b558:	10800104 	addi	r2,r2,4
8113b55c:	e0fff917 	ldw	r3,-28(fp)
8113b560:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8113b564:	e0bffd17 	ldw	r2,-12(fp)
8113b568:	10800317 	ldw	r2,12(r2)
8113b56c:	e0fffd17 	ldw	r3,-12(fp)
8113b570:	18c00317 	ldw	r3,12(r3)
8113b574:	18c00037 	ldwio	r3,0(r3)
8113b578:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8113b57c:	e0bffd17 	ldw	r2,-12(fp)
8113b580:	10801783 	ldbu	r2,94(r2)
8113b584:	10803fcc 	andi	r2,r2,255
8113b588:	10000826 	beq	r2,zero,8113b5ac <alt_msgdma_init+0x114>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8113b58c:	e0bffd17 	ldw	r2,-12(fp)
8113b590:	10800617 	ldw	r2,24(r2)
8113b594:	10800404 	addi	r2,r2,16
8113b598:	e0fffd17 	ldw	r3,-12(fp)
8113b59c:	18c00617 	ldw	r3,24(r3)
8113b5a0:	18c00404 	addi	r3,r3,16
8113b5a4:	18c00037 	ldwio	r3,0(r3)
8113b5a8:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8113b5ac:	d1603504 	addi	r5,gp,-32556
8113b5b0:	e13ffd17 	ldw	r4,-12(fp)
8113b5b4:	113b9300 	call	8113b930 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8113b5b8:	e0bffd17 	ldw	r2,-12(fp)
8113b5bc:	10801804 	addi	r2,r2,96
8113b5c0:	e0bffb15 	stw	r2,-20(fp)
8113b5c4:	00800044 	movi	r2,1
8113b5c8:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113b5cc:	e0bffc0b 	ldhu	r2,-16(fp)
8113b5d0:	1009883a 	mov	r4,r2
8113b5d4:	112fe7c0 	call	8112fe7c <OSSemCreate>
8113b5d8:	1007883a 	mov	r3,r2
8113b5dc:	e0bffb17 	ldw	r2,-20(fp)
8113b5e0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113b5e4:	e0bffb17 	ldw	r2,-20(fp)
8113b5e8:	10800017 	ldw	r2,0(r2)
8113b5ec:	10000226 	beq	r2,zero,8113b5f8 <alt_msgdma_init+0x160>
8113b5f0:	0005883a 	mov	r2,zero
8113b5f4:	00000106 	br	8113b5fc <alt_msgdma_init+0x164>
8113b5f8:	00bfffc4 	movi	r2,-1
8113b5fc:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
8113b600:	e0bffa17 	ldw	r2,-24(fp)
8113b604:	1000081e 	bne	r2,zero,8113b628 <alt_msgdma_init+0x190>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8113b608:	d8000015 	stw	zero,0(sp)
8113b60c:	e1fffd17 	ldw	r7,-12(fp)
8113b610:	01a04534 	movhi	r6,33044
8113b614:	31a62c04 	addi	r6,r6,-26448
8113b618:	e17fff17 	ldw	r5,-4(fp)
8113b61c:	e13ffe17 	ldw	r4,-8(fp)
8113b620:	113bd380 	call	8113bd38 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8113b624:	00000406 	br	8113b638 <alt_msgdma_init+0x1a0>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8113b628:	01204534 	movhi	r4,33044
8113b62c:	21031f04 	addi	r4,r4,3196
8113b630:	113c1500 	call	8113c150 <alt_printf>
    }
    
    return;
8113b634:	0001883a 	nop

}
8113b638:	e037883a 	mov	sp,fp
8113b63c:	dfc00117 	ldw	ra,4(sp)
8113b640:	df000017 	ldw	fp,0(sp)
8113b644:	dec00204 	addi	sp,sp,8
8113b648:	f800283a 	ret

8113b64c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8113b64c:	defffb04 	addi	sp,sp,-20
8113b650:	de00012e 	bgeu	sp,et,8113b658 <alt_msgdma_register_callback+0xc>
8113b654:	003b68fa 	trap	3
8113b658:	df000415 	stw	fp,16(sp)
8113b65c:	df000404 	addi	fp,sp,16
8113b660:	e13ffc15 	stw	r4,-16(fp)
8113b664:	e17ffd15 	stw	r5,-12(fp)
8113b668:	e1bffe15 	stw	r6,-8(fp)
8113b66c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8113b670:	e0bffc17 	ldw	r2,-16(fp)
8113b674:	e0fffd17 	ldw	r3,-12(fp)
8113b678:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8113b67c:	e0bffc17 	ldw	r2,-16(fp)
8113b680:	e0ffff17 	ldw	r3,-4(fp)
8113b684:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8113b688:	e0bffc17 	ldw	r2,-16(fp)
8113b68c:	e0fffe17 	ldw	r3,-8(fp)
8113b690:	10c00d15 	stw	r3,52(r2)

    return ;
8113b694:	0001883a 	nop
}
8113b698:	e037883a 	mov	sp,fp
8113b69c:	df000017 	ldw	fp,0(sp)
8113b6a0:	dec00104 	addi	sp,sp,4
8113b6a4:	f800283a 	ret

8113b6a8 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113b6a8:	defffc04 	addi	sp,sp,-16
8113b6ac:	de00012e 	bgeu	sp,et,8113b6b4 <alt_msgdma_standard_descriptor_async_transfer+0xc>
8113b6b0:	003b68fa 	trap	3
8113b6b4:	dfc00315 	stw	ra,12(sp)
8113b6b8:	df000215 	stw	fp,8(sp)
8113b6bc:	df000204 	addi	fp,sp,8
8113b6c0:	e13ffe15 	stw	r4,-8(fp)
8113b6c4:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8113b6c8:	000d883a 	mov	r6,zero
8113b6cc:	e17fff17 	ldw	r5,-4(fp)
8113b6d0:	e13ffe17 	ldw	r4,-8(fp)
8113b6d4:	1139c2c0 	call	81139c2c <alt_msgdma_descriptor_async_transfer>

}
8113b6d8:	e037883a 	mov	sp,fp
8113b6dc:	dfc00117 	ldw	ra,4(sp)
8113b6e0:	df000017 	ldw	fp,0(sp)
8113b6e4:	dec00204 	addi	sp,sp,8
8113b6e8:	f800283a 	ret

8113b6ec <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113b6ec:	defffc04 	addi	sp,sp,-16
8113b6f0:	de00012e 	bgeu	sp,et,8113b6f8 <alt_msgdma_extended_descriptor_async_transfer+0xc>
8113b6f4:	003b68fa 	trap	3
8113b6f8:	dfc00315 	stw	ra,12(sp)
8113b6fc:	df000215 	stw	fp,8(sp)
8113b700:	df000204 	addi	fp,sp,8
8113b704:	e13ffe15 	stw	r4,-8(fp)
8113b708:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8113b70c:	e1bfff17 	ldw	r6,-4(fp)
8113b710:	000b883a 	mov	r5,zero
8113b714:	e13ffe17 	ldw	r4,-8(fp)
8113b718:	1139c2c0 	call	81139c2c <alt_msgdma_descriptor_async_transfer>
}
8113b71c:	e037883a 	mov	sp,fp
8113b720:	dfc00117 	ldw	ra,4(sp)
8113b724:	df000017 	ldw	fp,0(sp)
8113b728:	dec00204 	addi	sp,sp,8
8113b72c:	f800283a 	ret

8113b730 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113b730:	defffc04 	addi	sp,sp,-16
8113b734:	de00012e 	bgeu	sp,et,8113b73c <alt_msgdma_standard_descriptor_sync_transfer+0xc>
8113b738:	003b68fa 	trap	3
8113b73c:	dfc00315 	stw	ra,12(sp)
8113b740:	df000215 	stw	fp,8(sp)
8113b744:	df000204 	addi	fp,sp,8
8113b748:	e13ffe15 	stw	r4,-8(fp)
8113b74c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8113b750:	000d883a 	mov	r6,zero
8113b754:	e17fff17 	ldw	r5,-4(fp)
8113b758:	e13ffe17 	ldw	r4,-8(fp)
8113b75c:	1139f6c0 	call	81139f6c <alt_msgdma_descriptor_sync_transfer>
}
8113b760:	e037883a 	mov	sp,fp
8113b764:	dfc00117 	ldw	ra,4(sp)
8113b768:	df000017 	ldw	fp,0(sp)
8113b76c:	dec00204 	addi	sp,sp,8
8113b770:	f800283a 	ret

8113b774 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113b774:	defffc04 	addi	sp,sp,-16
8113b778:	de00012e 	bgeu	sp,et,8113b780 <alt_msgdma_extended_descriptor_sync_transfer+0xc>
8113b77c:	003b68fa 	trap	3
8113b780:	dfc00315 	stw	ra,12(sp)
8113b784:	df000215 	stw	fp,8(sp)
8113b788:	df000204 	addi	fp,sp,8
8113b78c:	e13ffe15 	stw	r4,-8(fp)
8113b790:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8113b794:	e1bfff17 	ldw	r6,-4(fp)
8113b798:	000b883a 	mov	r5,zero
8113b79c:	e13ffe17 	ldw	r4,-8(fp)
8113b7a0:	1139f6c0 	call	81139f6c <alt_msgdma_descriptor_sync_transfer>
}
8113b7a4:	e037883a 	mov	sp,fp
8113b7a8:	dfc00117 	ldw	ra,4(sp)
8113b7ac:	df000017 	ldw	fp,0(sp)
8113b7b0:	dec00204 	addi	sp,sp,8
8113b7b4:	f800283a 	ret

8113b7b8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8113b7b8:	defff504 	addi	sp,sp,-44
8113b7bc:	de00012e 	bgeu	sp,et,8113b7c4 <alt_alarm_start+0xc>
8113b7c0:	003b68fa 	trap	3
8113b7c4:	df000a15 	stw	fp,40(sp)
8113b7c8:	df000a04 	addi	fp,sp,40
8113b7cc:	e13ffc15 	stw	r4,-16(fp)
8113b7d0:	e17ffd15 	stw	r5,-12(fp)
8113b7d4:	e1bffe15 	stw	r6,-8(fp)
8113b7d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8113b7dc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8113b7e0:	d0a07117 	ldw	r2,-32316(gp)
  
  if (alt_ticks_per_second ())
8113b7e4:	10003c26 	beq	r2,zero,8113b8d8 <alt_alarm_start+0x120>
  {
    if (alarm)
8113b7e8:	e0bffc17 	ldw	r2,-16(fp)
8113b7ec:	10003826 	beq	r2,zero,8113b8d0 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
8113b7f0:	e0bffc17 	ldw	r2,-16(fp)
8113b7f4:	e0fffe17 	ldw	r3,-8(fp)
8113b7f8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8113b7fc:	e0bffc17 	ldw	r2,-16(fp)
8113b800:	e0ffff17 	ldw	r3,-4(fp)
8113b804:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b808:	0005303a 	rdctl	r2,status
8113b80c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b810:	e0fff917 	ldw	r3,-28(fp)
8113b814:	00bfff84 	movi	r2,-2
8113b818:	1884703a 	and	r2,r3,r2
8113b81c:	1001703a 	wrctl	status,r2
  
  return context;
8113b820:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8113b824:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8113b828:	d0a07217 	ldw	r2,-32312(gp)
      
      current_nticks = alt_nticks();
8113b82c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8113b830:	e0fffd17 	ldw	r3,-12(fp)
8113b834:	e0bff617 	ldw	r2,-40(fp)
8113b838:	1885883a 	add	r2,r3,r2
8113b83c:	10c00044 	addi	r3,r2,1
8113b840:	e0bffc17 	ldw	r2,-16(fp)
8113b844:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8113b848:	e0bffc17 	ldw	r2,-16(fp)
8113b84c:	10c00217 	ldw	r3,8(r2)
8113b850:	e0bff617 	ldw	r2,-40(fp)
8113b854:	1880042e 	bgeu	r3,r2,8113b868 <alt_alarm_start+0xb0>
      {
        alarm->rollover = 1;
8113b858:	e0bffc17 	ldw	r2,-16(fp)
8113b85c:	00c00044 	movi	r3,1
8113b860:	10c00405 	stb	r3,16(r2)
8113b864:	00000206 	br	8113b870 <alt_alarm_start+0xb8>
      }
      else
      {
        alarm->rollover = 0;
8113b868:	e0bffc17 	ldw	r2,-16(fp)
8113b86c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8113b870:	e0bffc17 	ldw	r2,-16(fp)
8113b874:	d0e01404 	addi	r3,gp,-32688
8113b878:	e0fffa15 	stw	r3,-24(fp)
8113b87c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113b880:	e0bffb17 	ldw	r2,-20(fp)
8113b884:	e0fffa17 	ldw	r3,-24(fp)
8113b888:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113b88c:	e0bffa17 	ldw	r2,-24(fp)
8113b890:	10c00017 	ldw	r3,0(r2)
8113b894:	e0bffb17 	ldw	r2,-20(fp)
8113b898:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113b89c:	e0bffa17 	ldw	r2,-24(fp)
8113b8a0:	10800017 	ldw	r2,0(r2)
8113b8a4:	e0fffb17 	ldw	r3,-20(fp)
8113b8a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113b8ac:	e0bffa17 	ldw	r2,-24(fp)
8113b8b0:	e0fffb17 	ldw	r3,-20(fp)
8113b8b4:	10c00015 	stw	r3,0(r2)
8113b8b8:	e0bff817 	ldw	r2,-32(fp)
8113b8bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b8c0:	e0bff717 	ldw	r2,-36(fp)
8113b8c4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8113b8c8:	0005883a 	mov	r2,zero
8113b8cc:	00000306 	br	8113b8dc <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
8113b8d0:	00bffa84 	movi	r2,-22
8113b8d4:	00000106 	br	8113b8dc <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
8113b8d8:	00bfde84 	movi	r2,-134
  }
}
8113b8dc:	e037883a 	mov	sp,fp
8113b8e0:	df000017 	ldw	fp,0(sp)
8113b8e4:	dec00104 	addi	sp,sp,4
8113b8e8:	f800283a 	ret

8113b8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113b8ec:	defffe04 	addi	sp,sp,-8
8113b8f0:	de00012e 	bgeu	sp,et,8113b8f8 <alt_get_errno+0xc>
8113b8f4:	003b68fa 	trap	3
8113b8f8:	dfc00115 	stw	ra,4(sp)
8113b8fc:	df000015 	stw	fp,0(sp)
8113b900:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113b904:	d0a01017 	ldw	r2,-32704(gp)
8113b908:	10000326 	beq	r2,zero,8113b918 <alt_get_errno+0x2c>
8113b90c:	d0a01017 	ldw	r2,-32704(gp)
8113b910:	103ee83a 	callr	r2
8113b914:	00000106 	br	8113b91c <alt_get_errno+0x30>
8113b918:	d0a06104 	addi	r2,gp,-32380
}
8113b91c:	e037883a 	mov	sp,fp
8113b920:	dfc00117 	ldw	ra,4(sp)
8113b924:	df000017 	ldw	fp,0(sp)
8113b928:	dec00204 	addi	sp,sp,8
8113b92c:	f800283a 	ret

8113b930 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8113b930:	defffa04 	addi	sp,sp,-24
8113b934:	de00012e 	bgeu	sp,et,8113b93c <alt_dev_llist_insert+0xc>
8113b938:	003b68fa 	trap	3
8113b93c:	dfc00515 	stw	ra,20(sp)
8113b940:	df000415 	stw	fp,16(sp)
8113b944:	df000404 	addi	fp,sp,16
8113b948:	e13ffe15 	stw	r4,-8(fp)
8113b94c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8113b950:	e0bffe17 	ldw	r2,-8(fp)
8113b954:	10000326 	beq	r2,zero,8113b964 <alt_dev_llist_insert+0x34>
8113b958:	e0bffe17 	ldw	r2,-8(fp)
8113b95c:	10800217 	ldw	r2,8(r2)
8113b960:	1000061e 	bne	r2,zero,8113b97c <alt_dev_llist_insert+0x4c>
  {
    ALT_ERRNO = EINVAL;
8113b964:	113b8ec0 	call	8113b8ec <alt_get_errno>
8113b968:	1007883a 	mov	r3,r2
8113b96c:	00800584 	movi	r2,22
8113b970:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8113b974:	00bffa84 	movi	r2,-22
8113b978:	00001306 	br	8113b9c8 <alt_dev_llist_insert+0x98>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8113b97c:	e0bffe17 	ldw	r2,-8(fp)
8113b980:	e0ffff17 	ldw	r3,-4(fp)
8113b984:	e0fffc15 	stw	r3,-16(fp)
8113b988:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113b98c:	e0bffd17 	ldw	r2,-12(fp)
8113b990:	e0fffc17 	ldw	r3,-16(fp)
8113b994:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113b998:	e0bffc17 	ldw	r2,-16(fp)
8113b99c:	10c00017 	ldw	r3,0(r2)
8113b9a0:	e0bffd17 	ldw	r2,-12(fp)
8113b9a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113b9a8:	e0bffc17 	ldw	r2,-16(fp)
8113b9ac:	10800017 	ldw	r2,0(r2)
8113b9b0:	e0fffd17 	ldw	r3,-12(fp)
8113b9b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113b9b8:	e0bffc17 	ldw	r2,-16(fp)
8113b9bc:	e0fffd17 	ldw	r3,-12(fp)
8113b9c0:	10c00015 	stw	r3,0(r2)

  return 0;  
8113b9c4:	0005883a 	mov	r2,zero
}
8113b9c8:	e037883a 	mov	sp,fp
8113b9cc:	dfc00117 	ldw	ra,4(sp)
8113b9d0:	df000017 	ldw	fp,0(sp)
8113b9d4:	dec00204 	addi	sp,sp,8
8113b9d8:	f800283a 	ret

8113b9dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8113b9dc:	defffd04 	addi	sp,sp,-12
8113b9e0:	de00012e 	bgeu	sp,et,8113b9e8 <_do_ctors+0xc>
8113b9e4:	003b68fa 	trap	3
8113b9e8:	dfc00215 	stw	ra,8(sp)
8113b9ec:	df000115 	stw	fp,4(sp)
8113b9f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113b9f4:	00a04534 	movhi	r2,33044
8113b9f8:	10b36704 	addi	r2,r2,-12900
8113b9fc:	e0bfff15 	stw	r2,-4(fp)
8113ba00:	00000606 	br	8113ba1c <_do_ctors+0x40>
        (*ctor) (); 
8113ba04:	e0bfff17 	ldw	r2,-4(fp)
8113ba08:	10800017 	ldw	r2,0(r2)
8113ba0c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113ba10:	e0bfff17 	ldw	r2,-4(fp)
8113ba14:	10bfff04 	addi	r2,r2,-4
8113ba18:	e0bfff15 	stw	r2,-4(fp)
8113ba1c:	e0ffff17 	ldw	r3,-4(fp)
8113ba20:	00a04534 	movhi	r2,33044
8113ba24:	10b36804 	addi	r2,r2,-12896
8113ba28:	18bff62e 	bgeu	r3,r2,8113ba04 <__reset+0xfb11ba04>
        (*ctor) (); 
}
8113ba2c:	0001883a 	nop
8113ba30:	e037883a 	mov	sp,fp
8113ba34:	dfc00117 	ldw	ra,4(sp)
8113ba38:	df000017 	ldw	fp,0(sp)
8113ba3c:	dec00204 	addi	sp,sp,8
8113ba40:	f800283a 	ret

8113ba44 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8113ba44:	defffd04 	addi	sp,sp,-12
8113ba48:	de00012e 	bgeu	sp,et,8113ba50 <_do_dtors+0xc>
8113ba4c:	003b68fa 	trap	3
8113ba50:	dfc00215 	stw	ra,8(sp)
8113ba54:	df000115 	stw	fp,4(sp)
8113ba58:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113ba5c:	00a04534 	movhi	r2,33044
8113ba60:	10b36704 	addi	r2,r2,-12900
8113ba64:	e0bfff15 	stw	r2,-4(fp)
8113ba68:	00000606 	br	8113ba84 <_do_dtors+0x40>
        (*dtor) (); 
8113ba6c:	e0bfff17 	ldw	r2,-4(fp)
8113ba70:	10800017 	ldw	r2,0(r2)
8113ba74:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113ba78:	e0bfff17 	ldw	r2,-4(fp)
8113ba7c:	10bfff04 	addi	r2,r2,-4
8113ba80:	e0bfff15 	stw	r2,-4(fp)
8113ba84:	e0ffff17 	ldw	r3,-4(fp)
8113ba88:	00a04534 	movhi	r2,33044
8113ba8c:	10b36804 	addi	r2,r2,-12896
8113ba90:	18bff62e 	bgeu	r3,r2,8113ba6c <__reset+0xfb11ba6c>
        (*dtor) (); 
}
8113ba94:	0001883a 	nop
8113ba98:	e037883a 	mov	sp,fp
8113ba9c:	dfc00117 	ldw	ra,4(sp)
8113baa0:	df000017 	ldw	fp,0(sp)
8113baa4:	dec00204 	addi	sp,sp,8
8113baa8:	f800283a 	ret

8113baac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8113baac:	defffa04 	addi	sp,sp,-24
8113bab0:	de00012e 	bgeu	sp,et,8113bab8 <alt_find_dev+0xc>
8113bab4:	003b68fa 	trap	3
8113bab8:	dfc00515 	stw	ra,20(sp)
8113babc:	df000415 	stw	fp,16(sp)
8113bac0:	df000404 	addi	fp,sp,16
8113bac4:	e13ffe15 	stw	r4,-8(fp)
8113bac8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8113bacc:	e0bfff17 	ldw	r2,-4(fp)
8113bad0:	10800017 	ldw	r2,0(r2)
8113bad4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8113bad8:	e13ffe17 	ldw	r4,-8(fp)
8113badc:	1113ba80 	call	81113ba8 <strlen>
8113bae0:	10800044 	addi	r2,r2,1
8113bae4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113bae8:	00000d06 	br	8113bb20 <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8113baec:	e0bffc17 	ldw	r2,-16(fp)
8113baf0:	10800217 	ldw	r2,8(r2)
8113baf4:	e0fffd17 	ldw	r3,-12(fp)
8113baf8:	180d883a 	mov	r6,r3
8113bafc:	e17ffe17 	ldw	r5,-8(fp)
8113bb00:	1009883a 	mov	r4,r2
8113bb04:	113c8d40 	call	8113c8d4 <memcmp>
8113bb08:	1000021e 	bne	r2,zero,8113bb14 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
8113bb0c:	e0bffc17 	ldw	r2,-16(fp)
8113bb10:	00000706 	br	8113bb30 <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
8113bb14:	e0bffc17 	ldw	r2,-16(fp)
8113bb18:	10800017 	ldw	r2,0(r2)
8113bb1c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113bb20:	e0fffc17 	ldw	r3,-16(fp)
8113bb24:	e0bfff17 	ldw	r2,-4(fp)
8113bb28:	18bff01e 	bne	r3,r2,8113baec <__reset+0xfb11baec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8113bb2c:	0005883a 	mov	r2,zero
}
8113bb30:	e037883a 	mov	sp,fp
8113bb34:	dfc00117 	ldw	ra,4(sp)
8113bb38:	df000017 	ldw	fp,0(sp)
8113bb3c:	dec00204 	addi	sp,sp,8
8113bb40:	f800283a 	ret

8113bb44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8113bb44:	defffb04 	addi	sp,sp,-20
8113bb48:	de00012e 	bgeu	sp,et,8113bb50 <alt_find_file+0xc>
8113bb4c:	003b68fa 	trap	3
8113bb50:	dfc00415 	stw	ra,16(sp)
8113bb54:	df000315 	stw	fp,12(sp)
8113bb58:	df000304 	addi	fp,sp,12
8113bb5c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8113bb60:	d0a00b17 	ldw	r2,-32724(gp)
8113bb64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113bb68:	00003106 	br	8113bc30 <alt_find_file+0xec>
  {
    len = strlen(next->name);
8113bb6c:	e0bffd17 	ldw	r2,-12(fp)
8113bb70:	10800217 	ldw	r2,8(r2)
8113bb74:	1009883a 	mov	r4,r2
8113bb78:	1113ba80 	call	81113ba8 <strlen>
8113bb7c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8113bb80:	e0bffd17 	ldw	r2,-12(fp)
8113bb84:	10c00217 	ldw	r3,8(r2)
8113bb88:	e0bffe17 	ldw	r2,-8(fp)
8113bb8c:	10bfffc4 	addi	r2,r2,-1
8113bb90:	1885883a 	add	r2,r3,r2
8113bb94:	10800003 	ldbu	r2,0(r2)
8113bb98:	10803fcc 	andi	r2,r2,255
8113bb9c:	1080201c 	xori	r2,r2,128
8113bba0:	10bfe004 	addi	r2,r2,-128
8113bba4:	10800bd8 	cmpnei	r2,r2,47
8113bba8:	1000031e 	bne	r2,zero,8113bbb8 <alt_find_file+0x74>
    {
      len -= 1;
8113bbac:	e0bffe17 	ldw	r2,-8(fp)
8113bbb0:	10bfffc4 	addi	r2,r2,-1
8113bbb4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113bbb8:	e0bffe17 	ldw	r2,-8(fp)
8113bbbc:	e0ffff17 	ldw	r3,-4(fp)
8113bbc0:	1885883a 	add	r2,r3,r2
8113bbc4:	10800003 	ldbu	r2,0(r2)
8113bbc8:	10803fcc 	andi	r2,r2,255
8113bbcc:	1080201c 	xori	r2,r2,128
8113bbd0:	10bfe004 	addi	r2,r2,-128
8113bbd4:	10800be0 	cmpeqi	r2,r2,47
8113bbd8:	1000081e 	bne	r2,zero,8113bbfc <alt_find_file+0xb8>
8113bbdc:	e0bffe17 	ldw	r2,-8(fp)
8113bbe0:	e0ffff17 	ldw	r3,-4(fp)
8113bbe4:	1885883a 	add	r2,r3,r2
8113bbe8:	10800003 	ldbu	r2,0(r2)
8113bbec:	10803fcc 	andi	r2,r2,255
8113bbf0:	1080201c 	xori	r2,r2,128
8113bbf4:	10bfe004 	addi	r2,r2,-128
8113bbf8:	10000a1e 	bne	r2,zero,8113bc24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
8113bbfc:	e0bffd17 	ldw	r2,-12(fp)
8113bc00:	10800217 	ldw	r2,8(r2)
8113bc04:	e0fffe17 	ldw	r3,-8(fp)
8113bc08:	180d883a 	mov	r6,r3
8113bc0c:	e17fff17 	ldw	r5,-4(fp)
8113bc10:	1009883a 	mov	r4,r2
8113bc14:	113c8d40 	call	8113c8d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113bc18:	1000021e 	bne	r2,zero,8113bc24 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8113bc1c:	e0bffd17 	ldw	r2,-12(fp)
8113bc20:	00000706 	br	8113bc40 <alt_find_file+0xfc>
    }
    next = (alt_dev*) next->llist.next;
8113bc24:	e0bffd17 	ldw	r2,-12(fp)
8113bc28:	10800017 	ldw	r2,0(r2)
8113bc2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113bc30:	e0fffd17 	ldw	r3,-12(fp)
8113bc34:	d0a00b04 	addi	r2,gp,-32724
8113bc38:	18bfcc1e 	bne	r3,r2,8113bb6c <__reset+0xfb11bb6c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8113bc3c:	0005883a 	mov	r2,zero
}
8113bc40:	e037883a 	mov	sp,fp
8113bc44:	dfc00117 	ldw	ra,4(sp)
8113bc48:	df000017 	ldw	fp,0(sp)
8113bc4c:	dec00204 	addi	sp,sp,8
8113bc50:	f800283a 	ret

8113bc54 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8113bc54:	defff904 	addi	sp,sp,-28
8113bc58:	de00012e 	bgeu	sp,et,8113bc60 <alt_get_fd+0xc>
8113bc5c:	003b68fa 	trap	3
8113bc60:	dfc00615 	stw	ra,24(sp)
8113bc64:	df000515 	stw	fp,20(sp)
8113bc68:	df000504 	addi	fp,sp,20
8113bc6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8113bc70:	00bffa04 	movi	r2,-24
8113bc74:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
8113bc78:	d0a06817 	ldw	r2,-32352(gp)
8113bc7c:	e0bffd15 	stw	r2,-12(fp)
8113bc80:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8113bc84:	e0bffe0b 	ldhu	r2,-8(fp)
8113bc88:	e0fffe84 	addi	r3,fp,-6
8113bc8c:	180d883a 	mov	r6,r3
8113bc90:	100b883a 	mov	r5,r2
8113bc94:	e13ffd17 	ldw	r4,-12(fp)
8113bc98:	11301a40 	call	811301a4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113bc9c:	e03ffb15 	stw	zero,-20(fp)
8113bca0:	00001906 	br	8113bd08 <alt_get_fd+0xb4>
  {
    if (!alt_fd_list[i].dev)
8113bca4:	00a04534 	movhi	r2,33044
8113bca8:	10858e04 	addi	r2,r2,5688
8113bcac:	e0fffb17 	ldw	r3,-20(fp)
8113bcb0:	18c00324 	muli	r3,r3,12
8113bcb4:	10c5883a 	add	r2,r2,r3
8113bcb8:	10800017 	ldw	r2,0(r2)
8113bcbc:	10000f1e 	bne	r2,zero,8113bcfc <alt_get_fd+0xa8>
    {
      alt_fd_list[i].dev = dev;
8113bcc0:	00a04534 	movhi	r2,33044
8113bcc4:	10858e04 	addi	r2,r2,5688
8113bcc8:	e0fffb17 	ldw	r3,-20(fp)
8113bccc:	18c00324 	muli	r3,r3,12
8113bcd0:	10c5883a 	add	r2,r2,r3
8113bcd4:	e0ffff17 	ldw	r3,-4(fp)
8113bcd8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8113bcdc:	d0e00f17 	ldw	r3,-32708(gp)
8113bce0:	e0bffb17 	ldw	r2,-20(fp)
8113bce4:	1880020e 	bge	r3,r2,8113bcf0 <alt_get_fd+0x9c>
      {
        alt_max_fd = i;
8113bce8:	e0bffb17 	ldw	r2,-20(fp)
8113bcec:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
8113bcf0:	e0bffb17 	ldw	r2,-20(fp)
8113bcf4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
8113bcf8:	00000606 	br	8113bd14 <alt_get_fd+0xc0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113bcfc:	e0bffb17 	ldw	r2,-20(fp)
8113bd00:	10800044 	addi	r2,r2,1
8113bd04:	e0bffb15 	stw	r2,-20(fp)
8113bd08:	e0bffb17 	ldw	r2,-20(fp)
8113bd0c:	10800810 	cmplti	r2,r2,32
8113bd10:	103fe41e 	bne	r2,zero,8113bca4 <__reset+0xfb11bca4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
8113bd14:	d0a06817 	ldw	r2,-32352(gp)
8113bd18:	1009883a 	mov	r4,r2
8113bd1c:	113052c0 	call	8113052c <OSSemPost>

  return rc;
8113bd20:	e0bffc17 	ldw	r2,-16(fp)
}
8113bd24:	e037883a 	mov	sp,fp
8113bd28:	dfc00117 	ldw	ra,4(sp)
8113bd2c:	df000017 	ldw	fp,0(sp)
8113bd30:	dec00204 	addi	sp,sp,8
8113bd34:	f800283a 	ret

8113bd38 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113bd38:	defff904 	addi	sp,sp,-28
8113bd3c:	de00012e 	bgeu	sp,et,8113bd44 <alt_ic_isr_register+0xc>
8113bd40:	003b68fa 	trap	3
8113bd44:	dfc00615 	stw	ra,24(sp)
8113bd48:	df000515 	stw	fp,20(sp)
8113bd4c:	df000504 	addi	fp,sp,20
8113bd50:	e13ffc15 	stw	r4,-16(fp)
8113bd54:	e17ffd15 	stw	r5,-12(fp)
8113bd58:	e1bffe15 	stw	r6,-8(fp)
8113bd5c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8113bd60:	e0800217 	ldw	r2,8(fp)
8113bd64:	d8800015 	stw	r2,0(sp)
8113bd68:	e1ffff17 	ldw	r7,-4(fp)
8113bd6c:	e1bffe17 	ldw	r6,-8(fp)
8113bd70:	e17ffd17 	ldw	r5,-12(fp)
8113bd74:	e13ffc17 	ldw	r4,-16(fp)
8113bd78:	113bf080 	call	8113bf08 <alt_iic_isr_register>
}  
8113bd7c:	e037883a 	mov	sp,fp
8113bd80:	dfc00117 	ldw	ra,4(sp)
8113bd84:	df000017 	ldw	fp,0(sp)
8113bd88:	dec00204 	addi	sp,sp,8
8113bd8c:	f800283a 	ret

8113bd90 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8113bd90:	defff904 	addi	sp,sp,-28
8113bd94:	de00012e 	bgeu	sp,et,8113bd9c <alt_ic_irq_enable+0xc>
8113bd98:	003b68fa 	trap	3
8113bd9c:	df000615 	stw	fp,24(sp)
8113bda0:	df000604 	addi	fp,sp,24
8113bda4:	e13ffe15 	stw	r4,-8(fp)
8113bda8:	e17fff15 	stw	r5,-4(fp)
8113bdac:	e0bfff17 	ldw	r2,-4(fp)
8113bdb0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113bdb4:	0005303a 	rdctl	r2,status
8113bdb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113bdbc:	e0fffb17 	ldw	r3,-20(fp)
8113bdc0:	00bfff84 	movi	r2,-2
8113bdc4:	1884703a 	and	r2,r3,r2
8113bdc8:	1001703a 	wrctl	status,r2
  
  return context;
8113bdcc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113bdd0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8113bdd4:	00c00044 	movi	r3,1
8113bdd8:	e0bffa17 	ldw	r2,-24(fp)
8113bddc:	1884983a 	sll	r2,r3,r2
8113bde0:	1007883a 	mov	r3,r2
8113bde4:	d0a06917 	ldw	r2,-32348(gp)
8113bde8:	1884b03a 	or	r2,r3,r2
8113bdec:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113bdf0:	d0a06917 	ldw	r2,-32348(gp)
8113bdf4:	100170fa 	wrctl	ienable,r2
8113bdf8:	e0bffc17 	ldw	r2,-16(fp)
8113bdfc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113be00:	e0bffd17 	ldw	r2,-12(fp)
8113be04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113be08:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8113be0c:	0001883a 	nop
}
8113be10:	e037883a 	mov	sp,fp
8113be14:	df000017 	ldw	fp,0(sp)
8113be18:	dec00104 	addi	sp,sp,4
8113be1c:	f800283a 	ret

8113be20 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8113be20:	defff904 	addi	sp,sp,-28
8113be24:	de00012e 	bgeu	sp,et,8113be2c <alt_ic_irq_disable+0xc>
8113be28:	003b68fa 	trap	3
8113be2c:	df000615 	stw	fp,24(sp)
8113be30:	df000604 	addi	fp,sp,24
8113be34:	e13ffe15 	stw	r4,-8(fp)
8113be38:	e17fff15 	stw	r5,-4(fp)
8113be3c:	e0bfff17 	ldw	r2,-4(fp)
8113be40:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113be44:	0005303a 	rdctl	r2,status
8113be48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113be4c:	e0fffb17 	ldw	r3,-20(fp)
8113be50:	00bfff84 	movi	r2,-2
8113be54:	1884703a 	and	r2,r3,r2
8113be58:	1001703a 	wrctl	status,r2
  
  return context;
8113be5c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113be60:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8113be64:	00c00044 	movi	r3,1
8113be68:	e0bffa17 	ldw	r2,-24(fp)
8113be6c:	1884983a 	sll	r2,r3,r2
8113be70:	0084303a 	nor	r2,zero,r2
8113be74:	1007883a 	mov	r3,r2
8113be78:	d0a06917 	ldw	r2,-32348(gp)
8113be7c:	1884703a 	and	r2,r3,r2
8113be80:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113be84:	d0a06917 	ldw	r2,-32348(gp)
8113be88:	100170fa 	wrctl	ienable,r2
8113be8c:	e0bffc17 	ldw	r2,-16(fp)
8113be90:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113be94:	e0bffd17 	ldw	r2,-12(fp)
8113be98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113be9c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8113bea0:	0001883a 	nop
}
8113bea4:	e037883a 	mov	sp,fp
8113bea8:	df000017 	ldw	fp,0(sp)
8113beac:	dec00104 	addi	sp,sp,4
8113beb0:	f800283a 	ret

8113beb4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8113beb4:	defffc04 	addi	sp,sp,-16
8113beb8:	de00012e 	bgeu	sp,et,8113bec0 <alt_ic_irq_enabled+0xc>
8113bebc:	003b68fa 	trap	3
8113bec0:	df000315 	stw	fp,12(sp)
8113bec4:	df000304 	addi	fp,sp,12
8113bec8:	e13ffe15 	stw	r4,-8(fp)
8113becc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8113bed0:	000530fa 	rdctl	r2,ienable
8113bed4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8113bed8:	00c00044 	movi	r3,1
8113bedc:	e0bfff17 	ldw	r2,-4(fp)
8113bee0:	1884983a 	sll	r2,r3,r2
8113bee4:	1007883a 	mov	r3,r2
8113bee8:	e0bffd17 	ldw	r2,-12(fp)
8113beec:	1884703a 	and	r2,r3,r2
8113bef0:	1004c03a 	cmpne	r2,r2,zero
8113bef4:	10803fcc 	andi	r2,r2,255
}
8113bef8:	e037883a 	mov	sp,fp
8113befc:	df000017 	ldw	fp,0(sp)
8113bf00:	dec00104 	addi	sp,sp,4
8113bf04:	f800283a 	ret

8113bf08 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113bf08:	defff504 	addi	sp,sp,-44
8113bf0c:	de00012e 	bgeu	sp,et,8113bf14 <alt_iic_isr_register+0xc>
8113bf10:	003b68fa 	trap	3
8113bf14:	dfc00a15 	stw	ra,40(sp)
8113bf18:	df000915 	stw	fp,36(sp)
8113bf1c:	df000904 	addi	fp,sp,36
8113bf20:	e13ffc15 	stw	r4,-16(fp)
8113bf24:	e17ffd15 	stw	r5,-12(fp)
8113bf28:	e1bffe15 	stw	r6,-8(fp)
8113bf2c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8113bf30:	00bffa84 	movi	r2,-22
8113bf34:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8113bf38:	e0bffd17 	ldw	r2,-12(fp)
8113bf3c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8113bf40:	e0bff817 	ldw	r2,-32(fp)
8113bf44:	10800808 	cmpgei	r2,r2,32
8113bf48:	1000271e 	bne	r2,zero,8113bfe8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113bf4c:	0005303a 	rdctl	r2,status
8113bf50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113bf54:	e0fffb17 	ldw	r3,-20(fp)
8113bf58:	00bfff84 	movi	r2,-2
8113bf5c:	1884703a 	and	r2,r3,r2
8113bf60:	1001703a 	wrctl	status,r2
  
  return context;
8113bf64:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8113bf68:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8113bf6c:	00a04574 	movhi	r2,33045
8113bf70:	10834a04 	addi	r2,r2,3368
8113bf74:	e0fff817 	ldw	r3,-32(fp)
8113bf78:	180690fa 	slli	r3,r3,3
8113bf7c:	10c5883a 	add	r2,r2,r3
8113bf80:	e0fffe17 	ldw	r3,-8(fp)
8113bf84:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8113bf88:	00a04574 	movhi	r2,33045
8113bf8c:	10834a04 	addi	r2,r2,3368
8113bf90:	e0fff817 	ldw	r3,-32(fp)
8113bf94:	180690fa 	slli	r3,r3,3
8113bf98:	10c5883a 	add	r2,r2,r3
8113bf9c:	10800104 	addi	r2,r2,4
8113bfa0:	e0ffff17 	ldw	r3,-4(fp)
8113bfa4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8113bfa8:	e0bffe17 	ldw	r2,-8(fp)
8113bfac:	10000526 	beq	r2,zero,8113bfc4 <alt_iic_isr_register+0xbc>
8113bfb0:	e0bff817 	ldw	r2,-32(fp)
8113bfb4:	100b883a 	mov	r5,r2
8113bfb8:	e13ffc17 	ldw	r4,-16(fp)
8113bfbc:	113bd900 	call	8113bd90 <alt_ic_irq_enable>
8113bfc0:	00000406 	br	8113bfd4 <alt_iic_isr_register+0xcc>
8113bfc4:	e0bff817 	ldw	r2,-32(fp)
8113bfc8:	100b883a 	mov	r5,r2
8113bfcc:	e13ffc17 	ldw	r4,-16(fp)
8113bfd0:	113be200 	call	8113be20 <alt_ic_irq_disable>
8113bfd4:	e0bff715 	stw	r2,-36(fp)
8113bfd8:	e0bffa17 	ldw	r2,-24(fp)
8113bfdc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113bfe0:	e0bff917 	ldw	r2,-28(fp)
8113bfe4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8113bfe8:	e0bff717 	ldw	r2,-36(fp)
}
8113bfec:	e037883a 	mov	sp,fp
8113bff0:	dfc00117 	ldw	ra,4(sp)
8113bff4:	df000017 	ldw	fp,0(sp)
8113bff8:	dec00204 	addi	sp,sp,8
8113bffc:	f800283a 	ret

8113c000 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8113c000:	defff904 	addi	sp,sp,-28
8113c004:	de00012e 	bgeu	sp,et,8113c00c <alt_open_fd+0xc>
8113c008:	003b68fa 	trap	3
8113c00c:	dfc00615 	stw	ra,24(sp)
8113c010:	df000515 	stw	fp,20(sp)
8113c014:	df000504 	addi	fp,sp,20
8113c018:	e13ffc15 	stw	r4,-16(fp)
8113c01c:	e17ffd15 	stw	r5,-12(fp)
8113c020:	e1bffe15 	stw	r6,-8(fp)
8113c024:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8113c028:	e1bfff17 	ldw	r6,-4(fp)
8113c02c:	e17ffe17 	ldw	r5,-8(fp)
8113c030:	e13ffd17 	ldw	r4,-12(fp)
8113c034:	1128d5c0 	call	81128d5c <open>
8113c038:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8113c03c:	e0bffb17 	ldw	r2,-20(fp)
8113c040:	10001c16 	blt	r2,zero,8113c0b4 <alt_open_fd+0xb4>
  {
    fd->dev      = alt_fd_list[old].dev;
8113c044:	00a04534 	movhi	r2,33044
8113c048:	10858e04 	addi	r2,r2,5688
8113c04c:	e0fffb17 	ldw	r3,-20(fp)
8113c050:	18c00324 	muli	r3,r3,12
8113c054:	10c5883a 	add	r2,r2,r3
8113c058:	10c00017 	ldw	r3,0(r2)
8113c05c:	e0bffc17 	ldw	r2,-16(fp)
8113c060:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8113c064:	00a04534 	movhi	r2,33044
8113c068:	10858e04 	addi	r2,r2,5688
8113c06c:	e0fffb17 	ldw	r3,-20(fp)
8113c070:	18c00324 	muli	r3,r3,12
8113c074:	10c5883a 	add	r2,r2,r3
8113c078:	10800104 	addi	r2,r2,4
8113c07c:	10c00017 	ldw	r3,0(r2)
8113c080:	e0bffc17 	ldw	r2,-16(fp)
8113c084:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8113c088:	00a04534 	movhi	r2,33044
8113c08c:	10858e04 	addi	r2,r2,5688
8113c090:	e0fffb17 	ldw	r3,-20(fp)
8113c094:	18c00324 	muli	r3,r3,12
8113c098:	10c5883a 	add	r2,r2,r3
8113c09c:	10800204 	addi	r2,r2,8
8113c0a0:	10c00017 	ldw	r3,0(r2)
8113c0a4:	e0bffc17 	ldw	r2,-16(fp)
8113c0a8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8113c0ac:	e13ffb17 	ldw	r4,-20(fp)
8113c0b0:	11290000 	call	81129000 <alt_release_fd>
  }
} 
8113c0b4:	0001883a 	nop
8113c0b8:	e037883a 	mov	sp,fp
8113c0bc:	dfc00117 	ldw	ra,4(sp)
8113c0c0:	df000017 	ldw	fp,0(sp)
8113c0c4:	dec00204 	addi	sp,sp,8
8113c0c8:	f800283a 	ret

8113c0cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8113c0cc:	defffb04 	addi	sp,sp,-20
8113c0d0:	de00012e 	bgeu	sp,et,8113c0d8 <alt_io_redirect+0xc>
8113c0d4:	003b68fa 	trap	3
8113c0d8:	dfc00415 	stw	ra,16(sp)
8113c0dc:	df000315 	stw	fp,12(sp)
8113c0e0:	df000304 	addi	fp,sp,12
8113c0e4:	e13ffd15 	stw	r4,-12(fp)
8113c0e8:	e17ffe15 	stw	r5,-8(fp)
8113c0ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8113c0f0:	01c07fc4 	movi	r7,511
8113c0f4:	01800044 	movi	r6,1
8113c0f8:	e17ffd17 	ldw	r5,-12(fp)
8113c0fc:	01204534 	movhi	r4,33044
8113c100:	21059104 	addi	r4,r4,5700
8113c104:	113c0000 	call	8113c000 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8113c108:	01c07fc4 	movi	r7,511
8113c10c:	000d883a 	mov	r6,zero
8113c110:	e17ffe17 	ldw	r5,-8(fp)
8113c114:	01204534 	movhi	r4,33044
8113c118:	21058e04 	addi	r4,r4,5688
8113c11c:	113c0000 	call	8113c000 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8113c120:	01c07fc4 	movi	r7,511
8113c124:	01800044 	movi	r6,1
8113c128:	e17fff17 	ldw	r5,-4(fp)
8113c12c:	01204534 	movhi	r4,33044
8113c130:	21059404 	addi	r4,r4,5712
8113c134:	113c0000 	call	8113c000 <alt_open_fd>
}  
8113c138:	0001883a 	nop
8113c13c:	e037883a 	mov	sp,fp
8113c140:	dfc00117 	ldw	ra,4(sp)
8113c144:	df000017 	ldw	fp,0(sp)
8113c148:	dec00204 	addi	sp,sp,8
8113c14c:	f800283a 	ret

8113c150 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8113c150:	defff204 	addi	sp,sp,-56
8113c154:	de00012e 	bgeu	sp,et,8113c15c <alt_printf+0xc>
8113c158:	003b68fa 	trap	3
8113c15c:	dfc00a15 	stw	ra,40(sp)
8113c160:	df000915 	stw	fp,36(sp)
8113c164:	df000904 	addi	fp,sp,36
8113c168:	e13fff15 	stw	r4,-4(fp)
8113c16c:	e1400215 	stw	r5,8(fp)
8113c170:	e1800315 	stw	r6,12(fp)
8113c174:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8113c178:	e0800204 	addi	r2,fp,8
8113c17c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8113c180:	e0bfff17 	ldw	r2,-4(fp)
8113c184:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8113c188:	00006f06 	br	8113c348 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8113c18c:	e0bff807 	ldb	r2,-32(fp)
8113c190:	10800960 	cmpeqi	r2,r2,37
8113c194:	1000041e 	bne	r2,zero,8113c1a8 <alt_printf+0x58>
        {
            alt_putchar(c);
8113c198:	e0bff807 	ldb	r2,-32(fp)
8113c19c:	1009883a 	mov	r4,r2
8113c1a0:	113c3840 	call	8113c384 <alt_putchar>
8113c1a4:	00006806 	br	8113c348 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8113c1a8:	e0bff717 	ldw	r2,-36(fp)
8113c1ac:	10c00044 	addi	r3,r2,1
8113c1b0:	e0fff715 	stw	r3,-36(fp)
8113c1b4:	10800003 	ldbu	r2,0(r2)
8113c1b8:	e0bff805 	stb	r2,-32(fp)
8113c1bc:	e0bff807 	ldb	r2,-32(fp)
8113c1c0:	10006926 	beq	r2,zero,8113c368 <alt_printf+0x218>
            {
                if (c == '%')
8113c1c4:	e0bff807 	ldb	r2,-32(fp)
8113c1c8:	10800958 	cmpnei	r2,r2,37
8113c1cc:	1000041e 	bne	r2,zero,8113c1e0 <alt_printf+0x90>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8113c1d0:	e0bff807 	ldb	r2,-32(fp)
8113c1d4:	1009883a 	mov	r4,r2
8113c1d8:	113c3840 	call	8113c384 <alt_putchar>
8113c1dc:	00005a06 	br	8113c348 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
8113c1e0:	e0bff807 	ldb	r2,-32(fp)
8113c1e4:	108018d8 	cmpnei	r2,r2,99
8113c1e8:	1000081e 	bne	r2,zero,8113c20c <alt_printf+0xbc>
                {
                    int v = va_arg(args, int);
8113c1ec:	e0bffe17 	ldw	r2,-8(fp)
8113c1f0:	10c00104 	addi	r3,r2,4
8113c1f4:	e0fffe15 	stw	r3,-8(fp)
8113c1f8:	10800017 	ldw	r2,0(r2)
8113c1fc:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8113c200:	e13ffd17 	ldw	r4,-12(fp)
8113c204:	113c3840 	call	8113c384 <alt_putchar>
8113c208:	00004f06 	br	8113c348 <alt_printf+0x1f8>
                }
                else if (c == 'x')
8113c20c:	e0bff807 	ldb	r2,-32(fp)
8113c210:	10801e18 	cmpnei	r2,r2,120
8113c214:	1000341e 	bne	r2,zero,8113c2e8 <alt_printf+0x198>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8113c218:	e0bffe17 	ldw	r2,-8(fp)
8113c21c:	10c00104 	addi	r3,r2,4
8113c220:	e0fffe15 	stw	r3,-8(fp)
8113c224:	10800017 	ldw	r2,0(r2)
8113c228:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8113c22c:	e0bffb17 	ldw	r2,-20(fp)
8113c230:	1000031e 	bne	r2,zero,8113c240 <alt_printf+0xf0>
                    {
                        alt_putchar('0');
8113c234:	01000c04 	movi	r4,48
8113c238:	113c3840 	call	8113c384 <alt_putchar>
                        continue;
8113c23c:	00004206 	br	8113c348 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8113c240:	00800704 	movi	r2,28
8113c244:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8113c248:	00000306 	br	8113c258 <alt_printf+0x108>
                        digit_shift -= 4;
8113c24c:	e0bff917 	ldw	r2,-28(fp)
8113c250:	10bfff04 	addi	r2,r2,-4
8113c254:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8113c258:	00c003c4 	movi	r3,15
8113c25c:	e0bff917 	ldw	r2,-28(fp)
8113c260:	1884983a 	sll	r2,r3,r2
8113c264:	1007883a 	mov	r3,r2
8113c268:	e0bffb17 	ldw	r2,-20(fp)
8113c26c:	1884703a 	and	r2,r3,r2
8113c270:	103ff626 	beq	r2,zero,8113c24c <__reset+0xfb11c24c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113c274:	00001906 	br	8113c2dc <alt_printf+0x18c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8113c278:	00c003c4 	movi	r3,15
8113c27c:	e0bff917 	ldw	r2,-28(fp)
8113c280:	1884983a 	sll	r2,r3,r2
8113c284:	1007883a 	mov	r3,r2
8113c288:	e0bffb17 	ldw	r2,-20(fp)
8113c28c:	1886703a 	and	r3,r3,r2
8113c290:	e0bff917 	ldw	r2,-28(fp)
8113c294:	1884d83a 	srl	r2,r3,r2
8113c298:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8113c29c:	e0bffc17 	ldw	r2,-16(fp)
8113c2a0:	108002a8 	cmpgeui	r2,r2,10
8113c2a4:	1000041e 	bne	r2,zero,8113c2b8 <alt_printf+0x168>
                            c = '0' + digit;
8113c2a8:	e0bffc17 	ldw	r2,-16(fp)
8113c2ac:	10800c04 	addi	r2,r2,48
8113c2b0:	e0bff805 	stb	r2,-32(fp)
8113c2b4:	00000306 	br	8113c2c4 <alt_printf+0x174>
                        else
                            c = 'a' + digit - 10;
8113c2b8:	e0bffc17 	ldw	r2,-16(fp)
8113c2bc:	108015c4 	addi	r2,r2,87
8113c2c0:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8113c2c4:	e0bff807 	ldb	r2,-32(fp)
8113c2c8:	1009883a 	mov	r4,r2
8113c2cc:	113c3840 	call	8113c384 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113c2d0:	e0bff917 	ldw	r2,-28(fp)
8113c2d4:	10bfff04 	addi	r2,r2,-4
8113c2d8:	e0bff915 	stw	r2,-28(fp)
8113c2dc:	e0bff917 	ldw	r2,-28(fp)
8113c2e0:	103fe50e 	bge	r2,zero,8113c278 <__reset+0xfb11c278>
8113c2e4:	00001806 	br	8113c348 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8113c2e8:	e0bff807 	ldb	r2,-32(fp)
8113c2ec:	10801cd8 	cmpnei	r2,r2,115
8113c2f0:	1000151e 	bne	r2,zero,8113c348 <alt_printf+0x1f8>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8113c2f4:	e0bffe17 	ldw	r2,-8(fp)
8113c2f8:	10c00104 	addi	r3,r2,4
8113c2fc:	e0fffe15 	stw	r3,-8(fp)
8113c300:	10800017 	ldw	r2,0(r2)
8113c304:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8113c308:	00000906 	br	8113c330 <alt_printf+0x1e0>
                      alt_putchar(*s++);
8113c30c:	e0bffa17 	ldw	r2,-24(fp)
8113c310:	10c00044 	addi	r3,r2,1
8113c314:	e0fffa15 	stw	r3,-24(fp)
8113c318:	10800003 	ldbu	r2,0(r2)
8113c31c:	10803fcc 	andi	r2,r2,255
8113c320:	1080201c 	xori	r2,r2,128
8113c324:	10bfe004 	addi	r2,r2,-128
8113c328:	1009883a 	mov	r4,r2
8113c32c:	113c3840 	call	8113c384 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8113c330:	e0bffa17 	ldw	r2,-24(fp)
8113c334:	10800003 	ldbu	r2,0(r2)
8113c338:	10803fcc 	andi	r2,r2,255
8113c33c:	1080201c 	xori	r2,r2,128
8113c340:	10bfe004 	addi	r2,r2,-128
8113c344:	103ff11e 	bne	r2,zero,8113c30c <__reset+0xfb11c30c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8113c348:	e0bff717 	ldw	r2,-36(fp)
8113c34c:	10c00044 	addi	r3,r2,1
8113c350:	e0fff715 	stw	r3,-36(fp)
8113c354:	10800003 	ldbu	r2,0(r2)
8113c358:	e0bff805 	stb	r2,-32(fp)
8113c35c:	e0bff807 	ldb	r2,-32(fp)
8113c360:	103f8a1e 	bne	r2,zero,8113c18c <__reset+0xfb11c18c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113c364:	00000106 	br	8113c36c <alt_printf+0x21c>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8113c368:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113c36c:	0001883a 	nop
8113c370:	e037883a 	mov	sp,fp
8113c374:	dfc00117 	ldw	ra,4(sp)
8113c378:	df000017 	ldw	fp,0(sp)
8113c37c:	dec00504 	addi	sp,sp,20
8113c380:	f800283a 	ret

8113c384 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8113c384:	defffd04 	addi	sp,sp,-12
8113c388:	de00012e 	bgeu	sp,et,8113c390 <alt_putchar+0xc>
8113c38c:	003b68fa 	trap	3
8113c390:	dfc00215 	stw	ra,8(sp)
8113c394:	df000115 	stw	fp,4(sp)
8113c398:	df000104 	addi	fp,sp,4
8113c39c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8113c3a0:	d0a00517 	ldw	r2,-32748(gp)
8113c3a4:	10800217 	ldw	r2,8(r2)
8113c3a8:	100b883a 	mov	r5,r2
8113c3ac:	e13fff17 	ldw	r4,-4(fp)
8113c3b0:	11134b80 	call	811134b8 <putc>
#endif
#endif
}
8113c3b4:	e037883a 	mov	sp,fp
8113c3b8:	dfc00117 	ldw	ra,4(sp)
8113c3bc:	df000017 	ldw	fp,0(sp)
8113c3c0:	dec00204 	addi	sp,sp,8
8113c3c4:	f800283a 	ret

8113c3c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8113c3c8:	deffff04 	addi	sp,sp,-4
8113c3cc:	de00012e 	bgeu	sp,et,8113c3d4 <altera_nios2_gen2_irq_init+0xc>
8113c3d0:	003b68fa 	trap	3
8113c3d4:	df000015 	stw	fp,0(sp)
8113c3d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8113c3dc:	000170fa 	wrctl	ienable,zero
}
8113c3e0:	0001883a 	nop
8113c3e4:	e037883a 	mov	sp,fp
8113c3e8:	df000017 	ldw	fp,0(sp)
8113c3ec:	dec00104 	addi	sp,sp,4
8113c3f0:	f800283a 	ret

8113c3f4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
8113c3f4:	defff504 	addi	sp,sp,-44

#ifdef ALT_STACK_CHECK

      bltu  sp, et, .Lstack_overflow
8113c3f8:	de002436 	bltu	sp,et,8113c48c <OSCtxSw+0x98>

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
8113c3fc:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
8113c400:	d1208b17 	ldw	r4,-32212(gp)

      stw ra,  0(sp)
8113c404:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
8113c408:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
8113c40c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
8113c410:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
8113c414:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
8113c418:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
8113c41c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
8113c420:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
8113c424:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
8113c428:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
8113c42c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
8113c430:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113c434:	113c6900 	call	8113c690 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
8113c438:	d1208517 	ldw	r4,-32236(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
8113c43c:	d1607c87 	ldb	r5,-32270(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
8113c440:	d1208b15 	stw	r4,-32212(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
8113c444:	d1607cc5 	stb	r5,-32269(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
8113c448:	26c00017 	ldw	sp,0(r4)
      
#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      ldw et, 8(r4)                  /* load the new stack limit */
8113c44c:	26000217 	ldw	et,8(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
8113c450:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
8113c454:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
8113c458:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
8113c45c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
8113c460:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
8113c464:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
8113c468:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
8113c46c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
8113c470:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
8113c474:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
8113c478:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
8113c47c:	d0e00515 	stw	r3,-32748(gp)

#endif /* OS_THREAD_SAFE_NEWLIB */

#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      stw et, %gprel(alt_stack_limit_value)(gp)
8113c480:	d6200015 	stw	et,-32768(gp)

#endif

      addi sp, sp, 44
8113c484:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
8113c488:	f800283a 	ret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
8113c48c:	003da0fa 	break	3

8113c490 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
8113c490:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
8113c494:	047fff84 	movi	r17,-2
      and   r18, r18, r17
8113c498:	9464703a 	and	r18,r18,r17
      wrctl status, r18
8113c49c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113c4a0:	113c6900 	call	8113c690 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
8113c4a4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
8113c4a8:	d4a07a05 	stb	r18,-32280(gp)

      /*
       * start execution of the new task.
       */

      br 9b
8113c4ac:	003fe206 	br	8113c438 <__reset+0xfb11c438>

8113c4b0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
8113c4b0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
8113c4b4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
8113c4b8:	10800054 	ori	r2,r2,1
      wrctl status, r2
8113c4bc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
8113c4c0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
8113c4c4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
8113c4c8:	dec00204 	addi	sp,sp,8

      callr r2
8113c4cc:	103ee83a 	callr	r2

      nop
8113c4d0:	0001883a 	nop

8113c4d4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
8113c4d4:	defff704 	addi	sp,sp,-36
8113c4d8:	de00012e 	bgeu	sp,et,8113c4e0 <OSTaskStkInit+0xc>
8113c4dc:	003b68fa 	trap	3
8113c4e0:	dfc00815 	stw	ra,32(sp)
8113c4e4:	df000715 	stw	fp,28(sp)
8113c4e8:	df000704 	addi	fp,sp,28
8113c4ec:	e13ffc15 	stw	r4,-16(fp)
8113c4f0:	e17ffd15 	stw	r5,-12(fp)
8113c4f4:	e1bffe15 	stw	r6,-8(fp)
8113c4f8:	3805883a 	mov	r2,r7
8113c4fc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
8113c500:	e0fffe17 	ldw	r3,-8(fp)
8113c504:	00bfff04 	movi	r2,-4
8113c508:	1884703a 	and	r2,r3,r2
8113c50c:	10bef704 	addi	r2,r2,-1060
8113c510:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
8113c514:	01810904 	movi	r6,1060
8113c518:	000b883a 	mov	r5,zero
8113c51c:	e13ff917 	ldw	r4,-28(fp)
8113c520:	11132040 	call	81113204 <memset>
8113c524:	e0bff917 	ldw	r2,-28(fp)
8113c528:	10c0bb04 	addi	r3,r2,748
8113c52c:	e0bff917 	ldw	r2,-28(fp)
8113c530:	10c00115 	stw	r3,4(r2)
8113c534:	e0bff917 	ldw	r2,-28(fp)
8113c538:	10c0d504 	addi	r3,r2,852
8113c53c:	e0bff917 	ldw	r2,-28(fp)
8113c540:	10c00215 	stw	r3,8(r2)
8113c544:	e0bff917 	ldw	r2,-28(fp)
8113c548:	10c0ef04 	addi	r3,r2,956
8113c54c:	e0bff917 	ldw	r2,-28(fp)
8113c550:	10c00315 	stw	r3,12(r2)
8113c554:	e0fff917 	ldw	r3,-28(fp)
8113c558:	00a04534 	movhi	r2,33044
8113c55c:	10832704 	addi	r2,r2,3228
8113c560:	18800d15 	stw	r2,52(r3)
8113c564:	e0bff917 	ldw	r2,-28(fp)
8113c568:	00c00044 	movi	r3,1
8113c56c:	10c02915 	stw	r3,164(r2)
8113c570:	10002a15 	stw	zero,168(r2)
8113c574:	e0bff917 	ldw	r2,-28(fp)
8113c578:	00ccc384 	movi	r3,13070
8113c57c:	10c02b0d 	sth	r3,172(r2)
8113c580:	e0bff917 	ldw	r2,-28(fp)
8113c584:	00eaf344 	movi	r3,-21555
8113c588:	10c02b8d 	sth	r3,174(r2)
8113c58c:	e0bff917 	ldw	r2,-28(fp)
8113c590:	00c48d04 	movi	r3,4660
8113c594:	10c02c0d 	sth	r3,176(r2)
8113c598:	e0bff917 	ldw	r2,-28(fp)
8113c59c:	00f99b44 	movi	r3,-6547
8113c5a0:	10c02c8d 	sth	r3,178(r2)
8113c5a4:	e0bff917 	ldw	r2,-28(fp)
8113c5a8:	00f7bb04 	movi	r3,-8468
8113c5ac:	10c02d0d 	sth	r3,180(r2)
8113c5b0:	e0bff917 	ldw	r2,-28(fp)
8113c5b4:	00c00144 	movi	r3,5
8113c5b8:	10c02d8d 	sth	r3,182(r2)
8113c5bc:	e0bff917 	ldw	r2,-28(fp)
8113c5c0:	00c002c4 	movi	r3,11
8113c5c4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
8113c5c8:	e0bff917 	ldw	r2,-28(fp)
8113c5cc:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
8113c5d0:	e0bffa17 	ldw	r2,-24(fp)
8113c5d4:	10bff304 	addi	r2,r2,-52
8113c5d8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
8113c5dc:	e0bffb17 	ldw	r2,-20(fp)
8113c5e0:	10800c04 	addi	r2,r2,48
8113c5e4:	e0fffc17 	ldw	r3,-16(fp)
8113c5e8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
8113c5ec:	e0bffb17 	ldw	r2,-20(fp)
8113c5f0:	10800b04 	addi	r2,r2,44
8113c5f4:	e0fffd17 	ldw	r3,-12(fp)
8113c5f8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
8113c5fc:	e0bffb17 	ldw	r2,-20(fp)
8113c600:	10800a04 	addi	r2,r2,40
8113c604:	e0fff917 	ldw	r3,-28(fp)
8113c608:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
8113c60c:	00a04534 	movhi	r2,33044
8113c610:	10b12c04 	addi	r2,r2,-15184
8113c614:	10c00104 	addi	r3,r2,4
8113c618:	e0bffb17 	ldw	r2,-20(fp)
8113c61c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
8113c620:	e0bffb17 	ldw	r2,-20(fp)
}
8113c624:	e037883a 	mov	sp,fp
8113c628:	dfc00117 	ldw	ra,4(sp)
8113c62c:	df000017 	ldw	fp,0(sp)
8113c630:	dec00204 	addi	sp,sp,8
8113c634:	f800283a 	ret

8113c638 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
8113c638:	defffe04 	addi	sp,sp,-8
8113c63c:	de00012e 	bgeu	sp,et,8113c644 <OSTaskCreateHook+0xc>
8113c640:	003b68fa 	trap	3
8113c644:	df000115 	stw	fp,4(sp)
8113c648:	df000104 	addi	fp,sp,4
8113c64c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
8113c650:	0001883a 	nop
8113c654:	e037883a 	mov	sp,fp
8113c658:	df000017 	ldw	fp,0(sp)
8113c65c:	dec00104 	addi	sp,sp,4
8113c660:	f800283a 	ret

8113c664 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
8113c664:	defffe04 	addi	sp,sp,-8
8113c668:	de00012e 	bgeu	sp,et,8113c670 <OSTaskDelHook+0xc>
8113c66c:	003b68fa 	trap	3
8113c670:	df000115 	stw	fp,4(sp)
8113c674:	df000104 	addi	fp,sp,4
8113c678:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
8113c67c:	0001883a 	nop
8113c680:	e037883a 	mov	sp,fp
8113c684:	df000017 	ldw	fp,0(sp)
8113c688:	dec00104 	addi	sp,sp,4
8113c68c:	f800283a 	ret

8113c690 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
8113c690:	deffff04 	addi	sp,sp,-4
8113c694:	de00012e 	bgeu	sp,et,8113c69c <OSTaskSwHook+0xc>
8113c698:	003b68fa 	trap	3
8113c69c:	df000015 	stw	fp,0(sp)
8113c6a0:	d839883a 	mov	fp,sp
}
8113c6a4:	0001883a 	nop
8113c6a8:	e037883a 	mov	sp,fp
8113c6ac:	df000017 	ldw	fp,0(sp)
8113c6b0:	dec00104 	addi	sp,sp,4
8113c6b4:	f800283a 	ret

8113c6b8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
8113c6b8:	deffff04 	addi	sp,sp,-4
8113c6bc:	de00012e 	bgeu	sp,et,8113c6c4 <OSTaskStatHook+0xc>
8113c6c0:	003b68fa 	trap	3
8113c6c4:	df000015 	stw	fp,0(sp)
8113c6c8:	d839883a 	mov	fp,sp
}
8113c6cc:	0001883a 	nop
8113c6d0:	e037883a 	mov	sp,fp
8113c6d4:	df000017 	ldw	fp,0(sp)
8113c6d8:	dec00104 	addi	sp,sp,4
8113c6dc:	f800283a 	ret

8113c6e0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
8113c6e0:	defffe04 	addi	sp,sp,-8
8113c6e4:	de00012e 	bgeu	sp,et,8113c6ec <OSTimeTickHook+0xc>
8113c6e8:	003b68fa 	trap	3
8113c6ec:	dfc00115 	stw	ra,4(sp)
8113c6f0:	df000015 	stw	fp,0(sp)
8113c6f4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
8113c6f8:	d0a09f0b 	ldhu	r2,-32132(gp)
8113c6fc:	10800044 	addi	r2,r2,1
8113c700:	d0a09f0d 	sth	r2,-32132(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
8113c704:	d0a09f0b 	ldhu	r2,-32132(gp)
8113c708:	10bfffcc 	andi	r2,r2,65535
8113c70c:	10807d30 	cmpltui	r2,r2,500
8113c710:	1000021e 	bne	r2,zero,8113c71c <OSTimeTickHook+0x3c>
        OSTmrCtr = 0;
8113c714:	d0209f0d 	sth	zero,-32132(gp)
        OSTmrSignal();
8113c718:	1132f600 	call	81132f60 <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
8113c71c:	0001883a 	nop
8113c720:	e037883a 	mov	sp,fp
8113c724:	dfc00117 	ldw	ra,4(sp)
8113c728:	df000017 	ldw	fp,0(sp)
8113c72c:	dec00204 	addi	sp,sp,8
8113c730:	f800283a 	ret

8113c734 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
8113c734:	deffff04 	addi	sp,sp,-4
8113c738:	de00012e 	bgeu	sp,et,8113c740 <OSInitHookBegin+0xc>
8113c73c:	003b68fa 	trap	3
8113c740:	df000015 	stw	fp,0(sp)
8113c744:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
8113c748:	d0209f0d 	sth	zero,-32132(gp)
#endif
}
8113c74c:	0001883a 	nop
8113c750:	e037883a 	mov	sp,fp
8113c754:	df000017 	ldw	fp,0(sp)
8113c758:	dec00104 	addi	sp,sp,4
8113c75c:	f800283a 	ret

8113c760 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
8113c760:	deffff04 	addi	sp,sp,-4
8113c764:	de00012e 	bgeu	sp,et,8113c76c <OSInitHookEnd+0xc>
8113c768:	003b68fa 	trap	3
8113c76c:	df000015 	stw	fp,0(sp)
8113c770:	d839883a 	mov	fp,sp
}
8113c774:	0001883a 	nop
8113c778:	e037883a 	mov	sp,fp
8113c77c:	df000017 	ldw	fp,0(sp)
8113c780:	dec00104 	addi	sp,sp,4
8113c784:	f800283a 	ret

8113c788 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
8113c788:	deffff04 	addi	sp,sp,-4
8113c78c:	de00012e 	bgeu	sp,et,8113c794 <OSTaskIdleHook+0xc>
8113c790:	003b68fa 	trap	3
8113c794:	df000015 	stw	fp,0(sp)
8113c798:	d839883a 	mov	fp,sp
}
8113c79c:	0001883a 	nop
8113c7a0:	e037883a 	mov	sp,fp
8113c7a4:	df000017 	ldw	fp,0(sp)
8113c7a8:	dec00104 	addi	sp,sp,4
8113c7ac:	f800283a 	ret

8113c7b0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
8113c7b0:	defffe04 	addi	sp,sp,-8
8113c7b4:	de00012e 	bgeu	sp,et,8113c7bc <OSTCBInitHook+0xc>
8113c7b8:	003b68fa 	trap	3
8113c7bc:	df000115 	stw	fp,4(sp)
8113c7c0:	df000104 	addi	fp,sp,4
8113c7c4:	e13fff15 	stw	r4,-4(fp)
}
8113c7c8:	0001883a 	nop
8113c7cc:	e037883a 	mov	sp,fp
8113c7d0:	df000017 	ldw	fp,0(sp)
8113c7d4:	dec00104 	addi	sp,sp,4
8113c7d8:	f800283a 	ret

8113c7dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8113c7dc:	defffe04 	addi	sp,sp,-8
8113c7e0:	de00012e 	bgeu	sp,et,8113c7e8 <alt_exception_cause_generated_bad_addr+0xc>
8113c7e4:	003b68fa 	trap	3
8113c7e8:	df000115 	stw	fp,4(sp)
8113c7ec:	df000104 	addi	fp,sp,4
8113c7f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8113c7f4:	e0bfff17 	ldw	r2,-4(fp)
8113c7f8:	10bffe84 	addi	r2,r2,-6
8113c7fc:	10c00428 	cmpgeui	r3,r2,16
8113c800:	18001a1e 	bne	r3,zero,8113c86c <alt_exception_cause_generated_bad_addr+0x90>
8113c804:	100690ba 	slli	r3,r2,2
8113c808:	00a04534 	movhi	r2,33044
8113c80c:	10b20704 	addi	r2,r2,-14308
8113c810:	1885883a 	add	r2,r3,r2
8113c814:	10800017 	ldw	r2,0(r2)
8113c818:	1000683a 	jmp	r2
8113c81c:	8113c85c 	xori	r4,r16,20257
8113c820:	8113c85c 	xori	r4,r16,20257
8113c824:	8113c86c 	andhi	r4,r16,20257
8113c828:	8113c86c 	andhi	r4,r16,20257
8113c82c:	8113c86c 	andhi	r4,r16,20257
8113c830:	8113c85c 	xori	r4,r16,20257
8113c834:	8113c864 	muli	r4,r16,20257
8113c838:	8113c86c 	andhi	r4,r16,20257
8113c83c:	8113c85c 	xori	r4,r16,20257
8113c840:	8113c85c 	xori	r4,r16,20257
8113c844:	8113c86c 	andhi	r4,r16,20257
8113c848:	8113c85c 	xori	r4,r16,20257
8113c84c:	8113c864 	muli	r4,r16,20257
8113c850:	8113c86c 	andhi	r4,r16,20257
8113c854:	8113c86c 	andhi	r4,r16,20257
8113c858:	8113c85c 	xori	r4,r16,20257
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8113c85c:	00800044 	movi	r2,1
8113c860:	00000306 	br	8113c870 <alt_exception_cause_generated_bad_addr+0x94>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8113c864:	0005883a 	mov	r2,zero
8113c868:	00000106 	br	8113c870 <alt_exception_cause_generated_bad_addr+0x94>

  default:
    return 0;
8113c86c:	0005883a 	mov	r2,zero
  }
}
8113c870:	e037883a 	mov	sp,fp
8113c874:	df000017 	ldw	fp,0(sp)
8113c878:	dec00104 	addi	sp,sp,4
8113c87c:	f800283a 	ret

8113c880 <atexit>:
8113c880:	200b883a 	mov	r5,r4
8113c884:	000f883a 	mov	r7,zero
8113c888:	000d883a 	mov	r6,zero
8113c88c:	0009883a 	mov	r4,zero
8113c890:	113ca3c1 	jmpi	8113ca3c <__register_exitproc>

8113c894 <exit>:
8113c894:	defffe04 	addi	sp,sp,-8
8113c898:	000b883a 	mov	r5,zero
8113c89c:	de00012e 	bgeu	sp,et,8113c8a4 <exit+0x10>
8113c8a0:	003b68fa 	trap	3
8113c8a4:	dc000015 	stw	r16,0(sp)
8113c8a8:	dfc00115 	stw	ra,4(sp)
8113c8ac:	2021883a 	mov	r16,r4
8113c8b0:	113cb5c0 	call	8113cb5c <__call_exitprocs>
8113c8b4:	00a04534 	movhi	r2,33044
8113c8b8:	108aa504 	addi	r2,r2,10900
8113c8bc:	11000017 	ldw	r4,0(r2)
8113c8c0:	20800f17 	ldw	r2,60(r4)
8113c8c4:	10000126 	beq	r2,zero,8113c8cc <exit+0x38>
8113c8c8:	103ee83a 	callr	r2
8113c8cc:	8009883a 	mov	r4,r16
8113c8d0:	113cce40 	call	8113cce4 <_exit>

8113c8d4 <memcmp>:
8113c8d4:	01c000c4 	movi	r7,3
8113c8d8:	3980192e 	bgeu	r7,r6,8113c940 <memcmp+0x6c>
8113c8dc:	2144b03a 	or	r2,r4,r5
8113c8e0:	11c4703a 	and	r2,r2,r7
8113c8e4:	10000f26 	beq	r2,zero,8113c924 <memcmp+0x50>
8113c8e8:	20800003 	ldbu	r2,0(r4)
8113c8ec:	28c00003 	ldbu	r3,0(r5)
8113c8f0:	10c0151e 	bne	r2,r3,8113c948 <memcmp+0x74>
8113c8f4:	31bfff84 	addi	r6,r6,-2
8113c8f8:	01ffffc4 	movi	r7,-1
8113c8fc:	00000406 	br	8113c910 <memcmp+0x3c>
8113c900:	20800003 	ldbu	r2,0(r4)
8113c904:	28c00003 	ldbu	r3,0(r5)
8113c908:	31bfffc4 	addi	r6,r6,-1
8113c90c:	10c00e1e 	bne	r2,r3,8113c948 <memcmp+0x74>
8113c910:	21000044 	addi	r4,r4,1
8113c914:	29400044 	addi	r5,r5,1
8113c918:	31fff91e 	bne	r6,r7,8113c900 <__reset+0xfb11c900>
8113c91c:	0005883a 	mov	r2,zero
8113c920:	f800283a 	ret
8113c924:	20c00017 	ldw	r3,0(r4)
8113c928:	28800017 	ldw	r2,0(r5)
8113c92c:	18bfee1e 	bne	r3,r2,8113c8e8 <__reset+0xfb11c8e8>
8113c930:	31bfff04 	addi	r6,r6,-4
8113c934:	21000104 	addi	r4,r4,4
8113c938:	29400104 	addi	r5,r5,4
8113c93c:	39bff936 	bltu	r7,r6,8113c924 <__reset+0xfb11c924>
8113c940:	303fe91e 	bne	r6,zero,8113c8e8 <__reset+0xfb11c8e8>
8113c944:	003ff506 	br	8113c91c <__reset+0xfb11c91c>
8113c948:	10c5c83a 	sub	r2,r2,r3
8113c94c:	f800283a 	ret

8113c950 <strncpy>:
8113c950:	2906b03a 	or	r3,r5,r4
8113c954:	18c000cc 	andi	r3,r3,3
8113c958:	2005883a 	mov	r2,r4
8113c95c:	18002c1e 	bne	r3,zero,8113ca10 <strncpy+0xc0>
8113c960:	010000c4 	movi	r4,3
8113c964:	21802a2e 	bgeu	r4,r6,8113ca10 <strncpy+0xc0>
8113c968:	033fbff4 	movhi	r12,65279
8113c96c:	02e02074 	movhi	r11,32897
8113c970:	633fbfc4 	addi	r12,r12,-257
8113c974:	5ae02004 	addi	r11,r11,-32640
8113c978:	100f883a 	mov	r7,r2
8113c97c:	2a000017 	ldw	r8,0(r5)
8113c980:	3815883a 	mov	r10,r7
8113c984:	4313883a 	add	r9,r8,r12
8113c988:	0206303a 	nor	r3,zero,r8
8113c98c:	48c6703a 	and	r3,r9,r3
8113c990:	1ac6703a 	and	r3,r3,r11
8113c994:	1800261e 	bne	r3,zero,8113ca30 <strncpy+0xe0>
8113c998:	39c00104 	addi	r7,r7,4
8113c99c:	52000015 	stw	r8,0(r10)
8113c9a0:	31bfff04 	addi	r6,r6,-4
8113c9a4:	3811883a 	mov	r8,r7
8113c9a8:	29400104 	addi	r5,r5,4
8113c9ac:	21bff336 	bltu	r4,r6,8113c97c <__reset+0xfb11c97c>
8113c9b0:	30001e26 	beq	r6,zero,8113ca2c <strncpy+0xdc>
8113c9b4:	29c00003 	ldbu	r7,0(r5)
8113c9b8:	31bfffc4 	addi	r6,r6,-1
8113c9bc:	40c00044 	addi	r3,r8,1
8113c9c0:	41c00005 	stb	r7,0(r8)
8113c9c4:	39c03fcc 	andi	r7,r7,255
8113c9c8:	39c0201c 	xori	r7,r7,128
8113c9cc:	39ffe004 	addi	r7,r7,-128
8113c9d0:	29400044 	addi	r5,r5,1
8113c9d4:	38001026 	beq	r7,zero,8113ca18 <strncpy+0xc8>
8113c9d8:	1811883a 	mov	r8,r3
8113c9dc:	00000906 	br	8113ca04 <strncpy+0xb4>
8113c9e0:	29c00003 	ldbu	r7,0(r5)
8113c9e4:	31bfffc4 	addi	r6,r6,-1
8113c9e8:	29400044 	addi	r5,r5,1
8113c9ec:	41c00005 	stb	r7,0(r8)
8113c9f0:	39c03fcc 	andi	r7,r7,255
8113c9f4:	39c0201c 	xori	r7,r7,128
8113c9f8:	39ffe004 	addi	r7,r7,-128
8113c9fc:	1811883a 	mov	r8,r3
8113ca00:	38000526 	beq	r7,zero,8113ca18 <strncpy+0xc8>
8113ca04:	18c00044 	addi	r3,r3,1
8113ca08:	303ff51e 	bne	r6,zero,8113c9e0 <__reset+0xfb11c9e0>
8113ca0c:	f800283a 	ret
8113ca10:	1011883a 	mov	r8,r2
8113ca14:	003fe606 	br	8113c9b0 <__reset+0xfb11c9b0>
8113ca18:	30000726 	beq	r6,zero,8113ca38 <strncpy+0xe8>
8113ca1c:	198d883a 	add	r6,r3,r6
8113ca20:	18000005 	stb	zero,0(r3)
8113ca24:	18c00044 	addi	r3,r3,1
8113ca28:	19bffd1e 	bne	r3,r6,8113ca20 <__reset+0xfb11ca20>
8113ca2c:	f800283a 	ret
8113ca30:	3811883a 	mov	r8,r7
8113ca34:	003fdf06 	br	8113c9b4 <__reset+0xfb11c9b4>
8113ca38:	f800283a 	ret

8113ca3c <__register_exitproc>:
8113ca3c:	defffa04 	addi	sp,sp,-24
8113ca40:	de00012e 	bgeu	sp,et,8113ca48 <__register_exitproc+0xc>
8113ca44:	003b68fa 	trap	3
8113ca48:	dc000315 	stw	r16,12(sp)
8113ca4c:	04204534 	movhi	r16,33044
8113ca50:	840aa504 	addi	r16,r16,10900
8113ca54:	80c00017 	ldw	r3,0(r16)
8113ca58:	dc400415 	stw	r17,16(sp)
8113ca5c:	dfc00515 	stw	ra,20(sp)
8113ca60:	18805217 	ldw	r2,328(r3)
8113ca64:	2023883a 	mov	r17,r4
8113ca68:	10003726 	beq	r2,zero,8113cb48 <__register_exitproc+0x10c>
8113ca6c:	10c00117 	ldw	r3,4(r2)
8113ca70:	010007c4 	movi	r4,31
8113ca74:	20c00e16 	blt	r4,r3,8113cab0 <__register_exitproc+0x74>
8113ca78:	1a000044 	addi	r8,r3,1
8113ca7c:	8800221e 	bne	r17,zero,8113cb08 <__register_exitproc+0xcc>
8113ca80:	18c00084 	addi	r3,r3,2
8113ca84:	18c7883a 	add	r3,r3,r3
8113ca88:	18c7883a 	add	r3,r3,r3
8113ca8c:	12000115 	stw	r8,4(r2)
8113ca90:	10c7883a 	add	r3,r2,r3
8113ca94:	19400015 	stw	r5,0(r3)
8113ca98:	0005883a 	mov	r2,zero
8113ca9c:	dfc00517 	ldw	ra,20(sp)
8113caa0:	dc400417 	ldw	r17,16(sp)
8113caa4:	dc000317 	ldw	r16,12(sp)
8113caa8:	dec00604 	addi	sp,sp,24
8113caac:	f800283a 	ret
8113cab0:	00800034 	movhi	r2,0
8113cab4:	10800004 	addi	r2,r2,0
8113cab8:	10002626 	beq	r2,zero,8113cb54 <__register_exitproc+0x118>
8113cabc:	01006404 	movi	r4,400
8113cac0:	d9400015 	stw	r5,0(sp)
8113cac4:	d9800115 	stw	r6,4(sp)
8113cac8:	d9c00215 	stw	r7,8(sp)
8113cacc:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113cad0:	d9400017 	ldw	r5,0(sp)
8113cad4:	d9800117 	ldw	r6,4(sp)
8113cad8:	d9c00217 	ldw	r7,8(sp)
8113cadc:	10001d26 	beq	r2,zero,8113cb54 <__register_exitproc+0x118>
8113cae0:	81000017 	ldw	r4,0(r16)
8113cae4:	10000115 	stw	zero,4(r2)
8113cae8:	02000044 	movi	r8,1
8113caec:	22405217 	ldw	r9,328(r4)
8113caf0:	0007883a 	mov	r3,zero
8113caf4:	12400015 	stw	r9,0(r2)
8113caf8:	20805215 	stw	r2,328(r4)
8113cafc:	10006215 	stw	zero,392(r2)
8113cb00:	10006315 	stw	zero,396(r2)
8113cb04:	883fde26 	beq	r17,zero,8113ca80 <__reset+0xfb11ca80>
8113cb08:	18c9883a 	add	r4,r3,r3
8113cb0c:	2109883a 	add	r4,r4,r4
8113cb10:	1109883a 	add	r4,r2,r4
8113cb14:	21802215 	stw	r6,136(r4)
8113cb18:	01800044 	movi	r6,1
8113cb1c:	12406217 	ldw	r9,392(r2)
8113cb20:	30cc983a 	sll	r6,r6,r3
8113cb24:	4992b03a 	or	r9,r9,r6
8113cb28:	12406215 	stw	r9,392(r2)
8113cb2c:	21c04215 	stw	r7,264(r4)
8113cb30:	01000084 	movi	r4,2
8113cb34:	893fd21e 	bne	r17,r4,8113ca80 <__reset+0xfb11ca80>
8113cb38:	11006317 	ldw	r4,396(r2)
8113cb3c:	218cb03a 	or	r6,r4,r6
8113cb40:	11806315 	stw	r6,396(r2)
8113cb44:	003fce06 	br	8113ca80 <__reset+0xfb11ca80>
8113cb48:	18805304 	addi	r2,r3,332
8113cb4c:	18805215 	stw	r2,328(r3)
8113cb50:	003fc606 	br	8113ca6c <__reset+0xfb11ca6c>
8113cb54:	00bfffc4 	movi	r2,-1
8113cb58:	003fd006 	br	8113ca9c <__reset+0xfb11ca9c>

8113cb5c <__call_exitprocs>:
8113cb5c:	defff504 	addi	sp,sp,-44
8113cb60:	de00012e 	bgeu	sp,et,8113cb68 <__call_exitprocs+0xc>
8113cb64:	003b68fa 	trap	3
8113cb68:	df000915 	stw	fp,36(sp)
8113cb6c:	dd400615 	stw	r21,24(sp)
8113cb70:	dc800315 	stw	r18,12(sp)
8113cb74:	dfc00a15 	stw	ra,40(sp)
8113cb78:	ddc00815 	stw	r23,32(sp)
8113cb7c:	dd800715 	stw	r22,28(sp)
8113cb80:	dd000515 	stw	r20,20(sp)
8113cb84:	dcc00415 	stw	r19,16(sp)
8113cb88:	dc400215 	stw	r17,8(sp)
8113cb8c:	dc000115 	stw	r16,4(sp)
8113cb90:	d9000015 	stw	r4,0(sp)
8113cb94:	2839883a 	mov	fp,r5
8113cb98:	04800044 	movi	r18,1
8113cb9c:	057fffc4 	movi	r21,-1
8113cba0:	00a04534 	movhi	r2,33044
8113cba4:	108aa504 	addi	r2,r2,10900
8113cba8:	12000017 	ldw	r8,0(r2)
8113cbac:	45005217 	ldw	r20,328(r8)
8113cbb0:	44c05204 	addi	r19,r8,328
8113cbb4:	a0001c26 	beq	r20,zero,8113cc28 <__call_exitprocs+0xcc>
8113cbb8:	a0800117 	ldw	r2,4(r20)
8113cbbc:	15ffffc4 	addi	r23,r2,-1
8113cbc0:	b8000d16 	blt	r23,zero,8113cbf8 <__call_exitprocs+0x9c>
8113cbc4:	14000044 	addi	r16,r2,1
8113cbc8:	8421883a 	add	r16,r16,r16
8113cbcc:	8421883a 	add	r16,r16,r16
8113cbd0:	84402004 	addi	r17,r16,128
8113cbd4:	a463883a 	add	r17,r20,r17
8113cbd8:	a421883a 	add	r16,r20,r16
8113cbdc:	e0001e26 	beq	fp,zero,8113cc58 <__call_exitprocs+0xfc>
8113cbe0:	80804017 	ldw	r2,256(r16)
8113cbe4:	e0801c26 	beq	fp,r2,8113cc58 <__call_exitprocs+0xfc>
8113cbe8:	bdffffc4 	addi	r23,r23,-1
8113cbec:	843fff04 	addi	r16,r16,-4
8113cbf0:	8c7fff04 	addi	r17,r17,-4
8113cbf4:	bd7ff91e 	bne	r23,r21,8113cbdc <__reset+0xfb11cbdc>
8113cbf8:	00800034 	movhi	r2,0
8113cbfc:	10800004 	addi	r2,r2,0
8113cc00:	10000926 	beq	r2,zero,8113cc28 <__call_exitprocs+0xcc>
8113cc04:	a0800117 	ldw	r2,4(r20)
8113cc08:	1000301e 	bne	r2,zero,8113cccc <__call_exitprocs+0x170>
8113cc0c:	a0800017 	ldw	r2,0(r20)
8113cc10:	10003226 	beq	r2,zero,8113ccdc <__call_exitprocs+0x180>
8113cc14:	a009883a 	mov	r4,r20
8113cc18:	98800015 	stw	r2,0(r19)
8113cc1c:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113cc20:	9d000017 	ldw	r20,0(r19)
8113cc24:	a03fe41e 	bne	r20,zero,8113cbb8 <__reset+0xfb11cbb8>
8113cc28:	dfc00a17 	ldw	ra,40(sp)
8113cc2c:	df000917 	ldw	fp,36(sp)
8113cc30:	ddc00817 	ldw	r23,32(sp)
8113cc34:	dd800717 	ldw	r22,28(sp)
8113cc38:	dd400617 	ldw	r21,24(sp)
8113cc3c:	dd000517 	ldw	r20,20(sp)
8113cc40:	dcc00417 	ldw	r19,16(sp)
8113cc44:	dc800317 	ldw	r18,12(sp)
8113cc48:	dc400217 	ldw	r17,8(sp)
8113cc4c:	dc000117 	ldw	r16,4(sp)
8113cc50:	dec00b04 	addi	sp,sp,44
8113cc54:	f800283a 	ret
8113cc58:	a0800117 	ldw	r2,4(r20)
8113cc5c:	80c00017 	ldw	r3,0(r16)
8113cc60:	10bfffc4 	addi	r2,r2,-1
8113cc64:	15c01426 	beq	r2,r23,8113ccb8 <__call_exitprocs+0x15c>
8113cc68:	80000015 	stw	zero,0(r16)
8113cc6c:	183fde26 	beq	r3,zero,8113cbe8 <__reset+0xfb11cbe8>
8113cc70:	95c8983a 	sll	r4,r18,r23
8113cc74:	a0806217 	ldw	r2,392(r20)
8113cc78:	a5800117 	ldw	r22,4(r20)
8113cc7c:	2084703a 	and	r2,r4,r2
8113cc80:	10000b26 	beq	r2,zero,8113ccb0 <__call_exitprocs+0x154>
8113cc84:	a0806317 	ldw	r2,396(r20)
8113cc88:	2088703a 	and	r4,r4,r2
8113cc8c:	20000c1e 	bne	r4,zero,8113ccc0 <__call_exitprocs+0x164>
8113cc90:	89400017 	ldw	r5,0(r17)
8113cc94:	d9000017 	ldw	r4,0(sp)
8113cc98:	183ee83a 	callr	r3
8113cc9c:	a0800117 	ldw	r2,4(r20)
8113cca0:	15bfbf1e 	bne	r2,r22,8113cba0 <__reset+0xfb11cba0>
8113cca4:	98800017 	ldw	r2,0(r19)
8113cca8:	153fcf26 	beq	r2,r20,8113cbe8 <__reset+0xfb11cbe8>
8113ccac:	003fbc06 	br	8113cba0 <__reset+0xfb11cba0>
8113ccb0:	183ee83a 	callr	r3
8113ccb4:	003ff906 	br	8113cc9c <__reset+0xfb11cc9c>
8113ccb8:	a5c00115 	stw	r23,4(r20)
8113ccbc:	003feb06 	br	8113cc6c <__reset+0xfb11cc6c>
8113ccc0:	89000017 	ldw	r4,0(r17)
8113ccc4:	183ee83a 	callr	r3
8113ccc8:	003ff406 	br	8113cc9c <__reset+0xfb11cc9c>
8113cccc:	a0800017 	ldw	r2,0(r20)
8113ccd0:	a027883a 	mov	r19,r20
8113ccd4:	1029883a 	mov	r20,r2
8113ccd8:	003fb606 	br	8113cbb4 <__reset+0xfb11cbb4>
8113ccdc:	0005883a 	mov	r2,zero
8113cce0:	003ffb06 	br	8113ccd0 <__reset+0xfb11ccd0>

8113cce4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8113cce4:	defffc04 	addi	sp,sp,-16
8113cce8:	de00012e 	bgeu	sp,et,8113ccf0 <_exit+0xc>
8113ccec:	003b68fa 	trap	3
8113ccf0:	dfc00315 	stw	ra,12(sp)
8113ccf4:	df000215 	stw	fp,8(sp)
8113ccf8:	df000204 	addi	fp,sp,8
8113ccfc:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
8113cd00:	d0a01217 	ldw	r2,-32696(gp)
8113cd04:	10800058 	cmpnei	r2,r2,1
8113cd08:	1000031e 	bne	r2,zero,8113cd18 <_exit+0x34>
8113cd0c:	01204534 	movhi	r4,33044
8113cd10:	21032804 	addi	r4,r4,3232
8113cd14:	112852c0 	call	8112852c <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
8113cd18:	d0a01217 	ldw	r2,-32696(gp)
8113cd1c:	10800058 	cmpnei	r2,r2,1
8113cd20:	1000041e 	bne	r2,zero,8113cd34 <_exit+0x50>
8113cd24:	e17fff17 	ldw	r5,-4(fp)
8113cd28:	01204534 	movhi	r4,33044
8113cd2c:	21033304 	addi	r4,r4,3276
8113cd30:	112852c0 	call	8112852c <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
8113cd34:	d0a01217 	ldw	r2,-32696(gp)
8113cd38:	10800058 	cmpnei	r2,r2,1
8113cd3c:	1000031e 	bne	r2,zero,8113cd4c <_exit+0x68>
8113cd40:	01204534 	movhi	r4,33044
8113cd44:	21033e04 	addi	r4,r4,3320
8113cd48:	112852c0 	call	8112852c <alt_log_printf_proc>
  ALT_OS_STOP();
8113cd4c:	d0207a05 	stb	zero,-32280(gp)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
8113cd50:	d0a01217 	ldw	r2,-32696(gp)
8113cd54:	10800058 	cmpnei	r2,r2,1
8113cd58:	1000031e 	bne	r2,zero,8113cd68 <_exit+0x84>
8113cd5c:	01204534 	movhi	r4,33044
8113cd60:	21034804 	addi	r4,r4,3360
8113cd64:	112852c0 	call	8112852c <alt_log_printf_proc>
8113cd68:	e0bfff17 	ldw	r2,-4(fp)
8113cd6c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8113cd70:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8113cd74:	10000226 	beq	r2,zero,8113cd80 <_exit+0x9c>
    ALT_SIM_FAIL();
8113cd78:	002af070 	cmpltui	zero,zero,43969
8113cd7c:	00000106 	br	8113cd84 <_exit+0xa0>
  } else {
    ALT_SIM_PASS();
8113cd80:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
8113cd84:	d0a01217 	ldw	r2,-32696(gp)
8113cd88:	10800058 	cmpnei	r2,r2,1
8113cd8c:	1000031e 	bne	r2,zero,8113cd9c <_exit+0xb8>
8113cd90:	01204534 	movhi	r4,33044
8113cd94:	21035204 	addi	r4,r4,3400
8113cd98:	112852c0 	call	8112852c <alt_log_printf_proc>
  while (1);
8113cd9c:	003fff06 	br	8113cd9c <__reset+0xfb11cd9c>
