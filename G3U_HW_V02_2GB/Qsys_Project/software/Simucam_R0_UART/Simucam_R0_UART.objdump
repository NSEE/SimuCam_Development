
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00044ac4 memsz 0x0005882c flags rwx
    LOAD off    0x00046000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00046000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0003e520  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00004574  8113e77c  8113e77c  0003f77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001df4  81142cf0  81142cf0  00043cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00013d68  81144ae4  81144ae4  00045ae4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8115884c  8115884c  00046000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00046000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00046000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001d88  00000000  00000000  00046028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0006249b  00000000  00000000  00047db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00015d12  00000000  00000000  000aa24b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f193  00000000  00000000  000bff5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00008164  00000000  00000000  000df0f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000af6a  00000000  00000000  000e7254  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000270fe  00000000  00000000  000f21be  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  001192bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000023c8  00000000  00000000  00119300  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0012617d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00126183  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0012618f  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00126190  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00126191  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00126195  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00126199  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0012619d  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  001261a8  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  001261b2  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  001261bc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  001261cd  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  0012620c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
8113e77c l    d  .rodata	00000000 .rodata
81142cf0 l    d  .rwdata	00000000 .rwdata
81144ae4 l    d  .bss	00000000 .bss
8115884c l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100304 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
81144b00 l     O .bss	00000004 viCh1HoldContext
81144b04 l     O .bss	00000004 viCh2HoldContext
81144b08 l     O .bss	00000004 viCh3HoldContext
81144b0c l     O .bss	00000004 viCh4HoldContext
81144b10 l     O .bss	00000004 viCh5HoldContext
81144b14 l     O .bss	00000004 viCh6HoldContext
81144b18 l     O .bss	00000004 viCh7HoldContext
81144b1c l     O .bss	00000004 viCh8HoldContext
81105148 l     F .text	00000054 vFeebWriteReg
8110519c l     F .text	00000050 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
8110574c l     F .text	00000050 uliSpwcReadReg
811056f8 l     F .text	00000054 vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
81144a0c l     O .rwdata	00000001 ucIoValue
8110594c l     F .text	0000007c bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
8110623c l     F .text	0000013c msgdma_write_extended_descriptor
81106378 l     F .text	00000164 msgdma_construct_extended_descriptor
811064dc l     F .text	00000318 msgdma_descriptor_async_transfer
811067f4 l     F .text	000003fc msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81107370 l     F .text	00000054 vRstcWriteReg
811073c4 l     F .text	00000050 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
81144b24 l     O .bss	00000004 viHoldContext
811086f8 l     F .text	00000058 uliSyncReadReg
8110869c l     F .text	0000005c bSyncWriteReg
00000000 l    df *ABS*	00000000 data_control_task.c
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
81144b2a l     O .bss	00000004 xRAckLocal.4620
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 nfee_control_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
81144b2e l     O .bss	00000004 xSAckLocal.4605
00000000 l    df *ABS*	00000000 parser_comm_task.c
81144c90 l     O .bss	0000004c PreParsedLocal.4689
00000000 l    df *ABS*	00000000 receiver_uart_task.c
81144cdc l     O .bss	0000004c xPreParsedReader.4684
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 stack_monitor_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
81140b1b l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 data_controller.c
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 fee_controller.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
811420e5 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
81142cf0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
81115040 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strnlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
811422b2 l     O .rodata	00000010 zeroes.4389
811422c2 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
811422d2 l     O .rodata	00000010 zeroes.4404
81119cb8 l     F .text	000000c4 __sbprintf
811422e2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
811422fa l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
8111b9a0 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8111d4f0 l     F .text	00000008 __fp_unlock
8111d504 l     F .text	000001a4 __sinit.part.1
8111d6a8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8114353c l     O .rwdata	00000020 lc_ctype_charset
8114351c l     O .rwdata	00000020 lc_message_charset
8114355c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
81142338 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
81120518 l     F .text	0000006c sulp
81142480 l     O .rodata	00000014 fpi.2737
81142494 l     O .rodata	00000028 tinytens
8114246c l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
811424cc l     O .rodata	00000010 blanks.4332
811424bc l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
81123b88 l     F .text	00000104 __sprint_r.part.0
811424ec l     O .rodata	00000010 blanks.4348
811424dc l     O .rodata	00000010 zeroes.4349
81125124 l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
811255d8 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
81129374 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
811294b8 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
811294ec l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
81129770 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_log_macro.o
81129868 l       .text	00000000 tx_next_char
81129890 l       .text	00000000 end_tx
81129870 l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_lseek.c
8112a36c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
8112a628 l     F .text	00000044 alt_get_errno
8112a66c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
8112a894 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
81144a54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
8112ae34 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
81144a60 l     O .rwdata	00000004 lockid
81144bd8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
81144a64 l     O .rwdata	00000004 lockid
81144be0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
8112c944 l     F .text	00000050 OS_InitMisc
8112c994 l     F .text	00000074 OS_InitRdyList
8112cb18 l     F .text	000000ec OS_InitTCBList
8112c85c l     F .text	000000e8 OS_InitEventList
8112ca08 l     F .text	00000088 OS_InitTaskIdle
8112ca90 l     F .text	00000088 OS_InitTaskStat
8112cda8 l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112ebc0 l     F .text	000000fc OS_FlagTaskRdy
8112e970 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
811304ac l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
81134edc l     F .text	00000044 OSTmr_Lock
8113497c l     F .text	00000074 OSTmr_Alloc
81134f20 l     F .text	0000003c OSTmr_Unlock
81134de0 l     F .text	000000fc OSTmr_Unlink
811349f0 l     F .text	000000a4 OSTmr_Free
81134c90 l     F .text	00000150 OSTmr_Link
81134c08 l     F .text	00000088 OSTmr_InitTask
81134f5c l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
8113506c l     F .text	0000003c alt_dev_reg
811437d8 l     O .rwdata	0000106c jtag_uart_0
81144844 l     O .rwdata	000000d0 rs232_uart
81144914 l     O .rwdata	00000064 dma_DDR_M1
81144978 l     O .rwdata	00000064 dma_DDR_M2
811449dc l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
811398fc l     F .text	000002bc altera_avalon_jtag_uart_irq
81139bb8 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8113a3bc l     F .text	00000084 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
8113a754 l     F .text	000000a4 altera_avalon_uart_irq
8113a7f8 l     F .text	00000140 altera_avalon_uart_rxirq
8113a938 l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
8113ab40 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
8113adf4 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8113b078 l     F .text	00000044 alt_get_errno
8113b0bc l     F .text	0000009c alt_msgdma_write_standard_descriptor
8113b158 l     F .text	00000134 alt_msgdma_write_extended_descriptor
8113b28c l     F .text	0000018c alt_msgdma_irq
8113b418 l     F .text	00000094 alt_msgdma_construct_standard_descriptor
8113b4ac l     F .text	0000015c alt_msgdma_construct_extended_descriptor
8113b608 l     F .text	00000340 alt_msgdma_descriptor_async_transfer
8113b948 l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
8113c050 l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
8113c0fc l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8113d2c8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8113d9dc l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
81144c88 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81144c8c g     O .bss	00000004 alt_instruction_exception_handler
81145250 g     O .bss	00000800 vFeeTask0_stk
8110ff04 g     F .text	0000004c vFailDeleteInitialization
81144c5c g     O .bss	00000004 aux_status_register
81145a50 g     O .bss	00001000 vInAckHandlerTask_stk
8113d084 g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
81114f4c g     F .text	00000018 putchar
811078fc g     F .text	0000004c vSyncInitIrq
8110c6d4 g     F .text	00000284 vCheckRetransmission128
8111fb9c g     F .text	0000007c _mprec_log10
81107a78 g     F .text	00000040 bSyncSetMbt
81105b30 g     F .text	00000108 I2C_Read
81144ab2 g     O .rwdata	00000002 OSTaskNameSize
81146a50 g     O .bss	00000260 xBuffer64
8111fc90 g     F .text	0000008c __any_on
8111e664 g     F .text	0000005c _isatty_r
81142344 g     O .rodata	00000028 __mprec_tinytens
8112a48c g     F .text	0000019c alt_main
81114f64 g     F .text	000000c8 _puts_r
811049d4 g     F .text	00000058 bFeebCh3IrqFlagBufferEmpty
81144be8 g     O .bss	00000004 OSTmrFreeList
8115874c g     O .bss	00000100 alt_irq
8111e7d4 g     F .text	00000068 _lseek_r
81111ca0 g     F .text	00000030 vChangeDefaultAutoResetSync
8112f420 g     F .text	000000d4 OS_MemInit
8110ea80 g     F .text	0000098c vLoadDefaultETHConf
81109c44 g     F .text	0000014c bCheckInAck64
81133ebc g     F .text	00000068 OSTimeSet
8111d8a8 g     F .text	000000ac __sflags
81110d70 g     F .text	00000068 vCoudlNotCreateNFee2Task
811284d4 g     F .text	00000088 .hidden __eqdf2
81102aa8 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
81111b8c g     F .text	00000034 vLoadDefaultSyncSource
8113556c g     F .text	000001ac Check_for_Master_Boot_Record
811531d8 g     O .bss	00000010 OSTmrWheelTbl
8113be10 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
81146cb0 g     O .bss	00000010 xFeeQueueTBL3
8112b524 g     F .text	00000618 OSEventPendMulti
81144b38 g     O .bss	00000004 xNfeeSchedule
8115884c g       *ABS*	00000000 __alt_heap_start
8113e014 g     F .text	0000002c OSTaskCreateHook
811393e4 g     F .text	000001c4 alt_up_sd_card_fclose
81144b3c g     O .bss	00000004 xSemCountBuffer64
81114d88 g     F .text	00000044 printf
81144b21 g     O .bss	00000001 SspdConfigControl
81107e94 g     F .text	00000054 bSyncCtrReset
81144a8a g     O .rwdata	00000002 OSMboxEn
81112274 g     F .text	000000a4 aatoh
8112bba0 g     F .text	00000054 OSIntEnter
81126244 g     F .text	000000a4 _wcrtomb_r
811048e0 g     F .text	00000044 vFeebCh8IrqFlagClrBufferEmpty
8110fe6c g     F .text	0000004c vFailReceiverCreate
81104544 g     F .text	00000040 vFeebCh2HandleIrq
811154cc g     F .text	00000064 __sseek
8111d858 g     F .text	00000010 __sinit
81106cb0 g     F .text	00000044 iMsgdmaExtendedDescriptorAsyncTransfer
8111b620 g     F .text	00000148 __swbuf_r
8110ceac g     F .text	0000047c bResourcesInitRTOS
811053bc g     F .text	000000f4 bSpwcGetLinkError
81144a9a g     O .rwdata	00000002 OSQEn
8111e6f0 g     F .text	00000084 _setlocale_r
81144a10 g     O .rwdata	00000004 LedsPainelControl
81144d50 g     O .bss	00000100 cDebugBuffer
8111d6b0 g     F .text	00000070 __sfmoreglue
81123b70 g     F .text	00000018 ungetc
8112b1e0 g     F .text	000000d4 __malloc_unlock
81102d98 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
8113e094 g     F .text	00000028 OSTaskStatHook
81111bfc g     F .text	00000030 vChangeDefaultSyncSource
81144bec g     O .bss	00000001 OSLockNesting
81144bf0 g     O .bss	00000004 OSTmrSemSignal
81111098 g     F .text	000000d8 vNFeeStructureInit
81144b40 g     O .bss	00000004 xSemCommInit
8110292c g     F .text	00000080 uliXorshift32
81120584 g     F .text	00001600 _strtod_r
81144b44 g     O .bss	00000004 xSemCountSenderACK
811123b0 g     F .text	00000448 .hidden __divsf3
81144c80 g     O .bss	00000004 current_sector_modified
81144ad8 g     O .rwdata	00000002 OSDataSize
81144bf4 g     O .bss	00000001 OSRunning
81105580 g     F .text	00000178 bSpwcInitCh
8112a154 g     F .text	00000064 alt_log_jtag_uart_isr_proc
81146cc0 g     O .bss	00001000 senderTask_stk
81144b48 g     O .bss	00000004 fp
81147cc0 g     O .bss	00000030 xNfeeScheduleTBL
81109afc g     F .text	00000148 bCheckInAck128
8111eb64 g     F .text	0000015c memmove
8113e110 g     F .text	0000002c OSInitHookBegin
81108330 g     F .text	00000074 bSyncCtrCh8OutEnable
81144ad0 g     O .rwdata	00000002 OSTmrSize
8111d840 g     F .text	00000018 _cleanup
81111eac g     F .text	00000040 siCloseFile
8111ecc0 g     F .text	000000b0 _Balloc
81111c2c g     F .text	00000038 vLoadDefaultAutoResetSync
81137fc0 g     F .text	000000cc alt_up_sd_card_is_Present
8113bd50 g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
81144aec g     O .bss	00000004 pxDmaM1Dev
81102b40 g     F .text	000000a4 DMA_DISPATCHER_STOP
81135294 g     F .text	00000054 Save_Modified_Sector
81104b34 g     F .text	00000058 bFeebCh7IrqFlagBufferEmpty
81144bf8 g     O .bss	00000004 OSIdleCtr
81144bb4 g     O .bss	00000001 alt_log_write_on_flag
8110579c g     F .text	0000003c bEnableIsoDrivers
8112855c g     F .text	000000dc .hidden __gtdf2
8113dda4 g     F .text	0000002c altera_nios2_gen2_irq_init
8113de8c g       .text	00000000 OSStartTsk
81107bec g     F .text	00000070 bSyncSetNCycles
8112d118 g     F .text	000002dc OS_TCBInit
81144bb7 g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
8111186c g     F .text	00000068 vInitSimucamBasicHW
81147cf0 g     O .bss	00001000 vTimeoutCheckerTask_stk
81108248 g     F .text	00000074 bSyncCtrCh6OutEnable
81105eac g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
81144c78 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
81144bfc g     O .bss	00000002 OSTmrUsed
81144b4c g     O .bss	00000004 xSemCountBuffer128
81103270 g     F .text	000000f8 TEMP_Read
81148cf0 g     O .bss	00000800 vDataControlTask_stk
811045c4 g     F .text	00000040 vFeebCh4HandleIrq
81144ad6 g     O .rwdata	00000002 OSTmrWheelTblSize
81111568 g     F .text	0000002c cFeeSpwChannelDisable
81144a76 g     O .rwdata	00000002 OSEventSize
81144bfe g     O .bss	00000001 OSPrioHighRdy
81113f24 g     F .text	00000064 _fstat_r
8113e040 g     F .text	0000002c OSTaskDelHook
81144b90 g     O .bss	00000004 errno
81108624 g     F .text	0000003c uliSyncGetCtr
8111b5b0 g     F .text	0000001c __svfscanf
81115440 g     F .text	00000008 __seofread
8113de6c g       .text	00000000 OSStartHighRdy
81108820 g     F .text	00000918 vPrintConsoleNFee
811328ec g     F .text	000001ec OSTaskCreateExt
811531ac g     O .bss	00000011 alt_log_write_buf
81110228 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
811226b4 g     F .text	00001244 ___svfiprintf_internal_r
8110bc50 g     F .text	00000364 bPreParserV2
8112e4a0 g     F .text	00000068 OSFlagPendGetFlagsRdy
81144ab6 g     O .rwdata	00000002 OSTaskStatStkSize
8112d5ec g     F .text	00000310 OSFlagAccept
81130bc8 g     F .text	000000c0 OSQFlush
81130644 g     F .text	00000148 OSQAccept
81144bc8 g     O .bss	00000004 alt_argv
8114ca08 g       *ABS*	00000000 _gp
8110fb34 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
8112acf8 g     F .text	0000013c usleep
81138598 g     F .text	00000384 alt_up_sd_card_fopen
81111d18 g     F .text	00000030 bSDcardIsPresent
8110bfb4 g     F .text	0000017c vSenderComTask
81138100 g     F .text	000000d8 alt_up_sd_card_find_first
81132738 g     F .text	000001b4 OSTaskCreate
811103c8 g     F .text	00000068 vFailSendNack
81144c6c g     O .bss	00000004 command_argument_register
81132240 g     F .text	000004f8 OSTaskChangePrio
81110ad8 g     F .text	00000088 vCouldNotSendTMPusCommand
81144be4 g     O .bss	00000004 alt_heapsem
81106144 g     F .text	00000080 bSetBoardLeds
8112d3f4 g     F .text	000001f8 OSDebugInit
81132ad8 g     F .text	0000034c OSTaskDel
8112f4f4 g     F .text	000001ac OSMutexAccept
811494f0 g     O .bss	000004a0 xSimMeb
81111750 g     F .text	00000040 vSetTimeCode
8113c8f8 g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81144b50 g     O .bss	00000004 xSemCountPreParsed
811435bc g     O .rwdata	00000180 alt_fd_list
81104a84 g     F .text	00000058 bFeebCh5IrqFlagBufferEmpty
81143758 g     O .rwdata	0000001d alt_log_msg_alt_main
811531e8 g     O .bss	00000580 OSFlagTbl
8110fc9c g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
81111ae4 g     F .text	0000003c vLoadDefaultRTValue
81114f44 g     F .text	00000008 _putchar_r
8112c624 g     F .text	000000c0 OS_EventTaskRemove
81149990 g     O .bss	00000800 vFeeTask5_stk
81144bb6 g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
81137814 g     F .text	00000134 find_first_empty_record_in_root_directory
8113d488 g     F .text	00000098 alt_find_dev
81114a70 g     F .text	00000150 memcpy
81125f10 g     F .text	00000264 __hexnan
8114a190 g     O .bss	00000160 xBuffer32
81144aa0 g     O .rwdata	00000002 OSRdyTblSize
81153768 g     O .bss	000001a0 OSTmrTbl
8111d4f8 g     F .text	0000000c _cleanup_r
811290b0 g     F .text	000000e4 .hidden __floatsidf
8110e6a8 g     F .text	000001a8 vSendPusTM64
811079e8 g     F .text	0000004c ucSyncStatusErrorCode
81111664 g     F .text	00000034 cFeeRMAPLogDisable
8110aa48 g     F .text	000009ac vParserCommTask
8113daa8 g     F .text	00000084 alt_io_redirect
811115f8 g     F .text	00000034 cFeeRMAPEchoingDisable
81128638 g     F .text	000000f4 .hidden __ltdf2
81104d64 g     F .text	000000d4 bFeebSetIrqControl
81110938 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
81144b54 g     O .bss	00000004 xMutexReceivedACK
81103bec g     F .text	000000b0 bSdmaInitM2Dma
8113e77c g       *ABS*	00000000 __DTOR_END__
8113cd80 g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
8113d0c8 g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81107f3c g     F .text	00000054 bSyncCtrErrInj
8113d028 g     F .text	0000005c alt_msgdma_register_callback
8110f40c g     F .text	00000330 vShowEthConfig
811118d4 g     F .text	00000030 bLogWriteSDCard
8110ffb8 g     F .text	00000068 vFailSetCountSemaphorexBuffer64
8110b50c g     F .text	000000a0 bTrySendSemaphoreCommInit
8111502c g     F .text	00000014 puts
8113e1b8 g     F .text	000000a4 alt_exception_cause_generated_bad_addr
811078bc g     F .text	00000040 vSyncHandleIrq
8112b2b4 g     F .text	00000128 OSEventNameGet
81104748 g     F .text	00000044 vFeebCh2IrqFlagClrBufferEmpty
81144a84 g     O .rwdata	00000002 OSFlagMax
8111e8f0 g     F .text	000000e0 mbrtowc
8113740c g     F .text	000001b4 find_first_empty_cluster
811081d4 g     F .text	00000074 bSyncCtrCh5OutEnable
81144b28 g     O .bss	00000001 vucN
811202f0 g     F .text	00000074 __fpclassifyd
81107948 g     F .text	00000054 bSyncStatusExtnIrq
8111b5cc g     F .text	00000054 _vfscanf_r
8112fb74 g     F .text	000005a4 OSMutexPend
8111faf0 g     F .text	000000ac __ratio
81137efc g     F .text	000000c4 alt_up_sd_card_open_dev
81110b60 g     F .text	00000068 vWarnCouldNotgetMutexRetrans128
8112bbf4 g     F .text	00000100 OSIntExit
81107ab8 g     F .text	00000040 bSyncSetBt
81125108 g     F .text	0000001c __vfiprintf_internal
81144abe g     O .rwdata	00000002 OSTCBSize
81104704 g     F .text	00000044 vFeebCh1IrqFlagClrBufferEmpty
81144bff g     O .bss	00000001 OSPrioCur
81139e2c g     F .text	000002c4 altera_avalon_jtag_uart_read
8113c5c0 g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
81114d50 g     F .text	00000038 _printf_r
81127078 g     F .text	00000064 .hidden __udivsi3
811297b4 g     F .text	000000ac isatty
81144b20 g     O .bss	00000001 LedsBoardControl
81144b58 g     O .bss	00000004 xSemCountReceivedACK
81144aa4 g     O .rwdata	00000002 OSStkWidth
8111e6c0 g     F .text	00000030 iswspace
81142394 g     O .rodata	000000c8 __mprec_tens
81144a98 g     O .rwdata	00000002 OSPtrSize
81110f10 g     F .text	00000068 vCoudlNotCreateNFeeControllerTask
8111e774 g     F .text	0000000c __locale_charset
811080ec g     F .text	00000074 bSyncCtrCh3OutEnable
81127268 g     F .text	000000c8 .hidden __lesf2
81144a78 g     O .rwdata	00000002 OSEventTblSize
81126444 g     F .text	0000007c .hidden __fixunsdfsi
8113ddd0 g       .text	00000000 OSCtxSw
81105c38 g     F .text	00000160 I2C_MultipleRead
8112a2f8 g     F .text	00000074 alt_log_system_clock
81144b9c g     O .bss	00000004 __malloc_top_pad
81144c00 g     O .bss	00000004 OSTCBList
8113493c g     F .text	00000040 OSTmrSignal
81144bac g     O .bss	00000004 alt_fd_list_lock
811221e0 g     F .text	0000001c strtoul
81144a28 g     O .rwdata	00000004 __mb_cur_max
8111e7a4 g     F .text	0000000c _localeconv_r
811221fc g     F .text	000002e0 _strtoull_r
81107300 g     F .text	00000070 vRstcHoldDeviceReset
8111f0e4 g     F .text	00000044 __i2b
8111e008 g     F .text	000004c4 __sfvwrite_r
811366ec g     F .text	000000c0 get_dir_divider_location
81153908 g     O .bss	00000c30 OSMemTbl
81144c04 g     O .bss	00000001 OSTickStepState
81129f08 g     F .text	00000060 alt_log_printf_proc
8114a2f0 g     O .bss	00001000 vReceiverUartTask_stk
81115238 g     F .text	0000005c _sbrk_r
81144b5c g     O .bss	00000004 xSemTimeoutChecker
811363ac g     F .text	000000cc filename_to_upper_case
81144bb8 g     O .bss	00000001 alt_log_jtag_uart_startup_info_on_flag
81144a9c g     O .rwdata	00000002 OSQMax
8113891c g     F .text	00000090 alt_up_sd_card_set_attributes
8112f870 g     F .text	00000304 OSMutexDel
81154538 g     O .bss	00001000 OSTaskStatStk
81111d48 g     F .text	00000030 bSDcardFAT16Check
8112f03c g     F .text	000000f8 OSMemNameGet
8110f988 g     F .text	00000060 vFailCreateMutexSResources
81135718 g     F .text	00000284 Read_File_Record_At_Offset
81144a7c g     O .rwdata	00000002 OSFlagEn
8111fd1c g     F .text	00000068 _read_r
81144ac2 g     O .rwdata	00000002 OSTimeTickHookEn
81131090 g     F .text	00000170 OSQPost
8112ecbc g     F .text	000000ac OS_FlagUnlink
81102490 g     F .text	0000049c bDdr2MemoryRandomReadTest
81144a44 g     O .rwdata	00000004 alt_max_fd
811106e4 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
8112cc60 g     F .text	00000070 OS_MemCopy
8112ccd0 g     F .text	000000d8 OS_Sched
81136f90 g     F .text	0000047c find_file_in_directory
811252b4 g     F .text	000000f8 _fclose_r
8112ef44 g     F .text	000000f8 OSMemGet
8113311c g     F .text	000001bc OSTaskNameSet
8111d4c0 g     F .text	00000030 fflush
81144b98 g     O .bss	00000004 __malloc_max_sbrked_mem
81144c08 g     O .bss	00000004 OSCtxSwCtr
8113e0bc g     F .text	00000054 OSTimeTickHook
8114b2f0 g     O .bss	00001000 vOutAckHandlerTask_stk
811295e8 g     F .text	00000188 alt_irq_register
81144a86 g     O .rwdata	00000002 OSFlagNameSize
81113540 g     F .text	00000118 .hidden __extendsfdf2
8112c6e4 g     F .text	00000108 OS_EventTaskRemoveMulti
8113808c g     F .text	00000074 alt_up_sd_card_is_FAT16
811059c8 g     F .text	00000088 I2C_TestAdress
81127330 g     F .text	000008b4 .hidden __adddf3
811531c0 g     O .bss	00000018 alt_log_jtag_uart_alarm_1
81127134 g     F .text	00000078 .hidden __nesf2
8112c4cc g     F .text	00000158 OS_EventTaskWaitMulti
8111f888 g     F .text	00000114 __b2d
8113c2f8 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
81144a9e g     O .rwdata	00000002 OSQSize
81126a40 g     F .text	00000540 .hidden __umoddi3
8112a3b0 g     F .text	000000dc lseek
81131b80 g     F .text	00000214 OSSemPend
811054b0 g     F .text	000000d0 bSpwcGetLinkStatus
81105014 g     F .text	00000088 bFeebGetWindowing
81144a18 g     O .rwdata	00000004 _global_impure_ptr
81107870 g     F .text	0000004c bSSDisplayUpdate
81136a50 g     F .text	00000540 get_home_directory_cluster_for_file
8111fd84 g     F .text	0000056c _realloc_r
81144a88 g     O .rwdata	00000002 OSLowestPrio
8115884c g       *ABS*	00000000 __bss_end
8113d8e4 g     F .text	000000f8 alt_iic_isr_register
8113e18c g     F .text	0000002c OSTCBInitHook
81144ace g     O .rwdata	00000002 OSTmrCfgTicksPerSec
8112abe8 g     F .text	00000110 alt_tick
8110fc34 g     F .text	00000068 vFailGetMutexSenderTask
81107220 g     F .text	0000006c vRstcSimucamReset
811424fc g     O .rodata	00000100 __hexdig
8113ce74 g     F .text	000001b4 alt_msgdma_init
811264c0 g     F .text	00000580 .hidden __udivdi3
8110b938 g     F .text	0000017c setPreAckSenderFreePos
8112552c g     F .text	00000024 _fputwc_r
81144a70 g     O .rwdata	00000002 OSEventEn
8114236c g     O .rodata	00000028 __mprec_bigtens
8111eec0 g     F .text	0000010c __s2b
81144aca g     O .rwdata	00000002 OSTmrCfgNameSize
8114c2f0 g     O .bss	00000010 xFeeQueueTBL4
81107b78 g     F .text	00000074 bSyncSetPolarity
8110c958 g     F .text	0000028c vCheckRetransmission64
81129194 g     F .text	000000b0 .hidden __floatunsidf
81144bbc g     O .bss	00000004 alt_system_clock_in_sec
8112a100 g     F .text	00000054 alt_log_jtag_uart_startup_info
811101c0 g     F .text	00000068 vFailFoundBufferRetransmission
8111f5c0 g     F .text	00000060 __mcmp
81144c84 g     O .bss	00000004 current_sector_index
8113a5ec g     F .text	00000168 altera_avalon_uart_init
8113d150 g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
811040cc g     F .text	00000438 bSdmaDmaM2Transfer
81111790 g     F .text	00000034 vResetTimeCode
8111153c g     F .text	0000002c cFeeSpwChannelEnable
8111d878 g     F .text	00000018 __fp_lock_all
8113d890 g     F .text	00000054 alt_ic_irq_enabled
81105a50 g     F .text	000000e0 I2C_Write
81144c0c g     O .bss	00000002 OSTmrFree
8112ead8 g     F .text	000000e8 OS_FlagInit
8112ab44 g     F .text	000000a4 alt_alarm_stop
811158a0 g     F .text	0000001c strtol
81144bb5 g     O .bss	00000001 alt_log_sys_clk_on_flag
811340e8 g     F .text	00000140 OSTmrDel
81135484 g     F .text	000000e8 mark_cluster
81144aac g     O .rwdata	00000002 OSTaskIdleStkSize
81144bb0 g     O .bss	00000004 alt_irq_active
811317a0 g     F .text	000000b8 OSSemAccept
81113abc g     F .text	0000044c _fseeko_r
8111561c g     F .text	00000044 strnlen
8112f250 g     F .text	000000e0 OSMemPut
8112ed68 g     F .text	000001dc OSMemCreate
81144c10 g     O .bss	00000004 OSIdleCtrMax
8110e850 g     F .text	000001a8 vSendPusTM128
81100104 g     F .exceptions	000000dc alt_irq_handler
81129950 g     F .text	000005b8 alt_log_private_printf
81143594 g     O .rwdata	00000028 alt_dev_null
8113bf08 g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
81107b38 g     F .text	00000040 bSyncSetOst
81144ac0 g     O .rwdata	00000002 OSTicksPerSec
8114373c g     O .rwdata	00000019 alt_log_msg_bss
81137948 g     F .text	00000194 convert_filename_to_name_extension
8110c130 g     F .text	00000060 vSimMebTask
81105d98 g     F .text	00000094 i2c_start
8113ddd0 g       .text	00000000 OSIntCtxSw
81108160 g     F .text	00000074 bSyncCtrCh4OutEnable
8113ccec g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
81129490 g     F .text	00000028 alt_dcache_flush_all
8111efcc g     F .text	00000068 __hi0bits
81111b20 g     F .text	0000003c vChangeRTValue
81144c58 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110c550 g     F .text	00000184 vCheck
81111048 g     F .text	00000050 vNFeeNotInUse
81129030 g     F .text	00000080 .hidden __fixdfsi
8110a6f0 g     F .text	00000060 vNFeeControlTask
8114c300 g     O .bss	00001000 vInitialTask_stk
81144b60 g     O .bss	00000002 usiIdCMD
81107e40 g     F .text	00000054 bSyncCtrStart
811375c0 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
81121b84 g     F .text	00000018 strtod
81144c14 g     O .bss	00000004 OSTCBFreeList
81131d94 g     F .text	00000174 OSSemPendAbort
8110fdd4 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8111064c g     F .text	0000004c vFailCreateTimerRetransmisison
81110158 g     F .text	00000068 vFailGetCountSemaphorexBuffer32
8110d830 g     F .text	000002f0 bSendUART128v2
8111199c g     F .text	000000a4 vSimucamStructureInit
81144a3c g     O .rwdata	00000008 alt_dev_list
811139ec g     F .text	0000004c _fputc_r
8112ae78 g     F .text	0000010c write
81114dcc g     F .text	000000a8 _putc_r
81144c7c g     O .bss	00000004 device_pointer
81144ac4 g     O .rwdata	00000002 OSVersionNbr
811271ac g     F .text	000000bc .hidden __gtsf2
8110b3f4 g     F .text	00000118 getPreParsedPacket
81129530 g     F .text	000000b8 fstat
811117f8 g     F .text	00000040 vChangeIdNFEEMaster
811139c0 g     F .text	0000002c fprintf
8111162c g     F .text	00000038 cFeeRMAPLogEnable
81102c88 g     F .text	00000110 DMA_SINGLE_TRANSFER
81104adc g     F .text	00000058 bFeebCh6IrqFlagBufferEmpty
81110798 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
81111f54 g     F .text	00000058 _reg_write
81111838 g     F .text	00000034 vChangeDefaultIdNFEEMaster
81128638 g     F .text	000000f4 .hidden __ledf2
8114d300 g     O .bss	00001000 vStackMonitor_stk
81110a70 g     F .text	00000068 vCouldNotSendLog
81134368 g     F .text	000001b8 OSTmrRemainGet
81144a6c g     O .rwdata	00000004 OSEndiannessTest
81107414 g     F .text	00000058 v_spi_start
8111f328 g     F .text	00000148 __pow5mult
81123ca4 g     F .text	00001464 ___vfiprintf_internal_r
81144ba8 g     O .bss	00000004 __nlocale_changed
811270dc g     F .text	00000058 .hidden __umodsi3
81107f90 g     F .text	00000074 bSyncCtrSyncOutEnable
81111d78 g     F .text	000000f8 bInitializeSDCard
81110568 g     F .text	0000004c vFailParserCommTaskCreate
811152d8 g     F .text	00000038 _scanf_r
81110600 g     F .text	0000004c vFailOutAckHandlerTaskCreate
81144a7e g     O .rwdata	00000002 OSFlagGrpSize
8114e300 g     O .bss	00000058 xInUseRetrans
8113c358 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81134520 g     F .text	000000ec OSTmrStateGet
8115884c g       *ABS*	00000000 end
81104644 g     F .text	00000040 vFeebCh6HandleIrq
811102f8 g     F .text	00000068 vNoContentInPreParsedBuffer
81113f08 g     F .text	0000001c fseeko
81110c30 g     F .text	00000070 vFailCreateNFEEQueue
81113870 g     F .text	0000000c _atoi_r
8113ae38 g     F .text	00000240 altera_avalon_uart_write
81129894 g     F .text	00000054 alt_log_txchar
81113aa0 g     F .text	0000001c fseek
8110d7a0 g     F .text	00000090 vCCDChangeValues
8113972c g     F .text	000001d0 altera_avalon_jtag_uart_init
8112cf60 g     F .text	000000e4 OS_TaskStat
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110fa34 g     F .text	0000004c vFailTestCriticasParts
8113e77c g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81102020 g     F .text	00000470 bDdr2MemoryRandomWriteTest
8113a440 g     F .text	00000084 alt_avalon_timer_sc_init
81104f6c g     F .text	000000a8 bFeebSetWindowing
8113a52c g     F .text	00000068 altera_avalon_uart_write_fd
81113800 g     F .text	00000064 .hidden __clzsi2
8113a594 g     F .text	00000058 altera_avalon_uart_close_fd
8113a0f0 g     F .text	000002cc altera_avalon_jtag_uart_write
81134a94 g     F .text	00000174 OSTmr_Init
8114e358 g     O .bss	00000348 xBuffer128
8111d868 g     F .text	00000004 __sfp_lock_acquire
81103368 g     F .text	00000048 sense_log_temp
8111ea80 g     F .text	000000e4 memchr
8112cc04 g     F .text	0000005c OS_MemClr
81117a9c g     F .text	00002200 ___vfprintf_internal_r
8113deb0 g     F .text	00000164 OSTaskStkInit
81115310 g     F .text	00000060 _sprintf_r
81144b62 g     O .bss	00000001 SemCount32
8111dcf0 g     F .text	00000318 _free_r
8113db2c g     F .text	00000234 alt_printf
8110e658 g     F .text	00000050 vTimeoutCheck
81112004 g     F .text	000001fc _print_codec_status
8111e780 g     F .text	00000010 __locale_mb_cur_max
8112c214 g     F .text	000001a0 OS_EventTaskRdy
81102be4 g     F .text	000000a4 DMA_DISPATCHER_RESET
8113e538 g     F .text	00000188 __call_exitprocs
81144c18 g     O .bss	00000001 OSCPUUsage
81110e40 g     F .text	00000068 vCoudlNotCreateNFee4Task
81144ba4 g     O .bss	00000004 __mlocale_changed
81107ee8 g     F .text	00000054 bSyncCtrOneShot
81144a20 g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	000000ac _start
81108660 g     F .text	0000003c uliSyncReadStatus
81144bd0 g     O .bss	00000004 _alt_tick_rate
81130c88 g     F .text	00000294 OSQPend
81121ca4 g     F .text	000002e8 _strtoll_r
81133a0c g     F .text	0000010c OSTimeDly
8111f470 g     F .text	00000150 __lshift
8110a750 g     F .text	000002f8 vOutAckHandlerTask
8113bdb0 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
81144bd4 g     O .bss	00000004 _alt_nticks
8112a8d8 g     F .text	00000104 read
811350e8 g     F .text	000000f0 alt_sys_init
81112bfc g     F .text	0000012c .hidden __floatsisf
811224dc g     F .text	000001d8 __ssprint_r
81114ce8 g     F .text	00000068 _open_r
81111f2c g     F .text	00000028 bTestSimucamCriticalHW
8110509c g     F .text	000000ac bFeebGetBuffersStatus
8110f73c g     F .text	000000a4 ucCrc8
8110081c g     F .text	00000cb4 bDdr2EepromDump
8113e418 g     F .text	00000120 __register_exitproc
81144c19 g     O .bss	00000001 OSTaskCtr
81129860 g       .text	00000000 tx_log_str
8110e608 g     F .text	00000050 siPosStr
81126174 g     F .text	000000d0 strncmp
81133b18 g     F .text	00000164 OSTimeDlyHMSM
8111f128 g     F .text	00000200 __multiply
81139cc4 g     F .text	00000070 altera_avalon_jtag_uart_close
811075e4 g     F .text	00000058 v_spi_end
81111eec g     F .text	00000040 cGetNextChar
8113e32c g     F .text	000000ec strncpy
81144d28 g     O .bss	00000028 __malloc_current_mallinfo
81144a72 g     O .rwdata	00000002 OSEventMax
81127134 g     F .text	00000078 .hidden __eqsf2
8111f99c g     F .text	00000154 __d2b
81131f08 g     F .text	00000118 OSSemPost
811047d0 g     F .text	00000044 vFeebCh4IrqFlagClrBufferEmpty
81111b5c g     F .text	00000030 vChangeDefaultRTValue
811046c4 g     F .text	00000040 vFeebCh8HandleIrq
81144c54 g     O .bss	00000004 initialized
8110e4b8 g     F .text	00000100 vSendLog
8112bd88 g     F .text	000000e4 OSSchedUnlock
8110763c g     F .text	00000164 RTCC_SPI_R_MAC
81144a50 g     O .rwdata	00000004 alt_log_boot_on_flag
811395a8 g     F .text	00000068 altera_avalon_jtag_uart_read_fd
81121f8c g     F .text	00000254 _strtoul_r
8114e6a0 g     O .bss	00000010 xFeeQueueTBL5
8113d630 g     F .text	000000e4 alt_get_fd
81144c1c g     O .bss	00000004 OSMemFreeList
8112bee4 g     F .text	000000b8 OSStatInit
811029ac g     F .text	00000064 DMA_OPEN_DEVICE
811581e4 g     O .bss	00000014 search_data
811051ec g     F .text	00000100 bSpwcSetLink
81129244 g     F .text	00000130 alt_busy_sleep
8112e8a4 g     F .text	000000cc OSFlagQuery
81108004 g     F .text	00000074 bSyncCtrCh1OutEnable
81144aa8 g     O .rwdata	00000002 OSTaskCreateExtEn
81112200 g     F .text	00000074 _split_codec_status
8111b944 g     F .text	0000005c _close_r
81110360 g     F .text	00000068 vCouldNotSendEthConfUART
81109edc g     F .text	00000814 vInitialTask
8112a008 g     F .text	000000f8 alt_log_jtag_uart_print_control_reg
8113c298 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8113e2b0 g     F .text	0000007c memcmp
8112c1ec g     F .text	00000028 OS_Dummy
81139678 g     F .text	00000058 altera_avalon_jtag_uart_close_fd
8115884c g       *ABS*	00000000 __alt_stack_base
811396d0 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
81104814 g     F .text	00000044 vFeebCh5IrqFlagClrBufferEmpty
81113f88 g     F .text	000000d4 _fwrite_r
8113c3b8 g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81104924 g     F .text	00000058 bFeebCh1IrqFlagBufferEmpty
8111b7e8 g     F .text	0000015c __swsetup_r
81155538 g     O .bss	00000180 OSQTbl
81153190 g     O .bss	0000001c xConfEth
81127be4 g     F .text	000008f0 .hidden __divdf3
81111bc0 g     F .text	0000003c vChangeSyncSource
8111d720 g     F .text	00000120 __sfp
811581f8 g     O .bss	00000054 boot_sector_data
81102af4 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111fc18 g     F .text	00000078 __copybits
81143114 g     O .rwdata	00000408 __malloc_av_
8111d874 g     F .text	00000004 __sinit_lock_release
81144ae4 g     O .bss	00000004 uliInitialState
81105e2c g     F .text	00000080 i2c_stop
81112318 g     F .text	00000064 Verif_Error
8111237c g     F .text	00000034 toInt
8110fb80 g     F .text	0000004c vFailSendPreAckSenderSemaphore
81144c20 g     O .bss	00000004 OSTCBHighRdy
81112e20 g     F .text	00000720 .hidden __muldf3
811153e4 g     F .text	0000005c __sread
8111db88 g     F .text	0000003c fread
81144c24 g     O .bss	00000004 OSQFreeList
8113d520 g     F .text	00000110 alt_find_file
8113d30c g     F .text	000000ac alt_dev_llist_insert
8112b0b8 g     F .text	00000128 __malloc_lock
81113990 g     F .text	00000030 _fprintf_r
8112aa48 g     F .text	000000fc sbrk
811114b8 g     F .text	0000002c vFeeSpwRMAPLoadDefault
811100f0 g     F .text	00000068 vFailGetCountSemaphorexBuffer64
811158bc g     F .text	000021e0 ___svfprintf_internal_r
8110e9f8 g     F .text	00000088 vTMPusTestConnection
8112b3dc g     F .text	00000148 OSEventNameSet
8111d45c g     F .text	00000064 _fflush_r
811251e8 g     F .text	000000cc _calloc_r
81144c28 g     O .bss	00000001 OSRdyGrp
81107a34 g     F .text	00000044 ucSyncStatusCycleNumber
8113460c g     F .text	00000148 OSTmrStart
81104604 g     F .text	00000040 vFeebCh5HandleIrq
81113978 g     F .text	00000018 fopen
81102a10 g     F .text	0000004c DMA_CONFIG
81144ae4 g       *ABS*	00000000 __bss_start
81114bc0 g     F .text	00000128 memset
8110b7fc g     F .text	0000013c setPreParsedFreePos
8113ce14 g     F .text	00000060 alt_msgdma_open
8110d5bc g     F .text	0000017c main
8110fd04 g     F .text	00000068 vFailGetMutexReceiverTask
8114e6b0 g     O .bss	00001000 vNFeeControlTask_stk
81111a78 g     F .text	0000003c vChangeEPValue
81144bcc g     O .bss	00000004 alt_envp
81144b94 g     O .bss	00000004 __malloc_max_total_mem
8113c6b8 g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
8110f7e0 g     F .text	0000005c ucCrc8wInit
81110698 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81139610 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81102fa8 g     F .text	000002c8 POWER_Read
81105fe4 g     F .text	00000160 i2c_read
8111b768 g     F .text	00000018 __swbuf
81142848 g     O .rodata	00000100 OSUnMapTbl
81127268 g     F .text	000000c8 .hidden __ltsf2
811389ac g     F .text	00000090 alt_up_sd_card_get_attributes
8111d954 g     F .text	00000234 _fread_r
8110fbcc g     F .text	00000068 vFailGetCountSemaphoreSenderTask
811057d8 g     F .text	0000003c bDisableIsoDrivers
81144aa2 g     O .rwdata	00000002 OSSemEn
811351d8 g     F .text	000000bc Write_Sector_Data
81138dbc g     F .text	00000628 alt_up_sd_card_write
8114f6b0 g     O .bss	00000018 xFeeQ
8112e508 g     F .text	0000039c OSFlagPost
81115530 g     F .text	00000008 __sclose
811109a0 g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
811253ac g     F .text	00000014 fclose
8112c3b4 g     F .text	00000118 OS_EventTaskWait
81110868 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
81115660 g     F .text	00000240 _strtol_r
81113658 g     F .text	000001a8 .hidden __truncdfsf2
8114f6c8 g     O .bss	00000010 xFeeQueueTBL2
8112d044 g     F .text	000000d4 OS_TaskStatStkChk
81132e24 g     F .text	00000158 OSTaskDelReq
8111bba8 g     F .text	00001690 _dtoa_r
8113c9d4 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
8111425c g     F .text	00000814 _malloc_r
811263b0 g     F .text	00000030 __ascii_wctomb
8112f6a0 g     F .text	000001d0 OSMutexCreate
81110800 g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
81109d90 g     F .text	0000014c bCheckInAck32
81144a48 g     O .rwdata	00000004 alt_errno
8113c500 g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8112be6c g     F .text	00000078 OSStart
811052ec g     F .text	000000d0 bSpwcGetLink
81106d38 g     F .text	000004e8 POWER_SPI_RW
811238f8 g     F .text	000000dc __submore
81129f68 g     F .text	000000a0 altera_avalon_jtag_uart_report_log
8112b050 g     F .text	00000068 __env_unlock
81110d08 g     F .text	00000068 vCoudlNotCreateNFee1Task
8111e4cc g     F .text	000000cc _fwalk
811332d8 g     F .text	000001dc OSTaskResume
8112f330 g     F .text	000000f0 OSMemQuery
81144ab4 g     O .rwdata	00000002 OSTaskStatEn
8115884c g       *ABS*	00000000 __alt_stack_limit
81144afc g     O .bss	00000004 ECommSpwCh
81111c64 g     F .text	0000003c vChangeAutoResetSync
8111ea1c g     F .text	00000064 _mbtowc_r
811097ac g     F .text	00000350 vInAckHandlerTaskV2
81144a8e g     O .rwdata	00000002 OSMemMax
81131200 g     F .text	00000178 OSQPostFront
81114e74 g     F .text	000000d0 putc
81126f80 g     F .text	00000084 .hidden __divsi3
81144c29 g     O .bss	00000006 OSRdyTbl
81144a68 g     O .rwdata	00000002 OSDebugEn
811437ac g     O .rwdata	0000002a alt_log_msg_cache
8111dbc4 g     F .text	0000012c _malloc_trim_r
8113e77c g       *ABS*	00000000 __CTOR_END__
81144b88 g     O .bss	00000008 xSdHandle
811127f8 g     F .text	00000404 .hidden __mulsf3
81144a80 g     O .rwdata	00000002 OSFlagNodeSize
81144ae8 g     O .bss	00000004 pnt_memory
81111cd0 g     F .text	00000048 vSyncReset
81107af8 g     F .text	00000040 bSyncSetPer
81100308 g     F .text	00000514 bDdr2EepromTest
81144c60 g     O .bss	00000004 status_register
81144ac8 g     O .rwdata	00000002 OSTmrCfgMax
8110848c g     F .text	00000074 bSyncIrqFlagClrError
81110430 g     F .text	00000068 vFailSetPreAckSenderBuffer
8112043c g     F .text	000000dc strcmp
81144c68 g     O .bss	00000004 command_register
8113078c g     F .text	000001b4 OSQCreate
81132f7c g     F .text	000001a0 OSTaskNameGet
8114f6d8 g     O .bss	00000800 vFeeTask4_stk
8114fed8 g     O .bss	00000018 xReceivedACK
81131378 g     F .text	00000214 OSQPostOpt
8112bf9c g     F .text	00000228 OSTimeTick
81144ab0 g     O .rwdata	00000002 OSTaskMax
8113e77c g       *ABS*	00000000 __DTOR_LIST__
81131858 g     F .text	000000e0 OSSemCreate
81144ad4 g     O .rwdata	00000002 OSTmrWheelSize
81110bc8 g     F .text	00000068 vFailCreateScheduleQueue
81111fac g     F .text	00000058 _reg_read
81130338 g     F .text	00000174 OSMutexQuery
811284d4 g     F .text	00000088 .hidden __nedf2
81144aaa g     O .rwdata	00000002 OSTaskDelEn
81111a40 g     F .text	00000038 vLoadDefaultEPValue
8114fef0 g     O .bss	00000800 vFeeTask1_stk
811082bc g     F .text	00000074 bSyncCtrCh7OutEnable
81132020 g     F .text	00000118 OSSemQuery
81130940 g     F .text	00000288 OSQDel
81130f1c g     F .text	00000174 OSQPendAbort
81144b64 g     O .bss	00000004 xMutexPreParsed
811350a8 g     F .text	00000040 alt_irq_init
8112a9dc g     F .text	0000006c alt_release_fd
811353c8 g     F .text	000000bc get_cluster_flag
81108500 g     F .text	00000074 bSyncIrqFlagClrBlank
8113d10c g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
81143778 g     O .rwdata	00000031 alt_log_msg_stackpointer
81115370 g     F .text	00000074 sprintf
81141ee4 g     O .rodata	00000100 .hidden __clz_tab
8113599c g     F .text	00000294 Write_File_Record_At_Offset
81101590 g     F .text	00000580 bDdr2MemoryWriteTest
8110fd6c g     F .text	00000068 vFailGetMutexTxUARTSenderTask
81144ba0 g     O .bss	00000004 _PathLocale
811085cc g     F .text	00000058 bSyncIrqFlagBlank
81106bf0 g     F .text	000000c0 iMsgdmaConstructExtendedMmToMmDescriptor
81134754 g     F .text	000001e8 OSTmrStop
8110e5b8 g     F .text	00000050 usiGetIdCMD
81121b9c g     F .text	00000108 strtof
8113e25c g     F .text	00000014 atexit
81104584 g     F .text	00000040 vFeebCh3HandleIrq
811271ac g     F .text	000000bc .hidden __gesf2
81115538 g     F .text	0000004c strcspn
8111b780 g     F .text	00000068 _write_r
8110728c g     F .text	00000074 vRstcReleaseDeviceReset
811105b4 g     F .text	0000004c vFailInAckHandlerTaskCreate
8112bcf4 g     F .text	00000094 OSSchedLock
81110dd8 g     F .text	00000068 vCoudlNotCreateNFee3Task
8111e7b0 g     F .text	00000018 setlocale
8113c460 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
811556b8 g     O .bss	00000800 OSTmrTaskStk
81115294 g     F .text	00000044 scanf
8112d8fc g     F .text	00000110 OSFlagCreate
81135c30 g     F .text	00000688 Check_for_DOS_FAT
81137adc g     F .text	000002d0 create_file
81120434 g     F .text	00000008 nanf
81144a1c g     O .rwdata	00000004 _impure_ptr
81144c64 g     O .bss	00000004 CSD_register_w0
81144bc4 g     O .bss	00000004 alt_argc
81110088 g     F .text	00000068 vFailGetCountSemaphorexBuffer128
8111d238 g     F .text	00000224 __sflush_r
8111e83c g     F .text	000000b4 _mbrtowc_r
8113d420 g     F .text	00000068 _do_dtors
8111e79c g     F .text	00000008 __locale_cjk_lang
811033b0 g     F .text	0000078c sense_log
81144af4 g     O .bss	00000004 ESdmaBufferSide
81144a7a g     O .rwdata	00000002 OSEventMultiEn
81113a9c g     F .text	00000004 _fseek_r
811506f0 g     O .bss	00001000 vParserCommTask_stk
8110f918 g     F .text	00000070 printErrorTask
81111ab4 g     F .text	00000030 vChangeDefaultEPValue
8110cbe4 g     F .text	000002c8 vCheckRetransmission32
81133f24 g     F .text	000001c4 OSTmrCreate
8110c190 g     F .text	00000354 vStackMonitor
8111505c g     F .text	000001dc __srefill_r
81105814 g     F .text	0000003c bEnableLvdsBoard
81144b68 g     O .bss	00000004 xMutexBuffer32
8112da0c g     F .text	00000250 OSFlagDel
81144c30 g     O .bss	00000004 OSEventFreeList
8110588c g     F .text	000000c0 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8111e9d0 g     F .text	0000004c __ascii_mbtowc
81107dc8 g     F .text	00000078 bSyncCtrExtnIrq
8111f824 g     F .text	00000064 __ulp
81111698 g     F .text	000000b8 vNFeeControlInit
8112dee0 g     F .text	000005c0 OSFlagPend
81144ac6 g     O .rwdata	00000002 OSTmrEn
8111d890 g     F .text	00000018 __fp_unlock_all
81113a38 g     F .text	00000064 fputc
8110de18 g     F .text	000002f8 bSendUART32v2
8110bab4 g     F .text	0000019c setPreAckReceiverFreePos
81107d88 g     F .text	00000040 bSyncErrInj
81144a34 g     O .rwdata	00000008 alt_fs_list
811516f0 g     O .bss	00000800 vSimMebTask_stk
81110fe0 g     F .text	00000068 vCoudlNotCreateMebTask
81136478 g     F .text	00000274 check_file_name_for_FAT16_compliance
81151ef0 g     O .bss	00000800 vFeeTask3_stk
81134228 g     F .text	00000140 OSTmrNameGet
81144e50 g     O .bss	00000400 xSZData
8112ce24 g     F .text	0000007c OS_StrCopy
81144c70 g     O .bss	00000004 buffer_memory
81110290 g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
81111904 g     F .text	00000098 vLogWriteNUC
81144a90 g     O .rwdata	00000002 OSMemNameSize
81103b3c g     F .text	000000b0 bSdmaInitM1Dma
81108418 g     F .text	00000074 bSyncIrqEnableBlank
8113e13c g     F .text	00000028 OSInitHookEnd
81111170 g     F .text	00000348 vUpdateMemMapFEE
81110500 g     F .text	00000068 vFailSetPreAckReceiverBuffer
81104b8c g     F .text	00000058 bFeebCh8IrqFlagBufferEmpty
81144abc g     O .rwdata	00000002 OSTCBPrioTblMax
8111e7c8 g     F .text	0000000c localeconv
81110f78 g     F .text	00000068 vCoudlNotCreateDataControllerTask
81144b6c g     O .bss	00000004 xTimerRetransmission
8110b5ac g     F .text	00000250 vReceiverUartTask
81144bc0 g     O .bss	00000004 alt_log_sys_clk_count
81144ab8 g     O .rwdata	00000002 OSTaskStatStkChkEn
8112a1b8 g     F .text	00000140 alt_log_write
811526f0 g     O .bss	00000800 vFeeTask2_stk
81144b70 g     O .bss	00000004 xMutexBuffer128
81104504 g     F .text	00000040 vFeebCh1HandleIrq
81104684 g     F .text	00000040 vFeebCh7HandleIrq
8113d714 g     F .text	00000058 alt_ic_isr_register
81144a8c g     O .rwdata	00000002 OSMemEn
81144a08 g     O .rwdata	00000004 alt_stack_limit_value
8111405c g     F .text	0000003c fwrite
81144c74 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
81144a96 g     O .rwdata	00000002 OSMutexEn
81144ae4 g       *ABS*	00000000 _edata
8113a4c4 g     F .text	00000068 altera_avalon_uart_read_fd
811117c4 g     F .text	00000034 vLoadDefaultIdNFEEMaster
8115884c g       *ABS*	00000000 _end
8115824c g     O .bss	00000500 active_files
81144c34 g     O .bss	00000001 OSIntNesting
8110fe20 g     F .text	0000004c vFailInitialization
811014d0 g     F .text	000000c0 bDdr2SwitchMemory
81111594 g     F .text	0000002c cFeeRMAPDump
81144b74 g     O .bss	00000004 xSemCountBuffer32
811253c0 g     F .text	0000016c __fputwc
811114e4 g     F .text	0000002c vFeeSpwRMAPChangeConfig
8111b540 g     F .text	00000070 vfscanf
81137dac g     F .text	00000150 copy_file_record_name_to_string
81139d34 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
81133c7c g     F .text	000001dc OSTimeDlyResume
811362b8 g     F .text	000000f4 Look_for_FAT16
8112dd8c g     F .text	00000154 OSFlagNameSet
81144b78 g     O .bss	00000004 xMutexBuffer64
811334b4 g     F .text	000001c8 OSTaskStkChk
8113d7fc g     F .text	00000094 alt_ic_irq_disable
81103c9c g     F .text	00000430 bSdmaDmaM1Transfer
81144a92 g     O .rwdata	00000002 OSMemSize
8110ff50 g     F .text	00000068 vFailSetCountSemaphorexBuffer32
81115448 g     F .text	00000084 __swrite
81144a24 g     O .rwdata	00000004 __malloc_trim_threshold
8111e790 g     F .text	0000000c __locale_msgcharset
81152ef0 g     O .bss	00000010 xFeeQueueTBL1
81144c38 g     O .bss	00000004 OSTCBCur
811108d0 g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81106cf4 g     F .text	00000044 iMsgdmaExtendedDescriptorSyncTransfer
8113e270 g     F .text	00000040 exit
81130118 g     F .text	00000220 OSMutexPost
81108574 g     F .text	00000058 bSyncIrqFlagError
811381d8 g     F .text	000003c0 alt_up_sd_card_find_next
81144a94 g     O .rwdata	00000002 OSMemTblSize
8111e598 g     F .text	000000cc _fwalk_reent
8113c858 g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
81112d28 g     F .text	000000f8 .hidden __floatunsisf
8111f620 g     F .text	00000204 __mdiff
81110ca0 g     F .text	00000068 vCoudlNotCreateNFee0Task
81104be4 g     F .text	00000180 vFeebInitIrq
8110feb8 g     F .text	0000004c vFailSenderCreate
81127004 g     F .text	00000074 .hidden __modsi3
81110ea8 g     F .text	00000068 vCoudlNotCreateNFee5Task
81107cd4 g     F .text	0000003c uliSyncGetPer
81144b7c g     O .bss	00000004 xMutexSenderACK
81110730 g     F .text	00000068 vFailGetBlockingSemTimeoutTask
81144a14 g     O .rwdata	00000004 __ctype_ptr__
81110498 g     F .text	00000068 vFailSetPreParsedBuffer
811352e8 g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
8111d86c g     F .text	00000004 __sfp_lock_release
81104e38 g     F .text	000000ac bFeebGetIrqControl
81110a08 g     F .text	00000068 vCouldNotSendTurnOff
8112bb3c g     F .text	00000064 OSInit
811061c4 g     F .text	00000078 bSetPainelLeds
8113bfa0 g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
81144c3c g     O .bss	00000004 OSTmrTime
81101b10 g     F .text	00000510 bDdr2MemoryReadTest
81133868 g     F .text	0000012c OSTaskQuery
811083a4 g     F .text	00000074 bSyncIrqEnableError
811316f0 g     F .text	000000b0 OS_QInit
81120364 g     F .text	000000d0 __sccl
81113864 g     F .text	0000000c atoi
811087b0 g     F .text	00000070 vFeeTask
8112cea0 g     F .text	0000005c OS_StrLen
8110497c g     F .text	00000058 bFeebCh2IrqFlagBufferEmpty
8110f83c g     F .text	000000dc vDataControllerInit
8112f134 g     F .text	0000011c OSMemNameSet
81141fe4 g     O .rodata	00000101 _ctype_
81107c98 g     F .text	0000003c uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
81110020 g     F .text	00000068 vFailSetCountSemaphorexBuffer128
81144aae g     O .rwdata	00000002 OSTaskProfileEn
8113be70 g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
81144b80 g     O .bss	00000004 xTxUARTMutex
81144c40 g     O .bss	00000004 OSTime
81144a2c g     O .rwdata	00000004 __mbtowc
8113aae4 g     F .text	0000005c altera_avalon_uart_close
81144c44 g     O .bss	00000004 OSTmrSem
81155eb8 g     O .bss	00000800 OSTaskIdleStk
8111387c g     F .text	000000fc _fopen_r
81144b34 g     O .bss	00000004 pdata
8113e6c0 g     F .text	000000bc _exit
8113d194 g     F .text	00000134 alt_alarm_start
8112dc5c g     F .text	00000130 OSFlagNameGet
81133e58 g     F .text	00000064 OSTimeGet
81144af8 g     O .bss	00000004 ESdmaChBufferId
81138a3c g     F .text	00000380 alt_up_sd_card_read
81114098 g     F .text	000001c4 __smakebuf_r
81144b84 g     O .bss	00000001 SemCount64
8110db20 g     F .text	000002f8 bSendUART64v2
81104a2c g     F .text	00000058 bFeebCh4IrqFlagBufferEmpty
81144adc g     O .rwdata	00000008 alt_msgdma_list
81115584 g     F .text	00000098 strlen
81107530 g     F .text	000000b4 uc_spi_get_byte
8113e06c g     F .text	00000028 OSTaskSwHook
8112a738 g     F .text	0000015c open
811566b8 g     O .bss	00000c30 OSEventTbl
81111510 g     F .text	0000002c vFeeSpwRMAPChangeDefault
8112855c g     F .text	000000dc .hidden __gedf2
81152f00 g     O .bss	00000020 xSenderACK
8113dd60 g     F .text	00000044 alt_putchar
811572e8 g     O .bss	00000e58 OSTCBTbl
811256d8 g     F .text	00000838 __gethex
81132138 g     F .text	00000108 OSSemSet
8110c4e4 g     F .text	0000006c vTimeoutCheckerTaskv2
811115c0 g     F .text	00000038 cFeeRMAPEchoingEnable
81144a30 g     O .rwdata	00000004 __wctomb
8110d328 g     F .text	00000294 vVariablesInitialization
81123c8c g     F .text	00000018 __sprint_r
81104ee4 g     F .text	00000088 bFeebGetIrqFlags
81144af0 g     O .bss	00000004 pxDmaM2Dev
8110f9e8 g     F .text	0000004c vFailCreateSemaphoreResources
81144a4c g     O .rwdata	00000004 alt_priority_mask
81105850 g     F .text	0000003c bDisableLvdsBoard
81131938 g     F .text	00000248 OSSemDel
81144c48 g     O .bss	00000004 OSFlagFreeList
8110746c g     F .text	000000c4 v_spi_send_byte
811077a0 g     F .text	000000d0 bSSDisplayConfig
8113d76c g     F .text	00000090 alt_ic_irq_enable
81144a74 g     O .rwdata	00000002 OSEventNameSize
81119c9c g     F .text	0000001c __vfprintf_internal
81144c4c g     O .bss	00000001 OSStatRdy
81108078 g     F .text	00000074 bSyncCtrCh2OutEnable
81158140 g     O .bss	000000a4 OSTCBPrioTbl
8113ab84 g     F .text	00000270 altera_avalon_uart_read
811263e0 g     F .text	00000064 _wctomb_r
8112af84 g     F .text	000000cc __env_lock
81144aba g     O .rwdata	00000002 OSTaskSwHookEn
8110478c g     F .text	00000044 vFeebCh3IrqFlagClrBufferEmpty
8112872c g     F .text	00000904 .hidden __subdf3
81152f20 g     O .bss	00000260 xPreParsed
81107d10 g     F .text	0000003c uliSyncGetOst
81144b85 g     O .bss	00000001 SemCount128
81104858 g     F .text	00000044 vFeebCh6IrqFlagClrBufferEmpty
8110e110 g     F .text	00000290 vSendEthConf
8111f034 g     F .text	000000b0 __lo0bits
81119d7c g     F .text	000017c4 __svfscanf_r
81109138 g     F .text	00000674 vPrintUARTNFee
81144a58 g     O .rwdata	00000008 alt_alarm_list
811239d4 g     F .text	0000019c _ungetc_r
81144a82 g     O .rwdata	00000002 OSFlagWidth
8113d3b8 g     F .text	00000068 _do_ctors
81102a5c g     F .text	0000004c DMA_BUSY
811262e8 g     F .text	000000c8 wcrtomb
8110d738 g     F .text	00000068 vCCDLoadDefaultValues
811293b8 g     F .text	000000d8 close
81107d4c g     F .text	0000003c uliSyncGetGeneral
81144bdc g     O .bss	00000004 alt_envsem
811298e8 g     F .text	00000068 alt_log_repchar
81144c50 g     O .bss	00000004 OSIdleCtrRun
8112c1c4 g     F .text	00000028 OSVersion
81144acc g     O .rwdata	00000002 OSTmrCfgWheelSize
81133994 g     F .text	00000078 OS_TaskStkClr
81111e70 g     F .text	0000003c siOpenFile
81108750 g     F .text	00000060 vDataControlTask
81144aa6 g     O .rwdata	00000002 OSTaskCreateEn
8110e3a0 g     F .text	00000118 vSendTurnOff
8110fae8 g     F .text	0000004c vFailSendPreParsedSemaphore
811367ac g     F .text	000002a4 match_file_record_to_name_ext
8112c7ec g     F .text	00000070 OS_EventWaitListInit
81125550 g     F .text	00000088 fputwc
81153180 g     O .bss	00000010 xFeeQueueTBL0
8110fa80 g     F .text	00000068 vFailSendxSemCommInit
8113e164 g     F .text	00000028 OSTaskIdleHook
8111d870 g     F .text	00000004 __sinit_lock_acquire
8111ed98 g     F .text	00000128 __multadd
8110489c g     F .text	00000044 vFeebCh7IrqFlagClrBufferEmpty
8110799c g     F .text	0000004c ucSyncStatusState
8113367c g     F .text	000001ec OSTaskSuspend
8111ed70 g     F .text	00000028 _Bfree
81107c5c g     F .text	0000003c uliSyncGetMbt
8112cefc g     F .text	00000064 OS_TaskIdle
81144ad2 g     O .rwdata	00000002 OSTmrTblSize
8113158c g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK
        /* Ensure stack didn't just overflow. */
        bltu  sp, et, .Lstack_overflow
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100028:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
8110002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
81100030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
8110003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
81100040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100044:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100048:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
8110004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
81100050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
8110005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
81100060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
8110006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
81100070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
8110007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100088:	11001040 	call	81100104 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
81100090:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100094:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100098:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a4:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a8:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000fc:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110011c:	112bba00 	call	8112bba0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110014c:	00a045b4 	movhi	r2,33046
81100150:	10a1d304 	addi	r2,r2,-30900
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a045b4 	movhi	r2,33046
81100168:	10a1d304 	addi	r2,r2,-30900
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
      }
      mask <<= 1;
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>

    active = alt_irq_pending ();
811001b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001c4:	112bbf40 	call	8112bbf4 <OSIntExit>
}
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8110021c:	d0a0a117 	ldw	r2,-32124(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
81100224:	d0a0a117 	ldw	r2,-32124(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
81100244:	0005883a 	mov	r2,zero
}
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:
    .int 2, 1, 0b, 1b
    .popsection
#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)
8110025c:	01204534 	movhi	r4,33044
81100260:	21129404 	addi	r4,r4,19024
81100264:	21400037 	ldwio	r5,0(r4)
81100268:	01400326 	beq	zero,r5,81100278 <_start+0x1c>
8110026c:	01204534 	movhi	r4,33044
81100270:	210deb04 	addi	r4,r4,14252
81100274:	11298600 	call	81129860 <tx_log_str>

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
81100278:	01204534 	movhi	r4,33044
8110027c:	21129404 	addi	r4,r4,19024
81100280:	21400037 	ldwio	r5,0(r4)
81100284:	01400326 	beq	zero,r5,81100294 <_start+0x38>
81100288:	01204534 	movhi	r4,33044
8110028c:	210dde04 	addi	r4,r4,14200
81100290:	11298600 	call	81129860 <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100294:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100298:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110029c:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
811002a0:	d6b28214 	ori	gp,gp,51720
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)
811002a4:	01204534 	movhi	r4,33044
811002a8:	21129404 	addi	r4,r4,19024
811002ac:	21400037 	ldwio	r5,0(r4)
811002b0:	01400326 	beq	zero,r5,811002c0 <_start+0x64>
811002b4:	01204534 	movhi	r4,33044
811002b8:	210dcf04 	addi	r4,r4,14140
811002bc:	11298600 	call	81129860 <tx_log_str>

    movhi r2, %hi(__bss_start)
811002c0:	00a04534 	movhi	r2,33044
    ori r2, r2, %lo(__bss_start)
811002c4:	1092b914 	ori	r2,r2,19172

    movhi r3, %hi(__bss_end)
811002c8:	00e04574 	movhi	r3,33045
    ori r3, r3, %lo(__bss_end)
811002cc:	18e21314 	ori	r3,r3,34892

    beq r2, r3, 1f
811002d0:	10c00326 	beq	r2,r3,811002e0 <_start+0x84>

0:
    stw zero, (r2)
811002d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
811002d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
811002dc:	10fffd36 	bltu	r2,r3,811002d4 <__reset+0xfb0e02d4>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
811002e0:	d6200017 	ldw	et,-32768(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)
811002e4:	01204534 	movhi	r4,33044
811002e8:	21129404 	addi	r4,r4,19024
811002ec:	21400037 	ldwio	r5,0(r4)
811002f0:	01400326 	beq	zero,r5,81100300 <_start+0xa4>
811002f4:	01204534 	movhi	r4,33044
811002f8:	210dd604 	addi	r4,r4,14168
811002fc:	11298600 	call	81129860 <tx_log_str>

    /* Call the C entry point. It should never return. */
    call alt_main
81100300:	112a48c0 	call	8112a48c <alt_main>

81100304 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100304:	003fff06 	br	81100304 <__reset+0xfb0e0304>

81100308 <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
81100308:	defff604 	addi	sp,sp,-40
8110030c:	de00012e 	bgeu	sp,et,81100314 <bDdr2EepromTest+0xc>
81100310:	003b68fa 	trap	3
81100314:	dfc00915 	stw	ra,36(sp)
81100318:	df000815 	stw	fp,32(sp)
8110031c:	df000804 	addi	fp,sp,32
81100320:	2005883a 	mov	r2,r4
81100324:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
81100328:	00e04534 	movhi	r3,33044
8110032c:	18d35404 	addi	r3,r3,19792
81100330:	00a04534 	movhi	r2,33044
81100334:	10b9df04 	addi	r2,r2,-6276
81100338:	1009883a 	mov	r4,r2
8110033c:	00800884 	movi	r2,34
81100340:	100d883a 	mov	r6,r2
81100344:	200b883a 	mov	r5,r4
81100348:	1809883a 	mov	r4,r3
8110034c:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
81100350:	d0a05017 	ldw	r2,-32448(gp)
81100354:	01604534 	movhi	r5,33044
81100358:	29535404 	addi	r5,r5,19792
8110035c:	1009883a 	mov	r4,r2
81100360:	11139c00 	call	811139c0 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100364:	00bfe804 	movi	r2,-96
81100368:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
8110036c:	00800044 	movi	r2,1
81100370:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
81100374:	e0bfff03 	ldbu	r2,-4(fp)
81100378:	10c00060 	cmpeqi	r3,r2,1
8110037c:	1800031e 	bne	r3,zero,8110038c <bDdr2EepromTest+0x84>
81100380:	108000a0 	cmpeqi	r2,r2,2
81100384:	1000081e 	bne	r2,zero,811003a8 <bDdr2EepromTest+0xa0>
81100388:	00000e06 	br	811003c4 <bDdr2EepromTest+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110038c:	00a00034 	movhi	r2,32768
81100390:	10827c04 	addi	r2,r2,2544
81100394:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100398:	00a00034 	movhi	r2,32768
8110039c:	10828004 	addi	r2,r2,2560
811003a0:	e0bffb15 	stw	r2,-20(fp)
		break;
811003a4:	00001906 	br	8110040c <bDdr2EepromTest+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811003a8:	00a00034 	movhi	r2,32768
811003ac:	10825804 	addi	r2,r2,2400
811003b0:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
811003b4:	00a00034 	movhi	r2,32768
811003b8:	10825c04 	addi	r2,r2,2416
811003bc:	e0bffb15 	stw	r2,-20(fp)
		break;
811003c0:	00001206 	br	8110040c <bDdr2EepromTest+0x104>
	default:
		bSuccess = FALSE;
811003c4:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811003c8:	00e04534 	movhi	r3,33044
811003cc:	18d35404 	addi	r3,r3,19792
811003d0:	00a04534 	movhi	r2,33044
811003d4:	10b9e804 	addi	r2,r2,-6240
811003d8:	1009883a 	mov	r4,r2
811003dc:	00800bc4 	movi	r2,47
811003e0:	100d883a 	mov	r6,r2
811003e4:	200b883a 	mov	r5,r4
811003e8:	1809883a 	mov	r4,r3
811003ec:	1114a700 	call	81114a70 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811003f0:	d0a05017 	ldw	r2,-32448(gp)
811003f4:	01604534 	movhi	r5,33044
811003f8:	29535404 	addi	r5,r5,19792
811003fc:	1009883a 	mov	r4,r2
81100400:	11139c00 	call	811139c0 <fprintf>
		;
#endif
		return bSuccess;
81100404:	e0bff917 	ldw	r2,-28(fp)
81100408:	0000ff06 	br	81100808 <bDdr2EepromTest+0x500>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
8110040c:	00e04534 	movhi	r3,33044
81100410:	18d35404 	addi	r3,r3,19792
81100414:	00a04534 	movhi	r2,33044
81100418:	10b9f404 	addi	r2,r2,-6192
8110041c:	1009883a 	mov	r4,r2
81100420:	008005c4 	movi	r2,23
81100424:	100d883a 	mov	r6,r2
81100428:	200b883a 	mov	r5,r4
8110042c:	1809883a 	mov	r4,r3
81100430:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
81100434:	d0a05017 	ldw	r2,-32448(gp)
81100438:	01604534 	movhi	r5,33044
8110043c:	29535404 	addi	r5,r5,19792
81100440:	1009883a 	mov	r4,r2
81100444:	11139c00 	call	811139c0 <fprintf>
#endif
	usleep(20 * 1000);
81100448:	01138804 	movi	r4,20000
8110044c:	112acf80 	call	8112acf8 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100450:	e03ffc15 	stw	zero,-16(fp)
81100454:	00003306 	br	81100524 <bDdr2EepromTest+0x21c>
		ucControlAddr = iI;
81100458:	e0bffc17 	ldw	r2,-16(fp)
8110045c:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100460:	e0bffd03 	ldbu	r2,-12(fp)
81100464:	10c03fcc 	andi	r3,r2,255
81100468:	18c0201c 	xori	r3,r3,128
8110046c:	18ffe004 	addi	r3,r3,-128
81100470:	e13ffd43 	ldbu	r4,-11(fp)
81100474:	e0bffe04 	addi	r2,fp,-8
81100478:	d8800015 	stw	r2,0(sp)
8110047c:	200f883a 	mov	r7,r4
81100480:	180d883a 	mov	r6,r3
81100484:	e17ffb17 	ldw	r5,-20(fp)
81100488:	e13ffa17 	ldw	r4,-24(fp)
8110048c:	1105b300 	call	81105b30 <I2C_Read>
81100490:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100494:	e0bff917 	ldw	r2,-28(fp)
81100498:	10001026 	beq	r2,zero,811004dc <bDdr2EepromTest+0x1d4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
8110049c:	e0bffd43 	ldbu	r2,-11(fp)
811004a0:	e0fffe03 	ldbu	r3,-8(fp)
811004a4:	18c03fcc 	andi	r3,r3,255
811004a8:	180f883a 	mov	r7,r3
811004ac:	100d883a 	mov	r6,r2
811004b0:	01604534 	movhi	r5,33044
811004b4:	2979fa04 	addi	r5,r5,-6168
811004b8:	01204534 	movhi	r4,33044
811004bc:	21135404 	addi	r4,r4,19792
811004c0:	11153700 	call	81115370 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
811004c4:	d0a05017 	ldw	r2,-32448(gp)
811004c8:	01604534 	movhi	r5,33044
811004cc:	29535404 	addi	r5,r5,19792
811004d0:	1009883a 	mov	r4,r2
811004d4:	11139c00 	call	811139c0 <fprintf>
811004d8:	00000f06 	br	81100518 <bDdr2EepromTest+0x210>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
811004dc:	00e04534 	movhi	r3,33044
811004e0:	18d35404 	addi	r3,r3,19792
811004e4:	00a04534 	movhi	r2,33044
811004e8:	10b9ff04 	addi	r2,r2,-6148
811004ec:	1009883a 	mov	r4,r2
811004f0:	008005c4 	movi	r2,23
811004f4:	100d883a 	mov	r6,r2
811004f8:	200b883a 	mov	r5,r4
811004fc:	1809883a 	mov	r4,r3
81100500:	1114a700 	call	81114a70 <memcpy>
			debug(fp, cDebugBuffer);
81100504:	d0a05017 	ldw	r2,-32448(gp)
81100508:	01604534 	movhi	r5,33044
8110050c:	29535404 	addi	r5,r5,19792
81100510:	1009883a 	mov	r4,r2
81100514:	11139c00 	call	811139c0 <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100518:	e0bffc17 	ldw	r2,-16(fp)
8110051c:	10800044 	addi	r2,r2,1
81100520:	e0bffc15 	stw	r2,-16(fp)
81100524:	e0bffc17 	ldw	r2,-16(fp)
81100528:	10804008 	cmpgei	r2,r2,256
8110052c:	1000021e 	bne	r2,zero,81100538 <bDdr2EepromTest+0x230>
81100530:	e0bff917 	ldw	r2,-28(fp)
81100534:	103fc81e 	bne	r2,zero,81100458 <__reset+0xfb0e0458>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
81100538:	e0bff917 	ldw	r2,-28(fp)
8110053c:	10001026 	beq	r2,zero,81100580 <bDdr2EepromTest+0x278>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
81100540:	00e04534 	movhi	r3,33044
81100544:	18d35404 	addi	r3,r3,19792
81100548:	00a04534 	movhi	r2,33044
8110054c:	10ba0504 	addi	r2,r2,-6124
81100550:	1009883a 	mov	r4,r2
81100554:	00800884 	movi	r2,34
81100558:	100d883a 	mov	r6,r2
8110055c:	200b883a 	mov	r5,r4
81100560:	1809883a 	mov	r4,r3
81100564:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
81100568:	d0a05017 	ldw	r2,-32448(gp)
8110056c:	01604534 	movhi	r5,33044
81100570:	29535404 	addi	r5,r5,19792
81100574:	1009883a 	mov	r4,r2
81100578:	11139c00 	call	811139c0 <fprintf>
8110057c:	00000f06 	br	811005bc <bDdr2EepromTest+0x2b4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
81100580:	00e04534 	movhi	r3,33044
81100584:	18d35404 	addi	r3,r3,19792
81100588:	00a04534 	movhi	r2,33044
8110058c:	10ba0e04 	addi	r2,r2,-6088
81100590:	1009883a 	mov	r4,r2
81100594:	008007c4 	movi	r2,31
81100598:	100d883a 	mov	r6,r2
8110059c:	200b883a 	mov	r5,r4
811005a0:	1809883a 	mov	r4,r3
811005a4:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
811005a8:	d0a05017 	ldw	r2,-32448(gp)
811005ac:	01604534 	movhi	r5,33044
811005b0:	29535404 	addi	r5,r5,19792
811005b4:	1009883a 	mov	r4,r2
811005b8:	11139c00 	call	811139c0 <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
811005bc:	00e04534 	movhi	r3,33044
811005c0:	18d35404 	addi	r3,r3,19792
811005c4:	00a04534 	movhi	r2,33044
811005c8:	10ba1604 	addi	r2,r2,-6056
811005cc:	1009883a 	mov	r4,r2
811005d0:	00800604 	movi	r2,24
811005d4:	100d883a 	mov	r6,r2
811005d8:	200b883a 	mov	r5,r4
811005dc:	1809883a 	mov	r4,r3
811005e0:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
811005e4:	d0a05017 	ldw	r2,-32448(gp)
811005e8:	01604534 	movhi	r5,33044
811005ec:	29535404 	addi	r5,r5,19792
811005f0:	1009883a 	mov	r4,r2
811005f4:	11139c00 	call	811139c0 <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
811005f8:	00800484 	movi	r2,18
811005fc:	e0bffd85 	stb	r2,-10(fp)
81100600:	00bfe004 	movi	r2,-128
81100604:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100608:	01138804 	movi	r4,20000
8110060c:	112acf80 	call	8112acf8 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100610:	e0bffd03 	ldbu	r2,-12(fp)
81100614:	10c03fcc 	andi	r3,r2,255
81100618:	18c0201c 	xori	r3,r3,128
8110061c:	18ffe004 	addi	r3,r3,-128
81100620:	e13ffdc3 	ldbu	r4,-9(fp)
81100624:	e0bffd83 	ldbu	r2,-10(fp)
81100628:	d8800015 	stw	r2,0(sp)
8110062c:	200f883a 	mov	r7,r4
81100630:	180d883a 	mov	r6,r3
81100634:	e17ffb17 	ldw	r5,-20(fp)
81100638:	e13ffa17 	ldw	r4,-24(fp)
8110063c:	1105a500 	call	81105a50 <I2C_Write>
81100640:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
81100644:	e0bff917 	ldw	r2,-28(fp)
81100648:	1000101e 	bne	r2,zero,8110068c <bDdr2EepromTest+0x384>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
8110064c:	00e04534 	movhi	r3,33044
81100650:	18d35404 	addi	r3,r3,19792
81100654:	00a04534 	movhi	r2,33044
81100658:	10ba1c04 	addi	r2,r2,-6032
8110065c:	1009883a 	mov	r4,r2
81100660:	00800604 	movi	r2,24
81100664:	100d883a 	mov	r6,r2
81100668:	200b883a 	mov	r5,r4
8110066c:	1809883a 	mov	r4,r3
81100670:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
81100674:	d0a05017 	ldw	r2,-32448(gp)
81100678:	01604534 	movhi	r5,33044
8110067c:	29535404 	addi	r5,r5,19792
81100680:	1009883a 	mov	r4,r2
81100684:	11139c00 	call	811139c0 <fprintf>
81100688:	00003306 	br	81100758 <bDdr2EepromTest+0x450>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110068c:	e0bffd03 	ldbu	r2,-12(fp)
81100690:	10c03fcc 	andi	r3,r2,255
81100694:	18c0201c 	xori	r3,r3,128
81100698:	18ffe004 	addi	r3,r3,-128
8110069c:	e13ffdc3 	ldbu	r4,-9(fp)
811006a0:	e0bffe44 	addi	r2,fp,-7
811006a4:	d8800015 	stw	r2,0(sp)
811006a8:	200f883a 	mov	r7,r4
811006ac:	180d883a 	mov	r6,r3
811006b0:	e17ffb17 	ldw	r5,-20(fp)
811006b4:	e13ffa17 	ldw	r4,-24(fp)
811006b8:	1105b300 	call	81105b30 <I2C_Read>
811006bc:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
811006c0:	e0bff917 	ldw	r2,-28(fp)
811006c4:	1000101e 	bne	r2,zero,81100708 <bDdr2EepromTest+0x400>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
811006c8:	00e04534 	movhi	r3,33044
811006cc:	18d35404 	addi	r3,r3,19792
811006d0:	00a04534 	movhi	r2,33044
811006d4:	10ba2204 	addi	r2,r2,-6008
811006d8:	1009883a 	mov	r4,r2
811006dc:	00800884 	movi	r2,34
811006e0:	100d883a 	mov	r6,r2
811006e4:	200b883a 	mov	r5,r4
811006e8:	1809883a 	mov	r4,r3
811006ec:	1114a700 	call	81114a70 <memcpy>
			debug(fp, cDebugBuffer);
811006f0:	d0a05017 	ldw	r2,-32448(gp)
811006f4:	01604534 	movhi	r5,33044
811006f8:	29535404 	addi	r5,r5,19792
811006fc:	1009883a 	mov	r4,r2
81100700:	11139c00 	call	811139c0 <fprintf>
81100704:	00001406 	br	81100758 <bDdr2EepromTest+0x450>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100708:	e0bffe43 	ldbu	r2,-7(fp)
8110070c:	10c03fcc 	andi	r3,r2,255
81100710:	e0bffd83 	ldbu	r2,-10(fp)
81100714:	18801026 	beq	r3,r2,81100758 <bDdr2EepromTest+0x450>
				bSuccess = FALSE;
81100718:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110071c:	e0bffe43 	ldbu	r2,-7(fp)
81100720:	10803fcc 	andi	r2,r2,255
81100724:	e0fffd83 	ldbu	r3,-10(fp)
81100728:	180f883a 	mov	r7,r3
8110072c:	100d883a 	mov	r6,r2
81100730:	01604534 	movhi	r5,33044
81100734:	297a2b04 	addi	r5,r5,-5972
81100738:	01204534 	movhi	r4,33044
8110073c:	21135404 	addi	r4,r4,19792
81100740:	11153700 	call	81115370 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
81100744:	d0a05017 	ldw	r2,-32448(gp)
81100748:	01604534 	movhi	r5,33044
8110074c:	29535404 	addi	r5,r5,19792
81100750:	1009883a 	mov	r4,r2
81100754:	11139c00 	call	811139c0 <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
81100758:	e0bff917 	ldw	r2,-28(fp)
8110075c:	10001026 	beq	r2,zero,811007a0 <bDdr2EepromTest+0x498>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
81100760:	00e04534 	movhi	r3,33044
81100764:	18d35404 	addi	r3,r3,19792
81100768:	00a04534 	movhi	r2,33044
8110076c:	10ba3a04 	addi	r2,r2,-5912
81100770:	1009883a 	mov	r4,r2
81100774:	008008c4 	movi	r2,35
81100778:	100d883a 	mov	r6,r2
8110077c:	200b883a 	mov	r5,r4
81100780:	1809883a 	mov	r4,r3
81100784:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
81100788:	d0a05017 	ldw	r2,-32448(gp)
8110078c:	01604534 	movhi	r5,33044
81100790:	29535404 	addi	r5,r5,19792
81100794:	1009883a 	mov	r4,r2
81100798:	11139c00 	call	811139c0 <fprintf>
8110079c:	00000f06 	br	811007dc <bDdr2EepromTest+0x4d4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
811007a0:	00e04534 	movhi	r3,33044
811007a4:	18d35404 	addi	r3,r3,19792
811007a8:	00a04534 	movhi	r2,33044
811007ac:	10ba4304 	addi	r2,r2,-5876
811007b0:	1009883a 	mov	r4,r2
811007b4:	00800804 	movi	r2,32
811007b8:	100d883a 	mov	r6,r2
811007bc:	200b883a 	mov	r5,r4
811007c0:	1809883a 	mov	r4,r3
811007c4:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
811007c8:	d0a05017 	ldw	r2,-32448(gp)
811007cc:	01604534 	movhi	r5,33044
811007d0:	29535404 	addi	r5,r5,19792
811007d4:	1009883a 	mov	r4,r2
811007d8:	11139c00 	call	811139c0 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811007dc:	00a04534 	movhi	r2,33044
811007e0:	10935404 	addi	r2,r2,19792
811007e4:	00c00284 	movi	r3,10
811007e8:	10c00005 	stb	r3,0(r2)
811007ec:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811007f0:	d0a05017 	ldw	r2,-32448(gp)
811007f4:	01604534 	movhi	r5,33044
811007f8:	29535404 	addi	r5,r5,19792
811007fc:	1009883a 	mov	r4,r2
81100800:	11139c00 	call	811139c0 <fprintf>
#endif

	return bSuccess;
81100804:	e0bff917 	ldw	r2,-28(fp)
}
81100808:	e037883a 	mov	sp,fp
8110080c:	dfc00117 	ldw	ra,4(sp)
81100810:	df000017 	ldw	fp,0(sp)
81100814:	dec00204 	addi	sp,sp,8
81100818:	f800283a 	ret

8110081c <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
8110081c:	deffb704 	addi	sp,sp,-292
81100820:	de00012e 	bgeu	sp,et,81100828 <bDdr2EepromDump+0xc>
81100824:	003b68fa 	trap	3
81100828:	dfc04815 	stw	ra,288(sp)
8110082c:	df004715 	stw	fp,284(sp)
81100830:	df004704 	addi	fp,sp,284
81100834:	2005883a 	mov	r2,r4
81100838:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
8110083c:	00e04534 	movhi	r3,33044
81100840:	18d35404 	addi	r3,r3,19792
81100844:	00a04534 	movhi	r2,33044
81100848:	10ba4b04 	addi	r2,r2,-5844
8110084c:	1009883a 	mov	r4,r2
81100850:	00800884 	movi	r2,34
81100854:	100d883a 	mov	r6,r2
81100858:	200b883a 	mov	r5,r4
8110085c:	1809883a 	mov	r4,r3
81100860:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
81100864:	d0a05017 	ldw	r2,-32448(gp)
81100868:	01604534 	movhi	r5,33044
8110086c:	29535404 	addi	r5,r5,19792
81100870:	1009883a 	mov	r4,r2
81100874:	11139c00 	call	811139c0 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100878:	00bfe804 	movi	r2,-96
8110087c:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
81100880:	00800044 	movi	r2,1
81100884:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
81100888:	e0bfff03 	ldbu	r2,-4(fp)
8110088c:	10c00060 	cmpeqi	r3,r2,1
81100890:	1800031e 	bne	r3,zero,811008a0 <bDdr2EepromDump+0x84>
81100894:	108000a0 	cmpeqi	r2,r2,2
81100898:	1000081e 	bne	r2,zero,811008bc <bDdr2EepromDump+0xa0>
8110089c:	00000e06 	br	811008d8 <bDdr2EepromDump+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811008a0:	00a00034 	movhi	r2,32768
811008a4:	10827c04 	addi	r2,r2,2544
811008a8:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811008ac:	00a00034 	movhi	r2,32768
811008b0:	10828004 	addi	r2,r2,2560
811008b4:	e0bfbb15 	stw	r2,-276(fp)
		break;
811008b8:	00001906 	br	81100920 <bDdr2EepromDump+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811008bc:	00a00034 	movhi	r2,32768
811008c0:	10825804 	addi	r2,r2,2400
811008c4:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
811008c8:	00a00034 	movhi	r2,32768
811008cc:	10825c04 	addi	r2,r2,2416
811008d0:	e0bfbb15 	stw	r2,-276(fp)
		break;
811008d4:	00001206 	br	81100920 <bDdr2EepromDump+0x104>
	default:
		bSuccess = FALSE;
811008d8:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811008dc:	00e04534 	movhi	r3,33044
811008e0:	18d35404 	addi	r3,r3,19792
811008e4:	00a04534 	movhi	r2,33044
811008e8:	10ba5404 	addi	r2,r2,-5808
811008ec:	1009883a 	mov	r4,r2
811008f0:	00800bc4 	movi	r2,47
811008f4:	100d883a 	mov	r6,r2
811008f8:	200b883a 	mov	r5,r4
811008fc:	1809883a 	mov	r4,r3
81100900:	1114a700 	call	81114a70 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100904:	d0a05017 	ldw	r2,-32448(gp)
81100908:	01604534 	movhi	r5,33044
8110090c:	29535404 	addi	r5,r5,19792
81100910:	1009883a 	mov	r4,r2
81100914:	11139c00 	call	811139c0 <fprintf>
		;
#endif
		return bSuccess;
81100918:	e0bfbe17 	ldw	r2,-264(fp)
8110091c:	0002e706 	br	811014bc <bDdr2EepromDump+0xca0>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100920:	e0bfbd03 	ldbu	r2,-268(fp)
81100924:	10c03fcc 	andi	r3,r2,255
81100928:	18c0201c 	xori	r3,r3,128
8110092c:	18ffe004 	addi	r3,r3,-128
81100930:	e13fbf04 	addi	r4,fp,-260
81100934:	00804004 	movi	r2,256
81100938:	d8800015 	stw	r2,0(sp)
8110093c:	200f883a 	mov	r7,r4
81100940:	180d883a 	mov	r6,r3
81100944:	e17fbb17 	ldw	r5,-276(fp)
81100948:	e13fba17 	ldw	r4,-280(fp)
8110094c:	1105c380 	call	81105c38 <I2C_MultipleRead>
81100950:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
81100954:	e0bfbe17 	ldw	r2,-264(fp)
81100958:	1002be26 	beq	r2,zero,81101454 <bDdr2EepromDump+0xc38>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
8110095c:	e03fbc15 	stw	zero,-272(fp)
81100960:	0002b606 	br	8110143c <bDdr2EepromDump+0xc20>
			if (iI == 0) {
81100964:	e0bfbc17 	ldw	r2,-272(fp)
81100968:	1000121e 	bne	r2,zero,811009b4 <bDdr2EepromDump+0x198>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
8110096c:	e0ffbf04 	addi	r3,fp,-260
81100970:	e0bfbc17 	ldw	r2,-272(fp)
81100974:	1885883a 	add	r2,r3,r2
81100978:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110097c:	10803fcc 	andi	r2,r2,255
81100980:	100f883a 	mov	r7,r2
81100984:	e1bfbc17 	ldw	r6,-272(fp)
81100988:	01604534 	movhi	r5,33044
8110098c:	297a6004 	addi	r5,r5,-5760
81100990:	01204534 	movhi	r4,33044
81100994:	21135404 	addi	r4,r4,19792
81100998:	11153700 	call	81115370 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
8110099c:	d0a05017 	ldw	r2,-32448(gp)
811009a0:	01604534 	movhi	r5,33044
811009a4:	29535404 	addi	r5,r5,19792
811009a8:	1009883a 	mov	r4,r2
811009ac:	11139c00 	call	811139c0 <fprintf>
811009b0:	00029f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 1) {
811009b4:	e0bfbc17 	ldw	r2,-272(fp)
811009b8:	10800058 	cmpnei	r2,r2,1
811009bc:	1000101e 	bne	r2,zero,81100a00 <bDdr2EepromDump+0x1e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009c0:	00e04534 	movhi	r3,33044
811009c4:	18d35404 	addi	r3,r3,19792
811009c8:	00a04534 	movhi	r2,33044
811009cc:	10ba6c04 	addi	r2,r2,-5712
811009d0:	1009883a 	mov	r4,r2
811009d4:	00800c04 	movi	r2,48
811009d8:	100d883a 	mov	r6,r2
811009dc:	200b883a 	mov	r5,r4
811009e0:	1809883a 	mov	r4,r3
811009e4:	1114a700 	call	81114a70 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
811009e8:	d0a05017 	ldw	r2,-32448(gp)
811009ec:	01604534 	movhi	r5,33044
811009f0:	29535404 	addi	r5,r5,19792
811009f4:	1009883a 	mov	r4,r2
811009f8:	11139c00 	call	811139c0 <fprintf>
811009fc:	00028c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 2) {
81100a00:	e0bfbc17 	ldw	r2,-272(fp)
81100a04:	10800098 	cmpnei	r2,r2,2
81100a08:	1000101e 	bne	r2,zero,81100a4c <bDdr2EepromDump+0x230>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
81100a0c:	00e04534 	movhi	r3,33044
81100a10:	18d35404 	addi	r3,r3,19792
81100a14:	00a04534 	movhi	r2,33044
81100a18:	10ba7804 	addi	r2,r2,-5664
81100a1c:	1009883a 	mov	r4,r2
81100a20:	008007c4 	movi	r2,31
81100a24:	100d883a 	mov	r6,r2
81100a28:	200b883a 	mov	r5,r4
81100a2c:	1809883a 	mov	r4,r3
81100a30:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81100a34:	d0a05017 	ldw	r2,-32448(gp)
81100a38:	01604534 	movhi	r5,33044
81100a3c:	29535404 	addi	r5,r5,19792
81100a40:	1009883a 	mov	r4,r2
81100a44:	11139c00 	call	811139c0 <fprintf>
81100a48:	00027906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 3) {
81100a4c:	e0bfbc17 	ldw	r2,-272(fp)
81100a50:	108000d8 	cmpnei	r2,r2,3
81100a54:	1000101e 	bne	r2,zero,81100a98 <bDdr2EepromDump+0x27c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a58:	00e04534 	movhi	r3,33044
81100a5c:	18d35404 	addi	r3,r3,19792
81100a60:	00a04534 	movhi	r2,33044
81100a64:	10ba8004 	addi	r2,r2,-5632
81100a68:	1009883a 	mov	r4,r2
81100a6c:	008009c4 	movi	r2,39
81100a70:	100d883a 	mov	r6,r2
81100a74:	200b883a 	mov	r5,r4
81100a78:	1809883a 	mov	r4,r3
81100a7c:	1114a700 	call	81114a70 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a80:	d0a05017 	ldw	r2,-32448(gp)
81100a84:	01604534 	movhi	r5,33044
81100a88:	29535404 	addi	r5,r5,19792
81100a8c:	1009883a 	mov	r4,r2
81100a90:	11139c00 	call	811139c0 <fprintf>
81100a94:	00026606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 4) {
81100a98:	e0bfbc17 	ldw	r2,-272(fp)
81100a9c:	10800118 	cmpnei	r2,r2,4
81100aa0:	1000101e 	bne	r2,zero,81100ae4 <bDdr2EepromDump+0x2c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100aa4:	00e04534 	movhi	r3,33044
81100aa8:	18d35404 	addi	r3,r3,19792
81100aac:	00a04534 	movhi	r2,33044
81100ab0:	10ba8a04 	addi	r2,r2,-5592
81100ab4:	1009883a 	mov	r4,r2
81100ab8:	00800a84 	movi	r2,42
81100abc:	100d883a 	mov	r6,r2
81100ac0:	200b883a 	mov	r5,r4
81100ac4:	1809883a 	mov	r4,r3
81100ac8:	1114a700 	call	81114a70 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100acc:	d0a05017 	ldw	r2,-32448(gp)
81100ad0:	01604534 	movhi	r5,33044
81100ad4:	29535404 	addi	r5,r5,19792
81100ad8:	1009883a 	mov	r4,r2
81100adc:	11139c00 	call	811139c0 <fprintf>
81100ae0:	00025306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 5) {
81100ae4:	e0bfbc17 	ldw	r2,-272(fp)
81100ae8:	10800158 	cmpnei	r2,r2,5
81100aec:	1000101e 	bne	r2,zero,81100b30 <bDdr2EepromDump+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100af0:	00e04534 	movhi	r3,33044
81100af4:	18d35404 	addi	r3,r3,19792
81100af8:	00a04534 	movhi	r2,33044
81100afc:	10ba9504 	addi	r2,r2,-5548
81100b00:	1009883a 	mov	r4,r2
81100b04:	00800c04 	movi	r2,48
81100b08:	100d883a 	mov	r6,r2
81100b0c:	200b883a 	mov	r5,r4
81100b10:	1809883a 	mov	r4,r3
81100b14:	1114a700 	call	81114a70 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100b18:	d0a05017 	ldw	r2,-32448(gp)
81100b1c:	01604534 	movhi	r5,33044
81100b20:	29535404 	addi	r5,r5,19792
81100b24:	1009883a 	mov	r4,r2
81100b28:	11139c00 	call	811139c0 <fprintf>
81100b2c:	00024006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 6) {
81100b30:	e0bfbc17 	ldw	r2,-272(fp)
81100b34:	10800198 	cmpnei	r2,r2,6
81100b38:	1000101e 	bne	r2,zero,81100b7c <bDdr2EepromDump+0x360>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100b3c:	00e04534 	movhi	r3,33044
81100b40:	18d35404 	addi	r3,r3,19792
81100b44:	00a04534 	movhi	r2,33044
81100b48:	10baa104 	addi	r2,r2,-5500
81100b4c:	1009883a 	mov	r4,r2
81100b50:	00800544 	movi	r2,21
81100b54:	100d883a 	mov	r6,r2
81100b58:	200b883a 	mov	r5,r4
81100b5c:	1809883a 	mov	r4,r3
81100b60:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81100b64:	d0a05017 	ldw	r2,-32448(gp)
81100b68:	01604534 	movhi	r5,33044
81100b6c:	29535404 	addi	r5,r5,19792
81100b70:	1009883a 	mov	r4,r2
81100b74:	11139c00 	call	811139c0 <fprintf>
81100b78:	00022d06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 7) {
81100b7c:	e0bfbc17 	ldw	r2,-272(fp)
81100b80:	108001d8 	cmpnei	r2,r2,7
81100b84:	1000101e 	bne	r2,zero,81100bc8 <bDdr2EepromDump+0x3ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100b88:	00e04534 	movhi	r3,33044
81100b8c:	18d35404 	addi	r3,r3,19792
81100b90:	00a04534 	movhi	r2,33044
81100b94:	10baa704 	addi	r2,r2,-5476
81100b98:	1009883a 	mov	r4,r2
81100b9c:	00800804 	movi	r2,32
81100ba0:	100d883a 	mov	r6,r2
81100ba4:	200b883a 	mov	r5,r4
81100ba8:	1809883a 	mov	r4,r3
81100bac:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81100bb0:	d0a05017 	ldw	r2,-32448(gp)
81100bb4:	01604534 	movhi	r5,33044
81100bb8:	29535404 	addi	r5,r5,19792
81100bbc:	1009883a 	mov	r4,r2
81100bc0:	11139c00 	call	811139c0 <fprintf>
81100bc4:	00021a06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 16) {
81100bc8:	e0bfbc17 	ldw	r2,-272(fp)
81100bcc:	10800418 	cmpnei	r2,r2,16
81100bd0:	1000101e 	bne	r2,zero,81100c14 <bDdr2EepromDump+0x3f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100bd4:	00e04534 	movhi	r3,33044
81100bd8:	18d35404 	addi	r3,r3,19792
81100bdc:	00a04534 	movhi	r2,33044
81100be0:	10baaf04 	addi	r2,r2,-5444
81100be4:	1009883a 	mov	r4,r2
81100be8:	00800d04 	movi	r2,52
81100bec:	100d883a 	mov	r6,r2
81100bf0:	200b883a 	mov	r5,r4
81100bf4:	1809883a 	mov	r4,r3
81100bf8:	1114a700 	call	81114a70 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100bfc:	d0a05017 	ldw	r2,-32448(gp)
81100c00:	01604534 	movhi	r5,33044
81100c04:	29535404 	addi	r5,r5,19792
81100c08:	1009883a 	mov	r4,r2
81100c0c:	11139c00 	call	811139c0 <fprintf>
81100c10:	00020706 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 13) {
81100c14:	e0bfbc17 	ldw	r2,-272(fp)
81100c18:	10800358 	cmpnei	r2,r2,13
81100c1c:	1000101e 	bne	r2,zero,81100c60 <bDdr2EepromDump+0x444>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100c20:	00e04534 	movhi	r3,33044
81100c24:	18d35404 	addi	r3,r3,19792
81100c28:	00a04534 	movhi	r2,33044
81100c2c:	10babc04 	addi	r2,r2,-5392
81100c30:	1009883a 	mov	r4,r2
81100c34:	008005c4 	movi	r2,23
81100c38:	100d883a 	mov	r6,r2
81100c3c:	200b883a 	mov	r5,r4
81100c40:	1809883a 	mov	r4,r3
81100c44:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81100c48:	d0a05017 	ldw	r2,-32448(gp)
81100c4c:	01604534 	movhi	r5,33044
81100c50:	29535404 	addi	r5,r5,19792
81100c54:	1009883a 	mov	r4,r2
81100c58:	11139c00 	call	811139c0 <fprintf>
81100c5c:	0001f406 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 14) {
81100c60:	e0bfbc17 	ldw	r2,-272(fp)
81100c64:	10800398 	cmpnei	r2,r2,14
81100c68:	1000101e 	bne	r2,zero,81100cac <bDdr2EepromDump+0x490>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100c6c:	00e04534 	movhi	r3,33044
81100c70:	18d35404 	addi	r3,r3,19792
81100c74:	00a04534 	movhi	r2,33044
81100c78:	10bac204 	addi	r2,r2,-5368
81100c7c:	1009883a 	mov	r4,r2
81100c80:	008004c4 	movi	r2,19
81100c84:	100d883a 	mov	r6,r2
81100c88:	200b883a 	mov	r5,r4
81100c8c:	1809883a 	mov	r4,r3
81100c90:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81100c94:	d0a05017 	ldw	r2,-32448(gp)
81100c98:	01604534 	movhi	r5,33044
81100c9c:	29535404 	addi	r5,r5,19792
81100ca0:	1009883a 	mov	r4,r2
81100ca4:	11139c00 	call	811139c0 <fprintf>
81100ca8:	0001e106 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 17) {
81100cac:	e0bfbc17 	ldw	r2,-272(fp)
81100cb0:	10800458 	cmpnei	r2,r2,17
81100cb4:	1000101e 	bne	r2,zero,81100cf8 <bDdr2EepromDump+0x4dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100cb8:	00e04534 	movhi	r3,33044
81100cbc:	18d35404 	addi	r3,r3,19792
81100cc0:	00a04534 	movhi	r2,33044
81100cc4:	10bac704 	addi	r2,r2,-5348
81100cc8:	1009883a 	mov	r4,r2
81100ccc:	00800684 	movi	r2,26
81100cd0:	100d883a 	mov	r6,r2
81100cd4:	200b883a 	mov	r5,r4
81100cd8:	1809883a 	mov	r4,r3
81100cdc:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81100ce0:	d0a05017 	ldw	r2,-32448(gp)
81100ce4:	01604534 	movhi	r5,33044
81100ce8:	29535404 	addi	r5,r5,19792
81100cec:	1009883a 	mov	r4,r2
81100cf0:	11139c00 	call	811139c0 <fprintf>
81100cf4:	0001ce06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 18) {
81100cf8:	e0bfbc17 	ldw	r2,-272(fp)
81100cfc:	10800498 	cmpnei	r2,r2,18
81100d00:	1000101e 	bne	r2,zero,81100d44 <bDdr2EepromDump+0x528>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d04:	00e04534 	movhi	r3,33044
81100d08:	18d35404 	addi	r3,r3,19792
81100d0c:	00a04534 	movhi	r2,33044
81100d10:	10bace04 	addi	r2,r2,-5320
81100d14:	1009883a 	mov	r4,r2
81100d18:	00800d44 	movi	r2,53
81100d1c:	100d883a 	mov	r6,r2
81100d20:	200b883a 	mov	r5,r4
81100d24:	1809883a 	mov	r4,r3
81100d28:	1114a700 	call	81114a70 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100d2c:	d0a05017 	ldw	r2,-32448(gp)
81100d30:	01604534 	movhi	r5,33044
81100d34:	29535404 	addi	r5,r5,19792
81100d38:	1009883a 	mov	r4,r2
81100d3c:	11139c00 	call	811139c0 <fprintf>
81100d40:	0001bb06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 20) {
81100d44:	e0bfbc17 	ldw	r2,-272(fp)
81100d48:	10800518 	cmpnei	r2,r2,20
81100d4c:	1000101e 	bne	r2,zero,81100d90 <bDdr2EepromDump+0x574>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d50:	00e04534 	movhi	r3,33044
81100d54:	18d35404 	addi	r3,r3,19792
81100d58:	00a04534 	movhi	r2,33044
81100d5c:	10badc04 	addi	r2,r2,-5264
81100d60:	1009883a 	mov	r4,r2
81100d64:	00801204 	movi	r2,72
81100d68:	100d883a 	mov	r6,r2
81100d6c:	200b883a 	mov	r5,r4
81100d70:	1809883a 	mov	r4,r3
81100d74:	1114a700 	call	81114a70 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100d78:	d0a05017 	ldw	r2,-32448(gp)
81100d7c:	01604534 	movhi	r5,33044
81100d80:	29535404 	addi	r5,r5,19792
81100d84:	1009883a 	mov	r4,r2
81100d88:	11139c00 	call	811139c0 <fprintf>
81100d8c:	0001a806 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 22) {
81100d90:	e0bfbc17 	ldw	r2,-272(fp)
81100d94:	10800598 	cmpnei	r2,r2,22
81100d98:	1000101e 	bne	r2,zero,81100ddc <bDdr2EepromDump+0x5c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d9c:	00e04534 	movhi	r3,33044
81100da0:	18d35404 	addi	r3,r3,19792
81100da4:	00a04534 	movhi	r2,33044
81100da8:	10baee04 	addi	r2,r2,-5192
81100dac:	1009883a 	mov	r4,r2
81100db0:	00800784 	movi	r2,30
81100db4:	100d883a 	mov	r6,r2
81100db8:	200b883a 	mov	r5,r4
81100dbc:	1809883a 	mov	r4,r3
81100dc0:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81100dc4:	d0a05017 	ldw	r2,-32448(gp)
81100dc8:	01604534 	movhi	r5,33044
81100dcc:	29535404 	addi	r5,r5,19792
81100dd0:	1009883a 	mov	r4,r2
81100dd4:	11139c00 	call	811139c0 <fprintf>
81100dd8:	00019506 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 27) {
81100ddc:	e0bfbc17 	ldw	r2,-272(fp)
81100de0:	108006d8 	cmpnei	r2,r2,27
81100de4:	1000101e 	bne	r2,zero,81100e28 <bDdr2EepromDump+0x60c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100de8:	00e04534 	movhi	r3,33044
81100dec:	18d35404 	addi	r3,r3,19792
81100df0:	00a04534 	movhi	r2,33044
81100df4:	10baf604 	addi	r2,r2,-5160
81100df8:	1009883a 	mov	r4,r2
81100dfc:	00800a04 	movi	r2,40
81100e00:	100d883a 	mov	r6,r2
81100e04:	200b883a 	mov	r5,r4
81100e08:	1809883a 	mov	r4,r3
81100e0c:	1114a700 	call	81114a70 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e10:	d0a05017 	ldw	r2,-32448(gp)
81100e14:	01604534 	movhi	r5,33044
81100e18:	29535404 	addi	r5,r5,19792
81100e1c:	1009883a 	mov	r4,r2
81100e20:	11139c00 	call	811139c0 <fprintf>
81100e24:	00018206 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 28) {
81100e28:	e0bfbc17 	ldw	r2,-272(fp)
81100e2c:	10800718 	cmpnei	r2,r2,28
81100e30:	1000101e 	bne	r2,zero,81100e74 <bDdr2EepromDump+0x658>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e34:	00e04534 	movhi	r3,33044
81100e38:	18d35404 	addi	r3,r3,19792
81100e3c:	00a04534 	movhi	r2,33044
81100e40:	10bb0004 	addi	r2,r2,-5120
81100e44:	1009883a 	mov	r4,r2
81100e48:	00800cc4 	movi	r2,51
81100e4c:	100d883a 	mov	r6,r2
81100e50:	200b883a 	mov	r5,r4
81100e54:	1809883a 	mov	r4,r3
81100e58:	1114a700 	call	81114a70 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e5c:	d0a05017 	ldw	r2,-32448(gp)
81100e60:	01604534 	movhi	r5,33044
81100e64:	29535404 	addi	r5,r5,19792
81100e68:	1009883a 	mov	r4,r2
81100e6c:	11139c00 	call	811139c0 <fprintf>
81100e70:	00016f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 29) {
81100e74:	e0bfbc17 	ldw	r2,-272(fp)
81100e78:	10800758 	cmpnei	r2,r2,29
81100e7c:	1000101e 	bne	r2,zero,81100ec0 <bDdr2EepromDump+0x6a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e80:	00e04534 	movhi	r3,33044
81100e84:	18d35404 	addi	r3,r3,19792
81100e88:	00a04534 	movhi	r2,33044
81100e8c:	10bb0d04 	addi	r2,r2,-5068
81100e90:	1009883a 	mov	r4,r2
81100e94:	008009c4 	movi	r2,39
81100e98:	100d883a 	mov	r6,r2
81100e9c:	200b883a 	mov	r5,r4
81100ea0:	1809883a 	mov	r4,r3
81100ea4:	1114a700 	call	81114a70 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100ea8:	d0a05017 	ldw	r2,-32448(gp)
81100eac:	01604534 	movhi	r5,33044
81100eb0:	29535404 	addi	r5,r5,19792
81100eb4:	1009883a 	mov	r4,r2
81100eb8:	11139c00 	call	811139c0 <fprintf>
81100ebc:	00015c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 30) {
81100ec0:	e0bfbc17 	ldw	r2,-272(fp)
81100ec4:	10800798 	cmpnei	r2,r2,30
81100ec8:	1000101e 	bne	r2,zero,81100f0c <bDdr2EepromDump+0x6f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ecc:	00e04534 	movhi	r3,33044
81100ed0:	18d35404 	addi	r3,r3,19792
81100ed4:	00a04534 	movhi	r2,33044
81100ed8:	10bb1704 	addi	r2,r2,-5028
81100edc:	1009883a 	mov	r4,r2
81100ee0:	00800b04 	movi	r2,44
81100ee4:	100d883a 	mov	r6,r2
81100ee8:	200b883a 	mov	r5,r4
81100eec:	1809883a 	mov	r4,r3
81100ef0:	1114a700 	call	81114a70 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100ef4:	d0a05017 	ldw	r2,-32448(gp)
81100ef8:	01604534 	movhi	r5,33044
81100efc:	29535404 	addi	r5,r5,19792
81100f00:	1009883a 	mov	r4,r2
81100f04:	11139c00 	call	811139c0 <fprintf>
81100f08:	00014906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 31) {
81100f0c:	e0bfbc17 	ldw	r2,-272(fp)
81100f10:	108007d8 	cmpnei	r2,r2,31
81100f14:	1000101e 	bne	r2,zero,81100f58 <bDdr2EepromDump+0x73c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f18:	00e04534 	movhi	r3,33044
81100f1c:	18d35404 	addi	r3,r3,19792
81100f20:	00a04534 	movhi	r2,33044
81100f24:	10bb2204 	addi	r2,r2,-4984
81100f28:	1009883a 	mov	r4,r2
81100f2c:	008010c4 	movi	r2,67
81100f30:	100d883a 	mov	r6,r2
81100f34:	200b883a 	mov	r5,r4
81100f38:	1809883a 	mov	r4,r3
81100f3c:	1114a700 	call	81114a70 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100f40:	d0a05017 	ldw	r2,-32448(gp)
81100f44:	01604534 	movhi	r5,33044
81100f48:	29535404 	addi	r5,r5,19792
81100f4c:	1009883a 	mov	r4,r2
81100f50:	11139c00 	call	811139c0 <fprintf>
81100f54:	00013606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 36) {
81100f58:	e0bfbc17 	ldw	r2,-272(fp)
81100f5c:	10800918 	cmpnei	r2,r2,36
81100f60:	1000101e 	bne	r2,zero,81100fa4 <bDdr2EepromDump+0x788>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f64:	00e04534 	movhi	r3,33044
81100f68:	18d35404 	addi	r3,r3,19792
81100f6c:	00a04534 	movhi	r2,33044
81100f70:	10bb3304 	addi	r2,r2,-4916
81100f74:	1009883a 	mov	r4,r2
81100f78:	00800a84 	movi	r2,42
81100f7c:	100d883a 	mov	r6,r2
81100f80:	200b883a 	mov	r5,r4
81100f84:	1809883a 	mov	r4,r3
81100f88:	1114a700 	call	81114a70 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f8c:	d0a05017 	ldw	r2,-32448(gp)
81100f90:	01604534 	movhi	r5,33044
81100f94:	29535404 	addi	r5,r5,19792
81100f98:	1009883a 	mov	r4,r2
81100f9c:	11139c00 	call	811139c0 <fprintf>
81100fa0:	00012306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 37) {
81100fa4:	e0bfbc17 	ldw	r2,-272(fp)
81100fa8:	10800958 	cmpnei	r2,r2,37
81100fac:	1000101e 	bne	r2,zero,81100ff0 <bDdr2EepromDump+0x7d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fb0:	00e04534 	movhi	r3,33044
81100fb4:	18d35404 	addi	r3,r3,19792
81100fb8:	00a04534 	movhi	r2,33044
81100fbc:	10bb3e04 	addi	r2,r2,-4872
81100fc0:	1009883a 	mov	r4,r2
81100fc4:	00800cc4 	movi	r2,51
81100fc8:	100d883a 	mov	r6,r2
81100fcc:	200b883a 	mov	r5,r4
81100fd0:	1809883a 	mov	r4,r3
81100fd4:	1114a700 	call	81114a70 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100fd8:	d0a05017 	ldw	r2,-32448(gp)
81100fdc:	01604534 	movhi	r5,33044
81100fe0:	29535404 	addi	r5,r5,19792
81100fe4:	1009883a 	mov	r4,r2
81100fe8:	11139c00 	call	811139c0 <fprintf>
81100fec:	00011006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 38) {
81100ff0:	e0bfbc17 	ldw	r2,-272(fp)
81100ff4:	10800998 	cmpnei	r2,r2,38
81100ff8:	1000101e 	bne	r2,zero,8110103c <bDdr2EepromDump+0x820>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ffc:	00e04534 	movhi	r3,33044
81101000:	18d35404 	addi	r3,r3,19792
81101004:	00a04534 	movhi	r2,33044
81101008:	10bb4b04 	addi	r2,r2,-4820
8110100c:	1009883a 	mov	r4,r2
81101010:	00800dc4 	movi	r2,55
81101014:	100d883a 	mov	r6,r2
81101018:	200b883a 	mov	r5,r4
8110101c:	1809883a 	mov	r4,r3
81101020:	1114a700 	call	81114a70 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81101024:	d0a05017 	ldw	r2,-32448(gp)
81101028:	01604534 	movhi	r5,33044
8110102c:	29535404 	addi	r5,r5,19792
81101030:	1009883a 	mov	r4,r2
81101034:	11139c00 	call	811139c0 <fprintf>
81101038:	0000fd06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 41) {
8110103c:	e0bfbc17 	ldw	r2,-272(fp)
81101040:	10800a58 	cmpnei	r2,r2,41
81101044:	1000101e 	bne	r2,zero,81101088 <bDdr2EepromDump+0x86c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101048:	00e04534 	movhi	r3,33044
8110104c:	18d35404 	addi	r3,r3,19792
81101050:	00a04534 	movhi	r2,33044
81101054:	10bb5904 	addi	r2,r2,-4764
81101058:	1009883a 	mov	r4,r2
8110105c:	00800c84 	movi	r2,50
81101060:	100d883a 	mov	r6,r2
81101064:	200b883a 	mov	r5,r4
81101068:	1809883a 	mov	r4,r3
8110106c:	1114a700 	call	81114a70 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81101070:	d0a05017 	ldw	r2,-32448(gp)
81101074:	01604534 	movhi	r5,33044
81101078:	29535404 	addi	r5,r5,19792
8110107c:	1009883a 	mov	r4,r2
81101080:	11139c00 	call	811139c0 <fprintf>
81101084:	0000ea06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 42) {
81101088:	e0bfbc17 	ldw	r2,-272(fp)
8110108c:	10800a98 	cmpnei	r2,r2,42
81101090:	1000101e 	bne	r2,zero,811010d4 <bDdr2EepromDump+0x8b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101094:	00e04534 	movhi	r3,33044
81101098:	18d35404 	addi	r3,r3,19792
8110109c:	00a04534 	movhi	r2,33044
811010a0:	10bb6604 	addi	r2,r2,-4712
811010a4:	1009883a 	mov	r4,r2
811010a8:	00800cc4 	movi	r2,51
811010ac:	100d883a 	mov	r6,r2
811010b0:	200b883a 	mov	r5,r4
811010b4:	1809883a 	mov	r4,r3
811010b8:	1114a700 	call	81114a70 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
811010bc:	d0a05017 	ldw	r2,-32448(gp)
811010c0:	01604534 	movhi	r5,33044
811010c4:	29535404 	addi	r5,r5,19792
811010c8:	1009883a 	mov	r4,r2
811010cc:	11139c00 	call	811139c0 <fprintf>
811010d0:	0000d706 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 62) {
811010d4:	e0bfbc17 	ldw	r2,-272(fp)
811010d8:	10800f98 	cmpnei	r2,r2,62
811010dc:	1000101e 	bne	r2,zero,81101120 <bDdr2EepromDump+0x904>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
811010e0:	00e04534 	movhi	r3,33044
811010e4:	18d35404 	addi	r3,r3,19792
811010e8:	00a04534 	movhi	r2,33044
811010ec:	10bb7304 	addi	r2,r2,-4660
811010f0:	1009883a 	mov	r4,r2
811010f4:	00800404 	movi	r2,16
811010f8:	100d883a 	mov	r6,r2
811010fc:	200b883a 	mov	r5,r4
81101100:	1809883a 	mov	r4,r3
81101104:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81101108:	d0a05017 	ldw	r2,-32448(gp)
8110110c:	01604534 	movhi	r5,33044
81101110:	29535404 	addi	r5,r5,19792
81101114:	1009883a 	mov	r4,r2
81101118:	11139c00 	call	811139c0 <fprintf>
8110111c:	0000c406 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 63) {
81101120:	e0bfbc17 	ldw	r2,-272(fp)
81101124:	10800fd8 	cmpnei	r2,r2,63
81101128:	10001f1e 	bne	r2,zero,811011a8 <bDdr2EepromDump+0x98c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
8110112c:	00a04534 	movhi	r2,33044
81101130:	10935404 	addi	r2,r2,19792
81101134:	00c00a04 	movi	r3,40
81101138:	10c00005 	stb	r3,0(r2)
8110113c:	00c010c4 	movi	r3,67
81101140:	10c00045 	stb	r3,1(r2)
81101144:	00c01a04 	movi	r3,104
81101148:	10c00085 	stb	r3,2(r2)
8110114c:	00c01944 	movi	r3,101
81101150:	10c000c5 	stb	r3,3(r2)
81101154:	00c018c4 	movi	r3,99
81101158:	10c00105 	stb	r3,4(r2)
8110115c:	00c01ac4 	movi	r3,107
81101160:	10c00145 	stb	r3,5(r2)
81101164:	00c01cc4 	movi	r3,115
81101168:	10c00185 	stb	r3,6(r2)
8110116c:	00c01d44 	movi	r3,117
81101170:	10c001c5 	stb	r3,7(r2)
81101174:	00c01b44 	movi	r3,109
81101178:	10c00205 	stb	r3,8(r2)
8110117c:	00c00a44 	movi	r3,41
81101180:	10c00245 	stb	r3,9(r2)
81101184:	00c00284 	movi	r3,10
81101188:	10c00285 	stb	r3,10(r2)
8110118c:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
81101190:	d0a05017 	ldw	r2,-32448(gp)
81101194:	01604534 	movhi	r5,33044
81101198:	29535404 	addi	r5,r5,19792
8110119c:	1009883a 	mov	r4,r2
811011a0:	11139c00 	call	811139c0 <fprintf>
811011a4:	0000a206 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 64) {
811011a8:	e0bfbc17 	ldw	r2,-272(fp)
811011ac:	10801018 	cmpnei	r2,r2,64
811011b0:	1000101e 	bne	r2,zero,811011f4 <bDdr2EepromDump+0x9d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
811011b4:	00e04534 	movhi	r3,33044
811011b8:	18d35404 	addi	r3,r3,19792
811011bc:	00a04534 	movhi	r2,33044
811011c0:	10bb7704 	addi	r2,r2,-4644
811011c4:	1009883a 	mov	r4,r2
811011c8:	00800804 	movi	r2,32
811011cc:	100d883a 	mov	r6,r2
811011d0:	200b883a 	mov	r5,r4
811011d4:	1809883a 	mov	r4,r3
811011d8:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
811011dc:	d0a05017 	ldw	r2,-32448(gp)
811011e0:	01604534 	movhi	r5,33044
811011e4:	29535404 	addi	r5,r5,19792
811011e8:	1009883a 	mov	r4,r2
811011ec:	11139c00 	call	811139c0 <fprintf>
811011f0:	00008f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 72) {
811011f4:	e0bfbc17 	ldw	r2,-272(fp)
811011f8:	10801218 	cmpnei	r2,r2,72
811011fc:	1000101e 	bne	r2,zero,81101240 <bDdr2EepromDump+0xa24>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101200:	00e04534 	movhi	r3,33044
81101204:	18d35404 	addi	r3,r3,19792
81101208:	00a04534 	movhi	r2,33044
8110120c:	10bb7f04 	addi	r2,r2,-4612
81101210:	1009883a 	mov	r4,r2
81101214:	00800dc4 	movi	r2,55
81101218:	100d883a 	mov	r6,r2
8110121c:	200b883a 	mov	r5,r4
81101220:	1809883a 	mov	r4,r3
81101224:	1114a700 	call	81114a70 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
81101228:	d0a05017 	ldw	r2,-32448(gp)
8110122c:	01604534 	movhi	r5,33044
81101230:	29535404 	addi	r5,r5,19792
81101234:	1009883a 	mov	r4,r2
81101238:	11139c00 	call	811139c0 <fprintf>
8110123c:	00007c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 73) {
81101240:	e0bfbc17 	ldw	r2,-272(fp)
81101244:	10801258 	cmpnei	r2,r2,73
81101248:	1000101e 	bne	r2,zero,8110128c <bDdr2EepromDump+0xa70>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
8110124c:	00e04534 	movhi	r3,33044
81101250:	18d35404 	addi	r3,r3,19792
81101254:	00a04534 	movhi	r2,33044
81101258:	10bb8d04 	addi	r2,r2,-4556
8110125c:	1009883a 	mov	r4,r2
81101260:	00800784 	movi	r2,30
81101264:	100d883a 	mov	r6,r2
81101268:	200b883a 	mov	r5,r4
8110126c:	1809883a 	mov	r4,r3
81101270:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81101274:	d0a05017 	ldw	r2,-32448(gp)
81101278:	01604534 	movhi	r5,33044
8110127c:	29535404 	addi	r5,r5,19792
81101280:	1009883a 	mov	r4,r2
81101284:	11139c00 	call	811139c0 <fprintf>
81101288:	00006906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 91) {
8110128c:	e0bfbc17 	ldw	r2,-272(fp)
81101290:	108016d8 	cmpnei	r2,r2,91
81101294:	1000101e 	bne	r2,zero,811012d8 <bDdr2EepromDump+0xabc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
81101298:	00e04534 	movhi	r3,33044
8110129c:	18d35404 	addi	r3,r3,19792
811012a0:	00a04534 	movhi	r2,33044
811012a4:	10bb9504 	addi	r2,r2,-4524
811012a8:	1009883a 	mov	r4,r2
811012ac:	00800804 	movi	r2,32
811012b0:	100d883a 	mov	r6,r2
811012b4:	200b883a 	mov	r5,r4
811012b8:	1809883a 	mov	r4,r3
811012bc:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
811012c0:	d0a05017 	ldw	r2,-32448(gp)
811012c4:	01604534 	movhi	r5,33044
811012c8:	29535404 	addi	r5,r5,19792
811012cc:	1009883a 	mov	r4,r2
811012d0:	11139c00 	call	811139c0 <fprintf>
811012d4:	00005606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 93) {
811012d8:	e0bfbc17 	ldw	r2,-272(fp)
811012dc:	10801758 	cmpnei	r2,r2,93
811012e0:	1000101e 	bne	r2,zero,81101324 <bDdr2EepromDump+0xb08>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811012e4:	00e04534 	movhi	r3,33044
811012e8:	18d35404 	addi	r3,r3,19792
811012ec:	00a04534 	movhi	r2,33044
811012f0:	10bb9d04 	addi	r2,r2,-4492
811012f4:	1009883a 	mov	r4,r2
811012f8:	008009c4 	movi	r2,39
811012fc:	100d883a 	mov	r6,r2
81101300:	200b883a 	mov	r5,r4
81101304:	1809883a 	mov	r4,r3
81101308:	1114a700 	call	81114a70 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
8110130c:	d0a05017 	ldw	r2,-32448(gp)
81101310:	01604534 	movhi	r5,33044
81101314:	29535404 	addi	r5,r5,19792
81101318:	1009883a 	mov	r4,r2
8110131c:	11139c00 	call	811139c0 <fprintf>
81101320:	00004306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 94) {
81101324:	e0bfbc17 	ldw	r2,-272(fp)
81101328:	10801798 	cmpnei	r2,r2,94
8110132c:	1000101e 	bne	r2,zero,81101370 <bDdr2EepromDump+0xb54>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
81101330:	00e04534 	movhi	r3,33044
81101334:	18d35404 	addi	r3,r3,19792
81101338:	00a04534 	movhi	r2,33044
8110133c:	10bba704 	addi	r2,r2,-4452
81101340:	1009883a 	mov	r4,r2
81101344:	008006c4 	movi	r2,27
81101348:	100d883a 	mov	r6,r2
8110134c:	200b883a 	mov	r5,r4
81101350:	1809883a 	mov	r4,r3
81101354:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
81101358:	d0a05017 	ldw	r2,-32448(gp)
8110135c:	01604534 	movhi	r5,33044
81101360:	29535404 	addi	r5,r5,19792
81101364:	1009883a 	mov	r4,r2
81101368:	11139c00 	call	811139c0 <fprintf>
8110136c:	00003006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 95) {
81101370:	e0bfbc17 	ldw	r2,-272(fp)
81101374:	108017d8 	cmpnei	r2,r2,95
81101378:	1000101e 	bne	r2,zero,811013bc <bDdr2EepromDump+0xba0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110137c:	00e04534 	movhi	r3,33044
81101380:	18d35404 	addi	r3,r3,19792
81101384:	00a04534 	movhi	r2,33044
81101388:	10bbae04 	addi	r2,r2,-4424
8110138c:	1009883a 	mov	r4,r2
81101390:	00800a04 	movi	r2,40
81101394:	100d883a 	mov	r6,r2
81101398:	200b883a 	mov	r5,r4
8110139c:	1809883a 	mov	r4,r3
811013a0:	1114a700 	call	81114a70 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
811013a4:	d0a05017 	ldw	r2,-32448(gp)
811013a8:	01604534 	movhi	r5,33044
811013ac:	29535404 	addi	r5,r5,19792
811013b0:	1009883a 	mov	r4,r2
811013b4:	11139c00 	call	811139c0 <fprintf>
811013b8:	00001d06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 99) {
811013bc:	e0bfbc17 	ldw	r2,-272(fp)
811013c0:	108018d8 	cmpnei	r2,r2,99
811013c4:	1000101e 	bne	r2,zero,81101408 <bDdr2EepromDump+0xbec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
811013c8:	00e04534 	movhi	r3,33044
811013cc:	18d35404 	addi	r3,r3,19792
811013d0:	00a04534 	movhi	r2,33044
811013d4:	10bbb804 	addi	r2,r2,-4384
811013d8:	1009883a 	mov	r4,r2
811013dc:	00800984 	movi	r2,38
811013e0:	100d883a 	mov	r6,r2
811013e4:	200b883a 	mov	r5,r4
811013e8:	1809883a 	mov	r4,r3
811013ec:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
811013f0:	d0a05017 	ldw	r2,-32448(gp)
811013f4:	01604534 	movhi	r5,33044
811013f8:	29535404 	addi	r5,r5,19792
811013fc:	1009883a 	mov	r4,r2
81101400:	11139c00 	call	811139c0 <fprintf>
81101404:	00000a06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101408:	00a04534 	movhi	r2,33044
8110140c:	10935404 	addi	r2,r2,19792
81101410:	00c00284 	movi	r3,10
81101414:	10c00005 	stb	r3,0(r2)
81101418:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
8110141c:	d0a05017 	ldw	r2,-32448(gp)
81101420:	01604534 	movhi	r5,33044
81101424:	29535404 	addi	r5,r5,19792
81101428:	1009883a 	mov	r4,r2
8110142c:	11139c00 	call	811139c0 <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
81101430:	e0bfbc17 	ldw	r2,-272(fp)
81101434:	10800044 	addi	r2,r2,1
81101438:	e0bfbc15 	stw	r2,-272(fp)
8110143c:	e0bfbc17 	ldw	r2,-272(fp)
81101440:	10804008 	cmpgei	r2,r2,256
81101444:	1000121e 	bne	r2,zero,81101490 <bDdr2EepromDump+0xc74>
81101448:	e0bfbe17 	ldw	r2,-264(fp)
8110144c:	103d451e 	bne	r2,zero,81100964 <__reset+0xfb0e0964>
81101450:	00000f06 	br	81101490 <bDdr2EepromDump+0xc74>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
81101454:	00e04534 	movhi	r3,33044
81101458:	18d35404 	addi	r3,r3,19792
8110145c:	00a04534 	movhi	r2,33044
81101460:	10bbc204 	addi	r2,r2,-4344
81101464:	1009883a 	mov	r4,r2
81101468:	008005c4 	movi	r2,23
8110146c:	100d883a 	mov	r6,r2
81101470:	200b883a 	mov	r5,r4
81101474:	1809883a 	mov	r4,r3
81101478:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
8110147c:	d0a05017 	ldw	r2,-32448(gp)
81101480:	01604534 	movhi	r5,33044
81101484:	29535404 	addi	r5,r5,19792
81101488:	1009883a 	mov	r4,r2
8110148c:	11139c00 	call	811139c0 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101490:	00a04534 	movhi	r2,33044
81101494:	10935404 	addi	r2,r2,19792
81101498:	00c00284 	movi	r3,10
8110149c:	10c00005 	stb	r3,0(r2)
811014a0:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811014a4:	d0a05017 	ldw	r2,-32448(gp)
811014a8:	01604534 	movhi	r5,33044
811014ac:	29535404 	addi	r5,r5,19792
811014b0:	1009883a 	mov	r4,r2
811014b4:	11139c00 	call	811139c0 <fprintf>
#endif

	return bSuccess;
811014b8:	e0bfbe17 	ldw	r2,-264(fp)
}
811014bc:	e037883a 	mov	sp,fp
811014c0:	dfc00117 	ldw	ra,4(sp)
811014c4:	df000017 	ldw	fp,0(sp)
811014c8:	dec00204 	addi	sp,sp,8
811014cc:	f800283a 	ret

811014d0 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
811014d0:	defffb04 	addi	sp,sp,-20
811014d4:	de00012e 	bgeu	sp,et,811014dc <bDdr2SwitchMemory+0xc>
811014d8:	003b68fa 	trap	3
811014dc:	dfc00415 	stw	ra,16(sp)
811014e0:	df000315 	stw	fp,12(sp)
811014e4:	df000304 	addi	fp,sp,12
811014e8:	2005883a 	mov	r2,r4
811014ec:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
811014f0:	00a04834 	movhi	r2,33056
811014f4:	108c2204 	addi	r2,r2,12424
811014f8:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
811014fc:	00800044 	movi	r2,1
81101500:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101504:	e0bfff03 	ldbu	r2,-4(fp)
81101508:	10c00060 	cmpeqi	r3,r2,1
8110150c:	1800031e 	bne	r3,zero,8110151c <bDdr2SwitchMemory+0x4c>
81101510:	108000a0 	cmpeqi	r2,r2,2
81101514:	1000041e 	bne	r2,zero,81101528 <bDdr2SwitchMemory+0x58>
81101518:	00000706 	br	81101538 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
8110151c:	e0bffe17 	ldw	r2,-8(fp)
81101520:	10000015 	stw	zero,0(r2)
		break;
81101524:	00001406 	br	81101578 <bDdr2SwitchMemory+0xa8>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81101528:	e0bffe17 	ldw	r2,-8(fp)
8110152c:	00e00034 	movhi	r3,32768
81101530:	10c00015 	stw	r3,0(r2)
		break;
81101534:	00001006 	br	81101578 <bDdr2SwitchMemory+0xa8>
	default:
		bSuccess = FALSE;
81101538:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110153c:	00e04534 	movhi	r3,33044
81101540:	18d35404 	addi	r3,r3,19792
81101544:	00a04534 	movhi	r2,33044
81101548:	10bbc804 	addi	r2,r2,-4320
8110154c:	1009883a 	mov	r4,r2
81101550:	00800f04 	movi	r2,60
81101554:	100d883a 	mov	r6,r2
81101558:	200b883a 	mov	r5,r4
8110155c:	1809883a 	mov	r4,r3
81101560:	1114a700 	call	81114a70 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
81101564:	d0a05017 	ldw	r2,-32448(gp)
81101568:	01604534 	movhi	r5,33044
8110156c:	29535404 	addi	r5,r5,19792
81101570:	1009883a 	mov	r4,r2
81101574:	11139c00 	call	811139c0 <fprintf>
		;
#endif
	}

	return bSuccess;
81101578:	e0bffd17 	ldw	r2,-12(fp)
}
8110157c:	e037883a 	mov	sp,fp
81101580:	dfc00117 	ldw	ra,4(sp)
81101584:	df000017 	ldw	fp,0(sp)
81101588:	dec00204 	addi	sp,sp,8
8110158c:	f800283a 	ret

81101590 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81101590:	deffe204 	addi	sp,sp,-120
81101594:	de00012e 	bgeu	sp,et,8110159c <bDdr2MemoryWriteTest+0xc>
81101598:	003b68fa 	trap	3
8110159c:	dfc01d15 	stw	ra,116(sp)
811015a0:	df001c15 	stw	fp,112(sp)
811015a4:	dc401b15 	stw	r17,108(sp)
811015a8:	dc001a15 	stw	r16,104(sp)
811015ac:	df001c04 	addi	fp,sp,112
811015b0:	2005883a 	mov	r2,r4
811015b4:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
811015b8:	00e04534 	movhi	r3,33044
811015bc:	18d35404 	addi	r3,r3,19792
811015c0:	00a04534 	movhi	r2,33044
811015c4:	10bbd704 	addi	r2,r2,-4260
811015c8:	1009883a 	mov	r4,r2
811015cc:	00800a04 	movi	r2,40
811015d0:	100d883a 	mov	r6,r2
811015d4:	200b883a 	mov	r5,r4
811015d8:	1809883a 	mov	r4,r3
811015dc:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
811015e0:	d0a05017 	ldw	r2,-32448(gp)
811015e4:	01604534 	movhi	r5,33044
811015e8:	29535404 	addi	r5,r5,19792
811015ec:	1009883a 	mov	r4,r2
811015f0:	11139c00 	call	811139c0 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
811015f4:	00800044 	movi	r2,1
811015f8:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
811015fc:	e0bffd03 	ldbu	r2,-12(fp)
81101600:	10c00060 	cmpeqi	r3,r2,1
81101604:	1800031e 	bne	r3,zero,81101614 <bDdr2MemoryWriteTest+0x84>
81101608:	108000a0 	cmpeqi	r2,r2,2
8110160c:	1000081e 	bne	r2,zero,81101630 <bDdr2MemoryWriteTest+0xa0>
81101610:	00000e06 	br	8110164c <bDdr2MemoryWriteTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101614:	e0bffd03 	ldbu	r2,-12(fp)
81101618:	1009883a 	mov	r4,r2
8110161c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101620:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101624:	00a00034 	movhi	r2,32768
81101628:	e0bfe615 	stw	r2,-104(fp)
		break;
8110162c:	00001906 	br	81101694 <bDdr2MemoryWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101630:	e0bffd03 	ldbu	r2,-12(fp)
81101634:	1009883a 	mov	r4,r2
81101638:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110163c:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101640:	00a00034 	movhi	r2,32768
81101644:	e0bfe615 	stw	r2,-104(fp)
		break;
81101648:	00001206 	br	81101694 <bDdr2MemoryWriteTest+0x104>
	default:
		bSuccess = FALSE;
8110164c:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101650:	00e04534 	movhi	r3,33044
81101654:	18d35404 	addi	r3,r3,19792
81101658:	00a04534 	movhi	r2,33044
8110165c:	10b9e804 	addi	r2,r2,-6240
81101660:	1009883a 	mov	r4,r2
81101664:	00800bc4 	movi	r2,47
81101668:	100d883a 	mov	r6,r2
8110166c:	200b883a 	mov	r5,r4
81101670:	1809883a 	mov	r4,r3
81101674:	1114a700 	call	81114a70 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101678:	d0a05017 	ldw	r2,-32448(gp)
8110167c:	01604534 	movhi	r5,33044
81101680:	29535404 	addi	r5,r5,19792
81101684:	1009883a 	mov	r4,r2
81101688:	11139c00 	call	811139c0 <fprintf>
		;
#endif
		return bSuccess;
8110168c:	e0bfed17 	ldw	r2,-76(fp)
81101690:	00011806 	br	81101af4 <bDdr2MemoryWriteTest+0x564>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81101694:	e0bfe617 	ldw	r2,-104(fp)
81101698:	1004d53a 	srli	r2,r2,20
8110169c:	100d883a 	mov	r6,r2
811016a0:	01604534 	movhi	r5,33044
811016a4:	297be104 	addi	r5,r5,-4220
811016a8:	01204534 	movhi	r4,33044
811016ac:	21135404 	addi	r4,r4,19792
811016b0:	11153700 	call	81115370 <sprintf>
	debug(fp, cDebugBuffer);
811016b4:	d0a05017 	ldw	r2,-32448(gp)
811016b8:	01604534 	movhi	r5,33044
811016bc:	29535404 	addi	r5,r5,19792
811016c0:	1009883a 	mov	r4,r2
811016c4:	11139c00 	call	811139c0 <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
811016c8:	00800104 	movi	r2,4
811016cc:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
811016d0:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
811016d4:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
811016d8:	e03fe715 	stw	zero,-100(fp)
811016dc:	00001506 	br	81101734 <bDdr2MemoryWriteTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
811016e0:	e0ffe617 	ldw	r3,-104(fp)
811016e4:	00b33374 	movhi	r2,52429
811016e8:	10b33344 	addi	r2,r2,-13107
811016ec:	1888383a 	mulxuu	r4,r3,r2
811016f0:	1885383a 	mul	r2,r3,r2
811016f4:	1021883a 	mov	r16,r2
811016f8:	2023883a 	mov	r17,r4
811016fc:	8804d0fa 	srli	r2,r17,3
81101700:	e0ffe717 	ldw	r3,-100(fp)
81101704:	18c00044 	addi	r3,r3,1
81101708:	10c7383a 	mul	r3,r2,r3
8110170c:	e0bfe717 	ldw	r2,-100(fp)
81101710:	1085883a 	add	r2,r2,r2
81101714:	1085883a 	add	r2,r2,r2
81101718:	e13fe504 	addi	r4,fp,-108
8110171c:	2085883a 	add	r2,r4,r2
81101720:	10800e04 	addi	r2,r2,56
81101724:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101728:	e0bfe717 	ldw	r2,-100(fp)
8110172c:	10800044 	addi	r2,r2,1
81101730:	e0bfe715 	stw	r2,-100(fp)
81101734:	e0bfe717 	ldw	r2,-100(fp)
81101738:	10800290 	cmplti	r2,r2,10
8110173c:	103fe81e 	bne	r2,zero,811016e0 <__reset+0xfb0e16e0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101740:	d0a07317 	ldw	r2,-32308(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
81101744:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101748:	00804004 	movi	r2,256
8110174c:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
81101750:	e03fe715 	stw	zero,-100(fp)
81101754:	00001e06 	br	811017d0 <bDdr2MemoryWriteTest+0x240>
		if (iI == 0) {
81101758:	e0bfe717 	ldw	r2,-100(fp)
8110175c:	1000091e 	bne	r2,zero,81101784 <bDdr2MemoryWriteTest+0x1f4>
			xSZData[iI] = uliInitValue;
81101760:	00a04534 	movhi	r2,33044
81101764:	10939404 	addi	r2,r2,20048
81101768:	e0ffe717 	ldw	r3,-100(fp)
8110176c:	18c7883a 	add	r3,r3,r3
81101770:	18c7883a 	add	r3,r3,r3
81101774:	10c5883a 	add	r2,r2,r3
81101778:	e0fff017 	ldw	r3,-64(fp)
8110177c:	10c00015 	stw	r3,0(r2)
81101780:	00001006 	br	811017c4 <bDdr2MemoryWriteTest+0x234>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81101784:	e0bfe717 	ldw	r2,-100(fp)
81101788:	10ffffc4 	addi	r3,r2,-1
8110178c:	00a04534 	movhi	r2,33044
81101790:	10939404 	addi	r2,r2,20048
81101794:	18c7883a 	add	r3,r3,r3
81101798:	18c7883a 	add	r3,r3,r3
8110179c:	10c5883a 	add	r2,r2,r3
811017a0:	10800017 	ldw	r2,0(r2)
811017a4:	11000364 	muli	r4,r2,13
811017a8:	00a04534 	movhi	r2,33044
811017ac:	10939404 	addi	r2,r2,20048
811017b0:	e0ffe717 	ldw	r3,-100(fp)
811017b4:	18c7883a 	add	r3,r3,r3
811017b8:	18c7883a 	add	r3,r3,r3
811017bc:	10c5883a 	add	r2,r2,r3
811017c0:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
811017c4:	e0bfe717 	ldw	r2,-100(fp)
811017c8:	10800044 	addi	r2,r2,1
811017cc:	e0bfe715 	stw	r2,-100(fp)
811017d0:	e0ffe717 	ldw	r3,-100(fp)
811017d4:	e0bfea17 	ldw	r2,-88(fp)
811017d8:	18bfdf16 	blt	r3,r2,81101758 <__reset+0xfb0e1758>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
811017dc:	e0bfea17 	ldw	r2,-88(fp)
811017e0:	10ffffc4 	addi	r3,r2,-1
811017e4:	00a04534 	movhi	r2,33044
811017e8:	10939404 	addi	r2,r2,20048
811017ec:	18c7883a 	add	r3,r3,r3
811017f0:	18c7883a 	add	r3,r3,r3
811017f4:	10c7883a 	add	r3,r2,r3
811017f8:	00aaaaf4 	movhi	r2,43691
811017fc:	10aaaa84 	addi	r2,r2,-21846
81101800:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101804:	e0bfea17 	ldw	r2,-88(fp)
81101808:	10ffff84 	addi	r3,r2,-2
8110180c:	00a04534 	movhi	r2,33044
81101810:	10939404 	addi	r2,r2,20048
81101814:	18c7883a 	add	r3,r3,r3
81101818:	18c7883a 	add	r3,r3,r3
8110181c:	10c7883a 	add	r3,r2,r3
81101820:	00955574 	movhi	r2,21845
81101824:	10955544 	addi	r2,r2,21845
81101828:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
8110182c:	e0bfea17 	ldw	r2,-88(fp)
81101830:	10ffff44 	addi	r3,r2,-3
81101834:	00a04534 	movhi	r2,33044
81101838:	10939404 	addi	r2,r2,20048
8110183c:	18c7883a 	add	r3,r3,r3
81101840:	18c7883a 	add	r3,r3,r3
81101844:	10c5883a 	add	r2,r2,r3
81101848:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
8110184c:	e0bfea17 	ldw	r2,-88(fp)
81101850:	10ffff04 	addi	r3,r2,-4
81101854:	00a04534 	movhi	r2,33044
81101858:	10939404 	addi	r2,r2,20048
8110185c:	18c7883a 	add	r3,r3,r3
81101860:	18c7883a 	add	r3,r3,r3
81101864:	10c5883a 	add	r2,r2,r3
81101868:	00ffffc4 	movi	r3,-1
8110186c:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
81101870:	00e04534 	movhi	r3,33044
81101874:	18d35404 	addi	r3,r3,19792
81101878:	00a04534 	movhi	r2,33044
8110187c:	10bbe704 	addi	r2,r2,-4196
81101880:	1009883a 	mov	r4,r2
81101884:	00800444 	movi	r2,17
81101888:	100d883a 	mov	r6,r2
8110188c:	200b883a 	mov	r5,r4
81101890:	1809883a 	mov	r4,r3
81101894:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
81101898:	d0a05017 	ldw	r2,-32448(gp)
8110189c:	01604534 	movhi	r5,33044
811018a0:	29535404 	addi	r5,r5,19792
811018a4:	1009883a 	mov	r4,r2
811018a8:	11139c00 	call	811139c0 <fprintf>
811018ac:	d0a07317 	ldw	r2,-32308(gp)
#endif
	iTimeStart = alt_nticks();
811018b0:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
811018b4:	e0bfe517 	ldw	r2,-108(fp)
811018b8:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
811018bc:	00810004 	movi	r2,1024
811018c0:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
811018c4:	e0ffe817 	ldw	r3,-96(fp)
811018c8:	e0bfee17 	ldw	r2,-72(fp)
811018cc:	1885283a 	div	r2,r3,r2
811018d0:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
811018d4:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
811018d8:	00003a06 	br	811019c4 <bDdr2MemoryWriteTest+0x434>
		iNRemainedLen = uliByteLen - iNPos;
811018dc:	e0bfeb17 	ldw	r2,-84(fp)
811018e0:	e0ffe617 	ldw	r3,-104(fp)
811018e4:	1885c83a 	sub	r2,r3,r2
811018e8:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
811018ec:	e0bfe817 	ldw	r2,-96(fp)
811018f0:	e0fff217 	ldw	r3,-56(fp)
811018f4:	1880060e 	bge	r3,r2,81101910 <bDdr2MemoryWriteTest+0x380>
			iNAccessLen = iNRemainedLen;
811018f8:	e0bff217 	ldw	r2,-56(fp)
811018fc:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101900:	e0ffe817 	ldw	r3,-96(fp)
81101904:	e0bfee17 	ldw	r2,-72(fp)
81101908:	1885283a 	div	r2,r3,r2
8110190c:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
81101910:	e0bfe817 	ldw	r2,-96(fp)
81101914:	100d883a 	mov	r6,r2
81101918:	01604534 	movhi	r5,33044
8110191c:	29539404 	addi	r5,r5,20048
81101920:	e13fe917 	ldw	r4,-92(fp)
81101924:	1114a700 	call	81114a70 <memcpy>
		pxDes += iNItemNum;
81101928:	e0bfea17 	ldw	r2,-88(fp)
8110192c:	1085883a 	add	r2,r2,r2
81101930:	1085883a 	add	r2,r2,r2
81101934:	1007883a 	mov	r3,r2
81101938:	e0bfe917 	ldw	r2,-92(fp)
8110193c:	10c5883a 	add	r2,r2,r3
81101940:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
81101944:	e0ffeb17 	ldw	r3,-84(fp)
81101948:	e0bfe817 	ldw	r2,-96(fp)
8110194c:	1885883a 	add	r2,r3,r2
81101950:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101954:	e0bfec17 	ldw	r2,-80(fp)
81101958:	10800288 	cmpgei	r2,r2,10
8110195c:	1000191e 	bne	r2,zero,811019c4 <bDdr2MemoryWriteTest+0x434>
81101960:	e0bfec17 	ldw	r2,-80(fp)
81101964:	1085883a 	add	r2,r2,r2
81101968:	1085883a 	add	r2,r2,r2
8110196c:	e0ffe504 	addi	r3,fp,-108
81101970:	1885883a 	add	r2,r3,r2
81101974:	10800e04 	addi	r2,r2,56
81101978:	10800017 	ldw	r2,0(r2)
8110197c:	e0ffeb17 	ldw	r3,-84(fp)
81101980:	18801036 	bltu	r3,r2,811019c4 <bDdr2MemoryWriteTest+0x434>
			iNProgressIndex++;
81101984:	e0bfec17 	ldw	r2,-80(fp)
81101988:	10800044 	addi	r2,r2,1
8110198c:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101990:	e0bfec17 	ldw	r2,-80(fp)
81101994:	108002a4 	muli	r2,r2,10
81101998:	100d883a 	mov	r6,r2
8110199c:	01604534 	movhi	r5,33044
811019a0:	297bec04 	addi	r5,r5,-4176
811019a4:	01204534 	movhi	r4,33044
811019a8:	21135404 	addi	r4,r4,19792
811019ac:	11153700 	call	81115370 <sprintf>
			debug(fp, cDebugBuffer);
811019b0:	d0a05017 	ldw	r2,-32448(gp)
811019b4:	01604534 	movhi	r5,33044
811019b8:	29535404 	addi	r5,r5,19792
811019bc:	1009883a 	mov	r4,r2
811019c0:	11139c00 	call	811139c0 <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
811019c4:	e0ffeb17 	ldw	r3,-84(fp)
811019c8:	e0bfe617 	ldw	r2,-104(fp)
811019cc:	18bfc336 	bltu	r3,r2,811018dc <__reset+0xfb0e18dc>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
811019d0:	11294900 	call	81129490 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811019d4:	00a04534 	movhi	r2,33044
811019d8:	10935404 	addi	r2,r2,19792
811019dc:	00c00284 	movi	r3,10
811019e0:	10c00005 	stb	r3,0(r2)
811019e4:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811019e8:	d0a05017 	ldw	r2,-32448(gp)
811019ec:	01604534 	movhi	r5,33044
811019f0:	29535404 	addi	r5,r5,19792
811019f4:	1009883a 	mov	r4,r2
811019f8:	11139c00 	call	811139c0 <fprintf>
811019fc:	d0e07317 	ldw	r3,-32308(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101a00:	e0bff117 	ldw	r2,-60(fp)
81101a04:	1885c83a 	sub	r2,r3,r2
81101a08:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
81101a0c:	e0bfed17 	ldw	r2,-76(fp)
81101a10:	10001e26 	beq	r2,zero,81101a8c <bDdr2MemoryWriteTest+0x4fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101a14:	e13fef17 	ldw	r4,-68(fp)
81101a18:	1112bfc0 	call	81112bfc <__floatsisf>
81101a1c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101a20:	d0a07217 	ldw	r2,-32312(gp)
81101a24:	1009883a 	mov	r4,r2
81101a28:	1112d280 	call	81112d28 <__floatunsisf>
81101a2c:	1007883a 	mov	r3,r2
81101a30:	180b883a 	mov	r5,r3
81101a34:	8009883a 	mov	r4,r16
81101a38:	11123b00 	call	811123b0 <__divsf3>
81101a3c:	1007883a 	mov	r3,r2
81101a40:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101a44:	1009883a 	mov	r4,r2
81101a48:	11135400 	call	81113540 <__extendsfdf2>
81101a4c:	1009883a 	mov	r4,r2
81101a50:	180b883a 	mov	r5,r3
81101a54:	d9400015 	stw	r5,0(sp)
81101a58:	200f883a 	mov	r7,r4
81101a5c:	e1bfe617 	ldw	r6,-104(fp)
81101a60:	01604534 	movhi	r5,33044
81101a64:	297bee04 	addi	r5,r5,-4168
81101a68:	01204534 	movhi	r4,33044
81101a6c:	21135404 	addi	r4,r4,19792
81101a70:	11153700 	call	81115370 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101a74:	d0a05017 	ldw	r2,-32448(gp)
81101a78:	01604534 	movhi	r5,33044
81101a7c:	29535404 	addi	r5,r5,19792
81101a80:	1009883a 	mov	r4,r2
81101a84:	11139c00 	call	811139c0 <fprintf>
81101a88:	00000f06 	br	81101ac8 <bDdr2MemoryWriteTest+0x538>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81101a8c:	00e04534 	movhi	r3,33044
81101a90:	18d35404 	addi	r3,r3,19792
81101a94:	00a04534 	movhi	r2,33044
81101a98:	10bbfa04 	addi	r2,r2,-4120
81101a9c:	1009883a 	mov	r4,r2
81101aa0:	00800584 	movi	r2,22
81101aa4:	100d883a 	mov	r6,r2
81101aa8:	200b883a 	mov	r5,r4
81101aac:	1809883a 	mov	r4,r3
81101ab0:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
81101ab4:	d0a05017 	ldw	r2,-32448(gp)
81101ab8:	01604534 	movhi	r5,33044
81101abc:	29535404 	addi	r5,r5,19792
81101ac0:	1009883a 	mov	r4,r2
81101ac4:	11139c00 	call	811139c0 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101ac8:	00a04534 	movhi	r2,33044
81101acc:	10935404 	addi	r2,r2,19792
81101ad0:	00c00284 	movi	r3,10
81101ad4:	10c00005 	stb	r3,0(r2)
81101ad8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101adc:	d0a05017 	ldw	r2,-32448(gp)
81101ae0:	01604534 	movhi	r5,33044
81101ae4:	29535404 	addi	r5,r5,19792
81101ae8:	1009883a 	mov	r4,r2
81101aec:	11139c00 	call	811139c0 <fprintf>
#endif

	return bSuccess;
81101af0:	e0bfed17 	ldw	r2,-76(fp)
}
81101af4:	e6fffe04 	addi	sp,fp,-8
81101af8:	dfc00317 	ldw	ra,12(sp)
81101afc:	df000217 	ldw	fp,8(sp)
81101b00:	dc400117 	ldw	r17,4(sp)
81101b04:	dc000017 	ldw	r16,0(sp)
81101b08:	dec00404 	addi	sp,sp,16
81101b0c:	f800283a 	ret

81101b10 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101b10:	deffe204 	addi	sp,sp,-120
81101b14:	de00012e 	bgeu	sp,et,81101b1c <bDdr2MemoryReadTest+0xc>
81101b18:	003b68fa 	trap	3
81101b1c:	dfc01d15 	stw	ra,116(sp)
81101b20:	df001c15 	stw	fp,112(sp)
81101b24:	dc401b15 	stw	r17,108(sp)
81101b28:	dc001a15 	stw	r16,104(sp)
81101b2c:	df001c04 	addi	fp,sp,112
81101b30:	2005883a 	mov	r2,r4
81101b34:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101b38:	00e04534 	movhi	r3,33044
81101b3c:	18d35404 	addi	r3,r3,19792
81101b40:	00a04534 	movhi	r2,33044
81101b44:	10bc0004 	addi	r2,r2,-4096
81101b48:	1009883a 	mov	r4,r2
81101b4c:	008009c4 	movi	r2,39
81101b50:	100d883a 	mov	r6,r2
81101b54:	200b883a 	mov	r5,r4
81101b58:	1809883a 	mov	r4,r3
81101b5c:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
81101b60:	d0a05017 	ldw	r2,-32448(gp)
81101b64:	01604534 	movhi	r5,33044
81101b68:	29535404 	addi	r5,r5,19792
81101b6c:	1009883a 	mov	r4,r2
81101b70:	11139c00 	call	811139c0 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101b74:	00800044 	movi	r2,1
81101b78:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101b7c:	e0bffd03 	ldbu	r2,-12(fp)
81101b80:	10c00060 	cmpeqi	r3,r2,1
81101b84:	1800031e 	bne	r3,zero,81101b94 <bDdr2MemoryReadTest+0x84>
81101b88:	108000a0 	cmpeqi	r2,r2,2
81101b8c:	1000081e 	bne	r2,zero,81101bb0 <bDdr2MemoryReadTest+0xa0>
81101b90:	00000e06 	br	81101bcc <bDdr2MemoryReadTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b94:	e0bffd03 	ldbu	r2,-12(fp)
81101b98:	1009883a 	mov	r4,r2
81101b9c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101ba0:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101ba4:	00a00034 	movhi	r2,32768
81101ba8:	e0bfe715 	stw	r2,-100(fp)
		break;
81101bac:	00001906 	br	81101c14 <bDdr2MemoryReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101bb0:	e0bffd03 	ldbu	r2,-12(fp)
81101bb4:	1009883a 	mov	r4,r2
81101bb8:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101bbc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101bc0:	00a00034 	movhi	r2,32768
81101bc4:	e0bfe715 	stw	r2,-100(fp)
		break;
81101bc8:	00001206 	br	81101c14 <bDdr2MemoryReadTest+0x104>
	default:
		bSuccess = FALSE;
81101bcc:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101bd0:	00e04534 	movhi	r3,33044
81101bd4:	18d35404 	addi	r3,r3,19792
81101bd8:	00a04534 	movhi	r2,33044
81101bdc:	10b9e804 	addi	r2,r2,-6240
81101be0:	1009883a 	mov	r4,r2
81101be4:	00800bc4 	movi	r2,47
81101be8:	100d883a 	mov	r6,r2
81101bec:	200b883a 	mov	r5,r4
81101bf0:	1809883a 	mov	r4,r3
81101bf4:	1114a700 	call	81114a70 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101bf8:	d0a05017 	ldw	r2,-32448(gp)
81101bfc:	01604534 	movhi	r5,33044
81101c00:	29535404 	addi	r5,r5,19792
81101c04:	1009883a 	mov	r4,r2
81101c08:	11139c00 	call	811139c0 <fprintf>
		;
#endif
		return bSuccess;
81101c0c:	e0bfe517 	ldw	r2,-108(fp)
81101c10:	0000fc06 	br	81102004 <bDdr2MemoryReadTest+0x4f4>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101c14:	e0bfe717 	ldw	r2,-100(fp)
81101c18:	1004d53a 	srli	r2,r2,20
81101c1c:	100d883a 	mov	r6,r2
81101c20:	01604534 	movhi	r5,33044
81101c24:	297c0a04 	addi	r5,r5,-4056
81101c28:	01204534 	movhi	r4,33044
81101c2c:	21135404 	addi	r4,r4,19792
81101c30:	11153700 	call	81115370 <sprintf>
	debug(fp, cDebugBuffer);
81101c34:	d0a05017 	ldw	r2,-32448(gp)
81101c38:	01604534 	movhi	r5,33044
81101c3c:	29535404 	addi	r5,r5,19792
81101c40:	1009883a 	mov	r4,r2
81101c44:	11139c00 	call	811139c0 <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101c48:	00804004 	movi	r2,256
81101c4c:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101c50:	00800104 	movi	r2,4
81101c54:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101c58:	e0ffec17 	ldw	r3,-80(fp)
81101c5c:	e0bfef17 	ldw	r2,-68(fp)
81101c60:	1885383a 	mul	r2,r3,r2
81101c64:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101c68:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101c6c:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101c70:	e03fe815 	stw	zero,-96(fp)
81101c74:	00001506 	br	81101ccc <bDdr2MemoryReadTest+0x1bc>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101c78:	e0ffe717 	ldw	r3,-100(fp)
81101c7c:	00b33374 	movhi	r2,52429
81101c80:	10b33344 	addi	r2,r2,-13107
81101c84:	1888383a 	mulxuu	r4,r3,r2
81101c88:	1885383a 	mul	r2,r3,r2
81101c8c:	1021883a 	mov	r16,r2
81101c90:	2023883a 	mov	r17,r4
81101c94:	8804d0fa 	srli	r2,r17,3
81101c98:	e0ffe817 	ldw	r3,-96(fp)
81101c9c:	18c00044 	addi	r3,r3,1
81101ca0:	10c7383a 	mul	r3,r2,r3
81101ca4:	e0bfe817 	ldw	r2,-96(fp)
81101ca8:	1085883a 	add	r2,r2,r2
81101cac:	1085883a 	add	r2,r2,r2
81101cb0:	e13fe504 	addi	r4,fp,-108
81101cb4:	2085883a 	add	r2,r4,r2
81101cb8:	10800e04 	addi	r2,r2,56
81101cbc:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101cc0:	e0bfe817 	ldw	r2,-96(fp)
81101cc4:	10800044 	addi	r2,r2,1
81101cc8:	e0bfe815 	stw	r2,-96(fp)
81101ccc:	e0bfe817 	ldw	r2,-96(fp)
81101cd0:	10800290 	cmplti	r2,r2,10
81101cd4:	103fe81e 	bne	r2,zero,81101c78 <__reset+0xfb0e1c78>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101cd8:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101cdc:	00e04534 	movhi	r3,33044
81101ce0:	18d35404 	addi	r3,r3,19792
81101ce4:	00a04534 	movhi	r2,33044
81101ce8:	10bc1004 	addi	r2,r2,-4032
81101cec:	1009883a 	mov	r4,r2
81101cf0:	008006c4 	movi	r2,27
81101cf4:	100d883a 	mov	r6,r2
81101cf8:	200b883a 	mov	r5,r4
81101cfc:	1809883a 	mov	r4,r3
81101d00:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
81101d04:	d0a05017 	ldw	r2,-32448(gp)
81101d08:	01604534 	movhi	r5,33044
81101d0c:	29535404 	addi	r5,r5,19792
81101d10:	1009883a 	mov	r4,r2
81101d14:	11139c00 	call	811139c0 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101d18:	d0a07317 	ldw	r2,-32308(gp)
#endif
	iTimeStart = alt_nticks();
81101d1c:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101d20:	e0bfe617 	ldw	r2,-104(fp)
81101d24:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101d28:	00810004 	movi	r2,1024
81101d2c:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101d30:	e0ffe917 	ldw	r3,-92(fp)
81101d34:	e0bfef17 	ldw	r2,-68(fp)
81101d38:	1885283a 	div	r2,r3,r2
81101d3c:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101d40:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101d44:	00006206 	br	81101ed0 <bDdr2MemoryReadTest+0x3c0>
		iNRemainedLen = uliByteLen - iNPos;
81101d48:	e0bfed17 	ldw	r2,-76(fp)
81101d4c:	e0ffe717 	ldw	r3,-100(fp)
81101d50:	1885c83a 	sub	r2,r3,r2
81101d54:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101d58:	e0bfe917 	ldw	r2,-92(fp)
81101d5c:	e0fff217 	ldw	r3,-56(fp)
81101d60:	1880060e 	bge	r3,r2,81101d7c <bDdr2MemoryReadTest+0x26c>
			iNAccessLen = iNRemainedLen;
81101d64:	e0bff217 	ldw	r2,-56(fp)
81101d68:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101d6c:	e0ffe917 	ldw	r3,-92(fp)
81101d70:	e0bfef17 	ldw	r2,-68(fp)
81101d74:	1885283a 	div	r2,r3,r2
81101d78:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101d7c:	00a04534 	movhi	r2,33044
81101d80:	10939404 	addi	r2,r2,20048
81101d84:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d88:	e03fe815 	stw	zero,-96(fp)
81101d8c:	00002b06 	br	81101e3c <bDdr2MemoryReadTest+0x32c>
			if (*pxSrc++ != *pxDes++) {
81101d90:	e0bfeb17 	ldw	r2,-84(fp)
81101d94:	10c00104 	addi	r3,r2,4
81101d98:	e0ffeb15 	stw	r3,-84(fp)
81101d9c:	10c00017 	ldw	r3,0(r2)
81101da0:	e0bfea17 	ldw	r2,-88(fp)
81101da4:	11000104 	addi	r4,r2,4
81101da8:	e13fea15 	stw	r4,-88(fp)
81101dac:	10800017 	ldw	r2,0(r2)
81101db0:	18801f26 	beq	r3,r2,81101e30 <bDdr2MemoryReadTest+0x320>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101db4:	e0bfeb17 	ldw	r2,-84(fp)
81101db8:	10bfff04 	addi	r2,r2,-4
81101dbc:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101dc0:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101dc4:	00a04534 	movhi	r2,33044
81101dc8:	10939404 	addi	r2,r2,20048
81101dcc:	e0ffe817 	ldw	r3,-96(fp)
81101dd0:	18c7883a 	add	r3,r3,r3
81101dd4:	18c7883a 	add	r3,r3,r3
81101dd8:	10c5883a 	add	r2,r2,r3
81101ddc:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101de0:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101de4:	e0ffed17 	ldw	r3,-76(fp)
81101de8:	e0bfef17 	ldw	r2,-68(fp)
81101dec:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101df0:	e0bfe817 	ldw	r2,-96(fp)
81101df4:	1885883a 	add	r2,r3,r2
81101df8:	d8800015 	stw	r2,0(sp)
81101dfc:	280f883a 	mov	r7,r5
81101e00:	200d883a 	mov	r6,r4
81101e04:	01604534 	movhi	r5,33044
81101e08:	297c1704 	addi	r5,r5,-4004
81101e0c:	01204534 	movhi	r4,33044
81101e10:	21135404 	addi	r4,r4,19792
81101e14:	11153700 	call	81115370 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101e18:	d0a05017 	ldw	r2,-32448(gp)
81101e1c:	01604534 	movhi	r5,33044
81101e20:	29535404 	addi	r5,r5,19792
81101e24:	1009883a 	mov	r4,r2
81101e28:	11139c00 	call	811139c0 <fprintf>
#endif
				bSuccess = FALSE;
81101e2c:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101e30:	e0bfe817 	ldw	r2,-96(fp)
81101e34:	10800044 	addi	r2,r2,1
81101e38:	e0bfe815 	stw	r2,-96(fp)
81101e3c:	e0ffe817 	ldw	r3,-96(fp)
81101e40:	e0bfec17 	ldw	r2,-80(fp)
81101e44:	1880020e 	bge	r3,r2,81101e50 <bDdr2MemoryReadTest+0x340>
81101e48:	e0bfe517 	ldw	r2,-108(fp)
81101e4c:	103fd01e 	bne	r2,zero,81101d90 <__reset+0xfb0e1d90>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101e50:	e0ffed17 	ldw	r3,-76(fp)
81101e54:	e0bfe917 	ldw	r2,-92(fp)
81101e58:	1885883a 	add	r2,r3,r2
81101e5c:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101e60:	e0bfee17 	ldw	r2,-72(fp)
81101e64:	10800288 	cmpgei	r2,r2,10
81101e68:	1000191e 	bne	r2,zero,81101ed0 <bDdr2MemoryReadTest+0x3c0>
81101e6c:	e0bfee17 	ldw	r2,-72(fp)
81101e70:	1085883a 	add	r2,r2,r2
81101e74:	1085883a 	add	r2,r2,r2
81101e78:	e0ffe504 	addi	r3,fp,-108
81101e7c:	1885883a 	add	r2,r3,r2
81101e80:	10800e04 	addi	r2,r2,56
81101e84:	10800017 	ldw	r2,0(r2)
81101e88:	e0ffed17 	ldw	r3,-76(fp)
81101e8c:	18801036 	bltu	r3,r2,81101ed0 <bDdr2MemoryReadTest+0x3c0>
			iNProgressIndex++;
81101e90:	e0bfee17 	ldw	r2,-72(fp)
81101e94:	10800044 	addi	r2,r2,1
81101e98:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101e9c:	e0bfee17 	ldw	r2,-72(fp)
81101ea0:	108002a4 	muli	r2,r2,10
81101ea4:	100d883a 	mov	r6,r2
81101ea8:	01604534 	movhi	r5,33044
81101eac:	297bec04 	addi	r5,r5,-4176
81101eb0:	01204534 	movhi	r4,33044
81101eb4:	21135404 	addi	r4,r4,19792
81101eb8:	11153700 	call	81115370 <sprintf>
			debug(fp, cDebugBuffer);
81101ebc:	d0a05017 	ldw	r2,-32448(gp)
81101ec0:	01604534 	movhi	r5,33044
81101ec4:	29535404 	addi	r5,r5,19792
81101ec8:	1009883a 	mov	r4,r2
81101ecc:	11139c00 	call	811139c0 <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101ed0:	e0bfe517 	ldw	r2,-108(fp)
81101ed4:	10000326 	beq	r2,zero,81101ee4 <bDdr2MemoryReadTest+0x3d4>
81101ed8:	e0ffed17 	ldw	r3,-76(fp)
81101edc:	e0bfe717 	ldw	r2,-100(fp)
81101ee0:	18bf9936 	bltu	r3,r2,81101d48 <__reset+0xfb0e1d48>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101ee4:	00a04534 	movhi	r2,33044
81101ee8:	10935404 	addi	r2,r2,19792
81101eec:	00c00284 	movi	r3,10
81101ef0:	10c00005 	stb	r3,0(r2)
81101ef4:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101ef8:	d0a05017 	ldw	r2,-32448(gp)
81101efc:	01604534 	movhi	r5,33044
81101f00:	29535404 	addi	r5,r5,19792
81101f04:	1009883a 	mov	r4,r2
81101f08:	11139c00 	call	811139c0 <fprintf>
81101f0c:	d0e07317 	ldw	r3,-32308(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101f10:	e0bff117 	ldw	r2,-60(fp)
81101f14:	1885c83a 	sub	r2,r3,r2
81101f18:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101f1c:	e0bfe517 	ldw	r2,-108(fp)
81101f20:	10001e26 	beq	r2,zero,81101f9c <bDdr2MemoryReadTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101f24:	e13ff017 	ldw	r4,-64(fp)
81101f28:	1112bfc0 	call	81112bfc <__floatsisf>
81101f2c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101f30:	d0a07217 	ldw	r2,-32312(gp)
81101f34:	1009883a 	mov	r4,r2
81101f38:	1112d280 	call	81112d28 <__floatunsisf>
81101f3c:	1007883a 	mov	r3,r2
81101f40:	180b883a 	mov	r5,r3
81101f44:	8009883a 	mov	r4,r16
81101f48:	11123b00 	call	811123b0 <__divsf3>
81101f4c:	1007883a 	mov	r3,r2
81101f50:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101f54:	1009883a 	mov	r4,r2
81101f58:	11135400 	call	81113540 <__extendsfdf2>
81101f5c:	1009883a 	mov	r4,r2
81101f60:	180b883a 	mov	r5,r3
81101f64:	d9400015 	stw	r5,0(sp)
81101f68:	200f883a 	mov	r7,r4
81101f6c:	e1bfe717 	ldw	r6,-100(fp)
81101f70:	01604534 	movhi	r5,33044
81101f74:	297c2504 	addi	r5,r5,-3948
81101f78:	01204534 	movhi	r4,33044
81101f7c:	21135404 	addi	r4,r4,19792
81101f80:	11153700 	call	81115370 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101f84:	d0a05017 	ldw	r2,-32448(gp)
81101f88:	01604534 	movhi	r5,33044
81101f8c:	29535404 	addi	r5,r5,19792
81101f90:	1009883a 	mov	r4,r2
81101f94:	11139c00 	call	811139c0 <fprintf>
81101f98:	00000f06 	br	81101fd8 <bDdr2MemoryReadTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101f9c:	00e04534 	movhi	r3,33044
81101fa0:	18d35404 	addi	r3,r3,19792
81101fa4:	00a04534 	movhi	r2,33044
81101fa8:	10bc3104 	addi	r2,r2,-3900
81101fac:	1009883a 	mov	r4,r2
81101fb0:	00800544 	movi	r2,21
81101fb4:	100d883a 	mov	r6,r2
81101fb8:	200b883a 	mov	r5,r4
81101fbc:	1809883a 	mov	r4,r3
81101fc0:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
81101fc4:	d0a05017 	ldw	r2,-32448(gp)
81101fc8:	01604534 	movhi	r5,33044
81101fcc:	29535404 	addi	r5,r5,19792
81101fd0:	1009883a 	mov	r4,r2
81101fd4:	11139c00 	call	811139c0 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101fd8:	00a04534 	movhi	r2,33044
81101fdc:	10935404 	addi	r2,r2,19792
81101fe0:	00c00284 	movi	r3,10
81101fe4:	10c00005 	stb	r3,0(r2)
81101fe8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101fec:	d0a05017 	ldw	r2,-32448(gp)
81101ff0:	01604534 	movhi	r5,33044
81101ff4:	29535404 	addi	r5,r5,19792
81101ff8:	1009883a 	mov	r4,r2
81101ffc:	11139c00 	call	811139c0 <fprintf>
#endif

	return bSuccess;
81102000:	e0bfe517 	ldw	r2,-108(fp)
}
81102004:	e6fffe04 	addi	sp,fp,-8
81102008:	dfc00317 	ldw	ra,12(sp)
8110200c:	df000217 	ldw	fp,8(sp)
81102010:	dc400117 	ldw	r17,4(sp)
81102014:	dc000017 	ldw	r16,0(sp)
81102018:	dec00404 	addi	sp,sp,16
8110201c:	f800283a 	ret

81102020 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102020:	deffec04 	addi	sp,sp,-80
81102024:	de00012e 	bgeu	sp,et,8110202c <bDdr2MemoryRandomWriteTest+0xc>
81102028:	003b68fa 	trap	3
8110202c:	dfc01315 	stw	ra,76(sp)
81102030:	df001215 	stw	fp,72(sp)
81102034:	dcc01115 	stw	r19,68(sp)
81102038:	dc801015 	stw	r18,64(sp)
8110203c:	dc400f15 	stw	r17,60(sp)
81102040:	dc000e15 	stw	r16,56(sp)
81102044:	df001204 	addi	fp,sp,72
81102048:	2005883a 	mov	r2,r4
8110204c:	e17ffa15 	stw	r5,-24(fp)
81102050:	e1bffb15 	stw	r6,-20(fp)
81102054:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81102058:	00e04534 	movhi	r3,33044
8110205c:	18d35404 	addi	r3,r3,19792
81102060:	00a04534 	movhi	r2,33044
81102064:	10bc3704 	addi	r2,r2,-3876
81102068:	1009883a 	mov	r4,r2
8110206c:	00800bc4 	movi	r2,47
81102070:	100d883a 	mov	r6,r2
81102074:	200b883a 	mov	r5,r4
81102078:	1809883a 	mov	r4,r3
8110207c:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
81102080:	d0a05017 	ldw	r2,-32448(gp)
81102084:	01604534 	movhi	r5,33044
81102088:	29535404 	addi	r5,r5,19792
8110208c:	1009883a 	mov	r4,r2
81102090:	11139c00 	call	811139c0 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102094:	00800044 	movi	r2,1
81102098:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
8110209c:	e0bff903 	ldbu	r2,-28(fp)
811020a0:	10c00060 	cmpeqi	r3,r2,1
811020a4:	1800031e 	bne	r3,zero,811020b4 <bDdr2MemoryRandomWriteTest+0x94>
811020a8:	108000a0 	cmpeqi	r2,r2,2
811020ac:	1000081e 	bne	r2,zero,811020d0 <bDdr2MemoryRandomWriteTest+0xb0>
811020b0:	00000e06 	br	811020ec <bDdr2MemoryRandomWriteTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811020b4:	e0bff903 	ldbu	r2,-28(fp)
811020b8:	1009883a 	mov	r4,r2
811020bc:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811020c0:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811020c4:	00a00034 	movhi	r2,32768
811020c8:	e0bff015 	stw	r2,-64(fp)
		break;
811020cc:	00001906 	br	81102134 <bDdr2MemoryRandomWriteTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811020d0:	e0bff903 	ldbu	r2,-28(fp)
811020d4:	1009883a 	mov	r4,r2
811020d8:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811020dc:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811020e0:	00a00034 	movhi	r2,32768
811020e4:	e0bff015 	stw	r2,-64(fp)
		break;
811020e8:	00001206 	br	81102134 <bDdr2MemoryRandomWriteTest+0x114>
	default:
		bSuccess = FALSE;
811020ec:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811020f0:	00e04534 	movhi	r3,33044
811020f4:	18d35404 	addi	r3,r3,19792
811020f8:	00a04534 	movhi	r2,33044
811020fc:	10b9e804 	addi	r2,r2,-6240
81102100:	1009883a 	mov	r4,r2
81102104:	00800bc4 	movi	r2,47
81102108:	100d883a 	mov	r6,r2
8110210c:	200b883a 	mov	r5,r4
81102110:	1809883a 	mov	r4,r3
81102114:	1114a700 	call	81114a70 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102118:	d0a05017 	ldw	r2,-32448(gp)
8110211c:	01604534 	movhi	r5,33044
81102120:	29535404 	addi	r5,r5,19792
81102124:	1009883a 	mov	r4,r2
81102128:	11139c00 	call	811139c0 <fprintf>
		;
#endif
		return bSuccess;
8110212c:	e0bff417 	ldw	r2,-48(fp)
81102130:	0000ce06 	br	8110246c <bDdr2MemoryRandomWriteTest+0x44c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102134:	e0bff017 	ldw	r2,-64(fp)
81102138:	1004d53a 	srli	r2,r2,20
8110213c:	100d883a 	mov	r6,r2
81102140:	01604534 	movhi	r5,33044
81102144:	297be104 	addi	r5,r5,-4220
81102148:	01204534 	movhi	r4,33044
8110214c:	21135404 	addi	r4,r4,19792
81102150:	11153700 	call	81115370 <sprintf>
	debug(fp, cDebugBuffer);
81102154:	d0a05017 	ldw	r2,-32448(gp)
81102158:	01604534 	movhi	r5,33044
8110215c:	29535404 	addi	r5,r5,19792
81102160:	1009883a 	mov	r4,r2
81102164:	11139c00 	call	811139c0 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102168:	d0a07317 	ldw	r2,-32308(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
8110216c:	d0a03715 	stw	r2,-32548(gp)
	uliCurrentState = uliInitialState;
81102170:	d0a03717 	ldw	r2,-32548(gp)
81102174:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102178:	e0ffef17 	ldw	r3,-68(fp)
8110217c:	e0bff017 	ldw	r2,-64(fp)
81102180:	1885883a 	add	r2,r3,r2
81102184:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102188:	e0fff017 	ldw	r3,-64(fp)
8110218c:	00b33374 	movhi	r2,52429
81102190:	10b33344 	addi	r2,r2,-13107
81102194:	1888383a 	mulxuu	r4,r3,r2
81102198:	1885383a 	mul	r2,r3,r2
8110219c:	1025883a 	mov	r18,r2
811021a0:	2027883a 	mov	r19,r4
811021a4:	9806d13a 	srli	r3,r19,4
811021a8:	e0bfef17 	ldw	r2,-68(fp)
811021ac:	1885883a 	add	r2,r3,r2
811021b0:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
811021b4:	00800144 	movi	r2,5
811021b8:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
811021bc:	00e04534 	movhi	r3,33044
811021c0:	18d35404 	addi	r3,r3,19792
811021c4:	00a04534 	movhi	r2,33044
811021c8:	10bc4304 	addi	r2,r2,-3828
811021cc:	1009883a 	mov	r4,r2
811021d0:	00800584 	movi	r2,22
811021d4:	100d883a 	mov	r6,r2
811021d8:	200b883a 	mov	r5,r4
811021dc:	1809883a 	mov	r4,r3
811021e0:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
811021e4:	d0a05017 	ldw	r2,-32448(gp)
811021e8:	01604534 	movhi	r5,33044
811021ec:	29535404 	addi	r5,r5,19792
811021f0:	1009883a 	mov	r4,r2
811021f4:	11139c00 	call	811139c0 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
811021f8:	e0bffa17 	ldw	r2,-24(fp)
811021fc:	10800058 	cmpnei	r2,r2,1
81102200:	10000a1e 	bne	r2,zero,8110222c <bDdr2MemoryRandomWriteTest+0x20c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102204:	01604534 	movhi	r5,33044
81102208:	297c4904 	addi	r5,r5,-3804
8110220c:	01204534 	movhi	r4,33044
81102210:	21135404 	addi	r4,r4,19792
81102214:	11153700 	call	81115370 <sprintf>
		debug(fp, cDebugBuffer);
81102218:	d0a05017 	ldw	r2,-32448(gp)
8110221c:	01604534 	movhi	r5,33044
81102220:	29535404 	addi	r5,r5,19792
81102224:	1009883a 	mov	r4,r2
81102228:	11139c00 	call	811139c0 <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
8110222c:	e03ff615 	stw	zero,-40(fp)
81102230:	d0a07317 	ldw	r2,-32308(gp)

	TimeStart = alt_nticks();
81102234:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102238:	e0bfef17 	ldw	r2,-68(fp)
8110223c:	e0bff115 	stw	r2,-60(fp)
81102240:	00002c06 	br	811022f4 <bDdr2MemoryRandomWriteTest+0x2d4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
81102244:	e0bff804 	addi	r2,fp,-32
81102248:	1009883a 	mov	r4,r2
8110224c:	110292c0 	call	8110292c <uliXorshift32>
81102250:	1007883a 	mov	r3,r2
81102254:	e0bff117 	ldw	r2,-60(fp)
81102258:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
8110225c:	e0bffa17 	ldw	r2,-24(fp)
81102260:	10800060 	cmpeqi	r2,r2,1
81102264:	1009883a 	mov	r4,r2
81102268:	e0bff117 	ldw	r2,-60(fp)
8110226c:	e0fff217 	ldw	r3,-56(fp)
81102270:	1885803a 	cmpltu	r2,r3,r2
81102274:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
81102278:	10803fcc 	andi	r2,r2,255
8110227c:	10001a26 	beq	r2,zero,811022e8 <bDdr2MemoryRandomWriteTest+0x2c8>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102280:	e0bff303 	ldbu	r2,-52(fp)
81102284:	100d883a 	mov	r6,r2
81102288:	01604534 	movhi	r5,33044
8110228c:	297c4b04 	addi	r5,r5,-3796
81102290:	01204534 	movhi	r4,33044
81102294:	21135404 	addi	r4,r4,19792
81102298:	11153700 	call	81115370 <sprintf>
			debug(fp, cDebugBuffer);
8110229c:	d0a05017 	ldw	r2,-32448(gp)
811022a0:	01604534 	movhi	r5,33044
811022a4:	29535404 	addi	r5,r5,19792
811022a8:	1009883a 	mov	r4,r2
811022ac:	11139c00 	call	811139c0 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811022b0:	e0fff017 	ldw	r3,-64(fp)
811022b4:	00b33374 	movhi	r2,52429
811022b8:	10b33344 	addi	r2,r2,-13107
811022bc:	1888383a 	mulxuu	r4,r3,r2
811022c0:	1885383a 	mul	r2,r3,r2
811022c4:	1021883a 	mov	r16,r2
811022c8:	2023883a 	mov	r17,r4
811022cc:	8804d13a 	srli	r2,r17,4
811022d0:	e0fff217 	ldw	r3,-56(fp)
811022d4:	1885883a 	add	r2,r3,r2
811022d8:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
811022dc:	e0bff303 	ldbu	r2,-52(fp)
811022e0:	10800144 	addi	r2,r2,5
811022e4:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
811022e8:	e0bff117 	ldw	r2,-60(fp)
811022ec:	10800104 	addi	r2,r2,4
811022f0:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
811022f4:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
811022f8:	e0bff517 	ldw	r2,-44(fp)
811022fc:	18bfd136 	bltu	r3,r2,81102244 <__reset+0xfb0e2244>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102300:	11294900 	call	81129490 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102304:	e0bffa17 	ldw	r2,-24(fp)
81102308:	10800058 	cmpnei	r2,r2,1
8110230c:	10000a1e 	bne	r2,zero,81102338 <bDdr2MemoryRandomWriteTest+0x318>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
81102310:	01604534 	movhi	r5,33044
81102314:	297c4e04 	addi	r5,r5,-3784
81102318:	01204534 	movhi	r4,33044
8110231c:	21135404 	addi	r4,r4,19792
81102320:	11153700 	call	81115370 <sprintf>
		debug(fp, cDebugBuffer);
81102324:	d0a05017 	ldw	r2,-32448(gp)
81102328:	01604534 	movhi	r5,33044
8110232c:	29535404 	addi	r5,r5,19792
81102330:	1009883a 	mov	r4,r2
81102334:	11139c00 	call	811139c0 <fprintf>
#endif
	}

	if (bSuccess) {
81102338:	e0bff417 	ldw	r2,-48(fp)
8110233c:	10003126 	beq	r2,zero,81102404 <bDdr2MemoryRandomWriteTest+0x3e4>
		if (bTime == TRUE) {
81102340:	e0bffb17 	ldw	r2,-20(fp)
81102344:	10800058 	cmpnei	r2,r2,1
81102348:	1000221e 	bne	r2,zero,811023d4 <bDdr2MemoryRandomWriteTest+0x3b4>
8110234c:	d0e07317 	ldw	r3,-32308(gp)
			TimeElapsed = alt_nticks() - TimeStart;
81102350:	e0bff717 	ldw	r2,-36(fp)
81102354:	1885c83a 	sub	r2,r3,r2
81102358:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
8110235c:	e13ff617 	ldw	r4,-40(fp)
81102360:	1112bfc0 	call	81112bfc <__floatsisf>
81102364:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102368:	d0a07217 	ldw	r2,-32312(gp)
8110236c:	1009883a 	mov	r4,r2
81102370:	1112d280 	call	81112d28 <__floatunsisf>
81102374:	1007883a 	mov	r3,r2
81102378:	180b883a 	mov	r5,r3
8110237c:	8009883a 	mov	r4,r16
81102380:	11123b00 	call	811123b0 <__divsf3>
81102384:	1007883a 	mov	r3,r2
81102388:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
8110238c:	1009883a 	mov	r4,r2
81102390:	11135400 	call	81113540 <__extendsfdf2>
81102394:	1009883a 	mov	r4,r2
81102398:	180b883a 	mov	r5,r3
8110239c:	d9400015 	stw	r5,0(sp)
811023a0:	200f883a 	mov	r7,r4
811023a4:	e1bff017 	ldw	r6,-64(fp)
811023a8:	01604534 	movhi	r5,33044
811023ac:	297c5104 	addi	r5,r5,-3772
811023b0:	01204534 	movhi	r4,33044
811023b4:	21135404 	addi	r4,r4,19792
811023b8:	11153700 	call	81115370 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811023bc:	d0a05017 	ldw	r2,-32448(gp)
811023c0:	01604534 	movhi	r5,33044
811023c4:	29535404 	addi	r5,r5,19792
811023c8:	1009883a 	mov	r4,r2
811023cc:	11139c00 	call	811139c0 <fprintf>
811023d0:	00001b06 	br	81102440 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
811023d4:	e1bff017 	ldw	r6,-64(fp)
811023d8:	01604534 	movhi	r5,33044
811023dc:	297c5d04 	addi	r5,r5,-3724
811023e0:	01204534 	movhi	r4,33044
811023e4:	21135404 	addi	r4,r4,19792
811023e8:	11153700 	call	81115370 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
811023ec:	d0a05017 	ldw	r2,-32448(gp)
811023f0:	01604534 	movhi	r5,33044
811023f4:	29535404 	addi	r5,r5,19792
811023f8:	1009883a 	mov	r4,r2
811023fc:	11139c00 	call	811139c0 <fprintf>
81102400:	00000f06 	br	81102440 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102404:	00e04534 	movhi	r3,33044
81102408:	18d35404 	addi	r3,r3,19792
8110240c:	00a04534 	movhi	r2,33044
81102410:	10bbfa04 	addi	r2,r2,-4120
81102414:	1009883a 	mov	r4,r2
81102418:	00800584 	movi	r2,22
8110241c:	100d883a 	mov	r6,r2
81102420:	200b883a 	mov	r5,r4
81102424:	1809883a 	mov	r4,r3
81102428:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
8110242c:	d0a05017 	ldw	r2,-32448(gp)
81102430:	01604534 	movhi	r5,33044
81102434:	29535404 	addi	r5,r5,19792
81102438:	1009883a 	mov	r4,r2
8110243c:	11139c00 	call	811139c0 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81102440:	00a04534 	movhi	r2,33044
81102444:	10935404 	addi	r2,r2,19792
81102448:	00c00284 	movi	r3,10
8110244c:	10c00005 	stb	r3,0(r2)
81102450:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102454:	d0a05017 	ldw	r2,-32448(gp)
81102458:	01604534 	movhi	r5,33044
8110245c:	29535404 	addi	r5,r5,19792
81102460:	1009883a 	mov	r4,r2
81102464:	11139c00 	call	811139c0 <fprintf>
#endif

	return bSuccess;
81102468:	e0bff417 	ldw	r2,-48(fp)
}
8110246c:	e6fffc04 	addi	sp,fp,-16
81102470:	dfc00517 	ldw	ra,20(sp)
81102474:	df000417 	ldw	fp,16(sp)
81102478:	dcc00317 	ldw	r19,12(sp)
8110247c:	dc800217 	ldw	r18,8(sp)
81102480:	dc400117 	ldw	r17,4(sp)
81102484:	dc000017 	ldw	r16,0(sp)
81102488:	dec00604 	addi	sp,sp,24
8110248c:	f800283a 	ret

81102490 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102490:	deffec04 	addi	sp,sp,-80
81102494:	de00012e 	bgeu	sp,et,8110249c <bDdr2MemoryRandomReadTest+0xc>
81102498:	003b68fa 	trap	3
8110249c:	dfc01315 	stw	ra,76(sp)
811024a0:	df001215 	stw	fp,72(sp)
811024a4:	dcc01115 	stw	r19,68(sp)
811024a8:	dc801015 	stw	r18,64(sp)
811024ac:	dc400f15 	stw	r17,60(sp)
811024b0:	dc000e15 	stw	r16,56(sp)
811024b4:	df001204 	addi	fp,sp,72
811024b8:	2005883a 	mov	r2,r4
811024bc:	e17ffa15 	stw	r5,-24(fp)
811024c0:	e1bffb15 	stw	r6,-20(fp)
811024c4:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
811024c8:	00e04534 	movhi	r3,33044
811024cc:	18d35404 	addi	r3,r3,19792
811024d0:	00a04534 	movhi	r2,33044
811024d4:	10bc6704 	addi	r2,r2,-3684
811024d8:	1009883a 	mov	r4,r2
811024dc:	00800b84 	movi	r2,46
811024e0:	100d883a 	mov	r6,r2
811024e4:	200b883a 	mov	r5,r4
811024e8:	1809883a 	mov	r4,r3
811024ec:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
811024f0:	d0a05017 	ldw	r2,-32448(gp)
811024f4:	01604534 	movhi	r5,33044
811024f8:	29535404 	addi	r5,r5,19792
811024fc:	1009883a 	mov	r4,r2
81102500:	11139c00 	call	811139c0 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102504:	00800044 	movi	r2,1
81102508:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
8110250c:	e0bff903 	ldbu	r2,-28(fp)
81102510:	10c00060 	cmpeqi	r3,r2,1
81102514:	1800031e 	bne	r3,zero,81102524 <bDdr2MemoryRandomReadTest+0x94>
81102518:	108000a0 	cmpeqi	r2,r2,2
8110251c:	1000081e 	bne	r2,zero,81102540 <bDdr2MemoryRandomReadTest+0xb0>
81102520:	00000e06 	br	8110255c <bDdr2MemoryRandomReadTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102524:	e0bff903 	ldbu	r2,-28(fp)
81102528:	1009883a 	mov	r4,r2
8110252c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102530:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102534:	00a00034 	movhi	r2,32768
81102538:	e0bff115 	stw	r2,-60(fp)
		break;
8110253c:	00001906 	br	811025a4 <bDdr2MemoryRandomReadTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102540:	e0bff903 	ldbu	r2,-28(fp)
81102544:	1009883a 	mov	r4,r2
81102548:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110254c:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102550:	00a00034 	movhi	r2,32768
81102554:	e0bff115 	stw	r2,-60(fp)
		break;
81102558:	00001206 	br	811025a4 <bDdr2MemoryRandomReadTest+0x114>
	default:
		bSuccess = FALSE;
8110255c:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102560:	00e04534 	movhi	r3,33044
81102564:	18d35404 	addi	r3,r3,19792
81102568:	00a04534 	movhi	r2,33044
8110256c:	10b9e804 	addi	r2,r2,-6240
81102570:	1009883a 	mov	r4,r2
81102574:	00800bc4 	movi	r2,47
81102578:	100d883a 	mov	r6,r2
8110257c:	200b883a 	mov	r5,r4
81102580:	1809883a 	mov	r4,r3
81102584:	1114a700 	call	81114a70 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102588:	d0a05017 	ldw	r2,-32448(gp)
8110258c:	01604534 	movhi	r5,33044
81102590:	29535404 	addi	r5,r5,19792
81102594:	1009883a 	mov	r4,r2
81102598:	11139c00 	call	811139c0 <fprintf>
		;
#endif
		return bSuccess;
8110259c:	e0bfef17 	ldw	r2,-68(fp)
811025a0:	0000d906 	br	81102908 <bDdr2MemoryRandomReadTest+0x478>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811025a4:	e0bff117 	ldw	r2,-60(fp)
811025a8:	1004d53a 	srli	r2,r2,20
811025ac:	100d883a 	mov	r6,r2
811025b0:	01604534 	movhi	r5,33044
811025b4:	297be104 	addi	r5,r5,-4220
811025b8:	01204534 	movhi	r4,33044
811025bc:	21135404 	addi	r4,r4,19792
811025c0:	11153700 	call	81115370 <sprintf>
	debug(fp, cDebugBuffer);
811025c4:	d0a05017 	ldw	r2,-32448(gp)
811025c8:	01604534 	movhi	r5,33044
811025cc:	29535404 	addi	r5,r5,19792
811025d0:	1009883a 	mov	r4,r2
811025d4:	11139c00 	call	811139c0 <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
811025d8:	d0a03717 	ldw	r2,-32548(gp)
811025dc:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
811025e0:	e0fff017 	ldw	r3,-64(fp)
811025e4:	e0bff117 	ldw	r2,-60(fp)
811025e8:	1885883a 	add	r2,r3,r2
811025ec:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
811025f0:	e0fff117 	ldw	r3,-60(fp)
811025f4:	00b33374 	movhi	r2,52429
811025f8:	10b33344 	addi	r2,r2,-13107
811025fc:	1888383a 	mulxuu	r4,r3,r2
81102600:	1885383a 	mul	r2,r3,r2
81102604:	1025883a 	mov	r18,r2
81102608:	2027883a 	mov	r19,r4
8110260c:	9806d13a 	srli	r3,r19,4
81102610:	e0bff017 	ldw	r2,-64(fp)
81102614:	1885883a 	add	r2,r3,r2
81102618:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
8110261c:	00800144 	movi	r2,5
81102620:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
81102624:	00e04534 	movhi	r3,33044
81102628:	18d35404 	addi	r3,r3,19792
8110262c:	00a04534 	movhi	r2,33044
81102630:	10bc7304 	addi	r2,r2,-3636
81102634:	1009883a 	mov	r4,r2
81102638:	00800604 	movi	r2,24
8110263c:	100d883a 	mov	r6,r2
81102640:	200b883a 	mov	r5,r4
81102644:	1809883a 	mov	r4,r3
81102648:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
8110264c:	d0a05017 	ldw	r2,-32448(gp)
81102650:	01604534 	movhi	r5,33044
81102654:	29535404 	addi	r5,r5,19792
81102658:	1009883a 	mov	r4,r2
8110265c:	11139c00 	call	811139c0 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102660:	e0bffa17 	ldw	r2,-24(fp)
81102664:	10800058 	cmpnei	r2,r2,1
81102668:	10000a1e 	bne	r2,zero,81102694 <bDdr2MemoryRandomReadTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
8110266c:	01604534 	movhi	r5,33044
81102670:	297c4904 	addi	r5,r5,-3804
81102674:	01204534 	movhi	r4,33044
81102678:	21135404 	addi	r4,r4,19792
8110267c:	11153700 	call	81115370 <sprintf>
		debug(fp, cDebugBuffer);
81102680:	d0a05017 	ldw	r2,-32448(gp)
81102684:	01604534 	movhi	r5,33044
81102688:	29535404 	addi	r5,r5,19792
8110268c:	1009883a 	mov	r4,r2
81102690:	11139c00 	call	811139c0 <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
81102694:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102698:	d0a07317 	ldw	r2,-32308(gp)

	TimeStart = alt_nticks();
8110269c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
811026a0:	e0bff017 	ldw	r2,-64(fp)
811026a4:	e0bff215 	stw	r2,-56(fp)
811026a8:	00003a06 	br	81102794 <bDdr2MemoryRandomReadTest+0x304>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
811026ac:	e0bff804 	addi	r2,fp,-32
811026b0:	1009883a 	mov	r4,r2
811026b4:	110292c0 	call	8110292c <uliXorshift32>
811026b8:	1007883a 	mov	r3,r2
811026bc:	e0bff217 	ldw	r2,-56(fp)
811026c0:	10800017 	ldw	r2,0(r2)
811026c4:	18801026 	beq	r3,r2,81102708 <bDdr2MemoryRandomReadTest+0x278>
			bSuccess = FALSE;
811026c8:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
811026cc:	e0bffa17 	ldw	r2,-24(fp)
811026d0:	10800058 	cmpnei	r2,r2,1
811026d4:	10000c1e 	bne	r2,zero,81102708 <bDdr2MemoryRandomReadTest+0x278>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
811026d8:	e0bff217 	ldw	r2,-56(fp)
811026dc:	100d883a 	mov	r6,r2
811026e0:	01604534 	movhi	r5,33044
811026e4:	297c7904 	addi	r5,r5,-3612
811026e8:	01204534 	movhi	r4,33044
811026ec:	21135404 	addi	r4,r4,19792
811026f0:	11153700 	call	81115370 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
811026f4:	d0a05017 	ldw	r2,-32448(gp)
811026f8:	01604534 	movhi	r5,33044
811026fc:	29535404 	addi	r5,r5,19792
81102700:	1009883a 	mov	r4,r2
81102704:	11139c00 	call	811139c0 <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102708:	e0bffa17 	ldw	r2,-24(fp)
8110270c:	10800058 	cmpnei	r2,r2,1
81102710:	10001d1e 	bne	r2,zero,81102788 <bDdr2MemoryRandomReadTest+0x2f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
81102714:	e0bff217 	ldw	r2,-56(fp)
81102718:	e0fff317 	ldw	r3,-52(fp)
8110271c:	18801a2e 	bgeu	r3,r2,81102788 <bDdr2MemoryRandomReadTest+0x2f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102720:	e0bff403 	ldbu	r2,-48(fp)
81102724:	100d883a 	mov	r6,r2
81102728:	01604534 	movhi	r5,33044
8110272c:	297c4b04 	addi	r5,r5,-3796
81102730:	01204534 	movhi	r4,33044
81102734:	21135404 	addi	r4,r4,19792
81102738:	11153700 	call	81115370 <sprintf>
			debug(fp, cDebugBuffer);
8110273c:	d0a05017 	ldw	r2,-32448(gp)
81102740:	01604534 	movhi	r5,33044
81102744:	29535404 	addi	r5,r5,19792
81102748:	1009883a 	mov	r4,r2
8110274c:	11139c00 	call	811139c0 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102750:	e0fff117 	ldw	r3,-60(fp)
81102754:	00b33374 	movhi	r2,52429
81102758:	10b33344 	addi	r2,r2,-13107
8110275c:	1888383a 	mulxuu	r4,r3,r2
81102760:	1885383a 	mul	r2,r3,r2
81102764:	1021883a 	mov	r16,r2
81102768:	2023883a 	mov	r17,r4
8110276c:	8804d13a 	srli	r2,r17,4
81102770:	e0fff317 	ldw	r3,-52(fp)
81102774:	1885883a 	add	r2,r3,r2
81102778:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110277c:	e0bff403 	ldbu	r2,-48(fp)
81102780:	10800144 	addi	r2,r2,5
81102784:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81102788:	e0bff217 	ldw	r2,-56(fp)
8110278c:	10800104 	addi	r2,r2,4
81102790:	e0bff215 	stw	r2,-56(fp)
81102794:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81102798:	e0bff517 	ldw	r2,-44(fp)
8110279c:	18bfc336 	bltu	r3,r2,811026ac <__reset+0xfb0e26ac>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
811027a0:	e0bffa17 	ldw	r2,-24(fp)
811027a4:	10800058 	cmpnei	r2,r2,1
811027a8:	10000a1e 	bne	r2,zero,811027d4 <bDdr2MemoryRandomReadTest+0x344>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811027ac:	01604534 	movhi	r5,33044
811027b0:	297c4e04 	addi	r5,r5,-3784
811027b4:	01204534 	movhi	r4,33044
811027b8:	21135404 	addi	r4,r4,19792
811027bc:	11153700 	call	81115370 <sprintf>
		debug(fp, cDebugBuffer);
811027c0:	d0a05017 	ldw	r2,-32448(gp)
811027c4:	01604534 	movhi	r5,33044
811027c8:	29535404 	addi	r5,r5,19792
811027cc:	1009883a 	mov	r4,r2
811027d0:	11139c00 	call	811139c0 <fprintf>
#endif
	}

	if (bSuccess) {
811027d4:	e0bfef17 	ldw	r2,-68(fp)
811027d8:	10003126 	beq	r2,zero,811028a0 <bDdr2MemoryRandomReadTest+0x410>
		if (bTime == TRUE) {
811027dc:	e0bffb17 	ldw	r2,-20(fp)
811027e0:	10800058 	cmpnei	r2,r2,1
811027e4:	1000221e 	bne	r2,zero,81102870 <bDdr2MemoryRandomReadTest+0x3e0>
811027e8:	d0e07317 	ldw	r3,-32308(gp)
			TimeElapsed = alt_nticks() - TimeStart;
811027ec:	e0bff717 	ldw	r2,-36(fp)
811027f0:	1885c83a 	sub	r2,r3,r2
811027f4:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811027f8:	e13ff617 	ldw	r4,-40(fp)
811027fc:	1112bfc0 	call	81112bfc <__floatsisf>
81102800:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102804:	d0a07217 	ldw	r2,-32312(gp)
81102808:	1009883a 	mov	r4,r2
8110280c:	1112d280 	call	81112d28 <__floatunsisf>
81102810:	1007883a 	mov	r3,r2
81102814:	180b883a 	mov	r5,r3
81102818:	8009883a 	mov	r4,r16
8110281c:	11123b00 	call	811123b0 <__divsf3>
81102820:	1007883a 	mov	r3,r2
81102824:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
81102828:	1009883a 	mov	r4,r2
8110282c:	11135400 	call	81113540 <__extendsfdf2>
81102830:	1009883a 	mov	r4,r2
81102834:	180b883a 	mov	r5,r3
81102838:	d9400015 	stw	r5,0(sp)
8110283c:	200f883a 	mov	r7,r4
81102840:	e1bff117 	ldw	r6,-60(fp)
81102844:	01604534 	movhi	r5,33044
81102848:	297c8104 	addi	r5,r5,-3580
8110284c:	01204534 	movhi	r4,33044
81102850:	21135404 	addi	r4,r4,19792
81102854:	11153700 	call	81115370 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
81102858:	d0a05017 	ldw	r2,-32448(gp)
8110285c:	01604534 	movhi	r5,33044
81102860:	29535404 	addi	r5,r5,19792
81102864:	1009883a 	mov	r4,r2
81102868:	11139c00 	call	811139c0 <fprintf>
8110286c:	00001b06 	br	811028dc <bDdr2MemoryRandomReadTest+0x44c>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102870:	e1bff117 	ldw	r6,-60(fp)
81102874:	01604534 	movhi	r5,33044
81102878:	297c8d04 	addi	r5,r5,-3532
8110287c:	01204534 	movhi	r4,33044
81102880:	21135404 	addi	r4,r4,19792
81102884:	11153700 	call	81115370 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102888:	d0a05017 	ldw	r2,-32448(gp)
8110288c:	01604534 	movhi	r5,33044
81102890:	29535404 	addi	r5,r5,19792
81102894:	1009883a 	mov	r4,r2
81102898:	11139c00 	call	811139c0 <fprintf>
8110289c:	00000f06 	br	811028dc <bDdr2MemoryRandomReadTest+0x44c>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
811028a0:	00e04534 	movhi	r3,33044
811028a4:	18d35404 	addi	r3,r3,19792
811028a8:	00a04534 	movhi	r2,33044
811028ac:	10bc3104 	addi	r2,r2,-3900
811028b0:	1009883a 	mov	r4,r2
811028b4:	00800544 	movi	r2,21
811028b8:	100d883a 	mov	r6,r2
811028bc:	200b883a 	mov	r5,r4
811028c0:	1809883a 	mov	r4,r3
811028c4:	1114a700 	call	81114a70 <memcpy>
		debug(fp, cDebugBuffer);
811028c8:	d0a05017 	ldw	r2,-32448(gp)
811028cc:	01604534 	movhi	r5,33044
811028d0:	29535404 	addi	r5,r5,19792
811028d4:	1009883a 	mov	r4,r2
811028d8:	11139c00 	call	811139c0 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811028dc:	00a04534 	movhi	r2,33044
811028e0:	10935404 	addi	r2,r2,19792
811028e4:	00c00284 	movi	r3,10
811028e8:	10c00005 	stb	r3,0(r2)
811028ec:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811028f0:	d0a05017 	ldw	r2,-32448(gp)
811028f4:	01604534 	movhi	r5,33044
811028f8:	29535404 	addi	r5,r5,19792
811028fc:	1009883a 	mov	r4,r2
81102900:	11139c00 	call	811139c0 <fprintf>
#endif

	return bSuccess;
81102904:	e0bfef17 	ldw	r2,-68(fp)
}
81102908:	e6fffc04 	addi	sp,fp,-16
8110290c:	dfc00517 	ldw	ra,20(sp)
81102910:	df000417 	ldw	fp,16(sp)
81102914:	dcc00317 	ldw	r19,12(sp)
81102918:	dc800217 	ldw	r18,8(sp)
8110291c:	dc400117 	ldw	r17,4(sp)
81102920:	dc000017 	ldw	r16,0(sp)
81102924:	dec00604 	addi	sp,sp,24
81102928:	f800283a 	ret

8110292c <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
8110292c:	defffd04 	addi	sp,sp,-12
81102930:	de00012e 	bgeu	sp,et,81102938 <uliXorshift32+0xc>
81102934:	003b68fa 	trap	3
81102938:	df000215 	stw	fp,8(sp)
8110293c:	df000204 	addi	fp,sp,8
81102940:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
81102944:	e0bfff17 	ldw	r2,-4(fp)
81102948:	10800017 	ldw	r2,0(r2)
8110294c:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
81102950:	e0bffe17 	ldw	r2,-8(fp)
81102954:	1004937a 	slli	r2,r2,13
81102958:	e0fffe17 	ldw	r3,-8(fp)
8110295c:	1884f03a 	xor	r2,r3,r2
81102960:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
81102964:	e0bffe17 	ldw	r2,-8(fp)
81102968:	1004d47a 	srli	r2,r2,17
8110296c:	e0fffe17 	ldw	r3,-8(fp)
81102970:	1884f03a 	xor	r2,r3,r2
81102974:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102978:	e0bffe17 	ldw	r2,-8(fp)
8110297c:	1004917a 	slli	r2,r2,5
81102980:	e0fffe17 	ldw	r3,-8(fp)
81102984:	1884f03a 	xor	r2,r3,r2
81102988:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
8110298c:	e0bfff17 	ldw	r2,-4(fp)
81102990:	e0fffe17 	ldw	r3,-8(fp)
81102994:	10c00015 	stw	r3,0(r2)

	return uliX;
81102998:	e0bffe17 	ldw	r2,-8(fp)
}
8110299c:	e037883a 	mov	sp,fp
811029a0:	df000017 	ldw	fp,0(sp)
811029a4:	dec00104 	addi	sp,sp,4
811029a8:	f800283a 	ret

811029ac <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
811029ac:	defffb04 	addi	sp,sp,-20
811029b0:	de00012e 	bgeu	sp,et,811029b8 <DMA_OPEN_DEVICE+0xc>
811029b4:	003b68fa 	trap	3
811029b8:	dfc00415 	stw	ra,16(sp)
811029bc:	df000315 	stw	fp,12(sp)
811029c0:	df000304 	addi	fp,sp,12
811029c4:	e13ffe15 	stw	r4,-8(fp)
811029c8:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811029cc:	00800044 	movi	r2,1
811029d0:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
811029d4:	e13fff17 	ldw	r4,-4(fp)
811029d8:	113ce140 	call	8113ce14 <alt_msgdma_open>
811029dc:	1007883a 	mov	r3,r2
811029e0:	e0bffe17 	ldw	r2,-8(fp)
811029e4:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
811029e8:	e0bffe17 	ldw	r2,-8(fp)
811029ec:	10800017 	ldw	r2,0(r2)
811029f0:	1000011e 	bne	r2,zero,811029f8 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
811029f4:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
811029f8:	e0bffd17 	ldw	r2,-12(fp)
}
811029fc:	e037883a 	mov	sp,fp
81102a00:	dfc00117 	ldw	ra,4(sp)
81102a04:	df000017 	ldw	fp,0(sp)
81102a08:	dec00204 	addi	sp,sp,8
81102a0c:	f800283a 	ret

81102a10 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
81102a10:	defffc04 	addi	sp,sp,-16
81102a14:	de00012e 	bgeu	sp,et,81102a1c <DMA_CONFIG+0xc>
81102a18:	003b68fa 	trap	3
81102a1c:	df000315 	stw	fp,12(sp)
81102a20:	df000304 	addi	fp,sp,12
81102a24:	e13ffe15 	stw	r4,-8(fp)
81102a28:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81102a2c:	00800044 	movi	r2,1
81102a30:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
81102a34:	e0bffe17 	ldw	r2,-8(fp)
81102a38:	10800317 	ldw	r2,12(r2)
81102a3c:	10800104 	addi	r2,r2,4
81102a40:	e0ffff17 	ldw	r3,-4(fp)
81102a44:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
81102a48:	e0bffd17 	ldw	r2,-12(fp)
}
81102a4c:	e037883a 	mov	sp,fp
81102a50:	df000017 	ldw	fp,0(sp)
81102a54:	dec00104 	addi	sp,sp,4
81102a58:	f800283a 	ret

81102a5c <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
81102a5c:	defffd04 	addi	sp,sp,-12
81102a60:	de00012e 	bgeu	sp,et,81102a68 <DMA_BUSY+0xc>
81102a64:	003b68fa 	trap	3
81102a68:	df000215 	stw	fp,8(sp)
81102a6c:	df000204 	addi	fp,sp,8
81102a70:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81102a74:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81102a78:	e0bfff17 	ldw	r2,-4(fp)
81102a7c:	10800317 	ldw	r2,12(r2)
81102a80:	10800037 	ldwio	r2,0(r2)
81102a84:	1080004c 	andi	r2,r2,1
81102a88:	10000226 	beq	r2,zero,81102a94 <DMA_BUSY+0x38>
    bBusy = TRUE;
81102a8c:	00800044 	movi	r2,1
81102a90:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81102a94:	e0bffe17 	ldw	r2,-8(fp)
}
81102a98:	e037883a 	mov	sp,fp
81102a9c:	df000017 	ldw	fp,0(sp)
81102aa0:	dec00104 	addi	sp,sp,4
81102aa4:	f800283a 	ret

81102aa8 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81102aa8:	defffd04 	addi	sp,sp,-12
81102aac:	de00012e 	bgeu	sp,et,81102ab4 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81102ab0:	003b68fa 	trap	3
81102ab4:	df000215 	stw	fp,8(sp)
81102ab8:	df000204 	addi	fp,sp,8
81102abc:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81102ac0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102ac4:	e0bfff17 	ldw	r2,-4(fp)
81102ac8:	10800317 	ldw	r2,12(r2)
81102acc:	10800037 	ldwio	r2,0(r2)
81102ad0:	1080010c 	andi	r2,r2,4
81102ad4:	10000226 	beq	r2,zero,81102ae0 <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81102ad8:	00800044 	movi	r2,1
81102adc:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81102ae0:	e0bffe17 	ldw	r2,-8(fp)
}
81102ae4:	e037883a 	mov	sp,fp
81102ae8:	df000017 	ldw	fp,0(sp)
81102aec:	dec00104 	addi	sp,sp,4
81102af0:	f800283a 	ret

81102af4 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102af4:	defffd04 	addi	sp,sp,-12
81102af8:	de00012e 	bgeu	sp,et,81102b00 <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81102afc:	003b68fa 	trap	3
81102b00:	df000215 	stw	fp,8(sp)
81102b04:	df000204 	addi	fp,sp,8
81102b08:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102b0c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102b10:	e0bfff17 	ldw	r2,-4(fp)
81102b14:	10800317 	ldw	r2,12(r2)
81102b18:	10800037 	ldwio	r2,0(r2)
81102b1c:	1080008c 	andi	r2,r2,2
81102b20:	10000226 	beq	r2,zero,81102b2c <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81102b24:	00800044 	movi	r2,1
81102b28:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102b2c:	e0bffe17 	ldw	r2,-8(fp)
}
81102b30:	e037883a 	mov	sp,fp
81102b34:	df000017 	ldw	fp,0(sp)
81102b38:	dec00104 	addi	sp,sp,4
81102b3c:	f800283a 	ret

81102b40 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102b40:	defffa04 	addi	sp,sp,-24
81102b44:	de00012e 	bgeu	sp,et,81102b4c <DMA_DISPATCHER_STOP+0xc>
81102b48:	003b68fa 	trap	3
81102b4c:	dfc00515 	stw	ra,20(sp)
81102b50:	df000415 	stw	fp,16(sp)
81102b54:	df000404 	addi	fp,sp,16
81102b58:	e13ffd15 	stw	r4,-12(fp)
81102b5c:	e17ffe15 	stw	r5,-8(fp)
81102b60:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102b64:	00800044 	movi	r2,1
81102b68:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81102b6c:	e0bffd17 	ldw	r2,-12(fp)
81102b70:	10800317 	ldw	r2,12(r2)
81102b74:	10800104 	addi	r2,r2,4
81102b78:	00c00044 	movi	r3,1
81102b7c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102b80:	e0bffe17 	ldw	r2,-8(fp)
81102b84:	10800058 	cmpnei	r2,r2,1
81102b88:	10000e1e 	bne	r2,zero,81102bc4 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b8c:	00000706 	br	81102bac <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b90:	e0bfff17 	ldw	r2,-4(fp)
81102b94:	1000031e 	bne	r2,zero,81102ba4 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81102b98:	01000044 	movi	r4,1
81102b9c:	112acf80 	call	8112acf8 <usleep>
81102ba0:	00000206 	br	81102bac <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102ba4:	e13fff17 	ldw	r4,-4(fp)
81102ba8:	112acf80 	call	8112acf8 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102bac:	e0bffd17 	ldw	r2,-12(fp)
81102bb0:	10800317 	ldw	r2,12(r2)
81102bb4:	10800037 	ldwio	r2,0(r2)
81102bb8:	1080080c 	andi	r2,r2,32
81102bbc:	103ff41e 	bne	r2,zero,81102b90 <__reset+0xfb0e2b90>
81102bc0:	00000206 	br	81102bcc <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102bc4:	e0bffc17 	ldw	r2,-16(fp)
81102bc8:	00000106 	br	81102bd0 <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81102bcc:	e0bffc17 	ldw	r2,-16(fp)
}
81102bd0:	e037883a 	mov	sp,fp
81102bd4:	dfc00117 	ldw	ra,4(sp)
81102bd8:	df000017 	ldw	fp,0(sp)
81102bdc:	dec00204 	addi	sp,sp,8
81102be0:	f800283a 	ret

81102be4 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102be4:	defffa04 	addi	sp,sp,-24
81102be8:	de00012e 	bgeu	sp,et,81102bf0 <DMA_DISPATCHER_RESET+0xc>
81102bec:	003b68fa 	trap	3
81102bf0:	dfc00515 	stw	ra,20(sp)
81102bf4:	df000415 	stw	fp,16(sp)
81102bf8:	df000404 	addi	fp,sp,16
81102bfc:	e13ffd15 	stw	r4,-12(fp)
81102c00:	e17ffe15 	stw	r5,-8(fp)
81102c04:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102c08:	00800044 	movi	r2,1
81102c0c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102c10:	e0bffd17 	ldw	r2,-12(fp)
81102c14:	10800317 	ldw	r2,12(r2)
81102c18:	10800104 	addi	r2,r2,4
81102c1c:	00c00084 	movi	r3,2
81102c20:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102c24:	e0bffe17 	ldw	r2,-8(fp)
81102c28:	10800058 	cmpnei	r2,r2,1
81102c2c:	10000e1e 	bne	r2,zero,81102c68 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102c30:	00000706 	br	81102c50 <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102c34:	e0bfff17 	ldw	r2,-4(fp)
81102c38:	1000031e 	bne	r2,zero,81102c48 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81102c3c:	01000044 	movi	r4,1
81102c40:	112acf80 	call	8112acf8 <usleep>
81102c44:	00000206 	br	81102c50 <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102c48:	e13fff17 	ldw	r4,-4(fp)
81102c4c:	112acf80 	call	8112acf8 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102c50:	e0bffd17 	ldw	r2,-12(fp)
81102c54:	10800317 	ldw	r2,12(r2)
81102c58:	10800037 	ldwio	r2,0(r2)
81102c5c:	1080100c 	andi	r2,r2,64
81102c60:	103ff41e 	bne	r2,zero,81102c34 <__reset+0xfb0e2c34>
81102c64:	00000206 	br	81102c70 <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102c68:	e0bffc17 	ldw	r2,-16(fp)
81102c6c:	00000106 	br	81102c74 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81102c70:	e0bffc17 	ldw	r2,-16(fp)
}
81102c74:	e037883a 	mov	sp,fp
81102c78:	dfc00117 	ldw	ra,4(sp)
81102c7c:	df000017 	ldw	fp,0(sp)
81102c80:	dec00204 	addi	sp,sp,8
81102c84:	f800283a 	ret

81102c88 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102c88:	defff604 	addi	sp,sp,-40
81102c8c:	de00012e 	bgeu	sp,et,81102c94 <DMA_SINGLE_TRANSFER+0xc>
81102c90:	003b68fa 	trap	3
81102c94:	dfc00915 	stw	ra,36(sp)
81102c98:	df000815 	stw	fp,32(sp)
81102c9c:	dc000715 	stw	r16,28(sp)
81102ca0:	df000804 	addi	fp,sp,32
81102ca4:	e13ffb15 	stw	r4,-20(fp)
81102ca8:	e17ffc15 	stw	r5,-16(fp)
81102cac:	e1bffd15 	stw	r6,-12(fp)
81102cb0:	e1fffe15 	stw	r7,-8(fp)
81102cb4:	defff804 	addi	sp,sp,-32
81102cb8:	d8800204 	addi	r2,sp,8
81102cbc:	108003c4 	addi	r2,r2,15
81102cc0:	1004d13a 	srli	r2,r2,4
81102cc4:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102cc8:	00800044 	movi	r2,1
81102ccc:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102cd0:	e0fffc17 	ldw	r3,-16(fp)
81102cd4:	e13ffd17 	ldw	r4,-12(fp)
81102cd8:	e0800217 	ldw	r2,8(fp)
81102cdc:	d8800115 	stw	r2,4(sp)
81102ce0:	e0bffe17 	ldw	r2,-8(fp)
81102ce4:	d8800015 	stw	r2,0(sp)
81102ce8:	200f883a 	mov	r7,r4
81102cec:	180d883a 	mov	r6,r3
81102cf0:	800b883a 	mov	r5,r16
81102cf4:	e13ffb17 	ldw	r4,-20(fp)
81102cf8:	113be100 	call	8113be10 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102cfc:	10000326 	beq	r2,zero,81102d0c <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81102d00:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102d04:	e0bffa17 	ldw	r2,-24(fp)
81102d08:	00001d06 	br	81102d80 <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102d0c:	800b883a 	mov	r5,r16
81102d10:	e13ffb17 	ldw	r4,-20(fp)
81102d14:	113d0840 	call	8113d084 <alt_msgdma_standard_descriptor_async_transfer>
81102d18:	10000326 	beq	r2,zero,81102d28 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81102d1c:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102d20:	e0bffa17 	ldw	r2,-24(fp)
81102d24:	00001606 	br	81102d80 <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102d28:	e0bffa17 	ldw	r2,-24(fp)
81102d2c:	10800060 	cmpeqi	r2,r2,1
81102d30:	1007883a 	mov	r3,r2
81102d34:	e0800317 	ldw	r2,12(fp)
81102d38:	10800060 	cmpeqi	r2,r2,1
81102d3c:	1884703a 	and	r2,r3,r2
81102d40:	10803fcc 	andi	r2,r2,255
81102d44:	10000d26 	beq	r2,zero,81102d7c <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102d48:	00000706 	br	81102d68 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102d4c:	e0800417 	ldw	r2,16(fp)
81102d50:	1000031e 	bne	r2,zero,81102d60 <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81102d54:	0100fa04 	movi	r4,1000
81102d58:	112acf80 	call	8112acf8 <usleep>
81102d5c:	00000206 	br	81102d68 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81102d60:	e1000417 	ldw	r4,16(fp)
81102d64:	112acf80 	call	8112acf8 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102d68:	e0bffb17 	ldw	r2,-20(fp)
81102d6c:	10800317 	ldw	r2,12(r2)
81102d70:	10800037 	ldwio	r2,0(r2)
81102d74:	1080004c 	andi	r2,r2,1
81102d78:	103ff41e 	bne	r2,zero,81102d4c <__reset+0xfb0e2d4c>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102d7c:	e0bffa17 	ldw	r2,-24(fp)
}
81102d80:	e6ffff04 	addi	sp,fp,-4
81102d84:	dfc00217 	ldw	ra,8(sp)
81102d88:	df000117 	ldw	fp,4(sp)
81102d8c:	dc000017 	ldw	r16,0(sp)
81102d90:	dec00304 	addi	sp,sp,12
81102d94:	f800283a 	ret

81102d98 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102d98:	defff504 	addi	sp,sp,-44
81102d9c:	de00012e 	bgeu	sp,et,81102da4 <DMA_MULTIPLE_TRANSFER+0xc>
81102da0:	003b68fa 	trap	3
81102da4:	dfc00a15 	stw	ra,40(sp)
81102da8:	df000915 	stw	fp,36(sp)
81102dac:	dc000815 	stw	r16,32(sp)
81102db0:	df000904 	addi	fp,sp,36
81102db4:	e13ffb15 	stw	r4,-20(fp)
81102db8:	e17ffc15 	stw	r5,-16(fp)
81102dbc:	e1bffd15 	stw	r6,-12(fp)
81102dc0:	3805883a 	mov	r2,r7
81102dc4:	e0bffe05 	stb	r2,-8(fp)
81102dc8:	defff804 	addi	sp,sp,-32
81102dcc:	d8800204 	addi	r2,sp,8
81102dd0:	108003c4 	addi	r2,r2,15
81102dd4:	1004d13a 	srli	r2,r2,4
81102dd8:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102ddc:	00800044 	movi	r2,1
81102de0:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102de4:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102de8:	00002506 	br	81102e80 <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102dec:	e0bffa03 	ldbu	r2,-24(fp)
81102df0:	1085883a 	add	r2,r2,r2
81102df4:	1085883a 	add	r2,r2,r2
81102df8:	1007883a 	mov	r3,r2
81102dfc:	e0bffc17 	ldw	r2,-16(fp)
81102e00:	10c5883a 	add	r2,r2,r3
81102e04:	10800017 	ldw	r2,0(r2)
81102e08:	1009883a 	mov	r4,r2
81102e0c:	e0bffa03 	ldbu	r2,-24(fp)
81102e10:	1085883a 	add	r2,r2,r2
81102e14:	1085883a 	add	r2,r2,r2
81102e18:	1007883a 	mov	r3,r2
81102e1c:	e0bffd17 	ldw	r2,-12(fp)
81102e20:	10c5883a 	add	r2,r2,r3
81102e24:	10800017 	ldw	r2,0(r2)
81102e28:	1007883a 	mov	r3,r2
81102e2c:	e0800317 	ldw	r2,12(fp)
81102e30:	10804034 	orhi	r2,r2,256
81102e34:	d8800115 	stw	r2,4(sp)
81102e38:	e0800217 	ldw	r2,8(fp)
81102e3c:	d8800015 	stw	r2,0(sp)
81102e40:	180f883a 	mov	r7,r3
81102e44:	200d883a 	mov	r6,r4
81102e48:	800b883a 	mov	r5,r16
81102e4c:	e13ffb17 	ldw	r4,-20(fp)
81102e50:	113be100 	call	8113be10 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102e54:	10000226 	beq	r2,zero,81102e60 <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81102e58:	e03ff915 	stw	zero,-28(fp)
81102e5c:	00000506 	br	81102e74 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102e60:	800b883a 	mov	r5,r16
81102e64:	e13ffb17 	ldw	r4,-20(fp)
81102e68:	113d0840 	call	8113d084 <alt_msgdma_standard_descriptor_async_transfer>
81102e6c:	10000126 	beq	r2,zero,81102e74 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81102e70:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102e74:	e0bffa03 	ldbu	r2,-24(fp)
81102e78:	10800044 	addi	r2,r2,1
81102e7c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102e80:	e0bff917 	ldw	r2,-28(fp)
81102e84:	10800060 	cmpeqi	r2,r2,1
81102e88:	1009883a 	mov	r4,r2
81102e8c:	e0fffa03 	ldbu	r3,-24(fp)
81102e90:	e0bffe03 	ldbu	r2,-8(fp)
81102e94:	10bfffc4 	addi	r2,r2,-1
81102e98:	1884803a 	cmplt	r2,r3,r2
81102e9c:	2084703a 	and	r2,r4,r2
81102ea0:	10803fcc 	andi	r2,r2,255
81102ea4:	103fd11e 	bne	r2,zero,81102dec <__reset+0xfb0e2dec>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102ea8:	e0bff917 	ldw	r2,-28(fp)
81102eac:	10800058 	cmpnei	r2,r2,1
81102eb0:	1000211e 	bne	r2,zero,81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102eb4:	e0bffa03 	ldbu	r2,-24(fp)
81102eb8:	1085883a 	add	r2,r2,r2
81102ebc:	1085883a 	add	r2,r2,r2
81102ec0:	1007883a 	mov	r3,r2
81102ec4:	e0bffc17 	ldw	r2,-16(fp)
81102ec8:	10c5883a 	add	r2,r2,r3
81102ecc:	10800017 	ldw	r2,0(r2)
81102ed0:	1009883a 	mov	r4,r2
81102ed4:	e0bffa03 	ldbu	r2,-24(fp)
81102ed8:	1085883a 	add	r2,r2,r2
81102edc:	1085883a 	add	r2,r2,r2
81102ee0:	1007883a 	mov	r3,r2
81102ee4:	e0bffd17 	ldw	r2,-12(fp)
81102ee8:	10c5883a 	add	r2,r2,r3
81102eec:	10800017 	ldw	r2,0(r2)
81102ef0:	1007883a 	mov	r3,r2
81102ef4:	e0800317 	ldw	r2,12(fp)
81102ef8:	d8800115 	stw	r2,4(sp)
81102efc:	e0800217 	ldw	r2,8(fp)
81102f00:	d8800015 	stw	r2,0(sp)
81102f04:	180f883a 	mov	r7,r3
81102f08:	200d883a 	mov	r6,r4
81102f0c:	800b883a 	mov	r5,r16
81102f10:	e13ffb17 	ldw	r4,-20(fp)
81102f14:	113be100 	call	8113be10 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102f18:	10000226 	beq	r2,zero,81102f24 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81102f1c:	e03ff915 	stw	zero,-28(fp)
81102f20:	00000506 	br	81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102f24:	800b883a 	mov	r5,r16
81102f28:	e13ffb17 	ldw	r4,-20(fp)
81102f2c:	113d0840 	call	8113d084 <alt_msgdma_standard_descriptor_async_transfer>
81102f30:	10000126 	beq	r2,zero,81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81102f34:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102f38:	e0bff917 	ldw	r2,-28(fp)
81102f3c:	10800060 	cmpeqi	r2,r2,1
81102f40:	1007883a 	mov	r3,r2
81102f44:	e0800417 	ldw	r2,16(fp)
81102f48:	10800060 	cmpeqi	r2,r2,1
81102f4c:	1884703a 	and	r2,r3,r2
81102f50:	10803fcc 	andi	r2,r2,255
81102f54:	10000d26 	beq	r2,zero,81102f8c <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f58:	00000706 	br	81102f78 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102f5c:	e0800517 	ldw	r2,20(fp)
81102f60:	1000031e 	bne	r2,zero,81102f70 <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81102f64:	0100fa04 	movi	r4,1000
81102f68:	112acf80 	call	8112acf8 <usleep>
81102f6c:	00000206 	br	81102f78 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81102f70:	e1000517 	ldw	r4,20(fp)
81102f74:	112acf80 	call	8112acf8 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f78:	e0bffb17 	ldw	r2,-20(fp)
81102f7c:	10800317 	ldw	r2,12(r2)
81102f80:	10800037 	ldwio	r2,0(r2)
81102f84:	1080004c 	andi	r2,r2,1
81102f88:	103ff41e 	bne	r2,zero,81102f5c <__reset+0xfb0e2f5c>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102f8c:	e0bff917 	ldw	r2,-28(fp)
}
81102f90:	e6ffff04 	addi	sp,fp,-4
81102f94:	dfc00217 	ldw	ra,8(sp)
81102f98:	df000117 	ldw	fp,4(sp)
81102f9c:	dc000017 	ldw	r16,0(sp)
81102fa0:	dec00304 	addi	sp,sp,12
81102fa4:	f800283a 	ret

81102fa8 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
81102fa8:	deffef04 	addi	sp,sp,-68
81102fac:	de00012e 	bgeu	sp,et,81102fb4 <POWER_Read+0xc>
81102fb0:	003b68fa 	trap	3
81102fb4:	dfc01015 	stw	ra,64(sp)
81102fb8:	df000f15 	stw	fp,60(sp)
81102fbc:	df000f04 	addi	fp,sp,60
81102fc0:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
81102fc4:	00800044 	movi	r2,1
81102fc8:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
81102fcc:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102fd0:	00800204 	movi	r2,8
81102fd4:	e0bffc15 	stw	r2,-16(fp)
81102fd8:	00800104 	movi	r2,4
81102fdc:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102fe0:	00800044 	movi	r2,1
81102fe4:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102fe8:	00800044 	movi	r2,1
81102fec:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102ff0:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102ff4:	e03ff515 	stw	zero,-44(fp)
81102ff8:	00009206 	br	81103244 <POWER_Read+0x29c>
		NextChannel = 0;
81102ffc:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81103000:	e0bff517 	ldw	r2,-44(fp)
81103004:	10c03fcc 	andi	r3,r2,255
81103008:	e13ffa03 	ldbu	r4,-24(fp)
8110300c:	e0bfff17 	ldw	r2,-4(fp)
81103010:	d8800115 	stw	r2,4(sp)
81103014:	e0bff917 	ldw	r2,-28(fp)
81103018:	d8800015 	stw	r2,0(sp)
8110301c:	e1fff817 	ldw	r7,-32(fp)
81103020:	e1bff717 	ldw	r6,-36(fp)
81103024:	200b883a 	mov	r5,r4
81103028:	1809883a 	mov	r4,r3
8110302c:	1106d380 	call	81106d38 <POWER_SPI_RW>
81103030:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103034:	e03ff415 	stw	zero,-48(fp)
81103038:	00007406 	br	8110320c <POWER_Read+0x264>
			NextChannel = i + 1;
8110303c:	e0bff417 	ldw	r2,-48(fp)
81103040:	10800044 	addi	r2,r2,1
81103044:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81103048:	e0bff517 	ldw	r2,-44(fp)
8110304c:	10c03fcc 	andi	r3,r2,255
81103050:	e13ffa03 	ldbu	r4,-24(fp)
81103054:	e0bffe04 	addi	r2,fp,-8
81103058:	d8800115 	stw	r2,4(sp)
8110305c:	e0bff917 	ldw	r2,-28(fp)
81103060:	d8800015 	stw	r2,0(sp)
81103064:	e1fff817 	ldw	r7,-32(fp)
81103068:	e1bff717 	ldw	r6,-36(fp)
8110306c:	200b883a 	mov	r5,r4
81103070:	1809883a 	mov	r4,r3
81103074:	1106d380 	call	81106d38 <POWER_SPI_RW>
81103078:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
8110307c:	e0bff317 	ldw	r2,-52(fp)
81103080:	10005026 	beq	r2,zero,811031c4 <POWER_Read+0x21c>
				HEAD = (Value32 >> 30) & 0x03;
81103084:	e0bffe17 	ldw	r2,-8(fp)
81103088:	1004d7ba 	srli	r2,r2,30
8110308c:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
81103090:	e0bffe17 	ldw	r2,-8(fp)
81103094:	1004d07a 	srli	r2,r2,1
81103098:	108001cc 	andi	r2,r2,7
8110309c:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
811030a0:	e0bffe17 	ldw	r2,-8(fp)
811030a4:	1004d13a 	srli	r2,r2,4
811030a8:	1080004c 	andi	r2,r2,1
811030ac:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
811030b0:	e0bffe17 	ldw	r2,-8(fp)
811030b4:	1004d17a 	srli	r2,r2,5
811030b8:	1080004c 	andi	r2,r2,1
811030bc:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
811030c0:	e0bffe17 	ldw	r2,-8(fp)
811030c4:	1080004c 	andi	r2,r2,1
811030c8:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
811030cc:	e0bffa43 	ldbu	r2,-23(fp)
811030d0:	10000d26 	beq	r2,zero,81103108 <POWER_Read+0x160>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
811030d4:	e1bff417 	ldw	r6,-48(fp)
811030d8:	01604534 	movhi	r5,33044
811030dc:	297c9704 	addi	r5,r5,-3492
811030e0:	01204534 	movhi	r4,33044
811030e4:	21135404 	addi	r4,r4,19792
811030e8:	11153700 	call	81115370 <sprintf>
					debug(fp, cDebugBuffer);
811030ec:	d0a05017 	ldw	r2,-32448(gp)
811030f0:	01604534 	movhi	r5,33044
811030f4:	29535404 	addi	r5,r5,19792
811030f8:	1009883a 	mov	r4,r2
811030fc:	11139c00 	call	811139c0 <fprintf>
#endif
					bSuccess = FALSE;
81103100:	e03ff315 	stw	zero,-52(fp)
81103104:	00002206 	br	81103190 <POWER_Read+0x1e8>
				} else if (Channel != i) {
81103108:	e0fffa83 	ldbu	r3,-22(fp)
8110310c:	e0bff417 	ldw	r2,-48(fp)
81103110:	18801026 	beq	r3,r2,81103154 <POWER_Read+0x1ac>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
81103114:	e0bffa83 	ldbu	r2,-22(fp)
81103118:	d8800015 	stw	r2,0(sp)
8110311c:	e1fff417 	ldw	r7,-48(fp)
81103120:	e1bff417 	ldw	r6,-48(fp)
81103124:	01604534 	movhi	r5,33044
81103128:	297c9d04 	addi	r5,r5,-3468
8110312c:	01204534 	movhi	r4,33044
81103130:	21135404 	addi	r4,r4,19792
81103134:	11153700 	call	81115370 <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
81103138:	d0a05017 	ldw	r2,-32448(gp)
8110313c:	01604534 	movhi	r5,33044
81103140:	29535404 	addi	r5,r5,19792
81103144:	1009883a 	mov	r4,r2
81103148:	11139c00 	call	811139c0 <fprintf>
#endif
					bSuccess = FALSE;
8110314c:	e03ff315 	stw	zero,-52(fp)
81103150:	00000f06 	br	81103190 <POWER_Read+0x1e8>
				} else if (SIGN ^ bSIGN) {
81103154:	e0fffac3 	ldbu	r3,-21(fp)
81103158:	e0bff817 	ldw	r2,-32(fp)
8110315c:	18800c26 	beq	r3,r2,81103190 <POWER_Read+0x1e8>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
81103160:	e1bff417 	ldw	r6,-48(fp)
81103164:	01604534 	movhi	r5,33044
81103168:	297ca904 	addi	r5,r5,-3420
8110316c:	01204534 	movhi	r4,33044
81103170:	21135404 	addi	r4,r4,19792
81103174:	11153700 	call	81115370 <sprintf>
					debug(fp, cDebugBuffer);
81103178:	d0a05017 	ldw	r2,-32448(gp)
8110317c:	01604534 	movhi	r5,33044
81103180:	29535404 	addi	r5,r5,19792
81103184:	1009883a 	mov	r4,r2
81103188:	11139c00 	call	811139c0 <fprintf>
#endif
					bSuccess = FALSE;
8110318c:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81103190:	e0bff317 	ldw	r2,-52(fp)
81103194:	10001a26 	beq	r2,zero,81103200 <POWER_Read+0x258>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81103198:	e0bff617 	ldw	r2,-40(fp)
8110319c:	10c00044 	addi	r3,r2,1
811031a0:	e0fff615 	stw	r3,-40(fp)
811031a4:	1085883a 	add	r2,r2,r2
811031a8:	1085883a 	add	r2,r2,r2
811031ac:	1007883a 	mov	r3,r2
811031b0:	e0bfff17 	ldw	r2,-4(fp)
811031b4:	10c5883a 	add	r2,r2,r3
811031b8:	e0fffe17 	ldw	r3,-8(fp)
811031bc:	10c00015 	stw	r3,0(r2)
811031c0:	00000f06 	br	81103200 <POWER_Read+0x258>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
811031c4:	00e04534 	movhi	r3,33044
811031c8:	18d35404 	addi	r3,r3,19792
811031cc:	00a04534 	movhi	r2,33044
811031d0:	10bcaf04 	addi	r2,r2,-3396
811031d4:	1009883a 	mov	r4,r2
811031d8:	00800444 	movi	r2,17
811031dc:	100d883a 	mov	r6,r2
811031e0:	200b883a 	mov	r5,r4
811031e4:	1809883a 	mov	r4,r3
811031e8:	1114a700 	call	81114a70 <memcpy>
				debug(fp, cDebugBuffer);
811031ec:	d0a05017 	ldw	r2,-32448(gp)
811031f0:	01604534 	movhi	r5,33044
811031f4:	29535404 	addi	r5,r5,19792
811031f8:	1009883a 	mov	r4,r2
811031fc:	11139c00 	call	811139c0 <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103200:	e0bff417 	ldw	r2,-48(fp)
81103204:	10800044 	addi	r2,r2,1
81103208:	e0bff415 	stw	r2,-48(fp)
8110320c:	e0bff517 	ldw	r2,-44(fp)
81103210:	1085883a 	add	r2,r2,r2
81103214:	1085883a 	add	r2,r2,r2
81103218:	e0fff304 	addi	r3,fp,-52
8110321c:	1885883a 	add	r2,r3,r2
81103220:	10800904 	addi	r2,r2,36
81103224:	10800017 	ldw	r2,0(r2)
81103228:	e0fff417 	ldw	r3,-48(fp)
8110322c:	1880020e 	bge	r3,r2,81103238 <POWER_Read+0x290>
81103230:	e0bff317 	ldw	r2,-52(fp)
81103234:	103f811e 	bne	r2,zero,8110303c <__reset+0xfb0e303c>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81103238:	e0bff517 	ldw	r2,-44(fp)
8110323c:	10800044 	addi	r2,r2,1
81103240:	e0bff515 	stw	r2,-44(fp)
81103244:	e0bff517 	ldw	r2,-44(fp)
81103248:	10800088 	cmpgei	r2,r2,2
8110324c:	1000021e 	bne	r2,zero,81103258 <POWER_Read+0x2b0>
81103250:	e0bff317 	ldw	r2,-52(fp)
81103254:	103f691e 	bne	r2,zero,81102ffc <__reset+0xfb0e2ffc>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
81103258:	e0bff317 	ldw	r2,-52(fp)
}
8110325c:	e037883a 	mov	sp,fp
81103260:	dfc00117 	ldw	ra,4(sp)
81103264:	df000017 	ldw	fp,0(sp)
81103268:	dec00204 	addi	sp,sp,8
8110326c:	f800283a 	ret

81103270 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81103270:	defff904 	addi	sp,sp,-28
81103274:	de00012e 	bgeu	sp,et,8110327c <TEMP_Read+0xc>
81103278:	003b68fa 	trap	3
8110327c:	dfc00615 	stw	ra,24(sp)
81103280:	df000515 	stw	fp,20(sp)
81103284:	df000504 	addi	fp,sp,20
81103288:	e13ffe15 	stw	r4,-8(fp)
8110328c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81103290:	00800c04 	movi	r2,48
81103294:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81103298:	e0bffd83 	ldbu	r2,-10(fp)
8110329c:	10c03fcc 	andi	r3,r2,255
811032a0:	18c0201c 	xori	r3,r3,128
811032a4:	18ffe004 	addi	r3,r3,-128
811032a8:	e0bffdc4 	addi	r2,fp,-9
811032ac:	d8800015 	stw	r2,0(sp)
811032b0:	000f883a 	mov	r7,zero
811032b4:	180d883a 	mov	r6,r3
811032b8:	01600034 	movhi	r5,32768
811032bc:	29426004 	addi	r5,r5,2432
811032c0:	01200034 	movhi	r4,32768
811032c4:	21026404 	addi	r4,r4,2448
811032c8:	1105b300 	call	81105b30 <I2C_Read>
811032cc:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
811032d0:	e0bffc17 	ldw	r2,-16(fp)
811032d4:	10000226 	beq	r2,zero,811032e0 <TEMP_Read+0x70>
		BoardTemp = Data;
811032d8:	e0bffdc3 	ldbu	r2,-9(fp)
811032dc:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
811032e0:	e0bffc17 	ldw	r2,-16(fp)
811032e4:	10001226 	beq	r2,zero,81103330 <TEMP_Read+0xc0>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
811032e8:	e0bffd83 	ldbu	r2,-10(fp)
811032ec:	10c03fcc 	andi	r3,r2,255
811032f0:	18c0201c 	xori	r3,r3,128
811032f4:	18ffe004 	addi	r3,r3,-128
811032f8:	e0bffdc4 	addi	r2,fp,-9
811032fc:	d8800015 	stw	r2,0(sp)
81103300:	01c00044 	movi	r7,1
81103304:	180d883a 	mov	r6,r3
81103308:	01600034 	movhi	r5,32768
8110330c:	29426004 	addi	r5,r5,2432
81103310:	01200034 	movhi	r4,32768
81103314:	21026404 	addi	r4,r4,2448
81103318:	1105b300 	call	81105b30 <I2C_Read>
8110331c:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
81103320:	e0bffc17 	ldw	r2,-16(fp)
81103324:	10000226 	beq	r2,zero,81103330 <TEMP_Read+0xc0>
			FpgaTemp = Data;
81103328:	e0bffdc3 	ldbu	r2,-9(fp)
8110332c:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
81103330:	e0bffc17 	ldw	r2,-16(fp)
81103334:	10000626 	beq	r2,zero,81103350 <TEMP_Read+0xe0>
		*pFpgaTemp = FpgaTemp;
81103338:	e0bffe17 	ldw	r2,-8(fp)
8110333c:	e0fffd03 	ldbu	r3,-12(fp)
81103340:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
81103344:	e0bfff17 	ldw	r2,-4(fp)
81103348:	e0fffd43 	ldbu	r3,-11(fp)
8110334c:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
81103350:	e0bffc17 	ldw	r2,-16(fp)
}
81103354:	e037883a 	mov	sp,fp
81103358:	dfc00117 	ldw	ra,4(sp)
8110335c:	df000017 	ldw	fp,0(sp)
81103360:	dec00204 	addi	sp,sp,8
81103364:	f800283a 	ret

81103368 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
81103368:	defffb04 	addi	sp,sp,-20
8110336c:	de00012e 	bgeu	sp,et,81103374 <sense_log_temp+0xc>
81103370:	003b68fa 	trap	3
81103374:	dfc00415 	stw	ra,16(sp)
81103378:	df000315 	stw	fp,12(sp)
8110337c:	df000304 	addi	fp,sp,12
81103380:	e13ffe15 	stw	r4,-8(fp)
81103384:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81103388:	e17fff17 	ldw	r5,-4(fp)
8110338c:	e13ffe17 	ldw	r4,-8(fp)
81103390:	11032700 	call	81103270 <TEMP_Read>
81103394:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81103398:	e0bffd17 	ldw	r2,-12(fp)
}
8110339c:	e037883a 	mov	sp,fp
811033a0:	dfc00117 	ldw	ra,4(sp)
811033a4:	df000017 	ldw	fp,0(sp)
811033a8:	dec00204 	addi	sp,sp,8
811033ac:	f800283a 	ret

811033b0 <sense_log>:

void sense_log(void) {
811033b0:	deff0404 	addi	sp,sp,-1008
811033b4:	de00012e 	bgeu	sp,et,811033bc <sense_log+0xc>
811033b8:	003b68fa 	trap	3
811033bc:	dfc0fb15 	stw	ra,1004(sp)
811033c0:	df00fa15 	stw	fp,1000(sp)
811033c4:	dd40f915 	stw	r21,996(sp)
811033c8:	dd00f815 	stw	r20,992(sp)
811033cc:	dcc0f715 	stw	r19,988(sp)
811033d0:	dc80f615 	stw	r18,984(sp)
811033d4:	dc40f515 	stw	r17,980(sp)
811033d8:	dc00f415 	stw	r16,976(sp)
811033dc:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
811033e0:	00902834 	movhi	r2,16544
811033e4:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
811033e8:	008ed174 	movhi	r2,15173
811033ec:	10a6e984 	addi	r2,r2,-25690
811033f0:	e0bf2215 	stw	r2,-888(fp)
811033f4:	008ea0f4 	movhi	r2,14979
811033f8:	10849bc4 	addi	r2,r2,4719
811033fc:	e0bf2315 	stw	r2,-884(fp)
81103400:	008ed174 	movhi	r2,15173
81103404:	10a6e984 	addi	r2,r2,-25690
81103408:	e0bf2415 	stw	r2,-880(fp)
8110340c:	008ed174 	movhi	r2,15173
81103410:	10a6e984 	addi	r2,r2,-25690
81103414:	e0bf2515 	stw	r2,-876(fp)
81103418:	008ed174 	movhi	r2,15173
8110341c:	10a6e984 	addi	r2,r2,-25690
81103420:	e0bf2615 	stw	r2,-872(fp)
81103424:	008ed174 	movhi	r2,15173
81103428:	10a6e984 	addi	r2,r2,-25690
8110342c:	e0bf2715 	stw	r2,-868(fp)
81103430:	008ed174 	movhi	r2,15173
81103434:	10a6e984 	addi	r2,r2,-25690
81103438:	e0bf2815 	stw	r2,-864(fp)
8110343c:	008ed174 	movhi	r2,15173
81103440:	10a6e984 	addi	r2,r2,-25690
81103444:	e0bf2915 	stw	r2,-860(fp)
81103448:	008ed174 	movhi	r2,15173
8110344c:	10a6e984 	addi	r2,r2,-25690
81103450:	e0bf2a15 	stw	r2,-856(fp)
81103454:	008ed174 	movhi	r2,15173
81103458:	10a6e984 	addi	r2,r2,-25690
8110345c:	e0bf2b15 	stw	r2,-852(fp)
81103460:	008ed174 	movhi	r2,15173
81103464:	10a6e984 	addi	r2,r2,-25690
81103468:	e0bf2c15 	stw	r2,-848(fp)
8110346c:	008ed174 	movhi	r2,15173
81103470:	10a6e984 	addi	r2,r2,-25690
81103474:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81103478:	008fd9b4 	movhi	r2,16230
8110347c:	10999984 	addi	r2,r2,26214
81103480:	e0bf2e15 	stw	r2,-840(fp)
81103484:	008fd9b4 	movhi	r2,16230
81103488:	10999984 	addi	r2,r2,26214
8110348c:	e0bf2f15 	stw	r2,-836(fp)
81103490:	00901034 	movhi	r2,16448
81103494:	e0bf3015 	stw	r2,-832(fp)
81103498:	008fd9b4 	movhi	r2,16230
8110349c:	10999984 	addi	r2,r2,26214
811034a0:	e0bf3115 	stw	r2,-828(fp)
811034a4:	008ff9b4 	movhi	r2,16358
811034a8:	10999984 	addi	r2,r2,26214
811034ac:	e0bf3215 	stw	r2,-824(fp)
811034b0:	00900834 	movhi	r2,16416
811034b4:	e0bf3315 	stw	r2,-820(fp)
811034b8:	008ff9b4 	movhi	r2,16358
811034bc:	10999984 	addi	r2,r2,26214
811034c0:	e0bf3415 	stw	r2,-816(fp)
811034c4:	00900834 	movhi	r2,16416
811034c8:	e0bf3515 	stw	r2,-812(fp)
811034cc:	008fe374 	movhi	r2,16269
811034d0:	10b33344 	addi	r2,r2,-13107
811034d4:	e0bf3615 	stw	r2,-808(fp)
811034d8:	008fecf4 	movhi	r2,16307
811034dc:	108cccc4 	addi	r2,r2,13107
811034e0:	e0bf3715 	stw	r2,-804(fp)
811034e4:	009014f4 	movhi	r2,16467
811034e8:	108cccc4 	addi	r2,r2,13107
811034ec:	e0bf3815 	stw	r2,-800(fp)
811034f0:	00900834 	movhi	r2,16416
811034f4:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
811034f8:	00a04534 	movhi	r2,33044
811034fc:	10bce604 	addi	r2,r2,-3176
81103500:	e0ff3a04 	addi	r3,fp,-792
81103504:	1009883a 	mov	r4,r2
81103508:	0080c004 	movi	r2,768
8110350c:	100d883a 	mov	r6,r2
81103510:	200b883a 	mov	r5,r4
81103514:	1809883a 	mov	r4,r3
81103518:	1114a700 	call	81114a70 <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
8110351c:	e0bf1604 	addi	r2,fp,-936
81103520:	1009883a 	mov	r4,r2
81103524:	1102fa80 	call	81102fa8 <POWER_Read>
81103528:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
8110352c:	e0bf0f17 	ldw	r2,-964(fp)
81103530:	10016026 	beq	r2,zero,81103ab4 <sense_log+0x704>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81103534:	e03f0c15 	stw	zero,-976(fp)
81103538:	00014c06 	br	81103a6c <sense_log+0x6bc>
			SIG = (szVol[i] >> 29) & 0x01;
8110353c:	e0bf0c17 	ldw	r2,-976(fp)
81103540:	1085883a 	add	r2,r2,r2
81103544:	1085883a 	add	r2,r2,r2
81103548:	e0ff0c04 	addi	r3,fp,-976
8110354c:	1885883a 	add	r2,r3,r2
81103550:	10800a04 	addi	r2,r2,40
81103554:	10800017 	ldw	r2,0(r2)
81103558:	1004d77a 	srli	r2,r2,29
8110355c:	1080004c 	andi	r2,r2,1
81103560:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
81103564:	e0bf0c17 	ldw	r2,-976(fp)
81103568:	1085883a 	add	r2,r2,r2
8110356c:	1085883a 	add	r2,r2,r2
81103570:	e0ff0c04 	addi	r3,fp,-976
81103574:	1885883a 	add	r2,r3,r2
81103578:	10800a04 	addi	r2,r2,40
8110357c:	10800017 	ldw	r2,0(r2)
81103580:	1004d73a 	srli	r2,r2,28
81103584:	1080004c 	andi	r2,r2,1
81103588:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110358c:	e0bf0c17 	ldw	r2,-976(fp)
81103590:	1085883a 	add	r2,r2,r2
81103594:	1085883a 	add	r2,r2,r2
81103598:	e0ff0c04 	addi	r3,fp,-976
8110359c:	1885883a 	add	r2,r3,r2
811035a0:	10800a04 	addi	r2,r2,40
811035a4:	10800017 	ldw	r2,0(r2)
811035a8:	1006d1ba 	srli	r3,r2,6
811035ac:	00801034 	movhi	r2,64
811035b0:	10bfffc4 	addi	r2,r2,-1
811035b4:	1884703a 	and	r2,r3,r2
811035b8:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
811035bc:	e0bf1117 	ldw	r2,-956(fp)
811035c0:	1000091e 	bne	r2,zero,811035e8 <sense_log+0x238>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
811035c4:	e13f1217 	ldw	r4,-952(fp)
811035c8:	1112d280 	call	81112d28 <__floatunsisf>
811035cc:	1007883a 	mov	r3,r2
811035d0:	0152a034 	movhi	r5,19072
811035d4:	1809883a 	mov	r4,r3
811035d8:	11123b00 	call	811123b0 <__divsf3>
811035dc:	1007883a 	mov	r3,r2
811035e0:	e0ff0d15 	stw	r3,-972(fp)
811035e4:	00000106 	br	811035ec <sense_log+0x23c>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
811035e8:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
811035ec:	e0bf1017 	ldw	r2,-960(fp)
811035f0:	10002626 	beq	r2,zero,8110368c <sense_log+0x2dc>
811035f4:	e0bf1117 	ldw	r2,-956(fp)
811035f8:	10002426 	beq	r2,zero,8110368c <sense_log+0x2dc>
				fVol = fRef * 0.5;
811035fc:	014fc034 	movhi	r5,16128
81103600:	e13f0e17 	ldw	r4,-968(fp)
81103604:	11127f80 	call	811127f8 <__mulsf3>
81103608:	1007883a 	mov	r3,r2
8110360c:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103610:	e0ff3a04 	addi	r3,fp,-792
81103614:	e0bf0c17 	ldw	r2,-976(fp)
81103618:	100491ba 	slli	r2,r2,6
8110361c:	18a1883a 	add	r16,r3,r2
81103620:	e0bf0c17 	ldw	r2,-976(fp)
81103624:	1085883a 	add	r2,r2,r2
81103628:	1085883a 	add	r2,r2,r2
8110362c:	e0ff0c04 	addi	r3,fp,-976
81103630:	1885883a 	add	r2,r3,r2
81103634:	10800a04 	addi	r2,r2,40
81103638:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
8110363c:	1023883a 	mov	r17,r2
81103640:	e13f1317 	ldw	r4,-948(fp)
81103644:	11135400 	call	81113540 <__extendsfdf2>
81103648:	1009883a 	mov	r4,r2
8110364c:	180b883a 	mov	r5,r3
81103650:	d9000015 	stw	r4,0(sp)
81103654:	d9400115 	stw	r5,4(sp)
81103658:	880f883a 	mov	r7,r17
8110365c:	800d883a 	mov	r6,r16
81103660:	01604534 	movhi	r5,33044
81103664:	297cb404 	addi	r5,r5,-3376
81103668:	01204534 	movhi	r4,33044
8110366c:	21135404 	addi	r4,r4,19792
81103670:	11153700 	call	81115370 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103674:	d0a05017 	ldw	r2,-32448(gp)
81103678:	01604534 	movhi	r5,33044
8110367c:	29535404 	addi	r5,r5,19792
81103680:	1009883a 	mov	r4,r2
81103684:	11139c00 	call	811139c0 <fprintf>
81103688:	0000f506 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (SIG && !MSB) {
8110368c:	e0bf1017 	ldw	r2,-960(fp)
81103690:	10006426 	beq	r2,zero,81103824 <sense_log+0x474>
81103694:	e0bf1117 	ldw	r2,-956(fp)
81103698:	1000621e 	bne	r2,zero,81103824 <sense_log+0x474>
				fVol = fRef * 0.5 * fVolDrop;
8110369c:	e13f0e17 	ldw	r4,-968(fp)
811036a0:	11135400 	call	81113540 <__extendsfdf2>
811036a4:	1011883a 	mov	r8,r2
811036a8:	1813883a 	mov	r9,r3
811036ac:	000d883a 	mov	r6,zero
811036b0:	01cff834 	movhi	r7,16352
811036b4:	4009883a 	mov	r4,r8
811036b8:	480b883a 	mov	r5,r9
811036bc:	1112e200 	call	81112e20 <__muldf3>
811036c0:	1009883a 	mov	r4,r2
811036c4:	180b883a 	mov	r5,r3
811036c8:	2021883a 	mov	r16,r4
811036cc:	2823883a 	mov	r17,r5
811036d0:	e13f0d17 	ldw	r4,-972(fp)
811036d4:	11135400 	call	81113540 <__extendsfdf2>
811036d8:	1009883a 	mov	r4,r2
811036dc:	180b883a 	mov	r5,r3
811036e0:	200d883a 	mov	r6,r4
811036e4:	280f883a 	mov	r7,r5
811036e8:	8009883a 	mov	r4,r16
811036ec:	880b883a 	mov	r5,r17
811036f0:	1112e200 	call	81112e20 <__muldf3>
811036f4:	1009883a 	mov	r4,r2
811036f8:	180b883a 	mov	r5,r3
811036fc:	2005883a 	mov	r2,r4
81103700:	2807883a 	mov	r3,r5
81103704:	1009883a 	mov	r4,r2
81103708:	180b883a 	mov	r5,r3
8110370c:	11136580 	call	81113658 <__truncdfsf2>
81103710:	1007883a 	mov	r3,r2
81103714:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103718:	e0bf0c17 	ldw	r2,-976(fp)
8110371c:	1085883a 	add	r2,r2,r2
81103720:	1085883a 	add	r2,r2,r2
81103724:	e0ff0c04 	addi	r3,fp,-976
81103728:	1885883a 	add	r2,r3,r2
8110372c:	10801604 	addi	r2,r2,88
81103730:	10c00017 	ldw	r3,0(r2)
81103734:	180b883a 	mov	r5,r3
81103738:	e13f0d17 	ldw	r4,-972(fp)
8110373c:	11123b00 	call	811123b0 <__divsf3>
81103740:	1007883a 	mov	r3,r2
81103744:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103748:	e0bf0c17 	ldw	r2,-976(fp)
8110374c:	1085883a 	add	r2,r2,r2
81103750:	1085883a 	add	r2,r2,r2
81103754:	e0ff0c04 	addi	r3,fp,-976
81103758:	1885883a 	add	r2,r3,r2
8110375c:	10802204 	addi	r2,r2,136
81103760:	10c00017 	ldw	r3,0(r2)
81103764:	e17f1417 	ldw	r5,-944(fp)
81103768:	1809883a 	mov	r4,r3
8110376c:	11127f80 	call	811127f8 <__mulsf3>
81103770:	1007883a 	mov	r3,r2
81103774:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103778:	e0ff3a04 	addi	r3,fp,-792
8110377c:	e0bf0c17 	ldw	r2,-976(fp)
81103780:	100491ba 	slli	r2,r2,6
81103784:	18a9883a 	add	r20,r3,r2
81103788:	e0bf0c17 	ldw	r2,-976(fp)
8110378c:	1085883a 	add	r2,r2,r2
81103790:	1085883a 	add	r2,r2,r2
81103794:	e0ff0c04 	addi	r3,fp,-976
81103798:	1885883a 	add	r2,r3,r2
8110379c:	10800a04 	addi	r2,r2,40
811037a0:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811037a4:	102b883a 	mov	r21,r2
811037a8:	e13f0d17 	ldw	r4,-972(fp)
811037ac:	11135400 	call	81113540 <__extendsfdf2>
811037b0:	1021883a 	mov	r16,r2
811037b4:	1823883a 	mov	r17,r3
811037b8:	e13f1417 	ldw	r4,-944(fp)
811037bc:	11135400 	call	81113540 <__extendsfdf2>
811037c0:	1025883a 	mov	r18,r2
811037c4:	1827883a 	mov	r19,r3
811037c8:	e13f1517 	ldw	r4,-940(fp)
811037cc:	11135400 	call	81113540 <__extendsfdf2>
811037d0:	1009883a 	mov	r4,r2
811037d4:	180b883a 	mov	r5,r3
811037d8:	d9000415 	stw	r4,16(sp)
811037dc:	d9400515 	stw	r5,20(sp)
811037e0:	dc800215 	stw	r18,8(sp)
811037e4:	dcc00315 	stw	r19,12(sp)
811037e8:	dc000015 	stw	r16,0(sp)
811037ec:	dc400115 	stw	r17,4(sp)
811037f0:	a80f883a 	mov	r7,r21
811037f4:	a00d883a 	mov	r6,r20
811037f8:	01604534 	movhi	r5,33044
811037fc:	297cbd04 	addi	r5,r5,-3340
81103800:	01204534 	movhi	r4,33044
81103804:	21135404 	addi	r4,r4,19792
81103808:	11153700 	call	81115370 <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
8110380c:	d0a05017 	ldw	r2,-32448(gp)
81103810:	01604534 	movhi	r5,33044
81103814:	29535404 	addi	r5,r5,19792
81103818:	1009883a 	mov	r4,r2
8110381c:	11139c00 	call	811139c0 <fprintf>
81103820:	00008f06 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (!SIG && MSB) {
81103824:	e0bf1017 	ldw	r2,-960(fp)
81103828:	1000641e 	bne	r2,zero,811039bc <sense_log+0x60c>
8110382c:	e0bf1117 	ldw	r2,-956(fp)
81103830:	10006226 	beq	r2,zero,811039bc <sense_log+0x60c>
				fVol = fRef * 0.5 * fVolDrop;
81103834:	e13f0e17 	ldw	r4,-968(fp)
81103838:	11135400 	call	81113540 <__extendsfdf2>
8110383c:	1011883a 	mov	r8,r2
81103840:	1813883a 	mov	r9,r3
81103844:	000d883a 	mov	r6,zero
81103848:	01cff834 	movhi	r7,16352
8110384c:	4009883a 	mov	r4,r8
81103850:	480b883a 	mov	r5,r9
81103854:	1112e200 	call	81112e20 <__muldf3>
81103858:	1009883a 	mov	r4,r2
8110385c:	180b883a 	mov	r5,r3
81103860:	2021883a 	mov	r16,r4
81103864:	2823883a 	mov	r17,r5
81103868:	e13f0d17 	ldw	r4,-972(fp)
8110386c:	11135400 	call	81113540 <__extendsfdf2>
81103870:	1009883a 	mov	r4,r2
81103874:	180b883a 	mov	r5,r3
81103878:	200d883a 	mov	r6,r4
8110387c:	280f883a 	mov	r7,r5
81103880:	8009883a 	mov	r4,r16
81103884:	880b883a 	mov	r5,r17
81103888:	1112e200 	call	81112e20 <__muldf3>
8110388c:	1009883a 	mov	r4,r2
81103890:	180b883a 	mov	r5,r3
81103894:	2005883a 	mov	r2,r4
81103898:	2807883a 	mov	r3,r5
8110389c:	1009883a 	mov	r4,r2
811038a0:	180b883a 	mov	r5,r3
811038a4:	11136580 	call	81113658 <__truncdfsf2>
811038a8:	1007883a 	mov	r3,r2
811038ac:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811038b0:	e0bf0c17 	ldw	r2,-976(fp)
811038b4:	1085883a 	add	r2,r2,r2
811038b8:	1085883a 	add	r2,r2,r2
811038bc:	e0ff0c04 	addi	r3,fp,-976
811038c0:	1885883a 	add	r2,r3,r2
811038c4:	10801604 	addi	r2,r2,88
811038c8:	10c00017 	ldw	r3,0(r2)
811038cc:	180b883a 	mov	r5,r3
811038d0:	e13f0d17 	ldw	r4,-972(fp)
811038d4:	11123b00 	call	811123b0 <__divsf3>
811038d8:	1007883a 	mov	r3,r2
811038dc:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811038e0:	e0bf0c17 	ldw	r2,-976(fp)
811038e4:	1085883a 	add	r2,r2,r2
811038e8:	1085883a 	add	r2,r2,r2
811038ec:	e0ff0c04 	addi	r3,fp,-976
811038f0:	1885883a 	add	r2,r3,r2
811038f4:	10802204 	addi	r2,r2,136
811038f8:	10c00017 	ldw	r3,0(r2)
811038fc:	e17f1417 	ldw	r5,-944(fp)
81103900:	1809883a 	mov	r4,r3
81103904:	11127f80 	call	811127f8 <__mulsf3>
81103908:	1007883a 	mov	r3,r2
8110390c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103910:	e0ff3a04 	addi	r3,fp,-792
81103914:	e0bf0c17 	ldw	r2,-976(fp)
81103918:	100491ba 	slli	r2,r2,6
8110391c:	18a9883a 	add	r20,r3,r2
81103920:	e0bf0c17 	ldw	r2,-976(fp)
81103924:	1085883a 	add	r2,r2,r2
81103928:	1085883a 	add	r2,r2,r2
8110392c:	e0ff0c04 	addi	r3,fp,-976
81103930:	1885883a 	add	r2,r3,r2
81103934:	10800a04 	addi	r2,r2,40
81103938:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110393c:	102b883a 	mov	r21,r2
81103940:	e13f0d17 	ldw	r4,-972(fp)
81103944:	11135400 	call	81113540 <__extendsfdf2>
81103948:	1021883a 	mov	r16,r2
8110394c:	1823883a 	mov	r17,r3
81103950:	e13f1417 	ldw	r4,-944(fp)
81103954:	11135400 	call	81113540 <__extendsfdf2>
81103958:	1025883a 	mov	r18,r2
8110395c:	1827883a 	mov	r19,r3
81103960:	e13f1517 	ldw	r4,-940(fp)
81103964:	11135400 	call	81113540 <__extendsfdf2>
81103968:	1009883a 	mov	r4,r2
8110396c:	180b883a 	mov	r5,r3
81103970:	d9000415 	stw	r4,16(sp)
81103974:	d9400515 	stw	r5,20(sp)
81103978:	dc800215 	stw	r18,8(sp)
8110397c:	dcc00315 	stw	r19,12(sp)
81103980:	dc000015 	stw	r16,0(sp)
81103984:	dc400115 	stw	r17,4(sp)
81103988:	a80f883a 	mov	r7,r21
8110398c:	a00d883a 	mov	r6,r20
81103990:	01604534 	movhi	r5,33044
81103994:	297ccd04 	addi	r5,r5,-3276
81103998:	01204534 	movhi	r4,33044
8110399c:	21135404 	addi	r4,r4,19792
811039a0:	11153700 	call	81115370 <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
811039a4:	d0a05017 	ldw	r2,-32448(gp)
811039a8:	01604534 	movhi	r5,33044
811039ac:	29535404 	addi	r5,r5,19792
811039b0:	1009883a 	mov	r4,r2
811039b4:	11139c00 	call	811139c0 <fprintf>
811039b8:	00002906 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (!SIG && !MSB) {
811039bc:	e0bf1017 	ldw	r2,-960(fp)
811039c0:	1000271e 	bne	r2,zero,81103a60 <sense_log+0x6b0>
811039c4:	e0bf1117 	ldw	r2,-956(fp)
811039c8:	1000251e 	bne	r2,zero,81103a60 <sense_log+0x6b0>
				fVol = -fRef * 0.5;
811039cc:	e0bf0e17 	ldw	r2,-968(fp)
811039d0:	10a0003c 	xorhi	r2,r2,32768
811039d4:	014fc034 	movhi	r5,16128
811039d8:	1009883a 	mov	r4,r2
811039dc:	11127f80 	call	811127f8 <__mulsf3>
811039e0:	1007883a 	mov	r3,r2
811039e4:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811039e8:	e0ff3a04 	addi	r3,fp,-792
811039ec:	e0bf0c17 	ldw	r2,-976(fp)
811039f0:	100491ba 	slli	r2,r2,6
811039f4:	18a1883a 	add	r16,r3,r2
811039f8:	e0bf0c17 	ldw	r2,-976(fp)
811039fc:	1085883a 	add	r2,r2,r2
81103a00:	1085883a 	add	r2,r2,r2
81103a04:	e0ff0c04 	addi	r3,fp,-976
81103a08:	1885883a 	add	r2,r3,r2
81103a0c:	10800a04 	addi	r2,r2,40
81103a10:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
81103a14:	1023883a 	mov	r17,r2
81103a18:	e13f1317 	ldw	r4,-948(fp)
81103a1c:	11135400 	call	81113540 <__extendsfdf2>
81103a20:	1009883a 	mov	r4,r2
81103a24:	180b883a 	mov	r5,r3
81103a28:	d9000015 	stw	r4,0(sp)
81103a2c:	d9400115 	stw	r5,4(sp)
81103a30:	880f883a 	mov	r7,r17
81103a34:	800d883a 	mov	r6,r16
81103a38:	01604534 	movhi	r5,33044
81103a3c:	297cdd04 	addi	r5,r5,-3212
81103a40:	01204534 	movhi	r4,33044
81103a44:	21135404 	addi	r4,r4,19792
81103a48:	11153700 	call	81115370 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103a4c:	d0a05017 	ldw	r2,-32448(gp)
81103a50:	01604534 	movhi	r5,33044
81103a54:	29535404 	addi	r5,r5,19792
81103a58:	1009883a 	mov	r4,r2
81103a5c:	11139c00 	call	811139c0 <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81103a60:	e0bf0c17 	ldw	r2,-976(fp)
81103a64:	10800044 	addi	r2,r2,1
81103a68:	e0bf0c15 	stw	r2,-976(fp)
81103a6c:	e0bf0c17 	ldw	r2,-976(fp)
81103a70:	10800308 	cmpgei	r2,r2,12
81103a74:	1000021e 	bne	r2,zero,81103a80 <sense_log+0x6d0>
81103a78:	e0bf0f17 	ldw	r2,-964(fp)
81103a7c:	103eaf1e 	bne	r2,zero,8110353c <__reset+0xfb0e353c>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103a80:	00a04534 	movhi	r2,33044
81103a84:	10935404 	addi	r2,r2,19792
81103a88:	00c00344 	movi	r3,13
81103a8c:	10c00005 	stb	r3,0(r2)
81103a90:	00c00284 	movi	r3,10
81103a94:	10c00045 	stb	r3,1(r2)
81103a98:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103a9c:	d0a05017 	ldw	r2,-32448(gp)
81103aa0:	01604534 	movhi	r5,33044
81103aa4:	29535404 	addi	r5,r5,19792
81103aa8:	1009883a 	mov	r4,r2
81103aac:	11139c00 	call	811139c0 <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
81103ab0:	00001606 	br	81103b0c <sense_log+0x75c>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
81103ab4:	00a04534 	movhi	r2,33044
81103ab8:	10935404 	addi	r2,r2,19792
81103abc:	00c01144 	movi	r3,69
81103ac0:	10c00005 	stb	r3,0(r2)
81103ac4:	00c01c84 	movi	r3,114
81103ac8:	10c00045 	stb	r3,1(r2)
81103acc:	00c01c84 	movi	r3,114
81103ad0:	10c00085 	stb	r3,2(r2)
81103ad4:	00c01bc4 	movi	r3,111
81103ad8:	10c000c5 	stb	r3,3(r2)
81103adc:	00c01c84 	movi	r3,114
81103ae0:	10c00105 	stb	r3,4(r2)
81103ae4:	00c00344 	movi	r3,13
81103ae8:	10c00145 	stb	r3,5(r2)
81103aec:	00c00284 	movi	r3,10
81103af0:	10c00185 	stb	r3,6(r2)
81103af4:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103af8:	d0a05017 	ldw	r2,-32448(gp)
81103afc:	01604534 	movhi	r5,33044
81103b00:	29535404 	addi	r5,r5,19792
81103b04:	1009883a 	mov	r4,r2
81103b08:	11139c00 	call	811139c0 <fprintf>
#endif
	}
}
81103b0c:	0001883a 	nop
81103b10:	e6fffa04 	addi	sp,fp,-24
81103b14:	dfc00717 	ldw	ra,28(sp)
81103b18:	df000617 	ldw	fp,24(sp)
81103b1c:	dd400517 	ldw	r21,20(sp)
81103b20:	dd000417 	ldw	r20,16(sp)
81103b24:	dcc00317 	ldw	r19,12(sp)
81103b28:	dc800217 	ldw	r18,8(sp)
81103b2c:	dc400117 	ldw	r17,4(sp)
81103b30:	dc000017 	ldw	r16,0(sp)
81103b34:	dec00804 	addi	sp,sp,32
81103b38:	f800283a 	ret

81103b3c <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103b3c:	defffc04 	addi	sp,sp,-16
81103b40:	de00012e 	bgeu	sp,et,81103b48 <bSdmaInitM1Dma+0xc>
81103b44:	003b68fa 	trap	3
81103b48:	dfc00315 	stw	ra,12(sp)
81103b4c:	df000215 	stw	fp,8(sp)
81103b50:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103b54:	00800044 	movi	r2,1
81103b58:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103b5c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103b60:	01204534 	movhi	r4,33044
81103b64:	213da604 	addi	r4,r4,-2408
81103b68:	113ce140 	call	8113ce14 <alt_msgdma_open>
81103b6c:	d0a03915 	stw	r2,-32540(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103b70:	d0a03917 	ldw	r2,-32540(gp)
81103b74:	1000021e 	bne	r2,zero,81103b80 <bSdmaInitM1Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103b78:	e03ffe15 	stw	zero,-8(fp)
81103b7c:	00001506 	br	81103bd4 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103b80:	d0a03917 	ldw	r2,-32540(gp)
81103b84:	10800317 	ldw	r2,12(r2)
81103b88:	10800104 	addi	r2,r2,4
81103b8c:	00c00084 	movi	r3,2
81103b90:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b94:	00000a06 	br	81103bc0 <bSdmaInitM1Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103b98:	01000044 	movi	r4,1
81103b9c:	112acf80 	call	8112acf8 <usleep>
			usiCounter++;
81103ba0:	e0bfff0b 	ldhu	r2,-4(fp)
81103ba4:	10800044 	addi	r2,r2,1
81103ba8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103bac:	e0bfff0b 	ldhu	r2,-4(fp)
81103bb0:	1084e230 	cmpltui	r2,r2,5000
81103bb4:	1000021e 	bne	r2,zero,81103bc0 <bSdmaInitM1Dma+0x84>
				bStatus = FALSE;
81103bb8:	e03ffe15 	stw	zero,-8(fp)
				break;
81103bbc:	00000506 	br	81103bd4 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103bc0:	d0a03917 	ldw	r2,-32540(gp)
81103bc4:	10800317 	ldw	r2,12(r2)
81103bc8:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103bcc:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103bd0:	103ff11e 	bne	r2,zero,81103b98 <__reset+0xfb0e3b98>
				break;
			}
		}
	}

	return bStatus;
81103bd4:	e0bffe17 	ldw	r2,-8(fp)
}
81103bd8:	e037883a 	mov	sp,fp
81103bdc:	dfc00117 	ldw	ra,4(sp)
81103be0:	df000017 	ldw	fp,0(sp)
81103be4:	dec00204 	addi	sp,sp,8
81103be8:	f800283a 	ret

81103bec <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
81103bec:	defffc04 	addi	sp,sp,-16
81103bf0:	de00012e 	bgeu	sp,et,81103bf8 <bSdmaInitM2Dma+0xc>
81103bf4:	003b68fa 	trap	3
81103bf8:	dfc00315 	stw	ra,12(sp)
81103bfc:	df000215 	stw	fp,8(sp)
81103c00:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103c04:	00800044 	movi	r2,1
81103c08:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103c0c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103c10:	01204534 	movhi	r4,33044
81103c14:	213dab04 	addi	r4,r4,-2388
81103c18:	113ce140 	call	8113ce14 <alt_msgdma_open>
81103c1c:	d0a03a15 	stw	r2,-32536(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103c20:	d0a03a17 	ldw	r2,-32536(gp)
81103c24:	1000021e 	bne	r2,zero,81103c30 <bSdmaInitM2Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103c28:	e03ffe15 	stw	zero,-8(fp)
81103c2c:	00001506 	br	81103c84 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103c30:	d0a03a17 	ldw	r2,-32536(gp)
81103c34:	10800317 	ldw	r2,12(r2)
81103c38:	10800104 	addi	r2,r2,4
81103c3c:	00c00084 	movi	r3,2
81103c40:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c44:	00000a06 	br	81103c70 <bSdmaInitM2Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103c48:	01000044 	movi	r4,1
81103c4c:	112acf80 	call	8112acf8 <usleep>
			usiCounter++;
81103c50:	e0bfff0b 	ldhu	r2,-4(fp)
81103c54:	10800044 	addi	r2,r2,1
81103c58:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103c5c:	e0bfff0b 	ldhu	r2,-4(fp)
81103c60:	1084e230 	cmpltui	r2,r2,5000
81103c64:	1000021e 	bne	r2,zero,81103c70 <bSdmaInitM2Dma+0x84>
				bStatus = FALSE;
81103c68:	e03ffe15 	stw	zero,-8(fp)
				break;
81103c6c:	00000506 	br	81103c84 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c70:	d0a03a17 	ldw	r2,-32536(gp)
81103c74:	10800317 	ldw	r2,12(r2)
81103c78:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103c7c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c80:	103ff11e 	bne	r2,zero,81103c48 <__reset+0xfb0e3c48>
				break;
			}
		}
	}

	return bStatus;
81103c84:	e0bffe17 	ldw	r2,-8(fp)
}
81103c88:	e037883a 	mov	sp,fp
81103c8c:	dfc00117 	ldw	ra,4(sp)
81103c90:	df000017 	ldw	fp,0(sp)
81103c94:	dec00204 	addi	sp,sp,8
81103c98:	f800283a 	ret

81103c9c <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103c9c:	deffe904 	addi	sp,sp,-92
81103ca0:	de00012e 	bgeu	sp,et,81103ca8 <bSdmaDmaM1Transfer+0xc>
81103ca4:	003b68fa 	trap	3
81103ca8:	dfc01615 	stw	ra,88(sp)
81103cac:	df001515 	stw	fp,84(sp)
81103cb0:	dc001415 	stw	r16,80(sp)
81103cb4:	df001504 	addi	fp,sp,84
81103cb8:	e13ffb15 	stw	r4,-20(fp)
81103cbc:	2809883a 	mov	r4,r5
81103cc0:	3007883a 	mov	r3,r6
81103cc4:	3805883a 	mov	r2,r7
81103cc8:	e13ffc0d 	sth	r4,-16(fp)
81103ccc:	e0fffd05 	stb	r3,-12(fp)
81103cd0:	e0bffe05 	stb	r2,-8(fp)
81103cd4:	defff004 	addi	sp,sp,-64
81103cd8:	d8800904 	addi	r2,sp,36
81103cdc:	108007c4 	addi	r2,r2,31
81103ce0:	1004d17a 	srli	r2,r2,5
81103ce4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103ce8:	00800044 	movi	r2,1
81103cec:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103cf0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103cf4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103cf8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103cfc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103d00:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103d04:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103d08:	e0bffe03 	ldbu	r2,-8(fp)
81103d0c:	10c00268 	cmpgeui	r3,r2,9
81103d10:	1800a51e 	bne	r3,zero,81103fa8 <bSdmaDmaM1Transfer+0x30c>
81103d14:	100690ba 	slli	r3,r2,2
81103d18:	00a04434 	movhi	r2,33040
81103d1c:	108f4b04 	addi	r2,r2,15660
81103d20:	1885883a 	add	r2,r3,r2
81103d24:	10800017 	ldw	r2,0(r2)
81103d28:	1000683a 	jmp	r2
81103d2c:	81103fa8 	cmpgeui	r4,r16,16638
81103d30:	81103d50 	cmplti	r4,r16,16629
81103d34:	81103d94 	ori	r4,r16,16630
81103d38:	81103de0 	cmpeqi	r4,r16,16631
81103d3c:	81103e2c 	andhi	r4,r16,16632
81103d40:	81103e78 	rdprs	r4,r16,16633
81103d44:	81103ec4 	addi	r4,r16,16635
81103d48:	81103f10 	cmplti	r4,r16,16636
81103d4c:	81103f5c 	xori	r4,r16,16637
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103d50:	e0bffd03 	ldbu	r2,-12(fp)
81103d54:	10000326 	beq	r2,zero,81103d64 <bSdmaDmaM1Transfer+0xc8>
81103d58:	10800060 	cmpeqi	r2,r2,1
81103d5c:	1000051e 	bne	r2,zero,81103d74 <bSdmaDmaM1Transfer+0xd8>
81103d60:	00000906 	br	81103d88 <bSdmaDmaM1Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103d64:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103d68:	00800044 	movi	r2,1
81103d6c:	e0bff715 	stw	r2,-36(fp)
			break;
81103d70:	00000706 	br	81103d90 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103d74:	00800074 	movhi	r2,1
81103d78:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103d7c:	00800044 	movi	r2,1
81103d80:	e0bff715 	stw	r2,-36(fp)
			break;
81103d84:	00000206 	br	81103d90 <bSdmaDmaM1Transfer+0xf4>
		default:
			bStatus = FALSE;
81103d88:	e03ff415 	stw	zero,-48(fp)
			break;
81103d8c:	0001883a 	nop
		}
		break;
81103d90:	00008706 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103d94:	e0bffd03 	ldbu	r2,-12(fp)
81103d98:	10000326 	beq	r2,zero,81103da8 <bSdmaDmaM1Transfer+0x10c>
81103d9c:	10800060 	cmpeqi	r2,r2,1
81103da0:	1000061e 	bne	r2,zero,81103dbc <bSdmaDmaM1Transfer+0x120>
81103da4:	00000b06 	br	81103dd4 <bSdmaDmaM1Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103da8:	00880004 	movi	r2,8192
81103dac:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103db0:	00800044 	movi	r2,1
81103db4:	e0bff715 	stw	r2,-36(fp)
			break;
81103db8:	00000806 	br	81103ddc <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103dbc:	00800074 	movhi	r2,1
81103dc0:	10880004 	addi	r2,r2,8192
81103dc4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103dc8:	00800044 	movi	r2,1
81103dcc:	e0bff715 	stw	r2,-36(fp)
			break;
81103dd0:	00000206 	br	81103ddc <bSdmaDmaM1Transfer+0x140>
		default:
			bStatus = FALSE;
81103dd4:	e03ff415 	stw	zero,-48(fp)
			break;
81103dd8:	0001883a 	nop
		}
		break;
81103ddc:	00007406 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103de0:	e0bffd03 	ldbu	r2,-12(fp)
81103de4:	10000326 	beq	r2,zero,81103df4 <bSdmaDmaM1Transfer+0x158>
81103de8:	10800060 	cmpeqi	r2,r2,1
81103dec:	1000061e 	bne	r2,zero,81103e08 <bSdmaDmaM1Transfer+0x16c>
81103df0:	00000b06 	br	81103e20 <bSdmaDmaM1Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103df4:	00900004 	movi	r2,16384
81103df8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103dfc:	00800044 	movi	r2,1
81103e00:	e0bff715 	stw	r2,-36(fp)
			break;
81103e04:	00000806 	br	81103e28 <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103e08:	00800074 	movhi	r2,1
81103e0c:	10900004 	addi	r2,r2,16384
81103e10:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103e14:	00800044 	movi	r2,1
81103e18:	e0bff715 	stw	r2,-36(fp)
			break;
81103e1c:	00000206 	br	81103e28 <bSdmaDmaM1Transfer+0x18c>
		default:
			bStatus = FALSE;
81103e20:	e03ff415 	stw	zero,-48(fp)
			break;
81103e24:	0001883a 	nop
		}
		break;
81103e28:	00006106 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103e2c:	e0bffd03 	ldbu	r2,-12(fp)
81103e30:	10000326 	beq	r2,zero,81103e40 <bSdmaDmaM1Transfer+0x1a4>
81103e34:	10800060 	cmpeqi	r2,r2,1
81103e38:	1000061e 	bne	r2,zero,81103e54 <bSdmaDmaM1Transfer+0x1b8>
81103e3c:	00000b06 	br	81103e6c <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103e40:	00980004 	movi	r2,24576
81103e44:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103e48:	00800044 	movi	r2,1
81103e4c:	e0bff715 	stw	r2,-36(fp)
			break;
81103e50:	00000806 	br	81103e74 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103e54:	00800074 	movhi	r2,1
81103e58:	10980004 	addi	r2,r2,24576
81103e5c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103e60:	00800044 	movi	r2,1
81103e64:	e0bff715 	stw	r2,-36(fp)
			break;
81103e68:	00000206 	br	81103e74 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bStatus = FALSE;
81103e6c:	e03ff415 	stw	zero,-48(fp)
			break;
81103e70:	0001883a 	nop
		}
		break;
81103e74:	00004e06 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103e78:	e0bffd03 	ldbu	r2,-12(fp)
81103e7c:	10000326 	beq	r2,zero,81103e8c <bSdmaDmaM1Transfer+0x1f0>
81103e80:	10800060 	cmpeqi	r2,r2,1
81103e84:	1000061e 	bne	r2,zero,81103ea0 <bSdmaDmaM1Transfer+0x204>
81103e88:	00000b06 	br	81103eb8 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103e8c:	00a00014 	movui	r2,32768
81103e90:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103e94:	00800044 	movi	r2,1
81103e98:	e0bff715 	stw	r2,-36(fp)
			break;
81103e9c:	00000806 	br	81103ec0 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103ea0:	008000b4 	movhi	r2,2
81103ea4:	10a00004 	addi	r2,r2,-32768
81103ea8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103eac:	00800044 	movi	r2,1
81103eb0:	e0bff715 	stw	r2,-36(fp)
			break;
81103eb4:	00000206 	br	81103ec0 <bSdmaDmaM1Transfer+0x224>
		default:
			bStatus = FALSE;
81103eb8:	e03ff415 	stw	zero,-48(fp)
			break;
81103ebc:	0001883a 	nop
		}
		break;
81103ec0:	00003b06 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103ec4:	e0bffd03 	ldbu	r2,-12(fp)
81103ec8:	10000326 	beq	r2,zero,81103ed8 <bSdmaDmaM1Transfer+0x23c>
81103ecc:	10800060 	cmpeqi	r2,r2,1
81103ed0:	1000061e 	bne	r2,zero,81103eec <bSdmaDmaM1Transfer+0x250>
81103ed4:	00000b06 	br	81103f04 <bSdmaDmaM1Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103ed8:	00a80014 	movui	r2,40960
81103edc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103ee0:	00800044 	movi	r2,1
81103ee4:	e0bff715 	stw	r2,-36(fp)
			break;
81103ee8:	00000806 	br	81103f0c <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103eec:	008000b4 	movhi	r2,2
81103ef0:	10a80004 	addi	r2,r2,-24576
81103ef4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103ef8:	00800044 	movi	r2,1
81103efc:	e0bff715 	stw	r2,-36(fp)
			break;
81103f00:	00000206 	br	81103f0c <bSdmaDmaM1Transfer+0x270>
		default:
			bStatus = FALSE;
81103f04:	e03ff415 	stw	zero,-48(fp)
			break;
81103f08:	0001883a 	nop
		}
		break;
81103f0c:	00002806 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103f10:	e0bffd03 	ldbu	r2,-12(fp)
81103f14:	10000326 	beq	r2,zero,81103f24 <bSdmaDmaM1Transfer+0x288>
81103f18:	10800060 	cmpeqi	r2,r2,1
81103f1c:	1000061e 	bne	r2,zero,81103f38 <bSdmaDmaM1Transfer+0x29c>
81103f20:	00000b06 	br	81103f50 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103f24:	00b00014 	movui	r2,49152
81103f28:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103f2c:	00800044 	movi	r2,1
81103f30:	e0bff715 	stw	r2,-36(fp)
			break;
81103f34:	00000806 	br	81103f58 <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103f38:	008000b4 	movhi	r2,2
81103f3c:	10b00004 	addi	r2,r2,-16384
81103f40:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103f44:	00800044 	movi	r2,1
81103f48:	e0bff715 	stw	r2,-36(fp)
			break;
81103f4c:	00000206 	br	81103f58 <bSdmaDmaM1Transfer+0x2bc>
		default:
			bStatus = FALSE;
81103f50:	e03ff415 	stw	zero,-48(fp)
			break;
81103f54:	0001883a 	nop
		}
		break;
81103f58:	00001506 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103f5c:	e0bffd03 	ldbu	r2,-12(fp)
81103f60:	10000326 	beq	r2,zero,81103f70 <bSdmaDmaM1Transfer+0x2d4>
81103f64:	10800060 	cmpeqi	r2,r2,1
81103f68:	1000061e 	bne	r2,zero,81103f84 <bSdmaDmaM1Transfer+0x2e8>
81103f6c:	00000b06 	br	81103f9c <bSdmaDmaM1Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103f70:	00b80014 	movui	r2,57344
81103f74:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103f78:	00800044 	movi	r2,1
81103f7c:	e0bff715 	stw	r2,-36(fp)
			break;
81103f80:	00000806 	br	81103fa4 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103f84:	008000b4 	movhi	r2,2
81103f88:	10b80004 	addi	r2,r2,-8192
81103f8c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103f90:	00800044 	movi	r2,1
81103f94:	e0bff715 	stw	r2,-36(fp)
			break;
81103f98:	00000206 	br	81103fa4 <bSdmaDmaM1Transfer+0x308>
		default:
			bStatus = FALSE;
81103f9c:	e03ff415 	stw	zero,-48(fp)
			break;
81103fa0:	0001883a 	nop
		}
		break;
81103fa4:	00000206 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	default:
		bStatus = FALSE;
81103fa8:	e03ff415 	stw	zero,-48(fp)
		break;
81103fac:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
81103fb0:	e0bffb17 	ldw	r2,-20(fp)
81103fb4:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103fb8:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103fbc:	e0bff417 	ldw	r2,-48(fp)
81103fc0:	10003b26 	beq	r2,zero,811040b0 <bSdmaDmaM1Transfer+0x414>
		if (pxDmaM1Dev == NULL) {
81103fc4:	d0a03917 	ldw	r2,-32540(gp)
81103fc8:	1000021e 	bne	r2,zero,81103fd4 <bSdmaDmaM1Transfer+0x338>
			bStatus = FALSE;
81103fcc:	e03ff415 	stw	zero,-48(fp)
81103fd0:	00003706 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103fd4:	e03ff50d 	sth	zero,-44(fp)
81103fd8:	00003206 	br	811040a4 <bSdmaDmaM1Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103fdc:	01000044 	movi	r4,1
81103fe0:	11292440 	call	81129244 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103fe4:	d0a03917 	ldw	r2,-32540(gp)
81103fe8:	10800317 	ldw	r2,12(r2)
81103fec:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103ff0:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103ff4:	103ff91e 	bne	r2,zero,81103fdc <__reset+0xfb0e3fdc>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103ff8:	d2203917 	ldw	r8,-32540(gp)
81103ffc:	e17ff817 	ldw	r5,-32(fp)
81104000:	e1bff617 	ldw	r6,-40(fp)
81104004:	e0bff917 	ldw	r2,-28(fp)
81104008:	e0fff717 	ldw	r3,-36(fp)
8110400c:	01000044 	movi	r4,1
81104010:	d9000815 	stw	r4,32(sp)
81104014:	01000044 	movi	r4,1
81104018:	d9000715 	stw	r4,28(sp)
8110401c:	01000044 	movi	r4,1
81104020:	d9000615 	stw	r4,24(sp)
81104024:	01000044 	movi	r4,1
81104028:	d9000515 	stw	r4,20(sp)
8110402c:	01000044 	movi	r4,1
81104030:	d9000415 	stw	r4,16(sp)
81104034:	d8c00315 	stw	r3,12(sp)
81104038:	d8800215 	stw	r2,8(sp)
8110403c:	e0bffa17 	ldw	r2,-24(fp)
81104040:	d8800115 	stw	r2,4(sp)
81104044:	00802204 	movi	r2,136
81104048:	d8800015 	stw	r2,0(sp)
8110404c:	300f883a 	mov	r7,r6
81104050:	280d883a 	mov	r6,r5
81104054:	800b883a 	mov	r5,r16
81104058:	4009883a 	mov	r4,r8
8110405c:	1106bf00 	call	81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104060:	10000226 	beq	r2,zero,8110406c <bSdmaDmaM1Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81104064:	e03ff415 	stw	zero,-48(fp)
					break;
81104068:	00001106 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
8110406c:	d0a03917 	ldw	r2,-32540(gp)
81104070:	800b883a 	mov	r5,r16
81104074:	1009883a 	mov	r4,r2
81104078:	1106cf40 	call	81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>
8110407c:	10000226 	beq	r2,zero,81104088 <bSdmaDmaM1Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104080:	e03ff415 	stw	zero,-48(fp)
						break;
81104084:	00000a06 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104088:	e0bff817 	ldw	r2,-32(fp)
8110408c:	10802204 	addi	r2,r2,136
81104090:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81104094:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104098:	e0bff50b 	ldhu	r2,-44(fp)
8110409c:	10800044 	addi	r2,r2,1
811040a0:	e0bff50d 	sth	r2,-44(fp)
811040a4:	e0fff50b 	ldhu	r3,-44(fp)
811040a8:	e0bffc0b 	ldhu	r2,-16(fp)
811040ac:	18bfcd36 	bltu	r3,r2,81103fe4 <__reset+0xfb0e3fe4>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811040b0:	e0bff417 	ldw	r2,-48(fp)
}
811040b4:	e6ffff04 	addi	sp,fp,-4
811040b8:	dfc00217 	ldw	ra,8(sp)
811040bc:	df000117 	ldw	fp,4(sp)
811040c0:	dc000017 	ldw	r16,0(sp)
811040c4:	dec00304 	addi	sp,sp,12
811040c8:	f800283a 	ret

811040cc <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
811040cc:	deffe904 	addi	sp,sp,-92
811040d0:	de00012e 	bgeu	sp,et,811040d8 <bSdmaDmaM2Transfer+0xc>
811040d4:	003b68fa 	trap	3
811040d8:	dfc01615 	stw	ra,88(sp)
811040dc:	df001515 	stw	fp,84(sp)
811040e0:	dc001415 	stw	r16,80(sp)
811040e4:	df001504 	addi	fp,sp,84
811040e8:	e13ffb15 	stw	r4,-20(fp)
811040ec:	2809883a 	mov	r4,r5
811040f0:	3007883a 	mov	r3,r6
811040f4:	3805883a 	mov	r2,r7
811040f8:	e13ffc0d 	sth	r4,-16(fp)
811040fc:	e0fffd05 	stb	r3,-12(fp)
81104100:	e0bffe05 	stb	r2,-8(fp)
81104104:	defff004 	addi	sp,sp,-64
81104108:	d8800904 	addi	r2,sp,36
8110410c:	108007c4 	addi	r2,r2,31
81104110:	1004d17a 	srli	r2,r2,5
81104114:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81104118:	00800044 	movi	r2,1
8110411c:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81104120:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81104124:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81104128:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
8110412c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81104130:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81104134:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81104138:	e0bffe03 	ldbu	r2,-8(fp)
8110413c:	10c00268 	cmpgeui	r3,r2,9
81104140:	1800a51e 	bne	r3,zero,811043d8 <bSdmaDmaM2Transfer+0x30c>
81104144:	100690ba 	slli	r3,r2,2
81104148:	00a04434 	movhi	r2,33040
8110414c:	10905704 	addi	r2,r2,16732
81104150:	1885883a 	add	r2,r3,r2
81104154:	10800017 	ldw	r2,0(r2)
81104158:	1000683a 	jmp	r2
8110415c:	811043d8 	cmpnei	r4,r16,16655
81104160:	81104180 	call	88110418 <__reset+0x20f0418>
81104164:	811041c4 	addi	r4,r16,16647
81104168:	81104210 	cmplti	r4,r16,16648
8110416c:	8110425c 	xori	r4,r16,16649
81104170:	811042a8 	cmpgeui	r4,r16,16650
81104174:	811042f4 	orhi	r4,r16,16651
81104178:	81104340 	call	88110434 <__reset+0x20f0434>
8110417c:	8110438c 	andi	r4,r16,16654
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81104180:	e0bffd03 	ldbu	r2,-12(fp)
81104184:	10000326 	beq	r2,zero,81104194 <bSdmaDmaM2Transfer+0xc8>
81104188:	10800060 	cmpeqi	r2,r2,1
8110418c:	1000051e 	bne	r2,zero,811041a4 <bSdmaDmaM2Transfer+0xd8>
81104190:	00000906 	br	811041b8 <bSdmaDmaM2Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81104194:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81104198:	00800044 	movi	r2,1
8110419c:	e0bff715 	stw	r2,-36(fp)
			break;
811041a0:	00000706 	br	811041c0 <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
811041a4:	00800074 	movhi	r2,1
811041a8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
811041ac:	00800044 	movi	r2,1
811041b0:	e0bff715 	stw	r2,-36(fp)
			break;
811041b4:	00000206 	br	811041c0 <bSdmaDmaM2Transfer+0xf4>
		default:
			bStatus = FALSE;
811041b8:	e03ff415 	stw	zero,-48(fp)
			break;
811041bc:	0001883a 	nop
		}
		break;
811041c0:	00008706 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
811041c4:	e0bffd03 	ldbu	r2,-12(fp)
811041c8:	10000326 	beq	r2,zero,811041d8 <bSdmaDmaM2Transfer+0x10c>
811041cc:	10800060 	cmpeqi	r2,r2,1
811041d0:	1000061e 	bne	r2,zero,811041ec <bSdmaDmaM2Transfer+0x120>
811041d4:	00000b06 	br	81104204 <bSdmaDmaM2Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
811041d8:	00880004 	movi	r2,8192
811041dc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
811041e0:	00800044 	movi	r2,1
811041e4:	e0bff715 	stw	r2,-36(fp)
			break;
811041e8:	00000806 	br	8110420c <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
811041ec:	00800074 	movhi	r2,1
811041f0:	10880004 	addi	r2,r2,8192
811041f4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
811041f8:	00800044 	movi	r2,1
811041fc:	e0bff715 	stw	r2,-36(fp)
			break;
81104200:	00000206 	br	8110420c <bSdmaDmaM2Transfer+0x140>
		default:
			bStatus = FALSE;
81104204:	e03ff415 	stw	zero,-48(fp)
			break;
81104208:	0001883a 	nop
		}
		break;
8110420c:	00007406 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81104210:	e0bffd03 	ldbu	r2,-12(fp)
81104214:	10000326 	beq	r2,zero,81104224 <bSdmaDmaM2Transfer+0x158>
81104218:	10800060 	cmpeqi	r2,r2,1
8110421c:	1000061e 	bne	r2,zero,81104238 <bSdmaDmaM2Transfer+0x16c>
81104220:	00000b06 	br	81104250 <bSdmaDmaM2Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81104224:	00900004 	movi	r2,16384
81104228:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
8110422c:	00800044 	movi	r2,1
81104230:	e0bff715 	stw	r2,-36(fp)
			break;
81104234:	00000806 	br	81104258 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81104238:	00800074 	movhi	r2,1
8110423c:	10900004 	addi	r2,r2,16384
81104240:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81104244:	00800044 	movi	r2,1
81104248:	e0bff715 	stw	r2,-36(fp)
			break;
8110424c:	00000206 	br	81104258 <bSdmaDmaM2Transfer+0x18c>
		default:
			bStatus = FALSE;
81104250:	e03ff415 	stw	zero,-48(fp)
			break;
81104254:	0001883a 	nop
		}
		break;
81104258:	00006106 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
8110425c:	e0bffd03 	ldbu	r2,-12(fp)
81104260:	10000326 	beq	r2,zero,81104270 <bSdmaDmaM2Transfer+0x1a4>
81104264:	10800060 	cmpeqi	r2,r2,1
81104268:	1000061e 	bne	r2,zero,81104284 <bSdmaDmaM2Transfer+0x1b8>
8110426c:	00000b06 	br	8110429c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81104270:	00980004 	movi	r2,24576
81104274:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81104278:	00800044 	movi	r2,1
8110427c:	e0bff715 	stw	r2,-36(fp)
			break;
81104280:	00000806 	br	811042a4 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81104284:	00800074 	movhi	r2,1
81104288:	10980004 	addi	r2,r2,24576
8110428c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81104290:	00800044 	movi	r2,1
81104294:	e0bff715 	stw	r2,-36(fp)
			break;
81104298:	00000206 	br	811042a4 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bStatus = FALSE;
8110429c:	e03ff415 	stw	zero,-48(fp)
			break;
811042a0:	0001883a 	nop
		}
		break;
811042a4:	00004e06 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
811042a8:	e0bffd03 	ldbu	r2,-12(fp)
811042ac:	10000326 	beq	r2,zero,811042bc <bSdmaDmaM2Transfer+0x1f0>
811042b0:	10800060 	cmpeqi	r2,r2,1
811042b4:	1000061e 	bne	r2,zero,811042d0 <bSdmaDmaM2Transfer+0x204>
811042b8:	00000b06 	br	811042e8 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
811042bc:	00a00014 	movui	r2,32768
811042c0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
811042c4:	00800044 	movi	r2,1
811042c8:	e0bff715 	stw	r2,-36(fp)
			break;
811042cc:	00000806 	br	811042f0 <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
811042d0:	008000b4 	movhi	r2,2
811042d4:	10a00004 	addi	r2,r2,-32768
811042d8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
811042dc:	00800044 	movi	r2,1
811042e0:	e0bff715 	stw	r2,-36(fp)
			break;
811042e4:	00000206 	br	811042f0 <bSdmaDmaM2Transfer+0x224>
		default:
			bStatus = FALSE;
811042e8:	e03ff415 	stw	zero,-48(fp)
			break;
811042ec:	0001883a 	nop
		}
		break;
811042f0:	00003b06 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
811042f4:	e0bffd03 	ldbu	r2,-12(fp)
811042f8:	10000326 	beq	r2,zero,81104308 <bSdmaDmaM2Transfer+0x23c>
811042fc:	10800060 	cmpeqi	r2,r2,1
81104300:	1000061e 	bne	r2,zero,8110431c <bSdmaDmaM2Transfer+0x250>
81104304:	00000b06 	br	81104334 <bSdmaDmaM2Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81104308:	00a80014 	movui	r2,40960
8110430c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81104310:	00800044 	movi	r2,1
81104314:	e0bff715 	stw	r2,-36(fp)
			break;
81104318:	00000806 	br	8110433c <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
8110431c:	008000b4 	movhi	r2,2
81104320:	10a80004 	addi	r2,r2,-24576
81104324:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81104328:	00800044 	movi	r2,1
8110432c:	e0bff715 	stw	r2,-36(fp)
			break;
81104330:	00000206 	br	8110433c <bSdmaDmaM2Transfer+0x270>
		default:
			bStatus = FALSE;
81104334:	e03ff415 	stw	zero,-48(fp)
			break;
81104338:	0001883a 	nop
		}
		break;
8110433c:	00002806 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81104340:	e0bffd03 	ldbu	r2,-12(fp)
81104344:	10000326 	beq	r2,zero,81104354 <bSdmaDmaM2Transfer+0x288>
81104348:	10800060 	cmpeqi	r2,r2,1
8110434c:	1000061e 	bne	r2,zero,81104368 <bSdmaDmaM2Transfer+0x29c>
81104350:	00000b06 	br	81104380 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81104354:	00b00014 	movui	r2,49152
81104358:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
8110435c:	00800044 	movi	r2,1
81104360:	e0bff715 	stw	r2,-36(fp)
			break;
81104364:	00000806 	br	81104388 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81104368:	008000b4 	movhi	r2,2
8110436c:	10b00004 	addi	r2,r2,-16384
81104370:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81104374:	00800044 	movi	r2,1
81104378:	e0bff715 	stw	r2,-36(fp)
			break;
8110437c:	00000206 	br	81104388 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bStatus = FALSE;
81104380:	e03ff415 	stw	zero,-48(fp)
			break;
81104384:	0001883a 	nop
		}
		break;
81104388:	00001506 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110438c:	e0bffd03 	ldbu	r2,-12(fp)
81104390:	10000326 	beq	r2,zero,811043a0 <bSdmaDmaM2Transfer+0x2d4>
81104394:	10800060 	cmpeqi	r2,r2,1
81104398:	1000061e 	bne	r2,zero,811043b4 <bSdmaDmaM2Transfer+0x2e8>
8110439c:	00000b06 	br	811043cc <bSdmaDmaM2Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
811043a0:	00b80014 	movui	r2,57344
811043a4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
811043a8:	00800044 	movi	r2,1
811043ac:	e0bff715 	stw	r2,-36(fp)
			break;
811043b0:	00000806 	br	811043d4 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
811043b4:	008000b4 	movhi	r2,2
811043b8:	10b80004 	addi	r2,r2,-8192
811043bc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
811043c0:	00800044 	movi	r2,1
811043c4:	e0bff715 	stw	r2,-36(fp)
			break;
811043c8:	00000206 	br	811043d4 <bSdmaDmaM2Transfer+0x308>
		default:
			bStatus = FALSE;
811043cc:	e03ff415 	stw	zero,-48(fp)
			break;
811043d0:	0001883a 	nop
		}
		break;
811043d4:	00000206 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	default:
		bStatus = FALSE;
811043d8:	e03ff415 	stw	zero,-48(fp)
		break;
811043dc:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
811043e0:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
811043e4:	00a00034 	movhi	r2,32768
811043e8:	1885883a 	add	r2,r3,r2
811043ec:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
811043f0:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
811043f4:	e0bff417 	ldw	r2,-48(fp)
811043f8:	10003b26 	beq	r2,zero,811044e8 <bSdmaDmaM2Transfer+0x41c>
		if (pxDmaM2Dev == NULL) {
811043fc:	d0a03a17 	ldw	r2,-32536(gp)
81104400:	1000021e 	bne	r2,zero,8110440c <bSdmaDmaM2Transfer+0x340>
			bStatus = FALSE;
81104404:	e03ff415 	stw	zero,-48(fp)
81104408:	00003706 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
8110440c:	e03ff50d 	sth	zero,-44(fp)
81104410:	00003206 	br	811044dc <bSdmaDmaM2Transfer+0x410>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81104414:	01000044 	movi	r4,1
81104418:	11292440 	call	81129244 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
8110441c:	d0a03a17 	ldw	r2,-32536(gp)
81104420:	10800317 	ldw	r2,12(r2)
81104424:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81104428:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
8110442c:	103ff91e 	bne	r2,zero,81104414 <__reset+0xfb0e4414>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
81104430:	d2203a17 	ldw	r8,-32536(gp)
81104434:	e17ff817 	ldw	r5,-32(fp)
81104438:	e1bff617 	ldw	r6,-40(fp)
8110443c:	e0bff917 	ldw	r2,-28(fp)
81104440:	e0fff717 	ldw	r3,-36(fp)
81104444:	01000044 	movi	r4,1
81104448:	d9000815 	stw	r4,32(sp)
8110444c:	01000044 	movi	r4,1
81104450:	d9000715 	stw	r4,28(sp)
81104454:	01000044 	movi	r4,1
81104458:	d9000615 	stw	r4,24(sp)
8110445c:	01000044 	movi	r4,1
81104460:	d9000515 	stw	r4,20(sp)
81104464:	01000044 	movi	r4,1
81104468:	d9000415 	stw	r4,16(sp)
8110446c:	d8c00315 	stw	r3,12(sp)
81104470:	d8800215 	stw	r2,8(sp)
81104474:	e0bffa17 	ldw	r2,-24(fp)
81104478:	d8800115 	stw	r2,4(sp)
8110447c:	00802204 	movi	r2,136
81104480:	d8800015 	stw	r2,0(sp)
81104484:	300f883a 	mov	r7,r6
81104488:	280d883a 	mov	r6,r5
8110448c:	800b883a 	mov	r5,r16
81104490:	4009883a 	mov	r4,r8
81104494:	1106bf00 	call	81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104498:	10000226 	beq	r2,zero,811044a4 <bSdmaDmaM2Transfer+0x3d8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
8110449c:	e03ff415 	stw	zero,-48(fp)
					break;
811044a0:	00001106 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
811044a4:	d0a03a17 	ldw	r2,-32536(gp)
811044a8:	800b883a 	mov	r5,r16
811044ac:	1009883a 	mov	r4,r2
811044b0:	1106cf40 	call	81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>
811044b4:	10000226 	beq	r2,zero,811044c0 <bSdmaDmaM2Transfer+0x3f4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
811044b8:	e03ff415 	stw	zero,-48(fp)
						break;
811044bc:	00000a06 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
811044c0:	e0bff817 	ldw	r2,-32(fp)
811044c4:	10802204 	addi	r2,r2,136
811044c8:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
811044cc:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
811044d0:	e0bff50b 	ldhu	r2,-44(fp)
811044d4:	10800044 	addi	r2,r2,1
811044d8:	e0bff50d 	sth	r2,-44(fp)
811044dc:	e0fff50b 	ldhu	r3,-44(fp)
811044e0:	e0bffc0b 	ldhu	r2,-16(fp)
811044e4:	18bfcd36 	bltu	r3,r2,8110441c <__reset+0xfb0e441c>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811044e8:	e0bff417 	ldw	r2,-48(fp)
}
811044ec:	e6ffff04 	addi	sp,fp,-4
811044f0:	dfc00217 	ldw	ra,8(sp)
811044f4:	df000117 	ldw	fp,4(sp)
811044f8:	dc000017 	ldw	r16,0(sp)
811044fc:	dec00304 	addi	sp,sp,12
81104500:	f800283a 	ret

81104504 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81104504:	defffc04 	addi	sp,sp,-16
81104508:	de00012e 	bgeu	sp,et,81104510 <vFeebCh1HandleIrq+0xc>
8110450c:	003b68fa 	trap	3
81104510:	dfc00315 	stw	ra,12(sp)
81104514:	df000215 	stw	fp,8(sp)
81104518:	df000204 	addi	fp,sp,8
8110451c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104520:	e0bfff17 	ldw	r2,-4(fp)
81104524:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
81104528:	11047040 	call	81104704 <vFeebCh1IrqFlagClrBufferEmpty>
}
8110452c:	0001883a 	nop
81104530:	e037883a 	mov	sp,fp
81104534:	dfc00117 	ldw	ra,4(sp)
81104538:	df000017 	ldw	fp,0(sp)
8110453c:	dec00204 	addi	sp,sp,8
81104540:	f800283a 	ret

81104544 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
81104544:	defffc04 	addi	sp,sp,-16
81104548:	de00012e 	bgeu	sp,et,81104550 <vFeebCh2HandleIrq+0xc>
8110454c:	003b68fa 	trap	3
81104550:	dfc00315 	stw	ra,12(sp)
81104554:	df000215 	stw	fp,8(sp)
81104558:	df000204 	addi	fp,sp,8
8110455c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104560:	e0bfff17 	ldw	r2,-4(fp)
81104564:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
81104568:	11047480 	call	81104748 <vFeebCh2IrqFlagClrBufferEmpty>
}
8110456c:	0001883a 	nop
81104570:	e037883a 	mov	sp,fp
81104574:	dfc00117 	ldw	ra,4(sp)
81104578:	df000017 	ldw	fp,0(sp)
8110457c:	dec00204 	addi	sp,sp,8
81104580:	f800283a 	ret

81104584 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104584:	defffc04 	addi	sp,sp,-16
81104588:	de00012e 	bgeu	sp,et,81104590 <vFeebCh3HandleIrq+0xc>
8110458c:	003b68fa 	trap	3
81104590:	dfc00315 	stw	ra,12(sp)
81104594:	df000215 	stw	fp,8(sp)
81104598:	df000204 	addi	fp,sp,8
8110459c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045a0:	e0bfff17 	ldw	r2,-4(fp)
811045a4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
811045a8:	110478c0 	call	8110478c <vFeebCh3IrqFlagClrBufferEmpty>
}
811045ac:	0001883a 	nop
811045b0:	e037883a 	mov	sp,fp
811045b4:	dfc00117 	ldw	ra,4(sp)
811045b8:	df000017 	ldw	fp,0(sp)
811045bc:	dec00204 	addi	sp,sp,8
811045c0:	f800283a 	ret

811045c4 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
811045c4:	defffc04 	addi	sp,sp,-16
811045c8:	de00012e 	bgeu	sp,et,811045d0 <vFeebCh4HandleIrq+0xc>
811045cc:	003b68fa 	trap	3
811045d0:	dfc00315 	stw	ra,12(sp)
811045d4:	df000215 	stw	fp,8(sp)
811045d8:	df000204 	addi	fp,sp,8
811045dc:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045e0:	e0bfff17 	ldw	r2,-4(fp)
811045e4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
811045e8:	11047d00 	call	811047d0 <vFeebCh4IrqFlagClrBufferEmpty>
}
811045ec:	0001883a 	nop
811045f0:	e037883a 	mov	sp,fp
811045f4:	dfc00117 	ldw	ra,4(sp)
811045f8:	df000017 	ldw	fp,0(sp)
811045fc:	dec00204 	addi	sp,sp,8
81104600:	f800283a 	ret

81104604 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81104604:	defffc04 	addi	sp,sp,-16
81104608:	de00012e 	bgeu	sp,et,81104610 <vFeebCh5HandleIrq+0xc>
8110460c:	003b68fa 	trap	3
81104610:	dfc00315 	stw	ra,12(sp)
81104614:	df000215 	stw	fp,8(sp)
81104618:	df000204 	addi	fp,sp,8
8110461c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104620:	e0bfff17 	ldw	r2,-4(fp)
81104624:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
81104628:	11048140 	call	81104814 <vFeebCh5IrqFlagClrBufferEmpty>
}
8110462c:	0001883a 	nop
81104630:	e037883a 	mov	sp,fp
81104634:	dfc00117 	ldw	ra,4(sp)
81104638:	df000017 	ldw	fp,0(sp)
8110463c:	dec00204 	addi	sp,sp,8
81104640:	f800283a 	ret

81104644 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
81104644:	defffc04 	addi	sp,sp,-16
81104648:	de00012e 	bgeu	sp,et,81104650 <vFeebCh6HandleIrq+0xc>
8110464c:	003b68fa 	trap	3
81104650:	dfc00315 	stw	ra,12(sp)
81104654:	df000215 	stw	fp,8(sp)
81104658:	df000204 	addi	fp,sp,8
8110465c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104660:	e0bfff17 	ldw	r2,-4(fp)
81104664:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
81104668:	11048580 	call	81104858 <vFeebCh6IrqFlagClrBufferEmpty>
}
8110466c:	0001883a 	nop
81104670:	e037883a 	mov	sp,fp
81104674:	dfc00117 	ldw	ra,4(sp)
81104678:	df000017 	ldw	fp,0(sp)
8110467c:	dec00204 	addi	sp,sp,8
81104680:	f800283a 	ret

81104684 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104684:	defffc04 	addi	sp,sp,-16
81104688:	de00012e 	bgeu	sp,et,81104690 <vFeebCh7HandleIrq+0xc>
8110468c:	003b68fa 	trap	3
81104690:	dfc00315 	stw	ra,12(sp)
81104694:	df000215 	stw	fp,8(sp)
81104698:	df000204 	addi	fp,sp,8
8110469c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811046a0:	e0bfff17 	ldw	r2,-4(fp)
811046a4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
811046a8:	110489c0 	call	8110489c <vFeebCh7IrqFlagClrBufferEmpty>
}
811046ac:	0001883a 	nop
811046b0:	e037883a 	mov	sp,fp
811046b4:	dfc00117 	ldw	ra,4(sp)
811046b8:	df000017 	ldw	fp,0(sp)
811046bc:	dec00204 	addi	sp,sp,8
811046c0:	f800283a 	ret

811046c4 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
811046c4:	defffc04 	addi	sp,sp,-16
811046c8:	de00012e 	bgeu	sp,et,811046d0 <vFeebCh8HandleIrq+0xc>
811046cc:	003b68fa 	trap	3
811046d0:	dfc00315 	stw	ra,12(sp)
811046d4:	df000215 	stw	fp,8(sp)
811046d8:	df000204 	addi	fp,sp,8
811046dc:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811046e0:	e0bfff17 	ldw	r2,-4(fp)
811046e4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
811046e8:	11048e00 	call	811048e0 <vFeebCh8IrqFlagClrBufferEmpty>
}
811046ec:	0001883a 	nop
811046f0:	e037883a 	mov	sp,fp
811046f4:	dfc00117 	ldw	ra,4(sp)
811046f8:	df000017 	ldw	fp,0(sp)
811046fc:	dec00204 	addi	sp,sp,8
81104700:	f800283a 	ret

81104704 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104704:	defffe04 	addi	sp,sp,-8
81104708:	de00012e 	bgeu	sp,et,81104710 <vFeebCh1IrqFlagClrBufferEmpty+0xc>
8110470c:	003b68fa 	trap	3
81104710:	dfc00115 	stw	ra,4(sp)
81104714:	df000015 	stw	fp,0(sp)
81104718:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
8110471c:	01800044 	movi	r6,1
81104720:	01400144 	movi	r5,5
81104724:	01204834 	movhi	r4,33056
81104728:	210b0004 	addi	r4,r4,11264
8110472c:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104730:	0001883a 	nop
81104734:	e037883a 	mov	sp,fp
81104738:	dfc00117 	ldw	ra,4(sp)
8110473c:	df000017 	ldw	fp,0(sp)
81104740:	dec00204 	addi	sp,sp,8
81104744:	f800283a 	ret

81104748 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
81104748:	defffe04 	addi	sp,sp,-8
8110474c:	de00012e 	bgeu	sp,et,81104754 <vFeebCh2IrqFlagClrBufferEmpty+0xc>
81104750:	003b68fa 	trap	3
81104754:	dfc00115 	stw	ra,4(sp)
81104758:	df000015 	stw	fp,0(sp)
8110475c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104760:	01800044 	movi	r6,1
81104764:	01400144 	movi	r5,5
81104768:	01204834 	movhi	r4,33056
8110476c:	210a0004 	addi	r4,r4,10240
81104770:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104774:	0001883a 	nop
81104778:	e037883a 	mov	sp,fp
8110477c:	dfc00117 	ldw	ra,4(sp)
81104780:	df000017 	ldw	fp,0(sp)
81104784:	dec00204 	addi	sp,sp,8
81104788:	f800283a 	ret

8110478c <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
8110478c:	defffe04 	addi	sp,sp,-8
81104790:	de00012e 	bgeu	sp,et,81104798 <vFeebCh3IrqFlagClrBufferEmpty+0xc>
81104794:	003b68fa 	trap	3
81104798:	dfc00115 	stw	ra,4(sp)
8110479c:	df000015 	stw	fp,0(sp)
811047a0:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811047a4:	01800044 	movi	r6,1
811047a8:	01400144 	movi	r5,5
811047ac:	01204834 	movhi	r4,33056
811047b0:	21090004 	addi	r4,r4,9216
811047b4:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047b8:	0001883a 	nop
811047bc:	e037883a 	mov	sp,fp
811047c0:	dfc00117 	ldw	ra,4(sp)
811047c4:	df000017 	ldw	fp,0(sp)
811047c8:	dec00204 	addi	sp,sp,8
811047cc:	f800283a 	ret

811047d0 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
811047d0:	defffe04 	addi	sp,sp,-8
811047d4:	de00012e 	bgeu	sp,et,811047dc <vFeebCh4IrqFlagClrBufferEmpty+0xc>
811047d8:	003b68fa 	trap	3
811047dc:	dfc00115 	stw	ra,4(sp)
811047e0:	df000015 	stw	fp,0(sp)
811047e4:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811047e8:	01800044 	movi	r6,1
811047ec:	01400144 	movi	r5,5
811047f0:	01204834 	movhi	r4,33056
811047f4:	21080004 	addi	r4,r4,8192
811047f8:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047fc:	0001883a 	nop
81104800:	e037883a 	mov	sp,fp
81104804:	dfc00117 	ldw	ra,4(sp)
81104808:	df000017 	ldw	fp,0(sp)
8110480c:	dec00204 	addi	sp,sp,8
81104810:	f800283a 	ret

81104814 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
81104814:	defffe04 	addi	sp,sp,-8
81104818:	de00012e 	bgeu	sp,et,81104820 <vFeebCh5IrqFlagClrBufferEmpty+0xc>
8110481c:	003b68fa 	trap	3
81104820:	dfc00115 	stw	ra,4(sp)
81104824:	df000015 	stw	fp,0(sp)
81104828:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
8110482c:	01800044 	movi	r6,1
81104830:	01400144 	movi	r5,5
81104834:	01204834 	movhi	r4,33056
81104838:	21070004 	addi	r4,r4,7168
8110483c:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104840:	0001883a 	nop
81104844:	e037883a 	mov	sp,fp
81104848:	dfc00117 	ldw	ra,4(sp)
8110484c:	df000017 	ldw	fp,0(sp)
81104850:	dec00204 	addi	sp,sp,8
81104854:	f800283a 	ret

81104858 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
81104858:	defffe04 	addi	sp,sp,-8
8110485c:	de00012e 	bgeu	sp,et,81104864 <vFeebCh6IrqFlagClrBufferEmpty+0xc>
81104860:	003b68fa 	trap	3
81104864:	dfc00115 	stw	ra,4(sp)
81104868:	df000015 	stw	fp,0(sp)
8110486c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104870:	01800044 	movi	r6,1
81104874:	01400144 	movi	r5,5
81104878:	01204834 	movhi	r4,33056
8110487c:	21060004 	addi	r4,r4,6144
81104880:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104884:	0001883a 	nop
81104888:	e037883a 	mov	sp,fp
8110488c:	dfc00117 	ldw	ra,4(sp)
81104890:	df000017 	ldw	fp,0(sp)
81104894:	dec00204 	addi	sp,sp,8
81104898:	f800283a 	ret

8110489c <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
8110489c:	defffe04 	addi	sp,sp,-8
811048a0:	de00012e 	bgeu	sp,et,811048a8 <vFeebCh7IrqFlagClrBufferEmpty+0xc>
811048a4:	003b68fa 	trap	3
811048a8:	dfc00115 	stw	ra,4(sp)
811048ac:	df000015 	stw	fp,0(sp)
811048b0:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
811048b4:	01800044 	movi	r6,1
811048b8:	01400144 	movi	r5,5
811048bc:	01204834 	movhi	r4,33056
811048c0:	21050004 	addi	r4,r4,5120
811048c4:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811048c8:	0001883a 	nop
811048cc:	e037883a 	mov	sp,fp
811048d0:	dfc00117 	ldw	ra,4(sp)
811048d4:	df000017 	ldw	fp,0(sp)
811048d8:	dec00204 	addi	sp,sp,8
811048dc:	f800283a 	ret

811048e0 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
811048e0:	defffe04 	addi	sp,sp,-8
811048e4:	de00012e 	bgeu	sp,et,811048ec <vFeebCh8IrqFlagClrBufferEmpty+0xc>
811048e8:	003b68fa 	trap	3
811048ec:	dfc00115 	stw	ra,4(sp)
811048f0:	df000015 	stw	fp,0(sp)
811048f4:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
811048f8:	01800044 	movi	r6,1
811048fc:	01400144 	movi	r5,5
81104900:	01204834 	movhi	r4,33056
81104904:	21040004 	addi	r4,r4,4096
81104908:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110490c:	0001883a 	nop
81104910:	e037883a 	mov	sp,fp
81104914:	dfc00117 	ldw	ra,4(sp)
81104918:	df000017 	ldw	fp,0(sp)
8110491c:	dec00204 	addi	sp,sp,8
81104920:	f800283a 	ret

81104924 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
81104924:	defffd04 	addi	sp,sp,-12
81104928:	de00012e 	bgeu	sp,et,81104930 <bFeebCh1IrqFlagBufferEmpty+0xc>
8110492c:	003b68fa 	trap	3
81104930:	dfc00215 	stw	ra,8(sp)
81104934:	df000115 	stw	fp,4(sp)
81104938:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
8110493c:	01400144 	movi	r5,5
81104940:	01204834 	movhi	r4,33056
81104944:	210b0004 	addi	r4,r4,11264
81104948:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110494c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81104950:	10000326 	beq	r2,zero,81104960 <bFeebCh1IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104954:	00800044 	movi	r2,1
81104958:	e0bfff15 	stw	r2,-4(fp)
8110495c:	00000106 	br	81104964 <bFeebCh1IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104960:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104964:	e0bfff17 	ldw	r2,-4(fp)
}
81104968:	e037883a 	mov	sp,fp
8110496c:	dfc00117 	ldw	ra,4(sp)
81104970:	df000017 	ldw	fp,0(sp)
81104974:	dec00204 	addi	sp,sp,8
81104978:	f800283a 	ret

8110497c <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
8110497c:	defffd04 	addi	sp,sp,-12
81104980:	de00012e 	bgeu	sp,et,81104988 <bFeebCh2IrqFlagBufferEmpty+0xc>
81104984:	003b68fa 	trap	3
81104988:	dfc00215 	stw	ra,8(sp)
8110498c:	df000115 	stw	fp,4(sp)
81104990:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104994:	01400144 	movi	r5,5
81104998:	01204834 	movhi	r4,33056
8110499c:	210a0004 	addi	r4,r4,10240
811049a0:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049a4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811049a8:	10000326 	beq	r2,zero,811049b8 <bFeebCh2IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811049ac:	00800044 	movi	r2,1
811049b0:	e0bfff15 	stw	r2,-4(fp)
811049b4:	00000106 	br	811049bc <bFeebCh2IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049b8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049bc:	e0bfff17 	ldw	r2,-4(fp)
}
811049c0:	e037883a 	mov	sp,fp
811049c4:	dfc00117 	ldw	ra,4(sp)
811049c8:	df000017 	ldw	fp,0(sp)
811049cc:	dec00204 	addi	sp,sp,8
811049d0:	f800283a 	ret

811049d4 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
811049d4:	defffd04 	addi	sp,sp,-12
811049d8:	de00012e 	bgeu	sp,et,811049e0 <bFeebCh3IrqFlagBufferEmpty+0xc>
811049dc:	003b68fa 	trap	3
811049e0:	dfc00215 	stw	ra,8(sp)
811049e4:	df000115 	stw	fp,4(sp)
811049e8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811049ec:	01400144 	movi	r5,5
811049f0:	01204834 	movhi	r4,33056
811049f4:	21090004 	addi	r4,r4,9216
811049f8:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049fc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104a00:	10000326 	beq	r2,zero,81104a10 <bFeebCh3IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a04:	00800044 	movi	r2,1
81104a08:	e0bfff15 	stw	r2,-4(fp)
81104a0c:	00000106 	br	81104a14 <bFeebCh3IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a10:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a14:	e0bfff17 	ldw	r2,-4(fp)
}
81104a18:	e037883a 	mov	sp,fp
81104a1c:	dfc00117 	ldw	ra,4(sp)
81104a20:	df000017 	ldw	fp,0(sp)
81104a24:	dec00204 	addi	sp,sp,8
81104a28:	f800283a 	ret

81104a2c <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
81104a2c:	defffd04 	addi	sp,sp,-12
81104a30:	de00012e 	bgeu	sp,et,81104a38 <bFeebCh4IrqFlagBufferEmpty+0xc>
81104a34:	003b68fa 	trap	3
81104a38:	dfc00215 	stw	ra,8(sp)
81104a3c:	df000115 	stw	fp,4(sp)
81104a40:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104a44:	01400144 	movi	r5,5
81104a48:	01204834 	movhi	r4,33056
81104a4c:	21080004 	addi	r4,r4,8192
81104a50:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a54:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104a58:	10000326 	beq	r2,zero,81104a68 <bFeebCh4IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a5c:	00800044 	movi	r2,1
81104a60:	e0bfff15 	stw	r2,-4(fp)
81104a64:	00000106 	br	81104a6c <bFeebCh4IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a68:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a6c:	e0bfff17 	ldw	r2,-4(fp)
}
81104a70:	e037883a 	mov	sp,fp
81104a74:	dfc00117 	ldw	ra,4(sp)
81104a78:	df000017 	ldw	fp,0(sp)
81104a7c:	dec00204 	addi	sp,sp,8
81104a80:	f800283a 	ret

81104a84 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104a84:	defffd04 	addi	sp,sp,-12
81104a88:	de00012e 	bgeu	sp,et,81104a90 <bFeebCh5IrqFlagBufferEmpty+0xc>
81104a8c:	003b68fa 	trap	3
81104a90:	dfc00215 	stw	ra,8(sp)
81104a94:	df000115 	stw	fp,4(sp)
81104a98:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a9c:	01400144 	movi	r5,5
81104aa0:	01204834 	movhi	r4,33056
81104aa4:	21070004 	addi	r4,r4,7168
81104aa8:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104aac:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104ab0:	10000326 	beq	r2,zero,81104ac0 <bFeebCh5IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104ab4:	00800044 	movi	r2,1
81104ab8:	e0bfff15 	stw	r2,-4(fp)
81104abc:	00000106 	br	81104ac4 <bFeebCh5IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104ac0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104ac4:	e0bfff17 	ldw	r2,-4(fp)
}
81104ac8:	e037883a 	mov	sp,fp
81104acc:	dfc00117 	ldw	ra,4(sp)
81104ad0:	df000017 	ldw	fp,0(sp)
81104ad4:	dec00204 	addi	sp,sp,8
81104ad8:	f800283a 	ret

81104adc <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104adc:	defffd04 	addi	sp,sp,-12
81104ae0:	de00012e 	bgeu	sp,et,81104ae8 <bFeebCh6IrqFlagBufferEmpty+0xc>
81104ae4:	003b68fa 	trap	3
81104ae8:	dfc00215 	stw	ra,8(sp)
81104aec:	df000115 	stw	fp,4(sp)
81104af0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104af4:	01400144 	movi	r5,5
81104af8:	01204834 	movhi	r4,33056
81104afc:	21060004 	addi	r4,r4,6144
81104b00:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b04:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104b08:	10000326 	beq	r2,zero,81104b18 <bFeebCh6IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b0c:	00800044 	movi	r2,1
81104b10:	e0bfff15 	stw	r2,-4(fp)
81104b14:	00000106 	br	81104b1c <bFeebCh6IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b18:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b1c:	e0bfff17 	ldw	r2,-4(fp)
}
81104b20:	e037883a 	mov	sp,fp
81104b24:	dfc00117 	ldw	ra,4(sp)
81104b28:	df000017 	ldw	fp,0(sp)
81104b2c:	dec00204 	addi	sp,sp,8
81104b30:	f800283a 	ret

81104b34 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104b34:	defffd04 	addi	sp,sp,-12
81104b38:	de00012e 	bgeu	sp,et,81104b40 <bFeebCh7IrqFlagBufferEmpty+0xc>
81104b3c:	003b68fa 	trap	3
81104b40:	dfc00215 	stw	ra,8(sp)
81104b44:	df000115 	stw	fp,4(sp)
81104b48:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104b4c:	01400144 	movi	r5,5
81104b50:	01204834 	movhi	r4,33056
81104b54:	21050004 	addi	r4,r4,5120
81104b58:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b5c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104b60:	10000326 	beq	r2,zero,81104b70 <bFeebCh7IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b64:	00800044 	movi	r2,1
81104b68:	e0bfff15 	stw	r2,-4(fp)
81104b6c:	00000106 	br	81104b74 <bFeebCh7IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b70:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b74:	e0bfff17 	ldw	r2,-4(fp)
}
81104b78:	e037883a 	mov	sp,fp
81104b7c:	dfc00117 	ldw	ra,4(sp)
81104b80:	df000017 	ldw	fp,0(sp)
81104b84:	dec00204 	addi	sp,sp,8
81104b88:	f800283a 	ret

81104b8c <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104b8c:	defffd04 	addi	sp,sp,-12
81104b90:	de00012e 	bgeu	sp,et,81104b98 <bFeebCh8IrqFlagBufferEmpty+0xc>
81104b94:	003b68fa 	trap	3
81104b98:	dfc00215 	stw	ra,8(sp)
81104b9c:	df000115 	stw	fp,4(sp)
81104ba0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104ba4:	01400144 	movi	r5,5
81104ba8:	01204834 	movhi	r4,33056
81104bac:	21040004 	addi	r4,r4,4096
81104bb0:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104bb4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104bb8:	10000326 	beq	r2,zero,81104bc8 <bFeebCh8IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104bbc:	00800044 	movi	r2,1
81104bc0:	e0bfff15 	stw	r2,-4(fp)
81104bc4:	00000106 	br	81104bcc <bFeebCh8IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104bc8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104bcc:	e0bfff17 	ldw	r2,-4(fp)
}
81104bd0:	e037883a 	mov	sp,fp
81104bd4:	dfc00117 	ldw	ra,4(sp)
81104bd8:	df000017 	ldw	fp,0(sp)
81104bdc:	dec00204 	addi	sp,sp,8
81104be0:	f800283a 	ret

81104be4 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81104be4:	defffc04 	addi	sp,sp,-16
81104be8:	de00012e 	bgeu	sp,et,81104bf0 <vFeebInitIrq+0xc>
81104bec:	003b68fa 	trap	3
81104bf0:	dfc00315 	stw	ra,12(sp)
81104bf4:	df000215 	stw	fp,8(sp)
81104bf8:	df000204 	addi	fp,sp,8
81104bfc:	2005883a 	mov	r2,r4
81104c00:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104c04:	e0bfff03 	ldbu	r2,-4(fp)
81104c08:	10c00268 	cmpgeui	r3,r2,9
81104c0c:	18004f1e 	bne	r3,zero,81104d4c <vFeebInitIrq+0x168>
81104c10:	100690ba 	slli	r3,r2,2
81104c14:	00a04434 	movhi	r2,33040
81104c18:	10930a04 	addi	r2,r2,19496
81104c1c:	1885883a 	add	r2,r3,r2
81104c20:	10800017 	ldw	r2,0(r2)
81104c24:	1000683a 	jmp	r2
81104c28:	81104d4c 	andi	r4,r16,16693
81104c2c:	81104c4c 	andi	r4,r16,16689
81104c30:	81104c6c 	andhi	r4,r16,16689
81104c34:	81104c8c 	andi	r4,r16,16690
81104c38:	81104cac 	andhi	r4,r16,16690
81104c3c:	81104ccc 	andi	r4,r16,16691
81104c40:	81104cec 	andhi	r4,r16,16691
81104c44:	81104d0c 	andi	r4,r16,16692
81104c48:	81104d2c 	andhi	r4,r16,16692
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81104c4c:	d0a03e04 	addi	r2,gp,-32520
81104c50:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104c54:	01a04434 	movhi	r6,33040
81104c58:	31914104 	addi	r6,r6,17668
81104c5c:	e17ffe17 	ldw	r5,-8(fp)
81104c60:	01000084 	movi	r4,2
81104c64:	11295e80 	call	811295e8 <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104c68:	00003806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81104c6c:	d0a03f04 	addi	r2,gp,-32516
81104c70:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
81104c74:	01a04434 	movhi	r6,33040
81104c78:	31915104 	addi	r6,r6,17732
81104c7c:	e17ffe17 	ldw	r5,-8(fp)
81104c80:	010000c4 	movi	r4,3
81104c84:	11295e80 	call	811295e8 <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
81104c88:	00003006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81104c8c:	d0a04004 	addi	r2,gp,-32512
81104c90:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
81104c94:	01a04434 	movhi	r6,33040
81104c98:	31916104 	addi	r6,r6,17796
81104c9c:	e17ffe17 	ldw	r5,-8(fp)
81104ca0:	01000104 	movi	r4,4
81104ca4:	11295e80 	call	811295e8 <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81104ca8:	00002806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81104cac:	d0a04104 	addi	r2,gp,-32508
81104cb0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
81104cb4:	01a04434 	movhi	r6,33040
81104cb8:	31917104 	addi	r6,r6,17860
81104cbc:	e17ffe17 	ldw	r5,-8(fp)
81104cc0:	01000204 	movi	r4,8
81104cc4:	11295e80 	call	811295e8 <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81104cc8:	00002006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81104ccc:	d0a04204 	addi	r2,gp,-32504
81104cd0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104cd4:	01a04434 	movhi	r6,33040
81104cd8:	31918104 	addi	r6,r6,17924
81104cdc:	e17ffe17 	ldw	r5,-8(fp)
81104ce0:	010001c4 	movi	r4,7
81104ce4:	11295e80 	call	811295e8 <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104ce8:	00001806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81104cec:	d0a04304 	addi	r2,gp,-32500
81104cf0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104cf4:	01a04434 	movhi	r6,33040
81104cf8:	31919104 	addi	r6,r6,17988
81104cfc:	e17ffe17 	ldw	r5,-8(fp)
81104d00:	01000184 	movi	r4,6
81104d04:	11295e80 	call	811295e8 <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104d08:	00001006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81104d0c:	d0a04404 	addi	r2,gp,-32496
81104d10:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104d14:	01a04434 	movhi	r6,33040
81104d18:	3191a104 	addi	r6,r6,18052
81104d1c:	e17ffe17 	ldw	r5,-8(fp)
81104d20:	01000144 	movi	r4,5
81104d24:	11295e80 	call	811295e8 <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104d28:	00000806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81104d2c:	d0a04504 	addi	r2,gp,-32492
81104d30:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104d34:	01a04434 	movhi	r6,33040
81104d38:	3191b104 	addi	r6,r6,18116
81104d3c:	e17ffe17 	ldw	r5,-8(fp)
81104d40:	01000244 	movi	r4,9
81104d44:	11295e80 	call	811295e8 <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104d48:	0001883a 	nop
	}
}
81104d4c:	0001883a 	nop
81104d50:	e037883a 	mov	sp,fp
81104d54:	dfc00117 	ldw	ra,4(sp)
81104d58:	df000017 	ldw	fp,0(sp)
81104d5c:	dec00204 	addi	sp,sp,8
81104d60:	f800283a 	ret

81104d64 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104d64:	defffb04 	addi	sp,sp,-20
81104d68:	de00012e 	bgeu	sp,et,81104d70 <bFeebSetIrqControl+0xc>
81104d6c:	003b68fa 	trap	3
81104d70:	dfc00415 	stw	ra,16(sp)
81104d74:	df000315 	stw	fp,12(sp)
81104d78:	df000304 	addi	fp,sp,12
81104d7c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104d80:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104d84:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104d88:	e0bfff17 	ldw	r2,-4(fp)
81104d8c:	10002426 	beq	r2,zero,81104e20 <bFeebSetIrqControl+0xbc>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104d90:	e0bfff17 	ldw	r2,-4(fp)
81104d94:	10800017 	ldw	r2,0(r2)
81104d98:	01400104 	movi	r5,4
81104d9c:	1009883a 	mov	r4,r2
81104da0:	110519c0 	call	8110519c <uliFeebReadReg>
81104da4:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81104da8:	e0bfff17 	ldw	r2,-4(fp)
81104dac:	10800217 	ldw	r2,8(r2)
81104db0:	10000426 	beq	r2,zero,81104dc4 <bFeebSetIrqControl+0x60>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
81104db4:	e0bffe17 	ldw	r2,-8(fp)
81104db8:	10804014 	ori	r2,r2,256
81104dbc:	e0bffe15 	stw	r2,-8(fp)
81104dc0:	00000406 	br	81104dd4 <bFeebSetIrqControl+0x70>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
81104dc4:	e0fffe17 	ldw	r3,-8(fp)
81104dc8:	00bfbfc4 	movi	r2,-257
81104dcc:	1884703a 	and	r2,r3,r2
81104dd0:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
81104dd4:	e0bfff17 	ldw	r2,-4(fp)
81104dd8:	10800317 	ldw	r2,12(r2)
81104ddc:	10000426 	beq	r2,zero,81104df0 <bFeebSetIrqControl+0x8c>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104de0:	e0bffe17 	ldw	r2,-8(fp)
81104de4:	10800054 	ori	r2,r2,1
81104de8:	e0bffe15 	stw	r2,-8(fp)
81104dec:	00000406 	br	81104e00 <bFeebSetIrqControl+0x9c>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104df0:	e0fffe17 	ldw	r3,-8(fp)
81104df4:	00bfff84 	movi	r2,-2
81104df8:	1884703a 	and	r2,r3,r2
81104dfc:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104e00:	e0bfff17 	ldw	r2,-4(fp)
81104e04:	10800017 	ldw	r2,0(r2)
81104e08:	e1bffe17 	ldw	r6,-8(fp)
81104e0c:	01400104 	movi	r5,4
81104e10:	1009883a 	mov	r4,r2
81104e14:	11051480 	call	81105148 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104e18:	00800044 	movi	r2,1
81104e1c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104e20:	e0bffd17 	ldw	r2,-12(fp)
}
81104e24:	e037883a 	mov	sp,fp
81104e28:	dfc00117 	ldw	ra,4(sp)
81104e2c:	df000017 	ldw	fp,0(sp)
81104e30:	dec00204 	addi	sp,sp,8
81104e34:	f800283a 	ret

81104e38 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104e38:	defffb04 	addi	sp,sp,-20
81104e3c:	de00012e 	bgeu	sp,et,81104e44 <bFeebGetIrqControl+0xc>
81104e40:	003b68fa 	trap	3
81104e44:	dfc00415 	stw	ra,16(sp)
81104e48:	df000315 	stw	fp,12(sp)
81104e4c:	df000304 	addi	fp,sp,12
81104e50:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104e54:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104e58:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104e5c:	e0bfff17 	ldw	r2,-4(fp)
81104e60:	10001a26 	beq	r2,zero,81104ecc <bFeebGetIrqControl+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104e64:	e0bfff17 	ldw	r2,-4(fp)
81104e68:	10800017 	ldw	r2,0(r2)
81104e6c:	01400104 	movi	r5,4
81104e70:	1009883a 	mov	r4,r2
81104e74:	110519c0 	call	8110519c <uliFeebReadReg>
81104e78:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
81104e7c:	e0bffe17 	ldw	r2,-8(fp)
81104e80:	1080400c 	andi	r2,r2,256
81104e84:	10000426 	beq	r2,zero,81104e98 <bFeebGetIrqControl+0x60>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
81104e88:	e0bfff17 	ldw	r2,-4(fp)
81104e8c:	00c00044 	movi	r3,1
81104e90:	10c00215 	stw	r3,8(r2)
81104e94:	00000206 	br	81104ea0 <bFeebGetIrqControl+0x68>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
81104e98:	e0bfff17 	ldw	r2,-4(fp)
81104e9c:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
81104ea0:	e0bffe17 	ldw	r2,-8(fp)
81104ea4:	1080004c 	andi	r2,r2,1
81104ea8:	10000426 	beq	r2,zero,81104ebc <bFeebGetIrqControl+0x84>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
81104eac:	e0bfff17 	ldw	r2,-4(fp)
81104eb0:	00c00044 	movi	r3,1
81104eb4:	10c00315 	stw	r3,12(r2)
81104eb8:	00000206 	br	81104ec4 <bFeebGetIrqControl+0x8c>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
81104ebc:	e0bfff17 	ldw	r2,-4(fp)
81104ec0:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104ec4:	00800044 	movi	r2,1
81104ec8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ecc:	e0bffd17 	ldw	r2,-12(fp)
}
81104ed0:	e037883a 	mov	sp,fp
81104ed4:	dfc00117 	ldw	ra,4(sp)
81104ed8:	df000017 	ldw	fp,0(sp)
81104edc:	dec00204 	addi	sp,sp,8
81104ee0:	f800283a 	ret

81104ee4 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104ee4:	defffb04 	addi	sp,sp,-20
81104ee8:	de00012e 	bgeu	sp,et,81104ef0 <bFeebGetIrqFlags+0xc>
81104eec:	003b68fa 	trap	3
81104ef0:	dfc00415 	stw	ra,16(sp)
81104ef4:	df000315 	stw	fp,12(sp)
81104ef8:	df000304 	addi	fp,sp,12
81104efc:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f00:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f04:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f08:	e0bfff17 	ldw	r2,-4(fp)
81104f0c:	10001126 	beq	r2,zero,81104f54 <bFeebGetIrqFlags+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f10:	e0bfff17 	ldw	r2,-4(fp)
81104f14:	10800017 	ldw	r2,0(r2)
81104f18:	01400144 	movi	r5,5
81104f1c:	1009883a 	mov	r4,r2
81104f20:	110519c0 	call	8110519c <uliFeebReadReg>
81104f24:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104f28:	e0bffe17 	ldw	r2,-8(fp)
81104f2c:	1080004c 	andi	r2,r2,1
81104f30:	10000426 	beq	r2,zero,81104f44 <bFeebGetIrqFlags+0x60>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
81104f34:	e0bfff17 	ldw	r2,-4(fp)
81104f38:	00c00044 	movi	r3,1
81104f3c:	10c00415 	stw	r3,16(r2)
81104f40:	00000206 	br	81104f4c <bFeebGetIrqFlags+0x68>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
81104f44:	e0bfff17 	ldw	r2,-4(fp)
81104f48:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104f4c:	00800044 	movi	r2,1
81104f50:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104f54:	e0bffd17 	ldw	r2,-12(fp)
}
81104f58:	e037883a 	mov	sp,fp
81104f5c:	dfc00117 	ldw	ra,4(sp)
81104f60:	df000017 	ldw	fp,0(sp)
81104f64:	dec00204 	addi	sp,sp,8
81104f68:	f800283a 	ret

81104f6c <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104f6c:	defffb04 	addi	sp,sp,-20
81104f70:	de00012e 	bgeu	sp,et,81104f78 <bFeebSetWindowing+0xc>
81104f74:	003b68fa 	trap	3
81104f78:	dfc00415 	stw	ra,16(sp)
81104f7c:	df000315 	stw	fp,12(sp)
81104f80:	df000304 	addi	fp,sp,12
81104f84:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f88:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f8c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f90:	e0bfff17 	ldw	r2,-4(fp)
81104f94:	10001926 	beq	r2,zero,81104ffc <bFeebSetWindowing+0x90>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f98:	e0bfff17 	ldw	r2,-4(fp)
81104f9c:	10800017 	ldw	r2,0(r2)
81104fa0:	000b883a 	mov	r5,zero
81104fa4:	1009883a 	mov	r4,r2
81104fa8:	110519c0 	call	8110519c <uliFeebReadReg>
81104fac:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81104fb0:	e0bfff17 	ldw	r2,-4(fp)
81104fb4:	10800117 	ldw	r2,4(r2)
81104fb8:	10000426 	beq	r2,zero,81104fcc <bFeebSetWindowing+0x60>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
81104fbc:	e0bffe17 	ldw	r2,-8(fp)
81104fc0:	10804014 	ori	r2,r2,256
81104fc4:	e0bffe15 	stw	r2,-8(fp)
81104fc8:	00000406 	br	81104fdc <bFeebSetWindowing+0x70>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
81104fcc:	e0fffe17 	ldw	r3,-8(fp)
81104fd0:	00bfbfc4 	movi	r2,-257
81104fd4:	1884703a 	and	r2,r3,r2
81104fd8:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104fdc:	e0bfff17 	ldw	r2,-4(fp)
81104fe0:	10800017 	ldw	r2,0(r2)
81104fe4:	e1bffe17 	ldw	r6,-8(fp)
81104fe8:	000b883a 	mov	r5,zero
81104fec:	1009883a 	mov	r4,r2
81104ff0:	11051480 	call	81105148 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104ff4:	00800044 	movi	r2,1
81104ff8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ffc:	e0bffd17 	ldw	r2,-12(fp)
}
81105000:	e037883a 	mov	sp,fp
81105004:	dfc00117 	ldw	ra,4(sp)
81105008:	df000017 	ldw	fp,0(sp)
8110500c:	dec00204 	addi	sp,sp,8
81105010:	f800283a 	ret

81105014 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81105014:	defffb04 	addi	sp,sp,-20
81105018:	de00012e 	bgeu	sp,et,81105020 <bFeebGetWindowing+0xc>
8110501c:	003b68fa 	trap	3
81105020:	dfc00415 	stw	ra,16(sp)
81105024:	df000315 	stw	fp,12(sp)
81105028:	df000304 	addi	fp,sp,12
8110502c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105030:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105034:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105038:	e0bfff17 	ldw	r2,-4(fp)
8110503c:	10001126 	beq	r2,zero,81105084 <bFeebGetWindowing+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105040:	e0bfff17 	ldw	r2,-4(fp)
81105044:	10800017 	ldw	r2,0(r2)
81105048:	000b883a 	mov	r5,zero
8110504c:	1009883a 	mov	r4,r2
81105050:	110519c0 	call	8110519c <uliFeebReadReg>
81105054:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81105058:	e0bffe17 	ldw	r2,-8(fp)
8110505c:	1080400c 	andi	r2,r2,256
81105060:	10000426 	beq	r2,zero,81105074 <bFeebGetWindowing+0x60>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81105064:	e0bfff17 	ldw	r2,-4(fp)
81105068:	00c00044 	movi	r3,1
8110506c:	10c00115 	stw	r3,4(r2)
81105070:	00000206 	br	8110507c <bFeebGetWindowing+0x68>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105074:	e0bfff17 	ldw	r2,-4(fp)
81105078:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
8110507c:	00800044 	movi	r2,1
81105080:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105084:	e0bffd17 	ldw	r2,-12(fp)
}
81105088:	e037883a 	mov	sp,fp
8110508c:	dfc00117 	ldw	ra,4(sp)
81105090:	df000017 	ldw	fp,0(sp)
81105094:	dec00204 	addi	sp,sp,8
81105098:	f800283a 	ret

8110509c <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
8110509c:	defffb04 	addi	sp,sp,-20
811050a0:	de00012e 	bgeu	sp,et,811050a8 <bFeebGetBuffersStatus+0xc>
811050a4:	003b68fa 	trap	3
811050a8:	dfc00415 	stw	ra,16(sp)
811050ac:	df000315 	stw	fp,12(sp)
811050b0:	df000304 	addi	fp,sp,12
811050b4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811050b8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811050bc:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811050c0:	e0bfff17 	ldw	r2,-4(fp)
811050c4:	10001a26 	beq	r2,zero,81105130 <bFeebGetBuffersStatus+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811050c8:	e0bfff17 	ldw	r2,-4(fp)
811050cc:	10800017 	ldw	r2,0(r2)
811050d0:	01400184 	movi	r5,6
811050d4:	1009883a 	mov	r4,r2
811050d8:	110519c0 	call	8110519c <uliFeebReadReg>
811050dc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
811050e0:	e0bffe17 	ldw	r2,-8(fp)
811050e4:	1080400c 	andi	r2,r2,256
811050e8:	10000426 	beq	r2,zero,811050fc <bFeebGetBuffersStatus+0x60>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
811050ec:	e0bfff17 	ldw	r2,-4(fp)
811050f0:	00c00044 	movi	r3,1
811050f4:	10c00515 	stw	r3,20(r2)
811050f8:	00000206 	br	81105104 <bFeebGetBuffersStatus+0x68>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
811050fc:	e0bfff17 	ldw	r2,-4(fp)
81105100:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81105104:	e0bffe17 	ldw	r2,-8(fp)
81105108:	1080004c 	andi	r2,r2,1
8110510c:	10000426 	beq	r2,zero,81105120 <bFeebGetBuffersStatus+0x84>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
81105110:	e0bfff17 	ldw	r2,-4(fp)
81105114:	00c00044 	movi	r3,1
81105118:	10c00615 	stw	r3,24(r2)
8110511c:	00000206 	br	81105128 <bFeebGetBuffersStatus+0x8c>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
81105120:	e0bfff17 	ldw	r2,-4(fp)
81105124:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
81105128:	00800044 	movi	r2,1
8110512c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105130:	e0bffd17 	ldw	r2,-12(fp)
}
81105134:	e037883a 	mov	sp,fp
81105138:	dfc00117 	ldw	ra,4(sp)
8110513c:	df000017 	ldw	fp,0(sp)
81105140:	dec00204 	addi	sp,sp,8
81105144:	f800283a 	ret

81105148 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81105148:	defffc04 	addi	sp,sp,-16
8110514c:	de00012e 	bgeu	sp,et,81105154 <vFeebWriteReg+0xc>
81105150:	003b68fa 	trap	3
81105154:	df000315 	stw	fp,12(sp)
81105158:	df000304 	addi	fp,sp,12
8110515c:	e13ffd15 	stw	r4,-12(fp)
81105160:	e17ffe15 	stw	r5,-8(fp)
81105164:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81105168:	e0bffe17 	ldw	r2,-8(fp)
8110516c:	1085883a 	add	r2,r2,r2
81105170:	1085883a 	add	r2,r2,r2
81105174:	1007883a 	mov	r3,r2
81105178:	e0bffd17 	ldw	r2,-12(fp)
8110517c:	10c5883a 	add	r2,r2,r3
81105180:	e0ffff17 	ldw	r3,-4(fp)
81105184:	10c00015 	stw	r3,0(r2)
}
81105188:	0001883a 	nop
8110518c:	e037883a 	mov	sp,fp
81105190:	df000017 	ldw	fp,0(sp)
81105194:	dec00104 	addi	sp,sp,4
81105198:	f800283a 	ret

8110519c <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110519c:	defffc04 	addi	sp,sp,-16
811051a0:	de00012e 	bgeu	sp,et,811051a8 <uliFeebReadReg+0xc>
811051a4:	003b68fa 	trap	3
811051a8:	df000315 	stw	fp,12(sp)
811051ac:	df000304 	addi	fp,sp,12
811051b0:	e13ffe15 	stw	r4,-8(fp)
811051b4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811051b8:	e0bfff17 	ldw	r2,-4(fp)
811051bc:	1085883a 	add	r2,r2,r2
811051c0:	1085883a 	add	r2,r2,r2
811051c4:	1007883a 	mov	r3,r2
811051c8:	e0bffe17 	ldw	r2,-8(fp)
811051cc:	10c5883a 	add	r2,r2,r3
811051d0:	10800017 	ldw	r2,0(r2)
811051d4:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
811051d8:	e0bffd17 	ldw	r2,-12(fp)
}
811051dc:	e037883a 	mov	sp,fp
811051e0:	df000017 	ldw	fp,0(sp)
811051e4:	dec00104 	addi	sp,sp,4
811051e8:	f800283a 	ret

811051ec <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
811051ec:	defffb04 	addi	sp,sp,-20
811051f0:	de00012e 	bgeu	sp,et,811051f8 <bSpwcSetLink+0xc>
811051f4:	003b68fa 	trap	3
811051f8:	dfc00415 	stw	ra,16(sp)
811051fc:	df000315 	stw	fp,12(sp)
81105200:	df000304 	addi	fp,sp,12
81105204:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105208:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110520c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105210:	e0bfff17 	ldw	r2,-4(fp)
81105214:	10002f26 	beq	r2,zero,811052d4 <bSpwcSetLink+0xe8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105218:	e0bfff17 	ldw	r2,-4(fp)
8110521c:	10800017 	ldw	r2,0(r2)
81105220:	000b883a 	mov	r5,zero
81105224:	1009883a 	mov	r4,r2
81105228:	110574c0 	call	8110574c <uliSpwcReadReg>
8110522c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
81105230:	e0bfff17 	ldw	r2,-4(fp)
81105234:	10800117 	ldw	r2,4(r2)
81105238:	10000426 	beq	r2,zero,8110524c <bSpwcSetLink+0x60>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
8110523c:	e0bffe17 	ldw	r2,-8(fp)
81105240:	10800114 	ori	r2,r2,4
81105244:	e0bffe15 	stw	r2,-8(fp)
81105248:	00000406 	br	8110525c <bSpwcSetLink+0x70>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
8110524c:	e0fffe17 	ldw	r3,-8(fp)
81105250:	00bffec4 	movi	r2,-5
81105254:	1884703a 	and	r2,r3,r2
81105258:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
8110525c:	e0bfff17 	ldw	r2,-4(fp)
81105260:	10800217 	ldw	r2,8(r2)
81105264:	10000426 	beq	r2,zero,81105278 <bSpwcSetLink+0x8c>
			uliReg |= COMM_CTRL_LINK_START_MSK;
81105268:	e0bffe17 	ldw	r2,-8(fp)
8110526c:	10800094 	ori	r2,r2,2
81105270:	e0bffe15 	stw	r2,-8(fp)
81105274:	00000406 	br	81105288 <bSpwcSetLink+0x9c>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81105278:	e0fffe17 	ldw	r3,-8(fp)
8110527c:	00bfff44 	movi	r2,-3
81105280:	1884703a 	and	r2,r3,r2
81105284:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81105288:	e0bfff17 	ldw	r2,-4(fp)
8110528c:	10800317 	ldw	r2,12(r2)
81105290:	10000426 	beq	r2,zero,811052a4 <bSpwcSetLink+0xb8>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81105294:	e0bffe17 	ldw	r2,-8(fp)
81105298:	10800054 	ori	r2,r2,1
8110529c:	e0bffe15 	stw	r2,-8(fp)
811052a0:	00000406 	br	811052b4 <bSpwcSetLink+0xc8>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
811052a4:	e0fffe17 	ldw	r3,-8(fp)
811052a8:	00bfff84 	movi	r2,-2
811052ac:	1884703a 	and	r2,r3,r2
811052b0:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
811052b4:	e0bfff17 	ldw	r2,-4(fp)
811052b8:	10800017 	ldw	r2,0(r2)
811052bc:	e1bffe17 	ldw	r6,-8(fp)
811052c0:	000b883a 	mov	r5,zero
811052c4:	1009883a 	mov	r4,r2
811052c8:	11056f80 	call	811056f8 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
811052cc:	00800044 	movi	r2,1
811052d0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811052d4:	e0bffd17 	ldw	r2,-12(fp)
}
811052d8:	e037883a 	mov	sp,fp
811052dc:	dfc00117 	ldw	ra,4(sp)
811052e0:	df000017 	ldw	fp,0(sp)
811052e4:	dec00204 	addi	sp,sp,8
811052e8:	f800283a 	ret

811052ec <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
811052ec:	defffb04 	addi	sp,sp,-20
811052f0:	de00012e 	bgeu	sp,et,811052f8 <bSpwcGetLink+0xc>
811052f4:	003b68fa 	trap	3
811052f8:	dfc00415 	stw	ra,16(sp)
811052fc:	df000315 	stw	fp,12(sp)
81105300:	df000304 	addi	fp,sp,12
81105304:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105308:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110530c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105310:	e0bfff17 	ldw	r2,-4(fp)
81105314:	10002326 	beq	r2,zero,811053a4 <bSpwcGetLink+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105318:	e0bfff17 	ldw	r2,-4(fp)
8110531c:	10800017 	ldw	r2,0(r2)
81105320:	000b883a 	mov	r5,zero
81105324:	1009883a 	mov	r4,r2
81105328:	110574c0 	call	8110574c <uliSpwcReadReg>
8110532c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
81105330:	e0bffe17 	ldw	r2,-8(fp)
81105334:	1080010c 	andi	r2,r2,4
81105338:	10000426 	beq	r2,zero,8110534c <bSpwcGetLink+0x60>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
8110533c:	e0bfff17 	ldw	r2,-4(fp)
81105340:	00c00044 	movi	r3,1
81105344:	10c00115 	stw	r3,4(r2)
81105348:	00000206 	br	81105354 <bSpwcGetLink+0x68>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
8110534c:	e0bfff17 	ldw	r2,-4(fp)
81105350:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
81105354:	e0bffe17 	ldw	r2,-8(fp)
81105358:	1080008c 	andi	r2,r2,2
8110535c:	10000426 	beq	r2,zero,81105370 <bSpwcGetLink+0x84>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
81105360:	e0bfff17 	ldw	r2,-4(fp)
81105364:	00c00044 	movi	r3,1
81105368:	10c00215 	stw	r3,8(r2)
8110536c:	00000206 	br	81105378 <bSpwcGetLink+0x8c>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81105370:	e0bfff17 	ldw	r2,-4(fp)
81105374:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81105378:	e0bffe17 	ldw	r2,-8(fp)
8110537c:	1080004c 	andi	r2,r2,1
81105380:	10000426 	beq	r2,zero,81105394 <bSpwcGetLink+0xa8>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81105384:	e0bfff17 	ldw	r2,-4(fp)
81105388:	00c00044 	movi	r3,1
8110538c:	10c00315 	stw	r3,12(r2)
81105390:	00000206 	br	8110539c <bSpwcGetLink+0xb0>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81105394:	e0bfff17 	ldw	r2,-4(fp)
81105398:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
8110539c:	00800044 	movi	r2,1
811053a0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811053a4:	e0bffd17 	ldw	r2,-12(fp)
}
811053a8:	e037883a 	mov	sp,fp
811053ac:	dfc00117 	ldw	ra,4(sp)
811053b0:	df000017 	ldw	fp,0(sp)
811053b4:	dec00204 	addi	sp,sp,8
811053b8:	f800283a 	ret

811053bc <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
811053bc:	defffb04 	addi	sp,sp,-20
811053c0:	de00012e 	bgeu	sp,et,811053c8 <bSpwcGetLinkError+0xc>
811053c4:	003b68fa 	trap	3
811053c8:	dfc00415 	stw	ra,16(sp)
811053cc:	df000315 	stw	fp,12(sp)
811053d0:	df000304 	addi	fp,sp,12
811053d4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811053d8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811053dc:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811053e0:	e0bfff17 	ldw	r2,-4(fp)
811053e4:	10002c26 	beq	r2,zero,81105498 <bSpwcGetLinkError+0xdc>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811053e8:	e0bfff17 	ldw	r2,-4(fp)
811053ec:	10800017 	ldw	r2,0(r2)
811053f0:	01400044 	movi	r5,1
811053f4:	1009883a 	mov	r4,r2
811053f8:	110574c0 	call	8110574c <uliSpwcReadReg>
811053fc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81105400:	e0bffe17 	ldw	r2,-8(fp)
81105404:	1082000c 	andi	r2,r2,2048
81105408:	10000426 	beq	r2,zero,8110541c <bSpwcGetLinkError+0x60>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110540c:	e0bfff17 	ldw	r2,-4(fp)
81105410:	00c00044 	movi	r3,1
81105414:	10c00415 	stw	r3,16(r2)
81105418:	00000206 	br	81105424 <bSpwcGetLinkError+0x68>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
8110541c:	e0bfff17 	ldw	r2,-4(fp)
81105420:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
81105424:	e0bffe17 	ldw	r2,-8(fp)
81105428:	1081000c 	andi	r2,r2,1024
8110542c:	10000426 	beq	r2,zero,81105440 <bSpwcGetLinkError+0x84>
			pxSpwcCh->xLinkError.bParity = TRUE;
81105430:	e0bfff17 	ldw	r2,-4(fp)
81105434:	00c00044 	movi	r3,1
81105438:	10c00515 	stw	r3,20(r2)
8110543c:	00000206 	br	81105448 <bSpwcGetLinkError+0x8c>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
81105440:	e0bfff17 	ldw	r2,-4(fp)
81105444:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
81105448:	e0bffe17 	ldw	r2,-8(fp)
8110544c:	1080800c 	andi	r2,r2,512
81105450:	10000426 	beq	r2,zero,81105464 <bSpwcGetLinkError+0xa8>
			pxSpwcCh->xLinkError.bEscape = TRUE;
81105454:	e0bfff17 	ldw	r2,-4(fp)
81105458:	00c00044 	movi	r3,1
8110545c:	10c00615 	stw	r3,24(r2)
81105460:	00000206 	br	8110546c <bSpwcGetLinkError+0xb0>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
81105464:	e0bfff17 	ldw	r2,-4(fp)
81105468:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
8110546c:	e0bffe17 	ldw	r2,-8(fp)
81105470:	1080400c 	andi	r2,r2,256
81105474:	10000426 	beq	r2,zero,81105488 <bSpwcGetLinkError+0xcc>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81105478:	e0bfff17 	ldw	r2,-4(fp)
8110547c:	00c00044 	movi	r3,1
81105480:	10c00715 	stw	r3,28(r2)
81105484:	00000206 	br	81105490 <bSpwcGetLinkError+0xd4>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81105488:	e0bfff17 	ldw	r2,-4(fp)
8110548c:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81105490:	00800044 	movi	r2,1
81105494:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105498:	e0bffd17 	ldw	r2,-12(fp)
}
8110549c:	e037883a 	mov	sp,fp
811054a0:	dfc00117 	ldw	ra,4(sp)
811054a4:	df000017 	ldw	fp,0(sp)
811054a8:	dec00204 	addi	sp,sp,8
811054ac:	f800283a 	ret

811054b0 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
811054b0:	defffb04 	addi	sp,sp,-20
811054b4:	de00012e 	bgeu	sp,et,811054bc <bSpwcGetLinkStatus+0xc>
811054b8:	003b68fa 	trap	3
811054bc:	dfc00415 	stw	ra,16(sp)
811054c0:	df000315 	stw	fp,12(sp)
811054c4:	df000304 	addi	fp,sp,12
811054c8:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811054cc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811054d0:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811054d4:	e0bfff17 	ldw	r2,-4(fp)
811054d8:	10002326 	beq	r2,zero,81105568 <bSpwcGetLinkStatus+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811054dc:	e0bfff17 	ldw	r2,-4(fp)
811054e0:	10800017 	ldw	r2,0(r2)
811054e4:	01400044 	movi	r5,1
811054e8:	1009883a 	mov	r4,r2
811054ec:	110574c0 	call	8110574c <uliSpwcReadReg>
811054f0:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
811054f4:	e0bffe17 	ldw	r2,-8(fp)
811054f8:	1080010c 	andi	r2,r2,4
811054fc:	10000426 	beq	r2,zero,81105510 <bSpwcGetLinkStatus+0x60>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81105500:	e0bfff17 	ldw	r2,-4(fp)
81105504:	00c00044 	movi	r3,1
81105508:	10c00815 	stw	r3,32(r2)
8110550c:	00000206 	br	81105518 <bSpwcGetLinkStatus+0x68>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
81105510:	e0bfff17 	ldw	r2,-4(fp)
81105514:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
81105518:	e0bffe17 	ldw	r2,-8(fp)
8110551c:	1080008c 	andi	r2,r2,2
81105520:	10000426 	beq	r2,zero,81105534 <bSpwcGetLinkStatus+0x84>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
81105524:	e0bfff17 	ldw	r2,-4(fp)
81105528:	00c00044 	movi	r3,1
8110552c:	10c00915 	stw	r3,36(r2)
81105530:	00000206 	br	8110553c <bSpwcGetLinkStatus+0x8c>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
81105534:	e0bfff17 	ldw	r2,-4(fp)
81105538:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
8110553c:	e0bffe17 	ldw	r2,-8(fp)
81105540:	1080004c 	andi	r2,r2,1
81105544:	10000426 	beq	r2,zero,81105558 <bSpwcGetLinkStatus+0xa8>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
81105548:	e0bfff17 	ldw	r2,-4(fp)
8110554c:	00c00044 	movi	r3,1
81105550:	10c00a15 	stw	r3,40(r2)
81105554:	00000206 	br	81105560 <bSpwcGetLinkStatus+0xb0>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
81105558:	e0bfff17 	ldw	r2,-4(fp)
8110555c:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
81105560:	00800044 	movi	r2,1
81105564:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105568:	e0bffd17 	ldw	r2,-12(fp)
}
8110556c:	e037883a 	mov	sp,fp
81105570:	dfc00117 	ldw	ra,4(sp)
81105574:	df000017 	ldw	fp,0(sp)
81105578:	dec00204 	addi	sp,sp,8
8110557c:	f800283a 	ret

81105580 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81105580:	defffb04 	addi	sp,sp,-20
81105584:	de00012e 	bgeu	sp,et,8110558c <bSpwcInitCh+0xc>
81105588:	003b68fa 	trap	3
8110558c:	dfc00415 	stw	ra,16(sp)
81105590:	df000315 	stw	fp,12(sp)
81105594:	df000304 	addi	fp,sp,12
81105598:	e13ffe15 	stw	r4,-8(fp)
8110559c:	2805883a 	mov	r2,r5
811055a0:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
811055a4:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
811055a8:	e0bffe17 	ldw	r2,-8(fp)
811055ac:	10004c26 	beq	r2,zero,811056e0 <bSpwcInitCh+0x160>
		bStatus = TRUE;
811055b0:	00800044 	movi	r2,1
811055b4:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
811055b8:	e0bfff03 	ldbu	r2,-4(fp)
811055bc:	10c00268 	cmpgeui	r3,r2,9
811055c0:	1800371e 	bne	r3,zero,811056a0 <bSpwcInitCh+0x120>
811055c4:	100690ba 	slli	r3,r2,2
811055c8:	00a04434 	movhi	r2,33040
811055cc:	10957704 	addi	r2,r2,21980
811055d0:	1885883a 	add	r2,r3,r2
811055d4:	10800017 	ldw	r2,0(r2)
811055d8:	1000683a 	jmp	r2
811055dc:	811056a0 	cmpeqi	r4,r16,16730
811055e0:	81105600 	call	88110560 <__reset+0x20f0560>
811055e4:	81105614 	ori	r4,r16,16728
811055e8:	81105628 	cmpgeui	r4,r16,16728
811055ec:	8110563c 	xorhi	r4,r16,16728
811055f0:	81105650 	cmplti	r4,r16,16729
811055f4:	81105664 	muli	r4,r16,16729
811055f8:	81105678 	rdprs	r4,r16,16729
811055fc:	8110568c 	andi	r4,r16,16730
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81105600:	e0fffe17 	ldw	r3,-8(fp)
81105604:	00a04834 	movhi	r2,33056
81105608:	108b0004 	addi	r2,r2,11264
8110560c:	18800015 	stw	r2,0(r3)
			break;
81105610:	00002506 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81105614:	e0fffe17 	ldw	r3,-8(fp)
81105618:	00a04834 	movhi	r2,33056
8110561c:	108a0004 	addi	r2,r2,10240
81105620:	18800015 	stw	r2,0(r3)
			break;
81105624:	00002006 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
81105628:	e0fffe17 	ldw	r3,-8(fp)
8110562c:	00a04834 	movhi	r2,33056
81105630:	10890004 	addi	r2,r2,9216
81105634:	18800015 	stw	r2,0(r3)
			break;
81105638:	00001b06 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
8110563c:	e0fffe17 	ldw	r3,-8(fp)
81105640:	00a04834 	movhi	r2,33056
81105644:	10880004 	addi	r2,r2,8192
81105648:	18800015 	stw	r2,0(r3)
			break;
8110564c:	00001606 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
81105650:	e0fffe17 	ldw	r3,-8(fp)
81105654:	00a04834 	movhi	r2,33056
81105658:	10870004 	addi	r2,r2,7168
8110565c:	18800015 	stw	r2,0(r3)
			break;
81105660:	00001106 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
81105664:	e0fffe17 	ldw	r3,-8(fp)
81105668:	00a04834 	movhi	r2,33056
8110566c:	10860004 	addi	r2,r2,6144
81105670:	18800015 	stw	r2,0(r3)
			break;
81105674:	00000c06 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81105678:	e0fffe17 	ldw	r3,-8(fp)
8110567c:	00a04834 	movhi	r2,33056
81105680:	10850004 	addi	r2,r2,5120
81105684:	18800015 	stw	r2,0(r3)
			break;
81105688:	00000706 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
8110568c:	e0fffe17 	ldw	r3,-8(fp)
81105690:	00a04834 	movhi	r2,33056
81105694:	10840004 	addi	r2,r2,4096
81105698:	18800015 	stw	r2,0(r3)
			break;
8110569c:	00000206 	br	811056a8 <bSpwcInitCh+0x128>
		default:
			bStatus = FALSE;
811056a0:	e03ffd15 	stw	zero,-12(fp)
			break;
811056a4:	0001883a 	nop
		}

		if (bStatus) {
811056a8:	e0bffd17 	ldw	r2,-12(fp)
811056ac:	10000c26 	beq	r2,zero,811056e0 <bSpwcInitCh+0x160>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
811056b0:	e13ffe17 	ldw	r4,-8(fp)
811056b4:	11052ec0 	call	811052ec <bSpwcGetLink>
811056b8:	1000011e 	bne	r2,zero,811056c0 <bSpwcInitCh+0x140>
				bStatus = FALSE;
811056bc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
811056c0:	e13ffe17 	ldw	r4,-8(fp)
811056c4:	11053bc0 	call	811053bc <bSpwcGetLinkError>
811056c8:	1000011e 	bne	r2,zero,811056d0 <bSpwcInitCh+0x150>
				bStatus = FALSE;
811056cc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
811056d0:	e13ffe17 	ldw	r4,-8(fp)
811056d4:	11054b00 	call	811054b0 <bSpwcGetLinkStatus>
811056d8:	1000011e 	bne	r2,zero,811056e0 <bSpwcInitCh+0x160>
				bStatus = FALSE;
811056dc:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
811056e0:	e0bffd17 	ldw	r2,-12(fp)
}
811056e4:	e037883a 	mov	sp,fp
811056e8:	dfc00117 	ldw	ra,4(sp)
811056ec:	df000017 	ldw	fp,0(sp)
811056f0:	dec00204 	addi	sp,sp,8
811056f4:	f800283a 	ret

811056f8 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
811056f8:	defffc04 	addi	sp,sp,-16
811056fc:	de00012e 	bgeu	sp,et,81105704 <vSpwcWriteReg+0xc>
81105700:	003b68fa 	trap	3
81105704:	df000315 	stw	fp,12(sp)
81105708:	df000304 	addi	fp,sp,12
8110570c:	e13ffd15 	stw	r4,-12(fp)
81105710:	e17ffe15 	stw	r5,-8(fp)
81105714:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81105718:	e0bffe17 	ldw	r2,-8(fp)
8110571c:	1085883a 	add	r2,r2,r2
81105720:	1085883a 	add	r2,r2,r2
81105724:	1007883a 	mov	r3,r2
81105728:	e0bffd17 	ldw	r2,-12(fp)
8110572c:	10c5883a 	add	r2,r2,r3
81105730:	e0ffff17 	ldw	r3,-4(fp)
81105734:	10c00015 	stw	r3,0(r2)
}
81105738:	0001883a 	nop
8110573c:	e037883a 	mov	sp,fp
81105740:	df000017 	ldw	fp,0(sp)
81105744:	dec00104 	addi	sp,sp,4
81105748:	f800283a 	ret

8110574c <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110574c:	defffc04 	addi	sp,sp,-16
81105750:	de00012e 	bgeu	sp,et,81105758 <uliSpwcReadReg+0xc>
81105754:	003b68fa 	trap	3
81105758:	df000315 	stw	fp,12(sp)
8110575c:	df000304 	addi	fp,sp,12
81105760:	e13ffe15 	stw	r4,-8(fp)
81105764:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81105768:	e0bfff17 	ldw	r2,-4(fp)
8110576c:	1085883a 	add	r2,r2,r2
81105770:	1085883a 	add	r2,r2,r2
81105774:	1007883a 	mov	r3,r2
81105778:	e0bffe17 	ldw	r2,-8(fp)
8110577c:	10c5883a 	add	r2,r2,r3
81105780:	10800017 	ldw	r2,0(r2)
81105784:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105788:	e0bffd17 	ldw	r2,-12(fp)
}
8110578c:	e037883a 	mov	sp,fp
81105790:	df000017 	ldw	fp,0(sp)
81105794:	dec00104 	addi	sp,sp,4
81105798:	f800283a 	ret

8110579c <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
8110579c:	defffe04 	addi	sp,sp,-8
811057a0:	de00012e 	bgeu	sp,et,811057a8 <bEnableIsoDrivers+0xc>
811057a4:	003b68fa 	trap	3
811057a8:	dfc00115 	stw	ra,4(sp)
811057ac:	df000015 	stw	fp,0(sp)
811057b0:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
811057b4:	01400204 	movi	r5,8
811057b8:	01000044 	movi	r4,1
811057bc:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
811057c0:	00800044 	movi	r2,1
}
811057c4:	e037883a 	mov	sp,fp
811057c8:	dfc00117 	ldw	ra,4(sp)
811057cc:	df000017 	ldw	fp,0(sp)
811057d0:	dec00204 	addi	sp,sp,8
811057d4:	f800283a 	ret

811057d8 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
811057d8:	defffe04 	addi	sp,sp,-8
811057dc:	de00012e 	bgeu	sp,et,811057e4 <bDisableIsoDrivers+0xc>
811057e0:	003b68fa 	trap	3
811057e4:	dfc00115 	stw	ra,4(sp)
811057e8:	df000015 	stw	fp,0(sp)
811057ec:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
811057f0:	01400204 	movi	r5,8
811057f4:	0009883a 	mov	r4,zero
811057f8:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
811057fc:	00800044 	movi	r2,1
}
81105800:	e037883a 	mov	sp,fp
81105804:	dfc00117 	ldw	ra,4(sp)
81105808:	df000017 	ldw	fp,0(sp)
8110580c:	dec00204 	addi	sp,sp,8
81105810:	f800283a 	ret

81105814 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
81105814:	defffe04 	addi	sp,sp,-8
81105818:	de00012e 	bgeu	sp,et,81105820 <bEnableLvdsBoard+0xc>
8110581c:	003b68fa 	trap	3
81105820:	dfc00115 	stw	ra,4(sp)
81105824:	df000015 	stw	fp,0(sp)
81105828:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
8110582c:	01400104 	movi	r5,4
81105830:	01000044 	movi	r4,1
81105834:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
81105838:	00800044 	movi	r2,1
}
8110583c:	e037883a 	mov	sp,fp
81105840:	dfc00117 	ldw	ra,4(sp)
81105844:	df000017 	ldw	fp,0(sp)
81105848:	dec00204 	addi	sp,sp,8
8110584c:	f800283a 	ret

81105850 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
81105850:	defffe04 	addi	sp,sp,-8
81105854:	de00012e 	bgeu	sp,et,8110585c <bDisableLvdsBoard+0xc>
81105858:	003b68fa 	trap	3
8110585c:	dfc00115 	stw	ra,4(sp)
81105860:	df000015 	stw	fp,0(sp)
81105864:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
81105868:	01400104 	movi	r5,4
8110586c:	0009883a 	mov	r4,zero
81105870:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
81105874:	00800044 	movi	r2,1
}
81105878:	e037883a 	mov	sp,fp
8110587c:	dfc00117 	ldw	ra,4(sp)
81105880:	df000017 	ldw	fp,0(sp)
81105884:	dec00204 	addi	sp,sp,8
81105888:	f800283a 	ret

8110588c <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
8110588c:	defffd04 	addi	sp,sp,-12
81105890:	de00012e 	bgeu	sp,et,81105898 <bSetPreEmphasys+0xc>
81105894:	003b68fa 	trap	3
81105898:	dfc00215 	stw	ra,8(sp)
8110589c:	df000115 	stw	fp,4(sp)
811058a0:	df000104 	addi	fp,sp,4
811058a4:	2005883a 	mov	r2,r4
811058a8:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
811058ac:	e0bfff03 	ldbu	r2,-4(fp)
811058b0:	10c00060 	cmpeqi	r3,r2,1
811058b4:	18000d1e 	bne	r3,zero,811058ec <bSetPreEmphasys+0x60>
811058b8:	10c00088 	cmpgei	r3,r2,2
811058bc:	1800021e 	bne	r3,zero,811058c8 <bSetPreEmphasys+0x3c>
811058c0:	10000626 	beq	r2,zero,811058dc <bSetPreEmphasys+0x50>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
811058c4:	00001b06 	br	81105934 <bSetPreEmphasys+0xa8>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
811058c8:	10c000a0 	cmpeqi	r3,r2,2
811058cc:	18000e1e 	bne	r3,zero,81105908 <bSetPreEmphasys+0x7c>
811058d0:	108000e0 	cmpeqi	r2,r2,3
811058d4:	1000131e 	bne	r2,zero,81105924 <bSetPreEmphasys+0x98>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
811058d8:	00001606 	br	81105934 <bSetPreEmphasys+0xa8>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811058dc:	014000c4 	movi	r5,3
811058e0:	0009883a 	mov	r4,zero
811058e4:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
811058e8:	00001206 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
811058ec:	01400084 	movi	r5,2
811058f0:	0009883a 	mov	r4,zero
811058f4:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
811058f8:	01400044 	movi	r5,1
811058fc:	01000044 	movi	r4,1
81105900:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105904:	00000b06 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105908:	01400044 	movi	r5,1
8110590c:	0009883a 	mov	r4,zero
81105910:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
81105914:	01400084 	movi	r5,2
81105918:	01000044 	movi	r4,1
8110591c:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105920:	00000406 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
81105924:	014000c4 	movi	r5,3
81105928:	01000044 	movi	r4,1
8110592c:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105930:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
81105934:	00800044 	movi	r2,1
}
81105938:	e037883a 	mov	sp,fp
8110593c:	dfc00117 	ldw	ra,4(sp)
81105940:	df000017 	ldw	fp,0(sp)
81105944:	dec00204 	addi	sp,sp,8
81105948:	f800283a 	ret

8110594c <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
8110594c:	defffd04 	addi	sp,sp,-12
81105950:	de00012e 	bgeu	sp,et,81105958 <bCtrlIoLvdsDrive+0xc>
81105954:	003b68fa 	trap	3
81105958:	df000215 	stw	fp,8(sp)
8110595c:	df000204 	addi	fp,sp,8
81105960:	e13ffe15 	stw	r4,-8(fp)
81105964:	2805883a 	mov	r2,r5
81105968:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
8110596c:	e0bffe17 	ldw	r2,-8(fp)
81105970:	1000071e 	bne	r2,zero,81105990 <bCtrlIoLvdsDrive+0x44>
	 ucIoValue &= (~ucMask);
81105974:	e0bfff03 	ldbu	r2,-4(fp)
81105978:	0084303a 	nor	r2,zero,r2
8110597c:	1007883a 	mov	r3,r2
81105980:	d0a00103 	ldbu	r2,-32764(gp)
81105984:	1884703a 	and	r2,r3,r2
81105988:	d0a00105 	stb	r2,-32764(gp)
8110598c:	00000406 	br	811059a0 <bCtrlIoLvdsDrive+0x54>
  }
  else {
	 ucIoValue |= ucMask;
81105990:	d0e00103 	ldbu	r3,-32764(gp)
81105994:	e0bfff03 	ldbu	r2,-4(fp)
81105998:	1884b03a 	or	r2,r3,r2
8110599c:	d0a00105 	stb	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
811059a0:	d0a00103 	ldbu	r2,-32764(gp)
811059a4:	10c03fcc 	andi	r3,r2,255
811059a8:	00a00034 	movhi	r2,32768
811059ac:	10822804 	addi	r2,r2,2208
811059b0:	10c00035 	stwio	r3,0(r2)
  return TRUE;
811059b4:	00800044 	movi	r2,1
}
811059b8:	e037883a 	mov	sp,fp
811059bc:	df000017 	ldw	fp,0(sp)
811059c0:	dec00104 	addi	sp,sp,4
811059c4:	f800283a 	ret

811059c8 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
811059c8:	defffa04 	addi	sp,sp,-24
811059cc:	de00012e 	bgeu	sp,et,811059d4 <I2C_TestAdress+0xc>
811059d0:	003b68fa 	trap	3
811059d4:	dfc00515 	stw	ra,20(sp)
811059d8:	df000415 	stw	fp,16(sp)
811059dc:	df000404 	addi	fp,sp,16
811059e0:	e13ffd15 	stw	r4,-12(fp)
811059e4:	e17ffe15 	stw	r5,-8(fp)
811059e8:	3005883a 	mov	r2,r6
811059ec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811059f0:	00800044 	movi	r2,1
811059f4:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811059f8:	e17ffe17 	ldw	r5,-8(fp)
811059fc:	e13ffd17 	ldw	r4,-12(fp)
81105a00:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a04:	e0bfff03 	ldbu	r2,-4(fp)
81105a08:	10803fcc 	andi	r2,r2,255
81105a0c:	100d883a 	mov	r6,r2
81105a10:	e17ffe17 	ldw	r5,-8(fp)
81105a14:	e13ffd17 	ldw	r4,-12(fp)
81105a18:	1105eac0 	call	81105eac <i2c_write>
81105a1c:	1000011e 	bne	r2,zero,81105a24 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
81105a20:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105a24:	e17ffe17 	ldw	r5,-8(fp)
81105a28:	e13ffd17 	ldw	r4,-12(fp)
81105a2c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105a30:	0106d604 	movi	r4,7000
81105a34:	112acf80 	call	8112acf8 <usleep>
    
    return bSuccess;
81105a38:	e0bffc17 	ldw	r2,-16(fp)

}
81105a3c:	e037883a 	mov	sp,fp
81105a40:	dfc00117 	ldw	ra,4(sp)
81105a44:	df000017 	ldw	fp,0(sp)
81105a48:	dec00204 	addi	sp,sp,8
81105a4c:	f800283a 	ret

81105a50 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81105a50:	defff804 	addi	sp,sp,-32
81105a54:	de00012e 	bgeu	sp,et,81105a5c <I2C_Write+0xc>
81105a58:	003b68fa 	trap	3
81105a5c:	dfc00715 	stw	ra,28(sp)
81105a60:	df000615 	stw	fp,24(sp)
81105a64:	df000604 	addi	fp,sp,24
81105a68:	e13ffb15 	stw	r4,-20(fp)
81105a6c:	e17ffc15 	stw	r5,-16(fp)
81105a70:	3009883a 	mov	r4,r6
81105a74:	3807883a 	mov	r3,r7
81105a78:	e0800217 	ldw	r2,8(fp)
81105a7c:	e13ffd05 	stb	r4,-12(fp)
81105a80:	e0fffe05 	stb	r3,-8(fp)
81105a84:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105a88:	00800044 	movi	r2,1
81105a8c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105a90:	e17ffc17 	ldw	r5,-16(fp)
81105a94:	e13ffb17 	ldw	r4,-20(fp)
81105a98:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a9c:	e0bffd03 	ldbu	r2,-12(fp)
81105aa0:	10803fcc 	andi	r2,r2,255
81105aa4:	100d883a 	mov	r6,r2
81105aa8:	e17ffc17 	ldw	r5,-16(fp)
81105aac:	e13ffb17 	ldw	r4,-20(fp)
81105ab0:	1105eac0 	call	81105eac <i2c_write>
81105ab4:	1000011e 	bne	r2,zero,81105abc <I2C_Write+0x6c>
        bSuccess = FALSE;
81105ab8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105abc:	e0bffa17 	ldw	r2,-24(fp)
81105ac0:	10000726 	beq	r2,zero,81105ae0 <I2C_Write+0x90>
81105ac4:	e0bffe03 	ldbu	r2,-8(fp)
81105ac8:	100d883a 	mov	r6,r2
81105acc:	e17ffc17 	ldw	r5,-16(fp)
81105ad0:	e13ffb17 	ldw	r4,-20(fp)
81105ad4:	1105eac0 	call	81105eac <i2c_write>
81105ad8:	1000011e 	bne	r2,zero,81105ae0 <I2C_Write+0x90>
        bSuccess = FALSE;
81105adc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105ae0:	e0bffa17 	ldw	r2,-24(fp)
81105ae4:	10000726 	beq	r2,zero,81105b04 <I2C_Write+0xb4>
81105ae8:	e0bfff03 	ldbu	r2,-4(fp)
81105aec:	100d883a 	mov	r6,r2
81105af0:	e17ffc17 	ldw	r5,-16(fp)
81105af4:	e13ffb17 	ldw	r4,-20(fp)
81105af8:	1105eac0 	call	81105eac <i2c_write>
81105afc:	1000011e 	bne	r2,zero,81105b04 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105b00:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105b04:	e17ffc17 	ldw	r5,-16(fp)
81105b08:	e13ffb17 	ldw	r4,-20(fp)
81105b0c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105b10:	0106d604 	movi	r4,7000
81105b14:	112acf80 	call	8112acf8 <usleep>
    
    return bSuccess;
81105b18:	e0bffa17 	ldw	r2,-24(fp)

}
81105b1c:	e037883a 	mov	sp,fp
81105b20:	dfc00117 	ldw	ra,4(sp)
81105b24:	df000017 	ldw	fp,0(sp)
81105b28:	dec00204 	addi	sp,sp,8
81105b2c:	f800283a 	ret

81105b30 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105b30:	defff904 	addi	sp,sp,-28
81105b34:	de00012e 	bgeu	sp,et,81105b3c <I2C_Read+0xc>
81105b38:	003b68fa 	trap	3
81105b3c:	dfc00615 	stw	ra,24(sp)
81105b40:	df000515 	stw	fp,20(sp)
81105b44:	df000504 	addi	fp,sp,20
81105b48:	e13ffc15 	stw	r4,-16(fp)
81105b4c:	e17ffd15 	stw	r5,-12(fp)
81105b50:	3007883a 	mov	r3,r6
81105b54:	3805883a 	mov	r2,r7
81105b58:	e0fffe05 	stb	r3,-8(fp)
81105b5c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105b60:	00800044 	movi	r2,1
81105b64:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105b68:	e17ffd17 	ldw	r5,-12(fp)
81105b6c:	e13ffc17 	ldw	r4,-16(fp)
81105b70:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105b74:	e0bffe03 	ldbu	r2,-8(fp)
81105b78:	10803fcc 	andi	r2,r2,255
81105b7c:	100d883a 	mov	r6,r2
81105b80:	e17ffd17 	ldw	r5,-12(fp)
81105b84:	e13ffc17 	ldw	r4,-16(fp)
81105b88:	1105eac0 	call	81105eac <i2c_write>
81105b8c:	1000011e 	bne	r2,zero,81105b94 <I2C_Read+0x64>
        bSuccess = FALSE;
81105b90:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105b94:	e0bffb17 	ldw	r2,-20(fp)
81105b98:	10000726 	beq	r2,zero,81105bb8 <I2C_Read+0x88>
81105b9c:	e0bfff03 	ldbu	r2,-4(fp)
81105ba0:	100d883a 	mov	r6,r2
81105ba4:	e17ffd17 	ldw	r5,-12(fp)
81105ba8:	e13ffc17 	ldw	r4,-16(fp)
81105bac:	1105eac0 	call	81105eac <i2c_write>
81105bb0:	1000011e 	bne	r2,zero,81105bb8 <I2C_Read+0x88>
        bSuccess = FALSE;
81105bb4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105bb8:	e17ffd17 	ldw	r5,-12(fp)
81105bbc:	e13ffc17 	ldw	r4,-16(fp)
81105bc0:	1105d980 	call	81105d98 <i2c_start>
    DeviceAddr |= 1; // Read
81105bc4:	e0bffe03 	ldbu	r2,-8(fp)
81105bc8:	10800054 	ori	r2,r2,1
81105bcc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105bd0:	e0bffb17 	ldw	r2,-20(fp)
81105bd4:	10000826 	beq	r2,zero,81105bf8 <I2C_Read+0xc8>
81105bd8:	e0bffe03 	ldbu	r2,-8(fp)
81105bdc:	10803fcc 	andi	r2,r2,255
81105be0:	100d883a 	mov	r6,r2
81105be4:	e17ffd17 	ldw	r5,-12(fp)
81105be8:	e13ffc17 	ldw	r4,-16(fp)
81105bec:	1105eac0 	call	81105eac <i2c_write>
81105bf0:	1000011e 	bne	r2,zero,81105bf8 <I2C_Read+0xc8>
        bSuccess = FALSE;
81105bf4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105bf8:	e0bffb17 	ldw	r2,-20(fp)
81105bfc:	10000526 	beq	r2,zero,81105c14 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105c00:	000f883a 	mov	r7,zero
81105c04:	e1800217 	ldw	r6,8(fp)
81105c08:	e17ffd17 	ldw	r5,-12(fp)
81105c0c:	e13ffc17 	ldw	r4,-16(fp)
81105c10:	1105fe40 	call	81105fe4 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105c14:	e17ffd17 	ldw	r5,-12(fp)
81105c18:	e13ffc17 	ldw	r4,-16(fp)
81105c1c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    return bSuccess;
81105c20:	e0bffb17 	ldw	r2,-20(fp)
}
81105c24:	e037883a 	mov	sp,fp
81105c28:	dfc00117 	ldw	ra,4(sp)
81105c2c:	df000017 	ldw	fp,0(sp)
81105c30:	dec00204 	addi	sp,sp,8
81105c34:	f800283a 	ret

81105c38 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105c38:	defff604 	addi	sp,sp,-40
81105c3c:	de00012e 	bgeu	sp,et,81105c44 <I2C_MultipleRead+0xc>
81105c40:	003b68fa 	trap	3
81105c44:	dfc00915 	stw	ra,36(sp)
81105c48:	df000815 	stw	fp,32(sp)
81105c4c:	df000804 	addi	fp,sp,32
81105c50:	e13ffb15 	stw	r4,-20(fp)
81105c54:	e17ffc15 	stw	r5,-16(fp)
81105c58:	3007883a 	mov	r3,r6
81105c5c:	e1fffe15 	stw	r7,-8(fp)
81105c60:	e0800217 	ldw	r2,8(fp)
81105c64:	e0fffd05 	stb	r3,-12(fp)
81105c68:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105c6c:	00800044 	movi	r2,1
81105c70:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81105c74:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105c78:	e17ffc17 	ldw	r5,-16(fp)
81105c7c:	e13ffb17 	ldw	r4,-20(fp)
81105c80:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105c84:	e0bffd03 	ldbu	r2,-12(fp)
81105c88:	10803fcc 	andi	r2,r2,255
81105c8c:	100d883a 	mov	r6,r2
81105c90:	e17ffc17 	ldw	r5,-16(fp)
81105c94:	e13ffb17 	ldw	r4,-20(fp)
81105c98:	1105eac0 	call	81105eac <i2c_write>
81105c9c:	1000011e 	bne	r2,zero,81105ca4 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
81105ca0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105ca4:	e0bff917 	ldw	r2,-28(fp)
81105ca8:	10000726 	beq	r2,zero,81105cc8 <I2C_MultipleRead+0x90>
81105cac:	e0bffa03 	ldbu	r2,-24(fp)
81105cb0:	100d883a 	mov	r6,r2
81105cb4:	e17ffc17 	ldw	r5,-16(fp)
81105cb8:	e13ffb17 	ldw	r4,-20(fp)
81105cbc:	1105eac0 	call	81105eac <i2c_write>
81105cc0:	1000011e 	bne	r2,zero,81105cc8 <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
81105cc4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105cc8:	e0bff917 	ldw	r2,-28(fp)
81105ccc:	10000326 	beq	r2,zero,81105cdc <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105cd0:	e17ffc17 	ldw	r5,-16(fp)
81105cd4:	e13ffb17 	ldw	r4,-20(fp)
81105cd8:	1105d980 	call	81105d98 <i2c_start>
    DeviceAddr |= 1; // Read
81105cdc:	e0bffd03 	ldbu	r2,-12(fp)
81105ce0:	10800054 	ori	r2,r2,1
81105ce4:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105ce8:	e0bff917 	ldw	r2,-28(fp)
81105cec:	10000826 	beq	r2,zero,81105d10 <I2C_MultipleRead+0xd8>
81105cf0:	e0bffd03 	ldbu	r2,-12(fp)
81105cf4:	10803fcc 	andi	r2,r2,255
81105cf8:	100d883a 	mov	r6,r2
81105cfc:	e17ffc17 	ldw	r5,-16(fp)
81105d00:	e13ffb17 	ldw	r4,-20(fp)
81105d04:	1105eac0 	call	81105eac <i2c_write>
81105d08:	1000011e 	bne	r2,zero,81105d10 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105d0c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105d10:	e0bff917 	ldw	r2,-28(fp)
81105d14:	10001726 	beq	r2,zero,81105d74 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
81105d18:	e03ff815 	stw	zero,-32(fp)
81105d1c:	00001006 	br	81105d60 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105d20:	e0bff817 	ldw	r2,-32(fp)
81105d24:	e0fffe17 	ldw	r3,-8(fp)
81105d28:	1889883a 	add	r4,r3,r2
81105d2c:	e0bfff0b 	ldhu	r2,-4(fp)
81105d30:	10ffffc4 	addi	r3,r2,-1
81105d34:	e0bff817 	ldw	r2,-32(fp)
81105d38:	1884c03a 	cmpne	r2,r3,r2
81105d3c:	10803fcc 	andi	r2,r2,255
81105d40:	100f883a 	mov	r7,r2
81105d44:	200d883a 	mov	r6,r4
81105d48:	e17ffc17 	ldw	r5,-16(fp)
81105d4c:	e13ffb17 	ldw	r4,-20(fp)
81105d50:	1105fe40 	call	81105fe4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105d54:	e0bff817 	ldw	r2,-32(fp)
81105d58:	10800044 	addi	r2,r2,1
81105d5c:	e0bff815 	stw	r2,-32(fp)
81105d60:	e0bfff0b 	ldhu	r2,-4(fp)
81105d64:	e0fff817 	ldw	r3,-32(fp)
81105d68:	1880020e 	bge	r3,r2,81105d74 <I2C_MultipleRead+0x13c>
81105d6c:	e0bff917 	ldw	r2,-28(fp)
81105d70:	103feb1e 	bne	r2,zero,81105d20 <__reset+0xfb0e5d20>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81105d74:	e17ffc17 	ldw	r5,-16(fp)
81105d78:	e13ffb17 	ldw	r4,-20(fp)
81105d7c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    return bSuccess;    
81105d80:	e0bff917 	ldw	r2,-28(fp)
    
}
81105d84:	e037883a 	mov	sp,fp
81105d88:	dfc00117 	ldw	ra,4(sp)
81105d8c:	df000017 	ldw	fp,0(sp)
81105d90:	dec00204 	addi	sp,sp,8
81105d94:	f800283a 	ret

81105d98 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105d98:	defffc04 	addi	sp,sp,-16
81105d9c:	de00012e 	bgeu	sp,et,81105da4 <i2c_start+0xc>
81105da0:	003b68fa 	trap	3
81105da4:	dfc00315 	stw	ra,12(sp)
81105da8:	df000215 	stw	fp,8(sp)
81105dac:	df000204 	addi	fp,sp,8
81105db0:	e13ffe15 	stw	r4,-8(fp)
81105db4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105db8:	e0bfff17 	ldw	r2,-4(fp)
81105dbc:	10800104 	addi	r2,r2,4
81105dc0:	1007883a 	mov	r3,r2
81105dc4:	00800044 	movi	r2,1
81105dc8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105dcc:	e0bfff17 	ldw	r2,-4(fp)
81105dd0:	00c00044 	movi	r3,1
81105dd4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105dd8:	e0bffe17 	ldw	r2,-8(fp)
81105ddc:	00c00044 	movi	r3,1
81105de0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105de4:	01000044 	movi	r4,1
81105de8:	112acf80 	call	8112acf8 <usleep>
     
    SDA_LOW(data_base); // data low
81105dec:	e0bfff17 	ldw	r2,-4(fp)
81105df0:	0007883a 	mov	r3,zero
81105df4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105df8:	01000044 	movi	r4,1
81105dfc:	112acf80 	call	8112acf8 <usleep>
    SCL_LOW(clk_base); // clock low
81105e00:	e0bffe17 	ldw	r2,-8(fp)
81105e04:	0007883a 	mov	r3,zero
81105e08:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105e0c:	01000044 	movi	r4,1
81105e10:	112acf80 	call	8112acf8 <usleep>
}
81105e14:	0001883a 	nop
81105e18:	e037883a 	mov	sp,fp
81105e1c:	dfc00117 	ldw	ra,4(sp)
81105e20:	df000017 	ldw	fp,0(sp)
81105e24:	dec00204 	addi	sp,sp,8
81105e28:	f800283a 	ret

81105e2c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105e2c:	defffc04 	addi	sp,sp,-16
81105e30:	de00012e 	bgeu	sp,et,81105e38 <i2c_stop+0xc>
81105e34:	003b68fa 	trap	3
81105e38:	dfc00315 	stw	ra,12(sp)
81105e3c:	df000215 	stw	fp,8(sp)
81105e40:	df000204 	addi	fp,sp,8
81105e44:	e13ffe15 	stw	r4,-8(fp)
81105e48:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105e4c:	e0bfff17 	ldw	r2,-4(fp)
81105e50:	10800104 	addi	r2,r2,4
81105e54:	1007883a 	mov	r3,r2
81105e58:	00800044 	movi	r2,1
81105e5c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105e60:	e0bfff17 	ldw	r2,-4(fp)
81105e64:	0007883a 	mov	r3,zero
81105e68:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105e6c:	e0bffe17 	ldw	r2,-8(fp)
81105e70:	00c00044 	movi	r3,1
81105e74:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105e78:	01000044 	movi	r4,1
81105e7c:	112acf80 	call	8112acf8 <usleep>
    SDA_HIGH(data_base); // data high
81105e80:	e0bfff17 	ldw	r2,-4(fp)
81105e84:	00c00044 	movi	r3,1
81105e88:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105e8c:	01000044 	movi	r4,1
81105e90:	112acf80 	call	8112acf8 <usleep>
    

    
}
81105e94:	0001883a 	nop
81105e98:	e037883a 	mov	sp,fp
81105e9c:	dfc00117 	ldw	ra,4(sp)
81105ea0:	df000017 	ldw	fp,0(sp)
81105ea4:	dec00204 	addi	sp,sp,8
81105ea8:	f800283a 	ret

81105eac <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105eac:	defff804 	addi	sp,sp,-32
81105eb0:	de00012e 	bgeu	sp,et,81105eb8 <i2c_write+0xc>
81105eb4:	003b68fa 	trap	3
81105eb8:	dfc00715 	stw	ra,28(sp)
81105ebc:	df000615 	stw	fp,24(sp)
81105ec0:	df000604 	addi	fp,sp,24
81105ec4:	e13ffd15 	stw	r4,-12(fp)
81105ec8:	e17ffe15 	stw	r5,-8(fp)
81105ecc:	3005883a 	mov	r2,r6
81105ed0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105ed4:	00bfe004 	movi	r2,-128
81105ed8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105edc:	e0bffe17 	ldw	r2,-8(fp)
81105ee0:	10800104 	addi	r2,r2,4
81105ee4:	1007883a 	mov	r3,r2
81105ee8:	00800044 	movi	r2,1
81105eec:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105ef0:	e03ffb15 	stw	zero,-20(fp)
81105ef4:	00001f06 	br	81105f74 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105ef8:	e0bffd17 	ldw	r2,-12(fp)
81105efc:	0007883a 	mov	r3,zero
81105f00:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105f04:	e0ffff03 	ldbu	r3,-4(fp)
81105f08:	e0bffa03 	ldbu	r2,-24(fp)
81105f0c:	1884703a 	and	r2,r3,r2
81105f10:	10803fcc 	andi	r2,r2,255
81105f14:	10000426 	beq	r2,zero,81105f28 <i2c_write+0x7c>
            SDA_HIGH(data_base);
81105f18:	e0bffe17 	ldw	r2,-8(fp)
81105f1c:	00c00044 	movi	r3,1
81105f20:	10c00035 	stwio	r3,0(r2)
81105f24:	00000306 	br	81105f34 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
81105f28:	e0bffe17 	ldw	r2,-8(fp)
81105f2c:	0007883a 	mov	r3,zero
81105f30:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105f34:	e0bffa03 	ldbu	r2,-24(fp)
81105f38:	1004d07a 	srli	r2,r2,1
81105f3c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105f40:	e0bffd17 	ldw	r2,-12(fp)
81105f44:	00c00044 	movi	r3,1
81105f48:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105f4c:	01000044 	movi	r4,1
81105f50:	112acf80 	call	8112acf8 <usleep>
        SCL_LOW(clk_base);
81105f54:	e0bffd17 	ldw	r2,-12(fp)
81105f58:	0007883a 	mov	r3,zero
81105f5c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105f60:	01000044 	movi	r4,1
81105f64:	112acf80 	call	8112acf8 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105f68:	e0bffb17 	ldw	r2,-20(fp)
81105f6c:	10800044 	addi	r2,r2,1
81105f70:	e0bffb15 	stw	r2,-20(fp)
81105f74:	e0bffb17 	ldw	r2,-20(fp)
81105f78:	10800210 	cmplti	r2,r2,8
81105f7c:	103fde1e 	bne	r2,zero,81105ef8 <__reset+0xfb0e5ef8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105f80:	e0bffe17 	ldw	r2,-8(fp)
81105f84:	10800104 	addi	r2,r2,4
81105f88:	0007883a 	mov	r3,zero
81105f8c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105f90:	e0bffd17 	ldw	r2,-12(fp)
81105f94:	00c00044 	movi	r3,1
81105f98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81105f9c:	01000044 	movi	r4,1
81105fa0:	112acf80 	call	8112acf8 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105fa4:	e0bffe17 	ldw	r2,-8(fp)
81105fa8:	10800037 	ldwio	r2,0(r2)
81105fac:	1005003a 	cmpeq	r2,r2,zero
81105fb0:	10803fcc 	andi	r2,r2,255
81105fb4:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105fb8:	e0bffd17 	ldw	r2,-12(fp)
81105fbc:	0007883a 	mov	r3,zero
81105fc0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105fc4:	01000044 	movi	r4,1
81105fc8:	112acf80 	call	8112acf8 <usleep>
    return bAck;
81105fcc:	e0bffc17 	ldw	r2,-16(fp)
}    
81105fd0:	e037883a 	mov	sp,fp
81105fd4:	dfc00117 	ldw	ra,4(sp)
81105fd8:	df000017 	ldw	fp,0(sp)
81105fdc:	dec00204 	addi	sp,sp,8
81105fe0:	f800283a 	ret

81105fe4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105fe4:	defff804 	addi	sp,sp,-32
81105fe8:	de00012e 	bgeu	sp,et,81105ff0 <i2c_read+0xc>
81105fec:	003b68fa 	trap	3
81105ff0:	dfc00715 	stw	ra,28(sp)
81105ff4:	df000615 	stw	fp,24(sp)
81105ff8:	df000604 	addi	fp,sp,24
81105ffc:	e13ffc15 	stw	r4,-16(fp)
81106000:	e17ffd15 	stw	r5,-12(fp)
81106004:	e1bffe15 	stw	r6,-8(fp)
81106008:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
8110600c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81106010:	e0bffd17 	ldw	r2,-12(fp)
81106014:	10800104 	addi	r2,r2,4
81106018:	0007883a 	mov	r3,zero
8110601c:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81106020:	e0bffc17 	ldw	r2,-16(fp)
81106024:	0007883a 	mov	r3,zero
81106028:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
8110602c:	01000044 	movi	r4,1
81106030:	112acf80 	call	8112acf8 <usleep>

    for(i=0;i<8;i++){
81106034:	e03ffb15 	stw	zero,-20(fp)
81106038:	00001606 	br	81106094 <i2c_read+0xb0>
        Data <<= 1;
8110603c:	e0bffa03 	ldbu	r2,-24(fp)
81106040:	1085883a 	add	r2,r2,r2
81106044:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81106048:	e0bffc17 	ldw	r2,-16(fp)
8110604c:	00c00044 	movi	r3,1
81106050:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106054:	01000044 	movi	r4,1
81106058:	112acf80 	call	8112acf8 <usleep>
        if (SDA_READ(data_base))  // read data   
8110605c:	e0bffd17 	ldw	r2,-12(fp)
81106060:	10800037 	ldwio	r2,0(r2)
81106064:	10000326 	beq	r2,zero,81106074 <i2c_read+0x90>
            Data |= 0x01;
81106068:	e0bffa03 	ldbu	r2,-24(fp)
8110606c:	10800054 	ori	r2,r2,1
81106070:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81106074:	e0bffc17 	ldw	r2,-16(fp)
81106078:	0007883a 	mov	r3,zero
8110607c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106080:	01000044 	movi	r4,1
81106084:	112acf80 	call	8112acf8 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81106088:	e0bffb17 	ldw	r2,-20(fp)
8110608c:	10800044 	addi	r2,r2,1
81106090:	e0bffb15 	stw	r2,-20(fp)
81106094:	e0bffb17 	ldw	r2,-20(fp)
81106098:	10800210 	cmplti	r2,r2,8
8110609c:	103fe71e 	bne	r2,zero,8110603c <__reset+0xfb0e603c>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
811060a0:	e0bffc17 	ldw	r2,-16(fp)
811060a4:	0007883a 	mov	r3,zero
811060a8:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
811060ac:	e0bffd17 	ldw	r2,-12(fp)
811060b0:	10800104 	addi	r2,r2,4
811060b4:	1007883a 	mov	r3,r2
811060b8:	00800044 	movi	r2,1
811060bc:	18800035 	stwio	r2,0(r3)
    if (bAck)
811060c0:	e0bfff17 	ldw	r2,-4(fp)
811060c4:	10000426 	beq	r2,zero,811060d8 <i2c_read+0xf4>
        SDA_LOW(data_base);
811060c8:	e0bffd17 	ldw	r2,-12(fp)
811060cc:	0007883a 	mov	r3,zero
811060d0:	10c00035 	stwio	r3,0(r2)
811060d4:	00000306 	br	811060e4 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
811060d8:	e0bffd17 	ldw	r2,-12(fp)
811060dc:	00c00044 	movi	r3,1
811060e0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
811060e4:	e0bffc17 	ldw	r2,-16(fp)
811060e8:	00c00044 	movi	r3,1
811060ec:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
811060f0:	01000044 	movi	r4,1
811060f4:	112acf80 	call	8112acf8 <usleep>
    SCL_LOW(clk_base); // clock low
811060f8:	e0bffc17 	ldw	r2,-16(fp)
811060fc:	0007883a 	mov	r3,zero
81106100:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81106104:	01000044 	movi	r4,1
81106108:	112acf80 	call	8112acf8 <usleep>
    SDA_LOW(data_base);  // data low
8110610c:	e0bffd17 	ldw	r2,-12(fp)
81106110:	0007883a 	mov	r3,zero
81106114:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
81106118:	01000044 	movi	r4,1
8110611c:	112acf80 	call	8112acf8 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81106120:	e0bffe17 	ldw	r2,-8(fp)
81106124:	e0fffa03 	ldbu	r3,-24(fp)
81106128:	10c00005 	stb	r3,0(r2)
}
8110612c:	0001883a 	nop
81106130:	e037883a 	mov	sp,fp
81106134:	dfc00117 	ldw	ra,4(sp)
81106138:	df000017 	ldw	fp,0(sp)
8110613c:	dec00204 	addi	sp,sp,8
81106140:	f800283a 	ret

81106144 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
81106144:	defffd04 	addi	sp,sp,-12
81106148:	de00012e 	bgeu	sp,et,81106150 <bSetBoardLeds+0xc>
8110614c:	003b68fa 	trap	3
81106150:	df000215 	stw	fp,8(sp)
81106154:	df000204 	addi	fp,sp,8
81106158:	e13ffe15 	stw	r4,-8(fp)
8110615c:	2805883a 	mov	r2,r5
81106160:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81106164:	e0bffe17 	ldw	r2,-8(fp)
81106168:	10800058 	cmpnei	r2,r2,1
8110616c:	1000071e 	bne	r2,zero,8110618c <bSetBoardLeds+0x48>
	LedsBoardControl &= (~LedsMask);
81106170:	e0bfff03 	ldbu	r2,-4(fp)
81106174:	0084303a 	nor	r2,zero,r2
81106178:	1007883a 	mov	r3,r2
8110617c:	d0a04603 	ldbu	r2,-32488(gp)
81106180:	1884703a 	and	r2,r3,r2
81106184:	d0a04605 	stb	r2,-32488(gp)
81106188:	00000406 	br	8110619c <bSetBoardLeds+0x58>
  } else {
	LedsBoardControl |= LedsMask;
8110618c:	d0e04603 	ldbu	r3,-32488(gp)
81106190:	e0bfff03 	ldbu	r2,-4(fp)
81106194:	1884b03a 	or	r2,r3,r2
81106198:	d0a04605 	stb	r2,-32488(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110619c:	d0a04603 	ldbu	r2,-32488(gp)
811061a0:	10c03fcc 	andi	r3,r2,255
811061a4:	00a00034 	movhi	r2,32768
811061a8:	10827404 	addi	r2,r2,2512
811061ac:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811061b0:	00800044 	movi	r2,1
}
811061b4:	e037883a 	mov	sp,fp
811061b8:	df000017 	ldw	fp,0(sp)
811061bc:	dec00104 	addi	sp,sp,4
811061c0:	f800283a 	ret

811061c4 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
811061c4:	defffd04 	addi	sp,sp,-12
811061c8:	de00012e 	bgeu	sp,et,811061d0 <bSetPainelLeds+0xc>
811061cc:	003b68fa 	trap	3
811061d0:	df000215 	stw	fp,8(sp)
811061d4:	df000204 	addi	fp,sp,8
811061d8:	e13ffe15 	stw	r4,-8(fp)
811061dc:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
811061e0:	e0bffe17 	ldw	r2,-8(fp)
811061e4:	10800058 	cmpnei	r2,r2,1
811061e8:	1000051e 	bne	r2,zero,81106200 <bSetPainelLeds+0x3c>
	LedsPainelControl |= LedsMask;
811061ec:	d0e00217 	ldw	r3,-32760(gp)
811061f0:	e0bfff17 	ldw	r2,-4(fp)
811061f4:	1884b03a 	or	r2,r3,r2
811061f8:	d0a00215 	stw	r2,-32760(gp)
811061fc:	00000506 	br	81106214 <bSetPainelLeds+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81106200:	e0bfff17 	ldw	r2,-4(fp)
81106204:	0086303a 	nor	r3,zero,r2
81106208:	d0a00217 	ldw	r2,-32760(gp)
8110620c:	1884703a 	and	r2,r3,r2
81106210:	d0a00215 	stw	r2,-32760(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
81106214:	d0a00217 	ldw	r2,-32760(gp)
81106218:	1007883a 	mov	r3,r2
8110621c:	00a00034 	movhi	r2,32768
81106220:	10824004 	addi	r2,r2,2304
81106224:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81106228:	00800044 	movi	r2,1
}
8110622c:	e037883a 	mov	sp,fp
81106230:	df000017 	ldw	fp,0(sp)
81106234:	dec00104 	addi	sp,sp,4
81106238:	f800283a 	ret

8110623c <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
8110623c:	defffc04 	addi	sp,sp,-16
81106240:	de00012e 	bgeu	sp,et,81106248 <msgdma_write_extended_descriptor+0xc>
81106244:	003b68fa 	trap	3
81106248:	df000315 	stw	fp,12(sp)
8110624c:	df000304 	addi	fp,sp,12
81106250:	e13ffd15 	stw	r4,-12(fp)
81106254:	e17ffe15 	stw	r5,-8(fp)
81106258:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
8110625c:	e0bffd17 	ldw	r2,-12(fp)
81106260:	10800037 	ldwio	r2,0(r2)
81106264:	1080010c 	andi	r2,r2,4
81106268:	10000226 	beq	r2,zero,81106274 <msgdma_write_extended_descriptor+0x38>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
8110626c:	00bff904 	movi	r2,-28
81106270:	00003d06 	br	81106368 <msgdma_write_extended_descriptor+0x12c>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81106274:	e0bfff17 	ldw	r2,-4(fp)
81106278:	10800017 	ldw	r2,0(r2)
8110627c:	1007883a 	mov	r3,r2
81106280:	e0bffe17 	ldw	r2,-8(fp)
81106284:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81106288:	e0bffe17 	ldw	r2,-8(fp)
8110628c:	10800104 	addi	r2,r2,4
81106290:	e0ffff17 	ldw	r3,-4(fp)
81106294:	18c00117 	ldw	r3,4(r3)
81106298:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110629c:	e0bffe17 	ldw	r2,-8(fp)
811062a0:	10800204 	addi	r2,r2,8
811062a4:	e0ffff17 	ldw	r3,-4(fp)
811062a8:	18c00217 	ldw	r3,8(r3)
811062ac:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
811062b0:	e0bffe17 	ldw	r2,-8(fp)
811062b4:	10800304 	addi	r2,r2,12
811062b8:	e0ffff17 	ldw	r3,-4(fp)
811062bc:	18c0030b 	ldhu	r3,12(r3)
811062c0:	18ffffcc 	andi	r3,r3,65535
811062c4:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
811062c8:	e0bffe17 	ldw	r2,-8(fp)
811062cc:	10800384 	addi	r2,r2,14
811062d0:	e0ffff17 	ldw	r3,-4(fp)
811062d4:	18c00383 	ldbu	r3,14(r3)
811062d8:	18c03fcc 	andi	r3,r3,255
811062dc:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
811062e0:	e0bffe17 	ldw	r2,-8(fp)
811062e4:	108003c4 	addi	r2,r2,15
811062e8:	e0ffff17 	ldw	r3,-4(fp)
811062ec:	18c003c3 	ldbu	r3,15(r3)
811062f0:	18c03fcc 	andi	r3,r3,255
811062f4:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
811062f8:	e0bffe17 	ldw	r2,-8(fp)
811062fc:	10800404 	addi	r2,r2,16
81106300:	e0ffff17 	ldw	r3,-4(fp)
81106304:	18c0040b 	ldhu	r3,16(r3)
81106308:	18ffffcc 	andi	r3,r3,65535
8110630c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
81106310:	e0bffe17 	ldw	r2,-8(fp)
81106314:	10800484 	addi	r2,r2,18
81106318:	e0ffff17 	ldw	r3,-4(fp)
8110631c:	18c0048b 	ldhu	r3,18(r3)
81106320:	18ffffcc 	andi	r3,r3,65535
81106324:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
81106328:	e0bffe17 	ldw	r2,-8(fp)
8110632c:	10800504 	addi	r2,r2,20
81106330:	e0ffff17 	ldw	r3,-4(fp)
81106334:	18c00517 	ldw	r3,20(r3)
81106338:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
8110633c:	e0bffe17 	ldw	r2,-8(fp)
81106340:	10800604 	addi	r2,r2,24
81106344:	e0ffff17 	ldw	r3,-4(fp)
81106348:	18c00617 	ldw	r3,24(r3)
8110634c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
81106350:	e0bffe17 	ldw	r2,-8(fp)
81106354:	10800704 	addi	r2,r2,28
81106358:	e0ffff17 	ldw	r3,-4(fp)
8110635c:	18c00717 	ldw	r3,28(r3)
81106360:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
81106364:	0005883a 	mov	r2,zero
}
81106368:	e037883a 	mov	sp,fp
8110636c:	df000017 	ldw	fp,0(sp)
81106370:	dec00104 	addi	sp,sp,4
81106374:	f800283a 	ret

81106378 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81106378:	defff604 	addi	sp,sp,-40
8110637c:	de00012e 	bgeu	sp,et,81106384 <msgdma_construct_extended_descriptor+0xc>
81106380:	003b68fa 	trap	3
81106384:	df000915 	stw	fp,36(sp)
81106388:	df000904 	addi	fp,sp,36
8110638c:	e13ff715 	stw	r4,-36(fp)
81106390:	e17ff815 	stw	r5,-32(fp)
81106394:	e1bff915 	stw	r6,-28(fp)
81106398:	e1fffa15 	stw	r7,-24(fp)
8110639c:	e1800517 	ldw	r6,20(fp)
811063a0:	e1400617 	ldw	r5,24(fp)
811063a4:	e1000717 	ldw	r4,28(fp)
811063a8:	e0c00817 	ldw	r3,32(fp)
811063ac:	e0800917 	ldw	r2,36(fp)
811063b0:	e1bffb0d 	sth	r6,-20(fp)
811063b4:	e17ffc05 	stb	r5,-16(fp)
811063b8:	e13ffd05 	stb	r4,-12(fp)
811063bc:	e0fffe0d 	sth	r3,-8(fp)
811063c0:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
811063c4:	e0bff717 	ldw	r2,-36(fp)
811063c8:	10c01217 	ldw	r3,72(r2)
811063cc:	e0800117 	ldw	r2,4(fp)
811063d0:	18801936 	bltu	r3,r2,81106438 <msgdma_construct_extended_descriptor+0xc0>
811063d4:	e13ff717 	ldw	r4,-36(fp)
811063d8:	20801317 	ldw	r2,76(r4)
811063dc:	20c01417 	ldw	r3,80(r4)
811063e0:	e13ffe0b 	ldhu	r4,-8(fp)
811063e4:	213fffcc 	andi	r4,r4,65535
811063e8:	2015883a 	mov	r10,r4
811063ec:	0017883a 	mov	r11,zero
811063f0:	1ac01136 	bltu	r3,r11,81106438 <msgdma_construct_extended_descriptor+0xc0>
811063f4:	58c0011e 	bne	r11,r3,811063fc <msgdma_construct_extended_descriptor+0x84>
811063f8:	12800f36 	bltu	r2,r10,81106438 <msgdma_construct_extended_descriptor+0xc0>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
811063fc:	e13ff717 	ldw	r4,-36(fp)
81106400:	20801317 	ldw	r2,76(r4)
81106404:	20c01417 	ldw	r3,80(r4)
81106408:	e13fff0b 	ldhu	r4,-4(fp)
8110640c:	213fffcc 	andi	r4,r4,65535
81106410:	2011883a 	mov	r8,r4
81106414:	0013883a 	mov	r9,zero
81106418:	1a400736 	bltu	r3,r9,81106438 <msgdma_construct_extended_descriptor+0xc0>
8110641c:	48c0011e 	bne	r9,r3,81106424 <msgdma_construct_extended_descriptor+0xac>
81106420:	12000536 	bltu	r2,r8,81106438 <msgdma_construct_extended_descriptor+0xc0>
81106424:	e0bff717 	ldw	r2,-36(fp)
81106428:	10801703 	ldbu	r2,92(r2)
8110642c:	10803fcc 	andi	r2,r2,255
81106430:	10800060 	cmpeqi	r2,r2,1
81106434:	1000021e 	bne	r2,zero,81106440 <msgdma_construct_extended_descriptor+0xc8>
		return -EINVAL;
81106438:	00bffa84 	movi	r2,-22
8110643c:	00002306 	br	811064cc <msgdma_construct_extended_descriptor+0x154>
	}

	descriptor->read_address_low = read_address;
81106440:	e0bff817 	ldw	r2,-32(fp)
81106444:	e0fff917 	ldw	r3,-28(fp)
81106448:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
8110644c:	e0bff817 	ldw	r2,-32(fp)
81106450:	e0fffa17 	ldw	r3,-24(fp)
81106454:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
81106458:	e0bff817 	ldw	r2,-32(fp)
8110645c:	e0c00117 	ldw	r3,4(fp)
81106460:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
81106464:	e0bff817 	ldw	r2,-32(fp)
81106468:	e0fffb0b 	ldhu	r3,-20(fp)
8110646c:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81106470:	e0bff817 	ldw	r2,-32(fp)
81106474:	e0fffc03 	ldbu	r3,-16(fp)
81106478:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110647c:	e0bff817 	ldw	r2,-32(fp)
81106480:	e0fffd03 	ldbu	r3,-12(fp)
81106484:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81106488:	e0bff817 	ldw	r2,-32(fp)
8110648c:	e0fffe0b 	ldhu	r3,-8(fp)
81106490:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81106494:	e0bff817 	ldw	r2,-32(fp)
81106498:	e0ffff0b 	ldhu	r3,-4(fp)
8110649c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
811064a0:	e0bff817 	ldw	r2,-32(fp)
811064a4:	e0c00317 	ldw	r3,12(fp)
811064a8:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
811064ac:	e0bff817 	ldw	r2,-32(fp)
811064b0:	e0c00417 	ldw	r3,16(fp)
811064b4:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811064b8:	e0800217 	ldw	r2,8(fp)
811064bc:	10e00034 	orhi	r3,r2,32768
811064c0:	e0bff817 	ldw	r2,-32(fp)
811064c4:	10c00715 	stw	r3,28(r2)

	return 0;
811064c8:	0005883a 	mov	r2,zero

}
811064cc:	e037883a 	mov	sp,fp
811064d0:	df000017 	ldw	fp,0(sp)
811064d4:	dec00104 	addi	sp,sp,4
811064d8:	f800283a 	ret

811064dc <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
811064dc:	deffee04 	addi	sp,sp,-72
811064e0:	de00012e 	bgeu	sp,et,811064e8 <msgdma_descriptor_async_transfer+0xc>
811064e4:	003b68fa 	trap	3
811064e8:	dfc01115 	stw	ra,68(sp)
811064ec:	df001015 	stw	fp,64(sp)
811064f0:	df001004 	addi	fp,sp,64
811064f4:	e13ffd15 	stw	r4,-12(fp)
811064f8:	e17ffe15 	stw	r5,-8(fp)
811064fc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106500:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106504:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81106508:	e03ff00d 	sth	zero,-64(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110650c:	e0bffd17 	ldw	r2,-12(fp)
81106510:	10800317 	ldw	r2,12(r2)
81106514:	10800204 	addi	r2,r2,8
81106518:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
8110651c:	10bfffcc 	andi	r2,r2,65535
81106520:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106524:	e0bffd17 	ldw	r2,-12(fp)
81106528:	10800317 	ldw	r2,12(r2)
8110652c:	10800204 	addi	r2,r2,8
81106530:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81106534:	1004d43a 	srli	r2,r2,16
81106538:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
8110653c:	e0bffd17 	ldw	r2,-12(fp)
81106540:	10800917 	ldw	r2,36(r2)
81106544:	e0fff417 	ldw	r3,-48(fp)
81106548:	1880042e 	bgeu	r3,r2,8110655c <msgdma_descriptor_async_transfer+0x80>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
8110654c:	e0bffd17 	ldw	r2,-12(fp)
81106550:	10800917 	ldw	r2,36(r2)
81106554:	e0fff317 	ldw	r3,-52(fp)
81106558:	18800236 	bltu	r3,r2,81106564 <msgdma_descriptor_async_transfer+0x88>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
8110655c:	00bff904 	movi	r2,-28
81106560:	00009f06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
81106564:	e0bffd17 	ldw	r2,-12(fp)
81106568:	10801817 	ldw	r2,96(r2)
8110656c:	e0bff615 	stw	r2,-40(fp)
81106570:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81106574:	e0bffc0b 	ldhu	r2,-16(fp)
81106578:	e0fffc84 	addi	r3,fp,-14
8110657c:	180d883a 	mov	r6,r3
81106580:	100b883a 	mov	r5,r2
81106584:	e13ff617 	ldw	r4,-40(fp)
81106588:	1131b800 	call	81131b80 <OSSemPend>

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110658c:	00800804 	movi	r2,32
81106590:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106594:	0005303a 	rdctl	r2,status
81106598:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110659c:	e0fff717 	ldw	r3,-36(fp)
811065a0:	00bfff84 	movi	r2,-2
811065a4:	1884703a 	and	r2,r3,r2
811065a8:	1001703a 	wrctl	status,r2
  
  return context;
811065ac:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811065b0:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811065b4:	e0bffd17 	ldw	r2,-12(fp)
811065b8:	10800317 	ldw	r2,12(r2)
811065bc:	10800104 	addi	r2,r2,4
811065c0:	e0fff117 	ldw	r3,-60(fp)
811065c4:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811065c8:	e0bffd17 	ldw	r2,-12(fp)
811065cc:	10800317 	ldw	r2,12(r2)
811065d0:	e0fffd17 	ldw	r3,-12(fp)
811065d4:	18c00317 	ldw	r3,12(r3)
811065d8:	18c00037 	ldwio	r3,0(r3)
811065dc:	10c00035 	stwio	r3,0(r2)
811065e0:	e0bff217 	ldw	r2,-56(fp)
811065e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811065e8:	e0bffb17 	ldw	r2,-20(fp)
811065ec:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
811065f0:	e0bffe17 	ldw	r2,-8(fp)
811065f4:	10001026 	beq	r2,zero,81106638 <msgdma_descriptor_async_transfer+0x15c>
811065f8:	e0bfff17 	ldw	r2,-4(fp)
811065fc:	10000e1e 	bne	r2,zero,81106638 <msgdma_descriptor_async_transfer+0x15c>
		counter = 0; /* reset counter */
81106600:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106604:	d0a05017 	ldw	r2,-32448(gp)
81106608:	100f883a 	mov	r7,r2
8110660c:	01800784 	movi	r6,30
81106610:	01400044 	movi	r5,1
81106614:	01204534 	movhi	r4,33044
81106618:	213db004 	addi	r4,r4,-2368
8110661c:	111405c0 	call	8111405c <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106620:	e0bffd17 	ldw	r2,-12(fp)
81106624:	10801817 	ldw	r2,96(r2)
81106628:	1009883a 	mov	r4,r2
8110662c:	1131f080 	call	81131f08 <OSSemPost>

		return -ETIME;
81106630:	00bff084 	movi	r2,-62
81106634:	00006a06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106638:	e0bffe17 	ldw	r2,-8(fp)
8110663c:	1000231e 	bne	r2,zero,811066cc <msgdma_descriptor_async_transfer+0x1f0>
81106640:	e0bfff17 	ldw	r2,-4(fp)
81106644:	10002126 	beq	r2,zero,811066cc <msgdma_descriptor_async_transfer+0x1f0>
		counter = 0; /* reset counter */
81106648:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8110664c:	00001506 	br	811066a4 <msgdma_descriptor_async_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
81106650:	01000044 	movi	r4,1
81106654:	11292440 	call	81129244 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106658:	e0bff00b 	ldhu	r2,-64(fp)
8110665c:	1084e230 	cmpltui	r2,r2,5000
81106660:	10000d1e 	bne	r2,zero,81106698 <msgdma_descriptor_async_transfer+0x1bc>
			{
#ifdef DEBUG_ON
				debug(fp,
81106664:	d0a05017 	ldw	r2,-32448(gp)
81106668:	100f883a 	mov	r7,r2
8110666c:	01801544 	movi	r6,85
81106670:	01400044 	movi	r5,1
81106674:	01204534 	movhi	r4,33044
81106678:	213db804 	addi	r4,r4,-2336
8110667c:	111405c0 	call	8111405c <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
81106680:	e0bffd17 	ldw	r2,-12(fp)
81106684:	10801817 	ldw	r2,96(r2)
81106688:	1009883a 	mov	r4,r2
8110668c:	1131f080 	call	81131f08 <OSSemPost>

				return -ETIME;
81106690:	00bff084 	movi	r2,-62
81106694:	00005206 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
			}
			counter++;
81106698:	e0bff00b 	ldhu	r2,-64(fp)
8110669c:	10800044 	addi	r2,r2,1
811066a0:	e0bff00d 	sth	r2,-64(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811066a4:	e0bffd17 	ldw	r2,-12(fp)
811066a8:	10c00317 	ldw	r3,12(r2)
811066ac:	e0bffd17 	ldw	r2,-12(fp)
811066b0:	10800417 	ldw	r2,16(r2)
811066b4:	e1bfff17 	ldw	r6,-4(fp)
811066b8:	100b883a 	mov	r5,r2
811066bc:	1809883a 	mov	r4,r3
811066c0:	110623c0 	call	8110623c <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811066c4:	103fe21e 	bne	r2,zero,81106650 <__reset+0xfb0e6650>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811066c8:	00000606 	br	811066e4 <msgdma_descriptor_async_transfer+0x208>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811066cc:	e0bffd17 	ldw	r2,-12(fp)
811066d0:	10801817 	ldw	r2,96(r2)
811066d4:	1009883a 	mov	r4,r2
811066d8:	1131f080 	call	81131f08 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811066dc:	00bfffc4 	movi	r2,-1
811066e0:	00003f06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
811066e4:	e0bffd17 	ldw	r2,-12(fp)
811066e8:	10800b17 	ldw	r2,44(r2)
811066ec:	10001c26 	beq	r2,zero,81106760 <msgdma_descriptor_async_transfer+0x284>

		control |= (dev->control |
811066f0:	e0bffd17 	ldw	r2,-12(fp)
811066f4:	10c00d17 	ldw	r3,52(r2)
811066f8:	e0bff117 	ldw	r2,-60(fp)
811066fc:	1884b03a 	or	r2,r3,r2
81106700:	10800514 	ori	r2,r2,20
81106704:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106708:	e0fff117 	ldw	r3,-60(fp)
8110670c:	00bff7c4 	movi	r2,-33
81106710:	1884703a 	and	r2,r3,r2
81106714:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106718:	0005303a 	rdctl	r2,status
8110671c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106720:	e0fff917 	ldw	r3,-28(fp)
81106724:	00bfff84 	movi	r2,-2
81106728:	1884703a 	and	r2,r3,r2
8110672c:	1001703a 	wrctl	status,r2
  
  return context;
81106730:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81106734:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	10800104 	addi	r2,r2,4
81106744:	e0fff117 	ldw	r3,-60(fp)
81106748:	10c00035 	stwio	r3,0(r2)
8110674c:	e0bff217 	ldw	r2,-56(fp)
81106750:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106754:	e0bff517 	ldw	r2,-44(fp)
81106758:	1001703a 	wrctl	status,r2
8110675c:	00001b06 	br	811067cc <msgdma_descriptor_async_transfer+0x2f0>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
81106760:	e0bffd17 	ldw	r2,-12(fp)
81106764:	10c00d17 	ldw	r3,52(r2)
81106768:	e0bff117 	ldw	r2,-60(fp)
8110676c:	1884b03a 	or	r2,r3,r2
81106770:	10800114 	ori	r2,r2,4
81106774:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81106778:	e0fff117 	ldw	r3,-60(fp)
8110677c:	00bff3c4 	movi	r2,-49
81106780:	1884703a 	and	r2,r3,r2
81106784:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106788:	0005303a 	rdctl	r2,status
8110678c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106790:	e0fffa17 	ldw	r3,-24(fp)
81106794:	00bfff84 	movi	r2,-2
81106798:	1884703a 	and	r2,r3,r2
8110679c:	1001703a 	wrctl	status,r2
  
  return context;
811067a0:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811067a4:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811067a8:	e0bffd17 	ldw	r2,-12(fp)
811067ac:	10800317 	ldw	r2,12(r2)
811067b0:	10800104 	addi	r2,r2,4
811067b4:	e0fff117 	ldw	r3,-60(fp)
811067b8:	10c00035 	stwio	r3,0(r2)
811067bc:	e0bff217 	ldw	r2,-56(fp)
811067c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811067c4:	e0bff817 	ldw	r2,-32(fp)
811067c8:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
811067cc:	e0bffd17 	ldw	r2,-12(fp)
811067d0:	10801817 	ldw	r2,96(r2)
811067d4:	1009883a 	mov	r4,r2
811067d8:	1131f080 	call	81131f08 <OSSemPost>

	return 0;
811067dc:	0005883a 	mov	r2,zero
}
811067e0:	e037883a 	mov	sp,fp
811067e4:	dfc00117 	ldw	ra,4(sp)
811067e8:	df000017 	ldw	fp,0(sp)
811067ec:	dec00204 	addi	sp,sp,8
811067f0:	f800283a 	ret

811067f4 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
811067f4:	deffee04 	addi	sp,sp,-72
811067f8:	de00012e 	bgeu	sp,et,81106800 <msgdma_descriptor_sync_transfer+0xc>
811067fc:	003b68fa 	trap	3
81106800:	dfc01115 	stw	ra,68(sp)
81106804:	df001015 	stw	fp,64(sp)
81106808:	df001004 	addi	fp,sp,64
8110680c:	e13ffd15 	stw	r4,-12(fp)
81106810:	e17ffe15 	stw	r5,-8(fp)
81106814:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106818:	e03ff415 	stw	zero,-48(fp)
	alt_irq_context context = 0;
8110681c:	e03ff515 	stw	zero,-44(fp)
	alt_u32 csr_status = 0;
81106820:	e03ff015 	stw	zero,-64(fp)
	alt_u16 counter = 0;
81106824:	e03ff10d 	sth	zero,-60(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106828:	e0bffd17 	ldw	r2,-12(fp)
8110682c:	10800317 	ldw	r2,12(r2)
81106830:	10800204 	addi	r2,r2,8
81106834:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
81106838:	10bfffcc 	andi	r2,r2,65535
8110683c:	e0bff215 	stw	r2,-56(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106840:	e0bffd17 	ldw	r2,-12(fp)
81106844:	10800317 	ldw	r2,12(r2)
81106848:	10800204 	addi	r2,r2,8
8110684c:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81106850:	1004d43a 	srli	r2,r2,16
81106854:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
81106858:	00807804 	movi	r2,480
8110685c:	e0bff615 	stw	r2,-40(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81106860:	00001d06 	br	811068d8 <msgdma_descriptor_sync_transfer+0xe4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
81106864:	01000044 	movi	r4,1
81106868:	11292440 	call	81129244 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110686c:	e0bff10b 	ldhu	r2,-60(fp)
81106870:	1084e230 	cmpltui	r2,r2,5000
81106874:	1000091e 	bne	r2,zero,8110689c <msgdma_descriptor_sync_transfer+0xa8>
		{
#ifdef DEBUG_ON
			debug(fp,
81106878:	d0a05017 	ldw	r2,-32448(gp)
8110687c:	100f883a 	mov	r7,r2
81106880:	01801304 	movi	r6,76
81106884:	01400044 	movi	r5,1
81106888:	01204534 	movhi	r4,33044
8110688c:	213dce04 	addi	r4,r4,-2248
81106890:	111405c0 	call	8111405c <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81106894:	00bff084 	movi	r2,-62
81106898:	0000d006 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
8110689c:	e0bff10b 	ldhu	r2,-60(fp)
811068a0:	10800044 	addi	r2,r2,1
811068a4:	e0bff10d 	sth	r2,-60(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811068a8:	e0bffd17 	ldw	r2,-12(fp)
811068ac:	10800317 	ldw	r2,12(r2)
811068b0:	10800204 	addi	r2,r2,8
811068b4:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
811068b8:	10bfffcc 	andi	r2,r2,65535
811068bc:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811068c0:	e0bffd17 	ldw	r2,-12(fp)
811068c4:	10800317 	ldw	r2,12(r2)
811068c8:	10800204 	addi	r2,r2,8
811068cc:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
811068d0:	1004d43a 	srli	r2,r2,16
811068d4:	e0bff315 	stw	r2,-52(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811068d8:	e0bffd17 	ldw	r2,-12(fp)
811068dc:	10800917 	ldw	r2,36(r2)
811068e0:	e0fff317 	ldw	r3,-52(fp)
811068e4:	18bfdf2e 	bgeu	r3,r2,81106864 <__reset+0xfb0e6864>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
811068e8:	e0bffd17 	ldw	r2,-12(fp)
811068ec:	10800917 	ldw	r2,36(r2)
811068f0:	e0fff217 	ldw	r3,-56(fp)
811068f4:	18bfdb2e 	bgeu	r3,r2,81106864 <__reset+0xfb0e6864>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
811068f8:	e0bffd17 	ldw	r2,-12(fp)
811068fc:	10801817 	ldw	r2,96(r2)
81106900:	e0bff815 	stw	r2,-32(fp)
81106904:	e03ffc0d 	sth	zero,-16(fp)
81106908:	e0bffc0b 	ldhu	r2,-16(fp)
8110690c:	e0fffc84 	addi	r3,fp,-14
81106910:	180d883a 	mov	r6,r3
81106914:	100b883a 	mov	r5,r2
81106918:	e13ff817 	ldw	r4,-32(fp)
8110691c:	1131b800 	call	81131b80 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106920:	0005303a 	rdctl	r2,status
81106924:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106928:	e0fffb17 	ldw	r3,-20(fp)
8110692c:	00bfff84 	movi	r2,-2
81106930:	1884703a 	and	r2,r3,r2
81106934:	1001703a 	wrctl	status,r2
  
  return context;
81106938:	e0bffb17 	ldw	r2,-20(fp)

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8110693c:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106940:	e0bffd17 	ldw	r2,-12(fp)
81106944:	10800317 	ldw	r2,12(r2)
81106948:	10800104 	addi	r2,r2,4
8110694c:	00c00804 	movi	r3,32
81106950:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106954:	e0bffd17 	ldw	r2,-12(fp)
81106958:	10800317 	ldw	r2,12(r2)
8110695c:	e0fffd17 	ldw	r3,-12(fp)
81106960:	18c00317 	ldw	r3,12(r3)
81106964:	18c00037 	ldwio	r3,0(r3)
81106968:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
8110696c:	e0bffe17 	ldw	r2,-8(fp)
81106970:	10001026 	beq	r2,zero,811069b4 <msgdma_descriptor_sync_transfer+0x1c0>
81106974:	e0bfff17 	ldw	r2,-4(fp)
81106978:	10000e1e 	bne	r2,zero,811069b4 <msgdma_descriptor_sync_transfer+0x1c0>
		counter = 0; /* reset counter */
8110697c:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106980:	d0a05017 	ldw	r2,-32448(gp)
81106984:	100f883a 	mov	r7,r2
81106988:	01800784 	movi	r6,30
8110698c:	01400044 	movi	r5,1
81106990:	01204534 	movhi	r4,33044
81106994:	213db004 	addi	r4,r4,-2368
81106998:	111405c0 	call	8111405c <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110699c:	e0bffd17 	ldw	r2,-12(fp)
811069a0:	10801817 	ldw	r2,96(r2)
811069a4:	1009883a 	mov	r4,r2
811069a8:	1131f080 	call	81131f08 <OSSemPost>

		return -ETIME;
811069ac:	00bff084 	movi	r2,-62
811069b0:	00008a06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811069b4:	e0bffe17 	ldw	r2,-8(fp)
811069b8:	1000231e 	bne	r2,zero,81106a48 <msgdma_descriptor_sync_transfer+0x254>
811069bc:	e0bfff17 	ldw	r2,-4(fp)
811069c0:	10002126 	beq	r2,zero,81106a48 <msgdma_descriptor_sync_transfer+0x254>
		counter = 0; /* reset counter */
811069c4:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811069c8:	00001506 	br	81106a20 <msgdma_descriptor_sync_transfer+0x22c>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811069cc:	01000044 	movi	r4,1
811069d0:	11292440 	call	81129244 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811069d4:	e0bff10b 	ldhu	r2,-60(fp)
811069d8:	1084e230 	cmpltui	r2,r2,5000
811069dc:	10000d1e 	bne	r2,zero,81106a14 <msgdma_descriptor_sync_transfer+0x220>
			{
#ifdef DEBUG_ON
				debug(fp,
811069e0:	d0a05017 	ldw	r2,-32448(gp)
811069e4:	100f883a 	mov	r7,r2
811069e8:	01801004 	movi	r6,64
811069ec:	01400044 	movi	r5,1
811069f0:	01204534 	movhi	r4,33044
811069f4:	213de204 	addi	r4,r4,-2168
811069f8:	111405c0 	call	8111405c <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
811069fc:	e0bffd17 	ldw	r2,-12(fp)
81106a00:	10801817 	ldw	r2,96(r2)
81106a04:	1009883a 	mov	r4,r2
81106a08:	1131f080 	call	81131f08 <OSSemPost>

				return -ETIME;
81106a0c:	00bff084 	movi	r2,-62
81106a10:	00007206 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
			}
			counter++;
81106a14:	e0bff10b 	ldhu	r2,-60(fp)
81106a18:	10800044 	addi	r2,r2,1
81106a1c:	e0bff10d 	sth	r2,-60(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106a20:	e0bffd17 	ldw	r2,-12(fp)
81106a24:	10c00317 	ldw	r3,12(r2)
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	10800417 	ldw	r2,16(r2)
81106a30:	e1bfff17 	ldw	r6,-4(fp)
81106a34:	100b883a 	mov	r5,r2
81106a38:	1809883a 	mov	r4,r3
81106a3c:	110623c0 	call	8110623c <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106a40:	103fe21e 	bne	r2,zero,811069cc <__reset+0xfb0e69cc>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106a44:	00000606 	br	81106a60 <msgdma_descriptor_sync_transfer+0x26c>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106a48:	e0bffd17 	ldw	r2,-12(fp)
81106a4c:	10801817 	ldw	r2,96(r2)
81106a50:	1009883a 	mov	r4,r2
81106a54:	1131f080 	call	81131f08 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
81106a58:	00bfffc4 	movi	r2,-1
81106a5c:	00005f06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106a60:	e0bffd17 	ldw	r2,-12(fp)
81106a64:	10800317 	ldw	r2,12(r2)
81106a68:	10800104 	addi	r2,r2,4
81106a6c:	e0fffd17 	ldw	r3,-12(fp)
81106a70:	19000d17 	ldw	r4,52(r3)
81106a74:	00fff2c4 	movi	r3,-53
81106a78:	20c6703a 	and	r3,r4,r3
81106a7c:	18c00114 	ori	r3,r3,4
81106a80:	10c00035 	stwio	r3,0(r2)
81106a84:	e0bff517 	ldw	r2,-44(fp)
81106a88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106a8c:	e0bff717 	ldw	r2,-36(fp)
81106a90:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81106a94:	e03ff10d 	sth	zero,-60(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a98:	e0bffd17 	ldw	r2,-12(fp)
81106a9c:	10800317 	ldw	r2,12(r2)
81106aa0:	10800037 	ldwio	r2,0(r2)
81106aa4:	e0bff015 	stw	r2,-64(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106aa8:	00001906 	br	81106b10 <msgdma_descriptor_sync_transfer+0x31c>
		alt_busy_sleep(1); /* delay 1us */
81106aac:	01000044 	movi	r4,1
81106ab0:	11292440 	call	81129244 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106ab4:	e0bff10b 	ldhu	r2,-60(fp)
81106ab8:	1084e230 	cmpltui	r2,r2,5000
81106abc:	10000d1e 	bne	r2,zero,81106af4 <msgdma_descriptor_sync_transfer+0x300>
		{
#ifdef DEBUG_ON
			debug(fp,
81106ac0:	d0a05017 	ldw	r2,-32448(gp)
81106ac4:	100f883a 	mov	r7,r2
81106ac8:	01801184 	movi	r6,70
81106acc:	01400044 	movi	r5,1
81106ad0:	01204534 	movhi	r4,33044
81106ad4:	213df304 	addi	r4,r4,-2100
81106ad8:	111405c0 	call	8111405c <fwrite>

			/*
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);
81106adc:	e0bffd17 	ldw	r2,-12(fp)
81106ae0:	10801817 	ldw	r2,96(r2)
81106ae4:	1009883a 	mov	r4,r2
81106ae8:	1131f080 	call	81131f08 <OSSemPost>

			return -ETIME;
81106aec:	00bff084 	movi	r2,-62
81106af0:	00003a06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
81106af4:	e0bff10b 	ldhu	r2,-60(fp)
81106af8:	10800044 	addi	r2,r2,1
81106afc:	e0bff10d 	sth	r2,-60(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106b00:	e0bffd17 	ldw	r2,-12(fp)
81106b04:	10800317 	ldw	r2,12(r2)
81106b08:	10800037 	ldwio	r2,0(r2)
81106b0c:	e0bff015 	stw	r2,-64(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106b10:	e0fff017 	ldw	r3,-64(fp)
81106b14:	e0bff617 	ldw	r2,-40(fp)
81106b18:	1884703a 	and	r2,r3,r2
81106b1c:	1000031e 	bne	r2,zero,81106b2c <msgdma_descriptor_sync_transfer+0x338>
81106b20:	e0bff017 	ldw	r2,-64(fp)
81106b24:	1080004c 	andi	r2,r2,1
81106b28:	103fe01e 	bne	r2,zero,81106aac <__reset+0xfb0e6aac>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106b2c:	e0fff017 	ldw	r3,-64(fp)
81106b30:	e0bff617 	ldw	r2,-40(fp)
81106b34:	1884703a 	and	r2,r3,r2
81106b38:	10000626 	beq	r2,zero,81106b54 <msgdma_descriptor_sync_transfer+0x360>
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106b3c:	e0bffd17 	ldw	r2,-12(fp)
81106b40:	10801817 	ldw	r2,96(r2)
81106b44:	1009883a 	mov	r4,r2
81106b48:	1131f080 	call	81131f08 <OSSemPost>

		return error;
81106b4c:	e0bff617 	ldw	r2,-40(fp)
81106b50:	00002206 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81106b54:	e0bffd17 	ldw	r2,-12(fp)
81106b58:	10800317 	ldw	r2,12(r2)
81106b5c:	10800104 	addi	r2,r2,4
81106b60:	10800037 	ldwio	r2,0(r2)
81106b64:	10800814 	ori	r2,r2,32
81106b68:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106b6c:	0005303a 	rdctl	r2,status
81106b70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b74:	e0fffa17 	ldw	r3,-24(fp)
81106b78:	00bfff84 	movi	r2,-2
81106b7c:	1884703a 	and	r2,r3,r2
81106b80:	1001703a 	wrctl	status,r2
  
  return context;
81106b84:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b88:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106b8c:	e0bffd17 	ldw	r2,-12(fp)
81106b90:	10800317 	ldw	r2,12(r2)
81106b94:	10800104 	addi	r2,r2,4
81106b98:	e0fff417 	ldw	r3,-48(fp)
81106b9c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106ba0:	e0bffd17 	ldw	r2,-12(fp)
81106ba4:	10800317 	ldw	r2,12(r2)
81106ba8:	e0fffd17 	ldw	r3,-12(fp)
81106bac:	18c00317 	ldw	r3,12(r3)
81106bb0:	18c00037 	ldwio	r3,0(r3)
81106bb4:	10c00035 	stwio	r3,0(r2)
81106bb8:	e0bff517 	ldw	r2,-44(fp)
81106bbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106bc0:	e0bff917 	ldw	r2,-28(fp)
81106bc4:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
81106bc8:	e0bffd17 	ldw	r2,-12(fp)
81106bcc:	10801817 	ldw	r2,96(r2)
81106bd0:	1009883a 	mov	r4,r2
81106bd4:	1131f080 	call	81131f08 <OSSemPost>

	return 0;
81106bd8:	0005883a 	mov	r2,zero

}
81106bdc:	e037883a 	mov	sp,fp
81106be0:	dfc00117 	ldw	ra,4(sp)
81106be4:	df000017 	ldw	fp,0(sp)
81106be8:	dec00204 	addi	sp,sp,8
81106bec:	f800283a 	ret

81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106bf0:	deffec04 	addi	sp,sp,-80
81106bf4:	de00012e 	bgeu	sp,et,81106bfc <iMsgdmaConstructExtendedMmToMmDescriptor+0xc>
81106bf8:	003b68fa 	trap	3
81106bfc:	dfc01315 	stw	ra,76(sp)
81106c00:	df001215 	stw	fp,72(sp)
81106c04:	df001204 	addi	fp,sp,72
81106c08:	e13ff715 	stw	r4,-36(fp)
81106c0c:	e17ff815 	stw	r5,-32(fp)
81106c10:	e1bff915 	stw	r6,-28(fp)
81106c14:	e1fffa15 	stw	r7,-24(fp)
81106c18:	e1800617 	ldw	r6,24(fp)
81106c1c:	e1400717 	ldw	r5,28(fp)
81106c20:	e1000817 	ldw	r4,32(fp)
81106c24:	e0c00917 	ldw	r3,36(fp)
81106c28:	e0800a17 	ldw	r2,40(fp)
81106c2c:	e1bffb0d 	sth	r6,-20(fp)
81106c30:	e17ffc05 	stb	r5,-16(fp)
81106c34:	e13ffd05 	stb	r4,-12(fp)
81106c38:	e0fffe0d 	sth	r3,-8(fp)
81106c3c:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106c40:	e0bffb0b 	ldhu	r2,-20(fp)
81106c44:	e0fffc03 	ldbu	r3,-16(fp)
81106c48:	e13ffd03 	ldbu	r4,-12(fp)
81106c4c:	e17ffe0b 	ldhu	r5,-8(fp)
81106c50:	e1bfff0b 	ldhu	r6,-4(fp)
81106c54:	d9800815 	stw	r6,32(sp)
81106c58:	d9400715 	stw	r5,28(sp)
81106c5c:	d9000615 	stw	r4,24(sp)
81106c60:	d8c00515 	stw	r3,20(sp)
81106c64:	d8800415 	stw	r2,16(sp)
81106c68:	e0800517 	ldw	r2,20(fp)
81106c6c:	d8800315 	stw	r2,12(sp)
81106c70:	e0800417 	ldw	r2,16(fp)
81106c74:	d8800215 	stw	r2,8(sp)
81106c78:	e0800317 	ldw	r2,12(fp)
81106c7c:	d8800115 	stw	r2,4(sp)
81106c80:	e0800217 	ldw	r2,8(fp)
81106c84:	d8800015 	stw	r2,0(sp)
81106c88:	e1fffa17 	ldw	r7,-24(fp)
81106c8c:	e1bff917 	ldw	r6,-28(fp)
81106c90:	e17ff817 	ldw	r5,-32(fp)
81106c94:	e13ff717 	ldw	r4,-36(fp)
81106c98:	11063780 	call	81106378 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
81106c9c:	e037883a 	mov	sp,fp
81106ca0:	dfc00117 	ldw	ra,4(sp)
81106ca4:	df000017 	ldw	fp,0(sp)
81106ca8:	dec00204 	addi	sp,sp,8
81106cac:	f800283a 	ret

81106cb0 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106cb0:	defffc04 	addi	sp,sp,-16
81106cb4:	de00012e 	bgeu	sp,et,81106cbc <iMsgdmaExtendedDescriptorAsyncTransfer+0xc>
81106cb8:	003b68fa 	trap	3
81106cbc:	dfc00315 	stw	ra,12(sp)
81106cc0:	df000215 	stw	fp,8(sp)
81106cc4:	df000204 	addi	fp,sp,8
81106cc8:	e13ffe15 	stw	r4,-8(fp)
81106ccc:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
81106cd0:	e1bfff17 	ldw	r6,-4(fp)
81106cd4:	000b883a 	mov	r5,zero
81106cd8:	e13ffe17 	ldw	r4,-8(fp)
81106cdc:	11064dc0 	call	811064dc <msgdma_descriptor_async_transfer>
}
81106ce0:	e037883a 	mov	sp,fp
81106ce4:	dfc00117 	ldw	ra,4(sp)
81106ce8:	df000017 	ldw	fp,0(sp)
81106cec:	dec00204 	addi	sp,sp,8
81106cf0:	f800283a 	ret

81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106cf4:	defffc04 	addi	sp,sp,-16
81106cf8:	de00012e 	bgeu	sp,et,81106d00 <iMsgdmaExtendedDescriptorSyncTransfer+0xc>
81106cfc:	003b68fa 	trap	3
81106d00:	dfc00315 	stw	ra,12(sp)
81106d04:	df000215 	stw	fp,8(sp)
81106d08:	df000204 	addi	fp,sp,8
81106d0c:	e13ffe15 	stw	r4,-8(fp)
81106d10:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106d14:	e1bfff17 	ldw	r6,-4(fp)
81106d18:	000b883a 	mov	r5,zero
81106d1c:	e13ffe17 	ldw	r4,-8(fp)
81106d20:	11067f40 	call	811067f4 <msgdma_descriptor_sync_transfer>
}
81106d24:	e037883a 	mov	sp,fp
81106d28:	dfc00117 	ldw	ra,4(sp)
81106d2c:	df000017 	ldw	fp,0(sp)
81106d30:	dec00204 	addi	sp,sp,8
81106d34:	f800283a 	ret

81106d38 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106d38:	defff204 	addi	sp,sp,-56
81106d3c:	de00012e 	bgeu	sp,et,81106d44 <POWER_SPI_RW+0xc>
81106d40:	003b68fa 	trap	3
81106d44:	dfc00d15 	stw	ra,52(sp)
81106d48:	df000c15 	stw	fp,48(sp)
81106d4c:	df000c04 	addi	fp,sp,48
81106d50:	2007883a 	mov	r3,r4
81106d54:	2805883a 	mov	r2,r5
81106d58:	e1bffe15 	stw	r6,-8(fp)
81106d5c:	e1ffff15 	stw	r7,-4(fp)
81106d60:	e0fffc05 	stb	r3,-16(fp)
81106d64:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106d68:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106d6c:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106d70:	008003f4 	movhi	r2,15
81106d74:	10909004 	addi	r2,r2,16960
81106d78:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106d7c:	00bfe004 	movi	r2,-128
81106d80:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
81106d84:	e0bffe17 	ldw	r2,-8(fp)
81106d88:	10000226 	beq	r2,zero,81106d94 <POWER_SPI_RW+0x5c>
81106d8c:	00800804 	movi	r2,32
81106d90:	00000106 	br	81106d98 <POWER_SPI_RW+0x60>
81106d94:	0005883a 	mov	r2,zero
81106d98:	e0fff403 	ldbu	r3,-48(fp)
81106d9c:	10c4b03a 	or	r2,r2,r3
81106da0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
81106da4:	e0800217 	ldw	r2,8(fp)
81106da8:	10000226 	beq	r2,zero,81106db4 <POWER_SPI_RW+0x7c>
81106dac:	00800404 	movi	r2,16
81106db0:	00000106 	br	81106db8 <POWER_SPI_RW+0x80>
81106db4:	0005883a 	mov	r2,zero
81106db8:	e0fff403 	ldbu	r3,-48(fp)
81106dbc:	10c4b03a 	or	r2,r2,r3
81106dc0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
81106dc4:	e0bfff17 	ldw	r2,-4(fp)
81106dc8:	10000226 	beq	r2,zero,81106dd4 <POWER_SPI_RW+0x9c>
81106dcc:	00800204 	movi	r2,8
81106dd0:	00000106 	br	81106dd8 <POWER_SPI_RW+0xa0>
81106dd4:	0005883a 	mov	r2,zero
81106dd8:	e0fff403 	ldbu	r3,-48(fp)
81106ddc:	10c4b03a 	or	r2,r2,r3
81106de0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
81106de4:	e0bffd03 	ldbu	r2,-12(fp)
81106de8:	108001cc 	andi	r2,r2,7
81106dec:	1007883a 	mov	r3,r2
81106df0:	e0bff403 	ldbu	r2,-48(fp)
81106df4:	1884b03a 	or	r2,r3,r2
81106df8:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106dfc:	0007883a 	mov	r3,zero
81106e00:	00a00034 	movhi	r2,32768
81106e04:	10824404 	addi	r2,r2,2320
81106e08:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106e0c:	0007883a 	mov	r3,zero
81106e10:	00a00034 	movhi	r2,32768
81106e14:	10824c04 	addi	r2,r2,2352
81106e18:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106e1c:	e0bffc03 	ldbu	r2,-16(fp)
81106e20:	1000021e 	bne	r2,zero,81106e2c <POWER_SPI_RW+0xf4>
81106e24:	00c00084 	movi	r3,2
81106e28:	00000106 	br	81106e30 <POWER_SPI_RW+0xf8>
81106e2c:	00c00044 	movi	r3,1
81106e30:	00a00034 	movhi	r2,32768
81106e34:	10824804 	addi	r2,r2,2336
81106e38:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106e3c:	010003c4 	movi	r4,15
81106e40:	112acf80 	call	8112acf8 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106e44:	00000306 	br	81106e54 <POWER_SPI_RW+0x11c>
		nWait++;
81106e48:	e0bff817 	ldw	r2,-32(fp)
81106e4c:	10800044 	addi	r2,r2,1
81106e50:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106e54:	00a00034 	movhi	r2,32768
81106e58:	10825404 	addi	r2,r2,2384
81106e5c:	10800037 	ldwio	r2,0(r2)
81106e60:	1080004c 	andi	r2,r2,1
81106e64:	10000326 	beq	r2,zero,81106e74 <POWER_SPI_RW+0x13c>
81106e68:	e0fff817 	ldw	r3,-32(fp)
81106e6c:	e0bffa17 	ldw	r2,-24(fp)
81106e70:	18bff516 	blt	r3,r2,81106e48 <__reset+0xfb0e6e48>
		nWait++;
	}

	if (SPI_SDO) {
81106e74:	00a00034 	movhi	r2,32768
81106e78:	10825404 	addi	r2,r2,2384
81106e7c:	10800037 	ldwio	r2,0(r2)
81106e80:	1080004c 	andi	r2,r2,1
81106e84:	10000626 	beq	r2,zero,81106ea0 <POWER_SPI_RW+0x168>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106e88:	00c000c4 	movi	r3,3
81106e8c:	00a00034 	movhi	r2,32768
81106e90:	10824804 	addi	r2,r2,2336
81106e94:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
81106e98:	0005883a 	mov	r2,zero
81106e9c:	0000db06 	br	8110720c <POWER_SPI_RW+0x4d4>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106ea0:	e03ff715 	stw	zero,-36(fp)
81106ea4:	00002406 	br	81106f38 <POWER_SPI_RW+0x200>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
81106ea8:	e0bff403 	ldbu	r2,-48(fp)
81106eac:	10803fcc 	andi	r2,r2,255
81106eb0:	1004d1fa 	srli	r2,r2,7
81106eb4:	10c03fcc 	andi	r3,r2,255
81106eb8:	00a00034 	movhi	r2,32768
81106ebc:	10825004 	addi	r2,r2,2368
81106ec0:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106ec4:	e0bff403 	ldbu	r2,-48(fp)
81106ec8:	1085883a 	add	r2,r2,r2
81106ecc:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81106ed0:	e0bff517 	ldw	r2,-44(fp)
81106ed4:	1085883a 	add	r2,r2,r2
81106ed8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81106edc:	00a00034 	movhi	r2,32768
81106ee0:	10825404 	addi	r2,r2,2384
81106ee4:	10800037 	ldwio	r2,0(r2)
81106ee8:	1080004c 	andi	r2,r2,1
81106eec:	1007883a 	mov	r3,r2
81106ef0:	e0bff517 	ldw	r2,-44(fp)
81106ef4:	10c4b03a 	or	r2,r2,r3
81106ef8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106efc:	00c00044 	movi	r3,1
81106f00:	00a00034 	movhi	r2,32768
81106f04:	10824c04 	addi	r2,r2,2352
81106f08:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f0c:	010003c4 	movi	r4,15
81106f10:	112acf80 	call	8112acf8 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106f14:	0007883a 	mov	r3,zero
81106f18:	00a00034 	movhi	r2,32768
81106f1c:	10824c04 	addi	r2,r2,2352
81106f20:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f24:	010003c4 	movi	r4,15
81106f28:	112acf80 	call	8112acf8 <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106f2c:	e0bff717 	ldw	r2,-36(fp)
81106f30:	10800044 	addi	r2,r2,1
81106f34:	e0bff715 	stw	r2,-36(fp)
81106f38:	e0bff717 	ldw	r2,-36(fp)
81106f3c:	10800090 	cmplti	r2,r2,2
81106f40:	103fd91e 	bne	r2,zero,81106ea8 <__reset+0xfb0e6ea8>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106f44:	e03ff715 	stw	zero,-36(fp)
81106f48:	00002406 	br	81106fdc <POWER_SPI_RW+0x2a4>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106f4c:	e0bff403 	ldbu	r2,-48(fp)
81106f50:	10803fcc 	andi	r2,r2,255
81106f54:	1004d1fa 	srli	r2,r2,7
81106f58:	10c03fcc 	andi	r3,r2,255
81106f5c:	00a00034 	movhi	r2,32768
81106f60:	10825004 	addi	r2,r2,2368
81106f64:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106f68:	e0bff403 	ldbu	r2,-48(fp)
81106f6c:	1085883a 	add	r2,r2,r2
81106f70:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81106f74:	e0bff517 	ldw	r2,-44(fp)
81106f78:	1085883a 	add	r2,r2,r2
81106f7c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106f80:	00a00034 	movhi	r2,32768
81106f84:	10825404 	addi	r2,r2,2384
81106f88:	10800037 	ldwio	r2,0(r2)
81106f8c:	1080004c 	andi	r2,r2,1
81106f90:	1007883a 	mov	r3,r2
81106f94:	e0bff517 	ldw	r2,-44(fp)
81106f98:	10c4b03a 	or	r2,r2,r3
81106f9c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106fa0:	00c00044 	movi	r3,1
81106fa4:	00a00034 	movhi	r2,32768
81106fa8:	10824c04 	addi	r2,r2,2352
81106fac:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fb0:	010003c4 	movi	r4,15
81106fb4:	112acf80 	call	8112acf8 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106fb8:	0007883a 	mov	r3,zero
81106fbc:	00a00034 	movhi	r2,32768
81106fc0:	10824c04 	addi	r2,r2,2352
81106fc4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fc8:	010003c4 	movi	r4,15
81106fcc:	112acf80 	call	8112acf8 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106fd0:	e0bff717 	ldw	r2,-36(fp)
81106fd4:	10800044 	addi	r2,r2,1
81106fd8:	e0bff715 	stw	r2,-36(fp)
81106fdc:	e0bff717 	ldw	r2,-36(fp)
81106fe0:	10800210 	cmplti	r2,r2,8
81106fe4:	103fd91e 	bne	r2,zero,81106f4c <__reset+0xfb0e6f4c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106fe8:	e03ff715 	stw	zero,-36(fp)
81106fec:	00001a06 	br	81107058 <POWER_SPI_RW+0x320>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81106ff0:	e0bff517 	ldw	r2,-44(fp)
81106ff4:	1085883a 	add	r2,r2,r2
81106ff8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106ffc:	00a00034 	movhi	r2,32768
81107000:	10825404 	addi	r2,r2,2384
81107004:	10800037 	ldwio	r2,0(r2)
81107008:	1080004c 	andi	r2,r2,1
8110700c:	1007883a 	mov	r3,r2
81107010:	e0bff517 	ldw	r2,-44(fp)
81107014:	10c4b03a 	or	r2,r2,r3
81107018:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110701c:	00c00044 	movi	r3,1
81107020:	00a00034 	movhi	r2,32768
81107024:	10824c04 	addi	r2,r2,2352
81107028:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110702c:	010003c4 	movi	r4,15
81107030:	112acf80 	call	8112acf8 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81107034:	0007883a 	mov	r3,zero
81107038:	00a00034 	movhi	r2,32768
8110703c:	10824c04 	addi	r2,r2,2352
81107040:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107044:	010003c4 	movi	r4,15
81107048:	112acf80 	call	8112acf8 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
8110704c:	e0bff717 	ldw	r2,-36(fp)
81107050:	10800044 	addi	r2,r2,1
81107054:	e0bff715 	stw	r2,-36(fp)
81107058:	e0bff717 	ldw	r2,-36(fp)
8110705c:	10800210 	cmplti	r2,r2,8
81107060:	103fe31e 	bne	r2,zero,81106ff0 <__reset+0xfb0e6ff0>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81107064:	e03ff715 	stw	zero,-36(fp)
81107068:	00001a06 	br	811070d4 <POWER_SPI_RW+0x39c>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
8110706c:	e0bff517 	ldw	r2,-44(fp)
81107070:	1085883a 	add	r2,r2,r2
81107074:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81107078:	00a00034 	movhi	r2,32768
8110707c:	10825404 	addi	r2,r2,2384
81107080:	10800037 	ldwio	r2,0(r2)
81107084:	1080004c 	andi	r2,r2,1
81107088:	1007883a 	mov	r3,r2
8110708c:	e0bff517 	ldw	r2,-44(fp)
81107090:	10c4b03a 	or	r2,r2,r3
81107094:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107098:	00c00044 	movi	r3,1
8110709c:	00a00034 	movhi	r2,32768
811070a0:	10824c04 	addi	r2,r2,2352
811070a4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070a8:	010003c4 	movi	r4,15
811070ac:	112acf80 	call	8112acf8 <usleep>
		SPI_SCK(0); //sck=0; // clock low
811070b0:	0007883a 	mov	r3,zero
811070b4:	00a00034 	movhi	r2,32768
811070b8:	10824c04 	addi	r2,r2,2352
811070bc:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070c0:	010003c4 	movi	r4,15
811070c4:	112acf80 	call	8112acf8 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
811070c8:	e0bff717 	ldw	r2,-36(fp)
811070cc:	10800044 	addi	r2,r2,1
811070d0:	e0bff715 	stw	r2,-36(fp)
811070d4:	e0bff717 	ldw	r2,-36(fp)
811070d8:	10800210 	cmplti	r2,r2,8
811070dc:	103fe31e 	bne	r2,zero,8110706c <__reset+0xfb0e706c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811070e0:	e03ff715 	stw	zero,-36(fp)
811070e4:	00001a06 	br	81107150 <POWER_SPI_RW+0x418>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
811070e8:	e0bff517 	ldw	r2,-44(fp)
811070ec:	1085883a 	add	r2,r2,r2
811070f0:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
811070f4:	00a00034 	movhi	r2,32768
811070f8:	10825404 	addi	r2,r2,2384
811070fc:	10800037 	ldwio	r2,0(r2)
81107100:	1080004c 	andi	r2,r2,1
81107104:	1007883a 	mov	r3,r2
81107108:	e0bff517 	ldw	r2,-44(fp)
8110710c:	10c4b03a 	or	r2,r2,r3
81107110:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107114:	00c00044 	movi	r3,1
81107118:	00a00034 	movhi	r2,32768
8110711c:	10824c04 	addi	r2,r2,2352
81107120:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107124:	010003c4 	movi	r4,15
81107128:	112acf80 	call	8112acf8 <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110712c:	0007883a 	mov	r3,zero
81107130:	00a00034 	movhi	r2,32768
81107134:	10824c04 	addi	r2,r2,2352
81107138:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110713c:	010003c4 	movi	r4,15
81107140:	112acf80 	call	8112acf8 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
81107144:	e0bff717 	ldw	r2,-36(fp)
81107148:	10800044 	addi	r2,r2,1
8110714c:	e0bff715 	stw	r2,-36(fp)
81107150:	e0bff717 	ldw	r2,-36(fp)
81107154:	10800190 	cmplti	r2,r2,6
81107158:	103fe31e 	bne	r2,zero,811070e8 <__reset+0xfb0e70e8>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
8110715c:	00c00044 	movi	r3,1
81107160:	00a00034 	movhi	r2,32768
81107164:	10824c04 	addi	r2,r2,2352
81107168:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
8110716c:	010003c4 	movi	r4,15
81107170:	112acf80 	call	8112acf8 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
81107174:	00c000c4 	movi	r3,3
81107178:	00a00034 	movhi	r2,32768
8110717c:	10824804 	addi	r2,r2,2336
81107180:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
81107184:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81107188:	00800044 	movi	r2,1
8110718c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81107190:	e03ff715 	stw	zero,-36(fp)
81107194:	00000d06 	br	811071cc <POWER_SPI_RW+0x494>
		if ((Value32 & Mask32) == 0x00) {
81107198:	e0fff517 	ldw	r3,-44(fp)
8110719c:	e0bff617 	ldw	r2,-40(fp)
811071a0:	1884703a 	and	r2,r3,r2
811071a4:	1000031e 	bne	r2,zero,811071b4 <POWER_SPI_RW+0x47c>
			nZeroCnt++;
811071a8:	e0bff917 	ldw	r2,-28(fp)
811071ac:	10800044 	addi	r2,r2,1
811071b0:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
811071b4:	e0bff617 	ldw	r2,-40(fp)
811071b8:	1085883a 	add	r2,r2,r2
811071bc:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
811071c0:	e0bff717 	ldw	r2,-36(fp)
811071c4:	10800044 	addi	r2,r2,1
811071c8:	e0bff715 	stw	r2,-36(fp)
811071cc:	e0bff717 	ldw	r2,-36(fp)
811071d0:	10800810 	cmplti	r2,r2,32
811071d4:	103ff01e 	bne	r2,zero,81107198 <__reset+0xfb0e7198>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
811071d8:	e0bff917 	ldw	r2,-28(fp)
811071dc:	1080004c 	andi	r2,r2,1
811071e0:	1005003a 	cmpeq	r2,r2,zero
811071e4:	10803fcc 	andi	r2,r2,255
811071e8:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
811071ec:	e0bffb17 	ldw	r2,-20(fp)
811071f0:	1000021e 	bne	r2,zero,811071fc <POWER_SPI_RW+0x4c4>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
811071f4:	0005883a 	mov	r2,zero
811071f8:	00000406 	br	8110720c <POWER_SPI_RW+0x4d4>
	}

	*pValue = Value32;
811071fc:	e0800317 	ldw	r2,12(fp)
81107200:	e0fff517 	ldw	r3,-44(fp)
81107204:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81107208:	e0bffb17 	ldw	r2,-20(fp)
}
8110720c:	e037883a 	mov	sp,fp
81107210:	dfc00117 	ldw	ra,4(sp)
81107214:	df000017 	ldw	fp,0(sp)
81107218:	dec00204 	addi	sp,sp,8
8110721c:	f800283a 	ret

81107220 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
81107220:	defffc04 	addi	sp,sp,-16
81107224:	de00012e 	bgeu	sp,et,8110722c <vRstcSimucamReset+0xc>
81107228:	003b68fa 	trap	3
8110722c:	dfc00315 	stw	ra,12(sp)
81107230:	df000215 	stw	fp,8(sp)
81107234:	df000204 	addi	fp,sp,8
81107238:	2005883a 	mov	r2,r4
8110723c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
81107240:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
81107244:	e0bfff0b 	ldhu	r2,-4(fp)
81107248:	e0fffe17 	ldw	r3,-8(fp)
8110724c:	1884b03a 	or	r2,r3,r2
81107250:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
81107254:	e0bffe17 	ldw	r2,-8(fp)
81107258:	10800074 	orhi	r2,r2,1
8110725c:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107260:	e1bffe17 	ldw	r6,-8(fp)
81107264:	000b883a 	mov	r5,zero
81107268:	01200034 	movhi	r4,32768
8110726c:	21020004 	addi	r4,r4,2048
81107270:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81107274:	0001883a 	nop
81107278:	e037883a 	mov	sp,fp
8110727c:	dfc00117 	ldw	ra,4(sp)
81107280:	df000017 	ldw	fp,0(sp)
81107284:	dec00204 	addi	sp,sp,8
81107288:	f800283a 	ret

8110728c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110728c:	defffc04 	addi	sp,sp,-16
81107290:	de00012e 	bgeu	sp,et,81107298 <vRstcReleaseDeviceReset+0xc>
81107294:	003b68fa 	trap	3
81107298:	dfc00315 	stw	ra,12(sp)
8110729c:	df000215 	stw	fp,8(sp)
811072a0:	df000204 	addi	fp,sp,8
811072a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811072a8:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072ac:	01400044 	movi	r5,1
811072b0:	01200034 	movhi	r4,32768
811072b4:	21020004 	addi	r4,r4,2048
811072b8:	11073c40 	call	811073c4 <uliRstReadReg>
811072bc:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
811072c0:	e0bfff17 	ldw	r2,-4(fp)
811072c4:	0084303a 	nor	r2,zero,r2
811072c8:	e0fffe17 	ldw	r3,-8(fp)
811072cc:	1884703a 	and	r2,r3,r2
811072d0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072d4:	e1bffe17 	ldw	r6,-8(fp)
811072d8:	01400044 	movi	r5,1
811072dc:	01200034 	movhi	r4,32768
811072e0:	21020004 	addi	r4,r4,2048
811072e4:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811072e8:	0001883a 	nop
811072ec:	e037883a 	mov	sp,fp
811072f0:	dfc00117 	ldw	ra,4(sp)
811072f4:	df000017 	ldw	fp,0(sp)
811072f8:	dec00204 	addi	sp,sp,8
811072fc:	f800283a 	ret

81107300 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
81107300:	defffc04 	addi	sp,sp,-16
81107304:	de00012e 	bgeu	sp,et,8110730c <vRstcHoldDeviceReset+0xc>
81107308:	003b68fa 	trap	3
8110730c:	dfc00315 	stw	ra,12(sp)
81107310:	df000215 	stw	fp,8(sp)
81107314:	df000204 	addi	fp,sp,8
81107318:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
8110731c:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107320:	01400044 	movi	r5,1
81107324:	01200034 	movhi	r4,32768
81107328:	21020004 	addi	r4,r4,2048
8110732c:	11073c40 	call	811073c4 <uliRstReadReg>
81107330:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
81107334:	e0fffe17 	ldw	r3,-8(fp)
81107338:	e0bfff17 	ldw	r2,-4(fp)
8110733c:	1884b03a 	or	r2,r3,r2
81107340:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107344:	e1bffe17 	ldw	r6,-8(fp)
81107348:	01400044 	movi	r5,1
8110734c:	01200034 	movhi	r4,32768
81107350:	21020004 	addi	r4,r4,2048
81107354:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81107358:	0001883a 	nop
8110735c:	e037883a 	mov	sp,fp
81107360:	dfc00117 	ldw	ra,4(sp)
81107364:	df000017 	ldw	fp,0(sp)
81107368:	dec00204 	addi	sp,sp,8
8110736c:	f800283a 	ret

81107370 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81107370:	defffc04 	addi	sp,sp,-16
81107374:	de00012e 	bgeu	sp,et,8110737c <vRstcWriteReg+0xc>
81107378:	003b68fa 	trap	3
8110737c:	df000315 	stw	fp,12(sp)
81107380:	df000304 	addi	fp,sp,12
81107384:	e13ffd15 	stw	r4,-12(fp)
81107388:	e17ffe15 	stw	r5,-8(fp)
8110738c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81107390:	e0bffe17 	ldw	r2,-8(fp)
81107394:	1085883a 	add	r2,r2,r2
81107398:	1085883a 	add	r2,r2,r2
8110739c:	1007883a 	mov	r3,r2
811073a0:	e0bffd17 	ldw	r2,-12(fp)
811073a4:	10c5883a 	add	r2,r2,r3
811073a8:	e0ffff17 	ldw	r3,-4(fp)
811073ac:	10c00015 	stw	r3,0(r2)
}
811073b0:	0001883a 	nop
811073b4:	e037883a 	mov	sp,fp
811073b8:	df000017 	ldw	fp,0(sp)
811073bc:	dec00104 	addi	sp,sp,4
811073c0:	f800283a 	ret

811073c4 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811073c4:	defffc04 	addi	sp,sp,-16
811073c8:	de00012e 	bgeu	sp,et,811073d0 <uliRstReadReg+0xc>
811073cc:	003b68fa 	trap	3
811073d0:	df000315 	stw	fp,12(sp)
811073d4:	df000304 	addi	fp,sp,12
811073d8:	e13ffe15 	stw	r4,-8(fp)
811073dc:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811073e0:	e0bfff17 	ldw	r2,-4(fp)
811073e4:	1085883a 	add	r2,r2,r2
811073e8:	1085883a 	add	r2,r2,r2
811073ec:	1007883a 	mov	r3,r2
811073f0:	e0bffe17 	ldw	r2,-8(fp)
811073f4:	10c5883a 	add	r2,r2,r3
811073f8:	10800017 	ldw	r2,0(r2)
811073fc:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81107400:	e0bffd17 	ldw	r2,-12(fp)
}
81107404:	e037883a 	mov	sp,fp
81107408:	df000017 	ldw	fp,0(sp)
8110740c:	dec00104 	addi	sp,sp,4
81107410:	f800283a 	ret

81107414 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
81107414:	defffe04 	addi	sp,sp,-8
81107418:	de00012e 	bgeu	sp,et,81107420 <v_spi_start+0xc>
8110741c:	003b68fa 	trap	3
81107420:	dfc00115 	stw	ra,4(sp)
81107424:	df000015 	stw	fp,0(sp)
81107428:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
8110742c:	0007883a 	mov	r3,zero
81107430:	00a00034 	movhi	r2,32768
81107434:	10823004 	addi	r2,r2,2240
81107438:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
8110743c:	0007883a 	mov	r3,zero
81107440:	00a00034 	movhi	r2,32768
81107444:	10822c04 	addi	r2,r2,2224
81107448:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110744c:	01002584 	movi	r4,150
81107450:	112acf80 	call	8112acf8 <usleep>
}
81107454:	0001883a 	nop
81107458:	e037883a 	mov	sp,fp
8110745c:	dfc00117 	ldw	ra,4(sp)
81107460:	df000017 	ldw	fp,0(sp)
81107464:	dec00204 	addi	sp,sp,8
81107468:	f800283a 	ret

8110746c <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
8110746c:	defffc04 	addi	sp,sp,-16
81107470:	de00012e 	bgeu	sp,et,81107478 <v_spi_send_byte+0xc>
81107474:	003b68fa 	trap	3
81107478:	dfc00315 	stw	ra,12(sp)
8110747c:	df000215 	stw	fp,8(sp)
81107480:	df000204 	addi	fp,sp,8
81107484:	2005883a 	mov	r2,r4
81107488:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110748c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81107490:	00bfe004 	movi	r2,-128
81107494:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81107498:	e03ffe05 	stb	zero,-8(fp)
8110749c:	00001b06 	br	8110750c <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
811074a0:	e0ffff03 	ldbu	r3,-4(fp)
811074a4:	e0bffe43 	ldbu	r2,-7(fp)
811074a8:	1884703a 	and	r2,r3,r2
811074ac:	10803fcc 	andi	r2,r2,255
811074b0:	1004c03a 	cmpne	r2,r2,zero
811074b4:	10c03fcc 	andi	r3,r2,255
811074b8:	00a00034 	movhi	r2,32768
811074bc:	10823404 	addi	r2,r2,2256
811074c0:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
811074c4:	e0bffe43 	ldbu	r2,-7(fp)
811074c8:	1004d07a 	srli	r2,r2,1
811074cc:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
811074d0:	00c00044 	movi	r3,1
811074d4:	00a00034 	movhi	r2,32768
811074d8:	10823004 	addi	r2,r2,2240
811074dc:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811074e0:	01002584 	movi	r4,150
811074e4:	112acf80 	call	8112acf8 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811074e8:	0007883a 	mov	r3,zero
811074ec:	00a00034 	movhi	r2,32768
811074f0:	10823004 	addi	r2,r2,2240
811074f4:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811074f8:	01002584 	movi	r4,150
811074fc:	112acf80 	call	8112acf8 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81107500:	e0bffe03 	ldbu	r2,-8(fp)
81107504:	10800044 	addi	r2,r2,1
81107508:	e0bffe05 	stb	r2,-8(fp)
8110750c:	e0bffe03 	ldbu	r2,-8(fp)
81107510:	10800230 	cmpltui	r2,r2,8
81107514:	103fe21e 	bne	r2,zero,811074a0 <__reset+0xfb0e74a0>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81107518:	0001883a 	nop
8110751c:	e037883a 	mov	sp,fp
81107520:	dfc00117 	ldw	ra,4(sp)
81107524:	df000017 	ldw	fp,0(sp)
81107528:	dec00204 	addi	sp,sp,8
8110752c:	f800283a 	ret

81107530 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
81107530:	defffd04 	addi	sp,sp,-12
81107534:	de00012e 	bgeu	sp,et,8110753c <uc_spi_get_byte+0xc>
81107538:	003b68fa 	trap	3
8110753c:	dfc00215 	stw	ra,8(sp)
81107540:	df000115 	stw	fp,4(sp)
81107544:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
81107548:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
8110754c:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
81107550:	e03fff05 	stb	zero,-4(fp)
81107554:	00001a06 	br	811075c0 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
81107558:	e0bfff43 	ldbu	r2,-3(fp)
8110755c:	1085883a 	add	r2,r2,r2
81107560:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
81107564:	00a00034 	movhi	r2,32768
81107568:	10823804 	addi	r2,r2,2272
8110756c:	10800037 	ldwio	r2,0(r2)
81107570:	1080004c 	andi	r2,r2,1
81107574:	1007883a 	mov	r3,r2
81107578:	e0bfff43 	ldbu	r2,-3(fp)
8110757c:	1884b03a 	or	r2,r3,r2
81107580:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81107584:	00c00044 	movi	r3,1
81107588:	00a00034 	movhi	r2,32768
8110758c:	10823004 	addi	r2,r2,2240
81107590:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107594:	01002584 	movi	r4,150
81107598:	112acf80 	call	8112acf8 <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110759c:	0007883a 	mov	r3,zero
811075a0:	00a00034 	movhi	r2,32768
811075a4:	10823004 	addi	r2,r2,2240
811075a8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811075ac:	01002584 	movi	r4,150
811075b0:	112acf80 	call	8112acf8 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
811075b4:	e0bfff03 	ldbu	r2,-4(fp)
811075b8:	10800044 	addi	r2,r2,1
811075bc:	e0bfff05 	stb	r2,-4(fp)
811075c0:	e0bfff03 	ldbu	r2,-4(fp)
811075c4:	10800230 	cmpltui	r2,r2,8
811075c8:	103fe31e 	bne	r2,zero,81107558 <__reset+0xfb0e7558>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
811075cc:	e0bfff43 	ldbu	r2,-3(fp)
}
811075d0:	e037883a 	mov	sp,fp
811075d4:	dfc00117 	ldw	ra,4(sp)
811075d8:	df000017 	ldw	fp,0(sp)
811075dc:	dec00204 	addi	sp,sp,8
811075e0:	f800283a 	ret

811075e4 <v_spi_end>:

void v_spi_end(void){
811075e4:	defffe04 	addi	sp,sp,-8
811075e8:	de00012e 	bgeu	sp,et,811075f0 <v_spi_end+0xc>
811075ec:	003b68fa 	trap	3
811075f0:	dfc00115 	stw	ra,4(sp)
811075f4:	df000015 	stw	fp,0(sp)
811075f8:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
811075fc:	0007883a 	mov	r3,zero
81107600:	00a00034 	movhi	r2,32768
81107604:	10823004 	addi	r2,r2,2240
81107608:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110760c:	01002584 	movi	r4,150
81107610:	112acf80 	call	8112acf8 <usleep>
    SPI_CS_N(1);
81107614:	00c00044 	movi	r3,1
81107618:	00a00034 	movhi	r2,32768
8110761c:	10822c04 	addi	r2,r2,2224
81107620:	10c00035 	stwio	r3,0(r2)
}
81107624:	0001883a 	nop
81107628:	e037883a 	mov	sp,fp
8110762c:	dfc00117 	ldw	ra,4(sp)
81107630:	df000017 	ldw	fp,0(sp)
81107634:	dec00204 	addi	sp,sp,8
81107638:	f800283a 	ret

8110763c <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
8110763c:	defff604 	addi	sp,sp,-40
81107640:	de00012e 	bgeu	sp,et,81107648 <RTCC_SPI_R_MAC+0xc>
81107644:	003b68fa 	trap	3
81107648:	dfc00915 	stw	ra,36(sp)
8110764c:	df000815 	stw	fp,32(sp)
81107650:	df000804 	addi	fp,sp,32
81107654:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107658:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
8110765c:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
81107660:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
81107664:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
81107668:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
8110766c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81107670:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81107674:	00800084 	movi	r2,2
81107678:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110767c:	00800cc4 	movi	r2,51
81107680:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81107684:	11074140 	call	81107414 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81107688:	e0bffec3 	ldbu	r2,-5(fp)
8110768c:	1009883a 	mov	r4,r2
81107690:	110746c0 	call	8110746c <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81107694:	e0bffe83 	ldbu	r2,-6(fp)
81107698:	1009883a 	mov	r4,r2
8110769c:	110746c0 	call	8110746c <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
811076a0:	11075300 	call	81107530 <uc_spi_get_byte>
811076a4:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
811076a8:	11075300 	call	81107530 <uc_spi_get_byte>
811076ac:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
811076b0:	11075300 	call	81107530 <uc_spi_get_byte>
811076b4:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
811076b8:	11075300 	call	81107530 <uc_spi_get_byte>
811076bc:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
811076c0:	11075300 	call	81107530 <uc_spi_get_byte>
811076c4:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
811076c8:	11075300 	call	81107530 <uc_spi_get_byte>
811076cc:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
811076d0:	11075e40 	call	811075e4 <v_spi_end>

    bSuccess = TRUE;
811076d4:	00800044 	movi	r2,1
811076d8:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
811076dc:	e0bfff17 	ldw	r2,-4(fp)
811076e0:	e0fffd03 	ldbu	r3,-12(fp)
811076e4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
811076e8:	e0bfff17 	ldw	r2,-4(fp)
811076ec:	10800044 	addi	r2,r2,1
811076f0:	e0fffd43 	ldbu	r3,-11(fp)
811076f4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
811076f8:	e0bfff17 	ldw	r2,-4(fp)
811076fc:	10800084 	addi	r2,r2,2
81107700:	e0fffd83 	ldbu	r3,-10(fp)
81107704:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81107708:	e0bfff17 	ldw	r2,-4(fp)
8110770c:	108000c4 	addi	r2,r2,3
81107710:	e0fffdc3 	ldbu	r3,-9(fp)
81107714:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
81107718:	e0bfff17 	ldw	r2,-4(fp)
8110771c:	10800104 	addi	r2,r2,4
81107720:	e0fffe03 	ldbu	r3,-8(fp)
81107724:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
81107728:	e0bfff17 	ldw	r2,-4(fp)
8110772c:	10800144 	addi	r2,r2,5
81107730:	e0fffe43 	ldbu	r3,-7(fp)
81107734:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
81107738:	e1bffd03 	ldbu	r6,-12(fp)
8110773c:	e1fffd43 	ldbu	r7,-11(fp)
81107740:	e0bffd83 	ldbu	r2,-10(fp)
81107744:	e0fffdc3 	ldbu	r3,-9(fp)
81107748:	e13ffe03 	ldbu	r4,-8(fp)
8110774c:	e17ffe43 	ldbu	r5,-7(fp)
81107750:	d9400315 	stw	r5,12(sp)
81107754:	d9000215 	stw	r4,8(sp)
81107758:	d8c00115 	stw	r3,4(sp)
8110775c:	d8800015 	stw	r2,0(sp)
81107760:	01604534 	movhi	r5,33044
81107764:	297e0504 	addi	r5,r5,-2028
81107768:	01204534 	movhi	r4,33044
8110776c:	21135404 	addi	r4,r4,19792
81107770:	11153700 	call	81115370 <sprintf>
	debug(fp, cDebugBuffer);
81107774:	d0a05017 	ldw	r2,-32448(gp)
81107778:	01604534 	movhi	r5,33044
8110777c:	29535404 	addi	r5,r5,19792
81107780:	1009883a 	mov	r4,r2
81107784:	11139c00 	call	811139c0 <fprintf>
#endif

    return bSuccess;
81107788:	e0bffc17 	ldw	r2,-16(fp)
}
8110778c:	e037883a 	mov	sp,fp
81107790:	dfc00117 	ldw	ra,4(sp)
81107794:	df000017 	ldw	fp,0(sp)
81107798:	dec00204 	addi	sp,sp,8
8110779c:	f800283a 	ret

811077a0 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
811077a0:	defffd04 	addi	sp,sp,-12
811077a4:	de00012e 	bgeu	sp,et,811077ac <bSSDisplayConfig+0xc>
811077a8:	003b68fa 	trap	3
811077ac:	df000215 	stw	fp,8(sp)
811077b0:	df000204 	addi	fp,sp,8
811077b4:	2005883a 	mov	r2,r4
811077b8:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
811077bc:	e0bfff03 	ldbu	r2,-4(fp)
811077c0:	10c00168 	cmpgeui	r3,r2,5
811077c4:	18001c1e 	bne	r3,zero,81107838 <bSSDisplayConfig+0x98>
811077c8:	100690ba 	slli	r3,r2,2
811077cc:	00a04434 	movhi	r2,33040
811077d0:	109df804 	addi	r2,r2,30688
811077d4:	1885883a 	add	r2,r3,r2
811077d8:	10800017 	ldw	r2,0(r2)
811077dc:	1000683a 	jmp	r2
811077e0:	811077f4 	orhi	r4,r16,16863
811077e4:	81107800 	call	88110780 <__reset+0x20f0780>
811077e8:	8110780c 	andi	r4,r16,16864
811077ec:	81107820 	cmpeqi	r4,r16,16864
811077f0:	81107830 	cmpltui	r4,r16,16864
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
811077f4:	00800cc4 	movi	r2,51
811077f8:	d0a04645 	stb	r2,-32487(gp)
	    break;
811077fc:	00001006 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81107800:	00801544 	movi	r2,85
81107804:	d0a04645 	stb	r2,-32487(gp)
	    break;
81107808:	00000d06 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110780c:	d0e04643 	ldbu	r3,-32487(gp)
81107810:	00bff744 	movi	r2,-35
81107814:	1884703a 	and	r2,r3,r2
81107818:	d0a04645 	stb	r2,-32487(gp)
	    break;
8110781c:	00000806 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81107820:	d0a04643 	ldbu	r2,-32487(gp)
81107824:	10800894 	ori	r2,r2,34
81107828:	d0a04645 	stb	r2,-32487(gp)
	    break;
8110782c:	00000406 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81107830:	d0204645 	stb	zero,-32487(gp)
	    break;
81107834:	00000206 	br	81107840 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
81107838:	0005883a 	mov	r2,zero
8110783c:	00000806 	br	81107860 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
81107840:	00a00034 	movhi	r2,32768
81107844:	10828404 	addi	r2,r2,2576
81107848:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
8110784c:	d0a04643 	ldbu	r2,-32487(gp)
81107850:	10c03fcc 	andi	r3,r2,255
81107854:	e0bffe17 	ldw	r2,-8(fp)
81107858:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110785c:	00800044 	movi	r2,1
}
81107860:	e037883a 	mov	sp,fp
81107864:	df000017 	ldw	fp,0(sp)
81107868:	dec00104 	addi	sp,sp,4
8110786c:	f800283a 	ret

81107870 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81107870:	defffd04 	addi	sp,sp,-12
81107874:	de00012e 	bgeu	sp,et,8110787c <bSSDisplayUpdate+0xc>
81107878:	003b68fa 	trap	3
8110787c:	df000215 	stw	fp,8(sp)
81107880:	df000204 	addi	fp,sp,8
81107884:	2005883a 	mov	r2,r4
81107888:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110788c:	00a00034 	movhi	r2,32768
81107890:	10828404 	addi	r2,r2,2576
81107894:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81107898:	e0bffe17 	ldw	r2,-8(fp)
8110789c:	10800104 	addi	r2,r2,4
811078a0:	e0ffff03 	ldbu	r3,-4(fp)
811078a4:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811078a8:	00800044 	movi	r2,1
}
811078ac:	e037883a 	mov	sp,fp
811078b0:	df000017 	ldw	fp,0(sp)
811078b4:	dec00104 	addi	sp,sp,4
811078b8:	f800283a 	ret

811078bc <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
811078bc:	defffd04 	addi	sp,sp,-12
811078c0:	de00012e 	bgeu	sp,et,811078c8 <vSyncHandleIrq+0xc>
811078c4:	003b68fa 	trap	3
811078c8:	df000215 	stw	fp,8(sp)
811078cc:	df000204 	addi	fp,sp,8
811078d0:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811078d4:	e0bfff17 	ldw	r2,-4(fp)
811078d8:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
811078dc:	d0a04803 	ldbu	r2,-32480(gp)
811078e0:	10800044 	addi	r2,r2,1
811078e4:	d0a04805 	stb	r2,-32480(gp)
}
811078e8:	0001883a 	nop
811078ec:	e037883a 	mov	sp,fp
811078f0:	df000017 	ldw	fp,0(sp)
811078f4:	dec00104 	addi	sp,sp,4
811078f8:	f800283a 	ret

811078fc <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
811078fc:	defffd04 	addi	sp,sp,-12
81107900:	de00012e 	bgeu	sp,et,81107908 <vSyncInitIrq+0xc>
81107904:	003b68fa 	trap	3
81107908:	dfc00215 	stw	ra,8(sp)
8110790c:	df000115 	stw	fp,4(sp)
81107910:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
81107914:	d0a04704 	addi	r2,gp,-32484
81107918:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
8110791c:	01a04434 	movhi	r6,33040
81107920:	319e2f04 	addi	r6,r6,30908
81107924:	e17fff17 	ldw	r5,-4(fp)
81107928:	01000284 	movi	r4,10
8110792c:	11295e80 	call	811295e8 <alt_irq_register>
}
81107930:	0001883a 	nop
81107934:	e037883a 	mov	sp,fp
81107938:	dfc00117 	ldw	ra,4(sp)
8110793c:	df000017 	ldw	fp,0(sp)
81107940:	dec00204 	addi	sp,sp,8
81107944:	f800283a 	ret

81107948 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
81107948:	defffc04 	addi	sp,sp,-16
8110794c:	de00012e 	bgeu	sp,et,81107954 <bSyncStatusExtnIrq+0xc>
81107950:	003b68fa 	trap	3
81107954:	dfc00315 	stw	ra,12(sp)
81107958:	df000215 	stw	fp,8(sp)
8110795c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107960:	0009883a 	mov	r4,zero
81107964:	11086f80 	call	811086f8 <uliSyncReadReg>
81107968:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
8110796c:	e0bfff17 	ldw	r2,-4(fp)
81107970:	1000030e 	bge	r2,zero,81107980 <bSyncStatusExtnIrq+0x38>
		bResult = TRUE;
81107974:	00800044 	movi	r2,1
81107978:	e0bffe15 	stw	r2,-8(fp)
8110797c:	00000106 	br	81107984 <bSyncStatusExtnIrq+0x3c>
	} else {
		bResult = FALSE;
81107980:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107984:	e0bffe17 	ldw	r2,-8(fp)
}
81107988:	e037883a 	mov	sp,fp
8110798c:	dfc00117 	ldw	ra,4(sp)
81107990:	df000017 	ldw	fp,0(sp)
81107994:	dec00204 	addi	sp,sp,8
81107998:	f800283a 	ret

8110799c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110799c:	defffc04 	addi	sp,sp,-16
811079a0:	de00012e 	bgeu	sp,et,811079a8 <ucSyncStatusState+0xc>
811079a4:	003b68fa 	trap	3
811079a8:	dfc00315 	stw	ra,12(sp)
811079ac:	df000215 	stw	fp,8(sp)
811079b0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811079b4:	0009883a 	mov	r4,zero
811079b8:	11086f80 	call	811086f8 <uliSyncReadReg>
811079bc:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
811079c0:	e0bffe17 	ldw	r2,-8(fp)
811079c4:	10803fec 	andhi	r2,r2,255
811079c8:	1004d43a 	srli	r2,r2,16
811079cc:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079d0:	e0bfff03 	ldbu	r2,-4(fp)
}
811079d4:	e037883a 	mov	sp,fp
811079d8:	dfc00117 	ldw	ra,4(sp)
811079dc:	df000017 	ldw	fp,0(sp)
811079e0:	dec00204 	addi	sp,sp,8
811079e4:	f800283a 	ret

811079e8 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
811079e8:	defffc04 	addi	sp,sp,-16
811079ec:	de00012e 	bgeu	sp,et,811079f4 <ucSyncStatusErrorCode+0xc>
811079f0:	003b68fa 	trap	3
811079f4:	dfc00315 	stw	ra,12(sp)
811079f8:	df000215 	stw	fp,8(sp)
811079fc:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107a00:	0009883a 	mov	r4,zero
81107a04:	11086f80 	call	811086f8 <uliSyncReadReg>
81107a08:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
81107a0c:	e0bffe17 	ldw	r2,-8(fp)
81107a10:	10bfc00c 	andi	r2,r2,65280
81107a14:	1004d23a 	srli	r2,r2,8
81107a18:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107a1c:	e0bfff03 	ldbu	r2,-4(fp)
}
81107a20:	e037883a 	mov	sp,fp
81107a24:	dfc00117 	ldw	ra,4(sp)
81107a28:	df000017 	ldw	fp,0(sp)
81107a2c:	dec00204 	addi	sp,sp,8
81107a30:	f800283a 	ret

81107a34 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
81107a34:	defffc04 	addi	sp,sp,-16
81107a38:	de00012e 	bgeu	sp,et,81107a40 <ucSyncStatusCycleNumber+0xc>
81107a3c:	003b68fa 	trap	3
81107a40:	dfc00315 	stw	ra,12(sp)
81107a44:	df000215 	stw	fp,8(sp)
81107a48:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107a4c:	0009883a 	mov	r4,zero
81107a50:	11086f80 	call	811086f8 <uliSyncReadReg>
81107a54:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
81107a58:	e0bffe17 	ldw	r2,-8(fp)
81107a5c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107a60:	e0bfff03 	ldbu	r2,-4(fp)
}
81107a64:	e037883a 	mov	sp,fp
81107a68:	dfc00117 	ldw	ra,4(sp)
81107a6c:	df000017 	ldw	fp,0(sp)
81107a70:	dec00204 	addi	sp,sp,8
81107a74:	f800283a 	ret

81107a78 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81107a78:	defffd04 	addi	sp,sp,-12
81107a7c:	de00012e 	bgeu	sp,et,81107a84 <bSyncSetMbt+0xc>
81107a80:	003b68fa 	trap	3
81107a84:	dfc00215 	stw	ra,8(sp)
81107a88:	df000115 	stw	fp,4(sp)
81107a8c:	df000104 	addi	fp,sp,4
81107a90:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107a94:	e17fff17 	ldw	r5,-4(fp)
81107a98:	01000104 	movi	r4,4
81107a9c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107aa0:	00800044 	movi	r2,1
}
81107aa4:	e037883a 	mov	sp,fp
81107aa8:	dfc00117 	ldw	ra,4(sp)
81107aac:	df000017 	ldw	fp,0(sp)
81107ab0:	dec00204 	addi	sp,sp,8
81107ab4:	f800283a 	ret

81107ab8 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107ab8:	defffd04 	addi	sp,sp,-12
81107abc:	de00012e 	bgeu	sp,et,81107ac4 <bSyncSetBt+0xc>
81107ac0:	003b68fa 	trap	3
81107ac4:	dfc00215 	stw	ra,8(sp)
81107ac8:	df000115 	stw	fp,4(sp)
81107acc:	df000104 	addi	fp,sp,4
81107ad0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
81107ad4:	e17fff17 	ldw	r5,-4(fp)
81107ad8:	01000144 	movi	r4,5
81107adc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107ae0:	00800044 	movi	r2,1
}
81107ae4:	e037883a 	mov	sp,fp
81107ae8:	dfc00117 	ldw	ra,4(sp)
81107aec:	df000017 	ldw	fp,0(sp)
81107af0:	dec00204 	addi	sp,sp,8
81107af4:	f800283a 	ret

81107af8 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107af8:	defffd04 	addi	sp,sp,-12
81107afc:	de00012e 	bgeu	sp,et,81107b04 <bSyncSetPer+0xc>
81107b00:	003b68fa 	trap	3
81107b04:	dfc00215 	stw	ra,8(sp)
81107b08:	df000115 	stw	fp,4(sp)
81107b0c:	df000104 	addi	fp,sp,4
81107b10:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107b14:	e17fff17 	ldw	r5,-4(fp)
81107b18:	01000184 	movi	r4,6
81107b1c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107b20:	00800044 	movi	r2,1
}
81107b24:	e037883a 	mov	sp,fp
81107b28:	dfc00117 	ldw	ra,4(sp)
81107b2c:	df000017 	ldw	fp,0(sp)
81107b30:	dec00204 	addi	sp,sp,8
81107b34:	f800283a 	ret

81107b38 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107b38:	defffd04 	addi	sp,sp,-12
81107b3c:	de00012e 	bgeu	sp,et,81107b44 <bSyncSetOst+0xc>
81107b40:	003b68fa 	trap	3
81107b44:	dfc00215 	stw	ra,8(sp)
81107b48:	df000115 	stw	fp,4(sp)
81107b4c:	df000104 	addi	fp,sp,4
81107b50:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
81107b54:	e17fff17 	ldw	r5,-4(fp)
81107b58:	010001c4 	movi	r4,7
81107b5c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107b60:	00800044 	movi	r2,1
}
81107b64:	e037883a 	mov	sp,fp
81107b68:	dfc00117 	ldw	ra,4(sp)
81107b6c:	df000017 	ldw	fp,0(sp)
81107b70:	dec00204 	addi	sp,sp,8
81107b74:	f800283a 	ret

81107b78 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
81107b78:	defffc04 	addi	sp,sp,-16
81107b7c:	de00012e 	bgeu	sp,et,81107b84 <bSyncSetPolarity+0xc>
81107b80:	003b68fa 	trap	3
81107b84:	dfc00315 	stw	ra,12(sp)
81107b88:	df000215 	stw	fp,8(sp)
81107b8c:	df000204 	addi	fp,sp,8
81107b90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b94:	01000204 	movi	r4,8
81107b98:	11086f80 	call	811086f8 <uliSyncReadReg>
81107b9c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107ba0:	e0bfff17 	ldw	r2,-4(fp)
81107ba4:	1000051e 	bne	r2,zero,81107bbc <bSyncSetPolarity+0x44>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
81107ba8:	e0fffe17 	ldw	r3,-8(fp)
81107bac:	00bfbfc4 	movi	r2,-257
81107bb0:	1884703a 	and	r2,r3,r2
81107bb4:	e0bffe15 	stw	r2,-8(fp)
81107bb8:	00000306 	br	81107bc8 <bSyncSetPolarity+0x50>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
81107bbc:	e0bffe17 	ldw	r2,-8(fp)
81107bc0:	10804014 	ori	r2,r2,256
81107bc4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107bc8:	e17ffe17 	ldw	r5,-8(fp)
81107bcc:	01000204 	movi	r4,8
81107bd0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107bd4:	00800044 	movi	r2,1
}
81107bd8:	e037883a 	mov	sp,fp
81107bdc:	dfc00117 	ldw	ra,4(sp)
81107be0:	df000017 	ldw	fp,0(sp)
81107be4:	dec00204 	addi	sp,sp,8
81107be8:	f800283a 	ret

81107bec <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
81107bec:	defffc04 	addi	sp,sp,-16
81107bf0:	de00012e 	bgeu	sp,et,81107bf8 <bSyncSetNCycles+0xc>
81107bf4:	003b68fa 	trap	3
81107bf8:	dfc00315 	stw	ra,12(sp)
81107bfc:	df000215 	stw	fp,8(sp)
81107c00:	df000204 	addi	fp,sp,8
81107c04:	2005883a 	mov	r2,r4
81107c08:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107c0c:	01000204 	movi	r4,8
81107c10:	11086f80 	call	811086f8 <uliSyncReadReg>
81107c14:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107c18:	e0fffe17 	ldw	r3,-8(fp)
81107c1c:	00bfc004 	movi	r2,-256
81107c20:	1884703a 	and	r2,r3,r2
81107c24:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107c28:	e0bfff03 	ldbu	r2,-4(fp)
81107c2c:	e0fffe17 	ldw	r3,-8(fp)
81107c30:	1884b03a 	or	r2,r3,r2
81107c34:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107c38:	e17ffe17 	ldw	r5,-8(fp)
81107c3c:	01000204 	movi	r4,8
81107c40:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107c44:	00800044 	movi	r2,1
}
81107c48:	e037883a 	mov	sp,fp
81107c4c:	dfc00117 	ldw	ra,4(sp)
81107c50:	df000017 	ldw	fp,0(sp)
81107c54:	dec00204 	addi	sp,sp,8
81107c58:	f800283a 	ret

81107c5c <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
81107c5c:	defffd04 	addi	sp,sp,-12
81107c60:	de00012e 	bgeu	sp,et,81107c68 <uliSyncGetMbt+0xc>
81107c64:	003b68fa 	trap	3
81107c68:	dfc00215 	stw	ra,8(sp)
81107c6c:	df000115 	stw	fp,4(sp)
81107c70:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
81107c74:	01000104 	movi	r4,4
81107c78:	11086f80 	call	811086f8 <uliSyncReadReg>
81107c7c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c80:	e0bfff17 	ldw	r2,-4(fp)
}
81107c84:	e037883a 	mov	sp,fp
81107c88:	dfc00117 	ldw	ra,4(sp)
81107c8c:	df000017 	ldw	fp,0(sp)
81107c90:	dec00204 	addi	sp,sp,8
81107c94:	f800283a 	ret

81107c98 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
81107c98:	defffd04 	addi	sp,sp,-12
81107c9c:	de00012e 	bgeu	sp,et,81107ca4 <uliSyncGetBt+0xc>
81107ca0:	003b68fa 	trap	3
81107ca4:	dfc00215 	stw	ra,8(sp)
81107ca8:	df000115 	stw	fp,4(sp)
81107cac:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
81107cb0:	01000144 	movi	r4,5
81107cb4:	11086f80 	call	811086f8 <uliSyncReadReg>
81107cb8:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cbc:	e0bfff17 	ldw	r2,-4(fp)
}
81107cc0:	e037883a 	mov	sp,fp
81107cc4:	dfc00117 	ldw	ra,4(sp)
81107cc8:	df000017 	ldw	fp,0(sp)
81107ccc:	dec00204 	addi	sp,sp,8
81107cd0:	f800283a 	ret

81107cd4 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
81107cd4:	defffd04 	addi	sp,sp,-12
81107cd8:	de00012e 	bgeu	sp,et,81107ce0 <uliSyncGetPer+0xc>
81107cdc:	003b68fa 	trap	3
81107ce0:	dfc00215 	stw	ra,8(sp)
81107ce4:	df000115 	stw	fp,4(sp)
81107ce8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
81107cec:	01000184 	movi	r4,6
81107cf0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107cf4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cf8:	e0bfff17 	ldw	r2,-4(fp)
}
81107cfc:	e037883a 	mov	sp,fp
81107d00:	dfc00117 	ldw	ra,4(sp)
81107d04:	df000017 	ldw	fp,0(sp)
81107d08:	dec00204 	addi	sp,sp,8
81107d0c:	f800283a 	ret

81107d10 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107d10:	defffd04 	addi	sp,sp,-12
81107d14:	de00012e 	bgeu	sp,et,81107d1c <uliSyncGetOst+0xc>
81107d18:	003b68fa 	trap	3
81107d1c:	dfc00215 	stw	ra,8(sp)
81107d20:	df000115 	stw	fp,4(sp)
81107d24:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107d28:	010001c4 	movi	r4,7
81107d2c:	11086f80 	call	811086f8 <uliSyncReadReg>
81107d30:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d34:	e0bfff17 	ldw	r2,-4(fp)
}
81107d38:	e037883a 	mov	sp,fp
81107d3c:	dfc00117 	ldw	ra,4(sp)
81107d40:	df000017 	ldw	fp,0(sp)
81107d44:	dec00204 	addi	sp,sp,8
81107d48:	f800283a 	ret

81107d4c <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107d4c:	defffd04 	addi	sp,sp,-12
81107d50:	de00012e 	bgeu	sp,et,81107d58 <uliSyncGetGeneral+0xc>
81107d54:	003b68fa 	trap	3
81107d58:	dfc00215 	stw	ra,8(sp)
81107d5c:	df000115 	stw	fp,4(sp)
81107d60:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107d64:	01000204 	movi	r4,8
81107d68:	11086f80 	call	811086f8 <uliSyncReadReg>
81107d6c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d70:	e0bfff17 	ldw	r2,-4(fp)
}
81107d74:	e037883a 	mov	sp,fp
81107d78:	dfc00117 	ldw	ra,4(sp)
81107d7c:	df000017 	ldw	fp,0(sp)
81107d80:	dec00204 	addi	sp,sp,8
81107d84:	f800283a 	ret

81107d88 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
81107d88:	defffd04 	addi	sp,sp,-12
81107d8c:	de00012e 	bgeu	sp,et,81107d94 <bSyncErrInj+0xc>
81107d90:	003b68fa 	trap	3
81107d94:	dfc00215 	stw	ra,8(sp)
81107d98:	df000115 	stw	fp,4(sp)
81107d9c:	df000104 	addi	fp,sp,4
81107da0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
81107da4:	e17fff17 	ldw	r5,-4(fp)
81107da8:	01000244 	movi	r4,9
81107dac:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107db0:	00800044 	movi	r2,1
}
81107db4:	e037883a 	mov	sp,fp
81107db8:	dfc00117 	ldw	ra,4(sp)
81107dbc:	df000017 	ldw	fp,0(sp)
81107dc0:	dec00204 	addi	sp,sp,8
81107dc4:	f800283a 	ret

81107dc8 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
81107dc8:	defffc04 	addi	sp,sp,-16
81107dcc:	de00012e 	bgeu	sp,et,81107dd4 <bSyncCtrExtnIrq+0xc>
81107dd0:	003b68fa 	trap	3
81107dd4:	dfc00315 	stw	ra,12(sp)
81107dd8:	df000215 	stw	fp,8(sp)
81107ddc:	df000204 	addi	fp,sp,8
81107de0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107de4:	01000284 	movi	r4,10
81107de8:	11086f80 	call	811086f8 <uliSyncReadReg>
81107dec:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107df0:	e0bfff17 	ldw	r2,-4(fp)
81107df4:	1000061e 	bne	r2,zero,81107e10 <bSyncCtrExtnIrq+0x48>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107df8:	e0fffe17 	ldw	r3,-8(fp)
81107dfc:	00a00034 	movhi	r2,32768
81107e00:	10bfffc4 	addi	r2,r2,-1
81107e04:	1884703a 	and	r2,r3,r2
81107e08:	e0bffe15 	stw	r2,-8(fp)
81107e0c:	00000306 	br	81107e1c <bSyncCtrExtnIrq+0x54>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107e10:	e0bffe17 	ldw	r2,-8(fp)
81107e14:	10a00034 	orhi	r2,r2,32768
81107e18:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e1c:	e17ffe17 	ldw	r5,-8(fp)
81107e20:	01000284 	movi	r4,10
81107e24:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107e28:	00800044 	movi	r2,1
}
81107e2c:	e037883a 	mov	sp,fp
81107e30:	dfc00117 	ldw	ra,4(sp)
81107e34:	df000017 	ldw	fp,0(sp)
81107e38:	dec00204 	addi	sp,sp,8
81107e3c:	f800283a 	ret

81107e40 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107e40:	defffd04 	addi	sp,sp,-12
81107e44:	de00012e 	bgeu	sp,et,81107e4c <bSyncCtrStart+0xc>
81107e48:	003b68fa 	trap	3
81107e4c:	dfc00215 	stw	ra,8(sp)
81107e50:	df000115 	stw	fp,4(sp)
81107e54:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e58:	01000284 	movi	r4,10
81107e5c:	11086f80 	call	811086f8 <uliSyncReadReg>
81107e60:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
81107e64:	e0bfff17 	ldw	r2,-4(fp)
81107e68:	10800234 	orhi	r2,r2,8
81107e6c:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e70:	e17fff17 	ldw	r5,-4(fp)
81107e74:	01000284 	movi	r4,10
81107e78:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107e7c:	00800044 	movi	r2,1
}
81107e80:	e037883a 	mov	sp,fp
81107e84:	dfc00117 	ldw	ra,4(sp)
81107e88:	df000017 	ldw	fp,0(sp)
81107e8c:	dec00204 	addi	sp,sp,8
81107e90:	f800283a 	ret

81107e94 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
81107e94:	defffd04 	addi	sp,sp,-12
81107e98:	de00012e 	bgeu	sp,et,81107ea0 <bSyncCtrReset+0xc>
81107e9c:	003b68fa 	trap	3
81107ea0:	dfc00215 	stw	ra,8(sp)
81107ea4:	df000115 	stw	fp,4(sp)
81107ea8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107eac:	01000284 	movi	r4,10
81107eb0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107eb4:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
81107eb8:	e0bfff17 	ldw	r2,-4(fp)
81107ebc:	10800134 	orhi	r2,r2,4
81107ec0:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107ec4:	e17fff17 	ldw	r5,-4(fp)
81107ec8:	01000284 	movi	r4,10
81107ecc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107ed0:	00800044 	movi	r2,1
}
81107ed4:	e037883a 	mov	sp,fp
81107ed8:	dfc00117 	ldw	ra,4(sp)
81107edc:	df000017 	ldw	fp,0(sp)
81107ee0:	dec00204 	addi	sp,sp,8
81107ee4:	f800283a 	ret

81107ee8 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
81107ee8:	defffd04 	addi	sp,sp,-12
81107eec:	de00012e 	bgeu	sp,et,81107ef4 <bSyncCtrOneShot+0xc>
81107ef0:	003b68fa 	trap	3
81107ef4:	dfc00215 	stw	ra,8(sp)
81107ef8:	df000115 	stw	fp,4(sp)
81107efc:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f00:	01000284 	movi	r4,10
81107f04:	11086f80 	call	811086f8 <uliSyncReadReg>
81107f08:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107f0c:	e0bfff17 	ldw	r2,-4(fp)
81107f10:	108000b4 	orhi	r2,r2,2
81107f14:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f18:	e17fff17 	ldw	r5,-4(fp)
81107f1c:	01000284 	movi	r4,10
81107f20:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107f24:	00800044 	movi	r2,1
}
81107f28:	e037883a 	mov	sp,fp
81107f2c:	dfc00117 	ldw	ra,4(sp)
81107f30:	df000017 	ldw	fp,0(sp)
81107f34:	dec00204 	addi	sp,sp,8
81107f38:	f800283a 	ret

81107f3c <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107f3c:	defffd04 	addi	sp,sp,-12
81107f40:	de00012e 	bgeu	sp,et,81107f48 <bSyncCtrErrInj+0xc>
81107f44:	003b68fa 	trap	3
81107f48:	dfc00215 	stw	ra,8(sp)
81107f4c:	df000115 	stw	fp,4(sp)
81107f50:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f54:	01000284 	movi	r4,10
81107f58:	11086f80 	call	811086f8 <uliSyncReadReg>
81107f5c:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107f60:	e0bfff17 	ldw	r2,-4(fp)
81107f64:	10800074 	orhi	r2,r2,1
81107f68:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f6c:	e17fff17 	ldw	r5,-4(fp)
81107f70:	01000284 	movi	r4,10
81107f74:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107f78:	00800044 	movi	r2,1
}
81107f7c:	e037883a 	mov	sp,fp
81107f80:	dfc00117 	ldw	ra,4(sp)
81107f84:	df000017 	ldw	fp,0(sp)
81107f88:	dec00204 	addi	sp,sp,8
81107f8c:	f800283a 	ret

81107f90 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107f90:	defffc04 	addi	sp,sp,-16
81107f94:	de00012e 	bgeu	sp,et,81107f9c <bSyncCtrSyncOutEnable+0xc>
81107f98:	003b68fa 	trap	3
81107f9c:	dfc00315 	stw	ra,12(sp)
81107fa0:	df000215 	stw	fp,8(sp)
81107fa4:	df000204 	addi	fp,sp,8
81107fa8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107fac:	01000284 	movi	r4,10
81107fb0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107fb4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107fb8:	e0bfff17 	ldw	r2,-4(fp)
81107fbc:	1000051e 	bne	r2,zero,81107fd4 <bSyncCtrSyncOutEnable+0x44>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
81107fc0:	e0fffe17 	ldw	r3,-8(fp)
81107fc4:	00bfbfc4 	movi	r2,-257
81107fc8:	1884703a 	and	r2,r3,r2
81107fcc:	e0bffe15 	stw	r2,-8(fp)
81107fd0:	00000306 	br	81107fe0 <bSyncCtrSyncOutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
81107fd4:	e0bffe17 	ldw	r2,-8(fp)
81107fd8:	10804014 	ori	r2,r2,256
81107fdc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107fe0:	e17ffe17 	ldw	r5,-8(fp)
81107fe4:	01000284 	movi	r4,10
81107fe8:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107fec:	00800044 	movi	r2,1
}
81107ff0:	e037883a 	mov	sp,fp
81107ff4:	dfc00117 	ldw	ra,4(sp)
81107ff8:	df000017 	ldw	fp,0(sp)
81107ffc:	dec00204 	addi	sp,sp,8
81108000:	f800283a 	ret

81108004 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
81108004:	defffc04 	addi	sp,sp,-16
81108008:	de00012e 	bgeu	sp,et,81108010 <bSyncCtrCh1OutEnable+0xc>
8110800c:	003b68fa 	trap	3
81108010:	dfc00315 	stw	ra,12(sp)
81108014:	df000215 	stw	fp,8(sp)
81108018:	df000204 	addi	fp,sp,8
8110801c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108020:	01000284 	movi	r4,10
81108024:	11086f80 	call	811086f8 <uliSyncReadReg>
81108028:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110802c:	e0bfff17 	ldw	r2,-4(fp)
81108030:	1000051e 	bne	r2,zero,81108048 <bSyncCtrCh1OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81108034:	e0fffe17 	ldw	r3,-8(fp)
81108038:	00bfff84 	movi	r2,-2
8110803c:	1884703a 	and	r2,r3,r2
81108040:	e0bffe15 	stw	r2,-8(fp)
81108044:	00000306 	br	81108054 <bSyncCtrCh1OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81108048:	e0bffe17 	ldw	r2,-8(fp)
8110804c:	10800054 	ori	r2,r2,1
81108050:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108054:	e17ffe17 	ldw	r5,-8(fp)
81108058:	01000284 	movi	r4,10
8110805c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108060:	00800044 	movi	r2,1
}
81108064:	e037883a 	mov	sp,fp
81108068:	dfc00117 	ldw	ra,4(sp)
8110806c:	df000017 	ldw	fp,0(sp)
81108070:	dec00204 	addi	sp,sp,8
81108074:	f800283a 	ret

81108078 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81108078:	defffc04 	addi	sp,sp,-16
8110807c:	de00012e 	bgeu	sp,et,81108084 <bSyncCtrCh2OutEnable+0xc>
81108080:	003b68fa 	trap	3
81108084:	dfc00315 	stw	ra,12(sp)
81108088:	df000215 	stw	fp,8(sp)
8110808c:	df000204 	addi	fp,sp,8
81108090:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108094:	01000284 	movi	r4,10
81108098:	11086f80 	call	811086f8 <uliSyncReadReg>
8110809c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811080a0:	e0bfff17 	ldw	r2,-4(fp)
811080a4:	1000051e 	bne	r2,zero,811080bc <bSyncCtrCh2OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
811080a8:	e0fffe17 	ldw	r3,-8(fp)
811080ac:	00bfff44 	movi	r2,-3
811080b0:	1884703a 	and	r2,r3,r2
811080b4:	e0bffe15 	stw	r2,-8(fp)
811080b8:	00000306 	br	811080c8 <bSyncCtrCh2OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
811080bc:	e0bffe17 	ldw	r2,-8(fp)
811080c0:	10800094 	ori	r2,r2,2
811080c4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811080c8:	e17ffe17 	ldw	r5,-8(fp)
811080cc:	01000284 	movi	r4,10
811080d0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811080d4:	00800044 	movi	r2,1
}
811080d8:	e037883a 	mov	sp,fp
811080dc:	dfc00117 	ldw	ra,4(sp)
811080e0:	df000017 	ldw	fp,0(sp)
811080e4:	dec00204 	addi	sp,sp,8
811080e8:	f800283a 	ret

811080ec <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
811080ec:	defffc04 	addi	sp,sp,-16
811080f0:	de00012e 	bgeu	sp,et,811080f8 <bSyncCtrCh3OutEnable+0xc>
811080f4:	003b68fa 	trap	3
811080f8:	dfc00315 	stw	ra,12(sp)
811080fc:	df000215 	stw	fp,8(sp)
81108100:	df000204 	addi	fp,sp,8
81108104:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108108:	01000284 	movi	r4,10
8110810c:	11086f80 	call	811086f8 <uliSyncReadReg>
81108110:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108114:	e0bfff17 	ldw	r2,-4(fp)
81108118:	1000051e 	bne	r2,zero,81108130 <bSyncCtrCh3OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
8110811c:	e0fffe17 	ldw	r3,-8(fp)
81108120:	00bffec4 	movi	r2,-5
81108124:	1884703a 	and	r2,r3,r2
81108128:	e0bffe15 	stw	r2,-8(fp)
8110812c:	00000306 	br	8110813c <bSyncCtrCh3OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
81108130:	e0bffe17 	ldw	r2,-8(fp)
81108134:	10800114 	ori	r2,r2,4
81108138:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110813c:	e17ffe17 	ldw	r5,-8(fp)
81108140:	01000284 	movi	r4,10
81108144:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108148:	00800044 	movi	r2,1
}
8110814c:	e037883a 	mov	sp,fp
81108150:	dfc00117 	ldw	ra,4(sp)
81108154:	df000017 	ldw	fp,0(sp)
81108158:	dec00204 	addi	sp,sp,8
8110815c:	f800283a 	ret

81108160 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
81108160:	defffc04 	addi	sp,sp,-16
81108164:	de00012e 	bgeu	sp,et,8110816c <bSyncCtrCh4OutEnable+0xc>
81108168:	003b68fa 	trap	3
8110816c:	dfc00315 	stw	ra,12(sp)
81108170:	df000215 	stw	fp,8(sp)
81108174:	df000204 	addi	fp,sp,8
81108178:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110817c:	01000284 	movi	r4,10
81108180:	11086f80 	call	811086f8 <uliSyncReadReg>
81108184:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108188:	e0bfff17 	ldw	r2,-4(fp)
8110818c:	1000051e 	bne	r2,zero,811081a4 <bSyncCtrCh4OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81108190:	e0fffe17 	ldw	r3,-8(fp)
81108194:	00bffdc4 	movi	r2,-9
81108198:	1884703a 	and	r2,r3,r2
8110819c:	e0bffe15 	stw	r2,-8(fp)
811081a0:	00000306 	br	811081b0 <bSyncCtrCh4OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
811081a4:	e0bffe17 	ldw	r2,-8(fp)
811081a8:	10800214 	ori	r2,r2,8
811081ac:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811081b0:	e17ffe17 	ldw	r5,-8(fp)
811081b4:	01000284 	movi	r4,10
811081b8:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811081bc:	00800044 	movi	r2,1
}
811081c0:	e037883a 	mov	sp,fp
811081c4:	dfc00117 	ldw	ra,4(sp)
811081c8:	df000017 	ldw	fp,0(sp)
811081cc:	dec00204 	addi	sp,sp,8
811081d0:	f800283a 	ret

811081d4 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
811081d4:	defffc04 	addi	sp,sp,-16
811081d8:	de00012e 	bgeu	sp,et,811081e0 <bSyncCtrCh5OutEnable+0xc>
811081dc:	003b68fa 	trap	3
811081e0:	dfc00315 	stw	ra,12(sp)
811081e4:	df000215 	stw	fp,8(sp)
811081e8:	df000204 	addi	fp,sp,8
811081ec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811081f0:	01000284 	movi	r4,10
811081f4:	11086f80 	call	811086f8 <uliSyncReadReg>
811081f8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811081fc:	e0bfff17 	ldw	r2,-4(fp)
81108200:	1000051e 	bne	r2,zero,81108218 <bSyncCtrCh5OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
81108204:	e0fffe17 	ldw	r3,-8(fp)
81108208:	00bffbc4 	movi	r2,-17
8110820c:	1884703a 	and	r2,r3,r2
81108210:	e0bffe15 	stw	r2,-8(fp)
81108214:	00000306 	br	81108224 <bSyncCtrCh5OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
81108218:	e0bffe17 	ldw	r2,-8(fp)
8110821c:	10800414 	ori	r2,r2,16
81108220:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108224:	e17ffe17 	ldw	r5,-8(fp)
81108228:	01000284 	movi	r4,10
8110822c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108230:	00800044 	movi	r2,1
}
81108234:	e037883a 	mov	sp,fp
81108238:	dfc00117 	ldw	ra,4(sp)
8110823c:	df000017 	ldw	fp,0(sp)
81108240:	dec00204 	addi	sp,sp,8
81108244:	f800283a 	ret

81108248 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
81108248:	defffc04 	addi	sp,sp,-16
8110824c:	de00012e 	bgeu	sp,et,81108254 <bSyncCtrCh6OutEnable+0xc>
81108250:	003b68fa 	trap	3
81108254:	dfc00315 	stw	ra,12(sp)
81108258:	df000215 	stw	fp,8(sp)
8110825c:	df000204 	addi	fp,sp,8
81108260:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108264:	01000284 	movi	r4,10
81108268:	11086f80 	call	811086f8 <uliSyncReadReg>
8110826c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108270:	e0bfff17 	ldw	r2,-4(fp)
81108274:	1000051e 	bne	r2,zero,8110828c <bSyncCtrCh6OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81108278:	e0fffe17 	ldw	r3,-8(fp)
8110827c:	00bff7c4 	movi	r2,-33
81108280:	1884703a 	and	r2,r3,r2
81108284:	e0bffe15 	stw	r2,-8(fp)
81108288:	00000306 	br	81108298 <bSyncCtrCh6OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110828c:	e0bffe17 	ldw	r2,-8(fp)
81108290:	10800814 	ori	r2,r2,32
81108294:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108298:	e17ffe17 	ldw	r5,-8(fp)
8110829c:	01000284 	movi	r4,10
811082a0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811082a4:	00800044 	movi	r2,1
}
811082a8:	e037883a 	mov	sp,fp
811082ac:	dfc00117 	ldw	ra,4(sp)
811082b0:	df000017 	ldw	fp,0(sp)
811082b4:	dec00204 	addi	sp,sp,8
811082b8:	f800283a 	ret

811082bc <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
811082bc:	defffc04 	addi	sp,sp,-16
811082c0:	de00012e 	bgeu	sp,et,811082c8 <bSyncCtrCh7OutEnable+0xc>
811082c4:	003b68fa 	trap	3
811082c8:	dfc00315 	stw	ra,12(sp)
811082cc:	df000215 	stw	fp,8(sp)
811082d0:	df000204 	addi	fp,sp,8
811082d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811082d8:	01000284 	movi	r4,10
811082dc:	11086f80 	call	811086f8 <uliSyncReadReg>
811082e0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811082e4:	e0bfff17 	ldw	r2,-4(fp)
811082e8:	1000051e 	bne	r2,zero,81108300 <bSyncCtrCh7OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
811082ec:	e0fffe17 	ldw	r3,-8(fp)
811082f0:	00bfefc4 	movi	r2,-65
811082f4:	1884703a 	and	r2,r3,r2
811082f8:	e0bffe15 	stw	r2,-8(fp)
811082fc:	00000306 	br	8110830c <bSyncCtrCh7OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
81108300:	e0bffe17 	ldw	r2,-8(fp)
81108304:	10801014 	ori	r2,r2,64
81108308:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110830c:	e17ffe17 	ldw	r5,-8(fp)
81108310:	01000284 	movi	r4,10
81108314:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108318:	00800044 	movi	r2,1
}
8110831c:	e037883a 	mov	sp,fp
81108320:	dfc00117 	ldw	ra,4(sp)
81108324:	df000017 	ldw	fp,0(sp)
81108328:	dec00204 	addi	sp,sp,8
8110832c:	f800283a 	ret

81108330 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
81108330:	defffc04 	addi	sp,sp,-16
81108334:	de00012e 	bgeu	sp,et,8110833c <bSyncCtrCh8OutEnable+0xc>
81108338:	003b68fa 	trap	3
8110833c:	dfc00315 	stw	ra,12(sp)
81108340:	df000215 	stw	fp,8(sp)
81108344:	df000204 	addi	fp,sp,8
81108348:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110834c:	01000284 	movi	r4,10
81108350:	11086f80 	call	811086f8 <uliSyncReadReg>
81108354:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108358:	e0bfff17 	ldw	r2,-4(fp)
8110835c:	1000051e 	bne	r2,zero,81108374 <bSyncCtrCh8OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
81108360:	e0fffe17 	ldw	r3,-8(fp)
81108364:	00bfdfc4 	movi	r2,-129
81108368:	1884703a 	and	r2,r3,r2
8110836c:	e0bffe15 	stw	r2,-8(fp)
81108370:	00000306 	br	81108380 <bSyncCtrCh8OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
81108374:	e0bffe17 	ldw	r2,-8(fp)
81108378:	10802014 	ori	r2,r2,128
8110837c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108380:	e17ffe17 	ldw	r5,-8(fp)
81108384:	01000284 	movi	r4,10
81108388:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
8110838c:	00800044 	movi	r2,1
}
81108390:	e037883a 	mov	sp,fp
81108394:	dfc00117 	ldw	ra,4(sp)
81108398:	df000017 	ldw	fp,0(sp)
8110839c:	dec00204 	addi	sp,sp,8
811083a0:	f800283a 	ret

811083a4 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
811083a4:	defffc04 	addi	sp,sp,-16
811083a8:	de00012e 	bgeu	sp,et,811083b0 <bSyncIrqEnableError+0xc>
811083ac:	003b68fa 	trap	3
811083b0:	dfc00315 	stw	ra,12(sp)
811083b4:	df000215 	stw	fp,8(sp)
811083b8:	df000204 	addi	fp,sp,8
811083bc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811083c0:	01000044 	movi	r4,1
811083c4:	11086f80 	call	811086f8 <uliSyncReadReg>
811083c8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811083cc:	e0bfff17 	ldw	r2,-4(fp)
811083d0:	1000051e 	bne	r2,zero,811083e8 <bSyncIrqEnableError+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
811083d4:	e0fffe17 	ldw	r3,-8(fp)
811083d8:	00bfff44 	movi	r2,-3
811083dc:	1884703a 	and	r2,r3,r2
811083e0:	e0bffe15 	stw	r2,-8(fp)
811083e4:	00000306 	br	811083f4 <bSyncIrqEnableError+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
811083e8:	e0bffe17 	ldw	r2,-8(fp)
811083ec:	10800094 	ori	r2,r2,2
811083f0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
811083f4:	e17ffe17 	ldw	r5,-8(fp)
811083f8:	01000044 	movi	r4,1
811083fc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108400:	00800044 	movi	r2,1
}
81108404:	e037883a 	mov	sp,fp
81108408:	dfc00117 	ldw	ra,4(sp)
8110840c:	df000017 	ldw	fp,0(sp)
81108410:	dec00204 	addi	sp,sp,8
81108414:	f800283a 	ret

81108418 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
81108418:	defffc04 	addi	sp,sp,-16
8110841c:	de00012e 	bgeu	sp,et,81108424 <bSyncIrqEnableBlank+0xc>
81108420:	003b68fa 	trap	3
81108424:	dfc00315 	stw	ra,12(sp)
81108428:	df000215 	stw	fp,8(sp)
8110842c:	df000204 	addi	fp,sp,8
81108430:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81108434:	01000044 	movi	r4,1
81108438:	11086f80 	call	811086f8 <uliSyncReadReg>
8110843c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108440:	e0bfff17 	ldw	r2,-4(fp)
81108444:	1000051e 	bne	r2,zero,8110845c <bSyncIrqEnableBlank+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
81108448:	e0fffe17 	ldw	r3,-8(fp)
8110844c:	00bfff84 	movi	r2,-2
81108450:	1884703a 	and	r2,r3,r2
81108454:	e0bffe15 	stw	r2,-8(fp)
81108458:	00000306 	br	81108468 <bSyncIrqEnableBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
8110845c:	e0bffe17 	ldw	r2,-8(fp)
81108460:	10800054 	ori	r2,r2,1
81108464:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81108468:	e17ffe17 	ldw	r5,-8(fp)
8110846c:	01000044 	movi	r4,1
81108470:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108474:	00800044 	movi	r2,1
}
81108478:	e037883a 	mov	sp,fp
8110847c:	dfc00117 	ldw	ra,4(sp)
81108480:	df000017 	ldw	fp,0(sp)
81108484:	dec00204 	addi	sp,sp,8
81108488:	f800283a 	ret

8110848c <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110848c:	defffc04 	addi	sp,sp,-16
81108490:	de00012e 	bgeu	sp,et,81108498 <bSyncIrqFlagClrError+0xc>
81108494:	003b68fa 	trap	3
81108498:	dfc00315 	stw	ra,12(sp)
8110849c:	df000215 	stw	fp,8(sp)
811084a0:	df000204 	addi	fp,sp,8
811084a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811084a8:	01000084 	movi	r4,2
811084ac:	11086f80 	call	811086f8 <uliSyncReadReg>
811084b0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811084b4:	e0bfff17 	ldw	r2,-4(fp)
811084b8:	1000051e 	bne	r2,zero,811084d0 <bSyncIrqFlagClrError+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
811084bc:	e0fffe17 	ldw	r3,-8(fp)
811084c0:	00bfff44 	movi	r2,-3
811084c4:	1884703a 	and	r2,r3,r2
811084c8:	e0bffe15 	stw	r2,-8(fp)
811084cc:	00000306 	br	811084dc <bSyncIrqFlagClrError+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
811084d0:	e0bffe17 	ldw	r2,-8(fp)
811084d4:	10800094 	ori	r2,r2,2
811084d8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811084dc:	e17ffe17 	ldw	r5,-8(fp)
811084e0:	01000084 	movi	r4,2
811084e4:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811084e8:	00800044 	movi	r2,1
}
811084ec:	e037883a 	mov	sp,fp
811084f0:	dfc00117 	ldw	ra,4(sp)
811084f4:	df000017 	ldw	fp,0(sp)
811084f8:	dec00204 	addi	sp,sp,8
811084fc:	f800283a 	ret

81108500 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81108500:	defffc04 	addi	sp,sp,-16
81108504:	de00012e 	bgeu	sp,et,8110850c <bSyncIrqFlagClrBlank+0xc>
81108508:	003b68fa 	trap	3
8110850c:	dfc00315 	stw	ra,12(sp)
81108510:	df000215 	stw	fp,8(sp)
81108514:	df000204 	addi	fp,sp,8
81108518:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
8110851c:	01000084 	movi	r4,2
81108520:	11086f80 	call	811086f8 <uliSyncReadReg>
81108524:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108528:	e0bfff17 	ldw	r2,-4(fp)
8110852c:	1000051e 	bne	r2,zero,81108544 <bSyncIrqFlagClrBlank+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
81108530:	e0fffe17 	ldw	r3,-8(fp)
81108534:	00bfff84 	movi	r2,-2
81108538:	1884703a 	and	r2,r3,r2
8110853c:	e0bffe15 	stw	r2,-8(fp)
81108540:	00000306 	br	81108550 <bSyncIrqFlagClrBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
81108544:	e0bffe17 	ldw	r2,-8(fp)
81108548:	10800054 	ori	r2,r2,1
8110854c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
81108550:	e17ffe17 	ldw	r5,-8(fp)
81108554:	01000084 	movi	r4,2
81108558:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
8110855c:	00800044 	movi	r2,1
}
81108560:	e037883a 	mov	sp,fp
81108564:	dfc00117 	ldw	ra,4(sp)
81108568:	df000017 	ldw	fp,0(sp)
8110856c:	dec00204 	addi	sp,sp,8
81108570:	f800283a 	ret

81108574 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
81108574:	defffc04 	addi	sp,sp,-16
81108578:	de00012e 	bgeu	sp,et,81108580 <bSyncIrqFlagError+0xc>
8110857c:	003b68fa 	trap	3
81108580:	dfc00315 	stw	ra,12(sp)
81108584:	df000215 	stw	fp,8(sp)
81108588:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110858c:	010000c4 	movi	r4,3
81108590:	11086f80 	call	811086f8 <uliSyncReadReg>
81108594:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81108598:	e0bfff17 	ldw	r2,-4(fp)
8110859c:	1080008c 	andi	r2,r2,2
811085a0:	10000326 	beq	r2,zero,811085b0 <bSyncIrqFlagError+0x3c>
		bResult = TRUE;
811085a4:	00800044 	movi	r2,1
811085a8:	e0bffe15 	stw	r2,-8(fp)
811085ac:	00000106 	br	811085b4 <bSyncIrqFlagError+0x40>
	} else {
		bResult = FALSE;
811085b0:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
811085b4:	e0bffe17 	ldw	r2,-8(fp)
}
811085b8:	e037883a 	mov	sp,fp
811085bc:	dfc00117 	ldw	ra,4(sp)
811085c0:	df000017 	ldw	fp,0(sp)
811085c4:	dec00204 	addi	sp,sp,8
811085c8:	f800283a 	ret

811085cc <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
811085cc:	defffc04 	addi	sp,sp,-16
811085d0:	de00012e 	bgeu	sp,et,811085d8 <bSyncIrqFlagBlank+0xc>
811085d4:	003b68fa 	trap	3
811085d8:	dfc00315 	stw	ra,12(sp)
811085dc:	df000215 	stw	fp,8(sp)
811085e0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
811085e4:	010000c4 	movi	r4,3
811085e8:	11086f80 	call	811086f8 <uliSyncReadReg>
811085ec:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
811085f0:	e0bfff17 	ldw	r2,-4(fp)
811085f4:	1080004c 	andi	r2,r2,1
811085f8:	10000326 	beq	r2,zero,81108608 <bSyncIrqFlagBlank+0x3c>
		bResult = TRUE;
811085fc:	00800044 	movi	r2,1
81108600:	e0bffe15 	stw	r2,-8(fp)
81108604:	00000106 	br	8110860c <bSyncIrqFlagBlank+0x40>
	} else {
		bResult = FALSE;
81108608:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110860c:	e0bffe17 	ldw	r2,-8(fp)
}
81108610:	e037883a 	mov	sp,fp
81108614:	dfc00117 	ldw	ra,4(sp)
81108618:	df000017 	ldw	fp,0(sp)
8110861c:	dec00204 	addi	sp,sp,8
81108620:	f800283a 	ret

81108624 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
81108624:	defffd04 	addi	sp,sp,-12
81108628:	de00012e 	bgeu	sp,et,81108630 <uliSyncGetCtr+0xc>
8110862c:	003b68fa 	trap	3
81108630:	dfc00215 	stw	ra,8(sp)
81108634:	df000115 	stw	fp,4(sp)
81108638:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110863c:	01000284 	movi	r4,10
81108640:	11086f80 	call	811086f8 <uliSyncReadReg>
81108644:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81108648:	e0bfff17 	ldw	r2,-4(fp)
}
8110864c:	e037883a 	mov	sp,fp
81108650:	dfc00117 	ldw	ra,4(sp)
81108654:	df000017 	ldw	fp,0(sp)
81108658:	dec00204 	addi	sp,sp,8
8110865c:	f800283a 	ret

81108660 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
81108660:	defffd04 	addi	sp,sp,-12
81108664:	de00012e 	bgeu	sp,et,8110866c <uliSyncReadStatus+0xc>
81108668:	003b68fa 	trap	3
8110866c:	dfc00215 	stw	ra,8(sp)
81108670:	df000115 	stw	fp,4(sp)
81108674:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81108678:	0009883a 	mov	r4,zero
8110867c:	11086f80 	call	811086f8 <uliSyncReadReg>
81108680:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81108684:	e0bfff17 	ldw	r2,-4(fp)
}
81108688:	e037883a 	mov	sp,fp
8110868c:	dfc00117 	ldw	ra,4(sp)
81108690:	df000017 	ldw	fp,0(sp)
81108694:	dec00204 	addi	sp,sp,8
81108698:	f800283a 	ret

8110869c <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110869c:	defffc04 	addi	sp,sp,-16
811086a0:	de00012e 	bgeu	sp,et,811086a8 <bSyncWriteReg+0xc>
811086a4:	003b68fa 	trap	3
811086a8:	df000315 	stw	fp,12(sp)
811086ac:	df000304 	addi	fp,sp,12
811086b0:	e13ffe15 	stw	r4,-8(fp)
811086b4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
811086b8:	00a00034 	movhi	r2,32768
811086bc:	10810004 	addi	r2,r2,1024
811086c0:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
811086c4:	e0bffe17 	ldw	r2,-8(fp)
811086c8:	1085883a 	add	r2,r2,r2
811086cc:	1085883a 	add	r2,r2,r2
811086d0:	1007883a 	mov	r3,r2
811086d4:	e0bffd17 	ldw	r2,-12(fp)
811086d8:	10c5883a 	add	r2,r2,r3
811086dc:	e0ffff17 	ldw	r3,-4(fp)
811086e0:	10c00015 	stw	r3,0(r2)
	return TRUE;
811086e4:	00800044 	movi	r2,1
}
811086e8:	e037883a 	mov	sp,fp
811086ec:	df000017 	ldw	fp,0(sp)
811086f0:	dec00104 	addi	sp,sp,4
811086f4:	f800283a 	ret

811086f8 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
811086f8:	defffc04 	addi	sp,sp,-16
811086fc:	de00012e 	bgeu	sp,et,81108704 <uliSyncReadReg+0xc>
81108700:	003b68fa 	trap	3
81108704:	df000315 	stw	fp,12(sp)
81108708:	df000304 	addi	fp,sp,12
8110870c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81108710:	00a00034 	movhi	r2,32768
81108714:	10810004 	addi	r2,r2,1024
81108718:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
8110871c:	e0bfff17 	ldw	r2,-4(fp)
81108720:	1085883a 	add	r2,r2,r2
81108724:	1085883a 	add	r2,r2,r2
81108728:	1007883a 	mov	r3,r2
8110872c:	e0bffd17 	ldw	r2,-12(fp)
81108730:	10c5883a 	add	r2,r2,r3
81108734:	10800017 	ldw	r2,0(r2)
81108738:	e0bffe15 	stw	r2,-8(fp)
	return value;
8110873c:	e0bffe17 	ldw	r2,-8(fp)
}
81108740:	e037883a 	mov	sp,fp
81108744:	df000017 	ldw	fp,0(sp)
81108748:	dec00104 	addi	sp,sp,4
8110874c:	f800283a 	ret

81108750 <vDataControlTask>:


#include "data_control_task.h"


void vDataControlTask(void *task_data) {
81108750:	defffb04 	addi	sp,sp,-20
81108754:	de00012e 	bgeu	sp,et,8110875c <vDataControlTask+0xc>
81108758:	003b68fa 	trap	3
8110875c:	dfc00415 	stw	ra,16(sp)
81108760:	df000315 	stw	fp,12(sp)
81108764:	df000304 	addi	fp,sp,12
81108768:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = FALSE;
8110876c:	e03ffd15 	stw	zero,-12(fp)
	TNData_Control *pxDataC;
	INT8U error_code;


	pxDataC = (TNData_Control *) task_data;
81108770:	e0bfff17 	ldw	r2,-4(fp)
81108774:	e0bffe15 	stw	r2,-8(fp)

	#ifdef DEBUG_ON
        debug(fp,"Data Controller Task. (Task on)\n");
81108778:	d0a05017 	ldw	r2,-32448(gp)
8110877c:	100f883a 	mov	r7,r2
81108780:	01800804 	movi	r6,32
81108784:	01400044 	movi	r5,1
81108788:	01204534 	movhi	r4,33044
8110878c:	213e1404 	addi	r4,r4,-1968
81108790:	111405c0 	call	8111405c <fwrite>
    #endif

	for (;;) {
		break; /*todo:Tirar depois do debug*/
81108794:	0001883a 	nop
	}

}
81108798:	0001883a 	nop
8110879c:	e037883a 	mov	sp,fp
811087a0:	dfc00117 	ldw	ra,4(sp)
811087a4:	df000017 	ldw	fp,0(sp)
811087a8:	dec00204 	addi	sp,sp,8
811087ac:	f800283a 	ret

811087b0 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
811087b0:	defffb04 	addi	sp,sp,-20
811087b4:	de00012e 	bgeu	sp,et,811087bc <vFeeTask+0xc>
811087b8:	003b68fa 	trap	3
811087bc:	dfc00415 	stw	ra,16(sp)
811087c0:	df000315 	stw	fp,12(sp)
811087c4:	df000304 	addi	fp,sp,12
811087c8:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = FALSE;
811087cc:	e03ffd15 	stw	zero,-12(fp)
	TNFee *pxNFee;
	INT8U error_code;

	pxNFee = ( TNFee * ) task_data;
811087d0:	e0bfff17 	ldw	r2,-4(fp)
811087d4:	e0bffe15 	stw	r2,-8(fp)

	#ifdef DEBUG_ON
		fprintf(fp,"NFEE %hhu Task. (Task on)\n", pxNFee->ucId);
811087d8:	d0e05017 	ldw	r3,-32448(gp)
811087dc:	e0bffe17 	ldw	r2,-8(fp)
811087e0:	10800003 	ldbu	r2,0(r2)
811087e4:	10803fcc 	andi	r2,r2,255
811087e8:	100d883a 	mov	r6,r2
811087ec:	01604534 	movhi	r5,33044
811087f0:	297e1d04 	addi	r5,r5,-1932
811087f4:	1809883a 	mov	r4,r3
811087f8:	11139c00 	call	811139c0 <fprintf>
	#endif

	#ifdef DEBUG_ON
		vPrintConsoleNFee( pxNFee );
811087fc:	e13ffe17 	ldw	r4,-8(fp)
81108800:	11088200 	call	81108820 <vPrintConsoleNFee>
	#endif


	for(;;){
		break; /*todo:Tirar depois do debug*/
81108804:	0001883a 	nop

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
81108808:	0001883a 	nop
8110880c:	e037883a 	mov	sp,fp
81108810:	dfc00117 	ldw	ra,4(sp)
81108814:	df000017 	ldw	fp,0(sp)
81108818:	dec00204 	addi	sp,sp,8
8110881c:	f800283a 	ret

81108820 <vPrintConsoleNFee>:

#ifdef DEBUG_ON
	void vPrintConsoleNFee( TNFee *pxNFee ) {
81108820:	defffb04 	addi	sp,sp,-20
81108824:	de00012e 	bgeu	sp,et,8110882c <vPrintConsoleNFee+0xc>
81108828:	003b68fa 	trap	3
8110882c:	dfc00415 	stw	ra,16(sp)
81108830:	df000315 	stw	fp,12(sp)
81108834:	df000304 	addi	fp,sp,12
81108838:	e13fff15 	stw	r4,-4(fp)
		fprintf(fp,"=================================NFEE %hhu=====================================\n", pxNFee->ucId);
8110883c:	d0e05017 	ldw	r3,-32448(gp)
81108840:	e0bfff17 	ldw	r2,-4(fp)
81108844:	10800003 	ldbu	r2,0(r2)
81108848:	10803fcc 	andi	r2,r2,255
8110884c:	100d883a 	mov	r6,r2
81108850:	01604534 	movhi	r5,33044
81108854:	297e2404 	addi	r5,r5,-1904
81108858:	1809883a 	mov	r4,r3
8110885c:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"\n");
81108860:	d0a05017 	ldw	r2,-32448(gp)
81108864:	100b883a 	mov	r5,r2
81108868:	01000284 	movi	r4,10
8110886c:	1113a380 	call	81113a38 <fputc>
		fprintf(fp,"NFEE %hhu CCD infos: \n", pxNFee->ucId);
81108870:	d0e05017 	ldw	r3,-32448(gp)
81108874:	e0bfff17 	ldw	r2,-4(fp)
81108878:	10800003 	ldbu	r2,0(r2)
8110887c:	10803fcc 	andi	r2,r2,255
81108880:	100d883a 	mov	r6,r2
81108884:	01604534 	movhi	r5,33044
81108888:	297e3904 	addi	r5,r5,-1820
8110888c:	1809883a 	mov	r4,r3
81108890:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    PreScan = %hu \n", pxNFee->xCcdInfo.usiSPrescanN);
81108894:	d0e05017 	ldw	r3,-32448(gp)
81108898:	e0bfff17 	ldw	r2,-4(fp)
8110889c:	1080280b 	ldhu	r2,160(r2)
811088a0:	10bfffcc 	andi	r2,r2,65535
811088a4:	100d883a 	mov	r6,r2
811088a8:	01604534 	movhi	r5,33044
811088ac:	297e3f04 	addi	r5,r5,-1796
811088b0:	1809883a 	mov	r4,r3
811088b4:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    OverScan = %hu \n", pxNFee->xCcdInfo.usiSOverscanN);
811088b8:	d0e05017 	ldw	r3,-32448(gp)
811088bc:	e0bfff17 	ldw	r2,-4(fp)
811088c0:	1080288b 	ldhu	r2,162(r2)
811088c4:	10bfffcc 	andi	r2,r2,65535
811088c8:	100d883a 	mov	r6,r2
811088cc:	01604534 	movhi	r5,33044
811088d0:	297e4404 	addi	r5,r5,-1776
811088d4:	1809883a 	mov	r4,r3
811088d8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    OLN = %hu \n", pxNFee->xCcdInfo.usiOLN);
811088dc:	d0e05017 	ldw	r3,-32448(gp)
811088e0:	e0bfff17 	ldw	r2,-4(fp)
811088e4:	1080290b 	ldhu	r2,164(r2)
811088e8:	10bfffcc 	andi	r2,r2,65535
811088ec:	100d883a 	mov	r6,r2
811088f0:	01604534 	movhi	r5,33044
811088f4:	297e4a04 	addi	r5,r5,-1752
811088f8:	1809883a 	mov	r4,r3
811088fc:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    Half Width = %hu \n", pxNFee->xCcdInfo.usiHalfWidth);
81108900:	d0e05017 	ldw	r3,-32448(gp)
81108904:	e0bfff17 	ldw	r2,-4(fp)
81108908:	1080298b 	ldhu	r2,166(r2)
8110890c:	10bfffcc 	andi	r2,r2,65535
81108910:	100d883a 	mov	r6,r2
81108914:	01604534 	movhi	r5,33044
81108918:	297e4e04 	addi	r5,r5,-1736
8110891c:	1809883a 	mov	r4,r3
81108920:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    Height = %hu \n", pxNFee->xCcdInfo.usiHeight);
81108924:	d0e05017 	ldw	r3,-32448(gp)
81108928:	e0bfff17 	ldw	r2,-4(fp)
8110892c:	10802a0b 	ldhu	r2,168(r2)
81108930:	10bfffcc 	andi	r2,r2,65535
81108934:	100d883a 	mov	r6,r2
81108938:	01604534 	movhi	r5,33044
8110893c:	297e5404 	addi	r5,r5,-1712
81108940:	1809883a 	mov	r4,r3
81108944:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"\n");
81108948:	d0a05017 	ldw	r2,-32448(gp)
8110894c:	100b883a 	mov	r5,r2
81108950:	01000284 	movi	r4,10
81108954:	1113a380 	call	81113a38 <fputc>
		fprintf(fp,"NFEE %hhu Control: \n", pxNFee->ucId);
81108958:	d0e05017 	ldw	r3,-32448(gp)
8110895c:	e0bfff17 	ldw	r2,-4(fp)
81108960:	10800003 	ldbu	r2,0(r2)
81108964:	10803fcc 	andi	r2,r2,255
81108968:	100d883a 	mov	r6,r2
8110896c:	01604534 	movhi	r5,33044
81108970:	297e5904 	addi	r5,r5,-1692
81108974:	1809883a 	mov	r4,r3
81108978:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    NFEE State 	= %hu \n", pxNFee->xControl.eMode);
8110897c:	d0e05017 	ldw	r3,-32448(gp)
81108980:	e0bfff17 	ldw	r2,-4(fp)
81108984:	10802617 	ldw	r2,152(r2)
81108988:	100d883a 	mov	r6,r2
8110898c:	01604534 	movhi	r5,33044
81108990:	297e5f04 	addi	r5,r5,-1668
81108994:	1809883a 	mov	r4,r3
81108998:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    NFEE Enable? = %hu \n", pxNFee->xControl.bEnabled);
8110899c:	d0e05017 	ldw	r3,-32448(gp)
811089a0:	e0bfff17 	ldw	r2,-4(fp)
811089a4:	10802017 	ldw	r2,128(r2)
811089a8:	100d883a 	mov	r6,r2
811089ac:	01604534 	movhi	r5,33044
811089b0:	297e6504 	addi	r5,r5,-1644
811089b4:	1809883a 	mov	r4,r3
811089b8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    Using DMA?   = %hu \n", pxNFee->xControl.bUsingDMA);
811089bc:	d0e05017 	ldw	r3,-32448(gp)
811089c0:	e0bfff17 	ldw	r2,-4(fp)
811089c4:	10802117 	ldw	r2,132(r2)
811089c8:	100d883a 	mov	r6,r2
811089cc:	01604534 	movhi	r5,33044
811089d0:	297e6c04 	addi	r5,r5,-1616
811089d4:	1809883a 	mov	r4,r3
811089d8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    Logging?     = %hu \n", pxNFee->xControl.bLogging);
811089dc:	d0e05017 	ldw	r3,-32448(gp)
811089e0:	e0bfff17 	ldw	r2,-4(fp)
811089e4:	10802217 	ldw	r2,136(r2)
811089e8:	100d883a 	mov	r6,r2
811089ec:	01604534 	movhi	r5,33044
811089f0:	297e7304 	addi	r5,r5,-1588
811089f4:	1809883a 	mov	r4,r3
811089f8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    Echoing?     = %hu \n", pxNFee->xControl.bEchoing);
811089fc:	d0e05017 	ldw	r3,-32448(gp)
81108a00:	e0bfff17 	ldw	r2,-4(fp)
81108a04:	10802317 	ldw	r2,140(r2)
81108a08:	100d883a 	mov	r6,r2
81108a0c:	01604534 	movhi	r5,33044
81108a10:	297e7a04 	addi	r5,r5,-1560
81108a14:	1809883a 	mov	r4,r3
81108a18:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    Channel Enable? = %hu \n", pxNFee->xControl.bChannelEnable);
81108a1c:	d0e05017 	ldw	r3,-32448(gp)
81108a20:	e0bfff17 	ldw	r2,-4(fp)
81108a24:	10802417 	ldw	r2,144(r2)
81108a28:	100d883a 	mov	r6,r2
81108a2c:	01604534 	movhi	r5,33044
81108a30:	297e8104 	addi	r5,r5,-1532
81108a34:	1809883a 	mov	r4,r3
81108a38:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    Readout order = [ %hhu , %hhu , %hhu , %hhu ] \n", pxNFee->xControl.ucROutOrder[0], pxNFee->xControl.ucROutOrder[1], pxNFee->xControl.ucROutOrder[2], pxNFee->xControl.ucROutOrder[3]);
81108a3c:	d1205017 	ldw	r4,-32448(gp)
81108a40:	e0bfff17 	ldw	r2,-4(fp)
81108a44:	10802503 	ldbu	r2,148(r2)
81108a48:	11403fcc 	andi	r5,r2,255
81108a4c:	e0bfff17 	ldw	r2,-4(fp)
81108a50:	10802543 	ldbu	r2,149(r2)
81108a54:	11803fcc 	andi	r6,r2,255
81108a58:	e0bfff17 	ldw	r2,-4(fp)
81108a5c:	10802583 	ldbu	r2,150(r2)
81108a60:	10803fcc 	andi	r2,r2,255
81108a64:	e0ffff17 	ldw	r3,-4(fp)
81108a68:	18c025c3 	ldbu	r3,151(r3)
81108a6c:	18c03fcc 	andi	r3,r3,255
81108a70:	d8c00115 	stw	r3,4(sp)
81108a74:	d8800015 	stw	r2,0(sp)
81108a78:	300f883a 	mov	r7,r6
81108a7c:	280d883a 	mov	r6,r5
81108a80:	01604534 	movhi	r5,33044
81108a84:	297e8804 	addi	r5,r5,-1504
81108a88:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    CCD Side = = %hu \n", pxNFee->xControl.eSide);
81108a8c:	d0e05017 	ldw	r3,-32448(gp)
81108a90:	e0bfff17 	ldw	r2,-4(fp)
81108a94:	10802717 	ldw	r2,156(r2)
81108a98:	100d883a 	mov	r6,r2
81108a9c:	01604534 	movhi	r5,33044
81108aa0:	297e9504 	addi	r5,r5,-1452
81108aa4:	1809883a 	mov	r4,r3
81108aa8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"\n\n");
81108aac:	d0a05017 	ldw	r2,-32448(gp)
81108ab0:	100f883a 	mov	r7,r2
81108ab4:	01800084 	movi	r6,2
81108ab8:	01400044 	movi	r5,1
81108abc:	01204534 	movhi	r4,33044
81108ac0:	213e9b04 	addi	r4,r4,-1428
81108ac4:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"NFEE %hhu MEMORY MAP: \n", pxNFee->ucId);
81108ac8:	d0e05017 	ldw	r3,-32448(gp)
81108acc:	e0bfff17 	ldw	r2,-4(fp)
81108ad0:	10800003 	ldbu	r2,0(r2)
81108ad4:	10803fcc 	andi	r2,r2,255
81108ad8:	100d883a 	mov	r6,r2
81108adc:	01604534 	movhi	r5,33044
81108ae0:	297e9c04 	addi	r5,r5,-1424
81108ae4:	1809883a 	mov	r4,r3
81108ae8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    General Info: \n");
81108aec:	d0a05017 	ldw	r2,-32448(gp)
81108af0:	100f883a 	mov	r7,r2
81108af4:	018004c4 	movi	r6,19
81108af8:	01400044 	movi	r5,1
81108afc:	01204534 	movhi	r4,33044
81108b00:	213ea204 	addi	r4,r4,-1400
81108b04:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"        Offset root 	= %lu \n", pxNFee->xMemMap.ulOffsetRoot);
81108b08:	d0e05017 	ldw	r3,-32448(gp)
81108b0c:	e0bfff17 	ldw	r2,-4(fp)
81108b10:	10800117 	ldw	r2,4(r2)
81108b14:	100d883a 	mov	r6,r2
81108b18:	01604534 	movhi	r5,33044
81108b1c:	297ea704 	addi	r5,r5,-1380
81108b20:	1809883a 	mov	r4,r3
81108b24:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Total Bytes 	= %lu \n", pxNFee->xMemMap.ulTotalBytes);
81108b28:	d0e05017 	ldw	r3,-32448(gp)
81108b2c:	e0bfff17 	ldw	r2,-4(fp)
81108b30:	10800217 	ldw	r2,8(r2)
81108b34:	100d883a 	mov	r6,r2
81108b38:	01604534 	movhi	r5,33044
81108b3c:	297eaf04 	addi	r5,r5,-1348
81108b40:	1809883a 	mov	r4,r3
81108b44:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        LUT ADDR 	= %lu \n", pxNFee->xMemMap.ulLUTAddr);
81108b48:	d0e05017 	ldw	r3,-32448(gp)
81108b4c:	e0bfff17 	ldw	r2,-4(fp)
81108b50:	10800317 	ldw	r2,12(r2)
81108b54:	100d883a 	mov	r6,r2
81108b58:	01604534 	movhi	r5,33044
81108b5c:	297eb704 	addi	r5,r5,-1316
81108b60:	1809883a 	mov	r4,r3
81108b64:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"    Common to all CCDs: \n");
81108b68:	d0a05017 	ldw	r2,-32448(gp)
81108b6c:	100f883a 	mov	r7,r2
81108b70:	01800644 	movi	r6,25
81108b74:	01400044 	movi	r5,1
81108b78:	01204534 	movhi	r4,33044
81108b7c:	213ebe04 	addi	r4,r4,-1288
81108b80:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"        Total Bytes 	= %hu \n", pxNFee->xMemMap.xCommon.usiTotalBytes);
81108b84:	d0e05017 	ldw	r3,-32448(gp)
81108b88:	e0bfff17 	ldw	r2,-4(fp)
81108b8c:	1080048b 	ldhu	r2,18(r2)
81108b90:	10bfffcc 	andi	r2,r2,65535
81108b94:	100d883a 	mov	r6,r2
81108b98:	01604534 	movhi	r5,33044
81108b9c:	297ec504 	addi	r5,r5,-1260
81108ba0:	1809883a 	mov	r4,r3
81108ba4:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Total of Blocks = %hu \n", pxNFee->xMemMap.xCommon.usiNTotalBlocks);
81108ba8:	d0e05017 	ldw	r3,-32448(gp)
81108bac:	e0bfff17 	ldw	r2,-4(fp)
81108bb0:	1080040b 	ldhu	r2,16(r2)
81108bb4:	10bfffcc 	andi	r2,r2,65535
81108bb8:	100d883a 	mov	r6,r2
81108bbc:	01604534 	movhi	r5,33044
81108bc0:	297ecd04 	addi	r5,r5,-1228
81108bc4:	1809883a 	mov	r4,r3
81108bc8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Padding Bytes 	= %hhu\n", pxNFee->xMemMap.xCommon.ucPaddingBytes);
81108bcc:	d0e05017 	ldw	r3,-32448(gp)
81108bd0:	e0bfff17 	ldw	r2,-4(fp)
81108bd4:	10800503 	ldbu	r2,20(r2)
81108bd8:	10803fcc 	andi	r2,r2,255
81108bdc:	100d883a 	mov	r6,r2
81108be0:	01604534 	movhi	r5,33044
81108be4:	297ed504 	addi	r5,r5,-1196
81108be8:	1809883a 	mov	r4,r3
81108bec:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Padding MASK 	= %llu\n", pxNFee->xMemMap.xCommon.ucPaddingMask.ullWord);
81108bf0:	d2205017 	ldw	r8,-32448(gp)
81108bf4:	e13fff17 	ldw	r4,-4(fp)
81108bf8:	20800617 	ldw	r2,24(r4)
81108bfc:	20c00717 	ldw	r3,28(r4)
81108c00:	100d883a 	mov	r6,r2
81108c04:	180f883a 	mov	r7,r3
81108c08:	01604534 	movhi	r5,33044
81108c0c:	297edd04 	addi	r5,r5,-1164
81108c10:	4009883a 	mov	r4,r8
81108c14:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"\n");
81108c18:	d0a05017 	ldw	r2,-32448(gp)
81108c1c:	100b883a 	mov	r5,r2
81108c20:	01000284 	movi	r4,10
81108c24:	1113a380 	call	81113a38 <fputc>
		fprintf(fp,"    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 0 , pxNFee->ucId);
81108c28:	d0e05017 	ldw	r3,-32448(gp)
81108c2c:	e0bfff17 	ldw	r2,-4(fp)
81108c30:	10800003 	ldbu	r2,0(r2)
81108c34:	10803fcc 	andi	r2,r2,255
81108c38:	100f883a 	mov	r7,r2
81108c3c:	000d883a 	mov	r6,zero
81108c40:	01604534 	movhi	r5,33044
81108c44:	297ee504 	addi	r5,r5,-1132
81108c48:	1809883a 	mov	r4,r3
81108c4c:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Left side \n");
81108c50:	d0a05017 	ldw	r2,-32448(gp)
81108c54:	100f883a 	mov	r7,r2
81108c58:	018004c4 	movi	r6,19
81108c5c:	01400044 	movi	r5,1
81108c60:	01204534 	movhi	r4,33044
81108c64:	213eef04 	addi	r4,r4,-1092
81108c68:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulOffsetAddr);
81108c6c:	d0e05017 	ldw	r3,-32448(gp)
81108c70:	e0bfff17 	ldw	r2,-4(fp)
81108c74:	10800817 	ldw	r2,32(r2)
81108c78:	100d883a 	mov	r6,r2
81108c7c:	01604534 	movhi	r5,33044
81108c80:	297ef404 	addi	r5,r5,-1072
81108c84:	1809883a 	mov	r4,r3
81108c88:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulBlockI);
81108c8c:	d0e05017 	ldw	r3,-32448(gp)
81108c90:	e0bfff17 	ldw	r2,-4(fp)
81108c94:	10800917 	ldw	r2,36(r2)
81108c98:	100d883a 	mov	r6,r2
81108c9c:	01604534 	movhi	r5,33044
81108ca0:	297efd04 	addi	r5,r5,-1036
81108ca4:	1809883a 	mov	r4,r3
81108ca8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulAddrI);
81108cac:	d0e05017 	ldw	r3,-32448(gp)
81108cb0:	e0bfff17 	ldw	r2,-4(fp)
81108cb4:	10800a17 	ldw	r2,40(r2)
81108cb8:	100d883a 	mov	r6,r2
81108cbc:	01604534 	movhi	r5,33044
81108cc0:	297f0804 	addi	r5,r5,-992
81108cc4:	1809883a 	mov	r4,r3
81108cc8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Right side \n");
81108ccc:	d0a05017 	ldw	r2,-32448(gp)
81108cd0:	100f883a 	mov	r7,r2
81108cd4:	01800504 	movi	r6,20
81108cd8:	01400044 	movi	r5,1
81108cdc:	01204534 	movhi	r4,33044
81108ce0:	213f1404 	addi	r4,r4,-944
81108ce4:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulOffsetAddr);
81108ce8:	d0e05017 	ldw	r3,-32448(gp)
81108cec:	e0bfff17 	ldw	r2,-4(fp)
81108cf0:	10800b17 	ldw	r2,44(r2)
81108cf4:	100d883a 	mov	r6,r2
81108cf8:	01604534 	movhi	r5,33044
81108cfc:	297ef404 	addi	r5,r5,-1072
81108d00:	1809883a 	mov	r4,r3
81108d04:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulBlockI);
81108d08:	d0e05017 	ldw	r3,-32448(gp)
81108d0c:	e0bfff17 	ldw	r2,-4(fp)
81108d10:	10800c17 	ldw	r2,48(r2)
81108d14:	100d883a 	mov	r6,r2
81108d18:	01604534 	movhi	r5,33044
81108d1c:	297efd04 	addi	r5,r5,-1036
81108d20:	1809883a 	mov	r4,r3
81108d24:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulAddrI);
81108d28:	d0e05017 	ldw	r3,-32448(gp)
81108d2c:	e0bfff17 	ldw	r2,-4(fp)
81108d30:	10800d17 	ldw	r2,52(r2)
81108d34:	100d883a 	mov	r6,r2
81108d38:	01604534 	movhi	r5,33044
81108d3c:	297f0804 	addi	r5,r5,-992
81108d40:	1809883a 	mov	r4,r3
81108d44:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"\n");
81108d48:	d0a05017 	ldw	r2,-32448(gp)
81108d4c:	100b883a 	mov	r5,r2
81108d50:	01000284 	movi	r4,10
81108d54:	1113a380 	call	81113a38 <fputc>
		fprintf(fp,"    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 1 , pxNFee->ucId);
81108d58:	d0e05017 	ldw	r3,-32448(gp)
81108d5c:	e0bfff17 	ldw	r2,-4(fp)
81108d60:	10800003 	ldbu	r2,0(r2)
81108d64:	10803fcc 	andi	r2,r2,255
81108d68:	100f883a 	mov	r7,r2
81108d6c:	01800044 	movi	r6,1
81108d70:	01604534 	movhi	r5,33044
81108d74:	297ee504 	addi	r5,r5,-1132
81108d78:	1809883a 	mov	r4,r3
81108d7c:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Left side \n");
81108d80:	d0a05017 	ldw	r2,-32448(gp)
81108d84:	100f883a 	mov	r7,r2
81108d88:	018004c4 	movi	r6,19
81108d8c:	01400044 	movi	r5,1
81108d90:	01204534 	movhi	r4,33044
81108d94:	213eef04 	addi	r4,r4,-1092
81108d98:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulOffsetAddr);
81108d9c:	d0e05017 	ldw	r3,-32448(gp)
81108da0:	e0bfff17 	ldw	r2,-4(fp)
81108da4:	10800e17 	ldw	r2,56(r2)
81108da8:	100d883a 	mov	r6,r2
81108dac:	01604534 	movhi	r5,33044
81108db0:	297ef404 	addi	r5,r5,-1072
81108db4:	1809883a 	mov	r4,r3
81108db8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulBlockI);
81108dbc:	d0e05017 	ldw	r3,-32448(gp)
81108dc0:	e0bfff17 	ldw	r2,-4(fp)
81108dc4:	10800f17 	ldw	r2,60(r2)
81108dc8:	100d883a 	mov	r6,r2
81108dcc:	01604534 	movhi	r5,33044
81108dd0:	297efd04 	addi	r5,r5,-1036
81108dd4:	1809883a 	mov	r4,r3
81108dd8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulAddrI);
81108ddc:	d0e05017 	ldw	r3,-32448(gp)
81108de0:	e0bfff17 	ldw	r2,-4(fp)
81108de4:	10801017 	ldw	r2,64(r2)
81108de8:	100d883a 	mov	r6,r2
81108dec:	01604534 	movhi	r5,33044
81108df0:	297f0804 	addi	r5,r5,-992
81108df4:	1809883a 	mov	r4,r3
81108df8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Right side \n");
81108dfc:	d0a05017 	ldw	r2,-32448(gp)
81108e00:	100f883a 	mov	r7,r2
81108e04:	01800504 	movi	r6,20
81108e08:	01400044 	movi	r5,1
81108e0c:	01204534 	movhi	r4,33044
81108e10:	213f1404 	addi	r4,r4,-944
81108e14:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulOffsetAddr);
81108e18:	d0e05017 	ldw	r3,-32448(gp)
81108e1c:	e0bfff17 	ldw	r2,-4(fp)
81108e20:	10801117 	ldw	r2,68(r2)
81108e24:	100d883a 	mov	r6,r2
81108e28:	01604534 	movhi	r5,33044
81108e2c:	297ef404 	addi	r5,r5,-1072
81108e30:	1809883a 	mov	r4,r3
81108e34:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulBlockI);
81108e38:	d0e05017 	ldw	r3,-32448(gp)
81108e3c:	e0bfff17 	ldw	r2,-4(fp)
81108e40:	10801217 	ldw	r2,72(r2)
81108e44:	100d883a 	mov	r6,r2
81108e48:	01604534 	movhi	r5,33044
81108e4c:	297efd04 	addi	r5,r5,-1036
81108e50:	1809883a 	mov	r4,r3
81108e54:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulAddrI);
81108e58:	d0e05017 	ldw	r3,-32448(gp)
81108e5c:	e0bfff17 	ldw	r2,-4(fp)
81108e60:	10801317 	ldw	r2,76(r2)
81108e64:	100d883a 	mov	r6,r2
81108e68:	01604534 	movhi	r5,33044
81108e6c:	297f0804 	addi	r5,r5,-992
81108e70:	1809883a 	mov	r4,r3
81108e74:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"\n");
81108e78:	d0a05017 	ldw	r2,-32448(gp)
81108e7c:	100b883a 	mov	r5,r2
81108e80:	01000284 	movi	r4,10
81108e84:	1113a380 	call	81113a38 <fputc>
		fprintf(fp,"    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 2 , pxNFee->ucId);
81108e88:	d0e05017 	ldw	r3,-32448(gp)
81108e8c:	e0bfff17 	ldw	r2,-4(fp)
81108e90:	10800003 	ldbu	r2,0(r2)
81108e94:	10803fcc 	andi	r2,r2,255
81108e98:	100f883a 	mov	r7,r2
81108e9c:	01800084 	movi	r6,2
81108ea0:	01604534 	movhi	r5,33044
81108ea4:	297ee504 	addi	r5,r5,-1132
81108ea8:	1809883a 	mov	r4,r3
81108eac:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Left side \n");
81108eb0:	d0a05017 	ldw	r2,-32448(gp)
81108eb4:	100f883a 	mov	r7,r2
81108eb8:	018004c4 	movi	r6,19
81108ebc:	01400044 	movi	r5,1
81108ec0:	01204534 	movhi	r4,33044
81108ec4:	213eef04 	addi	r4,r4,-1092
81108ec8:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulOffsetAddr);
81108ecc:	d0e05017 	ldw	r3,-32448(gp)
81108ed0:	e0bfff17 	ldw	r2,-4(fp)
81108ed4:	10801417 	ldw	r2,80(r2)
81108ed8:	100d883a 	mov	r6,r2
81108edc:	01604534 	movhi	r5,33044
81108ee0:	297ef404 	addi	r5,r5,-1072
81108ee4:	1809883a 	mov	r4,r3
81108ee8:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulBlockI);
81108eec:	d0e05017 	ldw	r3,-32448(gp)
81108ef0:	e0bfff17 	ldw	r2,-4(fp)
81108ef4:	10801517 	ldw	r2,84(r2)
81108ef8:	100d883a 	mov	r6,r2
81108efc:	01604534 	movhi	r5,33044
81108f00:	297efd04 	addi	r5,r5,-1036
81108f04:	1809883a 	mov	r4,r3
81108f08:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulAddrI);
81108f0c:	d0e05017 	ldw	r3,-32448(gp)
81108f10:	e0bfff17 	ldw	r2,-4(fp)
81108f14:	10801617 	ldw	r2,88(r2)
81108f18:	100d883a 	mov	r6,r2
81108f1c:	01604534 	movhi	r5,33044
81108f20:	297f0804 	addi	r5,r5,-992
81108f24:	1809883a 	mov	r4,r3
81108f28:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Right side \n");
81108f2c:	d0a05017 	ldw	r2,-32448(gp)
81108f30:	100f883a 	mov	r7,r2
81108f34:	01800504 	movi	r6,20
81108f38:	01400044 	movi	r5,1
81108f3c:	01204534 	movhi	r4,33044
81108f40:	213f1404 	addi	r4,r4,-944
81108f44:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulOffsetAddr);
81108f48:	d0e05017 	ldw	r3,-32448(gp)
81108f4c:	e0bfff17 	ldw	r2,-4(fp)
81108f50:	10801717 	ldw	r2,92(r2)
81108f54:	100d883a 	mov	r6,r2
81108f58:	01604534 	movhi	r5,33044
81108f5c:	297ef404 	addi	r5,r5,-1072
81108f60:	1809883a 	mov	r4,r3
81108f64:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulBlockI);
81108f68:	d0e05017 	ldw	r3,-32448(gp)
81108f6c:	e0bfff17 	ldw	r2,-4(fp)
81108f70:	10801817 	ldw	r2,96(r2)
81108f74:	100d883a 	mov	r6,r2
81108f78:	01604534 	movhi	r5,33044
81108f7c:	297efd04 	addi	r5,r5,-1036
81108f80:	1809883a 	mov	r4,r3
81108f84:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulAddrI);
81108f88:	d0e05017 	ldw	r3,-32448(gp)
81108f8c:	e0bfff17 	ldw	r2,-4(fp)
81108f90:	10801917 	ldw	r2,100(r2)
81108f94:	100d883a 	mov	r6,r2
81108f98:	01604534 	movhi	r5,33044
81108f9c:	297f0804 	addi	r5,r5,-992
81108fa0:	1809883a 	mov	r4,r3
81108fa4:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"\n");
81108fa8:	d0a05017 	ldw	r2,-32448(gp)
81108fac:	100b883a 	mov	r5,r2
81108fb0:	01000284 	movi	r4,10
81108fb4:	1113a380 	call	81113a38 <fputc>
		fprintf(fp,"    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 3 , pxNFee->ucId);
81108fb8:	d0e05017 	ldw	r3,-32448(gp)
81108fbc:	e0bfff17 	ldw	r2,-4(fp)
81108fc0:	10800003 	ldbu	r2,0(r2)
81108fc4:	10803fcc 	andi	r2,r2,255
81108fc8:	100f883a 	mov	r7,r2
81108fcc:	018000c4 	movi	r6,3
81108fd0:	01604534 	movhi	r5,33044
81108fd4:	297ee504 	addi	r5,r5,-1132
81108fd8:	1809883a 	mov	r4,r3
81108fdc:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Left side \n");
81108fe0:	d0a05017 	ldw	r2,-32448(gp)
81108fe4:	100f883a 	mov	r7,r2
81108fe8:	018004c4 	movi	r6,19
81108fec:	01400044 	movi	r5,1
81108ff0:	01204534 	movhi	r4,33044
81108ff4:	213eef04 	addi	r4,r4,-1092
81108ff8:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulOffsetAddr);
81108ffc:	d0e05017 	ldw	r3,-32448(gp)
81109000:	e0bfff17 	ldw	r2,-4(fp)
81109004:	10801a17 	ldw	r2,104(r2)
81109008:	100d883a 	mov	r6,r2
8110900c:	01604534 	movhi	r5,33044
81109010:	297ef404 	addi	r5,r5,-1072
81109014:	1809883a 	mov	r4,r3
81109018:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulBlockI);
8110901c:	d0e05017 	ldw	r3,-32448(gp)
81109020:	e0bfff17 	ldw	r2,-4(fp)
81109024:	10801b17 	ldw	r2,108(r2)
81109028:	100d883a 	mov	r6,r2
8110902c:	01604534 	movhi	r5,33044
81109030:	297efd04 	addi	r5,r5,-1036
81109034:	1809883a 	mov	r4,r3
81109038:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulAddrI);
8110903c:	d0e05017 	ldw	r3,-32448(gp)
81109040:	e0bfff17 	ldw	r2,-4(fp)
81109044:	10801c17 	ldw	r2,112(r2)
81109048:	100d883a 	mov	r6,r2
8110904c:	01604534 	movhi	r5,33044
81109050:	297f0804 	addi	r5,r5,-992
81109054:	1809883a 	mov	r4,r3
81109058:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"        Right side \n");
8110905c:	d0a05017 	ldw	r2,-32448(gp)
81109060:	100f883a 	mov	r7,r2
81109064:	01800504 	movi	r6,20
81109068:	01400044 	movi	r5,1
8110906c:	01204534 	movhi	r4,33044
81109070:	213f1404 	addi	r4,r4,-944
81109074:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulOffsetAddr);
81109078:	d0e05017 	ldw	r3,-32448(gp)
8110907c:	e0bfff17 	ldw	r2,-4(fp)
81109080:	10801d17 	ldw	r2,116(r2)
81109084:	100d883a 	mov	r6,r2
81109088:	01604534 	movhi	r5,33044
8110908c:	297ef404 	addi	r5,r5,-1072
81109090:	1809883a 	mov	r4,r3
81109094:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulBlockI);
81109098:	d0e05017 	ldw	r3,-32448(gp)
8110909c:	e0bfff17 	ldw	r2,-4(fp)
811090a0:	10801e17 	ldw	r2,120(r2)
811090a4:	100d883a 	mov	r6,r2
811090a8:	01604534 	movhi	r5,33044
811090ac:	297efd04 	addi	r5,r5,-1036
811090b0:	1809883a 	mov	r4,r3
811090b4:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulAddrI);
811090b8:	d0e05017 	ldw	r3,-32448(gp)
811090bc:	e0bfff17 	ldw	r2,-4(fp)
811090c0:	10801f17 	ldw	r2,124(r2)
811090c4:	100d883a 	mov	r6,r2
811090c8:	01604534 	movhi	r5,33044
811090cc:	297f0804 	addi	r5,r5,-992
811090d0:	1809883a 	mov	r4,r3
811090d4:	11139c00 	call	811139c0 <fprintf>
		fprintf(fp,"\n");
811090d8:	d0a05017 	ldw	r2,-32448(gp)
811090dc:	100b883a 	mov	r5,r2
811090e0:	01000284 	movi	r4,10
811090e4:	1113a380 	call	81113a38 <fputc>
		fprintf(fp,"==============================================================================\n");
811090e8:	d0a05017 	ldw	r2,-32448(gp)
811090ec:	100f883a 	mov	r7,r2
811090f0:	018013c4 	movi	r6,79
811090f4:	01400044 	movi	r5,1
811090f8:	01204534 	movhi	r4,33044
811090fc:	213f1a04 	addi	r4,r4,-920
81109100:	111405c0 	call	8111405c <fwrite>
		fprintf(fp,"==============================================================================\n");
81109104:	d0a05017 	ldw	r2,-32448(gp)
81109108:	100f883a 	mov	r7,r2
8110910c:	018013c4 	movi	r6,79
81109110:	01400044 	movi	r5,1
81109114:	01204534 	movhi	r4,33044
81109118:	213f1a04 	addi	r4,r4,-920
8110911c:	111405c0 	call	8111405c <fwrite>
	}
81109120:	0001883a 	nop
81109124:	e037883a 	mov	sp,fp
81109128:	dfc00117 	ldw	ra,4(sp)
8110912c:	df000017 	ldw	fp,0(sp)
81109130:	dec00204 	addi	sp,sp,8
81109134:	f800283a 	ret

81109138 <vPrintUARTNFee>:
#endif


#ifdef DEBUG_ON
	void vPrintUARTNFee( TNFee *pxNFee ) {
81109138:	defffc04 	addi	sp,sp,-16
8110913c:	de00012e 	bgeu	sp,et,81109144 <vPrintUARTNFee+0xc>
81109140:	003b68fa 	trap	3
81109144:	dfc00315 	stw	ra,12(sp)
81109148:	df000215 	stw	fp,8(sp)
8110914c:	df000204 	addi	fp,sp,8
81109150:	e13fff15 	stw	r4,-4(fp)
		printf("=================================NFEE %hhu=====================================\n", pxNFee->ucId);
81109154:	e0bfff17 	ldw	r2,-4(fp)
81109158:	10800003 	ldbu	r2,0(r2)
8110915c:	10803fcc 	andi	r2,r2,255
81109160:	100b883a 	mov	r5,r2
81109164:	01204534 	movhi	r4,33044
81109168:	213e2404 	addi	r4,r4,-1904
8110916c:	1114d880 	call	81114d88 <printf>
		printf("\n");
81109170:	01000284 	movi	r4,10
81109174:	1114f4c0 	call	81114f4c <putchar>
		printf("NFEE %hhu CCD infos: \n", pxNFee->ucId);
81109178:	e0bfff17 	ldw	r2,-4(fp)
8110917c:	10800003 	ldbu	r2,0(r2)
81109180:	10803fcc 	andi	r2,r2,255
81109184:	100b883a 	mov	r5,r2
81109188:	01204534 	movhi	r4,33044
8110918c:	213e3904 	addi	r4,r4,-1820
81109190:	1114d880 	call	81114d88 <printf>
		printf("    PreScan = %hu \n", pxNFee->xCcdInfo.usiSPrescanN);
81109194:	e0bfff17 	ldw	r2,-4(fp)
81109198:	1080280b 	ldhu	r2,160(r2)
8110919c:	10bfffcc 	andi	r2,r2,65535
811091a0:	100b883a 	mov	r5,r2
811091a4:	01204534 	movhi	r4,33044
811091a8:	213e3f04 	addi	r4,r4,-1796
811091ac:	1114d880 	call	81114d88 <printf>
		printf("    OverScan = %hu \n", pxNFee->xCcdInfo.usiSOverscanN);
811091b0:	e0bfff17 	ldw	r2,-4(fp)
811091b4:	1080288b 	ldhu	r2,162(r2)
811091b8:	10bfffcc 	andi	r2,r2,65535
811091bc:	100b883a 	mov	r5,r2
811091c0:	01204534 	movhi	r4,33044
811091c4:	213e4404 	addi	r4,r4,-1776
811091c8:	1114d880 	call	81114d88 <printf>
		printf("    OLN = %hu \n", pxNFee->xCcdInfo.usiOLN);
811091cc:	e0bfff17 	ldw	r2,-4(fp)
811091d0:	1080290b 	ldhu	r2,164(r2)
811091d4:	10bfffcc 	andi	r2,r2,65535
811091d8:	100b883a 	mov	r5,r2
811091dc:	01204534 	movhi	r4,33044
811091e0:	213e4a04 	addi	r4,r4,-1752
811091e4:	1114d880 	call	81114d88 <printf>
		printf("    Half Width = %hu \n", pxNFee->xCcdInfo.usiHalfWidth);
811091e8:	e0bfff17 	ldw	r2,-4(fp)
811091ec:	1080298b 	ldhu	r2,166(r2)
811091f0:	10bfffcc 	andi	r2,r2,65535
811091f4:	100b883a 	mov	r5,r2
811091f8:	01204534 	movhi	r4,33044
811091fc:	213e4e04 	addi	r4,r4,-1736
81109200:	1114d880 	call	81114d88 <printf>
		printf("    Height = %hu \n", pxNFee->xCcdInfo.usiHeight);
81109204:	e0bfff17 	ldw	r2,-4(fp)
81109208:	10802a0b 	ldhu	r2,168(r2)
8110920c:	10bfffcc 	andi	r2,r2,65535
81109210:	100b883a 	mov	r5,r2
81109214:	01204534 	movhi	r4,33044
81109218:	213e5404 	addi	r4,r4,-1712
8110921c:	1114d880 	call	81114d88 <printf>
		printf("\n");
81109220:	01000284 	movi	r4,10
81109224:	1114f4c0 	call	81114f4c <putchar>
		printf("NFEE %hhu Control: \n", pxNFee->ucId);
81109228:	e0bfff17 	ldw	r2,-4(fp)
8110922c:	10800003 	ldbu	r2,0(r2)
81109230:	10803fcc 	andi	r2,r2,255
81109234:	100b883a 	mov	r5,r2
81109238:	01204534 	movhi	r4,33044
8110923c:	213e5904 	addi	r4,r4,-1692
81109240:	1114d880 	call	81114d88 <printf>
		printf("    NFEE State 	= %hu \n", pxNFee->xControl.eMode);
81109244:	e0bfff17 	ldw	r2,-4(fp)
81109248:	10802617 	ldw	r2,152(r2)
8110924c:	100b883a 	mov	r5,r2
81109250:	01204534 	movhi	r4,33044
81109254:	213e5f04 	addi	r4,r4,-1668
81109258:	1114d880 	call	81114d88 <printf>
		printf("    NFEE Enable? = %hu \n", pxNFee->xControl.bEnabled);
8110925c:	e0bfff17 	ldw	r2,-4(fp)
81109260:	10802017 	ldw	r2,128(r2)
81109264:	100b883a 	mov	r5,r2
81109268:	01204534 	movhi	r4,33044
8110926c:	213e6504 	addi	r4,r4,-1644
81109270:	1114d880 	call	81114d88 <printf>
		printf("    Using DMA?   = %hu \n", pxNFee->xControl.bUsingDMA);
81109274:	e0bfff17 	ldw	r2,-4(fp)
81109278:	10802117 	ldw	r2,132(r2)
8110927c:	100b883a 	mov	r5,r2
81109280:	01204534 	movhi	r4,33044
81109284:	213e6c04 	addi	r4,r4,-1616
81109288:	1114d880 	call	81114d88 <printf>
		printf("    Logging?     = %hu \n", pxNFee->xControl.bLogging);
8110928c:	e0bfff17 	ldw	r2,-4(fp)
81109290:	10802217 	ldw	r2,136(r2)
81109294:	100b883a 	mov	r5,r2
81109298:	01204534 	movhi	r4,33044
8110929c:	213e7304 	addi	r4,r4,-1588
811092a0:	1114d880 	call	81114d88 <printf>
		printf("    Echoing?     = %hu \n", pxNFee->xControl.bEchoing);
811092a4:	e0bfff17 	ldw	r2,-4(fp)
811092a8:	10802317 	ldw	r2,140(r2)
811092ac:	100b883a 	mov	r5,r2
811092b0:	01204534 	movhi	r4,33044
811092b4:	213e7a04 	addi	r4,r4,-1560
811092b8:	1114d880 	call	81114d88 <printf>
		printf("    Channel Enable? = %hu \n", pxNFee->xControl.bChannelEnable);
811092bc:	e0bfff17 	ldw	r2,-4(fp)
811092c0:	10802417 	ldw	r2,144(r2)
811092c4:	100b883a 	mov	r5,r2
811092c8:	01204534 	movhi	r4,33044
811092cc:	213e8104 	addi	r4,r4,-1532
811092d0:	1114d880 	call	81114d88 <printf>
		printf("    Readout order = [ %hhu , %hhu , %hhu , %hhu ] \n", pxNFee->xControl.ucROutOrder[0], pxNFee->xControl.ucROutOrder[1], pxNFee->xControl.ucROutOrder[2], pxNFee->xControl.ucROutOrder[3]);
811092d4:	e0bfff17 	ldw	r2,-4(fp)
811092d8:	10802503 	ldbu	r2,148(r2)
811092dc:	10c03fcc 	andi	r3,r2,255
811092e0:	e0bfff17 	ldw	r2,-4(fp)
811092e4:	10802543 	ldbu	r2,149(r2)
811092e8:	11003fcc 	andi	r4,r2,255
811092ec:	e0bfff17 	ldw	r2,-4(fp)
811092f0:	10802583 	ldbu	r2,150(r2)
811092f4:	11403fcc 	andi	r5,r2,255
811092f8:	e0bfff17 	ldw	r2,-4(fp)
811092fc:	108025c3 	ldbu	r2,151(r2)
81109300:	10803fcc 	andi	r2,r2,255
81109304:	d8800015 	stw	r2,0(sp)
81109308:	280f883a 	mov	r7,r5
8110930c:	200d883a 	mov	r6,r4
81109310:	180b883a 	mov	r5,r3
81109314:	01204534 	movhi	r4,33044
81109318:	213e8804 	addi	r4,r4,-1504
8110931c:	1114d880 	call	81114d88 <printf>
		printf("    CCD Side = = %hu \n", pxNFee->xControl.eSide);
81109320:	e0bfff17 	ldw	r2,-4(fp)
81109324:	10802717 	ldw	r2,156(r2)
81109328:	100b883a 	mov	r5,r2
8110932c:	01204534 	movhi	r4,33044
81109330:	213e9504 	addi	r4,r4,-1452
81109334:	1114d880 	call	81114d88 <printf>
		printf("\n\n");
81109338:	01204534 	movhi	r4,33044
8110933c:	213f2e04 	addi	r4,r4,-840
81109340:	111502c0 	call	8111502c <puts>
		printf("NFEE %hhu MEMORY MAP: \n", pxNFee->ucId);
81109344:	e0bfff17 	ldw	r2,-4(fp)
81109348:	10800003 	ldbu	r2,0(r2)
8110934c:	10803fcc 	andi	r2,r2,255
81109350:	100b883a 	mov	r5,r2
81109354:	01204534 	movhi	r4,33044
81109358:	213e9c04 	addi	r4,r4,-1424
8110935c:	1114d880 	call	81114d88 <printf>
		printf("    General Info: \n");
81109360:	01204534 	movhi	r4,33044
81109364:	213f2f04 	addi	r4,r4,-836
81109368:	111502c0 	call	8111502c <puts>
		printf("        Offset root 	= %lu \n", pxNFee->xMemMap.ulOffsetRoot);
8110936c:	e0bfff17 	ldw	r2,-4(fp)
81109370:	10800117 	ldw	r2,4(r2)
81109374:	100b883a 	mov	r5,r2
81109378:	01204534 	movhi	r4,33044
8110937c:	213ea704 	addi	r4,r4,-1380
81109380:	1114d880 	call	81114d88 <printf>
		printf("        Total Bytes 	= %lu \n", pxNFee->xMemMap.ulTotalBytes);
81109384:	e0bfff17 	ldw	r2,-4(fp)
81109388:	10800217 	ldw	r2,8(r2)
8110938c:	100b883a 	mov	r5,r2
81109390:	01204534 	movhi	r4,33044
81109394:	213eaf04 	addi	r4,r4,-1348
81109398:	1114d880 	call	81114d88 <printf>
		printf("        LUT ADDR 	= %lu \n", pxNFee->xMemMap.ulLUTAddr);
8110939c:	e0bfff17 	ldw	r2,-4(fp)
811093a0:	10800317 	ldw	r2,12(r2)
811093a4:	100b883a 	mov	r5,r2
811093a8:	01204534 	movhi	r4,33044
811093ac:	213eb704 	addi	r4,r4,-1316
811093b0:	1114d880 	call	81114d88 <printf>
		printf("    Common to all CCDs: \n");
811093b4:	01204534 	movhi	r4,33044
811093b8:	213f3404 	addi	r4,r4,-816
811093bc:	111502c0 	call	8111502c <puts>
		printf("        Total Bytes 	= %hu \n", pxNFee->xMemMap.xCommon.usiTotalBytes);
811093c0:	e0bfff17 	ldw	r2,-4(fp)
811093c4:	1080048b 	ldhu	r2,18(r2)
811093c8:	10bfffcc 	andi	r2,r2,65535
811093cc:	100b883a 	mov	r5,r2
811093d0:	01204534 	movhi	r4,33044
811093d4:	213ec504 	addi	r4,r4,-1260
811093d8:	1114d880 	call	81114d88 <printf>
		printf("        Total of Blocks = %hu \n", pxNFee->xMemMap.xCommon.usiNTotalBlocks);
811093dc:	e0bfff17 	ldw	r2,-4(fp)
811093e0:	1080040b 	ldhu	r2,16(r2)
811093e4:	10bfffcc 	andi	r2,r2,65535
811093e8:	100b883a 	mov	r5,r2
811093ec:	01204534 	movhi	r4,33044
811093f0:	213ecd04 	addi	r4,r4,-1228
811093f4:	1114d880 	call	81114d88 <printf>
		printf("        Padding Bytes 	= %hhu\n", pxNFee->xMemMap.xCommon.ucPaddingBytes);
811093f8:	e0bfff17 	ldw	r2,-4(fp)
811093fc:	10800503 	ldbu	r2,20(r2)
81109400:	10803fcc 	andi	r2,r2,255
81109404:	100b883a 	mov	r5,r2
81109408:	01204534 	movhi	r4,33044
8110940c:	213ed504 	addi	r4,r4,-1196
81109410:	1114d880 	call	81114d88 <printf>
		printf("        Padding MASK 	= %llu\n", pxNFee->xMemMap.xCommon.ucPaddingMask.ullWord);
81109414:	e13fff17 	ldw	r4,-4(fp)
81109418:	20800617 	ldw	r2,24(r4)
8110941c:	20c00717 	ldw	r3,28(r4)
81109420:	100b883a 	mov	r5,r2
81109424:	180d883a 	mov	r6,r3
81109428:	01204534 	movhi	r4,33044
8110942c:	213edd04 	addi	r4,r4,-1164
81109430:	1114d880 	call	81114d88 <printf>
		printf("\n");
81109434:	01000284 	movi	r4,10
81109438:	1114f4c0 	call	81114f4c <putchar>
		printf("    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 0 , pxNFee->ucId);
8110943c:	e0bfff17 	ldw	r2,-4(fp)
81109440:	10800003 	ldbu	r2,0(r2)
81109444:	10803fcc 	andi	r2,r2,255
81109448:	100d883a 	mov	r6,r2
8110944c:	000b883a 	mov	r5,zero
81109450:	01204534 	movhi	r4,33044
81109454:	213ee504 	addi	r4,r4,-1132
81109458:	1114d880 	call	81114d88 <printf>
		printf("        Left side \n");
8110945c:	01204534 	movhi	r4,33044
81109460:	213f3b04 	addi	r4,r4,-788
81109464:	111502c0 	call	8111502c <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulOffsetAddr);
81109468:	e0bfff17 	ldw	r2,-4(fp)
8110946c:	10800817 	ldw	r2,32(r2)
81109470:	100b883a 	mov	r5,r2
81109474:	01204534 	movhi	r4,33044
81109478:	213ef404 	addi	r4,r4,-1072
8110947c:	1114d880 	call	81114d88 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulBlockI);
81109480:	e0bfff17 	ldw	r2,-4(fp)
81109484:	10800917 	ldw	r2,36(r2)
81109488:	100b883a 	mov	r5,r2
8110948c:	01204534 	movhi	r4,33044
81109490:	213efd04 	addi	r4,r4,-1036
81109494:	1114d880 	call	81114d88 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xLeft.ulAddrI);
81109498:	e0bfff17 	ldw	r2,-4(fp)
8110949c:	10800a17 	ldw	r2,40(r2)
811094a0:	100b883a 	mov	r5,r2
811094a4:	01204534 	movhi	r4,33044
811094a8:	213f0804 	addi	r4,r4,-992
811094ac:	1114d880 	call	81114d88 <printf>
		printf("        Right side \n");
811094b0:	01204534 	movhi	r4,33044
811094b4:	213f4004 	addi	r4,r4,-768
811094b8:	111502c0 	call	8111502c <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulOffsetAddr);
811094bc:	e0bfff17 	ldw	r2,-4(fp)
811094c0:	10800b17 	ldw	r2,44(r2)
811094c4:	100b883a 	mov	r5,r2
811094c8:	01204534 	movhi	r4,33044
811094cc:	213ef404 	addi	r4,r4,-1072
811094d0:	1114d880 	call	81114d88 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulBlockI);
811094d4:	e0bfff17 	ldw	r2,-4(fp)
811094d8:	10800c17 	ldw	r2,48(r2)
811094dc:	100b883a 	mov	r5,r2
811094e0:	01204534 	movhi	r4,33044
811094e4:	213efd04 	addi	r4,r4,-1036
811094e8:	1114d880 	call	81114d88 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[0].xRight.ulAddrI);
811094ec:	e0bfff17 	ldw	r2,-4(fp)
811094f0:	10800d17 	ldw	r2,52(r2)
811094f4:	100b883a 	mov	r5,r2
811094f8:	01204534 	movhi	r4,33044
811094fc:	213f0804 	addi	r4,r4,-992
81109500:	1114d880 	call	81114d88 <printf>
		printf("\n");
81109504:	01000284 	movi	r4,10
81109508:	1114f4c0 	call	81114f4c <putchar>
		printf("    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 1 , pxNFee->ucId);
8110950c:	e0bfff17 	ldw	r2,-4(fp)
81109510:	10800003 	ldbu	r2,0(r2)
81109514:	10803fcc 	andi	r2,r2,255
81109518:	100d883a 	mov	r6,r2
8110951c:	01400044 	movi	r5,1
81109520:	01204534 	movhi	r4,33044
81109524:	213ee504 	addi	r4,r4,-1132
81109528:	1114d880 	call	81114d88 <printf>
		printf("        Left side \n");
8110952c:	01204534 	movhi	r4,33044
81109530:	213f3b04 	addi	r4,r4,-788
81109534:	111502c0 	call	8111502c <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulOffsetAddr);
81109538:	e0bfff17 	ldw	r2,-4(fp)
8110953c:	10800e17 	ldw	r2,56(r2)
81109540:	100b883a 	mov	r5,r2
81109544:	01204534 	movhi	r4,33044
81109548:	213ef404 	addi	r4,r4,-1072
8110954c:	1114d880 	call	81114d88 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulBlockI);
81109550:	e0bfff17 	ldw	r2,-4(fp)
81109554:	10800f17 	ldw	r2,60(r2)
81109558:	100b883a 	mov	r5,r2
8110955c:	01204534 	movhi	r4,33044
81109560:	213efd04 	addi	r4,r4,-1036
81109564:	1114d880 	call	81114d88 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xLeft.ulAddrI);
81109568:	e0bfff17 	ldw	r2,-4(fp)
8110956c:	10801017 	ldw	r2,64(r2)
81109570:	100b883a 	mov	r5,r2
81109574:	01204534 	movhi	r4,33044
81109578:	213f0804 	addi	r4,r4,-992
8110957c:	1114d880 	call	81114d88 <printf>
		printf("        Right side \n");
81109580:	01204534 	movhi	r4,33044
81109584:	213f4004 	addi	r4,r4,-768
81109588:	111502c0 	call	8111502c <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulOffsetAddr);
8110958c:	e0bfff17 	ldw	r2,-4(fp)
81109590:	10801117 	ldw	r2,68(r2)
81109594:	100b883a 	mov	r5,r2
81109598:	01204534 	movhi	r4,33044
8110959c:	213ef404 	addi	r4,r4,-1072
811095a0:	1114d880 	call	81114d88 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulBlockI);
811095a4:	e0bfff17 	ldw	r2,-4(fp)
811095a8:	10801217 	ldw	r2,72(r2)
811095ac:	100b883a 	mov	r5,r2
811095b0:	01204534 	movhi	r4,33044
811095b4:	213efd04 	addi	r4,r4,-1036
811095b8:	1114d880 	call	81114d88 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[1].xRight.ulAddrI);
811095bc:	e0bfff17 	ldw	r2,-4(fp)
811095c0:	10801317 	ldw	r2,76(r2)
811095c4:	100b883a 	mov	r5,r2
811095c8:	01204534 	movhi	r4,33044
811095cc:	213f0804 	addi	r4,r4,-992
811095d0:	1114d880 	call	81114d88 <printf>
		printf("\n");
811095d4:	01000284 	movi	r4,10
811095d8:	1114f4c0 	call	81114f4c <putchar>
		printf("    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 2 , pxNFee->ucId);
811095dc:	e0bfff17 	ldw	r2,-4(fp)
811095e0:	10800003 	ldbu	r2,0(r2)
811095e4:	10803fcc 	andi	r2,r2,255
811095e8:	100d883a 	mov	r6,r2
811095ec:	01400084 	movi	r5,2
811095f0:	01204534 	movhi	r4,33044
811095f4:	213ee504 	addi	r4,r4,-1132
811095f8:	1114d880 	call	81114d88 <printf>
		printf("        Left side \n");
811095fc:	01204534 	movhi	r4,33044
81109600:	213f3b04 	addi	r4,r4,-788
81109604:	111502c0 	call	8111502c <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulOffsetAddr);
81109608:	e0bfff17 	ldw	r2,-4(fp)
8110960c:	10801417 	ldw	r2,80(r2)
81109610:	100b883a 	mov	r5,r2
81109614:	01204534 	movhi	r4,33044
81109618:	213ef404 	addi	r4,r4,-1072
8110961c:	1114d880 	call	81114d88 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulBlockI);
81109620:	e0bfff17 	ldw	r2,-4(fp)
81109624:	10801517 	ldw	r2,84(r2)
81109628:	100b883a 	mov	r5,r2
8110962c:	01204534 	movhi	r4,33044
81109630:	213efd04 	addi	r4,r4,-1036
81109634:	1114d880 	call	81114d88 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xLeft.ulAddrI);
81109638:	e0bfff17 	ldw	r2,-4(fp)
8110963c:	10801617 	ldw	r2,88(r2)
81109640:	100b883a 	mov	r5,r2
81109644:	01204534 	movhi	r4,33044
81109648:	213f0804 	addi	r4,r4,-992
8110964c:	1114d880 	call	81114d88 <printf>
		printf("        Right side \n");
81109650:	01204534 	movhi	r4,33044
81109654:	213f4004 	addi	r4,r4,-768
81109658:	111502c0 	call	8111502c <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulOffsetAddr);
8110965c:	e0bfff17 	ldw	r2,-4(fp)
81109660:	10801717 	ldw	r2,92(r2)
81109664:	100b883a 	mov	r5,r2
81109668:	01204534 	movhi	r4,33044
8110966c:	213ef404 	addi	r4,r4,-1072
81109670:	1114d880 	call	81114d88 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulBlockI);
81109674:	e0bfff17 	ldw	r2,-4(fp)
81109678:	10801817 	ldw	r2,96(r2)
8110967c:	100b883a 	mov	r5,r2
81109680:	01204534 	movhi	r4,33044
81109684:	213efd04 	addi	r4,r4,-1036
81109688:	1114d880 	call	81114d88 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[2].xRight.ulAddrI);
8110968c:	e0bfff17 	ldw	r2,-4(fp)
81109690:	10801917 	ldw	r2,100(r2)
81109694:	100b883a 	mov	r5,r2
81109698:	01204534 	movhi	r4,33044
8110969c:	213f0804 	addi	r4,r4,-992
811096a0:	1114d880 	call	81114d88 <printf>
		printf("\n");
811096a4:	01000284 	movi	r4,10
811096a8:	1114f4c0 	call	81114f4c <putchar>
		printf("    CCD %hhu - NFEE %hhu MEMORY MAP: \n", 3 , pxNFee->ucId);
811096ac:	e0bfff17 	ldw	r2,-4(fp)
811096b0:	10800003 	ldbu	r2,0(r2)
811096b4:	10803fcc 	andi	r2,r2,255
811096b8:	100d883a 	mov	r6,r2
811096bc:	014000c4 	movi	r5,3
811096c0:	01204534 	movhi	r4,33044
811096c4:	213ee504 	addi	r4,r4,-1132
811096c8:	1114d880 	call	81114d88 <printf>
		printf("        Left side \n");
811096cc:	01204534 	movhi	r4,33044
811096d0:	213f3b04 	addi	r4,r4,-788
811096d4:	111502c0 	call	8111502c <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulOffsetAddr);
811096d8:	e0bfff17 	ldw	r2,-4(fp)
811096dc:	10801a17 	ldw	r2,104(r2)
811096e0:	100b883a 	mov	r5,r2
811096e4:	01204534 	movhi	r4,33044
811096e8:	213ef404 	addi	r4,r4,-1072
811096ec:	1114d880 	call	81114d88 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulBlockI);
811096f0:	e0bfff17 	ldw	r2,-4(fp)
811096f4:	10801b17 	ldw	r2,108(r2)
811096f8:	100b883a 	mov	r5,r2
811096fc:	01204534 	movhi	r4,33044
81109700:	213efd04 	addi	r4,r4,-1036
81109704:	1114d880 	call	81114d88 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xLeft.ulAddrI);
81109708:	e0bfff17 	ldw	r2,-4(fp)
8110970c:	10801c17 	ldw	r2,112(r2)
81109710:	100b883a 	mov	r5,r2
81109714:	01204534 	movhi	r4,33044
81109718:	213f0804 	addi	r4,r4,-992
8110971c:	1114d880 	call	81114d88 <printf>
		printf("        Right side \n");
81109720:	01204534 	movhi	r4,33044
81109724:	213f4004 	addi	r4,r4,-768
81109728:	111502c0 	call	8111502c <puts>
		printf("            Offset (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulOffsetAddr);
8110972c:	e0bfff17 	ldw	r2,-4(fp)
81109730:	10801d17 	ldw	r2,116(r2)
81109734:	100b883a 	mov	r5,r2
81109738:	01204534 	movhi	r4,33044
8110973c:	213ef404 	addi	r4,r4,-1072
81109740:	1114d880 	call	81114d88 <printf>
		printf("            Block index (Blocks) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulBlockI);
81109744:	e0bfff17 	ldw	r2,-4(fp)
81109748:	10801e17 	ldw	r2,120(r2)
8110974c:	100b883a 	mov	r5,r2
81109750:	01204534 	movhi	r4,33044
81109754:	213efd04 	addi	r4,r4,-1036
81109758:	1114d880 	call	81114d88 <printf>
		printf("            Initial next block (Bytes) = %lu \n", pxNFee->xMemMap.xCcd[3].xRight.ulAddrI);
8110975c:	e0bfff17 	ldw	r2,-4(fp)
81109760:	10801f17 	ldw	r2,124(r2)
81109764:	100b883a 	mov	r5,r2
81109768:	01204534 	movhi	r4,33044
8110976c:	213f0804 	addi	r4,r4,-992
81109770:	1114d880 	call	81114d88 <printf>
		printf("\n");
81109774:	01000284 	movi	r4,10
81109778:	1114f4c0 	call	81114f4c <putchar>
		printf("==============================================================================\n");
8110977c:	01204534 	movhi	r4,33044
81109780:	213f4504 	addi	r4,r4,-748
81109784:	111502c0 	call	8111502c <puts>
		printf("==============================================================================\n");
81109788:	01204534 	movhi	r4,33044
8110978c:	213f4504 	addi	r4,r4,-748
81109790:	111502c0 	call	8111502c <puts>
	}
81109794:	0001883a 	nop
81109798:	e037883a 	mov	sp,fp
8110979c:	dfc00117 	ldw	ra,4(sp)
811097a0:	df000017 	ldw	fp,0(sp)
811097a4:	dec00204 	addi	sp,sp,8
811097a8:	f800283a 	ret

811097ac <vInAckHandlerTaskV2>:


#include "in_ack_handler_task.h"


void vInAckHandlerTaskV2(void *task_data) {
811097ac:	defff604 	addi	sp,sp,-40
811097b0:	de00012e 	bgeu	sp,et,811097b8 <vInAckHandlerTaskV2+0xc>
811097b4:	003b68fa 	trap	3
811097b8:	dfc00915 	stw	ra,36(sp)
811097bc:	df000815 	stw	fp,32(sp)
811097c0:	df000804 	addi	fp,sp,32
811097c4:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
811097c8:	e03ff815 	stw	zero,-32(fp)
    bool bFinished32 = FALSE;
811097cc:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished64 = FALSE;
811097d0:	e03ffc15 	stw	zero,-16(fp)
    bool bFinished128 = FALSE;
811097d4:	e03ffd15 	stw	zero,-12(fp)
	INT8U error_code;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucHashVerification = 0;
811097d8:	e03ffa85 	stb	zero,-22(fp)
    unsigned char ucCountRetries = 0;
811097dc:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0;
811097e0:	e03ffa45 	stb	zero,-23(fp)

    #ifdef DEBUG_ON
        debug(fp,"In Ack Handler Task. (Task on)\n");
811097e4:	d0a05017 	ldw	r2,-32448(gp)
811097e8:	100f883a 	mov	r7,r2
811097ec:	018007c4 	movi	r6,31
811097f0:	01400044 	movi	r5,1
811097f4:	01204534 	movhi	r4,33044
811097f8:	213f5904 	addi	r4,r4,-668
811097fc:	111405c0 	call	8111405c <fwrite>
    #endif

	eReceiverAckState = sRAConfiguring;
81109800:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eReceiverAckState) {
81109804:	e0bff917 	ldw	r2,-28(fp)
81109808:	10c00060 	cmpeqi	r3,r2,1
8110980c:	1800071e 	bne	r3,zero,8110982c <vInAckHandlerTaskV2+0x80>
81109810:	0080032e 	bgeu	zero,r2,81109820 <vInAckHandlerTaskV2+0x74>
81109814:	108000a0 	cmpeqi	r2,r2,2
81109818:	10004a1e 	bne	r2,zero,81109944 <vInAckHandlerTaskV2+0x198>
8110981c:	0000ac06 	br	81109ad0 <vInAckHandlerTaskV2+0x324>
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
81109820:	00800044 	movi	r2,1
81109824:	e0bff915 	stw	r2,-28(fp)
				break;
81109828:	0000b306 	br	81109af8 <vInAckHandlerTaskV2+0x34c>
            case sRAGettingACK:
                eReceiverAckState = sRAGettingACK;
8110982c:	00800044 	movi	r2,1
81109830:	e0bff915 	stw	r2,-28(fp)
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
81109834:	d0a05417 	ldw	r2,-32432(gp)
81109838:	e0fffe04 	addi	r3,fp,-8
8110983c:	180d883a 	mov	r6,r3
81109840:	000b883a 	mov	r5,zero
81109844:	1009883a 	mov	r4,r2
81109848:	1131b800 	call	81131b80 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
8110984c:	e0bffe03 	ldbu	r2,-8(fp)
81109850:	10803fcc 	andi	r2,r2,255
81109854:	1000391e 	bne	r2,zero,8110993c <vInAckHandlerTaskV2+0x190>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
81109858:	d0a05317 	ldw	r2,-32436(gp)
8110985c:	e0fffe04 	addi	r3,fp,-8
81109860:	180d883a 	mov	r6,r3
81109864:	000b883a 	mov	r5,zero
81109868:	1009883a 	mov	r4,r2
8110986c:	112fb740 	call	8112fb74 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81109870:	e0bffe03 	ldbu	r2,-8(fp)
81109874:	10803fcc 	andi	r2,r2,255
81109878:	10002b1e 	bne	r2,zero,81109928 <vInAckHandlerTaskV2+0x17c>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
8110987c:	e03ffa45 	stb	zero,-23(fp)
81109880:	00002206 	br	8110990c <vInAckHandlerTaskV2+0x160>
                        {
                            if ( xReceivedACK[i].cType != 0 ) {
81109884:	e0fffa43 	ldbu	r3,-23(fp)
81109888:	00a04574 	movhi	r2,33045
8110988c:	10bfb604 	addi	r2,r2,-296
81109890:	18c7883a 	add	r3,r3,r3
81109894:	18c7883a 	add	r3,r3,r3
81109898:	10c5883a 	add	r2,r2,r3
8110989c:	10800003 	ldbu	r2,0(r2)
811098a0:	10803fcc 	andi	r2,r2,255
811098a4:	1080201c 	xori	r2,r2,128
811098a8:	10bfe004 	addi	r2,r2,-128
811098ac:	10001426 	beq	r2,zero,81109900 <vInAckHandlerTaskV2+0x154>

                                /*  Nack don't get here */
                                xRAckLocal = xReceivedACK[i];
811098b0:	e0fffa43 	ldbu	r3,-23(fp)
811098b4:	00a04574 	movhi	r2,33045
811098b8:	10bfb604 	addi	r2,r2,-296
811098bc:	18c7883a 	add	r3,r3,r3
811098c0:	18c7883a 	add	r3,r3,r3
811098c4:	10c5883a 	add	r2,r2,r3
811098c8:	10c0000b 	ldhu	r3,0(r2)
811098cc:	d0e0488d 	sth	r3,-32478(gp)
811098d0:	1080008b 	ldhu	r2,2(r2)
811098d4:	d0a0490d 	sth	r2,-32476(gp)
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811098d8:	e0fffa43 	ldbu	r3,-23(fp)
811098dc:	00a04574 	movhi	r2,33045
811098e0:	10bfb604 	addi	r2,r2,-296
811098e4:	18c7883a 	add	r3,r3,r3
811098e8:	18c7883a 	add	r3,r3,r3
811098ec:	10c5883a 	add	r2,r2,r3
811098f0:	10000005 	stb	zero,0(r2)
                                eReceiverAckState = sRACleanningBuffer;
811098f4:	00800084 	movi	r2,2
811098f8:	e0bff915 	stw	r2,-28(fp)
                                break;                                
811098fc:	00000606 	br	81109918 <vInAckHandlerTaskV2+0x16c>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
81109900:	e0bffa43 	ldbu	r2,-23(fp)
81109904:	10800044 	addi	r2,r2,1
81109908:	e0bffa45 	stb	r2,-23(fp)
8110990c:	e0bffa43 	ldbu	r2,-23(fp)
81109910:	108001b0 	cmpltui	r2,r2,6
81109914:	103fdb1e 	bne	r2,zero,81109884 <__reset+0xfb0e9884>
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                eReceiverAckState = sRACleanningBuffer;
                                break;                                
                            }
                        }
                        OSMutexPost(xMutexReceivedACK);
81109918:	d0a05317 	ldw	r2,-32436(gp)
8110991c:	1009883a 	mov	r4,r2
81109920:	11301180 	call	81130118 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
81109924:	00007406 	br	81109af8 <vInAckHandlerTaskV2+0x34c>
                        OSMutexPost(xMutexReceivedACK);

                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                    	OSSemPost(xSemCountReceivedACK);
81109928:	d0a05417 	ldw	r2,-32432(gp)
8110992c:	1009883a 	mov	r4,r2
81109930:	1131f080 	call	81131f08 <OSSemPost>
                    	vFailGetMutexReceiverTask();
81109934:	110fd040 	call	8110fd04 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
81109938:	00006f06 	br	81109af8 <vInAckHandlerTaskV2+0x34c>
                    	vFailGetMutexReceiverTask();
                    }
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
8110993c:	110fc9c0 	call	8110fc9c <vFailGetCountSemaphoreReceiverTask>
                }
                break;
81109940:	00006d06 	br	81109af8 <vInAckHandlerTaskV2+0x34c>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */
                
                ucHashVerification = 0;
81109944:	e03ffa85 	stb	zero,-22(fp)
                ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);
81109948:	d0a05683 	ldbu	r2,-32422(gp)
8110994c:	10803fcc 	andi	r2,r2,255
81109950:	10800218 	cmpnei	r2,r2,8
81109954:	1000021e 	bne	r2,zero,81109960 <vInAckHandlerTaskV2+0x1b4>
81109958:	00c00104 	movi	r3,4
8110995c:	00000106 	br	81109964 <vInAckHandlerTaskV2+0x1b8>
81109960:	0007883a 	mov	r3,zero
81109964:	d0a05f03 	ldbu	r2,-32388(gp)
81109968:	10803fcc 	andi	r2,r2,255
8110996c:	10800218 	cmpnei	r2,r2,8
81109970:	1000021e 	bne	r2,zero,8110997c <vInAckHandlerTaskV2+0x1d0>
81109974:	00800084 	movi	r2,2
81109978:	00000106 	br	81109980 <vInAckHandlerTaskV2+0x1d4>
8110997c:	0005883a 	mov	r2,zero
81109980:	1884b03a 	or	r2,r3,r2
81109984:	1007883a 	mov	r3,r2
81109988:	d0a05f43 	ldbu	r2,-32387(gp)
8110998c:	10803fcc 	andi	r2,r2,255
81109990:	108001a0 	cmpeqi	r2,r2,6
81109994:	1884b03a 	or	r2,r3,r2
81109998:	1007883a 	mov	r3,r2
8110999c:	e0bffa83 	ldbu	r2,-22(fp)
811099a0:	1884b03a 	or	r2,r3,r2
811099a4:	e0bffa85 	stb	r2,-22(fp)

                bFound = FALSE;
811099a8:	e03ff815 	stw	zero,-32(fp)
                bFinished32=FALSE;
811099ac:	e03ffb15 	stw	zero,-20(fp)
                bFinished64=FALSE;
811099b0:	e03ffc15 	stw	zero,-16(fp)
                bFinished128=FALSE;
811099b4:	e03ffd15 	stw	zero,-12(fp)
                ucCountRetries = 0;
811099b8:	e03ffa05 	stb	zero,-24(fp)
                do
                {
                    ucCountRetries++;
811099bc:	e0bffa03 	ldbu	r2,-24(fp)
811099c0:	10800044 	addi	r2,r2,1
811099c4:	e0bffa05 	stb	r2,-24(fp)

                    /* There are any spot used in the xBuffer128? */
                    if ( 0b00000001 != (0b00000001 & ucHashVerification ) )
811099c8:	e0bffa83 	ldbu	r2,-22(fp)
811099cc:	1080004c 	andi	r2,r2,1
811099d0:	10803fcc 	andi	r2,r2,255
811099d4:	1000061e 	bne	r2,zero,811099f0 <vInAckHandlerTaskV2+0x244>
                        bFound = bCheckInAck128( &xRAckLocal, &bFinished128  );
811099d8:	e0bffd04 	addi	r2,fp,-12
811099dc:	100b883a 	mov	r5,r2
811099e0:	d1204884 	addi	r4,gp,-32478
811099e4:	1109afc0 	call	81109afc <bCheckInAck128>
811099e8:	e0bff815 	stw	r2,-32(fp)
811099ec:	00000206 	br	811099f8 <vInAckHandlerTaskV2+0x24c>
                    else
                        bFinished128 = TRUE;
811099f0:	00800044 	movi	r2,1
811099f4:	e0bffd15 	stw	r2,-12(fp)

                    /* There are any spot used in the xBuffer64? */
                    if ( (0b00000010 != (0b00000010 & ucHashVerification )) && (bFound ==FALSE ) )
811099f8:	e0bffa83 	ldbu	r2,-22(fp)
811099fc:	1080008c 	andi	r2,r2,2
81109a00:	10803fcc 	andi	r2,r2,255
81109a04:	1000081e 	bne	r2,zero,81109a28 <vInAckHandlerTaskV2+0x27c>
81109a08:	e0bff817 	ldw	r2,-32(fp)
81109a0c:	1000061e 	bne	r2,zero,81109a28 <vInAckHandlerTaskV2+0x27c>
                        bFound = bCheckInAck64( &xRAckLocal, &bFinished64 );
81109a10:	e0bffc04 	addi	r2,fp,-16
81109a14:	100b883a 	mov	r5,r2
81109a18:	d1204884 	addi	r4,gp,-32478
81109a1c:	1109c440 	call	81109c44 <bCheckInAck64>
81109a20:	e0bff815 	stw	r2,-32(fp)
81109a24:	00000206 	br	81109a30 <vInAckHandlerTaskV2+0x284>
                    else
                        bFinished64 = TRUE;
81109a28:	00800044 	movi	r2,1
81109a2c:	e0bffc15 	stw	r2,-16(fp)

                    /* There are any spot used in the xBuffer32? */
                    if ( (0b00000100 != (0b00000100 & ucHashVerification ) ) && (bFound ==FALSE ) )
81109a30:	e0bffa83 	ldbu	r2,-22(fp)
81109a34:	1080010c 	andi	r2,r2,4
81109a38:	10803fcc 	andi	r2,r2,255
81109a3c:	1000081e 	bne	r2,zero,81109a60 <vInAckHandlerTaskV2+0x2b4>
81109a40:	e0bff817 	ldw	r2,-32(fp)
81109a44:	1000061e 	bne	r2,zero,81109a60 <vInAckHandlerTaskV2+0x2b4>
                        bFound = bCheckInAck32( &xRAckLocal, &bFinished32  );
81109a48:	e0bffb04 	addi	r2,fp,-20
81109a4c:	100b883a 	mov	r5,r2
81109a50:	d1204884 	addi	r4,gp,-32478
81109a54:	1109d900 	call	81109d90 <bCheckInAck32>
81109a58:	e0bff815 	stw	r2,-32(fp)
81109a5c:	00000206 	br	81109a68 <vInAckHandlerTaskV2+0x2bc>
                    else
                        bFinished32 = TRUE;
81109a60:	00800044 	movi	r2,1
81109a64:	e0bffb15 	stw	r2,-20(fp)

                } while ( ((ucCountRetries++ < MAX_RETRIES_ACK_IN) && (bFound == FALSE) && ((bFinished32 == FALSE) | (bFinished64 == FALSE) | (bFinished128 == FALSE))) );
81109a68:	e0bffa03 	ldbu	r2,-24(fp)
81109a6c:	10c00044 	addi	r3,r2,1
81109a70:	e0fffa05 	stb	r3,-24(fp)
81109a74:	10803fcc 	andi	r2,r2,255
81109a78:	10800ca8 	cmpgeui	r2,r2,50
81109a7c:	10000e1e 	bne	r2,zero,81109ab8 <vInAckHandlerTaskV2+0x30c>
81109a80:	e0bff817 	ldw	r2,-32(fp)
81109a84:	10000c1e 	bne	r2,zero,81109ab8 <vInAckHandlerTaskV2+0x30c>
81109a88:	e0bffb17 	ldw	r2,-20(fp)
81109a8c:	1005003a 	cmpeq	r2,r2,zero
81109a90:	1007883a 	mov	r3,r2
81109a94:	e0bffc17 	ldw	r2,-16(fp)
81109a98:	1005003a 	cmpeq	r2,r2,zero
81109a9c:	1884b03a 	or	r2,r3,r2
81109aa0:	10c03fcc 	andi	r3,r2,255
81109aa4:	e0bffd17 	ldw	r2,-12(fp)
81109aa8:	1005003a 	cmpeq	r2,r2,zero
81109aac:	10803fcc 	andi	r2,r2,255
81109ab0:	1884b03a 	or	r2,r3,r2
81109ab4:	103fc11e 	bne	r2,zero,811099bc <__reset+0xfb0e99bc>
                
                if (bFound == FALSE) {
81109ab8:	e0bff817 	ldw	r2,-32(fp)
81109abc:	1000011e 	bne	r2,zero,81109ac4 <vInAckHandlerTaskV2+0x318>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81109ac0:	11101c00 	call	811101c0 <vFailFoundBufferRetransmission>
                }

                eReceiverAckState = sRAGettingACK;
81109ac4:	00800044 	movi	r2,1
81109ac8:	e0bff915 	stw	r2,-28(fp)
				break;
81109acc:	00000a06 	br	81109af8 <vInAckHandlerTaskV2+0x34c>
			default:
                #ifdef DEBUG_ON
		            debug(fp,"Critical: Default State. Should never get here.(vInAckHandlerTaskV2)\n");
81109ad0:	d0a05017 	ldw	r2,-32448(gp)
81109ad4:	100f883a 	mov	r7,r2
81109ad8:	01801144 	movi	r6,69
81109adc:	01400044 	movi	r5,1
81109ae0:	01204534 	movhi	r4,33044
81109ae4:	213f6104 	addi	r4,r4,-636
81109ae8:	111405c0 	call	8111405c <fwrite>
	            #endif
                eReceiverAckState = sRAGettingACK;
81109aec:	00800044 	movi	r2,1
81109af0:	e0bff915 	stw	r2,-28(fp)
				break;
81109af4:	0001883a 	nop
		}
	}
81109af8:	003f4206 	br	81109804 <__reset+0xfb0e9804>

81109afc <bCheckInAck128>:
}


bool bCheckInAck128( txReceivedACK *xRecAckL , bool *bFinished ) {
81109afc:	defffa04 	addi	sp,sp,-24
81109b00:	de00012e 	bgeu	sp,et,81109b08 <bCheckInAck128+0xc>
81109b04:	003b68fa 	trap	3
81109b08:	dfc00515 	stw	ra,20(sp)
81109b0c:	df000415 	stw	fp,16(sp)
81109b10:	df000404 	addi	fp,sp,16
81109b14:	e13ffe15 	stw	r4,-8(fp)
81109b18:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81109b1c:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81109b20:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81109b24:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81109b28:	e0bfff17 	ldw	r2,-4(fp)
81109b2c:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer128, 5, &error_code); /* Mas wait 1 tick = 1 ms */
81109b30:	d0a05a17 	ldw	r2,-32408(gp)
81109b34:	e0fffd44 	addi	r3,fp,-11
81109b38:	180d883a 	mov	r6,r3
81109b3c:	01400144 	movi	r5,5
81109b40:	1009883a 	mov	r4,r2
81109b44:	112fb740 	call	8112fb74 <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81109b48:	e0bffd43 	ldbu	r2,-11(fp)
81109b4c:	10803fcc 	andi	r2,r2,255
81109b50:	10000226 	beq	r2,zero,81109b5c <bCheckInAck128+0x60>
        return bFound;
81109b54:	e0bffc17 	ldw	r2,-16(fp)
81109b58:	00003506 	br	81109c30 <bCheckInAck128+0x134>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_128; ucIL++)
81109b5c:	e03ffd05 	stb	zero,-12(fp)
81109b60:	00002706 	br	81109c00 <bCheckInAck128+0x104>
    {
        if ( xBuffer128[ucIL].usiId == xRecAckL->usiId ) {
81109b64:	e0fffd03 	ldbu	r3,-12(fp)
81109b68:	00a04574 	movhi	r2,33045
81109b6c:	10b8d604 	addi	r2,r2,-7336
81109b70:	18c02324 	muli	r3,r3,140
81109b74:	10c5883a 	add	r2,r2,r3
81109b78:	10802104 	addi	r2,r2,132
81109b7c:	10c0000b 	ldhu	r3,0(r2)
81109b80:	e0bffe17 	ldw	r2,-8(fp)
81109b84:	1080008b 	ldhu	r2,2(r2)
81109b88:	18ffffcc 	andi	r3,r3,65535
81109b8c:	10bfffcc 	andi	r2,r2,65535
81109b90:	1880181e 	bne	r3,r2,81109bf4 <bCheckInAck128+0xf8>
            bFound = TRUE;
81109b94:	00800044 	movi	r2,1
81109b98:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b128[ucIL] = FALSE;
81109b9c:	e0fffd03 	ldbu	r3,-12(fp)
81109ba0:	00a04574 	movhi	r2,33045
81109ba4:	10b8c004 	addi	r2,r2,-7424
81109ba8:	18c7883a 	add	r3,r3,r3
81109bac:	18c7883a 	add	r3,r3,r3
81109bb0:	10c5883a 	add	r2,r2,r3
81109bb4:	10000015 	stw	zero,0(r2)
            SemCount128++;
81109bb8:	d0a05f43 	ldbu	r2,-32387(gp)
81109bbc:	10800044 	addi	r2,r2,1
81109bc0:	d0a05f45 	stb	r2,-32387(gp)
            error_code = OSSemPost(xSemCountBuffer128);
81109bc4:	d0a05117 	ldw	r2,-32444(gp)
81109bc8:	1009883a 	mov	r4,r2
81109bcc:	1131f080 	call	81131f08 <OSSemPost>
81109bd0:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81109bd4:	e0bffd43 	ldbu	r2,-11(fp)
81109bd8:	10803fcc 	andi	r2,r2,255
81109bdc:	10000c26 	beq	r2,zero,81109c10 <bCheckInAck128+0x114>
                SemCount128--;
81109be0:	d0a05f43 	ldbu	r2,-32387(gp)
81109be4:	10bfffc4 	addi	r2,r2,-1
81109be8:	d0a05f45 	stb	r2,-32387(gp)
                vFailSetCountSemaphorexBuffer128();
81109bec:	11100200 	call	81110020 <vFailSetCountSemaphorexBuffer128>
            }
            break;
81109bf0:	00000706 	br	81109c10 <bCheckInAck128+0x114>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_128; ucIL++)
81109bf4:	e0bffd03 	ldbu	r2,-12(fp)
81109bf8:	10800044 	addi	r2,r2,1
81109bfc:	e0bffd05 	stb	r2,-12(fp)
81109c00:	e0bffd03 	ldbu	r2,-12(fp)
81109c04:	108001b0 	cmpltui	r2,r2,6
81109c08:	103fd61e 	bne	r2,zero,81109b64 <__reset+0xfb0e9b64>
81109c0c:	00000106 	br	81109c14 <bCheckInAck128+0x118>
            error_code = OSSemPost(xSemCountBuffer128);
            if ( error_code != OS_ERR_NONE ) {
                SemCount128--;
                vFailSetCountSemaphorexBuffer128();
            }
            break;
81109c10:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81109c14:	d0a05a17 	ldw	r2,-32408(gp)
81109c18:	1009883a 	mov	r4,r2
81109c1c:	11301180 	call	81130118 <OSMutexPost>
    (*bFinished) = TRUE;
81109c20:	e0bfff17 	ldw	r2,-4(fp)
81109c24:	00c00044 	movi	r3,1
81109c28:	10c00015 	stw	r3,0(r2)

    return bFound;
81109c2c:	e0bffc17 	ldw	r2,-16(fp)
}
81109c30:	e037883a 	mov	sp,fp
81109c34:	dfc00117 	ldw	ra,4(sp)
81109c38:	df000017 	ldw	fp,0(sp)
81109c3c:	dec00204 	addi	sp,sp,8
81109c40:	f800283a 	ret

81109c44 <bCheckInAck64>:


bool bCheckInAck64( txReceivedACK *xRecAckL , bool *bFinished ) {
81109c44:	defffa04 	addi	sp,sp,-24
81109c48:	de00012e 	bgeu	sp,et,81109c50 <bCheckInAck64+0xc>
81109c4c:	003b68fa 	trap	3
81109c50:	dfc00515 	stw	ra,20(sp)
81109c54:	df000415 	stw	fp,16(sp)
81109c58:	df000404 	addi	fp,sp,16
81109c5c:	e13ffe15 	stw	r4,-8(fp)
81109c60:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81109c64:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81109c68:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81109c6c:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81109c70:	e0bfff17 	ldw	r2,-4(fp)
81109c74:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer64, 1, &error_code); /* Mas wait 1 tick = 1 ms */
81109c78:	d0a05c17 	ldw	r2,-32400(gp)
81109c7c:	e0fffd44 	addi	r3,fp,-11
81109c80:	180d883a 	mov	r6,r3
81109c84:	01400044 	movi	r5,1
81109c88:	1009883a 	mov	r4,r2
81109c8c:	112fb740 	call	8112fb74 <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81109c90:	e0bffd43 	ldbu	r2,-11(fp)
81109c94:	10803fcc 	andi	r2,r2,255
81109c98:	10000226 	beq	r2,zero,81109ca4 <bCheckInAck64+0x60>
        return bFound;
81109c9c:	e0bffc17 	ldw	r2,-16(fp)
81109ca0:	00003606 	br	81109d7c <bCheckInAck64+0x138>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_64; ucIL++)
81109ca4:	e03ffd05 	stb	zero,-12(fp)
81109ca8:	00002806 	br	81109d4c <bCheckInAck64+0x108>
    {
        if ( xBuffer64[ucIL].usiId == xRecAckL->usiId ) {
81109cac:	e0fffd03 	ldbu	r3,-12(fp)
81109cb0:	00a04534 	movhi	r2,33044
81109cb4:	109a9404 	addi	r2,r2,27216
81109cb8:	18c01324 	muli	r3,r3,76
81109cbc:	10c5883a 	add	r2,r2,r3
81109cc0:	10801104 	addi	r2,r2,68
81109cc4:	10c0000b 	ldhu	r3,0(r2)
81109cc8:	e0bffe17 	ldw	r2,-8(fp)
81109ccc:	1080008b 	ldhu	r2,2(r2)
81109cd0:	18ffffcc 	andi	r3,r3,65535
81109cd4:	10bfffcc 	andi	r2,r2,65535
81109cd8:	1880191e 	bne	r3,r2,81109d40 <bCheckInAck64+0xfc>
            bFound = TRUE;
81109cdc:	00800044 	movi	r2,1
81109ce0:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b64[ucIL] = FALSE;
81109ce4:	e0fffd03 	ldbu	r3,-12(fp)
81109ce8:	00a04574 	movhi	r2,33045
81109cec:	10b8c004 	addi	r2,r2,-7424
81109cf0:	18c00184 	addi	r3,r3,6
81109cf4:	18c7883a 	add	r3,r3,r3
81109cf8:	18c7883a 	add	r3,r3,r3
81109cfc:	10c5883a 	add	r2,r2,r3
81109d00:	10000015 	stw	zero,0(r2)
            SemCount64++;
81109d04:	d0a05f03 	ldbu	r2,-32388(gp)
81109d08:	10800044 	addi	r2,r2,1
81109d0c:	d0a05f05 	stb	r2,-32388(gp)
            error_code = OSSemPost(xSemCountBuffer64);
81109d10:	d0a04d17 	ldw	r2,-32460(gp)
81109d14:	1009883a 	mov	r4,r2
81109d18:	1131f080 	call	81131f08 <OSSemPost>
81109d1c:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81109d20:	e0bffd43 	ldbu	r2,-11(fp)
81109d24:	10803fcc 	andi	r2,r2,255
81109d28:	10000c26 	beq	r2,zero,81109d5c <bCheckInAck64+0x118>
                SemCount64--;
81109d2c:	d0a05f03 	ldbu	r2,-32388(gp)
81109d30:	10bfffc4 	addi	r2,r2,-1
81109d34:	d0a05f05 	stb	r2,-32388(gp)
                vFailSetCountSemaphorexBuffer64();
81109d38:	110ffb80 	call	8110ffb8 <vFailSetCountSemaphorexBuffer64>
            }
            break;
81109d3c:	00000706 	br	81109d5c <bCheckInAck64+0x118>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_64; ucIL++)
81109d40:	e0bffd03 	ldbu	r2,-12(fp)
81109d44:	10800044 	addi	r2,r2,1
81109d48:	e0bffd05 	stb	r2,-12(fp)
81109d4c:	e0bffd03 	ldbu	r2,-12(fp)
81109d50:	10800230 	cmpltui	r2,r2,8
81109d54:	103fd51e 	bne	r2,zero,81109cac <__reset+0xfb0e9cac>
81109d58:	00000106 	br	81109d60 <bCheckInAck64+0x11c>
            error_code = OSSemPost(xSemCountBuffer64);
            if ( error_code != OS_ERR_NONE ) {
                SemCount64--;
                vFailSetCountSemaphorexBuffer64();
            }
            break;
81109d5c:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer128*/
81109d60:	d0a05c17 	ldw	r2,-32400(gp)
81109d64:	1009883a 	mov	r4,r2
81109d68:	11301180 	call	81130118 <OSMutexPost>
    (*bFinished) = TRUE;
81109d6c:	e0bfff17 	ldw	r2,-4(fp)
81109d70:	00c00044 	movi	r3,1
81109d74:	10c00015 	stw	r3,0(r2)

    return bFound;
81109d78:	e0bffc17 	ldw	r2,-16(fp)
}
81109d7c:	e037883a 	mov	sp,fp
81109d80:	dfc00117 	ldw	ra,4(sp)
81109d84:	df000017 	ldw	fp,0(sp)
81109d88:	dec00204 	addi	sp,sp,8
81109d8c:	f800283a 	ret

81109d90 <bCheckInAck32>:



bool bCheckInAck32( txReceivedACK *xRecAckL , bool *bFinished ) {
81109d90:	defffa04 	addi	sp,sp,-24
81109d94:	de00012e 	bgeu	sp,et,81109d9c <bCheckInAck32+0xc>
81109d98:	003b68fa 	trap	3
81109d9c:	dfc00515 	stw	ra,20(sp)
81109da0:	df000415 	stw	fp,16(sp)
81109da4:	df000404 	addi	fp,sp,16
81109da8:	e13ffe15 	stw	r4,-8(fp)
81109dac:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81109db0:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81109db4:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81109db8:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81109dbc:	e0bfff17 	ldw	r2,-4(fp)
81109dc0:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer32, 1, &error_code); /* Mas wait 1 tick = 1 ms */
81109dc4:	d0a05817 	ldw	r2,-32416(gp)
81109dc8:	e0fffd44 	addi	r3,fp,-11
81109dcc:	180d883a 	mov	r6,r3
81109dd0:	01400044 	movi	r5,1
81109dd4:	1009883a 	mov	r4,r2
81109dd8:	112fb740 	call	8112fb74 <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81109ddc:	e0bffd43 	ldbu	r2,-11(fp)
81109de0:	10803fcc 	andi	r2,r2,255
81109de4:	10000226 	beq	r2,zero,81109df0 <bCheckInAck32+0x60>
        return bFound;
81109de8:	e0bffc17 	ldw	r2,-16(fp)
81109dec:	00003606 	br	81109ec8 <bCheckInAck32+0x138>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_32; ucIL++)
81109df0:	e03ffd05 	stb	zero,-12(fp)
81109df4:	00002806 	br	81109e98 <bCheckInAck32+0x108>
    {
        if ( xBuffer32[ucIL].usiId == xRecAckL->usiId ) {
81109df8:	e0fffd03 	ldbu	r3,-12(fp)
81109dfc:	00a04574 	movhi	r2,33045
81109e00:	10a86404 	addi	r2,r2,-24176
81109e04:	18c00b24 	muli	r3,r3,44
81109e08:	10c5883a 	add	r2,r2,r3
81109e0c:	10800904 	addi	r2,r2,36
81109e10:	10c0000b 	ldhu	r3,0(r2)
81109e14:	e0bffe17 	ldw	r2,-8(fp)
81109e18:	1080008b 	ldhu	r2,2(r2)
81109e1c:	18ffffcc 	andi	r3,r3,65535
81109e20:	10bfffcc 	andi	r2,r2,65535
81109e24:	1880191e 	bne	r3,r2,81109e8c <bCheckInAck32+0xfc>
            bFound = TRUE;
81109e28:	00800044 	movi	r2,1
81109e2c:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b32[ucIL] = FALSE;
81109e30:	e0fffd03 	ldbu	r3,-12(fp)
81109e34:	00a04574 	movhi	r2,33045
81109e38:	10b8c004 	addi	r2,r2,-7424
81109e3c:	18c00384 	addi	r3,r3,14
81109e40:	18c7883a 	add	r3,r3,r3
81109e44:	18c7883a 	add	r3,r3,r3
81109e48:	10c5883a 	add	r2,r2,r3
81109e4c:	10000015 	stw	zero,0(r2)
            SemCount32++;
81109e50:	d0a05683 	ldbu	r2,-32422(gp)
81109e54:	10800044 	addi	r2,r2,1
81109e58:	d0a05685 	stb	r2,-32422(gp)
            error_code = OSSemPost(xSemCountBuffer32);
81109e5c:	d0a05b17 	ldw	r2,-32404(gp)
81109e60:	1009883a 	mov	r4,r2
81109e64:	1131f080 	call	81131f08 <OSSemPost>
81109e68:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81109e6c:	e0bffd43 	ldbu	r2,-11(fp)
81109e70:	10803fcc 	andi	r2,r2,255
81109e74:	10000c26 	beq	r2,zero,81109ea8 <bCheckInAck32+0x118>
                SemCount32--;
81109e78:	d0a05683 	ldbu	r2,-32422(gp)
81109e7c:	10bfffc4 	addi	r2,r2,-1
81109e80:	d0a05685 	stb	r2,-32422(gp)
                vFailSetCountSemaphorexBuffer32();
81109e84:	110ff500 	call	8110ff50 <vFailSetCountSemaphorexBuffer32>
            }
            break;
81109e88:	00000706 	br	81109ea8 <bCheckInAck32+0x118>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_32; ucIL++)
81109e8c:	e0bffd03 	ldbu	r2,-12(fp)
81109e90:	10800044 	addi	r2,r2,1
81109e94:	e0bffd05 	stb	r2,-12(fp)
81109e98:	e0bffd03 	ldbu	r2,-12(fp)
81109e9c:	10800230 	cmpltui	r2,r2,8
81109ea0:	103fd51e 	bne	r2,zero,81109df8 <__reset+0xfb0e9df8>
81109ea4:	00000106 	br	81109eac <bCheckInAck32+0x11c>
            error_code = OSSemPost(xSemCountBuffer32);
            if ( error_code != OS_ERR_NONE ) {
                SemCount32--;
                vFailSetCountSemaphorexBuffer32();
            }
            break;
81109ea8:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xMutexBuffer32*/
81109eac:	d0a05817 	ldw	r2,-32416(gp)
81109eb0:	1009883a 	mov	r4,r2
81109eb4:	11301180 	call	81130118 <OSMutexPost>
    (*bFinished) = TRUE;
81109eb8:	e0bfff17 	ldw	r2,-4(fp)
81109ebc:	00c00044 	movi	r3,1
81109ec0:	10c00015 	stw	r3,0(r2)

    return bFound;
81109ec4:	e0bffc17 	ldw	r2,-16(fp)
}
81109ec8:	e037883a 	mov	sp,fp
81109ecc:	dfc00117 	ldw	ra,4(sp)
81109ed0:	df000017 	ldw	fp,0(sp)
81109ed4:	dec00204 	addi	sp,sp,8
81109ed8:	f800283a 	ret

81109edc <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81109edc:	defff704 	addi	sp,sp,-36
81109ee0:	de00012e 	bgeu	sp,et,81109ee8 <vInitialTask+0xc>
81109ee4:	003b68fa 	trap	3
81109ee8:	dfc00815 	stw	ra,32(sp)
81109eec:	df000715 	stw	fp,28(sp)
81109ef0:	df000704 	addi	fp,sp,28
81109ef4:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81109ef8:	e03ffe05 	stb	zero,-8(fp)
									vFeeTask0_stk,
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[0],
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
81109efc:	d8000415 	stw	zero,16(sp)
81109f00:	00a04574 	movhi	r2,33045
81109f04:	10a55a04 	addi	r2,r2,-27288
81109f08:	d8800315 	stw	r2,12(sp)
81109f0c:	00808004 	movi	r2,512
81109f10:	d8800215 	stw	r2,8(sp)
81109f14:	00a04534 	movhi	r2,33044
81109f18:	10949404 	addi	r2,r2,21072
81109f1c:	d8800115 	stw	r2,4(sp)
81109f20:	00800244 	movi	r2,9
81109f24:	d8800015 	stw	r2,0(sp)
81109f28:	01c00244 	movi	r7,9
81109f2c:	01a04534 	movhi	r6,33044
81109f30:	31969304 	addi	r6,r6,23116
81109f34:	000b883a 	mov	r5,zero
81109f38:	01204474 	movhi	r4,33041
81109f3c:	2121ec04 	addi	r4,r4,-30800
81109f40:	11328ec0 	call	811328ec <OSTaskCreateExt>
81109f44:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[0],
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
81109f48:	e0bffe03 	ldbu	r2,-8(fp)
81109f4c:	10803fcc 	andi	r2,r2,255
81109f50:	10000526 	beq	r2,zero,81109f68 <vInitialTask+0x8c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81109f54:	e0bffe03 	ldbu	r2,-8(fp)
81109f58:	10803fcc 	andi	r2,r2,255
81109f5c:	1009883a 	mov	r4,r2
81109f60:	110f9180 	call	8110f918 <printErrorTask>
		#endif
			vCoudlNotCreateNFee0Task();
81109f64:	1110ca00 	call	81110ca0 <vCoudlNotCreateNFee0Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
81109f68:	01c07d04 	movi	r7,500
81109f6c:	000d883a 	mov	r6,zero
81109f70:	000b883a 	mov	r5,zero
81109f74:	0009883a 	mov	r4,zero
81109f78:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vFeeTask1_stk,
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[1],
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
81109f7c:	d8000415 	stw	zero,16(sp)
81109f80:	00a04574 	movhi	r2,33045
81109f84:	10a58504 	addi	r2,r2,-27116
81109f88:	d8800315 	stw	r2,12(sp)
81109f8c:	00808004 	movi	r2,512
81109f90:	d8800215 	stw	r2,8(sp)
81109f94:	00a04574 	movhi	r2,33045
81109f98:	10bfbc04 	addi	r2,r2,-272
81109f9c:	d8800115 	stw	r2,4(sp)
81109fa0:	00800284 	movi	r2,10
81109fa4:	d8800015 	stw	r2,0(sp)
81109fa8:	01c00284 	movi	r7,10
81109fac:	01a04574 	movhi	r6,33045
81109fb0:	3181bb04 	addi	r6,r6,1772
81109fb4:	000b883a 	mov	r5,zero
81109fb8:	01204474 	movhi	r4,33041
81109fbc:	2121ec04 	addi	r4,r4,-30800
81109fc0:	11328ec0 	call	811328ec <OSTaskCreateExt>
81109fc4:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[1],
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
81109fc8:	e0bffe03 	ldbu	r2,-8(fp)
81109fcc:	10803fcc 	andi	r2,r2,255
81109fd0:	10000526 	beq	r2,zero,81109fe8 <vInitialTask+0x10c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81109fd4:	e0bffe03 	ldbu	r2,-8(fp)
81109fd8:	10803fcc 	andi	r2,r2,255
81109fdc:	1009883a 	mov	r4,r2
81109fe0:	110f9180 	call	8110f918 <printErrorTask>
		#endif
			vCoudlNotCreateNFee1Task();
81109fe4:	1110d080 	call	81110d08 <vCoudlNotCreateNFee1Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
81109fe8:	01c07d04 	movi	r7,500
81109fec:	000d883a 	mov	r6,zero
81109ff0:	000b883a 	mov	r5,zero
81109ff4:	0009883a 	mov	r4,zero
81109ff8:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vFeeTask2_stk,
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[2],
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
81109ffc:	d8000415 	stw	zero,16(sp)
8110a000:	00a04574 	movhi	r2,33045
8110a004:	10a5b004 	addi	r2,r2,-26944
8110a008:	d8800315 	stw	r2,12(sp)
8110a00c:	00808004 	movi	r2,512
8110a010:	d8800215 	stw	r2,8(sp)
8110a014:	00a04574 	movhi	r2,33045
8110a018:	1089bc04 	addi	r2,r2,9968
8110a01c:	d8800115 	stw	r2,4(sp)
8110a020:	008002c4 	movi	r2,11
8110a024:	d8800015 	stw	r2,0(sp)
8110a028:	01c002c4 	movi	r7,11
8110a02c:	01a04574 	movhi	r6,33045
8110a030:	318bbb04 	addi	r6,r6,12012
8110a034:	000b883a 	mov	r5,zero
8110a038:	01204474 	movhi	r4,33041
8110a03c:	2121ec04 	addi	r4,r4,-30800
8110a040:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a044:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[2],
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a048:	e0bffe03 	ldbu	r2,-8(fp)
8110a04c:	10803fcc 	andi	r2,r2,255
8110a050:	10000526 	beq	r2,zero,8110a068 <vInitialTask+0x18c>
		//* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a054:	e0bffe03 	ldbu	r2,-8(fp)
8110a058:	10803fcc 	andi	r2,r2,255
8110a05c:	1009883a 	mov	r4,r2
8110a060:	110f9180 	call	8110f918 <printErrorTask>
		#endif
			vCoudlNotCreateNFee2Task();
8110a064:	1110d700 	call	81110d70 <vCoudlNotCreateNFee2Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a068:	01c07d04 	movi	r7,500
8110a06c:	000d883a 	mov	r6,zero
8110a070:	000b883a 	mov	r5,zero
8110a074:	0009883a 	mov	r4,zero
8110a078:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vFeeTask3_stk,
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[3],
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
8110a07c:	d8000415 	stw	zero,16(sp)
8110a080:	00a04574 	movhi	r2,33045
8110a084:	10a5db04 	addi	r2,r2,-26772
8110a088:	d8800315 	stw	r2,12(sp)
8110a08c:	00808004 	movi	r2,512
8110a090:	d8800215 	stw	r2,8(sp)
8110a094:	00a04574 	movhi	r2,33045
8110a098:	1087bc04 	addi	r2,r2,7920
8110a09c:	d8800115 	stw	r2,4(sp)
8110a0a0:	00800304 	movi	r2,12
8110a0a4:	d8800015 	stw	r2,0(sp)
8110a0a8:	01c00304 	movi	r7,12
8110a0ac:	01a04574 	movhi	r6,33045
8110a0b0:	3189bb04 	addi	r6,r6,9964
8110a0b4:	000b883a 	mov	r5,zero
8110a0b8:	01204474 	movhi	r4,33041
8110a0bc:	2121ec04 	addi	r4,r4,-30800
8110a0c0:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a0c4:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[3],
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a0c8:	e0bffe03 	ldbu	r2,-8(fp)
8110a0cc:	10803fcc 	andi	r2,r2,255
8110a0d0:	10000526 	beq	r2,zero,8110a0e8 <vInitialTask+0x20c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a0d4:	e0bffe03 	ldbu	r2,-8(fp)
8110a0d8:	10803fcc 	andi	r2,r2,255
8110a0dc:	1009883a 	mov	r4,r2
8110a0e0:	110f9180 	call	8110f918 <printErrorTask>
		#endif
			vCoudlNotCreateNFee3Task();
8110a0e4:	1110dd80 	call	81110dd8 <vCoudlNotCreateNFee3Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a0e8:	01c07d04 	movi	r7,500
8110a0ec:	000d883a 	mov	r6,zero
8110a0f0:	000b883a 	mov	r5,zero
8110a0f4:	0009883a 	mov	r4,zero
8110a0f8:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vFeeTask4_stk,
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[4],
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
8110a0fc:	d8000415 	stw	zero,16(sp)
8110a100:	00a04574 	movhi	r2,33045
8110a104:	10a60604 	addi	r2,r2,-26600
8110a108:	d8800315 	stw	r2,12(sp)
8110a10c:	00808004 	movi	r2,512
8110a110:	d8800215 	stw	r2,8(sp)
8110a114:	00a04574 	movhi	r2,33045
8110a118:	10bdb604 	addi	r2,r2,-2344
8110a11c:	d8800115 	stw	r2,4(sp)
8110a120:	00800344 	movi	r2,13
8110a124:	d8800015 	stw	r2,0(sp)
8110a128:	01c00344 	movi	r7,13
8110a12c:	01a04574 	movhi	r6,33045
8110a130:	31bfb504 	addi	r6,r6,-300
8110a134:	000b883a 	mov	r5,zero
8110a138:	01204474 	movhi	r4,33041
8110a13c:	2121ec04 	addi	r4,r4,-30800
8110a140:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a144:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[4],
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a148:	e0bffe03 	ldbu	r2,-8(fp)
8110a14c:	10803fcc 	andi	r2,r2,255
8110a150:	10000526 	beq	r2,zero,8110a168 <vInitialTask+0x28c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a154:	e0bffe03 	ldbu	r2,-8(fp)
8110a158:	10803fcc 	andi	r2,r2,255
8110a15c:	1009883a 	mov	r4,r2
8110a160:	110f9180 	call	8110f918 <printErrorTask>
		#endif
			vCoudlNotCreateNFee4Task();
8110a164:	1110e400 	call	81110e40 <vCoudlNotCreateNFee4Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a168:	01c07d04 	movi	r7,500
8110a16c:	000d883a 	mov	r6,zero
8110a170:	000b883a 	mov	r5,zero
8110a174:	0009883a 	mov	r4,zero
8110a178:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vFeeTask5_stk,
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[5],
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vFeeTask,
8110a17c:	d8000415 	stw	zero,16(sp)
8110a180:	00a04574 	movhi	r2,33045
8110a184:	10a63104 	addi	r2,r2,-26428
8110a188:	d8800315 	stw	r2,12(sp)
8110a18c:	00808004 	movi	r2,512
8110a190:	d8800215 	stw	r2,8(sp)
8110a194:	00a04574 	movhi	r2,33045
8110a198:	10a66404 	addi	r2,r2,-26224
8110a19c:	d8800115 	stw	r2,4(sp)
8110a1a0:	00800384 	movi	r2,14
8110a1a4:	d8800015 	stw	r2,0(sp)
8110a1a8:	01c00384 	movi	r7,14
8110a1ac:	01a04574 	movhi	r6,33045
8110a1b0:	31a86304 	addi	r6,r6,-24180
8110a1b4:	000b883a 	mov	r5,zero
8110a1b8:	01204474 	movhi	r4,33041
8110a1bc:	2121ec04 	addi	r4,r4,-30800
8110a1c0:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a1c4:	e0bffe05 	stb	r2,-8(fp)
									FEES_STACK_SIZE,
									&xSimMeb.xFeeControl.xNfee[5],
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a1c8:	e0bffe03 	ldbu	r2,-8(fp)
8110a1cc:	10803fcc 	andi	r2,r2,255
8110a1d0:	10000526 	beq	r2,zero,8110a1e8 <vInitialTask+0x30c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a1d4:	e0bffe03 	ldbu	r2,-8(fp)
8110a1d8:	10803fcc 	andi	r2,r2,255
8110a1dc:	1009883a 	mov	r4,r2
8110a1e0:	110f9180 	call	8110f918 <printErrorTask>
		#endif
			vCoudlNotCreateNFee5Task();
8110a1e4:	1110ea80 	call	81110ea8 <vCoudlNotCreateNFee5Task>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a1e8:	01c07d04 	movi	r7,500
8110a1ec:	000d883a 	mov	r6,zero
8110a1f0:	000b883a 	mov	r5,zero
8110a1f4:	0009883a 	mov	r4,zero
8110a1f8:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vDataControlTask_stk,
									DATA_CONTROL_STACK_SIZE,
									&xSimMeb.xDataControl,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vDataControlTask,
8110a1fc:	d8000415 	stw	zero,16(sp)
8110a200:	00a04574 	movhi	r2,33045
8110a204:	10a54304 	addi	r2,r2,-27380
8110a208:	d8800315 	stw	r2,12(sp)
8110a20c:	00808004 	movi	r2,512
8110a210:	d8800215 	stw	r2,8(sp)
8110a214:	00a04574 	movhi	r2,33045
8110a218:	10a33c04 	addi	r2,r2,-29456
8110a21c:	d8800115 	stw	r2,4(sp)
8110a220:	00800204 	movi	r2,8
8110a224:	d8800015 	stw	r2,0(sp)
8110a228:	01c00204 	movi	r7,8
8110a22c:	01a04574 	movhi	r6,33045
8110a230:	31a53b04 	addi	r6,r6,-27412
8110a234:	000b883a 	mov	r5,zero
8110a238:	01204474 	movhi	r4,33041
8110a23c:	2121d404 	addi	r4,r4,-30896
8110a240:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a244:	e0bffe05 	stb	r2,-8(fp)
									DATA_CONTROL_STACK_SIZE,
									&xSimMeb.xDataControl,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a248:	e0bffe03 	ldbu	r2,-8(fp)
8110a24c:	10803fcc 	andi	r2,r2,255
8110a250:	10000526 	beq	r2,zero,8110a268 <vInitialTask+0x38c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a254:	e0bffe03 	ldbu	r2,-8(fp)
8110a258:	10803fcc 	andi	r2,r2,255
8110a25c:	1009883a 	mov	r4,r2
8110a260:	110f9180 	call	8110f918 <printErrorTask>
		#endif
			vCoudlNotCreateDataControllerTask();
8110a264:	1110f780 	call	81110f78 <vCoudlNotCreateDataControllerTask>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a268:	01c07d04 	movi	r7,500
8110a26c:	000d883a 	mov	r6,zero
8110a270:	000b883a 	mov	r5,zero
8110a274:	0009883a 	mov	r4,zero
8110a278:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vNFeeControlTask_stk,
									FEE_CONTROL_STACK_SIZE,
									&xSimMeb.xFeeControl,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vNFeeControlTask,
8110a27c:	d8000415 	stw	zero,16(sp)
8110a280:	00a04574 	movhi	r2,33045
8110a284:	10a55a04 	addi	r2,r2,-27288
8110a288:	d8800315 	stw	r2,12(sp)
8110a28c:	00810004 	movi	r2,1024
8110a290:	d8800215 	stw	r2,8(sp)
8110a294:	00a04574 	movhi	r2,33045
8110a298:	10b9ac04 	addi	r2,r2,-6480
8110a29c:	d8800115 	stw	r2,4(sp)
8110a2a0:	008001c4 	movi	r2,7
8110a2a4:	d8800015 	stw	r2,0(sp)
8110a2a8:	01c001c4 	movi	r7,7
8110a2ac:	01a04574 	movhi	r6,33045
8110a2b0:	31bdab04 	addi	r6,r6,-2388
8110a2b4:	000b883a 	mov	r5,zero
8110a2b8:	01204474 	movhi	r4,33041
8110a2bc:	2129bc04 	addi	r4,r4,-22800
8110a2c0:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a2c4:	e0bffe05 	stb	r2,-8(fp)
									FEE_CONTROL_STACK_SIZE,
									&xSimMeb.xFeeControl,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a2c8:	e0bffe03 	ldbu	r2,-8(fp)
8110a2cc:	10803fcc 	andi	r2,r2,255
8110a2d0:	10000526 	beq	r2,zero,8110a2e8 <vInitialTask+0x40c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a2d4:	e0bffe03 	ldbu	r2,-8(fp)
8110a2d8:	10803fcc 	andi	r2,r2,255
8110a2dc:	1009883a 	mov	r4,r2
8110a2e0:	110f9180 	call	8110f918 <printErrorTask>
		#endif
			vCoudlNotCreateNFeeControllerTask();
8110a2e4:	1110f100 	call	81110f10 <vCoudlNotCreateNFeeControllerTask>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a2e8:	01c07d04 	movi	r7,500
8110a2ec:	000d883a 	mov	r6,zero
8110a2f0:	000b883a 	mov	r5,zero
8110a2f4:	0009883a 	mov	r4,zero
8110a2f8:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vSimMebTask_stk,
									MEB_STACK_SIZE,
									&xSimMeb,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vSimMebTask,
8110a2fc:	d8000415 	stw	zero,16(sp)
8110a300:	00a04574 	movhi	r2,33045
8110a304:	10a53c04 	addi	r2,r2,-27408
8110a308:	d8800315 	stw	r2,12(sp)
8110a30c:	00808004 	movi	r2,512
8110a310:	d8800215 	stw	r2,8(sp)
8110a314:	00a04574 	movhi	r2,33045
8110a318:	1085bc04 	addi	r2,r2,5872
8110a31c:	d8800115 	stw	r2,4(sp)
8110a320:	00800184 	movi	r2,6
8110a324:	d8800015 	stw	r2,0(sp)
8110a328:	01c00184 	movi	r7,6
8110a32c:	01a04574 	movhi	r6,33045
8110a330:	3187bb04 	addi	r6,r6,7916
8110a334:	000b883a 	mov	r5,zero
8110a338:	01204474 	movhi	r4,33041
8110a33c:	21304c04 	addi	r4,r4,-16080
8110a340:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a344:	e0bffe05 	stb	r2,-8(fp)
									MEB_STACK_SIZE,
									&xSimMeb,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a348:	e0bffe03 	ldbu	r2,-8(fp)
8110a34c:	10803fcc 	andi	r2,r2,255
8110a350:	10000526 	beq	r2,zero,8110a368 <vInitialTask+0x48c>
		/* Can't create Task */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a354:	e0bffe03 	ldbu	r2,-8(fp)
8110a358:	10803fcc 	andi	r2,r2,255
8110a35c:	1009883a 	mov	r4,r2
8110a360:	110f9180 	call	8110f918 <printErrorTask>
		#endif
			vCoudlNotCreateMebTask();
8110a364:	1110fe00 	call	81110fe0 <vCoudlNotCreateMebTask>
	}


	OSTimeDlyHMSM(0, 0, 0, 500);
8110a368:	01c07d04 	movi	r7,500
8110a36c:	000d883a 	mov	r6,zero
8110a370:	000b883a 	mov	r5,zero
8110a374:	0009883a 	mov	r4,zero
8110a378:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vTimeoutCheckerTask_stk,
									TIMEOUT_CHECKER_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vTimeoutCheckerTaskv2,
8110a37c:	d8000415 	stw	zero,16(sp)
8110a380:	d8000315 	stw	zero,12(sp)
8110a384:	00810004 	movi	r2,1024
8110a388:	d8800215 	stw	r2,8(sp)
8110a38c:	00a04534 	movhi	r2,33044
8110a390:	109f3c04 	addi	r2,r2,31984
8110a394:	d8800115 	stw	r2,4(sp)
8110a398:	00800704 	movi	r2,28
8110a39c:	d8800015 	stw	r2,0(sp)
8110a3a0:	01c00704 	movi	r7,28
8110a3a4:	01a04574 	movhi	r6,33045
8110a3a8:	31a33b04 	addi	r6,r6,-29460
8110a3ac:	000b883a 	mov	r5,zero
8110a3b0:	01204474 	movhi	r4,33041
8110a3b4:	21313904 	addi	r4,r4,-15132
8110a3b8:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a3bc:	e0bffe05 	stb	r2,-8(fp)
									TIMEOUT_CHECKER_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a3c0:	e0bffe03 	ldbu	r2,-8(fp)
8110a3c4:	10803fcc 	andi	r2,r2,255
8110a3c8:	10000526 	beq	r2,zero,8110a3e0 <vInitialTask+0x504>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a3cc:	e0bffe03 	ldbu	r2,-8(fp)
8110a3d0:	10803fcc 	andi	r2,r2,255
8110a3d4:	1009883a 	mov	r4,r2
8110a3d8:	110f9180 	call	8110f918 <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
8110a3dc:	11106e40 	call	811106e4 <vFailTimeoutCheckerTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 200);
8110a3e0:	01c03204 	movi	r7,200
8110a3e4:	000d883a 	mov	r6,zero
8110a3e8:	000b883a 	mov	r5,zero
8110a3ec:	0009883a 	mov	r4,zero
8110a3f0:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vOutAckHandlerTask_stk,
									OUT_ACK_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
8110a3f4:	d8000415 	stw	zero,16(sp)
8110a3f8:	d8000315 	stw	zero,12(sp)
8110a3fc:	00810004 	movi	r2,1024
8110a400:	d8800215 	stw	r2,8(sp)
8110a404:	00a04574 	movhi	r2,33045
8110a408:	10acbc04 	addi	r2,r2,-19728
8110a40c:	d8800115 	stw	r2,4(sp)
8110a410:	00800644 	movi	r2,25
8110a414:	d8800015 	stw	r2,0(sp)
8110a418:	01c00644 	movi	r7,25
8110a41c:	01a04574 	movhi	r6,33045
8110a420:	31b0bb04 	addi	r6,r6,-15636
8110a424:	000b883a 	mov	r5,zero
8110a428:	01204474 	movhi	r4,33041
8110a42c:	2129d404 	addi	r4,r4,-22704
8110a430:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a434:	e0bffe05 	stb	r2,-8(fp)
									OUT_ACK_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a438:	e0bffe03 	ldbu	r2,-8(fp)
8110a43c:	10803fcc 	andi	r2,r2,255
8110a440:	10000526 	beq	r2,zero,8110a458 <vInitialTask+0x57c>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a444:	e0bffe03 	ldbu	r2,-8(fp)
8110a448:	10803fcc 	andi	r2,r2,255
8110a44c:	1009883a 	mov	r4,r2
8110a450:	110f9180 	call	8110f918 <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
8110a454:	11106000 	call	81110600 <vFailOutAckHandlerTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 200);
8110a458:	01c03204 	movi	r7,200
8110a45c:	000d883a 	mov	r6,zero
8110a460:	000b883a 	mov	r5,zero
8110a464:	0009883a 	mov	r4,zero
8110a468:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vInAckHandlerTask_stk,
									IN_ACK_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vInAckHandlerTaskV2,
8110a46c:	d8000415 	stw	zero,16(sp)
8110a470:	d8000315 	stw	zero,12(sp)
8110a474:	00810004 	movi	r2,1024
8110a478:	d8800215 	stw	r2,8(sp)
8110a47c:	00a04534 	movhi	r2,33044
8110a480:	10969404 	addi	r2,r2,23120
8110a484:	d8800115 	stw	r2,4(sp)
8110a488:	008005c4 	movi	r2,23
8110a48c:	d8800015 	stw	r2,0(sp)
8110a490:	01c005c4 	movi	r7,23
8110a494:	01a04534 	movhi	r6,33044
8110a498:	319a9304 	addi	r6,r6,27212
8110a49c:	000b883a 	mov	r5,zero
8110a4a0:	01204474 	movhi	r4,33041
8110a4a4:	2125eb04 	addi	r4,r4,-26708
8110a4a8:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a4ac:	e0bffe05 	stb	r2,-8(fp)
									IN_ACK_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a4b0:	e0bffe03 	ldbu	r2,-8(fp)
8110a4b4:	10803fcc 	andi	r2,r2,255
8110a4b8:	10000526 	beq	r2,zero,8110a4d0 <vInitialTask+0x5f4>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a4bc:	e0bffe03 	ldbu	r2,-8(fp)
8110a4c0:	10803fcc 	andi	r2,r2,255
8110a4c4:	1009883a 	mov	r4,r2
8110a4c8:	110f9180 	call	8110f918 <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
8110a4cc:	11105b40 	call	811105b4 <vFailInAckHandlerTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 200);
8110a4d0:	01c03204 	movi	r7,200
8110a4d4:	000d883a 	mov	r6,zero
8110a4d8:	000b883a 	mov	r5,zero
8110a4dc:	0009883a 	mov	r4,zero
8110a4e0:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vParserCommTask_stk,
									PARSER_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CHK + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vParserCommTask,
8110a4e4:	d8000415 	stw	zero,16(sp)
8110a4e8:	d8000315 	stw	zero,12(sp)
8110a4ec:	00810004 	movi	r2,1024
8110a4f0:	d8800215 	stw	r2,8(sp)
8110a4f4:	00a04574 	movhi	r2,33045
8110a4f8:	1081bc04 	addi	r2,r2,1776
8110a4fc:	d8800115 	stw	r2,4(sp)
8110a500:	00800684 	movi	r2,26
8110a504:	d8800015 	stw	r2,0(sp)
8110a508:	01c00684 	movi	r7,26
8110a50c:	01a04574 	movhi	r6,33045
8110a510:	3185bb04 	addi	r6,r6,5868
8110a514:	000b883a 	mov	r5,zero
8110a518:	01204474 	movhi	r4,33041
8110a51c:	212a9204 	addi	r4,r4,-21944
8110a520:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a524:	e0bffe05 	stb	r2,-8(fp)
									PARSER_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a528:	e0bffe03 	ldbu	r2,-8(fp)
8110a52c:	10803fcc 	andi	r2,r2,255
8110a530:	10000526 	beq	r2,zero,8110a548 <vInitialTask+0x66c>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
8110a534:	e0bffe03 	ldbu	r2,-8(fp)
8110a538:	10803fcc 	andi	r2,r2,255
8110a53c:	1009883a 	mov	r4,r2
8110a540:	110f9180 	call	8110f918 <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
8110a544:	11105680 	call	81110568 <vFailParserCommTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 200);
8110a548:	01c03204 	movi	r7,200
8110a54c:	000d883a 	mov	r6,zero
8110a550:	000b883a 	mov	r5,zero
8110a554:	0009883a 	mov	r4,zero
8110a558:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									vReceiverUartTask_stk,
									RECEIVER_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CHK + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vReceiverUartTask,
8110a55c:	d8000415 	stw	zero,16(sp)
8110a560:	d8000315 	stw	zero,12(sp)
8110a564:	00810004 	movi	r2,1024
8110a568:	d8800215 	stw	r2,8(sp)
8110a56c:	00a04574 	movhi	r2,33045
8110a570:	10a8bc04 	addi	r2,r2,-23824
8110a574:	d8800115 	stw	r2,4(sp)
8110a578:	00800784 	movi	r2,30
8110a57c:	d8800015 	stw	r2,0(sp)
8110a580:	01c00784 	movi	r7,30
8110a584:	01a04574 	movhi	r6,33045
8110a588:	31acbb04 	addi	r6,r6,-19732
8110a58c:	000b883a 	mov	r5,zero
8110a590:	01204474 	movhi	r4,33041
8110a594:	212d6b04 	addi	r4,r4,-19028
8110a598:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a59c:	e0bffe05 	stb	r2,-8(fp)
									RECEIVER_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110a5a0:	e0bffe03 	ldbu	r2,-8(fp)
8110a5a4:	10803fcc 	andi	r2,r2,255
8110a5a8:	10000526 	beq	r2,zero,8110a5c0 <vInitialTask+0x6e4>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
8110a5ac:	e0bffe03 	ldbu	r2,-8(fp)
8110a5b0:	10803fcc 	andi	r2,r2,255
8110a5b4:	1009883a 	mov	r4,r2
8110a5b8:	110f9180 	call	8110f918 <printErrorTask>
		#endif
		vFailReceiverCreate();
8110a5bc:	110fe6c0 	call	8110fe6c <vFailReceiverCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 200);
8110a5c0:	01c03204 	movi	r7,200
8110a5c4:	000d883a 	mov	r6,zero
8110a5c8:	000b883a 	mov	r5,zero
8110a5cc:	0009883a 	mov	r4,zero
8110a5d0:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									senderTask_stk,
									SENDER_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vSenderComTask,
8110a5d4:	d8000415 	stw	zero,16(sp)
8110a5d8:	d8000315 	stw	zero,12(sp)
8110a5dc:	00810004 	movi	r2,1024
8110a5e0:	d8800215 	stw	r2,8(sp)
8110a5e4:	00a04534 	movhi	r2,33044
8110a5e8:	109b3004 	addi	r2,r2,27840
8110a5ec:	d8800115 	stw	r2,4(sp)
8110a5f0:	00800604 	movi	r2,24
8110a5f4:	d8800015 	stw	r2,0(sp)
8110a5f8:	01c00604 	movi	r7,24
8110a5fc:	01a04534 	movhi	r6,33044
8110a600:	319f2f04 	addi	r6,r6,31932
8110a604:	000b883a 	mov	r5,zero
8110a608:	01204474 	movhi	r4,33041
8110a60c:	212fed04 	addi	r4,r4,-16460
8110a610:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110a614:	e0bffe05 	stb	r2,-8(fp)
									0);
	#endif



	OSTimeDlyHMSM(0, 0, 0, 200);
8110a618:	01c03204 	movi	r7,200
8110a61c:	000d883a 	mov	r6,zero
8110a620:	000b883a 	mov	r5,zero
8110a624:	0009883a 	mov	r4,zero
8110a628:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
									OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK);
	#endif



	if ( error_code != OS_ERR_NONE) {
8110a62c:	e0bffe03 	ldbu	r2,-8(fp)
8110a630:	10803fcc 	andi	r2,r2,255
8110a634:	10000526 	beq	r2,zero,8110a64c <vInitialTask+0x770>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
8110a638:	e0bffe03 	ldbu	r2,-8(fp)
8110a63c:	10803fcc 	andi	r2,r2,255
8110a640:	1009883a 	mov	r4,r2
8110a644:	110f9180 	call	8110f918 <printErrorTask>
		#endif
		vFailSenderCreate();
8110a648:	110feb80 	call	8110feb8 <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
8110a64c:	d0a05917 	ldw	r2,-32412(gp)
8110a650:	e17ffe04 	addi	r5,fp,-8
8110a654:	1009883a 	mov	r4,r2
8110a658:	113460c0 	call	8113460c <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
8110a65c:	e0bffe03 	ldbu	r2,-8(fp)
8110a660:	10803fcc 	andi	r2,r2,255
8110a664:	10000126 	beq	r2,zero,8110a66c <vInitialTask+0x790>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
8110a668:	11109a00 	call	811109a0 <vFailStartTimerRetransmission>
	}


	OSTimeDlyHMSM(0, 0, 0, 2);
8110a66c:	01c00084 	movi	r7,2
8110a670:	000d883a 	mov	r6,zero
8110a674:	000b883a 	mov	r5,zero
8110a678:	0009883a 	mov	r4,zero
8110a67c:	1133b180 	call	81133b18 <OSTimeDlyHMSM>


	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
8110a680:	01003fc4 	movi	r4,255
8110a684:	1132ad80 	call	81132ad8 <OSTaskDel>
8110a688:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
8110a68c:	e0bffe03 	ldbu	r2,-8(fp)
8110a690:	10803fcc 	andi	r2,r2,255
8110a694:	10001026 	beq	r2,zero,8110a6d8 <vInitialTask+0x7fc>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
8110a698:	e0bffe03 	ldbu	r2,-8(fp)
8110a69c:	10803fcc 	andi	r2,r2,255
8110a6a0:	1009883a 	mov	r4,r2
8110a6a4:	110f9180 	call	8110f918 <printErrorTask>
		#endif
		vFailDeleteInitialization();
8110a6a8:	110ff040 	call	8110ff04 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
8110a6ac:	014009c4 	movi	r5,39
8110a6b0:	01000044 	movi	r4,1
8110a6b4:	11322400 	call	81132240 <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
8110a6b8:	01003fc4 	movi	r4,255
8110a6bc:	1132ad80 	call	81132ad8 <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
8110a6c0:	000f883a 	mov	r7,zero
8110a6c4:	01800284 	movi	r6,10
8110a6c8:	000b883a 	mov	r5,zero
8110a6cc:	0009883a 	mov	r4,zero
8110a6d0:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
		}
8110a6d4:	003ff806 	br	8110a6b8 <__reset+0xfb0ea6b8>
	}

}
8110a6d8:	0001883a 	nop
8110a6dc:	e037883a 	mov	sp,fp
8110a6e0:	dfc00117 	ldw	ra,4(sp)
8110a6e4:	df000017 	ldw	fp,0(sp)
8110a6e8:	dec00204 	addi	sp,sp,8
8110a6ec:	f800283a 	ret

8110a6f0 <vNFeeControlTask>:


#include "nfee_control_task.h"


void vNFeeControlTask(void *task_data) {
8110a6f0:	defffb04 	addi	sp,sp,-20
8110a6f4:	de00012e 	bgeu	sp,et,8110a6fc <vNFeeControlTask+0xc>
8110a6f8:	003b68fa 	trap	3
8110a6fc:	dfc00415 	stw	ra,16(sp)
8110a700:	df000315 	stw	fp,12(sp)
8110a704:	df000304 	addi	fp,sp,12
8110a708:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = FALSE;
8110a70c:	e03ffd15 	stw	zero,-12(fp)
	TNFee_Control * pxFeeC;
	INT8U error_code;

	pxFeeC = (TNFee_Control *) task_data;
8110a710:	e0bfff17 	ldw	r2,-4(fp)
8110a714:	e0bffe15 	stw	r2,-8(fp)

	#ifdef DEBUG_ON
        debug(fp,"NFee Controller Task. (Task on)\n");
8110a718:	d0a05017 	ldw	r2,-32448(gp)
8110a71c:	100f883a 	mov	r7,r2
8110a720:	01800804 	movi	r6,32
8110a724:	01400044 	movi	r5,1
8110a728:	01204534 	movhi	r4,33044
8110a72c:	213f7304 	addi	r4,r4,-564
8110a730:	111405c0 	call	8111405c <fwrite>
    #endif

	for (;;) {
		break; /*todo:Tirar depois do debug*/
8110a734:	0001883a 	nop
	}

}
8110a738:	0001883a 	nop
8110a73c:	e037883a 	mov	sp,fp
8110a740:	dfc00117 	ldw	ra,4(sp)
8110a744:	df000017 	ldw	fp,0(sp)
8110a748:	dec00204 	addi	sp,sp,8
8110a74c:	f800283a 	ret

8110a750 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
8110a750:	defff704 	addi	sp,sp,-36
8110a754:	de00012e 	bgeu	sp,et,8110a75c <vOutAckHandlerTask+0xc>
8110a758:	003b68fa 	trap	3
8110a75c:	dfc00815 	stw	ra,32(sp)
8110a760:	df000715 	stw	fp,28(sp)
8110a764:	df000704 	addi	fp,sp,28
8110a768:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
8110a76c:	e03ffac5 	stb	zero,-21(fp)
8110a770:	e03ffb05 	stb	zero,-20(fp)
8110a774:	e03ffb45 	stb	zero,-19(fp)
8110a778:	e03ffb85 	stb	zero,-18(fp)
8110a77c:	e03ffbc5 	stb	zero,-17(fp)
8110a780:	e03ffc05 	stb	zero,-16(fp)
8110a784:	e03ffc45 	stb	zero,-15(fp)
8110a788:	e03ffc85 	stb	zero,-14(fp)
8110a78c:	e03ffcc5 	stb	zero,-13(fp)
8110a790:	e03ffd05 	stb	zero,-12(fp)
8110a794:	e03ffd45 	stb	zero,-11(fp)
8110a798:	e03ffd85 	stb	zero,-10(fp)
8110a79c:	e03ffdc5 	stb	zero,-9(fp)
8110a7a0:	e03ffe05 	stb	zero,-8(fp)
8110a7a4:	e03ffe45 	stb	zero,-7(fp)
8110a7a8:	e03ffe85 	stb	zero,-6(fp)
    unsigned char crc = 0;
8110a7ac:	e03ffa45 	stb	zero,-23(fp)

	#ifdef DEBUG_ON
		debug(fp,"Out Ack Handler Task. (Task on)\n");
8110a7b0:	d0a05017 	ldw	r2,-32448(gp)
8110a7b4:	100f883a 	mov	r7,r2
8110a7b8:	01800804 	movi	r6,32
8110a7bc:	01400044 	movi	r5,1
8110a7c0:	01204534 	movhi	r4,33044
8110a7c4:	213f7c04 	addi	r4,r4,-528
8110a7c8:	111405c0 	call	8111405c <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
8110a7cc:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
8110a7d0:	e0bff917 	ldw	r2,-28(fp)
8110a7d4:	10c00060 	cmpeqi	r3,r2,1
8110a7d8:	1800071e 	bne	r3,zero,8110a7f8 <vOutAckHandlerTask+0xa8>
8110a7dc:	0080032e 	bgeu	zero,r2,8110a7ec <vOutAckHandlerTask+0x9c>
8110a7e0:	108000a0 	cmpeqi	r2,r2,2
8110a7e4:	1000471e 	bne	r2,zero,8110a904 <vOutAckHandlerTask+0x1b4>
8110a7e8:	00008c06 	br	8110aa1c <vOutAckHandlerTask+0x2cc>
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
8110a7ec:	00800044 	movi	r2,1
8110a7f0:	e0bff915 	stw	r2,-28(fp)
				break;
8110a7f4:	00009306 	br	8110aa44 <vOutAckHandlerTask+0x2f4>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                eSenderAckState = sSAGettingACK;
8110a7f8:	00800044 	movi	r2,1
8110a7fc:	e0bff915 	stw	r2,-28(fp)
                OSSemPend(xSemCountSenderACK, 0, &error_code);
8110a800:	d0a04f17 	ldw	r2,-32452(gp)
8110a804:	e0fffa84 	addi	r3,fp,-22
8110a808:	180d883a 	mov	r6,r3
8110a80c:	000b883a 	mov	r5,zero
8110a810:	1009883a 	mov	r4,r2
8110a814:	1131b800 	call	81131b80 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
8110a818:	e0bffa83 	ldbu	r2,-22(fp)
8110a81c:	10803fcc 	andi	r2,r2,255
8110a820:	1000361e 	bne	r2,zero,8110a8fc <vOutAckHandlerTask+0x1ac>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
8110a824:	d0a05d17 	ldw	r2,-32396(gp)
8110a828:	e0fffa84 	addi	r3,fp,-22
8110a82c:	180d883a 	mov	r6,r3
8110a830:	000b883a 	mov	r5,zero
8110a834:	1009883a 	mov	r4,r2
8110a838:	112fb740 	call	8112fb74 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110a83c:	e0bffa83 	ldbu	r2,-22(fp)
8110a840:	10803fcc 	andi	r2,r2,255
8110a844:	10002b1e 	bne	r2,zero,8110a8f4 <vOutAckHandlerTask+0x1a4>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a848:	e03ffa05 	stb	zero,-24(fp)
8110a84c:	00002206 	br	8110a8d8 <vOutAckHandlerTask+0x188>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
8110a850:	e0fffa03 	ldbu	r3,-24(fp)
8110a854:	00a04574 	movhi	r2,33045
8110a858:	108bc004 	addi	r2,r2,12032
8110a85c:	18c7883a 	add	r3,r3,r3
8110a860:	18c7883a 	add	r3,r3,r3
8110a864:	10c5883a 	add	r2,r2,r3
8110a868:	10800003 	ldbu	r2,0(r2)
8110a86c:	10803fcc 	andi	r2,r2,255
8110a870:	1080201c 	xori	r2,r2,128
8110a874:	10bfe004 	addi	r2,r2,-128
8110a878:	10001426 	beq	r2,zero,8110a8cc <vOutAckHandlerTask+0x17c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
8110a87c:	e0fffa03 	ldbu	r3,-24(fp)
8110a880:	00a04574 	movhi	r2,33045
8110a884:	108bc004 	addi	r2,r2,12032
8110a888:	18c7883a 	add	r3,r3,r3
8110a88c:	18c7883a 	add	r3,r3,r3
8110a890:	10c5883a 	add	r2,r2,r3
8110a894:	10c0000b 	ldhu	r3,0(r2)
8110a898:	d0e0498d 	sth	r3,-32474(gp)
8110a89c:	1080008b 	ldhu	r2,2(r2)
8110a8a0:	d0a04a0d 	sth	r2,-32472(gp)
                                eSenderAckState = sSASending;
8110a8a4:	00800084 	movi	r2,2
8110a8a8:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
8110a8ac:	e0fffa03 	ldbu	r3,-24(fp)
8110a8b0:	00a04574 	movhi	r2,33045
8110a8b4:	108bc004 	addi	r2,r2,12032
8110a8b8:	18c7883a 	add	r3,r3,r3
8110a8bc:	18c7883a 	add	r3,r3,r3
8110a8c0:	10c5883a 	add	r2,r2,r3
8110a8c4:	10000005 	stb	zero,0(r2)
                                break;
8110a8c8:	00000606 	br	8110a8e4 <vOutAckHandlerTask+0x194>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110a8cc:	e0bffa03 	ldbu	r2,-24(fp)
8110a8d0:	10800044 	addi	r2,r2,1
8110a8d4:	e0bffa05 	stb	r2,-24(fp)
8110a8d8:	e0bffa03 	ldbu	r2,-24(fp)
8110a8dc:	10800230 	cmpltui	r2,r2,8
8110a8e0:	103fdb1e 	bne	r2,zero,8110a850 <__reset+0xfb0ea850>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
8110a8e4:	d0a05d17 	ldw	r2,-32396(gp)
8110a8e8:	1009883a 	mov	r4,r2
8110a8ec:	11301180 	call	81130118 <OSMutexPost>
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }

                break;
8110a8f0:	00005406 	br	8110aa44 <vOutAckHandlerTask+0x2f4>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
8110a8f4:	110fc340 	call	8110fc34 <vFailGetMutexSenderTask>
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }

                break;
8110a8f8:	00005206 	br	8110aa44 <vOutAckHandlerTask+0x2f4>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
8110a8fc:	110fbcc0 	call	8110fbcc <vFailGetCountSemaphoreSenderTask>
                }

                break;
8110a900:	00005006 	br	8110aa44 <vOutAckHandlerTask+0x2f4>
			case sSASending:
                
                /* First check if is an NACK packet that should be sent */
                if ( xSAckLocal.cType != '#' ) {
8110a904:	d0a04983 	ldbu	r2,-32474(gp)
8110a908:	10803fcc 	andi	r2,r2,255
8110a90c:	1080201c 	xori	r2,r2,128
8110a910:	10bfe004 	addi	r2,r2,-128
8110a914:	108008e0 	cmpeqi	r2,r2,35
8110a918:	1000201e 	bne	r2,zero,8110a99c <vOutAckHandlerTask+0x24c>
                    /* In this state has a parsed ack packet in the variable xSAckLocal
                    we just need to calc the crc8 and create the uart packet to send. */
                    sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
8110a91c:	d0a049c3 	ldbu	r2,-32473(gp)
8110a920:	10c03fcc 	andi	r3,r2,255
8110a924:	18c0201c 	xori	r3,r3,128
8110a928:	18ffe004 	addi	r3,r3,-128
8110a92c:	d0a04a0b 	ldhu	r2,-32472(gp)
8110a930:	113fffcc 	andi	r4,r2,65535
8110a934:	e0bffac4 	addi	r2,fp,-21
8110a938:	200f883a 	mov	r7,r4
8110a93c:	180d883a 	mov	r6,r3
8110a940:	01604534 	movhi	r5,33044
8110a944:	297f8504 	addi	r5,r5,-492
8110a948:	1009883a 	mov	r4,r2
8110a94c:	11153700 	call	81115370 <sprintf>
                    crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
8110a950:	e0bffac4 	addi	r2,fp,-21
8110a954:	1009883a 	mov	r4,r2
8110a958:	11155840 	call	81115584 <strlen>
8110a95c:	1007883a 	mov	r3,r2
8110a960:	e0bffac4 	addi	r2,fp,-21
8110a964:	180b883a 	mov	r5,r3
8110a968:	1009883a 	mov	r4,r2
8110a96c:	110f7e00 	call	8110f7e0 <ucCrc8wInit>
8110a970:	e0bffa45 	stb	r2,-23(fp)
                    sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
8110a974:	e13ffa43 	ldbu	r4,-23(fp)
8110a978:	e0fffac4 	addi	r3,fp,-21
8110a97c:	e0bffac4 	addi	r2,fp,-21
8110a980:	200f883a 	mov	r7,r4
8110a984:	180d883a 	mov	r6,r3
8110a988:	01604534 	movhi	r5,33044
8110a98c:	297f8704 	addi	r5,r5,-484
8110a990:	1009883a 	mov	r4,r2
8110a994:	11153700 	call	81115370 <sprintf>
8110a998:	00000c06 	br	8110a9cc <vOutAckHandlerTask+0x27c>
                } else {
                    /* Nack */
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
8110a99c:	e0bffac4 	addi	r2,fp,-21
8110a9a0:	00c008c4 	movi	r3,35
8110a9a4:	10c00005 	stb	r3,0(r2)
8110a9a8:	00c01f04 	movi	r3,124
8110a9ac:	10c00045 	stb	r3,1(r2)
8110a9b0:	00c00d44 	movi	r3,53
8110a9b4:	10c00085 	stb	r3,2(r2)
8110a9b8:	00c00d04 	movi	r3,52
8110a9bc:	10c000c5 	stb	r3,3(r2)
8110a9c0:	00c00ec4 	movi	r3,59
8110a9c4:	10c00105 	stb	r3,4(r2)
8110a9c8:	10000145 	stb	zero,5(r2)
                }


                OSMutexPend(xTxUARTMutex, 100, &error_code); /* Wait max 100 ticks = 100 ms */
8110a9cc:	d0a05e17 	ldw	r2,-32392(gp)
8110a9d0:	e0fffa84 	addi	r3,fp,-22
8110a9d4:	180d883a 	mov	r6,r3
8110a9d8:	01401904 	movi	r5,100
8110a9dc:	1009883a 	mov	r4,r2
8110a9e0:	112fb740 	call	8112fb74 <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
8110a9e4:	e0bffa83 	ldbu	r2,-22(fp)
8110a9e8:	10803fcc 	andi	r2,r2,255
8110a9ec:	1000071e 	bne	r2,zero,8110aa0c <vOutAckHandlerTask+0x2bc>
                    puts(cBufferAck);
8110a9f0:	e0bffac4 	addi	r2,fp,-21
8110a9f4:	1009883a 	mov	r4,r2
8110a9f8:	111502c0 	call	8111502c <puts>
                    OSMutexPost(xTxUARTMutex);
8110a9fc:	d0a05e17 	ldw	r2,-32392(gp)
8110aa00:	1009883a 	mov	r4,r2
8110aa04:	11301180 	call	81130118 <OSMutexPost>
8110aa08:	00000106 	br	8110aa10 <vOutAckHandlerTask+0x2c0>
                } else
                    vFailGetMutexTxUARTSenderTask(); /* Could not use the uart tx buffer to send the ack*/
8110aa0c:	110fd6c0 	call	8110fd6c <vFailGetMutexTxUARTSenderTask>

                eSenderAckState = sSAGettingACK;
8110aa10:	00800044 	movi	r2,1
8110aa14:	e0bff915 	stw	r2,-28(fp)
                
				break;
8110aa18:	00000a06 	br	8110aa44 <vOutAckHandlerTask+0x2f4>
			default:
            	#ifdef DEBUG_ON
		            debug(fp,"Critical: Default State. Should never get here.(vOutAckHandlerTask)\n");
8110aa1c:	d0a05017 	ldw	r2,-32448(gp)
8110aa20:	100f883a 	mov	r7,r2
8110aa24:	01801104 	movi	r6,68
8110aa28:	01400044 	movi	r5,1
8110aa2c:	01204534 	movhi	r4,33044
8110aa30:	213f8a04 	addi	r4,r4,-472
8110aa34:	111405c0 	call	8111405c <fwrite>
	            #endif
                eSenderAckState = sSAGettingACK;
8110aa38:	00800044 	movi	r2,1
8110aa3c:	e0bff915 	stw	r2,-28(fp)
				break;
8110aa40:	0001883a 	nop
		}
	}
8110aa44:	003f6206 	br	8110a7d0 <__reset+0xfb0ea7d0>

8110aa48 <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
8110aa48:	deffc104 	addi	sp,sp,-252
8110aa4c:	de00012e 	bgeu	sp,et,8110aa54 <vParserCommTask+0xc>
8110aa50:	003b68fa 	trap	3
8110aa54:	dfc03e15 	stw	ra,248(sp)
8110aa58:	df003d15 	stw	fp,244(sp)
8110aa5c:	df003d04 	addi	fp,sp,244
8110aa60:	e13fff15 	stw	r4,-4(fp)
	unsigned short int usiTypeL;
	unsigned short int usiSubTypeL;
	unsigned short int usiPUSidL;
	unsigned short int usiFeeInstL;
	bool bSuccess = FALSE;
8110aa64:	e03fc915 	stw	zero,-220(fp)
	#ifdef DEBUG_ON
		char cPUSDebug[128];
	#endif

    #ifdef DEBUG_ON
        debug(fp,"Parser Comm Task. (Task on)\n");
8110aa68:	d0a05017 	ldw	r2,-32448(gp)
8110aa6c:	100f883a 	mov	r7,r2
8110aa70:	01800704 	movi	r6,28
8110aa74:	01400044 	movi	r5,1
8110aa78:	01204534 	movhi	r4,33044
8110aa7c:	213f9c04 	addi	r4,r4,-400
8110aa80:	111405c0 	call	8111405c <fwrite>
    #endif

	eParserMode = sConfiguring;
8110aa84:	e03fc815 	stw	zero,-224(fp)

	for(;;){

		switch (eParserMode) {
8110aa88:	e0bfc817 	ldw	r2,-224(fp)
8110aa8c:	10800168 	cmpgeui	r2,r2,5
8110aa90:	1002541e 	bne	r2,zero,8110b3e4 <vParserCommTask+0x99c>
8110aa94:	e0bfc817 	ldw	r2,-224(fp)
8110aa98:	100690ba 	slli	r3,r2,2
8110aa9c:	00a04474 	movhi	r2,33041
8110aaa0:	10aaac04 	addi	r2,r2,-21840
8110aaa4:	1885883a 	add	r2,r3,r2
8110aaa8:	10800017 	ldw	r2,0(r2)
8110aaac:	1000683a 	jmp	r2
8110aab0:	8110aac4 	addi	r4,r16,17067
8110aab4:	8110aad0 	cmplti	r4,r16,17067
8110aab8:	8110ab64 	muli	r4,r16,17069
8110aabc:	8110acbc 	xorhi	r4,r16,17074
8110aac0:	8110ad04 	addi	r4,r16,17076
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingMessage;
8110aac4:	00800044 	movi	r2,1
8110aac8:	e0bfc815 	stw	r2,-224(fp)
				break;
8110aacc:	00024806 	br	8110b3f0 <vParserCommTask+0x9a8>
			case sWaitingMessage:

				bSuccess = FALSE;
8110aad0:	e03fc915 	stw	zero,-220(fp)
				eParserMode = sWaitingMessage;
8110aad4:	00800044 	movi	r2,1
8110aad8:	e0bfc815 	stw	r2,-224(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
8110aadc:	d0a05217 	ldw	r2,-32440(gp)
8110aae0:	e0ffca84 	addi	r3,fp,-214
8110aae4:	180d883a 	mov	r6,r3
8110aae8:	000b883a 	mov	r5,zero
8110aaec:	1009883a 	mov	r4,r2
8110aaf0:	1131b800 	call	81131b80 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
8110aaf4:	e0bfca83 	ldbu	r2,-214(fp)
8110aaf8:	10803fcc 	andi	r2,r2,255
8110aafc:	1000171e 	bne	r2,zero,8110ab5c <vParserCommTask+0x114>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
8110ab00:	01204534 	movhi	r4,33044
8110ab04:	21132404 	addi	r4,r4,19600
8110ab08:	110b3f40 	call	8110b3f4 <getPreParsedPacket>
8110ab0c:	e0bfc915 	stw	r2,-220(fp)
					if (bSuccess == TRUE) {
8110ab10:	e0bfc917 	ldw	r2,-220(fp)
8110ab14:	10800058 	cmpnei	r2,r2,1
8110ab18:	10000e1e 	bne	r2,zero,8110ab54 <vParserCommTask+0x10c>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
8110ab1c:	00a04534 	movhi	r2,33044
8110ab20:	10932404 	addi	r2,r2,19600
8110ab24:	10800103 	ldbu	r2,4(r2)
8110ab28:	10803fcc 	andi	r2,r2,255
8110ab2c:	1080201c 	xori	r2,r2,128
8110ab30:	10bfe004 	addi	r2,r2,-128
8110ab34:	10800858 	cmpnei	r2,r2,33
8110ab38:	1000031e 	bne	r2,zero,8110ab48 <vParserCommTask+0x100>
							eParserMode = sReplyParsing;
8110ab3c:	008000c4 	movi	r2,3
8110ab40:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110ab44:	00022a06 	br	8110b3f0 <vParserCommTask+0x9a8>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
8110ab48:	00800084 	movi	r2,2
8110ab4c:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110ab50:	00022706 	br	8110b3f0 <vParserCommTask+0x9a8>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
8110ab54:	11102f80 	call	811102f8 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110ab58:	00022506 	br	8110b3f0 <vParserCommTask+0x9a8>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
8110ab5c:	11102280 	call	81110228 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
8110ab60:	00022306 	br	8110b3f0 <vParserCommTask+0x9a8>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cCommand)
8110ab64:	00a04534 	movhi	r2,33044
8110ab68:	10932404 	addi	r2,r2,19600
8110ab6c:	10800143 	ldbu	r2,5(r2)
8110ab70:	10803fcc 	andi	r2,r2,255
8110ab74:	1080201c 	xori	r2,r2,128
8110ab78:	10bfe004 	addi	r2,r2,-128
8110ab7c:	10c01120 	cmpeqi	r3,r2,68
8110ab80:	1800081e 	bne	r3,zero,8110aba4 <vParserCommTask+0x15c>
8110ab84:	10c01420 	cmpeqi	r3,r2,80
8110ab88:	18000a1e 	bne	r3,zero,8110abb4 <vParserCommTask+0x16c>
8110ab8c:	108010e0 	cmpeqi	r2,r2,67
8110ab90:	10004626 	beq	r2,zero,8110acac <vParserCommTask+0x264>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
						vSendEthConf();
8110ab94:	110e1100 	call	8110e110 <vSendEthConf>
						eParserMode = sWaitingMessage;
8110ab98:	00800044 	movi	r2,1
8110ab9c:	e0bfc815 	stw	r2,-224(fp)
						break;
8110aba0:	00004506 	br	8110acb8 <vParserCommTask+0x270>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
8110aba4:	110e3a00 	call	8110e3a0 <vSendTurnOff>
						eParserMode = sWaitingMessage;
8110aba8:	00800044 	movi	r2,1
8110abac:	e0bfc815 	stw	r2,-224(fp)
                        break;						
8110abb0:	00004106 	br	8110acb8 <vParserCommTask+0x270>
                    case PUS_CMD: /*PUS command to MEB - TC*/

						#ifdef DEBUG_ON
							debug(fp,"PUS Received:\n");
8110abb4:	d0a05017 	ldw	r2,-32448(gp)
8110abb8:	100f883a 	mov	r7,r2
8110abbc:	01800384 	movi	r6,14
8110abc0:	01400044 	movi	r5,1
8110abc4:	01204534 	movhi	r4,33044
8110abc8:	213fa404 	addi	r4,r4,-368
8110abcc:	111405c0 	call	8111405c <fwrite>
							memset(cPUSDebug,0,128);
8110abd0:	e0bfdf04 	addi	r2,fp,-132
8110abd4:	01802004 	movi	r6,128
8110abd8:	000b883a 	mov	r5,zero
8110abdc:	1009883a 	mov	r4,r2
8110abe0:	1114bc00 	call	81114bc0 <memset>
							sprintf(cPUSDebug, "TC-> pid: %hu; pcat: %hu; srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", PreParsedLocal.usiValues[1], PreParsedLocal.usiValues[2], PreParsedLocal.usiValues[3], PreParsedLocal.usiValues[4], PreParsedLocal.usiValues[5]);
8110abe4:	00a04534 	movhi	r2,33044
8110abe8:	10932404 	addi	r2,r2,19600
8110abec:	1080028b 	ldhu	r2,10(r2)
8110abf0:	117fffcc 	andi	r5,r2,65535
8110abf4:	00a04534 	movhi	r2,33044
8110abf8:	10932404 	addi	r2,r2,19600
8110abfc:	1080030b 	ldhu	r2,12(r2)
8110ac00:	11bfffcc 	andi	r6,r2,65535
8110ac04:	00a04534 	movhi	r2,33044
8110ac08:	10932404 	addi	r2,r2,19600
8110ac0c:	1080038b 	ldhu	r2,14(r2)
8110ac10:	10ffffcc 	andi	r3,r2,65535
8110ac14:	00a04534 	movhi	r2,33044
8110ac18:	10932404 	addi	r2,r2,19600
8110ac1c:	1080040b 	ldhu	r2,16(r2)
8110ac20:	113fffcc 	andi	r4,r2,65535
8110ac24:	00a04534 	movhi	r2,33044
8110ac28:	10932404 	addi	r2,r2,19600
8110ac2c:	1080048b 	ldhu	r2,18(r2)
8110ac30:	10bfffcc 	andi	r2,r2,65535
8110ac34:	e23fdf04 	addi	r8,fp,-132
8110ac38:	d8800215 	stw	r2,8(sp)
8110ac3c:	d9000115 	stw	r4,4(sp)
8110ac40:	d8c00015 	stw	r3,0(sp)
8110ac44:	300f883a 	mov	r7,r6
8110ac48:	280d883a 	mov	r6,r5
8110ac4c:	01604534 	movhi	r5,33044
8110ac50:	297fa804 	addi	r5,r5,-352
8110ac54:	4009883a 	mov	r4,r8
8110ac58:	11153700 	call	81115370 <sprintf>
							debug(fp, cPUSDebug );
8110ac5c:	d0a05017 	ldw	r2,-32448(gp)
8110ac60:	e0ffdf04 	addi	r3,fp,-132
8110ac64:	180b883a 	mov	r5,r3
8110ac68:	1009883a 	mov	r4,r2
8110ac6c:	11139c00 	call	811139c0 <fprintf>
						#endif
	
						usiTypeL = PreParsedLocal.usiValues[3];
8110ac70:	00a04534 	movhi	r2,33044
8110ac74:	10932404 	addi	r2,r2,19600
8110ac78:	1080038b 	ldhu	r2,14(r2)
8110ac7c:	e0bfc60d 	sth	r2,-232(fp)
						usiSubTypeL = PreParsedLocal.usiValues[4];
8110ac80:	00a04534 	movhi	r2,33044
8110ac84:	10932404 	addi	r2,r2,19600
8110ac88:	1080040b 	ldhu	r2,16(r2)
8110ac8c:	e0bfc68d 	sth	r2,-230(fp)
						usiPUSidL = PreParsedLocal.usiValues[5];
8110ac90:	00a04534 	movhi	r2,33044
8110ac94:	10932404 	addi	r2,r2,19600
8110ac98:	1080048b 	ldhu	r2,18(r2)
8110ac9c:	e0bfc70d 	sth	r2,-228(fp)

						eParserMode = sPusHandling;
8110aca0:	00800104 	movi	r2,4
8110aca4:	e0bfc815 	stw	r2,-224(fp)
                        break;						
8110aca8:	00000306 	br	8110acb8 <vParserCommTask+0x270>
					default:
						eParserMode = sWaitingMessage;
8110acac:	00800044 	movi	r2,1
8110acb0:	e0bfc815 	stw	r2,-224(fp)
						break;
8110acb4:	0001883a 	nop
				}
				break;
8110acb8:	0001cd06 	br	8110b3f0 <vParserCommTask+0x9a8>
			case sReplyParsing:
				eParserMode = sWaitingMessage;
8110acbc:	00800044 	movi	r2,1
8110acc0:	e0bfc815 	stw	r2,-224(fp)
                switch ( usiTypeL )
8110acc4:	e0bfc60b 	ldhu	r2,-232(fp)
8110acc8:	10c01220 	cmpeqi	r3,r2,72
8110accc:	1800091e 	bne	r3,zero,8110acf4 <vParserCommTask+0x2ac>
8110acd0:	10c014e0 	cmpeqi	r3,r2,83
8110acd4:	1800091e 	bne	r3,zero,8110acfc <vParserCommTask+0x2b4>
8110acd8:	10801120 	cmpeqi	r2,r2,68
8110acdc:	10000226 	beq	r2,zero,8110ace8 <vParserCommTask+0x2a0>
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
8110ace0:	110e3a00 	call	8110e3a0 <vSendTurnOff>
						
						
                        break;
8110ace4:	00000606 	br	8110ad00 <vParserCommTask+0x2b8>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
                    default:
						eParserMode = sWaitingMessage;
8110ace8:	00800044 	movi	r2,1
8110acec:	e0bfc815 	stw	r2,-224(fp)
                        break;
8110acf0:	00000306 	br	8110ad00 <vParserCommTask+0x2b8>
						
                        break;
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
8110acf4:	0001883a 	nop
8110acf8:	0001bd06 	br	8110b3f0 <vParserCommTask+0x9a8>
                switch ( usiTypeL )
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
8110acfc:	0001883a 	nop
                        break;
                    default:
						eParserMode = sWaitingMessage;
                        break;
                }
				break;
8110ad00:	0001bb06 	br	8110b3f0 <vParserCommTask+0x9a8>
			case sPusHandling:
				eParserMode = sWaitingMessage;
8110ad04:	00800044 	movi	r2,1
8110ad08:	e0bfc815 	stw	r2,-224(fp)
				
                switch ( usiTypeL )
8110ad0c:	e0bfc60b 	ldhu	r2,-232(fp)
8110ad10:	10c03ea0 	cmpeqi	r3,r2,250
8110ad14:	1800311e 	bne	r3,zero,8110addc <vParserCommTask+0x394>
8110ad18:	10c03ec8 	cmpgei	r3,r2,251
8110ad1c:	1800031e 	bne	r3,zero,8110ad2c <vParserCommTask+0x2e4>
8110ad20:	10800460 	cmpeqi	r2,r2,17
8110ad24:	1000061e 	bne	r2,zero,8110ad40 <vParserCommTask+0x2f8>
8110ad28:	0001aa06 	br	8110b3d4 <vParserCommTask+0x98c>
8110ad2c:	10c03ee0 	cmpeqi	r3,r2,251
8110ad30:	1800621e 	bne	r3,zero,8110aebc <vParserCommTask+0x474>
8110ad34:	10803f20 	cmpeqi	r2,r2,252
8110ad38:	1000ba1e 	bne	r2,zero,8110b024 <vParserCommTask+0x5dc>
8110ad3c:	0001a506 	br	8110b3d4 <vParserCommTask+0x98c>
                {
                    case 17: /* srv-Type = 17 */
						switch ( usiSubTypeL )
8110ad40:	e0bfc68b 	ldhu	r2,-230(fp)
8110ad44:	10800060 	cmpeqi	r2,r2,1
8110ad48:	10000b26 	beq	r2,zero,8110ad78 <vParserCommTask+0x330>
						{
							case 1: /* TC_SCAM_TEST_CONNECTION */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_TEST_CONNECTION\n");
8110ad4c:	d0a05017 	ldw	r2,-32448(gp)
8110ad50:	100f883a 	mov	r7,r2
8110ad54:	01800604 	movi	r6,24
8110ad58:	01400044 	movi	r5,1
8110ad5c:	01204534 	movhi	r4,33044
8110ad60:	213fbb04 	addi	r4,r4,-276
8110ad64:	111405c0 	call	8111405c <fwrite>
								#endif

								/* Reply with the TM os connection */
								vTMPusTestConnection( usiPUSidL );
8110ad68:	e0bfc70b 	ldhu	r2,-228(fp)
8110ad6c:	1009883a 	mov	r4,r2
8110ad70:	110e9f80 	call	8110e9f8 <vTMPusTestConnection>

								break;
8110ad74:	00001806 	br	8110add8 <vParserCommTask+0x390>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110ad78:	e0bfdf04 	addi	r2,fp,-132
8110ad7c:	01802004 	movi	r6,128
8110ad80:	000b883a 	mov	r5,zero
8110ad84:	1009883a 	mov	r4,r2
8110ad88:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
8110ad8c:	e13fc60b 	ldhu	r4,-232(fp)
8110ad90:	e17fc68b 	ldhu	r5,-230(fp)
8110ad94:	e0bfc70b 	ldhu	r2,-228(fp)
8110ad98:	e0ffdf04 	addi	r3,fp,-132
8110ad9c:	d8800015 	stw	r2,0(sp)
8110ada0:	280f883a 	mov	r7,r5
8110ada4:	200d883a 	mov	r6,r4
8110ada8:	01604534 	movhi	r5,33044
8110adac:	297fc204 	addi	r5,r5,-248
8110adb0:	1809883a 	mov	r4,r3
8110adb4:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110adb8:	d0a05017 	ldw	r2,-32448(gp)
8110adbc:	e0ffdf04 	addi	r3,fp,-132
8110adc0:	180b883a 	mov	r5,r3
8110adc4:	1009883a 	mov	r4,r2
8110adc8:	11139c00 	call	811139c0 <fprintf>
								#endif
								eParserMode = sWaitingMessage;
8110adcc:	00800044 	movi	r2,1
8110add0:	e0bfc815 	stw	r2,-224(fp)
								break;
8110add4:	0001883a 	nop
						}
                        break;
8110add8:	00018106 	br	8110b3e0 <vParserCommTask+0x998>
                    case 250: /* srv-Type = 250 */
						switch ( usiSubTypeL )
8110addc:	e0bfc68b 	ldhu	r2,-230(fp)
8110ade0:	10c00f20 	cmpeqi	r3,r2,60
8110ade4:	18000c1e 	bne	r3,zero,8110ae18 <vParserCommTask+0x3d0>
8110ade8:	10c00f60 	cmpeqi	r3,r2,61
8110adec:	1800121e 	bne	r3,zero,8110ae38 <vParserCommTask+0x3f0>
8110adf0:	10800ee0 	cmpeqi	r2,r2,59
8110adf4:	10001826 	beq	r2,zero,8110ae58 <vParserCommTask+0x410>
						{
							case 59: /* TC_SCAM_RESET */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RESET\n");
8110adf8:	d0a05017 	ldw	r2,-32448(gp)
8110adfc:	100f883a 	mov	r7,r2
8110ae00:	01800384 	movi	r6,14
8110ae04:	01400044 	movi	r5,1
8110ae08:	01204534 	movhi	r4,33044
8110ae0c:	213fd204 	addi	r4,r4,-184
8110ae10:	111405c0 	call	8111405c <fwrite>
								#endif

								
								break;
8110ae14:	00002806 	br	8110aeb8 <vParserCommTask+0x470>
							case 60: /* TC_SCAM_CONFIG */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_CONFIG\n");
8110ae18:	d0a05017 	ldw	r2,-32448(gp)
8110ae1c:	100f883a 	mov	r7,r2
8110ae20:	018003c4 	movi	r6,15
8110ae24:	01400044 	movi	r5,1
8110ae28:	01204534 	movhi	r4,33044
8110ae2c:	213fd604 	addi	r4,r4,-168
8110ae30:	111405c0 	call	8111405c <fwrite>
								#endif


								break;
8110ae34:	00002006 	br	8110aeb8 <vParserCommTask+0x470>
							case 61: /* TC_SCAM_RUN */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RUN\n");
8110ae38:	d0a05017 	ldw	r2,-32448(gp)
8110ae3c:	100f883a 	mov	r7,r2
8110ae40:	01800304 	movi	r6,12
8110ae44:	01400044 	movi	r5,1
8110ae48:	01204534 	movhi	r4,33044
8110ae4c:	213fda04 	addi	r4,r4,-152
8110ae50:	111405c0 	call	8111405c <fwrite>
								#endif


								break;
8110ae54:	00001806 	br	8110aeb8 <vParserCommTask+0x470>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110ae58:	e0bfdf04 	addi	r2,fp,-132
8110ae5c:	01802004 	movi	r6,128
8110ae60:	000b883a 	mov	r5,zero
8110ae64:	1009883a 	mov	r4,r2
8110ae68:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
8110ae6c:	e13fc60b 	ldhu	r4,-232(fp)
8110ae70:	e17fc68b 	ldhu	r5,-230(fp)
8110ae74:	e0bfc70b 	ldhu	r2,-228(fp)
8110ae78:	e0ffdf04 	addi	r3,fp,-132
8110ae7c:	d8800015 	stw	r2,0(sp)
8110ae80:	280f883a 	mov	r7,r5
8110ae84:	200d883a 	mov	r6,r4
8110ae88:	01604534 	movhi	r5,33044
8110ae8c:	297fc204 	addi	r5,r5,-248
8110ae90:	1809883a 	mov	r4,r3
8110ae94:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110ae98:	d0a05017 	ldw	r2,-32448(gp)
8110ae9c:	e0ffdf04 	addi	r3,fp,-132
8110aea0:	180b883a 	mov	r5,r3
8110aea4:	1009883a 	mov	r4,r2
8110aea8:	11139c00 	call	811139c0 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
8110aeac:	00800044 	movi	r2,1
8110aeb0:	e0bfc815 	stw	r2,-224(fp)
								break;
8110aeb4:	0001883a 	nop
						}
                        break;
8110aeb8:	00014906 	br	8110b3e0 <vParserCommTask+0x998>
                    case 251: /* srv-Type = 251 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
8110aebc:	00a04534 	movhi	r2,33044
8110aec0:	10932404 	addi	r2,r2,19600
8110aec4:	1080050b 	ldhu	r2,20(r2)
8110aec8:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
8110aecc:	e0bfc68b 	ldhu	r2,-230(fp)
8110aed0:	10c000a0 	cmpeqi	r3,r2,2
8110aed4:	1800161e 	bne	r3,zero,8110af30 <vParserCommTask+0x4e8>
8110aed8:	10c00160 	cmpeqi	r3,r2,5
8110aedc:	1800261e 	bne	r3,zero,8110af78 <vParserCommTask+0x530>
8110aee0:	10800060 	cmpeqi	r2,r2,1
8110aee4:	10003626 	beq	r2,zero,8110afc0 <vParserCommTask+0x578>
						{
							case 1: /* TC_SCAM_FEE_CONFIG_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110aee8:	e0bfdf04 	addi	r2,fp,-132
8110aeec:	01802004 	movi	r6,128
8110aef0:	000b883a 	mov	r5,zero
8110aef4:	1009883a 	mov	r4,r2
8110aef8:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CONFIG_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
8110aefc:	e0ffca0b 	ldhu	r3,-216(fp)
8110af00:	e0bfdf04 	addi	r2,fp,-132
8110af04:	180d883a 	mov	r6,r3
8110af08:	01604534 	movhi	r5,33044
8110af0c:	297fde04 	addi	r5,r5,-136
8110af10:	1009883a 	mov	r4,r2
8110af14:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110af18:	d0a05017 	ldw	r2,-32448(gp)
8110af1c:	e0ffdf04 	addi	r3,fp,-132
8110af20:	180b883a 	mov	r5,r3
8110af24:	1009883a 	mov	r4,r2
8110af28:	11139c00 	call	811139c0 <fprintf>
								#endif							


								break;
8110af2c:	00003c06 	br	8110b020 <vParserCommTask+0x5d8>
							case 2: /* TC_SCAM_FEE_STANDBY_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110af30:	e0bfdf04 	addi	r2,fp,-132
8110af34:	01802004 	movi	r6,128
8110af38:	000b883a 	mov	r5,zero
8110af3c:	1009883a 	mov	r4,r2
8110af40:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_STANDBY_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
8110af44:	e0ffca0b 	ldhu	r3,-216(fp)
8110af48:	e0bfdf04 	addi	r2,fp,-132
8110af4c:	180d883a 	mov	r6,r3
8110af50:	01604534 	movhi	r5,33044
8110af54:	297fea04 	addi	r5,r5,-88
8110af58:	1009883a 	mov	r4,r2
8110af5c:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110af60:	d0a05017 	ldw	r2,-32448(gp)
8110af64:	e0ffdf04 	addi	r3,fp,-132
8110af68:	180b883a 	mov	r5,r3
8110af6c:	1009883a 	mov	r4,r2
8110af70:	11139c00 	call	811139c0 <fprintf>
								#endif


								break;
8110af74:	00002a06 	br	8110b020 <vParserCommTask+0x5d8>
							case 5: /* TC_SCAM_FEE_CALIBRATION_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110af78:	e0bfdf04 	addi	r2,fp,-132
8110af7c:	01802004 	movi	r6,128
8110af80:	000b883a 	mov	r5,zero
8110af84:	1009883a 	mov	r4,r2
8110af88:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CALIBRATION_TEST_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
8110af8c:	e0ffca0b 	ldhu	r3,-216(fp)
8110af90:	e0bfdf04 	addi	r2,fp,-132
8110af94:	180d883a 	mov	r6,r3
8110af98:	01604534 	movhi	r5,33044
8110af9c:	297ff604 	addi	r5,r5,-40
8110afa0:	1009883a 	mov	r4,r2
8110afa4:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110afa8:	d0a05017 	ldw	r2,-32448(gp)
8110afac:	e0ffdf04 	addi	r3,fp,-132
8110afb0:	180b883a 	mov	r5,r3
8110afb4:	1009883a 	mov	r4,r2
8110afb8:	11139c00 	call	811139c0 <fprintf>
								#endif


								break;
8110afbc:	00001806 	br	8110b020 <vParserCommTask+0x5d8>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110afc0:	e0bfdf04 	addi	r2,fp,-132
8110afc4:	01802004 	movi	r6,128
8110afc8:	000b883a 	mov	r5,zero
8110afcc:	1009883a 	mov	r4,r2
8110afd0:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
8110afd4:	e13fc60b 	ldhu	r4,-232(fp)
8110afd8:	e17fc68b 	ldhu	r5,-230(fp)
8110afdc:	e0bfc70b 	ldhu	r2,-228(fp)
8110afe0:	e0ffdf04 	addi	r3,fp,-132
8110afe4:	d8800015 	stw	r2,0(sp)
8110afe8:	280f883a 	mov	r7,r5
8110afec:	200d883a 	mov	r6,r4
8110aff0:	01604534 	movhi	r5,33044
8110aff4:	297fc204 	addi	r5,r5,-248
8110aff8:	1809883a 	mov	r4,r3
8110affc:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b000:	d0a05017 	ldw	r2,-32448(gp)
8110b004:	e0ffdf04 	addi	r3,fp,-132
8110b008:	180b883a 	mov	r5,r3
8110b00c:	1009883a 	mov	r4,r2
8110b010:	11139c00 	call	811139c0 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
8110b014:	00800044 	movi	r2,1
8110b018:	e0bfc815 	stw	r2,-224(fp)
								break;
8110b01c:	0001883a 	nop
						}
                        break;
8110b020:	0000ef06 	br	8110b3e0 <vParserCommTask+0x998>
					case 252: /* srv-Type = 252 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
8110b024:	00a04534 	movhi	r2,33044
8110b028:	10932404 	addi	r2,r2,19600
8110b02c:	1080050b 	ldhu	r2,20(r2)
8110b030:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
8110b034:	e0bfc68b 	ldhu	r2,-230(fp)
8110b038:	10c000e0 	cmpeqi	r3,r2,3
8110b03c:	18000a1e 	bne	r3,zero,8110b068 <vParserCommTask+0x620>
8110b040:	10c00108 	cmpgei	r3,r2,4
8110b044:	1800031e 	bne	r3,zero,8110b054 <vParserCommTask+0x60c>
8110b048:	108000a0 	cmpeqi	r2,r2,2
8110b04c:	10003c1e 	bne	r2,zero,8110b140 <vParserCommTask+0x6f8>
8110b050:	0000c706 	br	8110b370 <vParserCommTask+0x928>
8110b054:	10c00120 	cmpeqi	r3,r2,4
8110b058:	1800151e 	bne	r3,zero,8110b0b0 <vParserCommTask+0x668>
8110b05c:	10800160 	cmpeqi	r2,r2,5
8110b060:	1000251e 	bne	r2,zero,8110b0f8 <vParserCommTask+0x6b0>
8110b064:	0000c206 	br	8110b370 <vParserCommTask+0x928>
						{					
							case 3: /* TC_SCAM_SPW_LINK_ENABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110b068:	e0bfdf04 	addi	r2,fp,-132
8110b06c:	01802004 	movi	r6,128
8110b070:	000b883a 	mov	r5,zero
8110b074:	1009883a 	mov	r4,r2
8110b078:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_ENABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
8110b07c:	e0ffca0b 	ldhu	r3,-216(fp)
8110b080:	e0bfdf04 	addi	r2,fp,-132
8110b084:	180d883a 	mov	r6,r3
8110b088:	01604534 	movhi	r5,33044
8110b08c:	29400504 	addi	r5,r5,20
8110b090:	1009883a 	mov	r4,r2
8110b094:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b098:	d0a05017 	ldw	r2,-32448(gp)
8110b09c:	e0ffdf04 	addi	r3,fp,-132
8110b0a0:	180b883a 	mov	r5,r3
8110b0a4:	1009883a 	mov	r4,r2
8110b0a8:	11139c00 	call	811139c0 <fprintf>
								#endif


								break;
8110b0ac:	0000c806 	br	8110b3d0 <vParserCommTask+0x988>
							case 4: /* TC_SCAM_SPW_LINK_DISABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110b0b0:	e0bfdf04 	addi	r2,fp,-132
8110b0b4:	01802004 	movi	r6,128
8110b0b8:	000b883a 	mov	r5,zero
8110b0bc:	1009883a 	mov	r4,r2
8110b0c0:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_DISABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
8110b0c4:	e0ffca0b 	ldhu	r3,-216(fp)
8110b0c8:	e0bfdf04 	addi	r2,fp,-132
8110b0cc:	180d883a 	mov	r6,r3
8110b0d0:	01604534 	movhi	r5,33044
8110b0d4:	29401204 	addi	r5,r5,72
8110b0d8:	1009883a 	mov	r4,r2
8110b0dc:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b0e0:	d0a05017 	ldw	r2,-32448(gp)
8110b0e4:	e0ffdf04 	addi	r3,fp,-132
8110b0e8:	180b883a 	mov	r5,r3
8110b0ec:	1009883a 	mov	r4,r2
8110b0f0:	11139c00 	call	811139c0 <fprintf>
								#endif


								break;
8110b0f4:	0000b606 	br	8110b3d0 <vParserCommTask+0x988>
							case 5: /* TC_SCAM_SPW_LINK_RESET */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110b0f8:	e0bfdf04 	addi	r2,fp,-132
8110b0fc:	01802004 	movi	r6,128
8110b100:	000b883a 	mov	r5,zero
8110b104:	1009883a 	mov	r4,r2
8110b108:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_RESET-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
8110b10c:	e0ffca0b 	ldhu	r3,-216(fp)
8110b110:	e0bfdf04 	addi	r2,fp,-132
8110b114:	180d883a 	mov	r6,r3
8110b118:	01604534 	movhi	r5,33044
8110b11c:	29401f04 	addi	r5,r5,124
8110b120:	1009883a 	mov	r4,r2
8110b124:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b128:	d0a05017 	ldw	r2,-32448(gp)
8110b12c:	e0ffdf04 	addi	r3,fp,-132
8110b130:	180b883a 	mov	r5,r3
8110b134:	1009883a 	mov	r4,r2
8110b138:	11139c00 	call	811139c0 <fprintf>
								#endif


								break;
8110b13c:	0000a406 	br	8110b3d0 <vParserCommTask+0x988>
							case 2: /* TC_SCAM_SPW_RMAP_CONFIG_UPDATE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110b140:	e0bfdf04 	addi	r2,fp,-132
8110b144:	01802004 	movi	r6,128
8110b148:	000b883a 	mov	r5,zero
8110b14c:	1009883a 	mov	r4,r2
8110b150:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_RMAP_CONFIG_UPDATE->\n");
8110b154:	e0bfdf04 	addi	r2,fp,-132
8110b158:	00d4d7f4 	movhi	r3,21343
8110b15c:	18d0d504 	addi	r3,r3,17236
8110b160:	10c00015 	stw	r3,0(r2)
8110b164:	00d7d374 	movhi	r3,24397
8110b168:	18d050c4 	addi	r3,r3,16707
8110b16c:	10c00115 	stw	r3,4(r2)
8110b170:	00d7d5f4 	movhi	r3,24407
8110b174:	18d414c4 	addi	r3,r3,20563
8110b178:	10c00215 	stw	r3,8(r2)
8110b17c:	00d41074 	movhi	r3,20545
8110b180:	18d35484 	addi	r3,r3,19794
8110b184:	10c00315 	stw	r3,12(r2)
8110b188:	00d393f4 	movhi	r3,20047
8110b18c:	18d0d7c4 	addi	r3,r3,17247
8110b190:	10c00415 	stw	r3,16(r2)
8110b194:	00d7d1f4 	movhi	r3,24391
8110b198:	18d25184 	addi	r3,r3,18758
8110b19c:	10c00515 	stw	r3,20(r2)
8110b1a0:	00d05134 	movhi	r3,16708
8110b1a4:	18d41544 	addi	r3,r3,20565
8110b1a8:	10c00615 	stw	r3,24(r2)
8110b1ac:	00cf8b74 	movhi	r3,15917
8110b1b0:	18d15504 	addi	r3,r3,17748
8110b1b4:	10c00715 	stw	r3,28(r2)
8110b1b8:	00c00284 	movi	r3,10
8110b1bc:	10c0080d 	sth	r3,32(r2)
									debug(fp, cPUSDebug );
8110b1c0:	d0a05017 	ldw	r2,-32448(gp)
8110b1c4:	e0ffdf04 	addi	r3,fp,-132
8110b1c8:	180b883a 	mov	r5,r3
8110b1cc:	1009883a 	mov	r4,r2
8110b1d0:	11139c00 	call	811139c0 <fprintf>
									sprintf(cPUSDebug, "- FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
8110b1d4:	e0ffca0b 	ldhu	r3,-216(fp)
8110b1d8:	e0bfdf04 	addi	r2,fp,-132
8110b1dc:	180d883a 	mov	r6,r3
8110b1e0:	01604534 	movhi	r5,33044
8110b1e4:	29402b04 	addi	r5,r5,172
8110b1e8:	1009883a 	mov	r4,r2
8110b1ec:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b1f0:	d0a05017 	ldw	r2,-32448(gp)
8110b1f4:	e0ffdf04 	addi	r3,fp,-132
8110b1f8:	180b883a 	mov	r5,r3
8110b1fc:	1009883a 	mov	r4,r2
8110b200:	11139c00 	call	811139c0 <fprintf>
									sprintf(cPUSDebug, "- MODE: %hu;\n", PreParsedLocal.usiValues[7] );
8110b204:	00a04534 	movhi	r2,33044
8110b208:	10932404 	addi	r2,r2,19600
8110b20c:	1080058b 	ldhu	r2,22(r2)
8110b210:	10ffffcc 	andi	r3,r2,65535
8110b214:	e0bfdf04 	addi	r2,fp,-132
8110b218:	180d883a 	mov	r6,r3
8110b21c:	01604534 	movhi	r5,33044
8110b220:	29403204 	addi	r5,r5,200
8110b224:	1009883a 	mov	r4,r2
8110b228:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b22c:	d0a05017 	ldw	r2,-32448(gp)
8110b230:	e0ffdf04 	addi	r3,fp,-132
8110b234:	180b883a 	mov	r5,r3
8110b238:	1009883a 	mov	r4,r2
8110b23c:	11139c00 	call	811139c0 <fprintf>
									sprintf(cPUSDebug, "- LINK_SPEED: %hu;\n", PreParsedLocal.usiValues[8] );
8110b240:	00a04534 	movhi	r2,33044
8110b244:	10932404 	addi	r2,r2,19600
8110b248:	1080060b 	ldhu	r2,24(r2)
8110b24c:	10ffffcc 	andi	r3,r2,65535
8110b250:	e0bfdf04 	addi	r2,fp,-132
8110b254:	180d883a 	mov	r6,r3
8110b258:	01604534 	movhi	r5,33044
8110b25c:	29403604 	addi	r5,r5,216
8110b260:	1009883a 	mov	r4,r2
8110b264:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b268:	d0a05017 	ldw	r2,-32448(gp)
8110b26c:	e0ffdf04 	addi	r3,fp,-132
8110b270:	180b883a 	mov	r5,r3
8110b274:	1009883a 	mov	r4,r2
8110b278:	11139c00 	call	811139c0 <fprintf>
									sprintf(cPUSDebug, "- LOGICAL_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[9] );
8110b27c:	00a04534 	movhi	r2,33044
8110b280:	10932404 	addi	r2,r2,19600
8110b284:	1080068b 	ldhu	r2,26(r2)
8110b288:	10ffffcc 	andi	r3,r2,65535
8110b28c:	e0bfdf04 	addi	r2,fp,-132
8110b290:	180d883a 	mov	r6,r3
8110b294:	01604534 	movhi	r5,33044
8110b298:	29403b04 	addi	r5,r5,236
8110b29c:	1009883a 	mov	r4,r2
8110b2a0:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b2a4:	d0a05017 	ldw	r2,-32448(gp)
8110b2a8:	e0ffdf04 	addi	r3,fp,-132
8110b2ac:	180b883a 	mov	r5,r3
8110b2b0:	1009883a 	mov	r4,r2
8110b2b4:	11139c00 	call	811139c0 <fprintf>
									sprintf(cPUSDebug, "- DEST_NODE_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[10] );
8110b2b8:	00a04534 	movhi	r2,33044
8110b2bc:	10932404 	addi	r2,r2,19600
8110b2c0:	1080070b 	ldhu	r2,28(r2)
8110b2c4:	10ffffcc 	andi	r3,r2,65535
8110b2c8:	e0bfdf04 	addi	r2,fp,-132
8110b2cc:	180d883a 	mov	r6,r3
8110b2d0:	01604534 	movhi	r5,33044
8110b2d4:	29404204 	addi	r5,r5,264
8110b2d8:	1009883a 	mov	r4,r2
8110b2dc:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b2e0:	d0a05017 	ldw	r2,-32448(gp)
8110b2e4:	e0ffdf04 	addi	r3,fp,-132
8110b2e8:	180b883a 	mov	r5,r3
8110b2ec:	1009883a 	mov	r4,r2
8110b2f0:	11139c00 	call	811139c0 <fprintf>
									sprintf(cPUSDebug, "- TIME_CODE_GEN: %hu;\n", PreParsedLocal.usiValues[11] );
8110b2f4:	00a04534 	movhi	r2,33044
8110b2f8:	10932404 	addi	r2,r2,19600
8110b2fc:	1080078b 	ldhu	r2,30(r2)
8110b300:	10ffffcc 	andi	r3,r2,65535
8110b304:	e0bfdf04 	addi	r2,fp,-132
8110b308:	180d883a 	mov	r6,r3
8110b30c:	01604534 	movhi	r5,33044
8110b310:	29404904 	addi	r5,r5,292
8110b314:	1009883a 	mov	r4,r2
8110b318:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b31c:	d0a05017 	ldw	r2,-32448(gp)
8110b320:	e0ffdf04 	addi	r3,fp,-132
8110b324:	180b883a 	mov	r5,r3
8110b328:	1009883a 	mov	r4,r2
8110b32c:	11139c00 	call	811139c0 <fprintf>
									sprintf(cPUSDebug, "- RMAP_KEY: 0x%02X;\n", PreParsedLocal.usiValues[12] );
8110b330:	00a04534 	movhi	r2,33044
8110b334:	10932404 	addi	r2,r2,19600
8110b338:	1080080b 	ldhu	r2,32(r2)
8110b33c:	10ffffcc 	andi	r3,r2,65535
8110b340:	e0bfdf04 	addi	r2,fp,-132
8110b344:	180d883a 	mov	r6,r3
8110b348:	01604534 	movhi	r5,33044
8110b34c:	29404f04 	addi	r5,r5,316
8110b350:	1009883a 	mov	r4,r2
8110b354:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b358:	d0a05017 	ldw	r2,-32448(gp)
8110b35c:	e0ffdf04 	addi	r3,fp,-132
8110b360:	180b883a 	mov	r5,r3
8110b364:	1009883a 	mov	r4,r2
8110b368:	11139c00 	call	811139c0 <fprintf>
								#endif



								break;
8110b36c:	00001806 	br	8110b3d0 <vParserCommTask+0x988>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110b370:	e0bfdf04 	addi	r2,fp,-132
8110b374:	01802004 	movi	r6,128
8110b378:	000b883a 	mov	r5,zero
8110b37c:	1009883a 	mov	r4,r2
8110b380:	1114bc00 	call	81114bc0 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
8110b384:	e13fc60b 	ldhu	r4,-232(fp)
8110b388:	e17fc68b 	ldhu	r5,-230(fp)
8110b38c:	e0bfc70b 	ldhu	r2,-228(fp)
8110b390:	e0ffdf04 	addi	r3,fp,-132
8110b394:	d8800015 	stw	r2,0(sp)
8110b398:	280f883a 	mov	r7,r5
8110b39c:	200d883a 	mov	r6,r4
8110b3a0:	01604534 	movhi	r5,33044
8110b3a4:	297fc204 	addi	r5,r5,-248
8110b3a8:	1809883a 	mov	r4,r3
8110b3ac:	11153700 	call	81115370 <sprintf>
									debug(fp, cPUSDebug );
8110b3b0:	d0a05017 	ldw	r2,-32448(gp)
8110b3b4:	e0ffdf04 	addi	r3,fp,-132
8110b3b8:	180b883a 	mov	r5,r3
8110b3bc:	1009883a 	mov	r4,r2
8110b3c0:	11139c00 	call	811139c0 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
8110b3c4:	00800044 	movi	r2,1
8110b3c8:	e0bfc815 	stw	r2,-224(fp)
								break;
8110b3cc:	0001883a 	nop
						}
                        break;
8110b3d0:	00000306 	br	8110b3e0 <vParserCommTask+0x998>
                    default:
						eParserMode = sWaitingMessage;
8110b3d4:	00800044 	movi	r2,1
8110b3d8:	e0bfc815 	stw	r2,-224(fp)
                        break;
8110b3dc:	0001883a 	nop
                }
				break;				
8110b3e0:	00000306 	br	8110b3f0 <vParserCommTask+0x9a8>
			default:
				eParserMode = sWaitingMessage;
8110b3e4:	00800044 	movi	r2,1
8110b3e8:	e0bfc815 	stw	r2,-224(fp)
				break;
8110b3ec:	0001883a 	nop
		}
	}
8110b3f0:	003da506 	br	8110aa88 <__reset+0xfb0eaa88>

8110b3f4 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
8110b3f4:	defffb04 	addi	sp,sp,-20
8110b3f8:	de00012e 	bgeu	sp,et,8110b400 <getPreParsedPacket+0xc>
8110b3fc:	003b68fa 	trap	3
8110b400:	dfc00415 	stw	ra,16(sp)
8110b404:	df000315 	stw	fp,12(sp)
8110b408:	df000304 	addi	fp,sp,12
8110b40c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110b410:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
8110b414:	d0a05717 	ldw	r2,-32420(gp)
8110b418:	e0fffe44 	addi	r3,fp,-7
8110b41c:	180d883a 	mov	r6,r3
8110b420:	000b883a 	mov	r5,zero
8110b424:	1009883a 	mov	r4,r2
8110b428:	112fb740 	call	8112fb74 <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
8110b42c:	e0bffe43 	ldbu	r2,-7(fp)
8110b430:	10803fcc 	andi	r2,r2,255
8110b434:	10002e1e 	bne	r2,zero,8110b4f0 <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for( i = 0; i < N_PREPARSED_ENTRIES; i++)
8110b438:	e03ffe05 	stb	zero,-8(fp)
8110b43c:	00002506 	br	8110b4d4 <getPreParsedPacket+0xe0>
		{

            if ( xPreParsed[i].cType != 0 ) {
8110b440:	e0fffe03 	ldbu	r3,-8(fp)
8110b444:	00a04574 	movhi	r2,33045
8110b448:	108bc804 	addi	r2,r2,12064
8110b44c:	18c01324 	muli	r3,r3,76
8110b450:	10c5883a 	add	r2,r2,r3
8110b454:	10800104 	addi	r2,r2,4
8110b458:	10800003 	ldbu	r2,0(r2)
8110b45c:	10803fcc 	andi	r2,r2,255
8110b460:	1080201c 	xori	r2,r2,128
8110b464:	10bfe004 	addi	r2,r2,-128
8110b468:	10001726 	beq	r2,zero,8110b4c8 <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
8110b46c:	e0fffe03 	ldbu	r3,-8(fp)
8110b470:	e13fff17 	ldw	r4,-4(fp)
8110b474:	00a04574 	movhi	r2,33045
8110b478:	108bc804 	addi	r2,r2,12064
8110b47c:	18c01324 	muli	r3,r3,76
8110b480:	10c5883a 	add	r2,r2,r3
8110b484:	2007883a 	mov	r3,r4
8110b488:	1009883a 	mov	r4,r2
8110b48c:	00801304 	movi	r2,76
8110b490:	100d883a 	mov	r6,r2
8110b494:	200b883a 	mov	r5,r4
8110b498:	1809883a 	mov	r4,r3
8110b49c:	1114a700 	call	81114a70 <memcpy>
                bSuccess = TRUE;
8110b4a0:	00800044 	movi	r2,1
8110b4a4:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
8110b4a8:	e0fffe03 	ldbu	r3,-8(fp)
8110b4ac:	00a04574 	movhi	r2,33045
8110b4b0:	108bc804 	addi	r2,r2,12064
8110b4b4:	18c01324 	muli	r3,r3,76
8110b4b8:	10c5883a 	add	r2,r2,r3
8110b4bc:	10800104 	addi	r2,r2,4
8110b4c0:	10000005 	stb	zero,0(r2)
                break;
8110b4c4:	00000606 	br	8110b4e0 <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for( i = 0; i < N_PREPARSED_ENTRIES; i++)
8110b4c8:	e0bffe03 	ldbu	r2,-8(fp)
8110b4cc:	10800044 	addi	r2,r2,1
8110b4d0:	e0bffe05 	stb	r2,-8(fp)
8110b4d4:	e0bffe03 	ldbu	r2,-8(fp)
8110b4d8:	10800230 	cmpltui	r2,r2,8
8110b4dc:	103fd81e 	bne	r2,zero,8110b440 <__reset+0xfb0eb440>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
8110b4e0:	d0a05717 	ldw	r2,-32420(gp)
8110b4e4:	1009883a 	mov	r4,r2
8110b4e8:	11301180 	call	81130118 <OSMutexPost>
8110b4ec:	00000106 	br	8110b4f4 <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
8110b4f0:	11102900 	call	81110290 <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
8110b4f4:	e0bffd17 	ldw	r2,-12(fp)
}
8110b4f8:	e037883a 	mov	sp,fp
8110b4fc:	dfc00117 	ldw	ra,4(sp)
8110b500:	df000017 	ldw	fp,0(sp)
8110b504:	dec00204 	addi	sp,sp,8
8110b508:	f800283a 	ret

8110b50c <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
8110b50c:	defffc04 	addi	sp,sp,-16
8110b510:	de00012e 	bgeu	sp,et,8110b518 <bTrySendSemaphoreCommInit+0xc>
8110b514:	003b68fa 	trap	3
8110b518:	dfc00315 	stw	ra,12(sp)
8110b51c:	df000215 	stw	fp,8(sp)
8110b520:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
8110b524:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
8110b528:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
8110b52c:	d0a05017 	ldw	r2,-32448(gp)
8110b530:	100f883a 	mov	r7,r2
8110b534:	01800e84 	movi	r6,58
8110b538:	01400044 	movi	r5,1
8110b53c:	01204534 	movhi	r4,33044
8110b540:	21005504 	addi	r4,r4,340
8110b544:	111405c0 	call	8111405c <fwrite>
	#endif

	ucCountRetries = 0;
8110b548:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
8110b54c:	e0bfff03 	ldbu	r2,-4(fp)
8110b550:	10800044 	addi	r2,r2,1
8110b554:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
8110b558:	01000c84 	movi	r4,50
8110b55c:	1133a0c0 	call	81133a0c <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
8110b560:	d0a04e17 	ldw	r2,-32456(gp)
8110b564:	1009883a 	mov	r4,r2
8110b568:	1131f080 	call	81131f08 <OSSemPost>
8110b56c:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
8110b570:	e0bfff43 	ldbu	r2,-3(fp)
8110b574:	10000326 	beq	r2,zero,8110b584 <bTrySendSemaphoreCommInit+0x78>
8110b578:	e0bfff03 	ldbu	r2,-4(fp)
8110b57c:	108002f0 	cmpltui	r2,r2,11
8110b580:	103ff21e 	bne	r2,zero,8110b54c <__reset+0xfb0eb54c>

	if ( error_code == OS_ERR_NONE ) {
8110b584:	e0bfff43 	ldbu	r2,-3(fp)
8110b588:	1000021e 	bne	r2,zero,8110b594 <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
8110b58c:	00800044 	movi	r2,1
8110b590:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
8110b594:	e0bffe17 	ldw	r2,-8(fp)
}
8110b598:	e037883a 	mov	sp,fp
8110b59c:	dfc00117 	ldw	ra,4(sp)
8110b5a0:	df000017 	ldw	fp,0(sp)
8110b5a4:	dec00204 	addi	sp,sp,8
8110b5a8:	f800283a 	ret

8110b5ac <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
8110b5ac:	deffab04 	addi	sp,sp,-340
8110b5b0:	de00012e 	bgeu	sp,et,8110b5b8 <vReceiverUartTask+0xc>
8110b5b4:	003b68fa 	trap	3
8110b5b8:	dfc05415 	stw	ra,336(sp)
8110b5bc:	df005315 	stw	fp,332(sp)
8110b5c0:	df005304 	addi	fp,sp,332
8110b5c4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110b5c8:	e03fae15 	stw	zero,-328(fp)
    char cReceive[SIZE_RCV_BUFFER+64];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"Receiver UART Task. (Task on)\n");
8110b5cc:	d0a05017 	ldw	r2,-32448(gp)
8110b5d0:	100f883a 	mov	r7,r2
8110b5d4:	01800784 	movi	r6,30
8110b5d8:	01400044 	movi	r5,1
8110b5dc:	01204534 	movhi	r4,33044
8110b5e0:	21006404 	addi	r4,r4,400
8110b5e4:	111405c0 	call	8111405c <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
8110b5e8:	e03fad15 	stw	zero,-332(fp)

    for(;;) {

        switch (eReaderRXMode)
8110b5ec:	e0bfad17 	ldw	r2,-332(fp)
8110b5f0:	10c00060 	cmpeqi	r3,r2,1
8110b5f4:	1800091e 	bne	r3,zero,8110b61c <vReceiverUartTask+0x70>
8110b5f8:	0080052e 	bgeu	zero,r2,8110b610 <vReceiverUartTask+0x64>
8110b5fc:	10c000a0 	cmpeqi	r3,r2,2
8110b600:	18005d1e 	bne	r3,zero,8110b778 <vReceiverUartTask+0x1cc>
8110b604:	108000e0 	cmpeqi	r2,r2,3
8110b608:	10006e1e 	bne	r2,zero,8110b7c4 <vReceiverUartTask+0x218>
8110b60c:	00007706 	br	8110b7ec <vReceiverUartTask+0x240>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
8110b610:	00800044 	movi	r2,1
8110b614:	e0bfad15 	stw	r2,-332(fp)
                break;
8110b618:	00007706 	br	8110b7f8 <vReceiverUartTask+0x24c>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
8110b61c:	e0bfaf04 	addi	r2,fp,-324
8110b620:	01802004 	movi	r6,128
8110b624:	000b883a 	mov	r5,zero
8110b628:	1009883a 	mov	r4,r2
8110b62c:	1114bc00 	call	81114bc0 <memset>
                scanf("%s", cReceive);
8110b630:	e0bfcf04 	addi	r2,fp,-196
8110b634:	100b883a 	mov	r5,r2
8110b638:	01204534 	movhi	r4,33044
8110b63c:	21006c04 	addi	r4,r4,432
8110b640:	11152940 	call	81115294 <scanf>
                memcpy(cReceiveBuffer, cReceive, (SIZE_RCV_BUFFER -1) ); /* Make that there's a zero terminator */
8110b644:	e0ffcf04 	addi	r3,fp,-196
8110b648:	e0bfaf04 	addi	r2,fp,-324
8110b64c:	01801fc4 	movi	r6,127
8110b650:	180b883a 	mov	r5,r3
8110b654:	1009883a 	mov	r4,r2
8110b658:	1114a700 	call	81114a70 <memcpy>
                bSuccess = bPreParserV2( cReceiveBuffer , &xPreParsedReader );
8110b65c:	e0bfaf04 	addi	r2,fp,-324
8110b660:	01604534 	movhi	r5,33044
8110b664:	29533704 	addi	r5,r5,19676
8110b668:	1009883a 	mov	r4,r2
8110b66c:	110bc500 	call	8110bc50 <bPreParserV2>
8110b670:	e0bfae15 	stw	r2,-328(fp)

                if ( bSuccess == TRUE ) {
8110b674:	e0bfae17 	ldw	r2,-328(fp)
8110b678:	10800058 	cmpnei	r2,r2,1
8110b67c:	1000281e 	bne	r2,zero,8110b720 <vReceiverUartTask+0x174>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
8110b680:	00a04534 	movhi	r2,33044
8110b684:	10933704 	addi	r2,r2,19676
8110b688:	10800103 	ldbu	r2,4(r2)
8110b68c:	10803fcc 	andi	r2,r2,255
8110b690:	1080201c 	xori	r2,r2,128
8110b694:	10bfe004 	addi	r2,r2,-128
8110b698:	10800fe0 	cmpeqi	r2,r2,63
8110b69c:	1000081e 	bne	r2,zero,8110b6c0 <vReceiverUartTask+0x114>
8110b6a0:	00a04534 	movhi	r2,33044
8110b6a4:	10933704 	addi	r2,r2,19676
8110b6a8:	10800103 	ldbu	r2,4(r2)
8110b6ac:	10803fcc 	andi	r2,r2,255
8110b6b0:	1080201c 	xori	r2,r2,128
8110b6b4:	10bfe004 	addi	r2,r2,-128
8110b6b8:	10800858 	cmpnei	r2,r2,33
8110b6bc:	1000031e 	bne	r2,zero,8110b6cc <vReceiverUartTask+0x120>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
8110b6c0:	00800084 	movi	r2,2
8110b6c4:	e0bfad15 	stw	r2,-332(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110b6c8:	00004b06 	br	8110b7f8 <vReceiverUartTask+0x24c>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        /* If is a Nack, do nothing. The packet will be retransmited by the timeout checker. */
                        if ( xPreParsedReader.cType == NACK_CHAR ) {
8110b6cc:	00a04534 	movhi	r2,33044
8110b6d0:	10933704 	addi	r2,r2,19676
8110b6d4:	10800103 	ldbu	r2,4(r2)
8110b6d8:	10803fcc 	andi	r2,r2,255
8110b6dc:	1080201c 	xori	r2,r2,128
8110b6e0:	10bfe004 	addi	r2,r2,-128
8110b6e4:	108008d8 	cmpnei	r2,r2,35
8110b6e8:	10000a1e 	bne	r2,zero,8110b714 <vReceiverUartTask+0x168>
                            eReaderRXMode = sGetRxUart;
8110b6ec:	00800044 	movi	r2,1
8110b6f0:	e0bfad15 	stw	r2,-332(fp)
                            #ifdef DEBUG_ON
                                debug(fp,"Nack Received. Do nothing!\n");
8110b6f4:	d0a05017 	ldw	r2,-32448(gp)
8110b6f8:	100f883a 	mov	r7,r2
8110b6fc:	018006c4 	movi	r6,27
8110b700:	01400044 	movi	r5,1
8110b704:	01204534 	movhi	r4,33044
8110b708:	21006d04 	addi	r4,r4,436
8110b70c:	111405c0 	call	8111405c <fwrite>
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110b710:	00003906 	br	8110b7f8 <vReceiverUartTask+0x24c>
                            eReaderRXMode = sGetRxUart;
                            #ifdef DEBUG_ON
                                debug(fp,"Nack Received. Do nothing!\n");
                            #endif
                        } else
                            eReaderRXMode = sSendToACKReceiver;
8110b714:	008000c4 	movi	r2,3
8110b718:	e0bfad15 	stw	r2,-332(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110b71c:	00003606 	br	8110b7f8 <vReceiverUartTask+0x24c>

                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
8110b720:	00a04534 	movhi	r2,33044
8110b724:	10933704 	addi	r2,r2,19676
8110b728:	00c008c4 	movi	r3,35
8110b72c:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = '.';
8110b730:	00a04534 	movhi	r2,33044
8110b734:	10933704 	addi	r2,r2,19676
8110b738:	00c00b84 	movi	r3,46
8110b73c:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
8110b740:	00a04534 	movhi	r2,33044
8110b744:	10933704 	addi	r2,r2,19676
8110b748:	00c00044 	movi	r3,1
8110b74c:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110b750:	01204534 	movhi	r4,33044
8110b754:	21133704 	addi	r4,r4,19676
8110b758:	110b9380 	call	8110b938 <setPreAckSenderFreePos>
8110b75c:	e0bfae15 	stw	r2,-328(fp)
                    if ( bSuccess == FALSE ) {
8110b760:	e0bfae17 	ldw	r2,-328(fp)
8110b764:	1000011e 	bne	r2,zero,8110b76c <vReceiverUartTask+0x1c0>
                        vFailSendNack();
8110b768:	11103c80 	call	811103c8 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
8110b76c:	00800044 	movi	r2,1
8110b770:	e0bfad15 	stw	r2,-332(fp)
                }

                break;
8110b774:	00002006 	br	8110b7f8 <vReceiverUartTask+0x24c>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110b778:	01204534 	movhi	r4,33044
8110b77c:	21133704 	addi	r4,r4,19676
8110b780:	110b9380 	call	8110b938 <setPreAckSenderFreePos>
8110b784:	e0bfae15 	stw	r2,-328(fp)
                if ( bSuccess == TRUE ) {
8110b788:	e0bfae17 	ldw	r2,-328(fp)
8110b78c:	10800058 	cmpnei	r2,r2,1
8110b790:	1000081e 	bne	r2,zero,8110b7b4 <vReceiverUartTask+0x208>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
8110b794:	01204534 	movhi	r4,33044
8110b798:	21133704 	addi	r4,r4,19676
8110b79c:	110b7fc0 	call	8110b7fc <setPreParsedFreePos>
8110b7a0:	e0bfae15 	stw	r2,-328(fp)
                    if ( bSuccess == FALSE ) {
8110b7a4:	e0bfae17 	ldw	r2,-328(fp)
8110b7a8:	1000031e 	bne	r2,zero,8110b7b8 <vReceiverUartTask+0x20c>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
8110b7ac:	11104980 	call	81110498 <vFailSetPreParsedBuffer>
8110b7b0:	00000106 	br	8110b7b8 <vReceiverUartTask+0x20c>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
8110b7b4:	11104300 	call	81110430 <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
8110b7b8:	00800044 	movi	r2,1
8110b7bc:	e0bfad15 	stw	r2,-332(fp)
                break;
8110b7c0:	00000d06 	br	8110b7f8 <vReceiverUartTask+0x24c>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
8110b7c4:	01204534 	movhi	r4,33044
8110b7c8:	21133704 	addi	r4,r4,19676
8110b7cc:	110bab40 	call	8110bab4 <setPreAckReceiverFreePos>
8110b7d0:	e0bfae15 	stw	r2,-328(fp)
                if ( bSuccess == FALSE ) {
8110b7d4:	e0bfae17 	ldw	r2,-328(fp)
8110b7d8:	1000011e 	bne	r2,zero,8110b7e0 <vReceiverUartTask+0x234>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
8110b7dc:	11105000 	call	81110500 <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
8110b7e0:	00800044 	movi	r2,1
8110b7e4:	e0bfad15 	stw	r2,-332(fp)
                break;
8110b7e8:	00000306 	br	8110b7f8 <vReceiverUartTask+0x24c>
            default:
                eReaderRXMode = sGetRxUart;
8110b7ec:	00800044 	movi	r2,1
8110b7f0:	e0bfad15 	stw	r2,-332(fp)
                break;
8110b7f4:	0001883a 	nop
        }

    }
8110b7f8:	003f7c06 	br	8110b5ec <__reset+0xfb0eb5ec>

8110b7fc <setPreParsedFreePos>:
}


/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
8110b7fc:	defffb04 	addi	sp,sp,-20
8110b800:	de00012e 	bgeu	sp,et,8110b808 <setPreParsedFreePos+0xc>
8110b804:	003b68fa 	trap	3
8110b808:	dfc00415 	stw	ra,16(sp)
8110b80c:	df000315 	stw	fp,12(sp)
8110b810:	df000304 	addi	fp,sp,12
8110b814:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110b818:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110b81c:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110b820:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexPreParsed, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
8110b824:	d0a05717 	ldw	r2,-32420(gp)
8110b828:	e0fffe44 	addi	r3,fp,-7
8110b82c:	180d883a 	mov	r6,r3
8110b830:	01400284 	movi	r5,10
8110b834:	1009883a 	mov	r4,r2
8110b838:	112fb740 	call	8112fb74 <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110b83c:	e0bffe43 	ldbu	r2,-7(fp)
8110b840:	10803fcc 	andi	r2,r2,255
8110b844:	1000361e 	bne	r2,zero,8110b920 <setPreParsedFreePos+0x124>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_PREPARSED_ENTRIES; i++ )
8110b848:	e03ffe05 	stb	zero,-8(fp)
8110b84c:	00002e06 	br	8110b908 <setPreParsedFreePos+0x10c>
        {
            if ( xPreParsed[i].cType == 0 ) {
8110b850:	e0fffe03 	ldbu	r3,-8(fp)
8110b854:	00a04574 	movhi	r2,33045
8110b858:	108bc804 	addi	r2,r2,12064
8110b85c:	18c01324 	muli	r3,r3,76
8110b860:	10c5883a 	add	r2,r2,r3
8110b864:	10800104 	addi	r2,r2,4
8110b868:	10800003 	ldbu	r2,0(r2)
8110b86c:	10803fcc 	andi	r2,r2,255
8110b870:	1080201c 	xori	r2,r2,128
8110b874:	10bfe004 	addi	r2,r2,-128
8110b878:	1000201e 	bne	r2,zero,8110b8fc <setPreParsedFreePos+0x100>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xPreParsed[i] = (*xPrePReader);
8110b87c:	e0fffe03 	ldbu	r3,-8(fp)
8110b880:	00a04574 	movhi	r2,33045
8110b884:	108bc804 	addi	r2,r2,12064
8110b888:	18c01324 	muli	r3,r3,76
8110b88c:	10c7883a 	add	r3,r2,r3
8110b890:	e0bfff17 	ldw	r2,-4(fp)
8110b894:	1009883a 	mov	r4,r2
8110b898:	00801304 	movi	r2,76
8110b89c:	100d883a 	mov	r6,r2
8110b8a0:	200b883a 	mov	r5,r4
8110b8a4:	1809883a 	mov	r4,r3
8110b8a8:	1114a700 	call	81114a70 <memcpy>
                error_code = OSSemPost(xSemCountPreParsed);
8110b8ac:	d0a05217 	ldw	r2,-32440(gp)
8110b8b0:	1009883a 	mov	r4,r2
8110b8b4:	1131f080 	call	81131f08 <OSSemPost>
8110b8b8:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code == OS_ERR_NONE ) {
8110b8bc:	e0bffe43 	ldbu	r2,-7(fp)
8110b8c0:	10803fcc 	andi	r2,r2,255
8110b8c4:	1000031e 	bne	r2,zero,8110b8d4 <setPreParsedFreePos+0xd8>
                    bSuccess = TRUE;
8110b8c8:	00800044 	movi	r2,1
8110b8cc:	e0bffd15 	stw	r2,-12(fp)
                } else {
                    vFailSendPreParsedSemaphore();
                    xPreParsed[i].cType = 0;
                    bSuccess = FALSE;
                }
                break;
8110b8d0:	00001006 	br	8110b914 <setPreParsedFreePos+0x118>
                xPreParsed[i] = (*xPrePReader);
                error_code = OSSemPost(xSemCountPreParsed);
                if ( error_code == OS_ERR_NONE ) {
                    bSuccess = TRUE;
                } else {
                    vFailSendPreParsedSemaphore();
8110b8d4:	110fae80 	call	8110fae8 <vFailSendPreParsedSemaphore>
                    xPreParsed[i].cType = 0;
8110b8d8:	e0fffe03 	ldbu	r3,-8(fp)
8110b8dc:	00a04574 	movhi	r2,33045
8110b8e0:	108bc804 	addi	r2,r2,12064
8110b8e4:	18c01324 	muli	r3,r3,76
8110b8e8:	10c5883a 	add	r2,r2,r3
8110b8ec:	10800104 	addi	r2,r2,4
8110b8f0:	10000005 	stb	zero,0(r2)
                    bSuccess = FALSE;
8110b8f4:	e03ffd15 	stw	zero,-12(fp)
                }
                break;
8110b8f8:	00000606 	br	8110b914 <setPreParsedFreePos+0x118>
    bSuccess = FALSE;
    OSMutexPend(xMutexPreParsed, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_PREPARSED_ENTRIES; i++ )
8110b8fc:	e0bffe03 	ldbu	r2,-8(fp)
8110b900:	10800044 	addi	r2,r2,1
8110b904:	e0bffe05 	stb	r2,-8(fp)
8110b908:	e0bffe03 	ldbu	r2,-8(fp)
8110b90c:	10800230 	cmpltui	r2,r2,8
8110b910:	103fcf1e 	bne	r2,zero,8110b850 <__reset+0xfb0eb850>
                    bSuccess = FALSE;
                }
                break;
            }
        }
        OSMutexPost(xMutexPreParsed);
8110b914:	d0a05717 	ldw	r2,-32420(gp)
8110b918:	1009883a 	mov	r4,r2
8110b91c:	11301180 	call	81130118 <OSMutexPost>
    }
    return bSuccess;
8110b920:	e0bffd17 	ldw	r2,-12(fp)
}
8110b924:	e037883a 	mov	sp,fp
8110b928:	dfc00117 	ldw	ra,4(sp)
8110b92c:	df000017 	ldw	fp,0(sp)
8110b930:	dec00204 	addi	sp,sp,8
8110b934:	f800283a 	ret

8110b938 <setPreAckSenderFreePos>:



/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
8110b938:	defffb04 	addi	sp,sp,-20
8110b93c:	de00012e 	bgeu	sp,et,8110b944 <setPreAckSenderFreePos+0xc>
8110b940:	003b68fa 	trap	3
8110b944:	dfc00415 	stw	ra,16(sp)
8110b948:	df000315 	stw	fp,12(sp)
8110b94c:	df000304 	addi	fp,sp,12
8110b950:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110b954:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110b958:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110b95c:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexSenderACK, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
8110b960:	d0a05d17 	ldw	r2,-32396(gp)
8110b964:	e0fffe44 	addi	r3,fp,-7
8110b968:	180d883a 	mov	r6,r3
8110b96c:	01400284 	movi	r5,10
8110b970:	1009883a 	mov	r4,r2
8110b974:	112fb740 	call	8112fb74 <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110b978:	e0bffe43 	ldbu	r2,-7(fp)
8110b97c:	10803fcc 	andi	r2,r2,255
8110b980:	1000461e 	bne	r2,zero,8110ba9c <setPreAckSenderFreePos+0x164>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for(i = 0; i < N_ACKS_SENDER; i++)
8110b984:	e03ffe05 	stb	zero,-8(fp)
8110b988:	00003e06 	br	8110ba84 <setPreAckSenderFreePos+0x14c>
        {
            if ( xSenderACK[i].cType == 0 ) {
8110b98c:	e0fffe03 	ldbu	r3,-8(fp)
8110b990:	00a04574 	movhi	r2,33045
8110b994:	108bc004 	addi	r2,r2,12032
8110b998:	18c7883a 	add	r3,r3,r3
8110b99c:	18c7883a 	add	r3,r3,r3
8110b9a0:	10c5883a 	add	r2,r2,r3
8110b9a4:	10800003 	ldbu	r2,0(r2)
8110b9a8:	10803fcc 	andi	r2,r2,255
8110b9ac:	1080201c 	xori	r2,r2,128
8110b9b0:	10bfe004 	addi	r2,r2,-128
8110b9b4:	1000301e 	bne	r2,zero,8110ba78 <setPreAckSenderFreePos+0x140>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xSenderACK[i].cType = xPrePReader->cType;
8110b9b8:	e0fffe03 	ldbu	r3,-8(fp)
8110b9bc:	e0bfff17 	ldw	r2,-4(fp)
8110b9c0:	11000103 	ldbu	r4,4(r2)
8110b9c4:	00a04574 	movhi	r2,33045
8110b9c8:	108bc004 	addi	r2,r2,12032
8110b9cc:	18c7883a 	add	r3,r3,r3
8110b9d0:	18c7883a 	add	r3,r3,r3
8110b9d4:	10c5883a 	add	r2,r2,r3
8110b9d8:	11000005 	stb	r4,0(r2)
                xSenderACK[i].cCommand = xPrePReader->cCommand;
8110b9dc:	e0fffe03 	ldbu	r3,-8(fp)
8110b9e0:	e0bfff17 	ldw	r2,-4(fp)
8110b9e4:	11000143 	ldbu	r4,5(r2)
8110b9e8:	00a04574 	movhi	r2,33045
8110b9ec:	108bc004 	addi	r2,r2,12032
8110b9f0:	18c7883a 	add	r3,r3,r3
8110b9f4:	18c7883a 	add	r3,r3,r3
8110b9f8:	10c5883a 	add	r2,r2,r3
8110b9fc:	10800044 	addi	r2,r2,1
8110ba00:	11000005 	stb	r4,0(r2)
                xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
8110ba04:	e0fffe03 	ldbu	r3,-8(fp)
8110ba08:	e0bfff17 	ldw	r2,-4(fp)
8110ba0c:	1100020b 	ldhu	r4,8(r2)
8110ba10:	00a04574 	movhi	r2,33045
8110ba14:	108bc004 	addi	r2,r2,12032
8110ba18:	18c7883a 	add	r3,r3,r3
8110ba1c:	18c7883a 	add	r3,r3,r3
8110ba20:	10c5883a 	add	r2,r2,r3
8110ba24:	10800084 	addi	r2,r2,2
8110ba28:	1100000d 	sth	r4,0(r2)

                error_code = OSSemPost(xSemCountSenderACK);
8110ba2c:	d0a04f17 	ldw	r2,-32452(gp)
8110ba30:	1009883a 	mov	r4,r2
8110ba34:	1131f080 	call	81131f08 <OSSemPost>
8110ba38:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code != OS_ERR_NONE ) {
8110ba3c:	e0bffe43 	ldbu	r2,-7(fp)
8110ba40:	10803fcc 	andi	r2,r2,255
8110ba44:	10000926 	beq	r2,zero,8110ba6c <setPreAckSenderFreePos+0x134>
                    vFailSendPreAckSenderSemaphore();
8110ba48:	110fb800 	call	8110fb80 <vFailSendPreAckSenderSemaphore>
                    xSenderACK[i].cType = 0;
8110ba4c:	e0fffe03 	ldbu	r3,-8(fp)
8110ba50:	00a04574 	movhi	r2,33045
8110ba54:	108bc004 	addi	r2,r2,12032
8110ba58:	18c7883a 	add	r3,r3,r3
8110ba5c:	18c7883a 	add	r3,r3,r3
8110ba60:	10c5883a 	add	r2,r2,r3
8110ba64:	10000005 	stb	zero,0(r2)
                } else
                    bSuccess = TRUE;
                break;
8110ba68:	00000906 	br	8110ba90 <setPreAckSenderFreePos+0x158>
                error_code = OSSemPost(xSemCountSenderACK);
                if ( error_code != OS_ERR_NONE ) {
                    vFailSendPreAckSenderSemaphore();
                    xSenderACK[i].cType = 0;
                } else
                    bSuccess = TRUE;
8110ba6c:	00800044 	movi	r2,1
8110ba70:	e0bffd15 	stw	r2,-12(fp)
                break;
8110ba74:	00000606 	br	8110ba90 <setPreAckSenderFreePos+0x158>
    bSuccess = FALSE;
    OSMutexPend(xMutexSenderACK, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for(i = 0; i < N_ACKS_SENDER; i++)
8110ba78:	e0bffe03 	ldbu	r2,-8(fp)
8110ba7c:	10800044 	addi	r2,r2,1
8110ba80:	e0bffe05 	stb	r2,-8(fp)
8110ba84:	e0bffe03 	ldbu	r2,-8(fp)
8110ba88:	10800230 	cmpltui	r2,r2,8
8110ba8c:	103fbf1e 	bne	r2,zero,8110b98c <__reset+0xfb0eb98c>
                } else
                    bSuccess = TRUE;
                break;
            }
        }
        OSMutexPost(xMutexSenderACK);
8110ba90:	d0a05d17 	ldw	r2,-32396(gp)
8110ba94:	1009883a 	mov	r4,r2
8110ba98:	11301180 	call	81130118 <OSMutexPost>
    }

    return bSuccess;
8110ba9c:	e0bffd17 	ldw	r2,-12(fp)
}
8110baa0:	e037883a 	mov	sp,fp
8110baa4:	dfc00117 	ldw	ra,4(sp)
8110baa8:	df000017 	ldw	fp,0(sp)
8110baac:	dec00204 	addi	sp,sp,8
8110bab0:	f800283a 	ret

8110bab4 <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
8110bab4:	defffb04 	addi	sp,sp,-20
8110bab8:	de00012e 	bgeu	sp,et,8110bac0 <setPreAckReceiverFreePos+0xc>
8110babc:	003b68fa 	trap	3
8110bac0:	dfc00415 	stw	ra,16(sp)
8110bac4:	df000315 	stw	fp,12(sp)
8110bac8:	df000304 	addi	fp,sp,12
8110bacc:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110bad0:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110bad4:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110bad8:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexReceivedACK, 20, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 20 ticks = 20 ms */
8110badc:	d0a05317 	ldw	r2,-32436(gp)
8110bae0:	e0fffe44 	addi	r3,fp,-7
8110bae4:	180d883a 	mov	r6,r3
8110bae8:	01400504 	movi	r5,20
8110baec:	1009883a 	mov	r4,r2
8110baf0:	112fb740 	call	8112fb74 <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110baf4:	e0bffe43 	ldbu	r2,-7(fp)
8110baf8:	10803fcc 	andi	r2,r2,255
8110bafc:	1000471e 	bne	r2,zero,8110bc1c <setPreAckReceiverFreePos+0x168>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_ACKS_RECEIVED; i++ )
8110bb00:	e03ffe05 	stb	zero,-8(fp)
8110bb04:	00003e06 	br	8110bc00 <setPreAckReceiverFreePos+0x14c>
        {
            if ( xReceivedACK[i].cType == 0 ) {
8110bb08:	e0fffe03 	ldbu	r3,-8(fp)
8110bb0c:	00a04574 	movhi	r2,33045
8110bb10:	10bfb604 	addi	r2,r2,-296
8110bb14:	18c7883a 	add	r3,r3,r3
8110bb18:	18c7883a 	add	r3,r3,r3
8110bb1c:	10c5883a 	add	r2,r2,r3
8110bb20:	10800003 	ldbu	r2,0(r2)
8110bb24:	10803fcc 	andi	r2,r2,255
8110bb28:	1080201c 	xori	r2,r2,128
8110bb2c:	10bfe004 	addi	r2,r2,-128
8110bb30:	1000301e 	bne	r2,zero,8110bbf4 <setPreAckReceiverFreePos+0x140>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xReceivedACK[i].cType = xPrePReader->cType;
8110bb34:	e0fffe03 	ldbu	r3,-8(fp)
8110bb38:	e0bfff17 	ldw	r2,-4(fp)
8110bb3c:	11000103 	ldbu	r4,4(r2)
8110bb40:	00a04574 	movhi	r2,33045
8110bb44:	10bfb604 	addi	r2,r2,-296
8110bb48:	18c7883a 	add	r3,r3,r3
8110bb4c:	18c7883a 	add	r3,r3,r3
8110bb50:	10c5883a 	add	r2,r2,r3
8110bb54:	11000005 	stb	r4,0(r2)
                xReceivedACK[i].cCommand = xPrePReader->cCommand;
8110bb58:	e0fffe03 	ldbu	r3,-8(fp)
8110bb5c:	e0bfff17 	ldw	r2,-4(fp)
8110bb60:	11000143 	ldbu	r4,5(r2)
8110bb64:	00a04574 	movhi	r2,33045
8110bb68:	10bfb604 	addi	r2,r2,-296
8110bb6c:	18c7883a 	add	r3,r3,r3
8110bb70:	18c7883a 	add	r3,r3,r3
8110bb74:	10c5883a 	add	r2,r2,r3
8110bb78:	10800044 	addi	r2,r2,1
8110bb7c:	11000005 	stb	r4,0(r2)
                xReceivedACK[i].usiId = xPrePReader->usiValues[0];
8110bb80:	e0fffe03 	ldbu	r3,-8(fp)
8110bb84:	e0bfff17 	ldw	r2,-4(fp)
8110bb88:	1100020b 	ldhu	r4,8(r2)
8110bb8c:	00a04574 	movhi	r2,33045
8110bb90:	10bfb604 	addi	r2,r2,-296
8110bb94:	18c7883a 	add	r3,r3,r3
8110bb98:	18c7883a 	add	r3,r3,r3
8110bb9c:	10c5883a 	add	r2,r2,r3
8110bba0:	10800084 	addi	r2,r2,2
8110bba4:	1100000d 	sth	r4,0(r2)

                error_code = OSSemPost(xSemCountReceivedACK);
8110bba8:	d0a05417 	ldw	r2,-32432(gp)
8110bbac:	1009883a 	mov	r4,r2
8110bbb0:	1131f080 	call	81131f08 <OSSemPost>
8110bbb4:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code == OS_ERR_NONE ) {
8110bbb8:	e0bffe43 	ldbu	r2,-7(fp)
8110bbbc:	10803fcc 	andi	r2,r2,255
8110bbc0:	1000031e 	bne	r2,zero,8110bbd0 <setPreAckReceiverFreePos+0x11c>
                    bSuccess = TRUE;
8110bbc4:	00800044 	movi	r2,1
8110bbc8:	e0bffd15 	stw	r2,-12(fp)
                } else {
                    vFailSendPreAckReceiverSemaphore();
                    xReceivedACK[i].cType = 0;
                }
                break;
8110bbcc:	00000f06 	br	8110bc0c <setPreAckReceiverFreePos+0x158>

                error_code = OSSemPost(xSemCountReceivedACK);
                if ( error_code == OS_ERR_NONE ) {
                    bSuccess = TRUE;
                } else {
                    vFailSendPreAckReceiverSemaphore();
8110bbd0:	110fb340 	call	8110fb34 <vFailSendPreAckReceiverSemaphore>
                    xReceivedACK[i].cType = 0;
8110bbd4:	e0fffe03 	ldbu	r3,-8(fp)
8110bbd8:	00a04574 	movhi	r2,33045
8110bbdc:	10bfb604 	addi	r2,r2,-296
8110bbe0:	18c7883a 	add	r3,r3,r3
8110bbe4:	18c7883a 	add	r3,r3,r3
8110bbe8:	10c5883a 	add	r2,r2,r3
8110bbec:	10000005 	stb	zero,0(r2)
                }
                break;
8110bbf0:	00000606 	br	8110bc0c <setPreAckReceiverFreePos+0x158>
    bSuccess = FALSE;
    OSMutexPend(xMutexReceivedACK, 20, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 20 ticks = 20 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_ACKS_RECEIVED; i++ )
8110bbf4:	e0bffe03 	ldbu	r2,-8(fp)
8110bbf8:	10800044 	addi	r2,r2,1
8110bbfc:	e0bffe05 	stb	r2,-8(fp)
8110bc00:	e0bffe03 	ldbu	r2,-8(fp)
8110bc04:	108001b0 	cmpltui	r2,r2,6
8110bc08:	103fbf1e 	bne	r2,zero,8110bb08 <__reset+0xfb0ebb08>
                    xReceivedACK[i].cType = 0;
                }
                break;
            }
        }
        OSMutexPost(xMutexReceivedACK);
8110bc0c:	d0a05317 	ldw	r2,-32436(gp)
8110bc10:	1009883a 	mov	r4,r2
8110bc14:	11301180 	call	81130118 <OSMutexPost>
8110bc18:	00000706 	br	8110bc38 <setPreAckReceiverFreePos+0x184>
    } else {
        /* Could not  */
        #ifdef DEBUG_ON
            debug(fp,"Could not put the ack packet receiveid in the queue. (setPreAckReceiverFreePos)\n");
8110bc1c:	d0a05017 	ldw	r2,-32448(gp)
8110bc20:	100f883a 	mov	r7,r2
8110bc24:	01801404 	movi	r6,80
8110bc28:	01400044 	movi	r5,1
8110bc2c:	01204534 	movhi	r4,33044
8110bc30:	21007404 	addi	r4,r4,464
8110bc34:	111405c0 	call	8111405c <fwrite>
        #endif
    }

    return bSuccess;
8110bc38:	e0bffd17 	ldw	r2,-12(fp)
}
8110bc3c:	e037883a 	mov	sp,fp
8110bc40:	dfc00117 	ldw	ra,4(sp)
8110bc44:	df000017 	ldw	fp,0(sp)
8110bc48:	dec00204 	addi	sp,sp,8
8110bc4c:	f800283a 	ret

8110bc50 <bPreParserV2>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParserV2( char *buffer, tPreParsed *xPerParcedBuffer )
{
8110bc50:	defff404 	addi	sp,sp,-48
8110bc54:	de00012e 	bgeu	sp,et,8110bc5c <bPreParserV2+0xc>
8110bc58:	003b68fa 	trap	3
8110bc5c:	dfc00b15 	stw	ra,44(sp)
8110bc60:	df000a15 	stw	fp,40(sp)
8110bc64:	dc000915 	stw	r16,36(sp)
8110bc68:	df000a04 	addi	fp,sp,40
8110bc6c:	e13ffd15 	stw	r4,-12(fp)
8110bc70:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110bc74:	e03ff615 	stw	zero,-40(fp)
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */


    bSuccess = FALSE;
8110bc78:	e03ff615 	stw	zero,-40(fp)

    siStrLen = strnlen(buffer, SIZE_RCV_BUFFER);
8110bc7c:	01402004 	movi	r5,128
8110bc80:	e13ffd17 	ldw	r4,-12(fp)
8110bc84:	111561c0 	call	8111561c <strnlen>
8110bc88:	e0bff90d 	sth	r2,-28(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110bc8c:	01400ec4 	movi	r5,59
8110bc90:	e13ffd17 	ldw	r4,-12(fp)
8110bc94:	110e6080 	call	8110e608 <siPosStr>
8110bc98:	e0bff98d 	sth	r2,-26(fp)

    /* Check the protocol terminator char ';' */
    if ( (siTeminador != (siStrLen-1)) )
8110bc9c:	e0fff98f 	ldh	r3,-26(fp)
8110bca0:	e0bff90f 	ldh	r2,-28(fp)
8110bca4:	10bfffc4 	addi	r2,r2,-1
8110bca8:	18800226 	beq	r3,r2,8110bcb4 <bPreParserV2+0x64>
        return bSuccess;
8110bcac:	e0bff617 	ldw	r2,-40(fp)
8110bcb0:	0000ba06 	br	8110bf9c <bPreParserV2+0x34c>

    siCRC = siPosStr(buffer, SEPARATOR_CRC);
8110bcb4:	01401f04 	movi	r5,124
8110bcb8:	e13ffd17 	ldw	r4,-12(fp)
8110bcbc:	110e6080 	call	8110e608 <siPosStr>
8110bcc0:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there's an CRC char */
    if ( siCRC > siTeminador )
8110bcc4:	e0bffa0f 	ldh	r2,-24(fp)
8110bcc8:	e0fff98f 	ldh	r3,-26(fp)
8110bccc:	1880020e 	bge	r3,r2,8110bcd8 <bPreParserV2+0x88>
        return bSuccess;
8110bcd0:	e0bff617 	ldw	r2,-40(fp)
8110bcd4:	0000b106 	br	8110bf9c <bPreParserV2+0x34c>

    siIni = strcspn( buffer , ALL_INI_CHAR ); /* Verify if there's any one of the initial characters */
8110bcd8:	01604534 	movhi	r5,33044
8110bcdc:	29408904 	addi	r5,r5,548
8110bce0:	e13ffd17 	ldw	r4,-12(fp)
8110bce4:	11155380 	call	81115538 <strcspn>
8110bce8:	e0bffa8d 	sth	r2,-22(fp)

    /* Check if there's any initial char protocol and if is before the crc char */
    if ( siIni > siCRC)
8110bcec:	e0bffa8f 	ldh	r2,-22(fp)
8110bcf0:	e0fffa0f 	ldh	r3,-24(fp)
8110bcf4:	1880020e 	bge	r3,r2,8110bd00 <bPreParserV2+0xb0>
        return bSuccess;
8110bcf8:	e0bff617 	ldw	r2,-40(fp)
8110bcfc:	0000a706 	br	8110bf9c <bPreParserV2+0x34c>

    
    /*" ---> At this point we validate the existence and position of all characters in for the protocol in the message "*/


    xPerParcedBuffer->cType = buffer[siIni];
8110bd00:	e0bffa8f 	ldh	r2,-22(fp)
8110bd04:	e0fffd17 	ldw	r3,-12(fp)
8110bd08:	1885883a 	add	r2,r3,r2
8110bd0c:	10c00003 	ldbu	r3,0(r2)
8110bd10:	e0bffe17 	ldw	r2,-8(fp)
8110bd14:	10c00105 	stb	r3,4(r2)
    if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110bd18:	e0bffe17 	ldw	r2,-8(fp)
8110bd1c:	10800103 	ldbu	r2,4(r2)
8110bd20:	10803fcc 	andi	r2,r2,255
8110bd24:	1080201c 	xori	r2,r2,128
8110bd28:	10bfe004 	addi	r2,r2,-128
8110bd2c:	108008d8 	cmpnei	r2,r2,35
8110bd30:	1000041e 	bne	r2,zero,8110bd44 <bPreParserV2+0xf4>
        bSuccess = TRUE;
8110bd34:	00800044 	movi	r2,1
8110bd38:	e0bff615 	stw	r2,-40(fp)
        return bSuccess;
8110bd3c:	e0bff617 	ldw	r2,-40(fp)
8110bd40:	00009606 	br	8110bf9c <bPreParserV2+0x34c>


    /*" ---> At this point the packet is a Resquest, Reply or ACK packet"*/


    xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit( &buffer[siIni] , (siCRC - siIni) );
8110bd44:	e0bffa8f 	ldh	r2,-22(fp)
8110bd48:	e0fffd17 	ldw	r3,-12(fp)
8110bd4c:	1889883a 	add	r4,r3,r2
8110bd50:	e0fffa0f 	ldh	r3,-24(fp)
8110bd54:	e0bffa8f 	ldh	r2,-22(fp)
8110bd58:	1885c83a 	sub	r2,r3,r2
8110bd5c:	100b883a 	mov	r5,r2
8110bd60:	110f7e00 	call	8110f7e0 <ucCrc8wInit>
8110bd64:	1007883a 	mov	r3,r2
8110bd68:	e0bffe17 	ldw	r2,-8(fp)
8110bd6c:	10c01205 	stb	r3,72(r2)

    xPerParcedBuffer->cCommand = buffer[siIni+1];
8110bd70:	e0bffa8f 	ldh	r2,-22(fp)
8110bd74:	10800044 	addi	r2,r2,1
8110bd78:	e0fffd17 	ldw	r3,-12(fp)
8110bd7c:	1885883a 	add	r2,r3,r2
8110bd80:	10c00003 	ldbu	r3,0(r2)
8110bd84:	e0bffe17 	ldw	r2,-8(fp)
8110bd88:	10c00145 	stb	r3,5(r2)
    xPerParcedBuffer->ucNofBytes = 0;
8110bd8c:	e0bffe17 	ldw	r2,-8(fp)
8110bd90:	10000185 	stb	zero,6(r2)

    memset( xPerParcedBuffer->usiValues , 0x00 , sizeof(xPerParcedBuffer->usiValues) );
8110bd94:	e0bffe17 	ldw	r2,-8(fp)
8110bd98:	10800204 	addi	r2,r2,8
8110bd9c:	01801004 	movi	r6,64
8110bda0:	000b883a 	mov	r5,zero
8110bda4:	1009883a 	mov	r4,r2
8110bda8:	1114bc00 	call	81114bc0 <memset>

    i = siIni + 3; /* "?C:i..." */
8110bdac:	e0bffa8b 	ldhu	r2,-22(fp)
8110bdb0:	108000c4 	addi	r2,r2,3
8110bdb4:	e0bff705 	stb	r2,-36(fp)
    do {
        p_inteiro = inteiro;
8110bdb8:	e0bffb44 	addi	r2,fp,-19
8110bdbc:	e0bff815 	stw	r2,-32(fp)
        memset( &(inteiro) , 0 , sizeof( inteiro ) );
8110bdc0:	e0bffb44 	addi	r2,fp,-19
8110bdc4:	01800184 	movi	r6,6
8110bdc8:	000b883a 	mov	r5,zero
8110bdcc:	1009883a 	mov	r4,r2
8110bdd0:	1114bc00 	call	81114bc0 <memset>
        do {
            c = buffer[i];
8110bdd4:	e0bff703 	ldbu	r2,-36(fp)
8110bdd8:	e0fffd17 	ldw	r3,-12(fp)
8110bddc:	1885883a 	add	r2,r3,r2
8110bde0:	10800003 	ldbu	r2,0(r2)
8110bde4:	e0bffb05 	stb	r2,-20(fp)
            if ( isdigit( c ) ) {
8110bde8:	d0e00317 	ldw	r3,-32756(gp)
8110bdec:	e0bffb07 	ldb	r2,-20(fp)
8110bdf0:	10800044 	addi	r2,r2,1
8110bdf4:	1885883a 	add	r2,r3,r2
8110bdf8:	10800003 	ldbu	r2,0(r2)
8110bdfc:	10803fcc 	andi	r2,r2,255
8110be00:	1080010c 	andi	r2,r2,4
8110be04:	10000626 	beq	r2,zero,8110be20 <bPreParserV2+0x1d0>
                (*p_inteiro) = c;
8110be08:	e0bff817 	ldw	r2,-32(fp)
8110be0c:	e0fffb03 	ldbu	r3,-20(fp)
8110be10:	10c00005 	stb	r3,0(r2)
                p_inteiro++;
8110be14:	e0bff817 	ldw	r2,-32(fp)
8110be18:	10800044 	addi	r2,r2,1
8110be1c:	e0bff815 	stw	r2,-32(fp)
            }
            i++;
8110be20:	e0bff703 	ldbu	r2,-36(fp)
8110be24:	10800044 	addi	r2,r2,1
8110be28:	e0bff705 	stb	r2,-36(fp)
        } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
8110be2c:	e0bff90f 	ldh	r2,-28(fp)
8110be30:	e0fff703 	ldbu	r3,-36(fp)
8110be34:	1880090e 	bge	r3,r2,8110be5c <bPreParserV2+0x20c>
8110be38:	e0bffb07 	ldb	r2,-20(fp)
8110be3c:	10800ea0 	cmpeqi	r2,r2,58
8110be40:	1000061e 	bne	r2,zero,8110be5c <bPreParserV2+0x20c>
8110be44:	e0bffb07 	ldb	r2,-20(fp)
8110be48:	10800ee0 	cmpeqi	r2,r2,59
8110be4c:	1000031e 	bne	r2,zero,8110be5c <bPreParserV2+0x20c>
8110be50:	e0bffb07 	ldb	r2,-20(fp)
8110be54:	10801f18 	cmpnei	r2,r2,124
8110be58:	103fde1e 	bne	r2,zero,8110bdd4 <__reset+0xfb0ebdd4>
        (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110be5c:	e0bff817 	ldw	r2,-32(fp)
8110be60:	00c00284 	movi	r3,10
8110be64:	10c00005 	stb	r3,0(r2)

        if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
8110be68:	e0bffb07 	ldb	r2,-20(fp)
8110be6c:	10800ea0 	cmpeqi	r2,r2,58
8110be70:	1000031e 	bne	r2,zero,8110be80 <bPreParserV2+0x230>
8110be74:	e0bffb07 	ldb	r2,-20(fp)
8110be78:	10801f18 	cmpnei	r2,r2,124
8110be7c:	10001a1e 	bne	r2,zero,8110bee8 <bPreParserV2+0x298>
            xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
8110be80:	e0bffe17 	ldw	r2,-8(fp)
8110be84:	10800183 	ldbu	r2,6(r2)
8110be88:	10803fcc 	andi	r2,r2,255
8110be8c:	10800828 	cmpgeui	r2,r2,32
8110be90:	1000041e 	bne	r2,zero,8110bea4 <bPreParserV2+0x254>
8110be94:	e0bffe17 	ldw	r2,-8(fp)
8110be98:	10800183 	ldbu	r2,6(r2)
8110be9c:	14003fcc 	andi	r16,r2,255
8110bea0:	00000106 	br	8110bea8 <bPreParserV2+0x258>
8110bea4:	04000804 	movi	r16,32
8110bea8:	e0bffb44 	addi	r2,fp,-19
8110beac:	1009883a 	mov	r4,r2
8110beb0:	11138640 	call	81113864 <atoi>
8110beb4:	1009883a 	mov	r4,r2
8110beb8:	e0fffe17 	ldw	r3,-8(fp)
8110bebc:	80800104 	addi	r2,r16,4
8110bec0:	1085883a 	add	r2,r2,r2
8110bec4:	1885883a 	add	r2,r3,r2
8110bec8:	1100000d 	sth	r4,0(r2)
            xPerParcedBuffer->ucNofBytes++;
8110becc:	e0bffe17 	ldw	r2,-8(fp)
8110bed0:	10800183 	ldbu	r2,6(r2)
8110bed4:	10800044 	addi	r2,r2,1
8110bed8:	1007883a 	mov	r3,r2
8110bedc:	e0bffe17 	ldw	r2,-8(fp)
8110bee0:	10c00185 	stb	r3,6(r2)
8110bee4:	00000906 	br	8110bf0c <bPreParserV2+0x2bc>
        }
        else if ( c == FINAL_CHAR )
8110bee8:	e0bffb07 	ldb	r2,-20(fp)
8110beec:	10800ed8 	cmpnei	r2,r2,59
8110bef0:	1000061e 	bne	r2,zero,8110bf0c <bPreParserV2+0x2bc>
        {
            xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
8110bef4:	e0bffb44 	addi	r2,fp,-19
8110bef8:	1009883a 	mov	r4,r2
8110befc:	11138640 	call	81113864 <atoi>
8110bf00:	1007883a 	mov	r3,r2
8110bf04:	e0bffe17 	ldw	r2,-8(fp)
8110bf08:	10c01245 	stb	r3,73(r2)
        }

    } while ( (c != FINAL_CHAR) && (siStrLen>i) );
8110bf0c:	e0bffb07 	ldb	r2,-20(fp)
8110bf10:	10800ee0 	cmpeqi	r2,r2,59
8110bf14:	1000031e 	bne	r2,zero,8110bf24 <bPreParserV2+0x2d4>
8110bf18:	e0bff90f 	ldh	r2,-28(fp)
8110bf1c:	e0fff703 	ldbu	r3,-36(fp)
8110bf20:	18bfa516 	blt	r3,r2,8110bdb8 <__reset+0xfb0ebdb8>


    if ( c == FINAL_CHAR )
8110bf24:	e0bffb07 	ldb	r2,-20(fp)
8110bf28:	10800ed8 	cmpnei	r2,r2,59
8110bf2c:	1000191e 	bne	r2,zero,8110bf94 <bPreParserV2+0x344>
        if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
8110bf30:	e0bffe17 	ldw	r2,-8(fp)
8110bf34:	10c01243 	ldbu	r3,73(r2)
8110bf38:	e0bffe17 	ldw	r2,-8(fp)
8110bf3c:	10801203 	ldbu	r2,72(r2)
8110bf40:	18c03fcc 	andi	r3,r3,255
8110bf44:	10803fcc 	andi	r2,r2,255
8110bf48:	1880031e 	bne	r3,r2,8110bf58 <bPreParserV2+0x308>
            bSuccess = TRUE;
8110bf4c:	00800044 	movi	r2,1
8110bf50:	e0bff615 	stw	r2,-40(fp)
8110bf54:	00001006 	br	8110bf98 <bPreParserV2+0x348>
        } else {
            /* Wrong CRC */
            #ifdef DEBUG_ON
                fprintf(fp,"Wrong CRC. Expected = %hhu, received = %hhu\n", xPerParcedBuffer->ucCalculatedCRC8, xPerParcedBuffer->ucMessageCRC8 );
8110bf58:	d0e05017 	ldw	r3,-32448(gp)
8110bf5c:	e0bffe17 	ldw	r2,-8(fp)
8110bf60:	10801203 	ldbu	r2,72(r2)
8110bf64:	11003fcc 	andi	r4,r2,255
8110bf68:	e0bffe17 	ldw	r2,-8(fp)
8110bf6c:	10801243 	ldbu	r2,73(r2)
8110bf70:	10803fcc 	andi	r2,r2,255
8110bf74:	100f883a 	mov	r7,r2
8110bf78:	200d883a 	mov	r6,r4
8110bf7c:	01604534 	movhi	r5,33044
8110bf80:	29408b04 	addi	r5,r5,556
8110bf84:	1809883a 	mov	r4,r3
8110bf88:	11139c00 	call	811139c0 <fprintf>
            #endif
            bSuccess = FALSE;
8110bf8c:	e03ff615 	stw	zero,-40(fp)
8110bf90:	00000106 	br	8110bf98 <bPreParserV2+0x348>
        }
    else
        bSuccess = FALSE; /* Index overflow in the buffer */
8110bf94:	e03ff615 	stw	zero,-40(fp)


    return bSuccess;
8110bf98:	e0bff617 	ldw	r2,-40(fp)
}
8110bf9c:	e6ffff04 	addi	sp,fp,-4
8110bfa0:	dfc00217 	ldw	ra,8(sp)
8110bfa4:	df000117 	ldw	fp,4(sp)
8110bfa8:	dc000017 	ldw	r16,0(sp)
8110bfac:	dec00304 	addi	sp,sp,12
8110bfb0:	f800283a 	ret

8110bfb4 <vSenderComTask>:


OS_STK_DATA *pdata;

void vSenderComTask(void *task_data)
{
8110bfb4:	defff804 	addi	sp,sp,-32
8110bfb8:	de00012e 	bgeu	sp,et,8110bfc0 <vSenderComTask+0xc>
8110bfbc:	003b68fa 	trap	3
8110bfc0:	dfc00715 	stw	ra,28(sp)
8110bfc4:	df000615 	stw	fp,24(sp)
8110bfc8:	df000604 	addi	fp,sp,24
8110bfcc:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    OS_STK_DATA data;
    bool bSuccess;
    int desligarEm = 0;
8110bfd0:	e03ffb15 	stw	zero,-20(fp)

    eSenderMode = sConfiguringSender;
8110bfd4:	e03ffa15 	stw	zero,-24(fp)

    #ifdef DEBUG_ON
        debug(fp,"Sender Comm Task. (Task on)\n");
8110bfd8:	d0a05017 	ldw	r2,-32448(gp)
8110bfdc:	100f883a 	mov	r7,r2
8110bfe0:	01800704 	movi	r6,28
8110bfe4:	01400044 	movi	r5,1
8110bfe8:	01204534 	movhi	r4,33044
8110bfec:	21009704 	addi	r4,r4,604
8110bff0:	111405c0 	call	8111405c <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110bff4:	e0bffa17 	ldw	r2,-24(fp)
8110bff8:	10c00060 	cmpeqi	r3,r2,1
8110bffc:	1800091e 	bne	r3,zero,8110c024 <vSenderComTask+0x70>
8110c000:	0080052e 	bgeu	zero,r2,8110c018 <vSenderComTask+0x64>
8110c004:	10c000a0 	cmpeqi	r3,r2,2
8110c008:	1800471e 	bne	r3,zero,8110c128 <vSenderComTask+0x174>
8110c00c:	10800160 	cmpeqi	r2,r2,5
8110c010:	10002c1e 	bne	r2,zero,8110c0c4 <vSenderComTask+0x110>
8110c014:	00003a06 	br	8110c100 <vSenderComTask+0x14c>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
8110c018:	00800044 	movi	r2,1
8110c01c:	e0bffa15 	stw	r2,-24(fp)
                break;
8110c020:	00004206 	br	8110c12c <vSenderComTask+0x178>
                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/

                #ifdef DEBUG_ON
                    debug(fp,"Preparing the Start Sequence.\n");
8110c024:	d0a05017 	ldw	r2,-32448(gp)
8110c028:	100f883a 	mov	r7,r2
8110c02c:	01800784 	movi	r6,30
8110c030:	01400044 	movi	r5,1
8110c034:	01204534 	movhi	r4,33044
8110c038:	21009f04 	addi	r4,r4,636
8110c03c:	111405c0 	call	8111405c <fwrite>
                #endif

                /* id of the first message will be 1 */
                bSuccess = bSendUART32v2(START_STATUS_SEQUENCE, 1);
8110c040:	01400044 	movi	r5,1
8110c044:	01204534 	movhi	r4,33044
8110c048:	2100a704 	addi	r4,r4,668
8110c04c:	110de180 	call	8110de18 <bSendUART32v2>
8110c050:	e0bffc15 	stw	r2,-16(fp)
                if ( bSuccess == TRUE ) {
8110c054:	e0bffc17 	ldw	r2,-16(fp)
8110c058:	10800058 	cmpnei	r2,r2,1
8110c05c:	10000a1e 	bne	r2,zero,8110c088 <vSenderComTask+0xd4>
                    eSenderMode = sDummySender;
8110c060:	00800144 	movi	r2,5
8110c064:	e0bffa15 	stw	r2,-24(fp)
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
8110c068:	d0a05017 	ldw	r2,-32448(gp)
8110c06c:	100f883a 	mov	r7,r2
8110c070:	01800d44 	movi	r6,53
8110c074:	01400044 	movi	r5,1
8110c078:	01204534 	movhi	r4,33044
8110c07c:	2100aa04 	addi	r4,r4,680
8110c080:	111405c0 	call	8111405c <fwrite>
                        debug(fp,"Fail, try again in 5 seconds.\n");
                    #endif 
                    eSenderMode = sStartingConnSender;
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }
                break;
8110c084:	00002906 	br	8110c12c <vSenderComTask+0x178>
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
                    #endif                    
                } else {
                    #ifdef DEBUG_ON
                        debug(fp,"Fail, try again in 5 seconds.\n");
8110c088:	d0a05017 	ldw	r2,-32448(gp)
8110c08c:	100f883a 	mov	r7,r2
8110c090:	01800784 	movi	r6,30
8110c094:	01400044 	movi	r5,1
8110c098:	01204534 	movhi	r4,33044
8110c09c:	2100b804 	addi	r4,r4,736
8110c0a0:	111405c0 	call	8111405c <fwrite>
                    #endif 
                    eSenderMode = sStartingConnSender;
8110c0a4:	00800044 	movi	r2,1
8110c0a8:	e0bffa15 	stw	r2,-24(fp)
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
8110c0ac:	000f883a 	mov	r7,zero
8110c0b0:	01800144 	movi	r6,5
8110c0b4:	000b883a 	mov	r5,zero
8110c0b8:	0009883a 	mov	r4,zero
8110c0bc:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
                }
                break;
8110c0c0:	00001a06 	br	8110c12c <vSenderComTask+0x178>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
8110c0c4:	00800144 	movi	r2,5
8110c0c8:	e0bffa15 	stw	r2,-24(fp)

                #ifdef DEBUG_ON
                    debug(fp,"sDummySender\n");
8110c0cc:	d0a05017 	ldw	r2,-32448(gp)
8110c0d0:	100f883a 	mov	r7,r2
8110c0d4:	01800344 	movi	r6,13
8110c0d8:	01400044 	movi	r5,1
8110c0dc:	01204534 	movhi	r4,33044
8110c0e0:	2100c004 	addi	r4,r4,768
8110c0e4:	111405c0 	call	8111405c <fwrite>
                #endif

				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
8110c0e8:	000f883a 	mov	r7,zero
8110c0ec:	01800284 	movi	r6,10
8110c0f0:	000b883a 	mov	r5,zero
8110c0f4:	0009883a 	mov	r4,zero
8110c0f8:	1133b180 	call	81133b18 <OSTimeDlyHMSM>

                break;
8110c0fc:	00000b06 	br	8110c12c <vSenderComTask+0x178>
            default:
                #ifdef DEBUG_ON
                    debug(fp,"Sender default\n");
8110c100:	d0a05017 	ldw	r2,-32448(gp)
8110c104:	100f883a 	mov	r7,r2
8110c108:	018003c4 	movi	r6,15
8110c10c:	01400044 	movi	r5,1
8110c110:	01204534 	movhi	r4,33044
8110c114:	2100c404 	addi	r4,r4,784
8110c118:	111405c0 	call	8111405c <fwrite>
                #endif
                eSenderMode = sDummySender;
8110c11c:	00800144 	movi	r2,5
8110c120:	e0bffa15 	stw	r2,-24(fp)
                break;
8110c124:	00000106 	br	8110c12c <vSenderComTask+0x178>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
8110c128:	0001883a 	nop
                #endif
                eSenderMode = sDummySender;
                break;
        }

    }
8110c12c:	003fb106 	br	8110bff4 <__reset+0xfb0ebff4>

8110c130 <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
8110c130:	defffb04 	addi	sp,sp,-20
8110c134:	de00012e 	bgeu	sp,et,8110c13c <vSimMebTask+0xc>
8110c138:	003b68fa 	trap	3
8110c13c:	dfc00415 	stw	ra,16(sp)
8110c140:	df000315 	stw	fp,12(sp)
8110c144:	df000304 	addi	fp,sp,12
8110c148:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = FALSE;
8110c14c:	e03ffd15 	stw	zero,-12(fp)
	TSimucam_MEB * pxMebC;
	INT8U error_code;

	pxMebC = (TSimucam_MEB *) task_data;
8110c150:	e0bfff17 	ldw	r2,-4(fp)
8110c154:	e0bffe15 	stw	r2,-8(fp)

	#ifdef DEBUG_ON
        debug(fp,"Sim Meb Controller Task. (Task on)\n");
8110c158:	d0a05017 	ldw	r2,-32448(gp)
8110c15c:	100f883a 	mov	r7,r2
8110c160:	018008c4 	movi	r6,35
8110c164:	01400044 	movi	r5,1
8110c168:	01204534 	movhi	r4,33044
8110c16c:	2100c804 	addi	r4,r4,800
8110c170:	111405c0 	call	8111405c <fwrite>
    #endif

	for (;;) {
		break; /*todo:Tirar depois do debug*/
8110c174:	0001883a 	nop
	}

}
8110c178:	0001883a 	nop
8110c17c:	e037883a 	mov	sp,fp
8110c180:	dfc00117 	ldw	ra,4(sp)
8110c184:	df000017 	ldw	fp,0(sp)
8110c188:	dec00204 	addi	sp,sp,8
8110c18c:	f800283a 	ret

8110c190 <vStackMonitor>:
    }
}

#else
#ifdef DEBUG_ON
void vStackMonitor(void *task_data) {
8110c190:	defff804 	addi	sp,sp,-32
8110c194:	de00012e 	bgeu	sp,et,8110c19c <vStackMonitor+0xc>
8110c198:	003b68fa 	trap	3
8110c19c:	dfc00715 	stw	ra,28(sp)
8110c1a0:	df000615 	stw	fp,24(sp)
8110c1a4:	df000604 	addi	fp,sp,24
8110c1a8:	e13fff15 	stw	r4,-4(fp)
	INT8U ucErrorCode = 0;
8110c1ac:	e03ffc05 	stb	zero,-16(fp)
	OS_STK_DATA data;


        debug(fp,"vStackMonitor, enter task.\n");
8110c1b0:	d0a05017 	ldw	r2,-32448(gp)
8110c1b4:	100f883a 	mov	r7,r2
8110c1b8:	018006c4 	movi	r6,27
8110c1bc:	01400044 	movi	r5,1
8110c1c0:	01204534 	movhi	r4,33044
8110c1c4:	2100d104 	addi	r4,r4,836
8110c1c8:	111405c0 	call	8111405c <fwrite>


    for (;;) {

    	fprintf(fp, "=========== STACK MONITOR =================\n" );
8110c1cc:	d0a05017 	ldw	r2,-32448(gp)
8110c1d0:	100f883a 	mov	r7,r2
8110c1d4:	01800b04 	movi	r6,44
8110c1d8:	01400044 	movi	r5,1
8110c1dc:	01204534 	movhi	r4,33044
8110c1e0:	2100d804 	addi	r4,r4,864
8110c1e4:	111405c0 	call	8111405c <fwrite>
    	fprintf(fp, " Task           Total               Free             In use  \n" );
8110c1e8:	d0a05017 	ldw	r2,-32448(gp)
8110c1ec:	100f883a 	mov	r7,r2
8110c1f0:	01800f84 	movi	r6,62
8110c1f4:	01400044 	movi	r5,1
8110c1f8:	01204534 	movhi	r4,33044
8110c1fc:	2100e404 	addi	r4,r4,912
8110c200:	111405c0 	call	8111405c <fwrite>

    	ucErrorCode = OSTaskStkChk( RECEIVER_TASK_PRIO , &data);
8110c204:	e0bffd04 	addi	r2,fp,-12
8110c208:	100b883a 	mov	r5,r2
8110c20c:	01000784 	movi	r4,30
8110c210:	11334b40 	call	811334b4 <OSTaskStkChk>
8110c214:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE ) {
8110c218:	e0bffc03 	ldbu	r2,-16(fp)
8110c21c:	10000f1e 	bne	r2,zero,8110c25c <vStackMonitor+0xcc>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c220:	d1205017 	ldw	r4,-32448(gp)
    				"RECEIVER_TASK",
    				data.OSFree + data.OSUsed,
8110c224:	e0fffd17 	ldw	r3,-12(fp)
8110c228:	e0bffe17 	ldw	r2,-8(fp)
    	fprintf(fp, " Task           Total               Free             In use  \n" );

    	ucErrorCode = OSTaskStkChk( RECEIVER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c22c:	188b883a 	add	r5,r3,r2
8110c230:	e0bffd17 	ldw	r2,-12(fp)
8110c234:	e0fffe17 	ldw	r3,-8(fp)
8110c238:	d8c00115 	stw	r3,4(sp)
8110c23c:	d8800015 	stw	r2,0(sp)
8110c240:	280f883a 	mov	r7,r5
8110c244:	01a04534 	movhi	r6,33044
8110c248:	3180f404 	addi	r6,r6,976
8110c24c:	01604534 	movhi	r5,33044
8110c250:	2940f804 	addi	r5,r5,992
8110c254:	11139c00 	call	811139c0 <fprintf>
8110c258:	00000706 	br	8110c278 <vStackMonitor+0xe8>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get RECEIVER_TASK stack \n" );
8110c25c:	d0a05017 	ldw	r2,-32448(gp)
8110c260:	100f883a 	mov	r7,r2
8110c264:	01800904 	movi	r6,36
8110c268:	01400044 	movi	r5,1
8110c26c:	01204534 	movhi	r4,33044
8110c270:	21010704 	addi	r4,r4,1052
8110c274:	111405c0 	call	8111405c <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( TIMEOUT_CHECKER_PRIO , &data);
8110c278:	e0bffd04 	addi	r2,fp,-12
8110c27c:	100b883a 	mov	r5,r2
8110c280:	01000704 	movi	r4,28
8110c284:	11334b40 	call	811334b4 <OSTaskStkChk>
8110c288:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110c28c:	e0bffc03 	ldbu	r2,-16(fp)
8110c290:	10000f1e 	bne	r2,zero,8110c2d0 <vStackMonitor+0x140>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c294:	d1205017 	ldw	r4,-32448(gp)
    				"TIMEOUT_CHECKER",
    				data.OSFree + data.OSUsed,
8110c298:	e0fffd17 	ldw	r3,-12(fp)
8110c29c:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( TIMEOUT_CHECKER_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c2a0:	188b883a 	add	r5,r3,r2
8110c2a4:	e0bffd17 	ldw	r2,-12(fp)
8110c2a8:	e0fffe17 	ldw	r3,-8(fp)
8110c2ac:	d8c00115 	stw	r3,4(sp)
8110c2b0:	d8800015 	stw	r2,0(sp)
8110c2b4:	280f883a 	mov	r7,r5
8110c2b8:	01a04534 	movhi	r6,33044
8110c2bc:	31811104 	addi	r6,r6,1092
8110c2c0:	01604534 	movhi	r5,33044
8110c2c4:	2940f804 	addi	r5,r5,992
8110c2c8:	11139c00 	call	811139c0 <fprintf>
8110c2cc:	00000706 	br	8110c2ec <vStackMonitor+0x15c>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get TIMEOUT_CHECKER stack \n" );
8110c2d0:	d0a05017 	ldw	r2,-32448(gp)
8110c2d4:	100f883a 	mov	r7,r2
8110c2d8:	01800984 	movi	r6,38
8110c2dc:	01400044 	movi	r5,1
8110c2e0:	01204534 	movhi	r4,33044
8110c2e4:	21011504 	addi	r4,r4,1108
8110c2e8:	111405c0 	call	8111405c <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( PARSER_TASK_PRIO , &data);
8110c2ec:	e0bffd04 	addi	r2,fp,-12
8110c2f0:	100b883a 	mov	r5,r2
8110c2f4:	01000684 	movi	r4,26
8110c2f8:	11334b40 	call	811334b4 <OSTaskStkChk>
8110c2fc:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110c300:	e0bffc03 	ldbu	r2,-16(fp)
8110c304:	10000f1e 	bne	r2,zero,8110c344 <vStackMonitor+0x1b4>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c308:	d1205017 	ldw	r4,-32448(gp)
    				"PARSER_TASK",
    				data.OSFree + data.OSUsed,
8110c30c:	e0fffd17 	ldw	r3,-12(fp)
8110c310:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( PARSER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c314:	188b883a 	add	r5,r3,r2
8110c318:	e0bffd17 	ldw	r2,-12(fp)
8110c31c:	e0fffe17 	ldw	r3,-8(fp)
8110c320:	d8c00115 	stw	r3,4(sp)
8110c324:	d8800015 	stw	r2,0(sp)
8110c328:	280f883a 	mov	r7,r5
8110c32c:	01a04534 	movhi	r6,33044
8110c330:	31811f04 	addi	r6,r6,1148
8110c334:	01604534 	movhi	r5,33044
8110c338:	2940f804 	addi	r5,r5,992
8110c33c:	11139c00 	call	811139c0 <fprintf>
8110c340:	00000706 	br	8110c360 <vStackMonitor+0x1d0>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get PARSER_TASK stack \n" );
8110c344:	d0a05017 	ldw	r2,-32448(gp)
8110c348:	100f883a 	mov	r7,r2
8110c34c:	01800884 	movi	r6,34
8110c350:	01400044 	movi	r5,1
8110c354:	01204534 	movhi	r4,33044
8110c358:	21012204 	addi	r4,r4,1160
8110c35c:	111405c0 	call	8111405c <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( OUT_ACK_TASK_PRIO , &data);
8110c360:	e0bffd04 	addi	r2,fp,-12
8110c364:	100b883a 	mov	r5,r2
8110c368:	01000644 	movi	r4,25
8110c36c:	11334b40 	call	811334b4 <OSTaskStkChk>
8110c370:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110c374:	e0bffc03 	ldbu	r2,-16(fp)
8110c378:	10000f1e 	bne	r2,zero,8110c3b8 <vStackMonitor+0x228>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c37c:	d1205017 	ldw	r4,-32448(gp)
    				"OUT_ACK_TASK",
    				data.OSFree + data.OSUsed,
8110c380:	e0fffd17 	ldw	r3,-12(fp)
8110c384:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( OUT_ACK_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c388:	188b883a 	add	r5,r3,r2
8110c38c:	e0bffd17 	ldw	r2,-12(fp)
8110c390:	e0fffe17 	ldw	r3,-8(fp)
8110c394:	d8c00115 	stw	r3,4(sp)
8110c398:	d8800015 	stw	r2,0(sp)
8110c39c:	280f883a 	mov	r7,r5
8110c3a0:	01a04534 	movhi	r6,33044
8110c3a4:	31812b04 	addi	r6,r6,1196
8110c3a8:	01604534 	movhi	r5,33044
8110c3ac:	2940f804 	addi	r5,r5,992
8110c3b0:	11139c00 	call	811139c0 <fprintf>
8110c3b4:	00000706 	br	8110c3d4 <vStackMonitor+0x244>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get OUT_ACK_TASK stack \n" );
8110c3b8:	d0a05017 	ldw	r2,-32448(gp)
8110c3bc:	100f883a 	mov	r7,r2
8110c3c0:	018008c4 	movi	r6,35
8110c3c4:	01400044 	movi	r5,1
8110c3c8:	01204534 	movhi	r4,33044
8110c3cc:	21012f04 	addi	r4,r4,1212
8110c3d0:	111405c0 	call	8111405c <fwrite>
    	}



    	ucErrorCode = OSTaskStkChk( SENDER_TASK_PRIO , &data);
8110c3d4:	e0bffd04 	addi	r2,fp,-12
8110c3d8:	100b883a 	mov	r5,r2
8110c3dc:	01000604 	movi	r4,24
8110c3e0:	11334b40 	call	811334b4 <OSTaskStkChk>
8110c3e4:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110c3e8:	e0bffc03 	ldbu	r2,-16(fp)
8110c3ec:	10000f1e 	bne	r2,zero,8110c42c <vStackMonitor+0x29c>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c3f0:	d1205017 	ldw	r4,-32448(gp)
    				"SENDER_TASK",
    				data.OSFree + data.OSUsed,
8110c3f4:	e0fffd17 	ldw	r3,-12(fp)
8110c3f8:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( SENDER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c3fc:	188b883a 	add	r5,r3,r2
8110c400:	e0bffd17 	ldw	r2,-12(fp)
8110c404:	e0fffe17 	ldw	r3,-8(fp)
8110c408:	d8c00115 	stw	r3,4(sp)
8110c40c:	d8800015 	stw	r2,0(sp)
8110c410:	280f883a 	mov	r7,r5
8110c414:	01a04534 	movhi	r6,33044
8110c418:	31813804 	addi	r6,r6,1248
8110c41c:	01604534 	movhi	r5,33044
8110c420:	2940f804 	addi	r5,r5,992
8110c424:	11139c00 	call	811139c0 <fprintf>
8110c428:	00000706 	br	8110c448 <vStackMonitor+0x2b8>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get SENDER_TASK stack \n" );
8110c42c:	d0a05017 	ldw	r2,-32448(gp)
8110c430:	100f883a 	mov	r7,r2
8110c434:	01800884 	movi	r6,34
8110c438:	01400044 	movi	r5,1
8110c43c:	01204534 	movhi	r4,33044
8110c440:	21013b04 	addi	r4,r4,1260
8110c444:	111405c0 	call	8111405c <fwrite>
    	}



    	ucErrorCode = OSTaskStkChk( IN_ACK_TASK_PRIO , &data);
8110c448:	e0bffd04 	addi	r2,fp,-12
8110c44c:	100b883a 	mov	r5,r2
8110c450:	010005c4 	movi	r4,23
8110c454:	11334b40 	call	811334b4 <OSTaskStkChk>
8110c458:	e0bffc05 	stb	r2,-16(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110c45c:	e0bffc03 	ldbu	r2,-16(fp)
8110c460:	10000f1e 	bne	r2,zero,8110c4a0 <vStackMonitor+0x310>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c464:	d1205017 	ldw	r4,-32448(gp)
    				"IN_ACK_TASK",
    				data.OSFree + data.OSUsed,
8110c468:	e0fffd17 	ldw	r3,-12(fp)
8110c46c:	e0bffe17 	ldw	r2,-8(fp)


    	ucErrorCode = OSTaskStkChk( IN_ACK_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110c470:	188b883a 	add	r5,r3,r2
8110c474:	e0bffd17 	ldw	r2,-12(fp)
8110c478:	e0fffe17 	ldw	r3,-8(fp)
8110c47c:	d8c00115 	stw	r3,4(sp)
8110c480:	d8800015 	stw	r2,0(sp)
8110c484:	280f883a 	mov	r7,r5
8110c488:	01a04534 	movhi	r6,33044
8110c48c:	31814404 	addi	r6,r6,1296
8110c490:	01604534 	movhi	r5,33044
8110c494:	2940f804 	addi	r5,r5,992
8110c498:	11139c00 	call	811139c0 <fprintf>
8110c49c:	00000706 	br	8110c4bc <vStackMonitor+0x32c>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get IN_ACK_TASK stack \n" );
8110c4a0:	d0a05017 	ldw	r2,-32448(gp)
8110c4a4:	100f883a 	mov	r7,r2
8110c4a8:	01800884 	movi	r6,34
8110c4ac:	01400044 	movi	r5,1
8110c4b0:	01204534 	movhi	r4,33044
8110c4b4:	21014704 	addi	r4,r4,1308
8110c4b8:	111405c0 	call	8111405c <fwrite>
    	}

    	fprintf(fp, "\n" );
8110c4bc:	d0a05017 	ldw	r2,-32448(gp)
8110c4c0:	100b883a 	mov	r5,r2
8110c4c4:	01000284 	movi	r4,10
8110c4c8:	1113a380 	call	81113a38 <fputc>

    	OSTimeDlyHMSM(0, 0, 10, 0);
8110c4cc:	000f883a 	mov	r7,zero
8110c4d0:	01800284 	movi	r6,10
8110c4d4:	000b883a 	mov	r5,zero
8110c4d8:	0009883a 	mov	r4,zero
8110c4dc:	1133b180 	call	81133b18 <OSTimeDlyHMSM>
    }
8110c4e0:	003f3a06 	br	8110c1cc <__reset+0xfb0ec1cc>

8110c4e4 <vTimeoutCheckerTaskv2>:

#include "timeout_checker_ack_task.h"



void vTimeoutCheckerTaskv2(void *task_data) {
8110c4e4:	defffc04 	addi	sp,sp,-16
8110c4e8:	de00012e 	bgeu	sp,et,8110c4f0 <vTimeoutCheckerTaskv2+0xc>
8110c4ec:	003b68fa 	trap	3
8110c4f0:	dfc00315 	stw	ra,12(sp)
8110c4f4:	df000215 	stw	fp,8(sp)
8110c4f8:	df000204 	addi	fp,sp,8
8110c4fc:	e13fff15 	stw	r4,-4(fp)
	INT8U ucErrorCode = 0;
8110c500:	e03ffe05 	stb	zero,-8(fp)

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
8110c504:	d0a05017 	ldw	r2,-32448(gp)
8110c508:	100f883a 	mov	r7,r2
8110c50c:	01800844 	movi	r6,33
8110c510:	01400044 	movi	r5,1
8110c514:	01204534 	movhi	r4,33044
8110c518:	21015004 	addi	r4,r4,1344
8110c51c:	111405c0 	call	8111405c <fwrite>
    #endif   

    for (;;) {
        OSSemPend(xSemTimeoutChecker, 0, &ucErrorCode);
8110c520:	d0a05517 	ldw	r2,-32428(gp)
8110c524:	e1bffe04 	addi	r6,fp,-8
8110c528:	000b883a 	mov	r5,zero
8110c52c:	1009883a 	mov	r4,r2
8110c530:	1131b800 	call	81131b80 <OSSemPend>
        if ( ucErrorCode == OS_NO_ERR ) {
8110c534:	e0bffe03 	ldbu	r2,-8(fp)
8110c538:	10803fcc 	andi	r2,r2,255
8110c53c:	1000021e 	bne	r2,zero,8110c548 <vTimeoutCheckerTaskv2+0x64>
            /* Just check the restransmission buffer */
            vCheck();
8110c540:	110c5500 	call	8110c550 <vCheck>
8110c544:	003ff606 	br	8110c520 <__reset+0xfb0ec520>
        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
8110c548:	11107300 	call	81110730 <vFailGetBlockingSemTimeoutTask>
        }
    }
8110c54c:	003ff406 	br	8110c520 <__reset+0xfb0ec520>

8110c550 <vCheck>:
}


void vCheck( void ) {
8110c550:	defffd04 	addi	sp,sp,-12
8110c554:	de00012e 	bgeu	sp,et,8110c55c <vCheck+0xc>
8110c558:	003b68fa 	trap	3
8110c55c:	dfc00215 	stw	ra,8(sp)
8110c560:	df000115 	stw	fp,4(sp)
8110c564:	df000104 	addi	fp,sp,4
	INT8U ucErrorCode = 0;
8110c568:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucHashVerification = 0;
8110c56c:	e03fff05 	stb	zero,-4(fp)

    ucHashVerification = 0;
8110c570:	e03fff05 	stb	zero,-4(fp)
    ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);
8110c574:	d0a05683 	ldbu	r2,-32422(gp)
8110c578:	10803fcc 	andi	r2,r2,255
8110c57c:	10800218 	cmpnei	r2,r2,8
8110c580:	1000021e 	bne	r2,zero,8110c58c <vCheck+0x3c>
8110c584:	00c00104 	movi	r3,4
8110c588:	00000106 	br	8110c590 <vCheck+0x40>
8110c58c:	0007883a 	mov	r3,zero
8110c590:	d0a05f03 	ldbu	r2,-32388(gp)
8110c594:	10803fcc 	andi	r2,r2,255
8110c598:	10800218 	cmpnei	r2,r2,8
8110c59c:	1000021e 	bne	r2,zero,8110c5a8 <vCheck+0x58>
8110c5a0:	00800084 	movi	r2,2
8110c5a4:	00000106 	br	8110c5ac <vCheck+0x5c>
8110c5a8:	0005883a 	mov	r2,zero
8110c5ac:	1884b03a 	or	r2,r3,r2
8110c5b0:	1007883a 	mov	r3,r2
8110c5b4:	d0a05f43 	ldbu	r2,-32387(gp)
8110c5b8:	10803fcc 	andi	r2,r2,255
8110c5bc:	108001a0 	cmpeqi	r2,r2,6
8110c5c0:	1884b03a 	or	r2,r3,r2
8110c5c4:	1007883a 	mov	r3,r2
8110c5c8:	e0bfff03 	ldbu	r2,-4(fp)
8110c5cc:	1884b03a 	or	r2,r3,r2
8110c5d0:	e0bfff05 	stb	r2,-4(fp)

    /* Nothing in the (re)transmission buffer */
    if ( ucHashVerification == 0b00000111 )
8110c5d4:	e0bfff03 	ldbu	r2,-4(fp)
8110c5d8:	108001d8 	cmpnei	r2,r2,7
8110c5dc:	10003726 	beq	r2,zero,8110c6bc <vCheck+0x16c>
        return;

    /* Try to get the Mutex of the UART */
	OSMutexPend(xTxUARTMutex, 0, &ucErrorCode); /* Blocking */
8110c5e0:	d0a05e17 	ldw	r2,-32392(gp)
8110c5e4:	e0ffff44 	addi	r3,fp,-3
8110c5e8:	180d883a 	mov	r6,r3
8110c5ec:	000b883a 	mov	r5,zero
8110c5f0:	1009883a 	mov	r4,r2
8110c5f4:	112fb740 	call	8112fb74 <OSMutexPend>
    if ( ucErrorCode != OS_NO_ERR ) {
8110c5f8:	e0bfff43 	ldbu	r2,-3(fp)
8110c5fc:	10803fcc 	andi	r2,r2,255
8110c600:	10000826 	beq	r2,zero,8110c624 <vCheck+0xd4>
        /* Should never get here, is a blocking operation */
		#ifdef DEBUG_ON
			debug(fp,"Should never get here. Trying to get xTxUARTMutex. (vCheck)\n");
8110c604:	d0a05017 	ldw	r2,-32448(gp)
8110c608:	100f883a 	mov	r7,r2
8110c60c:	01800f04 	movi	r6,60
8110c610:	01400044 	movi	r5,1
8110c614:	01204534 	movhi	r4,33044
8110c618:	21015904 	addi	r4,r4,1380
8110c61c:	111405c0 	call	8111405c <fwrite>
		#endif
        return;
8110c620:	00002706 	br	8110c6c0 <vCheck+0x170>

    /* ---> At this point we have the Mutex of TX UART, let's try to get the mutex of all retransmission buffer. */


    /* There are any spot used in the xBuffer128? */
    if ( 0b00000001 != (0b00000001 & ucHashVerification ) )
8110c624:	e0bfff03 	ldbu	r2,-4(fp)
8110c628:	1080004c 	andi	r2,r2,1
8110c62c:	10803fcc 	andi	r2,r2,255
8110c630:	1000021e 	bne	r2,zero,8110c63c <vCheck+0xec>
        vCheckRetransmission128();
8110c634:	110c6d40 	call	8110c6d4 <vCheckRetransmission128>
8110c638:	00000506 	br	8110c650 <vCheck+0x100>
    else
    	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128)); /* For consistency with SemCount128 */
8110c63c:	01800604 	movi	r6,24
8110c640:	000b883a 	mov	r5,zero
8110c644:	01204574 	movhi	r4,33045
8110c648:	2138c004 	addi	r4,r4,-7424
8110c64c:	1114bc00 	call	81114bc0 <memset>


        /* There are any spot used in the xBuffer64? */
    if ( 0b00000010 != (0b00000010 & ucHashVerification ) )
8110c650:	e0bfff03 	ldbu	r2,-4(fp)
8110c654:	1080008c 	andi	r2,r2,2
8110c658:	10803fcc 	andi	r2,r2,255
8110c65c:	1000021e 	bne	r2,zero,8110c668 <vCheck+0x118>
        vCheckRetransmission64();
8110c660:	110c9580 	call	8110c958 <vCheckRetransmission64>
8110c664:	00000506 	br	8110c67c <vCheck+0x12c>
    else
        memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64)); /* For consistency with SemCount64 */
8110c668:	01800804 	movi	r6,32
8110c66c:	000b883a 	mov	r5,zero
8110c670:	01204574 	movhi	r4,33045
8110c674:	2138c604 	addi	r4,r4,-7400
8110c678:	1114bc00 	call	81114bc0 <memset>

    /* There are any spot used in the xBuffer32? */
    if ( 0b00000100 != (0b00000100 & ucHashVerification ) )
8110c67c:	e0bfff03 	ldbu	r2,-4(fp)
8110c680:	1080010c 	andi	r2,r2,4
8110c684:	10803fcc 	andi	r2,r2,255
8110c688:	1000021e 	bne	r2,zero,8110c694 <vCheck+0x144>
        vCheckRetransmission32();
8110c68c:	110cbe40 	call	8110cbe4 <vCheckRetransmission32>
8110c690:	00000506 	br	8110c6a8 <vCheck+0x158>
    else
    	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32)); /* For consistency with SemCount32 */
8110c694:	01800804 	movi	r6,32
8110c698:	000b883a 	mov	r5,zero
8110c69c:	01204574 	movhi	r4,33045
8110c6a0:	2138ce04 	addi	r4,r4,-7368
8110c6a4:	1114bc00 	call	81114bc0 <memset>


    OSMutexPost(xTxUARTMutex);
8110c6a8:	d0a05e17 	ldw	r2,-32392(gp)
8110c6ac:	1009883a 	mov	r4,r2
8110c6b0:	11301180 	call	81130118 <OSMutexPost>

    return;
8110c6b4:	0001883a 	nop
8110c6b8:	00000106 	br	8110c6c0 <vCheck+0x170>
    ucHashVerification = 0;
    ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);

    /* Nothing in the (re)transmission buffer */
    if ( ucHashVerification == 0b00000111 )
        return;
8110c6bc:	0001883a 	nop


    OSMutexPost(xTxUARTMutex);

    return;
}
8110c6c0:	e037883a 	mov	sp,fp
8110c6c4:	dfc00117 	ldw	ra,4(sp)
8110c6c8:	df000017 	ldw	fp,0(sp)
8110c6cc:	dec00204 	addi	sp,sp,8
8110c6d0:	f800283a 	ret

8110c6d4 <vCheckRetransmission128>:

inline void vCheckRetransmission128( void ) {
8110c6d4:	defffd04 	addi	sp,sp,-12
8110c6d8:	de00012e 	bgeu	sp,et,8110c6e0 <vCheckRetransmission128+0xc>
8110c6dc:	003b68fa 	trap	3
8110c6e0:	dfc00215 	stw	ra,8(sp)
8110c6e4:	df000115 	stw	fp,4(sp)
8110c6e8:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110c6ec:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucIL = 0;
8110c6f0:	e03fff05 	stb	zero,-4(fp)

    OSMutexAccept(xMutexBuffer128, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110c6f4:	d0a05a17 	ldw	r2,-32408(gp)
8110c6f8:	e0ffff44 	addi	r3,fp,-3
8110c6fc:	180b883a 	mov	r5,r3
8110c700:	1009883a 	mov	r4,r2
8110c704:	112f4f40 	call	8112f4f4 <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110c708:	e0bfff43 	ldbu	r2,-3(fp)
8110c70c:	10803fcc 	andi	r2,r2,255
8110c710:	10008b1e 	bne	r2,zero,8110c940 <vCheckRetransmission128+0x26c>
    

    /* ---> At this point we have access to the xBuffer128*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_128; ucIL++) {
8110c714:	e03fff05 	stb	zero,-4(fp)
8110c718:	00008106 	br	8110c920 <vCheckRetransmission128+0x24c>
        /* Check if in use */
        if ( xInUseRetrans.b128[ucIL] == TRUE ) {
8110c71c:	e0ffff03 	ldbu	r3,-4(fp)
8110c720:	00a04574 	movhi	r2,33045
8110c724:	10b8c004 	addi	r2,r2,-7424
8110c728:	18c7883a 	add	r3,r3,r3
8110c72c:	18c7883a 	add	r3,r3,r3
8110c730:	10c5883a 	add	r2,r2,r3
8110c734:	10800017 	ldw	r2,0(r2)
8110c738:	10800058 	cmpnei	r2,r2,1
8110c73c:	1000751e 	bne	r2,zero,8110c914 <vCheckRetransmission128+0x240>

            if ( xBuffer128[ucIL].bSent == TRUE )
8110c740:	e0ffff03 	ldbu	r3,-4(fp)
8110c744:	00a04574 	movhi	r2,33045
8110c748:	10b8d604 	addi	r2,r2,-7336
8110c74c:	18c02324 	muli	r3,r3,140
8110c750:	10c5883a 	add	r2,r2,r3
8110c754:	10802004 	addi	r2,r2,128
8110c758:	10800017 	ldw	r2,0(r2)
8110c75c:	10800058 	cmpnei	r2,r2,1
8110c760:	1000211e 	bne	r2,zero,8110c7e8 <vCheckRetransmission128+0x114>
                if ( ++xBuffer128[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110c764:	e0ffff03 	ldbu	r3,-4(fp)
8110c768:	00a04574 	movhi	r2,33045
8110c76c:	10b8d604 	addi	r2,r2,-7336
8110c770:	19002324 	muli	r4,r3,140
8110c774:	1105883a 	add	r2,r2,r4
8110c778:	10802184 	addi	r2,r2,134
8110c77c:	1080000b 	ldhu	r2,0(r2)
8110c780:	10800044 	addi	r2,r2,1
8110c784:	100b883a 	mov	r5,r2
8110c788:	00a04574 	movhi	r2,33045
8110c78c:	10b8d604 	addi	r2,r2,-7336
8110c790:	19002324 	muli	r4,r3,140
8110c794:	1105883a 	add	r2,r2,r4
8110c798:	10802184 	addi	r2,r2,134
8110c79c:	1140000d 	sth	r5,0(r2)
8110c7a0:	00a04574 	movhi	r2,33045
8110c7a4:	10b8d604 	addi	r2,r2,-7336
8110c7a8:	18c02324 	muli	r3,r3,140
8110c7ac:	10c5883a 	add	r2,r2,r3
8110c7b0:	10802184 	addi	r2,r2,134
8110c7b4:	1080000b 	ldhu	r2,0(r2)
8110c7b8:	10bfffcc 	andi	r2,r2,65535
8110c7bc:	10a0001c 	xori	r2,r2,32768
8110c7c0:	10a00004 	addi	r2,r2,-32768
8110c7c4:	10800090 	cmplti	r2,r2,2
8110c7c8:	1000071e 	bne	r2,zero,8110c7e8 <vCheckRetransmission128+0x114>
                    xBuffer128[ucIL].bSent = FALSE;
8110c7cc:	e0ffff03 	ldbu	r3,-4(fp)
8110c7d0:	00a04574 	movhi	r2,33045
8110c7d4:	10b8d604 	addi	r2,r2,-7336
8110c7d8:	18c02324 	muli	r3,r3,140
8110c7dc:	10c5883a 	add	r2,r2,r3
8110c7e0:	10802004 	addi	r2,r2,128
8110c7e4:	10000015 	stw	zero,0(r2)

            if ( xBuffer128[ucIL].bSent == FALSE ) {
8110c7e8:	e0ffff03 	ldbu	r3,-4(fp)
8110c7ec:	00a04574 	movhi	r2,33045
8110c7f0:	10b8d604 	addi	r2,r2,-7336
8110c7f4:	18c02324 	muli	r3,r3,140
8110c7f8:	10c5883a 	add	r2,r2,r3
8110c7fc:	10802004 	addi	r2,r2,128
8110c800:	10800017 	ldw	r2,0(r2)
8110c804:	1000431e 	bne	r2,zero,8110c914 <vCheckRetransmission128+0x240>
                puts(xBuffer128[ucIL].buffer);
8110c808:	e0bfff03 	ldbu	r2,-4(fp)
8110c80c:	10c02324 	muli	r3,r2,140
8110c810:	00a04574 	movhi	r2,33045
8110c814:	10b8d604 	addi	r2,r2,-7336
8110c818:	1885883a 	add	r2,r3,r2
8110c81c:	1009883a 	mov	r4,r2
8110c820:	111502c0 	call	8111502c <puts>
                xBuffer128[ucIL].bSent = TRUE;
8110c824:	e0ffff03 	ldbu	r3,-4(fp)
8110c828:	00a04574 	movhi	r2,33045
8110c82c:	10b8d604 	addi	r2,r2,-7336
8110c830:	18c02324 	muli	r3,r3,140
8110c834:	10c5883a 	add	r2,r2,r3
8110c838:	10802004 	addi	r2,r2,128
8110c83c:	00c00044 	movi	r3,1
8110c840:	10c00015 	stw	r3,0(r2)
                xBuffer128[ucIL].usiTimeOut = 0;
8110c844:	e0ffff03 	ldbu	r3,-4(fp)
8110c848:	00a04574 	movhi	r2,33045
8110c84c:	10b8d604 	addi	r2,r2,-7336
8110c850:	18c02324 	muli	r3,r3,140
8110c854:	10c5883a 	add	r2,r2,r3
8110c858:	10802184 	addi	r2,r2,134
8110c85c:	1000000d 	sth	zero,0(r2)

                /* Check if already tried all the times */
                if ( ++xBuffer128[ucIL].ucNofRetries > N_RETRIES_COMM ) {
8110c860:	e0ffff03 	ldbu	r3,-4(fp)
8110c864:	00a04574 	movhi	r2,33045
8110c868:	10b8d604 	addi	r2,r2,-7336
8110c86c:	19002324 	muli	r4,r3,140
8110c870:	1105883a 	add	r2,r2,r4
8110c874:	10802204 	addi	r2,r2,136
8110c878:	10800003 	ldbu	r2,0(r2)
8110c87c:	10800044 	addi	r2,r2,1
8110c880:	100b883a 	mov	r5,r2
8110c884:	00a04574 	movhi	r2,33045
8110c888:	10b8d604 	addi	r2,r2,-7336
8110c88c:	19002324 	muli	r4,r3,140
8110c890:	1105883a 	add	r2,r2,r4
8110c894:	10802204 	addi	r2,r2,136
8110c898:	11400005 	stb	r5,0(r2)
8110c89c:	00a04574 	movhi	r2,33045
8110c8a0:	10b8d604 	addi	r2,r2,-7336
8110c8a4:	18c02324 	muli	r3,r3,140
8110c8a8:	10c5883a 	add	r2,r2,r3
8110c8ac:	10802204 	addi	r2,r2,136
8110c8b0:	10800003 	ldbu	r2,0(r2)
8110c8b4:	10803fcc 	andi	r2,r2,255
8110c8b8:	108000b0 	cmpltui	r2,r2,2
8110c8bc:	1000151e 	bne	r2,zero,8110c914 <vCheckRetransmission128+0x240>
                    /* Now it is a Free place */
                    xInUseRetrans.b128[ucIL] = FALSE;
8110c8c0:	e0ffff03 	ldbu	r3,-4(fp)
8110c8c4:	00a04574 	movhi	r2,33045
8110c8c8:	10b8c004 	addi	r2,r2,-7424
8110c8cc:	18c7883a 	add	r3,r3,r3
8110c8d0:	18c7883a 	add	r3,r3,r3
8110c8d4:	10c5883a 	add	r2,r2,r3
8110c8d8:	10000015 	stw	zero,0(r2)
                    SemCount128++;
8110c8dc:	d0a05f43 	ldbu	r2,-32387(gp)
8110c8e0:	10800044 	addi	r2,r2,1
8110c8e4:	d0a05f45 	stb	r2,-32387(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer128);
8110c8e8:	d0a05117 	ldw	r2,-32444(gp)
8110c8ec:	1009883a 	mov	r4,r2
8110c8f0:	1131f080 	call	81131f08 <OSSemPost>
8110c8f4:	e0bfff45 	stb	r2,-3(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110c8f8:	e0bfff43 	ldbu	r2,-3(fp)
8110c8fc:	10803fcc 	andi	r2,r2,255
8110c900:	10000426 	beq	r2,zero,8110c914 <vCheckRetransmission128+0x240>
                        SemCount128--;
8110c904:	d0a05f43 	ldbu	r2,-32387(gp)
8110c908:	10bfffc4 	addi	r2,r2,-1
8110c90c:	d0a05f45 	stb	r2,-32387(gp)
                        vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110c910:	11100200 	call	81110020 <vFailSetCountSemaphorexBuffer128>
    

    /* ---> At this point we have access to the xBuffer128*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_128; ucIL++) {
8110c914:	e0bfff03 	ldbu	r2,-4(fp)
8110c918:	10800044 	addi	r2,r2,1
8110c91c:	e0bfff05 	stb	r2,-4(fp)
8110c920:	e0bfff03 	ldbu	r2,-4(fp)
8110c924:	108001b0 	cmpltui	r2,r2,6
8110c928:	103f7c1e 	bne	r2,zero,8110c71c <__reset+0xfb0ec71c>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer128);
8110c92c:	d0a05a17 	ldw	r2,-32408(gp)
8110c930:	1009883a 	mov	r4,r2
8110c934:	11301180 	call	81130118 <OSMutexPost>

    return;
8110c938:	0001883a 	nop
8110c93c:	00000106 	br	8110c944 <vCheckRetransmission128+0x270>
    unsigned char ucIL = 0;

    OSMutexAccept(xMutexBuffer128, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110c940:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer128);

    return;
}
8110c944:	e037883a 	mov	sp,fp
8110c948:	dfc00117 	ldw	ra,4(sp)
8110c94c:	df000017 	ldw	fp,0(sp)
8110c950:	dec00204 	addi	sp,sp,8
8110c954:	f800283a 	ret

8110c958 <vCheckRetransmission64>:

inline void vCheckRetransmission64( void ) {
8110c958:	defffd04 	addi	sp,sp,-12
8110c95c:	de00012e 	bgeu	sp,et,8110c964 <vCheckRetransmission64+0xc>
8110c960:	003b68fa 	trap	3
8110c964:	dfc00215 	stw	ra,8(sp)
8110c968:	df000115 	stw	fp,4(sp)
8110c96c:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110c970:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucIL = 0;
8110c974:	e03fff05 	stb	zero,-4(fp)

    OSMutexAccept(xMutexBuffer64, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110c978:	d0a05c17 	ldw	r2,-32400(gp)
8110c97c:	e0ffff44 	addi	r3,fp,-3
8110c980:	180b883a 	mov	r5,r3
8110c984:	1009883a 	mov	r4,r2
8110c988:	112f4f40 	call	8112f4f4 <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110c98c:	e0bfff43 	ldbu	r2,-3(fp)
8110c990:	10803fcc 	andi	r2,r2,255
8110c994:	10008d1e 	bne	r2,zero,8110cbcc <vCheckRetransmission64+0x274>
    

    /* ---> At this point we have access to the xBuffer64*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_64; ucIL++) {
8110c998:	e03fff05 	stb	zero,-4(fp)
8110c99c:	00008306 	br	8110cbac <vCheckRetransmission64+0x254>
        /* Check if in use */
        if ( xInUseRetrans.b64[ucIL] == TRUE ) {
8110c9a0:	e0ffff03 	ldbu	r3,-4(fp)
8110c9a4:	00a04574 	movhi	r2,33045
8110c9a8:	10b8c004 	addi	r2,r2,-7424
8110c9ac:	18c00184 	addi	r3,r3,6
8110c9b0:	18c7883a 	add	r3,r3,r3
8110c9b4:	18c7883a 	add	r3,r3,r3
8110c9b8:	10c5883a 	add	r2,r2,r3
8110c9bc:	10800017 	ldw	r2,0(r2)
8110c9c0:	10800058 	cmpnei	r2,r2,1
8110c9c4:	1000761e 	bne	r2,zero,8110cba0 <vCheckRetransmission64+0x248>

            if ( xBuffer64[ucIL].bSent == TRUE )
8110c9c8:	e0ffff03 	ldbu	r3,-4(fp)
8110c9cc:	00a04534 	movhi	r2,33044
8110c9d0:	109a9404 	addi	r2,r2,27216
8110c9d4:	18c01324 	muli	r3,r3,76
8110c9d8:	10c5883a 	add	r2,r2,r3
8110c9dc:	10801004 	addi	r2,r2,64
8110c9e0:	10800017 	ldw	r2,0(r2)
8110c9e4:	10800058 	cmpnei	r2,r2,1
8110c9e8:	1000211e 	bne	r2,zero,8110ca70 <vCheckRetransmission64+0x118>
                if ( ++xBuffer64[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110c9ec:	e0ffff03 	ldbu	r3,-4(fp)
8110c9f0:	00a04534 	movhi	r2,33044
8110c9f4:	109a9404 	addi	r2,r2,27216
8110c9f8:	19001324 	muli	r4,r3,76
8110c9fc:	1105883a 	add	r2,r2,r4
8110ca00:	10801184 	addi	r2,r2,70
8110ca04:	1080000b 	ldhu	r2,0(r2)
8110ca08:	10800044 	addi	r2,r2,1
8110ca0c:	100b883a 	mov	r5,r2
8110ca10:	00a04534 	movhi	r2,33044
8110ca14:	109a9404 	addi	r2,r2,27216
8110ca18:	19001324 	muli	r4,r3,76
8110ca1c:	1105883a 	add	r2,r2,r4
8110ca20:	10801184 	addi	r2,r2,70
8110ca24:	1140000d 	sth	r5,0(r2)
8110ca28:	00a04534 	movhi	r2,33044
8110ca2c:	109a9404 	addi	r2,r2,27216
8110ca30:	18c01324 	muli	r3,r3,76
8110ca34:	10c5883a 	add	r2,r2,r3
8110ca38:	10801184 	addi	r2,r2,70
8110ca3c:	1080000b 	ldhu	r2,0(r2)
8110ca40:	10bfffcc 	andi	r2,r2,65535
8110ca44:	10a0001c 	xori	r2,r2,32768
8110ca48:	10a00004 	addi	r2,r2,-32768
8110ca4c:	10800090 	cmplti	r2,r2,2
8110ca50:	1000071e 	bne	r2,zero,8110ca70 <vCheckRetransmission64+0x118>
                    xBuffer64[ucIL].bSent = FALSE;
8110ca54:	e0ffff03 	ldbu	r3,-4(fp)
8110ca58:	00a04534 	movhi	r2,33044
8110ca5c:	109a9404 	addi	r2,r2,27216
8110ca60:	18c01324 	muli	r3,r3,76
8110ca64:	10c5883a 	add	r2,r2,r3
8110ca68:	10801004 	addi	r2,r2,64
8110ca6c:	10000015 	stw	zero,0(r2)

            if ( xBuffer64[ucIL].bSent == FALSE ) {
8110ca70:	e0ffff03 	ldbu	r3,-4(fp)
8110ca74:	00a04534 	movhi	r2,33044
8110ca78:	109a9404 	addi	r2,r2,27216
8110ca7c:	18c01324 	muli	r3,r3,76
8110ca80:	10c5883a 	add	r2,r2,r3
8110ca84:	10801004 	addi	r2,r2,64
8110ca88:	10800017 	ldw	r2,0(r2)
8110ca8c:	1000441e 	bne	r2,zero,8110cba0 <vCheckRetransmission64+0x248>
                puts(xBuffer64[ucIL].buffer);
8110ca90:	e0bfff03 	ldbu	r2,-4(fp)
8110ca94:	10c01324 	muli	r3,r2,76
8110ca98:	00a04534 	movhi	r2,33044
8110ca9c:	109a9404 	addi	r2,r2,27216
8110caa0:	1885883a 	add	r2,r3,r2
8110caa4:	1009883a 	mov	r4,r2
8110caa8:	111502c0 	call	8111502c <puts>
                xBuffer64[ucIL].bSent = TRUE;
8110caac:	e0ffff03 	ldbu	r3,-4(fp)
8110cab0:	00a04534 	movhi	r2,33044
8110cab4:	109a9404 	addi	r2,r2,27216
8110cab8:	18c01324 	muli	r3,r3,76
8110cabc:	10c5883a 	add	r2,r2,r3
8110cac0:	10801004 	addi	r2,r2,64
8110cac4:	00c00044 	movi	r3,1
8110cac8:	10c00015 	stw	r3,0(r2)
                xBuffer64[ucIL].usiTimeOut = 0;
8110cacc:	e0ffff03 	ldbu	r3,-4(fp)
8110cad0:	00a04534 	movhi	r2,33044
8110cad4:	109a9404 	addi	r2,r2,27216
8110cad8:	18c01324 	muli	r3,r3,76
8110cadc:	10c5883a 	add	r2,r2,r3
8110cae0:	10801184 	addi	r2,r2,70
8110cae4:	1000000d 	sth	zero,0(r2)
                /* Check if already tried all the times */
                if ( ++xBuffer64[ucIL].ucNofRetries > N_RETRIES_COMM ) {
8110cae8:	e0ffff03 	ldbu	r3,-4(fp)
8110caec:	00a04534 	movhi	r2,33044
8110caf0:	109a9404 	addi	r2,r2,27216
8110caf4:	19001324 	muli	r4,r3,76
8110caf8:	1105883a 	add	r2,r2,r4
8110cafc:	10801204 	addi	r2,r2,72
8110cb00:	10800003 	ldbu	r2,0(r2)
8110cb04:	10800044 	addi	r2,r2,1
8110cb08:	100b883a 	mov	r5,r2
8110cb0c:	00a04534 	movhi	r2,33044
8110cb10:	109a9404 	addi	r2,r2,27216
8110cb14:	19001324 	muli	r4,r3,76
8110cb18:	1105883a 	add	r2,r2,r4
8110cb1c:	10801204 	addi	r2,r2,72
8110cb20:	11400005 	stb	r5,0(r2)
8110cb24:	00a04534 	movhi	r2,33044
8110cb28:	109a9404 	addi	r2,r2,27216
8110cb2c:	18c01324 	muli	r3,r3,76
8110cb30:	10c5883a 	add	r2,r2,r3
8110cb34:	10801204 	addi	r2,r2,72
8110cb38:	10800003 	ldbu	r2,0(r2)
8110cb3c:	10803fcc 	andi	r2,r2,255
8110cb40:	108000b0 	cmpltui	r2,r2,2
8110cb44:	1000161e 	bne	r2,zero,8110cba0 <vCheckRetransmission64+0x248>
                    /* Now it is a Free place */
                    xInUseRetrans.b64[ucIL] = FALSE;
8110cb48:	e0ffff03 	ldbu	r3,-4(fp)
8110cb4c:	00a04574 	movhi	r2,33045
8110cb50:	10b8c004 	addi	r2,r2,-7424
8110cb54:	18c00184 	addi	r3,r3,6
8110cb58:	18c7883a 	add	r3,r3,r3
8110cb5c:	18c7883a 	add	r3,r3,r3
8110cb60:	10c5883a 	add	r2,r2,r3
8110cb64:	10000015 	stw	zero,0(r2)
                    SemCount64++;
8110cb68:	d0a05f03 	ldbu	r2,-32388(gp)
8110cb6c:	10800044 	addi	r2,r2,1
8110cb70:	d0a05f05 	stb	r2,-32388(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer64);
8110cb74:	d0a04d17 	ldw	r2,-32460(gp)
8110cb78:	1009883a 	mov	r4,r2
8110cb7c:	1131f080 	call	81131f08 <OSSemPost>
8110cb80:	e0bfff45 	stb	r2,-3(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110cb84:	e0bfff43 	ldbu	r2,-3(fp)
8110cb88:	10803fcc 	andi	r2,r2,255
8110cb8c:	10000426 	beq	r2,zero,8110cba0 <vCheckRetransmission64+0x248>
                        SemCount64--;
8110cb90:	d0a05f03 	ldbu	r2,-32388(gp)
8110cb94:	10bfffc4 	addi	r2,r2,-1
8110cb98:	d0a05f05 	stb	r2,-32388(gp)
                        vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110cb9c:	110ffb80 	call	8110ffb8 <vFailSetCountSemaphorexBuffer64>
    

    /* ---> At this point we have access to the xBuffer64*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_64; ucIL++) {
8110cba0:	e0bfff03 	ldbu	r2,-4(fp)
8110cba4:	10800044 	addi	r2,r2,1
8110cba8:	e0bfff05 	stb	r2,-4(fp)
8110cbac:	e0bfff03 	ldbu	r2,-4(fp)
8110cbb0:	10800230 	cmpltui	r2,r2,8
8110cbb4:	103f7a1e 	bne	r2,zero,8110c9a0 <__reset+0xfb0ec9a0>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer64);
8110cbb8:	d0a05c17 	ldw	r2,-32400(gp)
8110cbbc:	1009883a 	mov	r4,r2
8110cbc0:	11301180 	call	81130118 <OSMutexPost>

    return;
8110cbc4:	0001883a 	nop
8110cbc8:	00000106 	br	8110cbd0 <vCheckRetransmission64+0x278>
    unsigned char ucIL = 0;

    OSMutexAccept(xMutexBuffer64, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110cbcc:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer64);

    return;
}
8110cbd0:	e037883a 	mov	sp,fp
8110cbd4:	dfc00117 	ldw	ra,4(sp)
8110cbd8:	df000017 	ldw	fp,0(sp)
8110cbdc:	dec00204 	addi	sp,sp,8
8110cbe0:	f800283a 	ret

8110cbe4 <vCheckRetransmission32>:


inline void vCheckRetransmission32( void ) {
8110cbe4:	defffd04 	addi	sp,sp,-12
8110cbe8:	de00012e 	bgeu	sp,et,8110cbf0 <vCheckRetransmission32+0xc>
8110cbec:	003b68fa 	trap	3
8110cbf0:	dfc00215 	stw	ra,8(sp)
8110cbf4:	df000115 	stw	fp,4(sp)
8110cbf8:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110cbfc:	e03fff85 	stb	zero,-2(fp)
    unsigned char ucIL = 0;
8110cc00:	e03fff05 	stb	zero,-4(fp)
    unsigned char ucMax = 0;
8110cc04:	e03fff45 	stb	zero,-3(fp)

    OSMutexAccept(xMutexBuffer32, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110cc08:	d0a05817 	ldw	r2,-32416(gp)
8110cc0c:	e0ffff84 	addi	r3,fp,-2
8110cc10:	180b883a 	mov	r5,r3
8110cc14:	1009883a 	mov	r4,r2
8110cc18:	112f4f40 	call	8112f4f4 <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110cc1c:	e0bfff83 	ldbu	r2,-2(fp)
8110cc20:	10803fcc 	andi	r2,r2,255
8110cc24:	10009b1e 	bne	r2,zero,8110ce94 <vCheckRetransmission32+0x2b0>
    

    /* ---> At this point we have access to the xBuffer32*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_32; ucIL++) {
8110cc28:	e03fff05 	stb	zero,-4(fp)
8110cc2c:	00009106 	br	8110ce74 <vCheckRetransmission32+0x290>
        /* Check if in use */
        if ( xInUseRetrans.b32[ucIL] == TRUE ) {
8110cc30:	e0ffff03 	ldbu	r3,-4(fp)
8110cc34:	00a04574 	movhi	r2,33045
8110cc38:	10b8c004 	addi	r2,r2,-7424
8110cc3c:	18c00384 	addi	r3,r3,14
8110cc40:	18c7883a 	add	r3,r3,r3
8110cc44:	18c7883a 	add	r3,r3,r3
8110cc48:	10c5883a 	add	r2,r2,r3
8110cc4c:	10800017 	ldw	r2,0(r2)
8110cc50:	10800058 	cmpnei	r2,r2,1
8110cc54:	1000841e 	bne	r2,zero,8110ce68 <vCheckRetransmission32+0x284>

            if ( xBuffer32[ucIL].bSent == TRUE )
8110cc58:	e0ffff03 	ldbu	r3,-4(fp)
8110cc5c:	00a04574 	movhi	r2,33045
8110cc60:	10a86404 	addi	r2,r2,-24176
8110cc64:	18c00b24 	muli	r3,r3,44
8110cc68:	10c5883a 	add	r2,r2,r3
8110cc6c:	10800804 	addi	r2,r2,32
8110cc70:	10800017 	ldw	r2,0(r2)
8110cc74:	10800058 	cmpnei	r2,r2,1
8110cc78:	1000211e 	bne	r2,zero,8110cd00 <vCheckRetransmission32+0x11c>
                if ( ++xBuffer32[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110cc7c:	e0ffff03 	ldbu	r3,-4(fp)
8110cc80:	00a04574 	movhi	r2,33045
8110cc84:	10a86404 	addi	r2,r2,-24176
8110cc88:	19000b24 	muli	r4,r3,44
8110cc8c:	1105883a 	add	r2,r2,r4
8110cc90:	10800984 	addi	r2,r2,38
8110cc94:	1080000b 	ldhu	r2,0(r2)
8110cc98:	10800044 	addi	r2,r2,1
8110cc9c:	100b883a 	mov	r5,r2
8110cca0:	00a04574 	movhi	r2,33045
8110cca4:	10a86404 	addi	r2,r2,-24176
8110cca8:	19000b24 	muli	r4,r3,44
8110ccac:	1105883a 	add	r2,r2,r4
8110ccb0:	10800984 	addi	r2,r2,38
8110ccb4:	1140000d 	sth	r5,0(r2)
8110ccb8:	00a04574 	movhi	r2,33045
8110ccbc:	10a86404 	addi	r2,r2,-24176
8110ccc0:	18c00b24 	muli	r3,r3,44
8110ccc4:	10c5883a 	add	r2,r2,r3
8110ccc8:	10800984 	addi	r2,r2,38
8110cccc:	1080000b 	ldhu	r2,0(r2)
8110ccd0:	10bfffcc 	andi	r2,r2,65535
8110ccd4:	10a0001c 	xori	r2,r2,32768
8110ccd8:	10a00004 	addi	r2,r2,-32768
8110ccdc:	10800090 	cmplti	r2,r2,2
8110cce0:	1000071e 	bne	r2,zero,8110cd00 <vCheckRetransmission32+0x11c>
                    xBuffer32[ucIL].bSent = FALSE;
8110cce4:	e0ffff03 	ldbu	r3,-4(fp)
8110cce8:	00a04574 	movhi	r2,33045
8110ccec:	10a86404 	addi	r2,r2,-24176
8110ccf0:	18c00b24 	muli	r3,r3,44
8110ccf4:	10c5883a 	add	r2,r2,r3
8110ccf8:	10800804 	addi	r2,r2,32
8110ccfc:	10000015 	stw	zero,0(r2)

            if ( xBuffer32[ucIL].bSent == FALSE ) {
8110cd00:	e0ffff03 	ldbu	r3,-4(fp)
8110cd04:	00a04574 	movhi	r2,33045
8110cd08:	10a86404 	addi	r2,r2,-24176
8110cd0c:	18c00b24 	muli	r3,r3,44
8110cd10:	10c5883a 	add	r2,r2,r3
8110cd14:	10800804 	addi	r2,r2,32
8110cd18:	10800017 	ldw	r2,0(r2)
8110cd1c:	1000521e 	bne	r2,zero,8110ce68 <vCheckRetransmission32+0x284>
                puts(xBuffer32[ucIL].buffer);
8110cd20:	e0bfff03 	ldbu	r2,-4(fp)
8110cd24:	10c00b24 	muli	r3,r2,44
8110cd28:	00a04574 	movhi	r2,33045
8110cd2c:	10a86404 	addi	r2,r2,-24176
8110cd30:	1885883a 	add	r2,r3,r2
8110cd34:	1009883a 	mov	r4,r2
8110cd38:	111502c0 	call	8111502c <puts>
                xBuffer32[ucIL].bSent = TRUE;
8110cd3c:	e0ffff03 	ldbu	r3,-4(fp)
8110cd40:	00a04574 	movhi	r2,33045
8110cd44:	10a86404 	addi	r2,r2,-24176
8110cd48:	18c00b24 	muli	r3,r3,44
8110cd4c:	10c5883a 	add	r2,r2,r3
8110cd50:	10800804 	addi	r2,r2,32
8110cd54:	00c00044 	movi	r3,1
8110cd58:	10c00015 	stw	r3,0(r2)
                xBuffer32[ucIL].usiTimeOut = 0;
8110cd5c:	e0ffff03 	ldbu	r3,-4(fp)
8110cd60:	00a04574 	movhi	r2,33045
8110cd64:	10a86404 	addi	r2,r2,-24176
8110cd68:	18c00b24 	muli	r3,r3,44
8110cd6c:	10c5883a 	add	r2,r2,r3
8110cd70:	10800984 	addi	r2,r2,38
8110cd74:	1000000d 	sth	zero,0(r2)
                /* Check if already tried all the times */

                ucMax = ( xBuffer32[ucIL].usiId == 1 ) ? N_RETRIES_INI_INF : N_RETRIES_COMM;
8110cd78:	e0ffff03 	ldbu	r3,-4(fp)
8110cd7c:	00a04574 	movhi	r2,33045
8110cd80:	10a86404 	addi	r2,r2,-24176
8110cd84:	18c00b24 	muli	r3,r3,44
8110cd88:	10c5883a 	add	r2,r2,r3
8110cd8c:	10800904 	addi	r2,r2,36
8110cd90:	1080000b 	ldhu	r2,0(r2)
8110cd94:	10bfffcc 	andi	r2,r2,65535
8110cd98:	10800058 	cmpnei	r2,r2,1
8110cd9c:	1000021e 	bne	r2,zero,8110cda8 <vCheckRetransmission32+0x1c4>
8110cda0:	00bffe84 	movi	r2,-6
8110cda4:	00000106 	br	8110cdac <vCheckRetransmission32+0x1c8>
8110cda8:	00800044 	movi	r2,1
8110cdac:	e0bfff45 	stb	r2,-3(fp)

                if ( ++xBuffer32[ucIL].ucNofRetries > ucMax ) {
8110cdb0:	e0ffff03 	ldbu	r3,-4(fp)
8110cdb4:	00a04574 	movhi	r2,33045
8110cdb8:	10a86404 	addi	r2,r2,-24176
8110cdbc:	19000b24 	muli	r4,r3,44
8110cdc0:	1105883a 	add	r2,r2,r4
8110cdc4:	10800a04 	addi	r2,r2,40
8110cdc8:	10800003 	ldbu	r2,0(r2)
8110cdcc:	10800044 	addi	r2,r2,1
8110cdd0:	100b883a 	mov	r5,r2
8110cdd4:	00a04574 	movhi	r2,33045
8110cdd8:	10a86404 	addi	r2,r2,-24176
8110cddc:	19000b24 	muli	r4,r3,44
8110cde0:	1105883a 	add	r2,r2,r4
8110cde4:	10800a04 	addi	r2,r2,40
8110cde8:	11400005 	stb	r5,0(r2)
8110cdec:	00a04574 	movhi	r2,33045
8110cdf0:	10a86404 	addi	r2,r2,-24176
8110cdf4:	18c00b24 	muli	r3,r3,44
8110cdf8:	10c5883a 	add	r2,r2,r3
8110cdfc:	10800a04 	addi	r2,r2,40
8110ce00:	10800003 	ldbu	r2,0(r2)
8110ce04:	10803fcc 	andi	r2,r2,255
8110ce08:	e0ffff43 	ldbu	r3,-3(fp)
8110ce0c:	1880162e 	bgeu	r3,r2,8110ce68 <vCheckRetransmission32+0x284>
                    /* Now it is a Free place */
                    xInUseRetrans.b32[ucIL] = FALSE;
8110ce10:	e0ffff03 	ldbu	r3,-4(fp)
8110ce14:	00a04574 	movhi	r2,33045
8110ce18:	10b8c004 	addi	r2,r2,-7424
8110ce1c:	18c00384 	addi	r3,r3,14
8110ce20:	18c7883a 	add	r3,r3,r3
8110ce24:	18c7883a 	add	r3,r3,r3
8110ce28:	10c5883a 	add	r2,r2,r3
8110ce2c:	10000015 	stw	zero,0(r2)
                    SemCount32++;
8110ce30:	d0a05683 	ldbu	r2,-32422(gp)
8110ce34:	10800044 	addi	r2,r2,1
8110ce38:	d0a05685 	stb	r2,-32422(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer32);
8110ce3c:	d0a05b17 	ldw	r2,-32404(gp)
8110ce40:	1009883a 	mov	r4,r2
8110ce44:	1131f080 	call	81131f08 <OSSemPost>
8110ce48:	e0bfff85 	stb	r2,-2(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110ce4c:	e0bfff83 	ldbu	r2,-2(fp)
8110ce50:	10803fcc 	andi	r2,r2,255
8110ce54:	10000426 	beq	r2,zero,8110ce68 <vCheckRetransmission32+0x284>
                        SemCount32--;
8110ce58:	d0a05683 	ldbu	r2,-32422(gp)
8110ce5c:	10bfffc4 	addi	r2,r2,-1
8110ce60:	d0a05685 	stb	r2,-32422(gp)
                        vFailSetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110ce64:	110ff500 	call	8110ff50 <vFailSetCountSemaphorexBuffer32>
    

    /* ---> At this point we have access to the xBuffer32*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_32; ucIL++) {
8110ce68:	e0bfff03 	ldbu	r2,-4(fp)
8110ce6c:	10800044 	addi	r2,r2,1
8110ce70:	e0bfff05 	stb	r2,-4(fp)
8110ce74:	e0bfff03 	ldbu	r2,-4(fp)
8110ce78:	10800230 	cmpltui	r2,r2,8
8110ce7c:	103f6c1e 	bne	r2,zero,8110cc30 <__reset+0xfb0ecc30>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer32);
8110ce80:	d0a05817 	ldw	r2,-32416(gp)
8110ce84:	1009883a 	mov	r4,r2
8110ce88:	11301180 	call	81130118 <OSMutexPost>

    return;
8110ce8c:	0001883a 	nop
8110ce90:	00000106 	br	8110ce98 <vCheckRetransmission32+0x2b4>
    unsigned char ucMax = 0;

    OSMutexAccept(xMutexBuffer32, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110ce94:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer32);

    return;
}
8110ce98:	e037883a 	mov	sp,fp
8110ce9c:	dfc00117 	ldw	ra,4(sp)
8110cea0:	df000017 	ldw	fp,0(sp)
8110cea4:	dec00204 	addi	sp,sp,8
8110cea8:	f800283a 	ret

8110ceac <bResourcesInitRTOS>:
 * Control of all Simucam application
 */
TSimucam_MEB xSimMeb; /* Struct */

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void ) {
8110ceac:	defff904 	addi	sp,sp,-28
8110ceb0:	de00012e 	bgeu	sp,et,8110ceb8 <bResourcesInitRTOS+0xc>
8110ceb4:	003b68fa 	trap	3
8110ceb8:	dfc00615 	stw	ra,24(sp)
8110cebc:	df000515 	stw	fp,20(sp)
8110cec0:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
8110cec4:	00800044 	movi	r2,1
8110cec8:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
8110cecc:	0009883a 	mov	r4,zero
8110ced0:	11318580 	call	81131858 <OSSemCreate>
8110ced4:	d0a04e15 	stw	r2,-32456(gp)
	if (!xSemCommInit) {
8110ced8:	d0a04e17 	ldw	r2,-32456(gp)
8110cedc:	1000021e 	bne	r2,zero,8110cee8 <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110cee0:	110f9e80 	call	8110f9e8 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110cee4:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110cee8:	e0bfff04 	addi	r2,fp,-4
8110ceec:	100b883a 	mov	r5,r2
8110cef0:	010003c4 	movi	r4,15
8110cef4:	112f6a00 	call	8112f6a0 <OSMutexCreate>
8110cef8:	d0a05e15 	stw	r2,-32392(gp)
	if ( err != OS_ERR_NONE ) {
8110cefc:	e0bfff03 	ldbu	r2,-4(fp)
8110cf00:	10803fcc 	andi	r2,r2,255
8110cf04:	10000526 	beq	r2,zero,8110cf1c <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
8110cf08:	e0bfff03 	ldbu	r2,-4(fp)
8110cf0c:	10803fcc 	andi	r2,r2,255
8110cf10:	1009883a 	mov	r4,r2
8110cf14:	110f9880 	call	8110f988 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110cf18:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
8110cf1c:	e0bfff04 	addi	r2,fp,-4
8110cf20:	100b883a 	mov	r5,r2
8110cf24:	01000484 	movi	r4,18
8110cf28:	112f6a00 	call	8112f6a0 <OSMutexCreate>
8110cf2c:	d0a05a15 	stw	r2,-32408(gp)
	if ( err != OS_ERR_NONE ) {
8110cf30:	e0bfff03 	ldbu	r2,-4(fp)
8110cf34:	10803fcc 	andi	r2,r2,255
8110cf38:	10000526 	beq	r2,zero,8110cf50 <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
8110cf3c:	e0bfff03 	ldbu	r2,-4(fp)
8110cf40:	10803fcc 	andi	r2,r2,255
8110cf44:	1009883a 	mov	r4,r2
8110cf48:	110f9880 	call	8110f988 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110cf4c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110cf50:	e0bfff04 	addi	r2,fp,-4
8110cf54:	100b883a 	mov	r5,r2
8110cf58:	010004c4 	movi	r4,19
8110cf5c:	112f6a00 	call	8112f6a0 <OSMutexCreate>
8110cf60:	d0a05c15 	stw	r2,-32400(gp)
	if ( err != OS_ERR_NONE ) {
8110cf64:	e0bfff03 	ldbu	r2,-4(fp)
8110cf68:	10803fcc 	andi	r2,r2,255
8110cf6c:	10000526 	beq	r2,zero,8110cf84 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110cf70:	e0bfff03 	ldbu	r2,-4(fp)
8110cf74:	10803fcc 	andi	r2,r2,255
8110cf78:	1009883a 	mov	r4,r2
8110cf7c:	110f9880 	call	8110f988 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110cf80:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
8110cf84:	e0bfff04 	addi	r2,fp,-4
8110cf88:	100b883a 	mov	r5,r2
8110cf8c:	01000504 	movi	r4,20
8110cf90:	112f6a00 	call	8112f6a0 <OSMutexCreate>
8110cf94:	d0a05815 	stw	r2,-32416(gp)
	if ( err != OS_ERR_NONE ) {
8110cf98:	e0bfff03 	ldbu	r2,-4(fp)
8110cf9c:	10803fcc 	andi	r2,r2,255
8110cfa0:	10000526 	beq	r2,zero,8110cfb8 <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
8110cfa4:	e0bfff03 	ldbu	r2,-4(fp)
8110cfa8:	10803fcc 	andi	r2,r2,255
8110cfac:	1009883a 	mov	r4,r2
8110cfb0:	110f9880 	call	8110f988 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110cfb4:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	SemCount128 = N_128;
8110cfb8:	00800184 	movi	r2,6
8110cfbc:	d0a05f45 	stb	r2,-32387(gp)
	xSemCountBuffer128 = OSSemCreate(N_128);
8110cfc0:	01000184 	movi	r4,6
8110cfc4:	11318580 	call	81131858 <OSSemCreate>
8110cfc8:	d0a05115 	stw	r2,-32444(gp)
	if (!xSemCountBuffer128) {
8110cfcc:	d0a05117 	ldw	r2,-32444(gp)
8110cfd0:	1000031e 	bne	r2,zero,8110cfe0 <bResourcesInitRTOS+0x134>
		SemCount128 = 0;
8110cfd4:	d0205f45 	stb	zero,-32387(gp)
		vFailCreateSemaphoreResources();
8110cfd8:	110f9e80 	call	8110f9e8 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110cfdc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	SemCount64 = N_64;
8110cfe0:	00800204 	movi	r2,8
8110cfe4:	d0a05f05 	stb	r2,-32388(gp)
	xSemCountBuffer64 = OSSemCreate(N_64);
8110cfe8:	01000204 	movi	r4,8
8110cfec:	11318580 	call	81131858 <OSSemCreate>
8110cff0:	d0a04d15 	stw	r2,-32460(gp)
	if (!xSemCountBuffer64) {
8110cff4:	d0a04d17 	ldw	r2,-32460(gp)
8110cff8:	1000031e 	bne	r2,zero,8110d008 <bResourcesInitRTOS+0x15c>
		SemCount64 = 0;
8110cffc:	d0205f05 	stb	zero,-32388(gp)
		vFailCreateSemaphoreResources();
8110d000:	110f9e80 	call	8110f9e8 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110d004:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	SemCount32 = N_32;
8110d008:	00800204 	movi	r2,8
8110d00c:	d0a05685 	stb	r2,-32422(gp)
	xSemCountBuffer32 = OSSemCreate(N_32);
8110d010:	01000204 	movi	r4,8
8110d014:	11318580 	call	81131858 <OSSemCreate>
8110d018:	d0a05b15 	stw	r2,-32404(gp)
	if (!xSemCountBuffer32) {
8110d01c:	d0a05b17 	ldw	r2,-32404(gp)
8110d020:	1000031e 	bne	r2,zero,8110d030 <bResourcesInitRTOS+0x184>
		SemCount32 = 0;
8110d024:	d0205685 	stb	zero,-32422(gp)
		vFailCreateSemaphoreResources();
8110d028:	110f9e80 	call	8110f9e8 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110d02c:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
8110d030:	e0bfff04 	addi	r2,fp,-4
8110d034:	100b883a 	mov	r5,r2
8110d038:	01000444 	movi	r4,17
8110d03c:	112f6a00 	call	8112f6a0 <OSMutexCreate>
8110d040:	d0a05315 	stw	r2,-32436(gp)
	if ( err != OS_ERR_NONE ) {
8110d044:	e0bfff03 	ldbu	r2,-4(fp)
8110d048:	10803fcc 	andi	r2,r2,255
8110d04c:	10000526 	beq	r2,zero,8110d064 <bResourcesInitRTOS+0x1b8>
		vFailCreateMutexSResources(err);
8110d050:	e0bfff03 	ldbu	r2,-4(fp)
8110d054:	10803fcc 	andi	r2,r2,255
8110d058:	1009883a 	mov	r4,r2
8110d05c:	110f9880 	call	8110f988 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110d060:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110d064:	e0bfff04 	addi	r2,fp,-4
8110d068:	100b883a 	mov	r5,r2
8110d06c:	01000544 	movi	r4,21
8110d070:	112f6a00 	call	8112f6a0 <OSMutexCreate>
8110d074:	d0a05715 	stw	r2,-32420(gp)
	if ( err != OS_ERR_NONE ) {
8110d078:	e0bfff03 	ldbu	r2,-4(fp)
8110d07c:	10803fcc 	andi	r2,r2,255
8110d080:	10000526 	beq	r2,zero,8110d098 <bResourcesInitRTOS+0x1ec>
		vFailCreateMutexSResources(err);
8110d084:	e0bfff03 	ldbu	r2,-4(fp)
8110d088:	10803fcc 	andi	r2,r2,255
8110d08c:	1009883a 	mov	r4,r2
8110d090:	110f9880 	call	8110f988 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110d094:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
8110d098:	0009883a 	mov	r4,zero
8110d09c:	11318580 	call	81131858 <OSSemCreate>
8110d0a0:	d0a05415 	stw	r2,-32432(gp)
	if (!xSemCountReceivedACK) {
8110d0a4:	d0a05417 	ldw	r2,-32432(gp)
8110d0a8:	1000021e 	bne	r2,zero,8110d0b4 <bResourcesInitRTOS+0x208>
		vFailCreateSemaphoreResources();
8110d0ac:	110f9e80 	call	8110f9e8 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110d0b0:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110d0b4:	0009883a 	mov	r4,zero
8110d0b8:	11318580 	call	81131858 <OSSemCreate>
8110d0bc:	d0a05215 	stw	r2,-32440(gp)
	if (!xSemCountPreParsed) {
8110d0c0:	d0a05217 	ldw	r2,-32440(gp)
8110d0c4:	1000021e 	bne	r2,zero,8110d0d0 <bResourcesInitRTOS+0x224>
		vFailCreateSemaphoreResources();
8110d0c8:	110f9e80 	call	8110f9e8 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110d0cc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
8110d0d0:	0009883a 	mov	r4,zero
8110d0d4:	11318580 	call	81131858 <OSSemCreate>
8110d0d8:	d0a04f15 	stw	r2,-32452(gp)
	if (!xSemCountSenderACK) {
8110d0dc:	d0a04f17 	ldw	r2,-32452(gp)
8110d0e0:	1000021e 	bne	r2,zero,8110d0ec <bResourcesInitRTOS+0x240>
		vFailCreateSemaphoreResources();
8110d0e4:	110f9e80 	call	8110f9e8 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110d0e8:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110d0ec:	e0bfff04 	addi	r2,fp,-4
8110d0f0:	100b883a 	mov	r5,r2
8110d0f4:	01000404 	movi	r4,16
8110d0f8:	112f6a00 	call	8112f6a0 <OSMutexCreate>
8110d0fc:	d0a05d15 	stw	r2,-32396(gp)
	if ( err != OS_ERR_NONE ) {
8110d100:	e0bfff03 	ldbu	r2,-4(fp)
8110d104:	10803fcc 	andi	r2,r2,255
8110d108:	10000526 	beq	r2,zero,8110d120 <bResourcesInitRTOS+0x274>
		vFailCreateMutexSResources(err);
8110d10c:	e0bfff03 	ldbu	r2,-4(fp)
8110d110:	10803fcc 	andi	r2,r2,255
8110d114:	1009883a 	mov	r4,r2
8110d118:	110f9880 	call	8110f988 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110d11c:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
8110d120:	0009883a 	mov	r4,zero
8110d124:	11318580 	call	81131858 <OSSemCreate>
8110d128:	d0a05515 	stw	r2,-32428(gp)
	if (!xSemTimeoutChecker) {
8110d12c:	d0a05517 	ldw	r2,-32428(gp)
8110d130:	1000021e 	bne	r2,zero,8110d13c <bResourcesInitRTOS+0x290>
		vFailCreateSemaphoreResources();
8110d134:	110f9e80 	call	8110f9e8 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110d138:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
8110d13c:	e0bfff04 	addi	r2,fp,-4
8110d140:	d8800215 	stw	r2,8(sp)
8110d144:	00a04534 	movhi	r2,33044
8110d148:	10816904 	addi	r2,r2,1444
8110d14c:	d8800115 	stw	r2,4(sp)
8110d150:	d8000015 	stw	zero,0(sp)
8110d154:	01e04474 	movhi	r7,33041
8110d158:	39f99604 	addi	r7,r7,-6568
8110d15c:	01800084 	movi	r6,2
8110d160:	01400104 	movi	r5,4
8110d164:	01000284 	movi	r4,10
8110d168:	1133f240 	call	81133f24 <OSTmrCreate>
8110d16c:	d0a05915 	stw	r2,-32412(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
8110d170:	e0bfff03 	ldbu	r2,-4(fp)
8110d174:	10803fcc 	andi	r2,r2,255
8110d178:	10000226 	beq	r2,zero,8110d184 <bResourcesInitRTOS+0x2d8>
		vFailCreateTimerRetransmisison();
8110d17c:	111064c0 	call	8111064c <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
8110d180:	e03ffe15 	stw	zero,-8(fp)
	}

	xNfeeSchedule = OSQCreate(&xNfeeScheduleTBL[0], N_OF_MSG_QUEUE);
8110d184:	01400304 	movi	r5,12
8110d188:	01204534 	movhi	r4,33044
8110d18c:	211f3004 	addi	r4,r4,31936
8110d190:	113078c0 	call	8113078c <OSQCreate>
8110d194:	d0a04c15 	stw	r2,-32464(gp)
	if ( xNfeeSchedule == NULL ) {
8110d198:	d0a04c17 	ldw	r2,-32464(gp)
8110d19c:	1000021e 	bne	r2,zero,8110d1a8 <bResourcesInitRTOS+0x2fc>
		vFailCreateScheduleQueue();
8110d1a0:	1110bc80 	call	81110bc8 <vFailCreateScheduleQueue>
		bSuccess = FALSE;		
8110d1a4:	e03ffe15 	stw	zero,-8(fp)
	}


	xFeeQ[0] = OSQCreate(&xFeeQueueTBL0[0], N_MSG_FEE);
8110d1a8:	01400104 	movi	r5,4
8110d1ac:	01204574 	movhi	r4,33045
8110d1b0:	210c6004 	addi	r4,r4,12672
8110d1b4:	113078c0 	call	8113078c <OSQCreate>
8110d1b8:	1007883a 	mov	r3,r2
8110d1bc:	00a04574 	movhi	r2,33045
8110d1c0:	10bdac04 	addi	r2,r2,-2384
8110d1c4:	10c00015 	stw	r3,0(r2)
	if ( xFeeQ[0] == NULL ) {
8110d1c8:	00a04574 	movhi	r2,33045
8110d1cc:	10bdac04 	addi	r2,r2,-2384
8110d1d0:	10800017 	ldw	r2,0(r2)
8110d1d4:	1000031e 	bne	r2,zero,8110d1e4 <bResourcesInitRTOS+0x338>
		vFailCreateNFEEQueue( 0 );
8110d1d8:	0009883a 	mov	r4,zero
8110d1dc:	1110c300 	call	81110c30 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110d1e0:	e03ffe15 	stw	zero,-8(fp)
	}
	xFeeQ[1] = OSQCreate(&xFeeQueueTBL1[0], N_MSG_FEE);
8110d1e4:	01400104 	movi	r5,4
8110d1e8:	01204574 	movhi	r4,33045
8110d1ec:	210bbc04 	addi	r4,r4,12016
8110d1f0:	113078c0 	call	8113078c <OSQCreate>
8110d1f4:	1007883a 	mov	r3,r2
8110d1f8:	00a04574 	movhi	r2,33045
8110d1fc:	10bdac04 	addi	r2,r2,-2384
8110d200:	10c00115 	stw	r3,4(r2)
	if ( xFeeQ[1] == NULL ) {
8110d204:	00a04574 	movhi	r2,33045
8110d208:	10bdac04 	addi	r2,r2,-2384
8110d20c:	10800117 	ldw	r2,4(r2)
8110d210:	1000031e 	bne	r2,zero,8110d220 <bResourcesInitRTOS+0x374>
		vFailCreateNFEEQueue( 1 );
8110d214:	01000044 	movi	r4,1
8110d218:	1110c300 	call	81110c30 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110d21c:	e03ffe15 	stw	zero,-8(fp)
	}

	xFeeQ[2] = OSQCreate(&xFeeQueueTBL2[0], N_MSG_FEE);
8110d220:	01400104 	movi	r5,4
8110d224:	01204574 	movhi	r4,33045
8110d228:	213db204 	addi	r4,r4,-2360
8110d22c:	113078c0 	call	8113078c <OSQCreate>
8110d230:	1007883a 	mov	r3,r2
8110d234:	00a04574 	movhi	r2,33045
8110d238:	10bdac04 	addi	r2,r2,-2384
8110d23c:	10c00215 	stw	r3,8(r2)
	if ( xFeeQ[2] == NULL ) {
8110d240:	00a04574 	movhi	r2,33045
8110d244:	10bdac04 	addi	r2,r2,-2384
8110d248:	10800217 	ldw	r2,8(r2)
8110d24c:	1000031e 	bne	r2,zero,8110d25c <bResourcesInitRTOS+0x3b0>
		vFailCreateNFEEQueue( 2 );
8110d250:	01000084 	movi	r4,2
8110d254:	1110c300 	call	81110c30 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110d258:	e03ffe15 	stw	zero,-8(fp)
	}
	
	xFeeQ[3] = OSQCreate(&xFeeQueueTBL3[0], N_MSG_FEE);
8110d25c:	01400104 	movi	r5,4
8110d260:	01204534 	movhi	r4,33044
8110d264:	211b2c04 	addi	r4,r4,27824
8110d268:	113078c0 	call	8113078c <OSQCreate>
8110d26c:	1007883a 	mov	r3,r2
8110d270:	00a04574 	movhi	r2,33045
8110d274:	10bdac04 	addi	r2,r2,-2384
8110d278:	10c00315 	stw	r3,12(r2)
	if ( xFeeQ[0] == NULL ) {
8110d27c:	00a04574 	movhi	r2,33045
8110d280:	10bdac04 	addi	r2,r2,-2384
8110d284:	10800017 	ldw	r2,0(r2)
8110d288:	1000031e 	bne	r2,zero,8110d298 <bResourcesInitRTOS+0x3ec>
		vFailCreateNFEEQueue( 3 );
8110d28c:	010000c4 	movi	r4,3
8110d290:	1110c300 	call	81110c30 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110d294:	e03ffe15 	stw	zero,-8(fp)
	}

	xFeeQ[4] = OSQCreate(&xFeeQueueTBL4[0], N_MSG_FEE);
8110d298:	01400104 	movi	r5,4
8110d29c:	01204574 	movhi	r4,33045
8110d2a0:	2130bc04 	addi	r4,r4,-15632
8110d2a4:	113078c0 	call	8113078c <OSQCreate>
8110d2a8:	1007883a 	mov	r3,r2
8110d2ac:	00a04574 	movhi	r2,33045
8110d2b0:	10bdac04 	addi	r2,r2,-2384
8110d2b4:	10c00415 	stw	r3,16(r2)
	if ( xFeeQ[4] == NULL ) {
8110d2b8:	00a04574 	movhi	r2,33045
8110d2bc:	10bdac04 	addi	r2,r2,-2384
8110d2c0:	10800417 	ldw	r2,16(r2)
8110d2c4:	1000031e 	bne	r2,zero,8110d2d4 <bResourcesInitRTOS+0x428>
		vFailCreateNFEEQueue( 4 );
8110d2c8:	01000104 	movi	r4,4
8110d2cc:	1110c300 	call	81110c30 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110d2d0:	e03ffe15 	stw	zero,-8(fp)
	}

	xFeeQ[5] = OSQCreate(&xFeeQueueTBL5[0], N_MSG_FEE);
8110d2d4:	01400104 	movi	r5,4
8110d2d8:	01204574 	movhi	r4,33045
8110d2dc:	2139a804 	addi	r4,r4,-6496
8110d2e0:	113078c0 	call	8113078c <OSQCreate>
8110d2e4:	1007883a 	mov	r3,r2
8110d2e8:	00a04574 	movhi	r2,33045
8110d2ec:	10bdac04 	addi	r2,r2,-2384
8110d2f0:	10c00515 	stw	r3,20(r2)
	if ( xFeeQ[5] == NULL ) {
8110d2f4:	00a04574 	movhi	r2,33045
8110d2f8:	10bdac04 	addi	r2,r2,-2384
8110d2fc:	10800517 	ldw	r2,20(r2)
8110d300:	1000031e 	bne	r2,zero,8110d310 <bResourcesInitRTOS+0x464>
		vFailCreateNFEEQueue( 5 );
8110d304:	01000144 	movi	r4,5
8110d308:	1110c300 	call	81110c30 <vFailCreateNFEEQueue>
		bSuccess = FALSE;		
8110d30c:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110d310:	e0bffe17 	ldw	r2,-8(fp)
}
8110d314:	e037883a 	mov	sp,fp
8110d318:	dfc00117 	ldw	ra,4(sp)
8110d31c:	df000017 	ldw	fp,0(sp)
8110d320:	dec00204 	addi	sp,sp,8
8110d324:	f800283a 	ret

8110d328 <vVariablesInitialization>:

/* Global variables already initialized with zero. But better safe than I'm sorry. */
void vVariablesInitialization ( void ) {
8110d328:	defffd04 	addi	sp,sp,-12
8110d32c:	de00012e 	bgeu	sp,et,8110d334 <vVariablesInitialization+0xc>
8110d330:	003b68fa 	trap	3
8110d334:	dfc00215 	stw	ra,8(sp)
8110d338:	df000115 	stw	fp,4(sp)
8110d33c:	df000104 	addi	fp,sp,4
	unsigned char ucIL = 0;
8110d340:	e03fff05 	stb	zero,-4(fp)

	usiIdCMD = 2;
8110d344:	00800084 	movi	r2,2
8110d348:	d0a0560d 	sth	r2,-32424(gp)

	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128));
8110d34c:	01800604 	movi	r6,24
8110d350:	000b883a 	mov	r5,zero
8110d354:	01204574 	movhi	r4,33045
8110d358:	2138c004 	addi	r4,r4,-7424
8110d35c:	1114bc00 	call	81114bc0 <memset>
	memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64));
8110d360:	01800804 	movi	r6,32
8110d364:	000b883a 	mov	r5,zero
8110d368:	01204574 	movhi	r4,33045
8110d36c:	2138c604 	addi	r4,r4,-7400
8110d370:	1114bc00 	call	81114bc0 <memset>
	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32));
8110d374:	01800804 	movi	r6,32
8110d378:	000b883a 	mov	r5,zero
8110d37c:	01204574 	movhi	r4,33045
8110d380:	2138ce04 	addi	r4,r4,-7368
8110d384:	1114bc00 	call	81114bc0 <memset>
	
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110d388:	e03fff05 	stb	zero,-4(fp)
8110d38c:	00002806 	br	8110d430 <vVariablesInitialization+0x108>
	{
		memset( xBuffer128[ucIL].buffer, 0, 128);
8110d390:	e0bfff03 	ldbu	r2,-4(fp)
8110d394:	10c02324 	muli	r3,r2,140
8110d398:	00a04574 	movhi	r2,33045
8110d39c:	10b8d604 	addi	r2,r2,-7336
8110d3a0:	1885883a 	add	r2,r3,r2
8110d3a4:	01802004 	movi	r6,128
8110d3a8:	000b883a 	mov	r5,zero
8110d3ac:	1009883a 	mov	r4,r2
8110d3b0:	1114bc00 	call	81114bc0 <memset>
		xBuffer128[ucIL].bSent = FALSE;
8110d3b4:	e0ffff03 	ldbu	r3,-4(fp)
8110d3b8:	00a04574 	movhi	r2,33045
8110d3bc:	10b8d604 	addi	r2,r2,-7336
8110d3c0:	18c02324 	muli	r3,r3,140
8110d3c4:	10c5883a 	add	r2,r2,r3
8110d3c8:	10802004 	addi	r2,r2,128
8110d3cc:	10000015 	stw	zero,0(r2)
		xBuffer128[ucIL].usiId = 0;
8110d3d0:	e0ffff03 	ldbu	r3,-4(fp)
8110d3d4:	00a04574 	movhi	r2,33045
8110d3d8:	10b8d604 	addi	r2,r2,-7336
8110d3dc:	18c02324 	muli	r3,r3,140
8110d3e0:	10c5883a 	add	r2,r2,r3
8110d3e4:	10802104 	addi	r2,r2,132
8110d3e8:	1000000d 	sth	zero,0(r2)
		xBuffer128[ucIL].usiTimeOut = 0;
8110d3ec:	e0ffff03 	ldbu	r3,-4(fp)
8110d3f0:	00a04574 	movhi	r2,33045
8110d3f4:	10b8d604 	addi	r2,r2,-7336
8110d3f8:	18c02324 	muli	r3,r3,140
8110d3fc:	10c5883a 	add	r2,r2,r3
8110d400:	10802184 	addi	r2,r2,134
8110d404:	1000000d 	sth	zero,0(r2)
		xBuffer128[ucIL].ucNofRetries = 0;
8110d408:	e0ffff03 	ldbu	r3,-4(fp)
8110d40c:	00a04574 	movhi	r2,33045
8110d410:	10b8d604 	addi	r2,r2,-7336
8110d414:	18c02324 	muli	r3,r3,140
8110d418:	10c5883a 	add	r2,r2,r3
8110d41c:	10802204 	addi	r2,r2,136
8110d420:	10000005 	stb	zero,0(r2)

	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128));
	memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64));
	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32));
	
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110d424:	e0bfff03 	ldbu	r2,-4(fp)
8110d428:	10800044 	addi	r2,r2,1
8110d42c:	e0bfff05 	stb	r2,-4(fp)
8110d430:	e0bfff03 	ldbu	r2,-4(fp)
8110d434:	108001b0 	cmpltui	r2,r2,6
8110d438:	103fd51e 	bne	r2,zero,8110d390 <__reset+0xfb0ed390>
		xBuffer128[ucIL].usiId = 0;
		xBuffer128[ucIL].usiTimeOut = 0;
		xBuffer128[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_64; ucIL++)
8110d43c:	e03fff05 	stb	zero,-4(fp)
8110d440:	00002806 	br	8110d4e4 <vVariablesInitialization+0x1bc>
	{
		memset( xBuffer64[ucIL].buffer, 0, 64);
8110d444:	e0bfff03 	ldbu	r2,-4(fp)
8110d448:	10c01324 	muli	r3,r2,76
8110d44c:	00a04534 	movhi	r2,33044
8110d450:	109a9404 	addi	r2,r2,27216
8110d454:	1885883a 	add	r2,r3,r2
8110d458:	01801004 	movi	r6,64
8110d45c:	000b883a 	mov	r5,zero
8110d460:	1009883a 	mov	r4,r2
8110d464:	1114bc00 	call	81114bc0 <memset>
		xBuffer64[ucIL].bSent = FALSE;
8110d468:	e0ffff03 	ldbu	r3,-4(fp)
8110d46c:	00a04534 	movhi	r2,33044
8110d470:	109a9404 	addi	r2,r2,27216
8110d474:	18c01324 	muli	r3,r3,76
8110d478:	10c5883a 	add	r2,r2,r3
8110d47c:	10801004 	addi	r2,r2,64
8110d480:	10000015 	stw	zero,0(r2)
		xBuffer64[ucIL].usiId = 0;
8110d484:	e0ffff03 	ldbu	r3,-4(fp)
8110d488:	00a04534 	movhi	r2,33044
8110d48c:	109a9404 	addi	r2,r2,27216
8110d490:	18c01324 	muli	r3,r3,76
8110d494:	10c5883a 	add	r2,r2,r3
8110d498:	10801104 	addi	r2,r2,68
8110d49c:	1000000d 	sth	zero,0(r2)
		xBuffer64[ucIL].usiTimeOut = 0;
8110d4a0:	e0ffff03 	ldbu	r3,-4(fp)
8110d4a4:	00a04534 	movhi	r2,33044
8110d4a8:	109a9404 	addi	r2,r2,27216
8110d4ac:	18c01324 	muli	r3,r3,76
8110d4b0:	10c5883a 	add	r2,r2,r3
8110d4b4:	10801184 	addi	r2,r2,70
8110d4b8:	1000000d 	sth	zero,0(r2)
		xBuffer64[ucIL].ucNofRetries = 0;
8110d4bc:	e0ffff03 	ldbu	r3,-4(fp)
8110d4c0:	00a04534 	movhi	r2,33044
8110d4c4:	109a9404 	addi	r2,r2,27216
8110d4c8:	18c01324 	muli	r3,r3,76
8110d4cc:	10c5883a 	add	r2,r2,r3
8110d4d0:	10801204 	addi	r2,r2,72
8110d4d4:	10000005 	stb	zero,0(r2)
		xBuffer128[ucIL].usiId = 0;
		xBuffer128[ucIL].usiTimeOut = 0;
		xBuffer128[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_64; ucIL++)
8110d4d8:	e0bfff03 	ldbu	r2,-4(fp)
8110d4dc:	10800044 	addi	r2,r2,1
8110d4e0:	e0bfff05 	stb	r2,-4(fp)
8110d4e4:	e0bfff03 	ldbu	r2,-4(fp)
8110d4e8:	10800230 	cmpltui	r2,r2,8
8110d4ec:	103fd51e 	bne	r2,zero,8110d444 <__reset+0xfb0ed444>
		xBuffer64[ucIL].usiId = 0;
		xBuffer64[ucIL].usiTimeOut = 0;
		xBuffer64[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_32; ucIL++)
8110d4f0:	e03fff05 	stb	zero,-4(fp)
8110d4f4:	00002806 	br	8110d598 <vVariablesInitialization+0x270>
	{
		memset( xBuffer32[ucIL].buffer, 0, 32);
8110d4f8:	e0bfff03 	ldbu	r2,-4(fp)
8110d4fc:	10c00b24 	muli	r3,r2,44
8110d500:	00a04574 	movhi	r2,33045
8110d504:	10a86404 	addi	r2,r2,-24176
8110d508:	1885883a 	add	r2,r3,r2
8110d50c:	01800804 	movi	r6,32
8110d510:	000b883a 	mov	r5,zero
8110d514:	1009883a 	mov	r4,r2
8110d518:	1114bc00 	call	81114bc0 <memset>
		xBuffer32[ucIL].bSent = FALSE;
8110d51c:	e0ffff03 	ldbu	r3,-4(fp)
8110d520:	00a04574 	movhi	r2,33045
8110d524:	10a86404 	addi	r2,r2,-24176
8110d528:	18c00b24 	muli	r3,r3,44
8110d52c:	10c5883a 	add	r2,r2,r3
8110d530:	10800804 	addi	r2,r2,32
8110d534:	10000015 	stw	zero,0(r2)
		xBuffer32[ucIL].usiId = 0;
8110d538:	e0ffff03 	ldbu	r3,-4(fp)
8110d53c:	00a04574 	movhi	r2,33045
8110d540:	10a86404 	addi	r2,r2,-24176
8110d544:	18c00b24 	muli	r3,r3,44
8110d548:	10c5883a 	add	r2,r2,r3
8110d54c:	10800904 	addi	r2,r2,36
8110d550:	1000000d 	sth	zero,0(r2)
		xBuffer32[ucIL].usiTimeOut = 0;
8110d554:	e0ffff03 	ldbu	r3,-4(fp)
8110d558:	00a04574 	movhi	r2,33045
8110d55c:	10a86404 	addi	r2,r2,-24176
8110d560:	18c00b24 	muli	r3,r3,44
8110d564:	10c5883a 	add	r2,r2,r3
8110d568:	10800984 	addi	r2,r2,38
8110d56c:	1000000d 	sth	zero,0(r2)
		xBuffer32[ucIL].ucNofRetries = 0;
8110d570:	e0ffff03 	ldbu	r3,-4(fp)
8110d574:	00a04574 	movhi	r2,33045
8110d578:	10a86404 	addi	r2,r2,-24176
8110d57c:	18c00b24 	muli	r3,r3,44
8110d580:	10c5883a 	add	r2,r2,r3
8110d584:	10800a04 	addi	r2,r2,40
8110d588:	10000005 	stb	zero,0(r2)
		xBuffer64[ucIL].usiId = 0;
		xBuffer64[ucIL].usiTimeOut = 0;
		xBuffer64[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_32; ucIL++)
8110d58c:	e0bfff03 	ldbu	r2,-4(fp)
8110d590:	10800044 	addi	r2,r2,1
8110d594:	e0bfff05 	stb	r2,-4(fp)
8110d598:	e0bfff03 	ldbu	r2,-4(fp)
8110d59c:	10800230 	cmpltui	r2,r2,8
8110d5a0:	103fd51e 	bne	r2,zero,8110d4f8 <__reset+0xfb0ed4f8>
*/




}
8110d5a4:	0001883a 	nop
8110d5a8:	e037883a 	mov	sp,fp
8110d5ac:	dfc00117 	ldw	ra,4(sp)
8110d5b0:	df000017 	ldw	fp,0(sp)
8110d5b4:	dec00204 	addi	sp,sp,8
8110d5b8:	f800283a 	ret

8110d5bc <main>:



/* Entry point */
int main(void)
{
8110d5bc:	defff704 	addi	sp,sp,-36
8110d5c0:	de00012e 	bgeu	sp,et,8110d5c8 <main+0xc>
8110d5c4:	003b68fa 	trap	3
8110d5c8:	dfc00815 	stw	ra,32(sp)
8110d5cc:	df000715 	stw	fp,28(sp)
8110d5d0:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110d5d4:	e03ffe15 	stw	zero,-8(fp)
	
	OSInit();
8110d5d8:	112bb3c0 	call	8112bb3c <OSInit>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
8110d5dc:	01604534 	movhi	r5,33044
8110d5e0:	29416d04 	addi	r5,r5,1460
8110d5e4:	01204534 	movhi	r4,33044
8110d5e8:	21016e04 	addi	r4,r4,1464
8110d5ec:	11139780 	call	81113978 <fopen>
8110d5f0:	d0a05015 	stw	r2,-32448(gp)
	#endif	

	#ifdef DEBUG_ON
		debug(fp, "Main entry point.\n");
8110d5f4:	d0a05017 	ldw	r2,-32448(gp)
8110d5f8:	100f883a 	mov	r7,r2
8110d5fc:	01800484 	movi	r6,18
8110d600:	01400044 	movi	r5,1
8110d604:	01204534 	movhi	r4,33044
8110d608:	21017304 	addi	r4,r4,1484
8110d60c:	111405c0 	call	8111405c <fwrite>
	#endif


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110d610:	111186c0 	call	8111186c <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
8110d614:	1111f2c0 	call	81111f2c <bTestSimucamCriticalHW>
8110d618:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110d61c:	e0bffe17 	ldw	r2,-8(fp)
8110d620:	1000031e 	bne	r2,zero,8110d630 <main+0x74>
		vFailTestCriticasParts();
8110d624:	110fa340 	call	8110fa34 <vFailTestCriticasParts>
		return -1;
8110d628:	00bfffc4 	movi	r2,-1
8110d62c:	00003d06 	br	8110d724 <main+0x168>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110d630:	1111d780 	call	81111d78 <bInitializeSDCard>
8110d634:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110d638:	e0bffe17 	ldw	r2,-8(fp)
8110d63c:	1000031e 	bne	r2,zero,8110d64c <main+0x90>
		vFailTestCriticasParts();
8110d640:	110fa340 	call	8110fa34 <vFailTestCriticasParts>
		return -1;
8110d644:	00bfffc4 	movi	r2,-1
8110d648:	00003606 	br	8110d724 <main+0x168>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
8110d64c:	110ea800 	call	8110ea80 <vLoadDefaultETHConf>
8110d650:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110d654:	e0bffe17 	ldw	r2,-8(fp)
8110d658:	1000091e 	bne	r2,zero,8110d680 <main+0xc4>
		/* Default configuration for eth connection loaded */
		#ifdef DEBUG_ON
			debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110d65c:	d0a05017 	ldw	r2,-32448(gp)
8110d660:	100f883a 	mov	r7,r2
8110d664:	01801644 	movi	r6,89
8110d668:	01400044 	movi	r5,1
8110d66c:	01204534 	movhi	r4,33044
8110d670:	21017804 	addi	r4,r4,1504
8110d674:	111405c0 	call	8111405c <fwrite>
		#endif
		return -1;
8110d678:	00bfffc4 	movi	r2,-1
8110d67c:	00002906 	br	8110d724 <main+0x168>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110d680:	110f40c0 	call	8110f40c <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
8110d684:	110ceac0 	call	8110ceac <bResourcesInitRTOS>
8110d688:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110d68c:	e0bffe17 	ldw	r2,-8(fp)
8110d690:	1000091e 	bne	r2,zero,8110d6b8 <main+0xfc>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
8110d694:	d0a05017 	ldw	r2,-32448(gp)
8110d698:	100f883a 	mov	r7,r2
8110d69c:	01800ac4 	movi	r6,43
8110d6a0:	01400044 	movi	r5,1
8110d6a4:	01204534 	movhi	r4,33044
8110d6a8:	21018f04 	addi	r4,r4,1596
8110d6ac:	111405c0 	call	8111405c <fwrite>
		return -1;
8110d6b0:	00bfffc4 	movi	r2,-1
8110d6b4:	00001b06 	br	8110d724 <main+0x168>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMeb );
8110d6b8:	01204574 	movhi	r4,33045
8110d6bc:	21253c04 	addi	r4,r4,-27408
8110d6c0:	111199c0 	call	8111199c <vSimucamStructureInit>

	vVariablesInitialization();
8110d6c4:	110d3280 	call	8110d328 <vVariablesInitialization>
									vInitialTask_stk,
									INITIALIZATION_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vInitialTask,
8110d6c8:	d8000415 	stw	zero,16(sp)
8110d6cc:	d8000315 	stw	zero,12(sp)
8110d6d0:	00810004 	movi	r2,1024
8110d6d4:	d8800215 	stw	r2,8(sp)
8110d6d8:	00a04574 	movhi	r2,33045
8110d6dc:	10b0c004 	addi	r2,r2,-15616
8110d6e0:	d8800115 	stw	r2,4(sp)
8110d6e4:	00800044 	movi	r2,1
8110d6e8:	d8800015 	stw	r2,0(sp)
8110d6ec:	01c00044 	movi	r7,1
8110d6f0:	01a04574 	movhi	r6,33045
8110d6f4:	31b4bf04 	addi	r6,r6,-11524
8110d6f8:	000b883a 	mov	r5,zero
8110d6fc:	01204474 	movhi	r4,33041
8110d700:	2127b704 	addi	r4,r4,-24868
8110d704:	11328ec0 	call	811328ec <OSTaskCreateExt>
8110d708:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
8110d70c:	e0bfff03 	ldbu	r2,-4(fp)
8110d710:	1000021e 	bne	r2,zero,8110d71c <main+0x160>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
8110d714:	112be6c0 	call	8112be6c <OSStart>
8110d718:	00000106 	br	8110d720 <main+0x164>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
8110d71c:	110fe200 	call	8110fe20 <vFailInitialization>
	}
  
	return 0;
8110d720:	0005883a 	mov	r2,zero
}
8110d724:	e037883a 	mov	sp,fp
8110d728:	dfc00117 	ldw	ra,4(sp)
8110d72c:	df000017 	ldw	fp,0(sp)
8110d730:	dec00204 	addi	sp,sp,8
8110d734:	f800283a 	ret

8110d738 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
8110d738:	defffe04 	addi	sp,sp,-8
8110d73c:	de00012e 	bgeu	sp,et,8110d744 <vCCDLoadDefaultValues+0xc>
8110d740:	003b68fa 	trap	3
8110d744:	df000115 	stw	fp,4(sp)
8110d748:	df000104 	addi	fp,sp,4
8110d74c:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110d750:	e0bfff17 	ldw	r2,-4(fp)
8110d754:	00c46784 	movi	r3,4510
8110d758:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
8110d75c:	e0bfff17 	ldw	r2,-4(fp)
8110d760:	00c00784 	movi	r3,30
8110d764:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
8110d768:	e0bfff17 	ldw	r2,-4(fp)
8110d76c:	00c233c4 	movi	r3,2255
8110d770:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
8110d774:	e0bfff17 	ldw	r2,-4(fp)
8110d778:	00c003c4 	movi	r3,15
8110d77c:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110d780:	e0bfff17 	ldw	r2,-4(fp)
8110d784:	00c00644 	movi	r3,25
8110d788:	10c0000d 	sth	r3,0(r2)
}
8110d78c:	0001883a 	nop
8110d790:	e037883a 	mov	sp,fp
8110d794:	df000017 	ldw	fp,0(sp)
8110d798:	dec00104 	addi	sp,sp,4
8110d79c:	f800283a 	ret

8110d7a0 <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
8110d7a0:	defff904 	addi	sp,sp,-28
8110d7a4:	de00012e 	bgeu	sp,et,8110d7ac <vCCDChangeValues+0xc>
8110d7a8:	003b68fa 	trap	3
8110d7ac:	df000615 	stw	fp,24(sp)
8110d7b0:	df000604 	addi	fp,sp,24
8110d7b4:	e13ffa15 	stw	r4,-24(fp)
8110d7b8:	2811883a 	mov	r8,r5
8110d7bc:	300b883a 	mov	r5,r6
8110d7c0:	3809883a 	mov	r4,r7
8110d7c4:	e0c00117 	ldw	r3,4(fp)
8110d7c8:	e0800217 	ldw	r2,8(fp)
8110d7cc:	e23ffb0d 	sth	r8,-20(fp)
8110d7d0:	e17ffc0d 	sth	r5,-16(fp)
8110d7d4:	e13ffd0d 	sth	r4,-12(fp)
8110d7d8:	e0fffe0d 	sth	r3,-8(fp)
8110d7dc:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
8110d7e0:	e0bffa17 	ldw	r2,-24(fp)
8110d7e4:	e0fffb0b 	ldhu	r3,-20(fp)
8110d7e8:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
8110d7ec:	e0bffa17 	ldw	r2,-24(fp)
8110d7f0:	e0fffc0b 	ldhu	r3,-16(fp)
8110d7f4:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
8110d7f8:	e0bffa17 	ldw	r2,-24(fp)
8110d7fc:	e0fffd0b 	ldhu	r3,-12(fp)
8110d800:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
8110d804:	e0bffa17 	ldw	r2,-24(fp)
8110d808:	e0fffe0b 	ldhu	r3,-8(fp)
8110d80c:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110d810:	e0bffa17 	ldw	r2,-24(fp)
8110d814:	e0ffff0b 	ldhu	r3,-4(fp)
8110d818:	10c0000d 	sth	r3,0(r2)
}
8110d81c:	0001883a 	nop
8110d820:	e037883a 	mov	sp,fp
8110d824:	df000017 	ldw	fp,0(sp)
8110d828:	dec00104 	addi	sp,sp,4
8110d82c:	f800283a 	ret

8110d830 <bSendUART128v2>:
#include "communication_utils.h"


/* Make sure that there is only 127 characters to send */
/* Always, ALWAYS send only an char[128] that you first did a memset(cBuffer,0,128), before put some string on it. */
bool bSendUART128v2 ( char *cBuffer, short int siIdMessage ) {
8110d830:	defff904 	addi	sp,sp,-28
8110d834:	de00012e 	bgeu	sp,et,8110d83c <bSendUART128v2+0xc>
8110d838:	003b68fa 	trap	3
8110d83c:	dfc00615 	stw	ra,24(sp)
8110d840:	df000515 	stw	fp,20(sp)
8110d844:	df000504 	addi	fp,sp,20
8110d848:	e13ffe15 	stw	r4,-8(fp)
8110d84c:	2805883a 	mov	r2,r5
8110d850:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;;
8110d854:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110d858:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110d85c:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110d860:	e03ffc15 	stw	zero,-16(fp)

	OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110d864:	d0a05117 	ldw	r2,-32444(gp)
8110d868:	e0fffd04 	addi	r3,fp,-12
8110d86c:	180d883a 	mov	r6,r3
8110d870:	01400504 	movi	r5,20
8110d874:	1009883a 	mov	r4,r2
8110d878:	1131b800 	call	81131b80 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110d87c:	e0bffd03 	ldbu	r2,-12(fp)
8110d880:	10803fcc 	andi	r2,r2,255
8110d884:	10000326 	beq	r2,zero,8110d894 <bSendUART128v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110d888:	11100880 	call	81110088 <vFailGetCountSemaphorexBuffer128>
		return bSuccessL;
8110d88c:	e0bffc17 	ldw	r2,-16(fp)
8110d890:	00009e06 	br	8110db0c <bSendUART128v2+0x2dc>

	/* ---> At this point we know that there is some space in the buffer */


	/* Need to get the Mutex that protects xBuffer128 */
	OSMutexPend(xMutexBuffer128, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110d894:	d0a05a17 	ldw	r2,-32408(gp)
8110d898:	e0fffd04 	addi	r3,fp,-12
8110d89c:	180d883a 	mov	r6,r3
8110d8a0:	01400104 	movi	r5,4
8110d8a4:	1009883a 	mov	r4,r2
8110d8a8:	112fb740 	call	8112fb74 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110d8ac:	e0bffd03 	ldbu	r2,-12(fp)
8110d8b0:	10803fcc 	andi	r2,r2,255
8110d8b4:	10001126 	beq	r2,zero,8110d8fc <bSendUART128v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer128 that protect xBuffer128. (bSendUART128v2)\n");
8110d8b8:	d0a05017 	ldw	r2,-32448(gp)
8110d8bc:	100f883a 	mov	r7,r2
8110d8c0:	01801484 	movi	r6,82
8110d8c4:	01400044 	movi	r5,1
8110d8c8:	01204534 	movhi	r4,33044
8110d8cc:	21019a04 	addi	r4,r4,1640
8110d8d0:	111405c0 	call	8111405c <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer128);
8110d8d4:	d0a05117 	ldw	r2,-32444(gp)
8110d8d8:	1009883a 	mov	r4,r2
8110d8dc:	1131f080 	call	81131f08 <OSSemPost>
8110d8e0:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110d8e4:	e0bffd03 	ldbu	r2,-12(fp)
8110d8e8:	10803fcc 	andi	r2,r2,255
8110d8ec:	10000126 	beq	r2,zero,8110d8f4 <bSendUART128v2+0xc4>
			vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110d8f0:	11100200 	call	81110020 <vFailSetCountSemaphorexBuffer128>
		}

		return bSuccessL;
8110d8f4:	e0bffc17 	ldw	r2,-16(fp)
8110d8f8:	00008406 	br	8110db0c <bSendUART128v2+0x2dc>
	/* ---> At this point we Have the mutex of the xBuffer128, and we can use it freely */


	
	/* Search for space */
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110d8fc:	e03ffb05 	stb	zero,-20(fp)
8110d900:	00004306 	br	8110da10 <bSendUART128v2+0x1e0>
	{
		if ( xInUseRetrans.b128[ucIL] == FALSE ) {
8110d904:	e0fffb03 	ldbu	r3,-20(fp)
8110d908:	00a04574 	movhi	r2,33045
8110d90c:	10b8c004 	addi	r2,r2,-7424
8110d910:	18c7883a 	add	r3,r3,r3
8110d914:	18c7883a 	add	r3,r3,r3
8110d918:	10c5883a 	add	r2,r2,r3
8110d91c:	10800017 	ldw	r2,0(r2)
8110d920:	1000381e 	bne	r2,zero,8110da04 <bSendUART128v2+0x1d4>
			/* Clear the buffer */
			memset(xBuffer128[ucIL].buffer, 0, 128);
8110d924:	e0bffb03 	ldbu	r2,-20(fp)
8110d928:	10c02324 	muli	r3,r2,140
8110d92c:	00a04574 	movhi	r2,33045
8110d930:	10b8d604 	addi	r2,r2,-7336
8110d934:	1885883a 	add	r2,r3,r2
8110d938:	01802004 	movi	r6,128
8110d93c:	000b883a 	mov	r5,zero
8110d940:	1009883a 	mov	r4,r2
8110d944:	1114bc00 	call	81114bc0 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer128[ucIL].buffer, cBuffer, 127);
8110d948:	e0bffb03 	ldbu	r2,-20(fp)
8110d94c:	10c02324 	muli	r3,r2,140
8110d950:	00a04574 	movhi	r2,33045
8110d954:	10b8d604 	addi	r2,r2,-7336
8110d958:	1885883a 	add	r2,r3,r2
8110d95c:	01801fc4 	movi	r6,127
8110d960:	e17ffe17 	ldw	r5,-8(fp)
8110d964:	1009883a 	mov	r4,r2
8110d968:	1114a700 	call	81114a70 <memcpy>
			xBuffer128[ucIL].usiId = siIdMessage;
8110d96c:	e13ffb03 	ldbu	r4,-20(fp)
8110d970:	e0ffff0b 	ldhu	r3,-4(fp)
8110d974:	00a04574 	movhi	r2,33045
8110d978:	10b8d604 	addi	r2,r2,-7336
8110d97c:	21002324 	muli	r4,r4,140
8110d980:	1105883a 	add	r2,r2,r4
8110d984:	10802104 	addi	r2,r2,132
8110d988:	10c0000d 	sth	r3,0(r2)
			xBuffer128[ucIL].ucNofRetries = 0;
8110d98c:	e0fffb03 	ldbu	r3,-20(fp)
8110d990:	00a04574 	movhi	r2,33045
8110d994:	10b8d604 	addi	r2,r2,-7336
8110d998:	18c02324 	muli	r3,r3,140
8110d99c:	10c5883a 	add	r2,r2,r3
8110d9a0:	10802204 	addi	r2,r2,136
8110d9a4:	10000005 	stb	zero,0(r2)
			xBuffer128[ucIL].usiTimeOut = 0;
8110d9a8:	e0fffb03 	ldbu	r3,-20(fp)
8110d9ac:	00a04574 	movhi	r2,33045
8110d9b0:	10b8d604 	addi	r2,r2,-7336
8110d9b4:	18c02324 	muli	r3,r3,140
8110d9b8:	10c5883a 	add	r2,r2,r3
8110d9bc:	10802184 	addi	r2,r2,134
8110d9c0:	1000000d 	sth	zero,0(r2)
			xBuffer128[ucIL].bSent = FALSE;
8110d9c4:	e0fffb03 	ldbu	r3,-20(fp)
8110d9c8:	00a04574 	movhi	r2,33045
8110d9cc:	10b8d604 	addi	r2,r2,-7336
8110d9d0:	18c02324 	muli	r3,r3,140
8110d9d4:	10c5883a 	add	r2,r2,r3
8110d9d8:	10802004 	addi	r2,r2,128
8110d9dc:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b128[ucIL] = TRUE;
8110d9e0:	e0fffb03 	ldbu	r3,-20(fp)
8110d9e4:	00a04574 	movhi	r2,33045
8110d9e8:	10b8c004 	addi	r2,r2,-7424
8110d9ec:	18c7883a 	add	r3,r3,r3
8110d9f0:	18c7883a 	add	r3,r3,r3
8110d9f4:	10c5883a 	add	r2,r2,r3
8110d9f8:	00c00044 	movi	r3,1
8110d9fc:	10c00015 	stw	r3,0(r2)
			break;
8110da00:	00000606 	br	8110da1c <bSendUART128v2+0x1ec>
	/* ---> At this point we Have the mutex of the xBuffer128, and we can use it freely */


	
	/* Search for space */
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110da04:	e0bffb03 	ldbu	r2,-20(fp)
8110da08:	10800044 	addi	r2,r2,1
8110da0c:	e0bffb05 	stb	r2,-20(fp)
8110da10:	e0bffb03 	ldbu	r2,-20(fp)
8110da14:	108001b0 	cmpltui	r2,r2,6
8110da18:	103fba1e 	bne	r2,zero,8110d904 <__reset+0xfb0ed904>
			xInUseRetrans.b128[ucIL] = TRUE;
			break;
		}
	}

	if ( ucIL >= N_128 ) {
8110da1c:	e0bffb03 	ldbu	r2,-20(fp)
8110da20:	108001b0 	cmpltui	r2,r2,6
8110da24:	1000091e 	bne	r2,zero,8110da4c <bSendUART128v2+0x21c>
		ucErrorCode = OSSemPost(xSemCountBuffer128);
8110da28:	d0a05117 	ldw	r2,-32444(gp)
8110da2c:	1009883a 	mov	r4,r2
8110da30:	1131f080 	call	81131f08 <OSSemPost>
8110da34:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer128);
8110da38:	d0a05a17 	ldw	r2,-32408(gp)
8110da3c:	1009883a 	mov	r4,r2
8110da40:	11301180 	call	81130118 <OSMutexPost>
		return bSuccessL;
8110da44:	e0bffc17 	ldw	r2,-16(fp)
8110da48:	00003006 	br	8110db0c <bSendUART128v2+0x2dc>
	}

	bSuccessL = TRUE;
8110da4c:	00800044 	movi	r2,1
8110da50:	e0bffc15 	stw	r2,-16(fp)
	SemCount128--; /* Sure that you get the semaphore */
8110da54:	d0a05f43 	ldbu	r2,-32387(gp)
8110da58:	10bfffc4 	addi	r2,r2,-1
8110da5c:	d0a05f45 	stb	r2,-32387(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */


	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110da60:	d0a05e17 	ldw	r2,-32392(gp)
8110da64:	e0fffd04 	addi	r3,fp,-12
8110da68:	180d883a 	mov	r6,r3
8110da6c:	01400084 	movi	r5,2
8110da70:	1009883a 	mov	r4,r2
8110da74:	112fb740 	call	8112fb74 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110da78:	e0bffd03 	ldbu	r2,-12(fp)
8110da7c:	10803fcc 	andi	r2,r2,255
8110da80:	10000c26 	beq	r2,zero,8110dab4 <bSendUART128v2+0x284>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART128v2)\n");
8110da84:	d0a05017 	ldw	r2,-32448(gp)
8110da88:	100f883a 	mov	r7,r2
8110da8c:	01801c04 	movi	r6,112
8110da90:	01400044 	movi	r5,1
8110da94:	01204534 	movhi	r4,33044
8110da98:	2101af04 	addi	r4,r4,1724
8110da9c:	111405c0 	call	8111405c <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer128 */
		OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110daa0:	d0a05a17 	ldw	r2,-32408(gp)
8110daa4:	1009883a 	mov	r4,r2
8110daa8:	11301180 	call	81130118 <OSMutexPost>
		return bSuccessL;
8110daac:	e0bffc17 	ldw	r2,-16(fp)
8110dab0:	00001606 	br	8110db0c <bSendUART128v2+0x2dc>


	/* ---> At this point we have all resources to send the message */


	puts(xBuffer128[ucIL].buffer);
8110dab4:	e0bffb03 	ldbu	r2,-20(fp)
8110dab8:	10c02324 	muli	r3,r2,140
8110dabc:	00a04574 	movhi	r2,33045
8110dac0:	10b8d604 	addi	r2,r2,-7336
8110dac4:	1885883a 	add	r2,r3,r2
8110dac8:	1009883a 	mov	r4,r2
8110dacc:	111502c0 	call	8111502c <puts>
	xBuffer128[ucIL].bSent = TRUE;
8110dad0:	e0fffb03 	ldbu	r3,-20(fp)
8110dad4:	00a04574 	movhi	r2,33045
8110dad8:	10b8d604 	addi	r2,r2,-7336
8110dadc:	18c02324 	muli	r3,r3,140
8110dae0:	10c5883a 	add	r2,r2,r3
8110dae4:	10802004 	addi	r2,r2,128
8110dae8:	00c00044 	movi	r3,1
8110daec:	10c00015 	stw	r3,0(r2)


	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */

	OSMutexPost(xTxUARTMutex);
8110daf0:	d0a05e17 	ldw	r2,-32392(gp)
8110daf4:	1009883a 	mov	r4,r2
8110daf8:	11301180 	call	81130118 <OSMutexPost>
	OSMutexPost(xMutexBuffer128);
8110dafc:	d0a05a17 	ldw	r2,-32408(gp)
8110db00:	1009883a 	mov	r4,r2
8110db04:	11301180 	call	81130118 <OSMutexPost>

	return bSuccessL;
8110db08:	e0bffc17 	ldw	r2,-16(fp)
}
8110db0c:	e037883a 	mov	sp,fp
8110db10:	dfc00117 	ldw	ra,4(sp)
8110db14:	df000017 	ldw	fp,0(sp)
8110db18:	dec00204 	addi	sp,sp,8
8110db1c:	f800283a 	ret

8110db20 <bSendUART64v2>:



/* Make sure that there is only 63 characters to send */
/* Always, ALWAYS send only an char[64] that you first did a memset(cBuffer,0,64), before put some string on it. */
bool bSendUART64v2 ( char *cBuffer, short int siIdMessage ) {
8110db20:	defff904 	addi	sp,sp,-28
8110db24:	de00012e 	bgeu	sp,et,8110db2c <bSendUART64v2+0xc>
8110db28:	003b68fa 	trap	3
8110db2c:	dfc00615 	stw	ra,24(sp)
8110db30:	df000515 	stw	fp,20(sp)
8110db34:	df000504 	addi	fp,sp,20
8110db38:	e13ffe15 	stw	r4,-8(fp)
8110db3c:	2805883a 	mov	r2,r5
8110db40:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;
8110db44:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110db48:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110db4c:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110db50:	e03ffc15 	stw	zero,-16(fp)

	OSSemPend(xSemCountBuffer64, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110db54:	d0a04d17 	ldw	r2,-32460(gp)
8110db58:	e0fffd04 	addi	r3,fp,-12
8110db5c:	180d883a 	mov	r6,r3
8110db60:	01400504 	movi	r5,20
8110db64:	1009883a 	mov	r4,r2
8110db68:	1131b800 	call	81131b80 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110db6c:	e0bffd03 	ldbu	r2,-12(fp)
8110db70:	10803fcc 	andi	r2,r2,255
8110db74:	10000326 	beq	r2,zero,8110db84 <bSendUART64v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110db78:	11100f00 	call	811100f0 <vFailGetCountSemaphorexBuffer64>
		return bSuccessL;
8110db7c:	e0bffc17 	ldw	r2,-16(fp)
8110db80:	0000a006 	br	8110de04 <bSendUART64v2+0x2e4>
	/* ---> At this point we know that there is some space in the buffer */

	
	
	/* Need to get the Mutex that protects xBuffer64 */
	OSMutexPend(xMutexBuffer64, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110db84:	d0a05c17 	ldw	r2,-32400(gp)
8110db88:	e0fffd04 	addi	r3,fp,-12
8110db8c:	180d883a 	mov	r6,r3
8110db90:	01400104 	movi	r5,4
8110db94:	1009883a 	mov	r4,r2
8110db98:	112fb740 	call	8112fb74 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110db9c:	e0bffd03 	ldbu	r2,-12(fp)
8110dba0:	10803fcc 	andi	r2,r2,255
8110dba4:	10001126 	beq	r2,zero,8110dbec <bSendUART64v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer64 that protect xBuffer64. (bSendUART64v2)\n");
8110dba8:	d0a05017 	ldw	r2,-32448(gp)
8110dbac:	100f883a 	mov	r7,r2
8110dbb0:	018013c4 	movi	r6,79
8110dbb4:	01400044 	movi	r5,1
8110dbb8:	01204534 	movhi	r4,33044
8110dbbc:	2101cc04 	addi	r4,r4,1840
8110dbc0:	111405c0 	call	8111405c <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer64);
8110dbc4:	d0a04d17 	ldw	r2,-32460(gp)
8110dbc8:	1009883a 	mov	r4,r2
8110dbcc:	1131f080 	call	81131f08 <OSSemPost>
8110dbd0:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110dbd4:	e0bffd03 	ldbu	r2,-12(fp)
8110dbd8:	10803fcc 	andi	r2,r2,255
8110dbdc:	10000126 	beq	r2,zero,8110dbe4 <bSendUART64v2+0xc4>
			vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110dbe0:	110ffb80 	call	8110ffb8 <vFailSetCountSemaphorexBuffer64>
		}

		return bSuccessL;
8110dbe4:	e0bffc17 	ldw	r2,-16(fp)
8110dbe8:	00008606 	br	8110de04 <bSendUART64v2+0x2e4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_64; ucIL++)
8110dbec:	e03ffb05 	stb	zero,-20(fp)
8110dbf0:	00004506 	br	8110dd08 <bSendUART64v2+0x1e8>
	{
		if ( xInUseRetrans.b64[ucIL] == FALSE ) {
8110dbf4:	e0fffb03 	ldbu	r3,-20(fp)
8110dbf8:	00a04574 	movhi	r2,33045
8110dbfc:	10b8c004 	addi	r2,r2,-7424
8110dc00:	18c00184 	addi	r3,r3,6
8110dc04:	18c7883a 	add	r3,r3,r3
8110dc08:	18c7883a 	add	r3,r3,r3
8110dc0c:	10c5883a 	add	r2,r2,r3
8110dc10:	10800017 	ldw	r2,0(r2)
8110dc14:	1000391e 	bne	r2,zero,8110dcfc <bSendUART64v2+0x1dc>
			/* Clear the buffer */
			memset(xBuffer64[ucIL].buffer, 0, 64);
8110dc18:	e0bffb03 	ldbu	r2,-20(fp)
8110dc1c:	10c01324 	muli	r3,r2,76
8110dc20:	00a04534 	movhi	r2,33044
8110dc24:	109a9404 	addi	r2,r2,27216
8110dc28:	1885883a 	add	r2,r3,r2
8110dc2c:	01801004 	movi	r6,64
8110dc30:	000b883a 	mov	r5,zero
8110dc34:	1009883a 	mov	r4,r2
8110dc38:	1114bc00 	call	81114bc0 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer64[ucIL].buffer, cBuffer, 63);
8110dc3c:	e0bffb03 	ldbu	r2,-20(fp)
8110dc40:	10c01324 	muli	r3,r2,76
8110dc44:	00a04534 	movhi	r2,33044
8110dc48:	109a9404 	addi	r2,r2,27216
8110dc4c:	1885883a 	add	r2,r3,r2
8110dc50:	01800fc4 	movi	r6,63
8110dc54:	e17ffe17 	ldw	r5,-8(fp)
8110dc58:	1009883a 	mov	r4,r2
8110dc5c:	1114a700 	call	81114a70 <memcpy>
			xBuffer64[ucIL].usiId = siIdMessage;
8110dc60:	e13ffb03 	ldbu	r4,-20(fp)
8110dc64:	e0ffff0b 	ldhu	r3,-4(fp)
8110dc68:	00a04534 	movhi	r2,33044
8110dc6c:	109a9404 	addi	r2,r2,27216
8110dc70:	21001324 	muli	r4,r4,76
8110dc74:	1105883a 	add	r2,r2,r4
8110dc78:	10801104 	addi	r2,r2,68
8110dc7c:	10c0000d 	sth	r3,0(r2)
			xBuffer64[ucIL].ucNofRetries = 0;
8110dc80:	e0fffb03 	ldbu	r3,-20(fp)
8110dc84:	00a04534 	movhi	r2,33044
8110dc88:	109a9404 	addi	r2,r2,27216
8110dc8c:	18c01324 	muli	r3,r3,76
8110dc90:	10c5883a 	add	r2,r2,r3
8110dc94:	10801204 	addi	r2,r2,72
8110dc98:	10000005 	stb	zero,0(r2)
			xBuffer64[ucIL].usiTimeOut = 0;
8110dc9c:	e0fffb03 	ldbu	r3,-20(fp)
8110dca0:	00a04534 	movhi	r2,33044
8110dca4:	109a9404 	addi	r2,r2,27216
8110dca8:	18c01324 	muli	r3,r3,76
8110dcac:	10c5883a 	add	r2,r2,r3
8110dcb0:	10801184 	addi	r2,r2,70
8110dcb4:	1000000d 	sth	zero,0(r2)
			xBuffer64[ucIL].bSent = FALSE;
8110dcb8:	e0fffb03 	ldbu	r3,-20(fp)
8110dcbc:	00a04534 	movhi	r2,33044
8110dcc0:	109a9404 	addi	r2,r2,27216
8110dcc4:	18c01324 	muli	r3,r3,76
8110dcc8:	10c5883a 	add	r2,r2,r3
8110dccc:	10801004 	addi	r2,r2,64
8110dcd0:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b64[ucIL] = TRUE;
8110dcd4:	e0fffb03 	ldbu	r3,-20(fp)
8110dcd8:	00a04574 	movhi	r2,33045
8110dcdc:	10b8c004 	addi	r2,r2,-7424
8110dce0:	18c00184 	addi	r3,r3,6
8110dce4:	18c7883a 	add	r3,r3,r3
8110dce8:	18c7883a 	add	r3,r3,r3
8110dcec:	10c5883a 	add	r2,r2,r3
8110dcf0:	00c00044 	movi	r3,1
8110dcf4:	10c00015 	stw	r3,0(r2)
			break;
8110dcf8:	00000606 	br	8110dd14 <bSendUART64v2+0x1f4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_64; ucIL++)
8110dcfc:	e0bffb03 	ldbu	r2,-20(fp)
8110dd00:	10800044 	addi	r2,r2,1
8110dd04:	e0bffb05 	stb	r2,-20(fp)
8110dd08:	e0bffb03 	ldbu	r2,-20(fp)
8110dd0c:	10800230 	cmpltui	r2,r2,8
8110dd10:	103fb81e 	bne	r2,zero,8110dbf4 <__reset+0xfb0edbf4>
			break;
		}
	}


	if ( ucIL >= N_64 ) {
8110dd14:	e0bffb03 	ldbu	r2,-20(fp)
8110dd18:	10800230 	cmpltui	r2,r2,8
8110dd1c:	1000091e 	bne	r2,zero,8110dd44 <bSendUART64v2+0x224>
		ucErrorCode = OSSemPost(xSemCountBuffer64);
8110dd20:	d0a04d17 	ldw	r2,-32460(gp)
8110dd24:	1009883a 	mov	r4,r2
8110dd28:	1131f080 	call	81131f08 <OSSemPost>
8110dd2c:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer64);
8110dd30:	d0a05c17 	ldw	r2,-32400(gp)
8110dd34:	1009883a 	mov	r4,r2
8110dd38:	11301180 	call	81130118 <OSMutexPost>
		return bSuccessL;
8110dd3c:	e0bffc17 	ldw	r2,-16(fp)
8110dd40:	00003006 	br	8110de04 <bSendUART64v2+0x2e4>
	}

	bSuccessL = TRUE;
8110dd44:	00800044 	movi	r2,1
8110dd48:	e0bffc15 	stw	r2,-16(fp)
	SemCount64--; /* Sure that you get the semaphore */
8110dd4c:	d0a05f03 	ldbu	r2,-32388(gp)
8110dd50:	10bfffc4 	addi	r2,r2,-1
8110dd54:	d0a05f05 	stb	r2,-32388(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */


	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110dd58:	d0a05e17 	ldw	r2,-32392(gp)
8110dd5c:	e0fffd04 	addi	r3,fp,-12
8110dd60:	180d883a 	mov	r6,r3
8110dd64:	01400084 	movi	r5,2
8110dd68:	1009883a 	mov	r4,r2
8110dd6c:	112fb740 	call	8112fb74 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110dd70:	e0bffd03 	ldbu	r2,-12(fp)
8110dd74:	10803fcc 	andi	r2,r2,255
8110dd78:	10000c26 	beq	r2,zero,8110ddac <bSendUART64v2+0x28c>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART64v2)\n");
8110dd7c:	d0a05017 	ldw	r2,-32448(gp)
8110dd80:	100f883a 	mov	r7,r2
8110dd84:	01801bc4 	movi	r6,111
8110dd88:	01400044 	movi	r5,1
8110dd8c:	01204534 	movhi	r4,33044
8110dd90:	2101e004 	addi	r4,r4,1920
8110dd94:	111405c0 	call	8111405c <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer64 */
		OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64 */
8110dd98:	d0a05c17 	ldw	r2,-32400(gp)
8110dd9c:	1009883a 	mov	r4,r2
8110dda0:	11301180 	call	81130118 <OSMutexPost>
		return bSuccessL;
8110dda4:	e0bffc17 	ldw	r2,-16(fp)
8110dda8:	00001606 	br	8110de04 <bSendUART64v2+0x2e4>


	/* ---> At this point we have all resources to send the message */


	puts(xBuffer64[ucIL].buffer);
8110ddac:	e0bffb03 	ldbu	r2,-20(fp)
8110ddb0:	10c01324 	muli	r3,r2,76
8110ddb4:	00a04534 	movhi	r2,33044
8110ddb8:	109a9404 	addi	r2,r2,27216
8110ddbc:	1885883a 	add	r2,r3,r2
8110ddc0:	1009883a 	mov	r4,r2
8110ddc4:	111502c0 	call	8111502c <puts>
	xBuffer64[ucIL].bSent = TRUE;
8110ddc8:	e0fffb03 	ldbu	r3,-20(fp)
8110ddcc:	00a04534 	movhi	r2,33044
8110ddd0:	109a9404 	addi	r2,r2,27216
8110ddd4:	18c01324 	muli	r3,r3,76
8110ddd8:	10c5883a 	add	r2,r2,r3
8110dddc:	10801004 	addi	r2,r2,64
8110dde0:	00c00044 	movi	r3,1
8110dde4:	10c00015 	stw	r3,0(r2)


	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */
	OSMutexPost(xTxUARTMutex);
8110dde8:	d0a05e17 	ldw	r2,-32392(gp)
8110ddec:	1009883a 	mov	r4,r2
8110ddf0:	11301180 	call	81130118 <OSMutexPost>
	OSMutexPost(xMutexBuffer64);
8110ddf4:	d0a05c17 	ldw	r2,-32400(gp)
8110ddf8:	1009883a 	mov	r4,r2
8110ddfc:	11301180 	call	81130118 <OSMutexPost>

	return bSuccessL;
8110de00:	e0bffc17 	ldw	r2,-16(fp)
}
8110de04:	e037883a 	mov	sp,fp
8110de08:	dfc00117 	ldw	ra,4(sp)
8110de0c:	df000017 	ldw	fp,0(sp)
8110de10:	dec00204 	addi	sp,sp,8
8110de14:	f800283a 	ret

8110de18 <bSendUART32v2>:



/* Make sure that there is only 31 characters to send */
/* Always, ALWAYS send only an char[32] that you first did a memset(cBuffer,0,32), before put some string on it. */
bool bSendUART32v2 ( char *cBuffer, short int siIdMessage ) {
8110de18:	defff904 	addi	sp,sp,-28
8110de1c:	de00012e 	bgeu	sp,et,8110de24 <bSendUART32v2+0xc>
8110de20:	003b68fa 	trap	3
8110de24:	dfc00615 	stw	ra,24(sp)
8110de28:	df000515 	stw	fp,20(sp)
8110de2c:	df000504 	addi	fp,sp,20
8110de30:	e13ffe15 	stw	r4,-8(fp)
8110de34:	2805883a 	mov	r2,r5
8110de38:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;
8110de3c:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110de40:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110de44:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110de48:	e03ffc15 	stw	zero,-16(fp)
	
	OSSemPend(xSemCountBuffer32, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110de4c:	d0a05b17 	ldw	r2,-32404(gp)
8110de50:	e0fffd04 	addi	r3,fp,-12
8110de54:	180d883a 	mov	r6,r3
8110de58:	01400504 	movi	r5,20
8110de5c:	1009883a 	mov	r4,r2
8110de60:	1131b800 	call	81131b80 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110de64:	e0bffd03 	ldbu	r2,-12(fp)
8110de68:	10803fcc 	andi	r2,r2,255
8110de6c:	10000326 	beq	r2,zero,8110de7c <bSendUART32v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110de70:	11101580 	call	81110158 <vFailGetCountSemaphorexBuffer32>
		return bSuccessL;
8110de74:	e0bffc17 	ldw	r2,-16(fp)
8110de78:	0000a006 	br	8110e0fc <bSendUART32v2+0x2e4>

	/* ---> At this point we know that there is some space in the buffer */


	/* Need to get the Mutex that protects xBuffer32 */
	OSMutexPend(xMutexBuffer32, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110de7c:	d0a05817 	ldw	r2,-32416(gp)
8110de80:	e0fffd04 	addi	r3,fp,-12
8110de84:	180d883a 	mov	r6,r3
8110de88:	01400104 	movi	r5,4
8110de8c:	1009883a 	mov	r4,r2
8110de90:	112fb740 	call	8112fb74 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110de94:	e0bffd03 	ldbu	r2,-12(fp)
8110de98:	10803fcc 	andi	r2,r2,255
8110de9c:	10001126 	beq	r2,zero,8110dee4 <bSendUART32v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer32 that protect xBuffer32. (bSendUART32v2)\n");
8110dea0:	d0a05017 	ldw	r2,-32448(gp)
8110dea4:	100f883a 	mov	r7,r2
8110dea8:	018013c4 	movi	r6,79
8110deac:	01400044 	movi	r5,1
8110deb0:	01204534 	movhi	r4,33044
8110deb4:	2101fc04 	addi	r4,r4,2032
8110deb8:	111405c0 	call	8111405c <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer32);
8110debc:	d0a05b17 	ldw	r2,-32404(gp)
8110dec0:	1009883a 	mov	r4,r2
8110dec4:	1131f080 	call	81131f08 <OSSemPost>
8110dec8:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110decc:	e0bffd03 	ldbu	r2,-12(fp)
8110ded0:	10803fcc 	andi	r2,r2,255
8110ded4:	10000126 	beq	r2,zero,8110dedc <bSendUART32v2+0xc4>
			vFailSetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110ded8:	110ff500 	call	8110ff50 <vFailSetCountSemaphorexBuffer32>
		}

		return bSuccessL;
8110dedc:	e0bffc17 	ldw	r2,-16(fp)
8110dee0:	00008606 	br	8110e0fc <bSendUART32v2+0x2e4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_32; ucIL++)
8110dee4:	e03ffb05 	stb	zero,-20(fp)
8110dee8:	00004506 	br	8110e000 <bSendUART32v2+0x1e8>
	{
		if ( xInUseRetrans.b32[ucIL] == FALSE ) {
8110deec:	e0fffb03 	ldbu	r3,-20(fp)
8110def0:	00a04574 	movhi	r2,33045
8110def4:	10b8c004 	addi	r2,r2,-7424
8110def8:	18c00384 	addi	r3,r3,14
8110defc:	18c7883a 	add	r3,r3,r3
8110df00:	18c7883a 	add	r3,r3,r3
8110df04:	10c5883a 	add	r2,r2,r3
8110df08:	10800017 	ldw	r2,0(r2)
8110df0c:	1000391e 	bne	r2,zero,8110dff4 <bSendUART32v2+0x1dc>
			/* Clear the buffer */
			memset(xBuffer32[ucIL].buffer, 0, 32);
8110df10:	e0bffb03 	ldbu	r2,-20(fp)
8110df14:	10c00b24 	muli	r3,r2,44
8110df18:	00a04574 	movhi	r2,33045
8110df1c:	10a86404 	addi	r2,r2,-24176
8110df20:	1885883a 	add	r2,r3,r2
8110df24:	01800804 	movi	r6,32
8110df28:	000b883a 	mov	r5,zero
8110df2c:	1009883a 	mov	r4,r2
8110df30:	1114bc00 	call	81114bc0 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer32[ucIL].buffer, cBuffer, 31);
8110df34:	e0bffb03 	ldbu	r2,-20(fp)
8110df38:	10c00b24 	muli	r3,r2,44
8110df3c:	00a04574 	movhi	r2,33045
8110df40:	10a86404 	addi	r2,r2,-24176
8110df44:	1885883a 	add	r2,r3,r2
8110df48:	018007c4 	movi	r6,31
8110df4c:	e17ffe17 	ldw	r5,-8(fp)
8110df50:	1009883a 	mov	r4,r2
8110df54:	1114a700 	call	81114a70 <memcpy>
			xBuffer32[ucIL].usiId = siIdMessage;
8110df58:	e13ffb03 	ldbu	r4,-20(fp)
8110df5c:	e0ffff0b 	ldhu	r3,-4(fp)
8110df60:	00a04574 	movhi	r2,33045
8110df64:	10a86404 	addi	r2,r2,-24176
8110df68:	21000b24 	muli	r4,r4,44
8110df6c:	1105883a 	add	r2,r2,r4
8110df70:	10800904 	addi	r2,r2,36
8110df74:	10c0000d 	sth	r3,0(r2)
			xBuffer32[ucIL].ucNofRetries = 0;
8110df78:	e0fffb03 	ldbu	r3,-20(fp)
8110df7c:	00a04574 	movhi	r2,33045
8110df80:	10a86404 	addi	r2,r2,-24176
8110df84:	18c00b24 	muli	r3,r3,44
8110df88:	10c5883a 	add	r2,r2,r3
8110df8c:	10800a04 	addi	r2,r2,40
8110df90:	10000005 	stb	zero,0(r2)
			xBuffer32[ucIL].usiTimeOut = 0;
8110df94:	e0fffb03 	ldbu	r3,-20(fp)
8110df98:	00a04574 	movhi	r2,33045
8110df9c:	10a86404 	addi	r2,r2,-24176
8110dfa0:	18c00b24 	muli	r3,r3,44
8110dfa4:	10c5883a 	add	r2,r2,r3
8110dfa8:	10800984 	addi	r2,r2,38
8110dfac:	1000000d 	sth	zero,0(r2)
			xBuffer32[ucIL].bSent = FALSE;
8110dfb0:	e0fffb03 	ldbu	r3,-20(fp)
8110dfb4:	00a04574 	movhi	r2,33045
8110dfb8:	10a86404 	addi	r2,r2,-24176
8110dfbc:	18c00b24 	muli	r3,r3,44
8110dfc0:	10c5883a 	add	r2,r2,r3
8110dfc4:	10800804 	addi	r2,r2,32
8110dfc8:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b32[ucIL] = TRUE;
8110dfcc:	e0fffb03 	ldbu	r3,-20(fp)
8110dfd0:	00a04574 	movhi	r2,33045
8110dfd4:	10b8c004 	addi	r2,r2,-7424
8110dfd8:	18c00384 	addi	r3,r3,14
8110dfdc:	18c7883a 	add	r3,r3,r3
8110dfe0:	18c7883a 	add	r3,r3,r3
8110dfe4:	10c5883a 	add	r2,r2,r3
8110dfe8:	00c00044 	movi	r3,1
8110dfec:	10c00015 	stw	r3,0(r2)
			break;
8110dff0:	00000606 	br	8110e00c <bSendUART32v2+0x1f4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_32; ucIL++)
8110dff4:	e0bffb03 	ldbu	r2,-20(fp)
8110dff8:	10800044 	addi	r2,r2,1
8110dffc:	e0bffb05 	stb	r2,-20(fp)
8110e000:	e0bffb03 	ldbu	r2,-20(fp)
8110e004:	10800230 	cmpltui	r2,r2,8
8110e008:	103fb81e 	bne	r2,zero,8110deec <__reset+0xfb0edeec>
			xInUseRetrans.b32[ucIL] = TRUE;
			break;
		}
	}	

	if ( ucIL >= N_32 ) {
8110e00c:	e0bffb03 	ldbu	r2,-20(fp)
8110e010:	10800230 	cmpltui	r2,r2,8
8110e014:	1000091e 	bne	r2,zero,8110e03c <bSendUART32v2+0x224>
		ucErrorCode = OSSemPost(xSemCountBuffer32);
8110e018:	d0a05b17 	ldw	r2,-32404(gp)
8110e01c:	1009883a 	mov	r4,r2
8110e020:	1131f080 	call	81131f08 <OSSemPost>
8110e024:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer32);
8110e028:	d0a05817 	ldw	r2,-32416(gp)
8110e02c:	1009883a 	mov	r4,r2
8110e030:	11301180 	call	81130118 <OSMutexPost>
		return bSuccessL;
8110e034:	e0bffc17 	ldw	r2,-16(fp)
8110e038:	00003006 	br	8110e0fc <bSendUART32v2+0x2e4>
	}
	
	bSuccessL = TRUE;
8110e03c:	00800044 	movi	r2,1
8110e040:	e0bffc15 	stw	r2,-16(fp)
	SemCount32--; /* Sure that you get the semaphore */
8110e044:	d0a05683 	ldbu	r2,-32422(gp)
8110e048:	10bfffc4 	addi	r2,r2,-1
8110e04c:	d0a05685 	stb	r2,-32422(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */


	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110e050:	d0a05e17 	ldw	r2,-32392(gp)
8110e054:	e0fffd04 	addi	r3,fp,-12
8110e058:	180d883a 	mov	r6,r3
8110e05c:	01400084 	movi	r5,2
8110e060:	1009883a 	mov	r4,r2
8110e064:	112fb740 	call	8112fb74 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110e068:	e0bffd03 	ldbu	r2,-12(fp)
8110e06c:	10803fcc 	andi	r2,r2,255
8110e070:	10000c26 	beq	r2,zero,8110e0a4 <bSendUART32v2+0x28c>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART32v2)\n");
8110e074:	d0a05017 	ldw	r2,-32448(gp)
8110e078:	100f883a 	mov	r7,r2
8110e07c:	01801bc4 	movi	r6,111
8110e080:	01400044 	movi	r5,1
8110e084:	01204534 	movhi	r4,33044
8110e088:	21021004 	addi	r4,r4,2112
8110e08c:	111405c0 	call	8111405c <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer64 */
		OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xMutexBuffer32 */
8110e090:	d0a05817 	ldw	r2,-32416(gp)
8110e094:	1009883a 	mov	r4,r2
8110e098:	11301180 	call	81130118 <OSMutexPost>
		return bSuccessL;
8110e09c:	e0bffc17 	ldw	r2,-16(fp)
8110e0a0:	00001606 	br	8110e0fc <bSendUART32v2+0x2e4>
	}


	/* ---> At this point we have all resources to send the message */

	puts(xBuffer32[ucIL].buffer);
8110e0a4:	e0bffb03 	ldbu	r2,-20(fp)
8110e0a8:	10c00b24 	muli	r3,r2,44
8110e0ac:	00a04574 	movhi	r2,33045
8110e0b0:	10a86404 	addi	r2,r2,-24176
8110e0b4:	1885883a 	add	r2,r3,r2
8110e0b8:	1009883a 	mov	r4,r2
8110e0bc:	111502c0 	call	8111502c <puts>
	xBuffer32[ucIL].bSent = TRUE;
8110e0c0:	e0fffb03 	ldbu	r3,-20(fp)
8110e0c4:	00a04574 	movhi	r2,33045
8110e0c8:	10a86404 	addi	r2,r2,-24176
8110e0cc:	18c00b24 	muli	r3,r3,44
8110e0d0:	10c5883a 	add	r2,r2,r3
8110e0d4:	10800804 	addi	r2,r2,32
8110e0d8:	00c00044 	movi	r3,1
8110e0dc:	10c00015 	stw	r3,0(r2)

	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */


	OSMutexPost(xTxUARTMutex);
8110e0e0:	d0a05e17 	ldw	r2,-32392(gp)
8110e0e4:	1009883a 	mov	r4,r2
8110e0e8:	11301180 	call	81130118 <OSMutexPost>
	OSMutexPost(xMutexBuffer32);
8110e0ec:	d0a05817 	ldw	r2,-32416(gp)
8110e0f0:	1009883a 	mov	r4,r2
8110e0f4:	11301180 	call	81130118 <OSMutexPost>

	return bSuccessL;
8110e0f8:	e0bffc17 	ldw	r2,-16(fp)
}
8110e0fc:	e037883a 	mov	sp,fp
8110e100:	dfc00117 	ldw	ra,4(sp)
8110e104:	df000017 	ldw	fp,0(sp)
8110e108:	dec00204 	addi	sp,sp,8
8110e10c:	f800283a 	ret

8110e110 <vSendEthConf>:


void vSendEthConf ( void ) {
8110e110:	deffc304 	addi	sp,sp,-244
8110e114:	de00012e 	bgeu	sp,et,8110e11c <vSendEthConf+0xc>
8110e118:	003b68fa 	trap	3
8110e11c:	dfc03c15 	stw	ra,240(sp)
8110e120:	df003b15 	stw	fp,236(sp)
8110e124:	dd403a15 	stw	r21,232(sp)
8110e128:	dd003915 	stw	r20,228(sp)
8110e12c:	dcc03815 	stw	r19,224(sp)
8110e130:	dc803715 	stw	r18,220(sp)
8110e134:	dc403615 	stw	r17,216(sp)
8110e138:	dc003515 	stw	r16,212(sp)
8110e13c:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
8110e140:	e03fd98d 	sth	zero,-154(fp)
8110e144:	e03fda0d 	sth	zero,-152(fp)
8110e148:	e0bfda84 	addi	r2,fp,-150
8110e14c:	00c01f04 	movi	r3,124
8110e150:	180d883a 	mov	r6,r3
8110e154:	000b883a 	mov	r5,zero
8110e158:	1009883a 	mov	r4,r2
8110e15c:	1114bc00 	call	81114bc0 <memset>
    unsigned char crc = 0;
8110e160:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110e164:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110e168:	110e5b80 	call	8110e5b8 <usiGetIdCMD>
8110e16c:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e170:	e57fd90b 	ldhu	r21,-156(fp)
8110e174:	00a04574 	movhi	r2,33045
8110e178:	108c6404 	addi	r2,r2,12688
8110e17c:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110e180:	00a04574 	movhi	r2,33045
8110e184:	108c6404 	addi	r2,r2,12688
8110e188:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e18c:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110e190:	00a04574 	movhi	r2,33045
8110e194:	108c6404 	addi	r2,r2,12688
8110e198:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e19c:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110e1a0:	00a04574 	movhi	r2,33045
8110e1a4:	108c6404 	addi	r2,r2,12688
8110e1a8:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e1ac:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110e1b0:	00a04574 	movhi	r2,33045
8110e1b4:	108c6404 	addi	r2,r2,12688
8110e1b8:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e1bc:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110e1c0:	00a04574 	movhi	r2,33045
8110e1c4:	108c6404 	addi	r2,r2,12688
8110e1c8:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e1cc:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110e1d0:	00a04574 	movhi	r2,33045
8110e1d4:	108c6404 	addi	r2,r2,12688
8110e1d8:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e1dc:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110e1e0:	00a04574 	movhi	r2,33045
8110e1e4:	108c6404 	addi	r2,r2,12688
8110e1e8:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e1ec:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110e1f0:	00a04574 	movhi	r2,33045
8110e1f4:	108c6404 	addi	r2,r2,12688
8110e1f8:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e1fc:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110e200:	00a04574 	movhi	r2,33045
8110e204:	108c6404 	addi	r2,r2,12688
8110e208:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e20c:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110e210:	00a04574 	movhi	r2,33045
8110e214:	108c6404 	addi	r2,r2,12688
8110e218:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e21c:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110e220:	00a04574 	movhi	r2,33045
8110e224:	108c6404 	addi	r2,r2,12688
8110e228:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e22c:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110e230:	00a04574 	movhi	r2,33045
8110e234:	108c6404 	addi	r2,r2,12688
8110e238:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e23c:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110e240:	00a04574 	movhi	r2,33045
8110e244:	108c6404 	addi	r2,r2,12688
8110e248:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e24c:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110e250:	00a04574 	movhi	r2,33045
8110e254:	108c6404 	addi	r2,r2,12688
8110e258:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e25c:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110e260:	00a04574 	movhi	r2,33045
8110e264:	108c6404 	addi	r2,r2,12688
8110e268:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e26c:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110e270:	00a04574 	movhi	r2,33045
8110e274:	108c6404 	addi	r2,r2,12688
8110e278:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e27c:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
8110e280:	00a04574 	movhi	r2,33045
8110e284:	108c6404 	addi	r2,r2,12688
8110e288:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110e28c:	10bfffcc 	andi	r2,r2,65535
8110e290:	e53fd984 	addi	r20,fp,-154
8110e294:	d8801115 	stw	r2,68(sp)
8110e298:	dcc01015 	stw	r19,64(sp)
8110e29c:	dc800f15 	stw	r18,60(sp)
8110e2a0:	dc400e15 	stw	r17,56(sp)
8110e2a4:	dc000d15 	stw	r16,52(sp)
8110e2a8:	dbc00c15 	stw	r15,48(sp)
8110e2ac:	db800b15 	stw	r14,44(sp)
8110e2b0:	db400a15 	stw	r13,40(sp)
8110e2b4:	db000915 	stw	r12,36(sp)
8110e2b8:	dac00815 	stw	r11,32(sp)
8110e2bc:	da800715 	stw	r10,28(sp)
8110e2c0:	da400615 	stw	r9,24(sp)
8110e2c4:	da000515 	stw	r8,20(sp)
8110e2c8:	d9c00415 	stw	r7,16(sp)
8110e2cc:	d9800315 	stw	r6,12(sp)
8110e2d0:	d9400215 	stw	r5,8(sp)
8110e2d4:	d9000115 	stw	r4,4(sp)
8110e2d8:	d8c00015 	stw	r3,0(sp)
8110e2dc:	a80f883a 	mov	r7,r21
8110e2e0:	018010c4 	movi	r6,67
8110e2e4:	01604534 	movhi	r5,33044
8110e2e8:	29422c04 	addi	r5,r5,2224
8110e2ec:	a009883a 	mov	r4,r20
8110e2f0:	11153700 	call	81115370 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
8110e2f4:	e0bfd984 	addi	r2,fp,-154
8110e2f8:	1009883a 	mov	r4,r2
8110e2fc:	11155840 	call	81115584 <strlen>
8110e300:	1007883a 	mov	r3,r2
8110e304:	e0bfd984 	addi	r2,fp,-154
8110e308:	180b883a 	mov	r5,r3
8110e30c:	1009883a 	mov	r4,r2
8110e310:	110f7e00 	call	8110f7e0 <ucCrc8wInit>
8110e314:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
8110e318:	e13fd703 	ldbu	r4,-164(fp)
8110e31c:	e0ffd984 	addi	r3,fp,-154
8110e320:	e0bfd984 	addi	r2,fp,-154
8110e324:	200f883a 	mov	r7,r4
8110e328:	180d883a 	mov	r6,r3
8110e32c:	01604534 	movhi	r5,33044
8110e330:	29424404 	addi	r5,r5,2320
8110e334:	1009883a 	mov	r4,r2
8110e338:	11153700 	call	81115370 <sprintf>

	bSuccees = bSendUART128v2(cBufferETH, usiIdCMDLocal);
8110e33c:	e0bfd90b 	ldhu	r2,-156(fp)
8110e340:	10ffffcc 	andi	r3,r2,65535
8110e344:	18e0001c 	xori	r3,r3,32768
8110e348:	18e00004 	addi	r3,r3,-32768
8110e34c:	e0bfd984 	addi	r2,fp,-154
8110e350:	180b883a 	mov	r5,r3
8110e354:	1009883a 	mov	r4,r2
8110e358:	110d8300 	call	8110d830 <bSendUART128v2>
8110e35c:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
8110e360:	e0bfd817 	ldw	r2,-160(fp)
8110e364:	10800060 	cmpeqi	r2,r2,1
8110e368:	1000011e 	bne	r2,zero,8110e370 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
8110e36c:	11103600 	call	81110360 <vCouldNotSendEthConfUART>
	}
}
8110e370:	0001883a 	nop
8110e374:	e6fffa04 	addi	sp,fp,-24
8110e378:	dfc00717 	ldw	ra,28(sp)
8110e37c:	df000617 	ldw	fp,24(sp)
8110e380:	dd400517 	ldw	r21,20(sp)
8110e384:	dd000417 	ldw	r20,16(sp)
8110e388:	dcc00317 	ldw	r19,12(sp)
8110e38c:	dc800217 	ldw	r18,8(sp)
8110e390:	dc400117 	ldw	r17,4(sp)
8110e394:	dc000017 	ldw	r16,0(sp)
8110e398:	dec00804 	addi	sp,sp,32
8110e39c:	f800283a 	ret

8110e3a0 <vSendTurnOff>:


void vSendTurnOff ( void ) {
8110e3a0:	defff304 	addi	sp,sp,-52
8110e3a4:	de00012e 	bgeu	sp,et,8110e3ac <vSendTurnOff+0xc>
8110e3a8:	003b68fa 	trap	3
8110e3ac:	dfc00c15 	stw	ra,48(sp)
8110e3b0:	df000b15 	stw	fp,44(sp)
8110e3b4:	df000b04 	addi	fp,sp,44
    char cBufferTurnOff[32] = "";
8110e3b8:	e03ff78d 	sth	zero,-34(fp)
8110e3bc:	e03ff80d 	sth	zero,-32(fp)
8110e3c0:	e03ff88d 	sth	zero,-30(fp)
8110e3c4:	e03ff90d 	sth	zero,-28(fp)
8110e3c8:	e03ff98d 	sth	zero,-26(fp)
8110e3cc:	e03ffa0d 	sth	zero,-24(fp)
8110e3d0:	e03ffa8d 	sth	zero,-22(fp)
8110e3d4:	e03ffb0d 	sth	zero,-20(fp)
8110e3d8:	e03ffb8d 	sth	zero,-18(fp)
8110e3dc:	e03ffc0d 	sth	zero,-16(fp)
8110e3e0:	e03ffc8d 	sth	zero,-14(fp)
8110e3e4:	e03ffd0d 	sth	zero,-12(fp)
8110e3e8:	e03ffd8d 	sth	zero,-10(fp)
8110e3ec:	e03ffe0d 	sth	zero,-8(fp)
8110e3f0:	e03ffe8d 	sth	zero,-6(fp)
8110e3f4:	e03fff0d 	sth	zero,-4(fp)
    unsigned char crc = 0;
8110e3f8:	e03ff505 	stb	zero,-44(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110e3fc:	e03ff615 	stw	zero,-40(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110e400:	110e5b80 	call	8110e5b8 <usiGetIdCMD>
8110e404:	e0bff70d 	sth	r2,-36(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferTurnOff, TURNOFF_SPRINTF, usiIdCMDLocal);
8110e408:	e0fff70b 	ldhu	r3,-36(fp)
8110e40c:	e0bff784 	addi	r2,fp,-34
8110e410:	180d883a 	mov	r6,r3
8110e414:	01604534 	movhi	r5,33044
8110e418:	29424704 	addi	r5,r5,2332
8110e41c:	1009883a 	mov	r4,r2
8110e420:	11153700 	call	81115370 <sprintf>
    crc = ucCrc8wInit( cBufferTurnOff , strlen(cBufferTurnOff));
8110e424:	e0bff784 	addi	r2,fp,-34
8110e428:	1009883a 	mov	r4,r2
8110e42c:	11155840 	call	81115584 <strlen>
8110e430:	1007883a 	mov	r3,r2
8110e434:	e0bff784 	addi	r2,fp,-34
8110e438:	180b883a 	mov	r5,r3
8110e43c:	1009883a 	mov	r4,r2
8110e440:	110f7e00 	call	8110f7e0 <ucCrc8wInit>
8110e444:	e0bff505 	stb	r2,-44(fp)
    sprintf(cBufferTurnOff, "%s|%hhu;", cBufferTurnOff, crc );
8110e448:	e13ff503 	ldbu	r4,-44(fp)
8110e44c:	e0fff784 	addi	r3,fp,-34
8110e450:	e0bff784 	addi	r2,fp,-34
8110e454:	200f883a 	mov	r7,r4
8110e458:	180d883a 	mov	r6,r3
8110e45c:	01604534 	movhi	r5,33044
8110e460:	29424404 	addi	r5,r5,2320
8110e464:	1009883a 	mov	r4,r2
8110e468:	11153700 	call	81115370 <sprintf>

	bSuccees = bSendUART32v2(cBufferTurnOff, usiIdCMDLocal);
8110e46c:	e0bff70b 	ldhu	r2,-36(fp)
8110e470:	10ffffcc 	andi	r3,r2,65535
8110e474:	18e0001c 	xori	r3,r3,32768
8110e478:	18e00004 	addi	r3,r3,-32768
8110e47c:	e0bff784 	addi	r2,fp,-34
8110e480:	180b883a 	mov	r5,r3
8110e484:	1009883a 	mov	r4,r2
8110e488:	110de180 	call	8110de18 <bSendUART32v2>
8110e48c:	e0bff615 	stw	r2,-40(fp)

	if ( bSuccees != TRUE ) {
8110e490:	e0bff617 	ldw	r2,-40(fp)
8110e494:	10800060 	cmpeqi	r2,r2,1
8110e498:	1000011e 	bne	r2,zero,8110e4a0 <vSendTurnOff+0x100>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTurnOff();
8110e49c:	1110a080 	call	81110a08 <vCouldNotSendTurnOff>
	}
}
8110e4a0:	0001883a 	nop
8110e4a4:	e037883a 	mov	sp,fp
8110e4a8:	dfc00117 	ldw	ra,4(sp)
8110e4ac:	df000017 	ldw	fp,0(sp)
8110e4b0:	dec00204 	addi	sp,sp,8
8110e4b4:	f800283a 	ret

8110e4b8 <vSendLog>:

void vSendLog ( const char * cDataIn ) {
8110e4b8:	deffda04 	addi	sp,sp,-152
8110e4bc:	de00012e 	bgeu	sp,et,8110e4c4 <vSendLog+0xc>
8110e4c0:	003b68fa 	trap	3
8110e4c4:	dfc02515 	stw	ra,148(sp)
8110e4c8:	df002415 	stw	fp,144(sp)
8110e4cc:	df002404 	addi	fp,sp,144
8110e4d0:	e13fff15 	stw	r4,-4(fp)
    char cBufferLog[128] = "";
8110e4d4:	e03fde8d 	sth	zero,-134(fp)
8110e4d8:	e03fdf0d 	sth	zero,-132(fp)
8110e4dc:	e0bfdf84 	addi	r2,fp,-130
8110e4e0:	00c01f04 	movi	r3,124
8110e4e4:	180d883a 	mov	r6,r3
8110e4e8:	000b883a 	mov	r5,zero
8110e4ec:	1009883a 	mov	r4,r2
8110e4f0:	1114bc00 	call	81114bc0 <memset>
    unsigned char crc = 0;
8110e4f4:	e03fdc05 	stb	zero,-144(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110e4f8:	e03fdd15 	stw	zero,-140(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110e4fc:	110e5b80 	call	8110e5b8 <usiGetIdCMD>
8110e500:	e0bfde0d 	sth	r2,-136(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferLog, LOG_SPRINTF, usiIdCMDLocal, cDataIn);
8110e504:	e0ffde0b 	ldhu	r3,-136(fp)
8110e508:	e0bfde84 	addi	r2,fp,-134
8110e50c:	e1ffff17 	ldw	r7,-4(fp)
8110e510:	180d883a 	mov	r6,r3
8110e514:	01604534 	movhi	r5,33044
8110e518:	29424904 	addi	r5,r5,2340
8110e51c:	1009883a 	mov	r4,r2
8110e520:	11153700 	call	81115370 <sprintf>
    crc = ucCrc8wInit( cBufferLog , strlen(cBufferLog));
8110e524:	e0bfde84 	addi	r2,fp,-134
8110e528:	1009883a 	mov	r4,r2
8110e52c:	11155840 	call	81115584 <strlen>
8110e530:	1007883a 	mov	r3,r2
8110e534:	e0bfde84 	addi	r2,fp,-134
8110e538:	180b883a 	mov	r5,r3
8110e53c:	1009883a 	mov	r4,r2
8110e540:	110f7e00 	call	8110f7e0 <ucCrc8wInit>
8110e544:	e0bfdc05 	stb	r2,-144(fp)
    sprintf(cBufferLog, "%s|%hhu;", cBufferLog, crc );
8110e548:	e13fdc03 	ldbu	r4,-144(fp)
8110e54c:	e0ffde84 	addi	r3,fp,-134
8110e550:	e0bfde84 	addi	r2,fp,-134
8110e554:	200f883a 	mov	r7,r4
8110e558:	180d883a 	mov	r6,r3
8110e55c:	01604534 	movhi	r5,33044
8110e560:	29424404 	addi	r5,r5,2320
8110e564:	1009883a 	mov	r4,r2
8110e568:	11153700 	call	81115370 <sprintf>

	bSuccees = bSendUART128v2(cBufferLog, usiIdCMDLocal);
8110e56c:	e0bfde0b 	ldhu	r2,-136(fp)
8110e570:	10ffffcc 	andi	r3,r2,65535
8110e574:	18e0001c 	xori	r3,r3,32768
8110e578:	18e00004 	addi	r3,r3,-32768
8110e57c:	e0bfde84 	addi	r2,fp,-134
8110e580:	180b883a 	mov	r5,r3
8110e584:	1009883a 	mov	r4,r2
8110e588:	110d8300 	call	8110d830 <bSendUART128v2>
8110e58c:	e0bfdd15 	stw	r2,-140(fp)

	if ( bSuccees != TRUE ) {
8110e590:	e0bfdd17 	ldw	r2,-140(fp)
8110e594:	10800060 	cmpeqi	r2,r2,1
8110e598:	1000011e 	bne	r2,zero,8110e5a0 <vSendLog+0xe8>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendLog();
8110e59c:	1110a700 	call	81110a70 <vCouldNotSendLog>
	}
}
8110e5a0:	0001883a 	nop
8110e5a4:	e037883a 	mov	sp,fp
8110e5a8:	dfc00117 	ldw	ra,4(sp)
8110e5ac:	df000017 	ldw	fp,0(sp)
8110e5b0:	dec00204 	addi	sp,sp,8
8110e5b4:	f800283a 	ret

8110e5b8 <usiGetIdCMD>:

unsigned short int usiGetIdCMD ( void ) {
8110e5b8:	deffff04 	addi	sp,sp,-4
8110e5bc:	de00012e 	bgeu	sp,et,8110e5c4 <usiGetIdCMD+0xc>
8110e5c0:	003b68fa 	trap	3
8110e5c4:	df000015 	stw	fp,0(sp)
8110e5c8:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
8110e5cc:	d0a0560b 	ldhu	r2,-32424(gp)
8110e5d0:	10ffffcc 	andi	r3,r2,65535
8110e5d4:	00bfffd4 	movui	r2,65535
8110e5d8:	1880031e 	bne	r3,r2,8110e5e8 <usiGetIdCMD+0x30>
        usiIdCMD = 2;
8110e5dc:	00800084 	movi	r2,2
8110e5e0:	d0a0560d 	sth	r2,-32424(gp)
8110e5e4:	00000306 	br	8110e5f4 <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
8110e5e8:	d0a0560b 	ldhu	r2,-32424(gp)
8110e5ec:	10800044 	addi	r2,r2,1
8110e5f0:	d0a0560d 	sth	r2,-32424(gp)

    return usiIdCMD;
8110e5f4:	d0a0560b 	ldhu	r2,-32424(gp)
}
8110e5f8:	e037883a 	mov	sp,fp
8110e5fc:	df000017 	ldw	fp,0(sp)
8110e600:	dec00104 	addi	sp,sp,4
8110e604:	f800283a 	ret

8110e608 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
8110e608:	defffb04 	addi	sp,sp,-20
8110e60c:	de00012e 	bgeu	sp,et,8110e614 <siPosStr+0xc>
8110e610:	003b68fa 	trap	3
8110e614:	dfc00415 	stw	ra,16(sp)
8110e618:	df000315 	stw	fp,12(sp)
8110e61c:	df000304 	addi	fp,sp,12
8110e620:	e13ffe15 	stw	r4,-8(fp)
8110e624:	2805883a 	mov	r2,r5
8110e628:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
8110e62c:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
8110e630:	e0bfff03 	ldbu	r2,-4(fp)
8110e634:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
8110e638:	e17ffd04 	addi	r5,fp,-12
8110e63c:	e13ffe17 	ldw	r4,-8(fp)
8110e640:	11155380 	call	81115538 <strcspn>
}
8110e644:	e037883a 	mov	sp,fp
8110e648:	dfc00117 	ldw	ra,4(sp)
8110e64c:	df000017 	ldw	fp,0(sp)
8110e650:	dec00204 	addi	sp,sp,8
8110e654:	f800283a 	ret

8110e658 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110e658:	defffc04 	addi	sp,sp,-16
8110e65c:	de00012e 	bgeu	sp,et,8110e664 <vTimeoutCheck+0xc>
8110e660:	003b68fa 	trap	3
8110e664:	dfc00315 	stw	ra,12(sp)
8110e668:	df000215 	stw	fp,8(sp)
8110e66c:	df000204 	addi	fp,sp,8
8110e670:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110e674:	d0a05517 	ldw	r2,-32428(gp)
8110e678:	1009883a 	mov	r4,r2
8110e67c:	1131f080 	call	81131f08 <OSSemPost>
8110e680:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110e684:	e0bffe03 	ldbu	r2,-8(fp)
8110e688:	10000126 	beq	r2,zero,8110e690 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110e68c:	11107980 	call	81110798 <vFailPostBlockingSemTimeoutTask>
	}
}
8110e690:	0001883a 	nop
8110e694:	e037883a 	mov	sp,fp
8110e698:	dfc00117 	ldw	ra,4(sp)
8110e69c:	df000017 	ldw	fp,0(sp)
8110e6a0:	dec00204 	addi	sp,sp,8
8110e6a4:	f800283a 	ret

8110e6a8 <vSendPusTM64>:


/* Send through a medium buffer */
void vSendPusTM64 ( tTMPus xPcktPus ) {
8110e6a8:	deffe304 	addi	sp,sp,-116
8110e6ac:	de00012e 	bgeu	sp,et,8110e6b4 <vSendPusTM64+0xc>
8110e6b0:	003b68fa 	trap	3
8110e6b4:	dfc01815 	stw	ra,96(sp)
8110e6b8:	df001715 	stw	fp,92(sp)
8110e6bc:	df001704 	addi	fp,sp,92
8110e6c0:	e1000215 	stw	r4,8(fp)
8110e6c4:	e1400315 	stw	r5,12(fp)
8110e6c8:	e1800415 	stw	r6,16(fp)
8110e6cc:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[64] = "";
8110e6d0:	e03fef8d 	sth	zero,-66(fp)
8110e6d4:	e03ff00d 	sth	zero,-64(fp)
8110e6d8:	e0bff084 	addi	r2,fp,-62
8110e6dc:	00c00f04 	movi	r3,60
8110e6e0:	180d883a 	mov	r6,r3
8110e6e4:	000b883a 	mov	r5,zero
8110e6e8:	1009883a 	mov	r4,r2
8110e6ec:	1114bc00 	call	81114bc0 <memset>
    unsigned char crc = 0;
8110e6f0:	e03fed45 	stb	zero,-75(fp)
	unsigned char ucIL = 0;
8110e6f4:	e03fed05 	stb	zero,-76(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110e6f8:	e03fee15 	stw	zero,-72(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110e6fc:	110e5b80 	call	8110e5b8 <usiGetIdCMD>
8110e700:	e0bfef0d 	sth	r2,-68(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110e704:	e1bfef0b 	ldhu	r6,-68(fp)
8110e708:	e080030b 	ldhu	r2,12(fp)
8110e70c:	11ffffcc 	andi	r7,r2,65535
8110e710:	e080038b 	ldhu	r2,14(fp)
8110e714:	10bfffcc 	andi	r2,r2,65535
8110e718:	e0c0040b 	ldhu	r3,16(fp)
8110e71c:	18ffffcc 	andi	r3,r3,65535
8110e720:	e100048b 	ldhu	r4,18(fp)
8110e724:	213fffcc 	andi	r4,r4,65535
8110e728:	e140050b 	ldhu	r5,20(fp)
8110e72c:	297fffcc 	andi	r5,r5,65535
8110e730:	e23fef84 	addi	r8,fp,-66
8110e734:	d9400315 	stw	r5,12(sp)
8110e738:	d9000215 	stw	r4,8(sp)
8110e73c:	d8c00115 	stw	r3,4(sp)
8110e740:	d8800015 	stw	r2,0(sp)
8110e744:	01604534 	movhi	r5,33044
8110e748:	29424c04 	addi	r5,r5,2352
8110e74c:	4009883a 	mov	r4,r8
8110e750:	11153700 	call	81115370 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110e754:	e03fed05 	stb	zero,-76(fp)
8110e758:	00001206 	br	8110e7a4 <vSendPusTM64+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110e75c:	e0bfed03 	ldbu	r2,-76(fp)
8110e760:	10800204 	addi	r2,r2,8
8110e764:	1085883a 	add	r2,r2,r2
8110e768:	e0c00204 	addi	r3,fp,8
8110e76c:	1885883a 	add	r2,r3,r2
8110e770:	1080000b 	ldhu	r2,0(r2)
8110e774:	113fffcc 	andi	r4,r2,65535
8110e778:	e0ffef84 	addi	r3,fp,-66
8110e77c:	e0bfef84 	addi	r2,fp,-66
8110e780:	200f883a 	mov	r7,r4
8110e784:	180d883a 	mov	r6,r3
8110e788:	01604534 	movhi	r5,33044
8110e78c:	29425304 	addi	r5,r5,2380
8110e790:	1009883a 	mov	r4,r2
8110e794:	11153700 	call	81115370 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110e798:	e0bfed03 	ldbu	r2,-76(fp)
8110e79c:	10800044 	addi	r2,r2,1
8110e7a0:	e0bfed05 	stb	r2,-76(fp)
8110e7a4:	e0800583 	ldbu	r2,22(fp)
8110e7a8:	10803fcc 	andi	r2,r2,255
8110e7ac:	e0ffed03 	ldbu	r3,-76(fp)
8110e7b0:	18bfea36 	bltu	r3,r2,8110e75c <__reset+0xfb0ee75c>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110e7b4:	e0bfef84 	addi	r2,fp,-66
8110e7b8:	1009883a 	mov	r4,r2
8110e7bc:	11155840 	call	81115584 <strlen>
8110e7c0:	1007883a 	mov	r3,r2
8110e7c4:	e0bfef84 	addi	r2,fp,-66
8110e7c8:	180b883a 	mov	r5,r3
8110e7cc:	1009883a 	mov	r4,r2
8110e7d0:	110f7e00 	call	8110f7e0 <ucCrc8wInit>
8110e7d4:	e0bfed45 	stb	r2,-75(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110e7d8:	e13fed43 	ldbu	r4,-75(fp)
8110e7dc:	e0ffef84 	addi	r3,fp,-66
8110e7e0:	e0bfef84 	addi	r2,fp,-66
8110e7e4:	200f883a 	mov	r7,r4
8110e7e8:	180d883a 	mov	r6,r3
8110e7ec:	01604534 	movhi	r5,33044
8110e7f0:	29424404 	addi	r5,r5,2320
8110e7f4:	1009883a 	mov	r4,r2
8110e7f8:	11153700 	call	81115370 <sprintf>

	bSuccees = bSendUART64v2(cBufferPus, usiIdCMDLocal);
8110e7fc:	e0bfef0b 	ldhu	r2,-68(fp)
8110e800:	10ffffcc 	andi	r3,r2,65535
8110e804:	18e0001c 	xori	r3,r3,32768
8110e808:	18e00004 	addi	r3,r3,-32768
8110e80c:	e0bfef84 	addi	r2,fp,-66
8110e810:	180b883a 	mov	r5,r3
8110e814:	1009883a 	mov	r4,r2
8110e818:	110db200 	call	8110db20 <bSendUART64v2>
8110e81c:	e0bfee15 	stw	r2,-72(fp)

	if ( bSuccees != TRUE ) {
8110e820:	e0bfee17 	ldw	r2,-72(fp)
8110e824:	10800060 	cmpeqi	r2,r2,1
8110e828:	1000031e 	bne	r2,zero,8110e838 <vSendPusTM64+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110e82c:	e0bfef84 	addi	r2,fp,-66
8110e830:	1009883a 	mov	r4,r2
8110e834:	1110ad80 	call	81110ad8 <vCouldNotSendTMPusCommand>
	}
}
8110e838:	0001883a 	nop
8110e83c:	e037883a 	mov	sp,fp
8110e840:	dfc00117 	ldw	ra,4(sp)
8110e844:	df000017 	ldw	fp,0(sp)
8110e848:	dec00604 	addi	sp,sp,24
8110e84c:	f800283a 	ret

8110e850 <vSendPusTM128>:

/* Send through a big buffer */
void vSendPusTM128 ( tTMPus xPcktPus ) {
8110e850:	deffd304 	addi	sp,sp,-180
8110e854:	de00012e 	bgeu	sp,et,8110e85c <vSendPusTM128+0xc>
8110e858:	003b68fa 	trap	3
8110e85c:	dfc02815 	stw	ra,160(sp)
8110e860:	df002715 	stw	fp,156(sp)
8110e864:	df002704 	addi	fp,sp,156
8110e868:	e1000215 	stw	r4,8(fp)
8110e86c:	e1400315 	stw	r5,12(fp)
8110e870:	e1800415 	stw	r6,16(fp)
8110e874:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[128] = "";
8110e878:	e03fdf8d 	sth	zero,-130(fp)
8110e87c:	e03fe00d 	sth	zero,-128(fp)
8110e880:	e0bfe084 	addi	r2,fp,-126
8110e884:	00c01f04 	movi	r3,124
8110e888:	180d883a 	mov	r6,r3
8110e88c:	000b883a 	mov	r5,zero
8110e890:	1009883a 	mov	r4,r2
8110e894:	1114bc00 	call	81114bc0 <memset>
    unsigned char crc = 0;
8110e898:	e03fdd45 	stb	zero,-139(fp)
	unsigned char ucIL = 0;
8110e89c:	e03fdd05 	stb	zero,-140(fp)
    unsigned short int usiIdCMDLocal;
	bool bSuccees = FALSE;
8110e8a0:	e03fde15 	stw	zero,-136(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110e8a4:	110e5b80 	call	8110e5b8 <usiGetIdCMD>
8110e8a8:	e0bfdf0d 	sth	r2,-132(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110e8ac:	e1bfdf0b 	ldhu	r6,-132(fp)
8110e8b0:	e080030b 	ldhu	r2,12(fp)
8110e8b4:	11ffffcc 	andi	r7,r2,65535
8110e8b8:	e080038b 	ldhu	r2,14(fp)
8110e8bc:	10bfffcc 	andi	r2,r2,65535
8110e8c0:	e0c0040b 	ldhu	r3,16(fp)
8110e8c4:	18ffffcc 	andi	r3,r3,65535
8110e8c8:	e100048b 	ldhu	r4,18(fp)
8110e8cc:	213fffcc 	andi	r4,r4,65535
8110e8d0:	e140050b 	ldhu	r5,20(fp)
8110e8d4:	297fffcc 	andi	r5,r5,65535
8110e8d8:	e23fdf84 	addi	r8,fp,-130
8110e8dc:	d9400315 	stw	r5,12(sp)
8110e8e0:	d9000215 	stw	r4,8(sp)
8110e8e4:	d8c00115 	stw	r3,4(sp)
8110e8e8:	d8800015 	stw	r2,0(sp)
8110e8ec:	01604534 	movhi	r5,33044
8110e8f0:	29424c04 	addi	r5,r5,2352
8110e8f4:	4009883a 	mov	r4,r8
8110e8f8:	11153700 	call	81115370 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110e8fc:	e03fdd05 	stb	zero,-140(fp)
8110e900:	00001206 	br	8110e94c <vSendPusTM128+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110e904:	e0bfdd03 	ldbu	r2,-140(fp)
8110e908:	10800204 	addi	r2,r2,8
8110e90c:	1085883a 	add	r2,r2,r2
8110e910:	e0c00204 	addi	r3,fp,8
8110e914:	1885883a 	add	r2,r3,r2
8110e918:	1080000b 	ldhu	r2,0(r2)
8110e91c:	113fffcc 	andi	r4,r2,65535
8110e920:	e0ffdf84 	addi	r3,fp,-130
8110e924:	e0bfdf84 	addi	r2,fp,-130
8110e928:	200f883a 	mov	r7,r4
8110e92c:	180d883a 	mov	r6,r3
8110e930:	01604534 	movhi	r5,33044
8110e934:	29425304 	addi	r5,r5,2380
8110e938:	1009883a 	mov	r4,r2
8110e93c:	11153700 	call	81115370 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110e940:	e0bfdd03 	ldbu	r2,-140(fp)
8110e944:	10800044 	addi	r2,r2,1
8110e948:	e0bfdd05 	stb	r2,-140(fp)
8110e94c:	e0800583 	ldbu	r2,22(fp)
8110e950:	10803fcc 	andi	r2,r2,255
8110e954:	e0ffdd03 	ldbu	r3,-140(fp)
8110e958:	18bfea36 	bltu	r3,r2,8110e904 <__reset+0xfb0ee904>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110e95c:	e0bfdf84 	addi	r2,fp,-130
8110e960:	1009883a 	mov	r4,r2
8110e964:	11155840 	call	81115584 <strlen>
8110e968:	1007883a 	mov	r3,r2
8110e96c:	e0bfdf84 	addi	r2,fp,-130
8110e970:	180b883a 	mov	r5,r3
8110e974:	1009883a 	mov	r4,r2
8110e978:	110f7e00 	call	8110f7e0 <ucCrc8wInit>
8110e97c:	e0bfdd45 	stb	r2,-139(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110e980:	e13fdd43 	ldbu	r4,-139(fp)
8110e984:	e0ffdf84 	addi	r3,fp,-130
8110e988:	e0bfdf84 	addi	r2,fp,-130
8110e98c:	200f883a 	mov	r7,r4
8110e990:	180d883a 	mov	r6,r3
8110e994:	01604534 	movhi	r5,33044
8110e998:	29424404 	addi	r5,r5,2320
8110e99c:	1009883a 	mov	r4,r2
8110e9a0:	11153700 	call	81115370 <sprintf>

	bSuccees = bSendUART128v2(cBufferPus, usiIdCMDLocal);
8110e9a4:	e0bfdf0b 	ldhu	r2,-132(fp)
8110e9a8:	10ffffcc 	andi	r3,r2,65535
8110e9ac:	18e0001c 	xori	r3,r3,32768
8110e9b0:	18e00004 	addi	r3,r3,-32768
8110e9b4:	e0bfdf84 	addi	r2,fp,-130
8110e9b8:	180b883a 	mov	r5,r3
8110e9bc:	1009883a 	mov	r4,r2
8110e9c0:	110d8300 	call	8110d830 <bSendUART128v2>
8110e9c4:	e0bfde15 	stw	r2,-136(fp)

	if ( bSuccees != TRUE ) {
8110e9c8:	e0bfde17 	ldw	r2,-136(fp)
8110e9cc:	10800060 	cmpeqi	r2,r2,1
8110e9d0:	1000031e 	bne	r2,zero,8110e9e0 <vSendPusTM128+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110e9d4:	e0bfdf84 	addi	r2,fp,-130
8110e9d8:	1009883a 	mov	r4,r2
8110e9dc:	1110ad80 	call	81110ad8 <vCouldNotSendTMPusCommand>
	}
}
8110e9e0:	0001883a 	nop
8110e9e4:	e037883a 	mov	sp,fp
8110e9e8:	dfc00117 	ldw	ra,4(sp)
8110e9ec:	df000017 	ldw	fp,0(sp)
8110e9f0:	dec00604 	addi	sp,sp,24
8110e9f4:	f800283a 	ret

8110e9f8 <vTMPusTestConnection>:
/* TM_SCAM_TEST_CONNECTION */
/* 
hp-pck-type		hp-pid		hp-pcat		hp-srv-type		hp-srv-subtype
0				112			0			17				2
*/
void vTMPusTestConnection( unsigned short int usiPusId ) {
8110e9f8:	deffd904 	addi	sp,sp,-156
8110e9fc:	de00012e 	bgeu	sp,et,8110ea04 <vTMPusTestConnection+0xc>
8110ea00:	003b68fa 	trap	3
8110ea04:	dfc02615 	stw	ra,152(sp)
8110ea08:	df002515 	stw	fp,148(sp)
8110ea0c:	df002504 	addi	fp,sp,148
8110ea10:	2005883a 	mov	r2,r4
8110ea14:	e0bfff0d 	sth	r2,-4(fp)
	tTMPus xTmPusL;

	/* For now is hardcoded after full release of the pus I will create defines */
	xTmPusL.usiPusId = usiPusId;
8110ea18:	e0bfff0b 	ldhu	r2,-4(fp)
8110ea1c:	e0bfee0d 	sth	r2,-72(fp)
	xTmPusL.usiPid = 112;
8110ea20:	00801c04 	movi	r2,112
8110ea24:	e0bfec0d 	sth	r2,-80(fp)
	xTmPusL.usiCat = 0;
8110ea28:	e03fec8d 	sth	zero,-78(fp)
	xTmPusL.usiType = 17;
8110ea2c:	00800444 	movi	r2,17
8110ea30:	e0bfed0d 	sth	r2,-76(fp)
	xTmPusL.usiSubType = 2;
8110ea34:	00800084 	movi	r2,2
8110ea38:	e0bfed8d 	sth	r2,-74(fp)

	vSendPusTM64( xTmPusL );
8110ea3c:	d809883a 	mov	r4,sp
8110ea40:	e0bfef04 	addi	r2,fp,-68
8110ea44:	00c01004 	movi	r3,64
8110ea48:	180d883a 	mov	r6,r3
8110ea4c:	100b883a 	mov	r5,r2
8110ea50:	1114a700 	call	81114a70 <memcpy>
8110ea54:	e13feb17 	ldw	r4,-84(fp)
8110ea58:	e17fec17 	ldw	r5,-80(fp)
8110ea5c:	e1bfed17 	ldw	r6,-76(fp)
8110ea60:	e1ffee17 	ldw	r7,-72(fp)
8110ea64:	110e6a80 	call	8110e6a8 <vSendPusTM64>
}
8110ea68:	0001883a 	nop
8110ea6c:	e037883a 	mov	sp,fp
8110ea70:	dfc00117 	ldw	ra,4(sp)
8110ea74:	df000017 	ldw	fp,0(sp)
8110ea78:	dec00204 	addi	sp,sp,8
8110ea7c:	f800283a 	ret

8110ea80 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110ea80:	defff504 	addi	sp,sp,-44
8110ea84:	de00012e 	bgeu	sp,et,8110ea8c <vLoadDefaultETHConf+0xc>
8110ea88:	003b68fa 	trap	3
8110ea8c:	dfc00a15 	stw	ra,40(sp)
8110ea90:	df000915 	stw	fp,36(sp)
8110ea94:	dc000815 	stw	r16,32(sp)
8110ea98:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110ea9c:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110eaa0:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110eaa4:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110eaa8:	d0a06017 	ldw	r2,-32384(gp)
8110eaac:	10800058 	cmpnei	r2,r2,1
8110eab0:	1001f61e 	bne	r2,zero,8110f28c <vLoadDefaultETHConf+0x80c>
8110eab4:	1111d180 	call	81111d18 <bSDcardIsPresent>
8110eab8:	1001f426 	beq	r2,zero,8110f28c <vLoadDefaultETHConf+0x80c>
8110eabc:	1111d480 	call	81111d48 <bSDcardFAT16Check>
8110eac0:	1001f226 	beq	r2,zero,8110f28c <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110eac4:	01204534 	movhi	r4,33044
8110eac8:	21025504 	addi	r4,r4,2388
8110eacc:	1111e700 	call	81111e70 <siOpenFile>
8110ead0:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110ead4:	e0bffc0f 	ldh	r2,-16(fp)
8110ead8:	1001e816 	blt	r2,zero,8110f27c <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110eadc:	e0bffd04 	addi	r2,fp,-12
8110eae0:	01800204 	movi	r6,8
8110eae4:	01400284 	movi	r5,10
8110eae8:	1009883a 	mov	r4,r2
8110eaec:	1114bc00 	call	81114bc0 <memset>
			p_inteiro = inteiro;
8110eaf0:	e0bffd04 	addi	r2,fp,-12
8110eaf4:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110eaf8:	e0bffc0f 	ldh	r2,-16(fp)
8110eafc:	1009883a 	mov	r4,r2
8110eb00:	1111eec0 	call	81111eec <cGetNextChar>
8110eb04:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110eb08:	e0bff947 	ldb	r2,-27(fp)
8110eb0c:	10800084 	addi	r2,r2,2
8110eb10:	10c015a8 	cmpgeui	r3,r2,86
8110eb14:	1801cf1e 	bne	r3,zero,8110f254 <vLoadDefaultETHConf+0x7d4>
8110eb18:	100690ba 	slli	r3,r2,2
8110eb1c:	00a04474 	movhi	r2,33041
8110eb20:	10bacc04 	addi	r2,r2,-5328
8110eb24:	1885883a 	add	r2,r3,r2
8110eb28:	10800017 	ldw	r2,0(r2)
8110eb2c:	1000683a 	jmp	r2
8110eb30:	8110ecc8 	cmpgei	r4,r16,17331
8110eb34:	8110ecbc 	xorhi	r4,r16,17330
8110eb38:	8110f254 	ori	r4,r16,17353
8110eb3c:	8110f254 	ori	r4,r16,17353
8110eb40:	8110f254 	ori	r4,r16,17353
8110eb44:	8110f254 	ori	r4,r16,17353
8110eb48:	8110f254 	ori	r4,r16,17353
8110eb4c:	8110f254 	ori	r4,r16,17353
8110eb50:	8110f254 	ori	r4,r16,17353
8110eb54:	8110f254 	ori	r4,r16,17353
8110eb58:	8110f254 	ori	r4,r16,17353
8110eb5c:	8110f254 	ori	r4,r16,17353
8110eb60:	8110f26c 	andhi	r4,r16,17353
8110eb64:	8110f254 	ori	r4,r16,17353
8110eb68:	8110f254 	ori	r4,r16,17353
8110eb6c:	8110f26c 	andhi	r4,r16,17353
8110eb70:	8110f254 	ori	r4,r16,17353
8110eb74:	8110f254 	ori	r4,r16,17353
8110eb78:	8110f254 	ori	r4,r16,17353
8110eb7c:	8110f254 	ori	r4,r16,17353
8110eb80:	8110f254 	ori	r4,r16,17353
8110eb84:	8110f254 	ori	r4,r16,17353
8110eb88:	8110f254 	ori	r4,r16,17353
8110eb8c:	8110f254 	ori	r4,r16,17353
8110eb90:	8110f254 	ori	r4,r16,17353
8110eb94:	8110f254 	ori	r4,r16,17353
8110eb98:	8110f254 	ori	r4,r16,17353
8110eb9c:	8110f254 	ori	r4,r16,17353
8110eba0:	8110f254 	ori	r4,r16,17353
8110eba4:	8110f254 	ori	r4,r16,17353
8110eba8:	8110f254 	ori	r4,r16,17353
8110ebac:	8110f254 	ori	r4,r16,17353
8110ebb0:	8110f254 	ori	r4,r16,17353
8110ebb4:	8110f254 	ori	r4,r16,17353
8110ebb8:	8110f26c 	andhi	r4,r16,17353
8110ebbc:	8110f254 	ori	r4,r16,17353
8110ebc0:	8110f254 	ori	r4,r16,17353
8110ebc4:	8110f254 	ori	r4,r16,17353
8110ebc8:	8110f254 	ori	r4,r16,17353
8110ebcc:	8110f254 	ori	r4,r16,17353
8110ebd0:	8110f254 	ori	r4,r16,17353
8110ebd4:	8110ec88 	cmpgei	r4,r16,17330
8110ebd8:	8110f254 	ori	r4,r16,17353
8110ebdc:	8110f254 	ori	r4,r16,17353
8110ebe0:	8110f254 	ori	r4,r16,17353
8110ebe4:	8110f254 	ori	r4,r16,17353
8110ebe8:	8110f254 	ori	r4,r16,17353
8110ebec:	8110f254 	ori	r4,r16,17353
8110ebf0:	8110f254 	ori	r4,r16,17353
8110ebf4:	8110f254 	ori	r4,r16,17353
8110ebf8:	8110f254 	ori	r4,r16,17353
8110ebfc:	8110f254 	ori	r4,r16,17353
8110ec00:	8110f254 	ori	r4,r16,17353
8110ec04:	8110f254 	ori	r4,r16,17353
8110ec08:	8110f254 	ori	r4,r16,17353
8110ec0c:	8110f254 	ori	r4,r16,17353
8110ec10:	8110f254 	ori	r4,r16,17353
8110ec14:	8110f254 	ori	r4,r16,17353
8110ec18:	8110f254 	ori	r4,r16,17353
8110ec1c:	8110f254 	ori	r4,r16,17353
8110ec20:	8110f254 	ori	r4,r16,17353
8110ec24:	8110f254 	ori	r4,r16,17353
8110ec28:	8110f21c 	xori	r4,r16,17352
8110ec2c:	8110f254 	ori	r4,r16,17353
8110ec30:	8110f254 	ori	r4,r16,17353
8110ec34:	8110f254 	ori	r4,r16,17353
8110ec38:	8110f254 	ori	r4,r16,17353
8110ec3c:	8110f254 	ori	r4,r16,17353
8110ec40:	8110f254 	ori	r4,r16,17353
8110ec44:	8110f254 	ori	r4,r16,17353
8110ec48:	8110f01c 	xori	r4,r16,17344
8110ec4c:	8110f254 	ori	r4,r16,17353
8110ec50:	8110f254 	ori	r4,r16,17353
8110ec54:	8110ee7c 	xorhi	r4,r16,17337
8110ec58:	8110f174 	orhi	r4,r16,17349
8110ec5c:	8110edb0 	cmpltui	r4,r16,17334
8110ec60:	8110f254 	ori	r4,r16,17353
8110ec64:	8110f254 	ori	r4,r16,17353
8110ec68:	8110f254 	ori	r4,r16,17353
8110ec6c:	8110ece0 	cmpeqi	r4,r16,17331
8110ec70:	8110f254 	ori	r4,r16,17353
8110ec74:	8110f254 	ori	r4,r16,17353
8110ec78:	8110f0ec 	andhi	r4,r16,17347
8110ec7c:	8110f254 	ori	r4,r16,17353
8110ec80:	8110f254 	ori	r4,r16,17353
8110ec84:	8110ef4c 	andi	r4,r16,17341
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110ec88:	e0bffc0f 	ldh	r2,-16(fp)
8110ec8c:	1009883a 	mov	r4,r2
8110ec90:	1111eec0 	call	81111eec <cGetNextChar>
8110ec94:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110ec98:	00000406 	br	8110ecac <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110ec9c:	e0bffc0f 	ldh	r2,-16(fp)
8110eca0:	1009883a 	mov	r4,r2
8110eca4:	1111eec0 	call	81111eec <cGetNextChar>
8110eca8:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110ecac:	e0bff947 	ldb	r2,-27(fp)
8110ecb0:	108009d8 	cmpnei	r2,r2,39
8110ecb4:	103ff91e 	bne	r2,zero,8110ec9c <__reset+0xfb0eec9c>
							c = cGetNextChar(siFile);
						}
						break;
8110ecb8:	00016d06 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110ecbc:	00800044 	movi	r2,1
8110ecc0:	e0bff815 	stw	r2,-32(fp)
						break;
8110ecc4:	00016a06 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110ecc8:	01204534 	movhi	r4,33044
8110eccc:	21025704 	addi	r4,r4,2396
8110ecd0:	1114d880 	call	81114d88 <printf>
						bEOF = TRUE;
8110ecd4:	00800044 	movi	r2,1
8110ecd8:	e0bff815 	stw	r2,-32(fp)
						break;
8110ecdc:	00016406 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110ece0:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110ece4:	e0bffc0f 	ldh	r2,-16(fp)
8110ece8:	1009883a 	mov	r4,r2
8110ecec:	1111eec0 	call	81111eec <cGetNextChar>
8110ecf0:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110ecf4:	d0e00317 	ldw	r3,-32756(gp)
8110ecf8:	e0bff947 	ldb	r2,-27(fp)
8110ecfc:	10800044 	addi	r2,r2,1
8110ed00:	1885883a 	add	r2,r3,r2
8110ed04:	10800003 	ldbu	r2,0(r2)
8110ed08:	10803fcc 	andi	r2,r2,255
8110ed0c:	1080010c 	andi	r2,r2,4
8110ed10:	10000626 	beq	r2,zero,8110ed2c <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110ed14:	e0bffa17 	ldw	r2,-24(fp)
8110ed18:	e0fff943 	ldbu	r3,-27(fp)
8110ed1c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110ed20:	e0bffa17 	ldw	r2,-24(fp)
8110ed24:	10800044 	addi	r2,r2,1
8110ed28:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110ed2c:	e0bff947 	ldb	r2,-27(fp)
8110ed30:	10800ea0 	cmpeqi	r2,r2,58
8110ed34:	1000031e 	bne	r2,zero,8110ed44 <vLoadDefaultETHConf+0x2c4>
8110ed38:	e0bff947 	ldb	r2,-27(fp)
8110ed3c:	10800ed8 	cmpnei	r2,r2,59
8110ed40:	103fe81e 	bne	r2,zero,8110ece4 <__reset+0xfb0eece4>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110ed44:	e0bffa17 	ldw	r2,-24(fp)
8110ed48:	00c00284 	movi	r3,10
8110ed4c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110ed50:	e0bff903 	ldbu	r2,-28(fp)
8110ed54:	10800168 	cmpgeui	r2,r2,5
8110ed58:	1000021e 	bne	r2,zero,8110ed64 <vLoadDefaultETHConf+0x2e4>
8110ed5c:	e43ff903 	ldbu	r16,-28(fp)
8110ed60:	00000106 	br	8110ed68 <vLoadDefaultETHConf+0x2e8>
8110ed64:	04000144 	movi	r16,5
8110ed68:	e0bffd04 	addi	r2,fp,-12
8110ed6c:	1009883a 	mov	r4,r2
8110ed70:	11138640 	call	81113864 <atoi>
8110ed74:	1007883a 	mov	r3,r2
8110ed78:	00a04574 	movhi	r2,33045
8110ed7c:	108c6404 	addi	r2,r2,12688
8110ed80:	1405883a 	add	r2,r2,r16
8110ed84:	10800404 	addi	r2,r2,16
8110ed88:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110ed8c:	e0bffd04 	addi	r2,fp,-12
8110ed90:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110ed94:	e0bff903 	ldbu	r2,-28(fp)
8110ed98:	10800044 	addi	r2,r2,1
8110ed9c:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110eda0:	e0bff947 	ldb	r2,-27(fp)
8110eda4:	10800ed8 	cmpnei	r2,r2,59
8110eda8:	103fce1e 	bne	r2,zero,8110ece4 <__reset+0xfb0eece4>

						break;
8110edac:	00013006 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110edb0:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110edb4:	e0bffc0f 	ldh	r2,-16(fp)
8110edb8:	1009883a 	mov	r4,r2
8110edbc:	1111eec0 	call	81111eec <cGetNextChar>
8110edc0:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110edc4:	d0e00317 	ldw	r3,-32756(gp)
8110edc8:	e0bff947 	ldb	r2,-27(fp)
8110edcc:	10800044 	addi	r2,r2,1
8110edd0:	1885883a 	add	r2,r3,r2
8110edd4:	10800003 	ldbu	r2,0(r2)
8110edd8:	10803fcc 	andi	r2,r2,255
8110eddc:	1080010c 	andi	r2,r2,4
8110ede0:	10000626 	beq	r2,zero,8110edfc <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110ede4:	e0bffa17 	ldw	r2,-24(fp)
8110ede8:	e0fff943 	ldbu	r3,-27(fp)
8110edec:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110edf0:	e0bffa17 	ldw	r2,-24(fp)
8110edf4:	10800044 	addi	r2,r2,1
8110edf8:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110edfc:	e0bff947 	ldb	r2,-27(fp)
8110ee00:	10800ba0 	cmpeqi	r2,r2,46
8110ee04:	1000031e 	bne	r2,zero,8110ee14 <vLoadDefaultETHConf+0x394>
8110ee08:	e0bff947 	ldb	r2,-27(fp)
8110ee0c:	10800ed8 	cmpnei	r2,r2,59
8110ee10:	103fe81e 	bne	r2,zero,8110edb4 <__reset+0xfb0eedb4>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110ee14:	e0bffa17 	ldw	r2,-24(fp)
8110ee18:	00c00284 	movi	r3,10
8110ee1c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110ee20:	e0bff903 	ldbu	r2,-28(fp)
8110ee24:	108000e8 	cmpgeui	r2,r2,3
8110ee28:	1000021e 	bne	r2,zero,8110ee34 <vLoadDefaultETHConf+0x3b4>
8110ee2c:	e43ff903 	ldbu	r16,-28(fp)
8110ee30:	00000106 	br	8110ee38 <vLoadDefaultETHConf+0x3b8>
8110ee34:	040000c4 	movi	r16,3
8110ee38:	e0bffd04 	addi	r2,fp,-12
8110ee3c:	1009883a 	mov	r4,r2
8110ee40:	11138640 	call	81113864 <atoi>
8110ee44:	1007883a 	mov	r3,r2
8110ee48:	00a04574 	movhi	r2,33045
8110ee4c:	108c6404 	addi	r2,r2,12688
8110ee50:	1405883a 	add	r2,r2,r16
8110ee54:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110ee58:	e0bffd04 	addi	r2,fp,-12
8110ee5c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110ee60:	e0bff903 	ldbu	r2,-28(fp)
8110ee64:	10800044 	addi	r2,r2,1
8110ee68:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110ee6c:	e0bff947 	ldb	r2,-27(fp)
8110ee70:	10800ed8 	cmpnei	r2,r2,59
8110ee74:	103fcf1e 	bne	r2,zero,8110edb4 <__reset+0xfb0eedb4>

						break;
8110ee78:	0000fd06 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110ee7c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110ee80:	e0bffc0f 	ldh	r2,-16(fp)
8110ee84:	1009883a 	mov	r4,r2
8110ee88:	1111eec0 	call	81111eec <cGetNextChar>
8110ee8c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110ee90:	d0e00317 	ldw	r3,-32756(gp)
8110ee94:	e0bff947 	ldb	r2,-27(fp)
8110ee98:	10800044 	addi	r2,r2,1
8110ee9c:	1885883a 	add	r2,r3,r2
8110eea0:	10800003 	ldbu	r2,0(r2)
8110eea4:	10803fcc 	andi	r2,r2,255
8110eea8:	1080010c 	andi	r2,r2,4
8110eeac:	10000626 	beq	r2,zero,8110eec8 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110eeb0:	e0bffa17 	ldw	r2,-24(fp)
8110eeb4:	e0fff943 	ldbu	r3,-27(fp)
8110eeb8:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110eebc:	e0bffa17 	ldw	r2,-24(fp)
8110eec0:	10800044 	addi	r2,r2,1
8110eec4:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110eec8:	e0bff947 	ldb	r2,-27(fp)
8110eecc:	10800ba0 	cmpeqi	r2,r2,46
8110eed0:	1000031e 	bne	r2,zero,8110eee0 <vLoadDefaultETHConf+0x460>
8110eed4:	e0bff947 	ldb	r2,-27(fp)
8110eed8:	10800ed8 	cmpnei	r2,r2,59
8110eedc:	103fe81e 	bne	r2,zero,8110ee80 <__reset+0xfb0eee80>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110eee0:	e0bffa17 	ldw	r2,-24(fp)
8110eee4:	00c00284 	movi	r3,10
8110eee8:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110eeec:	e0bff903 	ldbu	r2,-28(fp)
8110eef0:	108000e8 	cmpgeui	r2,r2,3
8110eef4:	1000021e 	bne	r2,zero,8110ef00 <vLoadDefaultETHConf+0x480>
8110eef8:	e43ff903 	ldbu	r16,-28(fp)
8110eefc:	00000106 	br	8110ef04 <vLoadDefaultETHConf+0x484>
8110ef00:	040000c4 	movi	r16,3
8110ef04:	e0bffd04 	addi	r2,fp,-12
8110ef08:	1009883a 	mov	r4,r2
8110ef0c:	11138640 	call	81113864 <atoi>
8110ef10:	1007883a 	mov	r3,r2
8110ef14:	00a04574 	movhi	r2,33045
8110ef18:	108c6404 	addi	r2,r2,12688
8110ef1c:	1405883a 	add	r2,r2,r16
8110ef20:	10800104 	addi	r2,r2,4
8110ef24:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110ef28:	e0bffd04 	addi	r2,fp,-12
8110ef2c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110ef30:	e0bff903 	ldbu	r2,-28(fp)
8110ef34:	10800044 	addi	r2,r2,1
8110ef38:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110ef3c:	e0bff947 	ldb	r2,-27(fp)
8110ef40:	10800ed8 	cmpnei	r2,r2,59
8110ef44:	103fce1e 	bne	r2,zero,8110ee80 <__reset+0xfb0eee80>

						break;
8110ef48:	0000c906 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110ef4c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110ef50:	e0bffc0f 	ldh	r2,-16(fp)
8110ef54:	1009883a 	mov	r4,r2
8110ef58:	1111eec0 	call	81111eec <cGetNextChar>
8110ef5c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110ef60:	d0e00317 	ldw	r3,-32756(gp)
8110ef64:	e0bff947 	ldb	r2,-27(fp)
8110ef68:	10800044 	addi	r2,r2,1
8110ef6c:	1885883a 	add	r2,r3,r2
8110ef70:	10800003 	ldbu	r2,0(r2)
8110ef74:	10803fcc 	andi	r2,r2,255
8110ef78:	1080010c 	andi	r2,r2,4
8110ef7c:	10000626 	beq	r2,zero,8110ef98 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110ef80:	e0bffa17 	ldw	r2,-24(fp)
8110ef84:	e0fff943 	ldbu	r3,-27(fp)
8110ef88:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110ef8c:	e0bffa17 	ldw	r2,-24(fp)
8110ef90:	10800044 	addi	r2,r2,1
8110ef94:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110ef98:	e0bff947 	ldb	r2,-27(fp)
8110ef9c:	10800ba0 	cmpeqi	r2,r2,46
8110efa0:	1000031e 	bne	r2,zero,8110efb0 <vLoadDefaultETHConf+0x530>
8110efa4:	e0bff947 	ldb	r2,-27(fp)
8110efa8:	10800ed8 	cmpnei	r2,r2,59
8110efac:	103fe81e 	bne	r2,zero,8110ef50 <__reset+0xfb0eef50>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110efb0:	e0bffa17 	ldw	r2,-24(fp)
8110efb4:	00c00284 	movi	r3,10
8110efb8:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110efbc:	e0bff903 	ldbu	r2,-28(fp)
8110efc0:	108000e8 	cmpgeui	r2,r2,3
8110efc4:	1000021e 	bne	r2,zero,8110efd0 <vLoadDefaultETHConf+0x550>
8110efc8:	e43ff903 	ldbu	r16,-28(fp)
8110efcc:	00000106 	br	8110efd4 <vLoadDefaultETHConf+0x554>
8110efd0:	040000c4 	movi	r16,3
8110efd4:	e0bffd04 	addi	r2,fp,-12
8110efd8:	1009883a 	mov	r4,r2
8110efdc:	11138640 	call	81113864 <atoi>
8110efe0:	1007883a 	mov	r3,r2
8110efe4:	00a04574 	movhi	r2,33045
8110efe8:	108c6404 	addi	r2,r2,12688
8110efec:	1405883a 	add	r2,r2,r16
8110eff0:	10800204 	addi	r2,r2,8
8110eff4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110eff8:	e0bffd04 	addi	r2,fp,-12
8110effc:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110f000:	e0bff903 	ldbu	r2,-28(fp)
8110f004:	10800044 	addi	r2,r2,1
8110f008:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110f00c:	e0bff947 	ldb	r2,-27(fp)
8110f010:	10800ed8 	cmpnei	r2,r2,59
8110f014:	103fce1e 	bne	r2,zero,8110ef50 <__reset+0xfb0eef50>

						break;
8110f018:	00009506 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110f01c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110f020:	e0bffc0f 	ldh	r2,-16(fp)
8110f024:	1009883a 	mov	r4,r2
8110f028:	1111eec0 	call	81111eec <cGetNextChar>
8110f02c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110f030:	d0e00317 	ldw	r3,-32756(gp)
8110f034:	e0bff947 	ldb	r2,-27(fp)
8110f038:	10800044 	addi	r2,r2,1
8110f03c:	1885883a 	add	r2,r3,r2
8110f040:	10800003 	ldbu	r2,0(r2)
8110f044:	10803fcc 	andi	r2,r2,255
8110f048:	1080010c 	andi	r2,r2,4
8110f04c:	10000626 	beq	r2,zero,8110f068 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110f050:	e0bffa17 	ldw	r2,-24(fp)
8110f054:	e0fff943 	ldbu	r3,-27(fp)
8110f058:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110f05c:	e0bffa17 	ldw	r2,-24(fp)
8110f060:	10800044 	addi	r2,r2,1
8110f064:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110f068:	e0bff947 	ldb	r2,-27(fp)
8110f06c:	10800ba0 	cmpeqi	r2,r2,46
8110f070:	1000031e 	bne	r2,zero,8110f080 <vLoadDefaultETHConf+0x600>
8110f074:	e0bff947 	ldb	r2,-27(fp)
8110f078:	10800ed8 	cmpnei	r2,r2,59
8110f07c:	103fe81e 	bne	r2,zero,8110f020 <__reset+0xfb0ef020>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110f080:	e0bffa17 	ldw	r2,-24(fp)
8110f084:	00c00284 	movi	r3,10
8110f088:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110f08c:	e0bff903 	ldbu	r2,-28(fp)
8110f090:	108000e8 	cmpgeui	r2,r2,3
8110f094:	1000021e 	bne	r2,zero,8110f0a0 <vLoadDefaultETHConf+0x620>
8110f098:	e43ff903 	ldbu	r16,-28(fp)
8110f09c:	00000106 	br	8110f0a4 <vLoadDefaultETHConf+0x624>
8110f0a0:	040000c4 	movi	r16,3
8110f0a4:	e0bffd04 	addi	r2,fp,-12
8110f0a8:	1009883a 	mov	r4,r2
8110f0ac:	11138640 	call	81113864 <atoi>
8110f0b0:	1007883a 	mov	r3,r2
8110f0b4:	00a04574 	movhi	r2,33045
8110f0b8:	108c6404 	addi	r2,r2,12688
8110f0bc:	1405883a 	add	r2,r2,r16
8110f0c0:	10800304 	addi	r2,r2,12
8110f0c4:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110f0c8:	e0bffd04 	addi	r2,fp,-12
8110f0cc:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110f0d0:	e0bff903 	ldbu	r2,-28(fp)
8110f0d4:	10800044 	addi	r2,r2,1
8110f0d8:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110f0dc:	e0bff947 	ldb	r2,-27(fp)
8110f0e0:	10800ed8 	cmpnei	r2,r2,59
8110f0e4:	103fce1e 	bne	r2,zero,8110f020 <__reset+0xfb0ef020>

						break;						
8110f0e8:	00006106 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110f0ec:	e0bffc0f 	ldh	r2,-16(fp)
8110f0f0:	1009883a 	mov	r4,r2
8110f0f4:	1111eec0 	call	81111eec <cGetNextChar>
8110f0f8:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110f0fc:	d0e00317 	ldw	r3,-32756(gp)
8110f100:	e0bff947 	ldb	r2,-27(fp)
8110f104:	10800044 	addi	r2,r2,1
8110f108:	1885883a 	add	r2,r3,r2
8110f10c:	10800003 	ldbu	r2,0(r2)
8110f110:	10803fcc 	andi	r2,r2,255
8110f114:	1080010c 	andi	r2,r2,4
8110f118:	10000626 	beq	r2,zero,8110f134 <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110f11c:	e0bffa17 	ldw	r2,-24(fp)
8110f120:	e0fff943 	ldbu	r3,-27(fp)
8110f124:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110f128:	e0bffa17 	ldw	r2,-24(fp)
8110f12c:	10800044 	addi	r2,r2,1
8110f130:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110f134:	e0bff947 	ldb	r2,-27(fp)
8110f138:	10800ed8 	cmpnei	r2,r2,59
8110f13c:	103feb1e 	bne	r2,zero,8110f0ec <__reset+0xfb0ef0ec>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110f140:	e0bffa17 	ldw	r2,-24(fp)
8110f144:	00c00284 	movi	r3,10
8110f148:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110f14c:	e0bffd04 	addi	r2,fp,-12
8110f150:	1009883a 	mov	r4,r2
8110f154:	11138640 	call	81113864 <atoi>
8110f158:	1007883a 	mov	r3,r2
8110f15c:	00a04574 	movhi	r2,33045
8110f160:	108c6404 	addi	r2,r2,12688
8110f164:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110f168:	e0bffd04 	addi	r2,fp,-12
8110f16c:	e0bffa15 	stw	r2,-24(fp)

						break;
8110f170:	00003f06 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110f174:	e0bffc0f 	ldh	r2,-16(fp)
8110f178:	1009883a 	mov	r4,r2
8110f17c:	1111eec0 	call	81111eec <cGetNextChar>
8110f180:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110f184:	d0e00317 	ldw	r3,-32756(gp)
8110f188:	e0bff947 	ldb	r2,-27(fp)
8110f18c:	10800044 	addi	r2,r2,1
8110f190:	1885883a 	add	r2,r3,r2
8110f194:	10800003 	ldbu	r2,0(r2)
8110f198:	10803fcc 	andi	r2,r2,255
8110f19c:	1080010c 	andi	r2,r2,4
8110f1a0:	10000626 	beq	r2,zero,8110f1bc <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110f1a4:	e0bffa17 	ldw	r2,-24(fp)
8110f1a8:	e0fff943 	ldbu	r3,-27(fp)
8110f1ac:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110f1b0:	e0bffa17 	ldw	r2,-24(fp)
8110f1b4:	10800044 	addi	r2,r2,1
8110f1b8:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110f1bc:	e0bff947 	ldb	r2,-27(fp)
8110f1c0:	10800ed8 	cmpnei	r2,r2,59
8110f1c4:	103feb1e 	bne	r2,zero,8110f174 <__reset+0xfb0ef174>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110f1c8:	e0bffa17 	ldw	r2,-24(fp)
8110f1cc:	00c00284 	movi	r3,10
8110f1d0:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110f1d4:	e0bffd04 	addi	r2,fp,-12
8110f1d8:	1009883a 	mov	r4,r2
8110f1dc:	11138640 	call	81113864 <atoi>
8110f1e0:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110f1e4:	e0bffc8f 	ldh	r2,-14(fp)
8110f1e8:	10800058 	cmpnei	r2,r2,1
8110f1ec:	1000051e 	bne	r2,zero,8110f204 <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110f1f0:	00a04574 	movhi	r2,33045
8110f1f4:	108c6404 	addi	r2,r2,12688
8110f1f8:	00c00044 	movi	r3,1
8110f1fc:	10c00615 	stw	r3,24(r2)
8110f200:	00000306 	br	8110f210 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110f204:	00a04574 	movhi	r2,33045
8110f208:	108c6404 	addi	r2,r2,12688
8110f20c:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110f210:	e0bffd04 	addi	r2,fp,-12
8110f214:	e0bffa15 	stw	r2,-24(fp)

						break;
8110f218:	00001506 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110f21c:	e0bffc0f 	ldh	r2,-16(fp)
8110f220:	1009883a 	mov	r4,r2
8110f224:	1111eac0 	call	81111eac <siCloseFile>
8110f228:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110f22c:	e0bffb17 	ldw	r2,-20(fp)
8110f230:	1000031e 	bne	r2,zero,8110f240 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110f234:	01204534 	movhi	r4,33044
8110f238:	21025c04 	addi	r4,r4,2416
8110f23c:	111502c0 	call	8111502c <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110f240:	00800044 	movi	r2,1
8110f244:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110f248:	00800044 	movi	r2,1
8110f24c:	e0bff715 	stw	r2,-36(fp)
						break;
8110f250:	00000706 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110f254:	e0bff947 	ldb	r2,-27(fp)
8110f258:	100b883a 	mov	r5,r2
8110f25c:	01204534 	movhi	r4,33044
8110f260:	21026404 	addi	r4,r4,2448
8110f264:	1114d880 	call	81114d88 <printf>
						break;
8110f268:	00000106 	br	8110f270 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110f26c:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110f270:	e0bff817 	ldw	r2,-32(fp)
8110f274:	103e2026 	beq	r2,zero,8110eaf8 <__reset+0xfb0eeaf8>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110f278:	00000706 	br	8110f298 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110f27c:	01204534 	movhi	r4,33044
8110f280:	21027104 	addi	r4,r4,2500
8110f284:	111502c0 	call	8111502c <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110f288:	00000306 	br	8110f298 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110f28c:	01204534 	movhi	r4,33044
8110f290:	21027a04 	addi	r4,r4,2536
8110f294:	111502c0 	call	8111502c <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110f298:	e0bff717 	ldw	r2,-36(fp)
8110f29c:	1000541e 	bne	r2,zero,8110f3f0 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110f2a0:	01204534 	movhi	r4,33044
8110f2a4:	21027d04 	addi	r4,r4,2548
8110f2a8:	111502c0 	call	8111502c <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110f2ac:	01604534 	movhi	r5,33044
8110f2b0:	29425504 	addi	r5,r5,2388
8110f2b4:	01204534 	movhi	r4,33044
8110f2b8:	21029104 	addi	r4,r4,2628
8110f2bc:	1114d880 	call	81114d88 <printf>


		xConfEth.siPortPUS = 17000;
8110f2c0:	00a04574 	movhi	r2,33045
8110f2c4:	108c6404 	addi	r2,r2,12688
8110f2c8:	00d09a04 	movi	r3,17000
8110f2cc:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110f2d0:	00a04574 	movhi	r2,33045
8110f2d4:	108c6404 	addi	r2,r2,12688
8110f2d8:	00fff004 	movi	r3,-64
8110f2dc:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110f2e0:	00a04574 	movhi	r2,33045
8110f2e4:	108c6404 	addi	r2,r2,12688
8110f2e8:	00ffea04 	movi	r3,-88
8110f2ec:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110f2f0:	00a04574 	movhi	r2,33045
8110f2f4:	108c6404 	addi	r2,r2,12688
8110f2f8:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110f2fc:	00a04574 	movhi	r2,33045
8110f300:	108c6404 	addi	r2,r2,12688
8110f304:	00c00144 	movi	r3,5
8110f308:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110f30c:	00a04574 	movhi	r2,33045
8110f310:	108c6404 	addi	r2,r2,12688
8110f314:	00fff004 	movi	r3,-64
8110f318:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110f31c:	00a04574 	movhi	r2,33045
8110f320:	108c6404 	addi	r2,r2,12688
8110f324:	00ffea04 	movi	r3,-88
8110f328:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110f32c:	00a04574 	movhi	r2,33045
8110f330:	108c6404 	addi	r2,r2,12688
8110f334:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110f338:	00a04574 	movhi	r2,33045
8110f33c:	108c6404 	addi	r2,r2,12688
8110f340:	00c00044 	movi	r3,1
8110f344:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110f348:	00a04574 	movhi	r2,33045
8110f34c:	108c6404 	addi	r2,r2,12688
8110f350:	00ffffc4 	movi	r3,-1
8110f354:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110f358:	00a04574 	movhi	r2,33045
8110f35c:	108c6404 	addi	r2,r2,12688
8110f360:	00ffffc4 	movi	r3,-1
8110f364:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110f368:	00a04574 	movhi	r2,33045
8110f36c:	108c6404 	addi	r2,r2,12688
8110f370:	00ffffc4 	movi	r3,-1
8110f374:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110f378:	00a04574 	movhi	r2,33045
8110f37c:	108c6404 	addi	r2,r2,12688
8110f380:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110f384:	00a04574 	movhi	r2,33045
8110f388:	108c6404 	addi	r2,r2,12688
8110f38c:	00ffff04 	movi	r3,-4
8110f390:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110f394:	00a04574 	movhi	r2,33045
8110f398:	108c6404 	addi	r2,r2,12688
8110f39c:	00fffdc4 	movi	r3,-9
8110f3a0:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110f3a4:	00a04574 	movhi	r2,33045
8110f3a8:	108c6404 	addi	r2,r2,12688
8110f3ac:	00c018c4 	movi	r3,99
8110f3b0:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110f3b4:	00a04574 	movhi	r2,33045
8110f3b8:	108c6404 	addi	r2,r2,12688
8110f3bc:	00c01344 	movi	r3,77
8110f3c0:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110f3c4:	00a04574 	movhi	r2,33045
8110f3c8:	108c6404 	addi	r2,r2,12688
8110f3cc:	00c007c4 	movi	r3,31
8110f3d0:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110f3d4:	00a04574 	movhi	r2,33045
8110f3d8:	108c6404 	addi	r2,r2,12688
8110f3dc:	00c01084 	movi	r3,66
8110f3e0:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110f3e4:	00a04574 	movhi	r2,33045
8110f3e8:	108c6404 	addi	r2,r2,12688
8110f3ec:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110f3f0:	e0bff717 	ldw	r2,-36(fp)
}
8110f3f4:	e6ffff04 	addi	sp,fp,-4
8110f3f8:	dfc00217 	ldw	ra,8(sp)
8110f3fc:	df000117 	ldw	fp,4(sp)
8110f400:	dc000017 	ldw	r16,0(sp)
8110f404:	dec00304 	addi	sp,sp,12
8110f408:	f800283a 	ret

8110f40c <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110f40c:	defff004 	addi	sp,sp,-64
8110f410:	de00012e 	bgeu	sp,et,8110f418 <vShowEthConfig+0xc>
8110f414:	003b68fa 	trap	3
8110f418:	dfc00f15 	stw	ra,60(sp)
8110f41c:	df000e15 	stw	fp,56(sp)
8110f420:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110f424:	d0a05017 	ldw	r2,-32448(gp)
8110f428:	100f883a 	mov	r7,r2
8110f42c:	018007c4 	movi	r6,31
8110f430:	01400044 	movi	r5,1
8110f434:	01204534 	movhi	r4,33044
8110f438:	21029704 	addi	r4,r4,2652
8110f43c:	111405c0 	call	8111405c <fwrite>

		memset(buffer,0,40);
8110f440:	01800a04 	movi	r6,40
8110f444:	000b883a 	mov	r5,zero
8110f448:	e13ff604 	addi	r4,fp,-40
8110f44c:	1114bc00 	call	81114bc0 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110f450:	00a04574 	movhi	r2,33045
8110f454:	108c6404 	addi	r2,r2,12688
8110f458:	10800403 	ldbu	r2,16(r2)
8110f45c:	11803fcc 	andi	r6,r2,255
8110f460:	00a04574 	movhi	r2,33045
8110f464:	108c6404 	addi	r2,r2,12688
8110f468:	10800443 	ldbu	r2,17(r2)
8110f46c:	11c03fcc 	andi	r7,r2,255
8110f470:	00a04574 	movhi	r2,33045
8110f474:	108c6404 	addi	r2,r2,12688
8110f478:	10800483 	ldbu	r2,18(r2)
8110f47c:	10c03fcc 	andi	r3,r2,255
8110f480:	00a04574 	movhi	r2,33045
8110f484:	108c6404 	addi	r2,r2,12688
8110f488:	108004c3 	ldbu	r2,19(r2)
8110f48c:	11003fcc 	andi	r4,r2,255
8110f490:	00a04574 	movhi	r2,33045
8110f494:	108c6404 	addi	r2,r2,12688
8110f498:	10800503 	ldbu	r2,20(r2)
8110f49c:	11403fcc 	andi	r5,r2,255
8110f4a0:	00a04574 	movhi	r2,33045
8110f4a4:	108c6404 	addi	r2,r2,12688
8110f4a8:	10800543 	ldbu	r2,21(r2)
8110f4ac:	10803fcc 	andi	r2,r2,255
8110f4b0:	d8800315 	stw	r2,12(sp)
8110f4b4:	d9400215 	stw	r5,8(sp)
8110f4b8:	d9000115 	stw	r4,4(sp)
8110f4bc:	d8c00015 	stw	r3,0(sp)
8110f4c0:	01604534 	movhi	r5,33044
8110f4c4:	29429f04 	addi	r5,r5,2684
8110f4c8:	e13ff604 	addi	r4,fp,-40
8110f4cc:	11153700 	call	81115370 <sprintf>
		debug(fp, buffer );
8110f4d0:	d0a05017 	ldw	r2,-32448(gp)
8110f4d4:	e17ff604 	addi	r5,fp,-40
8110f4d8:	1009883a 	mov	r4,r2
8110f4dc:	11139c00 	call	811139c0 <fprintf>

		memset(buffer,0,40);
8110f4e0:	01800a04 	movi	r6,40
8110f4e4:	000b883a 	mov	r5,zero
8110f4e8:	e13ff604 	addi	r4,fp,-40
8110f4ec:	1114bc00 	call	81114bc0 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110f4f0:	00a04574 	movhi	r2,33045
8110f4f4:	108c6404 	addi	r2,r2,12688
8110f4f8:	10800003 	ldbu	r2,0(r2)
8110f4fc:	11003fcc 	andi	r4,r2,255
8110f500:	00a04574 	movhi	r2,33045
8110f504:	108c6404 	addi	r2,r2,12688
8110f508:	10800043 	ldbu	r2,1(r2)
8110f50c:	11403fcc 	andi	r5,r2,255
8110f510:	00a04574 	movhi	r2,33045
8110f514:	108c6404 	addi	r2,r2,12688
8110f518:	10800083 	ldbu	r2,2(r2)
8110f51c:	10c03fcc 	andi	r3,r2,255
8110f520:	00a04574 	movhi	r2,33045
8110f524:	108c6404 	addi	r2,r2,12688
8110f528:	108000c3 	ldbu	r2,3(r2)
8110f52c:	10803fcc 	andi	r2,r2,255
8110f530:	d8800115 	stw	r2,4(sp)
8110f534:	d8c00015 	stw	r3,0(sp)
8110f538:	280f883a 	mov	r7,r5
8110f53c:	200d883a 	mov	r6,r4
8110f540:	01604534 	movhi	r5,33044
8110f544:	2942a804 	addi	r5,r5,2720
8110f548:	e13ff604 	addi	r4,fp,-40
8110f54c:	11153700 	call	81115370 <sprintf>
		debug(fp, buffer );
8110f550:	d0a05017 	ldw	r2,-32448(gp)
8110f554:	e17ff604 	addi	r5,fp,-40
8110f558:	1009883a 	mov	r4,r2
8110f55c:	11139c00 	call	811139c0 <fprintf>

		memset(buffer,0,40);
8110f560:	01800a04 	movi	r6,40
8110f564:	000b883a 	mov	r5,zero
8110f568:	e13ff604 	addi	r4,fp,-40
8110f56c:	1114bc00 	call	81114bc0 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110f570:	00a04574 	movhi	r2,33045
8110f574:	108c6404 	addi	r2,r2,12688
8110f578:	10800103 	ldbu	r2,4(r2)
8110f57c:	11003fcc 	andi	r4,r2,255
8110f580:	00a04574 	movhi	r2,33045
8110f584:	108c6404 	addi	r2,r2,12688
8110f588:	10800143 	ldbu	r2,5(r2)
8110f58c:	11403fcc 	andi	r5,r2,255
8110f590:	00a04574 	movhi	r2,33045
8110f594:	108c6404 	addi	r2,r2,12688
8110f598:	10800183 	ldbu	r2,6(r2)
8110f59c:	10c03fcc 	andi	r3,r2,255
8110f5a0:	00a04574 	movhi	r2,33045
8110f5a4:	108c6404 	addi	r2,r2,12688
8110f5a8:	108001c3 	ldbu	r2,7(r2)
8110f5ac:	10803fcc 	andi	r2,r2,255
8110f5b0:	d8800115 	stw	r2,4(sp)
8110f5b4:	d8c00015 	stw	r3,0(sp)
8110f5b8:	280f883a 	mov	r7,r5
8110f5bc:	200d883a 	mov	r6,r4
8110f5c0:	01604534 	movhi	r5,33044
8110f5c4:	2942ae04 	addi	r5,r5,2744
8110f5c8:	e13ff604 	addi	r4,fp,-40
8110f5cc:	11153700 	call	81115370 <sprintf>
		debug(fp, buffer );
8110f5d0:	d0a05017 	ldw	r2,-32448(gp)
8110f5d4:	e17ff604 	addi	r5,fp,-40
8110f5d8:	1009883a 	mov	r4,r2
8110f5dc:	11139c00 	call	811139c0 <fprintf>

		memset(buffer,0,40);
8110f5e0:	01800a04 	movi	r6,40
8110f5e4:	000b883a 	mov	r5,zero
8110f5e8:	e13ff604 	addi	r4,fp,-40
8110f5ec:	1114bc00 	call	81114bc0 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110f5f0:	00a04574 	movhi	r2,33045
8110f5f4:	108c6404 	addi	r2,r2,12688
8110f5f8:	10800203 	ldbu	r2,8(r2)
8110f5fc:	11003fcc 	andi	r4,r2,255
8110f600:	00a04574 	movhi	r2,33045
8110f604:	108c6404 	addi	r2,r2,12688
8110f608:	10800243 	ldbu	r2,9(r2)
8110f60c:	11403fcc 	andi	r5,r2,255
8110f610:	00a04574 	movhi	r2,33045
8110f614:	108c6404 	addi	r2,r2,12688
8110f618:	10800283 	ldbu	r2,10(r2)
8110f61c:	10c03fcc 	andi	r3,r2,255
8110f620:	00a04574 	movhi	r2,33045
8110f624:	108c6404 	addi	r2,r2,12688
8110f628:	108002c3 	ldbu	r2,11(r2)
8110f62c:	10803fcc 	andi	r2,r2,255
8110f630:	d8800115 	stw	r2,4(sp)
8110f634:	d8c00015 	stw	r3,0(sp)
8110f638:	280f883a 	mov	r7,r5
8110f63c:	200d883a 	mov	r6,r4
8110f640:	01604534 	movhi	r5,33044
8110f644:	2942b504 	addi	r5,r5,2772
8110f648:	e13ff604 	addi	r4,fp,-40
8110f64c:	11153700 	call	81115370 <sprintf>
		debug(fp, buffer );
8110f650:	d0a05017 	ldw	r2,-32448(gp)
8110f654:	e17ff604 	addi	r5,fp,-40
8110f658:	1009883a 	mov	r4,r2
8110f65c:	11139c00 	call	811139c0 <fprintf>

		memset(buffer,0,40);
8110f660:	01800a04 	movi	r6,40
8110f664:	000b883a 	mov	r5,zero
8110f668:	e13ff604 	addi	r4,fp,-40
8110f66c:	1114bc00 	call	81114bc0 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110f670:	00a04574 	movhi	r2,33045
8110f674:	108c6404 	addi	r2,r2,12688
8110f678:	10800303 	ldbu	r2,12(r2)
8110f67c:	11003fcc 	andi	r4,r2,255
8110f680:	00a04574 	movhi	r2,33045
8110f684:	108c6404 	addi	r2,r2,12688
8110f688:	10800343 	ldbu	r2,13(r2)
8110f68c:	11403fcc 	andi	r5,r2,255
8110f690:	00a04574 	movhi	r2,33045
8110f694:	108c6404 	addi	r2,r2,12688
8110f698:	10800383 	ldbu	r2,14(r2)
8110f69c:	10c03fcc 	andi	r3,r2,255
8110f6a0:	00a04574 	movhi	r2,33045
8110f6a4:	108c6404 	addi	r2,r2,12688
8110f6a8:	108003c3 	ldbu	r2,15(r2)
8110f6ac:	10803fcc 	andi	r2,r2,255
8110f6b0:	d8800115 	stw	r2,4(sp)
8110f6b4:	d8c00015 	stw	r3,0(sp)
8110f6b8:	280f883a 	mov	r7,r5
8110f6bc:	200d883a 	mov	r6,r4
8110f6c0:	01604534 	movhi	r5,33044
8110f6c4:	2942bc04 	addi	r5,r5,2800
8110f6c8:	e13ff604 	addi	r4,fp,-40
8110f6cc:	11153700 	call	81115370 <sprintf>
		debug(fp, buffer );
8110f6d0:	d0a05017 	ldw	r2,-32448(gp)
8110f6d4:	e17ff604 	addi	r5,fp,-40
8110f6d8:	1009883a 	mov	r4,r2
8110f6dc:	11139c00 	call	811139c0 <fprintf>

		memset(buffer,0,40);
8110f6e0:	01800a04 	movi	r6,40
8110f6e4:	000b883a 	mov	r5,zero
8110f6e8:	e13ff604 	addi	r4,fp,-40
8110f6ec:	1114bc00 	call	81114bc0 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110f6f0:	00a04574 	movhi	r2,33045
8110f6f4:	108c6404 	addi	r2,r2,12688
8110f6f8:	1080058b 	ldhu	r2,22(r2)
8110f6fc:	10bfffcc 	andi	r2,r2,65535
8110f700:	100d883a 	mov	r6,r2
8110f704:	01604534 	movhi	r5,33044
8110f708:	2942c304 	addi	r5,r5,2828
8110f70c:	e13ff604 	addi	r4,fp,-40
8110f710:	11153700 	call	81115370 <sprintf>
		debug(fp, buffer );
8110f714:	d0a05017 	ldw	r2,-32448(gp)
8110f718:	e17ff604 	addi	r5,fp,-40
8110f71c:	1009883a 	mov	r4,r2
8110f720:	11139c00 	call	811139c0 <fprintf>

	}
8110f724:	0001883a 	nop
8110f728:	e037883a 	mov	sp,fp
8110f72c:	dfc00117 	ldw	ra,4(sp)
8110f730:	df000017 	ldw	fp,0(sp)
8110f734:	dec00204 	addi	sp,sp,8
8110f738:	f800283a 	ret

8110f73c <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110f73c:	defffb04 	addi	sp,sp,-20
8110f740:	de00012e 	bgeu	sp,et,8110f748 <ucCrc8+0xc>
8110f744:	003b68fa 	trap	3
8110f748:	df000415 	stw	fp,16(sp)
8110f74c:	df000404 	addi	fp,sp,16
8110f750:	e13ffd15 	stw	r4,-12(fp)
8110f754:	e17ffe15 	stw	r5,-8(fp)
8110f758:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110f75c:	e0bffe17 	ldw	r2,-8(fp)
8110f760:	1000021e 	bne	r2,zero,8110f76c <ucCrc8+0x30>
        return 0;
8110f764:	0005883a 	mov	r2,zero
8110f768:	00001906 	br	8110f7d0 <ucCrc8+0x94>
    crc &= 0xff;
8110f76c:	e0bffd17 	ldw	r2,-12(fp)
8110f770:	10803fcc 	andi	r2,r2,255
8110f774:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110f778:	e0fffe17 	ldw	r3,-8(fp)
8110f77c:	e0bfff17 	ldw	r2,-4(fp)
8110f780:	1885883a 	add	r2,r3,r2
8110f784:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110f788:	00000d06 	br	8110f7c0 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110f78c:	e0bffe17 	ldw	r2,-8(fp)
8110f790:	10c00044 	addi	r3,r2,1
8110f794:	e0fffe15 	stw	r3,-8(fp)
8110f798:	10800003 	ldbu	r2,0(r2)
8110f79c:	10c03fcc 	andi	r3,r2,255
8110f7a0:	e0bffd17 	ldw	r2,-12(fp)
8110f7a4:	1886f03a 	xor	r3,r3,r2
8110f7a8:	00a04534 	movhi	r2,33044
8110f7ac:	1082c6c4 	addi	r2,r2,2843
8110f7b0:	10c5883a 	add	r2,r2,r3
8110f7b4:	10800003 	ldbu	r2,0(r2)
8110f7b8:	10803fcc 	andi	r2,r2,255
8110f7bc:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110f7c0:	e0fffe17 	ldw	r3,-8(fp)
8110f7c4:	e0bffc17 	ldw	r2,-16(fp)
8110f7c8:	18bff036 	bltu	r3,r2,8110f78c <__reset+0xfb0ef78c>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110f7cc:	e0bffd17 	ldw	r2,-12(fp)
}
8110f7d0:	e037883a 	mov	sp,fp
8110f7d4:	df000017 	ldw	fp,0(sp)
8110f7d8:	dec00104 	addi	sp,sp,4
8110f7dc:	f800283a 	ret

8110f7e0 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110f7e0:	defffb04 	addi	sp,sp,-20
8110f7e4:	de00012e 	bgeu	sp,et,8110f7ec <ucCrc8wInit+0xc>
8110f7e8:	003b68fa 	trap	3
8110f7ec:	dfc00415 	stw	ra,16(sp)
8110f7f0:	df000315 	stw	fp,12(sp)
8110f7f4:	df000304 	addi	fp,sp,12
8110f7f8:	e13ffe15 	stw	r4,-8(fp)
8110f7fc:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;

	crc = ucCrc8(0, NULL, 0);
8110f800:	000d883a 	mov	r6,zero
8110f804:	000b883a 	mov	r5,zero
8110f808:	0009883a 	mov	r4,zero
8110f80c:	110f73c0 	call	8110f73c <ucCrc8>
8110f810:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110f814:	e0bffd03 	ldbu	r2,-12(fp)
8110f818:	e1bfff17 	ldw	r6,-4(fp)
8110f81c:	e17ffe17 	ldw	r5,-8(fp)
8110f820:	1009883a 	mov	r4,r2
8110f824:	110f73c0 	call	8110f73c <ucCrc8>
}
8110f828:	e037883a 	mov	sp,fp
8110f82c:	dfc00117 	ldw	ra,4(sp)
8110f830:	df000017 	ldw	fp,0(sp)
8110f834:	dec00204 	addi	sp,sp,8
8110f838:	f800283a 	ret

8110f83c <vDataControllerInit>:


#include "data_controller.h"


void vDataControllerInit( TNData_Control *xDataControlL, TNFee_Control *xNfeeCOntrolL ) {
8110f83c:	defffc04 	addi	sp,sp,-16
8110f840:	de00012e 	bgeu	sp,et,8110f848 <vDataControllerInit+0xc>
8110f844:	003b68fa 	trap	3
8110f848:	df000315 	stw	fp,12(sp)
8110f84c:	df000304 	addi	fp,sp,12
8110f850:	e13ffe15 	stw	r4,-8(fp)
8110f854:	e17fff15 	stw	r5,-4(fp)
	unsigned char ucIL;

	for ( ucIL = 0 ; ucIL < N_OF_NFEE; ucIL++ ) {
8110f858:	e03ffd05 	stb	zero,-12(fp)
8110f85c:	00001c06 	br	8110f8d0 <vDataControllerInit+0x94>
		xDataControlL->xReadOnlyFeeControl.xNfee[ucIL] = &xNfeeCOntrolL->xNfee[ucIL];
8110f860:	e0bffd03 	ldbu	r2,-12(fp)
8110f864:	e0fffd03 	ldbu	r3,-12(fp)
8110f868:	18c02b24 	muli	r3,r3,172
8110f86c:	e13fff17 	ldw	r4,-4(fp)
8110f870:	20c7883a 	add	r3,r4,r3
8110f874:	e13ffe17 	ldw	r4,-8(fp)
8110f878:	10800244 	addi	r2,r2,9
8110f87c:	1085883a 	add	r2,r2,r2
8110f880:	1085883a 	add	r2,r2,r2
8110f884:	2085883a 	add	r2,r4,r2
8110f888:	10c00015 	stw	r3,0(r2)
		xDataControlL->xReadOnlyFeeControl.pbEnabledNFEEs[ucIL] = xNfeeCOntrolL->pbEnabledNFEEs[ucIL];
8110f88c:	e17ffd03 	ldbu	r5,-12(fp)
8110f890:	e0bffd03 	ldbu	r2,-12(fp)
8110f894:	e0ffff17 	ldw	r3,-4(fp)
8110f898:	10804084 	addi	r2,r2,258
8110f89c:	1085883a 	add	r2,r2,r2
8110f8a0:	1085883a 	add	r2,r2,r2
8110f8a4:	1885883a 	add	r2,r3,r2
8110f8a8:	10c00017 	ldw	r3,0(r2)
8110f8ac:	e13ffe17 	ldw	r4,-8(fp)
8110f8b0:	288003c4 	addi	r2,r5,15
8110f8b4:	1085883a 	add	r2,r2,r2
8110f8b8:	1085883a 	add	r2,r2,r2
8110f8bc:	2085883a 	add	r2,r4,r2
8110f8c0:	10c00015 	stw	r3,0(r2)


void vDataControllerInit( TNData_Control *xDataControlL, TNFee_Control *xNfeeCOntrolL ) {
	unsigned char ucIL;

	for ( ucIL = 0 ; ucIL < N_OF_NFEE; ucIL++ ) {
8110f8c4:	e0bffd03 	ldbu	r2,-12(fp)
8110f8c8:	10800044 	addi	r2,r2,1
8110f8cc:	e0bffd05 	stb	r2,-12(fp)
8110f8d0:	e0bffd03 	ldbu	r2,-12(fp)
8110f8d4:	108001b0 	cmpltui	r2,r2,6
8110f8d8:	103fe11e 	bne	r2,zero,8110f860 <__reset+0xfb0ef860>
		xDataControlL->xReadOnlyFeeControl.xNfee[ucIL] = &xNfeeCOntrolL->xNfee[ucIL];
		xDataControlL->xReadOnlyFeeControl.pbEnabledNFEEs[ucIL] = xNfeeCOntrolL->pbEnabledNFEEs[ucIL];
	}
	
	xDataControlL->xReadOnlyFeeControl.ucTimeCode = &xNfeeCOntrolL->ucTimeCode;
8110f8dc:	e0bfff17 	ldw	r2,-4(fp)
8110f8e0:	10c10804 	addi	r3,r2,1056
8110f8e4:	e0bffe17 	ldw	r2,-8(fp)
8110f8e8:	10c01515 	stw	r3,84(r2)
	xDataControlL->bUpdateComplete = FALSE;
8110f8ec:	e0bffe17 	ldw	r2,-8(fp)
8110f8f0:	10001615 	stw	zero,88(r2)


	/* The only inverse attribution */
	/* This variable indicates when the DataControl finishs to use the RAM, then FeeControl can start fill the buffer to the next MasterSync */
	xNfeeCOntrolL->pbUpdateCReadOnly = &xDataControlL->bUpdateComplete;
8110f8f4:	e0bffe17 	ldw	r2,-8(fp)
8110f8f8:	10c01604 	addi	r3,r2,88
8110f8fc:	e0bfff17 	ldw	r2,-4(fp)
8110f900:	10c10915 	stw	r3,1060(r2)
}
8110f904:	0001883a 	nop
8110f908:	e037883a 	mov	sp,fp
8110f90c:	df000017 	ldw	fp,0(sp)
8110f910:	dec00104 	addi	sp,sp,4
8110f914:	f800283a 	ret

8110f918 <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110f918:	defff904 	addi	sp,sp,-28
8110f91c:	de00012e 	bgeu	sp,et,8110f924 <printErrorTask+0xc>
8110f920:	003b68fa 	trap	3
8110f924:	dfc00615 	stw	ra,24(sp)
8110f928:	df000515 	stw	fp,20(sp)
8110f92c:	df000504 	addi	fp,sp,20
8110f930:	2005883a 	mov	r2,r4
8110f934:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110f938:	e03ffb15 	stw	zero,-20(fp)
8110f93c:	e03ffc15 	stw	zero,-16(fp)
8110f940:	e03ffd15 	stw	zero,-12(fp)
8110f944:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110f948:	e0bfff03 	ldbu	r2,-4(fp)
8110f94c:	100d883a 	mov	r6,r2
8110f950:	01604534 	movhi	r5,33044
8110f954:	29430704 	addi	r5,r5,3100
8110f958:	e13ffb04 	addi	r4,fp,-20
8110f95c:	11153700 	call	81115370 <sprintf>
		debug(fp, buffer);
8110f960:	d0a05017 	ldw	r2,-32448(gp)
8110f964:	e17ffb04 	addi	r5,fp,-20
8110f968:	1009883a 	mov	r4,r2
8110f96c:	11139c00 	call	811139c0 <fprintf>
	}
8110f970:	0001883a 	nop
8110f974:	e037883a 	mov	sp,fp
8110f978:	dfc00117 	ldw	ra,4(sp)
8110f97c:	df000017 	ldw	fp,0(sp)
8110f980:	dec00204 	addi	sp,sp,8
8110f984:	f800283a 	ret

8110f988 <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110f988:	defffd04 	addi	sp,sp,-12
8110f98c:	de00012e 	bgeu	sp,et,8110f994 <vFailCreateMutexSResources+0xc>
8110f990:	003b68fa 	trap	3
8110f994:	dfc00215 	stw	ra,8(sp)
8110f998:	df000115 	stw	fp,4(sp)
8110f99c:	df000104 	addi	fp,sp,4
8110f9a0:	2005883a 	mov	r2,r4
8110f9a4:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)\n");
8110f9a8:	d0a05017 	ldw	r2,-32448(gp)
8110f9ac:	100f883a 	mov	r7,r2
8110f9b0:	018008c4 	movi	r6,35
8110f9b4:	01400044 	movi	r5,1
8110f9b8:	01204534 	movhi	r4,33044
8110f9bc:	21030a04 	addi	r4,r4,3112
8110f9c0:	111405c0 	call	8111405c <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110f9c4:	e0bfff03 	ldbu	r2,-4(fp)
8110f9c8:	1009883a 	mov	r4,r2
8110f9cc:	110f9180 	call	8110f918 <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f9d0:	0001883a 	nop
8110f9d4:	e037883a 	mov	sp,fp
8110f9d8:	dfc00117 	ldw	ra,4(sp)
8110f9dc:	df000017 	ldw	fp,0(sp)
8110f9e0:	dec00204 	addi	sp,sp,8
8110f9e4:	f800283a 	ret

8110f9e8 <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110f9e8:	defffe04 	addi	sp,sp,-8
8110f9ec:	de00012e 	bgeu	sp,et,8110f9f4 <vFailCreateSemaphoreResources+0xc>
8110f9f0:	003b68fa 	trap	3
8110f9f4:	dfc00115 	stw	ra,4(sp)
8110f9f8:	df000015 	stw	fp,0(sp)
8110f9fc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)\n");
8110fa00:	d0a05017 	ldw	r2,-32448(gp)
8110fa04:	100f883a 	mov	r7,r2
8110fa08:	01800984 	movi	r6,38
8110fa0c:	01400044 	movi	r5,1
8110fa10:	01204534 	movhi	r4,33044
8110fa14:	21031304 	addi	r4,r4,3148
8110fa18:	111405c0 	call	8111405c <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fa1c:	0001883a 	nop
8110fa20:	e037883a 	mov	sp,fp
8110fa24:	dfc00117 	ldw	ra,4(sp)
8110fa28:	df000017 	ldw	fp,0(sp)
8110fa2c:	dec00204 	addi	sp,sp,8
8110fa30:	f800283a 	ret

8110fa34 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110fa34:	defffe04 	addi	sp,sp,-8
8110fa38:	de00012e 	bgeu	sp,et,8110fa40 <vFailTestCriticasParts+0xc>
8110fa3c:	003b68fa 	trap	3
8110fa40:	dfc00115 	stw	ra,4(sp)
8110fa44:	df000015 	stw	fp,0(sp)
8110fa48:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)\n");
8110fa4c:	d0a05017 	ldw	r2,-32448(gp)
8110fa50:	100f883a 	mov	r7,r2
8110fa54:	018007c4 	movi	r6,31
8110fa58:	01400044 	movi	r5,1
8110fa5c:	01204534 	movhi	r4,33044
8110fa60:	21031d04 	addi	r4,r4,3188
8110fa64:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fa68:	0001883a 	nop
8110fa6c:	e037883a 	mov	sp,fp
8110fa70:	dfc00117 	ldw	ra,4(sp)
8110fa74:	df000017 	ldw	fp,0(sp)
8110fa78:	dec00204 	addi	sp,sp,8
8110fa7c:	f800283a 	ret

8110fa80 <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110fa80:	defffe04 	addi	sp,sp,-8
8110fa84:	de00012e 	bgeu	sp,et,8110fa8c <vFailSendxSemCommInit+0xc>
8110fa88:	003b68fa 	trap	3
8110fa8c:	dfc00115 	stw	ra,4(sp)
8110fa90:	df000015 	stw	fp,0(sp)
8110fa94:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110fa98:	d0a05017 	ldw	r2,-32448(gp)
8110fa9c:	100f883a 	mov	r7,r2
8110faa0:	01800744 	movi	r6,29
8110faa4:	01400044 	movi	r5,1
8110faa8:	01204534 	movhi	r4,33044
8110faac:	21032504 	addi	r4,r4,3220
8110fab0:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)\n");
8110fab4:	d0a05017 	ldw	r2,-32448(gp)
8110fab8:	100f883a 	mov	r7,r2
8110fabc:	01800a44 	movi	r6,41
8110fac0:	01400044 	movi	r5,1
8110fac4:	01204534 	movhi	r4,33044
8110fac8:	21032d04 	addi	r4,r4,3252
8110facc:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fad0:	0001883a 	nop
8110fad4:	e037883a 	mov	sp,fp
8110fad8:	dfc00117 	ldw	ra,4(sp)
8110fadc:	df000017 	ldw	fp,0(sp)
8110fae0:	dec00204 	addi	sp,sp,8
8110fae4:	f800283a 	ret

8110fae8 <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110fae8:	defffe04 	addi	sp,sp,-8
8110faec:	de00012e 	bgeu	sp,et,8110faf4 <vFailSendPreParsedSemaphore+0xc>
8110faf0:	003b68fa 	trap	3
8110faf4:	dfc00115 	stw	ra,4(sp)
8110faf8:	df000015 	stw	fp,0(sp)
8110fafc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)\n");
8110fb00:	d0a05017 	ldw	r2,-32448(gp)
8110fb04:	100f883a 	mov	r7,r2
8110fb08:	01800904 	movi	r6,36
8110fb0c:	01400044 	movi	r5,1
8110fb10:	01204534 	movhi	r4,33044
8110fb14:	21033804 	addi	r4,r4,3296
8110fb18:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fb1c:	0001883a 	nop
8110fb20:	e037883a 	mov	sp,fp
8110fb24:	dfc00117 	ldw	ra,4(sp)
8110fb28:	df000017 	ldw	fp,0(sp)
8110fb2c:	dec00204 	addi	sp,sp,8
8110fb30:	f800283a 	ret

8110fb34 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110fb34:	defffe04 	addi	sp,sp,-8
8110fb38:	de00012e 	bgeu	sp,et,8110fb40 <vFailSendPreAckReceiverSemaphore+0xc>
8110fb3c:	003b68fa 	trap	3
8110fb40:	dfc00115 	stw	ra,4(sp)
8110fb44:	df000015 	stw	fp,0(sp)
8110fb48:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)\n");
8110fb4c:	d0a05017 	ldw	r2,-32448(gp)
8110fb50:	100f883a 	mov	r7,r2
8110fb54:	01800a44 	movi	r6,41
8110fb58:	01400044 	movi	r5,1
8110fb5c:	01204534 	movhi	r4,33044
8110fb60:	21034204 	addi	r4,r4,3336
8110fb64:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fb68:	0001883a 	nop
8110fb6c:	e037883a 	mov	sp,fp
8110fb70:	dfc00117 	ldw	ra,4(sp)
8110fb74:	df000017 	ldw	fp,0(sp)
8110fb78:	dec00204 	addi	sp,sp,8
8110fb7c:	f800283a 	ret

8110fb80 <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110fb80:	defffe04 	addi	sp,sp,-8
8110fb84:	de00012e 	bgeu	sp,et,8110fb8c <vFailSendPreAckSenderSemaphore+0xc>
8110fb88:	003b68fa 	trap	3
8110fb8c:	dfc00115 	stw	ra,4(sp)
8110fb90:	df000015 	stw	fp,0(sp)
8110fb94:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)\n");
8110fb98:	d0a05017 	ldw	r2,-32448(gp)
8110fb9c:	100f883a 	mov	r7,r2
8110fba0:	018009c4 	movi	r6,39
8110fba4:	01400044 	movi	r5,1
8110fba8:	01204534 	movhi	r4,33044
8110fbac:	21034d04 	addi	r4,r4,3380
8110fbb0:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fbb4:	0001883a 	nop
8110fbb8:	e037883a 	mov	sp,fp
8110fbbc:	dfc00117 	ldw	ra,4(sp)
8110fbc0:	df000017 	ldw	fp,0(sp)
8110fbc4:	dec00204 	addi	sp,sp,8
8110fbc8:	f800283a 	ret

8110fbcc <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110fbcc:	defffe04 	addi	sp,sp,-8
8110fbd0:	de00012e 	bgeu	sp,et,8110fbd8 <vFailGetCountSemaphoreSenderTask+0xc>
8110fbd4:	003b68fa 	trap	3
8110fbd8:	dfc00115 	stw	ra,4(sp)
8110fbdc:	df000015 	stw	fp,0(sp)
8110fbe0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)\n");
8110fbe4:	d0a05017 	ldw	r2,-32448(gp)
8110fbe8:	100f883a 	mov	r7,r2
8110fbec:	01800a44 	movi	r6,41
8110fbf0:	01400044 	movi	r5,1
8110fbf4:	01204534 	movhi	r4,33044
8110fbf8:	21035704 	addi	r4,r4,3420
8110fbfc:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110fc00:	d0a05017 	ldw	r2,-32448(gp)
8110fc04:	100f883a 	mov	r7,r2
8110fc08:	01801104 	movi	r6,68
8110fc0c:	01400044 	movi	r5,1
8110fc10:	01204534 	movhi	r4,33044
8110fc14:	21036204 	addi	r4,r4,3464
8110fc18:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fc1c:	0001883a 	nop
8110fc20:	e037883a 	mov	sp,fp
8110fc24:	dfc00117 	ldw	ra,4(sp)
8110fc28:	df000017 	ldw	fp,0(sp)
8110fc2c:	dec00204 	addi	sp,sp,8
8110fc30:	f800283a 	ret

8110fc34 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110fc34:	defffe04 	addi	sp,sp,-8
8110fc38:	de00012e 	bgeu	sp,et,8110fc40 <vFailGetMutexSenderTask+0xc>
8110fc3c:	003b68fa 	trap	3
8110fc40:	dfc00115 	stw	ra,4(sp)
8110fc44:	df000015 	stw	fp,0(sp)
8110fc48:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)\n");
8110fc4c:	d0a05017 	ldw	r2,-32448(gp)
8110fc50:	100f883a 	mov	r7,r2
8110fc54:	01800804 	movi	r6,32
8110fc58:	01400044 	movi	r5,1
8110fc5c:	01204534 	movhi	r4,33044
8110fc60:	21037404 	addi	r4,r4,3536
8110fc64:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110fc68:	d0a05017 	ldw	r2,-32448(gp)
8110fc6c:	100f883a 	mov	r7,r2
8110fc70:	01801084 	movi	r6,66
8110fc74:	01400044 	movi	r5,1
8110fc78:	01204534 	movhi	r4,33044
8110fc7c:	21037d04 	addi	r4,r4,3572
8110fc80:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fc84:	0001883a 	nop
8110fc88:	e037883a 	mov	sp,fp
8110fc8c:	dfc00117 	ldw	ra,4(sp)
8110fc90:	df000017 	ldw	fp,0(sp)
8110fc94:	dec00204 	addi	sp,sp,8
8110fc98:	f800283a 	ret

8110fc9c <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110fc9c:	defffe04 	addi	sp,sp,-8
8110fca0:	de00012e 	bgeu	sp,et,8110fca8 <vFailGetCountSemaphoreReceiverTask+0xc>
8110fca4:	003b68fa 	trap	3
8110fca8:	dfc00115 	stw	ra,4(sp)
8110fcac:	df000015 	stw	fp,0(sp)
8110fcb0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)\n");
8110fcb4:	d0a05017 	ldw	r2,-32448(gp)
8110fcb8:	100f883a 	mov	r7,r2
8110fcbc:	01800ac4 	movi	r6,43
8110fcc0:	01400044 	movi	r5,1
8110fcc4:	01204534 	movhi	r4,33044
8110fcc8:	21038e04 	addi	r4,r4,3640
8110fccc:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110fcd0:	d0a05017 	ldw	r2,-32448(gp)
8110fcd4:	100f883a 	mov	r7,r2
8110fcd8:	01801184 	movi	r6,70
8110fcdc:	01400044 	movi	r5,1
8110fce0:	01204534 	movhi	r4,33044
8110fce4:	21039904 	addi	r4,r4,3684
8110fce8:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fcec:	0001883a 	nop
8110fcf0:	e037883a 	mov	sp,fp
8110fcf4:	dfc00117 	ldw	ra,4(sp)
8110fcf8:	df000017 	ldw	fp,0(sp)
8110fcfc:	dec00204 	addi	sp,sp,8
8110fd00:	f800283a 	ret

8110fd04 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110fd04:	defffe04 	addi	sp,sp,-8
8110fd08:	de00012e 	bgeu	sp,et,8110fd10 <vFailGetMutexReceiverTask+0xc>
8110fd0c:	003b68fa 	trap	3
8110fd10:	dfc00115 	stw	ra,4(sp)
8110fd14:	df000015 	stw	fp,0(sp)
8110fd18:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)\n");
8110fd1c:	d0a05017 	ldw	r2,-32448(gp)
8110fd20:	100f883a 	mov	r7,r2
8110fd24:	01800884 	movi	r6,34
8110fd28:	01400044 	movi	r5,1
8110fd2c:	01204534 	movhi	r4,33044
8110fd30:	2103ab04 	addi	r4,r4,3756
8110fd34:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110fd38:	d0a05017 	ldw	r2,-32448(gp)
8110fd3c:	100f883a 	mov	r7,r2
8110fd40:	01801104 	movi	r6,68
8110fd44:	01400044 	movi	r5,1
8110fd48:	01204534 	movhi	r4,33044
8110fd4c:	2103b404 	addi	r4,r4,3792
8110fd50:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fd54:	0001883a 	nop
8110fd58:	e037883a 	mov	sp,fp
8110fd5c:	dfc00117 	ldw	ra,4(sp)
8110fd60:	df000017 	ldw	fp,0(sp)
8110fd64:	dec00204 	addi	sp,sp,8
8110fd68:	f800283a 	ret

8110fd6c <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110fd6c:	defffe04 	addi	sp,sp,-8
8110fd70:	de00012e 	bgeu	sp,et,8110fd78 <vFailGetMutexTxUARTSenderTask+0xc>
8110fd74:	003b68fa 	trap	3
8110fd78:	dfc00115 	stw	ra,4(sp)
8110fd7c:	df000015 	stw	fp,0(sp)
8110fd80:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)\n");
8110fd84:	d0a05017 	ldw	r2,-32448(gp)
8110fd88:	100f883a 	mov	r7,r2
8110fd8c:	01800984 	movi	r6,38
8110fd90:	01400044 	movi	r5,1
8110fd94:	01204534 	movhi	r4,33044
8110fd98:	2103c604 	addi	r4,r4,3864
8110fd9c:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110fda0:	d0a05017 	ldw	r2,-32448(gp)
8110fda4:	100f883a 	mov	r7,r2
8110fda8:	01801044 	movi	r6,65
8110fdac:	01400044 	movi	r5,1
8110fdb0:	01204534 	movhi	r4,33044
8110fdb4:	2103d004 	addi	r4,r4,3904
8110fdb8:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fdbc:	0001883a 	nop
8110fdc0:	e037883a 	mov	sp,fp
8110fdc4:	dfc00117 	ldw	ra,4(sp)
8110fdc8:	df000017 	ldw	fp,0(sp)
8110fdcc:	dec00204 	addi	sp,sp,8
8110fdd0:	f800283a 	ret

8110fdd4 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110fdd4:	defffe04 	addi	sp,sp,-8
8110fdd8:	de00012e 	bgeu	sp,et,8110fde0 <vFailGetMacRTC+0xc>
8110fddc:	003b68fa 	trap	3
8110fde0:	dfc00115 	stw	ra,4(sp)
8110fde4:	df000015 	stw	fp,0(sp)
8110fde8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC\n");
8110fdec:	d0a05017 	ldw	r2,-32448(gp)
8110fdf0:	100f883a 	mov	r7,r2
8110fdf4:	018003c4 	movi	r6,15
8110fdf8:	01400044 	movi	r5,1
8110fdfc:	01204534 	movhi	r4,33044
8110fe00:	2103e104 	addi	r4,r4,3972
8110fe04:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fe08:	0001883a 	nop
8110fe0c:	e037883a 	mov	sp,fp
8110fe10:	dfc00117 	ldw	ra,4(sp)
8110fe14:	df000017 	ldw	fp,0(sp)
8110fe18:	dec00204 	addi	sp,sp,8
8110fe1c:	f800283a 	ret

8110fe20 <vFailInitialization>:


void vFailInitialization( void )
{
8110fe20:	defffe04 	addi	sp,sp,-8
8110fe24:	de00012e 	bgeu	sp,et,8110fe2c <vFailInitialization+0xc>
8110fe28:	003b68fa 	trap	3
8110fe2c:	dfc00115 	stw	ra,4(sp)
8110fe30:	df000015 	stw	fp,0(sp)
8110fe34:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization\n");
8110fe38:	d0a05017 	ldw	r2,-32448(gp)
8110fe3c:	100f883a 	mov	r7,r2
8110fe40:	01800504 	movi	r6,20
8110fe44:	01400044 	movi	r5,1
8110fe48:	01204534 	movhi	r4,33044
8110fe4c:	2103e504 	addi	r4,r4,3988
8110fe50:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fe54:	0001883a 	nop
8110fe58:	e037883a 	mov	sp,fp
8110fe5c:	dfc00117 	ldw	ra,4(sp)
8110fe60:	df000017 	ldw	fp,0(sp)
8110fe64:	dec00204 	addi	sp,sp,8
8110fe68:	f800283a 	ret

8110fe6c <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110fe6c:	defffe04 	addi	sp,sp,-8
8110fe70:	de00012e 	bgeu	sp,et,8110fe78 <vFailReceiverCreate+0xc>
8110fe74:	003b68fa 	trap	3
8110fe78:	dfc00115 	stw	ra,4(sp)
8110fe7c:	df000015 	stw	fp,0(sp)
8110fe80:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask\n");
8110fe84:	d0a05017 	ldw	r2,-32448(gp)
8110fe88:	100f883a 	mov	r7,r2
8110fe8c:	01800484 	movi	r6,18
8110fe90:	01400044 	movi	r5,1
8110fe94:	01204534 	movhi	r4,33044
8110fe98:	2103eb04 	addi	r4,r4,4012
8110fe9c:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110fea0:	0001883a 	nop
8110fea4:	e037883a 	mov	sp,fp
8110fea8:	dfc00117 	ldw	ra,4(sp)
8110feac:	df000017 	ldw	fp,0(sp)
8110feb0:	dec00204 	addi	sp,sp,8
8110feb4:	f800283a 	ret

8110feb8 <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110feb8:	defffe04 	addi	sp,sp,-8
8110febc:	de00012e 	bgeu	sp,et,8110fec4 <vFailSenderCreate+0xc>
8110fec0:	003b68fa 	trap	3
8110fec4:	dfc00115 	stw	ra,4(sp)
8110fec8:	df000015 	stw	fp,0(sp)
8110fecc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate\n");
8110fed0:	d0a05017 	ldw	r2,-32448(gp)
8110fed4:	100f883a 	mov	r7,r2
8110fed8:	01800484 	movi	r6,18
8110fedc:	01400044 	movi	r5,1
8110fee0:	01204534 	movhi	r4,33044
8110fee4:	2103f004 	addi	r4,r4,4032
8110fee8:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110feec:	0001883a 	nop
8110fef0:	e037883a 	mov	sp,fp
8110fef4:	dfc00117 	ldw	ra,4(sp)
8110fef8:	df000017 	ldw	fp,0(sp)
8110fefc:	dec00204 	addi	sp,sp,8
8110ff00:	f800283a 	ret

8110ff04 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110ff04:	defffe04 	addi	sp,sp,-8
8110ff08:	de00012e 	bgeu	sp,et,8110ff10 <vFailDeleteInitialization+0xc>
8110ff0c:	003b68fa 	trap	3
8110ff10:	dfc00115 	stw	ra,4(sp)
8110ff14:	df000015 	stw	fp,0(sp)
8110ff18:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization\n");
8110ff1c:	d0a05017 	ldw	r2,-32448(gp)
8110ff20:	100f883a 	mov	r7,r2
8110ff24:	01800684 	movi	r6,26
8110ff28:	01400044 	movi	r5,1
8110ff2c:	01204534 	movhi	r4,33044
8110ff30:	2103f504 	addi	r4,r4,4052
8110ff34:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ff38:	0001883a 	nop
8110ff3c:	e037883a 	mov	sp,fp
8110ff40:	dfc00117 	ldw	ra,4(sp)
8110ff44:	df000017 	ldw	fp,0(sp)
8110ff48:	dec00204 	addi	sp,sp,8
8110ff4c:	f800283a 	ret

8110ff50 <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110ff50:	defffe04 	addi	sp,sp,-8
8110ff54:	de00012e 	bgeu	sp,et,8110ff5c <vFailSetCountSemaphorexBuffer32+0xc>
8110ff58:	003b68fa 	trap	3
8110ff5c:	dfc00115 	stw	ra,4(sp)
8110ff60:	df000015 	stw	fp,0(sp)
8110ff64:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)\n");
8110ff68:	d0a05017 	ldw	r2,-32448(gp)
8110ff6c:	100f883a 	mov	r7,r2
8110ff70:	01800a04 	movi	r6,40
8110ff74:	01400044 	movi	r5,1
8110ff78:	01204534 	movhi	r4,33044
8110ff7c:	2103fc04 	addi	r4,r4,4080
8110ff80:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110ff84:	d0a05017 	ldw	r2,-32448(gp)
8110ff88:	100f883a 	mov	r7,r2
8110ff8c:	018008c4 	movi	r6,35
8110ff90:	01400044 	movi	r5,1
8110ff94:	01204534 	movhi	r4,33044
8110ff98:	21040704 	addi	r4,r4,4124
8110ff9c:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ffa0:	0001883a 	nop
8110ffa4:	e037883a 	mov	sp,fp
8110ffa8:	dfc00117 	ldw	ra,4(sp)
8110ffac:	df000017 	ldw	fp,0(sp)
8110ffb0:	dec00204 	addi	sp,sp,8
8110ffb4:	f800283a 	ret

8110ffb8 <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110ffb8:	defffe04 	addi	sp,sp,-8
8110ffbc:	de00012e 	bgeu	sp,et,8110ffc4 <vFailSetCountSemaphorexBuffer64+0xc>
8110ffc0:	003b68fa 	trap	3
8110ffc4:	dfc00115 	stw	ra,4(sp)
8110ffc8:	df000015 	stw	fp,0(sp)
8110ffcc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)\n");
8110ffd0:	d0a05017 	ldw	r2,-32448(gp)
8110ffd4:	100f883a 	mov	r7,r2
8110ffd8:	01800a04 	movi	r6,40
8110ffdc:	01400044 	movi	r5,1
8110ffe0:	01204534 	movhi	r4,33044
8110ffe4:	21041004 	addi	r4,r4,4160
8110ffe8:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110ffec:	d0a05017 	ldw	r2,-32448(gp)
8110fff0:	100f883a 	mov	r7,r2
8110fff4:	018008c4 	movi	r6,35
8110fff8:	01400044 	movi	r5,1
8110fffc:	01204534 	movhi	r4,33044
81110000:	21040704 	addi	r4,r4,4124
81110004:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110008:	0001883a 	nop
8111000c:	e037883a 	mov	sp,fp
81110010:	dfc00117 	ldw	ra,4(sp)
81110014:	df000017 	ldw	fp,0(sp)
81110018:	dec00204 	addi	sp,sp,8
8111001c:	f800283a 	ret

81110020 <vFailSetCountSemaphorexBuffer128>:

/*CRITICAL*/
void vFailSetCountSemaphorexBuffer128( void )
{
81110020:	defffe04 	addi	sp,sp,-8
81110024:	de00012e 	bgeu	sp,et,8111002c <vFailSetCountSemaphorexBuffer128+0xc>
81110028:	003b68fa 	trap	3
8111002c:	dfc00115 	stw	ra,4(sp)
81110030:	df000015 	stw	fp,0(sp)
81110034:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)\n");
81110038:	d0a05017 	ldw	r2,-32448(gp)
8111003c:	100f883a 	mov	r7,r2
81110040:	01800a44 	movi	r6,41
81110044:	01400044 	movi	r5,1
81110048:	01204534 	movhi	r4,33044
8111004c:	21041b04 	addi	r4,r4,4204
81110050:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
81110054:	d0a05017 	ldw	r2,-32448(gp)
81110058:	100f883a 	mov	r7,r2
8111005c:	018008c4 	movi	r6,35
81110060:	01400044 	movi	r5,1
81110064:	01204534 	movhi	r4,33044
81110068:	21040704 	addi	r4,r4,4124
8111006c:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110070:	0001883a 	nop
81110074:	e037883a 	mov	sp,fp
81110078:	dfc00117 	ldw	ra,4(sp)
8111007c:	df000017 	ldw	fp,0(sp)
81110080:	dec00204 	addi	sp,sp,8
81110084:	f800283a 	ret

81110088 <vFailGetCountSemaphorexBuffer128>:

void vFailGetCountSemaphorexBuffer128( void )
{
81110088:	defffe04 	addi	sp,sp,-8
8111008c:	de00012e 	bgeu	sp,et,81110094 <vFailGetCountSemaphorexBuffer128+0xc>
81110090:	003b68fa 	trap	3
81110094:	dfc00115 	stw	ra,4(sp)
81110098:	df000015 	stw	fp,0(sp)
8111009c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer128. (exit)\n");
811100a0:	d0a05017 	ldw	r2,-32448(gp)
811100a4:	100f883a 	mov	r7,r2
811100a8:	01800a44 	movi	r6,41
811100ac:	01400044 	movi	r5,1
811100b0:	01204534 	movhi	r4,33044
811100b4:	21042604 	addi	r4,r4,4248
811100b8:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
811100bc:	d0a05017 	ldw	r2,-32448(gp)
811100c0:	100f883a 	mov	r7,r2
811100c4:	01800884 	movi	r6,34
811100c8:	01400044 	movi	r5,1
811100cc:	01204534 	movhi	r4,33044
811100d0:	21043104 	addi	r4,r4,4292
811100d4:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811100d8:	0001883a 	nop
811100dc:	e037883a 	mov	sp,fp
811100e0:	dfc00117 	ldw	ra,4(sp)
811100e4:	df000017 	ldw	fp,0(sp)
811100e8:	dec00204 	addi	sp,sp,8
811100ec:	f800283a 	ret

811100f0 <vFailGetCountSemaphorexBuffer64>:

void vFailGetCountSemaphorexBuffer64( void )
{
811100f0:	defffe04 	addi	sp,sp,-8
811100f4:	de00012e 	bgeu	sp,et,811100fc <vFailGetCountSemaphorexBuffer64+0xc>
811100f8:	003b68fa 	trap	3
811100fc:	dfc00115 	stw	ra,4(sp)
81110100:	df000015 	stw	fp,0(sp)
81110104:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer64. (exit)\n");
81110108:	d0a05017 	ldw	r2,-32448(gp)
8111010c:	100f883a 	mov	r7,r2
81110110:	01800a04 	movi	r6,40
81110114:	01400044 	movi	r5,1
81110118:	01204534 	movhi	r4,33044
8111011c:	21043a04 	addi	r4,r4,4328
81110120:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
81110124:	d0a05017 	ldw	r2,-32448(gp)
81110128:	100f883a 	mov	r7,r2
8111012c:	01800884 	movi	r6,34
81110130:	01400044 	movi	r5,1
81110134:	01204534 	movhi	r4,33044
81110138:	21043104 	addi	r4,r4,4292
8111013c:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110140:	0001883a 	nop
81110144:	e037883a 	mov	sp,fp
81110148:	dfc00117 	ldw	ra,4(sp)
8111014c:	df000017 	ldw	fp,0(sp)
81110150:	dec00204 	addi	sp,sp,8
81110154:	f800283a 	ret

81110158 <vFailGetCountSemaphorexBuffer32>:

void vFailGetCountSemaphorexBuffer32( void )
{
81110158:	defffe04 	addi	sp,sp,-8
8111015c:	de00012e 	bgeu	sp,et,81110164 <vFailGetCountSemaphorexBuffer32+0xc>
81110160:	003b68fa 	trap	3
81110164:	dfc00115 	stw	ra,4(sp)
81110168:	df000015 	stw	fp,0(sp)
8111016c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer32. (exit)\n");
81110170:	d0a05017 	ldw	r2,-32448(gp)
81110174:	100f883a 	mov	r7,r2
81110178:	01800a04 	movi	r6,40
8111017c:	01400044 	movi	r5,1
81110180:	01204534 	movhi	r4,33044
81110184:	21044504 	addi	r4,r4,4372
81110188:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8111018c:	d0a05017 	ldw	r2,-32448(gp)
81110190:	100f883a 	mov	r7,r2
81110194:	01800884 	movi	r6,34
81110198:	01400044 	movi	r5,1
8111019c:	01204534 	movhi	r4,33044
811101a0:	21043104 	addi	r4,r4,4292
811101a4:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811101a8:	0001883a 	nop
811101ac:	e037883a 	mov	sp,fp
811101b0:	dfc00117 	ldw	ra,4(sp)
811101b4:	df000017 	ldw	fp,0(sp)
811101b8:	dec00204 	addi	sp,sp,8
811101bc:	f800283a 	ret

811101c0 <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
811101c0:	defffe04 	addi	sp,sp,-8
811101c4:	de00012e 	bgeu	sp,et,811101cc <vFailFoundBufferRetransmission+0xc>
811101c8:	003b68fa 	trap	3
811101cc:	dfc00115 	stw	ra,4(sp)
811101d0:	df000015 	stw	fp,0(sp)
811101d4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"Warning: Incomming Ack id doesn't exists.\n");
811101d8:	d0a05017 	ldw	r2,-32448(gp)
811101dc:	100f883a 	mov	r7,r2
811101e0:	01800a84 	movi	r6,42
811101e4:	01400044 	movi	r5,1
811101e8:	01204534 	movhi	r4,33044
811101ec:	21045004 	addi	r4,r4,4416
811101f0:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(In Ack Handler)\n");
811101f4:	d0a05017 	ldw	r2,-32448(gp)
811101f8:	100f883a 	mov	r7,r2
811101fc:	01801204 	movi	r6,72
81110200:	01400044 	movi	r5,1
81110204:	01204534 	movhi	r4,33044
81110208:	21045b04 	addi	r4,r4,4460
8111020c:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110210:	0001883a 	nop
81110214:	e037883a 	mov	sp,fp
81110218:	dfc00117 	ldw	ra,4(sp)
8111021c:	df000017 	ldw	fp,0(sp)
81110220:	dec00204 	addi	sp,sp,8
81110224:	f800283a 	ret

81110228 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
81110228:	defffe04 	addi	sp,sp,-8
8111022c:	de00012e 	bgeu	sp,et,81110234 <vFailGetCountSemaphorePreParsedBuffer+0xc>
81110230:	003b68fa 	trap	3
81110234:	dfc00115 	stw	ra,4(sp)
81110238:	df000015 	stw	fp,0(sp)
8111023c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)\n");
81110240:	d0a05017 	ldw	r2,-32448(gp)
81110244:	100f883a 	mov	r7,r2
81110248:	01800b84 	movi	r6,46
8111024c:	01400044 	movi	r5,1
81110250:	01204534 	movhi	r4,33044
81110254:	21046e04 	addi	r4,r4,4536
81110258:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8111025c:	d0a05017 	ldw	r2,-32448(gp)
81110260:	100f883a 	mov	r7,r2
81110264:	018010c4 	movi	r6,67
81110268:	01400044 	movi	r5,1
8111026c:	01204534 	movhi	r4,33044
81110270:	21047a04 	addi	r4,r4,4584
81110274:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110278:	0001883a 	nop
8111027c:	e037883a 	mov	sp,fp
81110280:	dfc00117 	ldw	ra,4(sp)
81110284:	df000017 	ldw	fp,0(sp)
81110288:	dec00204 	addi	sp,sp,8
8111028c:	f800283a 	ret

81110290 <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
81110290:	defffe04 	addi	sp,sp,-8
81110294:	de00012e 	bgeu	sp,et,8111029c <vFailGetxMutexPreParsedParserRxTask+0xc>
81110298:	003b68fa 	trap	3
8111029c:	dfc00115 	stw	ra,4(sp)
811102a0:	df000015 	stw	fp,0(sp)
811102a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)\n");
811102a8:	d0a05017 	ldw	r2,-32448(gp)
811102ac:	100f883a 	mov	r7,r2
811102b0:	01800b04 	movi	r6,44
811102b4:	01400044 	movi	r5,1
811102b8:	01204534 	movhi	r4,33044
811102bc:	21048b04 	addi	r4,r4,4652
811102c0:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
811102c4:	d0a05017 	ldw	r2,-32448(gp)
811102c8:	100f883a 	mov	r7,r2
811102cc:	01800fc4 	movi	r6,63
811102d0:	01400044 	movi	r5,1
811102d4:	01204534 	movhi	r4,33044
811102d8:	21049704 	addi	r4,r4,4700
811102dc:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811102e0:	0001883a 	nop
811102e4:	e037883a 	mov	sp,fp
811102e8:	dfc00117 	ldw	ra,4(sp)
811102ec:	df000017 	ldw	fp,0(sp)
811102f0:	dec00204 	addi	sp,sp,8
811102f4:	f800283a 	ret

811102f8 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
811102f8:	defffe04 	addi	sp,sp,-8
811102fc:	de00012e 	bgeu	sp,et,81110304 <vNoContentInPreParsedBuffer+0xc>
81110300:	003b68fa 	trap	3
81110304:	dfc00115 	stw	ra,4(sp)
81110308:	df000015 	stw	fp,0(sp)
8111030c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)\n");
81110310:	d0a05017 	ldw	r2,-32448(gp)
81110314:	100f883a 	mov	r7,r2
81110318:	01800904 	movi	r6,36
8111031c:	01400044 	movi	r5,1
81110320:	01204534 	movhi	r4,33044
81110324:	2104a704 	addi	r4,r4,4764
81110328:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8111032c:	d0a05017 	ldw	r2,-32448(gp)
81110330:	100f883a 	mov	r7,r2
81110334:	01801684 	movi	r6,90
81110338:	01400044 	movi	r5,1
8111033c:	01204534 	movhi	r4,33044
81110340:	2104b104 	addi	r4,r4,4804
81110344:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110348:	0001883a 	nop
8111034c:	e037883a 	mov	sp,fp
81110350:	dfc00117 	ldw	ra,4(sp)
81110354:	df000017 	ldw	fp,0(sp)
81110358:	dec00204 	addi	sp,sp,8
8111035c:	f800283a 	ret

81110360 <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
81110360:	defffe04 	addi	sp,sp,-8
81110364:	de00012e 	bgeu	sp,et,8111036c <vCouldNotSendEthConfUART+0xc>
81110368:	003b68fa 	trap	3
8111036c:	dfc00115 	stw	ra,4(sp)
81110370:	df000015 	stw	fp,0(sp)
81110374:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)\n");
81110378:	d0a05017 	ldw	r2,-32448(gp)
8111037c:	100f883a 	mov	r7,r2
81110380:	01800844 	movi	r6,33
81110384:	01400044 	movi	r5,1
81110388:	01204534 	movhi	r4,33044
8111038c:	2104c804 	addi	r4,r4,4896
81110390:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
81110394:	d0a05017 	ldw	r2,-32448(gp)
81110398:	100f883a 	mov	r7,r2
8111039c:	01801784 	movi	r6,94
811103a0:	01400044 	movi	r5,1
811103a4:	01204534 	movhi	r4,33044
811103a8:	2104d104 	addi	r4,r4,4932
811103ac:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811103b0:	0001883a 	nop
811103b4:	e037883a 	mov	sp,fp
811103b8:	dfc00117 	ldw	ra,4(sp)
811103bc:	df000017 	ldw	fp,0(sp)
811103c0:	dec00204 	addi	sp,sp,8
811103c4:	f800283a 	ret

811103c8 <vFailSendNack>:

void vFailSendNack( void )
{
811103c8:	defffe04 	addi	sp,sp,-8
811103cc:	de00012e 	bgeu	sp,et,811103d4 <vFailSendNack+0xc>
811103d0:	003b68fa 	trap	3
811103d4:	dfc00115 	stw	ra,4(sp)
811103d8:	df000015 	stw	fp,0(sp)
811103dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)\n");
811103e0:	d0a05017 	ldw	r2,-32448(gp)
811103e4:	100f883a 	mov	r7,r2
811103e8:	01800584 	movi	r6,22
811103ec:	01400044 	movi	r5,1
811103f0:	01204534 	movhi	r4,33044
811103f4:	2104e904 	addi	r4,r4,5028
811103f8:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
811103fc:	d0a05017 	ldw	r2,-32448(gp)
81110400:	100f883a 	mov	r7,r2
81110404:	01800a84 	movi	r6,42
81110408:	01400044 	movi	r5,1
8111040c:	01204534 	movhi	r4,33044
81110410:	2104ef04 	addi	r4,r4,5052
81110414:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110418:	0001883a 	nop
8111041c:	e037883a 	mov	sp,fp
81110420:	dfc00117 	ldw	ra,4(sp)
81110424:	df000017 	ldw	fp,0(sp)
81110428:	dec00204 	addi	sp,sp,8
8111042c:	f800283a 	ret

81110430 <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
81110430:	defffe04 	addi	sp,sp,-8
81110434:	de00012e 	bgeu	sp,et,8111043c <vFailSetPreAckSenderBuffer+0xc>
81110438:	003b68fa 	trap	3
8111043c:	dfc00115 	stw	ra,4(sp)
81110440:	df000015 	stw	fp,0(sp)
81110444:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)\n");
81110448:	d0a05017 	ldw	r2,-32448(gp)
8111044c:	100f883a 	mov	r7,r2
81110450:	018008c4 	movi	r6,35
81110454:	01400044 	movi	r5,1
81110458:	01204534 	movhi	r4,33044
8111045c:	2104fa04 	addi	r4,r4,5096
81110460:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
81110464:	d0a05017 	ldw	r2,-32448(gp)
81110468:	100f883a 	mov	r7,r2
8111046c:	01801584 	movi	r6,86
81110470:	01400044 	movi	r5,1
81110474:	01204534 	movhi	r4,33044
81110478:	21050304 	addi	r4,r4,5132
8111047c:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110480:	0001883a 	nop
81110484:	e037883a 	mov	sp,fp
81110488:	dfc00117 	ldw	ra,4(sp)
8111048c:	df000017 	ldw	fp,0(sp)
81110490:	dec00204 	addi	sp,sp,8
81110494:	f800283a 	ret

81110498 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
81110498:	defffe04 	addi	sp,sp,-8
8111049c:	de00012e 	bgeu	sp,et,811104a4 <vFailSetPreParsedBuffer+0xc>
811104a0:	003b68fa 	trap	3
811104a4:	dfc00115 	stw	ra,4(sp)
811104a8:	df000015 	stw	fp,0(sp)
811104ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)\n");
811104b0:	d0a05017 	ldw	r2,-32448(gp)
811104b4:	100f883a 	mov	r7,r2
811104b8:	01800804 	movi	r6,32
811104bc:	01400044 	movi	r5,1
811104c0:	01204534 	movhi	r4,33044
811104c4:	21051904 	addi	r4,r4,5220
811104c8:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
811104cc:	d0a05017 	ldw	r2,-32448(gp)
811104d0:	100f883a 	mov	r7,r2
811104d4:	018013c4 	movi	r6,79
811104d8:	01400044 	movi	r5,1
811104dc:	01204534 	movhi	r4,33044
811104e0:	21052204 	addi	r4,r4,5256
811104e4:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811104e8:	0001883a 	nop
811104ec:	e037883a 	mov	sp,fp
811104f0:	dfc00117 	ldw	ra,4(sp)
811104f4:	df000017 	ldw	fp,0(sp)
811104f8:	dec00204 	addi	sp,sp,8
811104fc:	f800283a 	ret

81110500 <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
81110500:	defffe04 	addi	sp,sp,-8
81110504:	de00012e 	bgeu	sp,et,8111050c <vFailSetPreAckReceiverBuffer+0xc>
81110508:	003b68fa 	trap	3
8111050c:	dfc00115 	stw	ra,4(sp)
81110510:	df000015 	stw	fp,0(sp)
81110514:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)\n");
81110518:	d0a05017 	ldw	r2,-32448(gp)
8111051c:	100f883a 	mov	r7,r2
81110520:	01800944 	movi	r6,37
81110524:	01400044 	movi	r5,1
81110528:	01204534 	movhi	r4,33044
8111052c:	21053604 	addi	r4,r4,5336
81110530:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
81110534:	d0a05017 	ldw	r2,-32448(gp)
81110538:	100f883a 	mov	r7,r2
8111053c:	018015c4 	movi	r6,87
81110540:	01400044 	movi	r5,1
81110544:	01204534 	movhi	r4,33044
81110548:	21054004 	addi	r4,r4,5376
8111054c:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110550:	0001883a 	nop
81110554:	e037883a 	mov	sp,fp
81110558:	dfc00117 	ldw	ra,4(sp)
8111055c:	df000017 	ldw	fp,0(sp)
81110560:	dec00204 	addi	sp,sp,8
81110564:	f800283a 	ret

81110568 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
81110568:	defffe04 	addi	sp,sp,-8
8111056c:	de00012e 	bgeu	sp,et,81110574 <vFailParserCommTaskCreate+0xc>
81110570:	003b68fa 	trap	3
81110574:	dfc00115 	stw	ra,4(sp)
81110578:	df000015 	stw	fp,0(sp)
8111057c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate\n");
81110580:	d0a05017 	ldw	r2,-32448(gp)
81110584:	100f883a 	mov	r7,r2
81110588:	01800684 	movi	r6,26
8111058c:	01400044 	movi	r5,1
81110590:	01204534 	movhi	r4,33044
81110594:	21055604 	addi	r4,r4,5464
81110598:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8111059c:	0001883a 	nop
811105a0:	e037883a 	mov	sp,fp
811105a4:	dfc00117 	ldw	ra,4(sp)
811105a8:	df000017 	ldw	fp,0(sp)
811105ac:	dec00204 	addi	sp,sp,8
811105b0:	f800283a 	ret

811105b4 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
811105b4:	defffe04 	addi	sp,sp,-8
811105b8:	de00012e 	bgeu	sp,et,811105c0 <vFailInAckHandlerTaskCreate+0xc>
811105bc:	003b68fa 	trap	3
811105c0:	dfc00115 	stw	ra,4(sp)
811105c4:	df000015 	stw	fp,0(sp)
811105c8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
811105cc:	d0a05017 	ldw	r2,-32448(gp)
811105d0:	100f883a 	mov	r7,r2
811105d4:	01800704 	movi	r6,28
811105d8:	01400044 	movi	r5,1
811105dc:	01204534 	movhi	r4,33044
811105e0:	21055d04 	addi	r4,r4,5492
811105e4:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
811105e8:	0001883a 	nop
811105ec:	e037883a 	mov	sp,fp
811105f0:	dfc00117 	ldw	ra,4(sp)
811105f4:	df000017 	ldw	fp,0(sp)
811105f8:	dec00204 	addi	sp,sp,8
811105fc:	f800283a 	ret

81110600 <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
81110600:	defffe04 	addi	sp,sp,-8
81110604:	de00012e 	bgeu	sp,et,8111060c <vFailOutAckHandlerTaskCreate+0xc>
81110608:	003b68fa 	trap	3
8111060c:	dfc00115 	stw	ra,4(sp)
81110610:	df000015 	stw	fp,0(sp)
81110614:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
81110618:	d0a05017 	ldw	r2,-32448(gp)
8111061c:	100f883a 	mov	r7,r2
81110620:	01800704 	movi	r6,28
81110624:	01400044 	movi	r5,1
81110628:	01204534 	movhi	r4,33044
8111062c:	21055d04 	addi	r4,r4,5492
81110630:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
81110634:	0001883a 	nop
81110638:	e037883a 	mov	sp,fp
8111063c:	dfc00117 	ldw	ra,4(sp)
81110640:	df000017 	ldw	fp,0(sp)
81110644:	dec00204 	addi	sp,sp,8
81110648:	f800283a 	ret

8111064c <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8111064c:	defffe04 	addi	sp,sp,-8
81110650:	de00012e 	bgeu	sp,et,81110658 <vFailCreateTimerRetransmisison+0xc>
81110654:	003b68fa 	trap	3
81110658:	dfc00115 	stw	ra,4(sp)
8111065c:	df000015 	stw	fp,0(sp)
81110660:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison\n");
81110664:	d0a05017 	ldw	r2,-32448(gp)
81110668:	100f883a 	mov	r7,r2
8111066c:	018007c4 	movi	r6,31
81110670:	01400044 	movi	r5,1
81110674:	01204534 	movhi	r4,33044
81110678:	21056504 	addi	r4,r4,5524
8111067c:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
81110680:	0001883a 	nop
81110684:	e037883a 	mov	sp,fp
81110688:	dfc00117 	ldw	ra,4(sp)
8111068c:	df000017 	ldw	fp,0(sp)
81110690:	dec00204 	addi	sp,sp,8
81110694:	f800283a 	ret

81110698 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
81110698:	defffe04 	addi	sp,sp,-8
8111069c:	de00012e 	bgeu	sp,et,811106a4 <vCouldNotCheckBufferTimeOutFunction+0xc>
811106a0:	003b68fa 	trap	3
811106a4:	dfc00115 	stw	ra,4(sp)
811106a8:	df000015 	stw	fp,0(sp)
811106ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction\n");
811106b0:	d0a05017 	ldw	r2,-32448(gp)
811106b4:	100f883a 	mov	r7,r2
811106b8:	01800904 	movi	r6,36
811106bc:	01400044 	movi	r5,1
811106c0:	01204534 	movhi	r4,33044
811106c4:	21056d04 	addi	r4,r4,5556
811106c8:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
811106cc:	0001883a 	nop
811106d0:	e037883a 	mov	sp,fp
811106d4:	dfc00117 	ldw	ra,4(sp)
811106d8:	df000017 	ldw	fp,0(sp)
811106dc:	dec00204 	addi	sp,sp,8
811106e0:	f800283a 	ret

811106e4 <vFailTimeoutCheckerTaskCreate>:

/* Critico */
void vFailTimeoutCheckerTaskCreate( void )
{
811106e4:	defffe04 	addi	sp,sp,-8
811106e8:	de00012e 	bgeu	sp,et,811106f0 <vFailTimeoutCheckerTaskCreate+0xc>
811106ec:	003b68fa 	trap	3
811106f0:	dfc00115 	stw	ra,4(sp)
811106f4:	df000015 	stw	fp,0(sp)
811106f8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate (Critico)\n");
811106fc:	d0a05017 	ldw	r2,-32448(gp)
81110700:	100f883a 	mov	r7,r2
81110704:	01800a04 	movi	r6,40
81110708:	01400044 	movi	r5,1
8111070c:	01204534 	movhi	r4,33044
81110710:	21057704 	addi	r4,r4,5596
81110714:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
81110718:	0001883a 	nop
8111071c:	e037883a 	mov	sp,fp
81110720:	dfc00117 	ldw	ra,4(sp)
81110724:	df000017 	ldw	fp,0(sp)
81110728:	dec00204 	addi	sp,sp,8
8111072c:	f800283a 	ret

81110730 <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
81110730:	defffe04 	addi	sp,sp,-8
81110734:	de00012e 	bgeu	sp,et,8111073c <vFailGetBlockingSemTimeoutTask+0xc>
81110738:	003b68fa 	trap	3
8111073c:	dfc00115 	stw	ra,4(sp)
81110740:	df000015 	stw	fp,0(sp)
81110744:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)\n");
81110748:	d0a05017 	ldw	r2,-32448(gp)
8111074c:	100f883a 	mov	r7,r2
81110750:	018009c4 	movi	r6,39
81110754:	01400044 	movi	r5,1
81110758:	01204534 	movhi	r4,33044
8111075c:	21058204 	addi	r4,r4,5640
81110760:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.\n");
81110764:	d0a05017 	ldw	r2,-32448(gp)
81110768:	100f883a 	mov	r7,r2
8111076c:	01800cc4 	movi	r6,51
81110770:	01400044 	movi	r5,1
81110774:	01204534 	movhi	r4,33044
81110778:	21058c04 	addi	r4,r4,5680
8111077c:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110780:	0001883a 	nop
81110784:	e037883a 	mov	sp,fp
81110788:	dfc00117 	ldw	ra,4(sp)
8111078c:	df000017 	ldw	fp,0(sp)
81110790:	dec00204 	addi	sp,sp,8
81110794:	f800283a 	ret

81110798 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
81110798:	defffe04 	addi	sp,sp,-8
8111079c:	de00012e 	bgeu	sp,et,811107a4 <vFailPostBlockingSemTimeoutTask+0xc>
811107a0:	003b68fa 	trap	3
811107a4:	dfc00115 	stw	ra,4(sp)
811107a8:	df000015 	stw	fp,0(sp)
811107ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)\n");
811107b0:	d0a05017 	ldw	r2,-32448(gp)
811107b4:	100f883a 	mov	r7,r2
811107b8:	01800a04 	movi	r6,40
811107bc:	01400044 	movi	r5,1
811107c0:	01204534 	movhi	r4,33044
811107c4:	21059904 	addi	r4,r4,5732
811107c8:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.\n");
811107cc:	d0a05017 	ldw	r2,-32448(gp)
811107d0:	100f883a 	mov	r7,r2
811107d4:	01800c84 	movi	r6,50
811107d8:	01400044 	movi	r5,1
811107dc:	01204534 	movhi	r4,33044
811107e0:	2105a404 	addi	r4,r4,5776
811107e4:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811107e8:	0001883a 	nop
811107ec:	e037883a 	mov	sp,fp
811107f0:	dfc00117 	ldw	ra,4(sp)
811107f4:	df000017 	ldw	fp,0(sp)
811107f8:	dec00204 	addi	sp,sp,8
811107fc:	f800283a 	ret

81110800 <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
81110800:	defffe04 	addi	sp,sp,-8
81110804:	de00012e 	bgeu	sp,et,8111080c <vFailCouldNotRetransmitTimeoutTask+0xc>
81110808:	003b68fa 	trap	3
8111080c:	dfc00115 	stw	ra,4(sp)
81110810:	df000015 	stw	fp,0(sp)
81110814:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)\n");
81110818:	d0a05017 	ldw	r2,-32448(gp)
8111081c:	100f883a 	mov	r7,r2
81110820:	01800ac4 	movi	r6,43
81110824:	01400044 	movi	r5,1
81110828:	01204534 	movhi	r4,33044
8111082c:	2105b104 	addi	r4,r4,5828
81110830:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.\n");
81110834:	d0a05017 	ldw	r2,-32448(gp)
81110838:	100f883a 	mov	r7,r2
8111083c:	01801644 	movi	r6,89
81110840:	01400044 	movi	r5,1
81110844:	01204534 	movhi	r4,33044
81110848:	2105bc04 	addi	r4,r4,5872
8111084c:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110850:	0001883a 	nop
81110854:	e037883a 	mov	sp,fp
81110858:	dfc00117 	ldw	ra,4(sp)
8111085c:	df000017 	ldw	fp,0(sp)
81110860:	dec00204 	addi	sp,sp,8
81110864:	f800283a 	ret

81110868 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
81110868:	defffe04 	addi	sp,sp,-8
8111086c:	de00012e 	bgeu	sp,et,81110874 <vCouldNotRetransmitB32TimeoutTask+0xc>
81110870:	003b68fa 	trap	3
81110874:	dfc00115 	stw	ra,4(sp)
81110878:	df000015 	stw	fp,0(sp)
8111087c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)\n");
81110880:	d0a05017 	ldw	r2,-32448(gp)
81110884:	100f883a 	mov	r7,r2
81110888:	01800a84 	movi	r6,42
8111088c:	01400044 	movi	r5,1
81110890:	01204534 	movhi	r4,33044
81110894:	2105d304 	addi	r4,r4,5964
81110898:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).\n");
8111089c:	d0a05017 	ldw	r2,-32448(gp)
811108a0:	100f883a 	mov	r7,r2
811108a4:	01801444 	movi	r6,81
811108a8:	01400044 	movi	r5,1
811108ac:	01204534 	movhi	r4,33044
811108b0:	2105de04 	addi	r4,r4,6008
811108b4:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811108b8:	0001883a 	nop
811108bc:	e037883a 	mov	sp,fp
811108c0:	dfc00117 	ldw	ra,4(sp)
811108c4:	df000017 	ldw	fp,0(sp)
811108c8:	dec00204 	addi	sp,sp,8
811108cc:	f800283a 	ret

811108d0 <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
811108d0:	defffe04 	addi	sp,sp,-8
811108d4:	de00012e 	bgeu	sp,et,811108dc <vCouldNotRetransmitB64TimeoutTask+0xc>
811108d8:	003b68fa 	trap	3
811108dc:	dfc00115 	stw	ra,4(sp)
811108e0:	df000015 	stw	fp,0(sp)
811108e4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)\n");
811108e8:	d0a05017 	ldw	r2,-32448(gp)
811108ec:	100f883a 	mov	r7,r2
811108f0:	01800a84 	movi	r6,42
811108f4:	01400044 	movi	r5,1
811108f8:	01204534 	movhi	r4,33044
811108fc:	2105f304 	addi	r4,r4,6092
81110900:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).\n");
81110904:	d0a05017 	ldw	r2,-32448(gp)
81110908:	100f883a 	mov	r7,r2
8111090c:	01801444 	movi	r6,81
81110910:	01400044 	movi	r5,1
81110914:	01204534 	movhi	r4,33044
81110918:	2105fe04 	addi	r4,r4,6136
8111091c:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110920:	0001883a 	nop
81110924:	e037883a 	mov	sp,fp
81110928:	dfc00117 	ldw	ra,4(sp)
8111092c:	df000017 	ldw	fp,0(sp)
81110930:	dec00204 	addi	sp,sp,8
81110934:	f800283a 	ret

81110938 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
81110938:	defffe04 	addi	sp,sp,-8
8111093c:	de00012e 	bgeu	sp,et,81110944 <vCouldNotRetransmitB128TimeoutTask+0xc>
81110940:	003b68fa 	trap	3
81110944:	dfc00115 	stw	ra,4(sp)
81110948:	df000015 	stw	fp,0(sp)
8111094c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)\n");
81110950:	d0a05017 	ldw	r2,-32448(gp)
81110954:	100f883a 	mov	r7,r2
81110958:	01800ac4 	movi	r6,43
8111095c:	01400044 	movi	r5,1
81110960:	01204534 	movhi	r4,33044
81110964:	21061304 	addi	r4,r4,6220
81110968:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).\n");
8111096c:	d0a05017 	ldw	r2,-32448(gp)
81110970:	100f883a 	mov	r7,r2
81110974:	01801484 	movi	r6,82
81110978:	01400044 	movi	r5,1
8111097c:	01204534 	movhi	r4,33044
81110980:	21061e04 	addi	r4,r4,6264
81110984:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110988:	0001883a 	nop
8111098c:	e037883a 	mov	sp,fp
81110990:	dfc00117 	ldw	ra,4(sp)
81110994:	df000017 	ldw	fp,0(sp)
81110998:	dec00204 	addi	sp,sp,8
8111099c:	f800283a 	ret

811109a0 <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
811109a0:	defffe04 	addi	sp,sp,-8
811109a4:	de00012e 	bgeu	sp,et,811109ac <vFailStartTimerRetransmission+0xc>
811109a8:	003b68fa 	trap	3
811109ac:	dfc00115 	stw	ra,4(sp)
811109b0:	df000015 	stw	fp,0(sp)
811109b4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)\n");
811109b8:	d0a05017 	ldw	r2,-32448(gp)
811109bc:	100f883a 	mov	r7,r2
811109c0:	01800984 	movi	r6,38
811109c4:	01400044 	movi	r5,1
811109c8:	01204534 	movhi	r4,33044
811109cc:	21063304 	addi	r4,r4,6348
811109d0:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.\n");
811109d4:	d0a05017 	ldw	r2,-32448(gp)
811109d8:	100f883a 	mov	r7,r2
811109dc:	01800d44 	movi	r6,53
811109e0:	01400044 	movi	r5,1
811109e4:	01204534 	movhi	r4,33044
811109e8:	21063d04 	addi	r4,r4,6388
811109ec:	111405c0 	call	8111405c <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
811109f0:	0001883a 	nop
811109f4:	e037883a 	mov	sp,fp
811109f8:	dfc00117 	ldw	ra,4(sp)
811109fc:	df000017 	ldw	fp,0(sp)
81110a00:	dec00204 	addi	sp,sp,8
81110a04:	f800283a 	ret

81110a08 <vCouldNotSendTurnOff>:


void vCouldNotSendTurnOff( void )
{
81110a08:	defffe04 	addi	sp,sp,-8
81110a0c:	de00012e 	bgeu	sp,et,81110a14 <vCouldNotSendTurnOff+0xc>
81110a10:	003b68fa 	trap	3
81110a14:	dfc00115 	stw	ra,4(sp)
81110a18:	df000015 	stw	fp,0(sp)
81110a1c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTurnOff. (exit)\n");
81110a20:	d0a05017 	ldw	r2,-32448(gp)
81110a24:	100f883a 	mov	r7,r2
81110a28:	01800744 	movi	r6,29
81110a2c:	01400044 	movi	r5,1
81110a30:	01204534 	movhi	r4,33044
81110a34:	21064b04 	addi	r4,r4,6444
81110a38:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the turn off command. \n");
81110a3c:	d0a05017 	ldw	r2,-32448(gp)
81110a40:	100f883a 	mov	r7,r2
81110a44:	01800984 	movi	r6,38
81110a48:	01400044 	movi	r5,1
81110a4c:	01204534 	movhi	r4,33044
81110a50:	21065304 	addi	r4,r4,6476
81110a54:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110a58:	0001883a 	nop
81110a5c:	e037883a 	mov	sp,fp
81110a60:	dfc00117 	ldw	ra,4(sp)
81110a64:	df000017 	ldw	fp,0(sp)
81110a68:	dec00204 	addi	sp,sp,8
81110a6c:	f800283a 	ret

81110a70 <vCouldNotSendLog>:


void vCouldNotSendLog( void )
{
81110a70:	defffe04 	addi	sp,sp,-8
81110a74:	de00012e 	bgeu	sp,et,81110a7c <vCouldNotSendLog+0xc>
81110a78:	003b68fa 	trap	3
81110a7c:	dfc00115 	stw	ra,4(sp)
81110a80:	df000015 	stw	fp,0(sp)
81110a84:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendLog. (exit)\n");
81110a88:	d0a05017 	ldw	r2,-32448(gp)
81110a8c:	100f883a 	mov	r7,r2
81110a90:	01800644 	movi	r6,25
81110a94:	01400044 	movi	r5,1
81110a98:	01204534 	movhi	r4,33044
81110a9c:	21065d04 	addi	r4,r4,6516
81110aa0:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send log packet to NUC. \n");
81110aa4:	d0a05017 	ldw	r2,-32448(gp)
81110aa8:	100f883a 	mov	r7,r2
81110aac:	018008c4 	movi	r6,35
81110ab0:	01400044 	movi	r5,1
81110ab4:	01204534 	movhi	r4,33044
81110ab8:	21066404 	addi	r4,r4,6544
81110abc:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110ac0:	0001883a 	nop
81110ac4:	e037883a 	mov	sp,fp
81110ac8:	dfc00117 	ldw	ra,4(sp)
81110acc:	df000017 	ldw	fp,0(sp)
81110ad0:	dec00204 	addi	sp,sp,8
81110ad4:	f800283a 	ret

81110ad8 <vCouldNotSendTMPusCommand>:


void vCouldNotSendTMPusCommand( const char *cData )
{
81110ad8:	defffd04 	addi	sp,sp,-12
81110adc:	de00012e 	bgeu	sp,et,81110ae4 <vCouldNotSendTMPusCommand+0xc>
81110ae0:	003b68fa 	trap	3
81110ae4:	dfc00215 	stw	ra,8(sp)
81110ae8:	df000115 	stw	fp,4(sp)
81110aec:	df000104 	addi	fp,sp,4
81110af0:	e13fff15 	stw	r4,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTMPusCommand. (exit)\n");
81110af4:	d0a05017 	ldw	r2,-32448(gp)
81110af8:	100f883a 	mov	r7,r2
81110afc:	01800884 	movi	r6,34
81110b00:	01400044 	movi	r5,1
81110b04:	01204534 	movhi	r4,33044
81110b08:	21066d04 	addi	r4,r4,6580
81110b0c:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the TM PUS command to NUC. \n");
81110b10:	d0a05017 	ldw	r2,-32448(gp)
81110b14:	100f883a 	mov	r7,r2
81110b18:	01800ac4 	movi	r6,43
81110b1c:	01400044 	movi	r5,1
81110b20:	01204534 	movhi	r4,33044
81110b24:	21067604 	addi	r4,r4,6616
81110b28:	111405c0 	call	8111405c <fwrite>
		debug(fp,"cData");
81110b2c:	d0a05017 	ldw	r2,-32448(gp)
81110b30:	100f883a 	mov	r7,r2
81110b34:	01800144 	movi	r6,5
81110b38:	01400044 	movi	r5,1
81110b3c:	01204534 	movhi	r4,33044
81110b40:	21068104 	addi	r4,r4,6660
81110b44:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110b48:	0001883a 	nop
81110b4c:	e037883a 	mov	sp,fp
81110b50:	dfc00117 	ldw	ra,4(sp)
81110b54:	df000017 	ldw	fp,0(sp)
81110b58:	dec00204 	addi	sp,sp,8
81110b5c:	f800283a 	ret

81110b60 <vWarnCouldNotgetMutexRetrans128>:

/* Not send message is bad but the Simucam will continue to work. */
void vWarnCouldNotgetMutexRetrans128( void )
{
81110b60:	defffe04 	addi	sp,sp,-8
81110b64:	de00012e 	bgeu	sp,et,81110b6c <vWarnCouldNotgetMutexRetrans128+0xc>
81110b68:	003b68fa 	trap	3
81110b6c:	dfc00115 	stw	ra,4(sp)
81110b70:	df000015 	stw	fp,0(sp)
81110b74:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vWarnCouldNotgetMutexRetrans128. (exit)\n");
81110b78:	d0a05017 	ldw	r2,-32448(gp)
81110b7c:	100f883a 	mov	r7,r2
81110b80:	01800a04 	movi	r6,40
81110b84:	01400044 	movi	r5,1
81110b88:	01204534 	movhi	r4,33044
81110b8c:	21068304 	addi	r4,r4,6668
81110b90:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Warning: Could not get the mutex for the retransmission. The message will be lost.\n");
81110b94:	d0a05017 	ldw	r2,-32448(gp)
81110b98:	100f883a 	mov	r7,r2
81110b9c:	018014c4 	movi	r6,83
81110ba0:	01400044 	movi	r5,1
81110ba4:	01204534 	movhi	r4,33044
81110ba8:	21068e04 	addi	r4,r4,6712
81110bac:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110bb0:	0001883a 	nop
81110bb4:	e037883a 	mov	sp,fp
81110bb8:	dfc00117 	ldw	ra,4(sp)
81110bbc:	df000017 	ldw	fp,0(sp)
81110bc0:	dec00204 	addi	sp,sp,8
81110bc4:	f800283a 	ret

81110bc8 <vFailCreateScheduleQueue>:


/* CRITICAL. */
void vFailCreateScheduleQueue( void )
{
81110bc8:	defffe04 	addi	sp,sp,-8
81110bcc:	de00012e 	bgeu	sp,et,81110bd4 <vFailCreateScheduleQueue+0xc>
81110bd0:	003b68fa 	trap	3
81110bd4:	dfc00115 	stw	ra,4(sp)
81110bd8:	df000015 	stw	fp,0(sp)
81110bdc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateScheduleQueue. (exit)\n");
81110be0:	d0a05017 	ldw	r2,-32448(gp)
81110be4:	100f883a 	mov	r7,r2
81110be8:	01800844 	movi	r6,33
81110bec:	01400044 	movi	r5,1
81110bf0:	01204534 	movhi	r4,33044
81110bf4:	2106a304 	addi	r4,r4,6796
81110bf8:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"CRITICAL: Could not create the Queue to shcedule the access to the DMA.\n");
81110bfc:	d0a05017 	ldw	r2,-32448(gp)
81110c00:	100f883a 	mov	r7,r2
81110c04:	01801204 	movi	r6,72
81110c08:	01400044 	movi	r5,1
81110c0c:	01204534 	movhi	r4,33044
81110c10:	2106ac04 	addi	r4,r4,6832
81110c14:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110c18:	0001883a 	nop
81110c1c:	e037883a 	mov	sp,fp
81110c20:	dfc00117 	ldw	ra,4(sp)
81110c24:	df000017 	ldw	fp,0(sp)
81110c28:	dec00204 	addi	sp,sp,8
81110c2c:	f800283a 	ret

81110c30 <vFailCreateNFEEQueue>:

/* CRITICAL. */
void vFailCreateNFEEQueue( unsigned char ucID )
{
81110c30:	defffd04 	addi	sp,sp,-12
81110c34:	de00012e 	bgeu	sp,et,81110c3c <vFailCreateNFEEQueue+0xc>
81110c38:	003b68fa 	trap	3
81110c3c:	dfc00215 	stw	ra,8(sp)
81110c40:	df000115 	stw	fp,4(sp)
81110c44:	df000104 	addi	fp,sp,4
81110c48:	2005883a 	mov	r2,r4
81110c4c:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateNFEEQueue. (exit)\n");
81110c50:	d0a05017 	ldw	r2,-32448(gp)
81110c54:	100f883a 	mov	r7,r2
81110c58:	01800744 	movi	r6,29
81110c5c:	01400044 	movi	r5,1
81110c60:	01204534 	movhi	r4,33044
81110c64:	2106bf04 	addi	r4,r4,6908
81110c68:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		printf(fp,"CRITICAL: Could not create the Queue to the NSEE %hhu.\n",ucID);
81110c6c:	d0a05017 	ldw	r2,-32448(gp)
81110c70:	e0ffff03 	ldbu	r3,-4(fp)
81110c74:	180d883a 	mov	r6,r3
81110c78:	01604534 	movhi	r5,33044
81110c7c:	2946c704 	addi	r5,r5,6940
81110c80:	1009883a 	mov	r4,r2
81110c84:	1114d880 	call	81114d88 <printf>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110c88:	0001883a 	nop
81110c8c:	e037883a 	mov	sp,fp
81110c90:	dfc00117 	ldw	ra,4(sp)
81110c94:	df000017 	ldw	fp,0(sp)
81110c98:	dec00204 	addi	sp,sp,8
81110c9c:	f800283a 	ret

81110ca0 <vCoudlNotCreateNFee0Task>:

void vCoudlNotCreateNFee0Task( void )
{
81110ca0:	defffe04 	addi	sp,sp,-8
81110ca4:	de00012e 	bgeu	sp,et,81110cac <vCoudlNotCreateNFee0Task+0xc>
81110ca8:	003b68fa 	trap	3
81110cac:	dfc00115 	stw	ra,4(sp)
81110cb0:	df000015 	stw	fp,0(sp)
81110cb4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee0Task. (exit)\n");
81110cb8:	d0a05017 	ldw	r2,-32448(gp)
81110cbc:	100f883a 	mov	r7,r2
81110cc0:	01800844 	movi	r6,33
81110cc4:	01400044 	movi	r5,1
81110cc8:	01204534 	movhi	r4,33044
81110ccc:	2106d504 	addi	r4,r4,6996
81110cd0:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 0 Task.\n");
81110cd4:	d0a05017 	ldw	r2,-32448(gp)
81110cd8:	100f883a 	mov	r7,r2
81110cdc:	01800784 	movi	r6,30
81110ce0:	01400044 	movi	r5,1
81110ce4:	01204534 	movhi	r4,33044
81110ce8:	2106de04 	addi	r4,r4,7032
81110cec:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110cf0:	0001883a 	nop
81110cf4:	e037883a 	mov	sp,fp
81110cf8:	dfc00117 	ldw	ra,4(sp)
81110cfc:	df000017 	ldw	fp,0(sp)
81110d00:	dec00204 	addi	sp,sp,8
81110d04:	f800283a 	ret

81110d08 <vCoudlNotCreateNFee1Task>:


void vCoudlNotCreateNFee1Task( void )
{
81110d08:	defffe04 	addi	sp,sp,-8
81110d0c:	de00012e 	bgeu	sp,et,81110d14 <vCoudlNotCreateNFee1Task+0xc>
81110d10:	003b68fa 	trap	3
81110d14:	dfc00115 	stw	ra,4(sp)
81110d18:	df000015 	stw	fp,0(sp)
81110d1c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee1Task. (exit)\n");
81110d20:	d0a05017 	ldw	r2,-32448(gp)
81110d24:	100f883a 	mov	r7,r2
81110d28:	01800844 	movi	r6,33
81110d2c:	01400044 	movi	r5,1
81110d30:	01204534 	movhi	r4,33044
81110d34:	2106e604 	addi	r4,r4,7064
81110d38:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 1 Task.\n");
81110d3c:	d0a05017 	ldw	r2,-32448(gp)
81110d40:	100f883a 	mov	r7,r2
81110d44:	01800784 	movi	r6,30
81110d48:	01400044 	movi	r5,1
81110d4c:	01204534 	movhi	r4,33044
81110d50:	2106ef04 	addi	r4,r4,7100
81110d54:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110d58:	0001883a 	nop
81110d5c:	e037883a 	mov	sp,fp
81110d60:	dfc00117 	ldw	ra,4(sp)
81110d64:	df000017 	ldw	fp,0(sp)
81110d68:	dec00204 	addi	sp,sp,8
81110d6c:	f800283a 	ret

81110d70 <vCoudlNotCreateNFee2Task>:

void vCoudlNotCreateNFee2Task( void )
{
81110d70:	defffe04 	addi	sp,sp,-8
81110d74:	de00012e 	bgeu	sp,et,81110d7c <vCoudlNotCreateNFee2Task+0xc>
81110d78:	003b68fa 	trap	3
81110d7c:	dfc00115 	stw	ra,4(sp)
81110d80:	df000015 	stw	fp,0(sp)
81110d84:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee2Task. (exit)\n");
81110d88:	d0a05017 	ldw	r2,-32448(gp)
81110d8c:	100f883a 	mov	r7,r2
81110d90:	01800844 	movi	r6,33
81110d94:	01400044 	movi	r5,1
81110d98:	01204534 	movhi	r4,33044
81110d9c:	2106f704 	addi	r4,r4,7132
81110da0:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 2 Task.\n");
81110da4:	d0a05017 	ldw	r2,-32448(gp)
81110da8:	100f883a 	mov	r7,r2
81110dac:	01800784 	movi	r6,30
81110db0:	01400044 	movi	r5,1
81110db4:	01204534 	movhi	r4,33044
81110db8:	21070004 	addi	r4,r4,7168
81110dbc:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110dc0:	0001883a 	nop
81110dc4:	e037883a 	mov	sp,fp
81110dc8:	dfc00117 	ldw	ra,4(sp)
81110dcc:	df000017 	ldw	fp,0(sp)
81110dd0:	dec00204 	addi	sp,sp,8
81110dd4:	f800283a 	ret

81110dd8 <vCoudlNotCreateNFee3Task>:

void vCoudlNotCreateNFee3Task( void )
{
81110dd8:	defffe04 	addi	sp,sp,-8
81110ddc:	de00012e 	bgeu	sp,et,81110de4 <vCoudlNotCreateNFee3Task+0xc>
81110de0:	003b68fa 	trap	3
81110de4:	dfc00115 	stw	ra,4(sp)
81110de8:	df000015 	stw	fp,0(sp)
81110dec:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee3Task. (exit)\n");
81110df0:	d0a05017 	ldw	r2,-32448(gp)
81110df4:	100f883a 	mov	r7,r2
81110df8:	01800844 	movi	r6,33
81110dfc:	01400044 	movi	r5,1
81110e00:	01204534 	movhi	r4,33044
81110e04:	21070804 	addi	r4,r4,7200
81110e08:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 3 Task.\n");
81110e0c:	d0a05017 	ldw	r2,-32448(gp)
81110e10:	100f883a 	mov	r7,r2
81110e14:	01800784 	movi	r6,30
81110e18:	01400044 	movi	r5,1
81110e1c:	01204534 	movhi	r4,33044
81110e20:	21071104 	addi	r4,r4,7236
81110e24:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110e28:	0001883a 	nop
81110e2c:	e037883a 	mov	sp,fp
81110e30:	dfc00117 	ldw	ra,4(sp)
81110e34:	df000017 	ldw	fp,0(sp)
81110e38:	dec00204 	addi	sp,sp,8
81110e3c:	f800283a 	ret

81110e40 <vCoudlNotCreateNFee4Task>:

void vCoudlNotCreateNFee4Task( void )
{
81110e40:	defffe04 	addi	sp,sp,-8
81110e44:	de00012e 	bgeu	sp,et,81110e4c <vCoudlNotCreateNFee4Task+0xc>
81110e48:	003b68fa 	trap	3
81110e4c:	dfc00115 	stw	ra,4(sp)
81110e50:	df000015 	stw	fp,0(sp)
81110e54:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee4Task. (exit)\n");
81110e58:	d0a05017 	ldw	r2,-32448(gp)
81110e5c:	100f883a 	mov	r7,r2
81110e60:	01800844 	movi	r6,33
81110e64:	01400044 	movi	r5,1
81110e68:	01204534 	movhi	r4,33044
81110e6c:	21071904 	addi	r4,r4,7268
81110e70:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 4 Task.\n");
81110e74:	d0a05017 	ldw	r2,-32448(gp)
81110e78:	100f883a 	mov	r7,r2
81110e7c:	01800784 	movi	r6,30
81110e80:	01400044 	movi	r5,1
81110e84:	01204534 	movhi	r4,33044
81110e88:	21072204 	addi	r4,r4,7304
81110e8c:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110e90:	0001883a 	nop
81110e94:	e037883a 	mov	sp,fp
81110e98:	dfc00117 	ldw	ra,4(sp)
81110e9c:	df000017 	ldw	fp,0(sp)
81110ea0:	dec00204 	addi	sp,sp,8
81110ea4:	f800283a 	ret

81110ea8 <vCoudlNotCreateNFee5Task>:

void vCoudlNotCreateNFee5Task( void )
{
81110ea8:	defffe04 	addi	sp,sp,-8
81110eac:	de00012e 	bgeu	sp,et,81110eb4 <vCoudlNotCreateNFee5Task+0xc>
81110eb0:	003b68fa 	trap	3
81110eb4:	dfc00115 	stw	ra,4(sp)
81110eb8:	df000015 	stw	fp,0(sp)
81110ebc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFee5Task. (exit)\n");
81110ec0:	d0a05017 	ldw	r2,-32448(gp)
81110ec4:	100f883a 	mov	r7,r2
81110ec8:	01800844 	movi	r6,33
81110ecc:	01400044 	movi	r5,1
81110ed0:	01204534 	movhi	r4,33044
81110ed4:	21072a04 	addi	r4,r4,7336
81110ed8:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE 5 Task.\n");
81110edc:	d0a05017 	ldw	r2,-32448(gp)
81110ee0:	100f883a 	mov	r7,r2
81110ee4:	01800784 	movi	r6,30
81110ee8:	01400044 	movi	r5,1
81110eec:	01204534 	movhi	r4,33044
81110ef0:	21073304 	addi	r4,r4,7372
81110ef4:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110ef8:	0001883a 	nop
81110efc:	e037883a 	mov	sp,fp
81110f00:	dfc00117 	ldw	ra,4(sp)
81110f04:	df000017 	ldw	fp,0(sp)
81110f08:	dec00204 	addi	sp,sp,8
81110f0c:	f800283a 	ret

81110f10 <vCoudlNotCreateNFeeControllerTask>:


void vCoudlNotCreateNFeeControllerTask( void )
{
81110f10:	defffe04 	addi	sp,sp,-8
81110f14:	de00012e 	bgeu	sp,et,81110f1c <vCoudlNotCreateNFeeControllerTask+0xc>
81110f18:	003b68fa 	trap	3
81110f1c:	dfc00115 	stw	ra,4(sp)
81110f20:	df000015 	stw	fp,0(sp)
81110f24:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateNFeeControllerTask. (exit)\n");
81110f28:	d0a05017 	ldw	r2,-32448(gp)
81110f2c:	100f883a 	mov	r7,r2
81110f30:	01800a84 	movi	r6,42
81110f34:	01400044 	movi	r5,1
81110f38:	01204534 	movhi	r4,33044
81110f3c:	21073b04 	addi	r4,r4,7404
81110f40:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create NFEE Controller Task.\n");
81110f44:	d0a05017 	ldw	r2,-32448(gp)
81110f48:	100f883a 	mov	r7,r2
81110f4c:	018009c4 	movi	r6,39
81110f50:	01400044 	movi	r5,1
81110f54:	01204534 	movhi	r4,33044
81110f58:	21074604 	addi	r4,r4,7448
81110f5c:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110f60:	0001883a 	nop
81110f64:	e037883a 	mov	sp,fp
81110f68:	dfc00117 	ldw	ra,4(sp)
81110f6c:	df000017 	ldw	fp,0(sp)
81110f70:	dec00204 	addi	sp,sp,8
81110f74:	f800283a 	ret

81110f78 <vCoudlNotCreateDataControllerTask>:


void vCoudlNotCreateDataControllerTask( void )
{
81110f78:	defffe04 	addi	sp,sp,-8
81110f7c:	de00012e 	bgeu	sp,et,81110f84 <vCoudlNotCreateDataControllerTask+0xc>
81110f80:	003b68fa 	trap	3
81110f84:	dfc00115 	stw	ra,4(sp)
81110f88:	df000015 	stw	fp,0(sp)
81110f8c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateDataControllerTask. (exit)\n");
81110f90:	d0a05017 	ldw	r2,-32448(gp)
81110f94:	100f883a 	mov	r7,r2
81110f98:	01800a84 	movi	r6,42
81110f9c:	01400044 	movi	r5,1
81110fa0:	01204534 	movhi	r4,33044
81110fa4:	21075004 	addi	r4,r4,7488
81110fa8:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create Data Controller Task.\n");
81110fac:	d0a05017 	ldw	r2,-32448(gp)
81110fb0:	100f883a 	mov	r7,r2
81110fb4:	018009c4 	movi	r6,39
81110fb8:	01400044 	movi	r5,1
81110fbc:	01204534 	movhi	r4,33044
81110fc0:	21075b04 	addi	r4,r4,7532
81110fc4:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81110fc8:	0001883a 	nop
81110fcc:	e037883a 	mov	sp,fp
81110fd0:	dfc00117 	ldw	ra,4(sp)
81110fd4:	df000017 	ldw	fp,0(sp)
81110fd8:	dec00204 	addi	sp,sp,8
81110fdc:	f800283a 	ret

81110fe0 <vCoudlNotCreateMebTask>:


void vCoudlNotCreateMebTask( void )
{
81110fe0:	defffe04 	addi	sp,sp,-8
81110fe4:	de00012e 	bgeu	sp,et,81110fec <vCoudlNotCreateMebTask+0xc>
81110fe8:	003b68fa 	trap	3
81110fec:	dfc00115 	stw	ra,4(sp)
81110ff0:	df000015 	stw	fp,0(sp)
81110ff4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCoudlNotCreateMebTask. (exit)\n");
81110ff8:	d0a05017 	ldw	r2,-32448(gp)
81110ffc:	100f883a 	mov	r7,r2
81111000:	018007c4 	movi	r6,31
81111004:	01400044 	movi	r5,1
81111008:	01204534 	movhi	r4,33044
8111100c:	21076504 	addi	r4,r4,7572
81111010:	111405c0 	call	8111405c <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not create Meb Task.\n");
81111014:	d0a05017 	ldw	r2,-32448(gp)
81111018:	100f883a 	mov	r7,r2
8111101c:	018006c4 	movi	r6,27
81111020:	01400044 	movi	r5,1
81111024:	01204534 	movhi	r4,33044
81111028:	21076d04 	addi	r4,r4,7604
8111102c:	111405c0 	call	8111405c <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81111030:	0001883a 	nop
81111034:	e037883a 	mov	sp,fp
81111038:	dfc00117 	ldw	ra,4(sp)
8111103c:	df000017 	ldw	fp,0(sp)
81111040:	dec00204 	addi	sp,sp,8
81111044:	f800283a 	ret

81111048 <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
81111048:	defffd04 	addi	sp,sp,-12
8111104c:	de00012e 	bgeu	sp,et,81111054 <vNFeeNotInUse+0xc>
81111050:	003b68fa 	trap	3
81111054:	df000215 	stw	fp,8(sp)
81111058:	df000204 	addi	fp,sp,8
8111105c:	e13ffe15 	stw	r4,-8(fp)
81111060:	2805883a 	mov	r2,r5
81111064:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
81111068:	e0bffe17 	ldw	r2,-8(fp)
8111106c:	e0ffff03 	ldbu	r3,-4(fp)
81111070:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
81111074:	e0bffe17 	ldw	r2,-8(fp)
81111078:	10002015 	stw	zero,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8111107c:	e0bffe17 	ldw	r2,-8(fp)
81111080:	10002115 	stw	zero,132(r2)
}
81111084:	0001883a 	nop
81111088:	e037883a 	mov	sp,fp
8111108c:	df000017 	ldw	fp,0(sp)
81111090:	dec00104 	addi	sp,sp,4
81111094:	f800283a 	ret

81111098 <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
81111098:	defffb04 	addi	sp,sp,-20
8111109c:	de00012e 	bgeu	sp,et,811110a4 <vNFeeStructureInit+0xc>
811110a0:	003b68fa 	trap	3
811110a4:	dfc00415 	stw	ra,16(sp)
811110a8:	df000315 	stw	fp,12(sp)
811110ac:	df000304 	addi	fp,sp,12
811110b0:	e13ffe15 	stw	r4,-8(fp)
811110b4:	2805883a 	mov	r2,r5
811110b8:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
811110bc:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
811110c0:	e0bffe17 	ldw	r2,-8(fp)
811110c4:	e0ffff03 	ldbu	r3,-4(fp)
811110c8:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
811110cc:	e0bffe17 	ldw	r2,-8(fp)
811110d0:	10802804 	addi	r2,r2,160
811110d4:	1009883a 	mov	r4,r2
811110d8:	110d7380 	call	8110d738 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
811110dc:	e13ffe17 	ldw	r4,-8(fp)
811110e0:	11111700 	call	81111170 <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
811110e4:	e0bffe17 	ldw	r2,-8(fp)
811110e8:	00c00044 	movi	r3,1
811110ec:	10c02015 	stw	r3,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
811110f0:	e0bffe17 	ldw	r2,-8(fp)
811110f4:	10002115 	stw	zero,132(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
811110f8:	e0bffe17 	ldw	r2,-8(fp)
811110fc:	10002615 	stw	zero,152(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
81111100:	e03ffd05 	stb	zero,-12(fp)
81111104:	00000906 	br	8111112c <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
81111108:	e0bffd03 	ldbu	r2,-12(fp)
8111110c:	e0fffe17 	ldw	r3,-8(fp)
81111110:	1885883a 	add	r2,r3,r2
81111114:	10802504 	addi	r2,r2,148
81111118:	e0fffd03 	ldbu	r3,-12(fp)
8111111c:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
81111120:	e0bffd03 	ldbu	r2,-12(fp)
81111124:	10800044 	addi	r2,r2,1
81111128:	e0bffd05 	stb	r2,-12(fp)
8111112c:	e0bffd03 	ldbu	r2,-12(fp)
81111130:	10800130 	cmpltui	r2,r2,4
81111134:	103ff41e 	bne	r2,zero,81111108 <__reset+0xfb0f1108>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
81111138:	e0bffe17 	ldw	r2,-8(fp)
8111113c:	10002715 	stw	zero,156(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
81111140:	e0bffe17 	ldw	r2,-8(fp)
81111144:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bLogging = FALSE;
81111148:	e0bffe17 	ldw	r2,-8(fp)
8111114c:	10002215 	stw	zero,136(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
81111150:	e0bffe17 	ldw	r2,-8(fp)
81111154:	10002415 	stw	zero,144(r2)

}
81111158:	0001883a 	nop
8111115c:	e037883a 	mov	sp,fp
81111160:	dfc00117 	ldw	ra,4(sp)
81111164:	df000017 	ldw	fp,0(sp)
81111168:	dec00204 	addi	sp,sp,8
8111116c:	f800283a 	ret

81111170 <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
81111170:	defff404 	addi	sp,sp,-48
81111174:	de00012e 	bgeu	sp,et,8111117c <vUpdateMemMapFEE+0xc>
81111178:	003b68fa 	trap	3
8111117c:	df000b15 	stw	fp,44(sp)
81111180:	df000b04 	addi	fp,sp,44
81111184:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
81111188:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
8111118c:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
81111190:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
81111194:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
81111198:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
8111119c:	e03ff615 	stw	zero,-40(fp)
    unsigned char ucPixelsInLastBlockL = 0;
811111a0:	e03ff705 	stb	zero,-36(fp)
    unsigned char ucShiftsL = 0;
811111a4:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
811111a8:	e03ff745 	stb	zero,-35(fp)
    unsigned long ulLastOffset = 0;
811111ac:	e03ff815 	stw	zero,-32(fp)
    unsigned long ulStepHalfCCD = 0;
811111b0:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
811111b4:	e17fff17 	ldw	r5,-4(fp)
811111b8:	01035a34 	movhi	r4,3432
811111bc:	21348c04 	addi	r4,r4,-11728
811111c0:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
811111c4:	e13fff17 	ldw	r4,-4(fp)
811111c8:	21000003 	ldbu	r4,0(r4)
811111cc:	21403fcc 	andi	r5,r4,255
811111d0:	01035a34 	movhi	r4,3432
811111d4:	21348c04 	addi	r4,r4,-11728
811111d8:	2909383a 	mul	r4,r5,r4
811111dc:	200b883a 	mov	r5,r4
811111e0:	e13fff17 	ldw	r4,-4(fp)
811111e4:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
811111e8:	e13fff17 	ldw	r4,-4(fp)
811111ec:	21400117 	ldw	r5,4(r4)
811111f0:	01033234 	movhi	r4,3272
811111f4:	21348c04 	addi	r4,r4,-11728
811111f8:	290b883a 	add	r5,r5,r4
811111fc:	e13fff17 	ldw	r4,-4(fp)
81111200:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
81111204:	e13fff17 	ldw	r4,-4(fp)
81111208:	21002a0b 	ldhu	r4,168(r4)
8111120c:	217fffcc 	andi	r5,r4,65535
81111210:	e13fff17 	ldw	r4,-4(fp)
81111214:	2100290b 	ldhu	r4,164(r4)
81111218:	213fffcc 	andi	r4,r4,65535
8111121c:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
81111220:	e13fff17 	ldw	r4,-4(fp)
81111224:	2100298b 	ldhu	r4,166(r4)
81111228:	21bfffcc 	andi	r6,r4,65535
8111122c:	e13fff17 	ldw	r4,-4(fp)
81111230:	2100288b 	ldhu	r4,162(r4)
81111234:	213fffcc 	andi	r4,r4,65535
81111238:	310d883a 	add	r6,r6,r4
8111123c:	e13fff17 	ldw	r4,-4(fp)
81111240:	2100280b 	ldhu	r4,160(r4)
81111244:	213fffcc 	andi	r4,r4,65535
81111248:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8111124c:	2909383a 	mul	r4,r5,r4
81111250:	e13ff915 	stw	r4,-28(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
81111254:	e13ff917 	ldw	r4,-28(fp)
81111258:	2109883a 	add	r4,r4,r4
8111125c:	200b883a 	mov	r5,r4
81111260:	e13fff17 	ldw	r4,-4(fp)
81111264:	2140048d 	sth	r5,18(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
81111268:	e13fff17 	ldw	r4,-4(fp)
8111126c:	2100048b 	ldhu	r4,18(r4)
81111270:	213fffcc 	andi	r4,r4,65535
81111274:	2008d0fa 	srli	r4,r4,3
81111278:	213fffcc 	andi	r4,r4,65535
8111127c:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
81111280:	e13fff17 	ldw	r4,-4(fp)
81111284:	2100048b 	ldhu	r4,18(r4)
81111288:	213fffcc 	andi	r4,r4,65535
8111128c:	210001cc 	andi	r4,r4,7
81111290:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
81111294:	e13ffb17 	ldw	r4,-20(fp)
81111298:	20001326 	beq	r4,zero,811112e8 <vUpdateMemMapFEE+0x178>
        ulMemLinesL = ulMemLinesL + 1;
8111129c:	e13ff517 	ldw	r4,-44(fp)
811112a0:	21000044 	addi	r4,r4,1
811112a4:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
811112a8:	e13fff17 	ldw	r4,-4(fp)
811112ac:	2100048b 	ldhu	r4,18(r4)
811112b0:	e17ffb17 	ldw	r5,-20(fp)
811112b4:	2149c83a 	sub	r4,r4,r5
811112b8:	21000204 	addi	r4,r4,8
811112bc:	200b883a 	mov	r5,r4
811112c0:	e13fff17 	ldw	r4,-4(fp)
811112c4:	2140048d 	sth	r5,18(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
811112c8:	e13ffb17 	ldw	r4,-20(fp)
811112cc:	200b883a 	mov	r5,r4
811112d0:	01000204 	movi	r4,8
811112d4:	2149c83a 	sub	r4,r4,r5
811112d8:	200b883a 	mov	r5,r4
811112dc:	e13fff17 	ldw	r4,-4(fp)
811112e0:	21400505 	stb	r5,20(r4)
811112e4:	00000206 	br	811112f0 <vUpdateMemMapFEE+0x180>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
811112e8:	e13fff17 	ldw	r4,-4(fp)
811112ec:	20000505 	stb	zero,20(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
811112f0:	e13ff517 	ldw	r4,-44(fp)
811112f4:	2008d13a 	srli	r4,r4,4
811112f8:	e13ff615 	stw	r4,-40(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
811112fc:	e13ff517 	ldw	r4,-44(fp)
81111300:	210003cc 	andi	r4,r4,15
81111304:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
81111308:	e13ffc17 	ldw	r4,-16(fp)
8111130c:	20000b26 	beq	r4,zero,8111133c <vUpdateMemMapFEE+0x1cc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
81111310:	e13ff617 	ldw	r4,-40(fp)
81111314:	21000044 	addi	r4,r4,1
81111318:	e13ff615 	stw	r4,-40(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
8111131c:	e17ff517 	ldw	r5,-44(fp)
81111320:	e13ffc17 	ldw	r4,-16(fp)
81111324:	290bc83a 	sub	r5,r5,r4
81111328:	e13ff617 	ldw	r4,-40(fp)
8111132c:	2909883a 	add	r4,r5,r4
81111330:	21000404 	addi	r4,r4,16
81111334:	e13ffa15 	stw	r4,-24(fp)
81111338:	00000406 	br	8111134c <vUpdateMemMapFEE+0x1dc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
8111133c:	e17ff517 	ldw	r5,-44(fp)
81111340:	e13ff617 	ldw	r4,-40(fp)
81111344:	2909883a 	add	r4,r5,r4
81111348:	e13ffa15 	stw	r4,-24(fp)
    }

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
8111134c:	e13ffb17 	ldw	r4,-20(fp)
81111350:	20000926 	beq	r4,zero,81111378 <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
81111354:	e13ffc17 	ldw	r4,-16(fp)
81111358:	2109883a 	add	r4,r4,r4
8111135c:	2109883a 	add	r4,r4,r4
81111360:	200b883a 	mov	r5,r4
81111364:	e13ffb17 	ldw	r4,-20(fp)
81111368:	2008d07a 	srli	r4,r4,1
8111136c:	2909883a 	add	r4,r5,r4
81111370:	e13ff705 	stb	r4,-36(fp)
81111374:	00000406 	br	81111388 <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
81111378:	e13ffc17 	ldw	r4,-16(fp)
8111137c:	2109883a 	add	r4,r4,r4
81111380:	2109883a 	add	r4,r4,r4
81111384:	e13ff705 	stb	r4,-36(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
81111388:	e13ff703 	ldbu	r4,-36(fp)
8111138c:	01401004 	movi	r5,64
81111390:	2909c83a 	sub	r4,r5,r4
81111394:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
81111398:	e13ffd03 	ldbu	r4,-12(fp)
8111139c:	217ff804 	addi	r5,r4,-32
811113a0:	28000416 	blt	r5,zero,811113b4 <vUpdateMemMapFEE+0x244>
811113a4:	013fffc4 	movi	r4,-1
811113a8:	2144d83a 	srl	r2,r4,r5
811113ac:	0007883a 	mov	r3,zero
811113b0:	00000a06 	br	811113dc <vUpdateMemMapFEE+0x26c>
811113b4:	017fffc4 	movi	r5,-1
811113b8:	280c907a 	slli	r6,r5,1
811113bc:	014007c4 	movi	r5,31
811113c0:	290bc83a 	sub	r5,r5,r4
811113c4:	314a983a 	sll	r5,r6,r5
811113c8:	01bfffc4 	movi	r6,-1
811113cc:	3104d83a 	srl	r2,r6,r4
811113d0:	2884b03a 	or	r2,r5,r2
811113d4:	017fffc4 	movi	r5,-1
811113d8:	2906d83a 	srl	r3,r5,r4
811113dc:	e13fff17 	ldw	r4,-4(fp)
811113e0:	20800615 	stw	r2,24(r4)
811113e4:	20c00715 	stw	r3,28(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
811113e8:	e0bff617 	ldw	r2,-40(fp)
811113ec:	1007883a 	mov	r3,r2
811113f0:	e0bfff17 	ldw	r2,-4(fp)
811113f4:	10c0040d 	sth	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
811113f8:	e0bfff17 	ldw	r2,-4(fp)
811113fc:	10c00117 	ldw	r3,4(r2)
81111400:	008004b4 	movhi	r2,18
81111404:	10a40004 	addi	r2,r2,-28672
81111408:	1885883a 	add	r2,r3,r2
8111140c:	e0bff815 	stw	r2,-32(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
81111410:	e0bfff17 	ldw	r2,-4(fp)
81111414:	1080048b 	ldhu	r2,18(r2)
81111418:	10ffffcc 	andi	r3,r2,65535
8111141c:	008000b4 	movhi	r2,2
81111420:	10a40004 	addi	r2,r2,-28672
81111424:	1885883a 	add	r2,r3,r2
81111428:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8111142c:	e03ff745 	stb	zero,-35(fp)
81111430:	00001906 	br	81111498 <vUpdateMemMapFEE+0x328>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
81111434:	e0bff743 	ldbu	r2,-35(fp)
81111438:	e0ffff17 	ldw	r3,-4(fp)
8111143c:	10800624 	muli	r2,r2,24
81111440:	1885883a 	add	r2,r3,r2
81111444:	10800804 	addi	r2,r2,32
81111448:	e0fff817 	ldw	r3,-32(fp)
8111144c:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
81111450:	e0fff817 	ldw	r3,-32(fp)
81111454:	e0bffe17 	ldw	r2,-8(fp)
81111458:	1885883a 	add	r2,r3,r2
8111145c:	e0bff815 	stw	r2,-32(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
81111460:	e0bff743 	ldbu	r2,-35(fp)
81111464:	e0ffff17 	ldw	r3,-4(fp)
81111468:	10800624 	muli	r2,r2,24
8111146c:	1885883a 	add	r2,r3,r2
81111470:	10800b04 	addi	r2,r2,44
81111474:	e0fff817 	ldw	r3,-32(fp)
81111478:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8111147c:	e0fff817 	ldw	r3,-32(fp)
81111480:	e0bffe17 	ldw	r2,-8(fp)
81111484:	1885883a 	add	r2,r3,r2
81111488:	e0bff815 	stw	r2,-32(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8111148c:	e0bff743 	ldbu	r2,-35(fp)
81111490:	10800044 	addi	r2,r2,1
81111494:	e0bff745 	stb	r2,-35(fp)
81111498:	e0bff743 	ldbu	r2,-35(fp)
8111149c:	10800130 	cmpltui	r2,r2,4
811114a0:	103fe41e 	bne	r2,zero,81111434 <__reset+0xfb0f1434>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
811114a4:	0001883a 	nop
811114a8:	e037883a 	mov	sp,fp
811114ac:	df000017 	ldw	fp,0(sp)
811114b0:	dec00104 	addi	sp,sp,4
811114b4:	f800283a 	ret

811114b8 <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
811114b8:	defffe04 	addi	sp,sp,-8
811114bc:	de00012e 	bgeu	sp,et,811114c4 <vFeeSpwRMAPLoadDefault+0xc>
811114c0:	003b68fa 	trap	3
811114c4:	df000115 	stw	fp,4(sp)
811114c8:	df000104 	addi	fp,sp,4
811114cc:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
811114d0:	0001883a 	nop
811114d4:	e037883a 	mov	sp,fp
811114d8:	df000017 	ldw	fp,0(sp)
811114dc:	dec00104 	addi	sp,sp,4
811114e0:	f800283a 	ret

811114e4 <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
811114e4:	defffe04 	addi	sp,sp,-8
811114e8:	de00012e 	bgeu	sp,et,811114f0 <vFeeSpwRMAPChangeConfig+0xc>
811114ec:	003b68fa 	trap	3
811114f0:	df000115 	stw	fp,4(sp)
811114f4:	df000104 	addi	fp,sp,4
811114f8:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
811114fc:	0001883a 	nop
81111500:	e037883a 	mov	sp,fp
81111504:	df000017 	ldw	fp,0(sp)
81111508:	dec00104 	addi	sp,sp,4
8111150c:	f800283a 	ret

81111510 <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
81111510:	defffe04 	addi	sp,sp,-8
81111514:	de00012e 	bgeu	sp,et,8111151c <vFeeSpwRMAPChangeDefault+0xc>
81111518:	003b68fa 	trap	3
8111151c:	df000115 	stw	fp,4(sp)
81111520:	df000104 	addi	fp,sp,4
81111524:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
81111528:	0001883a 	nop
8111152c:	e037883a 	mov	sp,fp
81111530:	df000017 	ldw	fp,0(sp)
81111534:	dec00104 	addi	sp,sp,4
81111538:	f800283a 	ret

8111153c <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
8111153c:	defffe04 	addi	sp,sp,-8
81111540:	de00012e 	bgeu	sp,et,81111548 <cFeeSpwChannelEnable+0xc>
81111544:	003b68fa 	trap	3
81111548:	df000115 	stw	fp,4(sp)
8111154c:	df000104 	addi	fp,sp,4
81111550:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
81111554:	0001883a 	nop
81111558:	e037883a 	mov	sp,fp
8111155c:	df000017 	ldw	fp,0(sp)
81111560:	dec00104 	addi	sp,sp,4
81111564:	f800283a 	ret

81111568 <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
81111568:	defffe04 	addi	sp,sp,-8
8111156c:	de00012e 	bgeu	sp,et,81111574 <cFeeSpwChannelDisable+0xc>
81111570:	003b68fa 	trap	3
81111574:	df000115 	stw	fp,4(sp)
81111578:	df000104 	addi	fp,sp,4
8111157c:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
81111580:	0001883a 	nop
81111584:	e037883a 	mov	sp,fp
81111588:	df000017 	ldw	fp,0(sp)
8111158c:	dec00104 	addi	sp,sp,4
81111590:	f800283a 	ret

81111594 <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
81111594:	defffe04 	addi	sp,sp,-8
81111598:	de00012e 	bgeu	sp,et,811115a0 <cFeeRMAPDump+0xc>
8111159c:	003b68fa 	trap	3
811115a0:	df000115 	stw	fp,4(sp)
811115a4:	df000104 	addi	fp,sp,4
811115a8:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
811115ac:	0001883a 	nop
811115b0:	e037883a 	mov	sp,fp
811115b4:	df000017 	ldw	fp,0(sp)
811115b8:	dec00104 	addi	sp,sp,4
811115bc:	f800283a 	ret

811115c0 <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
811115c0:	defffe04 	addi	sp,sp,-8
811115c4:	de00012e 	bgeu	sp,et,811115cc <cFeeRMAPEchoingEnable+0xc>
811115c8:	003b68fa 	trap	3
811115cc:	df000115 	stw	fp,4(sp)
811115d0:	df000104 	addi	fp,sp,4
811115d4:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
811115d8:	e0bfff17 	ldw	r2,-4(fp)
811115dc:	00c00044 	movi	r3,1
811115e0:	10c02315 	stw	r3,140(r2)
}
811115e4:	0001883a 	nop
811115e8:	e037883a 	mov	sp,fp
811115ec:	df000017 	ldw	fp,0(sp)
811115f0:	dec00104 	addi	sp,sp,4
811115f4:	f800283a 	ret

811115f8 <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
811115f8:	defffe04 	addi	sp,sp,-8
811115fc:	de00012e 	bgeu	sp,et,81111604 <cFeeRMAPEchoingDisable+0xc>
81111600:	003b68fa 	trap	3
81111604:	df000115 	stw	fp,4(sp)
81111608:	df000104 	addi	fp,sp,4
8111160c:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
81111610:	e0bfff17 	ldw	r2,-4(fp)
81111614:	10002315 	stw	zero,140(r2)
}
81111618:	0001883a 	nop
8111161c:	e037883a 	mov	sp,fp
81111620:	df000017 	ldw	fp,0(sp)
81111624:	dec00104 	addi	sp,sp,4
81111628:	f800283a 	ret

8111162c <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
8111162c:	defffe04 	addi	sp,sp,-8
81111630:	de00012e 	bgeu	sp,et,81111638 <cFeeRMAPLogEnable+0xc>
81111634:	003b68fa 	trap	3
81111638:	df000115 	stw	fp,4(sp)
8111163c:	df000104 	addi	fp,sp,4
81111640:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
81111644:	e0bfff17 	ldw	r2,-4(fp)
81111648:	00c00044 	movi	r3,1
8111164c:	10c02215 	stw	r3,136(r2)
}
81111650:	0001883a 	nop
81111654:	e037883a 	mov	sp,fp
81111658:	df000017 	ldw	fp,0(sp)
8111165c:	dec00104 	addi	sp,sp,4
81111660:	f800283a 	ret

81111664 <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
81111664:	defffe04 	addi	sp,sp,-8
81111668:	de00012e 	bgeu	sp,et,81111670 <cFeeRMAPLogDisable+0xc>
8111166c:	003b68fa 	trap	3
81111670:	df000115 	stw	fp,4(sp)
81111674:	df000104 	addi	fp,sp,4
81111678:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
8111167c:	e0bfff17 	ldw	r2,-4(fp)
81111680:	10002215 	stw	zero,136(r2)
}
81111684:	0001883a 	nop
81111688:	e037883a 	mov	sp,fp
8111168c:	df000017 	ldw	fp,0(sp)
81111690:	dec00104 	addi	sp,sp,4
81111694:	f800283a 	ret

81111698 <vNFeeControlInit>:
 */


#include "fee_controller.h"

void vNFeeControlInit( TNFee_Control *xFeeControlL ) {
81111698:	defffc04 	addi	sp,sp,-16
8111169c:	de00012e 	bgeu	sp,et,811116a4 <vNFeeControlInit+0xc>
811116a0:	003b68fa 	trap	3
811116a4:	dfc00315 	stw	ra,12(sp)
811116a8:	df000215 	stw	fp,8(sp)
811116ac:	df000204 	addi	fp,sp,8
811116b0:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
811116b4:	e03ffe05 	stb	zero,-8(fp)
    
    /* Reset TimeCode */
    vResetTimeCode( xFeeControlL );
811116b8:	e13fff17 	ldw	r4,-4(fp)
811116bc:	11117900 	call	81111790 <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xFeeControlL );
811116c0:	e13fff17 	ldw	r4,-4(fp)
811116c4:	11117c40 	call	811117c4 <vLoadDefaultIdNFEEMaster>

    /* Calculate the */
    for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
811116c8:	e03ffe05 	stb	zero,-8(fp)
811116cc:	00001706 	br	8111172c <vNFeeControlInit+0x94>
        vNFeeStructureInit( &xFeeControlL->xNfee[ ucIL ], ucIL);
811116d0:	e0bffe03 	ldbu	r2,-8(fp)
811116d4:	10802b24 	muli	r2,r2,172
811116d8:	e0ffff17 	ldw	r3,-4(fp)
811116dc:	1885883a 	add	r2,r3,r2
811116e0:	e0fffe03 	ldbu	r3,-8(fp)
811116e4:	180b883a 	mov	r5,r3
811116e8:	1009883a 	mov	r4,r2
811116ec:	11110980 	call	81111098 <vNFeeStructureInit>
        xFeeControlL->pbEnabledNFEEs[ ucIL ] = &xFeeControlL->xNfee[ ucIL ].xControl.bEnabled;
811116f0:	e0bffe03 	ldbu	r2,-8(fp)
811116f4:	e0fffe03 	ldbu	r3,-8(fp)
811116f8:	18c02b24 	muli	r3,r3,172
811116fc:	18c02004 	addi	r3,r3,128
81111700:	e13fff17 	ldw	r4,-4(fp)
81111704:	20c7883a 	add	r3,r4,r3
81111708:	e13fff17 	ldw	r4,-4(fp)
8111170c:	10804084 	addi	r2,r2,258
81111710:	1085883a 	add	r2,r2,r2
81111714:	1085883a 	add	r2,r2,r2
81111718:	2085883a 	add	r2,r4,r2
8111171c:	10c00015 	stw	r3,0(r2)
    vResetTimeCode( xFeeControlL );
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xFeeControlL );

    /* Calculate the */
    for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
81111720:	e0bffe03 	ldbu	r2,-8(fp)
81111724:	10800044 	addi	r2,r2,1
81111728:	e0bffe05 	stb	r2,-8(fp)
8111172c:	e0bffe03 	ldbu	r2,-8(fp)
81111730:	108001b0 	cmpltui	r2,r2,6
81111734:	103fe61e 	bne	r2,zero,811116d0 <__reset+0xfb0f16d0>
        vNFeeStructureInit( &xFeeControlL->xNfee[ ucIL ], ucIL);
        xFeeControlL->pbEnabledNFEEs[ ucIL ] = &xFeeControlL->xNfee[ ucIL ].xControl.bEnabled;
    }

}
81111738:	0001883a 	nop
8111173c:	e037883a 	mov	sp,fp
81111740:	dfc00117 	ldw	ra,4(sp)
81111744:	df000017 	ldw	fp,0(sp)
81111748:	dec00204 	addi	sp,sp,8
8111174c:	f800283a 	ret

81111750 <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TNFee_Control *xFeeControlL, unsigned char ucTime ) {
81111750:	defffd04 	addi	sp,sp,-12
81111754:	de00012e 	bgeu	sp,et,8111175c <vSetTimeCode+0xc>
81111758:	003b68fa 	trap	3
8111175c:	df000215 	stw	fp,8(sp)
81111760:	df000204 	addi	fp,sp,8
81111764:	e13ffe15 	stw	r4,-8(fp)
81111768:	2805883a 	mov	r2,r5
8111176c:	e0bfff05 	stb	r2,-4(fp)
    xFeeControlL->ucTimeCode = ucTime;
81111770:	e0bffe17 	ldw	r2,-8(fp)
81111774:	e0ffff03 	ldbu	r3,-4(fp)
81111778:	10c10805 	stb	r3,1056(r2)
}
8111177c:	0001883a 	nop
81111780:	e037883a 	mov	sp,fp
81111784:	df000017 	ldw	fp,0(sp)
81111788:	dec00104 	addi	sp,sp,4
8111178c:	f800283a 	ret

81111790 <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TNFee_Control *xFeeControlL ) {
81111790:	defffe04 	addi	sp,sp,-8
81111794:	de00012e 	bgeu	sp,et,8111179c <vResetTimeCode+0xc>
81111798:	003b68fa 	trap	3
8111179c:	df000115 	stw	fp,4(sp)
811117a0:	df000104 	addi	fp,sp,4
811117a4:	e13fff15 	stw	r4,-4(fp)
    xFeeControlL->ucTimeCode = 0;
811117a8:	e0bfff17 	ldw	r2,-4(fp)
811117ac:	10010805 	stb	zero,1056(r2)
}
811117b0:	0001883a 	nop
811117b4:	e037883a 	mov	sp,fp
811117b8:	df000017 	ldw	fp,0(sp)
811117bc:	dec00104 	addi	sp,sp,4
811117c0:	f800283a 	ret

811117c4 <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TNFee_Control *xFeeControlL ) {
811117c4:	defffe04 	addi	sp,sp,-8
811117c8:	de00012e 	bgeu	sp,et,811117d0 <vLoadDefaultIdNFEEMaster+0xc>
811117cc:	003b68fa 	trap	3
811117d0:	df000115 	stw	fp,4(sp)
811117d4:	df000104 	addi	fp,sp,4
811117d8:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xFeeControlL->ucIdNFEEMaster = 0;
811117dc:	e0bfff17 	ldw	r2,-4(fp)
811117e0:	10010845 	stb	zero,1057(r2)
}
811117e4:	0001883a 	nop
811117e8:	e037883a 	mov	sp,fp
811117ec:	df000017 	ldw	fp,0(sp)
811117f0:	dec00104 	addi	sp,sp,4
811117f4:	f800283a 	ret

811117f8 <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TNFee_Control *xFeeControlL, unsigned char ucIdMaster ) {
811117f8:	defffd04 	addi	sp,sp,-12
811117fc:	de00012e 	bgeu	sp,et,81111804 <vChangeIdNFEEMaster+0xc>
81111800:	003b68fa 	trap	3
81111804:	df000215 	stw	fp,8(sp)
81111808:	df000204 	addi	fp,sp,8
8111180c:	e13ffe15 	stw	r4,-8(fp)
81111810:	2805883a 	mov	r2,r5
81111814:	e0bfff05 	stb	r2,-4(fp)
    xFeeControlL->ucIdNFEEMaster = ucIdMaster;
81111818:	e0bffe17 	ldw	r2,-8(fp)
8111181c:	e0ffff03 	ldbu	r3,-4(fp)
81111820:	10c10845 	stb	r3,1057(r2)
}
81111824:	0001883a 	nop
81111828:	e037883a 	mov	sp,fp
8111182c:	df000017 	ldw	fp,0(sp)
81111830:	dec00104 	addi	sp,sp,4
81111834:	f800283a 	ret

81111838 <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TNFee_Control *xFeeControlL, unsigned char ucIdMaster ) {
81111838:	defffd04 	addi	sp,sp,-12
8111183c:	de00012e 	bgeu	sp,et,81111844 <vChangeDefaultIdNFEEMaster+0xc>
81111840:	003b68fa 	trap	3
81111844:	df000215 	stw	fp,8(sp)
81111848:	df000204 	addi	fp,sp,8
8111184c:	e13ffe15 	stw	r4,-8(fp)
81111850:	2805883a 	mov	r2,r5
81111854:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
81111858:	0001883a 	nop
8111185c:	e037883a 	mov	sp,fp
81111860:	df000017 	ldw	fp,0(sp)
81111864:	dec00104 	addi	sp,sp,4
81111868:	f800283a 	ret

8111186c <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8111186c:	defffe04 	addi	sp,sp,-8
81111870:	de00012e 	bgeu	sp,et,81111878 <vInitSimucamBasicHW+0xc>
81111874:	003b68fa 	trap	3
81111878:	dfc00115 	stw	ra,4(sp)
8111187c:	df000015 	stw	fp,0(sp)
81111880:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
81111884:	01403fc4 	movi	r5,255
81111888:	0009883a 	mov	r4,zero
8111188c:	11061440 	call	81106144 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
81111890:	01400834 	movhi	r5,32
81111894:	297fffc4 	addi	r5,r5,-1
81111898:	0009883a 	mov	r4,zero
8111189c:	11061c40 	call	811061c4 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
811118a0:	01400074 	movhi	r5,1
811118a4:	01000044 	movi	r4,1
811118a8:	11061c40 	call	811061c4 <bSetPainelLeds>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
811118ac:	0009883a 	mov	r4,zero
811118b0:	11077a00 	call	811077a0 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
811118b4:	0009883a 	mov	r4,zero
811118b8:	11078700 	call	81107870 <bSSDisplayUpdate>

}
811118bc:	0001883a 	nop
811118c0:	e037883a 	mov	sp,fp
811118c4:	dfc00117 	ldw	ra,4(sp)
811118c8:	df000017 	ldw	fp,0(sp)
811118cc:	dec00204 	addi	sp,sp,8
811118d0:	f800283a 	ret

811118d4 <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
811118d4:	defffd04 	addi	sp,sp,-12
811118d8:	de00012e 	bgeu	sp,et,811118e0 <bLogWriteSDCard+0xc>
811118dc:	003b68fa 	trap	3
811118e0:	df000215 	stw	fp,8(sp)
811118e4:	df000204 	addi	fp,sp,8
811118e8:	e13ffe15 	stw	r4,-8(fp)
811118ec:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
811118f0:	00800044 	movi	r2,1
}
811118f4:	e037883a 	mov	sp,fp
811118f8:	df000017 	ldw	fp,0(sp)
811118fc:	dec00104 	addi	sp,sp,4
81111900:	f800283a 	ret

81111904 <vLogWriteNUC>:

/* Prefer to use directly vSendLog, if there's any error use this function */
void vLogWriteNUC ( const char * cDataIn )
{
81111904:	deffe004 	addi	sp,sp,-128
81111908:	de00012e 	bgeu	sp,et,81111910 <vLogWriteNUC+0xc>
8111190c:	003b68fa 	trap	3
81111910:	dfc01f15 	stw	ra,124(sp)
81111914:	df001e15 	stw	fp,120(sp)
81111918:	df001e04 	addi	fp,sp,120
8111191c:	e13fff15 	stw	r4,-4(fp)
	char cTemp[114] = "";
81111920:	e03fe215 	stw	zero,-120(fp)
81111924:	e0bfe304 	addi	r2,fp,-116
81111928:	00c01b84 	movi	r3,110
8111192c:	180d883a 	mov	r6,r3
81111930:	000b883a 	mov	r5,zero
81111934:	1009883a 	mov	r4,r2
81111938:	1114bc00 	call	81114bc0 <memset>
	memset(cTemp,0,114);
8111193c:	01801c84 	movi	r6,114
81111940:	000b883a 	mov	r5,zero
81111944:	e13fe204 	addi	r4,fp,-120
81111948:	1114bc00 	call	81114bc0 <memset>
	memcpy(cTemp,cDataIn, min_sim( strlen(cDataIn), 113 ) ); /* 113 to let a zero terminator in the worst case (truc the message) */
8111194c:	e13fff17 	ldw	r4,-4(fp)
81111950:	11155840 	call	81115584 <strlen>
81111954:	10801c68 	cmpgeui	r2,r2,113
81111958:	1000031e 	bne	r2,zero,81111968 <vLogWriteNUC+0x64>
8111195c:	e13fff17 	ldw	r4,-4(fp)
81111960:	11155840 	call	81115584 <strlen>
81111964:	00000106 	br	8111196c <vLogWriteNUC+0x68>
81111968:	00801c44 	movi	r2,113
8111196c:	100d883a 	mov	r6,r2
81111970:	e17fff17 	ldw	r5,-4(fp)
81111974:	e13fe204 	addi	r4,fp,-120
81111978:	1114a700 	call	81114a70 <memcpy>
	vSendLog ( cDataIn );
8111197c:	e13fff17 	ldw	r4,-4(fp)
81111980:	110e4b80 	call	8110e4b8 <vSendLog>
}
81111984:	0001883a 	nop
81111988:	e037883a 	mov	sp,fp
8111198c:	dfc00117 	ldw	ra,4(sp)
81111990:	df000017 	ldw	fp,0(sp)
81111994:	dec00204 	addi	sp,sp,8
81111998:	f800283a 	ret

8111199c <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
8111199c:	defffd04 	addi	sp,sp,-12
811119a0:	de00012e 	bgeu	sp,et,811119a8 <vSimucamStructureInit+0xc>
811119a4:	003b68fa 	trap	3
811119a8:	dfc00215 	stw	ra,8(sp)
811119ac:	df000115 	stw	fp,4(sp)
811119b0:	df000104 	addi	fp,sp,4
811119b4:	e13fff15 	stw	r4,-4(fp)
    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
811119b8:	e0bfff17 	ldw	r2,-4(fp)
811119bc:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
811119c0:	e0bfff17 	ldw	r2,-4(fp)
811119c4:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
811119c8:	e13fff17 	ldw	r4,-4(fp)
811119cc:	1111a400 	call	81111a40 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
811119d0:	e13fff17 	ldw	r4,-4(fp)
811119d4:	1111ae40 	call	81111ae4 <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
811119d8:	e13fff17 	ldw	r4,-4(fp)
811119dc:	1111b8c0 	call	81111b8c <vLoadDefaultSyncSource>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
811119e0:	e13fff17 	ldw	r4,-4(fp)
811119e4:	1111c2c0 	call	81111c2c <vLoadDefaultAutoResetSync>


    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
811119e8:	e0bfff17 	ldw	r2,-4(fp)
811119ec:	10800017 	ldw	r2,0(r2)
811119f0:	10000b1e 	bne	r2,zero,81111a20 <vSimucamStructureInit+0x84>
        /* Are Normal Fee instances */
    	vNFeeControlInit( &xMeb->xFeeControl );
811119f4:	e0bfff17 	ldw	r2,-4(fp)
811119f8:	10801e04 	addi	r2,r2,120
811119fc:	1009883a 	mov	r4,r2
81111a00:	11116980 	call	81111698 <vNFeeControlInit>
        vDataControllerInit( &xMeb->xDataControl, &xMeb->xFeeControl );
81111a04:	e0bfff17 	ldw	r2,-4(fp)
81111a08:	10c00704 	addi	r3,r2,28
81111a0c:	e0bfff17 	ldw	r2,-4(fp)
81111a10:	10801e04 	addi	r2,r2,120
81111a14:	100b883a 	mov	r5,r2
81111a18:	1809883a 	mov	r4,r3
81111a1c:	110f83c0 	call	8110f83c <vDataControllerInit>
        /* todo: Not in use yet */
    }


    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
81111a20:	e0bfff17 	ldw	r2,-4(fp)
81111a24:	10000205 	stb	zero,8(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
81111a28:	0001883a 	nop
81111a2c:	e037883a 	mov	sp,fp
81111a30:	dfc00117 	ldw	ra,4(sp)
81111a34:	df000017 	ldw	fp,0(sp)
81111a38:	dec00204 	addi	sp,sp,8
81111a3c:	f800283a 	ret

81111a40 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
81111a40:	defffe04 	addi	sp,sp,-8
81111a44:	de00012e 	bgeu	sp,et,81111a4c <vLoadDefaultEPValue+0xc>
81111a48:	003b68fa 	trap	3
81111a4c:	df000115 	stw	fp,4(sp)
81111a50:	df000104 	addi	fp,sp,4
81111a54:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
81111a58:	e0bfff17 	ldw	r2,-4(fp)
81111a5c:	00d07234 	movhi	r3,16840
81111a60:	10c00315 	stw	r3,12(r2)
}
81111a64:	0001883a 	nop
81111a68:	e037883a 	mov	sp,fp
81111a6c:	df000017 	ldw	fp,0(sp)
81111a70:	dec00104 	addi	sp,sp,4
81111a74:	f800283a 	ret

81111a78 <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
81111a78:	defffd04 	addi	sp,sp,-12
81111a7c:	de00012e 	bgeu	sp,et,81111a84 <vChangeEPValue+0xc>
81111a80:	003b68fa 	trap	3
81111a84:	df000215 	stw	fp,8(sp)
81111a88:	df000204 	addi	fp,sp,8
81111a8c:	e13ffe15 	stw	r4,-8(fp)
81111a90:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
81111a94:	e0bffe17 	ldw	r2,-8(fp)
81111a98:	e0ffff17 	ldw	r3,-4(fp)
81111a9c:	10c00315 	stw	r3,12(r2)
}
81111aa0:	0001883a 	nop
81111aa4:	e037883a 	mov	sp,fp
81111aa8:	df000017 	ldw	fp,0(sp)
81111aac:	dec00104 	addi	sp,sp,4
81111ab0:	f800283a 	ret

81111ab4 <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
81111ab4:	defffd04 	addi	sp,sp,-12
81111ab8:	de00012e 	bgeu	sp,et,81111ac0 <vChangeDefaultEPValue+0xc>
81111abc:	003b68fa 	trap	3
81111ac0:	df000215 	stw	fp,8(sp)
81111ac4:	df000204 	addi	fp,sp,8
81111ac8:	e13ffe15 	stw	r4,-8(fp)
81111acc:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
81111ad0:	0001883a 	nop
81111ad4:	e037883a 	mov	sp,fp
81111ad8:	df000017 	ldw	fp,0(sp)
81111adc:	dec00104 	addi	sp,sp,4
81111ae0:	f800283a 	ret

81111ae4 <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
81111ae4:	defffe04 	addi	sp,sp,-8
81111ae8:	de00012e 	bgeu	sp,et,81111af0 <vLoadDefaultRTValue+0xc>
81111aec:	003b68fa 	trap	3
81111af0:	df000115 	stw	fp,4(sp)
81111af4:	df000104 	addi	fp,sp,4
81111af8:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
81111afc:	e0ffff17 	ldw	r3,-4(fp)
81111b00:	00901eb4 	movhi	r2,16506
81111b04:	10a66684 	addi	r2,r2,-26214
81111b08:	18800415 	stw	r2,16(r3)
}
81111b0c:	0001883a 	nop
81111b10:	e037883a 	mov	sp,fp
81111b14:	df000017 	ldw	fp,0(sp)
81111b18:	dec00104 	addi	sp,sp,4
81111b1c:	f800283a 	ret

81111b20 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
81111b20:	defffd04 	addi	sp,sp,-12
81111b24:	de00012e 	bgeu	sp,et,81111b2c <vChangeRTValue+0xc>
81111b28:	003b68fa 	trap	3
81111b2c:	df000215 	stw	fp,8(sp)
81111b30:	df000204 	addi	fp,sp,8
81111b34:	e13ffe15 	stw	r4,-8(fp)
81111b38:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
81111b3c:	e0bffe17 	ldw	r2,-8(fp)
81111b40:	e0ffff17 	ldw	r3,-4(fp)
81111b44:	10c00415 	stw	r3,16(r2)
}
81111b48:	0001883a 	nop
81111b4c:	e037883a 	mov	sp,fp
81111b50:	df000017 	ldw	fp,0(sp)
81111b54:	dec00104 	addi	sp,sp,4
81111b58:	f800283a 	ret

81111b5c <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
81111b5c:	defffd04 	addi	sp,sp,-12
81111b60:	de00012e 	bgeu	sp,et,81111b68 <vChangeDefaultRTValue+0xc>
81111b64:	003b68fa 	trap	3
81111b68:	df000215 	stw	fp,8(sp)
81111b6c:	df000204 	addi	fp,sp,8
81111b70:	e13ffe15 	stw	r4,-8(fp)
81111b74:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
81111b78:	0001883a 	nop
81111b7c:	e037883a 	mov	sp,fp
81111b80:	df000017 	ldw	fp,0(sp)
81111b84:	dec00104 	addi	sp,sp,4
81111b88:	f800283a 	ret

81111b8c <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
81111b8c:	defffe04 	addi	sp,sp,-8
81111b90:	de00012e 	bgeu	sp,et,81111b98 <vLoadDefaultSyncSource+0xc>
81111b94:	003b68fa 	trap	3
81111b98:	df000115 	stw	fp,4(sp)
81111b9c:	df000104 	addi	fp,sp,4
81111ba0:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
81111ba4:	e0bfff17 	ldw	r2,-4(fp)
81111ba8:	10000515 	stw	zero,20(r2)
}
81111bac:	0001883a 	nop
81111bb0:	e037883a 	mov	sp,fp
81111bb4:	df000017 	ldw	fp,0(sp)
81111bb8:	dec00104 	addi	sp,sp,4
81111bbc:	f800283a 	ret

81111bc0 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
81111bc0:	defffd04 	addi	sp,sp,-12
81111bc4:	de00012e 	bgeu	sp,et,81111bcc <vChangeSyncSource+0xc>
81111bc8:	003b68fa 	trap	3
81111bcc:	df000215 	stw	fp,8(sp)
81111bd0:	df000204 	addi	fp,sp,8
81111bd4:	e13ffe15 	stw	r4,-8(fp)
81111bd8:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
81111bdc:	e0bffe17 	ldw	r2,-8(fp)
81111be0:	e0ffff17 	ldw	r3,-4(fp)
81111be4:	10c00515 	stw	r3,20(r2)
}
81111be8:	0001883a 	nop
81111bec:	e037883a 	mov	sp,fp
81111bf0:	df000017 	ldw	fp,0(sp)
81111bf4:	dec00104 	addi	sp,sp,4
81111bf8:	f800283a 	ret

81111bfc <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
81111bfc:	defffd04 	addi	sp,sp,-12
81111c00:	de00012e 	bgeu	sp,et,81111c08 <vChangeDefaultSyncSource+0xc>
81111c04:	003b68fa 	trap	3
81111c08:	df000215 	stw	fp,8(sp)
81111c0c:	df000204 	addi	fp,sp,8
81111c10:	e13ffe15 	stw	r4,-8(fp)
81111c14:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
81111c18:	0001883a 	nop
81111c1c:	e037883a 	mov	sp,fp
81111c20:	df000017 	ldw	fp,0(sp)
81111c24:	dec00104 	addi	sp,sp,4
81111c28:	f800283a 	ret

81111c2c <vLoadDefaultAutoResetSync>:


/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
81111c2c:	defffe04 	addi	sp,sp,-8
81111c30:	de00012e 	bgeu	sp,et,81111c38 <vLoadDefaultAutoResetSync+0xc>
81111c34:	003b68fa 	trap	3
81111c38:	df000115 	stw	fp,4(sp)
81111c3c:	df000104 	addi	fp,sp,4
81111c40:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
81111c44:	e0bfff17 	ldw	r2,-4(fp)
81111c48:	00c00044 	movi	r3,1
81111c4c:	10c00615 	stw	r3,24(r2)
}
81111c50:	0001883a 	nop
81111c54:	e037883a 	mov	sp,fp
81111c58:	df000017 	ldw	fp,0(sp)
81111c5c:	dec00104 	addi	sp,sp,4
81111c60:	f800283a 	ret

81111c64 <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
81111c64:	defffd04 	addi	sp,sp,-12
81111c68:	de00012e 	bgeu	sp,et,81111c70 <vChangeAutoResetSync+0xc>
81111c6c:	003b68fa 	trap	3
81111c70:	df000215 	stw	fp,8(sp)
81111c74:	df000204 	addi	fp,sp,8
81111c78:	e13ffe15 	stw	r4,-8(fp)
81111c7c:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
81111c80:	e0bffe17 	ldw	r2,-8(fp)
81111c84:	e0ffff17 	ldw	r3,-4(fp)
81111c88:	10c00615 	stw	r3,24(r2)
}
81111c8c:	0001883a 	nop
81111c90:	e037883a 	mov	sp,fp
81111c94:	df000017 	ldw	fp,0(sp)
81111c98:	dec00104 	addi	sp,sp,4
81111c9c:	f800283a 	ret

81111ca0 <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
81111ca0:	defffd04 	addi	sp,sp,-12
81111ca4:	de00012e 	bgeu	sp,et,81111cac <vChangeDefaultAutoResetSync+0xc>
81111ca8:	003b68fa 	trap	3
81111cac:	df000215 	stw	fp,8(sp)
81111cb0:	df000204 	addi	fp,sp,8
81111cb4:	e13ffe15 	stw	r4,-8(fp)
81111cb8:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
81111cbc:	0001883a 	nop
81111cc0:	e037883a 	mov	sp,fp
81111cc4:	df000017 	ldw	fp,0(sp)
81111cc8:	dec00104 	addi	sp,sp,4
81111ccc:	f800283a 	ret

81111cd0 <vSyncReset>:


/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
81111cd0:	defffc04 	addi	sp,sp,-16
81111cd4:	de00012e 	bgeu	sp,et,81111cdc <vSyncReset+0xc>
81111cd8:	003b68fa 	trap	3
81111cdc:	dfc00315 	stw	ra,12(sp)
81111ce0:	df000215 	stw	fp,8(sp)
81111ce4:	df000204 	addi	fp,sp,8
81111ce8:	e13ffe15 	stw	r4,-8(fp)
81111cec:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(&xMeb->xFeeControl);
81111cf0:	e0bffe17 	ldw	r2,-8(fp)
81111cf4:	10801e04 	addi	r2,r2,120
81111cf8:	1009883a 	mov	r4,r2
81111cfc:	11117900 	call	81111790 <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
81111d00:	0001883a 	nop
81111d04:	e037883a 	mov	sp,fp
81111d08:	dfc00117 	ldw	ra,4(sp)
81111d0c:	df000017 	ldw	fp,0(sp)
81111d10:	dec00204 	addi	sp,sp,8
81111d14:	f800283a 	ret

81111d18 <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
81111d18:	defffe04 	addi	sp,sp,-8
81111d1c:	de00012e 	bgeu	sp,et,81111d24 <bSDcardIsPresent+0xc>
81111d20:	003b68fa 	trap	3
81111d24:	dfc00115 	stw	ra,4(sp)
81111d28:	df000015 	stw	fp,0(sp)
81111d2c:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
81111d30:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
}
81111d34:	e037883a 	mov	sp,fp
81111d38:	dfc00117 	ldw	ra,4(sp)
81111d3c:	df000017 	ldw	fp,0(sp)
81111d40:	dec00204 	addi	sp,sp,8
81111d44:	f800283a 	ret

81111d48 <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
81111d48:	defffe04 	addi	sp,sp,-8
81111d4c:	de00012e 	bgeu	sp,et,81111d54 <bSDcardFAT16Check+0xc>
81111d50:	003b68fa 	trap	3
81111d54:	dfc00115 	stw	ra,4(sp)
81111d58:	df000015 	stw	fp,0(sp)
81111d5c:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
81111d60:	113808c0 	call	8113808c <alt_up_sd_card_is_FAT16>
}
81111d64:	e037883a 	mov	sp,fp
81111d68:	dfc00117 	ldw	ra,4(sp)
81111d6c:	df000017 	ldw	fp,0(sp)
81111d70:	dec00204 	addi	sp,sp,8
81111d74:	f800283a 	ret

81111d78 <bInitializeSDCard>:

bool bInitializeSDCard( void ){
81111d78:	defffd04 	addi	sp,sp,-12
81111d7c:	de00012e 	bgeu	sp,et,81111d84 <bInitializeSDCard+0xc>
81111d80:	003b68fa 	trap	3
81111d84:	dfc00215 	stw	ra,8(sp)
81111d88:	df000115 	stw	fp,4(sp)
81111d8c:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
81111d90:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
81111d94:	d0206115 	stw	zero,-32380(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
81111d98:	01204534 	movhi	r4,33044
81111d9c:	21077404 	addi	r4,r4,7632
81111da0:	1137efc0 	call	81137efc <alt_up_sd_card_open_dev>
81111da4:	d0a06115 	stw	r2,-32380(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
81111da8:	d0a06117 	ldw	r2,-32380(gp)
81111dac:	10002226 	beq	r2,zero,81111e38 <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
81111db0:	1111d180 	call	81111d18 <bSDcardIsPresent>
81111db4:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
81111db8:	e0bfff17 	ldw	r2,-4(fp)
81111dbc:	10001626 	beq	r2,zero,81111e18 <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
81111dc0:	1111d480 	call	81111d48 <bSDcardFAT16Check>
81111dc4:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
81111dc8:	e0bfff17 	ldw	r2,-4(fp)
81111dcc:	10000a26 	beq	r2,zero,81111df8 <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
81111dd0:	00800044 	movi	r2,1
81111dd4:	d0a06015 	stw	r2,-32384(gp)
				debug(fp, "SD is up.\r\n");
81111dd8:	d0a05017 	ldw	r2,-32448(gp)
81111ddc:	100f883a 	mov	r7,r2
81111de0:	018002c4 	movi	r6,11
81111de4:	01400044 	movi	r5,1
81111de8:	01204534 	movhi	r4,33044
81111dec:	21077f04 	addi	r4,r4,7676
81111df0:	111405c0 	call	8111405c <fwrite>
81111df4:	00001806 	br	81111e58 <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
81111df8:	d0a05017 	ldw	r2,-32448(gp)
81111dfc:	100f883a 	mov	r7,r2
81111e00:	01800984 	movi	r6,38
81111e04:	01400044 	movi	r5,1
81111e08:	01204534 	movhi	r4,33044
81111e0c:	21078204 	addi	r4,r4,7688
81111e10:	111405c0 	call	8111405c <fwrite>
81111e14:	00001006 	br	81111e58 <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
81111e18:	d0a05017 	ldw	r2,-32448(gp)
81111e1c:	100f883a 	mov	r7,r2
81111e20:	01800744 	movi	r6,29
81111e24:	01400044 	movi	r5,1
81111e28:	01204534 	movhi	r4,33044
81111e2c:	21078c04 	addi	r4,r4,7728
81111e30:	111405c0 	call	8111405c <fwrite>
81111e34:	00000806 	br	81111e58 <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
81111e38:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
81111e3c:	d0a05017 	ldw	r2,-32448(gp)
81111e40:	100f883a 	mov	r7,r2
81111e44:	018008c4 	movi	r6,35
81111e48:	01400044 	movi	r5,1
81111e4c:	01204534 	movhi	r4,33044
81111e50:	21079404 	addi	r4,r4,7760
81111e54:	111405c0 	call	8111405c <fwrite>
	}

	return bSucess;
81111e58:	e0bfff17 	ldw	r2,-4(fp)
}
81111e5c:	e037883a 	mov	sp,fp
81111e60:	dfc00117 	ldw	ra,4(sp)
81111e64:	df000017 	ldw	fp,0(sp)
81111e68:	dec00204 	addi	sp,sp,8
81111e6c:	f800283a 	ret

81111e70 <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
81111e70:	defffd04 	addi	sp,sp,-12
81111e74:	de00012e 	bgeu	sp,et,81111e7c <siOpenFile+0xc>
81111e78:	003b68fa 	trap	3
81111e7c:	dfc00215 	stw	ra,8(sp)
81111e80:	df000115 	stw	fp,4(sp)
81111e84:	df000104 	addi	fp,sp,4
81111e88:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
81111e8c:	000b883a 	mov	r5,zero
81111e90:	e13fff17 	ldw	r4,-4(fp)
81111e94:	11385980 	call	81138598 <alt_up_sd_card_fopen>
}
81111e98:	e037883a 	mov	sp,fp
81111e9c:	dfc00117 	ldw	ra,4(sp)
81111ea0:	df000017 	ldw	fp,0(sp)
81111ea4:	dec00204 	addi	sp,sp,8
81111ea8:	f800283a 	ret

81111eac <siCloseFile>:

bool siCloseFile( short int file_handle ) {
81111eac:	defffd04 	addi	sp,sp,-12
81111eb0:	de00012e 	bgeu	sp,et,81111eb8 <siCloseFile+0xc>
81111eb4:	003b68fa 	trap	3
81111eb8:	dfc00215 	stw	ra,8(sp)
81111ebc:	df000115 	stw	fp,4(sp)
81111ec0:	df000104 	addi	fp,sp,4
81111ec4:	2005883a 	mov	r2,r4
81111ec8:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
81111ecc:	e0bfff0f 	ldh	r2,-4(fp)
81111ed0:	1009883a 	mov	r4,r2
81111ed4:	11393e40 	call	811393e4 <alt_up_sd_card_fclose>
}
81111ed8:	e037883a 	mov	sp,fp
81111edc:	dfc00117 	ldw	ra,4(sp)
81111ee0:	df000017 	ldw	fp,0(sp)
81111ee4:	dec00204 	addi	sp,sp,8
81111ee8:	f800283a 	ret

81111eec <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
81111eec:	defffd04 	addi	sp,sp,-12
81111ef0:	de00012e 	bgeu	sp,et,81111ef8 <cGetNextChar+0xc>
81111ef4:	003b68fa 	trap	3
81111ef8:	dfc00215 	stw	ra,8(sp)
81111efc:	df000115 	stw	fp,4(sp)
81111f00:	df000104 	addi	fp,sp,4
81111f04:	2005883a 	mov	r2,r4
81111f08:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
81111f0c:	e0bfff0f 	ldh	r2,-4(fp)
81111f10:	1009883a 	mov	r4,r2
81111f14:	1138a3c0 	call	81138a3c <alt_up_sd_card_read>
}
81111f18:	e037883a 	mov	sp,fp
81111f1c:	dfc00117 	ldw	ra,4(sp)
81111f20:	df000017 	ldw	fp,0(sp)
81111f24:	dec00204 	addi	sp,sp,8
81111f28:	f800283a 	ret

81111f2c <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
81111f2c:	deffff04 	addi	sp,sp,-4
81111f30:	de00012e 	bgeu	sp,et,81111f38 <bTestSimucamCriticalHW+0xc>
81111f34:	003b68fa 	trap	3
81111f38:	df000015 	stw	fp,0(sp)
81111f3c:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
81111f40:	00800044 	movi	r2,1
}
81111f44:	e037883a 	mov	sp,fp
81111f48:	df000017 	ldw	fp,0(sp)
81111f4c:	dec00104 	addi	sp,sp,4
81111f50:	f800283a 	ret

81111f54 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
81111f54:	defffc04 	addi	sp,sp,-16
81111f58:	de00012e 	bgeu	sp,et,81111f60 <_reg_write+0xc>
81111f5c:	003b68fa 	trap	3
81111f60:	df000315 	stw	fp,12(sp)
81111f64:	df000304 	addi	fp,sp,12
81111f68:	e13ffd15 	stw	r4,-12(fp)
81111f6c:	e17ffe15 	stw	r5,-8(fp)
81111f70:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
81111f74:	e0bffe17 	ldw	r2,-8(fp)
81111f78:	1085883a 	add	r2,r2,r2
81111f7c:	1085883a 	add	r2,r2,r2
81111f80:	1007883a 	mov	r3,r2
81111f84:	e0bffd17 	ldw	r2,-12(fp)
81111f88:	1885883a 	add	r2,r3,r2
81111f8c:	1007883a 	mov	r3,r2
81111f90:	e0bfff17 	ldw	r2,-4(fp)
81111f94:	18800035 	stwio	r2,0(r3)
	return 1;
81111f98:	00800044 	movi	r2,1

}
81111f9c:	e037883a 	mov	sp,fp
81111fa0:	df000017 	ldw	fp,0(sp)
81111fa4:	dec00104 	addi	sp,sp,4
81111fa8:	f800283a 	ret

81111fac <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
81111fac:	defffc04 	addi	sp,sp,-16
81111fb0:	de00012e 	bgeu	sp,et,81111fb8 <_reg_read+0xc>
81111fb4:	003b68fa 	trap	3
81111fb8:	df000315 	stw	fp,12(sp)
81111fbc:	df000304 	addi	fp,sp,12
81111fc0:	e13ffd15 	stw	r4,-12(fp)
81111fc4:	e17ffe15 	stw	r5,-8(fp)
81111fc8:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
81111fcc:	e0bffe17 	ldw	r2,-8(fp)
81111fd0:	1085883a 	add	r2,r2,r2
81111fd4:	1085883a 	add	r2,r2,r2
81111fd8:	1007883a 	mov	r3,r2
81111fdc:	e0bffd17 	ldw	r2,-12(fp)
81111fe0:	1885883a 	add	r2,r3,r2
81111fe4:	10c00037 	ldwio	r3,0(r2)
81111fe8:	e0bfff17 	ldw	r2,-4(fp)
81111fec:	10c00015 	stw	r3,0(r2)
	return 1;
81111ff0:	00800044 	movi	r2,1

}
81111ff4:	e037883a 	mov	sp,fp
81111ff8:	df000017 	ldw	fp,0(sp)
81111ffc:	dec00104 	addi	sp,sp,4
81112000:	f800283a 	ret

81112004 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
81112004:	defffa04 	addi	sp,sp,-24
81112008:	de00012e 	bgeu	sp,et,81112010 <_print_codec_status+0xc>
8111200c:	003b68fa 	trap	3
81112010:	dfc00515 	stw	ra,20(sp)
81112014:	df000415 	stw	fp,16(sp)
81112018:	df000404 	addi	fp,sp,16
8111201c:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
81112020:	e0bfff17 	ldw	r2,-4(fp)
81112024:	1005d1ba 	srai	r2,r2,6
81112028:	1080004c 	andi	r2,r2,1
8111202c:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
81112030:	e0bfff17 	ldw	r2,-4(fp)
81112034:	1005d17a 	srai	r2,r2,5
81112038:	1080004c 	andi	r2,r2,1
8111203c:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
81112040:	e0bfff17 	ldw	r2,-4(fp)
81112044:	1005d13a 	srai	r2,r2,4
81112048:	1080004c 	andi	r2,r2,1
8111204c:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
81112050:	00e04534 	movhi	r3,33044
81112054:	18d35404 	addi	r3,r3,19792
81112058:	00a04534 	movhi	r2,33044
8111205c:	10879d04 	addi	r2,r2,7796
81112060:	1009883a 	mov	r4,r2
81112064:	008005c4 	movi	r2,23
81112068:	100d883a 	mov	r6,r2
8111206c:	200b883a 	mov	r5,r4
81112070:	1809883a 	mov	r4,r3
81112074:	1114a700 	call	81114a70 <memcpy>
	debug(fp, cDebugBuffer);
81112078:	d0a05017 	ldw	r2,-32448(gp)
8111207c:	01604534 	movhi	r5,33044
81112080:	29535404 	addi	r5,r5,19792
81112084:	1009883a 	mov	r4,r2
81112088:	11139c00 	call	811139c0 <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
8111208c:	e0bffc17 	ldw	r2,-16(fp)
81112090:	10800058 	cmpnei	r2,r2,1
81112094:	1000031e 	bne	r2,zero,811120a4 <_print_codec_status+0xa0>
81112098:	00a04534 	movhi	r2,33044
8111209c:	1087a304 	addi	r2,r2,7820
811120a0:	00000206 	br	811120ac <_print_codec_status+0xa8>
811120a4:	00a04534 	movhi	r2,33044
811120a8:	1087a404 	addi	r2,r2,7824
811120ac:	100d883a 	mov	r6,r2
811120b0:	01604534 	movhi	r5,33044
811120b4:	2947a504 	addi	r5,r5,7828
811120b8:	01204534 	movhi	r4,33044
811120bc:	21135404 	addi	r4,r4,19792
811120c0:	11153700 	call	81115370 <sprintf>
	debug(fp, cDebugBuffer);
811120c4:	d0a05017 	ldw	r2,-32448(gp)
811120c8:	01604534 	movhi	r5,33044
811120cc:	29535404 	addi	r5,r5,19792
811120d0:	1009883a 	mov	r4,r2
811120d4:	11139c00 	call	811139c0 <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
811120d8:	e0bffd17 	ldw	r2,-12(fp)
811120dc:	10800058 	cmpnei	r2,r2,1
811120e0:	1000031e 	bne	r2,zero,811120f0 <_print_codec_status+0xec>
811120e4:	00a04534 	movhi	r2,33044
811120e8:	1087a304 	addi	r2,r2,7820
811120ec:	00000206 	br	811120f8 <_print_codec_status+0xf4>
811120f0:	00a04534 	movhi	r2,33044
811120f4:	1087a404 	addi	r2,r2,7824
811120f8:	100d883a 	mov	r6,r2
811120fc:	01604534 	movhi	r5,33044
81112100:	2947ab04 	addi	r5,r5,7852
81112104:	01204534 	movhi	r4,33044
81112108:	21135404 	addi	r4,r4,19792
8111210c:	11153700 	call	81115370 <sprintf>
	debug(fp, cDebugBuffer);
81112110:	d0a05017 	ldw	r2,-32448(gp)
81112114:	01604534 	movhi	r5,33044
81112118:	29535404 	addi	r5,r5,19792
8111211c:	1009883a 	mov	r4,r2
81112120:	11139c00 	call	811139c0 <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
81112124:	e0bffe17 	ldw	r2,-8(fp)
81112128:	10800058 	cmpnei	r2,r2,1
8111212c:	1000031e 	bne	r2,zero,8111213c <_print_codec_status+0x138>
81112130:	00a04534 	movhi	r2,33044
81112134:	1087a304 	addi	r2,r2,7820
81112138:	00000206 	br	81112144 <_print_codec_status+0x140>
8111213c:	00a04534 	movhi	r2,33044
81112140:	1087a404 	addi	r2,r2,7824
81112144:	100d883a 	mov	r6,r2
81112148:	01604534 	movhi	r5,33044
8111214c:	2947b104 	addi	r5,r5,7876
81112150:	01204534 	movhi	r4,33044
81112154:	21135404 	addi	r4,r4,19792
81112158:	11153700 	call	81115370 <sprintf>
	debug(fp, cDebugBuffer);
8111215c:	d0a05017 	ldw	r2,-32448(gp)
81112160:	01604534 	movhi	r5,33044
81112164:	29535404 	addi	r5,r5,19792
81112168:	1009883a 	mov	r4,r2
8111216c:	11139c00 	call	811139c0 <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
81112170:	00a04534 	movhi	r2,33044
81112174:	10935404 	addi	r2,r2,19792
81112178:	00c00b44 	movi	r3,45
8111217c:	10c00005 	stb	r3,0(r2)
81112180:	00c00b44 	movi	r3,45
81112184:	10c00045 	stb	r3,1(r2)
81112188:	00c00b44 	movi	r3,45
8111218c:	10c00085 	stb	r3,2(r2)
81112190:	00c00b44 	movi	r3,45
81112194:	10c000c5 	stb	r3,3(r2)
81112198:	00c00b44 	movi	r3,45
8111219c:	10c00105 	stb	r3,4(r2)
811121a0:	00c00b44 	movi	r3,45
811121a4:	10c00145 	stb	r3,5(r2)
811121a8:	00c00b44 	movi	r3,45
811121ac:	10c00185 	stb	r3,6(r2)
811121b0:	00c00b44 	movi	r3,45
811121b4:	10c001c5 	stb	r3,7(r2)
811121b8:	00c00804 	movi	r3,32
811121bc:	10c00205 	stb	r3,8(r2)
811121c0:	00c00804 	movi	r3,32
811121c4:	10c00245 	stb	r3,9(r2)
811121c8:	00c00284 	movi	r3,10
811121cc:	10c00285 	stb	r3,10(r2)
811121d0:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
811121d4:	d0a05017 	ldw	r2,-32448(gp)
811121d8:	01604534 	movhi	r5,33044
811121dc:	29535404 	addi	r5,r5,19792
811121e0:	1009883a 	mov	r4,r2
811121e4:	11139c00 	call	811139c0 <fprintf>
#endif
}
811121e8:	0001883a 	nop
811121ec:	e037883a 	mov	sp,fp
811121f0:	dfc00117 	ldw	ra,4(sp)
811121f4:	df000017 	ldw	fp,0(sp)
811121f8:	dec00204 	addi	sp,sp,8
811121fc:	f800283a 	ret

81112200 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
81112200:	defffb04 	addi	sp,sp,-20
81112204:	de00012e 	bgeu	sp,et,8111220c <_split_codec_status+0xc>
81112208:	003b68fa 	trap	3
8111220c:	df000415 	stw	fp,16(sp)
81112210:	df000404 	addi	fp,sp,16
81112214:	e13ffc15 	stw	r4,-16(fp)
81112218:	e17ffd15 	stw	r5,-12(fp)
8111221c:	e1bffe15 	stw	r6,-8(fp)
81112220:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
81112224:	e0bffc17 	ldw	r2,-16(fp)
81112228:	1005d1ba 	srai	r2,r2,6
8111222c:	10c0004c 	andi	r3,r2,1
81112230:	e0bffd17 	ldw	r2,-12(fp)
81112234:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
81112238:	e0bffc17 	ldw	r2,-16(fp)
8111223c:	1005d17a 	srai	r2,r2,5
81112240:	10c0004c 	andi	r3,r2,1
81112244:	e0bffe17 	ldw	r2,-8(fp)
81112248:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8111224c:	e0bffc17 	ldw	r2,-16(fp)
81112250:	1005d13a 	srai	r2,r2,4
81112254:	10c0004c 	andi	r3,r2,1
81112258:	e0bfff17 	ldw	r2,-4(fp)
8111225c:	10c00015 	stw	r3,0(r2)
}
81112260:	0001883a 	nop
81112264:	e037883a 	mov	sp,fp
81112268:	df000017 	ldw	fp,0(sp)
8111226c:	dec00104 	addi	sp,sp,4
81112270:	f800283a 	ret

81112274 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
81112274:	defffc04 	addi	sp,sp,-16
81112278:	de00012e 	bgeu	sp,et,81112280 <aatoh+0xc>
8111227c:	003b68fa 	trap	3
81112280:	df000315 	stw	fp,12(sp)
81112284:	df000304 	addi	fp,sp,12
81112288:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
8111228c:	e0bfff17 	ldw	r2,-4(fp)
81112290:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
81112294:	e0bffd17 	ldw	r2,-12(fp)
81112298:	10c00003 	ldbu	r3,0(r2)
8111229c:	e0bffd17 	ldw	r2,-12(fp)
811122a0:	10800003 	ldbu	r2,0(r2)
811122a4:	10803fcc 	andi	r2,r2,255
811122a8:	10800eb0 	cmpltui	r2,r2,58
811122ac:	1000021e 	bne	r2,zero,811122b8 <aatoh+0x44>
811122b0:	00800dc4 	movi	r2,55
811122b4:	00000106 	br	811122bc <aatoh+0x48>
811122b8:	00800c04 	movi	r2,48
811122bc:	1885c83a 	sub	r2,r3,r2
811122c0:	1004913a 	slli	r2,r2,4
811122c4:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
811122c8:	e0bffd17 	ldw	r2,-12(fp)
811122cc:	10800044 	addi	r2,r2,1
811122d0:	10c00003 	ldbu	r3,0(r2)
811122d4:	e0bffd17 	ldw	r2,-12(fp)
811122d8:	10800044 	addi	r2,r2,1
811122dc:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
811122e0:	10803fcc 	andi	r2,r2,255
811122e4:	10800eb0 	cmpltui	r2,r2,58
811122e8:	1000021e 	bne	r2,zero,811122f4 <aatoh+0x80>
811122ec:	00800dc4 	movi	r2,55
811122f0:	00000106 	br	811122f8 <aatoh+0x84>
811122f4:	00800c04 	movi	r2,48
811122f8:	1885c83a 	sub	r2,r3,r2
811122fc:	2085883a 	add	r2,r4,r2
81112300:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
81112304:	e0bffe03 	ldbu	r2,-8(fp)
}
81112308:	e037883a 	mov	sp,fp
8111230c:	df000017 	ldw	fp,0(sp)
81112310:	dec00104 	addi	sp,sp,4
81112314:	f800283a 	ret

81112318 <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
81112318:	defffd04 	addi	sp,sp,-12
8111231c:	de00012e 	bgeu	sp,et,81112324 <Verif_Error+0xc>
81112320:	003b68fa 	trap	3
81112324:	dfc00215 	stw	ra,8(sp)
81112328:	df000115 	stw	fp,4(sp)
8111232c:	df000104 	addi	fp,sp,4
81112330:	2005883a 	mov	r2,r4
81112334:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
81112338:	e0bfff03 	ldbu	r2,-4(fp)
8111233c:	1000091e 	bne	r2,zero,81112364 <Verif_Error+0x4c>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
81112340:	d0a05017 	ldw	r2,-32448(gp)
81112344:	100f883a 	mov	r7,r2
81112348:	018001c4 	movi	r6,7
8111234c:	01400044 	movi	r5,1
81112350:	01204534 	movhi	r4,33044
81112354:	2107b704 	addi	r4,r4,7900
81112358:	111405c0 	call	8111405c <fwrite>
#endif
		return 0;
8111235c:	0005883a 	mov	r2,zero
81112360:	00000106 	br	81112368 <Verif_Error+0x50>
	} else
		return 1;
81112364:	00800044 	movi	r2,1
}
81112368:	e037883a 	mov	sp,fp
8111236c:	dfc00117 	ldw	ra,4(sp)
81112370:	df000017 	ldw	fp,0(sp)
81112374:	dec00204 	addi	sp,sp,8
81112378:	f800283a 	ret

8111237c <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
8111237c:	defffe04 	addi	sp,sp,-8
81112380:	de00012e 	bgeu	sp,et,81112388 <toInt+0xc>
81112384:	003b68fa 	trap	3
81112388:	df000115 	stw	fp,4(sp)
8111238c:	df000104 	addi	fp,sp,4
81112390:	2005883a 	mov	r2,r4
81112394:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
81112398:	e0bfff03 	ldbu	r2,-4(fp)
8111239c:	10bff404 	addi	r2,r2,-48
}
811123a0:	e037883a 	mov	sp,fp
811123a4:	df000017 	ldw	fp,0(sp)
811123a8:	dec00104 	addi	sp,sp,4
811123ac:	f800283a 	ret

811123b0 <__divsf3>:
811123b0:	defff504 	addi	sp,sp,-44
811123b4:	200cd5fa 	srli	r6,r4,23
811123b8:	de00012e 	bgeu	sp,et,811123c0 <__divsf3+0x10>
811123bc:	003b68fa 	trap	3
811123c0:	dcc00415 	stw	r19,16(sp)
811123c4:	2026d7fa 	srli	r19,r4,31
811123c8:	00c02034 	movhi	r3,128
811123cc:	dd800715 	stw	r22,28(sp)
811123d0:	dd000515 	stw	r20,20(sp)
811123d4:	dc800315 	stw	r18,12(sp)
811123d8:	18ffffc4 	addi	r3,r3,-1
811123dc:	dfc00a15 	stw	ra,40(sp)
811123e0:	df000915 	stw	fp,36(sp)
811123e4:	ddc00815 	stw	r23,32(sp)
811123e8:	dd400615 	stw	r21,24(sp)
811123ec:	dc400215 	stw	r17,8(sp)
811123f0:	dc000115 	stw	r16,4(sp)
811123f4:	35003fcc 	andi	r20,r6,255
811123f8:	1924703a 	and	r18,r3,r4
811123fc:	9d803fcc 	andi	r22,r19,255
81112400:	a0005226 	beq	r20,zero,8111254c <__divsf3+0x19c>
81112404:	00803fc4 	movi	r2,255
81112408:	a0802e26 	beq	r20,r2,811124c4 <__divsf3+0x114>
8111240c:	91002034 	orhi	r4,r18,128
81112410:	202490fa 	slli	r18,r4,3
81112414:	a53fe044 	addi	r20,r20,-127
81112418:	0021883a 	mov	r16,zero
8111241c:	002f883a 	mov	r23,zero
81112420:	280cd5fa 	srli	r6,r5,23
81112424:	282ad7fa 	srli	r21,r5,31
81112428:	00c02034 	movhi	r3,128
8111242c:	18ffffc4 	addi	r3,r3,-1
81112430:	31803fcc 	andi	r6,r6,255
81112434:	1962703a 	and	r17,r3,r5
81112438:	af003fcc 	andi	fp,r21,255
8111243c:	30004a26 	beq	r6,zero,81112568 <__divsf3+0x1b8>
81112440:	00803fc4 	movi	r2,255
81112444:	30804526 	beq	r6,r2,8111255c <__divsf3+0x1ac>
81112448:	89402034 	orhi	r5,r17,128
8111244c:	282290fa 	slli	r17,r5,3
81112450:	31bfe044 	addi	r6,r6,-127
81112454:	000b883a 	mov	r5,zero
81112458:	2c20b03a 	or	r16,r5,r16
8111245c:	802090ba 	slli	r16,r16,2
81112460:	00a04474 	movhi	r2,33041
81112464:	10892104 	addi	r2,r2,9348
81112468:	80a1883a 	add	r16,r16,r2
8111246c:	81000017 	ldw	r4,0(r16)
81112470:	9d46f03a 	xor	r3,r19,r21
81112474:	180f883a 	mov	r7,r3
81112478:	18803fcc 	andi	r2,r3,255
8111247c:	a18dc83a 	sub	r6,r20,r6
81112480:	2000683a 	jmp	r4
81112484:	81112668 	cmpgeui	r4,r16,17561
81112488:	811124ec 	andhi	r4,r16,17555
8111248c:	8111265c 	xori	r4,r16,17561
81112490:	811124d8 	cmpnei	r4,r16,17555
81112494:	8111265c 	xori	r4,r16,17561
81112498:	81112634 	orhi	r4,r16,17560
8111249c:	8111265c 	xori	r4,r16,17561
811124a0:	811124d8 	cmpnei	r4,r16,17555
811124a4:	811124ec 	andhi	r4,r16,17555
811124a8:	811124ec 	andhi	r4,r16,17555
811124ac:	81112634 	orhi	r4,r16,17560
811124b0:	811124d8 	cmpnei	r4,r16,17555
811124b4:	81112748 	cmpgei	r4,r16,17565
811124b8:	81112748 	cmpgei	r4,r16,17565
811124bc:	81112748 	cmpgei	r4,r16,17565
811124c0:	811126fc 	xorhi	r4,r16,17563
811124c4:	9000581e 	bne	r18,zero,81112628 <__divsf3+0x278>
811124c8:	04000204 	movi	r16,8
811124cc:	05c00084 	movi	r23,2
811124d0:	003fd306 	br	81112420 <__reset+0xfb0f2420>
811124d4:	0023883a 	mov	r17,zero
811124d8:	e02d883a 	mov	r22,fp
811124dc:	282f883a 	mov	r23,r5
811124e0:	00800084 	movi	r2,2
811124e4:	b8808f1e 	bne	r23,r2,81112724 <__divsf3+0x374>
811124e8:	b005883a 	mov	r2,r22
811124ec:	11c0004c 	andi	r7,r2,1
811124f0:	013fffc4 	movi	r4,-1
811124f4:	000d883a 	mov	r6,zero
811124f8:	21003fcc 	andi	r4,r4,255
811124fc:	200895fa 	slli	r4,r4,23
81112500:	38803fcc 	andi	r2,r7,255
81112504:	00c02034 	movhi	r3,128
81112508:	100497fa 	slli	r2,r2,31
8111250c:	18ffffc4 	addi	r3,r3,-1
81112510:	30c6703a 	and	r3,r6,r3
81112514:	1906b03a 	or	r3,r3,r4
81112518:	1884b03a 	or	r2,r3,r2
8111251c:	dfc00a17 	ldw	ra,40(sp)
81112520:	df000917 	ldw	fp,36(sp)
81112524:	ddc00817 	ldw	r23,32(sp)
81112528:	dd800717 	ldw	r22,28(sp)
8111252c:	dd400617 	ldw	r21,24(sp)
81112530:	dd000517 	ldw	r20,20(sp)
81112534:	dcc00417 	ldw	r19,16(sp)
81112538:	dc800317 	ldw	r18,12(sp)
8111253c:	dc400217 	ldw	r17,8(sp)
81112540:	dc000117 	ldw	r16,4(sp)
81112544:	dec00b04 	addi	sp,sp,44
81112548:	f800283a 	ret
8111254c:	90002b1e 	bne	r18,zero,811125fc <__divsf3+0x24c>
81112550:	04000104 	movi	r16,4
81112554:	05c00044 	movi	r23,1
81112558:	003fb106 	br	81112420 <__reset+0xfb0f2420>
8111255c:	8800251e 	bne	r17,zero,811125f4 <__divsf3+0x244>
81112560:	01400084 	movi	r5,2
81112564:	00000206 	br	81112570 <__divsf3+0x1c0>
81112568:	88001a1e 	bne	r17,zero,811125d4 <__divsf3+0x224>
8111256c:	01400044 	movi	r5,1
81112570:	8160b03a 	or	r16,r16,r5
81112574:	802090ba 	slli	r16,r16,2
81112578:	00e04474 	movhi	r3,33041
8111257c:	18c96504 	addi	r3,r3,9620
81112580:	80e1883a 	add	r16,r16,r3
81112584:	80c00017 	ldw	r3,0(r16)
81112588:	9d44f03a 	xor	r2,r19,r21
8111258c:	a18dc83a 	sub	r6,r20,r6
81112590:	1800683a 	jmp	r3
81112594:	811124ec 	andhi	r4,r16,17555
81112598:	811124ec 	andhi	r4,r16,17555
8111259c:	81112738 	rdprs	r4,r16,17564
811125a0:	811124d4 	ori	r4,r16,17555
811125a4:	81112738 	rdprs	r4,r16,17564
811125a8:	81112634 	orhi	r4,r16,17560
811125ac:	81112738 	rdprs	r4,r16,17564
811125b0:	811124d4 	ori	r4,r16,17555
811125b4:	811124ec 	andhi	r4,r16,17555
811125b8:	811124ec 	andhi	r4,r16,17555
811125bc:	81112634 	orhi	r4,r16,17560
811125c0:	811124d4 	ori	r4,r16,17555
811125c4:	81112748 	cmpgei	r4,r16,17565
811125c8:	81112748 	cmpgei	r4,r16,17565
811125cc:	81112748 	cmpgei	r4,r16,17565
811125d0:	81112760 	cmpeqi	r4,r16,17565
811125d4:	8809883a 	mov	r4,r17
811125d8:	11138000 	call	81113800 <__clzsi2>
811125dc:	10fffec4 	addi	r3,r2,-5
811125e0:	10801d84 	addi	r2,r2,118
811125e4:	88e2983a 	sll	r17,r17,r3
811125e8:	008dc83a 	sub	r6,zero,r2
811125ec:	000b883a 	mov	r5,zero
811125f0:	003f9906 	br	81112458 <__reset+0xfb0f2458>
811125f4:	014000c4 	movi	r5,3
811125f8:	003f9706 	br	81112458 <__reset+0xfb0f2458>
811125fc:	9009883a 	mov	r4,r18
81112600:	d9400015 	stw	r5,0(sp)
81112604:	11138000 	call	81113800 <__clzsi2>
81112608:	10fffec4 	addi	r3,r2,-5
8111260c:	11801d84 	addi	r6,r2,118
81112610:	90e4983a 	sll	r18,r18,r3
81112614:	01a9c83a 	sub	r20,zero,r6
81112618:	0021883a 	mov	r16,zero
8111261c:	002f883a 	mov	r23,zero
81112620:	d9400017 	ldw	r5,0(sp)
81112624:	003f7e06 	br	81112420 <__reset+0xfb0f2420>
81112628:	04000304 	movi	r16,12
8111262c:	05c000c4 	movi	r23,3
81112630:	003f7b06 	br	81112420 <__reset+0xfb0f2420>
81112634:	01802034 	movhi	r6,128
81112638:	000f883a 	mov	r7,zero
8111263c:	31bfffc4 	addi	r6,r6,-1
81112640:	013fffc4 	movi	r4,-1
81112644:	003fac06 	br	811124f8 <__reset+0xfb0f24f8>
81112648:	01400044 	movi	r5,1
8111264c:	2909c83a 	sub	r4,r5,r4
81112650:	00c006c4 	movi	r3,27
81112654:	19004b0e 	bge	r3,r4,81112784 <__divsf3+0x3d4>
81112658:	114e703a 	and	r7,r2,r5
8111265c:	0009883a 	mov	r4,zero
81112660:	000d883a 	mov	r6,zero
81112664:	003fa406 	br	811124f8 <__reset+0xfb0f24f8>
81112668:	9006917a 	slli	r3,r18,5
8111266c:	8822917a 	slli	r17,r17,5
81112670:	1c40372e 	bgeu	r3,r17,81112750 <__divsf3+0x3a0>
81112674:	31bfffc4 	addi	r6,r6,-1
81112678:	010006c4 	movi	r4,27
8111267c:	000b883a 	mov	r5,zero
81112680:	180f883a 	mov	r7,r3
81112684:	294b883a 	add	r5,r5,r5
81112688:	18c7883a 	add	r3,r3,r3
8111268c:	38000116 	blt	r7,zero,81112694 <__divsf3+0x2e4>
81112690:	1c400236 	bltu	r3,r17,8111269c <__divsf3+0x2ec>
81112694:	1c47c83a 	sub	r3,r3,r17
81112698:	29400054 	ori	r5,r5,1
8111269c:	213fffc4 	addi	r4,r4,-1
811126a0:	203ff71e 	bne	r4,zero,81112680 <__reset+0xfb0f2680>
811126a4:	1806c03a 	cmpne	r3,r3,zero
811126a8:	1962b03a 	or	r17,r3,r5
811126ac:	31001fc4 	addi	r4,r6,127
811126b0:	013fe50e 	bge	zero,r4,81112648 <__reset+0xfb0f2648>
811126b4:	88c001cc 	andi	r3,r17,7
811126b8:	18000426 	beq	r3,zero,811126cc <__divsf3+0x31c>
811126bc:	88c003cc 	andi	r3,r17,15
811126c0:	01400104 	movi	r5,4
811126c4:	19400126 	beq	r3,r5,811126cc <__divsf3+0x31c>
811126c8:	8963883a 	add	r17,r17,r5
811126cc:	88c2002c 	andhi	r3,r17,2048
811126d0:	18000426 	beq	r3,zero,811126e4 <__divsf3+0x334>
811126d4:	00fe0034 	movhi	r3,63488
811126d8:	18ffffc4 	addi	r3,r3,-1
811126dc:	31002004 	addi	r4,r6,128
811126e0:	88e2703a 	and	r17,r17,r3
811126e4:	00c03f84 	movi	r3,254
811126e8:	193f8016 	blt	r3,r4,811124ec <__reset+0xfb0f24ec>
811126ec:	880c91ba 	slli	r6,r17,6
811126f0:	11c0004c 	andi	r7,r2,1
811126f4:	300cd27a 	srli	r6,r6,9
811126f8:	003f7f06 	br	811124f8 <__reset+0xfb0f24f8>
811126fc:	9080102c 	andhi	r2,r18,64
81112700:	10000226 	beq	r2,zero,8111270c <__divsf3+0x35c>
81112704:	8880102c 	andhi	r2,r17,64
81112708:	10001826 	beq	r2,zero,8111276c <__divsf3+0x3bc>
8111270c:	00802034 	movhi	r2,128
81112710:	91801034 	orhi	r6,r18,64
81112714:	10bfffc4 	addi	r2,r2,-1
81112718:	980f883a 	mov	r7,r19
8111271c:	308c703a 	and	r6,r6,r2
81112720:	003fc706 	br	81112640 <__reset+0xfb0f2640>
81112724:	008000c4 	movi	r2,3
81112728:	b8802d26 	beq	r23,r2,811127e0 <__divsf3+0x430>
8111272c:	00c00044 	movi	r3,1
81112730:	b005883a 	mov	r2,r22
81112734:	b8ffdd1e 	bne	r23,r3,811126ac <__reset+0xfb0f26ac>
81112738:	11c0004c 	andi	r7,r2,1
8111273c:	0009883a 	mov	r4,zero
81112740:	000d883a 	mov	r6,zero
81112744:	003f6c06 	br	811124f8 <__reset+0xfb0f24f8>
81112748:	9023883a 	mov	r17,r18
8111274c:	003f6406 	br	811124e0 <__reset+0xfb0f24e0>
81112750:	1c47c83a 	sub	r3,r3,r17
81112754:	01000684 	movi	r4,26
81112758:	01400044 	movi	r5,1
8111275c:	003fc806 	br	81112680 <__reset+0xfb0f2680>
81112760:	9080102c 	andhi	r2,r18,64
81112764:	103fe926 	beq	r2,zero,8111270c <__reset+0xfb0f270c>
81112768:	0023883a 	mov	r17,zero
8111276c:	00802034 	movhi	r2,128
81112770:	89801034 	orhi	r6,r17,64
81112774:	10bfffc4 	addi	r2,r2,-1
81112778:	a80f883a 	mov	r7,r21
8111277c:	308c703a 	and	r6,r6,r2
81112780:	003faf06 	br	81112640 <__reset+0xfb0f2640>
81112784:	01c00804 	movi	r7,32
81112788:	390fc83a 	sub	r7,r7,r4
8111278c:	89ce983a 	sll	r7,r17,r7
81112790:	890ad83a 	srl	r5,r17,r4
81112794:	380ec03a 	cmpne	r7,r7,zero
81112798:	29cab03a 	or	r5,r5,r7
8111279c:	28c001cc 	andi	r3,r5,7
811127a0:	18000426 	beq	r3,zero,811127b4 <__divsf3+0x404>
811127a4:	28c003cc 	andi	r3,r5,15
811127a8:	01000104 	movi	r4,4
811127ac:	19000126 	beq	r3,r4,811127b4 <__divsf3+0x404>
811127b0:	290b883a 	add	r5,r5,r4
811127b4:	28c1002c 	andhi	r3,r5,1024
811127b8:	18000426 	beq	r3,zero,811127cc <__divsf3+0x41c>
811127bc:	11c0004c 	andi	r7,r2,1
811127c0:	01000044 	movi	r4,1
811127c4:	000d883a 	mov	r6,zero
811127c8:	003f4b06 	br	811124f8 <__reset+0xfb0f24f8>
811127cc:	280a91ba 	slli	r5,r5,6
811127d0:	11c0004c 	andi	r7,r2,1
811127d4:	0009883a 	mov	r4,zero
811127d8:	280cd27a 	srli	r6,r5,9
811127dc:	003f4606 	br	811124f8 <__reset+0xfb0f24f8>
811127e0:	00802034 	movhi	r2,128
811127e4:	89801034 	orhi	r6,r17,64
811127e8:	10bfffc4 	addi	r2,r2,-1
811127ec:	b00f883a 	mov	r7,r22
811127f0:	308c703a 	and	r6,r6,r2
811127f4:	003f9206 	br	81112640 <__reset+0xfb0f2640>

811127f8 <__mulsf3>:
811127f8:	defff504 	addi	sp,sp,-44
811127fc:	de00012e 	bgeu	sp,et,81112804 <__mulsf3+0xc>
81112800:	003b68fa 	trap	3
81112804:	dc000115 	stw	r16,4(sp)
81112808:	2020d5fa 	srli	r16,r4,23
8111280c:	dd400615 	stw	r21,24(sp)
81112810:	202ad7fa 	srli	r21,r4,31
81112814:	dc800315 	stw	r18,12(sp)
81112818:	04802034 	movhi	r18,128
8111281c:	df000915 	stw	fp,36(sp)
81112820:	dd000515 	stw	r20,20(sp)
81112824:	94bfffc4 	addi	r18,r18,-1
81112828:	dfc00a15 	stw	ra,40(sp)
8111282c:	ddc00815 	stw	r23,32(sp)
81112830:	dd800715 	stw	r22,28(sp)
81112834:	dcc00415 	stw	r19,16(sp)
81112838:	dc400215 	stw	r17,8(sp)
8111283c:	84003fcc 	andi	r16,r16,255
81112840:	9124703a 	and	r18,r18,r4
81112844:	a829883a 	mov	r20,r21
81112848:	af003fcc 	andi	fp,r21,255
8111284c:	80005426 	beq	r16,zero,811129a0 <__mulsf3+0x1a8>
81112850:	00803fc4 	movi	r2,255
81112854:	80802f26 	beq	r16,r2,81112914 <__mulsf3+0x11c>
81112858:	91002034 	orhi	r4,r18,128
8111285c:	202490fa 	slli	r18,r4,3
81112860:	843fe044 	addi	r16,r16,-127
81112864:	0023883a 	mov	r17,zero
81112868:	002f883a 	mov	r23,zero
8111286c:	2804d5fa 	srli	r2,r5,23
81112870:	282cd7fa 	srli	r22,r5,31
81112874:	01002034 	movhi	r4,128
81112878:	213fffc4 	addi	r4,r4,-1
8111287c:	10803fcc 	andi	r2,r2,255
81112880:	2166703a 	and	r19,r4,r5
81112884:	b1803fcc 	andi	r6,r22,255
81112888:	10004c26 	beq	r2,zero,811129bc <__mulsf3+0x1c4>
8111288c:	00c03fc4 	movi	r3,255
81112890:	10c04726 	beq	r2,r3,811129b0 <__mulsf3+0x1b8>
81112894:	99002034 	orhi	r4,r19,128
81112898:	202690fa 	slli	r19,r4,3
8111289c:	10bfe044 	addi	r2,r2,-127
811128a0:	0007883a 	mov	r3,zero
811128a4:	80a1883a 	add	r16,r16,r2
811128a8:	010003c4 	movi	r4,15
811128ac:	1c44b03a 	or	r2,r3,r17
811128b0:	b56af03a 	xor	r21,r22,r21
811128b4:	81c00044 	addi	r7,r16,1
811128b8:	20806b36 	bltu	r4,r2,81112a68 <__mulsf3+0x270>
811128bc:	100490ba 	slli	r2,r2,2
811128c0:	01204474 	movhi	r4,33041
811128c4:	210a3504 	addi	r4,r4,10452
811128c8:	1105883a 	add	r2,r2,r4
811128cc:	10800017 	ldw	r2,0(r2)
811128d0:	1000683a 	jmp	r2
811128d4:	81112a68 	cmpgeui	r4,r16,17577
811128d8:	81112928 	cmpgeui	r4,r16,17572
811128dc:	81112928 	cmpgeui	r4,r16,17572
811128e0:	81112924 	muli	r4,r16,17572
811128e4:	81112a4c 	andi	r4,r16,17577
811128e8:	81112a4c 	andi	r4,r16,17577
811128ec:	81112a38 	rdprs	r4,r16,17576
811128f0:	81112924 	muli	r4,r16,17572
811128f4:	81112a4c 	andi	r4,r16,17577
811128f8:	81112a38 	rdprs	r4,r16,17576
811128fc:	81112a4c 	andi	r4,r16,17577
81112900:	81112924 	muli	r4,r16,17572
81112904:	81112a58 	cmpnei	r4,r16,17577
81112908:	81112a58 	cmpnei	r4,r16,17577
8111290c:	81112a58 	cmpnei	r4,r16,17577
81112910:	81112b34 	orhi	r4,r16,17580
81112914:	90003b1e 	bne	r18,zero,81112a04 <__mulsf3+0x20c>
81112918:	04400204 	movi	r17,8
8111291c:	05c00084 	movi	r23,2
81112920:	003fd206 	br	8111286c <__reset+0xfb0f286c>
81112924:	302b883a 	mov	r21,r6
81112928:	00800084 	movi	r2,2
8111292c:	18802626 	beq	r3,r2,811129c8 <__mulsf3+0x1d0>
81112930:	008000c4 	movi	r2,3
81112934:	1880ab26 	beq	r3,r2,81112be4 <__mulsf3+0x3ec>
81112938:	00800044 	movi	r2,1
8111293c:	1880a21e 	bne	r3,r2,81112bc8 <__mulsf3+0x3d0>
81112940:	a829883a 	mov	r20,r21
81112944:	0007883a 	mov	r3,zero
81112948:	0009883a 	mov	r4,zero
8111294c:	18803fcc 	andi	r2,r3,255
81112950:	100695fa 	slli	r3,r2,23
81112954:	a0803fcc 	andi	r2,r20,255
81112958:	100a97fa 	slli	r5,r2,31
8111295c:	00802034 	movhi	r2,128
81112960:	10bfffc4 	addi	r2,r2,-1
81112964:	2084703a 	and	r2,r4,r2
81112968:	10c4b03a 	or	r2,r2,r3
8111296c:	1144b03a 	or	r2,r2,r5
81112970:	dfc00a17 	ldw	ra,40(sp)
81112974:	df000917 	ldw	fp,36(sp)
81112978:	ddc00817 	ldw	r23,32(sp)
8111297c:	dd800717 	ldw	r22,28(sp)
81112980:	dd400617 	ldw	r21,24(sp)
81112984:	dd000517 	ldw	r20,20(sp)
81112988:	dcc00417 	ldw	r19,16(sp)
8111298c:	dc800317 	ldw	r18,12(sp)
81112990:	dc400217 	ldw	r17,8(sp)
81112994:	dc000117 	ldw	r16,4(sp)
81112998:	dec00b04 	addi	sp,sp,44
8111299c:	f800283a 	ret
811129a0:	90000d1e 	bne	r18,zero,811129d8 <__mulsf3+0x1e0>
811129a4:	04400104 	movi	r17,4
811129a8:	05c00044 	movi	r23,1
811129ac:	003faf06 	br	8111286c <__reset+0xfb0f286c>
811129b0:	9806c03a 	cmpne	r3,r19,zero
811129b4:	18c00084 	addi	r3,r3,2
811129b8:	003fba06 	br	811128a4 <__reset+0xfb0f28a4>
811129bc:	9800141e 	bne	r19,zero,81112a10 <__mulsf3+0x218>
811129c0:	00c00044 	movi	r3,1
811129c4:	003fb706 	br	811128a4 <__reset+0xfb0f28a4>
811129c8:	a829883a 	mov	r20,r21
811129cc:	00ffffc4 	movi	r3,-1
811129d0:	0009883a 	mov	r4,zero
811129d4:	003fdd06 	br	8111294c <__reset+0xfb0f294c>
811129d8:	9009883a 	mov	r4,r18
811129dc:	d9400015 	stw	r5,0(sp)
811129e0:	11138000 	call	81113800 <__clzsi2>
811129e4:	10fffec4 	addi	r3,r2,-5
811129e8:	10801d84 	addi	r2,r2,118
811129ec:	90e4983a 	sll	r18,r18,r3
811129f0:	00a1c83a 	sub	r16,zero,r2
811129f4:	0023883a 	mov	r17,zero
811129f8:	002f883a 	mov	r23,zero
811129fc:	d9400017 	ldw	r5,0(sp)
81112a00:	003f9a06 	br	8111286c <__reset+0xfb0f286c>
81112a04:	04400304 	movi	r17,12
81112a08:	05c000c4 	movi	r23,3
81112a0c:	003f9706 	br	8111286c <__reset+0xfb0f286c>
81112a10:	9809883a 	mov	r4,r19
81112a14:	d9800015 	stw	r6,0(sp)
81112a18:	11138000 	call	81113800 <__clzsi2>
81112a1c:	10fffec4 	addi	r3,r2,-5
81112a20:	10801d84 	addi	r2,r2,118
81112a24:	98e6983a 	sll	r19,r19,r3
81112a28:	0085c83a 	sub	r2,zero,r2
81112a2c:	0007883a 	mov	r3,zero
81112a30:	d9800017 	ldw	r6,0(sp)
81112a34:	003f9b06 	br	811128a4 <__reset+0xfb0f28a4>
81112a38:	01002034 	movhi	r4,128
81112a3c:	0029883a 	mov	r20,zero
81112a40:	213fffc4 	addi	r4,r4,-1
81112a44:	00ffffc4 	movi	r3,-1
81112a48:	003fc006 	br	8111294c <__reset+0xfb0f294c>
81112a4c:	9027883a 	mov	r19,r18
81112a50:	b807883a 	mov	r3,r23
81112a54:	003fb406 	br	81112928 <__reset+0xfb0f2928>
81112a58:	9027883a 	mov	r19,r18
81112a5c:	e02b883a 	mov	r21,fp
81112a60:	b807883a 	mov	r3,r23
81112a64:	003fb006 	br	81112928 <__reset+0xfb0f2928>
81112a68:	9004d43a 	srli	r2,r18,16
81112a6c:	9810d43a 	srli	r8,r19,16
81112a70:	94bfffcc 	andi	r18,r18,65535
81112a74:	993fffcc 	andi	r4,r19,65535
81112a78:	910d383a 	mul	r6,r18,r4
81112a7c:	20a7383a 	mul	r19,r4,r2
81112a80:	9225383a 	mul	r18,r18,r8
81112a84:	3006d43a 	srli	r3,r6,16
81112a88:	1211383a 	mul	r8,r2,r8
81112a8c:	94e5883a 	add	r18,r18,r19
81112a90:	1c87883a 	add	r3,r3,r18
81112a94:	1cc0022e 	bgeu	r3,r19,81112aa0 <__mulsf3+0x2a8>
81112a98:	00800074 	movhi	r2,1
81112a9c:	4091883a 	add	r8,r8,r2
81112aa0:	1804943a 	slli	r2,r3,16
81112aa4:	31bfffcc 	andi	r6,r6,65535
81112aa8:	1806d43a 	srli	r3,r3,16
81112aac:	1185883a 	add	r2,r2,r6
81112ab0:	102691ba 	slli	r19,r2,6
81112ab4:	1a07883a 	add	r3,r3,r8
81112ab8:	1004d6ba 	srli	r2,r2,26
81112abc:	180891ba 	slli	r4,r3,6
81112ac0:	9826c03a 	cmpne	r19,r19,zero
81112ac4:	9884b03a 	or	r2,r19,r2
81112ac8:	1126b03a 	or	r19,r2,r4
81112acc:	9882002c 	andhi	r2,r19,2048
81112ad0:	10000426 	beq	r2,zero,81112ae4 <__mulsf3+0x2ec>
81112ad4:	9804d07a 	srli	r2,r19,1
81112ad8:	9900004c 	andi	r4,r19,1
81112adc:	3821883a 	mov	r16,r7
81112ae0:	1126b03a 	or	r19,r2,r4
81112ae4:	80c01fc4 	addi	r3,r16,127
81112ae8:	00c0210e 	bge	zero,r3,81112b70 <__mulsf3+0x378>
81112aec:	988001cc 	andi	r2,r19,7
81112af0:	10000426 	beq	r2,zero,81112b04 <__mulsf3+0x30c>
81112af4:	988003cc 	andi	r2,r19,15
81112af8:	01000104 	movi	r4,4
81112afc:	11000126 	beq	r2,r4,81112b04 <__mulsf3+0x30c>
81112b00:	9927883a 	add	r19,r19,r4
81112b04:	9882002c 	andhi	r2,r19,2048
81112b08:	10000426 	beq	r2,zero,81112b1c <__mulsf3+0x324>
81112b0c:	00be0034 	movhi	r2,63488
81112b10:	10bfffc4 	addi	r2,r2,-1
81112b14:	80c02004 	addi	r3,r16,128
81112b18:	98a6703a 	and	r19,r19,r2
81112b1c:	00803f84 	movi	r2,254
81112b20:	10ffa916 	blt	r2,r3,811129c8 <__reset+0xfb0f29c8>
81112b24:	980891ba 	slli	r4,r19,6
81112b28:	a829883a 	mov	r20,r21
81112b2c:	2008d27a 	srli	r4,r4,9
81112b30:	003f8606 	br	8111294c <__reset+0xfb0f294c>
81112b34:	9080102c 	andhi	r2,r18,64
81112b38:	10000826 	beq	r2,zero,81112b5c <__mulsf3+0x364>
81112b3c:	9880102c 	andhi	r2,r19,64
81112b40:	1000061e 	bne	r2,zero,81112b5c <__mulsf3+0x364>
81112b44:	00802034 	movhi	r2,128
81112b48:	99001034 	orhi	r4,r19,64
81112b4c:	10bfffc4 	addi	r2,r2,-1
81112b50:	b029883a 	mov	r20,r22
81112b54:	2088703a 	and	r4,r4,r2
81112b58:	003fba06 	br	81112a44 <__reset+0xfb0f2a44>
81112b5c:	00802034 	movhi	r2,128
81112b60:	91001034 	orhi	r4,r18,64
81112b64:	10bfffc4 	addi	r2,r2,-1
81112b68:	2088703a 	and	r4,r4,r2
81112b6c:	003fb506 	br	81112a44 <__reset+0xfb0f2a44>
81112b70:	00800044 	movi	r2,1
81112b74:	10c7c83a 	sub	r3,r2,r3
81112b78:	008006c4 	movi	r2,27
81112b7c:	10ff7016 	blt	r2,r3,81112940 <__reset+0xfb0f2940>
81112b80:	00800804 	movi	r2,32
81112b84:	10c5c83a 	sub	r2,r2,r3
81112b88:	9884983a 	sll	r2,r19,r2
81112b8c:	98c6d83a 	srl	r3,r19,r3
81112b90:	1004c03a 	cmpne	r2,r2,zero
81112b94:	1884b03a 	or	r2,r3,r2
81112b98:	10c001cc 	andi	r3,r2,7
81112b9c:	18000426 	beq	r3,zero,81112bb0 <__mulsf3+0x3b8>
81112ba0:	10c003cc 	andi	r3,r2,15
81112ba4:	01000104 	movi	r4,4
81112ba8:	19000126 	beq	r3,r4,81112bb0 <__mulsf3+0x3b8>
81112bac:	1105883a 	add	r2,r2,r4
81112bb0:	10c1002c 	andhi	r3,r2,1024
81112bb4:	18000626 	beq	r3,zero,81112bd0 <__mulsf3+0x3d8>
81112bb8:	a829883a 	mov	r20,r21
81112bbc:	00c00044 	movi	r3,1
81112bc0:	0009883a 	mov	r4,zero
81112bc4:	003f6106 	br	8111294c <__reset+0xfb0f294c>
81112bc8:	3821883a 	mov	r16,r7
81112bcc:	003fc506 	br	81112ae4 <__reset+0xfb0f2ae4>
81112bd0:	100491ba 	slli	r2,r2,6
81112bd4:	a829883a 	mov	r20,r21
81112bd8:	0007883a 	mov	r3,zero
81112bdc:	1008d27a 	srli	r4,r2,9
81112be0:	003f5a06 	br	8111294c <__reset+0xfb0f294c>
81112be4:	00802034 	movhi	r2,128
81112be8:	99001034 	orhi	r4,r19,64
81112bec:	10bfffc4 	addi	r2,r2,-1
81112bf0:	a829883a 	mov	r20,r21
81112bf4:	2088703a 	and	r4,r4,r2
81112bf8:	003f9206 	br	81112a44 <__reset+0xfb0f2a44>

81112bfc <__floatsisf>:
81112bfc:	defffd04 	addi	sp,sp,-12
81112c00:	de00012e 	bgeu	sp,et,81112c08 <__floatsisf+0xc>
81112c04:	003b68fa 	trap	3
81112c08:	dfc00215 	stw	ra,8(sp)
81112c0c:	dc400115 	stw	r17,4(sp)
81112c10:	dc000015 	stw	r16,0(sp)
81112c14:	20003526 	beq	r4,zero,81112cec <__floatsisf+0xf0>
81112c18:	2021883a 	mov	r16,r4
81112c1c:	2022d7fa 	srli	r17,r4,31
81112c20:	20003616 	blt	r4,zero,81112cfc <__floatsisf+0x100>
81112c24:	8009883a 	mov	r4,r16
81112c28:	11138000 	call	81113800 <__clzsi2>
81112c2c:	00c02784 	movi	r3,158
81112c30:	1887c83a 	sub	r3,r3,r2
81112c34:	01002584 	movi	r4,150
81112c38:	20c01416 	blt	r4,r3,81112c8c <__floatsisf+0x90>
81112c3c:	20c9c83a 	sub	r4,r4,r3
81112c40:	8120983a 	sll	r16,r16,r4
81112c44:	00802034 	movhi	r2,128
81112c48:	10bfffc4 	addi	r2,r2,-1
81112c4c:	8809883a 	mov	r4,r17
81112c50:	80a0703a 	and	r16,r16,r2
81112c54:	18803fcc 	andi	r2,r3,255
81112c58:	100695fa 	slli	r3,r2,23
81112c5c:	20803fcc 	andi	r2,r4,255
81112c60:	100897fa 	slli	r4,r2,31
81112c64:	00802034 	movhi	r2,128
81112c68:	10bfffc4 	addi	r2,r2,-1
81112c6c:	8084703a 	and	r2,r16,r2
81112c70:	10c4b03a 	or	r2,r2,r3
81112c74:	1104b03a 	or	r2,r2,r4
81112c78:	dfc00217 	ldw	ra,8(sp)
81112c7c:	dc400117 	ldw	r17,4(sp)
81112c80:	dc000017 	ldw	r16,0(sp)
81112c84:	dec00304 	addi	sp,sp,12
81112c88:	f800283a 	ret
81112c8c:	01002644 	movi	r4,153
81112c90:	20c01c16 	blt	r4,r3,81112d04 <__floatsisf+0x108>
81112c94:	20c9c83a 	sub	r4,r4,r3
81112c98:	8120983a 	sll	r16,r16,r4
81112c9c:	013f0034 	movhi	r4,64512
81112ca0:	213fffc4 	addi	r4,r4,-1
81112ca4:	814001cc 	andi	r5,r16,7
81112ca8:	8108703a 	and	r4,r16,r4
81112cac:	28000426 	beq	r5,zero,81112cc0 <__floatsisf+0xc4>
81112cb0:	840003cc 	andi	r16,r16,15
81112cb4:	01400104 	movi	r5,4
81112cb8:	81400126 	beq	r16,r5,81112cc0 <__floatsisf+0xc4>
81112cbc:	2149883a 	add	r4,r4,r5
81112cc0:	2141002c 	andhi	r5,r4,1024
81112cc4:	28000526 	beq	r5,zero,81112cdc <__floatsisf+0xe0>
81112cc8:	00c027c4 	movi	r3,159
81112ccc:	1887c83a 	sub	r3,r3,r2
81112cd0:	00bf0034 	movhi	r2,64512
81112cd4:	10bfffc4 	addi	r2,r2,-1
81112cd8:	2088703a 	and	r4,r4,r2
81112cdc:	202091ba 	slli	r16,r4,6
81112ce0:	8809883a 	mov	r4,r17
81112ce4:	8020d27a 	srli	r16,r16,9
81112ce8:	003fda06 	br	81112c54 <__reset+0xfb0f2c54>
81112cec:	0009883a 	mov	r4,zero
81112cf0:	0007883a 	mov	r3,zero
81112cf4:	0021883a 	mov	r16,zero
81112cf8:	003fd606 	br	81112c54 <__reset+0xfb0f2c54>
81112cfc:	0121c83a 	sub	r16,zero,r4
81112d00:	003fc806 	br	81112c24 <__reset+0xfb0f2c24>
81112d04:	01002e44 	movi	r4,185
81112d08:	20c9c83a 	sub	r4,r4,r3
81112d0c:	01400144 	movi	r5,5
81112d10:	8108983a 	sll	r4,r16,r4
81112d14:	288bc83a 	sub	r5,r5,r2
81112d18:	8160d83a 	srl	r16,r16,r5
81112d1c:	2008c03a 	cmpne	r4,r4,zero
81112d20:	8120b03a 	or	r16,r16,r4
81112d24:	003fdd06 	br	81112c9c <__reset+0xfb0f2c9c>

81112d28 <__floatunsisf>:
81112d28:	defffe04 	addi	sp,sp,-8
81112d2c:	de00012e 	bgeu	sp,et,81112d34 <__floatunsisf+0xc>
81112d30:	003b68fa 	trap	3
81112d34:	dfc00115 	stw	ra,4(sp)
81112d38:	dc000015 	stw	r16,0(sp)
81112d3c:	20002c26 	beq	r4,zero,81112df0 <__floatunsisf+0xc8>
81112d40:	2021883a 	mov	r16,r4
81112d44:	11138000 	call	81113800 <__clzsi2>
81112d48:	00c02784 	movi	r3,158
81112d4c:	1887c83a 	sub	r3,r3,r2
81112d50:	01002584 	movi	r4,150
81112d54:	20c00f16 	blt	r4,r3,81112d94 <__floatunsisf+0x6c>
81112d58:	20c9c83a 	sub	r4,r4,r3
81112d5c:	8108983a 	sll	r4,r16,r4
81112d60:	00802034 	movhi	r2,128
81112d64:	10bfffc4 	addi	r2,r2,-1
81112d68:	2088703a 	and	r4,r4,r2
81112d6c:	18803fcc 	andi	r2,r3,255
81112d70:	100695fa 	slli	r3,r2,23
81112d74:	00802034 	movhi	r2,128
81112d78:	10bfffc4 	addi	r2,r2,-1
81112d7c:	2084703a 	and	r2,r4,r2
81112d80:	10c4b03a 	or	r2,r2,r3
81112d84:	dfc00117 	ldw	ra,4(sp)
81112d88:	dc000017 	ldw	r16,0(sp)
81112d8c:	dec00204 	addi	sp,sp,8
81112d90:	f800283a 	ret
81112d94:	01002644 	movi	r4,153
81112d98:	20c01816 	blt	r4,r3,81112dfc <__floatunsisf+0xd4>
81112d9c:	20c9c83a 	sub	r4,r4,r3
81112da0:	8108983a 	sll	r4,r16,r4
81112da4:	017f0034 	movhi	r5,64512
81112da8:	297fffc4 	addi	r5,r5,-1
81112dac:	218001cc 	andi	r6,r4,7
81112db0:	214a703a 	and	r5,r4,r5
81112db4:	30000426 	beq	r6,zero,81112dc8 <__floatunsisf+0xa0>
81112db8:	210003cc 	andi	r4,r4,15
81112dbc:	01800104 	movi	r6,4
81112dc0:	21800126 	beq	r4,r6,81112dc8 <__floatunsisf+0xa0>
81112dc4:	298b883a 	add	r5,r5,r6
81112dc8:	2901002c 	andhi	r4,r5,1024
81112dcc:	20000526 	beq	r4,zero,81112de4 <__floatunsisf+0xbc>
81112dd0:	00c027c4 	movi	r3,159
81112dd4:	1887c83a 	sub	r3,r3,r2
81112dd8:	00bf0034 	movhi	r2,64512
81112ddc:	10bfffc4 	addi	r2,r2,-1
81112de0:	288a703a 	and	r5,r5,r2
81112de4:	280891ba 	slli	r4,r5,6
81112de8:	2008d27a 	srli	r4,r4,9
81112dec:	003fdf06 	br	81112d6c <__reset+0xfb0f2d6c>
81112df0:	0007883a 	mov	r3,zero
81112df4:	0009883a 	mov	r4,zero
81112df8:	003fdc06 	br	81112d6c <__reset+0xfb0f2d6c>
81112dfc:	01402e44 	movi	r5,185
81112e00:	28cbc83a 	sub	r5,r5,r3
81112e04:	01000144 	movi	r4,5
81112e08:	2089c83a 	sub	r4,r4,r2
81112e0c:	814a983a 	sll	r5,r16,r5
81112e10:	8108d83a 	srl	r4,r16,r4
81112e14:	2820c03a 	cmpne	r16,r5,zero
81112e18:	2408b03a 	or	r4,r4,r16
81112e1c:	003fe106 	br	81112da4 <__reset+0xfb0f2da4>

81112e20 <__muldf3>:
81112e20:	defff304 	addi	sp,sp,-52
81112e24:	2804d53a 	srli	r2,r5,20
81112e28:	de00012e 	bgeu	sp,et,81112e30 <__muldf3+0x10>
81112e2c:	003b68fa 	trap	3
81112e30:	dd800915 	stw	r22,36(sp)
81112e34:	282cd7fa 	srli	r22,r5,31
81112e38:	dc000315 	stw	r16,12(sp)
81112e3c:	04000434 	movhi	r16,16
81112e40:	dd400815 	stw	r21,32(sp)
81112e44:	dc800515 	stw	r18,20(sp)
81112e48:	843fffc4 	addi	r16,r16,-1
81112e4c:	dfc00c15 	stw	ra,48(sp)
81112e50:	df000b15 	stw	fp,44(sp)
81112e54:	ddc00a15 	stw	r23,40(sp)
81112e58:	dd000715 	stw	r20,28(sp)
81112e5c:	dcc00615 	stw	r19,24(sp)
81112e60:	dc400415 	stw	r17,16(sp)
81112e64:	1481ffcc 	andi	r18,r2,2047
81112e68:	2c20703a 	and	r16,r5,r16
81112e6c:	b02b883a 	mov	r21,r22
81112e70:	b2403fcc 	andi	r9,r22,255
81112e74:	90006026 	beq	r18,zero,81112ff8 <__muldf3+0x1d8>
81112e78:	0081ffc4 	movi	r2,2047
81112e7c:	2029883a 	mov	r20,r4
81112e80:	90803626 	beq	r18,r2,81112f5c <__muldf3+0x13c>
81112e84:	80800434 	orhi	r2,r16,16
81112e88:	100490fa 	slli	r2,r2,3
81112e8c:	2020d77a 	srli	r16,r4,29
81112e90:	202890fa 	slli	r20,r4,3
81112e94:	94bf0044 	addi	r18,r18,-1023
81112e98:	80a0b03a 	or	r16,r16,r2
81112e9c:	0027883a 	mov	r19,zero
81112ea0:	0039883a 	mov	fp,zero
81112ea4:	3804d53a 	srli	r2,r7,20
81112ea8:	382ed7fa 	srli	r23,r7,31
81112eac:	04400434 	movhi	r17,16
81112eb0:	8c7fffc4 	addi	r17,r17,-1
81112eb4:	1081ffcc 	andi	r2,r2,2047
81112eb8:	3011883a 	mov	r8,r6
81112ebc:	3c62703a 	and	r17,r7,r17
81112ec0:	ba803fcc 	andi	r10,r23,255
81112ec4:	10006d26 	beq	r2,zero,8111307c <__muldf3+0x25c>
81112ec8:	00c1ffc4 	movi	r3,2047
81112ecc:	10c06526 	beq	r2,r3,81113064 <__muldf3+0x244>
81112ed0:	88c00434 	orhi	r3,r17,16
81112ed4:	180690fa 	slli	r3,r3,3
81112ed8:	3022d77a 	srli	r17,r6,29
81112edc:	301090fa 	slli	r8,r6,3
81112ee0:	10bf0044 	addi	r2,r2,-1023
81112ee4:	88e2b03a 	or	r17,r17,r3
81112ee8:	000b883a 	mov	r5,zero
81112eec:	9085883a 	add	r2,r18,r2
81112ef0:	2cc8b03a 	or	r4,r5,r19
81112ef4:	00c003c4 	movi	r3,15
81112ef8:	bdacf03a 	xor	r22,r23,r22
81112efc:	12c00044 	addi	r11,r2,1
81112f00:	19009936 	bltu	r3,r4,81113168 <__muldf3+0x348>
81112f04:	200890ba 	slli	r4,r4,2
81112f08:	00e04474 	movhi	r3,33041
81112f0c:	18cbc704 	addi	r3,r3,12060
81112f10:	20c9883a 	add	r4,r4,r3
81112f14:	20c00017 	ldw	r3,0(r4)
81112f18:	1800683a 	jmp	r3
81112f1c:	81113168 	cmpgeui	r4,r16,17605
81112f20:	81112f7c 	xorhi	r4,r16,17597
81112f24:	81112f7c 	xorhi	r4,r16,17597
81112f28:	81112f78 	rdprs	r4,r16,17597
81112f2c:	81113144 	addi	r4,r16,17605
81112f30:	81113144 	addi	r4,r16,17605
81112f34:	8111312c 	andhi	r4,r16,17604
81112f38:	81112f78 	rdprs	r4,r16,17597
81112f3c:	81113144 	addi	r4,r16,17605
81112f40:	8111312c 	andhi	r4,r16,17604
81112f44:	81113144 	addi	r4,r16,17605
81112f48:	81112f78 	rdprs	r4,r16,17597
81112f4c:	81113154 	ori	r4,r16,17605
81112f50:	81113154 	ori	r4,r16,17605
81112f54:	81113154 	ori	r4,r16,17605
81112f58:	81113370 	cmpltui	r4,r16,17613
81112f5c:	2404b03a 	or	r2,r4,r16
81112f60:	10006f1e 	bne	r2,zero,81113120 <__muldf3+0x300>
81112f64:	04c00204 	movi	r19,8
81112f68:	0021883a 	mov	r16,zero
81112f6c:	0029883a 	mov	r20,zero
81112f70:	07000084 	movi	fp,2
81112f74:	003fcb06 	br	81112ea4 <__reset+0xfb0f2ea4>
81112f78:	502d883a 	mov	r22,r10
81112f7c:	00800084 	movi	r2,2
81112f80:	28805726 	beq	r5,r2,811130e0 <__muldf3+0x2c0>
81112f84:	008000c4 	movi	r2,3
81112f88:	28816626 	beq	r5,r2,81113524 <__muldf3+0x704>
81112f8c:	00800044 	movi	r2,1
81112f90:	2881411e 	bne	r5,r2,81113498 <__muldf3+0x678>
81112f94:	b02b883a 	mov	r21,r22
81112f98:	0005883a 	mov	r2,zero
81112f9c:	000b883a 	mov	r5,zero
81112fa0:	0029883a 	mov	r20,zero
81112fa4:	1004953a 	slli	r2,r2,20
81112fa8:	a8c03fcc 	andi	r3,r21,255
81112fac:	04400434 	movhi	r17,16
81112fb0:	8c7fffc4 	addi	r17,r17,-1
81112fb4:	180697fa 	slli	r3,r3,31
81112fb8:	2c4a703a 	and	r5,r5,r17
81112fbc:	288ab03a 	or	r5,r5,r2
81112fc0:	28c6b03a 	or	r3,r5,r3
81112fc4:	a005883a 	mov	r2,r20
81112fc8:	dfc00c17 	ldw	ra,48(sp)
81112fcc:	df000b17 	ldw	fp,44(sp)
81112fd0:	ddc00a17 	ldw	r23,40(sp)
81112fd4:	dd800917 	ldw	r22,36(sp)
81112fd8:	dd400817 	ldw	r21,32(sp)
81112fdc:	dd000717 	ldw	r20,28(sp)
81112fe0:	dcc00617 	ldw	r19,24(sp)
81112fe4:	dc800517 	ldw	r18,20(sp)
81112fe8:	dc400417 	ldw	r17,16(sp)
81112fec:	dc000317 	ldw	r16,12(sp)
81112ff0:	dec00d04 	addi	sp,sp,52
81112ff4:	f800283a 	ret
81112ff8:	2404b03a 	or	r2,r4,r16
81112ffc:	2027883a 	mov	r19,r4
81113000:	10004226 	beq	r2,zero,8111310c <__muldf3+0x2ec>
81113004:	8000fc26 	beq	r16,zero,811133f8 <__muldf3+0x5d8>
81113008:	8009883a 	mov	r4,r16
8111300c:	d9800215 	stw	r6,8(sp)
81113010:	d9c00015 	stw	r7,0(sp)
81113014:	da400115 	stw	r9,4(sp)
81113018:	11138000 	call	81113800 <__clzsi2>
8111301c:	d9800217 	ldw	r6,8(sp)
81113020:	d9c00017 	ldw	r7,0(sp)
81113024:	da400117 	ldw	r9,4(sp)
81113028:	113ffd44 	addi	r4,r2,-11
8111302c:	00c00704 	movi	r3,28
81113030:	1900ed16 	blt	r3,r4,811133e8 <__muldf3+0x5c8>
81113034:	00c00744 	movi	r3,29
81113038:	147ffe04 	addi	r17,r2,-8
8111303c:	1907c83a 	sub	r3,r3,r4
81113040:	8460983a 	sll	r16,r16,r17
81113044:	98c6d83a 	srl	r3,r19,r3
81113048:	9c68983a 	sll	r20,r19,r17
8111304c:	1c20b03a 	or	r16,r3,r16
81113050:	1080fcc4 	addi	r2,r2,1011
81113054:	00a5c83a 	sub	r18,zero,r2
81113058:	0027883a 	mov	r19,zero
8111305c:	0039883a 	mov	fp,zero
81113060:	003f9006 	br	81112ea4 <__reset+0xfb0f2ea4>
81113064:	3446b03a 	or	r3,r6,r17
81113068:	1800261e 	bne	r3,zero,81113104 <__muldf3+0x2e4>
8111306c:	0023883a 	mov	r17,zero
81113070:	0011883a 	mov	r8,zero
81113074:	01400084 	movi	r5,2
81113078:	003f9c06 	br	81112eec <__reset+0xfb0f2eec>
8111307c:	3446b03a 	or	r3,r6,r17
81113080:	18001c26 	beq	r3,zero,811130f4 <__muldf3+0x2d4>
81113084:	8800ce26 	beq	r17,zero,811133c0 <__muldf3+0x5a0>
81113088:	8809883a 	mov	r4,r17
8111308c:	d9800215 	stw	r6,8(sp)
81113090:	da400115 	stw	r9,4(sp)
81113094:	da800015 	stw	r10,0(sp)
81113098:	11138000 	call	81113800 <__clzsi2>
8111309c:	d9800217 	ldw	r6,8(sp)
811130a0:	da400117 	ldw	r9,4(sp)
811130a4:	da800017 	ldw	r10,0(sp)
811130a8:	113ffd44 	addi	r4,r2,-11
811130ac:	00c00704 	movi	r3,28
811130b0:	1900bf16 	blt	r3,r4,811133b0 <__muldf3+0x590>
811130b4:	00c00744 	movi	r3,29
811130b8:	123ffe04 	addi	r8,r2,-8
811130bc:	1907c83a 	sub	r3,r3,r4
811130c0:	8a22983a 	sll	r17,r17,r8
811130c4:	30c6d83a 	srl	r3,r6,r3
811130c8:	3210983a 	sll	r8,r6,r8
811130cc:	1c62b03a 	or	r17,r3,r17
811130d0:	1080fcc4 	addi	r2,r2,1011
811130d4:	0085c83a 	sub	r2,zero,r2
811130d8:	000b883a 	mov	r5,zero
811130dc:	003f8306 	br	81112eec <__reset+0xfb0f2eec>
811130e0:	b02b883a 	mov	r21,r22
811130e4:	0081ffc4 	movi	r2,2047
811130e8:	000b883a 	mov	r5,zero
811130ec:	0029883a 	mov	r20,zero
811130f0:	003fac06 	br	81112fa4 <__reset+0xfb0f2fa4>
811130f4:	0023883a 	mov	r17,zero
811130f8:	0011883a 	mov	r8,zero
811130fc:	01400044 	movi	r5,1
81113100:	003f7a06 	br	81112eec <__reset+0xfb0f2eec>
81113104:	014000c4 	movi	r5,3
81113108:	003f7806 	br	81112eec <__reset+0xfb0f2eec>
8111310c:	04c00104 	movi	r19,4
81113110:	0021883a 	mov	r16,zero
81113114:	0029883a 	mov	r20,zero
81113118:	07000044 	movi	fp,1
8111311c:	003f6106 	br	81112ea4 <__reset+0xfb0f2ea4>
81113120:	04c00304 	movi	r19,12
81113124:	070000c4 	movi	fp,3
81113128:	003f5e06 	br	81112ea4 <__reset+0xfb0f2ea4>
8111312c:	01400434 	movhi	r5,16
81113130:	002b883a 	mov	r21,zero
81113134:	297fffc4 	addi	r5,r5,-1
81113138:	053fffc4 	movi	r20,-1
8111313c:	0081ffc4 	movi	r2,2047
81113140:	003f9806 	br	81112fa4 <__reset+0xfb0f2fa4>
81113144:	8023883a 	mov	r17,r16
81113148:	a011883a 	mov	r8,r20
8111314c:	e00b883a 	mov	r5,fp
81113150:	003f8a06 	br	81112f7c <__reset+0xfb0f2f7c>
81113154:	8023883a 	mov	r17,r16
81113158:	a011883a 	mov	r8,r20
8111315c:	482d883a 	mov	r22,r9
81113160:	e00b883a 	mov	r5,fp
81113164:	003f8506 	br	81112f7c <__reset+0xfb0f2f7c>
81113168:	a00ad43a 	srli	r5,r20,16
8111316c:	401ad43a 	srli	r13,r8,16
81113170:	a53fffcc 	andi	r20,r20,65535
81113174:	423fffcc 	andi	r8,r8,65535
81113178:	4519383a 	mul	r12,r8,r20
8111317c:	4147383a 	mul	r3,r8,r5
81113180:	6d09383a 	mul	r4,r13,r20
81113184:	600cd43a 	srli	r6,r12,16
81113188:	2b5d383a 	mul	r14,r5,r13
8111318c:	20c9883a 	add	r4,r4,r3
81113190:	310d883a 	add	r6,r6,r4
81113194:	30c0022e 	bgeu	r6,r3,811131a0 <__muldf3+0x380>
81113198:	00c00074 	movhi	r3,1
8111319c:	70dd883a 	add	r14,r14,r3
811131a0:	8826d43a 	srli	r19,r17,16
811131a4:	8bffffcc 	andi	r15,r17,65535
811131a8:	7d23383a 	mul	r17,r15,r20
811131ac:	7949383a 	mul	r4,r15,r5
811131b0:	9d29383a 	mul	r20,r19,r20
811131b4:	8814d43a 	srli	r10,r17,16
811131b8:	3012943a 	slli	r9,r6,16
811131bc:	a129883a 	add	r20,r20,r4
811131c0:	633fffcc 	andi	r12,r12,65535
811131c4:	5515883a 	add	r10,r10,r20
811131c8:	3006d43a 	srli	r3,r6,16
811131cc:	4b13883a 	add	r9,r9,r12
811131d0:	2ccb383a 	mul	r5,r5,r19
811131d4:	5100022e 	bgeu	r10,r4,811131e0 <__muldf3+0x3c0>
811131d8:	01000074 	movhi	r4,1
811131dc:	290b883a 	add	r5,r5,r4
811131e0:	802ad43a 	srli	r21,r16,16
811131e4:	843fffcc 	andi	r16,r16,65535
811131e8:	440d383a 	mul	r6,r8,r16
811131ec:	4565383a 	mul	r18,r8,r21
811131f0:	8349383a 	mul	r4,r16,r13
811131f4:	500e943a 	slli	r7,r10,16
811131f8:	3010d43a 	srli	r8,r6,16
811131fc:	5028d43a 	srli	r20,r10,16
81113200:	2489883a 	add	r4,r4,r18
81113204:	8abfffcc 	andi	r10,r17,65535
81113208:	3a95883a 	add	r10,r7,r10
8111320c:	4119883a 	add	r12,r8,r4
81113210:	a169883a 	add	r20,r20,r5
81113214:	1a87883a 	add	r3,r3,r10
81113218:	6d5b383a 	mul	r13,r13,r21
8111321c:	6480022e 	bgeu	r12,r18,81113228 <__muldf3+0x408>
81113220:	01000074 	movhi	r4,1
81113224:	691b883a 	add	r13,r13,r4
81113228:	7c25383a 	mul	r18,r15,r16
8111322c:	7d4b383a 	mul	r5,r15,r21
81113230:	84cf383a 	mul	r7,r16,r19
81113234:	901ed43a 	srli	r15,r18,16
81113238:	6008d43a 	srli	r4,r12,16
8111323c:	6010943a 	slli	r8,r12,16
81113240:	394f883a 	add	r7,r7,r5
81113244:	333fffcc 	andi	r12,r6,65535
81113248:	79df883a 	add	r15,r15,r7
8111324c:	235b883a 	add	r13,r4,r13
81113250:	9d63383a 	mul	r17,r19,r21
81113254:	4309883a 	add	r4,r8,r12
81113258:	7940022e 	bgeu	r15,r5,81113264 <__muldf3+0x444>
8111325c:	01400074 	movhi	r5,1
81113260:	8963883a 	add	r17,r17,r5
81113264:	780a943a 	slli	r5,r15,16
81113268:	91bfffcc 	andi	r6,r18,65535
8111326c:	70c7883a 	add	r3,r14,r3
81113270:	298d883a 	add	r6,r5,r6
81113274:	1a8f803a 	cmpltu	r7,r3,r10
81113278:	350b883a 	add	r5,r6,r20
8111327c:	20c7883a 	add	r3,r4,r3
81113280:	3955883a 	add	r10,r7,r5
81113284:	1909803a 	cmpltu	r4,r3,r4
81113288:	6a91883a 	add	r8,r13,r10
8111328c:	780cd43a 	srli	r6,r15,16
81113290:	2219883a 	add	r12,r4,r8
81113294:	2d0b803a 	cmpltu	r5,r5,r20
81113298:	51cf803a 	cmpltu	r7,r10,r7
8111329c:	29ceb03a 	or	r7,r5,r7
811132a0:	4351803a 	cmpltu	r8,r8,r13
811132a4:	610b803a 	cmpltu	r5,r12,r4
811132a8:	4148b03a 	or	r4,r8,r5
811132ac:	398f883a 	add	r7,r7,r6
811132b0:	3909883a 	add	r4,r7,r4
811132b4:	1810927a 	slli	r8,r3,9
811132b8:	2449883a 	add	r4,r4,r17
811132bc:	2008927a 	slli	r4,r4,9
811132c0:	6022d5fa 	srli	r17,r12,23
811132c4:	1806d5fa 	srli	r3,r3,23
811132c8:	4252b03a 	or	r9,r8,r9
811132cc:	600a927a 	slli	r5,r12,9
811132d0:	4810c03a 	cmpne	r8,r9,zero
811132d4:	2462b03a 	or	r17,r4,r17
811132d8:	40c6b03a 	or	r3,r8,r3
811132dc:	8900402c 	andhi	r4,r17,256
811132e0:	1950b03a 	or	r8,r3,r5
811132e4:	20000726 	beq	r4,zero,81113304 <__muldf3+0x4e4>
811132e8:	4006d07a 	srli	r3,r8,1
811132ec:	880497fa 	slli	r2,r17,31
811132f0:	4200004c 	andi	r8,r8,1
811132f4:	8822d07a 	srli	r17,r17,1
811132f8:	1a10b03a 	or	r8,r3,r8
811132fc:	1210b03a 	or	r8,r2,r8
81113300:	5805883a 	mov	r2,r11
81113304:	1140ffc4 	addi	r5,r2,1023
81113308:	0140440e 	bge	zero,r5,8111341c <__muldf3+0x5fc>
8111330c:	40c001cc 	andi	r3,r8,7
81113310:	18000726 	beq	r3,zero,81113330 <__muldf3+0x510>
81113314:	40c003cc 	andi	r3,r8,15
81113318:	01000104 	movi	r4,4
8111331c:	19000426 	beq	r3,r4,81113330 <__muldf3+0x510>
81113320:	4107883a 	add	r3,r8,r4
81113324:	1a11803a 	cmpltu	r8,r3,r8
81113328:	8a23883a 	add	r17,r17,r8
8111332c:	1811883a 	mov	r8,r3
81113330:	88c0402c 	andhi	r3,r17,256
81113334:	18000426 	beq	r3,zero,81113348 <__muldf3+0x528>
81113338:	11410004 	addi	r5,r2,1024
8111333c:	00bfc034 	movhi	r2,65280
81113340:	10bfffc4 	addi	r2,r2,-1
81113344:	88a2703a 	and	r17,r17,r2
81113348:	0081ff84 	movi	r2,2046
8111334c:	117f6416 	blt	r2,r5,811130e0 <__reset+0xfb0f30e0>
81113350:	8828977a 	slli	r20,r17,29
81113354:	4010d0fa 	srli	r8,r8,3
81113358:	8822927a 	slli	r17,r17,9
8111335c:	2881ffcc 	andi	r2,r5,2047
81113360:	a228b03a 	or	r20,r20,r8
81113364:	880ad33a 	srli	r5,r17,12
81113368:	b02b883a 	mov	r21,r22
8111336c:	003f0d06 	br	81112fa4 <__reset+0xfb0f2fa4>
81113370:	8080022c 	andhi	r2,r16,8
81113374:	10000926 	beq	r2,zero,8111339c <__muldf3+0x57c>
81113378:	8880022c 	andhi	r2,r17,8
8111337c:	1000071e 	bne	r2,zero,8111339c <__muldf3+0x57c>
81113380:	00800434 	movhi	r2,16
81113384:	89400234 	orhi	r5,r17,8
81113388:	10bfffc4 	addi	r2,r2,-1
8111338c:	b82b883a 	mov	r21,r23
81113390:	288a703a 	and	r5,r5,r2
81113394:	4029883a 	mov	r20,r8
81113398:	003f6806 	br	8111313c <__reset+0xfb0f313c>
8111339c:	00800434 	movhi	r2,16
811133a0:	81400234 	orhi	r5,r16,8
811133a4:	10bfffc4 	addi	r2,r2,-1
811133a8:	288a703a 	and	r5,r5,r2
811133ac:	003f6306 	br	8111313c <__reset+0xfb0f313c>
811133b0:	147ff604 	addi	r17,r2,-40
811133b4:	3462983a 	sll	r17,r6,r17
811133b8:	0011883a 	mov	r8,zero
811133bc:	003f4406 	br	811130d0 <__reset+0xfb0f30d0>
811133c0:	3009883a 	mov	r4,r6
811133c4:	d9800215 	stw	r6,8(sp)
811133c8:	da400115 	stw	r9,4(sp)
811133cc:	da800015 	stw	r10,0(sp)
811133d0:	11138000 	call	81113800 <__clzsi2>
811133d4:	10800804 	addi	r2,r2,32
811133d8:	da800017 	ldw	r10,0(sp)
811133dc:	da400117 	ldw	r9,4(sp)
811133e0:	d9800217 	ldw	r6,8(sp)
811133e4:	003f3006 	br	811130a8 <__reset+0xfb0f30a8>
811133e8:	143ff604 	addi	r16,r2,-40
811133ec:	9c20983a 	sll	r16,r19,r16
811133f0:	0029883a 	mov	r20,zero
811133f4:	003f1606 	br	81113050 <__reset+0xfb0f3050>
811133f8:	d9800215 	stw	r6,8(sp)
811133fc:	d9c00015 	stw	r7,0(sp)
81113400:	da400115 	stw	r9,4(sp)
81113404:	11138000 	call	81113800 <__clzsi2>
81113408:	10800804 	addi	r2,r2,32
8111340c:	da400117 	ldw	r9,4(sp)
81113410:	d9c00017 	ldw	r7,0(sp)
81113414:	d9800217 	ldw	r6,8(sp)
81113418:	003f0306 	br	81113028 <__reset+0xfb0f3028>
8111341c:	00c00044 	movi	r3,1
81113420:	1947c83a 	sub	r3,r3,r5
81113424:	00800e04 	movi	r2,56
81113428:	10feda16 	blt	r2,r3,81112f94 <__reset+0xfb0f2f94>
8111342c:	008007c4 	movi	r2,31
81113430:	10c01b16 	blt	r2,r3,811134a0 <__muldf3+0x680>
81113434:	00800804 	movi	r2,32
81113438:	10c5c83a 	sub	r2,r2,r3
8111343c:	888a983a 	sll	r5,r17,r2
81113440:	40c8d83a 	srl	r4,r8,r3
81113444:	4084983a 	sll	r2,r8,r2
81113448:	88e2d83a 	srl	r17,r17,r3
8111344c:	2906b03a 	or	r3,r5,r4
81113450:	1004c03a 	cmpne	r2,r2,zero
81113454:	1886b03a 	or	r3,r3,r2
81113458:	188001cc 	andi	r2,r3,7
8111345c:	10000726 	beq	r2,zero,8111347c <__muldf3+0x65c>
81113460:	188003cc 	andi	r2,r3,15
81113464:	01000104 	movi	r4,4
81113468:	11000426 	beq	r2,r4,8111347c <__muldf3+0x65c>
8111346c:	1805883a 	mov	r2,r3
81113470:	10c00104 	addi	r3,r2,4
81113474:	1885803a 	cmpltu	r2,r3,r2
81113478:	88a3883a 	add	r17,r17,r2
8111347c:	8880202c 	andhi	r2,r17,128
81113480:	10001c26 	beq	r2,zero,811134f4 <__muldf3+0x6d4>
81113484:	b02b883a 	mov	r21,r22
81113488:	00800044 	movi	r2,1
8111348c:	000b883a 	mov	r5,zero
81113490:	0029883a 	mov	r20,zero
81113494:	003ec306 	br	81112fa4 <__reset+0xfb0f2fa4>
81113498:	5805883a 	mov	r2,r11
8111349c:	003f9906 	br	81113304 <__reset+0xfb0f3304>
811134a0:	00bff844 	movi	r2,-31
811134a4:	1145c83a 	sub	r2,r2,r5
811134a8:	8888d83a 	srl	r4,r17,r2
811134ac:	00800804 	movi	r2,32
811134b0:	18801a26 	beq	r3,r2,8111351c <__muldf3+0x6fc>
811134b4:	00801004 	movi	r2,64
811134b8:	10c5c83a 	sub	r2,r2,r3
811134bc:	8884983a 	sll	r2,r17,r2
811134c0:	1204b03a 	or	r2,r2,r8
811134c4:	1004c03a 	cmpne	r2,r2,zero
811134c8:	2084b03a 	or	r2,r4,r2
811134cc:	144001cc 	andi	r17,r2,7
811134d0:	88000d1e 	bne	r17,zero,81113508 <__muldf3+0x6e8>
811134d4:	000b883a 	mov	r5,zero
811134d8:	1028d0fa 	srli	r20,r2,3
811134dc:	b02b883a 	mov	r21,r22
811134e0:	0005883a 	mov	r2,zero
811134e4:	a468b03a 	or	r20,r20,r17
811134e8:	003eae06 	br	81112fa4 <__reset+0xfb0f2fa4>
811134ec:	1007883a 	mov	r3,r2
811134f0:	0023883a 	mov	r17,zero
811134f4:	880a927a 	slli	r5,r17,9
811134f8:	1805883a 	mov	r2,r3
811134fc:	8822977a 	slli	r17,r17,29
81113500:	280ad33a 	srli	r5,r5,12
81113504:	003ff406 	br	811134d8 <__reset+0xfb0f34d8>
81113508:	10c003cc 	andi	r3,r2,15
8111350c:	01000104 	movi	r4,4
81113510:	193ff626 	beq	r3,r4,811134ec <__reset+0xfb0f34ec>
81113514:	0023883a 	mov	r17,zero
81113518:	003fd506 	br	81113470 <__reset+0xfb0f3470>
8111351c:	0005883a 	mov	r2,zero
81113520:	003fe706 	br	811134c0 <__reset+0xfb0f34c0>
81113524:	00800434 	movhi	r2,16
81113528:	89400234 	orhi	r5,r17,8
8111352c:	10bfffc4 	addi	r2,r2,-1
81113530:	b02b883a 	mov	r21,r22
81113534:	288a703a 	and	r5,r5,r2
81113538:	4029883a 	mov	r20,r8
8111353c:	003eff06 	br	8111313c <__reset+0xfb0f313c>

81113540 <__extendsfdf2>:
81113540:	200ad5fa 	srli	r5,r4,23
81113544:	defffd04 	addi	sp,sp,-12
81113548:	de00012e 	bgeu	sp,et,81113550 <__extendsfdf2+0x10>
8111354c:	003b68fa 	trap	3
81113550:	29403fcc 	andi	r5,r5,255
81113554:	dc400115 	stw	r17,4(sp)
81113558:	29800044 	addi	r6,r5,1
8111355c:	04402034 	movhi	r17,128
81113560:	dc000015 	stw	r16,0(sp)
81113564:	8c7fffc4 	addi	r17,r17,-1
81113568:	dfc00215 	stw	ra,8(sp)
8111356c:	31803fcc 	andi	r6,r6,255
81113570:	00800044 	movi	r2,1
81113574:	8922703a 	and	r17,r17,r4
81113578:	2020d7fa 	srli	r16,r4,31
8111357c:	1180110e 	bge	r2,r6,811135c4 <__extendsfdf2+0x84>
81113580:	880cd0fa 	srli	r6,r17,3
81113584:	8822977a 	slli	r17,r17,29
81113588:	2940e004 	addi	r5,r5,896
8111358c:	2941ffcc 	andi	r5,r5,2047
81113590:	2804953a 	slli	r2,r5,20
81113594:	01400434 	movhi	r5,16
81113598:	800697fa 	slli	r3,r16,31
8111359c:	297fffc4 	addi	r5,r5,-1
811135a0:	314a703a 	and	r5,r6,r5
811135a4:	288ab03a 	or	r5,r5,r2
811135a8:	28c6b03a 	or	r3,r5,r3
811135ac:	8805883a 	mov	r2,r17
811135b0:	dfc00217 	ldw	ra,8(sp)
811135b4:	dc400117 	ldw	r17,4(sp)
811135b8:	dc000017 	ldw	r16,0(sp)
811135bc:	dec00304 	addi	sp,sp,12
811135c0:	f800283a 	ret
811135c4:	2800111e 	bne	r5,zero,8111360c <__extendsfdf2+0xcc>
811135c8:	88001c26 	beq	r17,zero,8111363c <__extendsfdf2+0xfc>
811135cc:	8809883a 	mov	r4,r17
811135d0:	11138000 	call	81113800 <__clzsi2>
811135d4:	00c00284 	movi	r3,10
811135d8:	18801b16 	blt	r3,r2,81113648 <__extendsfdf2+0x108>
811135dc:	018002c4 	movi	r6,11
811135e0:	308dc83a 	sub	r6,r6,r2
811135e4:	11000544 	addi	r4,r2,21
811135e8:	8986d83a 	srl	r3,r17,r6
811135ec:	8922983a 	sll	r17,r17,r4
811135f0:	0180e244 	movi	r6,905
811135f4:	01400434 	movhi	r5,16
811135f8:	3085c83a 	sub	r2,r6,r2
811135fc:	297fffc4 	addi	r5,r5,-1
81113600:	194c703a 	and	r6,r3,r5
81113604:	1141ffcc 	andi	r5,r2,2047
81113608:	003fe006 	br	8111358c <__reset+0xfb0f358c>
8111360c:	88000826 	beq	r17,zero,81113630 <__extendsfdf2+0xf0>
81113610:	880cd0fa 	srli	r6,r17,3
81113614:	00800434 	movhi	r2,16
81113618:	10bfffc4 	addi	r2,r2,-1
8111361c:	31800234 	orhi	r6,r6,8
81113620:	8822977a 	slli	r17,r17,29
81113624:	308c703a 	and	r6,r6,r2
81113628:	0141ffc4 	movi	r5,2047
8111362c:	003fd706 	br	8111358c <__reset+0xfb0f358c>
81113630:	0141ffc4 	movi	r5,2047
81113634:	000d883a 	mov	r6,zero
81113638:	003fd406 	br	8111358c <__reset+0xfb0f358c>
8111363c:	000b883a 	mov	r5,zero
81113640:	000d883a 	mov	r6,zero
81113644:	003fd106 	br	8111358c <__reset+0xfb0f358c>
81113648:	11bffd44 	addi	r6,r2,-11
8111364c:	8986983a 	sll	r3,r17,r6
81113650:	0023883a 	mov	r17,zero
81113654:	003fe606 	br	811135f0 <__reset+0xfb0f35f0>

81113658 <__truncdfsf2>:
81113658:	2810d53a 	srli	r8,r5,20
8111365c:	01c00434 	movhi	r7,16
81113660:	39ffffc4 	addi	r7,r7,-1
81113664:	29ce703a 	and	r7,r5,r7
81113668:	4201ffcc 	andi	r8,r8,2047
8111366c:	380e90fa 	slli	r7,r7,3
81113670:	200cd77a 	srli	r6,r4,29
81113674:	42400044 	addi	r9,r8,1
81113678:	4a41ffcc 	andi	r9,r9,2047
8111367c:	00c00044 	movi	r3,1
81113680:	280ad7fa 	srli	r5,r5,31
81113684:	31ceb03a 	or	r7,r6,r7
81113688:	200490fa 	slli	r2,r4,3
8111368c:	1a40230e 	bge	r3,r9,8111371c <__truncdfsf2+0xc4>
81113690:	40ff2004 	addi	r3,r8,-896
81113694:	01803f84 	movi	r6,254
81113698:	30c01516 	blt	r6,r3,811136f0 <__truncdfsf2+0x98>
8111369c:	00c0380e 	bge	zero,r3,81113780 <__truncdfsf2+0x128>
811136a0:	200c91ba 	slli	r6,r4,6
811136a4:	380e90fa 	slli	r7,r7,3
811136a8:	1004d77a 	srli	r2,r2,29
811136ac:	300cc03a 	cmpne	r6,r6,zero
811136b0:	31ccb03a 	or	r6,r6,r7
811136b4:	308cb03a 	or	r6,r6,r2
811136b8:	308001cc 	andi	r2,r6,7
811136bc:	10000426 	beq	r2,zero,811136d0 <__truncdfsf2+0x78>
811136c0:	308003cc 	andi	r2,r6,15
811136c4:	01000104 	movi	r4,4
811136c8:	11000126 	beq	r2,r4,811136d0 <__truncdfsf2+0x78>
811136cc:	31800104 	addi	r6,r6,4
811136d0:	3081002c 	andhi	r2,r6,1024
811136d4:	10001626 	beq	r2,zero,81113730 <__truncdfsf2+0xd8>
811136d8:	18c00044 	addi	r3,r3,1
811136dc:	00803fc4 	movi	r2,255
811136e0:	18800326 	beq	r3,r2,811136f0 <__truncdfsf2+0x98>
811136e4:	300c91ba 	slli	r6,r6,6
811136e8:	300cd27a 	srli	r6,r6,9
811136ec:	00000206 	br	811136f8 <__truncdfsf2+0xa0>
811136f0:	00ffffc4 	movi	r3,-1
811136f4:	000d883a 	mov	r6,zero
811136f8:	18c03fcc 	andi	r3,r3,255
811136fc:	180895fa 	slli	r4,r3,23
81113700:	00c02034 	movhi	r3,128
81113704:	280a97fa 	slli	r5,r5,31
81113708:	18ffffc4 	addi	r3,r3,-1
8111370c:	30c6703a 	and	r3,r6,r3
81113710:	1906b03a 	or	r3,r3,r4
81113714:	1944b03a 	or	r2,r3,r5
81113718:	f800283a 	ret
8111371c:	40000b1e 	bne	r8,zero,8111374c <__truncdfsf2+0xf4>
81113720:	388cb03a 	or	r6,r7,r2
81113724:	0007883a 	mov	r3,zero
81113728:	30000426 	beq	r6,zero,8111373c <__truncdfsf2+0xe4>
8111372c:	01800144 	movi	r6,5
81113730:	00803fc4 	movi	r2,255
81113734:	300cd0fa 	srli	r6,r6,3
81113738:	18800a26 	beq	r3,r2,81113764 <__truncdfsf2+0x10c>
8111373c:	00802034 	movhi	r2,128
81113740:	10bfffc4 	addi	r2,r2,-1
81113744:	308c703a 	and	r6,r6,r2
81113748:	003feb06 	br	811136f8 <__reset+0xfb0f36f8>
8111374c:	3888b03a 	or	r4,r7,r2
81113750:	203fe726 	beq	r4,zero,811136f0 <__reset+0xfb0f36f0>
81113754:	380c90fa 	slli	r6,r7,3
81113758:	00c03fc4 	movi	r3,255
8111375c:	31808034 	orhi	r6,r6,512
81113760:	003fd506 	br	811136b8 <__reset+0xfb0f36b8>
81113764:	303fe226 	beq	r6,zero,811136f0 <__reset+0xfb0f36f0>
81113768:	00802034 	movhi	r2,128
8111376c:	31801034 	orhi	r6,r6,64
81113770:	10bfffc4 	addi	r2,r2,-1
81113774:	00ffffc4 	movi	r3,-1
81113778:	308c703a 	and	r6,r6,r2
8111377c:	003fde06 	br	811136f8 <__reset+0xfb0f36f8>
81113780:	013ffa44 	movi	r4,-23
81113784:	19000e16 	blt	r3,r4,811137c0 <__truncdfsf2+0x168>
81113788:	01000784 	movi	r4,30
8111378c:	20c9c83a 	sub	r4,r4,r3
81113790:	018007c4 	movi	r6,31
81113794:	39c02034 	orhi	r7,r7,128
81113798:	31000b16 	blt	r6,r4,811137c8 <__truncdfsf2+0x170>
8111379c:	423f2084 	addi	r8,r8,-894
811137a0:	120c983a 	sll	r6,r2,r8
811137a4:	3a0e983a 	sll	r7,r7,r8
811137a8:	1104d83a 	srl	r2,r2,r4
811137ac:	300cc03a 	cmpne	r6,r6,zero
811137b0:	31ceb03a 	or	r7,r6,r7
811137b4:	388cb03a 	or	r6,r7,r2
811137b8:	0007883a 	mov	r3,zero
811137bc:	003fbe06 	br	811136b8 <__reset+0xfb0f36b8>
811137c0:	0007883a 	mov	r3,zero
811137c4:	003fd906 	br	8111372c <__reset+0xfb0f372c>
811137c8:	01bfff84 	movi	r6,-2
811137cc:	30cdc83a 	sub	r6,r6,r3
811137d0:	00c00804 	movi	r3,32
811137d4:	398cd83a 	srl	r6,r7,r6
811137d8:	20c00726 	beq	r4,r3,811137f8 <__truncdfsf2+0x1a0>
811137dc:	423f2884 	addi	r8,r8,-862
811137e0:	3a0e983a 	sll	r7,r7,r8
811137e4:	3884b03a 	or	r2,r7,r2
811137e8:	1004c03a 	cmpne	r2,r2,zero
811137ec:	118cb03a 	or	r6,r2,r6
811137f0:	0007883a 	mov	r3,zero
811137f4:	003fb006 	br	811136b8 <__reset+0xfb0f36b8>
811137f8:	000f883a 	mov	r7,zero
811137fc:	003ff906 	br	811137e4 <__reset+0xfb0f37e4>

81113800 <__clzsi2>:
81113800:	00bfffd4 	movui	r2,65535
81113804:	11000536 	bltu	r2,r4,8111381c <__clzsi2+0x1c>
81113808:	00803fc4 	movi	r2,255
8111380c:	11000f36 	bltu	r2,r4,8111384c <__clzsi2+0x4c>
81113810:	00800804 	movi	r2,32
81113814:	0007883a 	mov	r3,zero
81113818:	00000506 	br	81113830 <__clzsi2+0x30>
8111381c:	00804034 	movhi	r2,256
81113820:	10bfffc4 	addi	r2,r2,-1
81113824:	11000c2e 	bgeu	r2,r4,81113858 <__clzsi2+0x58>
81113828:	00800204 	movi	r2,8
8111382c:	00c00604 	movi	r3,24
81113830:	20c8d83a 	srl	r4,r4,r3
81113834:	00e04534 	movhi	r3,33044
81113838:	18c7b904 	addi	r3,r3,7908
8111383c:	1909883a 	add	r4,r3,r4
81113840:	20c00003 	ldbu	r3,0(r4)
81113844:	10c5c83a 	sub	r2,r2,r3
81113848:	f800283a 	ret
8111384c:	00800604 	movi	r2,24
81113850:	00c00204 	movi	r3,8
81113854:	003ff606 	br	81113830 <__reset+0xfb0f3830>
81113858:	00800404 	movi	r2,16
8111385c:	1007883a 	mov	r3,r2
81113860:	003ff306 	br	81113830 <__reset+0xfb0f3830>

81113864 <atoi>:
81113864:	01800284 	movi	r6,10
81113868:	000b883a 	mov	r5,zero
8111386c:	11158a01 	jmpi	811158a0 <strtol>

81113870 <_atoi_r>:
81113870:	01c00284 	movi	r7,10
81113874:	000d883a 	mov	r6,zero
81113878:	11156601 	jmpi	81115660 <_strtol_r>

8111387c <_fopen_r>:
8111387c:	defffa04 	addi	sp,sp,-24
81113880:	3005883a 	mov	r2,r6
81113884:	de00012e 	bgeu	sp,et,8111388c <_fopen_r+0x10>
81113888:	003b68fa 	trap	3
8111388c:	d80d883a 	mov	r6,sp
81113890:	dcc00415 	stw	r19,16(sp)
81113894:	2827883a 	mov	r19,r5
81113898:	100b883a 	mov	r5,r2
8111389c:	dc800315 	stw	r18,12(sp)
811138a0:	dfc00515 	stw	ra,20(sp)
811138a4:	dc400215 	stw	r17,8(sp)
811138a8:	dc000115 	stw	r16,4(sp)
811138ac:	2025883a 	mov	r18,r4
811138b0:	111d8a80 	call	8111d8a8 <__sflags>
811138b4:	10002726 	beq	r2,zero,81113954 <_fopen_r+0xd8>
811138b8:	9009883a 	mov	r4,r18
811138bc:	1023883a 	mov	r17,r2
811138c0:	111d7200 	call	8111d720 <__sfp>
811138c4:	1021883a 	mov	r16,r2
811138c8:	10002226 	beq	r2,zero,81113954 <_fopen_r+0xd8>
811138cc:	d9800017 	ldw	r6,0(sp)
811138d0:	01c06d84 	movi	r7,438
811138d4:	980b883a 	mov	r5,r19
811138d8:	9009883a 	mov	r4,r18
811138dc:	1114ce80 	call	81114ce8 <_open_r>
811138e0:	10001916 	blt	r2,zero,81113948 <_fopen_r+0xcc>
811138e4:	8080038d 	sth	r2,14(r16)
811138e8:	00a04474 	movhi	r2,33041
811138ec:	1094f904 	addi	r2,r2,21476
811138f0:	80800815 	stw	r2,32(r16)
811138f4:	00a04474 	movhi	r2,33041
811138f8:	10951204 	addi	r2,r2,21576
811138fc:	80800915 	stw	r2,36(r16)
81113900:	00a04474 	movhi	r2,33041
81113904:	10953304 	addi	r2,r2,21708
81113908:	80800a15 	stw	r2,40(r16)
8111390c:	00a04474 	movhi	r2,33041
81113910:	10954c04 	addi	r2,r2,21808
81113914:	8440030d 	sth	r17,12(r16)
81113918:	84000715 	stw	r16,28(r16)
8111391c:	80800b15 	stw	r2,44(r16)
81113920:	8c40400c 	andi	r17,r17,256
81113924:	88000d1e 	bne	r17,zero,8111395c <_fopen_r+0xe0>
81113928:	8005883a 	mov	r2,r16
8111392c:	dfc00517 	ldw	ra,20(sp)
81113930:	dcc00417 	ldw	r19,16(sp)
81113934:	dc800317 	ldw	r18,12(sp)
81113938:	dc400217 	ldw	r17,8(sp)
8111393c:	dc000117 	ldw	r16,4(sp)
81113940:	dec00604 	addi	sp,sp,24
81113944:	f800283a 	ret
81113948:	111d8680 	call	8111d868 <__sfp_lock_acquire>
8111394c:	8000030d 	sth	zero,12(r16)
81113950:	111d86c0 	call	8111d86c <__sfp_lock_release>
81113954:	0005883a 	mov	r2,zero
81113958:	003ff406 	br	8111392c <__reset+0xfb0f392c>
8111395c:	01c00084 	movi	r7,2
81113960:	000d883a 	mov	r6,zero
81113964:	800b883a 	mov	r5,r16
81113968:	9009883a 	mov	r4,r18
8111396c:	1113a9c0 	call	81113a9c <_fseek_r>
81113970:	8005883a 	mov	r2,r16
81113974:	003fed06 	br	8111392c <__reset+0xfb0f392c>

81113978 <fopen>:
81113978:	00a04534 	movhi	r2,33044
8111397c:	10928704 	addi	r2,r2,18972
81113980:	280d883a 	mov	r6,r5
81113984:	200b883a 	mov	r5,r4
81113988:	11000017 	ldw	r4,0(r2)
8111398c:	111387c1 	jmpi	8111387c <_fopen_r>

81113990 <_fprintf_r>:
81113990:	defffe04 	addi	sp,sp,-8
81113994:	2809883a 	mov	r4,r5
81113998:	300b883a 	mov	r5,r6
8111399c:	de00012e 	bgeu	sp,et,811139a4 <_fprintf_r+0x14>
811139a0:	003b68fa 	trap	3
811139a4:	dfc00015 	stw	ra,0(sp)
811139a8:	d9c00115 	stw	r7,4(sp)
811139ac:	d9800104 	addi	r6,sp,4
811139b0:	1119c9c0 	call	81119c9c <__vfprintf_internal>
811139b4:	dfc00017 	ldw	ra,0(sp)
811139b8:	dec00204 	addi	sp,sp,8
811139bc:	f800283a 	ret

811139c0 <fprintf>:
811139c0:	defffd04 	addi	sp,sp,-12
811139c4:	de00012e 	bgeu	sp,et,811139cc <fprintf+0xc>
811139c8:	003b68fa 	trap	3
811139cc:	dfc00015 	stw	ra,0(sp)
811139d0:	d9800115 	stw	r6,4(sp)
811139d4:	d9c00215 	stw	r7,8(sp)
811139d8:	d9800104 	addi	r6,sp,4
811139dc:	1119c9c0 	call	81119c9c <__vfprintf_internal>
811139e0:	dfc00017 	ldw	ra,0(sp)
811139e4:	dec00304 	addi	sp,sp,12
811139e8:	f800283a 	ret

811139ec <_fputc_r>:
811139ec:	defffc04 	addi	sp,sp,-16
811139f0:	de00012e 	bgeu	sp,et,811139f8 <_fputc_r+0xc>
811139f4:	003b68fa 	trap	3
811139f8:	dc000215 	stw	r16,8(sp)
811139fc:	dfc00315 	stw	ra,12(sp)
81113a00:	2021883a 	mov	r16,r4
81113a04:	20000726 	beq	r4,zero,81113a24 <_fputc_r+0x38>
81113a08:	20800e17 	ldw	r2,56(r4)
81113a0c:	1000051e 	bne	r2,zero,81113a24 <_fputc_r+0x38>
81113a10:	d9400015 	stw	r5,0(sp)
81113a14:	d9800115 	stw	r6,4(sp)
81113a18:	111d8580 	call	8111d858 <__sinit>
81113a1c:	d9800117 	ldw	r6,4(sp)
81113a20:	d9400017 	ldw	r5,0(sp)
81113a24:	8009883a 	mov	r4,r16
81113a28:	dfc00317 	ldw	ra,12(sp)
81113a2c:	dc000217 	ldw	r16,8(sp)
81113a30:	dec00404 	addi	sp,sp,16
81113a34:	1114dcc1 	jmpi	81114dcc <_putc_r>

81113a38 <fputc>:
81113a38:	00a04534 	movhi	r2,33044
81113a3c:	defffc04 	addi	sp,sp,-16
81113a40:	10928704 	addi	r2,r2,18972
81113a44:	de00012e 	bgeu	sp,et,81113a4c <fputc+0x14>
81113a48:	003b68fa 	trap	3
81113a4c:	dc000115 	stw	r16,4(sp)
81113a50:	14000017 	ldw	r16,0(r2)
81113a54:	dc400215 	stw	r17,8(sp)
81113a58:	dfc00315 	stw	ra,12(sp)
81113a5c:	2023883a 	mov	r17,r4
81113a60:	80000626 	beq	r16,zero,81113a7c <fputc+0x44>
81113a64:	80800e17 	ldw	r2,56(r16)
81113a68:	1000041e 	bne	r2,zero,81113a7c <fputc+0x44>
81113a6c:	8009883a 	mov	r4,r16
81113a70:	d9400015 	stw	r5,0(sp)
81113a74:	111d8580 	call	8111d858 <__sinit>
81113a78:	d9400017 	ldw	r5,0(sp)
81113a7c:	280d883a 	mov	r6,r5
81113a80:	8009883a 	mov	r4,r16
81113a84:	880b883a 	mov	r5,r17
81113a88:	dfc00317 	ldw	ra,12(sp)
81113a8c:	dc400217 	ldw	r17,8(sp)
81113a90:	dc000117 	ldw	r16,4(sp)
81113a94:	dec00404 	addi	sp,sp,16
81113a98:	1114dcc1 	jmpi	81114dcc <_putc_r>

81113a9c <_fseek_r>:
81113a9c:	1113abc1 	jmpi	81113abc <_fseeko_r>

81113aa0 <fseek>:
81113aa0:	00a04534 	movhi	r2,33044
81113aa4:	10928704 	addi	r2,r2,18972
81113aa8:	300f883a 	mov	r7,r6
81113aac:	280d883a 	mov	r6,r5
81113ab0:	200b883a 	mov	r5,r4
81113ab4:	11000017 	ldw	r4,0(r2)
81113ab8:	1113abc1 	jmpi	81113abc <_fseeko_r>

81113abc <_fseeko_r>:
81113abc:	deffe804 	addi	sp,sp,-96
81113ac0:	de00012e 	bgeu	sp,et,81113ac8 <_fseeko_r+0xc>
81113ac4:	003b68fa 	trap	3
81113ac8:	dd401415 	stw	r21,80(sp)
81113acc:	dc801115 	stw	r18,68(sp)
81113ad0:	dc401015 	stw	r17,64(sp)
81113ad4:	dc000f15 	stw	r16,60(sp)
81113ad8:	dfc01715 	stw	ra,92(sp)
81113adc:	ddc01615 	stw	r23,88(sp)
81113ae0:	dd801515 	stw	r22,84(sp)
81113ae4:	dd001315 	stw	r20,76(sp)
81113ae8:	dcc01215 	stw	r19,72(sp)
81113aec:	2023883a 	mov	r17,r4
81113af0:	2821883a 	mov	r16,r5
81113af4:	302b883a 	mov	r21,r6
81113af8:	3825883a 	mov	r18,r7
81113afc:	20000226 	beq	r4,zero,81113b08 <_fseeko_r+0x4c>
81113b00:	20800e17 	ldw	r2,56(r4)
81113b04:	10005a26 	beq	r2,zero,81113c70 <_fseeko_r+0x1b4>
81113b08:	8080030b 	ldhu	r2,12(r16)
81113b0c:	00c04204 	movi	r3,264
81113b10:	1080420c 	andi	r2,r2,264
81113b14:	10c05b26 	beq	r2,r3,81113c84 <_fseeko_r+0x1c8>
81113b18:	85000a17 	ldw	r20,40(r16)
81113b1c:	a000f626 	beq	r20,zero,81113ef8 <_fseeko_r+0x43c>
81113b20:	00800044 	movi	r2,1
81113b24:	90803e26 	beq	r18,r2,81113c20 <_fseeko_r+0x164>
81113b28:	00800084 	movi	r2,2
81113b2c:	90801026 	beq	r18,r2,81113b70 <_fseeko_r+0xb4>
81113b30:	90000f26 	beq	r18,zero,81113b70 <_fseeko_r+0xb4>
81113b34:	00800584 	movi	r2,22
81113b38:	88800015 	stw	r2,0(r17)
81113b3c:	04ffffc4 	movi	r19,-1
81113b40:	9805883a 	mov	r2,r19
81113b44:	dfc01717 	ldw	ra,92(sp)
81113b48:	ddc01617 	ldw	r23,88(sp)
81113b4c:	dd801517 	ldw	r22,84(sp)
81113b50:	dd401417 	ldw	r21,80(sp)
81113b54:	dd001317 	ldw	r20,76(sp)
81113b58:	dcc01217 	ldw	r19,72(sp)
81113b5c:	dc801117 	ldw	r18,68(sp)
81113b60:	dc401017 	ldw	r17,64(sp)
81113b64:	dc000f17 	ldw	r16,60(sp)
81113b68:	dec01804 	addi	sp,sp,96
81113b6c:	f800283a 	ret
81113b70:	80800417 	ldw	r2,16(r16)
81113b74:	002f883a 	mov	r23,zero
81113b78:	0027883a 	mov	r19,zero
81113b7c:	1000cb26 	beq	r2,zero,81113eac <_fseeko_r+0x3f0>
81113b80:	8080030b 	ldhu	r2,12(r16)
81113b84:	10c2068c 	andi	r3,r2,2074
81113b88:	1800071e 	bne	r3,zero,81113ba8 <_fseeko_r+0xec>
81113b8c:	10c1000c 	andi	r3,r2,1024
81113b90:	1800451e 	bne	r3,zero,81113ca8 <_fseeko_r+0x1ec>
81113b94:	00e04474 	movhi	r3,33041
81113b98:	18d53304 	addi	r3,r3,21708
81113b9c:	a0c0b726 	beq	r20,r3,81113e7c <_fseeko_r+0x3c0>
81113ba0:	10820014 	ori	r2,r2,2048
81113ba4:	8080030d 	sth	r2,12(r16)
81113ba8:	800b883a 	mov	r5,r16
81113bac:	8809883a 	mov	r4,r17
81113bb0:	111d45c0 	call	8111d45c <_fflush_r>
81113bb4:	1027883a 	mov	r19,r2
81113bb8:	103fe01e 	bne	r2,zero,81113b3c <__reset+0xfb0f3b3c>
81113bbc:	81400717 	ldw	r5,28(r16)
81113bc0:	900f883a 	mov	r7,r18
81113bc4:	a80d883a 	mov	r6,r21
81113bc8:	8809883a 	mov	r4,r17
81113bcc:	a03ee83a 	callr	r20
81113bd0:	00ffffc4 	movi	r3,-1
81113bd4:	10ffd926 	beq	r2,r3,81113b3c <__reset+0xfb0f3b3c>
81113bd8:	81400c17 	ldw	r5,48(r16)
81113bdc:	28000526 	beq	r5,zero,81113bf4 <_fseeko_r+0x138>
81113be0:	80801004 	addi	r2,r16,64
81113be4:	28800226 	beq	r5,r2,81113bf0 <_fseeko_r+0x134>
81113be8:	8809883a 	mov	r4,r17
81113bec:	111dcf00 	call	8111dcf0 <_free_r>
81113bf0:	80000c15 	stw	zero,48(r16)
81113bf4:	8080030b 	ldhu	r2,12(r16)
81113bf8:	80c00417 	ldw	r3,16(r16)
81113bfc:	80000115 	stw	zero,4(r16)
81113c00:	10bdf7cc 	andi	r2,r2,63455
81113c04:	80c00015 	stw	r3,0(r16)
81113c08:	8080030d 	sth	r2,12(r16)
81113c0c:	01800204 	movi	r6,8
81113c10:	000b883a 	mov	r5,zero
81113c14:	81001704 	addi	r4,r16,92
81113c18:	1114bc00 	call	81114bc0 <memset>
81113c1c:	003fc806 	br	81113b40 <__reset+0xfb0f3b40>
81113c20:	800b883a 	mov	r5,r16
81113c24:	8809883a 	mov	r4,r17
81113c28:	111d45c0 	call	8111d45c <_fflush_r>
81113c2c:	8080030b 	ldhu	r2,12(r16)
81113c30:	10c4000c 	andi	r3,r2,4096
81113c34:	18008726 	beq	r3,zero,81113e54 <_fseeko_r+0x398>
81113c38:	84c01417 	ldw	r19,80(r16)
81113c3c:	10c0010c 	andi	r3,r2,4
81113c40:	1800431e 	bne	r3,zero,81113d50 <_fseeko_r+0x294>
81113c44:	1080020c 	andi	r2,r2,8
81113c48:	10008026 	beq	r2,zero,81113e4c <_fseeko_r+0x390>
81113c4c:	80c00017 	ldw	r3,0(r16)
81113c50:	80800417 	ldw	r2,16(r16)
81113c54:	18000226 	beq	r3,zero,81113c60 <_fseeko_r+0x1a4>
81113c58:	1887c83a 	sub	r3,r3,r2
81113c5c:	98e7883a 	add	r19,r19,r3
81113c60:	aceb883a 	add	r21,r21,r19
81113c64:	05c00044 	movi	r23,1
81113c68:	0025883a 	mov	r18,zero
81113c6c:	003fc306 	br	81113b7c <__reset+0xfb0f3b7c>
81113c70:	111d8580 	call	8111d858 <__sinit>
81113c74:	8080030b 	ldhu	r2,12(r16)
81113c78:	00c04204 	movi	r3,264
81113c7c:	1080420c 	andi	r2,r2,264
81113c80:	10ffa51e 	bne	r2,r3,81113b18 <__reset+0xfb0f3b18>
81113c84:	800b883a 	mov	r5,r16
81113c88:	8809883a 	mov	r4,r17
81113c8c:	111d45c0 	call	8111d45c <_fflush_r>
81113c90:	003fa106 	br	81113b18 <__reset+0xfb0f3b18>
81113c94:	8080030b 	ldhu	r2,12(r16)
81113c98:	00c10004 	movi	r3,1024
81113c9c:	80c01315 	stw	r3,76(r16)
81113ca0:	10c4b03a 	or	r2,r2,r3
81113ca4:	8080030d 	sth	r2,12(r16)
81113ca8:	9000311e 	bne	r18,zero,81113d70 <_fseeko_r+0x2b4>
81113cac:	a82d883a 	mov	r22,r21
81113cb0:	b800371e 	bne	r23,zero,81113d90 <_fseeko_r+0x2d4>
81113cb4:	8080030b 	ldhu	r2,12(r16)
81113cb8:	1084000c 	andi	r2,r2,4096
81113cbc:	10007f26 	beq	r2,zero,81113ebc <_fseeko_r+0x400>
81113cc0:	80801417 	ldw	r2,80(r16)
81113cc4:	81800117 	ldw	r6,4(r16)
81113cc8:	81400c17 	ldw	r5,48(r16)
81113ccc:	11a7c83a 	sub	r19,r2,r6
81113cd0:	28008226 	beq	r5,zero,81113edc <_fseeko_r+0x420>
81113cd4:	81c00f17 	ldw	r7,60(r16)
81113cd8:	99e7c83a 	sub	r19,r19,r7
81113cdc:	81000e17 	ldw	r4,56(r16)
81113ce0:	80800417 	ldw	r2,16(r16)
81113ce4:	99a7883a 	add	r19,r19,r6
81113ce8:	2087c83a 	sub	r3,r4,r2
81113cec:	98e7c83a 	sub	r19,r19,r3
81113cf0:	38c7883a 	add	r3,r7,r3
81113cf4:	b4c02b16 	blt	r22,r19,81113da4 <_fseeko_r+0x2e8>
81113cf8:	98c9883a 	add	r4,r19,r3
81113cfc:	b100292e 	bgeu	r22,r4,81113da4 <_fseeko_r+0x2e8>
81113d00:	b4e7c83a 	sub	r19,r22,r19
81113d04:	14c5883a 	add	r2,r2,r19
81113d08:	1ce7c83a 	sub	r19,r3,r19
81113d0c:	80800015 	stw	r2,0(r16)
81113d10:	84c00115 	stw	r19,4(r16)
81113d14:	28000526 	beq	r5,zero,81113d2c <_fseeko_r+0x270>
81113d18:	80801004 	addi	r2,r16,64
81113d1c:	28800226 	beq	r5,r2,81113d28 <_fseeko_r+0x26c>
81113d20:	8809883a 	mov	r4,r17
81113d24:	111dcf00 	call	8111dcf0 <_free_r>
81113d28:	80000c15 	stw	zero,48(r16)
81113d2c:	8080030b 	ldhu	r2,12(r16)
81113d30:	01800204 	movi	r6,8
81113d34:	000b883a 	mov	r5,zero
81113d38:	10bff7cc 	andi	r2,r2,65503
81113d3c:	8080030d 	sth	r2,12(r16)
81113d40:	81001704 	addi	r4,r16,92
81113d44:	1114bc00 	call	81114bc0 <memset>
81113d48:	0027883a 	mov	r19,zero
81113d4c:	003f7c06 	br	81113b40 <__reset+0xfb0f3b40>
81113d50:	80c00117 	ldw	r3,4(r16)
81113d54:	80800c17 	ldw	r2,48(r16)
81113d58:	98e7c83a 	sub	r19,r19,r3
81113d5c:	10003b26 	beq	r2,zero,81113e4c <_fseeko_r+0x390>
81113d60:	80c00f17 	ldw	r3,60(r16)
81113d64:	80800417 	ldw	r2,16(r16)
81113d68:	98e7c83a 	sub	r19,r19,r3
81113d6c:	003fbc06 	br	81113c60 <__reset+0xfb0f3c60>
81113d70:	8140038f 	ldh	r5,14(r16)
81113d74:	d80d883a 	mov	r6,sp
81113d78:	8809883a 	mov	r4,r17
81113d7c:	1113f240 	call	81113f24 <_fstat_r>
81113d80:	103f891e 	bne	r2,zero,81113ba8 <__reset+0xfb0f3ba8>
81113d84:	dd800417 	ldw	r22,16(sp)
81113d88:	adad883a 	add	r22,r21,r22
81113d8c:	b83fc926 	beq	r23,zero,81113cb4 <__reset+0xfb0f3cb4>
81113d90:	81400c17 	ldw	r5,48(r16)
81113d94:	81800117 	ldw	r6,4(r16)
81113d98:	28005026 	beq	r5,zero,81113edc <_fseeko_r+0x420>
81113d9c:	81c00f17 	ldw	r7,60(r16)
81113da0:	003fce06 	br	81113cdc <__reset+0xfb0f3cdc>
81113da4:	84c01317 	ldw	r19,76(r16)
81113da8:	81400717 	ldw	r5,28(r16)
81113dac:	000f883a 	mov	r7,zero
81113db0:	04e7c83a 	sub	r19,zero,r19
81113db4:	9da6703a 	and	r19,r19,r22
81113db8:	980d883a 	mov	r6,r19
81113dbc:	8809883a 	mov	r4,r17
81113dc0:	a03ee83a 	callr	r20
81113dc4:	00ffffc4 	movi	r3,-1
81113dc8:	10ff7726 	beq	r2,r3,81113ba8 <__reset+0xfb0f3ba8>
81113dcc:	80800417 	ldw	r2,16(r16)
81113dd0:	81400c17 	ldw	r5,48(r16)
81113dd4:	80000115 	stw	zero,4(r16)
81113dd8:	80800015 	stw	r2,0(r16)
81113ddc:	28000526 	beq	r5,zero,81113df4 <_fseeko_r+0x338>
81113de0:	80801004 	addi	r2,r16,64
81113de4:	28800226 	beq	r5,r2,81113df0 <_fseeko_r+0x334>
81113de8:	8809883a 	mov	r4,r17
81113dec:	111dcf00 	call	8111dcf0 <_free_r>
81113df0:	80000c15 	stw	zero,48(r16)
81113df4:	8080030b 	ldhu	r2,12(r16)
81113df8:	b4e7c83a 	sub	r19,r22,r19
81113dfc:	10bff7cc 	andi	r2,r2,65503
81113e00:	8080030d 	sth	r2,12(r16)
81113e04:	98000b26 	beq	r19,zero,81113e34 <_fseeko_r+0x378>
81113e08:	800b883a 	mov	r5,r16
81113e0c:	8809883a 	mov	r4,r17
81113e10:	111505c0 	call	8111505c <__srefill_r>
81113e14:	103f641e 	bne	r2,zero,81113ba8 <__reset+0xfb0f3ba8>
81113e18:	80800117 	ldw	r2,4(r16)
81113e1c:	14ff6236 	bltu	r2,r19,81113ba8 <__reset+0xfb0f3ba8>
81113e20:	80c00017 	ldw	r3,0(r16)
81113e24:	14c5c83a 	sub	r2,r2,r19
81113e28:	80800115 	stw	r2,4(r16)
81113e2c:	1ce7883a 	add	r19,r3,r19
81113e30:	84c00015 	stw	r19,0(r16)
81113e34:	01800204 	movi	r6,8
81113e38:	000b883a 	mov	r5,zero
81113e3c:	81001704 	addi	r4,r16,92
81113e40:	1114bc00 	call	81114bc0 <memset>
81113e44:	0027883a 	mov	r19,zero
81113e48:	003f3d06 	br	81113b40 <__reset+0xfb0f3b40>
81113e4c:	80800417 	ldw	r2,16(r16)
81113e50:	003f8306 	br	81113c60 <__reset+0xfb0f3c60>
81113e54:	81400717 	ldw	r5,28(r16)
81113e58:	900f883a 	mov	r7,r18
81113e5c:	000d883a 	mov	r6,zero
81113e60:	8809883a 	mov	r4,r17
81113e64:	a03ee83a 	callr	r20
81113e68:	1027883a 	mov	r19,r2
81113e6c:	00bfffc4 	movi	r2,-1
81113e70:	98bf3226 	beq	r19,r2,81113b3c <__reset+0xfb0f3b3c>
81113e74:	8080030b 	ldhu	r2,12(r16)
81113e78:	003f7006 	br	81113c3c <__reset+0xfb0f3c3c>
81113e7c:	8140038f 	ldh	r5,14(r16)
81113e80:	283f4716 	blt	r5,zero,81113ba0 <__reset+0xfb0f3ba0>
81113e84:	d80d883a 	mov	r6,sp
81113e88:	8809883a 	mov	r4,r17
81113e8c:	1113f240 	call	81113f24 <_fstat_r>
81113e90:	1000041e 	bne	r2,zero,81113ea4 <_fseeko_r+0x3e8>
81113e94:	d8800117 	ldw	r2,4(sp)
81113e98:	00e00014 	movui	r3,32768
81113e9c:	10bc000c 	andi	r2,r2,61440
81113ea0:	10ff7c26 	beq	r2,r3,81113c94 <__reset+0xfb0f3c94>
81113ea4:	8080030b 	ldhu	r2,12(r16)
81113ea8:	003f3d06 	br	81113ba0 <__reset+0xfb0f3ba0>
81113eac:	800b883a 	mov	r5,r16
81113eb0:	8809883a 	mov	r4,r17
81113eb4:	11140980 	call	81114098 <__smakebuf_r>
81113eb8:	003f3106 	br	81113b80 <__reset+0xfb0f3b80>
81113ebc:	81400717 	ldw	r5,28(r16)
81113ec0:	01c00044 	movi	r7,1
81113ec4:	000d883a 	mov	r6,zero
81113ec8:	8809883a 	mov	r4,r17
81113ecc:	a03ee83a 	callr	r20
81113ed0:	00ffffc4 	movi	r3,-1
81113ed4:	10ff7b1e 	bne	r2,r3,81113cc4 <__reset+0xfb0f3cc4>
81113ed8:	003f3306 	br	81113ba8 <__reset+0xfb0f3ba8>
81113edc:	80c00017 	ldw	r3,0(r16)
81113ee0:	80800417 	ldw	r2,16(r16)
81113ee4:	000b883a 	mov	r5,zero
81113ee8:	1887c83a 	sub	r3,r3,r2
81113eec:	98e7c83a 	sub	r19,r19,r3
81113ef0:	30c7883a 	add	r3,r6,r3
81113ef4:	003f7f06 	br	81113cf4 <__reset+0xfb0f3cf4>
81113ef8:	00800744 	movi	r2,29
81113efc:	88800015 	stw	r2,0(r17)
81113f00:	04ffffc4 	movi	r19,-1
81113f04:	003f0e06 	br	81113b40 <__reset+0xfb0f3b40>

81113f08 <fseeko>:
81113f08:	00a04534 	movhi	r2,33044
81113f0c:	10928704 	addi	r2,r2,18972
81113f10:	300f883a 	mov	r7,r6
81113f14:	280d883a 	mov	r6,r5
81113f18:	200b883a 	mov	r5,r4
81113f1c:	11000017 	ldw	r4,0(r2)
81113f20:	1113abc1 	jmpi	81113abc <_fseeko_r>

81113f24 <_fstat_r>:
81113f24:	defffd04 	addi	sp,sp,-12
81113f28:	de00012e 	bgeu	sp,et,81113f30 <_fstat_r+0xc>
81113f2c:	003b68fa 	trap	3
81113f30:	2805883a 	mov	r2,r5
81113f34:	dc000015 	stw	r16,0(sp)
81113f38:	04204534 	movhi	r16,33044
81113f3c:	dc400115 	stw	r17,4(sp)
81113f40:	8412e404 	addi	r16,r16,19344
81113f44:	2023883a 	mov	r17,r4
81113f48:	300b883a 	mov	r5,r6
81113f4c:	1009883a 	mov	r4,r2
81113f50:	dfc00215 	stw	ra,8(sp)
81113f54:	80000015 	stw	zero,0(r16)
81113f58:	11295300 	call	81129530 <fstat>
81113f5c:	00ffffc4 	movi	r3,-1
81113f60:	10c00526 	beq	r2,r3,81113f78 <_fstat_r+0x54>
81113f64:	dfc00217 	ldw	ra,8(sp)
81113f68:	dc400117 	ldw	r17,4(sp)
81113f6c:	dc000017 	ldw	r16,0(sp)
81113f70:	dec00304 	addi	sp,sp,12
81113f74:	f800283a 	ret
81113f78:	80c00017 	ldw	r3,0(r16)
81113f7c:	183ff926 	beq	r3,zero,81113f64 <__reset+0xfb0f3f64>
81113f80:	88c00015 	stw	r3,0(r17)
81113f84:	003ff706 	br	81113f64 <__reset+0xfb0f3f64>

81113f88 <_fwrite_r>:
81113f88:	defff504 	addi	sp,sp,-44
81113f8c:	de00012e 	bgeu	sp,et,81113f94 <_fwrite_r+0xc>
81113f90:	003b68fa 	trap	3
81113f94:	dc800815 	stw	r18,32(sp)
81113f98:	39a5383a 	mul	r18,r7,r6
81113f9c:	d8800304 	addi	r2,sp,12
81113fa0:	d8800015 	stw	r2,0(sp)
81113fa4:	00800044 	movi	r2,1
81113fa8:	dcc00915 	stw	r19,36(sp)
81113fac:	dc400715 	stw	r17,28(sp)
81113fb0:	dc000615 	stw	r16,24(sp)
81113fb4:	d9400315 	stw	r5,12(sp)
81113fb8:	dfc00a15 	stw	ra,40(sp)
81113fbc:	dc800415 	stw	r18,16(sp)
81113fc0:	dc800215 	stw	r18,8(sp)
81113fc4:	d8800115 	stw	r2,4(sp)
81113fc8:	3027883a 	mov	r19,r6
81113fcc:	3821883a 	mov	r16,r7
81113fd0:	2023883a 	mov	r17,r4
81113fd4:	d9400b17 	ldw	r5,44(sp)
81113fd8:	20000226 	beq	r4,zero,81113fe4 <_fwrite_r+0x5c>
81113fdc:	20800e17 	ldw	r2,56(r4)
81113fe0:	10001a26 	beq	r2,zero,8111404c <_fwrite_r+0xc4>
81113fe4:	2880030b 	ldhu	r2,12(r5)
81113fe8:	10c8000c 	andi	r3,r2,8192
81113fec:	1800061e 	bne	r3,zero,81114008 <_fwrite_r+0x80>
81113ff0:	29001917 	ldw	r4,100(r5)
81113ff4:	00f7ffc4 	movi	r3,-8193
81113ff8:	10880014 	ori	r2,r2,8192
81113ffc:	20c6703a 	and	r3,r4,r3
81114000:	2880030d 	sth	r2,12(r5)
81114004:	28c01915 	stw	r3,100(r5)
81114008:	d80d883a 	mov	r6,sp
8111400c:	8809883a 	mov	r4,r17
81114010:	111e0080 	call	8111e008 <__sfvwrite_r>
81114014:	10000b26 	beq	r2,zero,81114044 <_fwrite_r+0xbc>
81114018:	d9000217 	ldw	r4,8(sp)
8111401c:	980b883a 	mov	r5,r19
81114020:	9109c83a 	sub	r4,r18,r4
81114024:	11270780 	call	81127078 <__udivsi3>
81114028:	dfc00a17 	ldw	ra,40(sp)
8111402c:	dcc00917 	ldw	r19,36(sp)
81114030:	dc800817 	ldw	r18,32(sp)
81114034:	dc400717 	ldw	r17,28(sp)
81114038:	dc000617 	ldw	r16,24(sp)
8111403c:	dec00b04 	addi	sp,sp,44
81114040:	f800283a 	ret
81114044:	8005883a 	mov	r2,r16
81114048:	003ff706 	br	81114028 <__reset+0xfb0f4028>
8111404c:	d9400515 	stw	r5,20(sp)
81114050:	111d8580 	call	8111d858 <__sinit>
81114054:	d9400517 	ldw	r5,20(sp)
81114058:	003fe206 	br	81113fe4 <__reset+0xfb0f3fe4>

8111405c <fwrite>:
8111405c:	defffe04 	addi	sp,sp,-8
81114060:	00a04534 	movhi	r2,33044
81114064:	de00012e 	bgeu	sp,et,8111406c <fwrite+0x10>
81114068:	003b68fa 	trap	3
8111406c:	10928704 	addi	r2,r2,18972
81114070:	d9c00015 	stw	r7,0(sp)
81114074:	300f883a 	mov	r7,r6
81114078:	280d883a 	mov	r6,r5
8111407c:	200b883a 	mov	r5,r4
81114080:	11000017 	ldw	r4,0(r2)
81114084:	dfc00115 	stw	ra,4(sp)
81114088:	1113f880 	call	81113f88 <_fwrite_r>
8111408c:	dfc00117 	ldw	ra,4(sp)
81114090:	dec00204 	addi	sp,sp,8
81114094:	f800283a 	ret

81114098 <__smakebuf_r>:
81114098:	2880030b 	ldhu	r2,12(r5)
8111409c:	10c0008c 	andi	r3,r2,2
811140a0:	1800431e 	bne	r3,zero,811141b0 <__smakebuf_r+0x118>
811140a4:	deffec04 	addi	sp,sp,-80
811140a8:	de00012e 	bgeu	sp,et,811140b0 <__smakebuf_r+0x18>
811140ac:	003b68fa 	trap	3
811140b0:	dc000f15 	stw	r16,60(sp)
811140b4:	2821883a 	mov	r16,r5
811140b8:	2940038f 	ldh	r5,14(r5)
811140bc:	dc401015 	stw	r17,64(sp)
811140c0:	dfc01315 	stw	ra,76(sp)
811140c4:	dcc01215 	stw	r19,72(sp)
811140c8:	dc801115 	stw	r18,68(sp)
811140cc:	2023883a 	mov	r17,r4
811140d0:	28001c16 	blt	r5,zero,81114144 <__smakebuf_r+0xac>
811140d4:	d80d883a 	mov	r6,sp
811140d8:	1113f240 	call	81113f24 <_fstat_r>
811140dc:	10001816 	blt	r2,zero,81114140 <__smakebuf_r+0xa8>
811140e0:	d8800117 	ldw	r2,4(sp)
811140e4:	00e00014 	movui	r3,32768
811140e8:	10bc000c 	andi	r2,r2,61440
811140ec:	14c80020 	cmpeqi	r19,r2,8192
811140f0:	10c03726 	beq	r2,r3,811141d0 <__smakebuf_r+0x138>
811140f4:	80c0030b 	ldhu	r3,12(r16)
811140f8:	18c20014 	ori	r3,r3,2048
811140fc:	80c0030d 	sth	r3,12(r16)
81114100:	00c80004 	movi	r3,8192
81114104:	10c0521e 	bne	r2,r3,81114250 <__smakebuf_r+0x1b8>
81114108:	8140038f 	ldh	r5,14(r16)
8111410c:	8809883a 	mov	r4,r17
81114110:	111e6640 	call	8111e664 <_isatty_r>
81114114:	10004c26 	beq	r2,zero,81114248 <__smakebuf_r+0x1b0>
81114118:	8080030b 	ldhu	r2,12(r16)
8111411c:	80c010c4 	addi	r3,r16,67
81114120:	80c00015 	stw	r3,0(r16)
81114124:	10800054 	ori	r2,r2,1
81114128:	8080030d 	sth	r2,12(r16)
8111412c:	00800044 	movi	r2,1
81114130:	80c00415 	stw	r3,16(r16)
81114134:	80800515 	stw	r2,20(r16)
81114138:	04810004 	movi	r18,1024
8111413c:	00000706 	br	8111415c <__smakebuf_r+0xc4>
81114140:	8080030b 	ldhu	r2,12(r16)
81114144:	10c0200c 	andi	r3,r2,128
81114148:	18001f1e 	bne	r3,zero,811141c8 <__smakebuf_r+0x130>
8111414c:	04810004 	movi	r18,1024
81114150:	10820014 	ori	r2,r2,2048
81114154:	8080030d 	sth	r2,12(r16)
81114158:	0027883a 	mov	r19,zero
8111415c:	900b883a 	mov	r5,r18
81114160:	8809883a 	mov	r4,r17
81114164:	111425c0 	call	8111425c <_malloc_r>
81114168:	10002c26 	beq	r2,zero,8111421c <__smakebuf_r+0x184>
8111416c:	80c0030b 	ldhu	r3,12(r16)
81114170:	012044b4 	movhi	r4,33042
81114174:	21353e04 	addi	r4,r4,-11016
81114178:	89000f15 	stw	r4,60(r17)
8111417c:	18c02014 	ori	r3,r3,128
81114180:	80c0030d 	sth	r3,12(r16)
81114184:	80800015 	stw	r2,0(r16)
81114188:	80800415 	stw	r2,16(r16)
8111418c:	84800515 	stw	r18,20(r16)
81114190:	98001a1e 	bne	r19,zero,811141fc <__smakebuf_r+0x164>
81114194:	dfc01317 	ldw	ra,76(sp)
81114198:	dcc01217 	ldw	r19,72(sp)
8111419c:	dc801117 	ldw	r18,68(sp)
811141a0:	dc401017 	ldw	r17,64(sp)
811141a4:	dc000f17 	ldw	r16,60(sp)
811141a8:	dec01404 	addi	sp,sp,80
811141ac:	f800283a 	ret
811141b0:	288010c4 	addi	r2,r5,67
811141b4:	28800015 	stw	r2,0(r5)
811141b8:	28800415 	stw	r2,16(r5)
811141bc:	00800044 	movi	r2,1
811141c0:	28800515 	stw	r2,20(r5)
811141c4:	f800283a 	ret
811141c8:	04801004 	movi	r18,64
811141cc:	003fe006 	br	81114150 <__reset+0xfb0f4150>
811141d0:	81000a17 	ldw	r4,40(r16)
811141d4:	00e04474 	movhi	r3,33041
811141d8:	18d53304 	addi	r3,r3,21708
811141dc:	20ffc51e 	bne	r4,r3,811140f4 <__reset+0xfb0f40f4>
811141e0:	8080030b 	ldhu	r2,12(r16)
811141e4:	04810004 	movi	r18,1024
811141e8:	84801315 	stw	r18,76(r16)
811141ec:	1484b03a 	or	r2,r2,r18
811141f0:	8080030d 	sth	r2,12(r16)
811141f4:	0027883a 	mov	r19,zero
811141f8:	003fd806 	br	8111415c <__reset+0xfb0f415c>
811141fc:	8140038f 	ldh	r5,14(r16)
81114200:	8809883a 	mov	r4,r17
81114204:	111e6640 	call	8111e664 <_isatty_r>
81114208:	103fe226 	beq	r2,zero,81114194 <__reset+0xfb0f4194>
8111420c:	8080030b 	ldhu	r2,12(r16)
81114210:	10800054 	ori	r2,r2,1
81114214:	8080030d 	sth	r2,12(r16)
81114218:	003fde06 	br	81114194 <__reset+0xfb0f4194>
8111421c:	8080030b 	ldhu	r2,12(r16)
81114220:	10c0800c 	andi	r3,r2,512
81114224:	183fdb1e 	bne	r3,zero,81114194 <__reset+0xfb0f4194>
81114228:	10800094 	ori	r2,r2,2
8111422c:	80c010c4 	addi	r3,r16,67
81114230:	8080030d 	sth	r2,12(r16)
81114234:	00800044 	movi	r2,1
81114238:	80c00015 	stw	r3,0(r16)
8111423c:	80c00415 	stw	r3,16(r16)
81114240:	80800515 	stw	r2,20(r16)
81114244:	003fd306 	br	81114194 <__reset+0xfb0f4194>
81114248:	04810004 	movi	r18,1024
8111424c:	003fc306 	br	8111415c <__reset+0xfb0f415c>
81114250:	0027883a 	mov	r19,zero
81114254:	04810004 	movi	r18,1024
81114258:	003fc006 	br	8111415c <__reset+0xfb0f415c>

8111425c <_malloc_r>:
8111425c:	defff504 	addi	sp,sp,-44
81114260:	de00012e 	bgeu	sp,et,81114268 <_malloc_r+0xc>
81114264:	003b68fa 	trap	3
81114268:	288002c4 	addi	r2,r5,11
8111426c:	dc800315 	stw	r18,12(sp)
81114270:	dfc00a15 	stw	ra,40(sp)
81114274:	df000915 	stw	fp,36(sp)
81114278:	ddc00815 	stw	r23,32(sp)
8111427c:	dd800715 	stw	r22,28(sp)
81114280:	dd400615 	stw	r21,24(sp)
81114284:	dd000515 	stw	r20,20(sp)
81114288:	dcc00415 	stw	r19,16(sp)
8111428c:	dc400215 	stw	r17,8(sp)
81114290:	dc000115 	stw	r16,4(sp)
81114294:	00c00584 	movi	r3,22
81114298:	2025883a 	mov	r18,r4
8111429c:	18807f2e 	bgeu	r3,r2,8111449c <_malloc_r+0x240>
811142a0:	047ffe04 	movi	r17,-8
811142a4:	1462703a 	and	r17,r2,r17
811142a8:	8800a316 	blt	r17,zero,81114538 <_malloc_r+0x2dc>
811142ac:	8940a236 	bltu	r17,r5,81114538 <_malloc_r+0x2dc>
811142b0:	112b0b80 	call	8112b0b8 <__malloc_lock>
811142b4:	00807dc4 	movi	r2,503
811142b8:	1441e92e 	bgeu	r2,r17,81114a60 <_malloc_r+0x804>
811142bc:	8804d27a 	srli	r2,r17,9
811142c0:	1000a126 	beq	r2,zero,81114548 <_malloc_r+0x2ec>
811142c4:	00c00104 	movi	r3,4
811142c8:	18811e36 	bltu	r3,r2,81114744 <_malloc_r+0x4e8>
811142cc:	8804d1ba 	srli	r2,r17,6
811142d0:	12000e44 	addi	r8,r2,57
811142d4:	11c00e04 	addi	r7,r2,56
811142d8:	4209883a 	add	r4,r8,r8
811142dc:	04e04534 	movhi	r19,33044
811142e0:	2109883a 	add	r4,r4,r4
811142e4:	9ccc4504 	addi	r19,r19,12564
811142e8:	2109883a 	add	r4,r4,r4
811142ec:	9909883a 	add	r4,r19,r4
811142f0:	24000117 	ldw	r16,4(r4)
811142f4:	213ffe04 	addi	r4,r4,-8
811142f8:	24009726 	beq	r4,r16,81114558 <_malloc_r+0x2fc>
811142fc:	80800117 	ldw	r2,4(r16)
81114300:	01bfff04 	movi	r6,-4
81114304:	014003c4 	movi	r5,15
81114308:	1184703a 	and	r2,r2,r6
8111430c:	1447c83a 	sub	r3,r2,r17
81114310:	28c00716 	blt	r5,r3,81114330 <_malloc_r+0xd4>
81114314:	1800920e 	bge	r3,zero,81114560 <_malloc_r+0x304>
81114318:	84000317 	ldw	r16,12(r16)
8111431c:	24008e26 	beq	r4,r16,81114558 <_malloc_r+0x2fc>
81114320:	80800117 	ldw	r2,4(r16)
81114324:	1184703a 	and	r2,r2,r6
81114328:	1447c83a 	sub	r3,r2,r17
8111432c:	28fff90e 	bge	r5,r3,81114314 <__reset+0xfb0f4314>
81114330:	3809883a 	mov	r4,r7
81114334:	01a04534 	movhi	r6,33044
81114338:	9c000417 	ldw	r16,16(r19)
8111433c:	318c4504 	addi	r6,r6,12564
81114340:	32000204 	addi	r8,r6,8
81114344:	82013426 	beq	r16,r8,81114818 <_malloc_r+0x5bc>
81114348:	80c00117 	ldw	r3,4(r16)
8111434c:	00bfff04 	movi	r2,-4
81114350:	188e703a 	and	r7,r3,r2
81114354:	3c45c83a 	sub	r2,r7,r17
81114358:	00c003c4 	movi	r3,15
8111435c:	18811f16 	blt	r3,r2,811147dc <_malloc_r+0x580>
81114360:	32000515 	stw	r8,20(r6)
81114364:	32000415 	stw	r8,16(r6)
81114368:	10007f0e 	bge	r2,zero,81114568 <_malloc_r+0x30c>
8111436c:	00807fc4 	movi	r2,511
81114370:	11c0fd36 	bltu	r2,r7,81114768 <_malloc_r+0x50c>
81114374:	3806d0fa 	srli	r3,r7,3
81114378:	01c00044 	movi	r7,1
8111437c:	30800117 	ldw	r2,4(r6)
81114380:	19400044 	addi	r5,r3,1
81114384:	294b883a 	add	r5,r5,r5
81114388:	1807d0ba 	srai	r3,r3,2
8111438c:	294b883a 	add	r5,r5,r5
81114390:	294b883a 	add	r5,r5,r5
81114394:	298b883a 	add	r5,r5,r6
81114398:	38c6983a 	sll	r3,r7,r3
8111439c:	29c00017 	ldw	r7,0(r5)
811143a0:	2a7ffe04 	addi	r9,r5,-8
811143a4:	1886b03a 	or	r3,r3,r2
811143a8:	82400315 	stw	r9,12(r16)
811143ac:	81c00215 	stw	r7,8(r16)
811143b0:	30c00115 	stw	r3,4(r6)
811143b4:	2c000015 	stw	r16,0(r5)
811143b8:	3c000315 	stw	r16,12(r7)
811143bc:	2005d0ba 	srai	r2,r4,2
811143c0:	01400044 	movi	r5,1
811143c4:	288a983a 	sll	r5,r5,r2
811143c8:	19406f36 	bltu	r3,r5,81114588 <_malloc_r+0x32c>
811143cc:	28c4703a 	and	r2,r5,r3
811143d0:	10000a1e 	bne	r2,zero,811143fc <_malloc_r+0x1a0>
811143d4:	00bfff04 	movi	r2,-4
811143d8:	294b883a 	add	r5,r5,r5
811143dc:	2088703a 	and	r4,r4,r2
811143e0:	28c4703a 	and	r2,r5,r3
811143e4:	21000104 	addi	r4,r4,4
811143e8:	1000041e 	bne	r2,zero,811143fc <_malloc_r+0x1a0>
811143ec:	294b883a 	add	r5,r5,r5
811143f0:	28c4703a 	and	r2,r5,r3
811143f4:	21000104 	addi	r4,r4,4
811143f8:	103ffc26 	beq	r2,zero,811143ec <__reset+0xfb0f43ec>
811143fc:	02bfff04 	movi	r10,-4
81114400:	024003c4 	movi	r9,15
81114404:	21800044 	addi	r6,r4,1
81114408:	318d883a 	add	r6,r6,r6
8111440c:	318d883a 	add	r6,r6,r6
81114410:	318d883a 	add	r6,r6,r6
81114414:	998d883a 	add	r6,r19,r6
81114418:	333ffe04 	addi	r12,r6,-8
8111441c:	2017883a 	mov	r11,r4
81114420:	31800104 	addi	r6,r6,4
81114424:	34000017 	ldw	r16,0(r6)
81114428:	31fffd04 	addi	r7,r6,-12
8111442c:	81c0041e 	bne	r16,r7,81114440 <_malloc_r+0x1e4>
81114430:	0000fb06 	br	81114820 <_malloc_r+0x5c4>
81114434:	1801030e 	bge	r3,zero,81114844 <_malloc_r+0x5e8>
81114438:	84000317 	ldw	r16,12(r16)
8111443c:	81c0f826 	beq	r16,r7,81114820 <_malloc_r+0x5c4>
81114440:	80800117 	ldw	r2,4(r16)
81114444:	1284703a 	and	r2,r2,r10
81114448:	1447c83a 	sub	r3,r2,r17
8111444c:	48fff90e 	bge	r9,r3,81114434 <__reset+0xfb0f4434>
81114450:	80800317 	ldw	r2,12(r16)
81114454:	81000217 	ldw	r4,8(r16)
81114458:	89400054 	ori	r5,r17,1
8111445c:	81400115 	stw	r5,4(r16)
81114460:	20800315 	stw	r2,12(r4)
81114464:	11000215 	stw	r4,8(r2)
81114468:	8463883a 	add	r17,r16,r17
8111446c:	9c400515 	stw	r17,20(r19)
81114470:	9c400415 	stw	r17,16(r19)
81114474:	18800054 	ori	r2,r3,1
81114478:	88800115 	stw	r2,4(r17)
8111447c:	8a000315 	stw	r8,12(r17)
81114480:	8a000215 	stw	r8,8(r17)
81114484:	88e3883a 	add	r17,r17,r3
81114488:	88c00015 	stw	r3,0(r17)
8111448c:	9009883a 	mov	r4,r18
81114490:	112b1e00 	call	8112b1e0 <__malloc_unlock>
81114494:	80800204 	addi	r2,r16,8
81114498:	00001b06 	br	81114508 <_malloc_r+0x2ac>
8111449c:	04400404 	movi	r17,16
811144a0:	89402536 	bltu	r17,r5,81114538 <_malloc_r+0x2dc>
811144a4:	112b0b80 	call	8112b0b8 <__malloc_lock>
811144a8:	00800184 	movi	r2,6
811144ac:	01000084 	movi	r4,2
811144b0:	04e04534 	movhi	r19,33044
811144b4:	1085883a 	add	r2,r2,r2
811144b8:	9ccc4504 	addi	r19,r19,12564
811144bc:	1085883a 	add	r2,r2,r2
811144c0:	9885883a 	add	r2,r19,r2
811144c4:	14000117 	ldw	r16,4(r2)
811144c8:	10fffe04 	addi	r3,r2,-8
811144cc:	80c0d926 	beq	r16,r3,81114834 <_malloc_r+0x5d8>
811144d0:	80c00117 	ldw	r3,4(r16)
811144d4:	81000317 	ldw	r4,12(r16)
811144d8:	00bfff04 	movi	r2,-4
811144dc:	1884703a 	and	r2,r3,r2
811144e0:	81400217 	ldw	r5,8(r16)
811144e4:	8085883a 	add	r2,r16,r2
811144e8:	10c00117 	ldw	r3,4(r2)
811144ec:	29000315 	stw	r4,12(r5)
811144f0:	21400215 	stw	r5,8(r4)
811144f4:	18c00054 	ori	r3,r3,1
811144f8:	10c00115 	stw	r3,4(r2)
811144fc:	9009883a 	mov	r4,r18
81114500:	112b1e00 	call	8112b1e0 <__malloc_unlock>
81114504:	80800204 	addi	r2,r16,8
81114508:	dfc00a17 	ldw	ra,40(sp)
8111450c:	df000917 	ldw	fp,36(sp)
81114510:	ddc00817 	ldw	r23,32(sp)
81114514:	dd800717 	ldw	r22,28(sp)
81114518:	dd400617 	ldw	r21,24(sp)
8111451c:	dd000517 	ldw	r20,20(sp)
81114520:	dcc00417 	ldw	r19,16(sp)
81114524:	dc800317 	ldw	r18,12(sp)
81114528:	dc400217 	ldw	r17,8(sp)
8111452c:	dc000117 	ldw	r16,4(sp)
81114530:	dec00b04 	addi	sp,sp,44
81114534:	f800283a 	ret
81114538:	00800304 	movi	r2,12
8111453c:	90800015 	stw	r2,0(r18)
81114540:	0005883a 	mov	r2,zero
81114544:	003ff006 	br	81114508 <__reset+0xfb0f4508>
81114548:	01002004 	movi	r4,128
8111454c:	02001004 	movi	r8,64
81114550:	01c00fc4 	movi	r7,63
81114554:	003f6106 	br	811142dc <__reset+0xfb0f42dc>
81114558:	4009883a 	mov	r4,r8
8111455c:	003f7506 	br	81114334 <__reset+0xfb0f4334>
81114560:	81000317 	ldw	r4,12(r16)
81114564:	003fde06 	br	811144e0 <__reset+0xfb0f44e0>
81114568:	81c5883a 	add	r2,r16,r7
8111456c:	11400117 	ldw	r5,4(r2)
81114570:	9009883a 	mov	r4,r18
81114574:	29400054 	ori	r5,r5,1
81114578:	11400115 	stw	r5,4(r2)
8111457c:	112b1e00 	call	8112b1e0 <__malloc_unlock>
81114580:	80800204 	addi	r2,r16,8
81114584:	003fe006 	br	81114508 <__reset+0xfb0f4508>
81114588:	9c000217 	ldw	r16,8(r19)
8111458c:	00bfff04 	movi	r2,-4
81114590:	85800117 	ldw	r22,4(r16)
81114594:	b0ac703a 	and	r22,r22,r2
81114598:	b4400336 	bltu	r22,r17,811145a8 <_malloc_r+0x34c>
8111459c:	b445c83a 	sub	r2,r22,r17
811145a0:	00c003c4 	movi	r3,15
811145a4:	18805d16 	blt	r3,r2,8111471c <_malloc_r+0x4c0>
811145a8:	05e04534 	movhi	r23,33044
811145ac:	00a04534 	movhi	r2,33044
811145b0:	1092e704 	addi	r2,r2,19356
811145b4:	bdd28804 	addi	r23,r23,18976
811145b8:	15400017 	ldw	r21,0(r2)
811145bc:	b8c00017 	ldw	r3,0(r23)
811145c0:	00bfffc4 	movi	r2,-1
811145c4:	858d883a 	add	r6,r16,r22
811145c8:	8d6b883a 	add	r21,r17,r21
811145cc:	1880ea26 	beq	r3,r2,81114978 <_malloc_r+0x71c>
811145d0:	ad4403c4 	addi	r21,r21,4111
811145d4:	00bc0004 	movi	r2,-4096
811145d8:	a8aa703a 	and	r21,r21,r2
811145dc:	a80b883a 	mov	r5,r21
811145e0:	9009883a 	mov	r4,r18
811145e4:	d9800015 	stw	r6,0(sp)
811145e8:	11152380 	call	81115238 <_sbrk_r>
811145ec:	1029883a 	mov	r20,r2
811145f0:	00bfffc4 	movi	r2,-1
811145f4:	d9800017 	ldw	r6,0(sp)
811145f8:	a080e826 	beq	r20,r2,8111499c <_malloc_r+0x740>
811145fc:	a180a636 	bltu	r20,r6,81114898 <_malloc_r+0x63c>
81114600:	07204534 	movhi	fp,33044
81114604:	e7134a04 	addi	fp,fp,19752
81114608:	e0800017 	ldw	r2,0(fp)
8111460c:	a887883a 	add	r3,r21,r2
81114610:	e0c00015 	stw	r3,0(fp)
81114614:	3500e626 	beq	r6,r20,811149b0 <_malloc_r+0x754>
81114618:	b9000017 	ldw	r4,0(r23)
8111461c:	00bfffc4 	movi	r2,-1
81114620:	2080ee26 	beq	r4,r2,811149dc <_malloc_r+0x780>
81114624:	a185c83a 	sub	r2,r20,r6
81114628:	10c5883a 	add	r2,r2,r3
8111462c:	e0800015 	stw	r2,0(fp)
81114630:	a0c001cc 	andi	r3,r20,7
81114634:	1800bc26 	beq	r3,zero,81114928 <_malloc_r+0x6cc>
81114638:	a0e9c83a 	sub	r20,r20,r3
8111463c:	00840204 	movi	r2,4104
81114640:	a5000204 	addi	r20,r20,8
81114644:	10c7c83a 	sub	r3,r2,r3
81114648:	a545883a 	add	r2,r20,r21
8111464c:	1083ffcc 	andi	r2,r2,4095
81114650:	18abc83a 	sub	r21,r3,r2
81114654:	a80b883a 	mov	r5,r21
81114658:	9009883a 	mov	r4,r18
8111465c:	11152380 	call	81115238 <_sbrk_r>
81114660:	00ffffc4 	movi	r3,-1
81114664:	10c0e126 	beq	r2,r3,811149ec <_malloc_r+0x790>
81114668:	1505c83a 	sub	r2,r2,r20
8111466c:	1545883a 	add	r2,r2,r21
81114670:	10800054 	ori	r2,r2,1
81114674:	e0c00017 	ldw	r3,0(fp)
81114678:	9d000215 	stw	r20,8(r19)
8111467c:	a0800115 	stw	r2,4(r20)
81114680:	a8c7883a 	add	r3,r21,r3
81114684:	e0c00015 	stw	r3,0(fp)
81114688:	84c00e26 	beq	r16,r19,811146c4 <_malloc_r+0x468>
8111468c:	018003c4 	movi	r6,15
81114690:	3580a72e 	bgeu	r6,r22,81114930 <_malloc_r+0x6d4>
81114694:	81400117 	ldw	r5,4(r16)
81114698:	013ffe04 	movi	r4,-8
8111469c:	b0bffd04 	addi	r2,r22,-12
811146a0:	1104703a 	and	r2,r2,r4
811146a4:	2900004c 	andi	r4,r5,1
811146a8:	2088b03a 	or	r4,r4,r2
811146ac:	81000115 	stw	r4,4(r16)
811146b0:	01400144 	movi	r5,5
811146b4:	8089883a 	add	r4,r16,r2
811146b8:	21400115 	stw	r5,4(r4)
811146bc:	21400215 	stw	r5,8(r4)
811146c0:	3080cd36 	bltu	r6,r2,811149f8 <_malloc_r+0x79c>
811146c4:	00a04534 	movhi	r2,33044
811146c8:	1092e604 	addi	r2,r2,19352
811146cc:	11000017 	ldw	r4,0(r2)
811146d0:	20c0012e 	bgeu	r4,r3,811146d8 <_malloc_r+0x47c>
811146d4:	10c00015 	stw	r3,0(r2)
811146d8:	00a04534 	movhi	r2,33044
811146dc:	1092e504 	addi	r2,r2,19348
811146e0:	11000017 	ldw	r4,0(r2)
811146e4:	9c000217 	ldw	r16,8(r19)
811146e8:	20c0012e 	bgeu	r4,r3,811146f0 <_malloc_r+0x494>
811146ec:	10c00015 	stw	r3,0(r2)
811146f0:	80c00117 	ldw	r3,4(r16)
811146f4:	00bfff04 	movi	r2,-4
811146f8:	1886703a 	and	r3,r3,r2
811146fc:	1c45c83a 	sub	r2,r3,r17
81114700:	1c400236 	bltu	r3,r17,8111470c <_malloc_r+0x4b0>
81114704:	00c003c4 	movi	r3,15
81114708:	18800416 	blt	r3,r2,8111471c <_malloc_r+0x4c0>
8111470c:	9009883a 	mov	r4,r18
81114710:	112b1e00 	call	8112b1e0 <__malloc_unlock>
81114714:	0005883a 	mov	r2,zero
81114718:	003f7b06 	br	81114508 <__reset+0xfb0f4508>
8111471c:	88c00054 	ori	r3,r17,1
81114720:	80c00115 	stw	r3,4(r16)
81114724:	8463883a 	add	r17,r16,r17
81114728:	10800054 	ori	r2,r2,1
8111472c:	9c400215 	stw	r17,8(r19)
81114730:	88800115 	stw	r2,4(r17)
81114734:	9009883a 	mov	r4,r18
81114738:	112b1e00 	call	8112b1e0 <__malloc_unlock>
8111473c:	80800204 	addi	r2,r16,8
81114740:	003f7106 	br	81114508 <__reset+0xfb0f4508>
81114744:	00c00504 	movi	r3,20
81114748:	18804a2e 	bgeu	r3,r2,81114874 <_malloc_r+0x618>
8111474c:	00c01504 	movi	r3,84
81114750:	18806e36 	bltu	r3,r2,8111490c <_malloc_r+0x6b0>
81114754:	8804d33a 	srli	r2,r17,12
81114758:	12001bc4 	addi	r8,r2,111
8111475c:	11c01b84 	addi	r7,r2,110
81114760:	4209883a 	add	r4,r8,r8
81114764:	003edd06 	br	811142dc <__reset+0xfb0f42dc>
81114768:	3804d27a 	srli	r2,r7,9
8111476c:	00c00104 	movi	r3,4
81114770:	1880442e 	bgeu	r3,r2,81114884 <_malloc_r+0x628>
81114774:	00c00504 	movi	r3,20
81114778:	18808136 	bltu	r3,r2,81114980 <_malloc_r+0x724>
8111477c:	11401704 	addi	r5,r2,92
81114780:	10c016c4 	addi	r3,r2,91
81114784:	294b883a 	add	r5,r5,r5
81114788:	294b883a 	add	r5,r5,r5
8111478c:	294b883a 	add	r5,r5,r5
81114790:	994b883a 	add	r5,r19,r5
81114794:	28800017 	ldw	r2,0(r5)
81114798:	01a04534 	movhi	r6,33044
8111479c:	297ffe04 	addi	r5,r5,-8
811147a0:	318c4504 	addi	r6,r6,12564
811147a4:	28806526 	beq	r5,r2,8111493c <_malloc_r+0x6e0>
811147a8:	01bfff04 	movi	r6,-4
811147ac:	10c00117 	ldw	r3,4(r2)
811147b0:	1986703a 	and	r3,r3,r6
811147b4:	38c0022e 	bgeu	r7,r3,811147c0 <_malloc_r+0x564>
811147b8:	10800217 	ldw	r2,8(r2)
811147bc:	28bffb1e 	bne	r5,r2,811147ac <__reset+0xfb0f47ac>
811147c0:	11400317 	ldw	r5,12(r2)
811147c4:	98c00117 	ldw	r3,4(r19)
811147c8:	81400315 	stw	r5,12(r16)
811147cc:	80800215 	stw	r2,8(r16)
811147d0:	2c000215 	stw	r16,8(r5)
811147d4:	14000315 	stw	r16,12(r2)
811147d8:	003ef806 	br	811143bc <__reset+0xfb0f43bc>
811147dc:	88c00054 	ori	r3,r17,1
811147e0:	80c00115 	stw	r3,4(r16)
811147e4:	8463883a 	add	r17,r16,r17
811147e8:	34400515 	stw	r17,20(r6)
811147ec:	34400415 	stw	r17,16(r6)
811147f0:	10c00054 	ori	r3,r2,1
811147f4:	8a000315 	stw	r8,12(r17)
811147f8:	8a000215 	stw	r8,8(r17)
811147fc:	88c00115 	stw	r3,4(r17)
81114800:	88a3883a 	add	r17,r17,r2
81114804:	88800015 	stw	r2,0(r17)
81114808:	9009883a 	mov	r4,r18
8111480c:	112b1e00 	call	8112b1e0 <__malloc_unlock>
81114810:	80800204 	addi	r2,r16,8
81114814:	003f3c06 	br	81114508 <__reset+0xfb0f4508>
81114818:	30c00117 	ldw	r3,4(r6)
8111481c:	003ee706 	br	811143bc <__reset+0xfb0f43bc>
81114820:	5ac00044 	addi	r11,r11,1
81114824:	588000cc 	andi	r2,r11,3
81114828:	31800204 	addi	r6,r6,8
8111482c:	103efd1e 	bne	r2,zero,81114424 <__reset+0xfb0f4424>
81114830:	00002406 	br	811148c4 <_malloc_r+0x668>
81114834:	14000317 	ldw	r16,12(r2)
81114838:	143f251e 	bne	r2,r16,811144d0 <__reset+0xfb0f44d0>
8111483c:	21000084 	addi	r4,r4,2
81114840:	003ebc06 	br	81114334 <__reset+0xfb0f4334>
81114844:	8085883a 	add	r2,r16,r2
81114848:	10c00117 	ldw	r3,4(r2)
8111484c:	81000317 	ldw	r4,12(r16)
81114850:	81400217 	ldw	r5,8(r16)
81114854:	18c00054 	ori	r3,r3,1
81114858:	10c00115 	stw	r3,4(r2)
8111485c:	29000315 	stw	r4,12(r5)
81114860:	21400215 	stw	r5,8(r4)
81114864:	9009883a 	mov	r4,r18
81114868:	112b1e00 	call	8112b1e0 <__malloc_unlock>
8111486c:	80800204 	addi	r2,r16,8
81114870:	003f2506 	br	81114508 <__reset+0xfb0f4508>
81114874:	12001704 	addi	r8,r2,92
81114878:	11c016c4 	addi	r7,r2,91
8111487c:	4209883a 	add	r4,r8,r8
81114880:	003e9606 	br	811142dc <__reset+0xfb0f42dc>
81114884:	3804d1ba 	srli	r2,r7,6
81114888:	11400e44 	addi	r5,r2,57
8111488c:	10c00e04 	addi	r3,r2,56
81114890:	294b883a 	add	r5,r5,r5
81114894:	003fbc06 	br	81114788 <__reset+0xfb0f4788>
81114898:	84ff5926 	beq	r16,r19,81114600 <__reset+0xfb0f4600>
8111489c:	00a04534 	movhi	r2,33044
811148a0:	108c4504 	addi	r2,r2,12564
811148a4:	14000217 	ldw	r16,8(r2)
811148a8:	00bfff04 	movi	r2,-4
811148ac:	80c00117 	ldw	r3,4(r16)
811148b0:	1886703a 	and	r3,r3,r2
811148b4:	003f9106 	br	811146fc <__reset+0xfb0f46fc>
811148b8:	60800217 	ldw	r2,8(r12)
811148bc:	213fffc4 	addi	r4,r4,-1
811148c0:	1300651e 	bne	r2,r12,81114a58 <_malloc_r+0x7fc>
811148c4:	208000cc 	andi	r2,r4,3
811148c8:	633ffe04 	addi	r12,r12,-8
811148cc:	103ffa1e 	bne	r2,zero,811148b8 <__reset+0xfb0f48b8>
811148d0:	98800117 	ldw	r2,4(r19)
811148d4:	0146303a 	nor	r3,zero,r5
811148d8:	1884703a 	and	r2,r3,r2
811148dc:	98800115 	stw	r2,4(r19)
811148e0:	294b883a 	add	r5,r5,r5
811148e4:	117f2836 	bltu	r2,r5,81114588 <__reset+0xfb0f4588>
811148e8:	283f2726 	beq	r5,zero,81114588 <__reset+0xfb0f4588>
811148ec:	2886703a 	and	r3,r5,r2
811148f0:	5809883a 	mov	r4,r11
811148f4:	183ec31e 	bne	r3,zero,81114404 <__reset+0xfb0f4404>
811148f8:	294b883a 	add	r5,r5,r5
811148fc:	2886703a 	and	r3,r5,r2
81114900:	21000104 	addi	r4,r4,4
81114904:	183ffc26 	beq	r3,zero,811148f8 <__reset+0xfb0f48f8>
81114908:	003ebe06 	br	81114404 <__reset+0xfb0f4404>
8111490c:	00c05504 	movi	r3,340
81114910:	18801236 	bltu	r3,r2,8111495c <_malloc_r+0x700>
81114914:	8804d3fa 	srli	r2,r17,15
81114918:	12001e04 	addi	r8,r2,120
8111491c:	11c01dc4 	addi	r7,r2,119
81114920:	4209883a 	add	r4,r8,r8
81114924:	003e6d06 	br	811142dc <__reset+0xfb0f42dc>
81114928:	00c40004 	movi	r3,4096
8111492c:	003f4606 	br	81114648 <__reset+0xfb0f4648>
81114930:	00800044 	movi	r2,1
81114934:	a0800115 	stw	r2,4(r20)
81114938:	003f7406 	br	8111470c <__reset+0xfb0f470c>
8111493c:	1805d0ba 	srai	r2,r3,2
81114940:	01c00044 	movi	r7,1
81114944:	30c00117 	ldw	r3,4(r6)
81114948:	388e983a 	sll	r7,r7,r2
8111494c:	2805883a 	mov	r2,r5
81114950:	38c6b03a 	or	r3,r7,r3
81114954:	30c00115 	stw	r3,4(r6)
81114958:	003f9b06 	br	811147c8 <__reset+0xfb0f47c8>
8111495c:	00c15504 	movi	r3,1364
81114960:	18801a36 	bltu	r3,r2,811149cc <_malloc_r+0x770>
81114964:	8804d4ba 	srli	r2,r17,18
81114968:	12001f44 	addi	r8,r2,125
8111496c:	11c01f04 	addi	r7,r2,124
81114970:	4209883a 	add	r4,r8,r8
81114974:	003e5906 	br	811142dc <__reset+0xfb0f42dc>
81114978:	ad400404 	addi	r21,r21,16
8111497c:	003f1706 	br	811145dc <__reset+0xfb0f45dc>
81114980:	00c01504 	movi	r3,84
81114984:	18802336 	bltu	r3,r2,81114a14 <_malloc_r+0x7b8>
81114988:	3804d33a 	srli	r2,r7,12
8111498c:	11401bc4 	addi	r5,r2,111
81114990:	10c01b84 	addi	r3,r2,110
81114994:	294b883a 	add	r5,r5,r5
81114998:	003f7b06 	br	81114788 <__reset+0xfb0f4788>
8111499c:	9c000217 	ldw	r16,8(r19)
811149a0:	00bfff04 	movi	r2,-4
811149a4:	80c00117 	ldw	r3,4(r16)
811149a8:	1886703a 	and	r3,r3,r2
811149ac:	003f5306 	br	811146fc <__reset+0xfb0f46fc>
811149b0:	3083ffcc 	andi	r2,r6,4095
811149b4:	103f181e 	bne	r2,zero,81114618 <__reset+0xfb0f4618>
811149b8:	99000217 	ldw	r4,8(r19)
811149bc:	b545883a 	add	r2,r22,r21
811149c0:	10800054 	ori	r2,r2,1
811149c4:	20800115 	stw	r2,4(r4)
811149c8:	003f3e06 	br	811146c4 <__reset+0xfb0f46c4>
811149cc:	01003f84 	movi	r4,254
811149d0:	02001fc4 	movi	r8,127
811149d4:	01c01f84 	movi	r7,126
811149d8:	003e4006 	br	811142dc <__reset+0xfb0f42dc>
811149dc:	00a04534 	movhi	r2,33044
811149e0:	10928804 	addi	r2,r2,18976
811149e4:	15000015 	stw	r20,0(r2)
811149e8:	003f1106 	br	81114630 <__reset+0xfb0f4630>
811149ec:	00800044 	movi	r2,1
811149f0:	002b883a 	mov	r21,zero
811149f4:	003f1f06 	br	81114674 <__reset+0xfb0f4674>
811149f8:	81400204 	addi	r5,r16,8
811149fc:	9009883a 	mov	r4,r18
81114a00:	111dcf00 	call	8111dcf0 <_free_r>
81114a04:	00a04534 	movhi	r2,33044
81114a08:	10934a04 	addi	r2,r2,19752
81114a0c:	10c00017 	ldw	r3,0(r2)
81114a10:	003f2c06 	br	811146c4 <__reset+0xfb0f46c4>
81114a14:	00c05504 	movi	r3,340
81114a18:	18800536 	bltu	r3,r2,81114a30 <_malloc_r+0x7d4>
81114a1c:	3804d3fa 	srli	r2,r7,15
81114a20:	11401e04 	addi	r5,r2,120
81114a24:	10c01dc4 	addi	r3,r2,119
81114a28:	294b883a 	add	r5,r5,r5
81114a2c:	003f5606 	br	81114788 <__reset+0xfb0f4788>
81114a30:	00c15504 	movi	r3,1364
81114a34:	18800536 	bltu	r3,r2,81114a4c <_malloc_r+0x7f0>
81114a38:	3804d4ba 	srli	r2,r7,18
81114a3c:	11401f44 	addi	r5,r2,125
81114a40:	10c01f04 	addi	r3,r2,124
81114a44:	294b883a 	add	r5,r5,r5
81114a48:	003f4f06 	br	81114788 <__reset+0xfb0f4788>
81114a4c:	01403f84 	movi	r5,254
81114a50:	00c01f84 	movi	r3,126
81114a54:	003f4c06 	br	81114788 <__reset+0xfb0f4788>
81114a58:	98800117 	ldw	r2,4(r19)
81114a5c:	003fa006 	br	811148e0 <__reset+0xfb0f48e0>
81114a60:	8808d0fa 	srli	r4,r17,3
81114a64:	20800044 	addi	r2,r4,1
81114a68:	1085883a 	add	r2,r2,r2
81114a6c:	003e9006 	br	811144b0 <__reset+0xfb0f44b0>

81114a70 <memcpy>:
81114a70:	defffd04 	addi	sp,sp,-12
81114a74:	de00012e 	bgeu	sp,et,81114a7c <memcpy+0xc>
81114a78:	003b68fa 	trap	3
81114a7c:	00c003c4 	movi	r3,15
81114a80:	dfc00215 	stw	ra,8(sp)
81114a84:	dc400115 	stw	r17,4(sp)
81114a88:	dc000015 	stw	r16,0(sp)
81114a8c:	2005883a 	mov	r2,r4
81114a90:	1980452e 	bgeu	r3,r6,81114ba8 <memcpy+0x138>
81114a94:	2906b03a 	or	r3,r5,r4
81114a98:	18c000cc 	andi	r3,r3,3
81114a9c:	1800441e 	bne	r3,zero,81114bb0 <memcpy+0x140>
81114aa0:	347ffc04 	addi	r17,r6,-16
81114aa4:	8822d13a 	srli	r17,r17,4
81114aa8:	28c00104 	addi	r3,r5,4
81114aac:	23400104 	addi	r13,r4,4
81114ab0:	8820913a 	slli	r16,r17,4
81114ab4:	2b000204 	addi	r12,r5,8
81114ab8:	22c00204 	addi	r11,r4,8
81114abc:	84000504 	addi	r16,r16,20
81114ac0:	2a800304 	addi	r10,r5,12
81114ac4:	22400304 	addi	r9,r4,12
81114ac8:	2c21883a 	add	r16,r5,r16
81114acc:	2811883a 	mov	r8,r5
81114ad0:	200f883a 	mov	r7,r4
81114ad4:	41000017 	ldw	r4,0(r8)
81114ad8:	1fc00017 	ldw	ra,0(r3)
81114adc:	63c00017 	ldw	r15,0(r12)
81114ae0:	39000015 	stw	r4,0(r7)
81114ae4:	53800017 	ldw	r14,0(r10)
81114ae8:	6fc00015 	stw	ra,0(r13)
81114aec:	5bc00015 	stw	r15,0(r11)
81114af0:	4b800015 	stw	r14,0(r9)
81114af4:	18c00404 	addi	r3,r3,16
81114af8:	39c00404 	addi	r7,r7,16
81114afc:	42000404 	addi	r8,r8,16
81114b00:	6b400404 	addi	r13,r13,16
81114b04:	63000404 	addi	r12,r12,16
81114b08:	5ac00404 	addi	r11,r11,16
81114b0c:	52800404 	addi	r10,r10,16
81114b10:	4a400404 	addi	r9,r9,16
81114b14:	1c3fef1e 	bne	r3,r16,81114ad4 <__reset+0xfb0f4ad4>
81114b18:	89c00044 	addi	r7,r17,1
81114b1c:	380e913a 	slli	r7,r7,4
81114b20:	310003cc 	andi	r4,r6,15
81114b24:	02c000c4 	movi	r11,3
81114b28:	11c7883a 	add	r3,r2,r7
81114b2c:	29cb883a 	add	r5,r5,r7
81114b30:	5900212e 	bgeu	r11,r4,81114bb8 <memcpy+0x148>
81114b34:	1813883a 	mov	r9,r3
81114b38:	2811883a 	mov	r8,r5
81114b3c:	200f883a 	mov	r7,r4
81114b40:	42800017 	ldw	r10,0(r8)
81114b44:	4a400104 	addi	r9,r9,4
81114b48:	39ffff04 	addi	r7,r7,-4
81114b4c:	4abfff15 	stw	r10,-4(r9)
81114b50:	42000104 	addi	r8,r8,4
81114b54:	59fffa36 	bltu	r11,r7,81114b40 <__reset+0xfb0f4b40>
81114b58:	213fff04 	addi	r4,r4,-4
81114b5c:	2008d0ba 	srli	r4,r4,2
81114b60:	318000cc 	andi	r6,r6,3
81114b64:	21000044 	addi	r4,r4,1
81114b68:	2109883a 	add	r4,r4,r4
81114b6c:	2109883a 	add	r4,r4,r4
81114b70:	1907883a 	add	r3,r3,r4
81114b74:	290b883a 	add	r5,r5,r4
81114b78:	30000626 	beq	r6,zero,81114b94 <memcpy+0x124>
81114b7c:	198d883a 	add	r6,r3,r6
81114b80:	29c00003 	ldbu	r7,0(r5)
81114b84:	18c00044 	addi	r3,r3,1
81114b88:	29400044 	addi	r5,r5,1
81114b8c:	19ffffc5 	stb	r7,-1(r3)
81114b90:	19bffb1e 	bne	r3,r6,81114b80 <__reset+0xfb0f4b80>
81114b94:	dfc00217 	ldw	ra,8(sp)
81114b98:	dc400117 	ldw	r17,4(sp)
81114b9c:	dc000017 	ldw	r16,0(sp)
81114ba0:	dec00304 	addi	sp,sp,12
81114ba4:	f800283a 	ret
81114ba8:	2007883a 	mov	r3,r4
81114bac:	003ff206 	br	81114b78 <__reset+0xfb0f4b78>
81114bb0:	2007883a 	mov	r3,r4
81114bb4:	003ff106 	br	81114b7c <__reset+0xfb0f4b7c>
81114bb8:	200d883a 	mov	r6,r4
81114bbc:	003fee06 	br	81114b78 <__reset+0xfb0f4b78>

81114bc0 <memset>:
81114bc0:	20c000cc 	andi	r3,r4,3
81114bc4:	2005883a 	mov	r2,r4
81114bc8:	18004426 	beq	r3,zero,81114cdc <memset+0x11c>
81114bcc:	31ffffc4 	addi	r7,r6,-1
81114bd0:	30004026 	beq	r6,zero,81114cd4 <memset+0x114>
81114bd4:	2813883a 	mov	r9,r5
81114bd8:	200d883a 	mov	r6,r4
81114bdc:	2007883a 	mov	r3,r4
81114be0:	00000406 	br	81114bf4 <memset+0x34>
81114be4:	3a3fffc4 	addi	r8,r7,-1
81114be8:	31800044 	addi	r6,r6,1
81114bec:	38003926 	beq	r7,zero,81114cd4 <memset+0x114>
81114bf0:	400f883a 	mov	r7,r8
81114bf4:	18c00044 	addi	r3,r3,1
81114bf8:	32400005 	stb	r9,0(r6)
81114bfc:	1a0000cc 	andi	r8,r3,3
81114c00:	403ff81e 	bne	r8,zero,81114be4 <__reset+0xfb0f4be4>
81114c04:	010000c4 	movi	r4,3
81114c08:	21c02d2e 	bgeu	r4,r7,81114cc0 <memset+0x100>
81114c0c:	29003fcc 	andi	r4,r5,255
81114c10:	200c923a 	slli	r6,r4,8
81114c14:	3108b03a 	or	r4,r6,r4
81114c18:	200c943a 	slli	r6,r4,16
81114c1c:	218cb03a 	or	r6,r4,r6
81114c20:	010003c4 	movi	r4,15
81114c24:	21c0182e 	bgeu	r4,r7,81114c88 <memset+0xc8>
81114c28:	3b3ffc04 	addi	r12,r7,-16
81114c2c:	6018d13a 	srli	r12,r12,4
81114c30:	1a000104 	addi	r8,r3,4
81114c34:	1ac00204 	addi	r11,r3,8
81114c38:	6008913a 	slli	r4,r12,4
81114c3c:	1a800304 	addi	r10,r3,12
81114c40:	1813883a 	mov	r9,r3
81114c44:	21000504 	addi	r4,r4,20
81114c48:	1909883a 	add	r4,r3,r4
81114c4c:	49800015 	stw	r6,0(r9)
81114c50:	41800015 	stw	r6,0(r8)
81114c54:	59800015 	stw	r6,0(r11)
81114c58:	51800015 	stw	r6,0(r10)
81114c5c:	42000404 	addi	r8,r8,16
81114c60:	4a400404 	addi	r9,r9,16
81114c64:	5ac00404 	addi	r11,r11,16
81114c68:	52800404 	addi	r10,r10,16
81114c6c:	413ff71e 	bne	r8,r4,81114c4c <__reset+0xfb0f4c4c>
81114c70:	63000044 	addi	r12,r12,1
81114c74:	6018913a 	slli	r12,r12,4
81114c78:	39c003cc 	andi	r7,r7,15
81114c7c:	010000c4 	movi	r4,3
81114c80:	1b07883a 	add	r3,r3,r12
81114c84:	21c00e2e 	bgeu	r4,r7,81114cc0 <memset+0x100>
81114c88:	1813883a 	mov	r9,r3
81114c8c:	3811883a 	mov	r8,r7
81114c90:	010000c4 	movi	r4,3
81114c94:	49800015 	stw	r6,0(r9)
81114c98:	423fff04 	addi	r8,r8,-4
81114c9c:	4a400104 	addi	r9,r9,4
81114ca0:	223ffc36 	bltu	r4,r8,81114c94 <__reset+0xfb0f4c94>
81114ca4:	393fff04 	addi	r4,r7,-4
81114ca8:	2008d0ba 	srli	r4,r4,2
81114cac:	39c000cc 	andi	r7,r7,3
81114cb0:	21000044 	addi	r4,r4,1
81114cb4:	2109883a 	add	r4,r4,r4
81114cb8:	2109883a 	add	r4,r4,r4
81114cbc:	1907883a 	add	r3,r3,r4
81114cc0:	38000526 	beq	r7,zero,81114cd8 <memset+0x118>
81114cc4:	19cf883a 	add	r7,r3,r7
81114cc8:	19400005 	stb	r5,0(r3)
81114ccc:	18c00044 	addi	r3,r3,1
81114cd0:	38fffd1e 	bne	r7,r3,81114cc8 <__reset+0xfb0f4cc8>
81114cd4:	f800283a 	ret
81114cd8:	f800283a 	ret
81114cdc:	2007883a 	mov	r3,r4
81114ce0:	300f883a 	mov	r7,r6
81114ce4:	003fc706 	br	81114c04 <__reset+0xfb0f4c04>

81114ce8 <_open_r>:
81114ce8:	defffd04 	addi	sp,sp,-12
81114cec:	de00012e 	bgeu	sp,et,81114cf4 <_open_r+0xc>
81114cf0:	003b68fa 	trap	3
81114cf4:	2805883a 	mov	r2,r5
81114cf8:	dc000015 	stw	r16,0(sp)
81114cfc:	04204534 	movhi	r16,33044
81114d00:	dc400115 	stw	r17,4(sp)
81114d04:	300b883a 	mov	r5,r6
81114d08:	8412e404 	addi	r16,r16,19344
81114d0c:	2023883a 	mov	r17,r4
81114d10:	380d883a 	mov	r6,r7
81114d14:	1009883a 	mov	r4,r2
81114d18:	dfc00215 	stw	ra,8(sp)
81114d1c:	80000015 	stw	zero,0(r16)
81114d20:	112a7380 	call	8112a738 <open>
81114d24:	00ffffc4 	movi	r3,-1
81114d28:	10c00526 	beq	r2,r3,81114d40 <_open_r+0x58>
81114d2c:	dfc00217 	ldw	ra,8(sp)
81114d30:	dc400117 	ldw	r17,4(sp)
81114d34:	dc000017 	ldw	r16,0(sp)
81114d38:	dec00304 	addi	sp,sp,12
81114d3c:	f800283a 	ret
81114d40:	80c00017 	ldw	r3,0(r16)
81114d44:	183ff926 	beq	r3,zero,81114d2c <__reset+0xfb0f4d2c>
81114d48:	88c00015 	stw	r3,0(r17)
81114d4c:	003ff706 	br	81114d2c <__reset+0xfb0f4d2c>

81114d50 <_printf_r>:
81114d50:	defffd04 	addi	sp,sp,-12
81114d54:	2805883a 	mov	r2,r5
81114d58:	de00012e 	bgeu	sp,et,81114d60 <_printf_r+0x10>
81114d5c:	003b68fa 	trap	3
81114d60:	dfc00015 	stw	ra,0(sp)
81114d64:	d9800115 	stw	r6,4(sp)
81114d68:	d9c00215 	stw	r7,8(sp)
81114d6c:	21400217 	ldw	r5,8(r4)
81114d70:	d9c00104 	addi	r7,sp,4
81114d74:	100d883a 	mov	r6,r2
81114d78:	1117a9c0 	call	81117a9c <___vfprintf_internal_r>
81114d7c:	dfc00017 	ldw	ra,0(sp)
81114d80:	dec00304 	addi	sp,sp,12
81114d84:	f800283a 	ret

81114d88 <printf>:
81114d88:	defffc04 	addi	sp,sp,-16
81114d8c:	de00012e 	bgeu	sp,et,81114d94 <printf+0xc>
81114d90:	003b68fa 	trap	3
81114d94:	dfc00015 	stw	ra,0(sp)
81114d98:	d9400115 	stw	r5,4(sp)
81114d9c:	d9800215 	stw	r6,8(sp)
81114da0:	d9c00315 	stw	r7,12(sp)
81114da4:	00a04534 	movhi	r2,33044
81114da8:	10928704 	addi	r2,r2,18972
81114dac:	10800017 	ldw	r2,0(r2)
81114db0:	200b883a 	mov	r5,r4
81114db4:	d9800104 	addi	r6,sp,4
81114db8:	11000217 	ldw	r4,8(r2)
81114dbc:	1119c9c0 	call	81119c9c <__vfprintf_internal>
81114dc0:	dfc00017 	ldw	ra,0(sp)
81114dc4:	dec00404 	addi	sp,sp,16
81114dc8:	f800283a 	ret

81114dcc <_putc_r>:
81114dcc:	defffc04 	addi	sp,sp,-16
81114dd0:	de00012e 	bgeu	sp,et,81114dd8 <_putc_r+0xc>
81114dd4:	003b68fa 	trap	3
81114dd8:	dc000215 	stw	r16,8(sp)
81114ddc:	dfc00315 	stw	ra,12(sp)
81114de0:	2021883a 	mov	r16,r4
81114de4:	20000226 	beq	r4,zero,81114df0 <_putc_r+0x24>
81114de8:	20800e17 	ldw	r2,56(r4)
81114dec:	10001b26 	beq	r2,zero,81114e5c <_putc_r+0x90>
81114df0:	30800217 	ldw	r2,8(r6)
81114df4:	10bfffc4 	addi	r2,r2,-1
81114df8:	30800215 	stw	r2,8(r6)
81114dfc:	10000a16 	blt	r2,zero,81114e28 <_putc_r+0x5c>
81114e00:	30800017 	ldw	r2,0(r6)
81114e04:	11400005 	stb	r5,0(r2)
81114e08:	30800017 	ldw	r2,0(r6)
81114e0c:	10c00044 	addi	r3,r2,1
81114e10:	30c00015 	stw	r3,0(r6)
81114e14:	10800003 	ldbu	r2,0(r2)
81114e18:	dfc00317 	ldw	ra,12(sp)
81114e1c:	dc000217 	ldw	r16,8(sp)
81114e20:	dec00404 	addi	sp,sp,16
81114e24:	f800283a 	ret
81114e28:	30c00617 	ldw	r3,24(r6)
81114e2c:	10c00616 	blt	r2,r3,81114e48 <_putc_r+0x7c>
81114e30:	30800017 	ldw	r2,0(r6)
81114e34:	00c00284 	movi	r3,10
81114e38:	11400005 	stb	r5,0(r2)
81114e3c:	30800017 	ldw	r2,0(r6)
81114e40:	11400003 	ldbu	r5,0(r2)
81114e44:	28fff11e 	bne	r5,r3,81114e0c <__reset+0xfb0f4e0c>
81114e48:	8009883a 	mov	r4,r16
81114e4c:	dfc00317 	ldw	ra,12(sp)
81114e50:	dc000217 	ldw	r16,8(sp)
81114e54:	dec00404 	addi	sp,sp,16
81114e58:	111b6201 	jmpi	8111b620 <__swbuf_r>
81114e5c:	d9400015 	stw	r5,0(sp)
81114e60:	d9800115 	stw	r6,4(sp)
81114e64:	111d8580 	call	8111d858 <__sinit>
81114e68:	d9800117 	ldw	r6,4(sp)
81114e6c:	d9400017 	ldw	r5,0(sp)
81114e70:	003fdf06 	br	81114df0 <__reset+0xfb0f4df0>

81114e74 <putc>:
81114e74:	00a04534 	movhi	r2,33044
81114e78:	defffc04 	addi	sp,sp,-16
81114e7c:	10928704 	addi	r2,r2,18972
81114e80:	de00012e 	bgeu	sp,et,81114e88 <putc+0x14>
81114e84:	003b68fa 	trap	3
81114e88:	dc000115 	stw	r16,4(sp)
81114e8c:	14000017 	ldw	r16,0(r2)
81114e90:	dc400215 	stw	r17,8(sp)
81114e94:	dfc00315 	stw	ra,12(sp)
81114e98:	2023883a 	mov	r17,r4
81114e9c:	80000226 	beq	r16,zero,81114ea8 <putc+0x34>
81114ea0:	80800e17 	ldw	r2,56(r16)
81114ea4:	10001a26 	beq	r2,zero,81114f10 <putc+0x9c>
81114ea8:	28800217 	ldw	r2,8(r5)
81114eac:	10bfffc4 	addi	r2,r2,-1
81114eb0:	28800215 	stw	r2,8(r5)
81114eb4:	10000b16 	blt	r2,zero,81114ee4 <putc+0x70>
81114eb8:	28800017 	ldw	r2,0(r5)
81114ebc:	14400005 	stb	r17,0(r2)
81114ec0:	28800017 	ldw	r2,0(r5)
81114ec4:	10c00044 	addi	r3,r2,1
81114ec8:	28c00015 	stw	r3,0(r5)
81114ecc:	10800003 	ldbu	r2,0(r2)
81114ed0:	dfc00317 	ldw	ra,12(sp)
81114ed4:	dc400217 	ldw	r17,8(sp)
81114ed8:	dc000117 	ldw	r16,4(sp)
81114edc:	dec00404 	addi	sp,sp,16
81114ee0:	f800283a 	ret
81114ee4:	28c00617 	ldw	r3,24(r5)
81114ee8:	10c00e16 	blt	r2,r3,81114f24 <putc+0xb0>
81114eec:	28800017 	ldw	r2,0(r5)
81114ef0:	01000284 	movi	r4,10
81114ef4:	14400005 	stb	r17,0(r2)
81114ef8:	28800017 	ldw	r2,0(r5)
81114efc:	10c00003 	ldbu	r3,0(r2)
81114f00:	193ff01e 	bne	r3,r4,81114ec4 <__reset+0xfb0f4ec4>
81114f04:	280d883a 	mov	r6,r5
81114f08:	180b883a 	mov	r5,r3
81114f0c:	00000706 	br	81114f2c <putc+0xb8>
81114f10:	8009883a 	mov	r4,r16
81114f14:	d9400015 	stw	r5,0(sp)
81114f18:	111d8580 	call	8111d858 <__sinit>
81114f1c:	d9400017 	ldw	r5,0(sp)
81114f20:	003fe106 	br	81114ea8 <__reset+0xfb0f4ea8>
81114f24:	280d883a 	mov	r6,r5
81114f28:	880b883a 	mov	r5,r17
81114f2c:	8009883a 	mov	r4,r16
81114f30:	dfc00317 	ldw	ra,12(sp)
81114f34:	dc400217 	ldw	r17,8(sp)
81114f38:	dc000117 	ldw	r16,4(sp)
81114f3c:	dec00404 	addi	sp,sp,16
81114f40:	111b6201 	jmpi	8111b620 <__swbuf_r>

81114f44 <_putchar_r>:
81114f44:	21800217 	ldw	r6,8(r4)
81114f48:	1114dcc1 	jmpi	81114dcc <_putc_r>

81114f4c <putchar>:
81114f4c:	00a04534 	movhi	r2,33044
81114f50:	10928704 	addi	r2,r2,18972
81114f54:	200b883a 	mov	r5,r4
81114f58:	11000017 	ldw	r4,0(r2)
81114f5c:	21800217 	ldw	r6,8(r4)
81114f60:	1114dcc1 	jmpi	81114dcc <_putc_r>

81114f64 <_puts_r>:
81114f64:	defff604 	addi	sp,sp,-40
81114f68:	de00012e 	bgeu	sp,et,81114f70 <_puts_r+0xc>
81114f6c:	003b68fa 	trap	3
81114f70:	dc000715 	stw	r16,28(sp)
81114f74:	2021883a 	mov	r16,r4
81114f78:	2809883a 	mov	r4,r5
81114f7c:	dc400815 	stw	r17,32(sp)
81114f80:	dfc00915 	stw	ra,36(sp)
81114f84:	2823883a 	mov	r17,r5
81114f88:	11155840 	call	81115584 <strlen>
81114f8c:	10c00044 	addi	r3,r2,1
81114f90:	d8800115 	stw	r2,4(sp)
81114f94:	00a04534 	movhi	r2,33044
81114f98:	10889b04 	addi	r2,r2,8812
81114f9c:	d8800215 	stw	r2,8(sp)
81114fa0:	00800044 	movi	r2,1
81114fa4:	d8800315 	stw	r2,12(sp)
81114fa8:	00800084 	movi	r2,2
81114fac:	dc400015 	stw	r17,0(sp)
81114fb0:	d8c00615 	stw	r3,24(sp)
81114fb4:	dec00415 	stw	sp,16(sp)
81114fb8:	d8800515 	stw	r2,20(sp)
81114fbc:	80000226 	beq	r16,zero,81114fc8 <_puts_r+0x64>
81114fc0:	80800e17 	ldw	r2,56(r16)
81114fc4:	10001426 	beq	r2,zero,81115018 <_puts_r+0xb4>
81114fc8:	81400217 	ldw	r5,8(r16)
81114fcc:	2880030b 	ldhu	r2,12(r5)
81114fd0:	10c8000c 	andi	r3,r2,8192
81114fd4:	1800061e 	bne	r3,zero,81114ff0 <_puts_r+0x8c>
81114fd8:	29001917 	ldw	r4,100(r5)
81114fdc:	00f7ffc4 	movi	r3,-8193
81114fe0:	10880014 	ori	r2,r2,8192
81114fe4:	20c6703a 	and	r3,r4,r3
81114fe8:	2880030d 	sth	r2,12(r5)
81114fec:	28c01915 	stw	r3,100(r5)
81114ff0:	d9800404 	addi	r6,sp,16
81114ff4:	8009883a 	mov	r4,r16
81114ff8:	111e0080 	call	8111e008 <__sfvwrite_r>
81114ffc:	1000091e 	bne	r2,zero,81115024 <_puts_r+0xc0>
81115000:	00800284 	movi	r2,10
81115004:	dfc00917 	ldw	ra,36(sp)
81115008:	dc400817 	ldw	r17,32(sp)
8111500c:	dc000717 	ldw	r16,28(sp)
81115010:	dec00a04 	addi	sp,sp,40
81115014:	f800283a 	ret
81115018:	8009883a 	mov	r4,r16
8111501c:	111d8580 	call	8111d858 <__sinit>
81115020:	003fe906 	br	81114fc8 <__reset+0xfb0f4fc8>
81115024:	00bfffc4 	movi	r2,-1
81115028:	003ff606 	br	81115004 <__reset+0xfb0f5004>

8111502c <puts>:
8111502c:	00a04534 	movhi	r2,33044
81115030:	10928704 	addi	r2,r2,18972
81115034:	200b883a 	mov	r5,r4
81115038:	11000017 	ldw	r4,0(r2)
8111503c:	1114f641 	jmpi	81114f64 <_puts_r>

81115040 <lflush>:
81115040:	2080030b 	ldhu	r2,12(r4)
81115044:	00c00244 	movi	r3,9
81115048:	1080024c 	andi	r2,r2,9
8111504c:	10c00226 	beq	r2,r3,81115058 <lflush+0x18>
81115050:	0005883a 	mov	r2,zero
81115054:	f800283a 	ret
81115058:	111d4c01 	jmpi	8111d4c0 <fflush>

8111505c <__srefill_r>:
8111505c:	defffc04 	addi	sp,sp,-16
81115060:	de00012e 	bgeu	sp,et,81115068 <__srefill_r+0xc>
81115064:	003b68fa 	trap	3
81115068:	dc400115 	stw	r17,4(sp)
8111506c:	dc000015 	stw	r16,0(sp)
81115070:	dfc00315 	stw	ra,12(sp)
81115074:	dc800215 	stw	r18,8(sp)
81115078:	2023883a 	mov	r17,r4
8111507c:	2821883a 	mov	r16,r5
81115080:	20000226 	beq	r4,zero,8111508c <__srefill_r+0x30>
81115084:	20800e17 	ldw	r2,56(r4)
81115088:	10003c26 	beq	r2,zero,8111517c <__srefill_r+0x120>
8111508c:	80c0030b 	ldhu	r3,12(r16)
81115090:	1908000c 	andi	r4,r3,8192
81115094:	1805883a 	mov	r2,r3
81115098:	2000071e 	bne	r4,zero,811150b8 <__srefill_r+0x5c>
8111509c:	81001917 	ldw	r4,100(r16)
811150a0:	18880014 	ori	r2,r3,8192
811150a4:	00f7ffc4 	movi	r3,-8193
811150a8:	20c8703a 	and	r4,r4,r3
811150ac:	8080030d 	sth	r2,12(r16)
811150b0:	1007883a 	mov	r3,r2
811150b4:	81001915 	stw	r4,100(r16)
811150b8:	80000115 	stw	zero,4(r16)
811150bc:	1100080c 	andi	r4,r2,32
811150c0:	2000571e 	bne	r4,zero,81115220 <__srefill_r+0x1c4>
811150c4:	1100010c 	andi	r4,r2,4
811150c8:	20001f26 	beq	r4,zero,81115148 <__srefill_r+0xec>
811150cc:	81400c17 	ldw	r5,48(r16)
811150d0:	28000826 	beq	r5,zero,811150f4 <__srefill_r+0x98>
811150d4:	80801004 	addi	r2,r16,64
811150d8:	28800226 	beq	r5,r2,811150e4 <__srefill_r+0x88>
811150dc:	8809883a 	mov	r4,r17
811150e0:	111dcf00 	call	8111dcf0 <_free_r>
811150e4:	80800f17 	ldw	r2,60(r16)
811150e8:	80000c15 	stw	zero,48(r16)
811150ec:	80800115 	stw	r2,4(r16)
811150f0:	1000391e 	bne	r2,zero,811151d8 <__srefill_r+0x17c>
811150f4:	80800417 	ldw	r2,16(r16)
811150f8:	10004b26 	beq	r2,zero,81115228 <__srefill_r+0x1cc>
811150fc:	8480030b 	ldhu	r18,12(r16)
81115100:	908000cc 	andi	r2,r18,3
81115104:	10001f1e 	bne	r2,zero,81115184 <__srefill_r+0x128>
81115108:	81800417 	ldw	r6,16(r16)
8111510c:	80800817 	ldw	r2,32(r16)
81115110:	81c00517 	ldw	r7,20(r16)
81115114:	81400717 	ldw	r5,28(r16)
81115118:	81800015 	stw	r6,0(r16)
8111511c:	8809883a 	mov	r4,r17
81115120:	103ee83a 	callr	r2
81115124:	80800115 	stw	r2,4(r16)
81115128:	00800e0e 	bge	zero,r2,81115164 <__srefill_r+0x108>
8111512c:	0005883a 	mov	r2,zero
81115130:	dfc00317 	ldw	ra,12(sp)
81115134:	dc800217 	ldw	r18,8(sp)
81115138:	dc400117 	ldw	r17,4(sp)
8111513c:	dc000017 	ldw	r16,0(sp)
81115140:	dec00404 	addi	sp,sp,16
81115144:	f800283a 	ret
81115148:	1100040c 	andi	r4,r2,16
8111514c:	20003026 	beq	r4,zero,81115210 <__srefill_r+0x1b4>
81115150:	1080020c 	andi	r2,r2,8
81115154:	1000241e 	bne	r2,zero,811151e8 <__srefill_r+0x18c>
81115158:	18c00114 	ori	r3,r3,4
8111515c:	80c0030d 	sth	r3,12(r16)
81115160:	003fe406 	br	811150f4 <__reset+0xfb0f50f4>
81115164:	80c0030b 	ldhu	r3,12(r16)
81115168:	1000161e 	bne	r2,zero,811151c4 <__srefill_r+0x168>
8111516c:	18c00814 	ori	r3,r3,32
81115170:	00bfffc4 	movi	r2,-1
81115174:	80c0030d 	sth	r3,12(r16)
81115178:	003fed06 	br	81115130 <__reset+0xfb0f5130>
8111517c:	111d8580 	call	8111d858 <__sinit>
81115180:	003fc206 	br	8111508c <__reset+0xfb0f508c>
81115184:	00a04534 	movhi	r2,33044
81115188:	10928604 	addi	r2,r2,18968
8111518c:	11000017 	ldw	r4,0(r2)
81115190:	01604474 	movhi	r5,33041
81115194:	00800044 	movi	r2,1
81115198:	29541004 	addi	r5,r5,20544
8111519c:	8080030d 	sth	r2,12(r16)
811151a0:	111e4cc0 	call	8111e4cc <_fwalk>
811151a4:	00800244 	movi	r2,9
811151a8:	8480030d 	sth	r18,12(r16)
811151ac:	9480024c 	andi	r18,r18,9
811151b0:	90bfd51e 	bne	r18,r2,81115108 <__reset+0xfb0f5108>
811151b4:	800b883a 	mov	r5,r16
811151b8:	8809883a 	mov	r4,r17
811151bc:	111d2380 	call	8111d238 <__sflush_r>
811151c0:	003fd106 	br	81115108 <__reset+0xfb0f5108>
811151c4:	18c01014 	ori	r3,r3,64
811151c8:	80000115 	stw	zero,4(r16)
811151cc:	00bfffc4 	movi	r2,-1
811151d0:	80c0030d 	sth	r3,12(r16)
811151d4:	003fd606 	br	81115130 <__reset+0xfb0f5130>
811151d8:	80c00e17 	ldw	r3,56(r16)
811151dc:	0005883a 	mov	r2,zero
811151e0:	80c00015 	stw	r3,0(r16)
811151e4:	003fd206 	br	81115130 <__reset+0xfb0f5130>
811151e8:	800b883a 	mov	r5,r16
811151ec:	8809883a 	mov	r4,r17
811151f0:	111d45c0 	call	8111d45c <_fflush_r>
811151f4:	10000a1e 	bne	r2,zero,81115220 <__srefill_r+0x1c4>
811151f8:	8080030b 	ldhu	r2,12(r16)
811151fc:	00fffdc4 	movi	r3,-9
81115200:	80000215 	stw	zero,8(r16)
81115204:	1886703a 	and	r3,r3,r2
81115208:	80000615 	stw	zero,24(r16)
8111520c:	003fd206 	br	81115158 <__reset+0xfb0f5158>
81115210:	00800244 	movi	r2,9
81115214:	88800015 	stw	r2,0(r17)
81115218:	18c01014 	ori	r3,r3,64
8111521c:	80c0030d 	sth	r3,12(r16)
81115220:	00bfffc4 	movi	r2,-1
81115224:	003fc206 	br	81115130 <__reset+0xfb0f5130>
81115228:	800b883a 	mov	r5,r16
8111522c:	8809883a 	mov	r4,r17
81115230:	11140980 	call	81114098 <__smakebuf_r>
81115234:	003fb106 	br	811150fc <__reset+0xfb0f50fc>

81115238 <_sbrk_r>:
81115238:	defffd04 	addi	sp,sp,-12
8111523c:	de00012e 	bgeu	sp,et,81115244 <_sbrk_r+0xc>
81115240:	003b68fa 	trap	3
81115244:	dc000015 	stw	r16,0(sp)
81115248:	04204534 	movhi	r16,33044
8111524c:	dc400115 	stw	r17,4(sp)
81115250:	8412e404 	addi	r16,r16,19344
81115254:	2023883a 	mov	r17,r4
81115258:	2809883a 	mov	r4,r5
8111525c:	dfc00215 	stw	ra,8(sp)
81115260:	80000015 	stw	zero,0(r16)
81115264:	112aa480 	call	8112aa48 <sbrk>
81115268:	00ffffc4 	movi	r3,-1
8111526c:	10c00526 	beq	r2,r3,81115284 <_sbrk_r+0x4c>
81115270:	dfc00217 	ldw	ra,8(sp)
81115274:	dc400117 	ldw	r17,4(sp)
81115278:	dc000017 	ldw	r16,0(sp)
8111527c:	dec00304 	addi	sp,sp,12
81115280:	f800283a 	ret
81115284:	80c00017 	ldw	r3,0(r16)
81115288:	183ff926 	beq	r3,zero,81115270 <__reset+0xfb0f5270>
8111528c:	88c00015 	stw	r3,0(r17)
81115290:	003ff706 	br	81115270 <__reset+0xfb0f5270>

81115294 <scanf>:
81115294:	defffc04 	addi	sp,sp,-16
81115298:	de00012e 	bgeu	sp,et,811152a0 <scanf+0xc>
8111529c:	003b68fa 	trap	3
811152a0:	dfc00015 	stw	ra,0(sp)
811152a4:	d9400115 	stw	r5,4(sp)
811152a8:	d9800215 	stw	r6,8(sp)
811152ac:	d9c00315 	stw	r7,12(sp)
811152b0:	00a04534 	movhi	r2,33044
811152b4:	10928704 	addi	r2,r2,18972
811152b8:	200d883a 	mov	r6,r4
811152bc:	11000017 	ldw	r4,0(r2)
811152c0:	d9c00104 	addi	r7,sp,4
811152c4:	21400117 	ldw	r5,4(r4)
811152c8:	111b5cc0 	call	8111b5cc <_vfscanf_r>
811152cc:	dfc00017 	ldw	ra,0(sp)
811152d0:	dec00404 	addi	sp,sp,16
811152d4:	f800283a 	ret

811152d8 <_scanf_r>:
811152d8:	defffd04 	addi	sp,sp,-12
811152dc:	2805883a 	mov	r2,r5
811152e0:	de00012e 	bgeu	sp,et,811152e8 <_scanf_r+0x10>
811152e4:	003b68fa 	trap	3
811152e8:	dfc00015 	stw	ra,0(sp)
811152ec:	d9800115 	stw	r6,4(sp)
811152f0:	d9c00215 	stw	r7,8(sp)
811152f4:	21400117 	ldw	r5,4(r4)
811152f8:	d9c00104 	addi	r7,sp,4
811152fc:	100d883a 	mov	r6,r2
81115300:	111b5cc0 	call	8111b5cc <_vfscanf_r>
81115304:	dfc00017 	ldw	ra,0(sp)
81115308:	dec00304 	addi	sp,sp,12
8111530c:	f800283a 	ret

81115310 <_sprintf_r>:
81115310:	deffe404 	addi	sp,sp,-112
81115314:	2807883a 	mov	r3,r5
81115318:	de00012e 	bgeu	sp,et,81115320 <_sprintf_r+0x10>
8111531c:	003b68fa 	trap	3
81115320:	dfc01a15 	stw	ra,104(sp)
81115324:	d9c01b15 	stw	r7,108(sp)
81115328:	00a00034 	movhi	r2,32768
8111532c:	10bfffc4 	addi	r2,r2,-1
81115330:	02008204 	movi	r8,520
81115334:	d8800215 	stw	r2,8(sp)
81115338:	d8800515 	stw	r2,20(sp)
8111533c:	d9c01b04 	addi	r7,sp,108
81115340:	d80b883a 	mov	r5,sp
81115344:	00bfffc4 	movi	r2,-1
81115348:	d8c00015 	stw	r3,0(sp)
8111534c:	d8c00415 	stw	r3,16(sp)
81115350:	da00030d 	sth	r8,12(sp)
81115354:	d880038d 	sth	r2,14(sp)
81115358:	11158bc0 	call	811158bc <___svfprintf_internal_r>
8111535c:	d8c00017 	ldw	r3,0(sp)
81115360:	18000005 	stb	zero,0(r3)
81115364:	dfc01a17 	ldw	ra,104(sp)
81115368:	dec01c04 	addi	sp,sp,112
8111536c:	f800283a 	ret

81115370 <sprintf>:
81115370:	deffe304 	addi	sp,sp,-116
81115374:	2007883a 	mov	r3,r4
81115378:	de00012e 	bgeu	sp,et,81115380 <sprintf+0x10>
8111537c:	003b68fa 	trap	3
81115380:	dfc01a15 	stw	ra,104(sp)
81115384:	d9801b15 	stw	r6,108(sp)
81115388:	d9c01c15 	stw	r7,112(sp)
8111538c:	01204534 	movhi	r4,33044
81115390:	21128704 	addi	r4,r4,18972
81115394:	21000017 	ldw	r4,0(r4)
81115398:	00a00034 	movhi	r2,32768
8111539c:	10bfffc4 	addi	r2,r2,-1
811153a0:	280d883a 	mov	r6,r5
811153a4:	02008204 	movi	r8,520
811153a8:	d8800215 	stw	r2,8(sp)
811153ac:	d8800515 	stw	r2,20(sp)
811153b0:	d9c01b04 	addi	r7,sp,108
811153b4:	d80b883a 	mov	r5,sp
811153b8:	00bfffc4 	movi	r2,-1
811153bc:	d8c00015 	stw	r3,0(sp)
811153c0:	d8c00415 	stw	r3,16(sp)
811153c4:	da00030d 	sth	r8,12(sp)
811153c8:	d880038d 	sth	r2,14(sp)
811153cc:	11158bc0 	call	811158bc <___svfprintf_internal_r>
811153d0:	d8c00017 	ldw	r3,0(sp)
811153d4:	18000005 	stb	zero,0(r3)
811153d8:	dfc01a17 	ldw	ra,104(sp)
811153dc:	dec01d04 	addi	sp,sp,116
811153e0:	f800283a 	ret

811153e4 <__sread>:
811153e4:	defffe04 	addi	sp,sp,-8
811153e8:	de00012e 	bgeu	sp,et,811153f0 <__sread+0xc>
811153ec:	003b68fa 	trap	3
811153f0:	dc000015 	stw	r16,0(sp)
811153f4:	2821883a 	mov	r16,r5
811153f8:	2940038f 	ldh	r5,14(r5)
811153fc:	dfc00115 	stw	ra,4(sp)
81115400:	111fd1c0 	call	8111fd1c <_read_r>
81115404:	10000716 	blt	r2,zero,81115424 <__sread+0x40>
81115408:	80c01417 	ldw	r3,80(r16)
8111540c:	1887883a 	add	r3,r3,r2
81115410:	80c01415 	stw	r3,80(r16)
81115414:	dfc00117 	ldw	ra,4(sp)
81115418:	dc000017 	ldw	r16,0(sp)
8111541c:	dec00204 	addi	sp,sp,8
81115420:	f800283a 	ret
81115424:	80c0030b 	ldhu	r3,12(r16)
81115428:	18fbffcc 	andi	r3,r3,61439
8111542c:	80c0030d 	sth	r3,12(r16)
81115430:	dfc00117 	ldw	ra,4(sp)
81115434:	dc000017 	ldw	r16,0(sp)
81115438:	dec00204 	addi	sp,sp,8
8111543c:	f800283a 	ret

81115440 <__seofread>:
81115440:	0005883a 	mov	r2,zero
81115444:	f800283a 	ret

81115448 <__swrite>:
81115448:	defffb04 	addi	sp,sp,-20
8111544c:	de00012e 	bgeu	sp,et,81115454 <__swrite+0xc>
81115450:	003b68fa 	trap	3
81115454:	2880030b 	ldhu	r2,12(r5)
81115458:	dcc00315 	stw	r19,12(sp)
8111545c:	dc800215 	stw	r18,8(sp)
81115460:	dc400115 	stw	r17,4(sp)
81115464:	dc000015 	stw	r16,0(sp)
81115468:	dfc00415 	stw	ra,16(sp)
8111546c:	10c0400c 	andi	r3,r2,256
81115470:	2821883a 	mov	r16,r5
81115474:	2023883a 	mov	r17,r4
81115478:	3025883a 	mov	r18,r6
8111547c:	3827883a 	mov	r19,r7
81115480:	18000526 	beq	r3,zero,81115498 <__swrite+0x50>
81115484:	2940038f 	ldh	r5,14(r5)
81115488:	01c00084 	movi	r7,2
8111548c:	000d883a 	mov	r6,zero
81115490:	111e7d40 	call	8111e7d4 <_lseek_r>
81115494:	8080030b 	ldhu	r2,12(r16)
81115498:	8140038f 	ldh	r5,14(r16)
8111549c:	10bbffcc 	andi	r2,r2,61439
811154a0:	980f883a 	mov	r7,r19
811154a4:	900d883a 	mov	r6,r18
811154a8:	8809883a 	mov	r4,r17
811154ac:	8080030d 	sth	r2,12(r16)
811154b0:	dfc00417 	ldw	ra,16(sp)
811154b4:	dcc00317 	ldw	r19,12(sp)
811154b8:	dc800217 	ldw	r18,8(sp)
811154bc:	dc400117 	ldw	r17,4(sp)
811154c0:	dc000017 	ldw	r16,0(sp)
811154c4:	dec00504 	addi	sp,sp,20
811154c8:	111b7801 	jmpi	8111b780 <_write_r>

811154cc <__sseek>:
811154cc:	defffe04 	addi	sp,sp,-8
811154d0:	de00012e 	bgeu	sp,et,811154d8 <__sseek+0xc>
811154d4:	003b68fa 	trap	3
811154d8:	dc000015 	stw	r16,0(sp)
811154dc:	2821883a 	mov	r16,r5
811154e0:	2940038f 	ldh	r5,14(r5)
811154e4:	dfc00115 	stw	ra,4(sp)
811154e8:	111e7d40 	call	8111e7d4 <_lseek_r>
811154ec:	00ffffc4 	movi	r3,-1
811154f0:	10c00826 	beq	r2,r3,81115514 <__sseek+0x48>
811154f4:	80c0030b 	ldhu	r3,12(r16)
811154f8:	80801415 	stw	r2,80(r16)
811154fc:	18c40014 	ori	r3,r3,4096
81115500:	80c0030d 	sth	r3,12(r16)
81115504:	dfc00117 	ldw	ra,4(sp)
81115508:	dc000017 	ldw	r16,0(sp)
8111550c:	dec00204 	addi	sp,sp,8
81115510:	f800283a 	ret
81115514:	80c0030b 	ldhu	r3,12(r16)
81115518:	18fbffcc 	andi	r3,r3,61439
8111551c:	80c0030d 	sth	r3,12(r16)
81115520:	dfc00117 	ldw	ra,4(sp)
81115524:	dc000017 	ldw	r16,0(sp)
81115528:	dec00204 	addi	sp,sp,8
8111552c:	f800283a 	ret

81115530 <__sclose>:
81115530:	2940038f 	ldh	r5,14(r5)
81115534:	111b9441 	jmpi	8111b944 <_close_r>

81115538 <strcspn>:
81115538:	21c00007 	ldb	r7,0(r4)
8111553c:	38000f26 	beq	r7,zero,8111557c <strcspn+0x44>
81115540:	2a000007 	ldb	r8,0(r5)
81115544:	2005883a 	mov	r2,r4
81115548:	40000726 	beq	r8,zero,81115568 <strcspn+0x30>
8111554c:	3a000926 	beq	r7,r8,81115574 <strcspn+0x3c>
81115550:	2807883a 	mov	r3,r5
81115554:	00000106 	br	8111555c <strcspn+0x24>
81115558:	31c00626 	beq	r6,r7,81115574 <strcspn+0x3c>
8111555c:	18c00044 	addi	r3,r3,1
81115560:	19800007 	ldb	r6,0(r3)
81115564:	303ffc1e 	bne	r6,zero,81115558 <__reset+0xfb0f5558>
81115568:	10800044 	addi	r2,r2,1
8111556c:	11c00007 	ldb	r7,0(r2)
81115570:	383ff51e 	bne	r7,zero,81115548 <__reset+0xfb0f5548>
81115574:	1105c83a 	sub	r2,r2,r4
81115578:	f800283a 	ret
8111557c:	0005883a 	mov	r2,zero
81115580:	f800283a 	ret

81115584 <strlen>:
81115584:	208000cc 	andi	r2,r4,3
81115588:	10002026 	beq	r2,zero,8111560c <strlen+0x88>
8111558c:	20800007 	ldb	r2,0(r4)
81115590:	10002026 	beq	r2,zero,81115614 <strlen+0x90>
81115594:	2005883a 	mov	r2,r4
81115598:	00000206 	br	811155a4 <strlen+0x20>
8111559c:	10c00007 	ldb	r3,0(r2)
811155a0:	18001826 	beq	r3,zero,81115604 <strlen+0x80>
811155a4:	10800044 	addi	r2,r2,1
811155a8:	10c000cc 	andi	r3,r2,3
811155ac:	183ffb1e 	bne	r3,zero,8111559c <__reset+0xfb0f559c>
811155b0:	10c00017 	ldw	r3,0(r2)
811155b4:	01ffbff4 	movhi	r7,65279
811155b8:	39ffbfc4 	addi	r7,r7,-257
811155bc:	00ca303a 	nor	r5,zero,r3
811155c0:	01a02074 	movhi	r6,32897
811155c4:	19c7883a 	add	r3,r3,r7
811155c8:	31a02004 	addi	r6,r6,-32640
811155cc:	1946703a 	and	r3,r3,r5
811155d0:	1986703a 	and	r3,r3,r6
811155d4:	1800091e 	bne	r3,zero,811155fc <strlen+0x78>
811155d8:	10800104 	addi	r2,r2,4
811155dc:	10c00017 	ldw	r3,0(r2)
811155e0:	19cb883a 	add	r5,r3,r7
811155e4:	00c6303a 	nor	r3,zero,r3
811155e8:	28c6703a 	and	r3,r5,r3
811155ec:	1986703a 	and	r3,r3,r6
811155f0:	183ff926 	beq	r3,zero,811155d8 <__reset+0xfb0f55d8>
811155f4:	00000106 	br	811155fc <strlen+0x78>
811155f8:	10800044 	addi	r2,r2,1
811155fc:	10c00007 	ldb	r3,0(r2)
81115600:	183ffd1e 	bne	r3,zero,811155f8 <__reset+0xfb0f55f8>
81115604:	1105c83a 	sub	r2,r2,r4
81115608:	f800283a 	ret
8111560c:	2005883a 	mov	r2,r4
81115610:	003fe706 	br	811155b0 <__reset+0xfb0f55b0>
81115614:	0005883a 	mov	r2,zero
81115618:	f800283a 	ret

8111561c <strnlen>:
8111561c:	28000e26 	beq	r5,zero,81115658 <strnlen+0x3c>
81115620:	20800007 	ldb	r2,0(r4)
81115624:	10000c26 	beq	r2,zero,81115658 <strnlen+0x3c>
81115628:	20c00044 	addi	r3,r4,1
8111562c:	214b883a 	add	r5,r4,r5
81115630:	28c00526 	beq	r5,r3,81115648 <strnlen+0x2c>
81115634:	19800007 	ldb	r6,0(r3)
81115638:	19c00044 	addi	r7,r3,1
8111563c:	30000426 	beq	r6,zero,81115650 <strnlen+0x34>
81115640:	3807883a 	mov	r3,r7
81115644:	28fffb1e 	bne	r5,r3,81115634 <__reset+0xfb0f5634>
81115648:	2905c83a 	sub	r2,r5,r4
8111564c:	f800283a 	ret
81115650:	1905c83a 	sub	r2,r3,r4
81115654:	f800283a 	ret
81115658:	0005883a 	mov	r2,zero
8111565c:	f800283a 	ret

81115660 <_strtol_r>:
81115660:	00a04534 	movhi	r2,33044
81115664:	defff404 	addi	sp,sp,-48
81115668:	10928504 	addi	r2,r2,18964
8111566c:	de00012e 	bgeu	sp,et,81115674 <_strtol_r+0x14>
81115670:	003b68fa 	trap	3
81115674:	dd400715 	stw	r21,28(sp)
81115678:	15400017 	ldw	r21,0(r2)
8111567c:	dd800815 	stw	r22,32(sp)
81115680:	dd000615 	stw	r20,24(sp)
81115684:	dcc00515 	stw	r19,20(sp)
81115688:	d9000015 	stw	r4,0(sp)
8111568c:	dfc00b15 	stw	ra,44(sp)
81115690:	df000a15 	stw	fp,40(sp)
81115694:	ddc00915 	stw	r23,36(sp)
81115698:	dc800415 	stw	r18,16(sp)
8111569c:	dc400315 	stw	r17,12(sp)
811156a0:	dc000215 	stw	r16,8(sp)
811156a4:	2829883a 	mov	r20,r5
811156a8:	3027883a 	mov	r19,r6
811156ac:	382d883a 	mov	r22,r7
811156b0:	2809883a 	mov	r4,r5
811156b4:	24000003 	ldbu	r16,0(r4)
811156b8:	24400044 	addi	r17,r4,1
811156bc:	2007883a 	mov	r3,r4
811156c0:	ac05883a 	add	r2,r21,r16
811156c4:	10800043 	ldbu	r2,1(r2)
811156c8:	8809883a 	mov	r4,r17
811156cc:	1080020c 	andi	r2,r2,8
811156d0:	103ff81e 	bne	r2,zero,811156b4 <__reset+0xfb0f56b4>
811156d4:	00800b44 	movi	r2,45
811156d8:	80805826 	beq	r16,r2,8111583c <_strtol_r+0x1dc>
811156dc:	00800ac4 	movi	r2,43
811156e0:	80805a26 	beq	r16,r2,8111584c <_strtol_r+0x1ec>
811156e4:	0039883a 	mov	fp,zero
811156e8:	b0004426 	beq	r22,zero,811157fc <_strtol_r+0x19c>
811156ec:	00800404 	movi	r2,16
811156f0:	b0806026 	beq	r22,r2,81115874 <_strtol_r+0x214>
811156f4:	b02f883a 	mov	r23,r22
811156f8:	00a00034 	movhi	r2,32768
811156fc:	e025003a 	cmpeq	r18,fp,zero
81115700:	14a5c83a 	sub	r18,r2,r18
81115704:	b80b883a 	mov	r5,r23
81115708:	9009883a 	mov	r4,r18
8111570c:	11270dc0 	call	811270dc <__umodsi3>
81115710:	b80b883a 	mov	r5,r23
81115714:	9009883a 	mov	r4,r18
81115718:	d8800115 	stw	r2,4(sp)
8111571c:	11270780 	call	81127078 <__udivsi3>
81115720:	ac07883a 	add	r3,r21,r16
81115724:	18c00043 	ldbu	r3,1(r3)
81115728:	880b883a 	mov	r5,r17
8111572c:	000d883a 	mov	r6,zero
81115730:	1a00010c 	andi	r8,r3,4
81115734:	0009883a 	mov	r4,zero
81115738:	02800044 	movi	r10,1
8111573c:	027fffc4 	movi	r9,-1
81115740:	d9c00117 	ldw	r7,4(sp)
81115744:	40000e26 	beq	r8,zero,81115780 <_strtol_r+0x120>
81115748:	843ff404 	addi	r16,r16,-48
8111574c:	8580120e 	bge	r16,r22,81115798 <_strtol_r+0x138>
81115750:	32400526 	beq	r6,r9,81115768 <_strtol_r+0x108>
81115754:	11002536 	bltu	r2,r4,811157ec <_strtol_r+0x18c>
81115758:	20802326 	beq	r4,r2,811157e8 <_strtol_r+0x188>
8111575c:	25c9383a 	mul	r4,r4,r23
81115760:	01800044 	movi	r6,1
81115764:	8109883a 	add	r4,r16,r4
81115768:	2c000003 	ldbu	r16,0(r5)
8111576c:	29400044 	addi	r5,r5,1
81115770:	ac07883a 	add	r3,r21,r16
81115774:	18c00043 	ldbu	r3,1(r3)
81115778:	1a00010c 	andi	r8,r3,4
8111577c:	403ff21e 	bne	r8,zero,81115748 <__reset+0xfb0f5748>
81115780:	18c000cc 	andi	r3,r3,3
81115784:	18000426 	beq	r3,zero,81115798 <_strtol_r+0x138>
81115788:	1a801a26 	beq	r3,r10,811157f4 <_strtol_r+0x194>
8111578c:	00c015c4 	movi	r3,87
81115790:	80e1c83a 	sub	r16,r16,r3
81115794:	85bfee16 	blt	r16,r22,81115750 <__reset+0xfb0f5750>
81115798:	00bfffc4 	movi	r2,-1
8111579c:	30801e26 	beq	r6,r2,81115818 <_strtol_r+0x1b8>
811157a0:	e0001b1e 	bne	fp,zero,81115810 <_strtol_r+0x1b0>
811157a4:	2005883a 	mov	r2,r4
811157a8:	98000326 	beq	r19,zero,811157b8 <_strtol_r+0x158>
811157ac:	3000211e 	bne	r6,zero,81115834 <_strtol_r+0x1d4>
811157b0:	a00b883a 	mov	r5,r20
811157b4:	99400015 	stw	r5,0(r19)
811157b8:	dfc00b17 	ldw	ra,44(sp)
811157bc:	df000a17 	ldw	fp,40(sp)
811157c0:	ddc00917 	ldw	r23,36(sp)
811157c4:	dd800817 	ldw	r22,32(sp)
811157c8:	dd400717 	ldw	r21,28(sp)
811157cc:	dd000617 	ldw	r20,24(sp)
811157d0:	dcc00517 	ldw	r19,20(sp)
811157d4:	dc800417 	ldw	r18,16(sp)
811157d8:	dc400317 	ldw	r17,12(sp)
811157dc:	dc000217 	ldw	r16,8(sp)
811157e0:	dec00c04 	addi	sp,sp,48
811157e4:	f800283a 	ret
811157e8:	3c3fdc0e 	bge	r7,r16,8111575c <__reset+0xfb0f575c>
811157ec:	01bfffc4 	movi	r6,-1
811157f0:	003fdd06 	br	81115768 <__reset+0xfb0f5768>
811157f4:	00c00dc4 	movi	r3,55
811157f8:	003fe506 	br	81115790 <__reset+0xfb0f5790>
811157fc:	00800c04 	movi	r2,48
81115800:	80801626 	beq	r16,r2,8111585c <_strtol_r+0x1fc>
81115804:	05800284 	movi	r22,10
81115808:	b02f883a 	mov	r23,r22
8111580c:	003fba06 	br	811156f8 <__reset+0xfb0f56f8>
81115810:	0109c83a 	sub	r4,zero,r4
81115814:	003fe306 	br	811157a4 <__reset+0xfb0f57a4>
81115818:	d9000017 	ldw	r4,0(sp)
8111581c:	00c00884 	movi	r3,34
81115820:	e005003a 	cmpeq	r2,fp,zero
81115824:	20c00015 	stw	r3,0(r4)
81115828:	00e00034 	movhi	r3,32768
8111582c:	1885c83a 	sub	r2,r3,r2
81115830:	983fe126 	beq	r19,zero,811157b8 <__reset+0xfb0f57b8>
81115834:	297fffc4 	addi	r5,r5,-1
81115838:	003fde06 	br	811157b4 <__reset+0xfb0f57b4>
8111583c:	1c400084 	addi	r17,r3,2
81115840:	1c000043 	ldbu	r16,1(r3)
81115844:	07000044 	movi	fp,1
81115848:	003fa706 	br	811156e8 <__reset+0xfb0f56e8>
8111584c:	1c400084 	addi	r17,r3,2
81115850:	1c000043 	ldbu	r16,1(r3)
81115854:	0039883a 	mov	fp,zero
81115858:	003fa306 	br	811156e8 <__reset+0xfb0f56e8>
8111585c:	88800003 	ldbu	r2,0(r17)
81115860:	00c01604 	movi	r3,88
81115864:	108037cc 	andi	r2,r2,223
81115868:	10c00826 	beq	r2,r3,8111588c <_strtol_r+0x22c>
8111586c:	05800204 	movi	r22,8
81115870:	003fa006 	br	811156f4 <__reset+0xfb0f56f4>
81115874:	00800c04 	movi	r2,48
81115878:	80bf9e1e 	bne	r16,r2,811156f4 <__reset+0xfb0f56f4>
8111587c:	88800003 	ldbu	r2,0(r17)
81115880:	00c01604 	movi	r3,88
81115884:	108037cc 	andi	r2,r2,223
81115888:	10ff9a1e 	bne	r2,r3,811156f4 <__reset+0xfb0f56f4>
8111588c:	05c00404 	movi	r23,16
81115890:	8c000043 	ldbu	r16,1(r17)
81115894:	b82d883a 	mov	r22,r23
81115898:	8c400084 	addi	r17,r17,2
8111589c:	003f9606 	br	811156f8 <__reset+0xfb0f56f8>

811158a0 <strtol>:
811158a0:	00a04534 	movhi	r2,33044
811158a4:	10928704 	addi	r2,r2,18972
811158a8:	300f883a 	mov	r7,r6
811158ac:	280d883a 	mov	r6,r5
811158b0:	200b883a 	mov	r5,r4
811158b4:	11000017 	ldw	r4,0(r2)
811158b8:	11156601 	jmpi	81115660 <_strtol_r>

811158bc <___svfprintf_internal_r>:
811158bc:	deffb704 	addi	sp,sp,-292
811158c0:	de00012e 	bgeu	sp,et,811158c8 <___svfprintf_internal_r+0xc>
811158c4:	003b68fa 	trap	3
811158c8:	dfc04815 	stw	ra,288(sp)
811158cc:	ddc04615 	stw	r23,280(sp)
811158d0:	d9402c15 	stw	r5,176(sp)
811158d4:	d9003915 	stw	r4,228(sp)
811158d8:	302f883a 	mov	r23,r6
811158dc:	d9c02d15 	stw	r7,180(sp)
811158e0:	df004715 	stw	fp,284(sp)
811158e4:	dd804515 	stw	r22,276(sp)
811158e8:	dd404415 	stw	r21,272(sp)
811158ec:	dd004315 	stw	r20,268(sp)
811158f0:	dcc04215 	stw	r19,264(sp)
811158f4:	dc804115 	stw	r18,260(sp)
811158f8:	dc404015 	stw	r17,256(sp)
811158fc:	dc003f15 	stw	r16,252(sp)
81115900:	111e7a40 	call	8111e7a4 <_localeconv_r>
81115904:	10800017 	ldw	r2,0(r2)
81115908:	1009883a 	mov	r4,r2
8111590c:	d8803415 	stw	r2,208(sp)
81115910:	11155840 	call	81115584 <strlen>
81115914:	d8c02c17 	ldw	r3,176(sp)
81115918:	d8803815 	stw	r2,224(sp)
8111591c:	1880030b 	ldhu	r2,12(r3)
81115920:	1080200c 	andi	r2,r2,128
81115924:	10000226 	beq	r2,zero,81115930 <___svfprintf_internal_r+0x74>
81115928:	18800417 	ldw	r2,16(r3)
8111592c:	10067f26 	beq	r2,zero,8111732c <___svfprintf_internal_r+0x1a70>
81115930:	dcc03917 	ldw	r19,228(sp)
81115934:	d8c00404 	addi	r3,sp,16
81115938:	05604534 	movhi	r21,33044
8111593c:	d9001e04 	addi	r4,sp,120
81115940:	ad48ac84 	addi	r21,r21,8882
81115944:	d8c01e15 	stw	r3,120(sp)
81115948:	d8002015 	stw	zero,128(sp)
8111594c:	d8001f15 	stw	zero,124(sp)
81115950:	d8003315 	stw	zero,204(sp)
81115954:	d8003615 	stw	zero,216(sp)
81115958:	d8003715 	stw	zero,220(sp)
8111595c:	1811883a 	mov	r8,r3
81115960:	d8003a15 	stw	zero,232(sp)
81115964:	d8003b15 	stw	zero,236(sp)
81115968:	d8002f15 	stw	zero,188(sp)
8111596c:	d9002815 	stw	r4,160(sp)
81115970:	b8800007 	ldb	r2,0(r23)
81115974:	10026726 	beq	r2,zero,81116314 <___svfprintf_internal_r+0xa58>
81115978:	00c00944 	movi	r3,37
8111597c:	b821883a 	mov	r16,r23
81115980:	10c0021e 	bne	r2,r3,8111598c <___svfprintf_internal_r+0xd0>
81115984:	00001406 	br	811159d8 <___svfprintf_internal_r+0x11c>
81115988:	10c00326 	beq	r2,r3,81115998 <___svfprintf_internal_r+0xdc>
8111598c:	84000044 	addi	r16,r16,1
81115990:	80800007 	ldb	r2,0(r16)
81115994:	103ffc1e 	bne	r2,zero,81115988 <__reset+0xfb0f5988>
81115998:	85e3c83a 	sub	r17,r16,r23
8111599c:	88000e26 	beq	r17,zero,811159d8 <___svfprintf_internal_r+0x11c>
811159a0:	d8c02017 	ldw	r3,128(sp)
811159a4:	d8801f17 	ldw	r2,124(sp)
811159a8:	45c00015 	stw	r23,0(r8)
811159ac:	1c47883a 	add	r3,r3,r17
811159b0:	10800044 	addi	r2,r2,1
811159b4:	d8c02015 	stw	r3,128(sp)
811159b8:	44400115 	stw	r17,4(r8)
811159bc:	d8801f15 	stw	r2,124(sp)
811159c0:	00c001c4 	movi	r3,7
811159c4:	18809716 	blt	r3,r2,81115c24 <___svfprintf_internal_r+0x368>
811159c8:	42000204 	addi	r8,r8,8
811159cc:	d9402f17 	ldw	r5,188(sp)
811159d0:	2c4b883a 	add	r5,r5,r17
811159d4:	d9402f15 	stw	r5,188(sp)
811159d8:	80800007 	ldb	r2,0(r16)
811159dc:	10009826 	beq	r2,zero,81115c40 <___svfprintf_internal_r+0x384>
811159e0:	84400047 	ldb	r17,1(r16)
811159e4:	00bfffc4 	movi	r2,-1
811159e8:	85c00044 	addi	r23,r16,1
811159ec:	d8002785 	stb	zero,158(sp)
811159f0:	0007883a 	mov	r3,zero
811159f4:	000f883a 	mov	r7,zero
811159f8:	d8802915 	stw	r2,164(sp)
811159fc:	d8003115 	stw	zero,196(sp)
81115a00:	0025883a 	mov	r18,zero
81115a04:	01401604 	movi	r5,88
81115a08:	01800244 	movi	r6,9
81115a0c:	02800a84 	movi	r10,42
81115a10:	02401b04 	movi	r9,108
81115a14:	bdc00044 	addi	r23,r23,1
81115a18:	88bff804 	addi	r2,r17,-32
81115a1c:	2882f036 	bltu	r5,r2,811165e0 <___svfprintf_internal_r+0xd24>
81115a20:	100490ba 	slli	r2,r2,2
81115a24:	01204474 	movhi	r4,33041
81115a28:	21168e04 	addi	r4,r4,23096
81115a2c:	1105883a 	add	r2,r2,r4
81115a30:	10800017 	ldw	r2,0(r2)
81115a34:	1000683a 	jmp	r2
81115a38:	81116548 	cmpgei	r4,r16,17813
81115a3c:	811165e0 	cmpeqi	r4,r16,17815
81115a40:	811165e0 	cmpeqi	r4,r16,17815
81115a44:	8111653c 	xorhi	r4,r16,17812
81115a48:	811165e0 	cmpeqi	r4,r16,17815
81115a4c:	811165e0 	cmpeqi	r4,r16,17815
81115a50:	811165e0 	cmpeqi	r4,r16,17815
81115a54:	811165e0 	cmpeqi	r4,r16,17815
81115a58:	811165e0 	cmpeqi	r4,r16,17815
81115a5c:	811165e0 	cmpeqi	r4,r16,17815
81115a60:	81115c9c 	xori	r4,r16,17778
81115a64:	81116478 	rdprs	r4,r16,17809
81115a68:	811165e0 	cmpeqi	r4,r16,17815
81115a6c:	81115bac 	andhi	r4,r16,17774
81115a70:	81115cc4 	addi	r4,r16,17779
81115a74:	811165e0 	cmpeqi	r4,r16,17815
81115a78:	81115d38 	rdprs	r4,r16,17780
81115a7c:	81115d04 	addi	r4,r16,17780
81115a80:	81115d04 	addi	r4,r16,17780
81115a84:	81115d04 	addi	r4,r16,17780
81115a88:	81115d04 	addi	r4,r16,17780
81115a8c:	81115d04 	addi	r4,r16,17780
81115a90:	81115d04 	addi	r4,r16,17780
81115a94:	81115d04 	addi	r4,r16,17780
81115a98:	81115d04 	addi	r4,r16,17780
81115a9c:	81115d04 	addi	r4,r16,17780
81115aa0:	811165e0 	cmpeqi	r4,r16,17815
81115aa4:	811165e0 	cmpeqi	r4,r16,17815
81115aa8:	811165e0 	cmpeqi	r4,r16,17815
81115aac:	811165e0 	cmpeqi	r4,r16,17815
81115ab0:	811165e0 	cmpeqi	r4,r16,17815
81115ab4:	811165e0 	cmpeqi	r4,r16,17815
81115ab8:	811165e0 	cmpeqi	r4,r16,17815
81115abc:	811165e0 	cmpeqi	r4,r16,17815
81115ac0:	811165e0 	cmpeqi	r4,r16,17815
81115ac4:	811165e0 	cmpeqi	r4,r16,17815
81115ac8:	81115df0 	cmpltui	r4,r16,17783
81115acc:	81115d44 	addi	r4,r16,17781
81115ad0:	811165e0 	cmpeqi	r4,r16,17815
81115ad4:	81115d44 	addi	r4,r16,17781
81115ad8:	811165e0 	cmpeqi	r4,r16,17815
81115adc:	811165e0 	cmpeqi	r4,r16,17815
81115ae0:	811165e0 	cmpeqi	r4,r16,17815
81115ae4:	811165e0 	cmpeqi	r4,r16,17815
81115ae8:	81115de4 	muli	r4,r16,17783
81115aec:	811165e0 	cmpeqi	r4,r16,17815
81115af0:	811165e0 	cmpeqi	r4,r16,17815
81115af4:	81115eac 	andhi	r4,r16,17786
81115af8:	811165e0 	cmpeqi	r4,r16,17815
81115afc:	811165e0 	cmpeqi	r4,r16,17815
81115b00:	811165e0 	cmpeqi	r4,r16,17815
81115b04:	811165e0 	cmpeqi	r4,r16,17815
81115b08:	811165e0 	cmpeqi	r4,r16,17815
81115b0c:	8111631c 	xori	r4,r16,17804
81115b10:	811165e0 	cmpeqi	r4,r16,17815
81115b14:	811165e0 	cmpeqi	r4,r16,17815
81115b18:	8111637c 	xorhi	r4,r16,17805
81115b1c:	811165e0 	cmpeqi	r4,r16,17815
81115b20:	811165e0 	cmpeqi	r4,r16,17815
81115b24:	811165e0 	cmpeqi	r4,r16,17815
81115b28:	811165e0 	cmpeqi	r4,r16,17815
81115b2c:	811165e0 	cmpeqi	r4,r16,17815
81115b30:	811165e0 	cmpeqi	r4,r16,17815
81115b34:	811165e0 	cmpeqi	r4,r16,17815
81115b38:	811165e0 	cmpeqi	r4,r16,17815
81115b3c:	811165e0 	cmpeqi	r4,r16,17815
81115b40:	811165e0 	cmpeqi	r4,r16,17815
81115b44:	8111642c 	andhi	r4,r16,17808
81115b48:	81116568 	cmpgeui	r4,r16,17813
81115b4c:	81115d44 	addi	r4,r16,17781
81115b50:	81115d44 	addi	r4,r16,17781
81115b54:	81115d44 	addi	r4,r16,17781
81115b58:	811165bc 	xorhi	r4,r16,17814
81115b5c:	81116568 	cmpgeui	r4,r16,17813
81115b60:	811165e0 	cmpeqi	r4,r16,17815
81115b64:	811165e0 	cmpeqi	r4,r16,17815
81115b68:	81116578 	rdprs	r4,r16,17813
81115b6c:	811165e0 	cmpeqi	r4,r16,17815
81115b70:	81116588 	cmpgei	r4,r16,17814
81115b74:	81116468 	cmpgeui	r4,r16,17809
81115b78:	81115bb8 	rdprs	r4,r16,17774
81115b7c:	81116488 	cmpgei	r4,r16,17810
81115b80:	811165e0 	cmpeqi	r4,r16,17815
81115b84:	81116494 	ori	r4,r16,17810
81115b88:	811165e0 	cmpeqi	r4,r16,17815
81115b8c:	811164f0 	cmpltui	r4,r16,17811
81115b90:	811165e0 	cmpeqi	r4,r16,17815
81115b94:	811165e0 	cmpeqi	r4,r16,17815
81115b98:	81116500 	call	88111650 <__reset+0x20f1650>
81115b9c:	d9003117 	ldw	r4,196(sp)
81115ba0:	d8802d15 	stw	r2,180(sp)
81115ba4:	0109c83a 	sub	r4,zero,r4
81115ba8:	d9003115 	stw	r4,196(sp)
81115bac:	94800114 	ori	r18,r18,4
81115bb0:	bc400007 	ldb	r17,0(r23)
81115bb4:	003f9706 	br	81115a14 <__reset+0xfb0f5a14>
81115bb8:	00800c04 	movi	r2,48
81115bbc:	d9002d17 	ldw	r4,180(sp)
81115bc0:	d9402917 	ldw	r5,164(sp)
81115bc4:	d8802705 	stb	r2,156(sp)
81115bc8:	00801e04 	movi	r2,120
81115bcc:	d8802745 	stb	r2,157(sp)
81115bd0:	d8002785 	stb	zero,158(sp)
81115bd4:	20c00104 	addi	r3,r4,4
81115bd8:	25000017 	ldw	r20,0(r4)
81115bdc:	002d883a 	mov	r22,zero
81115be0:	90800094 	ori	r2,r18,2
81115be4:	28028616 	blt	r5,zero,81116600 <___svfprintf_internal_r+0xd44>
81115be8:	00bfdfc4 	movi	r2,-129
81115bec:	90a4703a 	and	r18,r18,r2
81115bf0:	d8c02d15 	stw	r3,180(sp)
81115bf4:	94800094 	ori	r18,r18,2
81115bf8:	a002731e 	bne	r20,zero,811165c8 <___svfprintf_internal_r+0xd0c>
81115bfc:	00a04534 	movhi	r2,33044
81115c00:	1088a504 	addi	r2,r2,8852
81115c04:	d8803a15 	stw	r2,232(sp)
81115c08:	04401e04 	movi	r17,120
81115c0c:	d8c02917 	ldw	r3,164(sp)
81115c10:	0039883a 	mov	fp,zero
81115c14:	1801d526 	beq	r3,zero,8111636c <___svfprintf_internal_r+0xab0>
81115c18:	0029883a 	mov	r20,zero
81115c1c:	002d883a 	mov	r22,zero
81115c20:	0001f106 	br	811163e8 <___svfprintf_internal_r+0xb2c>
81115c24:	d9402c17 	ldw	r5,176(sp)
81115c28:	d9801e04 	addi	r6,sp,120
81115c2c:	9809883a 	mov	r4,r19
81115c30:	11224dc0 	call	811224dc <__ssprint_r>
81115c34:	1000081e 	bne	r2,zero,81115c58 <___svfprintf_internal_r+0x39c>
81115c38:	da000404 	addi	r8,sp,16
81115c3c:	003f6306 	br	811159cc <__reset+0xfb0f59cc>
81115c40:	d8802017 	ldw	r2,128(sp)
81115c44:	10000426 	beq	r2,zero,81115c58 <___svfprintf_internal_r+0x39c>
81115c48:	d9402c17 	ldw	r5,176(sp)
81115c4c:	d9003917 	ldw	r4,228(sp)
81115c50:	d9801e04 	addi	r6,sp,120
81115c54:	11224dc0 	call	811224dc <__ssprint_r>
81115c58:	d8802c17 	ldw	r2,176(sp)
81115c5c:	10c0030b 	ldhu	r3,12(r2)
81115c60:	d8802f17 	ldw	r2,188(sp)
81115c64:	18c0100c 	andi	r3,r3,64
81115c68:	1805f51e 	bne	r3,zero,81117440 <___svfprintf_internal_r+0x1b84>
81115c6c:	dfc04817 	ldw	ra,288(sp)
81115c70:	df004717 	ldw	fp,284(sp)
81115c74:	ddc04617 	ldw	r23,280(sp)
81115c78:	dd804517 	ldw	r22,276(sp)
81115c7c:	dd404417 	ldw	r21,272(sp)
81115c80:	dd004317 	ldw	r20,268(sp)
81115c84:	dcc04217 	ldw	r19,264(sp)
81115c88:	dc804117 	ldw	r18,260(sp)
81115c8c:	dc404017 	ldw	r17,256(sp)
81115c90:	dc003f17 	ldw	r16,252(sp)
81115c94:	dec04904 	addi	sp,sp,292
81115c98:	f800283a 	ret
81115c9c:	d8802d17 	ldw	r2,180(sp)
81115ca0:	d9002d17 	ldw	r4,180(sp)
81115ca4:	10800017 	ldw	r2,0(r2)
81115ca8:	d8803115 	stw	r2,196(sp)
81115cac:	20800104 	addi	r2,r4,4
81115cb0:	d9003117 	ldw	r4,196(sp)
81115cb4:	203fb916 	blt	r4,zero,81115b9c <__reset+0xfb0f5b9c>
81115cb8:	d8802d15 	stw	r2,180(sp)
81115cbc:	bc400007 	ldb	r17,0(r23)
81115cc0:	003f5406 	br	81115a14 <__reset+0xfb0f5a14>
81115cc4:	bc400007 	ldb	r17,0(r23)
81115cc8:	bac00044 	addi	r11,r23,1
81115ccc:	8a873926 	beq	r17,r10,811179b4 <___svfprintf_internal_r+0x20f8>
81115cd0:	88bff404 	addi	r2,r17,-48
81115cd4:	0009883a 	mov	r4,zero
81115cd8:	30868836 	bltu	r6,r2,811176fc <___svfprintf_internal_r+0x1e40>
81115cdc:	5c400007 	ldb	r17,0(r11)
81115ce0:	210002a4 	muli	r4,r4,10
81115ce4:	5dc00044 	addi	r23,r11,1
81115ce8:	b817883a 	mov	r11,r23
81115cec:	2089883a 	add	r4,r4,r2
81115cf0:	88bff404 	addi	r2,r17,-48
81115cf4:	30bff92e 	bgeu	r6,r2,81115cdc <__reset+0xfb0f5cdc>
81115cf8:	2005d716 	blt	r4,zero,81117458 <___svfprintf_internal_r+0x1b9c>
81115cfc:	d9002915 	stw	r4,164(sp)
81115d00:	003f4506 	br	81115a18 <__reset+0xfb0f5a18>
81115d04:	b809883a 	mov	r4,r23
81115d08:	d8003115 	stw	zero,196(sp)
81115d0c:	88bff404 	addi	r2,r17,-48
81115d10:	0017883a 	mov	r11,zero
81115d14:	24400007 	ldb	r17,0(r4)
81115d18:	5ac002a4 	muli	r11,r11,10
81115d1c:	bdc00044 	addi	r23,r23,1
81115d20:	b809883a 	mov	r4,r23
81115d24:	12d7883a 	add	r11,r2,r11
81115d28:	88bff404 	addi	r2,r17,-48
81115d2c:	30bff92e 	bgeu	r6,r2,81115d14 <__reset+0xfb0f5d14>
81115d30:	dac03115 	stw	r11,196(sp)
81115d34:	003f3806 	br	81115a18 <__reset+0xfb0f5a18>
81115d38:	94802014 	ori	r18,r18,128
81115d3c:	bc400007 	ldb	r17,0(r23)
81115d40:	003f3406 	br	81115a14 <__reset+0xfb0f5a14>
81115d44:	18c03fcc 	andi	r3,r3,255
81115d48:	1807471e 	bne	r3,zero,81117a68 <___svfprintf_internal_r+0x21ac>
81115d4c:	9080020c 	andi	r2,r18,8
81115d50:	10047d26 	beq	r2,zero,81116f48 <___svfprintf_internal_r+0x168c>
81115d54:	d8c02d17 	ldw	r3,180(sp)
81115d58:	d9002d17 	ldw	r4,180(sp)
81115d5c:	d9402d17 	ldw	r5,180(sp)
81115d60:	18c00017 	ldw	r3,0(r3)
81115d64:	21000117 	ldw	r4,4(r4)
81115d68:	29400204 	addi	r5,r5,8
81115d6c:	d8c03615 	stw	r3,216(sp)
81115d70:	d9003715 	stw	r4,220(sp)
81115d74:	d9402d15 	stw	r5,180(sp)
81115d78:	d9003617 	ldw	r4,216(sp)
81115d7c:	d9403717 	ldw	r5,220(sp)
81115d80:	da003e15 	stw	r8,248(sp)
81115d84:	04000044 	movi	r16,1
81115d88:	11202f00 	call	811202f0 <__fpclassifyd>
81115d8c:	da003e17 	ldw	r8,248(sp)
81115d90:	14044b1e 	bne	r2,r16,81116ec0 <___svfprintf_internal_r+0x1604>
81115d94:	d9003617 	ldw	r4,216(sp)
81115d98:	d9403717 	ldw	r5,220(sp)
81115d9c:	000d883a 	mov	r6,zero
81115da0:	000f883a 	mov	r7,zero
81115da4:	11286380 	call	81128638 <__ledf2>
81115da8:	da003e17 	ldw	r8,248(sp)
81115dac:	1005f316 	blt	r2,zero,8111757c <___svfprintf_internal_r+0x1cc0>
81115db0:	df002783 	ldbu	fp,158(sp)
81115db4:	008011c4 	movi	r2,71
81115db8:	1445590e 	bge	r2,r17,81117320 <___svfprintf_internal_r+0x1a64>
81115dbc:	04204534 	movhi	r16,33044
81115dc0:	84089d04 	addi	r16,r16,8820
81115dc4:	00c000c4 	movi	r3,3
81115dc8:	00bfdfc4 	movi	r2,-129
81115dcc:	d8c02a15 	stw	r3,168(sp)
81115dd0:	90a4703a 	and	r18,r18,r2
81115dd4:	d8c02e15 	stw	r3,184(sp)
81115dd8:	d8002915 	stw	zero,164(sp)
81115ddc:	d8003215 	stw	zero,200(sp)
81115de0:	00006606 	br	81115f7c <___svfprintf_internal_r+0x6c0>
81115de4:	94800214 	ori	r18,r18,8
81115de8:	bc400007 	ldb	r17,0(r23)
81115dec:	003f0906 	br	81115a14 <__reset+0xfb0f5a14>
81115df0:	18c03fcc 	andi	r3,r3,255
81115df4:	1807181e 	bne	r3,zero,81117a58 <___svfprintf_internal_r+0x219c>
81115df8:	94800414 	ori	r18,r18,16
81115dfc:	9080080c 	andi	r2,r18,32
81115e00:	10039626 	beq	r2,zero,81116c5c <___svfprintf_internal_r+0x13a0>
81115e04:	d9402d17 	ldw	r5,180(sp)
81115e08:	28800117 	ldw	r2,4(r5)
81115e0c:	2d000017 	ldw	r20,0(r5)
81115e10:	29400204 	addi	r5,r5,8
81115e14:	d9402d15 	stw	r5,180(sp)
81115e18:	102d883a 	mov	r22,r2
81115e1c:	10039816 	blt	r2,zero,81116c80 <___svfprintf_internal_r+0x13c4>
81115e20:	d9402917 	ldw	r5,164(sp)
81115e24:	df002783 	ldbu	fp,158(sp)
81115e28:	2803ab16 	blt	r5,zero,81116cd8 <___svfprintf_internal_r+0x141c>
81115e2c:	00ffdfc4 	movi	r3,-129
81115e30:	a584b03a 	or	r2,r20,r22
81115e34:	90e4703a 	and	r18,r18,r3
81115e38:	10014a26 	beq	r2,zero,81116364 <___svfprintf_internal_r+0xaa8>
81115e3c:	b0034b26 	beq	r22,zero,81116b6c <___svfprintf_internal_r+0x12b0>
81115e40:	dc402a15 	stw	r17,168(sp)
81115e44:	dc001e04 	addi	r16,sp,120
81115e48:	b023883a 	mov	r17,r22
81115e4c:	402d883a 	mov	r22,r8
81115e50:	a009883a 	mov	r4,r20
81115e54:	880b883a 	mov	r5,r17
81115e58:	01800284 	movi	r6,10
81115e5c:	000f883a 	mov	r7,zero
81115e60:	1126a400 	call	81126a40 <__umoddi3>
81115e64:	10800c04 	addi	r2,r2,48
81115e68:	843fffc4 	addi	r16,r16,-1
81115e6c:	a009883a 	mov	r4,r20
81115e70:	880b883a 	mov	r5,r17
81115e74:	80800005 	stb	r2,0(r16)
81115e78:	01800284 	movi	r6,10
81115e7c:	000f883a 	mov	r7,zero
81115e80:	11264c00 	call	811264c0 <__udivdi3>
81115e84:	1029883a 	mov	r20,r2
81115e88:	10c4b03a 	or	r2,r2,r3
81115e8c:	1823883a 	mov	r17,r3
81115e90:	103fef1e 	bne	r2,zero,81115e50 <__reset+0xfb0f5e50>
81115e94:	d8c02817 	ldw	r3,160(sp)
81115e98:	dc402a17 	ldw	r17,168(sp)
81115e9c:	b011883a 	mov	r8,r22
81115ea0:	1c07c83a 	sub	r3,r3,r16
81115ea4:	d8c02e15 	stw	r3,184(sp)
81115ea8:	00002e06 	br	81115f64 <___svfprintf_internal_r+0x6a8>
81115eac:	18c03fcc 	andi	r3,r3,255
81115eb0:	1806e71e 	bne	r3,zero,81117a50 <___svfprintf_internal_r+0x2194>
81115eb4:	94800414 	ori	r18,r18,16
81115eb8:	9080080c 	andi	r2,r18,32
81115ebc:	1002d426 	beq	r2,zero,81116a10 <___svfprintf_internal_r+0x1154>
81115ec0:	d9402d17 	ldw	r5,180(sp)
81115ec4:	d8c02917 	ldw	r3,164(sp)
81115ec8:	d8002785 	stb	zero,158(sp)
81115ecc:	28800204 	addi	r2,r5,8
81115ed0:	2d000017 	ldw	r20,0(r5)
81115ed4:	2d800117 	ldw	r22,4(r5)
81115ed8:	18041516 	blt	r3,zero,81116f30 <___svfprintf_internal_r+0x1674>
81115edc:	013fdfc4 	movi	r4,-129
81115ee0:	a586b03a 	or	r3,r20,r22
81115ee4:	d8802d15 	stw	r2,180(sp)
81115ee8:	9124703a 	and	r18,r18,r4
81115eec:	1802d51e 	bne	r3,zero,81116a44 <___svfprintf_internal_r+0x1188>
81115ef0:	d9402917 	ldw	r5,164(sp)
81115ef4:	0039883a 	mov	fp,zero
81115ef8:	2806be26 	beq	r5,zero,811179f4 <___svfprintf_internal_r+0x2138>
81115efc:	0029883a 	mov	r20,zero
81115f00:	002d883a 	mov	r22,zero
81115f04:	dc001e04 	addi	r16,sp,120
81115f08:	a006d0fa 	srli	r3,r20,3
81115f0c:	b008977a 	slli	r4,r22,29
81115f10:	b02cd0fa 	srli	r22,r22,3
81115f14:	a50001cc 	andi	r20,r20,7
81115f18:	a0800c04 	addi	r2,r20,48
81115f1c:	843fffc4 	addi	r16,r16,-1
81115f20:	20e8b03a 	or	r20,r4,r3
81115f24:	80800005 	stb	r2,0(r16)
81115f28:	a586b03a 	or	r3,r20,r22
81115f2c:	183ff61e 	bne	r3,zero,81115f08 <__reset+0xfb0f5f08>
81115f30:	90c0004c 	andi	r3,r18,1
81115f34:	18013926 	beq	r3,zero,8111641c <___svfprintf_internal_r+0xb60>
81115f38:	10803fcc 	andi	r2,r2,255
81115f3c:	1080201c 	xori	r2,r2,128
81115f40:	10bfe004 	addi	r2,r2,-128
81115f44:	00c00c04 	movi	r3,48
81115f48:	10c13426 	beq	r2,r3,8111641c <___svfprintf_internal_r+0xb60>
81115f4c:	80ffffc5 	stb	r3,-1(r16)
81115f50:	d8c02817 	ldw	r3,160(sp)
81115f54:	80bfffc4 	addi	r2,r16,-1
81115f58:	1021883a 	mov	r16,r2
81115f5c:	1887c83a 	sub	r3,r3,r2
81115f60:	d8c02e15 	stw	r3,184(sp)
81115f64:	d8802e17 	ldw	r2,184(sp)
81115f68:	d9002917 	ldw	r4,164(sp)
81115f6c:	1100010e 	bge	r2,r4,81115f74 <___svfprintf_internal_r+0x6b8>
81115f70:	2005883a 	mov	r2,r4
81115f74:	d8802a15 	stw	r2,168(sp)
81115f78:	d8003215 	stw	zero,200(sp)
81115f7c:	e7003fcc 	andi	fp,fp,255
81115f80:	e700201c 	xori	fp,fp,128
81115f84:	e73fe004 	addi	fp,fp,-128
81115f88:	e0000326 	beq	fp,zero,81115f98 <___svfprintf_internal_r+0x6dc>
81115f8c:	d8c02a17 	ldw	r3,168(sp)
81115f90:	18c00044 	addi	r3,r3,1
81115f94:	d8c02a15 	stw	r3,168(sp)
81115f98:	90c0008c 	andi	r3,r18,2
81115f9c:	d8c02b15 	stw	r3,172(sp)
81115fa0:	18000326 	beq	r3,zero,81115fb0 <___svfprintf_internal_r+0x6f4>
81115fa4:	d8c02a17 	ldw	r3,168(sp)
81115fa8:	18c00084 	addi	r3,r3,2
81115fac:	d8c02a15 	stw	r3,168(sp)
81115fb0:	90c0210c 	andi	r3,r18,132
81115fb4:	d8c03015 	stw	r3,192(sp)
81115fb8:	1801a11e 	bne	r3,zero,81116640 <___svfprintf_internal_r+0xd84>
81115fbc:	d9003117 	ldw	r4,196(sp)
81115fc0:	d8c02a17 	ldw	r3,168(sp)
81115fc4:	20e9c83a 	sub	r20,r4,r3
81115fc8:	05019d0e 	bge	zero,r20,81116640 <___svfprintf_internal_r+0xd84>
81115fcc:	02400404 	movi	r9,16
81115fd0:	d8c02017 	ldw	r3,128(sp)
81115fd4:	d8801f17 	ldw	r2,124(sp)
81115fd8:	4d051b0e 	bge	r9,r20,81117448 <___svfprintf_internal_r+0x1b8c>
81115fdc:	01604534 	movhi	r5,33044
81115fe0:	2948b084 	addi	r5,r5,8898
81115fe4:	dc403c15 	stw	r17,240(sp)
81115fe8:	d9403515 	stw	r5,212(sp)
81115fec:	a023883a 	mov	r17,r20
81115ff0:	482d883a 	mov	r22,r9
81115ff4:	9029883a 	mov	r20,r18
81115ff8:	070001c4 	movi	fp,7
81115ffc:	8025883a 	mov	r18,r16
81116000:	dc002c17 	ldw	r16,176(sp)
81116004:	00000306 	br	81116014 <___svfprintf_internal_r+0x758>
81116008:	8c7ffc04 	addi	r17,r17,-16
8111600c:	42000204 	addi	r8,r8,8
81116010:	b440130e 	bge	r22,r17,81116060 <___svfprintf_internal_r+0x7a4>
81116014:	01204534 	movhi	r4,33044
81116018:	18c00404 	addi	r3,r3,16
8111601c:	10800044 	addi	r2,r2,1
81116020:	2108b084 	addi	r4,r4,8898
81116024:	41000015 	stw	r4,0(r8)
81116028:	45800115 	stw	r22,4(r8)
8111602c:	d8c02015 	stw	r3,128(sp)
81116030:	d8801f15 	stw	r2,124(sp)
81116034:	e0bff40e 	bge	fp,r2,81116008 <__reset+0xfb0f6008>
81116038:	d9801e04 	addi	r6,sp,120
8111603c:	800b883a 	mov	r5,r16
81116040:	9809883a 	mov	r4,r19
81116044:	11224dc0 	call	811224dc <__ssprint_r>
81116048:	103f031e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
8111604c:	8c7ffc04 	addi	r17,r17,-16
81116050:	d8c02017 	ldw	r3,128(sp)
81116054:	d8801f17 	ldw	r2,124(sp)
81116058:	da000404 	addi	r8,sp,16
8111605c:	b47fed16 	blt	r22,r17,81116014 <__reset+0xfb0f6014>
81116060:	9021883a 	mov	r16,r18
81116064:	a025883a 	mov	r18,r20
81116068:	8829883a 	mov	r20,r17
8111606c:	dc403c17 	ldw	r17,240(sp)
81116070:	d9403517 	ldw	r5,212(sp)
81116074:	a0c7883a 	add	r3,r20,r3
81116078:	10800044 	addi	r2,r2,1
8111607c:	41400015 	stw	r5,0(r8)
81116080:	45000115 	stw	r20,4(r8)
81116084:	d8c02015 	stw	r3,128(sp)
81116088:	d8801f15 	stw	r2,124(sp)
8111608c:	010001c4 	movi	r4,7
81116090:	20829f16 	blt	r4,r2,81116b10 <___svfprintf_internal_r+0x1254>
81116094:	df002787 	ldb	fp,158(sp)
81116098:	42000204 	addi	r8,r8,8
8111609c:	e0000c26 	beq	fp,zero,811160d0 <___svfprintf_internal_r+0x814>
811160a0:	d8801f17 	ldw	r2,124(sp)
811160a4:	d9002784 	addi	r4,sp,158
811160a8:	18c00044 	addi	r3,r3,1
811160ac:	10800044 	addi	r2,r2,1
811160b0:	41000015 	stw	r4,0(r8)
811160b4:	01000044 	movi	r4,1
811160b8:	41000115 	stw	r4,4(r8)
811160bc:	d8c02015 	stw	r3,128(sp)
811160c0:	d8801f15 	stw	r2,124(sp)
811160c4:	010001c4 	movi	r4,7
811160c8:	20823816 	blt	r4,r2,811169ac <___svfprintf_internal_r+0x10f0>
811160cc:	42000204 	addi	r8,r8,8
811160d0:	d8802b17 	ldw	r2,172(sp)
811160d4:	10000c26 	beq	r2,zero,81116108 <___svfprintf_internal_r+0x84c>
811160d8:	d8801f17 	ldw	r2,124(sp)
811160dc:	d9002704 	addi	r4,sp,156
811160e0:	18c00084 	addi	r3,r3,2
811160e4:	10800044 	addi	r2,r2,1
811160e8:	41000015 	stw	r4,0(r8)
811160ec:	01000084 	movi	r4,2
811160f0:	41000115 	stw	r4,4(r8)
811160f4:	d8c02015 	stw	r3,128(sp)
811160f8:	d8801f15 	stw	r2,124(sp)
811160fc:	010001c4 	movi	r4,7
81116100:	20823216 	blt	r4,r2,811169cc <___svfprintf_internal_r+0x1110>
81116104:	42000204 	addi	r8,r8,8
81116108:	d9003017 	ldw	r4,192(sp)
8111610c:	00802004 	movi	r2,128
81116110:	20819726 	beq	r4,r2,81116770 <___svfprintf_internal_r+0xeb4>
81116114:	d9402917 	ldw	r5,164(sp)
81116118:	d8802e17 	ldw	r2,184(sp)
8111611c:	28adc83a 	sub	r22,r5,r2
81116120:	05802f0e 	bge	zero,r22,811161e0 <___svfprintf_internal_r+0x924>
81116124:	07000404 	movi	fp,16
81116128:	d8801f17 	ldw	r2,124(sp)
8111612c:	e583c00e 	bge	fp,r22,81117030 <___svfprintf_internal_r+0x1774>
81116130:	01604534 	movhi	r5,33044
81116134:	2948ac84 	addi	r5,r5,8882
81116138:	dc402915 	stw	r17,164(sp)
8111613c:	d9402b15 	stw	r5,172(sp)
81116140:	b023883a 	mov	r17,r22
81116144:	050001c4 	movi	r20,7
81116148:	902d883a 	mov	r22,r18
8111614c:	8025883a 	mov	r18,r16
81116150:	dc002c17 	ldw	r16,176(sp)
81116154:	00000306 	br	81116164 <___svfprintf_internal_r+0x8a8>
81116158:	8c7ffc04 	addi	r17,r17,-16
8111615c:	42000204 	addi	r8,r8,8
81116160:	e440110e 	bge	fp,r17,811161a8 <___svfprintf_internal_r+0x8ec>
81116164:	18c00404 	addi	r3,r3,16
81116168:	10800044 	addi	r2,r2,1
8111616c:	45400015 	stw	r21,0(r8)
81116170:	47000115 	stw	fp,4(r8)
81116174:	d8c02015 	stw	r3,128(sp)
81116178:	d8801f15 	stw	r2,124(sp)
8111617c:	a0bff60e 	bge	r20,r2,81116158 <__reset+0xfb0f6158>
81116180:	d9801e04 	addi	r6,sp,120
81116184:	800b883a 	mov	r5,r16
81116188:	9809883a 	mov	r4,r19
8111618c:	11224dc0 	call	811224dc <__ssprint_r>
81116190:	103eb11e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116194:	8c7ffc04 	addi	r17,r17,-16
81116198:	d8c02017 	ldw	r3,128(sp)
8111619c:	d8801f17 	ldw	r2,124(sp)
811161a0:	da000404 	addi	r8,sp,16
811161a4:	e47fef16 	blt	fp,r17,81116164 <__reset+0xfb0f6164>
811161a8:	9021883a 	mov	r16,r18
811161ac:	b025883a 	mov	r18,r22
811161b0:	882d883a 	mov	r22,r17
811161b4:	dc402917 	ldw	r17,164(sp)
811161b8:	d9002b17 	ldw	r4,172(sp)
811161bc:	1d87883a 	add	r3,r3,r22
811161c0:	10800044 	addi	r2,r2,1
811161c4:	41000015 	stw	r4,0(r8)
811161c8:	45800115 	stw	r22,4(r8)
811161cc:	d8c02015 	stw	r3,128(sp)
811161d0:	d8801f15 	stw	r2,124(sp)
811161d4:	010001c4 	movi	r4,7
811161d8:	2081ec16 	blt	r4,r2,8111698c <___svfprintf_internal_r+0x10d0>
811161dc:	42000204 	addi	r8,r8,8
811161e0:	9080400c 	andi	r2,r18,256
811161e4:	1001181e 	bne	r2,zero,81116648 <___svfprintf_internal_r+0xd8c>
811161e8:	d9402e17 	ldw	r5,184(sp)
811161ec:	d8801f17 	ldw	r2,124(sp)
811161f0:	44000015 	stw	r16,0(r8)
811161f4:	1947883a 	add	r3,r3,r5
811161f8:	10800044 	addi	r2,r2,1
811161fc:	41400115 	stw	r5,4(r8)
81116200:	d8c02015 	stw	r3,128(sp)
81116204:	d8801f15 	stw	r2,124(sp)
81116208:	010001c4 	movi	r4,7
8111620c:	2081d116 	blt	r4,r2,81116954 <___svfprintf_internal_r+0x1098>
81116210:	42000204 	addi	r8,r8,8
81116214:	9480010c 	andi	r18,r18,4
81116218:	90003226 	beq	r18,zero,811162e4 <___svfprintf_internal_r+0xa28>
8111621c:	d9403117 	ldw	r5,196(sp)
81116220:	d8802a17 	ldw	r2,168(sp)
81116224:	28a1c83a 	sub	r16,r5,r2
81116228:	04002e0e 	bge	zero,r16,811162e4 <___svfprintf_internal_r+0xa28>
8111622c:	04400404 	movi	r17,16
81116230:	d8801f17 	ldw	r2,124(sp)
81116234:	8c04b90e 	bge	r17,r16,8111751c <___svfprintf_internal_r+0x1c60>
81116238:	01604534 	movhi	r5,33044
8111623c:	2948b084 	addi	r5,r5,8898
81116240:	d9403515 	stw	r5,212(sp)
81116244:	048001c4 	movi	r18,7
81116248:	dd002c17 	ldw	r20,176(sp)
8111624c:	00000306 	br	8111625c <___svfprintf_internal_r+0x9a0>
81116250:	843ffc04 	addi	r16,r16,-16
81116254:	42000204 	addi	r8,r8,8
81116258:	8c00130e 	bge	r17,r16,811162a8 <___svfprintf_internal_r+0x9ec>
8111625c:	01204534 	movhi	r4,33044
81116260:	18c00404 	addi	r3,r3,16
81116264:	10800044 	addi	r2,r2,1
81116268:	2108b084 	addi	r4,r4,8898
8111626c:	41000015 	stw	r4,0(r8)
81116270:	44400115 	stw	r17,4(r8)
81116274:	d8c02015 	stw	r3,128(sp)
81116278:	d8801f15 	stw	r2,124(sp)
8111627c:	90bff40e 	bge	r18,r2,81116250 <__reset+0xfb0f6250>
81116280:	d9801e04 	addi	r6,sp,120
81116284:	a00b883a 	mov	r5,r20
81116288:	9809883a 	mov	r4,r19
8111628c:	11224dc0 	call	811224dc <__ssprint_r>
81116290:	103e711e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116294:	843ffc04 	addi	r16,r16,-16
81116298:	d8c02017 	ldw	r3,128(sp)
8111629c:	d8801f17 	ldw	r2,124(sp)
811162a0:	da000404 	addi	r8,sp,16
811162a4:	8c3fed16 	blt	r17,r16,8111625c <__reset+0xfb0f625c>
811162a8:	d9403517 	ldw	r5,212(sp)
811162ac:	1c07883a 	add	r3,r3,r16
811162b0:	10800044 	addi	r2,r2,1
811162b4:	41400015 	stw	r5,0(r8)
811162b8:	44000115 	stw	r16,4(r8)
811162bc:	d8c02015 	stw	r3,128(sp)
811162c0:	d8801f15 	stw	r2,124(sp)
811162c4:	010001c4 	movi	r4,7
811162c8:	2080060e 	bge	r4,r2,811162e4 <___svfprintf_internal_r+0xa28>
811162cc:	d9402c17 	ldw	r5,176(sp)
811162d0:	d9801e04 	addi	r6,sp,120
811162d4:	9809883a 	mov	r4,r19
811162d8:	11224dc0 	call	811224dc <__ssprint_r>
811162dc:	103e5e1e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
811162e0:	d8c02017 	ldw	r3,128(sp)
811162e4:	d8803117 	ldw	r2,196(sp)
811162e8:	d9002a17 	ldw	r4,168(sp)
811162ec:	1100010e 	bge	r2,r4,811162f4 <___svfprintf_internal_r+0xa38>
811162f0:	2005883a 	mov	r2,r4
811162f4:	d9402f17 	ldw	r5,188(sp)
811162f8:	288b883a 	add	r5,r5,r2
811162fc:	d9402f15 	stw	r5,188(sp)
81116300:	18019c1e 	bne	r3,zero,81116974 <___svfprintf_internal_r+0x10b8>
81116304:	b8800007 	ldb	r2,0(r23)
81116308:	d8001f15 	stw	zero,124(sp)
8111630c:	da000404 	addi	r8,sp,16
81116310:	103d991e 	bne	r2,zero,81115978 <__reset+0xfb0f5978>
81116314:	b821883a 	mov	r16,r23
81116318:	003daf06 	br	811159d8 <__reset+0xfb0f59d8>
8111631c:	18c03fcc 	andi	r3,r3,255
81116320:	1805c71e 	bne	r3,zero,81117a40 <___svfprintf_internal_r+0x2184>
81116324:	94800414 	ori	r18,r18,16
81116328:	9080080c 	andi	r2,r18,32
8111632c:	10020126 	beq	r2,zero,81116b34 <___svfprintf_internal_r+0x1278>
81116330:	d8802d17 	ldw	r2,180(sp)
81116334:	d9002917 	ldw	r4,164(sp)
81116338:	d8002785 	stb	zero,158(sp)
8111633c:	10c00204 	addi	r3,r2,8
81116340:	15000017 	ldw	r20,0(r2)
81116344:	15800117 	ldw	r22,4(r2)
81116348:	20038e16 	blt	r4,zero,81117184 <___svfprintf_internal_r+0x18c8>
8111634c:	013fdfc4 	movi	r4,-129
81116350:	a584b03a 	or	r2,r20,r22
81116354:	d8c02d15 	stw	r3,180(sp)
81116358:	9124703a 	and	r18,r18,r4
8111635c:	0039883a 	mov	fp,zero
81116360:	103eb61e 	bne	r2,zero,81115e3c <__reset+0xfb0f5e3c>
81116364:	d8802917 	ldw	r2,164(sp)
81116368:	1002c81e 	bne	r2,zero,81116e8c <___svfprintf_internal_r+0x15d0>
8111636c:	d8002915 	stw	zero,164(sp)
81116370:	d8002e15 	stw	zero,184(sp)
81116374:	dc001e04 	addi	r16,sp,120
81116378:	003efa06 	br	81115f64 <__reset+0xfb0f5f64>
8111637c:	18c03fcc 	andi	r3,r3,255
81116380:	1805ad1e 	bne	r3,zero,81117a38 <___svfprintf_internal_r+0x217c>
81116384:	01604534 	movhi	r5,33044
81116388:	2948a004 	addi	r5,r5,8832
8111638c:	d9403a15 	stw	r5,232(sp)
81116390:	9080080c 	andi	r2,r18,32
81116394:	10006126 	beq	r2,zero,8111651c <___svfprintf_internal_r+0xc60>
81116398:	d8802d17 	ldw	r2,180(sp)
8111639c:	15000017 	ldw	r20,0(r2)
811163a0:	15800117 	ldw	r22,4(r2)
811163a4:	10800204 	addi	r2,r2,8
811163a8:	d8802d15 	stw	r2,180(sp)
811163ac:	9080004c 	andi	r2,r18,1
811163b0:	10018e26 	beq	r2,zero,811169ec <___svfprintf_internal_r+0x1130>
811163b4:	a584b03a 	or	r2,r20,r22
811163b8:	10030926 	beq	r2,zero,81116fe0 <___svfprintf_internal_r+0x1724>
811163bc:	d8c02917 	ldw	r3,164(sp)
811163c0:	00800c04 	movi	r2,48
811163c4:	d8802705 	stb	r2,156(sp)
811163c8:	dc402745 	stb	r17,157(sp)
811163cc:	d8002785 	stb	zero,158(sp)
811163d0:	90800094 	ori	r2,r18,2
811163d4:	18048716 	blt	r3,zero,811175f4 <___svfprintf_internal_r+0x1d38>
811163d8:	00bfdfc4 	movi	r2,-129
811163dc:	90a4703a 	and	r18,r18,r2
811163e0:	94800094 	ori	r18,r18,2
811163e4:	0039883a 	mov	fp,zero
811163e8:	d9003a17 	ldw	r4,232(sp)
811163ec:	dc001e04 	addi	r16,sp,120
811163f0:	a08003cc 	andi	r2,r20,15
811163f4:	b006973a 	slli	r3,r22,28
811163f8:	2085883a 	add	r2,r4,r2
811163fc:	a028d13a 	srli	r20,r20,4
81116400:	10800003 	ldbu	r2,0(r2)
81116404:	b02cd13a 	srli	r22,r22,4
81116408:	843fffc4 	addi	r16,r16,-1
8111640c:	1d28b03a 	or	r20,r3,r20
81116410:	80800005 	stb	r2,0(r16)
81116414:	a584b03a 	or	r2,r20,r22
81116418:	103ff51e 	bne	r2,zero,811163f0 <__reset+0xfb0f63f0>
8111641c:	d8c02817 	ldw	r3,160(sp)
81116420:	1c07c83a 	sub	r3,r3,r16
81116424:	d8c02e15 	stw	r3,184(sp)
81116428:	003ece06 	br	81115f64 <__reset+0xfb0f5f64>
8111642c:	d8c02d17 	ldw	r3,180(sp)
81116430:	d9002d17 	ldw	r4,180(sp)
81116434:	d8002785 	stb	zero,158(sp)
81116438:	18800017 	ldw	r2,0(r3)
8111643c:	21000104 	addi	r4,r4,4
81116440:	00c00044 	movi	r3,1
81116444:	d8c02a15 	stw	r3,168(sp)
81116448:	d8801405 	stb	r2,80(sp)
8111644c:	d9002d15 	stw	r4,180(sp)
81116450:	d8c02e15 	stw	r3,184(sp)
81116454:	d8002915 	stw	zero,164(sp)
81116458:	d8003215 	stw	zero,200(sp)
8111645c:	dc001404 	addi	r16,sp,80
81116460:	0039883a 	mov	fp,zero
81116464:	003ecc06 	br	81115f98 <__reset+0xfb0f5f98>
81116468:	18c03fcc 	andi	r3,r3,255
8111646c:	183e9226 	beq	r3,zero,81115eb8 <__reset+0xfb0f5eb8>
81116470:	d9c02785 	stb	r7,158(sp)
81116474:	003e9006 	br	81115eb8 <__reset+0xfb0f5eb8>
81116478:	00c00044 	movi	r3,1
8111647c:	01c00ac4 	movi	r7,43
81116480:	bc400007 	ldb	r17,0(r23)
81116484:	003d6306 	br	81115a14 <__reset+0xfb0f5a14>
81116488:	94800814 	ori	r18,r18,32
8111648c:	bc400007 	ldb	r17,0(r23)
81116490:	003d6006 	br	81115a14 <__reset+0xfb0f5a14>
81116494:	d8c02d17 	ldw	r3,180(sp)
81116498:	d8002785 	stb	zero,158(sp)
8111649c:	1c000017 	ldw	r16,0(r3)
811164a0:	1d000104 	addi	r20,r3,4
811164a4:	80040f26 	beq	r16,zero,811174e4 <___svfprintf_internal_r+0x1c28>
811164a8:	d9002917 	ldw	r4,164(sp)
811164ac:	2003dc16 	blt	r4,zero,81117420 <___svfprintf_internal_r+0x1b64>
811164b0:	200d883a 	mov	r6,r4
811164b4:	000b883a 	mov	r5,zero
811164b8:	8009883a 	mov	r4,r16
811164bc:	da003e15 	stw	r8,248(sp)
811164c0:	111ea800 	call	8111ea80 <memchr>
811164c4:	da003e17 	ldw	r8,248(sp)
811164c8:	10045826 	beq	r2,zero,8111762c <___svfprintf_internal_r+0x1d70>
811164cc:	1405c83a 	sub	r2,r2,r16
811164d0:	d8802e15 	stw	r2,184(sp)
811164d4:	1003d816 	blt	r2,zero,81117438 <___svfprintf_internal_r+0x1b7c>
811164d8:	df002783 	ldbu	fp,158(sp)
811164dc:	d8802a15 	stw	r2,168(sp)
811164e0:	dd002d15 	stw	r20,180(sp)
811164e4:	d8002915 	stw	zero,164(sp)
811164e8:	d8003215 	stw	zero,200(sp)
811164ec:	003ea306 	br	81115f7c <__reset+0xfb0f5f7c>
811164f0:	18c03fcc 	andi	r3,r3,255
811164f4:	183f8c26 	beq	r3,zero,81116328 <__reset+0xfb0f6328>
811164f8:	d9c02785 	stb	r7,158(sp)
811164fc:	003f8a06 	br	81116328 <__reset+0xfb0f6328>
81116500:	18c03fcc 	andi	r3,r3,255
81116504:	1805631e 	bne	r3,zero,81117a94 <___svfprintf_internal_r+0x21d8>
81116508:	01604534 	movhi	r5,33044
8111650c:	2948a504 	addi	r5,r5,8852
81116510:	d9403a15 	stw	r5,232(sp)
81116514:	9080080c 	andi	r2,r18,32
81116518:	103f9f1e 	bne	r2,zero,81116398 <__reset+0xfb0f6398>
8111651c:	9080040c 	andi	r2,r18,16
81116520:	10029c26 	beq	r2,zero,81116f94 <___svfprintf_internal_r+0x16d8>
81116524:	d8c02d17 	ldw	r3,180(sp)
81116528:	002d883a 	mov	r22,zero
8111652c:	1d000017 	ldw	r20,0(r3)
81116530:	18c00104 	addi	r3,r3,4
81116534:	d8c02d15 	stw	r3,180(sp)
81116538:	003f9c06 	br	811163ac <__reset+0xfb0f63ac>
8111653c:	94800054 	ori	r18,r18,1
81116540:	bc400007 	ldb	r17,0(r23)
81116544:	003d3306 	br	81115a14 <__reset+0xfb0f5a14>
81116548:	38803fcc 	andi	r2,r7,255
8111654c:	1080201c 	xori	r2,r2,128
81116550:	10bfe004 	addi	r2,r2,-128
81116554:	1002971e 	bne	r2,zero,81116fb4 <___svfprintf_internal_r+0x16f8>
81116558:	00c00044 	movi	r3,1
8111655c:	01c00804 	movi	r7,32
81116560:	bc400007 	ldb	r17,0(r23)
81116564:	003d2b06 	br	81115a14 <__reset+0xfb0f5a14>
81116568:	18c03fcc 	andi	r3,r3,255
8111656c:	183e2326 	beq	r3,zero,81115dfc <__reset+0xfb0f5dfc>
81116570:	d9c02785 	stb	r7,158(sp)
81116574:	003e2106 	br	81115dfc <__reset+0xfb0f5dfc>
81116578:	bc400007 	ldb	r17,0(r23)
8111657c:	8a430426 	beq	r17,r9,81117190 <___svfprintf_internal_r+0x18d4>
81116580:	94800414 	ori	r18,r18,16
81116584:	003d2306 	br	81115a14 <__reset+0xfb0f5a14>
81116588:	18c03fcc 	andi	r3,r3,255
8111658c:	18053f1e 	bne	r3,zero,81117a8c <___svfprintf_internal_r+0x21d0>
81116590:	9080080c 	andi	r2,r18,32
81116594:	10028926 	beq	r2,zero,81116fbc <___svfprintf_internal_r+0x1700>
81116598:	d9402d17 	ldw	r5,180(sp)
8111659c:	d9002f17 	ldw	r4,188(sp)
811165a0:	28800017 	ldw	r2,0(r5)
811165a4:	2007d7fa 	srai	r3,r4,31
811165a8:	29400104 	addi	r5,r5,4
811165ac:	d9402d15 	stw	r5,180(sp)
811165b0:	11000015 	stw	r4,0(r2)
811165b4:	10c00115 	stw	r3,4(r2)
811165b8:	003ced06 	br	81115970 <__reset+0xfb0f5970>
811165bc:	94801014 	ori	r18,r18,64
811165c0:	bc400007 	ldb	r17,0(r23)
811165c4:	003d1306 	br	81115a14 <__reset+0xfb0f5a14>
811165c8:	01204534 	movhi	r4,33044
811165cc:	2108a504 	addi	r4,r4,8852
811165d0:	0039883a 	mov	fp,zero
811165d4:	d9003a15 	stw	r4,232(sp)
811165d8:	04401e04 	movi	r17,120
811165dc:	003f8206 	br	811163e8 <__reset+0xfb0f63e8>
811165e0:	18c03fcc 	andi	r3,r3,255
811165e4:	1805221e 	bne	r3,zero,81117a70 <___svfprintf_internal_r+0x21b4>
811165e8:	883d9526 	beq	r17,zero,81115c40 <__reset+0xfb0f5c40>
811165ec:	00c00044 	movi	r3,1
811165f0:	d8c02a15 	stw	r3,168(sp)
811165f4:	dc401405 	stb	r17,80(sp)
811165f8:	d8002785 	stb	zero,158(sp)
811165fc:	003f9406 	br	81116450 <__reset+0xfb0f6450>
81116600:	01204534 	movhi	r4,33044
81116604:	2108a504 	addi	r4,r4,8852
81116608:	d9003a15 	stw	r4,232(sp)
8111660c:	d8c02d15 	stw	r3,180(sp)
81116610:	1025883a 	mov	r18,r2
81116614:	04401e04 	movi	r17,120
81116618:	a584b03a 	or	r2,r20,r22
8111661c:	1000fa1e 	bne	r2,zero,81116a08 <___svfprintf_internal_r+0x114c>
81116620:	0039883a 	mov	fp,zero
81116624:	00800084 	movi	r2,2
81116628:	10803fcc 	andi	r2,r2,255
8111662c:	00c00044 	movi	r3,1
81116630:	10c21626 	beq	r2,r3,81116e8c <___svfprintf_internal_r+0x15d0>
81116634:	00c00084 	movi	r3,2
81116638:	10fe301e 	bne	r2,r3,81115efc <__reset+0xfb0f5efc>
8111663c:	003d7606 	br	81115c18 <__reset+0xfb0f5c18>
81116640:	d8c02017 	ldw	r3,128(sp)
81116644:	003e9506 	br	8111609c <__reset+0xfb0f609c>
81116648:	00801944 	movi	r2,101
8111664c:	14407c0e 	bge	r2,r17,81116840 <___svfprintf_internal_r+0xf84>
81116650:	d9003617 	ldw	r4,216(sp)
81116654:	d9403717 	ldw	r5,220(sp)
81116658:	000d883a 	mov	r6,zero
8111665c:	000f883a 	mov	r7,zero
81116660:	d8c03d15 	stw	r3,244(sp)
81116664:	da003e15 	stw	r8,248(sp)
81116668:	11284d40 	call	811284d4 <__eqdf2>
8111666c:	d8c03d17 	ldw	r3,244(sp)
81116670:	da003e17 	ldw	r8,248(sp)
81116674:	1000f51e 	bne	r2,zero,81116a4c <___svfprintf_internal_r+0x1190>
81116678:	d8801f17 	ldw	r2,124(sp)
8111667c:	01204534 	movhi	r4,33044
81116680:	2108ac04 	addi	r4,r4,8880
81116684:	18c00044 	addi	r3,r3,1
81116688:	10800044 	addi	r2,r2,1
8111668c:	41000015 	stw	r4,0(r8)
81116690:	01000044 	movi	r4,1
81116694:	41000115 	stw	r4,4(r8)
81116698:	d8c02015 	stw	r3,128(sp)
8111669c:	d8801f15 	stw	r2,124(sp)
811166a0:	010001c4 	movi	r4,7
811166a4:	20826616 	blt	r4,r2,81117040 <___svfprintf_internal_r+0x1784>
811166a8:	42000204 	addi	r8,r8,8
811166ac:	d8802617 	ldw	r2,152(sp)
811166b0:	d9403317 	ldw	r5,204(sp)
811166b4:	11400216 	blt	r2,r5,811166c0 <___svfprintf_internal_r+0xe04>
811166b8:	9080004c 	andi	r2,r18,1
811166bc:	103ed526 	beq	r2,zero,81116214 <__reset+0xfb0f6214>
811166c0:	d8803817 	ldw	r2,224(sp)
811166c4:	d9003417 	ldw	r4,208(sp)
811166c8:	d9403817 	ldw	r5,224(sp)
811166cc:	1887883a 	add	r3,r3,r2
811166d0:	d8801f17 	ldw	r2,124(sp)
811166d4:	41000015 	stw	r4,0(r8)
811166d8:	41400115 	stw	r5,4(r8)
811166dc:	10800044 	addi	r2,r2,1
811166e0:	d8c02015 	stw	r3,128(sp)
811166e4:	d8801f15 	stw	r2,124(sp)
811166e8:	010001c4 	movi	r4,7
811166ec:	2082af16 	blt	r4,r2,811171ac <___svfprintf_internal_r+0x18f0>
811166f0:	42000204 	addi	r8,r8,8
811166f4:	d8803317 	ldw	r2,204(sp)
811166f8:	143fffc4 	addi	r16,r2,-1
811166fc:	043ec50e 	bge	zero,r16,81116214 <__reset+0xfb0f6214>
81116700:	04400404 	movi	r17,16
81116704:	d8801f17 	ldw	r2,124(sp)
81116708:	8c00860e 	bge	r17,r16,81116924 <___svfprintf_internal_r+0x1068>
8111670c:	01604534 	movhi	r5,33044
81116710:	2948ac84 	addi	r5,r5,8882
81116714:	d9402b15 	stw	r5,172(sp)
81116718:	058001c4 	movi	r22,7
8111671c:	dd002c17 	ldw	r20,176(sp)
81116720:	00000306 	br	81116730 <___svfprintf_internal_r+0xe74>
81116724:	42000204 	addi	r8,r8,8
81116728:	843ffc04 	addi	r16,r16,-16
8111672c:	8c00800e 	bge	r17,r16,81116930 <___svfprintf_internal_r+0x1074>
81116730:	18c00404 	addi	r3,r3,16
81116734:	10800044 	addi	r2,r2,1
81116738:	45400015 	stw	r21,0(r8)
8111673c:	44400115 	stw	r17,4(r8)
81116740:	d8c02015 	stw	r3,128(sp)
81116744:	d8801f15 	stw	r2,124(sp)
81116748:	b0bff60e 	bge	r22,r2,81116724 <__reset+0xfb0f6724>
8111674c:	d9801e04 	addi	r6,sp,120
81116750:	a00b883a 	mov	r5,r20
81116754:	9809883a 	mov	r4,r19
81116758:	11224dc0 	call	811224dc <__ssprint_r>
8111675c:	103d3e1e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116760:	d8c02017 	ldw	r3,128(sp)
81116764:	d8801f17 	ldw	r2,124(sp)
81116768:	da000404 	addi	r8,sp,16
8111676c:	003fee06 	br	81116728 <__reset+0xfb0f6728>
81116770:	d9403117 	ldw	r5,196(sp)
81116774:	d8802a17 	ldw	r2,168(sp)
81116778:	28adc83a 	sub	r22,r5,r2
8111677c:	05be650e 	bge	zero,r22,81116114 <__reset+0xfb0f6114>
81116780:	07000404 	movi	fp,16
81116784:	d8801f17 	ldw	r2,124(sp)
81116788:	e583a20e 	bge	fp,r22,81117614 <___svfprintf_internal_r+0x1d58>
8111678c:	01604534 	movhi	r5,33044
81116790:	2948ac84 	addi	r5,r5,8882
81116794:	dc403015 	stw	r17,192(sp)
81116798:	d9402b15 	stw	r5,172(sp)
8111679c:	b023883a 	mov	r17,r22
811167a0:	050001c4 	movi	r20,7
811167a4:	902d883a 	mov	r22,r18
811167a8:	8025883a 	mov	r18,r16
811167ac:	dc002c17 	ldw	r16,176(sp)
811167b0:	00000306 	br	811167c0 <___svfprintf_internal_r+0xf04>
811167b4:	8c7ffc04 	addi	r17,r17,-16
811167b8:	42000204 	addi	r8,r8,8
811167bc:	e440110e 	bge	fp,r17,81116804 <___svfprintf_internal_r+0xf48>
811167c0:	18c00404 	addi	r3,r3,16
811167c4:	10800044 	addi	r2,r2,1
811167c8:	45400015 	stw	r21,0(r8)
811167cc:	47000115 	stw	fp,4(r8)
811167d0:	d8c02015 	stw	r3,128(sp)
811167d4:	d8801f15 	stw	r2,124(sp)
811167d8:	a0bff60e 	bge	r20,r2,811167b4 <__reset+0xfb0f67b4>
811167dc:	d9801e04 	addi	r6,sp,120
811167e0:	800b883a 	mov	r5,r16
811167e4:	9809883a 	mov	r4,r19
811167e8:	11224dc0 	call	811224dc <__ssprint_r>
811167ec:	103d1a1e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
811167f0:	8c7ffc04 	addi	r17,r17,-16
811167f4:	d8c02017 	ldw	r3,128(sp)
811167f8:	d8801f17 	ldw	r2,124(sp)
811167fc:	da000404 	addi	r8,sp,16
81116800:	e47fef16 	blt	fp,r17,811167c0 <__reset+0xfb0f67c0>
81116804:	9021883a 	mov	r16,r18
81116808:	b025883a 	mov	r18,r22
8111680c:	882d883a 	mov	r22,r17
81116810:	dc403017 	ldw	r17,192(sp)
81116814:	d9002b17 	ldw	r4,172(sp)
81116818:	1d87883a 	add	r3,r3,r22
8111681c:	10800044 	addi	r2,r2,1
81116820:	41000015 	stw	r4,0(r8)
81116824:	45800115 	stw	r22,4(r8)
81116828:	d8c02015 	stw	r3,128(sp)
8111682c:	d8801f15 	stw	r2,124(sp)
81116830:	010001c4 	movi	r4,7
81116834:	20819a16 	blt	r4,r2,81116ea0 <___svfprintf_internal_r+0x15e4>
81116838:	42000204 	addi	r8,r8,8
8111683c:	003e3506 	br	81116114 <__reset+0xfb0f6114>
81116840:	d9403317 	ldw	r5,204(sp)
81116844:	00800044 	movi	r2,1
81116848:	18c00044 	addi	r3,r3,1
8111684c:	1141710e 	bge	r2,r5,81116e14 <___svfprintf_internal_r+0x1558>
81116850:	dc401f17 	ldw	r17,124(sp)
81116854:	00800044 	movi	r2,1
81116858:	40800115 	stw	r2,4(r8)
8111685c:	8c400044 	addi	r17,r17,1
81116860:	44000015 	stw	r16,0(r8)
81116864:	d8c02015 	stw	r3,128(sp)
81116868:	dc401f15 	stw	r17,124(sp)
8111686c:	008001c4 	movi	r2,7
81116870:	14417416 	blt	r2,r17,81116e44 <___svfprintf_internal_r+0x1588>
81116874:	42000204 	addi	r8,r8,8
81116878:	d8803817 	ldw	r2,224(sp)
8111687c:	d9003417 	ldw	r4,208(sp)
81116880:	8c400044 	addi	r17,r17,1
81116884:	10c7883a 	add	r3,r2,r3
81116888:	40800115 	stw	r2,4(r8)
8111688c:	41000015 	stw	r4,0(r8)
81116890:	d8c02015 	stw	r3,128(sp)
81116894:	dc401f15 	stw	r17,124(sp)
81116898:	008001c4 	movi	r2,7
8111689c:	14417216 	blt	r2,r17,81116e68 <___svfprintf_internal_r+0x15ac>
811168a0:	45800204 	addi	r22,r8,8
811168a4:	d9003617 	ldw	r4,216(sp)
811168a8:	d9403717 	ldw	r5,220(sp)
811168ac:	000d883a 	mov	r6,zero
811168b0:	000f883a 	mov	r7,zero
811168b4:	d8c03d15 	stw	r3,244(sp)
811168b8:	11284d40 	call	811284d4 <__eqdf2>
811168bc:	d8c03d17 	ldw	r3,244(sp)
811168c0:	1000b326 	beq	r2,zero,81116b90 <___svfprintf_internal_r+0x12d4>
811168c4:	d9403317 	ldw	r5,204(sp)
811168c8:	84000044 	addi	r16,r16,1
811168cc:	8c400044 	addi	r17,r17,1
811168d0:	28bfffc4 	addi	r2,r5,-1
811168d4:	1887883a 	add	r3,r3,r2
811168d8:	b0800115 	stw	r2,4(r22)
811168dc:	b4000015 	stw	r16,0(r22)
811168e0:	d8c02015 	stw	r3,128(sp)
811168e4:	dc401f15 	stw	r17,124(sp)
811168e8:	008001c4 	movi	r2,7
811168ec:	1440d216 	blt	r2,r17,81116c38 <___svfprintf_internal_r+0x137c>
811168f0:	b5800204 	addi	r22,r22,8
811168f4:	d9003b17 	ldw	r4,236(sp)
811168f8:	df0022c4 	addi	fp,sp,139
811168fc:	8c400044 	addi	r17,r17,1
81116900:	20c7883a 	add	r3,r4,r3
81116904:	b7000015 	stw	fp,0(r22)
81116908:	b1000115 	stw	r4,4(r22)
8111690c:	d8c02015 	stw	r3,128(sp)
81116910:	dc401f15 	stw	r17,124(sp)
81116914:	008001c4 	movi	r2,7
81116918:	14400e16 	blt	r2,r17,81116954 <___svfprintf_internal_r+0x1098>
8111691c:	b2000204 	addi	r8,r22,8
81116920:	003e3c06 	br	81116214 <__reset+0xfb0f6214>
81116924:	01204534 	movhi	r4,33044
81116928:	2108ac84 	addi	r4,r4,8882
8111692c:	d9002b15 	stw	r4,172(sp)
81116930:	d9002b17 	ldw	r4,172(sp)
81116934:	1c07883a 	add	r3,r3,r16
81116938:	44000115 	stw	r16,4(r8)
8111693c:	41000015 	stw	r4,0(r8)
81116940:	10800044 	addi	r2,r2,1
81116944:	d8c02015 	stw	r3,128(sp)
81116948:	d8801f15 	stw	r2,124(sp)
8111694c:	010001c4 	movi	r4,7
81116950:	20be2f0e 	bge	r4,r2,81116210 <__reset+0xfb0f6210>
81116954:	d9402c17 	ldw	r5,176(sp)
81116958:	d9801e04 	addi	r6,sp,120
8111695c:	9809883a 	mov	r4,r19
81116960:	11224dc0 	call	811224dc <__ssprint_r>
81116964:	103cbc1e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116968:	d8c02017 	ldw	r3,128(sp)
8111696c:	da000404 	addi	r8,sp,16
81116970:	003e2806 	br	81116214 <__reset+0xfb0f6214>
81116974:	d9402c17 	ldw	r5,176(sp)
81116978:	d9801e04 	addi	r6,sp,120
8111697c:	9809883a 	mov	r4,r19
81116980:	11224dc0 	call	811224dc <__ssprint_r>
81116984:	103e5f26 	beq	r2,zero,81116304 <__reset+0xfb0f6304>
81116988:	003cb306 	br	81115c58 <__reset+0xfb0f5c58>
8111698c:	d9402c17 	ldw	r5,176(sp)
81116990:	d9801e04 	addi	r6,sp,120
81116994:	9809883a 	mov	r4,r19
81116998:	11224dc0 	call	811224dc <__ssprint_r>
8111699c:	103cae1e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
811169a0:	d8c02017 	ldw	r3,128(sp)
811169a4:	da000404 	addi	r8,sp,16
811169a8:	003e0d06 	br	811161e0 <__reset+0xfb0f61e0>
811169ac:	d9402c17 	ldw	r5,176(sp)
811169b0:	d9801e04 	addi	r6,sp,120
811169b4:	9809883a 	mov	r4,r19
811169b8:	11224dc0 	call	811224dc <__ssprint_r>
811169bc:	103ca61e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
811169c0:	d8c02017 	ldw	r3,128(sp)
811169c4:	da000404 	addi	r8,sp,16
811169c8:	003dc106 	br	811160d0 <__reset+0xfb0f60d0>
811169cc:	d9402c17 	ldw	r5,176(sp)
811169d0:	d9801e04 	addi	r6,sp,120
811169d4:	9809883a 	mov	r4,r19
811169d8:	11224dc0 	call	811224dc <__ssprint_r>
811169dc:	103c9e1e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
811169e0:	d8c02017 	ldw	r3,128(sp)
811169e4:	da000404 	addi	r8,sp,16
811169e8:	003dc706 	br	81116108 <__reset+0xfb0f6108>
811169ec:	d8802917 	ldw	r2,164(sp)
811169f0:	d8002785 	stb	zero,158(sp)
811169f4:	103f0816 	blt	r2,zero,81116618 <__reset+0xfb0f6618>
811169f8:	00ffdfc4 	movi	r3,-129
811169fc:	a584b03a 	or	r2,r20,r22
81116a00:	90e4703a 	and	r18,r18,r3
81116a04:	103c8126 	beq	r2,zero,81115c0c <__reset+0xfb0f5c0c>
81116a08:	0039883a 	mov	fp,zero
81116a0c:	003e7606 	br	811163e8 <__reset+0xfb0f63e8>
81116a10:	9080040c 	andi	r2,r18,16
81116a14:	10013d26 	beq	r2,zero,81116f0c <___svfprintf_internal_r+0x1650>
81116a18:	d9002d17 	ldw	r4,180(sp)
81116a1c:	d9402917 	ldw	r5,164(sp)
81116a20:	d8002785 	stb	zero,158(sp)
81116a24:	20800104 	addi	r2,r4,4
81116a28:	25000017 	ldw	r20,0(r4)
81116a2c:	002d883a 	mov	r22,zero
81116a30:	28013f16 	blt	r5,zero,81116f30 <___svfprintf_internal_r+0x1674>
81116a34:	00ffdfc4 	movi	r3,-129
81116a38:	d8802d15 	stw	r2,180(sp)
81116a3c:	90e4703a 	and	r18,r18,r3
81116a40:	a03d2b26 	beq	r20,zero,81115ef0 <__reset+0xfb0f5ef0>
81116a44:	0039883a 	mov	fp,zero
81116a48:	003d2e06 	br	81115f04 <__reset+0xfb0f5f04>
81116a4c:	dc402617 	ldw	r17,152(sp)
81116a50:	0441830e 	bge	zero,r17,81117060 <___svfprintf_internal_r+0x17a4>
81116a54:	dc403217 	ldw	r17,200(sp)
81116a58:	d8803317 	ldw	r2,204(sp)
81116a5c:	1440010e 	bge	r2,r17,81116a64 <___svfprintf_internal_r+0x11a8>
81116a60:	1023883a 	mov	r17,r2
81116a64:	04400a0e 	bge	zero,r17,81116a90 <___svfprintf_internal_r+0x11d4>
81116a68:	d8801f17 	ldw	r2,124(sp)
81116a6c:	1c47883a 	add	r3,r3,r17
81116a70:	44000015 	stw	r16,0(r8)
81116a74:	10800044 	addi	r2,r2,1
81116a78:	44400115 	stw	r17,4(r8)
81116a7c:	d8c02015 	stw	r3,128(sp)
81116a80:	d8801f15 	stw	r2,124(sp)
81116a84:	010001c4 	movi	r4,7
81116a88:	20827516 	blt	r4,r2,81117460 <___svfprintf_internal_r+0x1ba4>
81116a8c:	42000204 	addi	r8,r8,8
81116a90:	88027b16 	blt	r17,zero,81117480 <___svfprintf_internal_r+0x1bc4>
81116a94:	d9003217 	ldw	r4,200(sp)
81116a98:	2463c83a 	sub	r17,r4,r17
81116a9c:	0440990e 	bge	zero,r17,81116d04 <___svfprintf_internal_r+0x1448>
81116aa0:	05800404 	movi	r22,16
81116aa4:	d8801f17 	ldw	r2,124(sp)
81116aa8:	b441530e 	bge	r22,r17,81116ff8 <___svfprintf_internal_r+0x173c>
81116aac:	01204534 	movhi	r4,33044
81116ab0:	2108ac84 	addi	r4,r4,8882
81116ab4:	d9002b15 	stw	r4,172(sp)
81116ab8:	070001c4 	movi	fp,7
81116abc:	dd002c17 	ldw	r20,176(sp)
81116ac0:	00000306 	br	81116ad0 <___svfprintf_internal_r+0x1214>
81116ac4:	42000204 	addi	r8,r8,8
81116ac8:	8c7ffc04 	addi	r17,r17,-16
81116acc:	b4414d0e 	bge	r22,r17,81117004 <___svfprintf_internal_r+0x1748>
81116ad0:	18c00404 	addi	r3,r3,16
81116ad4:	10800044 	addi	r2,r2,1
81116ad8:	45400015 	stw	r21,0(r8)
81116adc:	45800115 	stw	r22,4(r8)
81116ae0:	d8c02015 	stw	r3,128(sp)
81116ae4:	d8801f15 	stw	r2,124(sp)
81116ae8:	e0bff60e 	bge	fp,r2,81116ac4 <__reset+0xfb0f6ac4>
81116aec:	d9801e04 	addi	r6,sp,120
81116af0:	a00b883a 	mov	r5,r20
81116af4:	9809883a 	mov	r4,r19
81116af8:	11224dc0 	call	811224dc <__ssprint_r>
81116afc:	103c561e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116b00:	d8c02017 	ldw	r3,128(sp)
81116b04:	d8801f17 	ldw	r2,124(sp)
81116b08:	da000404 	addi	r8,sp,16
81116b0c:	003fee06 	br	81116ac8 <__reset+0xfb0f6ac8>
81116b10:	d9402c17 	ldw	r5,176(sp)
81116b14:	d9801e04 	addi	r6,sp,120
81116b18:	9809883a 	mov	r4,r19
81116b1c:	11224dc0 	call	811224dc <__ssprint_r>
81116b20:	103c4d1e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116b24:	d8c02017 	ldw	r3,128(sp)
81116b28:	df002787 	ldb	fp,158(sp)
81116b2c:	da000404 	addi	r8,sp,16
81116b30:	003d5a06 	br	8111609c <__reset+0xfb0f609c>
81116b34:	9080040c 	andi	r2,r18,16
81116b38:	10005c26 	beq	r2,zero,81116cac <___svfprintf_internal_r+0x13f0>
81116b3c:	d9402d17 	ldw	r5,180(sp)
81116b40:	d8c02917 	ldw	r3,164(sp)
81116b44:	d8002785 	stb	zero,158(sp)
81116b48:	28800104 	addi	r2,r5,4
81116b4c:	2d000017 	ldw	r20,0(r5)
81116b50:	002d883a 	mov	r22,zero
81116b54:	18005e16 	blt	r3,zero,81116cd0 <___svfprintf_internal_r+0x1414>
81116b58:	00ffdfc4 	movi	r3,-129
81116b5c:	d8802d15 	stw	r2,180(sp)
81116b60:	90e4703a 	and	r18,r18,r3
81116b64:	0039883a 	mov	fp,zero
81116b68:	a03dfe26 	beq	r20,zero,81116364 <__reset+0xfb0f6364>
81116b6c:	00800244 	movi	r2,9
81116b70:	153cb336 	bltu	r2,r20,81115e40 <__reset+0xfb0f5e40>
81116b74:	a5000c04 	addi	r20,r20,48
81116b78:	dc001dc4 	addi	r16,sp,119
81116b7c:	dd001dc5 	stb	r20,119(sp)
81116b80:	d8c02817 	ldw	r3,160(sp)
81116b84:	1c07c83a 	sub	r3,r3,r16
81116b88:	d8c02e15 	stw	r3,184(sp)
81116b8c:	003cf506 	br	81115f64 <__reset+0xfb0f5f64>
81116b90:	d8803317 	ldw	r2,204(sp)
81116b94:	143fffc4 	addi	r16,r2,-1
81116b98:	043f560e 	bge	zero,r16,811168f4 <__reset+0xfb0f68f4>
81116b9c:	07000404 	movi	fp,16
81116ba0:	e403530e 	bge	fp,r16,811178f0 <___svfprintf_internal_r+0x2034>
81116ba4:	01604534 	movhi	r5,33044
81116ba8:	2948ac84 	addi	r5,r5,8882
81116bac:	d9402b15 	stw	r5,172(sp)
81116bb0:	01c001c4 	movi	r7,7
81116bb4:	dd002c17 	ldw	r20,176(sp)
81116bb8:	00000306 	br	81116bc8 <___svfprintf_internal_r+0x130c>
81116bbc:	843ffc04 	addi	r16,r16,-16
81116bc0:	b5800204 	addi	r22,r22,8
81116bc4:	e400130e 	bge	fp,r16,81116c14 <___svfprintf_internal_r+0x1358>
81116bc8:	18c00404 	addi	r3,r3,16
81116bcc:	8c400044 	addi	r17,r17,1
81116bd0:	b5400015 	stw	r21,0(r22)
81116bd4:	b7000115 	stw	fp,4(r22)
81116bd8:	d8c02015 	stw	r3,128(sp)
81116bdc:	dc401f15 	stw	r17,124(sp)
81116be0:	3c7ff60e 	bge	r7,r17,81116bbc <__reset+0xfb0f6bbc>
81116be4:	d9801e04 	addi	r6,sp,120
81116be8:	a00b883a 	mov	r5,r20
81116bec:	9809883a 	mov	r4,r19
81116bf0:	d9c03d15 	stw	r7,244(sp)
81116bf4:	11224dc0 	call	811224dc <__ssprint_r>
81116bf8:	d9c03d17 	ldw	r7,244(sp)
81116bfc:	103c161e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116c00:	843ffc04 	addi	r16,r16,-16
81116c04:	d8c02017 	ldw	r3,128(sp)
81116c08:	dc401f17 	ldw	r17,124(sp)
81116c0c:	dd800404 	addi	r22,sp,16
81116c10:	e43fed16 	blt	fp,r16,81116bc8 <__reset+0xfb0f6bc8>
81116c14:	d8802b17 	ldw	r2,172(sp)
81116c18:	1c07883a 	add	r3,r3,r16
81116c1c:	8c400044 	addi	r17,r17,1
81116c20:	b0800015 	stw	r2,0(r22)
81116c24:	b4000115 	stw	r16,4(r22)
81116c28:	d8c02015 	stw	r3,128(sp)
81116c2c:	dc401f15 	stw	r17,124(sp)
81116c30:	008001c4 	movi	r2,7
81116c34:	147f2e0e 	bge	r2,r17,811168f0 <__reset+0xfb0f68f0>
81116c38:	d9402c17 	ldw	r5,176(sp)
81116c3c:	d9801e04 	addi	r6,sp,120
81116c40:	9809883a 	mov	r4,r19
81116c44:	11224dc0 	call	811224dc <__ssprint_r>
81116c48:	103c031e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116c4c:	d8c02017 	ldw	r3,128(sp)
81116c50:	dc401f17 	ldw	r17,124(sp)
81116c54:	dd800404 	addi	r22,sp,16
81116c58:	003f2606 	br	811168f4 <__reset+0xfb0f68f4>
81116c5c:	9080040c 	andi	r2,r18,16
81116c60:	1000c326 	beq	r2,zero,81116f70 <___svfprintf_internal_r+0x16b4>
81116c64:	d8802d17 	ldw	r2,180(sp)
81116c68:	15000017 	ldw	r20,0(r2)
81116c6c:	10800104 	addi	r2,r2,4
81116c70:	d8802d15 	stw	r2,180(sp)
81116c74:	a02dd7fa 	srai	r22,r20,31
81116c78:	b005883a 	mov	r2,r22
81116c7c:	103c680e 	bge	r2,zero,81115e20 <__reset+0xfb0f5e20>
81116c80:	0529c83a 	sub	r20,zero,r20
81116c84:	a004c03a 	cmpne	r2,r20,zero
81116c88:	05adc83a 	sub	r22,zero,r22
81116c8c:	b0adc83a 	sub	r22,r22,r2
81116c90:	d8802917 	ldw	r2,164(sp)
81116c94:	07000b44 	movi	fp,45
81116c98:	df002785 	stb	fp,158(sp)
81116c9c:	10022e16 	blt	r2,zero,81117558 <___svfprintf_internal_r+0x1c9c>
81116ca0:	00bfdfc4 	movi	r2,-129
81116ca4:	90a4703a 	and	r18,r18,r2
81116ca8:	003c6406 	br	81115e3c <__reset+0xfb0f5e3c>
81116cac:	9080100c 	andi	r2,r18,64
81116cb0:	d8002785 	stb	zero,158(sp)
81116cb4:	10012526 	beq	r2,zero,8111714c <___svfprintf_internal_r+0x1890>
81116cb8:	d9002d17 	ldw	r4,180(sp)
81116cbc:	d9402917 	ldw	r5,164(sp)
81116cc0:	002d883a 	mov	r22,zero
81116cc4:	20800104 	addi	r2,r4,4
81116cc8:	2500000b 	ldhu	r20,0(r4)
81116ccc:	283fa20e 	bge	r5,zero,81116b58 <__reset+0xfb0f6b58>
81116cd0:	d8802d15 	stw	r2,180(sp)
81116cd4:	0039883a 	mov	fp,zero
81116cd8:	a584b03a 	or	r2,r20,r22
81116cdc:	103c571e 	bne	r2,zero,81115e3c <__reset+0xfb0f5e3c>
81116ce0:	00800044 	movi	r2,1
81116ce4:	003e5006 	br	81116628 <__reset+0xfb0f6628>
81116ce8:	d9402c17 	ldw	r5,176(sp)
81116cec:	d9801e04 	addi	r6,sp,120
81116cf0:	9809883a 	mov	r4,r19
81116cf4:	11224dc0 	call	811224dc <__ssprint_r>
81116cf8:	103bd71e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116cfc:	d8c02017 	ldw	r3,128(sp)
81116d00:	da000404 	addi	r8,sp,16
81116d04:	d9003217 	ldw	r4,200(sp)
81116d08:	d8802617 	ldw	r2,152(sp)
81116d0c:	d9403317 	ldw	r5,204(sp)
81116d10:	8123883a 	add	r17,r16,r4
81116d14:	11400216 	blt	r2,r5,81116d20 <___svfprintf_internal_r+0x1464>
81116d18:	9100004c 	andi	r4,r18,1
81116d1c:	20000d26 	beq	r4,zero,81116d54 <___svfprintf_internal_r+0x1498>
81116d20:	d9003817 	ldw	r4,224(sp)
81116d24:	d9403417 	ldw	r5,208(sp)
81116d28:	1907883a 	add	r3,r3,r4
81116d2c:	d9001f17 	ldw	r4,124(sp)
81116d30:	41400015 	stw	r5,0(r8)
81116d34:	d9403817 	ldw	r5,224(sp)
81116d38:	21000044 	addi	r4,r4,1
81116d3c:	d8c02015 	stw	r3,128(sp)
81116d40:	41400115 	stw	r5,4(r8)
81116d44:	d9001f15 	stw	r4,124(sp)
81116d48:	014001c4 	movi	r5,7
81116d4c:	2901dc16 	blt	r5,r4,811174c0 <___svfprintf_internal_r+0x1c04>
81116d50:	42000204 	addi	r8,r8,8
81116d54:	d9003317 	ldw	r4,204(sp)
81116d58:	8121883a 	add	r16,r16,r4
81116d5c:	2085c83a 	sub	r2,r4,r2
81116d60:	8461c83a 	sub	r16,r16,r17
81116d64:	1400010e 	bge	r2,r16,81116d6c <___svfprintf_internal_r+0x14b0>
81116d68:	1021883a 	mov	r16,r2
81116d6c:	04000a0e 	bge	zero,r16,81116d98 <___svfprintf_internal_r+0x14dc>
81116d70:	d9001f17 	ldw	r4,124(sp)
81116d74:	1c07883a 	add	r3,r3,r16
81116d78:	44400015 	stw	r17,0(r8)
81116d7c:	21000044 	addi	r4,r4,1
81116d80:	44000115 	stw	r16,4(r8)
81116d84:	d8c02015 	stw	r3,128(sp)
81116d88:	d9001f15 	stw	r4,124(sp)
81116d8c:	014001c4 	movi	r5,7
81116d90:	2901e616 	blt	r5,r4,8111752c <___svfprintf_internal_r+0x1c70>
81116d94:	42000204 	addi	r8,r8,8
81116d98:	8001f616 	blt	r16,zero,81117574 <___svfprintf_internal_r+0x1cb8>
81116d9c:	1421c83a 	sub	r16,r2,r16
81116da0:	043d1c0e 	bge	zero,r16,81116214 <__reset+0xfb0f6214>
81116da4:	04400404 	movi	r17,16
81116da8:	d8801f17 	ldw	r2,124(sp)
81116dac:	8c3edd0e 	bge	r17,r16,81116924 <__reset+0xfb0f6924>
81116db0:	01604534 	movhi	r5,33044
81116db4:	2948ac84 	addi	r5,r5,8882
81116db8:	d9402b15 	stw	r5,172(sp)
81116dbc:	058001c4 	movi	r22,7
81116dc0:	dd002c17 	ldw	r20,176(sp)
81116dc4:	00000306 	br	81116dd4 <___svfprintf_internal_r+0x1518>
81116dc8:	42000204 	addi	r8,r8,8
81116dcc:	843ffc04 	addi	r16,r16,-16
81116dd0:	8c3ed70e 	bge	r17,r16,81116930 <__reset+0xfb0f6930>
81116dd4:	18c00404 	addi	r3,r3,16
81116dd8:	10800044 	addi	r2,r2,1
81116ddc:	45400015 	stw	r21,0(r8)
81116de0:	44400115 	stw	r17,4(r8)
81116de4:	d8c02015 	stw	r3,128(sp)
81116de8:	d8801f15 	stw	r2,124(sp)
81116dec:	b0bff60e 	bge	r22,r2,81116dc8 <__reset+0xfb0f6dc8>
81116df0:	d9801e04 	addi	r6,sp,120
81116df4:	a00b883a 	mov	r5,r20
81116df8:	9809883a 	mov	r4,r19
81116dfc:	11224dc0 	call	811224dc <__ssprint_r>
81116e00:	103b951e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116e04:	d8c02017 	ldw	r3,128(sp)
81116e08:	d8801f17 	ldw	r2,124(sp)
81116e0c:	da000404 	addi	r8,sp,16
81116e10:	003fee06 	br	81116dcc <__reset+0xfb0f6dcc>
81116e14:	9088703a 	and	r4,r18,r2
81116e18:	203e8d1e 	bne	r4,zero,81116850 <__reset+0xfb0f6850>
81116e1c:	dc401f17 	ldw	r17,124(sp)
81116e20:	40800115 	stw	r2,4(r8)
81116e24:	44000015 	stw	r16,0(r8)
81116e28:	8c400044 	addi	r17,r17,1
81116e2c:	d8c02015 	stw	r3,128(sp)
81116e30:	dc401f15 	stw	r17,124(sp)
81116e34:	008001c4 	movi	r2,7
81116e38:	147f7f16 	blt	r2,r17,81116c38 <__reset+0xfb0f6c38>
81116e3c:	45800204 	addi	r22,r8,8
81116e40:	003eac06 	br	811168f4 <__reset+0xfb0f68f4>
81116e44:	d9402c17 	ldw	r5,176(sp)
81116e48:	d9801e04 	addi	r6,sp,120
81116e4c:	9809883a 	mov	r4,r19
81116e50:	11224dc0 	call	811224dc <__ssprint_r>
81116e54:	103b801e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116e58:	d8c02017 	ldw	r3,128(sp)
81116e5c:	dc401f17 	ldw	r17,124(sp)
81116e60:	da000404 	addi	r8,sp,16
81116e64:	003e8406 	br	81116878 <__reset+0xfb0f6878>
81116e68:	d9402c17 	ldw	r5,176(sp)
81116e6c:	d9801e04 	addi	r6,sp,120
81116e70:	9809883a 	mov	r4,r19
81116e74:	11224dc0 	call	811224dc <__ssprint_r>
81116e78:	103b771e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116e7c:	d8c02017 	ldw	r3,128(sp)
81116e80:	dc401f17 	ldw	r17,124(sp)
81116e84:	dd800404 	addi	r22,sp,16
81116e88:	003e8606 	br	811168a4 <__reset+0xfb0f68a4>
81116e8c:	0029883a 	mov	r20,zero
81116e90:	a5000c04 	addi	r20,r20,48
81116e94:	dc001dc4 	addi	r16,sp,119
81116e98:	dd001dc5 	stb	r20,119(sp)
81116e9c:	003f3806 	br	81116b80 <__reset+0xfb0f6b80>
81116ea0:	d9402c17 	ldw	r5,176(sp)
81116ea4:	d9801e04 	addi	r6,sp,120
81116ea8:	9809883a 	mov	r4,r19
81116eac:	11224dc0 	call	811224dc <__ssprint_r>
81116eb0:	103b691e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81116eb4:	d8c02017 	ldw	r3,128(sp)
81116eb8:	da000404 	addi	r8,sp,16
81116ebc:	003c9506 	br	81116114 <__reset+0xfb0f6114>
81116ec0:	d9003617 	ldw	r4,216(sp)
81116ec4:	d9403717 	ldw	r5,220(sp)
81116ec8:	da003e15 	stw	r8,248(sp)
81116ecc:	11202f00 	call	811202f0 <__fpclassifyd>
81116ed0:	da003e17 	ldw	r8,248(sp)
81116ed4:	1000bd1e 	bne	r2,zero,811171cc <___svfprintf_internal_r+0x1910>
81116ed8:	008011c4 	movi	r2,71
81116edc:	14411e0e 	bge	r2,r17,81117358 <___svfprintf_internal_r+0x1a9c>
81116ee0:	04204534 	movhi	r16,33044
81116ee4:	84089f04 	addi	r16,r16,8828
81116ee8:	00c000c4 	movi	r3,3
81116eec:	00bfdfc4 	movi	r2,-129
81116ef0:	d8c02a15 	stw	r3,168(sp)
81116ef4:	90a4703a 	and	r18,r18,r2
81116ef8:	df002783 	ldbu	fp,158(sp)
81116efc:	d8c02e15 	stw	r3,184(sp)
81116f00:	d8002915 	stw	zero,164(sp)
81116f04:	d8003215 	stw	zero,200(sp)
81116f08:	003c1c06 	br	81115f7c <__reset+0xfb0f5f7c>
81116f0c:	9080100c 	andi	r2,r18,64
81116f10:	d8002785 	stb	zero,158(sp)
81116f14:	10009426 	beq	r2,zero,81117168 <___svfprintf_internal_r+0x18ac>
81116f18:	d8c02d17 	ldw	r3,180(sp)
81116f1c:	d9002917 	ldw	r4,164(sp)
81116f20:	002d883a 	mov	r22,zero
81116f24:	18800104 	addi	r2,r3,4
81116f28:	1d00000b 	ldhu	r20,0(r3)
81116f2c:	203ec10e 	bge	r4,zero,81116a34 <__reset+0xfb0f6a34>
81116f30:	a586b03a 	or	r3,r20,r22
81116f34:	d8802d15 	stw	r2,180(sp)
81116f38:	183ec21e 	bne	r3,zero,81116a44 <__reset+0xfb0f6a44>
81116f3c:	0039883a 	mov	fp,zero
81116f40:	0005883a 	mov	r2,zero
81116f44:	003db806 	br	81116628 <__reset+0xfb0f6628>
81116f48:	d8802d17 	ldw	r2,180(sp)
81116f4c:	d8c02d17 	ldw	r3,180(sp)
81116f50:	d9002d17 	ldw	r4,180(sp)
81116f54:	10800017 	ldw	r2,0(r2)
81116f58:	18c00117 	ldw	r3,4(r3)
81116f5c:	21000204 	addi	r4,r4,8
81116f60:	d8803615 	stw	r2,216(sp)
81116f64:	d8c03715 	stw	r3,220(sp)
81116f68:	d9002d15 	stw	r4,180(sp)
81116f6c:	003b8206 	br	81115d78 <__reset+0xfb0f5d78>
81116f70:	9080100c 	andi	r2,r18,64
81116f74:	10010726 	beq	r2,zero,81117394 <___svfprintf_internal_r+0x1ad8>
81116f78:	d8c02d17 	ldw	r3,180(sp)
81116f7c:	1d00000f 	ldh	r20,0(r3)
81116f80:	18c00104 	addi	r3,r3,4
81116f84:	d8c02d15 	stw	r3,180(sp)
81116f88:	a02dd7fa 	srai	r22,r20,31
81116f8c:	b005883a 	mov	r2,r22
81116f90:	003ba206 	br	81115e1c <__reset+0xfb0f5e1c>
81116f94:	9080100c 	andi	r2,r18,64
81116f98:	10010526 	beq	r2,zero,811173b0 <___svfprintf_internal_r+0x1af4>
81116f9c:	d9002d17 	ldw	r4,180(sp)
81116fa0:	002d883a 	mov	r22,zero
81116fa4:	2500000b 	ldhu	r20,0(r4)
81116fa8:	21000104 	addi	r4,r4,4
81116fac:	d9002d15 	stw	r4,180(sp)
81116fb0:	003cfe06 	br	811163ac <__reset+0xfb0f63ac>
81116fb4:	bc400007 	ldb	r17,0(r23)
81116fb8:	003a9606 	br	81115a14 <__reset+0xfb0f5a14>
81116fbc:	9080040c 	andi	r2,r18,16
81116fc0:	10010126 	beq	r2,zero,811173c8 <___svfprintf_internal_r+0x1b0c>
81116fc4:	d9402d17 	ldw	r5,180(sp)
81116fc8:	d8c02f17 	ldw	r3,188(sp)
81116fcc:	28800017 	ldw	r2,0(r5)
81116fd0:	29400104 	addi	r5,r5,4
81116fd4:	d9402d15 	stw	r5,180(sp)
81116fd8:	10c00015 	stw	r3,0(r2)
81116fdc:	003a6406 	br	81115970 <__reset+0xfb0f5970>
81116fe0:	d9002917 	ldw	r4,164(sp)
81116fe4:	d8002785 	stb	zero,158(sp)
81116fe8:	203d8d16 	blt	r4,zero,81116620 <__reset+0xfb0f6620>
81116fec:	00bfdfc4 	movi	r2,-129
81116ff0:	90a4703a 	and	r18,r18,r2
81116ff4:	003b0506 	br	81115c0c <__reset+0xfb0f5c0c>
81116ff8:	01604534 	movhi	r5,33044
81116ffc:	2948ac84 	addi	r5,r5,8882
81117000:	d9402b15 	stw	r5,172(sp)
81117004:	d9402b17 	ldw	r5,172(sp)
81117008:	1c47883a 	add	r3,r3,r17
8111700c:	10800044 	addi	r2,r2,1
81117010:	41400015 	stw	r5,0(r8)
81117014:	44400115 	stw	r17,4(r8)
81117018:	d8c02015 	stw	r3,128(sp)
8111701c:	d8801f15 	stw	r2,124(sp)
81117020:	010001c4 	movi	r4,7
81117024:	20bf3016 	blt	r4,r2,81116ce8 <__reset+0xfb0f6ce8>
81117028:	42000204 	addi	r8,r8,8
8111702c:	003f3506 	br	81116d04 <__reset+0xfb0f6d04>
81117030:	01204534 	movhi	r4,33044
81117034:	2108ac84 	addi	r4,r4,8882
81117038:	d9002b15 	stw	r4,172(sp)
8111703c:	003c5e06 	br	811161b8 <__reset+0xfb0f61b8>
81117040:	d9402c17 	ldw	r5,176(sp)
81117044:	d9801e04 	addi	r6,sp,120
81117048:	9809883a 	mov	r4,r19
8111704c:	11224dc0 	call	811224dc <__ssprint_r>
81117050:	103b011e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81117054:	d8c02017 	ldw	r3,128(sp)
81117058:	da000404 	addi	r8,sp,16
8111705c:	003d9306 	br	811166ac <__reset+0xfb0f66ac>
81117060:	d8801f17 	ldw	r2,124(sp)
81117064:	01604534 	movhi	r5,33044
81117068:	01000044 	movi	r4,1
8111706c:	18c00044 	addi	r3,r3,1
81117070:	10800044 	addi	r2,r2,1
81117074:	2948ac04 	addi	r5,r5,8880
81117078:	41000115 	stw	r4,4(r8)
8111707c:	41400015 	stw	r5,0(r8)
81117080:	d8c02015 	stw	r3,128(sp)
81117084:	d8801f15 	stw	r2,124(sp)
81117088:	010001c4 	movi	r4,7
8111708c:	2080b516 	blt	r4,r2,81117364 <___svfprintf_internal_r+0x1aa8>
81117090:	42000204 	addi	r8,r8,8
81117094:	8800041e 	bne	r17,zero,811170a8 <___svfprintf_internal_r+0x17ec>
81117098:	d8803317 	ldw	r2,204(sp)
8111709c:	1000021e 	bne	r2,zero,811170a8 <___svfprintf_internal_r+0x17ec>
811170a0:	9080004c 	andi	r2,r18,1
811170a4:	103c5b26 	beq	r2,zero,81116214 <__reset+0xfb0f6214>
811170a8:	d9003817 	ldw	r4,224(sp)
811170ac:	d8801f17 	ldw	r2,124(sp)
811170b0:	d9403417 	ldw	r5,208(sp)
811170b4:	20c7883a 	add	r3,r4,r3
811170b8:	10800044 	addi	r2,r2,1
811170bc:	41000115 	stw	r4,4(r8)
811170c0:	41400015 	stw	r5,0(r8)
811170c4:	d8c02015 	stw	r3,128(sp)
811170c8:	d8801f15 	stw	r2,124(sp)
811170cc:	010001c4 	movi	r4,7
811170d0:	20818016 	blt	r4,r2,811176d4 <___svfprintf_internal_r+0x1e18>
811170d4:	42000204 	addi	r8,r8,8
811170d8:	0463c83a 	sub	r17,zero,r17
811170dc:	0440cb0e 	bge	zero,r17,8111740c <___svfprintf_internal_r+0x1b50>
811170e0:	05800404 	movi	r22,16
811170e4:	b440e80e 	bge	r22,r17,81117488 <___svfprintf_internal_r+0x1bcc>
811170e8:	01604534 	movhi	r5,33044
811170ec:	2948ac84 	addi	r5,r5,8882
811170f0:	d9402b15 	stw	r5,172(sp)
811170f4:	070001c4 	movi	fp,7
811170f8:	dd002c17 	ldw	r20,176(sp)
811170fc:	00000306 	br	8111710c <___svfprintf_internal_r+0x1850>
81117100:	42000204 	addi	r8,r8,8
81117104:	8c7ffc04 	addi	r17,r17,-16
81117108:	b440e20e 	bge	r22,r17,81117494 <___svfprintf_internal_r+0x1bd8>
8111710c:	18c00404 	addi	r3,r3,16
81117110:	10800044 	addi	r2,r2,1
81117114:	45400015 	stw	r21,0(r8)
81117118:	45800115 	stw	r22,4(r8)
8111711c:	d8c02015 	stw	r3,128(sp)
81117120:	d8801f15 	stw	r2,124(sp)
81117124:	e0bff60e 	bge	fp,r2,81117100 <__reset+0xfb0f7100>
81117128:	d9801e04 	addi	r6,sp,120
8111712c:	a00b883a 	mov	r5,r20
81117130:	9809883a 	mov	r4,r19
81117134:	11224dc0 	call	811224dc <__ssprint_r>
81117138:	103ac71e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
8111713c:	d8c02017 	ldw	r3,128(sp)
81117140:	d8801f17 	ldw	r2,124(sp)
81117144:	da000404 	addi	r8,sp,16
81117148:	003fee06 	br	81117104 <__reset+0xfb0f7104>
8111714c:	d8c02d17 	ldw	r3,180(sp)
81117150:	d9002917 	ldw	r4,164(sp)
81117154:	002d883a 	mov	r22,zero
81117158:	18800104 	addi	r2,r3,4
8111715c:	1d000017 	ldw	r20,0(r3)
81117160:	203e7d0e 	bge	r4,zero,81116b58 <__reset+0xfb0f6b58>
81117164:	003eda06 	br	81116cd0 <__reset+0xfb0f6cd0>
81117168:	d9402d17 	ldw	r5,180(sp)
8111716c:	d8c02917 	ldw	r3,164(sp)
81117170:	002d883a 	mov	r22,zero
81117174:	28800104 	addi	r2,r5,4
81117178:	2d000017 	ldw	r20,0(r5)
8111717c:	183e2d0e 	bge	r3,zero,81116a34 <__reset+0xfb0f6a34>
81117180:	003f6b06 	br	81116f30 <__reset+0xfb0f6f30>
81117184:	d8c02d15 	stw	r3,180(sp)
81117188:	0039883a 	mov	fp,zero
8111718c:	003ed206 	br	81116cd8 <__reset+0xfb0f6cd8>
81117190:	bc400043 	ldbu	r17,1(r23)
81117194:	94800814 	ori	r18,r18,32
81117198:	bdc00044 	addi	r23,r23,1
8111719c:	8c403fcc 	andi	r17,r17,255
811171a0:	8c40201c 	xori	r17,r17,128
811171a4:	8c7fe004 	addi	r17,r17,-128
811171a8:	003a1a06 	br	81115a14 <__reset+0xfb0f5a14>
811171ac:	d9402c17 	ldw	r5,176(sp)
811171b0:	d9801e04 	addi	r6,sp,120
811171b4:	9809883a 	mov	r4,r19
811171b8:	11224dc0 	call	811224dc <__ssprint_r>
811171bc:	103aa61e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
811171c0:	d8c02017 	ldw	r3,128(sp)
811171c4:	da000404 	addi	r8,sp,16
811171c8:	003d4a06 	br	811166f4 <__reset+0xfb0f66f4>
811171cc:	d9002917 	ldw	r4,164(sp)
811171d0:	05bff7c4 	movi	r22,-33
811171d4:	00bfffc4 	movi	r2,-1
811171d8:	8dac703a 	and	r22,r17,r22
811171dc:	20806a26 	beq	r4,r2,81117388 <___svfprintf_internal_r+0x1acc>
811171e0:	008011c4 	movi	r2,71
811171e4:	b0813726 	beq	r22,r2,811176c4 <___svfprintf_internal_r+0x1e08>
811171e8:	d9003717 	ldw	r4,220(sp)
811171ec:	90c04014 	ori	r3,r18,256
811171f0:	d8c02b15 	stw	r3,172(sp)
811171f4:	20015d16 	blt	r4,zero,8111776c <___svfprintf_internal_r+0x1eb0>
811171f8:	dd003717 	ldw	r20,220(sp)
811171fc:	d8002a05 	stb	zero,168(sp)
81117200:	00801984 	movi	r2,102
81117204:	88814026 	beq	r17,r2,81117708 <___svfprintf_internal_r+0x1e4c>
81117208:	00801184 	movi	r2,70
8111720c:	88817126 	beq	r17,r2,811177d4 <___svfprintf_internal_r+0x1f18>
81117210:	00801144 	movi	r2,69
81117214:	b0816226 	beq	r22,r2,811177a0 <___svfprintf_internal_r+0x1ee4>
81117218:	d8c02917 	ldw	r3,164(sp)
8111721c:	d8802104 	addi	r2,sp,132
81117220:	d8800315 	stw	r2,12(sp)
81117224:	d9403617 	ldw	r5,216(sp)
81117228:	d8802504 	addi	r2,sp,148
8111722c:	d8800215 	stw	r2,8(sp)
81117230:	d8802604 	addi	r2,sp,152
81117234:	d8c00015 	stw	r3,0(sp)
81117238:	d8800115 	stw	r2,4(sp)
8111723c:	01c00084 	movi	r7,2
81117240:	a00d883a 	mov	r6,r20
81117244:	9809883a 	mov	r4,r19
81117248:	d8c03d15 	stw	r3,244(sp)
8111724c:	da003e15 	stw	r8,248(sp)
81117250:	111bba80 	call	8111bba8 <_dtoa_r>
81117254:	1021883a 	mov	r16,r2
81117258:	008019c4 	movi	r2,103
8111725c:	d8c03d17 	ldw	r3,244(sp)
81117260:	da003e17 	ldw	r8,248(sp)
81117264:	8880e726 	beq	r17,r2,81117604 <___svfprintf_internal_r+0x1d48>
81117268:	008011c4 	movi	r2,71
8111726c:	8880d426 	beq	r17,r2,811175c0 <___svfprintf_internal_r+0x1d04>
81117270:	80f9883a 	add	fp,r16,r3
81117274:	d9003617 	ldw	r4,216(sp)
81117278:	000d883a 	mov	r6,zero
8111727c:	000f883a 	mov	r7,zero
81117280:	a00b883a 	mov	r5,r20
81117284:	da003e15 	stw	r8,248(sp)
81117288:	11284d40 	call	811284d4 <__eqdf2>
8111728c:	da003e17 	ldw	r8,248(sp)
81117290:	1000e426 	beq	r2,zero,81117624 <___svfprintf_internal_r+0x1d68>
81117294:	d8802117 	ldw	r2,132(sp)
81117298:	1700062e 	bgeu	r2,fp,811172b4 <___svfprintf_internal_r+0x19f8>
8111729c:	01000c04 	movi	r4,48
811172a0:	10c00044 	addi	r3,r2,1
811172a4:	d8c02115 	stw	r3,132(sp)
811172a8:	11000005 	stb	r4,0(r2)
811172ac:	d8802117 	ldw	r2,132(sp)
811172b0:	173ffb36 	bltu	r2,fp,811172a0 <__reset+0xfb0f72a0>
811172b4:	1405c83a 	sub	r2,r2,r16
811172b8:	d8803315 	stw	r2,204(sp)
811172bc:	008011c4 	movi	r2,71
811172c0:	b080c526 	beq	r22,r2,811175d8 <___svfprintf_internal_r+0x1d1c>
811172c4:	00801944 	movi	r2,101
811172c8:	1441d90e 	bge	r2,r17,81117a30 <___svfprintf_internal_r+0x2174>
811172cc:	d8c02617 	ldw	r3,152(sp)
811172d0:	00801984 	movi	r2,102
811172d4:	d8c03215 	stw	r3,200(sp)
811172d8:	88813426 	beq	r17,r2,811177ac <___svfprintf_internal_r+0x1ef0>
811172dc:	d8c03217 	ldw	r3,200(sp)
811172e0:	d9003317 	ldw	r4,204(sp)
811172e4:	19012516 	blt	r3,r4,8111777c <___svfprintf_internal_r+0x1ec0>
811172e8:	9480004c 	andi	r18,r18,1
811172ec:	9001841e 	bne	r18,zero,81117900 <___svfprintf_internal_r+0x2044>
811172f0:	1805883a 	mov	r2,r3
811172f4:	1801cc16 	blt	r3,zero,81117a28 <___svfprintf_internal_r+0x216c>
811172f8:	d8c03217 	ldw	r3,200(sp)
811172fc:	044019c4 	movi	r17,103
81117300:	d8c02e15 	stw	r3,184(sp)
81117304:	df002a07 	ldb	fp,168(sp)
81117308:	e000a61e 	bne	fp,zero,811175a4 <___svfprintf_internal_r+0x1ce8>
8111730c:	df002783 	ldbu	fp,158(sp)
81117310:	d8802a15 	stw	r2,168(sp)
81117314:	dc802b17 	ldw	r18,172(sp)
81117318:	d8002915 	stw	zero,164(sp)
8111731c:	003b1706 	br	81115f7c <__reset+0xfb0f5f7c>
81117320:	04204534 	movhi	r16,33044
81117324:	84089c04 	addi	r16,r16,8816
81117328:	003aa606 	br	81115dc4 <__reset+0xfb0f5dc4>
8111732c:	d9003917 	ldw	r4,228(sp)
81117330:	04001004 	movi	r16,64
81117334:	800b883a 	mov	r5,r16
81117338:	111425c0 	call	8111425c <_malloc_r>
8111733c:	d9002c17 	ldw	r4,176(sp)
81117340:	20800015 	stw	r2,0(r4)
81117344:	20800415 	stw	r2,16(r4)
81117348:	1001cb26 	beq	r2,zero,81117a78 <___svfprintf_internal_r+0x21bc>
8111734c:	d8802c17 	ldw	r2,176(sp)
81117350:	14000515 	stw	r16,20(r2)
81117354:	00397606 	br	81115930 <__reset+0xfb0f5930>
81117358:	04204534 	movhi	r16,33044
8111735c:	84089e04 	addi	r16,r16,8824
81117360:	003ee106 	br	81116ee8 <__reset+0xfb0f6ee8>
81117364:	d9402c17 	ldw	r5,176(sp)
81117368:	d9801e04 	addi	r6,sp,120
8111736c:	9809883a 	mov	r4,r19
81117370:	11224dc0 	call	811224dc <__ssprint_r>
81117374:	103a381e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81117378:	dc402617 	ldw	r17,152(sp)
8111737c:	d8c02017 	ldw	r3,128(sp)
81117380:	da000404 	addi	r8,sp,16
81117384:	003f4306 	br	81117094 <__reset+0xfb0f7094>
81117388:	01400184 	movi	r5,6
8111738c:	d9402915 	stw	r5,164(sp)
81117390:	003f9506 	br	811171e8 <__reset+0xfb0f71e8>
81117394:	d9002d17 	ldw	r4,180(sp)
81117398:	25000017 	ldw	r20,0(r4)
8111739c:	21000104 	addi	r4,r4,4
811173a0:	d9002d15 	stw	r4,180(sp)
811173a4:	a02dd7fa 	srai	r22,r20,31
811173a8:	b005883a 	mov	r2,r22
811173ac:	003a9b06 	br	81115e1c <__reset+0xfb0f5e1c>
811173b0:	d9402d17 	ldw	r5,180(sp)
811173b4:	002d883a 	mov	r22,zero
811173b8:	2d000017 	ldw	r20,0(r5)
811173bc:	29400104 	addi	r5,r5,4
811173c0:	d9402d15 	stw	r5,180(sp)
811173c4:	003bf906 	br	811163ac <__reset+0xfb0f63ac>
811173c8:	9480100c 	andi	r18,r18,64
811173cc:	90006e26 	beq	r18,zero,81117588 <___svfprintf_internal_r+0x1ccc>
811173d0:	d9002d17 	ldw	r4,180(sp)
811173d4:	d9402f17 	ldw	r5,188(sp)
811173d8:	20800017 	ldw	r2,0(r4)
811173dc:	21000104 	addi	r4,r4,4
811173e0:	d9002d15 	stw	r4,180(sp)
811173e4:	1140000d 	sth	r5,0(r2)
811173e8:	00396106 	br	81115970 <__reset+0xfb0f5970>
811173ec:	d9402c17 	ldw	r5,176(sp)
811173f0:	d9801e04 	addi	r6,sp,120
811173f4:	9809883a 	mov	r4,r19
811173f8:	11224dc0 	call	811224dc <__ssprint_r>
811173fc:	103a161e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81117400:	d8c02017 	ldw	r3,128(sp)
81117404:	d8801f17 	ldw	r2,124(sp)
81117408:	da000404 	addi	r8,sp,16
8111740c:	d9403317 	ldw	r5,204(sp)
81117410:	10800044 	addi	r2,r2,1
81117414:	44000015 	stw	r16,0(r8)
81117418:	28c7883a 	add	r3,r5,r3
8111741c:	003b7706 	br	811161fc <__reset+0xfb0f61fc>
81117420:	8009883a 	mov	r4,r16
81117424:	da003e15 	stw	r8,248(sp)
81117428:	11155840 	call	81115584 <strlen>
8111742c:	d8802e15 	stw	r2,184(sp)
81117430:	da003e17 	ldw	r8,248(sp)
81117434:	103c280e 	bge	r2,zero,811164d8 <__reset+0xfb0f64d8>
81117438:	0005883a 	mov	r2,zero
8111743c:	003c2606 	br	811164d8 <__reset+0xfb0f64d8>
81117440:	00bfffc4 	movi	r2,-1
81117444:	003a0906 	br	81115c6c <__reset+0xfb0f5c6c>
81117448:	01204534 	movhi	r4,33044
8111744c:	2108b084 	addi	r4,r4,8898
81117450:	d9003515 	stw	r4,212(sp)
81117454:	003b0606 	br	81116070 <__reset+0xfb0f6070>
81117458:	013fffc4 	movi	r4,-1
8111745c:	003a2706 	br	81115cfc <__reset+0xfb0f5cfc>
81117460:	d9402c17 	ldw	r5,176(sp)
81117464:	d9801e04 	addi	r6,sp,120
81117468:	9809883a 	mov	r4,r19
8111746c:	11224dc0 	call	811224dc <__ssprint_r>
81117470:	1039f91e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81117474:	d8c02017 	ldw	r3,128(sp)
81117478:	da000404 	addi	r8,sp,16
8111747c:	003d8406 	br	81116a90 <__reset+0xfb0f6a90>
81117480:	0023883a 	mov	r17,zero
81117484:	003d8306 	br	81116a94 <__reset+0xfb0f6a94>
81117488:	01204534 	movhi	r4,33044
8111748c:	2108ac84 	addi	r4,r4,8882
81117490:	d9002b15 	stw	r4,172(sp)
81117494:	d9002b17 	ldw	r4,172(sp)
81117498:	1c47883a 	add	r3,r3,r17
8111749c:	10800044 	addi	r2,r2,1
811174a0:	41000015 	stw	r4,0(r8)
811174a4:	44400115 	stw	r17,4(r8)
811174a8:	d8c02015 	stw	r3,128(sp)
811174ac:	d8801f15 	stw	r2,124(sp)
811174b0:	010001c4 	movi	r4,7
811174b4:	20bfcd16 	blt	r4,r2,811173ec <__reset+0xfb0f73ec>
811174b8:	42000204 	addi	r8,r8,8
811174bc:	003fd306 	br	8111740c <__reset+0xfb0f740c>
811174c0:	d9402c17 	ldw	r5,176(sp)
811174c4:	d9801e04 	addi	r6,sp,120
811174c8:	9809883a 	mov	r4,r19
811174cc:	11224dc0 	call	811224dc <__ssprint_r>
811174d0:	1039e11e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
811174d4:	d8802617 	ldw	r2,152(sp)
811174d8:	d8c02017 	ldw	r3,128(sp)
811174dc:	da000404 	addi	r8,sp,16
811174e0:	003e1c06 	br	81116d54 <__reset+0xfb0f6d54>
811174e4:	d8802917 	ldw	r2,164(sp)
811174e8:	00c00184 	movi	r3,6
811174ec:	1880012e 	bgeu	r3,r2,811174f4 <___svfprintf_internal_r+0x1c38>
811174f0:	1805883a 	mov	r2,r3
811174f4:	d8802e15 	stw	r2,184(sp)
811174f8:	1000f316 	blt	r2,zero,811178c8 <___svfprintf_internal_r+0x200c>
811174fc:	04204534 	movhi	r16,33044
81117500:	d8802a15 	stw	r2,168(sp)
81117504:	dd002d15 	stw	r20,180(sp)
81117508:	d8002915 	stw	zero,164(sp)
8111750c:	d8003215 	stw	zero,200(sp)
81117510:	8408aa04 	addi	r16,r16,8872
81117514:	0039883a 	mov	fp,zero
81117518:	003a9f06 	br	81115f98 <__reset+0xfb0f5f98>
8111751c:	01204534 	movhi	r4,33044
81117520:	2108b084 	addi	r4,r4,8898
81117524:	d9003515 	stw	r4,212(sp)
81117528:	003b5f06 	br	811162a8 <__reset+0xfb0f62a8>
8111752c:	d9402c17 	ldw	r5,176(sp)
81117530:	d9801e04 	addi	r6,sp,120
81117534:	9809883a 	mov	r4,r19
81117538:	11224dc0 	call	811224dc <__ssprint_r>
8111753c:	1039c61e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
81117540:	d8802617 	ldw	r2,152(sp)
81117544:	d9403317 	ldw	r5,204(sp)
81117548:	d8c02017 	ldw	r3,128(sp)
8111754c:	da000404 	addi	r8,sp,16
81117550:	2885c83a 	sub	r2,r5,r2
81117554:	003e1006 	br	81116d98 <__reset+0xfb0f6d98>
81117558:	00800044 	movi	r2,1
8111755c:	10803fcc 	andi	r2,r2,255
81117560:	00c00044 	movi	r3,1
81117564:	10fa3526 	beq	r2,r3,81115e3c <__reset+0xfb0f5e3c>
81117568:	00c00084 	movi	r3,2
8111756c:	10fb9e26 	beq	r2,r3,811163e8 <__reset+0xfb0f63e8>
81117570:	003a6406 	br	81115f04 <__reset+0xfb0f5f04>
81117574:	0021883a 	mov	r16,zero
81117578:	003e0806 	br	81116d9c <__reset+0xfb0f6d9c>
8111757c:	07000b44 	movi	fp,45
81117580:	df002785 	stb	fp,158(sp)
81117584:	003a0b06 	br	81115db4 <__reset+0xfb0f5db4>
81117588:	d8c02d17 	ldw	r3,180(sp)
8111758c:	d9002f17 	ldw	r4,188(sp)
81117590:	18800017 	ldw	r2,0(r3)
81117594:	18c00104 	addi	r3,r3,4
81117598:	d8c02d15 	stw	r3,180(sp)
8111759c:	11000015 	stw	r4,0(r2)
811175a0:	0038f306 	br	81115970 <__reset+0xfb0f5970>
811175a4:	00c00b44 	movi	r3,45
811175a8:	d8c02785 	stb	r3,158(sp)
811175ac:	d8802a15 	stw	r2,168(sp)
811175b0:	dc802b17 	ldw	r18,172(sp)
811175b4:	d8002915 	stw	zero,164(sp)
811175b8:	07000b44 	movi	fp,45
811175bc:	003a7306 	br	81115f8c <__reset+0xfb0f5f8c>
811175c0:	9080004c 	andi	r2,r18,1
811175c4:	1000941e 	bne	r2,zero,81117818 <___svfprintf_internal_r+0x1f5c>
811175c8:	d8802117 	ldw	r2,132(sp)
811175cc:	1405c83a 	sub	r2,r2,r16
811175d0:	d8803315 	stw	r2,204(sp)
811175d4:	b441161e 	bne	r22,r17,81117a30 <___svfprintf_internal_r+0x2174>
811175d8:	dd802617 	ldw	r22,152(sp)
811175dc:	00bfff44 	movi	r2,-3
811175e0:	b0801a16 	blt	r22,r2,8111764c <___svfprintf_internal_r+0x1d90>
811175e4:	d9402917 	ldw	r5,164(sp)
811175e8:	2d801816 	blt	r5,r22,8111764c <___svfprintf_internal_r+0x1d90>
811175ec:	dd803215 	stw	r22,200(sp)
811175f0:	003f3a06 	br	811172dc <__reset+0xfb0f72dc>
811175f4:	1025883a 	mov	r18,r2
811175f8:	0039883a 	mov	fp,zero
811175fc:	00800084 	movi	r2,2
81117600:	003fd606 	br	8111755c <__reset+0xfb0f755c>
81117604:	9080004c 	andi	r2,r18,1
81117608:	103f191e 	bne	r2,zero,81117270 <__reset+0xfb0f7270>
8111760c:	d8802117 	ldw	r2,132(sp)
81117610:	003f2806 	br	811172b4 <__reset+0xfb0f72b4>
81117614:	01204534 	movhi	r4,33044
81117618:	2108ac84 	addi	r4,r4,8882
8111761c:	d9002b15 	stw	r4,172(sp)
81117620:	003c7c06 	br	81116814 <__reset+0xfb0f6814>
81117624:	e005883a 	mov	r2,fp
81117628:	003f2206 	br	811172b4 <__reset+0xfb0f72b4>
8111762c:	d9402917 	ldw	r5,164(sp)
81117630:	df002783 	ldbu	fp,158(sp)
81117634:	dd002d15 	stw	r20,180(sp)
81117638:	d9402a15 	stw	r5,168(sp)
8111763c:	d9402e15 	stw	r5,184(sp)
81117640:	d8002915 	stw	zero,164(sp)
81117644:	d8003215 	stw	zero,200(sp)
81117648:	003a4c06 	br	81115f7c <__reset+0xfb0f5f7c>
8111764c:	8c7fff84 	addi	r17,r17,-2
81117650:	b5bfffc4 	addi	r22,r22,-1
81117654:	dd802615 	stw	r22,152(sp)
81117658:	dc4022c5 	stb	r17,139(sp)
8111765c:	b000c316 	blt	r22,zero,8111796c <___svfprintf_internal_r+0x20b0>
81117660:	00800ac4 	movi	r2,43
81117664:	d8802305 	stb	r2,140(sp)
81117668:	00800244 	movi	r2,9
8111766c:	15806e16 	blt	r2,r22,81117828 <___svfprintf_internal_r+0x1f6c>
81117670:	00800c04 	movi	r2,48
81117674:	b5800c04 	addi	r22,r22,48
81117678:	d8802345 	stb	r2,141(sp)
8111767c:	dd802385 	stb	r22,142(sp)
81117680:	d88023c4 	addi	r2,sp,143
81117684:	df0022c4 	addi	fp,sp,139
81117688:	d8c03317 	ldw	r3,204(sp)
8111768c:	1739c83a 	sub	fp,r2,fp
81117690:	d9003317 	ldw	r4,204(sp)
81117694:	e0c7883a 	add	r3,fp,r3
81117698:	df003b15 	stw	fp,236(sp)
8111769c:	d8c02e15 	stw	r3,184(sp)
811176a0:	00800044 	movi	r2,1
811176a4:	1100b70e 	bge	r2,r4,81117984 <___svfprintf_internal_r+0x20c8>
811176a8:	d8c02e17 	ldw	r3,184(sp)
811176ac:	18c00044 	addi	r3,r3,1
811176b0:	d8c02e15 	stw	r3,184(sp)
811176b4:	1805883a 	mov	r2,r3
811176b8:	1800b016 	blt	r3,zero,8111797c <___svfprintf_internal_r+0x20c0>
811176bc:	d8003215 	stw	zero,200(sp)
811176c0:	003f1006 	br	81117304 <__reset+0xfb0f7304>
811176c4:	d8802917 	ldw	r2,164(sp)
811176c8:	103ec71e 	bne	r2,zero,811171e8 <__reset+0xfb0f71e8>
811176cc:	dc002915 	stw	r16,164(sp)
811176d0:	003ec506 	br	811171e8 <__reset+0xfb0f71e8>
811176d4:	d9402c17 	ldw	r5,176(sp)
811176d8:	d9801e04 	addi	r6,sp,120
811176dc:	9809883a 	mov	r4,r19
811176e0:	11224dc0 	call	811224dc <__ssprint_r>
811176e4:	10395c1e 	bne	r2,zero,81115c58 <__reset+0xfb0f5c58>
811176e8:	dc402617 	ldw	r17,152(sp)
811176ec:	d8c02017 	ldw	r3,128(sp)
811176f0:	d8801f17 	ldw	r2,124(sp)
811176f4:	da000404 	addi	r8,sp,16
811176f8:	003e7706 	br	811170d8 <__reset+0xfb0f70d8>
811176fc:	582f883a 	mov	r23,r11
81117700:	d8002915 	stw	zero,164(sp)
81117704:	0038c406 	br	81115a18 <__reset+0xfb0f5a18>
81117708:	d8c02917 	ldw	r3,164(sp)
8111770c:	d8802104 	addi	r2,sp,132
81117710:	d8800315 	stw	r2,12(sp)
81117714:	d9403617 	ldw	r5,216(sp)
81117718:	d8802504 	addi	r2,sp,148
8111771c:	d8800215 	stw	r2,8(sp)
81117720:	d8802604 	addi	r2,sp,152
81117724:	d8c00015 	stw	r3,0(sp)
81117728:	9809883a 	mov	r4,r19
8111772c:	d8800115 	stw	r2,4(sp)
81117730:	01c000c4 	movi	r7,3
81117734:	a00d883a 	mov	r6,r20
81117738:	da003e15 	stw	r8,248(sp)
8111773c:	111bba80 	call	8111bba8 <_dtoa_r>
81117740:	d9002917 	ldw	r4,164(sp)
81117744:	da003e17 	ldw	r8,248(sp)
81117748:	1021883a 	mov	r16,r2
8111774c:	1139883a 	add	fp,r2,r4
81117750:	2007883a 	mov	r3,r4
81117754:	81000007 	ldb	r4,0(r16)
81117758:	00800c04 	movi	r2,48
8111775c:	20806f26 	beq	r4,r2,8111791c <___svfprintf_internal_r+0x2060>
81117760:	d8c02617 	ldw	r3,152(sp)
81117764:	e0f9883a 	add	fp,fp,r3
81117768:	003ec206 	br	81117274 <__reset+0xfb0f7274>
8111776c:	00c00b44 	movi	r3,45
81117770:	2520003c 	xorhi	r20,r4,32768
81117774:	d8c02a05 	stb	r3,168(sp)
81117778:	003ea106 	br	81117200 <__reset+0xfb0f7200>
8111777c:	d8c03217 	ldw	r3,200(sp)
81117780:	00c0890e 	bge	zero,r3,811179a8 <___svfprintf_internal_r+0x20ec>
81117784:	00800044 	movi	r2,1
81117788:	d9003317 	ldw	r4,204(sp)
8111778c:	1105883a 	add	r2,r2,r4
81117790:	d8802e15 	stw	r2,184(sp)
81117794:	10005f16 	blt	r2,zero,81117914 <___svfprintf_internal_r+0x2058>
81117798:	044019c4 	movi	r17,103
8111779c:	003ed906 	br	81117304 <__reset+0xfb0f7304>
811177a0:	d9002917 	ldw	r4,164(sp)
811177a4:	20c00044 	addi	r3,r4,1
811177a8:	003e9c06 	br	8111721c <__reset+0xfb0f721c>
811177ac:	d9002917 	ldw	r4,164(sp)
811177b0:	00c0680e 	bge	zero,r3,81117954 <___svfprintf_internal_r+0x2098>
811177b4:	2000461e 	bne	r4,zero,811178d0 <___svfprintf_internal_r+0x2014>
811177b8:	9480004c 	andi	r18,r18,1
811177bc:	9000441e 	bne	r18,zero,811178d0 <___svfprintf_internal_r+0x2014>
811177c0:	1805883a 	mov	r2,r3
811177c4:	1800a016 	blt	r3,zero,81117a48 <___svfprintf_internal_r+0x218c>
811177c8:	d8c03217 	ldw	r3,200(sp)
811177cc:	d8c02e15 	stw	r3,184(sp)
811177d0:	003ecc06 	br	81117304 <__reset+0xfb0f7304>
811177d4:	d9402917 	ldw	r5,164(sp)
811177d8:	d8802104 	addi	r2,sp,132
811177dc:	d8800315 	stw	r2,12(sp)
811177e0:	d9400015 	stw	r5,0(sp)
811177e4:	d8802504 	addi	r2,sp,148
811177e8:	d9403617 	ldw	r5,216(sp)
811177ec:	d8800215 	stw	r2,8(sp)
811177f0:	d8802604 	addi	r2,sp,152
811177f4:	d8800115 	stw	r2,4(sp)
811177f8:	01c000c4 	movi	r7,3
811177fc:	a00d883a 	mov	r6,r20
81117800:	9809883a 	mov	r4,r19
81117804:	da003e15 	stw	r8,248(sp)
81117808:	111bba80 	call	8111bba8 <_dtoa_r>
8111780c:	d8c02917 	ldw	r3,164(sp)
81117810:	da003e17 	ldw	r8,248(sp)
81117814:	1021883a 	mov	r16,r2
81117818:	00801184 	movi	r2,70
8111781c:	80f9883a 	add	fp,r16,r3
81117820:	88bfcc26 	beq	r17,r2,81117754 <__reset+0xfb0f7754>
81117824:	003e9306 	br	81117274 <__reset+0xfb0f7274>
81117828:	df0022c4 	addi	fp,sp,139
8111782c:	dc002915 	stw	r16,164(sp)
81117830:	9829883a 	mov	r20,r19
81117834:	e021883a 	mov	r16,fp
81117838:	4027883a 	mov	r19,r8
8111783c:	b009883a 	mov	r4,r22
81117840:	01400284 	movi	r5,10
81117844:	11270040 	call	81127004 <__modsi3>
81117848:	10800c04 	addi	r2,r2,48
8111784c:	843fffc4 	addi	r16,r16,-1
81117850:	b009883a 	mov	r4,r22
81117854:	01400284 	movi	r5,10
81117858:	80800005 	stb	r2,0(r16)
8111785c:	1126f800 	call	81126f80 <__divsi3>
81117860:	102d883a 	mov	r22,r2
81117864:	00800244 	movi	r2,9
81117868:	15bff416 	blt	r2,r22,8111783c <__reset+0xfb0f783c>
8111786c:	9811883a 	mov	r8,r19
81117870:	b0800c04 	addi	r2,r22,48
81117874:	a027883a 	mov	r19,r20
81117878:	8029883a 	mov	r20,r16
8111787c:	a17fffc4 	addi	r5,r20,-1
81117880:	a0bfffc5 	stb	r2,-1(r20)
81117884:	dc002917 	ldw	r16,164(sp)
81117888:	2f00752e 	bgeu	r5,fp,81117a60 <___svfprintf_internal_r+0x21a4>
8111788c:	d9c02384 	addi	r7,sp,142
81117890:	3d0fc83a 	sub	r7,r7,r20
81117894:	d9002344 	addi	r4,sp,141
81117898:	e1cf883a 	add	r7,fp,r7
8111789c:	00000106 	br	811178a4 <___svfprintf_internal_r+0x1fe8>
811178a0:	28800003 	ldbu	r2,0(r5)
811178a4:	20800005 	stb	r2,0(r4)
811178a8:	21000044 	addi	r4,r4,1
811178ac:	29400044 	addi	r5,r5,1
811178b0:	21fffb1e 	bne	r4,r7,811178a0 <__reset+0xfb0f78a0>
811178b4:	d8802304 	addi	r2,sp,140
811178b8:	1505c83a 	sub	r2,r2,r20
811178bc:	d8c02344 	addi	r3,sp,141
811178c0:	1885883a 	add	r2,r3,r2
811178c4:	003f7006 	br	81117688 <__reset+0xfb0f7688>
811178c8:	0005883a 	mov	r2,zero
811178cc:	003f0b06 	br	811174fc <__reset+0xfb0f74fc>
811178d0:	d9002917 	ldw	r4,164(sp)
811178d4:	d8c03217 	ldw	r3,200(sp)
811178d8:	20800044 	addi	r2,r4,1
811178dc:	1885883a 	add	r2,r3,r2
811178e0:	d8802e15 	stw	r2,184(sp)
811178e4:	103e870e 	bge	r2,zero,81117304 <__reset+0xfb0f7304>
811178e8:	0005883a 	mov	r2,zero
811178ec:	003e8506 	br	81117304 <__reset+0xfb0f7304>
811178f0:	01204534 	movhi	r4,33044
811178f4:	2108ac84 	addi	r4,r4,8882
811178f8:	d9002b15 	stw	r4,172(sp)
811178fc:	003cc506 	br	81116c14 <__reset+0xfb0f6c14>
81117900:	d8c03217 	ldw	r3,200(sp)
81117904:	18c00044 	addi	r3,r3,1
81117908:	d8c02e15 	stw	r3,184(sp)
8111790c:	1805883a 	mov	r2,r3
81117910:	183fa10e 	bge	r3,zero,81117798 <__reset+0xfb0f7798>
81117914:	0005883a 	mov	r2,zero
81117918:	003f9f06 	br	81117798 <__reset+0xfb0f7798>
8111791c:	d9003617 	ldw	r4,216(sp)
81117920:	000d883a 	mov	r6,zero
81117924:	000f883a 	mov	r7,zero
81117928:	a00b883a 	mov	r5,r20
8111792c:	d8c03d15 	stw	r3,244(sp)
81117930:	da003e15 	stw	r8,248(sp)
81117934:	11284d40 	call	811284d4 <__eqdf2>
81117938:	d8c03d17 	ldw	r3,244(sp)
8111793c:	da003e17 	ldw	r8,248(sp)
81117940:	103f8726 	beq	r2,zero,81117760 <__reset+0xfb0f7760>
81117944:	00800044 	movi	r2,1
81117948:	10c7c83a 	sub	r3,r2,r3
8111794c:	d8c02615 	stw	r3,152(sp)
81117950:	003f8406 	br	81117764 <__reset+0xfb0f7764>
81117954:	20000e1e 	bne	r4,zero,81117990 <___svfprintf_internal_r+0x20d4>
81117958:	9480004c 	andi	r18,r18,1
8111795c:	90000c1e 	bne	r18,zero,81117990 <___svfprintf_internal_r+0x20d4>
81117960:	00800044 	movi	r2,1
81117964:	d8802e15 	stw	r2,184(sp)
81117968:	003e6606 	br	81117304 <__reset+0xfb0f7304>
8111796c:	00800b44 	movi	r2,45
81117970:	05adc83a 	sub	r22,zero,r22
81117974:	d8802305 	stb	r2,140(sp)
81117978:	003f3b06 	br	81117668 <__reset+0xfb0f7668>
8111797c:	0005883a 	mov	r2,zero
81117980:	003f4e06 	br	811176bc <__reset+0xfb0f76bc>
81117984:	90a4703a 	and	r18,r18,r2
81117988:	903f4a26 	beq	r18,zero,811176b4 <__reset+0xfb0f76b4>
8111798c:	003f4606 	br	811176a8 <__reset+0xfb0f76a8>
81117990:	d8c02917 	ldw	r3,164(sp)
81117994:	18c00084 	addi	r3,r3,2
81117998:	d8c02e15 	stw	r3,184(sp)
8111799c:	1805883a 	mov	r2,r3
811179a0:	183e580e 	bge	r3,zero,81117304 <__reset+0xfb0f7304>
811179a4:	003fd006 	br	811178e8 <__reset+0xfb0f78e8>
811179a8:	00800084 	movi	r2,2
811179ac:	10c5c83a 	sub	r2,r2,r3
811179b0:	003f7506 	br	81117788 <__reset+0xfb0f7788>
811179b4:	d8802d17 	ldw	r2,180(sp)
811179b8:	d9002d17 	ldw	r4,180(sp)
811179bc:	bc400043 	ldbu	r17,1(r23)
811179c0:	10800017 	ldw	r2,0(r2)
811179c4:	582f883a 	mov	r23,r11
811179c8:	d8802915 	stw	r2,164(sp)
811179cc:	20800104 	addi	r2,r4,4
811179d0:	d9002917 	ldw	r4,164(sp)
811179d4:	d8802d15 	stw	r2,180(sp)
811179d8:	203df00e 	bge	r4,zero,8111719c <__reset+0xfb0f719c>
811179dc:	8c403fcc 	andi	r17,r17,255
811179e0:	00bfffc4 	movi	r2,-1
811179e4:	8c40201c 	xori	r17,r17,128
811179e8:	d8802915 	stw	r2,164(sp)
811179ec:	8c7fe004 	addi	r17,r17,-128
811179f0:	00380806 	br	81115a14 <__reset+0xfb0f5a14>
811179f4:	9080004c 	andi	r2,r18,1
811179f8:	0039883a 	mov	fp,zero
811179fc:	10000726 	beq	r2,zero,81117a1c <___svfprintf_internal_r+0x2160>
81117a00:	d8c02817 	ldw	r3,160(sp)
81117a04:	dc001dc4 	addi	r16,sp,119
81117a08:	00800c04 	movi	r2,48
81117a0c:	1c07c83a 	sub	r3,r3,r16
81117a10:	d8801dc5 	stb	r2,119(sp)
81117a14:	d8c02e15 	stw	r3,184(sp)
81117a18:	00395206 	br	81115f64 <__reset+0xfb0f5f64>
81117a1c:	d8002e15 	stw	zero,184(sp)
81117a20:	dc001e04 	addi	r16,sp,120
81117a24:	00394f06 	br	81115f64 <__reset+0xfb0f5f64>
81117a28:	0005883a 	mov	r2,zero
81117a2c:	003e3206 	br	811172f8 <__reset+0xfb0f72f8>
81117a30:	dd802617 	ldw	r22,152(sp)
81117a34:	003f0606 	br	81117650 <__reset+0xfb0f7650>
81117a38:	d9c02785 	stb	r7,158(sp)
81117a3c:	003a5106 	br	81116384 <__reset+0xfb0f6384>
81117a40:	d9c02785 	stb	r7,158(sp)
81117a44:	003a3706 	br	81116324 <__reset+0xfb0f6324>
81117a48:	0005883a 	mov	r2,zero
81117a4c:	003f5e06 	br	811177c8 <__reset+0xfb0f77c8>
81117a50:	d9c02785 	stb	r7,158(sp)
81117a54:	00391706 	br	81115eb4 <__reset+0xfb0f5eb4>
81117a58:	d9c02785 	stb	r7,158(sp)
81117a5c:	0038e606 	br	81115df8 <__reset+0xfb0f5df8>
81117a60:	d8802344 	addi	r2,sp,141
81117a64:	003f0806 	br	81117688 <__reset+0xfb0f7688>
81117a68:	d9c02785 	stb	r7,158(sp)
81117a6c:	0038b706 	br	81115d4c <__reset+0xfb0f5d4c>
81117a70:	d9c02785 	stb	r7,158(sp)
81117a74:	003adc06 	br	811165e8 <__reset+0xfb0f65e8>
81117a78:	d9403917 	ldw	r5,228(sp)
81117a7c:	00800304 	movi	r2,12
81117a80:	28800015 	stw	r2,0(r5)
81117a84:	00bfffc4 	movi	r2,-1
81117a88:	00387806 	br	81115c6c <__reset+0xfb0f5c6c>
81117a8c:	d9c02785 	stb	r7,158(sp)
81117a90:	003abf06 	br	81116590 <__reset+0xfb0f6590>
81117a94:	d9c02785 	stb	r7,158(sp)
81117a98:	003a9b06 	br	81116508 <__reset+0xfb0f6508>

81117a9c <___vfprintf_internal_r>:
81117a9c:	deffb804 	addi	sp,sp,-288
81117aa0:	de00012e 	bgeu	sp,et,81117aa8 <___vfprintf_internal_r+0xc>
81117aa4:	003b68fa 	trap	3
81117aa8:	dfc04715 	stw	ra,284(sp)
81117aac:	ddc04515 	stw	r23,276(sp)
81117ab0:	dd404315 	stw	r21,268(sp)
81117ab4:	d9002c15 	stw	r4,176(sp)
81117ab8:	282f883a 	mov	r23,r5
81117abc:	302b883a 	mov	r21,r6
81117ac0:	d9c02d15 	stw	r7,180(sp)
81117ac4:	df004615 	stw	fp,280(sp)
81117ac8:	dd804415 	stw	r22,272(sp)
81117acc:	dd004215 	stw	r20,264(sp)
81117ad0:	dcc04115 	stw	r19,260(sp)
81117ad4:	dc804015 	stw	r18,256(sp)
81117ad8:	dc403f15 	stw	r17,252(sp)
81117adc:	dc003e15 	stw	r16,248(sp)
81117ae0:	111e7a40 	call	8111e7a4 <_localeconv_r>
81117ae4:	10800017 	ldw	r2,0(r2)
81117ae8:	1009883a 	mov	r4,r2
81117aec:	d8803415 	stw	r2,208(sp)
81117af0:	11155840 	call	81115584 <strlen>
81117af4:	d8803715 	stw	r2,220(sp)
81117af8:	d8802c17 	ldw	r2,176(sp)
81117afc:	10000226 	beq	r2,zero,81117b08 <___vfprintf_internal_r+0x6c>
81117b00:	10800e17 	ldw	r2,56(r2)
81117b04:	1000f926 	beq	r2,zero,81117eec <___vfprintf_internal_r+0x450>
81117b08:	b880030b 	ldhu	r2,12(r23)
81117b0c:	10c8000c 	andi	r3,r2,8192
81117b10:	1800061e 	bne	r3,zero,81117b2c <___vfprintf_internal_r+0x90>
81117b14:	b9001917 	ldw	r4,100(r23)
81117b18:	00f7ffc4 	movi	r3,-8193
81117b1c:	10880014 	ori	r2,r2,8192
81117b20:	20c6703a 	and	r3,r4,r3
81117b24:	b880030d 	sth	r2,12(r23)
81117b28:	b8c01915 	stw	r3,100(r23)
81117b2c:	10c0020c 	andi	r3,r2,8
81117b30:	1800c126 	beq	r3,zero,81117e38 <___vfprintf_internal_r+0x39c>
81117b34:	b8c00417 	ldw	r3,16(r23)
81117b38:	1800bf26 	beq	r3,zero,81117e38 <___vfprintf_internal_r+0x39c>
81117b3c:	1080068c 	andi	r2,r2,26
81117b40:	00c00284 	movi	r3,10
81117b44:	10c0c426 	beq	r2,r3,81117e58 <___vfprintf_internal_r+0x3bc>
81117b48:	d8c00404 	addi	r3,sp,16
81117b4c:	05204534 	movhi	r20,33044
81117b50:	d9001e04 	addi	r4,sp,120
81117b54:	a508b484 	addi	r20,r20,8914
81117b58:	d8c01e15 	stw	r3,120(sp)
81117b5c:	d8002015 	stw	zero,128(sp)
81117b60:	d8001f15 	stw	zero,124(sp)
81117b64:	d8003315 	stw	zero,204(sp)
81117b68:	d8003615 	stw	zero,216(sp)
81117b6c:	d8003815 	stw	zero,224(sp)
81117b70:	1811883a 	mov	r8,r3
81117b74:	d8003915 	stw	zero,228(sp)
81117b78:	d8003a15 	stw	zero,232(sp)
81117b7c:	d8002f15 	stw	zero,188(sp)
81117b80:	d9002815 	stw	r4,160(sp)
81117b84:	a8800007 	ldb	r2,0(r21)
81117b88:	10027b26 	beq	r2,zero,81118578 <___vfprintf_internal_r+0xadc>
81117b8c:	00c00944 	movi	r3,37
81117b90:	a821883a 	mov	r16,r21
81117b94:	10c0021e 	bne	r2,r3,81117ba0 <___vfprintf_internal_r+0x104>
81117b98:	00001406 	br	81117bec <___vfprintf_internal_r+0x150>
81117b9c:	10c00326 	beq	r2,r3,81117bac <___vfprintf_internal_r+0x110>
81117ba0:	84000044 	addi	r16,r16,1
81117ba4:	80800007 	ldb	r2,0(r16)
81117ba8:	103ffc1e 	bne	r2,zero,81117b9c <__reset+0xfb0f7b9c>
81117bac:	8563c83a 	sub	r17,r16,r21
81117bb0:	88000e26 	beq	r17,zero,81117bec <___vfprintf_internal_r+0x150>
81117bb4:	d8c02017 	ldw	r3,128(sp)
81117bb8:	d8801f17 	ldw	r2,124(sp)
81117bbc:	45400015 	stw	r21,0(r8)
81117bc0:	1c47883a 	add	r3,r3,r17
81117bc4:	10800044 	addi	r2,r2,1
81117bc8:	d8c02015 	stw	r3,128(sp)
81117bcc:	44400115 	stw	r17,4(r8)
81117bd0:	d8801f15 	stw	r2,124(sp)
81117bd4:	00c001c4 	movi	r3,7
81117bd8:	1880a716 	blt	r3,r2,81117e78 <___vfprintf_internal_r+0x3dc>
81117bdc:	42000204 	addi	r8,r8,8
81117be0:	d9402f17 	ldw	r5,188(sp)
81117be4:	2c4b883a 	add	r5,r5,r17
81117be8:	d9402f15 	stw	r5,188(sp)
81117bec:	80800007 	ldb	r2,0(r16)
81117bf0:	1000a826 	beq	r2,zero,81117e94 <___vfprintf_internal_r+0x3f8>
81117bf4:	84400047 	ldb	r17,1(r16)
81117bf8:	00bfffc4 	movi	r2,-1
81117bfc:	85400044 	addi	r21,r16,1
81117c00:	d8002785 	stb	zero,158(sp)
81117c04:	0007883a 	mov	r3,zero
81117c08:	000f883a 	mov	r7,zero
81117c0c:	d8802915 	stw	r2,164(sp)
81117c10:	d8003115 	stw	zero,196(sp)
81117c14:	0025883a 	mov	r18,zero
81117c18:	01401604 	movi	r5,88
81117c1c:	01800244 	movi	r6,9
81117c20:	02800a84 	movi	r10,42
81117c24:	02401b04 	movi	r9,108
81117c28:	ad400044 	addi	r21,r21,1
81117c2c:	88bff804 	addi	r2,r17,-32
81117c30:	28830436 	bltu	r5,r2,81118844 <___vfprintf_internal_r+0xda8>
81117c34:	100490ba 	slli	r2,r2,2
81117c38:	01204474 	movhi	r4,33041
81117c3c:	211f1304 	addi	r4,r4,31820
81117c40:	1105883a 	add	r2,r2,r4
81117c44:	10800017 	ldw	r2,0(r2)
81117c48:	1000683a 	jmp	r2
81117c4c:	81118764 	muli	r4,r16,17949
81117c50:	81118844 	addi	r4,r16,17953
81117c54:	81118844 	addi	r4,r16,17953
81117c58:	81118784 	addi	r4,r16,17950
81117c5c:	81118844 	addi	r4,r16,17953
81117c60:	81118844 	addi	r4,r16,17953
81117c64:	81118844 	addi	r4,r16,17953
81117c68:	81118844 	addi	r4,r16,17953
81117c6c:	81118844 	addi	r4,r16,17953
81117c70:	81118844 	addi	r4,r16,17953
81117c74:	81117ef8 	rdprs	r4,r16,17915
81117c78:	811186a0 	cmpeqi	r4,r16,17946
81117c7c:	81118844 	addi	r4,r16,17953
81117c80:	81117dc0 	call	881117dc <__reset+0x20f17dc>
81117c84:	81117f20 	cmpeqi	r4,r16,17916
81117c88:	81118844 	addi	r4,r16,17953
81117c8c:	81117f60 	cmpeqi	r4,r16,17917
81117c90:	81117f6c 	andhi	r4,r16,17917
81117c94:	81117f6c 	andhi	r4,r16,17917
81117c98:	81117f6c 	andhi	r4,r16,17917
81117c9c:	81117f6c 	andhi	r4,r16,17917
81117ca0:	81117f6c 	andhi	r4,r16,17917
81117ca4:	81117f6c 	andhi	r4,r16,17917
81117ca8:	81117f6c 	andhi	r4,r16,17917
81117cac:	81117f6c 	andhi	r4,r16,17917
81117cb0:	81117f6c 	andhi	r4,r16,17917
81117cb4:	81118844 	addi	r4,r16,17953
81117cb8:	81118844 	addi	r4,r16,17953
81117cbc:	81118844 	addi	r4,r16,17953
81117cc0:	81118844 	addi	r4,r16,17953
81117cc4:	81118844 	addi	r4,r16,17953
81117cc8:	81118844 	addi	r4,r16,17953
81117ccc:	81118844 	addi	r4,r16,17953
81117cd0:	81118844 	addi	r4,r16,17953
81117cd4:	81118844 	addi	r4,r16,17953
81117cd8:	81118844 	addi	r4,r16,17953
81117cdc:	81117fa0 	cmpeqi	r4,r16,17918
81117ce0:	8111805c 	xori	r4,r16,17921
81117ce4:	81118844 	addi	r4,r16,17953
81117ce8:	8111805c 	xori	r4,r16,17921
81117cec:	81118844 	addi	r4,r16,17953
81117cf0:	81118844 	addi	r4,r16,17953
81117cf4:	81118844 	addi	r4,r16,17953
81117cf8:	81118844 	addi	r4,r16,17953
81117cfc:	811180fc 	xorhi	r4,r16,17923
81117d00:	81118844 	addi	r4,r16,17953
81117d04:	81118844 	addi	r4,r16,17953
81117d08:	81118108 	cmpgei	r4,r16,17924
81117d0c:	81118844 	addi	r4,r16,17953
81117d10:	81118844 	addi	r4,r16,17953
81117d14:	81118844 	addi	r4,r16,17953
81117d18:	81118844 	addi	r4,r16,17953
81117d1c:	81118844 	addi	r4,r16,17953
81117d20:	81118580 	call	88111858 <__reset+0x20f1858>
81117d24:	81118844 	addi	r4,r16,17953
81117d28:	81118844 	addi	r4,r16,17953
81117d2c:	811185e0 	cmpeqi	r4,r16,17943
81117d30:	81118844 	addi	r4,r16,17953
81117d34:	81118844 	addi	r4,r16,17953
81117d38:	81118844 	addi	r4,r16,17953
81117d3c:	81118844 	addi	r4,r16,17953
81117d40:	81118844 	addi	r4,r16,17953
81117d44:	81118844 	addi	r4,r16,17953
81117d48:	81118844 	addi	r4,r16,17953
81117d4c:	81118844 	addi	r4,r16,17953
81117d50:	81118844 	addi	r4,r16,17953
81117d54:	81118844 	addi	r4,r16,17953
81117d58:	811187f0 	cmpltui	r4,r16,17951
81117d5c:	81118790 	cmplti	r4,r16,17950
81117d60:	8111805c 	xori	r4,r16,17921
81117d64:	8111805c 	xori	r4,r16,17921
81117d68:	8111805c 	xori	r4,r16,17921
81117d6c:	811187a0 	cmpeqi	r4,r16,17950
81117d70:	81118790 	cmplti	r4,r16,17950
81117d74:	81118844 	addi	r4,r16,17953
81117d78:	81118844 	addi	r4,r16,17953
81117d7c:	811187ac 	andhi	r4,r16,17950
81117d80:	81118844 	addi	r4,r16,17953
81117d84:	811187bc 	xorhi	r4,r16,17950
81117d88:	81118690 	cmplti	r4,r16,17946
81117d8c:	81117dcc 	andi	r4,r16,17911
81117d90:	811186b0 	cmpltui	r4,r16,17946
81117d94:	81118844 	addi	r4,r16,17953
81117d98:	811186bc 	xorhi	r4,r16,17946
81117d9c:	81118844 	addi	r4,r16,17953
81117da0:	81118718 	cmpnei	r4,r16,17948
81117da4:	81118844 	addi	r4,r16,17953
81117da8:	81118844 	addi	r4,r16,17953
81117dac:	81118728 	cmpgeui	r4,r16,17948
81117db0:	d9003117 	ldw	r4,196(sp)
81117db4:	d8802d15 	stw	r2,180(sp)
81117db8:	0109c83a 	sub	r4,zero,r4
81117dbc:	d9003115 	stw	r4,196(sp)
81117dc0:	94800114 	ori	r18,r18,4
81117dc4:	ac400007 	ldb	r17,0(r21)
81117dc8:	003f9706 	br	81117c28 <__reset+0xfb0f7c28>
81117dcc:	00800c04 	movi	r2,48
81117dd0:	d9002d17 	ldw	r4,180(sp)
81117dd4:	d9402917 	ldw	r5,164(sp)
81117dd8:	d8802705 	stb	r2,156(sp)
81117ddc:	00801e04 	movi	r2,120
81117de0:	d8802745 	stb	r2,157(sp)
81117de4:	d8002785 	stb	zero,158(sp)
81117de8:	20c00104 	addi	r3,r4,4
81117dec:	24c00017 	ldw	r19,0(r4)
81117df0:	002d883a 	mov	r22,zero
81117df4:	90800094 	ori	r2,r18,2
81117df8:	28029a16 	blt	r5,zero,81118864 <___vfprintf_internal_r+0xdc8>
81117dfc:	00bfdfc4 	movi	r2,-129
81117e00:	90a4703a 	and	r18,r18,r2
81117e04:	d8c02d15 	stw	r3,180(sp)
81117e08:	94800094 	ori	r18,r18,2
81117e0c:	9802871e 	bne	r19,zero,8111882c <___vfprintf_internal_r+0xd90>
81117e10:	00a04534 	movhi	r2,33044
81117e14:	1088a504 	addi	r2,r2,8852
81117e18:	d8803915 	stw	r2,228(sp)
81117e1c:	04401e04 	movi	r17,120
81117e20:	d8802917 	ldw	r2,164(sp)
81117e24:	0039883a 	mov	fp,zero
81117e28:	1001e926 	beq	r2,zero,811185d0 <___vfprintf_internal_r+0xb34>
81117e2c:	0027883a 	mov	r19,zero
81117e30:	002d883a 	mov	r22,zero
81117e34:	00020506 	br	8111864c <___vfprintf_internal_r+0xbb0>
81117e38:	d9002c17 	ldw	r4,176(sp)
81117e3c:	b80b883a 	mov	r5,r23
81117e40:	111b7e80 	call	8111b7e8 <__swsetup_r>
81117e44:	1005ac1e 	bne	r2,zero,811194f8 <___vfprintf_internal_r+0x1a5c>
81117e48:	b880030b 	ldhu	r2,12(r23)
81117e4c:	00c00284 	movi	r3,10
81117e50:	1080068c 	andi	r2,r2,26
81117e54:	10ff3c1e 	bne	r2,r3,81117b48 <__reset+0xfb0f7b48>
81117e58:	b880038f 	ldh	r2,14(r23)
81117e5c:	103f3a16 	blt	r2,zero,81117b48 <__reset+0xfb0f7b48>
81117e60:	d9c02d17 	ldw	r7,180(sp)
81117e64:	d9002c17 	ldw	r4,176(sp)
81117e68:	a80d883a 	mov	r6,r21
81117e6c:	b80b883a 	mov	r5,r23
81117e70:	1119cb80 	call	81119cb8 <__sbprintf>
81117e74:	00001106 	br	81117ebc <___vfprintf_internal_r+0x420>
81117e78:	d9002c17 	ldw	r4,176(sp)
81117e7c:	d9801e04 	addi	r6,sp,120
81117e80:	b80b883a 	mov	r5,r23
81117e84:	1123c8c0 	call	81123c8c <__sprint_r>
81117e88:	1000081e 	bne	r2,zero,81117eac <___vfprintf_internal_r+0x410>
81117e8c:	da000404 	addi	r8,sp,16
81117e90:	003f5306 	br	81117be0 <__reset+0xfb0f7be0>
81117e94:	d8802017 	ldw	r2,128(sp)
81117e98:	10000426 	beq	r2,zero,81117eac <___vfprintf_internal_r+0x410>
81117e9c:	d9002c17 	ldw	r4,176(sp)
81117ea0:	d9801e04 	addi	r6,sp,120
81117ea4:	b80b883a 	mov	r5,r23
81117ea8:	1123c8c0 	call	81123c8c <__sprint_r>
81117eac:	b880030b 	ldhu	r2,12(r23)
81117eb0:	1080100c 	andi	r2,r2,64
81117eb4:	1005901e 	bne	r2,zero,811194f8 <___vfprintf_internal_r+0x1a5c>
81117eb8:	d8802f17 	ldw	r2,188(sp)
81117ebc:	dfc04717 	ldw	ra,284(sp)
81117ec0:	df004617 	ldw	fp,280(sp)
81117ec4:	ddc04517 	ldw	r23,276(sp)
81117ec8:	dd804417 	ldw	r22,272(sp)
81117ecc:	dd404317 	ldw	r21,268(sp)
81117ed0:	dd004217 	ldw	r20,264(sp)
81117ed4:	dcc04117 	ldw	r19,260(sp)
81117ed8:	dc804017 	ldw	r18,256(sp)
81117edc:	dc403f17 	ldw	r17,252(sp)
81117ee0:	dc003e17 	ldw	r16,248(sp)
81117ee4:	dec04804 	addi	sp,sp,288
81117ee8:	f800283a 	ret
81117eec:	d9002c17 	ldw	r4,176(sp)
81117ef0:	111d8580 	call	8111d858 <__sinit>
81117ef4:	003f0406 	br	81117b08 <__reset+0xfb0f7b08>
81117ef8:	d8802d17 	ldw	r2,180(sp)
81117efc:	d9002d17 	ldw	r4,180(sp)
81117f00:	10800017 	ldw	r2,0(r2)
81117f04:	d8803115 	stw	r2,196(sp)
81117f08:	20800104 	addi	r2,r4,4
81117f0c:	d9003117 	ldw	r4,196(sp)
81117f10:	203fa716 	blt	r4,zero,81117db0 <__reset+0xfb0f7db0>
81117f14:	d8802d15 	stw	r2,180(sp)
81117f18:	ac400007 	ldb	r17,0(r21)
81117f1c:	003f4206 	br	81117c28 <__reset+0xfb0f7c28>
81117f20:	ac400007 	ldb	r17,0(r21)
81117f24:	aac00044 	addi	r11,r21,1
81117f28:	8a872826 	beq	r17,r10,81119bcc <___vfprintf_internal_r+0x2130>
81117f2c:	88bff404 	addi	r2,r17,-48
81117f30:	0009883a 	mov	r4,zero
81117f34:	30867d36 	bltu	r6,r2,8111992c <___vfprintf_internal_r+0x1e90>
81117f38:	5c400007 	ldb	r17,0(r11)
81117f3c:	210002a4 	muli	r4,r4,10
81117f40:	5d400044 	addi	r21,r11,1
81117f44:	a817883a 	mov	r11,r21
81117f48:	2089883a 	add	r4,r4,r2
81117f4c:	88bff404 	addi	r2,r17,-48
81117f50:	30bff92e 	bgeu	r6,r2,81117f38 <__reset+0xfb0f7f38>
81117f54:	2005c916 	blt	r4,zero,8111967c <___vfprintf_internal_r+0x1be0>
81117f58:	d9002915 	stw	r4,164(sp)
81117f5c:	003f3306 	br	81117c2c <__reset+0xfb0f7c2c>
81117f60:	94802014 	ori	r18,r18,128
81117f64:	ac400007 	ldb	r17,0(r21)
81117f68:	003f2f06 	br	81117c28 <__reset+0xfb0f7c28>
81117f6c:	a809883a 	mov	r4,r21
81117f70:	d8003115 	stw	zero,196(sp)
81117f74:	88bff404 	addi	r2,r17,-48
81117f78:	0017883a 	mov	r11,zero
81117f7c:	24400007 	ldb	r17,0(r4)
81117f80:	5ac002a4 	muli	r11,r11,10
81117f84:	ad400044 	addi	r21,r21,1
81117f88:	a809883a 	mov	r4,r21
81117f8c:	12d7883a 	add	r11,r2,r11
81117f90:	88bff404 	addi	r2,r17,-48
81117f94:	30bff92e 	bgeu	r6,r2,81117f7c <__reset+0xfb0f7f7c>
81117f98:	dac03115 	stw	r11,196(sp)
81117f9c:	003f2306 	br	81117c2c <__reset+0xfb0f7c2c>
81117fa0:	18c03fcc 	andi	r3,r3,255
81117fa4:	18072b1e 	bne	r3,zero,81119c54 <___vfprintf_internal_r+0x21b8>
81117fa8:	94800414 	ori	r18,r18,16
81117fac:	9080080c 	andi	r2,r18,32
81117fb0:	10037b26 	beq	r2,zero,81118da0 <___vfprintf_internal_r+0x1304>
81117fb4:	d9402d17 	ldw	r5,180(sp)
81117fb8:	28800117 	ldw	r2,4(r5)
81117fbc:	2cc00017 	ldw	r19,0(r5)
81117fc0:	29400204 	addi	r5,r5,8
81117fc4:	d9402d15 	stw	r5,180(sp)
81117fc8:	102d883a 	mov	r22,r2
81117fcc:	10044b16 	blt	r2,zero,811190fc <___vfprintf_internal_r+0x1660>
81117fd0:	d9402917 	ldw	r5,164(sp)
81117fd4:	df002783 	ldbu	fp,158(sp)
81117fd8:	2803bc16 	blt	r5,zero,81118ecc <___vfprintf_internal_r+0x1430>
81117fdc:	00ffdfc4 	movi	r3,-129
81117fe0:	9d84b03a 	or	r2,r19,r22
81117fe4:	90e4703a 	and	r18,r18,r3
81117fe8:	10017726 	beq	r2,zero,811185c8 <___vfprintf_internal_r+0xb2c>
81117fec:	b0038326 	beq	r22,zero,81118dfc <___vfprintf_internal_r+0x1360>
81117ff0:	dc402a15 	stw	r17,168(sp)
81117ff4:	dc001e04 	addi	r16,sp,120
81117ff8:	b023883a 	mov	r17,r22
81117ffc:	402d883a 	mov	r22,r8
81118000:	9809883a 	mov	r4,r19
81118004:	880b883a 	mov	r5,r17
81118008:	01800284 	movi	r6,10
8111800c:	000f883a 	mov	r7,zero
81118010:	1126a400 	call	81126a40 <__umoddi3>
81118014:	10800c04 	addi	r2,r2,48
81118018:	843fffc4 	addi	r16,r16,-1
8111801c:	9809883a 	mov	r4,r19
81118020:	880b883a 	mov	r5,r17
81118024:	80800005 	stb	r2,0(r16)
81118028:	01800284 	movi	r6,10
8111802c:	000f883a 	mov	r7,zero
81118030:	11264c00 	call	811264c0 <__udivdi3>
81118034:	1027883a 	mov	r19,r2
81118038:	10c4b03a 	or	r2,r2,r3
8111803c:	1823883a 	mov	r17,r3
81118040:	103fef1e 	bne	r2,zero,81118000 <__reset+0xfb0f8000>
81118044:	d8c02817 	ldw	r3,160(sp)
81118048:	dc402a17 	ldw	r17,168(sp)
8111804c:	b011883a 	mov	r8,r22
81118050:	1c07c83a 	sub	r3,r3,r16
81118054:	d8c02e15 	stw	r3,184(sp)
81118058:	00005906 	br	811181c0 <___vfprintf_internal_r+0x724>
8111805c:	18c03fcc 	andi	r3,r3,255
81118060:	1806fa1e 	bne	r3,zero,81119c4c <___vfprintf_internal_r+0x21b0>
81118064:	9080020c 	andi	r2,r18,8
81118068:	10048a26 	beq	r2,zero,81119294 <___vfprintf_internal_r+0x17f8>
8111806c:	d8c02d17 	ldw	r3,180(sp)
81118070:	d9002d17 	ldw	r4,180(sp)
81118074:	d9402d17 	ldw	r5,180(sp)
81118078:	18c00017 	ldw	r3,0(r3)
8111807c:	21000117 	ldw	r4,4(r4)
81118080:	29400204 	addi	r5,r5,8
81118084:	d8c03615 	stw	r3,216(sp)
81118088:	d9003815 	stw	r4,224(sp)
8111808c:	d9402d15 	stw	r5,180(sp)
81118090:	d9003617 	ldw	r4,216(sp)
81118094:	d9403817 	ldw	r5,224(sp)
81118098:	da003d15 	stw	r8,244(sp)
8111809c:	04000044 	movi	r16,1
811180a0:	11202f00 	call	811202f0 <__fpclassifyd>
811180a4:	da003d17 	ldw	r8,244(sp)
811180a8:	14041f1e 	bne	r2,r16,81119128 <___vfprintf_internal_r+0x168c>
811180ac:	d9003617 	ldw	r4,216(sp)
811180b0:	d9403817 	ldw	r5,224(sp)
811180b4:	000d883a 	mov	r6,zero
811180b8:	000f883a 	mov	r7,zero
811180bc:	11286380 	call	81128638 <__ledf2>
811180c0:	da003d17 	ldw	r8,244(sp)
811180c4:	1005be16 	blt	r2,zero,811197c0 <___vfprintf_internal_r+0x1d24>
811180c8:	df002783 	ldbu	fp,158(sp)
811180cc:	008011c4 	movi	r2,71
811180d0:	1445330e 	bge	r2,r17,811195a0 <___vfprintf_internal_r+0x1b04>
811180d4:	04204534 	movhi	r16,33044
811180d8:	84089d04 	addi	r16,r16,8820
811180dc:	00c000c4 	movi	r3,3
811180e0:	00bfdfc4 	movi	r2,-129
811180e4:	d8c02a15 	stw	r3,168(sp)
811180e8:	90a4703a 	and	r18,r18,r2
811180ec:	d8c02e15 	stw	r3,184(sp)
811180f0:	d8002915 	stw	zero,164(sp)
811180f4:	d8003215 	stw	zero,200(sp)
811180f8:	00003706 	br	811181d8 <___vfprintf_internal_r+0x73c>
811180fc:	94800214 	ori	r18,r18,8
81118100:	ac400007 	ldb	r17,0(r21)
81118104:	003ec806 	br	81117c28 <__reset+0xfb0f7c28>
81118108:	18c03fcc 	andi	r3,r3,255
8111810c:	1806db1e 	bne	r3,zero,81119c7c <___vfprintf_internal_r+0x21e0>
81118110:	94800414 	ori	r18,r18,16
81118114:	9080080c 	andi	r2,r18,32
81118118:	1002d826 	beq	r2,zero,81118c7c <___vfprintf_internal_r+0x11e0>
8111811c:	d9402d17 	ldw	r5,180(sp)
81118120:	d8c02917 	ldw	r3,164(sp)
81118124:	d8002785 	stb	zero,158(sp)
81118128:	28800204 	addi	r2,r5,8
8111812c:	2cc00017 	ldw	r19,0(r5)
81118130:	2d800117 	ldw	r22,4(r5)
81118134:	18048f16 	blt	r3,zero,81119374 <___vfprintf_internal_r+0x18d8>
81118138:	013fdfc4 	movi	r4,-129
8111813c:	9d86b03a 	or	r3,r19,r22
81118140:	d8802d15 	stw	r2,180(sp)
81118144:	9124703a 	and	r18,r18,r4
81118148:	1802d91e 	bne	r3,zero,81118cb0 <___vfprintf_internal_r+0x1214>
8111814c:	d8c02917 	ldw	r3,164(sp)
81118150:	0039883a 	mov	fp,zero
81118154:	1805c326 	beq	r3,zero,81119864 <___vfprintf_internal_r+0x1dc8>
81118158:	0027883a 	mov	r19,zero
8111815c:	002d883a 	mov	r22,zero
81118160:	dc001e04 	addi	r16,sp,120
81118164:	9806d0fa 	srli	r3,r19,3
81118168:	b008977a 	slli	r4,r22,29
8111816c:	b02cd0fa 	srli	r22,r22,3
81118170:	9cc001cc 	andi	r19,r19,7
81118174:	98800c04 	addi	r2,r19,48
81118178:	843fffc4 	addi	r16,r16,-1
8111817c:	20e6b03a 	or	r19,r4,r3
81118180:	80800005 	stb	r2,0(r16)
81118184:	9d86b03a 	or	r3,r19,r22
81118188:	183ff61e 	bne	r3,zero,81118164 <__reset+0xfb0f8164>
8111818c:	90c0004c 	andi	r3,r18,1
81118190:	18013b26 	beq	r3,zero,81118680 <___vfprintf_internal_r+0xbe4>
81118194:	10803fcc 	andi	r2,r2,255
81118198:	1080201c 	xori	r2,r2,128
8111819c:	10bfe004 	addi	r2,r2,-128
811181a0:	00c00c04 	movi	r3,48
811181a4:	10c13626 	beq	r2,r3,81118680 <___vfprintf_internal_r+0xbe4>
811181a8:	80ffffc5 	stb	r3,-1(r16)
811181ac:	d8c02817 	ldw	r3,160(sp)
811181b0:	80bfffc4 	addi	r2,r16,-1
811181b4:	1021883a 	mov	r16,r2
811181b8:	1887c83a 	sub	r3,r3,r2
811181bc:	d8c02e15 	stw	r3,184(sp)
811181c0:	d8802e17 	ldw	r2,184(sp)
811181c4:	d9002917 	ldw	r4,164(sp)
811181c8:	1100010e 	bge	r2,r4,811181d0 <___vfprintf_internal_r+0x734>
811181cc:	2005883a 	mov	r2,r4
811181d0:	d8802a15 	stw	r2,168(sp)
811181d4:	d8003215 	stw	zero,200(sp)
811181d8:	e7003fcc 	andi	fp,fp,255
811181dc:	e700201c 	xori	fp,fp,128
811181e0:	e73fe004 	addi	fp,fp,-128
811181e4:	e0000326 	beq	fp,zero,811181f4 <___vfprintf_internal_r+0x758>
811181e8:	d8c02a17 	ldw	r3,168(sp)
811181ec:	18c00044 	addi	r3,r3,1
811181f0:	d8c02a15 	stw	r3,168(sp)
811181f4:	90c0008c 	andi	r3,r18,2
811181f8:	d8c02b15 	stw	r3,172(sp)
811181fc:	18000326 	beq	r3,zero,8111820c <___vfprintf_internal_r+0x770>
81118200:	d8c02a17 	ldw	r3,168(sp)
81118204:	18c00084 	addi	r3,r3,2
81118208:	d8c02a15 	stw	r3,168(sp)
8111820c:	90c0210c 	andi	r3,r18,132
81118210:	d8c03015 	stw	r3,192(sp)
81118214:	1801a31e 	bne	r3,zero,811188a4 <___vfprintf_internal_r+0xe08>
81118218:	d9003117 	ldw	r4,196(sp)
8111821c:	d8c02a17 	ldw	r3,168(sp)
81118220:	20e7c83a 	sub	r19,r4,r3
81118224:	04c19f0e 	bge	zero,r19,811188a4 <___vfprintf_internal_r+0xe08>
81118228:	02400404 	movi	r9,16
8111822c:	d8c02017 	ldw	r3,128(sp)
81118230:	d8801f17 	ldw	r2,124(sp)
81118234:	4cc50d0e 	bge	r9,r19,8111966c <___vfprintf_internal_r+0x1bd0>
81118238:	01604534 	movhi	r5,33044
8111823c:	2948b884 	addi	r5,r5,8930
81118240:	dc403b15 	stw	r17,236(sp)
81118244:	d9403515 	stw	r5,212(sp)
81118248:	9823883a 	mov	r17,r19
8111824c:	482d883a 	mov	r22,r9
81118250:	9027883a 	mov	r19,r18
81118254:	070001c4 	movi	fp,7
81118258:	8025883a 	mov	r18,r16
8111825c:	dc002c17 	ldw	r16,176(sp)
81118260:	00000306 	br	81118270 <___vfprintf_internal_r+0x7d4>
81118264:	8c7ffc04 	addi	r17,r17,-16
81118268:	42000204 	addi	r8,r8,8
8111826c:	b440130e 	bge	r22,r17,811182bc <___vfprintf_internal_r+0x820>
81118270:	01204534 	movhi	r4,33044
81118274:	18c00404 	addi	r3,r3,16
81118278:	10800044 	addi	r2,r2,1
8111827c:	2108b884 	addi	r4,r4,8930
81118280:	41000015 	stw	r4,0(r8)
81118284:	45800115 	stw	r22,4(r8)
81118288:	d8c02015 	stw	r3,128(sp)
8111828c:	d8801f15 	stw	r2,124(sp)
81118290:	e0bff40e 	bge	fp,r2,81118264 <__reset+0xfb0f8264>
81118294:	d9801e04 	addi	r6,sp,120
81118298:	b80b883a 	mov	r5,r23
8111829c:	8009883a 	mov	r4,r16
811182a0:	1123c8c0 	call	81123c8c <__sprint_r>
811182a4:	103f011e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811182a8:	8c7ffc04 	addi	r17,r17,-16
811182ac:	d8c02017 	ldw	r3,128(sp)
811182b0:	d8801f17 	ldw	r2,124(sp)
811182b4:	da000404 	addi	r8,sp,16
811182b8:	b47fed16 	blt	r22,r17,81118270 <__reset+0xfb0f8270>
811182bc:	9021883a 	mov	r16,r18
811182c0:	9825883a 	mov	r18,r19
811182c4:	8827883a 	mov	r19,r17
811182c8:	dc403b17 	ldw	r17,236(sp)
811182cc:	d9403517 	ldw	r5,212(sp)
811182d0:	98c7883a 	add	r3,r19,r3
811182d4:	10800044 	addi	r2,r2,1
811182d8:	41400015 	stw	r5,0(r8)
811182dc:	44c00115 	stw	r19,4(r8)
811182e0:	d8c02015 	stw	r3,128(sp)
811182e4:	d8801f15 	stw	r2,124(sp)
811182e8:	010001c4 	movi	r4,7
811182ec:	2082a316 	blt	r4,r2,81118d7c <___vfprintf_internal_r+0x12e0>
811182f0:	df002787 	ldb	fp,158(sp)
811182f4:	42000204 	addi	r8,r8,8
811182f8:	e0000c26 	beq	fp,zero,8111832c <___vfprintf_internal_r+0x890>
811182fc:	d8801f17 	ldw	r2,124(sp)
81118300:	d9002784 	addi	r4,sp,158
81118304:	18c00044 	addi	r3,r3,1
81118308:	10800044 	addi	r2,r2,1
8111830c:	41000015 	stw	r4,0(r8)
81118310:	01000044 	movi	r4,1
81118314:	41000115 	stw	r4,4(r8)
81118318:	d8c02015 	stw	r3,128(sp)
8111831c:	d8801f15 	stw	r2,124(sp)
81118320:	010001c4 	movi	r4,7
81118324:	20823c16 	blt	r4,r2,81118c18 <___vfprintf_internal_r+0x117c>
81118328:	42000204 	addi	r8,r8,8
8111832c:	d8802b17 	ldw	r2,172(sp)
81118330:	10000c26 	beq	r2,zero,81118364 <___vfprintf_internal_r+0x8c8>
81118334:	d8801f17 	ldw	r2,124(sp)
81118338:	d9002704 	addi	r4,sp,156
8111833c:	18c00084 	addi	r3,r3,2
81118340:	10800044 	addi	r2,r2,1
81118344:	41000015 	stw	r4,0(r8)
81118348:	01000084 	movi	r4,2
8111834c:	41000115 	stw	r4,4(r8)
81118350:	d8c02015 	stw	r3,128(sp)
81118354:	d8801f15 	stw	r2,124(sp)
81118358:	010001c4 	movi	r4,7
8111835c:	20823616 	blt	r4,r2,81118c38 <___vfprintf_internal_r+0x119c>
81118360:	42000204 	addi	r8,r8,8
81118364:	d9003017 	ldw	r4,192(sp)
81118368:	00802004 	movi	r2,128
8111836c:	20819926 	beq	r4,r2,811189d4 <___vfprintf_internal_r+0xf38>
81118370:	d9402917 	ldw	r5,164(sp)
81118374:	d8802e17 	ldw	r2,184(sp)
81118378:	28adc83a 	sub	r22,r5,r2
8111837c:	0580310e 	bge	zero,r22,81118444 <___vfprintf_internal_r+0x9a8>
81118380:	07000404 	movi	fp,16
81118384:	d8801f17 	ldw	r2,124(sp)
81118388:	e584140e 	bge	fp,r22,811193dc <___vfprintf_internal_r+0x1940>
8111838c:	01604534 	movhi	r5,33044
81118390:	2948b484 	addi	r5,r5,8914
81118394:	dc402915 	stw	r17,164(sp)
81118398:	d9402b15 	stw	r5,172(sp)
8111839c:	b023883a 	mov	r17,r22
811183a0:	04c001c4 	movi	r19,7
811183a4:	a82d883a 	mov	r22,r21
811183a8:	902b883a 	mov	r21,r18
811183ac:	8025883a 	mov	r18,r16
811183b0:	dc002c17 	ldw	r16,176(sp)
811183b4:	00000306 	br	811183c4 <___vfprintf_internal_r+0x928>
811183b8:	8c7ffc04 	addi	r17,r17,-16
811183bc:	42000204 	addi	r8,r8,8
811183c0:	e440110e 	bge	fp,r17,81118408 <___vfprintf_internal_r+0x96c>
811183c4:	18c00404 	addi	r3,r3,16
811183c8:	10800044 	addi	r2,r2,1
811183cc:	45000015 	stw	r20,0(r8)
811183d0:	47000115 	stw	fp,4(r8)
811183d4:	d8c02015 	stw	r3,128(sp)
811183d8:	d8801f15 	stw	r2,124(sp)
811183dc:	98bff60e 	bge	r19,r2,811183b8 <__reset+0xfb0f83b8>
811183e0:	d9801e04 	addi	r6,sp,120
811183e4:	b80b883a 	mov	r5,r23
811183e8:	8009883a 	mov	r4,r16
811183ec:	1123c8c0 	call	81123c8c <__sprint_r>
811183f0:	103eae1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811183f4:	8c7ffc04 	addi	r17,r17,-16
811183f8:	d8c02017 	ldw	r3,128(sp)
811183fc:	d8801f17 	ldw	r2,124(sp)
81118400:	da000404 	addi	r8,sp,16
81118404:	e47fef16 	blt	fp,r17,811183c4 <__reset+0xfb0f83c4>
81118408:	9021883a 	mov	r16,r18
8111840c:	a825883a 	mov	r18,r21
81118410:	b02b883a 	mov	r21,r22
81118414:	882d883a 	mov	r22,r17
81118418:	dc402917 	ldw	r17,164(sp)
8111841c:	d9002b17 	ldw	r4,172(sp)
81118420:	1d87883a 	add	r3,r3,r22
81118424:	10800044 	addi	r2,r2,1
81118428:	41000015 	stw	r4,0(r8)
8111842c:	45800115 	stw	r22,4(r8)
81118430:	d8c02015 	stw	r3,128(sp)
81118434:	d8801f15 	stw	r2,124(sp)
81118438:	010001c4 	movi	r4,7
8111843c:	2081ee16 	blt	r4,r2,81118bf8 <___vfprintf_internal_r+0x115c>
81118440:	42000204 	addi	r8,r8,8
81118444:	9080400c 	andi	r2,r18,256
81118448:	1001181e 	bne	r2,zero,811188ac <___vfprintf_internal_r+0xe10>
8111844c:	d9402e17 	ldw	r5,184(sp)
81118450:	d8801f17 	ldw	r2,124(sp)
81118454:	44000015 	stw	r16,0(r8)
81118458:	1947883a 	add	r3,r3,r5
8111845c:	10800044 	addi	r2,r2,1
81118460:	41400115 	stw	r5,4(r8)
81118464:	d8c02015 	stw	r3,128(sp)
81118468:	d8801f15 	stw	r2,124(sp)
8111846c:	010001c4 	movi	r4,7
81118470:	2081d316 	blt	r4,r2,81118bc0 <___vfprintf_internal_r+0x1124>
81118474:	42000204 	addi	r8,r8,8
81118478:	9480010c 	andi	r18,r18,4
8111847c:	90003226 	beq	r18,zero,81118548 <___vfprintf_internal_r+0xaac>
81118480:	d9403117 	ldw	r5,196(sp)
81118484:	d8802a17 	ldw	r2,168(sp)
81118488:	28a1c83a 	sub	r16,r5,r2
8111848c:	04002e0e 	bge	zero,r16,81118548 <___vfprintf_internal_r+0xaac>
81118490:	04400404 	movi	r17,16
81118494:	d8801f17 	ldw	r2,124(sp)
81118498:	8c04a20e 	bge	r17,r16,81119724 <___vfprintf_internal_r+0x1c88>
8111849c:	01604534 	movhi	r5,33044
811184a0:	2948b884 	addi	r5,r5,8930
811184a4:	d9403515 	stw	r5,212(sp)
811184a8:	048001c4 	movi	r18,7
811184ac:	dcc02c17 	ldw	r19,176(sp)
811184b0:	00000306 	br	811184c0 <___vfprintf_internal_r+0xa24>
811184b4:	843ffc04 	addi	r16,r16,-16
811184b8:	42000204 	addi	r8,r8,8
811184bc:	8c00130e 	bge	r17,r16,8111850c <___vfprintf_internal_r+0xa70>
811184c0:	01204534 	movhi	r4,33044
811184c4:	18c00404 	addi	r3,r3,16
811184c8:	10800044 	addi	r2,r2,1
811184cc:	2108b884 	addi	r4,r4,8930
811184d0:	41000015 	stw	r4,0(r8)
811184d4:	44400115 	stw	r17,4(r8)
811184d8:	d8c02015 	stw	r3,128(sp)
811184dc:	d8801f15 	stw	r2,124(sp)
811184e0:	90bff40e 	bge	r18,r2,811184b4 <__reset+0xfb0f84b4>
811184e4:	d9801e04 	addi	r6,sp,120
811184e8:	b80b883a 	mov	r5,r23
811184ec:	9809883a 	mov	r4,r19
811184f0:	1123c8c0 	call	81123c8c <__sprint_r>
811184f4:	103e6d1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811184f8:	843ffc04 	addi	r16,r16,-16
811184fc:	d8c02017 	ldw	r3,128(sp)
81118500:	d8801f17 	ldw	r2,124(sp)
81118504:	da000404 	addi	r8,sp,16
81118508:	8c3fed16 	blt	r17,r16,811184c0 <__reset+0xfb0f84c0>
8111850c:	d9403517 	ldw	r5,212(sp)
81118510:	1c07883a 	add	r3,r3,r16
81118514:	10800044 	addi	r2,r2,1
81118518:	41400015 	stw	r5,0(r8)
8111851c:	44000115 	stw	r16,4(r8)
81118520:	d8c02015 	stw	r3,128(sp)
81118524:	d8801f15 	stw	r2,124(sp)
81118528:	010001c4 	movi	r4,7
8111852c:	2080060e 	bge	r4,r2,81118548 <___vfprintf_internal_r+0xaac>
81118530:	d9002c17 	ldw	r4,176(sp)
81118534:	d9801e04 	addi	r6,sp,120
81118538:	b80b883a 	mov	r5,r23
8111853c:	1123c8c0 	call	81123c8c <__sprint_r>
81118540:	103e5a1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118544:	d8c02017 	ldw	r3,128(sp)
81118548:	d8803117 	ldw	r2,196(sp)
8111854c:	d9002a17 	ldw	r4,168(sp)
81118550:	1100010e 	bge	r2,r4,81118558 <___vfprintf_internal_r+0xabc>
81118554:	2005883a 	mov	r2,r4
81118558:	d9402f17 	ldw	r5,188(sp)
8111855c:	288b883a 	add	r5,r5,r2
81118560:	d9402f15 	stw	r5,188(sp)
81118564:	18019e1e 	bne	r3,zero,81118be0 <___vfprintf_internal_r+0x1144>
81118568:	a8800007 	ldb	r2,0(r21)
8111856c:	d8001f15 	stw	zero,124(sp)
81118570:	da000404 	addi	r8,sp,16
81118574:	103d851e 	bne	r2,zero,81117b8c <__reset+0xfb0f7b8c>
81118578:	a821883a 	mov	r16,r21
8111857c:	003d9b06 	br	81117bec <__reset+0xfb0f7bec>
81118580:	18c03fcc 	andi	r3,r3,255
81118584:	1805c11e 	bne	r3,zero,81119c8c <___vfprintf_internal_r+0x21f0>
81118588:	94800414 	ori	r18,r18,16
8111858c:	9080080c 	andi	r2,r18,32
81118590:	10020c26 	beq	r2,zero,81118dc4 <___vfprintf_internal_r+0x1328>
81118594:	d8802d17 	ldw	r2,180(sp)
81118598:	d9002917 	ldw	r4,164(sp)
8111859c:	d8002785 	stb	zero,158(sp)
811185a0:	10c00204 	addi	r3,r2,8
811185a4:	14c00017 	ldw	r19,0(r2)
811185a8:	15800117 	ldw	r22,4(r2)
811185ac:	20040f16 	blt	r4,zero,811195ec <___vfprintf_internal_r+0x1b50>
811185b0:	013fdfc4 	movi	r4,-129
811185b4:	9d84b03a 	or	r2,r19,r22
811185b8:	d8c02d15 	stw	r3,180(sp)
811185bc:	9124703a 	and	r18,r18,r4
811185c0:	0039883a 	mov	fp,zero
811185c4:	103e891e 	bne	r2,zero,81117fec <__reset+0xfb0f7fec>
811185c8:	d9002917 	ldw	r4,164(sp)
811185cc:	2002c11e 	bne	r4,zero,811190d4 <___vfprintf_internal_r+0x1638>
811185d0:	d8002915 	stw	zero,164(sp)
811185d4:	d8002e15 	stw	zero,184(sp)
811185d8:	dc001e04 	addi	r16,sp,120
811185dc:	003ef806 	br	811181c0 <__reset+0xfb0f81c0>
811185e0:	18c03fcc 	andi	r3,r3,255
811185e4:	18059d1e 	bne	r3,zero,81119c5c <___vfprintf_internal_r+0x21c0>
811185e8:	01604534 	movhi	r5,33044
811185ec:	2948a004 	addi	r5,r5,8832
811185f0:	d9403915 	stw	r5,228(sp)
811185f4:	9080080c 	andi	r2,r18,32
811185f8:	10005226 	beq	r2,zero,81118744 <___vfprintf_internal_r+0xca8>
811185fc:	d8802d17 	ldw	r2,180(sp)
81118600:	14c00017 	ldw	r19,0(r2)
81118604:	15800117 	ldw	r22,4(r2)
81118608:	10800204 	addi	r2,r2,8
8111860c:	d8802d15 	stw	r2,180(sp)
81118610:	9080004c 	andi	r2,r18,1
81118614:	10019026 	beq	r2,zero,81118c58 <___vfprintf_internal_r+0x11bc>
81118618:	9d84b03a 	or	r2,r19,r22
8111861c:	10036926 	beq	r2,zero,811193c4 <___vfprintf_internal_r+0x1928>
81118620:	d8c02917 	ldw	r3,164(sp)
81118624:	00800c04 	movi	r2,48
81118628:	d8802705 	stb	r2,156(sp)
8111862c:	dc402745 	stb	r17,157(sp)
81118630:	d8002785 	stb	zero,158(sp)
81118634:	90800094 	ori	r2,r18,2
81118638:	18045d16 	blt	r3,zero,811197b0 <___vfprintf_internal_r+0x1d14>
8111863c:	00bfdfc4 	movi	r2,-129
81118640:	90a4703a 	and	r18,r18,r2
81118644:	94800094 	ori	r18,r18,2
81118648:	0039883a 	mov	fp,zero
8111864c:	d9003917 	ldw	r4,228(sp)
81118650:	dc001e04 	addi	r16,sp,120
81118654:	988003cc 	andi	r2,r19,15
81118658:	b006973a 	slli	r3,r22,28
8111865c:	2085883a 	add	r2,r4,r2
81118660:	9826d13a 	srli	r19,r19,4
81118664:	10800003 	ldbu	r2,0(r2)
81118668:	b02cd13a 	srli	r22,r22,4
8111866c:	843fffc4 	addi	r16,r16,-1
81118670:	1ce6b03a 	or	r19,r3,r19
81118674:	80800005 	stb	r2,0(r16)
81118678:	9d84b03a 	or	r2,r19,r22
8111867c:	103ff51e 	bne	r2,zero,81118654 <__reset+0xfb0f8654>
81118680:	d8c02817 	ldw	r3,160(sp)
81118684:	1c07c83a 	sub	r3,r3,r16
81118688:	d8c02e15 	stw	r3,184(sp)
8111868c:	003ecc06 	br	811181c0 <__reset+0xfb0f81c0>
81118690:	18c03fcc 	andi	r3,r3,255
81118694:	183e9f26 	beq	r3,zero,81118114 <__reset+0xfb0f8114>
81118698:	d9c02785 	stb	r7,158(sp)
8111869c:	003e9d06 	br	81118114 <__reset+0xfb0f8114>
811186a0:	00c00044 	movi	r3,1
811186a4:	01c00ac4 	movi	r7,43
811186a8:	ac400007 	ldb	r17,0(r21)
811186ac:	003d5e06 	br	81117c28 <__reset+0xfb0f7c28>
811186b0:	94800814 	ori	r18,r18,32
811186b4:	ac400007 	ldb	r17,0(r21)
811186b8:	003d5b06 	br	81117c28 <__reset+0xfb0f7c28>
811186bc:	d8c02d17 	ldw	r3,180(sp)
811186c0:	d8002785 	stb	zero,158(sp)
811186c4:	1c000017 	ldw	r16,0(r3)
811186c8:	1cc00104 	addi	r19,r3,4
811186cc:	80041926 	beq	r16,zero,81119734 <___vfprintf_internal_r+0x1c98>
811186d0:	d9002917 	ldw	r4,164(sp)
811186d4:	2003d016 	blt	r4,zero,81119618 <___vfprintf_internal_r+0x1b7c>
811186d8:	200d883a 	mov	r6,r4
811186dc:	000b883a 	mov	r5,zero
811186e0:	8009883a 	mov	r4,r16
811186e4:	da003d15 	stw	r8,244(sp)
811186e8:	111ea800 	call	8111ea80 <memchr>
811186ec:	da003d17 	ldw	r8,244(sp)
811186f0:	10045426 	beq	r2,zero,81119844 <___vfprintf_internal_r+0x1da8>
811186f4:	1405c83a 	sub	r2,r2,r16
811186f8:	d8802e15 	stw	r2,184(sp)
811186fc:	1003cc16 	blt	r2,zero,81119630 <___vfprintf_internal_r+0x1b94>
81118700:	df002783 	ldbu	fp,158(sp)
81118704:	d8802a15 	stw	r2,168(sp)
81118708:	dcc02d15 	stw	r19,180(sp)
8111870c:	d8002915 	stw	zero,164(sp)
81118710:	d8003215 	stw	zero,200(sp)
81118714:	003eb006 	br	811181d8 <__reset+0xfb0f81d8>
81118718:	18c03fcc 	andi	r3,r3,255
8111871c:	183f9b26 	beq	r3,zero,8111858c <__reset+0xfb0f858c>
81118720:	d9c02785 	stb	r7,158(sp)
81118724:	003f9906 	br	8111858c <__reset+0xfb0f858c>
81118728:	18c03fcc 	andi	r3,r3,255
8111872c:	1805551e 	bne	r3,zero,81119c84 <___vfprintf_internal_r+0x21e8>
81118730:	01604534 	movhi	r5,33044
81118734:	2948a504 	addi	r5,r5,8852
81118738:	d9403915 	stw	r5,228(sp)
8111873c:	9080080c 	andi	r2,r18,32
81118740:	103fae1e 	bne	r2,zero,811185fc <__reset+0xfb0f85fc>
81118744:	9080040c 	andi	r2,r18,16
81118748:	1002de26 	beq	r2,zero,811192c4 <___vfprintf_internal_r+0x1828>
8111874c:	d8c02d17 	ldw	r3,180(sp)
81118750:	002d883a 	mov	r22,zero
81118754:	1cc00017 	ldw	r19,0(r3)
81118758:	18c00104 	addi	r3,r3,4
8111875c:	d8c02d15 	stw	r3,180(sp)
81118760:	003fab06 	br	81118610 <__reset+0xfb0f8610>
81118764:	38803fcc 	andi	r2,r7,255
81118768:	1080201c 	xori	r2,r2,128
8111876c:	10bfe004 	addi	r2,r2,-128
81118770:	1002d21e 	bne	r2,zero,811192bc <___vfprintf_internal_r+0x1820>
81118774:	00c00044 	movi	r3,1
81118778:	01c00804 	movi	r7,32
8111877c:	ac400007 	ldb	r17,0(r21)
81118780:	003d2906 	br	81117c28 <__reset+0xfb0f7c28>
81118784:	94800054 	ori	r18,r18,1
81118788:	ac400007 	ldb	r17,0(r21)
8111878c:	003d2606 	br	81117c28 <__reset+0xfb0f7c28>
81118790:	18c03fcc 	andi	r3,r3,255
81118794:	183e0526 	beq	r3,zero,81117fac <__reset+0xfb0f7fac>
81118798:	d9c02785 	stb	r7,158(sp)
8111879c:	003e0306 	br	81117fac <__reset+0xfb0f7fac>
811187a0:	94801014 	ori	r18,r18,64
811187a4:	ac400007 	ldb	r17,0(r21)
811187a8:	003d1f06 	br	81117c28 <__reset+0xfb0f7c28>
811187ac:	ac400007 	ldb	r17,0(r21)
811187b0:	8a438726 	beq	r17,r9,811195d0 <___vfprintf_internal_r+0x1b34>
811187b4:	94800414 	ori	r18,r18,16
811187b8:	003d1b06 	br	81117c28 <__reset+0xfb0f7c28>
811187bc:	18c03fcc 	andi	r3,r3,255
811187c0:	1805341e 	bne	r3,zero,81119c94 <___vfprintf_internal_r+0x21f8>
811187c4:	9080080c 	andi	r2,r18,32
811187c8:	1002cd26 	beq	r2,zero,81119300 <___vfprintf_internal_r+0x1864>
811187cc:	d9402d17 	ldw	r5,180(sp)
811187d0:	d9002f17 	ldw	r4,188(sp)
811187d4:	28800017 	ldw	r2,0(r5)
811187d8:	2007d7fa 	srai	r3,r4,31
811187dc:	29400104 	addi	r5,r5,4
811187e0:	d9402d15 	stw	r5,180(sp)
811187e4:	11000015 	stw	r4,0(r2)
811187e8:	10c00115 	stw	r3,4(r2)
811187ec:	003ce506 	br	81117b84 <__reset+0xfb0f7b84>
811187f0:	d8c02d17 	ldw	r3,180(sp)
811187f4:	d9002d17 	ldw	r4,180(sp)
811187f8:	d8002785 	stb	zero,158(sp)
811187fc:	18800017 	ldw	r2,0(r3)
81118800:	21000104 	addi	r4,r4,4
81118804:	00c00044 	movi	r3,1
81118808:	d8c02a15 	stw	r3,168(sp)
8111880c:	d8801405 	stb	r2,80(sp)
81118810:	d9002d15 	stw	r4,180(sp)
81118814:	d8c02e15 	stw	r3,184(sp)
81118818:	d8002915 	stw	zero,164(sp)
8111881c:	d8003215 	stw	zero,200(sp)
81118820:	dc001404 	addi	r16,sp,80
81118824:	0039883a 	mov	fp,zero
81118828:	003e7206 	br	811181f4 <__reset+0xfb0f81f4>
8111882c:	01204534 	movhi	r4,33044
81118830:	2108a504 	addi	r4,r4,8852
81118834:	0039883a 	mov	fp,zero
81118838:	d9003915 	stw	r4,228(sp)
8111883c:	04401e04 	movi	r17,120
81118840:	003f8206 	br	8111864c <__reset+0xfb0f864c>
81118844:	18c03fcc 	andi	r3,r3,255
81118848:	1805061e 	bne	r3,zero,81119c64 <___vfprintf_internal_r+0x21c8>
8111884c:	883d9126 	beq	r17,zero,81117e94 <__reset+0xfb0f7e94>
81118850:	00c00044 	movi	r3,1
81118854:	d8c02a15 	stw	r3,168(sp)
81118858:	dc401405 	stb	r17,80(sp)
8111885c:	d8002785 	stb	zero,158(sp)
81118860:	003fec06 	br	81118814 <__reset+0xfb0f8814>
81118864:	01604534 	movhi	r5,33044
81118868:	2948a504 	addi	r5,r5,8852
8111886c:	d9403915 	stw	r5,228(sp)
81118870:	d8c02d15 	stw	r3,180(sp)
81118874:	1025883a 	mov	r18,r2
81118878:	04401e04 	movi	r17,120
8111887c:	9d84b03a 	or	r2,r19,r22
81118880:	1000fc1e 	bne	r2,zero,81118c74 <___vfprintf_internal_r+0x11d8>
81118884:	0039883a 	mov	fp,zero
81118888:	00800084 	movi	r2,2
8111888c:	10803fcc 	andi	r2,r2,255
81118890:	00c00044 	movi	r3,1
81118894:	10c20f26 	beq	r2,r3,811190d4 <___vfprintf_internal_r+0x1638>
81118898:	00c00084 	movi	r3,2
8111889c:	10fd6326 	beq	r2,r3,81117e2c <__reset+0xfb0f7e2c>
811188a0:	003e2d06 	br	81118158 <__reset+0xfb0f8158>
811188a4:	d8c02017 	ldw	r3,128(sp)
811188a8:	003e9306 	br	811182f8 <__reset+0xfb0f82f8>
811188ac:	00801944 	movi	r2,101
811188b0:	14407e0e 	bge	r2,r17,81118aac <___vfprintf_internal_r+0x1010>
811188b4:	d9003617 	ldw	r4,216(sp)
811188b8:	d9403817 	ldw	r5,224(sp)
811188bc:	000d883a 	mov	r6,zero
811188c0:	000f883a 	mov	r7,zero
811188c4:	d8c03c15 	stw	r3,240(sp)
811188c8:	da003d15 	stw	r8,244(sp)
811188cc:	11284d40 	call	811284d4 <__eqdf2>
811188d0:	d8c03c17 	ldw	r3,240(sp)
811188d4:	da003d17 	ldw	r8,244(sp)
811188d8:	1000f71e 	bne	r2,zero,81118cb8 <___vfprintf_internal_r+0x121c>
811188dc:	d8801f17 	ldw	r2,124(sp)
811188e0:	01204534 	movhi	r4,33044
811188e4:	2108ac04 	addi	r4,r4,8880
811188e8:	18c00044 	addi	r3,r3,1
811188ec:	10800044 	addi	r2,r2,1
811188f0:	41000015 	stw	r4,0(r8)
811188f4:	01000044 	movi	r4,1
811188f8:	41000115 	stw	r4,4(r8)
811188fc:	d8c02015 	stw	r3,128(sp)
81118900:	d8801f15 	stw	r2,124(sp)
81118904:	010001c4 	movi	r4,7
81118908:	2082b816 	blt	r4,r2,811193ec <___vfprintf_internal_r+0x1950>
8111890c:	42000204 	addi	r8,r8,8
81118910:	d8802617 	ldw	r2,152(sp)
81118914:	d9403317 	ldw	r5,204(sp)
81118918:	11400216 	blt	r2,r5,81118924 <___vfprintf_internal_r+0xe88>
8111891c:	9080004c 	andi	r2,r18,1
81118920:	103ed526 	beq	r2,zero,81118478 <__reset+0xfb0f8478>
81118924:	d8803717 	ldw	r2,220(sp)
81118928:	d9003417 	ldw	r4,208(sp)
8111892c:	d9403717 	ldw	r5,220(sp)
81118930:	1887883a 	add	r3,r3,r2
81118934:	d8801f17 	ldw	r2,124(sp)
81118938:	41000015 	stw	r4,0(r8)
8111893c:	41400115 	stw	r5,4(r8)
81118940:	10800044 	addi	r2,r2,1
81118944:	d8c02015 	stw	r3,128(sp)
81118948:	d8801f15 	stw	r2,124(sp)
8111894c:	010001c4 	movi	r4,7
81118950:	20832916 	blt	r4,r2,811195f8 <___vfprintf_internal_r+0x1b5c>
81118954:	42000204 	addi	r8,r8,8
81118958:	d8803317 	ldw	r2,204(sp)
8111895c:	143fffc4 	addi	r16,r2,-1
81118960:	043ec50e 	bge	zero,r16,81118478 <__reset+0xfb0f8478>
81118964:	04400404 	movi	r17,16
81118968:	d8801f17 	ldw	r2,124(sp)
8111896c:	8c00880e 	bge	r17,r16,81118b90 <___vfprintf_internal_r+0x10f4>
81118970:	01604534 	movhi	r5,33044
81118974:	2948b484 	addi	r5,r5,8914
81118978:	d9402b15 	stw	r5,172(sp)
8111897c:	058001c4 	movi	r22,7
81118980:	dcc02c17 	ldw	r19,176(sp)
81118984:	00000306 	br	81118994 <___vfprintf_internal_r+0xef8>
81118988:	42000204 	addi	r8,r8,8
8111898c:	843ffc04 	addi	r16,r16,-16
81118990:	8c00820e 	bge	r17,r16,81118b9c <___vfprintf_internal_r+0x1100>
81118994:	18c00404 	addi	r3,r3,16
81118998:	10800044 	addi	r2,r2,1
8111899c:	45000015 	stw	r20,0(r8)
811189a0:	44400115 	stw	r17,4(r8)
811189a4:	d8c02015 	stw	r3,128(sp)
811189a8:	d8801f15 	stw	r2,124(sp)
811189ac:	b0bff60e 	bge	r22,r2,81118988 <__reset+0xfb0f8988>
811189b0:	d9801e04 	addi	r6,sp,120
811189b4:	b80b883a 	mov	r5,r23
811189b8:	9809883a 	mov	r4,r19
811189bc:	1123c8c0 	call	81123c8c <__sprint_r>
811189c0:	103d3a1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811189c4:	d8c02017 	ldw	r3,128(sp)
811189c8:	d8801f17 	ldw	r2,124(sp)
811189cc:	da000404 	addi	r8,sp,16
811189d0:	003fee06 	br	8111898c <__reset+0xfb0f898c>
811189d4:	d9403117 	ldw	r5,196(sp)
811189d8:	d8802a17 	ldw	r2,168(sp)
811189dc:	28adc83a 	sub	r22,r5,r2
811189e0:	05be630e 	bge	zero,r22,81118370 <__reset+0xfb0f8370>
811189e4:	07000404 	movi	fp,16
811189e8:	d8801f17 	ldw	r2,124(sp)
811189ec:	e5838f0e 	bge	fp,r22,8111982c <___vfprintf_internal_r+0x1d90>
811189f0:	01604534 	movhi	r5,33044
811189f4:	2948b484 	addi	r5,r5,8914
811189f8:	dc403015 	stw	r17,192(sp)
811189fc:	d9402b15 	stw	r5,172(sp)
81118a00:	b023883a 	mov	r17,r22
81118a04:	04c001c4 	movi	r19,7
81118a08:	a82d883a 	mov	r22,r21
81118a0c:	902b883a 	mov	r21,r18
81118a10:	8025883a 	mov	r18,r16
81118a14:	dc002c17 	ldw	r16,176(sp)
81118a18:	00000306 	br	81118a28 <___vfprintf_internal_r+0xf8c>
81118a1c:	8c7ffc04 	addi	r17,r17,-16
81118a20:	42000204 	addi	r8,r8,8
81118a24:	e440110e 	bge	fp,r17,81118a6c <___vfprintf_internal_r+0xfd0>
81118a28:	18c00404 	addi	r3,r3,16
81118a2c:	10800044 	addi	r2,r2,1
81118a30:	45000015 	stw	r20,0(r8)
81118a34:	47000115 	stw	fp,4(r8)
81118a38:	d8c02015 	stw	r3,128(sp)
81118a3c:	d8801f15 	stw	r2,124(sp)
81118a40:	98bff60e 	bge	r19,r2,81118a1c <__reset+0xfb0f8a1c>
81118a44:	d9801e04 	addi	r6,sp,120
81118a48:	b80b883a 	mov	r5,r23
81118a4c:	8009883a 	mov	r4,r16
81118a50:	1123c8c0 	call	81123c8c <__sprint_r>
81118a54:	103d151e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118a58:	8c7ffc04 	addi	r17,r17,-16
81118a5c:	d8c02017 	ldw	r3,128(sp)
81118a60:	d8801f17 	ldw	r2,124(sp)
81118a64:	da000404 	addi	r8,sp,16
81118a68:	e47fef16 	blt	fp,r17,81118a28 <__reset+0xfb0f8a28>
81118a6c:	9021883a 	mov	r16,r18
81118a70:	a825883a 	mov	r18,r21
81118a74:	b02b883a 	mov	r21,r22
81118a78:	882d883a 	mov	r22,r17
81118a7c:	dc403017 	ldw	r17,192(sp)
81118a80:	d9002b17 	ldw	r4,172(sp)
81118a84:	1d87883a 	add	r3,r3,r22
81118a88:	10800044 	addi	r2,r2,1
81118a8c:	41000015 	stw	r4,0(r8)
81118a90:	45800115 	stw	r22,4(r8)
81118a94:	d8c02015 	stw	r3,128(sp)
81118a98:	d8801f15 	stw	r2,124(sp)
81118a9c:	010001c4 	movi	r4,7
81118aa0:	20818e16 	blt	r4,r2,811190dc <___vfprintf_internal_r+0x1640>
81118aa4:	42000204 	addi	r8,r8,8
81118aa8:	003e3106 	br	81118370 <__reset+0xfb0f8370>
81118aac:	d9403317 	ldw	r5,204(sp)
81118ab0:	00800044 	movi	r2,1
81118ab4:	18c00044 	addi	r3,r3,1
81118ab8:	1141530e 	bge	r2,r5,81119008 <___vfprintf_internal_r+0x156c>
81118abc:	dc401f17 	ldw	r17,124(sp)
81118ac0:	00800044 	movi	r2,1
81118ac4:	40800115 	stw	r2,4(r8)
81118ac8:	8c400044 	addi	r17,r17,1
81118acc:	44000015 	stw	r16,0(r8)
81118ad0:	d8c02015 	stw	r3,128(sp)
81118ad4:	dc401f15 	stw	r17,124(sp)
81118ad8:	008001c4 	movi	r2,7
81118adc:	14416b16 	blt	r2,r17,8111908c <___vfprintf_internal_r+0x15f0>
81118ae0:	42000204 	addi	r8,r8,8
81118ae4:	d8803717 	ldw	r2,220(sp)
81118ae8:	d9003417 	ldw	r4,208(sp)
81118aec:	8c400044 	addi	r17,r17,1
81118af0:	10c7883a 	add	r3,r2,r3
81118af4:	40800115 	stw	r2,4(r8)
81118af8:	41000015 	stw	r4,0(r8)
81118afc:	d8c02015 	stw	r3,128(sp)
81118b00:	dc401f15 	stw	r17,124(sp)
81118b04:	008001c4 	movi	r2,7
81118b08:	14416916 	blt	r2,r17,811190b0 <___vfprintf_internal_r+0x1614>
81118b0c:	45800204 	addi	r22,r8,8
81118b10:	d9003617 	ldw	r4,216(sp)
81118b14:	d9403817 	ldw	r5,224(sp)
81118b18:	000d883a 	mov	r6,zero
81118b1c:	000f883a 	mov	r7,zero
81118b20:	d8c03c15 	stw	r3,240(sp)
81118b24:	11284d40 	call	811284d4 <__eqdf2>
81118b28:	d8c03c17 	ldw	r3,240(sp)
81118b2c:	1000bc26 	beq	r2,zero,81118e20 <___vfprintf_internal_r+0x1384>
81118b30:	d9403317 	ldw	r5,204(sp)
81118b34:	84000044 	addi	r16,r16,1
81118b38:	8c400044 	addi	r17,r17,1
81118b3c:	28bfffc4 	addi	r2,r5,-1
81118b40:	1887883a 	add	r3,r3,r2
81118b44:	b0800115 	stw	r2,4(r22)
81118b48:	b4000015 	stw	r16,0(r22)
81118b4c:	d8c02015 	stw	r3,128(sp)
81118b50:	dc401f15 	stw	r17,124(sp)
81118b54:	008001c4 	movi	r2,7
81118b58:	14414316 	blt	r2,r17,81119068 <___vfprintf_internal_r+0x15cc>
81118b5c:	b5800204 	addi	r22,r22,8
81118b60:	d9003a17 	ldw	r4,232(sp)
81118b64:	df0022c4 	addi	fp,sp,139
81118b68:	8c400044 	addi	r17,r17,1
81118b6c:	20c7883a 	add	r3,r4,r3
81118b70:	b7000015 	stw	fp,0(r22)
81118b74:	b1000115 	stw	r4,4(r22)
81118b78:	d8c02015 	stw	r3,128(sp)
81118b7c:	dc401f15 	stw	r17,124(sp)
81118b80:	008001c4 	movi	r2,7
81118b84:	14400e16 	blt	r2,r17,81118bc0 <___vfprintf_internal_r+0x1124>
81118b88:	b2000204 	addi	r8,r22,8
81118b8c:	003e3a06 	br	81118478 <__reset+0xfb0f8478>
81118b90:	01204534 	movhi	r4,33044
81118b94:	2108b484 	addi	r4,r4,8914
81118b98:	d9002b15 	stw	r4,172(sp)
81118b9c:	d9002b17 	ldw	r4,172(sp)
81118ba0:	1c07883a 	add	r3,r3,r16
81118ba4:	44000115 	stw	r16,4(r8)
81118ba8:	41000015 	stw	r4,0(r8)
81118bac:	10800044 	addi	r2,r2,1
81118bb0:	d8c02015 	stw	r3,128(sp)
81118bb4:	d8801f15 	stw	r2,124(sp)
81118bb8:	010001c4 	movi	r4,7
81118bbc:	20be2d0e 	bge	r4,r2,81118474 <__reset+0xfb0f8474>
81118bc0:	d9002c17 	ldw	r4,176(sp)
81118bc4:	d9801e04 	addi	r6,sp,120
81118bc8:	b80b883a 	mov	r5,r23
81118bcc:	1123c8c0 	call	81123c8c <__sprint_r>
81118bd0:	103cb61e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118bd4:	d8c02017 	ldw	r3,128(sp)
81118bd8:	da000404 	addi	r8,sp,16
81118bdc:	003e2606 	br	81118478 <__reset+0xfb0f8478>
81118be0:	d9002c17 	ldw	r4,176(sp)
81118be4:	d9801e04 	addi	r6,sp,120
81118be8:	b80b883a 	mov	r5,r23
81118bec:	1123c8c0 	call	81123c8c <__sprint_r>
81118bf0:	103e5d26 	beq	r2,zero,81118568 <__reset+0xfb0f8568>
81118bf4:	003cad06 	br	81117eac <__reset+0xfb0f7eac>
81118bf8:	d9002c17 	ldw	r4,176(sp)
81118bfc:	d9801e04 	addi	r6,sp,120
81118c00:	b80b883a 	mov	r5,r23
81118c04:	1123c8c0 	call	81123c8c <__sprint_r>
81118c08:	103ca81e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118c0c:	d8c02017 	ldw	r3,128(sp)
81118c10:	da000404 	addi	r8,sp,16
81118c14:	003e0b06 	br	81118444 <__reset+0xfb0f8444>
81118c18:	d9002c17 	ldw	r4,176(sp)
81118c1c:	d9801e04 	addi	r6,sp,120
81118c20:	b80b883a 	mov	r5,r23
81118c24:	1123c8c0 	call	81123c8c <__sprint_r>
81118c28:	103ca01e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118c2c:	d8c02017 	ldw	r3,128(sp)
81118c30:	da000404 	addi	r8,sp,16
81118c34:	003dbd06 	br	8111832c <__reset+0xfb0f832c>
81118c38:	d9002c17 	ldw	r4,176(sp)
81118c3c:	d9801e04 	addi	r6,sp,120
81118c40:	b80b883a 	mov	r5,r23
81118c44:	1123c8c0 	call	81123c8c <__sprint_r>
81118c48:	103c981e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118c4c:	d8c02017 	ldw	r3,128(sp)
81118c50:	da000404 	addi	r8,sp,16
81118c54:	003dc306 	br	81118364 <__reset+0xfb0f8364>
81118c58:	d8802917 	ldw	r2,164(sp)
81118c5c:	d8002785 	stb	zero,158(sp)
81118c60:	103f0616 	blt	r2,zero,8111887c <__reset+0xfb0f887c>
81118c64:	00ffdfc4 	movi	r3,-129
81118c68:	9d84b03a 	or	r2,r19,r22
81118c6c:	90e4703a 	and	r18,r18,r3
81118c70:	103c6b26 	beq	r2,zero,81117e20 <__reset+0xfb0f7e20>
81118c74:	0039883a 	mov	fp,zero
81118c78:	003e7406 	br	8111864c <__reset+0xfb0f864c>
81118c7c:	9080040c 	andi	r2,r18,16
81118c80:	1001b326 	beq	r2,zero,81119350 <___vfprintf_internal_r+0x18b4>
81118c84:	d9002d17 	ldw	r4,180(sp)
81118c88:	d9402917 	ldw	r5,164(sp)
81118c8c:	d8002785 	stb	zero,158(sp)
81118c90:	20800104 	addi	r2,r4,4
81118c94:	24c00017 	ldw	r19,0(r4)
81118c98:	002d883a 	mov	r22,zero
81118c9c:	2801b516 	blt	r5,zero,81119374 <___vfprintf_internal_r+0x18d8>
81118ca0:	00ffdfc4 	movi	r3,-129
81118ca4:	d8802d15 	stw	r2,180(sp)
81118ca8:	90e4703a 	and	r18,r18,r3
81118cac:	983d2726 	beq	r19,zero,8111814c <__reset+0xfb0f814c>
81118cb0:	0039883a 	mov	fp,zero
81118cb4:	003d2a06 	br	81118160 <__reset+0xfb0f8160>
81118cb8:	dc402617 	ldw	r17,152(sp)
81118cbc:	0441d30e 	bge	zero,r17,8111940c <___vfprintf_internal_r+0x1970>
81118cc0:	dc403217 	ldw	r17,200(sp)
81118cc4:	d8803317 	ldw	r2,204(sp)
81118cc8:	1440010e 	bge	r2,r17,81118cd0 <___vfprintf_internal_r+0x1234>
81118ccc:	1023883a 	mov	r17,r2
81118cd0:	04400a0e 	bge	zero,r17,81118cfc <___vfprintf_internal_r+0x1260>
81118cd4:	d8801f17 	ldw	r2,124(sp)
81118cd8:	1c47883a 	add	r3,r3,r17
81118cdc:	44000015 	stw	r16,0(r8)
81118ce0:	10800044 	addi	r2,r2,1
81118ce4:	44400115 	stw	r17,4(r8)
81118ce8:	d8c02015 	stw	r3,128(sp)
81118cec:	d8801f15 	stw	r2,124(sp)
81118cf0:	010001c4 	movi	r4,7
81118cf4:	20826516 	blt	r4,r2,8111968c <___vfprintf_internal_r+0x1bf0>
81118cf8:	42000204 	addi	r8,r8,8
81118cfc:	88026116 	blt	r17,zero,81119684 <___vfprintf_internal_r+0x1be8>
81118d00:	d9003217 	ldw	r4,200(sp)
81118d04:	2463c83a 	sub	r17,r4,r17
81118d08:	04407b0e 	bge	zero,r17,81118ef8 <___vfprintf_internal_r+0x145c>
81118d0c:	05800404 	movi	r22,16
81118d10:	d8801f17 	ldw	r2,124(sp)
81118d14:	b4419d0e 	bge	r22,r17,8111938c <___vfprintf_internal_r+0x18f0>
81118d18:	01204534 	movhi	r4,33044
81118d1c:	2108b484 	addi	r4,r4,8914
81118d20:	d9002b15 	stw	r4,172(sp)
81118d24:	070001c4 	movi	fp,7
81118d28:	dcc02c17 	ldw	r19,176(sp)
81118d2c:	00000306 	br	81118d3c <___vfprintf_internal_r+0x12a0>
81118d30:	42000204 	addi	r8,r8,8
81118d34:	8c7ffc04 	addi	r17,r17,-16
81118d38:	b441970e 	bge	r22,r17,81119398 <___vfprintf_internal_r+0x18fc>
81118d3c:	18c00404 	addi	r3,r3,16
81118d40:	10800044 	addi	r2,r2,1
81118d44:	45000015 	stw	r20,0(r8)
81118d48:	45800115 	stw	r22,4(r8)
81118d4c:	d8c02015 	stw	r3,128(sp)
81118d50:	d8801f15 	stw	r2,124(sp)
81118d54:	e0bff60e 	bge	fp,r2,81118d30 <__reset+0xfb0f8d30>
81118d58:	d9801e04 	addi	r6,sp,120
81118d5c:	b80b883a 	mov	r5,r23
81118d60:	9809883a 	mov	r4,r19
81118d64:	1123c8c0 	call	81123c8c <__sprint_r>
81118d68:	103c501e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118d6c:	d8c02017 	ldw	r3,128(sp)
81118d70:	d8801f17 	ldw	r2,124(sp)
81118d74:	da000404 	addi	r8,sp,16
81118d78:	003fee06 	br	81118d34 <__reset+0xfb0f8d34>
81118d7c:	d9002c17 	ldw	r4,176(sp)
81118d80:	d9801e04 	addi	r6,sp,120
81118d84:	b80b883a 	mov	r5,r23
81118d88:	1123c8c0 	call	81123c8c <__sprint_r>
81118d8c:	103c471e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118d90:	d8c02017 	ldw	r3,128(sp)
81118d94:	df002787 	ldb	fp,158(sp)
81118d98:	da000404 	addi	r8,sp,16
81118d9c:	003d5606 	br	811182f8 <__reset+0xfb0f82f8>
81118da0:	9080040c 	andi	r2,r18,16
81118da4:	10016126 	beq	r2,zero,8111932c <___vfprintf_internal_r+0x1890>
81118da8:	d8802d17 	ldw	r2,180(sp)
81118dac:	14c00017 	ldw	r19,0(r2)
81118db0:	10800104 	addi	r2,r2,4
81118db4:	d8802d15 	stw	r2,180(sp)
81118db8:	982dd7fa 	srai	r22,r19,31
81118dbc:	b005883a 	mov	r2,r22
81118dc0:	003c8206 	br	81117fcc <__reset+0xfb0f7fcc>
81118dc4:	9080040c 	andi	r2,r18,16
81118dc8:	10003526 	beq	r2,zero,81118ea0 <___vfprintf_internal_r+0x1404>
81118dcc:	d9402d17 	ldw	r5,180(sp)
81118dd0:	d8c02917 	ldw	r3,164(sp)
81118dd4:	d8002785 	stb	zero,158(sp)
81118dd8:	28800104 	addi	r2,r5,4
81118ddc:	2cc00017 	ldw	r19,0(r5)
81118de0:	002d883a 	mov	r22,zero
81118de4:	18003716 	blt	r3,zero,81118ec4 <___vfprintf_internal_r+0x1428>
81118de8:	00ffdfc4 	movi	r3,-129
81118dec:	d8802d15 	stw	r2,180(sp)
81118df0:	90e4703a 	and	r18,r18,r3
81118df4:	0039883a 	mov	fp,zero
81118df8:	983df326 	beq	r19,zero,811185c8 <__reset+0xfb0f85c8>
81118dfc:	00800244 	movi	r2,9
81118e00:	14fc7b36 	bltu	r2,r19,81117ff0 <__reset+0xfb0f7ff0>
81118e04:	d8c02817 	ldw	r3,160(sp)
81118e08:	dc001dc4 	addi	r16,sp,119
81118e0c:	9cc00c04 	addi	r19,r19,48
81118e10:	1c07c83a 	sub	r3,r3,r16
81118e14:	dcc01dc5 	stb	r19,119(sp)
81118e18:	d8c02e15 	stw	r3,184(sp)
81118e1c:	003ce806 	br	811181c0 <__reset+0xfb0f81c0>
81118e20:	d8803317 	ldw	r2,204(sp)
81118e24:	143fffc4 	addi	r16,r2,-1
81118e28:	043f4d0e 	bge	zero,r16,81118b60 <__reset+0xfb0f8b60>
81118e2c:	07000404 	movi	fp,16
81118e30:	e400810e 	bge	fp,r16,81119038 <___vfprintf_internal_r+0x159c>
81118e34:	01604534 	movhi	r5,33044
81118e38:	2948b484 	addi	r5,r5,8914
81118e3c:	d9402b15 	stw	r5,172(sp)
81118e40:	01c001c4 	movi	r7,7
81118e44:	dcc02c17 	ldw	r19,176(sp)
81118e48:	00000306 	br	81118e58 <___vfprintf_internal_r+0x13bc>
81118e4c:	b5800204 	addi	r22,r22,8
81118e50:	843ffc04 	addi	r16,r16,-16
81118e54:	e4007b0e 	bge	fp,r16,81119044 <___vfprintf_internal_r+0x15a8>
81118e58:	18c00404 	addi	r3,r3,16
81118e5c:	8c400044 	addi	r17,r17,1
81118e60:	b5000015 	stw	r20,0(r22)
81118e64:	b7000115 	stw	fp,4(r22)
81118e68:	d8c02015 	stw	r3,128(sp)
81118e6c:	dc401f15 	stw	r17,124(sp)
81118e70:	3c7ff60e 	bge	r7,r17,81118e4c <__reset+0xfb0f8e4c>
81118e74:	d9801e04 	addi	r6,sp,120
81118e78:	b80b883a 	mov	r5,r23
81118e7c:	9809883a 	mov	r4,r19
81118e80:	d9c03c15 	stw	r7,240(sp)
81118e84:	1123c8c0 	call	81123c8c <__sprint_r>
81118e88:	d9c03c17 	ldw	r7,240(sp)
81118e8c:	103c071e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118e90:	d8c02017 	ldw	r3,128(sp)
81118e94:	dc401f17 	ldw	r17,124(sp)
81118e98:	dd800404 	addi	r22,sp,16
81118e9c:	003fec06 	br	81118e50 <__reset+0xfb0f8e50>
81118ea0:	9080100c 	andi	r2,r18,64
81118ea4:	d8002785 	stb	zero,158(sp)
81118ea8:	10010e26 	beq	r2,zero,811192e4 <___vfprintf_internal_r+0x1848>
81118eac:	d9002d17 	ldw	r4,180(sp)
81118eb0:	d9402917 	ldw	r5,164(sp)
81118eb4:	002d883a 	mov	r22,zero
81118eb8:	20800104 	addi	r2,r4,4
81118ebc:	24c0000b 	ldhu	r19,0(r4)
81118ec0:	283fc90e 	bge	r5,zero,81118de8 <__reset+0xfb0f8de8>
81118ec4:	d8802d15 	stw	r2,180(sp)
81118ec8:	0039883a 	mov	fp,zero
81118ecc:	9d84b03a 	or	r2,r19,r22
81118ed0:	103c461e 	bne	r2,zero,81117fec <__reset+0xfb0f7fec>
81118ed4:	00800044 	movi	r2,1
81118ed8:	003e6c06 	br	8111888c <__reset+0xfb0f888c>
81118edc:	d9002c17 	ldw	r4,176(sp)
81118ee0:	d9801e04 	addi	r6,sp,120
81118ee4:	b80b883a 	mov	r5,r23
81118ee8:	1123c8c0 	call	81123c8c <__sprint_r>
81118eec:	103bef1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118ef0:	d8c02017 	ldw	r3,128(sp)
81118ef4:	da000404 	addi	r8,sp,16
81118ef8:	d9003217 	ldw	r4,200(sp)
81118efc:	d8802617 	ldw	r2,152(sp)
81118f00:	d9403317 	ldw	r5,204(sp)
81118f04:	8123883a 	add	r17,r16,r4
81118f08:	11400216 	blt	r2,r5,81118f14 <___vfprintf_internal_r+0x1478>
81118f0c:	9100004c 	andi	r4,r18,1
81118f10:	20000d26 	beq	r4,zero,81118f48 <___vfprintf_internal_r+0x14ac>
81118f14:	d9003717 	ldw	r4,220(sp)
81118f18:	d9403417 	ldw	r5,208(sp)
81118f1c:	1907883a 	add	r3,r3,r4
81118f20:	d9001f17 	ldw	r4,124(sp)
81118f24:	41400015 	stw	r5,0(r8)
81118f28:	d9403717 	ldw	r5,220(sp)
81118f2c:	21000044 	addi	r4,r4,1
81118f30:	d8c02015 	stw	r3,128(sp)
81118f34:	41400115 	stw	r5,4(r8)
81118f38:	d9001f15 	stw	r4,124(sp)
81118f3c:	014001c4 	movi	r5,7
81118f40:	2901e816 	blt	r5,r4,811196e4 <___vfprintf_internal_r+0x1c48>
81118f44:	42000204 	addi	r8,r8,8
81118f48:	d9003317 	ldw	r4,204(sp)
81118f4c:	8121883a 	add	r16,r16,r4
81118f50:	2085c83a 	sub	r2,r4,r2
81118f54:	8461c83a 	sub	r16,r16,r17
81118f58:	1400010e 	bge	r2,r16,81118f60 <___vfprintf_internal_r+0x14c4>
81118f5c:	1021883a 	mov	r16,r2
81118f60:	04000a0e 	bge	zero,r16,81118f8c <___vfprintf_internal_r+0x14f0>
81118f64:	d9001f17 	ldw	r4,124(sp)
81118f68:	1c07883a 	add	r3,r3,r16
81118f6c:	44400015 	stw	r17,0(r8)
81118f70:	21000044 	addi	r4,r4,1
81118f74:	44000115 	stw	r16,4(r8)
81118f78:	d8c02015 	stw	r3,128(sp)
81118f7c:	d9001f15 	stw	r4,124(sp)
81118f80:	014001c4 	movi	r5,7
81118f84:	2901fb16 	blt	r5,r4,81119774 <___vfprintf_internal_r+0x1cd8>
81118f88:	42000204 	addi	r8,r8,8
81118f8c:	8001f716 	blt	r16,zero,8111976c <___vfprintf_internal_r+0x1cd0>
81118f90:	1421c83a 	sub	r16,r2,r16
81118f94:	043d380e 	bge	zero,r16,81118478 <__reset+0xfb0f8478>
81118f98:	04400404 	movi	r17,16
81118f9c:	d8801f17 	ldw	r2,124(sp)
81118fa0:	8c3efb0e 	bge	r17,r16,81118b90 <__reset+0xfb0f8b90>
81118fa4:	01604534 	movhi	r5,33044
81118fa8:	2948b484 	addi	r5,r5,8914
81118fac:	d9402b15 	stw	r5,172(sp)
81118fb0:	058001c4 	movi	r22,7
81118fb4:	dcc02c17 	ldw	r19,176(sp)
81118fb8:	00000306 	br	81118fc8 <___vfprintf_internal_r+0x152c>
81118fbc:	42000204 	addi	r8,r8,8
81118fc0:	843ffc04 	addi	r16,r16,-16
81118fc4:	8c3ef50e 	bge	r17,r16,81118b9c <__reset+0xfb0f8b9c>
81118fc8:	18c00404 	addi	r3,r3,16
81118fcc:	10800044 	addi	r2,r2,1
81118fd0:	45000015 	stw	r20,0(r8)
81118fd4:	44400115 	stw	r17,4(r8)
81118fd8:	d8c02015 	stw	r3,128(sp)
81118fdc:	d8801f15 	stw	r2,124(sp)
81118fe0:	b0bff60e 	bge	r22,r2,81118fbc <__reset+0xfb0f8fbc>
81118fe4:	d9801e04 	addi	r6,sp,120
81118fe8:	b80b883a 	mov	r5,r23
81118fec:	9809883a 	mov	r4,r19
81118ff0:	1123c8c0 	call	81123c8c <__sprint_r>
81118ff4:	103bad1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81118ff8:	d8c02017 	ldw	r3,128(sp)
81118ffc:	d8801f17 	ldw	r2,124(sp)
81119000:	da000404 	addi	r8,sp,16
81119004:	003fee06 	br	81118fc0 <__reset+0xfb0f8fc0>
81119008:	9088703a 	and	r4,r18,r2
8111900c:	203eab1e 	bne	r4,zero,81118abc <__reset+0xfb0f8abc>
81119010:	dc401f17 	ldw	r17,124(sp)
81119014:	40800115 	stw	r2,4(r8)
81119018:	44000015 	stw	r16,0(r8)
8111901c:	8c400044 	addi	r17,r17,1
81119020:	d8c02015 	stw	r3,128(sp)
81119024:	dc401f15 	stw	r17,124(sp)
81119028:	008001c4 	movi	r2,7
8111902c:	14400e16 	blt	r2,r17,81119068 <___vfprintf_internal_r+0x15cc>
81119030:	45800204 	addi	r22,r8,8
81119034:	003eca06 	br	81118b60 <__reset+0xfb0f8b60>
81119038:	01204534 	movhi	r4,33044
8111903c:	2108b484 	addi	r4,r4,8914
81119040:	d9002b15 	stw	r4,172(sp)
81119044:	d8802b17 	ldw	r2,172(sp)
81119048:	1c07883a 	add	r3,r3,r16
8111904c:	8c400044 	addi	r17,r17,1
81119050:	b0800015 	stw	r2,0(r22)
81119054:	b4000115 	stw	r16,4(r22)
81119058:	d8c02015 	stw	r3,128(sp)
8111905c:	dc401f15 	stw	r17,124(sp)
81119060:	008001c4 	movi	r2,7
81119064:	147ebd0e 	bge	r2,r17,81118b5c <__reset+0xfb0f8b5c>
81119068:	d9002c17 	ldw	r4,176(sp)
8111906c:	d9801e04 	addi	r6,sp,120
81119070:	b80b883a 	mov	r5,r23
81119074:	1123c8c0 	call	81123c8c <__sprint_r>
81119078:	103b8c1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
8111907c:	d8c02017 	ldw	r3,128(sp)
81119080:	dc401f17 	ldw	r17,124(sp)
81119084:	dd800404 	addi	r22,sp,16
81119088:	003eb506 	br	81118b60 <__reset+0xfb0f8b60>
8111908c:	d9002c17 	ldw	r4,176(sp)
81119090:	d9801e04 	addi	r6,sp,120
81119094:	b80b883a 	mov	r5,r23
81119098:	1123c8c0 	call	81123c8c <__sprint_r>
8111909c:	103b831e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811190a0:	d8c02017 	ldw	r3,128(sp)
811190a4:	dc401f17 	ldw	r17,124(sp)
811190a8:	da000404 	addi	r8,sp,16
811190ac:	003e8d06 	br	81118ae4 <__reset+0xfb0f8ae4>
811190b0:	d9002c17 	ldw	r4,176(sp)
811190b4:	d9801e04 	addi	r6,sp,120
811190b8:	b80b883a 	mov	r5,r23
811190bc:	1123c8c0 	call	81123c8c <__sprint_r>
811190c0:	103b7a1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811190c4:	d8c02017 	ldw	r3,128(sp)
811190c8:	dc401f17 	ldw	r17,124(sp)
811190cc:	dd800404 	addi	r22,sp,16
811190d0:	003e8f06 	br	81118b10 <__reset+0xfb0f8b10>
811190d4:	0027883a 	mov	r19,zero
811190d8:	003f4a06 	br	81118e04 <__reset+0xfb0f8e04>
811190dc:	d9002c17 	ldw	r4,176(sp)
811190e0:	d9801e04 	addi	r6,sp,120
811190e4:	b80b883a 	mov	r5,r23
811190e8:	1123c8c0 	call	81123c8c <__sprint_r>
811190ec:	103b6f1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811190f0:	d8c02017 	ldw	r3,128(sp)
811190f4:	da000404 	addi	r8,sp,16
811190f8:	003c9d06 	br	81118370 <__reset+0xfb0f8370>
811190fc:	04e7c83a 	sub	r19,zero,r19
81119100:	9804c03a 	cmpne	r2,r19,zero
81119104:	05adc83a 	sub	r22,zero,r22
81119108:	b0adc83a 	sub	r22,r22,r2
8111910c:	d8802917 	ldw	r2,164(sp)
81119110:	07000b44 	movi	fp,45
81119114:	df002785 	stb	fp,158(sp)
81119118:	10017b16 	blt	r2,zero,81119708 <___vfprintf_internal_r+0x1c6c>
8111911c:	00bfdfc4 	movi	r2,-129
81119120:	90a4703a 	and	r18,r18,r2
81119124:	003bb106 	br	81117fec <__reset+0xfb0f7fec>
81119128:	d9003617 	ldw	r4,216(sp)
8111912c:	d9403817 	ldw	r5,224(sp)
81119130:	da003d15 	stw	r8,244(sp)
81119134:	11202f00 	call	811202f0 <__fpclassifyd>
81119138:	da003d17 	ldw	r8,244(sp)
8111913c:	1000f026 	beq	r2,zero,81119500 <___vfprintf_internal_r+0x1a64>
81119140:	d9002917 	ldw	r4,164(sp)
81119144:	05bff7c4 	movi	r22,-33
81119148:	00bfffc4 	movi	r2,-1
8111914c:	8dac703a 	and	r22,r17,r22
81119150:	20820026 	beq	r4,r2,81119954 <___vfprintf_internal_r+0x1eb8>
81119154:	008011c4 	movi	r2,71
81119158:	b081f726 	beq	r22,r2,81119938 <___vfprintf_internal_r+0x1e9c>
8111915c:	d9003817 	ldw	r4,224(sp)
81119160:	90c04014 	ori	r3,r18,256
81119164:	d8c02b15 	stw	r3,172(sp)
81119168:	20021516 	blt	r4,zero,811199c0 <___vfprintf_internal_r+0x1f24>
8111916c:	dcc03817 	ldw	r19,224(sp)
81119170:	d8002a05 	stb	zero,168(sp)
81119174:	00801984 	movi	r2,102
81119178:	8881f926 	beq	r17,r2,81119960 <___vfprintf_internal_r+0x1ec4>
8111917c:	00801184 	movi	r2,70
81119180:	88821c26 	beq	r17,r2,811199f4 <___vfprintf_internal_r+0x1f58>
81119184:	00801144 	movi	r2,69
81119188:	b081ef26 	beq	r22,r2,81119948 <___vfprintf_internal_r+0x1eac>
8111918c:	d8c02917 	ldw	r3,164(sp)
81119190:	d8802104 	addi	r2,sp,132
81119194:	d8800315 	stw	r2,12(sp)
81119198:	d9403617 	ldw	r5,216(sp)
8111919c:	d8802504 	addi	r2,sp,148
811191a0:	d9002c17 	ldw	r4,176(sp)
811191a4:	d8800215 	stw	r2,8(sp)
811191a8:	d8802604 	addi	r2,sp,152
811191ac:	d8c00015 	stw	r3,0(sp)
811191b0:	d8800115 	stw	r2,4(sp)
811191b4:	01c00084 	movi	r7,2
811191b8:	980d883a 	mov	r6,r19
811191bc:	d8c03c15 	stw	r3,240(sp)
811191c0:	da003d15 	stw	r8,244(sp)
811191c4:	111bba80 	call	8111bba8 <_dtoa_r>
811191c8:	1021883a 	mov	r16,r2
811191cc:	008019c4 	movi	r2,103
811191d0:	d8c03c17 	ldw	r3,240(sp)
811191d4:	da003d17 	ldw	r8,244(sp)
811191d8:	88817126 	beq	r17,r2,811197a0 <___vfprintf_internal_r+0x1d04>
811191dc:	008011c4 	movi	r2,71
811191e0:	88829226 	beq	r17,r2,81119c2c <___vfprintf_internal_r+0x2190>
811191e4:	80f9883a 	add	fp,r16,r3
811191e8:	d9003617 	ldw	r4,216(sp)
811191ec:	000d883a 	mov	r6,zero
811191f0:	000f883a 	mov	r7,zero
811191f4:	980b883a 	mov	r5,r19
811191f8:	da003d15 	stw	r8,244(sp)
811191fc:	11284d40 	call	811284d4 <__eqdf2>
81119200:	da003d17 	ldw	r8,244(sp)
81119204:	10018d26 	beq	r2,zero,8111983c <___vfprintf_internal_r+0x1da0>
81119208:	d8802117 	ldw	r2,132(sp)
8111920c:	1700062e 	bgeu	r2,fp,81119228 <___vfprintf_internal_r+0x178c>
81119210:	01000c04 	movi	r4,48
81119214:	10c00044 	addi	r3,r2,1
81119218:	d8c02115 	stw	r3,132(sp)
8111921c:	11000005 	stb	r4,0(r2)
81119220:	d8802117 	ldw	r2,132(sp)
81119224:	173ffb36 	bltu	r2,fp,81119214 <__reset+0xfb0f9214>
81119228:	1405c83a 	sub	r2,r2,r16
8111922c:	d8803315 	stw	r2,204(sp)
81119230:	008011c4 	movi	r2,71
81119234:	b0817626 	beq	r22,r2,81119810 <___vfprintf_internal_r+0x1d74>
81119238:	00801944 	movi	r2,101
8111923c:	1442810e 	bge	r2,r17,81119c44 <___vfprintf_internal_r+0x21a8>
81119240:	d8c02617 	ldw	r3,152(sp)
81119244:	00801984 	movi	r2,102
81119248:	d8c03215 	stw	r3,200(sp)
8111924c:	8881fe26 	beq	r17,r2,81119a48 <___vfprintf_internal_r+0x1fac>
81119250:	d8c03217 	ldw	r3,200(sp)
81119254:	d9003317 	ldw	r4,204(sp)
81119258:	1901dd16 	blt	r3,r4,811199d0 <___vfprintf_internal_r+0x1f34>
8111925c:	9480004c 	andi	r18,r18,1
81119260:	90022b1e 	bne	r18,zero,81119b10 <___vfprintf_internal_r+0x2074>
81119264:	1805883a 	mov	r2,r3
81119268:	18028016 	blt	r3,zero,81119c6c <___vfprintf_internal_r+0x21d0>
8111926c:	d8c03217 	ldw	r3,200(sp)
81119270:	044019c4 	movi	r17,103
81119274:	d8c02e15 	stw	r3,184(sp)
81119278:	df002a07 	ldb	fp,168(sp)
8111927c:	e001531e 	bne	fp,zero,811197cc <___vfprintf_internal_r+0x1d30>
81119280:	df002783 	ldbu	fp,158(sp)
81119284:	d8802a15 	stw	r2,168(sp)
81119288:	dc802b17 	ldw	r18,172(sp)
8111928c:	d8002915 	stw	zero,164(sp)
81119290:	003bd106 	br	811181d8 <__reset+0xfb0f81d8>
81119294:	d8802d17 	ldw	r2,180(sp)
81119298:	d8c02d17 	ldw	r3,180(sp)
8111929c:	d9002d17 	ldw	r4,180(sp)
811192a0:	10800017 	ldw	r2,0(r2)
811192a4:	18c00117 	ldw	r3,4(r3)
811192a8:	21000204 	addi	r4,r4,8
811192ac:	d8803615 	stw	r2,216(sp)
811192b0:	d8c03815 	stw	r3,224(sp)
811192b4:	d9002d15 	stw	r4,180(sp)
811192b8:	003b7506 	br	81118090 <__reset+0xfb0f8090>
811192bc:	ac400007 	ldb	r17,0(r21)
811192c0:	003a5906 	br	81117c28 <__reset+0xfb0f7c28>
811192c4:	9080100c 	andi	r2,r18,64
811192c8:	1000a826 	beq	r2,zero,8111956c <___vfprintf_internal_r+0x1ad0>
811192cc:	d9002d17 	ldw	r4,180(sp)
811192d0:	002d883a 	mov	r22,zero
811192d4:	24c0000b 	ldhu	r19,0(r4)
811192d8:	21000104 	addi	r4,r4,4
811192dc:	d9002d15 	stw	r4,180(sp)
811192e0:	003ccb06 	br	81118610 <__reset+0xfb0f8610>
811192e4:	d8c02d17 	ldw	r3,180(sp)
811192e8:	d9002917 	ldw	r4,164(sp)
811192ec:	002d883a 	mov	r22,zero
811192f0:	18800104 	addi	r2,r3,4
811192f4:	1cc00017 	ldw	r19,0(r3)
811192f8:	203ebb0e 	bge	r4,zero,81118de8 <__reset+0xfb0f8de8>
811192fc:	003ef106 	br	81118ec4 <__reset+0xfb0f8ec4>
81119300:	9080040c 	andi	r2,r18,16
81119304:	1000921e 	bne	r2,zero,81119550 <___vfprintf_internal_r+0x1ab4>
81119308:	9480100c 	andi	r18,r18,64
8111930c:	90013926 	beq	r18,zero,811197f4 <___vfprintf_internal_r+0x1d58>
81119310:	d9002d17 	ldw	r4,180(sp)
81119314:	d9402f17 	ldw	r5,188(sp)
81119318:	20800017 	ldw	r2,0(r4)
8111931c:	21000104 	addi	r4,r4,4
81119320:	d9002d15 	stw	r4,180(sp)
81119324:	1140000d 	sth	r5,0(r2)
81119328:	003a1606 	br	81117b84 <__reset+0xfb0f7b84>
8111932c:	9080100c 	andi	r2,r18,64
81119330:	10008026 	beq	r2,zero,81119534 <___vfprintf_internal_r+0x1a98>
81119334:	d8c02d17 	ldw	r3,180(sp)
81119338:	1cc0000f 	ldh	r19,0(r3)
8111933c:	18c00104 	addi	r3,r3,4
81119340:	d8c02d15 	stw	r3,180(sp)
81119344:	982dd7fa 	srai	r22,r19,31
81119348:	b005883a 	mov	r2,r22
8111934c:	003b1f06 	br	81117fcc <__reset+0xfb0f7fcc>
81119350:	9080100c 	andi	r2,r18,64
81119354:	d8002785 	stb	zero,158(sp)
81119358:	10008a1e 	bne	r2,zero,81119584 <___vfprintf_internal_r+0x1ae8>
8111935c:	d9402d17 	ldw	r5,180(sp)
81119360:	d8c02917 	ldw	r3,164(sp)
81119364:	002d883a 	mov	r22,zero
81119368:	28800104 	addi	r2,r5,4
8111936c:	2cc00017 	ldw	r19,0(r5)
81119370:	183e4b0e 	bge	r3,zero,81118ca0 <__reset+0xfb0f8ca0>
81119374:	9d86b03a 	or	r3,r19,r22
81119378:	d8802d15 	stw	r2,180(sp)
8111937c:	183e4c1e 	bne	r3,zero,81118cb0 <__reset+0xfb0f8cb0>
81119380:	0039883a 	mov	fp,zero
81119384:	0005883a 	mov	r2,zero
81119388:	003d4006 	br	8111888c <__reset+0xfb0f888c>
8111938c:	01604534 	movhi	r5,33044
81119390:	2948b484 	addi	r5,r5,8914
81119394:	d9402b15 	stw	r5,172(sp)
81119398:	d9402b17 	ldw	r5,172(sp)
8111939c:	1c47883a 	add	r3,r3,r17
811193a0:	10800044 	addi	r2,r2,1
811193a4:	41400015 	stw	r5,0(r8)
811193a8:	44400115 	stw	r17,4(r8)
811193ac:	d8c02015 	stw	r3,128(sp)
811193b0:	d8801f15 	stw	r2,124(sp)
811193b4:	010001c4 	movi	r4,7
811193b8:	20bec816 	blt	r4,r2,81118edc <__reset+0xfb0f8edc>
811193bc:	42000204 	addi	r8,r8,8
811193c0:	003ecd06 	br	81118ef8 <__reset+0xfb0f8ef8>
811193c4:	d9002917 	ldw	r4,164(sp)
811193c8:	d8002785 	stb	zero,158(sp)
811193cc:	203d2d16 	blt	r4,zero,81118884 <__reset+0xfb0f8884>
811193d0:	00bfdfc4 	movi	r2,-129
811193d4:	90a4703a 	and	r18,r18,r2
811193d8:	003a9106 	br	81117e20 <__reset+0xfb0f7e20>
811193dc:	01204534 	movhi	r4,33044
811193e0:	2108b484 	addi	r4,r4,8914
811193e4:	d9002b15 	stw	r4,172(sp)
811193e8:	003c0c06 	br	8111841c <__reset+0xfb0f841c>
811193ec:	d9002c17 	ldw	r4,176(sp)
811193f0:	d9801e04 	addi	r6,sp,120
811193f4:	b80b883a 	mov	r5,r23
811193f8:	1123c8c0 	call	81123c8c <__sprint_r>
811193fc:	103aab1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81119400:	d8c02017 	ldw	r3,128(sp)
81119404:	da000404 	addi	r8,sp,16
81119408:	003d4106 	br	81118910 <__reset+0xfb0f8910>
8111940c:	d8801f17 	ldw	r2,124(sp)
81119410:	01604534 	movhi	r5,33044
81119414:	01000044 	movi	r4,1
81119418:	18c00044 	addi	r3,r3,1
8111941c:	10800044 	addi	r2,r2,1
81119420:	2948ac04 	addi	r5,r5,8880
81119424:	41000115 	stw	r4,4(r8)
81119428:	41400015 	stw	r5,0(r8)
8111942c:	d8c02015 	stw	r3,128(sp)
81119430:	d8801f15 	stw	r2,124(sp)
81119434:	010001c4 	movi	r4,7
81119438:	20805c16 	blt	r4,r2,811195ac <___vfprintf_internal_r+0x1b10>
8111943c:	42000204 	addi	r8,r8,8
81119440:	8800041e 	bne	r17,zero,81119454 <___vfprintf_internal_r+0x19b8>
81119444:	d8803317 	ldw	r2,204(sp)
81119448:	1000021e 	bne	r2,zero,81119454 <___vfprintf_internal_r+0x19b8>
8111944c:	9080004c 	andi	r2,r18,1
81119450:	103c0926 	beq	r2,zero,81118478 <__reset+0xfb0f8478>
81119454:	d9003717 	ldw	r4,220(sp)
81119458:	d8801f17 	ldw	r2,124(sp)
8111945c:	d9403417 	ldw	r5,208(sp)
81119460:	20c7883a 	add	r3,r4,r3
81119464:	10800044 	addi	r2,r2,1
81119468:	41000115 	stw	r4,4(r8)
8111946c:	41400015 	stw	r5,0(r8)
81119470:	d8c02015 	stw	r3,128(sp)
81119474:	d8801f15 	stw	r2,124(sp)
81119478:	010001c4 	movi	r4,7
8111947c:	20812116 	blt	r4,r2,81119904 <___vfprintf_internal_r+0x1e68>
81119480:	42000204 	addi	r8,r8,8
81119484:	0463c83a 	sub	r17,zero,r17
81119488:	0440730e 	bge	zero,r17,81119658 <___vfprintf_internal_r+0x1bbc>
8111948c:	05800404 	movi	r22,16
81119490:	b440860e 	bge	r22,r17,811196ac <___vfprintf_internal_r+0x1c10>
81119494:	01604534 	movhi	r5,33044
81119498:	2948b484 	addi	r5,r5,8914
8111949c:	d9402b15 	stw	r5,172(sp)
811194a0:	070001c4 	movi	fp,7
811194a4:	dcc02c17 	ldw	r19,176(sp)
811194a8:	00000306 	br	811194b8 <___vfprintf_internal_r+0x1a1c>
811194ac:	42000204 	addi	r8,r8,8
811194b0:	8c7ffc04 	addi	r17,r17,-16
811194b4:	b440800e 	bge	r22,r17,811196b8 <___vfprintf_internal_r+0x1c1c>
811194b8:	18c00404 	addi	r3,r3,16
811194bc:	10800044 	addi	r2,r2,1
811194c0:	45000015 	stw	r20,0(r8)
811194c4:	45800115 	stw	r22,4(r8)
811194c8:	d8c02015 	stw	r3,128(sp)
811194cc:	d8801f15 	stw	r2,124(sp)
811194d0:	e0bff60e 	bge	fp,r2,811194ac <__reset+0xfb0f94ac>
811194d4:	d9801e04 	addi	r6,sp,120
811194d8:	b80b883a 	mov	r5,r23
811194dc:	9809883a 	mov	r4,r19
811194e0:	1123c8c0 	call	81123c8c <__sprint_r>
811194e4:	103a711e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811194e8:	d8c02017 	ldw	r3,128(sp)
811194ec:	d8801f17 	ldw	r2,124(sp)
811194f0:	da000404 	addi	r8,sp,16
811194f4:	003fee06 	br	811194b0 <__reset+0xfb0f94b0>
811194f8:	00bfffc4 	movi	r2,-1
811194fc:	003a6f06 	br	81117ebc <__reset+0xfb0f7ebc>
81119500:	008011c4 	movi	r2,71
81119504:	1440b816 	blt	r2,r17,811197e8 <___vfprintf_internal_r+0x1d4c>
81119508:	04204534 	movhi	r16,33044
8111950c:	84089e04 	addi	r16,r16,8824
81119510:	00c000c4 	movi	r3,3
81119514:	00bfdfc4 	movi	r2,-129
81119518:	d8c02a15 	stw	r3,168(sp)
8111951c:	90a4703a 	and	r18,r18,r2
81119520:	df002783 	ldbu	fp,158(sp)
81119524:	d8c02e15 	stw	r3,184(sp)
81119528:	d8002915 	stw	zero,164(sp)
8111952c:	d8003215 	stw	zero,200(sp)
81119530:	003b2906 	br	811181d8 <__reset+0xfb0f81d8>
81119534:	d9002d17 	ldw	r4,180(sp)
81119538:	24c00017 	ldw	r19,0(r4)
8111953c:	21000104 	addi	r4,r4,4
81119540:	d9002d15 	stw	r4,180(sp)
81119544:	982dd7fa 	srai	r22,r19,31
81119548:	b005883a 	mov	r2,r22
8111954c:	003a9f06 	br	81117fcc <__reset+0xfb0f7fcc>
81119550:	d9402d17 	ldw	r5,180(sp)
81119554:	d8c02f17 	ldw	r3,188(sp)
81119558:	28800017 	ldw	r2,0(r5)
8111955c:	29400104 	addi	r5,r5,4
81119560:	d9402d15 	stw	r5,180(sp)
81119564:	10c00015 	stw	r3,0(r2)
81119568:	00398606 	br	81117b84 <__reset+0xfb0f7b84>
8111956c:	d9402d17 	ldw	r5,180(sp)
81119570:	002d883a 	mov	r22,zero
81119574:	2cc00017 	ldw	r19,0(r5)
81119578:	29400104 	addi	r5,r5,4
8111957c:	d9402d15 	stw	r5,180(sp)
81119580:	003c2306 	br	81118610 <__reset+0xfb0f8610>
81119584:	d8c02d17 	ldw	r3,180(sp)
81119588:	d9002917 	ldw	r4,164(sp)
8111958c:	002d883a 	mov	r22,zero
81119590:	18800104 	addi	r2,r3,4
81119594:	1cc0000b 	ldhu	r19,0(r3)
81119598:	203dc10e 	bge	r4,zero,81118ca0 <__reset+0xfb0f8ca0>
8111959c:	003f7506 	br	81119374 <__reset+0xfb0f9374>
811195a0:	04204534 	movhi	r16,33044
811195a4:	84089c04 	addi	r16,r16,8816
811195a8:	003acc06 	br	811180dc <__reset+0xfb0f80dc>
811195ac:	d9002c17 	ldw	r4,176(sp)
811195b0:	d9801e04 	addi	r6,sp,120
811195b4:	b80b883a 	mov	r5,r23
811195b8:	1123c8c0 	call	81123c8c <__sprint_r>
811195bc:	103a3b1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811195c0:	dc402617 	ldw	r17,152(sp)
811195c4:	d8c02017 	ldw	r3,128(sp)
811195c8:	da000404 	addi	r8,sp,16
811195cc:	003f9c06 	br	81119440 <__reset+0xfb0f9440>
811195d0:	ac400043 	ldbu	r17,1(r21)
811195d4:	94800814 	ori	r18,r18,32
811195d8:	ad400044 	addi	r21,r21,1
811195dc:	8c403fcc 	andi	r17,r17,255
811195e0:	8c40201c 	xori	r17,r17,128
811195e4:	8c7fe004 	addi	r17,r17,-128
811195e8:	00398f06 	br	81117c28 <__reset+0xfb0f7c28>
811195ec:	d8c02d15 	stw	r3,180(sp)
811195f0:	0039883a 	mov	fp,zero
811195f4:	003e3506 	br	81118ecc <__reset+0xfb0f8ecc>
811195f8:	d9002c17 	ldw	r4,176(sp)
811195fc:	d9801e04 	addi	r6,sp,120
81119600:	b80b883a 	mov	r5,r23
81119604:	1123c8c0 	call	81123c8c <__sprint_r>
81119608:	103a281e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
8111960c:	d8c02017 	ldw	r3,128(sp)
81119610:	da000404 	addi	r8,sp,16
81119614:	003cd006 	br	81118958 <__reset+0xfb0f8958>
81119618:	8009883a 	mov	r4,r16
8111961c:	da003d15 	stw	r8,244(sp)
81119620:	11155840 	call	81115584 <strlen>
81119624:	d8802e15 	stw	r2,184(sp)
81119628:	da003d17 	ldw	r8,244(sp)
8111962c:	103c340e 	bge	r2,zero,81118700 <__reset+0xfb0f8700>
81119630:	0005883a 	mov	r2,zero
81119634:	003c3206 	br	81118700 <__reset+0xfb0f8700>
81119638:	d9002c17 	ldw	r4,176(sp)
8111963c:	d9801e04 	addi	r6,sp,120
81119640:	b80b883a 	mov	r5,r23
81119644:	1123c8c0 	call	81123c8c <__sprint_r>
81119648:	103a181e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
8111964c:	d8c02017 	ldw	r3,128(sp)
81119650:	d8801f17 	ldw	r2,124(sp)
81119654:	da000404 	addi	r8,sp,16
81119658:	d9403317 	ldw	r5,204(sp)
8111965c:	10800044 	addi	r2,r2,1
81119660:	44000015 	stw	r16,0(r8)
81119664:	28c7883a 	add	r3,r5,r3
81119668:	003b7d06 	br	81118460 <__reset+0xfb0f8460>
8111966c:	01204534 	movhi	r4,33044
81119670:	2108b884 	addi	r4,r4,8930
81119674:	d9003515 	stw	r4,212(sp)
81119678:	003b1406 	br	811182cc <__reset+0xfb0f82cc>
8111967c:	013fffc4 	movi	r4,-1
81119680:	003a3506 	br	81117f58 <__reset+0xfb0f7f58>
81119684:	0023883a 	mov	r17,zero
81119688:	003d9d06 	br	81118d00 <__reset+0xfb0f8d00>
8111968c:	d9002c17 	ldw	r4,176(sp)
81119690:	d9801e04 	addi	r6,sp,120
81119694:	b80b883a 	mov	r5,r23
81119698:	1123c8c0 	call	81123c8c <__sprint_r>
8111969c:	103a031e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811196a0:	d8c02017 	ldw	r3,128(sp)
811196a4:	da000404 	addi	r8,sp,16
811196a8:	003d9406 	br	81118cfc <__reset+0xfb0f8cfc>
811196ac:	01204534 	movhi	r4,33044
811196b0:	2108b484 	addi	r4,r4,8914
811196b4:	d9002b15 	stw	r4,172(sp)
811196b8:	d9002b17 	ldw	r4,172(sp)
811196bc:	1c47883a 	add	r3,r3,r17
811196c0:	10800044 	addi	r2,r2,1
811196c4:	41000015 	stw	r4,0(r8)
811196c8:	44400115 	stw	r17,4(r8)
811196cc:	d8c02015 	stw	r3,128(sp)
811196d0:	d8801f15 	stw	r2,124(sp)
811196d4:	010001c4 	movi	r4,7
811196d8:	20bfd716 	blt	r4,r2,81119638 <__reset+0xfb0f9638>
811196dc:	42000204 	addi	r8,r8,8
811196e0:	003fdd06 	br	81119658 <__reset+0xfb0f9658>
811196e4:	d9002c17 	ldw	r4,176(sp)
811196e8:	d9801e04 	addi	r6,sp,120
811196ec:	b80b883a 	mov	r5,r23
811196f0:	1123c8c0 	call	81123c8c <__sprint_r>
811196f4:	1039ed1e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
811196f8:	d8802617 	ldw	r2,152(sp)
811196fc:	d8c02017 	ldw	r3,128(sp)
81119700:	da000404 	addi	r8,sp,16
81119704:	003e1006 	br	81118f48 <__reset+0xfb0f8f48>
81119708:	00800044 	movi	r2,1
8111970c:	10803fcc 	andi	r2,r2,255
81119710:	00c00044 	movi	r3,1
81119714:	10fa3526 	beq	r2,r3,81117fec <__reset+0xfb0f7fec>
81119718:	00c00084 	movi	r3,2
8111971c:	10fbcb26 	beq	r2,r3,8111864c <__reset+0xfb0f864c>
81119720:	003a8f06 	br	81118160 <__reset+0xfb0f8160>
81119724:	01204534 	movhi	r4,33044
81119728:	2108b884 	addi	r4,r4,8930
8111972c:	d9003515 	stw	r4,212(sp)
81119730:	003b7606 	br	8111850c <__reset+0xfb0f850c>
81119734:	d8802917 	ldw	r2,164(sp)
81119738:	00c00184 	movi	r3,6
8111973c:	1880012e 	bgeu	r3,r2,81119744 <___vfprintf_internal_r+0x1ca8>
81119740:	1805883a 	mov	r2,r3
81119744:	d8802e15 	stw	r2,184(sp)
81119748:	1000ef16 	blt	r2,zero,81119b08 <___vfprintf_internal_r+0x206c>
8111974c:	04204534 	movhi	r16,33044
81119750:	d8802a15 	stw	r2,168(sp)
81119754:	dcc02d15 	stw	r19,180(sp)
81119758:	d8002915 	stw	zero,164(sp)
8111975c:	d8003215 	stw	zero,200(sp)
81119760:	8408aa04 	addi	r16,r16,8872
81119764:	0039883a 	mov	fp,zero
81119768:	003aa206 	br	811181f4 <__reset+0xfb0f81f4>
8111976c:	0021883a 	mov	r16,zero
81119770:	003e0706 	br	81118f90 <__reset+0xfb0f8f90>
81119774:	d9002c17 	ldw	r4,176(sp)
81119778:	d9801e04 	addi	r6,sp,120
8111977c:	b80b883a 	mov	r5,r23
81119780:	1123c8c0 	call	81123c8c <__sprint_r>
81119784:	1039c91e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81119788:	d8802617 	ldw	r2,152(sp)
8111978c:	d9403317 	ldw	r5,204(sp)
81119790:	d8c02017 	ldw	r3,128(sp)
81119794:	da000404 	addi	r8,sp,16
81119798:	2885c83a 	sub	r2,r5,r2
8111979c:	003dfb06 	br	81118f8c <__reset+0xfb0f8f8c>
811197a0:	9080004c 	andi	r2,r18,1
811197a4:	103e8f1e 	bne	r2,zero,811191e4 <__reset+0xfb0f91e4>
811197a8:	d8802117 	ldw	r2,132(sp)
811197ac:	003e9e06 	br	81119228 <__reset+0xfb0f9228>
811197b0:	1025883a 	mov	r18,r2
811197b4:	0039883a 	mov	fp,zero
811197b8:	00800084 	movi	r2,2
811197bc:	003fd306 	br	8111970c <__reset+0xfb0f970c>
811197c0:	07000b44 	movi	fp,45
811197c4:	df002785 	stb	fp,158(sp)
811197c8:	003a4006 	br	811180cc <__reset+0xfb0f80cc>
811197cc:	00c00b44 	movi	r3,45
811197d0:	d8c02785 	stb	r3,158(sp)
811197d4:	d8802a15 	stw	r2,168(sp)
811197d8:	dc802b17 	ldw	r18,172(sp)
811197dc:	d8002915 	stw	zero,164(sp)
811197e0:	07000b44 	movi	fp,45
811197e4:	003a8006 	br	811181e8 <__reset+0xfb0f81e8>
811197e8:	04204534 	movhi	r16,33044
811197ec:	84089f04 	addi	r16,r16,8828
811197f0:	003f4706 	br	81119510 <__reset+0xfb0f9510>
811197f4:	d8c02d17 	ldw	r3,180(sp)
811197f8:	d9002f17 	ldw	r4,188(sp)
811197fc:	18800017 	ldw	r2,0(r3)
81119800:	18c00104 	addi	r3,r3,4
81119804:	d8c02d15 	stw	r3,180(sp)
81119808:	11000015 	stw	r4,0(r2)
8111980c:	0038dd06 	br	81117b84 <__reset+0xfb0f7b84>
81119810:	dd802617 	ldw	r22,152(sp)
81119814:	00bfff44 	movi	r2,-3
81119818:	b0801c16 	blt	r22,r2,8111988c <___vfprintf_internal_r+0x1df0>
8111981c:	d9402917 	ldw	r5,164(sp)
81119820:	2d801a16 	blt	r5,r22,8111988c <___vfprintf_internal_r+0x1df0>
81119824:	dd803215 	stw	r22,200(sp)
81119828:	003e8906 	br	81119250 <__reset+0xfb0f9250>
8111982c:	01204534 	movhi	r4,33044
81119830:	2108b484 	addi	r4,r4,8914
81119834:	d9002b15 	stw	r4,172(sp)
81119838:	003c9106 	br	81118a80 <__reset+0xfb0f8a80>
8111983c:	e005883a 	mov	r2,fp
81119840:	003e7906 	br	81119228 <__reset+0xfb0f9228>
81119844:	d9402917 	ldw	r5,164(sp)
81119848:	df002783 	ldbu	fp,158(sp)
8111984c:	dcc02d15 	stw	r19,180(sp)
81119850:	d9402a15 	stw	r5,168(sp)
81119854:	d9402e15 	stw	r5,184(sp)
81119858:	d8002915 	stw	zero,164(sp)
8111985c:	d8003215 	stw	zero,200(sp)
81119860:	003a5d06 	br	811181d8 <__reset+0xfb0f81d8>
81119864:	9080004c 	andi	r2,r18,1
81119868:	0039883a 	mov	fp,zero
8111986c:	10000426 	beq	r2,zero,81119880 <___vfprintf_internal_r+0x1de4>
81119870:	00800c04 	movi	r2,48
81119874:	dc001dc4 	addi	r16,sp,119
81119878:	d8801dc5 	stb	r2,119(sp)
8111987c:	003b8006 	br	81118680 <__reset+0xfb0f8680>
81119880:	d8002e15 	stw	zero,184(sp)
81119884:	dc001e04 	addi	r16,sp,120
81119888:	003a4d06 	br	811181c0 <__reset+0xfb0f81c0>
8111988c:	8c7fff84 	addi	r17,r17,-2
81119890:	b5bfffc4 	addi	r22,r22,-1
81119894:	dd802615 	stw	r22,152(sp)
81119898:	dc4022c5 	stb	r17,139(sp)
8111989c:	b000bf16 	blt	r22,zero,81119b9c <___vfprintf_internal_r+0x2100>
811198a0:	00800ac4 	movi	r2,43
811198a4:	d8802305 	stb	r2,140(sp)
811198a8:	00800244 	movi	r2,9
811198ac:	15807016 	blt	r2,r22,81119a70 <___vfprintf_internal_r+0x1fd4>
811198b0:	00800c04 	movi	r2,48
811198b4:	b5800c04 	addi	r22,r22,48
811198b8:	d8802345 	stb	r2,141(sp)
811198bc:	dd802385 	stb	r22,142(sp)
811198c0:	d88023c4 	addi	r2,sp,143
811198c4:	df0022c4 	addi	fp,sp,139
811198c8:	d8c03317 	ldw	r3,204(sp)
811198cc:	1739c83a 	sub	fp,r2,fp
811198d0:	d9003317 	ldw	r4,204(sp)
811198d4:	e0c7883a 	add	r3,fp,r3
811198d8:	df003a15 	stw	fp,232(sp)
811198dc:	d8c02e15 	stw	r3,184(sp)
811198e0:	00800044 	movi	r2,1
811198e4:	1100b30e 	bge	r2,r4,81119bb4 <___vfprintf_internal_r+0x2118>
811198e8:	d8c02e17 	ldw	r3,184(sp)
811198ec:	18c00044 	addi	r3,r3,1
811198f0:	d8c02e15 	stw	r3,184(sp)
811198f4:	1805883a 	mov	r2,r3
811198f8:	1800ac16 	blt	r3,zero,81119bac <___vfprintf_internal_r+0x2110>
811198fc:	d8003215 	stw	zero,200(sp)
81119900:	003e5d06 	br	81119278 <__reset+0xfb0f9278>
81119904:	d9002c17 	ldw	r4,176(sp)
81119908:	d9801e04 	addi	r6,sp,120
8111990c:	b80b883a 	mov	r5,r23
81119910:	1123c8c0 	call	81123c8c <__sprint_r>
81119914:	1039651e 	bne	r2,zero,81117eac <__reset+0xfb0f7eac>
81119918:	dc402617 	ldw	r17,152(sp)
8111991c:	d8c02017 	ldw	r3,128(sp)
81119920:	d8801f17 	ldw	r2,124(sp)
81119924:	da000404 	addi	r8,sp,16
81119928:	003ed606 	br	81119484 <__reset+0xfb0f9484>
8111992c:	582b883a 	mov	r21,r11
81119930:	d8002915 	stw	zero,164(sp)
81119934:	0038bd06 	br	81117c2c <__reset+0xfb0f7c2c>
81119938:	d8802917 	ldw	r2,164(sp)
8111993c:	103e071e 	bne	r2,zero,8111915c <__reset+0xfb0f915c>
81119940:	dc002915 	stw	r16,164(sp)
81119944:	003e0506 	br	8111915c <__reset+0xfb0f915c>
81119948:	d9002917 	ldw	r4,164(sp)
8111994c:	20c00044 	addi	r3,r4,1
81119950:	003e0f06 	br	81119190 <__reset+0xfb0f9190>
81119954:	01400184 	movi	r5,6
81119958:	d9402915 	stw	r5,164(sp)
8111995c:	003dff06 	br	8111915c <__reset+0xfb0f915c>
81119960:	d8802104 	addi	r2,sp,132
81119964:	d8800315 	stw	r2,12(sp)
81119968:	d8802504 	addi	r2,sp,148
8111996c:	d8800215 	stw	r2,8(sp)
81119970:	d8802604 	addi	r2,sp,152
81119974:	d8800115 	stw	r2,4(sp)
81119978:	d8802917 	ldw	r2,164(sp)
8111997c:	d9403617 	ldw	r5,216(sp)
81119980:	d9002c17 	ldw	r4,176(sp)
81119984:	d8800015 	stw	r2,0(sp)
81119988:	01c000c4 	movi	r7,3
8111998c:	980d883a 	mov	r6,r19
81119990:	da003d15 	stw	r8,244(sp)
81119994:	111bba80 	call	8111bba8 <_dtoa_r>
81119998:	d8c02917 	ldw	r3,164(sp)
8111999c:	da003d17 	ldw	r8,244(sp)
811199a0:	1021883a 	mov	r16,r2
811199a4:	10f9883a 	add	fp,r2,r3
811199a8:	81000007 	ldb	r4,0(r16)
811199ac:	00800c04 	movi	r2,48
811199b0:	20805e26 	beq	r4,r2,81119b2c <___vfprintf_internal_r+0x2090>
811199b4:	d8c02617 	ldw	r3,152(sp)
811199b8:	e0f9883a 	add	fp,fp,r3
811199bc:	003e0a06 	br	811191e8 <__reset+0xfb0f91e8>
811199c0:	00c00b44 	movi	r3,45
811199c4:	24e0003c 	xorhi	r19,r4,32768
811199c8:	d8c02a05 	stb	r3,168(sp)
811199cc:	003de906 	br	81119174 <__reset+0xfb0f9174>
811199d0:	d8c03217 	ldw	r3,200(sp)
811199d4:	00c07a0e 	bge	zero,r3,81119bc0 <___vfprintf_internal_r+0x2124>
811199d8:	00800044 	movi	r2,1
811199dc:	d9003317 	ldw	r4,204(sp)
811199e0:	1105883a 	add	r2,r2,r4
811199e4:	d8802e15 	stw	r2,184(sp)
811199e8:	10004e16 	blt	r2,zero,81119b24 <___vfprintf_internal_r+0x2088>
811199ec:	044019c4 	movi	r17,103
811199f0:	003e2106 	br	81119278 <__reset+0xfb0f9278>
811199f4:	d9002917 	ldw	r4,164(sp)
811199f8:	d8802104 	addi	r2,sp,132
811199fc:	d8800315 	stw	r2,12(sp)
81119a00:	d9000015 	stw	r4,0(sp)
81119a04:	d8802504 	addi	r2,sp,148
81119a08:	d9403617 	ldw	r5,216(sp)
81119a0c:	d9002c17 	ldw	r4,176(sp)
81119a10:	d8800215 	stw	r2,8(sp)
81119a14:	d8802604 	addi	r2,sp,152
81119a18:	d8800115 	stw	r2,4(sp)
81119a1c:	01c000c4 	movi	r7,3
81119a20:	980d883a 	mov	r6,r19
81119a24:	da003d15 	stw	r8,244(sp)
81119a28:	111bba80 	call	8111bba8 <_dtoa_r>
81119a2c:	d8c02917 	ldw	r3,164(sp)
81119a30:	da003d17 	ldw	r8,244(sp)
81119a34:	1021883a 	mov	r16,r2
81119a38:	00801184 	movi	r2,70
81119a3c:	80f9883a 	add	fp,r16,r3
81119a40:	88bfd926 	beq	r17,r2,811199a8 <__reset+0xfb0f99a8>
81119a44:	003de806 	br	811191e8 <__reset+0xfb0f91e8>
81119a48:	d9002917 	ldw	r4,164(sp)
81119a4c:	00c04d0e 	bge	zero,r3,81119b84 <___vfprintf_internal_r+0x20e8>
81119a50:	2000441e 	bne	r4,zero,81119b64 <___vfprintf_internal_r+0x20c8>
81119a54:	9480004c 	andi	r18,r18,1
81119a58:	9000421e 	bne	r18,zero,81119b64 <___vfprintf_internal_r+0x20c8>
81119a5c:	1805883a 	mov	r2,r3
81119a60:	18007016 	blt	r3,zero,81119c24 <___vfprintf_internal_r+0x2188>
81119a64:	d8c03217 	ldw	r3,200(sp)
81119a68:	d8c02e15 	stw	r3,184(sp)
81119a6c:	003e0206 	br	81119278 <__reset+0xfb0f9278>
81119a70:	df0022c4 	addi	fp,sp,139
81119a74:	dc002915 	stw	r16,164(sp)
81119a78:	4027883a 	mov	r19,r8
81119a7c:	e021883a 	mov	r16,fp
81119a80:	b009883a 	mov	r4,r22
81119a84:	01400284 	movi	r5,10
81119a88:	11270040 	call	81127004 <__modsi3>
81119a8c:	10800c04 	addi	r2,r2,48
81119a90:	843fffc4 	addi	r16,r16,-1
81119a94:	b009883a 	mov	r4,r22
81119a98:	01400284 	movi	r5,10
81119a9c:	80800005 	stb	r2,0(r16)
81119aa0:	1126f800 	call	81126f80 <__divsi3>
81119aa4:	102d883a 	mov	r22,r2
81119aa8:	00800244 	movi	r2,9
81119aac:	15bff416 	blt	r2,r22,81119a80 <__reset+0xfb0f9a80>
81119ab0:	9811883a 	mov	r8,r19
81119ab4:	b0800c04 	addi	r2,r22,48
81119ab8:	8027883a 	mov	r19,r16
81119abc:	997fffc4 	addi	r5,r19,-1
81119ac0:	98bfffc5 	stb	r2,-1(r19)
81119ac4:	dc002917 	ldw	r16,164(sp)
81119ac8:	2f006a2e 	bgeu	r5,fp,81119c74 <___vfprintf_internal_r+0x21d8>
81119acc:	d9c02384 	addi	r7,sp,142
81119ad0:	3ccfc83a 	sub	r7,r7,r19
81119ad4:	d9002344 	addi	r4,sp,141
81119ad8:	e1cf883a 	add	r7,fp,r7
81119adc:	00000106 	br	81119ae4 <___vfprintf_internal_r+0x2048>
81119ae0:	28800003 	ldbu	r2,0(r5)
81119ae4:	20800005 	stb	r2,0(r4)
81119ae8:	21000044 	addi	r4,r4,1
81119aec:	29400044 	addi	r5,r5,1
81119af0:	393ffb1e 	bne	r7,r4,81119ae0 <__reset+0xfb0f9ae0>
81119af4:	d8802304 	addi	r2,sp,140
81119af8:	14c5c83a 	sub	r2,r2,r19
81119afc:	d8c02344 	addi	r3,sp,141
81119b00:	1885883a 	add	r2,r3,r2
81119b04:	003f7006 	br	811198c8 <__reset+0xfb0f98c8>
81119b08:	0005883a 	mov	r2,zero
81119b0c:	003f0f06 	br	8111974c <__reset+0xfb0f974c>
81119b10:	d8c03217 	ldw	r3,200(sp)
81119b14:	18c00044 	addi	r3,r3,1
81119b18:	d8c02e15 	stw	r3,184(sp)
81119b1c:	1805883a 	mov	r2,r3
81119b20:	183fb20e 	bge	r3,zero,811199ec <__reset+0xfb0f99ec>
81119b24:	0005883a 	mov	r2,zero
81119b28:	003fb006 	br	811199ec <__reset+0xfb0f99ec>
81119b2c:	d9003617 	ldw	r4,216(sp)
81119b30:	000d883a 	mov	r6,zero
81119b34:	000f883a 	mov	r7,zero
81119b38:	980b883a 	mov	r5,r19
81119b3c:	d8c03c15 	stw	r3,240(sp)
81119b40:	da003d15 	stw	r8,244(sp)
81119b44:	11284d40 	call	811284d4 <__eqdf2>
81119b48:	d8c03c17 	ldw	r3,240(sp)
81119b4c:	da003d17 	ldw	r8,244(sp)
81119b50:	103f9826 	beq	r2,zero,811199b4 <__reset+0xfb0f99b4>
81119b54:	00800044 	movi	r2,1
81119b58:	10c7c83a 	sub	r3,r2,r3
81119b5c:	d8c02615 	stw	r3,152(sp)
81119b60:	003f9506 	br	811199b8 <__reset+0xfb0f99b8>
81119b64:	d9002917 	ldw	r4,164(sp)
81119b68:	d8c03217 	ldw	r3,200(sp)
81119b6c:	20800044 	addi	r2,r4,1
81119b70:	1885883a 	add	r2,r3,r2
81119b74:	d8802e15 	stw	r2,184(sp)
81119b78:	103dbf0e 	bge	r2,zero,81119278 <__reset+0xfb0f9278>
81119b7c:	0005883a 	mov	r2,zero
81119b80:	003dbd06 	br	81119278 <__reset+0xfb0f9278>
81119b84:	2000211e 	bne	r4,zero,81119c0c <___vfprintf_internal_r+0x2170>
81119b88:	9480004c 	andi	r18,r18,1
81119b8c:	90001f1e 	bne	r18,zero,81119c0c <___vfprintf_internal_r+0x2170>
81119b90:	00800044 	movi	r2,1
81119b94:	d8802e15 	stw	r2,184(sp)
81119b98:	003db706 	br	81119278 <__reset+0xfb0f9278>
81119b9c:	00800b44 	movi	r2,45
81119ba0:	05adc83a 	sub	r22,zero,r22
81119ba4:	d8802305 	stb	r2,140(sp)
81119ba8:	003f3f06 	br	811198a8 <__reset+0xfb0f98a8>
81119bac:	0005883a 	mov	r2,zero
81119bb0:	003f5206 	br	811198fc <__reset+0xfb0f98fc>
81119bb4:	90a4703a 	and	r18,r18,r2
81119bb8:	903f4e26 	beq	r18,zero,811198f4 <__reset+0xfb0f98f4>
81119bbc:	003f4a06 	br	811198e8 <__reset+0xfb0f98e8>
81119bc0:	00800084 	movi	r2,2
81119bc4:	10c5c83a 	sub	r2,r2,r3
81119bc8:	003f8406 	br	811199dc <__reset+0xfb0f99dc>
81119bcc:	d8802d17 	ldw	r2,180(sp)
81119bd0:	d9002d17 	ldw	r4,180(sp)
81119bd4:	ac400043 	ldbu	r17,1(r21)
81119bd8:	10800017 	ldw	r2,0(r2)
81119bdc:	582b883a 	mov	r21,r11
81119be0:	d8802915 	stw	r2,164(sp)
81119be4:	20800104 	addi	r2,r4,4
81119be8:	d9002917 	ldw	r4,164(sp)
81119bec:	d8802d15 	stw	r2,180(sp)
81119bf0:	203e7a0e 	bge	r4,zero,811195dc <__reset+0xfb0f95dc>
81119bf4:	8c403fcc 	andi	r17,r17,255
81119bf8:	00bfffc4 	movi	r2,-1
81119bfc:	8c40201c 	xori	r17,r17,128
81119c00:	d8802915 	stw	r2,164(sp)
81119c04:	8c7fe004 	addi	r17,r17,-128
81119c08:	00380706 	br	81117c28 <__reset+0xfb0f7c28>
81119c0c:	d8c02917 	ldw	r3,164(sp)
81119c10:	18c00084 	addi	r3,r3,2
81119c14:	d8c02e15 	stw	r3,184(sp)
81119c18:	1805883a 	mov	r2,r3
81119c1c:	183d960e 	bge	r3,zero,81119278 <__reset+0xfb0f9278>
81119c20:	003fd606 	br	81119b7c <__reset+0xfb0f9b7c>
81119c24:	0005883a 	mov	r2,zero
81119c28:	003f8e06 	br	81119a64 <__reset+0xfb0f9a64>
81119c2c:	9080004c 	andi	r2,r18,1
81119c30:	103f811e 	bne	r2,zero,81119a38 <__reset+0xfb0f9a38>
81119c34:	d8802117 	ldw	r2,132(sp)
81119c38:	1405c83a 	sub	r2,r2,r16
81119c3c:	d8803315 	stw	r2,204(sp)
81119c40:	b47ef326 	beq	r22,r17,81119810 <__reset+0xfb0f9810>
81119c44:	dd802617 	ldw	r22,152(sp)
81119c48:	003f1106 	br	81119890 <__reset+0xfb0f9890>
81119c4c:	d9c02785 	stb	r7,158(sp)
81119c50:	00390406 	br	81118064 <__reset+0xfb0f8064>
81119c54:	d9c02785 	stb	r7,158(sp)
81119c58:	0038d306 	br	81117fa8 <__reset+0xfb0f7fa8>
81119c5c:	d9c02785 	stb	r7,158(sp)
81119c60:	003a6106 	br	811185e8 <__reset+0xfb0f85e8>
81119c64:	d9c02785 	stb	r7,158(sp)
81119c68:	003af806 	br	8111884c <__reset+0xfb0f884c>
81119c6c:	0005883a 	mov	r2,zero
81119c70:	003d7e06 	br	8111926c <__reset+0xfb0f926c>
81119c74:	d8802344 	addi	r2,sp,141
81119c78:	003f1306 	br	811198c8 <__reset+0xfb0f98c8>
81119c7c:	d9c02785 	stb	r7,158(sp)
81119c80:	00392306 	br	81118110 <__reset+0xfb0f8110>
81119c84:	d9c02785 	stb	r7,158(sp)
81119c88:	003aa906 	br	81118730 <__reset+0xfb0f8730>
81119c8c:	d9c02785 	stb	r7,158(sp)
81119c90:	003a3d06 	br	81118588 <__reset+0xfb0f8588>
81119c94:	d9c02785 	stb	r7,158(sp)
81119c98:	003aca06 	br	811187c4 <__reset+0xfb0f87c4>

81119c9c <__vfprintf_internal>:
81119c9c:	00a04534 	movhi	r2,33044
81119ca0:	10928704 	addi	r2,r2,18972
81119ca4:	300f883a 	mov	r7,r6
81119ca8:	280d883a 	mov	r6,r5
81119cac:	200b883a 	mov	r5,r4
81119cb0:	11000017 	ldw	r4,0(r2)
81119cb4:	1117a9c1 	jmpi	81117a9c <___vfprintf_internal_r>

81119cb8 <__sbprintf>:
81119cb8:	defee204 	addi	sp,sp,-1144
81119cbc:	de00012e 	bgeu	sp,et,81119cc4 <__sbprintf+0xc>
81119cc0:	003b68fa 	trap	3
81119cc4:	2880030b 	ldhu	r2,12(r5)
81119cc8:	2ac01917 	ldw	r11,100(r5)
81119ccc:	2a80038b 	ldhu	r10,14(r5)
81119cd0:	2a400717 	ldw	r9,28(r5)
81119cd4:	2a000917 	ldw	r8,36(r5)
81119cd8:	00c10004 	movi	r3,1024
81119cdc:	dc011a15 	stw	r16,1128(sp)
81119ce0:	10bfff4c 	andi	r2,r2,65533
81119ce4:	2821883a 	mov	r16,r5
81119ce8:	d8cb883a 	add	r5,sp,r3
81119cec:	dc811c15 	stw	r18,1136(sp)
81119cf0:	dc411b15 	stw	r17,1132(sp)
81119cf4:	dfc11d15 	stw	ra,1140(sp)
81119cf8:	2025883a 	mov	r18,r4
81119cfc:	d881030d 	sth	r2,1036(sp)
81119d00:	dac11915 	stw	r11,1124(sp)
81119d04:	da81038d 	sth	r10,1038(sp)
81119d08:	da410715 	stw	r9,1052(sp)
81119d0c:	da010915 	stw	r8,1060(sp)
81119d10:	dec10015 	stw	sp,1024(sp)
81119d14:	dec10415 	stw	sp,1040(sp)
81119d18:	d8c10215 	stw	r3,1032(sp)
81119d1c:	d8c10515 	stw	r3,1044(sp)
81119d20:	d8010615 	stw	zero,1048(sp)
81119d24:	1117a9c0 	call	81117a9c <___vfprintf_internal_r>
81119d28:	1023883a 	mov	r17,r2
81119d2c:	10000416 	blt	r2,zero,81119d40 <__sbprintf+0x88>
81119d30:	d9410004 	addi	r5,sp,1024
81119d34:	9009883a 	mov	r4,r18
81119d38:	111d45c0 	call	8111d45c <_fflush_r>
81119d3c:	10000d1e 	bne	r2,zero,81119d74 <__sbprintf+0xbc>
81119d40:	d881030b 	ldhu	r2,1036(sp)
81119d44:	1080100c 	andi	r2,r2,64
81119d48:	10000326 	beq	r2,zero,81119d58 <__sbprintf+0xa0>
81119d4c:	8080030b 	ldhu	r2,12(r16)
81119d50:	10801014 	ori	r2,r2,64
81119d54:	8080030d 	sth	r2,12(r16)
81119d58:	8805883a 	mov	r2,r17
81119d5c:	dfc11d17 	ldw	ra,1140(sp)
81119d60:	dc811c17 	ldw	r18,1136(sp)
81119d64:	dc411b17 	ldw	r17,1132(sp)
81119d68:	dc011a17 	ldw	r16,1128(sp)
81119d6c:	dec11e04 	addi	sp,sp,1144
81119d70:	f800283a 	ret
81119d74:	047fffc4 	movi	r17,-1
81119d78:	003ff106 	br	81119d40 <__reset+0xfb0f9d40>

81119d7c <__svfscanf_r>:
81119d7c:	deff4b04 	addi	sp,sp,-724
81119d80:	de00012e 	bgeu	sp,et,81119d88 <__svfscanf_r+0xc>
81119d84:	003b68fa 	trap	3
81119d88:	2880030b 	ldhu	r2,12(r5)
81119d8c:	df00b315 	stw	fp,716(sp)
81119d90:	dd80b115 	stw	r22,708(sp)
81119d94:	dfc0b415 	stw	ra,720(sp)
81119d98:	ddc0b215 	stw	r23,712(sp)
81119d9c:	dd40b015 	stw	r21,704(sp)
81119da0:	dd00af15 	stw	r20,700(sp)
81119da4:	dcc0ae15 	stw	r19,696(sp)
81119da8:	dc80ad15 	stw	r18,692(sp)
81119dac:	dc40ac15 	stw	r17,688(sp)
81119db0:	dc00ab15 	stw	r16,684(sp)
81119db4:	10c8000c 	andi	r3,r2,8192
81119db8:	d9c09c15 	stw	r7,624(sp)
81119dbc:	2839883a 	mov	fp,r5
81119dc0:	202d883a 	mov	r22,r4
81119dc4:	1800061e 	bne	r3,zero,81119de0 <__svfscanf_r+0x64>
81119dc8:	29001917 	ldw	r4,100(r5)
81119dcc:	00f7ffc4 	movi	r3,-8193
81119dd0:	10880014 	ori	r2,r2,8192
81119dd4:	20c6703a 	and	r3,r4,r3
81119dd8:	2880030d 	sth	r2,12(r5)
81119ddc:	28c01915 	stw	r3,100(r5)
81119de0:	30800003 	ldbu	r2,0(r6)
81119de4:	0021883a 	mov	r16,zero
81119de8:	05e04534 	movhi	r23,33044
81119dec:	d800a115 	stw	zero,644(sp)
81119df0:	d8009e15 	stw	zero,632(sp)
81119df4:	d800a015 	stw	zero,640(sp)
81119df8:	d8809b15 	stw	r2,620(sp)
81119dfc:	bdd28504 	addi	r23,r23,18964
81119e00:	8025883a 	mov	r18,r16
81119e04:	35000044 	addi	r20,r6,1
81119e08:	10001e26 	beq	r2,zero,81119e84 <__svfscanf_r+0x108>
81119e0c:	b9c00017 	ldw	r7,0(r23)
81119e10:	3887883a 	add	r3,r7,r2
81119e14:	18c00043 	ldbu	r3,1(r3)
81119e18:	18c0020c 	andi	r3,r3,8
81119e1c:	18001b26 	beq	r3,zero,81119e8c <__svfscanf_r+0x110>
81119e20:	e0800117 	ldw	r2,4(fp)
81119e24:	00800e0e 	bge	zero,r2,81119e60 <__svfscanf_r+0xe4>
81119e28:	e0c00017 	ldw	r3,0(fp)
81119e2c:	b9000017 	ldw	r4,0(r23)
81119e30:	18800003 	ldbu	r2,0(r3)
81119e34:	2085883a 	add	r2,r4,r2
81119e38:	10800043 	ldbu	r2,1(r2)
81119e3c:	1080020c 	andi	r2,r2,8
81119e40:	10000b26 	beq	r2,zero,81119e70 <__svfscanf_r+0xf4>
81119e44:	e0800117 	ldw	r2,4(fp)
81119e48:	18c00044 	addi	r3,r3,1
81119e4c:	e0c00015 	stw	r3,0(fp)
81119e50:	10bfffc4 	addi	r2,r2,-1
81119e54:	e0800115 	stw	r2,4(fp)
81119e58:	94800044 	addi	r18,r18,1
81119e5c:	00bff216 	blt	zero,r2,81119e28 <__reset+0xfb0f9e28>
81119e60:	e00b883a 	mov	r5,fp
81119e64:	b009883a 	mov	r4,r22
81119e68:	111505c0 	call	8111505c <__srefill_r>
81119e6c:	103fee26 	beq	r2,zero,81119e28 <__reset+0xfb0f9e28>
81119e70:	a00d883a 	mov	r6,r20
81119e74:	30800003 	ldbu	r2,0(r6)
81119e78:	35000044 	addi	r20,r6,1
81119e7c:	d8809b15 	stw	r2,620(sp)
81119e80:	103fe21e 	bne	r2,zero,81119e0c <__reset+0xfb0f9e0c>
81119e84:	d880a017 	ldw	r2,640(sp)
81119e88:	00009906 	br	8111a0f0 <__svfscanf_r+0x374>
81119e8c:	00c00944 	movi	r3,37
81119e90:	10c0881e 	bne	r2,r3,8111a0b4 <__svfscanf_r+0x338>
81119e94:	30c00043 	ldbu	r3,1(r6)
81119e98:	0023883a 	mov	r17,zero
81119e9c:	0027883a 	mov	r19,zero
81119ea0:	01001e04 	movi	r4,120
81119ea4:	01401b04 	movi	r5,108
81119ea8:	a1800044 	addi	r6,r20,1
81119eac:	20c0a236 	bltu	r4,r3,8111a138 <__svfscanf_r+0x3bc>
81119eb0:	180490ba 	slli	r2,r3,2
81119eb4:	022044b4 	movhi	r8,33042
81119eb8:	4227b204 	addi	r8,r8,-24888
81119ebc:	1205883a 	add	r2,r2,r8
81119ec0:	10800017 	ldw	r2,0(r2)
81119ec4:	1000683a 	jmp	r2
81119ec8:	8111a0ec 	andhi	r4,r16,18051
81119ecc:	8111a138 	rdprs	r4,r16,18052
81119ed0:	8111a138 	rdprs	r4,r16,18052
81119ed4:	8111a138 	rdprs	r4,r16,18052
81119ed8:	8111a138 	rdprs	r4,r16,18052
81119edc:	8111a138 	rdprs	r4,r16,18052
81119ee0:	8111a138 	rdprs	r4,r16,18052
81119ee4:	8111a138 	rdprs	r4,r16,18052
81119ee8:	8111a138 	rdprs	r4,r16,18052
81119eec:	8111a138 	rdprs	r4,r16,18052
81119ef0:	8111a138 	rdprs	r4,r16,18052
81119ef4:	8111a138 	rdprs	r4,r16,18052
81119ef8:	8111a138 	rdprs	r4,r16,18052
81119efc:	8111a138 	rdprs	r4,r16,18052
81119f00:	8111a138 	rdprs	r4,r16,18052
81119f04:	8111a138 	rdprs	r4,r16,18052
81119f08:	8111a138 	rdprs	r4,r16,18052
81119f0c:	8111a138 	rdprs	r4,r16,18052
81119f10:	8111a138 	rdprs	r4,r16,18052
81119f14:	8111a138 	rdprs	r4,r16,18052
81119f18:	8111a138 	rdprs	r4,r16,18052
81119f1c:	8111a138 	rdprs	r4,r16,18052
81119f20:	8111a138 	rdprs	r4,r16,18052
81119f24:	8111a138 	rdprs	r4,r16,18052
81119f28:	8111a138 	rdprs	r4,r16,18052
81119f2c:	8111a138 	rdprs	r4,r16,18052
81119f30:	8111a138 	rdprs	r4,r16,18052
81119f34:	8111a138 	rdprs	r4,r16,18052
81119f38:	8111a138 	rdprs	r4,r16,18052
81119f3c:	8111a138 	rdprs	r4,r16,18052
81119f40:	8111a138 	rdprs	r4,r16,18052
81119f44:	8111a138 	rdprs	r4,r16,18052
81119f48:	8111a138 	rdprs	r4,r16,18052
81119f4c:	8111a138 	rdprs	r4,r16,18052
81119f50:	8111a138 	rdprs	r4,r16,18052
81119f54:	8111a138 	rdprs	r4,r16,18052
81119f58:	8111a138 	rdprs	r4,r16,18052
81119f5c:	8111a0ac 	andhi	r4,r16,18050
81119f60:	8111a138 	rdprs	r4,r16,18052
81119f64:	8111a138 	rdprs	r4,r16,18052
81119f68:	8111a138 	rdprs	r4,r16,18052
81119f6c:	8111a138 	rdprs	r4,r16,18052
81119f70:	8111a120 	cmpeqi	r4,r16,18052
81119f74:	8111a138 	rdprs	r4,r16,18052
81119f78:	8111a138 	rdprs	r4,r16,18052
81119f7c:	8111a138 	rdprs	r4,r16,18052
81119f80:	8111a138 	rdprs	r4,r16,18052
81119f84:	8111a138 	rdprs	r4,r16,18052
81119f88:	8111a254 	ori	r4,r16,18057
81119f8c:	8111a254 	ori	r4,r16,18057
81119f90:	8111a254 	ori	r4,r16,18057
81119f94:	8111a254 	ori	r4,r16,18057
81119f98:	8111a254 	ori	r4,r16,18057
81119f9c:	8111a254 	ori	r4,r16,18057
81119fa0:	8111a254 	ori	r4,r16,18057
81119fa4:	8111a254 	ori	r4,r16,18057
81119fa8:	8111a254 	ori	r4,r16,18057
81119fac:	8111a254 	ori	r4,r16,18057
81119fb0:	8111a138 	rdprs	r4,r16,18052
81119fb4:	8111a138 	rdprs	r4,r16,18052
81119fb8:	8111a138 	rdprs	r4,r16,18052
81119fbc:	8111a138 	rdprs	r4,r16,18052
81119fc0:	8111a138 	rdprs	r4,r16,18052
81119fc4:	8111a138 	rdprs	r4,r16,18052
81119fc8:	8111a138 	rdprs	r4,r16,18052
81119fcc:	8111a138 	rdprs	r4,r16,18052
81119fd0:	8111a138 	rdprs	r4,r16,18052
81119fd4:	8111a138 	rdprs	r4,r16,18052
81119fd8:	8111a228 	cmpgeui	r4,r16,18056
81119fdc:	8111a2d8 	cmpnei	r4,r16,18059
81119fe0:	8111a138 	rdprs	r4,r16,18052
81119fe4:	8111a2d8 	cmpnei	r4,r16,18059
81119fe8:	8111a138 	rdprs	r4,r16,18052
81119fec:	8111a138 	rdprs	r4,r16,18052
81119ff0:	8111a138 	rdprs	r4,r16,18052
81119ff4:	8111a138 	rdprs	r4,r16,18052
81119ff8:	8111a2c4 	addi	r4,r16,18059
81119ffc:	8111a138 	rdprs	r4,r16,18052
8111a000:	8111a138 	rdprs	r4,r16,18052
8111a004:	8111a298 	cmpnei	r4,r16,18058
8111a008:	8111a138 	rdprs	r4,r16,18052
8111a00c:	8111a138 	rdprs	r4,r16,18052
8111a010:	8111a138 	rdprs	r4,r16,18052
8111a014:	8111a138 	rdprs	r4,r16,18052
8111a018:	8111a138 	rdprs	r4,r16,18052
8111a01c:	8111a138 	rdprs	r4,r16,18052
8111a020:	8111a138 	rdprs	r4,r16,18052
8111a024:	8111a138 	rdprs	r4,r16,18052
8111a028:	8111a270 	cmpltui	r4,r16,18057
8111a02c:	8111a138 	rdprs	r4,r16,18052
8111a030:	8111a138 	rdprs	r4,r16,18052
8111a034:	8111a40c 	andi	r4,r16,18064
8111a038:	8111a138 	rdprs	r4,r16,18052
8111a03c:	8111a138 	rdprs	r4,r16,18052
8111a040:	8111a138 	rdprs	r4,r16,18052
8111a044:	8111a138 	rdprs	r4,r16,18052
8111a048:	8111a138 	rdprs	r4,r16,18052
8111a04c:	8111a138 	rdprs	r4,r16,18052
8111a050:	8111a138 	rdprs	r4,r16,18052
8111a054:	8111a390 	cmplti	r4,r16,18062
8111a058:	8111a368 	cmpgeui	r4,r16,18061
8111a05c:	8111a2d8 	cmpnei	r4,r16,18059
8111a060:	8111a2d8 	cmpnei	r4,r16,18059
8111a064:	8111a2d8 	cmpnei	r4,r16,18059
8111a068:	8111a354 	ori	r4,r16,18061
8111a06c:	8111a498 	cmpnei	r4,r16,18066
8111a070:	8111a138 	rdprs	r4,r16,18052
8111a074:	8111a138 	rdprs	r4,r16,18052
8111a078:	8111a340 	call	88111a34 <__reset+0x20f1a34>
8111a07c:	8111a138 	rdprs	r4,r16,18052
8111a080:	8111a310 	cmplti	r4,r16,18060
8111a084:	8111a2ec 	andhi	r4,r16,18059
8111a088:	8111a1fc 	xorhi	r4,r16,18055
8111a08c:	8111a138 	rdprs	r4,r16,18052
8111a090:	8111a138 	rdprs	r4,r16,18052
8111a094:	8111a1e8 	cmpgeui	r4,r16,18055
8111a098:	8111a138 	rdprs	r4,r16,18052
8111a09c:	8111a170 	cmpltui	r4,r16,18053
8111a0a0:	8111a138 	rdprs	r4,r16,18052
8111a0a4:	8111a138 	rdprs	r4,r16,18052
8111a0a8:	8111a270 	cmpltui	r4,r16,18057
8111a0ac:	d9809d15 	stw	r6,628(sp)
8111a0b0:	3029883a 	mov	r20,r6
8111a0b4:	e0800117 	ldw	r2,4(fp)
8111a0b8:	0081aa0e 	bge	zero,r2,8111a764 <__svfscanf_r+0x9e8>
8111a0bc:	e0800017 	ldw	r2,0(fp)
8111a0c0:	a0ffffc3 	ldbu	r3,-1(r20)
8111a0c4:	11000003 	ldbu	r4,0(r2)
8111a0c8:	20ff6e1e 	bne	r4,r3,81119e84 <__reset+0xfb0f9e84>
8111a0cc:	e0c00117 	ldw	r3,4(fp)
8111a0d0:	10800044 	addi	r2,r2,1
8111a0d4:	e0800015 	stw	r2,0(fp)
8111a0d8:	18bfffc4 	addi	r2,r3,-1
8111a0dc:	e0800115 	stw	r2,4(fp)
8111a0e0:	94800044 	addi	r18,r18,1
8111a0e4:	a00d883a 	mov	r6,r20
8111a0e8:	003f6206 	br	81119e74 <__reset+0xfb0f9e74>
8111a0ec:	00bfffc4 	movi	r2,-1
8111a0f0:	dfc0b417 	ldw	ra,720(sp)
8111a0f4:	df00b317 	ldw	fp,716(sp)
8111a0f8:	ddc0b217 	ldw	r23,712(sp)
8111a0fc:	dd80b117 	ldw	r22,708(sp)
8111a100:	dd40b017 	ldw	r21,704(sp)
8111a104:	dd00af17 	ldw	r20,700(sp)
8111a108:	dcc0ae17 	ldw	r19,696(sp)
8111a10c:	dc80ad17 	ldw	r18,692(sp)
8111a110:	dc40ac17 	ldw	r17,688(sp)
8111a114:	dc00ab17 	ldw	r16,684(sp)
8111a118:	dec0b504 	addi	sp,sp,724
8111a11c:	f800283a 	ret
8111a120:	a0800043 	ldbu	r2,1(r20)
8111a124:	3029883a 	mov	r20,r6
8111a128:	8c400414 	ori	r17,r17,16
8111a12c:	10c03fcc 	andi	r3,r2,255
8111a130:	a1800044 	addi	r6,r20,1
8111a134:	20ff5e2e 	bgeu	r4,r3,81119eb0 <__reset+0xfb0f9eb0>
8111a138:	38c7883a 	add	r3,r7,r3
8111a13c:	18800043 	ldbu	r2,1(r3)
8111a140:	d9809d15 	stw	r6,628(sp)
8111a144:	00c00044 	movi	r3,1
8111a148:	108000cc 	andi	r2,r2,3
8111a14c:	10c18f26 	beq	r2,r3,8111a78c <__svfscanf_r+0xa10>
8111a150:	e0800117 	ldw	r2,4(fp)
8111a154:	00808716 	blt	zero,r2,8111a374 <__svfscanf_r+0x5f8>
8111a158:	e00b883a 	mov	r5,fp
8111a15c:	b009883a 	mov	r4,r22
8111a160:	111505c0 	call	8111505c <__srefill_r>
8111a164:	1001431e 	bne	r2,zero,8111a674 <__svfscanf_r+0x8f8>
8111a168:	b9c00017 	ldw	r7,0(r23)
8111a16c:	00008106 	br	8111a374 <__svfscanf_r+0x5f8>
8111a170:	e0800117 	ldw	r2,4(fp)
8111a174:	d9809d15 	stw	r6,628(sp)
8111a178:	0081a30e 	bge	zero,r2,8111a808 <__svfscanf_r+0xa8c>
8111a17c:	00a044b4 	movhi	r2,33042
8111a180:	1087e304 	addi	r2,r2,8076
8111a184:	02000284 	movi	r8,10
8111a188:	d880a115 	stw	r2,644(sp)
8111a18c:	da009e15 	stw	r8,632(sp)
8111a190:	050000c4 	movi	r20,3
8111a194:	e0c00017 	ldw	r3,0(fp)
8111a198:	00000206 	br	8111a1a4 <__svfscanf_r+0x428>
8111a19c:	18c00044 	addi	r3,r3,1
8111a1a0:	e0c00015 	stw	r3,0(fp)
8111a1a4:	19000003 	ldbu	r4,0(r3)
8111a1a8:	20803fcc 	andi	r2,r4,255
8111a1ac:	3885883a 	add	r2,r7,r2
8111a1b0:	10800043 	ldbu	r2,1(r2)
8111a1b4:	1140020c 	andi	r5,r2,8
8111a1b8:	2801ab26 	beq	r5,zero,8111a868 <__svfscanf_r+0xaec>
8111a1bc:	e0800117 	ldw	r2,4(fp)
8111a1c0:	94800044 	addi	r18,r18,1
8111a1c4:	10bfffc4 	addi	r2,r2,-1
8111a1c8:	e0800115 	stw	r2,4(fp)
8111a1cc:	00bff316 	blt	zero,r2,8111a19c <__reset+0xfb0fa19c>
8111a1d0:	e00b883a 	mov	r5,fp
8111a1d4:	b009883a 	mov	r4,r22
8111a1d8:	111505c0 	call	8111505c <__srefill_r>
8111a1dc:	1001251e 	bne	r2,zero,8111a674 <__svfscanf_r+0x8f8>
8111a1e0:	b9c00017 	ldw	r7,0(r23)
8111a1e4:	003feb06 	br	8111a194 <__reset+0xfb0fa194>
8111a1e8:	e0800117 	ldw	r2,4(fp)
8111a1ec:	d9809d15 	stw	r6,628(sp)
8111a1f0:	00818b0e 	bge	zero,r2,8111a820 <__svfscanf_r+0xaa4>
8111a1f4:	05000084 	movi	r20,2
8111a1f8:	003fe606 	br	8111a194 <__reset+0xfb0fa194>
8111a1fc:	e0800117 	ldw	r2,4(fp)
8111a200:	d9809d15 	stw	r6,628(sp)
8111a204:	8c408814 	ori	r17,r17,544
8111a208:	00801d0e 	bge	zero,r2,8111a280 <__svfscanf_r+0x504>
8111a20c:	00a044b4 	movhi	r2,33042
8111a210:	1087e304 	addi	r2,r2,8076
8111a214:	02000404 	movi	r8,16
8111a218:	d880a115 	stw	r2,644(sp)
8111a21c:	da009e15 	stw	r8,632(sp)
8111a220:	050000c4 	movi	r20,3
8111a224:	003fdb06 	br	8111a194 <__reset+0xfb0fa194>
8111a228:	e0800117 	ldw	r2,4(fp)
8111a22c:	d9809d15 	stw	r6,628(sp)
8111a230:	8c400054 	ori	r17,r17,1
8111a234:	00bfc80e 	bge	zero,r2,8111a158 <__reset+0xfb0fa158>
8111a238:	00e04474 	movhi	r3,33041
8111a23c:	18d59804 	addi	r3,r3,22112
8111a240:	02000284 	movi	r8,10
8111a244:	d8c0a115 	stw	r3,644(sp)
8111a248:	da009e15 	stw	r8,632(sp)
8111a24c:	050000c4 	movi	r20,3
8111a250:	003fd006 	br	8111a194 <__reset+0xfb0fa194>
8111a254:	9cc002a4 	muli	r19,r19,10
8111a258:	a0800043 	ldbu	r2,1(r20)
8111a25c:	3029883a 	mov	r20,r6
8111a260:	98e7883a 	add	r19,r19,r3
8111a264:	9cfff404 	addi	r19,r19,-48
8111a268:	10c03fcc 	andi	r3,r2,255
8111a26c:	003f0e06 	br	81119ea8 <__reset+0xfb0f9ea8>
8111a270:	e0800117 	ldw	r2,4(fp)
8111a274:	d9809d15 	stw	r6,628(sp)
8111a278:	8c408014 	ori	r17,r17,512
8111a27c:	00bfe316 	blt	zero,r2,8111a20c <__reset+0xfb0fa20c>
8111a280:	e00b883a 	mov	r5,fp
8111a284:	b009883a 	mov	r4,r22
8111a288:	111505c0 	call	8111505c <__srefill_r>
8111a28c:	1000f91e 	bne	r2,zero,8111a674 <__svfscanf_r+0x8f8>
8111a290:	b9c00017 	ldw	r7,0(r23)
8111a294:	003fdd06 	br	8111a20c <__reset+0xfb0fa20c>
8111a298:	e0800117 	ldw	r2,4(fp)
8111a29c:	d9809d15 	stw	r6,628(sp)
8111a2a0:	8c400054 	ori	r17,r17,1
8111a2a4:	0080140e 	bge	zero,r2,8111a2f8 <__svfscanf_r+0x57c>
8111a2a8:	00a044b4 	movhi	r2,33042
8111a2ac:	1087e304 	addi	r2,r2,8076
8111a2b0:	02000204 	movi	r8,8
8111a2b4:	d880a115 	stw	r2,644(sp)
8111a2b8:	da009e15 	stw	r8,632(sp)
8111a2bc:	050000c4 	movi	r20,3
8111a2c0:	003fb406 	br	8111a194 <__reset+0xfb0fa194>
8111a2c4:	a0800043 	ldbu	r2,1(r20)
8111a2c8:	8c400094 	ori	r17,r17,2
8111a2cc:	3029883a 	mov	r20,r6
8111a2d0:	10c03fcc 	andi	r3,r2,255
8111a2d4:	003ef406 	br	81119ea8 <__reset+0xfb0f9ea8>
8111a2d8:	e0800117 	ldw	r2,4(fp)
8111a2dc:	d9809d15 	stw	r6,628(sp)
8111a2e0:	0081420e 	bge	zero,r2,8111a7ec <__svfscanf_r+0xa70>
8111a2e4:	05000104 	movi	r20,4
8111a2e8:	003faa06 	br	8111a194 <__reset+0xfb0fa194>
8111a2ec:	e0800117 	ldw	r2,4(fp)
8111a2f0:	d9809d15 	stw	r6,628(sp)
8111a2f4:	00bfec16 	blt	zero,r2,8111a2a8 <__reset+0xfb0fa2a8>
8111a2f8:	e00b883a 	mov	r5,fp
8111a2fc:	b009883a 	mov	r4,r22
8111a300:	111505c0 	call	8111505c <__srefill_r>
8111a304:	1000db1e 	bne	r2,zero,8111a674 <__svfscanf_r+0x8f8>
8111a308:	b9c00017 	ldw	r7,0(r23)
8111a30c:	003fe606 	br	8111a2a8 <__reset+0xfb0fa2a8>
8111a310:	d9809d15 	stw	r6,628(sp)
8111a314:	8880040c 	andi	r2,r17,16
8111a318:	10009c1e 	bne	r2,zero,8111a58c <__svfscanf_r+0x810>
8111a31c:	8880010c 	andi	r2,r17,4
8111a320:	10011e26 	beq	r2,zero,8111a79c <__svfscanf_r+0xa20>
8111a324:	da009c17 	ldw	r8,624(sp)
8111a328:	3029883a 	mov	r20,r6
8111a32c:	40800017 	ldw	r2,0(r8)
8111a330:	42000104 	addi	r8,r8,4
8111a334:	da009c15 	stw	r8,624(sp)
8111a338:	1480000d 	sth	r18,0(r2)
8111a33c:	003ecc06 	br	81119e70 <__reset+0xfb0f9e70>
8111a340:	a0c00043 	ldbu	r3,1(r20)
8111a344:	19410c26 	beq	r3,r5,8111a778 <__svfscanf_r+0x9fc>
8111a348:	8c400054 	ori	r17,r17,1
8111a34c:	3029883a 	mov	r20,r6
8111a350:	003ed506 	br	81119ea8 <__reset+0xfb0f9ea8>
8111a354:	a0800043 	ldbu	r2,1(r20)
8111a358:	8c400114 	ori	r17,r17,4
8111a35c:	3029883a 	mov	r20,r6
8111a360:	10c03fcc 	andi	r3,r2,255
8111a364:	003ed006 	br	81119ea8 <__reset+0xfb0f9ea8>
8111a368:	e0800117 	ldw	r2,4(fp)
8111a36c:	d9809d15 	stw	r6,628(sp)
8111a370:	00bf790e 	bge	zero,r2,8111a158 <__reset+0xfb0fa158>
8111a374:	00a04474 	movhi	r2,33041
8111a378:	10959804 	addi	r2,r2,22112
8111a37c:	02000284 	movi	r8,10
8111a380:	d880a115 	stw	r2,644(sp)
8111a384:	da009e15 	stw	r8,632(sp)
8111a388:	050000c4 	movi	r20,3
8111a38c:	003f8106 	br	8111a194 <__reset+0xfb0fa194>
8111a390:	e0800117 	ldw	r2,4(fp)
8111a394:	d9809d15 	stw	r6,628(sp)
8111a398:	0080c40e 	bge	zero,r2,8111a6ac <__svfscanf_r+0x930>
8111a39c:	9800011e 	bne	r19,zero,8111a3a4 <__svfscanf_r+0x628>
8111a3a0:	04c00044 	movi	r19,1
8111a3a4:	8880004c 	andi	r2,r17,1
8111a3a8:	1000441e 	bne	r2,zero,8111a4bc <__svfscanf_r+0x740>
8111a3ac:	8c40040c 	andi	r17,r17,16
8111a3b0:	8800da26 	beq	r17,zero,8111a71c <__svfscanf_r+0x9a0>
8111a3b4:	0021883a 	mov	r16,zero
8111a3b8:	00000806 	br	8111a3dc <__svfscanf_r+0x660>
8111a3bc:	1887883a 	add	r3,r3,r2
8111a3c0:	e00b883a 	mov	r5,fp
8111a3c4:	b009883a 	mov	r4,r22
8111a3c8:	e0c00015 	stw	r3,0(fp)
8111a3cc:	80a1883a 	add	r16,r16,r2
8111a3d0:	98a7c83a 	sub	r19,r19,r2
8111a3d4:	111505c0 	call	8111505c <__srefill_r>
8111a3d8:	1000ca1e 	bne	r2,zero,8111a704 <__svfscanf_r+0x988>
8111a3dc:	e0800117 	ldw	r2,4(fp)
8111a3e0:	e0c00017 	ldw	r3,0(fp)
8111a3e4:	14fff516 	blt	r2,r19,8111a3bc <__reset+0xfb0fa3bc>
8111a3e8:	14c5c83a 	sub	r2,r2,r19
8111a3ec:	1cd5883a 	add	r10,r3,r19
8111a3f0:	84e1883a 	add	r16,r16,r19
8111a3f4:	e0800115 	stw	r2,4(fp)
8111a3f8:	e2800015 	stw	r10,0(fp)
8111a3fc:	dd009d17 	ldw	r20,628(sp)
8111a400:	9425883a 	add	r18,r18,r16
8111a404:	a00d883a 	mov	r6,r20
8111a408:	003e9a06 	br	81119e74 <__reset+0xfb0f9e74>
8111a40c:	300b883a 	mov	r5,r6
8111a410:	d9005884 	addi	r4,sp,354
8111a414:	d9809d15 	stw	r6,628(sp)
8111a418:	11203640 	call	81120364 <__sccl>
8111a41c:	1029883a 	mov	r20,r2
8111a420:	e0800117 	ldw	r2,4(fp)
8111a424:	0081050e 	bge	zero,r2,8111a83c <__svfscanf_r+0xac0>
8111a428:	e1000017 	ldw	r4,0(fp)
8111a42c:	20800003 	ldbu	r2,0(r4)
8111a430:	98005926 	beq	r19,zero,8111a598 <__svfscanf_r+0x81c>
8111a434:	8c40040c 	andi	r17,r17,16
8111a438:	88005a26 	beq	r17,zero,8111a5a4 <__svfscanf_r+0x828>
8111a43c:	9823883a 	mov	r17,r19
8111a440:	0021883a 	mov	r16,zero
8111a444:	00000106 	br	8111a44c <__svfscanf_r+0x6d0>
8111a448:	20800003 	ldbu	r2,0(r4)
8111a44c:	10803fcc 	andi	r2,r2,255
8111a450:	d8c05884 	addi	r3,sp,354
8111a454:	1885883a 	add	r2,r3,r2
8111a458:	10800007 	ldb	r2,0(r2)
8111a45c:	1000ad26 	beq	r2,zero,8111a714 <__svfscanf_r+0x998>
8111a460:	e0800117 	ldw	r2,4(fp)
8111a464:	21000044 	addi	r4,r4,1
8111a468:	84000044 	addi	r16,r16,1
8111a46c:	10bfffc4 	addi	r2,r2,-1
8111a470:	e0800115 	stw	r2,4(fp)
8111a474:	e1000015 	stw	r4,0(fp)
8111a478:	84c0a026 	beq	r16,r19,8111a6fc <__svfscanf_r+0x980>
8111a47c:	00bff216 	blt	zero,r2,8111a448 <__reset+0xfb0fa448>
8111a480:	e00b883a 	mov	r5,fp
8111a484:	b009883a 	mov	r4,r22
8111a488:	111505c0 	call	8111505c <__srefill_r>
8111a48c:	10009a1e 	bne	r2,zero,8111a6f8 <__svfscanf_r+0x97c>
8111a490:	e1000017 	ldw	r4,0(fp)
8111a494:	003fec06 	br	8111a448 <__reset+0xfb0fa448>
8111a498:	e0800117 	ldw	r2,4(fp)
8111a49c:	d9809d15 	stw	r6,628(sp)
8111a4a0:	0080eb0e 	bge	zero,r2,8111a850 <__svfscanf_r+0xad4>
8111a4a4:	00a04474 	movhi	r2,33041
8111a4a8:	10959804 	addi	r2,r2,22112
8111a4ac:	d880a115 	stw	r2,644(sp)
8111a4b0:	d8009e15 	stw	zero,632(sp)
8111a4b4:	050000c4 	movi	r20,3
8111a4b8:	003f3606 	br	8111a194 <__reset+0xfb0fa194>
8111a4bc:	dd409904 	addi	r21,sp,612
8111a4c0:	8c40040c 	andi	r17,r17,16
8111a4c4:	01800204 	movi	r6,8
8111a4c8:	000b883a 	mov	r5,zero
8111a4cc:	a809883a 	mov	r4,r21
8111a4d0:	dc409f15 	stw	r17,636(sp)
8111a4d4:	1114bc00 	call	81114bc0 <memset>
8111a4d8:	dc409f17 	ldw	r17,636(sp)
8111a4dc:	88006e26 	beq	r17,zero,8111a698 <__svfscanf_r+0x91c>
8111a4e0:	0029883a 	mov	r20,zero
8111a4e4:	0023883a 	mov	r17,zero
8111a4e8:	111e7800 	call	8111e780 <__locale_mb_cur_max>
8111a4ec:	14406126 	beq	r2,r17,8111a674 <__svfscanf_r+0x8f8>
8111a4f0:	e0800017 	ldw	r2,0(fp)
8111a4f4:	e0c00117 	ldw	r3,4(fp)
8111a4f8:	d9000104 	addi	r4,sp,4
8111a4fc:	12000003 	ldbu	r8,0(r2)
8111a500:	18ffffc4 	addi	r3,r3,-1
8111a504:	10800044 	addi	r2,r2,1
8111a508:	e0c00115 	stw	r3,4(fp)
8111a50c:	e0800015 	stw	r2,0(fp)
8111a510:	8c000044 	addi	r16,r17,1
8111a514:	dd400015 	stw	r21,0(sp)
8111a518:	2463883a 	add	r17,r4,r17
8111a51c:	200d883a 	mov	r6,r4
8111a520:	a00b883a 	mov	r5,r20
8111a524:	800f883a 	mov	r7,r16
8111a528:	b009883a 	mov	r4,r22
8111a52c:	8a000005 	stb	r8,0(r17)
8111a530:	111e83c0 	call	8111e83c <_mbrtowc_r>
8111a534:	017fffc4 	movi	r5,-1
8111a538:	11404e26 	beq	r2,r5,8111a674 <__svfscanf_r+0x8f8>
8111a53c:	1000601e 	bne	r2,zero,8111a6c0 <__svfscanf_r+0x944>
8111a540:	da009f17 	ldw	r8,636(sp)
8111a544:	4000641e 	bne	r8,zero,8111a6d8 <__svfscanf_r+0x95c>
8111a548:	a0000015 	stw	zero,0(r20)
8111a54c:	9425883a 	add	r18,r18,r16
8111a550:	9967883a 	add	r19,r19,r5
8111a554:	a5000104 	addi	r20,r20,4
8111a558:	e0800117 	ldw	r2,4(fp)
8111a55c:	0023883a 	mov	r17,zero
8111a560:	00804b16 	blt	zero,r2,8111a690 <__svfscanf_r+0x914>
8111a564:	e00b883a 	mov	r5,fp
8111a568:	b009883a 	mov	r4,r22
8111a56c:	111505c0 	call	8111505c <__srefill_r>
8111a570:	10004726 	beq	r2,zero,8111a690 <__svfscanf_r+0x914>
8111a574:	88003f1e 	bne	r17,zero,8111a674 <__svfscanf_r+0x8f8>
8111a578:	d8c09f17 	ldw	r3,636(sp)
8111a57c:	1800031e 	bne	r3,zero,8111a58c <__svfscanf_r+0x810>
8111a580:	da00a017 	ldw	r8,640(sp)
8111a584:	42000044 	addi	r8,r8,1
8111a588:	da00a015 	stw	r8,640(sp)
8111a58c:	dd009d17 	ldw	r20,628(sp)
8111a590:	a00d883a 	mov	r6,r20
8111a594:	003e3706 	br	81119e74 <__reset+0xfb0f9e74>
8111a598:	8c40040c 	andi	r17,r17,16
8111a59c:	04ffffc4 	movi	r19,-1
8111a5a0:	883fa61e 	bne	r17,zero,8111a43c <__reset+0xfb0fa43c>
8111a5a4:	da009c17 	ldw	r8,624(sp)
8111a5a8:	9abfffc4 	addi	r10,r19,-1
8111a5ac:	44000017 	ldw	r16,0(r8)
8111a5b0:	44400104 	addi	r17,r8,4
8111a5b4:	8007883a 	mov	r3,r16
8111a5b8:	82ab883a 	add	r21,r16,r10
8111a5bc:	00000306 	br	8111a5cc <__svfscanf_r+0x850>
8111a5c0:	e1000017 	ldw	r4,0(fp)
8111a5c4:	9807883a 	mov	r3,r19
8111a5c8:	20800003 	ldbu	r2,0(r4)
8111a5cc:	10803fcc 	andi	r2,r2,255
8111a5d0:	d9405884 	addi	r5,sp,354
8111a5d4:	2885883a 	add	r2,r5,r2
8111a5d8:	10800007 	ldb	r2,0(r2)
8111a5dc:	10004b26 	beq	r2,zero,8111a70c <__svfscanf_r+0x990>
8111a5e0:	e0800117 	ldw	r2,4(fp)
8111a5e4:	21400044 	addi	r5,r4,1
8111a5e8:	e1400015 	stw	r5,0(fp)
8111a5ec:	10bfffc4 	addi	r2,r2,-1
8111a5f0:	e0800115 	stw	r2,4(fp)
8111a5f4:	20800003 	ldbu	r2,0(r4)
8111a5f8:	1cc00044 	addi	r19,r3,1
8111a5fc:	18800005 	stb	r2,0(r3)
8111a600:	1d400726 	beq	r3,r21,8111a620 <__svfscanf_r+0x8a4>
8111a604:	e0800117 	ldw	r2,4(fp)
8111a608:	00bfed16 	blt	zero,r2,8111a5c0 <__reset+0xfb0fa5c0>
8111a60c:	e00b883a 	mov	r5,fp
8111a610:	b009883a 	mov	r4,r22
8111a614:	111505c0 	call	8111505c <__srefill_r>
8111a618:	103fe926 	beq	r2,zero,8111a5c0 <__reset+0xfb0fa5c0>
8111a61c:	84c01526 	beq	r16,r19,8111a674 <__svfscanf_r+0x8f8>
8111a620:	9c21c83a 	sub	r16,r19,r16
8111a624:	803e1726 	beq	r16,zero,81119e84 <__reset+0xfb0f9e84>
8111a628:	da00a017 	ldw	r8,640(sp)
8111a62c:	98000005 	stb	zero,0(r19)
8111a630:	dc409c15 	stw	r17,624(sp)
8111a634:	42000044 	addi	r8,r8,1
8111a638:	da00a015 	stw	r8,640(sp)
8111a63c:	9425883a 	add	r18,r18,r16
8111a640:	a00d883a 	mov	r6,r20
8111a644:	003e0b06 	br	81119e74 <__reset+0xfb0f9e74>
8111a648:	017fff84 	movi	r5,-2
8111a64c:	11439b1e 	bne	r2,r5,8111b4bc <__svfscanf_r+0x1740>
8111a650:	8821883a 	mov	r16,r17
8111a654:	e0800117 	ldw	r2,4(fp)
8111a658:	0082e516 	blt	zero,r2,8111b1f0 <__svfscanf_r+0x1474>
8111a65c:	e00b883a 	mov	r5,fp
8111a660:	b009883a 	mov	r4,r22
8111a664:	111505c0 	call	8111505c <__srefill_r>
8111a668:	1002e126 	beq	r2,zero,8111b1f0 <__svfscanf_r+0x1474>
8111a66c:	dc409f17 	ldw	r17,636(sp)
8111a670:	8002e826 	beq	r16,zero,8111b214 <__svfscanf_r+0x1498>
8111a674:	da00a017 	ldw	r8,640(sp)
8111a678:	403e9c26 	beq	r8,zero,8111a0ec <__reset+0xfb0fa0ec>
8111a67c:	e080030b 	ldhu	r2,12(fp)
8111a680:	1080100c 	andi	r2,r2,64
8111a684:	103e991e 	bne	r2,zero,8111a0ec <__reset+0xfb0fa0ec>
8111a688:	4005883a 	mov	r2,r8
8111a68c:	003e9806 	br	8111a0f0 <__reset+0xfb0fa0f0>
8111a690:	983f951e 	bne	r19,zero,8111a4e8 <__reset+0xfb0fa4e8>
8111a694:	003fb806 	br	8111a578 <__reset+0xfb0fa578>
8111a698:	da009c17 	ldw	r8,624(sp)
8111a69c:	45000017 	ldw	r20,0(r8)
8111a6a0:	42000104 	addi	r8,r8,4
8111a6a4:	da009c15 	stw	r8,624(sp)
8111a6a8:	003f8e06 	br	8111a4e4 <__reset+0xfb0fa4e4>
8111a6ac:	e00b883a 	mov	r5,fp
8111a6b0:	b009883a 	mov	r4,r22
8111a6b4:	111505c0 	call	8111505c <__srefill_r>
8111a6b8:	103f3826 	beq	r2,zero,8111a39c <__reset+0xfb0fa39c>
8111a6bc:	003fed06 	br	8111a674 <__reset+0xfb0fa674>
8111a6c0:	00ffff84 	movi	r3,-2
8111a6c4:	10c0071e 	bne	r2,r3,8111a6e4 <__svfscanf_r+0x968>
8111a6c8:	e0800117 	ldw	r2,4(fp)
8111a6cc:	8023883a 	mov	r17,r16
8111a6d0:	00bf8516 	blt	zero,r2,8111a4e8 <__reset+0xfb0fa4e8>
8111a6d4:	003fa306 	br	8111a564 <__reset+0xfb0fa564>
8111a6d8:	9425883a 	add	r18,r18,r16
8111a6dc:	9cffffc4 	addi	r19,r19,-1
8111a6e0:	003f9d06 	br	8111a558 <__reset+0xfb0fa558>
8111a6e4:	da009f17 	ldw	r8,636(sp)
8111a6e8:	9425883a 	add	r18,r18,r16
8111a6ec:	9cffffc4 	addi	r19,r19,-1
8111a6f0:	403f9826 	beq	r8,zero,8111a554 <__reset+0xfb0fa554>
8111a6f4:	003f9806 	br	8111a558 <__reset+0xfb0fa558>
8111a6f8:	8023883a 	mov	r17,r16
8111a6fc:	8821883a 	mov	r16,r17
8111a700:	003fce06 	br	8111a63c <__reset+0xfb0fa63c>
8111a704:	803f3d1e 	bne	r16,zero,8111a3fc <__reset+0xfb0fa3fc>
8111a708:	003fda06 	br	8111a674 <__reset+0xfb0fa674>
8111a70c:	1827883a 	mov	r19,r3
8111a710:	003fc306 	br	8111a620 <__reset+0xfb0fa620>
8111a714:	803fc91e 	bne	r16,zero,8111a63c <__reset+0xfb0fa63c>
8111a718:	003dda06 	br	81119e84 <__reset+0xfb0f9e84>
8111a71c:	da009c17 	ldw	r8,624(sp)
8111a720:	df000015 	stw	fp,0(sp)
8111a724:	980f883a 	mov	r7,r19
8111a728:	41400017 	ldw	r5,0(r8)
8111a72c:	01800044 	movi	r6,1
8111a730:	b009883a 	mov	r4,r22
8111a734:	111d9540 	call	8111d954 <_fread_r>
8111a738:	da009c17 	ldw	r8,624(sp)
8111a73c:	40c00104 	addi	r3,r8,4
8111a740:	103fcc26 	beq	r2,zero,8111a674 <__reset+0xfb0fa674>
8111a744:	da00a017 	ldw	r8,640(sp)
8111a748:	dd009d17 	ldw	r20,628(sp)
8111a74c:	90a5883a 	add	r18,r18,r2
8111a750:	42000044 	addi	r8,r8,1
8111a754:	da00a015 	stw	r8,640(sp)
8111a758:	d8c09c15 	stw	r3,624(sp)
8111a75c:	a00d883a 	mov	r6,r20
8111a760:	003dc406 	br	81119e74 <__reset+0xfb0f9e74>
8111a764:	e00b883a 	mov	r5,fp
8111a768:	b009883a 	mov	r4,r22
8111a76c:	111505c0 	call	8111505c <__srefill_r>
8111a770:	103e5226 	beq	r2,zero,8111a0bc <__reset+0xfb0fa0bc>
8111a774:	003fbf06 	br	8111a674 <__reset+0xfb0fa674>
8111a778:	a0800083 	ldbu	r2,2(r20)
8111a77c:	8c400094 	ori	r17,r17,2
8111a780:	a5000084 	addi	r20,r20,2
8111a784:	10c03fcc 	andi	r3,r2,255
8111a788:	003dc706 	br	81119ea8 <__reset+0xfb0f9ea8>
8111a78c:	e0800117 	ldw	r2,4(fp)
8111a790:	88e2b03a 	or	r17,r17,r3
8111a794:	00bef716 	blt	zero,r2,8111a374 <__reset+0xfb0fa374>
8111a798:	003e6f06 	br	8111a158 <__reset+0xfb0fa158>
8111a79c:	8880004c 	andi	r2,r17,1
8111a7a0:	10000b1e 	bne	r2,zero,8111a7d0 <__svfscanf_r+0xa54>
8111a7a4:	8c40008c 	andi	r17,r17,2
8111a7a8:	88000926 	beq	r17,zero,8111a7d0 <__svfscanf_r+0xa54>
8111a7ac:	da009c17 	ldw	r8,624(sp)
8111a7b0:	9007d7fa 	srai	r3,r18,31
8111a7b4:	dd009d17 	ldw	r20,628(sp)
8111a7b8:	40800017 	ldw	r2,0(r8)
8111a7bc:	42000104 	addi	r8,r8,4
8111a7c0:	da009c15 	stw	r8,624(sp)
8111a7c4:	14800015 	stw	r18,0(r2)
8111a7c8:	10c00115 	stw	r3,4(r2)
8111a7cc:	003da806 	br	81119e70 <__reset+0xfb0f9e70>
8111a7d0:	da009c17 	ldw	r8,624(sp)
8111a7d4:	dd009d17 	ldw	r20,628(sp)
8111a7d8:	40800017 	ldw	r2,0(r8)
8111a7dc:	42000104 	addi	r8,r8,4
8111a7e0:	da009c15 	stw	r8,624(sp)
8111a7e4:	14800015 	stw	r18,0(r2)
8111a7e8:	003da106 	br	81119e70 <__reset+0xfb0f9e70>
8111a7ec:	e00b883a 	mov	r5,fp
8111a7f0:	b009883a 	mov	r4,r22
8111a7f4:	111505c0 	call	8111505c <__srefill_r>
8111a7f8:	103f9e1e 	bne	r2,zero,8111a674 <__reset+0xfb0fa674>
8111a7fc:	b9c00017 	ldw	r7,0(r23)
8111a800:	05000104 	movi	r20,4
8111a804:	003e6306 	br	8111a194 <__reset+0xfb0fa194>
8111a808:	e00b883a 	mov	r5,fp
8111a80c:	b009883a 	mov	r4,r22
8111a810:	111505c0 	call	8111505c <__srefill_r>
8111a814:	103f971e 	bne	r2,zero,8111a674 <__reset+0xfb0fa674>
8111a818:	b9c00017 	ldw	r7,0(r23)
8111a81c:	003e5706 	br	8111a17c <__reset+0xfb0fa17c>
8111a820:	e00b883a 	mov	r5,fp
8111a824:	b009883a 	mov	r4,r22
8111a828:	111505c0 	call	8111505c <__srefill_r>
8111a82c:	103f911e 	bne	r2,zero,8111a674 <__reset+0xfb0fa674>
8111a830:	b9c00017 	ldw	r7,0(r23)
8111a834:	05000084 	movi	r20,2
8111a838:	003e5606 	br	8111a194 <__reset+0xfb0fa194>
8111a83c:	e00b883a 	mov	r5,fp
8111a840:	b009883a 	mov	r4,r22
8111a844:	111505c0 	call	8111505c <__srefill_r>
8111a848:	103ef726 	beq	r2,zero,8111a428 <__reset+0xfb0fa428>
8111a84c:	003f8906 	br	8111a674 <__reset+0xfb0fa674>
8111a850:	e00b883a 	mov	r5,fp
8111a854:	b009883a 	mov	r4,r22
8111a858:	111505c0 	call	8111505c <__srefill_r>
8111a85c:	103f851e 	bne	r2,zero,8111a674 <__reset+0xfb0fa674>
8111a860:	b9c00017 	ldw	r7,0(r23)
8111a864:	003f0f06 	br	8111a4a4 <__reset+0xfb0fa4a4>
8111a868:	014000c4 	movi	r5,3
8111a86c:	a1414a26 	beq	r20,r5,8111ad98 <__svfscanf_r+0x101c>
8111a870:	01000104 	movi	r4,4
8111a874:	a101f11e 	bne	r20,r4,8111b03c <__svfscanf_r+0x12c0>
8111a878:	b009883a 	mov	r4,r22
8111a87c:	111e7a40 	call	8111e7a4 <_localeconv_r>
8111a880:	10800017 	ldw	r2,0(r2)
8111a884:	98ffffc4 	addi	r3,r19,-1
8111a888:	d880a315 	stw	r2,652(sp)
8111a88c:	00805704 	movi	r2,348
8111a890:	10c21e2e 	bgeu	r2,r3,8111b10c <__svfscanf_r+0x1390>
8111a894:	9cffa8c4 	addi	r19,r19,-349
8111a898:	dcc0a215 	stw	r19,648(sp)
8111a89c:	04c05744 	movi	r19,349
8111a8a0:	8d01e014 	ori	r20,r17,1920
8111a8a4:	0023883a 	mov	r17,zero
8111a8a8:	dc000104 	addi	r16,sp,4
8111a8ac:	8805883a 	mov	r2,r17
8111a8b0:	0019883a 	mov	r12,zero
8111a8b4:	8023883a 	mov	r17,r16
8111a8b8:	b007883a 	mov	r3,r22
8111a8bc:	9821883a 	mov	r16,r19
8111a8c0:	002b883a 	mov	r21,zero
8111a8c4:	d800a515 	stw	zero,660(sp)
8111a8c8:	d800a415 	stw	zero,656(sp)
8111a8cc:	d8009f15 	stw	zero,636(sp)
8111a8d0:	01c01384 	movi	r7,78
8111a8d4:	602d883a 	mov	r22,r12
8111a8d8:	1027883a 	mov	r19,r2
8111a8dc:	e1000017 	ldw	r4,0(fp)
8111a8e0:	21400003 	ldbu	r5,0(r4)
8111a8e4:	28bff544 	addi	r2,r5,-43
8111a8e8:	10803fcc 	andi	r2,r2,255
8111a8ec:	38810e36 	bltu	r7,r2,8111ad28 <__svfscanf_r+0xfac>
8111a8f0:	100490ba 	slli	r2,r2,2
8111a8f4:	01a044b4 	movhi	r6,33042
8111a8f8:	31aa4204 	addi	r6,r6,-22264
8111a8fc:	1185883a 	add	r2,r2,r6
8111a900:	10800017 	ldw	r2,0(r2)
8111a904:	1000683a 	jmp	r2
8111a908:	8111ac00 	call	88111ac0 <__reset+0x20f1ac0>
8111a90c:	8111ad28 	cmpgeui	r4,r16,18100
8111a910:	8111ac00 	call	88111ac0 <__reset+0x20f1ac0>
8111a914:	8111ad28 	cmpgeui	r4,r16,18100
8111a918:	8111ad28 	cmpgeui	r4,r16,18100
8111a91c:	8111abd4 	ori	r4,r16,18095
8111a920:	8111aa44 	addi	r4,r16,18089
8111a924:	8111aa44 	addi	r4,r16,18089
8111a928:	8111aa44 	addi	r4,r16,18089
8111a92c:	8111aa44 	addi	r4,r16,18089
8111a930:	8111aa44 	addi	r4,r16,18089
8111a934:	8111aa44 	addi	r4,r16,18089
8111a938:	8111aa44 	addi	r4,r16,18089
8111a93c:	8111aa44 	addi	r4,r16,18089
8111a940:	8111aa44 	addi	r4,r16,18089
8111a944:	8111ad28 	cmpgeui	r4,r16,18100
8111a948:	8111ad28 	cmpgeui	r4,r16,18100
8111a94c:	8111ad28 	cmpgeui	r4,r16,18100
8111a950:	8111ad28 	cmpgeui	r4,r16,18100
8111a954:	8111ad28 	cmpgeui	r4,r16,18100
8111a958:	8111ad28 	cmpgeui	r4,r16,18100
8111a95c:	8111ad28 	cmpgeui	r4,r16,18100
8111a960:	8111ad18 	cmpnei	r4,r16,18100
8111a964:	8111ad28 	cmpgeui	r4,r16,18100
8111a968:	8111ad28 	cmpgeui	r4,r16,18100
8111a96c:	8111ad28 	cmpgeui	r4,r16,18100
8111a970:	8111acd4 	ori	r4,r16,18099
8111a974:	8111acb8 	rdprs	r4,r16,18098
8111a978:	8111ad28 	cmpgeui	r4,r16,18100
8111a97c:	8111ad28 	cmpgeui	r4,r16,18100
8111a980:	8111ac84 	addi	r4,r16,18098
8111a984:	8111ad28 	cmpgeui	r4,r16,18100
8111a988:	8111ad28 	cmpgeui	r4,r16,18100
8111a98c:	8111ad28 	cmpgeui	r4,r16,18100
8111a990:	8111ad28 	cmpgeui	r4,r16,18100
8111a994:	8111ac4c 	andi	r4,r16,18097
8111a998:	8111ad28 	cmpgeui	r4,r16,18100
8111a99c:	8111ad28 	cmpgeui	r4,r16,18100
8111a9a0:	8111ad28 	cmpgeui	r4,r16,18100
8111a9a4:	8111ad28 	cmpgeui	r4,r16,18100
8111a9a8:	8111ad28 	cmpgeui	r4,r16,18100
8111a9ac:	8111ac30 	cmpltui	r4,r16,18096
8111a9b0:	8111ad28 	cmpgeui	r4,r16,18100
8111a9b4:	8111ad28 	cmpgeui	r4,r16,18100
8111a9b8:	8111ad28 	cmpgeui	r4,r16,18100
8111a9bc:	8111ad28 	cmpgeui	r4,r16,18100
8111a9c0:	8111ac14 	ori	r4,r16,18096
8111a9c4:	8111ad28 	cmpgeui	r4,r16,18100
8111a9c8:	8111ad28 	cmpgeui	r4,r16,18100
8111a9cc:	8111ad28 	cmpgeui	r4,r16,18100
8111a9d0:	8111ad28 	cmpgeui	r4,r16,18100
8111a9d4:	8111ad28 	cmpgeui	r4,r16,18100
8111a9d8:	8111ad28 	cmpgeui	r4,r16,18100
8111a9dc:	8111ad28 	cmpgeui	r4,r16,18100
8111a9e0:	8111ad18 	cmpnei	r4,r16,18100
8111a9e4:	8111ad28 	cmpgeui	r4,r16,18100
8111a9e8:	8111ad28 	cmpgeui	r4,r16,18100
8111a9ec:	8111ad28 	cmpgeui	r4,r16,18100
8111a9f0:	8111acd4 	ori	r4,r16,18099
8111a9f4:	8111acb8 	rdprs	r4,r16,18098
8111a9f8:	8111ad28 	cmpgeui	r4,r16,18100
8111a9fc:	8111ad28 	cmpgeui	r4,r16,18100
8111aa00:	8111ac84 	addi	r4,r16,18098
8111aa04:	8111ad28 	cmpgeui	r4,r16,18100
8111aa08:	8111ad28 	cmpgeui	r4,r16,18100
8111aa0c:	8111ad28 	cmpgeui	r4,r16,18100
8111aa10:	8111ad28 	cmpgeui	r4,r16,18100
8111aa14:	8111ac4c 	andi	r4,r16,18097
8111aa18:	8111ad28 	cmpgeui	r4,r16,18100
8111aa1c:	8111ad28 	cmpgeui	r4,r16,18100
8111aa20:	8111ad28 	cmpgeui	r4,r16,18100
8111aa24:	8111ad28 	cmpgeui	r4,r16,18100
8111aa28:	8111ad28 	cmpgeui	r4,r16,18100
8111aa2c:	8111ac30 	cmpltui	r4,r16,18096
8111aa30:	8111ad28 	cmpgeui	r4,r16,18100
8111aa34:	8111ad28 	cmpgeui	r4,r16,18100
8111aa38:	8111ad28 	cmpgeui	r4,r16,18100
8111aa3c:	8111ad28 	cmpgeui	r4,r16,18100
8111aa40:	8111ac14 	ori	r4,r16,18096
8111aa44:	a8803fcc 	andi	r2,r21,255
8111aa48:	1080201c 	xori	r2,r2,128
8111aa4c:	10bfe004 	addi	r2,r2,-128
8111aa50:	b085883a 	add	r2,r22,r2
8111aa54:	10000d1e 	bne	r2,zero,8111aa8c <__svfscanf_r+0xd10>
8111aa58:	00bf9fc4 	movi	r2,-385
8111aa5c:	a0a8703a 	and	r20,r20,r2
8111aa60:	89400005 	stb	r5,0(r17)
8111aa64:	8c400044 	addi	r17,r17,1
8111aa68:	e0800117 	ldw	r2,4(fp)
8111aa6c:	843fffc4 	addi	r16,r16,-1
8111aa70:	94800044 	addi	r18,r18,1
8111aa74:	10bfffc4 	addi	r2,r2,-1
8111aa78:	e0800115 	stw	r2,4(fp)
8111aa7c:	0080b40e 	bge	zero,r2,8111ad50 <__svfscanf_r+0xfd4>
8111aa80:	21000044 	addi	r4,r4,1
8111aa84:	e1000015 	stw	r4,0(fp)
8111aa88:	803f941e 	bne	r16,zero,8111a8dc <__reset+0xfb0fa8dc>
8111aa8c:	8821883a 	mov	r16,r17
8111aa90:	b019883a 	mov	r12,r22
8111aa94:	9823883a 	mov	r17,r19
8111aa98:	182d883a 	mov	r22,r3
8111aa9c:	9801961e 	bne	r19,zero,8111b0f8 <__svfscanf_r+0x137c>
8111aaa0:	633fffc4 	addi	r12,r12,-1
8111aaa4:	00800044 	movi	r2,1
8111aaa8:	1302882e 	bgeu	r2,r12,8111b4cc <__svfscanf_r+0x1750>
8111aaac:	a8803fcc 	andi	r2,r21,255
8111aab0:	1080201c 	xori	r2,r2,128
8111aab4:	10bfe004 	addi	r2,r2,-128
8111aab8:	113fffc4 	addi	r4,r2,-1
8111aabc:	01400184 	movi	r5,6
8111aac0:	29001136 	bltu	r5,r4,8111ab08 <__svfscanf_r+0xd8c>
8111aac4:	01000084 	movi	r4,2
8111aac8:	2082900e 	bge	r4,r2,8111b50c <__svfscanf_r+0x1790>
8111aacc:	00c000c4 	movi	r3,3
8111aad0:	10c00d26 	beq	r2,r3,8111ab08 <__svfscanf_r+0xd8c>
8111aad4:	9425c83a 	sub	r18,r18,r16
8111aad8:	1827883a 	mov	r19,r3
8111aadc:	843fffc4 	addi	r16,r16,-1
8111aae0:	81400007 	ldb	r5,0(r16)
8111aae4:	e00d883a 	mov	r6,fp
8111aae8:	b009883a 	mov	r4,r22
8111aaec:	11239d40 	call	811239d4 <_ungetc_r>
8111aaf0:	a8bfffc4 	addi	r2,r21,-1
8111aaf4:	10c03fcc 	andi	r3,r2,255
8111aaf8:	8493883a 	add	r9,r16,r18
8111aafc:	102b883a 	mov	r21,r2
8111ab00:	98fff636 	bltu	r19,r3,8111aadc <__reset+0xfb0faadc>
8111ab04:	4825883a 	mov	r18,r9
8111ab08:	a080400c 	andi	r2,r20,256
8111ab0c:	10001426 	beq	r2,zero,8111ab60 <__svfscanf_r+0xde4>
8111ab10:	a081000c 	andi	r2,r20,1024
8111ab14:	1002571e 	bne	r2,zero,8111b474 <__svfscanf_r+0x16f8>
8111ab18:	817fffc7 	ldb	r5,-1(r16)
8111ab1c:	00801944 	movi	r2,101
8111ab20:	84ffffc4 	addi	r19,r16,-1
8111ab24:	957fffc4 	addi	r21,r18,-1
8111ab28:	28800826 	beq	r5,r2,8111ab4c <__svfscanf_r+0xdd0>
8111ab2c:	00801144 	movi	r2,69
8111ab30:	28800626 	beq	r5,r2,8111ab4c <__svfscanf_r+0xdd0>
8111ab34:	e00d883a 	mov	r6,fp
8111ab38:	b009883a 	mov	r4,r22
8111ab3c:	11239d40 	call	811239d4 <_ungetc_r>
8111ab40:	817fff87 	ldb	r5,-2(r16)
8111ab44:	84ffff84 	addi	r19,r16,-2
8111ab48:	957fff84 	addi	r21,r18,-2
8111ab4c:	e00d883a 	mov	r6,fp
8111ab50:	b009883a 	mov	r4,r22
8111ab54:	11239d40 	call	811239d4 <_ungetc_r>
8111ab58:	a825883a 	mov	r18,r21
8111ab5c:	9821883a 	mov	r16,r19
8111ab60:	a080040c 	andi	r2,r20,16
8111ab64:	103e891e 	bne	r2,zero,8111a58c <__reset+0xfb0fa58c>
8111ab68:	80000005 	stb	zero,0(r16)
8111ab6c:	a081800c 	andi	r2,r20,1536
8111ab70:	01010004 	movi	r4,1024
8111ab74:	1101dd26 	beq	r2,r4,8111b2ec <__svfscanf_r+0x1570>
8111ab78:	da00a417 	ldw	r8,656(sp)
8111ab7c:	4001e71e 	bne	r8,zero,8111b31c <__svfscanf_r+0x15a0>
8111ab80:	000d883a 	mov	r6,zero
8111ab84:	d9400104 	addi	r5,sp,4
8111ab88:	b009883a 	mov	r4,r22
8111ab8c:	11205840 	call	81120584 <_strtod_r>
8111ab90:	1021883a 	mov	r16,r2
8111ab94:	a080004c 	andi	r2,r20,1
8111ab98:	1000021e 	bne	r2,zero,8111aba4 <__svfscanf_r+0xe28>
8111ab9c:	a2c0008c 	andi	r11,r20,2
8111aba0:	5801e826 	beq	r11,zero,8111b344 <__svfscanf_r+0x15c8>
8111aba4:	da009c17 	ldw	r8,624(sp)
8111aba8:	40800017 	ldw	r2,0(r8)
8111abac:	42000104 	addi	r8,r8,4
8111abb0:	da009c15 	stw	r8,624(sp)
8111abb4:	14000015 	stw	r16,0(r2)
8111abb8:	10c00115 	stw	r3,4(r2)
8111abbc:	da00a017 	ldw	r8,640(sp)
8111abc0:	dd009d17 	ldw	r20,628(sp)
8111abc4:	42000044 	addi	r8,r8,1
8111abc8:	da00a015 	stw	r8,640(sp)
8111abcc:	a00d883a 	mov	r6,r20
8111abd0:	003ca806 	br	81119e74 <__reset+0xfb0f9e74>
8111abd4:	a080400c 	andi	r2,r20,256
8111abd8:	103f9a26 	beq	r2,zero,8111aa44 <__reset+0xfb0faa44>
8111abdc:	da00a217 	ldw	r8,648(sp)
8111abe0:	00bfdfc4 	movi	r2,-129
8111abe4:	a0a8703a 	and	r20,r20,r2
8111abe8:	9cc00044 	addi	r19,r19,1
8111abec:	403f9e26 	beq	r8,zero,8111aa68 <__reset+0xfb0faa68>
8111abf0:	423fffc4 	addi	r8,r8,-1
8111abf4:	da00a215 	stw	r8,648(sp)
8111abf8:	84000044 	addi	r16,r16,1
8111abfc:	003f9a06 	br	8111aa68 <__reset+0xfb0faa68>
8111ac00:	a080200c 	andi	r2,r20,128
8111ac04:	103fa126 	beq	r2,zero,8111aa8c <__reset+0xfb0faa8c>
8111ac08:	00bfdfc4 	movi	r2,-129
8111ac0c:	a0a8703a 	and	r20,r20,r2
8111ac10:	003f9306 	br	8111aa60 <__reset+0xfb0faa60>
8111ac14:	a8803fcc 	andi	r2,r21,255
8111ac18:	1080201c 	xori	r2,r2,128
8111ac1c:	10bfe004 	addi	r2,r2,-128
8111ac20:	020001c4 	movi	r8,7
8111ac24:	123f991e 	bne	r2,r8,8111aa8c <__reset+0xfb0faa8c>
8111ac28:	05400204 	movi	r21,8
8111ac2c:	003f8c06 	br	8111aa60 <__reset+0xfb0faa60>
8111ac30:	a8803fcc 	andi	r2,r21,255
8111ac34:	1080201c 	xori	r2,r2,128
8111ac38:	10bfe004 	addi	r2,r2,-128
8111ac3c:	01800184 	movi	r6,6
8111ac40:	11bf921e 	bne	r2,r6,8111aa8c <__reset+0xfb0faa8c>
8111ac44:	054001c4 	movi	r21,7
8111ac48:	003f8506 	br	8111aa60 <__reset+0xfb0faa60>
8111ac4c:	b000491e 	bne	r22,zero,8111ad74 <__svfscanf_r+0xff8>
8111ac50:	9800031e 	bne	r19,zero,8111ac60 <__svfscanf_r+0xee4>
8111ac54:	a081c00c 	andi	r2,r20,1792
8111ac58:	0181c004 	movi	r6,1792
8111ac5c:	11819f26 	beq	r2,r6,8111b2dc <__svfscanf_r+0x1560>
8111ac60:	a8803fcc 	andi	r2,r21,255
8111ac64:	1080201c 	xori	r2,r2,128
8111ac68:	10bfe004 	addi	r2,r2,-128
8111ac6c:	01800044 	movi	r6,1
8111ac70:	11800226 	beq	r2,r6,8111ac7c <__svfscanf_r+0xf00>
8111ac74:	01800104 	movi	r6,4
8111ac78:	11bf841e 	bne	r2,r6,8111aa8c <__reset+0xfb0faa8c>
8111ac7c:	ad400044 	addi	r21,r21,1
8111ac80:	003f7706 	br	8111aa60 <__reset+0xfb0faa60>
8111ac84:	a8803fcc 	andi	r2,r21,255
8111ac88:	1080201c 	xori	r2,r2,128
8111ac8c:	10bfe004 	addi	r2,r2,-128
8111ac90:	10003c1e 	bne	r2,zero,8111ad84 <__svfscanf_r+0x1008>
8111ac94:	9801141e 	bne	r19,zero,8111b0e8 <__svfscanf_r+0x136c>
8111ac98:	a081c00c 	andi	r2,r20,1792
8111ac9c:	0181c004 	movi	r6,1792
8111aca0:	11818226 	beq	r2,r6,8111b2ac <__svfscanf_r+0x1530>
8111aca4:	8821883a 	mov	r16,r17
8111aca8:	b019883a 	mov	r12,r22
8111acac:	9823883a 	mov	r17,r19
8111acb0:	182d883a 	mov	r22,r3
8111acb4:	003f7a06 	br	8111aaa0 <__reset+0xfb0faaa0>
8111acb8:	a8803fcc 	andi	r2,r21,255
8111acbc:	1080201c 	xori	r2,r2,128
8111acc0:	10bfe004 	addi	r2,r2,-128
8111acc4:	01800084 	movi	r6,2
8111acc8:	11bf701e 	bne	r2,r6,8111aa8c <__reset+0xfb0faa8c>
8111accc:	054000c4 	movi	r21,3
8111acd0:	003f6306 	br	8111aa60 <__reset+0xfb0faa60>
8111acd4:	a081400c 	andi	r2,r20,1280
8111acd8:	01810004 	movi	r6,1024
8111acdc:	11800326 	beq	r2,r6,8111acec <__svfscanf_r+0xf70>
8111ace0:	a184703a 	and	r2,r20,r6
8111ace4:	103f6926 	beq	r2,zero,8111aa8c <__reset+0xfb0faa8c>
8111ace8:	983fee26 	beq	r19,zero,8111aca4 <__reset+0xfb0faca4>
8111acec:	a080800c 	andi	r2,r20,512
8111acf0:	1000041e 	bne	r2,zero,8111ad04 <__svfscanf_r+0xf88>
8111acf4:	da009f17 	ldw	r8,636(sp)
8111acf8:	dc40a515 	stw	r17,660(sp)
8111acfc:	9a27c83a 	sub	r19,r19,r8
8111ad00:	dcc0a415 	stw	r19,656(sp)
8111ad04:	00be1fc4 	movi	r2,-1921
8111ad08:	a0a8703a 	and	r20,r20,r2
8111ad0c:	a5006014 	ori	r20,r20,384
8111ad10:	0027883a 	mov	r19,zero
8111ad14:	003f5206 	br	8111aa60 <__reset+0xfb0faa60>
8111ad18:	00800044 	movi	r2,1
8111ad1c:	b0bf5b1e 	bne	r22,r2,8111aa8c <__reset+0xfb0faa8c>
8111ad20:	05800084 	movi	r22,2
8111ad24:	003f4e06 	br	8111aa60 <__reset+0xfb0faa60>
8111ad28:	d980a317 	ldw	r6,652(sp)
8111ad2c:	30800003 	ldbu	r2,0(r6)
8111ad30:	29803fcc 	andi	r6,r5,255
8111ad34:	30bf551e 	bne	r6,r2,8111aa8c <__reset+0xfb0faa8c>
8111ad38:	a080800c 	andi	r2,r20,512
8111ad3c:	103f5326 	beq	r2,zero,8111aa8c <__reset+0xfb0faa8c>
8111ad40:	023f5fc4 	movi	r8,-641
8111ad44:	a228703a 	and	r20,r20,r8
8111ad48:	dcc09f15 	stw	r19,636(sp)
8111ad4c:	003f4406 	br	8111aa60 <__reset+0xfb0faa60>
8111ad50:	1809883a 	mov	r4,r3
8111ad54:	e00b883a 	mov	r5,fp
8111ad58:	d8c0a615 	stw	r3,664(sp)
8111ad5c:	d9c0aa15 	stw	r7,680(sp)
8111ad60:	111505c0 	call	8111505c <__srefill_r>
8111ad64:	d8c0a617 	ldw	r3,664(sp)
8111ad68:	d9c0aa17 	ldw	r7,680(sp)
8111ad6c:	103f4626 	beq	r2,zero,8111aa88 <__reset+0xfb0faa88>
8111ad70:	003f4606 	br	8111aa8c <__reset+0xfb0faa8c>
8111ad74:	00800084 	movi	r2,2
8111ad78:	b0bfb91e 	bne	r22,r2,8111ac60 <__reset+0xfb0fac60>
8111ad7c:	058000c4 	movi	r22,3
8111ad80:	003f3706 	br	8111aa60 <__reset+0xfb0faa60>
8111ad84:	018000c4 	movi	r6,3
8111ad88:	11bfbc26 	beq	r2,r6,8111ac7c <__reset+0xfb0fac7c>
8111ad8c:	01800144 	movi	r6,5
8111ad90:	11bfba26 	beq	r2,r6,8111ac7c <__reset+0xfb0fac7c>
8111ad94:	003f3d06 	br	8111aa8c <__reset+0xfb0faa8c>
8111ad98:	98bfffc4 	addi	r2,r19,-1
8111ad9c:	01405704 	movi	r5,348
8111ada0:	2880d82e 	bgeu	r5,r2,8111b104 <__svfscanf_r+0x1388>
8111ada4:	99ffa8c4 	addi	r7,r19,-349
8111ada8:	04c05744 	movi	r19,349
8111adac:	8c436014 	ori	r17,r17,3456
8111adb0:	9013883a 	mov	r9,r18
8111adb4:	8825883a 	mov	r18,r17
8111adb8:	dc409e17 	ldw	r17,632(sp)
8111adbc:	0029883a 	mov	r20,zero
8111adc0:	dc000104 	addi	r16,sp,4
8111adc4:	05401344 	movi	r21,77
8111adc8:	02c08004 	movi	r11,512
8111adcc:	01bf7fc4 	movi	r6,-513
8111add0:	023fdfc4 	movi	r8,-129
8111add4:	20bff544 	addi	r2,r4,-43
8111add8:	10803fcc 	andi	r2,r2,255
8111addc:	a8807236 	bltu	r21,r2,8111afa8 <__svfscanf_r+0x122c>
8111ade0:	100490ba 	slli	r2,r2,2
8111ade4:	016044b4 	movhi	r5,33042
8111ade8:	296b7e04 	addi	r5,r5,-21000
8111adec:	1145883a 	add	r2,r2,r5
8111adf0:	10800017 	ldw	r2,0(r2)
8111adf4:	1000683a 	jmp	r2
8111adf8:	8111b02c 	andhi	r4,r16,18112
8111adfc:	8111afa8 	cmpgeui	r4,r16,18110
8111ae00:	8111b02c 	andhi	r4,r16,18112
8111ae04:	8111afa8 	cmpgeui	r4,r16,18110
8111ae08:	8111afa8 	cmpgeui	r4,r16,18110
8111ae0c:	8111b004 	addi	r4,r16,18112
8111ae10:	8111afe4 	muli	r4,r16,18111
8111ae14:	8111afe4 	muli	r4,r16,18111
8111ae18:	8111afe4 	muli	r4,r16,18111
8111ae1c:	8111afe4 	muli	r4,r16,18111
8111ae20:	8111afe4 	muli	r4,r16,18111
8111ae24:	8111afe4 	muli	r4,r16,18111
8111ae28:	8111afe4 	muli	r4,r16,18111
8111ae2c:	8111af8c 	andi	r4,r16,18110
8111ae30:	8111af8c 	andi	r4,r16,18110
8111ae34:	8111afa8 	cmpgeui	r4,r16,18110
8111ae38:	8111afa8 	cmpgeui	r4,r16,18110
8111ae3c:	8111afa8 	cmpgeui	r4,r16,18110
8111ae40:	8111afa8 	cmpgeui	r4,r16,18110
8111ae44:	8111afa8 	cmpgeui	r4,r16,18110
8111ae48:	8111afa8 	cmpgeui	r4,r16,18110
8111ae4c:	8111afa8 	cmpgeui	r4,r16,18110
8111ae50:	8111af78 	rdprs	r4,r16,18109
8111ae54:	8111af78 	rdprs	r4,r16,18109
8111ae58:	8111af78 	rdprs	r4,r16,18109
8111ae5c:	8111af78 	rdprs	r4,r16,18109
8111ae60:	8111af78 	rdprs	r4,r16,18109
8111ae64:	8111af78 	rdprs	r4,r16,18109
8111ae68:	8111afa8 	cmpgeui	r4,r16,18110
8111ae6c:	8111afa8 	cmpgeui	r4,r16,18110
8111ae70:	8111afa8 	cmpgeui	r4,r16,18110
8111ae74:	8111afa8 	cmpgeui	r4,r16,18110
8111ae78:	8111afa8 	cmpgeui	r4,r16,18110
8111ae7c:	8111afa8 	cmpgeui	r4,r16,18110
8111ae80:	8111afa8 	cmpgeui	r4,r16,18110
8111ae84:	8111afa8 	cmpgeui	r4,r16,18110
8111ae88:	8111afa8 	cmpgeui	r4,r16,18110
8111ae8c:	8111afa8 	cmpgeui	r4,r16,18110
8111ae90:	8111afa8 	cmpgeui	r4,r16,18110
8111ae94:	8111afa8 	cmpgeui	r4,r16,18110
8111ae98:	8111afa8 	cmpgeui	r4,r16,18110
8111ae9c:	8111afa8 	cmpgeui	r4,r16,18110
8111aea0:	8111afa8 	cmpgeui	r4,r16,18110
8111aea4:	8111afa8 	cmpgeui	r4,r16,18110
8111aea8:	8111afa8 	cmpgeui	r4,r16,18110
8111aeac:	8111af30 	cmpltui	r4,r16,18108
8111aeb0:	8111afa8 	cmpgeui	r4,r16,18110
8111aeb4:	8111afa8 	cmpgeui	r4,r16,18110
8111aeb8:	8111afa8 	cmpgeui	r4,r16,18110
8111aebc:	8111afa8 	cmpgeui	r4,r16,18110
8111aec0:	8111afa8 	cmpgeui	r4,r16,18110
8111aec4:	8111afa8 	cmpgeui	r4,r16,18110
8111aec8:	8111afa8 	cmpgeui	r4,r16,18110
8111aecc:	8111afa8 	cmpgeui	r4,r16,18110
8111aed0:	8111af78 	rdprs	r4,r16,18109
8111aed4:	8111af78 	rdprs	r4,r16,18109
8111aed8:	8111af78 	rdprs	r4,r16,18109
8111aedc:	8111af78 	rdprs	r4,r16,18109
8111aee0:	8111af78 	rdprs	r4,r16,18109
8111aee4:	8111af78 	rdprs	r4,r16,18109
8111aee8:	8111afa8 	cmpgeui	r4,r16,18110
8111aeec:	8111afa8 	cmpgeui	r4,r16,18110
8111aef0:	8111afa8 	cmpgeui	r4,r16,18110
8111aef4:	8111afa8 	cmpgeui	r4,r16,18110
8111aef8:	8111afa8 	cmpgeui	r4,r16,18110
8111aefc:	8111afa8 	cmpgeui	r4,r16,18110
8111af00:	8111afa8 	cmpgeui	r4,r16,18110
8111af04:	8111afa8 	cmpgeui	r4,r16,18110
8111af08:	8111afa8 	cmpgeui	r4,r16,18110
8111af0c:	8111afa8 	cmpgeui	r4,r16,18110
8111af10:	8111afa8 	cmpgeui	r4,r16,18110
8111af14:	8111afa8 	cmpgeui	r4,r16,18110
8111af18:	8111afa8 	cmpgeui	r4,r16,18110
8111af1c:	8111afa8 	cmpgeui	r4,r16,18110
8111af20:	8111afa8 	cmpgeui	r4,r16,18110
8111af24:	8111afa8 	cmpgeui	r4,r16,18110
8111af28:	8111afa8 	cmpgeui	r4,r16,18110
8111af2c:	8111af30 	cmpltui	r4,r16,18108
8111af30:	9081800c 	andi	r2,r18,1536
8111af34:	12c01c1e 	bne	r2,r11,8111afa8 <__svfscanf_r+0x122c>
8111af38:	91a4703a 	and	r18,r18,r6
8111af3c:	94814014 	ori	r18,r18,1280
8111af40:	04400404 	movi	r17,16
8111af44:	81000005 	stb	r4,0(r16)
8111af48:	84000044 	addi	r16,r16,1
8111af4c:	e0800117 	ldw	r2,4(fp)
8111af50:	10bfffc4 	addi	r2,r2,-1
8111af54:	e0800115 	stw	r2,4(fp)
8111af58:	0080540e 	bge	zero,r2,8111b0ac <__svfscanf_r+0x1330>
8111af5c:	18c00044 	addi	r3,r3,1
8111af60:	e0c00015 	stw	r3,0(fp)
8111af64:	9cffffc4 	addi	r19,r19,-1
8111af68:	98000f26 	beq	r19,zero,8111afa8 <__svfscanf_r+0x122c>
8111af6c:	e0c00017 	ldw	r3,0(fp)
8111af70:	19000003 	ldbu	r4,0(r3)
8111af74:	003f9706 	br	8111add4 <__reset+0xfb0fadd4>
8111af78:	00800284 	movi	r2,10
8111af7c:	14400a0e 	bge	r2,r17,8111afa8 <__svfscanf_r+0x122c>
8111af80:	00bd1fc4 	movi	r2,-2945
8111af84:	90a4703a 	and	r18,r18,r2
8111af88:	003fee06 	br	8111af44 <__reset+0xfb0faf44>
8111af8c:	01604534 	movhi	r5,33044
8111af90:	8c63883a 	add	r17,r17,r17
8111af94:	2948be84 	addi	r5,r5,8954
8111af98:	2c45883a 	add	r2,r5,r17
8111af9c:	1440000f 	ldh	r17,0(r2)
8111afa0:	00800204 	movi	r2,8
8111afa4:	147ff616 	blt	r2,r17,8111af80 <__reset+0xfb0faf80>
8111afa8:	dc409e15 	stw	r17,632(sp)
8111afac:	9023883a 	mov	r17,r18
8111afb0:	8880400c 	andi	r2,r17,256
8111afb4:	4825883a 	mov	r18,r9
8111afb8:	10000426 	beq	r2,zero,8111afcc <__svfscanf_r+0x1250>
8111afbc:	d9800104 	addi	r6,sp,4
8111afc0:	3400be36 	bltu	r6,r16,8111b2bc <__svfscanf_r+0x1540>
8111afc4:	da000104 	addi	r8,sp,4
8111afc8:	443bae26 	beq	r8,r16,81119e84 <__reset+0xfb0f9e84>
8111afcc:	8880040c 	andi	r2,r17,16
8111afd0:	10009326 	beq	r2,zero,8111b220 <__svfscanf_r+0x14a4>
8111afd4:	d8800104 	addi	r2,sp,4
8111afd8:	80a1c83a 	sub	r16,r16,r2
8111afdc:	8521883a 	add	r16,r16,r20
8111afe0:	003d0606 	br	8111a3fc <__reset+0xfb0fa3fc>
8111afe4:	01604534 	movhi	r5,33044
8111afe8:	8c63883a 	add	r17,r17,r17
8111afec:	2948be84 	addi	r5,r5,8954
8111aff0:	2c45883a 	add	r2,r5,r17
8111aff4:	1440000f 	ldh	r17,0(r2)
8111aff8:	00bd1fc4 	movi	r2,-2945
8111affc:	90a4703a 	and	r18,r18,r2
8111b000:	003fd006 	br	8111af44 <__reset+0xfb0faf44>
8111b004:	9082000c 	andi	r2,r18,2048
8111b008:	103fce26 	beq	r2,zero,8111af44 <__reset+0xfb0faf44>
8111b00c:	8800021e 	bne	r17,zero,8111b018 <__svfscanf_r+0x129c>
8111b010:	94808014 	ori	r18,r18,512
8111b014:	04400204 	movi	r17,8
8111b018:	9081000c 	andi	r2,r18,1024
8111b01c:	10009426 	beq	r2,zero,8111b270 <__svfscanf_r+0x14f4>
8111b020:	00be9fc4 	movi	r2,-1409
8111b024:	90a4703a 	and	r18,r18,r2
8111b028:	003fc606 	br	8111af44 <__reset+0xfb0faf44>
8111b02c:	9080200c 	andi	r2,r18,128
8111b030:	103fdd26 	beq	r2,zero,8111afa8 <__reset+0xfb0fafa8>
8111b034:	9224703a 	and	r18,r18,r8
8111b038:	003fc206 	br	8111af44 <__reset+0xfb0faf44>
8111b03c:	9800011e 	bne	r19,zero,8111b044 <__svfscanf_r+0x12c8>
8111b040:	04ffffc4 	movi	r19,-1
8111b044:	8900004c 	andi	r4,r17,1
8111b048:	20005b1e 	bne	r4,zero,8111b1b8 <__svfscanf_r+0x143c>
8111b04c:	8c40040c 	andi	r17,r17,16
8111b050:	88003026 	beq	r17,zero,8111b114 <__svfscanf_r+0x1398>
8111b054:	0021883a 	mov	r16,zero
8111b058:	00000306 	br	8111b068 <__svfscanf_r+0x12ec>
8111b05c:	18800003 	ldbu	r2,0(r3)
8111b060:	3885883a 	add	r2,r7,r2
8111b064:	10800043 	ldbu	r2,1(r2)
8111b068:	1080020c 	andi	r2,r2,8
8111b06c:	103ce31e 	bne	r2,zero,8111a3fc <__reset+0xfb0fa3fc>
8111b070:	e0800117 	ldw	r2,4(fp)
8111b074:	18c00044 	addi	r3,r3,1
8111b078:	84000044 	addi	r16,r16,1
8111b07c:	10bfffc4 	addi	r2,r2,-1
8111b080:	e0800115 	stw	r2,4(fp)
8111b084:	e0c00015 	stw	r3,0(fp)
8111b088:	84fcdc26 	beq	r16,r19,8111a3fc <__reset+0xfb0fa3fc>
8111b08c:	00bff316 	blt	zero,r2,8111b05c <__reset+0xfb0fb05c>
8111b090:	e00b883a 	mov	r5,fp
8111b094:	b009883a 	mov	r4,r22
8111b098:	111505c0 	call	8111505c <__srefill_r>
8111b09c:	103cd71e 	bne	r2,zero,8111a3fc <__reset+0xfb0fa3fc>
8111b0a0:	b9c00017 	ldw	r7,0(r23)
8111b0a4:	e0c00017 	ldw	r3,0(fp)
8111b0a8:	003fec06 	br	8111b05c <__reset+0xfb0fb05c>
8111b0ac:	e00b883a 	mov	r5,fp
8111b0b0:	b009883a 	mov	r4,r22
8111b0b4:	d980a715 	stw	r6,668(sp)
8111b0b8:	d9c0aa15 	stw	r7,680(sp)
8111b0bc:	da00a815 	stw	r8,672(sp)
8111b0c0:	da40a915 	stw	r9,676(sp)
8111b0c4:	dac0a615 	stw	r11,664(sp)
8111b0c8:	111505c0 	call	8111505c <__srefill_r>
8111b0cc:	d980a717 	ldw	r6,668(sp)
8111b0d0:	d9c0aa17 	ldw	r7,680(sp)
8111b0d4:	da00a817 	ldw	r8,672(sp)
8111b0d8:	da40a917 	ldw	r9,676(sp)
8111b0dc:	dac0a617 	ldw	r11,664(sp)
8111b0e0:	103fa026 	beq	r2,zero,8111af64 <__reset+0xfb0faf64>
8111b0e4:	003fb006 	br	8111afa8 <__reset+0xfb0fafa8>
8111b0e8:	8821883a 	mov	r16,r17
8111b0ec:	b019883a 	mov	r12,r22
8111b0f0:	9823883a 	mov	r17,r19
8111b0f4:	182d883a 	mov	r22,r3
8111b0f8:	00bfbfc4 	movi	r2,-257
8111b0fc:	a0a8703a 	and	r20,r20,r2
8111b100:	003e6706 	br	8111aaa0 <__reset+0xfb0faaa0>
8111b104:	000f883a 	mov	r7,zero
8111b108:	003f2806 	br	8111adac <__reset+0xfb0fadac>
8111b10c:	d800a215 	stw	zero,648(sp)
8111b110:	003de306 	br	8111a8a0 <__reset+0xfb0fa8a0>
8111b114:	da009c17 	ldw	r8,624(sp)
8111b118:	9abfffc4 	addi	r10,r19,-1
8111b11c:	44400017 	ldw	r17,0(r8)
8111b120:	44000104 	addi	r16,r8,4
8111b124:	880b883a 	mov	r5,r17
8111b128:	8aa9883a 	add	r20,r17,r10
8111b12c:	00000606 	br	8111b148 <__svfscanf_r+0x13cc>
8111b130:	e0c00017 	ldw	r3,0(fp)
8111b134:	b9000017 	ldw	r4,0(r23)
8111b138:	a80b883a 	mov	r5,r21
8111b13c:	18800003 	ldbu	r2,0(r3)
8111b140:	2085883a 	add	r2,r4,r2
8111b144:	10800043 	ldbu	r2,1(r2)
8111b148:	1080020c 	andi	r2,r2,8
8111b14c:	1000551e 	bne	r2,zero,8111b2a4 <__svfscanf_r+0x1528>
8111b150:	e0800117 	ldw	r2,4(fp)
8111b154:	19000044 	addi	r4,r3,1
8111b158:	e1000015 	stw	r4,0(fp)
8111b15c:	10bfffc4 	addi	r2,r2,-1
8111b160:	e0800115 	stw	r2,4(fp)
8111b164:	18800003 	ldbu	r2,0(r3)
8111b168:	2d400044 	addi	r21,r5,1
8111b16c:	a827883a 	mov	r19,r21
8111b170:	28800005 	stb	r2,0(r5)
8111b174:	2d000626 	beq	r5,r20,8111b190 <__svfscanf_r+0x1414>
8111b178:	e0800117 	ldw	r2,4(fp)
8111b17c:	00bfec16 	blt	zero,r2,8111b130 <__reset+0xfb0fb130>
8111b180:	e00b883a 	mov	r5,fp
8111b184:	b009883a 	mov	r4,r22
8111b188:	111505c0 	call	8111505c <__srefill_r>
8111b18c:	103fe826 	beq	r2,zero,8111b130 <__reset+0xfb0fb130>
8111b190:	da00a017 	ldw	r8,640(sp)
8111b194:	dd009d17 	ldw	r20,628(sp)
8111b198:	9c63c83a 	sub	r17,r19,r17
8111b19c:	42000044 	addi	r8,r8,1
8111b1a0:	98000005 	stb	zero,0(r19)
8111b1a4:	9465883a 	add	r18,r18,r17
8111b1a8:	da00a015 	stw	r8,640(sp)
8111b1ac:	dc009c15 	stw	r16,624(sp)
8111b1b0:	a00d883a 	mov	r6,r20
8111b1b4:	003b2f06 	br	81119e74 <__reset+0xfb0f9e74>
8111b1b8:	dd409904 	addi	r21,sp,612
8111b1bc:	8c40040c 	andi	r17,r17,16
8111b1c0:	01800204 	movi	r6,8
8111b1c4:	000b883a 	mov	r5,zero
8111b1c8:	a809883a 	mov	r4,r21
8111b1cc:	1114bc00 	call	81114bc0 <memset>
8111b1d0:	8800401e 	bne	r17,zero,8111b2d4 <__svfscanf_r+0x1558>
8111b1d4:	da009c17 	ldw	r8,624(sp)
8111b1d8:	45000017 	ldw	r20,0(r8)
8111b1dc:	42000104 	addi	r8,r8,4
8111b1e0:	da009c15 	stw	r8,624(sp)
8111b1e4:	000d883a 	mov	r6,zero
8111b1e8:	3021883a 	mov	r16,r6
8111b1ec:	dc409f15 	stw	r17,636(sp)
8111b1f0:	e0800017 	ldw	r2,0(fp)
8111b1f4:	b8c00017 	ldw	r3,0(r23)
8111b1f8:	10800003 	ldbu	r2,0(r2)
8111b1fc:	1885883a 	add	r2,r3,r2
8111b200:	10800043 	ldbu	r2,1(r2)
8111b204:	1080020c 	andi	r2,r2,8
8111b208:	1000011e 	bne	r2,zero,8111b210 <__svfscanf_r+0x1494>
8111b20c:	9800701e 	bne	r19,zero,8111b3d0 <__svfscanf_r+0x1654>
8111b210:	dc409f17 	ldw	r17,636(sp)
8111b214:	883cdd1e 	bne	r17,zero,8111a58c <__reset+0xfb0fa58c>
8111b218:	a0000015 	stw	zero,0(r20)
8111b21c:	003cd806 	br	8111a580 <__reset+0xfb0fa580>
8111b220:	d9c09e17 	ldw	r7,632(sp)
8111b224:	da00a117 	ldw	r8,644(sp)
8111b228:	000d883a 	mov	r6,zero
8111b22c:	d9400104 	addi	r5,sp,4
8111b230:	b009883a 	mov	r4,r22
8111b234:	80000005 	stb	zero,0(r16)
8111b238:	403ee83a 	callr	r8
8111b23c:	88c0080c 	andi	r3,r17,32
8111b240:	1800121e 	bne	r3,zero,8111b28c <__svfscanf_r+0x1510>
8111b244:	88c0010c 	andi	r3,r17,4
8111b248:	18004d26 	beq	r3,zero,8111b380 <__svfscanf_r+0x1604>
8111b24c:	da009c17 	ldw	r8,624(sp)
8111b250:	40c00017 	ldw	r3,0(r8)
8111b254:	42000104 	addi	r8,r8,4
8111b258:	da009c15 	stw	r8,624(sp)
8111b25c:	1880000d 	sth	r2,0(r3)
8111b260:	da00a017 	ldw	r8,640(sp)
8111b264:	42000044 	addi	r8,r8,1
8111b268:	da00a015 	stw	r8,640(sp)
8111b26c:	003f5906 	br	8111afd4 <__reset+0xfb0fafd4>
8111b270:	00bf1fc4 	movi	r2,-897
8111b274:	90a4703a 	and	r18,r18,r2
8111b278:	38000226 	beq	r7,zero,8111b284 <__svfscanf_r+0x1508>
8111b27c:	39ffffc4 	addi	r7,r7,-1
8111b280:	9cc00044 	addi	r19,r19,1
8111b284:	a5000044 	addi	r20,r20,1
8111b288:	003f3006 	br	8111af4c <__reset+0xfb0faf4c>
8111b28c:	da009c17 	ldw	r8,624(sp)
8111b290:	40c00017 	ldw	r3,0(r8)
8111b294:	42000104 	addi	r8,r8,4
8111b298:	da009c15 	stw	r8,624(sp)
8111b29c:	18800015 	stw	r2,0(r3)
8111b2a0:	003fef06 	br	8111b260 <__reset+0xfb0fb260>
8111b2a4:	2827883a 	mov	r19,r5
8111b2a8:	003fb906 	br	8111b190 <__reset+0xfb0fb190>
8111b2ac:	01be1fc4 	movi	r6,-1921
8111b2b0:	a1a8703a 	and	r20,r20,r6
8111b2b4:	05400044 	movi	r21,1
8111b2b8:	003de906 	br	8111aa60 <__reset+0xfb0faa60>
8111b2bc:	817fffc7 	ldb	r5,-1(r16)
8111b2c0:	e00d883a 	mov	r6,fp
8111b2c4:	b009883a 	mov	r4,r22
8111b2c8:	843fffc4 	addi	r16,r16,-1
8111b2cc:	11239d40 	call	811239d4 <_ungetc_r>
8111b2d0:	003f3c06 	br	8111afc4 <__reset+0xfb0fafc4>
8111b2d4:	dd009b04 	addi	r20,sp,620
8111b2d8:	003fc206 	br	8111b1e4 <__reset+0xfb0fb1e4>
8111b2dc:	00be1fc4 	movi	r2,-1921
8111b2e0:	a0a8703a 	and	r20,r20,r2
8111b2e4:	05800044 	movi	r22,1
8111b2e8:	003ddd06 	br	8111aa60 <__reset+0xfb0faa60>
8111b2ec:	d8c09f17 	ldw	r3,636(sp)
8111b2f0:	88e3c83a 	sub	r17,r17,r3
8111b2f4:	044dc83a 	sub	r6,zero,r17
8111b2f8:	883e2126 	beq	r17,zero,8111ab80 <__reset+0xfb0fab80>
8111b2fc:	d88055c4 	addi	r2,sp,343
8111b300:	80800136 	bltu	r16,r2,8111b308 <__svfscanf_r+0x158c>
8111b304:	dc005584 	addi	r16,sp,342
8111b308:	01604534 	movhi	r5,33044
8111b30c:	2948bd04 	addi	r5,r5,8948
8111b310:	8009883a 	mov	r4,r16
8111b314:	11153700 	call	81115370 <sprintf>
8111b318:	003e1906 	br	8111ab80 <__reset+0xfb0fab80>
8111b31c:	d8c0a517 	ldw	r3,660(sp)
8111b320:	000d883a 	mov	r6,zero
8111b324:	01c00284 	movi	r7,10
8111b328:	19400044 	addi	r5,r3,1
8111b32c:	b009883a 	mov	r4,r22
8111b330:	11156600 	call	81115660 <_strtol_r>
8111b334:	da00a417 	ldw	r8,656(sp)
8111b338:	dc00a517 	ldw	r16,660(sp)
8111b33c:	120dc83a 	sub	r6,r2,r8
8111b340:	003fee06 	br	8111b2fc <__reset+0xfb0fb2fc>
8111b344:	da009c17 	ldw	r8,624(sp)
8111b348:	180b883a 	mov	r5,r3
8111b34c:	8009883a 	mov	r4,r16
8111b350:	45000017 	ldw	r20,0(r8)
8111b354:	44400104 	addi	r17,r8,4
8111b358:	d8c0a615 	stw	r3,664(sp)
8111b35c:	11202f00 	call	811202f0 <__fpclassifyd>
8111b360:	d8c0a617 	ldw	r3,664(sp)
8111b364:	10006426 	beq	r2,zero,8111b4f8 <__svfscanf_r+0x177c>
8111b368:	8009883a 	mov	r4,r16
8111b36c:	180b883a 	mov	r5,r3
8111b370:	11136580 	call	81113658 <__truncdfsf2>
8111b374:	a0800015 	stw	r2,0(r20)
8111b378:	dc409c15 	stw	r17,624(sp)
8111b37c:	003e0f06 	br	8111abbc <__reset+0xfb0fabbc>
8111b380:	88c0004c 	andi	r3,r17,1
8111b384:	183fc11e 	bne	r3,zero,8111b28c <__reset+0xfb0fb28c>
8111b388:	8c40008c 	andi	r17,r17,2
8111b38c:	883fbf26 	beq	r17,zero,8111b28c <__reset+0xfb0fb28c>
8111b390:	da00a117 	ldw	r8,644(sp)
8111b394:	00a044b4 	movhi	r2,33042
8111b398:	1087e304 	addi	r2,r2,8076
8111b39c:	d9c09e17 	ldw	r7,632(sp)
8111b3a0:	000d883a 	mov	r6,zero
8111b3a4:	d9400104 	addi	r5,sp,4
8111b3a8:	b009883a 	mov	r4,r22
8111b3ac:	40806226 	beq	r8,r2,8111b538 <__svfscanf_r+0x17bc>
8111b3b0:	1121ca40 	call	81121ca4 <_strtoll_r>
8111b3b4:	da009c17 	ldw	r8,624(sp)
8111b3b8:	41000017 	ldw	r4,0(r8)
8111b3bc:	42000104 	addi	r8,r8,4
8111b3c0:	da009c15 	stw	r8,624(sp)
8111b3c4:	20800015 	stw	r2,0(r4)
8111b3c8:	20c00115 	stw	r3,4(r4)
8111b3cc:	003fa406 	br	8111b260 <__reset+0xfb0fb260>
8111b3d0:	111e7800 	call	8111e780 <__locale_mb_cur_max>
8111b3d4:	80bca726 	beq	r16,r2,8111a674 <__reset+0xfb0fa674>
8111b3d8:	e0800017 	ldw	r2,0(fp)
8111b3dc:	e1000117 	ldw	r4,4(fp)
8111b3e0:	d8c00104 	addi	r3,sp,4
8111b3e4:	12000003 	ldbu	r8,0(r2)
8111b3e8:	213fffc4 	addi	r4,r4,-1
8111b3ec:	10800044 	addi	r2,r2,1
8111b3f0:	e1000115 	stw	r4,4(fp)
8111b3f4:	e0800015 	stw	r2,0(fp)
8111b3f8:	84400044 	addi	r17,r16,1
8111b3fc:	dd400015 	stw	r21,0(sp)
8111b400:	1c21883a 	add	r16,r3,r16
8111b404:	b009883a 	mov	r4,r22
8111b408:	880f883a 	mov	r7,r17
8111b40c:	180d883a 	mov	r6,r3
8111b410:	a00b883a 	mov	r5,r20
8111b414:	82000005 	stb	r8,0(r16)
8111b418:	111e83c0 	call	8111e83c <_mbrtowc_r>
8111b41c:	013fffc4 	movi	r4,-1
8111b420:	113c9426 	beq	r2,r4,8111a674 <__reset+0xfb0fa674>
8111b424:	103c881e 	bne	r2,zero,8111a648 <__reset+0xfb0fa648>
8111b428:	a0000015 	stw	zero,0(r20)
8111b42c:	0009883a 	mov	r4,zero
8111b430:	111e6c00 	call	8111e6c0 <iswspace>
8111b434:	10001a26 	beq	r2,zero,8111b4a0 <__svfscanf_r+0x1724>
8111b438:	8821883a 	mov	r16,r17
8111b43c:	dc409f17 	ldw	r17,636(sp)
8111b440:	803f7426 	beq	r16,zero,8111b214 <__reset+0xfb0fb214>
8111b444:	843fffc4 	addi	r16,r16,-1
8111b448:	d9800104 	addi	r6,sp,4
8111b44c:	342b883a 	add	r21,r6,r16
8111b450:	00000106 	br	8111b458 <__svfscanf_r+0x16dc>
8111b454:	843fffc4 	addi	r16,r16,-1
8111b458:	a9400003 	ldbu	r5,0(r21)
8111b45c:	e00d883a 	mov	r6,fp
8111b460:	b009883a 	mov	r4,r22
8111b464:	11239d40 	call	811239d4 <_ungetc_r>
8111b468:	ad7fffc4 	addi	r21,r21,-1
8111b46c:	803ff91e 	bne	r16,zero,8111b454 <__reset+0xfb0fb454>
8111b470:	003f6806 	br	8111b214 <__reset+0xfb0fb214>
8111b474:	d9800104 	addi	r6,sp,4
8111b478:	802b883a 	mov	r21,r16
8111b47c:	343a812e 	bgeu	r6,r16,81119e84 <__reset+0xfb0f9e84>
8111b480:	ad7fffc4 	addi	r21,r21,-1
8111b484:	a9400007 	ldb	r5,0(r21)
8111b488:	e00d883a 	mov	r6,fp
8111b48c:	b009883a 	mov	r4,r22
8111b490:	11239d40 	call	811239d4 <_ungetc_r>
8111b494:	da000104 	addi	r8,sp,4
8111b498:	457ff91e 	bne	r8,r21,8111b480 <__reset+0xfb0fb480>
8111b49c:	003a7906 	br	81119e84 <__reset+0xfb0f9e84>
8111b4a0:	da009f17 	ldw	r8,636(sp)
8111b4a4:	9465883a 	add	r18,r18,r17
8111b4a8:	9cffffc4 	addi	r19,r19,-1
8111b4ac:	4000051e 	bne	r8,zero,8111b4c4 <__svfscanf_r+0x1748>
8111b4b0:	a5000104 	addi	r20,r20,4
8111b4b4:	0021883a 	mov	r16,zero
8111b4b8:	003c6606 	br	8111a654 <__reset+0xfb0fa654>
8111b4bc:	a1000017 	ldw	r4,0(r20)
8111b4c0:	003fdb06 	br	8111b430 <__reset+0xfb0fb430>
8111b4c4:	0021883a 	mov	r16,zero
8111b4c8:	003c6206 	br	8111a654 <__reset+0xfb0fa654>
8111b4cc:	d8800104 	addi	r2,sp,4
8111b4d0:	802b883a 	mov	r21,r16
8111b4d4:	143a6b2e 	bgeu	r2,r16,81119e84 <__reset+0xfb0f9e84>
8111b4d8:	ad7fffc4 	addi	r21,r21,-1
8111b4dc:	a9400007 	ldb	r5,0(r21)
8111b4e0:	e00d883a 	mov	r6,fp
8111b4e4:	b009883a 	mov	r4,r22
8111b4e8:	11239d40 	call	811239d4 <_ungetc_r>
8111b4ec:	d8c00104 	addi	r3,sp,4
8111b4f0:	1d7ff91e 	bne	r3,r21,8111b4d8 <__reset+0xfb0fb4d8>
8111b4f4:	003a6306 	br	81119e84 <__reset+0xfb0f9e84>
8111b4f8:	0009883a 	mov	r4,zero
8111b4fc:	11204340 	call	81120434 <nanf>
8111b500:	a0800015 	stw	r2,0(r20)
8111b504:	dc409c15 	stw	r17,624(sp)
8111b508:	003dac06 	br	8111abbc <__reset+0xfb0fabbc>
8111b50c:	d9000104 	addi	r4,sp,4
8111b510:	802b883a 	mov	r21,r16
8111b514:	243a5b2e 	bgeu	r4,r16,81119e84 <__reset+0xfb0f9e84>
8111b518:	ad7fffc4 	addi	r21,r21,-1
8111b51c:	a9400007 	ldb	r5,0(r21)
8111b520:	e00d883a 	mov	r6,fp
8111b524:	b009883a 	mov	r4,r22
8111b528:	11239d40 	call	811239d4 <_ungetc_r>
8111b52c:	d9400104 	addi	r5,sp,4
8111b530:	2d7ff91e 	bne	r5,r21,8111b518 <__reset+0xfb0fb518>
8111b534:	003a5306 	br	81119e84 <__reset+0xfb0f9e84>
8111b538:	11221fc0 	call	811221fc <_strtoull_r>
8111b53c:	003f9d06 	br	8111b3b4 <__reset+0xfb0fb3b4>

8111b540 <vfscanf>:
8111b540:	00a04534 	movhi	r2,33044
8111b544:	defffb04 	addi	sp,sp,-20
8111b548:	10928704 	addi	r2,r2,18972
8111b54c:	de00012e 	bgeu	sp,et,8111b554 <vfscanf+0x14>
8111b550:	003b68fa 	trap	3
8111b554:	dc000215 	stw	r16,8(sp)
8111b558:	14000017 	ldw	r16,0(r2)
8111b55c:	dc400315 	stw	r17,12(sp)
8111b560:	dfc00415 	stw	ra,16(sp)
8111b564:	2023883a 	mov	r17,r4
8111b568:	80000826 	beq	r16,zero,8111b58c <vfscanf+0x4c>
8111b56c:	80800e17 	ldw	r2,56(r16)
8111b570:	1000061e 	bne	r2,zero,8111b58c <vfscanf+0x4c>
8111b574:	8009883a 	mov	r4,r16
8111b578:	d9400015 	stw	r5,0(sp)
8111b57c:	d9800115 	stw	r6,4(sp)
8111b580:	111d8580 	call	8111d858 <__sinit>
8111b584:	d9800117 	ldw	r6,4(sp)
8111b588:	d9400017 	ldw	r5,0(sp)
8111b58c:	300f883a 	mov	r7,r6
8111b590:	8009883a 	mov	r4,r16
8111b594:	280d883a 	mov	r6,r5
8111b598:	880b883a 	mov	r5,r17
8111b59c:	dfc00417 	ldw	ra,16(sp)
8111b5a0:	dc400317 	ldw	r17,12(sp)
8111b5a4:	dc000217 	ldw	r16,8(sp)
8111b5a8:	dec00504 	addi	sp,sp,20
8111b5ac:	1119d7c1 	jmpi	81119d7c <__svfscanf_r>

8111b5b0 <__svfscanf>:
8111b5b0:	00a04534 	movhi	r2,33044
8111b5b4:	10928704 	addi	r2,r2,18972
8111b5b8:	300f883a 	mov	r7,r6
8111b5bc:	280d883a 	mov	r6,r5
8111b5c0:	200b883a 	mov	r5,r4
8111b5c4:	11000017 	ldw	r4,0(r2)
8111b5c8:	1119d7c1 	jmpi	81119d7c <__svfscanf_r>

8111b5cc <_vfscanf_r>:
8111b5cc:	defffb04 	addi	sp,sp,-20
8111b5d0:	de00012e 	bgeu	sp,et,8111b5d8 <_vfscanf_r+0xc>
8111b5d4:	003b68fa 	trap	3
8111b5d8:	dc000315 	stw	r16,12(sp)
8111b5dc:	dfc00415 	stw	ra,16(sp)
8111b5e0:	2021883a 	mov	r16,r4
8111b5e4:	20000926 	beq	r4,zero,8111b60c <_vfscanf_r+0x40>
8111b5e8:	20800e17 	ldw	r2,56(r4)
8111b5ec:	1000071e 	bne	r2,zero,8111b60c <_vfscanf_r+0x40>
8111b5f0:	d9400015 	stw	r5,0(sp)
8111b5f4:	d9800115 	stw	r6,4(sp)
8111b5f8:	d9c00215 	stw	r7,8(sp)
8111b5fc:	111d8580 	call	8111d858 <__sinit>
8111b600:	d9c00217 	ldw	r7,8(sp)
8111b604:	d9800117 	ldw	r6,4(sp)
8111b608:	d9400017 	ldw	r5,0(sp)
8111b60c:	8009883a 	mov	r4,r16
8111b610:	dfc00417 	ldw	ra,16(sp)
8111b614:	dc000317 	ldw	r16,12(sp)
8111b618:	dec00504 	addi	sp,sp,20
8111b61c:	1119d7c1 	jmpi	81119d7c <__svfscanf_r>

8111b620 <__swbuf_r>:
8111b620:	defffb04 	addi	sp,sp,-20
8111b624:	de00012e 	bgeu	sp,et,8111b62c <__swbuf_r+0xc>
8111b628:	003b68fa 	trap	3
8111b62c:	dcc00315 	stw	r19,12(sp)
8111b630:	dc800215 	stw	r18,8(sp)
8111b634:	dc000015 	stw	r16,0(sp)
8111b638:	dfc00415 	stw	ra,16(sp)
8111b63c:	dc400115 	stw	r17,4(sp)
8111b640:	2025883a 	mov	r18,r4
8111b644:	2827883a 	mov	r19,r5
8111b648:	3021883a 	mov	r16,r6
8111b64c:	20000226 	beq	r4,zero,8111b658 <__swbuf_r+0x38>
8111b650:	20800e17 	ldw	r2,56(r4)
8111b654:	10004226 	beq	r2,zero,8111b760 <__swbuf_r+0x140>
8111b658:	80800617 	ldw	r2,24(r16)
8111b65c:	8100030b 	ldhu	r4,12(r16)
8111b660:	80800215 	stw	r2,8(r16)
8111b664:	2080020c 	andi	r2,r4,8
8111b668:	10003626 	beq	r2,zero,8111b744 <__swbuf_r+0x124>
8111b66c:	80c00417 	ldw	r3,16(r16)
8111b670:	18003426 	beq	r3,zero,8111b744 <__swbuf_r+0x124>
8111b674:	2088000c 	andi	r2,r4,8192
8111b678:	9c403fcc 	andi	r17,r19,255
8111b67c:	10001a26 	beq	r2,zero,8111b6e8 <__swbuf_r+0xc8>
8111b680:	80800017 	ldw	r2,0(r16)
8111b684:	81000517 	ldw	r4,20(r16)
8111b688:	10c7c83a 	sub	r3,r2,r3
8111b68c:	1900200e 	bge	r3,r4,8111b710 <__swbuf_r+0xf0>
8111b690:	18c00044 	addi	r3,r3,1
8111b694:	81000217 	ldw	r4,8(r16)
8111b698:	11400044 	addi	r5,r2,1
8111b69c:	81400015 	stw	r5,0(r16)
8111b6a0:	213fffc4 	addi	r4,r4,-1
8111b6a4:	81000215 	stw	r4,8(r16)
8111b6a8:	14c00005 	stb	r19,0(r2)
8111b6ac:	80800517 	ldw	r2,20(r16)
8111b6b0:	10c01e26 	beq	r2,r3,8111b72c <__swbuf_r+0x10c>
8111b6b4:	8080030b 	ldhu	r2,12(r16)
8111b6b8:	1080004c 	andi	r2,r2,1
8111b6bc:	10000226 	beq	r2,zero,8111b6c8 <__swbuf_r+0xa8>
8111b6c0:	00800284 	movi	r2,10
8111b6c4:	88801926 	beq	r17,r2,8111b72c <__swbuf_r+0x10c>
8111b6c8:	8805883a 	mov	r2,r17
8111b6cc:	dfc00417 	ldw	ra,16(sp)
8111b6d0:	dcc00317 	ldw	r19,12(sp)
8111b6d4:	dc800217 	ldw	r18,8(sp)
8111b6d8:	dc400117 	ldw	r17,4(sp)
8111b6dc:	dc000017 	ldw	r16,0(sp)
8111b6e0:	dec00504 	addi	sp,sp,20
8111b6e4:	f800283a 	ret
8111b6e8:	81401917 	ldw	r5,100(r16)
8111b6ec:	00b7ffc4 	movi	r2,-8193
8111b6f0:	21080014 	ori	r4,r4,8192
8111b6f4:	2884703a 	and	r2,r5,r2
8111b6f8:	80801915 	stw	r2,100(r16)
8111b6fc:	80800017 	ldw	r2,0(r16)
8111b700:	8100030d 	sth	r4,12(r16)
8111b704:	81000517 	ldw	r4,20(r16)
8111b708:	10c7c83a 	sub	r3,r2,r3
8111b70c:	193fe016 	blt	r3,r4,8111b690 <__reset+0xfb0fb690>
8111b710:	800b883a 	mov	r5,r16
8111b714:	9009883a 	mov	r4,r18
8111b718:	111d45c0 	call	8111d45c <_fflush_r>
8111b71c:	1000071e 	bne	r2,zero,8111b73c <__swbuf_r+0x11c>
8111b720:	80800017 	ldw	r2,0(r16)
8111b724:	00c00044 	movi	r3,1
8111b728:	003fda06 	br	8111b694 <__reset+0xfb0fb694>
8111b72c:	800b883a 	mov	r5,r16
8111b730:	9009883a 	mov	r4,r18
8111b734:	111d45c0 	call	8111d45c <_fflush_r>
8111b738:	103fe326 	beq	r2,zero,8111b6c8 <__reset+0xfb0fb6c8>
8111b73c:	00bfffc4 	movi	r2,-1
8111b740:	003fe206 	br	8111b6cc <__reset+0xfb0fb6cc>
8111b744:	800b883a 	mov	r5,r16
8111b748:	9009883a 	mov	r4,r18
8111b74c:	111b7e80 	call	8111b7e8 <__swsetup_r>
8111b750:	103ffa1e 	bne	r2,zero,8111b73c <__reset+0xfb0fb73c>
8111b754:	8100030b 	ldhu	r4,12(r16)
8111b758:	80c00417 	ldw	r3,16(r16)
8111b75c:	003fc506 	br	8111b674 <__reset+0xfb0fb674>
8111b760:	111d8580 	call	8111d858 <__sinit>
8111b764:	003fbc06 	br	8111b658 <__reset+0xfb0fb658>

8111b768 <__swbuf>:
8111b768:	00a04534 	movhi	r2,33044
8111b76c:	10928704 	addi	r2,r2,18972
8111b770:	280d883a 	mov	r6,r5
8111b774:	200b883a 	mov	r5,r4
8111b778:	11000017 	ldw	r4,0(r2)
8111b77c:	111b6201 	jmpi	8111b620 <__swbuf_r>

8111b780 <_write_r>:
8111b780:	defffd04 	addi	sp,sp,-12
8111b784:	de00012e 	bgeu	sp,et,8111b78c <_write_r+0xc>
8111b788:	003b68fa 	trap	3
8111b78c:	2805883a 	mov	r2,r5
8111b790:	dc000015 	stw	r16,0(sp)
8111b794:	04204534 	movhi	r16,33044
8111b798:	dc400115 	stw	r17,4(sp)
8111b79c:	300b883a 	mov	r5,r6
8111b7a0:	8412e404 	addi	r16,r16,19344
8111b7a4:	2023883a 	mov	r17,r4
8111b7a8:	380d883a 	mov	r6,r7
8111b7ac:	1009883a 	mov	r4,r2
8111b7b0:	dfc00215 	stw	ra,8(sp)
8111b7b4:	80000015 	stw	zero,0(r16)
8111b7b8:	112ae780 	call	8112ae78 <write>
8111b7bc:	00ffffc4 	movi	r3,-1
8111b7c0:	10c00526 	beq	r2,r3,8111b7d8 <_write_r+0x58>
8111b7c4:	dfc00217 	ldw	ra,8(sp)
8111b7c8:	dc400117 	ldw	r17,4(sp)
8111b7cc:	dc000017 	ldw	r16,0(sp)
8111b7d0:	dec00304 	addi	sp,sp,12
8111b7d4:	f800283a 	ret
8111b7d8:	80c00017 	ldw	r3,0(r16)
8111b7dc:	183ff926 	beq	r3,zero,8111b7c4 <__reset+0xfb0fb7c4>
8111b7e0:	88c00015 	stw	r3,0(r17)
8111b7e4:	003ff706 	br	8111b7c4 <__reset+0xfb0fb7c4>

8111b7e8 <__swsetup_r>:
8111b7e8:	00a04534 	movhi	r2,33044
8111b7ec:	defffd04 	addi	sp,sp,-12
8111b7f0:	10928704 	addi	r2,r2,18972
8111b7f4:	de00012e 	bgeu	sp,et,8111b7fc <__swsetup_r+0x14>
8111b7f8:	003b68fa 	trap	3
8111b7fc:	dc400115 	stw	r17,4(sp)
8111b800:	2023883a 	mov	r17,r4
8111b804:	11000017 	ldw	r4,0(r2)
8111b808:	dc000015 	stw	r16,0(sp)
8111b80c:	dfc00215 	stw	ra,8(sp)
8111b810:	2821883a 	mov	r16,r5
8111b814:	20000226 	beq	r4,zero,8111b820 <__swsetup_r+0x38>
8111b818:	20800e17 	ldw	r2,56(r4)
8111b81c:	10003126 	beq	r2,zero,8111b8e4 <__swsetup_r+0xfc>
8111b820:	8080030b 	ldhu	r2,12(r16)
8111b824:	10c0020c 	andi	r3,r2,8
8111b828:	1009883a 	mov	r4,r2
8111b82c:	18000f26 	beq	r3,zero,8111b86c <__swsetup_r+0x84>
8111b830:	80c00417 	ldw	r3,16(r16)
8111b834:	18001526 	beq	r3,zero,8111b88c <__swsetup_r+0xa4>
8111b838:	1100004c 	andi	r4,r2,1
8111b83c:	20001c1e 	bne	r4,zero,8111b8b0 <__swsetup_r+0xc8>
8111b840:	1080008c 	andi	r2,r2,2
8111b844:	1000291e 	bne	r2,zero,8111b8ec <__swsetup_r+0x104>
8111b848:	80800517 	ldw	r2,20(r16)
8111b84c:	80800215 	stw	r2,8(r16)
8111b850:	18001c26 	beq	r3,zero,8111b8c4 <__swsetup_r+0xdc>
8111b854:	0005883a 	mov	r2,zero
8111b858:	dfc00217 	ldw	ra,8(sp)
8111b85c:	dc400117 	ldw	r17,4(sp)
8111b860:	dc000017 	ldw	r16,0(sp)
8111b864:	dec00304 	addi	sp,sp,12
8111b868:	f800283a 	ret
8111b86c:	2080040c 	andi	r2,r4,16
8111b870:	10002e26 	beq	r2,zero,8111b92c <__swsetup_r+0x144>
8111b874:	2080010c 	andi	r2,r4,4
8111b878:	10001e1e 	bne	r2,zero,8111b8f4 <__swsetup_r+0x10c>
8111b87c:	80c00417 	ldw	r3,16(r16)
8111b880:	20800214 	ori	r2,r4,8
8111b884:	8080030d 	sth	r2,12(r16)
8111b888:	183feb1e 	bne	r3,zero,8111b838 <__reset+0xfb0fb838>
8111b88c:	1100a00c 	andi	r4,r2,640
8111b890:	01408004 	movi	r5,512
8111b894:	217fe826 	beq	r4,r5,8111b838 <__reset+0xfb0fb838>
8111b898:	800b883a 	mov	r5,r16
8111b89c:	8809883a 	mov	r4,r17
8111b8a0:	11140980 	call	81114098 <__smakebuf_r>
8111b8a4:	8080030b 	ldhu	r2,12(r16)
8111b8a8:	80c00417 	ldw	r3,16(r16)
8111b8ac:	003fe206 	br	8111b838 <__reset+0xfb0fb838>
8111b8b0:	80800517 	ldw	r2,20(r16)
8111b8b4:	80000215 	stw	zero,8(r16)
8111b8b8:	0085c83a 	sub	r2,zero,r2
8111b8bc:	80800615 	stw	r2,24(r16)
8111b8c0:	183fe41e 	bne	r3,zero,8111b854 <__reset+0xfb0fb854>
8111b8c4:	80c0030b 	ldhu	r3,12(r16)
8111b8c8:	0005883a 	mov	r2,zero
8111b8cc:	1900200c 	andi	r4,r3,128
8111b8d0:	203fe126 	beq	r4,zero,8111b858 <__reset+0xfb0fb858>
8111b8d4:	18c01014 	ori	r3,r3,64
8111b8d8:	80c0030d 	sth	r3,12(r16)
8111b8dc:	00bfffc4 	movi	r2,-1
8111b8e0:	003fdd06 	br	8111b858 <__reset+0xfb0fb858>
8111b8e4:	111d8580 	call	8111d858 <__sinit>
8111b8e8:	003fcd06 	br	8111b820 <__reset+0xfb0fb820>
8111b8ec:	0005883a 	mov	r2,zero
8111b8f0:	003fd606 	br	8111b84c <__reset+0xfb0fb84c>
8111b8f4:	81400c17 	ldw	r5,48(r16)
8111b8f8:	28000626 	beq	r5,zero,8111b914 <__swsetup_r+0x12c>
8111b8fc:	80801004 	addi	r2,r16,64
8111b900:	28800326 	beq	r5,r2,8111b910 <__swsetup_r+0x128>
8111b904:	8809883a 	mov	r4,r17
8111b908:	111dcf00 	call	8111dcf0 <_free_r>
8111b90c:	8100030b 	ldhu	r4,12(r16)
8111b910:	80000c15 	stw	zero,48(r16)
8111b914:	80c00417 	ldw	r3,16(r16)
8111b918:	00bff6c4 	movi	r2,-37
8111b91c:	1108703a 	and	r4,r2,r4
8111b920:	80000115 	stw	zero,4(r16)
8111b924:	80c00015 	stw	r3,0(r16)
8111b928:	003fd506 	br	8111b880 <__reset+0xfb0fb880>
8111b92c:	00800244 	movi	r2,9
8111b930:	88800015 	stw	r2,0(r17)
8111b934:	20801014 	ori	r2,r4,64
8111b938:	8080030d 	sth	r2,12(r16)
8111b93c:	00bfffc4 	movi	r2,-1
8111b940:	003fc506 	br	8111b858 <__reset+0xfb0fb858>

8111b944 <_close_r>:
8111b944:	defffd04 	addi	sp,sp,-12
8111b948:	de00012e 	bgeu	sp,et,8111b950 <_close_r+0xc>
8111b94c:	003b68fa 	trap	3
8111b950:	dc000015 	stw	r16,0(sp)
8111b954:	04204534 	movhi	r16,33044
8111b958:	dc400115 	stw	r17,4(sp)
8111b95c:	8412e404 	addi	r16,r16,19344
8111b960:	2023883a 	mov	r17,r4
8111b964:	2809883a 	mov	r4,r5
8111b968:	dfc00215 	stw	ra,8(sp)
8111b96c:	80000015 	stw	zero,0(r16)
8111b970:	11293b80 	call	811293b8 <close>
8111b974:	00ffffc4 	movi	r3,-1
8111b978:	10c00526 	beq	r2,r3,8111b990 <_close_r+0x4c>
8111b97c:	dfc00217 	ldw	ra,8(sp)
8111b980:	dc400117 	ldw	r17,4(sp)
8111b984:	dc000017 	ldw	r16,0(sp)
8111b988:	dec00304 	addi	sp,sp,12
8111b98c:	f800283a 	ret
8111b990:	80c00017 	ldw	r3,0(r16)
8111b994:	183ff926 	beq	r3,zero,8111b97c <__reset+0xfb0fb97c>
8111b998:	88c00015 	stw	r3,0(r17)
8111b99c:	003ff706 	br	8111b97c <__reset+0xfb0fb97c>

8111b9a0 <quorem>:
8111b9a0:	defff704 	addi	sp,sp,-36
8111b9a4:	de00012e 	bgeu	sp,et,8111b9ac <quorem+0xc>
8111b9a8:	003b68fa 	trap	3
8111b9ac:	dc800215 	stw	r18,8(sp)
8111b9b0:	20800417 	ldw	r2,16(r4)
8111b9b4:	2c800417 	ldw	r18,16(r5)
8111b9b8:	dfc00815 	stw	ra,32(sp)
8111b9bc:	ddc00715 	stw	r23,28(sp)
8111b9c0:	dd800615 	stw	r22,24(sp)
8111b9c4:	dd400515 	stw	r21,20(sp)
8111b9c8:	dd000415 	stw	r20,16(sp)
8111b9cc:	dcc00315 	stw	r19,12(sp)
8111b9d0:	dc400115 	stw	r17,4(sp)
8111b9d4:	dc000015 	stw	r16,0(sp)
8111b9d8:	14807116 	blt	r2,r18,8111bba0 <quorem+0x200>
8111b9dc:	94bfffc4 	addi	r18,r18,-1
8111b9e0:	94ad883a 	add	r22,r18,r18
8111b9e4:	b5ad883a 	add	r22,r22,r22
8111b9e8:	2c400504 	addi	r17,r5,20
8111b9ec:	8da9883a 	add	r20,r17,r22
8111b9f0:	25400504 	addi	r21,r4,20
8111b9f4:	282f883a 	mov	r23,r5
8111b9f8:	adad883a 	add	r22,r21,r22
8111b9fc:	a1400017 	ldw	r5,0(r20)
8111ba00:	2021883a 	mov	r16,r4
8111ba04:	b1000017 	ldw	r4,0(r22)
8111ba08:	29400044 	addi	r5,r5,1
8111ba0c:	11270780 	call	81127078 <__udivsi3>
8111ba10:	1027883a 	mov	r19,r2
8111ba14:	10002c26 	beq	r2,zero,8111bac8 <quorem+0x128>
8111ba18:	a813883a 	mov	r9,r21
8111ba1c:	880b883a 	mov	r5,r17
8111ba20:	0009883a 	mov	r4,zero
8111ba24:	000d883a 	mov	r6,zero
8111ba28:	2a000017 	ldw	r8,0(r5)
8111ba2c:	49c00017 	ldw	r7,0(r9)
8111ba30:	29400104 	addi	r5,r5,4
8111ba34:	40bfffcc 	andi	r2,r8,65535
8111ba38:	14c5383a 	mul	r2,r2,r19
8111ba3c:	4010d43a 	srli	r8,r8,16
8111ba40:	38ffffcc 	andi	r3,r7,65535
8111ba44:	1105883a 	add	r2,r2,r4
8111ba48:	1008d43a 	srli	r4,r2,16
8111ba4c:	44d1383a 	mul	r8,r8,r19
8111ba50:	198d883a 	add	r6,r3,r6
8111ba54:	10ffffcc 	andi	r3,r2,65535
8111ba58:	30c7c83a 	sub	r3,r6,r3
8111ba5c:	380ed43a 	srli	r7,r7,16
8111ba60:	4105883a 	add	r2,r8,r4
8111ba64:	180dd43a 	srai	r6,r3,16
8111ba68:	113fffcc 	andi	r4,r2,65535
8111ba6c:	390fc83a 	sub	r7,r7,r4
8111ba70:	398d883a 	add	r6,r7,r6
8111ba74:	300e943a 	slli	r7,r6,16
8111ba78:	18ffffcc 	andi	r3,r3,65535
8111ba7c:	1008d43a 	srli	r4,r2,16
8111ba80:	38ceb03a 	or	r7,r7,r3
8111ba84:	49c00015 	stw	r7,0(r9)
8111ba88:	300dd43a 	srai	r6,r6,16
8111ba8c:	4a400104 	addi	r9,r9,4
8111ba90:	a17fe52e 	bgeu	r20,r5,8111ba28 <__reset+0xfb0fba28>
8111ba94:	b0800017 	ldw	r2,0(r22)
8111ba98:	10000b1e 	bne	r2,zero,8111bac8 <quorem+0x128>
8111ba9c:	b0bfff04 	addi	r2,r22,-4
8111baa0:	a880082e 	bgeu	r21,r2,8111bac4 <quorem+0x124>
8111baa4:	b0ffff17 	ldw	r3,-4(r22)
8111baa8:	18000326 	beq	r3,zero,8111bab8 <quorem+0x118>
8111baac:	00000506 	br	8111bac4 <quorem+0x124>
8111bab0:	10c00017 	ldw	r3,0(r2)
8111bab4:	1800031e 	bne	r3,zero,8111bac4 <quorem+0x124>
8111bab8:	10bfff04 	addi	r2,r2,-4
8111babc:	94bfffc4 	addi	r18,r18,-1
8111bac0:	a8bffb36 	bltu	r21,r2,8111bab0 <__reset+0xfb0fbab0>
8111bac4:	84800415 	stw	r18,16(r16)
8111bac8:	b80b883a 	mov	r5,r23
8111bacc:	8009883a 	mov	r4,r16
8111bad0:	111f5c00 	call	8111f5c0 <__mcmp>
8111bad4:	10002616 	blt	r2,zero,8111bb70 <quorem+0x1d0>
8111bad8:	9cc00044 	addi	r19,r19,1
8111badc:	a805883a 	mov	r2,r21
8111bae0:	000b883a 	mov	r5,zero
8111bae4:	11000017 	ldw	r4,0(r2)
8111bae8:	89800017 	ldw	r6,0(r17)
8111baec:	10800104 	addi	r2,r2,4
8111baf0:	20ffffcc 	andi	r3,r4,65535
8111baf4:	194b883a 	add	r5,r3,r5
8111baf8:	30ffffcc 	andi	r3,r6,65535
8111bafc:	28c7c83a 	sub	r3,r5,r3
8111bb00:	300cd43a 	srli	r6,r6,16
8111bb04:	2008d43a 	srli	r4,r4,16
8111bb08:	180bd43a 	srai	r5,r3,16
8111bb0c:	18ffffcc 	andi	r3,r3,65535
8111bb10:	2189c83a 	sub	r4,r4,r6
8111bb14:	2149883a 	add	r4,r4,r5
8111bb18:	200c943a 	slli	r6,r4,16
8111bb1c:	8c400104 	addi	r17,r17,4
8111bb20:	200bd43a 	srai	r5,r4,16
8111bb24:	30c6b03a 	or	r3,r6,r3
8111bb28:	10ffff15 	stw	r3,-4(r2)
8111bb2c:	a47fed2e 	bgeu	r20,r17,8111bae4 <__reset+0xfb0fbae4>
8111bb30:	9485883a 	add	r2,r18,r18
8111bb34:	1085883a 	add	r2,r2,r2
8111bb38:	a887883a 	add	r3,r21,r2
8111bb3c:	18800017 	ldw	r2,0(r3)
8111bb40:	10000b1e 	bne	r2,zero,8111bb70 <quorem+0x1d0>
8111bb44:	18bfff04 	addi	r2,r3,-4
8111bb48:	a880082e 	bgeu	r21,r2,8111bb6c <quorem+0x1cc>
8111bb4c:	18ffff17 	ldw	r3,-4(r3)
8111bb50:	18000326 	beq	r3,zero,8111bb60 <quorem+0x1c0>
8111bb54:	00000506 	br	8111bb6c <quorem+0x1cc>
8111bb58:	10c00017 	ldw	r3,0(r2)
8111bb5c:	1800031e 	bne	r3,zero,8111bb6c <quorem+0x1cc>
8111bb60:	10bfff04 	addi	r2,r2,-4
8111bb64:	94bfffc4 	addi	r18,r18,-1
8111bb68:	a8bffb36 	bltu	r21,r2,8111bb58 <__reset+0xfb0fbb58>
8111bb6c:	84800415 	stw	r18,16(r16)
8111bb70:	9805883a 	mov	r2,r19
8111bb74:	dfc00817 	ldw	ra,32(sp)
8111bb78:	ddc00717 	ldw	r23,28(sp)
8111bb7c:	dd800617 	ldw	r22,24(sp)
8111bb80:	dd400517 	ldw	r21,20(sp)
8111bb84:	dd000417 	ldw	r20,16(sp)
8111bb88:	dcc00317 	ldw	r19,12(sp)
8111bb8c:	dc800217 	ldw	r18,8(sp)
8111bb90:	dc400117 	ldw	r17,4(sp)
8111bb94:	dc000017 	ldw	r16,0(sp)
8111bb98:	dec00904 	addi	sp,sp,36
8111bb9c:	f800283a 	ret
8111bba0:	0005883a 	mov	r2,zero
8111bba4:	003ff306 	br	8111bb74 <__reset+0xfb0fbb74>

8111bba8 <_dtoa_r>:
8111bba8:	deffde04 	addi	sp,sp,-136
8111bbac:	de00012e 	bgeu	sp,et,8111bbb4 <_dtoa_r+0xc>
8111bbb0:	003b68fa 	trap	3
8111bbb4:	20801017 	ldw	r2,64(r4)
8111bbb8:	df002015 	stw	fp,128(sp)
8111bbbc:	dcc01b15 	stw	r19,108(sp)
8111bbc0:	dc801a15 	stw	r18,104(sp)
8111bbc4:	dc401915 	stw	r17,100(sp)
8111bbc8:	dc001815 	stw	r16,96(sp)
8111bbcc:	dfc02115 	stw	ra,132(sp)
8111bbd0:	ddc01f15 	stw	r23,124(sp)
8111bbd4:	dd801e15 	stw	r22,120(sp)
8111bbd8:	dd401d15 	stw	r21,116(sp)
8111bbdc:	dd001c15 	stw	r20,112(sp)
8111bbe0:	d9c00315 	stw	r7,12(sp)
8111bbe4:	2039883a 	mov	fp,r4
8111bbe8:	3023883a 	mov	r17,r6
8111bbec:	2825883a 	mov	r18,r5
8111bbf0:	dc002417 	ldw	r16,144(sp)
8111bbf4:	3027883a 	mov	r19,r6
8111bbf8:	10000826 	beq	r2,zero,8111bc1c <_dtoa_r+0x74>
8111bbfc:	21801117 	ldw	r6,68(r4)
8111bc00:	00c00044 	movi	r3,1
8111bc04:	100b883a 	mov	r5,r2
8111bc08:	1986983a 	sll	r3,r3,r6
8111bc0c:	11800115 	stw	r6,4(r2)
8111bc10:	10c00215 	stw	r3,8(r2)
8111bc14:	111ed700 	call	8111ed70 <_Bfree>
8111bc18:	e0001015 	stw	zero,64(fp)
8111bc1c:	88002e16 	blt	r17,zero,8111bcd8 <_dtoa_r+0x130>
8111bc20:	80000015 	stw	zero,0(r16)
8111bc24:	889ffc2c 	andhi	r2,r17,32752
8111bc28:	00dffc34 	movhi	r3,32752
8111bc2c:	10c01c26 	beq	r2,r3,8111bca0 <_dtoa_r+0xf8>
8111bc30:	000d883a 	mov	r6,zero
8111bc34:	000f883a 	mov	r7,zero
8111bc38:	9009883a 	mov	r4,r18
8111bc3c:	980b883a 	mov	r5,r19
8111bc40:	11284d40 	call	811284d4 <__eqdf2>
8111bc44:	10002b1e 	bne	r2,zero,8111bcf4 <_dtoa_r+0x14c>
8111bc48:	d9c02317 	ldw	r7,140(sp)
8111bc4c:	00800044 	movi	r2,1
8111bc50:	38800015 	stw	r2,0(r7)
8111bc54:	d8802517 	ldw	r2,148(sp)
8111bc58:	10019e26 	beq	r2,zero,8111c2d4 <_dtoa_r+0x72c>
8111bc5c:	d8c02517 	ldw	r3,148(sp)
8111bc60:	00a04534 	movhi	r2,33044
8111bc64:	1088ac44 	addi	r2,r2,8881
8111bc68:	18800015 	stw	r2,0(r3)
8111bc6c:	10bfffc4 	addi	r2,r2,-1
8111bc70:	dfc02117 	ldw	ra,132(sp)
8111bc74:	df002017 	ldw	fp,128(sp)
8111bc78:	ddc01f17 	ldw	r23,124(sp)
8111bc7c:	dd801e17 	ldw	r22,120(sp)
8111bc80:	dd401d17 	ldw	r21,116(sp)
8111bc84:	dd001c17 	ldw	r20,112(sp)
8111bc88:	dcc01b17 	ldw	r19,108(sp)
8111bc8c:	dc801a17 	ldw	r18,104(sp)
8111bc90:	dc401917 	ldw	r17,100(sp)
8111bc94:	dc001817 	ldw	r16,96(sp)
8111bc98:	dec02204 	addi	sp,sp,136
8111bc9c:	f800283a 	ret
8111bca0:	d8c02317 	ldw	r3,140(sp)
8111bca4:	0089c3c4 	movi	r2,9999
8111bca8:	18800015 	stw	r2,0(r3)
8111bcac:	90017726 	beq	r18,zero,8111c28c <_dtoa_r+0x6e4>
8111bcb0:	00a04534 	movhi	r2,33044
8111bcb4:	1088ca04 	addi	r2,r2,9000
8111bcb8:	d9002517 	ldw	r4,148(sp)
8111bcbc:	203fec26 	beq	r4,zero,8111bc70 <__reset+0xfb0fbc70>
8111bcc0:	10c000c7 	ldb	r3,3(r2)
8111bcc4:	1801781e 	bne	r3,zero,8111c2a8 <_dtoa_r+0x700>
8111bcc8:	10c000c4 	addi	r3,r2,3
8111bccc:	d9802517 	ldw	r6,148(sp)
8111bcd0:	30c00015 	stw	r3,0(r6)
8111bcd4:	003fe606 	br	8111bc70 <__reset+0xfb0fbc70>
8111bcd8:	04e00034 	movhi	r19,32768
8111bcdc:	9cffffc4 	addi	r19,r19,-1
8111bce0:	00800044 	movi	r2,1
8111bce4:	8ce6703a 	and	r19,r17,r19
8111bce8:	80800015 	stw	r2,0(r16)
8111bcec:	9823883a 	mov	r17,r19
8111bcf0:	003fcc06 	br	8111bc24 <__reset+0xfb0fbc24>
8111bcf4:	d8800204 	addi	r2,sp,8
8111bcf8:	d8800015 	stw	r2,0(sp)
8111bcfc:	d9c00104 	addi	r7,sp,4
8111bd00:	900b883a 	mov	r5,r18
8111bd04:	980d883a 	mov	r6,r19
8111bd08:	e009883a 	mov	r4,fp
8111bd0c:	8820d53a 	srli	r16,r17,20
8111bd10:	111f99c0 	call	8111f99c <__d2b>
8111bd14:	d8800915 	stw	r2,36(sp)
8111bd18:	8001651e 	bne	r16,zero,8111c2b0 <_dtoa_r+0x708>
8111bd1c:	dd800217 	ldw	r22,8(sp)
8111bd20:	dc000117 	ldw	r16,4(sp)
8111bd24:	00800804 	movi	r2,32
8111bd28:	b421883a 	add	r16,r22,r16
8111bd2c:	80c10c84 	addi	r3,r16,1074
8111bd30:	10c2d10e 	bge	r2,r3,8111c878 <_dtoa_r+0xcd0>
8111bd34:	00801004 	movi	r2,64
8111bd38:	81010484 	addi	r4,r16,1042
8111bd3c:	10c7c83a 	sub	r3,r2,r3
8111bd40:	9108d83a 	srl	r4,r18,r4
8111bd44:	88e2983a 	sll	r17,r17,r3
8111bd48:	2448b03a 	or	r4,r4,r17
8111bd4c:	11291940 	call	81129194 <__floatunsidf>
8111bd50:	017f8434 	movhi	r5,65040
8111bd54:	01800044 	movi	r6,1
8111bd58:	1009883a 	mov	r4,r2
8111bd5c:	194b883a 	add	r5,r3,r5
8111bd60:	843fffc4 	addi	r16,r16,-1
8111bd64:	d9801115 	stw	r6,68(sp)
8111bd68:	000d883a 	mov	r6,zero
8111bd6c:	01cffe34 	movhi	r7,16376
8111bd70:	112872c0 	call	8112872c <__subdf3>
8111bd74:	0198dbf4 	movhi	r6,25455
8111bd78:	01cff4f4 	movhi	r7,16339
8111bd7c:	3190d844 	addi	r6,r6,17249
8111bd80:	39e1e9c4 	addi	r7,r7,-30809
8111bd84:	1009883a 	mov	r4,r2
8111bd88:	180b883a 	mov	r5,r3
8111bd8c:	1112e200 	call	81112e20 <__muldf3>
8111bd90:	01a2d874 	movhi	r6,35681
8111bd94:	01cff1f4 	movhi	r7,16327
8111bd98:	31b22cc4 	addi	r6,r6,-14157
8111bd9c:	39e28a04 	addi	r7,r7,-30168
8111bda0:	180b883a 	mov	r5,r3
8111bda4:	1009883a 	mov	r4,r2
8111bda8:	11273300 	call	81127330 <__adddf3>
8111bdac:	8009883a 	mov	r4,r16
8111bdb0:	1029883a 	mov	r20,r2
8111bdb4:	1823883a 	mov	r17,r3
8111bdb8:	11290b00 	call	811290b0 <__floatsidf>
8111bdbc:	019427f4 	movhi	r6,20639
8111bdc0:	01cff4f4 	movhi	r7,16339
8111bdc4:	319e7ec4 	addi	r6,r6,31227
8111bdc8:	39d104c4 	addi	r7,r7,17427
8111bdcc:	1009883a 	mov	r4,r2
8111bdd0:	180b883a 	mov	r5,r3
8111bdd4:	1112e200 	call	81112e20 <__muldf3>
8111bdd8:	100d883a 	mov	r6,r2
8111bddc:	180f883a 	mov	r7,r3
8111bde0:	a009883a 	mov	r4,r20
8111bde4:	880b883a 	mov	r5,r17
8111bde8:	11273300 	call	81127330 <__adddf3>
8111bdec:	1009883a 	mov	r4,r2
8111bdf0:	180b883a 	mov	r5,r3
8111bdf4:	1029883a 	mov	r20,r2
8111bdf8:	1823883a 	mov	r17,r3
8111bdfc:	11290300 	call	81129030 <__fixdfsi>
8111be00:	000d883a 	mov	r6,zero
8111be04:	000f883a 	mov	r7,zero
8111be08:	a009883a 	mov	r4,r20
8111be0c:	880b883a 	mov	r5,r17
8111be10:	d8800515 	stw	r2,20(sp)
8111be14:	11286380 	call	81128638 <__ledf2>
8111be18:	10028716 	blt	r2,zero,8111c838 <_dtoa_r+0xc90>
8111be1c:	d8c00517 	ldw	r3,20(sp)
8111be20:	00800584 	movi	r2,22
8111be24:	10c27536 	bltu	r2,r3,8111c7fc <_dtoa_r+0xc54>
8111be28:	180490fa 	slli	r2,r3,3
8111be2c:	00e04534 	movhi	r3,33044
8111be30:	18c8e504 	addi	r3,r3,9108
8111be34:	1885883a 	add	r2,r3,r2
8111be38:	11000017 	ldw	r4,0(r2)
8111be3c:	11400117 	ldw	r5,4(r2)
8111be40:	900d883a 	mov	r6,r18
8111be44:	980f883a 	mov	r7,r19
8111be48:	112855c0 	call	8112855c <__gedf2>
8111be4c:	00828d0e 	bge	zero,r2,8111c884 <_dtoa_r+0xcdc>
8111be50:	d9000517 	ldw	r4,20(sp)
8111be54:	d8000e15 	stw	zero,56(sp)
8111be58:	213fffc4 	addi	r4,r4,-1
8111be5c:	d9000515 	stw	r4,20(sp)
8111be60:	b42dc83a 	sub	r22,r22,r16
8111be64:	b5bfffc4 	addi	r22,r22,-1
8111be68:	b0026f16 	blt	r22,zero,8111c828 <_dtoa_r+0xc80>
8111be6c:	d8000815 	stw	zero,32(sp)
8111be70:	d9c00517 	ldw	r7,20(sp)
8111be74:	38026416 	blt	r7,zero,8111c808 <_dtoa_r+0xc60>
8111be78:	b1ed883a 	add	r22,r22,r7
8111be7c:	d9c00d15 	stw	r7,52(sp)
8111be80:	d8000a15 	stw	zero,40(sp)
8111be84:	d9800317 	ldw	r6,12(sp)
8111be88:	00800244 	movi	r2,9
8111be8c:	11811436 	bltu	r2,r6,8111c2e0 <_dtoa_r+0x738>
8111be90:	00800144 	movi	r2,5
8111be94:	1184e10e 	bge	r2,r6,8111d21c <_dtoa_r+0x1674>
8111be98:	31bfff04 	addi	r6,r6,-4
8111be9c:	d9800315 	stw	r6,12(sp)
8111bea0:	0023883a 	mov	r17,zero
8111bea4:	d9800317 	ldw	r6,12(sp)
8111bea8:	008000c4 	movi	r2,3
8111beac:	30836726 	beq	r6,r2,8111cc4c <_dtoa_r+0x10a4>
8111beb0:	1183410e 	bge	r2,r6,8111cbb8 <_dtoa_r+0x1010>
8111beb4:	d9c00317 	ldw	r7,12(sp)
8111beb8:	00800104 	movi	r2,4
8111bebc:	38827c26 	beq	r7,r2,8111c8b0 <_dtoa_r+0xd08>
8111bec0:	00800144 	movi	r2,5
8111bec4:	3884c41e 	bne	r7,r2,8111d1d8 <_dtoa_r+0x1630>
8111bec8:	00800044 	movi	r2,1
8111becc:	d8800b15 	stw	r2,44(sp)
8111bed0:	d8c00517 	ldw	r3,20(sp)
8111bed4:	d9002217 	ldw	r4,136(sp)
8111bed8:	1907883a 	add	r3,r3,r4
8111bedc:	19800044 	addi	r6,r3,1
8111bee0:	d8c00c15 	stw	r3,48(sp)
8111bee4:	d9800615 	stw	r6,24(sp)
8111bee8:	0183a40e 	bge	zero,r6,8111cd7c <_dtoa_r+0x11d4>
8111beec:	d9800617 	ldw	r6,24(sp)
8111bef0:	3021883a 	mov	r16,r6
8111bef4:	e0001115 	stw	zero,68(fp)
8111bef8:	008005c4 	movi	r2,23
8111befc:	1184c92e 	bgeu	r2,r6,8111d224 <_dtoa_r+0x167c>
8111bf00:	00c00044 	movi	r3,1
8111bf04:	00800104 	movi	r2,4
8111bf08:	1085883a 	add	r2,r2,r2
8111bf0c:	11000504 	addi	r4,r2,20
8111bf10:	180b883a 	mov	r5,r3
8111bf14:	18c00044 	addi	r3,r3,1
8111bf18:	313ffb2e 	bgeu	r6,r4,8111bf08 <__reset+0xfb0fbf08>
8111bf1c:	e1401115 	stw	r5,68(fp)
8111bf20:	e009883a 	mov	r4,fp
8111bf24:	111ecc00 	call	8111ecc0 <_Balloc>
8111bf28:	d8800715 	stw	r2,28(sp)
8111bf2c:	e0801015 	stw	r2,64(fp)
8111bf30:	00800384 	movi	r2,14
8111bf34:	1400f736 	bltu	r2,r16,8111c314 <_dtoa_r+0x76c>
8111bf38:	8800f626 	beq	r17,zero,8111c314 <_dtoa_r+0x76c>
8111bf3c:	d9c00517 	ldw	r7,20(sp)
8111bf40:	01c39a0e 	bge	zero,r7,8111cdac <_dtoa_r+0x1204>
8111bf44:	388003cc 	andi	r2,r7,15
8111bf48:	100490fa 	slli	r2,r2,3
8111bf4c:	382bd13a 	srai	r21,r7,4
8111bf50:	00e04534 	movhi	r3,33044
8111bf54:	18c8e504 	addi	r3,r3,9108
8111bf58:	1885883a 	add	r2,r3,r2
8111bf5c:	a8c0040c 	andi	r3,r21,16
8111bf60:	12400017 	ldw	r9,0(r2)
8111bf64:	12000117 	ldw	r8,4(r2)
8111bf68:	18037926 	beq	r3,zero,8111cd50 <_dtoa_r+0x11a8>
8111bf6c:	00a04534 	movhi	r2,33044
8111bf70:	1088db04 	addi	r2,r2,9068
8111bf74:	11800817 	ldw	r6,32(r2)
8111bf78:	11c00917 	ldw	r7,36(r2)
8111bf7c:	9009883a 	mov	r4,r18
8111bf80:	980b883a 	mov	r5,r19
8111bf84:	da001715 	stw	r8,92(sp)
8111bf88:	da401615 	stw	r9,88(sp)
8111bf8c:	1127be40 	call	81127be4 <__divdf3>
8111bf90:	da001717 	ldw	r8,92(sp)
8111bf94:	da401617 	ldw	r9,88(sp)
8111bf98:	ad4003cc 	andi	r21,r21,15
8111bf9c:	040000c4 	movi	r16,3
8111bfa0:	1023883a 	mov	r17,r2
8111bfa4:	1829883a 	mov	r20,r3
8111bfa8:	a8001126 	beq	r21,zero,8111bff0 <_dtoa_r+0x448>
8111bfac:	05e04534 	movhi	r23,33044
8111bfb0:	bdc8db04 	addi	r23,r23,9068
8111bfb4:	4805883a 	mov	r2,r9
8111bfb8:	4007883a 	mov	r3,r8
8111bfbc:	a980004c 	andi	r6,r21,1
8111bfc0:	1009883a 	mov	r4,r2
8111bfc4:	a82bd07a 	srai	r21,r21,1
8111bfc8:	180b883a 	mov	r5,r3
8111bfcc:	30000426 	beq	r6,zero,8111bfe0 <_dtoa_r+0x438>
8111bfd0:	b9800017 	ldw	r6,0(r23)
8111bfd4:	b9c00117 	ldw	r7,4(r23)
8111bfd8:	84000044 	addi	r16,r16,1
8111bfdc:	1112e200 	call	81112e20 <__muldf3>
8111bfe0:	bdc00204 	addi	r23,r23,8
8111bfe4:	a83ff51e 	bne	r21,zero,8111bfbc <__reset+0xfb0fbfbc>
8111bfe8:	1013883a 	mov	r9,r2
8111bfec:	1811883a 	mov	r8,r3
8111bff0:	480d883a 	mov	r6,r9
8111bff4:	400f883a 	mov	r7,r8
8111bff8:	8809883a 	mov	r4,r17
8111bffc:	a00b883a 	mov	r5,r20
8111c000:	1127be40 	call	81127be4 <__divdf3>
8111c004:	d8800f15 	stw	r2,60(sp)
8111c008:	d8c01015 	stw	r3,64(sp)
8111c00c:	d8c00e17 	ldw	r3,56(sp)
8111c010:	18000626 	beq	r3,zero,8111c02c <_dtoa_r+0x484>
8111c014:	d9000f17 	ldw	r4,60(sp)
8111c018:	d9401017 	ldw	r5,64(sp)
8111c01c:	000d883a 	mov	r6,zero
8111c020:	01cffc34 	movhi	r7,16368
8111c024:	11286380 	call	81128638 <__ledf2>
8111c028:	10040b16 	blt	r2,zero,8111d058 <_dtoa_r+0x14b0>
8111c02c:	8009883a 	mov	r4,r16
8111c030:	11290b00 	call	811290b0 <__floatsidf>
8111c034:	d9800f17 	ldw	r6,60(sp)
8111c038:	d9c01017 	ldw	r7,64(sp)
8111c03c:	1009883a 	mov	r4,r2
8111c040:	180b883a 	mov	r5,r3
8111c044:	1112e200 	call	81112e20 <__muldf3>
8111c048:	000d883a 	mov	r6,zero
8111c04c:	01d00734 	movhi	r7,16412
8111c050:	1009883a 	mov	r4,r2
8111c054:	180b883a 	mov	r5,r3
8111c058:	11273300 	call	81127330 <__adddf3>
8111c05c:	1021883a 	mov	r16,r2
8111c060:	d8800617 	ldw	r2,24(sp)
8111c064:	047f3034 	movhi	r17,64704
8111c068:	1c63883a 	add	r17,r3,r17
8111c06c:	10031826 	beq	r2,zero,8111ccd0 <_dtoa_r+0x1128>
8111c070:	d8c00517 	ldw	r3,20(sp)
8111c074:	db000617 	ldw	r12,24(sp)
8111c078:	d8c01315 	stw	r3,76(sp)
8111c07c:	d9000b17 	ldw	r4,44(sp)
8111c080:	20038f26 	beq	r4,zero,8111cec0 <_dtoa_r+0x1318>
8111c084:	60bfffc4 	addi	r2,r12,-1
8111c088:	100490fa 	slli	r2,r2,3
8111c08c:	00e04534 	movhi	r3,33044
8111c090:	18c8e504 	addi	r3,r3,9108
8111c094:	1885883a 	add	r2,r3,r2
8111c098:	11800017 	ldw	r6,0(r2)
8111c09c:	11c00117 	ldw	r7,4(r2)
8111c0a0:	d8800717 	ldw	r2,28(sp)
8111c0a4:	0009883a 	mov	r4,zero
8111c0a8:	014ff834 	movhi	r5,16352
8111c0ac:	db001615 	stw	r12,88(sp)
8111c0b0:	15c00044 	addi	r23,r2,1
8111c0b4:	1127be40 	call	81127be4 <__divdf3>
8111c0b8:	800d883a 	mov	r6,r16
8111c0bc:	880f883a 	mov	r7,r17
8111c0c0:	1009883a 	mov	r4,r2
8111c0c4:	180b883a 	mov	r5,r3
8111c0c8:	112872c0 	call	8112872c <__subdf3>
8111c0cc:	d9401017 	ldw	r5,64(sp)
8111c0d0:	d9000f17 	ldw	r4,60(sp)
8111c0d4:	102b883a 	mov	r21,r2
8111c0d8:	d8c01215 	stw	r3,72(sp)
8111c0dc:	11290300 	call	81129030 <__fixdfsi>
8111c0e0:	1009883a 	mov	r4,r2
8111c0e4:	1029883a 	mov	r20,r2
8111c0e8:	11290b00 	call	811290b0 <__floatsidf>
8111c0ec:	d9000f17 	ldw	r4,60(sp)
8111c0f0:	d9401017 	ldw	r5,64(sp)
8111c0f4:	100d883a 	mov	r6,r2
8111c0f8:	180f883a 	mov	r7,r3
8111c0fc:	112872c0 	call	8112872c <__subdf3>
8111c100:	1823883a 	mov	r17,r3
8111c104:	d8c00717 	ldw	r3,28(sp)
8111c108:	d9401217 	ldw	r5,72(sp)
8111c10c:	a2000c04 	addi	r8,r20,48
8111c110:	1021883a 	mov	r16,r2
8111c114:	1a000005 	stb	r8,0(r3)
8111c118:	800d883a 	mov	r6,r16
8111c11c:	880f883a 	mov	r7,r17
8111c120:	a809883a 	mov	r4,r21
8111c124:	4029883a 	mov	r20,r8
8111c128:	112855c0 	call	8112855c <__gedf2>
8111c12c:	00841d16 	blt	zero,r2,8111d1a4 <_dtoa_r+0x15fc>
8111c130:	800d883a 	mov	r6,r16
8111c134:	880f883a 	mov	r7,r17
8111c138:	0009883a 	mov	r4,zero
8111c13c:	014ffc34 	movhi	r5,16368
8111c140:	112872c0 	call	8112872c <__subdf3>
8111c144:	d9401217 	ldw	r5,72(sp)
8111c148:	100d883a 	mov	r6,r2
8111c14c:	180f883a 	mov	r7,r3
8111c150:	a809883a 	mov	r4,r21
8111c154:	112855c0 	call	8112855c <__gedf2>
8111c158:	db001617 	ldw	r12,88(sp)
8111c15c:	00840e16 	blt	zero,r2,8111d198 <_dtoa_r+0x15f0>
8111c160:	00800044 	movi	r2,1
8111c164:	13006b0e 	bge	r2,r12,8111c314 <_dtoa_r+0x76c>
8111c168:	d9000717 	ldw	r4,28(sp)
8111c16c:	dd800f15 	stw	r22,60(sp)
8111c170:	dcc01015 	stw	r19,64(sp)
8111c174:	2319883a 	add	r12,r4,r12
8111c178:	dcc01217 	ldw	r19,72(sp)
8111c17c:	602d883a 	mov	r22,r12
8111c180:	dc801215 	stw	r18,72(sp)
8111c184:	b825883a 	mov	r18,r23
8111c188:	00000906 	br	8111c1b0 <_dtoa_r+0x608>
8111c18c:	112872c0 	call	8112872c <__subdf3>
8111c190:	a80d883a 	mov	r6,r21
8111c194:	980f883a 	mov	r7,r19
8111c198:	1009883a 	mov	r4,r2
8111c19c:	180b883a 	mov	r5,r3
8111c1a0:	11286380 	call	81128638 <__ledf2>
8111c1a4:	1003e816 	blt	r2,zero,8111d148 <_dtoa_r+0x15a0>
8111c1a8:	b825883a 	mov	r18,r23
8111c1ac:	bd83e926 	beq	r23,r22,8111d154 <_dtoa_r+0x15ac>
8111c1b0:	a809883a 	mov	r4,r21
8111c1b4:	980b883a 	mov	r5,r19
8111c1b8:	000d883a 	mov	r6,zero
8111c1bc:	01d00934 	movhi	r7,16420
8111c1c0:	1112e200 	call	81112e20 <__muldf3>
8111c1c4:	000d883a 	mov	r6,zero
8111c1c8:	01d00934 	movhi	r7,16420
8111c1cc:	8009883a 	mov	r4,r16
8111c1d0:	880b883a 	mov	r5,r17
8111c1d4:	102b883a 	mov	r21,r2
8111c1d8:	1827883a 	mov	r19,r3
8111c1dc:	1112e200 	call	81112e20 <__muldf3>
8111c1e0:	180b883a 	mov	r5,r3
8111c1e4:	1009883a 	mov	r4,r2
8111c1e8:	1821883a 	mov	r16,r3
8111c1ec:	1023883a 	mov	r17,r2
8111c1f0:	11290300 	call	81129030 <__fixdfsi>
8111c1f4:	1009883a 	mov	r4,r2
8111c1f8:	1029883a 	mov	r20,r2
8111c1fc:	11290b00 	call	811290b0 <__floatsidf>
8111c200:	8809883a 	mov	r4,r17
8111c204:	800b883a 	mov	r5,r16
8111c208:	100d883a 	mov	r6,r2
8111c20c:	180f883a 	mov	r7,r3
8111c210:	112872c0 	call	8112872c <__subdf3>
8111c214:	a5000c04 	addi	r20,r20,48
8111c218:	a80d883a 	mov	r6,r21
8111c21c:	980f883a 	mov	r7,r19
8111c220:	1009883a 	mov	r4,r2
8111c224:	180b883a 	mov	r5,r3
8111c228:	95000005 	stb	r20,0(r18)
8111c22c:	1021883a 	mov	r16,r2
8111c230:	1823883a 	mov	r17,r3
8111c234:	11286380 	call	81128638 <__ledf2>
8111c238:	bdc00044 	addi	r23,r23,1
8111c23c:	800d883a 	mov	r6,r16
8111c240:	880f883a 	mov	r7,r17
8111c244:	0009883a 	mov	r4,zero
8111c248:	014ffc34 	movhi	r5,16368
8111c24c:	103fcf0e 	bge	r2,zero,8111c18c <__reset+0xfb0fc18c>
8111c250:	d8c01317 	ldw	r3,76(sp)
8111c254:	d8c00515 	stw	r3,20(sp)
8111c258:	d9400917 	ldw	r5,36(sp)
8111c25c:	e009883a 	mov	r4,fp
8111c260:	111ed700 	call	8111ed70 <_Bfree>
8111c264:	d9000517 	ldw	r4,20(sp)
8111c268:	d9802317 	ldw	r6,140(sp)
8111c26c:	d9c02517 	ldw	r7,148(sp)
8111c270:	b8000005 	stb	zero,0(r23)
8111c274:	20800044 	addi	r2,r4,1
8111c278:	30800015 	stw	r2,0(r6)
8111c27c:	3802aa26 	beq	r7,zero,8111cd28 <_dtoa_r+0x1180>
8111c280:	3dc00015 	stw	r23,0(r7)
8111c284:	d8800717 	ldw	r2,28(sp)
8111c288:	003e7906 	br	8111bc70 <__reset+0xfb0fbc70>
8111c28c:	00800434 	movhi	r2,16
8111c290:	10bfffc4 	addi	r2,r2,-1
8111c294:	88a2703a 	and	r17,r17,r2
8111c298:	883e851e 	bne	r17,zero,8111bcb0 <__reset+0xfb0fbcb0>
8111c29c:	00a04534 	movhi	r2,33044
8111c2a0:	1088c704 	addi	r2,r2,8988
8111c2a4:	003e8406 	br	8111bcb8 <__reset+0xfb0fbcb8>
8111c2a8:	10c00204 	addi	r3,r2,8
8111c2ac:	003e8706 	br	8111bccc <__reset+0xfb0fbccc>
8111c2b0:	01400434 	movhi	r5,16
8111c2b4:	297fffc4 	addi	r5,r5,-1
8111c2b8:	994a703a 	and	r5,r19,r5
8111c2bc:	9009883a 	mov	r4,r18
8111c2c0:	843f0044 	addi	r16,r16,-1023
8111c2c4:	294ffc34 	orhi	r5,r5,16368
8111c2c8:	dd800217 	ldw	r22,8(sp)
8111c2cc:	d8001115 	stw	zero,68(sp)
8111c2d0:	003ea506 	br	8111bd68 <__reset+0xfb0fbd68>
8111c2d4:	00a04534 	movhi	r2,33044
8111c2d8:	1088ac04 	addi	r2,r2,8880
8111c2dc:	003e6406 	br	8111bc70 <__reset+0xfb0fbc70>
8111c2e0:	e0001115 	stw	zero,68(fp)
8111c2e4:	000b883a 	mov	r5,zero
8111c2e8:	e009883a 	mov	r4,fp
8111c2ec:	111ecc00 	call	8111ecc0 <_Balloc>
8111c2f0:	01bfffc4 	movi	r6,-1
8111c2f4:	01c00044 	movi	r7,1
8111c2f8:	d8800715 	stw	r2,28(sp)
8111c2fc:	d9800c15 	stw	r6,48(sp)
8111c300:	e0801015 	stw	r2,64(fp)
8111c304:	d8000315 	stw	zero,12(sp)
8111c308:	d9c00b15 	stw	r7,44(sp)
8111c30c:	d9800615 	stw	r6,24(sp)
8111c310:	d8002215 	stw	zero,136(sp)
8111c314:	d8800117 	ldw	r2,4(sp)
8111c318:	10008916 	blt	r2,zero,8111c540 <_dtoa_r+0x998>
8111c31c:	d9000517 	ldw	r4,20(sp)
8111c320:	00c00384 	movi	r3,14
8111c324:	19008616 	blt	r3,r4,8111c540 <_dtoa_r+0x998>
8111c328:	200490fa 	slli	r2,r4,3
8111c32c:	00e04534 	movhi	r3,33044
8111c330:	d9802217 	ldw	r6,136(sp)
8111c334:	18c8e504 	addi	r3,r3,9108
8111c338:	1885883a 	add	r2,r3,r2
8111c33c:	14000017 	ldw	r16,0(r2)
8111c340:	14400117 	ldw	r17,4(r2)
8111c344:	30016316 	blt	r6,zero,8111c8d4 <_dtoa_r+0xd2c>
8111c348:	800d883a 	mov	r6,r16
8111c34c:	880f883a 	mov	r7,r17
8111c350:	9009883a 	mov	r4,r18
8111c354:	980b883a 	mov	r5,r19
8111c358:	1127be40 	call	81127be4 <__divdf3>
8111c35c:	180b883a 	mov	r5,r3
8111c360:	1009883a 	mov	r4,r2
8111c364:	11290300 	call	81129030 <__fixdfsi>
8111c368:	1009883a 	mov	r4,r2
8111c36c:	102b883a 	mov	r21,r2
8111c370:	11290b00 	call	811290b0 <__floatsidf>
8111c374:	800d883a 	mov	r6,r16
8111c378:	880f883a 	mov	r7,r17
8111c37c:	1009883a 	mov	r4,r2
8111c380:	180b883a 	mov	r5,r3
8111c384:	1112e200 	call	81112e20 <__muldf3>
8111c388:	100d883a 	mov	r6,r2
8111c38c:	180f883a 	mov	r7,r3
8111c390:	9009883a 	mov	r4,r18
8111c394:	980b883a 	mov	r5,r19
8111c398:	112872c0 	call	8112872c <__subdf3>
8111c39c:	d9c00717 	ldw	r7,28(sp)
8111c3a0:	1009883a 	mov	r4,r2
8111c3a4:	a8800c04 	addi	r2,r21,48
8111c3a8:	38800005 	stb	r2,0(r7)
8111c3ac:	3dc00044 	addi	r23,r7,1
8111c3b0:	d9c00617 	ldw	r7,24(sp)
8111c3b4:	01800044 	movi	r6,1
8111c3b8:	180b883a 	mov	r5,r3
8111c3bc:	2005883a 	mov	r2,r4
8111c3c0:	39803826 	beq	r7,r6,8111c4a4 <_dtoa_r+0x8fc>
8111c3c4:	000d883a 	mov	r6,zero
8111c3c8:	01d00934 	movhi	r7,16420
8111c3cc:	1112e200 	call	81112e20 <__muldf3>
8111c3d0:	000d883a 	mov	r6,zero
8111c3d4:	000f883a 	mov	r7,zero
8111c3d8:	1009883a 	mov	r4,r2
8111c3dc:	180b883a 	mov	r5,r3
8111c3e0:	1025883a 	mov	r18,r2
8111c3e4:	1827883a 	mov	r19,r3
8111c3e8:	11284d40 	call	811284d4 <__eqdf2>
8111c3ec:	103f9a26 	beq	r2,zero,8111c258 <__reset+0xfb0fc258>
8111c3f0:	d9c00617 	ldw	r7,24(sp)
8111c3f4:	d8c00717 	ldw	r3,28(sp)
8111c3f8:	b829883a 	mov	r20,r23
8111c3fc:	38bfffc4 	addi	r2,r7,-1
8111c400:	18ad883a 	add	r22,r3,r2
8111c404:	00000a06 	br	8111c430 <_dtoa_r+0x888>
8111c408:	1112e200 	call	81112e20 <__muldf3>
8111c40c:	000d883a 	mov	r6,zero
8111c410:	000f883a 	mov	r7,zero
8111c414:	1009883a 	mov	r4,r2
8111c418:	180b883a 	mov	r5,r3
8111c41c:	1025883a 	mov	r18,r2
8111c420:	1827883a 	mov	r19,r3
8111c424:	b829883a 	mov	r20,r23
8111c428:	11284d40 	call	811284d4 <__eqdf2>
8111c42c:	103f8a26 	beq	r2,zero,8111c258 <__reset+0xfb0fc258>
8111c430:	800d883a 	mov	r6,r16
8111c434:	880f883a 	mov	r7,r17
8111c438:	9009883a 	mov	r4,r18
8111c43c:	980b883a 	mov	r5,r19
8111c440:	1127be40 	call	81127be4 <__divdf3>
8111c444:	180b883a 	mov	r5,r3
8111c448:	1009883a 	mov	r4,r2
8111c44c:	11290300 	call	81129030 <__fixdfsi>
8111c450:	1009883a 	mov	r4,r2
8111c454:	102b883a 	mov	r21,r2
8111c458:	11290b00 	call	811290b0 <__floatsidf>
8111c45c:	800d883a 	mov	r6,r16
8111c460:	880f883a 	mov	r7,r17
8111c464:	1009883a 	mov	r4,r2
8111c468:	180b883a 	mov	r5,r3
8111c46c:	1112e200 	call	81112e20 <__muldf3>
8111c470:	100d883a 	mov	r6,r2
8111c474:	180f883a 	mov	r7,r3
8111c478:	9009883a 	mov	r4,r18
8111c47c:	980b883a 	mov	r5,r19
8111c480:	112872c0 	call	8112872c <__subdf3>
8111c484:	aa000c04 	addi	r8,r21,48
8111c488:	a2000005 	stb	r8,0(r20)
8111c48c:	000d883a 	mov	r6,zero
8111c490:	01d00934 	movhi	r7,16420
8111c494:	1009883a 	mov	r4,r2
8111c498:	180b883a 	mov	r5,r3
8111c49c:	a5c00044 	addi	r23,r20,1
8111c4a0:	b53fd91e 	bne	r22,r20,8111c408 <__reset+0xfb0fc408>
8111c4a4:	100d883a 	mov	r6,r2
8111c4a8:	180f883a 	mov	r7,r3
8111c4ac:	1009883a 	mov	r4,r2
8111c4b0:	180b883a 	mov	r5,r3
8111c4b4:	11273300 	call	81127330 <__adddf3>
8111c4b8:	100d883a 	mov	r6,r2
8111c4bc:	180f883a 	mov	r7,r3
8111c4c0:	8009883a 	mov	r4,r16
8111c4c4:	880b883a 	mov	r5,r17
8111c4c8:	1027883a 	mov	r19,r2
8111c4cc:	1825883a 	mov	r18,r3
8111c4d0:	11286380 	call	81128638 <__ledf2>
8111c4d4:	10000816 	blt	r2,zero,8111c4f8 <_dtoa_r+0x950>
8111c4d8:	980d883a 	mov	r6,r19
8111c4dc:	900f883a 	mov	r7,r18
8111c4e0:	8009883a 	mov	r4,r16
8111c4e4:	880b883a 	mov	r5,r17
8111c4e8:	11284d40 	call	811284d4 <__eqdf2>
8111c4ec:	103f5a1e 	bne	r2,zero,8111c258 <__reset+0xfb0fc258>
8111c4f0:	ad40004c 	andi	r21,r21,1
8111c4f4:	a83f5826 	beq	r21,zero,8111c258 <__reset+0xfb0fc258>
8111c4f8:	bd3fffc3 	ldbu	r20,-1(r23)
8111c4fc:	b8bfffc4 	addi	r2,r23,-1
8111c500:	1007883a 	mov	r3,r2
8111c504:	01400e44 	movi	r5,57
8111c508:	d9800717 	ldw	r6,28(sp)
8111c50c:	00000506 	br	8111c524 <_dtoa_r+0x97c>
8111c510:	18ffffc4 	addi	r3,r3,-1
8111c514:	11824726 	beq	r2,r6,8111ce34 <_dtoa_r+0x128c>
8111c518:	1d000003 	ldbu	r20,0(r3)
8111c51c:	102f883a 	mov	r23,r2
8111c520:	10bfffc4 	addi	r2,r2,-1
8111c524:	a1003fcc 	andi	r4,r20,255
8111c528:	2100201c 	xori	r4,r4,128
8111c52c:	213fe004 	addi	r4,r4,-128
8111c530:	217ff726 	beq	r4,r5,8111c510 <__reset+0xfb0fc510>
8111c534:	a2000044 	addi	r8,r20,1
8111c538:	12000005 	stb	r8,0(r2)
8111c53c:	003f4606 	br	8111c258 <__reset+0xfb0fc258>
8111c540:	d9000b17 	ldw	r4,44(sp)
8111c544:	2000c826 	beq	r4,zero,8111c868 <_dtoa_r+0xcc0>
8111c548:	d9800317 	ldw	r6,12(sp)
8111c54c:	00c00044 	movi	r3,1
8111c550:	1980f90e 	bge	r3,r6,8111c938 <_dtoa_r+0xd90>
8111c554:	d8800617 	ldw	r2,24(sp)
8111c558:	d8c00a17 	ldw	r3,40(sp)
8111c55c:	157fffc4 	addi	r21,r2,-1
8111c560:	1d41f316 	blt	r3,r21,8111cd30 <_dtoa_r+0x1188>
8111c564:	1d6bc83a 	sub	r21,r3,r21
8111c568:	d9c00617 	ldw	r7,24(sp)
8111c56c:	3802aa16 	blt	r7,zero,8111d018 <_dtoa_r+0x1470>
8111c570:	dd000817 	ldw	r20,32(sp)
8111c574:	d8800617 	ldw	r2,24(sp)
8111c578:	d8c00817 	ldw	r3,32(sp)
8111c57c:	01400044 	movi	r5,1
8111c580:	e009883a 	mov	r4,fp
8111c584:	1887883a 	add	r3,r3,r2
8111c588:	d8c00815 	stw	r3,32(sp)
8111c58c:	b0ad883a 	add	r22,r22,r2
8111c590:	111f0e40 	call	8111f0e4 <__i2b>
8111c594:	1023883a 	mov	r17,r2
8111c598:	a0000826 	beq	r20,zero,8111c5bc <_dtoa_r+0xa14>
8111c59c:	0580070e 	bge	zero,r22,8111c5bc <_dtoa_r+0xa14>
8111c5a0:	a005883a 	mov	r2,r20
8111c5a4:	b500b916 	blt	r22,r20,8111c88c <_dtoa_r+0xce4>
8111c5a8:	d9000817 	ldw	r4,32(sp)
8111c5ac:	a0a9c83a 	sub	r20,r20,r2
8111c5b0:	b0adc83a 	sub	r22,r22,r2
8111c5b4:	2089c83a 	sub	r4,r4,r2
8111c5b8:	d9000815 	stw	r4,32(sp)
8111c5bc:	d9800a17 	ldw	r6,40(sp)
8111c5c0:	0181810e 	bge	zero,r6,8111cbc8 <_dtoa_r+0x1020>
8111c5c4:	d9c00b17 	ldw	r7,44(sp)
8111c5c8:	3800b326 	beq	r7,zero,8111c898 <_dtoa_r+0xcf0>
8111c5cc:	a800b226 	beq	r21,zero,8111c898 <_dtoa_r+0xcf0>
8111c5d0:	880b883a 	mov	r5,r17
8111c5d4:	a80d883a 	mov	r6,r21
8111c5d8:	e009883a 	mov	r4,fp
8111c5dc:	111f3280 	call	8111f328 <__pow5mult>
8111c5e0:	d9800917 	ldw	r6,36(sp)
8111c5e4:	100b883a 	mov	r5,r2
8111c5e8:	e009883a 	mov	r4,fp
8111c5ec:	1023883a 	mov	r17,r2
8111c5f0:	111f1280 	call	8111f128 <__multiply>
8111c5f4:	1021883a 	mov	r16,r2
8111c5f8:	d8800a17 	ldw	r2,40(sp)
8111c5fc:	d9400917 	ldw	r5,36(sp)
8111c600:	e009883a 	mov	r4,fp
8111c604:	1545c83a 	sub	r2,r2,r21
8111c608:	d8800a15 	stw	r2,40(sp)
8111c60c:	111ed700 	call	8111ed70 <_Bfree>
8111c610:	d8c00a17 	ldw	r3,40(sp)
8111c614:	18009f1e 	bne	r3,zero,8111c894 <_dtoa_r+0xcec>
8111c618:	05c00044 	movi	r23,1
8111c61c:	e009883a 	mov	r4,fp
8111c620:	b80b883a 	mov	r5,r23
8111c624:	111f0e40 	call	8111f0e4 <__i2b>
8111c628:	d9000d17 	ldw	r4,52(sp)
8111c62c:	102b883a 	mov	r21,r2
8111c630:	2000ce26 	beq	r4,zero,8111c96c <_dtoa_r+0xdc4>
8111c634:	200d883a 	mov	r6,r4
8111c638:	100b883a 	mov	r5,r2
8111c63c:	e009883a 	mov	r4,fp
8111c640:	111f3280 	call	8111f328 <__pow5mult>
8111c644:	d9800317 	ldw	r6,12(sp)
8111c648:	102b883a 	mov	r21,r2
8111c64c:	b981810e 	bge	r23,r6,8111cc54 <_dtoa_r+0x10ac>
8111c650:	0027883a 	mov	r19,zero
8111c654:	a8800417 	ldw	r2,16(r21)
8111c658:	05c00804 	movi	r23,32
8111c65c:	10800104 	addi	r2,r2,4
8111c660:	1085883a 	add	r2,r2,r2
8111c664:	1085883a 	add	r2,r2,r2
8111c668:	a885883a 	add	r2,r21,r2
8111c66c:	11000017 	ldw	r4,0(r2)
8111c670:	111efcc0 	call	8111efcc <__hi0bits>
8111c674:	b885c83a 	sub	r2,r23,r2
8111c678:	1585883a 	add	r2,r2,r22
8111c67c:	108007cc 	andi	r2,r2,31
8111c680:	1000b326 	beq	r2,zero,8111c950 <_dtoa_r+0xda8>
8111c684:	00c00804 	movi	r3,32
8111c688:	1887c83a 	sub	r3,r3,r2
8111c68c:	01000104 	movi	r4,4
8111c690:	20c2cd0e 	bge	r4,r3,8111d1c8 <_dtoa_r+0x1620>
8111c694:	00c00704 	movi	r3,28
8111c698:	1885c83a 	sub	r2,r3,r2
8111c69c:	d8c00817 	ldw	r3,32(sp)
8111c6a0:	a0a9883a 	add	r20,r20,r2
8111c6a4:	b0ad883a 	add	r22,r22,r2
8111c6a8:	1887883a 	add	r3,r3,r2
8111c6ac:	d8c00815 	stw	r3,32(sp)
8111c6b0:	d9800817 	ldw	r6,32(sp)
8111c6b4:	0180040e 	bge	zero,r6,8111c6c8 <_dtoa_r+0xb20>
8111c6b8:	800b883a 	mov	r5,r16
8111c6bc:	e009883a 	mov	r4,fp
8111c6c0:	111f4700 	call	8111f470 <__lshift>
8111c6c4:	1021883a 	mov	r16,r2
8111c6c8:	0580050e 	bge	zero,r22,8111c6e0 <_dtoa_r+0xb38>
8111c6cc:	a80b883a 	mov	r5,r21
8111c6d0:	b00d883a 	mov	r6,r22
8111c6d4:	e009883a 	mov	r4,fp
8111c6d8:	111f4700 	call	8111f470 <__lshift>
8111c6dc:	102b883a 	mov	r21,r2
8111c6e0:	d9c00e17 	ldw	r7,56(sp)
8111c6e4:	3801211e 	bne	r7,zero,8111cb6c <_dtoa_r+0xfc4>
8111c6e8:	d9800617 	ldw	r6,24(sp)
8111c6ec:	0181380e 	bge	zero,r6,8111cbd0 <_dtoa_r+0x1028>
8111c6f0:	d8c00b17 	ldw	r3,44(sp)
8111c6f4:	1800ab1e 	bne	r3,zero,8111c9a4 <_dtoa_r+0xdfc>
8111c6f8:	dc800717 	ldw	r18,28(sp)
8111c6fc:	dcc00617 	ldw	r19,24(sp)
8111c700:	9029883a 	mov	r20,r18
8111c704:	00000206 	br	8111c710 <_dtoa_r+0xb68>
8111c708:	111ed980 	call	8111ed98 <__multadd>
8111c70c:	1021883a 	mov	r16,r2
8111c710:	a80b883a 	mov	r5,r21
8111c714:	8009883a 	mov	r4,r16
8111c718:	111b9a00 	call	8111b9a0 <quorem>
8111c71c:	10800c04 	addi	r2,r2,48
8111c720:	90800005 	stb	r2,0(r18)
8111c724:	94800044 	addi	r18,r18,1
8111c728:	9507c83a 	sub	r3,r18,r20
8111c72c:	000f883a 	mov	r7,zero
8111c730:	01800284 	movi	r6,10
8111c734:	800b883a 	mov	r5,r16
8111c738:	e009883a 	mov	r4,fp
8111c73c:	1cfff216 	blt	r3,r19,8111c708 <__reset+0xfb0fc708>
8111c740:	1011883a 	mov	r8,r2
8111c744:	d8800617 	ldw	r2,24(sp)
8111c748:	0082370e 	bge	zero,r2,8111d028 <_dtoa_r+0x1480>
8111c74c:	d9000717 	ldw	r4,28(sp)
8111c750:	0025883a 	mov	r18,zero
8111c754:	20af883a 	add	r23,r4,r2
8111c758:	01800044 	movi	r6,1
8111c75c:	800b883a 	mov	r5,r16
8111c760:	e009883a 	mov	r4,fp
8111c764:	da001715 	stw	r8,92(sp)
8111c768:	111f4700 	call	8111f470 <__lshift>
8111c76c:	a80b883a 	mov	r5,r21
8111c770:	1009883a 	mov	r4,r2
8111c774:	d8800915 	stw	r2,36(sp)
8111c778:	111f5c00 	call	8111f5c0 <__mcmp>
8111c77c:	da001717 	ldw	r8,92(sp)
8111c780:	0081800e 	bge	zero,r2,8111cd84 <_dtoa_r+0x11dc>
8111c784:	b93fffc3 	ldbu	r4,-1(r23)
8111c788:	b8bfffc4 	addi	r2,r23,-1
8111c78c:	1007883a 	mov	r3,r2
8111c790:	01800e44 	movi	r6,57
8111c794:	d9c00717 	ldw	r7,28(sp)
8111c798:	00000506 	br	8111c7b0 <_dtoa_r+0xc08>
8111c79c:	18ffffc4 	addi	r3,r3,-1
8111c7a0:	11c12326 	beq	r2,r7,8111cc30 <_dtoa_r+0x1088>
8111c7a4:	19000003 	ldbu	r4,0(r3)
8111c7a8:	102f883a 	mov	r23,r2
8111c7ac:	10bfffc4 	addi	r2,r2,-1
8111c7b0:	21403fcc 	andi	r5,r4,255
8111c7b4:	2940201c 	xori	r5,r5,128
8111c7b8:	297fe004 	addi	r5,r5,-128
8111c7bc:	29bff726 	beq	r5,r6,8111c79c <__reset+0xfb0fc79c>
8111c7c0:	21000044 	addi	r4,r4,1
8111c7c4:	11000005 	stb	r4,0(r2)
8111c7c8:	a80b883a 	mov	r5,r21
8111c7cc:	e009883a 	mov	r4,fp
8111c7d0:	111ed700 	call	8111ed70 <_Bfree>
8111c7d4:	883ea026 	beq	r17,zero,8111c258 <__reset+0xfb0fc258>
8111c7d8:	90000426 	beq	r18,zero,8111c7ec <_dtoa_r+0xc44>
8111c7dc:	94400326 	beq	r18,r17,8111c7ec <_dtoa_r+0xc44>
8111c7e0:	900b883a 	mov	r5,r18
8111c7e4:	e009883a 	mov	r4,fp
8111c7e8:	111ed700 	call	8111ed70 <_Bfree>
8111c7ec:	880b883a 	mov	r5,r17
8111c7f0:	e009883a 	mov	r4,fp
8111c7f4:	111ed700 	call	8111ed70 <_Bfree>
8111c7f8:	003e9706 	br	8111c258 <__reset+0xfb0fc258>
8111c7fc:	01800044 	movi	r6,1
8111c800:	d9800e15 	stw	r6,56(sp)
8111c804:	003d9606 	br	8111be60 <__reset+0xfb0fbe60>
8111c808:	d8800817 	ldw	r2,32(sp)
8111c80c:	d8c00517 	ldw	r3,20(sp)
8111c810:	d8000d15 	stw	zero,52(sp)
8111c814:	10c5c83a 	sub	r2,r2,r3
8111c818:	00c9c83a 	sub	r4,zero,r3
8111c81c:	d8800815 	stw	r2,32(sp)
8111c820:	d9000a15 	stw	r4,40(sp)
8111c824:	003d9706 	br	8111be84 <__reset+0xfb0fbe84>
8111c828:	05adc83a 	sub	r22,zero,r22
8111c82c:	dd800815 	stw	r22,32(sp)
8111c830:	002d883a 	mov	r22,zero
8111c834:	003d8e06 	br	8111be70 <__reset+0xfb0fbe70>
8111c838:	d9000517 	ldw	r4,20(sp)
8111c83c:	11290b00 	call	811290b0 <__floatsidf>
8111c840:	100d883a 	mov	r6,r2
8111c844:	180f883a 	mov	r7,r3
8111c848:	a009883a 	mov	r4,r20
8111c84c:	880b883a 	mov	r5,r17
8111c850:	11284d40 	call	811284d4 <__eqdf2>
8111c854:	103d7126 	beq	r2,zero,8111be1c <__reset+0xfb0fbe1c>
8111c858:	d9c00517 	ldw	r7,20(sp)
8111c85c:	39ffffc4 	addi	r7,r7,-1
8111c860:	d9c00515 	stw	r7,20(sp)
8111c864:	003d6d06 	br	8111be1c <__reset+0xfb0fbe1c>
8111c868:	dd400a17 	ldw	r21,40(sp)
8111c86c:	dd000817 	ldw	r20,32(sp)
8111c870:	0023883a 	mov	r17,zero
8111c874:	003f4806 	br	8111c598 <__reset+0xfb0fc598>
8111c878:	10e3c83a 	sub	r17,r2,r3
8111c87c:	9448983a 	sll	r4,r18,r17
8111c880:	003d3206 	br	8111bd4c <__reset+0xfb0fbd4c>
8111c884:	d8000e15 	stw	zero,56(sp)
8111c888:	003d7506 	br	8111be60 <__reset+0xfb0fbe60>
8111c88c:	b005883a 	mov	r2,r22
8111c890:	003f4506 	br	8111c5a8 <__reset+0xfb0fc5a8>
8111c894:	dc000915 	stw	r16,36(sp)
8111c898:	d9800a17 	ldw	r6,40(sp)
8111c89c:	d9400917 	ldw	r5,36(sp)
8111c8a0:	e009883a 	mov	r4,fp
8111c8a4:	111f3280 	call	8111f328 <__pow5mult>
8111c8a8:	1021883a 	mov	r16,r2
8111c8ac:	003f5a06 	br	8111c618 <__reset+0xfb0fc618>
8111c8b0:	01c00044 	movi	r7,1
8111c8b4:	d9c00b15 	stw	r7,44(sp)
8111c8b8:	d8802217 	ldw	r2,136(sp)
8111c8bc:	0081280e 	bge	zero,r2,8111cd60 <_dtoa_r+0x11b8>
8111c8c0:	100d883a 	mov	r6,r2
8111c8c4:	1021883a 	mov	r16,r2
8111c8c8:	d8800c15 	stw	r2,48(sp)
8111c8cc:	d8800615 	stw	r2,24(sp)
8111c8d0:	003d8806 	br	8111bef4 <__reset+0xfb0fbef4>
8111c8d4:	d8800617 	ldw	r2,24(sp)
8111c8d8:	00be9b16 	blt	zero,r2,8111c348 <__reset+0xfb0fc348>
8111c8dc:	10010f1e 	bne	r2,zero,8111cd1c <_dtoa_r+0x1174>
8111c8e0:	880b883a 	mov	r5,r17
8111c8e4:	000d883a 	mov	r6,zero
8111c8e8:	01d00534 	movhi	r7,16404
8111c8ec:	8009883a 	mov	r4,r16
8111c8f0:	1112e200 	call	81112e20 <__muldf3>
8111c8f4:	900d883a 	mov	r6,r18
8111c8f8:	980f883a 	mov	r7,r19
8111c8fc:	1009883a 	mov	r4,r2
8111c900:	180b883a 	mov	r5,r3
8111c904:	112855c0 	call	8112855c <__gedf2>
8111c908:	002b883a 	mov	r21,zero
8111c90c:	0023883a 	mov	r17,zero
8111c910:	1000bf16 	blt	r2,zero,8111cc10 <_dtoa_r+0x1068>
8111c914:	d9802217 	ldw	r6,136(sp)
8111c918:	ddc00717 	ldw	r23,28(sp)
8111c91c:	018c303a 	nor	r6,zero,r6
8111c920:	d9800515 	stw	r6,20(sp)
8111c924:	a80b883a 	mov	r5,r21
8111c928:	e009883a 	mov	r4,fp
8111c92c:	111ed700 	call	8111ed70 <_Bfree>
8111c930:	883e4926 	beq	r17,zero,8111c258 <__reset+0xfb0fc258>
8111c934:	003fad06 	br	8111c7ec <__reset+0xfb0fc7ec>
8111c938:	d9c01117 	ldw	r7,68(sp)
8111c93c:	3801bc26 	beq	r7,zero,8111d030 <_dtoa_r+0x1488>
8111c940:	10810cc4 	addi	r2,r2,1075
8111c944:	dd400a17 	ldw	r21,40(sp)
8111c948:	dd000817 	ldw	r20,32(sp)
8111c94c:	003f0a06 	br	8111c578 <__reset+0xfb0fc578>
8111c950:	00800704 	movi	r2,28
8111c954:	d9000817 	ldw	r4,32(sp)
8111c958:	a0a9883a 	add	r20,r20,r2
8111c95c:	b0ad883a 	add	r22,r22,r2
8111c960:	2089883a 	add	r4,r4,r2
8111c964:	d9000815 	stw	r4,32(sp)
8111c968:	003f5106 	br	8111c6b0 <__reset+0xfb0fc6b0>
8111c96c:	d8c00317 	ldw	r3,12(sp)
8111c970:	b8c1fc0e 	bge	r23,r3,8111d164 <_dtoa_r+0x15bc>
8111c974:	0027883a 	mov	r19,zero
8111c978:	b805883a 	mov	r2,r23
8111c97c:	003f3e06 	br	8111c678 <__reset+0xfb0fc678>
8111c980:	880b883a 	mov	r5,r17
8111c984:	e009883a 	mov	r4,fp
8111c988:	000f883a 	mov	r7,zero
8111c98c:	01800284 	movi	r6,10
8111c990:	111ed980 	call	8111ed98 <__multadd>
8111c994:	d9000c17 	ldw	r4,48(sp)
8111c998:	1023883a 	mov	r17,r2
8111c99c:	0102040e 	bge	zero,r4,8111d1b0 <_dtoa_r+0x1608>
8111c9a0:	d9000615 	stw	r4,24(sp)
8111c9a4:	0500050e 	bge	zero,r20,8111c9bc <_dtoa_r+0xe14>
8111c9a8:	880b883a 	mov	r5,r17
8111c9ac:	a00d883a 	mov	r6,r20
8111c9b0:	e009883a 	mov	r4,fp
8111c9b4:	111f4700 	call	8111f470 <__lshift>
8111c9b8:	1023883a 	mov	r17,r2
8111c9bc:	9801241e 	bne	r19,zero,8111ce50 <_dtoa_r+0x12a8>
8111c9c0:	8829883a 	mov	r20,r17
8111c9c4:	d9000617 	ldw	r4,24(sp)
8111c9c8:	dcc00717 	ldw	r19,28(sp)
8111c9cc:	9480004c 	andi	r18,r18,1
8111c9d0:	20bfffc4 	addi	r2,r4,-1
8111c9d4:	9885883a 	add	r2,r19,r2
8111c9d8:	d8800415 	stw	r2,16(sp)
8111c9dc:	dc800615 	stw	r18,24(sp)
8111c9e0:	a80b883a 	mov	r5,r21
8111c9e4:	8009883a 	mov	r4,r16
8111c9e8:	111b9a00 	call	8111b9a0 <quorem>
8111c9ec:	880b883a 	mov	r5,r17
8111c9f0:	8009883a 	mov	r4,r16
8111c9f4:	102f883a 	mov	r23,r2
8111c9f8:	111f5c00 	call	8111f5c0 <__mcmp>
8111c9fc:	a80b883a 	mov	r5,r21
8111ca00:	a00d883a 	mov	r6,r20
8111ca04:	e009883a 	mov	r4,fp
8111ca08:	102d883a 	mov	r22,r2
8111ca0c:	111f6200 	call	8111f620 <__mdiff>
8111ca10:	1007883a 	mov	r3,r2
8111ca14:	10800317 	ldw	r2,12(r2)
8111ca18:	bc800c04 	addi	r18,r23,48
8111ca1c:	180b883a 	mov	r5,r3
8111ca20:	10004e1e 	bne	r2,zero,8111cb5c <_dtoa_r+0xfb4>
8111ca24:	8009883a 	mov	r4,r16
8111ca28:	d8c01615 	stw	r3,88(sp)
8111ca2c:	111f5c00 	call	8111f5c0 <__mcmp>
8111ca30:	d8c01617 	ldw	r3,88(sp)
8111ca34:	e009883a 	mov	r4,fp
8111ca38:	d8801615 	stw	r2,88(sp)
8111ca3c:	180b883a 	mov	r5,r3
8111ca40:	111ed700 	call	8111ed70 <_Bfree>
8111ca44:	d8801617 	ldw	r2,88(sp)
8111ca48:	1000041e 	bne	r2,zero,8111ca5c <_dtoa_r+0xeb4>
8111ca4c:	d9800317 	ldw	r6,12(sp)
8111ca50:	3000021e 	bne	r6,zero,8111ca5c <_dtoa_r+0xeb4>
8111ca54:	d8c00617 	ldw	r3,24(sp)
8111ca58:	18003726 	beq	r3,zero,8111cb38 <_dtoa_r+0xf90>
8111ca5c:	b0002016 	blt	r22,zero,8111cae0 <_dtoa_r+0xf38>
8111ca60:	b000041e 	bne	r22,zero,8111ca74 <_dtoa_r+0xecc>
8111ca64:	d9000317 	ldw	r4,12(sp)
8111ca68:	2000021e 	bne	r4,zero,8111ca74 <_dtoa_r+0xecc>
8111ca6c:	d8c00617 	ldw	r3,24(sp)
8111ca70:	18001b26 	beq	r3,zero,8111cae0 <_dtoa_r+0xf38>
8111ca74:	00810716 	blt	zero,r2,8111ce94 <_dtoa_r+0x12ec>
8111ca78:	d8c00417 	ldw	r3,16(sp)
8111ca7c:	9d800044 	addi	r22,r19,1
8111ca80:	9c800005 	stb	r18,0(r19)
8111ca84:	b02f883a 	mov	r23,r22
8111ca88:	98c10626 	beq	r19,r3,8111cea4 <_dtoa_r+0x12fc>
8111ca8c:	800b883a 	mov	r5,r16
8111ca90:	000f883a 	mov	r7,zero
8111ca94:	01800284 	movi	r6,10
8111ca98:	e009883a 	mov	r4,fp
8111ca9c:	111ed980 	call	8111ed98 <__multadd>
8111caa0:	1021883a 	mov	r16,r2
8111caa4:	000f883a 	mov	r7,zero
8111caa8:	01800284 	movi	r6,10
8111caac:	880b883a 	mov	r5,r17
8111cab0:	e009883a 	mov	r4,fp
8111cab4:	8d002526 	beq	r17,r20,8111cb4c <_dtoa_r+0xfa4>
8111cab8:	111ed980 	call	8111ed98 <__multadd>
8111cabc:	a00b883a 	mov	r5,r20
8111cac0:	000f883a 	mov	r7,zero
8111cac4:	01800284 	movi	r6,10
8111cac8:	e009883a 	mov	r4,fp
8111cacc:	1023883a 	mov	r17,r2
8111cad0:	111ed980 	call	8111ed98 <__multadd>
8111cad4:	1029883a 	mov	r20,r2
8111cad8:	b027883a 	mov	r19,r22
8111cadc:	003fc006 	br	8111c9e0 <__reset+0xfb0fc9e0>
8111cae0:	9011883a 	mov	r8,r18
8111cae4:	00800e0e 	bge	zero,r2,8111cb20 <_dtoa_r+0xf78>
8111cae8:	800b883a 	mov	r5,r16
8111caec:	01800044 	movi	r6,1
8111caf0:	e009883a 	mov	r4,fp
8111caf4:	da001715 	stw	r8,92(sp)
8111caf8:	111f4700 	call	8111f470 <__lshift>
8111cafc:	a80b883a 	mov	r5,r21
8111cb00:	1009883a 	mov	r4,r2
8111cb04:	1021883a 	mov	r16,r2
8111cb08:	111f5c00 	call	8111f5c0 <__mcmp>
8111cb0c:	da001717 	ldw	r8,92(sp)
8111cb10:	0081960e 	bge	zero,r2,8111d16c <_dtoa_r+0x15c4>
8111cb14:	00800e44 	movi	r2,57
8111cb18:	40817026 	beq	r8,r2,8111d0dc <_dtoa_r+0x1534>
8111cb1c:	ba000c44 	addi	r8,r23,49
8111cb20:	8825883a 	mov	r18,r17
8111cb24:	9dc00044 	addi	r23,r19,1
8111cb28:	9a000005 	stb	r8,0(r19)
8111cb2c:	a023883a 	mov	r17,r20
8111cb30:	dc000915 	stw	r16,36(sp)
8111cb34:	003f2406 	br	8111c7c8 <__reset+0xfb0fc7c8>
8111cb38:	00800e44 	movi	r2,57
8111cb3c:	9011883a 	mov	r8,r18
8111cb40:	90816626 	beq	r18,r2,8111d0dc <_dtoa_r+0x1534>
8111cb44:	05bff516 	blt	zero,r22,8111cb1c <__reset+0xfb0fcb1c>
8111cb48:	003ff506 	br	8111cb20 <__reset+0xfb0fcb20>
8111cb4c:	111ed980 	call	8111ed98 <__multadd>
8111cb50:	1023883a 	mov	r17,r2
8111cb54:	1029883a 	mov	r20,r2
8111cb58:	003fdf06 	br	8111cad8 <__reset+0xfb0fcad8>
8111cb5c:	e009883a 	mov	r4,fp
8111cb60:	111ed700 	call	8111ed70 <_Bfree>
8111cb64:	00800044 	movi	r2,1
8111cb68:	003fbc06 	br	8111ca5c <__reset+0xfb0fca5c>
8111cb6c:	a80b883a 	mov	r5,r21
8111cb70:	8009883a 	mov	r4,r16
8111cb74:	111f5c00 	call	8111f5c0 <__mcmp>
8111cb78:	103edb0e 	bge	r2,zero,8111c6e8 <__reset+0xfb0fc6e8>
8111cb7c:	800b883a 	mov	r5,r16
8111cb80:	000f883a 	mov	r7,zero
8111cb84:	01800284 	movi	r6,10
8111cb88:	e009883a 	mov	r4,fp
8111cb8c:	111ed980 	call	8111ed98 <__multadd>
8111cb90:	1021883a 	mov	r16,r2
8111cb94:	d8800517 	ldw	r2,20(sp)
8111cb98:	d8c00b17 	ldw	r3,44(sp)
8111cb9c:	10bfffc4 	addi	r2,r2,-1
8111cba0:	d8800515 	stw	r2,20(sp)
8111cba4:	183f761e 	bne	r3,zero,8111c980 <__reset+0xfb0fc980>
8111cba8:	d9000c17 	ldw	r4,48(sp)
8111cbac:	0101730e 	bge	zero,r4,8111d17c <_dtoa_r+0x15d4>
8111cbb0:	d9000615 	stw	r4,24(sp)
8111cbb4:	003ed006 	br	8111c6f8 <__reset+0xfb0fc6f8>
8111cbb8:	00800084 	movi	r2,2
8111cbbc:	3081861e 	bne	r6,r2,8111d1d8 <_dtoa_r+0x1630>
8111cbc0:	d8000b15 	stw	zero,44(sp)
8111cbc4:	003f3c06 	br	8111c8b8 <__reset+0xfb0fc8b8>
8111cbc8:	dc000917 	ldw	r16,36(sp)
8111cbcc:	003e9206 	br	8111c618 <__reset+0xfb0fc618>
8111cbd0:	d9c00317 	ldw	r7,12(sp)
8111cbd4:	00800084 	movi	r2,2
8111cbd8:	11fec50e 	bge	r2,r7,8111c6f0 <__reset+0xfb0fc6f0>
8111cbdc:	d9000617 	ldw	r4,24(sp)
8111cbe0:	20013c1e 	bne	r4,zero,8111d0d4 <_dtoa_r+0x152c>
8111cbe4:	a80b883a 	mov	r5,r21
8111cbe8:	000f883a 	mov	r7,zero
8111cbec:	01800144 	movi	r6,5
8111cbf0:	e009883a 	mov	r4,fp
8111cbf4:	111ed980 	call	8111ed98 <__multadd>
8111cbf8:	100b883a 	mov	r5,r2
8111cbfc:	8009883a 	mov	r4,r16
8111cc00:	102b883a 	mov	r21,r2
8111cc04:	111f5c00 	call	8111f5c0 <__mcmp>
8111cc08:	dc000915 	stw	r16,36(sp)
8111cc0c:	00bf410e 	bge	zero,r2,8111c914 <__reset+0xfb0fc914>
8111cc10:	d9c00717 	ldw	r7,28(sp)
8111cc14:	00800c44 	movi	r2,49
8111cc18:	38800005 	stb	r2,0(r7)
8111cc1c:	d8800517 	ldw	r2,20(sp)
8111cc20:	3dc00044 	addi	r23,r7,1
8111cc24:	10800044 	addi	r2,r2,1
8111cc28:	d8800515 	stw	r2,20(sp)
8111cc2c:	003f3d06 	br	8111c924 <__reset+0xfb0fc924>
8111cc30:	d9800517 	ldw	r6,20(sp)
8111cc34:	d9c00717 	ldw	r7,28(sp)
8111cc38:	00800c44 	movi	r2,49
8111cc3c:	31800044 	addi	r6,r6,1
8111cc40:	d9800515 	stw	r6,20(sp)
8111cc44:	38800005 	stb	r2,0(r7)
8111cc48:	003edf06 	br	8111c7c8 <__reset+0xfb0fc7c8>
8111cc4c:	d8000b15 	stw	zero,44(sp)
8111cc50:	003c9f06 	br	8111bed0 <__reset+0xfb0fbed0>
8111cc54:	903e7e1e 	bne	r18,zero,8111c650 <__reset+0xfb0fc650>
8111cc58:	00800434 	movhi	r2,16
8111cc5c:	10bfffc4 	addi	r2,r2,-1
8111cc60:	9884703a 	and	r2,r19,r2
8111cc64:	1000ea1e 	bne	r2,zero,8111d010 <_dtoa_r+0x1468>
8111cc68:	9cdffc2c 	andhi	r19,r19,32752
8111cc6c:	9800e826 	beq	r19,zero,8111d010 <_dtoa_r+0x1468>
8111cc70:	d9c00817 	ldw	r7,32(sp)
8111cc74:	b5800044 	addi	r22,r22,1
8111cc78:	04c00044 	movi	r19,1
8111cc7c:	39c00044 	addi	r7,r7,1
8111cc80:	d9c00815 	stw	r7,32(sp)
8111cc84:	d8800d17 	ldw	r2,52(sp)
8111cc88:	103e721e 	bne	r2,zero,8111c654 <__reset+0xfb0fc654>
8111cc8c:	00800044 	movi	r2,1
8111cc90:	003e7906 	br	8111c678 <__reset+0xfb0fc678>
8111cc94:	8009883a 	mov	r4,r16
8111cc98:	11290b00 	call	811290b0 <__floatsidf>
8111cc9c:	d9800f17 	ldw	r6,60(sp)
8111cca0:	d9c01017 	ldw	r7,64(sp)
8111cca4:	1009883a 	mov	r4,r2
8111cca8:	180b883a 	mov	r5,r3
8111ccac:	1112e200 	call	81112e20 <__muldf3>
8111ccb0:	000d883a 	mov	r6,zero
8111ccb4:	01d00734 	movhi	r7,16412
8111ccb8:	1009883a 	mov	r4,r2
8111ccbc:	180b883a 	mov	r5,r3
8111ccc0:	11273300 	call	81127330 <__adddf3>
8111ccc4:	047f3034 	movhi	r17,64704
8111ccc8:	1021883a 	mov	r16,r2
8111cccc:	1c63883a 	add	r17,r3,r17
8111ccd0:	d9000f17 	ldw	r4,60(sp)
8111ccd4:	d9401017 	ldw	r5,64(sp)
8111ccd8:	000d883a 	mov	r6,zero
8111ccdc:	01d00534 	movhi	r7,16404
8111cce0:	112872c0 	call	8112872c <__subdf3>
8111cce4:	800d883a 	mov	r6,r16
8111cce8:	880f883a 	mov	r7,r17
8111ccec:	1009883a 	mov	r4,r2
8111ccf0:	180b883a 	mov	r5,r3
8111ccf4:	102b883a 	mov	r21,r2
8111ccf8:	1829883a 	mov	r20,r3
8111ccfc:	112855c0 	call	8112855c <__gedf2>
8111cd00:	00806c16 	blt	zero,r2,8111ceb4 <_dtoa_r+0x130c>
8111cd04:	89e0003c 	xorhi	r7,r17,32768
8111cd08:	800d883a 	mov	r6,r16
8111cd0c:	a809883a 	mov	r4,r21
8111cd10:	a00b883a 	mov	r5,r20
8111cd14:	11286380 	call	81128638 <__ledf2>
8111cd18:	103d7e0e 	bge	r2,zero,8111c314 <__reset+0xfb0fc314>
8111cd1c:	002b883a 	mov	r21,zero
8111cd20:	0023883a 	mov	r17,zero
8111cd24:	003efb06 	br	8111c914 <__reset+0xfb0fc914>
8111cd28:	d8800717 	ldw	r2,28(sp)
8111cd2c:	003bd006 	br	8111bc70 <__reset+0xfb0fbc70>
8111cd30:	d9000a17 	ldw	r4,40(sp)
8111cd34:	d9800d17 	ldw	r6,52(sp)
8111cd38:	dd400a15 	stw	r21,40(sp)
8111cd3c:	a905c83a 	sub	r2,r21,r4
8111cd40:	308d883a 	add	r6,r6,r2
8111cd44:	d9800d15 	stw	r6,52(sp)
8111cd48:	002b883a 	mov	r21,zero
8111cd4c:	003e0606 	br	8111c568 <__reset+0xfb0fc568>
8111cd50:	9023883a 	mov	r17,r18
8111cd54:	9829883a 	mov	r20,r19
8111cd58:	04000084 	movi	r16,2
8111cd5c:	003c9206 	br	8111bfa8 <__reset+0xfb0fbfa8>
8111cd60:	04000044 	movi	r16,1
8111cd64:	dc000c15 	stw	r16,48(sp)
8111cd68:	dc000615 	stw	r16,24(sp)
8111cd6c:	dc002215 	stw	r16,136(sp)
8111cd70:	e0001115 	stw	zero,68(fp)
8111cd74:	000b883a 	mov	r5,zero
8111cd78:	003c6906 	br	8111bf20 <__reset+0xfb0fbf20>
8111cd7c:	3021883a 	mov	r16,r6
8111cd80:	003ffb06 	br	8111cd70 <__reset+0xfb0fcd70>
8111cd84:	1000021e 	bne	r2,zero,8111cd90 <_dtoa_r+0x11e8>
8111cd88:	4200004c 	andi	r8,r8,1
8111cd8c:	403e7d1e 	bne	r8,zero,8111c784 <__reset+0xfb0fc784>
8111cd90:	01000c04 	movi	r4,48
8111cd94:	00000106 	br	8111cd9c <_dtoa_r+0x11f4>
8111cd98:	102f883a 	mov	r23,r2
8111cd9c:	b8bfffc4 	addi	r2,r23,-1
8111cda0:	10c00007 	ldb	r3,0(r2)
8111cda4:	193ffc26 	beq	r3,r4,8111cd98 <__reset+0xfb0fcd98>
8111cda8:	003e8706 	br	8111c7c8 <__reset+0xfb0fc7c8>
8111cdac:	d8800517 	ldw	r2,20(sp)
8111cdb0:	00a3c83a 	sub	r17,zero,r2
8111cdb4:	8800a426 	beq	r17,zero,8111d048 <_dtoa_r+0x14a0>
8111cdb8:	888003cc 	andi	r2,r17,15
8111cdbc:	100490fa 	slli	r2,r2,3
8111cdc0:	00e04534 	movhi	r3,33044
8111cdc4:	18c8e504 	addi	r3,r3,9108
8111cdc8:	1885883a 	add	r2,r3,r2
8111cdcc:	11800017 	ldw	r6,0(r2)
8111cdd0:	11c00117 	ldw	r7,4(r2)
8111cdd4:	9009883a 	mov	r4,r18
8111cdd8:	980b883a 	mov	r5,r19
8111cddc:	8823d13a 	srai	r17,r17,4
8111cde0:	1112e200 	call	81112e20 <__muldf3>
8111cde4:	d8800f15 	stw	r2,60(sp)
8111cde8:	d8c01015 	stw	r3,64(sp)
8111cdec:	8800e826 	beq	r17,zero,8111d190 <_dtoa_r+0x15e8>
8111cdf0:	05204534 	movhi	r20,33044
8111cdf4:	a508db04 	addi	r20,r20,9068
8111cdf8:	04000084 	movi	r16,2
8111cdfc:	8980004c 	andi	r6,r17,1
8111ce00:	1009883a 	mov	r4,r2
8111ce04:	8823d07a 	srai	r17,r17,1
8111ce08:	180b883a 	mov	r5,r3
8111ce0c:	30000426 	beq	r6,zero,8111ce20 <_dtoa_r+0x1278>
8111ce10:	a1800017 	ldw	r6,0(r20)
8111ce14:	a1c00117 	ldw	r7,4(r20)
8111ce18:	84000044 	addi	r16,r16,1
8111ce1c:	1112e200 	call	81112e20 <__muldf3>
8111ce20:	a5000204 	addi	r20,r20,8
8111ce24:	883ff51e 	bne	r17,zero,8111cdfc <__reset+0xfb0fcdfc>
8111ce28:	d8800f15 	stw	r2,60(sp)
8111ce2c:	d8c01015 	stw	r3,64(sp)
8111ce30:	003c7606 	br	8111c00c <__reset+0xfb0fc00c>
8111ce34:	00c00c04 	movi	r3,48
8111ce38:	10c00005 	stb	r3,0(r2)
8111ce3c:	d8c00517 	ldw	r3,20(sp)
8111ce40:	bd3fffc3 	ldbu	r20,-1(r23)
8111ce44:	18c00044 	addi	r3,r3,1
8111ce48:	d8c00515 	stw	r3,20(sp)
8111ce4c:	003db906 	br	8111c534 <__reset+0xfb0fc534>
8111ce50:	89400117 	ldw	r5,4(r17)
8111ce54:	e009883a 	mov	r4,fp
8111ce58:	111ecc00 	call	8111ecc0 <_Balloc>
8111ce5c:	89800417 	ldw	r6,16(r17)
8111ce60:	89400304 	addi	r5,r17,12
8111ce64:	11000304 	addi	r4,r2,12
8111ce68:	31800084 	addi	r6,r6,2
8111ce6c:	318d883a 	add	r6,r6,r6
8111ce70:	318d883a 	add	r6,r6,r6
8111ce74:	1027883a 	mov	r19,r2
8111ce78:	1114a700 	call	81114a70 <memcpy>
8111ce7c:	01800044 	movi	r6,1
8111ce80:	980b883a 	mov	r5,r19
8111ce84:	e009883a 	mov	r4,fp
8111ce88:	111f4700 	call	8111f470 <__lshift>
8111ce8c:	1029883a 	mov	r20,r2
8111ce90:	003ecc06 	br	8111c9c4 <__reset+0xfb0fc9c4>
8111ce94:	00800e44 	movi	r2,57
8111ce98:	90809026 	beq	r18,r2,8111d0dc <_dtoa_r+0x1534>
8111ce9c:	92000044 	addi	r8,r18,1
8111cea0:	003f1f06 	br	8111cb20 <__reset+0xfb0fcb20>
8111cea4:	9011883a 	mov	r8,r18
8111cea8:	8825883a 	mov	r18,r17
8111ceac:	a023883a 	mov	r17,r20
8111ceb0:	003e2906 	br	8111c758 <__reset+0xfb0fc758>
8111ceb4:	002b883a 	mov	r21,zero
8111ceb8:	0023883a 	mov	r17,zero
8111cebc:	003f5406 	br	8111cc10 <__reset+0xfb0fcc10>
8111cec0:	61bfffc4 	addi	r6,r12,-1
8111cec4:	300490fa 	slli	r2,r6,3
8111cec8:	00e04534 	movhi	r3,33044
8111cecc:	18c8e504 	addi	r3,r3,9108
8111ced0:	1885883a 	add	r2,r3,r2
8111ced4:	11000017 	ldw	r4,0(r2)
8111ced8:	11400117 	ldw	r5,4(r2)
8111cedc:	d8800717 	ldw	r2,28(sp)
8111cee0:	880f883a 	mov	r7,r17
8111cee4:	d9801215 	stw	r6,72(sp)
8111cee8:	800d883a 	mov	r6,r16
8111ceec:	db001615 	stw	r12,88(sp)
8111cef0:	15c00044 	addi	r23,r2,1
8111cef4:	1112e200 	call	81112e20 <__muldf3>
8111cef8:	d9401017 	ldw	r5,64(sp)
8111cefc:	d9000f17 	ldw	r4,60(sp)
8111cf00:	d8c01515 	stw	r3,84(sp)
8111cf04:	d8801415 	stw	r2,80(sp)
8111cf08:	11290300 	call	81129030 <__fixdfsi>
8111cf0c:	1009883a 	mov	r4,r2
8111cf10:	1021883a 	mov	r16,r2
8111cf14:	11290b00 	call	811290b0 <__floatsidf>
8111cf18:	d9000f17 	ldw	r4,60(sp)
8111cf1c:	d9401017 	ldw	r5,64(sp)
8111cf20:	100d883a 	mov	r6,r2
8111cf24:	180f883a 	mov	r7,r3
8111cf28:	112872c0 	call	8112872c <__subdf3>
8111cf2c:	1829883a 	mov	r20,r3
8111cf30:	d8c00717 	ldw	r3,28(sp)
8111cf34:	84000c04 	addi	r16,r16,48
8111cf38:	1023883a 	mov	r17,r2
8111cf3c:	1c000005 	stb	r16,0(r3)
8111cf40:	db001617 	ldw	r12,88(sp)
8111cf44:	00800044 	movi	r2,1
8111cf48:	60802226 	beq	r12,r2,8111cfd4 <_dtoa_r+0x142c>
8111cf4c:	d9c00717 	ldw	r7,28(sp)
8111cf50:	8805883a 	mov	r2,r17
8111cf54:	b82b883a 	mov	r21,r23
8111cf58:	3b19883a 	add	r12,r7,r12
8111cf5c:	6023883a 	mov	r17,r12
8111cf60:	a007883a 	mov	r3,r20
8111cf64:	dc800f15 	stw	r18,60(sp)
8111cf68:	000d883a 	mov	r6,zero
8111cf6c:	01d00934 	movhi	r7,16420
8111cf70:	1009883a 	mov	r4,r2
8111cf74:	180b883a 	mov	r5,r3
8111cf78:	1112e200 	call	81112e20 <__muldf3>
8111cf7c:	180b883a 	mov	r5,r3
8111cf80:	1009883a 	mov	r4,r2
8111cf84:	1829883a 	mov	r20,r3
8111cf88:	1025883a 	mov	r18,r2
8111cf8c:	11290300 	call	81129030 <__fixdfsi>
8111cf90:	1009883a 	mov	r4,r2
8111cf94:	1021883a 	mov	r16,r2
8111cf98:	11290b00 	call	811290b0 <__floatsidf>
8111cf9c:	100d883a 	mov	r6,r2
8111cfa0:	180f883a 	mov	r7,r3
8111cfa4:	9009883a 	mov	r4,r18
8111cfa8:	a00b883a 	mov	r5,r20
8111cfac:	84000c04 	addi	r16,r16,48
8111cfb0:	112872c0 	call	8112872c <__subdf3>
8111cfb4:	ad400044 	addi	r21,r21,1
8111cfb8:	ac3fffc5 	stb	r16,-1(r21)
8111cfbc:	ac7fea1e 	bne	r21,r17,8111cf68 <__reset+0xfb0fcf68>
8111cfc0:	1023883a 	mov	r17,r2
8111cfc4:	d8801217 	ldw	r2,72(sp)
8111cfc8:	dc800f17 	ldw	r18,60(sp)
8111cfcc:	1829883a 	mov	r20,r3
8111cfd0:	b8af883a 	add	r23,r23,r2
8111cfd4:	d9001417 	ldw	r4,80(sp)
8111cfd8:	d9401517 	ldw	r5,84(sp)
8111cfdc:	000d883a 	mov	r6,zero
8111cfe0:	01cff834 	movhi	r7,16352
8111cfe4:	11273300 	call	81127330 <__adddf3>
8111cfe8:	880d883a 	mov	r6,r17
8111cfec:	a00f883a 	mov	r7,r20
8111cff0:	1009883a 	mov	r4,r2
8111cff4:	180b883a 	mov	r5,r3
8111cff8:	11286380 	call	81128638 <__ledf2>
8111cffc:	10003e0e 	bge	r2,zero,8111d0f8 <_dtoa_r+0x1550>
8111d000:	d9001317 	ldw	r4,76(sp)
8111d004:	bd3fffc3 	ldbu	r20,-1(r23)
8111d008:	d9000515 	stw	r4,20(sp)
8111d00c:	003d3b06 	br	8111c4fc <__reset+0xfb0fc4fc>
8111d010:	0027883a 	mov	r19,zero
8111d014:	003f1b06 	br	8111cc84 <__reset+0xfb0fcc84>
8111d018:	d8800817 	ldw	r2,32(sp)
8111d01c:	11e9c83a 	sub	r20,r2,r7
8111d020:	0005883a 	mov	r2,zero
8111d024:	003d5406 	br	8111c578 <__reset+0xfb0fc578>
8111d028:	00800044 	movi	r2,1
8111d02c:	003dc706 	br	8111c74c <__reset+0xfb0fc74c>
8111d030:	d8c00217 	ldw	r3,8(sp)
8111d034:	00800d84 	movi	r2,54
8111d038:	dd400a17 	ldw	r21,40(sp)
8111d03c:	10c5c83a 	sub	r2,r2,r3
8111d040:	dd000817 	ldw	r20,32(sp)
8111d044:	003d4c06 	br	8111c578 <__reset+0xfb0fc578>
8111d048:	dc800f15 	stw	r18,60(sp)
8111d04c:	dcc01015 	stw	r19,64(sp)
8111d050:	04000084 	movi	r16,2
8111d054:	003bed06 	br	8111c00c <__reset+0xfb0fc00c>
8111d058:	d9000617 	ldw	r4,24(sp)
8111d05c:	203f0d26 	beq	r4,zero,8111cc94 <__reset+0xfb0fcc94>
8111d060:	d9800c17 	ldw	r6,48(sp)
8111d064:	01bcab0e 	bge	zero,r6,8111c314 <__reset+0xfb0fc314>
8111d068:	d9401017 	ldw	r5,64(sp)
8111d06c:	d9000f17 	ldw	r4,60(sp)
8111d070:	000d883a 	mov	r6,zero
8111d074:	01d00934 	movhi	r7,16420
8111d078:	1112e200 	call	81112e20 <__muldf3>
8111d07c:	81000044 	addi	r4,r16,1
8111d080:	d8800f15 	stw	r2,60(sp)
8111d084:	d8c01015 	stw	r3,64(sp)
8111d088:	11290b00 	call	811290b0 <__floatsidf>
8111d08c:	d9800f17 	ldw	r6,60(sp)
8111d090:	d9c01017 	ldw	r7,64(sp)
8111d094:	1009883a 	mov	r4,r2
8111d098:	180b883a 	mov	r5,r3
8111d09c:	1112e200 	call	81112e20 <__muldf3>
8111d0a0:	01d00734 	movhi	r7,16412
8111d0a4:	000d883a 	mov	r6,zero
8111d0a8:	1009883a 	mov	r4,r2
8111d0ac:	180b883a 	mov	r5,r3
8111d0b0:	11273300 	call	81127330 <__adddf3>
8111d0b4:	d9c00517 	ldw	r7,20(sp)
8111d0b8:	047f3034 	movhi	r17,64704
8111d0bc:	1021883a 	mov	r16,r2
8111d0c0:	39ffffc4 	addi	r7,r7,-1
8111d0c4:	d9c01315 	stw	r7,76(sp)
8111d0c8:	1c63883a 	add	r17,r3,r17
8111d0cc:	db000c17 	ldw	r12,48(sp)
8111d0d0:	003bea06 	br	8111c07c <__reset+0xfb0fc07c>
8111d0d4:	dc000915 	stw	r16,36(sp)
8111d0d8:	003e0e06 	br	8111c914 <__reset+0xfb0fc914>
8111d0dc:	01000e44 	movi	r4,57
8111d0e0:	8825883a 	mov	r18,r17
8111d0e4:	9dc00044 	addi	r23,r19,1
8111d0e8:	99000005 	stb	r4,0(r19)
8111d0ec:	a023883a 	mov	r17,r20
8111d0f0:	dc000915 	stw	r16,36(sp)
8111d0f4:	003da406 	br	8111c788 <__reset+0xfb0fc788>
8111d0f8:	d9801417 	ldw	r6,80(sp)
8111d0fc:	d9c01517 	ldw	r7,84(sp)
8111d100:	0009883a 	mov	r4,zero
8111d104:	014ff834 	movhi	r5,16352
8111d108:	112872c0 	call	8112872c <__subdf3>
8111d10c:	880d883a 	mov	r6,r17
8111d110:	a00f883a 	mov	r7,r20
8111d114:	1009883a 	mov	r4,r2
8111d118:	180b883a 	mov	r5,r3
8111d11c:	112855c0 	call	8112855c <__gedf2>
8111d120:	00bc7c0e 	bge	zero,r2,8111c314 <__reset+0xfb0fc314>
8111d124:	01000c04 	movi	r4,48
8111d128:	00000106 	br	8111d130 <_dtoa_r+0x1588>
8111d12c:	102f883a 	mov	r23,r2
8111d130:	b8bfffc4 	addi	r2,r23,-1
8111d134:	10c00007 	ldb	r3,0(r2)
8111d138:	193ffc26 	beq	r3,r4,8111d12c <__reset+0xfb0fd12c>
8111d13c:	d9801317 	ldw	r6,76(sp)
8111d140:	d9800515 	stw	r6,20(sp)
8111d144:	003c4406 	br	8111c258 <__reset+0xfb0fc258>
8111d148:	d9801317 	ldw	r6,76(sp)
8111d14c:	d9800515 	stw	r6,20(sp)
8111d150:	003cea06 	br	8111c4fc <__reset+0xfb0fc4fc>
8111d154:	dd800f17 	ldw	r22,60(sp)
8111d158:	dcc01017 	ldw	r19,64(sp)
8111d15c:	dc801217 	ldw	r18,72(sp)
8111d160:	003c6c06 	br	8111c314 <__reset+0xfb0fc314>
8111d164:	903e031e 	bne	r18,zero,8111c974 <__reset+0xfb0fc974>
8111d168:	003ebb06 	br	8111cc58 <__reset+0xfb0fcc58>
8111d16c:	103e6c1e 	bne	r2,zero,8111cb20 <__reset+0xfb0fcb20>
8111d170:	4080004c 	andi	r2,r8,1
8111d174:	103e6a26 	beq	r2,zero,8111cb20 <__reset+0xfb0fcb20>
8111d178:	003e6606 	br	8111cb14 <__reset+0xfb0fcb14>
8111d17c:	d8c00317 	ldw	r3,12(sp)
8111d180:	00800084 	movi	r2,2
8111d184:	10c02916 	blt	r2,r3,8111d22c <_dtoa_r+0x1684>
8111d188:	d9000c17 	ldw	r4,48(sp)
8111d18c:	003e8806 	br	8111cbb0 <__reset+0xfb0fcbb0>
8111d190:	04000084 	movi	r16,2
8111d194:	003b9d06 	br	8111c00c <__reset+0xfb0fc00c>
8111d198:	d9001317 	ldw	r4,76(sp)
8111d19c:	d9000515 	stw	r4,20(sp)
8111d1a0:	003cd606 	br	8111c4fc <__reset+0xfb0fc4fc>
8111d1a4:	d8801317 	ldw	r2,76(sp)
8111d1a8:	d8800515 	stw	r2,20(sp)
8111d1ac:	003c2a06 	br	8111c258 <__reset+0xfb0fc258>
8111d1b0:	d9800317 	ldw	r6,12(sp)
8111d1b4:	00800084 	movi	r2,2
8111d1b8:	11801516 	blt	r2,r6,8111d210 <_dtoa_r+0x1668>
8111d1bc:	d9c00c17 	ldw	r7,48(sp)
8111d1c0:	d9c00615 	stw	r7,24(sp)
8111d1c4:	003df706 	br	8111c9a4 <__reset+0xfb0fc9a4>
8111d1c8:	193d3926 	beq	r3,r4,8111c6b0 <__reset+0xfb0fc6b0>
8111d1cc:	00c00f04 	movi	r3,60
8111d1d0:	1885c83a 	sub	r2,r3,r2
8111d1d4:	003ddf06 	br	8111c954 <__reset+0xfb0fc954>
8111d1d8:	e009883a 	mov	r4,fp
8111d1dc:	e0001115 	stw	zero,68(fp)
8111d1e0:	000b883a 	mov	r5,zero
8111d1e4:	111ecc00 	call	8111ecc0 <_Balloc>
8111d1e8:	d8800715 	stw	r2,28(sp)
8111d1ec:	d8c00717 	ldw	r3,28(sp)
8111d1f0:	00bfffc4 	movi	r2,-1
8111d1f4:	01000044 	movi	r4,1
8111d1f8:	d8800c15 	stw	r2,48(sp)
8111d1fc:	e0c01015 	stw	r3,64(fp)
8111d200:	d9000b15 	stw	r4,44(sp)
8111d204:	d8800615 	stw	r2,24(sp)
8111d208:	d8002215 	stw	zero,136(sp)
8111d20c:	003c4106 	br	8111c314 <__reset+0xfb0fc314>
8111d210:	d8c00c17 	ldw	r3,48(sp)
8111d214:	d8c00615 	stw	r3,24(sp)
8111d218:	003e7006 	br	8111cbdc <__reset+0xfb0fcbdc>
8111d21c:	04400044 	movi	r17,1
8111d220:	003b2006 	br	8111bea4 <__reset+0xfb0fbea4>
8111d224:	000b883a 	mov	r5,zero
8111d228:	003b3d06 	br	8111bf20 <__reset+0xfb0fbf20>
8111d22c:	d8800c17 	ldw	r2,48(sp)
8111d230:	d8800615 	stw	r2,24(sp)
8111d234:	003e6906 	br	8111cbdc <__reset+0xfb0fcbdc>

8111d238 <__sflush_r>:
8111d238:	defffb04 	addi	sp,sp,-20
8111d23c:	de00012e 	bgeu	sp,et,8111d244 <__sflush_r+0xc>
8111d240:	003b68fa 	trap	3
8111d244:	2880030b 	ldhu	r2,12(r5)
8111d248:	dcc00315 	stw	r19,12(sp)
8111d24c:	dc400115 	stw	r17,4(sp)
8111d250:	dfc00415 	stw	ra,16(sp)
8111d254:	dc800215 	stw	r18,8(sp)
8111d258:	dc000015 	stw	r16,0(sp)
8111d25c:	10c0020c 	andi	r3,r2,8
8111d260:	2823883a 	mov	r17,r5
8111d264:	2027883a 	mov	r19,r4
8111d268:	1800311e 	bne	r3,zero,8111d330 <__sflush_r+0xf8>
8111d26c:	28c00117 	ldw	r3,4(r5)
8111d270:	10820014 	ori	r2,r2,2048
8111d274:	2880030d 	sth	r2,12(r5)
8111d278:	00c04b0e 	bge	zero,r3,8111d3a8 <__sflush_r+0x170>
8111d27c:	8a000a17 	ldw	r8,40(r17)
8111d280:	40002326 	beq	r8,zero,8111d310 <__sflush_r+0xd8>
8111d284:	9c000017 	ldw	r16,0(r19)
8111d288:	10c4000c 	andi	r3,r2,4096
8111d28c:	98000015 	stw	zero,0(r19)
8111d290:	18004826 	beq	r3,zero,8111d3b4 <__sflush_r+0x17c>
8111d294:	89801417 	ldw	r6,80(r17)
8111d298:	10c0010c 	andi	r3,r2,4
8111d29c:	18000626 	beq	r3,zero,8111d2b8 <__sflush_r+0x80>
8111d2a0:	88c00117 	ldw	r3,4(r17)
8111d2a4:	88800c17 	ldw	r2,48(r17)
8111d2a8:	30cdc83a 	sub	r6,r6,r3
8111d2ac:	10000226 	beq	r2,zero,8111d2b8 <__sflush_r+0x80>
8111d2b0:	88800f17 	ldw	r2,60(r17)
8111d2b4:	308dc83a 	sub	r6,r6,r2
8111d2b8:	89400717 	ldw	r5,28(r17)
8111d2bc:	000f883a 	mov	r7,zero
8111d2c0:	9809883a 	mov	r4,r19
8111d2c4:	403ee83a 	callr	r8
8111d2c8:	00ffffc4 	movi	r3,-1
8111d2cc:	10c04426 	beq	r2,r3,8111d3e0 <__sflush_r+0x1a8>
8111d2d0:	88c0030b 	ldhu	r3,12(r17)
8111d2d4:	89000417 	ldw	r4,16(r17)
8111d2d8:	88000115 	stw	zero,4(r17)
8111d2dc:	197dffcc 	andi	r5,r3,63487
8111d2e0:	8940030d 	sth	r5,12(r17)
8111d2e4:	89000015 	stw	r4,0(r17)
8111d2e8:	18c4000c 	andi	r3,r3,4096
8111d2ec:	18002c1e 	bne	r3,zero,8111d3a0 <__sflush_r+0x168>
8111d2f0:	89400c17 	ldw	r5,48(r17)
8111d2f4:	9c000015 	stw	r16,0(r19)
8111d2f8:	28000526 	beq	r5,zero,8111d310 <__sflush_r+0xd8>
8111d2fc:	88801004 	addi	r2,r17,64
8111d300:	28800226 	beq	r5,r2,8111d30c <__sflush_r+0xd4>
8111d304:	9809883a 	mov	r4,r19
8111d308:	111dcf00 	call	8111dcf0 <_free_r>
8111d30c:	88000c15 	stw	zero,48(r17)
8111d310:	0005883a 	mov	r2,zero
8111d314:	dfc00417 	ldw	ra,16(sp)
8111d318:	dcc00317 	ldw	r19,12(sp)
8111d31c:	dc800217 	ldw	r18,8(sp)
8111d320:	dc400117 	ldw	r17,4(sp)
8111d324:	dc000017 	ldw	r16,0(sp)
8111d328:	dec00504 	addi	sp,sp,20
8111d32c:	f800283a 	ret
8111d330:	2c800417 	ldw	r18,16(r5)
8111d334:	903ff626 	beq	r18,zero,8111d310 <__reset+0xfb0fd310>
8111d338:	2c000017 	ldw	r16,0(r5)
8111d33c:	108000cc 	andi	r2,r2,3
8111d340:	2c800015 	stw	r18,0(r5)
8111d344:	84a1c83a 	sub	r16,r16,r18
8111d348:	1000131e 	bne	r2,zero,8111d398 <__sflush_r+0x160>
8111d34c:	28800517 	ldw	r2,20(r5)
8111d350:	88800215 	stw	r2,8(r17)
8111d354:	04000316 	blt	zero,r16,8111d364 <__sflush_r+0x12c>
8111d358:	003fed06 	br	8111d310 <__reset+0xfb0fd310>
8111d35c:	90a5883a 	add	r18,r18,r2
8111d360:	043feb0e 	bge	zero,r16,8111d310 <__reset+0xfb0fd310>
8111d364:	88800917 	ldw	r2,36(r17)
8111d368:	89400717 	ldw	r5,28(r17)
8111d36c:	800f883a 	mov	r7,r16
8111d370:	900d883a 	mov	r6,r18
8111d374:	9809883a 	mov	r4,r19
8111d378:	103ee83a 	callr	r2
8111d37c:	80a1c83a 	sub	r16,r16,r2
8111d380:	00bff616 	blt	zero,r2,8111d35c <__reset+0xfb0fd35c>
8111d384:	88c0030b 	ldhu	r3,12(r17)
8111d388:	00bfffc4 	movi	r2,-1
8111d38c:	18c01014 	ori	r3,r3,64
8111d390:	88c0030d 	sth	r3,12(r17)
8111d394:	003fdf06 	br	8111d314 <__reset+0xfb0fd314>
8111d398:	0005883a 	mov	r2,zero
8111d39c:	003fec06 	br	8111d350 <__reset+0xfb0fd350>
8111d3a0:	88801415 	stw	r2,80(r17)
8111d3a4:	003fd206 	br	8111d2f0 <__reset+0xfb0fd2f0>
8111d3a8:	28c00f17 	ldw	r3,60(r5)
8111d3ac:	00ffb316 	blt	zero,r3,8111d27c <__reset+0xfb0fd27c>
8111d3b0:	003fd706 	br	8111d310 <__reset+0xfb0fd310>
8111d3b4:	89400717 	ldw	r5,28(r17)
8111d3b8:	000d883a 	mov	r6,zero
8111d3bc:	01c00044 	movi	r7,1
8111d3c0:	9809883a 	mov	r4,r19
8111d3c4:	403ee83a 	callr	r8
8111d3c8:	100d883a 	mov	r6,r2
8111d3cc:	00bfffc4 	movi	r2,-1
8111d3d0:	30801426 	beq	r6,r2,8111d424 <__sflush_r+0x1ec>
8111d3d4:	8880030b 	ldhu	r2,12(r17)
8111d3d8:	8a000a17 	ldw	r8,40(r17)
8111d3dc:	003fae06 	br	8111d298 <__reset+0xfb0fd298>
8111d3e0:	98c00017 	ldw	r3,0(r19)
8111d3e4:	183fba26 	beq	r3,zero,8111d2d0 <__reset+0xfb0fd2d0>
8111d3e8:	01000744 	movi	r4,29
8111d3ec:	19000626 	beq	r3,r4,8111d408 <__sflush_r+0x1d0>
8111d3f0:	01000584 	movi	r4,22
8111d3f4:	19000426 	beq	r3,r4,8111d408 <__sflush_r+0x1d0>
8111d3f8:	88c0030b 	ldhu	r3,12(r17)
8111d3fc:	18c01014 	ori	r3,r3,64
8111d400:	88c0030d 	sth	r3,12(r17)
8111d404:	003fc306 	br	8111d314 <__reset+0xfb0fd314>
8111d408:	8880030b 	ldhu	r2,12(r17)
8111d40c:	88c00417 	ldw	r3,16(r17)
8111d410:	88000115 	stw	zero,4(r17)
8111d414:	10bdffcc 	andi	r2,r2,63487
8111d418:	8880030d 	sth	r2,12(r17)
8111d41c:	88c00015 	stw	r3,0(r17)
8111d420:	003fb306 	br	8111d2f0 <__reset+0xfb0fd2f0>
8111d424:	98800017 	ldw	r2,0(r19)
8111d428:	103fea26 	beq	r2,zero,8111d3d4 <__reset+0xfb0fd3d4>
8111d42c:	00c00744 	movi	r3,29
8111d430:	10c00226 	beq	r2,r3,8111d43c <__sflush_r+0x204>
8111d434:	00c00584 	movi	r3,22
8111d438:	10c0031e 	bne	r2,r3,8111d448 <__sflush_r+0x210>
8111d43c:	9c000015 	stw	r16,0(r19)
8111d440:	0005883a 	mov	r2,zero
8111d444:	003fb306 	br	8111d314 <__reset+0xfb0fd314>
8111d448:	88c0030b 	ldhu	r3,12(r17)
8111d44c:	3005883a 	mov	r2,r6
8111d450:	18c01014 	ori	r3,r3,64
8111d454:	88c0030d 	sth	r3,12(r17)
8111d458:	003fae06 	br	8111d314 <__reset+0xfb0fd314>

8111d45c <_fflush_r>:
8111d45c:	defffd04 	addi	sp,sp,-12
8111d460:	de00012e 	bgeu	sp,et,8111d468 <_fflush_r+0xc>
8111d464:	003b68fa 	trap	3
8111d468:	dc000115 	stw	r16,4(sp)
8111d46c:	dfc00215 	stw	ra,8(sp)
8111d470:	2021883a 	mov	r16,r4
8111d474:	20000226 	beq	r4,zero,8111d480 <_fflush_r+0x24>
8111d478:	20800e17 	ldw	r2,56(r4)
8111d47c:	10000c26 	beq	r2,zero,8111d4b0 <_fflush_r+0x54>
8111d480:	2880030f 	ldh	r2,12(r5)
8111d484:	1000051e 	bne	r2,zero,8111d49c <_fflush_r+0x40>
8111d488:	0005883a 	mov	r2,zero
8111d48c:	dfc00217 	ldw	ra,8(sp)
8111d490:	dc000117 	ldw	r16,4(sp)
8111d494:	dec00304 	addi	sp,sp,12
8111d498:	f800283a 	ret
8111d49c:	8009883a 	mov	r4,r16
8111d4a0:	dfc00217 	ldw	ra,8(sp)
8111d4a4:	dc000117 	ldw	r16,4(sp)
8111d4a8:	dec00304 	addi	sp,sp,12
8111d4ac:	111d2381 	jmpi	8111d238 <__sflush_r>
8111d4b0:	d9400015 	stw	r5,0(sp)
8111d4b4:	111d8580 	call	8111d858 <__sinit>
8111d4b8:	d9400017 	ldw	r5,0(sp)
8111d4bc:	003ff006 	br	8111d480 <__reset+0xfb0fd480>

8111d4c0 <fflush>:
8111d4c0:	20000526 	beq	r4,zero,8111d4d8 <fflush+0x18>
8111d4c4:	00a04534 	movhi	r2,33044
8111d4c8:	10928704 	addi	r2,r2,18972
8111d4cc:	200b883a 	mov	r5,r4
8111d4d0:	11000017 	ldw	r4,0(r2)
8111d4d4:	111d45c1 	jmpi	8111d45c <_fflush_r>
8111d4d8:	00a04534 	movhi	r2,33044
8111d4dc:	10928604 	addi	r2,r2,18968
8111d4e0:	11000017 	ldw	r4,0(r2)
8111d4e4:	016044b4 	movhi	r5,33042
8111d4e8:	29751704 	addi	r5,r5,-11172
8111d4ec:	111e5981 	jmpi	8111e598 <_fwalk_reent>

8111d4f0 <__fp_unlock>:
8111d4f0:	0005883a 	mov	r2,zero
8111d4f4:	f800283a 	ret

8111d4f8 <_cleanup_r>:
8111d4f8:	016044b4 	movhi	r5,33042
8111d4fc:	2954ad04 	addi	r5,r5,21172
8111d500:	111e5981 	jmpi	8111e598 <_fwalk_reent>

8111d504 <__sinit.part.1>:
8111d504:	defff704 	addi	sp,sp,-36
8111d508:	00e044b4 	movhi	r3,33042
8111d50c:	de00012e 	bgeu	sp,et,8111d514 <__sinit.part.1+0x10>
8111d510:	003b68fa 	trap	3
8111d514:	18f53e04 	addi	r3,r3,-11016
8111d518:	dfc00815 	stw	ra,32(sp)
8111d51c:	ddc00715 	stw	r23,28(sp)
8111d520:	dd800615 	stw	r22,24(sp)
8111d524:	dd400515 	stw	r21,20(sp)
8111d528:	dd000415 	stw	r20,16(sp)
8111d52c:	dcc00315 	stw	r19,12(sp)
8111d530:	dc800215 	stw	r18,8(sp)
8111d534:	dc400115 	stw	r17,4(sp)
8111d538:	dc000015 	stw	r16,0(sp)
8111d53c:	24000117 	ldw	r16,4(r4)
8111d540:	20c00f15 	stw	r3,60(r4)
8111d544:	2080bb04 	addi	r2,r4,748
8111d548:	00c000c4 	movi	r3,3
8111d54c:	20c0b915 	stw	r3,740(r4)
8111d550:	2080ba15 	stw	r2,744(r4)
8111d554:	2000b815 	stw	zero,736(r4)
8111d558:	05c00204 	movi	r23,8
8111d55c:	00800104 	movi	r2,4
8111d560:	2025883a 	mov	r18,r4
8111d564:	b80d883a 	mov	r6,r23
8111d568:	81001704 	addi	r4,r16,92
8111d56c:	000b883a 	mov	r5,zero
8111d570:	80000015 	stw	zero,0(r16)
8111d574:	80000115 	stw	zero,4(r16)
8111d578:	80000215 	stw	zero,8(r16)
8111d57c:	8080030d 	sth	r2,12(r16)
8111d580:	80001915 	stw	zero,100(r16)
8111d584:	8000038d 	sth	zero,14(r16)
8111d588:	80000415 	stw	zero,16(r16)
8111d58c:	80000515 	stw	zero,20(r16)
8111d590:	80000615 	stw	zero,24(r16)
8111d594:	1114bc00 	call	81114bc0 <memset>
8111d598:	05a04474 	movhi	r22,33041
8111d59c:	94400217 	ldw	r17,8(r18)
8111d5a0:	05604474 	movhi	r21,33041
8111d5a4:	05204474 	movhi	r20,33041
8111d5a8:	04e04474 	movhi	r19,33041
8111d5ac:	b594f904 	addi	r22,r22,21476
8111d5b0:	ad551204 	addi	r21,r21,21576
8111d5b4:	a5153304 	addi	r20,r20,21708
8111d5b8:	9cd54c04 	addi	r19,r19,21808
8111d5bc:	85800815 	stw	r22,32(r16)
8111d5c0:	85400915 	stw	r21,36(r16)
8111d5c4:	85000a15 	stw	r20,40(r16)
8111d5c8:	84c00b15 	stw	r19,44(r16)
8111d5cc:	84000715 	stw	r16,28(r16)
8111d5d0:	00800284 	movi	r2,10
8111d5d4:	8880030d 	sth	r2,12(r17)
8111d5d8:	00800044 	movi	r2,1
8111d5dc:	b80d883a 	mov	r6,r23
8111d5e0:	89001704 	addi	r4,r17,92
8111d5e4:	000b883a 	mov	r5,zero
8111d5e8:	88000015 	stw	zero,0(r17)
8111d5ec:	88000115 	stw	zero,4(r17)
8111d5f0:	88000215 	stw	zero,8(r17)
8111d5f4:	88001915 	stw	zero,100(r17)
8111d5f8:	8880038d 	sth	r2,14(r17)
8111d5fc:	88000415 	stw	zero,16(r17)
8111d600:	88000515 	stw	zero,20(r17)
8111d604:	88000615 	stw	zero,24(r17)
8111d608:	1114bc00 	call	81114bc0 <memset>
8111d60c:	94000317 	ldw	r16,12(r18)
8111d610:	00800484 	movi	r2,18
8111d614:	8c400715 	stw	r17,28(r17)
8111d618:	8d800815 	stw	r22,32(r17)
8111d61c:	8d400915 	stw	r21,36(r17)
8111d620:	8d000a15 	stw	r20,40(r17)
8111d624:	8cc00b15 	stw	r19,44(r17)
8111d628:	8080030d 	sth	r2,12(r16)
8111d62c:	00800084 	movi	r2,2
8111d630:	80000015 	stw	zero,0(r16)
8111d634:	80000115 	stw	zero,4(r16)
8111d638:	80000215 	stw	zero,8(r16)
8111d63c:	80001915 	stw	zero,100(r16)
8111d640:	8080038d 	sth	r2,14(r16)
8111d644:	80000415 	stw	zero,16(r16)
8111d648:	80000515 	stw	zero,20(r16)
8111d64c:	80000615 	stw	zero,24(r16)
8111d650:	b80d883a 	mov	r6,r23
8111d654:	000b883a 	mov	r5,zero
8111d658:	81001704 	addi	r4,r16,92
8111d65c:	1114bc00 	call	81114bc0 <memset>
8111d660:	00800044 	movi	r2,1
8111d664:	84000715 	stw	r16,28(r16)
8111d668:	85800815 	stw	r22,32(r16)
8111d66c:	85400915 	stw	r21,36(r16)
8111d670:	85000a15 	stw	r20,40(r16)
8111d674:	84c00b15 	stw	r19,44(r16)
8111d678:	90800e15 	stw	r2,56(r18)
8111d67c:	dfc00817 	ldw	ra,32(sp)
8111d680:	ddc00717 	ldw	r23,28(sp)
8111d684:	dd800617 	ldw	r22,24(sp)
8111d688:	dd400517 	ldw	r21,20(sp)
8111d68c:	dd000417 	ldw	r20,16(sp)
8111d690:	dcc00317 	ldw	r19,12(sp)
8111d694:	dc800217 	ldw	r18,8(sp)
8111d698:	dc400117 	ldw	r17,4(sp)
8111d69c:	dc000017 	ldw	r16,0(sp)
8111d6a0:	dec00904 	addi	sp,sp,36
8111d6a4:	f800283a 	ret

8111d6a8 <__fp_lock>:
8111d6a8:	0005883a 	mov	r2,zero
8111d6ac:	f800283a 	ret

8111d6b0 <__sfmoreglue>:
8111d6b0:	defffc04 	addi	sp,sp,-16
8111d6b4:	de00012e 	bgeu	sp,et,8111d6bc <__sfmoreglue+0xc>
8111d6b8:	003b68fa 	trap	3
8111d6bc:	dc400115 	stw	r17,4(sp)
8111d6c0:	2c7fffc4 	addi	r17,r5,-1
8111d6c4:	8c401a24 	muli	r17,r17,104
8111d6c8:	dc800215 	stw	r18,8(sp)
8111d6cc:	2825883a 	mov	r18,r5
8111d6d0:	89401d04 	addi	r5,r17,116
8111d6d4:	dc000015 	stw	r16,0(sp)
8111d6d8:	dfc00315 	stw	ra,12(sp)
8111d6dc:	111425c0 	call	8111425c <_malloc_r>
8111d6e0:	1021883a 	mov	r16,r2
8111d6e4:	10000726 	beq	r2,zero,8111d704 <__sfmoreglue+0x54>
8111d6e8:	11000304 	addi	r4,r2,12
8111d6ec:	10000015 	stw	zero,0(r2)
8111d6f0:	14800115 	stw	r18,4(r2)
8111d6f4:	11000215 	stw	r4,8(r2)
8111d6f8:	89801a04 	addi	r6,r17,104
8111d6fc:	000b883a 	mov	r5,zero
8111d700:	1114bc00 	call	81114bc0 <memset>
8111d704:	8005883a 	mov	r2,r16
8111d708:	dfc00317 	ldw	ra,12(sp)
8111d70c:	dc800217 	ldw	r18,8(sp)
8111d710:	dc400117 	ldw	r17,4(sp)
8111d714:	dc000017 	ldw	r16,0(sp)
8111d718:	dec00404 	addi	sp,sp,16
8111d71c:	f800283a 	ret

8111d720 <__sfp>:
8111d720:	defffb04 	addi	sp,sp,-20
8111d724:	de00012e 	bgeu	sp,et,8111d72c <__sfp+0xc>
8111d728:	003b68fa 	trap	3
8111d72c:	dc000015 	stw	r16,0(sp)
8111d730:	04204534 	movhi	r16,33044
8111d734:	84128604 	addi	r16,r16,18968
8111d738:	dcc00315 	stw	r19,12(sp)
8111d73c:	2027883a 	mov	r19,r4
8111d740:	81000017 	ldw	r4,0(r16)
8111d744:	dfc00415 	stw	ra,16(sp)
8111d748:	dc800215 	stw	r18,8(sp)
8111d74c:	20800e17 	ldw	r2,56(r4)
8111d750:	dc400115 	stw	r17,4(sp)
8111d754:	1000021e 	bne	r2,zero,8111d760 <__sfp+0x40>
8111d758:	111d5040 	call	8111d504 <__sinit.part.1>
8111d75c:	81000017 	ldw	r4,0(r16)
8111d760:	2480b804 	addi	r18,r4,736
8111d764:	047fffc4 	movi	r17,-1
8111d768:	91000117 	ldw	r4,4(r18)
8111d76c:	94000217 	ldw	r16,8(r18)
8111d770:	213fffc4 	addi	r4,r4,-1
8111d774:	20000a16 	blt	r4,zero,8111d7a0 <__sfp+0x80>
8111d778:	8080030f 	ldh	r2,12(r16)
8111d77c:	10000c26 	beq	r2,zero,8111d7b0 <__sfp+0x90>
8111d780:	80c01d04 	addi	r3,r16,116
8111d784:	00000206 	br	8111d790 <__sfp+0x70>
8111d788:	18bfe60f 	ldh	r2,-104(r3)
8111d78c:	10000826 	beq	r2,zero,8111d7b0 <__sfp+0x90>
8111d790:	213fffc4 	addi	r4,r4,-1
8111d794:	1c3ffd04 	addi	r16,r3,-12
8111d798:	18c01a04 	addi	r3,r3,104
8111d79c:	247ffa1e 	bne	r4,r17,8111d788 <__reset+0xfb0fd788>
8111d7a0:	90800017 	ldw	r2,0(r18)
8111d7a4:	10001d26 	beq	r2,zero,8111d81c <__sfp+0xfc>
8111d7a8:	1025883a 	mov	r18,r2
8111d7ac:	003fee06 	br	8111d768 <__reset+0xfb0fd768>
8111d7b0:	00bfffc4 	movi	r2,-1
8111d7b4:	8080038d 	sth	r2,14(r16)
8111d7b8:	00800044 	movi	r2,1
8111d7bc:	8080030d 	sth	r2,12(r16)
8111d7c0:	80001915 	stw	zero,100(r16)
8111d7c4:	80000015 	stw	zero,0(r16)
8111d7c8:	80000215 	stw	zero,8(r16)
8111d7cc:	80000115 	stw	zero,4(r16)
8111d7d0:	80000415 	stw	zero,16(r16)
8111d7d4:	80000515 	stw	zero,20(r16)
8111d7d8:	80000615 	stw	zero,24(r16)
8111d7dc:	01800204 	movi	r6,8
8111d7e0:	000b883a 	mov	r5,zero
8111d7e4:	81001704 	addi	r4,r16,92
8111d7e8:	1114bc00 	call	81114bc0 <memset>
8111d7ec:	8005883a 	mov	r2,r16
8111d7f0:	80000c15 	stw	zero,48(r16)
8111d7f4:	80000d15 	stw	zero,52(r16)
8111d7f8:	80001115 	stw	zero,68(r16)
8111d7fc:	80001215 	stw	zero,72(r16)
8111d800:	dfc00417 	ldw	ra,16(sp)
8111d804:	dcc00317 	ldw	r19,12(sp)
8111d808:	dc800217 	ldw	r18,8(sp)
8111d80c:	dc400117 	ldw	r17,4(sp)
8111d810:	dc000017 	ldw	r16,0(sp)
8111d814:	dec00504 	addi	sp,sp,20
8111d818:	f800283a 	ret
8111d81c:	01400104 	movi	r5,4
8111d820:	9809883a 	mov	r4,r19
8111d824:	111d6b00 	call	8111d6b0 <__sfmoreglue>
8111d828:	90800015 	stw	r2,0(r18)
8111d82c:	103fde1e 	bne	r2,zero,8111d7a8 <__reset+0xfb0fd7a8>
8111d830:	00800304 	movi	r2,12
8111d834:	98800015 	stw	r2,0(r19)
8111d838:	0005883a 	mov	r2,zero
8111d83c:	003ff006 	br	8111d800 <__reset+0xfb0fd800>

8111d840 <_cleanup>:
8111d840:	00a04534 	movhi	r2,33044
8111d844:	10928604 	addi	r2,r2,18968
8111d848:	11000017 	ldw	r4,0(r2)
8111d84c:	016044b4 	movhi	r5,33042
8111d850:	2954ad04 	addi	r5,r5,21172
8111d854:	111e5981 	jmpi	8111e598 <_fwalk_reent>

8111d858 <__sinit>:
8111d858:	20800e17 	ldw	r2,56(r4)
8111d85c:	10000126 	beq	r2,zero,8111d864 <__sinit+0xc>
8111d860:	f800283a 	ret
8111d864:	111d5041 	jmpi	8111d504 <__sinit.part.1>

8111d868 <__sfp_lock_acquire>:
8111d868:	f800283a 	ret

8111d86c <__sfp_lock_release>:
8111d86c:	f800283a 	ret

8111d870 <__sinit_lock_acquire>:
8111d870:	f800283a 	ret

8111d874 <__sinit_lock_release>:
8111d874:	f800283a 	ret

8111d878 <__fp_lock_all>:
8111d878:	00a04534 	movhi	r2,33044
8111d87c:	10928704 	addi	r2,r2,18972
8111d880:	11000017 	ldw	r4,0(r2)
8111d884:	016044b4 	movhi	r5,33042
8111d888:	2975aa04 	addi	r5,r5,-10584
8111d88c:	111e4cc1 	jmpi	8111e4cc <_fwalk>

8111d890 <__fp_unlock_all>:
8111d890:	00a04534 	movhi	r2,33044
8111d894:	10928704 	addi	r2,r2,18972
8111d898:	11000017 	ldw	r4,0(r2)
8111d89c:	016044b4 	movhi	r5,33042
8111d8a0:	29753c04 	addi	r5,r5,-11024
8111d8a4:	111e4cc1 	jmpi	8111e4cc <_fwalk>

8111d8a8 <__sflags>:
8111d8a8:	28800007 	ldb	r2,0(r5)
8111d8ac:	00c01c84 	movi	r3,114
8111d8b0:	10c02426 	beq	r2,r3,8111d944 <__sflags+0x9c>
8111d8b4:	00c01dc4 	movi	r3,119
8111d8b8:	10c01e26 	beq	r2,r3,8111d934 <__sflags+0x8c>
8111d8bc:	00c01844 	movi	r3,97
8111d8c0:	10c00426 	beq	r2,r3,8111d8d4 <__sflags+0x2c>
8111d8c4:	00800584 	movi	r2,22
8111d8c8:	20800015 	stw	r2,0(r4)
8111d8cc:	0005883a 	mov	r2,zero
8111d8d0:	f800283a 	ret
8111d8d4:	02c08204 	movi	r11,520
8111d8d8:	01000044 	movi	r4,1
8111d8dc:	00804204 	movi	r2,264
8111d8e0:	01c00ac4 	movi	r7,43
8111d8e4:	02bff8c4 	movi	r10,-29
8111d8e8:	027fff04 	movi	r9,-4
8111d8ec:	02001e04 	movi	r8,120
8111d8f0:	29400044 	addi	r5,r5,1
8111d8f4:	28c00007 	ldb	r3,0(r5)
8111d8f8:	18000626 	beq	r3,zero,8111d914 <__sflags+0x6c>
8111d8fc:	19c00826 	beq	r3,r7,8111d920 <__sflags+0x78>
8111d900:	1a3ffb1e 	bne	r3,r8,8111d8f0 <__reset+0xfb0fd8f0>
8111d904:	29400044 	addi	r5,r5,1
8111d908:	28c00007 	ldb	r3,0(r5)
8111d90c:	21020014 	ori	r4,r4,2048
8111d910:	183ffa1e 	bne	r3,zero,8111d8fc <__reset+0xfb0fd8fc>
8111d914:	22c8b03a 	or	r4,r4,r11
8111d918:	31000015 	stw	r4,0(r6)
8111d91c:	f800283a 	ret
8111d920:	1284703a 	and	r2,r2,r10
8111d924:	2248703a 	and	r4,r4,r9
8111d928:	10800414 	ori	r2,r2,16
8111d92c:	21000094 	ori	r4,r4,2
8111d930:	003fef06 	br	8111d8f0 <__reset+0xfb0fd8f0>
8111d934:	02c18004 	movi	r11,1536
8111d938:	01000044 	movi	r4,1
8111d93c:	00800204 	movi	r2,8
8111d940:	003fe706 	br	8111d8e0 <__reset+0xfb0fd8e0>
8111d944:	0017883a 	mov	r11,zero
8111d948:	0009883a 	mov	r4,zero
8111d94c:	00800104 	movi	r2,4
8111d950:	003fe306 	br	8111d8e0 <__reset+0xfb0fd8e0>

8111d954 <_fread_r>:
8111d954:	defff404 	addi	sp,sp,-48
8111d958:	de00012e 	bgeu	sp,et,8111d960 <_fread_r+0xc>
8111d95c:	003b68fa 	trap	3
8111d960:	dd800815 	stw	r22,32(sp)
8111d964:	39ad383a 	mul	r22,r7,r6
8111d968:	dc000215 	stw	r16,8(sp)
8111d96c:	dfc00b15 	stw	ra,44(sp)
8111d970:	df000a15 	stw	fp,40(sp)
8111d974:	ddc00915 	stw	r23,36(sp)
8111d978:	dd400715 	stw	r21,28(sp)
8111d97c:	dd000615 	stw	r20,24(sp)
8111d980:	dcc00515 	stw	r19,20(sp)
8111d984:	dc800415 	stw	r18,16(sp)
8111d988:	dc400315 	stw	r17,12(sp)
8111d98c:	dc000c17 	ldw	r16,48(sp)
8111d990:	b0003b26 	beq	r22,zero,8111da80 <_fread_r+0x12c>
8111d994:	302f883a 	mov	r23,r6
8111d998:	382b883a 	mov	r21,r7
8111d99c:	2029883a 	mov	r20,r4
8111d9a0:	2827883a 	mov	r19,r5
8111d9a4:	20000226 	beq	r4,zero,8111d9b0 <_fread_r+0x5c>
8111d9a8:	20800e17 	ldw	r2,56(r4)
8111d9ac:	10006e26 	beq	r2,zero,8111db68 <_fread_r+0x214>
8111d9b0:	8080030b 	ldhu	r2,12(r16)
8111d9b4:	10c8000c 	andi	r3,r2,8192
8111d9b8:	1800061e 	bne	r3,zero,8111d9d4 <_fread_r+0x80>
8111d9bc:	81001917 	ldw	r4,100(r16)
8111d9c0:	00f7ffc4 	movi	r3,-8193
8111d9c4:	10880014 	ori	r2,r2,8192
8111d9c8:	20c6703a 	and	r3,r4,r3
8111d9cc:	8080030d 	sth	r2,12(r16)
8111d9d0:	80c01915 	stw	r3,100(r16)
8111d9d4:	84400117 	ldw	r17,4(r16)
8111d9d8:	88005f16 	blt	r17,zero,8111db58 <_fread_r+0x204>
8111d9dc:	8809883a 	mov	r4,r17
8111d9e0:	1080008c 	andi	r2,r2,2
8111d9e4:	1000281e 	bne	r2,zero,8111da88 <_fread_r+0x134>
8111d9e8:	b025883a 	mov	r18,r22
8111d9ec:	00000b06 	br	8111da1c <_fread_r+0xc8>
8111d9f0:	1114a700 	call	81114a70 <memcpy>
8111d9f4:	80800017 	ldw	r2,0(r16)
8111d9f8:	9c67883a 	add	r19,r19,r17
8111d9fc:	9465c83a 	sub	r18,r18,r17
8111da00:	1463883a 	add	r17,r2,r17
8111da04:	800b883a 	mov	r5,r16
8111da08:	a009883a 	mov	r4,r20
8111da0c:	84400015 	stw	r17,0(r16)
8111da10:	111505c0 	call	8111505c <__srefill_r>
8111da14:	10004c1e 	bne	r2,zero,8111db48 <_fread_r+0x1f4>
8111da18:	84400117 	ldw	r17,4(r16)
8111da1c:	880d883a 	mov	r6,r17
8111da20:	9809883a 	mov	r4,r19
8111da24:	81400017 	ldw	r5,0(r16)
8111da28:	8cbff136 	bltu	r17,r18,8111d9f0 <__reset+0xfb0fd9f0>
8111da2c:	900d883a 	mov	r6,r18
8111da30:	1114a700 	call	81114a70 <memcpy>
8111da34:	80c00117 	ldw	r3,4(r16)
8111da38:	81000017 	ldw	r4,0(r16)
8111da3c:	a805883a 	mov	r2,r21
8111da40:	1c87c83a 	sub	r3,r3,r18
8111da44:	24a5883a 	add	r18,r4,r18
8111da48:	80c00115 	stw	r3,4(r16)
8111da4c:	84800015 	stw	r18,0(r16)
8111da50:	dfc00b17 	ldw	ra,44(sp)
8111da54:	df000a17 	ldw	fp,40(sp)
8111da58:	ddc00917 	ldw	r23,36(sp)
8111da5c:	dd800817 	ldw	r22,32(sp)
8111da60:	dd400717 	ldw	r21,28(sp)
8111da64:	dd000617 	ldw	r20,24(sp)
8111da68:	dcc00517 	ldw	r19,20(sp)
8111da6c:	dc800417 	ldw	r18,16(sp)
8111da70:	dc400317 	ldw	r17,12(sp)
8111da74:	dc000217 	ldw	r16,8(sp)
8111da78:	dec00c04 	addi	sp,sp,48
8111da7c:	f800283a 	ret
8111da80:	0005883a 	mov	r2,zero
8111da84:	003ff206 	br	8111da50 <__reset+0xfb0fda50>
8111da88:	b007883a 	mov	r3,r22
8111da8c:	2580012e 	bgeu	r4,r22,8111da94 <_fread_r+0x140>
8111da90:	2007883a 	mov	r3,r4
8111da94:	81400017 	ldw	r5,0(r16)
8111da98:	180d883a 	mov	r6,r3
8111da9c:	9809883a 	mov	r4,r19
8111daa0:	d8c00115 	stw	r3,4(sp)
8111daa4:	1114a700 	call	81114a70 <memcpy>
8111daa8:	d8c00117 	ldw	r3,4(sp)
8111daac:	84400017 	ldw	r17,0(r16)
8111dab0:	80800117 	ldw	r2,4(r16)
8111dab4:	81400c17 	ldw	r5,48(r16)
8111dab8:	88e3883a 	add	r17,r17,r3
8111dabc:	10c5c83a 	sub	r2,r2,r3
8111dac0:	84400015 	stw	r17,0(r16)
8111dac4:	80800115 	stw	r2,4(r16)
8111dac8:	b0e5c83a 	sub	r18,r22,r3
8111dacc:	28002b26 	beq	r5,zero,8111db7c <_fread_r+0x228>
8111dad0:	90002b26 	beq	r18,zero,8111db80 <_fread_r+0x22c>
8111dad4:	80801004 	addi	r2,r16,64
8111dad8:	28800526 	beq	r5,r2,8111daf0 <_fread_r+0x19c>
8111dadc:	a009883a 	mov	r4,r20
8111dae0:	d8c00115 	stw	r3,4(sp)
8111dae4:	111dcf00 	call	8111dcf0 <_free_r>
8111dae8:	d8c00117 	ldw	r3,4(sp)
8111daec:	84400017 	ldw	r17,0(r16)
8111daf0:	80000c15 	stw	zero,48(r16)
8111daf4:	80800517 	ldw	r2,20(r16)
8111daf8:	87000417 	ldw	fp,16(r16)
8111dafc:	98e7883a 	add	r19,r19,r3
8111db00:	d8800015 	stw	r2,0(sp)
8111db04:	00000106 	br	8111db0c <_fread_r+0x1b8>
8111db08:	90001d26 	beq	r18,zero,8111db80 <_fread_r+0x22c>
8111db0c:	84c00415 	stw	r19,16(r16)
8111db10:	84800515 	stw	r18,20(r16)
8111db14:	84c00015 	stw	r19,0(r16)
8111db18:	a009883a 	mov	r4,r20
8111db1c:	800b883a 	mov	r5,r16
8111db20:	111505c0 	call	8111505c <__srefill_r>
8111db24:	d9000017 	ldw	r4,0(sp)
8111db28:	80c00117 	ldw	r3,4(r16)
8111db2c:	87000415 	stw	fp,16(r16)
8111db30:	81000515 	stw	r4,20(r16)
8111db34:	84400015 	stw	r17,0(r16)
8111db38:	80000115 	stw	zero,4(r16)
8111db3c:	90e5c83a 	sub	r18,r18,r3
8111db40:	98e7883a 	add	r19,r19,r3
8111db44:	103ff026 	beq	r2,zero,8111db08 <__reset+0xfb0fdb08>
8111db48:	b80b883a 	mov	r5,r23
8111db4c:	b489c83a 	sub	r4,r22,r18
8111db50:	11270780 	call	81127078 <__udivsi3>
8111db54:	003fbe06 	br	8111da50 <__reset+0xfb0fda50>
8111db58:	80000115 	stw	zero,4(r16)
8111db5c:	0009883a 	mov	r4,zero
8111db60:	0023883a 	mov	r17,zero
8111db64:	003f9e06 	br	8111d9e0 <__reset+0xfb0fd9e0>
8111db68:	111d8580 	call	8111d858 <__sinit>
8111db6c:	8080030b 	ldhu	r2,12(r16)
8111db70:	10c8000c 	andi	r3,r2,8192
8111db74:	183f971e 	bne	r3,zero,8111d9d4 <__reset+0xfb0fd9d4>
8111db78:	003f9006 	br	8111d9bc <__reset+0xfb0fd9bc>
8111db7c:	903fdd1e 	bne	r18,zero,8111daf4 <__reset+0xfb0fdaf4>
8111db80:	a805883a 	mov	r2,r21
8111db84:	003fb206 	br	8111da50 <__reset+0xfb0fda50>

8111db88 <fread>:
8111db88:	defffe04 	addi	sp,sp,-8
8111db8c:	00a04534 	movhi	r2,33044
8111db90:	de00012e 	bgeu	sp,et,8111db98 <fread+0x10>
8111db94:	003b68fa 	trap	3
8111db98:	10928704 	addi	r2,r2,18972
8111db9c:	d9c00015 	stw	r7,0(sp)
8111dba0:	300f883a 	mov	r7,r6
8111dba4:	280d883a 	mov	r6,r5
8111dba8:	200b883a 	mov	r5,r4
8111dbac:	11000017 	ldw	r4,0(r2)
8111dbb0:	dfc00115 	stw	ra,4(sp)
8111dbb4:	111d9540 	call	8111d954 <_fread_r>
8111dbb8:	dfc00117 	ldw	ra,4(sp)
8111dbbc:	dec00204 	addi	sp,sp,8
8111dbc0:	f800283a 	ret

8111dbc4 <_malloc_trim_r>:
8111dbc4:	defffb04 	addi	sp,sp,-20
8111dbc8:	de00012e 	bgeu	sp,et,8111dbd0 <_malloc_trim_r+0xc>
8111dbcc:	003b68fa 	trap	3
8111dbd0:	dcc00315 	stw	r19,12(sp)
8111dbd4:	04e04534 	movhi	r19,33044
8111dbd8:	dc800215 	stw	r18,8(sp)
8111dbdc:	dc400115 	stw	r17,4(sp)
8111dbe0:	dc000015 	stw	r16,0(sp)
8111dbe4:	dfc00415 	stw	ra,16(sp)
8111dbe8:	2821883a 	mov	r16,r5
8111dbec:	9ccc4504 	addi	r19,r19,12564
8111dbf0:	2025883a 	mov	r18,r4
8111dbf4:	112b0b80 	call	8112b0b8 <__malloc_lock>
8111dbf8:	98800217 	ldw	r2,8(r19)
8111dbfc:	14400117 	ldw	r17,4(r2)
8111dc00:	00bfff04 	movi	r2,-4
8111dc04:	88a2703a 	and	r17,r17,r2
8111dc08:	8c21c83a 	sub	r16,r17,r16
8111dc0c:	8403fbc4 	addi	r16,r16,4079
8111dc10:	8020d33a 	srli	r16,r16,12
8111dc14:	0083ffc4 	movi	r2,4095
8111dc18:	843fffc4 	addi	r16,r16,-1
8111dc1c:	8020933a 	slli	r16,r16,12
8111dc20:	1400060e 	bge	r2,r16,8111dc3c <_malloc_trim_r+0x78>
8111dc24:	000b883a 	mov	r5,zero
8111dc28:	9009883a 	mov	r4,r18
8111dc2c:	11152380 	call	81115238 <_sbrk_r>
8111dc30:	98c00217 	ldw	r3,8(r19)
8111dc34:	1c47883a 	add	r3,r3,r17
8111dc38:	10c00a26 	beq	r2,r3,8111dc64 <_malloc_trim_r+0xa0>
8111dc3c:	9009883a 	mov	r4,r18
8111dc40:	112b1e00 	call	8112b1e0 <__malloc_unlock>
8111dc44:	0005883a 	mov	r2,zero
8111dc48:	dfc00417 	ldw	ra,16(sp)
8111dc4c:	dcc00317 	ldw	r19,12(sp)
8111dc50:	dc800217 	ldw	r18,8(sp)
8111dc54:	dc400117 	ldw	r17,4(sp)
8111dc58:	dc000017 	ldw	r16,0(sp)
8111dc5c:	dec00504 	addi	sp,sp,20
8111dc60:	f800283a 	ret
8111dc64:	040bc83a 	sub	r5,zero,r16
8111dc68:	9009883a 	mov	r4,r18
8111dc6c:	11152380 	call	81115238 <_sbrk_r>
8111dc70:	00ffffc4 	movi	r3,-1
8111dc74:	10c00d26 	beq	r2,r3,8111dcac <_malloc_trim_r+0xe8>
8111dc78:	00e04534 	movhi	r3,33044
8111dc7c:	18d34a04 	addi	r3,r3,19752
8111dc80:	18800017 	ldw	r2,0(r3)
8111dc84:	99000217 	ldw	r4,8(r19)
8111dc88:	8c23c83a 	sub	r17,r17,r16
8111dc8c:	8c400054 	ori	r17,r17,1
8111dc90:	1421c83a 	sub	r16,r2,r16
8111dc94:	24400115 	stw	r17,4(r4)
8111dc98:	9009883a 	mov	r4,r18
8111dc9c:	1c000015 	stw	r16,0(r3)
8111dca0:	112b1e00 	call	8112b1e0 <__malloc_unlock>
8111dca4:	00800044 	movi	r2,1
8111dca8:	003fe706 	br	8111dc48 <__reset+0xfb0fdc48>
8111dcac:	000b883a 	mov	r5,zero
8111dcb0:	9009883a 	mov	r4,r18
8111dcb4:	11152380 	call	81115238 <_sbrk_r>
8111dcb8:	99000217 	ldw	r4,8(r19)
8111dcbc:	014003c4 	movi	r5,15
8111dcc0:	1107c83a 	sub	r3,r2,r4
8111dcc4:	28ffdd0e 	bge	r5,r3,8111dc3c <__reset+0xfb0fdc3c>
8111dcc8:	01604534 	movhi	r5,33044
8111dccc:	29528804 	addi	r5,r5,18976
8111dcd0:	29400017 	ldw	r5,0(r5)
8111dcd4:	18c00054 	ori	r3,r3,1
8111dcd8:	20c00115 	stw	r3,4(r4)
8111dcdc:	00e04534 	movhi	r3,33044
8111dce0:	1145c83a 	sub	r2,r2,r5
8111dce4:	18d34a04 	addi	r3,r3,19752
8111dce8:	18800015 	stw	r2,0(r3)
8111dcec:	003fd306 	br	8111dc3c <__reset+0xfb0fdc3c>

8111dcf0 <_free_r>:
8111dcf0:	28004326 	beq	r5,zero,8111de00 <_free_r+0x110>
8111dcf4:	defffd04 	addi	sp,sp,-12
8111dcf8:	de00012e 	bgeu	sp,et,8111dd00 <_free_r+0x10>
8111dcfc:	003b68fa 	trap	3
8111dd00:	dc400115 	stw	r17,4(sp)
8111dd04:	dc000015 	stw	r16,0(sp)
8111dd08:	2023883a 	mov	r17,r4
8111dd0c:	2821883a 	mov	r16,r5
8111dd10:	dfc00215 	stw	ra,8(sp)
8111dd14:	112b0b80 	call	8112b0b8 <__malloc_lock>
8111dd18:	81ffff17 	ldw	r7,-4(r16)
8111dd1c:	00bfff84 	movi	r2,-2
8111dd20:	01204534 	movhi	r4,33044
8111dd24:	81bffe04 	addi	r6,r16,-8
8111dd28:	3884703a 	and	r2,r7,r2
8111dd2c:	210c4504 	addi	r4,r4,12564
8111dd30:	308b883a 	add	r5,r6,r2
8111dd34:	2a400117 	ldw	r9,4(r5)
8111dd38:	22000217 	ldw	r8,8(r4)
8111dd3c:	00ffff04 	movi	r3,-4
8111dd40:	48c6703a 	and	r3,r9,r3
8111dd44:	2a005726 	beq	r5,r8,8111dea4 <_free_r+0x1b4>
8111dd48:	28c00115 	stw	r3,4(r5)
8111dd4c:	39c0004c 	andi	r7,r7,1
8111dd50:	3800091e 	bne	r7,zero,8111dd78 <_free_r+0x88>
8111dd54:	823ffe17 	ldw	r8,-8(r16)
8111dd58:	22400204 	addi	r9,r4,8
8111dd5c:	320dc83a 	sub	r6,r6,r8
8111dd60:	31c00217 	ldw	r7,8(r6)
8111dd64:	1205883a 	add	r2,r2,r8
8111dd68:	3a406526 	beq	r7,r9,8111df00 <_free_r+0x210>
8111dd6c:	32000317 	ldw	r8,12(r6)
8111dd70:	3a000315 	stw	r8,12(r7)
8111dd74:	41c00215 	stw	r7,8(r8)
8111dd78:	28cf883a 	add	r7,r5,r3
8111dd7c:	39c00117 	ldw	r7,4(r7)
8111dd80:	39c0004c 	andi	r7,r7,1
8111dd84:	38003a26 	beq	r7,zero,8111de70 <_free_r+0x180>
8111dd88:	10c00054 	ori	r3,r2,1
8111dd8c:	30c00115 	stw	r3,4(r6)
8111dd90:	3087883a 	add	r3,r6,r2
8111dd94:	18800015 	stw	r2,0(r3)
8111dd98:	00c07fc4 	movi	r3,511
8111dd9c:	18801936 	bltu	r3,r2,8111de04 <_free_r+0x114>
8111dda0:	1004d0fa 	srli	r2,r2,3
8111dda4:	01c00044 	movi	r7,1
8111dda8:	21400117 	ldw	r5,4(r4)
8111ddac:	10c00044 	addi	r3,r2,1
8111ddb0:	18c7883a 	add	r3,r3,r3
8111ddb4:	1005d0ba 	srai	r2,r2,2
8111ddb8:	18c7883a 	add	r3,r3,r3
8111ddbc:	18c7883a 	add	r3,r3,r3
8111ddc0:	1907883a 	add	r3,r3,r4
8111ddc4:	3884983a 	sll	r2,r7,r2
8111ddc8:	19c00017 	ldw	r7,0(r3)
8111ddcc:	1a3ffe04 	addi	r8,r3,-8
8111ddd0:	1144b03a 	or	r2,r2,r5
8111ddd4:	32000315 	stw	r8,12(r6)
8111ddd8:	31c00215 	stw	r7,8(r6)
8111dddc:	20800115 	stw	r2,4(r4)
8111dde0:	19800015 	stw	r6,0(r3)
8111dde4:	39800315 	stw	r6,12(r7)
8111dde8:	8809883a 	mov	r4,r17
8111ddec:	dfc00217 	ldw	ra,8(sp)
8111ddf0:	dc400117 	ldw	r17,4(sp)
8111ddf4:	dc000017 	ldw	r16,0(sp)
8111ddf8:	dec00304 	addi	sp,sp,12
8111ddfc:	112b1e01 	jmpi	8112b1e0 <__malloc_unlock>
8111de00:	f800283a 	ret
8111de04:	100ad27a 	srli	r5,r2,9
8111de08:	00c00104 	movi	r3,4
8111de0c:	19404a36 	bltu	r3,r5,8111df38 <_free_r+0x248>
8111de10:	100ad1ba 	srli	r5,r2,6
8111de14:	28c00e44 	addi	r3,r5,57
8111de18:	18c7883a 	add	r3,r3,r3
8111de1c:	29400e04 	addi	r5,r5,56
8111de20:	18c7883a 	add	r3,r3,r3
8111de24:	18c7883a 	add	r3,r3,r3
8111de28:	1909883a 	add	r4,r3,r4
8111de2c:	20c00017 	ldw	r3,0(r4)
8111de30:	01e04534 	movhi	r7,33044
8111de34:	213ffe04 	addi	r4,r4,-8
8111de38:	39cc4504 	addi	r7,r7,12564
8111de3c:	20c04426 	beq	r4,r3,8111df50 <_free_r+0x260>
8111de40:	01ffff04 	movi	r7,-4
8111de44:	19400117 	ldw	r5,4(r3)
8111de48:	29ca703a 	and	r5,r5,r7
8111de4c:	1140022e 	bgeu	r2,r5,8111de58 <_free_r+0x168>
8111de50:	18c00217 	ldw	r3,8(r3)
8111de54:	20fffb1e 	bne	r4,r3,8111de44 <__reset+0xfb0fde44>
8111de58:	19000317 	ldw	r4,12(r3)
8111de5c:	31000315 	stw	r4,12(r6)
8111de60:	30c00215 	stw	r3,8(r6)
8111de64:	21800215 	stw	r6,8(r4)
8111de68:	19800315 	stw	r6,12(r3)
8111de6c:	003fde06 	br	8111dde8 <__reset+0xfb0fdde8>
8111de70:	29c00217 	ldw	r7,8(r5)
8111de74:	10c5883a 	add	r2,r2,r3
8111de78:	00e04534 	movhi	r3,33044
8111de7c:	18cc4704 	addi	r3,r3,12572
8111de80:	38c03b26 	beq	r7,r3,8111df70 <_free_r+0x280>
8111de84:	2a000317 	ldw	r8,12(r5)
8111de88:	11400054 	ori	r5,r2,1
8111de8c:	3087883a 	add	r3,r6,r2
8111de90:	3a000315 	stw	r8,12(r7)
8111de94:	41c00215 	stw	r7,8(r8)
8111de98:	31400115 	stw	r5,4(r6)
8111de9c:	18800015 	stw	r2,0(r3)
8111dea0:	003fbd06 	br	8111dd98 <__reset+0xfb0fdd98>
8111dea4:	39c0004c 	andi	r7,r7,1
8111dea8:	10c5883a 	add	r2,r2,r3
8111deac:	3800071e 	bne	r7,zero,8111decc <_free_r+0x1dc>
8111deb0:	81fffe17 	ldw	r7,-8(r16)
8111deb4:	31cdc83a 	sub	r6,r6,r7
8111deb8:	30c00317 	ldw	r3,12(r6)
8111debc:	31400217 	ldw	r5,8(r6)
8111dec0:	11c5883a 	add	r2,r2,r7
8111dec4:	28c00315 	stw	r3,12(r5)
8111dec8:	19400215 	stw	r5,8(r3)
8111decc:	10c00054 	ori	r3,r2,1
8111ded0:	30c00115 	stw	r3,4(r6)
8111ded4:	00e04534 	movhi	r3,33044
8111ded8:	18d28904 	addi	r3,r3,18980
8111dedc:	18c00017 	ldw	r3,0(r3)
8111dee0:	21800215 	stw	r6,8(r4)
8111dee4:	10ffc036 	bltu	r2,r3,8111dde8 <__reset+0xfb0fdde8>
8111dee8:	00a04534 	movhi	r2,33044
8111deec:	1092e704 	addi	r2,r2,19356
8111def0:	11400017 	ldw	r5,0(r2)
8111def4:	8809883a 	mov	r4,r17
8111def8:	111dbc40 	call	8111dbc4 <_malloc_trim_r>
8111defc:	003fba06 	br	8111dde8 <__reset+0xfb0fdde8>
8111df00:	28c9883a 	add	r4,r5,r3
8111df04:	21000117 	ldw	r4,4(r4)
8111df08:	2100004c 	andi	r4,r4,1
8111df0c:	2000391e 	bne	r4,zero,8111dff4 <_free_r+0x304>
8111df10:	29c00217 	ldw	r7,8(r5)
8111df14:	29000317 	ldw	r4,12(r5)
8111df18:	1885883a 	add	r2,r3,r2
8111df1c:	10c00054 	ori	r3,r2,1
8111df20:	39000315 	stw	r4,12(r7)
8111df24:	21c00215 	stw	r7,8(r4)
8111df28:	30c00115 	stw	r3,4(r6)
8111df2c:	308d883a 	add	r6,r6,r2
8111df30:	30800015 	stw	r2,0(r6)
8111df34:	003fac06 	br	8111dde8 <__reset+0xfb0fdde8>
8111df38:	00c00504 	movi	r3,20
8111df3c:	19401536 	bltu	r3,r5,8111df94 <_free_r+0x2a4>
8111df40:	28c01704 	addi	r3,r5,92
8111df44:	18c7883a 	add	r3,r3,r3
8111df48:	294016c4 	addi	r5,r5,91
8111df4c:	003fb406 	br	8111de20 <__reset+0xfb0fde20>
8111df50:	280bd0ba 	srai	r5,r5,2
8111df54:	00c00044 	movi	r3,1
8111df58:	38800117 	ldw	r2,4(r7)
8111df5c:	194a983a 	sll	r5,r3,r5
8111df60:	2007883a 	mov	r3,r4
8111df64:	2884b03a 	or	r2,r5,r2
8111df68:	38800115 	stw	r2,4(r7)
8111df6c:	003fbb06 	br	8111de5c <__reset+0xfb0fde5c>
8111df70:	21800515 	stw	r6,20(r4)
8111df74:	21800415 	stw	r6,16(r4)
8111df78:	10c00054 	ori	r3,r2,1
8111df7c:	31c00315 	stw	r7,12(r6)
8111df80:	31c00215 	stw	r7,8(r6)
8111df84:	30c00115 	stw	r3,4(r6)
8111df88:	308d883a 	add	r6,r6,r2
8111df8c:	30800015 	stw	r2,0(r6)
8111df90:	003f9506 	br	8111dde8 <__reset+0xfb0fdde8>
8111df94:	00c01504 	movi	r3,84
8111df98:	19400536 	bltu	r3,r5,8111dfb0 <_free_r+0x2c0>
8111df9c:	100ad33a 	srli	r5,r2,12
8111dfa0:	28c01bc4 	addi	r3,r5,111
8111dfa4:	18c7883a 	add	r3,r3,r3
8111dfa8:	29401b84 	addi	r5,r5,110
8111dfac:	003f9c06 	br	8111de20 <__reset+0xfb0fde20>
8111dfb0:	00c05504 	movi	r3,340
8111dfb4:	19400536 	bltu	r3,r5,8111dfcc <_free_r+0x2dc>
8111dfb8:	100ad3fa 	srli	r5,r2,15
8111dfbc:	28c01e04 	addi	r3,r5,120
8111dfc0:	18c7883a 	add	r3,r3,r3
8111dfc4:	29401dc4 	addi	r5,r5,119
8111dfc8:	003f9506 	br	8111de20 <__reset+0xfb0fde20>
8111dfcc:	00c15504 	movi	r3,1364
8111dfd0:	19400536 	bltu	r3,r5,8111dfe8 <_free_r+0x2f8>
8111dfd4:	100ad4ba 	srli	r5,r2,18
8111dfd8:	28c01f44 	addi	r3,r5,125
8111dfdc:	18c7883a 	add	r3,r3,r3
8111dfe0:	29401f04 	addi	r5,r5,124
8111dfe4:	003f8e06 	br	8111de20 <__reset+0xfb0fde20>
8111dfe8:	00c03f84 	movi	r3,254
8111dfec:	01401f84 	movi	r5,126
8111dff0:	003f8b06 	br	8111de20 <__reset+0xfb0fde20>
8111dff4:	10c00054 	ori	r3,r2,1
8111dff8:	30c00115 	stw	r3,4(r6)
8111dffc:	308d883a 	add	r6,r6,r2
8111e000:	30800015 	stw	r2,0(r6)
8111e004:	003f7806 	br	8111dde8 <__reset+0xfb0fdde8>

8111e008 <__sfvwrite_r>:
8111e008:	30800217 	ldw	r2,8(r6)
8111e00c:	10006926 	beq	r2,zero,8111e1b4 <__sfvwrite_r+0x1ac>
8111e010:	defff404 	addi	sp,sp,-48
8111e014:	de00012e 	bgeu	sp,et,8111e01c <__sfvwrite_r+0x14>
8111e018:	003b68fa 	trap	3
8111e01c:	28c0030b 	ldhu	r3,12(r5)
8111e020:	dd400715 	stw	r21,28(sp)
8111e024:	dd000615 	stw	r20,24(sp)
8111e028:	dc000215 	stw	r16,8(sp)
8111e02c:	dfc00b15 	stw	ra,44(sp)
8111e030:	df000a15 	stw	fp,40(sp)
8111e034:	ddc00915 	stw	r23,36(sp)
8111e038:	dd800815 	stw	r22,32(sp)
8111e03c:	dcc00515 	stw	r19,20(sp)
8111e040:	dc800415 	stw	r18,16(sp)
8111e044:	dc400315 	stw	r17,12(sp)
8111e048:	1880020c 	andi	r2,r3,8
8111e04c:	2821883a 	mov	r16,r5
8111e050:	202b883a 	mov	r21,r4
8111e054:	3029883a 	mov	r20,r6
8111e058:	10002726 	beq	r2,zero,8111e0f8 <__sfvwrite_r+0xf0>
8111e05c:	28800417 	ldw	r2,16(r5)
8111e060:	10002526 	beq	r2,zero,8111e0f8 <__sfvwrite_r+0xf0>
8111e064:	1880008c 	andi	r2,r3,2
8111e068:	a4400017 	ldw	r17,0(r20)
8111e06c:	10002a26 	beq	r2,zero,8111e118 <__sfvwrite_r+0x110>
8111e070:	05a00034 	movhi	r22,32768
8111e074:	0027883a 	mov	r19,zero
8111e078:	0025883a 	mov	r18,zero
8111e07c:	b5bf0004 	addi	r22,r22,-1024
8111e080:	980d883a 	mov	r6,r19
8111e084:	a809883a 	mov	r4,r21
8111e088:	90004626 	beq	r18,zero,8111e1a4 <__sfvwrite_r+0x19c>
8111e08c:	900f883a 	mov	r7,r18
8111e090:	b480022e 	bgeu	r22,r18,8111e09c <__sfvwrite_r+0x94>
8111e094:	01e00034 	movhi	r7,32768
8111e098:	39ff0004 	addi	r7,r7,-1024
8111e09c:	80800917 	ldw	r2,36(r16)
8111e0a0:	81400717 	ldw	r5,28(r16)
8111e0a4:	103ee83a 	callr	r2
8111e0a8:	0080570e 	bge	zero,r2,8111e208 <__sfvwrite_r+0x200>
8111e0ac:	a0c00217 	ldw	r3,8(r20)
8111e0b0:	98a7883a 	add	r19,r19,r2
8111e0b4:	90a5c83a 	sub	r18,r18,r2
8111e0b8:	1885c83a 	sub	r2,r3,r2
8111e0bc:	a0800215 	stw	r2,8(r20)
8111e0c0:	103fef1e 	bne	r2,zero,8111e080 <__reset+0xfb0fe080>
8111e0c4:	0005883a 	mov	r2,zero
8111e0c8:	dfc00b17 	ldw	ra,44(sp)
8111e0cc:	df000a17 	ldw	fp,40(sp)
8111e0d0:	ddc00917 	ldw	r23,36(sp)
8111e0d4:	dd800817 	ldw	r22,32(sp)
8111e0d8:	dd400717 	ldw	r21,28(sp)
8111e0dc:	dd000617 	ldw	r20,24(sp)
8111e0e0:	dcc00517 	ldw	r19,20(sp)
8111e0e4:	dc800417 	ldw	r18,16(sp)
8111e0e8:	dc400317 	ldw	r17,12(sp)
8111e0ec:	dc000217 	ldw	r16,8(sp)
8111e0f0:	dec00c04 	addi	sp,sp,48
8111e0f4:	f800283a 	ret
8111e0f8:	800b883a 	mov	r5,r16
8111e0fc:	a809883a 	mov	r4,r21
8111e100:	111b7e80 	call	8111b7e8 <__swsetup_r>
8111e104:	1000eb1e 	bne	r2,zero,8111e4b4 <__sfvwrite_r+0x4ac>
8111e108:	80c0030b 	ldhu	r3,12(r16)
8111e10c:	a4400017 	ldw	r17,0(r20)
8111e110:	1880008c 	andi	r2,r3,2
8111e114:	103fd61e 	bne	r2,zero,8111e070 <__reset+0xfb0fe070>
8111e118:	1880004c 	andi	r2,r3,1
8111e11c:	10003f1e 	bne	r2,zero,8111e21c <__sfvwrite_r+0x214>
8111e120:	0039883a 	mov	fp,zero
8111e124:	0025883a 	mov	r18,zero
8111e128:	90001a26 	beq	r18,zero,8111e194 <__sfvwrite_r+0x18c>
8111e12c:	1880800c 	andi	r2,r3,512
8111e130:	84c00217 	ldw	r19,8(r16)
8111e134:	10002126 	beq	r2,zero,8111e1bc <__sfvwrite_r+0x1b4>
8111e138:	982f883a 	mov	r23,r19
8111e13c:	94c09336 	bltu	r18,r19,8111e38c <__sfvwrite_r+0x384>
8111e140:	1881200c 	andi	r2,r3,1152
8111e144:	10009e1e 	bne	r2,zero,8111e3c0 <__sfvwrite_r+0x3b8>
8111e148:	81000017 	ldw	r4,0(r16)
8111e14c:	b80d883a 	mov	r6,r23
8111e150:	e00b883a 	mov	r5,fp
8111e154:	111eb640 	call	8111eb64 <memmove>
8111e158:	80c00217 	ldw	r3,8(r16)
8111e15c:	81000017 	ldw	r4,0(r16)
8111e160:	9005883a 	mov	r2,r18
8111e164:	1ce7c83a 	sub	r19,r3,r19
8111e168:	25cf883a 	add	r7,r4,r23
8111e16c:	84c00215 	stw	r19,8(r16)
8111e170:	81c00015 	stw	r7,0(r16)
8111e174:	a0c00217 	ldw	r3,8(r20)
8111e178:	e0b9883a 	add	fp,fp,r2
8111e17c:	90a5c83a 	sub	r18,r18,r2
8111e180:	18a7c83a 	sub	r19,r3,r2
8111e184:	a4c00215 	stw	r19,8(r20)
8111e188:	983fce26 	beq	r19,zero,8111e0c4 <__reset+0xfb0fe0c4>
8111e18c:	80c0030b 	ldhu	r3,12(r16)
8111e190:	903fe61e 	bne	r18,zero,8111e12c <__reset+0xfb0fe12c>
8111e194:	8f000017 	ldw	fp,0(r17)
8111e198:	8c800117 	ldw	r18,4(r17)
8111e19c:	8c400204 	addi	r17,r17,8
8111e1a0:	003fe106 	br	8111e128 <__reset+0xfb0fe128>
8111e1a4:	8cc00017 	ldw	r19,0(r17)
8111e1a8:	8c800117 	ldw	r18,4(r17)
8111e1ac:	8c400204 	addi	r17,r17,8
8111e1b0:	003fb306 	br	8111e080 <__reset+0xfb0fe080>
8111e1b4:	0005883a 	mov	r2,zero
8111e1b8:	f800283a 	ret
8111e1bc:	81000017 	ldw	r4,0(r16)
8111e1c0:	80800417 	ldw	r2,16(r16)
8111e1c4:	11005736 	bltu	r2,r4,8111e324 <__sfvwrite_r+0x31c>
8111e1c8:	85c00517 	ldw	r23,20(r16)
8111e1cc:	95c05536 	bltu	r18,r23,8111e324 <__sfvwrite_r+0x31c>
8111e1d0:	00a00034 	movhi	r2,32768
8111e1d4:	10bfffc4 	addi	r2,r2,-1
8111e1d8:	9009883a 	mov	r4,r18
8111e1dc:	1480012e 	bgeu	r2,r18,8111e1e4 <__sfvwrite_r+0x1dc>
8111e1e0:	1009883a 	mov	r4,r2
8111e1e4:	b80b883a 	mov	r5,r23
8111e1e8:	1126f800 	call	81126f80 <__divsi3>
8111e1ec:	15cf383a 	mul	r7,r2,r23
8111e1f0:	81400717 	ldw	r5,28(r16)
8111e1f4:	80800917 	ldw	r2,36(r16)
8111e1f8:	e00d883a 	mov	r6,fp
8111e1fc:	a809883a 	mov	r4,r21
8111e200:	103ee83a 	callr	r2
8111e204:	00bfdb16 	blt	zero,r2,8111e174 <__reset+0xfb0fe174>
8111e208:	8080030b 	ldhu	r2,12(r16)
8111e20c:	10801014 	ori	r2,r2,64
8111e210:	8080030d 	sth	r2,12(r16)
8111e214:	00bfffc4 	movi	r2,-1
8111e218:	003fab06 	br	8111e0c8 <__reset+0xfb0fe0c8>
8111e21c:	0027883a 	mov	r19,zero
8111e220:	0011883a 	mov	r8,zero
8111e224:	0039883a 	mov	fp,zero
8111e228:	0025883a 	mov	r18,zero
8111e22c:	90001f26 	beq	r18,zero,8111e2ac <__sfvwrite_r+0x2a4>
8111e230:	40005a26 	beq	r8,zero,8111e39c <__sfvwrite_r+0x394>
8111e234:	982d883a 	mov	r22,r19
8111e238:	94c0012e 	bgeu	r18,r19,8111e240 <__sfvwrite_r+0x238>
8111e23c:	902d883a 	mov	r22,r18
8111e240:	81000017 	ldw	r4,0(r16)
8111e244:	80800417 	ldw	r2,16(r16)
8111e248:	b02f883a 	mov	r23,r22
8111e24c:	81c00517 	ldw	r7,20(r16)
8111e250:	1100032e 	bgeu	r2,r4,8111e260 <__sfvwrite_r+0x258>
8111e254:	80c00217 	ldw	r3,8(r16)
8111e258:	38c7883a 	add	r3,r7,r3
8111e25c:	1d801816 	blt	r3,r22,8111e2c0 <__sfvwrite_r+0x2b8>
8111e260:	b1c03e16 	blt	r22,r7,8111e35c <__sfvwrite_r+0x354>
8111e264:	80800917 	ldw	r2,36(r16)
8111e268:	81400717 	ldw	r5,28(r16)
8111e26c:	e00d883a 	mov	r6,fp
8111e270:	da000115 	stw	r8,4(sp)
8111e274:	a809883a 	mov	r4,r21
8111e278:	103ee83a 	callr	r2
8111e27c:	102f883a 	mov	r23,r2
8111e280:	da000117 	ldw	r8,4(sp)
8111e284:	00bfe00e 	bge	zero,r2,8111e208 <__reset+0xfb0fe208>
8111e288:	9de7c83a 	sub	r19,r19,r23
8111e28c:	98001f26 	beq	r19,zero,8111e30c <__sfvwrite_r+0x304>
8111e290:	a0800217 	ldw	r2,8(r20)
8111e294:	e5f9883a 	add	fp,fp,r23
8111e298:	95e5c83a 	sub	r18,r18,r23
8111e29c:	15efc83a 	sub	r23,r2,r23
8111e2a0:	a5c00215 	stw	r23,8(r20)
8111e2a4:	b83f8726 	beq	r23,zero,8111e0c4 <__reset+0xfb0fe0c4>
8111e2a8:	903fe11e 	bne	r18,zero,8111e230 <__reset+0xfb0fe230>
8111e2ac:	8f000017 	ldw	fp,0(r17)
8111e2b0:	8c800117 	ldw	r18,4(r17)
8111e2b4:	0011883a 	mov	r8,zero
8111e2b8:	8c400204 	addi	r17,r17,8
8111e2bc:	003fdb06 	br	8111e22c <__reset+0xfb0fe22c>
8111e2c0:	180d883a 	mov	r6,r3
8111e2c4:	e00b883a 	mov	r5,fp
8111e2c8:	da000115 	stw	r8,4(sp)
8111e2cc:	d8c00015 	stw	r3,0(sp)
8111e2d0:	111eb640 	call	8111eb64 <memmove>
8111e2d4:	d8c00017 	ldw	r3,0(sp)
8111e2d8:	80800017 	ldw	r2,0(r16)
8111e2dc:	800b883a 	mov	r5,r16
8111e2e0:	a809883a 	mov	r4,r21
8111e2e4:	10c5883a 	add	r2,r2,r3
8111e2e8:	80800015 	stw	r2,0(r16)
8111e2ec:	d8c00015 	stw	r3,0(sp)
8111e2f0:	111d45c0 	call	8111d45c <_fflush_r>
8111e2f4:	d8c00017 	ldw	r3,0(sp)
8111e2f8:	da000117 	ldw	r8,4(sp)
8111e2fc:	103fc21e 	bne	r2,zero,8111e208 <__reset+0xfb0fe208>
8111e300:	182f883a 	mov	r23,r3
8111e304:	9de7c83a 	sub	r19,r19,r23
8111e308:	983fe11e 	bne	r19,zero,8111e290 <__reset+0xfb0fe290>
8111e30c:	800b883a 	mov	r5,r16
8111e310:	a809883a 	mov	r4,r21
8111e314:	111d45c0 	call	8111d45c <_fflush_r>
8111e318:	103fbb1e 	bne	r2,zero,8111e208 <__reset+0xfb0fe208>
8111e31c:	0011883a 	mov	r8,zero
8111e320:	003fdb06 	br	8111e290 <__reset+0xfb0fe290>
8111e324:	94c0012e 	bgeu	r18,r19,8111e32c <__sfvwrite_r+0x324>
8111e328:	9027883a 	mov	r19,r18
8111e32c:	980d883a 	mov	r6,r19
8111e330:	e00b883a 	mov	r5,fp
8111e334:	111eb640 	call	8111eb64 <memmove>
8111e338:	80800217 	ldw	r2,8(r16)
8111e33c:	80c00017 	ldw	r3,0(r16)
8111e340:	14c5c83a 	sub	r2,r2,r19
8111e344:	1cc7883a 	add	r3,r3,r19
8111e348:	80800215 	stw	r2,8(r16)
8111e34c:	80c00015 	stw	r3,0(r16)
8111e350:	10004326 	beq	r2,zero,8111e460 <__sfvwrite_r+0x458>
8111e354:	9805883a 	mov	r2,r19
8111e358:	003f8606 	br	8111e174 <__reset+0xfb0fe174>
8111e35c:	b00d883a 	mov	r6,r22
8111e360:	e00b883a 	mov	r5,fp
8111e364:	da000115 	stw	r8,4(sp)
8111e368:	111eb640 	call	8111eb64 <memmove>
8111e36c:	80800217 	ldw	r2,8(r16)
8111e370:	80c00017 	ldw	r3,0(r16)
8111e374:	da000117 	ldw	r8,4(sp)
8111e378:	1585c83a 	sub	r2,r2,r22
8111e37c:	1dad883a 	add	r22,r3,r22
8111e380:	80800215 	stw	r2,8(r16)
8111e384:	85800015 	stw	r22,0(r16)
8111e388:	003fbf06 	br	8111e288 <__reset+0xfb0fe288>
8111e38c:	81000017 	ldw	r4,0(r16)
8111e390:	9027883a 	mov	r19,r18
8111e394:	902f883a 	mov	r23,r18
8111e398:	003f6c06 	br	8111e14c <__reset+0xfb0fe14c>
8111e39c:	900d883a 	mov	r6,r18
8111e3a0:	01400284 	movi	r5,10
8111e3a4:	e009883a 	mov	r4,fp
8111e3a8:	111ea800 	call	8111ea80 <memchr>
8111e3ac:	10003e26 	beq	r2,zero,8111e4a8 <__sfvwrite_r+0x4a0>
8111e3b0:	10800044 	addi	r2,r2,1
8111e3b4:	1727c83a 	sub	r19,r2,fp
8111e3b8:	02000044 	movi	r8,1
8111e3bc:	003f9d06 	br	8111e234 <__reset+0xfb0fe234>
8111e3c0:	80800517 	ldw	r2,20(r16)
8111e3c4:	81400417 	ldw	r5,16(r16)
8111e3c8:	81c00017 	ldw	r7,0(r16)
8111e3cc:	10a7883a 	add	r19,r2,r2
8111e3d0:	9885883a 	add	r2,r19,r2
8111e3d4:	1026d7fa 	srli	r19,r2,31
8111e3d8:	396dc83a 	sub	r22,r7,r5
8111e3dc:	b1000044 	addi	r4,r22,1
8111e3e0:	9885883a 	add	r2,r19,r2
8111e3e4:	1027d07a 	srai	r19,r2,1
8111e3e8:	2485883a 	add	r2,r4,r18
8111e3ec:	980d883a 	mov	r6,r19
8111e3f0:	9880022e 	bgeu	r19,r2,8111e3fc <__sfvwrite_r+0x3f4>
8111e3f4:	1027883a 	mov	r19,r2
8111e3f8:	100d883a 	mov	r6,r2
8111e3fc:	18c1000c 	andi	r3,r3,1024
8111e400:	18001c26 	beq	r3,zero,8111e474 <__sfvwrite_r+0x46c>
8111e404:	300b883a 	mov	r5,r6
8111e408:	a809883a 	mov	r4,r21
8111e40c:	111425c0 	call	8111425c <_malloc_r>
8111e410:	102f883a 	mov	r23,r2
8111e414:	10002926 	beq	r2,zero,8111e4bc <__sfvwrite_r+0x4b4>
8111e418:	81400417 	ldw	r5,16(r16)
8111e41c:	b00d883a 	mov	r6,r22
8111e420:	1009883a 	mov	r4,r2
8111e424:	1114a700 	call	81114a70 <memcpy>
8111e428:	8080030b 	ldhu	r2,12(r16)
8111e42c:	00fedfc4 	movi	r3,-1153
8111e430:	10c4703a 	and	r2,r2,r3
8111e434:	10802014 	ori	r2,r2,128
8111e438:	8080030d 	sth	r2,12(r16)
8111e43c:	bd89883a 	add	r4,r23,r22
8111e440:	9d8fc83a 	sub	r7,r19,r22
8111e444:	85c00415 	stw	r23,16(r16)
8111e448:	84c00515 	stw	r19,20(r16)
8111e44c:	81000015 	stw	r4,0(r16)
8111e450:	9027883a 	mov	r19,r18
8111e454:	81c00215 	stw	r7,8(r16)
8111e458:	902f883a 	mov	r23,r18
8111e45c:	003f3b06 	br	8111e14c <__reset+0xfb0fe14c>
8111e460:	800b883a 	mov	r5,r16
8111e464:	a809883a 	mov	r4,r21
8111e468:	111d45c0 	call	8111d45c <_fflush_r>
8111e46c:	103fb926 	beq	r2,zero,8111e354 <__reset+0xfb0fe354>
8111e470:	003f6506 	br	8111e208 <__reset+0xfb0fe208>
8111e474:	a809883a 	mov	r4,r21
8111e478:	111fd840 	call	8111fd84 <_realloc_r>
8111e47c:	102f883a 	mov	r23,r2
8111e480:	103fee1e 	bne	r2,zero,8111e43c <__reset+0xfb0fe43c>
8111e484:	81400417 	ldw	r5,16(r16)
8111e488:	a809883a 	mov	r4,r21
8111e48c:	111dcf00 	call	8111dcf0 <_free_r>
8111e490:	8080030b 	ldhu	r2,12(r16)
8111e494:	00ffdfc4 	movi	r3,-129
8111e498:	1884703a 	and	r2,r3,r2
8111e49c:	00c00304 	movi	r3,12
8111e4a0:	a8c00015 	stw	r3,0(r21)
8111e4a4:	003f5906 	br	8111e20c <__reset+0xfb0fe20c>
8111e4a8:	94c00044 	addi	r19,r18,1
8111e4ac:	02000044 	movi	r8,1
8111e4b0:	003f6006 	br	8111e234 <__reset+0xfb0fe234>
8111e4b4:	00bfffc4 	movi	r2,-1
8111e4b8:	003f0306 	br	8111e0c8 <__reset+0xfb0fe0c8>
8111e4bc:	00800304 	movi	r2,12
8111e4c0:	a8800015 	stw	r2,0(r21)
8111e4c4:	8080030b 	ldhu	r2,12(r16)
8111e4c8:	003f5006 	br	8111e20c <__reset+0xfb0fe20c>

8111e4cc <_fwalk>:
8111e4cc:	defff704 	addi	sp,sp,-36
8111e4d0:	de00012e 	bgeu	sp,et,8111e4d8 <_fwalk+0xc>
8111e4d4:	003b68fa 	trap	3
8111e4d8:	dd000415 	stw	r20,16(sp)
8111e4dc:	dfc00815 	stw	ra,32(sp)
8111e4e0:	ddc00715 	stw	r23,28(sp)
8111e4e4:	dd800615 	stw	r22,24(sp)
8111e4e8:	dd400515 	stw	r21,20(sp)
8111e4ec:	dcc00315 	stw	r19,12(sp)
8111e4f0:	dc800215 	stw	r18,8(sp)
8111e4f4:	dc400115 	stw	r17,4(sp)
8111e4f8:	dc000015 	stw	r16,0(sp)
8111e4fc:	2500b804 	addi	r20,r4,736
8111e500:	a0002326 	beq	r20,zero,8111e590 <_fwalk+0xc4>
8111e504:	282b883a 	mov	r21,r5
8111e508:	002f883a 	mov	r23,zero
8111e50c:	05800044 	movi	r22,1
8111e510:	04ffffc4 	movi	r19,-1
8111e514:	a4400117 	ldw	r17,4(r20)
8111e518:	a4800217 	ldw	r18,8(r20)
8111e51c:	8c7fffc4 	addi	r17,r17,-1
8111e520:	88000d16 	blt	r17,zero,8111e558 <_fwalk+0x8c>
8111e524:	94000304 	addi	r16,r18,12
8111e528:	94800384 	addi	r18,r18,14
8111e52c:	8080000b 	ldhu	r2,0(r16)
8111e530:	8c7fffc4 	addi	r17,r17,-1
8111e534:	813ffd04 	addi	r4,r16,-12
8111e538:	b080042e 	bgeu	r22,r2,8111e54c <_fwalk+0x80>
8111e53c:	9080000f 	ldh	r2,0(r18)
8111e540:	14c00226 	beq	r2,r19,8111e54c <_fwalk+0x80>
8111e544:	a83ee83a 	callr	r21
8111e548:	b8aeb03a 	or	r23,r23,r2
8111e54c:	84001a04 	addi	r16,r16,104
8111e550:	94801a04 	addi	r18,r18,104
8111e554:	8cfff51e 	bne	r17,r19,8111e52c <__reset+0xfb0fe52c>
8111e558:	a5000017 	ldw	r20,0(r20)
8111e55c:	a03fed1e 	bne	r20,zero,8111e514 <__reset+0xfb0fe514>
8111e560:	b805883a 	mov	r2,r23
8111e564:	dfc00817 	ldw	ra,32(sp)
8111e568:	ddc00717 	ldw	r23,28(sp)
8111e56c:	dd800617 	ldw	r22,24(sp)
8111e570:	dd400517 	ldw	r21,20(sp)
8111e574:	dd000417 	ldw	r20,16(sp)
8111e578:	dcc00317 	ldw	r19,12(sp)
8111e57c:	dc800217 	ldw	r18,8(sp)
8111e580:	dc400117 	ldw	r17,4(sp)
8111e584:	dc000017 	ldw	r16,0(sp)
8111e588:	dec00904 	addi	sp,sp,36
8111e58c:	f800283a 	ret
8111e590:	002f883a 	mov	r23,zero
8111e594:	003ff206 	br	8111e560 <__reset+0xfb0fe560>

8111e598 <_fwalk_reent>:
8111e598:	defff704 	addi	sp,sp,-36
8111e59c:	de00012e 	bgeu	sp,et,8111e5a4 <_fwalk_reent+0xc>
8111e5a0:	003b68fa 	trap	3
8111e5a4:	dd000415 	stw	r20,16(sp)
8111e5a8:	dfc00815 	stw	ra,32(sp)
8111e5ac:	ddc00715 	stw	r23,28(sp)
8111e5b0:	dd800615 	stw	r22,24(sp)
8111e5b4:	dd400515 	stw	r21,20(sp)
8111e5b8:	dcc00315 	stw	r19,12(sp)
8111e5bc:	dc800215 	stw	r18,8(sp)
8111e5c0:	dc400115 	stw	r17,4(sp)
8111e5c4:	dc000015 	stw	r16,0(sp)
8111e5c8:	2500b804 	addi	r20,r4,736
8111e5cc:	a0002326 	beq	r20,zero,8111e65c <_fwalk_reent+0xc4>
8111e5d0:	282b883a 	mov	r21,r5
8111e5d4:	2027883a 	mov	r19,r4
8111e5d8:	002f883a 	mov	r23,zero
8111e5dc:	05800044 	movi	r22,1
8111e5e0:	04bfffc4 	movi	r18,-1
8111e5e4:	a4400117 	ldw	r17,4(r20)
8111e5e8:	a4000217 	ldw	r16,8(r20)
8111e5ec:	8c7fffc4 	addi	r17,r17,-1
8111e5f0:	88000c16 	blt	r17,zero,8111e624 <_fwalk_reent+0x8c>
8111e5f4:	84000304 	addi	r16,r16,12
8111e5f8:	8080000b 	ldhu	r2,0(r16)
8111e5fc:	8c7fffc4 	addi	r17,r17,-1
8111e600:	817ffd04 	addi	r5,r16,-12
8111e604:	b080052e 	bgeu	r22,r2,8111e61c <_fwalk_reent+0x84>
8111e608:	8080008f 	ldh	r2,2(r16)
8111e60c:	9809883a 	mov	r4,r19
8111e610:	14800226 	beq	r2,r18,8111e61c <_fwalk_reent+0x84>
8111e614:	a83ee83a 	callr	r21
8111e618:	b8aeb03a 	or	r23,r23,r2
8111e61c:	84001a04 	addi	r16,r16,104
8111e620:	8cbff51e 	bne	r17,r18,8111e5f8 <__reset+0xfb0fe5f8>
8111e624:	a5000017 	ldw	r20,0(r20)
8111e628:	a03fee1e 	bne	r20,zero,8111e5e4 <__reset+0xfb0fe5e4>
8111e62c:	b805883a 	mov	r2,r23
8111e630:	dfc00817 	ldw	ra,32(sp)
8111e634:	ddc00717 	ldw	r23,28(sp)
8111e638:	dd800617 	ldw	r22,24(sp)
8111e63c:	dd400517 	ldw	r21,20(sp)
8111e640:	dd000417 	ldw	r20,16(sp)
8111e644:	dcc00317 	ldw	r19,12(sp)
8111e648:	dc800217 	ldw	r18,8(sp)
8111e64c:	dc400117 	ldw	r17,4(sp)
8111e650:	dc000017 	ldw	r16,0(sp)
8111e654:	dec00904 	addi	sp,sp,36
8111e658:	f800283a 	ret
8111e65c:	002f883a 	mov	r23,zero
8111e660:	003ff206 	br	8111e62c <__reset+0xfb0fe62c>

8111e664 <_isatty_r>:
8111e664:	defffd04 	addi	sp,sp,-12
8111e668:	de00012e 	bgeu	sp,et,8111e670 <_isatty_r+0xc>
8111e66c:	003b68fa 	trap	3
8111e670:	dc000015 	stw	r16,0(sp)
8111e674:	04204534 	movhi	r16,33044
8111e678:	dc400115 	stw	r17,4(sp)
8111e67c:	8412e404 	addi	r16,r16,19344
8111e680:	2023883a 	mov	r17,r4
8111e684:	2809883a 	mov	r4,r5
8111e688:	dfc00215 	stw	ra,8(sp)
8111e68c:	80000015 	stw	zero,0(r16)
8111e690:	11297b40 	call	811297b4 <isatty>
8111e694:	00ffffc4 	movi	r3,-1
8111e698:	10c00526 	beq	r2,r3,8111e6b0 <_isatty_r+0x4c>
8111e69c:	dfc00217 	ldw	ra,8(sp)
8111e6a0:	dc400117 	ldw	r17,4(sp)
8111e6a4:	dc000017 	ldw	r16,0(sp)
8111e6a8:	dec00304 	addi	sp,sp,12
8111e6ac:	f800283a 	ret
8111e6b0:	80c00017 	ldw	r3,0(r16)
8111e6b4:	183ff926 	beq	r3,zero,8111e69c <__reset+0xfb0fe69c>
8111e6b8:	88c00015 	stw	r3,0(r17)
8111e6bc:	003ff706 	br	8111e69c <__reset+0xfb0fe69c>

8111e6c0 <iswspace>:
8111e6c0:	00803fc4 	movi	r2,255
8111e6c4:	11000836 	bltu	r2,r4,8111e6e8 <iswspace+0x28>
8111e6c8:	00a04534 	movhi	r2,33044
8111e6cc:	10928504 	addi	r2,r2,18964
8111e6d0:	10800017 	ldw	r2,0(r2)
8111e6d4:	1109883a 	add	r4,r2,r4
8111e6d8:	20800043 	ldbu	r2,1(r4)
8111e6dc:	1080020c 	andi	r2,r2,8
8111e6e0:	10803fcc 	andi	r2,r2,255
8111e6e4:	f800283a 	ret
8111e6e8:	0005883a 	mov	r2,zero
8111e6ec:	f800283a 	ret

8111e6f0 <_setlocale_r>:
8111e6f0:	30001d26 	beq	r6,zero,8111e768 <_setlocale_r+0x78>
8111e6f4:	01604534 	movhi	r5,33044
8111e6f8:	defffe04 	addi	sp,sp,-8
8111e6fc:	2948cb04 	addi	r5,r5,9004
8111e700:	3009883a 	mov	r4,r6
8111e704:	de00012e 	bgeu	sp,et,8111e70c <_setlocale_r+0x1c>
8111e708:	003b68fa 	trap	3
8111e70c:	dc000015 	stw	r16,0(sp)
8111e710:	dfc00115 	stw	ra,4(sp)
8111e714:	3021883a 	mov	r16,r6
8111e718:	112043c0 	call	8112043c <strcmp>
8111e71c:	1000061e 	bne	r2,zero,8111e738 <_setlocale_r+0x48>
8111e720:	00a04534 	movhi	r2,33044
8111e724:	10889a04 	addi	r2,r2,8808
8111e728:	dfc00117 	ldw	ra,4(sp)
8111e72c:	dc000017 	ldw	r16,0(sp)
8111e730:	dec00204 	addi	sp,sp,8
8111e734:	f800283a 	ret
8111e738:	01604534 	movhi	r5,33044
8111e73c:	29489a04 	addi	r5,r5,8808
8111e740:	8009883a 	mov	r4,r16
8111e744:	112043c0 	call	8112043c <strcmp>
8111e748:	103ff526 	beq	r2,zero,8111e720 <__reset+0xfb0fe720>
8111e74c:	01604534 	movhi	r5,33044
8111e750:	2948a404 	addi	r5,r5,8848
8111e754:	8009883a 	mov	r4,r16
8111e758:	112043c0 	call	8112043c <strcmp>
8111e75c:	103ff026 	beq	r2,zero,8111e720 <__reset+0xfb0fe720>
8111e760:	0005883a 	mov	r2,zero
8111e764:	003ff006 	br	8111e728 <__reset+0xfb0fe728>
8111e768:	00a04534 	movhi	r2,33044
8111e76c:	10889a04 	addi	r2,r2,8808
8111e770:	f800283a 	ret

8111e774 <__locale_charset>:
8111e774:	00a04534 	movhi	r2,33044
8111e778:	108d4f04 	addi	r2,r2,13628
8111e77c:	f800283a 	ret

8111e780 <__locale_mb_cur_max>:
8111e780:	00a04534 	movhi	r2,33044
8111e784:	10928a04 	addi	r2,r2,18984
8111e788:	10800017 	ldw	r2,0(r2)
8111e78c:	f800283a 	ret

8111e790 <__locale_msgcharset>:
8111e790:	00a04534 	movhi	r2,33044
8111e794:	108d4704 	addi	r2,r2,13596
8111e798:	f800283a 	ret

8111e79c <__locale_cjk_lang>:
8111e79c:	0005883a 	mov	r2,zero
8111e7a0:	f800283a 	ret

8111e7a4 <_localeconv_r>:
8111e7a4:	00a04534 	movhi	r2,33044
8111e7a8:	108d5704 	addi	r2,r2,13660
8111e7ac:	f800283a 	ret

8111e7b0 <setlocale>:
8111e7b0:	00a04534 	movhi	r2,33044
8111e7b4:	10928704 	addi	r2,r2,18972
8111e7b8:	280d883a 	mov	r6,r5
8111e7bc:	200b883a 	mov	r5,r4
8111e7c0:	11000017 	ldw	r4,0(r2)
8111e7c4:	111e6f01 	jmpi	8111e6f0 <_setlocale_r>

8111e7c8 <localeconv>:
8111e7c8:	00a04534 	movhi	r2,33044
8111e7cc:	108d5704 	addi	r2,r2,13660
8111e7d0:	f800283a 	ret

8111e7d4 <_lseek_r>:
8111e7d4:	defffd04 	addi	sp,sp,-12
8111e7d8:	de00012e 	bgeu	sp,et,8111e7e0 <_lseek_r+0xc>
8111e7dc:	003b68fa 	trap	3
8111e7e0:	2805883a 	mov	r2,r5
8111e7e4:	dc000015 	stw	r16,0(sp)
8111e7e8:	04204534 	movhi	r16,33044
8111e7ec:	dc400115 	stw	r17,4(sp)
8111e7f0:	300b883a 	mov	r5,r6
8111e7f4:	8412e404 	addi	r16,r16,19344
8111e7f8:	2023883a 	mov	r17,r4
8111e7fc:	380d883a 	mov	r6,r7
8111e800:	1009883a 	mov	r4,r2
8111e804:	dfc00215 	stw	ra,8(sp)
8111e808:	80000015 	stw	zero,0(r16)
8111e80c:	112a3b00 	call	8112a3b0 <lseek>
8111e810:	00ffffc4 	movi	r3,-1
8111e814:	10c00526 	beq	r2,r3,8111e82c <_lseek_r+0x58>
8111e818:	dfc00217 	ldw	ra,8(sp)
8111e81c:	dc400117 	ldw	r17,4(sp)
8111e820:	dc000017 	ldw	r16,0(sp)
8111e824:	dec00304 	addi	sp,sp,12
8111e828:	f800283a 	ret
8111e82c:	80c00017 	ldw	r3,0(r16)
8111e830:	183ff926 	beq	r3,zero,8111e818 <__reset+0xfb0fe818>
8111e834:	88c00015 	stw	r3,0(r17)
8111e838:	003ff706 	br	8111e818 <__reset+0xfb0fe818>

8111e83c <_mbrtowc_r>:
8111e83c:	defff704 	addi	sp,sp,-36
8111e840:	00a04534 	movhi	r2,33044
8111e844:	de00012e 	bgeu	sp,et,8111e84c <_mbrtowc_r+0x10>
8111e848:	003b68fa 	trap	3
8111e84c:	10928b04 	addi	r2,r2,18988
8111e850:	dc800715 	stw	r18,28(sp)
8111e854:	dc400615 	stw	r17,24(sp)
8111e858:	dc000515 	stw	r16,20(sp)
8111e85c:	dfc00815 	stw	ra,32(sp)
8111e860:	2021883a 	mov	r16,r4
8111e864:	dc400917 	ldw	r17,36(sp)
8111e868:	14800017 	ldw	r18,0(r2)
8111e86c:	30001626 	beq	r6,zero,8111e8c8 <_mbrtowc_r+0x8c>
8111e870:	d9400215 	stw	r5,8(sp)
8111e874:	d9800315 	stw	r6,12(sp)
8111e878:	d9c00415 	stw	r7,16(sp)
8111e87c:	111e7740 	call	8111e774 <__locale_charset>
8111e880:	d9c00417 	ldw	r7,16(sp)
8111e884:	d9800317 	ldw	r6,12(sp)
8111e888:	d9400217 	ldw	r5,8(sp)
8111e88c:	d8800015 	stw	r2,0(sp)
8111e890:	dc400115 	stw	r17,4(sp)
8111e894:	8009883a 	mov	r4,r16
8111e898:	903ee83a 	callr	r18
8111e89c:	00ffffc4 	movi	r3,-1
8111e8a0:	10c0031e 	bne	r2,r3,8111e8b0 <_mbrtowc_r+0x74>
8111e8a4:	88000015 	stw	zero,0(r17)
8111e8a8:	00c02284 	movi	r3,138
8111e8ac:	80c00015 	stw	r3,0(r16)
8111e8b0:	dfc00817 	ldw	ra,32(sp)
8111e8b4:	dc800717 	ldw	r18,28(sp)
8111e8b8:	dc400617 	ldw	r17,24(sp)
8111e8bc:	dc000517 	ldw	r16,20(sp)
8111e8c0:	dec00904 	addi	sp,sp,36
8111e8c4:	f800283a 	ret
8111e8c8:	111e7740 	call	8111e774 <__locale_charset>
8111e8cc:	01a04534 	movhi	r6,33044
8111e8d0:	3188a404 	addi	r6,r6,8848
8111e8d4:	dc400115 	stw	r17,4(sp)
8111e8d8:	d8800015 	stw	r2,0(sp)
8111e8dc:	01c00044 	movi	r7,1
8111e8e0:	000b883a 	mov	r5,zero
8111e8e4:	8009883a 	mov	r4,r16
8111e8e8:	903ee83a 	callr	r18
8111e8ec:	003feb06 	br	8111e89c <__reset+0xfb0fe89c>

8111e8f0 <mbrtowc>:
8111e8f0:	defff704 	addi	sp,sp,-36
8111e8f4:	00a04534 	movhi	r2,33044
8111e8f8:	de00012e 	bgeu	sp,et,8111e900 <mbrtowc+0x10>
8111e8fc:	003b68fa 	trap	3
8111e900:	10928704 	addi	r2,r2,18972
8111e904:	dc800415 	stw	r18,16(sp)
8111e908:	dc400315 	stw	r17,12(sp)
8111e90c:	dfc00815 	stw	ra,32(sp)
8111e910:	dd400715 	stw	r21,28(sp)
8111e914:	dd000615 	stw	r20,24(sp)
8111e918:	dcc00515 	stw	r19,20(sp)
8111e91c:	dc000215 	stw	r16,8(sp)
8111e920:	3825883a 	mov	r18,r7
8111e924:	14400017 	ldw	r17,0(r2)
8111e928:	28001c26 	beq	r5,zero,8111e99c <mbrtowc+0xac>
8111e92c:	00a04534 	movhi	r2,33044
8111e930:	10928b04 	addi	r2,r2,18988
8111e934:	15400017 	ldw	r21,0(r2)
8111e938:	2821883a 	mov	r16,r5
8111e93c:	2027883a 	mov	r19,r4
8111e940:	3029883a 	mov	r20,r6
8111e944:	111e7740 	call	8111e774 <__locale_charset>
8111e948:	d8800015 	stw	r2,0(sp)
8111e94c:	dc800115 	stw	r18,4(sp)
8111e950:	a00f883a 	mov	r7,r20
8111e954:	800d883a 	mov	r6,r16
8111e958:	980b883a 	mov	r5,r19
8111e95c:	8809883a 	mov	r4,r17
8111e960:	a83ee83a 	callr	r21
8111e964:	00ffffc4 	movi	r3,-1
8111e968:	10c0031e 	bne	r2,r3,8111e978 <mbrtowc+0x88>
8111e96c:	90000015 	stw	zero,0(r18)
8111e970:	00c02284 	movi	r3,138
8111e974:	88c00015 	stw	r3,0(r17)
8111e978:	dfc00817 	ldw	ra,32(sp)
8111e97c:	dd400717 	ldw	r21,28(sp)
8111e980:	dd000617 	ldw	r20,24(sp)
8111e984:	dcc00517 	ldw	r19,20(sp)
8111e988:	dc800417 	ldw	r18,16(sp)
8111e98c:	dc400317 	ldw	r17,12(sp)
8111e990:	dc000217 	ldw	r16,8(sp)
8111e994:	dec00904 	addi	sp,sp,36
8111e998:	f800283a 	ret
8111e99c:	00a04534 	movhi	r2,33044
8111e9a0:	10928b04 	addi	r2,r2,18988
8111e9a4:	14000017 	ldw	r16,0(r2)
8111e9a8:	111e7740 	call	8111e774 <__locale_charset>
8111e9ac:	01a04534 	movhi	r6,33044
8111e9b0:	3188a404 	addi	r6,r6,8848
8111e9b4:	dc800115 	stw	r18,4(sp)
8111e9b8:	d8800015 	stw	r2,0(sp)
8111e9bc:	01c00044 	movi	r7,1
8111e9c0:	000b883a 	mov	r5,zero
8111e9c4:	8809883a 	mov	r4,r17
8111e9c8:	803ee83a 	callr	r16
8111e9cc:	003fe506 	br	8111e964 <__reset+0xfb0fe964>

8111e9d0 <__ascii_mbtowc>:
8111e9d0:	deffff04 	addi	sp,sp,-4
8111e9d4:	de00012e 	bgeu	sp,et,8111e9dc <__ascii_mbtowc+0xc>
8111e9d8:	003b68fa 	trap	3
8111e9dc:	28000826 	beq	r5,zero,8111ea00 <__ascii_mbtowc+0x30>
8111e9e0:	30000926 	beq	r6,zero,8111ea08 <__ascii_mbtowc+0x38>
8111e9e4:	38000b26 	beq	r7,zero,8111ea14 <__ascii_mbtowc+0x44>
8111e9e8:	30800003 	ldbu	r2,0(r6)
8111e9ec:	28800015 	stw	r2,0(r5)
8111e9f0:	30800003 	ldbu	r2,0(r6)
8111e9f4:	1004c03a 	cmpne	r2,r2,zero
8111e9f8:	dec00104 	addi	sp,sp,4
8111e9fc:	f800283a 	ret
8111ea00:	d80b883a 	mov	r5,sp
8111ea04:	303ff71e 	bne	r6,zero,8111e9e4 <__reset+0xfb0fe9e4>
8111ea08:	0005883a 	mov	r2,zero
8111ea0c:	dec00104 	addi	sp,sp,4
8111ea10:	f800283a 	ret
8111ea14:	00bfff84 	movi	r2,-2
8111ea18:	003ff706 	br	8111e9f8 <__reset+0xfb0fe9f8>

8111ea1c <_mbtowc_r>:
8111ea1c:	00a04534 	movhi	r2,33044
8111ea20:	defff804 	addi	sp,sp,-32
8111ea24:	10928b04 	addi	r2,r2,18988
8111ea28:	de00012e 	bgeu	sp,et,8111ea30 <_mbtowc_r+0x14>
8111ea2c:	003b68fa 	trap	3
8111ea30:	dfc00715 	stw	ra,28(sp)
8111ea34:	dc000615 	stw	r16,24(sp)
8111ea38:	14000017 	ldw	r16,0(r2)
8111ea3c:	d9000215 	stw	r4,8(sp)
8111ea40:	d9400315 	stw	r5,12(sp)
8111ea44:	d9800415 	stw	r6,16(sp)
8111ea48:	d9c00515 	stw	r7,20(sp)
8111ea4c:	111e7740 	call	8111e774 <__locale_charset>
8111ea50:	d8800015 	stw	r2,0(sp)
8111ea54:	d8800817 	ldw	r2,32(sp)
8111ea58:	d9c00517 	ldw	r7,20(sp)
8111ea5c:	d9800417 	ldw	r6,16(sp)
8111ea60:	d9400317 	ldw	r5,12(sp)
8111ea64:	d9000217 	ldw	r4,8(sp)
8111ea68:	d8800115 	stw	r2,4(sp)
8111ea6c:	803ee83a 	callr	r16
8111ea70:	dfc00717 	ldw	ra,28(sp)
8111ea74:	dc000617 	ldw	r16,24(sp)
8111ea78:	dec00804 	addi	sp,sp,32
8111ea7c:	f800283a 	ret

8111ea80 <memchr>:
8111ea80:	208000cc 	andi	r2,r4,3
8111ea84:	280f883a 	mov	r7,r5
8111ea88:	10003426 	beq	r2,zero,8111eb5c <memchr+0xdc>
8111ea8c:	30bfffc4 	addi	r2,r6,-1
8111ea90:	30001a26 	beq	r6,zero,8111eafc <memchr+0x7c>
8111ea94:	20c00003 	ldbu	r3,0(r4)
8111ea98:	29803fcc 	andi	r6,r5,255
8111ea9c:	30c0051e 	bne	r6,r3,8111eab4 <memchr+0x34>
8111eaa0:	00001806 	br	8111eb04 <memchr+0x84>
8111eaa4:	10001526 	beq	r2,zero,8111eafc <memchr+0x7c>
8111eaa8:	20c00003 	ldbu	r3,0(r4)
8111eaac:	10bfffc4 	addi	r2,r2,-1
8111eab0:	30c01426 	beq	r6,r3,8111eb04 <memchr+0x84>
8111eab4:	21000044 	addi	r4,r4,1
8111eab8:	20c000cc 	andi	r3,r4,3
8111eabc:	183ff91e 	bne	r3,zero,8111eaa4 <__reset+0xfb0feaa4>
8111eac0:	020000c4 	movi	r8,3
8111eac4:	40801136 	bltu	r8,r2,8111eb0c <memchr+0x8c>
8111eac8:	10000c26 	beq	r2,zero,8111eafc <memchr+0x7c>
8111eacc:	20c00003 	ldbu	r3,0(r4)
8111ead0:	29403fcc 	andi	r5,r5,255
8111ead4:	28c00b26 	beq	r5,r3,8111eb04 <memchr+0x84>
8111ead8:	20c00044 	addi	r3,r4,1
8111eadc:	39803fcc 	andi	r6,r7,255
8111eae0:	2089883a 	add	r4,r4,r2
8111eae4:	00000306 	br	8111eaf4 <memchr+0x74>
8111eae8:	18c00044 	addi	r3,r3,1
8111eaec:	197fffc3 	ldbu	r5,-1(r3)
8111eaf0:	31400526 	beq	r6,r5,8111eb08 <memchr+0x88>
8111eaf4:	1805883a 	mov	r2,r3
8111eaf8:	20fffb1e 	bne	r4,r3,8111eae8 <__reset+0xfb0feae8>
8111eafc:	0005883a 	mov	r2,zero
8111eb00:	f800283a 	ret
8111eb04:	2005883a 	mov	r2,r4
8111eb08:	f800283a 	ret
8111eb0c:	28c03fcc 	andi	r3,r5,255
8111eb10:	1812923a 	slli	r9,r3,8
8111eb14:	02ffbff4 	movhi	r11,65279
8111eb18:	02a02074 	movhi	r10,32897
8111eb1c:	48d2b03a 	or	r9,r9,r3
8111eb20:	4806943a 	slli	r3,r9,16
8111eb24:	5affbfc4 	addi	r11,r11,-257
8111eb28:	52a02004 	addi	r10,r10,-32640
8111eb2c:	48d2b03a 	or	r9,r9,r3
8111eb30:	20c00017 	ldw	r3,0(r4)
8111eb34:	48c6f03a 	xor	r3,r9,r3
8111eb38:	1acd883a 	add	r6,r3,r11
8111eb3c:	00c6303a 	nor	r3,zero,r3
8111eb40:	30c6703a 	and	r3,r6,r3
8111eb44:	1a86703a 	and	r3,r3,r10
8111eb48:	183fe01e 	bne	r3,zero,8111eacc <__reset+0xfb0feacc>
8111eb4c:	10bfff04 	addi	r2,r2,-4
8111eb50:	21000104 	addi	r4,r4,4
8111eb54:	40bff636 	bltu	r8,r2,8111eb30 <__reset+0xfb0feb30>
8111eb58:	003fdb06 	br	8111eac8 <__reset+0xfb0feac8>
8111eb5c:	3005883a 	mov	r2,r6
8111eb60:	003fd706 	br	8111eac0 <__reset+0xfb0feac0>

8111eb64 <memmove>:
8111eb64:	2005883a 	mov	r2,r4
8111eb68:	29000b2e 	bgeu	r5,r4,8111eb98 <memmove+0x34>
8111eb6c:	298f883a 	add	r7,r5,r6
8111eb70:	21c0092e 	bgeu	r4,r7,8111eb98 <memmove+0x34>
8111eb74:	2187883a 	add	r3,r4,r6
8111eb78:	198bc83a 	sub	r5,r3,r6
8111eb7c:	30004826 	beq	r6,zero,8111eca0 <memmove+0x13c>
8111eb80:	39ffffc4 	addi	r7,r7,-1
8111eb84:	39000003 	ldbu	r4,0(r7)
8111eb88:	18ffffc4 	addi	r3,r3,-1
8111eb8c:	19000005 	stb	r4,0(r3)
8111eb90:	28fffb1e 	bne	r5,r3,8111eb80 <__reset+0xfb0feb80>
8111eb94:	f800283a 	ret
8111eb98:	00c003c4 	movi	r3,15
8111eb9c:	1980412e 	bgeu	r3,r6,8111eca4 <memmove+0x140>
8111eba0:	2886b03a 	or	r3,r5,r2
8111eba4:	18c000cc 	andi	r3,r3,3
8111eba8:	1800401e 	bne	r3,zero,8111ecac <memmove+0x148>
8111ebac:	33fffc04 	addi	r15,r6,-16
8111ebb0:	781ed13a 	srli	r15,r15,4
8111ebb4:	28c00104 	addi	r3,r5,4
8111ebb8:	13400104 	addi	r13,r2,4
8111ebbc:	781c913a 	slli	r14,r15,4
8111ebc0:	2b000204 	addi	r12,r5,8
8111ebc4:	12c00204 	addi	r11,r2,8
8111ebc8:	73800504 	addi	r14,r14,20
8111ebcc:	2a800304 	addi	r10,r5,12
8111ebd0:	12400304 	addi	r9,r2,12
8111ebd4:	2b9d883a 	add	r14,r5,r14
8111ebd8:	2811883a 	mov	r8,r5
8111ebdc:	100f883a 	mov	r7,r2
8111ebe0:	41000017 	ldw	r4,0(r8)
8111ebe4:	39c00404 	addi	r7,r7,16
8111ebe8:	18c00404 	addi	r3,r3,16
8111ebec:	393ffc15 	stw	r4,-16(r7)
8111ebf0:	193ffc17 	ldw	r4,-16(r3)
8111ebf4:	6b400404 	addi	r13,r13,16
8111ebf8:	5ac00404 	addi	r11,r11,16
8111ebfc:	693ffc15 	stw	r4,-16(r13)
8111ec00:	61000017 	ldw	r4,0(r12)
8111ec04:	4a400404 	addi	r9,r9,16
8111ec08:	42000404 	addi	r8,r8,16
8111ec0c:	593ffc15 	stw	r4,-16(r11)
8111ec10:	51000017 	ldw	r4,0(r10)
8111ec14:	63000404 	addi	r12,r12,16
8111ec18:	52800404 	addi	r10,r10,16
8111ec1c:	493ffc15 	stw	r4,-16(r9)
8111ec20:	1bbfef1e 	bne	r3,r14,8111ebe0 <__reset+0xfb0febe0>
8111ec24:	79000044 	addi	r4,r15,1
8111ec28:	2008913a 	slli	r4,r4,4
8111ec2c:	328003cc 	andi	r10,r6,15
8111ec30:	02c000c4 	movi	r11,3
8111ec34:	1107883a 	add	r3,r2,r4
8111ec38:	290b883a 	add	r5,r5,r4
8111ec3c:	5a801e2e 	bgeu	r11,r10,8111ecb8 <memmove+0x154>
8111ec40:	1813883a 	mov	r9,r3
8111ec44:	2811883a 	mov	r8,r5
8111ec48:	500f883a 	mov	r7,r10
8111ec4c:	41000017 	ldw	r4,0(r8)
8111ec50:	4a400104 	addi	r9,r9,4
8111ec54:	39ffff04 	addi	r7,r7,-4
8111ec58:	493fff15 	stw	r4,-4(r9)
8111ec5c:	42000104 	addi	r8,r8,4
8111ec60:	59fffa36 	bltu	r11,r7,8111ec4c <__reset+0xfb0fec4c>
8111ec64:	513fff04 	addi	r4,r10,-4
8111ec68:	2008d0ba 	srli	r4,r4,2
8111ec6c:	318000cc 	andi	r6,r6,3
8111ec70:	21000044 	addi	r4,r4,1
8111ec74:	2109883a 	add	r4,r4,r4
8111ec78:	2109883a 	add	r4,r4,r4
8111ec7c:	1907883a 	add	r3,r3,r4
8111ec80:	290b883a 	add	r5,r5,r4
8111ec84:	30000b26 	beq	r6,zero,8111ecb4 <memmove+0x150>
8111ec88:	198d883a 	add	r6,r3,r6
8111ec8c:	29c00003 	ldbu	r7,0(r5)
8111ec90:	18c00044 	addi	r3,r3,1
8111ec94:	29400044 	addi	r5,r5,1
8111ec98:	19ffffc5 	stb	r7,-1(r3)
8111ec9c:	19bffb1e 	bne	r3,r6,8111ec8c <__reset+0xfb0fec8c>
8111eca0:	f800283a 	ret
8111eca4:	1007883a 	mov	r3,r2
8111eca8:	003ff606 	br	8111ec84 <__reset+0xfb0fec84>
8111ecac:	1007883a 	mov	r3,r2
8111ecb0:	003ff506 	br	8111ec88 <__reset+0xfb0fec88>
8111ecb4:	f800283a 	ret
8111ecb8:	500d883a 	mov	r6,r10
8111ecbc:	003ff106 	br	8111ec84 <__reset+0xfb0fec84>

8111ecc0 <_Balloc>:
8111ecc0:	defffc04 	addi	sp,sp,-16
8111ecc4:	de00012e 	bgeu	sp,et,8111eccc <_Balloc+0xc>
8111ecc8:	003b68fa 	trap	3
8111eccc:	20801317 	ldw	r2,76(r4)
8111ecd0:	dc400115 	stw	r17,4(sp)
8111ecd4:	dc000015 	stw	r16,0(sp)
8111ecd8:	dfc00315 	stw	ra,12(sp)
8111ecdc:	dc800215 	stw	r18,8(sp)
8111ece0:	2023883a 	mov	r17,r4
8111ece4:	2821883a 	mov	r16,r5
8111ece8:	10000f26 	beq	r2,zero,8111ed28 <_Balloc+0x68>
8111ecec:	8407883a 	add	r3,r16,r16
8111ecf0:	18c7883a 	add	r3,r3,r3
8111ecf4:	10c7883a 	add	r3,r2,r3
8111ecf8:	18800017 	ldw	r2,0(r3)
8111ecfc:	10001126 	beq	r2,zero,8111ed44 <_Balloc+0x84>
8111ed00:	11000017 	ldw	r4,0(r2)
8111ed04:	19000015 	stw	r4,0(r3)
8111ed08:	10000415 	stw	zero,16(r2)
8111ed0c:	10000315 	stw	zero,12(r2)
8111ed10:	dfc00317 	ldw	ra,12(sp)
8111ed14:	dc800217 	ldw	r18,8(sp)
8111ed18:	dc400117 	ldw	r17,4(sp)
8111ed1c:	dc000017 	ldw	r16,0(sp)
8111ed20:	dec00404 	addi	sp,sp,16
8111ed24:	f800283a 	ret
8111ed28:	01800844 	movi	r6,33
8111ed2c:	01400104 	movi	r5,4
8111ed30:	11251e80 	call	811251e8 <_calloc_r>
8111ed34:	88801315 	stw	r2,76(r17)
8111ed38:	103fec1e 	bne	r2,zero,8111ecec <__reset+0xfb0fecec>
8111ed3c:	0005883a 	mov	r2,zero
8111ed40:	003ff306 	br	8111ed10 <__reset+0xfb0fed10>
8111ed44:	01400044 	movi	r5,1
8111ed48:	2c24983a 	sll	r18,r5,r16
8111ed4c:	8809883a 	mov	r4,r17
8111ed50:	91800144 	addi	r6,r18,5
8111ed54:	318d883a 	add	r6,r6,r6
8111ed58:	318d883a 	add	r6,r6,r6
8111ed5c:	11251e80 	call	811251e8 <_calloc_r>
8111ed60:	103ff626 	beq	r2,zero,8111ed3c <__reset+0xfb0fed3c>
8111ed64:	14000115 	stw	r16,4(r2)
8111ed68:	14800215 	stw	r18,8(r2)
8111ed6c:	003fe606 	br	8111ed08 <__reset+0xfb0fed08>

8111ed70 <_Bfree>:
8111ed70:	28000826 	beq	r5,zero,8111ed94 <_Bfree+0x24>
8111ed74:	28c00117 	ldw	r3,4(r5)
8111ed78:	20801317 	ldw	r2,76(r4)
8111ed7c:	18c7883a 	add	r3,r3,r3
8111ed80:	18c7883a 	add	r3,r3,r3
8111ed84:	10c5883a 	add	r2,r2,r3
8111ed88:	10c00017 	ldw	r3,0(r2)
8111ed8c:	28c00015 	stw	r3,0(r5)
8111ed90:	11400015 	stw	r5,0(r2)
8111ed94:	f800283a 	ret

8111ed98 <__multadd>:
8111ed98:	defffa04 	addi	sp,sp,-24
8111ed9c:	de00012e 	bgeu	sp,et,8111eda4 <__multadd+0xc>
8111eda0:	003b68fa 	trap	3
8111eda4:	0011883a 	mov	r8,zero
8111eda8:	dc800315 	stw	r18,12(sp)
8111edac:	dc400215 	stw	r17,8(sp)
8111edb0:	dc000115 	stw	r16,4(sp)
8111edb4:	2823883a 	mov	r17,r5
8111edb8:	2c000417 	ldw	r16,16(r5)
8111edbc:	dfc00515 	stw	ra,20(sp)
8111edc0:	dcc00415 	stw	r19,16(sp)
8111edc4:	2025883a 	mov	r18,r4
8111edc8:	29400504 	addi	r5,r5,20
8111edcc:	28c00017 	ldw	r3,0(r5)
8111edd0:	29400104 	addi	r5,r5,4
8111edd4:	42000044 	addi	r8,r8,1
8111edd8:	18bfffcc 	andi	r2,r3,65535
8111eddc:	1185383a 	mul	r2,r2,r6
8111ede0:	1806d43a 	srli	r3,r3,16
8111ede4:	11cf883a 	add	r7,r2,r7
8111ede8:	3808d43a 	srli	r4,r7,16
8111edec:	1987383a 	mul	r3,r3,r6
8111edf0:	38bfffcc 	andi	r2,r7,65535
8111edf4:	1907883a 	add	r3,r3,r4
8111edf8:	1808943a 	slli	r4,r3,16
8111edfc:	180ed43a 	srli	r7,r3,16
8111ee00:	2085883a 	add	r2,r4,r2
8111ee04:	28bfff15 	stw	r2,-4(r5)
8111ee08:	443ff016 	blt	r8,r16,8111edcc <__reset+0xfb0fedcc>
8111ee0c:	38000926 	beq	r7,zero,8111ee34 <__multadd+0x9c>
8111ee10:	88800217 	ldw	r2,8(r17)
8111ee14:	80800f0e 	bge	r16,r2,8111ee54 <__multadd+0xbc>
8111ee18:	80800144 	addi	r2,r16,5
8111ee1c:	1085883a 	add	r2,r2,r2
8111ee20:	1085883a 	add	r2,r2,r2
8111ee24:	8885883a 	add	r2,r17,r2
8111ee28:	11c00015 	stw	r7,0(r2)
8111ee2c:	84000044 	addi	r16,r16,1
8111ee30:	8c000415 	stw	r16,16(r17)
8111ee34:	8805883a 	mov	r2,r17
8111ee38:	dfc00517 	ldw	ra,20(sp)
8111ee3c:	dcc00417 	ldw	r19,16(sp)
8111ee40:	dc800317 	ldw	r18,12(sp)
8111ee44:	dc400217 	ldw	r17,8(sp)
8111ee48:	dc000117 	ldw	r16,4(sp)
8111ee4c:	dec00604 	addi	sp,sp,24
8111ee50:	f800283a 	ret
8111ee54:	89400117 	ldw	r5,4(r17)
8111ee58:	9009883a 	mov	r4,r18
8111ee5c:	d9c00015 	stw	r7,0(sp)
8111ee60:	29400044 	addi	r5,r5,1
8111ee64:	111ecc00 	call	8111ecc0 <_Balloc>
8111ee68:	89800417 	ldw	r6,16(r17)
8111ee6c:	89400304 	addi	r5,r17,12
8111ee70:	11000304 	addi	r4,r2,12
8111ee74:	31800084 	addi	r6,r6,2
8111ee78:	318d883a 	add	r6,r6,r6
8111ee7c:	318d883a 	add	r6,r6,r6
8111ee80:	1027883a 	mov	r19,r2
8111ee84:	1114a700 	call	81114a70 <memcpy>
8111ee88:	d9c00017 	ldw	r7,0(sp)
8111ee8c:	88000a26 	beq	r17,zero,8111eeb8 <__multadd+0x120>
8111ee90:	88c00117 	ldw	r3,4(r17)
8111ee94:	90801317 	ldw	r2,76(r18)
8111ee98:	18c7883a 	add	r3,r3,r3
8111ee9c:	18c7883a 	add	r3,r3,r3
8111eea0:	10c5883a 	add	r2,r2,r3
8111eea4:	10c00017 	ldw	r3,0(r2)
8111eea8:	88c00015 	stw	r3,0(r17)
8111eeac:	14400015 	stw	r17,0(r2)
8111eeb0:	9823883a 	mov	r17,r19
8111eeb4:	003fd806 	br	8111ee18 <__reset+0xfb0fee18>
8111eeb8:	9823883a 	mov	r17,r19
8111eebc:	003fd606 	br	8111ee18 <__reset+0xfb0fee18>

8111eec0 <__s2b>:
8111eec0:	defff904 	addi	sp,sp,-28
8111eec4:	de00012e 	bgeu	sp,et,8111eecc <__s2b+0xc>
8111eec8:	003b68fa 	trap	3
8111eecc:	dc400115 	stw	r17,4(sp)
8111eed0:	dc000015 	stw	r16,0(sp)
8111eed4:	2023883a 	mov	r17,r4
8111eed8:	2821883a 	mov	r16,r5
8111eedc:	39000204 	addi	r4,r7,8
8111eee0:	01400244 	movi	r5,9
8111eee4:	dcc00315 	stw	r19,12(sp)
8111eee8:	dc800215 	stw	r18,8(sp)
8111eeec:	dfc00615 	stw	ra,24(sp)
8111eef0:	dd400515 	stw	r21,20(sp)
8111eef4:	dd000415 	stw	r20,16(sp)
8111eef8:	3825883a 	mov	r18,r7
8111eefc:	3027883a 	mov	r19,r6
8111ef00:	1126f800 	call	81126f80 <__divsi3>
8111ef04:	00c00044 	movi	r3,1
8111ef08:	000b883a 	mov	r5,zero
8111ef0c:	1880030e 	bge	r3,r2,8111ef1c <__s2b+0x5c>
8111ef10:	18c7883a 	add	r3,r3,r3
8111ef14:	29400044 	addi	r5,r5,1
8111ef18:	18bffd16 	blt	r3,r2,8111ef10 <__reset+0xfb0fef10>
8111ef1c:	8809883a 	mov	r4,r17
8111ef20:	111ecc00 	call	8111ecc0 <_Balloc>
8111ef24:	d8c00717 	ldw	r3,28(sp)
8111ef28:	10c00515 	stw	r3,20(r2)
8111ef2c:	00c00044 	movi	r3,1
8111ef30:	10c00415 	stw	r3,16(r2)
8111ef34:	00c00244 	movi	r3,9
8111ef38:	1cc0210e 	bge	r3,r19,8111efc0 <__s2b+0x100>
8111ef3c:	80eb883a 	add	r21,r16,r3
8111ef40:	a829883a 	mov	r20,r21
8111ef44:	84e1883a 	add	r16,r16,r19
8111ef48:	a1c00007 	ldb	r7,0(r20)
8111ef4c:	01800284 	movi	r6,10
8111ef50:	a5000044 	addi	r20,r20,1
8111ef54:	100b883a 	mov	r5,r2
8111ef58:	39fff404 	addi	r7,r7,-48
8111ef5c:	8809883a 	mov	r4,r17
8111ef60:	111ed980 	call	8111ed98 <__multadd>
8111ef64:	a43ff81e 	bne	r20,r16,8111ef48 <__reset+0xfb0fef48>
8111ef68:	ace1883a 	add	r16,r21,r19
8111ef6c:	843ffe04 	addi	r16,r16,-8
8111ef70:	9c800a0e 	bge	r19,r18,8111ef9c <__s2b+0xdc>
8111ef74:	94e5c83a 	sub	r18,r18,r19
8111ef78:	84a5883a 	add	r18,r16,r18
8111ef7c:	81c00007 	ldb	r7,0(r16)
8111ef80:	01800284 	movi	r6,10
8111ef84:	84000044 	addi	r16,r16,1
8111ef88:	100b883a 	mov	r5,r2
8111ef8c:	39fff404 	addi	r7,r7,-48
8111ef90:	8809883a 	mov	r4,r17
8111ef94:	111ed980 	call	8111ed98 <__multadd>
8111ef98:	84bff81e 	bne	r16,r18,8111ef7c <__reset+0xfb0fef7c>
8111ef9c:	dfc00617 	ldw	ra,24(sp)
8111efa0:	dd400517 	ldw	r21,20(sp)
8111efa4:	dd000417 	ldw	r20,16(sp)
8111efa8:	dcc00317 	ldw	r19,12(sp)
8111efac:	dc800217 	ldw	r18,8(sp)
8111efb0:	dc400117 	ldw	r17,4(sp)
8111efb4:	dc000017 	ldw	r16,0(sp)
8111efb8:	dec00704 	addi	sp,sp,28
8111efbc:	f800283a 	ret
8111efc0:	84000284 	addi	r16,r16,10
8111efc4:	1827883a 	mov	r19,r3
8111efc8:	003fe906 	br	8111ef70 <__reset+0xfb0fef70>

8111efcc <__hi0bits>:
8111efcc:	20bfffec 	andhi	r2,r4,65535
8111efd0:	1000141e 	bne	r2,zero,8111f024 <__hi0bits+0x58>
8111efd4:	2008943a 	slli	r4,r4,16
8111efd8:	00800404 	movi	r2,16
8111efdc:	20ffc02c 	andhi	r3,r4,65280
8111efe0:	1800021e 	bne	r3,zero,8111efec <__hi0bits+0x20>
8111efe4:	2008923a 	slli	r4,r4,8
8111efe8:	10800204 	addi	r2,r2,8
8111efec:	20fc002c 	andhi	r3,r4,61440
8111eff0:	1800021e 	bne	r3,zero,8111effc <__hi0bits+0x30>
8111eff4:	2008913a 	slli	r4,r4,4
8111eff8:	10800104 	addi	r2,r2,4
8111effc:	20f0002c 	andhi	r3,r4,49152
8111f000:	1800031e 	bne	r3,zero,8111f010 <__hi0bits+0x44>
8111f004:	2109883a 	add	r4,r4,r4
8111f008:	10800084 	addi	r2,r2,2
8111f00c:	2109883a 	add	r4,r4,r4
8111f010:	20000316 	blt	r4,zero,8111f020 <__hi0bits+0x54>
8111f014:	2110002c 	andhi	r4,r4,16384
8111f018:	2000041e 	bne	r4,zero,8111f02c <__hi0bits+0x60>
8111f01c:	00800804 	movi	r2,32
8111f020:	f800283a 	ret
8111f024:	0005883a 	mov	r2,zero
8111f028:	003fec06 	br	8111efdc <__reset+0xfb0fefdc>
8111f02c:	10800044 	addi	r2,r2,1
8111f030:	f800283a 	ret

8111f034 <__lo0bits>:
8111f034:	20c00017 	ldw	r3,0(r4)
8111f038:	188001cc 	andi	r2,r3,7
8111f03c:	10000826 	beq	r2,zero,8111f060 <__lo0bits+0x2c>
8111f040:	1880004c 	andi	r2,r3,1
8111f044:	1000211e 	bne	r2,zero,8111f0cc <__lo0bits+0x98>
8111f048:	1880008c 	andi	r2,r3,2
8111f04c:	1000211e 	bne	r2,zero,8111f0d4 <__lo0bits+0xa0>
8111f050:	1806d0ba 	srli	r3,r3,2
8111f054:	00800084 	movi	r2,2
8111f058:	20c00015 	stw	r3,0(r4)
8111f05c:	f800283a 	ret
8111f060:	18bfffcc 	andi	r2,r3,65535
8111f064:	10001326 	beq	r2,zero,8111f0b4 <__lo0bits+0x80>
8111f068:	0005883a 	mov	r2,zero
8111f06c:	19403fcc 	andi	r5,r3,255
8111f070:	2800021e 	bne	r5,zero,8111f07c <__lo0bits+0x48>
8111f074:	1806d23a 	srli	r3,r3,8
8111f078:	10800204 	addi	r2,r2,8
8111f07c:	194003cc 	andi	r5,r3,15
8111f080:	2800021e 	bne	r5,zero,8111f08c <__lo0bits+0x58>
8111f084:	1806d13a 	srli	r3,r3,4
8111f088:	10800104 	addi	r2,r2,4
8111f08c:	194000cc 	andi	r5,r3,3
8111f090:	2800021e 	bne	r5,zero,8111f09c <__lo0bits+0x68>
8111f094:	1806d0ba 	srli	r3,r3,2
8111f098:	10800084 	addi	r2,r2,2
8111f09c:	1940004c 	andi	r5,r3,1
8111f0a0:	2800081e 	bne	r5,zero,8111f0c4 <__lo0bits+0x90>
8111f0a4:	1806d07a 	srli	r3,r3,1
8111f0a8:	1800051e 	bne	r3,zero,8111f0c0 <__lo0bits+0x8c>
8111f0ac:	00800804 	movi	r2,32
8111f0b0:	f800283a 	ret
8111f0b4:	1806d43a 	srli	r3,r3,16
8111f0b8:	00800404 	movi	r2,16
8111f0bc:	003feb06 	br	8111f06c <__reset+0xfb0ff06c>
8111f0c0:	10800044 	addi	r2,r2,1
8111f0c4:	20c00015 	stw	r3,0(r4)
8111f0c8:	f800283a 	ret
8111f0cc:	0005883a 	mov	r2,zero
8111f0d0:	f800283a 	ret
8111f0d4:	1806d07a 	srli	r3,r3,1
8111f0d8:	00800044 	movi	r2,1
8111f0dc:	20c00015 	stw	r3,0(r4)
8111f0e0:	f800283a 	ret

8111f0e4 <__i2b>:
8111f0e4:	defffd04 	addi	sp,sp,-12
8111f0e8:	de00012e 	bgeu	sp,et,8111f0f0 <__i2b+0xc>
8111f0ec:	003b68fa 	trap	3
8111f0f0:	dc000015 	stw	r16,0(sp)
8111f0f4:	04000044 	movi	r16,1
8111f0f8:	dc400115 	stw	r17,4(sp)
8111f0fc:	2823883a 	mov	r17,r5
8111f100:	800b883a 	mov	r5,r16
8111f104:	dfc00215 	stw	ra,8(sp)
8111f108:	111ecc00 	call	8111ecc0 <_Balloc>
8111f10c:	14400515 	stw	r17,20(r2)
8111f110:	14000415 	stw	r16,16(r2)
8111f114:	dfc00217 	ldw	ra,8(sp)
8111f118:	dc400117 	ldw	r17,4(sp)
8111f11c:	dc000017 	ldw	r16,0(sp)
8111f120:	dec00304 	addi	sp,sp,12
8111f124:	f800283a 	ret

8111f128 <__multiply>:
8111f128:	defffa04 	addi	sp,sp,-24
8111f12c:	de00012e 	bgeu	sp,et,8111f134 <__multiply+0xc>
8111f130:	003b68fa 	trap	3
8111f134:	dcc00315 	stw	r19,12(sp)
8111f138:	dc800215 	stw	r18,8(sp)
8111f13c:	34c00417 	ldw	r19,16(r6)
8111f140:	2c800417 	ldw	r18,16(r5)
8111f144:	dd000415 	stw	r20,16(sp)
8111f148:	dc400115 	stw	r17,4(sp)
8111f14c:	dfc00515 	stw	ra,20(sp)
8111f150:	dc000015 	stw	r16,0(sp)
8111f154:	2829883a 	mov	r20,r5
8111f158:	3023883a 	mov	r17,r6
8111f15c:	94c0050e 	bge	r18,r19,8111f174 <__multiply+0x4c>
8111f160:	9007883a 	mov	r3,r18
8111f164:	3029883a 	mov	r20,r6
8111f168:	9825883a 	mov	r18,r19
8111f16c:	2823883a 	mov	r17,r5
8111f170:	1827883a 	mov	r19,r3
8111f174:	a0800217 	ldw	r2,8(r20)
8111f178:	94e1883a 	add	r16,r18,r19
8111f17c:	a1400117 	ldw	r5,4(r20)
8111f180:	1400010e 	bge	r2,r16,8111f188 <__multiply+0x60>
8111f184:	29400044 	addi	r5,r5,1
8111f188:	111ecc00 	call	8111ecc0 <_Balloc>
8111f18c:	8415883a 	add	r10,r16,r16
8111f190:	12c00504 	addi	r11,r2,20
8111f194:	5295883a 	add	r10,r10,r10
8111f198:	5a95883a 	add	r10,r11,r10
8111f19c:	5807883a 	mov	r3,r11
8111f1a0:	5a80032e 	bgeu	r11,r10,8111f1b0 <__multiply+0x88>
8111f1a4:	18000015 	stw	zero,0(r3)
8111f1a8:	18c00104 	addi	r3,r3,4
8111f1ac:	1abffd36 	bltu	r3,r10,8111f1a4 <__reset+0xfb0ff1a4>
8111f1b0:	9ce7883a 	add	r19,r19,r19
8111f1b4:	94a5883a 	add	r18,r18,r18
8111f1b8:	89800504 	addi	r6,r17,20
8111f1bc:	9ce7883a 	add	r19,r19,r19
8111f1c0:	a3400504 	addi	r13,r20,20
8111f1c4:	94a5883a 	add	r18,r18,r18
8111f1c8:	34d9883a 	add	r12,r6,r19
8111f1cc:	6c93883a 	add	r9,r13,r18
8111f1d0:	3300422e 	bgeu	r6,r12,8111f2dc <__multiply+0x1b4>
8111f1d4:	37c00017 	ldw	ra,0(r6)
8111f1d8:	fbffffcc 	andi	r15,ra,65535
8111f1dc:	78001b26 	beq	r15,zero,8111f24c <__multiply+0x124>
8111f1e0:	5811883a 	mov	r8,r11
8111f1e4:	681d883a 	mov	r14,r13
8111f1e8:	000f883a 	mov	r7,zero
8111f1ec:	71000017 	ldw	r4,0(r14)
8111f1f0:	40c00017 	ldw	r3,0(r8)
8111f1f4:	73800104 	addi	r14,r14,4
8111f1f8:	217fffcc 	andi	r5,r4,65535
8111f1fc:	2bcb383a 	mul	r5,r5,r15
8111f200:	2008d43a 	srli	r4,r4,16
8111f204:	1c7fffcc 	andi	r17,r3,65535
8111f208:	2c4b883a 	add	r5,r5,r17
8111f20c:	29cb883a 	add	r5,r5,r7
8111f210:	23c9383a 	mul	r4,r4,r15
8111f214:	1806d43a 	srli	r3,r3,16
8111f218:	280ed43a 	srli	r7,r5,16
8111f21c:	297fffcc 	andi	r5,r5,65535
8111f220:	20c7883a 	add	r3,r4,r3
8111f224:	19c7883a 	add	r3,r3,r7
8111f228:	1808943a 	slli	r4,r3,16
8111f22c:	4023883a 	mov	r17,r8
8111f230:	180ed43a 	srli	r7,r3,16
8111f234:	214ab03a 	or	r5,r4,r5
8111f238:	41400015 	stw	r5,0(r8)
8111f23c:	42000104 	addi	r8,r8,4
8111f240:	727fea36 	bltu	r14,r9,8111f1ec <__reset+0xfb0ff1ec>
8111f244:	89c00115 	stw	r7,4(r17)
8111f248:	37c00017 	ldw	ra,0(r6)
8111f24c:	f83ed43a 	srli	ra,ra,16
8111f250:	f8001f26 	beq	ra,zero,8111f2d0 <__multiply+0x1a8>
8111f254:	58c00017 	ldw	r3,0(r11)
8111f258:	681d883a 	mov	r14,r13
8111f25c:	581f883a 	mov	r15,r11
8111f260:	1811883a 	mov	r8,r3
8111f264:	5825883a 	mov	r18,r11
8111f268:	000f883a 	mov	r7,zero
8111f26c:	00000106 	br	8111f274 <__multiply+0x14c>
8111f270:	8825883a 	mov	r18,r17
8111f274:	7140000b 	ldhu	r5,0(r14)
8111f278:	4010d43a 	srli	r8,r8,16
8111f27c:	193fffcc 	andi	r4,r3,65535
8111f280:	2fcb383a 	mul	r5,r5,ra
8111f284:	7bc00104 	addi	r15,r15,4
8111f288:	73800104 	addi	r14,r14,4
8111f28c:	2a0b883a 	add	r5,r5,r8
8111f290:	29cb883a 	add	r5,r5,r7
8111f294:	2806943a 	slli	r3,r5,16
8111f298:	94400104 	addi	r17,r18,4
8111f29c:	280ad43a 	srli	r5,r5,16
8111f2a0:	1908b03a 	or	r4,r3,r4
8111f2a4:	793fff15 	stw	r4,-4(r15)
8111f2a8:	70ffff17 	ldw	r3,-4(r14)
8111f2ac:	8a000017 	ldw	r8,0(r17)
8111f2b0:	1806d43a 	srli	r3,r3,16
8111f2b4:	413fffcc 	andi	r4,r8,65535
8111f2b8:	1fc7383a 	mul	r3,r3,ra
8111f2bc:	1907883a 	add	r3,r3,r4
8111f2c0:	1947883a 	add	r3,r3,r5
8111f2c4:	180ed43a 	srli	r7,r3,16
8111f2c8:	727fe936 	bltu	r14,r9,8111f270 <__reset+0xfb0ff270>
8111f2cc:	90c00115 	stw	r3,4(r18)
8111f2d0:	31800104 	addi	r6,r6,4
8111f2d4:	5ac00104 	addi	r11,r11,4
8111f2d8:	333fbe36 	bltu	r6,r12,8111f1d4 <__reset+0xfb0ff1d4>
8111f2dc:	0400090e 	bge	zero,r16,8111f304 <__multiply+0x1dc>
8111f2e0:	50ffff17 	ldw	r3,-4(r10)
8111f2e4:	52bfff04 	addi	r10,r10,-4
8111f2e8:	18000326 	beq	r3,zero,8111f2f8 <__multiply+0x1d0>
8111f2ec:	00000506 	br	8111f304 <__multiply+0x1dc>
8111f2f0:	50c00017 	ldw	r3,0(r10)
8111f2f4:	1800031e 	bne	r3,zero,8111f304 <__multiply+0x1dc>
8111f2f8:	843fffc4 	addi	r16,r16,-1
8111f2fc:	52bfff04 	addi	r10,r10,-4
8111f300:	803ffb1e 	bne	r16,zero,8111f2f0 <__reset+0xfb0ff2f0>
8111f304:	14000415 	stw	r16,16(r2)
8111f308:	dfc00517 	ldw	ra,20(sp)
8111f30c:	dd000417 	ldw	r20,16(sp)
8111f310:	dcc00317 	ldw	r19,12(sp)
8111f314:	dc800217 	ldw	r18,8(sp)
8111f318:	dc400117 	ldw	r17,4(sp)
8111f31c:	dc000017 	ldw	r16,0(sp)
8111f320:	dec00604 	addi	sp,sp,24
8111f324:	f800283a 	ret

8111f328 <__pow5mult>:
8111f328:	defffa04 	addi	sp,sp,-24
8111f32c:	de00012e 	bgeu	sp,et,8111f334 <__pow5mult+0xc>
8111f330:	003b68fa 	trap	3
8111f334:	308000cc 	andi	r2,r6,3
8111f338:	dcc00315 	stw	r19,12(sp)
8111f33c:	dc000015 	stw	r16,0(sp)
8111f340:	dfc00515 	stw	ra,20(sp)
8111f344:	dd000415 	stw	r20,16(sp)
8111f348:	dc800215 	stw	r18,8(sp)
8111f34c:	dc400115 	stw	r17,4(sp)
8111f350:	3021883a 	mov	r16,r6
8111f354:	2027883a 	mov	r19,r4
8111f358:	10002f1e 	bne	r2,zero,8111f418 <__pow5mult+0xf0>
8111f35c:	2825883a 	mov	r18,r5
8111f360:	8021d0ba 	srai	r16,r16,2
8111f364:	80001a26 	beq	r16,zero,8111f3d0 <__pow5mult+0xa8>
8111f368:	9c401217 	ldw	r17,72(r19)
8111f36c:	8800061e 	bne	r17,zero,8111f388 <__pow5mult+0x60>
8111f370:	00003406 	br	8111f444 <__pow5mult+0x11c>
8111f374:	8021d07a 	srai	r16,r16,1
8111f378:	80001526 	beq	r16,zero,8111f3d0 <__pow5mult+0xa8>
8111f37c:	88800017 	ldw	r2,0(r17)
8111f380:	10001c26 	beq	r2,zero,8111f3f4 <__pow5mult+0xcc>
8111f384:	1023883a 	mov	r17,r2
8111f388:	8080004c 	andi	r2,r16,1
8111f38c:	103ff926 	beq	r2,zero,8111f374 <__reset+0xfb0ff374>
8111f390:	880d883a 	mov	r6,r17
8111f394:	900b883a 	mov	r5,r18
8111f398:	9809883a 	mov	r4,r19
8111f39c:	111f1280 	call	8111f128 <__multiply>
8111f3a0:	90001b26 	beq	r18,zero,8111f410 <__pow5mult+0xe8>
8111f3a4:	91000117 	ldw	r4,4(r18)
8111f3a8:	98c01317 	ldw	r3,76(r19)
8111f3ac:	8021d07a 	srai	r16,r16,1
8111f3b0:	2109883a 	add	r4,r4,r4
8111f3b4:	2109883a 	add	r4,r4,r4
8111f3b8:	1907883a 	add	r3,r3,r4
8111f3bc:	19000017 	ldw	r4,0(r3)
8111f3c0:	91000015 	stw	r4,0(r18)
8111f3c4:	1c800015 	stw	r18,0(r3)
8111f3c8:	1025883a 	mov	r18,r2
8111f3cc:	803feb1e 	bne	r16,zero,8111f37c <__reset+0xfb0ff37c>
8111f3d0:	9005883a 	mov	r2,r18
8111f3d4:	dfc00517 	ldw	ra,20(sp)
8111f3d8:	dd000417 	ldw	r20,16(sp)
8111f3dc:	dcc00317 	ldw	r19,12(sp)
8111f3e0:	dc800217 	ldw	r18,8(sp)
8111f3e4:	dc400117 	ldw	r17,4(sp)
8111f3e8:	dc000017 	ldw	r16,0(sp)
8111f3ec:	dec00604 	addi	sp,sp,24
8111f3f0:	f800283a 	ret
8111f3f4:	880d883a 	mov	r6,r17
8111f3f8:	880b883a 	mov	r5,r17
8111f3fc:	9809883a 	mov	r4,r19
8111f400:	111f1280 	call	8111f128 <__multiply>
8111f404:	88800015 	stw	r2,0(r17)
8111f408:	10000015 	stw	zero,0(r2)
8111f40c:	003fdd06 	br	8111f384 <__reset+0xfb0ff384>
8111f410:	1025883a 	mov	r18,r2
8111f414:	003fd706 	br	8111f374 <__reset+0xfb0ff374>
8111f418:	10bfffc4 	addi	r2,r2,-1
8111f41c:	1085883a 	add	r2,r2,r2
8111f420:	00e04534 	movhi	r3,33044
8111f424:	18c8ce04 	addi	r3,r3,9016
8111f428:	1085883a 	add	r2,r2,r2
8111f42c:	1885883a 	add	r2,r3,r2
8111f430:	11800017 	ldw	r6,0(r2)
8111f434:	000f883a 	mov	r7,zero
8111f438:	111ed980 	call	8111ed98 <__multadd>
8111f43c:	1025883a 	mov	r18,r2
8111f440:	003fc706 	br	8111f360 <__reset+0xfb0ff360>
8111f444:	05000044 	movi	r20,1
8111f448:	a00b883a 	mov	r5,r20
8111f44c:	9809883a 	mov	r4,r19
8111f450:	111ecc00 	call	8111ecc0 <_Balloc>
8111f454:	1023883a 	mov	r17,r2
8111f458:	00809c44 	movi	r2,625
8111f45c:	88800515 	stw	r2,20(r17)
8111f460:	8d000415 	stw	r20,16(r17)
8111f464:	9c401215 	stw	r17,72(r19)
8111f468:	88000015 	stw	zero,0(r17)
8111f46c:	003fc606 	br	8111f388 <__reset+0xfb0ff388>

8111f470 <__lshift>:
8111f470:	defff904 	addi	sp,sp,-28
8111f474:	de00012e 	bgeu	sp,et,8111f47c <__lshift+0xc>
8111f478:	003b68fa 	trap	3
8111f47c:	dd400515 	stw	r21,20(sp)
8111f480:	dcc00315 	stw	r19,12(sp)
8111f484:	302bd17a 	srai	r21,r6,5
8111f488:	2cc00417 	ldw	r19,16(r5)
8111f48c:	28800217 	ldw	r2,8(r5)
8111f490:	dd000415 	stw	r20,16(sp)
8111f494:	ace7883a 	add	r19,r21,r19
8111f498:	dc800215 	stw	r18,8(sp)
8111f49c:	dc400115 	stw	r17,4(sp)
8111f4a0:	dc000015 	stw	r16,0(sp)
8111f4a4:	dfc00615 	stw	ra,24(sp)
8111f4a8:	9c000044 	addi	r16,r19,1
8111f4ac:	2823883a 	mov	r17,r5
8111f4b0:	3029883a 	mov	r20,r6
8111f4b4:	2025883a 	mov	r18,r4
8111f4b8:	29400117 	ldw	r5,4(r5)
8111f4bc:	1400030e 	bge	r2,r16,8111f4cc <__lshift+0x5c>
8111f4c0:	1085883a 	add	r2,r2,r2
8111f4c4:	29400044 	addi	r5,r5,1
8111f4c8:	143ffd16 	blt	r2,r16,8111f4c0 <__reset+0xfb0ff4c0>
8111f4cc:	9009883a 	mov	r4,r18
8111f4d0:	111ecc00 	call	8111ecc0 <_Balloc>
8111f4d4:	10c00504 	addi	r3,r2,20
8111f4d8:	0540070e 	bge	zero,r21,8111f4f8 <__lshift+0x88>
8111f4dc:	ad6b883a 	add	r21,r21,r21
8111f4e0:	ad6b883a 	add	r21,r21,r21
8111f4e4:	1809883a 	mov	r4,r3
8111f4e8:	1d47883a 	add	r3,r3,r21
8111f4ec:	20000015 	stw	zero,0(r4)
8111f4f0:	21000104 	addi	r4,r4,4
8111f4f4:	193ffd1e 	bne	r3,r4,8111f4ec <__reset+0xfb0ff4ec>
8111f4f8:	8a000417 	ldw	r8,16(r17)
8111f4fc:	89000504 	addi	r4,r17,20
8111f500:	a18007cc 	andi	r6,r20,31
8111f504:	4211883a 	add	r8,r8,r8
8111f508:	4211883a 	add	r8,r8,r8
8111f50c:	2211883a 	add	r8,r4,r8
8111f510:	30002326 	beq	r6,zero,8111f5a0 <__lshift+0x130>
8111f514:	02400804 	movi	r9,32
8111f518:	4993c83a 	sub	r9,r9,r6
8111f51c:	000b883a 	mov	r5,zero
8111f520:	21c00017 	ldw	r7,0(r4)
8111f524:	1815883a 	mov	r10,r3
8111f528:	18c00104 	addi	r3,r3,4
8111f52c:	398e983a 	sll	r7,r7,r6
8111f530:	21000104 	addi	r4,r4,4
8111f534:	394ab03a 	or	r5,r7,r5
8111f538:	197fff15 	stw	r5,-4(r3)
8111f53c:	217fff17 	ldw	r5,-4(r4)
8111f540:	2a4ad83a 	srl	r5,r5,r9
8111f544:	223ff636 	bltu	r4,r8,8111f520 <__reset+0xfb0ff520>
8111f548:	51400115 	stw	r5,4(r10)
8111f54c:	28001a1e 	bne	r5,zero,8111f5b8 <__lshift+0x148>
8111f550:	843fffc4 	addi	r16,r16,-1
8111f554:	14000415 	stw	r16,16(r2)
8111f558:	88000826 	beq	r17,zero,8111f57c <__lshift+0x10c>
8111f55c:	89000117 	ldw	r4,4(r17)
8111f560:	90c01317 	ldw	r3,76(r18)
8111f564:	2109883a 	add	r4,r4,r4
8111f568:	2109883a 	add	r4,r4,r4
8111f56c:	1907883a 	add	r3,r3,r4
8111f570:	19000017 	ldw	r4,0(r3)
8111f574:	89000015 	stw	r4,0(r17)
8111f578:	1c400015 	stw	r17,0(r3)
8111f57c:	dfc00617 	ldw	ra,24(sp)
8111f580:	dd400517 	ldw	r21,20(sp)
8111f584:	dd000417 	ldw	r20,16(sp)
8111f588:	dcc00317 	ldw	r19,12(sp)
8111f58c:	dc800217 	ldw	r18,8(sp)
8111f590:	dc400117 	ldw	r17,4(sp)
8111f594:	dc000017 	ldw	r16,0(sp)
8111f598:	dec00704 	addi	sp,sp,28
8111f59c:	f800283a 	ret
8111f5a0:	21400017 	ldw	r5,0(r4)
8111f5a4:	18c00104 	addi	r3,r3,4
8111f5a8:	21000104 	addi	r4,r4,4
8111f5ac:	197fff15 	stw	r5,-4(r3)
8111f5b0:	223ffb36 	bltu	r4,r8,8111f5a0 <__reset+0xfb0ff5a0>
8111f5b4:	003fe606 	br	8111f550 <__reset+0xfb0ff550>
8111f5b8:	9c000084 	addi	r16,r19,2
8111f5bc:	003fe406 	br	8111f550 <__reset+0xfb0ff550>

8111f5c0 <__mcmp>:
8111f5c0:	20800417 	ldw	r2,16(r4)
8111f5c4:	28c00417 	ldw	r3,16(r5)
8111f5c8:	10c5c83a 	sub	r2,r2,r3
8111f5cc:	1000111e 	bne	r2,zero,8111f614 <__mcmp+0x54>
8111f5d0:	18c7883a 	add	r3,r3,r3
8111f5d4:	18c7883a 	add	r3,r3,r3
8111f5d8:	21000504 	addi	r4,r4,20
8111f5dc:	29400504 	addi	r5,r5,20
8111f5e0:	20c5883a 	add	r2,r4,r3
8111f5e4:	28cb883a 	add	r5,r5,r3
8111f5e8:	00000106 	br	8111f5f0 <__mcmp+0x30>
8111f5ec:	20800a2e 	bgeu	r4,r2,8111f618 <__mcmp+0x58>
8111f5f0:	10bfff04 	addi	r2,r2,-4
8111f5f4:	297fff04 	addi	r5,r5,-4
8111f5f8:	11800017 	ldw	r6,0(r2)
8111f5fc:	28c00017 	ldw	r3,0(r5)
8111f600:	30fffa26 	beq	r6,r3,8111f5ec <__reset+0xfb0ff5ec>
8111f604:	30c00236 	bltu	r6,r3,8111f610 <__mcmp+0x50>
8111f608:	00800044 	movi	r2,1
8111f60c:	f800283a 	ret
8111f610:	00bfffc4 	movi	r2,-1
8111f614:	f800283a 	ret
8111f618:	0005883a 	mov	r2,zero
8111f61c:	f800283a 	ret

8111f620 <__mdiff>:
8111f620:	defffa04 	addi	sp,sp,-24
8111f624:	de00012e 	bgeu	sp,et,8111f62c <__mdiff+0xc>
8111f628:	003b68fa 	trap	3
8111f62c:	28c00417 	ldw	r3,16(r5)
8111f630:	30800417 	ldw	r2,16(r6)
8111f634:	dcc00315 	stw	r19,12(sp)
8111f638:	dc800215 	stw	r18,8(sp)
8111f63c:	dfc00515 	stw	ra,20(sp)
8111f640:	dd000415 	stw	r20,16(sp)
8111f644:	dc400115 	stw	r17,4(sp)
8111f648:	dc000015 	stw	r16,0(sp)
8111f64c:	1887c83a 	sub	r3,r3,r2
8111f650:	2825883a 	mov	r18,r5
8111f654:	3027883a 	mov	r19,r6
8111f658:	1800141e 	bne	r3,zero,8111f6ac <__mdiff+0x8c>
8111f65c:	1085883a 	add	r2,r2,r2
8111f660:	1085883a 	add	r2,r2,r2
8111f664:	2a000504 	addi	r8,r5,20
8111f668:	34000504 	addi	r16,r6,20
8111f66c:	4087883a 	add	r3,r8,r2
8111f670:	8085883a 	add	r2,r16,r2
8111f674:	00000106 	br	8111f67c <__mdiff+0x5c>
8111f678:	40c0592e 	bgeu	r8,r3,8111f7e0 <__mdiff+0x1c0>
8111f67c:	18ffff04 	addi	r3,r3,-4
8111f680:	10bfff04 	addi	r2,r2,-4
8111f684:	19c00017 	ldw	r7,0(r3)
8111f688:	11400017 	ldw	r5,0(r2)
8111f68c:	397ffa26 	beq	r7,r5,8111f678 <__reset+0xfb0ff678>
8111f690:	3940592e 	bgeu	r7,r5,8111f7f8 <__mdiff+0x1d8>
8111f694:	9005883a 	mov	r2,r18
8111f698:	4023883a 	mov	r17,r8
8111f69c:	9825883a 	mov	r18,r19
8111f6a0:	05000044 	movi	r20,1
8111f6a4:	1027883a 	mov	r19,r2
8111f6a8:	00000406 	br	8111f6bc <__mdiff+0x9c>
8111f6ac:	18005616 	blt	r3,zero,8111f808 <__mdiff+0x1e8>
8111f6b0:	34400504 	addi	r17,r6,20
8111f6b4:	2c000504 	addi	r16,r5,20
8111f6b8:	0029883a 	mov	r20,zero
8111f6bc:	91400117 	ldw	r5,4(r18)
8111f6c0:	111ecc00 	call	8111ecc0 <_Balloc>
8111f6c4:	92400417 	ldw	r9,16(r18)
8111f6c8:	9b000417 	ldw	r12,16(r19)
8111f6cc:	12c00504 	addi	r11,r2,20
8111f6d0:	4a51883a 	add	r8,r9,r9
8111f6d4:	6319883a 	add	r12,r12,r12
8111f6d8:	4211883a 	add	r8,r8,r8
8111f6dc:	6319883a 	add	r12,r12,r12
8111f6e0:	15000315 	stw	r20,12(r2)
8111f6e4:	8211883a 	add	r8,r16,r8
8111f6e8:	8b19883a 	add	r12,r17,r12
8111f6ec:	0007883a 	mov	r3,zero
8111f6f0:	81400017 	ldw	r5,0(r16)
8111f6f4:	89c00017 	ldw	r7,0(r17)
8111f6f8:	59800104 	addi	r6,r11,4
8111f6fc:	293fffcc 	andi	r4,r5,65535
8111f700:	20c7883a 	add	r3,r4,r3
8111f704:	393fffcc 	andi	r4,r7,65535
8111f708:	1909c83a 	sub	r4,r3,r4
8111f70c:	280ad43a 	srli	r5,r5,16
8111f710:	380ed43a 	srli	r7,r7,16
8111f714:	2007d43a 	srai	r3,r4,16
8111f718:	213fffcc 	andi	r4,r4,65535
8111f71c:	29cbc83a 	sub	r5,r5,r7
8111f720:	28c7883a 	add	r3,r5,r3
8111f724:	180a943a 	slli	r5,r3,16
8111f728:	8c400104 	addi	r17,r17,4
8111f72c:	84000104 	addi	r16,r16,4
8111f730:	2908b03a 	or	r4,r5,r4
8111f734:	59000015 	stw	r4,0(r11)
8111f738:	1807d43a 	srai	r3,r3,16
8111f73c:	3015883a 	mov	r10,r6
8111f740:	3017883a 	mov	r11,r6
8111f744:	8b3fea36 	bltu	r17,r12,8111f6f0 <__reset+0xfb0ff6f0>
8111f748:	8200162e 	bgeu	r16,r8,8111f7a4 <__mdiff+0x184>
8111f74c:	8017883a 	mov	r11,r16
8111f750:	59400017 	ldw	r5,0(r11)
8111f754:	31800104 	addi	r6,r6,4
8111f758:	5ac00104 	addi	r11,r11,4
8111f75c:	293fffcc 	andi	r4,r5,65535
8111f760:	20c7883a 	add	r3,r4,r3
8111f764:	280ed43a 	srli	r7,r5,16
8111f768:	180bd43a 	srai	r5,r3,16
8111f76c:	193fffcc 	andi	r4,r3,65535
8111f770:	3947883a 	add	r3,r7,r5
8111f774:	180a943a 	slli	r5,r3,16
8111f778:	1807d43a 	srai	r3,r3,16
8111f77c:	2908b03a 	or	r4,r5,r4
8111f780:	313fff15 	stw	r4,-4(r6)
8111f784:	5a3ff236 	bltu	r11,r8,8111f750 <__reset+0xfb0ff750>
8111f788:	0406303a 	nor	r3,zero,r16
8111f78c:	1a07883a 	add	r3,r3,r8
8111f790:	1806d0ba 	srli	r3,r3,2
8111f794:	18c00044 	addi	r3,r3,1
8111f798:	18c7883a 	add	r3,r3,r3
8111f79c:	18c7883a 	add	r3,r3,r3
8111f7a0:	50d5883a 	add	r10,r10,r3
8111f7a4:	50ffff04 	addi	r3,r10,-4
8111f7a8:	2000041e 	bne	r4,zero,8111f7bc <__mdiff+0x19c>
8111f7ac:	18ffff04 	addi	r3,r3,-4
8111f7b0:	19000017 	ldw	r4,0(r3)
8111f7b4:	4a7fffc4 	addi	r9,r9,-1
8111f7b8:	203ffc26 	beq	r4,zero,8111f7ac <__reset+0xfb0ff7ac>
8111f7bc:	12400415 	stw	r9,16(r2)
8111f7c0:	dfc00517 	ldw	ra,20(sp)
8111f7c4:	dd000417 	ldw	r20,16(sp)
8111f7c8:	dcc00317 	ldw	r19,12(sp)
8111f7cc:	dc800217 	ldw	r18,8(sp)
8111f7d0:	dc400117 	ldw	r17,4(sp)
8111f7d4:	dc000017 	ldw	r16,0(sp)
8111f7d8:	dec00604 	addi	sp,sp,24
8111f7dc:	f800283a 	ret
8111f7e0:	000b883a 	mov	r5,zero
8111f7e4:	111ecc00 	call	8111ecc0 <_Balloc>
8111f7e8:	00c00044 	movi	r3,1
8111f7ec:	10c00415 	stw	r3,16(r2)
8111f7f0:	10000515 	stw	zero,20(r2)
8111f7f4:	003ff206 	br	8111f7c0 <__reset+0xfb0ff7c0>
8111f7f8:	8023883a 	mov	r17,r16
8111f7fc:	0029883a 	mov	r20,zero
8111f800:	4021883a 	mov	r16,r8
8111f804:	003fad06 	br	8111f6bc <__reset+0xfb0ff6bc>
8111f808:	9005883a 	mov	r2,r18
8111f80c:	94400504 	addi	r17,r18,20
8111f810:	9c000504 	addi	r16,r19,20
8111f814:	9825883a 	mov	r18,r19
8111f818:	05000044 	movi	r20,1
8111f81c:	1027883a 	mov	r19,r2
8111f820:	003fa606 	br	8111f6bc <__reset+0xfb0ff6bc>

8111f824 <__ulp>:
8111f824:	295ffc2c 	andhi	r5,r5,32752
8111f828:	00bf3034 	movhi	r2,64704
8111f82c:	2887883a 	add	r3,r5,r2
8111f830:	00c0020e 	bge	zero,r3,8111f83c <__ulp+0x18>
8111f834:	0005883a 	mov	r2,zero
8111f838:	f800283a 	ret
8111f83c:	00c7c83a 	sub	r3,zero,r3
8111f840:	1807d53a 	srai	r3,r3,20
8111f844:	008004c4 	movi	r2,19
8111f848:	10c00b0e 	bge	r2,r3,8111f878 <__ulp+0x54>
8111f84c:	18bffb04 	addi	r2,r3,-20
8111f850:	01000784 	movi	r4,30
8111f854:	0007883a 	mov	r3,zero
8111f858:	20800516 	blt	r4,r2,8111f870 <__ulp+0x4c>
8111f85c:	010007c4 	movi	r4,31
8111f860:	2089c83a 	sub	r4,r4,r2
8111f864:	00800044 	movi	r2,1
8111f868:	1104983a 	sll	r2,r2,r4
8111f86c:	f800283a 	ret
8111f870:	00800044 	movi	r2,1
8111f874:	f800283a 	ret
8111f878:	01400234 	movhi	r5,8
8111f87c:	28c7d83a 	sra	r3,r5,r3
8111f880:	0005883a 	mov	r2,zero
8111f884:	f800283a 	ret

8111f888 <__b2d>:
8111f888:	defffa04 	addi	sp,sp,-24
8111f88c:	de00012e 	bgeu	sp,et,8111f894 <__b2d+0xc>
8111f890:	003b68fa 	trap	3
8111f894:	dc000015 	stw	r16,0(sp)
8111f898:	24000417 	ldw	r16,16(r4)
8111f89c:	dc400115 	stw	r17,4(sp)
8111f8a0:	24400504 	addi	r17,r4,20
8111f8a4:	8421883a 	add	r16,r16,r16
8111f8a8:	8421883a 	add	r16,r16,r16
8111f8ac:	8c21883a 	add	r16,r17,r16
8111f8b0:	dc800215 	stw	r18,8(sp)
8111f8b4:	84bfff17 	ldw	r18,-4(r16)
8111f8b8:	dd000415 	stw	r20,16(sp)
8111f8bc:	dcc00315 	stw	r19,12(sp)
8111f8c0:	9009883a 	mov	r4,r18
8111f8c4:	2829883a 	mov	r20,r5
8111f8c8:	dfc00515 	stw	ra,20(sp)
8111f8cc:	111efcc0 	call	8111efcc <__hi0bits>
8111f8d0:	00c00804 	movi	r3,32
8111f8d4:	1889c83a 	sub	r4,r3,r2
8111f8d8:	a1000015 	stw	r4,0(r20)
8111f8dc:	01000284 	movi	r4,10
8111f8e0:	84ffff04 	addi	r19,r16,-4
8111f8e4:	20801216 	blt	r4,r2,8111f930 <__b2d+0xa8>
8111f8e8:	018002c4 	movi	r6,11
8111f8ec:	308dc83a 	sub	r6,r6,r2
8111f8f0:	9186d83a 	srl	r3,r18,r6
8111f8f4:	18cffc34 	orhi	r3,r3,16368
8111f8f8:	8cc0212e 	bgeu	r17,r19,8111f980 <__b2d+0xf8>
8111f8fc:	813ffe17 	ldw	r4,-8(r16)
8111f900:	218cd83a 	srl	r6,r4,r6
8111f904:	10800544 	addi	r2,r2,21
8111f908:	9084983a 	sll	r2,r18,r2
8111f90c:	1184b03a 	or	r2,r2,r6
8111f910:	dfc00517 	ldw	ra,20(sp)
8111f914:	dd000417 	ldw	r20,16(sp)
8111f918:	dcc00317 	ldw	r19,12(sp)
8111f91c:	dc800217 	ldw	r18,8(sp)
8111f920:	dc400117 	ldw	r17,4(sp)
8111f924:	dc000017 	ldw	r16,0(sp)
8111f928:	dec00604 	addi	sp,sp,24
8111f92c:	f800283a 	ret
8111f930:	8cc00f2e 	bgeu	r17,r19,8111f970 <__b2d+0xe8>
8111f934:	117ffd44 	addi	r5,r2,-11
8111f938:	80bffe17 	ldw	r2,-8(r16)
8111f93c:	28000e26 	beq	r5,zero,8111f978 <__b2d+0xf0>
8111f940:	1949c83a 	sub	r4,r3,r5
8111f944:	9164983a 	sll	r18,r18,r5
8111f948:	1106d83a 	srl	r3,r2,r4
8111f94c:	81bffe04 	addi	r6,r16,-8
8111f950:	948ffc34 	orhi	r18,r18,16368
8111f954:	90c6b03a 	or	r3,r18,r3
8111f958:	89800e2e 	bgeu	r17,r6,8111f994 <__b2d+0x10c>
8111f95c:	81bffd17 	ldw	r6,-12(r16)
8111f960:	1144983a 	sll	r2,r2,r5
8111f964:	310ad83a 	srl	r5,r6,r4
8111f968:	2884b03a 	or	r2,r5,r2
8111f96c:	003fe806 	br	8111f910 <__reset+0xfb0ff910>
8111f970:	10bffd44 	addi	r2,r2,-11
8111f974:	1000041e 	bne	r2,zero,8111f988 <__b2d+0x100>
8111f978:	90cffc34 	orhi	r3,r18,16368
8111f97c:	003fe406 	br	8111f910 <__reset+0xfb0ff910>
8111f980:	000d883a 	mov	r6,zero
8111f984:	003fdf06 	br	8111f904 <__reset+0xfb0ff904>
8111f988:	90a4983a 	sll	r18,r18,r2
8111f98c:	0005883a 	mov	r2,zero
8111f990:	003ff906 	br	8111f978 <__reset+0xfb0ff978>
8111f994:	1144983a 	sll	r2,r2,r5
8111f998:	003fdd06 	br	8111f910 <__reset+0xfb0ff910>

8111f99c <__d2b>:
8111f99c:	defff804 	addi	sp,sp,-32
8111f9a0:	de00012e 	bgeu	sp,et,8111f9a8 <__d2b+0xc>
8111f9a4:	003b68fa 	trap	3
8111f9a8:	dc000215 	stw	r16,8(sp)
8111f9ac:	3021883a 	mov	r16,r6
8111f9b0:	dc400315 	stw	r17,12(sp)
8111f9b4:	8022907a 	slli	r17,r16,1
8111f9b8:	dd000615 	stw	r20,24(sp)
8111f9bc:	2829883a 	mov	r20,r5
8111f9c0:	01400044 	movi	r5,1
8111f9c4:	dcc00515 	stw	r19,20(sp)
8111f9c8:	dc800415 	stw	r18,16(sp)
8111f9cc:	dfc00715 	stw	ra,28(sp)
8111f9d0:	3825883a 	mov	r18,r7
8111f9d4:	8822d57a 	srli	r17,r17,21
8111f9d8:	111ecc00 	call	8111ecc0 <_Balloc>
8111f9dc:	1027883a 	mov	r19,r2
8111f9e0:	00800434 	movhi	r2,16
8111f9e4:	10bfffc4 	addi	r2,r2,-1
8111f9e8:	808c703a 	and	r6,r16,r2
8111f9ec:	88000126 	beq	r17,zero,8111f9f4 <__d2b+0x58>
8111f9f0:	31800434 	orhi	r6,r6,16
8111f9f4:	d9800015 	stw	r6,0(sp)
8111f9f8:	a0002426 	beq	r20,zero,8111fa8c <__d2b+0xf0>
8111f9fc:	d9000104 	addi	r4,sp,4
8111fa00:	dd000115 	stw	r20,4(sp)
8111fa04:	111f0340 	call	8111f034 <__lo0bits>
8111fa08:	d8c00017 	ldw	r3,0(sp)
8111fa0c:	10002f1e 	bne	r2,zero,8111facc <__d2b+0x130>
8111fa10:	d9000117 	ldw	r4,4(sp)
8111fa14:	99000515 	stw	r4,20(r19)
8111fa18:	1821003a 	cmpeq	r16,r3,zero
8111fa1c:	01000084 	movi	r4,2
8111fa20:	2421c83a 	sub	r16,r4,r16
8111fa24:	98c00615 	stw	r3,24(r19)
8111fa28:	9c000415 	stw	r16,16(r19)
8111fa2c:	88001f1e 	bne	r17,zero,8111faac <__d2b+0x110>
8111fa30:	10bef384 	addi	r2,r2,-1074
8111fa34:	90800015 	stw	r2,0(r18)
8111fa38:	00900034 	movhi	r2,16384
8111fa3c:	10bfffc4 	addi	r2,r2,-1
8111fa40:	8085883a 	add	r2,r16,r2
8111fa44:	1085883a 	add	r2,r2,r2
8111fa48:	1085883a 	add	r2,r2,r2
8111fa4c:	9885883a 	add	r2,r19,r2
8111fa50:	11000517 	ldw	r4,20(r2)
8111fa54:	8020917a 	slli	r16,r16,5
8111fa58:	111efcc0 	call	8111efcc <__hi0bits>
8111fa5c:	d8c00817 	ldw	r3,32(sp)
8111fa60:	8085c83a 	sub	r2,r16,r2
8111fa64:	18800015 	stw	r2,0(r3)
8111fa68:	9805883a 	mov	r2,r19
8111fa6c:	dfc00717 	ldw	ra,28(sp)
8111fa70:	dd000617 	ldw	r20,24(sp)
8111fa74:	dcc00517 	ldw	r19,20(sp)
8111fa78:	dc800417 	ldw	r18,16(sp)
8111fa7c:	dc400317 	ldw	r17,12(sp)
8111fa80:	dc000217 	ldw	r16,8(sp)
8111fa84:	dec00804 	addi	sp,sp,32
8111fa88:	f800283a 	ret
8111fa8c:	d809883a 	mov	r4,sp
8111fa90:	111f0340 	call	8111f034 <__lo0bits>
8111fa94:	d8c00017 	ldw	r3,0(sp)
8111fa98:	04000044 	movi	r16,1
8111fa9c:	9c000415 	stw	r16,16(r19)
8111faa0:	98c00515 	stw	r3,20(r19)
8111faa4:	10800804 	addi	r2,r2,32
8111faa8:	883fe126 	beq	r17,zero,8111fa30 <__reset+0xfb0ffa30>
8111faac:	00c00d44 	movi	r3,53
8111fab0:	8c7ef344 	addi	r17,r17,-1075
8111fab4:	88a3883a 	add	r17,r17,r2
8111fab8:	1885c83a 	sub	r2,r3,r2
8111fabc:	d8c00817 	ldw	r3,32(sp)
8111fac0:	94400015 	stw	r17,0(r18)
8111fac4:	18800015 	stw	r2,0(r3)
8111fac8:	003fe706 	br	8111fa68 <__reset+0xfb0ffa68>
8111facc:	01000804 	movi	r4,32
8111fad0:	2089c83a 	sub	r4,r4,r2
8111fad4:	1908983a 	sll	r4,r3,r4
8111fad8:	d9400117 	ldw	r5,4(sp)
8111fadc:	1886d83a 	srl	r3,r3,r2
8111fae0:	2148b03a 	or	r4,r4,r5
8111fae4:	99000515 	stw	r4,20(r19)
8111fae8:	d8c00015 	stw	r3,0(sp)
8111faec:	003fca06 	br	8111fa18 <__reset+0xfb0ffa18>

8111faf0 <__ratio>:
8111faf0:	defff904 	addi	sp,sp,-28
8111faf4:	de00012e 	bgeu	sp,et,8111fafc <__ratio+0xc>
8111faf8:	003b68fa 	trap	3
8111fafc:	dc400315 	stw	r17,12(sp)
8111fb00:	2823883a 	mov	r17,r5
8111fb04:	d9400104 	addi	r5,sp,4
8111fb08:	dfc00615 	stw	ra,24(sp)
8111fb0c:	dcc00515 	stw	r19,20(sp)
8111fb10:	dc800415 	stw	r18,16(sp)
8111fb14:	2027883a 	mov	r19,r4
8111fb18:	dc000215 	stw	r16,8(sp)
8111fb1c:	111f8880 	call	8111f888 <__b2d>
8111fb20:	d80b883a 	mov	r5,sp
8111fb24:	8809883a 	mov	r4,r17
8111fb28:	1025883a 	mov	r18,r2
8111fb2c:	1821883a 	mov	r16,r3
8111fb30:	111f8880 	call	8111f888 <__b2d>
8111fb34:	8a000417 	ldw	r8,16(r17)
8111fb38:	99000417 	ldw	r4,16(r19)
8111fb3c:	d9400117 	ldw	r5,4(sp)
8111fb40:	2209c83a 	sub	r4,r4,r8
8111fb44:	2010917a 	slli	r8,r4,5
8111fb48:	d9000017 	ldw	r4,0(sp)
8111fb4c:	2909c83a 	sub	r4,r5,r4
8111fb50:	4109883a 	add	r4,r8,r4
8111fb54:	01000e0e 	bge	zero,r4,8111fb90 <__ratio+0xa0>
8111fb58:	2008953a 	slli	r4,r4,20
8111fb5c:	2421883a 	add	r16,r4,r16
8111fb60:	100d883a 	mov	r6,r2
8111fb64:	180f883a 	mov	r7,r3
8111fb68:	9009883a 	mov	r4,r18
8111fb6c:	800b883a 	mov	r5,r16
8111fb70:	1127be40 	call	81127be4 <__divdf3>
8111fb74:	dfc00617 	ldw	ra,24(sp)
8111fb78:	dcc00517 	ldw	r19,20(sp)
8111fb7c:	dc800417 	ldw	r18,16(sp)
8111fb80:	dc400317 	ldw	r17,12(sp)
8111fb84:	dc000217 	ldw	r16,8(sp)
8111fb88:	dec00704 	addi	sp,sp,28
8111fb8c:	f800283a 	ret
8111fb90:	2008953a 	slli	r4,r4,20
8111fb94:	1907c83a 	sub	r3,r3,r4
8111fb98:	003ff106 	br	8111fb60 <__reset+0xfb0ffb60>

8111fb9c <_mprec_log10>:
8111fb9c:	defffe04 	addi	sp,sp,-8
8111fba0:	de00012e 	bgeu	sp,et,8111fba8 <_mprec_log10+0xc>
8111fba4:	003b68fa 	trap	3
8111fba8:	008005c4 	movi	r2,23
8111fbac:	dc000015 	stw	r16,0(sp)
8111fbb0:	dfc00115 	stw	ra,4(sp)
8111fbb4:	2021883a 	mov	r16,r4
8111fbb8:	11000d0e 	bge	r2,r4,8111fbf0 <_mprec_log10+0x54>
8111fbbc:	0005883a 	mov	r2,zero
8111fbc0:	00cffc34 	movhi	r3,16368
8111fbc4:	843fffc4 	addi	r16,r16,-1
8111fbc8:	000d883a 	mov	r6,zero
8111fbcc:	01d00934 	movhi	r7,16420
8111fbd0:	1009883a 	mov	r4,r2
8111fbd4:	180b883a 	mov	r5,r3
8111fbd8:	1112e200 	call	81112e20 <__muldf3>
8111fbdc:	803ff91e 	bne	r16,zero,8111fbc4 <__reset+0xfb0ffbc4>
8111fbe0:	dfc00117 	ldw	ra,4(sp)
8111fbe4:	dc000017 	ldw	r16,0(sp)
8111fbe8:	dec00204 	addi	sp,sp,8
8111fbec:	f800283a 	ret
8111fbf0:	202090fa 	slli	r16,r4,3
8111fbf4:	00a04534 	movhi	r2,33044
8111fbf8:	1088e504 	addi	r2,r2,9108
8111fbfc:	1421883a 	add	r16,r2,r16
8111fc00:	80800017 	ldw	r2,0(r16)
8111fc04:	80c00117 	ldw	r3,4(r16)
8111fc08:	dfc00117 	ldw	ra,4(sp)
8111fc0c:	dc000017 	ldw	r16,0(sp)
8111fc10:	dec00204 	addi	sp,sp,8
8111fc14:	f800283a 	ret

8111fc18 <__copybits>:
8111fc18:	297fffc4 	addi	r5,r5,-1
8111fc1c:	280fd17a 	srai	r7,r5,5
8111fc20:	30c00417 	ldw	r3,16(r6)
8111fc24:	30800504 	addi	r2,r6,20
8111fc28:	39c00044 	addi	r7,r7,1
8111fc2c:	18c7883a 	add	r3,r3,r3
8111fc30:	39cf883a 	add	r7,r7,r7
8111fc34:	18c7883a 	add	r3,r3,r3
8111fc38:	39cf883a 	add	r7,r7,r7
8111fc3c:	10c7883a 	add	r3,r2,r3
8111fc40:	21cf883a 	add	r7,r4,r7
8111fc44:	10c00d2e 	bgeu	r2,r3,8111fc7c <__copybits+0x64>
8111fc48:	200b883a 	mov	r5,r4
8111fc4c:	12000017 	ldw	r8,0(r2)
8111fc50:	29400104 	addi	r5,r5,4
8111fc54:	10800104 	addi	r2,r2,4
8111fc58:	2a3fff15 	stw	r8,-4(r5)
8111fc5c:	10fffb36 	bltu	r2,r3,8111fc4c <__reset+0xfb0ffc4c>
8111fc60:	1985c83a 	sub	r2,r3,r6
8111fc64:	10bffac4 	addi	r2,r2,-21
8111fc68:	1004d0ba 	srli	r2,r2,2
8111fc6c:	10800044 	addi	r2,r2,1
8111fc70:	1085883a 	add	r2,r2,r2
8111fc74:	1085883a 	add	r2,r2,r2
8111fc78:	2089883a 	add	r4,r4,r2
8111fc7c:	21c0032e 	bgeu	r4,r7,8111fc8c <__copybits+0x74>
8111fc80:	20000015 	stw	zero,0(r4)
8111fc84:	21000104 	addi	r4,r4,4
8111fc88:	21fffd36 	bltu	r4,r7,8111fc80 <__reset+0xfb0ffc80>
8111fc8c:	f800283a 	ret

8111fc90 <__any_on>:
8111fc90:	20c00417 	ldw	r3,16(r4)
8111fc94:	2805d17a 	srai	r2,r5,5
8111fc98:	21000504 	addi	r4,r4,20
8111fc9c:	18800d0e 	bge	r3,r2,8111fcd4 <__any_on+0x44>
8111fca0:	18c7883a 	add	r3,r3,r3
8111fca4:	18c7883a 	add	r3,r3,r3
8111fca8:	20c7883a 	add	r3,r4,r3
8111fcac:	20c0192e 	bgeu	r4,r3,8111fd14 <__any_on+0x84>
8111fcb0:	18bfff17 	ldw	r2,-4(r3)
8111fcb4:	18ffff04 	addi	r3,r3,-4
8111fcb8:	1000041e 	bne	r2,zero,8111fccc <__any_on+0x3c>
8111fcbc:	20c0142e 	bgeu	r4,r3,8111fd10 <__any_on+0x80>
8111fcc0:	18ffff04 	addi	r3,r3,-4
8111fcc4:	19400017 	ldw	r5,0(r3)
8111fcc8:	283ffc26 	beq	r5,zero,8111fcbc <__reset+0xfb0ffcbc>
8111fccc:	00800044 	movi	r2,1
8111fcd0:	f800283a 	ret
8111fcd4:	10c00a0e 	bge	r2,r3,8111fd00 <__any_on+0x70>
8111fcd8:	1085883a 	add	r2,r2,r2
8111fcdc:	1085883a 	add	r2,r2,r2
8111fce0:	294007cc 	andi	r5,r5,31
8111fce4:	2087883a 	add	r3,r4,r2
8111fce8:	283ff026 	beq	r5,zero,8111fcac <__reset+0xfb0ffcac>
8111fcec:	19800017 	ldw	r6,0(r3)
8111fcf0:	3144d83a 	srl	r2,r6,r5
8111fcf4:	114a983a 	sll	r5,r2,r5
8111fcf8:	317ff41e 	bne	r6,r5,8111fccc <__reset+0xfb0ffccc>
8111fcfc:	003feb06 	br	8111fcac <__reset+0xfb0ffcac>
8111fd00:	1085883a 	add	r2,r2,r2
8111fd04:	1085883a 	add	r2,r2,r2
8111fd08:	2087883a 	add	r3,r4,r2
8111fd0c:	003fe706 	br	8111fcac <__reset+0xfb0ffcac>
8111fd10:	f800283a 	ret
8111fd14:	0005883a 	mov	r2,zero
8111fd18:	f800283a 	ret

8111fd1c <_read_r>:
8111fd1c:	defffd04 	addi	sp,sp,-12
8111fd20:	de00012e 	bgeu	sp,et,8111fd28 <_read_r+0xc>
8111fd24:	003b68fa 	trap	3
8111fd28:	2805883a 	mov	r2,r5
8111fd2c:	dc000015 	stw	r16,0(sp)
8111fd30:	04204534 	movhi	r16,33044
8111fd34:	dc400115 	stw	r17,4(sp)
8111fd38:	300b883a 	mov	r5,r6
8111fd3c:	8412e404 	addi	r16,r16,19344
8111fd40:	2023883a 	mov	r17,r4
8111fd44:	380d883a 	mov	r6,r7
8111fd48:	1009883a 	mov	r4,r2
8111fd4c:	dfc00215 	stw	ra,8(sp)
8111fd50:	80000015 	stw	zero,0(r16)
8111fd54:	112a8d80 	call	8112a8d8 <read>
8111fd58:	00ffffc4 	movi	r3,-1
8111fd5c:	10c00526 	beq	r2,r3,8111fd74 <_read_r+0x58>
8111fd60:	dfc00217 	ldw	ra,8(sp)
8111fd64:	dc400117 	ldw	r17,4(sp)
8111fd68:	dc000017 	ldw	r16,0(sp)
8111fd6c:	dec00304 	addi	sp,sp,12
8111fd70:	f800283a 	ret
8111fd74:	80c00017 	ldw	r3,0(r16)
8111fd78:	183ff926 	beq	r3,zero,8111fd60 <__reset+0xfb0ffd60>
8111fd7c:	88c00015 	stw	r3,0(r17)
8111fd80:	003ff706 	br	8111fd60 <__reset+0xfb0ffd60>

8111fd84 <_realloc_r>:
8111fd84:	defff604 	addi	sp,sp,-40
8111fd88:	de00012e 	bgeu	sp,et,8111fd90 <_realloc_r+0xc>
8111fd8c:	003b68fa 	trap	3
8111fd90:	dc800215 	stw	r18,8(sp)
8111fd94:	dfc00915 	stw	ra,36(sp)
8111fd98:	df000815 	stw	fp,32(sp)
8111fd9c:	ddc00715 	stw	r23,28(sp)
8111fda0:	dd800615 	stw	r22,24(sp)
8111fda4:	dd400515 	stw	r21,20(sp)
8111fda8:	dd000415 	stw	r20,16(sp)
8111fdac:	dcc00315 	stw	r19,12(sp)
8111fdb0:	dc400115 	stw	r17,4(sp)
8111fdb4:	dc000015 	stw	r16,0(sp)
8111fdb8:	3025883a 	mov	r18,r6
8111fdbc:	2800b726 	beq	r5,zero,8112009c <_realloc_r+0x318>
8111fdc0:	282b883a 	mov	r21,r5
8111fdc4:	2029883a 	mov	r20,r4
8111fdc8:	112b0b80 	call	8112b0b8 <__malloc_lock>
8111fdcc:	a8bfff17 	ldw	r2,-4(r21)
8111fdd0:	043fff04 	movi	r16,-4
8111fdd4:	90c002c4 	addi	r3,r18,11
8111fdd8:	01000584 	movi	r4,22
8111fddc:	acfffe04 	addi	r19,r21,-8
8111fde0:	1420703a 	and	r16,r2,r16
8111fde4:	20c0332e 	bgeu	r4,r3,8111feb4 <_realloc_r+0x130>
8111fde8:	047ffe04 	movi	r17,-8
8111fdec:	1c62703a 	and	r17,r3,r17
8111fdf0:	8807883a 	mov	r3,r17
8111fdf4:	88005816 	blt	r17,zero,8111ff58 <_realloc_r+0x1d4>
8111fdf8:	8c805736 	bltu	r17,r18,8111ff58 <_realloc_r+0x1d4>
8111fdfc:	80c0300e 	bge	r16,r3,8111fec0 <_realloc_r+0x13c>
8111fe00:	07204534 	movhi	fp,33044
8111fe04:	e70c4504 	addi	fp,fp,12564
8111fe08:	e1c00217 	ldw	r7,8(fp)
8111fe0c:	9c09883a 	add	r4,r19,r16
8111fe10:	22000117 	ldw	r8,4(r4)
8111fe14:	21c06326 	beq	r4,r7,8111ffa4 <_realloc_r+0x220>
8111fe18:	017fff84 	movi	r5,-2
8111fe1c:	414a703a 	and	r5,r8,r5
8111fe20:	214b883a 	add	r5,r4,r5
8111fe24:	29800117 	ldw	r6,4(r5)
8111fe28:	3180004c 	andi	r6,r6,1
8111fe2c:	30003f26 	beq	r6,zero,8111ff2c <_realloc_r+0x1a8>
8111fe30:	1080004c 	andi	r2,r2,1
8111fe34:	10008326 	beq	r2,zero,81120044 <_realloc_r+0x2c0>
8111fe38:	900b883a 	mov	r5,r18
8111fe3c:	a009883a 	mov	r4,r20
8111fe40:	111425c0 	call	8111425c <_malloc_r>
8111fe44:	1025883a 	mov	r18,r2
8111fe48:	10011e26 	beq	r2,zero,811202c4 <_realloc_r+0x540>
8111fe4c:	a93fff17 	ldw	r4,-4(r21)
8111fe50:	10fffe04 	addi	r3,r2,-8
8111fe54:	00bfff84 	movi	r2,-2
8111fe58:	2084703a 	and	r2,r4,r2
8111fe5c:	9885883a 	add	r2,r19,r2
8111fe60:	1880ee26 	beq	r3,r2,8112021c <_realloc_r+0x498>
8111fe64:	81bfff04 	addi	r6,r16,-4
8111fe68:	00800904 	movi	r2,36
8111fe6c:	1180b836 	bltu	r2,r6,81120150 <_realloc_r+0x3cc>
8111fe70:	00c004c4 	movi	r3,19
8111fe74:	19809636 	bltu	r3,r6,811200d0 <_realloc_r+0x34c>
8111fe78:	9005883a 	mov	r2,r18
8111fe7c:	a807883a 	mov	r3,r21
8111fe80:	19000017 	ldw	r4,0(r3)
8111fe84:	11000015 	stw	r4,0(r2)
8111fe88:	19000117 	ldw	r4,4(r3)
8111fe8c:	11000115 	stw	r4,4(r2)
8111fe90:	18c00217 	ldw	r3,8(r3)
8111fe94:	10c00215 	stw	r3,8(r2)
8111fe98:	a80b883a 	mov	r5,r21
8111fe9c:	a009883a 	mov	r4,r20
8111fea0:	111dcf00 	call	8111dcf0 <_free_r>
8111fea4:	a009883a 	mov	r4,r20
8111fea8:	112b1e00 	call	8112b1e0 <__malloc_unlock>
8111feac:	9005883a 	mov	r2,r18
8111feb0:	00001206 	br	8111fefc <_realloc_r+0x178>
8111feb4:	00c00404 	movi	r3,16
8111feb8:	1823883a 	mov	r17,r3
8111febc:	003fce06 	br	8111fdf8 <__reset+0xfb0ffdf8>
8111fec0:	a825883a 	mov	r18,r21
8111fec4:	8445c83a 	sub	r2,r16,r17
8111fec8:	00c003c4 	movi	r3,15
8111fecc:	18802636 	bltu	r3,r2,8111ff68 <_realloc_r+0x1e4>
8111fed0:	99800117 	ldw	r6,4(r19)
8111fed4:	9c07883a 	add	r3,r19,r16
8111fed8:	3180004c 	andi	r6,r6,1
8111fedc:	3420b03a 	or	r16,r6,r16
8111fee0:	9c000115 	stw	r16,4(r19)
8111fee4:	18800117 	ldw	r2,4(r3)
8111fee8:	10800054 	ori	r2,r2,1
8111feec:	18800115 	stw	r2,4(r3)
8111fef0:	a009883a 	mov	r4,r20
8111fef4:	112b1e00 	call	8112b1e0 <__malloc_unlock>
8111fef8:	9005883a 	mov	r2,r18
8111fefc:	dfc00917 	ldw	ra,36(sp)
8111ff00:	df000817 	ldw	fp,32(sp)
8111ff04:	ddc00717 	ldw	r23,28(sp)
8111ff08:	dd800617 	ldw	r22,24(sp)
8111ff0c:	dd400517 	ldw	r21,20(sp)
8111ff10:	dd000417 	ldw	r20,16(sp)
8111ff14:	dcc00317 	ldw	r19,12(sp)
8111ff18:	dc800217 	ldw	r18,8(sp)
8111ff1c:	dc400117 	ldw	r17,4(sp)
8111ff20:	dc000017 	ldw	r16,0(sp)
8111ff24:	dec00a04 	addi	sp,sp,40
8111ff28:	f800283a 	ret
8111ff2c:	017fff04 	movi	r5,-4
8111ff30:	414a703a 	and	r5,r8,r5
8111ff34:	814d883a 	add	r6,r16,r5
8111ff38:	30c01f16 	blt	r6,r3,8111ffb8 <_realloc_r+0x234>
8111ff3c:	20800317 	ldw	r2,12(r4)
8111ff40:	20c00217 	ldw	r3,8(r4)
8111ff44:	a825883a 	mov	r18,r21
8111ff48:	3021883a 	mov	r16,r6
8111ff4c:	18800315 	stw	r2,12(r3)
8111ff50:	10c00215 	stw	r3,8(r2)
8111ff54:	003fdb06 	br	8111fec4 <__reset+0xfb0ffec4>
8111ff58:	00800304 	movi	r2,12
8111ff5c:	a0800015 	stw	r2,0(r20)
8111ff60:	0005883a 	mov	r2,zero
8111ff64:	003fe506 	br	8111fefc <__reset+0xfb0ffefc>
8111ff68:	98c00117 	ldw	r3,4(r19)
8111ff6c:	9c4b883a 	add	r5,r19,r17
8111ff70:	11000054 	ori	r4,r2,1
8111ff74:	18c0004c 	andi	r3,r3,1
8111ff78:	1c62b03a 	or	r17,r3,r17
8111ff7c:	9c400115 	stw	r17,4(r19)
8111ff80:	29000115 	stw	r4,4(r5)
8111ff84:	2885883a 	add	r2,r5,r2
8111ff88:	10c00117 	ldw	r3,4(r2)
8111ff8c:	29400204 	addi	r5,r5,8
8111ff90:	a009883a 	mov	r4,r20
8111ff94:	18c00054 	ori	r3,r3,1
8111ff98:	10c00115 	stw	r3,4(r2)
8111ff9c:	111dcf00 	call	8111dcf0 <_free_r>
8111ffa0:	003fd306 	br	8111fef0 <__reset+0xfb0ffef0>
8111ffa4:	017fff04 	movi	r5,-4
8111ffa8:	414a703a 	and	r5,r8,r5
8111ffac:	89800404 	addi	r6,r17,16
8111ffb0:	8151883a 	add	r8,r16,r5
8111ffb4:	4180590e 	bge	r8,r6,8112011c <_realloc_r+0x398>
8111ffb8:	1080004c 	andi	r2,r2,1
8111ffbc:	103f9e1e 	bne	r2,zero,8111fe38 <__reset+0xfb0ffe38>
8111ffc0:	adbffe17 	ldw	r22,-8(r21)
8111ffc4:	00bfff04 	movi	r2,-4
8111ffc8:	9dadc83a 	sub	r22,r19,r22
8111ffcc:	b1800117 	ldw	r6,4(r22)
8111ffd0:	3084703a 	and	r2,r6,r2
8111ffd4:	20002026 	beq	r4,zero,81120058 <_realloc_r+0x2d4>
8111ffd8:	80af883a 	add	r23,r16,r2
8111ffdc:	b96f883a 	add	r23,r23,r5
8111ffe0:	21c05f26 	beq	r4,r7,81120160 <_realloc_r+0x3dc>
8111ffe4:	b8c01c16 	blt	r23,r3,81120058 <_realloc_r+0x2d4>
8111ffe8:	20800317 	ldw	r2,12(r4)
8111ffec:	20c00217 	ldw	r3,8(r4)
8111fff0:	81bfff04 	addi	r6,r16,-4
8111fff4:	01000904 	movi	r4,36
8111fff8:	18800315 	stw	r2,12(r3)
8111fffc:	10c00215 	stw	r3,8(r2)
81120000:	b0c00217 	ldw	r3,8(r22)
81120004:	b0800317 	ldw	r2,12(r22)
81120008:	b4800204 	addi	r18,r22,8
8112000c:	18800315 	stw	r2,12(r3)
81120010:	10c00215 	stw	r3,8(r2)
81120014:	21801b36 	bltu	r4,r6,81120084 <_realloc_r+0x300>
81120018:	008004c4 	movi	r2,19
8112001c:	1180352e 	bgeu	r2,r6,811200f4 <_realloc_r+0x370>
81120020:	a8800017 	ldw	r2,0(r21)
81120024:	b0800215 	stw	r2,8(r22)
81120028:	a8800117 	ldw	r2,4(r21)
8112002c:	b0800315 	stw	r2,12(r22)
81120030:	008006c4 	movi	r2,27
81120034:	11807f36 	bltu	r2,r6,81120234 <_realloc_r+0x4b0>
81120038:	b0800404 	addi	r2,r22,16
8112003c:	ad400204 	addi	r21,r21,8
81120040:	00002d06 	br	811200f8 <_realloc_r+0x374>
81120044:	adbffe17 	ldw	r22,-8(r21)
81120048:	00bfff04 	movi	r2,-4
8112004c:	9dadc83a 	sub	r22,r19,r22
81120050:	b1000117 	ldw	r4,4(r22)
81120054:	2084703a 	and	r2,r4,r2
81120058:	b03f7726 	beq	r22,zero,8111fe38 <__reset+0xfb0ffe38>
8112005c:	80af883a 	add	r23,r16,r2
81120060:	b8ff7516 	blt	r23,r3,8111fe38 <__reset+0xfb0ffe38>
81120064:	b0800317 	ldw	r2,12(r22)
81120068:	b0c00217 	ldw	r3,8(r22)
8112006c:	81bfff04 	addi	r6,r16,-4
81120070:	01000904 	movi	r4,36
81120074:	18800315 	stw	r2,12(r3)
81120078:	10c00215 	stw	r3,8(r2)
8112007c:	b4800204 	addi	r18,r22,8
81120080:	21bfe52e 	bgeu	r4,r6,81120018 <__reset+0xfb100018>
81120084:	a80b883a 	mov	r5,r21
81120088:	9009883a 	mov	r4,r18
8112008c:	111eb640 	call	8111eb64 <memmove>
81120090:	b821883a 	mov	r16,r23
81120094:	b027883a 	mov	r19,r22
81120098:	003f8a06 	br	8111fec4 <__reset+0xfb0ffec4>
8112009c:	300b883a 	mov	r5,r6
811200a0:	dfc00917 	ldw	ra,36(sp)
811200a4:	df000817 	ldw	fp,32(sp)
811200a8:	ddc00717 	ldw	r23,28(sp)
811200ac:	dd800617 	ldw	r22,24(sp)
811200b0:	dd400517 	ldw	r21,20(sp)
811200b4:	dd000417 	ldw	r20,16(sp)
811200b8:	dcc00317 	ldw	r19,12(sp)
811200bc:	dc800217 	ldw	r18,8(sp)
811200c0:	dc400117 	ldw	r17,4(sp)
811200c4:	dc000017 	ldw	r16,0(sp)
811200c8:	dec00a04 	addi	sp,sp,40
811200cc:	111425c1 	jmpi	8111425c <_malloc_r>
811200d0:	a8c00017 	ldw	r3,0(r21)
811200d4:	90c00015 	stw	r3,0(r18)
811200d8:	a8c00117 	ldw	r3,4(r21)
811200dc:	90c00115 	stw	r3,4(r18)
811200e0:	00c006c4 	movi	r3,27
811200e4:	19804536 	bltu	r3,r6,811201fc <_realloc_r+0x478>
811200e8:	90800204 	addi	r2,r18,8
811200ec:	a8c00204 	addi	r3,r21,8
811200f0:	003f6306 	br	8111fe80 <__reset+0xfb0ffe80>
811200f4:	9005883a 	mov	r2,r18
811200f8:	a8c00017 	ldw	r3,0(r21)
811200fc:	b821883a 	mov	r16,r23
81120100:	b027883a 	mov	r19,r22
81120104:	10c00015 	stw	r3,0(r2)
81120108:	a8c00117 	ldw	r3,4(r21)
8112010c:	10c00115 	stw	r3,4(r2)
81120110:	a8c00217 	ldw	r3,8(r21)
81120114:	10c00215 	stw	r3,8(r2)
81120118:	003f6a06 	br	8111fec4 <__reset+0xfb0ffec4>
8112011c:	9c67883a 	add	r19,r19,r17
81120120:	4445c83a 	sub	r2,r8,r17
81120124:	e4c00215 	stw	r19,8(fp)
81120128:	10800054 	ori	r2,r2,1
8112012c:	98800115 	stw	r2,4(r19)
81120130:	a8bfff17 	ldw	r2,-4(r21)
81120134:	a009883a 	mov	r4,r20
81120138:	1080004c 	andi	r2,r2,1
8112013c:	1462b03a 	or	r17,r2,r17
81120140:	ac7fff15 	stw	r17,-4(r21)
81120144:	112b1e00 	call	8112b1e0 <__malloc_unlock>
81120148:	a805883a 	mov	r2,r21
8112014c:	003f6b06 	br	8111fefc <__reset+0xfb0ffefc>
81120150:	a80b883a 	mov	r5,r21
81120154:	9009883a 	mov	r4,r18
81120158:	111eb640 	call	8111eb64 <memmove>
8112015c:	003f4e06 	br	8111fe98 <__reset+0xfb0ffe98>
81120160:	89000404 	addi	r4,r17,16
81120164:	b93fbc16 	blt	r23,r4,81120058 <__reset+0xfb100058>
81120168:	b0800317 	ldw	r2,12(r22)
8112016c:	b0c00217 	ldw	r3,8(r22)
81120170:	81bfff04 	addi	r6,r16,-4
81120174:	01000904 	movi	r4,36
81120178:	18800315 	stw	r2,12(r3)
8112017c:	10c00215 	stw	r3,8(r2)
81120180:	b4800204 	addi	r18,r22,8
81120184:	21804336 	bltu	r4,r6,81120294 <_realloc_r+0x510>
81120188:	008004c4 	movi	r2,19
8112018c:	11803f2e 	bgeu	r2,r6,8112028c <_realloc_r+0x508>
81120190:	a8800017 	ldw	r2,0(r21)
81120194:	b0800215 	stw	r2,8(r22)
81120198:	a8800117 	ldw	r2,4(r21)
8112019c:	b0800315 	stw	r2,12(r22)
811201a0:	008006c4 	movi	r2,27
811201a4:	11803f36 	bltu	r2,r6,811202a4 <_realloc_r+0x520>
811201a8:	b0800404 	addi	r2,r22,16
811201ac:	ad400204 	addi	r21,r21,8
811201b0:	a8c00017 	ldw	r3,0(r21)
811201b4:	10c00015 	stw	r3,0(r2)
811201b8:	a8c00117 	ldw	r3,4(r21)
811201bc:	10c00115 	stw	r3,4(r2)
811201c0:	a8c00217 	ldw	r3,8(r21)
811201c4:	10c00215 	stw	r3,8(r2)
811201c8:	b447883a 	add	r3,r22,r17
811201cc:	bc45c83a 	sub	r2,r23,r17
811201d0:	e0c00215 	stw	r3,8(fp)
811201d4:	10800054 	ori	r2,r2,1
811201d8:	18800115 	stw	r2,4(r3)
811201dc:	b0800117 	ldw	r2,4(r22)
811201e0:	a009883a 	mov	r4,r20
811201e4:	1080004c 	andi	r2,r2,1
811201e8:	1462b03a 	or	r17,r2,r17
811201ec:	b4400115 	stw	r17,4(r22)
811201f0:	112b1e00 	call	8112b1e0 <__malloc_unlock>
811201f4:	9005883a 	mov	r2,r18
811201f8:	003f4006 	br	8111fefc <__reset+0xfb0ffefc>
811201fc:	a8c00217 	ldw	r3,8(r21)
81120200:	90c00215 	stw	r3,8(r18)
81120204:	a8c00317 	ldw	r3,12(r21)
81120208:	90c00315 	stw	r3,12(r18)
8112020c:	30801126 	beq	r6,r2,81120254 <_realloc_r+0x4d0>
81120210:	90800404 	addi	r2,r18,16
81120214:	a8c00404 	addi	r3,r21,16
81120218:	003f1906 	br	8111fe80 <__reset+0xfb0ffe80>
8112021c:	90ffff17 	ldw	r3,-4(r18)
81120220:	00bfff04 	movi	r2,-4
81120224:	a825883a 	mov	r18,r21
81120228:	1884703a 	and	r2,r3,r2
8112022c:	80a1883a 	add	r16,r16,r2
81120230:	003f2406 	br	8111fec4 <__reset+0xfb0ffec4>
81120234:	a8800217 	ldw	r2,8(r21)
81120238:	b0800415 	stw	r2,16(r22)
8112023c:	a8800317 	ldw	r2,12(r21)
81120240:	b0800515 	stw	r2,20(r22)
81120244:	31000a26 	beq	r6,r4,81120270 <_realloc_r+0x4ec>
81120248:	b0800604 	addi	r2,r22,24
8112024c:	ad400404 	addi	r21,r21,16
81120250:	003fa906 	br	811200f8 <__reset+0xfb1000f8>
81120254:	a9000417 	ldw	r4,16(r21)
81120258:	90800604 	addi	r2,r18,24
8112025c:	a8c00604 	addi	r3,r21,24
81120260:	91000415 	stw	r4,16(r18)
81120264:	a9000517 	ldw	r4,20(r21)
81120268:	91000515 	stw	r4,20(r18)
8112026c:	003f0406 	br	8111fe80 <__reset+0xfb0ffe80>
81120270:	a8c00417 	ldw	r3,16(r21)
81120274:	ad400604 	addi	r21,r21,24
81120278:	b0800804 	addi	r2,r22,32
8112027c:	b0c00615 	stw	r3,24(r22)
81120280:	a8ffff17 	ldw	r3,-4(r21)
81120284:	b0c00715 	stw	r3,28(r22)
81120288:	003f9b06 	br	811200f8 <__reset+0xfb1000f8>
8112028c:	9005883a 	mov	r2,r18
81120290:	003fc706 	br	811201b0 <__reset+0xfb1001b0>
81120294:	a80b883a 	mov	r5,r21
81120298:	9009883a 	mov	r4,r18
8112029c:	111eb640 	call	8111eb64 <memmove>
811202a0:	003fc906 	br	811201c8 <__reset+0xfb1001c8>
811202a4:	a8800217 	ldw	r2,8(r21)
811202a8:	b0800415 	stw	r2,16(r22)
811202ac:	a8800317 	ldw	r2,12(r21)
811202b0:	b0800515 	stw	r2,20(r22)
811202b4:	31000726 	beq	r6,r4,811202d4 <_realloc_r+0x550>
811202b8:	b0800604 	addi	r2,r22,24
811202bc:	ad400404 	addi	r21,r21,16
811202c0:	003fbb06 	br	811201b0 <__reset+0xfb1001b0>
811202c4:	a009883a 	mov	r4,r20
811202c8:	112b1e00 	call	8112b1e0 <__malloc_unlock>
811202cc:	0005883a 	mov	r2,zero
811202d0:	003f0a06 	br	8111fefc <__reset+0xfb0ffefc>
811202d4:	a8c00417 	ldw	r3,16(r21)
811202d8:	ad400604 	addi	r21,r21,24
811202dc:	b0800804 	addi	r2,r22,32
811202e0:	b0c00615 	stw	r3,24(r22)
811202e4:	a8ffff17 	ldw	r3,-4(r21)
811202e8:	b0c00715 	stw	r3,28(r22)
811202ec:	003fb006 	br	811201b0 <__reset+0xfb1001b0>

811202f0 <__fpclassifyd>:
811202f0:	00a00034 	movhi	r2,32768
811202f4:	10bfffc4 	addi	r2,r2,-1
811202f8:	2884703a 	and	r2,r5,r2
811202fc:	10000726 	beq	r2,zero,8112031c <__fpclassifyd+0x2c>
81120300:	00fffc34 	movhi	r3,65520
81120304:	019ff834 	movhi	r6,32736
81120308:	28c7883a 	add	r3,r5,r3
8112030c:	31bfffc4 	addi	r6,r6,-1
81120310:	30c00536 	bltu	r6,r3,81120328 <__fpclassifyd+0x38>
81120314:	00800104 	movi	r2,4
81120318:	f800283a 	ret
8112031c:	2000021e 	bne	r4,zero,81120328 <__fpclassifyd+0x38>
81120320:	00800084 	movi	r2,2
81120324:	f800283a 	ret
81120328:	00dffc34 	movhi	r3,32752
8112032c:	019ff834 	movhi	r6,32736
81120330:	28cb883a 	add	r5,r5,r3
81120334:	31bfffc4 	addi	r6,r6,-1
81120338:	317ff62e 	bgeu	r6,r5,81120314 <__reset+0xfb100314>
8112033c:	01400434 	movhi	r5,16
81120340:	297fffc4 	addi	r5,r5,-1
81120344:	28800236 	bltu	r5,r2,81120350 <__fpclassifyd+0x60>
81120348:	008000c4 	movi	r2,3
8112034c:	f800283a 	ret
81120350:	10c00226 	beq	r2,r3,8112035c <__fpclassifyd+0x6c>
81120354:	0005883a 	mov	r2,zero
81120358:	f800283a 	ret
8112035c:	2005003a 	cmpeq	r2,r4,zero
81120360:	f800283a 	ret

81120364 <__sccl>:
81120364:	2a000003 	ldbu	r8,0(r5)
81120368:	00801784 	movi	r2,94
8112036c:	40802a26 	beq	r8,r2,81120418 <__sccl+0xb4>
81120370:	29400044 	addi	r5,r5,1
81120374:	000f883a 	mov	r7,zero
81120378:	0013883a 	mov	r9,zero
8112037c:	2007883a 	mov	r3,r4
81120380:	21804004 	addi	r6,r4,256
81120384:	19c00005 	stb	r7,0(r3)
81120388:	18c00044 	addi	r3,r3,1
8112038c:	19bffd1e 	bne	r3,r6,81120384 <__reset+0xfb100384>
81120390:	40001126 	beq	r8,zero,811203d8 <__sccl+0x74>
81120394:	00800044 	movi	r2,1
81120398:	124fc83a 	sub	r7,r2,r9
8112039c:	02800b44 	movi	r10,45
811203a0:	02c01744 	movi	r11,93
811203a4:	2205883a 	add	r2,r4,r8
811203a8:	11c00005 	stb	r7,0(r2)
811203ac:	28800044 	addi	r2,r5,1
811203b0:	28c00003 	ldbu	r3,0(r5)
811203b4:	1a800a26 	beq	r3,r10,811203e0 <__sccl+0x7c>
811203b8:	1ac00426 	beq	r3,r11,811203cc <__sccl+0x68>
811203bc:	18000426 	beq	r3,zero,811203d0 <__sccl+0x6c>
811203c0:	1811883a 	mov	r8,r3
811203c4:	100b883a 	mov	r5,r2
811203c8:	003ff606 	br	811203a4 <__reset+0xfb1003a4>
811203cc:	f800283a 	ret
811203d0:	2805883a 	mov	r2,r5
811203d4:	f800283a 	ret
811203d8:	28bfffc4 	addi	r2,r5,-1
811203dc:	f800283a 	ret
811203e0:	12400003 	ldbu	r9,0(r2)
811203e4:	4ac01126 	beq	r9,r11,8112042c <__sccl+0xc8>
811203e8:	4a001016 	blt	r9,r8,8112042c <__sccl+0xc8>
811203ec:	41800044 	addi	r6,r8,1
811203f0:	29400084 	addi	r5,r5,2
811203f4:	2187883a 	add	r3,r4,r6
811203f8:	00000106 	br	81120400 <__sccl+0x9c>
811203fc:	31800044 	addi	r6,r6,1
81120400:	19c00005 	stb	r7,0(r3)
81120404:	3011883a 	mov	r8,r6
81120408:	18c00044 	addi	r3,r3,1
8112040c:	327ffb16 	blt	r6,r9,811203fc <__reset+0xfb1003fc>
81120410:	10800084 	addi	r2,r2,2
81120414:	003fe606 	br	811203b0 <__reset+0xfb1003b0>
81120418:	2a000043 	ldbu	r8,1(r5)
8112041c:	01c00044 	movi	r7,1
81120420:	29400084 	addi	r5,r5,2
81120424:	02400044 	movi	r9,1
81120428:	003fd406 	br	8112037c <__reset+0xfb10037c>
8112042c:	5011883a 	mov	r8,r10
81120430:	003fe406 	br	811203c4 <__reset+0xfb1003c4>

81120434 <nanf>:
81120434:	009ff034 	movhi	r2,32704
81120438:	f800283a 	ret

8112043c <strcmp>:
8112043c:	2144b03a 	or	r2,r4,r5
81120440:	108000cc 	andi	r2,r2,3
81120444:	1000171e 	bne	r2,zero,811204a4 <strcmp+0x68>
81120448:	20800017 	ldw	r2,0(r4)
8112044c:	28c00017 	ldw	r3,0(r5)
81120450:	10c0141e 	bne	r2,r3,811204a4 <strcmp+0x68>
81120454:	027fbff4 	movhi	r9,65279
81120458:	4a7fbfc4 	addi	r9,r9,-257
8112045c:	0086303a 	nor	r3,zero,r2
81120460:	02202074 	movhi	r8,32897
81120464:	1245883a 	add	r2,r2,r9
81120468:	42202004 	addi	r8,r8,-32640
8112046c:	10c4703a 	and	r2,r2,r3
81120470:	1204703a 	and	r2,r2,r8
81120474:	10000226 	beq	r2,zero,81120480 <strcmp+0x44>
81120478:	00002306 	br	81120508 <strcmp+0xcc>
8112047c:	1000221e 	bne	r2,zero,81120508 <strcmp+0xcc>
81120480:	21000104 	addi	r4,r4,4
81120484:	20c00017 	ldw	r3,0(r4)
81120488:	29400104 	addi	r5,r5,4
8112048c:	29800017 	ldw	r6,0(r5)
81120490:	1a4f883a 	add	r7,r3,r9
81120494:	00c4303a 	nor	r2,zero,r3
81120498:	3884703a 	and	r2,r7,r2
8112049c:	1204703a 	and	r2,r2,r8
811204a0:	19bff626 	beq	r3,r6,8112047c <__reset+0xfb10047c>
811204a4:	20800003 	ldbu	r2,0(r4)
811204a8:	10c03fcc 	andi	r3,r2,255
811204ac:	18c0201c 	xori	r3,r3,128
811204b0:	18ffe004 	addi	r3,r3,-128
811204b4:	18000c26 	beq	r3,zero,811204e8 <strcmp+0xac>
811204b8:	29800007 	ldb	r6,0(r5)
811204bc:	19800326 	beq	r3,r6,811204cc <strcmp+0x90>
811204c0:	00001306 	br	81120510 <strcmp+0xd4>
811204c4:	29800007 	ldb	r6,0(r5)
811204c8:	11800b1e 	bne	r2,r6,811204f8 <strcmp+0xbc>
811204cc:	21000044 	addi	r4,r4,1
811204d0:	20c00003 	ldbu	r3,0(r4)
811204d4:	29400044 	addi	r5,r5,1
811204d8:	18803fcc 	andi	r2,r3,255
811204dc:	1080201c 	xori	r2,r2,128
811204e0:	10bfe004 	addi	r2,r2,-128
811204e4:	103ff71e 	bne	r2,zero,811204c4 <__reset+0xfb1004c4>
811204e8:	0007883a 	mov	r3,zero
811204ec:	28800003 	ldbu	r2,0(r5)
811204f0:	1885c83a 	sub	r2,r3,r2
811204f4:	f800283a 	ret
811204f8:	28800003 	ldbu	r2,0(r5)
811204fc:	18c03fcc 	andi	r3,r3,255
81120500:	1885c83a 	sub	r2,r3,r2
81120504:	f800283a 	ret
81120508:	0005883a 	mov	r2,zero
8112050c:	f800283a 	ret
81120510:	10c03fcc 	andi	r3,r2,255
81120514:	003ff506 	br	811204ec <__reset+0xfb1004ec>

81120518 <sulp>:
81120518:	defffd04 	addi	sp,sp,-12
8112051c:	de00012e 	bgeu	sp,et,81120524 <sulp+0xc>
81120520:	003b68fa 	trap	3
81120524:	dc400115 	stw	r17,4(sp)
81120528:	3023883a 	mov	r17,r6
8112052c:	dc000015 	stw	r16,0(sp)
81120530:	dfc00215 	stw	ra,8(sp)
81120534:	2821883a 	mov	r16,r5
81120538:	111f8240 	call	8111f824 <__ulp>
8112053c:	88000c26 	beq	r17,zero,81120570 <sulp+0x58>
81120540:	841ffc2c 	andhi	r16,r16,32752
81120544:	8020d53a 	srli	r16,r16,20
81120548:	01c01ac4 	movi	r7,107
8112054c:	3c21c83a 	sub	r16,r7,r16
81120550:	0400070e 	bge	zero,r16,81120570 <sulp+0x58>
81120554:	8020953a 	slli	r16,r16,20
81120558:	01cffc34 	movhi	r7,16368
8112055c:	000d883a 	mov	r6,zero
81120560:	81cf883a 	add	r7,r16,r7
81120564:	1009883a 	mov	r4,r2
81120568:	180b883a 	mov	r5,r3
8112056c:	1112e200 	call	81112e20 <__muldf3>
81120570:	dfc00217 	ldw	ra,8(sp)
81120574:	dc400117 	ldw	r17,4(sp)
81120578:	dc000017 	ldw	r16,0(sp)
8112057c:	dec00304 	addi	sp,sp,12
81120580:	f800283a 	ret

81120584 <_strtod_r>:
81120584:	deffe204 	addi	sp,sp,-120
81120588:	de00012e 	bgeu	sp,et,81120590 <_strtod_r+0xc>
8112058c:	003b68fa 	trap	3
81120590:	ddc01b15 	stw	r23,108(sp)
81120594:	dd001815 	stw	r20,96(sp)
81120598:	dc801615 	stw	r18,88(sp)
8112059c:	dc401515 	stw	r17,84(sp)
811205a0:	dc001415 	stw	r16,80(sp)
811205a4:	d9400615 	stw	r5,24(sp)
811205a8:	dfc01d15 	stw	ra,116(sp)
811205ac:	df001c15 	stw	fp,112(sp)
811205b0:	dd801a15 	stw	r22,104(sp)
811205b4:	dd401915 	stw	r21,100(sp)
811205b8:	dcc01715 	stw	r19,92(sp)
811205bc:	2021883a 	mov	r16,r4
811205c0:	d8000515 	stw	zero,20(sp)
811205c4:	2809883a 	mov	r4,r5
811205c8:	20800003 	ldbu	r2,0(r4)
811205cc:	01e044b4 	movhi	r7,33042
811205d0:	282f883a 	mov	r23,r5
811205d4:	10c03fcc 	andi	r3,r2,255
811205d8:	01400b44 	movi	r5,45
811205dc:	39c18004 	addi	r7,r7,1536
811205e0:	3029883a 	mov	r20,r6
811205e4:	0025883a 	mov	r18,zero
811205e8:	0023883a 	mov	r17,zero
811205ec:	28c0ba36 	bltu	r5,r3,811208d8 <_strtod_r+0x354>
811205f0:	180690ba 	slli	r3,r3,2
811205f4:	19c7883a 	add	r3,r3,r7
811205f8:	18c00017 	ldw	r3,0(r3)
811205fc:	1800683a 	jmp	r3
81120600:	811206c0 	call	8811206c <__reset+0x20f206c>
81120604:	811208d8 	cmpnei	r4,r16,18467
81120608:	811208d8 	cmpnei	r4,r16,18467
8112060c:	811208d8 	cmpnei	r4,r16,18467
81120610:	811208d8 	cmpnei	r4,r16,18467
81120614:	811208d8 	cmpnei	r4,r16,18467
81120618:	811208d8 	cmpnei	r4,r16,18467
8112061c:	811208d8 	cmpnei	r4,r16,18467
81120620:	811208d8 	cmpnei	r4,r16,18467
81120624:	811208c4 	addi	r4,r16,18467
81120628:	811208c4 	addi	r4,r16,18467
8112062c:	811208c4 	addi	r4,r16,18467
81120630:	811208c4 	addi	r4,r16,18467
81120634:	811208c4 	addi	r4,r16,18467
81120638:	811208d8 	cmpnei	r4,r16,18467
8112063c:	811208d8 	cmpnei	r4,r16,18467
81120640:	811208d8 	cmpnei	r4,r16,18467
81120644:	811208d8 	cmpnei	r4,r16,18467
81120648:	811208d8 	cmpnei	r4,r16,18467
8112064c:	811208d8 	cmpnei	r4,r16,18467
81120650:	811208d8 	cmpnei	r4,r16,18467
81120654:	811208d8 	cmpnei	r4,r16,18467
81120658:	811208d8 	cmpnei	r4,r16,18467
8112065c:	811208d8 	cmpnei	r4,r16,18467
81120660:	811208d8 	cmpnei	r4,r16,18467
81120664:	811208d8 	cmpnei	r4,r16,18467
81120668:	811208d8 	cmpnei	r4,r16,18467
8112066c:	811208d8 	cmpnei	r4,r16,18467
81120670:	811208d8 	cmpnei	r4,r16,18467
81120674:	811208d8 	cmpnei	r4,r16,18467
81120678:	811208d8 	cmpnei	r4,r16,18467
8112067c:	811208d8 	cmpnei	r4,r16,18467
81120680:	811208c4 	addi	r4,r16,18467
81120684:	811208d8 	cmpnei	r4,r16,18467
81120688:	811208d8 	cmpnei	r4,r16,18467
8112068c:	811208d8 	cmpnei	r4,r16,18467
81120690:	811208d8 	cmpnei	r4,r16,18467
81120694:	811208d8 	cmpnei	r4,r16,18467
81120698:	811208d8 	cmpnei	r4,r16,18467
8112069c:	811208d8 	cmpnei	r4,r16,18467
811206a0:	811208d8 	cmpnei	r4,r16,18467
811206a4:	811208d8 	cmpnei	r4,r16,18467
811206a8:	811208d8 	cmpnei	r4,r16,18467
811206ac:	81120718 	cmpnei	r4,r16,18460
811206b0:	811208d8 	cmpnei	r4,r16,18467
811206b4:	811208b8 	rdprs	r4,r16,18466
811206b8:	00801244 	movi	r2,73
811206bc:	88843526 	beq	r17,r2,81121794 <_strtod_r+0x1210>
811206c0:	002b883a 	mov	r21,zero
811206c4:	002d883a 	mov	r22,zero
811206c8:	a0000526 	beq	r20,zero,811206e0 <_strtod_r+0x15c>
811206cc:	d8000715 	stw	zero,28(sp)
811206d0:	a5c00015 	stw	r23,0(r20)
811206d4:	d9000717 	ldw	r4,28(sp)
811206d8:	20000126 	beq	r4,zero,811206e0 <_strtod_r+0x15c>
811206dc:	b5a0003c 	xorhi	r22,r22,32768
811206e0:	a805883a 	mov	r2,r21
811206e4:	b007883a 	mov	r3,r22
811206e8:	dfc01d17 	ldw	ra,116(sp)
811206ec:	df001c17 	ldw	fp,112(sp)
811206f0:	ddc01b17 	ldw	r23,108(sp)
811206f4:	dd801a17 	ldw	r22,104(sp)
811206f8:	dd401917 	ldw	r21,100(sp)
811206fc:	dd001817 	ldw	r20,96(sp)
81120700:	dcc01717 	ldw	r19,92(sp)
81120704:	dc801617 	ldw	r18,88(sp)
81120708:	dc401517 	ldw	r17,84(sp)
8112070c:	dc001417 	ldw	r16,80(sp)
81120710:	dec01e04 	addi	sp,sp,120
81120714:	f800283a 	ret
81120718:	d8000715 	stw	zero,28(sp)
8112071c:	24c00044 	addi	r19,r4,1
81120720:	dcc00615 	stw	r19,24(sp)
81120724:	20800043 	ldbu	r2,1(r4)
81120728:	10c03fcc 	andi	r3,r2,255
8112072c:	18c0201c 	xori	r3,r3,128
81120730:	18ffe004 	addi	r3,r3,-128
81120734:	183fe226 	beq	r3,zero,811206c0 <__reset+0xfb1006c0>
81120738:	11403fcc 	andi	r5,r2,255
8112073c:	2940201c 	xori	r5,r5,128
81120740:	297fe004 	addi	r5,r5,-128
81120744:	00c00c04 	movi	r3,48
81120748:	28c0e526 	beq	r5,r3,81120ae0 <_strtod_r+0x55c>
8112074c:	dcc00815 	stw	r19,32(sp)
81120750:	0025883a 	mov	r18,zero
81120754:	10fff404 	addi	r3,r2,-48
81120758:	18c03fcc 	andi	r3,r3,255
8112075c:	01000244 	movi	r4,9
81120760:	20c37536 	bltu	r4,r3,81121538 <_strtod_r+0xfb4>
81120764:	dd400817 	ldw	r21,32(sp)
81120768:	0027883a 	mov	r19,zero
8112076c:	0039883a 	mov	fp,zero
81120770:	002d883a 	mov	r22,zero
81120774:	01400204 	movi	r5,8
81120778:	2d805a16 	blt	r5,r22,811208e4 <_strtod_r+0x360>
8112077c:	e70002a4 	muli	fp,fp,10
81120780:	10c03fcc 	andi	r3,r2,255
81120784:	18c0201c 	xori	r3,r3,128
81120788:	18ffe004 	addi	r3,r3,-128
8112078c:	e0f9883a 	add	fp,fp,r3
81120790:	e73ff404 	addi	fp,fp,-48
81120794:	ad400044 	addi	r21,r21,1
81120798:	dd400615 	stw	r21,24(sp)
8112079c:	a8800003 	ldbu	r2,0(r21)
811207a0:	b5800044 	addi	r22,r22,1
811207a4:	10fff404 	addi	r3,r2,-48
811207a8:	18c03fcc 	andi	r3,r3,255
811207ac:	20fff22e 	bgeu	r4,r3,81120778 <__reset+0xfb100778>
811207b0:	14403fcc 	andi	r17,r2,255
811207b4:	8c40201c 	xori	r17,r17,128
811207b8:	8c7fe004 	addi	r17,r17,-128
811207bc:	8009883a 	mov	r4,r16
811207c0:	111e7a40 	call	8111e7a4 <_localeconv_r>
811207c4:	11400017 	ldw	r5,0(r2)
811207c8:	8009883a 	mov	r4,r16
811207cc:	d9401315 	stw	r5,76(sp)
811207d0:	111e7a40 	call	8111e7a4 <_localeconv_r>
811207d4:	11000017 	ldw	r4,0(r2)
811207d8:	11155840 	call	81115584 <strlen>
811207dc:	d9401317 	ldw	r5,76(sp)
811207e0:	100d883a 	mov	r6,r2
811207e4:	a809883a 	mov	r4,r21
811207e8:	11261740 	call	81126174 <strncmp>
811207ec:	1000ce26 	beq	r2,zero,81120b28 <_strtod_r+0x5a4>
811207f0:	b013883a 	mov	r9,r22
811207f4:	000b883a 	mov	r5,zero
811207f8:	0015883a 	mov	r10,zero
811207fc:	0017883a 	mov	r11,zero
81120800:	00801944 	movi	r2,101
81120804:	88807826 	beq	r17,r2,811209e8 <_strtod_r+0x464>
81120808:	00801144 	movi	r2,69
8112080c:	88807626 	beq	r17,r2,811209e8 <_strtod_r+0x464>
81120810:	002b883a 	mov	r21,zero
81120814:	48003d1e 	bne	r9,zero,8112090c <_strtod_r+0x388>
81120818:	2800391e 	bne	r5,zero,81120900 <_strtod_r+0x37c>
8112081c:	9000381e 	bne	r18,zero,81120900 <_strtod_r+0x37c>
81120820:	583fa71e 	bne	r11,zero,811206c0 <__reset+0xfb1006c0>
81120824:	00801384 	movi	r2,78
81120828:	88800526 	beq	r17,r2,81120840 <_strtod_r+0x2bc>
8112082c:	147fa20e 	bge	r2,r17,811206b8 <__reset+0xfb1006b8>
81120830:	00801a44 	movi	r2,105
81120834:	8883d726 	beq	r17,r2,81121794 <_strtod_r+0x1210>
81120838:	00801b84 	movi	r2,110
8112083c:	88bfa01e 	bne	r17,r2,811206c0 <__reset+0xfb1006c0>
81120840:	01604534 	movhi	r5,33044
81120844:	d9000617 	ldw	r4,24(sp)
81120848:	29491a04 	addi	r5,r5,9320
8112084c:	01c00644 	movi	r7,25
81120850:	00000b06 	br	81120880 <_strtod_r+0x2fc>
81120854:	21000044 	addi	r4,r4,1
81120858:	20800003 	ldbu	r2,0(r4)
8112085c:	10ffefc4 	addi	r3,r2,-65
81120860:	10803fcc 	andi	r2,r2,255
81120864:	1080201c 	xori	r2,r2,128
81120868:	18c03fcc 	andi	r3,r3,255
8112086c:	10bfe004 	addi	r2,r2,-128
81120870:	38c00136 	bltu	r7,r3,81120878 <_strtod_r+0x2f4>
81120874:	10800804 	addi	r2,r2,32
81120878:	29400044 	addi	r5,r5,1
8112087c:	11bf901e 	bne	r2,r6,811206c0 <__reset+0xfb1006c0>
81120880:	29800007 	ldb	r6,0(r5)
81120884:	303ff31e 	bne	r6,zero,81120854 <__reset+0xfb100854>
81120888:	20800044 	addi	r2,r4,1
8112088c:	d8800615 	stw	r2,24(sp)
81120890:	20c00047 	ldb	r3,1(r4)
81120894:	00800a04 	movi	r2,40
81120898:	18849d26 	beq	r3,r2,81121b10 <_strtod_r+0x158c>
8112089c:	047ffe34 	movhi	r17,65528
811208a0:	0025883a 	mov	r18,zero
811208a4:	902b883a 	mov	r21,r18
811208a8:	882d883a 	mov	r22,r17
811208ac:	a03f8926 	beq	r20,zero,811206d4 <__reset+0xfb1006d4>
811208b0:	ddc00617 	ldw	r23,24(sp)
811208b4:	003f8606 	br	811206d0 <__reset+0xfb1006d0>
811208b8:	00800044 	movi	r2,1
811208bc:	d8800715 	stw	r2,28(sp)
811208c0:	003f9606 	br	8112071c <__reset+0xfb10071c>
811208c4:	21000044 	addi	r4,r4,1
811208c8:	d9000615 	stw	r4,24(sp)
811208cc:	20800003 	ldbu	r2,0(r4)
811208d0:	10c03fcc 	andi	r3,r2,255
811208d4:	28ff462e 	bgeu	r5,r3,811205f0 <__reset+0xfb1005f0>
811208d8:	2027883a 	mov	r19,r4
811208dc:	d8000715 	stw	zero,28(sp)
811208e0:	003f9506 	br	81120738 <__reset+0xfb100738>
811208e4:	9cc002a4 	muli	r19,r19,10
811208e8:	10803fcc 	andi	r2,r2,255
811208ec:	1080201c 	xori	r2,r2,128
811208f0:	10bfe004 	addi	r2,r2,-128
811208f4:	9885883a 	add	r2,r19,r2
811208f8:	14fff404 	addi	r19,r2,-48
811208fc:	003fa506 	br	81120794 <__reset+0xfb100794>
81120900:	002b883a 	mov	r21,zero
81120904:	002d883a 	mov	r22,zero
81120908:	003fe806 	br	811208ac <__reset+0xfb1008ac>
8112090c:	aaabc83a 	sub	r21,r21,r10
81120910:	b000011e 	bne	r22,zero,81120918 <_strtod_r+0x394>
81120914:	482d883a 	mov	r22,r9
81120918:	00800404 	movi	r2,16
8112091c:	482f883a 	mov	r23,r9
81120920:	1240010e 	bge	r2,r9,81120928 <_strtod_r+0x3a4>
81120924:	102f883a 	mov	r23,r2
81120928:	e009883a 	mov	r4,fp
8112092c:	da401315 	stw	r9,76(sp)
81120930:	11291940 	call	81129194 <__floatunsidf>
81120934:	1025883a 	mov	r18,r2
81120938:	00800244 	movi	r2,9
8112093c:	1823883a 	mov	r17,r3
81120940:	da401317 	ldw	r9,76(sp)
81120944:	15c0160e 	bge	r2,r23,811209a0 <_strtod_r+0x41c>
81120948:	b8bffdc4 	addi	r2,r23,-9
8112094c:	100490fa 	slli	r2,r2,3
81120950:	180b883a 	mov	r5,r3
81120954:	00e04534 	movhi	r3,33044
81120958:	18c8e504 	addi	r3,r3,9108
8112095c:	1885883a 	add	r2,r3,r2
81120960:	11800017 	ldw	r6,0(r2)
81120964:	11c00117 	ldw	r7,4(r2)
81120968:	9009883a 	mov	r4,r18
8112096c:	1112e200 	call	81112e20 <__muldf3>
81120970:	9809883a 	mov	r4,r19
81120974:	1025883a 	mov	r18,r2
81120978:	1823883a 	mov	r17,r3
8112097c:	11291940 	call	81129194 <__floatunsidf>
81120980:	9009883a 	mov	r4,r18
81120984:	880b883a 	mov	r5,r17
81120988:	100d883a 	mov	r6,r2
8112098c:	180f883a 	mov	r7,r3
81120990:	11273300 	call	81127330 <__adddf3>
81120994:	da401317 	ldw	r9,76(sp)
81120998:	1025883a 	mov	r18,r2
8112099c:	1823883a 	mov	r17,r3
811209a0:	008003c4 	movi	r2,15
811209a4:	12407b16 	blt	r2,r9,81120b94 <_strtod_r+0x610>
811209a8:	a83fbe26 	beq	r21,zero,811208a4 <__reset+0xfb1008a4>
811209ac:	0543670e 	bge	zero,r21,8112174c <_strtod_r+0x11c8>
811209b0:	00c00584 	movi	r3,22
811209b4:	1d42e816 	blt	r3,r21,81121558 <_strtod_r+0xfd4>
811209b8:	a82a90fa 	slli	r21,r21,3
811209bc:	00a04534 	movhi	r2,33044
811209c0:	1088e504 	addi	r2,r2,9108
811209c4:	1545883a 	add	r2,r2,r21
811209c8:	11000017 	ldw	r4,0(r2)
811209cc:	11400117 	ldw	r5,4(r2)
811209d0:	900d883a 	mov	r6,r18
811209d4:	880f883a 	mov	r7,r17
811209d8:	1112e200 	call	81112e20 <__muldf3>
811209dc:	102b883a 	mov	r21,r2
811209e0:	182d883a 	mov	r22,r3
811209e4:	003fb106 	br	811208ac <__reset+0xfb1008ac>
811209e8:	4801b526 	beq	r9,zero,811210c0 <_strtod_r+0xb3c>
811209ec:	ddc00617 	ldw	r23,24(sp)
811209f0:	00c00ac4 	movi	r3,43
811209f4:	b8800044 	addi	r2,r23,1
811209f8:	d8800615 	stw	r2,24(sp)
811209fc:	b8800047 	ldb	r2,1(r23)
81120a00:	10c1e926 	beq	r2,r3,811211a8 <_strtod_r+0xc24>
81120a04:	00c00b44 	movi	r3,45
81120a08:	10c1ec26 	beq	r2,r3,811211bc <_strtod_r+0xc38>
81120a0c:	1023883a 	mov	r17,r2
81120a10:	0019883a 	mov	r12,zero
81120a14:	88bff404 	addi	r2,r17,-48
81120a18:	00c00244 	movi	r3,9
81120a1c:	1881b736 	bltu	r3,r2,811210fc <_strtod_r+0xb78>
81120a20:	00800c04 	movi	r2,48
81120a24:	8880071e 	bne	r17,r2,81120a44 <_strtod_r+0x4c0>
81120a28:	d8800617 	ldw	r2,24(sp)
81120a2c:	8807883a 	mov	r3,r17
81120a30:	10800044 	addi	r2,r2,1
81120a34:	d8800615 	stw	r2,24(sp)
81120a38:	14400007 	ldb	r17,0(r2)
81120a3c:	10800044 	addi	r2,r2,1
81120a40:	88fffc26 	beq	r17,r3,81120a34 <__reset+0xfb100a34>
81120a44:	88bff3c4 	addi	r2,r17,-49
81120a48:	00c00204 	movi	r3,8
81120a4c:	18bf7036 	bltu	r3,r2,81120810 <__reset+0xfb100810>
81120a50:	db800617 	ldw	r14,24(sp)
81120a54:	88bff404 	addi	r2,r17,-48
81120a58:	03400244 	movi	r13,9
81120a5c:	71c00044 	addi	r7,r14,1
81120a60:	d9c00615 	stw	r7,24(sp)
81120a64:	74400043 	ldbu	r17,1(r14)
81120a68:	88fff404 	addi	r3,r17,-48
81120a6c:	8c403fcc 	andi	r17,r17,255
81120a70:	8c40201c 	xori	r17,r17,128
81120a74:	18c03fcc 	andi	r3,r3,255
81120a78:	8c7fe004 	addi	r17,r17,-128
81120a7c:	68c00e36 	bltu	r13,r3,81120ab8 <_strtod_r+0x534>
81120a80:	71000084 	addi	r4,r14,2
81120a84:	d9000615 	stw	r4,24(sp)
81120a88:	108002a4 	muli	r2,r2,10
81120a8c:	21800003 	ldbu	r6,0(r4)
81120a90:	200f883a 	mov	r7,r4
81120a94:	1463883a 	add	r17,r2,r17
81120a98:	30fff404 	addi	r3,r6,-48
81120a9c:	88bff404 	addi	r2,r17,-48
81120aa0:	34403fcc 	andi	r17,r6,255
81120aa4:	8c40201c 	xori	r17,r17,128
81120aa8:	18c03fcc 	andi	r3,r3,255
81120aac:	8c7fe004 	addi	r17,r17,-128
81120ab0:	21000044 	addi	r4,r4,1
81120ab4:	68fff32e 	bgeu	r13,r3,81120a84 <__reset+0xfb100a84>
81120ab8:	3b8fc83a 	sub	r7,r7,r14
81120abc:	00c00204 	movi	r3,8
81120ac0:	19c29716 	blt	r3,r7,81121520 <_strtod_r+0xf9c>
81120ac4:	102b883a 	mov	r21,r2
81120ac8:	009387c4 	movi	r2,19999
81120acc:	1540010e 	bge	r2,r21,81120ad4 <_strtod_r+0x550>
81120ad0:	102b883a 	mov	r21,r2
81120ad4:	603f4f26 	beq	r12,zero,81120814 <__reset+0xfb100814>
81120ad8:	056bc83a 	sub	r21,zero,r21
81120adc:	003f4d06 	br	81120814 <__reset+0xfb100814>
81120ae0:	98800047 	ldb	r2,1(r19)
81120ae4:	00c01604 	movi	r3,88
81120ae8:	10c1de26 	beq	r2,r3,81121264 <_strtod_r+0xce0>
81120aec:	00c01e04 	movi	r3,120
81120af0:	10c1dc26 	beq	r2,r3,81121264 <_strtod_r+0xce0>
81120af4:	98c00044 	addi	r3,r19,1
81120af8:	1827883a 	mov	r19,r3
81120afc:	d8c00615 	stw	r3,24(sp)
81120b00:	18c00044 	addi	r3,r3,1
81120b04:	18bfffc3 	ldbu	r2,-1(r3)
81120b08:	11003fcc 	andi	r4,r2,255
81120b0c:	2100201c 	xori	r4,r4,128
81120b10:	213fe004 	addi	r4,r4,-128
81120b14:	217ff826 	beq	r4,r5,81120af8 <__reset+0xfb100af8>
81120b18:	203f7926 	beq	r4,zero,81120900 <__reset+0xfb100900>
81120b1c:	dcc00815 	stw	r19,32(sp)
81120b20:	04800044 	movi	r18,1
81120b24:	003f0b06 	br	81120754 <__reset+0xfb100754>
81120b28:	8009883a 	mov	r4,r16
81120b2c:	111e7a40 	call	8111e7a4 <_localeconv_r>
81120b30:	11000017 	ldw	r4,0(r2)
81120b34:	11155840 	call	81115584 <strlen>
81120b38:	d8c00617 	ldw	r3,24(sp)
81120b3c:	1885883a 	add	r2,r3,r2
81120b40:	d8800615 	stw	r2,24(sp)
81120b44:	14400007 	ldb	r17,0(r2)
81120b48:	b001881e 	bne	r22,zero,8112116c <_strtod_r+0xbe8>
81120b4c:	00c00c04 	movi	r3,48
81120b50:	88c3391e 	bne	r17,r3,81121838 <_strtod_r+0x12b4>
81120b54:	10c00044 	addi	r3,r2,1
81120b58:	8809883a 	mov	r4,r17
81120b5c:	d8c00615 	stw	r3,24(sp)
81120b60:	1c400007 	ldb	r17,0(r3)
81120b64:	188bc83a 	sub	r5,r3,r2
81120b68:	18c00044 	addi	r3,r3,1
81120b6c:	893ffb26 	beq	r17,r4,81120b5c <__reset+0xfb100b5c>
81120b70:	88bff3c4 	addi	r2,r17,-49
81120b74:	00c00204 	movi	r3,8
81120b78:	1882e72e 	bgeu	r3,r2,81121718 <_strtod_r+0x1194>
81120b7c:	00801944 	movi	r2,101
81120b80:	88814d26 	beq	r17,r2,811210b8 <_strtod_r+0xb34>
81120b84:	0013883a 	mov	r9,zero
81120b88:	0015883a 	mov	r10,zero
81120b8c:	02c00044 	movi	r11,1
81120b90:	003f1d06 	br	81120808 <__reset+0xfb100808>
81120b94:	4defc83a 	sub	r23,r9,r23
81120b98:	bd6f883a 	add	r23,r23,r21
81120b9c:	05c21e0e 	bge	zero,r23,81121418 <_strtod_r+0xe94>
81120ba0:	b88003cc 	andi	r2,r23,15
81120ba4:	10000d26 	beq	r2,zero,81120bdc <_strtod_r+0x658>
81120ba8:	100490fa 	slli	r2,r2,3
81120bac:	00e04534 	movhi	r3,33044
81120bb0:	18c8e504 	addi	r3,r3,9108
81120bb4:	1885883a 	add	r2,r3,r2
81120bb8:	11000017 	ldw	r4,0(r2)
81120bbc:	11400117 	ldw	r5,4(r2)
81120bc0:	900d883a 	mov	r6,r18
81120bc4:	880f883a 	mov	r7,r17
81120bc8:	da401315 	stw	r9,76(sp)
81120bcc:	1112e200 	call	81112e20 <__muldf3>
81120bd0:	da401317 	ldw	r9,76(sp)
81120bd4:	1025883a 	mov	r18,r2
81120bd8:	1823883a 	mov	r17,r3
81120bdc:	023ffc04 	movi	r8,-16
81120be0:	ba10703a 	and	r8,r23,r8
81120be4:	40003c26 	beq	r8,zero,81120cd8 <_strtod_r+0x754>
81120be8:	00804d04 	movi	r2,308
81120bec:	1201cd16 	blt	r2,r8,81121324 <_strtod_r+0xda0>
81120bf0:	4011d13a 	srai	r8,r8,4
81120bf4:	03000044 	movi	r12,1
81120bf8:	62037c0e 	bge	r12,r8,811219ec <_strtod_r+0x1468>
81120bfc:	01204534 	movhi	r4,33044
81120c00:	2108db04 	addi	r4,r4,9068
81120c04:	2015883a 	mov	r10,r4
81120c08:	0027883a 	mov	r19,zero
81120c0c:	d9000915 	stw	r4,36(sp)
81120c10:	9005883a 	mov	r2,r18
81120c14:	8807883a 	mov	r3,r17
81120c18:	dc000c15 	stw	r16,48(sp)
81120c1c:	dc800e15 	stw	r18,56(sp)
81120c20:	9821883a 	mov	r16,r19
81120c24:	0009883a 	mov	r4,zero
81120c28:	8827883a 	mov	r19,r17
81120c2c:	602f883a 	mov	r23,r12
81120c30:	da400a15 	stw	r9,40(sp)
81120c34:	5025883a 	mov	r18,r10
81120c38:	4023883a 	mov	r17,r8
81120c3c:	8980004c 	andi	r6,r17,1
81120c40:	30000626 	beq	r6,zero,81120c5c <_strtod_r+0x6d8>
81120c44:	91800017 	ldw	r6,0(r18)
81120c48:	91c00117 	ldw	r7,4(r18)
81120c4c:	1009883a 	mov	r4,r2
81120c50:	180b883a 	mov	r5,r3
81120c54:	1112e200 	call	81112e20 <__muldf3>
81120c58:	01000044 	movi	r4,1
81120c5c:	8823d07a 	srai	r17,r17,1
81120c60:	84000044 	addi	r16,r16,1
81120c64:	94800204 	addi	r18,r18,8
81120c68:	8dfff41e 	bne	r17,r23,81120c3c <__reset+0xfb100c3c>
81120c6c:	21003fcc 	andi	r4,r4,255
81120c70:	9823883a 	mov	r17,r19
81120c74:	da400a17 	ldw	r9,40(sp)
81120c78:	8027883a 	mov	r19,r16
81120c7c:	dc800e17 	ldw	r18,56(sp)
81120c80:	dc000c17 	ldw	r16,48(sp)
81120c84:	2003b11e 	bne	r4,zero,81121b4c <_strtod_r+0x15c8>
81120c88:	981690fa 	slli	r11,r19,3
81120c8c:	d8800917 	ldw	r2,36(sp)
81120c90:	01ff2c34 	movhi	r7,64688
81120c94:	900d883a 	mov	r6,r18
81120c98:	12ef883a 	add	r23,r2,r11
81120c9c:	b9000017 	ldw	r4,0(r23)
81120ca0:	b9400117 	ldw	r5,4(r23)
81120ca4:	89cf883a 	add	r7,r17,r7
81120ca8:	da401315 	stw	r9,76(sp)
81120cac:	1112e200 	call	81112e20 <__muldf3>
81120cb0:	1025883a 	mov	r18,r2
81120cb4:	011f2834 	movhi	r4,31904
81120cb8:	189ffc2c 	andhi	r2,r3,32752
81120cbc:	da401317 	ldw	r9,76(sp)
81120cc0:	20819836 	bltu	r4,r2,81121324 <_strtod_r+0xda0>
81120cc4:	011f2434 	movhi	r4,31888
81120cc8:	2083382e 	bgeu	r4,r2,811219ac <_strtod_r+0x1428>
81120ccc:	045ffc34 	movhi	r17,32752
81120cd0:	8c7fffc4 	addi	r17,r17,-1
81120cd4:	04bfffc4 	movi	r18,-1
81120cd8:	d8000915 	stw	zero,36(sp)
81120cdc:	d9400817 	ldw	r5,32(sp)
81120ce0:	df000015 	stw	fp,0(sp)
81120ce4:	480f883a 	mov	r7,r9
81120ce8:	b00d883a 	mov	r6,r22
81120cec:	8009883a 	mov	r4,r16
81120cf0:	111eec00 	call	8111eec0 <__s2b>
81120cf4:	d8800815 	stw	r2,32(sp)
81120cf8:	10018a26 	beq	r2,zero,81121324 <_strtod_r+0xda0>
81120cfc:	a807d7fa 	srai	r3,r21,31
81120d00:	0545c83a 	sub	r2,zero,r21
81120d04:	dd400a15 	stw	r21,40(sp)
81120d08:	1886703a 	and	r3,r3,r2
81120d0c:	d8c00c15 	stw	r3,48(sp)
81120d10:	a8013516 	blt	r21,zero,811211e8 <_strtod_r+0xc64>
81120d14:	d9400817 	ldw	r5,32(sp)
81120d18:	0011883a 	mov	r8,zero
81120d1c:	0027883a 	mov	r19,zero
81120d20:	29400304 	addi	r5,r5,12
81120d24:	d9400f15 	stw	r5,60(sp)
81120d28:	402b883a 	mov	r21,r8
81120d2c:	dd001215 	stw	r20,72(sp)
81120d30:	d8800817 	ldw	r2,32(sp)
81120d34:	8009883a 	mov	r4,r16
81120d38:	11400117 	ldw	r5,4(r2)
81120d3c:	111ecc00 	call	8111ecc0 <_Balloc>
81120d40:	1029883a 	mov	r20,r2
81120d44:	10012d26 	beq	r2,zero,811211fc <_strtod_r+0xc78>
81120d48:	d8c00817 	ldw	r3,32(sp)
81120d4c:	d9400f17 	ldw	r5,60(sp)
81120d50:	11000304 	addi	r4,r2,12
81120d54:	19800417 	ldw	r6,16(r3)
81120d58:	31800084 	addi	r6,r6,2
81120d5c:	318d883a 	add	r6,r6,r6
81120d60:	318d883a 	add	r6,r6,r6
81120d64:	1114a700 	call	81114a70 <memcpy>
81120d68:	d9000204 	addi	r4,sp,8
81120d6c:	d9000015 	stw	r4,0(sp)
81120d70:	d9c00404 	addi	r7,sp,16
81120d74:	900b883a 	mov	r5,r18
81120d78:	880d883a 	mov	r6,r17
81120d7c:	8009883a 	mov	r4,r16
81120d80:	111f99c0 	call	8111f99c <__d2b>
81120d84:	d8800515 	stw	r2,20(sp)
81120d88:	dc801115 	stw	r18,68(sp)
81120d8c:	dc401015 	stw	r17,64(sp)
81120d90:	10027c26 	beq	r2,zero,81121784 <_strtod_r+0x1200>
81120d94:	01400044 	movi	r5,1
81120d98:	8009883a 	mov	r4,r16
81120d9c:	111f0e40 	call	8111f0e4 <__i2b>
81120da0:	1027883a 	mov	r19,r2
81120da4:	10011526 	beq	r2,zero,811211fc <_strtod_r+0xc78>
81120da8:	d8800417 	ldw	r2,16(sp)
81120dac:	1000c816 	blt	r2,zero,811210d0 <_strtod_r+0xb4c>
81120db0:	d9400c17 	ldw	r5,48(sp)
81120db4:	d9000a17 	ldw	r4,40(sp)
81120db8:	28ad883a 	add	r22,r5,r2
81120dbc:	d9400917 	ldw	r5,36(sp)
81120dc0:	df000217 	ldw	fp,8(sp)
81120dc4:	05ff0084 	movi	r23,-1022
81120dc8:	1147c83a 	sub	r3,r2,r5
81120dcc:	1f07883a 	add	r3,r3,fp
81120dd0:	00800d84 	movi	r2,54
81120dd4:	18ffffc4 	addi	r3,r3,-1
81120dd8:	1739c83a 	sub	fp,r2,fp
81120ddc:	1dc0a50e 	bge	r3,r23,81121074 <_strtod_r+0xaf0>
81120de0:	b8efc83a 	sub	r23,r23,r3
81120de4:	008007c4 	movi	r2,31
81120de8:	e5f9c83a 	sub	fp,fp,r23
81120dec:	15c0bc16 	blt	r2,r23,811210e0 <_strtod_r+0xb5c>
81120df0:	00800044 	movi	r2,1
81120df4:	15c4983a 	sll	r2,r2,r23
81120df8:	d8000b15 	stw	zero,44(sp)
81120dfc:	d8800d15 	stw	r2,52(sp)
81120e00:	2707883a 	add	r3,r4,fp
81120e04:	d9000917 	ldw	r4,36(sp)
81120e08:	b739883a 	add	fp,r22,fp
81120e0c:	20ef883a 	add	r23,r4,r3
81120e10:	b009883a 	mov	r4,r22
81120e14:	e580010e 	bge	fp,r22,81120e1c <_strtod_r+0x898>
81120e18:	e009883a 	mov	r4,fp
81120e1c:	b805883a 	mov	r2,r23
81120e20:	25c0010e 	bge	r4,r23,81120e28 <_strtod_r+0x8a4>
81120e24:	2005883a 	mov	r2,r4
81120e28:	0080030e 	bge	zero,r2,81120e38 <_strtod_r+0x8b4>
81120e2c:	e0b9c83a 	sub	fp,fp,r2
81120e30:	b8afc83a 	sub	r23,r23,r2
81120e34:	b0adc83a 	sub	r22,r22,r2
81120e38:	d9400c17 	ldw	r5,48(sp)
81120e3c:	28001126 	beq	r5,zero,81120e84 <_strtod_r+0x900>
81120e40:	280d883a 	mov	r6,r5
81120e44:	8009883a 	mov	r4,r16
81120e48:	980b883a 	mov	r5,r19
81120e4c:	111f3280 	call	8111f328 <__pow5mult>
81120e50:	1027883a 	mov	r19,r2
81120e54:	1000e926 	beq	r2,zero,811211fc <_strtod_r+0xc78>
81120e58:	d9800517 	ldw	r6,20(sp)
81120e5c:	100b883a 	mov	r5,r2
81120e60:	8009883a 	mov	r4,r16
81120e64:	111f1280 	call	8111f128 <__multiply>
81120e68:	1000e426 	beq	r2,zero,811211fc <_strtod_r+0xc78>
81120e6c:	d9400517 	ldw	r5,20(sp)
81120e70:	8009883a 	mov	r4,r16
81120e74:	d8801315 	stw	r2,76(sp)
81120e78:	111ed700 	call	8111ed70 <_Bfree>
81120e7c:	d8801317 	ldw	r2,76(sp)
81120e80:	d8800515 	stw	r2,20(sp)
81120e84:	0700060e 	bge	zero,fp,81120ea0 <_strtod_r+0x91c>
81120e88:	d9400517 	ldw	r5,20(sp)
81120e8c:	e00d883a 	mov	r6,fp
81120e90:	8009883a 	mov	r4,r16
81120e94:	111f4700 	call	8111f470 <__lshift>
81120e98:	d8800515 	stw	r2,20(sp)
81120e9c:	10023926 	beq	r2,zero,81121784 <_strtod_r+0x1200>
81120ea0:	d8800a17 	ldw	r2,40(sp)
81120ea4:	10000626 	beq	r2,zero,81120ec0 <_strtod_r+0x93c>
81120ea8:	d9800a17 	ldw	r6,40(sp)
81120eac:	a00b883a 	mov	r5,r20
81120eb0:	8009883a 	mov	r4,r16
81120eb4:	111f3280 	call	8111f328 <__pow5mult>
81120eb8:	1029883a 	mov	r20,r2
81120ebc:	1000cf26 	beq	r2,zero,811211fc <_strtod_r+0xc78>
81120ec0:	05c0060e 	bge	zero,r23,81120edc <_strtod_r+0x958>
81120ec4:	a00b883a 	mov	r5,r20
81120ec8:	b80d883a 	mov	r6,r23
81120ecc:	8009883a 	mov	r4,r16
81120ed0:	111f4700 	call	8111f470 <__lshift>
81120ed4:	1029883a 	mov	r20,r2
81120ed8:	1000c826 	beq	r2,zero,811211fc <_strtod_r+0xc78>
81120edc:	0580060e 	bge	zero,r22,81120ef8 <_strtod_r+0x974>
81120ee0:	980b883a 	mov	r5,r19
81120ee4:	b00d883a 	mov	r6,r22
81120ee8:	8009883a 	mov	r4,r16
81120eec:	111f4700 	call	8111f470 <__lshift>
81120ef0:	1027883a 	mov	r19,r2
81120ef4:	1000c126 	beq	r2,zero,811211fc <_strtod_r+0xc78>
81120ef8:	d9400517 	ldw	r5,20(sp)
81120efc:	a00d883a 	mov	r6,r20
81120f00:	8009883a 	mov	r4,r16
81120f04:	111f6200 	call	8111f620 <__mdiff>
81120f08:	102b883a 	mov	r21,r2
81120f0c:	1000bb26 	beq	r2,zero,811211fc <_strtod_r+0xc78>
81120f10:	10c00317 	ldw	r3,12(r2)
81120f14:	980b883a 	mov	r5,r19
81120f18:	10000315 	stw	zero,12(r2)
81120f1c:	1009883a 	mov	r4,r2
81120f20:	d8c00e15 	stw	r3,56(sp)
81120f24:	111f5c00 	call	8111f5c0 <__mcmp>
81120f28:	10027616 	blt	r2,zero,81121904 <_strtod_r+0x1380>
81120f2c:	10024426 	beq	r2,zero,81121840 <_strtod_r+0x12bc>
81120f30:	980b883a 	mov	r5,r19
81120f34:	a809883a 	mov	r4,r21
81120f38:	111faf00 	call	8111faf0 <__ratio>
81120f3c:	000d883a 	mov	r6,zero
81120f40:	01d00034 	movhi	r7,16384
81120f44:	1009883a 	mov	r4,r2
81120f48:	180b883a 	mov	r5,r3
81120f4c:	102f883a 	mov	r23,r2
81120f50:	182d883a 	mov	r22,r3
81120f54:	11286380 	call	81128638 <__ledf2>
81120f58:	00804a16 	blt	zero,r2,81121084 <_strtod_r+0xb00>
81120f5c:	d9400e17 	ldw	r5,56(sp)
81120f60:	28006b26 	beq	r5,zero,81121110 <_strtod_r+0xb8c>
81120f64:	058ffc34 	movhi	r22,16368
81120f68:	d8000b15 	stw	zero,44(sp)
81120f6c:	d8000d15 	stw	zero,52(sp)
81120f70:	b02f883a 	mov	r23,r22
81120f74:	8f1ffc2c 	andhi	fp,r17,32752
81120f78:	009ff834 	movhi	r2,32736
81120f7c:	e080cd26 	beq	fp,r2,811212b4 <_strtod_r+0xd30>
81120f80:	d9400917 	ldw	r5,36(sp)
81120f84:	28001a26 	beq	r5,zero,81120ff0 <_strtod_r+0xa6c>
81120f88:	0081a834 	movhi	r2,1696
81120f8c:	17001836 	bltu	r2,fp,81120ff0 <_strtod_r+0xa6c>
81120f90:	d9000d17 	ldw	r4,52(sp)
81120f94:	01d07834 	movhi	r7,16864
81120f98:	39ffffc4 	addi	r7,r7,-1
81120f9c:	01bff034 	movhi	r6,65472
81120fa0:	b80b883a 	mov	r5,r23
81120fa4:	11286380 	call	81128638 <__ledf2>
81120fa8:	00800e16 	blt	zero,r2,81120fe4 <_strtod_r+0xa60>
81120fac:	d9000d17 	ldw	r4,52(sp)
81120fb0:	b80b883a 	mov	r5,r23
81120fb4:	11264440 	call	81126444 <__fixunsdfsi>
81120fb8:	10018126 	beq	r2,zero,811215c0 <_strtod_r+0x103c>
81120fbc:	1009883a 	mov	r4,r2
81120fc0:	11291940 	call	81129194 <__floatunsidf>
81120fc4:	d8800d15 	stw	r2,52(sp)
81120fc8:	182f883a 	mov	r23,r3
81120fcc:	d8800e17 	ldw	r2,56(sp)
81120fd0:	1001791e 	bne	r2,zero,811215b8 <_strtod_r+0x1034>
81120fd4:	ba20003c 	xorhi	r8,r23,32768
81120fd8:	d8c00d17 	ldw	r3,52(sp)
81120fdc:	402d883a 	mov	r22,r8
81120fe0:	d8c00b15 	stw	r3,44(sp)
81120fe4:	0081ac34 	movhi	r2,1712
81120fe8:	b091883a 	add	r8,r22,r2
81120fec:	472dc83a 	sub	r22,r8,fp
81120ff0:	9009883a 	mov	r4,r18
81120ff4:	880b883a 	mov	r5,r17
81120ff8:	111f8240 	call	8111f824 <__ulp>
81120ffc:	d9000b17 	ldw	r4,44(sp)
81121000:	b00b883a 	mov	r5,r22
81121004:	100d883a 	mov	r6,r2
81121008:	180f883a 	mov	r7,r3
8112100c:	1112e200 	call	81112e20 <__muldf3>
81121010:	900d883a 	mov	r6,r18
81121014:	880f883a 	mov	r7,r17
81121018:	1009883a 	mov	r4,r2
8112101c:	180b883a 	mov	r5,r3
81121020:	11273300 	call	81127330 <__adddf3>
81121024:	1025883a 	mov	r18,r2
81121028:	1823883a 	mov	r17,r3
8112102c:	182d883a 	mov	r22,r3
81121030:	d9000917 	ldw	r4,36(sp)
81121034:	2000021e 	bne	r4,zero,81121040 <_strtod_r+0xabc>
81121038:	b09ffc2c 	andhi	r2,r22,32752
8112103c:	e080be26 	beq	fp,r2,81121338 <_strtod_r+0xdb4>
81121040:	d9400517 	ldw	r5,20(sp)
81121044:	8009883a 	mov	r4,r16
81121048:	111ed700 	call	8111ed70 <_Bfree>
8112104c:	a00b883a 	mov	r5,r20
81121050:	8009883a 	mov	r4,r16
81121054:	111ed700 	call	8111ed70 <_Bfree>
81121058:	980b883a 	mov	r5,r19
8112105c:	8009883a 	mov	r4,r16
81121060:	111ed700 	call	8111ed70 <_Bfree>
81121064:	a80b883a 	mov	r5,r21
81121068:	8009883a 	mov	r4,r16
8112106c:	111ed700 	call	8111ed70 <_Bfree>
81121070:	003f2f06 	br	81120d30 <__reset+0xfb100d30>
81121074:	00c00044 	movi	r3,1
81121078:	d8000b15 	stw	zero,44(sp)
8112107c:	d8c00d15 	stw	r3,52(sp)
81121080:	003f5f06 	br	81120e00 <__reset+0xfb100e00>
81121084:	b809883a 	mov	r4,r23
81121088:	000d883a 	mov	r6,zero
8112108c:	01cff834 	movhi	r7,16352
81121090:	b00b883a 	mov	r5,r22
81121094:	1112e200 	call	81112e20 <__muldf3>
81121098:	d9000e17 	ldw	r4,56(sp)
8112109c:	d8800d15 	stw	r2,52(sp)
811210a0:	182f883a 	mov	r23,r3
811210a4:	2000181e 	bne	r4,zero,81121108 <_strtod_r+0xb84>
811210a8:	1a20003c 	xorhi	r8,r3,32768
811210ac:	d8800b15 	stw	r2,44(sp)
811210b0:	402d883a 	mov	r22,r8
811210b4:	003faf06 	br	81120f74 <__reset+0xfb100f74>
811210b8:	0015883a 	mov	r10,zero
811210bc:	02c00044 	movi	r11,1
811210c0:	2800011e 	bne	r5,zero,811210c8 <_strtod_r+0xb44>
811210c4:	903d7e26 	beq	r18,zero,811206c0 <__reset+0xfb1006c0>
811210c8:	0013883a 	mov	r9,zero
811210cc:	003e4706 	br	811209ec <__reset+0xfb1009ec>
811210d0:	d8c00a17 	ldw	r3,40(sp)
811210d4:	dd800c17 	ldw	r22,48(sp)
811210d8:	1889c83a 	sub	r4,r3,r2
811210dc:	003f3706 	br	81120dbc <__reset+0xfb100dbc>
811210e0:	00bef884 	movi	r2,-1054
811210e4:	05c00044 	movi	r23,1
811210e8:	10c5c83a 	sub	r2,r2,r3
811210ec:	b884983a 	sll	r2,r23,r2
811210f0:	ddc00d15 	stw	r23,52(sp)
811210f4:	d8800b15 	stw	r2,44(sp)
811210f8:	003f4106 	br	81120e00 <__reset+0xfb100e00>
811210fc:	ddc00615 	stw	r23,24(sp)
81121100:	002b883a 	mov	r21,zero
81121104:	003dc306 	br	81120814 <__reset+0xfb100814>
81121108:	1811883a 	mov	r8,r3
8112110c:	003fe706 	br	811210ac <__reset+0xfb1010ac>
81121110:	90002e1e 	bne	r18,zero,811211cc <_strtod_r+0xc48>
81121114:	00c00434 	movhi	r3,16
81121118:	18ffffc4 	addi	r3,r3,-1
8112111c:	88c4703a 	and	r2,r17,r3
81121120:	10002c1e 	bne	r2,zero,811211d4 <_strtod_r+0xc50>
81121124:	000d883a 	mov	r6,zero
81121128:	01cffc34 	movhi	r7,16368
8112112c:	b809883a 	mov	r4,r23
81121130:	b00b883a 	mov	r5,r22
81121134:	11286380 	call	81128638 <__ledf2>
81121138:	10021716 	blt	r2,zero,81121998 <_strtod_r+0x1414>
8112113c:	b809883a 	mov	r4,r23
81121140:	b00b883a 	mov	r5,r22
81121144:	000d883a 	mov	r6,zero
81121148:	01cff834 	movhi	r7,16352
8112114c:	1112e200 	call	81112e20 <__muldf3>
81121150:	d8800d15 	stw	r2,52(sp)
81121154:	182f883a 	mov	r23,r3
81121158:	102d883a 	mov	r22,r2
8112115c:	1a20003c 	xorhi	r8,r3,32768
81121160:	dd800b15 	stw	r22,44(sp)
81121164:	402d883a 	mov	r22,r8
81121168:	003f8206 	br	81120f74 <__reset+0xfb100f74>
8112116c:	b013883a 	mov	r9,r22
81121170:	000b883a 	mov	r5,zero
81121174:	0015883a 	mov	r10,zero
81121178:	893ff404 	addi	r4,r17,-48
8112117c:	00800244 	movi	r2,9
81121180:	11001036 	bltu	r2,r4,811211c4 <_strtod_r+0xc40>
81121184:	28c00044 	addi	r3,r5,1
81121188:	2023883a 	mov	r17,r4
8112118c:	20014d1e 	bne	r4,zero,811216c4 <_strtod_r+0x1140>
81121190:	d9800617 	ldw	r6,24(sp)
81121194:	180b883a 	mov	r5,r3
81121198:	30800044 	addi	r2,r6,1
8112119c:	d8800615 	stw	r2,24(sp)
811211a0:	34400047 	ldb	r17,1(r6)
811211a4:	003ff406 	br	81121178 <__reset+0xfb101178>
811211a8:	0019883a 	mov	r12,zero
811211ac:	b8800084 	addi	r2,r23,2
811211b0:	d8800615 	stw	r2,24(sp)
811211b4:	bc400087 	ldb	r17,2(r23)
811211b8:	003e1606 	br	81120a14 <__reset+0xfb100a14>
811211bc:	03000044 	movi	r12,1
811211c0:	003ffa06 	br	811211ac <__reset+0xfb1011ac>
811211c4:	02c00044 	movi	r11,1
811211c8:	003d8d06 	br	81120800 <__reset+0xfb100800>
811211cc:	00800044 	movi	r2,1
811211d0:	9080fe26 	beq	r18,r2,811215cc <_strtod_r+0x1048>
811211d4:	d8000b15 	stw	zero,44(sp)
811211d8:	05affc34 	movhi	r22,49136
811211dc:	d8000d15 	stw	zero,52(sp)
811211e0:	05cffc34 	movhi	r23,16368
811211e4:	003f6306 	br	81120f74 <__reset+0xfb100f74>
811211e8:	d8000a15 	stw	zero,40(sp)
811211ec:	003ec906 	br	81120d14 <__reset+0xfb100d14>
811211f0:	d9001117 	ldw	r4,68(sp)
811211f4:	00bfffc4 	movi	r2,-1
811211f8:	2080461e 	bne	r4,r2,81121314 <_strtod_r+0xd90>
811211fc:	dd000a15 	stw	r20,40(sp)
81121200:	dd001217 	ldw	r20,72(sp)
81121204:	a811883a 	mov	r8,r21
81121208:	d8800517 	ldw	r2,20(sp)
8112120c:	00c00884 	movi	r3,34
81121210:	80c00015 	stw	r3,0(r16)
81121214:	002b883a 	mov	r21,zero
81121218:	059ffc34 	movhi	r22,32752
8112121c:	100b883a 	mov	r5,r2
81121220:	8009883a 	mov	r4,r16
81121224:	da001315 	stw	r8,76(sp)
81121228:	111ed700 	call	8111ed70 <_Bfree>
8112122c:	d9400a17 	ldw	r5,40(sp)
81121230:	8009883a 	mov	r4,r16
81121234:	111ed700 	call	8111ed70 <_Bfree>
81121238:	980b883a 	mov	r5,r19
8112123c:	8009883a 	mov	r4,r16
81121240:	111ed700 	call	8111ed70 <_Bfree>
81121244:	d9400817 	ldw	r5,32(sp)
81121248:	8009883a 	mov	r4,r16
8112124c:	111ed700 	call	8111ed70 <_Bfree>
81121250:	da001317 	ldw	r8,76(sp)
81121254:	8009883a 	mov	r4,r16
81121258:	400b883a 	mov	r5,r8
8112125c:	111ed700 	call	8111ed70 <_Bfree>
81121260:	003d9206 	br	811208ac <__reset+0xfb1008ac>
81121264:	d8c00717 	ldw	r3,28(sp)
81121268:	d8800504 	addi	r2,sp,20
8112126c:	01a04534 	movhi	r6,33044
81121270:	31892004 	addi	r6,r6,9344
81121274:	d8c00115 	stw	r3,4(sp)
81121278:	d8800015 	stw	r2,0(sp)
8112127c:	d9c00404 	addi	r7,sp,16
81121280:	d9400604 	addi	r5,sp,24
81121284:	8009883a 	mov	r4,r16
81121288:	11256d80 	call	811256d8 <__gethex>
8112128c:	154001cc 	andi	r21,r2,7
81121290:	a83d9b26 	beq	r21,zero,81120900 <__reset+0xfb100900>
81121294:	00c00184 	movi	r3,6
81121298:	a8c0d61e 	bne	r21,r3,811215f4 <_strtod_r+0x1070>
8112129c:	9cc00044 	addi	r19,r19,1
811212a0:	dcc00615 	stw	r19,24(sp)
811212a4:	002b883a 	mov	r21,zero
811212a8:	002d883a 	mov	r22,zero
811212ac:	d8000715 	stw	zero,28(sp)
811212b0:	003d7e06 	br	811208ac <__reset+0xfb1008ac>
811212b4:	00bf2c34 	movhi	r2,64688
811212b8:	88a3883a 	add	r17,r17,r2
811212bc:	9009883a 	mov	r4,r18
811212c0:	880b883a 	mov	r5,r17
811212c4:	111f8240 	call	8111f824 <__ulp>
811212c8:	d9000b17 	ldw	r4,44(sp)
811212cc:	100d883a 	mov	r6,r2
811212d0:	180f883a 	mov	r7,r3
811212d4:	b00b883a 	mov	r5,r22
811212d8:	1112e200 	call	81112e20 <__muldf3>
811212dc:	900d883a 	mov	r6,r18
811212e0:	180b883a 	mov	r5,r3
811212e4:	880f883a 	mov	r7,r17
811212e8:	1009883a 	mov	r4,r2
811212ec:	11273300 	call	81127330 <__adddf3>
811212f0:	015f2834 	movhi	r5,31904
811212f4:	1025883a 	mov	r18,r2
811212f8:	297fffc4 	addi	r5,r5,-1
811212fc:	189ffc2c 	andhi	r2,r3,32752
81121300:	2880892e 	bgeu	r5,r2,81121528 <_strtod_r+0xfa4>
81121304:	d8801017 	ldw	r2,64(sp)
81121308:	00dffc34 	movhi	r3,32752
8112130c:	18ffffc4 	addi	r3,r3,-1
81121310:	10ffb726 	beq	r2,r3,811211f0 <__reset+0xfb1011f0>
81121314:	045ffc34 	movhi	r17,32752
81121318:	8c7fffc4 	addi	r17,r17,-1
8112131c:	04bfffc4 	movi	r18,-1
81121320:	003f4706 	br	81121040 <__reset+0xfb101040>
81121324:	00800884 	movi	r2,34
81121328:	80800015 	stw	r2,0(r16)
8112132c:	002b883a 	mov	r21,zero
81121330:	059ffc34 	movhi	r22,32752
81121334:	003d5d06 	br	811208ac <__reset+0xfb1008ac>
81121338:	d9000d17 	ldw	r4,52(sp)
8112133c:	b80b883a 	mov	r5,r23
81121340:	11290300 	call	81129030 <__fixdfsi>
81121344:	1009883a 	mov	r4,r2
81121348:	11290b00 	call	811290b0 <__floatsidf>
8112134c:	d9000d17 	ldw	r4,52(sp)
81121350:	b80b883a 	mov	r5,r23
81121354:	100d883a 	mov	r6,r2
81121358:	180f883a 	mov	r7,r3
8112135c:	112872c0 	call	8112872c <__subdf3>
81121360:	d9400e17 	ldw	r5,56(sp)
81121364:	1039883a 	mov	fp,r2
81121368:	182f883a 	mov	r23,r3
8112136c:	2800141e 	bne	r5,zero,811213c0 <_strtod_r+0xe3c>
81121370:	9000131e 	bne	r18,zero,811213c0 <_strtod_r+0xe3c>
81121374:	00800434 	movhi	r2,16
81121378:	10bfffc4 	addi	r2,r2,-1
8112137c:	b0ac703a 	and	r22,r22,r2
81121380:	b0000f1e 	bne	r22,zero,811213c0 <_strtod_r+0xe3c>
81121384:	01a52834 	movhi	r6,38048
81121388:	01cff434 	movhi	r7,16336
8112138c:	318d6544 	addi	r6,r6,13717
81121390:	39ffffc4 	addi	r7,r7,-1
81121394:	e009883a 	mov	r4,fp
81121398:	180b883a 	mov	r5,r3
8112139c:	11286380 	call	81128638 <__ledf2>
811213a0:	103f270e 	bge	r2,zero,81121040 <__reset+0xfb101040>
811213a4:	dd000a15 	stw	r20,40(sp)
811213a8:	a811883a 	mov	r8,r21
811213ac:	dd001217 	ldw	r20,72(sp)
811213b0:	d8800517 	ldw	r2,20(sp)
811213b4:	002b883a 	mov	r21,zero
811213b8:	882d883a 	mov	r22,r17
811213bc:	003f9706 	br	8112121c <__reset+0xfb10121c>
811213c0:	01a52834 	movhi	r6,38048
811213c4:	01cff834 	movhi	r7,16352
811213c8:	318d6544 	addi	r6,r6,13717
811213cc:	39ffffc4 	addi	r7,r7,-1
811213d0:	e009883a 	mov	r4,fp
811213d4:	b80b883a 	mov	r5,r23
811213d8:	11286380 	call	81128638 <__ledf2>
811213dc:	10000716 	blt	r2,zero,811213fc <_strtod_r+0xe78>
811213e0:	018d6c34 	movhi	r6,13744
811213e4:	31b94d44 	addi	r6,r6,-6859
811213e8:	01cff834 	movhi	r7,16352
811213ec:	e009883a 	mov	r4,fp
811213f0:	b80b883a 	mov	r5,r23
811213f4:	112855c0 	call	8112855c <__gedf2>
811213f8:	00bf110e 	bge	zero,r2,81121040 <__reset+0xfb101040>
811213fc:	dd000a15 	stw	r20,40(sp)
81121400:	a811883a 	mov	r8,r21
81121404:	dd001217 	ldw	r20,72(sp)
81121408:	d8800517 	ldw	r2,20(sp)
8112140c:	902b883a 	mov	r21,r18
81121410:	882d883a 	mov	r22,r17
81121414:	003f8106 	br	8112121c <__reset+0xfb10121c>
81121418:	b83e2f26 	beq	r23,zero,81120cd8 <__reset+0xfb100cd8>
8112141c:	05efc83a 	sub	r23,zero,r23
81121420:	b88003cc 	andi	r2,r23,15
81121424:	10000d26 	beq	r2,zero,8112145c <_strtod_r+0xed8>
81121428:	100490fa 	slli	r2,r2,3
8112142c:	00e04534 	movhi	r3,33044
81121430:	18c8e504 	addi	r3,r3,9108
81121434:	1885883a 	add	r2,r3,r2
81121438:	11800017 	ldw	r6,0(r2)
8112143c:	11c00117 	ldw	r7,4(r2)
81121440:	9009883a 	mov	r4,r18
81121444:	880b883a 	mov	r5,r17
81121448:	da401315 	stw	r9,76(sp)
8112144c:	1127be40 	call	81127be4 <__divdf3>
81121450:	da401317 	ldw	r9,76(sp)
81121454:	1025883a 	mov	r18,r2
81121458:	1823883a 	mov	r17,r3
8112145c:	b82fd13a 	srai	r23,r23,4
81121460:	b83e1d26 	beq	r23,zero,81120cd8 <__reset+0xfb100cd8>
81121464:	008007c4 	movi	r2,31
81121468:	15c02816 	blt	r2,r23,8112150c <_strtod_r+0xf88>
8112146c:	b880040c 	andi	r2,r23,16
81121470:	10019726 	beq	r2,zero,81121ad0 <_strtod_r+0x154c>
81121474:	05c1880e 	bge	zero,r23,81121a98 <_strtod_r+0x1514>
81121478:	00c01a84 	movi	r3,106
8112147c:	d8c00915 	stw	r3,36(sp)
81121480:	04e04534 	movhi	r19,33044
81121484:	9cc92504 	addi	r19,r19,9364
81121488:	8807883a 	mov	r3,r17
8112148c:	9005883a 	mov	r2,r18
81121490:	8023883a 	mov	r17,r16
81121494:	0009883a 	mov	r4,zero
81121498:	9821883a 	mov	r16,r19
8112149c:	da400a15 	stw	r9,40(sp)
811214a0:	1827883a 	mov	r19,r3
811214a4:	b980004c 	andi	r6,r23,1
811214a8:	30000626 	beq	r6,zero,811214c4 <_strtod_r+0xf40>
811214ac:	81800017 	ldw	r6,0(r16)
811214b0:	81c00117 	ldw	r7,4(r16)
811214b4:	1009883a 	mov	r4,r2
811214b8:	180b883a 	mov	r5,r3
811214bc:	1112e200 	call	81112e20 <__muldf3>
811214c0:	01000044 	movi	r4,1
811214c4:	b82fd07a 	srai	r23,r23,1
811214c8:	84000204 	addi	r16,r16,8
811214cc:	b83ff51e 	bne	r23,zero,811214a4 <__reset+0xfb1014a4>
811214d0:	21003fcc 	andi	r4,r4,255
811214d4:	8821883a 	mov	r16,r17
811214d8:	da400a17 	ldw	r9,40(sp)
811214dc:	9823883a 	mov	r17,r19
811214e0:	2001a51e 	bne	r4,zero,81121b78 <_strtod_r+0x15f4>
811214e4:	d9000917 	ldw	r4,36(sp)
811214e8:	20016d1e 	bne	r4,zero,81121aa0 <_strtod_r+0x151c>
811214ec:	000d883a 	mov	r6,zero
811214f0:	000f883a 	mov	r7,zero
811214f4:	9009883a 	mov	r4,r18
811214f8:	880b883a 	mov	r5,r17
811214fc:	da401315 	stw	r9,76(sp)
81121500:	11284d40 	call	811284d4 <__eqdf2>
81121504:	da401317 	ldw	r9,76(sp)
81121508:	103df41e 	bne	r2,zero,81120cdc <__reset+0xfb100cdc>
8112150c:	00800884 	movi	r2,34
81121510:	80800015 	stw	r2,0(r16)
81121514:	002b883a 	mov	r21,zero
81121518:	002d883a 	mov	r22,zero
8112151c:	003ce306 	br	811208ac <__reset+0xfb1008ac>
81121520:	055387c4 	movi	r21,19999
81121524:	003d6b06 	br	81120ad4 <__reset+0xfb100ad4>
81121528:	0440d434 	movhi	r17,848
8112152c:	1c63883a 	add	r17,r3,r17
81121530:	882d883a 	mov	r22,r17
81121534:	003ebe06 	br	81121030 <__reset+0xfb101030>
81121538:	14403fcc 	andi	r17,r2,255
8112153c:	8c40201c 	xori	r17,r17,128
81121540:	8c7fe004 	addi	r17,r17,-128
81121544:	dd400817 	ldw	r21,32(sp)
81121548:	0027883a 	mov	r19,zero
8112154c:	0039883a 	mov	fp,zero
81121550:	002d883a 	mov	r22,zero
81121554:	003c9906 	br	811207bc <__reset+0xfb1007bc>
81121558:	00c00944 	movi	r3,37
8112155c:	1a47c83a 	sub	r3,r3,r9
81121560:	1d7d8c16 	blt	r3,r21,81120b94 <__reset+0xfb100b94>
81121564:	1261c83a 	sub	r16,r2,r9
81121568:	800490fa 	slli	r2,r16,3
8112156c:	04e04534 	movhi	r19,33044
81121570:	9cc8e504 	addi	r19,r19,9108
81121574:	9885883a 	add	r2,r19,r2
81121578:	11000017 	ldw	r4,0(r2)
8112157c:	11400117 	ldw	r5,4(r2)
81121580:	900d883a 	mov	r6,r18
81121584:	880f883a 	mov	r7,r17
81121588:	1112e200 	call	81112e20 <__muldf3>
8112158c:	ac0dc83a 	sub	r6,r21,r16
81121590:	300c90fa 	slli	r6,r6,3
81121594:	1009883a 	mov	r4,r2
81121598:	180b883a 	mov	r5,r3
8112159c:	9985883a 	add	r2,r19,r6
811215a0:	11800017 	ldw	r6,0(r2)
811215a4:	11c00117 	ldw	r7,4(r2)
811215a8:	1112e200 	call	81112e20 <__muldf3>
811215ac:	102b883a 	mov	r21,r2
811215b0:	182d883a 	mov	r22,r3
811215b4:	003cbd06 	br	811208ac <__reset+0xfb1008ac>
811215b8:	b811883a 	mov	r8,r23
811215bc:	003e8606 	br	81120fd8 <__reset+0xfb100fd8>
811215c0:	d8000d15 	stw	zero,52(sp)
811215c4:	05cffc34 	movhi	r23,16368
811215c8:	003e8006 	br	81120fcc <__reset+0xfb100fcc>
811215cc:	883f011e 	bne	r17,zero,811211d4 <__reset+0xfb1011d4>
811215d0:	dd000a15 	stw	r20,40(sp)
811215d4:	dd001217 	ldw	r20,72(sp)
811215d8:	a811883a 	mov	r8,r21
811215dc:	00800884 	movi	r2,34
811215e0:	80800015 	stw	r2,0(r16)
811215e4:	002b883a 	mov	r21,zero
811215e8:	d8800517 	ldw	r2,20(sp)
811215ec:	002d883a 	mov	r22,zero
811215f0:	003f0a06 	br	8112121c <__reset+0xfb10121c>
811215f4:	d9800517 	ldw	r6,20(sp)
811215f8:	30000826 	beq	r6,zero,8112161c <_strtod_r+0x1098>
811215fc:	01400d44 	movi	r5,53
81121600:	d9000204 	addi	r4,sp,8
81121604:	d8801315 	stw	r2,76(sp)
81121608:	111fc180 	call	8111fc18 <__copybits>
8112160c:	d9400517 	ldw	r5,20(sp)
81121610:	8009883a 	mov	r4,r16
81121614:	111ed700 	call	8111ed70 <_Bfree>
81121618:	d8801317 	ldw	r2,76(sp)
8112161c:	00c00184 	movi	r3,6
81121620:	1d400f36 	bltu	r3,r21,81121660 <_strtod_r+0x10dc>
81121624:	a82a90ba 	slli	r21,r21,2
81121628:	00e044b4 	movhi	r3,33042
8112162c:	18c58f04 	addi	r3,r3,5692
81121630:	a8eb883a 	add	r21,r21,r3
81121634:	a8c00017 	ldw	r3,0(r21)
81121638:	1800683a 	jmp	r3
8112163c:	811216b8 	rdprs	r4,r16,18522
81121640:	81121690 	cmplti	r4,r16,18522
81121644:	81121674 	orhi	r4,r16,18521
81121648:	81121658 	cmpnei	r4,r16,18521
8112164c:	81121680 	call	88112168 <__reset+0x20f2168>
81121650:	81121690 	cmplti	r4,r16,18522
81121654:	811216b8 	rdprs	r4,r16,18522
81121658:	045ffc34 	movhi	r17,32752
8112165c:	0025883a 	mov	r18,zero
81121660:	1080020c 	andi	r2,r2,8
81121664:	902b883a 	mov	r21,r18
81121668:	103c8f26 	beq	r2,zero,811208a8 <__reset+0xfb1008a8>
8112166c:	8da00034 	orhi	r22,r17,32768
81121670:	003c8e06 	br	811208ac <__reset+0xfb1008ac>
81121674:	dc800217 	ldw	r18,8(sp)
81121678:	dc400317 	ldw	r17,12(sp)
8112167c:	003ff806 	br	81121660 <__reset+0xfb101660>
81121680:	04600034 	movhi	r17,32768
81121684:	8c7fffc4 	addi	r17,r17,-1
81121688:	04bfffc4 	movi	r18,-1
8112168c:	003ff406 	br	81121660 <__reset+0xfb101660>
81121690:	d8c00417 	ldw	r3,16(sp)
81121694:	dc400317 	ldw	r17,12(sp)
81121698:	013ffc34 	movhi	r4,65520
8112169c:	18c10cc4 	addi	r3,r3,1075
811216a0:	1806953a 	slli	r3,r3,20
811216a4:	213fffc4 	addi	r4,r4,-1
811216a8:	8922703a 	and	r17,r17,r4
811216ac:	dc800217 	ldw	r18,8(sp)
811216b0:	88e2b03a 	or	r17,r17,r3
811216b4:	003fea06 	br	81121660 <__reset+0xfb101660>
811216b8:	0023883a 	mov	r17,zero
811216bc:	0025883a 	mov	r18,zero
811216c0:	003fe706 	br	81121660 <__reset+0xfb101660>
811216c4:	01800044 	movi	r6,1
811216c8:	50d5883a 	add	r10,r10,r3
811216cc:	2a4b883a 	add	r5,r5,r9
811216d0:	19811a26 	beq	r3,r6,81121b3c <_strtod_r+0x15b8>
811216d4:	01800204 	movi	r6,8
811216d8:	01c00404 	movi	r7,16
811216dc:	4a400044 	addi	r9,r9,1
811216e0:	48bfffc4 	addi	r2,r9,-1
811216e4:	30801616 	blt	r6,r2,81121740 <_strtod_r+0x11bc>
811216e8:	e70002a4 	muli	fp,fp,10
811216ec:	497ffb1e 	bne	r9,r5,811216dc <__reset+0xfb1016dc>
811216f0:	d9800617 	ldw	r6,24(sp)
811216f4:	4a400044 	addi	r9,r9,1
811216f8:	00c00204 	movi	r3,8
811216fc:	19400c0e 	bge	r3,r5,81121730 <_strtod_r+0x11ac>
81121700:	00800404 	movi	r2,16
81121704:	000b883a 	mov	r5,zero
81121708:	127ea316 	blt	r2,r9,81121198 <__reset+0xfb101198>
8112170c:	988002a4 	muli	r2,r19,10
81121710:	20a7883a 	add	r19,r4,r2
81121714:	003ea006 	br	81121198 <__reset+0xfb101198>
81121718:	d8800617 	ldw	r2,24(sp)
8112171c:	8c7ff404 	addi	r17,r17,-48
81121720:	2a800044 	addi	r10,r5,1
81121724:	d8800815 	stw	r2,32(sp)
81121728:	100d883a 	mov	r6,r2
8112172c:	02400044 	movi	r9,1
81121730:	e08002a4 	muli	r2,fp,10
81121734:	000b883a 	mov	r5,zero
81121738:	88b9883a 	add	fp,r17,r2
8112173c:	003e9606 	br	81121198 <__reset+0xfb101198>
81121740:	3a7fea16 	blt	r7,r9,811216ec <__reset+0xfb1016ec>
81121744:	9cc002a4 	muli	r19,r19,10
81121748:	003fe806 	br	811216ec <__reset+0xfb1016ec>
8112174c:	00bffa84 	movi	r2,-22
81121750:	a8bd1016 	blt	r21,r2,81120b94 <__reset+0xfb100b94>
81121754:	a82a90fa 	slli	r21,r21,3
81121758:	00a04534 	movhi	r2,33044
8112175c:	1088e504 	addi	r2,r2,9108
81121760:	1545c83a 	sub	r2,r2,r21
81121764:	11800017 	ldw	r6,0(r2)
81121768:	11c00117 	ldw	r7,4(r2)
8112176c:	9009883a 	mov	r4,r18
81121770:	880b883a 	mov	r5,r17
81121774:	1127be40 	call	81127be4 <__divdf3>
81121778:	102b883a 	mov	r21,r2
8112177c:	182d883a 	mov	r22,r3
81121780:	003c4a06 	br	811208ac <__reset+0xfb1008ac>
81121784:	dd000a15 	stw	r20,40(sp)
81121788:	a811883a 	mov	r8,r21
8112178c:	dd001217 	ldw	r20,72(sp)
81121790:	003e9e06 	br	8112120c <__reset+0xfb10120c>
81121794:	01604534 	movhi	r5,33044
81121798:	d9000617 	ldw	r4,24(sp)
8112179c:	29491704 	addi	r5,r5,9308
811217a0:	01c00644 	movi	r7,25
811217a4:	00000b06 	br	811217d4 <_strtod_r+0x1250>
811217a8:	21000044 	addi	r4,r4,1
811217ac:	20800003 	ldbu	r2,0(r4)
811217b0:	10ffefc4 	addi	r3,r2,-65
811217b4:	10803fcc 	andi	r2,r2,255
811217b8:	1080201c 	xori	r2,r2,128
811217bc:	18c03fcc 	andi	r3,r3,255
811217c0:	10bfe004 	addi	r2,r2,-128
811217c4:	38c00136 	bltu	r7,r3,811217cc <_strtod_r+0x1248>
811217c8:	10800804 	addi	r2,r2,32
811217cc:	29400044 	addi	r5,r5,1
811217d0:	11bbbb1e 	bne	r2,r6,811206c0 <__reset+0xfb1006c0>
811217d4:	29800007 	ldb	r6,0(r5)
811217d8:	303ff31e 	bne	r6,zero,811217a8 <__reset+0xfb1017a8>
811217dc:	01a04534 	movhi	r6,33044
811217e0:	d9000615 	stw	r4,24(sp)
811217e4:	31891804 	addi	r6,r6,9312
811217e8:	200b883a 	mov	r5,r4
811217ec:	02000644 	movi	r8,25
811217f0:	00000a06 	br	8112181c <_strtod_r+0x1298>
811217f4:	28800003 	ldbu	r2,0(r5)
811217f8:	10ffefc4 	addi	r3,r2,-65
811217fc:	10803fcc 	andi	r2,r2,255
81121800:	1080201c 	xori	r2,r2,128
81121804:	18c03fcc 	andi	r3,r3,255
81121808:	10bfe004 	addi	r2,r2,-128
8112180c:	40c00136 	bltu	r8,r3,81121814 <_strtod_r+0x1290>
81121810:	10800804 	addi	r2,r2,32
81121814:	31800044 	addi	r6,r6,1
81121818:	11c0711e 	bne	r2,r7,811219e0 <_strtod_r+0x145c>
8112181c:	31c00007 	ldb	r7,0(r6)
81121820:	29400044 	addi	r5,r5,1
81121824:	383ff31e 	bne	r7,zero,811217f4 <__reset+0xfb1017f4>
81121828:	d9400615 	stw	r5,24(sp)
8112182c:	045ffc34 	movhi	r17,32752
81121830:	0025883a 	mov	r18,zero
81121834:	003c1b06 	br	811208a4 <__reset+0xfb1008a4>
81121838:	000b883a 	mov	r5,zero
8112183c:	003ccc06 	br	81120b70 <__reset+0xfb100b70>
81121840:	d9400e17 	ldw	r5,56(sp)
81121844:	dd000a15 	stw	r20,40(sp)
81121848:	00800434 	movhi	r2,16
8112184c:	a811883a 	mov	r8,r21
81121850:	dd001217 	ldw	r20,72(sp)
81121854:	dd401117 	ldw	r21,68(sp)
81121858:	dd801017 	ldw	r22,64(sp)
8112185c:	10bfffc4 	addi	r2,r2,-1
81121860:	28005626 	beq	r5,zero,811219bc <_strtod_r+0x1438>
81121864:	8886703a 	and	r3,r17,r2
81121868:	18807826 	beq	r3,r2,81121a4c <_strtod_r+0x14c8>
8112186c:	d8c00b17 	ldw	r3,44(sp)
81121870:	18005726 	beq	r3,zero,811219d0 <_strtod_r+0x144c>
81121874:	1c44703a 	and	r2,r3,r17
81121878:	10000f26 	beq	r2,zero,811218b8 <_strtod_r+0x1334>
8112187c:	d9000e17 	ldw	r4,56(sp)
81121880:	d9800917 	ldw	r6,36(sp)
81121884:	20005e26 	beq	r4,zero,81121a00 <_strtod_r+0x147c>
81121888:	9009883a 	mov	r4,r18
8112188c:	880b883a 	mov	r5,r17
81121890:	da001315 	stw	r8,76(sp)
81121894:	11205180 	call	81120518 <sulp>
81121898:	100d883a 	mov	r6,r2
8112189c:	180f883a 	mov	r7,r3
811218a0:	9009883a 	mov	r4,r18
811218a4:	880b883a 	mov	r5,r17
811218a8:	11273300 	call	81127330 <__adddf3>
811218ac:	da001317 	ldw	r8,76(sp)
811218b0:	102b883a 	mov	r21,r2
811218b4:	182d883a 	mov	r22,r3
811218b8:	d8c00917 	ldw	r3,36(sp)
811218bc:	18000f26 	beq	r3,zero,811218fc <_strtod_r+0x1378>
811218c0:	a809883a 	mov	r4,r21
811218c4:	b00b883a 	mov	r5,r22
811218c8:	000d883a 	mov	r6,zero
811218cc:	01ce5434 	movhi	r7,14672
811218d0:	da001315 	stw	r8,76(sp)
811218d4:	1112e200 	call	81112e20 <__muldf3>
811218d8:	102b883a 	mov	r21,r2
811218dc:	182d883a 	mov	r22,r3
811218e0:	da001317 	ldw	r8,76(sp)
811218e4:	1800051e 	bne	r3,zero,811218fc <_strtod_r+0x1378>
811218e8:	d8800517 	ldw	r2,20(sp)
811218ec:	a83e4b1e 	bne	r21,zero,8112121c <__reset+0xfb10121c>
811218f0:	00c00884 	movi	r3,34
811218f4:	80c00015 	stw	r3,0(r16)
811218f8:	003e4806 	br	8112121c <__reset+0xfb10121c>
811218fc:	d8800517 	ldw	r2,20(sp)
81121900:	003e4606 	br	8112121c <__reset+0xfb10121c>
81121904:	d9000e17 	ldw	r4,56(sp)
81121908:	dd000a15 	stw	r20,40(sp)
8112190c:	a811883a 	mov	r8,r21
81121910:	dd001217 	ldw	r20,72(sp)
81121914:	dd401117 	ldw	r21,68(sp)
81121918:	dd801017 	ldw	r22,64(sp)
8112191c:	203fe61e 	bne	r4,zero,811218b8 <__reset+0xfb1018b8>
81121920:	903fe51e 	bne	r18,zero,811218b8 <__reset+0xfb1018b8>
81121924:	00800434 	movhi	r2,16
81121928:	10bfffc4 	addi	r2,r2,-1
8112192c:	8884703a 	and	r2,r17,r2
81121930:	103fe11e 	bne	r2,zero,811218b8 <__reset+0xfb1018b8>
81121934:	8ddffc2c 	andhi	r23,r17,32752
81121938:	0081ac34 	movhi	r2,1712
8112193c:	15ffde2e 	bgeu	r2,r23,811218b8 <__reset+0xfb1018b8>
81121940:	40800517 	ldw	r2,20(r8)
81121944:	1000031e 	bne	r2,zero,81121954 <_strtod_r+0x13d0>
81121948:	40800417 	ldw	r2,16(r8)
8112194c:	00c00044 	movi	r3,1
81121950:	18bfd90e 	bge	r3,r2,811218b8 <__reset+0xfb1018b8>
81121954:	400b883a 	mov	r5,r8
81121958:	01800044 	movi	r6,1
8112195c:	8009883a 	mov	r4,r16
81121960:	111f4700 	call	8111f470 <__lshift>
81121964:	980b883a 	mov	r5,r19
81121968:	1009883a 	mov	r4,r2
8112196c:	d8801315 	stw	r2,76(sp)
81121970:	111f5c00 	call	8111f5c0 <__mcmp>
81121974:	da001317 	ldw	r8,76(sp)
81121978:	00bfcf0e 	bge	zero,r2,811218b8 <__reset+0xfb1018b8>
8112197c:	d8c00917 	ldw	r3,36(sp)
81121980:	18005c26 	beq	r3,zero,81121af4 <_strtod_r+0x1570>
81121984:	0081ac34 	movhi	r2,1712
81121988:	15c05a16 	blt	r2,r23,81121af4 <_strtod_r+0x1570>
8112198c:	0080dc34 	movhi	r2,880
81121990:	15ffcb16 	blt	r2,r23,811218c0 <__reset+0xfb1018c0>
81121994:	003f1106 	br	811215dc <__reset+0xfb1015dc>
81121998:	002d883a 	mov	r22,zero
8112199c:	022ff834 	movhi	r8,49120
811219a0:	d8000d15 	stw	zero,52(sp)
811219a4:	05cff834 	movhi	r23,16352
811219a8:	003ded06 	br	81121160 <__reset+0xfb101160>
811219ac:	0440d434 	movhi	r17,848
811219b0:	1c63883a 	add	r17,r3,r17
811219b4:	d8000915 	stw	zero,36(sp)
811219b8:	003cc806 	br	81120cdc <__reset+0xfb100cdc>
811219bc:	8884703a 	and	r2,r17,r2
811219c0:	103faa1e 	bne	r2,zero,8112186c <__reset+0xfb10186c>
811219c4:	903fa91e 	bne	r18,zero,8112186c <__reset+0xfb10186c>
811219c8:	8ddffc2c 	andhi	r23,r17,32752
811219cc:	003feb06 	br	8112197c <__reset+0xfb10197c>
811219d0:	d8c00d17 	ldw	r3,52(sp)
811219d4:	1cae703a 	and	r23,r3,r18
811219d8:	b83fb726 	beq	r23,zero,811218b8 <__reset+0xfb1018b8>
811219dc:	003fa706 	br	8112187c <__reset+0xfb10187c>
811219e0:	21000044 	addi	r4,r4,1
811219e4:	d9000615 	stw	r4,24(sp)
811219e8:	003f9006 	br	8112182c <__reset+0xfb10182c>
811219ec:	01604534 	movhi	r5,33044
811219f0:	2948db04 	addi	r5,r5,9068
811219f4:	d9400915 	stw	r5,36(sp)
811219f8:	0027883a 	mov	r19,zero
811219fc:	003ca206 	br	81120c88 <__reset+0xfb100c88>
81121a00:	9009883a 	mov	r4,r18
81121a04:	880b883a 	mov	r5,r17
81121a08:	da001315 	stw	r8,76(sp)
81121a0c:	11205180 	call	81120518 <sulp>
81121a10:	100d883a 	mov	r6,r2
81121a14:	180f883a 	mov	r7,r3
81121a18:	9009883a 	mov	r4,r18
81121a1c:	880b883a 	mov	r5,r17
81121a20:	112872c0 	call	8112872c <__subdf3>
81121a24:	000d883a 	mov	r6,zero
81121a28:	000f883a 	mov	r7,zero
81121a2c:	1009883a 	mov	r4,r2
81121a30:	180b883a 	mov	r5,r3
81121a34:	102b883a 	mov	r21,r2
81121a38:	182d883a 	mov	r22,r3
81121a3c:	11284d40 	call	811284d4 <__eqdf2>
81121a40:	da001317 	ldw	r8,76(sp)
81121a44:	103ee526 	beq	r2,zero,811215dc <__reset+0xfb1015dc>
81121a48:	003f9b06 	br	811218b8 <__reset+0xfb1018b8>
81121a4c:	d8800917 	ldw	r2,36(sp)
81121a50:	10002226 	beq	r2,zero,81121adc <_strtod_r+0x1558>
81121a54:	889ffc2c 	andhi	r2,r17,32752
81121a58:	00c1a834 	movhi	r3,1696
81121a5c:	18801f36 	bltu	r3,r2,81121adc <_strtod_r+0x1558>
81121a60:	1004d53a 	srli	r2,r2,20
81121a64:	00c01ac4 	movi	r3,107
81121a68:	1887c83a 	sub	r3,r3,r2
81121a6c:	00bfffc4 	movi	r2,-1
81121a70:	10c4983a 	sll	r2,r2,r3
81121a74:	14bf7d1e 	bne	r2,r18,8112186c <__reset+0xfb10186c>
81121a78:	00dffc34 	movhi	r3,32752
81121a7c:	18ffffc4 	addi	r3,r3,-1
81121a80:	88c03526 	beq	r17,r3,81121b58 <_strtod_r+0x15d4>
81121a84:	8c5ffc2c 	andhi	r17,r17,32752
81121a88:	00800434 	movhi	r2,16
81121a8c:	002b883a 	mov	r21,zero
81121a90:	88ad883a 	add	r22,r17,r2
81121a94:	003f8806 	br	811218b8 <__reset+0xfb1018b8>
81121a98:	01401a84 	movi	r5,106
81121a9c:	d9400915 	stw	r5,36(sp)
81121aa0:	8ddffc2c 	andhi	r23,r17,32752
81121aa4:	b82ed53a 	srli	r23,r23,20
81121aa8:	00801ac4 	movi	r2,107
81121aac:	15c5c83a 	sub	r2,r2,r23
81121ab0:	00be8e0e 	bge	zero,r2,811214ec <__reset+0xfb1014ec>
81121ab4:	00c007c4 	movi	r3,31
81121ab8:	18800a0e 	bge	r3,r2,81121ae4 <_strtod_r+0x1560>
81121abc:	00c00d04 	movi	r3,52
81121ac0:	0025883a 	mov	r18,zero
81121ac4:	1880270e 	bge	r3,r2,81121b64 <_strtod_r+0x15e0>
81121ac8:	0440dc34 	movhi	r17,880
81121acc:	003e8706 	br	811214ec <__reset+0xfb1014ec>
81121ad0:	d8000915 	stw	zero,36(sp)
81121ad4:	05fe6a16 	blt	zero,r23,81121480 <__reset+0xfb101480>
81121ad8:	003e8406 	br	811214ec <__reset+0xfb1014ec>
81121adc:	00bfffc4 	movi	r2,-1
81121ae0:	003fe406 	br	81121a74 <__reset+0xfb101a74>
81121ae4:	00ffffc4 	movi	r3,-1
81121ae8:	1884983a 	sll	r2,r3,r2
81121aec:	14a4703a 	and	r18,r2,r18
81121af0:	003e7e06 	br	811214ec <__reset+0xfb1014ec>
81121af4:	00bffc34 	movhi	r2,65520
81121af8:	b8af883a 	add	r23,r23,r2
81121afc:	057fffc4 	movi	r21,-1
81121b00:	00800434 	movhi	r2,16
81121b04:	1545883a 	add	r2,r2,r21
81121b08:	b8acb03a 	or	r22,r23,r2
81121b0c:	003f6a06 	br	811218b8 <__reset+0xfb1018b8>
81121b10:	01604534 	movhi	r5,33044
81121b14:	29491b04 	addi	r5,r5,9324
81121b18:	d9800204 	addi	r6,sp,8
81121b1c:	d9000604 	addi	r4,sp,24
81121b20:	1125f100 	call	81125f10 <__hexnan>
81121b24:	00c00144 	movi	r3,5
81121b28:	10fb5c1e 	bne	r2,r3,8112089c <__reset+0xfb10089c>
81121b2c:	dc400317 	ldw	r17,12(sp)
81121b30:	dc800217 	ldw	r18,8(sp)
81121b34:	8c5ffc34 	orhi	r17,r17,32752
81121b38:	003b5a06 	br	811208a4 <__reset+0xfb1008a4>
81121b3c:	480b883a 	mov	r5,r9
81121b40:	d9800617 	ldw	r6,24(sp)
81121b44:	4a400044 	addi	r9,r9,1
81121b48:	003eeb06 	br	811216f8 <__reset+0xfb1016f8>
81121b4c:	1025883a 	mov	r18,r2
81121b50:	1823883a 	mov	r17,r3
81121b54:	003c4c06 	br	81120c88 <__reset+0xfb100c88>
81121b58:	00ffffc4 	movi	r3,-1
81121b5c:	10ffc91e 	bne	r2,r3,81121a84 <__reset+0xfb101a84>
81121b60:	003da906 	br	81121208 <__reset+0xfb101208>
81121b64:	10bff804 	addi	r2,r2,-32
81121b68:	00ffffc4 	movi	r3,-1
81121b6c:	1884983a 	sll	r2,r3,r2
81121b70:	1462703a 	and	r17,r2,r17
81121b74:	003e5d06 	br	811214ec <__reset+0xfb1014ec>
81121b78:	1025883a 	mov	r18,r2
81121b7c:	1823883a 	mov	r17,r3
81121b80:	003e5806 	br	811214e4 <__reset+0xfb1014e4>

81121b84 <strtod>:
81121b84:	00a04534 	movhi	r2,33044
81121b88:	10928704 	addi	r2,r2,18972
81121b8c:	280d883a 	mov	r6,r5
81121b90:	200b883a 	mov	r5,r4
81121b94:	11000017 	ldw	r4,0(r2)
81121b98:	11205841 	jmpi	81120584 <_strtod_r>

81121b9c <strtof>:
81121b9c:	defffb04 	addi	sp,sp,-20
81121ba0:	de00012e 	bgeu	sp,et,81121ba8 <strtof+0xc>
81121ba4:	003b68fa 	trap	3
81121ba8:	dcc00315 	stw	r19,12(sp)
81121bac:	04e04534 	movhi	r19,33044
81121bb0:	9cd28704 	addi	r19,r19,18972
81121bb4:	280d883a 	mov	r6,r5
81121bb8:	200b883a 	mov	r5,r4
81121bbc:	99000017 	ldw	r4,0(r19)
81121bc0:	dfc00415 	stw	ra,16(sp)
81121bc4:	dc800215 	stw	r18,8(sp)
81121bc8:	dc400115 	stw	r17,4(sp)
81121bcc:	dc000015 	stw	r16,0(sp)
81121bd0:	11205840 	call	81120584 <_strtod_r>
81121bd4:	1009883a 	mov	r4,r2
81121bd8:	180b883a 	mov	r5,r3
81121bdc:	1025883a 	mov	r18,r2
81121be0:	1823883a 	mov	r17,r3
81121be4:	11136580 	call	81113658 <__truncdfsf2>
81121be8:	000b883a 	mov	r5,zero
81121bec:	1009883a 	mov	r4,r2
81121bf0:	1021883a 	mov	r16,r2
81121bf4:	11271340 	call	81127134 <__eqsf2>
81121bf8:	1000111e 	bne	r2,zero,81121c40 <strtof+0xa4>
81121bfc:	000d883a 	mov	r6,zero
81121c00:	000f883a 	mov	r7,zero
81121c04:	9009883a 	mov	r4,r18
81121c08:	880b883a 	mov	r5,r17
81121c0c:	11284d40 	call	811284d4 <__eqdf2>
81121c10:	10000b26 	beq	r2,zero,81121c40 <strtof+0xa4>
81121c14:	98800017 	ldw	r2,0(r19)
81121c18:	00c00884 	movi	r3,34
81121c1c:	10c00015 	stw	r3,0(r2)
81121c20:	8005883a 	mov	r2,r16
81121c24:	dfc00417 	ldw	ra,16(sp)
81121c28:	dcc00317 	ldw	r19,12(sp)
81121c2c:	dc800217 	ldw	r18,8(sp)
81121c30:	dc400117 	ldw	r17,4(sp)
81121c34:	dc000017 	ldw	r16,0(sp)
81121c38:	dec00504 	addi	sp,sp,20
81121c3c:	f800283a 	ret
81121c40:	015fe034 	movhi	r5,32640
81121c44:	297fffc4 	addi	r5,r5,-1
81121c48:	8009883a 	mov	r4,r16
81121c4c:	11271ac0 	call	811271ac <__gesf2>
81121c50:	0080070e 	bge	zero,r2,81121c70 <strtof+0xd4>
81121c54:	01dffc34 	movhi	r7,32752
81121c58:	39ffffc4 	addi	r7,r7,-1
81121c5c:	01bfffc4 	movi	r6,-1
81121c60:	9009883a 	mov	r4,r18
81121c64:	880b883a 	mov	r5,r17
81121c68:	112855c0 	call	8112855c <__gedf2>
81121c6c:	00bfe90e 	bge	zero,r2,81121c14 <__reset+0xfb101c14>
81121c70:	017fe034 	movhi	r5,65408
81121c74:	297fffc4 	addi	r5,r5,-1
81121c78:	8009883a 	mov	r4,r16
81121c7c:	11272680 	call	81127268 <__lesf2>
81121c80:	103fe70e 	bge	r2,zero,81121c20 <__reset+0xfb101c20>
81121c84:	01fffc34 	movhi	r7,65520
81121c88:	39ffffc4 	addi	r7,r7,-1
81121c8c:	01bfffc4 	movi	r6,-1
81121c90:	9009883a 	mov	r4,r18
81121c94:	880b883a 	mov	r5,r17
81121c98:	11286380 	call	81128638 <__ledf2>
81121c9c:	103fdd0e 	bge	r2,zero,81121c14 <__reset+0xfb101c14>
81121ca0:	003fdf06 	br	81121c20 <__reset+0xfb101c20>

81121ca4 <_strtoll_r>:
81121ca4:	00a04534 	movhi	r2,33044
81121ca8:	defff304 	addi	sp,sp,-52
81121cac:	10928504 	addi	r2,r2,18964
81121cb0:	de00012e 	bgeu	sp,et,81121cb8 <_strtoll_r+0x14>
81121cb4:	003b68fa 	trap	3
81121cb8:	dc800515 	stw	r18,20(sp)
81121cbc:	14800017 	ldw	r18,0(r2)
81121cc0:	dd800915 	stw	r22,36(sp)
81121cc4:	dd400815 	stw	r21,32(sp)
81121cc8:	dcc00615 	stw	r19,24(sp)
81121ccc:	d9000015 	stw	r4,0(sp)
81121cd0:	dfc00c15 	stw	ra,48(sp)
81121cd4:	df000b15 	stw	fp,44(sp)
81121cd8:	ddc00a15 	stw	r23,40(sp)
81121cdc:	dd000715 	stw	r20,28(sp)
81121ce0:	dc400415 	stw	r17,16(sp)
81121ce4:	dc000315 	stw	r16,12(sp)
81121ce8:	282d883a 	mov	r22,r5
81121cec:	302b883a 	mov	r21,r6
81121cf0:	3827883a 	mov	r19,r7
81121cf4:	2809883a 	mov	r4,r5
81121cf8:	24000003 	ldbu	r16,0(r4)
81121cfc:	24400044 	addi	r17,r4,1
81121d00:	2007883a 	mov	r3,r4
81121d04:	9405883a 	add	r2,r18,r16
81121d08:	10800043 	ldbu	r2,1(r2)
81121d0c:	8809883a 	mov	r4,r17
81121d10:	1080020c 	andi	r2,r2,8
81121d14:	103ff81e 	bne	r2,zero,81121cf8 <__reset+0xfb101cf8>
81121d18:	00800b44 	movi	r2,45
81121d1c:	80807826 	beq	r16,r2,81121f00 <_strtoll_r+0x25c>
81121d20:	00800ac4 	movi	r2,43
81121d24:	80807a26 	beq	r16,r2,81121f10 <_strtoll_r+0x26c>
81121d28:	0039883a 	mov	fp,zero
81121d2c:	98004e26 	beq	r19,zero,81121e68 <_strtoll_r+0x1c4>
81121d30:	00800404 	movi	r2,16
81121d34:	98808226 	beq	r19,r2,81121f40 <_strtoll_r+0x29c>
81121d38:	982fd7fa 	srai	r23,r19,31
81121d3c:	9829883a 	mov	r20,r19
81121d40:	e0004f26 	beq	fp,zero,81121e80 <_strtoll_r+0x1dc>
81121d44:	0017883a 	mov	r11,zero
81121d48:	02a00034 	movhi	r10,32768
81121d4c:	5809883a 	mov	r4,r11
81121d50:	500b883a 	mov	r5,r10
81121d54:	a00d883a 	mov	r6,r20
81121d58:	b80f883a 	mov	r7,r23
81121d5c:	da800215 	stw	r10,8(sp)
81121d60:	dac00115 	stw	r11,4(sp)
81121d64:	1126a400 	call	81126a40 <__umoddi3>
81121d68:	dac00117 	ldw	r11,4(sp)
81121d6c:	da800217 	ldw	r10,8(sp)
81121d70:	a00d883a 	mov	r6,r20
81121d74:	5809883a 	mov	r4,r11
81121d78:	500b883a 	mov	r5,r10
81121d7c:	b80f883a 	mov	r7,r23
81121d80:	d8800115 	stw	r2,4(sp)
81121d84:	11264c00 	call	811264c0 <__udivdi3>
81121d88:	9409883a 	add	r4,r18,r16
81121d8c:	21000043 	ldbu	r4,1(r4)
81121d90:	1019883a 	mov	r12,r2
81121d94:	880b883a 	mov	r5,r17
81121d98:	2240010c 	andi	r9,r4,4
81121d9c:	0015883a 	mov	r10,zero
81121da0:	000d883a 	mov	r6,zero
81121da4:	000f883a 	mov	r7,zero
81121da8:	03400044 	movi	r13,1
81121dac:	02ffffc4 	movi	r11,-1
81121db0:	da000117 	ldw	r8,4(sp)
81121db4:	48000d26 	beq	r9,zero,81121dec <_strtoll_r+0x148>
81121db8:	843ff404 	addi	r16,r16,-48
81121dbc:	84c0110e 	bge	r16,r19,81121e04 <_strtoll_r+0x160>
81121dc0:	52c00426 	beq	r10,r11,81121dd4 <_strtoll_r+0x130>
81121dc4:	19c00236 	bltu	r3,r7,81121dd0 <_strtoll_r+0x12c>
81121dc8:	38c0311e 	bne	r7,r3,81121e90 <_strtoll_r+0x1ec>
81121dcc:	6180302e 	bgeu	r12,r6,81121e90 <_strtoll_r+0x1ec>
81121dd0:	02bfffc4 	movi	r10,-1
81121dd4:	2c000003 	ldbu	r16,0(r5)
81121dd8:	29400044 	addi	r5,r5,1
81121ddc:	9409883a 	add	r4,r18,r16
81121de0:	21000043 	ldbu	r4,1(r4)
81121de4:	2240010c 	andi	r9,r4,4
81121de8:	483ff31e 	bne	r9,zero,81121db8 <__reset+0xfb101db8>
81121dec:	210000cc 	andi	r4,r4,3
81121df0:	20000426 	beq	r4,zero,81121e04 <_strtoll_r+0x160>
81121df4:	23403426 	beq	r4,r13,81121ec8 <_strtoll_r+0x224>
81121df8:	008015c4 	movi	r2,87
81121dfc:	80a1c83a 	sub	r16,r16,r2
81121e00:	84ffef16 	blt	r16,r19,81121dc0 <__reset+0xfb101dc0>
81121e04:	00bfffc4 	movi	r2,-1
81121e08:	50803426 	beq	r10,r2,81121edc <_strtoll_r+0x238>
81121e0c:	e0000426 	beq	fp,zero,81121e20 <_strtoll_r+0x17c>
81121e10:	018dc83a 	sub	r6,zero,r6
81121e14:	3004c03a 	cmpne	r2,r6,zero
81121e18:	01e1c83a 	sub	r16,zero,r7
81121e1c:	808fc83a 	sub	r7,r16,r2
81121e20:	3005883a 	mov	r2,r6
81121e24:	3807883a 	mov	r3,r7
81121e28:	a8000326 	beq	r21,zero,81121e38 <_strtoll_r+0x194>
81121e2c:	5000321e 	bne	r10,zero,81121ef8 <_strtoll_r+0x254>
81121e30:	b00b883a 	mov	r5,r22
81121e34:	a9400015 	stw	r5,0(r21)
81121e38:	dfc00c17 	ldw	ra,48(sp)
81121e3c:	df000b17 	ldw	fp,44(sp)
81121e40:	ddc00a17 	ldw	r23,40(sp)
81121e44:	dd800917 	ldw	r22,36(sp)
81121e48:	dd400817 	ldw	r21,32(sp)
81121e4c:	dd000717 	ldw	r20,28(sp)
81121e50:	dcc00617 	ldw	r19,24(sp)
81121e54:	dc800517 	ldw	r18,20(sp)
81121e58:	dc400417 	ldw	r17,16(sp)
81121e5c:	dc000317 	ldw	r16,12(sp)
81121e60:	dec00d04 	addi	sp,sp,52
81121e64:	f800283a 	ret
81121e68:	00800c04 	movi	r2,48
81121e6c:	80802c26 	beq	r16,r2,81121f20 <_strtoll_r+0x27c>
81121e70:	05000284 	movi	r20,10
81121e74:	002f883a 	mov	r23,zero
81121e78:	a027883a 	mov	r19,r20
81121e7c:	e03fb11e 	bne	fp,zero,81121d44 <__reset+0xfb101d44>
81121e80:	02a00034 	movhi	r10,32768
81121e84:	52bfffc4 	addi	r10,r10,-1
81121e88:	02ffffc4 	movi	r11,-1
81121e8c:	003faf06 	br	81121d4c <__reset+0xfb101d4c>
81121e90:	33000f26 	beq	r6,r12,81121ed0 <_strtoll_r+0x22c>
81121e94:	b985383a 	mul	r2,r23,r6
81121e98:	3d0f383a 	mul	r7,r7,r20
81121e9c:	3508383a 	mulxuu	r4,r6,r20
81121ea0:	350d383a 	mul	r6,r6,r20
81121ea4:	8013d7fa 	srai	r9,r16,31
81121ea8:	388f883a 	add	r7,r7,r2
81121eac:	818d883a 	add	r6,r16,r6
81121eb0:	390f883a 	add	r7,r7,r4
81121eb4:	3421803a 	cmpltu	r16,r6,r16
81121eb8:	49cf883a 	add	r7,r9,r7
81121ebc:	81cf883a 	add	r7,r16,r7
81121ec0:	02800044 	movi	r10,1
81121ec4:	003fc306 	br	81121dd4 <__reset+0xfb101dd4>
81121ec8:	00800dc4 	movi	r2,55
81121ecc:	003fcb06 	br	81121dfc <__reset+0xfb101dfc>
81121ed0:	38fff01e 	bne	r7,r3,81121e94 <__reset+0xfb101e94>
81121ed4:	443fbe16 	blt	r8,r16,81121dd0 <__reset+0xfb101dd0>
81121ed8:	003fee06 	br	81121e94 <__reset+0xfb101e94>
81121edc:	e0002426 	beq	fp,zero,81121f70 <_strtoll_r+0x2cc>
81121ee0:	0005883a 	mov	r2,zero
81121ee4:	00e00034 	movhi	r3,32768
81121ee8:	d9800017 	ldw	r6,0(sp)
81121eec:	01000884 	movi	r4,34
81121ef0:	31000015 	stw	r4,0(r6)
81121ef4:	a83fd026 	beq	r21,zero,81121e38 <__reset+0xfb101e38>
81121ef8:	297fffc4 	addi	r5,r5,-1
81121efc:	003fcd06 	br	81121e34 <__reset+0xfb101e34>
81121f00:	1c400084 	addi	r17,r3,2
81121f04:	1c000043 	ldbu	r16,1(r3)
81121f08:	07000044 	movi	fp,1
81121f0c:	003f8706 	br	81121d2c <__reset+0xfb101d2c>
81121f10:	1c400084 	addi	r17,r3,2
81121f14:	1c000043 	ldbu	r16,1(r3)
81121f18:	0039883a 	mov	fp,zero
81121f1c:	003f8306 	br	81121d2c <__reset+0xfb101d2c>
81121f20:	88800003 	ldbu	r2,0(r17)
81121f24:	00c01604 	movi	r3,88
81121f28:	108037cc 	andi	r2,r2,223
81121f2c:	10c00a26 	beq	r2,r3,81121f58 <_strtoll_r+0x2b4>
81121f30:	05000204 	movi	r20,8
81121f34:	002f883a 	mov	r23,zero
81121f38:	a027883a 	mov	r19,r20
81121f3c:	003f8006 	br	81121d40 <__reset+0xfb101d40>
81121f40:	00800c04 	movi	r2,48
81121f44:	80800e1e 	bne	r16,r2,81121f80 <_strtoll_r+0x2dc>
81121f48:	88800003 	ldbu	r2,0(r17)
81121f4c:	00c01604 	movi	r3,88
81121f50:	108037cc 	andi	r2,r2,223
81121f54:	10c00a1e 	bne	r2,r3,81121f80 <_strtoll_r+0x2dc>
81121f58:	05000404 	movi	r20,16
81121f5c:	8c000043 	ldbu	r16,1(r17)
81121f60:	002f883a 	mov	r23,zero
81121f64:	8c400084 	addi	r17,r17,2
81121f68:	a027883a 	mov	r19,r20
81121f6c:	003f7406 	br	81121d40 <__reset+0xfb101d40>
81121f70:	00e00034 	movhi	r3,32768
81121f74:	18ffffc4 	addi	r3,r3,-1
81121f78:	5005883a 	mov	r2,r10
81121f7c:	003fda06 	br	81121ee8 <__reset+0xfb101ee8>
81121f80:	9829883a 	mov	r20,r19
81121f84:	002f883a 	mov	r23,zero
81121f88:	003f6d06 	br	81121d40 <__reset+0xfb101d40>

81121f8c <_strtoul_r>:
81121f8c:	00a04534 	movhi	r2,33044
81121f90:	defff604 	addi	sp,sp,-40
81121f94:	10928504 	addi	r2,r2,18964
81121f98:	de00012e 	bgeu	sp,et,81121fa0 <_strtoul_r+0x14>
81121f9c:	003b68fa 	trap	3
81121fa0:	dc800315 	stw	r18,12(sp)
81121fa4:	14800017 	ldw	r18,0(r2)
81121fa8:	dd400615 	stw	r21,24(sp)
81121fac:	dd000515 	stw	r20,20(sp)
81121fb0:	dcc00415 	stw	r19,16(sp)
81121fb4:	2029883a 	mov	r20,r4
81121fb8:	dfc00915 	stw	ra,36(sp)
81121fbc:	ddc00815 	stw	r23,32(sp)
81121fc0:	dd800715 	stw	r22,28(sp)
81121fc4:	dc400215 	stw	r17,8(sp)
81121fc8:	dc000115 	stw	r16,4(sp)
81121fcc:	2827883a 	mov	r19,r5
81121fd0:	382b883a 	mov	r21,r7
81121fd4:	2809883a 	mov	r4,r5
81121fd8:	24000003 	ldbu	r16,0(r4)
81121fdc:	24400044 	addi	r17,r4,1
81121fe0:	2007883a 	mov	r3,r4
81121fe4:	9405883a 	add	r2,r18,r16
81121fe8:	10800043 	ldbu	r2,1(r2)
81121fec:	8809883a 	mov	r4,r17
81121ff0:	1080020c 	andi	r2,r2,8
81121ff4:	103ff81e 	bne	r2,zero,81121fd8 <__reset+0xfb101fd8>
81121ff8:	00800b44 	movi	r2,45
81121ffc:	80805326 	beq	r16,r2,8112214c <_strtoul_r+0x1c0>
81122000:	00800ac4 	movi	r2,43
81122004:	80805526 	beq	r16,r2,8112215c <_strtoul_r+0x1d0>
81122008:	002f883a 	mov	r23,zero
8112200c:	a8000f26 	beq	r21,zero,8112204c <_strtoul_r+0xc0>
81122010:	00800404 	movi	r2,16
81122014:	a8805f26 	beq	r21,r2,81122194 <_strtoul_r+0x208>
81122018:	013fffc4 	movi	r4,-1
8112201c:	a80b883a 	mov	r5,r21
81122020:	d9800015 	stw	r6,0(sp)
81122024:	11270780 	call	81127078 <__udivsi3>
81122028:	a80b883a 	mov	r5,r21
8112202c:	013fffc4 	movi	r4,-1
81122030:	102d883a 	mov	r22,r2
81122034:	11270dc0 	call	811270dc <__umodsi3>
81122038:	d9800017 	ldw	r6,0(sp)
8112203c:	1019883a 	mov	r12,r2
81122040:	a817883a 	mov	r11,r21
81122044:	b00f883a 	mov	r7,r22
81122048:	00000706 	br	81122068 <_strtoul_r+0xdc>
8112204c:	00800c04 	movi	r2,48
81122050:	80804626 	beq	r16,r2,8112216c <_strtoul_r+0x1e0>
81122054:	05400284 	movi	r21,10
81122058:	01c666b4 	movhi	r7,6554
8112205c:	03000144 	movi	r12,5
81122060:	39e66644 	addi	r7,r7,-26215
81122064:	a817883a 	mov	r11,r21
81122068:	9407883a 	add	r3,r18,r16
8112206c:	18c00043 	ldbu	r3,1(r3)
81122070:	8809883a 	mov	r4,r17
81122074:	0011883a 	mov	r8,zero
81122078:	1940010c 	andi	r5,r3,4
8112207c:	0005883a 	mov	r2,zero
81122080:	02800044 	movi	r10,1
81122084:	027fffc4 	movi	r9,-1
81122088:	28000e26 	beq	r5,zero,811220c4 <_strtoul_r+0x138>
8112208c:	843ff404 	addi	r16,r16,-48
81122090:	8540120e 	bge	r16,r21,811220dc <_strtoul_r+0x150>
81122094:	42400526 	beq	r8,r9,811220ac <_strtoul_r+0x120>
81122098:	38802236 	bltu	r7,r2,81122124 <_strtoul_r+0x198>
8112209c:	11c02026 	beq	r2,r7,81122120 <_strtoul_r+0x194>
811220a0:	12c5383a 	mul	r2,r2,r11
811220a4:	02000044 	movi	r8,1
811220a8:	8085883a 	add	r2,r16,r2
811220ac:	24000003 	ldbu	r16,0(r4)
811220b0:	21000044 	addi	r4,r4,1
811220b4:	9407883a 	add	r3,r18,r16
811220b8:	18c00043 	ldbu	r3,1(r3)
811220bc:	1940010c 	andi	r5,r3,4
811220c0:	283ff21e 	bne	r5,zero,8112208c <__reset+0xfb10208c>
811220c4:	18c000cc 	andi	r3,r3,3
811220c8:	18000426 	beq	r3,zero,811220dc <_strtoul_r+0x150>
811220cc:	1a801726 	beq	r3,r10,8112212c <_strtoul_r+0x1a0>
811220d0:	00c015c4 	movi	r3,87
811220d4:	80e1c83a 	sub	r16,r16,r3
811220d8:	857fee16 	blt	r16,r21,81122094 <__reset+0xfb102094>
811220dc:	40001516 	blt	r8,zero,81122134 <_strtoul_r+0x1a8>
811220e0:	b8000126 	beq	r23,zero,811220e8 <_strtoul_r+0x15c>
811220e4:	0085c83a 	sub	r2,zero,r2
811220e8:	30000226 	beq	r6,zero,811220f4 <_strtoul_r+0x168>
811220ec:	4000151e 	bne	r8,zero,81122144 <_strtoul_r+0x1b8>
811220f0:	34c00015 	stw	r19,0(r6)
811220f4:	dfc00917 	ldw	ra,36(sp)
811220f8:	ddc00817 	ldw	r23,32(sp)
811220fc:	dd800717 	ldw	r22,28(sp)
81122100:	dd400617 	ldw	r21,24(sp)
81122104:	dd000517 	ldw	r20,20(sp)
81122108:	dcc00417 	ldw	r19,16(sp)
8112210c:	dc800317 	ldw	r18,12(sp)
81122110:	dc400217 	ldw	r17,8(sp)
81122114:	dc000117 	ldw	r16,4(sp)
81122118:	dec00a04 	addi	sp,sp,40
8112211c:	f800283a 	ret
81122120:	643fdf0e 	bge	r12,r16,811220a0 <__reset+0xfb1020a0>
81122124:	023fffc4 	movi	r8,-1
81122128:	003fe006 	br	811220ac <__reset+0xfb1020ac>
8112212c:	00c00dc4 	movi	r3,55
81122130:	003fe806 	br	811220d4 <__reset+0xfb1020d4>
81122134:	00800884 	movi	r2,34
81122138:	a0800015 	stw	r2,0(r20)
8112213c:	00bfffc4 	movi	r2,-1
81122140:	303fec26 	beq	r6,zero,811220f4 <__reset+0xfb1020f4>
81122144:	24ffffc4 	addi	r19,r4,-1
81122148:	003fe906 	br	811220f0 <__reset+0xfb1020f0>
8112214c:	1c400084 	addi	r17,r3,2
81122150:	1c000043 	ldbu	r16,1(r3)
81122154:	05c00044 	movi	r23,1
81122158:	003fac06 	br	8112200c <__reset+0xfb10200c>
8112215c:	1c400084 	addi	r17,r3,2
81122160:	1c000043 	ldbu	r16,1(r3)
81122164:	002f883a 	mov	r23,zero
81122168:	003fa806 	br	8112200c <__reset+0xfb10200c>
8112216c:	88800003 	ldbu	r2,0(r17)
81122170:	00c01604 	movi	r3,88
81122174:	108037cc 	andi	r2,r2,223
81122178:	10c00c26 	beq	r2,r3,811221ac <_strtoul_r+0x220>
8112217c:	05400204 	movi	r21,8
81122180:	01c80034 	movhi	r7,8192
81122184:	030001c4 	movi	r12,7
81122188:	39ffffc4 	addi	r7,r7,-1
8112218c:	a817883a 	mov	r11,r21
81122190:	003fb506 	br	81122068 <__reset+0xfb102068>
81122194:	00800c04 	movi	r2,48
81122198:	80800c1e 	bne	r16,r2,811221cc <_strtoul_r+0x240>
8112219c:	88800003 	ldbu	r2,0(r17)
811221a0:	00c01604 	movi	r3,88
811221a4:	108037cc 	andi	r2,r2,223
811221a8:	10c0081e 	bne	r2,r3,811221cc <_strtoul_r+0x240>
811221ac:	02c00404 	movi	r11,16
811221b0:	05840034 	movhi	r22,4096
811221b4:	8c000043 	ldbu	r16,1(r17)
811221b8:	030003c4 	movi	r12,15
811221bc:	8c400084 	addi	r17,r17,2
811221c0:	b5bfffc4 	addi	r22,r22,-1
811221c4:	582b883a 	mov	r21,r11
811221c8:	003f9e06 	br	81122044 <__reset+0xfb102044>
811221cc:	01c40034 	movhi	r7,4096
811221d0:	030003c4 	movi	r12,15
811221d4:	39ffffc4 	addi	r7,r7,-1
811221d8:	a817883a 	mov	r11,r21
811221dc:	003fa206 	br	81122068 <__reset+0xfb102068>

811221e0 <strtoul>:
811221e0:	00a04534 	movhi	r2,33044
811221e4:	10928704 	addi	r2,r2,18972
811221e8:	300f883a 	mov	r7,r6
811221ec:	280d883a 	mov	r6,r5
811221f0:	200b883a 	mov	r5,r4
811221f4:	11000017 	ldw	r4,0(r2)
811221f8:	1121f8c1 	jmpi	81121f8c <_strtoul_r>

811221fc <_strtoull_r>:
811221fc:	00a04534 	movhi	r2,33044
81122200:	defff404 	addi	sp,sp,-48
81122204:	10928504 	addi	r2,r2,18964
81122208:	de00012e 	bgeu	sp,et,81122210 <_strtoull_r+0x14>
8112220c:	003b68fa 	trap	3
81122210:	dc400315 	stw	r17,12(sp)
81122214:	14400017 	ldw	r17,0(r2)
81122218:	dd400715 	stw	r21,28(sp)
8112221c:	dd000615 	stw	r20,24(sp)
81122220:	dcc00515 	stw	r19,20(sp)
81122224:	dc800415 	stw	r18,16(sp)
81122228:	dfc00b15 	stw	ra,44(sp)
8112222c:	df000a15 	stw	fp,40(sp)
81122230:	ddc00915 	stw	r23,36(sp)
81122234:	dd800815 	stw	r22,32(sp)
81122238:	dc000215 	stw	r16,8(sp)
8112223c:	2827883a 	mov	r19,r5
81122240:	202b883a 	mov	r21,r4
81122244:	3029883a 	mov	r20,r6
81122248:	3825883a 	mov	r18,r7
8112224c:	2807883a 	mov	r3,r5
81122250:	1c000003 	ldbu	r16,0(r3)
81122254:	1f000044 	addi	fp,r3,1
81122258:	1809883a 	mov	r4,r3
8112225c:	8c05883a 	add	r2,r17,r16
81122260:	10800043 	ldbu	r2,1(r2)
81122264:	e007883a 	mov	r3,fp
81122268:	1080020c 	andi	r2,r2,8
8112226c:	103ff81e 	bne	r2,zero,81122250 <__reset+0xfb102250>
81122270:	00800b44 	movi	r2,45
81122274:	80806e26 	beq	r16,r2,81122430 <_strtoull_r+0x234>
81122278:	00800ac4 	movi	r2,43
8112227c:	80807026 	beq	r16,r2,81122440 <_strtoull_r+0x244>
81122280:	002f883a 	mov	r23,zero
81122284:	90001426 	beq	r18,zero,811222d8 <_strtoull_r+0xdc>
81122288:	00800404 	movi	r2,16
8112228c:	90807c26 	beq	r18,r2,81122480 <_strtoull_r+0x284>
81122290:	902dd7fa 	srai	r22,r18,31
81122294:	013fffc4 	movi	r4,-1
81122298:	200b883a 	mov	r5,r4
8112229c:	900d883a 	mov	r6,r18
811222a0:	b00f883a 	mov	r7,r22
811222a4:	11264c00 	call	811264c0 <__udivdi3>
811222a8:	013fffc4 	movi	r4,-1
811222ac:	900d883a 	mov	r6,r18
811222b0:	b00f883a 	mov	r7,r22
811222b4:	200b883a 	mov	r5,r4
811222b8:	d8c00115 	stw	r3,4(sp)
811222bc:	d8800015 	stw	r2,0(sp)
811222c0:	1126a400 	call	81126a40 <__umoddi3>
811222c4:	101b883a 	mov	r13,r2
811222c8:	9015883a 	mov	r10,r18
811222cc:	dac00017 	ldw	r11,0(sp)
811222d0:	da000117 	ldw	r8,4(sp)
811222d4:	00000a06 	br	81122300 <_strtoull_r+0x104>
811222d8:	00800c04 	movi	r2,48
811222dc:	80805c26 	beq	r16,r2,81122450 <_strtoull_r+0x254>
811222e0:	02800284 	movi	r10,10
811222e4:	02e666b4 	movhi	r11,39322
811222e8:	020666b4 	movhi	r8,6554
811222ec:	03400144 	movi	r13,5
811222f0:	5ae66644 	addi	r11,r11,-26215
811222f4:	42266644 	addi	r8,r8,-26215
811222f8:	002d883a 	mov	r22,zero
811222fc:	5025883a 	mov	r18,r10
81122300:	8c0b883a 	add	r5,r17,r16
81122304:	29400043 	ldbu	r5,1(r5)
81122308:	e009883a 	mov	r4,fp
8112230c:	000f883a 	mov	r7,zero
81122310:	2980010c 	andi	r6,r5,4
81122314:	0005883a 	mov	r2,zero
81122318:	0007883a 	mov	r3,zero
8112231c:	03000044 	movi	r12,1
81122320:	027fffc4 	movi	r9,-1
81122324:	30000d26 	beq	r6,zero,8112235c <_strtoull_r+0x160>
81122328:	843ff404 	addi	r16,r16,-48
8112232c:	8480110e 	bge	r16,r18,81122374 <_strtoull_r+0x178>
81122330:	3a400426 	beq	r7,r9,81122344 <_strtoull_r+0x148>
81122334:	40c00236 	bltu	r8,r3,81122340 <_strtoull_r+0x144>
81122338:	1a00231e 	bne	r3,r8,811223c8 <_strtoull_r+0x1cc>
8112233c:	5880222e 	bgeu	r11,r2,811223c8 <_strtoull_r+0x1cc>
81122340:	01ffffc4 	movi	r7,-1
81122344:	24000003 	ldbu	r16,0(r4)
81122348:	21000044 	addi	r4,r4,1
8112234c:	8c0b883a 	add	r5,r17,r16
81122350:	29400043 	ldbu	r5,1(r5)
81122354:	2980010c 	andi	r6,r5,4
81122358:	303ff31e 	bne	r6,zero,81122328 <__reset+0xfb102328>
8112235c:	294000cc 	andi	r5,r5,3
81122360:	28000426 	beq	r5,zero,81122374 <_strtoull_r+0x178>
81122364:	2b002626 	beq	r5,r12,81122400 <_strtoull_r+0x204>
81122368:	014015c4 	movi	r5,87
8112236c:	8161c83a 	sub	r16,r16,r5
81122370:	84bfef16 	blt	r16,r18,81122330 <__reset+0xfb102330>
81122374:	38002716 	blt	r7,zero,81122414 <_strtoull_r+0x218>
81122378:	b8000426 	beq	r23,zero,8112238c <_strtoull_r+0x190>
8112237c:	0085c83a 	sub	r2,zero,r2
81122380:	100ac03a 	cmpne	r5,r2,zero
81122384:	00e1c83a 	sub	r16,zero,r3
81122388:	8147c83a 	sub	r3,r16,r5
8112238c:	a0000226 	beq	r20,zero,81122398 <_strtoull_r+0x19c>
81122390:	3800251e 	bne	r7,zero,81122428 <_strtoull_r+0x22c>
81122394:	a4c00015 	stw	r19,0(r20)
81122398:	dfc00b17 	ldw	ra,44(sp)
8112239c:	df000a17 	ldw	fp,40(sp)
811223a0:	ddc00917 	ldw	r23,36(sp)
811223a4:	dd800817 	ldw	r22,32(sp)
811223a8:	dd400717 	ldw	r21,28(sp)
811223ac:	dd000617 	ldw	r20,24(sp)
811223b0:	dcc00517 	ldw	r19,20(sp)
811223b4:	dc800417 	ldw	r18,16(sp)
811223b8:	dc400317 	ldw	r17,12(sp)
811223bc:	dc000217 	ldw	r16,8(sp)
811223c0:	dec00c04 	addi	sp,sp,48
811223c4:	f800283a 	ret
811223c8:	12c00f26 	beq	r2,r11,81122408 <_strtoull_r+0x20c>
811223cc:	b08d383a 	mul	r6,r22,r2
811223d0:	1a87383a 	mul	r3,r3,r10
811223d4:	128a383a 	mulxuu	r5,r2,r10
811223d8:	1285383a 	mul	r2,r2,r10
811223dc:	800fd7fa 	srai	r7,r16,31
811223e0:	1987883a 	add	r3,r3,r6
811223e4:	8085883a 	add	r2,r16,r2
811223e8:	1947883a 	add	r3,r3,r5
811223ec:	38c7883a 	add	r3,r7,r3
811223f0:	1421803a 	cmpltu	r16,r2,r16
811223f4:	80c7883a 	add	r3,r16,r3
811223f8:	01c00044 	movi	r7,1
811223fc:	003fd106 	br	81122344 <__reset+0xfb102344>
81122400:	01400dc4 	movi	r5,55
81122404:	003fd906 	br	8112236c <__reset+0xfb10236c>
81122408:	1a3ff01e 	bne	r3,r8,811223cc <__reset+0xfb1023cc>
8112240c:	6c3fcc16 	blt	r13,r16,81122340 <__reset+0xfb102340>
81122410:	003fee06 	br	811223cc <__reset+0xfb1023cc>
81122414:	00800884 	movi	r2,34
81122418:	a8800015 	stw	r2,0(r21)
8112241c:	00bfffc4 	movi	r2,-1
81122420:	1007883a 	mov	r3,r2
81122424:	a03fdc26 	beq	r20,zero,81122398 <__reset+0xfb102398>
81122428:	24ffffc4 	addi	r19,r4,-1
8112242c:	003fd906 	br	81122394 <__reset+0xfb102394>
81122430:	27000084 	addi	fp,r4,2
81122434:	24000043 	ldbu	r16,1(r4)
81122438:	05c00044 	movi	r23,1
8112243c:	003f9106 	br	81122284 <__reset+0xfb102284>
81122440:	27000084 	addi	fp,r4,2
81122444:	24000043 	ldbu	r16,1(r4)
81122448:	002f883a 	mov	r23,zero
8112244c:	003f8d06 	br	81122284 <__reset+0xfb102284>
81122450:	e0800003 	ldbu	r2,0(fp)
81122454:	00c01604 	movi	r3,88
81122458:	108037cc 	andi	r2,r2,223
8112245c:	10c00e26 	beq	r2,r3,81122498 <_strtoull_r+0x29c>
81122460:	02800204 	movi	r10,8
81122464:	02ffffc4 	movi	r11,-1
81122468:	02080034 	movhi	r8,8192
8112246c:	034001c4 	movi	r13,7
81122470:	42d1883a 	add	r8,r8,r11
81122474:	002d883a 	mov	r22,zero
81122478:	5025883a 	mov	r18,r10
8112247c:	003fa006 	br	81122300 <__reset+0xfb102300>
81122480:	00800c04 	movi	r2,48
81122484:	80800e1e 	bne	r16,r2,811224c0 <_strtoull_r+0x2c4>
81122488:	e0800003 	ldbu	r2,0(fp)
8112248c:	00c01604 	movi	r3,88
81122490:	108037cc 	andi	r2,r2,223
81122494:	10c00a1e 	bne	r2,r3,811224c0 <_strtoull_r+0x2c4>
81122498:	02800404 	movi	r10,16
8112249c:	02ffffc4 	movi	r11,-1
811224a0:	02040034 	movhi	r8,4096
811224a4:	e4000043 	ldbu	r16,1(fp)
811224a8:	034003c4 	movi	r13,15
811224ac:	e7000084 	addi	fp,fp,2
811224b0:	42d1883a 	add	r8,r8,r11
811224b4:	002d883a 	mov	r22,zero
811224b8:	5025883a 	mov	r18,r10
811224bc:	003f9006 	br	81122300 <__reset+0xfb102300>
811224c0:	02ffffc4 	movi	r11,-1
811224c4:	02040034 	movhi	r8,4096
811224c8:	034003c4 	movi	r13,15
811224cc:	42d1883a 	add	r8,r8,r11
811224d0:	9015883a 	mov	r10,r18
811224d4:	002d883a 	mov	r22,zero
811224d8:	003f8906 	br	81122300 <__reset+0xfb102300>

811224dc <__ssprint_r>:
811224dc:	defff604 	addi	sp,sp,-40
811224e0:	de00012e 	bgeu	sp,et,811224e8 <__ssprint_r+0xc>
811224e4:	003b68fa 	trap	3
811224e8:	30800217 	ldw	r2,8(r6)
811224ec:	dc800215 	stw	r18,8(sp)
811224f0:	dfc00915 	stw	ra,36(sp)
811224f4:	df000815 	stw	fp,32(sp)
811224f8:	ddc00715 	stw	r23,28(sp)
811224fc:	dd800615 	stw	r22,24(sp)
81122500:	dd400515 	stw	r21,20(sp)
81122504:	dd000415 	stw	r20,16(sp)
81122508:	dcc00315 	stw	r19,12(sp)
8112250c:	dc400115 	stw	r17,4(sp)
81122510:	dc000015 	stw	r16,0(sp)
81122514:	3025883a 	mov	r18,r6
81122518:	10005826 	beq	r2,zero,8112267c <__ssprint_r+0x1a0>
8112251c:	2027883a 	mov	r19,r4
81122520:	35c00017 	ldw	r23,0(r6)
81122524:	29000017 	ldw	r4,0(r5)
81122528:	28800217 	ldw	r2,8(r5)
8112252c:	2823883a 	mov	r17,r5
81122530:	0039883a 	mov	fp,zero
81122534:	0021883a 	mov	r16,zero
81122538:	80003926 	beq	r16,zero,81122620 <__ssprint_r+0x144>
8112253c:	102b883a 	mov	r21,r2
81122540:	102d883a 	mov	r22,r2
81122544:	80803a36 	bltu	r16,r2,81122630 <__ssprint_r+0x154>
81122548:	88c0030b 	ldhu	r3,12(r17)
8112254c:	1881200c 	andi	r2,r3,1152
81122550:	10002626 	beq	r2,zero,811225ec <__ssprint_r+0x110>
81122554:	88800517 	ldw	r2,20(r17)
81122558:	89400417 	ldw	r5,16(r17)
8112255c:	81800044 	addi	r6,r16,1
81122560:	108f883a 	add	r7,r2,r2
81122564:	3885883a 	add	r2,r7,r2
81122568:	100ed7fa 	srli	r7,r2,31
8112256c:	216dc83a 	sub	r22,r4,r5
81122570:	3589883a 	add	r4,r6,r22
81122574:	3885883a 	add	r2,r7,r2
81122578:	102bd07a 	srai	r21,r2,1
8112257c:	a80d883a 	mov	r6,r21
81122580:	a900022e 	bgeu	r21,r4,8112258c <__ssprint_r+0xb0>
81122584:	202b883a 	mov	r21,r4
81122588:	200d883a 	mov	r6,r4
8112258c:	18c1000c 	andi	r3,r3,1024
81122590:	18002a26 	beq	r3,zero,8112263c <__ssprint_r+0x160>
81122594:	300b883a 	mov	r5,r6
81122598:	9809883a 	mov	r4,r19
8112259c:	111425c0 	call	8111425c <_malloc_r>
811225a0:	1029883a 	mov	r20,r2
811225a4:	10002c26 	beq	r2,zero,81122658 <__ssprint_r+0x17c>
811225a8:	89400417 	ldw	r5,16(r17)
811225ac:	b00d883a 	mov	r6,r22
811225b0:	1009883a 	mov	r4,r2
811225b4:	1114a700 	call	81114a70 <memcpy>
811225b8:	8880030b 	ldhu	r2,12(r17)
811225bc:	00fedfc4 	movi	r3,-1153
811225c0:	10c4703a 	and	r2,r2,r3
811225c4:	10802014 	ori	r2,r2,128
811225c8:	8880030d 	sth	r2,12(r17)
811225cc:	a589883a 	add	r4,r20,r22
811225d0:	adadc83a 	sub	r22,r21,r22
811225d4:	8d400515 	stw	r21,20(r17)
811225d8:	8d800215 	stw	r22,8(r17)
811225dc:	8d000415 	stw	r20,16(r17)
811225e0:	89000015 	stw	r4,0(r17)
811225e4:	802b883a 	mov	r21,r16
811225e8:	802d883a 	mov	r22,r16
811225ec:	b00d883a 	mov	r6,r22
811225f0:	e00b883a 	mov	r5,fp
811225f4:	111eb640 	call	8111eb64 <memmove>
811225f8:	88800217 	ldw	r2,8(r17)
811225fc:	89000017 	ldw	r4,0(r17)
81122600:	90c00217 	ldw	r3,8(r18)
81122604:	1545c83a 	sub	r2,r2,r21
81122608:	2589883a 	add	r4,r4,r22
8112260c:	88800215 	stw	r2,8(r17)
81122610:	89000015 	stw	r4,0(r17)
81122614:	1c21c83a 	sub	r16,r3,r16
81122618:	94000215 	stw	r16,8(r18)
8112261c:	80001726 	beq	r16,zero,8112267c <__ssprint_r+0x1a0>
81122620:	bf000017 	ldw	fp,0(r23)
81122624:	bc000117 	ldw	r16,4(r23)
81122628:	bdc00204 	addi	r23,r23,8
8112262c:	003fc206 	br	81122538 <__reset+0xfb102538>
81122630:	802b883a 	mov	r21,r16
81122634:	802d883a 	mov	r22,r16
81122638:	003fec06 	br	811225ec <__reset+0xfb1025ec>
8112263c:	9809883a 	mov	r4,r19
81122640:	111fd840 	call	8111fd84 <_realloc_r>
81122644:	1029883a 	mov	r20,r2
81122648:	103fe01e 	bne	r2,zero,811225cc <__reset+0xfb1025cc>
8112264c:	89400417 	ldw	r5,16(r17)
81122650:	9809883a 	mov	r4,r19
81122654:	111dcf00 	call	8111dcf0 <_free_r>
81122658:	88c0030b 	ldhu	r3,12(r17)
8112265c:	00800304 	movi	r2,12
81122660:	98800015 	stw	r2,0(r19)
81122664:	18c01014 	ori	r3,r3,64
81122668:	88c0030d 	sth	r3,12(r17)
8112266c:	00bfffc4 	movi	r2,-1
81122670:	90000215 	stw	zero,8(r18)
81122674:	90000115 	stw	zero,4(r18)
81122678:	00000206 	br	81122684 <__ssprint_r+0x1a8>
8112267c:	90000115 	stw	zero,4(r18)
81122680:	0005883a 	mov	r2,zero
81122684:	dfc00917 	ldw	ra,36(sp)
81122688:	df000817 	ldw	fp,32(sp)
8112268c:	ddc00717 	ldw	r23,28(sp)
81122690:	dd800617 	ldw	r22,24(sp)
81122694:	dd400517 	ldw	r21,20(sp)
81122698:	dd000417 	ldw	r20,16(sp)
8112269c:	dcc00317 	ldw	r19,12(sp)
811226a0:	dc800217 	ldw	r18,8(sp)
811226a4:	dc400117 	ldw	r17,4(sp)
811226a8:	dc000017 	ldw	r16,0(sp)
811226ac:	dec00a04 	addi	sp,sp,40
811226b0:	f800283a 	ret

811226b4 <___svfiprintf_internal_r>:
811226b4:	deffc804 	addi	sp,sp,-224
811226b8:	de00012e 	bgeu	sp,et,811226c0 <___svfiprintf_internal_r+0xc>
811226bc:	003b68fa 	trap	3
811226c0:	2880030b 	ldhu	r2,12(r5)
811226c4:	dcc03115 	stw	r19,196(sp)
811226c8:	dfc03715 	stw	ra,220(sp)
811226cc:	df003615 	stw	fp,216(sp)
811226d0:	ddc03515 	stw	r23,212(sp)
811226d4:	dd803415 	stw	r22,208(sp)
811226d8:	dd403315 	stw	r21,204(sp)
811226dc:	dd003215 	stw	r20,200(sp)
811226e0:	dc803015 	stw	r18,192(sp)
811226e4:	dc402f15 	stw	r17,188(sp)
811226e8:	dc002e15 	stw	r16,184(sp)
811226ec:	d9402715 	stw	r5,156(sp)
811226f0:	d9002a15 	stw	r4,168(sp)
811226f4:	1080200c 	andi	r2,r2,128
811226f8:	d9c02315 	stw	r7,140(sp)
811226fc:	3027883a 	mov	r19,r6
81122700:	10000226 	beq	r2,zero,8112270c <___svfiprintf_internal_r+0x58>
81122704:	28800417 	ldw	r2,16(r5)
81122708:	10041d26 	beq	r2,zero,81123780 <___svfiprintf_internal_r+0x10cc>
8112270c:	dac01a04 	addi	r11,sp,104
81122710:	dac01e15 	stw	r11,120(sp)
81122714:	d8801e17 	ldw	r2,120(sp)
81122718:	dac019c4 	addi	r11,sp,103
8112271c:	dd402a17 	ldw	r21,168(sp)
81122720:	ddc02717 	ldw	r23,156(sp)
81122724:	05a04534 	movhi	r22,33044
81122728:	05204534 	movhi	r20,33044
8112272c:	dac01f15 	stw	r11,124(sp)
81122730:	12d7c83a 	sub	r11,r2,r11
81122734:	b5893304 	addi	r22,r22,9420
81122738:	a5092f04 	addi	r20,r20,9404
8112273c:	dec01a15 	stw	sp,104(sp)
81122740:	d8001c15 	stw	zero,112(sp)
81122744:	d8001b15 	stw	zero,108(sp)
81122748:	d811883a 	mov	r8,sp
8112274c:	d8002915 	stw	zero,164(sp)
81122750:	d8002515 	stw	zero,148(sp)
81122754:	dac02b15 	stw	r11,172(sp)
81122758:	98800007 	ldb	r2,0(r19)
8112275c:	1002dd26 	beq	r2,zero,811232d4 <___svfiprintf_internal_r+0xc20>
81122760:	00c00944 	movi	r3,37
81122764:	9823883a 	mov	r17,r19
81122768:	10c0021e 	bne	r2,r3,81122774 <___svfiprintf_internal_r+0xc0>
8112276c:	00001406 	br	811227c0 <___svfiprintf_internal_r+0x10c>
81122770:	10c00326 	beq	r2,r3,81122780 <___svfiprintf_internal_r+0xcc>
81122774:	8c400044 	addi	r17,r17,1
81122778:	88800007 	ldb	r2,0(r17)
8112277c:	103ffc1e 	bne	r2,zero,81122770 <__reset+0xfb102770>
81122780:	8ce1c83a 	sub	r16,r17,r19
81122784:	80000e26 	beq	r16,zero,811227c0 <___svfiprintf_internal_r+0x10c>
81122788:	d8c01c17 	ldw	r3,112(sp)
8112278c:	d8801b17 	ldw	r2,108(sp)
81122790:	44c00015 	stw	r19,0(r8)
81122794:	1c07883a 	add	r3,r3,r16
81122798:	10800044 	addi	r2,r2,1
8112279c:	d8c01c15 	stw	r3,112(sp)
811227a0:	44000115 	stw	r16,4(r8)
811227a4:	d8801b15 	stw	r2,108(sp)
811227a8:	00c001c4 	movi	r3,7
811227ac:	18831e16 	blt	r3,r2,81123428 <___svfiprintf_internal_r+0xd74>
811227b0:	42000204 	addi	r8,r8,8
811227b4:	dac02517 	ldw	r11,148(sp)
811227b8:	5c17883a 	add	r11,r11,r16
811227bc:	dac02515 	stw	r11,148(sp)
811227c0:	88800007 	ldb	r2,0(r17)
811227c4:	1002c526 	beq	r2,zero,811232dc <___svfiprintf_internal_r+0xc28>
811227c8:	88c00047 	ldb	r3,1(r17)
811227cc:	8cc00044 	addi	r19,r17,1
811227d0:	d8001d85 	stb	zero,118(sp)
811227d4:	0009883a 	mov	r4,zero
811227d8:	000f883a 	mov	r7,zero
811227dc:	043fffc4 	movi	r16,-1
811227e0:	d8002415 	stw	zero,144(sp)
811227e4:	0025883a 	mov	r18,zero
811227e8:	01401604 	movi	r5,88
811227ec:	01800244 	movi	r6,9
811227f0:	02800a84 	movi	r10,42
811227f4:	02401b04 	movi	r9,108
811227f8:	9cc00044 	addi	r19,r19,1
811227fc:	18bff804 	addi	r2,r3,-32
81122800:	2881dd36 	bltu	r5,r2,81122f78 <___svfiprintf_internal_r+0x8c4>
81122804:	100490ba 	slli	r2,r2,2
81122808:	02e044b4 	movhi	r11,33042
8112280c:	5aca0704 	addi	r11,r11,10268
81122810:	12c5883a 	add	r2,r2,r11
81122814:	10800017 	ldw	r2,0(r2)
81122818:	1000683a 	jmp	r2
8112281c:	81122a18 	cmpnei	r4,r16,18600
81122820:	81122f78 	rdprs	r4,r16,18621
81122824:	81122f78 	rdprs	r4,r16,18621
81122828:	81122a0c 	andi	r4,r16,18600
8112282c:	81122f78 	rdprs	r4,r16,18621
81122830:	81122f78 	rdprs	r4,r16,18621
81122834:	81122f78 	rdprs	r4,r16,18621
81122838:	81122f78 	rdprs	r4,r16,18621
8112283c:	81122f78 	rdprs	r4,r16,18621
81122840:	81122f78 	rdprs	r4,r16,18621
81122844:	81122980 	call	88112298 <__reset+0x20f2298>
81122848:	81122b5c 	xori	r4,r16,18605
8112284c:	81122f78 	rdprs	r4,r16,18621
81122850:	811229ac 	andhi	r4,r16,18598
81122854:	81122fac 	andhi	r4,r16,18622
81122858:	81122f78 	rdprs	r4,r16,18621
8112285c:	81122fa0 	cmpeqi	r4,r16,18622
81122860:	81122f40 	call	881122f4 <__reset+0x20f22f4>
81122864:	81122f40 	call	881122f4 <__reset+0x20f22f4>
81122868:	81122f40 	call	881122f4 <__reset+0x20f22f4>
8112286c:	81122f40 	call	881122f4 <__reset+0x20f22f4>
81122870:	81122f40 	call	881122f4 <__reset+0x20f22f4>
81122874:	81122f40 	call	881122f4 <__reset+0x20f22f4>
81122878:	81122f40 	call	881122f4 <__reset+0x20f22f4>
8112287c:	81122f40 	call	881122f4 <__reset+0x20f22f4>
81122880:	81122f40 	call	881122f4 <__reset+0x20f22f4>
81122884:	81122f78 	rdprs	r4,r16,18621
81122888:	81122f78 	rdprs	r4,r16,18621
8112288c:	81122f78 	rdprs	r4,r16,18621
81122890:	81122f78 	rdprs	r4,r16,18621
81122894:	81122f78 	rdprs	r4,r16,18621
81122898:	81122f78 	rdprs	r4,r16,18621
8112289c:	81122f78 	rdprs	r4,r16,18621
811228a0:	81122f78 	rdprs	r4,r16,18621
811228a4:	81122f78 	rdprs	r4,r16,18621
811228a8:	81122f78 	rdprs	r4,r16,18621
811228ac:	81122edc 	xori	r4,r16,18619
811228b0:	81122f78 	rdprs	r4,r16,18621
811228b4:	81122f78 	rdprs	r4,r16,18621
811228b8:	81122f78 	rdprs	r4,r16,18621
811228bc:	81122f78 	rdprs	r4,r16,18621
811228c0:	81122f78 	rdprs	r4,r16,18621
811228c4:	81122f78 	rdprs	r4,r16,18621
811228c8:	81122f78 	rdprs	r4,r16,18621
811228cc:	81122f78 	rdprs	r4,r16,18621
811228d0:	81122f78 	rdprs	r4,r16,18621
811228d4:	81122f78 	rdprs	r4,r16,18621
811228d8:	81123054 	ori	r4,r16,18625
811228dc:	81122f78 	rdprs	r4,r16,18621
811228e0:	81122f78 	rdprs	r4,r16,18621
811228e4:	81122f78 	rdprs	r4,r16,18621
811228e8:	81122f78 	rdprs	r4,r16,18621
811228ec:	81122f78 	rdprs	r4,r16,18621
811228f0:	81122fec 	andhi	r4,r16,18623
811228f4:	81122f78 	rdprs	r4,r16,18621
811228f8:	81122f78 	rdprs	r4,r16,18621
811228fc:	81122d20 	cmpeqi	r4,r16,18612
81122900:	81122f78 	rdprs	r4,r16,18621
81122904:	81122f78 	rdprs	r4,r16,18621
81122908:	81122f78 	rdprs	r4,r16,18621
8112290c:	81122f78 	rdprs	r4,r16,18621
81122910:	81122f78 	rdprs	r4,r16,18621
81122914:	81122f78 	rdprs	r4,r16,18621
81122918:	81122f78 	rdprs	r4,r16,18621
8112291c:	81122f78 	rdprs	r4,r16,18621
81122920:	81122f78 	rdprs	r4,r16,18621
81122924:	81122f78 	rdprs	r4,r16,18621
81122928:	81122c10 	cmplti	r4,r16,18608
8112292c:	81122dbc 	xorhi	r4,r16,18614
81122930:	81122f78 	rdprs	r4,r16,18621
81122934:	81122f78 	rdprs	r4,r16,18621
81122938:	81122f78 	rdprs	r4,r16,18621
8112293c:	81122db0 	cmpltui	r4,r16,18614
81122940:	81122dbc 	xorhi	r4,r16,18614
81122944:	81122f78 	rdprs	r4,r16,18621
81122948:	81122f78 	rdprs	r4,r16,18621
8112294c:	81122da0 	cmpeqi	r4,r16,18614
81122950:	81122f78 	rdprs	r4,r16,18621
81122954:	81122d64 	muli	r4,r16,18613
81122958:	81122b6c 	andhi	r4,r16,18605
8112295c:	811229b8 	rdprs	r4,r16,18598
81122960:	81122ed0 	cmplti	r4,r16,18619
81122964:	81122f78 	rdprs	r4,r16,18621
81122968:	81122e84 	addi	r4,r16,18618
8112296c:	81122f78 	rdprs	r4,r16,18621
81122970:	81122adc 	xori	r4,r16,18603
81122974:	81122f78 	rdprs	r4,r16,18621
81122978:	81122f78 	rdprs	r4,r16,18621
8112297c:	81122a38 	rdprs	r4,r16,18600
81122980:	dac02317 	ldw	r11,140(sp)
81122984:	5ac00017 	ldw	r11,0(r11)
81122988:	dac02415 	stw	r11,144(sp)
8112298c:	dac02317 	ldw	r11,140(sp)
81122990:	58800104 	addi	r2,r11,4
81122994:	dac02417 	ldw	r11,144(sp)
81122998:	5802e90e 	bge	r11,zero,81123540 <___svfiprintf_internal_r+0xe8c>
8112299c:	dac02417 	ldw	r11,144(sp)
811229a0:	d8802315 	stw	r2,140(sp)
811229a4:	02d7c83a 	sub	r11,zero,r11
811229a8:	dac02415 	stw	r11,144(sp)
811229ac:	94800114 	ori	r18,r18,4
811229b0:	98c00007 	ldb	r3,0(r19)
811229b4:	003f9006 	br	811227f8 <__reset+0xfb1027f8>
811229b8:	00800c04 	movi	r2,48
811229bc:	dac02317 	ldw	r11,140(sp)
811229c0:	d8801d05 	stb	r2,116(sp)
811229c4:	00801e04 	movi	r2,120
811229c8:	d8801d45 	stb	r2,117(sp)
811229cc:	d8001d85 	stb	zero,118(sp)
811229d0:	58c00104 	addi	r3,r11,4
811229d4:	5f000017 	ldw	fp,0(r11)
811229d8:	0013883a 	mov	r9,zero
811229dc:	90800094 	ori	r2,r18,2
811229e0:	80032b16 	blt	r16,zero,81123690 <___svfiprintf_internal_r+0xfdc>
811229e4:	00bfdfc4 	movi	r2,-129
811229e8:	90a4703a 	and	r18,r18,r2
811229ec:	d8c02315 	stw	r3,140(sp)
811229f0:	94800094 	ori	r18,r18,2
811229f4:	e002dc26 	beq	fp,zero,81123568 <___svfiprintf_internal_r+0xeb4>
811229f8:	01204534 	movhi	r4,33044
811229fc:	2108a504 	addi	r4,r4,8852
81122a00:	0015883a 	mov	r10,zero
81122a04:	d9002915 	stw	r4,164(sp)
81122a08:	00002306 	br	81122a98 <___svfiprintf_internal_r+0x3e4>
81122a0c:	94800054 	ori	r18,r18,1
81122a10:	98c00007 	ldb	r3,0(r19)
81122a14:	003f7806 	br	811227f8 <__reset+0xfb1027f8>
81122a18:	38803fcc 	andi	r2,r7,255
81122a1c:	1080201c 	xori	r2,r2,128
81122a20:	10bfe004 	addi	r2,r2,-128
81122a24:	1002f31e 	bne	r2,zero,811235f4 <___svfiprintf_internal_r+0xf40>
81122a28:	01000044 	movi	r4,1
81122a2c:	01c00804 	movi	r7,32
81122a30:	98c00007 	ldb	r3,0(r19)
81122a34:	003f7006 	br	811227f8 <__reset+0xfb1027f8>
81122a38:	21003fcc 	andi	r4,r4,255
81122a3c:	2003aa1e 	bne	r4,zero,811238e8 <___svfiprintf_internal_r+0x1234>
81122a40:	00a04534 	movhi	r2,33044
81122a44:	1088a504 	addi	r2,r2,8852
81122a48:	d8802915 	stw	r2,164(sp)
81122a4c:	9080080c 	andi	r2,r18,32
81122a50:	1000ba26 	beq	r2,zero,81122d3c <___svfiprintf_internal_r+0x688>
81122a54:	dac02317 	ldw	r11,140(sp)
81122a58:	5f000017 	ldw	fp,0(r11)
81122a5c:	5a400117 	ldw	r9,4(r11)
81122a60:	5ac00204 	addi	r11,r11,8
81122a64:	dac02315 	stw	r11,140(sp)
81122a68:	9080004c 	andi	r2,r18,1
81122a6c:	10029026 	beq	r2,zero,811234b0 <___svfiprintf_internal_r+0xdfc>
81122a70:	e244b03a 	or	r2,fp,r9
81122a74:	1002d41e 	bne	r2,zero,811235c8 <___svfiprintf_internal_r+0xf14>
81122a78:	d8001d85 	stb	zero,118(sp)
81122a7c:	80030b16 	blt	r16,zero,811236ac <___svfiprintf_internal_r+0xff8>
81122a80:	00bfdfc4 	movi	r2,-129
81122a84:	90a4703a 	and	r18,r18,r2
81122a88:	0015883a 	mov	r10,zero
81122a8c:	80002426 	beq	r16,zero,81122b20 <___svfiprintf_internal_r+0x46c>
81122a90:	0039883a 	mov	fp,zero
81122a94:	0013883a 	mov	r9,zero
81122a98:	d9002917 	ldw	r4,164(sp)
81122a9c:	dc401a04 	addi	r17,sp,104
81122aa0:	e08003cc 	andi	r2,fp,15
81122aa4:	4806973a 	slli	r3,r9,28
81122aa8:	2085883a 	add	r2,r4,r2
81122aac:	e038d13a 	srli	fp,fp,4
81122ab0:	10800003 	ldbu	r2,0(r2)
81122ab4:	4812d13a 	srli	r9,r9,4
81122ab8:	8c7fffc4 	addi	r17,r17,-1
81122abc:	1f38b03a 	or	fp,r3,fp
81122ac0:	88800005 	stb	r2,0(r17)
81122ac4:	e244b03a 	or	r2,fp,r9
81122ac8:	103ff51e 	bne	r2,zero,81122aa0 <__reset+0xfb102aa0>
81122acc:	dac01e17 	ldw	r11,120(sp)
81122ad0:	5c57c83a 	sub	r11,r11,r17
81122ad4:	dac02115 	stw	r11,132(sp)
81122ad8:	00001406 	br	81122b2c <___svfiprintf_internal_r+0x478>
81122adc:	21003fcc 	andi	r4,r4,255
81122ae0:	2003741e 	bne	r4,zero,811238b4 <___svfiprintf_internal_r+0x1200>
81122ae4:	9080080c 	andi	r2,r18,32
81122ae8:	10014526 	beq	r2,zero,81123000 <___svfiprintf_internal_r+0x94c>
81122aec:	dac02317 	ldw	r11,140(sp)
81122af0:	d8001d85 	stb	zero,118(sp)
81122af4:	58c00204 	addi	r3,r11,8
81122af8:	5f000017 	ldw	fp,0(r11)
81122afc:	5a400117 	ldw	r9,4(r11)
81122b00:	8002d916 	blt	r16,zero,81123668 <___svfiprintf_internal_r+0xfb4>
81122b04:	013fdfc4 	movi	r4,-129
81122b08:	e244b03a 	or	r2,fp,r9
81122b0c:	d8c02315 	stw	r3,140(sp)
81122b10:	9124703a 	and	r18,r18,r4
81122b14:	0015883a 	mov	r10,zero
81122b18:	1000b91e 	bne	r2,zero,81122e00 <___svfiprintf_internal_r+0x74c>
81122b1c:	8002e61e 	bne	r16,zero,811236b8 <___svfiprintf_internal_r+0x1004>
81122b20:	0021883a 	mov	r16,zero
81122b24:	d8002115 	stw	zero,132(sp)
81122b28:	dc401a04 	addi	r17,sp,104
81122b2c:	d8c02117 	ldw	r3,132(sp)
81122b30:	dc002015 	stw	r16,128(sp)
81122b34:	80c0010e 	bge	r16,r3,81122b3c <___svfiprintf_internal_r+0x488>
81122b38:	d8c02015 	stw	r3,128(sp)
81122b3c:	52803fcc 	andi	r10,r10,255
81122b40:	5280201c 	xori	r10,r10,128
81122b44:	52bfe004 	addi	r10,r10,-128
81122b48:	50003c26 	beq	r10,zero,81122c3c <___svfiprintf_internal_r+0x588>
81122b4c:	dac02017 	ldw	r11,128(sp)
81122b50:	5ac00044 	addi	r11,r11,1
81122b54:	dac02015 	stw	r11,128(sp)
81122b58:	00003806 	br	81122c3c <___svfiprintf_internal_r+0x588>
81122b5c:	01000044 	movi	r4,1
81122b60:	01c00ac4 	movi	r7,43
81122b64:	98c00007 	ldb	r3,0(r19)
81122b68:	003f2306 	br	811227f8 <__reset+0xfb1027f8>
81122b6c:	21003fcc 	andi	r4,r4,255
81122b70:	2003481e 	bne	r4,zero,81123894 <___svfiprintf_internal_r+0x11e0>
81122b74:	9080080c 	andi	r2,r18,32
81122b78:	10013b26 	beq	r2,zero,81123068 <___svfiprintf_internal_r+0x9b4>
81122b7c:	dac02317 	ldw	r11,140(sp)
81122b80:	d8001d85 	stb	zero,118(sp)
81122b84:	58800204 	addi	r2,r11,8
81122b88:	5f000017 	ldw	fp,0(r11)
81122b8c:	5a400117 	ldw	r9,4(r11)
81122b90:	8002a816 	blt	r16,zero,81123634 <___svfiprintf_internal_r+0xf80>
81122b94:	013fdfc4 	movi	r4,-129
81122b98:	e246b03a 	or	r3,fp,r9
81122b9c:	d8802315 	stw	r2,140(sp)
81122ba0:	9124703a 	and	r18,r18,r4
81122ba4:	18013c26 	beq	r3,zero,81123098 <___svfiprintf_internal_r+0x9e4>
81122ba8:	0015883a 	mov	r10,zero
81122bac:	dc401a04 	addi	r17,sp,104
81122bb0:	e006d0fa 	srli	r3,fp,3
81122bb4:	4808977a 	slli	r4,r9,29
81122bb8:	4812d0fa 	srli	r9,r9,3
81122bbc:	e70001cc 	andi	fp,fp,7
81122bc0:	e0800c04 	addi	r2,fp,48
81122bc4:	8c7fffc4 	addi	r17,r17,-1
81122bc8:	20f8b03a 	or	fp,r4,r3
81122bcc:	88800005 	stb	r2,0(r17)
81122bd0:	e246b03a 	or	r3,fp,r9
81122bd4:	183ff61e 	bne	r3,zero,81122bb0 <__reset+0xfb102bb0>
81122bd8:	90c0004c 	andi	r3,r18,1
81122bdc:	1800a526 	beq	r3,zero,81122e74 <___svfiprintf_internal_r+0x7c0>
81122be0:	10803fcc 	andi	r2,r2,255
81122be4:	1080201c 	xori	r2,r2,128
81122be8:	10bfe004 	addi	r2,r2,-128
81122bec:	00c00c04 	movi	r3,48
81122bf0:	10ffb626 	beq	r2,r3,81122acc <__reset+0xfb102acc>
81122bf4:	88ffffc5 	stb	r3,-1(r17)
81122bf8:	d8c01e17 	ldw	r3,120(sp)
81122bfc:	88bfffc4 	addi	r2,r17,-1
81122c00:	1023883a 	mov	r17,r2
81122c04:	1887c83a 	sub	r3,r3,r2
81122c08:	d8c02115 	stw	r3,132(sp)
81122c0c:	003fc706 	br	81122b2c <__reset+0xfb102b2c>
81122c10:	dac02317 	ldw	r11,140(sp)
81122c14:	00c00044 	movi	r3,1
81122c18:	d8c02015 	stw	r3,128(sp)
81122c1c:	58800017 	ldw	r2,0(r11)
81122c20:	5ac00104 	addi	r11,r11,4
81122c24:	d8001d85 	stb	zero,118(sp)
81122c28:	d8801005 	stb	r2,64(sp)
81122c2c:	dac02315 	stw	r11,140(sp)
81122c30:	d8c02115 	stw	r3,132(sp)
81122c34:	dc401004 	addi	r17,sp,64
81122c38:	0021883a 	mov	r16,zero
81122c3c:	90c0008c 	andi	r3,r18,2
81122c40:	d8c02215 	stw	r3,136(sp)
81122c44:	18000326 	beq	r3,zero,81122c54 <___svfiprintf_internal_r+0x5a0>
81122c48:	dac02017 	ldw	r11,128(sp)
81122c4c:	5ac00084 	addi	r11,r11,2
81122c50:	dac02015 	stw	r11,128(sp)
81122c54:	90c0210c 	andi	r3,r18,132
81122c58:	d8c02615 	stw	r3,152(sp)
81122c5c:	1801131e 	bne	r3,zero,811230ac <___svfiprintf_internal_r+0x9f8>
81122c60:	dac02417 	ldw	r11,144(sp)
81122c64:	d8c02017 	ldw	r3,128(sp)
81122c68:	58f9c83a 	sub	fp,r11,r3
81122c6c:	07010f0e 	bge	zero,fp,811230ac <___svfiprintf_internal_r+0x9f8>
81122c70:	02400404 	movi	r9,16
81122c74:	d8c01c17 	ldw	r3,112(sp)
81122c78:	d8801b17 	ldw	r2,108(sp)
81122c7c:	4f02d60e 	bge	r9,fp,811237d8 <___svfiprintf_internal_r+0x1124>
81122c80:	01604534 	movhi	r5,33044
81122c84:	29493304 	addi	r5,r5,9420
81122c88:	d9402815 	stw	r5,160(sp)
81122c8c:	028001c4 	movi	r10,7
81122c90:	00000306 	br	81122ca0 <___svfiprintf_internal_r+0x5ec>
81122c94:	e73ffc04 	addi	fp,fp,-16
81122c98:	42000204 	addi	r8,r8,8
81122c9c:	4f00150e 	bge	r9,fp,81122cf4 <___svfiprintf_internal_r+0x640>
81122ca0:	18c00404 	addi	r3,r3,16
81122ca4:	10800044 	addi	r2,r2,1
81122ca8:	45800015 	stw	r22,0(r8)
81122cac:	42400115 	stw	r9,4(r8)
81122cb0:	d8c01c15 	stw	r3,112(sp)
81122cb4:	d8801b15 	stw	r2,108(sp)
81122cb8:	50bff60e 	bge	r10,r2,81122c94 <__reset+0xfb102c94>
81122cbc:	d9801a04 	addi	r6,sp,104
81122cc0:	b80b883a 	mov	r5,r23
81122cc4:	a809883a 	mov	r4,r21
81122cc8:	da402c15 	stw	r9,176(sp)
81122ccc:	da802d15 	stw	r10,180(sp)
81122cd0:	11224dc0 	call	811224dc <__ssprint_r>
81122cd4:	da402c17 	ldw	r9,176(sp)
81122cd8:	da802d17 	ldw	r10,180(sp)
81122cdc:	1001851e 	bne	r2,zero,811232f4 <___svfiprintf_internal_r+0xc40>
81122ce0:	e73ffc04 	addi	fp,fp,-16
81122ce4:	d8c01c17 	ldw	r3,112(sp)
81122ce8:	d8801b17 	ldw	r2,108(sp)
81122cec:	d811883a 	mov	r8,sp
81122cf0:	4f3feb16 	blt	r9,fp,81122ca0 <__reset+0xfb102ca0>
81122cf4:	dac02817 	ldw	r11,160(sp)
81122cf8:	e0c7883a 	add	r3,fp,r3
81122cfc:	10800044 	addi	r2,r2,1
81122d00:	42c00015 	stw	r11,0(r8)
81122d04:	47000115 	stw	fp,4(r8)
81122d08:	d8c01c15 	stw	r3,112(sp)
81122d0c:	d8801b15 	stw	r2,108(sp)
81122d10:	010001c4 	movi	r4,7
81122d14:	2081ee16 	blt	r4,r2,811234d0 <___svfiprintf_internal_r+0xe1c>
81122d18:	42000204 	addi	r8,r8,8
81122d1c:	0000e506 	br	811230b4 <___svfiprintf_internal_r+0xa00>
81122d20:	21003fcc 	andi	r4,r4,255
81122d24:	2002dd1e 	bne	r4,zero,8112389c <___svfiprintf_internal_r+0x11e8>
81122d28:	00a04534 	movhi	r2,33044
81122d2c:	1088a004 	addi	r2,r2,8832
81122d30:	d8802915 	stw	r2,164(sp)
81122d34:	9080080c 	andi	r2,r18,32
81122d38:	103f461e 	bne	r2,zero,81122a54 <__reset+0xfb102a54>
81122d3c:	9080040c 	andi	r2,r18,16
81122d40:	10022e1e 	bne	r2,zero,811235fc <___svfiprintf_internal_r+0xf48>
81122d44:	9080100c 	andi	r2,r18,64
81122d48:	dac02317 	ldw	r11,140(sp)
81122d4c:	10027326 	beq	r2,zero,8112371c <___svfiprintf_internal_r+0x1068>
81122d50:	5f00000b 	ldhu	fp,0(r11)
81122d54:	5ac00104 	addi	r11,r11,4
81122d58:	0013883a 	mov	r9,zero
81122d5c:	dac02315 	stw	r11,140(sp)
81122d60:	003f4106 	br	81122a68 <__reset+0xfb102a68>
81122d64:	21003fcc 	andi	r4,r4,255
81122d68:	2002e11e 	bne	r4,zero,811238f0 <___svfiprintf_internal_r+0x123c>
81122d6c:	9080080c 	andi	r2,r18,32
81122d70:	1002011e 	bne	r2,zero,81123578 <___svfiprintf_internal_r+0xec4>
81122d74:	9080040c 	andi	r2,r18,16
81122d78:	10023e1e 	bne	r2,zero,81123674 <___svfiprintf_internal_r+0xfc0>
81122d7c:	9480100c 	andi	r18,r18,64
81122d80:	90023c26 	beq	r18,zero,81123674 <___svfiprintf_internal_r+0xfc0>
81122d84:	dac02317 	ldw	r11,140(sp)
81122d88:	58800017 	ldw	r2,0(r11)
81122d8c:	5ac00104 	addi	r11,r11,4
81122d90:	dac02315 	stw	r11,140(sp)
81122d94:	dac02517 	ldw	r11,148(sp)
81122d98:	12c0000d 	sth	r11,0(r2)
81122d9c:	003e6e06 	br	81122758 <__reset+0xfb102758>
81122da0:	98c00007 	ldb	r3,0(r19)
81122da4:	1a422926 	beq	r3,r9,8112364c <___svfiprintf_internal_r+0xf98>
81122da8:	94800414 	ori	r18,r18,16
81122dac:	003e9206 	br	811227f8 <__reset+0xfb1027f8>
81122db0:	94801014 	ori	r18,r18,64
81122db4:	98c00007 	ldb	r3,0(r19)
81122db8:	003e8f06 	br	811227f8 <__reset+0xfb1027f8>
81122dbc:	21003fcc 	andi	r4,r4,255
81122dc0:	2002c71e 	bne	r4,zero,811238e0 <___svfiprintf_internal_r+0x122c>
81122dc4:	9080080c 	andi	r2,r18,32
81122dc8:	10004926 	beq	r2,zero,81122ef0 <___svfiprintf_internal_r+0x83c>
81122dcc:	dac02317 	ldw	r11,140(sp)
81122dd0:	58800117 	ldw	r2,4(r11)
81122dd4:	5f000017 	ldw	fp,0(r11)
81122dd8:	5ac00204 	addi	r11,r11,8
81122ddc:	dac02315 	stw	r11,140(sp)
81122de0:	1013883a 	mov	r9,r2
81122de4:	10004b16 	blt	r2,zero,81122f14 <___svfiprintf_internal_r+0x860>
81122de8:	da801d83 	ldbu	r10,118(sp)
81122dec:	8001cb16 	blt	r16,zero,8112351c <___svfiprintf_internal_r+0xe68>
81122df0:	00ffdfc4 	movi	r3,-129
81122df4:	e244b03a 	or	r2,fp,r9
81122df8:	90e4703a 	and	r18,r18,r3
81122dfc:	103f4726 	beq	r2,zero,81122b1c <__reset+0xfb102b1c>
81122e00:	48008c26 	beq	r9,zero,81123034 <___svfiprintf_internal_r+0x980>
81122e04:	dc802015 	stw	r18,128(sp)
81122e08:	dc002115 	stw	r16,132(sp)
81122e0c:	dc401a04 	addi	r17,sp,104
81122e10:	e021883a 	mov	r16,fp
81122e14:	da002215 	stw	r8,136(sp)
81122e18:	5039883a 	mov	fp,r10
81122e1c:	4825883a 	mov	r18,r9
81122e20:	8009883a 	mov	r4,r16
81122e24:	900b883a 	mov	r5,r18
81122e28:	01800284 	movi	r6,10
81122e2c:	000f883a 	mov	r7,zero
81122e30:	1126a400 	call	81126a40 <__umoddi3>
81122e34:	10800c04 	addi	r2,r2,48
81122e38:	8c7fffc4 	addi	r17,r17,-1
81122e3c:	8009883a 	mov	r4,r16
81122e40:	900b883a 	mov	r5,r18
81122e44:	88800005 	stb	r2,0(r17)
81122e48:	01800284 	movi	r6,10
81122e4c:	000f883a 	mov	r7,zero
81122e50:	11264c00 	call	811264c0 <__udivdi3>
81122e54:	1021883a 	mov	r16,r2
81122e58:	10c4b03a 	or	r2,r2,r3
81122e5c:	1825883a 	mov	r18,r3
81122e60:	103fef1e 	bne	r2,zero,81122e20 <__reset+0xfb102e20>
81122e64:	dc802017 	ldw	r18,128(sp)
81122e68:	dc002117 	ldw	r16,132(sp)
81122e6c:	da002217 	ldw	r8,136(sp)
81122e70:	e015883a 	mov	r10,fp
81122e74:	d8c01e17 	ldw	r3,120(sp)
81122e78:	1c47c83a 	sub	r3,r3,r17
81122e7c:	d8c02115 	stw	r3,132(sp)
81122e80:	003f2a06 	br	81122b2c <__reset+0xfb102b2c>
81122e84:	dac02317 	ldw	r11,140(sp)
81122e88:	d8001d85 	stb	zero,118(sp)
81122e8c:	5c400017 	ldw	r17,0(r11)
81122e90:	5f000104 	addi	fp,r11,4
81122e94:	88022f26 	beq	r17,zero,81123754 <___svfiprintf_internal_r+0x10a0>
81122e98:	80022516 	blt	r16,zero,81123730 <___svfiprintf_internal_r+0x107c>
81122e9c:	800d883a 	mov	r6,r16
81122ea0:	000b883a 	mov	r5,zero
81122ea4:	8809883a 	mov	r4,r17
81122ea8:	da002c15 	stw	r8,176(sp)
81122eac:	111ea800 	call	8111ea80 <memchr>
81122eb0:	da002c17 	ldw	r8,176(sp)
81122eb4:	10026426 	beq	r2,zero,81123848 <___svfiprintf_internal_r+0x1194>
81122eb8:	1445c83a 	sub	r2,r2,r17
81122ebc:	d8802115 	stw	r2,132(sp)
81122ec0:	da801d83 	ldbu	r10,118(sp)
81122ec4:	df002315 	stw	fp,140(sp)
81122ec8:	0021883a 	mov	r16,zero
81122ecc:	003f1706 	br	81122b2c <__reset+0xfb102b2c>
81122ed0:	94800814 	ori	r18,r18,32
81122ed4:	98c00007 	ldb	r3,0(r19)
81122ed8:	003e4706 	br	811227f8 <__reset+0xfb1027f8>
81122edc:	21003fcc 	andi	r4,r4,255
81122ee0:	2002701e 	bne	r4,zero,811238a4 <___svfiprintf_internal_r+0x11f0>
81122ee4:	94800414 	ori	r18,r18,16
81122ee8:	9080080c 	andi	r2,r18,32
81122eec:	103fb71e 	bne	r2,zero,81122dcc <__reset+0xfb102dcc>
81122ef0:	9080040c 	andi	r2,r18,16
81122ef4:	1001ab26 	beq	r2,zero,811235a4 <___svfiprintf_internal_r+0xef0>
81122ef8:	dac02317 	ldw	r11,140(sp)
81122efc:	5f000017 	ldw	fp,0(r11)
81122f00:	5ac00104 	addi	r11,r11,4
81122f04:	dac02315 	stw	r11,140(sp)
81122f08:	e013d7fa 	srai	r9,fp,31
81122f0c:	4805883a 	mov	r2,r9
81122f10:	103fb50e 	bge	r2,zero,81122de8 <__reset+0xfb102de8>
81122f14:	0739c83a 	sub	fp,zero,fp
81122f18:	02800b44 	movi	r10,45
81122f1c:	e004c03a 	cmpne	r2,fp,zero
81122f20:	0253c83a 	sub	r9,zero,r9
81122f24:	da801d85 	stb	r10,118(sp)
81122f28:	4893c83a 	sub	r9,r9,r2
81122f2c:	80023016 	blt	r16,zero,811237f0 <___svfiprintf_internal_r+0x113c>
81122f30:	00bfdfc4 	movi	r2,-129
81122f34:	90a4703a 	and	r18,r18,r2
81122f38:	483fb21e 	bne	r9,zero,81122e04 <__reset+0xfb102e04>
81122f3c:	00003d06 	br	81123034 <___svfiprintf_internal_r+0x980>
81122f40:	9817883a 	mov	r11,r19
81122f44:	d8002415 	stw	zero,144(sp)
81122f48:	18bff404 	addi	r2,r3,-48
81122f4c:	0019883a 	mov	r12,zero
81122f50:	58c00007 	ldb	r3,0(r11)
81122f54:	630002a4 	muli	r12,r12,10
81122f58:	9cc00044 	addi	r19,r19,1
81122f5c:	9817883a 	mov	r11,r19
81122f60:	1319883a 	add	r12,r2,r12
81122f64:	18bff404 	addi	r2,r3,-48
81122f68:	30bff92e 	bgeu	r6,r2,81122f50 <__reset+0xfb102f50>
81122f6c:	db002415 	stw	r12,144(sp)
81122f70:	18bff804 	addi	r2,r3,-32
81122f74:	28be232e 	bgeu	r5,r2,81122804 <__reset+0xfb102804>
81122f78:	21003fcc 	andi	r4,r4,255
81122f7c:	20024b1e 	bne	r4,zero,811238ac <___svfiprintf_internal_r+0x11f8>
81122f80:	1800d626 	beq	r3,zero,811232dc <___svfiprintf_internal_r+0xc28>
81122f84:	02c00044 	movi	r11,1
81122f88:	dac02015 	stw	r11,128(sp)
81122f8c:	d8c01005 	stb	r3,64(sp)
81122f90:	d8001d85 	stb	zero,118(sp)
81122f94:	dac02115 	stw	r11,132(sp)
81122f98:	dc401004 	addi	r17,sp,64
81122f9c:	003f2606 	br	81122c38 <__reset+0xfb102c38>
81122fa0:	94802014 	ori	r18,r18,128
81122fa4:	98c00007 	ldb	r3,0(r19)
81122fa8:	003e1306 	br	811227f8 <__reset+0xfb1027f8>
81122fac:	98c00007 	ldb	r3,0(r19)
81122fb0:	9ac00044 	addi	r11,r19,1
81122fb4:	1a822b26 	beq	r3,r10,81123864 <___svfiprintf_internal_r+0x11b0>
81122fb8:	18bff404 	addi	r2,r3,-48
81122fbc:	0021883a 	mov	r16,zero
81122fc0:	30821e36 	bltu	r6,r2,8112383c <___svfiprintf_internal_r+0x1188>
81122fc4:	58c00007 	ldb	r3,0(r11)
81122fc8:	840002a4 	muli	r16,r16,10
81122fcc:	5cc00044 	addi	r19,r11,1
81122fd0:	9817883a 	mov	r11,r19
81122fd4:	80a1883a 	add	r16,r16,r2
81122fd8:	18bff404 	addi	r2,r3,-48
81122fdc:	30bff92e 	bgeu	r6,r2,81122fc4 <__reset+0xfb102fc4>
81122fe0:	803e060e 	bge	r16,zero,811227fc <__reset+0xfb1027fc>
81122fe4:	043fffc4 	movi	r16,-1
81122fe8:	003e0406 	br	811227fc <__reset+0xfb1027fc>
81122fec:	21003fcc 	andi	r4,r4,255
81122ff0:	2002371e 	bne	r4,zero,811238d0 <___svfiprintf_internal_r+0x121c>
81122ff4:	94800414 	ori	r18,r18,16
81122ff8:	9080080c 	andi	r2,r18,32
81122ffc:	103ebb1e 	bne	r2,zero,81122aec <__reset+0xfb102aec>
81123000:	9080040c 	andi	r2,r18,16
81123004:	10013b26 	beq	r2,zero,811234f4 <___svfiprintf_internal_r+0xe40>
81123008:	dac02317 	ldw	r11,140(sp)
8112300c:	d8001d85 	stb	zero,118(sp)
81123010:	0013883a 	mov	r9,zero
81123014:	58800104 	addi	r2,r11,4
81123018:	5f000017 	ldw	fp,0(r11)
8112301c:	80013d16 	blt	r16,zero,81123514 <___svfiprintf_internal_r+0xe60>
81123020:	00ffdfc4 	movi	r3,-129
81123024:	d8802315 	stw	r2,140(sp)
81123028:	90e4703a 	and	r18,r18,r3
8112302c:	0015883a 	mov	r10,zero
81123030:	e03eba26 	beq	fp,zero,81122b1c <__reset+0xfb102b1c>
81123034:	00800244 	movi	r2,9
81123038:	173f7236 	bltu	r2,fp,81122e04 <__reset+0xfb102e04>
8112303c:	dac02b17 	ldw	r11,172(sp)
81123040:	e7000c04 	addi	fp,fp,48
81123044:	df0019c5 	stb	fp,103(sp)
81123048:	dac02115 	stw	r11,132(sp)
8112304c:	dc4019c4 	addi	r17,sp,103
81123050:	003eb606 	br	81122b2c <__reset+0xfb102b2c>
81123054:	21003fcc 	andi	r4,r4,255
81123058:	20021f1e 	bne	r4,zero,811238d8 <___svfiprintf_internal_r+0x1224>
8112305c:	94800414 	ori	r18,r18,16
81123060:	9080080c 	andi	r2,r18,32
81123064:	103ec51e 	bne	r2,zero,81122b7c <__reset+0xfb102b7c>
81123068:	9080040c 	andi	r2,r18,16
8112306c:	10016926 	beq	r2,zero,81123614 <___svfiprintf_internal_r+0xf60>
81123070:	dac02317 	ldw	r11,140(sp)
81123074:	d8001d85 	stb	zero,118(sp)
81123078:	0013883a 	mov	r9,zero
8112307c:	58800104 	addi	r2,r11,4
81123080:	5f000017 	ldw	fp,0(r11)
81123084:	80016b16 	blt	r16,zero,81123634 <___svfiprintf_internal_r+0xf80>
81123088:	00ffdfc4 	movi	r3,-129
8112308c:	d8802315 	stw	r2,140(sp)
81123090:	90e4703a 	and	r18,r18,r3
81123094:	e03ec41e 	bne	fp,zero,81122ba8 <__reset+0xfb102ba8>
81123098:	0015883a 	mov	r10,zero
8112309c:	8001c226 	beq	r16,zero,811237a8 <___svfiprintf_internal_r+0x10f4>
811230a0:	0039883a 	mov	fp,zero
811230a4:	0013883a 	mov	r9,zero
811230a8:	003ec006 	br	81122bac <__reset+0xfb102bac>
811230ac:	d8c01c17 	ldw	r3,112(sp)
811230b0:	d8801b17 	ldw	r2,108(sp)
811230b4:	d9001d87 	ldb	r4,118(sp)
811230b8:	20000b26 	beq	r4,zero,811230e8 <___svfiprintf_internal_r+0xa34>
811230bc:	d9001d84 	addi	r4,sp,118
811230c0:	18c00044 	addi	r3,r3,1
811230c4:	10800044 	addi	r2,r2,1
811230c8:	41000015 	stw	r4,0(r8)
811230cc:	01000044 	movi	r4,1
811230d0:	41000115 	stw	r4,4(r8)
811230d4:	d8c01c15 	stw	r3,112(sp)
811230d8:	d8801b15 	stw	r2,108(sp)
811230dc:	010001c4 	movi	r4,7
811230e0:	2080e116 	blt	r4,r2,81123468 <___svfiprintf_internal_r+0xdb4>
811230e4:	42000204 	addi	r8,r8,8
811230e8:	dac02217 	ldw	r11,136(sp)
811230ec:	58000b26 	beq	r11,zero,8112311c <___svfiprintf_internal_r+0xa68>
811230f0:	d9001d04 	addi	r4,sp,116
811230f4:	18c00084 	addi	r3,r3,2
811230f8:	10800044 	addi	r2,r2,1
811230fc:	41000015 	stw	r4,0(r8)
81123100:	01000084 	movi	r4,2
81123104:	41000115 	stw	r4,4(r8)
81123108:	d8c01c15 	stw	r3,112(sp)
8112310c:	d8801b15 	stw	r2,108(sp)
81123110:	010001c4 	movi	r4,7
81123114:	2080dd16 	blt	r4,r2,8112348c <___svfiprintf_internal_r+0xdd8>
81123118:	42000204 	addi	r8,r8,8
8112311c:	dac02617 	ldw	r11,152(sp)
81123120:	01002004 	movi	r4,128
81123124:	59008426 	beq	r11,r4,81123338 <___svfiprintf_internal_r+0xc84>
81123128:	dac02117 	ldw	r11,132(sp)
8112312c:	82e1c83a 	sub	r16,r16,r11
81123130:	0400270e 	bge	zero,r16,811231d0 <___svfiprintf_internal_r+0xb1c>
81123134:	01c00404 	movi	r7,16
81123138:	3c016a0e 	bge	r7,r16,811236e4 <___svfiprintf_internal_r+0x1030>
8112313c:	01604534 	movhi	r5,33044
81123140:	29492f04 	addi	r5,r5,9404
81123144:	d9402215 	stw	r5,136(sp)
81123148:	070001c4 	movi	fp,7
8112314c:	00000306 	br	8112315c <___svfiprintf_internal_r+0xaa8>
81123150:	843ffc04 	addi	r16,r16,-16
81123154:	42000204 	addi	r8,r8,8
81123158:	3c00130e 	bge	r7,r16,811231a8 <___svfiprintf_internal_r+0xaf4>
8112315c:	18c00404 	addi	r3,r3,16
81123160:	10800044 	addi	r2,r2,1
81123164:	45000015 	stw	r20,0(r8)
81123168:	41c00115 	stw	r7,4(r8)
8112316c:	d8c01c15 	stw	r3,112(sp)
81123170:	d8801b15 	stw	r2,108(sp)
81123174:	e0bff60e 	bge	fp,r2,81123150 <__reset+0xfb103150>
81123178:	d9801a04 	addi	r6,sp,104
8112317c:	b80b883a 	mov	r5,r23
81123180:	a809883a 	mov	r4,r21
81123184:	d9c02c15 	stw	r7,176(sp)
81123188:	11224dc0 	call	811224dc <__ssprint_r>
8112318c:	d9c02c17 	ldw	r7,176(sp)
81123190:	1000581e 	bne	r2,zero,811232f4 <___svfiprintf_internal_r+0xc40>
81123194:	843ffc04 	addi	r16,r16,-16
81123198:	d8c01c17 	ldw	r3,112(sp)
8112319c:	d8801b17 	ldw	r2,108(sp)
811231a0:	d811883a 	mov	r8,sp
811231a4:	3c3fed16 	blt	r7,r16,8112315c <__reset+0xfb10315c>
811231a8:	dac02217 	ldw	r11,136(sp)
811231ac:	1c07883a 	add	r3,r3,r16
811231b0:	10800044 	addi	r2,r2,1
811231b4:	42c00015 	stw	r11,0(r8)
811231b8:	44000115 	stw	r16,4(r8)
811231bc:	d8c01c15 	stw	r3,112(sp)
811231c0:	d8801b15 	stw	r2,108(sp)
811231c4:	010001c4 	movi	r4,7
811231c8:	20809e16 	blt	r4,r2,81123444 <___svfiprintf_internal_r+0xd90>
811231cc:	42000204 	addi	r8,r8,8
811231d0:	dac02117 	ldw	r11,132(sp)
811231d4:	10800044 	addi	r2,r2,1
811231d8:	44400015 	stw	r17,0(r8)
811231dc:	58c7883a 	add	r3,r11,r3
811231e0:	42c00115 	stw	r11,4(r8)
811231e4:	d8c01c15 	stw	r3,112(sp)
811231e8:	d8801b15 	stw	r2,108(sp)
811231ec:	010001c4 	movi	r4,7
811231f0:	20807f16 	blt	r4,r2,811233f0 <___svfiprintf_internal_r+0xd3c>
811231f4:	42000204 	addi	r8,r8,8
811231f8:	9480010c 	andi	r18,r18,4
811231fc:	90002926 	beq	r18,zero,811232a4 <___svfiprintf_internal_r+0xbf0>
81123200:	dac02417 	ldw	r11,144(sp)
81123204:	d8802017 	ldw	r2,128(sp)
81123208:	58a1c83a 	sub	r16,r11,r2
8112320c:	0400250e 	bge	zero,r16,811232a4 <___svfiprintf_internal_r+0xbf0>
81123210:	04400404 	movi	r17,16
81123214:	d8801b17 	ldw	r2,108(sp)
81123218:	8c017c0e 	bge	r17,r16,8112380c <___svfiprintf_internal_r+0x1158>
8112321c:	01604534 	movhi	r5,33044
81123220:	29493304 	addi	r5,r5,9420
81123224:	d9402815 	stw	r5,160(sp)
81123228:	048001c4 	movi	r18,7
8112322c:	00000306 	br	8112323c <___svfiprintf_internal_r+0xb88>
81123230:	843ffc04 	addi	r16,r16,-16
81123234:	42000204 	addi	r8,r8,8
81123238:	8c00110e 	bge	r17,r16,81123280 <___svfiprintf_internal_r+0xbcc>
8112323c:	18c00404 	addi	r3,r3,16
81123240:	10800044 	addi	r2,r2,1
81123244:	45800015 	stw	r22,0(r8)
81123248:	44400115 	stw	r17,4(r8)
8112324c:	d8c01c15 	stw	r3,112(sp)
81123250:	d8801b15 	stw	r2,108(sp)
81123254:	90bff60e 	bge	r18,r2,81123230 <__reset+0xfb103230>
81123258:	d9801a04 	addi	r6,sp,104
8112325c:	b80b883a 	mov	r5,r23
81123260:	a809883a 	mov	r4,r21
81123264:	11224dc0 	call	811224dc <__ssprint_r>
81123268:	1000221e 	bne	r2,zero,811232f4 <___svfiprintf_internal_r+0xc40>
8112326c:	843ffc04 	addi	r16,r16,-16
81123270:	d8c01c17 	ldw	r3,112(sp)
81123274:	d8801b17 	ldw	r2,108(sp)
81123278:	d811883a 	mov	r8,sp
8112327c:	8c3fef16 	blt	r17,r16,8112323c <__reset+0xfb10323c>
81123280:	dac02817 	ldw	r11,160(sp)
81123284:	1c07883a 	add	r3,r3,r16
81123288:	10800044 	addi	r2,r2,1
8112328c:	42c00015 	stw	r11,0(r8)
81123290:	44000115 	stw	r16,4(r8)
81123294:	d8c01c15 	stw	r3,112(sp)
81123298:	d8801b15 	stw	r2,108(sp)
8112329c:	010001c4 	movi	r4,7
811232a0:	2080aa16 	blt	r4,r2,8112354c <___svfiprintf_internal_r+0xe98>
811232a4:	d8802417 	ldw	r2,144(sp)
811232a8:	dac02017 	ldw	r11,128(sp)
811232ac:	12c0010e 	bge	r2,r11,811232b4 <___svfiprintf_internal_r+0xc00>
811232b0:	5805883a 	mov	r2,r11
811232b4:	dac02517 	ldw	r11,148(sp)
811232b8:	5897883a 	add	r11,r11,r2
811232bc:	dac02515 	stw	r11,148(sp)
811232c0:	1800531e 	bne	r3,zero,81123410 <___svfiprintf_internal_r+0xd5c>
811232c4:	98800007 	ldb	r2,0(r19)
811232c8:	d8001b15 	stw	zero,108(sp)
811232cc:	d811883a 	mov	r8,sp
811232d0:	103d231e 	bne	r2,zero,81122760 <__reset+0xfb102760>
811232d4:	9823883a 	mov	r17,r19
811232d8:	003d3906 	br	811227c0 <__reset+0xfb1027c0>
811232dc:	d8801c17 	ldw	r2,112(sp)
811232e0:	10000426 	beq	r2,zero,811232f4 <___svfiprintf_internal_r+0xc40>
811232e4:	d9402717 	ldw	r5,156(sp)
811232e8:	d9002a17 	ldw	r4,168(sp)
811232ec:	d9801a04 	addi	r6,sp,104
811232f0:	11224dc0 	call	811224dc <__ssprint_r>
811232f4:	dac02717 	ldw	r11,156(sp)
811232f8:	d8802517 	ldw	r2,148(sp)
811232fc:	58c0030b 	ldhu	r3,12(r11)
81123300:	18c0100c 	andi	r3,r3,64
81123304:	1801381e 	bne	r3,zero,811237e8 <___svfiprintf_internal_r+0x1134>
81123308:	dfc03717 	ldw	ra,220(sp)
8112330c:	df003617 	ldw	fp,216(sp)
81123310:	ddc03517 	ldw	r23,212(sp)
81123314:	dd803417 	ldw	r22,208(sp)
81123318:	dd403317 	ldw	r21,204(sp)
8112331c:	dd003217 	ldw	r20,200(sp)
81123320:	dcc03117 	ldw	r19,196(sp)
81123324:	dc803017 	ldw	r18,192(sp)
81123328:	dc402f17 	ldw	r17,188(sp)
8112332c:	dc002e17 	ldw	r16,184(sp)
81123330:	dec03804 	addi	sp,sp,224
81123334:	f800283a 	ret
81123338:	dac02417 	ldw	r11,144(sp)
8112333c:	d9002017 	ldw	r4,128(sp)
81123340:	5939c83a 	sub	fp,r11,r4
81123344:	073f780e 	bge	zero,fp,81123128 <__reset+0xfb103128>
81123348:	02400404 	movi	r9,16
8112334c:	4f01370e 	bge	r9,fp,8112382c <___svfiprintf_internal_r+0x1178>
81123350:	02e04534 	movhi	r11,33044
81123354:	5ac92f04 	addi	r11,r11,9404
81123358:	dac02215 	stw	r11,136(sp)
8112335c:	028001c4 	movi	r10,7
81123360:	00000306 	br	81123370 <___svfiprintf_internal_r+0xcbc>
81123364:	e73ffc04 	addi	fp,fp,-16
81123368:	42000204 	addi	r8,r8,8
8112336c:	4f00150e 	bge	r9,fp,811233c4 <___svfiprintf_internal_r+0xd10>
81123370:	18c00404 	addi	r3,r3,16
81123374:	10800044 	addi	r2,r2,1
81123378:	45000015 	stw	r20,0(r8)
8112337c:	42400115 	stw	r9,4(r8)
81123380:	d8c01c15 	stw	r3,112(sp)
81123384:	d8801b15 	stw	r2,108(sp)
81123388:	50bff60e 	bge	r10,r2,81123364 <__reset+0xfb103364>
8112338c:	d9801a04 	addi	r6,sp,104
81123390:	b80b883a 	mov	r5,r23
81123394:	a809883a 	mov	r4,r21
81123398:	da402c15 	stw	r9,176(sp)
8112339c:	da802d15 	stw	r10,180(sp)
811233a0:	11224dc0 	call	811224dc <__ssprint_r>
811233a4:	da402c17 	ldw	r9,176(sp)
811233a8:	da802d17 	ldw	r10,180(sp)
811233ac:	103fd11e 	bne	r2,zero,811232f4 <__reset+0xfb1032f4>
811233b0:	e73ffc04 	addi	fp,fp,-16
811233b4:	d8c01c17 	ldw	r3,112(sp)
811233b8:	d8801b17 	ldw	r2,108(sp)
811233bc:	d811883a 	mov	r8,sp
811233c0:	4f3feb16 	blt	r9,fp,81123370 <__reset+0xfb103370>
811233c4:	dac02217 	ldw	r11,136(sp)
811233c8:	1f07883a 	add	r3,r3,fp
811233cc:	10800044 	addi	r2,r2,1
811233d0:	42c00015 	stw	r11,0(r8)
811233d4:	47000115 	stw	fp,4(r8)
811233d8:	d8c01c15 	stw	r3,112(sp)
811233dc:	d8801b15 	stw	r2,108(sp)
811233e0:	010001c4 	movi	r4,7
811233e4:	2080b616 	blt	r4,r2,811236c0 <___svfiprintf_internal_r+0x100c>
811233e8:	42000204 	addi	r8,r8,8
811233ec:	003f4e06 	br	81123128 <__reset+0xfb103128>
811233f0:	d9801a04 	addi	r6,sp,104
811233f4:	b80b883a 	mov	r5,r23
811233f8:	a809883a 	mov	r4,r21
811233fc:	11224dc0 	call	811224dc <__ssprint_r>
81123400:	103fbc1e 	bne	r2,zero,811232f4 <__reset+0xfb1032f4>
81123404:	d8c01c17 	ldw	r3,112(sp)
81123408:	d811883a 	mov	r8,sp
8112340c:	003f7a06 	br	811231f8 <__reset+0xfb1031f8>
81123410:	d9801a04 	addi	r6,sp,104
81123414:	b80b883a 	mov	r5,r23
81123418:	a809883a 	mov	r4,r21
8112341c:	11224dc0 	call	811224dc <__ssprint_r>
81123420:	103fa826 	beq	r2,zero,811232c4 <__reset+0xfb1032c4>
81123424:	003fb306 	br	811232f4 <__reset+0xfb1032f4>
81123428:	d9801a04 	addi	r6,sp,104
8112342c:	b80b883a 	mov	r5,r23
81123430:	a809883a 	mov	r4,r21
81123434:	11224dc0 	call	811224dc <__ssprint_r>
81123438:	103fae1e 	bne	r2,zero,811232f4 <__reset+0xfb1032f4>
8112343c:	d811883a 	mov	r8,sp
81123440:	003cdc06 	br	811227b4 <__reset+0xfb1027b4>
81123444:	d9801a04 	addi	r6,sp,104
81123448:	b80b883a 	mov	r5,r23
8112344c:	a809883a 	mov	r4,r21
81123450:	11224dc0 	call	811224dc <__ssprint_r>
81123454:	103fa71e 	bne	r2,zero,811232f4 <__reset+0xfb1032f4>
81123458:	d8c01c17 	ldw	r3,112(sp)
8112345c:	d8801b17 	ldw	r2,108(sp)
81123460:	d811883a 	mov	r8,sp
81123464:	003f5a06 	br	811231d0 <__reset+0xfb1031d0>
81123468:	d9801a04 	addi	r6,sp,104
8112346c:	b80b883a 	mov	r5,r23
81123470:	a809883a 	mov	r4,r21
81123474:	11224dc0 	call	811224dc <__ssprint_r>
81123478:	103f9e1e 	bne	r2,zero,811232f4 <__reset+0xfb1032f4>
8112347c:	d8c01c17 	ldw	r3,112(sp)
81123480:	d8801b17 	ldw	r2,108(sp)
81123484:	d811883a 	mov	r8,sp
81123488:	003f1706 	br	811230e8 <__reset+0xfb1030e8>
8112348c:	d9801a04 	addi	r6,sp,104
81123490:	b80b883a 	mov	r5,r23
81123494:	a809883a 	mov	r4,r21
81123498:	11224dc0 	call	811224dc <__ssprint_r>
8112349c:	103f951e 	bne	r2,zero,811232f4 <__reset+0xfb1032f4>
811234a0:	d8c01c17 	ldw	r3,112(sp)
811234a4:	d8801b17 	ldw	r2,108(sp)
811234a8:	d811883a 	mov	r8,sp
811234ac:	003f1b06 	br	8112311c <__reset+0xfb10311c>
811234b0:	d8001d85 	stb	zero,118(sp)
811234b4:	80007b16 	blt	r16,zero,811236a4 <___svfiprintf_internal_r+0xff0>
811234b8:	00ffdfc4 	movi	r3,-129
811234bc:	e244b03a 	or	r2,fp,r9
811234c0:	90e4703a 	and	r18,r18,r3
811234c4:	103d7026 	beq	r2,zero,81122a88 <__reset+0xfb102a88>
811234c8:	0015883a 	mov	r10,zero
811234cc:	003d7206 	br	81122a98 <__reset+0xfb102a98>
811234d0:	d9801a04 	addi	r6,sp,104
811234d4:	b80b883a 	mov	r5,r23
811234d8:	a809883a 	mov	r4,r21
811234dc:	11224dc0 	call	811224dc <__ssprint_r>
811234e0:	103f841e 	bne	r2,zero,811232f4 <__reset+0xfb1032f4>
811234e4:	d8c01c17 	ldw	r3,112(sp)
811234e8:	d8801b17 	ldw	r2,108(sp)
811234ec:	d811883a 	mov	r8,sp
811234f0:	003ef006 	br	811230b4 <__reset+0xfb1030b4>
811234f4:	9080100c 	andi	r2,r18,64
811234f8:	d8001d85 	stb	zero,118(sp)
811234fc:	dac02317 	ldw	r11,140(sp)
81123500:	10008126 	beq	r2,zero,81123708 <___svfiprintf_internal_r+0x1054>
81123504:	58800104 	addi	r2,r11,4
81123508:	5f00000b 	ldhu	fp,0(r11)
8112350c:	0013883a 	mov	r9,zero
81123510:	803ec30e 	bge	r16,zero,81123020 <__reset+0xfb103020>
81123514:	d8802315 	stw	r2,140(sp)
81123518:	0015883a 	mov	r10,zero
8112351c:	e244b03a 	or	r2,fp,r9
81123520:	103e371e 	bne	r2,zero,81122e00 <__reset+0xfb102e00>
81123524:	00800044 	movi	r2,1
81123528:	10803fcc 	andi	r2,r2,255
8112352c:	00c00044 	movi	r3,1
81123530:	10c06126 	beq	r2,r3,811236b8 <___svfiprintf_internal_r+0x1004>
81123534:	00c00084 	movi	r3,2
81123538:	10fd5526 	beq	r2,r3,81122a90 <__reset+0xfb102a90>
8112353c:	003ed806 	br	811230a0 <__reset+0xfb1030a0>
81123540:	d8802315 	stw	r2,140(sp)
81123544:	98c00007 	ldb	r3,0(r19)
81123548:	003cab06 	br	811227f8 <__reset+0xfb1027f8>
8112354c:	d9801a04 	addi	r6,sp,104
81123550:	b80b883a 	mov	r5,r23
81123554:	a809883a 	mov	r4,r21
81123558:	11224dc0 	call	811224dc <__ssprint_r>
8112355c:	103f651e 	bne	r2,zero,811232f4 <__reset+0xfb1032f4>
81123560:	d8c01c17 	ldw	r3,112(sp)
81123564:	003f4f06 	br	811232a4 <__reset+0xfb1032a4>
81123568:	00a04534 	movhi	r2,33044
8112356c:	1088a504 	addi	r2,r2,8852
81123570:	d8802915 	stw	r2,164(sp)
81123574:	003d4406 	br	81122a88 <__reset+0xfb102a88>
81123578:	dac02317 	ldw	r11,140(sp)
8112357c:	58800017 	ldw	r2,0(r11)
81123580:	dac02517 	ldw	r11,148(sp)
81123584:	5807d7fa 	srai	r3,r11,31
81123588:	dac02317 	ldw	r11,140(sp)
8112358c:	10c00115 	stw	r3,4(r2)
81123590:	5ac00104 	addi	r11,r11,4
81123594:	dac02315 	stw	r11,140(sp)
81123598:	dac02517 	ldw	r11,148(sp)
8112359c:	12c00015 	stw	r11,0(r2)
811235a0:	003c6d06 	br	81122758 <__reset+0xfb102758>
811235a4:	9080100c 	andi	r2,r18,64
811235a8:	dac02317 	ldw	r11,140(sp)
811235ac:	103e5326 	beq	r2,zero,81122efc <__reset+0xfb102efc>
811235b0:	5f00000f 	ldh	fp,0(r11)
811235b4:	5ac00104 	addi	r11,r11,4
811235b8:	dac02315 	stw	r11,140(sp)
811235bc:	e013d7fa 	srai	r9,fp,31
811235c0:	4805883a 	mov	r2,r9
811235c4:	003e0706 	br	81122de4 <__reset+0xfb102de4>
811235c8:	00800c04 	movi	r2,48
811235cc:	d8801d05 	stb	r2,116(sp)
811235d0:	d8c01d45 	stb	r3,117(sp)
811235d4:	d8001d85 	stb	zero,118(sp)
811235d8:	90800094 	ori	r2,r18,2
811235dc:	80008f16 	blt	r16,zero,8112381c <___svfiprintf_internal_r+0x1168>
811235e0:	00bfdfc4 	movi	r2,-129
811235e4:	90a4703a 	and	r18,r18,r2
811235e8:	94800094 	ori	r18,r18,2
811235ec:	0015883a 	mov	r10,zero
811235f0:	003d2906 	br	81122a98 <__reset+0xfb102a98>
811235f4:	98c00007 	ldb	r3,0(r19)
811235f8:	003c7f06 	br	811227f8 <__reset+0xfb1027f8>
811235fc:	dac02317 	ldw	r11,140(sp)
81123600:	0013883a 	mov	r9,zero
81123604:	5f000017 	ldw	fp,0(r11)
81123608:	5ac00104 	addi	r11,r11,4
8112360c:	dac02315 	stw	r11,140(sp)
81123610:	003d1506 	br	81122a68 <__reset+0xfb102a68>
81123614:	9080100c 	andi	r2,r18,64
81123618:	d8001d85 	stb	zero,118(sp)
8112361c:	dac02317 	ldw	r11,140(sp)
81123620:	10003426 	beq	r2,zero,811236f4 <___svfiprintf_internal_r+0x1040>
81123624:	58800104 	addi	r2,r11,4
81123628:	5f00000b 	ldhu	fp,0(r11)
8112362c:	0013883a 	mov	r9,zero
81123630:	803e950e 	bge	r16,zero,81123088 <__reset+0xfb103088>
81123634:	e246b03a 	or	r3,fp,r9
81123638:	d8802315 	stw	r2,140(sp)
8112363c:	183d5a1e 	bne	r3,zero,81122ba8 <__reset+0xfb102ba8>
81123640:	0015883a 	mov	r10,zero
81123644:	0005883a 	mov	r2,zero
81123648:	003fb706 	br	81123528 <__reset+0xfb103528>
8112364c:	98c00043 	ldbu	r3,1(r19)
81123650:	94800814 	ori	r18,r18,32
81123654:	9cc00044 	addi	r19,r19,1
81123658:	18c03fcc 	andi	r3,r3,255
8112365c:	18c0201c 	xori	r3,r3,128
81123660:	18ffe004 	addi	r3,r3,-128
81123664:	003c6406 	br	811227f8 <__reset+0xfb1027f8>
81123668:	d8c02315 	stw	r3,140(sp)
8112366c:	0015883a 	mov	r10,zero
81123670:	003faa06 	br	8112351c <__reset+0xfb10351c>
81123674:	dac02317 	ldw	r11,140(sp)
81123678:	58800017 	ldw	r2,0(r11)
8112367c:	5ac00104 	addi	r11,r11,4
81123680:	dac02315 	stw	r11,140(sp)
81123684:	dac02517 	ldw	r11,148(sp)
81123688:	12c00015 	stw	r11,0(r2)
8112368c:	003c3206 	br	81122758 <__reset+0xfb102758>
81123690:	01204534 	movhi	r4,33044
81123694:	2108a504 	addi	r4,r4,8852
81123698:	d9002915 	stw	r4,164(sp)
8112369c:	d8c02315 	stw	r3,140(sp)
811236a0:	1025883a 	mov	r18,r2
811236a4:	e244b03a 	or	r2,fp,r9
811236a8:	103f871e 	bne	r2,zero,811234c8 <__reset+0xfb1034c8>
811236ac:	0015883a 	mov	r10,zero
811236b0:	00800084 	movi	r2,2
811236b4:	003f9c06 	br	81123528 <__reset+0xfb103528>
811236b8:	0039883a 	mov	fp,zero
811236bc:	003e5f06 	br	8112303c <__reset+0xfb10303c>
811236c0:	d9801a04 	addi	r6,sp,104
811236c4:	b80b883a 	mov	r5,r23
811236c8:	a809883a 	mov	r4,r21
811236cc:	11224dc0 	call	811224dc <__ssprint_r>
811236d0:	103f081e 	bne	r2,zero,811232f4 <__reset+0xfb1032f4>
811236d4:	d8c01c17 	ldw	r3,112(sp)
811236d8:	d8801b17 	ldw	r2,108(sp)
811236dc:	d811883a 	mov	r8,sp
811236e0:	003e9106 	br	81123128 <__reset+0xfb103128>
811236e4:	01204534 	movhi	r4,33044
811236e8:	21092f04 	addi	r4,r4,9404
811236ec:	d9002215 	stw	r4,136(sp)
811236f0:	003ead06 	br	811231a8 <__reset+0xfb1031a8>
811236f4:	58800104 	addi	r2,r11,4
811236f8:	5f000017 	ldw	fp,0(r11)
811236fc:	0013883a 	mov	r9,zero
81123700:	803e610e 	bge	r16,zero,81123088 <__reset+0xfb103088>
81123704:	003fcb06 	br	81123634 <__reset+0xfb103634>
81123708:	58800104 	addi	r2,r11,4
8112370c:	5f000017 	ldw	fp,0(r11)
81123710:	0013883a 	mov	r9,zero
81123714:	803e420e 	bge	r16,zero,81123020 <__reset+0xfb103020>
81123718:	003f7e06 	br	81123514 <__reset+0xfb103514>
8112371c:	5f000017 	ldw	fp,0(r11)
81123720:	5ac00104 	addi	r11,r11,4
81123724:	0013883a 	mov	r9,zero
81123728:	dac02315 	stw	r11,140(sp)
8112372c:	003cce06 	br	81122a68 <__reset+0xfb102a68>
81123730:	8809883a 	mov	r4,r17
81123734:	da002c15 	stw	r8,176(sp)
81123738:	11155840 	call	81115584 <strlen>
8112373c:	d8802115 	stw	r2,132(sp)
81123740:	da801d83 	ldbu	r10,118(sp)
81123744:	df002315 	stw	fp,140(sp)
81123748:	0021883a 	mov	r16,zero
8112374c:	da002c17 	ldw	r8,176(sp)
81123750:	003cf606 	br	81122b2c <__reset+0xfb102b2c>
81123754:	00800184 	movi	r2,6
81123758:	1400012e 	bgeu	r2,r16,81123760 <___svfiprintf_internal_r+0x10ac>
8112375c:	1021883a 	mov	r16,r2
81123760:	dc002115 	stw	r16,132(sp)
81123764:	8005883a 	mov	r2,r16
81123768:	80003c16 	blt	r16,zero,8112385c <___svfiprintf_internal_r+0x11a8>
8112376c:	04604534 	movhi	r17,33044
81123770:	d8802015 	stw	r2,128(sp)
81123774:	df002315 	stw	fp,140(sp)
81123778:	8c48aa04 	addi	r17,r17,8872
8112377c:	003d2e06 	br	81122c38 <__reset+0xfb102c38>
81123780:	04001004 	movi	r16,64
81123784:	800b883a 	mov	r5,r16
81123788:	111425c0 	call	8111425c <_malloc_r>
8112378c:	dac02717 	ldw	r11,156(sp)
81123790:	58800015 	stw	r2,0(r11)
81123794:	58800415 	stw	r2,16(r11)
81123798:	10004826 	beq	r2,zero,811238bc <___svfiprintf_internal_r+0x1208>
8112379c:	dac02717 	ldw	r11,156(sp)
811237a0:	5c000515 	stw	r16,20(r11)
811237a4:	003bd906 	br	8112270c <__reset+0xfb10270c>
811237a8:	9080004c 	andi	r2,r18,1
811237ac:	0015883a 	mov	r10,zero
811237b0:	10000626 	beq	r2,zero,811237cc <___svfiprintf_internal_r+0x1118>
811237b4:	dac02b17 	ldw	r11,172(sp)
811237b8:	00800c04 	movi	r2,48
811237bc:	d88019c5 	stb	r2,103(sp)
811237c0:	dac02115 	stw	r11,132(sp)
811237c4:	dc4019c4 	addi	r17,sp,103
811237c8:	003cd806 	br	81122b2c <__reset+0xfb102b2c>
811237cc:	d8002115 	stw	zero,132(sp)
811237d0:	dc401a04 	addi	r17,sp,104
811237d4:	003cd506 	br	81122b2c <__reset+0xfb102b2c>
811237d8:	01204534 	movhi	r4,33044
811237dc:	21093304 	addi	r4,r4,9420
811237e0:	d9002815 	stw	r4,160(sp)
811237e4:	003d4306 	br	81122cf4 <__reset+0xfb102cf4>
811237e8:	00bfffc4 	movi	r2,-1
811237ec:	003ec606 	br	81123308 <__reset+0xfb103308>
811237f0:	00800044 	movi	r2,1
811237f4:	10803fcc 	andi	r2,r2,255
811237f8:	00c00044 	movi	r3,1
811237fc:	10fd8026 	beq	r2,r3,81122e00 <__reset+0xfb102e00>
81123800:	00c00084 	movi	r3,2
81123804:	10fca426 	beq	r2,r3,81122a98 <__reset+0xfb102a98>
81123808:	003ce806 	br	81122bac <__reset+0xfb102bac>
8112380c:	01204534 	movhi	r4,33044
81123810:	21093304 	addi	r4,r4,9420
81123814:	d9002815 	stw	r4,160(sp)
81123818:	003e9906 	br	81123280 <__reset+0xfb103280>
8112381c:	1025883a 	mov	r18,r2
81123820:	0015883a 	mov	r10,zero
81123824:	00800084 	movi	r2,2
81123828:	003ff206 	br	811237f4 <__reset+0xfb1037f4>
8112382c:	01604534 	movhi	r5,33044
81123830:	29492f04 	addi	r5,r5,9404
81123834:	d9402215 	stw	r5,136(sp)
81123838:	003ee206 	br	811233c4 <__reset+0xfb1033c4>
8112383c:	5827883a 	mov	r19,r11
81123840:	0021883a 	mov	r16,zero
81123844:	003bed06 	br	811227fc <__reset+0xfb1027fc>
81123848:	dc002115 	stw	r16,132(sp)
8112384c:	da801d83 	ldbu	r10,118(sp)
81123850:	df002315 	stw	fp,140(sp)
81123854:	0021883a 	mov	r16,zero
81123858:	003cb406 	br	81122b2c <__reset+0xfb102b2c>
8112385c:	0005883a 	mov	r2,zero
81123860:	003fc206 	br	8112376c <__reset+0xfb10376c>
81123864:	d8802317 	ldw	r2,140(sp)
81123868:	98c00043 	ldbu	r3,1(r19)
8112386c:	5827883a 	mov	r19,r11
81123870:	14000017 	ldw	r16,0(r2)
81123874:	10800104 	addi	r2,r2,4
81123878:	d8802315 	stw	r2,140(sp)
8112387c:	803f760e 	bge	r16,zero,81123658 <__reset+0xfb103658>
81123880:	18c03fcc 	andi	r3,r3,255
81123884:	18c0201c 	xori	r3,r3,128
81123888:	043fffc4 	movi	r16,-1
8112388c:	18ffe004 	addi	r3,r3,-128
81123890:	003bd906 	br	811227f8 <__reset+0xfb1027f8>
81123894:	d9c01d85 	stb	r7,118(sp)
81123898:	003cb606 	br	81122b74 <__reset+0xfb102b74>
8112389c:	d9c01d85 	stb	r7,118(sp)
811238a0:	003d2106 	br	81122d28 <__reset+0xfb102d28>
811238a4:	d9c01d85 	stb	r7,118(sp)
811238a8:	003d8e06 	br	81122ee4 <__reset+0xfb102ee4>
811238ac:	d9c01d85 	stb	r7,118(sp)
811238b0:	003db306 	br	81122f80 <__reset+0xfb102f80>
811238b4:	d9c01d85 	stb	r7,118(sp)
811238b8:	003c8a06 	br	81122ae4 <__reset+0xfb102ae4>
811238bc:	dac02a17 	ldw	r11,168(sp)
811238c0:	00800304 	movi	r2,12
811238c4:	58800015 	stw	r2,0(r11)
811238c8:	00bfffc4 	movi	r2,-1
811238cc:	003e8e06 	br	81123308 <__reset+0xfb103308>
811238d0:	d9c01d85 	stb	r7,118(sp)
811238d4:	003dc706 	br	81122ff4 <__reset+0xfb102ff4>
811238d8:	d9c01d85 	stb	r7,118(sp)
811238dc:	003ddf06 	br	8112305c <__reset+0xfb10305c>
811238e0:	d9c01d85 	stb	r7,118(sp)
811238e4:	003d3706 	br	81122dc4 <__reset+0xfb102dc4>
811238e8:	d9c01d85 	stb	r7,118(sp)
811238ec:	003c5406 	br	81122a40 <__reset+0xfb102a40>
811238f0:	d9c01d85 	stb	r7,118(sp)
811238f4:	003d1d06 	br	81122d6c <__reset+0xfb102d6c>

811238f8 <__submore>:
811238f8:	defffa04 	addi	sp,sp,-24
811238fc:	de00012e 	bgeu	sp,et,81123904 <__submore+0xc>
81123900:	003b68fa 	trap	3
81123904:	dc000015 	stw	r16,0(sp)
81123908:	2821883a 	mov	r16,r5
8112390c:	29400c17 	ldw	r5,48(r5)
81123910:	dfc00515 	stw	ra,20(sp)
81123914:	dd000415 	stw	r20,16(sp)
81123918:	dcc00315 	stw	r19,12(sp)
8112391c:	dc800215 	stw	r18,8(sp)
81123920:	dc400115 	stw	r17,4(sp)
81123924:	80801004 	addi	r2,r16,64
81123928:	28801726 	beq	r5,r2,81123988 <__submore+0x90>
8112392c:	84400d17 	ldw	r17,52(r16)
81123930:	8c67883a 	add	r19,r17,r17
81123934:	980d883a 	mov	r6,r19
81123938:	111fd840 	call	8111fd84 <_realloc_r>
8112393c:	1025883a 	mov	r18,r2
81123940:	10002226 	beq	r2,zero,811239cc <__submore+0xd4>
81123944:	1469883a 	add	r20,r2,r17
81123948:	880d883a 	mov	r6,r17
8112394c:	100b883a 	mov	r5,r2
81123950:	a009883a 	mov	r4,r20
81123954:	1114a700 	call	81114a70 <memcpy>
81123958:	0005883a 	mov	r2,zero
8112395c:	85000015 	stw	r20,0(r16)
81123960:	84800c15 	stw	r18,48(r16)
81123964:	84c00d15 	stw	r19,52(r16)
81123968:	dfc00517 	ldw	ra,20(sp)
8112396c:	dd000417 	ldw	r20,16(sp)
81123970:	dcc00317 	ldw	r19,12(sp)
81123974:	dc800217 	ldw	r18,8(sp)
81123978:	dc400117 	ldw	r17,4(sp)
8112397c:	dc000017 	ldw	r16,0(sp)
81123980:	dec00604 	addi	sp,sp,24
81123984:	f800283a 	ret
81123988:	04410004 	movi	r17,1024
8112398c:	880b883a 	mov	r5,r17
81123990:	111425c0 	call	8111425c <_malloc_r>
81123994:	1007883a 	mov	r3,r2
81123998:	10000c26 	beq	r2,zero,811239cc <__submore+0xd4>
8112399c:	80801083 	ldbu	r2,66(r16)
811239a0:	80c00c15 	stw	r3,48(r16)
811239a4:	84400d15 	stw	r17,52(r16)
811239a8:	1880ffc5 	stb	r2,1023(r3)
811239ac:	81401043 	ldbu	r5,65(r16)
811239b0:	1900ff44 	addi	r4,r3,1021
811239b4:	0005883a 	mov	r2,zero
811239b8:	1940ff85 	stb	r5,1022(r3)
811239bc:	81401003 	ldbu	r5,64(r16)
811239c0:	1940ff45 	stb	r5,1021(r3)
811239c4:	81000015 	stw	r4,0(r16)
811239c8:	003fe706 	br	81123968 <__reset+0xfb103968>
811239cc:	00bfffc4 	movi	r2,-1
811239d0:	003fe506 	br	81123968 <__reset+0xfb103968>

811239d4 <_ungetc_r>:
811239d4:	00bfffc4 	movi	r2,-1
811239d8:	28806326 	beq	r5,r2,81123b68 <_ungetc_r+0x194>
811239dc:	defffb04 	addi	sp,sp,-20
811239e0:	de00012e 	bgeu	sp,et,811239e8 <_ungetc_r+0x14>
811239e4:	003b68fa 	trap	3
811239e8:	dcc00315 	stw	r19,12(sp)
811239ec:	dc400115 	stw	r17,4(sp)
811239f0:	dc000015 	stw	r16,0(sp)
811239f4:	dfc00415 	stw	ra,16(sp)
811239f8:	dc800215 	stw	r18,8(sp)
811239fc:	2023883a 	mov	r17,r4
81123a00:	3021883a 	mov	r16,r6
81123a04:	2827883a 	mov	r19,r5
81123a08:	20000226 	beq	r4,zero,81123a14 <_ungetc_r+0x40>
81123a0c:	20800e17 	ldw	r2,56(r4)
81123a10:	10002e26 	beq	r2,zero,81123acc <_ungetc_r+0xf8>
81123a14:	80c0030b 	ldhu	r3,12(r16)
81123a18:	1888000c 	andi	r2,r3,8192
81123a1c:	1000051e 	bne	r2,zero,81123a34 <_ungetc_r+0x60>
81123a20:	81001917 	ldw	r4,100(r16)
81123a24:	00b7ffc4 	movi	r2,-8193
81123a28:	18c80014 	ori	r3,r3,8192
81123a2c:	2084703a 	and	r2,r4,r2
81123a30:	80801915 	stw	r2,100(r16)
81123a34:	00bff7c4 	movi	r2,-33
81123a38:	1884703a 	and	r2,r3,r2
81123a3c:	8080030d 	sth	r2,12(r16)
81123a40:	1900010c 	andi	r4,r3,4
81123a44:	2000061e 	bne	r4,zero,81123a60 <_ungetc_r+0x8c>
81123a48:	1900040c 	andi	r4,r3,16
81123a4c:	20001d26 	beq	r4,zero,81123ac4 <_ungetc_r+0xf0>
81123a50:	18c0020c 	andi	r3,r3,8
81123a54:	1800331e 	bne	r3,zero,81123b24 <_ungetc_r+0x150>
81123a58:	10800114 	ori	r2,r2,4
81123a5c:	8080030d 	sth	r2,12(r16)
81123a60:	80800c17 	ldw	r2,48(r16)
81123a64:	9c803fcc 	andi	r18,r19,255
81123a68:	10001a26 	beq	r2,zero,81123ad4 <_ungetc_r+0x100>
81123a6c:	80c00117 	ldw	r3,4(r16)
81123a70:	80800d17 	ldw	r2,52(r16)
81123a74:	18800f0e 	bge	r3,r2,81123ab4 <_ungetc_r+0xe0>
81123a78:	80c00017 	ldw	r3,0(r16)
81123a7c:	9005883a 	mov	r2,r18
81123a80:	193fffc4 	addi	r4,r3,-1
81123a84:	81000015 	stw	r4,0(r16)
81123a88:	1cffffc5 	stb	r19,-1(r3)
81123a8c:	80c00117 	ldw	r3,4(r16)
81123a90:	18c00044 	addi	r3,r3,1
81123a94:	80c00115 	stw	r3,4(r16)
81123a98:	dfc00417 	ldw	ra,16(sp)
81123a9c:	dcc00317 	ldw	r19,12(sp)
81123aa0:	dc800217 	ldw	r18,8(sp)
81123aa4:	dc400117 	ldw	r17,4(sp)
81123aa8:	dc000017 	ldw	r16,0(sp)
81123aac:	dec00504 	addi	sp,sp,20
81123ab0:	f800283a 	ret
81123ab4:	800b883a 	mov	r5,r16
81123ab8:	8809883a 	mov	r4,r17
81123abc:	11238f80 	call	811238f8 <__submore>
81123ac0:	103fed26 	beq	r2,zero,81123a78 <__reset+0xfb103a78>
81123ac4:	00bfffc4 	movi	r2,-1
81123ac8:	003ff306 	br	81123a98 <__reset+0xfb103a98>
81123acc:	111d8580 	call	8111d858 <__sinit>
81123ad0:	003fd006 	br	81123a14 <__reset+0xfb103a14>
81123ad4:	80c00417 	ldw	r3,16(r16)
81123ad8:	80800017 	ldw	r2,0(r16)
81123adc:	18000326 	beq	r3,zero,81123aec <_ungetc_r+0x118>
81123ae0:	1880022e 	bgeu	r3,r2,81123aec <_ungetc_r+0x118>
81123ae4:	10ffffc3 	ldbu	r3,-1(r2)
81123ae8:	90c01826 	beq	r18,r3,81123b4c <_ungetc_r+0x178>
81123aec:	81400117 	ldw	r5,4(r16)
81123af0:	80800e15 	stw	r2,56(r16)
81123af4:	008000c4 	movi	r2,3
81123af8:	81001004 	addi	r4,r16,64
81123afc:	80c01084 	addi	r3,r16,66
81123b00:	80800d15 	stw	r2,52(r16)
81123b04:	00800044 	movi	r2,1
81123b08:	80800115 	stw	r2,4(r16)
81123b0c:	81400f15 	stw	r5,60(r16)
81123b10:	81000c15 	stw	r4,48(r16)
81123b14:	84c01085 	stb	r19,66(r16)
81123b18:	80c00015 	stw	r3,0(r16)
81123b1c:	9005883a 	mov	r2,r18
81123b20:	003fdd06 	br	81123a98 <__reset+0xfb103a98>
81123b24:	800b883a 	mov	r5,r16
81123b28:	8809883a 	mov	r4,r17
81123b2c:	111d45c0 	call	8111d45c <_fflush_r>
81123b30:	103fe41e 	bne	r2,zero,81123ac4 <__reset+0xfb103ac4>
81123b34:	8080030b 	ldhu	r2,12(r16)
81123b38:	00fffdc4 	movi	r3,-9
81123b3c:	80000215 	stw	zero,8(r16)
81123b40:	1884703a 	and	r2,r3,r2
81123b44:	80000615 	stw	zero,24(r16)
81123b48:	003fc306 	br	81123a58 <__reset+0xfb103a58>
81123b4c:	80c00117 	ldw	r3,4(r16)
81123b50:	10bfffc4 	addi	r2,r2,-1
81123b54:	80800015 	stw	r2,0(r16)
81123b58:	18800044 	addi	r2,r3,1
81123b5c:	80800115 	stw	r2,4(r16)
81123b60:	9005883a 	mov	r2,r18
81123b64:	003fcc06 	br	81123a98 <__reset+0xfb103a98>
81123b68:	00bfffc4 	movi	r2,-1
81123b6c:	f800283a 	ret

81123b70 <ungetc>:
81123b70:	00a04534 	movhi	r2,33044
81123b74:	10928704 	addi	r2,r2,18972
81123b78:	280d883a 	mov	r6,r5
81123b7c:	200b883a 	mov	r5,r4
81123b80:	11000017 	ldw	r4,0(r2)
81123b84:	11239d41 	jmpi	811239d4 <_ungetc_r>

81123b88 <__sprint_r.part.0>:
81123b88:	defff604 	addi	sp,sp,-40
81123b8c:	de00012e 	bgeu	sp,et,81123b94 <__sprint_r.part.0+0xc>
81123b90:	003b68fa 	trap	3
81123b94:	28801917 	ldw	r2,100(r5)
81123b98:	dd400515 	stw	r21,20(sp)
81123b9c:	dfc00915 	stw	ra,36(sp)
81123ba0:	df000815 	stw	fp,32(sp)
81123ba4:	ddc00715 	stw	r23,28(sp)
81123ba8:	dd800615 	stw	r22,24(sp)
81123bac:	dd000415 	stw	r20,16(sp)
81123bb0:	dcc00315 	stw	r19,12(sp)
81123bb4:	dc800215 	stw	r18,8(sp)
81123bb8:	dc400115 	stw	r17,4(sp)
81123bbc:	dc000015 	stw	r16,0(sp)
81123bc0:	1088000c 	andi	r2,r2,8192
81123bc4:	302b883a 	mov	r21,r6
81123bc8:	10002e26 	beq	r2,zero,81123c84 <__sprint_r.part.0+0xfc>
81123bcc:	30800217 	ldw	r2,8(r6)
81123bd0:	35800017 	ldw	r22,0(r6)
81123bd4:	10002926 	beq	r2,zero,81123c7c <__sprint_r.part.0+0xf4>
81123bd8:	2827883a 	mov	r19,r5
81123bdc:	2029883a 	mov	r20,r4
81123be0:	b5c00104 	addi	r23,r22,4
81123be4:	04bfffc4 	movi	r18,-1
81123be8:	bc400017 	ldw	r17,0(r23)
81123bec:	b4000017 	ldw	r16,0(r22)
81123bf0:	0039883a 	mov	fp,zero
81123bf4:	8822d0ba 	srli	r17,r17,2
81123bf8:	8800031e 	bne	r17,zero,81123c08 <__sprint_r.part.0+0x80>
81123bfc:	00001806 	br	81123c60 <__sprint_r.part.0+0xd8>
81123c00:	84000104 	addi	r16,r16,4
81123c04:	8f001526 	beq	r17,fp,81123c5c <__sprint_r.part.0+0xd4>
81123c08:	81400017 	ldw	r5,0(r16)
81123c0c:	980d883a 	mov	r6,r19
81123c10:	a009883a 	mov	r4,r20
81123c14:	112552c0 	call	8112552c <_fputwc_r>
81123c18:	e7000044 	addi	fp,fp,1
81123c1c:	14bff81e 	bne	r2,r18,81123c00 <__reset+0xfb103c00>
81123c20:	9005883a 	mov	r2,r18
81123c24:	a8000215 	stw	zero,8(r21)
81123c28:	a8000115 	stw	zero,4(r21)
81123c2c:	dfc00917 	ldw	ra,36(sp)
81123c30:	df000817 	ldw	fp,32(sp)
81123c34:	ddc00717 	ldw	r23,28(sp)
81123c38:	dd800617 	ldw	r22,24(sp)
81123c3c:	dd400517 	ldw	r21,20(sp)
81123c40:	dd000417 	ldw	r20,16(sp)
81123c44:	dcc00317 	ldw	r19,12(sp)
81123c48:	dc800217 	ldw	r18,8(sp)
81123c4c:	dc400117 	ldw	r17,4(sp)
81123c50:	dc000017 	ldw	r16,0(sp)
81123c54:	dec00a04 	addi	sp,sp,40
81123c58:	f800283a 	ret
81123c5c:	a8800217 	ldw	r2,8(r21)
81123c60:	8c63883a 	add	r17,r17,r17
81123c64:	8c63883a 	add	r17,r17,r17
81123c68:	1445c83a 	sub	r2,r2,r17
81123c6c:	a8800215 	stw	r2,8(r21)
81123c70:	b5800204 	addi	r22,r22,8
81123c74:	bdc00204 	addi	r23,r23,8
81123c78:	103fdb1e 	bne	r2,zero,81123be8 <__reset+0xfb103be8>
81123c7c:	0005883a 	mov	r2,zero
81123c80:	003fe806 	br	81123c24 <__reset+0xfb103c24>
81123c84:	111e0080 	call	8111e008 <__sfvwrite_r>
81123c88:	003fe606 	br	81123c24 <__reset+0xfb103c24>

81123c8c <__sprint_r>:
81123c8c:	30c00217 	ldw	r3,8(r6)
81123c90:	18000126 	beq	r3,zero,81123c98 <__sprint_r+0xc>
81123c94:	1123b881 	jmpi	81123b88 <__sprint_r.part.0>
81123c98:	30000115 	stw	zero,4(r6)
81123c9c:	0005883a 	mov	r2,zero
81123ca0:	f800283a 	ret

81123ca4 <___vfiprintf_internal_r>:
81123ca4:	deffc904 	addi	sp,sp,-220
81123ca8:	de00012e 	bgeu	sp,et,81123cb0 <___vfiprintf_internal_r+0xc>
81123cac:	003b68fa 	trap	3
81123cb0:	df003515 	stw	fp,212(sp)
81123cb4:	dd003115 	stw	r20,196(sp)
81123cb8:	dfc03615 	stw	ra,216(sp)
81123cbc:	ddc03415 	stw	r23,208(sp)
81123cc0:	dd803315 	stw	r22,204(sp)
81123cc4:	dd403215 	stw	r21,200(sp)
81123cc8:	dcc03015 	stw	r19,192(sp)
81123ccc:	dc802f15 	stw	r18,188(sp)
81123cd0:	dc402e15 	stw	r17,184(sp)
81123cd4:	dc002d15 	stw	r16,180(sp)
81123cd8:	d9002015 	stw	r4,128(sp)
81123cdc:	d9c02215 	stw	r7,136(sp)
81123ce0:	2829883a 	mov	r20,r5
81123ce4:	3039883a 	mov	fp,r6
81123ce8:	20000226 	beq	r4,zero,81123cf4 <___vfiprintf_internal_r+0x50>
81123cec:	20800e17 	ldw	r2,56(r4)
81123cf0:	1000cf26 	beq	r2,zero,81124030 <___vfiprintf_internal_r+0x38c>
81123cf4:	a080030b 	ldhu	r2,12(r20)
81123cf8:	10c8000c 	andi	r3,r2,8192
81123cfc:	1800061e 	bne	r3,zero,81123d18 <___vfiprintf_internal_r+0x74>
81123d00:	a1001917 	ldw	r4,100(r20)
81123d04:	00f7ffc4 	movi	r3,-8193
81123d08:	10880014 	ori	r2,r2,8192
81123d0c:	20c6703a 	and	r3,r4,r3
81123d10:	a080030d 	sth	r2,12(r20)
81123d14:	a0c01915 	stw	r3,100(r20)
81123d18:	10c0020c 	andi	r3,r2,8
81123d1c:	1800a926 	beq	r3,zero,81123fc4 <___vfiprintf_internal_r+0x320>
81123d20:	a0c00417 	ldw	r3,16(r20)
81123d24:	1800a726 	beq	r3,zero,81123fc4 <___vfiprintf_internal_r+0x320>
81123d28:	1080068c 	andi	r2,r2,26
81123d2c:	00c00284 	movi	r3,10
81123d30:	10c0ac26 	beq	r2,r3,81123fe4 <___vfiprintf_internal_r+0x340>
81123d34:	da801a04 	addi	r10,sp,104
81123d38:	da801e15 	stw	r10,120(sp)
81123d3c:	d8801e17 	ldw	r2,120(sp)
81123d40:	da8019c4 	addi	r10,sp,103
81123d44:	05a04534 	movhi	r22,33044
81123d48:	05e04534 	movhi	r23,33044
81123d4c:	da801f15 	stw	r10,124(sp)
81123d50:	1295c83a 	sub	r10,r2,r10
81123d54:	b5893b04 	addi	r22,r22,9452
81123d58:	bdc93704 	addi	r23,r23,9436
81123d5c:	dec01a15 	stw	sp,104(sp)
81123d60:	d8001c15 	stw	zero,112(sp)
81123d64:	d8001b15 	stw	zero,108(sp)
81123d68:	d8002615 	stw	zero,152(sp)
81123d6c:	d8002315 	stw	zero,140(sp)
81123d70:	da802715 	stw	r10,156(sp)
81123d74:	d811883a 	mov	r8,sp
81123d78:	dd002115 	stw	r20,132(sp)
81123d7c:	e021883a 	mov	r16,fp
81123d80:	80800007 	ldb	r2,0(r16)
81123d84:	1003ea26 	beq	r2,zero,81124d30 <___vfiprintf_internal_r+0x108c>
81123d88:	00c00944 	movi	r3,37
81123d8c:	8025883a 	mov	r18,r16
81123d90:	10c0021e 	bne	r2,r3,81123d9c <___vfiprintf_internal_r+0xf8>
81123d94:	00001606 	br	81123df0 <___vfiprintf_internal_r+0x14c>
81123d98:	10c00326 	beq	r2,r3,81123da8 <___vfiprintf_internal_r+0x104>
81123d9c:	94800044 	addi	r18,r18,1
81123da0:	90800007 	ldb	r2,0(r18)
81123da4:	103ffc1e 	bne	r2,zero,81123d98 <__reset+0xfb103d98>
81123da8:	9423c83a 	sub	r17,r18,r16
81123dac:	88001026 	beq	r17,zero,81123df0 <___vfiprintf_internal_r+0x14c>
81123db0:	d8c01c17 	ldw	r3,112(sp)
81123db4:	d8801b17 	ldw	r2,108(sp)
81123db8:	44000015 	stw	r16,0(r8)
81123dbc:	88c7883a 	add	r3,r17,r3
81123dc0:	10800044 	addi	r2,r2,1
81123dc4:	44400115 	stw	r17,4(r8)
81123dc8:	d8c01c15 	stw	r3,112(sp)
81123dcc:	d8801b15 	stw	r2,108(sp)
81123dd0:	010001c4 	movi	r4,7
81123dd4:	2080760e 	bge	r4,r2,81123fb0 <___vfiprintf_internal_r+0x30c>
81123dd8:	1803821e 	bne	r3,zero,81124be4 <___vfiprintf_internal_r+0xf40>
81123ddc:	da802317 	ldw	r10,140(sp)
81123de0:	d8001b15 	stw	zero,108(sp)
81123de4:	d811883a 	mov	r8,sp
81123de8:	5455883a 	add	r10,r10,r17
81123dec:	da802315 	stw	r10,140(sp)
81123df0:	90800007 	ldb	r2,0(r18)
81123df4:	10044626 	beq	r2,zero,81124f10 <___vfiprintf_internal_r+0x126c>
81123df8:	90c00047 	ldb	r3,1(r18)
81123dfc:	94000044 	addi	r16,r18,1
81123e00:	d8001d85 	stb	zero,118(sp)
81123e04:	0009883a 	mov	r4,zero
81123e08:	000f883a 	mov	r7,zero
81123e0c:	027fffc4 	movi	r9,-1
81123e10:	0023883a 	mov	r17,zero
81123e14:	0029883a 	mov	r20,zero
81123e18:	01401604 	movi	r5,88
81123e1c:	01800244 	movi	r6,9
81123e20:	03400a84 	movi	r13,42
81123e24:	03001b04 	movi	r12,108
81123e28:	84000044 	addi	r16,r16,1
81123e2c:	18bff804 	addi	r2,r3,-32
81123e30:	28827336 	bltu	r5,r2,81124800 <___vfiprintf_internal_r+0xb5c>
81123e34:	100490ba 	slli	r2,r2,2
81123e38:	02a044b4 	movhi	r10,33042
81123e3c:	528f9304 	addi	r10,r10,15948
81123e40:	1285883a 	add	r2,r2,r10
81123e44:	10800017 	ldw	r2,0(r2)
81123e48:	1000683a 	jmp	r2
81123e4c:	81124534 	orhi	r4,r16,18708
81123e50:	81124800 	call	88112480 <__reset+0x20f2480>
81123e54:	81124800 	call	88112480 <__reset+0x20f2480>
81123e58:	81124554 	ori	r4,r16,18709
81123e5c:	81124800 	call	88112480 <__reset+0x20f2480>
81123e60:	81124800 	call	88112480 <__reset+0x20f2480>
81123e64:	81124800 	call	88112480 <__reset+0x20f2480>
81123e68:	81124800 	call	88112480 <__reset+0x20f2480>
81123e6c:	81124800 	call	88112480 <__reset+0x20f2480>
81123e70:	81124800 	call	88112480 <__reset+0x20f2480>
81123e74:	8112473c 	xorhi	r4,r16,18716
81123e78:	81124758 	cmpnei	r4,r16,18717
81123e7c:	81124800 	call	88112480 <__reset+0x20f2480>
81123e80:	81124040 	call	88112404 <__reset+0x20f2404>
81123e84:	81124768 	cmpgeui	r4,r16,18717
81123e88:	81124800 	call	88112480 <__reset+0x20f2480>
81123e8c:	81124560 	cmpeqi	r4,r16,18709
81123e90:	8112456c 	andhi	r4,r16,18709
81123e94:	8112456c 	andhi	r4,r16,18709
81123e98:	8112456c 	andhi	r4,r16,18709
81123e9c:	8112456c 	andhi	r4,r16,18709
81123ea0:	8112456c 	andhi	r4,r16,18709
81123ea4:	8112456c 	andhi	r4,r16,18709
81123ea8:	8112456c 	andhi	r4,r16,18709
81123eac:	8112456c 	andhi	r4,r16,18709
81123eb0:	8112456c 	andhi	r4,r16,18709
81123eb4:	81124800 	call	88112480 <__reset+0x20f2480>
81123eb8:	81124800 	call	88112480 <__reset+0x20f2480>
81123ebc:	81124800 	call	88112480 <__reset+0x20f2480>
81123ec0:	81124800 	call	88112480 <__reset+0x20f2480>
81123ec4:	81124800 	call	88112480 <__reset+0x20f2480>
81123ec8:	81124800 	call	88112480 <__reset+0x20f2480>
81123ecc:	81124800 	call	88112480 <__reset+0x20f2480>
81123ed0:	81124800 	call	88112480 <__reset+0x20f2480>
81123ed4:	81124800 	call	88112480 <__reset+0x20f2480>
81123ed8:	81124800 	call	88112480 <__reset+0x20f2480>
81123edc:	81124598 	cmpnei	r4,r16,18710
81123ee0:	81124800 	call	88112480 <__reset+0x20f2480>
81123ee4:	81124800 	call	88112480 <__reset+0x20f2480>
81123ee8:	81124800 	call	88112480 <__reset+0x20f2480>
81123eec:	81124800 	call	88112480 <__reset+0x20f2480>
81123ef0:	81124800 	call	88112480 <__reset+0x20f2480>
81123ef4:	81124800 	call	88112480 <__reset+0x20f2480>
81123ef8:	81124800 	call	88112480 <__reset+0x20f2480>
81123efc:	81124800 	call	88112480 <__reset+0x20f2480>
81123f00:	81124800 	call	88112480 <__reset+0x20f2480>
81123f04:	81124800 	call	88112480 <__reset+0x20f2480>
81123f08:	811245d0 	cmplti	r4,r16,18711
81123f0c:	81124800 	call	88112480 <__reset+0x20f2480>
81123f10:	81124800 	call	88112480 <__reset+0x20f2480>
81123f14:	81124800 	call	88112480 <__reset+0x20f2480>
81123f18:	81124800 	call	88112480 <__reset+0x20f2480>
81123f1c:	81124800 	call	88112480 <__reset+0x20f2480>
81123f20:	81124628 	cmpgeui	r4,r16,18712
81123f24:	81124800 	call	88112480 <__reset+0x20f2480>
81123f28:	81124800 	call	88112480 <__reset+0x20f2480>
81123f2c:	81124698 	cmpnei	r4,r16,18714
81123f30:	81124800 	call	88112480 <__reset+0x20f2480>
81123f34:	81124800 	call	88112480 <__reset+0x20f2480>
81123f38:	81124800 	call	88112480 <__reset+0x20f2480>
81123f3c:	81124800 	call	88112480 <__reset+0x20f2480>
81123f40:	81124800 	call	88112480 <__reset+0x20f2480>
81123f44:	81124800 	call	88112480 <__reset+0x20f2480>
81123f48:	81124800 	call	88112480 <__reset+0x20f2480>
81123f4c:	81124800 	call	88112480 <__reset+0x20f2480>
81123f50:	81124800 	call	88112480 <__reset+0x20f2480>
81123f54:	81124800 	call	88112480 <__reset+0x20f2480>
81123f58:	81124444 	addi	r4,r16,18705
81123f5c:	81124470 	cmpltui	r4,r16,18705
81123f60:	81124800 	call	88112480 <__reset+0x20f2480>
81123f64:	81124800 	call	88112480 <__reset+0x20f2480>
81123f68:	81124800 	call	88112480 <__reset+0x20f2480>
81123f6c:	811247a8 	cmpgeui	r4,r16,18718
81123f70:	81124470 	cmpltui	r4,r16,18705
81123f74:	81124800 	call	88112480 <__reset+0x20f2480>
81123f78:	81124800 	call	88112480 <__reset+0x20f2480>
81123f7c:	81124304 	addi	r4,r16,18700
81123f80:	81124800 	call	88112480 <__reset+0x20f2480>
81123f84:	81124314 	ori	r4,r16,18700
81123f88:	81124350 	cmplti	r4,r16,18701
81123f8c:	8112404c 	andi	r4,r16,18689
81123f90:	811242f8 	rdprs	r4,r16,18699
81123f94:	81124800 	call	88112480 <__reset+0x20f2480>
81123f98:	811246d4 	ori	r4,r16,18715
81123f9c:	81124800 	call	88112480 <__reset+0x20f2480>
81123fa0:	8112472c 	andhi	r4,r16,18716
81123fa4:	81124800 	call	88112480 <__reset+0x20f2480>
81123fa8:	81124800 	call	88112480 <__reset+0x20f2480>
81123fac:	811243f0 	cmpltui	r4,r16,18703
81123fb0:	42000204 	addi	r8,r8,8
81123fb4:	da802317 	ldw	r10,140(sp)
81123fb8:	5455883a 	add	r10,r10,r17
81123fbc:	da802315 	stw	r10,140(sp)
81123fc0:	003f8b06 	br	81123df0 <__reset+0xfb103df0>
81123fc4:	d9002017 	ldw	r4,128(sp)
81123fc8:	a00b883a 	mov	r5,r20
81123fcc:	111b7e80 	call	8111b7e8 <__swsetup_r>
81123fd0:	1003b11e 	bne	r2,zero,81124e98 <___vfiprintf_internal_r+0x11f4>
81123fd4:	a080030b 	ldhu	r2,12(r20)
81123fd8:	00c00284 	movi	r3,10
81123fdc:	1080068c 	andi	r2,r2,26
81123fe0:	10ff541e 	bne	r2,r3,81123d34 <__reset+0xfb103d34>
81123fe4:	a080038f 	ldh	r2,14(r20)
81123fe8:	103f5216 	blt	r2,zero,81123d34 <__reset+0xfb103d34>
81123fec:	d9c02217 	ldw	r7,136(sp)
81123ff0:	d9002017 	ldw	r4,128(sp)
81123ff4:	e00d883a 	mov	r6,fp
81123ff8:	a00b883a 	mov	r5,r20
81123ffc:	11251240 	call	81125124 <__sbprintf>
81124000:	dfc03617 	ldw	ra,216(sp)
81124004:	df003517 	ldw	fp,212(sp)
81124008:	ddc03417 	ldw	r23,208(sp)
8112400c:	dd803317 	ldw	r22,204(sp)
81124010:	dd403217 	ldw	r21,200(sp)
81124014:	dd003117 	ldw	r20,196(sp)
81124018:	dcc03017 	ldw	r19,192(sp)
8112401c:	dc802f17 	ldw	r18,188(sp)
81124020:	dc402e17 	ldw	r17,184(sp)
81124024:	dc002d17 	ldw	r16,180(sp)
81124028:	dec03704 	addi	sp,sp,220
8112402c:	f800283a 	ret
81124030:	111d8580 	call	8111d858 <__sinit>
81124034:	003f2f06 	br	81123cf4 <__reset+0xfb103cf4>
81124038:	0463c83a 	sub	r17,zero,r17
8112403c:	d8802215 	stw	r2,136(sp)
81124040:	a5000114 	ori	r20,r20,4
81124044:	80c00007 	ldb	r3,0(r16)
81124048:	003f7706 	br	81123e28 <__reset+0xfb103e28>
8112404c:	00800c04 	movi	r2,48
81124050:	da802217 	ldw	r10,136(sp)
81124054:	d8801d05 	stb	r2,116(sp)
81124058:	00801e04 	movi	r2,120
8112405c:	d8801d45 	stb	r2,117(sp)
81124060:	d8001d85 	stb	zero,118(sp)
81124064:	50c00104 	addi	r3,r10,4
81124068:	54800017 	ldw	r18,0(r10)
8112406c:	0027883a 	mov	r19,zero
81124070:	a0800094 	ori	r2,r20,2
81124074:	48030b16 	blt	r9,zero,81124ca4 <___vfiprintf_internal_r+0x1000>
81124078:	00bfdfc4 	movi	r2,-129
8112407c:	a096703a 	and	r11,r20,r2
81124080:	d8c02215 	stw	r3,136(sp)
81124084:	5d000094 	ori	r20,r11,2
81124088:	90032b1e 	bne	r18,zero,81124d38 <___vfiprintf_internal_r+0x1094>
8112408c:	00a04534 	movhi	r2,33044
81124090:	1088a504 	addi	r2,r2,8852
81124094:	d8802615 	stw	r2,152(sp)
81124098:	0039883a 	mov	fp,zero
8112409c:	48017b1e 	bne	r9,zero,8112468c <___vfiprintf_internal_r+0x9e8>
811240a0:	0013883a 	mov	r9,zero
811240a4:	0027883a 	mov	r19,zero
811240a8:	dd401a04 	addi	r21,sp,104
811240ac:	4825883a 	mov	r18,r9
811240b0:	4cc0010e 	bge	r9,r19,811240b8 <___vfiprintf_internal_r+0x414>
811240b4:	9825883a 	mov	r18,r19
811240b8:	e7003fcc 	andi	fp,fp,255
811240bc:	e700201c 	xori	fp,fp,128
811240c0:	e73fe004 	addi	fp,fp,-128
811240c4:	e0000126 	beq	fp,zero,811240cc <___vfiprintf_internal_r+0x428>
811240c8:	94800044 	addi	r18,r18,1
811240cc:	a380008c 	andi	r14,r20,2
811240d0:	70000126 	beq	r14,zero,811240d8 <___vfiprintf_internal_r+0x434>
811240d4:	94800084 	addi	r18,r18,2
811240d8:	a700210c 	andi	fp,r20,132
811240dc:	e001df1e 	bne	fp,zero,8112485c <___vfiprintf_internal_r+0xbb8>
811240e0:	8c87c83a 	sub	r3,r17,r18
811240e4:	00c1dd0e 	bge	zero,r3,8112485c <___vfiprintf_internal_r+0xbb8>
811240e8:	01c00404 	movi	r7,16
811240ec:	d8801c17 	ldw	r2,112(sp)
811240f0:	38c3ad0e 	bge	r7,r3,81124fa8 <___vfiprintf_internal_r+0x1304>
811240f4:	02a04534 	movhi	r10,33044
811240f8:	52893b04 	addi	r10,r10,9452
811240fc:	dc002915 	stw	r16,164(sp)
81124100:	d9801b17 	ldw	r6,108(sp)
81124104:	da802415 	stw	r10,144(sp)
81124108:	03c001c4 	movi	r15,7
8112410c:	da402515 	stw	r9,148(sp)
81124110:	db802815 	stw	r14,160(sp)
81124114:	1821883a 	mov	r16,r3
81124118:	00000506 	br	81124130 <___vfiprintf_internal_r+0x48c>
8112411c:	31400084 	addi	r5,r6,2
81124120:	42000204 	addi	r8,r8,8
81124124:	200d883a 	mov	r6,r4
81124128:	843ffc04 	addi	r16,r16,-16
8112412c:	3c000d0e 	bge	r7,r16,81124164 <___vfiprintf_internal_r+0x4c0>
81124130:	10800404 	addi	r2,r2,16
81124134:	31000044 	addi	r4,r6,1
81124138:	45800015 	stw	r22,0(r8)
8112413c:	41c00115 	stw	r7,4(r8)
81124140:	d8801c15 	stw	r2,112(sp)
81124144:	d9001b15 	stw	r4,108(sp)
81124148:	793ff40e 	bge	r15,r4,8112411c <__reset+0xfb10411c>
8112414c:	1001b51e 	bne	r2,zero,81124824 <___vfiprintf_internal_r+0xb80>
81124150:	843ffc04 	addi	r16,r16,-16
81124154:	000d883a 	mov	r6,zero
81124158:	01400044 	movi	r5,1
8112415c:	d811883a 	mov	r8,sp
81124160:	3c3ff316 	blt	r7,r16,81124130 <__reset+0xfb104130>
81124164:	8007883a 	mov	r3,r16
81124168:	da402517 	ldw	r9,148(sp)
8112416c:	db802817 	ldw	r14,160(sp)
81124170:	dc002917 	ldw	r16,164(sp)
81124174:	da802417 	ldw	r10,144(sp)
81124178:	1885883a 	add	r2,r3,r2
8112417c:	40c00115 	stw	r3,4(r8)
81124180:	42800015 	stw	r10,0(r8)
81124184:	d8801c15 	stw	r2,112(sp)
81124188:	d9401b15 	stw	r5,108(sp)
8112418c:	00c001c4 	movi	r3,7
81124190:	19426016 	blt	r3,r5,81124b14 <___vfiprintf_internal_r+0xe70>
81124194:	d8c01d87 	ldb	r3,118(sp)
81124198:	42000204 	addi	r8,r8,8
8112419c:	29000044 	addi	r4,r5,1
811241a0:	1801b31e 	bne	r3,zero,81124870 <___vfiprintf_internal_r+0xbcc>
811241a4:	7001c026 	beq	r14,zero,811248a8 <___vfiprintf_internal_r+0xc04>
811241a8:	d8c01d04 	addi	r3,sp,116
811241ac:	10800084 	addi	r2,r2,2
811241b0:	40c00015 	stw	r3,0(r8)
811241b4:	00c00084 	movi	r3,2
811241b8:	40c00115 	stw	r3,4(r8)
811241bc:	d8801c15 	stw	r2,112(sp)
811241c0:	d9001b15 	stw	r4,108(sp)
811241c4:	00c001c4 	movi	r3,7
811241c8:	1902650e 	bge	r3,r4,81124b60 <___vfiprintf_internal_r+0xebc>
811241cc:	10029a1e 	bne	r2,zero,81124c38 <___vfiprintf_internal_r+0xf94>
811241d0:	00c02004 	movi	r3,128
811241d4:	01000044 	movi	r4,1
811241d8:	000b883a 	mov	r5,zero
811241dc:	d811883a 	mov	r8,sp
811241e0:	e0c1b31e 	bne	fp,r3,811248b0 <___vfiprintf_internal_r+0xc0c>
811241e4:	8cb9c83a 	sub	fp,r17,r18
811241e8:	0701b10e 	bge	zero,fp,811248b0 <___vfiprintf_internal_r+0xc0c>
811241ec:	01c00404 	movi	r7,16
811241f0:	3f03890e 	bge	r7,fp,81125018 <___vfiprintf_internal_r+0x1374>
811241f4:	00e04534 	movhi	r3,33044
811241f8:	18c93704 	addi	r3,r3,9436
811241fc:	d8c02415 	stw	r3,144(sp)
81124200:	8007883a 	mov	r3,r16
81124204:	034001c4 	movi	r13,7
81124208:	e021883a 	mov	r16,fp
8112420c:	da402515 	stw	r9,148(sp)
81124210:	1839883a 	mov	fp,r3
81124214:	00000506 	br	8112422c <___vfiprintf_internal_r+0x588>
81124218:	29800084 	addi	r6,r5,2
8112421c:	42000204 	addi	r8,r8,8
81124220:	180b883a 	mov	r5,r3
81124224:	843ffc04 	addi	r16,r16,-16
81124228:	3c000d0e 	bge	r7,r16,81124260 <___vfiprintf_internal_r+0x5bc>
8112422c:	10800404 	addi	r2,r2,16
81124230:	28c00044 	addi	r3,r5,1
81124234:	45c00015 	stw	r23,0(r8)
81124238:	41c00115 	stw	r7,4(r8)
8112423c:	d8801c15 	stw	r2,112(sp)
81124240:	d8c01b15 	stw	r3,108(sp)
81124244:	68fff40e 	bge	r13,r3,81124218 <__reset+0xfb104218>
81124248:	1002241e 	bne	r2,zero,81124adc <___vfiprintf_internal_r+0xe38>
8112424c:	843ffc04 	addi	r16,r16,-16
81124250:	01800044 	movi	r6,1
81124254:	000b883a 	mov	r5,zero
81124258:	d811883a 	mov	r8,sp
8112425c:	3c3ff316 	blt	r7,r16,8112422c <__reset+0xfb10422c>
81124260:	da402517 	ldw	r9,148(sp)
81124264:	e007883a 	mov	r3,fp
81124268:	8039883a 	mov	fp,r16
8112426c:	1821883a 	mov	r16,r3
81124270:	d8c02417 	ldw	r3,144(sp)
81124274:	1705883a 	add	r2,r2,fp
81124278:	47000115 	stw	fp,4(r8)
8112427c:	40c00015 	stw	r3,0(r8)
81124280:	d8801c15 	stw	r2,112(sp)
81124284:	d9801b15 	stw	r6,108(sp)
81124288:	00c001c4 	movi	r3,7
8112428c:	19827616 	blt	r3,r6,81124c68 <___vfiprintf_internal_r+0xfc4>
81124290:	4cf9c83a 	sub	fp,r9,r19
81124294:	42000204 	addi	r8,r8,8
81124298:	31000044 	addi	r4,r6,1
8112429c:	300b883a 	mov	r5,r6
811242a0:	07018516 	blt	zero,fp,811248b8 <___vfiprintf_internal_r+0xc14>
811242a4:	9885883a 	add	r2,r19,r2
811242a8:	45400015 	stw	r21,0(r8)
811242ac:	44c00115 	stw	r19,4(r8)
811242b0:	d8801c15 	stw	r2,112(sp)
811242b4:	d9001b15 	stw	r4,108(sp)
811242b8:	00c001c4 	movi	r3,7
811242bc:	1901dd0e 	bge	r3,r4,81124a34 <___vfiprintf_internal_r+0xd90>
811242c0:	1002401e 	bne	r2,zero,81124bc4 <___vfiprintf_internal_r+0xf20>
811242c4:	d8001b15 	stw	zero,108(sp)
811242c8:	a2c0010c 	andi	r11,r20,4
811242cc:	58000226 	beq	r11,zero,811242d8 <___vfiprintf_internal_r+0x634>
811242d0:	8ca7c83a 	sub	r19,r17,r18
811242d4:	04c2f216 	blt	zero,r19,81124ea0 <___vfiprintf_internal_r+0x11fc>
811242d8:	8c80010e 	bge	r17,r18,811242e0 <___vfiprintf_internal_r+0x63c>
811242dc:	9023883a 	mov	r17,r18
811242e0:	da802317 	ldw	r10,140(sp)
811242e4:	5455883a 	add	r10,r10,r17
811242e8:	da802315 	stw	r10,140(sp)
811242ec:	d8001b15 	stw	zero,108(sp)
811242f0:	d811883a 	mov	r8,sp
811242f4:	003ea206 	br	81123d80 <__reset+0xfb103d80>
811242f8:	a5000814 	ori	r20,r20,32
811242fc:	80c00007 	ldb	r3,0(r16)
81124300:	003ec906 	br	81123e28 <__reset+0xfb103e28>
81124304:	80c00007 	ldb	r3,0(r16)
81124308:	1b030926 	beq	r3,r12,81124f30 <___vfiprintf_internal_r+0x128c>
8112430c:	a5000414 	ori	r20,r20,16
81124310:	003ec506 	br	81123e28 <__reset+0xfb103e28>
81124314:	21003fcc 	andi	r4,r4,255
81124318:	20035e1e 	bne	r4,zero,81125094 <___vfiprintf_internal_r+0x13f0>
8112431c:	a080080c 	andi	r2,r20,32
81124320:	1002a526 	beq	r2,zero,81124db8 <___vfiprintf_internal_r+0x1114>
81124324:	da802217 	ldw	r10,136(sp)
81124328:	50800017 	ldw	r2,0(r10)
8112432c:	da802317 	ldw	r10,140(sp)
81124330:	5007d7fa 	srai	r3,r10,31
81124334:	da802217 	ldw	r10,136(sp)
81124338:	10c00115 	stw	r3,4(r2)
8112433c:	52800104 	addi	r10,r10,4
81124340:	da802215 	stw	r10,136(sp)
81124344:	da802317 	ldw	r10,140(sp)
81124348:	12800015 	stw	r10,0(r2)
8112434c:	003e8c06 	br	81123d80 <__reset+0xfb103d80>
81124350:	21003fcc 	andi	r4,r4,255
81124354:	2003511e 	bne	r4,zero,8112509c <___vfiprintf_internal_r+0x13f8>
81124358:	a080080c 	andi	r2,r20,32
8112435c:	1000a126 	beq	r2,zero,811245e4 <___vfiprintf_internal_r+0x940>
81124360:	da802217 	ldw	r10,136(sp)
81124364:	d8001d85 	stb	zero,118(sp)
81124368:	50800204 	addi	r2,r10,8
8112436c:	54800017 	ldw	r18,0(r10)
81124370:	54c00117 	ldw	r19,4(r10)
81124374:	4802b416 	blt	r9,zero,81124e48 <___vfiprintf_internal_r+0x11a4>
81124378:	013fdfc4 	movi	r4,-129
8112437c:	94c6b03a 	or	r3,r18,r19
81124380:	d8802215 	stw	r2,136(sp)
81124384:	a128703a 	and	r20,r20,r4
81124388:	1800a226 	beq	r3,zero,81124614 <___vfiprintf_internal_r+0x970>
8112438c:	0039883a 	mov	fp,zero
81124390:	dd401a04 	addi	r21,sp,104
81124394:	9006d0fa 	srli	r3,r18,3
81124398:	9808977a 	slli	r4,r19,29
8112439c:	9826d0fa 	srli	r19,r19,3
811243a0:	948001cc 	andi	r18,r18,7
811243a4:	90800c04 	addi	r2,r18,48
811243a8:	ad7fffc4 	addi	r21,r21,-1
811243ac:	20e4b03a 	or	r18,r4,r3
811243b0:	a8800005 	stb	r2,0(r21)
811243b4:	94c6b03a 	or	r3,r18,r19
811243b8:	183ff61e 	bne	r3,zero,81124394 <__reset+0xfb104394>
811243bc:	a0c0004c 	andi	r3,r20,1
811243c0:	18005926 	beq	r3,zero,81124528 <___vfiprintf_internal_r+0x884>
811243c4:	10803fcc 	andi	r2,r2,255
811243c8:	1080201c 	xori	r2,r2,128
811243cc:	10bfe004 	addi	r2,r2,-128
811243d0:	00c00c04 	movi	r3,48
811243d4:	10c05426 	beq	r2,r3,81124528 <___vfiprintf_internal_r+0x884>
811243d8:	da801e17 	ldw	r10,120(sp)
811243dc:	a8bfffc4 	addi	r2,r21,-1
811243e0:	a8ffffc5 	stb	r3,-1(r21)
811243e4:	50a7c83a 	sub	r19,r10,r2
811243e8:	102b883a 	mov	r21,r2
811243ec:	003f2f06 	br	811240ac <__reset+0xfb1040ac>
811243f0:	21003fcc 	andi	r4,r4,255
811243f4:	2003421e 	bne	r4,zero,81125100 <___vfiprintf_internal_r+0x145c>
811243f8:	00a04534 	movhi	r2,33044
811243fc:	1088a504 	addi	r2,r2,8852
81124400:	d8802615 	stw	r2,152(sp)
81124404:	a080080c 	andi	r2,r20,32
81124408:	1000aa26 	beq	r2,zero,811246b4 <___vfiprintf_internal_r+0xa10>
8112440c:	da802217 	ldw	r10,136(sp)
81124410:	54800017 	ldw	r18,0(r10)
81124414:	54c00117 	ldw	r19,4(r10)
81124418:	52800204 	addi	r10,r10,8
8112441c:	da802215 	stw	r10,136(sp)
81124420:	a080004c 	andi	r2,r20,1
81124424:	1001d226 	beq	r2,zero,81124b70 <___vfiprintf_internal_r+0xecc>
81124428:	94c4b03a 	or	r2,r18,r19
8112442c:	1002351e 	bne	r2,zero,81124d04 <___vfiprintf_internal_r+0x1060>
81124430:	d8001d85 	stb	zero,118(sp)
81124434:	48022216 	blt	r9,zero,81124cc0 <___vfiprintf_internal_r+0x101c>
81124438:	00bfdfc4 	movi	r2,-129
8112443c:	a0a8703a 	and	r20,r20,r2
81124440:	003f1506 	br	81124098 <__reset+0xfb104098>
81124444:	da802217 	ldw	r10,136(sp)
81124448:	04800044 	movi	r18,1
8112444c:	d8001d85 	stb	zero,118(sp)
81124450:	50800017 	ldw	r2,0(r10)
81124454:	52800104 	addi	r10,r10,4
81124458:	da802215 	stw	r10,136(sp)
8112445c:	d8801005 	stb	r2,64(sp)
81124460:	9027883a 	mov	r19,r18
81124464:	dd401004 	addi	r21,sp,64
81124468:	0013883a 	mov	r9,zero
8112446c:	003f1706 	br	811240cc <__reset+0xfb1040cc>
81124470:	21003fcc 	andi	r4,r4,255
81124474:	2003201e 	bne	r4,zero,811250f8 <___vfiprintf_internal_r+0x1454>
81124478:	a080080c 	andi	r2,r20,32
8112447c:	10004b26 	beq	r2,zero,811245ac <___vfiprintf_internal_r+0x908>
81124480:	da802217 	ldw	r10,136(sp)
81124484:	50800117 	ldw	r2,4(r10)
81124488:	54800017 	ldw	r18,0(r10)
8112448c:	52800204 	addi	r10,r10,8
81124490:	da802215 	stw	r10,136(sp)
81124494:	1027883a 	mov	r19,r2
81124498:	10022c16 	blt	r2,zero,81124d4c <___vfiprintf_internal_r+0x10a8>
8112449c:	df001d83 	ldbu	fp,118(sp)
811244a0:	48007216 	blt	r9,zero,8112466c <___vfiprintf_internal_r+0x9c8>
811244a4:	00ffdfc4 	movi	r3,-129
811244a8:	94c4b03a 	or	r2,r18,r19
811244ac:	a0e8703a 	and	r20,r20,r3
811244b0:	1000cc26 	beq	r2,zero,811247e4 <___vfiprintf_internal_r+0xb40>
811244b4:	98021026 	beq	r19,zero,81124cf8 <___vfiprintf_internal_r+0x1054>
811244b8:	dc402415 	stw	r17,144(sp)
811244bc:	dc002515 	stw	r16,148(sp)
811244c0:	9823883a 	mov	r17,r19
811244c4:	9021883a 	mov	r16,r18
811244c8:	dd401a04 	addi	r21,sp,104
811244cc:	4825883a 	mov	r18,r9
811244d0:	4027883a 	mov	r19,r8
811244d4:	8009883a 	mov	r4,r16
811244d8:	880b883a 	mov	r5,r17
811244dc:	01800284 	movi	r6,10
811244e0:	000f883a 	mov	r7,zero
811244e4:	1126a400 	call	81126a40 <__umoddi3>
811244e8:	10800c04 	addi	r2,r2,48
811244ec:	ad7fffc4 	addi	r21,r21,-1
811244f0:	8009883a 	mov	r4,r16
811244f4:	880b883a 	mov	r5,r17
811244f8:	a8800005 	stb	r2,0(r21)
811244fc:	01800284 	movi	r6,10
81124500:	000f883a 	mov	r7,zero
81124504:	11264c00 	call	811264c0 <__udivdi3>
81124508:	1021883a 	mov	r16,r2
8112450c:	10c4b03a 	or	r2,r2,r3
81124510:	1823883a 	mov	r17,r3
81124514:	103fef1e 	bne	r2,zero,811244d4 <__reset+0xfb1044d4>
81124518:	dc402417 	ldw	r17,144(sp)
8112451c:	dc002517 	ldw	r16,148(sp)
81124520:	9013883a 	mov	r9,r18
81124524:	9811883a 	mov	r8,r19
81124528:	da801e17 	ldw	r10,120(sp)
8112452c:	5567c83a 	sub	r19,r10,r21
81124530:	003ede06 	br	811240ac <__reset+0xfb1040ac>
81124534:	38803fcc 	andi	r2,r7,255
81124538:	1080201c 	xori	r2,r2,128
8112453c:	10bfe004 	addi	r2,r2,-128
81124540:	1002371e 	bne	r2,zero,81124e20 <___vfiprintf_internal_r+0x117c>
81124544:	01000044 	movi	r4,1
81124548:	01c00804 	movi	r7,32
8112454c:	80c00007 	ldb	r3,0(r16)
81124550:	003e3506 	br	81123e28 <__reset+0xfb103e28>
81124554:	a5000054 	ori	r20,r20,1
81124558:	80c00007 	ldb	r3,0(r16)
8112455c:	003e3206 	br	81123e28 <__reset+0xfb103e28>
81124560:	a5002014 	ori	r20,r20,128
81124564:	80c00007 	ldb	r3,0(r16)
81124568:	003e2f06 	br	81123e28 <__reset+0xfb103e28>
8112456c:	8015883a 	mov	r10,r16
81124570:	0023883a 	mov	r17,zero
81124574:	18bff404 	addi	r2,r3,-48
81124578:	50c00007 	ldb	r3,0(r10)
8112457c:	8c4002a4 	muli	r17,r17,10
81124580:	84000044 	addi	r16,r16,1
81124584:	8015883a 	mov	r10,r16
81124588:	1463883a 	add	r17,r2,r17
8112458c:	18bff404 	addi	r2,r3,-48
81124590:	30bff92e 	bgeu	r6,r2,81124578 <__reset+0xfb104578>
81124594:	003e2506 	br	81123e2c <__reset+0xfb103e2c>
81124598:	21003fcc 	andi	r4,r4,255
8112459c:	2002d41e 	bne	r4,zero,811250f0 <___vfiprintf_internal_r+0x144c>
811245a0:	a5000414 	ori	r20,r20,16
811245a4:	a080080c 	andi	r2,r20,32
811245a8:	103fb51e 	bne	r2,zero,81124480 <__reset+0xfb104480>
811245ac:	a080040c 	andi	r2,r20,16
811245b0:	1001f826 	beq	r2,zero,81124d94 <___vfiprintf_internal_r+0x10f0>
811245b4:	da802217 	ldw	r10,136(sp)
811245b8:	54800017 	ldw	r18,0(r10)
811245bc:	52800104 	addi	r10,r10,4
811245c0:	da802215 	stw	r10,136(sp)
811245c4:	9027d7fa 	srai	r19,r18,31
811245c8:	9805883a 	mov	r2,r19
811245cc:	003fb206 	br	81124498 <__reset+0xfb104498>
811245d0:	21003fcc 	andi	r4,r4,255
811245d4:	2002c41e 	bne	r4,zero,811250e8 <___vfiprintf_internal_r+0x1444>
811245d8:	a5000414 	ori	r20,r20,16
811245dc:	a080080c 	andi	r2,r20,32
811245e0:	103f5f1e 	bne	r2,zero,81124360 <__reset+0xfb104360>
811245e4:	a080040c 	andi	r2,r20,16
811245e8:	10020f26 	beq	r2,zero,81124e28 <___vfiprintf_internal_r+0x1184>
811245ec:	da802217 	ldw	r10,136(sp)
811245f0:	d8001d85 	stb	zero,118(sp)
811245f4:	0027883a 	mov	r19,zero
811245f8:	50800104 	addi	r2,r10,4
811245fc:	54800017 	ldw	r18,0(r10)
81124600:	48021116 	blt	r9,zero,81124e48 <___vfiprintf_internal_r+0x11a4>
81124604:	00ffdfc4 	movi	r3,-129
81124608:	d8802215 	stw	r2,136(sp)
8112460c:	a0e8703a 	and	r20,r20,r3
81124610:	903f5e1e 	bne	r18,zero,8112438c <__reset+0xfb10438c>
81124614:	0039883a 	mov	fp,zero
81124618:	4802a626 	beq	r9,zero,811250b4 <___vfiprintf_internal_r+0x1410>
8112461c:	0025883a 	mov	r18,zero
81124620:	0027883a 	mov	r19,zero
81124624:	003f5a06 	br	81124390 <__reset+0xfb104390>
81124628:	21003fcc 	andi	r4,r4,255
8112462c:	20029f1e 	bne	r4,zero,811250ac <___vfiprintf_internal_r+0x1408>
81124630:	a5000414 	ori	r20,r20,16
81124634:	a080080c 	andi	r2,r20,32
81124638:	10005e1e 	bne	r2,zero,811247b4 <___vfiprintf_internal_r+0xb10>
8112463c:	a080040c 	andi	r2,r20,16
81124640:	1001a21e 	bne	r2,zero,81124ccc <___vfiprintf_internal_r+0x1028>
81124644:	a080100c 	andi	r2,r20,64
81124648:	d8001d85 	stb	zero,118(sp)
8112464c:	da802217 	ldw	r10,136(sp)
81124650:	1002231e 	bne	r2,zero,81124ee0 <___vfiprintf_internal_r+0x123c>
81124654:	50800104 	addi	r2,r10,4
81124658:	54800017 	ldw	r18,0(r10)
8112465c:	0027883a 	mov	r19,zero
81124660:	4801a00e 	bge	r9,zero,81124ce4 <___vfiprintf_internal_r+0x1040>
81124664:	d8802215 	stw	r2,136(sp)
81124668:	0039883a 	mov	fp,zero
8112466c:	94c4b03a 	or	r2,r18,r19
81124670:	103f901e 	bne	r2,zero,811244b4 <__reset+0xfb1044b4>
81124674:	00800044 	movi	r2,1
81124678:	10803fcc 	andi	r2,r2,255
8112467c:	00c00044 	movi	r3,1
81124680:	10c05926 	beq	r2,r3,811247e8 <___vfiprintf_internal_r+0xb44>
81124684:	00c00084 	movi	r3,2
81124688:	10ffe41e 	bne	r2,r3,8112461c <__reset+0xfb10461c>
8112468c:	0025883a 	mov	r18,zero
81124690:	0027883a 	mov	r19,zero
81124694:	00013d06 	br	81124b8c <___vfiprintf_internal_r+0xee8>
81124698:	21003fcc 	andi	r4,r4,255
8112469c:	2002811e 	bne	r4,zero,811250a4 <___vfiprintf_internal_r+0x1400>
811246a0:	00a04534 	movhi	r2,33044
811246a4:	1088a004 	addi	r2,r2,8832
811246a8:	d8802615 	stw	r2,152(sp)
811246ac:	a080080c 	andi	r2,r20,32
811246b0:	103f561e 	bne	r2,zero,8112440c <__reset+0xfb10440c>
811246b4:	a080040c 	andi	r2,r20,16
811246b8:	1001d126 	beq	r2,zero,81124e00 <___vfiprintf_internal_r+0x115c>
811246bc:	da802217 	ldw	r10,136(sp)
811246c0:	0027883a 	mov	r19,zero
811246c4:	54800017 	ldw	r18,0(r10)
811246c8:	52800104 	addi	r10,r10,4
811246cc:	da802215 	stw	r10,136(sp)
811246d0:	003f5306 	br	81124420 <__reset+0xfb104420>
811246d4:	da802217 	ldw	r10,136(sp)
811246d8:	d8001d85 	stb	zero,118(sp)
811246dc:	55400017 	ldw	r21,0(r10)
811246e0:	50c00104 	addi	r3,r10,4
811246e4:	a8024226 	beq	r21,zero,81124ff0 <___vfiprintf_internal_r+0x134c>
811246e8:	48021816 	blt	r9,zero,81124f4c <___vfiprintf_internal_r+0x12a8>
811246ec:	480d883a 	mov	r6,r9
811246f0:	000b883a 	mov	r5,zero
811246f4:	a809883a 	mov	r4,r21
811246f8:	d8c02a15 	stw	r3,168(sp)
811246fc:	da002b15 	stw	r8,172(sp)
81124700:	da402c15 	stw	r9,176(sp)
81124704:	111ea800 	call	8111ea80 <memchr>
81124708:	d8c02a17 	ldw	r3,168(sp)
8112470c:	da002b17 	ldw	r8,172(sp)
81124710:	da402c17 	ldw	r9,176(sp)
81124714:	10024826 	beq	r2,zero,81125038 <___vfiprintf_internal_r+0x1394>
81124718:	1567c83a 	sub	r19,r2,r21
8112471c:	df001d83 	ldbu	fp,118(sp)
81124720:	d8c02215 	stw	r3,136(sp)
81124724:	0013883a 	mov	r9,zero
81124728:	003e6006 	br	811240ac <__reset+0xfb1040ac>
8112472c:	21003fcc 	andi	r4,r4,255
81124730:	203fc026 	beq	r4,zero,81124634 <__reset+0xfb104634>
81124734:	d9c01d85 	stb	r7,118(sp)
81124738:	003fbe06 	br	81124634 <__reset+0xfb104634>
8112473c:	da802217 	ldw	r10,136(sp)
81124740:	54400017 	ldw	r17,0(r10)
81124744:	50800104 	addi	r2,r10,4
81124748:	883e3b16 	blt	r17,zero,81124038 <__reset+0xfb104038>
8112474c:	d8802215 	stw	r2,136(sp)
81124750:	80c00007 	ldb	r3,0(r16)
81124754:	003db406 	br	81123e28 <__reset+0xfb103e28>
81124758:	01000044 	movi	r4,1
8112475c:	01c00ac4 	movi	r7,43
81124760:	80c00007 	ldb	r3,0(r16)
81124764:	003db006 	br	81123e28 <__reset+0xfb103e28>
81124768:	80c00007 	ldb	r3,0(r16)
8112476c:	82800044 	addi	r10,r16,1
81124770:	1b423c26 	beq	r3,r13,81125064 <___vfiprintf_internal_r+0x13c0>
81124774:	18bff404 	addi	r2,r3,-48
81124778:	0013883a 	mov	r9,zero
8112477c:	30822b36 	bltu	r6,r2,8112502c <___vfiprintf_internal_r+0x1388>
81124780:	50c00007 	ldb	r3,0(r10)
81124784:	4a4002a4 	muli	r9,r9,10
81124788:	54000044 	addi	r16,r10,1
8112478c:	8015883a 	mov	r10,r16
81124790:	4893883a 	add	r9,r9,r2
81124794:	18bff404 	addi	r2,r3,-48
81124798:	30bff92e 	bgeu	r6,r2,81124780 <__reset+0xfb104780>
8112479c:	483da30e 	bge	r9,zero,81123e2c <__reset+0xfb103e2c>
811247a0:	027fffc4 	movi	r9,-1
811247a4:	003da106 	br	81123e2c <__reset+0xfb103e2c>
811247a8:	a5001014 	ori	r20,r20,64
811247ac:	80c00007 	ldb	r3,0(r16)
811247b0:	003d9d06 	br	81123e28 <__reset+0xfb103e28>
811247b4:	da802217 	ldw	r10,136(sp)
811247b8:	d8001d85 	stb	zero,118(sp)
811247bc:	50c00204 	addi	r3,r10,8
811247c0:	54800017 	ldw	r18,0(r10)
811247c4:	54c00117 	ldw	r19,4(r10)
811247c8:	4801ca16 	blt	r9,zero,81124ef4 <___vfiprintf_internal_r+0x1250>
811247cc:	013fdfc4 	movi	r4,-129
811247d0:	94c4b03a 	or	r2,r18,r19
811247d4:	d8c02215 	stw	r3,136(sp)
811247d8:	a128703a 	and	r20,r20,r4
811247dc:	0039883a 	mov	fp,zero
811247e0:	103f341e 	bne	r2,zero,811244b4 <__reset+0xfb1044b4>
811247e4:	483e2e26 	beq	r9,zero,811240a0 <__reset+0xfb1040a0>
811247e8:	0025883a 	mov	r18,zero
811247ec:	94800c04 	addi	r18,r18,48
811247f0:	dc8019c5 	stb	r18,103(sp)
811247f4:	dcc02717 	ldw	r19,156(sp)
811247f8:	dd4019c4 	addi	r21,sp,103
811247fc:	003e2b06 	br	811240ac <__reset+0xfb1040ac>
81124800:	21003fcc 	andi	r4,r4,255
81124804:	2002361e 	bne	r4,zero,811250e0 <___vfiprintf_internal_r+0x143c>
81124808:	1801c126 	beq	r3,zero,81124f10 <___vfiprintf_internal_r+0x126c>
8112480c:	04800044 	movi	r18,1
81124810:	d8c01005 	stb	r3,64(sp)
81124814:	d8001d85 	stb	zero,118(sp)
81124818:	9027883a 	mov	r19,r18
8112481c:	dd401004 	addi	r21,sp,64
81124820:	003f1106 	br	81124468 <__reset+0xfb104468>
81124824:	d9402117 	ldw	r5,132(sp)
81124828:	d9002017 	ldw	r4,128(sp)
8112482c:	d9801a04 	addi	r6,sp,104
81124830:	d9c02b15 	stw	r7,172(sp)
81124834:	dbc02a15 	stw	r15,168(sp)
81124838:	1123b880 	call	81123b88 <__sprint_r.part.0>
8112483c:	d9c02b17 	ldw	r7,172(sp)
81124840:	dbc02a17 	ldw	r15,168(sp)
81124844:	10006d1e 	bne	r2,zero,811249fc <___vfiprintf_internal_r+0xd58>
81124848:	d9801b17 	ldw	r6,108(sp)
8112484c:	d8801c17 	ldw	r2,112(sp)
81124850:	d811883a 	mov	r8,sp
81124854:	31400044 	addi	r5,r6,1
81124858:	003e3306 	br	81124128 <__reset+0xfb104128>
8112485c:	d9401b17 	ldw	r5,108(sp)
81124860:	d8801c17 	ldw	r2,112(sp)
81124864:	29000044 	addi	r4,r5,1
81124868:	d8c01d87 	ldb	r3,118(sp)
8112486c:	183e4d26 	beq	r3,zero,811241a4 <__reset+0xfb1041a4>
81124870:	00c00044 	movi	r3,1
81124874:	d9401d84 	addi	r5,sp,118
81124878:	10c5883a 	add	r2,r2,r3
8112487c:	41400015 	stw	r5,0(r8)
81124880:	40c00115 	stw	r3,4(r8)
81124884:	d8801c15 	stw	r2,112(sp)
81124888:	d9001b15 	stw	r4,108(sp)
8112488c:	014001c4 	movi	r5,7
81124890:	2900a90e 	bge	r5,r4,81124b38 <___vfiprintf_internal_r+0xe94>
81124894:	1000da1e 	bne	r2,zero,81124c00 <___vfiprintf_internal_r+0xf5c>
81124898:	7000ab1e 	bne	r14,zero,81124b48 <___vfiprintf_internal_r+0xea4>
8112489c:	000b883a 	mov	r5,zero
811248a0:	1809883a 	mov	r4,r3
811248a4:	d811883a 	mov	r8,sp
811248a8:	00c02004 	movi	r3,128
811248ac:	e0fe4d26 	beq	fp,r3,811241e4 <__reset+0xfb1041e4>
811248b0:	4cf9c83a 	sub	fp,r9,r19
811248b4:	073e7b0e 	bge	zero,fp,811242a4 <__reset+0xfb1042a4>
811248b8:	01c00404 	movi	r7,16
811248bc:	3f01900e 	bge	r7,fp,81124f00 <___vfiprintf_internal_r+0x125c>
811248c0:	00e04534 	movhi	r3,33044
811248c4:	18c93704 	addi	r3,r3,9436
811248c8:	d8c02415 	stw	r3,144(sp)
811248cc:	034001c4 	movi	r13,7
811248d0:	00000506 	br	811248e8 <___vfiprintf_internal_r+0xc44>
811248d4:	29000084 	addi	r4,r5,2
811248d8:	42000204 	addi	r8,r8,8
811248dc:	180b883a 	mov	r5,r3
811248e0:	e73ffc04 	addi	fp,fp,-16
811248e4:	3f000d0e 	bge	r7,fp,8112491c <___vfiprintf_internal_r+0xc78>
811248e8:	10800404 	addi	r2,r2,16
811248ec:	28c00044 	addi	r3,r5,1
811248f0:	45c00015 	stw	r23,0(r8)
811248f4:	41c00115 	stw	r7,4(r8)
811248f8:	d8801c15 	stw	r2,112(sp)
811248fc:	d8c01b15 	stw	r3,108(sp)
81124900:	68fff40e 	bge	r13,r3,811248d4 <__reset+0xfb1048d4>
81124904:	1000101e 	bne	r2,zero,81124948 <___vfiprintf_internal_r+0xca4>
81124908:	e73ffc04 	addi	fp,fp,-16
8112490c:	01000044 	movi	r4,1
81124910:	000b883a 	mov	r5,zero
81124914:	d811883a 	mov	r8,sp
81124918:	3f3ff316 	blt	r7,fp,811248e8 <__reset+0xfb1048e8>
8112491c:	da802417 	ldw	r10,144(sp)
81124920:	1705883a 	add	r2,r2,fp
81124924:	47000115 	stw	fp,4(r8)
81124928:	42800015 	stw	r10,0(r8)
8112492c:	d8801c15 	stw	r2,112(sp)
81124930:	d9001b15 	stw	r4,108(sp)
81124934:	00c001c4 	movi	r3,7
81124938:	19003616 	blt	r3,r4,81124a14 <___vfiprintf_internal_r+0xd70>
8112493c:	42000204 	addi	r8,r8,8
81124940:	21000044 	addi	r4,r4,1
81124944:	003e5706 	br	811242a4 <__reset+0xfb1042a4>
81124948:	d9402117 	ldw	r5,132(sp)
8112494c:	d9002017 	ldw	r4,128(sp)
81124950:	d9801a04 	addi	r6,sp,104
81124954:	d9c02b15 	stw	r7,172(sp)
81124958:	db402a15 	stw	r13,168(sp)
8112495c:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124960:	d9c02b17 	ldw	r7,172(sp)
81124964:	db402a17 	ldw	r13,168(sp)
81124968:	1000241e 	bne	r2,zero,811249fc <___vfiprintf_internal_r+0xd58>
8112496c:	d9401b17 	ldw	r5,108(sp)
81124970:	d8801c17 	ldw	r2,112(sp)
81124974:	d811883a 	mov	r8,sp
81124978:	29000044 	addi	r4,r5,1
8112497c:	003fd806 	br	811248e0 <__reset+0xfb1048e0>
81124980:	d9401b17 	ldw	r5,108(sp)
81124984:	00e04534 	movhi	r3,33044
81124988:	18c93b04 	addi	r3,r3,9452
8112498c:	d8c02415 	stw	r3,144(sp)
81124990:	29400044 	addi	r5,r5,1
81124994:	d8c02417 	ldw	r3,144(sp)
81124998:	14c5883a 	add	r2,r2,r19
8112499c:	44c00115 	stw	r19,4(r8)
811249a0:	40c00015 	stw	r3,0(r8)
811249a4:	d8801c15 	stw	r2,112(sp)
811249a8:	d9401b15 	stw	r5,108(sp)
811249ac:	00c001c4 	movi	r3,7
811249b0:	1940070e 	bge	r3,r5,811249d0 <___vfiprintf_internal_r+0xd2c>
811249b4:	103e4826 	beq	r2,zero,811242d8 <__reset+0xfb1042d8>
811249b8:	d9402117 	ldw	r5,132(sp)
811249bc:	d9002017 	ldw	r4,128(sp)
811249c0:	d9801a04 	addi	r6,sp,104
811249c4:	1123b880 	call	81123b88 <__sprint_r.part.0>
811249c8:	10000c1e 	bne	r2,zero,811249fc <___vfiprintf_internal_r+0xd58>
811249cc:	d8801c17 	ldw	r2,112(sp)
811249d0:	8c80010e 	bge	r17,r18,811249d8 <___vfiprintf_internal_r+0xd34>
811249d4:	9023883a 	mov	r17,r18
811249d8:	da802317 	ldw	r10,140(sp)
811249dc:	5455883a 	add	r10,r10,r17
811249e0:	da802315 	stw	r10,140(sp)
811249e4:	103e4126 	beq	r2,zero,811242ec <__reset+0xfb1042ec>
811249e8:	d9402117 	ldw	r5,132(sp)
811249ec:	d9002017 	ldw	r4,128(sp)
811249f0:	d9801a04 	addi	r6,sp,104
811249f4:	1123b880 	call	81123b88 <__sprint_r.part.0>
811249f8:	103e3c26 	beq	r2,zero,811242ec <__reset+0xfb1042ec>
811249fc:	dd002117 	ldw	r20,132(sp)
81124a00:	a080030b 	ldhu	r2,12(r20)
81124a04:	1080100c 	andi	r2,r2,64
81124a08:	1001231e 	bne	r2,zero,81124e98 <___vfiprintf_internal_r+0x11f4>
81124a0c:	d8802317 	ldw	r2,140(sp)
81124a10:	003d7b06 	br	81124000 <__reset+0xfb104000>
81124a14:	1000991e 	bne	r2,zero,81124c7c <___vfiprintf_internal_r+0xfd8>
81124a18:	00c00044 	movi	r3,1
81124a1c:	9805883a 	mov	r2,r19
81124a20:	dd400015 	stw	r21,0(sp)
81124a24:	dcc00115 	stw	r19,4(sp)
81124a28:	dcc01c15 	stw	r19,112(sp)
81124a2c:	d8c01b15 	stw	r3,108(sp)
81124a30:	d811883a 	mov	r8,sp
81124a34:	42000204 	addi	r8,r8,8
81124a38:	a2c0010c 	andi	r11,r20,4
81124a3c:	583fe426 	beq	r11,zero,811249d0 <__reset+0xfb1049d0>
81124a40:	8ca7c83a 	sub	r19,r17,r18
81124a44:	04ffe20e 	bge	zero,r19,811249d0 <__reset+0xfb1049d0>
81124a48:	01c00404 	movi	r7,16
81124a4c:	3cffcc0e 	bge	r7,r19,81124980 <__reset+0xfb104980>
81124a50:	02a04534 	movhi	r10,33044
81124a54:	52893b04 	addi	r10,r10,9452
81124a58:	d9001b17 	ldw	r4,108(sp)
81124a5c:	da802415 	stw	r10,144(sp)
81124a60:	382b883a 	mov	r21,r7
81124a64:	050001c4 	movi	r20,7
81124a68:	df002017 	ldw	fp,128(sp)
81124a6c:	00000506 	br	81124a84 <___vfiprintf_internal_r+0xde0>
81124a70:	21400084 	addi	r5,r4,2
81124a74:	42000204 	addi	r8,r8,8
81124a78:	1809883a 	mov	r4,r3
81124a7c:	9cfffc04 	addi	r19,r19,-16
81124a80:	acffc40e 	bge	r21,r19,81124994 <__reset+0xfb104994>
81124a84:	10800404 	addi	r2,r2,16
81124a88:	20c00044 	addi	r3,r4,1
81124a8c:	45800015 	stw	r22,0(r8)
81124a90:	45400115 	stw	r21,4(r8)
81124a94:	d8801c15 	stw	r2,112(sp)
81124a98:	d8c01b15 	stw	r3,108(sp)
81124a9c:	a0fff40e 	bge	r20,r3,81124a70 <__reset+0xfb104a70>
81124aa0:	1000041e 	bne	r2,zero,81124ab4 <___vfiprintf_internal_r+0xe10>
81124aa4:	01400044 	movi	r5,1
81124aa8:	0009883a 	mov	r4,zero
81124aac:	d811883a 	mov	r8,sp
81124ab0:	003ff206 	br	81124a7c <__reset+0xfb104a7c>
81124ab4:	d9402117 	ldw	r5,132(sp)
81124ab8:	d9801a04 	addi	r6,sp,104
81124abc:	e009883a 	mov	r4,fp
81124ac0:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124ac4:	103fcd1e 	bne	r2,zero,811249fc <__reset+0xfb1049fc>
81124ac8:	d9001b17 	ldw	r4,108(sp)
81124acc:	d8801c17 	ldw	r2,112(sp)
81124ad0:	d811883a 	mov	r8,sp
81124ad4:	21400044 	addi	r5,r4,1
81124ad8:	003fe806 	br	81124a7c <__reset+0xfb104a7c>
81124adc:	d9402117 	ldw	r5,132(sp)
81124ae0:	d9002017 	ldw	r4,128(sp)
81124ae4:	d9801a04 	addi	r6,sp,104
81124ae8:	d9c02b15 	stw	r7,172(sp)
81124aec:	db402a15 	stw	r13,168(sp)
81124af0:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124af4:	d9c02b17 	ldw	r7,172(sp)
81124af8:	db402a17 	ldw	r13,168(sp)
81124afc:	103fbf1e 	bne	r2,zero,811249fc <__reset+0xfb1049fc>
81124b00:	d9401b17 	ldw	r5,108(sp)
81124b04:	d8801c17 	ldw	r2,112(sp)
81124b08:	d811883a 	mov	r8,sp
81124b0c:	29800044 	addi	r6,r5,1
81124b10:	003dc406 	br	81124224 <__reset+0xfb104224>
81124b14:	1000d21e 	bne	r2,zero,81124e60 <___vfiprintf_internal_r+0x11bc>
81124b18:	d8c01d87 	ldb	r3,118(sp)
81124b1c:	18009526 	beq	r3,zero,81124d74 <___vfiprintf_internal_r+0x10d0>
81124b20:	00800044 	movi	r2,1
81124b24:	d8c01d84 	addi	r3,sp,118
81124b28:	1009883a 	mov	r4,r2
81124b2c:	d8c00015 	stw	r3,0(sp)
81124b30:	d8800115 	stw	r2,4(sp)
81124b34:	d811883a 	mov	r8,sp
81124b38:	200b883a 	mov	r5,r4
81124b3c:	42000204 	addi	r8,r8,8
81124b40:	21000044 	addi	r4,r4,1
81124b44:	003d9706 	br	811241a4 <__reset+0xfb1041a4>
81124b48:	d9001d04 	addi	r4,sp,116
81124b4c:	00800084 	movi	r2,2
81124b50:	d9000015 	stw	r4,0(sp)
81124b54:	d8800115 	stw	r2,4(sp)
81124b58:	1809883a 	mov	r4,r3
81124b5c:	d811883a 	mov	r8,sp
81124b60:	200b883a 	mov	r5,r4
81124b64:	42000204 	addi	r8,r8,8
81124b68:	21000044 	addi	r4,r4,1
81124b6c:	003f4e06 	br	811248a8 <__reset+0xfb1048a8>
81124b70:	d8001d85 	stb	zero,118(sp)
81124b74:	48005016 	blt	r9,zero,81124cb8 <___vfiprintf_internal_r+0x1014>
81124b78:	00ffdfc4 	movi	r3,-129
81124b7c:	94c4b03a 	or	r2,r18,r19
81124b80:	a0e8703a 	and	r20,r20,r3
81124b84:	103d4426 	beq	r2,zero,81124098 <__reset+0xfb104098>
81124b88:	0039883a 	mov	fp,zero
81124b8c:	d9002617 	ldw	r4,152(sp)
81124b90:	dd401a04 	addi	r21,sp,104
81124b94:	908003cc 	andi	r2,r18,15
81124b98:	9806973a 	slli	r3,r19,28
81124b9c:	2085883a 	add	r2,r4,r2
81124ba0:	9024d13a 	srli	r18,r18,4
81124ba4:	10800003 	ldbu	r2,0(r2)
81124ba8:	9826d13a 	srli	r19,r19,4
81124bac:	ad7fffc4 	addi	r21,r21,-1
81124bb0:	1ca4b03a 	or	r18,r3,r18
81124bb4:	a8800005 	stb	r2,0(r21)
81124bb8:	94c4b03a 	or	r2,r18,r19
81124bbc:	103ff51e 	bne	r2,zero,81124b94 <__reset+0xfb104b94>
81124bc0:	003e5906 	br	81124528 <__reset+0xfb104528>
81124bc4:	d9402117 	ldw	r5,132(sp)
81124bc8:	d9002017 	ldw	r4,128(sp)
81124bcc:	d9801a04 	addi	r6,sp,104
81124bd0:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124bd4:	103f891e 	bne	r2,zero,811249fc <__reset+0xfb1049fc>
81124bd8:	d8801c17 	ldw	r2,112(sp)
81124bdc:	d811883a 	mov	r8,sp
81124be0:	003f9506 	br	81124a38 <__reset+0xfb104a38>
81124be4:	d9402117 	ldw	r5,132(sp)
81124be8:	d9002017 	ldw	r4,128(sp)
81124bec:	d9801a04 	addi	r6,sp,104
81124bf0:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124bf4:	103f811e 	bne	r2,zero,811249fc <__reset+0xfb1049fc>
81124bf8:	d811883a 	mov	r8,sp
81124bfc:	003ced06 	br	81123fb4 <__reset+0xfb103fb4>
81124c00:	d9402117 	ldw	r5,132(sp)
81124c04:	d9002017 	ldw	r4,128(sp)
81124c08:	d9801a04 	addi	r6,sp,104
81124c0c:	da402c15 	stw	r9,176(sp)
81124c10:	db802a15 	stw	r14,168(sp)
81124c14:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124c18:	da402c17 	ldw	r9,176(sp)
81124c1c:	db802a17 	ldw	r14,168(sp)
81124c20:	103f761e 	bne	r2,zero,811249fc <__reset+0xfb1049fc>
81124c24:	d9401b17 	ldw	r5,108(sp)
81124c28:	d8801c17 	ldw	r2,112(sp)
81124c2c:	d811883a 	mov	r8,sp
81124c30:	29000044 	addi	r4,r5,1
81124c34:	003d5b06 	br	811241a4 <__reset+0xfb1041a4>
81124c38:	d9402117 	ldw	r5,132(sp)
81124c3c:	d9002017 	ldw	r4,128(sp)
81124c40:	d9801a04 	addi	r6,sp,104
81124c44:	da402c15 	stw	r9,176(sp)
81124c48:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124c4c:	da402c17 	ldw	r9,176(sp)
81124c50:	103f6a1e 	bne	r2,zero,811249fc <__reset+0xfb1049fc>
81124c54:	d9401b17 	ldw	r5,108(sp)
81124c58:	d8801c17 	ldw	r2,112(sp)
81124c5c:	d811883a 	mov	r8,sp
81124c60:	29000044 	addi	r4,r5,1
81124c64:	003f1006 	br	811248a8 <__reset+0xfb1048a8>
81124c68:	1000c31e 	bne	r2,zero,81124f78 <___vfiprintf_internal_r+0x12d4>
81124c6c:	01000044 	movi	r4,1
81124c70:	000b883a 	mov	r5,zero
81124c74:	d811883a 	mov	r8,sp
81124c78:	003f0d06 	br	811248b0 <__reset+0xfb1048b0>
81124c7c:	d9402117 	ldw	r5,132(sp)
81124c80:	d9002017 	ldw	r4,128(sp)
81124c84:	d9801a04 	addi	r6,sp,104
81124c88:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124c8c:	103f5b1e 	bne	r2,zero,811249fc <__reset+0xfb1049fc>
81124c90:	d9001b17 	ldw	r4,108(sp)
81124c94:	d8801c17 	ldw	r2,112(sp)
81124c98:	d811883a 	mov	r8,sp
81124c9c:	21000044 	addi	r4,r4,1
81124ca0:	003d8006 	br	811242a4 <__reset+0xfb1042a4>
81124ca4:	01204534 	movhi	r4,33044
81124ca8:	2108a504 	addi	r4,r4,8852
81124cac:	d9002615 	stw	r4,152(sp)
81124cb0:	d8c02215 	stw	r3,136(sp)
81124cb4:	1029883a 	mov	r20,r2
81124cb8:	94c4b03a 	or	r2,r18,r19
81124cbc:	103fb21e 	bne	r2,zero,81124b88 <__reset+0xfb104b88>
81124cc0:	0039883a 	mov	fp,zero
81124cc4:	00800084 	movi	r2,2
81124cc8:	003e6b06 	br	81124678 <__reset+0xfb104678>
81124ccc:	da802217 	ldw	r10,136(sp)
81124cd0:	d8001d85 	stb	zero,118(sp)
81124cd4:	0027883a 	mov	r19,zero
81124cd8:	50800104 	addi	r2,r10,4
81124cdc:	54800017 	ldw	r18,0(r10)
81124ce0:	483e6016 	blt	r9,zero,81124664 <__reset+0xfb104664>
81124ce4:	00ffdfc4 	movi	r3,-129
81124ce8:	d8802215 	stw	r2,136(sp)
81124cec:	a0e8703a 	and	r20,r20,r3
81124cf0:	0039883a 	mov	fp,zero
81124cf4:	903ebb26 	beq	r18,zero,811247e4 <__reset+0xfb1047e4>
81124cf8:	00800244 	movi	r2,9
81124cfc:	14bdee36 	bltu	r2,r18,811244b8 <__reset+0xfb1044b8>
81124d00:	003eba06 	br	811247ec <__reset+0xfb1047ec>
81124d04:	00800c04 	movi	r2,48
81124d08:	d8c01d45 	stb	r3,117(sp)
81124d0c:	d8801d05 	stb	r2,116(sp)
81124d10:	d8001d85 	stb	zero,118(sp)
81124d14:	a0c00094 	ori	r3,r20,2
81124d18:	4800a916 	blt	r9,zero,81124fc0 <___vfiprintf_internal_r+0x131c>
81124d1c:	00bfdfc4 	movi	r2,-129
81124d20:	a096703a 	and	r11,r20,r2
81124d24:	5d000094 	ori	r20,r11,2
81124d28:	0039883a 	mov	fp,zero
81124d2c:	003f9706 	br	81124b8c <__reset+0xfb104b8c>
81124d30:	8025883a 	mov	r18,r16
81124d34:	003c2e06 	br	81123df0 <__reset+0xfb103df0>
81124d38:	00a04534 	movhi	r2,33044
81124d3c:	1088a504 	addi	r2,r2,8852
81124d40:	0039883a 	mov	fp,zero
81124d44:	d8802615 	stw	r2,152(sp)
81124d48:	003f9006 	br	81124b8c <__reset+0xfb104b8c>
81124d4c:	04a5c83a 	sub	r18,zero,r18
81124d50:	07000b44 	movi	fp,45
81124d54:	9004c03a 	cmpne	r2,r18,zero
81124d58:	04e7c83a 	sub	r19,zero,r19
81124d5c:	df001d85 	stb	fp,118(sp)
81124d60:	98a7c83a 	sub	r19,r19,r2
81124d64:	48009f16 	blt	r9,zero,81124fe4 <___vfiprintf_internal_r+0x1340>
81124d68:	00bfdfc4 	movi	r2,-129
81124d6c:	a0a8703a 	and	r20,r20,r2
81124d70:	003dd006 	br	811244b4 <__reset+0xfb1044b4>
81124d74:	70004c26 	beq	r14,zero,81124ea8 <___vfiprintf_internal_r+0x1204>
81124d78:	00800084 	movi	r2,2
81124d7c:	d8c01d04 	addi	r3,sp,116
81124d80:	d8c00015 	stw	r3,0(sp)
81124d84:	d8800115 	stw	r2,4(sp)
81124d88:	01000044 	movi	r4,1
81124d8c:	d811883a 	mov	r8,sp
81124d90:	003f7306 	br	81124b60 <__reset+0xfb104b60>
81124d94:	a080100c 	andi	r2,r20,64
81124d98:	da802217 	ldw	r10,136(sp)
81124d9c:	103e0626 	beq	r2,zero,811245b8 <__reset+0xfb1045b8>
81124da0:	5480000f 	ldh	r18,0(r10)
81124da4:	52800104 	addi	r10,r10,4
81124da8:	da802215 	stw	r10,136(sp)
81124dac:	9027d7fa 	srai	r19,r18,31
81124db0:	9805883a 	mov	r2,r19
81124db4:	003db806 	br	81124498 <__reset+0xfb104498>
81124db8:	a080040c 	andi	r2,r20,16
81124dbc:	1000091e 	bne	r2,zero,81124de4 <___vfiprintf_internal_r+0x1140>
81124dc0:	a2c0100c 	andi	r11,r20,64
81124dc4:	58000726 	beq	r11,zero,81124de4 <___vfiprintf_internal_r+0x1140>
81124dc8:	da802217 	ldw	r10,136(sp)
81124dcc:	50800017 	ldw	r2,0(r10)
81124dd0:	52800104 	addi	r10,r10,4
81124dd4:	da802215 	stw	r10,136(sp)
81124dd8:	da802317 	ldw	r10,140(sp)
81124ddc:	1280000d 	sth	r10,0(r2)
81124de0:	003be706 	br	81123d80 <__reset+0xfb103d80>
81124de4:	da802217 	ldw	r10,136(sp)
81124de8:	50800017 	ldw	r2,0(r10)
81124dec:	52800104 	addi	r10,r10,4
81124df0:	da802215 	stw	r10,136(sp)
81124df4:	da802317 	ldw	r10,140(sp)
81124df8:	12800015 	stw	r10,0(r2)
81124dfc:	003be006 	br	81123d80 <__reset+0xfb103d80>
81124e00:	a080100c 	andi	r2,r20,64
81124e04:	da802217 	ldw	r10,136(sp)
81124e08:	10003026 	beq	r2,zero,81124ecc <___vfiprintf_internal_r+0x1228>
81124e0c:	5480000b 	ldhu	r18,0(r10)
81124e10:	52800104 	addi	r10,r10,4
81124e14:	0027883a 	mov	r19,zero
81124e18:	da802215 	stw	r10,136(sp)
81124e1c:	003d8006 	br	81124420 <__reset+0xfb104420>
81124e20:	80c00007 	ldb	r3,0(r16)
81124e24:	003c0006 	br	81123e28 <__reset+0xfb103e28>
81124e28:	a080100c 	andi	r2,r20,64
81124e2c:	d8001d85 	stb	zero,118(sp)
81124e30:	da802217 	ldw	r10,136(sp)
81124e34:	1000201e 	bne	r2,zero,81124eb8 <___vfiprintf_internal_r+0x1214>
81124e38:	50800104 	addi	r2,r10,4
81124e3c:	54800017 	ldw	r18,0(r10)
81124e40:	0027883a 	mov	r19,zero
81124e44:	483def0e 	bge	r9,zero,81124604 <__reset+0xfb104604>
81124e48:	94c6b03a 	or	r3,r18,r19
81124e4c:	d8802215 	stw	r2,136(sp)
81124e50:	183d4e1e 	bne	r3,zero,8112438c <__reset+0xfb10438c>
81124e54:	0039883a 	mov	fp,zero
81124e58:	0005883a 	mov	r2,zero
81124e5c:	003e0606 	br	81124678 <__reset+0xfb104678>
81124e60:	d9402117 	ldw	r5,132(sp)
81124e64:	d9002017 	ldw	r4,128(sp)
81124e68:	d9801a04 	addi	r6,sp,104
81124e6c:	da402c15 	stw	r9,176(sp)
81124e70:	db802a15 	stw	r14,168(sp)
81124e74:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124e78:	da402c17 	ldw	r9,176(sp)
81124e7c:	db802a17 	ldw	r14,168(sp)
81124e80:	103ede1e 	bne	r2,zero,811249fc <__reset+0xfb1049fc>
81124e84:	d9401b17 	ldw	r5,108(sp)
81124e88:	d8801c17 	ldw	r2,112(sp)
81124e8c:	d811883a 	mov	r8,sp
81124e90:	29000044 	addi	r4,r5,1
81124e94:	003e7406 	br	81124868 <__reset+0xfb104868>
81124e98:	00bfffc4 	movi	r2,-1
81124e9c:	003c5806 	br	81124000 <__reset+0xfb104000>
81124ea0:	d811883a 	mov	r8,sp
81124ea4:	003ee806 	br	81124a48 <__reset+0xfb104a48>
81124ea8:	000b883a 	mov	r5,zero
81124eac:	01000044 	movi	r4,1
81124eb0:	d811883a 	mov	r8,sp
81124eb4:	003e7c06 	br	811248a8 <__reset+0xfb1048a8>
81124eb8:	50800104 	addi	r2,r10,4
81124ebc:	5480000b 	ldhu	r18,0(r10)
81124ec0:	0027883a 	mov	r19,zero
81124ec4:	483dcf0e 	bge	r9,zero,81124604 <__reset+0xfb104604>
81124ec8:	003fdf06 	br	81124e48 <__reset+0xfb104e48>
81124ecc:	54800017 	ldw	r18,0(r10)
81124ed0:	52800104 	addi	r10,r10,4
81124ed4:	0027883a 	mov	r19,zero
81124ed8:	da802215 	stw	r10,136(sp)
81124edc:	003d5006 	br	81124420 <__reset+0xfb104420>
81124ee0:	50800104 	addi	r2,r10,4
81124ee4:	5480000b 	ldhu	r18,0(r10)
81124ee8:	0027883a 	mov	r19,zero
81124eec:	483f7d0e 	bge	r9,zero,81124ce4 <__reset+0xfb104ce4>
81124ef0:	003ddc06 	br	81124664 <__reset+0xfb104664>
81124ef4:	d8c02215 	stw	r3,136(sp)
81124ef8:	0039883a 	mov	fp,zero
81124efc:	003ddb06 	br	8112466c <__reset+0xfb10466c>
81124f00:	02a04534 	movhi	r10,33044
81124f04:	52893704 	addi	r10,r10,9436
81124f08:	da802415 	stw	r10,144(sp)
81124f0c:	003e8306 	br	8112491c <__reset+0xfb10491c>
81124f10:	d8801c17 	ldw	r2,112(sp)
81124f14:	dd002117 	ldw	r20,132(sp)
81124f18:	103eb926 	beq	r2,zero,81124a00 <__reset+0xfb104a00>
81124f1c:	d9002017 	ldw	r4,128(sp)
81124f20:	d9801a04 	addi	r6,sp,104
81124f24:	a00b883a 	mov	r5,r20
81124f28:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124f2c:	003eb406 	br	81124a00 <__reset+0xfb104a00>
81124f30:	80c00043 	ldbu	r3,1(r16)
81124f34:	a5000814 	ori	r20,r20,32
81124f38:	84000044 	addi	r16,r16,1
81124f3c:	18c03fcc 	andi	r3,r3,255
81124f40:	18c0201c 	xori	r3,r3,128
81124f44:	18ffe004 	addi	r3,r3,-128
81124f48:	003bb706 	br	81123e28 <__reset+0xfb103e28>
81124f4c:	a809883a 	mov	r4,r21
81124f50:	d8c02a15 	stw	r3,168(sp)
81124f54:	da002b15 	stw	r8,172(sp)
81124f58:	11155840 	call	81115584 <strlen>
81124f5c:	d8c02a17 	ldw	r3,168(sp)
81124f60:	1027883a 	mov	r19,r2
81124f64:	df001d83 	ldbu	fp,118(sp)
81124f68:	d8c02215 	stw	r3,136(sp)
81124f6c:	0013883a 	mov	r9,zero
81124f70:	da002b17 	ldw	r8,172(sp)
81124f74:	003c4d06 	br	811240ac <__reset+0xfb1040ac>
81124f78:	d9402117 	ldw	r5,132(sp)
81124f7c:	d9002017 	ldw	r4,128(sp)
81124f80:	d9801a04 	addi	r6,sp,104
81124f84:	da402c15 	stw	r9,176(sp)
81124f88:	1123b880 	call	81123b88 <__sprint_r.part.0>
81124f8c:	da402c17 	ldw	r9,176(sp)
81124f90:	103e9a1e 	bne	r2,zero,811249fc <__reset+0xfb1049fc>
81124f94:	d9401b17 	ldw	r5,108(sp)
81124f98:	d8801c17 	ldw	r2,112(sp)
81124f9c:	d811883a 	mov	r8,sp
81124fa0:	29000044 	addi	r4,r5,1
81124fa4:	003e4206 	br	811248b0 <__reset+0xfb1048b0>
81124fa8:	d9401b17 	ldw	r5,108(sp)
81124fac:	01204534 	movhi	r4,33044
81124fb0:	21093b04 	addi	r4,r4,9452
81124fb4:	d9002415 	stw	r4,144(sp)
81124fb8:	29400044 	addi	r5,r5,1
81124fbc:	003c6d06 	br	81124174 <__reset+0xfb104174>
81124fc0:	0039883a 	mov	fp,zero
81124fc4:	00800084 	movi	r2,2
81124fc8:	10803fcc 	andi	r2,r2,255
81124fcc:	01000044 	movi	r4,1
81124fd0:	11001e26 	beq	r2,r4,8112504c <___vfiprintf_internal_r+0x13a8>
81124fd4:	01000084 	movi	r4,2
81124fd8:	11001e1e 	bne	r2,r4,81125054 <___vfiprintf_internal_r+0x13b0>
81124fdc:	1829883a 	mov	r20,r3
81124fe0:	003eea06 	br	81124b8c <__reset+0xfb104b8c>
81124fe4:	a007883a 	mov	r3,r20
81124fe8:	00800044 	movi	r2,1
81124fec:	003ff606 	br	81124fc8 <__reset+0xfb104fc8>
81124ff0:	00800184 	movi	r2,6
81124ff4:	1240012e 	bgeu	r2,r9,81124ffc <___vfiprintf_internal_r+0x1358>
81124ff8:	1013883a 	mov	r9,r2
81124ffc:	4827883a 	mov	r19,r9
81125000:	4825883a 	mov	r18,r9
81125004:	48001516 	blt	r9,zero,8112505c <___vfiprintf_internal_r+0x13b8>
81125008:	05604534 	movhi	r21,33044
8112500c:	d8c02215 	stw	r3,136(sp)
81125010:	ad48aa04 	addi	r21,r21,8872
81125014:	003d1406 	br	81124468 <__reset+0xfb104468>
81125018:	02a04534 	movhi	r10,33044
8112501c:	52893704 	addi	r10,r10,9436
81125020:	da802415 	stw	r10,144(sp)
81125024:	200d883a 	mov	r6,r4
81125028:	003c9106 	br	81124270 <__reset+0xfb104270>
8112502c:	5021883a 	mov	r16,r10
81125030:	0013883a 	mov	r9,zero
81125034:	003b7d06 	br	81123e2c <__reset+0xfb103e2c>
81125038:	4827883a 	mov	r19,r9
8112503c:	df001d83 	ldbu	fp,118(sp)
81125040:	d8c02215 	stw	r3,136(sp)
81125044:	0013883a 	mov	r9,zero
81125048:	003c1806 	br	811240ac <__reset+0xfb1040ac>
8112504c:	1829883a 	mov	r20,r3
81125050:	003d1806 	br	811244b4 <__reset+0xfb1044b4>
81125054:	1829883a 	mov	r20,r3
81125058:	003ccd06 	br	81124390 <__reset+0xfb104390>
8112505c:	0025883a 	mov	r18,zero
81125060:	003fe906 	br	81125008 <__reset+0xfb105008>
81125064:	d8802217 	ldw	r2,136(sp)
81125068:	80c00043 	ldbu	r3,1(r16)
8112506c:	5021883a 	mov	r16,r10
81125070:	12400017 	ldw	r9,0(r2)
81125074:	10800104 	addi	r2,r2,4
81125078:	d8802215 	stw	r2,136(sp)
8112507c:	483faf0e 	bge	r9,zero,81124f3c <__reset+0xfb104f3c>
81125080:	18c03fcc 	andi	r3,r3,255
81125084:	18c0201c 	xori	r3,r3,128
81125088:	027fffc4 	movi	r9,-1
8112508c:	18ffe004 	addi	r3,r3,-128
81125090:	003b6506 	br	81123e28 <__reset+0xfb103e28>
81125094:	d9c01d85 	stb	r7,118(sp)
81125098:	003ca006 	br	8112431c <__reset+0xfb10431c>
8112509c:	d9c01d85 	stb	r7,118(sp)
811250a0:	003cad06 	br	81124358 <__reset+0xfb104358>
811250a4:	d9c01d85 	stb	r7,118(sp)
811250a8:	003d7d06 	br	811246a0 <__reset+0xfb1046a0>
811250ac:	d9c01d85 	stb	r7,118(sp)
811250b0:	003d5f06 	br	81124630 <__reset+0xfb104630>
811250b4:	a080004c 	andi	r2,r20,1
811250b8:	0039883a 	mov	fp,zero
811250bc:	10000526 	beq	r2,zero,811250d4 <___vfiprintf_internal_r+0x1430>
811250c0:	00800c04 	movi	r2,48
811250c4:	d88019c5 	stb	r2,103(sp)
811250c8:	dcc02717 	ldw	r19,156(sp)
811250cc:	dd4019c4 	addi	r21,sp,103
811250d0:	003bf606 	br	811240ac <__reset+0xfb1040ac>
811250d4:	0027883a 	mov	r19,zero
811250d8:	dd401a04 	addi	r21,sp,104
811250dc:	003bf306 	br	811240ac <__reset+0xfb1040ac>
811250e0:	d9c01d85 	stb	r7,118(sp)
811250e4:	003dc806 	br	81124808 <__reset+0xfb104808>
811250e8:	d9c01d85 	stb	r7,118(sp)
811250ec:	003d3a06 	br	811245d8 <__reset+0xfb1045d8>
811250f0:	d9c01d85 	stb	r7,118(sp)
811250f4:	003d2a06 	br	811245a0 <__reset+0xfb1045a0>
811250f8:	d9c01d85 	stb	r7,118(sp)
811250fc:	003cde06 	br	81124478 <__reset+0xfb104478>
81125100:	d9c01d85 	stb	r7,118(sp)
81125104:	003cbc06 	br	811243f8 <__reset+0xfb1043f8>

81125108 <__vfiprintf_internal>:
81125108:	00a04534 	movhi	r2,33044
8112510c:	10928704 	addi	r2,r2,18972
81125110:	300f883a 	mov	r7,r6
81125114:	280d883a 	mov	r6,r5
81125118:	200b883a 	mov	r5,r4
8112511c:	11000017 	ldw	r4,0(r2)
81125120:	1123ca41 	jmpi	81123ca4 <___vfiprintf_internal_r>

81125124 <__sbprintf>:
81125124:	defee204 	addi	sp,sp,-1144
81125128:	de00012e 	bgeu	sp,et,81125130 <__sbprintf+0xc>
8112512c:	003b68fa 	trap	3
81125130:	2880030b 	ldhu	r2,12(r5)
81125134:	2ac01917 	ldw	r11,100(r5)
81125138:	2a80038b 	ldhu	r10,14(r5)
8112513c:	2a400717 	ldw	r9,28(r5)
81125140:	2a000917 	ldw	r8,36(r5)
81125144:	00c10004 	movi	r3,1024
81125148:	dc011a15 	stw	r16,1128(sp)
8112514c:	10bfff4c 	andi	r2,r2,65533
81125150:	2821883a 	mov	r16,r5
81125154:	d8cb883a 	add	r5,sp,r3
81125158:	dc811c15 	stw	r18,1136(sp)
8112515c:	dc411b15 	stw	r17,1132(sp)
81125160:	dfc11d15 	stw	ra,1140(sp)
81125164:	2025883a 	mov	r18,r4
81125168:	d881030d 	sth	r2,1036(sp)
8112516c:	dac11915 	stw	r11,1124(sp)
81125170:	da81038d 	sth	r10,1038(sp)
81125174:	da410715 	stw	r9,1052(sp)
81125178:	da010915 	stw	r8,1060(sp)
8112517c:	dec10015 	stw	sp,1024(sp)
81125180:	dec10415 	stw	sp,1040(sp)
81125184:	d8c10215 	stw	r3,1032(sp)
81125188:	d8c10515 	stw	r3,1044(sp)
8112518c:	d8010615 	stw	zero,1048(sp)
81125190:	1123ca40 	call	81123ca4 <___vfiprintf_internal_r>
81125194:	1023883a 	mov	r17,r2
81125198:	10000416 	blt	r2,zero,811251ac <__sbprintf+0x88>
8112519c:	d9410004 	addi	r5,sp,1024
811251a0:	9009883a 	mov	r4,r18
811251a4:	111d45c0 	call	8111d45c <_fflush_r>
811251a8:	10000d1e 	bne	r2,zero,811251e0 <__sbprintf+0xbc>
811251ac:	d881030b 	ldhu	r2,1036(sp)
811251b0:	1080100c 	andi	r2,r2,64
811251b4:	10000326 	beq	r2,zero,811251c4 <__sbprintf+0xa0>
811251b8:	8080030b 	ldhu	r2,12(r16)
811251bc:	10801014 	ori	r2,r2,64
811251c0:	8080030d 	sth	r2,12(r16)
811251c4:	8805883a 	mov	r2,r17
811251c8:	dfc11d17 	ldw	ra,1140(sp)
811251cc:	dc811c17 	ldw	r18,1136(sp)
811251d0:	dc411b17 	ldw	r17,1132(sp)
811251d4:	dc011a17 	ldw	r16,1128(sp)
811251d8:	dec11e04 	addi	sp,sp,1144
811251dc:	f800283a 	ret
811251e0:	047fffc4 	movi	r17,-1
811251e4:	003ff106 	br	811251ac <__reset+0xfb1051ac>

811251e8 <_calloc_r>:
811251e8:	298b383a 	mul	r5,r5,r6
811251ec:	defffe04 	addi	sp,sp,-8
811251f0:	de00012e 	bgeu	sp,et,811251f8 <_calloc_r+0x10>
811251f4:	003b68fa 	trap	3
811251f8:	dfc00115 	stw	ra,4(sp)
811251fc:	dc000015 	stw	r16,0(sp)
81125200:	111425c0 	call	8111425c <_malloc_r>
81125204:	10002926 	beq	r2,zero,811252ac <_calloc_r+0xc4>
81125208:	11bfff17 	ldw	r6,-4(r2)
8112520c:	1021883a 	mov	r16,r2
81125210:	00bfff04 	movi	r2,-4
81125214:	308c703a 	and	r6,r6,r2
81125218:	00c00904 	movi	r3,36
8112521c:	308d883a 	add	r6,r6,r2
81125220:	19801636 	bltu	r3,r6,8112527c <_calloc_r+0x94>
81125224:	008004c4 	movi	r2,19
81125228:	11800b2e 	bgeu	r2,r6,81125258 <_calloc_r+0x70>
8112522c:	80000015 	stw	zero,0(r16)
81125230:	80000115 	stw	zero,4(r16)
81125234:	008006c4 	movi	r2,27
81125238:	11801a2e 	bgeu	r2,r6,811252a4 <_calloc_r+0xbc>
8112523c:	80000215 	stw	zero,8(r16)
81125240:	80000315 	stw	zero,12(r16)
81125244:	30c0151e 	bne	r6,r3,8112529c <_calloc_r+0xb4>
81125248:	80000415 	stw	zero,16(r16)
8112524c:	80800604 	addi	r2,r16,24
81125250:	80000515 	stw	zero,20(r16)
81125254:	00000106 	br	8112525c <_calloc_r+0x74>
81125258:	8005883a 	mov	r2,r16
8112525c:	10000015 	stw	zero,0(r2)
81125260:	10000115 	stw	zero,4(r2)
81125264:	10000215 	stw	zero,8(r2)
81125268:	8005883a 	mov	r2,r16
8112526c:	dfc00117 	ldw	ra,4(sp)
81125270:	dc000017 	ldw	r16,0(sp)
81125274:	dec00204 	addi	sp,sp,8
81125278:	f800283a 	ret
8112527c:	000b883a 	mov	r5,zero
81125280:	8009883a 	mov	r4,r16
81125284:	1114bc00 	call	81114bc0 <memset>
81125288:	8005883a 	mov	r2,r16
8112528c:	dfc00117 	ldw	ra,4(sp)
81125290:	dc000017 	ldw	r16,0(sp)
81125294:	dec00204 	addi	sp,sp,8
81125298:	f800283a 	ret
8112529c:	80800404 	addi	r2,r16,16
811252a0:	003fee06 	br	8112525c <__reset+0xfb10525c>
811252a4:	80800204 	addi	r2,r16,8
811252a8:	003fec06 	br	8112525c <__reset+0xfb10525c>
811252ac:	0005883a 	mov	r2,zero
811252b0:	003fee06 	br	8112526c <__reset+0xfb10526c>

811252b4 <_fclose_r>:
811252b4:	28003b26 	beq	r5,zero,811253a4 <_fclose_r+0xf0>
811252b8:	defffc04 	addi	sp,sp,-16
811252bc:	de00012e 	bgeu	sp,et,811252c4 <_fclose_r+0x10>
811252c0:	003b68fa 	trap	3
811252c4:	dc400115 	stw	r17,4(sp)
811252c8:	dc000015 	stw	r16,0(sp)
811252cc:	dfc00315 	stw	ra,12(sp)
811252d0:	dc800215 	stw	r18,8(sp)
811252d4:	2023883a 	mov	r17,r4
811252d8:	2821883a 	mov	r16,r5
811252dc:	20000226 	beq	r4,zero,811252e8 <_fclose_r+0x34>
811252e0:	20800e17 	ldw	r2,56(r4)
811252e4:	10002726 	beq	r2,zero,81125384 <_fclose_r+0xd0>
811252e8:	8080030f 	ldh	r2,12(r16)
811252ec:	1000071e 	bne	r2,zero,8112530c <_fclose_r+0x58>
811252f0:	0005883a 	mov	r2,zero
811252f4:	dfc00317 	ldw	ra,12(sp)
811252f8:	dc800217 	ldw	r18,8(sp)
811252fc:	dc400117 	ldw	r17,4(sp)
81125300:	dc000017 	ldw	r16,0(sp)
81125304:	dec00404 	addi	sp,sp,16
81125308:	f800283a 	ret
8112530c:	800b883a 	mov	r5,r16
81125310:	8809883a 	mov	r4,r17
81125314:	111d2380 	call	8111d238 <__sflush_r>
81125318:	1025883a 	mov	r18,r2
8112531c:	80800b17 	ldw	r2,44(r16)
81125320:	10000426 	beq	r2,zero,81125334 <_fclose_r+0x80>
81125324:	81400717 	ldw	r5,28(r16)
81125328:	8809883a 	mov	r4,r17
8112532c:	103ee83a 	callr	r2
81125330:	10001616 	blt	r2,zero,8112538c <_fclose_r+0xd8>
81125334:	8080030b 	ldhu	r2,12(r16)
81125338:	1080200c 	andi	r2,r2,128
8112533c:	1000151e 	bne	r2,zero,81125394 <_fclose_r+0xe0>
81125340:	81400c17 	ldw	r5,48(r16)
81125344:	28000526 	beq	r5,zero,8112535c <_fclose_r+0xa8>
81125348:	80801004 	addi	r2,r16,64
8112534c:	28800226 	beq	r5,r2,81125358 <_fclose_r+0xa4>
81125350:	8809883a 	mov	r4,r17
81125354:	111dcf00 	call	8111dcf0 <_free_r>
81125358:	80000c15 	stw	zero,48(r16)
8112535c:	81401117 	ldw	r5,68(r16)
81125360:	28000326 	beq	r5,zero,81125370 <_fclose_r+0xbc>
81125364:	8809883a 	mov	r4,r17
81125368:	111dcf00 	call	8111dcf0 <_free_r>
8112536c:	80001115 	stw	zero,68(r16)
81125370:	111d8680 	call	8111d868 <__sfp_lock_acquire>
81125374:	8000030d 	sth	zero,12(r16)
81125378:	111d86c0 	call	8111d86c <__sfp_lock_release>
8112537c:	9005883a 	mov	r2,r18
81125380:	003fdc06 	br	811252f4 <__reset+0xfb1052f4>
81125384:	111d8580 	call	8111d858 <__sinit>
81125388:	003fd706 	br	811252e8 <__reset+0xfb1052e8>
8112538c:	04bfffc4 	movi	r18,-1
81125390:	003fe806 	br	81125334 <__reset+0xfb105334>
81125394:	81400417 	ldw	r5,16(r16)
81125398:	8809883a 	mov	r4,r17
8112539c:	111dcf00 	call	8111dcf0 <_free_r>
811253a0:	003fe706 	br	81125340 <__reset+0xfb105340>
811253a4:	0005883a 	mov	r2,zero
811253a8:	f800283a 	ret

811253ac <fclose>:
811253ac:	00a04534 	movhi	r2,33044
811253b0:	10928704 	addi	r2,r2,18972
811253b4:	200b883a 	mov	r5,r4
811253b8:	11000017 	ldw	r4,0(r2)
811253bc:	11252b41 	jmpi	811252b4 <_fclose_r>

811253c0 <__fputwc>:
811253c0:	defff804 	addi	sp,sp,-32
811253c4:	de00012e 	bgeu	sp,et,811253cc <__fputwc+0xc>
811253c8:	003b68fa 	trap	3
811253cc:	dcc00415 	stw	r19,16(sp)
811253d0:	dc800315 	stw	r18,12(sp)
811253d4:	dc000115 	stw	r16,4(sp)
811253d8:	dfc00715 	stw	ra,28(sp)
811253dc:	dd400615 	stw	r21,24(sp)
811253e0:	dd000515 	stw	r20,20(sp)
811253e4:	dc400215 	stw	r17,8(sp)
811253e8:	2027883a 	mov	r19,r4
811253ec:	2825883a 	mov	r18,r5
811253f0:	3021883a 	mov	r16,r6
811253f4:	111e7800 	call	8111e780 <__locale_mb_cur_max>
811253f8:	00c00044 	movi	r3,1
811253fc:	10c03e26 	beq	r2,r3,811254f8 <__fputwc+0x138>
81125400:	81c01704 	addi	r7,r16,92
81125404:	900d883a 	mov	r6,r18
81125408:	d80b883a 	mov	r5,sp
8112540c:	9809883a 	mov	r4,r19
81125410:	11262440 	call	81126244 <_wcrtomb_r>
81125414:	1029883a 	mov	r20,r2
81125418:	00bfffc4 	movi	r2,-1
8112541c:	a0802026 	beq	r20,r2,811254a0 <__fputwc+0xe0>
81125420:	d9400003 	ldbu	r5,0(sp)
81125424:	a0001c26 	beq	r20,zero,81125498 <__fputwc+0xd8>
81125428:	0023883a 	mov	r17,zero
8112542c:	05400284 	movi	r21,10
81125430:	00000906 	br	81125458 <__fputwc+0x98>
81125434:	80800017 	ldw	r2,0(r16)
81125438:	11400005 	stb	r5,0(r2)
8112543c:	80c00017 	ldw	r3,0(r16)
81125440:	18c00044 	addi	r3,r3,1
81125444:	80c00015 	stw	r3,0(r16)
81125448:	8c400044 	addi	r17,r17,1
8112544c:	dc45883a 	add	r2,sp,r17
81125450:	8d00112e 	bgeu	r17,r20,81125498 <__fputwc+0xd8>
81125454:	11400003 	ldbu	r5,0(r2)
81125458:	80c00217 	ldw	r3,8(r16)
8112545c:	18ffffc4 	addi	r3,r3,-1
81125460:	80c00215 	stw	r3,8(r16)
81125464:	183ff30e 	bge	r3,zero,81125434 <__reset+0xfb105434>
81125468:	80800617 	ldw	r2,24(r16)
8112546c:	18801916 	blt	r3,r2,811254d4 <__fputwc+0x114>
81125470:	80800017 	ldw	r2,0(r16)
81125474:	11400005 	stb	r5,0(r2)
81125478:	80800017 	ldw	r2,0(r16)
8112547c:	10c00003 	ldbu	r3,0(r2)
81125480:	10800044 	addi	r2,r2,1
81125484:	1d402326 	beq	r3,r21,81125514 <__fputwc+0x154>
81125488:	80800015 	stw	r2,0(r16)
8112548c:	8c400044 	addi	r17,r17,1
81125490:	dc45883a 	add	r2,sp,r17
81125494:	8d3fef36 	bltu	r17,r20,81125454 <__reset+0xfb105454>
81125498:	9005883a 	mov	r2,r18
8112549c:	00000406 	br	811254b0 <__fputwc+0xf0>
811254a0:	80c0030b 	ldhu	r3,12(r16)
811254a4:	a005883a 	mov	r2,r20
811254a8:	18c01014 	ori	r3,r3,64
811254ac:	80c0030d 	sth	r3,12(r16)
811254b0:	dfc00717 	ldw	ra,28(sp)
811254b4:	dd400617 	ldw	r21,24(sp)
811254b8:	dd000517 	ldw	r20,20(sp)
811254bc:	dcc00417 	ldw	r19,16(sp)
811254c0:	dc800317 	ldw	r18,12(sp)
811254c4:	dc400217 	ldw	r17,8(sp)
811254c8:	dc000117 	ldw	r16,4(sp)
811254cc:	dec00804 	addi	sp,sp,32
811254d0:	f800283a 	ret
811254d4:	800d883a 	mov	r6,r16
811254d8:	29403fcc 	andi	r5,r5,255
811254dc:	9809883a 	mov	r4,r19
811254e0:	111b6200 	call	8111b620 <__swbuf_r>
811254e4:	10bfffe0 	cmpeqi	r2,r2,-1
811254e8:	10803fcc 	andi	r2,r2,255
811254ec:	103fd626 	beq	r2,zero,81125448 <__reset+0xfb105448>
811254f0:	00bfffc4 	movi	r2,-1
811254f4:	003fee06 	br	811254b0 <__reset+0xfb1054b0>
811254f8:	90ffffc4 	addi	r3,r18,-1
811254fc:	01003f84 	movi	r4,254
81125500:	20ffbf36 	bltu	r4,r3,81125400 <__reset+0xfb105400>
81125504:	900b883a 	mov	r5,r18
81125508:	dc800005 	stb	r18,0(sp)
8112550c:	1029883a 	mov	r20,r2
81125510:	003fc506 	br	81125428 <__reset+0xfb105428>
81125514:	800d883a 	mov	r6,r16
81125518:	a80b883a 	mov	r5,r21
8112551c:	9809883a 	mov	r4,r19
81125520:	111b6200 	call	8111b620 <__swbuf_r>
81125524:	10bfffe0 	cmpeqi	r2,r2,-1
81125528:	003fef06 	br	811254e8 <__reset+0xfb1054e8>

8112552c <_fputwc_r>:
8112552c:	3080030b 	ldhu	r2,12(r6)
81125530:	10c8000c 	andi	r3,r2,8192
81125534:	1800051e 	bne	r3,zero,8112554c <_fputwc_r+0x20>
81125538:	30c01917 	ldw	r3,100(r6)
8112553c:	10880014 	ori	r2,r2,8192
81125540:	3080030d 	sth	r2,12(r6)
81125544:	18880014 	ori	r2,r3,8192
81125548:	30801915 	stw	r2,100(r6)
8112554c:	11253c01 	jmpi	811253c0 <__fputwc>

81125550 <fputwc>:
81125550:	00a04534 	movhi	r2,33044
81125554:	defffc04 	addi	sp,sp,-16
81125558:	10928704 	addi	r2,r2,18972
8112555c:	de00012e 	bgeu	sp,et,81125564 <fputwc+0x14>
81125560:	003b68fa 	trap	3
81125564:	dc000115 	stw	r16,4(sp)
81125568:	14000017 	ldw	r16,0(r2)
8112556c:	dc400215 	stw	r17,8(sp)
81125570:	dfc00315 	stw	ra,12(sp)
81125574:	2023883a 	mov	r17,r4
81125578:	80000226 	beq	r16,zero,81125584 <fputwc+0x34>
8112557c:	80800e17 	ldw	r2,56(r16)
81125580:	10001026 	beq	r2,zero,811255c4 <fputwc+0x74>
81125584:	2880030b 	ldhu	r2,12(r5)
81125588:	10c8000c 	andi	r3,r2,8192
8112558c:	1800051e 	bne	r3,zero,811255a4 <fputwc+0x54>
81125590:	28c01917 	ldw	r3,100(r5)
81125594:	10880014 	ori	r2,r2,8192
81125598:	2880030d 	sth	r2,12(r5)
8112559c:	18880014 	ori	r2,r3,8192
811255a0:	28801915 	stw	r2,100(r5)
811255a4:	280d883a 	mov	r6,r5
811255a8:	8009883a 	mov	r4,r16
811255ac:	880b883a 	mov	r5,r17
811255b0:	dfc00317 	ldw	ra,12(sp)
811255b4:	dc400217 	ldw	r17,8(sp)
811255b8:	dc000117 	ldw	r16,4(sp)
811255bc:	dec00404 	addi	sp,sp,16
811255c0:	11253c01 	jmpi	811253c0 <__fputwc>
811255c4:	8009883a 	mov	r4,r16
811255c8:	d9400015 	stw	r5,0(sp)
811255cc:	111d8580 	call	8111d858 <__sinit>
811255d0:	d9400017 	ldw	r5,0(sp)
811255d4:	003feb06 	br	81125584 <__reset+0xfb105584>

811255d8 <rshift>:
811255d8:	2807d17a 	srai	r3,r5,5
811255dc:	20800417 	ldw	r2,16(r4)
811255e0:	22000504 	addi	r8,r4,20
811255e4:	1880250e 	bge	r3,r2,8112567c <rshift+0xa4>
811255e8:	1085883a 	add	r2,r2,r2
811255ec:	18c7883a 	add	r3,r3,r3
811255f0:	1085883a 	add	r2,r2,r2
811255f4:	18c7883a 	add	r3,r3,r3
811255f8:	294007cc 	andi	r5,r5,31
811255fc:	4085883a 	add	r2,r8,r2
81125600:	40c7883a 	add	r3,r8,r3
81125604:	28002026 	beq	r5,zero,81125688 <rshift+0xb0>
81125608:	19800017 	ldw	r6,0(r3)
8112560c:	02c00804 	movi	r11,32
81125610:	19c00104 	addi	r7,r3,4
81125614:	5957c83a 	sub	r11,r11,r5
81125618:	314cd83a 	srl	r6,r6,r5
8112561c:	38802c2e 	bgeu	r7,r2,811256d0 <rshift+0xf8>
81125620:	4015883a 	mov	r10,r8
81125624:	3a400017 	ldw	r9,0(r7)
81125628:	52800104 	addi	r10,r10,4
8112562c:	39c00104 	addi	r7,r7,4
81125630:	4ad2983a 	sll	r9,r9,r11
81125634:	498cb03a 	or	r6,r9,r6
81125638:	51bfff15 	stw	r6,-4(r10)
8112563c:	39bfff17 	ldw	r6,-4(r7)
81125640:	314cd83a 	srl	r6,r6,r5
81125644:	38bff736 	bltu	r7,r2,81125624 <__reset+0xfb105624>
81125648:	10c7c83a 	sub	r3,r2,r3
8112564c:	18fffec4 	addi	r3,r3,-5
81125650:	1806d0ba 	srli	r3,r3,2
81125654:	18c00044 	addi	r3,r3,1
81125658:	18c7883a 	add	r3,r3,r3
8112565c:	18c7883a 	add	r3,r3,r3
81125660:	40c7883a 	add	r3,r8,r3
81125664:	19800015 	stw	r6,0(r3)
81125668:	30000126 	beq	r6,zero,81125670 <rshift+0x98>
8112566c:	18c00104 	addi	r3,r3,4
81125670:	1a05c83a 	sub	r2,r3,r8
81125674:	1005d0ba 	srai	r2,r2,2
81125678:	00001206 	br	811256c4 <rshift+0xec>
8112567c:	20000415 	stw	zero,16(r4)
81125680:	20000515 	stw	zero,20(r4)
81125684:	f800283a 	ret
81125688:	18bffc2e 	bgeu	r3,r2,8112567c <__reset+0xfb10567c>
8112568c:	180d883a 	mov	r6,r3
81125690:	400b883a 	mov	r5,r8
81125694:	31c00017 	ldw	r7,0(r6)
81125698:	29400104 	addi	r5,r5,4
8112569c:	31800104 	addi	r6,r6,4
811256a0:	29ffff15 	stw	r7,-4(r5)
811256a4:	30bffb36 	bltu	r6,r2,81125694 <__reset+0xfb105694>
811256a8:	00c6303a 	nor	r3,zero,r3
811256ac:	1885883a 	add	r2,r3,r2
811256b0:	1004d0ba 	srli	r2,r2,2
811256b4:	10800044 	addi	r2,r2,1
811256b8:	1085883a 	add	r2,r2,r2
811256bc:	1085883a 	add	r2,r2,r2
811256c0:	1005d0ba 	srai	r2,r2,2
811256c4:	20800415 	stw	r2,16(r4)
811256c8:	103fed26 	beq	r2,zero,81125680 <__reset+0xfb105680>
811256cc:	f800283a 	ret
811256d0:	4007883a 	mov	r3,r8
811256d4:	003fe306 	br	81125664 <__reset+0xfb105664>

811256d8 <__gethex>:
811256d8:	deffeb04 	addi	sp,sp,-84
811256dc:	de00012e 	bgeu	sp,et,811256e4 <__gethex+0xc>
811256e0:	003b68fa 	trap	3
811256e4:	dfc01415 	stw	ra,80(sp)
811256e8:	dd801115 	stw	r22,68(sp)
811256ec:	dcc00e15 	stw	r19,56(sp)
811256f0:	dc800d15 	stw	r18,52(sp)
811256f4:	2827883a 	mov	r19,r5
811256f8:	d9000115 	stw	r4,4(sp)
811256fc:	d9800015 	stw	r6,0(sp)
81125700:	d9c00415 	stw	r7,16(sp)
81125704:	df001315 	stw	fp,76(sp)
81125708:	ddc01215 	stw	r23,72(sp)
8112570c:	dd401015 	stw	r21,64(sp)
81125710:	dd000f15 	stw	r20,60(sp)
81125714:	dc400c15 	stw	r17,48(sp)
81125718:	dc000b15 	stw	r16,44(sp)
8112571c:	111e7a40 	call	8111e7a4 <_localeconv_r>
81125720:	14800017 	ldw	r18,0(r2)
81125724:	9009883a 	mov	r4,r18
81125728:	11155840 	call	81115584 <strlen>
8112572c:	98c00017 	ldw	r3,0(r19)
81125730:	102d883a 	mov	r22,r2
81125734:	9085883a 	add	r2,r18,r2
81125738:	10bfffc3 	ldbu	r2,-1(r2)
8112573c:	19000083 	ldbu	r4,2(r3)
81125740:	d8800305 	stb	r2,12(sp)
81125744:	00800c04 	movi	r2,48
81125748:	2081521e 	bne	r4,r2,81125c94 <__gethex+0x5bc>
8112574c:	017fff84 	movi	r5,-2
81125750:	188000c4 	addi	r2,r3,3
81125754:	28cbc83a 	sub	r5,r5,r3
81125758:	200d883a 	mov	r6,r4
8112575c:	28a3883a 	add	r17,r5,r2
81125760:	102b883a 	mov	r21,r2
81125764:	10800044 	addi	r2,r2,1
81125768:	113fffc3 	ldbu	r4,-1(r2)
8112576c:	21bffb26 	beq	r4,r6,8112575c <__reset+0xfb10575c>
81125770:	05204534 	movhi	r20,33044
81125774:	a5093f04 	addi	r20,r20,9468
81125778:	a109883a 	add	r4,r20,r4
8112577c:	20800003 	ldbu	r2,0(r4)
81125780:	10008826 	beq	r2,zero,811259a4 <__gethex+0x2cc>
81125784:	a8800003 	ldbu	r2,0(r21)
81125788:	0015883a 	mov	r10,zero
8112578c:	002f883a 	mov	r23,zero
81125790:	a085883a 	add	r2,r20,r2
81125794:	10800003 	ldbu	r2,0(r2)
81125798:	a821883a 	mov	r16,r21
8112579c:	10000526 	beq	r2,zero,811257b4 <__gethex+0xdc>
811257a0:	84000044 	addi	r16,r16,1
811257a4:	80800003 	ldbu	r2,0(r16)
811257a8:	a085883a 	add	r2,r20,r2
811257ac:	10800003 	ldbu	r2,0(r2)
811257b0:	103ffb1e 	bne	r2,zero,811257a0 <__reset+0xfb1057a0>
811257b4:	b00d883a 	mov	r6,r22
811257b8:	900b883a 	mov	r5,r18
811257bc:	8009883a 	mov	r4,r16
811257c0:	da800a15 	stw	r10,40(sp)
811257c4:	11261740 	call	81126174 <strncmp>
811257c8:	da800a17 	ldw	r10,40(sp)
811257cc:	1000031e 	bne	r2,zero,811257dc <__gethex+0x104>
811257d0:	b8015226 	beq	r23,zero,81125d1c <__gethex+0x644>
811257d4:	80800003 	ldbu	r2,0(r16)
811257d8:	00000206 	br	811257e4 <__gethex+0x10c>
811257dc:	80800003 	ldbu	r2,0(r16)
811257e0:	b8011f26 	beq	r23,zero,81125c60 <__gethex+0x588>
811257e4:	85efc83a 	sub	r23,r16,r23
811257e8:	bdef883a 	add	r23,r23,r23
811257ec:	bdef883a 	add	r23,r23,r23
811257f0:	05efc83a 	sub	r23,zero,r23
811257f4:	10803fcc 	andi	r2,r2,255
811257f8:	01001404 	movi	r4,80
811257fc:	11008626 	beq	r2,r4,81125a18 <__gethex+0x340>
81125800:	01001c04 	movi	r4,112
81125804:	11008426 	beq	r2,r4,81125a18 <__gethex+0x340>
81125808:	8039883a 	mov	fp,r16
8112580c:	9c000015 	stw	r16,0(r19)
81125810:	5000711e 	bne	r10,zero,811259d8 <__gethex+0x300>
81125814:	e545c83a 	sub	r2,fp,r21
81125818:	10bfffc4 	addi	r2,r2,-1
8112581c:	010001c4 	movi	r4,7
81125820:	000b883a 	mov	r5,zero
81125824:	2080030e 	bge	r4,r2,81125834 <__gethex+0x15c>
81125828:	1005d07a 	srai	r2,r2,1
8112582c:	29400044 	addi	r5,r5,1
81125830:	20bffd16 	blt	r4,r2,81125828 <__reset+0xfb105828>
81125834:	d9000117 	ldw	r4,4(sp)
81125838:	111ecc00 	call	8111ecc0 <_Balloc>
8112583c:	10c00504 	addi	r3,r2,20
81125840:	d8c00215 	stw	r3,8(sp)
81125844:	1021883a 	mov	r16,r2
81125848:	af01732e 	bgeu	r21,fp,81125e18 <__gethex+0x740>
8112584c:	dc400303 	ldbu	r17,12(sp)
81125850:	03400044 	movi	r13,1
81125854:	1815883a 	mov	r10,r3
81125858:	0013883a 	mov	r9,zero
8112585c:	0027883a 	mov	r19,zero
81125860:	6d9bc83a 	sub	r13,r13,r22
81125864:	02c00804 	movi	r11,32
81125868:	e0bfffc3 	ldbu	r2,-1(fp)
8112586c:	e3bfffc4 	addi	r14,fp,-1
81125870:	88803026 	beq	r17,r2,81125934 <__gethex+0x25c>
81125874:	9ac04526 	beq	r19,r11,8112598c <__gethex+0x2b4>
81125878:	980b883a 	mov	r5,r19
8112587c:	9cc00104 	addi	r19,r19,4
81125880:	e13fffc3 	ldbu	r4,-1(fp)
81125884:	7039883a 	mov	fp,r14
81125888:	a109883a 	add	r4,r20,r4
8112588c:	20800003 	ldbu	r2,0(r4)
81125890:	108003cc 	andi	r2,r2,15
81125894:	1144983a 	sll	r2,r2,r5
81125898:	4892b03a 	or	r9,r9,r2
8112589c:	af3ff236 	bltu	r21,fp,81125868 <__reset+0xfb105868>
811258a0:	d8c00217 	ldw	r3,8(sp)
811258a4:	50800104 	addi	r2,r10,4
811258a8:	52400015 	stw	r9,0(r10)
811258ac:	10c5c83a 	sub	r2,r2,r3
811258b0:	1005d0ba 	srai	r2,r2,2
811258b4:	4809883a 	mov	r4,r9
811258b8:	80800415 	stw	r2,16(r16)
811258bc:	1022917a 	slli	r17,r2,5
811258c0:	111efcc0 	call	8111efcc <__hi0bits>
811258c4:	d8c00017 	ldw	r3,0(sp)
811258c8:	8885c83a 	sub	r2,r17,r2
811258cc:	1c800017 	ldw	r18,0(r3)
811258d0:	9080c716 	blt	r18,r2,81125bf0 <__gethex+0x518>
811258d4:	1480e416 	blt	r2,r18,81125c68 <__gethex+0x590>
811258d8:	0027883a 	mov	r19,zero
811258dc:	d8c00017 	ldw	r3,0(sp)
811258e0:	18800217 	ldw	r2,8(r3)
811258e4:	15c08d16 	blt	r2,r23,81125b1c <__gethex+0x444>
811258e8:	d8c00017 	ldw	r3,0(sp)
811258ec:	18800117 	ldw	r2,4(r3)
811258f0:	b880aa0e 	bge	r23,r2,81125b9c <__gethex+0x4c4>
811258f4:	15efc83a 	sub	r23,r2,r23
811258f8:	bc80ed16 	blt	r23,r18,81125cb0 <__gethex+0x5d8>
811258fc:	18c00317 	ldw	r3,12(r3)
81125900:	01000084 	movi	r4,2
81125904:	19014926 	beq	r3,r4,81125e2c <__gethex+0x754>
81125908:	010000c4 	movi	r4,3
8112590c:	19012e26 	beq	r3,r4,81125dc8 <__gethex+0x6f0>
81125910:	01000044 	movi	r4,1
81125914:	19014826 	beq	r3,r4,81125e38 <__gethex+0x760>
81125918:	d9000117 	ldw	r4,4(sp)
8112591c:	800b883a 	mov	r5,r16
81125920:	111ed700 	call	8111ed70 <_Bfree>
81125924:	d8801517 	ldw	r2,84(sp)
81125928:	10000015 	stw	zero,0(r2)
8112592c:	00801404 	movi	r2,80
81125930:	00002b06 	br	811259e0 <__gethex+0x308>
81125934:	735f883a 	add	r15,r14,r13
81125938:	7d7fce36 	bltu	r15,r21,81125874 <__reset+0xfb105874>
8112593c:	7809883a 	mov	r4,r15
81125940:	b00d883a 	mov	r6,r22
81125944:	900b883a 	mov	r5,r18
81125948:	da400515 	stw	r9,20(sp)
8112594c:	da800a15 	stw	r10,40(sp)
81125950:	dac00915 	stw	r11,36(sp)
81125954:	db400815 	stw	r13,32(sp)
81125958:	db800615 	stw	r14,24(sp)
8112595c:	dbc00715 	stw	r15,28(sp)
81125960:	11261740 	call	81126174 <strncmp>
81125964:	da400517 	ldw	r9,20(sp)
81125968:	da800a17 	ldw	r10,40(sp)
8112596c:	dac00917 	ldw	r11,36(sp)
81125970:	db400817 	ldw	r13,32(sp)
81125974:	db800617 	ldw	r14,24(sp)
81125978:	dbc00717 	ldw	r15,28(sp)
8112597c:	103fbd1e 	bne	r2,zero,81125874 <__reset+0xfb105874>
81125980:	7839883a 	mov	fp,r15
81125984:	af3fb836 	bltu	r21,fp,81125868 <__reset+0xfb105868>
81125988:	003fc506 	br	811258a0 <__reset+0xfb1058a0>
8112598c:	04c00104 	movi	r19,4
81125990:	52400015 	stw	r9,0(r10)
81125994:	000b883a 	mov	r5,zero
81125998:	54d5883a 	add	r10,r10,r19
8112599c:	0013883a 	mov	r9,zero
811259a0:	003fb706 	br	81125880 <__reset+0xfb105880>
811259a4:	b00d883a 	mov	r6,r22
811259a8:	900b883a 	mov	r5,r18
811259ac:	a809883a 	mov	r4,r21
811259b0:	11261740 	call	81126174 <strncmp>
811259b4:	10006426 	beq	r2,zero,81125b48 <__gethex+0x470>
811259b8:	a8800003 	ldbu	r2,0(r21)
811259bc:	a821883a 	mov	r16,r21
811259c0:	10803fcc 	andi	r2,r2,255
811259c4:	01001404 	movi	r4,80
811259c8:	11001126 	beq	r2,r4,81125a10 <__gethex+0x338>
811259cc:	01001c04 	movi	r4,112
811259d0:	11000f26 	beq	r2,r4,81125a10 <__gethex+0x338>
811259d4:	9c000015 	stw	r16,0(r19)
811259d8:	8800831e 	bne	r17,zero,81125be8 <__gethex+0x510>
811259dc:	00800184 	movi	r2,6
811259e0:	dfc01417 	ldw	ra,80(sp)
811259e4:	df001317 	ldw	fp,76(sp)
811259e8:	ddc01217 	ldw	r23,72(sp)
811259ec:	dd801117 	ldw	r22,68(sp)
811259f0:	dd401017 	ldw	r21,64(sp)
811259f4:	dd000f17 	ldw	r20,60(sp)
811259f8:	dcc00e17 	ldw	r19,56(sp)
811259fc:	dc800d17 	ldw	r18,52(sp)
81125a00:	dc400c17 	ldw	r17,48(sp)
81125a04:	dc000b17 	ldw	r16,44(sp)
81125a08:	dec01504 	addi	sp,sp,84
81125a0c:	f800283a 	ret
81125a10:	002f883a 	mov	r23,zero
81125a14:	02800044 	movi	r10,1
81125a18:	80800043 	ldbu	r2,1(r16)
81125a1c:	01400ac4 	movi	r5,43
81125a20:	11003fcc 	andi	r4,r2,255
81125a24:	21406e26 	beq	r4,r5,81125be0 <__gethex+0x508>
81125a28:	01400b44 	movi	r5,45
81125a2c:	21404226 	beq	r4,r5,81125b38 <__gethex+0x460>
81125a30:	81400044 	addi	r5,r16,1
81125a34:	000d883a 	mov	r6,zero
81125a38:	10803fcc 	andi	r2,r2,255
81125a3c:	a085883a 	add	r2,r20,r2
81125a40:	11000003 	ldbu	r4,0(r2)
81125a44:	03000604 	movi	r12,24
81125a48:	20bfffc4 	addi	r2,r4,-1
81125a4c:	10803fcc 	andi	r2,r2,255
81125a50:	60bf6d36 	bltu	r12,r2,81125808 <__reset+0xfb105808>
81125a54:	2ac00043 	ldbu	r11,1(r5)
81125a58:	20803fcc 	andi	r2,r4,255
81125a5c:	01204534 	movhi	r4,33044
81125a60:	21093f04 	addi	r4,r4,9468
81125a64:	22c9883a 	add	r4,r4,r11
81125a68:	23400003 	ldbu	r13,0(r4)
81125a6c:	10bffc04 	addi	r2,r2,-16
81125a70:	29400044 	addi	r5,r5,1
81125a74:	693fffc4 	addi	r4,r13,-1
81125a78:	21003fcc 	andi	r4,r4,255
81125a7c:	6b403fcc 	andi	r13,r13,255
81125a80:	61000b36 	bltu	r12,r4,81125ab0 <__gethex+0x3d8>
81125a84:	29400044 	addi	r5,r5,1
81125a88:	29000003 	ldbu	r4,0(r5)
81125a8c:	108002a4 	muli	r2,r2,10
81125a90:	a109883a 	add	r4,r20,r4
81125a94:	22c00003 	ldbu	r11,0(r4)
81125a98:	1345883a 	add	r2,r2,r13
81125a9c:	10bffc04 	addi	r2,r2,-16
81125aa0:	593fffc4 	addi	r4,r11,-1
81125aa4:	21003fcc 	andi	r4,r4,255
81125aa8:	5b403fcc 	andi	r13,r11,255
81125aac:	613ff52e 	bgeu	r12,r4,81125a84 <__reset+0xfb105a84>
81125ab0:	30000126 	beq	r6,zero,81125ab8 <__gethex+0x3e0>
81125ab4:	0085c83a 	sub	r2,zero,r2
81125ab8:	8039883a 	mov	fp,r16
81125abc:	b8af883a 	add	r23,r23,r2
81125ac0:	2821883a 	mov	r16,r5
81125ac4:	003f5106 	br	8112580c <__reset+0xfb10580c>
81125ac8:	80800217 	ldw	r2,8(r16)
81125acc:	e080f00e 	bge	fp,r2,81125e90 <__gethex+0x7b8>
81125ad0:	e007883a 	mov	r3,fp
81125ad4:	18800144 	addi	r2,r3,5
81125ad8:	1085883a 	add	r2,r2,r2
81125adc:	18c00044 	addi	r3,r3,1
81125ae0:	1085883a 	add	r2,r2,r2
81125ae4:	8085883a 	add	r2,r16,r2
81125ae8:	80c00415 	stw	r3,16(r16)
81125aec:	01000044 	movi	r4,1
81125af0:	11000015 	stw	r4,0(r2)
81125af4:	00800084 	movi	r2,2
81125af8:	8880d826 	beq	r17,r2,81125e5c <__gethex+0x784>
81125afc:	e0c0ac0e 	bge	fp,r3,81125db0 <__gethex+0x6d8>
81125b00:	01400044 	movi	r5,1
81125b04:	8009883a 	mov	r4,r16
81125b08:	11255d80 	call	811255d8 <rshift>
81125b0c:	d8c00017 	ldw	r3,0(sp)
81125b10:	bdc00044 	addi	r23,r23,1
81125b14:	18800217 	ldw	r2,8(r3)
81125b18:	15c0a70e 	bge	r2,r23,81125db8 <__gethex+0x6e0>
81125b1c:	d9000117 	ldw	r4,4(sp)
81125b20:	800b883a 	mov	r5,r16
81125b24:	111ed700 	call	8111ed70 <_Bfree>
81125b28:	d9001517 	ldw	r4,84(sp)
81125b2c:	008028c4 	movi	r2,163
81125b30:	20000015 	stw	zero,0(r4)
81125b34:	003faa06 	br	811259e0 <__reset+0xfb1059e0>
81125b38:	01800044 	movi	r6,1
81125b3c:	80800083 	ldbu	r2,2(r16)
81125b40:	81400084 	addi	r5,r16,2
81125b44:	003fbc06 	br	81125a38 <__reset+0xfb105a38>
81125b48:	ada1883a 	add	r16,r21,r22
81125b4c:	81000003 	ldbu	r4,0(r16)
81125b50:	21403fcc 	andi	r5,r4,255
81125b54:	a145883a 	add	r2,r20,r5
81125b58:	10800003 	ldbu	r2,0(r2)
81125b5c:	11803fcc 	andi	r6,r2,255
81125b60:	30004f26 	beq	r6,zero,81125ca0 <__gethex+0x5c8>
81125b64:	00c00c04 	movi	r3,48
81125b68:	802b883a 	mov	r21,r16
81125b6c:	28c0061e 	bne	r5,r3,81125b88 <__gethex+0x4b0>
81125b70:	2809883a 	mov	r4,r5
81125b74:	ad400044 	addi	r21,r21,1
81125b78:	a8800003 	ldbu	r2,0(r21)
81125b7c:	113ffd26 	beq	r2,r4,81125b74 <__reset+0xfb105b74>
81125b80:	a085883a 	add	r2,r20,r2
81125b84:	10800003 	ldbu	r2,0(r2)
81125b88:	10803fcc 	andi	r2,r2,255
81125b8c:	1015003a 	cmpeq	r10,r2,zero
81125b90:	802f883a 	mov	r23,r16
81125b94:	04400044 	movi	r17,1
81125b98:	003eff06 	br	81125798 <__reset+0xfb105798>
81125b9c:	04400044 	movi	r17,1
81125ba0:	98000926 	beq	r19,zero,81125bc8 <__gethex+0x4f0>
81125ba4:	d8c00017 	ldw	r3,0(sp)
81125ba8:	18800317 	ldw	r2,12(r3)
81125bac:	00c00084 	movi	r3,2
81125bb0:	10c06826 	beq	r2,r3,81125d54 <__gethex+0x67c>
81125bb4:	00c000c4 	movi	r3,3
81125bb8:	10c06a26 	beq	r2,r3,81125d64 <__gethex+0x68c>
81125bbc:	00c00044 	movi	r3,1
81125bc0:	10c08d26 	beq	r2,r3,81125df8 <__gethex+0x720>
81125bc4:	8c400414 	ori	r17,r17,16
81125bc8:	d9001517 	ldw	r4,84(sp)
81125bcc:	d8c00417 	ldw	r3,16(sp)
81125bd0:	8805883a 	mov	r2,r17
81125bd4:	24000015 	stw	r16,0(r4)
81125bd8:	1dc00015 	stw	r23,0(r3)
81125bdc:	003f8006 	br	811259e0 <__reset+0xfb1059e0>
81125be0:	000d883a 	mov	r6,zero
81125be4:	003fd506 	br	81125b3c <__reset+0xfb105b3c>
81125be8:	0005883a 	mov	r2,zero
81125bec:	003f7c06 	br	811259e0 <__reset+0xfb1059e0>
81125bf0:	14a3c83a 	sub	r17,r2,r18
81125bf4:	880b883a 	mov	r5,r17
81125bf8:	8009883a 	mov	r4,r16
81125bfc:	111fc900 	call	8111fc90 <__any_on>
81125c00:	10002926 	beq	r2,zero,81125ca8 <__gethex+0x5d0>
81125c04:	897fffc4 	addi	r5,r17,-1
81125c08:	2807d17a 	srai	r3,r5,5
81125c0c:	d8800217 	ldw	r2,8(sp)
81125c10:	290007cc 	andi	r4,r5,31
81125c14:	18c7883a 	add	r3,r3,r3
81125c18:	18c7883a 	add	r3,r3,r3
81125c1c:	04c00044 	movi	r19,1
81125c20:	10c7883a 	add	r3,r2,r3
81125c24:	9908983a 	sll	r4,r19,r4
81125c28:	18c00017 	ldw	r3,0(r3)
81125c2c:	20c6703a 	and	r3,r4,r3
81125c30:	18000626 	beq	r3,zero,81125c4c <__gethex+0x574>
81125c34:	99407b0e 	bge	r19,r5,81125e24 <__gethex+0x74c>
81125c38:	897fff84 	addi	r5,r17,-2
81125c3c:	8009883a 	mov	r4,r16
81125c40:	111fc900 	call	8111fc90 <__any_on>
81125c44:	10007726 	beq	r2,zero,81125e24 <__gethex+0x74c>
81125c48:	04c000c4 	movi	r19,3
81125c4c:	880b883a 	mov	r5,r17
81125c50:	8009883a 	mov	r4,r16
81125c54:	11255d80 	call	811255d8 <rshift>
81125c58:	bc6f883a 	add	r23,r23,r17
81125c5c:	003f1f06 	br	811258dc <__reset+0xfb1058dc>
81125c60:	002f883a 	mov	r23,zero
81125c64:	003ee306 	br	811257f4 <__reset+0xfb1057f4>
81125c68:	d9000117 	ldw	r4,4(sp)
81125c6c:	90a3c83a 	sub	r17,r18,r2
81125c70:	800b883a 	mov	r5,r16
81125c74:	880d883a 	mov	r6,r17
81125c78:	111f4700 	call	8111f470 <__lshift>
81125c7c:	10c00504 	addi	r3,r2,20
81125c80:	1021883a 	mov	r16,r2
81125c84:	bc6fc83a 	sub	r23,r23,r17
81125c88:	d8c00215 	stw	r3,8(sp)
81125c8c:	0027883a 	mov	r19,zero
81125c90:	003f1206 	br	811258dc <__reset+0xfb1058dc>
81125c94:	1d400084 	addi	r21,r3,2
81125c98:	0023883a 	mov	r17,zero
81125c9c:	003eb406 	br	81125770 <__reset+0xfb105770>
81125ca0:	2005883a 	mov	r2,r4
81125ca4:	003f4606 	br	811259c0 <__reset+0xfb1059c0>
81125ca8:	0027883a 	mov	r19,zero
81125cac:	003fe706 	br	81125c4c <__reset+0xfb105c4c>
81125cb0:	bc7fffc4 	addi	r17,r23,-1
81125cb4:	9800421e 	bne	r19,zero,81125dc0 <__gethex+0x6e8>
81125cb8:	88000426 	beq	r17,zero,81125ccc <__gethex+0x5f4>
81125cbc:	880b883a 	mov	r5,r17
81125cc0:	8009883a 	mov	r4,r16
81125cc4:	111fc900 	call	8111fc90 <__any_on>
81125cc8:	1027883a 	mov	r19,r2
81125ccc:	8805d17a 	srai	r2,r17,5
81125cd0:	d8c00217 	ldw	r3,8(sp)
81125cd4:	8c4007cc 	andi	r17,r17,31
81125cd8:	1085883a 	add	r2,r2,r2
81125cdc:	1085883a 	add	r2,r2,r2
81125ce0:	1885883a 	add	r2,r3,r2
81125ce4:	00c00044 	movi	r3,1
81125ce8:	1c62983a 	sll	r17,r3,r17
81125cec:	10800017 	ldw	r2,0(r2)
81125cf0:	8884703a 	and	r2,r17,r2
81125cf4:	10000126 	beq	r2,zero,81125cfc <__gethex+0x624>
81125cf8:	9cc00094 	ori	r19,r19,2
81125cfc:	b80b883a 	mov	r5,r23
81125d00:	8009883a 	mov	r4,r16
81125d04:	11255d80 	call	811255d8 <rshift>
81125d08:	d8c00017 	ldw	r3,0(sp)
81125d0c:	95e5c83a 	sub	r18,r18,r23
81125d10:	04400084 	movi	r17,2
81125d14:	1dc00117 	ldw	r23,4(r3)
81125d18:	003fa106 	br	81125ba0 <__reset+0xfb105ba0>
81125d1c:	85af883a 	add	r23,r16,r22
81125d20:	b8800003 	ldbu	r2,0(r23)
81125d24:	b821883a 	mov	r16,r23
81125d28:	11003fcc 	andi	r4,r2,255
81125d2c:	a109883a 	add	r4,r20,r4
81125d30:	21000003 	ldbu	r4,0(r4)
81125d34:	203eaa26 	beq	r4,zero,811257e0 <__reset+0xfb1057e0>
81125d38:	84000044 	addi	r16,r16,1
81125d3c:	80800003 	ldbu	r2,0(r16)
81125d40:	11003fcc 	andi	r4,r2,255
81125d44:	a109883a 	add	r4,r20,r4
81125d48:	21000003 	ldbu	r4,0(r4)
81125d4c:	203ffa1e 	bne	r4,zero,81125d38 <__reset+0xfb105d38>
81125d50:	003ea306 	br	811257e0 <__reset+0xfb1057e0>
81125d54:	d9001617 	ldw	r4,88(sp)
81125d58:	00800044 	movi	r2,1
81125d5c:	1109c83a 	sub	r4,r2,r4
81125d60:	d9001615 	stw	r4,88(sp)
81125d64:	d8801617 	ldw	r2,88(sp)
81125d68:	103f9626 	beq	r2,zero,81125bc4 <__reset+0xfb105bc4>
81125d6c:	87000417 	ldw	fp,16(r16)
81125d70:	d9800217 	ldw	r6,8(sp)
81125d74:	013fffc4 	movi	r4,-1
81125d78:	e727883a 	add	r19,fp,fp
81125d7c:	9ce7883a 	add	r19,r19,r19
81125d80:	3005883a 	mov	r2,r6
81125d84:	34cb883a 	add	r5,r6,r19
81125d88:	00000306 	br	81125d98 <__gethex+0x6c0>
81125d8c:	10000015 	stw	zero,0(r2)
81125d90:	10800104 	addi	r2,r2,4
81125d94:	117f4c2e 	bgeu	r2,r5,81125ac8 <__reset+0xfb105ac8>
81125d98:	10c00017 	ldw	r3,0(r2)
81125d9c:	193ffb26 	beq	r3,r4,81125d8c <__reset+0xfb105d8c>
81125da0:	18c00044 	addi	r3,r3,1
81125da4:	10c00015 	stw	r3,0(r2)
81125da8:	00800084 	movi	r2,2
81125dac:	88802b26 	beq	r17,r2,81125e5c <__gethex+0x784>
81125db0:	948007cc 	andi	r18,r18,31
81125db4:	90002f1e 	bne	r18,zero,81125e74 <__gethex+0x79c>
81125db8:	04400844 	movi	r17,33
81125dbc:	003f8206 	br	81125bc8 <__reset+0xfb105bc8>
81125dc0:	04c00044 	movi	r19,1
81125dc4:	003fc106 	br	81125ccc <__reset+0xfb105ccc>
81125dc8:	d8c01617 	ldw	r3,88(sp)
81125dcc:	183ed226 	beq	r3,zero,81125918 <__reset+0xfb105918>
81125dd0:	d8c00417 	ldw	r3,16(sp)
81125dd4:	d9001517 	ldw	r4,84(sp)
81125dd8:	18800015 	stw	r2,0(r3)
81125ddc:	d8c00217 	ldw	r3,8(sp)
81125de0:	00800044 	movi	r2,1
81125de4:	80800415 	stw	r2,16(r16)
81125de8:	18800015 	stw	r2,0(r3)
81125dec:	24000015 	stw	r16,0(r4)
81125df0:	00801884 	movi	r2,98
81125df4:	003efa06 	br	811259e0 <__reset+0xfb1059e0>
81125df8:	9880008c 	andi	r2,r19,2
81125dfc:	103f7126 	beq	r2,zero,81125bc4 <__reset+0xfb105bc4>
81125e00:	d8c00217 	ldw	r3,8(sp)
81125e04:	18800017 	ldw	r2,0(r3)
81125e08:	9884b03a 	or	r2,r19,r2
81125e0c:	1080004c 	andi	r2,r2,1
81125e10:	103fd61e 	bne	r2,zero,81125d6c <__reset+0xfb105d6c>
81125e14:	003f6b06 	br	81125bc4 <__reset+0xfb105bc4>
81125e18:	da800217 	ldw	r10,8(sp)
81125e1c:	0013883a 	mov	r9,zero
81125e20:	003e9f06 	br	811258a0 <__reset+0xfb1058a0>
81125e24:	04c00084 	movi	r19,2
81125e28:	003f8806 	br	81125c4c <__reset+0xfb105c4c>
81125e2c:	d9001617 	ldw	r4,88(sp)
81125e30:	203fe726 	beq	r4,zero,81125dd0 <__reset+0xfb105dd0>
81125e34:	003eb806 	br	81125918 <__reset+0xfb105918>
81125e38:	95feb71e 	bne	r18,r23,81125918 <__reset+0xfb105918>
81125e3c:	1cbfe40e 	bge	r3,r18,81125dd0 <__reset+0xfb105dd0>
81125e40:	917fffc4 	addi	r5,r18,-1
81125e44:	8009883a 	mov	r4,r16
81125e48:	111fc900 	call	8111fc90 <__any_on>
81125e4c:	103eb226 	beq	r2,zero,81125918 <__reset+0xfb105918>
81125e50:	d8c00017 	ldw	r3,0(sp)
81125e54:	18800117 	ldw	r2,4(r3)
81125e58:	003fdd06 	br	81125dd0 <__reset+0xfb105dd0>
81125e5c:	d8c00017 	ldw	r3,0(sp)
81125e60:	18800017 	ldw	r2,0(r3)
81125e64:	10bfffc4 	addi	r2,r2,-1
81125e68:	90801c26 	beq	r18,r2,81125edc <__gethex+0x804>
81125e6c:	04400884 	movi	r17,34
81125e70:	003f5506 	br	81125bc8 <__reset+0xfb105bc8>
81125e74:	34c5883a 	add	r2,r6,r19
81125e78:	113fff17 	ldw	r4,-4(r2)
81125e7c:	111efcc0 	call	8111efcc <__hi0bits>
81125e80:	00c00804 	movi	r3,32
81125e84:	1ca5c83a 	sub	r18,r3,r18
81125e88:	14bfcb0e 	bge	r2,r18,81125db8 <__reset+0xfb105db8>
81125e8c:	003f1c06 	br	81125b00 <__reset+0xfb105b00>
81125e90:	81400117 	ldw	r5,4(r16)
81125e94:	d9000117 	ldw	r4,4(sp)
81125e98:	29400044 	addi	r5,r5,1
81125e9c:	111ecc00 	call	8111ecc0 <_Balloc>
81125ea0:	81800417 	ldw	r6,16(r16)
81125ea4:	81400304 	addi	r5,r16,12
81125ea8:	11000304 	addi	r4,r2,12
81125eac:	31800084 	addi	r6,r6,2
81125eb0:	318d883a 	add	r6,r6,r6
81125eb4:	318d883a 	add	r6,r6,r6
81125eb8:	1029883a 	mov	r20,r2
81125ebc:	1114a700 	call	81114a70 <memcpy>
81125ec0:	d9000117 	ldw	r4,4(sp)
81125ec4:	800b883a 	mov	r5,r16
81125ec8:	a021883a 	mov	r16,r20
81125ecc:	111ed700 	call	8111ed70 <_Bfree>
81125ed0:	a0c00417 	ldw	r3,16(r20)
81125ed4:	a1800504 	addi	r6,r20,20
81125ed8:	003efe06 	br	81125ad4 <__reset+0xfb105ad4>
81125edc:	9005d17a 	srai	r2,r18,5
81125ee0:	944007cc 	andi	r17,r18,31
81125ee4:	1085883a 	add	r2,r2,r2
81125ee8:	1085883a 	add	r2,r2,r2
81125eec:	3087883a 	add	r3,r6,r2
81125ef0:	00800044 	movi	r2,1
81125ef4:	1462983a 	sll	r17,r2,r17
81125ef8:	18800017 	ldw	r2,0(r3)
81125efc:	8884703a 	and	r2,r17,r2
81125f00:	1022c03a 	cmpne	r17,r2,zero
81125f04:	00800884 	movi	r2,34
81125f08:	1463c83a 	sub	r17,r2,r17
81125f0c:	003f2e06 	br	81125bc8 <__reset+0xfb105bc8>

81125f10 <__hexnan>:
81125f10:	defff904 	addi	sp,sp,-28
81125f14:	de00012e 	bgeu	sp,et,81125f1c <__hexnan+0xc>
81125f18:	003b68fa 	trap	3
81125f1c:	dc800215 	stw	r18,8(sp)
81125f20:	2c800017 	ldw	r18,0(r5)
81125f24:	dfc00615 	stw	ra,24(sp)
81125f28:	dd400515 	stw	r21,20(sp)
81125f2c:	901fd17a 	srai	r15,r18,5
81125f30:	dd000415 	stw	r20,16(sp)
81125f34:	dcc00315 	stw	r19,12(sp)
81125f38:	7bdf883a 	add	r15,r15,r15
81125f3c:	7bdf883a 	add	r15,r15,r15
81125f40:	dc400115 	stw	r17,4(sp)
81125f44:	dc000015 	stw	r16,0(sp)
81125f48:	948007cc 	andi	r18,r18,31
81125f4c:	33df883a 	add	r15,r6,r15
81125f50:	90000126 	beq	r18,zero,81125f58 <__hexnan+0x48>
81125f54:	7bc00104 	addi	r15,r15,4
81125f58:	22000017 	ldw	r8,0(r4)
81125f5c:	7affff04 	addi	r11,r15,-4
81125f60:	03a04534 	movhi	r14,33044
81125f64:	783fff15 	stw	zero,-4(r15)
81125f68:	581b883a 	mov	r13,r11
81125f6c:	580b883a 	mov	r5,r11
81125f70:	000f883a 	mov	r7,zero
81125f74:	003f883a 	mov	ra,zero
81125f78:	0019883a 	mov	r12,zero
81125f7c:	73893f04 	addi	r14,r14,9468
81125f80:	04400204 	movi	r17,8
81125f84:	04000804 	movi	r16,32
81125f88:	04c001c4 	movi	r19,7
81125f8c:	42000044 	addi	r8,r8,1
81125f90:	40c00003 	ldbu	r3,0(r8)
81125f94:	18001d26 	beq	r3,zero,8112600c <__hexnan+0xfc>
81125f98:	70c5883a 	add	r2,r14,r3
81125f9c:	10800003 	ldbu	r2,0(r2)
81125fa0:	12403fcc 	andi	r9,r2,255
81125fa4:	4800301e 	bne	r9,zero,81126068 <__hexnan+0x158>
81125fa8:	80c04236 	bltu	r16,r3,811260b4 <__hexnan+0x1a4>
81125fac:	fb3ff70e 	bge	ra,r12,81125f8c <__reset+0xfb105f8c>
81125fb0:	2b40112e 	bgeu	r5,r13,81125ff8 <__hexnan+0xe8>
81125fb4:	99c01016 	blt	r19,r7,81125ff8 <__hexnan+0xe8>
81125fb8:	89e9c83a 	sub	r20,r17,r7
81125fbc:	a529883a 	add	r20,r20,r20
81125fc0:	2a800017 	ldw	r10,0(r5)
81125fc4:	a529883a 	add	r20,r20,r20
81125fc8:	852bc83a 	sub	r21,r16,r20
81125fcc:	28c00104 	addi	r3,r5,4
81125fd0:	2805883a 	mov	r2,r5
81125fd4:	19c00017 	ldw	r7,0(r3)
81125fd8:	10800104 	addi	r2,r2,4
81125fdc:	18c00104 	addi	r3,r3,4
81125fe0:	3d52983a 	sll	r9,r7,r21
81125fe4:	4a92b03a 	or	r9,r9,r10
81125fe8:	3d14d83a 	srl	r10,r7,r20
81125fec:	127fff15 	stw	r9,-4(r2)
81125ff0:	1abfff15 	stw	r10,-4(r3)
81125ff4:	137ff736 	bltu	r2,r13,81125fd4 <__reset+0xfb105fd4>
81125ff8:	31402836 	bltu	r6,r5,8112609c <__hexnan+0x18c>
81125ffc:	42000044 	addi	r8,r8,1
81126000:	40c00003 	ldbu	r3,0(r8)
81126004:	01c00204 	movi	r7,8
81126008:	183fe31e 	bne	r3,zero,81125f98 <__reset+0xfb105f98>
8112600c:	60002b26 	beq	r12,zero,811260bc <__hexnan+0x1ac>
81126010:	2b40022e 	bgeu	r5,r13,8112601c <__hexnan+0x10c>
81126014:	008001c4 	movi	r2,7
81126018:	11c0430e 	bge	r2,r7,81126128 <__hexnan+0x218>
8112601c:	3140312e 	bgeu	r6,r5,811260e4 <__hexnan+0x1d4>
81126020:	3007883a 	mov	r3,r6
81126024:	29000017 	ldw	r4,0(r5)
81126028:	18800104 	addi	r2,r3,4
8112602c:	29400104 	addi	r5,r5,4
81126030:	19000015 	stw	r4,0(r3)
81126034:	1007883a 	mov	r3,r2
81126038:	597ffa2e 	bgeu	r11,r5,81126024 <__reset+0xfb106024>
8112603c:	10000015 	stw	zero,0(r2)
81126040:	10800104 	addi	r2,r2,4
81126044:	58bffd2e 	bgeu	r11,r2,8112603c <__reset+0xfb10603c>
81126048:	78bfff17 	ldw	r2,-4(r15)
8112604c:	1000041e 	bne	r2,zero,81126060 <__hexnan+0x150>
81126050:	32c02d26 	beq	r6,r11,81126108 <__hexnan+0x1f8>
81126054:	5affff04 	addi	r11,r11,-4
81126058:	58800017 	ldw	r2,0(r11)
8112605c:	103ffc26 	beq	r2,zero,81126050 <__reset+0xfb106050>
81126060:	00800144 	movi	r2,5
81126064:	00001606 	br	811260c0 <__hexnan+0x1b0>
81126068:	39c00044 	addi	r7,r7,1
8112606c:	63000044 	addi	r12,r12,1
81126070:	89c0040e 	bge	r17,r7,81126084 <__hexnan+0x174>
81126074:	317fc52e 	bgeu	r6,r5,81125f8c <__reset+0xfb105f8c>
81126078:	283fff15 	stw	zero,-4(r5)
8112607c:	01c00044 	movi	r7,1
81126080:	297fff04 	addi	r5,r5,-4
81126084:	28c00017 	ldw	r3,0(r5)
81126088:	108003cc 	andi	r2,r2,15
8112608c:	1806913a 	slli	r3,r3,4
81126090:	1884b03a 	or	r2,r3,r2
81126094:	28800015 	stw	r2,0(r5)
81126098:	003fbc06 	br	81125f8c <__reset+0xfb105f8c>
8112609c:	2b7fff04 	addi	r13,r5,-4
811260a0:	283fff15 	stw	zero,-4(r5)
811260a4:	603f883a 	mov	ra,r12
811260a8:	680b883a 	mov	r5,r13
811260ac:	000f883a 	mov	r7,zero
811260b0:	003fb606 	br	81125f8c <__reset+0xfb105f8c>
811260b4:	00800a44 	movi	r2,41
811260b8:	18801726 	beq	r3,r2,81126118 <__hexnan+0x208>
811260bc:	00800104 	movi	r2,4
811260c0:	dfc00617 	ldw	ra,24(sp)
811260c4:	dd400517 	ldw	r21,20(sp)
811260c8:	dd000417 	ldw	r20,16(sp)
811260cc:	dcc00317 	ldw	r19,12(sp)
811260d0:	dc800217 	ldw	r18,8(sp)
811260d4:	dc400117 	ldw	r17,4(sp)
811260d8:	dc000017 	ldw	r16,0(sp)
811260dc:	dec00704 	addi	sp,sp,28
811260e0:	f800283a 	ret
811260e4:	903fd826 	beq	r18,zero,81126048 <__reset+0xfb106048>
811260e8:	00c00804 	movi	r3,32
811260ec:	1ca5c83a 	sub	r18,r3,r18
811260f0:	00ffffc4 	movi	r3,-1
811260f4:	78bfff17 	ldw	r2,-4(r15)
811260f8:	1c86d83a 	srl	r3,r3,r18
811260fc:	1884703a 	and	r2,r3,r2
81126100:	78bfff15 	stw	r2,-4(r15)
81126104:	003fd106 	br	8112604c <__reset+0xfb10604c>
81126108:	00800044 	movi	r2,1
8112610c:	58800015 	stw	r2,0(r11)
81126110:	00800144 	movi	r2,5
81126114:	003fea06 	br	811260c0 <__reset+0xfb1060c0>
81126118:	42000044 	addi	r8,r8,1
8112611c:	22000015 	stw	r8,0(r4)
81126120:	603fbb1e 	bne	r12,zero,81126010 <__reset+0xfb106010>
81126124:	003fe506 	br	811260bc <__reset+0xfb1060bc>
81126128:	02400204 	movi	r9,8
8112612c:	49d3c83a 	sub	r9,r9,r7
81126130:	4a53883a 	add	r9,r9,r9
81126134:	2a000017 	ldw	r8,0(r5)
81126138:	4a53883a 	add	r9,r9,r9
8112613c:	02800804 	movi	r10,32
81126140:	5255c83a 	sub	r10,r10,r9
81126144:	28c00104 	addi	r3,r5,4
81126148:	2805883a 	mov	r2,r5
8112614c:	19c00017 	ldw	r7,0(r3)
81126150:	10800104 	addi	r2,r2,4
81126154:	18c00104 	addi	r3,r3,4
81126158:	3a88983a 	sll	r4,r7,r10
8112615c:	2208b03a 	or	r4,r4,r8
81126160:	3a50d83a 	srl	r8,r7,r9
81126164:	113fff15 	stw	r4,-4(r2)
81126168:	1a3fff15 	stw	r8,-4(r3)
8112616c:	137ff736 	bltu	r2,r13,8112614c <__reset+0xfb10614c>
81126170:	003faa06 	br	8112601c <__reset+0xfb10601c>

81126174 <strncmp>:
81126174:	30003126 	beq	r6,zero,8112623c <strncmp+0xc8>
81126178:	2144b03a 	or	r2,r4,r5
8112617c:	108000cc 	andi	r2,r2,3
81126180:	10001e1e 	bne	r2,zero,811261fc <strncmp+0x88>
81126184:	024000c4 	movi	r9,3
81126188:	49801c2e 	bgeu	r9,r6,811261fc <strncmp+0x88>
8112618c:	20800017 	ldw	r2,0(r4)
81126190:	28c00017 	ldw	r3,0(r5)
81126194:	10c0191e 	bne	r2,r3,811261fc <strncmp+0x88>
81126198:	31bfff04 	addi	r6,r6,-4
8112619c:	30002726 	beq	r6,zero,8112623c <strncmp+0xc8>
811261a0:	02ffbff4 	movhi	r11,65279
811261a4:	5affbfc4 	addi	r11,r11,-257
811261a8:	0086303a 	nor	r3,zero,r2
811261ac:	02a02074 	movhi	r10,32897
811261b0:	12c5883a 	add	r2,r2,r11
811261b4:	52a02004 	addi	r10,r10,-32640
811261b8:	10c4703a 	and	r2,r2,r3
811261bc:	1284703a 	and	r2,r2,r10
811261c0:	10000b26 	beq	r2,zero,811261f0 <strncmp+0x7c>
811261c4:	00001d06 	br	8112623c <strncmp+0xc8>
811261c8:	20c00017 	ldw	r3,0(r4)
811261cc:	29c00017 	ldw	r7,0(r5)
811261d0:	1ad1883a 	add	r8,r3,r11
811261d4:	00c4303a 	nor	r2,zero,r3
811261d8:	4084703a 	and	r2,r8,r2
811261dc:	1284703a 	and	r2,r2,r10
811261e0:	19c0061e 	bne	r3,r7,811261fc <strncmp+0x88>
811261e4:	31bfff04 	addi	r6,r6,-4
811261e8:	30001426 	beq	r6,zero,8112623c <strncmp+0xc8>
811261ec:	1000131e 	bne	r2,zero,8112623c <strncmp+0xc8>
811261f0:	21000104 	addi	r4,r4,4
811261f4:	29400104 	addi	r5,r5,4
811261f8:	49bff336 	bltu	r9,r6,811261c8 <__reset+0xfb1061c8>
811261fc:	28800007 	ldb	r2,0(r5)
81126200:	20c00007 	ldb	r3,0(r4)
81126204:	31bfffc4 	addi	r6,r6,-1
81126208:	10c0081e 	bne	r2,r3,8112622c <strncmp+0xb8>
8112620c:	30000b26 	beq	r6,zero,8112623c <strncmp+0xc8>
81126210:	10000a26 	beq	r2,zero,8112623c <strncmp+0xc8>
81126214:	21000044 	addi	r4,r4,1
81126218:	29400044 	addi	r5,r5,1
8112621c:	20800007 	ldb	r2,0(r4)
81126220:	28c00007 	ldb	r3,0(r5)
81126224:	31bfffc4 	addi	r6,r6,-1
81126228:	10fff826 	beq	r2,r3,8112620c <__reset+0xfb10620c>
8112622c:	20800003 	ldbu	r2,0(r4)
81126230:	28c00003 	ldbu	r3,0(r5)
81126234:	10c5c83a 	sub	r2,r2,r3
81126238:	f800283a 	ret
8112623c:	0005883a 	mov	r2,zero
81126240:	f800283a 	ret

81126244 <_wcrtomb_r>:
81126244:	defff604 	addi	sp,sp,-40
81126248:	00a04534 	movhi	r2,33044
8112624c:	de00012e 	bgeu	sp,et,81126254 <_wcrtomb_r+0x10>
81126250:	003b68fa 	trap	3
81126254:	10928c04 	addi	r2,r2,18992
81126258:	dc800815 	stw	r18,32(sp)
8112625c:	dc400715 	stw	r17,28(sp)
81126260:	dc000615 	stw	r16,24(sp)
81126264:	dfc00915 	stw	ra,36(sp)
81126268:	2021883a 	mov	r16,r4
8112626c:	3823883a 	mov	r17,r7
81126270:	14800017 	ldw	r18,0(r2)
81126274:	28001426 	beq	r5,zero,811262c8 <_wcrtomb_r+0x84>
81126278:	d9400415 	stw	r5,16(sp)
8112627c:	d9800515 	stw	r6,20(sp)
81126280:	111e7740 	call	8111e774 <__locale_charset>
81126284:	d9800517 	ldw	r6,20(sp)
81126288:	d9400417 	ldw	r5,16(sp)
8112628c:	100f883a 	mov	r7,r2
81126290:	dc400015 	stw	r17,0(sp)
81126294:	8009883a 	mov	r4,r16
81126298:	903ee83a 	callr	r18
8112629c:	00ffffc4 	movi	r3,-1
811262a0:	10c0031e 	bne	r2,r3,811262b0 <_wcrtomb_r+0x6c>
811262a4:	88000015 	stw	zero,0(r17)
811262a8:	00c02284 	movi	r3,138
811262ac:	80c00015 	stw	r3,0(r16)
811262b0:	dfc00917 	ldw	ra,36(sp)
811262b4:	dc800817 	ldw	r18,32(sp)
811262b8:	dc400717 	ldw	r17,28(sp)
811262bc:	dc000617 	ldw	r16,24(sp)
811262c0:	dec00a04 	addi	sp,sp,40
811262c4:	f800283a 	ret
811262c8:	111e7740 	call	8111e774 <__locale_charset>
811262cc:	100f883a 	mov	r7,r2
811262d0:	dc400015 	stw	r17,0(sp)
811262d4:	000d883a 	mov	r6,zero
811262d8:	d9400104 	addi	r5,sp,4
811262dc:	8009883a 	mov	r4,r16
811262e0:	903ee83a 	callr	r18
811262e4:	003fed06 	br	8112629c <__reset+0xfb10629c>

811262e8 <wcrtomb>:
811262e8:	defff604 	addi	sp,sp,-40
811262ec:	00a04534 	movhi	r2,33044
811262f0:	de00012e 	bgeu	sp,et,811262f8 <wcrtomb+0x10>
811262f4:	003b68fa 	trap	3
811262f8:	10928704 	addi	r2,r2,18972
811262fc:	dc800615 	stw	r18,24(sp)
81126300:	dc400515 	stw	r17,20(sp)
81126304:	dfc00915 	stw	ra,36(sp)
81126308:	dd000815 	stw	r20,32(sp)
8112630c:	dcc00715 	stw	r19,28(sp)
81126310:	dc000415 	stw	r16,16(sp)
81126314:	3025883a 	mov	r18,r6
81126318:	14400017 	ldw	r17,0(r2)
8112631c:	20001926 	beq	r4,zero,81126384 <wcrtomb+0x9c>
81126320:	00a04534 	movhi	r2,33044
81126324:	10928c04 	addi	r2,r2,18992
81126328:	15000017 	ldw	r20,0(r2)
8112632c:	2021883a 	mov	r16,r4
81126330:	2827883a 	mov	r19,r5
81126334:	111e7740 	call	8111e774 <__locale_charset>
81126338:	100f883a 	mov	r7,r2
8112633c:	dc800015 	stw	r18,0(sp)
81126340:	980d883a 	mov	r6,r19
81126344:	800b883a 	mov	r5,r16
81126348:	8809883a 	mov	r4,r17
8112634c:	a03ee83a 	callr	r20
81126350:	00ffffc4 	movi	r3,-1
81126354:	10c0031e 	bne	r2,r3,81126364 <wcrtomb+0x7c>
81126358:	90000015 	stw	zero,0(r18)
8112635c:	00c02284 	movi	r3,138
81126360:	88c00015 	stw	r3,0(r17)
81126364:	dfc00917 	ldw	ra,36(sp)
81126368:	dd000817 	ldw	r20,32(sp)
8112636c:	dcc00717 	ldw	r19,28(sp)
81126370:	dc800617 	ldw	r18,24(sp)
81126374:	dc400517 	ldw	r17,20(sp)
81126378:	dc000417 	ldw	r16,16(sp)
8112637c:	dec00a04 	addi	sp,sp,40
81126380:	f800283a 	ret
81126384:	00a04534 	movhi	r2,33044
81126388:	10928c04 	addi	r2,r2,18992
8112638c:	14000017 	ldw	r16,0(r2)
81126390:	111e7740 	call	8111e774 <__locale_charset>
81126394:	100f883a 	mov	r7,r2
81126398:	dc800015 	stw	r18,0(sp)
8112639c:	000d883a 	mov	r6,zero
811263a0:	d9400104 	addi	r5,sp,4
811263a4:	8809883a 	mov	r4,r17
811263a8:	803ee83a 	callr	r16
811263ac:	003fe806 	br	81126350 <__reset+0xfb106350>

811263b0 <__ascii_wctomb>:
811263b0:	28000526 	beq	r5,zero,811263c8 <__ascii_wctomb+0x18>
811263b4:	00803fc4 	movi	r2,255
811263b8:	11800536 	bltu	r2,r6,811263d0 <__ascii_wctomb+0x20>
811263bc:	29800005 	stb	r6,0(r5)
811263c0:	00800044 	movi	r2,1
811263c4:	f800283a 	ret
811263c8:	0005883a 	mov	r2,zero
811263cc:	f800283a 	ret
811263d0:	00802284 	movi	r2,138
811263d4:	20800015 	stw	r2,0(r4)
811263d8:	00bfffc4 	movi	r2,-1
811263dc:	f800283a 	ret

811263e0 <_wctomb_r>:
811263e0:	00a04534 	movhi	r2,33044
811263e4:	defff904 	addi	sp,sp,-28
811263e8:	10928c04 	addi	r2,r2,18992
811263ec:	de00012e 	bgeu	sp,et,811263f4 <_wctomb_r+0x14>
811263f0:	003b68fa 	trap	3
811263f4:	dfc00615 	stw	ra,24(sp)
811263f8:	dc400515 	stw	r17,20(sp)
811263fc:	dc000415 	stw	r16,16(sp)
81126400:	3823883a 	mov	r17,r7
81126404:	14000017 	ldw	r16,0(r2)
81126408:	d9000115 	stw	r4,4(sp)
8112640c:	d9400215 	stw	r5,8(sp)
81126410:	d9800315 	stw	r6,12(sp)
81126414:	111e7740 	call	8111e774 <__locale_charset>
81126418:	d9800317 	ldw	r6,12(sp)
8112641c:	d9400217 	ldw	r5,8(sp)
81126420:	d9000117 	ldw	r4,4(sp)
81126424:	100f883a 	mov	r7,r2
81126428:	dc400015 	stw	r17,0(sp)
8112642c:	803ee83a 	callr	r16
81126430:	dfc00617 	ldw	ra,24(sp)
81126434:	dc400517 	ldw	r17,20(sp)
81126438:	dc000417 	ldw	r16,16(sp)
8112643c:	dec00704 	addi	sp,sp,28
81126440:	f800283a 	ret

81126444 <__fixunsdfsi>:
81126444:	defffd04 	addi	sp,sp,-12
81126448:	000d883a 	mov	r6,zero
8112644c:	01d07834 	movhi	r7,16864
81126450:	de00012e 	bgeu	sp,et,81126458 <__fixunsdfsi+0x14>
81126454:	003b68fa 	trap	3
81126458:	dc400115 	stw	r17,4(sp)
8112645c:	dc000015 	stw	r16,0(sp)
81126460:	dfc00215 	stw	ra,8(sp)
81126464:	2023883a 	mov	r17,r4
81126468:	2821883a 	mov	r16,r5
8112646c:	112855c0 	call	8112855c <__gedf2>
81126470:	1000080e 	bge	r2,zero,81126494 <__fixunsdfsi+0x50>
81126474:	8809883a 	mov	r4,r17
81126478:	800b883a 	mov	r5,r16
8112647c:	11290300 	call	81129030 <__fixdfsi>
81126480:	dfc00217 	ldw	ra,8(sp)
81126484:	dc400117 	ldw	r17,4(sp)
81126488:	dc000017 	ldw	r16,0(sp)
8112648c:	dec00304 	addi	sp,sp,12
81126490:	f800283a 	ret
81126494:	000d883a 	mov	r6,zero
81126498:	01d07834 	movhi	r7,16864
8112649c:	8809883a 	mov	r4,r17
811264a0:	800b883a 	mov	r5,r16
811264a4:	112872c0 	call	8112872c <__subdf3>
811264a8:	180b883a 	mov	r5,r3
811264ac:	1009883a 	mov	r4,r2
811264b0:	11290300 	call	81129030 <__fixdfsi>
811264b4:	00e00034 	movhi	r3,32768
811264b8:	10c5883a 	add	r2,r2,r3
811264bc:	003ff006 	br	81126480 <__reset+0xfb106480>

811264c0 <__udivdi3>:
811264c0:	defff504 	addi	sp,sp,-44
811264c4:	de00012e 	bgeu	sp,et,811264cc <__udivdi3+0xc>
811264c8:	003b68fa 	trap	3
811264cc:	dcc00415 	stw	r19,16(sp)
811264d0:	dc000115 	stw	r16,4(sp)
811264d4:	dfc00a15 	stw	ra,40(sp)
811264d8:	df000915 	stw	fp,36(sp)
811264dc:	ddc00815 	stw	r23,32(sp)
811264e0:	dd800715 	stw	r22,28(sp)
811264e4:	dd400615 	stw	r21,24(sp)
811264e8:	dd000515 	stw	r20,20(sp)
811264ec:	dc800315 	stw	r18,12(sp)
811264f0:	dc400215 	stw	r17,8(sp)
811264f4:	2027883a 	mov	r19,r4
811264f8:	2821883a 	mov	r16,r5
811264fc:	3800411e 	bne	r7,zero,81126604 <__udivdi3+0x144>
81126500:	3023883a 	mov	r17,r6
81126504:	2025883a 	mov	r18,r4
81126508:	2980522e 	bgeu	r5,r6,81126654 <__udivdi3+0x194>
8112650c:	00bfffd4 	movui	r2,65535
81126510:	282d883a 	mov	r22,r5
81126514:	1180a836 	bltu	r2,r6,811267b8 <__udivdi3+0x2f8>
81126518:	00803fc4 	movi	r2,255
8112651c:	1185803a 	cmpltu	r2,r2,r6
81126520:	100490fa 	slli	r2,r2,3
81126524:	3086d83a 	srl	r3,r6,r2
81126528:	01204534 	movhi	r4,33044
8112652c:	2107b904 	addi	r4,r4,7908
81126530:	20c7883a 	add	r3,r4,r3
81126534:	18c00003 	ldbu	r3,0(r3)
81126538:	1885883a 	add	r2,r3,r2
8112653c:	00c00804 	movi	r3,32
81126540:	1887c83a 	sub	r3,r3,r2
81126544:	18000526 	beq	r3,zero,8112655c <__udivdi3+0x9c>
81126548:	80e0983a 	sll	r16,r16,r3
8112654c:	9884d83a 	srl	r2,r19,r2
81126550:	30e2983a 	sll	r17,r6,r3
81126554:	98e4983a 	sll	r18,r19,r3
81126558:	142cb03a 	or	r22,r2,r16
8112655c:	882ad43a 	srli	r21,r17,16
81126560:	b009883a 	mov	r4,r22
81126564:	8d3fffcc 	andi	r20,r17,65535
81126568:	a80b883a 	mov	r5,r21
8112656c:	11270dc0 	call	811270dc <__umodsi3>
81126570:	b009883a 	mov	r4,r22
81126574:	a80b883a 	mov	r5,r21
81126578:	1027883a 	mov	r19,r2
8112657c:	11270780 	call	81127078 <__udivsi3>
81126580:	102d883a 	mov	r22,r2
81126584:	9826943a 	slli	r19,r19,16
81126588:	9004d43a 	srli	r2,r18,16
8112658c:	a5a1383a 	mul	r16,r20,r22
81126590:	14c4b03a 	or	r2,r2,r19
81126594:	1400052e 	bgeu	r2,r16,811265ac <__udivdi3+0xec>
81126598:	1445883a 	add	r2,r2,r17
8112659c:	b0ffffc4 	addi	r3,r22,-1
811265a0:	14400136 	bltu	r2,r17,811265a8 <__udivdi3+0xe8>
811265a4:	14012336 	bltu	r2,r16,81126a34 <__udivdi3+0x574>
811265a8:	182d883a 	mov	r22,r3
811265ac:	1421c83a 	sub	r16,r2,r16
811265b0:	a80b883a 	mov	r5,r21
811265b4:	8009883a 	mov	r4,r16
811265b8:	11270dc0 	call	811270dc <__umodsi3>
811265bc:	1027883a 	mov	r19,r2
811265c0:	a80b883a 	mov	r5,r21
811265c4:	8009883a 	mov	r4,r16
811265c8:	11270780 	call	81127078 <__udivsi3>
811265cc:	9826943a 	slli	r19,r19,16
811265d0:	a0a9383a 	mul	r20,r20,r2
811265d4:	94bfffcc 	andi	r18,r18,65535
811265d8:	94e4b03a 	or	r18,r18,r19
811265dc:	9500052e 	bgeu	r18,r20,811265f4 <__udivdi3+0x134>
811265e0:	8ca5883a 	add	r18,r17,r18
811265e4:	10ffffc4 	addi	r3,r2,-1
811265e8:	9440f136 	bltu	r18,r17,811269b0 <__udivdi3+0x4f0>
811265ec:	9500f02e 	bgeu	r18,r20,811269b0 <__udivdi3+0x4f0>
811265f0:	10bfff84 	addi	r2,r2,-2
811265f4:	b00c943a 	slli	r6,r22,16
811265f8:	0007883a 	mov	r3,zero
811265fc:	3084b03a 	or	r2,r6,r2
81126600:	00005906 	br	81126768 <__udivdi3+0x2a8>
81126604:	29c05636 	bltu	r5,r7,81126760 <__udivdi3+0x2a0>
81126608:	00bfffd4 	movui	r2,65535
8112660c:	11c0622e 	bgeu	r2,r7,81126798 <__udivdi3+0x2d8>
81126610:	00804034 	movhi	r2,256
81126614:	10bfffc4 	addi	r2,r2,-1
81126618:	11c0ee36 	bltu	r2,r7,811269d4 <__udivdi3+0x514>
8112661c:	00800404 	movi	r2,16
81126620:	3886d83a 	srl	r3,r7,r2
81126624:	01204534 	movhi	r4,33044
81126628:	2107b904 	addi	r4,r4,7908
8112662c:	20c7883a 	add	r3,r4,r3
81126630:	18c00003 	ldbu	r3,0(r3)
81126634:	05400804 	movi	r21,32
81126638:	1885883a 	add	r2,r3,r2
8112663c:	a8abc83a 	sub	r21,r21,r2
81126640:	a800621e 	bne	r21,zero,811267cc <__udivdi3+0x30c>
81126644:	3c00e936 	bltu	r7,r16,811269ec <__udivdi3+0x52c>
81126648:	9985403a 	cmpgeu	r2,r19,r6
8112664c:	0007883a 	mov	r3,zero
81126650:	00004506 	br	81126768 <__udivdi3+0x2a8>
81126654:	3000041e 	bne	r6,zero,81126668 <__udivdi3+0x1a8>
81126658:	000b883a 	mov	r5,zero
8112665c:	01000044 	movi	r4,1
81126660:	11270780 	call	81127078 <__udivsi3>
81126664:	1023883a 	mov	r17,r2
81126668:	00bfffd4 	movui	r2,65535
8112666c:	14404e2e 	bgeu	r2,r17,811267a8 <__udivdi3+0x2e8>
81126670:	00804034 	movhi	r2,256
81126674:	10bfffc4 	addi	r2,r2,-1
81126678:	1440d836 	bltu	r2,r17,811269dc <__udivdi3+0x51c>
8112667c:	00800404 	movi	r2,16
81126680:	8886d83a 	srl	r3,r17,r2
81126684:	01204534 	movhi	r4,33044
81126688:	2107b904 	addi	r4,r4,7908
8112668c:	20c7883a 	add	r3,r4,r3
81126690:	18c00003 	ldbu	r3,0(r3)
81126694:	1885883a 	add	r2,r3,r2
81126698:	00c00804 	movi	r3,32
8112669c:	1887c83a 	sub	r3,r3,r2
811266a0:	18008f1e 	bne	r3,zero,811268e0 <__udivdi3+0x420>
811266a4:	882ad43a 	srli	r21,r17,16
811266a8:	8461c83a 	sub	r16,r16,r17
811266ac:	8d3fffcc 	andi	r20,r17,65535
811266b0:	00c00044 	movi	r3,1
811266b4:	8009883a 	mov	r4,r16
811266b8:	a80b883a 	mov	r5,r21
811266bc:	d8c00015 	stw	r3,0(sp)
811266c0:	11270dc0 	call	811270dc <__umodsi3>
811266c4:	8009883a 	mov	r4,r16
811266c8:	a80b883a 	mov	r5,r21
811266cc:	1027883a 	mov	r19,r2
811266d0:	11270780 	call	81127078 <__udivsi3>
811266d4:	9826943a 	slli	r19,r19,16
811266d8:	9008d43a 	srli	r4,r18,16
811266dc:	1521383a 	mul	r16,r2,r20
811266e0:	102d883a 	mov	r22,r2
811266e4:	24c8b03a 	or	r4,r4,r19
811266e8:	d8c00017 	ldw	r3,0(sp)
811266ec:	2400052e 	bgeu	r4,r16,81126704 <__udivdi3+0x244>
811266f0:	2449883a 	add	r4,r4,r17
811266f4:	b0bfffc4 	addi	r2,r22,-1
811266f8:	24400136 	bltu	r4,r17,81126700 <__udivdi3+0x240>
811266fc:	2400ca36 	bltu	r4,r16,81126a28 <__udivdi3+0x568>
81126700:	102d883a 	mov	r22,r2
81126704:	2421c83a 	sub	r16,r4,r16
81126708:	a80b883a 	mov	r5,r21
8112670c:	8009883a 	mov	r4,r16
81126710:	d8c00015 	stw	r3,0(sp)
81126714:	11270dc0 	call	811270dc <__umodsi3>
81126718:	1027883a 	mov	r19,r2
8112671c:	a80b883a 	mov	r5,r21
81126720:	8009883a 	mov	r4,r16
81126724:	11270780 	call	81127078 <__udivsi3>
81126728:	9826943a 	slli	r19,r19,16
8112672c:	1529383a 	mul	r20,r2,r20
81126730:	94bfffcc 	andi	r18,r18,65535
81126734:	94e4b03a 	or	r18,r18,r19
81126738:	d8c00017 	ldw	r3,0(sp)
8112673c:	9500052e 	bgeu	r18,r20,81126754 <__udivdi3+0x294>
81126740:	8ca5883a 	add	r18,r17,r18
81126744:	113fffc4 	addi	r4,r2,-1
81126748:	94409736 	bltu	r18,r17,811269a8 <__udivdi3+0x4e8>
8112674c:	9500962e 	bgeu	r18,r20,811269a8 <__udivdi3+0x4e8>
81126750:	10bfff84 	addi	r2,r2,-2
81126754:	b00c943a 	slli	r6,r22,16
81126758:	3084b03a 	or	r2,r6,r2
8112675c:	00000206 	br	81126768 <__udivdi3+0x2a8>
81126760:	0007883a 	mov	r3,zero
81126764:	0005883a 	mov	r2,zero
81126768:	dfc00a17 	ldw	ra,40(sp)
8112676c:	df000917 	ldw	fp,36(sp)
81126770:	ddc00817 	ldw	r23,32(sp)
81126774:	dd800717 	ldw	r22,28(sp)
81126778:	dd400617 	ldw	r21,24(sp)
8112677c:	dd000517 	ldw	r20,20(sp)
81126780:	dcc00417 	ldw	r19,16(sp)
81126784:	dc800317 	ldw	r18,12(sp)
81126788:	dc400217 	ldw	r17,8(sp)
8112678c:	dc000117 	ldw	r16,4(sp)
81126790:	dec00b04 	addi	sp,sp,44
81126794:	f800283a 	ret
81126798:	00803fc4 	movi	r2,255
8112679c:	11c5803a 	cmpltu	r2,r2,r7
811267a0:	100490fa 	slli	r2,r2,3
811267a4:	003f9e06 	br	81126620 <__reset+0xfb106620>
811267a8:	00803fc4 	movi	r2,255
811267ac:	1445803a 	cmpltu	r2,r2,r17
811267b0:	100490fa 	slli	r2,r2,3
811267b4:	003fb206 	br	81126680 <__reset+0xfb106680>
811267b8:	00804034 	movhi	r2,256
811267bc:	10bfffc4 	addi	r2,r2,-1
811267c0:	11808836 	bltu	r2,r6,811269e4 <__udivdi3+0x524>
811267c4:	00800404 	movi	r2,16
811267c8:	003f5606 	br	81126524 <__reset+0xfb106524>
811267cc:	30aed83a 	srl	r23,r6,r2
811267d0:	3d4e983a 	sll	r7,r7,r21
811267d4:	80acd83a 	srl	r22,r16,r2
811267d8:	9884d83a 	srl	r2,r19,r2
811267dc:	3deeb03a 	or	r23,r7,r23
811267e0:	b824d43a 	srli	r18,r23,16
811267e4:	8560983a 	sll	r16,r16,r21
811267e8:	b009883a 	mov	r4,r22
811267ec:	900b883a 	mov	r5,r18
811267f0:	3568983a 	sll	r20,r6,r21
811267f4:	1420b03a 	or	r16,r2,r16
811267f8:	11270dc0 	call	811270dc <__umodsi3>
811267fc:	b009883a 	mov	r4,r22
81126800:	900b883a 	mov	r5,r18
81126804:	1023883a 	mov	r17,r2
81126808:	11270780 	call	81127078 <__udivsi3>
8112680c:	8808943a 	slli	r4,r17,16
81126810:	bf3fffcc 	andi	fp,r23,65535
81126814:	8006d43a 	srli	r3,r16,16
81126818:	e0a3383a 	mul	r17,fp,r2
8112681c:	100d883a 	mov	r6,r2
81126820:	1906b03a 	or	r3,r3,r4
81126824:	1c40042e 	bgeu	r3,r17,81126838 <__udivdi3+0x378>
81126828:	1dc7883a 	add	r3,r3,r23
8112682c:	10bfffc4 	addi	r2,r2,-1
81126830:	1dc0752e 	bgeu	r3,r23,81126a08 <__udivdi3+0x548>
81126834:	100d883a 	mov	r6,r2
81126838:	1c63c83a 	sub	r17,r3,r17
8112683c:	900b883a 	mov	r5,r18
81126840:	8809883a 	mov	r4,r17
81126844:	d9800015 	stw	r6,0(sp)
81126848:	11270dc0 	call	811270dc <__umodsi3>
8112684c:	102d883a 	mov	r22,r2
81126850:	8809883a 	mov	r4,r17
81126854:	900b883a 	mov	r5,r18
81126858:	11270780 	call	81127078 <__udivsi3>
8112685c:	b02c943a 	slli	r22,r22,16
81126860:	e089383a 	mul	r4,fp,r2
81126864:	843fffcc 	andi	r16,r16,65535
81126868:	85a0b03a 	or	r16,r16,r22
8112686c:	d9800017 	ldw	r6,0(sp)
81126870:	8100042e 	bgeu	r16,r4,81126884 <__udivdi3+0x3c4>
81126874:	85e1883a 	add	r16,r16,r23
81126878:	10ffffc4 	addi	r3,r2,-1
8112687c:	85c05e2e 	bgeu	r16,r23,811269f8 <__udivdi3+0x538>
81126880:	1805883a 	mov	r2,r3
81126884:	300c943a 	slli	r6,r6,16
81126888:	a17fffcc 	andi	r5,r20,65535
8112688c:	a028d43a 	srli	r20,r20,16
81126890:	3084b03a 	or	r2,r6,r2
81126894:	10ffffcc 	andi	r3,r2,65535
81126898:	100cd43a 	srli	r6,r2,16
8112689c:	194f383a 	mul	r7,r3,r5
811268a0:	1d07383a 	mul	r3,r3,r20
811268a4:	314b383a 	mul	r5,r6,r5
811268a8:	3810d43a 	srli	r8,r7,16
811268ac:	8121c83a 	sub	r16,r16,r4
811268b0:	1947883a 	add	r3,r3,r5
811268b4:	40c7883a 	add	r3,r8,r3
811268b8:	350d383a 	mul	r6,r6,r20
811268bc:	1940022e 	bgeu	r3,r5,811268c8 <__udivdi3+0x408>
811268c0:	01000074 	movhi	r4,1
811268c4:	310d883a 	add	r6,r6,r4
811268c8:	1828d43a 	srli	r20,r3,16
811268cc:	a18d883a 	add	r6,r20,r6
811268d0:	81803e36 	bltu	r16,r6,811269cc <__udivdi3+0x50c>
811268d4:	81803826 	beq	r16,r6,811269b8 <__udivdi3+0x4f8>
811268d8:	0007883a 	mov	r3,zero
811268dc:	003fa206 	br	81126768 <__reset+0xfb106768>
811268e0:	88e2983a 	sll	r17,r17,r3
811268e4:	80a8d83a 	srl	r20,r16,r2
811268e8:	80e0983a 	sll	r16,r16,r3
811268ec:	882ad43a 	srli	r21,r17,16
811268f0:	9884d83a 	srl	r2,r19,r2
811268f4:	a009883a 	mov	r4,r20
811268f8:	a80b883a 	mov	r5,r21
811268fc:	142eb03a 	or	r23,r2,r16
81126900:	98e4983a 	sll	r18,r19,r3
81126904:	11270dc0 	call	811270dc <__umodsi3>
81126908:	a009883a 	mov	r4,r20
8112690c:	a80b883a 	mov	r5,r21
81126910:	1021883a 	mov	r16,r2
81126914:	11270780 	call	81127078 <__udivsi3>
81126918:	1039883a 	mov	fp,r2
8112691c:	8d3fffcc 	andi	r20,r17,65535
81126920:	8020943a 	slli	r16,r16,16
81126924:	b804d43a 	srli	r2,r23,16
81126928:	a72d383a 	mul	r22,r20,fp
8112692c:	1404b03a 	or	r2,r2,r16
81126930:	1580062e 	bgeu	r2,r22,8112694c <__udivdi3+0x48c>
81126934:	1445883a 	add	r2,r2,r17
81126938:	e0ffffc4 	addi	r3,fp,-1
8112693c:	14403836 	bltu	r2,r17,81126a20 <__udivdi3+0x560>
81126940:	1580372e 	bgeu	r2,r22,81126a20 <__udivdi3+0x560>
81126944:	e73fff84 	addi	fp,fp,-2
81126948:	1445883a 	add	r2,r2,r17
8112694c:	15adc83a 	sub	r22,r2,r22
81126950:	a80b883a 	mov	r5,r21
81126954:	b009883a 	mov	r4,r22
81126958:	11270dc0 	call	811270dc <__umodsi3>
8112695c:	1027883a 	mov	r19,r2
81126960:	b009883a 	mov	r4,r22
81126964:	a80b883a 	mov	r5,r21
81126968:	11270780 	call	81127078 <__udivsi3>
8112696c:	9826943a 	slli	r19,r19,16
81126970:	a0a1383a 	mul	r16,r20,r2
81126974:	b93fffcc 	andi	r4,r23,65535
81126978:	24c8b03a 	or	r4,r4,r19
8112697c:	2400062e 	bgeu	r4,r16,81126998 <__udivdi3+0x4d8>
81126980:	2449883a 	add	r4,r4,r17
81126984:	10ffffc4 	addi	r3,r2,-1
81126988:	24402336 	bltu	r4,r17,81126a18 <__udivdi3+0x558>
8112698c:	2400222e 	bgeu	r4,r16,81126a18 <__udivdi3+0x558>
81126990:	10bfff84 	addi	r2,r2,-2
81126994:	2449883a 	add	r4,r4,r17
81126998:	e038943a 	slli	fp,fp,16
8112699c:	2421c83a 	sub	r16,r4,r16
811269a0:	e086b03a 	or	r3,fp,r2
811269a4:	003f4306 	br	811266b4 <__reset+0xfb1066b4>
811269a8:	2005883a 	mov	r2,r4
811269ac:	003f6906 	br	81126754 <__reset+0xfb106754>
811269b0:	1805883a 	mov	r2,r3
811269b4:	003f0f06 	br	811265f4 <__reset+0xfb1065f4>
811269b8:	1806943a 	slli	r3,r3,16
811269bc:	9d66983a 	sll	r19,r19,r21
811269c0:	39ffffcc 	andi	r7,r7,65535
811269c4:	19c7883a 	add	r3,r3,r7
811269c8:	98ffc32e 	bgeu	r19,r3,811268d8 <__reset+0xfb1068d8>
811269cc:	10bfffc4 	addi	r2,r2,-1
811269d0:	003fc106 	br	811268d8 <__reset+0xfb1068d8>
811269d4:	00800604 	movi	r2,24
811269d8:	003f1106 	br	81126620 <__reset+0xfb106620>
811269dc:	00800604 	movi	r2,24
811269e0:	003f2706 	br	81126680 <__reset+0xfb106680>
811269e4:	00800604 	movi	r2,24
811269e8:	003ece06 	br	81126524 <__reset+0xfb106524>
811269ec:	0007883a 	mov	r3,zero
811269f0:	00800044 	movi	r2,1
811269f4:	003f5c06 	br	81126768 <__reset+0xfb106768>
811269f8:	813fa12e 	bgeu	r16,r4,81126880 <__reset+0xfb106880>
811269fc:	10bfff84 	addi	r2,r2,-2
81126a00:	85e1883a 	add	r16,r16,r23
81126a04:	003f9f06 	br	81126884 <__reset+0xfb106884>
81126a08:	1c7f8a2e 	bgeu	r3,r17,81126834 <__reset+0xfb106834>
81126a0c:	31bfff84 	addi	r6,r6,-2
81126a10:	1dc7883a 	add	r3,r3,r23
81126a14:	003f8806 	br	81126838 <__reset+0xfb106838>
81126a18:	1805883a 	mov	r2,r3
81126a1c:	003fde06 	br	81126998 <__reset+0xfb106998>
81126a20:	1839883a 	mov	fp,r3
81126a24:	003fc906 	br	8112694c <__reset+0xfb10694c>
81126a28:	b5bfff84 	addi	r22,r22,-2
81126a2c:	2449883a 	add	r4,r4,r17
81126a30:	003f3406 	br	81126704 <__reset+0xfb106704>
81126a34:	b5bfff84 	addi	r22,r22,-2
81126a38:	1445883a 	add	r2,r2,r17
81126a3c:	003edb06 	br	811265ac <__reset+0xfb1065ac>

81126a40 <__umoddi3>:
81126a40:	defff404 	addi	sp,sp,-48
81126a44:	de00012e 	bgeu	sp,et,81126a4c <__umoddi3+0xc>
81126a48:	003b68fa 	trap	3
81126a4c:	df000a15 	stw	fp,40(sp)
81126a50:	dc400315 	stw	r17,12(sp)
81126a54:	dc000215 	stw	r16,8(sp)
81126a58:	dfc00b15 	stw	ra,44(sp)
81126a5c:	ddc00915 	stw	r23,36(sp)
81126a60:	dd800815 	stw	r22,32(sp)
81126a64:	dd400715 	stw	r21,28(sp)
81126a68:	dd000615 	stw	r20,24(sp)
81126a6c:	dcc00515 	stw	r19,20(sp)
81126a70:	dc800415 	stw	r18,16(sp)
81126a74:	2021883a 	mov	r16,r4
81126a78:	2823883a 	mov	r17,r5
81126a7c:	2839883a 	mov	fp,r5
81126a80:	38003c1e 	bne	r7,zero,81126b74 <__umoddi3+0x134>
81126a84:	3027883a 	mov	r19,r6
81126a88:	2029883a 	mov	r20,r4
81126a8c:	2980512e 	bgeu	r5,r6,81126bd4 <__umoddi3+0x194>
81126a90:	00bfffd4 	movui	r2,65535
81126a94:	11809a36 	bltu	r2,r6,81126d00 <__umoddi3+0x2c0>
81126a98:	01003fc4 	movi	r4,255
81126a9c:	2189803a 	cmpltu	r4,r4,r6
81126aa0:	200890fa 	slli	r4,r4,3
81126aa4:	3104d83a 	srl	r2,r6,r4
81126aa8:	00e04534 	movhi	r3,33044
81126aac:	18c7b904 	addi	r3,r3,7908
81126ab0:	1885883a 	add	r2,r3,r2
81126ab4:	10c00003 	ldbu	r3,0(r2)
81126ab8:	00800804 	movi	r2,32
81126abc:	1909883a 	add	r4,r3,r4
81126ac0:	1125c83a 	sub	r18,r2,r4
81126ac4:	90000526 	beq	r18,zero,81126adc <__umoddi3+0x9c>
81126ac8:	8ca2983a 	sll	r17,r17,r18
81126acc:	8108d83a 	srl	r4,r16,r4
81126ad0:	34a6983a 	sll	r19,r6,r18
81126ad4:	84a8983a 	sll	r20,r16,r18
81126ad8:	2478b03a 	or	fp,r4,r17
81126adc:	982ed43a 	srli	r23,r19,16
81126ae0:	e009883a 	mov	r4,fp
81126ae4:	9dbfffcc 	andi	r22,r19,65535
81126ae8:	b80b883a 	mov	r5,r23
81126aec:	11270dc0 	call	811270dc <__umodsi3>
81126af0:	e009883a 	mov	r4,fp
81126af4:	b80b883a 	mov	r5,r23
81126af8:	102b883a 	mov	r21,r2
81126afc:	11270780 	call	81127078 <__udivsi3>
81126b00:	a806943a 	slli	r3,r21,16
81126b04:	a008d43a 	srli	r4,r20,16
81126b08:	b085383a 	mul	r2,r22,r2
81126b0c:	20c8b03a 	or	r4,r4,r3
81126b10:	2080032e 	bgeu	r4,r2,81126b20 <__umoddi3+0xe0>
81126b14:	24c9883a 	add	r4,r4,r19
81126b18:	24c00136 	bltu	r4,r19,81126b20 <__umoddi3+0xe0>
81126b1c:	20811036 	bltu	r4,r2,81126f60 <__umoddi3+0x520>
81126b20:	20abc83a 	sub	r21,r4,r2
81126b24:	b80b883a 	mov	r5,r23
81126b28:	a809883a 	mov	r4,r21
81126b2c:	11270dc0 	call	811270dc <__umodsi3>
81126b30:	1023883a 	mov	r17,r2
81126b34:	b80b883a 	mov	r5,r23
81126b38:	a809883a 	mov	r4,r21
81126b3c:	11270780 	call	81127078 <__udivsi3>
81126b40:	8822943a 	slli	r17,r17,16
81126b44:	b085383a 	mul	r2,r22,r2
81126b48:	a0ffffcc 	andi	r3,r20,65535
81126b4c:	1c46b03a 	or	r3,r3,r17
81126b50:	1880042e 	bgeu	r3,r2,81126b64 <__umoddi3+0x124>
81126b54:	1cc7883a 	add	r3,r3,r19
81126b58:	1cc00236 	bltu	r3,r19,81126b64 <__umoddi3+0x124>
81126b5c:	1880012e 	bgeu	r3,r2,81126b64 <__umoddi3+0x124>
81126b60:	1cc7883a 	add	r3,r3,r19
81126b64:	1885c83a 	sub	r2,r3,r2
81126b68:	1484d83a 	srl	r2,r2,r18
81126b6c:	0007883a 	mov	r3,zero
81126b70:	00004f06 	br	81126cb0 <__umoddi3+0x270>
81126b74:	29c04c36 	bltu	r5,r7,81126ca8 <__umoddi3+0x268>
81126b78:	00bfffd4 	movui	r2,65535
81126b7c:	11c0582e 	bgeu	r2,r7,81126ce0 <__umoddi3+0x2a0>
81126b80:	00804034 	movhi	r2,256
81126b84:	10bfffc4 	addi	r2,r2,-1
81126b88:	11c0e736 	bltu	r2,r7,81126f28 <__umoddi3+0x4e8>
81126b8c:	01000404 	movi	r4,16
81126b90:	3904d83a 	srl	r2,r7,r4
81126b94:	00e04534 	movhi	r3,33044
81126b98:	18c7b904 	addi	r3,r3,7908
81126b9c:	1885883a 	add	r2,r3,r2
81126ba0:	14c00003 	ldbu	r19,0(r2)
81126ba4:	00c00804 	movi	r3,32
81126ba8:	9927883a 	add	r19,r19,r4
81126bac:	1ce9c83a 	sub	r20,r3,r19
81126bb0:	a000581e 	bne	r20,zero,81126d14 <__umoddi3+0x2d4>
81126bb4:	3c400136 	bltu	r7,r17,81126bbc <__umoddi3+0x17c>
81126bb8:	8180eb36 	bltu	r16,r6,81126f68 <__umoddi3+0x528>
81126bbc:	8185c83a 	sub	r2,r16,r6
81126bc0:	89e3c83a 	sub	r17,r17,r7
81126bc4:	8089803a 	cmpltu	r4,r16,r2
81126bc8:	8939c83a 	sub	fp,r17,r4
81126bcc:	e007883a 	mov	r3,fp
81126bd0:	00003706 	br	81126cb0 <__umoddi3+0x270>
81126bd4:	3000041e 	bne	r6,zero,81126be8 <__umoddi3+0x1a8>
81126bd8:	000b883a 	mov	r5,zero
81126bdc:	01000044 	movi	r4,1
81126be0:	11270780 	call	81127078 <__udivsi3>
81126be4:	1027883a 	mov	r19,r2
81126be8:	00bfffd4 	movui	r2,65535
81126bec:	14c0402e 	bgeu	r2,r19,81126cf0 <__umoddi3+0x2b0>
81126bf0:	00804034 	movhi	r2,256
81126bf4:	10bfffc4 	addi	r2,r2,-1
81126bf8:	14c0cd36 	bltu	r2,r19,81126f30 <__umoddi3+0x4f0>
81126bfc:	00800404 	movi	r2,16
81126c00:	9886d83a 	srl	r3,r19,r2
81126c04:	01204534 	movhi	r4,33044
81126c08:	2107b904 	addi	r4,r4,7908
81126c0c:	20c7883a 	add	r3,r4,r3
81126c10:	18c00003 	ldbu	r3,0(r3)
81126c14:	1887883a 	add	r3,r3,r2
81126c18:	00800804 	movi	r2,32
81126c1c:	10e5c83a 	sub	r18,r2,r3
81126c20:	9000901e 	bne	r18,zero,81126e64 <__umoddi3+0x424>
81126c24:	982cd43a 	srli	r22,r19,16
81126c28:	8ce3c83a 	sub	r17,r17,r19
81126c2c:	9d7fffcc 	andi	r21,r19,65535
81126c30:	b00b883a 	mov	r5,r22
81126c34:	8809883a 	mov	r4,r17
81126c38:	11270dc0 	call	811270dc <__umodsi3>
81126c3c:	8809883a 	mov	r4,r17
81126c40:	b00b883a 	mov	r5,r22
81126c44:	1021883a 	mov	r16,r2
81126c48:	11270780 	call	81127078 <__udivsi3>
81126c4c:	8006943a 	slli	r3,r16,16
81126c50:	a008d43a 	srli	r4,r20,16
81126c54:	1545383a 	mul	r2,r2,r21
81126c58:	20c8b03a 	or	r4,r4,r3
81126c5c:	2080042e 	bgeu	r4,r2,81126c70 <__umoddi3+0x230>
81126c60:	24c9883a 	add	r4,r4,r19
81126c64:	24c00236 	bltu	r4,r19,81126c70 <__umoddi3+0x230>
81126c68:	2080012e 	bgeu	r4,r2,81126c70 <__umoddi3+0x230>
81126c6c:	24c9883a 	add	r4,r4,r19
81126c70:	20a1c83a 	sub	r16,r4,r2
81126c74:	b00b883a 	mov	r5,r22
81126c78:	8009883a 	mov	r4,r16
81126c7c:	11270dc0 	call	811270dc <__umodsi3>
81126c80:	1023883a 	mov	r17,r2
81126c84:	b00b883a 	mov	r5,r22
81126c88:	8009883a 	mov	r4,r16
81126c8c:	11270780 	call	81127078 <__udivsi3>
81126c90:	8822943a 	slli	r17,r17,16
81126c94:	1545383a 	mul	r2,r2,r21
81126c98:	a53fffcc 	andi	r20,r20,65535
81126c9c:	a446b03a 	or	r3,r20,r17
81126ca0:	18bfb02e 	bgeu	r3,r2,81126b64 <__reset+0xfb106b64>
81126ca4:	003fab06 	br	81126b54 <__reset+0xfb106b54>
81126ca8:	2005883a 	mov	r2,r4
81126cac:	2807883a 	mov	r3,r5
81126cb0:	dfc00b17 	ldw	ra,44(sp)
81126cb4:	df000a17 	ldw	fp,40(sp)
81126cb8:	ddc00917 	ldw	r23,36(sp)
81126cbc:	dd800817 	ldw	r22,32(sp)
81126cc0:	dd400717 	ldw	r21,28(sp)
81126cc4:	dd000617 	ldw	r20,24(sp)
81126cc8:	dcc00517 	ldw	r19,20(sp)
81126ccc:	dc800417 	ldw	r18,16(sp)
81126cd0:	dc400317 	ldw	r17,12(sp)
81126cd4:	dc000217 	ldw	r16,8(sp)
81126cd8:	dec00c04 	addi	sp,sp,48
81126cdc:	f800283a 	ret
81126ce0:	04c03fc4 	movi	r19,255
81126ce4:	99c9803a 	cmpltu	r4,r19,r7
81126ce8:	200890fa 	slli	r4,r4,3
81126cec:	003fa806 	br	81126b90 <__reset+0xfb106b90>
81126cf0:	00803fc4 	movi	r2,255
81126cf4:	14c5803a 	cmpltu	r2,r2,r19
81126cf8:	100490fa 	slli	r2,r2,3
81126cfc:	003fc006 	br	81126c00 <__reset+0xfb106c00>
81126d00:	00804034 	movhi	r2,256
81126d04:	10bfffc4 	addi	r2,r2,-1
81126d08:	11808b36 	bltu	r2,r6,81126f38 <__umoddi3+0x4f8>
81126d0c:	01000404 	movi	r4,16
81126d10:	003f6406 	br	81126aa4 <__reset+0xfb106aa4>
81126d14:	34c4d83a 	srl	r2,r6,r19
81126d18:	3d0e983a 	sll	r7,r7,r20
81126d1c:	8cf8d83a 	srl	fp,r17,r19
81126d20:	8d10983a 	sll	r8,r17,r20
81126d24:	38aab03a 	or	r21,r7,r2
81126d28:	a82cd43a 	srli	r22,r21,16
81126d2c:	84e2d83a 	srl	r17,r16,r19
81126d30:	e009883a 	mov	r4,fp
81126d34:	b00b883a 	mov	r5,r22
81126d38:	8a22b03a 	or	r17,r17,r8
81126d3c:	3524983a 	sll	r18,r6,r20
81126d40:	11270dc0 	call	811270dc <__umodsi3>
81126d44:	e009883a 	mov	r4,fp
81126d48:	b00b883a 	mov	r5,r22
81126d4c:	102f883a 	mov	r23,r2
81126d50:	11270780 	call	81127078 <__udivsi3>
81126d54:	100d883a 	mov	r6,r2
81126d58:	b808943a 	slli	r4,r23,16
81126d5c:	aa3fffcc 	andi	r8,r21,65535
81126d60:	8804d43a 	srli	r2,r17,16
81126d64:	41af383a 	mul	r23,r8,r6
81126d68:	8520983a 	sll	r16,r16,r20
81126d6c:	1104b03a 	or	r2,r2,r4
81126d70:	15c0042e 	bgeu	r2,r23,81126d84 <__umoddi3+0x344>
81126d74:	1545883a 	add	r2,r2,r21
81126d78:	30ffffc4 	addi	r3,r6,-1
81126d7c:	1540742e 	bgeu	r2,r21,81126f50 <__umoddi3+0x510>
81126d80:	180d883a 	mov	r6,r3
81126d84:	15efc83a 	sub	r23,r2,r23
81126d88:	b00b883a 	mov	r5,r22
81126d8c:	b809883a 	mov	r4,r23
81126d90:	d9800115 	stw	r6,4(sp)
81126d94:	da000015 	stw	r8,0(sp)
81126d98:	11270dc0 	call	811270dc <__umodsi3>
81126d9c:	b00b883a 	mov	r5,r22
81126da0:	b809883a 	mov	r4,r23
81126da4:	1039883a 	mov	fp,r2
81126da8:	11270780 	call	81127078 <__udivsi3>
81126dac:	da000017 	ldw	r8,0(sp)
81126db0:	e038943a 	slli	fp,fp,16
81126db4:	100b883a 	mov	r5,r2
81126db8:	4089383a 	mul	r4,r8,r2
81126dbc:	8a3fffcc 	andi	r8,r17,65535
81126dc0:	4710b03a 	or	r8,r8,fp
81126dc4:	d9800117 	ldw	r6,4(sp)
81126dc8:	4100042e 	bgeu	r8,r4,81126ddc <__umoddi3+0x39c>
81126dcc:	4551883a 	add	r8,r8,r21
81126dd0:	10bfffc4 	addi	r2,r2,-1
81126dd4:	45405a2e 	bgeu	r8,r21,81126f40 <__umoddi3+0x500>
81126dd8:	100b883a 	mov	r5,r2
81126ddc:	300c943a 	slli	r6,r6,16
81126de0:	91ffffcc 	andi	r7,r18,65535
81126de4:	9004d43a 	srli	r2,r18,16
81126de8:	314cb03a 	or	r6,r6,r5
81126dec:	317fffcc 	andi	r5,r6,65535
81126df0:	300cd43a 	srli	r6,r6,16
81126df4:	29d3383a 	mul	r9,r5,r7
81126df8:	288b383a 	mul	r5,r5,r2
81126dfc:	31cf383a 	mul	r7,r6,r7
81126e00:	4806d43a 	srli	r3,r9,16
81126e04:	4111c83a 	sub	r8,r8,r4
81126e08:	29cb883a 	add	r5,r5,r7
81126e0c:	194b883a 	add	r5,r3,r5
81126e10:	3085383a 	mul	r2,r6,r2
81126e14:	29c0022e 	bgeu	r5,r7,81126e20 <__umoddi3+0x3e0>
81126e18:	00c00074 	movhi	r3,1
81126e1c:	10c5883a 	add	r2,r2,r3
81126e20:	2808d43a 	srli	r4,r5,16
81126e24:	280a943a 	slli	r5,r5,16
81126e28:	4a7fffcc 	andi	r9,r9,65535
81126e2c:	2085883a 	add	r2,r4,r2
81126e30:	2a4b883a 	add	r5,r5,r9
81126e34:	40803636 	bltu	r8,r2,81126f10 <__umoddi3+0x4d0>
81126e38:	40804d26 	beq	r8,r2,81126f70 <__umoddi3+0x530>
81126e3c:	4089c83a 	sub	r4,r8,r2
81126e40:	280f883a 	mov	r7,r5
81126e44:	81cfc83a 	sub	r7,r16,r7
81126e48:	81c7803a 	cmpltu	r3,r16,r7
81126e4c:	20c7c83a 	sub	r3,r4,r3
81126e50:	1cc4983a 	sll	r2,r3,r19
81126e54:	3d0ed83a 	srl	r7,r7,r20
81126e58:	1d06d83a 	srl	r3,r3,r20
81126e5c:	11c4b03a 	or	r2,r2,r7
81126e60:	003f9306 	br	81126cb0 <__reset+0xfb106cb0>
81126e64:	9ca6983a 	sll	r19,r19,r18
81126e68:	88e8d83a 	srl	r20,r17,r3
81126e6c:	80c4d83a 	srl	r2,r16,r3
81126e70:	982cd43a 	srli	r22,r19,16
81126e74:	8ca2983a 	sll	r17,r17,r18
81126e78:	a009883a 	mov	r4,r20
81126e7c:	b00b883a 	mov	r5,r22
81126e80:	1478b03a 	or	fp,r2,r17
81126e84:	11270dc0 	call	811270dc <__umodsi3>
81126e88:	a009883a 	mov	r4,r20
81126e8c:	b00b883a 	mov	r5,r22
81126e90:	1023883a 	mov	r17,r2
81126e94:	11270780 	call	81127078 <__udivsi3>
81126e98:	9d7fffcc 	andi	r21,r19,65535
81126e9c:	880a943a 	slli	r5,r17,16
81126ea0:	e008d43a 	srli	r4,fp,16
81126ea4:	a885383a 	mul	r2,r21,r2
81126ea8:	84a8983a 	sll	r20,r16,r18
81126eac:	2148b03a 	or	r4,r4,r5
81126eb0:	2080042e 	bgeu	r4,r2,81126ec4 <__umoddi3+0x484>
81126eb4:	24c9883a 	add	r4,r4,r19
81126eb8:	24c00236 	bltu	r4,r19,81126ec4 <__umoddi3+0x484>
81126ebc:	2080012e 	bgeu	r4,r2,81126ec4 <__umoddi3+0x484>
81126ec0:	24c9883a 	add	r4,r4,r19
81126ec4:	20a3c83a 	sub	r17,r4,r2
81126ec8:	b00b883a 	mov	r5,r22
81126ecc:	8809883a 	mov	r4,r17
81126ed0:	11270dc0 	call	811270dc <__umodsi3>
81126ed4:	102f883a 	mov	r23,r2
81126ed8:	8809883a 	mov	r4,r17
81126edc:	b00b883a 	mov	r5,r22
81126ee0:	11270780 	call	81127078 <__udivsi3>
81126ee4:	b82e943a 	slli	r23,r23,16
81126ee8:	a885383a 	mul	r2,r21,r2
81126eec:	e13fffcc 	andi	r4,fp,65535
81126ef0:	25c8b03a 	or	r4,r4,r23
81126ef4:	2080042e 	bgeu	r4,r2,81126f08 <__umoddi3+0x4c8>
81126ef8:	24c9883a 	add	r4,r4,r19
81126efc:	24c00236 	bltu	r4,r19,81126f08 <__umoddi3+0x4c8>
81126f00:	2080012e 	bgeu	r4,r2,81126f08 <__umoddi3+0x4c8>
81126f04:	24c9883a 	add	r4,r4,r19
81126f08:	20a3c83a 	sub	r17,r4,r2
81126f0c:	003f4806 	br	81126c30 <__reset+0xfb106c30>
81126f10:	2c8fc83a 	sub	r7,r5,r18
81126f14:	1545c83a 	sub	r2,r2,r21
81126f18:	29cb803a 	cmpltu	r5,r5,r7
81126f1c:	1145c83a 	sub	r2,r2,r5
81126f20:	4089c83a 	sub	r4,r8,r2
81126f24:	003fc706 	br	81126e44 <__reset+0xfb106e44>
81126f28:	01000604 	movi	r4,24
81126f2c:	003f1806 	br	81126b90 <__reset+0xfb106b90>
81126f30:	00800604 	movi	r2,24
81126f34:	003f3206 	br	81126c00 <__reset+0xfb106c00>
81126f38:	01000604 	movi	r4,24
81126f3c:	003ed906 	br	81126aa4 <__reset+0xfb106aa4>
81126f40:	413fa52e 	bgeu	r8,r4,81126dd8 <__reset+0xfb106dd8>
81126f44:	297fff84 	addi	r5,r5,-2
81126f48:	4551883a 	add	r8,r8,r21
81126f4c:	003fa306 	br	81126ddc <__reset+0xfb106ddc>
81126f50:	15ff8b2e 	bgeu	r2,r23,81126d80 <__reset+0xfb106d80>
81126f54:	31bfff84 	addi	r6,r6,-2
81126f58:	1545883a 	add	r2,r2,r21
81126f5c:	003f8906 	br	81126d84 <__reset+0xfb106d84>
81126f60:	24c9883a 	add	r4,r4,r19
81126f64:	003eee06 	br	81126b20 <__reset+0xfb106b20>
81126f68:	8005883a 	mov	r2,r16
81126f6c:	003f1706 	br	81126bcc <__reset+0xfb106bcc>
81126f70:	817fe736 	bltu	r16,r5,81126f10 <__reset+0xfb106f10>
81126f74:	280f883a 	mov	r7,r5
81126f78:	0009883a 	mov	r4,zero
81126f7c:	003fb106 	br	81126e44 <__reset+0xfb106e44>

81126f80 <__divsi3>:
81126f80:	20001b16 	blt	r4,zero,81126ff0 <__divsi3+0x70>
81126f84:	000f883a 	mov	r7,zero
81126f88:	28001616 	blt	r5,zero,81126fe4 <__divsi3+0x64>
81126f8c:	200d883a 	mov	r6,r4
81126f90:	29001a2e 	bgeu	r5,r4,81126ffc <__divsi3+0x7c>
81126f94:	00800804 	movi	r2,32
81126f98:	00c00044 	movi	r3,1
81126f9c:	00000106 	br	81126fa4 <__divsi3+0x24>
81126fa0:	10000d26 	beq	r2,zero,81126fd8 <__divsi3+0x58>
81126fa4:	294b883a 	add	r5,r5,r5
81126fa8:	10bfffc4 	addi	r2,r2,-1
81126fac:	18c7883a 	add	r3,r3,r3
81126fb0:	293ffb36 	bltu	r5,r4,81126fa0 <__reset+0xfb106fa0>
81126fb4:	0005883a 	mov	r2,zero
81126fb8:	18000726 	beq	r3,zero,81126fd8 <__divsi3+0x58>
81126fbc:	0005883a 	mov	r2,zero
81126fc0:	31400236 	bltu	r6,r5,81126fcc <__divsi3+0x4c>
81126fc4:	314dc83a 	sub	r6,r6,r5
81126fc8:	10c4b03a 	or	r2,r2,r3
81126fcc:	1806d07a 	srli	r3,r3,1
81126fd0:	280ad07a 	srli	r5,r5,1
81126fd4:	183ffa1e 	bne	r3,zero,81126fc0 <__reset+0xfb106fc0>
81126fd8:	38000126 	beq	r7,zero,81126fe0 <__divsi3+0x60>
81126fdc:	0085c83a 	sub	r2,zero,r2
81126fe0:	f800283a 	ret
81126fe4:	014bc83a 	sub	r5,zero,r5
81126fe8:	39c0005c 	xori	r7,r7,1
81126fec:	003fe706 	br	81126f8c <__reset+0xfb106f8c>
81126ff0:	0109c83a 	sub	r4,zero,r4
81126ff4:	01c00044 	movi	r7,1
81126ff8:	003fe306 	br	81126f88 <__reset+0xfb106f88>
81126ffc:	00c00044 	movi	r3,1
81127000:	003fee06 	br	81126fbc <__reset+0xfb106fbc>

81127004 <__modsi3>:
81127004:	20001716 	blt	r4,zero,81127064 <__modsi3+0x60>
81127008:	000f883a 	mov	r7,zero
8112700c:	2005883a 	mov	r2,r4
81127010:	28001216 	blt	r5,zero,8112705c <__modsi3+0x58>
81127014:	2900162e 	bgeu	r5,r4,81127070 <__modsi3+0x6c>
81127018:	01800804 	movi	r6,32
8112701c:	00c00044 	movi	r3,1
81127020:	00000106 	br	81127028 <__modsi3+0x24>
81127024:	30000a26 	beq	r6,zero,81127050 <__modsi3+0x4c>
81127028:	294b883a 	add	r5,r5,r5
8112702c:	31bfffc4 	addi	r6,r6,-1
81127030:	18c7883a 	add	r3,r3,r3
81127034:	293ffb36 	bltu	r5,r4,81127024 <__reset+0xfb107024>
81127038:	18000526 	beq	r3,zero,81127050 <__modsi3+0x4c>
8112703c:	1806d07a 	srli	r3,r3,1
81127040:	11400136 	bltu	r2,r5,81127048 <__modsi3+0x44>
81127044:	1145c83a 	sub	r2,r2,r5
81127048:	280ad07a 	srli	r5,r5,1
8112704c:	183ffb1e 	bne	r3,zero,8112703c <__reset+0xfb10703c>
81127050:	38000126 	beq	r7,zero,81127058 <__modsi3+0x54>
81127054:	0085c83a 	sub	r2,zero,r2
81127058:	f800283a 	ret
8112705c:	014bc83a 	sub	r5,zero,r5
81127060:	003fec06 	br	81127014 <__reset+0xfb107014>
81127064:	0109c83a 	sub	r4,zero,r4
81127068:	01c00044 	movi	r7,1
8112706c:	003fe706 	br	8112700c <__reset+0xfb10700c>
81127070:	00c00044 	movi	r3,1
81127074:	003ff106 	br	8112703c <__reset+0xfb10703c>

81127078 <__udivsi3>:
81127078:	200d883a 	mov	r6,r4
8112707c:	2900152e 	bgeu	r5,r4,811270d4 <__udivsi3+0x5c>
81127080:	28001416 	blt	r5,zero,811270d4 <__udivsi3+0x5c>
81127084:	00800804 	movi	r2,32
81127088:	00c00044 	movi	r3,1
8112708c:	00000206 	br	81127098 <__udivsi3+0x20>
81127090:	10000e26 	beq	r2,zero,811270cc <__udivsi3+0x54>
81127094:	28000516 	blt	r5,zero,811270ac <__udivsi3+0x34>
81127098:	294b883a 	add	r5,r5,r5
8112709c:	10bfffc4 	addi	r2,r2,-1
811270a0:	18c7883a 	add	r3,r3,r3
811270a4:	293ffa36 	bltu	r5,r4,81127090 <__reset+0xfb107090>
811270a8:	18000826 	beq	r3,zero,811270cc <__udivsi3+0x54>
811270ac:	0005883a 	mov	r2,zero
811270b0:	31400236 	bltu	r6,r5,811270bc <__udivsi3+0x44>
811270b4:	314dc83a 	sub	r6,r6,r5
811270b8:	10c4b03a 	or	r2,r2,r3
811270bc:	1806d07a 	srli	r3,r3,1
811270c0:	280ad07a 	srli	r5,r5,1
811270c4:	183ffa1e 	bne	r3,zero,811270b0 <__reset+0xfb1070b0>
811270c8:	f800283a 	ret
811270cc:	0005883a 	mov	r2,zero
811270d0:	f800283a 	ret
811270d4:	00c00044 	movi	r3,1
811270d8:	003ff406 	br	811270ac <__reset+0xfb1070ac>

811270dc <__umodsi3>:
811270dc:	2005883a 	mov	r2,r4
811270e0:	2900122e 	bgeu	r5,r4,8112712c <__umodsi3+0x50>
811270e4:	28001116 	blt	r5,zero,8112712c <__umodsi3+0x50>
811270e8:	01800804 	movi	r6,32
811270ec:	00c00044 	movi	r3,1
811270f0:	00000206 	br	811270fc <__umodsi3+0x20>
811270f4:	30000c26 	beq	r6,zero,81127128 <__umodsi3+0x4c>
811270f8:	28000516 	blt	r5,zero,81127110 <__umodsi3+0x34>
811270fc:	294b883a 	add	r5,r5,r5
81127100:	31bfffc4 	addi	r6,r6,-1
81127104:	18c7883a 	add	r3,r3,r3
81127108:	293ffa36 	bltu	r5,r4,811270f4 <__reset+0xfb1070f4>
8112710c:	18000626 	beq	r3,zero,81127128 <__umodsi3+0x4c>
81127110:	1806d07a 	srli	r3,r3,1
81127114:	11400136 	bltu	r2,r5,8112711c <__umodsi3+0x40>
81127118:	1145c83a 	sub	r2,r2,r5
8112711c:	280ad07a 	srli	r5,r5,1
81127120:	183ffb1e 	bne	r3,zero,81127110 <__reset+0xfb107110>
81127124:	f800283a 	ret
81127128:	f800283a 	ret
8112712c:	00c00044 	movi	r3,1
81127130:	003ff706 	br	81127110 <__reset+0xfb107110>

81127134 <__eqsf2>:
81127134:	2006d5fa 	srli	r3,r4,23
81127138:	280cd5fa 	srli	r6,r5,23
8112713c:	01c02034 	movhi	r7,128
81127140:	39ffffc4 	addi	r7,r7,-1
81127144:	18c03fcc 	andi	r3,r3,255
81127148:	02003fc4 	movi	r8,255
8112714c:	3904703a 	and	r2,r7,r4
81127150:	31803fcc 	andi	r6,r6,255
81127154:	394e703a 	and	r7,r7,r5
81127158:	2008d7fa 	srli	r4,r4,31
8112715c:	280ad7fa 	srli	r5,r5,31
81127160:	1a000d26 	beq	r3,r8,81127198 <__eqsf2+0x64>
81127164:	02003fc4 	movi	r8,255
81127168:	32000826 	beq	r6,r8,8112718c <__eqsf2+0x58>
8112716c:	19800226 	beq	r3,r6,81127178 <__eqsf2+0x44>
81127170:	00800044 	movi	r2,1
81127174:	f800283a 	ret
81127178:	11fffd1e 	bne	r2,r7,81127170 <__reset+0xfb107170>
8112717c:	21400926 	beq	r4,r5,811271a4 <__eqsf2+0x70>
81127180:	183ffb1e 	bne	r3,zero,81127170 <__reset+0xfb107170>
81127184:	1004c03a 	cmpne	r2,r2,zero
81127188:	f800283a 	ret
8112718c:	383ff726 	beq	r7,zero,8112716c <__reset+0xfb10716c>
81127190:	00800044 	movi	r2,1
81127194:	f800283a 	ret
81127198:	103ff226 	beq	r2,zero,81127164 <__reset+0xfb107164>
8112719c:	00800044 	movi	r2,1
811271a0:	f800283a 	ret
811271a4:	0005883a 	mov	r2,zero
811271a8:	f800283a 	ret

811271ac <__gesf2>:
811271ac:	2004d5fa 	srli	r2,r4,23
811271b0:	2806d5fa 	srli	r3,r5,23
811271b4:	01802034 	movhi	r6,128
811271b8:	31bfffc4 	addi	r6,r6,-1
811271bc:	10803fcc 	andi	r2,r2,255
811271c0:	01c03fc4 	movi	r7,255
811271c4:	3110703a 	and	r8,r6,r4
811271c8:	18c03fcc 	andi	r3,r3,255
811271cc:	314c703a 	and	r6,r6,r5
811271d0:	2008d7fa 	srli	r4,r4,31
811271d4:	280ad7fa 	srli	r5,r5,31
811271d8:	11c01926 	beq	r2,r7,81127240 <__gesf2+0x94>
811271dc:	01c03fc4 	movi	r7,255
811271e0:	19c00f26 	beq	r3,r7,81127220 <__gesf2+0x74>
811271e4:	1000061e 	bne	r2,zero,81127200 <__gesf2+0x54>
811271e8:	400f003a 	cmpeq	r7,r8,zero
811271ec:	1800071e 	bne	r3,zero,8112720c <__gesf2+0x60>
811271f0:	3000061e 	bne	r6,zero,8112720c <__gesf2+0x60>
811271f4:	0005883a 	mov	r2,zero
811271f8:	40000e1e 	bne	r8,zero,81127234 <__gesf2+0x88>
811271fc:	f800283a 	ret
81127200:	18000a1e 	bne	r3,zero,8112722c <__gesf2+0x80>
81127204:	30000b26 	beq	r6,zero,81127234 <__gesf2+0x88>
81127208:	000f883a 	mov	r7,zero
8112720c:	29403fcc 	andi	r5,r5,255
81127210:	38000726 	beq	r7,zero,81127230 <__gesf2+0x84>
81127214:	28000826 	beq	r5,zero,81127238 <__gesf2+0x8c>
81127218:	00800044 	movi	r2,1
8112721c:	f800283a 	ret
81127220:	303ff026 	beq	r6,zero,811271e4 <__reset+0xfb1071e4>
81127224:	00bfff84 	movi	r2,-2
81127228:	f800283a 	ret
8112722c:	29403fcc 	andi	r5,r5,255
81127230:	21400526 	beq	r4,r5,81127248 <__gesf2+0x9c>
81127234:	203ff826 	beq	r4,zero,81127218 <__reset+0xfb107218>
81127238:	00bfffc4 	movi	r2,-1
8112723c:	f800283a 	ret
81127240:	403fe626 	beq	r8,zero,811271dc <__reset+0xfb1071dc>
81127244:	003ff706 	br	81127224 <__reset+0xfb107224>
81127248:	18bffa16 	blt	r3,r2,81127234 <__reset+0xfb107234>
8112724c:	10c00216 	blt	r2,r3,81127258 <__gesf2+0xac>
81127250:	323ff836 	bltu	r6,r8,81127234 <__reset+0xfb107234>
81127254:	4180022e 	bgeu	r8,r6,81127260 <__gesf2+0xb4>
81127258:	203fef1e 	bne	r4,zero,81127218 <__reset+0xfb107218>
8112725c:	003ff606 	br	81127238 <__reset+0xfb107238>
81127260:	0005883a 	mov	r2,zero
81127264:	f800283a 	ret

81127268 <__lesf2>:
81127268:	2004d5fa 	srli	r2,r4,23
8112726c:	280cd5fa 	srli	r6,r5,23
81127270:	00c02034 	movhi	r3,128
81127274:	18ffffc4 	addi	r3,r3,-1
81127278:	10803fcc 	andi	r2,r2,255
8112727c:	01c03fc4 	movi	r7,255
81127280:	1910703a 	and	r8,r3,r4
81127284:	31803fcc 	andi	r6,r6,255
81127288:	1946703a 	and	r3,r3,r5
8112728c:	2008d7fa 	srli	r4,r4,31
81127290:	280ad7fa 	srli	r5,r5,31
81127294:	11c01b26 	beq	r2,r7,81127304 <__lesf2+0x9c>
81127298:	01c03fc4 	movi	r7,255
8112729c:	31c01126 	beq	r6,r7,811272e4 <__lesf2+0x7c>
811272a0:	1000071e 	bne	r2,zero,811272c0 <__lesf2+0x58>
811272a4:	400f003a 	cmpeq	r7,r8,zero
811272a8:	21003fcc 	andi	r4,r4,255
811272ac:	3000081e 	bne	r6,zero,811272d0 <__lesf2+0x68>
811272b0:	1800071e 	bne	r3,zero,811272d0 <__lesf2+0x68>
811272b4:	0005883a 	mov	r2,zero
811272b8:	40000f1e 	bne	r8,zero,811272f8 <__lesf2+0x90>
811272bc:	f800283a 	ret
811272c0:	21003fcc 	andi	r4,r4,255
811272c4:	30000a1e 	bne	r6,zero,811272f0 <__lesf2+0x88>
811272c8:	18000b26 	beq	r3,zero,811272f8 <__lesf2+0x90>
811272cc:	000f883a 	mov	r7,zero
811272d0:	29403fcc 	andi	r5,r5,255
811272d4:	38000726 	beq	r7,zero,811272f4 <__lesf2+0x8c>
811272d8:	28000826 	beq	r5,zero,811272fc <__lesf2+0x94>
811272dc:	00800044 	movi	r2,1
811272e0:	f800283a 	ret
811272e4:	183fee26 	beq	r3,zero,811272a0 <__reset+0xfb1072a0>
811272e8:	00800084 	movi	r2,2
811272ec:	f800283a 	ret
811272f0:	29403fcc 	andi	r5,r5,255
811272f4:	21400626 	beq	r4,r5,81127310 <__lesf2+0xa8>
811272f8:	203ff826 	beq	r4,zero,811272dc <__reset+0xfb1072dc>
811272fc:	00bfffc4 	movi	r2,-1
81127300:	f800283a 	ret
81127304:	403fe426 	beq	r8,zero,81127298 <__reset+0xfb107298>
81127308:	00800084 	movi	r2,2
8112730c:	f800283a 	ret
81127310:	30bff916 	blt	r6,r2,811272f8 <__reset+0xfb1072f8>
81127314:	11800216 	blt	r2,r6,81127320 <__lesf2+0xb8>
81127318:	1a3ff736 	bltu	r3,r8,811272f8 <__reset+0xfb1072f8>
8112731c:	40c0022e 	bgeu	r8,r3,81127328 <__lesf2+0xc0>
81127320:	203fee1e 	bne	r4,zero,811272dc <__reset+0xfb1072dc>
81127324:	003ff506 	br	811272fc <__reset+0xfb1072fc>
81127328:	0005883a 	mov	r2,zero
8112732c:	f800283a 	ret

81127330 <__adddf3>:
81127330:	02c00434 	movhi	r11,16
81127334:	5affffc4 	addi	r11,r11,-1
81127338:	2806d7fa 	srli	r3,r5,31
8112733c:	2ad4703a 	and	r10,r5,r11
81127340:	3ad2703a 	and	r9,r7,r11
81127344:	3804d53a 	srli	r2,r7,20
81127348:	3018d77a 	srli	r12,r6,29
8112734c:	280ad53a 	srli	r5,r5,20
81127350:	501490fa 	slli	r10,r10,3
81127354:	2010d77a 	srli	r8,r4,29
81127358:	481290fa 	slli	r9,r9,3
8112735c:	380ed7fa 	srli	r7,r7,31
81127360:	defffb04 	addi	sp,sp,-20
81127364:	de00012e 	bgeu	sp,et,8112736c <__adddf3+0x3c>
81127368:	003b68fa 	trap	3
8112736c:	dc800215 	stw	r18,8(sp)
81127370:	dc400115 	stw	r17,4(sp)
81127374:	dc000015 	stw	r16,0(sp)
81127378:	dfc00415 	stw	ra,16(sp)
8112737c:	dcc00315 	stw	r19,12(sp)
81127380:	1c803fcc 	andi	r18,r3,255
81127384:	2c01ffcc 	andi	r16,r5,2047
81127388:	5210b03a 	or	r8,r10,r8
8112738c:	202290fa 	slli	r17,r4,3
81127390:	1081ffcc 	andi	r2,r2,2047
81127394:	4b12b03a 	or	r9,r9,r12
81127398:	300c90fa 	slli	r6,r6,3
8112739c:	91c07526 	beq	r18,r7,81127574 <__adddf3+0x244>
811273a0:	8087c83a 	sub	r3,r16,r2
811273a4:	00c0ab0e 	bge	zero,r3,81127654 <__adddf3+0x324>
811273a8:	10002a1e 	bne	r2,zero,81127454 <__adddf3+0x124>
811273ac:	4984b03a 	or	r2,r9,r6
811273b0:	1000961e 	bne	r2,zero,8112760c <__adddf3+0x2dc>
811273b4:	888001cc 	andi	r2,r17,7
811273b8:	10000726 	beq	r2,zero,811273d8 <__adddf3+0xa8>
811273bc:	888003cc 	andi	r2,r17,15
811273c0:	00c00104 	movi	r3,4
811273c4:	10c00426 	beq	r2,r3,811273d8 <__adddf3+0xa8>
811273c8:	88c7883a 	add	r3,r17,r3
811273cc:	1c63803a 	cmpltu	r17,r3,r17
811273d0:	4451883a 	add	r8,r8,r17
811273d4:	1823883a 	mov	r17,r3
811273d8:	4080202c 	andhi	r2,r8,128
811273dc:	10005926 	beq	r2,zero,81127544 <__adddf3+0x214>
811273e0:	84000044 	addi	r16,r16,1
811273e4:	0081ffc4 	movi	r2,2047
811273e8:	8080ba26 	beq	r16,r2,811276d4 <__adddf3+0x3a4>
811273ec:	00bfe034 	movhi	r2,65408
811273f0:	10bfffc4 	addi	r2,r2,-1
811273f4:	4090703a 	and	r8,r8,r2
811273f8:	4004977a 	slli	r2,r8,29
811273fc:	4010927a 	slli	r8,r8,9
81127400:	8822d0fa 	srli	r17,r17,3
81127404:	8401ffcc 	andi	r16,r16,2047
81127408:	4010d33a 	srli	r8,r8,12
8112740c:	9007883a 	mov	r3,r18
81127410:	1444b03a 	or	r2,r2,r17
81127414:	8401ffcc 	andi	r16,r16,2047
81127418:	8020953a 	slli	r16,r16,20
8112741c:	18c03fcc 	andi	r3,r3,255
81127420:	01000434 	movhi	r4,16
81127424:	213fffc4 	addi	r4,r4,-1
81127428:	180697fa 	slli	r3,r3,31
8112742c:	4110703a 	and	r8,r8,r4
81127430:	4410b03a 	or	r8,r8,r16
81127434:	40c6b03a 	or	r3,r8,r3
81127438:	dfc00417 	ldw	ra,16(sp)
8112743c:	dcc00317 	ldw	r19,12(sp)
81127440:	dc800217 	ldw	r18,8(sp)
81127444:	dc400117 	ldw	r17,4(sp)
81127448:	dc000017 	ldw	r16,0(sp)
8112744c:	dec00504 	addi	sp,sp,20
81127450:	f800283a 	ret
81127454:	0081ffc4 	movi	r2,2047
81127458:	80bfd626 	beq	r16,r2,811273b4 <__reset+0xfb1073b4>
8112745c:	4a402034 	orhi	r9,r9,128
81127460:	00800e04 	movi	r2,56
81127464:	10c09f16 	blt	r2,r3,811276e4 <__adddf3+0x3b4>
81127468:	008007c4 	movi	r2,31
8112746c:	10c0c216 	blt	r2,r3,81127778 <__adddf3+0x448>
81127470:	00800804 	movi	r2,32
81127474:	10c5c83a 	sub	r2,r2,r3
81127478:	488a983a 	sll	r5,r9,r2
8112747c:	30c8d83a 	srl	r4,r6,r3
81127480:	3084983a 	sll	r2,r6,r2
81127484:	48c6d83a 	srl	r3,r9,r3
81127488:	290cb03a 	or	r6,r5,r4
8112748c:	1004c03a 	cmpne	r2,r2,zero
81127490:	308cb03a 	or	r6,r6,r2
81127494:	898dc83a 	sub	r6,r17,r6
81127498:	89a3803a 	cmpltu	r17,r17,r6
8112749c:	40d1c83a 	sub	r8,r8,r3
811274a0:	4451c83a 	sub	r8,r8,r17
811274a4:	3023883a 	mov	r17,r6
811274a8:	4080202c 	andhi	r2,r8,128
811274ac:	10002326 	beq	r2,zero,8112753c <__adddf3+0x20c>
811274b0:	04c02034 	movhi	r19,128
811274b4:	9cffffc4 	addi	r19,r19,-1
811274b8:	44e6703a 	and	r19,r8,r19
811274bc:	98007626 	beq	r19,zero,81127698 <__adddf3+0x368>
811274c0:	9809883a 	mov	r4,r19
811274c4:	11138000 	call	81113800 <__clzsi2>
811274c8:	10fffe04 	addi	r3,r2,-8
811274cc:	010007c4 	movi	r4,31
811274d0:	20c07716 	blt	r4,r3,811276b0 <__adddf3+0x380>
811274d4:	00800804 	movi	r2,32
811274d8:	10c5c83a 	sub	r2,r2,r3
811274dc:	8884d83a 	srl	r2,r17,r2
811274e0:	98d0983a 	sll	r8,r19,r3
811274e4:	88e2983a 	sll	r17,r17,r3
811274e8:	1204b03a 	or	r2,r2,r8
811274ec:	1c007416 	blt	r3,r16,811276c0 <__adddf3+0x390>
811274f0:	1c21c83a 	sub	r16,r3,r16
811274f4:	82000044 	addi	r8,r16,1
811274f8:	00c007c4 	movi	r3,31
811274fc:	1a009116 	blt	r3,r8,81127744 <__adddf3+0x414>
81127500:	00c00804 	movi	r3,32
81127504:	1a07c83a 	sub	r3,r3,r8
81127508:	8a08d83a 	srl	r4,r17,r8
8112750c:	88e2983a 	sll	r17,r17,r3
81127510:	10c6983a 	sll	r3,r2,r3
81127514:	1210d83a 	srl	r8,r2,r8
81127518:	8804c03a 	cmpne	r2,r17,zero
8112751c:	1906b03a 	or	r3,r3,r4
81127520:	18a2b03a 	or	r17,r3,r2
81127524:	0021883a 	mov	r16,zero
81127528:	003fa206 	br	811273b4 <__reset+0xfb1073b4>
8112752c:	1890b03a 	or	r8,r3,r2
81127530:	40017d26 	beq	r8,zero,81127b28 <__adddf3+0x7f8>
81127534:	1011883a 	mov	r8,r2
81127538:	1823883a 	mov	r17,r3
8112753c:	888001cc 	andi	r2,r17,7
81127540:	103f9e1e 	bne	r2,zero,811273bc <__reset+0xfb1073bc>
81127544:	4004977a 	slli	r2,r8,29
81127548:	8822d0fa 	srli	r17,r17,3
8112754c:	4010d0fa 	srli	r8,r8,3
81127550:	9007883a 	mov	r3,r18
81127554:	1444b03a 	or	r2,r2,r17
81127558:	0101ffc4 	movi	r4,2047
8112755c:	81002426 	beq	r16,r4,811275f0 <__adddf3+0x2c0>
81127560:	8120703a 	and	r16,r16,r4
81127564:	01000434 	movhi	r4,16
81127568:	213fffc4 	addi	r4,r4,-1
8112756c:	4110703a 	and	r8,r8,r4
81127570:	003fa806 	br	81127414 <__reset+0xfb107414>
81127574:	8089c83a 	sub	r4,r16,r2
81127578:	01005e0e 	bge	zero,r4,811276f4 <__adddf3+0x3c4>
8112757c:	10002b26 	beq	r2,zero,8112762c <__adddf3+0x2fc>
81127580:	0081ffc4 	movi	r2,2047
81127584:	80bf8b26 	beq	r16,r2,811273b4 <__reset+0xfb1073b4>
81127588:	4a402034 	orhi	r9,r9,128
8112758c:	00800e04 	movi	r2,56
81127590:	1100a40e 	bge	r2,r4,81127824 <__adddf3+0x4f4>
81127594:	498cb03a 	or	r6,r9,r6
81127598:	300ac03a 	cmpne	r5,r6,zero
8112759c:	0013883a 	mov	r9,zero
811275a0:	2c4b883a 	add	r5,r5,r17
811275a4:	2c63803a 	cmpltu	r17,r5,r17
811275a8:	4a11883a 	add	r8,r9,r8
811275ac:	8a11883a 	add	r8,r17,r8
811275b0:	2823883a 	mov	r17,r5
811275b4:	4080202c 	andhi	r2,r8,128
811275b8:	103fe026 	beq	r2,zero,8112753c <__reset+0xfb10753c>
811275bc:	84000044 	addi	r16,r16,1
811275c0:	0081ffc4 	movi	r2,2047
811275c4:	8080d226 	beq	r16,r2,81127910 <__adddf3+0x5e0>
811275c8:	00bfe034 	movhi	r2,65408
811275cc:	10bfffc4 	addi	r2,r2,-1
811275d0:	4090703a 	and	r8,r8,r2
811275d4:	880ad07a 	srli	r5,r17,1
811275d8:	400897fa 	slli	r4,r8,31
811275dc:	88c0004c 	andi	r3,r17,1
811275e0:	28e2b03a 	or	r17,r5,r3
811275e4:	4010d07a 	srli	r8,r8,1
811275e8:	2462b03a 	or	r17,r4,r17
811275ec:	003f7106 	br	811273b4 <__reset+0xfb1073b4>
811275f0:	4088b03a 	or	r4,r8,r2
811275f4:	20014526 	beq	r4,zero,81127b0c <__adddf3+0x7dc>
811275f8:	01000434 	movhi	r4,16
811275fc:	42000234 	orhi	r8,r8,8
81127600:	213fffc4 	addi	r4,r4,-1
81127604:	4110703a 	and	r8,r8,r4
81127608:	003f8206 	br	81127414 <__reset+0xfb107414>
8112760c:	18ffffc4 	addi	r3,r3,-1
81127610:	1800491e 	bne	r3,zero,81127738 <__adddf3+0x408>
81127614:	898bc83a 	sub	r5,r17,r6
81127618:	8963803a 	cmpltu	r17,r17,r5
8112761c:	4251c83a 	sub	r8,r8,r9
81127620:	4451c83a 	sub	r8,r8,r17
81127624:	2823883a 	mov	r17,r5
81127628:	003f9f06 	br	811274a8 <__reset+0xfb1074a8>
8112762c:	4984b03a 	or	r2,r9,r6
81127630:	103f6026 	beq	r2,zero,811273b4 <__reset+0xfb1073b4>
81127634:	213fffc4 	addi	r4,r4,-1
81127638:	2000931e 	bne	r4,zero,81127888 <__adddf3+0x558>
8112763c:	898d883a 	add	r6,r17,r6
81127640:	3463803a 	cmpltu	r17,r6,r17
81127644:	4251883a 	add	r8,r8,r9
81127648:	8a11883a 	add	r8,r17,r8
8112764c:	3023883a 	mov	r17,r6
81127650:	003fd806 	br	811275b4 <__reset+0xfb1075b4>
81127654:	1800541e 	bne	r3,zero,811277a8 <__adddf3+0x478>
81127658:	80800044 	addi	r2,r16,1
8112765c:	1081ffcc 	andi	r2,r2,2047
81127660:	00c00044 	movi	r3,1
81127664:	1880a00e 	bge	r3,r2,811278e8 <__adddf3+0x5b8>
81127668:	8989c83a 	sub	r4,r17,r6
8112766c:	8905803a 	cmpltu	r2,r17,r4
81127670:	4267c83a 	sub	r19,r8,r9
81127674:	98a7c83a 	sub	r19,r19,r2
81127678:	9880202c 	andhi	r2,r19,128
8112767c:	10006326 	beq	r2,zero,8112780c <__adddf3+0x4dc>
81127680:	3463c83a 	sub	r17,r6,r17
81127684:	4a07c83a 	sub	r3,r9,r8
81127688:	344d803a 	cmpltu	r6,r6,r17
8112768c:	19a7c83a 	sub	r19,r3,r6
81127690:	3825883a 	mov	r18,r7
81127694:	983f8a1e 	bne	r19,zero,811274c0 <__reset+0xfb1074c0>
81127698:	8809883a 	mov	r4,r17
8112769c:	11138000 	call	81113800 <__clzsi2>
811276a0:	10800804 	addi	r2,r2,32
811276a4:	10fffe04 	addi	r3,r2,-8
811276a8:	010007c4 	movi	r4,31
811276ac:	20ff890e 	bge	r4,r3,811274d4 <__reset+0xfb1074d4>
811276b0:	10bff604 	addi	r2,r2,-40
811276b4:	8884983a 	sll	r2,r17,r2
811276b8:	0023883a 	mov	r17,zero
811276bc:	1c3f8c0e 	bge	r3,r16,811274f0 <__reset+0xfb1074f0>
811276c0:	023fe034 	movhi	r8,65408
811276c4:	423fffc4 	addi	r8,r8,-1
811276c8:	80e1c83a 	sub	r16,r16,r3
811276cc:	1210703a 	and	r8,r2,r8
811276d0:	003f3806 	br	811273b4 <__reset+0xfb1073b4>
811276d4:	9007883a 	mov	r3,r18
811276d8:	0011883a 	mov	r8,zero
811276dc:	0005883a 	mov	r2,zero
811276e0:	003f4c06 	br	81127414 <__reset+0xfb107414>
811276e4:	498cb03a 	or	r6,r9,r6
811276e8:	300cc03a 	cmpne	r6,r6,zero
811276ec:	0007883a 	mov	r3,zero
811276f0:	003f6806 	br	81127494 <__reset+0xfb107494>
811276f4:	20009c1e 	bne	r4,zero,81127968 <__adddf3+0x638>
811276f8:	80800044 	addi	r2,r16,1
811276fc:	1141ffcc 	andi	r5,r2,2047
81127700:	01000044 	movi	r4,1
81127704:	2140670e 	bge	r4,r5,811278a4 <__adddf3+0x574>
81127708:	0101ffc4 	movi	r4,2047
8112770c:	11007f26 	beq	r2,r4,8112790c <__adddf3+0x5dc>
81127710:	898d883a 	add	r6,r17,r6
81127714:	4247883a 	add	r3,r8,r9
81127718:	3451803a 	cmpltu	r8,r6,r17
8112771c:	40d1883a 	add	r8,r8,r3
81127720:	402297fa 	slli	r17,r8,31
81127724:	300cd07a 	srli	r6,r6,1
81127728:	4010d07a 	srli	r8,r8,1
8112772c:	1021883a 	mov	r16,r2
81127730:	89a2b03a 	or	r17,r17,r6
81127734:	003f1f06 	br	811273b4 <__reset+0xfb1073b4>
81127738:	0081ffc4 	movi	r2,2047
8112773c:	80bf481e 	bne	r16,r2,81127460 <__reset+0xfb107460>
81127740:	003f1c06 	br	811273b4 <__reset+0xfb1073b4>
81127744:	843ff844 	addi	r16,r16,-31
81127748:	01000804 	movi	r4,32
8112774c:	1406d83a 	srl	r3,r2,r16
81127750:	41005026 	beq	r8,r4,81127894 <__adddf3+0x564>
81127754:	01001004 	movi	r4,64
81127758:	2211c83a 	sub	r8,r4,r8
8112775c:	1204983a 	sll	r2,r2,r8
81127760:	88a2b03a 	or	r17,r17,r2
81127764:	8822c03a 	cmpne	r17,r17,zero
81127768:	1c62b03a 	or	r17,r3,r17
8112776c:	0011883a 	mov	r8,zero
81127770:	0021883a 	mov	r16,zero
81127774:	003f7106 	br	8112753c <__reset+0xfb10753c>
81127778:	193ff804 	addi	r4,r3,-32
8112777c:	00800804 	movi	r2,32
81127780:	4908d83a 	srl	r4,r9,r4
81127784:	18804526 	beq	r3,r2,8112789c <__adddf3+0x56c>
81127788:	00801004 	movi	r2,64
8112778c:	10c5c83a 	sub	r2,r2,r3
81127790:	4886983a 	sll	r3,r9,r2
81127794:	198cb03a 	or	r6,r3,r6
81127798:	300cc03a 	cmpne	r6,r6,zero
8112779c:	218cb03a 	or	r6,r4,r6
811277a0:	0007883a 	mov	r3,zero
811277a4:	003f3b06 	br	81127494 <__reset+0xfb107494>
811277a8:	80002a26 	beq	r16,zero,81127854 <__adddf3+0x524>
811277ac:	0101ffc4 	movi	r4,2047
811277b0:	11006826 	beq	r2,r4,81127954 <__adddf3+0x624>
811277b4:	00c7c83a 	sub	r3,zero,r3
811277b8:	42002034 	orhi	r8,r8,128
811277bc:	01000e04 	movi	r4,56
811277c0:	20c07c16 	blt	r4,r3,811279b4 <__adddf3+0x684>
811277c4:	010007c4 	movi	r4,31
811277c8:	20c0da16 	blt	r4,r3,81127b34 <__adddf3+0x804>
811277cc:	01000804 	movi	r4,32
811277d0:	20c9c83a 	sub	r4,r4,r3
811277d4:	4114983a 	sll	r10,r8,r4
811277d8:	88cad83a 	srl	r5,r17,r3
811277dc:	8908983a 	sll	r4,r17,r4
811277e0:	40c6d83a 	srl	r3,r8,r3
811277e4:	5162b03a 	or	r17,r10,r5
811277e8:	2008c03a 	cmpne	r4,r4,zero
811277ec:	8922b03a 	or	r17,r17,r4
811277f0:	3463c83a 	sub	r17,r6,r17
811277f4:	48c7c83a 	sub	r3,r9,r3
811277f8:	344d803a 	cmpltu	r6,r6,r17
811277fc:	1991c83a 	sub	r8,r3,r6
81127800:	1021883a 	mov	r16,r2
81127804:	3825883a 	mov	r18,r7
81127808:	003f2706 	br	811274a8 <__reset+0xfb1074a8>
8112780c:	24d0b03a 	or	r8,r4,r19
81127810:	40001b1e 	bne	r8,zero,81127880 <__adddf3+0x550>
81127814:	0005883a 	mov	r2,zero
81127818:	0007883a 	mov	r3,zero
8112781c:	0021883a 	mov	r16,zero
81127820:	003f4d06 	br	81127558 <__reset+0xfb107558>
81127824:	008007c4 	movi	r2,31
81127828:	11003c16 	blt	r2,r4,8112791c <__adddf3+0x5ec>
8112782c:	00800804 	movi	r2,32
81127830:	1105c83a 	sub	r2,r2,r4
81127834:	488e983a 	sll	r7,r9,r2
81127838:	310ad83a 	srl	r5,r6,r4
8112783c:	3084983a 	sll	r2,r6,r2
81127840:	4912d83a 	srl	r9,r9,r4
81127844:	394ab03a 	or	r5,r7,r5
81127848:	1004c03a 	cmpne	r2,r2,zero
8112784c:	288ab03a 	or	r5,r5,r2
81127850:	003f5306 	br	811275a0 <__reset+0xfb1075a0>
81127854:	4448b03a 	or	r4,r8,r17
81127858:	20003e26 	beq	r4,zero,81127954 <__adddf3+0x624>
8112785c:	00c6303a 	nor	r3,zero,r3
81127860:	18003a1e 	bne	r3,zero,8112794c <__adddf3+0x61c>
81127864:	3463c83a 	sub	r17,r6,r17
81127868:	4a07c83a 	sub	r3,r9,r8
8112786c:	344d803a 	cmpltu	r6,r6,r17
81127870:	1991c83a 	sub	r8,r3,r6
81127874:	1021883a 	mov	r16,r2
81127878:	3825883a 	mov	r18,r7
8112787c:	003f0a06 	br	811274a8 <__reset+0xfb1074a8>
81127880:	2023883a 	mov	r17,r4
81127884:	003f0d06 	br	811274bc <__reset+0xfb1074bc>
81127888:	0081ffc4 	movi	r2,2047
8112788c:	80bf3f1e 	bne	r16,r2,8112758c <__reset+0xfb10758c>
81127890:	003ec806 	br	811273b4 <__reset+0xfb1073b4>
81127894:	0005883a 	mov	r2,zero
81127898:	003fb106 	br	81127760 <__reset+0xfb107760>
8112789c:	0007883a 	mov	r3,zero
811278a0:	003fbc06 	br	81127794 <__reset+0xfb107794>
811278a4:	4444b03a 	or	r2,r8,r17
811278a8:	8000871e 	bne	r16,zero,81127ac8 <__adddf3+0x798>
811278ac:	1000ba26 	beq	r2,zero,81127b98 <__adddf3+0x868>
811278b0:	4984b03a 	or	r2,r9,r6
811278b4:	103ebf26 	beq	r2,zero,811273b4 <__reset+0xfb1073b4>
811278b8:	8985883a 	add	r2,r17,r6
811278bc:	4247883a 	add	r3,r8,r9
811278c0:	1451803a 	cmpltu	r8,r2,r17
811278c4:	40d1883a 	add	r8,r8,r3
811278c8:	40c0202c 	andhi	r3,r8,128
811278cc:	1023883a 	mov	r17,r2
811278d0:	183f1a26 	beq	r3,zero,8112753c <__reset+0xfb10753c>
811278d4:	00bfe034 	movhi	r2,65408
811278d8:	10bfffc4 	addi	r2,r2,-1
811278dc:	2021883a 	mov	r16,r4
811278e0:	4090703a 	and	r8,r8,r2
811278e4:	003eb306 	br	811273b4 <__reset+0xfb1073b4>
811278e8:	4444b03a 	or	r2,r8,r17
811278ec:	8000291e 	bne	r16,zero,81127994 <__adddf3+0x664>
811278f0:	10004b1e 	bne	r2,zero,81127a20 <__adddf3+0x6f0>
811278f4:	4990b03a 	or	r8,r9,r6
811278f8:	40008b26 	beq	r8,zero,81127b28 <__adddf3+0x7f8>
811278fc:	4811883a 	mov	r8,r9
81127900:	3023883a 	mov	r17,r6
81127904:	3825883a 	mov	r18,r7
81127908:	003eaa06 	br	811273b4 <__reset+0xfb1073b4>
8112790c:	1021883a 	mov	r16,r2
81127910:	0011883a 	mov	r8,zero
81127914:	0005883a 	mov	r2,zero
81127918:	003f0f06 	br	81127558 <__reset+0xfb107558>
8112791c:	217ff804 	addi	r5,r4,-32
81127920:	00800804 	movi	r2,32
81127924:	494ad83a 	srl	r5,r9,r5
81127928:	20807d26 	beq	r4,r2,81127b20 <__adddf3+0x7f0>
8112792c:	00801004 	movi	r2,64
81127930:	1109c83a 	sub	r4,r2,r4
81127934:	4912983a 	sll	r9,r9,r4
81127938:	498cb03a 	or	r6,r9,r6
8112793c:	300cc03a 	cmpne	r6,r6,zero
81127940:	298ab03a 	or	r5,r5,r6
81127944:	0013883a 	mov	r9,zero
81127948:	003f1506 	br	811275a0 <__reset+0xfb1075a0>
8112794c:	0101ffc4 	movi	r4,2047
81127950:	113f9a1e 	bne	r2,r4,811277bc <__reset+0xfb1077bc>
81127954:	4811883a 	mov	r8,r9
81127958:	3023883a 	mov	r17,r6
8112795c:	1021883a 	mov	r16,r2
81127960:	3825883a 	mov	r18,r7
81127964:	003e9306 	br	811273b4 <__reset+0xfb1073b4>
81127968:	8000161e 	bne	r16,zero,811279c4 <__adddf3+0x694>
8112796c:	444ab03a 	or	r5,r8,r17
81127970:	28005126 	beq	r5,zero,81127ab8 <__adddf3+0x788>
81127974:	0108303a 	nor	r4,zero,r4
81127978:	20004d1e 	bne	r4,zero,81127ab0 <__adddf3+0x780>
8112797c:	89a3883a 	add	r17,r17,r6
81127980:	4253883a 	add	r9,r8,r9
81127984:	898d803a 	cmpltu	r6,r17,r6
81127988:	3251883a 	add	r8,r6,r9
8112798c:	1021883a 	mov	r16,r2
81127990:	003f0806 	br	811275b4 <__reset+0xfb1075b4>
81127994:	1000301e 	bne	r2,zero,81127a58 <__adddf3+0x728>
81127998:	4984b03a 	or	r2,r9,r6
8112799c:	10007126 	beq	r2,zero,81127b64 <__adddf3+0x834>
811279a0:	4811883a 	mov	r8,r9
811279a4:	3023883a 	mov	r17,r6
811279a8:	3825883a 	mov	r18,r7
811279ac:	0401ffc4 	movi	r16,2047
811279b0:	003e8006 	br	811273b4 <__reset+0xfb1073b4>
811279b4:	4462b03a 	or	r17,r8,r17
811279b8:	8822c03a 	cmpne	r17,r17,zero
811279bc:	0007883a 	mov	r3,zero
811279c0:	003f8b06 	br	811277f0 <__reset+0xfb1077f0>
811279c4:	0141ffc4 	movi	r5,2047
811279c8:	11403b26 	beq	r2,r5,81127ab8 <__adddf3+0x788>
811279cc:	0109c83a 	sub	r4,zero,r4
811279d0:	42002034 	orhi	r8,r8,128
811279d4:	01400e04 	movi	r5,56
811279d8:	29006716 	blt	r5,r4,81127b78 <__adddf3+0x848>
811279dc:	014007c4 	movi	r5,31
811279e0:	29007016 	blt	r5,r4,81127ba4 <__adddf3+0x874>
811279e4:	01400804 	movi	r5,32
811279e8:	290bc83a 	sub	r5,r5,r4
811279ec:	4154983a 	sll	r10,r8,r5
811279f0:	890ed83a 	srl	r7,r17,r4
811279f4:	894a983a 	sll	r5,r17,r5
811279f8:	4108d83a 	srl	r4,r8,r4
811279fc:	51e2b03a 	or	r17,r10,r7
81127a00:	280ac03a 	cmpne	r5,r5,zero
81127a04:	8962b03a 	or	r17,r17,r5
81127a08:	89a3883a 	add	r17,r17,r6
81127a0c:	2253883a 	add	r9,r4,r9
81127a10:	898d803a 	cmpltu	r6,r17,r6
81127a14:	3251883a 	add	r8,r6,r9
81127a18:	1021883a 	mov	r16,r2
81127a1c:	003ee506 	br	811275b4 <__reset+0xfb1075b4>
81127a20:	4984b03a 	or	r2,r9,r6
81127a24:	103e6326 	beq	r2,zero,811273b4 <__reset+0xfb1073b4>
81127a28:	8987c83a 	sub	r3,r17,r6
81127a2c:	88c9803a 	cmpltu	r4,r17,r3
81127a30:	4245c83a 	sub	r2,r8,r9
81127a34:	1105c83a 	sub	r2,r2,r4
81127a38:	1100202c 	andhi	r4,r2,128
81127a3c:	203ebb26 	beq	r4,zero,8112752c <__reset+0xfb10752c>
81127a40:	3463c83a 	sub	r17,r6,r17
81127a44:	4a07c83a 	sub	r3,r9,r8
81127a48:	344d803a 	cmpltu	r6,r6,r17
81127a4c:	1991c83a 	sub	r8,r3,r6
81127a50:	3825883a 	mov	r18,r7
81127a54:	003e5706 	br	811273b4 <__reset+0xfb1073b4>
81127a58:	4984b03a 	or	r2,r9,r6
81127a5c:	10002e26 	beq	r2,zero,81127b18 <__adddf3+0x7e8>
81127a60:	4004d0fa 	srli	r2,r8,3
81127a64:	8822d0fa 	srli	r17,r17,3
81127a68:	4010977a 	slli	r8,r8,29
81127a6c:	10c0022c 	andhi	r3,r2,8
81127a70:	4462b03a 	or	r17,r8,r17
81127a74:	18000826 	beq	r3,zero,81127a98 <__adddf3+0x768>
81127a78:	4808d0fa 	srli	r4,r9,3
81127a7c:	20c0022c 	andhi	r3,r4,8
81127a80:	1800051e 	bne	r3,zero,81127a98 <__adddf3+0x768>
81127a84:	300cd0fa 	srli	r6,r6,3
81127a88:	4806977a 	slli	r3,r9,29
81127a8c:	2005883a 	mov	r2,r4
81127a90:	3825883a 	mov	r18,r7
81127a94:	19a2b03a 	or	r17,r3,r6
81127a98:	8810d77a 	srli	r8,r17,29
81127a9c:	100490fa 	slli	r2,r2,3
81127aa0:	882290fa 	slli	r17,r17,3
81127aa4:	0401ffc4 	movi	r16,2047
81127aa8:	4090b03a 	or	r8,r8,r2
81127aac:	003e4106 	br	811273b4 <__reset+0xfb1073b4>
81127ab0:	0141ffc4 	movi	r5,2047
81127ab4:	117fc71e 	bne	r2,r5,811279d4 <__reset+0xfb1079d4>
81127ab8:	4811883a 	mov	r8,r9
81127abc:	3023883a 	mov	r17,r6
81127ac0:	1021883a 	mov	r16,r2
81127ac4:	003e3b06 	br	811273b4 <__reset+0xfb1073b4>
81127ac8:	10002f26 	beq	r2,zero,81127b88 <__adddf3+0x858>
81127acc:	4984b03a 	or	r2,r9,r6
81127ad0:	10001126 	beq	r2,zero,81127b18 <__adddf3+0x7e8>
81127ad4:	4004d0fa 	srli	r2,r8,3
81127ad8:	8822d0fa 	srli	r17,r17,3
81127adc:	4010977a 	slli	r8,r8,29
81127ae0:	10c0022c 	andhi	r3,r2,8
81127ae4:	4462b03a 	or	r17,r8,r17
81127ae8:	183feb26 	beq	r3,zero,81127a98 <__reset+0xfb107a98>
81127aec:	4808d0fa 	srli	r4,r9,3
81127af0:	20c0022c 	andhi	r3,r4,8
81127af4:	183fe81e 	bne	r3,zero,81127a98 <__reset+0xfb107a98>
81127af8:	300cd0fa 	srli	r6,r6,3
81127afc:	4806977a 	slli	r3,r9,29
81127b00:	2005883a 	mov	r2,r4
81127b04:	19a2b03a 	or	r17,r3,r6
81127b08:	003fe306 	br	81127a98 <__reset+0xfb107a98>
81127b0c:	0011883a 	mov	r8,zero
81127b10:	0005883a 	mov	r2,zero
81127b14:	003e3f06 	br	81127414 <__reset+0xfb107414>
81127b18:	0401ffc4 	movi	r16,2047
81127b1c:	003e2506 	br	811273b4 <__reset+0xfb1073b4>
81127b20:	0013883a 	mov	r9,zero
81127b24:	003f8406 	br	81127938 <__reset+0xfb107938>
81127b28:	0005883a 	mov	r2,zero
81127b2c:	0007883a 	mov	r3,zero
81127b30:	003e8906 	br	81127558 <__reset+0xfb107558>
81127b34:	197ff804 	addi	r5,r3,-32
81127b38:	01000804 	movi	r4,32
81127b3c:	414ad83a 	srl	r5,r8,r5
81127b40:	19002426 	beq	r3,r4,81127bd4 <__adddf3+0x8a4>
81127b44:	01001004 	movi	r4,64
81127b48:	20c7c83a 	sub	r3,r4,r3
81127b4c:	40c6983a 	sll	r3,r8,r3
81127b50:	1c46b03a 	or	r3,r3,r17
81127b54:	1806c03a 	cmpne	r3,r3,zero
81127b58:	28e2b03a 	or	r17,r5,r3
81127b5c:	0007883a 	mov	r3,zero
81127b60:	003f2306 	br	811277f0 <__reset+0xfb1077f0>
81127b64:	0007883a 	mov	r3,zero
81127b68:	5811883a 	mov	r8,r11
81127b6c:	00bfffc4 	movi	r2,-1
81127b70:	0401ffc4 	movi	r16,2047
81127b74:	003e7806 	br	81127558 <__reset+0xfb107558>
81127b78:	4462b03a 	or	r17,r8,r17
81127b7c:	8822c03a 	cmpne	r17,r17,zero
81127b80:	0009883a 	mov	r4,zero
81127b84:	003fa006 	br	81127a08 <__reset+0xfb107a08>
81127b88:	4811883a 	mov	r8,r9
81127b8c:	3023883a 	mov	r17,r6
81127b90:	0401ffc4 	movi	r16,2047
81127b94:	003e0706 	br	811273b4 <__reset+0xfb1073b4>
81127b98:	4811883a 	mov	r8,r9
81127b9c:	3023883a 	mov	r17,r6
81127ba0:	003e0406 	br	811273b4 <__reset+0xfb1073b4>
81127ba4:	21fff804 	addi	r7,r4,-32
81127ba8:	01400804 	movi	r5,32
81127bac:	41ced83a 	srl	r7,r8,r7
81127bb0:	21400a26 	beq	r4,r5,81127bdc <__adddf3+0x8ac>
81127bb4:	01401004 	movi	r5,64
81127bb8:	2909c83a 	sub	r4,r5,r4
81127bbc:	4108983a 	sll	r4,r8,r4
81127bc0:	2448b03a 	or	r4,r4,r17
81127bc4:	2008c03a 	cmpne	r4,r4,zero
81127bc8:	3922b03a 	or	r17,r7,r4
81127bcc:	0009883a 	mov	r4,zero
81127bd0:	003f8d06 	br	81127a08 <__reset+0xfb107a08>
81127bd4:	0007883a 	mov	r3,zero
81127bd8:	003fdd06 	br	81127b50 <__reset+0xfb107b50>
81127bdc:	0009883a 	mov	r4,zero
81127be0:	003ff706 	br	81127bc0 <__reset+0xfb107bc0>

81127be4 <__divdf3>:
81127be4:	defff204 	addi	sp,sp,-56
81127be8:	de00012e 	bgeu	sp,et,81127bf0 <__divdf3+0xc>
81127bec:	003b68fa 	trap	3
81127bf0:	dd400915 	stw	r21,36(sp)
81127bf4:	282ad53a 	srli	r21,r5,20
81127bf8:	dd000815 	stw	r20,32(sp)
81127bfc:	2828d7fa 	srli	r20,r5,31
81127c00:	dc000415 	stw	r16,16(sp)
81127c04:	04000434 	movhi	r16,16
81127c08:	df000c15 	stw	fp,48(sp)
81127c0c:	843fffc4 	addi	r16,r16,-1
81127c10:	dfc00d15 	stw	ra,52(sp)
81127c14:	ddc00b15 	stw	r23,44(sp)
81127c18:	dd800a15 	stw	r22,40(sp)
81127c1c:	dcc00715 	stw	r19,28(sp)
81127c20:	dc800615 	stw	r18,24(sp)
81127c24:	dc400515 	stw	r17,20(sp)
81127c28:	ad41ffcc 	andi	r21,r21,2047
81127c2c:	2c20703a 	and	r16,r5,r16
81127c30:	a7003fcc 	andi	fp,r20,255
81127c34:	a8006126 	beq	r21,zero,81127dbc <__divdf3+0x1d8>
81127c38:	0081ffc4 	movi	r2,2047
81127c3c:	2025883a 	mov	r18,r4
81127c40:	a8803726 	beq	r21,r2,81127d20 <__divdf3+0x13c>
81127c44:	80800434 	orhi	r2,r16,16
81127c48:	100490fa 	slli	r2,r2,3
81127c4c:	2020d77a 	srli	r16,r4,29
81127c50:	202490fa 	slli	r18,r4,3
81127c54:	ad7f0044 	addi	r21,r21,-1023
81127c58:	80a0b03a 	or	r16,r16,r2
81127c5c:	0027883a 	mov	r19,zero
81127c60:	0013883a 	mov	r9,zero
81127c64:	3804d53a 	srli	r2,r7,20
81127c68:	382cd7fa 	srli	r22,r7,31
81127c6c:	04400434 	movhi	r17,16
81127c70:	8c7fffc4 	addi	r17,r17,-1
81127c74:	1081ffcc 	andi	r2,r2,2047
81127c78:	3011883a 	mov	r8,r6
81127c7c:	3c62703a 	and	r17,r7,r17
81127c80:	b5c03fcc 	andi	r23,r22,255
81127c84:	10006c26 	beq	r2,zero,81127e38 <__divdf3+0x254>
81127c88:	00c1ffc4 	movi	r3,2047
81127c8c:	10c06426 	beq	r2,r3,81127e20 <__divdf3+0x23c>
81127c90:	88c00434 	orhi	r3,r17,16
81127c94:	180690fa 	slli	r3,r3,3
81127c98:	3022d77a 	srli	r17,r6,29
81127c9c:	301090fa 	slli	r8,r6,3
81127ca0:	10bf0044 	addi	r2,r2,-1023
81127ca4:	88e2b03a 	or	r17,r17,r3
81127ca8:	000f883a 	mov	r7,zero
81127cac:	a58cf03a 	xor	r6,r20,r22
81127cb0:	3cc8b03a 	or	r4,r7,r19
81127cb4:	a8abc83a 	sub	r21,r21,r2
81127cb8:	008003c4 	movi	r2,15
81127cbc:	3007883a 	mov	r3,r6
81127cc0:	34c03fcc 	andi	r19,r6,255
81127cc4:	11009036 	bltu	r2,r4,81127f08 <__divdf3+0x324>
81127cc8:	200890ba 	slli	r4,r4,2
81127ccc:	00a044b4 	movhi	r2,33042
81127cd0:	109f3804 	addi	r2,r2,31968
81127cd4:	2089883a 	add	r4,r4,r2
81127cd8:	20800017 	ldw	r2,0(r4)
81127cdc:	1000683a 	jmp	r2
81127ce0:	81127f08 	cmpgei	r4,r16,18940
81127ce4:	81127d58 	cmpnei	r4,r16,18933
81127ce8:	81127ef8 	rdprs	r4,r16,18939
81127cec:	81127d4c 	andi	r4,r16,18933
81127cf0:	81127ef8 	rdprs	r4,r16,18939
81127cf4:	81127ecc 	andi	r4,r16,18939
81127cf8:	81127ef8 	rdprs	r4,r16,18939
81127cfc:	81127d4c 	andi	r4,r16,18933
81127d00:	81127d58 	cmpnei	r4,r16,18933
81127d04:	81127d58 	cmpnei	r4,r16,18933
81127d08:	81127ecc 	andi	r4,r16,18939
81127d0c:	81127d4c 	andi	r4,r16,18933
81127d10:	81127d3c 	xorhi	r4,r16,18932
81127d14:	81127d3c 	xorhi	r4,r16,18932
81127d18:	81127d3c 	xorhi	r4,r16,18932
81127d1c:	811281ec 	andhi	r4,r16,18951
81127d20:	2404b03a 	or	r2,r4,r16
81127d24:	1000661e 	bne	r2,zero,81127ec0 <__divdf3+0x2dc>
81127d28:	04c00204 	movi	r19,8
81127d2c:	0021883a 	mov	r16,zero
81127d30:	0025883a 	mov	r18,zero
81127d34:	02400084 	movi	r9,2
81127d38:	003fca06 	br	81127c64 <__reset+0xfb107c64>
81127d3c:	8023883a 	mov	r17,r16
81127d40:	9011883a 	mov	r8,r18
81127d44:	e02f883a 	mov	r23,fp
81127d48:	480f883a 	mov	r7,r9
81127d4c:	00800084 	movi	r2,2
81127d50:	3881311e 	bne	r7,r2,81128218 <__divdf3+0x634>
81127d54:	b827883a 	mov	r19,r23
81127d58:	98c0004c 	andi	r3,r19,1
81127d5c:	0081ffc4 	movi	r2,2047
81127d60:	000b883a 	mov	r5,zero
81127d64:	0025883a 	mov	r18,zero
81127d68:	1004953a 	slli	r2,r2,20
81127d6c:	18c03fcc 	andi	r3,r3,255
81127d70:	04400434 	movhi	r17,16
81127d74:	8c7fffc4 	addi	r17,r17,-1
81127d78:	180697fa 	slli	r3,r3,31
81127d7c:	2c4a703a 	and	r5,r5,r17
81127d80:	288ab03a 	or	r5,r5,r2
81127d84:	28c6b03a 	or	r3,r5,r3
81127d88:	9005883a 	mov	r2,r18
81127d8c:	dfc00d17 	ldw	ra,52(sp)
81127d90:	df000c17 	ldw	fp,48(sp)
81127d94:	ddc00b17 	ldw	r23,44(sp)
81127d98:	dd800a17 	ldw	r22,40(sp)
81127d9c:	dd400917 	ldw	r21,36(sp)
81127da0:	dd000817 	ldw	r20,32(sp)
81127da4:	dcc00717 	ldw	r19,28(sp)
81127da8:	dc800617 	ldw	r18,24(sp)
81127dac:	dc400517 	ldw	r17,20(sp)
81127db0:	dc000417 	ldw	r16,16(sp)
81127db4:	dec00e04 	addi	sp,sp,56
81127db8:	f800283a 	ret
81127dbc:	2404b03a 	or	r2,r4,r16
81127dc0:	2027883a 	mov	r19,r4
81127dc4:	10003926 	beq	r2,zero,81127eac <__divdf3+0x2c8>
81127dc8:	80012e26 	beq	r16,zero,81128284 <__divdf3+0x6a0>
81127dcc:	8009883a 	mov	r4,r16
81127dd0:	d9800315 	stw	r6,12(sp)
81127dd4:	d9c00215 	stw	r7,8(sp)
81127dd8:	11138000 	call	81113800 <__clzsi2>
81127ddc:	d9800317 	ldw	r6,12(sp)
81127de0:	d9c00217 	ldw	r7,8(sp)
81127de4:	113ffd44 	addi	r4,r2,-11
81127de8:	00c00704 	movi	r3,28
81127dec:	19012116 	blt	r3,r4,81128274 <__divdf3+0x690>
81127df0:	00c00744 	movi	r3,29
81127df4:	147ffe04 	addi	r17,r2,-8
81127df8:	1907c83a 	sub	r3,r3,r4
81127dfc:	8460983a 	sll	r16,r16,r17
81127e00:	98c6d83a 	srl	r3,r19,r3
81127e04:	9c64983a 	sll	r18,r19,r17
81127e08:	1c20b03a 	or	r16,r3,r16
81127e0c:	1080fcc4 	addi	r2,r2,1011
81127e10:	00abc83a 	sub	r21,zero,r2
81127e14:	0027883a 	mov	r19,zero
81127e18:	0013883a 	mov	r9,zero
81127e1c:	003f9106 	br	81127c64 <__reset+0xfb107c64>
81127e20:	3446b03a 	or	r3,r6,r17
81127e24:	18001f1e 	bne	r3,zero,81127ea4 <__divdf3+0x2c0>
81127e28:	0023883a 	mov	r17,zero
81127e2c:	0011883a 	mov	r8,zero
81127e30:	01c00084 	movi	r7,2
81127e34:	003f9d06 	br	81127cac <__reset+0xfb107cac>
81127e38:	3446b03a 	or	r3,r6,r17
81127e3c:	18001526 	beq	r3,zero,81127e94 <__divdf3+0x2b0>
81127e40:	88011b26 	beq	r17,zero,811282b0 <__divdf3+0x6cc>
81127e44:	8809883a 	mov	r4,r17
81127e48:	d9800315 	stw	r6,12(sp)
81127e4c:	da400115 	stw	r9,4(sp)
81127e50:	11138000 	call	81113800 <__clzsi2>
81127e54:	d9800317 	ldw	r6,12(sp)
81127e58:	da400117 	ldw	r9,4(sp)
81127e5c:	113ffd44 	addi	r4,r2,-11
81127e60:	00c00704 	movi	r3,28
81127e64:	19010e16 	blt	r3,r4,811282a0 <__divdf3+0x6bc>
81127e68:	00c00744 	movi	r3,29
81127e6c:	123ffe04 	addi	r8,r2,-8
81127e70:	1907c83a 	sub	r3,r3,r4
81127e74:	8a22983a 	sll	r17,r17,r8
81127e78:	30c6d83a 	srl	r3,r6,r3
81127e7c:	3210983a 	sll	r8,r6,r8
81127e80:	1c62b03a 	or	r17,r3,r17
81127e84:	1080fcc4 	addi	r2,r2,1011
81127e88:	0085c83a 	sub	r2,zero,r2
81127e8c:	000f883a 	mov	r7,zero
81127e90:	003f8606 	br	81127cac <__reset+0xfb107cac>
81127e94:	0023883a 	mov	r17,zero
81127e98:	0011883a 	mov	r8,zero
81127e9c:	01c00044 	movi	r7,1
81127ea0:	003f8206 	br	81127cac <__reset+0xfb107cac>
81127ea4:	01c000c4 	movi	r7,3
81127ea8:	003f8006 	br	81127cac <__reset+0xfb107cac>
81127eac:	04c00104 	movi	r19,4
81127eb0:	0021883a 	mov	r16,zero
81127eb4:	0025883a 	mov	r18,zero
81127eb8:	02400044 	movi	r9,1
81127ebc:	003f6906 	br	81127c64 <__reset+0xfb107c64>
81127ec0:	04c00304 	movi	r19,12
81127ec4:	024000c4 	movi	r9,3
81127ec8:	003f6606 	br	81127c64 <__reset+0xfb107c64>
81127ecc:	01400434 	movhi	r5,16
81127ed0:	0007883a 	mov	r3,zero
81127ed4:	297fffc4 	addi	r5,r5,-1
81127ed8:	04bfffc4 	movi	r18,-1
81127edc:	0081ffc4 	movi	r2,2047
81127ee0:	003fa106 	br	81127d68 <__reset+0xfb107d68>
81127ee4:	00c00044 	movi	r3,1
81127ee8:	1887c83a 	sub	r3,r3,r2
81127eec:	01000e04 	movi	r4,56
81127ef0:	20c1210e 	bge	r4,r3,81128378 <__divdf3+0x794>
81127ef4:	98c0004c 	andi	r3,r19,1
81127ef8:	0005883a 	mov	r2,zero
81127efc:	000b883a 	mov	r5,zero
81127f00:	0025883a 	mov	r18,zero
81127f04:	003f9806 	br	81127d68 <__reset+0xfb107d68>
81127f08:	8c00fd36 	bltu	r17,r16,81128300 <__divdf3+0x71c>
81127f0c:	8440fb26 	beq	r16,r17,811282fc <__divdf3+0x718>
81127f10:	8007883a 	mov	r3,r16
81127f14:	ad7fffc4 	addi	r21,r21,-1
81127f18:	0021883a 	mov	r16,zero
81127f1c:	4004d63a 	srli	r2,r8,24
81127f20:	8822923a 	slli	r17,r17,8
81127f24:	1809883a 	mov	r4,r3
81127f28:	402c923a 	slli	r22,r8,8
81127f2c:	88b8b03a 	or	fp,r17,r2
81127f30:	e028d43a 	srli	r20,fp,16
81127f34:	d8c00015 	stw	r3,0(sp)
81127f38:	e5ffffcc 	andi	r23,fp,65535
81127f3c:	a00b883a 	mov	r5,r20
81127f40:	11270780 	call	81127078 <__udivsi3>
81127f44:	d8c00017 	ldw	r3,0(sp)
81127f48:	a00b883a 	mov	r5,r20
81127f4c:	d8800315 	stw	r2,12(sp)
81127f50:	1809883a 	mov	r4,r3
81127f54:	11270dc0 	call	811270dc <__umodsi3>
81127f58:	d9800317 	ldw	r6,12(sp)
81127f5c:	1006943a 	slli	r3,r2,16
81127f60:	9004d43a 	srli	r2,r18,16
81127f64:	b9a3383a 	mul	r17,r23,r6
81127f68:	10c4b03a 	or	r2,r2,r3
81127f6c:	1440062e 	bgeu	r2,r17,81127f88 <__divdf3+0x3a4>
81127f70:	1705883a 	add	r2,r2,fp
81127f74:	30ffffc4 	addi	r3,r6,-1
81127f78:	1700ee36 	bltu	r2,fp,81128334 <__divdf3+0x750>
81127f7c:	1440ed2e 	bgeu	r2,r17,81128334 <__divdf3+0x750>
81127f80:	31bfff84 	addi	r6,r6,-2
81127f84:	1705883a 	add	r2,r2,fp
81127f88:	1463c83a 	sub	r17,r2,r17
81127f8c:	a00b883a 	mov	r5,r20
81127f90:	8809883a 	mov	r4,r17
81127f94:	d9800315 	stw	r6,12(sp)
81127f98:	11270780 	call	81127078 <__udivsi3>
81127f9c:	a00b883a 	mov	r5,r20
81127fa0:	8809883a 	mov	r4,r17
81127fa4:	d8800215 	stw	r2,8(sp)
81127fa8:	11270dc0 	call	811270dc <__umodsi3>
81127fac:	d9c00217 	ldw	r7,8(sp)
81127fb0:	1004943a 	slli	r2,r2,16
81127fb4:	94bfffcc 	andi	r18,r18,65535
81127fb8:	b9d1383a 	mul	r8,r23,r7
81127fbc:	90a4b03a 	or	r18,r18,r2
81127fc0:	d9800317 	ldw	r6,12(sp)
81127fc4:	9200062e 	bgeu	r18,r8,81127fe0 <__divdf3+0x3fc>
81127fc8:	9725883a 	add	r18,r18,fp
81127fcc:	38bfffc4 	addi	r2,r7,-1
81127fd0:	9700d636 	bltu	r18,fp,8112832c <__divdf3+0x748>
81127fd4:	9200d52e 	bgeu	r18,r8,8112832c <__divdf3+0x748>
81127fd8:	39ffff84 	addi	r7,r7,-2
81127fdc:	9725883a 	add	r18,r18,fp
81127fe0:	3004943a 	slli	r2,r6,16
81127fe4:	b012d43a 	srli	r9,r22,16
81127fe8:	b1bfffcc 	andi	r6,r22,65535
81127fec:	11e2b03a 	or	r17,r2,r7
81127ff0:	8806d43a 	srli	r3,r17,16
81127ff4:	893fffcc 	andi	r4,r17,65535
81127ff8:	218b383a 	mul	r5,r4,r6
81127ffc:	30c5383a 	mul	r2,r6,r3
81128000:	2249383a 	mul	r4,r4,r9
81128004:	280ed43a 	srli	r7,r5,16
81128008:	9225c83a 	sub	r18,r18,r8
8112800c:	2089883a 	add	r4,r4,r2
81128010:	3909883a 	add	r4,r7,r4
81128014:	1a47383a 	mul	r3,r3,r9
81128018:	2080022e 	bgeu	r4,r2,81128024 <__divdf3+0x440>
8112801c:	00800074 	movhi	r2,1
81128020:	1887883a 	add	r3,r3,r2
81128024:	2004d43a 	srli	r2,r4,16
81128028:	2008943a 	slli	r4,r4,16
8112802c:	297fffcc 	andi	r5,r5,65535
81128030:	10c7883a 	add	r3,r2,r3
81128034:	2149883a 	add	r4,r4,r5
81128038:	90c0a536 	bltu	r18,r3,811282d0 <__divdf3+0x6ec>
8112803c:	90c0bf26 	beq	r18,r3,8112833c <__divdf3+0x758>
81128040:	90c7c83a 	sub	r3,r18,r3
81128044:	810fc83a 	sub	r7,r16,r4
81128048:	81e5803a 	cmpltu	r18,r16,r7
8112804c:	1ca5c83a 	sub	r18,r3,r18
81128050:	e480c126 	beq	fp,r18,81128358 <__divdf3+0x774>
81128054:	a00b883a 	mov	r5,r20
81128058:	9009883a 	mov	r4,r18
8112805c:	d9800315 	stw	r6,12(sp)
81128060:	d9c00215 	stw	r7,8(sp)
81128064:	da400115 	stw	r9,4(sp)
81128068:	11270780 	call	81127078 <__udivsi3>
8112806c:	a00b883a 	mov	r5,r20
81128070:	9009883a 	mov	r4,r18
81128074:	d8800015 	stw	r2,0(sp)
81128078:	11270dc0 	call	811270dc <__umodsi3>
8112807c:	d9c00217 	ldw	r7,8(sp)
81128080:	da000017 	ldw	r8,0(sp)
81128084:	1006943a 	slli	r3,r2,16
81128088:	3804d43a 	srli	r2,r7,16
8112808c:	ba21383a 	mul	r16,r23,r8
81128090:	d9800317 	ldw	r6,12(sp)
81128094:	10c4b03a 	or	r2,r2,r3
81128098:	da400117 	ldw	r9,4(sp)
8112809c:	1400062e 	bgeu	r2,r16,811280b8 <__divdf3+0x4d4>
811280a0:	1705883a 	add	r2,r2,fp
811280a4:	40ffffc4 	addi	r3,r8,-1
811280a8:	1700ad36 	bltu	r2,fp,81128360 <__divdf3+0x77c>
811280ac:	1400ac2e 	bgeu	r2,r16,81128360 <__divdf3+0x77c>
811280b0:	423fff84 	addi	r8,r8,-2
811280b4:	1705883a 	add	r2,r2,fp
811280b8:	1421c83a 	sub	r16,r2,r16
811280bc:	a00b883a 	mov	r5,r20
811280c0:	8009883a 	mov	r4,r16
811280c4:	d9800315 	stw	r6,12(sp)
811280c8:	d9c00215 	stw	r7,8(sp)
811280cc:	da000015 	stw	r8,0(sp)
811280d0:	da400115 	stw	r9,4(sp)
811280d4:	11270780 	call	81127078 <__udivsi3>
811280d8:	8009883a 	mov	r4,r16
811280dc:	a00b883a 	mov	r5,r20
811280e0:	1025883a 	mov	r18,r2
811280e4:	11270dc0 	call	811270dc <__umodsi3>
811280e8:	d9c00217 	ldw	r7,8(sp)
811280ec:	1004943a 	slli	r2,r2,16
811280f0:	bcaf383a 	mul	r23,r23,r18
811280f4:	393fffcc 	andi	r4,r7,65535
811280f8:	2088b03a 	or	r4,r4,r2
811280fc:	d9800317 	ldw	r6,12(sp)
81128100:	da000017 	ldw	r8,0(sp)
81128104:	da400117 	ldw	r9,4(sp)
81128108:	25c0062e 	bgeu	r4,r23,81128124 <__divdf3+0x540>
8112810c:	2709883a 	add	r4,r4,fp
81128110:	90bfffc4 	addi	r2,r18,-1
81128114:	27009436 	bltu	r4,fp,81128368 <__divdf3+0x784>
81128118:	25c0932e 	bgeu	r4,r23,81128368 <__divdf3+0x784>
8112811c:	94bfff84 	addi	r18,r18,-2
81128120:	2709883a 	add	r4,r4,fp
81128124:	4004943a 	slli	r2,r8,16
81128128:	25efc83a 	sub	r23,r4,r23
8112812c:	1490b03a 	or	r8,r2,r18
81128130:	4008d43a 	srli	r4,r8,16
81128134:	40ffffcc 	andi	r3,r8,65535
81128138:	30c5383a 	mul	r2,r6,r3
8112813c:	1a47383a 	mul	r3,r3,r9
81128140:	310d383a 	mul	r6,r6,r4
81128144:	100ad43a 	srli	r5,r2,16
81128148:	4913383a 	mul	r9,r9,r4
8112814c:	1987883a 	add	r3,r3,r6
81128150:	28c7883a 	add	r3,r5,r3
81128154:	1980022e 	bgeu	r3,r6,81128160 <__divdf3+0x57c>
81128158:	01000074 	movhi	r4,1
8112815c:	4913883a 	add	r9,r9,r4
81128160:	1808d43a 	srli	r4,r3,16
81128164:	1806943a 	slli	r3,r3,16
81128168:	10bfffcc 	andi	r2,r2,65535
8112816c:	2253883a 	add	r9,r4,r9
81128170:	1887883a 	add	r3,r3,r2
81128174:	ba403836 	bltu	r23,r9,81128258 <__divdf3+0x674>
81128178:	ba403626 	beq	r23,r9,81128254 <__divdf3+0x670>
8112817c:	42000054 	ori	r8,r8,1
81128180:	a880ffc4 	addi	r2,r21,1023
81128184:	00bf570e 	bge	zero,r2,81127ee4 <__reset+0xfb107ee4>
81128188:	40c001cc 	andi	r3,r8,7
8112818c:	18000726 	beq	r3,zero,811281ac <__divdf3+0x5c8>
81128190:	40c003cc 	andi	r3,r8,15
81128194:	01000104 	movi	r4,4
81128198:	19000426 	beq	r3,r4,811281ac <__divdf3+0x5c8>
8112819c:	4107883a 	add	r3,r8,r4
811281a0:	1a11803a 	cmpltu	r8,r3,r8
811281a4:	8a23883a 	add	r17,r17,r8
811281a8:	1811883a 	mov	r8,r3
811281ac:	88c0402c 	andhi	r3,r17,256
811281b0:	18000426 	beq	r3,zero,811281c4 <__divdf3+0x5e0>
811281b4:	00ffc034 	movhi	r3,65280
811281b8:	18ffffc4 	addi	r3,r3,-1
811281bc:	a8810004 	addi	r2,r21,1024
811281c0:	88e2703a 	and	r17,r17,r3
811281c4:	00c1ff84 	movi	r3,2046
811281c8:	18bee316 	blt	r3,r2,81127d58 <__reset+0xfb107d58>
811281cc:	8824977a 	slli	r18,r17,29
811281d0:	4010d0fa 	srli	r8,r8,3
811281d4:	8822927a 	slli	r17,r17,9
811281d8:	1081ffcc 	andi	r2,r2,2047
811281dc:	9224b03a 	or	r18,r18,r8
811281e0:	880ad33a 	srli	r5,r17,12
811281e4:	98c0004c 	andi	r3,r19,1
811281e8:	003edf06 	br	81127d68 <__reset+0xfb107d68>
811281ec:	8080022c 	andhi	r2,r16,8
811281f0:	10001226 	beq	r2,zero,8112823c <__divdf3+0x658>
811281f4:	8880022c 	andhi	r2,r17,8
811281f8:	1000101e 	bne	r2,zero,8112823c <__divdf3+0x658>
811281fc:	00800434 	movhi	r2,16
81128200:	89400234 	orhi	r5,r17,8
81128204:	10bfffc4 	addi	r2,r2,-1
81128208:	b007883a 	mov	r3,r22
8112820c:	288a703a 	and	r5,r5,r2
81128210:	4025883a 	mov	r18,r8
81128214:	003f3106 	br	81127edc <__reset+0xfb107edc>
81128218:	008000c4 	movi	r2,3
8112821c:	3880a626 	beq	r7,r2,811284b8 <__divdf3+0x8d4>
81128220:	00800044 	movi	r2,1
81128224:	3880521e 	bne	r7,r2,81128370 <__divdf3+0x78c>
81128228:	b807883a 	mov	r3,r23
8112822c:	0005883a 	mov	r2,zero
81128230:	000b883a 	mov	r5,zero
81128234:	0025883a 	mov	r18,zero
81128238:	003ecb06 	br	81127d68 <__reset+0xfb107d68>
8112823c:	00800434 	movhi	r2,16
81128240:	81400234 	orhi	r5,r16,8
81128244:	10bfffc4 	addi	r2,r2,-1
81128248:	a007883a 	mov	r3,r20
8112824c:	288a703a 	and	r5,r5,r2
81128250:	003f2206 	br	81127edc <__reset+0xfb107edc>
81128254:	183fca26 	beq	r3,zero,81128180 <__reset+0xfb108180>
81128258:	e5ef883a 	add	r23,fp,r23
8112825c:	40bfffc4 	addi	r2,r8,-1
81128260:	bf00392e 	bgeu	r23,fp,81128348 <__divdf3+0x764>
81128264:	1011883a 	mov	r8,r2
81128268:	ba7fc41e 	bne	r23,r9,8112817c <__reset+0xfb10817c>
8112826c:	b0ffc31e 	bne	r22,r3,8112817c <__reset+0xfb10817c>
81128270:	003fc306 	br	81128180 <__reset+0xfb108180>
81128274:	143ff604 	addi	r16,r2,-40
81128278:	9c20983a 	sll	r16,r19,r16
8112827c:	0025883a 	mov	r18,zero
81128280:	003ee206 	br	81127e0c <__reset+0xfb107e0c>
81128284:	d9800315 	stw	r6,12(sp)
81128288:	d9c00215 	stw	r7,8(sp)
8112828c:	11138000 	call	81113800 <__clzsi2>
81128290:	10800804 	addi	r2,r2,32
81128294:	d9c00217 	ldw	r7,8(sp)
81128298:	d9800317 	ldw	r6,12(sp)
8112829c:	003ed106 	br	81127de4 <__reset+0xfb107de4>
811282a0:	147ff604 	addi	r17,r2,-40
811282a4:	3462983a 	sll	r17,r6,r17
811282a8:	0011883a 	mov	r8,zero
811282ac:	003ef506 	br	81127e84 <__reset+0xfb107e84>
811282b0:	3009883a 	mov	r4,r6
811282b4:	d9800315 	stw	r6,12(sp)
811282b8:	da400115 	stw	r9,4(sp)
811282bc:	11138000 	call	81113800 <__clzsi2>
811282c0:	10800804 	addi	r2,r2,32
811282c4:	da400117 	ldw	r9,4(sp)
811282c8:	d9800317 	ldw	r6,12(sp)
811282cc:	003ee306 	br	81127e5c <__reset+0xfb107e5c>
811282d0:	85a1883a 	add	r16,r16,r22
811282d4:	8585803a 	cmpltu	r2,r16,r22
811282d8:	1705883a 	add	r2,r2,fp
811282dc:	14a5883a 	add	r18,r2,r18
811282e0:	88bfffc4 	addi	r2,r17,-1
811282e4:	e4800c2e 	bgeu	fp,r18,81128318 <__divdf3+0x734>
811282e8:	90c03e36 	bltu	r18,r3,811283e4 <__divdf3+0x800>
811282ec:	1c806926 	beq	r3,r18,81128494 <__divdf3+0x8b0>
811282f0:	90c7c83a 	sub	r3,r18,r3
811282f4:	1023883a 	mov	r17,r2
811282f8:	003f5206 	br	81128044 <__reset+0xfb108044>
811282fc:	923f0436 	bltu	r18,r8,81127f10 <__reset+0xfb107f10>
81128300:	800897fa 	slli	r4,r16,31
81128304:	9004d07a 	srli	r2,r18,1
81128308:	8006d07a 	srli	r3,r16,1
8112830c:	902097fa 	slli	r16,r18,31
81128310:	20a4b03a 	or	r18,r4,r2
81128314:	003f0106 	br	81127f1c <__reset+0xfb107f1c>
81128318:	e4bff51e 	bne	fp,r18,811282f0 <__reset+0xfb1082f0>
8112831c:	85bff22e 	bgeu	r16,r22,811282e8 <__reset+0xfb1082e8>
81128320:	e0c7c83a 	sub	r3,fp,r3
81128324:	1023883a 	mov	r17,r2
81128328:	003f4606 	br	81128044 <__reset+0xfb108044>
8112832c:	100f883a 	mov	r7,r2
81128330:	003f2b06 	br	81127fe0 <__reset+0xfb107fe0>
81128334:	180d883a 	mov	r6,r3
81128338:	003f1306 	br	81127f88 <__reset+0xfb107f88>
8112833c:	813fe436 	bltu	r16,r4,811282d0 <__reset+0xfb1082d0>
81128340:	0007883a 	mov	r3,zero
81128344:	003f3f06 	br	81128044 <__reset+0xfb108044>
81128348:	ba402c36 	bltu	r23,r9,811283fc <__divdf3+0x818>
8112834c:	4dc05426 	beq	r9,r23,811284a0 <__divdf3+0x8bc>
81128350:	1011883a 	mov	r8,r2
81128354:	003f8906 	br	8112817c <__reset+0xfb10817c>
81128358:	023fffc4 	movi	r8,-1
8112835c:	003f8806 	br	81128180 <__reset+0xfb108180>
81128360:	1811883a 	mov	r8,r3
81128364:	003f5406 	br	811280b8 <__reset+0xfb1080b8>
81128368:	1025883a 	mov	r18,r2
8112836c:	003f6d06 	br	81128124 <__reset+0xfb108124>
81128370:	b827883a 	mov	r19,r23
81128374:	003f8206 	br	81128180 <__reset+0xfb108180>
81128378:	010007c4 	movi	r4,31
8112837c:	20c02616 	blt	r4,r3,81128418 <__divdf3+0x834>
81128380:	00800804 	movi	r2,32
81128384:	10c5c83a 	sub	r2,r2,r3
81128388:	888a983a 	sll	r5,r17,r2
8112838c:	40c8d83a 	srl	r4,r8,r3
81128390:	4084983a 	sll	r2,r8,r2
81128394:	88e2d83a 	srl	r17,r17,r3
81128398:	2906b03a 	or	r3,r5,r4
8112839c:	1004c03a 	cmpne	r2,r2,zero
811283a0:	1886b03a 	or	r3,r3,r2
811283a4:	188001cc 	andi	r2,r3,7
811283a8:	10000726 	beq	r2,zero,811283c8 <__divdf3+0x7e4>
811283ac:	188003cc 	andi	r2,r3,15
811283b0:	01000104 	movi	r4,4
811283b4:	11000426 	beq	r2,r4,811283c8 <__divdf3+0x7e4>
811283b8:	1805883a 	mov	r2,r3
811283bc:	10c00104 	addi	r3,r2,4
811283c0:	1885803a 	cmpltu	r2,r3,r2
811283c4:	88a3883a 	add	r17,r17,r2
811283c8:	8880202c 	andhi	r2,r17,128
811283cc:	10002726 	beq	r2,zero,8112846c <__divdf3+0x888>
811283d0:	98c0004c 	andi	r3,r19,1
811283d4:	00800044 	movi	r2,1
811283d8:	000b883a 	mov	r5,zero
811283dc:	0025883a 	mov	r18,zero
811283e0:	003e6106 	br	81127d68 <__reset+0xfb107d68>
811283e4:	85a1883a 	add	r16,r16,r22
811283e8:	8585803a 	cmpltu	r2,r16,r22
811283ec:	1705883a 	add	r2,r2,fp
811283f0:	14a5883a 	add	r18,r2,r18
811283f4:	8c7fff84 	addi	r17,r17,-2
811283f8:	003f1106 	br	81128040 <__reset+0xfb108040>
811283fc:	b589883a 	add	r4,r22,r22
81128400:	25ad803a 	cmpltu	r22,r4,r22
81128404:	b739883a 	add	fp,r22,fp
81128408:	40bfff84 	addi	r2,r8,-2
8112840c:	bf2f883a 	add	r23,r23,fp
81128410:	202d883a 	mov	r22,r4
81128414:	003f9306 	br	81128264 <__reset+0xfb108264>
81128418:	013ff844 	movi	r4,-31
8112841c:	2085c83a 	sub	r2,r4,r2
81128420:	8888d83a 	srl	r4,r17,r2
81128424:	00800804 	movi	r2,32
81128428:	18802126 	beq	r3,r2,811284b0 <__divdf3+0x8cc>
8112842c:	00801004 	movi	r2,64
81128430:	10c5c83a 	sub	r2,r2,r3
81128434:	8884983a 	sll	r2,r17,r2
81128438:	1204b03a 	or	r2,r2,r8
8112843c:	1004c03a 	cmpne	r2,r2,zero
81128440:	2084b03a 	or	r2,r4,r2
81128444:	144001cc 	andi	r17,r2,7
81128448:	88000d1e 	bne	r17,zero,81128480 <__divdf3+0x89c>
8112844c:	000b883a 	mov	r5,zero
81128450:	1024d0fa 	srli	r18,r2,3
81128454:	98c0004c 	andi	r3,r19,1
81128458:	0005883a 	mov	r2,zero
8112845c:	9464b03a 	or	r18,r18,r17
81128460:	003e4106 	br	81127d68 <__reset+0xfb107d68>
81128464:	1007883a 	mov	r3,r2
81128468:	0023883a 	mov	r17,zero
8112846c:	880a927a 	slli	r5,r17,9
81128470:	1805883a 	mov	r2,r3
81128474:	8822977a 	slli	r17,r17,29
81128478:	280ad33a 	srli	r5,r5,12
8112847c:	003ff406 	br	81128450 <__reset+0xfb108450>
81128480:	10c003cc 	andi	r3,r2,15
81128484:	01000104 	movi	r4,4
81128488:	193ff626 	beq	r3,r4,81128464 <__reset+0xfb108464>
8112848c:	0023883a 	mov	r17,zero
81128490:	003fca06 	br	811283bc <__reset+0xfb1083bc>
81128494:	813fd336 	bltu	r16,r4,811283e4 <__reset+0xfb1083e4>
81128498:	1023883a 	mov	r17,r2
8112849c:	003fa806 	br	81128340 <__reset+0xfb108340>
811284a0:	b0ffd636 	bltu	r22,r3,811283fc <__reset+0xfb1083fc>
811284a4:	1011883a 	mov	r8,r2
811284a8:	b0ff341e 	bne	r22,r3,8112817c <__reset+0xfb10817c>
811284ac:	003f3406 	br	81128180 <__reset+0xfb108180>
811284b0:	0005883a 	mov	r2,zero
811284b4:	003fe006 	br	81128438 <__reset+0xfb108438>
811284b8:	00800434 	movhi	r2,16
811284bc:	89400234 	orhi	r5,r17,8
811284c0:	10bfffc4 	addi	r2,r2,-1
811284c4:	b807883a 	mov	r3,r23
811284c8:	288a703a 	and	r5,r5,r2
811284cc:	4025883a 	mov	r18,r8
811284d0:	003e8206 	br	81127edc <__reset+0xfb107edc>

811284d4 <__eqdf2>:
811284d4:	2804d53a 	srli	r2,r5,20
811284d8:	3806d53a 	srli	r3,r7,20
811284dc:	02000434 	movhi	r8,16
811284e0:	423fffc4 	addi	r8,r8,-1
811284e4:	1081ffcc 	andi	r2,r2,2047
811284e8:	0281ffc4 	movi	r10,2047
811284ec:	2a12703a 	and	r9,r5,r8
811284f0:	18c1ffcc 	andi	r3,r3,2047
811284f4:	3a10703a 	and	r8,r7,r8
811284f8:	280ad7fa 	srli	r5,r5,31
811284fc:	380ed7fa 	srli	r7,r7,31
81128500:	12801026 	beq	r2,r10,81128544 <__eqdf2+0x70>
81128504:	0281ffc4 	movi	r10,2047
81128508:	1a800a26 	beq	r3,r10,81128534 <__eqdf2+0x60>
8112850c:	10c00226 	beq	r2,r3,81128518 <__eqdf2+0x44>
81128510:	00800044 	movi	r2,1
81128514:	f800283a 	ret
81128518:	4a3ffd1e 	bne	r9,r8,81128510 <__reset+0xfb108510>
8112851c:	21bffc1e 	bne	r4,r6,81128510 <__reset+0xfb108510>
81128520:	29c00c26 	beq	r5,r7,81128554 <__eqdf2+0x80>
81128524:	103ffa1e 	bne	r2,zero,81128510 <__reset+0xfb108510>
81128528:	2244b03a 	or	r2,r4,r9
8112852c:	1004c03a 	cmpne	r2,r2,zero
81128530:	f800283a 	ret
81128534:	3214b03a 	or	r10,r6,r8
81128538:	503ff426 	beq	r10,zero,8112850c <__reset+0xfb10850c>
8112853c:	00800044 	movi	r2,1
81128540:	f800283a 	ret
81128544:	2254b03a 	or	r10,r4,r9
81128548:	503fee26 	beq	r10,zero,81128504 <__reset+0xfb108504>
8112854c:	00800044 	movi	r2,1
81128550:	f800283a 	ret
81128554:	0005883a 	mov	r2,zero
81128558:	f800283a 	ret

8112855c <__gedf2>:
8112855c:	2804d53a 	srli	r2,r5,20
81128560:	3806d53a 	srli	r3,r7,20
81128564:	02000434 	movhi	r8,16
81128568:	423fffc4 	addi	r8,r8,-1
8112856c:	1081ffcc 	andi	r2,r2,2047
81128570:	0241ffc4 	movi	r9,2047
81128574:	2a14703a 	and	r10,r5,r8
81128578:	18c1ffcc 	andi	r3,r3,2047
8112857c:	3a10703a 	and	r8,r7,r8
81128580:	280ad7fa 	srli	r5,r5,31
81128584:	380ed7fa 	srli	r7,r7,31
81128588:	12401d26 	beq	r2,r9,81128600 <__gedf2+0xa4>
8112858c:	0241ffc4 	movi	r9,2047
81128590:	1a401226 	beq	r3,r9,811285dc <__gedf2+0x80>
81128594:	1000081e 	bne	r2,zero,811285b8 <__gedf2+0x5c>
81128598:	2296b03a 	or	r11,r4,r10
8112859c:	5813003a 	cmpeq	r9,r11,zero
811285a0:	1800091e 	bne	r3,zero,811285c8 <__gedf2+0x6c>
811285a4:	3218b03a 	or	r12,r6,r8
811285a8:	6000071e 	bne	r12,zero,811285c8 <__gedf2+0x6c>
811285ac:	0005883a 	mov	r2,zero
811285b0:	5800101e 	bne	r11,zero,811285f4 <__gedf2+0x98>
811285b4:	f800283a 	ret
811285b8:	18000c1e 	bne	r3,zero,811285ec <__gedf2+0x90>
811285bc:	3212b03a 	or	r9,r6,r8
811285c0:	48000c26 	beq	r9,zero,811285f4 <__gedf2+0x98>
811285c4:	0013883a 	mov	r9,zero
811285c8:	39c03fcc 	andi	r7,r7,255
811285cc:	48000826 	beq	r9,zero,811285f0 <__gedf2+0x94>
811285d0:	38000926 	beq	r7,zero,811285f8 <__gedf2+0x9c>
811285d4:	00800044 	movi	r2,1
811285d8:	f800283a 	ret
811285dc:	3212b03a 	or	r9,r6,r8
811285e0:	483fec26 	beq	r9,zero,81128594 <__reset+0xfb108594>
811285e4:	00bfff84 	movi	r2,-2
811285e8:	f800283a 	ret
811285ec:	39c03fcc 	andi	r7,r7,255
811285f0:	29c00626 	beq	r5,r7,8112860c <__gedf2+0xb0>
811285f4:	283ff726 	beq	r5,zero,811285d4 <__reset+0xfb1085d4>
811285f8:	00bfffc4 	movi	r2,-1
811285fc:	f800283a 	ret
81128600:	2292b03a 	or	r9,r4,r10
81128604:	483fe126 	beq	r9,zero,8112858c <__reset+0xfb10858c>
81128608:	003ff606 	br	811285e4 <__reset+0xfb1085e4>
8112860c:	18bff916 	blt	r3,r2,811285f4 <__reset+0xfb1085f4>
81128610:	10c00316 	blt	r2,r3,81128620 <__gedf2+0xc4>
81128614:	42bff736 	bltu	r8,r10,811285f4 <__reset+0xfb1085f4>
81128618:	52000326 	beq	r10,r8,81128628 <__gedf2+0xcc>
8112861c:	5200042e 	bgeu	r10,r8,81128630 <__gedf2+0xd4>
81128620:	283fec1e 	bne	r5,zero,811285d4 <__reset+0xfb1085d4>
81128624:	003ff406 	br	811285f8 <__reset+0xfb1085f8>
81128628:	313ff236 	bltu	r6,r4,811285f4 <__reset+0xfb1085f4>
8112862c:	21bffc36 	bltu	r4,r6,81128620 <__reset+0xfb108620>
81128630:	0005883a 	mov	r2,zero
81128634:	f800283a 	ret

81128638 <__ledf2>:
81128638:	2804d53a 	srli	r2,r5,20
8112863c:	3810d53a 	srli	r8,r7,20
81128640:	00c00434 	movhi	r3,16
81128644:	18ffffc4 	addi	r3,r3,-1
81128648:	1081ffcc 	andi	r2,r2,2047
8112864c:	0241ffc4 	movi	r9,2047
81128650:	28d4703a 	and	r10,r5,r3
81128654:	4201ffcc 	andi	r8,r8,2047
81128658:	38c6703a 	and	r3,r7,r3
8112865c:	280ad7fa 	srli	r5,r5,31
81128660:	380ed7fa 	srli	r7,r7,31
81128664:	12401f26 	beq	r2,r9,811286e4 <__ledf2+0xac>
81128668:	0241ffc4 	movi	r9,2047
8112866c:	42401426 	beq	r8,r9,811286c0 <__ledf2+0x88>
81128670:	1000091e 	bne	r2,zero,81128698 <__ledf2+0x60>
81128674:	2296b03a 	or	r11,r4,r10
81128678:	5813003a 	cmpeq	r9,r11,zero
8112867c:	29403fcc 	andi	r5,r5,255
81128680:	40000a1e 	bne	r8,zero,811286ac <__ledf2+0x74>
81128684:	30d8b03a 	or	r12,r6,r3
81128688:	6000081e 	bne	r12,zero,811286ac <__ledf2+0x74>
8112868c:	0005883a 	mov	r2,zero
81128690:	5800111e 	bne	r11,zero,811286d8 <__ledf2+0xa0>
81128694:	f800283a 	ret
81128698:	29403fcc 	andi	r5,r5,255
8112869c:	40000c1e 	bne	r8,zero,811286d0 <__ledf2+0x98>
811286a0:	30d2b03a 	or	r9,r6,r3
811286a4:	48000c26 	beq	r9,zero,811286d8 <__ledf2+0xa0>
811286a8:	0013883a 	mov	r9,zero
811286ac:	39c03fcc 	andi	r7,r7,255
811286b0:	48000826 	beq	r9,zero,811286d4 <__ledf2+0x9c>
811286b4:	38001126 	beq	r7,zero,811286fc <__ledf2+0xc4>
811286b8:	00800044 	movi	r2,1
811286bc:	f800283a 	ret
811286c0:	30d2b03a 	or	r9,r6,r3
811286c4:	483fea26 	beq	r9,zero,81128670 <__reset+0xfb108670>
811286c8:	00800084 	movi	r2,2
811286cc:	f800283a 	ret
811286d0:	39c03fcc 	andi	r7,r7,255
811286d4:	39400726 	beq	r7,r5,811286f4 <__ledf2+0xbc>
811286d8:	2800081e 	bne	r5,zero,811286fc <__ledf2+0xc4>
811286dc:	00800044 	movi	r2,1
811286e0:	f800283a 	ret
811286e4:	2292b03a 	or	r9,r4,r10
811286e8:	483fdf26 	beq	r9,zero,81128668 <__reset+0xfb108668>
811286ec:	00800084 	movi	r2,2
811286f0:	f800283a 	ret
811286f4:	4080030e 	bge	r8,r2,81128704 <__ledf2+0xcc>
811286f8:	383fef26 	beq	r7,zero,811286b8 <__reset+0xfb1086b8>
811286fc:	00bfffc4 	movi	r2,-1
81128700:	f800283a 	ret
81128704:	123feb16 	blt	r2,r8,811286b4 <__reset+0xfb1086b4>
81128708:	1abff336 	bltu	r3,r10,811286d8 <__reset+0xfb1086d8>
8112870c:	50c00326 	beq	r10,r3,8112871c <__ledf2+0xe4>
81128710:	50c0042e 	bgeu	r10,r3,81128724 <__ledf2+0xec>
81128714:	283fe81e 	bne	r5,zero,811286b8 <__reset+0xfb1086b8>
81128718:	003ff806 	br	811286fc <__reset+0xfb1086fc>
8112871c:	313fee36 	bltu	r6,r4,811286d8 <__reset+0xfb1086d8>
81128720:	21bffc36 	bltu	r4,r6,81128714 <__reset+0xfb108714>
81128724:	0005883a 	mov	r2,zero
81128728:	f800283a 	ret

8112872c <__subdf3>:
8112872c:	02000434 	movhi	r8,16
81128730:	423fffc4 	addi	r8,r8,-1
81128734:	defffb04 	addi	sp,sp,-20
81128738:	2a14703a 	and	r10,r5,r8
8112873c:	3812d53a 	srli	r9,r7,20
81128740:	3a10703a 	and	r8,r7,r8
81128744:	de00012e 	bgeu	sp,et,8112874c <__subdf3+0x20>
81128748:	003b68fa 	trap	3
8112874c:	2006d77a 	srli	r3,r4,29
81128750:	3004d77a 	srli	r2,r6,29
81128754:	dc000015 	stw	r16,0(sp)
81128758:	501490fa 	slli	r10,r10,3
8112875c:	2820d53a 	srli	r16,r5,20
81128760:	401090fa 	slli	r8,r8,3
81128764:	dc800215 	stw	r18,8(sp)
81128768:	dc400115 	stw	r17,4(sp)
8112876c:	dfc00415 	stw	ra,16(sp)
81128770:	202290fa 	slli	r17,r4,3
81128774:	dcc00315 	stw	r19,12(sp)
81128778:	4a41ffcc 	andi	r9,r9,2047
8112877c:	0101ffc4 	movi	r4,2047
81128780:	2824d7fa 	srli	r18,r5,31
81128784:	8401ffcc 	andi	r16,r16,2047
81128788:	50c6b03a 	or	r3,r10,r3
8112878c:	380ed7fa 	srli	r7,r7,31
81128790:	408ab03a 	or	r5,r8,r2
81128794:	300c90fa 	slli	r6,r6,3
81128798:	49009626 	beq	r9,r4,811289f4 <__subdf3+0x2c8>
8112879c:	39c0005c 	xori	r7,r7,1
811287a0:	8245c83a 	sub	r2,r16,r9
811287a4:	3c807426 	beq	r7,r18,81128978 <__subdf3+0x24c>
811287a8:	0080af0e 	bge	zero,r2,81128a68 <__subdf3+0x33c>
811287ac:	48002a1e 	bne	r9,zero,81128858 <__subdf3+0x12c>
811287b0:	2988b03a 	or	r4,r5,r6
811287b4:	20009a1e 	bne	r4,zero,81128a20 <__subdf3+0x2f4>
811287b8:	888001cc 	andi	r2,r17,7
811287bc:	10000726 	beq	r2,zero,811287dc <__subdf3+0xb0>
811287c0:	888003cc 	andi	r2,r17,15
811287c4:	01000104 	movi	r4,4
811287c8:	11000426 	beq	r2,r4,811287dc <__subdf3+0xb0>
811287cc:	890b883a 	add	r5,r17,r4
811287d0:	2c63803a 	cmpltu	r17,r5,r17
811287d4:	1c47883a 	add	r3,r3,r17
811287d8:	2823883a 	mov	r17,r5
811287dc:	1880202c 	andhi	r2,r3,128
811287e0:	10005926 	beq	r2,zero,81128948 <__subdf3+0x21c>
811287e4:	84000044 	addi	r16,r16,1
811287e8:	0081ffc4 	movi	r2,2047
811287ec:	8080be26 	beq	r16,r2,81128ae8 <__subdf3+0x3bc>
811287f0:	017fe034 	movhi	r5,65408
811287f4:	297fffc4 	addi	r5,r5,-1
811287f8:	1946703a 	and	r3,r3,r5
811287fc:	1804977a 	slli	r2,r3,29
81128800:	1806927a 	slli	r3,r3,9
81128804:	8822d0fa 	srli	r17,r17,3
81128808:	8401ffcc 	andi	r16,r16,2047
8112880c:	180ad33a 	srli	r5,r3,12
81128810:	9100004c 	andi	r4,r18,1
81128814:	1444b03a 	or	r2,r2,r17
81128818:	80c1ffcc 	andi	r3,r16,2047
8112881c:	1820953a 	slli	r16,r3,20
81128820:	20c03fcc 	andi	r3,r4,255
81128824:	180897fa 	slli	r4,r3,31
81128828:	00c00434 	movhi	r3,16
8112882c:	18ffffc4 	addi	r3,r3,-1
81128830:	28c6703a 	and	r3,r5,r3
81128834:	1c06b03a 	or	r3,r3,r16
81128838:	1906b03a 	or	r3,r3,r4
8112883c:	dfc00417 	ldw	ra,16(sp)
81128840:	dcc00317 	ldw	r19,12(sp)
81128844:	dc800217 	ldw	r18,8(sp)
81128848:	dc400117 	ldw	r17,4(sp)
8112884c:	dc000017 	ldw	r16,0(sp)
81128850:	dec00504 	addi	sp,sp,20
81128854:	f800283a 	ret
81128858:	0101ffc4 	movi	r4,2047
8112885c:	813fd626 	beq	r16,r4,811287b8 <__reset+0xfb1087b8>
81128860:	29402034 	orhi	r5,r5,128
81128864:	01000e04 	movi	r4,56
81128868:	2080a316 	blt	r4,r2,81128af8 <__subdf3+0x3cc>
8112886c:	010007c4 	movi	r4,31
81128870:	2080c616 	blt	r4,r2,81128b8c <__subdf3+0x460>
81128874:	01000804 	movi	r4,32
81128878:	2089c83a 	sub	r4,r4,r2
8112887c:	2910983a 	sll	r8,r5,r4
81128880:	308ed83a 	srl	r7,r6,r2
81128884:	3108983a 	sll	r4,r6,r4
81128888:	2884d83a 	srl	r2,r5,r2
8112888c:	41ccb03a 	or	r6,r8,r7
81128890:	2008c03a 	cmpne	r4,r4,zero
81128894:	310cb03a 	or	r6,r6,r4
81128898:	898dc83a 	sub	r6,r17,r6
8112889c:	89a3803a 	cmpltu	r17,r17,r6
811288a0:	1887c83a 	sub	r3,r3,r2
811288a4:	1c47c83a 	sub	r3,r3,r17
811288a8:	3023883a 	mov	r17,r6
811288ac:	1880202c 	andhi	r2,r3,128
811288b0:	10002326 	beq	r2,zero,81128940 <__subdf3+0x214>
811288b4:	04c02034 	movhi	r19,128
811288b8:	9cffffc4 	addi	r19,r19,-1
811288bc:	1ce6703a 	and	r19,r3,r19
811288c0:	98007a26 	beq	r19,zero,81128aac <__subdf3+0x380>
811288c4:	9809883a 	mov	r4,r19
811288c8:	11138000 	call	81113800 <__clzsi2>
811288cc:	113ffe04 	addi	r4,r2,-8
811288d0:	00c007c4 	movi	r3,31
811288d4:	19007b16 	blt	r3,r4,81128ac4 <__subdf3+0x398>
811288d8:	00800804 	movi	r2,32
811288dc:	1105c83a 	sub	r2,r2,r4
811288e0:	8884d83a 	srl	r2,r17,r2
811288e4:	9906983a 	sll	r3,r19,r4
811288e8:	8922983a 	sll	r17,r17,r4
811288ec:	10c4b03a 	or	r2,r2,r3
811288f0:	24007816 	blt	r4,r16,81128ad4 <__subdf3+0x3a8>
811288f4:	2421c83a 	sub	r16,r4,r16
811288f8:	80c00044 	addi	r3,r16,1
811288fc:	010007c4 	movi	r4,31
81128900:	20c09516 	blt	r4,r3,81128b58 <__subdf3+0x42c>
81128904:	01400804 	movi	r5,32
81128908:	28cbc83a 	sub	r5,r5,r3
8112890c:	88c8d83a 	srl	r4,r17,r3
81128910:	8962983a 	sll	r17,r17,r5
81128914:	114a983a 	sll	r5,r2,r5
81128918:	10c6d83a 	srl	r3,r2,r3
8112891c:	8804c03a 	cmpne	r2,r17,zero
81128920:	290ab03a 	or	r5,r5,r4
81128924:	28a2b03a 	or	r17,r5,r2
81128928:	0021883a 	mov	r16,zero
8112892c:	003fa206 	br	811287b8 <__reset+0xfb1087b8>
81128930:	2090b03a 	or	r8,r4,r2
81128934:	40018e26 	beq	r8,zero,81128f70 <__subdf3+0x844>
81128938:	1007883a 	mov	r3,r2
8112893c:	2023883a 	mov	r17,r4
81128940:	888001cc 	andi	r2,r17,7
81128944:	103f9e1e 	bne	r2,zero,811287c0 <__reset+0xfb1087c0>
81128948:	1804977a 	slli	r2,r3,29
8112894c:	8822d0fa 	srli	r17,r17,3
81128950:	1810d0fa 	srli	r8,r3,3
81128954:	9100004c 	andi	r4,r18,1
81128958:	1444b03a 	or	r2,r2,r17
8112895c:	00c1ffc4 	movi	r3,2047
81128960:	80c02826 	beq	r16,r3,81128a04 <__subdf3+0x2d8>
81128964:	01400434 	movhi	r5,16
81128968:	297fffc4 	addi	r5,r5,-1
8112896c:	80e0703a 	and	r16,r16,r3
81128970:	414a703a 	and	r5,r8,r5
81128974:	003fa806 	br	81128818 <__reset+0xfb108818>
81128978:	0080630e 	bge	zero,r2,81128b08 <__subdf3+0x3dc>
8112897c:	48003026 	beq	r9,zero,81128a40 <__subdf3+0x314>
81128980:	0101ffc4 	movi	r4,2047
81128984:	813f8c26 	beq	r16,r4,811287b8 <__reset+0xfb1087b8>
81128988:	29402034 	orhi	r5,r5,128
8112898c:	01000e04 	movi	r4,56
81128990:	2080a90e 	bge	r4,r2,81128c38 <__subdf3+0x50c>
81128994:	298cb03a 	or	r6,r5,r6
81128998:	3012c03a 	cmpne	r9,r6,zero
8112899c:	0005883a 	mov	r2,zero
811289a0:	4c53883a 	add	r9,r9,r17
811289a4:	4c63803a 	cmpltu	r17,r9,r17
811289a8:	10c7883a 	add	r3,r2,r3
811289ac:	88c7883a 	add	r3,r17,r3
811289b0:	4823883a 	mov	r17,r9
811289b4:	1880202c 	andhi	r2,r3,128
811289b8:	1000d026 	beq	r2,zero,81128cfc <__subdf3+0x5d0>
811289bc:	84000044 	addi	r16,r16,1
811289c0:	0081ffc4 	movi	r2,2047
811289c4:	8080fe26 	beq	r16,r2,81128dc0 <__subdf3+0x694>
811289c8:	00bfe034 	movhi	r2,65408
811289cc:	10bfffc4 	addi	r2,r2,-1
811289d0:	1886703a 	and	r3,r3,r2
811289d4:	880ad07a 	srli	r5,r17,1
811289d8:	180497fa 	slli	r2,r3,31
811289dc:	8900004c 	andi	r4,r17,1
811289e0:	2922b03a 	or	r17,r5,r4
811289e4:	1806d07a 	srli	r3,r3,1
811289e8:	1462b03a 	or	r17,r2,r17
811289ec:	3825883a 	mov	r18,r7
811289f0:	003f7106 	br	811287b8 <__reset+0xfb1087b8>
811289f4:	2984b03a 	or	r2,r5,r6
811289f8:	103f6826 	beq	r2,zero,8112879c <__reset+0xfb10879c>
811289fc:	39c03fcc 	andi	r7,r7,255
81128a00:	003f6706 	br	811287a0 <__reset+0xfb1087a0>
81128a04:	4086b03a 	or	r3,r8,r2
81128a08:	18015226 	beq	r3,zero,81128f54 <__subdf3+0x828>
81128a0c:	00c00434 	movhi	r3,16
81128a10:	41400234 	orhi	r5,r8,8
81128a14:	18ffffc4 	addi	r3,r3,-1
81128a18:	28ca703a 	and	r5,r5,r3
81128a1c:	003f7e06 	br	81128818 <__reset+0xfb108818>
81128a20:	10bfffc4 	addi	r2,r2,-1
81128a24:	1000491e 	bne	r2,zero,81128b4c <__subdf3+0x420>
81128a28:	898fc83a 	sub	r7,r17,r6
81128a2c:	89e3803a 	cmpltu	r17,r17,r7
81128a30:	1947c83a 	sub	r3,r3,r5
81128a34:	1c47c83a 	sub	r3,r3,r17
81128a38:	3823883a 	mov	r17,r7
81128a3c:	003f9b06 	br	811288ac <__reset+0xfb1088ac>
81128a40:	2988b03a 	or	r4,r5,r6
81128a44:	203f5c26 	beq	r4,zero,811287b8 <__reset+0xfb1087b8>
81128a48:	10bfffc4 	addi	r2,r2,-1
81128a4c:	1000931e 	bne	r2,zero,81128c9c <__subdf3+0x570>
81128a50:	898d883a 	add	r6,r17,r6
81128a54:	3463803a 	cmpltu	r17,r6,r17
81128a58:	1947883a 	add	r3,r3,r5
81128a5c:	88c7883a 	add	r3,r17,r3
81128a60:	3023883a 	mov	r17,r6
81128a64:	003fd306 	br	811289b4 <__reset+0xfb1089b4>
81128a68:	1000541e 	bne	r2,zero,81128bbc <__subdf3+0x490>
81128a6c:	80800044 	addi	r2,r16,1
81128a70:	1081ffcc 	andi	r2,r2,2047
81128a74:	01000044 	movi	r4,1
81128a78:	2080a20e 	bge	r4,r2,81128d04 <__subdf3+0x5d8>
81128a7c:	8989c83a 	sub	r4,r17,r6
81128a80:	8905803a 	cmpltu	r2,r17,r4
81128a84:	1967c83a 	sub	r19,r3,r5
81128a88:	98a7c83a 	sub	r19,r19,r2
81128a8c:	9880202c 	andhi	r2,r19,128
81128a90:	10006326 	beq	r2,zero,81128c20 <__subdf3+0x4f4>
81128a94:	3463c83a 	sub	r17,r6,r17
81128a98:	28c7c83a 	sub	r3,r5,r3
81128a9c:	344d803a 	cmpltu	r6,r6,r17
81128aa0:	19a7c83a 	sub	r19,r3,r6
81128aa4:	3825883a 	mov	r18,r7
81128aa8:	983f861e 	bne	r19,zero,811288c4 <__reset+0xfb1088c4>
81128aac:	8809883a 	mov	r4,r17
81128ab0:	11138000 	call	81113800 <__clzsi2>
81128ab4:	10800804 	addi	r2,r2,32
81128ab8:	113ffe04 	addi	r4,r2,-8
81128abc:	00c007c4 	movi	r3,31
81128ac0:	193f850e 	bge	r3,r4,811288d8 <__reset+0xfb1088d8>
81128ac4:	10bff604 	addi	r2,r2,-40
81128ac8:	8884983a 	sll	r2,r17,r2
81128acc:	0023883a 	mov	r17,zero
81128ad0:	243f880e 	bge	r4,r16,811288f4 <__reset+0xfb1088f4>
81128ad4:	00ffe034 	movhi	r3,65408
81128ad8:	18ffffc4 	addi	r3,r3,-1
81128adc:	8121c83a 	sub	r16,r16,r4
81128ae0:	10c6703a 	and	r3,r2,r3
81128ae4:	003f3406 	br	811287b8 <__reset+0xfb1087b8>
81128ae8:	9100004c 	andi	r4,r18,1
81128aec:	000b883a 	mov	r5,zero
81128af0:	0005883a 	mov	r2,zero
81128af4:	003f4806 	br	81128818 <__reset+0xfb108818>
81128af8:	298cb03a 	or	r6,r5,r6
81128afc:	300cc03a 	cmpne	r6,r6,zero
81128b00:	0005883a 	mov	r2,zero
81128b04:	003f6406 	br	81128898 <__reset+0xfb108898>
81128b08:	10009a1e 	bne	r2,zero,81128d74 <__subdf3+0x648>
81128b0c:	82400044 	addi	r9,r16,1
81128b10:	4881ffcc 	andi	r2,r9,2047
81128b14:	02800044 	movi	r10,1
81128b18:	5080670e 	bge	r10,r2,81128cb8 <__subdf3+0x58c>
81128b1c:	0081ffc4 	movi	r2,2047
81128b20:	4880af26 	beq	r9,r2,81128de0 <__subdf3+0x6b4>
81128b24:	898d883a 	add	r6,r17,r6
81128b28:	1945883a 	add	r2,r3,r5
81128b2c:	3447803a 	cmpltu	r3,r6,r17
81128b30:	1887883a 	add	r3,r3,r2
81128b34:	182297fa 	slli	r17,r3,31
81128b38:	300cd07a 	srli	r6,r6,1
81128b3c:	1806d07a 	srli	r3,r3,1
81128b40:	4821883a 	mov	r16,r9
81128b44:	89a2b03a 	or	r17,r17,r6
81128b48:	003f1b06 	br	811287b8 <__reset+0xfb1087b8>
81128b4c:	0101ffc4 	movi	r4,2047
81128b50:	813f441e 	bne	r16,r4,81128864 <__reset+0xfb108864>
81128b54:	003f1806 	br	811287b8 <__reset+0xfb1087b8>
81128b58:	843ff844 	addi	r16,r16,-31
81128b5c:	01400804 	movi	r5,32
81128b60:	1408d83a 	srl	r4,r2,r16
81128b64:	19405026 	beq	r3,r5,81128ca8 <__subdf3+0x57c>
81128b68:	01401004 	movi	r5,64
81128b6c:	28c7c83a 	sub	r3,r5,r3
81128b70:	10c4983a 	sll	r2,r2,r3
81128b74:	88a2b03a 	or	r17,r17,r2
81128b78:	8822c03a 	cmpne	r17,r17,zero
81128b7c:	2462b03a 	or	r17,r4,r17
81128b80:	0007883a 	mov	r3,zero
81128b84:	0021883a 	mov	r16,zero
81128b88:	003f6d06 	br	81128940 <__reset+0xfb108940>
81128b8c:	11fff804 	addi	r7,r2,-32
81128b90:	01000804 	movi	r4,32
81128b94:	29ced83a 	srl	r7,r5,r7
81128b98:	11004526 	beq	r2,r4,81128cb0 <__subdf3+0x584>
81128b9c:	01001004 	movi	r4,64
81128ba0:	2089c83a 	sub	r4,r4,r2
81128ba4:	2904983a 	sll	r2,r5,r4
81128ba8:	118cb03a 	or	r6,r2,r6
81128bac:	300cc03a 	cmpne	r6,r6,zero
81128bb0:	398cb03a 	or	r6,r7,r6
81128bb4:	0005883a 	mov	r2,zero
81128bb8:	003f3706 	br	81128898 <__reset+0xfb108898>
81128bbc:	80002a26 	beq	r16,zero,81128c68 <__subdf3+0x53c>
81128bc0:	0101ffc4 	movi	r4,2047
81128bc4:	49006626 	beq	r9,r4,81128d60 <__subdf3+0x634>
81128bc8:	0085c83a 	sub	r2,zero,r2
81128bcc:	18c02034 	orhi	r3,r3,128
81128bd0:	01000e04 	movi	r4,56
81128bd4:	20807e16 	blt	r4,r2,81128dd0 <__subdf3+0x6a4>
81128bd8:	010007c4 	movi	r4,31
81128bdc:	2080e716 	blt	r4,r2,81128f7c <__subdf3+0x850>
81128be0:	01000804 	movi	r4,32
81128be4:	2089c83a 	sub	r4,r4,r2
81128be8:	1914983a 	sll	r10,r3,r4
81128bec:	8890d83a 	srl	r8,r17,r2
81128bf0:	8908983a 	sll	r4,r17,r4
81128bf4:	1884d83a 	srl	r2,r3,r2
81128bf8:	5222b03a 	or	r17,r10,r8
81128bfc:	2006c03a 	cmpne	r3,r4,zero
81128c00:	88e2b03a 	or	r17,r17,r3
81128c04:	3463c83a 	sub	r17,r6,r17
81128c08:	2885c83a 	sub	r2,r5,r2
81128c0c:	344d803a 	cmpltu	r6,r6,r17
81128c10:	1187c83a 	sub	r3,r2,r6
81128c14:	4821883a 	mov	r16,r9
81128c18:	3825883a 	mov	r18,r7
81128c1c:	003f2306 	br	811288ac <__reset+0xfb1088ac>
81128c20:	24d0b03a 	or	r8,r4,r19
81128c24:	40001b1e 	bne	r8,zero,81128c94 <__subdf3+0x568>
81128c28:	0005883a 	mov	r2,zero
81128c2c:	0009883a 	mov	r4,zero
81128c30:	0021883a 	mov	r16,zero
81128c34:	003f4906 	br	8112895c <__reset+0xfb10895c>
81128c38:	010007c4 	movi	r4,31
81128c3c:	20803a16 	blt	r4,r2,81128d28 <__subdf3+0x5fc>
81128c40:	01000804 	movi	r4,32
81128c44:	2089c83a 	sub	r4,r4,r2
81128c48:	2912983a 	sll	r9,r5,r4
81128c4c:	3090d83a 	srl	r8,r6,r2
81128c50:	3108983a 	sll	r4,r6,r4
81128c54:	2884d83a 	srl	r2,r5,r2
81128c58:	4a12b03a 	or	r9,r9,r8
81128c5c:	2008c03a 	cmpne	r4,r4,zero
81128c60:	4912b03a 	or	r9,r9,r4
81128c64:	003f4e06 	br	811289a0 <__reset+0xfb1089a0>
81128c68:	1c48b03a 	or	r4,r3,r17
81128c6c:	20003c26 	beq	r4,zero,81128d60 <__subdf3+0x634>
81128c70:	0084303a 	nor	r2,zero,r2
81128c74:	1000381e 	bne	r2,zero,81128d58 <__subdf3+0x62c>
81128c78:	3463c83a 	sub	r17,r6,r17
81128c7c:	28c5c83a 	sub	r2,r5,r3
81128c80:	344d803a 	cmpltu	r6,r6,r17
81128c84:	1187c83a 	sub	r3,r2,r6
81128c88:	4821883a 	mov	r16,r9
81128c8c:	3825883a 	mov	r18,r7
81128c90:	003f0606 	br	811288ac <__reset+0xfb1088ac>
81128c94:	2023883a 	mov	r17,r4
81128c98:	003f0906 	br	811288c0 <__reset+0xfb1088c0>
81128c9c:	0101ffc4 	movi	r4,2047
81128ca0:	813f3a1e 	bne	r16,r4,8112898c <__reset+0xfb10898c>
81128ca4:	003ec406 	br	811287b8 <__reset+0xfb1087b8>
81128ca8:	0005883a 	mov	r2,zero
81128cac:	003fb106 	br	81128b74 <__reset+0xfb108b74>
81128cb0:	0005883a 	mov	r2,zero
81128cb4:	003fbc06 	br	81128ba8 <__reset+0xfb108ba8>
81128cb8:	1c44b03a 	or	r2,r3,r17
81128cbc:	80008e1e 	bne	r16,zero,81128ef8 <__subdf3+0x7cc>
81128cc0:	1000c826 	beq	r2,zero,81128fe4 <__subdf3+0x8b8>
81128cc4:	2984b03a 	or	r2,r5,r6
81128cc8:	103ebb26 	beq	r2,zero,811287b8 <__reset+0xfb1087b8>
81128ccc:	8989883a 	add	r4,r17,r6
81128cd0:	1945883a 	add	r2,r3,r5
81128cd4:	2447803a 	cmpltu	r3,r4,r17
81128cd8:	1887883a 	add	r3,r3,r2
81128cdc:	1880202c 	andhi	r2,r3,128
81128ce0:	2023883a 	mov	r17,r4
81128ce4:	103f1626 	beq	r2,zero,81128940 <__reset+0xfb108940>
81128ce8:	00bfe034 	movhi	r2,65408
81128cec:	10bfffc4 	addi	r2,r2,-1
81128cf0:	5021883a 	mov	r16,r10
81128cf4:	1886703a 	and	r3,r3,r2
81128cf8:	003eaf06 	br	811287b8 <__reset+0xfb1087b8>
81128cfc:	3825883a 	mov	r18,r7
81128d00:	003f0f06 	br	81128940 <__reset+0xfb108940>
81128d04:	1c44b03a 	or	r2,r3,r17
81128d08:	8000251e 	bne	r16,zero,81128da0 <__subdf3+0x674>
81128d0c:	1000661e 	bne	r2,zero,81128ea8 <__subdf3+0x77c>
81128d10:	2990b03a 	or	r8,r5,r6
81128d14:	40009626 	beq	r8,zero,81128f70 <__subdf3+0x844>
81128d18:	2807883a 	mov	r3,r5
81128d1c:	3023883a 	mov	r17,r6
81128d20:	3825883a 	mov	r18,r7
81128d24:	003ea406 	br	811287b8 <__reset+0xfb1087b8>
81128d28:	127ff804 	addi	r9,r2,-32
81128d2c:	01000804 	movi	r4,32
81128d30:	2a52d83a 	srl	r9,r5,r9
81128d34:	11008c26 	beq	r2,r4,81128f68 <__subdf3+0x83c>
81128d38:	01001004 	movi	r4,64
81128d3c:	2085c83a 	sub	r2,r4,r2
81128d40:	2884983a 	sll	r2,r5,r2
81128d44:	118cb03a 	or	r6,r2,r6
81128d48:	300cc03a 	cmpne	r6,r6,zero
81128d4c:	4992b03a 	or	r9,r9,r6
81128d50:	0005883a 	mov	r2,zero
81128d54:	003f1206 	br	811289a0 <__reset+0xfb1089a0>
81128d58:	0101ffc4 	movi	r4,2047
81128d5c:	493f9c1e 	bne	r9,r4,81128bd0 <__reset+0xfb108bd0>
81128d60:	2807883a 	mov	r3,r5
81128d64:	3023883a 	mov	r17,r6
81128d68:	4821883a 	mov	r16,r9
81128d6c:	3825883a 	mov	r18,r7
81128d70:	003e9106 	br	811287b8 <__reset+0xfb1087b8>
81128d74:	80001f1e 	bne	r16,zero,81128df4 <__subdf3+0x6c8>
81128d78:	1c48b03a 	or	r4,r3,r17
81128d7c:	20005a26 	beq	r4,zero,81128ee8 <__subdf3+0x7bc>
81128d80:	0084303a 	nor	r2,zero,r2
81128d84:	1000561e 	bne	r2,zero,81128ee0 <__subdf3+0x7b4>
81128d88:	89a3883a 	add	r17,r17,r6
81128d8c:	1945883a 	add	r2,r3,r5
81128d90:	898d803a 	cmpltu	r6,r17,r6
81128d94:	3087883a 	add	r3,r6,r2
81128d98:	4821883a 	mov	r16,r9
81128d9c:	003f0506 	br	811289b4 <__reset+0xfb1089b4>
81128da0:	10002b1e 	bne	r2,zero,81128e50 <__subdf3+0x724>
81128da4:	2984b03a 	or	r2,r5,r6
81128da8:	10008026 	beq	r2,zero,81128fac <__subdf3+0x880>
81128dac:	2807883a 	mov	r3,r5
81128db0:	3023883a 	mov	r17,r6
81128db4:	3825883a 	mov	r18,r7
81128db8:	0401ffc4 	movi	r16,2047
81128dbc:	003e7e06 	br	811287b8 <__reset+0xfb1087b8>
81128dc0:	3809883a 	mov	r4,r7
81128dc4:	0011883a 	mov	r8,zero
81128dc8:	0005883a 	mov	r2,zero
81128dcc:	003ee306 	br	8112895c <__reset+0xfb10895c>
81128dd0:	1c62b03a 	or	r17,r3,r17
81128dd4:	8822c03a 	cmpne	r17,r17,zero
81128dd8:	0005883a 	mov	r2,zero
81128ddc:	003f8906 	br	81128c04 <__reset+0xfb108c04>
81128de0:	3809883a 	mov	r4,r7
81128de4:	4821883a 	mov	r16,r9
81128de8:	0011883a 	mov	r8,zero
81128dec:	0005883a 	mov	r2,zero
81128df0:	003eda06 	br	8112895c <__reset+0xfb10895c>
81128df4:	0101ffc4 	movi	r4,2047
81128df8:	49003b26 	beq	r9,r4,81128ee8 <__subdf3+0x7bc>
81128dfc:	0085c83a 	sub	r2,zero,r2
81128e00:	18c02034 	orhi	r3,r3,128
81128e04:	01000e04 	movi	r4,56
81128e08:	20806e16 	blt	r4,r2,81128fc4 <__subdf3+0x898>
81128e0c:	010007c4 	movi	r4,31
81128e10:	20807716 	blt	r4,r2,81128ff0 <__subdf3+0x8c4>
81128e14:	01000804 	movi	r4,32
81128e18:	2089c83a 	sub	r4,r4,r2
81128e1c:	1914983a 	sll	r10,r3,r4
81128e20:	8890d83a 	srl	r8,r17,r2
81128e24:	8908983a 	sll	r4,r17,r4
81128e28:	1884d83a 	srl	r2,r3,r2
81128e2c:	5222b03a 	or	r17,r10,r8
81128e30:	2006c03a 	cmpne	r3,r4,zero
81128e34:	88e2b03a 	or	r17,r17,r3
81128e38:	89a3883a 	add	r17,r17,r6
81128e3c:	1145883a 	add	r2,r2,r5
81128e40:	898d803a 	cmpltu	r6,r17,r6
81128e44:	3087883a 	add	r3,r6,r2
81128e48:	4821883a 	mov	r16,r9
81128e4c:	003ed906 	br	811289b4 <__reset+0xfb1089b4>
81128e50:	2984b03a 	or	r2,r5,r6
81128e54:	10004226 	beq	r2,zero,81128f60 <__subdf3+0x834>
81128e58:	1808d0fa 	srli	r4,r3,3
81128e5c:	8822d0fa 	srli	r17,r17,3
81128e60:	1806977a 	slli	r3,r3,29
81128e64:	2080022c 	andhi	r2,r4,8
81128e68:	1c62b03a 	or	r17,r3,r17
81128e6c:	10000826 	beq	r2,zero,81128e90 <__subdf3+0x764>
81128e70:	2812d0fa 	srli	r9,r5,3
81128e74:	4880022c 	andhi	r2,r9,8
81128e78:	1000051e 	bne	r2,zero,81128e90 <__subdf3+0x764>
81128e7c:	300cd0fa 	srli	r6,r6,3
81128e80:	2804977a 	slli	r2,r5,29
81128e84:	4809883a 	mov	r4,r9
81128e88:	3825883a 	mov	r18,r7
81128e8c:	11a2b03a 	or	r17,r2,r6
81128e90:	8806d77a 	srli	r3,r17,29
81128e94:	200890fa 	slli	r4,r4,3
81128e98:	882290fa 	slli	r17,r17,3
81128e9c:	0401ffc4 	movi	r16,2047
81128ea0:	1906b03a 	or	r3,r3,r4
81128ea4:	003e4406 	br	811287b8 <__reset+0xfb1087b8>
81128ea8:	2984b03a 	or	r2,r5,r6
81128eac:	103e4226 	beq	r2,zero,811287b8 <__reset+0xfb1087b8>
81128eb0:	8989c83a 	sub	r4,r17,r6
81128eb4:	8911803a 	cmpltu	r8,r17,r4
81128eb8:	1945c83a 	sub	r2,r3,r5
81128ebc:	1205c83a 	sub	r2,r2,r8
81128ec0:	1200202c 	andhi	r8,r2,128
81128ec4:	403e9a26 	beq	r8,zero,81128930 <__reset+0xfb108930>
81128ec8:	3463c83a 	sub	r17,r6,r17
81128ecc:	28c5c83a 	sub	r2,r5,r3
81128ed0:	344d803a 	cmpltu	r6,r6,r17
81128ed4:	1187c83a 	sub	r3,r2,r6
81128ed8:	3825883a 	mov	r18,r7
81128edc:	003e3606 	br	811287b8 <__reset+0xfb1087b8>
81128ee0:	0101ffc4 	movi	r4,2047
81128ee4:	493fc71e 	bne	r9,r4,81128e04 <__reset+0xfb108e04>
81128ee8:	2807883a 	mov	r3,r5
81128eec:	3023883a 	mov	r17,r6
81128ef0:	4821883a 	mov	r16,r9
81128ef4:	003e3006 	br	811287b8 <__reset+0xfb1087b8>
81128ef8:	10003626 	beq	r2,zero,81128fd4 <__subdf3+0x8a8>
81128efc:	2984b03a 	or	r2,r5,r6
81128f00:	10001726 	beq	r2,zero,81128f60 <__subdf3+0x834>
81128f04:	1808d0fa 	srli	r4,r3,3
81128f08:	8822d0fa 	srli	r17,r17,3
81128f0c:	1806977a 	slli	r3,r3,29
81128f10:	2080022c 	andhi	r2,r4,8
81128f14:	1c62b03a 	or	r17,r3,r17
81128f18:	10000726 	beq	r2,zero,81128f38 <__subdf3+0x80c>
81128f1c:	2812d0fa 	srli	r9,r5,3
81128f20:	4880022c 	andhi	r2,r9,8
81128f24:	1000041e 	bne	r2,zero,81128f38 <__subdf3+0x80c>
81128f28:	300cd0fa 	srli	r6,r6,3
81128f2c:	2804977a 	slli	r2,r5,29
81128f30:	4809883a 	mov	r4,r9
81128f34:	11a2b03a 	or	r17,r2,r6
81128f38:	8806d77a 	srli	r3,r17,29
81128f3c:	200890fa 	slli	r4,r4,3
81128f40:	882290fa 	slli	r17,r17,3
81128f44:	3825883a 	mov	r18,r7
81128f48:	1906b03a 	or	r3,r3,r4
81128f4c:	0401ffc4 	movi	r16,2047
81128f50:	003e1906 	br	811287b8 <__reset+0xfb1087b8>
81128f54:	000b883a 	mov	r5,zero
81128f58:	0005883a 	mov	r2,zero
81128f5c:	003e2e06 	br	81128818 <__reset+0xfb108818>
81128f60:	0401ffc4 	movi	r16,2047
81128f64:	003e1406 	br	811287b8 <__reset+0xfb1087b8>
81128f68:	0005883a 	mov	r2,zero
81128f6c:	003f7506 	br	81128d44 <__reset+0xfb108d44>
81128f70:	0005883a 	mov	r2,zero
81128f74:	0009883a 	mov	r4,zero
81128f78:	003e7806 	br	8112895c <__reset+0xfb10895c>
81128f7c:	123ff804 	addi	r8,r2,-32
81128f80:	01000804 	movi	r4,32
81128f84:	1a10d83a 	srl	r8,r3,r8
81128f88:	11002526 	beq	r2,r4,81129020 <__subdf3+0x8f4>
81128f8c:	01001004 	movi	r4,64
81128f90:	2085c83a 	sub	r2,r4,r2
81128f94:	1884983a 	sll	r2,r3,r2
81128f98:	1444b03a 	or	r2,r2,r17
81128f9c:	1004c03a 	cmpne	r2,r2,zero
81128fa0:	40a2b03a 	or	r17,r8,r2
81128fa4:	0005883a 	mov	r2,zero
81128fa8:	003f1606 	br	81128c04 <__reset+0xfb108c04>
81128fac:	02000434 	movhi	r8,16
81128fb0:	0009883a 	mov	r4,zero
81128fb4:	423fffc4 	addi	r8,r8,-1
81128fb8:	00bfffc4 	movi	r2,-1
81128fbc:	0401ffc4 	movi	r16,2047
81128fc0:	003e6606 	br	8112895c <__reset+0xfb10895c>
81128fc4:	1c62b03a 	or	r17,r3,r17
81128fc8:	8822c03a 	cmpne	r17,r17,zero
81128fcc:	0005883a 	mov	r2,zero
81128fd0:	003f9906 	br	81128e38 <__reset+0xfb108e38>
81128fd4:	2807883a 	mov	r3,r5
81128fd8:	3023883a 	mov	r17,r6
81128fdc:	0401ffc4 	movi	r16,2047
81128fe0:	003df506 	br	811287b8 <__reset+0xfb1087b8>
81128fe4:	2807883a 	mov	r3,r5
81128fe8:	3023883a 	mov	r17,r6
81128fec:	003df206 	br	811287b8 <__reset+0xfb1087b8>
81128ff0:	123ff804 	addi	r8,r2,-32
81128ff4:	01000804 	movi	r4,32
81128ff8:	1a10d83a 	srl	r8,r3,r8
81128ffc:	11000a26 	beq	r2,r4,81129028 <__subdf3+0x8fc>
81129000:	01001004 	movi	r4,64
81129004:	2085c83a 	sub	r2,r4,r2
81129008:	1884983a 	sll	r2,r3,r2
8112900c:	1444b03a 	or	r2,r2,r17
81129010:	1004c03a 	cmpne	r2,r2,zero
81129014:	40a2b03a 	or	r17,r8,r2
81129018:	0005883a 	mov	r2,zero
8112901c:	003f8606 	br	81128e38 <__reset+0xfb108e38>
81129020:	0005883a 	mov	r2,zero
81129024:	003fdc06 	br	81128f98 <__reset+0xfb108f98>
81129028:	0005883a 	mov	r2,zero
8112902c:	003ff706 	br	8112900c <__reset+0xfb10900c>

81129030 <__fixdfsi>:
81129030:	280cd53a 	srli	r6,r5,20
81129034:	00c00434 	movhi	r3,16
81129038:	18ffffc4 	addi	r3,r3,-1
8112903c:	3181ffcc 	andi	r6,r6,2047
81129040:	01c0ff84 	movi	r7,1022
81129044:	28c6703a 	and	r3,r5,r3
81129048:	280ad7fa 	srli	r5,r5,31
8112904c:	3980120e 	bge	r7,r6,81129098 <__fixdfsi+0x68>
81129050:	00810744 	movi	r2,1053
81129054:	11800c16 	blt	r2,r6,81129088 <__fixdfsi+0x58>
81129058:	00810cc4 	movi	r2,1075
8112905c:	1185c83a 	sub	r2,r2,r6
81129060:	01c007c4 	movi	r7,31
81129064:	18c00434 	orhi	r3,r3,16
81129068:	38800d16 	blt	r7,r2,811290a0 <__fixdfsi+0x70>
8112906c:	31befb44 	addi	r6,r6,-1043
81129070:	2084d83a 	srl	r2,r4,r2
81129074:	1986983a 	sll	r3,r3,r6
81129078:	1884b03a 	or	r2,r3,r2
8112907c:	28000726 	beq	r5,zero,8112909c <__fixdfsi+0x6c>
81129080:	0085c83a 	sub	r2,zero,r2
81129084:	f800283a 	ret
81129088:	00a00034 	movhi	r2,32768
8112908c:	10bfffc4 	addi	r2,r2,-1
81129090:	2885883a 	add	r2,r5,r2
81129094:	f800283a 	ret
81129098:	0005883a 	mov	r2,zero
8112909c:	f800283a 	ret
811290a0:	008104c4 	movi	r2,1043
811290a4:	1185c83a 	sub	r2,r2,r6
811290a8:	1884d83a 	srl	r2,r3,r2
811290ac:	003ff306 	br	8112907c <__reset+0xfb10907c>

811290b0 <__floatsidf>:
811290b0:	defffd04 	addi	sp,sp,-12
811290b4:	de00012e 	bgeu	sp,et,811290bc <__floatsidf+0xc>
811290b8:	003b68fa 	trap	3
811290bc:	dfc00215 	stw	ra,8(sp)
811290c0:	dc400115 	stw	r17,4(sp)
811290c4:	dc000015 	stw	r16,0(sp)
811290c8:	20002b26 	beq	r4,zero,81129178 <__floatsidf+0xc8>
811290cc:	2023883a 	mov	r17,r4
811290d0:	2020d7fa 	srli	r16,r4,31
811290d4:	20002d16 	blt	r4,zero,8112918c <__floatsidf+0xdc>
811290d8:	8809883a 	mov	r4,r17
811290dc:	11138000 	call	81113800 <__clzsi2>
811290e0:	01410784 	movi	r5,1054
811290e4:	288bc83a 	sub	r5,r5,r2
811290e8:	01010cc4 	movi	r4,1075
811290ec:	2149c83a 	sub	r4,r4,r5
811290f0:	00c007c4 	movi	r3,31
811290f4:	1900160e 	bge	r3,r4,81129150 <__floatsidf+0xa0>
811290f8:	00c104c4 	movi	r3,1043
811290fc:	1947c83a 	sub	r3,r3,r5
81129100:	88c6983a 	sll	r3,r17,r3
81129104:	00800434 	movhi	r2,16
81129108:	10bfffc4 	addi	r2,r2,-1
8112910c:	1886703a 	and	r3,r3,r2
81129110:	2941ffcc 	andi	r5,r5,2047
81129114:	800d883a 	mov	r6,r16
81129118:	0005883a 	mov	r2,zero
8112911c:	280a953a 	slli	r5,r5,20
81129120:	31803fcc 	andi	r6,r6,255
81129124:	01000434 	movhi	r4,16
81129128:	300c97fa 	slli	r6,r6,31
8112912c:	213fffc4 	addi	r4,r4,-1
81129130:	1906703a 	and	r3,r3,r4
81129134:	1946b03a 	or	r3,r3,r5
81129138:	1986b03a 	or	r3,r3,r6
8112913c:	dfc00217 	ldw	ra,8(sp)
81129140:	dc400117 	ldw	r17,4(sp)
81129144:	dc000017 	ldw	r16,0(sp)
81129148:	dec00304 	addi	sp,sp,12
8112914c:	f800283a 	ret
81129150:	00c002c4 	movi	r3,11
81129154:	1887c83a 	sub	r3,r3,r2
81129158:	88c6d83a 	srl	r3,r17,r3
8112915c:	8904983a 	sll	r2,r17,r4
81129160:	01000434 	movhi	r4,16
81129164:	213fffc4 	addi	r4,r4,-1
81129168:	2941ffcc 	andi	r5,r5,2047
8112916c:	1906703a 	and	r3,r3,r4
81129170:	800d883a 	mov	r6,r16
81129174:	003fe906 	br	8112911c <__reset+0xfb10911c>
81129178:	000d883a 	mov	r6,zero
8112917c:	000b883a 	mov	r5,zero
81129180:	0007883a 	mov	r3,zero
81129184:	0005883a 	mov	r2,zero
81129188:	003fe406 	br	8112911c <__reset+0xfb10911c>
8112918c:	0123c83a 	sub	r17,zero,r4
81129190:	003fd106 	br	811290d8 <__reset+0xfb1090d8>

81129194 <__floatunsidf>:
81129194:	defffe04 	addi	sp,sp,-8
81129198:	de00012e 	bgeu	sp,et,811291a0 <__floatunsidf+0xc>
8112919c:	003b68fa 	trap	3
811291a0:	dc000015 	stw	r16,0(sp)
811291a4:	dfc00115 	stw	ra,4(sp)
811291a8:	2021883a 	mov	r16,r4
811291ac:	20002226 	beq	r4,zero,81129238 <__floatunsidf+0xa4>
811291b0:	11138000 	call	81113800 <__clzsi2>
811291b4:	01010784 	movi	r4,1054
811291b8:	2089c83a 	sub	r4,r4,r2
811291bc:	01810cc4 	movi	r6,1075
811291c0:	310dc83a 	sub	r6,r6,r4
811291c4:	00c007c4 	movi	r3,31
811291c8:	1980120e 	bge	r3,r6,81129214 <__floatunsidf+0x80>
811291cc:	00c104c4 	movi	r3,1043
811291d0:	1907c83a 	sub	r3,r3,r4
811291d4:	80ca983a 	sll	r5,r16,r3
811291d8:	00800434 	movhi	r2,16
811291dc:	10bfffc4 	addi	r2,r2,-1
811291e0:	2101ffcc 	andi	r4,r4,2047
811291e4:	0021883a 	mov	r16,zero
811291e8:	288a703a 	and	r5,r5,r2
811291ec:	2008953a 	slli	r4,r4,20
811291f0:	00c00434 	movhi	r3,16
811291f4:	18ffffc4 	addi	r3,r3,-1
811291f8:	28c6703a 	and	r3,r5,r3
811291fc:	8005883a 	mov	r2,r16
81129200:	1906b03a 	or	r3,r3,r4
81129204:	dfc00117 	ldw	ra,4(sp)
81129208:	dc000017 	ldw	r16,0(sp)
8112920c:	dec00204 	addi	sp,sp,8
81129210:	f800283a 	ret
81129214:	00c002c4 	movi	r3,11
81129218:	188bc83a 	sub	r5,r3,r2
8112921c:	814ad83a 	srl	r5,r16,r5
81129220:	00c00434 	movhi	r3,16
81129224:	18ffffc4 	addi	r3,r3,-1
81129228:	81a0983a 	sll	r16,r16,r6
8112922c:	2101ffcc 	andi	r4,r4,2047
81129230:	28ca703a 	and	r5,r5,r3
81129234:	003fed06 	br	811291ec <__reset+0xfb1091ec>
81129238:	0009883a 	mov	r4,zero
8112923c:	000b883a 	mov	r5,zero
81129240:	003fea06 	br	811291ec <__reset+0xfb1091ec>

81129244 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81129244:	defffb04 	addi	sp,sp,-20
81129248:	de00012e 	bgeu	sp,et,81129250 <alt_busy_sleep+0xc>
8112924c:	003b68fa 	trap	3
81129250:	df000415 	stw	fp,16(sp)
81129254:	df000404 	addi	fp,sp,16
81129258:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
8112925c:	008000c4 	movi	r2,3
81129260:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81129264:	e0fffd17 	ldw	r3,-12(fp)
81129268:	008003f4 	movhi	r2,15
8112926c:	10909004 	addi	r2,r2,16960
81129270:	1887383a 	mul	r3,r3,r2
81129274:	00817db4 	movhi	r2,1526
81129278:	10b84004 	addi	r2,r2,-7936
8112927c:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81129280:	00a00034 	movhi	r2,32768
81129284:	10bfffc4 	addi	r2,r2,-1
81129288:	10c5203a 	divu	r2,r2,r3
8112928c:	e0ffff17 	ldw	r3,-4(fp)
81129290:	1885203a 	divu	r2,r3,r2
81129294:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81129298:	e0bffe17 	ldw	r2,-8(fp)
8112929c:	10002526 	beq	r2,zero,81129334 <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
811292a0:	e03ffc15 	stw	zero,-16(fp)
811292a4:	00001406 	br	811292f8 <alt_busy_sleep+0xb4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
811292a8:	00a00034 	movhi	r2,32768
811292ac:	10bfffc4 	addi	r2,r2,-1
811292b0:	10bfffc4 	addi	r2,r2,-1
811292b4:	103ffe1e 	bne	r2,zero,811292b0 <__reset+0xfb1092b0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
811292b8:	e0fffd17 	ldw	r3,-12(fp)
811292bc:	008003f4 	movhi	r2,15
811292c0:	10909004 	addi	r2,r2,16960
811292c4:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
811292c8:	00817db4 	movhi	r2,1526
811292cc:	10b84004 	addi	r2,r2,-7936
811292d0:	10c7203a 	divu	r3,r2,r3
811292d4:	00a00034 	movhi	r2,32768
811292d8:	10bfffc4 	addi	r2,r2,-1
811292dc:	10c5203a 	divu	r2,r2,r3
811292e0:	e0ffff17 	ldw	r3,-4(fp)
811292e4:	1885c83a 	sub	r2,r3,r2
811292e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
811292ec:	e0bffc17 	ldw	r2,-16(fp)
811292f0:	10800044 	addi	r2,r2,1
811292f4:	e0bffc15 	stw	r2,-16(fp)
811292f8:	e0fffc17 	ldw	r3,-16(fp)
811292fc:	e0bffe17 	ldw	r2,-8(fp)
81129300:	18bfe916 	blt	r3,r2,811292a8 <__reset+0xfb1092a8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81129304:	e0fffd17 	ldw	r3,-12(fp)
81129308:	008003f4 	movhi	r2,15
8112930c:	10909004 	addi	r2,r2,16960
81129310:	1887383a 	mul	r3,r3,r2
81129314:	00817db4 	movhi	r2,1526
81129318:	10b84004 	addi	r2,r2,-7936
8112931c:	10c7203a 	divu	r3,r2,r3
81129320:	e0bfff17 	ldw	r2,-4(fp)
81129324:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81129328:	10bfffc4 	addi	r2,r2,-1
8112932c:	103ffe1e 	bne	r2,zero,81129328 <__reset+0xfb109328>
81129330:	00000b06 	br	81129360 <alt_busy_sleep+0x11c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81129334:	e0fffd17 	ldw	r3,-12(fp)
81129338:	008003f4 	movhi	r2,15
8112933c:	10909004 	addi	r2,r2,16960
81129340:	1887383a 	mul	r3,r3,r2
81129344:	00817db4 	movhi	r2,1526
81129348:	10b84004 	addi	r2,r2,-7936
8112934c:	10c7203a 	divu	r3,r2,r3
81129350:	e0bfff17 	ldw	r2,-4(fp)
81129354:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81129358:	10bfffc4 	addi	r2,r2,-1
8112935c:	00bffe16 	blt	zero,r2,81129358 <__reset+0xfb109358>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81129360:	0005883a 	mov	r2,zero
}
81129364:	e037883a 	mov	sp,fp
81129368:	df000017 	ldw	fp,0(sp)
8112936c:	dec00104 	addi	sp,sp,4
81129370:	f800283a 	ret

81129374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81129374:	defffe04 	addi	sp,sp,-8
81129378:	de00012e 	bgeu	sp,et,81129380 <alt_get_errno+0xc>
8112937c:	003b68fa 	trap	3
81129380:	dfc00115 	stw	ra,4(sp)
81129384:	df000015 	stw	fp,0(sp)
81129388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112938c:	d0a01017 	ldw	r2,-32704(gp)
81129390:	10000326 	beq	r2,zero,811293a0 <alt_get_errno+0x2c>
81129394:	d0a01017 	ldw	r2,-32704(gp)
81129398:	103ee83a 	callr	r2
8112939c:	00000106 	br	811293a4 <alt_get_errno+0x30>
811293a0:	d0a06204 	addi	r2,gp,-32376
}
811293a4:	e037883a 	mov	sp,fp
811293a8:	dfc00117 	ldw	ra,4(sp)
811293ac:	df000017 	ldw	fp,0(sp)
811293b0:	dec00204 	addi	sp,sp,8
811293b4:	f800283a 	ret

811293b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811293b8:	defffb04 	addi	sp,sp,-20
811293bc:	de00012e 	bgeu	sp,et,811293c4 <close+0xc>
811293c0:	003b68fa 	trap	3
811293c4:	dfc00415 	stw	ra,16(sp)
811293c8:	df000315 	stw	fp,12(sp)
811293cc:	df000304 	addi	fp,sp,12
811293d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
811293d4:	e0bfff17 	ldw	r2,-4(fp)
811293d8:	10000616 	blt	r2,zero,811293f4 <close+0x3c>
811293dc:	e0bfff17 	ldw	r2,-4(fp)
811293e0:	10c00324 	muli	r3,r2,12
811293e4:	00a04534 	movhi	r2,33044
811293e8:	108d6f04 	addi	r2,r2,13756
811293ec:	1885883a 	add	r2,r3,r2
811293f0:	00000106 	br	811293f8 <close+0x40>
811293f4:	0005883a 	mov	r2,zero
811293f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
811293fc:	e0bffd17 	ldw	r2,-12(fp)
81129400:	10001926 	beq	r2,zero,81129468 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81129404:	e0bffd17 	ldw	r2,-12(fp)
81129408:	10800017 	ldw	r2,0(r2)
8112940c:	10800417 	ldw	r2,16(r2)
81129410:	10000626 	beq	r2,zero,8112942c <close+0x74>
81129414:	e0bffd17 	ldw	r2,-12(fp)
81129418:	10800017 	ldw	r2,0(r2)
8112941c:	10800417 	ldw	r2,16(r2)
81129420:	e13ffd17 	ldw	r4,-12(fp)
81129424:	103ee83a 	callr	r2
81129428:	00000106 	br	81129430 <close+0x78>
8112942c:	0005883a 	mov	r2,zero
81129430:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81129434:	e13fff17 	ldw	r4,-4(fp)
81129438:	112a9dc0 	call	8112a9dc <alt_release_fd>
    if (rval < 0)
8112943c:	e0bffe17 	ldw	r2,-8(fp)
81129440:	1000070e 	bge	r2,zero,81129460 <close+0xa8>
    {
      ALT_ERRNO = -rval;
81129444:	11293740 	call	81129374 <alt_get_errno>
81129448:	1007883a 	mov	r3,r2
8112944c:	e0bffe17 	ldw	r2,-8(fp)
81129450:	0085c83a 	sub	r2,zero,r2
81129454:	18800015 	stw	r2,0(r3)
      return -1;
81129458:	00bfffc4 	movi	r2,-1
8112945c:	00000706 	br	8112947c <close+0xc4>
    }
    return 0;
81129460:	0005883a 	mov	r2,zero
81129464:	00000506 	br	8112947c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81129468:	11293740 	call	81129374 <alt_get_errno>
8112946c:	1007883a 	mov	r3,r2
81129470:	00801444 	movi	r2,81
81129474:	18800015 	stw	r2,0(r3)
    return -1;
81129478:	00bfffc4 	movi	r2,-1
  }
}
8112947c:	e037883a 	mov	sp,fp
81129480:	dfc00117 	ldw	ra,4(sp)
81129484:	df000017 	ldw	fp,0(sp)
81129488:	dec00204 	addi	sp,sp,8
8112948c:	f800283a 	ret

81129490 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81129490:	deffff04 	addi	sp,sp,-4
81129494:	de00012e 	bgeu	sp,et,8112949c <alt_dcache_flush_all+0xc>
81129498:	003b68fa 	trap	3
8112949c:	df000015 	stw	fp,0(sp)
811294a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
811294a4:	0001883a 	nop
811294a8:	e037883a 	mov	sp,fp
811294ac:	df000017 	ldw	fp,0(sp)
811294b0:	dec00104 	addi	sp,sp,4
811294b4:	f800283a 	ret

811294b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
811294b8:	defffc04 	addi	sp,sp,-16
811294bc:	de00012e 	bgeu	sp,et,811294c4 <alt_dev_null_write+0xc>
811294c0:	003b68fa 	trap	3
811294c4:	df000315 	stw	fp,12(sp)
811294c8:	df000304 	addi	fp,sp,12
811294cc:	e13ffd15 	stw	r4,-12(fp)
811294d0:	e17ffe15 	stw	r5,-8(fp)
811294d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
811294d8:	e0bfff17 	ldw	r2,-4(fp)
}
811294dc:	e037883a 	mov	sp,fp
811294e0:	df000017 	ldw	fp,0(sp)
811294e4:	dec00104 	addi	sp,sp,4
811294e8:	f800283a 	ret

811294ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811294ec:	defffe04 	addi	sp,sp,-8
811294f0:	de00012e 	bgeu	sp,et,811294f8 <alt_get_errno+0xc>
811294f4:	003b68fa 	trap	3
811294f8:	dfc00115 	stw	ra,4(sp)
811294fc:	df000015 	stw	fp,0(sp)
81129500:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81129504:	d0a01017 	ldw	r2,-32704(gp)
81129508:	10000326 	beq	r2,zero,81129518 <alt_get_errno+0x2c>
8112950c:	d0a01017 	ldw	r2,-32704(gp)
81129510:	103ee83a 	callr	r2
81129514:	00000106 	br	8112951c <alt_get_errno+0x30>
81129518:	d0a06204 	addi	r2,gp,-32376
}
8112951c:	e037883a 	mov	sp,fp
81129520:	dfc00117 	ldw	ra,4(sp)
81129524:	df000017 	ldw	fp,0(sp)
81129528:	dec00204 	addi	sp,sp,8
8112952c:	f800283a 	ret

81129530 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81129530:	defffb04 	addi	sp,sp,-20
81129534:	de00012e 	bgeu	sp,et,8112953c <fstat+0xc>
81129538:	003b68fa 	trap	3
8112953c:	dfc00415 	stw	ra,16(sp)
81129540:	df000315 	stw	fp,12(sp)
81129544:	df000304 	addi	fp,sp,12
81129548:	e13ffe15 	stw	r4,-8(fp)
8112954c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81129550:	e0bffe17 	ldw	r2,-8(fp)
81129554:	10000616 	blt	r2,zero,81129570 <fstat+0x40>
81129558:	e0bffe17 	ldw	r2,-8(fp)
8112955c:	10c00324 	muli	r3,r2,12
81129560:	00a04534 	movhi	r2,33044
81129564:	108d6f04 	addi	r2,r2,13756
81129568:	1885883a 	add	r2,r3,r2
8112956c:	00000106 	br	81129574 <fstat+0x44>
81129570:	0005883a 	mov	r2,zero
81129574:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81129578:	e0bffd17 	ldw	r2,-12(fp)
8112957c:	10001026 	beq	r2,zero,811295c0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81129580:	e0bffd17 	ldw	r2,-12(fp)
81129584:	10800017 	ldw	r2,0(r2)
81129588:	10800817 	ldw	r2,32(r2)
8112958c:	10000726 	beq	r2,zero,811295ac <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
81129590:	e0bffd17 	ldw	r2,-12(fp)
81129594:	10800017 	ldw	r2,0(r2)
81129598:	10800817 	ldw	r2,32(r2)
8112959c:	e17fff17 	ldw	r5,-4(fp)
811295a0:	e13ffd17 	ldw	r4,-12(fp)
811295a4:	103ee83a 	callr	r2
811295a8:	00000a06 	br	811295d4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
811295ac:	e0bfff17 	ldw	r2,-4(fp)
811295b0:	00c80004 	movi	r3,8192
811295b4:	10c00115 	stw	r3,4(r2)
      return 0;
811295b8:	0005883a 	mov	r2,zero
811295bc:	00000506 	br	811295d4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811295c0:	11294ec0 	call	811294ec <alt_get_errno>
811295c4:	1007883a 	mov	r3,r2
811295c8:	00801444 	movi	r2,81
811295cc:	18800015 	stw	r2,0(r3)
    return -1;
811295d0:	00bfffc4 	movi	r2,-1
  }
}
811295d4:	e037883a 	mov	sp,fp
811295d8:	dfc00117 	ldw	ra,4(sp)
811295dc:	df000017 	ldw	fp,0(sp)
811295e0:	dec00204 	addi	sp,sp,8
811295e4:	f800283a 	ret

811295e8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
811295e8:	defff004 	addi	sp,sp,-64
811295ec:	de00012e 	bgeu	sp,et,811295f4 <alt_irq_register+0xc>
811295f0:	003b68fa 	trap	3
811295f4:	df000f15 	stw	fp,60(sp)
811295f8:	df000f04 	addi	fp,sp,60
811295fc:	e13ffd15 	stw	r4,-12(fp)
81129600:	e17ffe15 	stw	r5,-8(fp)
81129604:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
81129608:	00bffa84 	movi	r2,-22
8112960c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81129610:	e0bffd17 	ldw	r2,-12(fp)
81129614:	10800828 	cmpgeui	r2,r2,32
81129618:	1000501e 	bne	r2,zero,8112975c <alt_irq_register+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112961c:	0005303a 	rdctl	r2,status
81129620:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129624:	e0fff617 	ldw	r3,-40(fp)
81129628:	00bfff84 	movi	r2,-2
8112962c:	1884703a 	and	r2,r3,r2
81129630:	1001703a 	wrctl	status,r2
  
  return context;
81129634:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
81129638:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
8112963c:	00a045b4 	movhi	r2,33046
81129640:	10a1d304 	addi	r2,r2,-30900
81129644:	e0fffd17 	ldw	r3,-12(fp)
81129648:	180690fa 	slli	r3,r3,3
8112964c:	10c5883a 	add	r2,r2,r3
81129650:	e0ffff17 	ldw	r3,-4(fp)
81129654:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
81129658:	00a045b4 	movhi	r2,33046
8112965c:	10a1d304 	addi	r2,r2,-30900
81129660:	e0fffd17 	ldw	r3,-12(fp)
81129664:	180690fa 	slli	r3,r3,3
81129668:	10c5883a 	add	r2,r2,r3
8112966c:	10800104 	addi	r2,r2,4
81129670:	e0fffe17 	ldw	r3,-8(fp)
81129674:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
81129678:	e0bfff17 	ldw	r2,-4(fp)
8112967c:	10001926 	beq	r2,zero,811296e4 <alt_irq_register+0xfc>
81129680:	e0bffd17 	ldw	r2,-12(fp)
81129684:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129688:	0005303a 	rdctl	r2,status
8112968c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129690:	e0fff717 	ldw	r3,-36(fp)
81129694:	00bfff84 	movi	r2,-2
81129698:	1884703a 	and	r2,r3,r2
8112969c:	1001703a 	wrctl	status,r2
  
  return context;
811296a0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811296a4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
811296a8:	00c00044 	movi	r3,1
811296ac:	e0bff217 	ldw	r2,-56(fp)
811296b0:	1884983a 	sll	r2,r3,r2
811296b4:	1007883a 	mov	r3,r2
811296b8:	d0a06a17 	ldw	r2,-32344(gp)
811296bc:	1884b03a 	or	r2,r3,r2
811296c0:	d0a06a15 	stw	r2,-32344(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811296c4:	d0a06a17 	ldw	r2,-32344(gp)
811296c8:	100170fa 	wrctl	ienable,r2
811296cc:	e0bff817 	ldw	r2,-32(fp)
811296d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811296d4:	e0bff917 	ldw	r2,-28(fp)
811296d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811296dc:	0005883a 	mov	r2,zero
811296e0:	00001906 	br	81129748 <alt_irq_register+0x160>
811296e4:	e0bffd17 	ldw	r2,-12(fp)
811296e8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811296ec:	0005303a 	rdctl	r2,status
811296f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811296f4:	e0fffa17 	ldw	r3,-24(fp)
811296f8:	00bfff84 	movi	r2,-2
811296fc:	1884703a 	and	r2,r3,r2
81129700:	1001703a 	wrctl	status,r2
  
  return context;
81129704:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81129708:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
8112970c:	00c00044 	movi	r3,1
81129710:	e0bff417 	ldw	r2,-48(fp)
81129714:	1884983a 	sll	r2,r3,r2
81129718:	0084303a 	nor	r2,zero,r2
8112971c:	1007883a 	mov	r3,r2
81129720:	d0a06a17 	ldw	r2,-32344(gp)
81129724:	1884703a 	and	r2,r3,r2
81129728:	d0a06a15 	stw	r2,-32344(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8112972c:	d0a06a17 	ldw	r2,-32344(gp)
81129730:	100170fa 	wrctl	ienable,r2
81129734:	e0bffb17 	ldw	r2,-20(fp)
81129738:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112973c:	e0bffc17 	ldw	r2,-16(fp)
81129740:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81129744:	0005883a 	mov	r2,zero
81129748:	e0bff115 	stw	r2,-60(fp)
8112974c:	e0bff317 	ldw	r2,-52(fp)
81129750:	e0bff515 	stw	r2,-44(fp)
81129754:	e0bff517 	ldw	r2,-44(fp)
81129758:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
8112975c:	e0bff117 	ldw	r2,-60(fp)
}
81129760:	e037883a 	mov	sp,fp
81129764:	df000017 	ldw	fp,0(sp)
81129768:	dec00104 	addi	sp,sp,4
8112976c:	f800283a 	ret

81129770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81129770:	defffe04 	addi	sp,sp,-8
81129774:	de00012e 	bgeu	sp,et,8112977c <alt_get_errno+0xc>
81129778:	003b68fa 	trap	3
8112977c:	dfc00115 	stw	ra,4(sp)
81129780:	df000015 	stw	fp,0(sp)
81129784:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81129788:	d0a01017 	ldw	r2,-32704(gp)
8112978c:	10000326 	beq	r2,zero,8112979c <alt_get_errno+0x2c>
81129790:	d0a01017 	ldw	r2,-32704(gp)
81129794:	103ee83a 	callr	r2
81129798:	00000106 	br	811297a0 <alt_get_errno+0x30>
8112979c:	d0a06204 	addi	r2,gp,-32376
}
811297a0:	e037883a 	mov	sp,fp
811297a4:	dfc00117 	ldw	ra,4(sp)
811297a8:	df000017 	ldw	fp,0(sp)
811297ac:	dec00204 	addi	sp,sp,8
811297b0:	f800283a 	ret

811297b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
811297b4:	deffed04 	addi	sp,sp,-76
811297b8:	de00012e 	bgeu	sp,et,811297c0 <isatty+0xc>
811297bc:	003b68fa 	trap	3
811297c0:	dfc01215 	stw	ra,72(sp)
811297c4:	df001115 	stw	fp,68(sp)
811297c8:	df001104 	addi	fp,sp,68
811297cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811297d0:	e0bfff17 	ldw	r2,-4(fp)
811297d4:	10000616 	blt	r2,zero,811297f0 <isatty+0x3c>
811297d8:	e0bfff17 	ldw	r2,-4(fp)
811297dc:	10c00324 	muli	r3,r2,12
811297e0:	00a04534 	movhi	r2,33044
811297e4:	108d6f04 	addi	r2,r2,13756
811297e8:	1885883a 	add	r2,r3,r2
811297ec:	00000106 	br	811297f4 <isatty+0x40>
811297f0:	0005883a 	mov	r2,zero
811297f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
811297f8:	e0bfef17 	ldw	r2,-68(fp)
811297fc:	10000e26 	beq	r2,zero,81129838 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81129800:	e0bfef17 	ldw	r2,-68(fp)
81129804:	10800017 	ldw	r2,0(r2)
81129808:	10800817 	ldw	r2,32(r2)
8112980c:	1000021e 	bne	r2,zero,81129818 <isatty+0x64>
    {
      return 1;
81129810:	00800044 	movi	r2,1
81129814:	00000d06 	br	8112984c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81129818:	e0bff004 	addi	r2,fp,-64
8112981c:	100b883a 	mov	r5,r2
81129820:	e13fff17 	ldw	r4,-4(fp)
81129824:	11295300 	call	81129530 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81129828:	e0bff117 	ldw	r2,-60(fp)
8112982c:	10880020 	cmpeqi	r2,r2,8192
81129830:	10803fcc 	andi	r2,r2,255
81129834:	00000506 	br	8112984c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81129838:	11297700 	call	81129770 <alt_get_errno>
8112983c:	1007883a 	mov	r3,r2
81129840:	00801444 	movi	r2,81
81129844:	18800015 	stw	r2,0(r3)
    return 0;
81129848:	0005883a 	mov	r2,zero
  }
}
8112984c:	e037883a 	mov	sp,fp
81129850:	dfc00117 	ldw	ra,4(sp)
81129854:	df000017 	ldw	fp,0(sp)
81129858:	dec00204 	addi	sp,sp,8
8112985c:	f800283a 	ret

81129860 <tx_log_str>:
	#include "sys/alt_log_printf.h"

        .global tx_log_str
tx_log_str:
	/* load base uart / jtag uart address into r6 */
	movhi r6, %hiadj(ALT_LOG_PORT_BASE)
81129860:	01a04834 	movhi	r6,33056
	addi r6, r6, %lo(ALT_LOG_PORT_BASE)
81129864:	318c2404 	addi	r6,r6,12432

81129868 <tx_next_char>:
tx_next_char:
        /* if pointer points to null, return 
         * r4 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	ldb r7, (r4)
81129868:	21c00007 	ldb	r7,0(r4)
	beq r0, r7, end_tx
8112986c:	01c00826 	beq	zero,r7,81129890 <end_tx>

81129870 <wait_tx_ready_loop>:

	/* check device transmit ready  */
wait_tx_ready_loop:
        ldwio   r8, ALT_LOG_PRINT_REG_OFFSET(r6)
81129870:	32000137 	ldwio	r8,4(r6)
        /*UART, ALT_LOG_PRINT_MSK == 0x40
          JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000 */
        andhi   r5, r8, %hi(ALT_LOG_PRINT_MSK)
81129874:	417fffec 	andhi	r5,r8,65535
        andi    r8, r8, %lo(ALT_LOG_PRINT_MSK)
81129878:	4200000c 	andi	r8,r8,0
        or      r5, r5, r8
8112987c:	2a0ab03a 	or	r5,r5,r8
        beq     r5, r0, wait_tx_ready_loop	
81129880:	283ffb26 	beq	r5,zero,81129870 <__reset+0xfb109870>
	/* write char */
	stwio   r7, ALT_LOG_PRINT_TXDATA_REG_OFFSET (r6)		
81129884:	31c00035 	stwio	r7,0(r6)
	/* advance string pointer */
	addi r4, r4, 1
81129888:	21000044 	addi	r4,r4,1
	br tx_next_char
8112988c:	003ff606 	br	81129868 <__reset+0xfb109868>

81129890 <end_tx>:
end_tx:	
        ret
81129890:	f800283a 	ret

81129894 <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
81129894:	defffd04 	addi	sp,sp,-12
81129898:	de00012e 	bgeu	sp,et,811298a0 <alt_log_txchar+0xc>
8112989c:	003b68fa 	trap	3
811298a0:	df000215 	stw	fp,8(sp)
811298a4:	df000204 	addi	fp,sp,8
811298a8:	e13ffe15 	stw	r4,-8(fp)
811298ac:	e17fff15 	stw	r5,-4(fp)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
811298b0:	0001883a 	nop
811298b4:	e0bfff17 	ldw	r2,-4(fp)
811298b8:	10800104 	addi	r2,r2,4
811298bc:	10800037 	ldwio	r2,0(r2)
811298c0:	10bfffec 	andhi	r2,r2,65535
811298c4:	103ffb26 	beq	r2,zero,811298b4 <__reset+0xfb1098b4>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
811298c8:	e0bfff17 	ldw	r2,-4(fp)
811298cc:	e0fffe17 	ldw	r3,-8(fp)
811298d0:	10c00035 	stwio	r3,0(r2)
}
811298d4:	0001883a 	nop
811298d8:	e037883a 	mov	sp,fp
811298dc:	df000017 	ldw	fp,0(sp)
811298e0:	dec00104 	addi	sp,sp,4
811298e4:	f800283a 	ret

811298e8 <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
811298e8:	defffb04 	addi	sp,sp,-20
811298ec:	de00012e 	bgeu	sp,et,811298f4 <alt_log_repchar+0xc>
811298f0:	003b68fa 	trap	3
811298f4:	dfc00415 	stw	ra,16(sp)
811298f8:	df000315 	stw	fp,12(sp)
811298fc:	df000304 	addi	fp,sp,12
81129900:	2005883a 	mov	r2,r4
81129904:	e17ffe15 	stw	r5,-8(fp)
81129908:	e1bfff15 	stw	r6,-4(fp)
8112990c:	e0bffd05 	stb	r2,-12(fp)
  while(r-- > 0)
81129910:	00000506 	br	81129928 <alt_log_repchar+0x40>
    alt_log_txchar(c,(char*) base);
81129914:	e0bffd07 	ldb	r2,-12(fp)
81129918:	e0ffff17 	ldw	r3,-4(fp)
8112991c:	180b883a 	mov	r5,r3
81129920:	1009883a 	mov	r4,r2
81129924:	11298940 	call	81129894 <alt_log_txchar>


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
  while(r-- > 0)
81129928:	e0bffe17 	ldw	r2,-8(fp)
8112992c:	10ffffc4 	addi	r3,r2,-1
81129930:	e0fffe15 	stw	r3,-8(fp)
81129934:	00bff716 	blt	zero,r2,81129914 <__reset+0xfb109914>
    alt_log_txchar(c,(char*) base);
}
81129938:	0001883a 	nop
8112993c:	e037883a 	mov	sp,fp
81129940:	dfc00117 	ldw	ra,4(sp)
81129944:	df000017 	ldw	fp,0(sp)
81129948:	dec00204 	addi	sp,sp,8
8112994c:	f800283a 	ret

81129950 <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
81129950:	deffe904 	addi	sp,sp,-92
81129954:	de00012e 	bgeu	sp,et,8112995c <alt_log_private_printf+0xc>
81129958:	003b68fa 	trap	3
8112995c:	dfc01615 	stw	ra,88(sp)
81129960:	df001515 	stw	fp,84(sp)
81129964:	dc001415 	stw	r16,80(sp)
81129968:	df001504 	addi	fp,sp,84
8112996c:	e13ffc15 	stw	r4,-16(fp)
81129970:	e17ffd15 	stw	r5,-12(fp)
81129974:	e1bffe15 	stw	r6,-8(fp)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
81129978:	e03fed15 	stw	zero,-76(fp)
  int fmtLong = 0;
8112997c:	e03fee15 	stw	zero,-72(fp)
  int fmtBeforeDecimal = 0;
81129980:	e03fef15 	stw	zero,-68(fp)
  int fmtAfterDecimal = 0;
81129984:	e03ff015 	stw	zero,-64(fp)
  int fmtBase = 0;
81129988:	e03ff115 	stw	zero,-60(fp)
  int fmtSigned = 0;
8112998c:	e03ff215 	stw	zero,-56(fp)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
81129990:	e03ff315 	stw	zero,-52(fp)

  w = fmt;
81129994:	e0bffc17 	ldw	r2,-16(fp)
81129998:	e0bfeb15 	stw	r2,-84(fp)
  state = pfState_chars;
8112999c:	e03fec15 	stw	zero,-80(fp)

  while(0 != (c = *w++))
811299a0:	00014b06 	br	81129ed0 <alt_log_private_printf+0x580>
    {
    switch(state)
811299a4:	e0bfec17 	ldw	r2,-80(fp)
811299a8:	10c00060 	cmpeqi	r3,r2,1
811299ac:	18001b1e 	bne	r3,zero,81129a1c <alt_log_private_printf+0xcc>
811299b0:	10c000a0 	cmpeqi	r3,r2,2
811299b4:	18002d1e 	bne	r3,zero,81129a6c <alt_log_private_printf+0x11c>
811299b8:	10000126 	beq	r2,zero,811299c0 <alt_log_private_printf+0x70>
811299bc:	00014406 	br	81129ed0 <alt_log_private_printf+0x580>
      {
      case pfState_chars:
        if(c == '%')
811299c0:	e0bffb07 	ldb	r2,-20(fp)
811299c4:	10800958 	cmpnei	r2,r2,37
811299c8:	10000e1e 	bne	r2,zero,81129a04 <alt_log_private_printf+0xb4>
        {
          fmtLeadingZero = 0;
811299cc:	e03fed15 	stw	zero,-76(fp)
          fmtLong = 0;
811299d0:	e03fee15 	stw	zero,-72(fp)
          fmtBase = 10;
811299d4:	00800284 	movi	r2,10
811299d8:	e0bff115 	stw	r2,-60(fp)
          fmtSigned = 1;
811299dc:	00800044 	movi	r2,1
811299e0:	e0bff215 	stw	r2,-56(fp)
          fmtCase = 0; /* Only %X sets this. */
811299e4:	e03ff315 	stw	zero,-52(fp)
          fmtBeforeDecimal = -1;
811299e8:	00bfffc4 	movi	r2,-1
811299ec:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = -1;
811299f0:	00bfffc4 	movi	r2,-1
811299f4:	e0bff015 	stw	r2,-64(fp)
          state = pfState_firstFmtChar;
811299f8:	00800044 	movi	r2,1
811299fc:	e0bfec15 	stw	r2,-80(fp)
81129a00:	00013306 	br	81129ed0 <alt_log_private_printf+0x580>
        }
        else
        {
          alt_log_txchar(c,(char*)base);
81129a04:	e0bffb07 	ldb	r2,-20(fp)
81129a08:	e0fffd17 	ldw	r3,-12(fp)
81129a0c:	180b883a 	mov	r5,r3
81129a10:	1009883a 	mov	r4,r2
81129a14:	11298940 	call	81129894 <alt_log_txchar>
        }
        break;
81129a18:	00012d06 	br	81129ed0 <alt_log_private_printf+0x580>

      case pfState_firstFmtChar:
        if(c == '0')
81129a1c:	e0bffb07 	ldb	r2,-20(fp)
81129a20:	10800c18 	cmpnei	r2,r2,48
81129a24:	1000051e 	bne	r2,zero,81129a3c <alt_log_private_printf+0xec>
        {
          fmtLeadingZero = 1;
81129a28:	00800044 	movi	r2,1
81129a2c:	e0bfed15 	stw	r2,-76(fp)
          state = pfState_otherFmtChar;
81129a30:	00800084 	movi	r2,2
81129a34:	e0bfec15 	stw	r2,-80(fp)
81129a38:	00012506 	br	81129ed0 <alt_log_private_printf+0x580>
        }
        else if(c == '%')
81129a3c:	e0bffb07 	ldb	r2,-20(fp)
81129a40:	10800958 	cmpnei	r2,r2,37
81129a44:	1000071e 	bne	r2,zero,81129a64 <alt_log_private_printf+0x114>
        {
          alt_log_txchar(c,(char*)base);
81129a48:	e0bffb07 	ldb	r2,-20(fp)
81129a4c:	e0fffd17 	ldw	r3,-12(fp)
81129a50:	180b883a 	mov	r5,r3
81129a54:	1009883a 	mov	r4,r2
81129a58:	11298940 	call	81129894 <alt_log_txchar>
          state = pfState_chars;
81129a5c:	e03fec15 	stw	zero,-80(fp)
81129a60:	00011b06 	br	81129ed0 <alt_log_private_printf+0x580>
        }
        else
        {
          state = pfState_otherFmtChar;
81129a64:	00800084 	movi	r2,2
81129a68:	e0bfec15 	stw	r2,-80(fp)
        }
        break;

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
81129a6c:	e0bffb07 	ldb	r2,-20(fp)
81129a70:	10800b98 	cmpnei	r2,r2,46
81129a74:	1000021e 	bne	r2,zero,81129a80 <alt_log_private_printf+0x130>
        {
          fmtAfterDecimal = 0;
81129a78:	e03ff015 	stw	zero,-64(fp)
81129a7c:	00011306 	br	81129ecc <alt_log_private_printf+0x57c>
        }
        else if('0' <= c && c <= '9')
81129a80:	e0bffb07 	ldb	r2,-20(fp)
81129a84:	10800c10 	cmplti	r2,r2,48
81129a88:	10001a1e 	bne	r2,zero,81129af4 <alt_log_private_printf+0x1a4>
81129a8c:	e0bffb07 	ldb	r2,-20(fp)
81129a90:	10800e88 	cmpgei	r2,r2,58
81129a94:	1000171e 	bne	r2,zero,81129af4 <alt_log_private_printf+0x1a4>
        {
          c -= '0';
81129a98:	e0bffb03 	ldbu	r2,-20(fp)
81129a9c:	10bff404 	addi	r2,r2,-48
81129aa0:	e0bffb05 	stb	r2,-20(fp)
          if(fmtAfterDecimal < 0)     /* still before decimal */
81129aa4:	e0bff017 	ldw	r2,-64(fp)
81129aa8:	10000c0e 	bge	r2,zero,81129adc <alt_log_private_printf+0x18c>
          {
            if(fmtBeforeDecimal < 0)
81129aac:	e0bfef17 	ldw	r2,-68(fp)
81129ab0:	1000020e 	bge	r2,zero,81129abc <alt_log_private_printf+0x16c>
            {
              fmtBeforeDecimal = 0;
81129ab4:	e03fef15 	stw	zero,-68(fp)
81129ab8:	00000306 	br	81129ac8 <alt_log_private_printf+0x178>
            }
            else
            {
              fmtBeforeDecimal *= 10;
81129abc:	e0bfef17 	ldw	r2,-68(fp)
81129ac0:	108002a4 	muli	r2,r2,10
81129ac4:	e0bfef15 	stw	r2,-68(fp)
            }
            fmtBeforeDecimal += c;
81129ac8:	e0bffb07 	ldb	r2,-20(fp)
81129acc:	e0ffef17 	ldw	r3,-68(fp)
81129ad0:	1885883a 	add	r2,r3,r2
81129ad4:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
81129ad8:	0000fc06 	br	81129ecc <alt_log_private_printf+0x57c>
            }
            fmtBeforeDecimal += c;
          }
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
81129adc:	e0bff017 	ldw	r2,-64(fp)
81129ae0:	10c002a4 	muli	r3,r2,10
81129ae4:	e0bffb07 	ldb	r2,-20(fp)
81129ae8:	1885883a 	add	r2,r3,r2
81129aec:	e0bff015 	stw	r2,-64(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
81129af0:	0000f606 	br	81129ecc <alt_log_private_printf+0x57c>
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
          }
        }
        else if(c == 'l')
81129af4:	e0bffb07 	ldb	r2,-20(fp)
81129af8:	10801b18 	cmpnei	r2,r2,108
81129afc:	1000031e 	bne	r2,zero,81129b0c <alt_log_private_printf+0x1bc>
        {
          fmtLong = 1;
81129b00:	00800044 	movi	r2,1
81129b04:	e0bfee15 	stw	r2,-72(fp)
81129b08:	0000f006 	br	81129ecc <alt_log_private_printf+0x57c>
        }
        else                  /* we're up to the letter which determines type */
        {
          switch(c)
81129b0c:	e0bffb07 	ldb	r2,-20(fp)
81129b10:	10bfea04 	addi	r2,r2,-88
81129b14:	10c00868 	cmpgeui	r3,r2,33
81129b18:	1800eb1e 	bne	r3,zero,81129ec8 <alt_log_private_printf+0x578>
81129b1c:	100690ba 	slli	r3,r2,2
81129b20:	00a044f4 	movhi	r2,33043
81129b24:	10a6cd04 	addi	r2,r2,-25804
81129b28:	1885883a 	add	r2,r3,r2
81129b2c:	10800017 	ldw	r2,0(r2)
81129b30:	1000683a 	jmp	r2
81129b34:	81129df4 	orhi	r4,r16,19063
81129b38:	81129ec8 	cmpgei	r4,r16,19067
81129b3c:	81129ec8 	cmpgei	r4,r16,19067
81129b40:	81129ec8 	cmpgei	r4,r16,19067
81129b44:	81129ec8 	cmpgei	r4,r16,19067
81129b48:	81129ec8 	cmpgei	r4,r16,19067
81129b4c:	81129ec8 	cmpgei	r4,r16,19067
81129b50:	81129ec8 	cmpgei	r4,r16,19067
81129b54:	81129ec8 	cmpgei	r4,r16,19067
81129b58:	81129ec8 	cmpgei	r4,r16,19067
81129b5c:	81129ec8 	cmpgei	r4,r16,19067
81129b60:	81129e0c 	andi	r4,r16,19064
81129b64:	81129bb8 	rdprs	r4,r16,19054
81129b68:	81129ec8 	cmpgei	r4,r16,19067
81129b6c:	81129ec8 	cmpgei	r4,r16,19067
81129b70:	81129ec8 	cmpgei	r4,r16,19067
81129b74:	81129ec8 	cmpgei	r4,r16,19067
81129b78:	81129bb8 	rdprs	r4,r16,19054
81129b7c:	81129ec8 	cmpgei	r4,r16,19067
81129b80:	81129ec8 	cmpgei	r4,r16,19067
81129b84:	81129ec8 	cmpgei	r4,r16,19067
81129b88:	81129ec8 	cmpgei	r4,r16,19067
81129b8c:	81129ec8 	cmpgei	r4,r16,19067
81129b90:	81129dd4 	ori	r4,r16,19063
81129b94:	81129ec8 	cmpgei	r4,r16,19067
81129b98:	81129ec8 	cmpgei	r4,r16,19067
81129b9c:	81129ec8 	cmpgei	r4,r16,19067
81129ba0:	81129e48 	cmpgei	r4,r16,19065
81129ba4:	81129ec8 	cmpgei	r4,r16,19067
81129ba8:	81129dcc 	andi	r4,r16,19063
81129bac:	81129ec8 	cmpgei	r4,r16,19067
81129bb0:	81129ec8 	cmpgei	r4,r16,19067
81129bb4:	81129de4 	muli	r4,r16,19063
                unsigned long vShrink;  /* used to count digits */
                int sign;
                int digitCount;

                /* Get the value */
                if(fmtLong)
81129bb8:	e0bfee17 	ldw	r2,-72(fp)
81129bbc:	10000e26 	beq	r2,zero,81129bf8 <alt_log_private_printf+0x2a8>
                {
                  if (fmtSigned)
81129bc0:	e0bff217 	ldw	r2,-56(fp)
81129bc4:	10000626 	beq	r2,zero,81129be0 <alt_log_private_printf+0x290>
                  {
                    v = va_arg(args,long);
81129bc8:	e0bffe17 	ldw	r2,-8(fp)
81129bcc:	10c00104 	addi	r3,r2,4
81129bd0:	e0fffe15 	stw	r3,-8(fp)
81129bd4:	10800017 	ldw	r2,0(r2)
81129bd8:	e0bff415 	stw	r2,-48(fp)
81129bdc:	00001306 	br	81129c2c <alt_log_private_printf+0x2dc>
                  }
                  else
                  {
                    v = va_arg(args,unsigned long);
81129be0:	e0bffe17 	ldw	r2,-8(fp)
81129be4:	10c00104 	addi	r3,r2,4
81129be8:	e0fffe15 	stw	r3,-8(fp)
81129bec:	10800017 	ldw	r2,0(r2)
81129bf0:	e0bff415 	stw	r2,-48(fp)
81129bf4:	00000d06 	br	81129c2c <alt_log_private_printf+0x2dc>
                  }
                }
                else
                {
                  if (fmtSigned)
81129bf8:	e0bff217 	ldw	r2,-56(fp)
81129bfc:	10000626 	beq	r2,zero,81129c18 <alt_log_private_printf+0x2c8>
                  {
                    v = va_arg(args,int);
81129c00:	e0bffe17 	ldw	r2,-8(fp)
81129c04:	10c00104 	addi	r3,r2,4
81129c08:	e0fffe15 	stw	r3,-8(fp)
81129c0c:	10800017 	ldw	r2,0(r2)
81129c10:	e0bff415 	stw	r2,-48(fp)
81129c14:	00000506 	br	81129c2c <alt_log_private_printf+0x2dc>
                  }
                  else
                  {
                    v = va_arg(args,unsigned int);
81129c18:	e0bffe17 	ldw	r2,-8(fp)
81129c1c:	10c00104 	addi	r3,r2,4
81129c20:	e0fffe15 	stw	r3,-8(fp)
81129c24:	10800017 	ldw	r2,0(r2)
81129c28:	e0bff415 	stw	r2,-48(fp)
                  }
                }

                /* Strip sign */
                sign = 0;
81129c2c:	e03ff715 	stw	zero,-36(fp)
                  /* (assumes sign bit is #31) */
                if( fmtSigned && (v & (0x80000000)) )
81129c30:	e0bff217 	ldw	r2,-56(fp)
81129c34:	10000726 	beq	r2,zero,81129c54 <alt_log_private_printf+0x304>
81129c38:	e0bff417 	ldw	r2,-48(fp)
81129c3c:	1000050e 	bge	r2,zero,81129c54 <alt_log_private_printf+0x304>
                  {
                  v = ~v + 1;
81129c40:	e0bff417 	ldw	r2,-48(fp)
81129c44:	0085c83a 	sub	r2,zero,r2
81129c48:	e0bff415 	stw	r2,-48(fp)
                  sign = 1;
81129c4c:	00800044 	movi	r2,1
81129c50:	e0bff715 	stw	r2,-36(fp)
                  }

                /* Count digits, and get largest place value */
                vShrink = v;
81129c54:	e0bff417 	ldw	r2,-48(fp)
81129c58:	e0bff615 	stw	r2,-40(fp)
                p = 1;
81129c5c:	00800044 	movi	r2,1
81129c60:	e0bff515 	stw	r2,-44(fp)
                digitCount = 1;
81129c64:	00800044 	movi	r2,1
81129c68:	e0bff815 	stw	r2,-32(fp)
                while( (vShrink = vShrink / fmtBase) > 0 )
81129c6c:	00000706 	br	81129c8c <alt_log_private_printf+0x33c>
                  {
                  digitCount++;
81129c70:	e0bff817 	ldw	r2,-32(fp)
81129c74:	10800044 	addi	r2,r2,1
81129c78:	e0bff815 	stw	r2,-32(fp)
                  p *= fmtBase;
81129c7c:	e0bff117 	ldw	r2,-60(fp)
81129c80:	e0fff517 	ldw	r3,-44(fp)
81129c84:	1885383a 	mul	r2,r3,r2
81129c88:	e0bff515 	stw	r2,-44(fp)

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
                while( (vShrink = vShrink / fmtBase) > 0 )
81129c8c:	e0bff117 	ldw	r2,-60(fp)
81129c90:	e0fff617 	ldw	r3,-40(fp)
81129c94:	1885203a 	divu	r2,r3,r2
81129c98:	e0bff615 	stw	r2,-40(fp)
81129c9c:	e0bff617 	ldw	r2,-40(fp)
81129ca0:	103ff31e 	bne	r2,zero,81129c70 <__reset+0xfb109c70>
                  digitCount++;
                  p *= fmtBase;
                  }

                /* Print leading characters & sign */
                fmtBeforeDecimal -= digitCount;
81129ca4:	e0ffef17 	ldw	r3,-68(fp)
81129ca8:	e0bff817 	ldw	r2,-32(fp)
81129cac:	1885c83a 	sub	r2,r3,r2
81129cb0:	e0bfef15 	stw	r2,-68(fp)
                if(fmtLeadingZero)
81129cb4:	e0bfed17 	ldw	r2,-76(fp)
81129cb8:	10000e26 	beq	r2,zero,81129cf4 <alt_log_private_printf+0x3a4>
                  {
                  if(sign)
81129cbc:	e0bff717 	ldw	r2,-36(fp)
81129cc0:	10000726 	beq	r2,zero,81129ce0 <alt_log_private_printf+0x390>
                    {
                    alt_log_txchar('-',(char*)base);
81129cc4:	e0bffd17 	ldw	r2,-12(fp)
81129cc8:	100b883a 	mov	r5,r2
81129ccc:	01000b44 	movi	r4,45
81129cd0:	11298940 	call	81129894 <alt_log_txchar>
                    fmtBeforeDecimal--;
81129cd4:	e0bfef17 	ldw	r2,-68(fp)
81129cd8:	10bfffc4 	addi	r2,r2,-1
81129cdc:	e0bfef15 	stw	r2,-68(fp)
                    }
                  alt_log_repchar('0',fmtBeforeDecimal,base);
81129ce0:	e1bffd17 	ldw	r6,-12(fp)
81129ce4:	e17fef17 	ldw	r5,-68(fp)
81129ce8:	01000c04 	movi	r4,48
81129cec:	11298e80 	call	811298e8 <alt_log_repchar>
81129cf0:	00003206 	br	81129dbc <alt_log_private_printf+0x46c>
                  }
                else
                  {
                    if(sign)
81129cf4:	e0bff717 	ldw	r2,-36(fp)
81129cf8:	10000326 	beq	r2,zero,81129d08 <alt_log_private_printf+0x3b8>
                    {
                      fmtBeforeDecimal--;
81129cfc:	e0bfef17 	ldw	r2,-68(fp)
81129d00:	10bfffc4 	addi	r2,r2,-1
81129d04:	e0bfef15 	stw	r2,-68(fp)
                    }
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
81129d08:	e1bffd17 	ldw	r6,-12(fp)
81129d0c:	e17fef17 	ldw	r5,-68(fp)
81129d10:	01000804 	movi	r4,32
81129d14:	11298e80 	call	811298e8 <alt_log_repchar>
                    if(sign)
81129d18:	e0bff717 	ldw	r2,-36(fp)
81129d1c:	10002726 	beq	r2,zero,81129dbc <alt_log_private_printf+0x46c>
                    {
                      alt_log_txchar('-',(char*)base);
81129d20:	e0bffd17 	ldw	r2,-12(fp)
81129d24:	100b883a 	mov	r5,r2
81129d28:	01000b44 	movi	r4,45
81129d2c:	11298940 	call	81129894 <alt_log_txchar>
                    }
                  }

                /* Print numbery parts */
                while(p)
81129d30:	00002206 	br	81129dbc <alt_log_private_printf+0x46c>
                  {
                  unsigned char d;

                  d = v / p;
81129d34:	e0fff417 	ldw	r3,-48(fp)
81129d38:	e0bff517 	ldw	r2,-44(fp)
81129d3c:	1885203a 	divu	r2,r3,r2
81129d40:	e0bff905 	stb	r2,-28(fp)
                  d += '0';
81129d44:	e0bff903 	ldbu	r2,-28(fp)
81129d48:	10800c04 	addi	r2,r2,48
81129d4c:	e0bff905 	stb	r2,-28(fp)
                  if(d > '9')
81129d50:	e0bff903 	ldbu	r2,-28(fp)
81129d54:	10800eb0 	cmpltui	r2,r2,58
81129d58:	1000081e 	bne	r2,zero,81129d7c <alt_log_private_printf+0x42c>
                  {
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
81129d5c:	e0bff317 	ldw	r2,-52(fp)
81129d60:	10000226 	beq	r2,zero,81129d6c <alt_log_private_printf+0x41c>
81129d64:	008001c4 	movi	r2,7
81129d68:	00000106 	br	81129d70 <alt_log_private_printf+0x420>
81129d6c:	008009c4 	movi	r2,39
81129d70:	e0fff903 	ldbu	r3,-28(fp)
81129d74:	10c5883a 	add	r2,r2,r3
81129d78:	e0bff905 	stb	r2,-28(fp)
                  }
                  alt_log_txchar(d,(char*)base);
81129d7c:	e0bff903 	ldbu	r2,-28(fp)
81129d80:	e0fffd17 	ldw	r3,-12(fp)
81129d84:	180b883a 	mov	r5,r3
81129d88:	1009883a 	mov	r4,r2
81129d8c:	11298940 	call	81129894 <alt_log_txchar>

                  v = v % p;
81129d90:	e0bff417 	ldw	r2,-48(fp)
81129d94:	e0fff517 	ldw	r3,-44(fp)
81129d98:	10c9203a 	divu	r4,r2,r3
81129d9c:	e0fff517 	ldw	r3,-44(fp)
81129da0:	20c7383a 	mul	r3,r4,r3
81129da4:	10c5c83a 	sub	r2,r2,r3
81129da8:	e0bff415 	stw	r2,-48(fp)
                  p = p / fmtBase;
81129dac:	e0bff117 	ldw	r2,-60(fp)
81129db0:	e0fff517 	ldw	r3,-44(fp)
81129db4:	1885203a 	divu	r2,r3,r2
81129db8:	e0bff515 	stw	r2,-44(fp)
                      alt_log_txchar('-',(char*)base);
                    }
                  }

                /* Print numbery parts */
                while(p)
81129dbc:	e0bff517 	ldw	r2,-44(fp)
81129dc0:	103fdc1e 	bne	r2,zero,81129d34 <__reset+0xfb109d34>
                  v = v % p;
                  p = p / fmtBase;
                  }
                }

              state = pfState_chars;
81129dc4:	e03fec15 	stw	zero,-80(fp)
              break;
81129dc8:	00003f06 	br	81129ec8 <alt_log_private_printf+0x578>

            case 'u':
              fmtSigned = 0;
81129dcc:	e03ff215 	stw	zero,-56(fp)
              goto doIntegerPrint;
81129dd0:	003f7906 	br	81129bb8 <__reset+0xfb109bb8>
            case 'o':
              fmtSigned = 0;
81129dd4:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 8;
81129dd8:	00800204 	movi	r2,8
81129ddc:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
81129de0:	003f7506 	br	81129bb8 <__reset+0xfb109bb8>
            case 'x':
              fmtSigned = 0;
81129de4:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
81129de8:	00800404 	movi	r2,16
81129dec:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
81129df0:	003f7106 	br	81129bb8 <__reset+0xfb109bb8>
            case 'X':
              fmtSigned = 0;
81129df4:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
81129df8:	00800404 	movi	r2,16
81129dfc:	e0bff115 	stw	r2,-60(fp)
              fmtCase = 1;
81129e00:	00800044 	movi	r2,1
81129e04:	e0bff315 	stw	r2,-52(fp)
              goto doIntegerPrint;
81129e08:	003f6b06 	br	81129bb8 <__reset+0xfb109bb8>

            case 'c':
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
81129e0c:	e0bfef17 	ldw	r2,-68(fp)
81129e10:	10bfffc4 	addi	r2,r2,-1
81129e14:	e1bffd17 	ldw	r6,-12(fp)
81129e18:	100b883a 	mov	r5,r2
81129e1c:	01000804 	movi	r4,32
81129e20:	11298e80 	call	811298e8 <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
81129e24:	e0bffe17 	ldw	r2,-8(fp)
81129e28:	10c00104 	addi	r3,r2,4
81129e2c:	e0fffe15 	stw	r3,-8(fp)
81129e30:	10800017 	ldw	r2,0(r2)
81129e34:	e0fffd17 	ldw	r3,-12(fp)
81129e38:	180b883a 	mov	r5,r3
81129e3c:	1009883a 	mov	r4,r2
81129e40:	11298940 	call	81129894 <alt_log_txchar>
              break;
81129e44:	00002006 	br	81129ec8 <alt_log_private_printf+0x578>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
81129e48:	e0bffe17 	ldw	r2,-8(fp)
81129e4c:	10c00104 	addi	r3,r2,4
81129e50:	e0fffe15 	stw	r3,-8(fp)
81129e54:	10800017 	ldw	r2,0(r2)
81129e58:	e0bffa15 	stw	r2,-24(fp)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
81129e5c:	e43fef17 	ldw	r16,-68(fp)
81129e60:	e13ffa17 	ldw	r4,-24(fp)
81129e64:	11155840 	call	81115584 <strlen>
81129e68:	8085c83a 	sub	r2,r16,r2
81129e6c:	e1bffd17 	ldw	r6,-12(fp)
81129e70:	100b883a 	mov	r5,r2
81129e74:	01000804 	movi	r4,32
81129e78:	11298e80 	call	811298e8 <alt_log_repchar>

                while(*s)
81129e7c:	00000b06 	br	81129eac <alt_log_private_printf+0x55c>
                  alt_log_txchar(*s++,(char*)base);
81129e80:	e0bffa17 	ldw	r2,-24(fp)
81129e84:	10c00044 	addi	r3,r2,1
81129e88:	e0fffa15 	stw	r3,-24(fp)
81129e8c:	10800003 	ldbu	r2,0(r2)
81129e90:	10803fcc 	andi	r2,r2,255
81129e94:	1080201c 	xori	r2,r2,128
81129e98:	10bfe004 	addi	r2,r2,-128
81129e9c:	e0fffd17 	ldw	r3,-12(fp)
81129ea0:	180b883a 	mov	r5,r3
81129ea4:	1009883a 	mov	r4,r2
81129ea8:	11298940 	call	81129894 <alt_log_txchar>
                char *s;

                s = va_arg(args,char *);
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);

                while(*s)
81129eac:	e0bffa17 	ldw	r2,-24(fp)
81129eb0:	10800003 	ldbu	r2,0(r2)
81129eb4:	10803fcc 	andi	r2,r2,255
81129eb8:	1080201c 	xori	r2,r2,128
81129ebc:	10bfe004 	addi	r2,r2,-128
81129ec0:	103fef1e 	bne	r2,zero,81129e80 <__reset+0xfb109e80>
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
81129ec4:	0001883a 	nop
            } /* switch last letter of fmt */
          state=pfState_chars;
81129ec8:	e03fec15 	stw	zero,-80(fp)
          }
        break;
81129ecc:	0001883a 	nop
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;

  while(0 != (c = *w++))
81129ed0:	e0bfeb17 	ldw	r2,-84(fp)
81129ed4:	10c00044 	addi	r3,r2,1
81129ed8:	e0ffeb15 	stw	r3,-84(fp)
81129edc:	10800003 	ldbu	r2,0(r2)
81129ee0:	e0bffb05 	stb	r2,-20(fp)
81129ee4:	e0bffb07 	ldb	r2,-20(fp)
81129ee8:	103eae1e 	bne	r2,zero,811299a4 <__reset+0xfb1099a4>
          state=pfState_chars;
          }
        break;
      } /* switch */
    } /* while chars left */
  } /* printf */
81129eec:	0001883a 	nop
81129ef0:	e6ffff04 	addi	sp,fp,-4
81129ef4:	dfc00217 	ldw	ra,8(sp)
81129ef8:	df000117 	ldw	fp,4(sp)
81129efc:	dc000017 	ldw	r16,0(sp)
81129f00:	dec00304 	addi	sp,sp,12
81129f04:	f800283a 	ret

81129f08 <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
81129f08:	defff904 	addi	sp,sp,-28
81129f0c:	de00012e 	bgeu	sp,et,81129f14 <alt_log_printf_proc+0xc>
81129f10:	003b68fa 	trap	3
81129f14:	dfc00315 	stw	ra,12(sp)
81129f18:	df000215 	stw	fp,8(sp)
81129f1c:	df000204 	addi	fp,sp,8
81129f20:	e13fff15 	stw	r4,-4(fp)
81129f24:	e1400215 	stw	r5,8(fp)
81129f28:	e1800315 	stw	r6,12(fp)
81129f2c:	e1c00415 	stw	r7,16(fp)
    va_list args;

    va_start (args, fmt);
81129f30:	e0800204 	addi	r2,fp,8
81129f34:	e0bffe15 	stw	r2,-8(fp)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
81129f38:	e0bffe17 	ldw	r2,-8(fp)
81129f3c:	100d883a 	mov	r6,r2
81129f40:	01604834 	movhi	r5,33056
81129f44:	294c2404 	addi	r5,r5,12432
81129f48:	e13fff17 	ldw	r4,-4(fp)
81129f4c:	11299500 	call	81129950 <alt_log_private_printf>
    return (0);
81129f50:	0005883a 	mov	r2,zero
}
81129f54:	e037883a 	mov	sp,fp
81129f58:	dfc00117 	ldw	ra,4(sp)
81129f5c:	df000017 	ldw	fp,0(sp)
81129f60:	dec00504 	addi	sp,sp,20
81129f64:	f800283a 	ret

81129f68 <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
81129f68:	defff904 	addi	sp,sp,-28
81129f6c:	de00012e 	bgeu	sp,et,81129f74 <altera_avalon_jtag_uart_report_log+0xc>
81129f70:	003b68fa 	trap	3
81129f74:	dfc00615 	stw	ra,24(sp)
81129f78:	df000515 	stw	fp,20(sp)
81129f7c:	dc400415 	stw	r17,16(sp)
81129f80:	dc000315 	stw	r16,12(sp)
81129f84:	df000504 	addi	fp,sp,20
81129f88:	e13ffd15 	stw	r4,-12(fp)
    if (alt_log_jtag_uart_alarm_on_flag) {
81129f8c:	d0a06b83 	ldbu	r2,-32338(gp)
81129f90:	10803fcc 	andi	r2,r2,255
81129f94:	10001426 	beq	r2,zero,81129fe8 <altera_avalon_jtag_uart_report_log+0x80>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
81129f98:	e0bffd17 	ldw	r2,-12(fp)
81129f9c:	e0bffb15 	stw	r2,-20(fp)
        const char* header="JTAG Alarm:";
81129fa0:	00a04534 	movhi	r2,33044
81129fa4:	10898204 	addi	r2,r2,9736
81129fa8:	e0bffc15 	stw	r2,-16(fp)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
81129fac:	e0bffb17 	ldw	r2,-20(fp)
81129fb0:	10800017 	ldw	r2,0(r2)
81129fb4:	e1bffc17 	ldw	r6,-16(fp)
81129fb8:	100b883a 	mov	r5,r2
81129fbc:	e13ffb17 	ldw	r4,-20(fp)
81129fc0:	112a0080 	call	8112a008 <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81129fc4:	d0e07217 	ldw	r3,-32312(gp)
        return ALT_LOG_JTAG_UART_TICKS;
81129fc8:	00b33374 	movhi	r2,52429
81129fcc:	10b33344 	addi	r2,r2,-13107
81129fd0:	1888383a 	mulxuu	r4,r3,r2
81129fd4:	1885383a 	mul	r2,r3,r2
81129fd8:	1021883a 	mov	r16,r2
81129fdc:	2023883a 	mov	r17,r4
81129fe0:	8804d0fa 	srli	r2,r17,3
81129fe4:	00000106 	br	81129fec <altera_avalon_jtag_uart_report_log+0x84>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
81129fe8:	0005883a 	mov	r2,zero
    }
}
81129fec:	e6fffe04 	addi	sp,fp,-8
81129ff0:	dfc00317 	ldw	ra,12(sp)
81129ff4:	df000217 	ldw	fp,8(sp)
81129ff8:	dc400117 	ldw	r17,4(sp)
81129ffc:	dc000017 	ldw	r16,0(sp)
8112a000:	dec00404 	addi	sp,sp,16
8112a004:	f800283a 	ret

8112a008 <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
8112a008:	deffef04 	addi	sp,sp,-68
8112a00c:	de00012e 	bgeu	sp,et,8112a014 <alt_log_jtag_uart_print_control_reg+0xc>
8112a010:	003b68fa 	trap	3
8112a014:	dfc01015 	stw	ra,64(sp)
8112a018:	df000f15 	stw	fp,60(sp)
8112a01c:	df000f04 	addi	fp,sp,60
8112a020:	e13ffd15 	stw	r4,-12(fp)
8112a024:	e17ffe15 	stw	r5,-8(fp)
8112a028:	e1bfff15 	stw	r6,-4(fp)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8112a02c:	e0bffe17 	ldw	r2,-8(fp)
8112a030:	10800104 	addi	r2,r2,4
8112a034:	10800037 	ldwio	r2,0(r2)
8112a038:	e0bff615 	stw	r2,-40(fp)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
8112a03c:	e0bff617 	ldw	r2,-40(fp)
8112a040:	1004d43a 	srli	r2,r2,16
8112a044:	e0bff715 	stw	r2,-36(fp)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
8112a048:	e0bff617 	ldw	r2,-40(fp)
8112a04c:	1080008c 	andi	r2,r2,2
8112a050:	1004d07a 	srli	r2,r2,1
8112a054:	e0bff815 	stw	r2,-32(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
8112a058:	e0bff617 	ldw	r2,-40(fp)
8112a05c:	1080004c 	andi	r2,r2,1
8112a060:	e0bff915 	stw	r2,-28(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
8112a064:	e0bff617 	ldw	r2,-40(fp)
8112a068:	1080400c 	andi	r2,r2,256
8112a06c:	1004d23a 	srli	r2,r2,8
8112a070:	e0bffa15 	stw	r2,-24(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
8112a074:	e0bff617 	ldw	r2,-40(fp)
8112a078:	1080800c 	andi	r2,r2,512
8112a07c:	1004d27a 	srli	r2,r2,9
8112a080:	e0bffb15 	stw	r2,-20(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
8112a084:	e0bff617 	ldw	r2,-40(fp)
8112a088:	1081000c 	andi	r2,r2,1024
8112a08c:	1004d2ba 	srli	r2,r2,10
8112a090:	e0bffc15 	stw	r2,-16(fp)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
8112a094:	e0bffd17 	ldw	r2,-12(fp)
8112a098:	10c01017 	ldw	r3,64(r2)
8112a09c:	e0bffd17 	ldw	r2,-12(fp)
8112a0a0:	10800f17 	ldw	r2,60(r2)
8112a0a4:	1887c83a 	sub	r3,r3,r2
8112a0a8:	e0bff917 	ldw	r2,-28(fp)
8112a0ac:	d8800415 	stw	r2,16(sp)
8112a0b0:	e0bff817 	ldw	r2,-32(fp)
8112a0b4:	d8800315 	stw	r2,12(sp)
8112a0b8:	e0bffa17 	ldw	r2,-24(fp)
8112a0bc:	d8800215 	stw	r2,8(sp)
8112a0c0:	e0bffb17 	ldw	r2,-20(fp)
8112a0c4:	d8800115 	stw	r2,4(sp)
8112a0c8:	e0bffc17 	ldw	r2,-16(fp)
8112a0cc:	d8800015 	stw	r2,0(sp)
8112a0d0:	e1fff717 	ldw	r7,-36(fp)
8112a0d4:	180d883a 	mov	r6,r3
8112a0d8:	e17fff17 	ldw	r5,-4(fp)
8112a0dc:	01204534 	movhi	r4,33044
8112a0e0:	21098504 	addi	r4,r4,9748
8112a0e4:	1129f080 	call	81129f08 <alt_log_printf_proc>
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
8112a0e8:	0001883a 	nop

}
8112a0ec:	e037883a 	mov	sp,fp
8112a0f0:	dfc00117 	ldw	ra,4(sp)
8112a0f4:	df000017 	ldw	fp,0(sp)
8112a0f8:	dec00204 	addi	sp,sp,8
8112a0fc:	f800283a 	ret

8112a100 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
8112a100:	defffb04 	addi	sp,sp,-20
8112a104:	de00012e 	bgeu	sp,et,8112a10c <alt_log_jtag_uart_startup_info+0xc>
8112a108:	003b68fa 	trap	3
8112a10c:	dfc00415 	stw	ra,16(sp)
8112a110:	df000315 	stw	fp,12(sp)
8112a114:	df000304 	addi	fp,sp,12
8112a118:	e13ffe15 	stw	r4,-8(fp)
8112a11c:	e17fff15 	stw	r5,-4(fp)
     const char* header="JTAG Startup Info:";
8112a120:	00a04534 	movhi	r2,33044
8112a124:	10899704 	addi	r2,r2,9820
8112a128:	e0bffd15 	stw	r2,-12(fp)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
8112a12c:	e1bffd17 	ldw	r6,-12(fp)
8112a130:	e17fff17 	ldw	r5,-4(fp)
8112a134:	e13ffe17 	ldw	r4,-8(fp)
8112a138:	112a0080 	call	8112a008 <alt_log_jtag_uart_print_control_reg>
     return;
8112a13c:	0001883a 	nop
}
8112a140:	e037883a 	mov	sp,fp
8112a144:	dfc00117 	ldw	ra,4(sp)
8112a148:	df000017 	ldw	fp,0(sp)
8112a14c:	dec00204 	addi	sp,sp,8
8112a150:	f800283a 	ret

8112a154 <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
8112a154:	defffb04 	addi	sp,sp,-20
8112a158:	de00012e 	bgeu	sp,et,8112a160 <alt_log_jtag_uart_isr_proc+0xc>
8112a15c:	003b68fa 	trap	3
8112a160:	dfc00415 	stw	ra,16(sp)
8112a164:	df000315 	stw	fp,12(sp)
8112a168:	df000304 	addi	fp,sp,12
8112a16c:	e13ffe15 	stw	r4,-8(fp)
8112a170:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_jtag_uart_isr_on_flag) {
8112a174:	d0a06bc3 	ldbu	r2,-32337(gp)
8112a178:	10803fcc 	andi	r2,r2,255
8112a17c:	10000826 	beq	r2,zero,8112a1a0 <alt_log_jtag_uart_isr_proc+0x4c>
        const char* header="JTAG IRQ:";
8112a180:	00a04534 	movhi	r2,33044
8112a184:	10899c04 	addi	r2,r2,9840
8112a188:	e0bffd15 	stw	r2,-12(fp)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
8112a18c:	e1bffd17 	ldw	r6,-12(fp)
8112a190:	e17ffe17 	ldw	r5,-8(fp)
8112a194:	e13fff17 	ldw	r4,-4(fp)
8112a198:	112a0080 	call	8112a008 <alt_log_jtag_uart_print_control_reg>
    }
    return;
8112a19c:	0001883a 	nop
8112a1a0:	0001883a 	nop
}
8112a1a4:	e037883a 	mov	sp,fp
8112a1a8:	dfc00117 	ldw	ra,4(sp)
8112a1ac:	df000017 	ldw	fp,0(sp)
8112a1b0:	dec00204 	addi	sp,sp,8
8112a1b4:	f800283a 	ret

8112a1b8 <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
8112a1b8:	defffa04 	addi	sp,sp,-24
8112a1bc:	de00012e 	bgeu	sp,et,8112a1c4 <alt_log_write+0xc>
8112a1c0:	003b68fa 	trap	3
8112a1c4:	dfc00515 	stw	ra,20(sp)
8112a1c8:	df000415 	stw	fp,16(sp)
8112a1cc:	df000404 	addi	fp,sp,16
8112a1d0:	e13ffe15 	stw	r4,-8(fp)
8112a1d4:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_write_on_flag) {
8112a1d8:	d0a06b03 	ldbu	r2,-32340(gp)
8112a1dc:	10803fcc 	andi	r2,r2,255
8112a1e0:	10004026 	beq	r2,zero,8112a2e4 <alt_log_write+0x12c>
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
8112a1e4:	e0bfff17 	ldw	r2,-4(fp)
8112a1e8:	10c00430 	cmpltui	r3,r2,16
8112a1ec:	1800011e 	bne	r3,zero,8112a1f4 <alt_log_write+0x3c>
8112a1f0:	008003c4 	movi	r2,15
8112a1f4:	e0bffd15 	stw	r2,-12(fp)

        if (length < 2) return;
8112a1f8:	e0bffd17 	ldw	r2,-12(fp)
8112a1fc:	10800088 	cmpgei	r2,r2,2
8112a200:	10003726 	beq	r2,zero,8112a2e0 <alt_log_write+0x128>

        strncpy (alt_log_write_buf,ptr,length);
8112a204:	e0bffd17 	ldw	r2,-12(fp)
8112a208:	100d883a 	mov	r6,r2
8112a20c:	e17ffe17 	ldw	r5,-8(fp)
8112a210:	01204574 	movhi	r4,33045
8112a214:	210c6b04 	addi	r4,r4,12716
8112a218:	113e32c0 	call	8113e32c <strncpy>
    alt_log_write_buf[length-1]='\n';
8112a21c:	e0bffd17 	ldw	r2,-12(fp)
8112a220:	10ffffc4 	addi	r3,r2,-1
8112a224:	00a04574 	movhi	r2,33045
8112a228:	108c6b04 	addi	r2,r2,12716
8112a22c:	10c5883a 	add	r2,r2,r3
8112a230:	00c00284 	movi	r3,10
8112a234:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
8112a238:	00a04574 	movhi	r2,33045
8112a23c:	108c6b04 	addi	r2,r2,12716
8112a240:	e0fffd17 	ldw	r3,-12(fp)
8112a244:	10c5883a 	add	r2,r2,r3
8112a248:	00c00344 	movi	r3,13
8112a24c:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length+1]='\0';
8112a250:	e0bffd17 	ldw	r2,-12(fp)
8112a254:	10c00044 	addi	r3,r2,1
8112a258:	00a04574 	movhi	r2,33045
8112a25c:	108c6b04 	addi	r2,r2,12716
8112a260:	10c5883a 	add	r2,r2,r3
8112a264:	10000005 	stb	zero,0(r2)

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
8112a268:	e03ffc15 	stw	zero,-16(fp)
8112a26c:	00001306 	br	8112a2bc <alt_log_write+0x104>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
8112a270:	00a04574 	movhi	r2,33045
8112a274:	108c6b04 	addi	r2,r2,12716
8112a278:	e0fffc17 	ldw	r3,-16(fp)
8112a27c:	10c5883a 	add	r2,r2,r3
8112a280:	10800003 	ldbu	r2,0(r2)
8112a284:	10803fcc 	andi	r2,r2,255
8112a288:	1080201c 	xori	r2,r2,128
8112a28c:	10bfe004 	addi	r2,r2,-128
8112a290:	10800118 	cmpnei	r2,r2,4
8112a294:	1000061e 	bne	r2,zero,8112a2b0 <alt_log_write+0xf8>
            alt_log_write_buf[temp_cnt]='D';
8112a298:	00a04574 	movhi	r2,33045
8112a29c:	108c6b04 	addi	r2,r2,12716
8112a2a0:	e0fffc17 	ldw	r3,-16(fp)
8112a2a4:	10c5883a 	add	r2,r2,r3
8112a2a8:	00c01104 	movi	r3,68
8112a2ac:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
    alt_log_write_buf[length+1]='\0';

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
8112a2b0:	e0bffc17 	ldw	r2,-16(fp)
8112a2b4:	10800044 	addi	r2,r2,1
8112a2b8:	e0bffc15 	stw	r2,-16(fp)
8112a2bc:	e0fffc17 	ldw	r3,-16(fp)
8112a2c0:	e0bffd17 	ldw	r2,-12(fp)
8112a2c4:	18bfea16 	blt	r3,r2,8112a270 <__reset+0xfb10a270>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
8112a2c8:	01604574 	movhi	r5,33045
8112a2cc:	294c6b04 	addi	r5,r5,12716
8112a2d0:	01204534 	movhi	r4,33044
8112a2d4:	21099f04 	addi	r4,r4,9852
8112a2d8:	1129f080 	call	81129f08 <alt_log_printf_proc>
8112a2dc:	00000106 	br	8112a2e4 <alt_log_write+0x12c>
{
    if (alt_log_write_on_flag) {
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;

        if (length < 2) return;
8112a2e0:	0001883a 	nop
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
    }
}
8112a2e4:	e037883a 	mov	sp,fp
8112a2e8:	dfc00117 	ldw	ra,4(sp)
8112a2ec:	df000017 	ldw	fp,0(sp)
8112a2f0:	dec00204 	addi	sp,sp,8
8112a2f4:	f800283a 	ret

8112a2f8 <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
8112a2f8:	defffe04 	addi	sp,sp,-8
8112a2fc:	de00012e 	bgeu	sp,et,8112a304 <alt_log_system_clock+0xc>
8112a300:	003b68fa 	trap	3
8112a304:	dfc00115 	stw	ra,4(sp)
8112a308:	df000015 	stw	fp,0(sp)
8112a30c:	d839883a 	mov	fp,sp
    if (alt_log_sys_clk_on_flag) {
8112a310:	d0a06b43 	ldbu	r2,-32339(gp)
8112a314:	10803fcc 	andi	r2,r2,255
8112a318:	10000e26 	beq	r2,zero,8112a354 <alt_log_system_clock+0x5c>
    alt_log_sys_clk_count++;
8112a31c:	d0a06e17 	ldw	r2,-32328(gp)
8112a320:	10800044 	addi	r2,r2,1
8112a324:	d0a06e15 	stw	r2,-32328(gp)
8112a328:	d0a07217 	ldw	r2,-32312(gp)
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
8112a32c:	d0e06e17 	ldw	r3,-32328(gp)
8112a330:	10c0082e 	bgeu	r2,r3,8112a354 <alt_log_system_clock+0x5c>
            alt_log_sys_clk_count = 0;
8112a334:	d0206e15 	stw	zero,-32328(gp)
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
8112a338:	d0a06d17 	ldw	r2,-32332(gp)
8112a33c:	10c00044 	addi	r3,r2,1
8112a340:	d0e06d15 	stw	r3,-32332(gp)
8112a344:	100b883a 	mov	r5,r2
8112a348:	01204534 	movhi	r4,33044
8112a34c:	2109a304 	addi	r4,r4,9868
8112a350:	1129f080 	call	81129f08 <alt_log_printf_proc>
        }
    }
}
8112a354:	0001883a 	nop
8112a358:	e037883a 	mov	sp,fp
8112a35c:	dfc00117 	ldw	ra,4(sp)
8112a360:	df000017 	ldw	fp,0(sp)
8112a364:	dec00204 	addi	sp,sp,8
8112a368:	f800283a 	ret

8112a36c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112a36c:	defffe04 	addi	sp,sp,-8
8112a370:	de00012e 	bgeu	sp,et,8112a378 <alt_get_errno+0xc>
8112a374:	003b68fa 	trap	3
8112a378:	dfc00115 	stw	ra,4(sp)
8112a37c:	df000015 	stw	fp,0(sp)
8112a380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112a384:	d0a01017 	ldw	r2,-32704(gp)
8112a388:	10000326 	beq	r2,zero,8112a398 <alt_get_errno+0x2c>
8112a38c:	d0a01017 	ldw	r2,-32704(gp)
8112a390:	103ee83a 	callr	r2
8112a394:	00000106 	br	8112a39c <alt_get_errno+0x30>
8112a398:	d0a06204 	addi	r2,gp,-32376
}
8112a39c:	e037883a 	mov	sp,fp
8112a3a0:	dfc00117 	ldw	ra,4(sp)
8112a3a4:	df000017 	ldw	fp,0(sp)
8112a3a8:	dec00204 	addi	sp,sp,8
8112a3ac:	f800283a 	ret

8112a3b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
8112a3b0:	defff904 	addi	sp,sp,-28
8112a3b4:	de00012e 	bgeu	sp,et,8112a3bc <lseek+0xc>
8112a3b8:	003b68fa 	trap	3
8112a3bc:	dfc00615 	stw	ra,24(sp)
8112a3c0:	df000515 	stw	fp,20(sp)
8112a3c4:	df000504 	addi	fp,sp,20
8112a3c8:	e13ffd15 	stw	r4,-12(fp)
8112a3cc:	e17ffe15 	stw	r5,-8(fp)
8112a3d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
8112a3d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8112a3d8:	e0bffd17 	ldw	r2,-12(fp)
8112a3dc:	10000616 	blt	r2,zero,8112a3f8 <lseek+0x48>
8112a3e0:	e0bffd17 	ldw	r2,-12(fp)
8112a3e4:	10c00324 	muli	r3,r2,12
8112a3e8:	00a04534 	movhi	r2,33044
8112a3ec:	108d6f04 	addi	r2,r2,13756
8112a3f0:	1885883a 	add	r2,r3,r2
8112a3f4:	00000106 	br	8112a3fc <lseek+0x4c>
8112a3f8:	0005883a 	mov	r2,zero
8112a3fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
8112a400:	e0bffc17 	ldw	r2,-16(fp)
8112a404:	10001026 	beq	r2,zero,8112a448 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
8112a408:	e0bffc17 	ldw	r2,-16(fp)
8112a40c:	10800017 	ldw	r2,0(r2)
8112a410:	10800717 	ldw	r2,28(r2)
8112a414:	10000926 	beq	r2,zero,8112a43c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8112a418:	e0bffc17 	ldw	r2,-16(fp)
8112a41c:	10800017 	ldw	r2,0(r2)
8112a420:	10800717 	ldw	r2,28(r2)
8112a424:	e1bfff17 	ldw	r6,-4(fp)
8112a428:	e17ffe17 	ldw	r5,-8(fp)
8112a42c:	e13ffc17 	ldw	r4,-16(fp)
8112a430:	103ee83a 	callr	r2
8112a434:	e0bffb15 	stw	r2,-20(fp)
8112a438:	00000506 	br	8112a450 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
8112a43c:	00bfde84 	movi	r2,-134
8112a440:	e0bffb15 	stw	r2,-20(fp)
8112a444:	00000206 	br	8112a450 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
8112a448:	00bfebc4 	movi	r2,-81
8112a44c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
8112a450:	e0bffb17 	ldw	r2,-20(fp)
8112a454:	1000070e 	bge	r2,zero,8112a474 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
8112a458:	112a36c0 	call	8112a36c <alt_get_errno>
8112a45c:	1007883a 	mov	r3,r2
8112a460:	e0bffb17 	ldw	r2,-20(fp)
8112a464:	0085c83a 	sub	r2,zero,r2
8112a468:	18800015 	stw	r2,0(r3)
    rc = -1;
8112a46c:	00bfffc4 	movi	r2,-1
8112a470:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
8112a474:	e0bffb17 	ldw	r2,-20(fp)
}
8112a478:	e037883a 	mov	sp,fp
8112a47c:	dfc00117 	ldw	ra,4(sp)
8112a480:	df000017 	ldw	fp,0(sp)
8112a484:	dec00204 	addi	sp,sp,8
8112a488:	f800283a 	ret

8112a48c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
8112a48c:	defff904 	addi	sp,sp,-28
8112a490:	de00012e 	bgeu	sp,et,8112a498 <alt_main+0xc>
8112a494:	003b68fa 	trap	3
8112a498:	dfc00615 	stw	ra,24(sp)
8112a49c:	df000515 	stw	fp,20(sp)
8112a4a0:	df000504 	addi	fp,sp,20
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
8112a4a4:	d0a01217 	ldw	r2,-32696(gp)
8112a4a8:	10800058 	cmpnei	r2,r2,1
8112a4ac:	1000031e 	bne	r2,zero,8112a4bc <alt_main+0x30>
8112a4b0:	01204534 	movhi	r4,33044
8112a4b4:	2109a904 	addi	r4,r4,9892
8112a4b8:	1129f080 	call	81129f08 <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8112a4bc:	0009883a 	mov	r4,zero
8112a4c0:	11350a80 	call	811350a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
8112a4c4:	d0a01217 	ldw	r2,-32696(gp)
8112a4c8:	10800058 	cmpnei	r2,r2,1
8112a4cc:	1000031e 	bne	r2,zero,8112a4dc <alt_main+0x50>
8112a4d0:	01204534 	movhi	r4,33044
8112a4d4:	2109b704 	addi	r4,r4,9948
8112a4d8:	1129f080 	call	81129f08 <alt_log_printf_proc>
  ALT_OS_INIT();
8112a4dc:	112bb3c0 	call	8112bb3c <OSInit>
8112a4e0:	01000044 	movi	r4,1
8112a4e4:	11318580 	call	81131858 <OSSemCreate>
8112a4e8:	d0a07515 	stw	r2,-32300(gp)
8112a4ec:	01000044 	movi	r4,1
8112a4f0:	11318580 	call	81131858 <OSSemCreate>
8112a4f4:	d0a07715 	stw	r2,-32292(gp)
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
8112a4f8:	d0a01217 	ldw	r2,-32696(gp)
8112a4fc:	10800058 	cmpnei	r2,r2,1
8112a500:	1000031e 	bne	r2,zero,8112a510 <alt_main+0x84>
8112a504:	01204534 	movhi	r4,33044
8112a508:	2109c504 	addi	r4,r4,10004
8112a50c:	1129f080 	call	81129f08 <alt_log_printf_proc>
8112a510:	d0a06904 	addi	r2,gp,-32348
8112a514:	e0bffc15 	stw	r2,-16(fp)
8112a518:	00800044 	movi	r2,1
8112a51c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8112a520:	e0bffd0b 	ldhu	r2,-12(fp)
8112a524:	1009883a 	mov	r4,r2
8112a528:	11318580 	call	81131858 <OSSemCreate>
8112a52c:	1007883a 	mov	r3,r2
8112a530:	e0bffc17 	ldw	r2,-16(fp)
8112a534:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
8112a538:	d0a01217 	ldw	r2,-32696(gp)
8112a53c:	10800058 	cmpnei	r2,r2,1
8112a540:	1000031e 	bne	r2,zero,8112a550 <alt_main+0xc4>
8112a544:	01204534 	movhi	r4,33044
8112a548:	2109d304 	addi	r4,r4,10060
8112a54c:	1129f080 	call	81129f08 <alt_log_printf_proc>
  alt_sys_init();
8112a550:	11350e80 	call	811350e8 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
8112a554:	d0a01217 	ldw	r2,-32696(gp)
8112a558:	10800058 	cmpnei	r2,r2,1
8112a55c:	1000031e 	bne	r2,zero,8112a56c <alt_main+0xe0>
8112a560:	01204534 	movhi	r4,33044
8112a564:	2109dd04 	addi	r4,r4,10100
8112a568:	1129f080 	call	81129f08 <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
8112a56c:	d0a01217 	ldw	r2,-32696(gp)
8112a570:	10800058 	cmpnei	r2,r2,1
8112a574:	1000031e 	bne	r2,zero,8112a584 <alt_main+0xf8>
8112a578:	01204534 	movhi	r4,33044
8112a57c:	2109e604 	addi	r4,r4,10136
8112a580:	1129f080 	call	81129f08 <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8112a584:	01a04534 	movhi	r6,33044
8112a588:	3189ee04 	addi	r6,r6,10168
8112a58c:	01604534 	movhi	r5,33044
8112a590:	2949f304 	addi	r5,r5,10188
8112a594:	01204534 	movhi	r4,33044
8112a598:	2109f304 	addi	r4,r4,10188
8112a59c:	113daa80 	call	8113daa8 <alt_io_redirect>
#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
8112a5a0:	d0a01217 	ldw	r2,-32696(gp)
8112a5a4:	10800058 	cmpnei	r2,r2,1
8112a5a8:	1000031e 	bne	r2,zero,8112a5b8 <alt_main+0x12c>
8112a5ac:	01204534 	movhi	r4,33044
8112a5b0:	2109f704 	addi	r4,r4,10204
8112a5b4:	1129f080 	call	81129f08 <alt_log_printf_proc>
  _do_ctors ();
8112a5b8:	113d3b80 	call	8113d3b8 <_do_ctors>
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
8112a5bc:	d0a01217 	ldw	r2,-32696(gp)
8112a5c0:	10800058 	cmpnei	r2,r2,1
8112a5c4:	1000031e 	bne	r2,zero,8112a5d4 <alt_main+0x148>
8112a5c8:	01204534 	movhi	r4,33044
8112a5cc:	210a0204 	addi	r4,r4,10248
8112a5d0:	1129f080 	call	81129f08 <alt_log_printf_proc>
  atexit (_do_dtors);
8112a5d4:	01204534 	movhi	r4,33044
8112a5d8:	21350804 	addi	r4,r4,-11232
8112a5dc:	113e25c0 	call	8113e25c <atexit>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
8112a5e0:	d0a01217 	ldw	r2,-32696(gp)
8112a5e4:	10800058 	cmpnei	r2,r2,1
8112a5e8:	1000031e 	bne	r2,zero,8112a5f8 <alt_main+0x16c>
8112a5ec:	01204534 	movhi	r4,33044
8112a5f0:	210a0a04 	addi	r4,r4,10280
8112a5f4:	1129f080 	call	81129f08 <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
8112a5f8:	d0a06f17 	ldw	r2,-32324(gp)
8112a5fc:	d0e07017 	ldw	r3,-32320(gp)
8112a600:	d1207117 	ldw	r4,-32316(gp)
8112a604:	200d883a 	mov	r6,r4
8112a608:	180b883a 	mov	r5,r3
8112a60c:	1009883a 	mov	r4,r2
8112a610:	110d5bc0 	call	8110d5bc <main>
8112a614:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
8112a618:	01000044 	movi	r4,1
8112a61c:	11293b80 	call	811293b8 <close>
  exit (result);
8112a620:	e13ffb17 	ldw	r4,-20(fp)
8112a624:	113e2700 	call	8113e270 <exit>

8112a628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112a628:	defffe04 	addi	sp,sp,-8
8112a62c:	de00012e 	bgeu	sp,et,8112a634 <alt_get_errno+0xc>
8112a630:	003b68fa 	trap	3
8112a634:	dfc00115 	stw	ra,4(sp)
8112a638:	df000015 	stw	fp,0(sp)
8112a63c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112a640:	d0a01017 	ldw	r2,-32704(gp)
8112a644:	10000326 	beq	r2,zero,8112a654 <alt_get_errno+0x2c>
8112a648:	d0a01017 	ldw	r2,-32704(gp)
8112a64c:	103ee83a 	callr	r2
8112a650:	00000106 	br	8112a658 <alt_get_errno+0x30>
8112a654:	d0a06204 	addi	r2,gp,-32376
}
8112a658:	e037883a 	mov	sp,fp
8112a65c:	dfc00117 	ldw	ra,4(sp)
8112a660:	df000017 	ldw	fp,0(sp)
8112a664:	dec00204 	addi	sp,sp,8
8112a668:	f800283a 	ret

8112a66c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
8112a66c:	defffd04 	addi	sp,sp,-12
8112a670:	de00012e 	bgeu	sp,et,8112a678 <alt_file_locked+0xc>
8112a674:	003b68fa 	trap	3
8112a678:	df000215 	stw	fp,8(sp)
8112a67c:	df000204 	addi	fp,sp,8
8112a680:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
8112a684:	e0bfff17 	ldw	r2,-4(fp)
8112a688:	10800217 	ldw	r2,8(r2)
8112a68c:	10d00034 	orhi	r3,r2,16384
8112a690:	e0bfff17 	ldw	r2,-4(fp)
8112a694:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8112a698:	e03ffe15 	stw	zero,-8(fp)
8112a69c:	00001d06 	br	8112a714 <alt_file_locked+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8112a6a0:	00a04534 	movhi	r2,33044
8112a6a4:	108d6f04 	addi	r2,r2,13756
8112a6a8:	e0fffe17 	ldw	r3,-8(fp)
8112a6ac:	18c00324 	muli	r3,r3,12
8112a6b0:	10c5883a 	add	r2,r2,r3
8112a6b4:	10c00017 	ldw	r3,0(r2)
8112a6b8:	e0bfff17 	ldw	r2,-4(fp)
8112a6bc:	10800017 	ldw	r2,0(r2)
8112a6c0:	1880111e 	bne	r3,r2,8112a708 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8112a6c4:	00a04534 	movhi	r2,33044
8112a6c8:	108d6f04 	addi	r2,r2,13756
8112a6cc:	e0fffe17 	ldw	r3,-8(fp)
8112a6d0:	18c00324 	muli	r3,r3,12
8112a6d4:	10c5883a 	add	r2,r2,r3
8112a6d8:	10800204 	addi	r2,r2,8
8112a6dc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
8112a6e0:	1000090e 	bge	r2,zero,8112a708 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
8112a6e4:	e0bffe17 	ldw	r2,-8(fp)
8112a6e8:	10c00324 	muli	r3,r2,12
8112a6ec:	00a04534 	movhi	r2,33044
8112a6f0:	108d6f04 	addi	r2,r2,13756
8112a6f4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
8112a6f8:	e0bfff17 	ldw	r2,-4(fp)
8112a6fc:	18800226 	beq	r3,r2,8112a708 <alt_file_locked+0x9c>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
8112a700:	00bffcc4 	movi	r2,-13
8112a704:	00000806 	br	8112a728 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
8112a708:	e0bffe17 	ldw	r2,-8(fp)
8112a70c:	10800044 	addi	r2,r2,1
8112a710:	e0bffe15 	stw	r2,-8(fp)
8112a714:	d0a00f17 	ldw	r2,-32708(gp)
8112a718:	1007883a 	mov	r3,r2
8112a71c:	e0bffe17 	ldw	r2,-8(fp)
8112a720:	18bfdf2e 	bgeu	r3,r2,8112a6a0 <__reset+0xfb10a6a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
8112a724:	0005883a 	mov	r2,zero
}
8112a728:	e037883a 	mov	sp,fp
8112a72c:	df000017 	ldw	fp,0(sp)
8112a730:	dec00104 	addi	sp,sp,4
8112a734:	f800283a 	ret

8112a738 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
8112a738:	defff604 	addi	sp,sp,-40
8112a73c:	de00012e 	bgeu	sp,et,8112a744 <open+0xc>
8112a740:	003b68fa 	trap	3
8112a744:	dfc00915 	stw	ra,36(sp)
8112a748:	df000815 	stw	fp,32(sp)
8112a74c:	df000804 	addi	fp,sp,32
8112a750:	e13ffd15 	stw	r4,-12(fp)
8112a754:	e17ffe15 	stw	r5,-8(fp)
8112a758:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
8112a75c:	00bfffc4 	movi	r2,-1
8112a760:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
8112a764:	00bffb44 	movi	r2,-19
8112a768:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
8112a76c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
8112a770:	d1600d04 	addi	r5,gp,-32716
8112a774:	e13ffd17 	ldw	r4,-12(fp)
8112a778:	113d4880 	call	8113d488 <alt_find_dev>
8112a77c:	e0bff815 	stw	r2,-32(fp)
8112a780:	e0bff817 	ldw	r2,-32(fp)
8112a784:	1000051e 	bne	r2,zero,8112a79c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
8112a788:	e13ffd17 	ldw	r4,-12(fp)
8112a78c:	113d5200 	call	8113d520 <alt_find_file>
8112a790:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
8112a794:	00800044 	movi	r2,1
8112a798:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8112a79c:	e0bff817 	ldw	r2,-32(fp)
8112a7a0:	10002926 	beq	r2,zero,8112a848 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
8112a7a4:	e13ff817 	ldw	r4,-32(fp)
8112a7a8:	113d6300 	call	8113d630 <alt_get_fd>
8112a7ac:	e0bff915 	stw	r2,-28(fp)
8112a7b0:	e0bff917 	ldw	r2,-28(fp)
8112a7b4:	1000030e 	bge	r2,zero,8112a7c4 <open+0x8c>
    {
      status = index;
8112a7b8:	e0bff917 	ldw	r2,-28(fp)
8112a7bc:	e0bffa15 	stw	r2,-24(fp)
8112a7c0:	00002306 	br	8112a850 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
8112a7c4:	e0bff917 	ldw	r2,-28(fp)
8112a7c8:	10c00324 	muli	r3,r2,12
8112a7cc:	00a04534 	movhi	r2,33044
8112a7d0:	108d6f04 	addi	r2,r2,13756
8112a7d4:	1885883a 	add	r2,r3,r2
8112a7d8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8112a7dc:	e0fffe17 	ldw	r3,-8(fp)
8112a7e0:	00900034 	movhi	r2,16384
8112a7e4:	10bfffc4 	addi	r2,r2,-1
8112a7e8:	1886703a 	and	r3,r3,r2
8112a7ec:	e0bffc17 	ldw	r2,-16(fp)
8112a7f0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
8112a7f4:	e0bffb17 	ldw	r2,-20(fp)
8112a7f8:	1000051e 	bne	r2,zero,8112a810 <open+0xd8>
8112a7fc:	e13ffc17 	ldw	r4,-16(fp)
8112a800:	112a66c0 	call	8112a66c <alt_file_locked>
8112a804:	e0bffa15 	stw	r2,-24(fp)
8112a808:	e0bffa17 	ldw	r2,-24(fp)
8112a80c:	10001016 	blt	r2,zero,8112a850 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
8112a810:	e0bff817 	ldw	r2,-32(fp)
8112a814:	10800317 	ldw	r2,12(r2)
8112a818:	10000826 	beq	r2,zero,8112a83c <open+0x104>
8112a81c:	e0bff817 	ldw	r2,-32(fp)
8112a820:	10800317 	ldw	r2,12(r2)
8112a824:	e1ffff17 	ldw	r7,-4(fp)
8112a828:	e1bffe17 	ldw	r6,-8(fp)
8112a82c:	e17ffd17 	ldw	r5,-12(fp)
8112a830:	e13ffc17 	ldw	r4,-16(fp)
8112a834:	103ee83a 	callr	r2
8112a838:	00000106 	br	8112a840 <open+0x108>
8112a83c:	0005883a 	mov	r2,zero
8112a840:	e0bffa15 	stw	r2,-24(fp)
8112a844:	00000206 	br	8112a850 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
8112a848:	00bffb44 	movi	r2,-19
8112a84c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
8112a850:	e0bffa17 	ldw	r2,-24(fp)
8112a854:	1000090e 	bge	r2,zero,8112a87c <open+0x144>
  {
    alt_release_fd (index);  
8112a858:	e13ff917 	ldw	r4,-28(fp)
8112a85c:	112a9dc0 	call	8112a9dc <alt_release_fd>
    ALT_ERRNO = -status;
8112a860:	112a6280 	call	8112a628 <alt_get_errno>
8112a864:	1007883a 	mov	r3,r2
8112a868:	e0bffa17 	ldw	r2,-24(fp)
8112a86c:	0085c83a 	sub	r2,zero,r2
8112a870:	18800015 	stw	r2,0(r3)
    return -1;
8112a874:	00bfffc4 	movi	r2,-1
8112a878:	00000106 	br	8112a880 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
8112a87c:	e0bff917 	ldw	r2,-28(fp)
}
8112a880:	e037883a 	mov	sp,fp
8112a884:	dfc00117 	ldw	ra,4(sp)
8112a888:	df000017 	ldw	fp,0(sp)
8112a88c:	dec00204 	addi	sp,sp,8
8112a890:	f800283a 	ret

8112a894 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112a894:	defffe04 	addi	sp,sp,-8
8112a898:	de00012e 	bgeu	sp,et,8112a8a0 <alt_get_errno+0xc>
8112a89c:	003b68fa 	trap	3
8112a8a0:	dfc00115 	stw	ra,4(sp)
8112a8a4:	df000015 	stw	fp,0(sp)
8112a8a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112a8ac:	d0a01017 	ldw	r2,-32704(gp)
8112a8b0:	10000326 	beq	r2,zero,8112a8c0 <alt_get_errno+0x2c>
8112a8b4:	d0a01017 	ldw	r2,-32704(gp)
8112a8b8:	103ee83a 	callr	r2
8112a8bc:	00000106 	br	8112a8c4 <alt_get_errno+0x30>
8112a8c0:	d0a06204 	addi	r2,gp,-32376
}
8112a8c4:	e037883a 	mov	sp,fp
8112a8c8:	dfc00117 	ldw	ra,4(sp)
8112a8cc:	df000017 	ldw	fp,0(sp)
8112a8d0:	dec00204 	addi	sp,sp,8
8112a8d4:	f800283a 	ret

8112a8d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
8112a8d8:	defff904 	addi	sp,sp,-28
8112a8dc:	de00012e 	bgeu	sp,et,8112a8e4 <read+0xc>
8112a8e0:	003b68fa 	trap	3
8112a8e4:	dfc00615 	stw	ra,24(sp)
8112a8e8:	df000515 	stw	fp,20(sp)
8112a8ec:	df000504 	addi	fp,sp,20
8112a8f0:	e13ffd15 	stw	r4,-12(fp)
8112a8f4:	e17ffe15 	stw	r5,-8(fp)
8112a8f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8112a8fc:	e0bffd17 	ldw	r2,-12(fp)
8112a900:	10000616 	blt	r2,zero,8112a91c <read+0x44>
8112a904:	e0bffd17 	ldw	r2,-12(fp)
8112a908:	10c00324 	muli	r3,r2,12
8112a90c:	00a04534 	movhi	r2,33044
8112a910:	108d6f04 	addi	r2,r2,13756
8112a914:	1885883a 	add	r2,r3,r2
8112a918:	00000106 	br	8112a920 <read+0x48>
8112a91c:	0005883a 	mov	r2,zero
8112a920:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8112a924:	e0bffb17 	ldw	r2,-20(fp)
8112a928:	10002226 	beq	r2,zero,8112a9b4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8112a92c:	e0bffb17 	ldw	r2,-20(fp)
8112a930:	10800217 	ldw	r2,8(r2)
8112a934:	108000cc 	andi	r2,r2,3
8112a938:	10800060 	cmpeqi	r2,r2,1
8112a93c:	1000181e 	bne	r2,zero,8112a9a0 <read+0xc8>
        (fd->dev->read))
8112a940:	e0bffb17 	ldw	r2,-20(fp)
8112a944:	10800017 	ldw	r2,0(r2)
8112a948:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8112a94c:	10001426 	beq	r2,zero,8112a9a0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
8112a950:	e0bffb17 	ldw	r2,-20(fp)
8112a954:	10800017 	ldw	r2,0(r2)
8112a958:	10800517 	ldw	r2,20(r2)
8112a95c:	e0ffff17 	ldw	r3,-4(fp)
8112a960:	180d883a 	mov	r6,r3
8112a964:	e17ffe17 	ldw	r5,-8(fp)
8112a968:	e13ffb17 	ldw	r4,-20(fp)
8112a96c:	103ee83a 	callr	r2
8112a970:	e0bffc15 	stw	r2,-16(fp)
8112a974:	e0bffc17 	ldw	r2,-16(fp)
8112a978:	1000070e 	bge	r2,zero,8112a998 <read+0xc0>
        {
          ALT_ERRNO = -rval;
8112a97c:	112a8940 	call	8112a894 <alt_get_errno>
8112a980:	1007883a 	mov	r3,r2
8112a984:	e0bffc17 	ldw	r2,-16(fp)
8112a988:	0085c83a 	sub	r2,zero,r2
8112a98c:	18800015 	stw	r2,0(r3)
          return -1;
8112a990:	00bfffc4 	movi	r2,-1
8112a994:	00000c06 	br	8112a9c8 <read+0xf0>
        }
        return rval;
8112a998:	e0bffc17 	ldw	r2,-16(fp)
8112a99c:	00000a06 	br	8112a9c8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
8112a9a0:	112a8940 	call	8112a894 <alt_get_errno>
8112a9a4:	1007883a 	mov	r3,r2
8112a9a8:	00800344 	movi	r2,13
8112a9ac:	18800015 	stw	r2,0(r3)
8112a9b0:	00000406 	br	8112a9c4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
8112a9b4:	112a8940 	call	8112a894 <alt_get_errno>
8112a9b8:	1007883a 	mov	r3,r2
8112a9bc:	00801444 	movi	r2,81
8112a9c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
8112a9c4:	00bfffc4 	movi	r2,-1
}
8112a9c8:	e037883a 	mov	sp,fp
8112a9cc:	dfc00117 	ldw	ra,4(sp)
8112a9d0:	df000017 	ldw	fp,0(sp)
8112a9d4:	dec00204 	addi	sp,sp,8
8112a9d8:	f800283a 	ret

8112a9dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
8112a9dc:	defffe04 	addi	sp,sp,-8
8112a9e0:	de00012e 	bgeu	sp,et,8112a9e8 <alt_release_fd+0xc>
8112a9e4:	003b68fa 	trap	3
8112a9e8:	df000115 	stw	fp,4(sp)
8112a9ec:	df000104 	addi	fp,sp,4
8112a9f0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
8112a9f4:	e0bfff17 	ldw	r2,-4(fp)
8112a9f8:	108000d0 	cmplti	r2,r2,3
8112a9fc:	10000d1e 	bne	r2,zero,8112aa34 <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
8112aa00:	00a04534 	movhi	r2,33044
8112aa04:	108d6f04 	addi	r2,r2,13756
8112aa08:	e0ffff17 	ldw	r3,-4(fp)
8112aa0c:	18c00324 	muli	r3,r3,12
8112aa10:	10c5883a 	add	r2,r2,r3
8112aa14:	10800204 	addi	r2,r2,8
8112aa18:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
8112aa1c:	00a04534 	movhi	r2,33044
8112aa20:	108d6f04 	addi	r2,r2,13756
8112aa24:	e0ffff17 	ldw	r3,-4(fp)
8112aa28:	18c00324 	muli	r3,r3,12
8112aa2c:	10c5883a 	add	r2,r2,r3
8112aa30:	10000015 	stw	zero,0(r2)
  }
}
8112aa34:	0001883a 	nop
8112aa38:	e037883a 	mov	sp,fp
8112aa3c:	df000017 	ldw	fp,0(sp)
8112aa40:	dec00104 	addi	sp,sp,4
8112aa44:	f800283a 	ret

8112aa48 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
8112aa48:	defff604 	addi	sp,sp,-40
8112aa4c:	de00012e 	bgeu	sp,et,8112aa54 <sbrk+0xc>
8112aa50:	003b68fa 	trap	3
8112aa54:	df000915 	stw	fp,36(sp)
8112aa58:	df000904 	addi	fp,sp,36
8112aa5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112aa60:	0005303a 	rdctl	r2,status
8112aa64:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112aa68:	e0fffe17 	ldw	r3,-8(fp)
8112aa6c:	00bfff84 	movi	r2,-2
8112aa70:	1884703a 	and	r2,r3,r2
8112aa74:	1001703a 	wrctl	status,r2
  
  return context;
8112aa78:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8112aa7c:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8112aa80:	d0a01317 	ldw	r2,-32692(gp)
8112aa84:	10c000c4 	addi	r3,r2,3
8112aa88:	00bfff04 	movi	r2,-4
8112aa8c:	1884703a 	and	r2,r3,r2
8112aa90:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
8112aa94:	d0e01317 	ldw	r3,-32692(gp)
8112aa98:	e0bfff17 	ldw	r2,-4(fp)
8112aa9c:	1887883a 	add	r3,r3,r2
8112aaa0:	00a04834 	movhi	r2,33056
8112aaa4:	10a80004 	addi	r2,r2,-24576
8112aaa8:	10c0062e 	bgeu	r2,r3,8112aac4 <sbrk+0x7c>
8112aaac:	e0bff817 	ldw	r2,-32(fp)
8112aab0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112aab4:	e0bff717 	ldw	r2,-36(fp)
8112aab8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8112aabc:	00bfffc4 	movi	r2,-1
8112aac0:	00001c06 	br	8112ab34 <sbrk+0xec>
  }
#endif

  prev_heap_end = heap_end; 
8112aac4:	d0a01317 	ldw	r2,-32692(gp)
8112aac8:	e0bffa15 	stw	r2,-24(fp)
  heap_end += incr; 
8112aacc:	d0e01317 	ldw	r3,-32692(gp)
8112aad0:	e0bfff17 	ldw	r2,-4(fp)
8112aad4:	1885883a 	add	r2,r3,r2
8112aad8:	d0a01315 	stw	r2,-32692(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
8112aadc:	c005883a 	mov	r2,et
8112aae0:	e0bff915 	stw	r2,-28(fp)

  return limit; 
8112aae4:	e0fff917 	ldw	r3,-28(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
8112aae8:	e0bffa17 	ldw	r2,-24(fp)
8112aaec:	18800c1e 	bne	r3,r2,8112ab20 <sbrk+0xd8>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
8112aaf0:	d805883a 	mov	r2,sp
8112aaf4:	e0bffb15 	stw	r2,-20(fp)

  return pointer; 
8112aaf8:	e0bffb17 	ldw	r2,-20(fp)
  {
    if (alt_stack_pointer() <= heap_end)
8112aafc:	d0e01317 	ldw	r3,-32692(gp)
8112ab00:	18800136 	bltu	r3,r2,8112ab08 <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
8112ab04:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
8112ab08:	d0a01317 	ldw	r2,-32692(gp)
8112ab0c:	e0bffc15 	stw	r2,-16(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
8112ab10:	e0bffc17 	ldw	r2,-16(fp)
8112ab14:	d0a00015 	stw	r2,-32768(gp)
  NIOS2_WRITE_ET(limit);
8112ab18:	e0bffc17 	ldw	r2,-16(fp)
8112ab1c:	1031883a 	mov	et,r2
8112ab20:	e0bff817 	ldw	r2,-32(fp)
8112ab24:	e0bffd15 	stw	r2,-12(fp)
8112ab28:	e0bffd17 	ldw	r2,-12(fp)
8112ab2c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8112ab30:	e0bffa17 	ldw	r2,-24(fp)
} 
8112ab34:	e037883a 	mov	sp,fp
8112ab38:	df000017 	ldw	fp,0(sp)
8112ab3c:	dec00104 	addi	sp,sp,4
8112ab40:	f800283a 	ret

8112ab44 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
8112ab44:	defffa04 	addi	sp,sp,-24
8112ab48:	de00012e 	bgeu	sp,et,8112ab50 <alt_alarm_stop+0xc>
8112ab4c:	003b68fa 	trap	3
8112ab50:	df000515 	stw	fp,20(sp)
8112ab54:	df000504 	addi	fp,sp,20
8112ab58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ab5c:	0005303a 	rdctl	r2,status
8112ab60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ab64:	e0fffc17 	ldw	r3,-16(fp)
8112ab68:	00bfff84 	movi	r2,-2
8112ab6c:	1884703a 	and	r2,r3,r2
8112ab70:	1001703a 	wrctl	status,r2
  
  return context;
8112ab74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
8112ab78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
8112ab7c:	e0bfff17 	ldw	r2,-4(fp)
8112ab80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
8112ab84:	e0bffd17 	ldw	r2,-12(fp)
8112ab88:	10800017 	ldw	r2,0(r2)
8112ab8c:	e0fffd17 	ldw	r3,-12(fp)
8112ab90:	18c00117 	ldw	r3,4(r3)
8112ab94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
8112ab98:	e0bffd17 	ldw	r2,-12(fp)
8112ab9c:	10800117 	ldw	r2,4(r2)
8112aba0:	e0fffd17 	ldw	r3,-12(fp)
8112aba4:	18c00017 	ldw	r3,0(r3)
8112aba8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
8112abac:	e0bffd17 	ldw	r2,-12(fp)
8112abb0:	e0fffd17 	ldw	r3,-12(fp)
8112abb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
8112abb8:	e0bffd17 	ldw	r2,-12(fp)
8112abbc:	e0fffd17 	ldw	r3,-12(fp)
8112abc0:	10c00015 	stw	r3,0(r2)
8112abc4:	e0bffb17 	ldw	r2,-20(fp)
8112abc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112abcc:	e0bffe17 	ldw	r2,-8(fp)
8112abd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
8112abd4:	0001883a 	nop
8112abd8:	e037883a 	mov	sp,fp
8112abdc:	df000017 	ldw	fp,0(sp)
8112abe0:	dec00104 	addi	sp,sp,4
8112abe4:	f800283a 	ret

8112abe8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8112abe8:	defffb04 	addi	sp,sp,-20
8112abec:	de00012e 	bgeu	sp,et,8112abf4 <alt_tick+0xc>
8112abf0:	003b68fa 	trap	3
8112abf4:	dfc00415 	stw	ra,16(sp)
8112abf8:	df000315 	stw	fp,12(sp)
8112abfc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8112ac00:	d0a01417 	ldw	r2,-32688(gp)
8112ac04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
8112ac08:	d0a07317 	ldw	r2,-32308(gp)
8112ac0c:	10800044 	addi	r2,r2,1
8112ac10:	d0a07315 	stw	r2,-32308(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8112ac14:	00002e06 	br	8112acd0 <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
8112ac18:	e0bffd17 	ldw	r2,-12(fp)
8112ac1c:	10800017 	ldw	r2,0(r2)
8112ac20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
8112ac24:	e0bffd17 	ldw	r2,-12(fp)
8112ac28:	10800403 	ldbu	r2,16(r2)
8112ac2c:	10803fcc 	andi	r2,r2,255
8112ac30:	10000426 	beq	r2,zero,8112ac44 <alt_tick+0x5c>
8112ac34:	d0a07317 	ldw	r2,-32308(gp)
8112ac38:	1000021e 	bne	r2,zero,8112ac44 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
8112ac3c:	e0bffd17 	ldw	r2,-12(fp)
8112ac40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
8112ac44:	e0bffd17 	ldw	r2,-12(fp)
8112ac48:	10800217 	ldw	r2,8(r2)
8112ac4c:	d0e07317 	ldw	r3,-32308(gp)
8112ac50:	18801d36 	bltu	r3,r2,8112acc8 <alt_tick+0xe0>
8112ac54:	e0bffd17 	ldw	r2,-12(fp)
8112ac58:	10800403 	ldbu	r2,16(r2)
8112ac5c:	10803fcc 	andi	r2,r2,255
8112ac60:	1000191e 	bne	r2,zero,8112acc8 <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
8112ac64:	e0bffd17 	ldw	r2,-12(fp)
8112ac68:	10800317 	ldw	r2,12(r2)
8112ac6c:	e0fffd17 	ldw	r3,-12(fp)
8112ac70:	18c00517 	ldw	r3,20(r3)
8112ac74:	1809883a 	mov	r4,r3
8112ac78:	103ee83a 	callr	r2
8112ac7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
8112ac80:	e0bfff17 	ldw	r2,-4(fp)
8112ac84:	1000031e 	bne	r2,zero,8112ac94 <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
8112ac88:	e13ffd17 	ldw	r4,-12(fp)
8112ac8c:	112ab440 	call	8112ab44 <alt_alarm_stop>
8112ac90:	00000d06 	br	8112acc8 <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
8112ac94:	e0bffd17 	ldw	r2,-12(fp)
8112ac98:	10c00217 	ldw	r3,8(r2)
8112ac9c:	e0bfff17 	ldw	r2,-4(fp)
8112aca0:	1887883a 	add	r3,r3,r2
8112aca4:	e0bffd17 	ldw	r2,-12(fp)
8112aca8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
8112acac:	e0bffd17 	ldw	r2,-12(fp)
8112acb0:	10c00217 	ldw	r3,8(r2)
8112acb4:	d0a07317 	ldw	r2,-32308(gp)
8112acb8:	1880032e 	bgeu	r3,r2,8112acc8 <alt_tick+0xe0>
        {
          alarm->rollover = 1;
8112acbc:	e0bffd17 	ldw	r2,-12(fp)
8112acc0:	00c00044 	movi	r3,1
8112acc4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
8112acc8:	e0bffe17 	ldw	r2,-8(fp)
8112accc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8112acd0:	e0fffd17 	ldw	r3,-12(fp)
8112acd4:	d0a01404 	addi	r2,gp,-32688
8112acd8:	18bfcf1e 	bne	r3,r2,8112ac18 <__reset+0xfb10ac18>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
8112acdc:	112bf9c0 	call	8112bf9c <OSTimeTick>
}
8112ace0:	0001883a 	nop
8112ace4:	e037883a 	mov	sp,fp
8112ace8:	dfc00117 	ldw	ra,4(sp)
8112acec:	df000017 	ldw	fp,0(sp)
8112acf0:	dec00204 	addi	sp,sp,8
8112acf4:	f800283a 	ret

8112acf8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
8112acf8:	defffb04 	addi	sp,sp,-20
8112acfc:	de00012e 	bgeu	sp,et,8112ad04 <usleep+0xc>
8112ad00:	003b68fa 	trap	3
8112ad04:	dfc00415 	stw	ra,16(sp)
8112ad08:	df000315 	stw	fp,12(sp)
8112ad0c:	df000304 	addi	fp,sp,12
8112ad10:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
8112ad14:	d0a07b03 	ldbu	r2,-32276(gp)
8112ad18:	10803fcc 	andi	r2,r2,255
8112ad1c:	1000031e 	bne	r2,zero,8112ad2c <usleep+0x34>
  {
    return alt_busy_sleep (us);
8112ad20:	e13fff17 	ldw	r4,-4(fp)
8112ad24:	11292440 	call	81129244 <alt_busy_sleep>
8112ad28:	00003d06 	br	8112ae20 <usleep+0x128>
8112ad2c:	d0a07217 	ldw	r2,-32312(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
8112ad30:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
8112ad34:	e0ffff17 	ldw	r3,-4(fp)
8112ad38:	0090c734 	movhi	r2,17180
8112ad3c:	10b7a0c4 	addi	r2,r2,-8573
8112ad40:	1888383a 	mulxuu	r4,r3,r2
8112ad44:	1885383a 	mul	r2,r3,r2
8112ad48:	1013883a 	mov	r9,r2
8112ad4c:	2015883a 	mov	r10,r4
8112ad50:	5006d4ba 	srli	r3,r10,18
8112ad54:	e0bffe17 	ldw	r2,-8(fp)
8112ad58:	1893383a 	mul	r9,r3,r2
8112ad5c:	e0ffff17 	ldw	r3,-4(fp)
8112ad60:	0090c734 	movhi	r2,17180
8112ad64:	10b7a0c4 	addi	r2,r2,-8573
8112ad68:	1888383a 	mulxuu	r4,r3,r2
8112ad6c:	1885383a 	mul	r2,r3,r2
8112ad70:	100f883a 	mov	r7,r2
8112ad74:	2011883a 	mov	r8,r4
8112ad78:	4004d4ba 	srli	r2,r8,18
8112ad7c:	010003f4 	movhi	r4,15
8112ad80:	21109004 	addi	r4,r4,16960
8112ad84:	1105383a 	mul	r2,r2,r4
8112ad88:	1885c83a 	sub	r2,r3,r2
8112ad8c:	e0fffe17 	ldw	r3,-8(fp)
8112ad90:	10c7383a 	mul	r3,r2,r3
8112ad94:	0090c734 	movhi	r2,17180
8112ad98:	10b7a0c4 	addi	r2,r2,-8573
8112ad9c:	1888383a 	mulxuu	r4,r3,r2
8112ada0:	1885383a 	mul	r2,r3,r2
8112ada4:	100b883a 	mov	r5,r2
8112ada8:	200d883a 	mov	r6,r4
8112adac:	3004d4ba 	srli	r2,r6,18
8112adb0:	4885883a 	add	r2,r9,r2
8112adb4:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
8112adb8:	00000706 	br	8112add8 <usleep+0xe0>
  {
    OSTimeDly(0xffff);
8112adbc:	013fffd4 	movui	r4,65535
8112adc0:	1133a0c0 	call	81133a0c <OSTimeDly>
    ticks -= 0xffff;
8112adc4:	e0fffd17 	ldw	r3,-12(fp)
8112adc8:	00bffff4 	movhi	r2,65535
8112adcc:	10800044 	addi	r2,r2,1
8112add0:	1885883a 	add	r2,r3,r2
8112add4:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
8112add8:	e0bffd17 	ldw	r2,-12(fp)
8112addc:	00ffffd4 	movui	r3,65535
8112ade0:	18bff636 	bltu	r3,r2,8112adbc <__reset+0xfb10adbc>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
8112ade4:	e0bffd17 	ldw	r2,-12(fp)
8112ade8:	10bfffcc 	andi	r2,r2,65535
8112adec:	1009883a 	mov	r4,r2
8112adf0:	1133a0c0 	call	81133a0c <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
8112adf4:	008003f4 	movhi	r2,15
8112adf8:	10909004 	addi	r2,r2,16960
8112adfc:	e0fffe17 	ldw	r3,-8(fp)
8112ae00:	10c7203a 	divu	r3,r2,r3
8112ae04:	e0bfff17 	ldw	r2,-4(fp)
8112ae08:	10c9203a 	divu	r4,r2,r3
8112ae0c:	20c7383a 	mul	r3,r4,r3
8112ae10:	10c5c83a 	sub	r2,r2,r3
8112ae14:	1009883a 	mov	r4,r2
8112ae18:	11292440 	call	81129244 <alt_busy_sleep>

  return 0;  
8112ae1c:	0005883a 	mov	r2,zero
}
8112ae20:	e037883a 	mov	sp,fp
8112ae24:	dfc00117 	ldw	ra,4(sp)
8112ae28:	df000017 	ldw	fp,0(sp)
8112ae2c:	dec00204 	addi	sp,sp,8
8112ae30:	f800283a 	ret

8112ae34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8112ae34:	defffe04 	addi	sp,sp,-8
8112ae38:	de00012e 	bgeu	sp,et,8112ae40 <alt_get_errno+0xc>
8112ae3c:	003b68fa 	trap	3
8112ae40:	dfc00115 	stw	ra,4(sp)
8112ae44:	df000015 	stw	fp,0(sp)
8112ae48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112ae4c:	d0a01017 	ldw	r2,-32704(gp)
8112ae50:	10000326 	beq	r2,zero,8112ae60 <alt_get_errno+0x2c>
8112ae54:	d0a01017 	ldw	r2,-32704(gp)
8112ae58:	103ee83a 	callr	r2
8112ae5c:	00000106 	br	8112ae64 <alt_get_errno+0x30>
8112ae60:	d0a06204 	addi	r2,gp,-32376
}
8112ae64:	e037883a 	mov	sp,fp
8112ae68:	dfc00117 	ldw	ra,4(sp)
8112ae6c:	df000017 	ldw	fp,0(sp)
8112ae70:	dec00204 	addi	sp,sp,8
8112ae74:	f800283a 	ret

8112ae78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8112ae78:	defff904 	addi	sp,sp,-28
8112ae7c:	de00012e 	bgeu	sp,et,8112ae84 <write+0xc>
8112ae80:	003b68fa 	trap	3
8112ae84:	dfc00615 	stw	ra,24(sp)
8112ae88:	df000515 	stw	fp,20(sp)
8112ae8c:	df000504 	addi	fp,sp,20
8112ae90:	e13ffd15 	stw	r4,-12(fp)
8112ae94:	e17ffe15 	stw	r5,-8(fp)
8112ae98:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8112ae9c:	e0bffd17 	ldw	r2,-12(fp)
8112aea0:	10000616 	blt	r2,zero,8112aebc <write+0x44>
8112aea4:	e0bffd17 	ldw	r2,-12(fp)
8112aea8:	10c00324 	muli	r3,r2,12
8112aeac:	00a04534 	movhi	r2,33044
8112aeb0:	108d6f04 	addi	r2,r2,13756
8112aeb4:	1885883a 	add	r2,r3,r2
8112aeb8:	00000106 	br	8112aec0 <write+0x48>
8112aebc:	0005883a 	mov	r2,zero
8112aec0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
8112aec4:	e0bffb17 	ldw	r2,-20(fp)
8112aec8:	10002426 	beq	r2,zero,8112af5c <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
8112aecc:	e0bffb17 	ldw	r2,-20(fp)
8112aed0:	10800217 	ldw	r2,8(r2)
8112aed4:	108000cc 	andi	r2,r2,3
8112aed8:	10001b26 	beq	r2,zero,8112af48 <write+0xd0>
8112aedc:	e0bffb17 	ldw	r2,-20(fp)
8112aee0:	10800017 	ldw	r2,0(r2)
8112aee4:	10800617 	ldw	r2,24(r2)
8112aee8:	10001726 	beq	r2,zero,8112af48 <write+0xd0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
8112aeec:	e17fff17 	ldw	r5,-4(fp)
8112aef0:	e13ffe17 	ldw	r4,-8(fp)
8112aef4:	112a1b80 	call	8112a1b8 <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
8112aef8:	e0bffb17 	ldw	r2,-20(fp)
8112aefc:	10800017 	ldw	r2,0(r2)
8112af00:	10800617 	ldw	r2,24(r2)
8112af04:	e0ffff17 	ldw	r3,-4(fp)
8112af08:	180d883a 	mov	r6,r3
8112af0c:	e17ffe17 	ldw	r5,-8(fp)
8112af10:	e13ffb17 	ldw	r4,-20(fp)
8112af14:	103ee83a 	callr	r2
8112af18:	e0bffc15 	stw	r2,-16(fp)
8112af1c:	e0bffc17 	ldw	r2,-16(fp)
8112af20:	1000070e 	bge	r2,zero,8112af40 <write+0xc8>
      {
        ALT_ERRNO = -rval;
8112af24:	112ae340 	call	8112ae34 <alt_get_errno>
8112af28:	1007883a 	mov	r3,r2
8112af2c:	e0bffc17 	ldw	r2,-16(fp)
8112af30:	0085c83a 	sub	r2,zero,r2
8112af34:	18800015 	stw	r2,0(r3)
        return -1;
8112af38:	00bfffc4 	movi	r2,-1
8112af3c:	00000c06 	br	8112af70 <write+0xf8>
      }
      return rval;
8112af40:	e0bffc17 	ldw	r2,-16(fp)
8112af44:	00000a06 	br	8112af70 <write+0xf8>
    }
    else
    {
      ALT_ERRNO = EACCES;
8112af48:	112ae340 	call	8112ae34 <alt_get_errno>
8112af4c:	1007883a 	mov	r3,r2
8112af50:	00800344 	movi	r2,13
8112af54:	18800015 	stw	r2,0(r3)
8112af58:	00000406 	br	8112af6c <write+0xf4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8112af5c:	112ae340 	call	8112ae34 <alt_get_errno>
8112af60:	1007883a 	mov	r3,r2
8112af64:	00801444 	movi	r2,81
8112af68:	18800015 	stw	r2,0(r3)
  }
  return -1;
8112af6c:	00bfffc4 	movi	r2,-1
}
8112af70:	e037883a 	mov	sp,fp
8112af74:	dfc00117 	ldw	ra,4(sp)
8112af78:	df000017 	ldw	fp,0(sp)
8112af7c:	dec00204 	addi	sp,sp,8
8112af80:	f800283a 	ret

8112af84 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
8112af84:	deffde04 	addi	sp,sp,-136
8112af88:	de00012e 	bgeu	sp,et,8112af90 <__env_lock+0xc>
8112af8c:	003b68fa 	trap	3
8112af90:	dfc02115 	stw	ra,132(sp)
8112af94:	df002015 	stw	fp,128(sp)
8112af98:	df002004 	addi	fp,sp,128
8112af9c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
8112afa0:	e0bfe104 	addi	r2,fp,-124
8112afa4:	100b883a 	mov	r5,r2
8112afa8:	01003fc4 	movi	r4,255
8112afac:	11338680 	call	81133868 <OSTaskQuery>
8112afb0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
8112afb4:	e0bffe83 	ldbu	r2,-6(fp)
8112afb8:	10803fcc 	andi	r2,r2,255
8112afbc:	10001e1e 	bne	r2,zero,8112b038 <__env_lock+0xb4>
    return;

  id = tcb.OSTCBPrio;
8112afc0:	e0bfed83 	ldbu	r2,-74(fp)
8112afc4:	10803fcc 	andi	r2,r2,255
8112afc8:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
8112afcc:	d0a07517 	ldw	r2,-32300(gp)
8112afd0:	e0fffc04 	addi	r3,fp,-16
8112afd4:	180b883a 	mov	r5,r3
8112afd8:	1009883a 	mov	r4,r2
8112afdc:	11320200 	call	81132020 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
8112afe0:	e0bffe03 	ldbu	r2,-8(fp)
8112afe4:	10803fcc 	andi	r2,r2,255
8112afe8:	10000726 	beq	r2,zero,8112b008 <__env_lock+0x84>
8112afec:	d0a01617 	ldw	r2,-32680(gp)
8112aff0:	e0ffe017 	ldw	r3,-128(fp)
8112aff4:	1880041e 	bne	r3,r2,8112b008 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
8112aff8:	d0a07417 	ldw	r2,-32304(gp)
8112affc:	10800044 	addi	r2,r2,1
8112b000:	d0a07415 	stw	r2,-32304(gp)
8112b004:	00000a06 	br	8112b030 <__env_lock+0xac>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
8112b008:	d0a07517 	ldw	r2,-32300(gp)
8112b00c:	e0fffe84 	addi	r3,fp,-6
8112b010:	180d883a 	mov	r6,r3
8112b014:	000b883a 	mov	r5,zero
8112b018:	1009883a 	mov	r4,r2
8112b01c:	1131b800 	call	81131b80 <OSSemPend>
    locks  = 1;
8112b020:	00800044 	movi	r2,1
8112b024:	d0a07415 	stw	r2,-32304(gp)
    lockid = id;
8112b028:	e0bfe017 	ldw	r2,-128(fp)
8112b02c:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
8112b030:	0001883a 	nop
8112b034:	00000106 	br	8112b03c <__env_lock+0xb8>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
8112b038:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
8112b03c:	e037883a 	mov	sp,fp
8112b040:	dfc00117 	ldw	ra,4(sp)
8112b044:	df000017 	ldw	fp,0(sp)
8112b048:	dec00204 	addi	sp,sp,8
8112b04c:	f800283a 	ret

8112b050 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
8112b050:	defffd04 	addi	sp,sp,-12
8112b054:	de00012e 	bgeu	sp,et,8112b05c <__env_unlock+0xc>
8112b058:	003b68fa 	trap	3
8112b05c:	dfc00215 	stw	ra,8(sp)
8112b060:	df000115 	stw	fp,4(sp)
8112b064:	df000104 	addi	fp,sp,4
8112b068:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
8112b06c:	d0a07417 	ldw	r2,-32304(gp)
8112b070:	10000b26 	beq	r2,zero,8112b0a0 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
8112b074:	d0a07417 	ldw	r2,-32304(gp)
8112b078:	10bfffc4 	addi	r2,r2,-1
8112b07c:	d0a07415 	stw	r2,-32304(gp)
8112b080:	d0a07417 	ldw	r2,-32304(gp)
8112b084:	1000071e 	bne	r2,zero,8112b0a4 <__env_unlock+0x54>
  {
    lockid = -1;
8112b088:	00bfffc4 	movi	r2,-1
8112b08c:	d0a01615 	stw	r2,-32680(gp)
    OSSemPost( alt_envsem );
8112b090:	d0a07517 	ldw	r2,-32300(gp)
8112b094:	1009883a 	mov	r4,r2
8112b098:	1131f080 	call	81131f08 <OSSemPost>
8112b09c:	00000106 	br	8112b0a4 <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
8112b0a0:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
8112b0a4:	e037883a 	mov	sp,fp
8112b0a8:	dfc00117 	ldw	ra,4(sp)
8112b0ac:	df000017 	ldw	fp,0(sp)
8112b0b0:	dec00204 	addi	sp,sp,8
8112b0b4:	f800283a 	ret

8112b0b8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
8112b0b8:	deffda04 	addi	sp,sp,-152
8112b0bc:	de00012e 	bgeu	sp,et,8112b0c4 <__malloc_lock+0xc>
8112b0c0:	003b68fa 	trap	3
8112b0c4:	dfc02515 	stw	ra,148(sp)
8112b0c8:	df002415 	stw	fp,144(sp)
8112b0cc:	df002404 	addi	fp,sp,144
8112b0d0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b0d4:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
8112b0d8:	d0a07b03 	ldbu	r2,-32276(gp)
8112b0dc:	10803fcc 	andi	r2,r2,255
8112b0e0:	10800060 	cmpeqi	r2,r2,1
8112b0e4:	10003626 	beq	r2,zero,8112b1c0 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
8112b0e8:	e0bfe104 	addi	r2,fp,-124
8112b0ec:	100b883a 	mov	r5,r2
8112b0f0:	01003fc4 	movi	r4,255
8112b0f4:	11338680 	call	81133868 <OSTaskQuery>
8112b0f8:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
8112b0fc:	e0bffe83 	ldbu	r2,-6(fp)
8112b100:	10803fcc 	andi	r2,r2,255
8112b104:	1000301e 	bne	r2,zero,8112b1c8 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
8112b108:	e0bfed83 	ldbu	r2,-74(fp)
8112b10c:	10803fcc 	andi	r2,r2,255
8112b110:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
8112b114:	d0a07717 	ldw	r2,-32292(gp)
8112b118:	e0fffc04 	addi	r3,fp,-16
8112b11c:	180b883a 	mov	r5,r3
8112b120:	1009883a 	mov	r4,r2
8112b124:	11320200 	call	81132020 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b128:	0005303a 	rdctl	r2,status
8112b12c:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b130:	e0ffe017 	ldw	r3,-128(fp)
8112b134:	00bfff84 	movi	r2,-2
8112b138:	1884703a 	and	r2,r3,r2
8112b13c:	1001703a 	wrctl	status,r2
  
  return context;
8112b140:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
8112b144:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
8112b148:	e0bffc0b 	ldhu	r2,-16(fp)
8112b14c:	10bfffcc 	andi	r2,r2,65535
8112b150:	10000b1e 	bne	r2,zero,8112b180 <__malloc_lock+0xc8>
8112b154:	d0a01717 	ldw	r2,-32676(gp)
8112b158:	e0ffdd17 	ldw	r3,-140(fp)
8112b15c:	1880081e 	bne	r3,r2,8112b180 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
8112b160:	d0a07617 	ldw	r2,-32296(gp)
8112b164:	10800044 	addi	r2,r2,1
8112b168:	d0a07615 	stw	r2,-32296(gp)
8112b16c:	e0bfdc17 	ldw	r2,-144(fp)
8112b170:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b174:	e0bfde17 	ldw	r2,-136(fp)
8112b178:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
8112b17c:	00000e06 	br	8112b1b8 <__malloc_lock+0x100>
8112b180:	e0bfdc17 	ldw	r2,-144(fp)
8112b184:	e0bfdf15 	stw	r2,-132(fp)
8112b188:	e0bfdf17 	ldw	r2,-132(fp)
8112b18c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
8112b190:	d0a07717 	ldw	r2,-32292(gp)
8112b194:	e0fffe84 	addi	r3,fp,-6
8112b198:	180d883a 	mov	r6,r3
8112b19c:	000b883a 	mov	r5,zero
8112b1a0:	1009883a 	mov	r4,r2
8112b1a4:	1131b800 	call	81131b80 <OSSemPend>
    locks  = 1;
8112b1a8:	00800044 	movi	r2,1
8112b1ac:	d0a07615 	stw	r2,-32296(gp)
    lockid = id;
8112b1b0:	e0bfdd17 	ldw	r2,-140(fp)
8112b1b4:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
8112b1b8:	0001883a 	nop
8112b1bc:	00000306 	br	8112b1cc <__malloc_lock+0x114>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
8112b1c0:	0001883a 	nop
8112b1c4:	00000106 	br	8112b1cc <__malloc_lock+0x114>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
8112b1c8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
8112b1cc:	e037883a 	mov	sp,fp
8112b1d0:	dfc00117 	ldw	ra,4(sp)
8112b1d4:	df000017 	ldw	fp,0(sp)
8112b1d8:	dec00204 	addi	sp,sp,8
8112b1dc:	f800283a 	ret

8112b1e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
8112b1e0:	defff804 	addi	sp,sp,-32
8112b1e4:	de00012e 	bgeu	sp,et,8112b1ec <__malloc_unlock+0xc>
8112b1e8:	003b68fa 	trap	3
8112b1ec:	dfc00715 	stw	ra,28(sp)
8112b1f0:	df000615 	stw	fp,24(sp)
8112b1f4:	df000604 	addi	fp,sp,24
8112b1f8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b1fc:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
8112b200:	d0a07b03 	ldbu	r2,-32276(gp)
8112b204:	10803fcc 	andi	r2,r2,255
8112b208:	10800060 	cmpeqi	r2,r2,1
8112b20c:	10002326 	beq	r2,zero,8112b29c <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b210:	0005303a 	rdctl	r2,status
8112b214:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b218:	e0fffe17 	ldw	r3,-8(fp)
8112b21c:	00bfff84 	movi	r2,-2
8112b220:	1884703a 	and	r2,r3,r2
8112b224:	1001703a 	wrctl	status,r2
  
  return context;
8112b228:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
8112b22c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
8112b230:	d0a07617 	ldw	r2,-32296(gp)
8112b234:	1000051e 	bne	r2,zero,8112b24c <__malloc_unlock+0x6c>
8112b238:	e0bffa17 	ldw	r2,-24(fp)
8112b23c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b240:	e0bffb17 	ldw	r2,-20(fp)
8112b244:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
8112b248:	00001506 	br	8112b2a0 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
8112b24c:	d0a07617 	ldw	r2,-32296(gp)
8112b250:	10bfffc4 	addi	r2,r2,-1
8112b254:	d0a07615 	stw	r2,-32296(gp)
8112b258:	d0a07617 	ldw	r2,-32296(gp)
8112b25c:	10000a1e 	bne	r2,zero,8112b288 <__malloc_unlock+0xa8>
  {
    lockid = -1;
8112b260:	00bfffc4 	movi	r2,-1
8112b264:	d0a01715 	stw	r2,-32676(gp)
8112b268:	e0bffa17 	ldw	r2,-24(fp)
8112b26c:	e0bffc15 	stw	r2,-16(fp)
8112b270:	e0bffc17 	ldw	r2,-16(fp)
8112b274:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
8112b278:	d0a07717 	ldw	r2,-32292(gp)
8112b27c:	1009883a 	mov	r4,r2
8112b280:	1131f080 	call	81131f08 <OSSemPost>
8112b284:	00000606 	br	8112b2a0 <__malloc_unlock+0xc0>
8112b288:	e0bffa17 	ldw	r2,-24(fp)
8112b28c:	e0bffd15 	stw	r2,-12(fp)
8112b290:	e0bffd17 	ldw	r2,-12(fp)
8112b294:	1001703a 	wrctl	status,r2
8112b298:	00000106 	br	8112b2a0 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
8112b29c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
8112b2a0:	e037883a 	mov	sp,fp
8112b2a4:	dfc00117 	ldw	ra,4(sp)
8112b2a8:	df000017 	ldw	fp,0(sp)
8112b2ac:	dec00204 	addi	sp,sp,8
8112b2b0:	f800283a 	ret

8112b2b4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
8112b2b4:	defff704 	addi	sp,sp,-36
8112b2b8:	de00012e 	bgeu	sp,et,8112b2c0 <OSEventNameGet+0xc>
8112b2bc:	003b68fa 	trap	3
8112b2c0:	dfc00815 	stw	ra,32(sp)
8112b2c4:	df000715 	stw	fp,28(sp)
8112b2c8:	df000704 	addi	fp,sp,28
8112b2cc:	e13ffd15 	stw	r4,-12(fp)
8112b2d0:	e17ffe15 	stw	r5,-8(fp)
8112b2d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b2d8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112b2dc:	e0bfff17 	ldw	r2,-4(fp)
8112b2e0:	1000021e 	bne	r2,zero,8112b2ec <OSEventNameGet+0x38>
        return (0);
8112b2e4:	0005883a 	mov	r2,zero
8112b2e8:	00003706 	br	8112b3c8 <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
8112b2ec:	e0bffd17 	ldw	r2,-12(fp)
8112b2f0:	1000051e 	bne	r2,zero,8112b308 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
8112b2f4:	e0bfff17 	ldw	r2,-4(fp)
8112b2f8:	00c00104 	movi	r3,4
8112b2fc:	10c00005 	stb	r3,0(r2)
        return (0);
8112b300:	0005883a 	mov	r2,zero
8112b304:	00003006 	br	8112b3c8 <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112b308:	e0bffe17 	ldw	r2,-8(fp)
8112b30c:	1000051e 	bne	r2,zero,8112b324 <OSEventNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112b310:	e0bfff17 	ldw	r2,-4(fp)
8112b314:	00c00304 	movi	r3,12
8112b318:	10c00005 	stb	r3,0(r2)
        return (0);
8112b31c:	0005883a 	mov	r2,zero
8112b320:	00002906 	br	8112b3c8 <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112b324:	d0a08b03 	ldbu	r2,-32212(gp)
8112b328:	10803fcc 	andi	r2,r2,255
8112b32c:	10000526 	beq	r2,zero,8112b344 <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
8112b330:	e0bfff17 	ldw	r2,-4(fp)
8112b334:	00c00444 	movi	r3,17
8112b338:	10c00005 	stb	r3,0(r2)
        return (0);
8112b33c:	0005883a 	mov	r2,zero
8112b340:	00002106 	br	8112b3c8 <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
8112b344:	e0bffd17 	ldw	r2,-12(fp)
8112b348:	10800003 	ldbu	r2,0(r2)
8112b34c:	10803fcc 	andi	r2,r2,255
8112b350:	10bfffc4 	addi	r2,r2,-1
8112b354:	10800128 	cmpgeui	r2,r2,4
8112b358:	10000526 	beq	r2,zero,8112b370 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
8112b35c:	e0bfff17 	ldw	r2,-4(fp)
8112b360:	00c00044 	movi	r3,1
8112b364:	10c00005 	stb	r3,0(r2)
             return (0);
8112b368:	0005883a 	mov	r2,zero
8112b36c:	00001606 	br	8112b3c8 <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
8112b370:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b374:	0005303a 	rdctl	r2,status
8112b378:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b37c:	e0fffb17 	ldw	r3,-20(fp)
8112b380:	00bfff84 	movi	r2,-2
8112b384:	1884703a 	and	r2,r3,r2
8112b388:	1001703a 	wrctl	status,r2
  
  return context;
8112b38c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
8112b390:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
8112b394:	e0bffd17 	ldw	r2,-12(fp)
8112b398:	10800444 	addi	r2,r2,17
8112b39c:	100b883a 	mov	r5,r2
8112b3a0:	e13ffe17 	ldw	r4,-8(fp)
8112b3a4:	112ce240 	call	8112ce24 <OS_StrCopy>
8112b3a8:	e0bffa05 	stb	r2,-24(fp)
8112b3ac:	e0bff917 	ldw	r2,-28(fp)
8112b3b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b3b4:	e0bffc17 	ldw	r2,-16(fp)
8112b3b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112b3bc:	e0bfff17 	ldw	r2,-4(fp)
8112b3c0:	10000005 	stb	zero,0(r2)
    return (len);
8112b3c4:	e0bffa03 	ldbu	r2,-24(fp)
}
8112b3c8:	e037883a 	mov	sp,fp
8112b3cc:	dfc00117 	ldw	ra,4(sp)
8112b3d0:	df000017 	ldw	fp,0(sp)
8112b3d4:	dec00204 	addi	sp,sp,8
8112b3d8:	f800283a 	ret

8112b3dc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
8112b3dc:	defff604 	addi	sp,sp,-40
8112b3e0:	de00012e 	bgeu	sp,et,8112b3e8 <OSEventNameSet+0xc>
8112b3e4:	003b68fa 	trap	3
8112b3e8:	dfc00915 	stw	ra,36(sp)
8112b3ec:	df000815 	stw	fp,32(sp)
8112b3f0:	df000804 	addi	fp,sp,32
8112b3f4:	e13ffd15 	stw	r4,-12(fp)
8112b3f8:	e17ffe15 	stw	r5,-8(fp)
8112b3fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b400:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112b404:	e0bfff17 	ldw	r2,-4(fp)
8112b408:	10004026 	beq	r2,zero,8112b50c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
8112b40c:	e0bffd17 	ldw	r2,-12(fp)
8112b410:	1000041e 	bne	r2,zero,8112b424 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
8112b414:	e0bfff17 	ldw	r2,-4(fp)
8112b418:	00c00104 	movi	r3,4
8112b41c:	10c00005 	stb	r3,0(r2)
        return;
8112b420:	00003b06 	br	8112b510 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112b424:	e0bffe17 	ldw	r2,-8(fp)
8112b428:	1000041e 	bne	r2,zero,8112b43c <OSEventNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112b42c:	e0bfff17 	ldw	r2,-4(fp)
8112b430:	00c00304 	movi	r3,12
8112b434:	10c00005 	stb	r3,0(r2)
        return;
8112b438:	00003506 	br	8112b510 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112b43c:	d0a08b03 	ldbu	r2,-32212(gp)
8112b440:	10803fcc 	andi	r2,r2,255
8112b444:	10000426 	beq	r2,zero,8112b458 <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112b448:	e0bfff17 	ldw	r2,-4(fp)
8112b44c:	00c00484 	movi	r3,18
8112b450:	10c00005 	stb	r3,0(r2)
        return;
8112b454:	00002e06 	br	8112b510 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
8112b458:	e0bffd17 	ldw	r2,-12(fp)
8112b45c:	10800003 	ldbu	r2,0(r2)
8112b460:	10803fcc 	andi	r2,r2,255
8112b464:	10bfffc4 	addi	r2,r2,-1
8112b468:	10800128 	cmpgeui	r2,r2,4
8112b46c:	10000426 	beq	r2,zero,8112b480 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
8112b470:	e0bfff17 	ldw	r2,-4(fp)
8112b474:	00c00044 	movi	r3,1
8112b478:	10c00005 	stb	r3,0(r2)
             return;
8112b47c:	00002406 	br	8112b510 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
8112b480:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b484:	0005303a 	rdctl	r2,status
8112b488:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b48c:	e0fffc17 	ldw	r3,-16(fp)
8112b490:	00bfff84 	movi	r2,-2
8112b494:	1884703a 	and	r2,r3,r2
8112b498:	1001703a 	wrctl	status,r2
  
  return context;
8112b49c:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
8112b4a0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
8112b4a4:	e13ffe17 	ldw	r4,-8(fp)
8112b4a8:	112cea00 	call	8112cea0 <OS_StrLen>
8112b4ac:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
8112b4b0:	e0bffa03 	ldbu	r2,-24(fp)
8112b4b4:	10800830 	cmpltui	r2,r2,32
8112b4b8:	1000081e 	bne	r2,zero,8112b4dc <OSEventNameSet+0x100>
8112b4bc:	e0bff817 	ldw	r2,-32(fp)
8112b4c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b4c4:	e0bff917 	ldw	r2,-28(fp)
8112b4c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
8112b4cc:	e0bfff17 	ldw	r2,-4(fp)
8112b4d0:	00c002c4 	movi	r3,11
8112b4d4:	10c00005 	stb	r3,0(r2)
        return;
8112b4d8:	00000d06 	br	8112b510 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
8112b4dc:	e0bffd17 	ldw	r2,-12(fp)
8112b4e0:	10800444 	addi	r2,r2,17
8112b4e4:	e17ffe17 	ldw	r5,-8(fp)
8112b4e8:	1009883a 	mov	r4,r2
8112b4ec:	112ce240 	call	8112ce24 <OS_StrCopy>
8112b4f0:	e0bff817 	ldw	r2,-32(fp)
8112b4f4:	e0bffb15 	stw	r2,-20(fp)
8112b4f8:	e0bffb17 	ldw	r2,-20(fp)
8112b4fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112b500:	e0bfff17 	ldw	r2,-4(fp)
8112b504:	10000005 	stb	zero,0(r2)
8112b508:	00000106 	br	8112b510 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112b50c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112b510:	e037883a 	mov	sp,fp
8112b514:	dfc00117 	ldw	ra,4(sp)
8112b518:	df000017 	ldw	fp,0(sp)
8112b51c:	dec00204 	addi	sp,sp,8
8112b520:	f800283a 	ret

8112b524 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
8112b524:	deffed04 	addi	sp,sp,-76
8112b528:	de00012e 	bgeu	sp,et,8112b530 <OSEventPendMulti+0xc>
8112b52c:	003b68fa 	trap	3
8112b530:	dfc01215 	stw	ra,72(sp)
8112b534:	df001115 	stw	fp,68(sp)
8112b538:	df001104 	addi	fp,sp,68
8112b53c:	e13ffc15 	stw	r4,-16(fp)
8112b540:	e17ffd15 	stw	r5,-12(fp)
8112b544:	e1bffe15 	stw	r6,-8(fp)
8112b548:	3805883a 	mov	r2,r7
8112b54c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
8112b550:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
8112b554:	e0800217 	ldw	r2,8(fp)
8112b558:	1000021e 	bne	r2,zero,8112b564 <OSEventPendMulti+0x40>
        return (0);
8112b55c:	0005883a 	mov	r2,zero
8112b560:	00017106 	br	8112bb28 <OSEventPendMulti+0x604>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
8112b564:	e0bffc17 	ldw	r2,-16(fp)
8112b568:	1000051e 	bne	r2,zero,8112b580 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEVENT_NULL;
8112b56c:	e0800217 	ldw	r2,8(fp)
8112b570:	00c00104 	movi	r3,4
8112b574:	10c00005 	stb	r3,0(r2)
        return (0);
8112b578:	0005883a 	mov	r2,zero
8112b57c:	00016a06 	br	8112bb28 <OSEventPendMulti+0x604>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
8112b580:	e0bffd17 	ldw	r2,-12(fp)
8112b584:	1000051e 	bne	r2,zero,8112b59c <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
8112b588:	e0800217 	ldw	r2,8(fp)
8112b58c:	00c00104 	movi	r3,4
8112b590:	10c00005 	stb	r3,0(r2)
        return (0);
8112b594:	0005883a 	mov	r2,zero
8112b598:	00016306 	br	8112bb28 <OSEventPendMulti+0x604>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
8112b59c:	e0bffe17 	ldw	r2,-8(fp)
8112b5a0:	1000051e 	bne	r2,zero,8112b5b8 <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEVENT_NULL;
8112b5a4:	e0800217 	ldw	r2,8(fp)
8112b5a8:	00c00104 	movi	r3,4
8112b5ac:	10c00005 	stb	r3,0(r2)
        return (0);
8112b5b0:	0005883a 	mov	r2,zero
8112b5b4:	00015c06 	br	8112bb28 <OSEventPendMulti+0x604>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
8112b5b8:	e0bffd17 	ldw	r2,-12(fp)
8112b5bc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
8112b5c0:	e0bffc17 	ldw	r2,-16(fp)
8112b5c4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
8112b5c8:	e0bfef17 	ldw	r2,-68(fp)
8112b5cc:	10800017 	ldw	r2,0(r2)
8112b5d0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
8112b5d4:	00001906 	br	8112b63c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
8112b5d8:	e0bff017 	ldw	r2,-64(fp)
8112b5dc:	10800003 	ldbu	r2,0(r2)
8112b5e0:	10803fcc 	andi	r2,r2,255
8112b5e4:	10c000a0 	cmpeqi	r3,r2,2
8112b5e8:	1800091e 	bne	r3,zero,8112b610 <OSEventPendMulti+0xec>
8112b5ec:	10c000e0 	cmpeqi	r3,r2,3
8112b5f0:	1800091e 	bne	r3,zero,8112b618 <OSEventPendMulti+0xf4>
8112b5f4:	10800060 	cmpeqi	r2,r2,1
8112b5f8:	1000091e 	bne	r2,zero,8112b620 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
8112b5fc:	e0800217 	ldw	r2,8(fp)
8112b600:	00c00044 	movi	r3,1
8112b604:	10c00005 	stb	r3,0(r2)
                 return (0);
8112b608:	0005883a 	mov	r2,zero
8112b60c:	00014606 	br	8112bb28 <OSEventPendMulti+0x604>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
8112b610:	0001883a 	nop
8112b614:	00000306 	br	8112b624 <OSEventPendMulti+0x100>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
8112b618:	0001883a 	nop
8112b61c:	00000106 	br	8112b624 <OSEventPendMulti+0x100>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
8112b620:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
8112b624:	e0bfef17 	ldw	r2,-68(fp)
8112b628:	10800104 	addi	r2,r2,4
8112b62c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
8112b630:	e0bfef17 	ldw	r2,-68(fp)
8112b634:	10800017 	ldw	r2,0(r2)
8112b638:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
8112b63c:	e0bff017 	ldw	r2,-64(fp)
8112b640:	103fe51e 	bne	r2,zero,8112b5d8 <__reset+0xfb10b5d8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
8112b644:	d0a08b03 	ldbu	r2,-32212(gp)
8112b648:	10803fcc 	andi	r2,r2,255
8112b64c:	10000526 	beq	r2,zero,8112b664 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
8112b650:	e0800217 	ldw	r2,8(fp)
8112b654:	00c00084 	movi	r3,2
8112b658:	10c00005 	stb	r3,0(r2)
        return (0);
8112b65c:	0005883a 	mov	r2,zero
8112b660:	00013106 	br	8112bb28 <OSEventPendMulti+0x604>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
8112b664:	d0a07903 	ldbu	r2,-32284(gp)
8112b668:	10803fcc 	andi	r2,r2,255
8112b66c:	10000526 	beq	r2,zero,8112b684 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
8112b670:	e0800217 	ldw	r2,8(fp)
8112b674:	00c00344 	movi	r3,13
8112b678:	10c00005 	stb	r3,0(r2)
        return (0);
8112b67c:	0005883a 	mov	r2,zero
8112b680:	00012906 	br	8112bb28 <OSEventPendMulti+0x604>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b684:	0005303a 	rdctl	r2,status
8112b688:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b68c:	e0fffb17 	ldw	r3,-20(fp)
8112b690:	00bfff84 	movi	r2,-2
8112b694:	1884703a 	and	r2,r3,r2
8112b698:	1001703a 	wrctl	status,r2
  
  return context;
8112b69c:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
8112b6a0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
8112b6a4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
8112b6a8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
8112b6ac:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
8112b6b0:	e0bffc17 	ldw	r2,-16(fp)
8112b6b4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
8112b6b8:	e0bfef17 	ldw	r2,-68(fp)
8112b6bc:	10800017 	ldw	r2,0(r2)
8112b6c0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
8112b6c4:	00008106 	br	8112b8cc <OSEventPendMulti+0x3a8>
        switch (pevent->OSEventType) {
8112b6c8:	e0bff017 	ldw	r2,-64(fp)
8112b6cc:	10800003 	ldbu	r2,0(r2)
8112b6d0:	10803fcc 	andi	r2,r2,255
8112b6d4:	10c000a0 	cmpeqi	r3,r2,2
8112b6d8:	18003c1e 	bne	r3,zero,8112b7cc <OSEventPendMulti+0x2a8>
8112b6dc:	10c000e0 	cmpeqi	r3,r2,3
8112b6e0:	1800031e 	bne	r3,zero,8112b6f0 <OSEventPendMulti+0x1cc>
8112b6e4:	10800060 	cmpeqi	r2,r2,1
8112b6e8:	10001e1e 	bne	r2,zero,8112b764 <OSEventPendMulti+0x240>
8112b6ec:	00006606 	br	8112b888 <OSEventPendMulti+0x364>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
8112b6f0:	e0bff017 	ldw	r2,-64(fp)
8112b6f4:	1080020b 	ldhu	r2,8(r2)
8112b6f8:	10bfffcc 	andi	r2,r2,65535
8112b6fc:	10001526 	beq	r2,zero,8112b754 <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
8112b700:	e0bff017 	ldw	r2,-64(fp)
8112b704:	1080020b 	ldhu	r2,8(r2)
8112b708:	10bfffc4 	addi	r2,r2,-1
8112b70c:	1007883a 	mov	r3,r2
8112b710:	e0bff017 	ldw	r2,-64(fp)
8112b714:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
8112b718:	e0bffd17 	ldw	r2,-12(fp)
8112b71c:	10c00104 	addi	r3,r2,4
8112b720:	e0fffd15 	stw	r3,-12(fp)
8112b724:	e0fff017 	ldw	r3,-64(fp)
8112b728:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
8112b72c:	00800044 	movi	r2,1
8112b730:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
8112b734:	e0bffe17 	ldw	r2,-8(fp)
8112b738:	10c00104 	addi	r3,r2,4
8112b73c:	e0fffe15 	stw	r3,-8(fp)
8112b740:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
8112b744:	e0bff18b 	ldhu	r2,-58(fp)
8112b748:	10800044 	addi	r2,r2,1
8112b74c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
8112b750:	00005806 	br	8112b8b4 <OSEventPendMulti+0x390>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
8112b754:	e0bff203 	ldbu	r2,-56(fp)
8112b758:	10800054 	ori	r2,r2,1
8112b75c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
8112b760:	00005406 	br	8112b8b4 <OSEventPendMulti+0x390>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
8112b764:	e0bff017 	ldw	r2,-64(fp)
8112b768:	10800117 	ldw	r2,4(r2)
8112b76c:	10001326 	beq	r2,zero,8112b7bc <OSEventPendMulti+0x298>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
8112b770:	e0bffe17 	ldw	r2,-8(fp)
8112b774:	10c00104 	addi	r3,r2,4
8112b778:	e0fffe15 	stw	r3,-8(fp)
8112b77c:	e0fff017 	ldw	r3,-64(fp)
8112b780:	18c00117 	ldw	r3,4(r3)
8112b784:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
8112b788:	e0bff017 	ldw	r2,-64(fp)
8112b78c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
8112b790:	e0bffd17 	ldw	r2,-12(fp)
8112b794:	10c00104 	addi	r3,r2,4
8112b798:	e0fffd15 	stw	r3,-12(fp)
8112b79c:	e0fff017 	ldw	r3,-64(fp)
8112b7a0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
8112b7a4:	00800044 	movi	r2,1
8112b7a8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
8112b7ac:	e0bff18b 	ldhu	r2,-58(fp)
8112b7b0:	10800044 	addi	r2,r2,1
8112b7b4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
8112b7b8:	00003e06 	br	8112b8b4 <OSEventPendMulti+0x390>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
8112b7bc:	e0bff203 	ldbu	r2,-56(fp)
8112b7c0:	10800094 	ori	r2,r2,2
8112b7c4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
8112b7c8:	00003a06 	br	8112b8b4 <OSEventPendMulti+0x390>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
8112b7cc:	e0bff017 	ldw	r2,-64(fp)
8112b7d0:	10800117 	ldw	r2,4(r2)
8112b7d4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
8112b7d8:	e0bff517 	ldw	r2,-44(fp)
8112b7dc:	1080058b 	ldhu	r2,22(r2)
8112b7e0:	10bfffcc 	andi	r2,r2,65535
8112b7e4:	10002426 	beq	r2,zero,8112b878 <OSEventPendMulti+0x354>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
8112b7e8:	e0bffe17 	ldw	r2,-8(fp)
8112b7ec:	10c00104 	addi	r3,r2,4
8112b7f0:	e0fffe15 	stw	r3,-8(fp)
8112b7f4:	e0fff517 	ldw	r3,-44(fp)
8112b7f8:	18c00417 	ldw	r3,16(r3)
8112b7fc:	19400104 	addi	r5,r3,4
8112b800:	e13ff517 	ldw	r4,-44(fp)
8112b804:	21400415 	stw	r5,16(r4)
8112b808:	18c00017 	ldw	r3,0(r3)
8112b80c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
8112b810:	e0bff517 	ldw	r2,-44(fp)
8112b814:	10c00417 	ldw	r3,16(r2)
8112b818:	e0bff517 	ldw	r2,-44(fp)
8112b81c:	10800217 	ldw	r2,8(r2)
8112b820:	1880041e 	bne	r3,r2,8112b834 <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
8112b824:	e0bff517 	ldw	r2,-44(fp)
8112b828:	10c00117 	ldw	r3,4(r2)
8112b82c:	e0bff517 	ldw	r2,-44(fp)
8112b830:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
8112b834:	e0bff517 	ldw	r2,-44(fp)
8112b838:	1080058b 	ldhu	r2,22(r2)
8112b83c:	10bfffc4 	addi	r2,r2,-1
8112b840:	1007883a 	mov	r3,r2
8112b844:	e0bff517 	ldw	r2,-44(fp)
8112b848:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
8112b84c:	e0bffd17 	ldw	r2,-12(fp)
8112b850:	10c00104 	addi	r3,r2,4
8112b854:	e0fffd15 	stw	r3,-12(fp)
8112b858:	e0fff017 	ldw	r3,-64(fp)
8112b85c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
8112b860:	00800044 	movi	r2,1
8112b864:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
8112b868:	e0bff18b 	ldhu	r2,-58(fp)
8112b86c:	10800044 	addi	r2,r2,1
8112b870:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
8112b874:	00000f06 	br	8112b8b4 <OSEventPendMulti+0x390>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
8112b878:	e0bff203 	ldbu	r2,-56(fp)
8112b87c:	10800114 	ori	r2,r2,4
8112b880:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
8112b884:	00000b06 	br	8112b8b4 <OSEventPendMulti+0x390>
8112b888:	e0bff317 	ldw	r2,-52(fp)
8112b88c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b890:	e0bff417 	ldw	r2,-48(fp)
8112b894:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
8112b898:	e0bffd17 	ldw	r2,-12(fp)
8112b89c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
8112b8a0:	e0800217 	ldw	r2,8(fp)
8112b8a4:	00c00044 	movi	r3,1
8112b8a8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
8112b8ac:	e0bff18b 	ldhu	r2,-58(fp)
8112b8b0:	00009d06 	br	8112bb28 <OSEventPendMulti+0x604>
        }
        pevents++;
8112b8b4:	e0bfef17 	ldw	r2,-68(fp)
8112b8b8:	10800104 	addi	r2,r2,4
8112b8bc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
8112b8c0:	e0bfef17 	ldw	r2,-68(fp)
8112b8c4:	10800017 	ldw	r2,0(r2)
8112b8c8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
8112b8cc:	e0bff017 	ldw	r2,-64(fp)
8112b8d0:	103f7d1e 	bne	r2,zero,8112b6c8 <__reset+0xfb10b6c8>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
8112b8d4:	e0bff103 	ldbu	r2,-60(fp)
8112b8d8:	10800058 	cmpnei	r2,r2,1
8112b8dc:	10000a1e 	bne	r2,zero,8112b908 <OSEventPendMulti+0x3e4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
8112b8e0:	e0bffd17 	ldw	r2,-12(fp)
8112b8e4:	10000015 	stw	zero,0(r2)
8112b8e8:	e0bff317 	ldw	r2,-52(fp)
8112b8ec:	e0bff615 	stw	r2,-40(fp)
8112b8f0:	e0bff617 	ldw	r2,-40(fp)
8112b8f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
8112b8f8:	e0800217 	ldw	r2,8(fp)
8112b8fc:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
8112b900:	e0bff18b 	ldhu	r2,-58(fp)
8112b904:	00008806 	br	8112bb28 <OSEventPendMulti+0x604>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
8112b908:	d0a08c17 	ldw	r2,-32208(gp)
8112b90c:	d0e08c17 	ldw	r3,-32208(gp)
8112b910:	19000c03 	ldbu	r4,48(r3)
8112b914:	e0fff203 	ldbu	r3,-56(fp)
8112b918:	20c6b03a 	or	r3,r4,r3
8112b91c:	1809883a 	mov	r4,r3
8112b920:	00ffe004 	movi	r3,-128
8112b924:	20c6b03a 	or	r3,r4,r3
8112b928:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112b92c:	d0a08c17 	ldw	r2,-32208(gp)
8112b930:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
8112b934:	d0a08c17 	ldw	r2,-32208(gp)
8112b938:	e0ffff0b 	ldhu	r3,-4(fp)
8112b93c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
8112b940:	e13ffc17 	ldw	r4,-16(fp)
8112b944:	112c4cc0 	call	8112c4cc <OS_EventTaskWaitMulti>
8112b948:	e0bff317 	ldw	r2,-52(fp)
8112b94c:	e0bff915 	stw	r2,-28(fp)
8112b950:	e0bff917 	ldw	r2,-28(fp)
8112b954:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
8112b958:	112ccd00 	call	8112ccd0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b95c:	0005303a 	rdctl	r2,status
8112b960:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b964:	e0fff717 	ldw	r3,-36(fp)
8112b968:	00bfff84 	movi	r2,-2
8112b96c:	1884703a 	and	r2,r3,r2
8112b970:	1001703a 	wrctl	status,r2
  
  return context;
8112b974:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
8112b978:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
8112b97c:	d0a08c17 	ldw	r2,-32208(gp)
8112b980:	10800c43 	ldbu	r2,49(r2)
8112b984:	10803fcc 	andi	r2,r2,255
8112b988:	10000226 	beq	r2,zero,8112b994 <OSEventPendMulti+0x470>
8112b98c:	108000a0 	cmpeqi	r2,r2,2
8112b990:	10001826 	beq	r2,zero,8112b9f4 <OSEventPendMulti+0x4d0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
8112b994:	d0a08c17 	ldw	r2,-32208(gp)
8112b998:	10800717 	ldw	r2,28(r2)
8112b99c:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
8112b9a0:	e0bff017 	ldw	r2,-64(fp)
8112b9a4:	10000b26 	beq	r2,zero,8112b9d4 <OSEventPendMulti+0x4b0>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
8112b9a8:	e0bffd17 	ldw	r2,-12(fp)
8112b9ac:	10c00104 	addi	r3,r2,4
8112b9b0:	e0fffd15 	stw	r3,-12(fp)
8112b9b4:	e0fff017 	ldw	r3,-64(fp)
8112b9b8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
8112b9bc:	e0bffd17 	ldw	r2,-12(fp)
8112b9c0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
8112b9c4:	e0bff18b 	ldhu	r2,-58(fp)
8112b9c8:	10800044 	addi	r2,r2,1
8112b9cc:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
8112b9d0:	00000d06 	br	8112ba08 <OSEventPendMulti+0x4e4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
8112b9d4:	d0a08c17 	ldw	r2,-32208(gp)
8112b9d8:	00c00044 	movi	r3,1
8112b9dc:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
8112b9e0:	d0a08c17 	ldw	r2,-32208(gp)
8112b9e4:	e17ffc17 	ldw	r5,-16(fp)
8112b9e8:	1009883a 	mov	r4,r2
8112b9ec:	112c6e40 	call	8112c6e4 <OS_EventTaskRemoveMulti>
             }
			 break;
8112b9f0:	00000506 	br	8112ba08 <OSEventPendMulti+0x4e4>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
8112b9f4:	d0a08c17 	ldw	r2,-32208(gp)
8112b9f8:	e17ffc17 	ldw	r5,-16(fp)
8112b9fc:	1009883a 	mov	r4,r2
8112ba00:	112c6e40 	call	8112c6e4 <OS_EventTaskRemoveMulti>
             break;
8112ba04:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
8112ba08:	d0a08c17 	ldw	r2,-32208(gp)
8112ba0c:	10800c43 	ldbu	r2,49(r2)
8112ba10:	10803fcc 	andi	r2,r2,255
8112ba14:	10000326 	beq	r2,zero,8112ba24 <OSEventPendMulti+0x500>
8112ba18:	108000a0 	cmpeqi	r2,r2,2
8112ba1c:	1000231e 	bne	r2,zero,8112baac <OSEventPendMulti+0x588>
8112ba20:	00002a06 	br	8112bacc <OSEventPendMulti+0x5a8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
8112ba24:	e0bff017 	ldw	r2,-64(fp)
8112ba28:	10800003 	ldbu	r2,0(r2)
8112ba2c:	10803fcc 	andi	r2,r2,255
8112ba30:	0080100e 	bge	zero,r2,8112ba74 <OSEventPendMulti+0x550>
8112ba34:	10c000d0 	cmplti	r3,r2,3
8112ba38:	1800071e 	bne	r3,zero,8112ba58 <OSEventPendMulti+0x534>
8112ba3c:	108000e0 	cmpeqi	r2,r2,3
8112ba40:	10000c26 	beq	r2,zero,8112ba74 <OSEventPendMulti+0x550>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
8112ba44:	e0bffe17 	ldw	r2,-8(fp)
8112ba48:	10c00104 	addi	r3,r2,4
8112ba4c:	e0fffe15 	stw	r3,-8(fp)
8112ba50:	10000015 	stw	zero,0(r2)
                      break;
8112ba54:	00001206 	br	8112baa0 <OSEventPendMulti+0x57c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
8112ba58:	e0bffe17 	ldw	r2,-8(fp)
8112ba5c:	10c00104 	addi	r3,r2,4
8112ba60:	e0fffe15 	stw	r3,-8(fp)
8112ba64:	d0e08c17 	ldw	r3,-32208(gp)
8112ba68:	18c00917 	ldw	r3,36(r3)
8112ba6c:	10c00015 	stw	r3,0(r2)
                      break;
8112ba70:	00000b06 	br	8112baa0 <OSEventPendMulti+0x57c>
8112ba74:	e0bff317 	ldw	r2,-52(fp)
8112ba78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ba7c:	e0bff817 	ldw	r2,-32(fp)
8112ba80:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
8112ba84:	e0bffd17 	ldw	r2,-12(fp)
8112ba88:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
8112ba8c:	e0800217 	ldw	r2,8(fp)
8112ba90:	00c00044 	movi	r3,1
8112ba94:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
8112ba98:	e0bff18b 	ldhu	r2,-58(fp)
8112ba9c:	00002206 	br	8112bb28 <OSEventPendMulti+0x604>
             }
            *perr = OS_ERR_NONE;
8112baa0:	e0800217 	ldw	r2,8(fp)
8112baa4:	10000005 	stb	zero,0(r2)
             break;
8112baa8:	00001006 	br	8112baec <OSEventPendMulti+0x5c8>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
8112baac:	e0bffe17 	ldw	r2,-8(fp)
8112bab0:	10c00104 	addi	r3,r2,4
8112bab4:	e0fffe15 	stw	r3,-8(fp)
8112bab8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
8112babc:	e0800217 	ldw	r2,8(fp)
8112bac0:	00c00384 	movi	r3,14
8112bac4:	10c00005 	stb	r3,0(r2)
             break;
8112bac8:	00000806 	br	8112baec <OSEventPendMulti+0x5c8>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
8112bacc:	e0bffe17 	ldw	r2,-8(fp)
8112bad0:	10c00104 	addi	r3,r2,4
8112bad4:	e0fffe15 	stw	r3,-8(fp)
8112bad8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
8112badc:	e0800217 	ldw	r2,8(fp)
8112bae0:	00c00284 	movi	r3,10
8112bae4:	10c00005 	stb	r3,0(r2)
             break;
8112bae8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
8112baec:	d0a08c17 	ldw	r2,-32208(gp)
8112baf0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
8112baf4:	d0a08c17 	ldw	r2,-32208(gp)
8112baf8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
8112bafc:	d0a08c17 	ldw	r2,-32208(gp)
8112bb00:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112bb04:	d0a08c17 	ldw	r2,-32208(gp)
8112bb08:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
8112bb0c:	d0a08c17 	ldw	r2,-32208(gp)
8112bb10:	10000915 	stw	zero,36(r2)
8112bb14:	e0bff317 	ldw	r2,-52(fp)
8112bb18:	e0bffa15 	stw	r2,-24(fp)
8112bb1c:	e0bffa17 	ldw	r2,-24(fp)
8112bb20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
8112bb24:	e0bff18b 	ldhu	r2,-58(fp)
}
8112bb28:	e037883a 	mov	sp,fp
8112bb2c:	dfc00117 	ldw	ra,4(sp)
8112bb30:	df000017 	ldw	fp,0(sp)
8112bb34:	dec00204 	addi	sp,sp,8
8112bb38:	f800283a 	ret

8112bb3c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
8112bb3c:	defffe04 	addi	sp,sp,-8
8112bb40:	de00012e 	bgeu	sp,et,8112bb48 <OSInit+0xc>
8112bb44:	003b68fa 	trap	3
8112bb48:	dfc00115 	stw	ra,4(sp)
8112bb4c:	df000015 	stw	fp,0(sp)
8112bb50:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
8112bb54:	113e1100 	call	8113e110 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
8112bb58:	112c9440 	call	8112c944 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
8112bb5c:	112c9940 	call	8112c994 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
8112bb60:	112cb180 	call	8112cb18 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
8112bb64:	112c85c0 	call	8112c85c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
8112bb68:	112ead80 	call	8112ead8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
8112bb6c:	112f4200 	call	8112f420 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
8112bb70:	11316f00 	call	811316f0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
8112bb74:	112ca080 	call	8112ca08 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
8112bb78:	112ca900 	call	8112ca90 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
8112bb7c:	1134a940 	call	81134a94 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
8112bb80:	113e13c0 	call	8113e13c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
8112bb84:	112d3f40 	call	8112d3f4 <OSDebugInit>
#endif
}
8112bb88:	0001883a 	nop
8112bb8c:	e037883a 	mov	sp,fp
8112bb90:	dfc00117 	ldw	ra,4(sp)
8112bb94:	df000017 	ldw	fp,0(sp)
8112bb98:	dec00204 	addi	sp,sp,8
8112bb9c:	f800283a 	ret

8112bba0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
8112bba0:	deffff04 	addi	sp,sp,-4
8112bba4:	de00012e 	bgeu	sp,et,8112bbac <OSIntEnter+0xc>
8112bba8:	003b68fa 	trap	3
8112bbac:	df000015 	stw	fp,0(sp)
8112bbb0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
8112bbb4:	d0a07b03 	ldbu	r2,-32276(gp)
8112bbb8:	10803fcc 	andi	r2,r2,255
8112bbbc:	10800058 	cmpnei	r2,r2,1
8112bbc0:	1000071e 	bne	r2,zero,8112bbe0 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
8112bbc4:	d0a08b03 	ldbu	r2,-32212(gp)
8112bbc8:	10803fcc 	andi	r2,r2,255
8112bbcc:	10803fe0 	cmpeqi	r2,r2,255
8112bbd0:	1000031e 	bne	r2,zero,8112bbe0 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
8112bbd4:	d0a08b03 	ldbu	r2,-32212(gp)
8112bbd8:	10800044 	addi	r2,r2,1
8112bbdc:	d0a08b05 	stb	r2,-32212(gp)
        }
    }
}
8112bbe0:	0001883a 	nop
8112bbe4:	e037883a 	mov	sp,fp
8112bbe8:	df000017 	ldw	fp,0(sp)
8112bbec:	dec00104 	addi	sp,sp,4
8112bbf0:	f800283a 	ret

8112bbf4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
8112bbf4:	defffb04 	addi	sp,sp,-20
8112bbf8:	de00012e 	bgeu	sp,et,8112bc00 <OSIntExit+0xc>
8112bbfc:	003b68fa 	trap	3
8112bc00:	dfc00415 	stw	ra,16(sp)
8112bc04:	df000315 	stw	fp,12(sp)
8112bc08:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112bc0c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
8112bc10:	d0a07b03 	ldbu	r2,-32276(gp)
8112bc14:	10803fcc 	andi	r2,r2,255
8112bc18:	10800058 	cmpnei	r2,r2,1
8112bc1c:	10002f1e 	bne	r2,zero,8112bcdc <OSIntExit+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bc20:	0005303a 	rdctl	r2,status
8112bc24:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bc28:	e0ffff17 	ldw	r3,-4(fp)
8112bc2c:	00bfff84 	movi	r2,-2
8112bc30:	1884703a 	and	r2,r3,r2
8112bc34:	1001703a 	wrctl	status,r2
  
  return context;
8112bc38:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112bc3c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
8112bc40:	d0a08b03 	ldbu	r2,-32212(gp)
8112bc44:	10803fcc 	andi	r2,r2,255
8112bc48:	10000326 	beq	r2,zero,8112bc58 <OSIntExit+0x64>
            OSIntNesting--;
8112bc4c:	d0a08b03 	ldbu	r2,-32212(gp)
8112bc50:	10bfffc4 	addi	r2,r2,-1
8112bc54:	d0a08b05 	stb	r2,-32212(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
8112bc58:	d0a08b03 	ldbu	r2,-32212(gp)
8112bc5c:	10803fcc 	andi	r2,r2,255
8112bc60:	10001a1e 	bne	r2,zero,8112bccc <OSIntExit+0xd8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
8112bc64:	d0a07903 	ldbu	r2,-32284(gp)
8112bc68:	10803fcc 	andi	r2,r2,255
8112bc6c:	1000171e 	bne	r2,zero,8112bccc <OSIntExit+0xd8>
                OS_SchedNew();
8112bc70:	112cda80 	call	8112cda8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
8112bc74:	d0e07d83 	ldbu	r3,-32266(gp)
8112bc78:	d0a07dc3 	ldbu	r2,-32265(gp)
8112bc7c:	18c03fcc 	andi	r3,r3,255
8112bc80:	10803fcc 	andi	r2,r2,255
8112bc84:	18801126 	beq	r3,r2,8112bccc <OSIntExit+0xd8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
8112bc88:	d0a07d83 	ldbu	r2,-32266(gp)
8112bc8c:	10c03fcc 	andi	r3,r2,255
8112bc90:	00a045b4 	movhi	r2,33046
8112bc94:	10a05004 	addi	r2,r2,-32448
8112bc98:	18c7883a 	add	r3,r3,r3
8112bc9c:	18c7883a 	add	r3,r3,r3
8112bca0:	10c5883a 	add	r2,r2,r3
8112bca4:	10800017 	ldw	r2,0(r2)
8112bca8:	d0a08615 	stw	r2,-32232(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
8112bcac:	d0a08617 	ldw	r2,-32232(gp)
8112bcb0:	10c00e17 	ldw	r3,56(r2)
8112bcb4:	18c00044 	addi	r3,r3,1
8112bcb8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
8112bcbc:	d0a08017 	ldw	r2,-32256(gp)
8112bcc0:	10800044 	addi	r2,r2,1
8112bcc4:	d0a08015 	stw	r2,-32256(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
8112bcc8:	113ddd00 	call	8113ddd0 <OSCtxSw>
8112bccc:	e0bffd17 	ldw	r2,-12(fp)
8112bcd0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bcd4:	e0bffe17 	ldw	r2,-8(fp)
8112bcd8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112bcdc:	0001883a 	nop
8112bce0:	e037883a 	mov	sp,fp
8112bce4:	dfc00117 	ldw	ra,4(sp)
8112bce8:	df000017 	ldw	fp,0(sp)
8112bcec:	dec00204 	addi	sp,sp,8
8112bcf0:	f800283a 	ret

8112bcf4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
8112bcf4:	defffc04 	addi	sp,sp,-16
8112bcf8:	de00012e 	bgeu	sp,et,8112bd00 <OSSchedLock+0xc>
8112bcfc:	003b68fa 	trap	3
8112bd00:	df000315 	stw	fp,12(sp)
8112bd04:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112bd08:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
8112bd0c:	d0a07b03 	ldbu	r2,-32276(gp)
8112bd10:	10803fcc 	andi	r2,r2,255
8112bd14:	10800058 	cmpnei	r2,r2,1
8112bd18:	1000161e 	bne	r2,zero,8112bd74 <OSSchedLock+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bd1c:	0005303a 	rdctl	r2,status
8112bd20:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bd24:	e0ffff17 	ldw	r3,-4(fp)
8112bd28:	00bfff84 	movi	r2,-2
8112bd2c:	1884703a 	and	r2,r3,r2
8112bd30:	1001703a 	wrctl	status,r2
  
  return context;
8112bd34:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112bd38:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
8112bd3c:	d0a08b03 	ldbu	r2,-32212(gp)
8112bd40:	10803fcc 	andi	r2,r2,255
8112bd44:	1000071e 	bne	r2,zero,8112bd64 <OSSchedLock+0x70>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
8112bd48:	d0a07903 	ldbu	r2,-32284(gp)
8112bd4c:	10803fcc 	andi	r2,r2,255
8112bd50:	10803fe0 	cmpeqi	r2,r2,255
8112bd54:	1000031e 	bne	r2,zero,8112bd64 <OSSchedLock+0x70>
                OSLockNesting++;                 /* Increment lock nesting level                       */
8112bd58:	d0a07903 	ldbu	r2,-32284(gp)
8112bd5c:	10800044 	addi	r2,r2,1
8112bd60:	d0a07905 	stb	r2,-32284(gp)
8112bd64:	e0bffd17 	ldw	r2,-12(fp)
8112bd68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bd6c:	e0bffe17 	ldw	r2,-8(fp)
8112bd70:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112bd74:	0001883a 	nop
8112bd78:	e037883a 	mov	sp,fp
8112bd7c:	df000017 	ldw	fp,0(sp)
8112bd80:	dec00104 	addi	sp,sp,4
8112bd84:	f800283a 	ret

8112bd88 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
8112bd88:	defff804 	addi	sp,sp,-32
8112bd8c:	de00012e 	bgeu	sp,et,8112bd94 <OSSchedUnlock+0xc>
8112bd90:	003b68fa 	trap	3
8112bd94:	dfc00715 	stw	ra,28(sp)
8112bd98:	df000615 	stw	fp,24(sp)
8112bd9c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112bda0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
8112bda4:	d0a07b03 	ldbu	r2,-32276(gp)
8112bda8:	10803fcc 	andi	r2,r2,255
8112bdac:	10800058 	cmpnei	r2,r2,1
8112bdb0:	1000281e 	bne	r2,zero,8112be54 <OSSchedUnlock+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bdb4:	0005303a 	rdctl	r2,status
8112bdb8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bdbc:	e0ffff17 	ldw	r3,-4(fp)
8112bdc0:	00bfff84 	movi	r2,-2
8112bdc4:	1884703a 	and	r2,r3,r2
8112bdc8:	1001703a 	wrctl	status,r2
  
  return context;
8112bdcc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112bdd0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
8112bdd4:	d0a07903 	ldbu	r2,-32284(gp)
8112bdd8:	10803fcc 	andi	r2,r2,255
8112bddc:	10001926 	beq	r2,zero,8112be44 <OSSchedUnlock+0xbc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
8112bde0:	d0a07903 	ldbu	r2,-32284(gp)
8112bde4:	10bfffc4 	addi	r2,r2,-1
8112bde8:	d0a07905 	stb	r2,-32284(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
8112bdec:	d0a07903 	ldbu	r2,-32284(gp)
8112bdf0:	10803fcc 	andi	r2,r2,255
8112bdf4:	10000e1e 	bne	r2,zero,8112be30 <OSSchedUnlock+0xa8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
8112bdf8:	d0a08b03 	ldbu	r2,-32212(gp)
8112bdfc:	10803fcc 	andi	r2,r2,255
8112be00:	1000061e 	bne	r2,zero,8112be1c <OSSchedUnlock+0x94>
8112be04:	e0bffa17 	ldw	r2,-24(fp)
8112be08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112be0c:	e0bffb17 	ldw	r2,-20(fp)
8112be10:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
8112be14:	112ccd00 	call	8112ccd0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
8112be18:	00000e06 	br	8112be54 <OSSchedUnlock+0xcc>
8112be1c:	e0bffa17 	ldw	r2,-24(fp)
8112be20:	e0bffc15 	stw	r2,-16(fp)
8112be24:	e0bffc17 	ldw	r2,-16(fp)
8112be28:	1001703a 	wrctl	status,r2
8112be2c:	00000906 	br	8112be54 <OSSchedUnlock+0xcc>
8112be30:	e0bffa17 	ldw	r2,-24(fp)
8112be34:	e0bffd15 	stw	r2,-12(fp)
8112be38:	e0bffd17 	ldw	r2,-12(fp)
8112be3c:	1001703a 	wrctl	status,r2
8112be40:	00000406 	br	8112be54 <OSSchedUnlock+0xcc>
8112be44:	e0bffa17 	ldw	r2,-24(fp)
8112be48:	e0bffe15 	stw	r2,-8(fp)
8112be4c:	e0bffe17 	ldw	r2,-8(fp)
8112be50:	1001703a 	wrctl	status,r2
8112be54:	0001883a 	nop
8112be58:	e037883a 	mov	sp,fp
8112be5c:	dfc00117 	ldw	ra,4(sp)
8112be60:	df000017 	ldw	fp,0(sp)
8112be64:	dec00204 	addi	sp,sp,8
8112be68:	f800283a 	ret

8112be6c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
8112be6c:	defffe04 	addi	sp,sp,-8
8112be70:	de00012e 	bgeu	sp,et,8112be78 <OSStart+0xc>
8112be74:	003b68fa 	trap	3
8112be78:	dfc00115 	stw	ra,4(sp)
8112be7c:	df000015 	stw	fp,0(sp)
8112be80:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
8112be84:	d0a07b03 	ldbu	r2,-32276(gp)
8112be88:	10803fcc 	andi	r2,r2,255
8112be8c:	10000f1e 	bne	r2,zero,8112becc <OSStart+0x60>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
8112be90:	112cda80 	call	8112cda8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
8112be94:	d0a07d83 	ldbu	r2,-32266(gp)
8112be98:	d0a07dc5 	stb	r2,-32265(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
8112be9c:	d0a07d83 	ldbu	r2,-32266(gp)
8112bea0:	10c03fcc 	andi	r3,r2,255
8112bea4:	00a045b4 	movhi	r2,33046
8112bea8:	10a05004 	addi	r2,r2,-32448
8112beac:	18c7883a 	add	r3,r3,r3
8112beb0:	18c7883a 	add	r3,r3,r3
8112beb4:	10c5883a 	add	r2,r2,r3
8112beb8:	10800017 	ldw	r2,0(r2)
8112bebc:	d0a08615 	stw	r2,-32232(gp)
        OSTCBCur      = OSTCBHighRdy;
8112bec0:	d0a08617 	ldw	r2,-32232(gp)
8112bec4:	d0a08c15 	stw	r2,-32208(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
8112bec8:	113de6c0 	call	8113de6c <OSStartHighRdy>
    }
}
8112becc:	0001883a 	nop
8112bed0:	e037883a 	mov	sp,fp
8112bed4:	dfc00117 	ldw	ra,4(sp)
8112bed8:	df000017 	ldw	fp,0(sp)
8112bedc:	dec00204 	addi	sp,sp,8
8112bee0:	f800283a 	ret

8112bee4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
8112bee4:	defff904 	addi	sp,sp,-28
8112bee8:	de00012e 	bgeu	sp,et,8112bef0 <OSStatInit+0xc>
8112beec:	003b68fa 	trap	3
8112bef0:	dfc00615 	stw	ra,24(sp)
8112bef4:	df000515 	stw	fp,20(sp)
8112bef8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112befc:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
8112bf00:	01000084 	movi	r4,2
8112bf04:	1133a0c0 	call	81133a0c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bf08:	0005303a 	rdctl	r2,status
8112bf0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bf10:	e0fffc17 	ldw	r3,-16(fp)
8112bf14:	00bfff84 	movi	r2,-2
8112bf18:	1884703a 	and	r2,r3,r2
8112bf1c:	1001703a 	wrctl	status,r2
  
  return context;
8112bf20:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
8112bf24:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
8112bf28:	d0207c15 	stw	zero,-32272(gp)
8112bf2c:	e0bffb17 	ldw	r2,-20(fp)
8112bf30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bf34:	e0bffd17 	ldw	r2,-12(fp)
8112bf38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
8112bf3c:	01001904 	movi	r4,100
8112bf40:	1133a0c0 	call	81133a0c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bf44:	0005303a 	rdctl	r2,status
8112bf48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bf4c:	e0fffe17 	ldw	r3,-8(fp)
8112bf50:	00bfff84 	movi	r2,-2
8112bf54:	1884703a 	and	r2,r3,r2
8112bf58:	1001703a 	wrctl	status,r2
  
  return context;
8112bf5c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
8112bf60:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
8112bf64:	d0a07c17 	ldw	r2,-32272(gp)
8112bf68:	d0a08215 	stw	r2,-32248(gp)
    OSStatRdy    = OS_TRUE;
8112bf6c:	00800044 	movi	r2,1
8112bf70:	d0a09105 	stb	r2,-32188(gp)
8112bf74:	e0bffb17 	ldw	r2,-20(fp)
8112bf78:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bf7c:	e0bfff17 	ldw	r2,-4(fp)
8112bf80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8112bf84:	0001883a 	nop
8112bf88:	e037883a 	mov	sp,fp
8112bf8c:	dfc00117 	ldw	ra,4(sp)
8112bf90:	df000017 	ldw	fp,0(sp)
8112bf94:	dec00204 	addi	sp,sp,8
8112bf98:	f800283a 	ret

8112bf9c <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
8112bf9c:	defff704 	addi	sp,sp,-36
8112bfa0:	de00012e 	bgeu	sp,et,8112bfa8 <OSTimeTick+0xc>
8112bfa4:	003b68fa 	trap	3
8112bfa8:	dfc00815 	stw	ra,32(sp)
8112bfac:	df000715 	stw	fp,28(sp)
8112bfb0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112bfb4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
8112bfb8:	113e0bc0 	call	8113e0bc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bfbc:	0005303a 	rdctl	r2,status
8112bfc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bfc4:	e0fffd17 	ldw	r3,-12(fp)
8112bfc8:	00bfff84 	movi	r2,-2
8112bfcc:	1884703a 	and	r2,r3,r2
8112bfd0:	1001703a 	wrctl	status,r2
  
  return context;
8112bfd4:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
8112bfd8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
8112bfdc:	d0a08e17 	ldw	r2,-32200(gp)
8112bfe0:	10800044 	addi	r2,r2,1
8112bfe4:	d0a08e15 	stw	r2,-32200(gp)
8112bfe8:	e0bffb17 	ldw	r2,-20(fp)
8112bfec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bff0:	e0bfff17 	ldw	r2,-4(fp)
8112bff4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
8112bff8:	d0a07b03 	ldbu	r2,-32276(gp)
8112bffc:	10803fcc 	andi	r2,r2,255
8112c000:	10800058 	cmpnei	r2,r2,1
8112c004:	10006a1e 	bne	r2,zero,8112c1b0 <OSTimeTick+0x214>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
8112c008:	d0a07f03 	ldbu	r2,-32260(gp)
8112c00c:	10803fcc 	andi	r2,r2,255
8112c010:	10c00060 	cmpeqi	r3,r2,1
8112c014:	1800061e 	bne	r3,zero,8112c030 <OSTimeTick+0x94>
8112c018:	10c000a0 	cmpeqi	r3,r2,2
8112c01c:	1800061e 	bne	r3,zero,8112c038 <OSTimeTick+0x9c>
8112c020:	10000a1e 	bne	r2,zero,8112c04c <OSTimeTick+0xb0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
8112c024:	00800044 	movi	r2,1
8112c028:	e0bffa05 	stb	r2,-24(fp)
                 break;
8112c02c:	00000b06 	br	8112c05c <OSTimeTick+0xc0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
8112c030:	e03ffa05 	stb	zero,-24(fp)
                 break;
8112c034:	00000906 	br	8112c05c <OSTimeTick+0xc0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
8112c038:	00800044 	movi	r2,1
8112c03c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
8112c040:	00800044 	movi	r2,1
8112c044:	d0a07f05 	stb	r2,-32260(gp)
                 break;
8112c048:	00000406 	br	8112c05c <OSTimeTick+0xc0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
8112c04c:	00800044 	movi	r2,1
8112c050:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
8112c054:	d0207f05 	stb	zero,-32260(gp)
                 break;
8112c058:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
8112c05c:	e0bffa03 	ldbu	r2,-24(fp)
8112c060:	10005226 	beq	r2,zero,8112c1ac <OSTimeTick+0x210>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
8112c064:	d0a07e17 	ldw	r2,-32264(gp)
8112c068:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112c06c:	00004906 	br	8112c194 <OSTimeTick+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c070:	0005303a 	rdctl	r2,status
8112c074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c078:	e0fffc17 	ldw	r3,-16(fp)
8112c07c:	00bfff84 	movi	r2,-2
8112c080:	1884703a 	and	r2,r3,r2
8112c084:	1001703a 	wrctl	status,r2
  
  return context;
8112c088:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
8112c08c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
8112c090:	e0bff917 	ldw	r2,-28(fp)
8112c094:	10800b8b 	ldhu	r2,46(r2)
8112c098:	10bfffcc 	andi	r2,r2,65535
8112c09c:	10003626 	beq	r2,zero,8112c178 <OSTimeTick+0x1dc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
8112c0a0:	e0bff917 	ldw	r2,-28(fp)
8112c0a4:	10800b8b 	ldhu	r2,46(r2)
8112c0a8:	10bfffc4 	addi	r2,r2,-1
8112c0ac:	1007883a 	mov	r3,r2
8112c0b0:	e0bff917 	ldw	r2,-28(fp)
8112c0b4:	10c00b8d 	sth	r3,46(r2)
8112c0b8:	e0bff917 	ldw	r2,-28(fp)
8112c0bc:	10800b8b 	ldhu	r2,46(r2)
8112c0c0:	10bfffcc 	andi	r2,r2,65535
8112c0c4:	10002c1e 	bne	r2,zero,8112c178 <OSTimeTick+0x1dc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8112c0c8:	e0bff917 	ldw	r2,-28(fp)
8112c0cc:	10800c03 	ldbu	r2,48(r2)
8112c0d0:	10803fcc 	andi	r2,r2,255
8112c0d4:	10800dcc 	andi	r2,r2,55
8112c0d8:	10000b26 	beq	r2,zero,8112c108 <OSTimeTick+0x16c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
8112c0dc:	e0bff917 	ldw	r2,-28(fp)
8112c0e0:	10c00c03 	ldbu	r3,48(r2)
8112c0e4:	00bff204 	movi	r2,-56
8112c0e8:	1884703a 	and	r2,r3,r2
8112c0ec:	1007883a 	mov	r3,r2
8112c0f0:	e0bff917 	ldw	r2,-28(fp)
8112c0f4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
8112c0f8:	e0bff917 	ldw	r2,-28(fp)
8112c0fc:	00c00044 	movi	r3,1
8112c100:	10c00c45 	stb	r3,49(r2)
8112c104:	00000206 	br	8112c110 <OSTimeTick+0x174>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112c108:	e0bff917 	ldw	r2,-28(fp)
8112c10c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
8112c110:	e0bff917 	ldw	r2,-28(fp)
8112c114:	10800c03 	ldbu	r2,48(r2)
8112c118:	10803fcc 	andi	r2,r2,255
8112c11c:	1080020c 	andi	r2,r2,8
8112c120:	1000151e 	bne	r2,zero,8112c178 <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
8112c124:	e0bff917 	ldw	r2,-28(fp)
8112c128:	10c00d83 	ldbu	r3,54(r2)
8112c12c:	d0a08803 	ldbu	r2,-32224(gp)
8112c130:	1884b03a 	or	r2,r3,r2
8112c134:	d0a08805 	stb	r2,-32224(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112c138:	e0bff917 	ldw	r2,-28(fp)
8112c13c:	10800d03 	ldbu	r2,52(r2)
8112c140:	10c03fcc 	andi	r3,r2,255
8112c144:	e0bff917 	ldw	r2,-28(fp)
8112c148:	10800d03 	ldbu	r2,52(r2)
8112c14c:	11003fcc 	andi	r4,r2,255
8112c150:	d0a08844 	addi	r2,gp,-32223
8112c154:	2085883a 	add	r2,r4,r2
8112c158:	11000003 	ldbu	r4,0(r2)
8112c15c:	e0bff917 	ldw	r2,-28(fp)
8112c160:	10800d43 	ldbu	r2,53(r2)
8112c164:	2084b03a 	or	r2,r4,r2
8112c168:	1009883a 	mov	r4,r2
8112c16c:	d0a08844 	addi	r2,gp,-32223
8112c170:	1885883a 	add	r2,r3,r2
8112c174:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
8112c178:	e0bff917 	ldw	r2,-28(fp)
8112c17c:	10800517 	ldw	r2,20(r2)
8112c180:	e0bff915 	stw	r2,-28(fp)
8112c184:	e0bffb17 	ldw	r2,-20(fp)
8112c188:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c18c:	e0bffe17 	ldw	r2,-8(fp)
8112c190:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112c194:	e0bff917 	ldw	r2,-28(fp)
8112c198:	10800c83 	ldbu	r2,50(r2)
8112c19c:	10803fcc 	andi	r2,r2,255
8112c1a0:	10800a18 	cmpnei	r2,r2,40
8112c1a4:	103fb21e 	bne	r2,zero,8112c070 <__reset+0xfb10c070>
8112c1a8:	00000106 	br	8112c1b0 <OSTimeTick+0x214>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
8112c1ac:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
8112c1b0:	e037883a 	mov	sp,fp
8112c1b4:	dfc00117 	ldw	ra,4(sp)
8112c1b8:	df000017 	ldw	fp,0(sp)
8112c1bc:	dec00204 	addi	sp,sp,8
8112c1c0:	f800283a 	ret

8112c1c4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
8112c1c4:	deffff04 	addi	sp,sp,-4
8112c1c8:	de00012e 	bgeu	sp,et,8112c1d0 <OSVersion+0xc>
8112c1cc:	003b68fa 	trap	3
8112c1d0:	df000015 	stw	fp,0(sp)
8112c1d4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
8112c1d8:	00804784 	movi	r2,286
}
8112c1dc:	e037883a 	mov	sp,fp
8112c1e0:	df000017 	ldw	fp,0(sp)
8112c1e4:	dec00104 	addi	sp,sp,4
8112c1e8:	f800283a 	ret

8112c1ec <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
8112c1ec:	deffff04 	addi	sp,sp,-4
8112c1f0:	de00012e 	bgeu	sp,et,8112c1f8 <OS_Dummy+0xc>
8112c1f4:	003b68fa 	trap	3
8112c1f8:	df000015 	stw	fp,0(sp)
8112c1fc:	d839883a 	mov	fp,sp
}
8112c200:	0001883a 	nop
8112c204:	e037883a 	mov	sp,fp
8112c208:	df000017 	ldw	fp,0(sp)
8112c20c:	dec00104 	addi	sp,sp,4
8112c210:	f800283a 	ret

8112c214 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
8112c214:	defff804 	addi	sp,sp,-32
8112c218:	de00012e 	bgeu	sp,et,8112c220 <OS_EventTaskRdy+0xc>
8112c21c:	003b68fa 	trap	3
8112c220:	dfc00715 	stw	ra,28(sp)
8112c224:	df000615 	stw	fp,24(sp)
8112c228:	df000604 	addi	fp,sp,24
8112c22c:	e13ffc15 	stw	r4,-16(fp)
8112c230:	e17ffd15 	stw	r5,-12(fp)
8112c234:	3007883a 	mov	r3,r6
8112c238:	3805883a 	mov	r2,r7
8112c23c:	e0fffe05 	stb	r3,-8(fp)
8112c240:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
8112c244:	e0bffc17 	ldw	r2,-16(fp)
8112c248:	10800283 	ldbu	r2,10(r2)
8112c24c:	10c03fcc 	andi	r3,r2,255
8112c250:	00a04534 	movhi	r2,33044
8112c254:	108a1204 	addi	r2,r2,10312
8112c258:	10c5883a 	add	r2,r2,r3
8112c25c:	10800003 	ldbu	r2,0(r2)
8112c260:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
8112c264:	e0bffa03 	ldbu	r2,-24(fp)
8112c268:	e0fffc17 	ldw	r3,-16(fp)
8112c26c:	1885883a 	add	r2,r3,r2
8112c270:	108002c4 	addi	r2,r2,11
8112c274:	10800003 	ldbu	r2,0(r2)
8112c278:	10c03fcc 	andi	r3,r2,255
8112c27c:	00a04534 	movhi	r2,33044
8112c280:	108a1204 	addi	r2,r2,10312
8112c284:	10c5883a 	add	r2,r2,r3
8112c288:	10800003 	ldbu	r2,0(r2)
8112c28c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
8112c290:	e0bffa03 	ldbu	r2,-24(fp)
8112c294:	100490fa 	slli	r2,r2,3
8112c298:	1007883a 	mov	r3,r2
8112c29c:	e0bffa43 	ldbu	r2,-23(fp)
8112c2a0:	1885883a 	add	r2,r3,r2
8112c2a4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
8112c2a8:	e0fffa83 	ldbu	r3,-22(fp)
8112c2ac:	00a045b4 	movhi	r2,33046
8112c2b0:	10a05004 	addi	r2,r2,-32448
8112c2b4:	18c7883a 	add	r3,r3,r3
8112c2b8:	18c7883a 	add	r3,r3,r3
8112c2bc:	10c5883a 	add	r2,r2,r3
8112c2c0:	10800017 	ldw	r2,0(r2)
8112c2c4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
8112c2c8:	e0bffb17 	ldw	r2,-20(fp)
8112c2cc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
8112c2d0:	e0bffb17 	ldw	r2,-20(fp)
8112c2d4:	e0fffd17 	ldw	r3,-12(fp)
8112c2d8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
8112c2dc:	e0bffb17 	ldw	r2,-20(fp)
8112c2e0:	10800c03 	ldbu	r2,48(r2)
8112c2e4:	1007883a 	mov	r3,r2
8112c2e8:	e0bffe03 	ldbu	r2,-8(fp)
8112c2ec:	0084303a 	nor	r2,zero,r2
8112c2f0:	1884703a 	and	r2,r3,r2
8112c2f4:	1007883a 	mov	r3,r2
8112c2f8:	e0bffb17 	ldw	r2,-20(fp)
8112c2fc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
8112c300:	e0bffb17 	ldw	r2,-20(fp)
8112c304:	e0ffff03 	ldbu	r3,-4(fp)
8112c308:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
8112c30c:	e0bffb17 	ldw	r2,-20(fp)
8112c310:	10800c03 	ldbu	r2,48(r2)
8112c314:	10803fcc 	andi	r2,r2,255
8112c318:	1080020c 	andi	r2,r2,8
8112c31c:	1000111e 	bne	r2,zero,8112c364 <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
8112c320:	e0bffb17 	ldw	r2,-20(fp)
8112c324:	10c00d83 	ldbu	r3,54(r2)
8112c328:	d0a08803 	ldbu	r2,-32224(gp)
8112c32c:	1884b03a 	or	r2,r3,r2
8112c330:	d0a08805 	stb	r2,-32224(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
8112c334:	e0fffa03 	ldbu	r3,-24(fp)
8112c338:	e13ffa03 	ldbu	r4,-24(fp)
8112c33c:	d0a08844 	addi	r2,gp,-32223
8112c340:	2085883a 	add	r2,r4,r2
8112c344:	11000003 	ldbu	r4,0(r2)
8112c348:	e0bffb17 	ldw	r2,-20(fp)
8112c34c:	10800d43 	ldbu	r2,53(r2)
8112c350:	2084b03a 	or	r2,r4,r2
8112c354:	1009883a 	mov	r4,r2
8112c358:	d0a08844 	addi	r2,gp,-32223
8112c35c:	1885883a 	add	r2,r3,r2
8112c360:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
8112c364:	e17ffc17 	ldw	r5,-16(fp)
8112c368:	e13ffb17 	ldw	r4,-20(fp)
8112c36c:	112c6240 	call	8112c624 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
8112c370:	e0bffb17 	ldw	r2,-20(fp)
8112c374:	10800817 	ldw	r2,32(r2)
8112c378:	10000826 	beq	r2,zero,8112c39c <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112c37c:	e0bffb17 	ldw	r2,-20(fp)
8112c380:	10800817 	ldw	r2,32(r2)
8112c384:	100b883a 	mov	r5,r2
8112c388:	e13ffb17 	ldw	r4,-20(fp)
8112c38c:	112c6e40 	call	8112c6e4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
8112c390:	e0bffb17 	ldw	r2,-20(fp)
8112c394:	e0fffc17 	ldw	r3,-16(fp)
8112c398:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
8112c39c:	e0bffa83 	ldbu	r2,-22(fp)
}
8112c3a0:	e037883a 	mov	sp,fp
8112c3a4:	dfc00117 	ldw	ra,4(sp)
8112c3a8:	df000017 	ldw	fp,0(sp)
8112c3ac:	dec00204 	addi	sp,sp,8
8112c3b0:	f800283a 	ret

8112c3b4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
8112c3b4:	defffd04 	addi	sp,sp,-12
8112c3b8:	de00012e 	bgeu	sp,et,8112c3c0 <OS_EventTaskWait+0xc>
8112c3bc:	003b68fa 	trap	3
8112c3c0:	df000215 	stw	fp,8(sp)
8112c3c4:	df000204 	addi	fp,sp,8
8112c3c8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
8112c3cc:	d0a08c17 	ldw	r2,-32208(gp)
8112c3d0:	e0ffff17 	ldw	r3,-4(fp)
8112c3d4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
8112c3d8:	d0a08c17 	ldw	r2,-32208(gp)
8112c3dc:	10800d03 	ldbu	r2,52(r2)
8112c3e0:	10803fcc 	andi	r2,r2,255
8112c3e4:	d0e08c17 	ldw	r3,-32208(gp)
8112c3e8:	18c00d03 	ldbu	r3,52(r3)
8112c3ec:	18c03fcc 	andi	r3,r3,255
8112c3f0:	e13fff17 	ldw	r4,-4(fp)
8112c3f4:	20c7883a 	add	r3,r4,r3
8112c3f8:	18c002c4 	addi	r3,r3,11
8112c3fc:	19000003 	ldbu	r4,0(r3)
8112c400:	d0e08c17 	ldw	r3,-32208(gp)
8112c404:	18c00d43 	ldbu	r3,53(r3)
8112c408:	20c6b03a 	or	r3,r4,r3
8112c40c:	1809883a 	mov	r4,r3
8112c410:	e0ffff17 	ldw	r3,-4(fp)
8112c414:	1885883a 	add	r2,r3,r2
8112c418:	108002c4 	addi	r2,r2,11
8112c41c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
8112c420:	e0bfff17 	ldw	r2,-4(fp)
8112c424:	10c00283 	ldbu	r3,10(r2)
8112c428:	d0a08c17 	ldw	r2,-32208(gp)
8112c42c:	10800d83 	ldbu	r2,54(r2)
8112c430:	1884b03a 	or	r2,r3,r2
8112c434:	1007883a 	mov	r3,r2
8112c438:	e0bfff17 	ldw	r2,-4(fp)
8112c43c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8112c440:	d0a08c17 	ldw	r2,-32208(gp)
8112c444:	10800d03 	ldbu	r2,52(r2)
8112c448:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112c44c:	e0fffe03 	ldbu	r3,-8(fp)
8112c450:	e13ffe03 	ldbu	r4,-8(fp)
8112c454:	d0a08844 	addi	r2,gp,-32223
8112c458:	2085883a 	add	r2,r4,r2
8112c45c:	10800003 	ldbu	r2,0(r2)
8112c460:	1009883a 	mov	r4,r2
8112c464:	d0a08c17 	ldw	r2,-32208(gp)
8112c468:	10800d43 	ldbu	r2,53(r2)
8112c46c:	0084303a 	nor	r2,zero,r2
8112c470:	2084703a 	and	r2,r4,r2
8112c474:	1009883a 	mov	r4,r2
8112c478:	d0a08844 	addi	r2,gp,-32223
8112c47c:	1885883a 	add	r2,r3,r2
8112c480:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112c484:	e0fffe03 	ldbu	r3,-8(fp)
8112c488:	d0a08844 	addi	r2,gp,-32223
8112c48c:	1885883a 	add	r2,r3,r2
8112c490:	10800003 	ldbu	r2,0(r2)
8112c494:	10803fcc 	andi	r2,r2,255
8112c498:	1000071e 	bne	r2,zero,8112c4b8 <OS_EventTaskWait+0x104>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8112c49c:	d0a08c17 	ldw	r2,-32208(gp)
8112c4a0:	10800d83 	ldbu	r2,54(r2)
8112c4a4:	0084303a 	nor	r2,zero,r2
8112c4a8:	1007883a 	mov	r3,r2
8112c4ac:	d0a08803 	ldbu	r2,-32224(gp)
8112c4b0:	1884703a 	and	r2,r3,r2
8112c4b4:	d0a08805 	stb	r2,-32224(gp)
    }
}
8112c4b8:	0001883a 	nop
8112c4bc:	e037883a 	mov	sp,fp
8112c4c0:	df000017 	ldw	fp,0(sp)
8112c4c4:	dec00104 	addi	sp,sp,4
8112c4c8:	f800283a 	ret

8112c4cc <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
8112c4cc:	defffb04 	addi	sp,sp,-20
8112c4d0:	de00012e 	bgeu	sp,et,8112c4d8 <OS_EventTaskWaitMulti+0xc>
8112c4d4:	003b68fa 	trap	3
8112c4d8:	df000415 	stw	fp,16(sp)
8112c4dc:	df000404 	addi	fp,sp,16
8112c4e0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
8112c4e4:	d0a08c17 	ldw	r2,-32208(gp)
8112c4e8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
8112c4ec:	d0a08c17 	ldw	r2,-32208(gp)
8112c4f0:	e0ffff17 	ldw	r3,-4(fp)
8112c4f4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
8112c4f8:	e0bfff17 	ldw	r2,-4(fp)
8112c4fc:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
8112c500:	e0bffc17 	ldw	r2,-16(fp)
8112c504:	10800017 	ldw	r2,0(r2)
8112c508:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112c50c:	00002006 	br	8112c590 <OS_EventTaskWaitMulti+0xc4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
8112c510:	d0a08c17 	ldw	r2,-32208(gp)
8112c514:	10800d03 	ldbu	r2,52(r2)
8112c518:	10803fcc 	andi	r2,r2,255
8112c51c:	d0e08c17 	ldw	r3,-32208(gp)
8112c520:	18c00d03 	ldbu	r3,52(r3)
8112c524:	18c03fcc 	andi	r3,r3,255
8112c528:	e13ffd17 	ldw	r4,-12(fp)
8112c52c:	20c7883a 	add	r3,r4,r3
8112c530:	18c002c4 	addi	r3,r3,11
8112c534:	19000003 	ldbu	r4,0(r3)
8112c538:	d0e08c17 	ldw	r3,-32208(gp)
8112c53c:	18c00d43 	ldbu	r3,53(r3)
8112c540:	20c6b03a 	or	r3,r4,r3
8112c544:	1809883a 	mov	r4,r3
8112c548:	e0fffd17 	ldw	r3,-12(fp)
8112c54c:	1885883a 	add	r2,r3,r2
8112c550:	108002c4 	addi	r2,r2,11
8112c554:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
8112c558:	e0bffd17 	ldw	r2,-12(fp)
8112c55c:	10c00283 	ldbu	r3,10(r2)
8112c560:	d0a08c17 	ldw	r2,-32208(gp)
8112c564:	10800d83 	ldbu	r2,54(r2)
8112c568:	1884b03a 	or	r2,r3,r2
8112c56c:	1007883a 	mov	r3,r2
8112c570:	e0bffd17 	ldw	r2,-12(fp)
8112c574:	10c00285 	stb	r3,10(r2)
        pevents++;
8112c578:	e0bffc17 	ldw	r2,-16(fp)
8112c57c:	10800104 	addi	r2,r2,4
8112c580:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
8112c584:	e0bffc17 	ldw	r2,-16(fp)
8112c588:	10800017 	ldw	r2,0(r2)
8112c58c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112c590:	e0bffd17 	ldw	r2,-12(fp)
8112c594:	103fde1e 	bne	r2,zero,8112c510 <__reset+0xfb10c510>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8112c598:	d0a08c17 	ldw	r2,-32208(gp)
8112c59c:	10800d03 	ldbu	r2,52(r2)
8112c5a0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112c5a4:	e0fffe03 	ldbu	r3,-8(fp)
8112c5a8:	e13ffe03 	ldbu	r4,-8(fp)
8112c5ac:	d0a08844 	addi	r2,gp,-32223
8112c5b0:	2085883a 	add	r2,r4,r2
8112c5b4:	10800003 	ldbu	r2,0(r2)
8112c5b8:	1009883a 	mov	r4,r2
8112c5bc:	d0a08c17 	ldw	r2,-32208(gp)
8112c5c0:	10800d43 	ldbu	r2,53(r2)
8112c5c4:	0084303a 	nor	r2,zero,r2
8112c5c8:	2084703a 	and	r2,r4,r2
8112c5cc:	1009883a 	mov	r4,r2
8112c5d0:	d0a08844 	addi	r2,gp,-32223
8112c5d4:	1885883a 	add	r2,r3,r2
8112c5d8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112c5dc:	e0fffe03 	ldbu	r3,-8(fp)
8112c5e0:	d0a08844 	addi	r2,gp,-32223
8112c5e4:	1885883a 	add	r2,r3,r2
8112c5e8:	10800003 	ldbu	r2,0(r2)
8112c5ec:	10803fcc 	andi	r2,r2,255
8112c5f0:	1000071e 	bne	r2,zero,8112c610 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8112c5f4:	d0a08c17 	ldw	r2,-32208(gp)
8112c5f8:	10800d83 	ldbu	r2,54(r2)
8112c5fc:	0084303a 	nor	r2,zero,r2
8112c600:	1007883a 	mov	r3,r2
8112c604:	d0a08803 	ldbu	r2,-32224(gp)
8112c608:	1884703a 	and	r2,r3,r2
8112c60c:	d0a08805 	stb	r2,-32224(gp)
    }
}
8112c610:	0001883a 	nop
8112c614:	e037883a 	mov	sp,fp
8112c618:	df000017 	ldw	fp,0(sp)
8112c61c:	dec00104 	addi	sp,sp,4
8112c620:	f800283a 	ret

8112c624 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
8112c624:	defffc04 	addi	sp,sp,-16
8112c628:	de00012e 	bgeu	sp,et,8112c630 <OS_EventTaskRemove+0xc>
8112c62c:	003b68fa 	trap	3
8112c630:	df000315 	stw	fp,12(sp)
8112c634:	df000304 	addi	fp,sp,12
8112c638:	e13ffe15 	stw	r4,-8(fp)
8112c63c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
8112c640:	e0bffe17 	ldw	r2,-8(fp)
8112c644:	10800d03 	ldbu	r2,52(r2)
8112c648:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
8112c64c:	e0bffd03 	ldbu	r2,-12(fp)
8112c650:	e0fffd03 	ldbu	r3,-12(fp)
8112c654:	e13fff17 	ldw	r4,-4(fp)
8112c658:	20c7883a 	add	r3,r4,r3
8112c65c:	18c002c4 	addi	r3,r3,11
8112c660:	18c00003 	ldbu	r3,0(r3)
8112c664:	1809883a 	mov	r4,r3
8112c668:	e0fffe17 	ldw	r3,-8(fp)
8112c66c:	18c00d43 	ldbu	r3,53(r3)
8112c670:	00c6303a 	nor	r3,zero,r3
8112c674:	20c6703a 	and	r3,r4,r3
8112c678:	1809883a 	mov	r4,r3
8112c67c:	e0ffff17 	ldw	r3,-4(fp)
8112c680:	1885883a 	add	r2,r3,r2
8112c684:	108002c4 	addi	r2,r2,11
8112c688:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
8112c68c:	e0bffd03 	ldbu	r2,-12(fp)
8112c690:	e0ffff17 	ldw	r3,-4(fp)
8112c694:	1885883a 	add	r2,r3,r2
8112c698:	108002c4 	addi	r2,r2,11
8112c69c:	10800003 	ldbu	r2,0(r2)
8112c6a0:	10803fcc 	andi	r2,r2,255
8112c6a4:	10000a1e 	bne	r2,zero,8112c6d0 <OS_EventTaskRemove+0xac>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
8112c6a8:	e0bfff17 	ldw	r2,-4(fp)
8112c6ac:	10800283 	ldbu	r2,10(r2)
8112c6b0:	1007883a 	mov	r3,r2
8112c6b4:	e0bffe17 	ldw	r2,-8(fp)
8112c6b8:	10800d83 	ldbu	r2,54(r2)
8112c6bc:	0084303a 	nor	r2,zero,r2
8112c6c0:	1884703a 	and	r2,r3,r2
8112c6c4:	1007883a 	mov	r3,r2
8112c6c8:	e0bfff17 	ldw	r2,-4(fp)
8112c6cc:	10c00285 	stb	r3,10(r2)
    }
}
8112c6d0:	0001883a 	nop
8112c6d4:	e037883a 	mov	sp,fp
8112c6d8:	df000017 	ldw	fp,0(sp)
8112c6dc:	dec00104 	addi	sp,sp,4
8112c6e0:	f800283a 	ret

8112c6e4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
8112c6e4:	defffa04 	addi	sp,sp,-24
8112c6e8:	de00012e 	bgeu	sp,et,8112c6f0 <OS_EventTaskRemoveMulti+0xc>
8112c6ec:	003b68fa 	trap	3
8112c6f0:	df000515 	stw	fp,20(sp)
8112c6f4:	df000504 	addi	fp,sp,20
8112c6f8:	e13ffe15 	stw	r4,-8(fp)
8112c6fc:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
8112c700:	e0bffe17 	ldw	r2,-8(fp)
8112c704:	10800d03 	ldbu	r2,52(r2)
8112c708:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
8112c70c:	e0bffe17 	ldw	r2,-8(fp)
8112c710:	10800d83 	ldbu	r2,54(r2)
8112c714:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
8112c718:	e0bffe17 	ldw	r2,-8(fp)
8112c71c:	10800d43 	ldbu	r2,53(r2)
8112c720:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
8112c724:	e0bfff17 	ldw	r2,-4(fp)
8112c728:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
8112c72c:	e0bffb17 	ldw	r2,-20(fp)
8112c730:	10800017 	ldw	r2,0(r2)
8112c734:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
8112c738:	00002506 	br	8112c7d0 <OS_EventTaskRemoveMulti+0xec>
        pevent->OSEventTbl[y]  &= ~bitx;
8112c73c:	e0bffd03 	ldbu	r2,-12(fp)
8112c740:	e0fffd03 	ldbu	r3,-12(fp)
8112c744:	e13ffc17 	ldw	r4,-16(fp)
8112c748:	20c7883a 	add	r3,r4,r3
8112c74c:	18c002c4 	addi	r3,r3,11
8112c750:	18c00003 	ldbu	r3,0(r3)
8112c754:	1809883a 	mov	r4,r3
8112c758:	e0fffd83 	ldbu	r3,-10(fp)
8112c75c:	00c6303a 	nor	r3,zero,r3
8112c760:	20c6703a 	and	r3,r4,r3
8112c764:	1809883a 	mov	r4,r3
8112c768:	e0fffc17 	ldw	r3,-16(fp)
8112c76c:	1885883a 	add	r2,r3,r2
8112c770:	108002c4 	addi	r2,r2,11
8112c774:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
8112c778:	e0bffd03 	ldbu	r2,-12(fp)
8112c77c:	e0fffc17 	ldw	r3,-16(fp)
8112c780:	1885883a 	add	r2,r3,r2
8112c784:	108002c4 	addi	r2,r2,11
8112c788:	10800003 	ldbu	r2,0(r2)
8112c78c:	10803fcc 	andi	r2,r2,255
8112c790:	1000091e 	bne	r2,zero,8112c7b8 <OS_EventTaskRemoveMulti+0xd4>
            pevent->OSEventGrp &= ~bity;
8112c794:	e0bffc17 	ldw	r2,-16(fp)
8112c798:	10800283 	ldbu	r2,10(r2)
8112c79c:	1007883a 	mov	r3,r2
8112c7a0:	e0bffd43 	ldbu	r2,-11(fp)
8112c7a4:	0084303a 	nor	r2,zero,r2
8112c7a8:	1884703a 	and	r2,r3,r2
8112c7ac:	1007883a 	mov	r3,r2
8112c7b0:	e0bffc17 	ldw	r2,-16(fp)
8112c7b4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
8112c7b8:	e0bffb17 	ldw	r2,-20(fp)
8112c7bc:	10800104 	addi	r2,r2,4
8112c7c0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
8112c7c4:	e0bffb17 	ldw	r2,-20(fp)
8112c7c8:	10800017 	ldw	r2,0(r2)
8112c7cc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
8112c7d0:	e0bffc17 	ldw	r2,-16(fp)
8112c7d4:	103fd91e 	bne	r2,zero,8112c73c <__reset+0xfb10c73c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
8112c7d8:	0001883a 	nop
8112c7dc:	e037883a 	mov	sp,fp
8112c7e0:	df000017 	ldw	fp,0(sp)
8112c7e4:	dec00104 	addi	sp,sp,4
8112c7e8:	f800283a 	ret

8112c7ec <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
8112c7ec:	defffc04 	addi	sp,sp,-16
8112c7f0:	de00012e 	bgeu	sp,et,8112c7f8 <OS_EventWaitListInit+0xc>
8112c7f4:	003b68fa 	trap	3
8112c7f8:	df000315 	stw	fp,12(sp)
8112c7fc:	df000304 	addi	fp,sp,12
8112c800:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
8112c804:	e0bfff17 	ldw	r2,-4(fp)
8112c808:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
8112c80c:	e0bfff17 	ldw	r2,-4(fp)
8112c810:	108002c4 	addi	r2,r2,11
8112c814:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112c818:	e03ffe05 	stb	zero,-8(fp)
8112c81c:	00000706 	br	8112c83c <OS_EventWaitListInit+0x50>
        *ptbl++ = 0;
8112c820:	e0bffd17 	ldw	r2,-12(fp)
8112c824:	10c00044 	addi	r3,r2,1
8112c828:	e0fffd15 	stw	r3,-12(fp)
8112c82c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112c830:	e0bffe03 	ldbu	r2,-8(fp)
8112c834:	10800044 	addi	r2,r2,1
8112c838:	e0bffe05 	stb	r2,-8(fp)
8112c83c:	e0bffe03 	ldbu	r2,-8(fp)
8112c840:	108001b0 	cmpltui	r2,r2,6
8112c844:	103ff61e 	bne	r2,zero,8112c820 <__reset+0xfb10c820>
        *ptbl++ = 0;
    }
}
8112c848:	0001883a 	nop
8112c84c:	e037883a 	mov	sp,fp
8112c850:	df000017 	ldw	fp,0(sp)
8112c854:	dec00104 	addi	sp,sp,4
8112c858:	f800283a 	ret

8112c85c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
8112c85c:	defffb04 	addi	sp,sp,-20
8112c860:	de00012e 	bgeu	sp,et,8112c868 <OS_InitEventList+0xc>
8112c864:	003b68fa 	trap	3
8112c868:	dfc00415 	stw	ra,16(sp)
8112c86c:	df000315 	stw	fp,12(sp)
8112c870:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
8112c874:	01430c04 	movi	r5,3120
8112c878:	01204574 	movhi	r4,33045
8112c87c:	2119ae04 	addi	r4,r4,26296
8112c880:	112cc040 	call	8112cc04 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
8112c884:	00a04574 	movhi	r2,33045
8112c888:	1099ae04 	addi	r2,r2,26296
8112c88c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
8112c890:	00a04574 	movhi	r2,33045
8112c894:	1099bb04 	addi	r2,r2,26348
8112c898:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8112c89c:	e03ffd0d 	sth	zero,-12(fp)
8112c8a0:	00001306 	br	8112c8f0 <OS_InitEventList+0x94>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112c8a4:	e0bffe17 	ldw	r2,-8(fp)
8112c8a8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
8112c8ac:	e0bffe17 	ldw	r2,-8(fp)
8112c8b0:	e0ffff17 	ldw	r3,-4(fp)
8112c8b4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
8112c8b8:	e0bffe17 	ldw	r2,-8(fp)
8112c8bc:	00c00fc4 	movi	r3,63
8112c8c0:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
8112c8c4:	e0bffe17 	ldw	r2,-8(fp)
8112c8c8:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
8112c8cc:	e0bffe17 	ldw	r2,-8(fp)
8112c8d0:	10800d04 	addi	r2,r2,52
8112c8d4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
8112c8d8:	e0bfff17 	ldw	r2,-4(fp)
8112c8dc:	10800d04 	addi	r2,r2,52
8112c8e0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8112c8e4:	e0bffd0b 	ldhu	r2,-12(fp)
8112c8e8:	10800044 	addi	r2,r2,1
8112c8ec:	e0bffd0d 	sth	r2,-12(fp)
8112c8f0:	e0bffd0b 	ldhu	r2,-12(fp)
8112c8f4:	10800ef0 	cmpltui	r2,r2,59
8112c8f8:	103fea1e 	bne	r2,zero,8112c8a4 <__reset+0xfb10c8a4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
8112c8fc:	e0bffe17 	ldw	r2,-8(fp)
8112c900:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
8112c904:	e0bffe17 	ldw	r2,-8(fp)
8112c908:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
8112c90c:	e0bffe17 	ldw	r2,-8(fp)
8112c910:	00c00fc4 	movi	r3,63
8112c914:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
8112c918:	e0bffe17 	ldw	r2,-8(fp)
8112c91c:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
8112c920:	00a04574 	movhi	r2,33045
8112c924:	1099ae04 	addi	r2,r2,26296
8112c928:	d0a08a15 	stw	r2,-32216(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
8112c92c:	0001883a 	nop
8112c930:	e037883a 	mov	sp,fp
8112c934:	dfc00117 	ldw	ra,4(sp)
8112c938:	df000017 	ldw	fp,0(sp)
8112c93c:	dec00204 	addi	sp,sp,8
8112c940:	f800283a 	ret

8112c944 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
8112c944:	deffff04 	addi	sp,sp,-4
8112c948:	de00012e 	bgeu	sp,et,8112c950 <OS_InitMisc+0xc>
8112c94c:	003b68fa 	trap	3
8112c950:	df000015 	stw	fp,0(sp)
8112c954:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
8112c958:	d0208e15 	stw	zero,-32200(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
8112c95c:	d0208b05 	stb	zero,-32212(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
8112c960:	d0207905 	stb	zero,-32284(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
8112c964:	d0208445 	stb	zero,-32239(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
8112c968:	d0207b05 	stb	zero,-32276(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
8112c96c:	d0208015 	stw	zero,-32256(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
8112c970:	d0207c15 	stw	zero,-32272(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
8112c974:	d0209215 	stw	zero,-32184(gp)
    OSIdleCtrMax  = 0L;
8112c978:	d0208215 	stw	zero,-32248(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
8112c97c:	d0209105 	stb	zero,-32188(gp)
#endif
}
8112c980:	0001883a 	nop
8112c984:	e037883a 	mov	sp,fp
8112c988:	df000017 	ldw	fp,0(sp)
8112c98c:	dec00104 	addi	sp,sp,4
8112c990:	f800283a 	ret

8112c994 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
8112c994:	defffd04 	addi	sp,sp,-12
8112c998:	de00012e 	bgeu	sp,et,8112c9a0 <OS_InitRdyList+0xc>
8112c99c:	003b68fa 	trap	3
8112c9a0:	df000215 	stw	fp,8(sp)
8112c9a4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
8112c9a8:	d0208805 	stb	zero,-32224(gp)
    prdytbl       = &OSRdyTbl[0];
8112c9ac:	d0a08844 	addi	r2,gp,-32223
8112c9b0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
8112c9b4:	e03ffe05 	stb	zero,-8(fp)
8112c9b8:	00000706 	br	8112c9d8 <OS_InitRdyList+0x44>
        *prdytbl++ = 0;
8112c9bc:	e0bfff17 	ldw	r2,-4(fp)
8112c9c0:	10c00044 	addi	r3,r2,1
8112c9c4:	e0ffff15 	stw	r3,-4(fp)
8112c9c8:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
8112c9cc:	e0bffe03 	ldbu	r2,-8(fp)
8112c9d0:	10800044 	addi	r2,r2,1
8112c9d4:	e0bffe05 	stb	r2,-8(fp)
8112c9d8:	e0bffe03 	ldbu	r2,-8(fp)
8112c9dc:	108001b0 	cmpltui	r2,r2,6
8112c9e0:	103ff61e 	bne	r2,zero,8112c9bc <__reset+0xfb10c9bc>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
8112c9e4:	d0207dc5 	stb	zero,-32265(gp)
    OSPrioHighRdy = 0;
8112c9e8:	d0207d85 	stb	zero,-32266(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
8112c9ec:	d0208615 	stw	zero,-32232(gp)
    OSTCBCur      = (OS_TCB *)0;
8112c9f0:	d0208c15 	stw	zero,-32208(gp)
}
8112c9f4:	0001883a 	nop
8112c9f8:	e037883a 	mov	sp,fp
8112c9fc:	df000017 	ldw	fp,0(sp)
8112ca00:	dec00104 	addi	sp,sp,4
8112ca04:	f800283a 	ret

8112ca08 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
8112ca08:	defff804 	addi	sp,sp,-32
8112ca0c:	de00012e 	bgeu	sp,et,8112ca14 <OS_InitTaskIdle+0xc>
8112ca10:	003b68fa 	trap	3
8112ca14:	dfc00715 	stw	ra,28(sp)
8112ca18:	df000615 	stw	fp,24(sp)
8112ca1c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
8112ca20:	008000c4 	movi	r2,3
8112ca24:	d8800415 	stw	r2,16(sp)
8112ca28:	d8000315 	stw	zero,12(sp)
8112ca2c:	00808004 	movi	r2,512
8112ca30:	d8800215 	stw	r2,8(sp)
8112ca34:	00a04574 	movhi	r2,33045
8112ca38:	1097ae04 	addi	r2,r2,24248
8112ca3c:	d8800115 	stw	r2,4(sp)
8112ca40:	00bfffd4 	movui	r2,65535
8112ca44:	d8800015 	stw	r2,0(sp)
8112ca48:	01c00a04 	movi	r7,40
8112ca4c:	01a04574 	movhi	r6,33045
8112ca50:	3199ad04 	addi	r6,r6,26292
8112ca54:	000b883a 	mov	r5,zero
8112ca58:	012044f4 	movhi	r4,33043
8112ca5c:	2133bf04 	addi	r4,r4,-12548
8112ca60:	11328ec0 	call	811328ec <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
8112ca64:	e1bfff04 	addi	r6,fp,-4
8112ca68:	01604534 	movhi	r5,33044
8112ca6c:	294a5204 	addi	r5,r5,10568
8112ca70:	01000a04 	movi	r4,40
8112ca74:	113311c0 	call	8113311c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
8112ca78:	0001883a 	nop
8112ca7c:	e037883a 	mov	sp,fp
8112ca80:	dfc00117 	ldw	ra,4(sp)
8112ca84:	df000017 	ldw	fp,0(sp)
8112ca88:	dec00204 	addi	sp,sp,8
8112ca8c:	f800283a 	ret

8112ca90 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
8112ca90:	defff804 	addi	sp,sp,-32
8112ca94:	de00012e 	bgeu	sp,et,8112ca9c <OS_InitTaskStat+0xc>
8112ca98:	003b68fa 	trap	3
8112ca9c:	dfc00715 	stw	ra,28(sp)
8112caa0:	df000615 	stw	fp,24(sp)
8112caa4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
8112caa8:	008000c4 	movi	r2,3
8112caac:	d8800415 	stw	r2,16(sp)
8112cab0:	d8000315 	stw	zero,12(sp)
8112cab4:	00810004 	movi	r2,1024
8112cab8:	d8800215 	stw	r2,8(sp)
8112cabc:	00a04574 	movhi	r2,33045
8112cac0:	10914e04 	addi	r2,r2,17720
8112cac4:	d8800115 	stw	r2,4(sp)
8112cac8:	00bfff94 	movui	r2,65534
8112cacc:	d8800015 	stw	r2,0(sp)
8112cad0:	01c009c4 	movi	r7,39
8112cad4:	01a04574 	movhi	r6,33045
8112cad8:	31954d04 	addi	r6,r6,21812
8112cadc:	000b883a 	mov	r5,zero
8112cae0:	012044f4 	movhi	r4,33043
8112cae4:	2133d804 	addi	r4,r4,-12448
8112cae8:	11328ec0 	call	811328ec <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
8112caec:	e1bfff04 	addi	r6,fp,-4
8112caf0:	01604534 	movhi	r5,33044
8112caf4:	294a5604 	addi	r5,r5,10584
8112caf8:	010009c4 	movi	r4,39
8112cafc:	113311c0 	call	8113311c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
8112cb00:	0001883a 	nop
8112cb04:	e037883a 	mov	sp,fp
8112cb08:	dfc00117 	ldw	ra,4(sp)
8112cb0c:	df000017 	ldw	fp,0(sp)
8112cb10:	dec00204 	addi	sp,sp,8
8112cb14:	f800283a 	ret

8112cb18 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
8112cb18:	defffb04 	addi	sp,sp,-20
8112cb1c:	de00012e 	bgeu	sp,et,8112cb24 <OS_InitTCBList+0xc>
8112cb20:	003b68fa 	trap	3
8112cb24:	dfc00415 	stw	ra,16(sp)
8112cb28:	df000315 	stw	fp,12(sp)
8112cb2c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
8112cb30:	01439604 	movi	r5,3672
8112cb34:	01204574 	movhi	r4,33045
8112cb38:	211cba04 	addi	r4,r4,29416
8112cb3c:	112cc040 	call	8112cc04 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
8112cb40:	01402904 	movi	r5,164
8112cb44:	012045b4 	movhi	r4,33046
8112cb48:	21205004 	addi	r4,r4,-32448
8112cb4c:	112cc040 	call	8112cc04 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
8112cb50:	00a04574 	movhi	r2,33045
8112cb54:	109cba04 	addi	r2,r2,29416
8112cb58:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
8112cb5c:	00a04574 	movhi	r2,33045
8112cb60:	109cd504 	addi	r2,r2,29524
8112cb64:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
8112cb68:	e03ffd05 	stb	zero,-12(fp)
8112cb6c:	00001106 	br	8112cbb4 <OS_InitTCBList+0x9c>
        ptcb1->OSTCBNext = ptcb2;
8112cb70:	e0bffe17 	ldw	r2,-8(fp)
8112cb74:	e0ffff17 	ldw	r3,-4(fp)
8112cb78:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
8112cb7c:	e0bffe17 	ldw	r2,-8(fp)
8112cb80:	00c00fc4 	movi	r3,63
8112cb84:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
8112cb88:	e0bffe17 	ldw	r2,-8(fp)
8112cb8c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
8112cb90:	e0bffe17 	ldw	r2,-8(fp)
8112cb94:	10801b04 	addi	r2,r2,108
8112cb98:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
8112cb9c:	e0bfff17 	ldw	r2,-4(fp)
8112cba0:	10801b04 	addi	r2,r2,108
8112cba4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
8112cba8:	e0bffd03 	ldbu	r2,-12(fp)
8112cbac:	10800044 	addi	r2,r2,1
8112cbb0:	e0bffd05 	stb	r2,-12(fp)
8112cbb4:	e0bffd03 	ldbu	r2,-12(fp)
8112cbb8:	10800870 	cmpltui	r2,r2,33
8112cbbc:	103fec1e 	bne	r2,zero,8112cb70 <__reset+0xfb10cb70>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
8112cbc0:	e0bffe17 	ldw	r2,-8(fp)
8112cbc4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
8112cbc8:	e0bffe17 	ldw	r2,-8(fp)
8112cbcc:	00c00fc4 	movi	r3,63
8112cbd0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
8112cbd4:	e0bffe17 	ldw	r2,-8(fp)
8112cbd8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
8112cbdc:	d0207e15 	stw	zero,-32264(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
8112cbe0:	00a04574 	movhi	r2,33045
8112cbe4:	109cba04 	addi	r2,r2,29416
8112cbe8:	d0a08315 	stw	r2,-32244(gp)
}
8112cbec:	0001883a 	nop
8112cbf0:	e037883a 	mov	sp,fp
8112cbf4:	dfc00117 	ldw	ra,4(sp)
8112cbf8:	df000017 	ldw	fp,0(sp)
8112cbfc:	dec00204 	addi	sp,sp,8
8112cc00:	f800283a 	ret

8112cc04 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
8112cc04:	defffd04 	addi	sp,sp,-12
8112cc08:	de00012e 	bgeu	sp,et,8112cc10 <OS_MemClr+0xc>
8112cc0c:	003b68fa 	trap	3
8112cc10:	df000215 	stw	fp,8(sp)
8112cc14:	df000204 	addi	fp,sp,8
8112cc18:	e13ffe15 	stw	r4,-8(fp)
8112cc1c:	2805883a 	mov	r2,r5
8112cc20:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
8112cc24:	00000706 	br	8112cc44 <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
8112cc28:	e0bffe17 	ldw	r2,-8(fp)
8112cc2c:	10c00044 	addi	r3,r2,1
8112cc30:	e0fffe15 	stw	r3,-8(fp)
8112cc34:	10000005 	stb	zero,0(r2)
        size--;
8112cc38:	e0bfff0b 	ldhu	r2,-4(fp)
8112cc3c:	10bfffc4 	addi	r2,r2,-1
8112cc40:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
8112cc44:	e0bfff0b 	ldhu	r2,-4(fp)
8112cc48:	103ff71e 	bne	r2,zero,8112cc28 <__reset+0xfb10cc28>
        *pdest++ = (INT8U)0;
        size--;
    }
}
8112cc4c:	0001883a 	nop
8112cc50:	e037883a 	mov	sp,fp
8112cc54:	df000017 	ldw	fp,0(sp)
8112cc58:	dec00104 	addi	sp,sp,4
8112cc5c:	f800283a 	ret

8112cc60 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
8112cc60:	defffc04 	addi	sp,sp,-16
8112cc64:	de00012e 	bgeu	sp,et,8112cc6c <OS_MemCopy+0xc>
8112cc68:	003b68fa 	trap	3
8112cc6c:	df000315 	stw	fp,12(sp)
8112cc70:	df000304 	addi	fp,sp,12
8112cc74:	e13ffd15 	stw	r4,-12(fp)
8112cc78:	e17ffe15 	stw	r5,-8(fp)
8112cc7c:	3005883a 	mov	r2,r6
8112cc80:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
8112cc84:	00000b06 	br	8112ccb4 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
8112cc88:	e0bffd17 	ldw	r2,-12(fp)
8112cc8c:	10c00044 	addi	r3,r2,1
8112cc90:	e0fffd15 	stw	r3,-12(fp)
8112cc94:	e0fffe17 	ldw	r3,-8(fp)
8112cc98:	19000044 	addi	r4,r3,1
8112cc9c:	e13ffe15 	stw	r4,-8(fp)
8112cca0:	18c00003 	ldbu	r3,0(r3)
8112cca4:	10c00005 	stb	r3,0(r2)
        size--;
8112cca8:	e0bfff0b 	ldhu	r2,-4(fp)
8112ccac:	10bfffc4 	addi	r2,r2,-1
8112ccb0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
8112ccb4:	e0bfff0b 	ldhu	r2,-4(fp)
8112ccb8:	103ff31e 	bne	r2,zero,8112cc88 <__reset+0xfb10cc88>
        *pdest++ = *psrc++;
        size--;
    }
}
8112ccbc:	0001883a 	nop
8112ccc0:	e037883a 	mov	sp,fp
8112ccc4:	df000017 	ldw	fp,0(sp)
8112ccc8:	dec00104 	addi	sp,sp,4
8112cccc:	f800283a 	ret

8112ccd0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
8112ccd0:	defffb04 	addi	sp,sp,-20
8112ccd4:	de00012e 	bgeu	sp,et,8112ccdc <OS_Sched+0xc>
8112ccd8:	003b68fa 	trap	3
8112ccdc:	dfc00415 	stw	ra,16(sp)
8112cce0:	df000315 	stw	fp,12(sp)
8112cce4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112cce8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ccec:	0005303a 	rdctl	r2,status
8112ccf0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ccf4:	e0ffff17 	ldw	r3,-4(fp)
8112ccf8:	00bfff84 	movi	r2,-2
8112ccfc:	1884703a 	and	r2,r3,r2
8112cd00:	1001703a 	wrctl	status,r2
  
  return context;
8112cd04:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
8112cd08:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
8112cd0c:	d0a08b03 	ldbu	r2,-32212(gp)
8112cd10:	10803fcc 	andi	r2,r2,255
8112cd14:	10001a1e 	bne	r2,zero,8112cd80 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
8112cd18:	d0a07903 	ldbu	r2,-32284(gp)
8112cd1c:	10803fcc 	andi	r2,r2,255
8112cd20:	1000171e 	bne	r2,zero,8112cd80 <OS_Sched+0xb0>
            OS_SchedNew();
8112cd24:	112cda80 	call	8112cda8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
8112cd28:	d0e07d83 	ldbu	r3,-32266(gp)
8112cd2c:	d0a07dc3 	ldbu	r2,-32265(gp)
8112cd30:	18c03fcc 	andi	r3,r3,255
8112cd34:	10803fcc 	andi	r2,r2,255
8112cd38:	18801126 	beq	r3,r2,8112cd80 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
8112cd3c:	d0a07d83 	ldbu	r2,-32266(gp)
8112cd40:	10c03fcc 	andi	r3,r2,255
8112cd44:	00a045b4 	movhi	r2,33046
8112cd48:	10a05004 	addi	r2,r2,-32448
8112cd4c:	18c7883a 	add	r3,r3,r3
8112cd50:	18c7883a 	add	r3,r3,r3
8112cd54:	10c5883a 	add	r2,r2,r3
8112cd58:	10800017 	ldw	r2,0(r2)
8112cd5c:	d0a08615 	stw	r2,-32232(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
8112cd60:	d0a08617 	ldw	r2,-32232(gp)
8112cd64:	10c00e17 	ldw	r3,56(r2)
8112cd68:	18c00044 	addi	r3,r3,1
8112cd6c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
8112cd70:	d0a08017 	ldw	r2,-32256(gp)
8112cd74:	10800044 	addi	r2,r2,1
8112cd78:	d0a08015 	stw	r2,-32256(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
8112cd7c:	113ddd00 	call	8113ddd0 <OSCtxSw>
8112cd80:	e0bffd17 	ldw	r2,-12(fp)
8112cd84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cd88:	e0bffe17 	ldw	r2,-8(fp)
8112cd8c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
8112cd90:	0001883a 	nop
8112cd94:	e037883a 	mov	sp,fp
8112cd98:	dfc00117 	ldw	ra,4(sp)
8112cd9c:	df000017 	ldw	fp,0(sp)
8112cda0:	dec00204 	addi	sp,sp,8
8112cda4:	f800283a 	ret

8112cda8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
8112cda8:	defffe04 	addi	sp,sp,-8
8112cdac:	de00012e 	bgeu	sp,et,8112cdb4 <OS_SchedNew+0xc>
8112cdb0:	003b68fa 	trap	3
8112cdb4:	df000115 	stw	fp,4(sp)
8112cdb8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
8112cdbc:	d0a08803 	ldbu	r2,-32224(gp)
8112cdc0:	10c03fcc 	andi	r3,r2,255
8112cdc4:	00a04534 	movhi	r2,33044
8112cdc8:	108a1204 	addi	r2,r2,10312
8112cdcc:	10c5883a 	add	r2,r2,r3
8112cdd0:	10800003 	ldbu	r2,0(r2)
8112cdd4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
8112cdd8:	e0bfff03 	ldbu	r2,-4(fp)
8112cddc:	100490fa 	slli	r2,r2,3
8112cde0:	1009883a 	mov	r4,r2
8112cde4:	e0ffff03 	ldbu	r3,-4(fp)
8112cde8:	d0a08844 	addi	r2,gp,-32223
8112cdec:	1885883a 	add	r2,r3,r2
8112cdf0:	10800003 	ldbu	r2,0(r2)
8112cdf4:	10c03fcc 	andi	r3,r2,255
8112cdf8:	00a04534 	movhi	r2,33044
8112cdfc:	108a1204 	addi	r2,r2,10312
8112ce00:	10c5883a 	add	r2,r2,r3
8112ce04:	10800003 	ldbu	r2,0(r2)
8112ce08:	2085883a 	add	r2,r4,r2
8112ce0c:	d0a07d85 	stb	r2,-32266(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
8112ce10:	0001883a 	nop
8112ce14:	e037883a 	mov	sp,fp
8112ce18:	df000017 	ldw	fp,0(sp)
8112ce1c:	dec00104 	addi	sp,sp,4
8112ce20:	f800283a 	ret

8112ce24 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
8112ce24:	defffc04 	addi	sp,sp,-16
8112ce28:	de00012e 	bgeu	sp,et,8112ce30 <OS_StrCopy+0xc>
8112ce2c:	003b68fa 	trap	3
8112ce30:	df000315 	stw	fp,12(sp)
8112ce34:	df000304 	addi	fp,sp,12
8112ce38:	e13ffe15 	stw	r4,-8(fp)
8112ce3c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
8112ce40:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
8112ce44:	00000b06 	br	8112ce74 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
8112ce48:	e0bffe17 	ldw	r2,-8(fp)
8112ce4c:	10c00044 	addi	r3,r2,1
8112ce50:	e0fffe15 	stw	r3,-8(fp)
8112ce54:	e0ffff17 	ldw	r3,-4(fp)
8112ce58:	19000044 	addi	r4,r3,1
8112ce5c:	e13fff15 	stw	r4,-4(fp)
8112ce60:	18c00003 	ldbu	r3,0(r3)
8112ce64:	10c00005 	stb	r3,0(r2)
        len++;
8112ce68:	e0bffd03 	ldbu	r2,-12(fp)
8112ce6c:	10800044 	addi	r2,r2,1
8112ce70:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112ce74:	e0bfff17 	ldw	r2,-4(fp)
8112ce78:	10800003 	ldbu	r2,0(r2)
8112ce7c:	10803fcc 	andi	r2,r2,255
8112ce80:	103ff11e 	bne	r2,zero,8112ce48 <__reset+0xfb10ce48>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
8112ce84:	e0bffe17 	ldw	r2,-8(fp)
8112ce88:	10000005 	stb	zero,0(r2)
    return (len);
8112ce8c:	e0bffd03 	ldbu	r2,-12(fp)
}
8112ce90:	e037883a 	mov	sp,fp
8112ce94:	df000017 	ldw	fp,0(sp)
8112ce98:	dec00104 	addi	sp,sp,4
8112ce9c:	f800283a 	ret

8112cea0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
8112cea0:	defffd04 	addi	sp,sp,-12
8112cea4:	de00012e 	bgeu	sp,et,8112ceac <OS_StrLen+0xc>
8112cea8:	003b68fa 	trap	3
8112ceac:	df000215 	stw	fp,8(sp)
8112ceb0:	df000204 	addi	fp,sp,8
8112ceb4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
8112ceb8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
8112cebc:	00000606 	br	8112ced8 <OS_StrLen+0x38>
        psrc++;
8112cec0:	e0bfff17 	ldw	r2,-4(fp)
8112cec4:	10800044 	addi	r2,r2,1
8112cec8:	e0bfff15 	stw	r2,-4(fp)
        len++;
8112cecc:	e0bffe03 	ldbu	r2,-8(fp)
8112ced0:	10800044 	addi	r2,r2,1
8112ced4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112ced8:	e0bfff17 	ldw	r2,-4(fp)
8112cedc:	10800003 	ldbu	r2,0(r2)
8112cee0:	10803fcc 	andi	r2,r2,255
8112cee4:	103ff61e 	bne	r2,zero,8112cec0 <__reset+0xfb10cec0>
        psrc++;
        len++;
    }
    return (len);
8112cee8:	e0bffe03 	ldbu	r2,-8(fp)
}
8112ceec:	e037883a 	mov	sp,fp
8112cef0:	df000017 	ldw	fp,0(sp)
8112cef4:	dec00104 	addi	sp,sp,4
8112cef8:	f800283a 	ret

8112cefc <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
8112cefc:	defffa04 	addi	sp,sp,-24
8112cf00:	de00012e 	bgeu	sp,et,8112cf08 <OS_TaskIdle+0xc>
8112cf04:	003b68fa 	trap	3
8112cf08:	dfc00515 	stw	ra,20(sp)
8112cf0c:	df000415 	stw	fp,16(sp)
8112cf10:	df000404 	addi	fp,sp,16
8112cf14:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112cf18:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cf1c:	0005303a 	rdctl	r2,status
8112cf20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cf24:	e0fffd17 	ldw	r3,-12(fp)
8112cf28:	00bfff84 	movi	r2,-2
8112cf2c:	1884703a 	and	r2,r3,r2
8112cf30:	1001703a 	wrctl	status,r2
  
  return context;
8112cf34:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
8112cf38:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
8112cf3c:	d0a07c17 	ldw	r2,-32272(gp)
8112cf40:	10800044 	addi	r2,r2,1
8112cf44:	d0a07c15 	stw	r2,-32272(gp)
8112cf48:	e0bffc17 	ldw	r2,-16(fp)
8112cf4c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cf50:	e0bffe17 	ldw	r2,-8(fp)
8112cf54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
8112cf58:	113e1640 	call	8113e164 <OSTaskIdleHook>
    }
8112cf5c:	003fef06 	br	8112cf1c <__reset+0xfb10cf1c>

8112cf60 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
8112cf60:	defff804 	addi	sp,sp,-32
8112cf64:	de00012e 	bgeu	sp,et,8112cf6c <OS_TaskStat+0xc>
8112cf68:	003b68fa 	trap	3
8112cf6c:	dfc00715 	stw	ra,28(sp)
8112cf70:	df000615 	stw	fp,24(sp)
8112cf74:	dc400515 	stw	r17,20(sp)
8112cf78:	dc000415 	stw	r16,16(sp)
8112cf7c:	df000604 	addi	fp,sp,24
8112cf80:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112cf84:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112cf88:	00000206 	br	8112cf94 <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
8112cf8c:	01003204 	movi	r4,200
8112cf90:	1133a0c0 	call	81133a0c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112cf94:	d0a09103 	ldbu	r2,-32188(gp)
8112cf98:	10803fcc 	andi	r2,r2,255
8112cf9c:	103ffb26 	beq	r2,zero,8112cf8c <__reset+0xfb10cf8c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
8112cfa0:	d0e08217 	ldw	r3,-32248(gp)
8112cfa4:	00947b34 	movhi	r2,20972
8112cfa8:	10a147c4 	addi	r2,r2,-31457
8112cfac:	1888383a 	mulxuu	r4,r3,r2
8112cfb0:	1885383a 	mul	r2,r3,r2
8112cfb4:	1021883a 	mov	r16,r2
8112cfb8:	2023883a 	mov	r17,r4
8112cfbc:	8804d17a 	srli	r2,r17,5
8112cfc0:	d0a08215 	stw	r2,-32248(gp)
    if (OSIdleCtrMax == 0L) {
8112cfc4:	d0a08217 	ldw	r2,-32248(gp)
8112cfc8:	1000031e 	bne	r2,zero,8112cfd8 <OS_TaskStat+0x78>
        OSCPUUsage = 0;
8112cfcc:	d0208405 	stb	zero,-32240(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
8112cfd0:	01003fc4 	movi	r4,255
8112cfd4:	113367c0 	call	8113367c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cfd8:	0005303a 	rdctl	r2,status
8112cfdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cfe0:	e0fffb17 	ldw	r3,-20(fp)
8112cfe4:	00bfff84 	movi	r2,-2
8112cfe8:	1884703a 	and	r2,r3,r2
8112cfec:	1001703a 	wrctl	status,r2
  
  return context;
8112cff0:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
8112cff4:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
8112cff8:	d0a07c17 	ldw	r2,-32272(gp)
8112cffc:	d0a09215 	stw	r2,-32184(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
8112d000:	d0207c15 	stw	zero,-32272(gp)
8112d004:	e0bffa17 	ldw	r2,-24(fp)
8112d008:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d00c:	e0bffc17 	ldw	r2,-16(fp)
8112d010:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
8112d014:	d0e09217 	ldw	r3,-32184(gp)
8112d018:	d0a08217 	ldw	r2,-32248(gp)
8112d01c:	1885203a 	divu	r2,r3,r2
8112d020:	1007883a 	mov	r3,r2
8112d024:	00801904 	movi	r2,100
8112d028:	10c5c83a 	sub	r2,r2,r3
8112d02c:	d0a08405 	stb	r2,-32240(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
8112d030:	113e0940 	call	8113e094 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
8112d034:	112d0440 	call	8112d044 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
8112d038:	01001904 	movi	r4,100
8112d03c:	1133a0c0 	call	81133a0c <OSTimeDly>
    }
8112d040:	003fe506 	br	8112cfd8 <__reset+0xfb10cfd8>

8112d044 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
8112d044:	defffa04 	addi	sp,sp,-24
8112d048:	de00012e 	bgeu	sp,et,8112d050 <OS_TaskStatStkChk+0xc>
8112d04c:	003b68fa 	trap	3
8112d050:	dfc00515 	stw	ra,20(sp)
8112d054:	df000415 	stw	fp,16(sp)
8112d058:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112d05c:	e03ffc05 	stb	zero,-16(fp)
8112d060:	00002406 	br	8112d0f4 <OS_TaskStatStkChk+0xb0>
        err = OSTaskStkChk(prio, &stk_data);
8112d064:	e0bffc03 	ldbu	r2,-16(fp)
8112d068:	e0fffe04 	addi	r3,fp,-8
8112d06c:	180b883a 	mov	r5,r3
8112d070:	1009883a 	mov	r4,r2
8112d074:	11334b40 	call	811334b4 <OSTaskStkChk>
8112d078:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
8112d07c:	e0bffc43 	ldbu	r2,-15(fp)
8112d080:	1000191e 	bne	r2,zero,8112d0e8 <OS_TaskStatStkChk+0xa4>
            ptcb = OSTCBPrioTbl[prio];
8112d084:	e0fffc03 	ldbu	r3,-16(fp)
8112d088:	00a045b4 	movhi	r2,33046
8112d08c:	10a05004 	addi	r2,r2,-32448
8112d090:	18c7883a 	add	r3,r3,r3
8112d094:	18c7883a 	add	r3,r3,r3
8112d098:	10c5883a 	add	r2,r2,r3
8112d09c:	10800017 	ldw	r2,0(r2)
8112d0a0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
8112d0a4:	e0bffd17 	ldw	r2,-12(fp)
8112d0a8:	10000f26 	beq	r2,zero,8112d0e8 <OS_TaskStatStkChk+0xa4>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
8112d0ac:	e0bffd17 	ldw	r2,-12(fp)
8112d0b0:	10800060 	cmpeqi	r2,r2,1
8112d0b4:	10000c1e 	bne	r2,zero,8112d0e8 <OS_TaskStatStkChk+0xa4>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
8112d0b8:	e0bffd17 	ldw	r2,-12(fp)
8112d0bc:	10c00217 	ldw	r3,8(r2)
8112d0c0:	e0bffd17 	ldw	r2,-12(fp)
8112d0c4:	10800317 	ldw	r2,12(r2)
8112d0c8:	1085883a 	add	r2,r2,r2
8112d0cc:	1085883a 	add	r2,r2,r2
8112d0d0:	1887883a 	add	r3,r3,r2
8112d0d4:	e0bffd17 	ldw	r2,-12(fp)
8112d0d8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
8112d0dc:	e0ffff17 	ldw	r3,-4(fp)
8112d0e0:	e0bffd17 	ldw	r2,-12(fp)
8112d0e4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112d0e8:	e0bffc03 	ldbu	r2,-16(fp)
8112d0ec:	10800044 	addi	r2,r2,1
8112d0f0:	e0bffc05 	stb	r2,-16(fp)
8112d0f4:	e0bffc03 	ldbu	r2,-16(fp)
8112d0f8:	10800a70 	cmpltui	r2,r2,41
8112d0fc:	103fd91e 	bne	r2,zero,8112d064 <__reset+0xfb10d064>
#endif
                }
            }
        }
    }
}
8112d100:	0001883a 	nop
8112d104:	e037883a 	mov	sp,fp
8112d108:	dfc00117 	ldw	ra,4(sp)
8112d10c:	df000017 	ldw	fp,0(sp)
8112d110:	dec00204 	addi	sp,sp,8
8112d114:	f800283a 	ret

8112d118 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
8112d118:	defff204 	addi	sp,sp,-56
8112d11c:	de00012e 	bgeu	sp,et,8112d124 <OS_TCBInit+0xc>
8112d120:	003b68fa 	trap	3
8112d124:	dfc00d15 	stw	ra,52(sp)
8112d128:	df000c15 	stw	fp,48(sp)
8112d12c:	df000c04 	addi	fp,sp,48
8112d130:	e17ffc15 	stw	r5,-16(fp)
8112d134:	e1bffd15 	stw	r6,-12(fp)
8112d138:	3807883a 	mov	r3,r7
8112d13c:	e0800417 	ldw	r2,16(fp)
8112d140:	e13ffb05 	stb	r4,-20(fp)
8112d144:	e0fffe0d 	sth	r3,-8(fp)
8112d148:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112d14c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d150:	0005303a 	rdctl	r2,status
8112d154:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d158:	e0fffa17 	ldw	r3,-24(fp)
8112d15c:	00bfff84 	movi	r2,-2
8112d160:	1884703a 	and	r2,r3,r2
8112d164:	1001703a 	wrctl	status,r2
  
  return context;
8112d168:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
8112d16c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
8112d170:	d0a08317 	ldw	r2,-32244(gp)
8112d174:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
8112d178:	e0bff617 	ldw	r2,-40(fp)
8112d17c:	10009326 	beq	r2,zero,8112d3cc <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
8112d180:	e0bff617 	ldw	r2,-40(fp)
8112d184:	10800517 	ldw	r2,20(r2)
8112d188:	d0a08315 	stw	r2,-32244(gp)
8112d18c:	e0bff417 	ldw	r2,-48(fp)
8112d190:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d194:	e0bff817 	ldw	r2,-32(fp)
8112d198:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
8112d19c:	e0bff617 	ldw	r2,-40(fp)
8112d1a0:	e0fffc17 	ldw	r3,-16(fp)
8112d1a4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
8112d1a8:	e0bff617 	ldw	r2,-40(fp)
8112d1ac:	e0fffb03 	ldbu	r3,-20(fp)
8112d1b0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
8112d1b4:	e0bff617 	ldw	r2,-40(fp)
8112d1b8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
8112d1bc:	e0bff617 	ldw	r2,-40(fp)
8112d1c0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
8112d1c4:	e0bff617 	ldw	r2,-40(fp)
8112d1c8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
8112d1cc:	e0bff617 	ldw	r2,-40(fp)
8112d1d0:	e0c00317 	ldw	r3,12(fp)
8112d1d4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
8112d1d8:	e0bff617 	ldw	r2,-40(fp)
8112d1dc:	e0c00217 	ldw	r3,8(fp)
8112d1e0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
8112d1e4:	e0bff617 	ldw	r2,-40(fp)
8112d1e8:	e0fffd17 	ldw	r3,-12(fp)
8112d1ec:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
8112d1f0:	e0bff617 	ldw	r2,-40(fp)
8112d1f4:	e0ffff0b 	ldhu	r3,-4(fp)
8112d1f8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
8112d1fc:	e0bff617 	ldw	r2,-40(fp)
8112d200:	e0fffe0b 	ldhu	r3,-8(fp)
8112d204:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
8112d208:	e0bff617 	ldw	r2,-40(fp)
8112d20c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
8112d210:	e0bffb03 	ldbu	r2,-20(fp)
8112d214:	1004d0fa 	srli	r2,r2,3
8112d218:	1007883a 	mov	r3,r2
8112d21c:	e0bff617 	ldw	r2,-40(fp)
8112d220:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
8112d224:	e0bffb03 	ldbu	r2,-20(fp)
8112d228:	108001cc 	andi	r2,r2,7
8112d22c:	1007883a 	mov	r3,r2
8112d230:	e0bff617 	ldw	r2,-40(fp)
8112d234:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
8112d238:	e0bff617 	ldw	r2,-40(fp)
8112d23c:	10800d03 	ldbu	r2,52(r2)
8112d240:	10803fcc 	andi	r2,r2,255
8112d244:	00c00044 	movi	r3,1
8112d248:	1884983a 	sll	r2,r3,r2
8112d24c:	1007883a 	mov	r3,r2
8112d250:	e0bff617 	ldw	r2,-40(fp)
8112d254:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
8112d258:	e0bff617 	ldw	r2,-40(fp)
8112d25c:	10800cc3 	ldbu	r2,51(r2)
8112d260:	10803fcc 	andi	r2,r2,255
8112d264:	00c00044 	movi	r3,1
8112d268:	1884983a 	sll	r2,r3,r2
8112d26c:	1007883a 	mov	r3,r2
8112d270:	e0bff617 	ldw	r2,-40(fp)
8112d274:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
8112d278:	e0bff617 	ldw	r2,-40(fp)
8112d27c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
8112d280:	e0bff617 	ldw	r2,-40(fp)
8112d284:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
8112d288:	e0bff617 	ldw	r2,-40(fp)
8112d28c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
8112d290:	e0bff617 	ldw	r2,-40(fp)
8112d294:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
8112d298:	e0bff617 	ldw	r2,-40(fp)
8112d29c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
8112d2a0:	e0bff617 	ldw	r2,-40(fp)
8112d2a4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
8112d2a8:	e0bff617 	ldw	r2,-40(fp)
8112d2ac:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
8112d2b0:	e0bff617 	ldw	r2,-40(fp)
8112d2b4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
8112d2b8:	e0bff617 	ldw	r2,-40(fp)
8112d2bc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
8112d2c0:	e0bff617 	ldw	r2,-40(fp)
8112d2c4:	00c00fc4 	movi	r3,63
8112d2c8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112d2cc:	e0bff617 	ldw	r2,-40(fp)
8112d2d0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
8112d2d4:	e13ff617 	ldw	r4,-40(fp)
8112d2d8:	113e18c0 	call	8113e18c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
8112d2dc:	e13ff617 	ldw	r4,-40(fp)
8112d2e0:	113e0140 	call	8113e014 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d2e4:	0005303a 	rdctl	r2,status
8112d2e8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d2ec:	e0fff517 	ldw	r3,-44(fp)
8112d2f0:	00bfff84 	movi	r2,-2
8112d2f4:	1884703a 	and	r2,r3,r2
8112d2f8:	1001703a 	wrctl	status,r2
  
  return context;
8112d2fc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
8112d300:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
8112d304:	e0fffb03 	ldbu	r3,-20(fp)
8112d308:	00a045b4 	movhi	r2,33046
8112d30c:	10a05004 	addi	r2,r2,-32448
8112d310:	18c7883a 	add	r3,r3,r3
8112d314:	18c7883a 	add	r3,r3,r3
8112d318:	10c5883a 	add	r2,r2,r3
8112d31c:	e0fff617 	ldw	r3,-40(fp)
8112d320:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
8112d324:	d0e07e17 	ldw	r3,-32264(gp)
8112d328:	e0bff617 	ldw	r2,-40(fp)
8112d32c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
8112d330:	e0bff617 	ldw	r2,-40(fp)
8112d334:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
8112d338:	d0a07e17 	ldw	r2,-32264(gp)
8112d33c:	10000326 	beq	r2,zero,8112d34c <OS_TCBInit+0x234>
            OSTCBList->OSTCBPrev = ptcb;
8112d340:	d0a07e17 	ldw	r2,-32264(gp)
8112d344:	e0fff617 	ldw	r3,-40(fp)
8112d348:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
8112d34c:	e0bff617 	ldw	r2,-40(fp)
8112d350:	d0a07e15 	stw	r2,-32264(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
8112d354:	e0bff617 	ldw	r2,-40(fp)
8112d358:	10c00d83 	ldbu	r3,54(r2)
8112d35c:	d0a08803 	ldbu	r2,-32224(gp)
8112d360:	1884b03a 	or	r2,r3,r2
8112d364:	d0a08805 	stb	r2,-32224(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d368:	e0bff617 	ldw	r2,-40(fp)
8112d36c:	10800d03 	ldbu	r2,52(r2)
8112d370:	10c03fcc 	andi	r3,r2,255
8112d374:	e0bff617 	ldw	r2,-40(fp)
8112d378:	10800d03 	ldbu	r2,52(r2)
8112d37c:	11003fcc 	andi	r4,r2,255
8112d380:	d0a08844 	addi	r2,gp,-32223
8112d384:	2085883a 	add	r2,r4,r2
8112d388:	11000003 	ldbu	r4,0(r2)
8112d38c:	e0bff617 	ldw	r2,-40(fp)
8112d390:	10800d43 	ldbu	r2,53(r2)
8112d394:	2084b03a 	or	r2,r4,r2
8112d398:	1009883a 	mov	r4,r2
8112d39c:	d0a08844 	addi	r2,gp,-32223
8112d3a0:	1885883a 	add	r2,r3,r2
8112d3a4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
8112d3a8:	d0a08443 	ldbu	r2,-32239(gp)
8112d3ac:	10800044 	addi	r2,r2,1
8112d3b0:	d0a08445 	stb	r2,-32239(gp)
8112d3b4:	e0bff417 	ldw	r2,-48(fp)
8112d3b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d3bc:	e0bff717 	ldw	r2,-36(fp)
8112d3c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112d3c4:	0005883a 	mov	r2,zero
8112d3c8:	00000506 	br	8112d3e0 <OS_TCBInit+0x2c8>
8112d3cc:	e0bff417 	ldw	r2,-48(fp)
8112d3d0:	e0bff915 	stw	r2,-28(fp)
8112d3d4:	e0bff917 	ldw	r2,-28(fp)
8112d3d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
8112d3dc:	00801084 	movi	r2,66
}
8112d3e0:	e037883a 	mov	sp,fp
8112d3e4:	dfc00117 	ldw	ra,4(sp)
8112d3e8:	df000017 	ldw	fp,0(sp)
8112d3ec:	dec00204 	addi	sp,sp,8
8112d3f0:	f800283a 	ret

8112d3f4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
8112d3f4:	defffe04 	addi	sp,sp,-8
8112d3f8:	de00012e 	bgeu	sp,et,8112d400 <OSDebugInit+0xc>
8112d3fc:	003b68fa 	trap	3
8112d400:	df000115 	stw	fp,4(sp)
8112d404:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
8112d408:	d0a01804 	addi	r2,gp,-32672
8112d40c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
8112d410:	d0a01904 	addi	r2,gp,-32668
8112d414:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
8112d418:	d0a01a84 	addi	r2,gp,-32662
8112d41c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
8112d420:	d0a01b04 	addi	r2,gp,-32660
8112d424:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
8112d428:	d0a01a04 	addi	r2,gp,-32664
8112d42c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
8112d430:	d0a01b84 	addi	r2,gp,-32658
8112d434:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
8112d438:	d0a01c04 	addi	r2,gp,-32656
8112d43c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
8112d440:	d0a01c84 	addi	r2,gp,-32654
8112d444:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
8112d448:	d0a01d04 	addi	r2,gp,-32652
8112d44c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
8112d450:	d0a01d84 	addi	r2,gp,-32650
8112d454:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
8112d458:	d0a01e04 	addi	r2,gp,-32648
8112d45c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
8112d460:	d0a01e84 	addi	r2,gp,-32646
8112d464:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
8112d468:	d0a01f04 	addi	r2,gp,-32644
8112d46c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
8112d470:	d0a01f84 	addi	r2,gp,-32642
8112d474:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
8112d478:	d0a02004 	addi	r2,gp,-32640
8112d47c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
8112d480:	d0a02084 	addi	r2,gp,-32638
8112d484:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
8112d488:	d0a02104 	addi	r2,gp,-32636
8112d48c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
8112d490:	d0a02184 	addi	r2,gp,-32634
8112d494:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
8112d498:	d0a02204 	addi	r2,gp,-32632
8112d49c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
8112d4a0:	d0a02284 	addi	r2,gp,-32630
8112d4a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
8112d4a8:	d0a02304 	addi	r2,gp,-32628
8112d4ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
8112d4b0:	d0a02384 	addi	r2,gp,-32626
8112d4b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
8112d4b8:	d0a02404 	addi	r2,gp,-32624
8112d4bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
8112d4c0:	d0a02484 	addi	r2,gp,-32622
8112d4c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
8112d4c8:	d0a02504 	addi	r2,gp,-32620
8112d4cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
8112d4d0:	d0a02584 	addi	r2,gp,-32618
8112d4d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
8112d4d8:	d0a02604 	addi	r2,gp,-32616
8112d4dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
8112d4e0:	d0a02684 	addi	r2,gp,-32614
8112d4e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
8112d4e8:	d0a02704 	addi	r2,gp,-32612
8112d4ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
8112d4f0:	d0a02784 	addi	r2,gp,-32610
8112d4f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
8112d4f8:	d0a02804 	addi	r2,gp,-32608
8112d4fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
8112d500:	d0a02884 	addi	r2,gp,-32606
8112d504:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
8112d508:	d0a02904 	addi	r2,gp,-32604
8112d50c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
8112d510:	d0a02984 	addi	r2,gp,-32602
8112d514:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
8112d518:	d0a02a04 	addi	r2,gp,-32600
8112d51c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
8112d520:	d0a02a84 	addi	r2,gp,-32598
8112d524:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
8112d528:	d0a02b04 	addi	r2,gp,-32596
8112d52c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
8112d530:	d0a02b84 	addi	r2,gp,-32594
8112d534:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
8112d538:	d0a02c04 	addi	r2,gp,-32592
8112d53c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
8112d540:	d0a02c84 	addi	r2,gp,-32590
8112d544:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
8112d548:	d0a02d04 	addi	r2,gp,-32588
8112d54c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
8112d550:	d0a02d84 	addi	r2,gp,-32586
8112d554:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
8112d558:	d0a02e04 	addi	r2,gp,-32584
8112d55c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
8112d560:	d0a02e84 	addi	r2,gp,-32582
8112d564:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
8112d568:	00a04574 	movhi	r2,33045
8112d56c:	108dda04 	addi	r2,r2,14184
8112d570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
8112d574:	00a04574 	movhi	r2,33045
8112d578:	108c7604 	addi	r2,r2,12760
8112d57c:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
8112d580:	d0a02f84 	addi	r2,gp,-32578
8112d584:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
8112d588:	d0a03004 	addi	r2,gp,-32576
8112d58c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
8112d590:	d0a03084 	addi	r2,gp,-32574
8112d594:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
8112d598:	d0a03104 	addi	r2,gp,-32572
8112d59c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
8112d5a0:	d0a03184 	addi	r2,gp,-32570
8112d5a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
8112d5a8:	d0a03204 	addi	r2,gp,-32568
8112d5ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
8112d5b0:	d0a03284 	addi	r2,gp,-32566
8112d5b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
8112d5b8:	d0a03304 	addi	r2,gp,-32564
8112d5bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
8112d5c0:	d0a03384 	addi	r2,gp,-32562
8112d5c4:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
8112d5c8:	d0a02f04 	addi	r2,gp,-32580
8112d5cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
8112d5d0:	d0a03404 	addi	r2,gp,-32560
8112d5d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
8112d5d8:	0001883a 	nop
8112d5dc:	e037883a 	mov	sp,fp
8112d5e0:	df000017 	ldw	fp,0(sp)
8112d5e4:	dec00104 	addi	sp,sp,4
8112d5e8:	f800283a 	ret

8112d5ec <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
8112d5ec:	defff204 	addi	sp,sp,-56
8112d5f0:	de00012e 	bgeu	sp,et,8112d5f8 <OSFlagAccept+0xc>
8112d5f4:	003b68fa 	trap	3
8112d5f8:	df000d15 	stw	fp,52(sp)
8112d5fc:	df000d04 	addi	fp,sp,52
8112d600:	e13ffc15 	stw	r4,-16(fp)
8112d604:	2807883a 	mov	r3,r5
8112d608:	3005883a 	mov	r2,r6
8112d60c:	e1ffff15 	stw	r7,-4(fp)
8112d610:	e0fffd0d 	sth	r3,-12(fp)
8112d614:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112d618:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112d61c:	e0bfff17 	ldw	r2,-4(fp)
8112d620:	1000021e 	bne	r2,zero,8112d62c <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
8112d624:	0005883a 	mov	r2,zero
8112d628:	0000b006 	br	8112d8ec <OSFlagAccept+0x300>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112d62c:	e0bffc17 	ldw	r2,-16(fp)
8112d630:	1000051e 	bne	r2,zero,8112d648 <OSFlagAccept+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112d634:	e0bfff17 	ldw	r2,-4(fp)
8112d638:	00c01b84 	movi	r3,110
8112d63c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112d640:	0005883a 	mov	r2,zero
8112d644:	0000a906 	br	8112d8ec <OSFlagAccept+0x300>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112d648:	e0bffc17 	ldw	r2,-16(fp)
8112d64c:	10800003 	ldbu	r2,0(r2)
8112d650:	10803fcc 	andi	r2,r2,255
8112d654:	10800160 	cmpeqi	r2,r2,5
8112d658:	1000051e 	bne	r2,zero,8112d670 <OSFlagAccept+0x84>
        *perr = OS_ERR_EVENT_TYPE;
8112d65c:	e0bfff17 	ldw	r2,-4(fp)
8112d660:	00c00044 	movi	r3,1
8112d664:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112d668:	0005883a 	mov	r2,zero
8112d66c:	00009f06 	br	8112d8ec <OSFlagAccept+0x300>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112d670:	e0fffe03 	ldbu	r3,-8(fp)
8112d674:	00bfe004 	movi	r2,-128
8112d678:	1884703a 	and	r2,r3,r2
8112d67c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
8112d680:	e0bff503 	ldbu	r2,-44(fp)
8112d684:	10000626 	beq	r2,zero,8112d6a0 <OSFlagAccept+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
8112d688:	e0bffe03 	ldbu	r2,-8(fp)
8112d68c:	10801fcc 	andi	r2,r2,127
8112d690:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112d694:	00800044 	movi	r2,1
8112d698:	e0bff385 	stb	r2,-50(fp)
8112d69c:	00000106 	br	8112d6a4 <OSFlagAccept+0xb8>
    } else {
        consume    = OS_FALSE;
8112d6a0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
8112d6a4:	e0bfff17 	ldw	r2,-4(fp)
8112d6a8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d6ac:	0005303a 	rdctl	r2,status
8112d6b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d6b4:	e0fffb17 	ldw	r3,-20(fp)
8112d6b8:	00bfff84 	movi	r2,-2
8112d6bc:	1884703a 	and	r2,r3,r2
8112d6c0:	1001703a 	wrctl	status,r2
  
  return context;
8112d6c4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
8112d6c8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
8112d6cc:	e0bffe03 	ldbu	r2,-8(fp)
8112d6d0:	10c00060 	cmpeqi	r3,r2,1
8112d6d4:	18005f1e 	bne	r3,zero,8112d854 <OSFlagAccept+0x268>
8112d6d8:	10c00088 	cmpgei	r3,r2,2
8112d6dc:	1800021e 	bne	r3,zero,8112d6e8 <OSFlagAccept+0xfc>
8112d6e0:	10003f26 	beq	r2,zero,8112d7e0 <OSFlagAccept+0x1f4>
8112d6e4:	00007706 	br	8112d8c4 <OSFlagAccept+0x2d8>
8112d6e8:	10c000a0 	cmpeqi	r3,r2,2
8112d6ec:	1800031e 	bne	r3,zero,8112d6fc <OSFlagAccept+0x110>
8112d6f0:	108000e0 	cmpeqi	r2,r2,3
8112d6f4:	10001e1e 	bne	r2,zero,8112d770 <OSFlagAccept+0x184>
8112d6f8:	00007206 	br	8112d8c4 <OSFlagAccept+0x2d8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112d6fc:	e0bffc17 	ldw	r2,-16(fp)
8112d700:	10c0020b 	ldhu	r3,8(r2)
8112d704:	e0bffd0b 	ldhu	r2,-12(fp)
8112d708:	1884703a 	and	r2,r3,r2
8112d70c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112d710:	e0fff30b 	ldhu	r3,-52(fp)
8112d714:	e0bffd0b 	ldhu	r2,-12(fp)
8112d718:	18800d1e 	bne	r3,r2,8112d750 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112d71c:	e0bff383 	ldbu	r2,-50(fp)
8112d720:	10800058 	cmpnei	r2,r2,1
8112d724:	10000d1e 	bne	r2,zero,8112d75c <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112d728:	e0bffc17 	ldw	r2,-16(fp)
8112d72c:	1080020b 	ldhu	r2,8(r2)
8112d730:	1007883a 	mov	r3,r2
8112d734:	e0bff30b 	ldhu	r2,-52(fp)
8112d738:	0084303a 	nor	r2,zero,r2
8112d73c:	1884703a 	and	r2,r3,r2
8112d740:	1007883a 	mov	r3,r2
8112d744:	e0bffc17 	ldw	r2,-16(fp)
8112d748:	10c0020d 	sth	r3,8(r2)
8112d74c:	00000306 	br	8112d75c <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112d750:	e0bfff17 	ldw	r2,-4(fp)
8112d754:	00c01c04 	movi	r3,112
8112d758:	10c00005 	stb	r3,0(r2)
8112d75c:	e0bff417 	ldw	r2,-48(fp)
8112d760:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d764:	e0bff617 	ldw	r2,-40(fp)
8112d768:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112d76c:	00005e06 	br	8112d8e8 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112d770:	e0bffc17 	ldw	r2,-16(fp)
8112d774:	10c0020b 	ldhu	r3,8(r2)
8112d778:	e0bffd0b 	ldhu	r2,-12(fp)
8112d77c:	1884703a 	and	r2,r3,r2
8112d780:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112d784:	e0bff30b 	ldhu	r2,-52(fp)
8112d788:	10000d26 	beq	r2,zero,8112d7c0 <OSFlagAccept+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112d78c:	e0bff383 	ldbu	r2,-50(fp)
8112d790:	10800058 	cmpnei	r2,r2,1
8112d794:	10000d1e 	bne	r2,zero,8112d7cc <OSFlagAccept+0x1e0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112d798:	e0bffc17 	ldw	r2,-16(fp)
8112d79c:	1080020b 	ldhu	r2,8(r2)
8112d7a0:	1007883a 	mov	r3,r2
8112d7a4:	e0bff30b 	ldhu	r2,-52(fp)
8112d7a8:	0084303a 	nor	r2,zero,r2
8112d7ac:	1884703a 	and	r2,r3,r2
8112d7b0:	1007883a 	mov	r3,r2
8112d7b4:	e0bffc17 	ldw	r2,-16(fp)
8112d7b8:	10c0020d 	sth	r3,8(r2)
8112d7bc:	00000306 	br	8112d7cc <OSFlagAccept+0x1e0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112d7c0:	e0bfff17 	ldw	r2,-4(fp)
8112d7c4:	00c01c04 	movi	r3,112
8112d7c8:	10c00005 	stb	r3,0(r2)
8112d7cc:	e0bff417 	ldw	r2,-48(fp)
8112d7d0:	e0bff715 	stw	r2,-36(fp)
8112d7d4:	e0bff717 	ldw	r2,-36(fp)
8112d7d8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112d7dc:	00004206 	br	8112d8e8 <OSFlagAccept+0x2fc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112d7e0:	e0bffc17 	ldw	r2,-16(fp)
8112d7e4:	1080020b 	ldhu	r2,8(r2)
8112d7e8:	0084303a 	nor	r2,zero,r2
8112d7ec:	1007883a 	mov	r3,r2
8112d7f0:	e0bffd0b 	ldhu	r2,-12(fp)
8112d7f4:	1884703a 	and	r2,r3,r2
8112d7f8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112d7fc:	e0fff30b 	ldhu	r3,-52(fp)
8112d800:	e0bffd0b 	ldhu	r2,-12(fp)
8112d804:	18800b1e 	bne	r3,r2,8112d834 <OSFlagAccept+0x248>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112d808:	e0bff383 	ldbu	r2,-50(fp)
8112d80c:	10800058 	cmpnei	r2,r2,1
8112d810:	10000b1e 	bne	r2,zero,8112d840 <OSFlagAccept+0x254>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112d814:	e0bffc17 	ldw	r2,-16(fp)
8112d818:	10c0020b 	ldhu	r3,8(r2)
8112d81c:	e0bff30b 	ldhu	r2,-52(fp)
8112d820:	1884b03a 	or	r2,r3,r2
8112d824:	1007883a 	mov	r3,r2
8112d828:	e0bffc17 	ldw	r2,-16(fp)
8112d82c:	10c0020d 	sth	r3,8(r2)
8112d830:	00000306 	br	8112d840 <OSFlagAccept+0x254>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112d834:	e0bfff17 	ldw	r2,-4(fp)
8112d838:	00c01c04 	movi	r3,112
8112d83c:	10c00005 	stb	r3,0(r2)
8112d840:	e0bff417 	ldw	r2,-48(fp)
8112d844:	e0bff815 	stw	r2,-32(fp)
8112d848:	e0bff817 	ldw	r2,-32(fp)
8112d84c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112d850:	00002506 	br	8112d8e8 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112d854:	e0bffc17 	ldw	r2,-16(fp)
8112d858:	1080020b 	ldhu	r2,8(r2)
8112d85c:	0084303a 	nor	r2,zero,r2
8112d860:	1007883a 	mov	r3,r2
8112d864:	e0bffd0b 	ldhu	r2,-12(fp)
8112d868:	1884703a 	and	r2,r3,r2
8112d86c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112d870:	e0bff30b 	ldhu	r2,-52(fp)
8112d874:	10000b26 	beq	r2,zero,8112d8a4 <OSFlagAccept+0x2b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112d878:	e0bff383 	ldbu	r2,-50(fp)
8112d87c:	10800058 	cmpnei	r2,r2,1
8112d880:	10000b1e 	bne	r2,zero,8112d8b0 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112d884:	e0bffc17 	ldw	r2,-16(fp)
8112d888:	10c0020b 	ldhu	r3,8(r2)
8112d88c:	e0bff30b 	ldhu	r2,-52(fp)
8112d890:	1884b03a 	or	r2,r3,r2
8112d894:	1007883a 	mov	r3,r2
8112d898:	e0bffc17 	ldw	r2,-16(fp)
8112d89c:	10c0020d 	sth	r3,8(r2)
8112d8a0:	00000306 	br	8112d8b0 <OSFlagAccept+0x2c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112d8a4:	e0bfff17 	ldw	r2,-4(fp)
8112d8a8:	00c01c04 	movi	r3,112
8112d8ac:	10c00005 	stb	r3,0(r2)
8112d8b0:	e0bff417 	ldw	r2,-48(fp)
8112d8b4:	e0bff915 	stw	r2,-28(fp)
8112d8b8:	e0bff917 	ldw	r2,-28(fp)
8112d8bc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112d8c0:	00000906 	br	8112d8e8 <OSFlagAccept+0x2fc>
8112d8c4:	e0bff417 	ldw	r2,-48(fp)
8112d8c8:	e0bffa15 	stw	r2,-24(fp)
8112d8cc:	e0bffa17 	ldw	r2,-24(fp)
8112d8d0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112d8d4:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
8112d8d8:	e0bfff17 	ldw	r2,-4(fp)
8112d8dc:	00c01bc4 	movi	r3,111
8112d8e0:	10c00005 	stb	r3,0(r2)
             break;
8112d8e4:	0001883a 	nop
    }
    return (flags_rdy);
8112d8e8:	e0bff30b 	ldhu	r2,-52(fp)
}
8112d8ec:	e037883a 	mov	sp,fp
8112d8f0:	df000017 	ldw	fp,0(sp)
8112d8f4:	dec00104 	addi	sp,sp,4
8112d8f8:	f800283a 	ret

8112d8fc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
8112d8fc:	defff804 	addi	sp,sp,-32
8112d900:	de00012e 	bgeu	sp,et,8112d908 <OSFlagCreate+0xc>
8112d904:	003b68fa 	trap	3
8112d908:	df000715 	stw	fp,28(sp)
8112d90c:	df000704 	addi	fp,sp,28
8112d910:	2005883a 	mov	r2,r4
8112d914:	e17fff15 	stw	r5,-4(fp)
8112d918:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
8112d91c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
8112d920:	e0bfff17 	ldw	r2,-4(fp)
8112d924:	1000021e 	bne	r2,zero,8112d930 <OSFlagCreate+0x34>
        return ((OS_FLAG_GRP *)0);
8112d928:	0005883a 	mov	r2,zero
8112d92c:	00003306 	br	8112d9fc <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
8112d930:	d0a08b03 	ldbu	r2,-32212(gp)
8112d934:	10803fcc 	andi	r2,r2,255
8112d938:	10000526 	beq	r2,zero,8112d950 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
8112d93c:	e0bfff17 	ldw	r2,-4(fp)
8112d940:	00c00404 	movi	r3,16
8112d944:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
8112d948:	0005883a 	mov	r2,zero
8112d94c:	00002b06 	br	8112d9fc <OSFlagCreate+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d950:	0005303a 	rdctl	r2,status
8112d954:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d958:	e0fffd17 	ldw	r3,-12(fp)
8112d95c:	00bfff84 	movi	r2,-2
8112d960:	1884703a 	and	r2,r3,r2
8112d964:	1001703a 	wrctl	status,r2
  
  return context;
8112d968:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112d96c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
8112d970:	d0a09017 	ldw	r2,-32192(gp)
8112d974:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
8112d978:	e0bffb17 	ldw	r2,-20(fp)
8112d97c:	10001726 	beq	r2,zero,8112d9dc <OSFlagCreate+0xe0>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
8112d980:	d0a09017 	ldw	r2,-32192(gp)
8112d984:	10800117 	ldw	r2,4(r2)
8112d988:	d0a09015 	stw	r2,-32192(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
8112d98c:	e0bffb17 	ldw	r2,-20(fp)
8112d990:	00c00144 	movi	r3,5
8112d994:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
8112d998:	e0bffb17 	ldw	r2,-20(fp)
8112d99c:	e0fffe0b 	ldhu	r3,-8(fp)
8112d9a0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
8112d9a4:	e0bffb17 	ldw	r2,-20(fp)
8112d9a8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
8112d9ac:	e0bffb17 	ldw	r2,-20(fp)
8112d9b0:	00c00fc4 	movi	r3,63
8112d9b4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112d9b8:	e0bffb17 	ldw	r2,-20(fp)
8112d9bc:	100002c5 	stb	zero,11(r2)
8112d9c0:	e0bff917 	ldw	r2,-28(fp)
8112d9c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d9c8:	e0bffa17 	ldw	r2,-24(fp)
8112d9cc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
8112d9d0:	e0bfff17 	ldw	r2,-4(fp)
8112d9d4:	10000005 	stb	zero,0(r2)
8112d9d8:	00000706 	br	8112d9f8 <OSFlagCreate+0xfc>
8112d9dc:	e0bff917 	ldw	r2,-28(fp)
8112d9e0:	e0bffc15 	stw	r2,-16(fp)
8112d9e4:	e0bffc17 	ldw	r2,-16(fp)
8112d9e8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
8112d9ec:	e0bfff17 	ldw	r2,-4(fp)
8112d9f0:	00c01c84 	movi	r3,114
8112d9f4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
8112d9f8:	e0bffb17 	ldw	r2,-20(fp)
}
8112d9fc:	e037883a 	mov	sp,fp
8112da00:	df000017 	ldw	fp,0(sp)
8112da04:	dec00104 	addi	sp,sp,4
8112da08:	f800283a 	ret

8112da0c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
8112da0c:	defff204 	addi	sp,sp,-56
8112da10:	de00012e 	bgeu	sp,et,8112da18 <OSFlagDel+0xc>
8112da14:	003b68fa 	trap	3
8112da18:	dfc00d15 	stw	ra,52(sp)
8112da1c:	df000c15 	stw	fp,48(sp)
8112da20:	df000c04 	addi	fp,sp,48
8112da24:	e13ffd15 	stw	r4,-12(fp)
8112da28:	2805883a 	mov	r2,r5
8112da2c:	e1bfff15 	stw	r6,-4(fp)
8112da30:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112da34:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112da38:	e0bfff17 	ldw	r2,-4(fp)
8112da3c:	1000021e 	bne	r2,zero,8112da48 <OSFlagDel+0x3c>
        return (pgrp);
8112da40:	e0bffd17 	ldw	r2,-12(fp)
8112da44:	00008006 	br	8112dc48 <OSFlagDel+0x23c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112da48:	e0bffd17 	ldw	r2,-12(fp)
8112da4c:	1000051e 	bne	r2,zero,8112da64 <OSFlagDel+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112da50:	e0bfff17 	ldw	r2,-4(fp)
8112da54:	00c01b84 	movi	r3,110
8112da58:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112da5c:	e0bffd17 	ldw	r2,-12(fp)
8112da60:	00007906 	br	8112dc48 <OSFlagDel+0x23c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112da64:	d0a08b03 	ldbu	r2,-32212(gp)
8112da68:	10803fcc 	andi	r2,r2,255
8112da6c:	10000526 	beq	r2,zero,8112da84 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112da70:	e0bfff17 	ldw	r2,-4(fp)
8112da74:	00c003c4 	movi	r3,15
8112da78:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112da7c:	e0bffd17 	ldw	r2,-12(fp)
8112da80:	00007106 	br	8112dc48 <OSFlagDel+0x23c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
8112da84:	e0bffd17 	ldw	r2,-12(fp)
8112da88:	10800003 	ldbu	r2,0(r2)
8112da8c:	10803fcc 	andi	r2,r2,255
8112da90:	10800160 	cmpeqi	r2,r2,5
8112da94:	1000051e 	bne	r2,zero,8112daac <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
8112da98:	e0bfff17 	ldw	r2,-4(fp)
8112da9c:	00c00044 	movi	r3,1
8112daa0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112daa4:	e0bffd17 	ldw	r2,-12(fp)
8112daa8:	00006706 	br	8112dc48 <OSFlagDel+0x23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112daac:	0005303a 	rdctl	r2,status
8112dab0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dab4:	e0fffc17 	ldw	r3,-16(fp)
8112dab8:	00bfff84 	movi	r2,-2
8112dabc:	1884703a 	and	r2,r3,r2
8112dac0:	1001703a 	wrctl	status,r2
  
  return context;
8112dac4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112dac8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
8112dacc:	e0bffd17 	ldw	r2,-12(fp)
8112dad0:	10800117 	ldw	r2,4(r2)
8112dad4:	10000326 	beq	r2,zero,8112dae4 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112dad8:	00800044 	movi	r2,1
8112dadc:	e0bff405 	stb	r2,-48(fp)
8112dae0:	00000106 	br	8112dae8 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112dae4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112dae8:	e0bffe03 	ldbu	r2,-8(fp)
8112daec:	10000326 	beq	r2,zero,8112dafc <OSFlagDel+0xf0>
8112daf0:	10800060 	cmpeqi	r2,r2,1
8112daf4:	1000231e 	bne	r2,zero,8112db84 <OSFlagDel+0x178>
8112daf8:	00004806 	br	8112dc1c <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
8112dafc:	e0bff403 	ldbu	r2,-48(fp)
8112db00:	1000161e 	bne	r2,zero,8112db5c <OSFlagDel+0x150>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
8112db04:	e0bffd17 	ldw	r2,-12(fp)
8112db08:	00c00fc4 	movi	r3,63
8112db0c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112db10:	e0bffd17 	ldw	r2,-12(fp)
8112db14:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112db18:	e0bffd17 	ldw	r2,-12(fp)
8112db1c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
8112db20:	d0e09017 	ldw	r3,-32192(gp)
8112db24:	e0bffd17 	ldw	r2,-12(fp)
8112db28:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112db2c:	e0bffd17 	ldw	r2,-12(fp)
8112db30:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
8112db34:	e0bffd17 	ldw	r2,-12(fp)
8112db38:	d0a09015 	stw	r2,-32192(gp)
8112db3c:	e0bff717 	ldw	r2,-36(fp)
8112db40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112db44:	e0bff817 	ldw	r2,-32(fp)
8112db48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
8112db4c:	e0bfff17 	ldw	r2,-4(fp)
8112db50:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
8112db54:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
8112db58:	00003a06 	br	8112dc44 <OSFlagDel+0x238>
8112db5c:	e0bff717 	ldw	r2,-36(fp)
8112db60:	e0bff915 	stw	r2,-28(fp)
8112db64:	e0bff917 	ldw	r2,-28(fp)
8112db68:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
8112db6c:	e0bfff17 	ldw	r2,-4(fp)
8112db70:	00c01244 	movi	r3,73
8112db74:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
8112db78:	e0bffd17 	ldw	r2,-12(fp)
8112db7c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112db80:	00003006 	br	8112dc44 <OSFlagDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112db84:	e0bffd17 	ldw	r2,-12(fp)
8112db88:	10800117 	ldw	r2,4(r2)
8112db8c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112db90:	00000606 	br	8112dbac <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
8112db94:	000b883a 	mov	r5,zero
8112db98:	e13ff517 	ldw	r4,-44(fp)
8112db9c:	112ebc00 	call	8112ebc0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112dba0:	e0bff517 	ldw	r2,-44(fp)
8112dba4:	10800017 	ldw	r2,0(r2)
8112dba8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112dbac:	e0bff517 	ldw	r2,-44(fp)
8112dbb0:	103ff81e 	bne	r2,zero,8112db94 <__reset+0xfb10db94>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
8112dbb4:	e0bffd17 	ldw	r2,-12(fp)
8112dbb8:	00c00fc4 	movi	r3,63
8112dbbc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112dbc0:	e0bffd17 	ldw	r2,-12(fp)
8112dbc4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112dbc8:	e0bffd17 	ldw	r2,-12(fp)
8112dbcc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
8112dbd0:	d0e09017 	ldw	r3,-32192(gp)
8112dbd4:	e0bffd17 	ldw	r2,-12(fp)
8112dbd8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112dbdc:	e0bffd17 	ldw	r2,-12(fp)
8112dbe0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
8112dbe4:	e0bffd17 	ldw	r2,-12(fp)
8112dbe8:	d0a09015 	stw	r2,-32192(gp)
8112dbec:	e0bff717 	ldw	r2,-36(fp)
8112dbf0:	e0bffa15 	stw	r2,-24(fp)
8112dbf4:	e0bffa17 	ldw	r2,-24(fp)
8112dbf8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112dbfc:	e0bff403 	ldbu	r2,-48(fp)
8112dc00:	10800058 	cmpnei	r2,r2,1
8112dc04:	1000011e 	bne	r2,zero,8112dc0c <OSFlagDel+0x200>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112dc08:	112ccd00 	call	8112ccd0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
8112dc0c:	e0bfff17 	ldw	r2,-4(fp)
8112dc10:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
8112dc14:	e03ff615 	stw	zero,-40(fp)
             break;
8112dc18:	00000a06 	br	8112dc44 <OSFlagDel+0x238>
8112dc1c:	e0bff717 	ldw	r2,-36(fp)
8112dc20:	e0bffb15 	stw	r2,-20(fp)
8112dc24:	e0bffb17 	ldw	r2,-20(fp)
8112dc28:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
8112dc2c:	e0bfff17 	ldw	r2,-4(fp)
8112dc30:	00c001c4 	movi	r3,7
8112dc34:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
8112dc38:	e0bffd17 	ldw	r2,-12(fp)
8112dc3c:	e0bff615 	stw	r2,-40(fp)
             break;
8112dc40:	0001883a 	nop
    }
    return (pgrp_return);
8112dc44:	e0bff617 	ldw	r2,-40(fp)
}
8112dc48:	e037883a 	mov	sp,fp
8112dc4c:	dfc00117 	ldw	ra,4(sp)
8112dc50:	df000017 	ldw	fp,0(sp)
8112dc54:	dec00204 	addi	sp,sp,8
8112dc58:	f800283a 	ret

8112dc5c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112dc5c:	defff604 	addi	sp,sp,-40
8112dc60:	de00012e 	bgeu	sp,et,8112dc68 <OSFlagNameGet+0xc>
8112dc64:	003b68fa 	trap	3
8112dc68:	dfc00915 	stw	ra,36(sp)
8112dc6c:	df000815 	stw	fp,32(sp)
8112dc70:	df000804 	addi	fp,sp,32
8112dc74:	e13ffd15 	stw	r4,-12(fp)
8112dc78:	e17ffe15 	stw	r5,-8(fp)
8112dc7c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112dc80:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112dc84:	e0bfff17 	ldw	r2,-4(fp)
8112dc88:	1000021e 	bne	r2,zero,8112dc94 <OSFlagNameGet+0x38>
        return (0);
8112dc8c:	0005883a 	mov	r2,zero
8112dc90:	00003906 	br	8112dd78 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112dc94:	e0bffd17 	ldw	r2,-12(fp)
8112dc98:	1000051e 	bne	r2,zero,8112dcb0 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112dc9c:	e0bfff17 	ldw	r2,-4(fp)
8112dca0:	00c01b84 	movi	r3,110
8112dca4:	10c00005 	stb	r3,0(r2)
        return (0);
8112dca8:	0005883a 	mov	r2,zero
8112dcac:	00003206 	br	8112dd78 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112dcb0:	e0bffe17 	ldw	r2,-8(fp)
8112dcb4:	1000051e 	bne	r2,zero,8112dccc <OSFlagNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112dcb8:	e0bfff17 	ldw	r2,-4(fp)
8112dcbc:	00c00304 	movi	r3,12
8112dcc0:	10c00005 	stb	r3,0(r2)
        return (0);
8112dcc4:	0005883a 	mov	r2,zero
8112dcc8:	00002b06 	br	8112dd78 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112dccc:	d0a08b03 	ldbu	r2,-32212(gp)
8112dcd0:	10803fcc 	andi	r2,r2,255
8112dcd4:	10000526 	beq	r2,zero,8112dcec <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112dcd8:	e0bfff17 	ldw	r2,-4(fp)
8112dcdc:	00c00444 	movi	r3,17
8112dce0:	10c00005 	stb	r3,0(r2)
        return (0);
8112dce4:	0005883a 	mov	r2,zero
8112dce8:	00002306 	br	8112dd78 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dcec:	0005303a 	rdctl	r2,status
8112dcf0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dcf4:	e0fffc17 	ldw	r3,-16(fp)
8112dcf8:	00bfff84 	movi	r2,-2
8112dcfc:	1884703a 	and	r2,r3,r2
8112dd00:	1001703a 	wrctl	status,r2
  
  return context;
8112dd04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112dd08:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112dd0c:	e0bffd17 	ldw	r2,-12(fp)
8112dd10:	10800003 	ldbu	r2,0(r2)
8112dd14:	10803fcc 	andi	r2,r2,255
8112dd18:	10800160 	cmpeqi	r2,r2,5
8112dd1c:	1000091e 	bne	r2,zero,8112dd44 <OSFlagNameGet+0xe8>
8112dd20:	e0bff817 	ldw	r2,-32(fp)
8112dd24:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112dd28:	e0bff917 	ldw	r2,-28(fp)
8112dd2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112dd30:	e0bfff17 	ldw	r2,-4(fp)
8112dd34:	00c00044 	movi	r3,1
8112dd38:	10c00005 	stb	r3,0(r2)
        return (0);
8112dd3c:	0005883a 	mov	r2,zero
8112dd40:	00000d06 	br	8112dd78 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
8112dd44:	e0bffd17 	ldw	r2,-12(fp)
8112dd48:	10800284 	addi	r2,r2,10
8112dd4c:	100b883a 	mov	r5,r2
8112dd50:	e13ffe17 	ldw	r4,-8(fp)
8112dd54:	112ce240 	call	8112ce24 <OS_StrCopy>
8112dd58:	e0bffb05 	stb	r2,-20(fp)
8112dd5c:	e0bff817 	ldw	r2,-32(fp)
8112dd60:	e0bffa15 	stw	r2,-24(fp)
8112dd64:	e0bffa17 	ldw	r2,-24(fp)
8112dd68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112dd6c:	e0bfff17 	ldw	r2,-4(fp)
8112dd70:	10000005 	stb	zero,0(r2)
    return (len);
8112dd74:	e0bffb03 	ldbu	r2,-20(fp)
}
8112dd78:	e037883a 	mov	sp,fp
8112dd7c:	dfc00117 	ldw	ra,4(sp)
8112dd80:	df000017 	ldw	fp,0(sp)
8112dd84:	dec00204 	addi	sp,sp,8
8112dd88:	f800283a 	ret

8112dd8c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112dd8c:	defff504 	addi	sp,sp,-44
8112dd90:	de00012e 	bgeu	sp,et,8112dd98 <OSFlagNameSet+0xc>
8112dd94:	003b68fa 	trap	3
8112dd98:	dfc00a15 	stw	ra,40(sp)
8112dd9c:	df000915 	stw	fp,36(sp)
8112dda0:	df000904 	addi	fp,sp,36
8112dda4:	e13ffd15 	stw	r4,-12(fp)
8112dda8:	e17ffe15 	stw	r5,-8(fp)
8112ddac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ddb0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112ddb4:	e0bfff17 	ldw	r2,-4(fp)
8112ddb8:	10004326 	beq	r2,zero,8112dec8 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112ddbc:	e0bffd17 	ldw	r2,-12(fp)
8112ddc0:	1000041e 	bne	r2,zero,8112ddd4 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112ddc4:	e0bfff17 	ldw	r2,-4(fp)
8112ddc8:	00c01b84 	movi	r3,110
8112ddcc:	10c00005 	stb	r3,0(r2)
        return;
8112ddd0:	00003e06 	br	8112decc <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112ddd4:	e0bffe17 	ldw	r2,-8(fp)
8112ddd8:	1000041e 	bne	r2,zero,8112ddec <OSFlagNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112dddc:	e0bfff17 	ldw	r2,-4(fp)
8112dde0:	00c00304 	movi	r3,12
8112dde4:	10c00005 	stb	r3,0(r2)
        return;
8112dde8:	00003806 	br	8112decc <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112ddec:	d0a08b03 	ldbu	r2,-32212(gp)
8112ddf0:	10803fcc 	andi	r2,r2,255
8112ddf4:	10000426 	beq	r2,zero,8112de08 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112ddf8:	e0bfff17 	ldw	r2,-4(fp)
8112ddfc:	00c00484 	movi	r3,18
8112de00:	10c00005 	stb	r3,0(r2)
        return;
8112de04:	00003106 	br	8112decc <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112de08:	0005303a 	rdctl	r2,status
8112de0c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112de10:	e0fffc17 	ldw	r3,-16(fp)
8112de14:	00bfff84 	movi	r2,-2
8112de18:	1884703a 	and	r2,r3,r2
8112de1c:	1001703a 	wrctl	status,r2
  
  return context;
8112de20:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112de24:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112de28:	e0bffd17 	ldw	r2,-12(fp)
8112de2c:	10800003 	ldbu	r2,0(r2)
8112de30:	10803fcc 	andi	r2,r2,255
8112de34:	10800160 	cmpeqi	r2,r2,5
8112de38:	1000081e 	bne	r2,zero,8112de5c <OSFlagNameSet+0xd0>
8112de3c:	e0bff717 	ldw	r2,-36(fp)
8112de40:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112de44:	e0bff817 	ldw	r2,-32(fp)
8112de48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112de4c:	e0bfff17 	ldw	r2,-4(fp)
8112de50:	00c00044 	movi	r3,1
8112de54:	10c00005 	stb	r3,0(r2)
        return;
8112de58:	00001c06 	br	8112decc <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112de5c:	e13ffe17 	ldw	r4,-8(fp)
8112de60:	112cea00 	call	8112cea0 <OS_StrLen>
8112de64:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
8112de68:	e0bffa03 	ldbu	r2,-24(fp)
8112de6c:	10800830 	cmpltui	r2,r2,32
8112de70:	1000081e 	bne	r2,zero,8112de94 <OSFlagNameSet+0x108>
8112de74:	e0bff717 	ldw	r2,-36(fp)
8112de78:	e0bff915 	stw	r2,-28(fp)
8112de7c:	e0bff917 	ldw	r2,-28(fp)
8112de80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
8112de84:	e0bfff17 	ldw	r2,-4(fp)
8112de88:	00c01cc4 	movi	r3,115
8112de8c:	10c00005 	stb	r3,0(r2)
        return;
8112de90:	00000e06 	br	8112decc <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
8112de94:	e0bffd17 	ldw	r2,-12(fp)
8112de98:	10800284 	addi	r2,r2,10
8112de9c:	e17ffe17 	ldw	r5,-8(fp)
8112dea0:	1009883a 	mov	r4,r2
8112dea4:	112ce240 	call	8112ce24 <OS_StrCopy>
8112dea8:	e0bff717 	ldw	r2,-36(fp)
8112deac:	e0bffb15 	stw	r2,-20(fp)
8112deb0:	e0bffb17 	ldw	r2,-20(fp)
8112deb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112deb8:	e0bfff17 	ldw	r2,-4(fp)
8112debc:	10000005 	stb	zero,0(r2)
    return;
8112dec0:	0001883a 	nop
8112dec4:	00000106 	br	8112decc <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112dec8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
8112decc:	e037883a 	mov	sp,fp
8112ded0:	dfc00117 	ldw	ra,4(sp)
8112ded4:	df000017 	ldw	fp,0(sp)
8112ded8:	dec00204 	addi	sp,sp,8
8112dedc:	f800283a 	ret

8112dee0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
8112dee0:	deffe104 	addi	sp,sp,-124
8112dee4:	de00012e 	bgeu	sp,et,8112deec <OSFlagPend+0xc>
8112dee8:	003b68fa 	trap	3
8112deec:	dfc01e15 	stw	ra,120(sp)
8112def0:	df001d15 	stw	fp,116(sp)
8112def4:	df001d04 	addi	fp,sp,116
8112def8:	e13ffc15 	stw	r4,-16(fp)
8112defc:	2809883a 	mov	r4,r5
8112df00:	3007883a 	mov	r3,r6
8112df04:	3805883a 	mov	r2,r7
8112df08:	e13ffd0d 	sth	r4,-12(fp)
8112df0c:	e0fffe05 	stb	r3,-8(fp)
8112df10:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112df14:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112df18:	e0800217 	ldw	r2,8(fp)
8112df1c:	1000021e 	bne	r2,zero,8112df28 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
8112df20:	0005883a 	mov	r2,zero
8112df24:	00015906 	br	8112e48c <OSFlagPend+0x5ac>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112df28:	e0bffc17 	ldw	r2,-16(fp)
8112df2c:	1000051e 	bne	r2,zero,8112df44 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112df30:	e0800217 	ldw	r2,8(fp)
8112df34:	00c01b84 	movi	r3,110
8112df38:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112df3c:	0005883a 	mov	r2,zero
8112df40:	00015206 	br	8112e48c <OSFlagPend+0x5ac>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112df44:	d0a08b03 	ldbu	r2,-32212(gp)
8112df48:	10803fcc 	andi	r2,r2,255
8112df4c:	10000526 	beq	r2,zero,8112df64 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112df50:	e0800217 	ldw	r2,8(fp)
8112df54:	00c00084 	movi	r3,2
8112df58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112df5c:	0005883a 	mov	r2,zero
8112df60:	00014a06 	br	8112e48c <OSFlagPend+0x5ac>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112df64:	d0a07903 	ldbu	r2,-32284(gp)
8112df68:	10803fcc 	andi	r2,r2,255
8112df6c:	10000526 	beq	r2,zero,8112df84 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112df70:	e0800217 	ldw	r2,8(fp)
8112df74:	00c00344 	movi	r3,13
8112df78:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112df7c:	0005883a 	mov	r2,zero
8112df80:	00014206 	br	8112e48c <OSFlagPend+0x5ac>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112df84:	e0bffc17 	ldw	r2,-16(fp)
8112df88:	10800003 	ldbu	r2,0(r2)
8112df8c:	10803fcc 	andi	r2,r2,255
8112df90:	10800160 	cmpeqi	r2,r2,5
8112df94:	1000051e 	bne	r2,zero,8112dfac <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
8112df98:	e0800217 	ldw	r2,8(fp)
8112df9c:	00c00044 	movi	r3,1
8112dfa0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112dfa4:	0005883a 	mov	r2,zero
8112dfa8:	00013806 	br	8112e48c <OSFlagPend+0x5ac>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112dfac:	e0fffe03 	ldbu	r3,-8(fp)
8112dfb0:	00bfe004 	movi	r2,-128
8112dfb4:	1884703a 	and	r2,r3,r2
8112dfb8:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
8112dfbc:	e0bfe603 	ldbu	r2,-104(fp)
8112dfc0:	10000626 	beq	r2,zero,8112dfdc <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
8112dfc4:	e0bffe03 	ldbu	r2,-8(fp)
8112dfc8:	10801fcc 	andi	r2,r2,127
8112dfcc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112dfd0:	00800044 	movi	r2,1
8112dfd4:	e0bfe405 	stb	r2,-112(fp)
8112dfd8:	00000106 	br	8112dfe0 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
8112dfdc:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dfe0:	0005303a 	rdctl	r2,status
8112dfe4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dfe8:	e0fff617 	ldw	r3,-40(fp)
8112dfec:	00bfff84 	movi	r2,-2
8112dff0:	1884703a 	and	r2,r3,r2
8112dff4:	1001703a 	wrctl	status,r2
  
  return context;
8112dff8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112dffc:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
8112e000:	e0bffe03 	ldbu	r2,-8(fp)
8112e004:	10c00060 	cmpeqi	r3,r2,1
8112e008:	1800921e 	bne	r3,zero,8112e254 <OSFlagPend+0x374>
8112e00c:	10c00088 	cmpgei	r3,r2,2
8112e010:	1800021e 	bne	r3,zero,8112e01c <OSFlagPend+0x13c>
8112e014:	10006126 	beq	r2,zero,8112e19c <OSFlagPend+0x2bc>
8112e018:	0000bb06 	br	8112e308 <OSFlagPend+0x428>
8112e01c:	10c000a0 	cmpeqi	r3,r2,2
8112e020:	1800031e 	bne	r3,zero,8112e030 <OSFlagPend+0x150>
8112e024:	108000e0 	cmpeqi	r2,r2,3
8112e028:	10002f1e 	bne	r2,zero,8112e0e8 <OSFlagPend+0x208>
8112e02c:	0000b606 	br	8112e308 <OSFlagPend+0x428>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
8112e030:	e0bffc17 	ldw	r2,-16(fp)
8112e034:	10c0020b 	ldhu	r3,8(r2)
8112e038:	e0bffd0b 	ldhu	r2,-12(fp)
8112e03c:	1884703a 	and	r2,r3,r2
8112e040:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112e044:	e0ffe80b 	ldhu	r3,-96(fp)
8112e048:	e0bffd0b 	ldhu	r2,-12(fp)
8112e04c:	1880171e 	bne	r3,r2,8112e0ac <OSFlagPend+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112e050:	e0bfe403 	ldbu	r2,-112(fp)
8112e054:	10800058 	cmpnei	r2,r2,1
8112e058:	1000091e 	bne	r2,zero,8112e080 <OSFlagPend+0x1a0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112e05c:	e0bffc17 	ldw	r2,-16(fp)
8112e060:	1080020b 	ldhu	r2,8(r2)
8112e064:	1007883a 	mov	r3,r2
8112e068:	e0bfe80b 	ldhu	r2,-96(fp)
8112e06c:	0084303a 	nor	r2,zero,r2
8112e070:	1884703a 	and	r2,r3,r2
8112e074:	1007883a 	mov	r3,r2
8112e078:	e0bffc17 	ldw	r2,-16(fp)
8112e07c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112e080:	d0a08c17 	ldw	r2,-32208(gp)
8112e084:	e0ffe80b 	ldhu	r3,-96(fp)
8112e088:	10c00b0d 	sth	r3,44(r2)
8112e08c:	e0bfe517 	ldw	r2,-108(fp)
8112e090:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e094:	e0bfe717 	ldw	r2,-100(fp)
8112e098:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112e09c:	e0800217 	ldw	r2,8(fp)
8112e0a0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112e0a4:	e0bfe80b 	ldhu	r2,-96(fp)
8112e0a8:	0000f806 	br	8112e48c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112e0ac:	e13ffd0b 	ldhu	r4,-12(fp)
8112e0b0:	e17ffe03 	ldbu	r5,-8(fp)
8112e0b4:	e0bfff0b 	ldhu	r2,-4(fp)
8112e0b8:	e0fff704 	addi	r3,fp,-36
8112e0bc:	d8800015 	stw	r2,0(sp)
8112e0c0:	280f883a 	mov	r7,r5
8112e0c4:	200d883a 	mov	r6,r4
8112e0c8:	180b883a 	mov	r5,r3
8112e0cc:	e13ffc17 	ldw	r4,-16(fp)
8112e0d0:	112e9700 	call	8112e970 <OS_FlagBlock>
8112e0d4:	e0bfe517 	ldw	r2,-108(fp)
8112e0d8:	e0bfe915 	stw	r2,-92(fp)
8112e0dc:	e0bfe917 	ldw	r2,-92(fp)
8112e0e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112e0e4:	00009206 	br	8112e330 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
8112e0e8:	e0bffc17 	ldw	r2,-16(fp)
8112e0ec:	10c0020b 	ldhu	r3,8(r2)
8112e0f0:	e0bffd0b 	ldhu	r2,-12(fp)
8112e0f4:	1884703a 	and	r2,r3,r2
8112e0f8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112e0fc:	e0bfe80b 	ldhu	r2,-96(fp)
8112e100:	10001726 	beq	r2,zero,8112e160 <OSFlagPend+0x280>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112e104:	e0bfe403 	ldbu	r2,-112(fp)
8112e108:	10800058 	cmpnei	r2,r2,1
8112e10c:	1000091e 	bne	r2,zero,8112e134 <OSFlagPend+0x254>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112e110:	e0bffc17 	ldw	r2,-16(fp)
8112e114:	1080020b 	ldhu	r2,8(r2)
8112e118:	1007883a 	mov	r3,r2
8112e11c:	e0bfe80b 	ldhu	r2,-96(fp)
8112e120:	0084303a 	nor	r2,zero,r2
8112e124:	1884703a 	and	r2,r3,r2
8112e128:	1007883a 	mov	r3,r2
8112e12c:	e0bffc17 	ldw	r2,-16(fp)
8112e130:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112e134:	d0a08c17 	ldw	r2,-32208(gp)
8112e138:	e0ffe80b 	ldhu	r3,-96(fp)
8112e13c:	10c00b0d 	sth	r3,44(r2)
8112e140:	e0bfe517 	ldw	r2,-108(fp)
8112e144:	e0bfea15 	stw	r2,-88(fp)
8112e148:	e0bfea17 	ldw	r2,-88(fp)
8112e14c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112e150:	e0800217 	ldw	r2,8(fp)
8112e154:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112e158:	e0bfe80b 	ldhu	r2,-96(fp)
8112e15c:	0000cb06 	br	8112e48c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112e160:	e13ffd0b 	ldhu	r4,-12(fp)
8112e164:	e17ffe03 	ldbu	r5,-8(fp)
8112e168:	e0bfff0b 	ldhu	r2,-4(fp)
8112e16c:	e0fff704 	addi	r3,fp,-36
8112e170:	d8800015 	stw	r2,0(sp)
8112e174:	280f883a 	mov	r7,r5
8112e178:	200d883a 	mov	r6,r4
8112e17c:	180b883a 	mov	r5,r3
8112e180:	e13ffc17 	ldw	r4,-16(fp)
8112e184:	112e9700 	call	8112e970 <OS_FlagBlock>
8112e188:	e0bfe517 	ldw	r2,-108(fp)
8112e18c:	e0bfeb15 	stw	r2,-84(fp)
8112e190:	e0bfeb17 	ldw	r2,-84(fp)
8112e194:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112e198:	00006506 	br	8112e330 <OSFlagPend+0x450>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112e19c:	e0bffc17 	ldw	r2,-16(fp)
8112e1a0:	1080020b 	ldhu	r2,8(r2)
8112e1a4:	0084303a 	nor	r2,zero,r2
8112e1a8:	1007883a 	mov	r3,r2
8112e1ac:	e0bffd0b 	ldhu	r2,-12(fp)
8112e1b0:	1884703a 	and	r2,r3,r2
8112e1b4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112e1b8:	e0ffe80b 	ldhu	r3,-96(fp)
8112e1bc:	e0bffd0b 	ldhu	r2,-12(fp)
8112e1c0:	1880151e 	bne	r3,r2,8112e218 <OSFlagPend+0x338>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112e1c4:	e0bfe403 	ldbu	r2,-112(fp)
8112e1c8:	10800058 	cmpnei	r2,r2,1
8112e1cc:	1000071e 	bne	r2,zero,8112e1ec <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112e1d0:	e0bffc17 	ldw	r2,-16(fp)
8112e1d4:	10c0020b 	ldhu	r3,8(r2)
8112e1d8:	e0bfe80b 	ldhu	r2,-96(fp)
8112e1dc:	1884b03a 	or	r2,r3,r2
8112e1e0:	1007883a 	mov	r3,r2
8112e1e4:	e0bffc17 	ldw	r2,-16(fp)
8112e1e8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112e1ec:	d0a08c17 	ldw	r2,-32208(gp)
8112e1f0:	e0ffe80b 	ldhu	r3,-96(fp)
8112e1f4:	10c00b0d 	sth	r3,44(r2)
8112e1f8:	e0bfe517 	ldw	r2,-108(fp)
8112e1fc:	e0bfec15 	stw	r2,-80(fp)
8112e200:	e0bfec17 	ldw	r2,-80(fp)
8112e204:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112e208:	e0800217 	ldw	r2,8(fp)
8112e20c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112e210:	e0bfe80b 	ldhu	r2,-96(fp)
8112e214:	00009d06 	br	8112e48c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112e218:	e13ffd0b 	ldhu	r4,-12(fp)
8112e21c:	e17ffe03 	ldbu	r5,-8(fp)
8112e220:	e0bfff0b 	ldhu	r2,-4(fp)
8112e224:	e0fff704 	addi	r3,fp,-36
8112e228:	d8800015 	stw	r2,0(sp)
8112e22c:	280f883a 	mov	r7,r5
8112e230:	200d883a 	mov	r6,r4
8112e234:	180b883a 	mov	r5,r3
8112e238:	e13ffc17 	ldw	r4,-16(fp)
8112e23c:	112e9700 	call	8112e970 <OS_FlagBlock>
8112e240:	e0bfe517 	ldw	r2,-108(fp)
8112e244:	e0bfed15 	stw	r2,-76(fp)
8112e248:	e0bfed17 	ldw	r2,-76(fp)
8112e24c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112e250:	00003706 	br	8112e330 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112e254:	e0bffc17 	ldw	r2,-16(fp)
8112e258:	1080020b 	ldhu	r2,8(r2)
8112e25c:	0084303a 	nor	r2,zero,r2
8112e260:	1007883a 	mov	r3,r2
8112e264:	e0bffd0b 	ldhu	r2,-12(fp)
8112e268:	1884703a 	and	r2,r3,r2
8112e26c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112e270:	e0bfe80b 	ldhu	r2,-96(fp)
8112e274:	10001526 	beq	r2,zero,8112e2cc <OSFlagPend+0x3ec>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112e278:	e0bfe403 	ldbu	r2,-112(fp)
8112e27c:	10800058 	cmpnei	r2,r2,1
8112e280:	1000071e 	bne	r2,zero,8112e2a0 <OSFlagPend+0x3c0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112e284:	e0bffc17 	ldw	r2,-16(fp)
8112e288:	10c0020b 	ldhu	r3,8(r2)
8112e28c:	e0bfe80b 	ldhu	r2,-96(fp)
8112e290:	1884b03a 	or	r2,r3,r2
8112e294:	1007883a 	mov	r3,r2
8112e298:	e0bffc17 	ldw	r2,-16(fp)
8112e29c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112e2a0:	d0a08c17 	ldw	r2,-32208(gp)
8112e2a4:	e0ffe80b 	ldhu	r3,-96(fp)
8112e2a8:	10c00b0d 	sth	r3,44(r2)
8112e2ac:	e0bfe517 	ldw	r2,-108(fp)
8112e2b0:	e0bfee15 	stw	r2,-72(fp)
8112e2b4:	e0bfee17 	ldw	r2,-72(fp)
8112e2b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112e2bc:	e0800217 	ldw	r2,8(fp)
8112e2c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112e2c4:	e0bfe80b 	ldhu	r2,-96(fp)
8112e2c8:	00007006 	br	8112e48c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112e2cc:	e13ffd0b 	ldhu	r4,-12(fp)
8112e2d0:	e17ffe03 	ldbu	r5,-8(fp)
8112e2d4:	e0bfff0b 	ldhu	r2,-4(fp)
8112e2d8:	e0fff704 	addi	r3,fp,-36
8112e2dc:	d8800015 	stw	r2,0(sp)
8112e2e0:	280f883a 	mov	r7,r5
8112e2e4:	200d883a 	mov	r6,r4
8112e2e8:	180b883a 	mov	r5,r3
8112e2ec:	e13ffc17 	ldw	r4,-16(fp)
8112e2f0:	112e9700 	call	8112e970 <OS_FlagBlock>
8112e2f4:	e0bfe517 	ldw	r2,-108(fp)
8112e2f8:	e0bfef15 	stw	r2,-68(fp)
8112e2fc:	e0bfef17 	ldw	r2,-68(fp)
8112e300:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112e304:	00000a06 	br	8112e330 <OSFlagPend+0x450>
8112e308:	e0bfe517 	ldw	r2,-108(fp)
8112e30c:	e0bff015 	stw	r2,-64(fp)
8112e310:	e0bff017 	ldw	r2,-64(fp)
8112e314:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112e318:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
8112e31c:	e0800217 	ldw	r2,8(fp)
8112e320:	00c01bc4 	movi	r3,111
8112e324:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
8112e328:	e0bfe80b 	ldhu	r2,-96(fp)
8112e32c:	00005706 	br	8112e48c <OSFlagPend+0x5ac>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
8112e330:	112ccd00 	call	8112ccd0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e334:	0005303a 	rdctl	r2,status
8112e338:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e33c:	e0fff117 	ldw	r3,-60(fp)
8112e340:	00bfff84 	movi	r2,-2
8112e344:	1884703a 	and	r2,r3,r2
8112e348:	1001703a 	wrctl	status,r2
  
  return context;
8112e34c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
8112e350:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
8112e354:	d0a08c17 	ldw	r2,-32208(gp)
8112e358:	10800c43 	ldbu	r2,49(r2)
8112e35c:	10803fcc 	andi	r2,r2,255
8112e360:	10001c26 	beq	r2,zero,8112e3d4 <OSFlagPend+0x4f4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
8112e364:	d0a08c17 	ldw	r2,-32208(gp)
8112e368:	10800c43 	ldbu	r2,49(r2)
8112e36c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112e370:	d0a08c17 	ldw	r2,-32208(gp)
8112e374:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
8112e378:	e0bff704 	addi	r2,fp,-36
8112e37c:	1009883a 	mov	r4,r2
8112e380:	112ecbc0 	call	8112ecbc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
8112e384:	d0a08c17 	ldw	r2,-32208(gp)
8112e388:	10000c05 	stb	zero,48(r2)
8112e38c:	e0bfe517 	ldw	r2,-108(fp)
8112e390:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e394:	e0bff217 	ldw	r2,-56(fp)
8112e398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
8112e39c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
8112e3a0:	e0bff303 	ldbu	r2,-52(fp)
8112e3a4:	108000a0 	cmpeqi	r2,r2,2
8112e3a8:	10000426 	beq	r2,zero,8112e3bc <OSFlagPend+0x4dc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
8112e3ac:	e0800217 	ldw	r2,8(fp)
8112e3b0:	00c00384 	movi	r3,14
8112e3b4:	10c00005 	stb	r3,0(r2)
                 break;
8112e3b8:	00000406 	br	8112e3cc <OSFlagPend+0x4ec>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
8112e3bc:	e0800217 	ldw	r2,8(fp)
8112e3c0:	00c00284 	movi	r3,10
8112e3c4:	10c00005 	stb	r3,0(r2)
                 break;
8112e3c8:	0001883a 	nop
        }
        return (flags_rdy);
8112e3cc:	e0bfe80b 	ldhu	r2,-96(fp)
8112e3d0:	00002e06 	br	8112e48c <OSFlagPend+0x5ac>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
8112e3d4:	d0a08c17 	ldw	r2,-32208(gp)
8112e3d8:	10800b0b 	ldhu	r2,44(r2)
8112e3dc:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
8112e3e0:	e0bfe403 	ldbu	r2,-112(fp)
8112e3e4:	10800058 	cmpnei	r2,r2,1
8112e3e8:	1000211e 	bne	r2,zero,8112e470 <OSFlagPend+0x590>
        switch (wait_type) {
8112e3ec:	e0bffe03 	ldbu	r2,-8(fp)
8112e3f0:	10001616 	blt	r2,zero,8112e44c <OSFlagPend+0x56c>
8112e3f4:	10c00090 	cmplti	r3,r2,2
8112e3f8:	18000c1e 	bne	r3,zero,8112e42c <OSFlagPend+0x54c>
8112e3fc:	10800108 	cmpgei	r2,r2,4
8112e400:	1000121e 	bne	r2,zero,8112e44c <OSFlagPend+0x56c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
8112e404:	e0bffc17 	ldw	r2,-16(fp)
8112e408:	1080020b 	ldhu	r2,8(r2)
8112e40c:	1007883a 	mov	r3,r2
8112e410:	e0bfe80b 	ldhu	r2,-96(fp)
8112e414:	0084303a 	nor	r2,zero,r2
8112e418:	1884703a 	and	r2,r3,r2
8112e41c:	1007883a 	mov	r3,r2
8112e420:	e0bffc17 	ldw	r2,-16(fp)
8112e424:	10c0020d 	sth	r3,8(r2)
                 break;
8112e428:	00001106 	br	8112e470 <OSFlagPend+0x590>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
8112e42c:	e0bffc17 	ldw	r2,-16(fp)
8112e430:	10c0020b 	ldhu	r3,8(r2)
8112e434:	e0bfe80b 	ldhu	r2,-96(fp)
8112e438:	1884b03a 	or	r2,r3,r2
8112e43c:	1007883a 	mov	r3,r2
8112e440:	e0bffc17 	ldw	r2,-16(fp)
8112e444:	10c0020d 	sth	r3,8(r2)
                 break;
8112e448:	00000906 	br	8112e470 <OSFlagPend+0x590>
8112e44c:	e0bfe517 	ldw	r2,-108(fp)
8112e450:	e0bff415 	stw	r2,-48(fp)
8112e454:	e0bff417 	ldw	r2,-48(fp)
8112e458:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112e45c:	e0800217 	ldw	r2,8(fp)
8112e460:	00c01bc4 	movi	r3,111
8112e464:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112e468:	0005883a 	mov	r2,zero
8112e46c:	00000706 	br	8112e48c <OSFlagPend+0x5ac>
8112e470:	e0bfe517 	ldw	r2,-108(fp)
8112e474:	e0bff515 	stw	r2,-44(fp)
8112e478:	e0bff517 	ldw	r2,-44(fp)
8112e47c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
8112e480:	e0800217 	ldw	r2,8(fp)
8112e484:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
8112e488:	e0bfe80b 	ldhu	r2,-96(fp)
}
8112e48c:	e037883a 	mov	sp,fp
8112e490:	dfc00117 	ldw	ra,4(sp)
8112e494:	df000017 	ldw	fp,0(sp)
8112e498:	dec00204 	addi	sp,sp,8
8112e49c:	f800283a 	ret

8112e4a0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
8112e4a0:	defffb04 	addi	sp,sp,-20
8112e4a4:	de00012e 	bgeu	sp,et,8112e4ac <OSFlagPendGetFlagsRdy+0xc>
8112e4a8:	003b68fa 	trap	3
8112e4ac:	df000415 	stw	fp,16(sp)
8112e4b0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112e4b4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e4b8:	0005303a 	rdctl	r2,status
8112e4bc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e4c0:	e0fffe17 	ldw	r3,-8(fp)
8112e4c4:	00bfff84 	movi	r2,-2
8112e4c8:	1884703a 	and	r2,r3,r2
8112e4cc:	1001703a 	wrctl	status,r2
  
  return context;
8112e4d0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112e4d4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
8112e4d8:	d0a08c17 	ldw	r2,-32208(gp)
8112e4dc:	10800b0b 	ldhu	r2,44(r2)
8112e4e0:	e0bffd0d 	sth	r2,-12(fp)
8112e4e4:	e0bffc17 	ldw	r2,-16(fp)
8112e4e8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e4ec:	e0bfff17 	ldw	r2,-4(fp)
8112e4f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
8112e4f4:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112e4f8:	e037883a 	mov	sp,fp
8112e4fc:	df000017 	ldw	fp,0(sp)
8112e500:	dec00104 	addi	sp,sp,4
8112e504:	f800283a 	ret

8112e508 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
8112e508:	deffef04 	addi	sp,sp,-68
8112e50c:	de00012e 	bgeu	sp,et,8112e514 <OSFlagPost+0xc>
8112e510:	003b68fa 	trap	3
8112e514:	dfc01015 	stw	ra,64(sp)
8112e518:	df000f15 	stw	fp,60(sp)
8112e51c:	df000f04 	addi	fp,sp,60
8112e520:	e13ffc15 	stw	r4,-16(fp)
8112e524:	2807883a 	mov	r3,r5
8112e528:	3005883a 	mov	r2,r6
8112e52c:	e1ffff15 	stw	r7,-4(fp)
8112e530:	e0fffd0d 	sth	r3,-12(fp)
8112e534:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
8112e538:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112e53c:	e0bfff17 	ldw	r2,-4(fp)
8112e540:	1000021e 	bne	r2,zero,8112e54c <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
8112e544:	0005883a 	mov	r2,zero
8112e548:	0000d106 	br	8112e890 <OSFlagPost+0x388>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
8112e54c:	e0bffc17 	ldw	r2,-16(fp)
8112e550:	1000051e 	bne	r2,zero,8112e568 <OSFlagPost+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112e554:	e0bfff17 	ldw	r2,-4(fp)
8112e558:	00c01b84 	movi	r3,110
8112e55c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112e560:	0005883a 	mov	r2,zero
8112e564:	0000ca06 	br	8112e890 <OSFlagPost+0x388>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
8112e568:	e0bffc17 	ldw	r2,-16(fp)
8112e56c:	10800003 	ldbu	r2,0(r2)
8112e570:	10803fcc 	andi	r2,r2,255
8112e574:	10800160 	cmpeqi	r2,r2,5
8112e578:	1000051e 	bne	r2,zero,8112e590 <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
8112e57c:	e0bfff17 	ldw	r2,-4(fp)
8112e580:	00c00044 	movi	r3,1
8112e584:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112e588:	0005883a 	mov	r2,zero
8112e58c:	0000c006 	br	8112e890 <OSFlagPost+0x388>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e590:	0005303a 	rdctl	r2,status
8112e594:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e598:	e0fffb17 	ldw	r3,-20(fp)
8112e59c:	00bfff84 	movi	r2,-2
8112e5a0:	1884703a 	and	r2,r3,r2
8112e5a4:	1001703a 	wrctl	status,r2
  
  return context;
8112e5a8:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112e5ac:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
8112e5b0:	e0bffe03 	ldbu	r2,-8(fp)
8112e5b4:	10000326 	beq	r2,zero,8112e5c4 <OSFlagPost+0xbc>
8112e5b8:	10800060 	cmpeqi	r2,r2,1
8112e5bc:	10000b1e 	bne	r2,zero,8112e5ec <OSFlagPost+0xe4>
8112e5c0:	00001206 	br	8112e60c <OSFlagPost+0x104>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
8112e5c4:	e0bffc17 	ldw	r2,-16(fp)
8112e5c8:	1080020b 	ldhu	r2,8(r2)
8112e5cc:	1007883a 	mov	r3,r2
8112e5d0:	e0bffd0b 	ldhu	r2,-12(fp)
8112e5d4:	0084303a 	nor	r2,zero,r2
8112e5d8:	1884703a 	and	r2,r3,r2
8112e5dc:	1007883a 	mov	r3,r2
8112e5e0:	e0bffc17 	ldw	r2,-16(fp)
8112e5e4:	10c0020d 	sth	r3,8(r2)
             break;
8112e5e8:	00001106 	br	8112e630 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
8112e5ec:	e0bffc17 	ldw	r2,-16(fp)
8112e5f0:	10c0020b 	ldhu	r3,8(r2)
8112e5f4:	e0bffd0b 	ldhu	r2,-12(fp)
8112e5f8:	1884b03a 	or	r2,r3,r2
8112e5fc:	1007883a 	mov	r3,r2
8112e600:	e0bffc17 	ldw	r2,-16(fp)
8112e604:	10c0020d 	sth	r3,8(r2)
             break;
8112e608:	00000906 	br	8112e630 <OSFlagPost+0x128>
8112e60c:	e0bff317 	ldw	r2,-52(fp)
8112e610:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e614:	e0bff417 	ldw	r2,-48(fp)
8112e618:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
8112e61c:	e0bfff17 	ldw	r2,-4(fp)
8112e620:	00c01c44 	movi	r3,113
8112e624:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
8112e628:	0005883a 	mov	r2,zero
8112e62c:	00009806 	br	8112e890 <OSFlagPost+0x388>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
8112e630:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112e634:	e0bffc17 	ldw	r2,-16(fp)
8112e638:	10800117 	ldw	r2,4(r2)
8112e63c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112e640:	00007706 	br	8112e820 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
8112e644:	e0bff117 	ldw	r2,-60(fp)
8112e648:	10800483 	ldbu	r2,18(r2)
8112e64c:	10803fcc 	andi	r2,r2,255
8112e650:	10c00060 	cmpeqi	r3,r2,1
8112e654:	18004a1e 	bne	r3,zero,8112e780 <OSFlagPost+0x278>
8112e658:	10c00088 	cmpgei	r3,r2,2
8112e65c:	1800021e 	bne	r3,zero,8112e668 <OSFlagPost+0x160>
8112e660:	10002f26 	beq	r2,zero,8112e720 <OSFlagPost+0x218>
8112e664:	00005b06 	br	8112e7d4 <OSFlagPost+0x2cc>
8112e668:	10c000a0 	cmpeqi	r3,r2,2
8112e66c:	1800031e 	bne	r3,zero,8112e67c <OSFlagPost+0x174>
8112e670:	108000e0 	cmpeqi	r2,r2,3
8112e674:	1000171e 	bne	r2,zero,8112e6d4 <OSFlagPost+0x1cc>
8112e678:	00005606 	br	8112e7d4 <OSFlagPost+0x2cc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112e67c:	e0bffc17 	ldw	r2,-16(fp)
8112e680:	10c0020b 	ldhu	r3,8(r2)
8112e684:	e0bff117 	ldw	r2,-60(fp)
8112e688:	1080040b 	ldhu	r2,16(r2)
8112e68c:	1884703a 	and	r2,r3,r2
8112e690:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112e694:	e0bff117 	ldw	r2,-60(fp)
8112e698:	1080040b 	ldhu	r2,16(r2)
8112e69c:	10ffffcc 	andi	r3,r2,65535
8112e6a0:	e0bff60b 	ldhu	r2,-40(fp)
8112e6a4:	1880541e 	bne	r3,r2,8112e7f8 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112e6a8:	e0bff60b 	ldhu	r2,-40(fp)
8112e6ac:	100b883a 	mov	r5,r2
8112e6b0:	e13ff117 	ldw	r4,-60(fp)
8112e6b4:	112ebc00 	call	8112ebc0 <OS_FlagTaskRdy>
8112e6b8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112e6bc:	e0bff683 	ldbu	r2,-38(fp)
8112e6c0:	10800058 	cmpnei	r2,r2,1
8112e6c4:	10004c1e 	bne	r2,zero,8112e7f8 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112e6c8:	00800044 	movi	r2,1
8112e6cc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112e6d0:	00004906 	br	8112e7f8 <OSFlagPost+0x2f0>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112e6d4:	e0bffc17 	ldw	r2,-16(fp)
8112e6d8:	10c0020b 	ldhu	r3,8(r2)
8112e6dc:	e0bff117 	ldw	r2,-60(fp)
8112e6e0:	1080040b 	ldhu	r2,16(r2)
8112e6e4:	1884703a 	and	r2,r3,r2
8112e6e8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112e6ec:	e0bff60b 	ldhu	r2,-40(fp)
8112e6f0:	10004326 	beq	r2,zero,8112e800 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112e6f4:	e0bff60b 	ldhu	r2,-40(fp)
8112e6f8:	100b883a 	mov	r5,r2
8112e6fc:	e13ff117 	ldw	r4,-60(fp)
8112e700:	112ebc00 	call	8112ebc0 <OS_FlagTaskRdy>
8112e704:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112e708:	e0bff683 	ldbu	r2,-38(fp)
8112e70c:	10800058 	cmpnei	r2,r2,1
8112e710:	10003b1e 	bne	r2,zero,8112e800 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112e714:	00800044 	movi	r2,1
8112e718:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112e71c:	00003806 	br	8112e800 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112e720:	e0bffc17 	ldw	r2,-16(fp)
8112e724:	1080020b 	ldhu	r2,8(r2)
8112e728:	0084303a 	nor	r2,zero,r2
8112e72c:	1007883a 	mov	r3,r2
8112e730:	e0bff117 	ldw	r2,-60(fp)
8112e734:	1080040b 	ldhu	r2,16(r2)
8112e738:	1884703a 	and	r2,r3,r2
8112e73c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112e740:	e0bff117 	ldw	r2,-60(fp)
8112e744:	1080040b 	ldhu	r2,16(r2)
8112e748:	10ffffcc 	andi	r3,r2,65535
8112e74c:	e0bff60b 	ldhu	r2,-40(fp)
8112e750:	18802d1e 	bne	r3,r2,8112e808 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112e754:	e0bff60b 	ldhu	r2,-40(fp)
8112e758:	100b883a 	mov	r5,r2
8112e75c:	e13ff117 	ldw	r4,-60(fp)
8112e760:	112ebc00 	call	8112ebc0 <OS_FlagTaskRdy>
8112e764:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112e768:	e0bff683 	ldbu	r2,-38(fp)
8112e76c:	10800058 	cmpnei	r2,r2,1
8112e770:	1000251e 	bne	r2,zero,8112e808 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112e774:	00800044 	movi	r2,1
8112e778:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112e77c:	00002206 	br	8112e808 <OSFlagPost+0x300>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112e780:	e0bffc17 	ldw	r2,-16(fp)
8112e784:	1080020b 	ldhu	r2,8(r2)
8112e788:	0084303a 	nor	r2,zero,r2
8112e78c:	1007883a 	mov	r3,r2
8112e790:	e0bff117 	ldw	r2,-60(fp)
8112e794:	1080040b 	ldhu	r2,16(r2)
8112e798:	1884703a 	and	r2,r3,r2
8112e79c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112e7a0:	e0bff60b 	ldhu	r2,-40(fp)
8112e7a4:	10001a26 	beq	r2,zero,8112e810 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112e7a8:	e0bff60b 	ldhu	r2,-40(fp)
8112e7ac:	100b883a 	mov	r5,r2
8112e7b0:	e13ff117 	ldw	r4,-60(fp)
8112e7b4:	112ebc00 	call	8112ebc0 <OS_FlagTaskRdy>
8112e7b8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112e7bc:	e0bff683 	ldbu	r2,-38(fp)
8112e7c0:	10800058 	cmpnei	r2,r2,1
8112e7c4:	1000121e 	bne	r2,zero,8112e810 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112e7c8:	00800044 	movi	r2,1
8112e7cc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112e7d0:	00000f06 	br	8112e810 <OSFlagPost+0x308>
8112e7d4:	e0bff317 	ldw	r2,-52(fp)
8112e7d8:	e0bff515 	stw	r2,-44(fp)
8112e7dc:	e0bff517 	ldw	r2,-44(fp)
8112e7e0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112e7e4:	e0bfff17 	ldw	r2,-4(fp)
8112e7e8:	00c01bc4 	movi	r3,111
8112e7ec:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112e7f0:	0005883a 	mov	r2,zero
8112e7f4:	00002606 	br	8112e890 <OSFlagPost+0x388>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112e7f8:	0001883a 	nop
8112e7fc:	00000506 	br	8112e814 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112e800:	0001883a 	nop
8112e804:	00000306 	br	8112e814 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112e808:	0001883a 	nop
8112e80c:	00000106 	br	8112e814 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112e810:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
8112e814:	e0bff117 	ldw	r2,-60(fp)
8112e818:	10800017 	ldw	r2,0(r2)
8112e81c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112e820:	e0bff117 	ldw	r2,-60(fp)
8112e824:	103f871e 	bne	r2,zero,8112e644 <__reset+0xfb10e644>
8112e828:	e0bff317 	ldw	r2,-52(fp)
8112e82c:	e0bff715 	stw	r2,-36(fp)
8112e830:	e0bff717 	ldw	r2,-36(fp)
8112e834:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
8112e838:	e0bff203 	ldbu	r2,-56(fp)
8112e83c:	10800058 	cmpnei	r2,r2,1
8112e840:	1000011e 	bne	r2,zero,8112e848 <OSFlagPost+0x340>
        OS_Sched();
8112e844:	112ccd00 	call	8112ccd0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e848:	0005303a 	rdctl	r2,status
8112e84c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e850:	e0fffa17 	ldw	r3,-24(fp)
8112e854:	00bfff84 	movi	r2,-2
8112e858:	1884703a 	and	r2,r3,r2
8112e85c:	1001703a 	wrctl	status,r2
  
  return context;
8112e860:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
8112e864:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
8112e868:	e0bffc17 	ldw	r2,-16(fp)
8112e86c:	1080020b 	ldhu	r2,8(r2)
8112e870:	e0bff90d 	sth	r2,-28(fp)
8112e874:	e0bff317 	ldw	r2,-52(fp)
8112e878:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e87c:	e0bff817 	ldw	r2,-32(fp)
8112e880:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
8112e884:	e0bfff17 	ldw	r2,-4(fp)
8112e888:	10000005 	stb	zero,0(r2)
    return (flags_cur);
8112e88c:	e0bff90b 	ldhu	r2,-28(fp)
}
8112e890:	e037883a 	mov	sp,fp
8112e894:	dfc00117 	ldw	ra,4(sp)
8112e898:	df000017 	ldw	fp,0(sp)
8112e89c:	dec00204 	addi	sp,sp,8
8112e8a0:	f800283a 	ret

8112e8a4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
8112e8a4:	defff904 	addi	sp,sp,-28
8112e8a8:	de00012e 	bgeu	sp,et,8112e8b0 <OSFlagQuery+0xc>
8112e8ac:	003b68fa 	trap	3
8112e8b0:	df000615 	stw	fp,24(sp)
8112e8b4:	df000604 	addi	fp,sp,24
8112e8b8:	e13ffe15 	stw	r4,-8(fp)
8112e8bc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
8112e8c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
8112e8c4:	e0bfff17 	ldw	r2,-4(fp)
8112e8c8:	1000021e 	bne	r2,zero,8112e8d4 <OSFlagQuery+0x30>
        return ((OS_FLAGS)0);
8112e8cc:	0005883a 	mov	r2,zero
8112e8d0:	00002306 	br	8112e960 <OSFlagQuery+0xbc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
8112e8d4:	e0bffe17 	ldw	r2,-8(fp)
8112e8d8:	1000051e 	bne	r2,zero,8112e8f0 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112e8dc:	e0bfff17 	ldw	r2,-4(fp)
8112e8e0:	00c01b84 	movi	r3,110
8112e8e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112e8e8:	0005883a 	mov	r2,zero
8112e8ec:	00001c06 	br	8112e960 <OSFlagQuery+0xbc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
8112e8f0:	e0bffe17 	ldw	r2,-8(fp)
8112e8f4:	10800003 	ldbu	r2,0(r2)
8112e8f8:	10803fcc 	andi	r2,r2,255
8112e8fc:	10800160 	cmpeqi	r2,r2,5
8112e900:	1000051e 	bne	r2,zero,8112e918 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112e904:	e0bfff17 	ldw	r2,-4(fp)
8112e908:	00c00044 	movi	r3,1
8112e90c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112e910:	0005883a 	mov	r2,zero
8112e914:	00001206 	br	8112e960 <OSFlagQuery+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e918:	0005303a 	rdctl	r2,status
8112e91c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e920:	e0fffc17 	ldw	r3,-16(fp)
8112e924:	00bfff84 	movi	r2,-2
8112e928:	1884703a 	and	r2,r3,r2
8112e92c:	1001703a 	wrctl	status,r2
  
  return context;
8112e930:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112e934:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
8112e938:	e0bffe17 	ldw	r2,-8(fp)
8112e93c:	1080020b 	ldhu	r2,8(r2)
8112e940:	e0bffb0d 	sth	r2,-20(fp)
8112e944:	e0bffa17 	ldw	r2,-24(fp)
8112e948:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e94c:	e0bffd17 	ldw	r2,-12(fp)
8112e950:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112e954:	e0bfff17 	ldw	r2,-4(fp)
8112e958:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
8112e95c:	e0bffb0b 	ldhu	r2,-20(fp)
}
8112e960:	e037883a 	mov	sp,fp
8112e964:	df000017 	ldw	fp,0(sp)
8112e968:	dec00104 	addi	sp,sp,4
8112e96c:	f800283a 	ret

8112e970 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
8112e970:	defff804 	addi	sp,sp,-32
8112e974:	de00012e 	bgeu	sp,et,8112e97c <OS_FlagBlock+0xc>
8112e978:	003b68fa 	trap	3
8112e97c:	df000715 	stw	fp,28(sp)
8112e980:	df000704 	addi	fp,sp,28
8112e984:	e13ffb15 	stw	r4,-20(fp)
8112e988:	e17ffc15 	stw	r5,-16(fp)
8112e98c:	3009883a 	mov	r4,r6
8112e990:	3807883a 	mov	r3,r7
8112e994:	e0800117 	ldw	r2,4(fp)
8112e998:	e13ffd0d 	sth	r4,-12(fp)
8112e99c:	e0fffe05 	stb	r3,-8(fp)
8112e9a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
8112e9a4:	d0a08c17 	ldw	r2,-32208(gp)
8112e9a8:	d0e08c17 	ldw	r3,-32208(gp)
8112e9ac:	18c00c03 	ldbu	r3,48(r3)
8112e9b0:	18c00814 	ori	r3,r3,32
8112e9b4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
8112e9b8:	d0a08c17 	ldw	r2,-32208(gp)
8112e9bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
8112e9c0:	d0a08c17 	ldw	r2,-32208(gp)
8112e9c4:	e0ffff0b 	ldhu	r3,-4(fp)
8112e9c8:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
8112e9cc:	d0a08c17 	ldw	r2,-32208(gp)
8112e9d0:	e0fffc17 	ldw	r3,-16(fp)
8112e9d4:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
8112e9d8:	e0bffc17 	ldw	r2,-16(fp)
8112e9dc:	e0fffd0b 	ldhu	r3,-12(fp)
8112e9e0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
8112e9e4:	e0bffc17 	ldw	r2,-16(fp)
8112e9e8:	e0fffe03 	ldbu	r3,-8(fp)
8112e9ec:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
8112e9f0:	d0e08c17 	ldw	r3,-32208(gp)
8112e9f4:	e0bffc17 	ldw	r2,-16(fp)
8112e9f8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
8112e9fc:	e0bffb17 	ldw	r2,-20(fp)
8112ea00:	10c00117 	ldw	r3,4(r2)
8112ea04:	e0bffc17 	ldw	r2,-16(fp)
8112ea08:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
8112ea0c:	e0bffc17 	ldw	r2,-16(fp)
8112ea10:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
8112ea14:	e0bffc17 	ldw	r2,-16(fp)
8112ea18:	e0fffb17 	ldw	r3,-20(fp)
8112ea1c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112ea20:	e0bffb17 	ldw	r2,-20(fp)
8112ea24:	10800117 	ldw	r2,4(r2)
8112ea28:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
8112ea2c:	e0bff917 	ldw	r2,-28(fp)
8112ea30:	10000326 	beq	r2,zero,8112ea40 <OS_FlagBlock+0xd0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
8112ea34:	e0bff917 	ldw	r2,-28(fp)
8112ea38:	e0fffc17 	ldw	r3,-16(fp)
8112ea3c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
8112ea40:	e0bffb17 	ldw	r2,-20(fp)
8112ea44:	e0fffc17 	ldw	r3,-16(fp)
8112ea48:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
8112ea4c:	d0a08c17 	ldw	r2,-32208(gp)
8112ea50:	10800d03 	ldbu	r2,52(r2)
8112ea54:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112ea58:	e0fffa03 	ldbu	r3,-24(fp)
8112ea5c:	e13ffa03 	ldbu	r4,-24(fp)
8112ea60:	d0a08844 	addi	r2,gp,-32223
8112ea64:	2085883a 	add	r2,r4,r2
8112ea68:	10800003 	ldbu	r2,0(r2)
8112ea6c:	1009883a 	mov	r4,r2
8112ea70:	d0a08c17 	ldw	r2,-32208(gp)
8112ea74:	10800d43 	ldbu	r2,53(r2)
8112ea78:	0084303a 	nor	r2,zero,r2
8112ea7c:	2084703a 	and	r2,r4,r2
8112ea80:	1009883a 	mov	r4,r2
8112ea84:	d0a08844 	addi	r2,gp,-32223
8112ea88:	1885883a 	add	r2,r3,r2
8112ea8c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
8112ea90:	e0fffa03 	ldbu	r3,-24(fp)
8112ea94:	d0a08844 	addi	r2,gp,-32223
8112ea98:	1885883a 	add	r2,r3,r2
8112ea9c:	10800003 	ldbu	r2,0(r2)
8112eaa0:	10803fcc 	andi	r2,r2,255
8112eaa4:	1000071e 	bne	r2,zero,8112eac4 <OS_FlagBlock+0x154>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112eaa8:	d0a08c17 	ldw	r2,-32208(gp)
8112eaac:	10800d83 	ldbu	r2,54(r2)
8112eab0:	0084303a 	nor	r2,zero,r2
8112eab4:	1007883a 	mov	r3,r2
8112eab8:	d0a08803 	ldbu	r2,-32224(gp)
8112eabc:	1884703a 	and	r2,r3,r2
8112eac0:	d0a08805 	stb	r2,-32224(gp)
    }
}
8112eac4:	0001883a 	nop
8112eac8:	e037883a 	mov	sp,fp
8112eacc:	df000017 	ldw	fp,0(sp)
8112ead0:	dec00104 	addi	sp,sp,4
8112ead4:	f800283a 	ret

8112ead8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
8112ead8:	defffb04 	addi	sp,sp,-20
8112eadc:	de00012e 	bgeu	sp,et,8112eae4 <OS_FlagInit+0xc>
8112eae0:	003b68fa 	trap	3
8112eae4:	dfc00415 	stw	ra,16(sp)
8112eae8:	df000315 	stw	fp,12(sp)
8112eaec:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
8112eaf0:	01416004 	movi	r5,1408
8112eaf4:	01204574 	movhi	r4,33045
8112eaf8:	210c7a04 	addi	r4,r4,12776
8112eafc:	112cc040 	call	8112cc04 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
8112eb00:	00a04574 	movhi	r2,33045
8112eb04:	108c7a04 	addi	r2,r2,12776
8112eb08:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
8112eb0c:	00a04574 	movhi	r2,33045
8112eb10:	108c8504 	addi	r2,r2,12820
8112eb14:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112eb18:	e03ffd0d 	sth	zero,-12(fp)
8112eb1c:	00001306 	br	8112eb6c <OS_FlagInit+0x94>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112eb20:	e0bffe17 	ldw	r2,-8(fp)
8112eb24:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
8112eb28:	e0bffe17 	ldw	r2,-8(fp)
8112eb2c:	e0ffff17 	ldw	r3,-4(fp)
8112eb30:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
8112eb34:	e0bffe17 	ldw	r2,-8(fp)
8112eb38:	00c00fc4 	movi	r3,63
8112eb3c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112eb40:	e0bffe17 	ldw	r2,-8(fp)
8112eb44:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
8112eb48:	e0bffe17 	ldw	r2,-8(fp)
8112eb4c:	10800b04 	addi	r2,r2,44
8112eb50:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
8112eb54:	e0bfff17 	ldw	r2,-4(fp)
8112eb58:	10800b04 	addi	r2,r2,44
8112eb5c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112eb60:	e0bffd0b 	ldhu	r2,-12(fp)
8112eb64:	10800044 	addi	r2,r2,1
8112eb68:	e0bffd0d 	sth	r2,-12(fp)
8112eb6c:	e0bffd0b 	ldhu	r2,-12(fp)
8112eb70:	108007f0 	cmpltui	r2,r2,31
8112eb74:	103fea1e 	bne	r2,zero,8112eb20 <__reset+0xfb10eb20>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112eb78:	e0bffe17 	ldw	r2,-8(fp)
8112eb7c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
8112eb80:	e0bffe17 	ldw	r2,-8(fp)
8112eb84:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
8112eb88:	e0bffe17 	ldw	r2,-8(fp)
8112eb8c:	00c00fc4 	movi	r3,63
8112eb90:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112eb94:	e0bffe17 	ldw	r2,-8(fp)
8112eb98:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
8112eb9c:	00a04574 	movhi	r2,33045
8112eba0:	108c7a04 	addi	r2,r2,12776
8112eba4:	d0a09015 	stw	r2,-32192(gp)
#endif
}
8112eba8:	0001883a 	nop
8112ebac:	e037883a 	mov	sp,fp
8112ebb0:	dfc00117 	ldw	ra,4(sp)
8112ebb4:	df000017 	ldw	fp,0(sp)
8112ebb8:	dec00204 	addi	sp,sp,8
8112ebbc:	f800283a 	ret

8112ebc0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
8112ebc0:	defffa04 	addi	sp,sp,-24
8112ebc4:	de00012e 	bgeu	sp,et,8112ebcc <OS_FlagTaskRdy+0xc>
8112ebc8:	003b68fa 	trap	3
8112ebcc:	dfc00515 	stw	ra,20(sp)
8112ebd0:	df000415 	stw	fp,16(sp)
8112ebd4:	df000404 	addi	fp,sp,16
8112ebd8:	e13ffe15 	stw	r4,-8(fp)
8112ebdc:	2805883a 	mov	r2,r5
8112ebe0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
8112ebe4:	e0bffe17 	ldw	r2,-8(fp)
8112ebe8:	10800217 	ldw	r2,8(r2)
8112ebec:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
8112ebf0:	e0bffd17 	ldw	r2,-12(fp)
8112ebf4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
8112ebf8:	e0bffd17 	ldw	r2,-12(fp)
8112ebfc:	e0ffff0b 	ldhu	r3,-4(fp)
8112ec00:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
8112ec04:	e0bffd17 	ldw	r2,-12(fp)
8112ec08:	10c00c03 	ldbu	r3,48(r2)
8112ec0c:	00bff7c4 	movi	r2,-33
8112ec10:	1884703a 	and	r2,r3,r2
8112ec14:	1007883a 	mov	r3,r2
8112ec18:	e0bffd17 	ldw	r2,-12(fp)
8112ec1c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
8112ec20:	e0bffd17 	ldw	r2,-12(fp)
8112ec24:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
8112ec28:	e0bffd17 	ldw	r2,-12(fp)
8112ec2c:	10800c03 	ldbu	r2,48(r2)
8112ec30:	10803fcc 	andi	r2,r2,255
8112ec34:	1000181e 	bne	r2,zero,8112ec98 <OS_FlagTaskRdy+0xd8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
8112ec38:	e0bffd17 	ldw	r2,-12(fp)
8112ec3c:	10c00d83 	ldbu	r3,54(r2)
8112ec40:	d0a08803 	ldbu	r2,-32224(gp)
8112ec44:	1884b03a 	or	r2,r3,r2
8112ec48:	d0a08805 	stb	r2,-32224(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112ec4c:	e0bffd17 	ldw	r2,-12(fp)
8112ec50:	10800d03 	ldbu	r2,52(r2)
8112ec54:	10c03fcc 	andi	r3,r2,255
8112ec58:	e0bffd17 	ldw	r2,-12(fp)
8112ec5c:	10800d03 	ldbu	r2,52(r2)
8112ec60:	11003fcc 	andi	r4,r2,255
8112ec64:	d0a08844 	addi	r2,gp,-32223
8112ec68:	2085883a 	add	r2,r4,r2
8112ec6c:	11000003 	ldbu	r4,0(r2)
8112ec70:	e0bffd17 	ldw	r2,-12(fp)
8112ec74:	10800d43 	ldbu	r2,53(r2)
8112ec78:	2084b03a 	or	r2,r4,r2
8112ec7c:	1009883a 	mov	r4,r2
8112ec80:	d0a08844 	addi	r2,gp,-32223
8112ec84:	1885883a 	add	r2,r3,r2
8112ec88:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
8112ec8c:	00800044 	movi	r2,1
8112ec90:	e0bffc05 	stb	r2,-16(fp)
8112ec94:	00000106 	br	8112ec9c <OS_FlagTaskRdy+0xdc>
    } else {
        sched                   = OS_FALSE;
8112ec98:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
8112ec9c:	e13ffe17 	ldw	r4,-8(fp)
8112eca0:	112ecbc0 	call	8112ecbc <OS_FlagUnlink>
    return (sched);
8112eca4:	e0bffc03 	ldbu	r2,-16(fp)
}
8112eca8:	e037883a 	mov	sp,fp
8112ecac:	dfc00117 	ldw	ra,4(sp)
8112ecb0:	df000017 	ldw	fp,0(sp)
8112ecb4:	dec00204 	addi	sp,sp,8
8112ecb8:	f800283a 	ret

8112ecbc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
8112ecbc:	defffa04 	addi	sp,sp,-24
8112ecc0:	de00012e 	bgeu	sp,et,8112ecc8 <OS_FlagUnlink+0xc>
8112ecc4:	003b68fa 	trap	3
8112ecc8:	df000515 	stw	fp,20(sp)
8112eccc:	df000504 	addi	fp,sp,20
8112ecd0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
8112ecd4:	e0bfff17 	ldw	r2,-4(fp)
8112ecd8:	10800117 	ldw	r2,4(r2)
8112ecdc:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112ece0:	e0bfff17 	ldw	r2,-4(fp)
8112ece4:	10800017 	ldw	r2,0(r2)
8112ece8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
8112ecec:	e0bffb17 	ldw	r2,-20(fp)
8112ecf0:	10000b1e 	bne	r2,zero,8112ed20 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
8112ecf4:	e0bfff17 	ldw	r2,-4(fp)
8112ecf8:	10800317 	ldw	r2,12(r2)
8112ecfc:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
8112ed00:	e0bffd17 	ldw	r2,-12(fp)
8112ed04:	e0fffc17 	ldw	r3,-16(fp)
8112ed08:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
8112ed0c:	e0bffc17 	ldw	r2,-16(fp)
8112ed10:	10000b26 	beq	r2,zero,8112ed40 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
8112ed14:	e0bffc17 	ldw	r2,-16(fp)
8112ed18:	10000115 	stw	zero,4(r2)
8112ed1c:	00000806 	br	8112ed40 <OS_FlagUnlink+0x84>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
8112ed20:	e0bffb17 	ldw	r2,-20(fp)
8112ed24:	e0fffc17 	ldw	r3,-16(fp)
8112ed28:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
8112ed2c:	e0bffc17 	ldw	r2,-16(fp)
8112ed30:	10000326 	beq	r2,zero,8112ed40 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
8112ed34:	e0bffc17 	ldw	r2,-16(fp)
8112ed38:	e0fffb17 	ldw	r3,-20(fp)
8112ed3c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
8112ed40:	e0bfff17 	ldw	r2,-4(fp)
8112ed44:	10800217 	ldw	r2,8(r2)
8112ed48:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
8112ed4c:	e0bffe17 	ldw	r2,-8(fp)
8112ed50:	10000a15 	stw	zero,40(r2)
#endif
}
8112ed54:	0001883a 	nop
8112ed58:	e037883a 	mov	sp,fp
8112ed5c:	df000017 	ldw	fp,0(sp)
8112ed60:	dec00104 	addi	sp,sp,4
8112ed64:	f800283a 	ret

8112ed68 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
8112ed68:	defff404 	addi	sp,sp,-48
8112ed6c:	de00012e 	bgeu	sp,et,8112ed74 <OSMemCreate+0xc>
8112ed70:	003b68fa 	trap	3
8112ed74:	df000b15 	stw	fp,44(sp)
8112ed78:	df000b04 	addi	fp,sp,44
8112ed7c:	e13ffc15 	stw	r4,-16(fp)
8112ed80:	e17ffd15 	stw	r5,-12(fp)
8112ed84:	e1bffe15 	stw	r6,-8(fp)
8112ed88:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112ed8c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112ed90:	e0bfff17 	ldw	r2,-4(fp)
8112ed94:	1000021e 	bne	r2,zero,8112eda0 <OSMemCreate+0x38>
        return ((OS_MEM *)0);
8112ed98:	0005883a 	mov	r2,zero
8112ed9c:	00006506 	br	8112ef34 <OSMemCreate+0x1cc>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
8112eda0:	e0bffc17 	ldw	r2,-16(fp)
8112eda4:	1000051e 	bne	r2,zero,8112edbc <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112eda8:	e0bfff17 	ldw	r2,-4(fp)
8112edac:	00c01884 	movi	r3,98
8112edb0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112edb4:	0005883a 	mov	r2,zero
8112edb8:	00005e06 	br	8112ef34 <OSMemCreate+0x1cc>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
8112edbc:	e0bffc17 	ldw	r2,-16(fp)
8112edc0:	108000cc 	andi	r2,r2,3
8112edc4:	10000526 	beq	r2,zero,8112eddc <OSMemCreate+0x74>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112edc8:	e0bfff17 	ldw	r2,-4(fp)
8112edcc:	00c01884 	movi	r3,98
8112edd0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112edd4:	0005883a 	mov	r2,zero
8112edd8:	00005606 	br	8112ef34 <OSMemCreate+0x1cc>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
8112eddc:	e0bffd17 	ldw	r2,-12(fp)
8112ede0:	108000a8 	cmpgeui	r2,r2,2
8112ede4:	1000051e 	bne	r2,zero,8112edfc <OSMemCreate+0x94>
        *perr = OS_ERR_MEM_INVALID_BLKS;
8112ede8:	e0bfff17 	ldw	r2,-4(fp)
8112edec:	00c016c4 	movi	r3,91
8112edf0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112edf4:	0005883a 	mov	r2,zero
8112edf8:	00004e06 	br	8112ef34 <OSMemCreate+0x1cc>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
8112edfc:	e0bffe17 	ldw	r2,-8(fp)
8112ee00:	10800128 	cmpgeui	r2,r2,4
8112ee04:	1000051e 	bne	r2,zero,8112ee1c <OSMemCreate+0xb4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
8112ee08:	e0bfff17 	ldw	r2,-4(fp)
8112ee0c:	00c01704 	movi	r3,92
8112ee10:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112ee14:	0005883a 	mov	r2,zero
8112ee18:	00004606 	br	8112ef34 <OSMemCreate+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ee1c:	0005303a 	rdctl	r2,status
8112ee20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ee24:	e0fffb17 	ldw	r3,-20(fp)
8112ee28:	00bfff84 	movi	r2,-2
8112ee2c:	1884703a 	and	r2,r3,r2
8112ee30:	1001703a 	wrctl	status,r2
  
  return context;
8112ee34:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112ee38:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
8112ee3c:	d0a08517 	ldw	r2,-32236(gp)
8112ee40:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
8112ee44:	d0a08517 	ldw	r2,-32236(gp)
8112ee48:	10000326 	beq	r2,zero,8112ee58 <OSMemCreate+0xf0>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
8112ee4c:	d0a08517 	ldw	r2,-32236(gp)
8112ee50:	10800117 	ldw	r2,4(r2)
8112ee54:	d0a08515 	stw	r2,-32236(gp)
8112ee58:	e0bff817 	ldw	r2,-32(fp)
8112ee5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ee60:	e0bff917 	ldw	r2,-28(fp)
8112ee64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
8112ee68:	e0bffa17 	ldw	r2,-24(fp)
8112ee6c:	1000051e 	bne	r2,zero,8112ee84 <OSMemCreate+0x11c>
        *perr = OS_ERR_MEM_INVALID_PART;
8112ee70:	e0bfff17 	ldw	r2,-4(fp)
8112ee74:	00c01684 	movi	r3,90
8112ee78:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112ee7c:	0005883a 	mov	r2,zero
8112ee80:	00002c06 	br	8112ef34 <OSMemCreate+0x1cc>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
8112ee84:	e0bffc17 	ldw	r2,-16(fp)
8112ee88:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
8112ee8c:	e0fffc17 	ldw	r3,-16(fp)
8112ee90:	e0bffe17 	ldw	r2,-8(fp)
8112ee94:	1885883a 	add	r2,r3,r2
8112ee98:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
8112ee9c:	e03ff715 	stw	zero,-36(fp)
8112eea0:	00000c06 	br	8112eed4 <OSMemCreate+0x16c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
8112eea4:	e0bff617 	ldw	r2,-40(fp)
8112eea8:	e0fff517 	ldw	r3,-44(fp)
8112eeac:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
8112eeb0:	e0bff517 	ldw	r2,-44(fp)
8112eeb4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
8112eeb8:	e0fff517 	ldw	r3,-44(fp)
8112eebc:	e0bffe17 	ldw	r2,-8(fp)
8112eec0:	1885883a 	add	r2,r3,r2
8112eec4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
8112eec8:	e0bff717 	ldw	r2,-36(fp)
8112eecc:	10800044 	addi	r2,r2,1
8112eed0:	e0bff715 	stw	r2,-36(fp)
8112eed4:	e0bffd17 	ldw	r2,-12(fp)
8112eed8:	10bfffc4 	addi	r2,r2,-1
8112eedc:	e0fff717 	ldw	r3,-36(fp)
8112eee0:	18bff036 	bltu	r3,r2,8112eea4 <__reset+0xfb10eea4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
8112eee4:	e0bff617 	ldw	r2,-40(fp)
8112eee8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
8112eeec:	e0bffa17 	ldw	r2,-24(fp)
8112eef0:	e0fffc17 	ldw	r3,-16(fp)
8112eef4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
8112eef8:	e0bffa17 	ldw	r2,-24(fp)
8112eefc:	e0fffc17 	ldw	r3,-16(fp)
8112ef00:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
8112ef04:	e0bffa17 	ldw	r2,-24(fp)
8112ef08:	e0fffd17 	ldw	r3,-12(fp)
8112ef0c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
8112ef10:	e0bffa17 	ldw	r2,-24(fp)
8112ef14:	e0fffd17 	ldw	r3,-12(fp)
8112ef18:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
8112ef1c:	e0bffa17 	ldw	r2,-24(fp)
8112ef20:	e0fffe17 	ldw	r3,-8(fp)
8112ef24:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
8112ef28:	e0bfff17 	ldw	r2,-4(fp)
8112ef2c:	10000005 	stb	zero,0(r2)
    return (pmem);
8112ef30:	e0bffa17 	ldw	r2,-24(fp)
}
8112ef34:	e037883a 	mov	sp,fp
8112ef38:	df000017 	ldw	fp,0(sp)
8112ef3c:	dec00104 	addi	sp,sp,4
8112ef40:	f800283a 	ret

8112ef44 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
8112ef44:	defff804 	addi	sp,sp,-32
8112ef48:	de00012e 	bgeu	sp,et,8112ef50 <OSMemGet+0xc>
8112ef4c:	003b68fa 	trap	3
8112ef50:	df000715 	stw	fp,28(sp)
8112ef54:	df000704 	addi	fp,sp,28
8112ef58:	e13ffe15 	stw	r4,-8(fp)
8112ef5c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112ef60:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112ef64:	e0bfff17 	ldw	r2,-4(fp)
8112ef68:	1000021e 	bne	r2,zero,8112ef74 <OSMemGet+0x30>
        return ((void *)0);
8112ef6c:	0005883a 	mov	r2,zero
8112ef70:	00002e06 	br	8112f02c <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
8112ef74:	e0bffe17 	ldw	r2,-8(fp)
8112ef78:	1000051e 	bne	r2,zero,8112ef90 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112ef7c:	e0bfff17 	ldw	r2,-4(fp)
8112ef80:	00c01804 	movi	r3,96
8112ef84:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112ef88:	0005883a 	mov	r2,zero
8112ef8c:	00002706 	br	8112f02c <OSMemGet+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ef90:	0005303a 	rdctl	r2,status
8112ef94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ef98:	e0fffd17 	ldw	r3,-12(fp)
8112ef9c:	00bfff84 	movi	r2,-2
8112efa0:	1884703a 	and	r2,r3,r2
8112efa4:	1001703a 	wrctl	status,r2
  
  return context;
8112efa8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112efac:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
8112efb0:	e0bffe17 	ldw	r2,-8(fp)
8112efb4:	10800417 	ldw	r2,16(r2)
8112efb8:	10001426 	beq	r2,zero,8112f00c <OSMemGet+0xc8>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
8112efbc:	e0bffe17 	ldw	r2,-8(fp)
8112efc0:	10800117 	ldw	r2,4(r2)
8112efc4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
8112efc8:	e0bffb17 	ldw	r2,-20(fp)
8112efcc:	10c00017 	ldw	r3,0(r2)
8112efd0:	e0bffe17 	ldw	r2,-8(fp)
8112efd4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
8112efd8:	e0bffe17 	ldw	r2,-8(fp)
8112efdc:	10800417 	ldw	r2,16(r2)
8112efe0:	10ffffc4 	addi	r3,r2,-1
8112efe4:	e0bffe17 	ldw	r2,-8(fp)
8112efe8:	10c00415 	stw	r3,16(r2)
8112efec:	e0bff917 	ldw	r2,-28(fp)
8112eff0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112eff4:	e0bffa17 	ldw	r2,-24(fp)
8112eff8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
8112effc:	e0bfff17 	ldw	r2,-4(fp)
8112f000:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
8112f004:	e0bffb17 	ldw	r2,-20(fp)
8112f008:	00000806 	br	8112f02c <OSMemGet+0xe8>
8112f00c:	e0bff917 	ldw	r2,-28(fp)
8112f010:	e0bffc15 	stw	r2,-16(fp)
8112f014:	e0bffc17 	ldw	r2,-16(fp)
8112f018:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
8112f01c:	e0bfff17 	ldw	r2,-4(fp)
8112f020:	00c01744 	movi	r3,93
8112f024:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
8112f028:	0005883a 	mov	r2,zero
}
8112f02c:	e037883a 	mov	sp,fp
8112f030:	df000017 	ldw	fp,0(sp)
8112f034:	dec00104 	addi	sp,sp,4
8112f038:	f800283a 	ret

8112f03c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112f03c:	defff704 	addi	sp,sp,-36
8112f040:	de00012e 	bgeu	sp,et,8112f048 <OSMemNameGet+0xc>
8112f044:	003b68fa 	trap	3
8112f048:	dfc00815 	stw	ra,32(sp)
8112f04c:	df000715 	stw	fp,28(sp)
8112f050:	df000704 	addi	fp,sp,28
8112f054:	e13ffd15 	stw	r4,-12(fp)
8112f058:	e17ffe15 	stw	r5,-8(fp)
8112f05c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112f060:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112f064:	e0bfff17 	ldw	r2,-4(fp)
8112f068:	1000021e 	bne	r2,zero,8112f074 <OSMemNameGet+0x38>
        return (0);
8112f06c:	0005883a 	mov	r2,zero
8112f070:	00002b06 	br	8112f120 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112f074:	e0bffd17 	ldw	r2,-12(fp)
8112f078:	1000051e 	bne	r2,zero,8112f090 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112f07c:	e0bfff17 	ldw	r2,-4(fp)
8112f080:	00c01804 	movi	r3,96
8112f084:	10c00005 	stb	r3,0(r2)
        return (0);
8112f088:	0005883a 	mov	r2,zero
8112f08c:	00002406 	br	8112f120 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112f090:	e0bffe17 	ldw	r2,-8(fp)
8112f094:	1000051e 	bne	r2,zero,8112f0ac <OSMemNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112f098:	e0bfff17 	ldw	r2,-4(fp)
8112f09c:	00c00304 	movi	r3,12
8112f0a0:	10c00005 	stb	r3,0(r2)
        return (0);
8112f0a4:	0005883a 	mov	r2,zero
8112f0a8:	00001d06 	br	8112f120 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112f0ac:	d0a08b03 	ldbu	r2,-32212(gp)
8112f0b0:	10803fcc 	andi	r2,r2,255
8112f0b4:	10000526 	beq	r2,zero,8112f0cc <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112f0b8:	e0bfff17 	ldw	r2,-4(fp)
8112f0bc:	00c00444 	movi	r3,17
8112f0c0:	10c00005 	stb	r3,0(r2)
        return (0);
8112f0c4:	0005883a 	mov	r2,zero
8112f0c8:	00001506 	br	8112f120 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f0cc:	0005303a 	rdctl	r2,status
8112f0d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f0d4:	e0fffb17 	ldw	r3,-20(fp)
8112f0d8:	00bfff84 	movi	r2,-2
8112f0dc:	1884703a 	and	r2,r3,r2
8112f0e0:	1001703a 	wrctl	status,r2
  
  return context;
8112f0e4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8112f0e8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
8112f0ec:	e0bffd17 	ldw	r2,-12(fp)
8112f0f0:	10800504 	addi	r2,r2,20
8112f0f4:	100b883a 	mov	r5,r2
8112f0f8:	e13ffe17 	ldw	r4,-8(fp)
8112f0fc:	112ce240 	call	8112ce24 <OS_StrCopy>
8112f100:	e0bffa05 	stb	r2,-24(fp)
8112f104:	e0bff917 	ldw	r2,-28(fp)
8112f108:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f10c:	e0bffc17 	ldw	r2,-16(fp)
8112f110:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112f114:	e0bfff17 	ldw	r2,-4(fp)
8112f118:	10000005 	stb	zero,0(r2)
    return (len);
8112f11c:	e0bffa03 	ldbu	r2,-24(fp)
}
8112f120:	e037883a 	mov	sp,fp
8112f124:	dfc00117 	ldw	ra,4(sp)
8112f128:	df000017 	ldw	fp,0(sp)
8112f12c:	dec00204 	addi	sp,sp,8
8112f130:	f800283a 	ret

8112f134 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112f134:	defff604 	addi	sp,sp,-40
8112f138:	de00012e 	bgeu	sp,et,8112f140 <OSMemNameSet+0xc>
8112f13c:	003b68fa 	trap	3
8112f140:	dfc00915 	stw	ra,36(sp)
8112f144:	df000815 	stw	fp,32(sp)
8112f148:	df000804 	addi	fp,sp,32
8112f14c:	e13ffd15 	stw	r4,-12(fp)
8112f150:	e17ffe15 	stw	r5,-8(fp)
8112f154:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112f158:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112f15c:	e0bfff17 	ldw	r2,-4(fp)
8112f160:	10003526 	beq	r2,zero,8112f238 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112f164:	e0bffd17 	ldw	r2,-12(fp)
8112f168:	1000041e 	bne	r2,zero,8112f17c <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112f16c:	e0bfff17 	ldw	r2,-4(fp)
8112f170:	00c01804 	movi	r3,96
8112f174:	10c00005 	stb	r3,0(r2)
        return;
8112f178:	00003006 	br	8112f23c <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112f17c:	e0bffe17 	ldw	r2,-8(fp)
8112f180:	1000041e 	bne	r2,zero,8112f194 <OSMemNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112f184:	e0bfff17 	ldw	r2,-4(fp)
8112f188:	00c00304 	movi	r3,12
8112f18c:	10c00005 	stb	r3,0(r2)
        return;
8112f190:	00002a06 	br	8112f23c <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112f194:	d0a08b03 	ldbu	r2,-32212(gp)
8112f198:	10803fcc 	andi	r2,r2,255
8112f19c:	10000426 	beq	r2,zero,8112f1b0 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112f1a0:	e0bfff17 	ldw	r2,-4(fp)
8112f1a4:	00c00484 	movi	r3,18
8112f1a8:	10c00005 	stb	r3,0(r2)
        return;
8112f1ac:	00002306 	br	8112f23c <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f1b0:	0005303a 	rdctl	r2,status
8112f1b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f1b8:	e0fffc17 	ldw	r3,-16(fp)
8112f1bc:	00bfff84 	movi	r2,-2
8112f1c0:	1884703a 	and	r2,r3,r2
8112f1c4:	1001703a 	wrctl	status,r2
  
  return context;
8112f1c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f1cc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112f1d0:	e13ffe17 	ldw	r4,-8(fp)
8112f1d4:	112cea00 	call	8112cea0 <OS_StrLen>
8112f1d8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
8112f1dc:	e0bffa03 	ldbu	r2,-24(fp)
8112f1e0:	10800830 	cmpltui	r2,r2,32
8112f1e4:	1000081e 	bne	r2,zero,8112f208 <OSMemNameSet+0xd4>
8112f1e8:	e0bff817 	ldw	r2,-32(fp)
8112f1ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f1f0:	e0bff917 	ldw	r2,-28(fp)
8112f1f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
8112f1f8:	e0bfff17 	ldw	r2,-4(fp)
8112f1fc:	00c018c4 	movi	r3,99
8112f200:	10c00005 	stb	r3,0(r2)
        return;
8112f204:	00000d06 	br	8112f23c <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
8112f208:	e0bffd17 	ldw	r2,-12(fp)
8112f20c:	10800504 	addi	r2,r2,20
8112f210:	e17ffe17 	ldw	r5,-8(fp)
8112f214:	1009883a 	mov	r4,r2
8112f218:	112ce240 	call	8112ce24 <OS_StrCopy>
8112f21c:	e0bff817 	ldw	r2,-32(fp)
8112f220:	e0bffb15 	stw	r2,-20(fp)
8112f224:	e0bffb17 	ldw	r2,-20(fp)
8112f228:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112f22c:	e0bfff17 	ldw	r2,-4(fp)
8112f230:	10000005 	stb	zero,0(r2)
8112f234:	00000106 	br	8112f23c <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112f238:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112f23c:	e037883a 	mov	sp,fp
8112f240:	dfc00117 	ldw	ra,4(sp)
8112f244:	df000017 	ldw	fp,0(sp)
8112f248:	dec00204 	addi	sp,sp,8
8112f24c:	f800283a 	ret

8112f250 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
8112f250:	defff904 	addi	sp,sp,-28
8112f254:	de00012e 	bgeu	sp,et,8112f25c <OSMemPut+0xc>
8112f258:	003b68fa 	trap	3
8112f25c:	df000615 	stw	fp,24(sp)
8112f260:	df000604 	addi	fp,sp,24
8112f264:	e13ffe15 	stw	r4,-8(fp)
8112f268:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112f26c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112f270:	e0bffe17 	ldw	r2,-8(fp)
8112f274:	1000021e 	bne	r2,zero,8112f280 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112f278:	00801804 	movi	r2,96
8112f27c:	00002806 	br	8112f320 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
8112f280:	e0bfff17 	ldw	r2,-4(fp)
8112f284:	1000021e 	bne	r2,zero,8112f290 <OSMemPut+0x40>
        return (OS_ERR_MEM_INVALID_PBLK);
8112f288:	008017c4 	movi	r2,95
8112f28c:	00002406 	br	8112f320 <OSMemPut+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f290:	0005303a 	rdctl	r2,status
8112f294:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f298:	e0fffd17 	ldw	r3,-12(fp)
8112f29c:	00bfff84 	movi	r2,-2
8112f2a0:	1884703a 	and	r2,r3,r2
8112f2a4:	1001703a 	wrctl	status,r2
  
  return context;
8112f2a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112f2ac:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
8112f2b0:	e0bffe17 	ldw	r2,-8(fp)
8112f2b4:	10c00417 	ldw	r3,16(r2)
8112f2b8:	e0bffe17 	ldw	r2,-8(fp)
8112f2bc:	10800317 	ldw	r2,12(r2)
8112f2c0:	18800636 	bltu	r3,r2,8112f2dc <OSMemPut+0x8c>
8112f2c4:	e0bffa17 	ldw	r2,-24(fp)
8112f2c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f2cc:	e0bffb17 	ldw	r2,-20(fp)
8112f2d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
8112f2d4:	00801784 	movi	r2,94
8112f2d8:	00001106 	br	8112f320 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
8112f2dc:	e0bffe17 	ldw	r2,-8(fp)
8112f2e0:	10c00117 	ldw	r3,4(r2)
8112f2e4:	e0bfff17 	ldw	r2,-4(fp)
8112f2e8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
8112f2ec:	e0bffe17 	ldw	r2,-8(fp)
8112f2f0:	e0ffff17 	ldw	r3,-4(fp)
8112f2f4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8112f2f8:	e0bffe17 	ldw	r2,-8(fp)
8112f2fc:	10800417 	ldw	r2,16(r2)
8112f300:	10c00044 	addi	r3,r2,1
8112f304:	e0bffe17 	ldw	r2,-8(fp)
8112f308:	10c00415 	stw	r3,16(r2)
8112f30c:	e0bffa17 	ldw	r2,-24(fp)
8112f310:	e0bffc15 	stw	r2,-16(fp)
8112f314:	e0bffc17 	ldw	r2,-16(fp)
8112f318:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
8112f31c:	0005883a 	mov	r2,zero
}
8112f320:	e037883a 	mov	sp,fp
8112f324:	df000017 	ldw	fp,0(sp)
8112f328:	dec00104 	addi	sp,sp,4
8112f32c:	f800283a 	ret

8112f330 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
8112f330:	defffa04 	addi	sp,sp,-24
8112f334:	de00012e 	bgeu	sp,et,8112f33c <OSMemQuery+0xc>
8112f338:	003b68fa 	trap	3
8112f33c:	df000515 	stw	fp,20(sp)
8112f340:	df000504 	addi	fp,sp,20
8112f344:	e13ffe15 	stw	r4,-8(fp)
8112f348:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112f34c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112f350:	e0bffe17 	ldw	r2,-8(fp)
8112f354:	1000021e 	bne	r2,zero,8112f360 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112f358:	00801804 	movi	r2,96
8112f35c:	00002c06 	br	8112f410 <OSMemQuery+0xe0>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
8112f360:	e0bfff17 	ldw	r2,-4(fp)
8112f364:	1000021e 	bne	r2,zero,8112f370 <OSMemQuery+0x40>
        return (OS_ERR_MEM_INVALID_PDATA);
8112f368:	00801844 	movi	r2,97
8112f36c:	00002806 	br	8112f410 <OSMemQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f370:	0005303a 	rdctl	r2,status
8112f374:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f378:	e0fffc17 	ldw	r3,-16(fp)
8112f37c:	00bfff84 	movi	r2,-2
8112f380:	1884703a 	and	r2,r3,r2
8112f384:	1001703a 	wrctl	status,r2
  
  return context;
8112f388:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112f38c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
8112f390:	e0bffe17 	ldw	r2,-8(fp)
8112f394:	10c00017 	ldw	r3,0(r2)
8112f398:	e0bfff17 	ldw	r2,-4(fp)
8112f39c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
8112f3a0:	e0bffe17 	ldw	r2,-8(fp)
8112f3a4:	10c00117 	ldw	r3,4(r2)
8112f3a8:	e0bfff17 	ldw	r2,-4(fp)
8112f3ac:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
8112f3b0:	e0bffe17 	ldw	r2,-8(fp)
8112f3b4:	10c00217 	ldw	r3,8(r2)
8112f3b8:	e0bfff17 	ldw	r2,-4(fp)
8112f3bc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
8112f3c0:	e0bffe17 	ldw	r2,-8(fp)
8112f3c4:	10c00317 	ldw	r3,12(r2)
8112f3c8:	e0bfff17 	ldw	r2,-4(fp)
8112f3cc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
8112f3d0:	e0bffe17 	ldw	r2,-8(fp)
8112f3d4:	10c00417 	ldw	r3,16(r2)
8112f3d8:	e0bfff17 	ldw	r2,-4(fp)
8112f3dc:	10c00415 	stw	r3,16(r2)
8112f3e0:	e0bffb17 	ldw	r2,-20(fp)
8112f3e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f3e8:	e0bffd17 	ldw	r2,-12(fp)
8112f3ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
8112f3f0:	e0bfff17 	ldw	r2,-4(fp)
8112f3f4:	10c00317 	ldw	r3,12(r2)
8112f3f8:	e0bfff17 	ldw	r2,-4(fp)
8112f3fc:	10800417 	ldw	r2,16(r2)
8112f400:	1887c83a 	sub	r3,r3,r2
8112f404:	e0bfff17 	ldw	r2,-4(fp)
8112f408:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
8112f40c:	0005883a 	mov	r2,zero
}
8112f410:	e037883a 	mov	sp,fp
8112f414:	df000017 	ldw	fp,0(sp)
8112f418:	dec00104 	addi	sp,sp,4
8112f41c:	f800283a 	ret

8112f420 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
8112f420:	defffc04 	addi	sp,sp,-16
8112f424:	de00012e 	bgeu	sp,et,8112f42c <OS_MemInit+0xc>
8112f428:	003b68fa 	trap	3
8112f42c:	dfc00315 	stw	ra,12(sp)
8112f430:	df000215 	stw	fp,8(sp)
8112f434:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
8112f438:	01430c04 	movi	r5,3120
8112f43c:	01204574 	movhi	r4,33045
8112f440:	210e4204 	addi	r4,r4,14600
8112f444:	112cc040 	call	8112cc04 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
8112f448:	00a04574 	movhi	r2,33045
8112f44c:	108e4204 	addi	r2,r2,14600
8112f450:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112f454:	e03fff0d 	sth	zero,-4(fp)
8112f458:	00001306 	br	8112f4a8 <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8112f45c:	e0bfff0b 	ldhu	r2,-4(fp)
8112f460:	10800044 	addi	r2,r2,1
8112f464:	10c00d24 	muli	r3,r2,52
8112f468:	00a04574 	movhi	r2,33045
8112f46c:	108e4204 	addi	r2,r2,14600
8112f470:	1887883a 	add	r3,r3,r2
8112f474:	e0bffe17 	ldw	r2,-8(fp)
8112f478:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8112f47c:	e0bffe17 	ldw	r2,-8(fp)
8112f480:	00c00fc4 	movi	r3,63
8112f484:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8112f488:	e0bffe17 	ldw	r2,-8(fp)
8112f48c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
8112f490:	e0bffe17 	ldw	r2,-8(fp)
8112f494:	10800d04 	addi	r2,r2,52
8112f498:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112f49c:	e0bfff0b 	ldhu	r2,-4(fp)
8112f4a0:	10800044 	addi	r2,r2,1
8112f4a4:	e0bfff0d 	sth	r2,-4(fp)
8112f4a8:	e0bfff0b 	ldhu	r2,-4(fp)
8112f4ac:	10800ef0 	cmpltui	r2,r2,59
8112f4b0:	103fea1e 	bne	r2,zero,8112f45c <__reset+0xfb10f45c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
8112f4b4:	e0bffe17 	ldw	r2,-8(fp)
8112f4b8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
8112f4bc:	e0bffe17 	ldw	r2,-8(fp)
8112f4c0:	00c00fc4 	movi	r3,63
8112f4c4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
8112f4c8:	e0bffe17 	ldw	r2,-8(fp)
8112f4cc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
8112f4d0:	00a04574 	movhi	r2,33045
8112f4d4:	108e4204 	addi	r2,r2,14600
8112f4d8:	d0a08515 	stw	r2,-32236(gp)
#endif
}
8112f4dc:	0001883a 	nop
8112f4e0:	e037883a 	mov	sp,fp
8112f4e4:	dfc00117 	ldw	ra,4(sp)
8112f4e8:	df000017 	ldw	fp,0(sp)
8112f4ec:	dec00204 	addi	sp,sp,8
8112f4f0:	f800283a 	ret

8112f4f4 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
8112f4f4:	defff704 	addi	sp,sp,-36
8112f4f8:	de00012e 	bgeu	sp,et,8112f500 <OSMutexAccept+0xc>
8112f4fc:	003b68fa 	trap	3
8112f500:	df000815 	stw	fp,32(sp)
8112f504:	df000804 	addi	fp,sp,32
8112f508:	e13ffe15 	stw	r4,-8(fp)
8112f50c:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112f510:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
8112f514:	e0bfff17 	ldw	r2,-4(fp)
8112f518:	1000021e 	bne	r2,zero,8112f524 <OSMutexAccept+0x30>
        return (OS_FALSE);
8112f51c:	0005883a 	mov	r2,zero
8112f520:	00005b06 	br	8112f690 <OSMutexAccept+0x19c>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112f524:	e0bffe17 	ldw	r2,-8(fp)
8112f528:	1000051e 	bne	r2,zero,8112f540 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112f52c:	e0bfff17 	ldw	r2,-4(fp)
8112f530:	00c00104 	movi	r3,4
8112f534:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112f538:	0005883a 	mov	r2,zero
8112f53c:	00005406 	br	8112f690 <OSMutexAccept+0x19c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
8112f540:	e0bffe17 	ldw	r2,-8(fp)
8112f544:	10800003 	ldbu	r2,0(r2)
8112f548:	10803fcc 	andi	r2,r2,255
8112f54c:	10800120 	cmpeqi	r2,r2,4
8112f550:	1000051e 	bne	r2,zero,8112f568 <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112f554:	e0bfff17 	ldw	r2,-4(fp)
8112f558:	00c00044 	movi	r3,1
8112f55c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112f560:	0005883a 	mov	r2,zero
8112f564:	00004a06 	br	8112f690 <OSMutexAccept+0x19c>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
8112f568:	d0a08b03 	ldbu	r2,-32212(gp)
8112f56c:	10803fcc 	andi	r2,r2,255
8112f570:	10000526 	beq	r2,zero,8112f588 <OSMutexAccept+0x94>
        *perr = OS_ERR_PEND_ISR;
8112f574:	e0bfff17 	ldw	r2,-4(fp)
8112f578:	00c00084 	movi	r3,2
8112f57c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112f580:	0005883a 	mov	r2,zero
8112f584:	00004206 	br	8112f690 <OSMutexAccept+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f588:	0005303a 	rdctl	r2,status
8112f58c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f590:	e0fffd17 	ldw	r3,-12(fp)
8112f594:	00bfff84 	movi	r2,-2
8112f598:	1884703a 	and	r2,r3,r2
8112f59c:	1001703a 	wrctl	status,r2
  
  return context;
8112f5a0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
8112f5a4:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
8112f5a8:	e0bffe17 	ldw	r2,-8(fp)
8112f5ac:	1080020b 	ldhu	r2,8(r2)
8112f5b0:	10bfffcc 	andi	r2,r2,65535
8112f5b4:	1004d23a 	srli	r2,r2,8
8112f5b8:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112f5bc:	e0bffe17 	ldw	r2,-8(fp)
8112f5c0:	1080020b 	ldhu	r2,8(r2)
8112f5c4:	10bfffcc 	andi	r2,r2,65535
8112f5c8:	10803fcc 	andi	r2,r2,255
8112f5cc:	10803fd8 	cmpnei	r2,r2,255
8112f5d0:	1000281e 	bne	r2,zero,8112f674 <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
8112f5d4:	e0bffe17 	ldw	r2,-8(fp)
8112f5d8:	10c0020b 	ldhu	r3,8(r2)
8112f5dc:	00bfc004 	movi	r2,-256
8112f5e0:	1884703a 	and	r2,r3,r2
8112f5e4:	1007883a 	mov	r3,r2
8112f5e8:	e0bffe17 	ldw	r2,-8(fp)
8112f5ec:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
8112f5f0:	e0bffe17 	ldw	r2,-8(fp)
8112f5f4:	10c0020b 	ldhu	r3,8(r2)
8112f5f8:	d0a08c17 	ldw	r2,-32208(gp)
8112f5fc:	10800c83 	ldbu	r2,50(r2)
8112f600:	10803fcc 	andi	r2,r2,255
8112f604:	1884b03a 	or	r2,r3,r2
8112f608:	1007883a 	mov	r3,r2
8112f60c:	e0bffe17 	ldw	r2,-8(fp)
8112f610:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
8112f614:	d0e08c17 	ldw	r3,-32208(gp)
8112f618:	e0bffe17 	ldw	r2,-8(fp)
8112f61c:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
8112f620:	d0a08c17 	ldw	r2,-32208(gp)
8112f624:	10800c83 	ldbu	r2,50(r2)
8112f628:	10803fcc 	andi	r2,r2,255
8112f62c:	e0fffa03 	ldbu	r3,-24(fp)
8112f630:	18800836 	bltu	r3,r2,8112f654 <OSMutexAccept+0x160>
8112f634:	e0bff817 	ldw	r2,-32(fp)
8112f638:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f63c:	e0bff917 	ldw	r2,-28(fp)
8112f640:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
8112f644:	e0bfff17 	ldw	r2,-4(fp)
8112f648:	00c01e04 	movi	r3,120
8112f64c:	10c00005 	stb	r3,0(r2)
8112f650:	00000606 	br	8112f66c <OSMutexAccept+0x178>
8112f654:	e0bff817 	ldw	r2,-32(fp)
8112f658:	e0bffb15 	stw	r2,-20(fp)
8112f65c:	e0bffb17 	ldw	r2,-20(fp)
8112f660:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112f664:	e0bfff17 	ldw	r2,-4(fp)
8112f668:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
8112f66c:	00800044 	movi	r2,1
8112f670:	00000706 	br	8112f690 <OSMutexAccept+0x19c>
8112f674:	e0bff817 	ldw	r2,-32(fp)
8112f678:	e0bffc15 	stw	r2,-16(fp)
8112f67c:	e0bffc17 	ldw	r2,-16(fp)
8112f680:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112f684:	e0bfff17 	ldw	r2,-4(fp)
8112f688:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
8112f68c:	0005883a 	mov	r2,zero
}
8112f690:	e037883a 	mov	sp,fp
8112f694:	df000017 	ldw	fp,0(sp)
8112f698:	dec00104 	addi	sp,sp,4
8112f69c:	f800283a 	ret

8112f6a0 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
8112f6a0:	defff604 	addi	sp,sp,-40
8112f6a4:	de00012e 	bgeu	sp,et,8112f6ac <OSMutexCreate+0xc>
8112f6a8:	003b68fa 	trap	3
8112f6ac:	dfc00915 	stw	ra,36(sp)
8112f6b0:	df000815 	stw	fp,32(sp)
8112f6b4:	df000804 	addi	fp,sp,32
8112f6b8:	2005883a 	mov	r2,r4
8112f6bc:	e17fff15 	stw	r5,-4(fp)
8112f6c0:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112f6c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112f6c8:	e0bfff17 	ldw	r2,-4(fp)
8112f6cc:	1000021e 	bne	r2,zero,8112f6d8 <OSMutexCreate+0x38>
        return ((OS_EVENT *)0);
8112f6d0:	0005883a 	mov	r2,zero
8112f6d4:	00006106 	br	8112f85c <OSMutexCreate+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
8112f6d8:	e0bffe03 	ldbu	r2,-8(fp)
8112f6dc:	10800a30 	cmpltui	r2,r2,40
8112f6e0:	1000051e 	bne	r2,zero,8112f6f8 <OSMutexCreate+0x58>
        *perr = OS_ERR_PRIO_INVALID;
8112f6e4:	e0bfff17 	ldw	r2,-4(fp)
8112f6e8:	00c00a84 	movi	r3,42
8112f6ec:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112f6f0:	0005883a 	mov	r2,zero
8112f6f4:	00005906 	br	8112f85c <OSMutexCreate+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112f6f8:	d0a08b03 	ldbu	r2,-32212(gp)
8112f6fc:	10803fcc 	andi	r2,r2,255
8112f700:	10000526 	beq	r2,zero,8112f718 <OSMutexCreate+0x78>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
8112f704:	e0bfff17 	ldw	r2,-4(fp)
8112f708:	00c00404 	movi	r3,16
8112f70c:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112f710:	0005883a 	mov	r2,zero
8112f714:	00005106 	br	8112f85c <OSMutexCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f718:	0005303a 	rdctl	r2,status
8112f71c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f720:	e0fffd17 	ldw	r3,-12(fp)
8112f724:	00bfff84 	movi	r2,-2
8112f728:	1884703a 	and	r2,r3,r2
8112f72c:	1001703a 	wrctl	status,r2
  
  return context;
8112f730:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112f734:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
8112f738:	e0fffe03 	ldbu	r3,-8(fp)
8112f73c:	00a045b4 	movhi	r2,33046
8112f740:	10a05004 	addi	r2,r2,-32448
8112f744:	18c7883a 	add	r3,r3,r3
8112f748:	18c7883a 	add	r3,r3,r3
8112f74c:	10c5883a 	add	r2,r2,r3
8112f750:	10800017 	ldw	r2,0(r2)
8112f754:	10000926 	beq	r2,zero,8112f77c <OSMutexCreate+0xdc>
8112f758:	e0bff817 	ldw	r2,-32(fp)
8112f75c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f760:	e0bff917 	ldw	r2,-28(fp)
8112f764:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
8112f768:	e0bfff17 	ldw	r2,-4(fp)
8112f76c:	00c00a04 	movi	r3,40
8112f770:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112f774:	0005883a 	mov	r2,zero
8112f778:	00003806 	br	8112f85c <OSMutexCreate+0x1bc>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
8112f77c:	e0fffe03 	ldbu	r3,-8(fp)
8112f780:	00a045b4 	movhi	r2,33046
8112f784:	10a05004 	addi	r2,r2,-32448
8112f788:	18c7883a 	add	r3,r3,r3
8112f78c:	18c7883a 	add	r3,r3,r3
8112f790:	10c5883a 	add	r2,r2,r3
8112f794:	00c00044 	movi	r3,1
8112f798:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
8112f79c:	d0a08a17 	ldw	r2,-32216(gp)
8112f7a0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
8112f7a4:	e0bffb17 	ldw	r2,-20(fp)
8112f7a8:	1000101e 	bne	r2,zero,8112f7ec <OSMutexCreate+0x14c>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
8112f7ac:	e0fffe03 	ldbu	r3,-8(fp)
8112f7b0:	00a045b4 	movhi	r2,33046
8112f7b4:	10a05004 	addi	r2,r2,-32448
8112f7b8:	18c7883a 	add	r3,r3,r3
8112f7bc:	18c7883a 	add	r3,r3,r3
8112f7c0:	10c5883a 	add	r2,r2,r3
8112f7c4:	10000015 	stw	zero,0(r2)
8112f7c8:	e0bff817 	ldw	r2,-32(fp)
8112f7cc:	e0bffa15 	stw	r2,-24(fp)
8112f7d0:	e0bffa17 	ldw	r2,-24(fp)
8112f7d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
8112f7d8:	e0bfff17 	ldw	r2,-4(fp)
8112f7dc:	00c00104 	movi	r3,4
8112f7e0:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112f7e4:	e0bffb17 	ldw	r2,-20(fp)
8112f7e8:	00001c06 	br	8112f85c <OSMutexCreate+0x1bc>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
8112f7ec:	d0a08a17 	ldw	r2,-32216(gp)
8112f7f0:	10800117 	ldw	r2,4(r2)
8112f7f4:	d0a08a15 	stw	r2,-32216(gp)
8112f7f8:	e0bff817 	ldw	r2,-32(fp)
8112f7fc:	e0bffc15 	stw	r2,-16(fp)
8112f800:	e0bffc17 	ldw	r2,-16(fp)
8112f804:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
8112f808:	e0bffb17 	ldw	r2,-20(fp)
8112f80c:	00c00104 	movi	r3,4
8112f810:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
8112f814:	e0bffe03 	ldbu	r2,-8(fp)
8112f818:	1004923a 	slli	r2,r2,8
8112f81c:	10803fd4 	ori	r2,r2,255
8112f820:	1007883a 	mov	r3,r2
8112f824:	e0bffb17 	ldw	r2,-20(fp)
8112f828:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
8112f82c:	e0bffb17 	ldw	r2,-20(fp)
8112f830:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
8112f834:	e0bffb17 	ldw	r2,-20(fp)
8112f838:	00c00fc4 	movi	r3,63
8112f83c:	10c00445 	stb	r3,17(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
8112f840:	e0bffb17 	ldw	r2,-20(fp)
8112f844:	10000485 	stb	zero,18(r2)
#endif
    OS_EventWaitListInit(pevent);
8112f848:	e13ffb17 	ldw	r4,-20(fp)
8112f84c:	112c7ec0 	call	8112c7ec <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
8112f850:	e0bfff17 	ldw	r2,-4(fp)
8112f854:	10000005 	stb	zero,0(r2)
    return (pevent);
8112f858:	e0bffb17 	ldw	r2,-20(fp)
}
8112f85c:	e037883a 	mov	sp,fp
8112f860:	dfc00117 	ldw	ra,4(sp)
8112f864:	df000017 	ldw	fp,0(sp)
8112f868:	dec00204 	addi	sp,sp,8
8112f86c:	f800283a 	ret

8112f870 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112f870:	defff004 	addi	sp,sp,-64
8112f874:	de00012e 	bgeu	sp,et,8112f87c <OSMutexDel+0xc>
8112f878:	003b68fa 	trap	3
8112f87c:	dfc00f15 	stw	ra,60(sp)
8112f880:	df000e15 	stw	fp,56(sp)
8112f884:	df000e04 	addi	fp,sp,56
8112f888:	e13ffd15 	stw	r4,-12(fp)
8112f88c:	2805883a 	mov	r2,r5
8112f890:	e1bfff15 	stw	r6,-4(fp)
8112f894:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112f898:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112f89c:	e0bfff17 	ldw	r2,-4(fp)
8112f8a0:	1000021e 	bne	r2,zero,8112f8ac <OSMutexDel+0x3c>
        return (pevent);
8112f8a4:	e0bffd17 	ldw	r2,-12(fp)
8112f8a8:	0000ad06 	br	8112fb60 <OSMutexDel+0x2f0>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112f8ac:	e0bffd17 	ldw	r2,-12(fp)
8112f8b0:	1000051e 	bne	r2,zero,8112f8c8 <OSMutexDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112f8b4:	e0bfff17 	ldw	r2,-4(fp)
8112f8b8:	00c00104 	movi	r3,4
8112f8bc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112f8c0:	e0bffd17 	ldw	r2,-12(fp)
8112f8c4:	0000a606 	br	8112fb60 <OSMutexDel+0x2f0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112f8c8:	e0bffd17 	ldw	r2,-12(fp)
8112f8cc:	10800003 	ldbu	r2,0(r2)
8112f8d0:	10803fcc 	andi	r2,r2,255
8112f8d4:	10800120 	cmpeqi	r2,r2,4
8112f8d8:	1000051e 	bne	r2,zero,8112f8f0 <OSMutexDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112f8dc:	e0bfff17 	ldw	r2,-4(fp)
8112f8e0:	00c00044 	movi	r3,1
8112f8e4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112f8e8:	e0bffd17 	ldw	r2,-12(fp)
8112f8ec:	00009c06 	br	8112fb60 <OSMutexDel+0x2f0>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112f8f0:	d0a08b03 	ldbu	r2,-32212(gp)
8112f8f4:	10803fcc 	andi	r2,r2,255
8112f8f8:	10000526 	beq	r2,zero,8112f910 <OSMutexDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112f8fc:	e0bfff17 	ldw	r2,-4(fp)
8112f900:	00c003c4 	movi	r3,15
8112f904:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112f908:	e0bffd17 	ldw	r2,-12(fp)
8112f90c:	00009406 	br	8112fb60 <OSMutexDel+0x2f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f910:	0005303a 	rdctl	r2,status
8112f914:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f918:	e0fffc17 	ldw	r3,-16(fp)
8112f91c:	00bfff84 	movi	r2,-2
8112f920:	1884703a 	and	r2,r3,r2
8112f924:	1001703a 	wrctl	status,r2
  
  return context;
8112f928:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f92c:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
8112f930:	e0bffd17 	ldw	r2,-12(fp)
8112f934:	10800283 	ldbu	r2,10(r2)
8112f938:	10803fcc 	andi	r2,r2,255
8112f93c:	10000326 	beq	r2,zero,8112f94c <OSMutexDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112f940:	00800044 	movi	r2,1
8112f944:	e0bff205 	stb	r2,-56(fp)
8112f948:	00000106 	br	8112f950 <OSMutexDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112f94c:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
8112f950:	e0bffe03 	ldbu	r2,-8(fp)
8112f954:	10000326 	beq	r2,zero,8112f964 <OSMutexDel+0xf4>
8112f958:	10800060 	cmpeqi	r2,r2,1
8112f95c:	10002f1e 	bne	r2,zero,8112fa1c <OSMutexDel+0x1ac>
8112f960:	00007406 	br	8112fb34 <OSMutexDel+0x2c4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
8112f964:	e0bff203 	ldbu	r2,-56(fp)
8112f968:	1000221e 	bne	r2,zero,8112f9f4 <OSMutexDel+0x184>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112f96c:	e0bffd17 	ldw	r2,-12(fp)
8112f970:	00c00fc4 	movi	r3,63
8112f974:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112f978:	e0bffd17 	ldw	r2,-12(fp)
8112f97c:	10000485 	stb	zero,18(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112f980:	e0bffd17 	ldw	r2,-12(fp)
8112f984:	1080020b 	ldhu	r2,8(r2)
8112f988:	10bfffcc 	andi	r2,r2,65535
8112f98c:	1004d23a 	srli	r2,r2,8
8112f990:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
8112f994:	e0fff603 	ldbu	r3,-40(fp)
8112f998:	00a045b4 	movhi	r2,33046
8112f99c:	10a05004 	addi	r2,r2,-32448
8112f9a0:	18c7883a 	add	r3,r3,r3
8112f9a4:	18c7883a 	add	r3,r3,r3
8112f9a8:	10c5883a 	add	r2,r2,r3
8112f9ac:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112f9b0:	e0bffd17 	ldw	r2,-12(fp)
8112f9b4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
8112f9b8:	d0e08a17 	ldw	r3,-32216(gp)
8112f9bc:	e0bffd17 	ldw	r2,-12(fp)
8112f9c0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
8112f9c4:	e0bffd17 	ldw	r2,-12(fp)
8112f9c8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
8112f9cc:	e0bffd17 	ldw	r2,-12(fp)
8112f9d0:	d0a08a15 	stw	r2,-32216(gp)
8112f9d4:	e0bff417 	ldw	r2,-48(fp)
8112f9d8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f9dc:	e0bff517 	ldw	r2,-44(fp)
8112f9e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
8112f9e4:	e0bfff17 	ldw	r2,-4(fp)
8112f9e8:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
8112f9ec:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
8112f9f0:	00005a06 	br	8112fb5c <OSMutexDel+0x2ec>
8112f9f4:	e0bff417 	ldw	r2,-48(fp)
8112f9f8:	e0bff715 	stw	r2,-36(fp)
8112f9fc:	e0bff717 	ldw	r2,-36(fp)
8112fa00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
8112fa04:	e0bfff17 	ldw	r2,-4(fp)
8112fa08:	00c01244 	movi	r3,73
8112fa0c:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
8112fa10:	e0bffd17 	ldw	r2,-12(fp)
8112fa14:	e0bff315 	stw	r2,-52(fp)
             }
             break;
8112fa18:	00005006 	br	8112fb5c <OSMutexDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
8112fa1c:	e0bffd17 	ldw	r2,-12(fp)
8112fa20:	1080020b 	ldhu	r2,8(r2)
8112fa24:	10bfffcc 	andi	r2,r2,65535
8112fa28:	1004d23a 	srli	r2,r2,8
8112fa2c:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
8112fa30:	e0bffd17 	ldw	r2,-12(fp)
8112fa34:	1080020b 	ldhu	r2,8(r2)
8112fa38:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
8112fa3c:	e0bffd17 	ldw	r2,-12(fp)
8112fa40:	10800117 	ldw	r2,4(r2)
8112fa44:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
8112fa48:	e0bffa17 	ldw	r2,-24(fp)
8112fa4c:	10000f26 	beq	r2,zero,8112fa8c <OSMutexDel+0x21c>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
8112fa50:	e0bffa17 	ldw	r2,-24(fp)
8112fa54:	10800c83 	ldbu	r2,50(r2)
8112fa58:	10c03fcc 	andi	r3,r2,255
8112fa5c:	e0bff603 	ldbu	r2,-40(fp)
8112fa60:	18800a1e 	bne	r3,r2,8112fa8c <OSMutexDel+0x21c>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
8112fa64:	e0bff903 	ldbu	r2,-28(fp)
8112fa68:	100b883a 	mov	r5,r2
8112fa6c:	e13ffa17 	ldw	r4,-24(fp)
8112fa70:	11304ac0 	call	811304ac <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112fa74:	00000506 	br	8112fa8c <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112fa78:	000f883a 	mov	r7,zero
8112fa7c:	01800404 	movi	r6,16
8112fa80:	000b883a 	mov	r5,zero
8112fa84:	e13ffd17 	ldw	r4,-12(fp)
8112fa88:	112c2140 	call	8112c214 <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112fa8c:	e0bffd17 	ldw	r2,-12(fp)
8112fa90:	10800283 	ldbu	r2,10(r2)
8112fa94:	10803fcc 	andi	r2,r2,255
8112fa98:	103ff71e 	bne	r2,zero,8112fa78 <__reset+0xfb10fa78>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112fa9c:	e0bffd17 	ldw	r2,-12(fp)
8112faa0:	00c00fc4 	movi	r3,63
8112faa4:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112faa8:	e0bffd17 	ldw	r2,-12(fp)
8112faac:	10000485 	stb	zero,18(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112fab0:	e0bffd17 	ldw	r2,-12(fp)
8112fab4:	1080020b 	ldhu	r2,8(r2)
8112fab8:	10bfffcc 	andi	r2,r2,65535
8112fabc:	1004d23a 	srli	r2,r2,8
8112fac0:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
8112fac4:	e0fff603 	ldbu	r3,-40(fp)
8112fac8:	00a045b4 	movhi	r2,33046
8112facc:	10a05004 	addi	r2,r2,-32448
8112fad0:	18c7883a 	add	r3,r3,r3
8112fad4:	18c7883a 	add	r3,r3,r3
8112fad8:	10c5883a 	add	r2,r2,r3
8112fadc:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112fae0:	e0bffd17 	ldw	r2,-12(fp)
8112fae4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
8112fae8:	d0e08a17 	ldw	r3,-32216(gp)
8112faec:	e0bffd17 	ldw	r2,-12(fp)
8112faf0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
8112faf4:	e0bffd17 	ldw	r2,-12(fp)
8112faf8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
8112fafc:	e0bffd17 	ldw	r2,-12(fp)
8112fb00:	d0a08a15 	stw	r2,-32216(gp)
8112fb04:	e0bff417 	ldw	r2,-48(fp)
8112fb08:	e0bff815 	stw	r2,-32(fp)
8112fb0c:	e0bff817 	ldw	r2,-32(fp)
8112fb10:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112fb14:	e0bff203 	ldbu	r2,-56(fp)
8112fb18:	10800058 	cmpnei	r2,r2,1
8112fb1c:	1000011e 	bne	r2,zero,8112fb24 <OSMutexDel+0x2b4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112fb20:	112ccd00 	call	8112ccd0 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
8112fb24:	e0bfff17 	ldw	r2,-4(fp)
8112fb28:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
8112fb2c:	e03ff315 	stw	zero,-52(fp)
             break;
8112fb30:	00000a06 	br	8112fb5c <OSMutexDel+0x2ec>
8112fb34:	e0bff417 	ldw	r2,-48(fp)
8112fb38:	e0bffb15 	stw	r2,-20(fp)
8112fb3c:	e0bffb17 	ldw	r2,-20(fp)
8112fb40:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
8112fb44:	e0bfff17 	ldw	r2,-4(fp)
8112fb48:	00c001c4 	movi	r3,7
8112fb4c:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
8112fb50:	e0bffd17 	ldw	r2,-12(fp)
8112fb54:	e0bff315 	stw	r2,-52(fp)
             break;
8112fb58:	0001883a 	nop
    }
    return (pevent_return);
8112fb5c:	e0bff317 	ldw	r2,-52(fp)
}
8112fb60:	e037883a 	mov	sp,fp
8112fb64:	dfc00117 	ldw	ra,4(sp)
8112fb68:	df000017 	ldw	fp,0(sp)
8112fb6c:	dec00204 	addi	sp,sp,8
8112fb70:	f800283a 	ret

8112fb74 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112fb74:	deffee04 	addi	sp,sp,-72
8112fb78:	de00012e 	bgeu	sp,et,8112fb80 <OSMutexPend+0xc>
8112fb7c:	003b68fa 	trap	3
8112fb80:	dfc01115 	stw	ra,68(sp)
8112fb84:	df001015 	stw	fp,64(sp)
8112fb88:	df001004 	addi	fp,sp,64
8112fb8c:	e13ffd15 	stw	r4,-12(fp)
8112fb90:	2805883a 	mov	r2,r5
8112fb94:	e1bfff15 	stw	r6,-4(fp)
8112fb98:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112fb9c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112fba0:	e0bfff17 	ldw	r2,-4(fp)
8112fba4:	10015626 	beq	r2,zero,81130100 <OSMutexPend+0x58c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112fba8:	e0bffd17 	ldw	r2,-12(fp)
8112fbac:	1000041e 	bne	r2,zero,8112fbc0 <OSMutexPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112fbb0:	e0bfff17 	ldw	r2,-4(fp)
8112fbb4:	00c00104 	movi	r3,4
8112fbb8:	10c00005 	stb	r3,0(r2)
        return;
8112fbbc:	00015106 	br	81130104 <OSMutexPend+0x590>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112fbc0:	e0bffd17 	ldw	r2,-12(fp)
8112fbc4:	10800003 	ldbu	r2,0(r2)
8112fbc8:	10803fcc 	andi	r2,r2,255
8112fbcc:	10800120 	cmpeqi	r2,r2,4
8112fbd0:	1000041e 	bne	r2,zero,8112fbe4 <OSMutexPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112fbd4:	e0bfff17 	ldw	r2,-4(fp)
8112fbd8:	00c00044 	movi	r3,1
8112fbdc:	10c00005 	stb	r3,0(r2)
        return;
8112fbe0:	00014806 	br	81130104 <OSMutexPend+0x590>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112fbe4:	d0a08b03 	ldbu	r2,-32212(gp)
8112fbe8:	10803fcc 	andi	r2,r2,255
8112fbec:	10000426 	beq	r2,zero,8112fc00 <OSMutexPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112fbf0:	e0bfff17 	ldw	r2,-4(fp)
8112fbf4:	00c00084 	movi	r3,2
8112fbf8:	10c00005 	stb	r3,0(r2)
        return;
8112fbfc:	00014106 	br	81130104 <OSMutexPend+0x590>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112fc00:	d0a07903 	ldbu	r2,-32284(gp)
8112fc04:	10803fcc 	andi	r2,r2,255
8112fc08:	10000426 	beq	r2,zero,8112fc1c <OSMutexPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112fc0c:	e0bfff17 	ldw	r2,-4(fp)
8112fc10:	00c00344 	movi	r3,13
8112fc14:	10c00005 	stb	r3,0(r2)
        return;
8112fc18:	00013a06 	br	81130104 <OSMutexPend+0x590>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fc1c:	0005303a 	rdctl	r2,status
8112fc20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fc24:	e0fffc17 	ldw	r3,-16(fp)
8112fc28:	00bfff84 	movi	r2,-2
8112fc2c:	1884703a 	and	r2,r3,r2
8112fc30:	1001703a 	wrctl	status,r2
  
  return context;
8112fc34:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112fc38:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
8112fc3c:	e0bffd17 	ldw	r2,-12(fp)
8112fc40:	1080020b 	ldhu	r2,8(r2)
8112fc44:	10bfffcc 	andi	r2,r2,65535
8112fc48:	1004d23a 	srli	r2,r2,8
8112fc4c:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112fc50:	e0bffd17 	ldw	r2,-12(fp)
8112fc54:	1080020b 	ldhu	r2,8(r2)
8112fc58:	10803fcc 	andi	r2,r2,255
8112fc5c:	10803fd8 	cmpnei	r2,r2,255
8112fc60:	1000271e 	bne	r2,zero,8112fd00 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
8112fc64:	e0bffd17 	ldw	r2,-12(fp)
8112fc68:	10c0020b 	ldhu	r3,8(r2)
8112fc6c:	00bfc004 	movi	r2,-256
8112fc70:	1884703a 	and	r2,r3,r2
8112fc74:	1007883a 	mov	r3,r2
8112fc78:	e0bffd17 	ldw	r2,-12(fp)
8112fc7c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
8112fc80:	e0bffd17 	ldw	r2,-12(fp)
8112fc84:	10c0020b 	ldhu	r3,8(r2)
8112fc88:	d0a08c17 	ldw	r2,-32208(gp)
8112fc8c:	10800c83 	ldbu	r2,50(r2)
8112fc90:	10803fcc 	andi	r2,r2,255
8112fc94:	1884b03a 	or	r2,r3,r2
8112fc98:	1007883a 	mov	r3,r2
8112fc9c:	e0bffd17 	ldw	r2,-12(fp)
8112fca0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
8112fca4:	d0e08c17 	ldw	r3,-32208(gp)
8112fca8:	e0bffd17 	ldw	r2,-12(fp)
8112fcac:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
8112fcb0:	d0a08c17 	ldw	r2,-32208(gp)
8112fcb4:	10800c83 	ldbu	r2,50(r2)
8112fcb8:	10803fcc 	andi	r2,r2,255
8112fcbc:	e0fff303 	ldbu	r3,-52(fp)
8112fcc0:	18800836 	bltu	r3,r2,8112fce4 <OSMutexPend+0x170>
8112fcc4:	e0bff117 	ldw	r2,-60(fp)
8112fcc8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fccc:	e0bff217 	ldw	r2,-56(fp)
8112fcd0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
8112fcd4:	e0bfff17 	ldw	r2,-4(fp)
8112fcd8:	00c01e04 	movi	r3,120
8112fcdc:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
8112fce0:	00010806 	br	81130104 <OSMutexPend+0x590>
8112fce4:	e0bff117 	ldw	r2,-60(fp)
8112fce8:	e0bff415 	stw	r2,-48(fp)
8112fcec:	e0bff417 	ldw	r2,-48(fp)
8112fcf0:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112fcf4:	e0bfff17 	ldw	r2,-4(fp)
8112fcf8:	10000005 	stb	zero,0(r2)
        }
        return;
8112fcfc:	00010106 	br	81130104 <OSMutexPend+0x590>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
8112fd00:	e0bffd17 	ldw	r2,-12(fp)
8112fd04:	1080020b 	ldhu	r2,8(r2)
8112fd08:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
8112fd0c:	e0bffd17 	ldw	r2,-12(fp)
8112fd10:	10800117 	ldw	r2,4(r2)
8112fd14:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
8112fd18:	e0bff717 	ldw	r2,-36(fp)
8112fd1c:	10800c83 	ldbu	r2,50(r2)
8112fd20:	10803fcc 	andi	r2,r2,255
8112fd24:	e0fff303 	ldbu	r3,-52(fp)
8112fd28:	1880b92e 	bgeu	r3,r2,81130010 <OSMutexPend+0x49c>
        if (mprio > OSTCBCur->OSTCBPrio) {
8112fd2c:	d0a08c17 	ldw	r2,-32208(gp)
8112fd30:	10800c83 	ldbu	r2,50(r2)
8112fd34:	10c03fcc 	andi	r3,r2,255
8112fd38:	e0bff603 	ldbu	r2,-40(fp)
8112fd3c:	1880b42e 	bgeu	r3,r2,81130010 <OSMutexPend+0x49c>
            y = ptcb->OSTCBY;
8112fd40:	e0bff717 	ldw	r2,-36(fp)
8112fd44:	10800d03 	ldbu	r2,52(r2)
8112fd48:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
8112fd4c:	e0fff803 	ldbu	r3,-32(fp)
8112fd50:	d0a08844 	addi	r2,gp,-32223
8112fd54:	1885883a 	add	r2,r3,r2
8112fd58:	10c00003 	ldbu	r3,0(r2)
8112fd5c:	e0bff717 	ldw	r2,-36(fp)
8112fd60:	10800d43 	ldbu	r2,53(r2)
8112fd64:	1884703a 	and	r2,r3,r2
8112fd68:	10803fcc 	andi	r2,r2,255
8112fd6c:	10001e26 	beq	r2,zero,8112fde8 <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
8112fd70:	e0fff803 	ldbu	r3,-32(fp)
8112fd74:	e13ff803 	ldbu	r4,-32(fp)
8112fd78:	d0a08844 	addi	r2,gp,-32223
8112fd7c:	2085883a 	add	r2,r4,r2
8112fd80:	10800003 	ldbu	r2,0(r2)
8112fd84:	1009883a 	mov	r4,r2
8112fd88:	e0bff717 	ldw	r2,-36(fp)
8112fd8c:	10800d43 	ldbu	r2,53(r2)
8112fd90:	0084303a 	nor	r2,zero,r2
8112fd94:	2084703a 	and	r2,r4,r2
8112fd98:	1009883a 	mov	r4,r2
8112fd9c:	d0a08844 	addi	r2,gp,-32223
8112fda0:	1885883a 	add	r2,r3,r2
8112fda4:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
8112fda8:	e0fff803 	ldbu	r3,-32(fp)
8112fdac:	d0a08844 	addi	r2,gp,-32223
8112fdb0:	1885883a 	add	r2,r3,r2
8112fdb4:	10800003 	ldbu	r2,0(r2)
8112fdb8:	10803fcc 	andi	r2,r2,255
8112fdbc:	1000071e 	bne	r2,zero,8112fddc <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
8112fdc0:	e0bff717 	ldw	r2,-36(fp)
8112fdc4:	10800d83 	ldbu	r2,54(r2)
8112fdc8:	0084303a 	nor	r2,zero,r2
8112fdcc:	1007883a 	mov	r3,r2
8112fdd0:	d0a08803 	ldbu	r2,-32224(gp)
8112fdd4:	1884703a 	and	r2,r3,r2
8112fdd8:	d0a08805 	stb	r2,-32224(gp)
                }
                rdy = OS_TRUE;
8112fddc:	00800044 	movi	r2,1
8112fde0:	e0bff005 	stb	r2,-64(fp)
8112fde4:	00002a06 	br	8112fe90 <OSMutexPend+0x31c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112fde8:	e0bff717 	ldw	r2,-36(fp)
8112fdec:	10800717 	ldw	r2,28(r2)
8112fdf0:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
8112fdf4:	e0bff917 	ldw	r2,-28(fp)
8112fdf8:	10002426 	beq	r2,zero,8112fe8c <OSMutexPend+0x318>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
8112fdfc:	e0bff717 	ldw	r2,-36(fp)
8112fe00:	10800d03 	ldbu	r2,52(r2)
8112fe04:	10803fcc 	andi	r2,r2,255
8112fe08:	e0fff717 	ldw	r3,-36(fp)
8112fe0c:	18c00d03 	ldbu	r3,52(r3)
8112fe10:	18c03fcc 	andi	r3,r3,255
8112fe14:	e13ff917 	ldw	r4,-28(fp)
8112fe18:	20c7883a 	add	r3,r4,r3
8112fe1c:	18c002c4 	addi	r3,r3,11
8112fe20:	18c00003 	ldbu	r3,0(r3)
8112fe24:	1809883a 	mov	r4,r3
8112fe28:	e0fff717 	ldw	r3,-36(fp)
8112fe2c:	18c00d43 	ldbu	r3,53(r3)
8112fe30:	00c6303a 	nor	r3,zero,r3
8112fe34:	20c6703a 	and	r3,r4,r3
8112fe38:	1809883a 	mov	r4,r3
8112fe3c:	e0fff917 	ldw	r3,-28(fp)
8112fe40:	1887883a 	add	r3,r3,r2
8112fe44:	18c002c4 	addi	r3,r3,11
8112fe48:	19000005 	stb	r4,0(r3)
8112fe4c:	e0fff917 	ldw	r3,-28(fp)
8112fe50:	1885883a 	add	r2,r3,r2
8112fe54:	108002c4 	addi	r2,r2,11
8112fe58:	10800003 	ldbu	r2,0(r2)
8112fe5c:	10803fcc 	andi	r2,r2,255
8112fe60:	10000a1e 	bne	r2,zero,8112fe8c <OSMutexPend+0x318>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
8112fe64:	e0bff917 	ldw	r2,-28(fp)
8112fe68:	10800283 	ldbu	r2,10(r2)
8112fe6c:	1007883a 	mov	r3,r2
8112fe70:	e0bff717 	ldw	r2,-36(fp)
8112fe74:	10800d83 	ldbu	r2,54(r2)
8112fe78:	0084303a 	nor	r2,zero,r2
8112fe7c:	1884703a 	and	r2,r3,r2
8112fe80:	1007883a 	mov	r3,r2
8112fe84:	e0bff917 	ldw	r2,-28(fp)
8112fe88:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
8112fe8c:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
8112fe90:	e0bff717 	ldw	r2,-36(fp)
8112fe94:	e0fff303 	ldbu	r3,-52(fp)
8112fe98:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
8112fe9c:	e0bff717 	ldw	r2,-36(fp)
8112fea0:	10800c83 	ldbu	r2,50(r2)
8112fea4:	10803fcc 	andi	r2,r2,255
8112fea8:	1004d0fa 	srli	r2,r2,3
8112feac:	1007883a 	mov	r3,r2
8112feb0:	e0bff717 	ldw	r2,-36(fp)
8112feb4:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
8112feb8:	e0bff717 	ldw	r2,-36(fp)
8112febc:	10800c83 	ldbu	r2,50(r2)
8112fec0:	108001cc 	andi	r2,r2,7
8112fec4:	1007883a 	mov	r3,r2
8112fec8:	e0bff717 	ldw	r2,-36(fp)
8112fecc:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
8112fed0:	e0bff717 	ldw	r2,-36(fp)
8112fed4:	10800d03 	ldbu	r2,52(r2)
8112fed8:	10803fcc 	andi	r2,r2,255
8112fedc:	00c00044 	movi	r3,1
8112fee0:	1884983a 	sll	r2,r3,r2
8112fee4:	1007883a 	mov	r3,r2
8112fee8:	e0bff717 	ldw	r2,-36(fp)
8112feec:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
8112fef0:	e0bff717 	ldw	r2,-36(fp)
8112fef4:	10800cc3 	ldbu	r2,51(r2)
8112fef8:	10803fcc 	andi	r2,r2,255
8112fefc:	00c00044 	movi	r3,1
8112ff00:	1884983a 	sll	r2,r3,r2
8112ff04:	1007883a 	mov	r3,r2
8112ff08:	e0bff717 	ldw	r2,-36(fp)
8112ff0c:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
8112ff10:	e0bff003 	ldbu	r2,-64(fp)
8112ff14:	10800058 	cmpnei	r2,r2,1
8112ff18:	1000161e 	bne	r2,zero,8112ff74 <OSMutexPend+0x400>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
8112ff1c:	e0bff717 	ldw	r2,-36(fp)
8112ff20:	10c00d83 	ldbu	r3,54(r2)
8112ff24:	d0a08803 	ldbu	r2,-32224(gp)
8112ff28:	1884b03a 	or	r2,r3,r2
8112ff2c:	d0a08805 	stb	r2,-32224(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112ff30:	e0bff717 	ldw	r2,-36(fp)
8112ff34:	10800d03 	ldbu	r2,52(r2)
8112ff38:	10c03fcc 	andi	r3,r2,255
8112ff3c:	e0bff717 	ldw	r2,-36(fp)
8112ff40:	10800d03 	ldbu	r2,52(r2)
8112ff44:	11003fcc 	andi	r4,r2,255
8112ff48:	d0a08844 	addi	r2,gp,-32223
8112ff4c:	2085883a 	add	r2,r4,r2
8112ff50:	11000003 	ldbu	r4,0(r2)
8112ff54:	e0bff717 	ldw	r2,-36(fp)
8112ff58:	10800d43 	ldbu	r2,53(r2)
8112ff5c:	2084b03a 	or	r2,r4,r2
8112ff60:	1009883a 	mov	r4,r2
8112ff64:	d0a08844 	addi	r2,gp,-32223
8112ff68:	1885883a 	add	r2,r3,r2
8112ff6c:	11000005 	stb	r4,0(r2)
8112ff70:	00001f06 	br	8112fff0 <OSMutexPend+0x47c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112ff74:	e0bff717 	ldw	r2,-36(fp)
8112ff78:	10800717 	ldw	r2,28(r2)
8112ff7c:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
8112ff80:	e0bff917 	ldw	r2,-28(fp)
8112ff84:	10001a26 	beq	r2,zero,8112fff0 <OSMutexPend+0x47c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
8112ff88:	e0bff917 	ldw	r2,-28(fp)
8112ff8c:	10c00283 	ldbu	r3,10(r2)
8112ff90:	e0bff717 	ldw	r2,-36(fp)
8112ff94:	10800d83 	ldbu	r2,54(r2)
8112ff98:	1884b03a 	or	r2,r3,r2
8112ff9c:	1007883a 	mov	r3,r2
8112ffa0:	e0bff917 	ldw	r2,-28(fp)
8112ffa4:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112ffa8:	e0bff717 	ldw	r2,-36(fp)
8112ffac:	10800d03 	ldbu	r2,52(r2)
8112ffb0:	10803fcc 	andi	r2,r2,255
8112ffb4:	e0fff717 	ldw	r3,-36(fp)
8112ffb8:	18c00d03 	ldbu	r3,52(r3)
8112ffbc:	18c03fcc 	andi	r3,r3,255
8112ffc0:	e13ff917 	ldw	r4,-28(fp)
8112ffc4:	20c7883a 	add	r3,r4,r3
8112ffc8:	18c002c4 	addi	r3,r3,11
8112ffcc:	19000003 	ldbu	r4,0(r3)
8112ffd0:	e0fff717 	ldw	r3,-36(fp)
8112ffd4:	18c00d43 	ldbu	r3,53(r3)
8112ffd8:	20c6b03a 	or	r3,r4,r3
8112ffdc:	1809883a 	mov	r4,r3
8112ffe0:	e0fff917 	ldw	r3,-28(fp)
8112ffe4:	1885883a 	add	r2,r3,r2
8112ffe8:	108002c4 	addi	r2,r2,11
8112ffec:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
8112fff0:	e0fff303 	ldbu	r3,-52(fp)
8112fff4:	00a045b4 	movhi	r2,33046
8112fff8:	10a05004 	addi	r2,r2,-32448
8112fffc:	18c7883a 	add	r3,r3,r3
81130000:	18c7883a 	add	r3,r3,r3
81130004:	10c5883a 	add	r2,r2,r3
81130008:	e0fff717 	ldw	r3,-36(fp)
8113000c:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
81130010:	d0a08c17 	ldw	r2,-32208(gp)
81130014:	d0e08c17 	ldw	r3,-32208(gp)
81130018:	18c00c03 	ldbu	r3,48(r3)
8113001c:	18c00414 	ori	r3,r3,16
81130020:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81130024:	d0a08c17 	ldw	r2,-32208(gp)
81130028:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
8113002c:	d0a08c17 	ldw	r2,-32208(gp)
81130030:	e0fffe0b 	ldhu	r3,-8(fp)
81130034:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
81130038:	e13ffd17 	ldw	r4,-12(fp)
8113003c:	112c3b40 	call	8112c3b4 <OS_EventTaskWait>
81130040:	e0bff117 	ldw	r2,-60(fp)
81130044:	e0bffb15 	stw	r2,-20(fp)
81130048:	e0bffb17 	ldw	r2,-20(fp)
8113004c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
81130050:	112ccd00 	call	8112ccd0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130054:	0005303a 	rdctl	r2,status
81130058:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113005c:	e0fff517 	ldw	r3,-44(fp)
81130060:	00bfff84 	movi	r2,-2
81130064:	1884703a 	and	r2,r3,r2
81130068:	1001703a 	wrctl	status,r2
  
  return context;
8113006c:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
81130070:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81130074:	d0a08c17 	ldw	r2,-32208(gp)
81130078:	10800c43 	ldbu	r2,49(r2)
8113007c:	10803fcc 	andi	r2,r2,255
81130080:	10000326 	beq	r2,zero,81130090 <OSMutexPend+0x51c>
81130084:	108000a0 	cmpeqi	r2,r2,2
81130088:	1000041e 	bne	r2,zero,8113009c <OSMutexPend+0x528>
8113008c:	00000706 	br	811300ac <OSMutexPend+0x538>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81130090:	e0bfff17 	ldw	r2,-4(fp)
81130094:	10000005 	stb	zero,0(r2)
             break;
81130098:	00000c06 	br	811300cc <OSMutexPend+0x558>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
8113009c:	e0bfff17 	ldw	r2,-4(fp)
811300a0:	00c00384 	movi	r3,14
811300a4:	10c00005 	stb	r3,0(r2)
             break;
811300a8:	00000806 	br	811300cc <OSMutexPend+0x558>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
811300ac:	d0a08c17 	ldw	r2,-32208(gp)
811300b0:	e17ffd17 	ldw	r5,-12(fp)
811300b4:	1009883a 	mov	r4,r2
811300b8:	112c6240 	call	8112c624 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
811300bc:	e0bfff17 	ldw	r2,-4(fp)
811300c0:	00c00284 	movi	r3,10
811300c4:	10c00005 	stb	r3,0(r2)
             break;
811300c8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
811300cc:	d0a08c17 	ldw	r2,-32208(gp)
811300d0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
811300d4:	d0a08c17 	ldw	r2,-32208(gp)
811300d8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
811300dc:	d0a08c17 	ldw	r2,-32208(gp)
811300e0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
811300e4:	d0a08c17 	ldw	r2,-32208(gp)
811300e8:	10000815 	stw	zero,32(r2)
811300ec:	e0bff117 	ldw	r2,-60(fp)
811300f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811300f4:	e0bffa17 	ldw	r2,-24(fp)
811300f8:	1001703a 	wrctl	status,r2
811300fc:	00000106 	br	81130104 <OSMutexPend+0x590>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
81130100:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
81130104:	e037883a 	mov	sp,fp
81130108:	dfc00117 	ldw	ra,4(sp)
8113010c:	df000017 	ldw	fp,0(sp)
81130110:	dec00204 	addi	sp,sp,8
81130114:	f800283a 	ret

81130118 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
81130118:	defff604 	addi	sp,sp,-40
8113011c:	de00012e 	bgeu	sp,et,81130124 <OSMutexPost+0xc>
81130120:	003b68fa 	trap	3
81130124:	dfc00915 	stw	ra,36(sp)
81130128:	df000815 	stw	fp,32(sp)
8113012c:	df000804 	addi	fp,sp,32
81130130:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130134:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
81130138:	d0a08b03 	ldbu	r2,-32212(gp)
8113013c:	10803fcc 	andi	r2,r2,255
81130140:	10000226 	beq	r2,zero,8113014c <OSMutexPost+0x34>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
81130144:	00800144 	movi	r2,5
81130148:	00007606 	br	81130324 <OSMutexPost+0x20c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8113014c:	e0bfff17 	ldw	r2,-4(fp)
81130150:	1000021e 	bne	r2,zero,8113015c <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
81130154:	00800104 	movi	r2,4
81130158:	00007206 	br	81130324 <OSMutexPost+0x20c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
8113015c:	e0bfff17 	ldw	r2,-4(fp)
81130160:	10800003 	ldbu	r2,0(r2)
81130164:	10803fcc 	andi	r2,r2,255
81130168:	10800120 	cmpeqi	r2,r2,4
8113016c:	1000021e 	bne	r2,zero,81130178 <OSMutexPost+0x60>
        return (OS_ERR_EVENT_TYPE);
81130170:	00800044 	movi	r2,1
81130174:	00006b06 	br	81130324 <OSMutexPost+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130178:	0005303a 	rdctl	r2,status
8113017c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130180:	e0fffe17 	ldw	r3,-8(fp)
81130184:	00bfff84 	movi	r2,-2
81130188:	1884703a 	and	r2,r3,r2
8113018c:	1001703a 	wrctl	status,r2
  
  return context;
81130190:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81130194:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
81130198:	e0bfff17 	ldw	r2,-4(fp)
8113019c:	1080020b 	ldhu	r2,8(r2)
811301a0:	10bfffcc 	andi	r2,r2,65535
811301a4:	1004d23a 	srli	r2,r2,8
811301a8:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
811301ac:	e0bfff17 	ldw	r2,-4(fp)
811301b0:	1080020b 	ldhu	r2,8(r2)
811301b4:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
811301b8:	e0bfff17 	ldw	r2,-4(fp)
811301bc:	10c00117 	ldw	r3,4(r2)
811301c0:	d0a08c17 	ldw	r2,-32208(gp)
811301c4:	18800626 	beq	r3,r2,811301e0 <OSMutexPost+0xc8>
811301c8:	e0bff817 	ldw	r2,-32(fp)
811301cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811301d0:	e0bff917 	ldw	r2,-28(fp)
811301d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
811301d8:	00801904 	movi	r2,100
811301dc:	00005106 	br	81130324 <OSMutexPost+0x20c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
811301e0:	d0a08c17 	ldw	r2,-32208(gp)
811301e4:	10800c83 	ldbu	r2,50(r2)
811301e8:	10c03fcc 	andi	r3,r2,255
811301ec:	e0bffa03 	ldbu	r2,-24(fp)
811301f0:	1880051e 	bne	r3,r2,81130208 <OSMutexPost+0xf0>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
811301f4:	d0a08c17 	ldw	r2,-32208(gp)
811301f8:	e0fffa43 	ldbu	r3,-23(fp)
811301fc:	180b883a 	mov	r5,r3
81130200:	1009883a 	mov	r4,r2
81130204:	11304ac0 	call	811304ac <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
81130208:	e0fffa03 	ldbu	r3,-24(fp)
8113020c:	00a045b4 	movhi	r2,33046
81130210:	10a05004 	addi	r2,r2,-32448
81130214:	18c7883a 	add	r3,r3,r3
81130218:	18c7883a 	add	r3,r3,r3
8113021c:	10c5883a 	add	r2,r2,r3
81130220:	00c00044 	movi	r3,1
81130224:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
81130228:	e0bfff17 	ldw	r2,-4(fp)
8113022c:	10800283 	ldbu	r2,10(r2)
81130230:	10803fcc 	andi	r2,r2,255
81130234:	10002e26 	beq	r2,zero,811302f0 <OSMutexPost+0x1d8>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
81130238:	000f883a 	mov	r7,zero
8113023c:	01800404 	movi	r6,16
81130240:	000b883a 	mov	r5,zero
81130244:	e13fff17 	ldw	r4,-4(fp)
81130248:	112c2140 	call	8112c214 <OS_EventTaskRdy>
8113024c:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
81130250:	e0bfff17 	ldw	r2,-4(fp)
81130254:	10c0020b 	ldhu	r3,8(r2)
81130258:	00bfc004 	movi	r2,-256
8113025c:	1884703a 	and	r2,r3,r2
81130260:	1007883a 	mov	r3,r2
81130264:	e0bfff17 	ldw	r2,-4(fp)
81130268:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
8113026c:	e0bfff17 	ldw	r2,-4(fp)
81130270:	10c0020b 	ldhu	r3,8(r2)
81130274:	e0bffa43 	ldbu	r2,-23(fp)
81130278:	1884b03a 	or	r2,r3,r2
8113027c:	1007883a 	mov	r3,r2
81130280:	e0bfff17 	ldw	r2,-4(fp)
81130284:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
81130288:	e0fffa43 	ldbu	r3,-23(fp)
8113028c:	00a045b4 	movhi	r2,33046
81130290:	10a05004 	addi	r2,r2,-32448
81130294:	18c7883a 	add	r3,r3,r3
81130298:	18c7883a 	add	r3,r3,r3
8113029c:	10c5883a 	add	r2,r2,r3
811302a0:	10c00017 	ldw	r3,0(r2)
811302a4:	e0bfff17 	ldw	r2,-4(fp)
811302a8:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
811302ac:	e0bffa43 	ldbu	r2,-23(fp)
811302b0:	e0fffa03 	ldbu	r3,-24(fp)
811302b4:	18800736 	bltu	r3,r2,811302d4 <OSMutexPost+0x1bc>
811302b8:	e0bff817 	ldw	r2,-32(fp)
811302bc:	e0bffb15 	stw	r2,-20(fp)
811302c0:	e0bffb17 	ldw	r2,-20(fp)
811302c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
811302c8:	112ccd00 	call	8112ccd0 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
811302cc:	00801e04 	movi	r2,120
811302d0:	00001406 	br	81130324 <OSMutexPost+0x20c>
811302d4:	e0bff817 	ldw	r2,-32(fp)
811302d8:	e0bffc15 	stw	r2,-16(fp)
811302dc:	e0bffc17 	ldw	r2,-16(fp)
811302e0:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
811302e4:	112ccd00 	call	8112ccd0 <OS_Sched>
            return (OS_ERR_NONE);
811302e8:	0005883a 	mov	r2,zero
811302ec:	00000d06 	br	81130324 <OSMutexPost+0x20c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
811302f0:	e0bfff17 	ldw	r2,-4(fp)
811302f4:	1080020b 	ldhu	r2,8(r2)
811302f8:	10803fd4 	ori	r2,r2,255
811302fc:	1007883a 	mov	r3,r2
81130300:	e0bfff17 	ldw	r2,-4(fp)
81130304:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
81130308:	e0bfff17 	ldw	r2,-4(fp)
8113030c:	10000115 	stw	zero,4(r2)
81130310:	e0bff817 	ldw	r2,-32(fp)
81130314:	e0bffd15 	stw	r2,-12(fp)
81130318:	e0bffd17 	ldw	r2,-12(fp)
8113031c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130320:	0005883a 	mov	r2,zero
}
81130324:	e037883a 	mov	sp,fp
81130328:	dfc00117 	ldw	ra,4(sp)
8113032c:	df000017 	ldw	fp,0(sp)
81130330:	dec00204 	addi	sp,sp,8
81130334:	f800283a 	ret

81130338 <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
81130338:	defff704 	addi	sp,sp,-36
8113033c:	de00012e 	bgeu	sp,et,81130344 <OSMutexQuery+0xc>
81130340:	003b68fa 	trap	3
81130344:	df000815 	stw	fp,32(sp)
81130348:	df000804 	addi	fp,sp,32
8113034c:	e13ffe15 	stw	r4,-8(fp)
81130350:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130354:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81130358:	d0a08b03 	ldbu	r2,-32212(gp)
8113035c:	10803fcc 	andi	r2,r2,255
81130360:	10000226 	beq	r2,zero,8113036c <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
81130364:	00800184 	movi	r2,6
81130368:	00004c06 	br	8113049c <OSMutexQuery+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8113036c:	e0bffe17 	ldw	r2,-8(fp)
81130370:	1000021e 	bne	r2,zero,8113037c <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
81130374:	00800104 	movi	r2,4
81130378:	00004806 	br	8113049c <OSMutexQuery+0x164>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
8113037c:	e0bfff17 	ldw	r2,-4(fp)
81130380:	1000021e 	bne	r2,zero,8113038c <OSMutexQuery+0x54>
        return (OS_ERR_PDATA_NULL);
81130384:	00800244 	movi	r2,9
81130388:	00004406 	br	8113049c <OSMutexQuery+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8113038c:	e0bffe17 	ldw	r2,-8(fp)
81130390:	10800003 	ldbu	r2,0(r2)
81130394:	10803fcc 	andi	r2,r2,255
81130398:	10800120 	cmpeqi	r2,r2,4
8113039c:	1000021e 	bne	r2,zero,811303a8 <OSMutexQuery+0x70>
        return (OS_ERR_EVENT_TYPE);
811303a0:	00800044 	movi	r2,1
811303a4:	00003d06 	br	8113049c <OSMutexQuery+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811303a8:	0005303a 	rdctl	r2,status
811303ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811303b0:	e0fffd17 	ldw	r3,-12(fp)
811303b4:	00bfff84 	movi	r2,-2
811303b8:	1884703a 	and	r2,r3,r2
811303bc:	1001703a 	wrctl	status,r2
  
  return context;
811303c0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811303c4:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
811303c8:	e0bffe17 	ldw	r2,-8(fp)
811303cc:	1080020b 	ldhu	r2,8(r2)
811303d0:	10bfffcc 	andi	r2,r2,65535
811303d4:	1004d23a 	srli	r2,r2,8
811303d8:	1007883a 	mov	r3,r2
811303dc:	e0bfff17 	ldw	r2,-4(fp)
811303e0:	10c00245 	stb	r3,9(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
811303e4:	e0bffe17 	ldw	r2,-8(fp)
811303e8:	1080020b 	ldhu	r2,8(r2)
811303ec:	1007883a 	mov	r3,r2
811303f0:	e0bfff17 	ldw	r2,-4(fp)
811303f4:	10c00205 	stb	r3,8(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
811303f8:	e0bfff17 	ldw	r2,-4(fp)
811303fc:	10800203 	ldbu	r2,8(r2)
81130400:	10803fcc 	andi	r2,r2,255
81130404:	10803fd8 	cmpnei	r2,r2,255
81130408:	1000041e 	bne	r2,zero,8113041c <OSMutexQuery+0xe4>
        p_mutex_data->OSValue = OS_TRUE;
8113040c:	e0bfff17 	ldw	r2,-4(fp)
81130410:	00c00044 	movi	r3,1
81130414:	10c001c5 	stb	r3,7(r2)
81130418:	00000206 	br	81130424 <OSMutexQuery+0xec>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
8113041c:	e0bfff17 	ldw	r2,-4(fp)
81130420:	100001c5 	stb	zero,7(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
81130424:	e0bffe17 	ldw	r2,-8(fp)
81130428:	10c00283 	ldbu	r3,10(r2)
8113042c:	e0bfff17 	ldw	r2,-4(fp)
81130430:	10c00185 	stb	r3,6(r2)
    psrc                      = &pevent->OSEventTbl[0];
81130434:	e0bffe17 	ldw	r2,-8(fp)
81130438:	108002c4 	addi	r2,r2,11
8113043c:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
81130440:	e0bfff17 	ldw	r2,-4(fp)
81130444:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81130448:	e03ff805 	stb	zero,-32(fp)
8113044c:	00000b06 	br	8113047c <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
81130450:	e0bffa17 	ldw	r2,-24(fp)
81130454:	10c00044 	addi	r3,r2,1
81130458:	e0fffa15 	stw	r3,-24(fp)
8113045c:	e0fff917 	ldw	r3,-28(fp)
81130460:	19000044 	addi	r4,r3,1
81130464:	e13ff915 	stw	r4,-28(fp)
81130468:	18c00003 	ldbu	r3,0(r3)
8113046c:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81130470:	e0bff803 	ldbu	r2,-32(fp)
81130474:	10800044 	addi	r2,r2,1
81130478:	e0bff805 	stb	r2,-32(fp)
8113047c:	e0bff803 	ldbu	r2,-32(fp)
81130480:	108001b0 	cmpltui	r2,r2,6
81130484:	103ff21e 	bne	r2,zero,81130450 <__reset+0xfb110450>
81130488:	e0bffb17 	ldw	r2,-20(fp)
8113048c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130490:	e0bffc17 	ldw	r2,-16(fp)
81130494:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130498:	0005883a 	mov	r2,zero
}
8113049c:	e037883a 	mov	sp,fp
811304a0:	df000017 	ldw	fp,0(sp)
811304a4:	dec00104 	addi	sp,sp,4
811304a8:	f800283a 	ret

811304ac <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
811304ac:	defffc04 	addi	sp,sp,-16
811304b0:	de00012e 	bgeu	sp,et,811304b8 <OSMutex_RdyAtPrio+0xc>
811304b4:	003b68fa 	trap	3
811304b8:	df000315 	stw	fp,12(sp)
811304bc:	df000304 	addi	fp,sp,12
811304c0:	e13ffe15 	stw	r4,-8(fp)
811304c4:	2805883a 	mov	r2,r5
811304c8:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
811304cc:	e0bffe17 	ldw	r2,-8(fp)
811304d0:	10800d03 	ldbu	r2,52(r2)
811304d4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
811304d8:	e0fffd03 	ldbu	r3,-12(fp)
811304dc:	e13ffd03 	ldbu	r4,-12(fp)
811304e0:	d0a08844 	addi	r2,gp,-32223
811304e4:	2085883a 	add	r2,r4,r2
811304e8:	10800003 	ldbu	r2,0(r2)
811304ec:	1009883a 	mov	r4,r2
811304f0:	e0bffe17 	ldw	r2,-8(fp)
811304f4:	10800d43 	ldbu	r2,53(r2)
811304f8:	0084303a 	nor	r2,zero,r2
811304fc:	2084703a 	and	r2,r4,r2
81130500:	1009883a 	mov	r4,r2
81130504:	d0a08844 	addi	r2,gp,-32223
81130508:	1885883a 	add	r2,r3,r2
8113050c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81130510:	e0fffd03 	ldbu	r3,-12(fp)
81130514:	d0a08844 	addi	r2,gp,-32223
81130518:	1885883a 	add	r2,r3,r2
8113051c:	10800003 	ldbu	r2,0(r2)
81130520:	10803fcc 	andi	r2,r2,255
81130524:	1000071e 	bne	r2,zero,81130544 <OSMutex_RdyAtPrio+0x98>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
81130528:	e0bffe17 	ldw	r2,-8(fp)
8113052c:	10800d83 	ldbu	r2,54(r2)
81130530:	0084303a 	nor	r2,zero,r2
81130534:	1007883a 	mov	r3,r2
81130538:	d0a08803 	ldbu	r2,-32224(gp)
8113053c:	1884703a 	and	r2,r3,r2
81130540:	d0a08805 	stb	r2,-32224(gp)
    }
    ptcb->OSTCBPrio         = prio;
81130544:	e0bffe17 	ldw	r2,-8(fp)
81130548:	e0ffff03 	ldbu	r3,-4(fp)
8113054c:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
81130550:	e0bfff03 	ldbu	r2,-4(fp)
81130554:	1004d0fa 	srli	r2,r2,3
81130558:	108001cc 	andi	r2,r2,7
8113055c:	1007883a 	mov	r3,r2
81130560:	e0bffe17 	ldw	r2,-8(fp)
81130564:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
81130568:	e0bfff03 	ldbu	r2,-4(fp)
8113056c:	108001cc 	andi	r2,r2,7
81130570:	1007883a 	mov	r3,r2
81130574:	e0bffe17 	ldw	r2,-8(fp)
81130578:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
8113057c:	e0bffe17 	ldw	r2,-8(fp)
81130580:	10800d03 	ldbu	r2,52(r2)
81130584:	10803fcc 	andi	r2,r2,255
81130588:	00c00044 	movi	r3,1
8113058c:	1884983a 	sll	r2,r3,r2
81130590:	1007883a 	mov	r3,r2
81130594:	e0bffe17 	ldw	r2,-8(fp)
81130598:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
8113059c:	e0bffe17 	ldw	r2,-8(fp)
811305a0:	10800cc3 	ldbu	r2,51(r2)
811305a4:	10803fcc 	andi	r2,r2,255
811305a8:	00c00044 	movi	r3,1
811305ac:	1884983a 	sll	r2,r3,r2
811305b0:	1007883a 	mov	r3,r2
811305b4:	e0bffe17 	ldw	r2,-8(fp)
811305b8:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
811305bc:	e0bffe17 	ldw	r2,-8(fp)
811305c0:	10c00d83 	ldbu	r3,54(r2)
811305c4:	d0a08803 	ldbu	r2,-32224(gp)
811305c8:	1884b03a 	or	r2,r3,r2
811305cc:	d0a08805 	stb	r2,-32224(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811305d0:	e0bffe17 	ldw	r2,-8(fp)
811305d4:	10800d03 	ldbu	r2,52(r2)
811305d8:	10c03fcc 	andi	r3,r2,255
811305dc:	e0bffe17 	ldw	r2,-8(fp)
811305e0:	10800d03 	ldbu	r2,52(r2)
811305e4:	11003fcc 	andi	r4,r2,255
811305e8:	d0a08844 	addi	r2,gp,-32223
811305ec:	2085883a 	add	r2,r4,r2
811305f0:	11000003 	ldbu	r4,0(r2)
811305f4:	e0bffe17 	ldw	r2,-8(fp)
811305f8:	10800d43 	ldbu	r2,53(r2)
811305fc:	2084b03a 	or	r2,r4,r2
81130600:	1009883a 	mov	r4,r2
81130604:	d0a08844 	addi	r2,gp,-32223
81130608:	1885883a 	add	r2,r3,r2
8113060c:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
81130610:	e0ffff03 	ldbu	r3,-4(fp)
81130614:	00a045b4 	movhi	r2,33046
81130618:	10a05004 	addi	r2,r2,-32448
8113061c:	18c7883a 	add	r3,r3,r3
81130620:	18c7883a 	add	r3,r3,r3
81130624:	10c5883a 	add	r2,r2,r3
81130628:	e0fffe17 	ldw	r3,-8(fp)
8113062c:	10c00015 	stw	r3,0(r2)
}
81130630:	0001883a 	nop
81130634:	e037883a 	mov	sp,fp
81130638:	df000017 	ldw	fp,0(sp)
8113063c:	dec00104 	addi	sp,sp,4
81130640:	f800283a 	ret

81130644 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
81130644:	defff804 	addi	sp,sp,-32
81130648:	de00012e 	bgeu	sp,et,81130650 <OSQAccept+0xc>
8113064c:	003b68fa 	trap	3
81130650:	df000715 	stw	fp,28(sp)
81130654:	df000704 	addi	fp,sp,28
81130658:	e13ffe15 	stw	r4,-8(fp)
8113065c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130660:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81130664:	e0bfff17 	ldw	r2,-4(fp)
81130668:	1000021e 	bne	r2,zero,81130674 <OSQAccept+0x30>
        return ((void *)0);
8113066c:	0005883a 	mov	r2,zero
81130670:	00004206 	br	8113077c <OSQAccept+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
81130674:	e0bffe17 	ldw	r2,-8(fp)
81130678:	1000051e 	bne	r2,zero,81130690 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8113067c:	e0bfff17 	ldw	r2,-4(fp)
81130680:	00c00104 	movi	r3,4
81130684:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81130688:	0005883a 	mov	r2,zero
8113068c:	00003b06 	br	8113077c <OSQAccept+0x138>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81130690:	e0bffe17 	ldw	r2,-8(fp)
81130694:	10800003 	ldbu	r2,0(r2)
81130698:	10803fcc 	andi	r2,r2,255
8113069c:	108000a0 	cmpeqi	r2,r2,2
811306a0:	1000051e 	bne	r2,zero,811306b8 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
811306a4:	e0bfff17 	ldw	r2,-4(fp)
811306a8:	00c00044 	movi	r3,1
811306ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
811306b0:	0005883a 	mov	r2,zero
811306b4:	00003106 	br	8113077c <OSQAccept+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811306b8:	0005303a 	rdctl	r2,status
811306bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811306c0:	e0fffd17 	ldw	r3,-12(fp)
811306c4:	00bfff84 	movi	r2,-2
811306c8:	1884703a 	and	r2,r3,r2
811306cc:	1001703a 	wrctl	status,r2
  
  return context;
811306d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811306d4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
811306d8:	e0bffe17 	ldw	r2,-8(fp)
811306dc:	10800117 	ldw	r2,4(r2)
811306e0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
811306e4:	e0bffc17 	ldw	r2,-16(fp)
811306e8:	1080058b 	ldhu	r2,22(r2)
811306ec:	10bfffcc 	andi	r2,r2,65535
811306f0:	10001926 	beq	r2,zero,81130758 <OSQAccept+0x114>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
811306f4:	e0bffc17 	ldw	r2,-16(fp)
811306f8:	10800417 	ldw	r2,16(r2)
811306fc:	11000104 	addi	r4,r2,4
81130700:	e0fffc17 	ldw	r3,-16(fp)
81130704:	19000415 	stw	r4,16(r3)
81130708:	10800017 	ldw	r2,0(r2)
8113070c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
81130710:	e0bffc17 	ldw	r2,-16(fp)
81130714:	1080058b 	ldhu	r2,22(r2)
81130718:	10bfffc4 	addi	r2,r2,-1
8113071c:	1007883a 	mov	r3,r2
81130720:	e0bffc17 	ldw	r2,-16(fp)
81130724:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
81130728:	e0bffc17 	ldw	r2,-16(fp)
8113072c:	10c00417 	ldw	r3,16(r2)
81130730:	e0bffc17 	ldw	r2,-16(fp)
81130734:	10800217 	ldw	r2,8(r2)
81130738:	1880041e 	bne	r3,r2,8113074c <OSQAccept+0x108>
            pq->OSQOut = pq->OSQStart;
8113073c:	e0bffc17 	ldw	r2,-16(fp)
81130740:	10c00117 	ldw	r3,4(r2)
81130744:	e0bffc17 	ldw	r2,-16(fp)
81130748:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
8113074c:	e0bfff17 	ldw	r2,-4(fp)
81130750:	10000005 	stb	zero,0(r2)
81130754:	00000406 	br	81130768 <OSQAccept+0x124>
    } else {
        *perr = OS_ERR_Q_EMPTY;
81130758:	e0bfff17 	ldw	r2,-4(fp)
8113075c:	00c007c4 	movi	r3,31
81130760:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
81130764:	e03ff915 	stw	zero,-28(fp)
81130768:	e0bffa17 	ldw	r2,-24(fp)
8113076c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130770:	e0bffb17 	ldw	r2,-20(fp)
81130774:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
81130778:	e0bff917 	ldw	r2,-28(fp)
}
8113077c:	e037883a 	mov	sp,fp
81130780:	df000017 	ldw	fp,0(sp)
81130784:	dec00104 	addi	sp,sp,4
81130788:	f800283a 	ret

8113078c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
8113078c:	defff404 	addi	sp,sp,-48
81130790:	de00012e 	bgeu	sp,et,81130798 <OSQCreate+0xc>
81130794:	003b68fa 	trap	3
81130798:	dfc00b15 	stw	ra,44(sp)
8113079c:	df000a15 	stw	fp,40(sp)
811307a0:	df000a04 	addi	fp,sp,40
811307a4:	e13ffe15 	stw	r4,-8(fp)
811307a8:	2805883a 	mov	r2,r5
811307ac:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811307b0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
811307b4:	d0a08b03 	ldbu	r2,-32212(gp)
811307b8:	10803fcc 	andi	r2,r2,255
811307bc:	10000226 	beq	r2,zero,811307c8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
811307c0:	0005883a 	mov	r2,zero
811307c4:	00005906 	br	8113092c <OSQCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811307c8:	0005303a 	rdctl	r2,status
811307cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811307d0:	e0fffd17 	ldw	r3,-12(fp)
811307d4:	00bfff84 	movi	r2,-2
811307d8:	1884703a 	and	r2,r3,r2
811307dc:	1001703a 	wrctl	status,r2
  
  return context;
811307e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811307e4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
811307e8:	d0a08a17 	ldw	r2,-32216(gp)
811307ec:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
811307f0:	d0a08a17 	ldw	r2,-32216(gp)
811307f4:	10000326 	beq	r2,zero,81130804 <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
811307f8:	d0a08a17 	ldw	r2,-32216(gp)
811307fc:	10800117 	ldw	r2,4(r2)
81130800:	d0a08a15 	stw	r2,-32216(gp)
81130804:	e0bff717 	ldw	r2,-36(fp)
81130808:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113080c:	e0bff817 	ldw	r2,-32(fp)
81130810:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
81130814:	e0bff617 	ldw	r2,-40(fp)
81130818:	10004326 	beq	r2,zero,81130928 <OSQCreate+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113081c:	0005303a 	rdctl	r2,status
81130820:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130824:	e0fff917 	ldw	r3,-28(fp)
81130828:	00bfff84 	movi	r2,-2
8113082c:	1884703a 	and	r2,r3,r2
81130830:	1001703a 	wrctl	status,r2
  
  return context;
81130834:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
81130838:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
8113083c:	d0a08717 	ldw	r2,-32228(gp)
81130840:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
81130844:	e0bffb17 	ldw	r2,-20(fp)
81130848:	10002d26 	beq	r2,zero,81130900 <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
8113084c:	d0a08717 	ldw	r2,-32228(gp)
81130850:	10800017 	ldw	r2,0(r2)
81130854:	d0a08715 	stw	r2,-32228(gp)
81130858:	e0bff717 	ldw	r2,-36(fp)
8113085c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130860:	e0bffa17 	ldw	r2,-24(fp)
81130864:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
81130868:	e0bffb17 	ldw	r2,-20(fp)
8113086c:	e0fffe17 	ldw	r3,-8(fp)
81130870:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
81130874:	e0bfff0b 	ldhu	r2,-4(fp)
81130878:	1085883a 	add	r2,r2,r2
8113087c:	1085883a 	add	r2,r2,r2
81130880:	1007883a 	mov	r3,r2
81130884:	e0bffe17 	ldw	r2,-8(fp)
81130888:	10c7883a 	add	r3,r2,r3
8113088c:	e0bffb17 	ldw	r2,-20(fp)
81130890:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
81130894:	e0bffb17 	ldw	r2,-20(fp)
81130898:	e0fffe17 	ldw	r3,-8(fp)
8113089c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
811308a0:	e0bffb17 	ldw	r2,-20(fp)
811308a4:	e0fffe17 	ldw	r3,-8(fp)
811308a8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
811308ac:	e0bffb17 	ldw	r2,-20(fp)
811308b0:	e0ffff0b 	ldhu	r3,-4(fp)
811308b4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
811308b8:	e0bffb17 	ldw	r2,-20(fp)
811308bc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
811308c0:	e0bff617 	ldw	r2,-40(fp)
811308c4:	00c00084 	movi	r3,2
811308c8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
811308cc:	e0bff617 	ldw	r2,-40(fp)
811308d0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
811308d4:	e0bff617 	ldw	r2,-40(fp)
811308d8:	e0fffb17 	ldw	r3,-20(fp)
811308dc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
811308e0:	e0bff617 	ldw	r2,-40(fp)
811308e4:	00c00fc4 	movi	r3,63
811308e8:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
811308ec:	e0bff617 	ldw	r2,-40(fp)
811308f0:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
811308f4:	e13ff617 	ldw	r4,-40(fp)
811308f8:	112c7ec0 	call	8112c7ec <OS_EventWaitListInit>
811308fc:	00000a06 	br	81130928 <OSQCreate+0x19c>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
81130900:	d0e08a17 	ldw	r3,-32216(gp)
81130904:	e0bff617 	ldw	r2,-40(fp)
81130908:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
8113090c:	e0bff617 	ldw	r2,-40(fp)
81130910:	d0a08a15 	stw	r2,-32216(gp)
81130914:	e0bff717 	ldw	r2,-36(fp)
81130918:	e0bffc15 	stw	r2,-16(fp)
8113091c:	e0bffc17 	ldw	r2,-16(fp)
81130920:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
81130924:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
81130928:	e0bff617 	ldw	r2,-40(fp)
}
8113092c:	e037883a 	mov	sp,fp
81130930:	dfc00117 	ldw	ra,4(sp)
81130934:	df000017 	ldw	fp,0(sp)
81130938:	dec00204 	addi	sp,sp,8
8113093c:	f800283a 	ret

81130940 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81130940:	defff204 	addi	sp,sp,-56
81130944:	de00012e 	bgeu	sp,et,8113094c <OSQDel+0xc>
81130948:	003b68fa 	trap	3
8113094c:	dfc00d15 	stw	ra,52(sp)
81130950:	df000c15 	stw	fp,48(sp)
81130954:	df000c04 	addi	fp,sp,48
81130958:	e13ffd15 	stw	r4,-12(fp)
8113095c:	2805883a 	mov	r2,r5
81130960:	e1bfff15 	stw	r6,-4(fp)
81130964:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81130968:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8113096c:	e0bfff17 	ldw	r2,-4(fp)
81130970:	1000021e 	bne	r2,zero,8113097c <OSQDel+0x3c>
        return (pevent);
81130974:	e0bffd17 	ldw	r2,-12(fp)
81130978:	00008e06 	br	81130bb4 <OSQDel+0x274>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8113097c:	e0bffd17 	ldw	r2,-12(fp)
81130980:	1000051e 	bne	r2,zero,81130998 <OSQDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81130984:	e0bfff17 	ldw	r2,-4(fp)
81130988:	00c00104 	movi	r3,4
8113098c:	10c00005 	stb	r3,0(r2)
        return (pevent);
81130990:	e0bffd17 	ldw	r2,-12(fp)
81130994:	00008706 	br	81130bb4 <OSQDel+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
81130998:	e0bffd17 	ldw	r2,-12(fp)
8113099c:	10800003 	ldbu	r2,0(r2)
811309a0:	10803fcc 	andi	r2,r2,255
811309a4:	108000a0 	cmpeqi	r2,r2,2
811309a8:	1000051e 	bne	r2,zero,811309c0 <OSQDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
811309ac:	e0bfff17 	ldw	r2,-4(fp)
811309b0:	00c00044 	movi	r3,1
811309b4:	10c00005 	stb	r3,0(r2)
        return (pevent);
811309b8:	e0bffd17 	ldw	r2,-12(fp)
811309bc:	00007d06 	br	81130bb4 <OSQDel+0x274>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811309c0:	d0a08b03 	ldbu	r2,-32212(gp)
811309c4:	10803fcc 	andi	r2,r2,255
811309c8:	10000526 	beq	r2,zero,811309e0 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
811309cc:	e0bfff17 	ldw	r2,-4(fp)
811309d0:	00c003c4 	movi	r3,15
811309d4:	10c00005 	stb	r3,0(r2)
        return (pevent);
811309d8:	e0bffd17 	ldw	r2,-12(fp)
811309dc:	00007506 	br	81130bb4 <OSQDel+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811309e0:	0005303a 	rdctl	r2,status
811309e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811309e8:	e0fffc17 	ldw	r3,-16(fp)
811309ec:	00bfff84 	movi	r2,-2
811309f0:	1884703a 	and	r2,r3,r2
811309f4:	1001703a 	wrctl	status,r2
  
  return context;
811309f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811309fc:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
81130a00:	e0bffd17 	ldw	r2,-12(fp)
81130a04:	10800283 	ldbu	r2,10(r2)
81130a08:	10803fcc 	andi	r2,r2,255
81130a0c:	10000326 	beq	r2,zero,81130a1c <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81130a10:	00800044 	movi	r2,1
81130a14:	e0bff405 	stb	r2,-48(fp)
81130a18:	00000106 	br	81130a20 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81130a1c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
81130a20:	e0bffe03 	ldbu	r2,-8(fp)
81130a24:	10000326 	beq	r2,zero,81130a34 <OSQDel+0xf4>
81130a28:	10800060 	cmpeqi	r2,r2,1
81130a2c:	1000301e 	bne	r2,zero,81130af0 <OSQDel+0x1b0>
81130a30:	00005506 	br	81130b88 <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
81130a34:	e0bff403 	ldbu	r2,-48(fp)
81130a38:	10001e1e 	bne	r2,zero,81130ab4 <OSQDel+0x174>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
81130a3c:	e0bffd17 	ldw	r2,-12(fp)
81130a40:	00c00fc4 	movi	r3,63
81130a44:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
81130a48:	e0bffd17 	ldw	r2,-12(fp)
81130a4c:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
81130a50:	e0bffd17 	ldw	r2,-12(fp)
81130a54:	10800117 	ldw	r2,4(r2)
81130a58:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
81130a5c:	d0e08717 	ldw	r3,-32228(gp)
81130a60:	e0bff817 	ldw	r2,-32(fp)
81130a64:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
81130a68:	e0bff817 	ldw	r2,-32(fp)
81130a6c:	d0a08715 	stw	r2,-32228(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81130a70:	e0bffd17 	ldw	r2,-12(fp)
81130a74:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
81130a78:	d0e08a17 	ldw	r3,-32216(gp)
81130a7c:	e0bffd17 	ldw	r2,-12(fp)
81130a80:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
81130a84:	e0bffd17 	ldw	r2,-12(fp)
81130a88:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
81130a8c:	e0bffd17 	ldw	r2,-12(fp)
81130a90:	d0a08a15 	stw	r2,-32216(gp)
81130a94:	e0bff617 	ldw	r2,-40(fp)
81130a98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130a9c:	e0bff717 	ldw	r2,-36(fp)
81130aa0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
81130aa4:	e0bfff17 	ldw	r2,-4(fp)
81130aa8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
81130aac:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
81130ab0:	00003f06 	br	81130bb0 <OSQDel+0x270>
81130ab4:	e0bff617 	ldw	r2,-40(fp)
81130ab8:	e0bff915 	stw	r2,-28(fp)
81130abc:	e0bff917 	ldw	r2,-28(fp)
81130ac0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
81130ac4:	e0bfff17 	ldw	r2,-4(fp)
81130ac8:	00c01244 	movi	r3,73
81130acc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
81130ad0:	e0bffd17 	ldw	r2,-12(fp)
81130ad4:	e0bff515 	stw	r2,-44(fp)
             }
             break;
81130ad8:	00003506 	br	81130bb0 <OSQDel+0x270>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
81130adc:	000f883a 	mov	r7,zero
81130ae0:	01800104 	movi	r6,4
81130ae4:	000b883a 	mov	r5,zero
81130ae8:	e13ffd17 	ldw	r4,-12(fp)
81130aec:	112c2140 	call	8112c214 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
81130af0:	e0bffd17 	ldw	r2,-12(fp)
81130af4:	10800283 	ldbu	r2,10(r2)
81130af8:	10803fcc 	andi	r2,r2,255
81130afc:	103ff71e 	bne	r2,zero,81130adc <__reset+0xfb110adc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81130b00:	e0bffd17 	ldw	r2,-12(fp)
81130b04:	00c00fc4 	movi	r3,63
81130b08:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81130b0c:	e0bffd17 	ldw	r2,-12(fp)
81130b10:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
81130b14:	e0bffd17 	ldw	r2,-12(fp)
81130b18:	10800117 	ldw	r2,4(r2)
81130b1c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
81130b20:	d0e08717 	ldw	r3,-32228(gp)
81130b24:	e0bff817 	ldw	r2,-32(fp)
81130b28:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
81130b2c:	e0bff817 	ldw	r2,-32(fp)
81130b30:	d0a08715 	stw	r2,-32228(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81130b34:	e0bffd17 	ldw	r2,-12(fp)
81130b38:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
81130b3c:	d0e08a17 	ldw	r3,-32216(gp)
81130b40:	e0bffd17 	ldw	r2,-12(fp)
81130b44:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
81130b48:	e0bffd17 	ldw	r2,-12(fp)
81130b4c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
81130b50:	e0bffd17 	ldw	r2,-12(fp)
81130b54:	d0a08a15 	stw	r2,-32216(gp)
81130b58:	e0bff617 	ldw	r2,-40(fp)
81130b5c:	e0bffa15 	stw	r2,-24(fp)
81130b60:	e0bffa17 	ldw	r2,-24(fp)
81130b64:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81130b68:	e0bff403 	ldbu	r2,-48(fp)
81130b6c:	10800058 	cmpnei	r2,r2,1
81130b70:	1000011e 	bne	r2,zero,81130b78 <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81130b74:	112ccd00 	call	8112ccd0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
81130b78:	e0bfff17 	ldw	r2,-4(fp)
81130b7c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
81130b80:	e03ff515 	stw	zero,-44(fp)
             break;
81130b84:	00000a06 	br	81130bb0 <OSQDel+0x270>
81130b88:	e0bff617 	ldw	r2,-40(fp)
81130b8c:	e0bffb15 	stw	r2,-20(fp)
81130b90:	e0bffb17 	ldw	r2,-20(fp)
81130b94:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
81130b98:	e0bfff17 	ldw	r2,-4(fp)
81130b9c:	00c001c4 	movi	r3,7
81130ba0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
81130ba4:	e0bffd17 	ldw	r2,-12(fp)
81130ba8:	e0bff515 	stw	r2,-44(fp)
             break;
81130bac:	0001883a 	nop
    }
    return (pevent_return);
81130bb0:	e0bff517 	ldw	r2,-44(fp)
}
81130bb4:	e037883a 	mov	sp,fp
81130bb8:	dfc00117 	ldw	ra,4(sp)
81130bbc:	df000017 	ldw	fp,0(sp)
81130bc0:	dec00204 	addi	sp,sp,8
81130bc4:	f800283a 	ret

81130bc8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
81130bc8:	defffa04 	addi	sp,sp,-24
81130bcc:	de00012e 	bgeu	sp,et,81130bd4 <OSQFlush+0xc>
81130bd0:	003b68fa 	trap	3
81130bd4:	df000515 	stw	fp,20(sp)
81130bd8:	df000504 	addi	fp,sp,20
81130bdc:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130be0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81130be4:	e0bfff17 	ldw	r2,-4(fp)
81130be8:	1000021e 	bne	r2,zero,81130bf4 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
81130bec:	00800104 	movi	r2,4
81130bf0:	00002106 	br	81130c78 <OSQFlush+0xb0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
81130bf4:	e0bfff17 	ldw	r2,-4(fp)
81130bf8:	10800003 	ldbu	r2,0(r2)
81130bfc:	10803fcc 	andi	r2,r2,255
81130c00:	108000a0 	cmpeqi	r2,r2,2
81130c04:	1000021e 	bne	r2,zero,81130c10 <OSQFlush+0x48>
        return (OS_ERR_EVENT_TYPE);
81130c08:	00800044 	movi	r2,1
81130c0c:	00001a06 	br	81130c78 <OSQFlush+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130c10:	0005303a 	rdctl	r2,status
81130c14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130c18:	e0fffd17 	ldw	r3,-12(fp)
81130c1c:	00bfff84 	movi	r2,-2
81130c20:	1884703a 	and	r2,r3,r2
81130c24:	1001703a 	wrctl	status,r2
  
  return context;
81130c28:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81130c2c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
81130c30:	e0bfff17 	ldw	r2,-4(fp)
81130c34:	10800117 	ldw	r2,4(r2)
81130c38:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
81130c3c:	e0bffc17 	ldw	r2,-16(fp)
81130c40:	10c00117 	ldw	r3,4(r2)
81130c44:	e0bffc17 	ldw	r2,-16(fp)
81130c48:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
81130c4c:	e0bffc17 	ldw	r2,-16(fp)
81130c50:	10c00117 	ldw	r3,4(r2)
81130c54:	e0bffc17 	ldw	r2,-16(fp)
81130c58:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
81130c5c:	e0bffc17 	ldw	r2,-16(fp)
81130c60:	1000058d 	sth	zero,22(r2)
81130c64:	e0bffb17 	ldw	r2,-20(fp)
81130c68:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130c6c:	e0bffe17 	ldw	r2,-8(fp)
81130c70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130c74:	0005883a 	mov	r2,zero
}
81130c78:	e037883a 	mov	sp,fp
81130c7c:	df000017 	ldw	fp,0(sp)
81130c80:	dec00104 	addi	sp,sp,4
81130c84:	f800283a 	ret

81130c88 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81130c88:	defff304 	addi	sp,sp,-52
81130c8c:	de00012e 	bgeu	sp,et,81130c94 <OSQPend+0xc>
81130c90:	003b68fa 	trap	3
81130c94:	dfc00c15 	stw	ra,48(sp)
81130c98:	df000b15 	stw	fp,44(sp)
81130c9c:	df000b04 	addi	fp,sp,44
81130ca0:	e13ffd15 	stw	r4,-12(fp)
81130ca4:	2805883a 	mov	r2,r5
81130ca8:	e1bfff15 	stw	r6,-4(fp)
81130cac:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81130cb0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81130cb4:	e0bfff17 	ldw	r2,-4(fp)
81130cb8:	1000021e 	bne	r2,zero,81130cc4 <OSQPend+0x3c>
        return ((void *)0);
81130cbc:	0005883a 	mov	r2,zero
81130cc0:	00009106 	br	81130f08 <OSQPend+0x280>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
81130cc4:	e0bffd17 	ldw	r2,-12(fp)
81130cc8:	1000051e 	bne	r2,zero,81130ce0 <OSQPend+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81130ccc:	e0bfff17 	ldw	r2,-4(fp)
81130cd0:	00c00104 	movi	r3,4
81130cd4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81130cd8:	0005883a 	mov	r2,zero
81130cdc:	00008a06 	br	81130f08 <OSQPend+0x280>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81130ce0:	e0bffd17 	ldw	r2,-12(fp)
81130ce4:	10800003 	ldbu	r2,0(r2)
81130ce8:	10803fcc 	andi	r2,r2,255
81130cec:	108000a0 	cmpeqi	r2,r2,2
81130cf0:	1000051e 	bne	r2,zero,81130d08 <OSQPend+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81130cf4:	e0bfff17 	ldw	r2,-4(fp)
81130cf8:	00c00044 	movi	r3,1
81130cfc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81130d00:	0005883a 	mov	r2,zero
81130d04:	00008006 	br	81130f08 <OSQPend+0x280>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
81130d08:	d0a08b03 	ldbu	r2,-32212(gp)
81130d0c:	10803fcc 	andi	r2,r2,255
81130d10:	10000526 	beq	r2,zero,81130d28 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
81130d14:	e0bfff17 	ldw	r2,-4(fp)
81130d18:	00c00084 	movi	r3,2
81130d1c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81130d20:	0005883a 	mov	r2,zero
81130d24:	00007806 	br	81130f08 <OSQPend+0x280>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
81130d28:	d0a07903 	ldbu	r2,-32284(gp)
81130d2c:	10803fcc 	andi	r2,r2,255
81130d30:	10000526 	beq	r2,zero,81130d48 <OSQPend+0xc0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
81130d34:	e0bfff17 	ldw	r2,-4(fp)
81130d38:	00c00344 	movi	r3,13
81130d3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81130d40:	0005883a 	mov	r2,zero
81130d44:	00007006 	br	81130f08 <OSQPend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130d48:	0005303a 	rdctl	r2,status
81130d4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130d50:	e0fffc17 	ldw	r3,-16(fp)
81130d54:	00bfff84 	movi	r2,-2
81130d58:	1884703a 	and	r2,r3,r2
81130d5c:	1001703a 	wrctl	status,r2
  
  return context;
81130d60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130d64:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
81130d68:	e0bffd17 	ldw	r2,-12(fp)
81130d6c:	10800117 	ldw	r2,4(r2)
81130d70:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
81130d74:	e0bff817 	ldw	r2,-32(fp)
81130d78:	1080058b 	ldhu	r2,22(r2)
81130d7c:	10bfffcc 	andi	r2,r2,65535
81130d80:	10001e26 	beq	r2,zero,81130dfc <OSQPend+0x174>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
81130d84:	e0bff817 	ldw	r2,-32(fp)
81130d88:	10800417 	ldw	r2,16(r2)
81130d8c:	11000104 	addi	r4,r2,4
81130d90:	e0fff817 	ldw	r3,-32(fp)
81130d94:	19000415 	stw	r4,16(r3)
81130d98:	10800017 	ldw	r2,0(r2)
81130d9c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
81130da0:	e0bff817 	ldw	r2,-32(fp)
81130da4:	1080058b 	ldhu	r2,22(r2)
81130da8:	10bfffc4 	addi	r2,r2,-1
81130dac:	1007883a 	mov	r3,r2
81130db0:	e0bff817 	ldw	r2,-32(fp)
81130db4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
81130db8:	e0bff817 	ldw	r2,-32(fp)
81130dbc:	10c00417 	ldw	r3,16(r2)
81130dc0:	e0bff817 	ldw	r2,-32(fp)
81130dc4:	10800217 	ldw	r2,8(r2)
81130dc8:	1880041e 	bne	r3,r2,81130ddc <OSQPend+0x154>
            pq->OSQOut = pq->OSQStart;
81130dcc:	e0bff817 	ldw	r2,-32(fp)
81130dd0:	10c00117 	ldw	r3,4(r2)
81130dd4:	e0bff817 	ldw	r2,-32(fp)
81130dd8:	10c00415 	stw	r3,16(r2)
81130ddc:	e0bff617 	ldw	r2,-40(fp)
81130de0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130de4:	e0bff717 	ldw	r2,-36(fp)
81130de8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
81130dec:	e0bfff17 	ldw	r2,-4(fp)
81130df0:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
81130df4:	e0bff517 	ldw	r2,-44(fp)
81130df8:	00004306 	br	81130f08 <OSQPend+0x280>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
81130dfc:	d0a08c17 	ldw	r2,-32208(gp)
81130e00:	d0e08c17 	ldw	r3,-32208(gp)
81130e04:	18c00c03 	ldbu	r3,48(r3)
81130e08:	18c00114 	ori	r3,r3,4
81130e0c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81130e10:	d0a08c17 	ldw	r2,-32208(gp)
81130e14:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
81130e18:	d0a08c17 	ldw	r2,-32208(gp)
81130e1c:	e0fffe0b 	ldhu	r3,-8(fp)
81130e20:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
81130e24:	e13ffd17 	ldw	r4,-12(fp)
81130e28:	112c3b40 	call	8112c3b4 <OS_EventTaskWait>
81130e2c:	e0bff617 	ldw	r2,-40(fp)
81130e30:	e0bffb15 	stw	r2,-20(fp)
81130e34:	e0bffb17 	ldw	r2,-20(fp)
81130e38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
81130e3c:	112ccd00 	call	8112ccd0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130e40:	0005303a 	rdctl	r2,status
81130e44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130e48:	e0fff917 	ldw	r3,-28(fp)
81130e4c:	00bfff84 	movi	r2,-2
81130e50:	1884703a 	and	r2,r3,r2
81130e54:	1001703a 	wrctl	status,r2
  
  return context;
81130e58:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
81130e5c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81130e60:	d0a08c17 	ldw	r2,-32208(gp)
81130e64:	10800c43 	ldbu	r2,49(r2)
81130e68:	10803fcc 	andi	r2,r2,255
81130e6c:	10000326 	beq	r2,zero,81130e7c <OSQPend+0x1f4>
81130e70:	108000a0 	cmpeqi	r2,r2,2
81130e74:	1000071e 	bne	r2,zero,81130e94 <OSQPend+0x20c>
81130e78:	00000b06 	br	81130ea8 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
81130e7c:	d0a08c17 	ldw	r2,-32208(gp)
81130e80:	10800917 	ldw	r2,36(r2)
81130e84:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
81130e88:	e0bfff17 	ldw	r2,-4(fp)
81130e8c:	10000005 	stb	zero,0(r2)
             break;
81130e90:	00000e06 	br	81130ecc <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
81130e94:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
81130e98:	e0bfff17 	ldw	r2,-4(fp)
81130e9c:	00c00384 	movi	r3,14
81130ea0:	10c00005 	stb	r3,0(r2)
             break;
81130ea4:	00000906 	br	81130ecc <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
81130ea8:	d0a08c17 	ldw	r2,-32208(gp)
81130eac:	e17ffd17 	ldw	r5,-12(fp)
81130eb0:	1009883a 	mov	r4,r2
81130eb4:	112c6240 	call	8112c624 <OS_EventTaskRemove>
             pmsg = (void *)0;
81130eb8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
81130ebc:	e0bfff17 	ldw	r2,-4(fp)
81130ec0:	00c00284 	movi	r3,10
81130ec4:	10c00005 	stb	r3,0(r2)
             break;
81130ec8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
81130ecc:	d0a08c17 	ldw	r2,-32208(gp)
81130ed0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81130ed4:	d0a08c17 	ldw	r2,-32208(gp)
81130ed8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
81130edc:	d0a08c17 	ldw	r2,-32208(gp)
81130ee0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81130ee4:	d0a08c17 	ldw	r2,-32208(gp)
81130ee8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
81130eec:	d0a08c17 	ldw	r2,-32208(gp)
81130ef0:	10000915 	stw	zero,36(r2)
81130ef4:	e0bff617 	ldw	r2,-40(fp)
81130ef8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130efc:	e0bffa17 	ldw	r2,-24(fp)
81130f00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
81130f04:	e0bff517 	ldw	r2,-44(fp)
}
81130f08:	e037883a 	mov	sp,fp
81130f0c:	dfc00117 	ldw	ra,4(sp)
81130f10:	df000017 	ldw	fp,0(sp)
81130f14:	dec00204 	addi	sp,sp,8
81130f18:	f800283a 	ret

81130f1c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81130f1c:	defff604 	addi	sp,sp,-40
81130f20:	de00012e 	bgeu	sp,et,81130f28 <OSQPendAbort+0xc>
81130f24:	003b68fa 	trap	3
81130f28:	dfc00915 	stw	ra,36(sp)
81130f2c:	df000815 	stw	fp,32(sp)
81130f30:	df000804 	addi	fp,sp,32
81130f34:	e13ffd15 	stw	r4,-12(fp)
81130f38:	2805883a 	mov	r2,r5
81130f3c:	e1bfff15 	stw	r6,-4(fp)
81130f40:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81130f44:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81130f48:	e0bfff17 	ldw	r2,-4(fp)
81130f4c:	1000021e 	bne	r2,zero,81130f58 <OSQPendAbort+0x3c>
        return (0);
81130f50:	0005883a 	mov	r2,zero
81130f54:	00004906 	br	8113107c <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81130f58:	e0bffd17 	ldw	r2,-12(fp)
81130f5c:	1000051e 	bne	r2,zero,81130f74 <OSQPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81130f60:	e0bfff17 	ldw	r2,-4(fp)
81130f64:	00c00104 	movi	r3,4
81130f68:	10c00005 	stb	r3,0(r2)
        return (0);
81130f6c:	0005883a 	mov	r2,zero
81130f70:	00004206 	br	8113107c <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
81130f74:	e0bffd17 	ldw	r2,-12(fp)
81130f78:	10800003 	ldbu	r2,0(r2)
81130f7c:	10803fcc 	andi	r2,r2,255
81130f80:	108000a0 	cmpeqi	r2,r2,2
81130f84:	1000051e 	bne	r2,zero,81130f9c <OSQPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81130f88:	e0bfff17 	ldw	r2,-4(fp)
81130f8c:	00c00044 	movi	r3,1
81130f90:	10c00005 	stb	r3,0(r2)
        return (0);
81130f94:	0005883a 	mov	r2,zero
81130f98:	00003806 	br	8113107c <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130f9c:	0005303a 	rdctl	r2,status
81130fa0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130fa4:	e0fffc17 	ldw	r3,-16(fp)
81130fa8:	00bfff84 	movi	r2,-2
81130fac:	1884703a 	and	r2,r3,r2
81130fb0:	1001703a 	wrctl	status,r2
  
  return context;
81130fb4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130fb8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
81130fbc:	e0bffd17 	ldw	r2,-12(fp)
81130fc0:	10800283 	ldbu	r2,10(r2)
81130fc4:	10803fcc 	andi	r2,r2,255
81130fc8:	10002526 	beq	r2,zero,81131060 <OSQPendAbort+0x144>
        nbr_tasks = 0;
81130fcc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
81130fd0:	e0bffe03 	ldbu	r2,-8(fp)
81130fd4:	10800060 	cmpeqi	r2,r2,1
81130fd8:	10000e26 	beq	r2,zero,81131014 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
81130fdc:	00000806 	br	81131000 <OSQPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
81130fe0:	01c00084 	movi	r7,2
81130fe4:	01800104 	movi	r6,4
81130fe8:	000b883a 	mov	r5,zero
81130fec:	e13ffd17 	ldw	r4,-12(fp)
81130ff0:	112c2140 	call	8112c214 <OS_EventTaskRdy>
                     nbr_tasks++;
81130ff4:	e0bff803 	ldbu	r2,-32(fp)
81130ff8:	10800044 	addi	r2,r2,1
81130ffc:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
81131000:	e0bffd17 	ldw	r2,-12(fp)
81131004:	10800283 	ldbu	r2,10(r2)
81131008:	10803fcc 	andi	r2,r2,255
8113100c:	103ff41e 	bne	r2,zero,81130fe0 <__reset+0xfb110fe0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
81131010:	00000906 	br	81131038 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
81131014:	01c00084 	movi	r7,2
81131018:	01800104 	movi	r6,4
8113101c:	000b883a 	mov	r5,zero
81131020:	e13ffd17 	ldw	r4,-12(fp)
81131024:	112c2140 	call	8112c214 <OS_EventTaskRdy>
                 nbr_tasks++;
81131028:	e0bff803 	ldbu	r2,-32(fp)
8113102c:	10800044 	addi	r2,r2,1
81131030:	e0bff805 	stb	r2,-32(fp)
                 break;
81131034:	0001883a 	nop
81131038:	e0bff917 	ldw	r2,-28(fp)
8113103c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131040:	e0bffa17 	ldw	r2,-24(fp)
81131044:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
81131048:	112ccd00 	call	8112ccd0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8113104c:	e0bfff17 	ldw	r2,-4(fp)
81131050:	00c00384 	movi	r3,14
81131054:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
81131058:	e0bff803 	ldbu	r2,-32(fp)
8113105c:	00000706 	br	8113107c <OSQPendAbort+0x160>
81131060:	e0bff917 	ldw	r2,-28(fp)
81131064:	e0bffb15 	stw	r2,-20(fp)
81131068:	e0bffb17 	ldw	r2,-20(fp)
8113106c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81131070:	e0bfff17 	ldw	r2,-4(fp)
81131074:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
81131078:	0005883a 	mov	r2,zero
}
8113107c:	e037883a 	mov	sp,fp
81131080:	dfc00117 	ldw	ra,4(sp)
81131084:	df000017 	ldw	fp,0(sp)
81131088:	dec00204 	addi	sp,sp,8
8113108c:	f800283a 	ret

81131090 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
81131090:	defff604 	addi	sp,sp,-40
81131094:	de00012e 	bgeu	sp,et,8113109c <OSQPost+0xc>
81131098:	003b68fa 	trap	3
8113109c:	dfc00915 	stw	ra,36(sp)
811310a0:	df000815 	stw	fp,32(sp)
811310a4:	df000804 	addi	fp,sp,32
811310a8:	e13ffe15 	stw	r4,-8(fp)
811310ac:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811310b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
811310b4:	e0bffe17 	ldw	r2,-8(fp)
811310b8:	1000021e 	bne	r2,zero,811310c4 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
811310bc:	00800104 	movi	r2,4
811310c0:	00004a06 	br	811311ec <OSQPost+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
811310c4:	e0bffe17 	ldw	r2,-8(fp)
811310c8:	10800003 	ldbu	r2,0(r2)
811310cc:	10803fcc 	andi	r2,r2,255
811310d0:	108000a0 	cmpeqi	r2,r2,2
811310d4:	1000021e 	bne	r2,zero,811310e0 <OSQPost+0x50>
        return (OS_ERR_EVENT_TYPE);
811310d8:	00800044 	movi	r2,1
811310dc:	00004306 	br	811311ec <OSQPost+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811310e0:	0005303a 	rdctl	r2,status
811310e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811310e8:	e0fffd17 	ldw	r3,-12(fp)
811310ec:	00bfff84 	movi	r2,-2
811310f0:	1884703a 	and	r2,r3,r2
811310f4:	1001703a 	wrctl	status,r2
  
  return context;
811310f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811310fc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
81131100:	e0bffe17 	ldw	r2,-8(fp)
81131104:	10800283 	ldbu	r2,10(r2)
81131108:	10803fcc 	andi	r2,r2,255
8113110c:	10000c26 	beq	r2,zero,81131140 <OSQPost+0xb0>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81131110:	000f883a 	mov	r7,zero
81131114:	01800104 	movi	r6,4
81131118:	e17fff17 	ldw	r5,-4(fp)
8113111c:	e13ffe17 	ldw	r4,-8(fp)
81131120:	112c2140 	call	8112c214 <OS_EventTaskRdy>
81131124:	e0bff817 	ldw	r2,-32(fp)
81131128:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113112c:	e0bff917 	ldw	r2,-28(fp)
81131130:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
81131134:	112ccd00 	call	8112ccd0 <OS_Sched>
        return (OS_ERR_NONE);
81131138:	0005883a 	mov	r2,zero
8113113c:	00002b06 	br	811311ec <OSQPost+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
81131140:	e0bffe17 	ldw	r2,-8(fp)
81131144:	10800117 	ldw	r2,4(r2)
81131148:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
8113114c:	e0bffb17 	ldw	r2,-20(fp)
81131150:	10c0058b 	ldhu	r3,22(r2)
81131154:	e0bffb17 	ldw	r2,-20(fp)
81131158:	1080050b 	ldhu	r2,20(r2)
8113115c:	18ffffcc 	andi	r3,r3,65535
81131160:	10bfffcc 	andi	r2,r2,65535
81131164:	18800636 	bltu	r3,r2,81131180 <OSQPost+0xf0>
81131168:	e0bff817 	ldw	r2,-32(fp)
8113116c:	e0bffa15 	stw	r2,-24(fp)
81131170:	e0bffa17 	ldw	r2,-24(fp)
81131174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
81131178:	00800784 	movi	r2,30
8113117c:	00001b06 	br	811311ec <OSQPost+0x15c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
81131180:	e0bffb17 	ldw	r2,-20(fp)
81131184:	10800317 	ldw	r2,12(r2)
81131188:	11000104 	addi	r4,r2,4
8113118c:	e0fffb17 	ldw	r3,-20(fp)
81131190:	19000315 	stw	r4,12(r3)
81131194:	e0ffff17 	ldw	r3,-4(fp)
81131198:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
8113119c:	e0bffb17 	ldw	r2,-20(fp)
811311a0:	1080058b 	ldhu	r2,22(r2)
811311a4:	10800044 	addi	r2,r2,1
811311a8:	1007883a 	mov	r3,r2
811311ac:	e0bffb17 	ldw	r2,-20(fp)
811311b0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
811311b4:	e0bffb17 	ldw	r2,-20(fp)
811311b8:	10c00317 	ldw	r3,12(r2)
811311bc:	e0bffb17 	ldw	r2,-20(fp)
811311c0:	10800217 	ldw	r2,8(r2)
811311c4:	1880041e 	bne	r3,r2,811311d8 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
811311c8:	e0bffb17 	ldw	r2,-20(fp)
811311cc:	10c00117 	ldw	r3,4(r2)
811311d0:	e0bffb17 	ldw	r2,-20(fp)
811311d4:	10c00315 	stw	r3,12(r2)
811311d8:	e0bff817 	ldw	r2,-32(fp)
811311dc:	e0bffc15 	stw	r2,-16(fp)
811311e0:	e0bffc17 	ldw	r2,-16(fp)
811311e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811311e8:	0005883a 	mov	r2,zero
}
811311ec:	e037883a 	mov	sp,fp
811311f0:	dfc00117 	ldw	ra,4(sp)
811311f4:	df000017 	ldw	fp,0(sp)
811311f8:	dec00204 	addi	sp,sp,8
811311fc:	f800283a 	ret

81131200 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
81131200:	defff604 	addi	sp,sp,-40
81131204:	de00012e 	bgeu	sp,et,8113120c <OSQPostFront+0xc>
81131208:	003b68fa 	trap	3
8113120c:	dfc00915 	stw	ra,36(sp)
81131210:	df000815 	stw	fp,32(sp)
81131214:	df000804 	addi	fp,sp,32
81131218:	e13ffe15 	stw	r4,-8(fp)
8113121c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81131220:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81131224:	e0bffe17 	ldw	r2,-8(fp)
81131228:	1000021e 	bne	r2,zero,81131234 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
8113122c:	00800104 	movi	r2,4
81131230:	00004c06 	br	81131364 <OSQPostFront+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
81131234:	e0bffe17 	ldw	r2,-8(fp)
81131238:	10800003 	ldbu	r2,0(r2)
8113123c:	10803fcc 	andi	r2,r2,255
81131240:	108000a0 	cmpeqi	r2,r2,2
81131244:	1000021e 	bne	r2,zero,81131250 <OSQPostFront+0x50>
        return (OS_ERR_EVENT_TYPE);
81131248:	00800044 	movi	r2,1
8113124c:	00004506 	br	81131364 <OSQPostFront+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131250:	0005303a 	rdctl	r2,status
81131254:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131258:	e0fffd17 	ldw	r3,-12(fp)
8113125c:	00bfff84 	movi	r2,-2
81131260:	1884703a 	and	r2,r3,r2
81131264:	1001703a 	wrctl	status,r2
  
  return context;
81131268:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8113126c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
81131270:	e0bffe17 	ldw	r2,-8(fp)
81131274:	10800283 	ldbu	r2,10(r2)
81131278:	10803fcc 	andi	r2,r2,255
8113127c:	10000c26 	beq	r2,zero,811312b0 <OSQPostFront+0xb0>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81131280:	000f883a 	mov	r7,zero
81131284:	01800104 	movi	r6,4
81131288:	e17fff17 	ldw	r5,-4(fp)
8113128c:	e13ffe17 	ldw	r4,-8(fp)
81131290:	112c2140 	call	8112c214 <OS_EventTaskRdy>
81131294:	e0bff817 	ldw	r2,-32(fp)
81131298:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113129c:	e0bff917 	ldw	r2,-28(fp)
811312a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
811312a4:	112ccd00 	call	8112ccd0 <OS_Sched>
        return (OS_ERR_NONE);
811312a8:	0005883a 	mov	r2,zero
811312ac:	00002d06 	br	81131364 <OSQPostFront+0x164>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
811312b0:	e0bffe17 	ldw	r2,-8(fp)
811312b4:	10800117 	ldw	r2,4(r2)
811312b8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
811312bc:	e0bffb17 	ldw	r2,-20(fp)
811312c0:	10c0058b 	ldhu	r3,22(r2)
811312c4:	e0bffb17 	ldw	r2,-20(fp)
811312c8:	1080050b 	ldhu	r2,20(r2)
811312cc:	18ffffcc 	andi	r3,r3,65535
811312d0:	10bfffcc 	andi	r2,r2,65535
811312d4:	18800636 	bltu	r3,r2,811312f0 <OSQPostFront+0xf0>
811312d8:	e0bff817 	ldw	r2,-32(fp)
811312dc:	e0bffa15 	stw	r2,-24(fp)
811312e0:	e0bffa17 	ldw	r2,-24(fp)
811312e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
811312e8:	00800784 	movi	r2,30
811312ec:	00001d06 	br	81131364 <OSQPostFront+0x164>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
811312f0:	e0bffb17 	ldw	r2,-20(fp)
811312f4:	10c00417 	ldw	r3,16(r2)
811312f8:	e0bffb17 	ldw	r2,-20(fp)
811312fc:	10800117 	ldw	r2,4(r2)
81131300:	1880041e 	bne	r3,r2,81131314 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
81131304:	e0bffb17 	ldw	r2,-20(fp)
81131308:	10c00217 	ldw	r3,8(r2)
8113130c:	e0bffb17 	ldw	r2,-20(fp)
81131310:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
81131314:	e0bffb17 	ldw	r2,-20(fp)
81131318:	10800417 	ldw	r2,16(r2)
8113131c:	10ffff04 	addi	r3,r2,-4
81131320:	e0bffb17 	ldw	r2,-20(fp)
81131324:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
81131328:	e0bffb17 	ldw	r2,-20(fp)
8113132c:	10800417 	ldw	r2,16(r2)
81131330:	e0ffff17 	ldw	r3,-4(fp)
81131334:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
81131338:	e0bffb17 	ldw	r2,-20(fp)
8113133c:	1080058b 	ldhu	r2,22(r2)
81131340:	10800044 	addi	r2,r2,1
81131344:	1007883a 	mov	r3,r2
81131348:	e0bffb17 	ldw	r2,-20(fp)
8113134c:	10c0058d 	sth	r3,22(r2)
81131350:	e0bff817 	ldw	r2,-32(fp)
81131354:	e0bffc15 	stw	r2,-16(fp)
81131358:	e0bffc17 	ldw	r2,-16(fp)
8113135c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81131360:	0005883a 	mov	r2,zero
}
81131364:	e037883a 	mov	sp,fp
81131368:	dfc00117 	ldw	ra,4(sp)
8113136c:	df000017 	ldw	fp,0(sp)
81131370:	dec00204 	addi	sp,sp,8
81131374:	f800283a 	ret

81131378 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
81131378:	defff504 	addi	sp,sp,-44
8113137c:	de00012e 	bgeu	sp,et,81131384 <OSQPostOpt+0xc>
81131380:	003b68fa 	trap	3
81131384:	dfc00a15 	stw	ra,40(sp)
81131388:	df000915 	stw	fp,36(sp)
8113138c:	df000904 	addi	fp,sp,36
81131390:	e13ffd15 	stw	r4,-12(fp)
81131394:	e17ffe15 	stw	r5,-8(fp)
81131398:	3005883a 	mov	r2,r6
8113139c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811313a0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
811313a4:	e0bffd17 	ldw	r2,-12(fp)
811313a8:	1000021e 	bne	r2,zero,811313b4 <OSQPostOpt+0x3c>
        return (OS_ERR_PEVENT_NULL);
811313ac:	00800104 	movi	r2,4
811313b0:	00007106 	br	81131578 <OSQPostOpt+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
811313b4:	e0bffd17 	ldw	r2,-12(fp)
811313b8:	10800003 	ldbu	r2,0(r2)
811313bc:	10803fcc 	andi	r2,r2,255
811313c0:	108000a0 	cmpeqi	r2,r2,2
811313c4:	1000021e 	bne	r2,zero,811313d0 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
811313c8:	00800044 	movi	r2,1
811313cc:	00006a06 	br	81131578 <OSQPostOpt+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811313d0:	0005303a 	rdctl	r2,status
811313d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811313d8:	e0fffc17 	ldw	r3,-16(fp)
811313dc:	00bfff84 	movi	r2,-2
811313e0:	1884703a 	and	r2,r3,r2
811313e4:	1001703a 	wrctl	status,r2
  
  return context;
811313e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811313ec:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
811313f0:	e0bffd17 	ldw	r2,-12(fp)
811313f4:	10800283 	ldbu	r2,10(r2)
811313f8:	10803fcc 	andi	r2,r2,255
811313fc:	10001d26 	beq	r2,zero,81131474 <OSQPostOpt+0xfc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
81131400:	e0bfff03 	ldbu	r2,-4(fp)
81131404:	1080004c 	andi	r2,r2,1
81131408:	10000b26 	beq	r2,zero,81131438 <OSQPostOpt+0xc0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8113140c:	00000506 	br	81131424 <OSQPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81131410:	000f883a 	mov	r7,zero
81131414:	01800104 	movi	r6,4
81131418:	e17ffe17 	ldw	r5,-8(fp)
8113141c:	e13ffd17 	ldw	r4,-12(fp)
81131420:	112c2140 	call	8112c214 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
81131424:	e0bffd17 	ldw	r2,-12(fp)
81131428:	10800283 	ldbu	r2,10(r2)
8113142c:	10803fcc 	andi	r2,r2,255
81131430:	103ff71e 	bne	r2,zero,81131410 <__reset+0xfb111410>
81131434:	00000506 	br	8113144c <OSQPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81131438:	000f883a 	mov	r7,zero
8113143c:	01800104 	movi	r6,4
81131440:	e17ffe17 	ldw	r5,-8(fp)
81131444:	e13ffd17 	ldw	r4,-12(fp)
81131448:	112c2140 	call	8112c214 <OS_EventTaskRdy>
8113144c:	e0bff717 	ldw	r2,-36(fp)
81131450:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131454:	e0bff817 	ldw	r2,-32(fp)
81131458:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
8113145c:	e0bfff03 	ldbu	r2,-4(fp)
81131460:	1080010c 	andi	r2,r2,4
81131464:	1000011e 	bne	r2,zero,8113146c <OSQPostOpt+0xf4>
            OS_Sched();                               /* Find highest priority task ready to run       */
81131468:	112ccd00 	call	8112ccd0 <OS_Sched>
        }
        return (OS_ERR_NONE);
8113146c:	0005883a 	mov	r2,zero
81131470:	00004106 	br	81131578 <OSQPostOpt+0x200>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
81131474:	e0bffd17 	ldw	r2,-12(fp)
81131478:	10800117 	ldw	r2,4(r2)
8113147c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
81131480:	e0bffa17 	ldw	r2,-24(fp)
81131484:	10c0058b 	ldhu	r3,22(r2)
81131488:	e0bffa17 	ldw	r2,-24(fp)
8113148c:	1080050b 	ldhu	r2,20(r2)
81131490:	18ffffcc 	andi	r3,r3,65535
81131494:	10bfffcc 	andi	r2,r2,65535
81131498:	18800636 	bltu	r3,r2,811314b4 <OSQPostOpt+0x13c>
8113149c:	e0bff717 	ldw	r2,-36(fp)
811314a0:	e0bff915 	stw	r2,-28(fp)
811314a4:	e0bff917 	ldw	r2,-28(fp)
811314a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
811314ac:	00800784 	movi	r2,30
811314b0:	00003106 	br	81131578 <OSQPostOpt+0x200>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
811314b4:	e0bfff03 	ldbu	r2,-4(fp)
811314b8:	1080008c 	andi	r2,r2,2
811314bc:	10001326 	beq	r2,zero,8113150c <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
811314c0:	e0bffa17 	ldw	r2,-24(fp)
811314c4:	10c00417 	ldw	r3,16(r2)
811314c8:	e0bffa17 	ldw	r2,-24(fp)
811314cc:	10800117 	ldw	r2,4(r2)
811314d0:	1880041e 	bne	r3,r2,811314e4 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
811314d4:	e0bffa17 	ldw	r2,-24(fp)
811314d8:	10c00217 	ldw	r3,8(r2)
811314dc:	e0bffa17 	ldw	r2,-24(fp)
811314e0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
811314e4:	e0bffa17 	ldw	r2,-24(fp)
811314e8:	10800417 	ldw	r2,16(r2)
811314ec:	10ffff04 	addi	r3,r2,-4
811314f0:	e0bffa17 	ldw	r2,-24(fp)
811314f4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
811314f8:	e0bffa17 	ldw	r2,-24(fp)
811314fc:	10800417 	ldw	r2,16(r2)
81131500:	e0fffe17 	ldw	r3,-8(fp)
81131504:	10c00015 	stw	r3,0(r2)
81131508:	00001006 	br	8113154c <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
8113150c:	e0bffa17 	ldw	r2,-24(fp)
81131510:	10800317 	ldw	r2,12(r2)
81131514:	11000104 	addi	r4,r2,4
81131518:	e0fffa17 	ldw	r3,-24(fp)
8113151c:	19000315 	stw	r4,12(r3)
81131520:	e0fffe17 	ldw	r3,-8(fp)
81131524:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
81131528:	e0bffa17 	ldw	r2,-24(fp)
8113152c:	10c00317 	ldw	r3,12(r2)
81131530:	e0bffa17 	ldw	r2,-24(fp)
81131534:	10800217 	ldw	r2,8(r2)
81131538:	1880041e 	bne	r3,r2,8113154c <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
8113153c:	e0bffa17 	ldw	r2,-24(fp)
81131540:	10c00117 	ldw	r3,4(r2)
81131544:	e0bffa17 	ldw	r2,-24(fp)
81131548:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8113154c:	e0bffa17 	ldw	r2,-24(fp)
81131550:	1080058b 	ldhu	r2,22(r2)
81131554:	10800044 	addi	r2,r2,1
81131558:	1007883a 	mov	r3,r2
8113155c:	e0bffa17 	ldw	r2,-24(fp)
81131560:	10c0058d 	sth	r3,22(r2)
81131564:	e0bff717 	ldw	r2,-36(fp)
81131568:	e0bffb15 	stw	r2,-20(fp)
8113156c:	e0bffb17 	ldw	r2,-20(fp)
81131570:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81131574:	0005883a 	mov	r2,zero
}
81131578:	e037883a 	mov	sp,fp
8113157c:	dfc00117 	ldw	ra,4(sp)
81131580:	df000017 	ldw	fp,0(sp)
81131584:	dec00204 	addi	sp,sp,8
81131588:	f800283a 	ret

8113158c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
8113158c:	defff604 	addi	sp,sp,-40
81131590:	de00012e 	bgeu	sp,et,81131598 <OSQQuery+0xc>
81131594:	003b68fa 	trap	3
81131598:	df000915 	stw	fp,36(sp)
8113159c:	df000904 	addi	fp,sp,36
811315a0:	e13ffe15 	stw	r4,-8(fp)
811315a4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811315a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
811315ac:	e0bffe17 	ldw	r2,-8(fp)
811315b0:	1000021e 	bne	r2,zero,811315bc <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
811315b4:	00800104 	movi	r2,4
811315b8:	00004906 	br	811316e0 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
811315bc:	e0bfff17 	ldw	r2,-4(fp)
811315c0:	1000021e 	bne	r2,zero,811315cc <OSQQuery+0x40>
        return (OS_ERR_PDATA_NULL);
811315c4:	00800244 	movi	r2,9
811315c8:	00004506 	br	811316e0 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
811315cc:	e0bffe17 	ldw	r2,-8(fp)
811315d0:	10800003 	ldbu	r2,0(r2)
811315d4:	10803fcc 	andi	r2,r2,255
811315d8:	108000a0 	cmpeqi	r2,r2,2
811315dc:	1000021e 	bne	r2,zero,811315e8 <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
811315e0:	00800044 	movi	r2,1
811315e4:	00003e06 	br	811316e0 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811315e8:	0005303a 	rdctl	r2,status
811315ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811315f0:	e0fffd17 	ldw	r3,-12(fp)
811315f4:	00bfff84 	movi	r2,-2
811315f8:	1884703a 	and	r2,r3,r2
811315fc:	1001703a 	wrctl	status,r2
  
  return context;
81131600:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81131604:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
81131608:	e0bffe17 	ldw	r2,-8(fp)
8113160c:	10c00283 	ldbu	r3,10(r2)
81131610:	e0bfff17 	ldw	r2,-4(fp)
81131614:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
81131618:	e0bffe17 	ldw	r2,-8(fp)
8113161c:	108002c4 	addi	r2,r2,11
81131620:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
81131624:	e0bfff17 	ldw	r2,-4(fp)
81131628:	10800204 	addi	r2,r2,8
8113162c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81131630:	e03ff705 	stb	zero,-36(fp)
81131634:	00000b06 	br	81131664 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
81131638:	e0bff917 	ldw	r2,-28(fp)
8113163c:	10c00044 	addi	r3,r2,1
81131640:	e0fff915 	stw	r3,-28(fp)
81131644:	e0fff817 	ldw	r3,-32(fp)
81131648:	19000044 	addi	r4,r3,1
8113164c:	e13ff815 	stw	r4,-32(fp)
81131650:	18c00003 	ldbu	r3,0(r3)
81131654:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81131658:	e0bff703 	ldbu	r2,-36(fp)
8113165c:	10800044 	addi	r2,r2,1
81131660:	e0bff705 	stb	r2,-36(fp)
81131664:	e0bff703 	ldbu	r2,-36(fp)
81131668:	108001b0 	cmpltui	r2,r2,6
8113166c:	103ff21e 	bne	r2,zero,81131638 <__reset+0xfb111638>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
81131670:	e0bffe17 	ldw	r2,-8(fp)
81131674:	10800117 	ldw	r2,4(r2)
81131678:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
8113167c:	e0bffc17 	ldw	r2,-16(fp)
81131680:	1080058b 	ldhu	r2,22(r2)
81131684:	10bfffcc 	andi	r2,r2,65535
81131688:	10000626 	beq	r2,zero,811316a4 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
8113168c:	e0bffc17 	ldw	r2,-16(fp)
81131690:	10800417 	ldw	r2,16(r2)
81131694:	10c00017 	ldw	r3,0(r2)
81131698:	e0bfff17 	ldw	r2,-4(fp)
8113169c:	10c00015 	stw	r3,0(r2)
811316a0:	00000206 	br	811316ac <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
811316a4:	e0bfff17 	ldw	r2,-4(fp)
811316a8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
811316ac:	e0bffc17 	ldw	r2,-16(fp)
811316b0:	10c0058b 	ldhu	r3,22(r2)
811316b4:	e0bfff17 	ldw	r2,-4(fp)
811316b8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
811316bc:	e0bffc17 	ldw	r2,-16(fp)
811316c0:	10c0050b 	ldhu	r3,20(r2)
811316c4:	e0bfff17 	ldw	r2,-4(fp)
811316c8:	10c0018d 	sth	r3,6(r2)
811316cc:	e0bffa17 	ldw	r2,-24(fp)
811316d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811316d4:	e0bffb17 	ldw	r2,-20(fp)
811316d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811316dc:	0005883a 	mov	r2,zero
}
811316e0:	e037883a 	mov	sp,fp
811316e4:	df000017 	ldw	fp,0(sp)
811316e8:	dec00104 	addi	sp,sp,4
811316ec:	f800283a 	ret

811316f0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
811316f0:	defffb04 	addi	sp,sp,-20
811316f4:	de00012e 	bgeu	sp,et,811316fc <OS_QInit+0xc>
811316f8:	003b68fa 	trap	3
811316fc:	dfc00415 	stw	ra,16(sp)
81131700:	df000315 	stw	fp,12(sp)
81131704:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
81131708:	01406004 	movi	r5,384
8113170c:	01204574 	movhi	r4,33045
81131710:	21154e04 	addi	r4,r4,21816
81131714:	112cc040 	call	8112cc04 <OS_MemClr>
    pq1 = &OSQTbl[0];
81131718:	00a04574 	movhi	r2,33045
8113171c:	10954e04 	addi	r2,r2,21816
81131720:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
81131724:	00a04574 	movhi	r2,33045
81131728:	10955404 	addi	r2,r2,21840
8113172c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
81131730:	e03ffd0d 	sth	zero,-12(fp)
81131734:	00000c06 	br	81131768 <OS_QInit+0x78>
        pq1->OSQPtr = pq2;
81131738:	e0bffe17 	ldw	r2,-8(fp)
8113173c:	e0ffff17 	ldw	r3,-4(fp)
81131740:	10c00015 	stw	r3,0(r2)
        pq1++;
81131744:	e0bffe17 	ldw	r2,-8(fp)
81131748:	10800604 	addi	r2,r2,24
8113174c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
81131750:	e0bfff17 	ldw	r2,-4(fp)
81131754:	10800604 	addi	r2,r2,24
81131758:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8113175c:	e0bffd0b 	ldhu	r2,-12(fp)
81131760:	10800044 	addi	r2,r2,1
81131764:	e0bffd0d 	sth	r2,-12(fp)
81131768:	e0bffd0b 	ldhu	r2,-12(fp)
8113176c:	108003f0 	cmpltui	r2,r2,15
81131770:	103ff11e 	bne	r2,zero,81131738 <__reset+0xfb111738>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
81131774:	e0bffe17 	ldw	r2,-8(fp)
81131778:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
8113177c:	00a04574 	movhi	r2,33045
81131780:	10954e04 	addi	r2,r2,21816
81131784:	d0a08715 	stw	r2,-32228(gp)
#endif
}
81131788:	0001883a 	nop
8113178c:	e037883a 	mov	sp,fp
81131790:	dfc00117 	ldw	ra,4(sp)
81131794:	df000017 	ldw	fp,0(sp)
81131798:	dec00204 	addi	sp,sp,8
8113179c:	f800283a 	ret

811317a0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
811317a0:	defffa04 	addi	sp,sp,-24
811317a4:	de00012e 	bgeu	sp,et,811317ac <OSSemAccept+0xc>
811317a8:	003b68fa 	trap	3
811317ac:	df000515 	stw	fp,20(sp)
811317b0:	df000504 	addi	fp,sp,20
811317b4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811317b8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
811317bc:	e0bfff17 	ldw	r2,-4(fp)
811317c0:	1000021e 	bne	r2,zero,811317cc <OSSemAccept+0x2c>
        return (0);
811317c4:	0005883a 	mov	r2,zero
811317c8:	00001f06 	br	81131848 <OSSemAccept+0xa8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
811317cc:	e0bfff17 	ldw	r2,-4(fp)
811317d0:	10800003 	ldbu	r2,0(r2)
811317d4:	10803fcc 	andi	r2,r2,255
811317d8:	108000e0 	cmpeqi	r2,r2,3
811317dc:	1000021e 	bne	r2,zero,811317e8 <OSSemAccept+0x48>
        return (0);
811317e0:	0005883a 	mov	r2,zero
811317e4:	00001806 	br	81131848 <OSSemAccept+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811317e8:	0005303a 	rdctl	r2,status
811317ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811317f0:	e0fffe17 	ldw	r3,-8(fp)
811317f4:	00bfff84 	movi	r2,-2
811317f8:	1884703a 	and	r2,r3,r2
811317fc:	1001703a 	wrctl	status,r2
  
  return context;
81131800:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81131804:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
81131808:	e0bfff17 	ldw	r2,-4(fp)
8113180c:	1080020b 	ldhu	r2,8(r2)
81131810:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
81131814:	e0bffd0b 	ldhu	r2,-12(fp)
81131818:	10000626 	beq	r2,zero,81131834 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8113181c:	e0bfff17 	ldw	r2,-4(fp)
81131820:	1080020b 	ldhu	r2,8(r2)
81131824:	10bfffc4 	addi	r2,r2,-1
81131828:	1007883a 	mov	r3,r2
8113182c:	e0bfff17 	ldw	r2,-4(fp)
81131830:	10c0020d 	sth	r3,8(r2)
81131834:	e0bffb17 	ldw	r2,-20(fp)
81131838:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113183c:	e0bffc17 	ldw	r2,-16(fp)
81131840:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
81131844:	e0bffd0b 	ldhu	r2,-12(fp)
}
81131848:	e037883a 	mov	sp,fp
8113184c:	df000017 	ldw	fp,0(sp)
81131850:	dec00104 	addi	sp,sp,4
81131854:	f800283a 	ret

81131858 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
81131858:	defff904 	addi	sp,sp,-28
8113185c:	de00012e 	bgeu	sp,et,81131864 <OSSemCreate+0xc>
81131860:	003b68fa 	trap	3
81131864:	dfc00615 	stw	ra,24(sp)
81131868:	df000515 	stw	fp,20(sp)
8113186c:	df000504 	addi	fp,sp,20
81131870:	2005883a 	mov	r2,r4
81131874:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81131878:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8113187c:	d0a08b03 	ldbu	r2,-32212(gp)
81131880:	10803fcc 	andi	r2,r2,255
81131884:	10000226 	beq	r2,zero,81131890 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
81131888:	0005883a 	mov	r2,zero
8113188c:	00002506 	br	81131924 <OSSemCreate+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131890:	0005303a 	rdctl	r2,status
81131894:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131898:	e0fffe17 	ldw	r3,-8(fp)
8113189c:	00bfff84 	movi	r2,-2
811318a0:	1884703a 	and	r2,r3,r2
811318a4:	1001703a 	wrctl	status,r2
  
  return context;
811318a8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
811318ac:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
811318b0:	d0a08a17 	ldw	r2,-32216(gp)
811318b4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
811318b8:	d0a08a17 	ldw	r2,-32216(gp)
811318bc:	10000326 	beq	r2,zero,811318cc <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
811318c0:	d0a08a17 	ldw	r2,-32216(gp)
811318c4:	10800117 	ldw	r2,4(r2)
811318c8:	d0a08a15 	stw	r2,-32216(gp)
811318cc:	e0bffb17 	ldw	r2,-20(fp)
811318d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811318d4:	e0bffc17 	ldw	r2,-16(fp)
811318d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
811318dc:	e0bffd17 	ldw	r2,-12(fp)
811318e0:	10000f26 	beq	r2,zero,81131920 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
811318e4:	e0bffd17 	ldw	r2,-12(fp)
811318e8:	00c000c4 	movi	r3,3
811318ec:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
811318f0:	e0bffd17 	ldw	r2,-12(fp)
811318f4:	e0ffff0b 	ldhu	r3,-4(fp)
811318f8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
811318fc:	e0bffd17 	ldw	r2,-12(fp)
81131900:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
81131904:	e0bffd17 	ldw	r2,-12(fp)
81131908:	00c00fc4 	movi	r3,63
8113190c:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
81131910:	e0bffd17 	ldw	r2,-12(fp)
81131914:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
81131918:	e13ffd17 	ldw	r4,-12(fp)
8113191c:	112c7ec0 	call	8112c7ec <OS_EventWaitListInit>
    }
    return (pevent);
81131920:	e0bffd17 	ldw	r2,-12(fp)
}
81131924:	e037883a 	mov	sp,fp
81131928:	dfc00117 	ldw	ra,4(sp)
8113192c:	df000017 	ldw	fp,0(sp)
81131930:	dec00204 	addi	sp,sp,8
81131934:	f800283a 	ret

81131938 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81131938:	defff304 	addi	sp,sp,-52
8113193c:	de00012e 	bgeu	sp,et,81131944 <OSSemDel+0xc>
81131940:	003b68fa 	trap	3
81131944:	dfc00c15 	stw	ra,48(sp)
81131948:	df000b15 	stw	fp,44(sp)
8113194c:	df000b04 	addi	fp,sp,44
81131950:	e13ffd15 	stw	r4,-12(fp)
81131954:	2805883a 	mov	r2,r5
81131958:	e1bfff15 	stw	r6,-4(fp)
8113195c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81131960:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81131964:	e0bfff17 	ldw	r2,-4(fp)
81131968:	1000021e 	bne	r2,zero,81131974 <OSSemDel+0x3c>
        return (pevent);
8113196c:	e0bffd17 	ldw	r2,-12(fp)
81131970:	00007e06 	br	81131b6c <OSSemDel+0x234>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81131974:	e0bffd17 	ldw	r2,-12(fp)
81131978:	1000051e 	bne	r2,zero,81131990 <OSSemDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8113197c:	e0bfff17 	ldw	r2,-4(fp)
81131980:	00c00104 	movi	r3,4
81131984:	10c00005 	stb	r3,0(r2)
        return (pevent);
81131988:	e0bffd17 	ldw	r2,-12(fp)
8113198c:	00007706 	br	81131b6c <OSSemDel+0x234>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
81131990:	e0bffd17 	ldw	r2,-12(fp)
81131994:	10800003 	ldbu	r2,0(r2)
81131998:	10803fcc 	andi	r2,r2,255
8113199c:	108000e0 	cmpeqi	r2,r2,3
811319a0:	1000051e 	bne	r2,zero,811319b8 <OSSemDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
811319a4:	e0bfff17 	ldw	r2,-4(fp)
811319a8:	00c00044 	movi	r3,1
811319ac:	10c00005 	stb	r3,0(r2)
        return (pevent);
811319b0:	e0bffd17 	ldw	r2,-12(fp)
811319b4:	00006d06 	br	81131b6c <OSSemDel+0x234>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811319b8:	d0a08b03 	ldbu	r2,-32212(gp)
811319bc:	10803fcc 	andi	r2,r2,255
811319c0:	10000526 	beq	r2,zero,811319d8 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
811319c4:	e0bfff17 	ldw	r2,-4(fp)
811319c8:	00c003c4 	movi	r3,15
811319cc:	10c00005 	stb	r3,0(r2)
        return (pevent);
811319d0:	e0bffd17 	ldw	r2,-12(fp)
811319d4:	00006506 	br	81131b6c <OSSemDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811319d8:	0005303a 	rdctl	r2,status
811319dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811319e0:	e0fffc17 	ldw	r3,-16(fp)
811319e4:	00bfff84 	movi	r2,-2
811319e8:	1884703a 	and	r2,r3,r2
811319ec:	1001703a 	wrctl	status,r2
  
  return context;
811319f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811319f4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
811319f8:	e0bffd17 	ldw	r2,-12(fp)
811319fc:	10800283 	ldbu	r2,10(r2)
81131a00:	10803fcc 	andi	r2,r2,255
81131a04:	10000326 	beq	r2,zero,81131a14 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81131a08:	00800044 	movi	r2,1
81131a0c:	e0bff505 	stb	r2,-44(fp)
81131a10:	00000106 	br	81131a18 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81131a14:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
81131a18:	e0bffe03 	ldbu	r2,-8(fp)
81131a1c:	10000326 	beq	r2,zero,81131a2c <OSSemDel+0xf4>
81131a20:	10800060 	cmpeqi	r2,r2,1
81131a24:	1000281e 	bne	r2,zero,81131ac8 <OSSemDel+0x190>
81131a28:	00004506 	br	81131b40 <OSSemDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
81131a2c:	e0bff503 	ldbu	r2,-44(fp)
81131a30:	1000161e 	bne	r2,zero,81131a8c <OSSemDel+0x154>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
81131a34:	e0bffd17 	ldw	r2,-12(fp)
81131a38:	00c00fc4 	movi	r3,63
81131a3c:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
81131a40:	e0bffd17 	ldw	r2,-12(fp)
81131a44:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81131a48:	e0bffd17 	ldw	r2,-12(fp)
81131a4c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
81131a50:	d0e08a17 	ldw	r3,-32216(gp)
81131a54:	e0bffd17 	ldw	r2,-12(fp)
81131a58:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
81131a5c:	e0bffd17 	ldw	r2,-12(fp)
81131a60:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
81131a64:	e0bffd17 	ldw	r2,-12(fp)
81131a68:	d0a08a15 	stw	r2,-32216(gp)
81131a6c:	e0bff717 	ldw	r2,-36(fp)
81131a70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131a74:	e0bff817 	ldw	r2,-32(fp)
81131a78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
81131a7c:	e0bfff17 	ldw	r2,-4(fp)
81131a80:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
81131a84:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
81131a88:	00003706 	br	81131b68 <OSSemDel+0x230>
81131a8c:	e0bff717 	ldw	r2,-36(fp)
81131a90:	e0bff915 	stw	r2,-28(fp)
81131a94:	e0bff917 	ldw	r2,-28(fp)
81131a98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
81131a9c:	e0bfff17 	ldw	r2,-4(fp)
81131aa0:	00c01244 	movi	r3,73
81131aa4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
81131aa8:	e0bffd17 	ldw	r2,-12(fp)
81131aac:	e0bff615 	stw	r2,-40(fp)
             }
             break;
81131ab0:	00002d06 	br	81131b68 <OSSemDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
81131ab4:	000f883a 	mov	r7,zero
81131ab8:	01800044 	movi	r6,1
81131abc:	000b883a 	mov	r5,zero
81131ac0:	e13ffd17 	ldw	r4,-12(fp)
81131ac4:	112c2140 	call	8112c214 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
81131ac8:	e0bffd17 	ldw	r2,-12(fp)
81131acc:	10800283 	ldbu	r2,10(r2)
81131ad0:	10803fcc 	andi	r2,r2,255
81131ad4:	103ff71e 	bne	r2,zero,81131ab4 <__reset+0xfb111ab4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81131ad8:	e0bffd17 	ldw	r2,-12(fp)
81131adc:	00c00fc4 	movi	r3,63
81131ae0:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81131ae4:	e0bffd17 	ldw	r2,-12(fp)
81131ae8:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81131aec:	e0bffd17 	ldw	r2,-12(fp)
81131af0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
81131af4:	d0e08a17 	ldw	r3,-32216(gp)
81131af8:	e0bffd17 	ldw	r2,-12(fp)
81131afc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
81131b00:	e0bffd17 	ldw	r2,-12(fp)
81131b04:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
81131b08:	e0bffd17 	ldw	r2,-12(fp)
81131b0c:	d0a08a15 	stw	r2,-32216(gp)
81131b10:	e0bff717 	ldw	r2,-36(fp)
81131b14:	e0bffa15 	stw	r2,-24(fp)
81131b18:	e0bffa17 	ldw	r2,-24(fp)
81131b1c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81131b20:	e0bff503 	ldbu	r2,-44(fp)
81131b24:	10800058 	cmpnei	r2,r2,1
81131b28:	1000011e 	bne	r2,zero,81131b30 <OSSemDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81131b2c:	112ccd00 	call	8112ccd0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
81131b30:	e0bfff17 	ldw	r2,-4(fp)
81131b34:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
81131b38:	e03ff615 	stw	zero,-40(fp)
             break;
81131b3c:	00000a06 	br	81131b68 <OSSemDel+0x230>
81131b40:	e0bff717 	ldw	r2,-36(fp)
81131b44:	e0bffb15 	stw	r2,-20(fp)
81131b48:	e0bffb17 	ldw	r2,-20(fp)
81131b4c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
81131b50:	e0bfff17 	ldw	r2,-4(fp)
81131b54:	00c001c4 	movi	r3,7
81131b58:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
81131b5c:	e0bffd17 	ldw	r2,-12(fp)
81131b60:	e0bff615 	stw	r2,-40(fp)
             break;
81131b64:	0001883a 	nop
    }
    return (pevent_return);
81131b68:	e0bff617 	ldw	r2,-40(fp)
}
81131b6c:	e037883a 	mov	sp,fp
81131b70:	dfc00117 	ldw	ra,4(sp)
81131b74:	df000017 	ldw	fp,0(sp)
81131b78:	dec00204 	addi	sp,sp,8
81131b7c:	f800283a 	ret

81131b80 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81131b80:	defff504 	addi	sp,sp,-44
81131b84:	de00012e 	bgeu	sp,et,81131b8c <OSSemPend+0xc>
81131b88:	003b68fa 	trap	3
81131b8c:	dfc00a15 	stw	ra,40(sp)
81131b90:	df000915 	stw	fp,36(sp)
81131b94:	df000904 	addi	fp,sp,36
81131b98:	e13ffd15 	stw	r4,-12(fp)
81131b9c:	2805883a 	mov	r2,r5
81131ba0:	e1bfff15 	stw	r6,-4(fp)
81131ba4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81131ba8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81131bac:	e0bfff17 	ldw	r2,-4(fp)
81131bb0:	10007226 	beq	r2,zero,81131d7c <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81131bb4:	e0bffd17 	ldw	r2,-12(fp)
81131bb8:	1000041e 	bne	r2,zero,81131bcc <OSSemPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
81131bbc:	e0bfff17 	ldw	r2,-4(fp)
81131bc0:	00c00104 	movi	r3,4
81131bc4:	10c00005 	stb	r3,0(r2)
        return;
81131bc8:	00006d06 	br	81131d80 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81131bcc:	e0bffd17 	ldw	r2,-12(fp)
81131bd0:	10800003 	ldbu	r2,0(r2)
81131bd4:	10803fcc 	andi	r2,r2,255
81131bd8:	108000e0 	cmpeqi	r2,r2,3
81131bdc:	1000041e 	bne	r2,zero,81131bf0 <OSSemPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
81131be0:	e0bfff17 	ldw	r2,-4(fp)
81131be4:	00c00044 	movi	r3,1
81131be8:	10c00005 	stb	r3,0(r2)
        return;
81131bec:	00006406 	br	81131d80 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
81131bf0:	d0a08b03 	ldbu	r2,-32212(gp)
81131bf4:	10803fcc 	andi	r2,r2,255
81131bf8:	10000426 	beq	r2,zero,81131c0c <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
81131bfc:	e0bfff17 	ldw	r2,-4(fp)
81131c00:	00c00084 	movi	r3,2
81131c04:	10c00005 	stb	r3,0(r2)
        return;
81131c08:	00005d06 	br	81131d80 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
81131c0c:	d0a07903 	ldbu	r2,-32284(gp)
81131c10:	10803fcc 	andi	r2,r2,255
81131c14:	10000426 	beq	r2,zero,81131c28 <OSSemPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
81131c18:	e0bfff17 	ldw	r2,-4(fp)
81131c1c:	00c00344 	movi	r3,13
81131c20:	10c00005 	stb	r3,0(r2)
        return;
81131c24:	00005606 	br	81131d80 <OSSemPend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131c28:	0005303a 	rdctl	r2,status
81131c2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131c30:	e0fffc17 	ldw	r3,-16(fp)
81131c34:	00bfff84 	movi	r2,-2
81131c38:	1884703a 	and	r2,r3,r2
81131c3c:	1001703a 	wrctl	status,r2
  
  return context;
81131c40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81131c44:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
81131c48:	e0bffd17 	ldw	r2,-12(fp)
81131c4c:	1080020b 	ldhu	r2,8(r2)
81131c50:	10bfffcc 	andi	r2,r2,65535
81131c54:	10000d26 	beq	r2,zero,81131c8c <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
81131c58:	e0bffd17 	ldw	r2,-12(fp)
81131c5c:	1080020b 	ldhu	r2,8(r2)
81131c60:	10bfffc4 	addi	r2,r2,-1
81131c64:	1007883a 	mov	r3,r2
81131c68:	e0bffd17 	ldw	r2,-12(fp)
81131c6c:	10c0020d 	sth	r3,8(r2)
81131c70:	e0bff717 	ldw	r2,-36(fp)
81131c74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131c78:	e0bff817 	ldw	r2,-32(fp)
81131c7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
81131c80:	e0bfff17 	ldw	r2,-4(fp)
81131c84:	10000005 	stb	zero,0(r2)
        return;
81131c88:	00003d06 	br	81131d80 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
81131c8c:	d0a08c17 	ldw	r2,-32208(gp)
81131c90:	d0e08c17 	ldw	r3,-32208(gp)
81131c94:	18c00c03 	ldbu	r3,48(r3)
81131c98:	18c00054 	ori	r3,r3,1
81131c9c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81131ca0:	d0a08c17 	ldw	r2,-32208(gp)
81131ca4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
81131ca8:	d0a08c17 	ldw	r2,-32208(gp)
81131cac:	e0fffe0b 	ldhu	r3,-8(fp)
81131cb0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
81131cb4:	e13ffd17 	ldw	r4,-12(fp)
81131cb8:	112c3b40 	call	8112c3b4 <OS_EventTaskWait>
81131cbc:	e0bff717 	ldw	r2,-36(fp)
81131cc0:	e0bffb15 	stw	r2,-20(fp)
81131cc4:	e0bffb17 	ldw	r2,-20(fp)
81131cc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
81131ccc:	112ccd00 	call	8112ccd0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131cd0:	0005303a 	rdctl	r2,status
81131cd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131cd8:	e0fff917 	ldw	r3,-28(fp)
81131cdc:	00bfff84 	movi	r2,-2
81131ce0:	1884703a 	and	r2,r3,r2
81131ce4:	1001703a 	wrctl	status,r2
  
  return context;
81131ce8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
81131cec:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81131cf0:	d0a08c17 	ldw	r2,-32208(gp)
81131cf4:	10800c43 	ldbu	r2,49(r2)
81131cf8:	10803fcc 	andi	r2,r2,255
81131cfc:	10000326 	beq	r2,zero,81131d0c <OSSemPend+0x18c>
81131d00:	108000a0 	cmpeqi	r2,r2,2
81131d04:	1000041e 	bne	r2,zero,81131d18 <OSSemPend+0x198>
81131d08:	00000706 	br	81131d28 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81131d0c:	e0bfff17 	ldw	r2,-4(fp)
81131d10:	10000005 	stb	zero,0(r2)
             break;
81131d14:	00000c06 	br	81131d48 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
81131d18:	e0bfff17 	ldw	r2,-4(fp)
81131d1c:	00c00384 	movi	r3,14
81131d20:	10c00005 	stb	r3,0(r2)
             break;
81131d24:	00000806 	br	81131d48 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
81131d28:	d0a08c17 	ldw	r2,-32208(gp)
81131d2c:	e17ffd17 	ldw	r5,-12(fp)
81131d30:	1009883a 	mov	r4,r2
81131d34:	112c6240 	call	8112c624 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
81131d38:	e0bfff17 	ldw	r2,-4(fp)
81131d3c:	00c00284 	movi	r3,10
81131d40:	10c00005 	stb	r3,0(r2)
             break;
81131d44:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
81131d48:	d0a08c17 	ldw	r2,-32208(gp)
81131d4c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81131d50:	d0a08c17 	ldw	r2,-32208(gp)
81131d54:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
81131d58:	d0a08c17 	ldw	r2,-32208(gp)
81131d5c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81131d60:	d0a08c17 	ldw	r2,-32208(gp)
81131d64:	10000815 	stw	zero,32(r2)
81131d68:	e0bff717 	ldw	r2,-36(fp)
81131d6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131d70:	e0bffa17 	ldw	r2,-24(fp)
81131d74:	1001703a 	wrctl	status,r2
81131d78:	00000106 	br	81131d80 <OSSemPend+0x200>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
81131d7c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
81131d80:	e037883a 	mov	sp,fp
81131d84:	dfc00117 	ldw	ra,4(sp)
81131d88:	df000017 	ldw	fp,0(sp)
81131d8c:	dec00204 	addi	sp,sp,8
81131d90:	f800283a 	ret

81131d94 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81131d94:	defff604 	addi	sp,sp,-40
81131d98:	de00012e 	bgeu	sp,et,81131da0 <OSSemPendAbort+0xc>
81131d9c:	003b68fa 	trap	3
81131da0:	dfc00915 	stw	ra,36(sp)
81131da4:	df000815 	stw	fp,32(sp)
81131da8:	df000804 	addi	fp,sp,32
81131dac:	e13ffd15 	stw	r4,-12(fp)
81131db0:	2805883a 	mov	r2,r5
81131db4:	e1bfff15 	stw	r6,-4(fp)
81131db8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81131dbc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81131dc0:	e0bfff17 	ldw	r2,-4(fp)
81131dc4:	1000021e 	bne	r2,zero,81131dd0 <OSSemPendAbort+0x3c>
        return (0);
81131dc8:	0005883a 	mov	r2,zero
81131dcc:	00004906 	br	81131ef4 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81131dd0:	e0bffd17 	ldw	r2,-12(fp)
81131dd4:	1000051e 	bne	r2,zero,81131dec <OSSemPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81131dd8:	e0bfff17 	ldw	r2,-4(fp)
81131ddc:	00c00104 	movi	r3,4
81131de0:	10c00005 	stb	r3,0(r2)
        return (0);
81131de4:	0005883a 	mov	r2,zero
81131de8:	00004206 	br	81131ef4 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81131dec:	e0bffd17 	ldw	r2,-12(fp)
81131df0:	10800003 	ldbu	r2,0(r2)
81131df4:	10803fcc 	andi	r2,r2,255
81131df8:	108000e0 	cmpeqi	r2,r2,3
81131dfc:	1000051e 	bne	r2,zero,81131e14 <OSSemPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81131e00:	e0bfff17 	ldw	r2,-4(fp)
81131e04:	00c00044 	movi	r3,1
81131e08:	10c00005 	stb	r3,0(r2)
        return (0);
81131e0c:	0005883a 	mov	r2,zero
81131e10:	00003806 	br	81131ef4 <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131e14:	0005303a 	rdctl	r2,status
81131e18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131e1c:	e0fffc17 	ldw	r3,-16(fp)
81131e20:	00bfff84 	movi	r2,-2
81131e24:	1884703a 	and	r2,r3,r2
81131e28:	1001703a 	wrctl	status,r2
  
  return context;
81131e2c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81131e30:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
81131e34:	e0bffd17 	ldw	r2,-12(fp)
81131e38:	10800283 	ldbu	r2,10(r2)
81131e3c:	10803fcc 	andi	r2,r2,255
81131e40:	10002526 	beq	r2,zero,81131ed8 <OSSemPendAbort+0x144>
        nbr_tasks = 0;
81131e44:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
81131e48:	e0bffe03 	ldbu	r2,-8(fp)
81131e4c:	10800060 	cmpeqi	r2,r2,1
81131e50:	10000e26 	beq	r2,zero,81131e8c <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
81131e54:	00000806 	br	81131e78 <OSSemPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
81131e58:	01c00084 	movi	r7,2
81131e5c:	01800044 	movi	r6,1
81131e60:	000b883a 	mov	r5,zero
81131e64:	e13ffd17 	ldw	r4,-12(fp)
81131e68:	112c2140 	call	8112c214 <OS_EventTaskRdy>
                     nbr_tasks++;
81131e6c:	e0bff803 	ldbu	r2,-32(fp)
81131e70:	10800044 	addi	r2,r2,1
81131e74:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
81131e78:	e0bffd17 	ldw	r2,-12(fp)
81131e7c:	10800283 	ldbu	r2,10(r2)
81131e80:	10803fcc 	andi	r2,r2,255
81131e84:	103ff41e 	bne	r2,zero,81131e58 <__reset+0xfb111e58>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
81131e88:	00000906 	br	81131eb0 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
81131e8c:	01c00084 	movi	r7,2
81131e90:	01800044 	movi	r6,1
81131e94:	000b883a 	mov	r5,zero
81131e98:	e13ffd17 	ldw	r4,-12(fp)
81131e9c:	112c2140 	call	8112c214 <OS_EventTaskRdy>
                 nbr_tasks++;
81131ea0:	e0bff803 	ldbu	r2,-32(fp)
81131ea4:	10800044 	addi	r2,r2,1
81131ea8:	e0bff805 	stb	r2,-32(fp)
                 break;
81131eac:	0001883a 	nop
81131eb0:	e0bff917 	ldw	r2,-28(fp)
81131eb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131eb8:	e0bffa17 	ldw	r2,-24(fp)
81131ebc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
81131ec0:	112ccd00 	call	8112ccd0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
81131ec4:	e0bfff17 	ldw	r2,-4(fp)
81131ec8:	00c00384 	movi	r3,14
81131ecc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
81131ed0:	e0bff803 	ldbu	r2,-32(fp)
81131ed4:	00000706 	br	81131ef4 <OSSemPendAbort+0x160>
81131ed8:	e0bff917 	ldw	r2,-28(fp)
81131edc:	e0bffb15 	stw	r2,-20(fp)
81131ee0:	e0bffb17 	ldw	r2,-20(fp)
81131ee4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81131ee8:	e0bfff17 	ldw	r2,-4(fp)
81131eec:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
81131ef0:	0005883a 	mov	r2,zero
}
81131ef4:	e037883a 	mov	sp,fp
81131ef8:	dfc00117 	ldw	ra,4(sp)
81131efc:	df000017 	ldw	fp,0(sp)
81131f00:	dec00204 	addi	sp,sp,8
81131f04:	f800283a 	ret

81131f08 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
81131f08:	defff804 	addi	sp,sp,-32
81131f0c:	de00012e 	bgeu	sp,et,81131f14 <OSSemPost+0xc>
81131f10:	003b68fa 	trap	3
81131f14:	dfc00715 	stw	ra,28(sp)
81131f18:	df000615 	stw	fp,24(sp)
81131f1c:	df000604 	addi	fp,sp,24
81131f20:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81131f24:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81131f28:	e0bfff17 	ldw	r2,-4(fp)
81131f2c:	1000021e 	bne	r2,zero,81131f38 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
81131f30:	00800104 	movi	r2,4
81131f34:	00003506 	br	8113200c <OSSemPost+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81131f38:	e0bfff17 	ldw	r2,-4(fp)
81131f3c:	10800003 	ldbu	r2,0(r2)
81131f40:	10803fcc 	andi	r2,r2,255
81131f44:	108000e0 	cmpeqi	r2,r2,3
81131f48:	1000021e 	bne	r2,zero,81131f54 <OSSemPost+0x4c>
        return (OS_ERR_EVENT_TYPE);
81131f4c:	00800044 	movi	r2,1
81131f50:	00002e06 	br	8113200c <OSSemPost+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131f54:	0005303a 	rdctl	r2,status
81131f58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131f5c:	e0fffe17 	ldw	r3,-8(fp)
81131f60:	00bfff84 	movi	r2,-2
81131f64:	1884703a 	and	r2,r3,r2
81131f68:	1001703a 	wrctl	status,r2
  
  return context;
81131f6c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81131f70:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
81131f74:	e0bfff17 	ldw	r2,-4(fp)
81131f78:	10800283 	ldbu	r2,10(r2)
81131f7c:	10803fcc 	andi	r2,r2,255
81131f80:	10000c26 	beq	r2,zero,81131fb4 <OSSemPost+0xac>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
81131f84:	000f883a 	mov	r7,zero
81131f88:	01800044 	movi	r6,1
81131f8c:	000b883a 	mov	r5,zero
81131f90:	e13fff17 	ldw	r4,-4(fp)
81131f94:	112c2140 	call	8112c214 <OS_EventTaskRdy>
81131f98:	e0bffa17 	ldw	r2,-24(fp)
81131f9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131fa0:	e0bffb17 	ldw	r2,-20(fp)
81131fa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
81131fa8:	112ccd00 	call	8112ccd0 <OS_Sched>
        return (OS_ERR_NONE);
81131fac:	0005883a 	mov	r2,zero
81131fb0:	00001606 	br	8113200c <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
81131fb4:	e0bfff17 	ldw	r2,-4(fp)
81131fb8:	1080020b 	ldhu	r2,8(r2)
81131fbc:	10ffffcc 	andi	r3,r2,65535
81131fc0:	00bfffd4 	movui	r2,65535
81131fc4:	18800c26 	beq	r3,r2,81131ff8 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
81131fc8:	e0bfff17 	ldw	r2,-4(fp)
81131fcc:	1080020b 	ldhu	r2,8(r2)
81131fd0:	10800044 	addi	r2,r2,1
81131fd4:	1007883a 	mov	r3,r2
81131fd8:	e0bfff17 	ldw	r2,-4(fp)
81131fdc:	10c0020d 	sth	r3,8(r2)
81131fe0:	e0bffa17 	ldw	r2,-24(fp)
81131fe4:	e0bffc15 	stw	r2,-16(fp)
81131fe8:	e0bffc17 	ldw	r2,-16(fp)
81131fec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
81131ff0:	0005883a 	mov	r2,zero
81131ff4:	00000506 	br	8113200c <OSSemPost+0x104>
81131ff8:	e0bffa17 	ldw	r2,-24(fp)
81131ffc:	e0bffd15 	stw	r2,-12(fp)
81132000:	e0bffd17 	ldw	r2,-12(fp)
81132004:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
81132008:	00800c84 	movi	r2,50
}
8113200c:	e037883a 	mov	sp,fp
81132010:	dfc00117 	ldw	ra,4(sp)
81132014:	df000017 	ldw	fp,0(sp)
81132018:	dec00204 	addi	sp,sp,8
8113201c:	f800283a 	ret

81132020 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
81132020:	defff704 	addi	sp,sp,-36
81132024:	de00012e 	bgeu	sp,et,8113202c <OSSemQuery+0xc>
81132028:	003b68fa 	trap	3
8113202c:	df000815 	stw	fp,32(sp)
81132030:	df000804 	addi	fp,sp,32
81132034:	e13ffe15 	stw	r4,-8(fp)
81132038:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8113203c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81132040:	e0bffe17 	ldw	r2,-8(fp)
81132044:	1000021e 	bne	r2,zero,81132050 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
81132048:	00800104 	movi	r2,4
8113204c:	00003606 	br	81132128 <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
81132050:	e0bfff17 	ldw	r2,-4(fp)
81132054:	1000021e 	bne	r2,zero,81132060 <OSSemQuery+0x40>
        return (OS_ERR_PDATA_NULL);
81132058:	00800244 	movi	r2,9
8113205c:	00003206 	br	81132128 <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
81132060:	e0bffe17 	ldw	r2,-8(fp)
81132064:	10800003 	ldbu	r2,0(r2)
81132068:	10803fcc 	andi	r2,r2,255
8113206c:	108000e0 	cmpeqi	r2,r2,3
81132070:	1000021e 	bne	r2,zero,8113207c <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
81132074:	00800044 	movi	r2,1
81132078:	00002b06 	br	81132128 <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113207c:	0005303a 	rdctl	r2,status
81132080:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132084:	e0fffd17 	ldw	r3,-12(fp)
81132088:	00bfff84 	movi	r2,-2
8113208c:	1884703a 	and	r2,r3,r2
81132090:	1001703a 	wrctl	status,r2
  
  return context;
81132094:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81132098:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
8113209c:	e0bffe17 	ldw	r2,-8(fp)
811320a0:	10c00283 	ldbu	r3,10(r2)
811320a4:	e0bfff17 	ldw	r2,-4(fp)
811320a8:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
811320ac:	e0bffe17 	ldw	r2,-8(fp)
811320b0:	108002c4 	addi	r2,r2,11
811320b4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
811320b8:	e0bfff17 	ldw	r2,-4(fp)
811320bc:	10800084 	addi	r2,r2,2
811320c0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811320c4:	e03ffa05 	stb	zero,-24(fp)
811320c8:	00000b06 	br	811320f8 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
811320cc:	e0bff917 	ldw	r2,-28(fp)
811320d0:	10c00044 	addi	r3,r2,1
811320d4:	e0fff915 	stw	r3,-28(fp)
811320d8:	e0fff817 	ldw	r3,-32(fp)
811320dc:	19000044 	addi	r4,r3,1
811320e0:	e13ff815 	stw	r4,-32(fp)
811320e4:	18c00003 	ldbu	r3,0(r3)
811320e8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811320ec:	e0bffa03 	ldbu	r2,-24(fp)
811320f0:	10800044 	addi	r2,r2,1
811320f4:	e0bffa05 	stb	r2,-24(fp)
811320f8:	e0bffa03 	ldbu	r2,-24(fp)
811320fc:	108001b0 	cmpltui	r2,r2,6
81132100:	103ff21e 	bne	r2,zero,811320cc <__reset+0xfb1120cc>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
81132104:	e0bffe17 	ldw	r2,-8(fp)
81132108:	10c0020b 	ldhu	r3,8(r2)
8113210c:	e0bfff17 	ldw	r2,-4(fp)
81132110:	10c0000d 	sth	r3,0(r2)
81132114:	e0bffb17 	ldw	r2,-20(fp)
81132118:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113211c:	e0bffc17 	ldw	r2,-16(fp)
81132120:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81132124:	0005883a 	mov	r2,zero
}
81132128:	e037883a 	mov	sp,fp
8113212c:	df000017 	ldw	fp,0(sp)
81132130:	dec00104 	addi	sp,sp,4
81132134:	f800283a 	ret

81132138 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
81132138:	defff904 	addi	sp,sp,-28
8113213c:	de00012e 	bgeu	sp,et,81132144 <OSSemSet+0xc>
81132140:	003b68fa 	trap	3
81132144:	df000615 	stw	fp,24(sp)
81132148:	df000604 	addi	fp,sp,24
8113214c:	e13ffd15 	stw	r4,-12(fp)
81132150:	2805883a 	mov	r2,r5
81132154:	e1bfff15 	stw	r6,-4(fp)
81132158:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8113215c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81132160:	e0bfff17 	ldw	r2,-4(fp)
81132164:	10003126 	beq	r2,zero,8113222c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81132168:	e0bffd17 	ldw	r2,-12(fp)
8113216c:	1000041e 	bne	r2,zero,81132180 <OSSemSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
81132170:	e0bfff17 	ldw	r2,-4(fp)
81132174:	00c00104 	movi	r3,4
81132178:	10c00005 	stb	r3,0(r2)
        return;
8113217c:	00002c06 	br	81132230 <OSSemSet+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81132180:	e0bffd17 	ldw	r2,-12(fp)
81132184:	10800003 	ldbu	r2,0(r2)
81132188:	10803fcc 	andi	r2,r2,255
8113218c:	108000e0 	cmpeqi	r2,r2,3
81132190:	1000041e 	bne	r2,zero,811321a4 <OSSemSet+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
81132194:	e0bfff17 	ldw	r2,-4(fp)
81132198:	00c00044 	movi	r3,1
8113219c:	10c00005 	stb	r3,0(r2)
        return;
811321a0:	00002306 	br	81132230 <OSSemSet+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811321a4:	0005303a 	rdctl	r2,status
811321a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811321ac:	e0fffc17 	ldw	r3,-16(fp)
811321b0:	00bfff84 	movi	r2,-2
811321b4:	1884703a 	and	r2,r3,r2
811321b8:	1001703a 	wrctl	status,r2
  
  return context;
811321bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811321c0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
811321c4:	e0bfff17 	ldw	r2,-4(fp)
811321c8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
811321cc:	e0bffd17 	ldw	r2,-12(fp)
811321d0:	1080020b 	ldhu	r2,8(r2)
811321d4:	10bfffcc 	andi	r2,r2,65535
811321d8:	10000426 	beq	r2,zero,811321ec <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
811321dc:	e0bffd17 	ldw	r2,-12(fp)
811321e0:	e0fffe0b 	ldhu	r3,-8(fp)
811321e4:	10c0020d 	sth	r3,8(r2)
811321e8:	00000b06 	br	81132218 <OSSemSet+0xe0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
811321ec:	e0bffd17 	ldw	r2,-12(fp)
811321f0:	10800283 	ldbu	r2,10(r2)
811321f4:	10803fcc 	andi	r2,r2,255
811321f8:	1000041e 	bne	r2,zero,8113220c <OSSemSet+0xd4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
811321fc:	e0bffd17 	ldw	r2,-12(fp)
81132200:	e0fffe0b 	ldhu	r3,-8(fp)
81132204:	10c0020d 	sth	r3,8(r2)
81132208:	00000306 	br	81132218 <OSSemSet+0xe0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
8113220c:	e0bfff17 	ldw	r2,-4(fp)
81132210:	00c01244 	movi	r3,73
81132214:	10c00005 	stb	r3,0(r2)
81132218:	e0bffa17 	ldw	r2,-24(fp)
8113221c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132220:	e0bffb17 	ldw	r2,-20(fp)
81132224:	1001703a 	wrctl	status,r2
81132228:	00000106 	br	81132230 <OSSemSet+0xf8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8113222c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
81132230:	e037883a 	mov	sp,fp
81132234:	df000017 	ldw	fp,0(sp)
81132238:	dec00104 	addi	sp,sp,4
8113223c:	f800283a 	ret

81132240 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
81132240:	defff104 	addi	sp,sp,-60
81132244:	de00012e 	bgeu	sp,et,8113224c <OSTaskChangePrio+0xc>
81132248:	003b68fa 	trap	3
8113224c:	dfc00e15 	stw	ra,56(sp)
81132250:	df000d15 	stw	fp,52(sp)
81132254:	df000d04 	addi	fp,sp,52
81132258:	2007883a 	mov	r3,r4
8113225c:	2805883a 	mov	r2,r5
81132260:	e0fffe05 	stb	r3,-8(fp)
81132264:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
81132268:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
8113226c:	e0bffe03 	ldbu	r2,-8(fp)
81132270:	10800a30 	cmpltui	r2,r2,40
81132274:	1000051e 	bne	r2,zero,8113228c <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
81132278:	e0bffe03 	ldbu	r2,-8(fp)
8113227c:	10803fe0 	cmpeqi	r2,r2,255
81132280:	1000021e 	bne	r2,zero,8113228c <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
81132284:	00800a84 	movi	r2,42
81132288:	00012606 	br	81132724 <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
8113228c:	e0bfff03 	ldbu	r2,-4(fp)
81132290:	10800a30 	cmpltui	r2,r2,40
81132294:	1000021e 	bne	r2,zero,811322a0 <OSTaskChangePrio+0x60>
        return (OS_ERR_PRIO_INVALID);
81132298:	00800a84 	movi	r2,42
8113229c:	00012106 	br	81132724 <OSTaskChangePrio+0x4e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811322a0:	0005303a 	rdctl	r2,status
811322a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811322a8:	e0fffd17 	ldw	r3,-12(fp)
811322ac:	00bfff84 	movi	r2,-2
811322b0:	1884703a 	and	r2,r3,r2
811322b4:	1001703a 	wrctl	status,r2
  
  return context;
811322b8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811322bc:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
811322c0:	e0ffff03 	ldbu	r3,-4(fp)
811322c4:	00a045b4 	movhi	r2,33046
811322c8:	10a05004 	addi	r2,r2,-32448
811322cc:	18c7883a 	add	r3,r3,r3
811322d0:	18c7883a 	add	r3,r3,r3
811322d4:	10c5883a 	add	r2,r2,r3
811322d8:	10800017 	ldw	r2,0(r2)
811322dc:	10000626 	beq	r2,zero,811322f8 <OSTaskChangePrio+0xb8>
811322e0:	e0bff517 	ldw	r2,-44(fp)
811322e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811322e8:	e0bff617 	ldw	r2,-40(fp)
811322ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
811322f0:	00800a04 	movi	r2,40
811322f4:	00010b06 	br	81132724 <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
811322f8:	e0bffe03 	ldbu	r2,-8(fp)
811322fc:	10803fd8 	cmpnei	r2,r2,255
81132300:	1000031e 	bne	r2,zero,81132310 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
81132304:	d0a08c17 	ldw	r2,-32208(gp)
81132308:	10800c83 	ldbu	r2,50(r2)
8113230c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
81132310:	e0fffe03 	ldbu	r3,-8(fp)
81132314:	00a045b4 	movhi	r2,33046
81132318:	10a05004 	addi	r2,r2,-32448
8113231c:	18c7883a 	add	r3,r3,r3
81132320:	18c7883a 	add	r3,r3,r3
81132324:	10c5883a 	add	r2,r2,r3
81132328:	10800017 	ldw	r2,0(r2)
8113232c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
81132330:	e0bff817 	ldw	r2,-32(fp)
81132334:	1000061e 	bne	r2,zero,81132350 <OSTaskChangePrio+0x110>
81132338:	e0bff517 	ldw	r2,-44(fp)
8113233c:	e0bff715 	stw	r2,-36(fp)
81132340:	e0bff717 	ldw	r2,-36(fp)
81132344:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
81132348:	00800a44 	movi	r2,41
8113234c:	0000f506 	br	81132724 <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
81132350:	e0bff817 	ldw	r2,-32(fp)
81132354:	10800058 	cmpnei	r2,r2,1
81132358:	1000061e 	bne	r2,zero,81132374 <OSTaskChangePrio+0x134>
8113235c:	e0bff517 	ldw	r2,-44(fp)
81132360:	e0bff915 	stw	r2,-28(fp)
81132364:	e0bff917 	ldw	r2,-28(fp)
81132368:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
8113236c:	008010c4 	movi	r2,67
81132370:	0000ec06 	br	81132724 <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
81132374:	e0bfff03 	ldbu	r2,-4(fp)
81132378:	1004d0fa 	srli	r2,r2,3
8113237c:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
81132380:	e0bfff03 	ldbu	r2,-4(fp)
81132384:	108001cc 	andi	r2,r2,7
81132388:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
8113238c:	e0bffb03 	ldbu	r2,-20(fp)
81132390:	00c00044 	movi	r3,1
81132394:	1884983a 	sll	r2,r3,r2
81132398:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
8113239c:	e0bffb43 	ldbu	r2,-19(fp)
811323a0:	00c00044 	movi	r3,1
811323a4:	1884983a 	sll	r2,r3,r2
811323a8:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
811323ac:	e0fffe03 	ldbu	r3,-8(fp)
811323b0:	00a045b4 	movhi	r2,33046
811323b4:	10a05004 	addi	r2,r2,-32448
811323b8:	18c7883a 	add	r3,r3,r3
811323bc:	18c7883a 	add	r3,r3,r3
811323c0:	10c5883a 	add	r2,r2,r3
811323c4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
811323c8:	e0ffff03 	ldbu	r3,-4(fp)
811323cc:	00a045b4 	movhi	r2,33046
811323d0:	10a05004 	addi	r2,r2,-32448
811323d4:	18c7883a 	add	r3,r3,r3
811323d8:	18c7883a 	add	r3,r3,r3
811323dc:	10c5883a 	add	r2,r2,r3
811323e0:	e0fff817 	ldw	r3,-32(fp)
811323e4:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
811323e8:	e0bff817 	ldw	r2,-32(fp)
811323ec:	10800d03 	ldbu	r2,52(r2)
811323f0:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
811323f4:	e0bff817 	ldw	r2,-32(fp)
811323f8:	10800d83 	ldbu	r2,54(r2)
811323fc:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
81132400:	e0bff817 	ldw	r2,-32(fp)
81132404:	10800d43 	ldbu	r2,53(r2)
81132408:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
8113240c:	e0fffc03 	ldbu	r3,-16(fp)
81132410:	d0a08844 	addi	r2,gp,-32223
81132414:	1885883a 	add	r2,r3,r2
81132418:	10c00003 	ldbu	r3,0(r2)
8113241c:	e0bffc83 	ldbu	r2,-14(fp)
81132420:	1884703a 	and	r2,r3,r2
81132424:	10803fcc 	andi	r2,r2,255
81132428:	10002826 	beq	r2,zero,811324cc <OSTaskChangePrio+0x28c>
         OSRdyTbl[y_old] &= ~bitx_old;
8113242c:	e0fffc03 	ldbu	r3,-16(fp)
81132430:	e13ffc03 	ldbu	r4,-16(fp)
81132434:	d0a08844 	addi	r2,gp,-32223
81132438:	2085883a 	add	r2,r4,r2
8113243c:	10800003 	ldbu	r2,0(r2)
81132440:	1009883a 	mov	r4,r2
81132444:	e0bffc83 	ldbu	r2,-14(fp)
81132448:	0084303a 	nor	r2,zero,r2
8113244c:	2084703a 	and	r2,r4,r2
81132450:	1009883a 	mov	r4,r2
81132454:	d0a08844 	addi	r2,gp,-32223
81132458:	1885883a 	add	r2,r3,r2
8113245c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
81132460:	e0fffc03 	ldbu	r3,-16(fp)
81132464:	d0a08844 	addi	r2,gp,-32223
81132468:	1885883a 	add	r2,r3,r2
8113246c:	10800003 	ldbu	r2,0(r2)
81132470:	10803fcc 	andi	r2,r2,255
81132474:	1000061e 	bne	r2,zero,81132490 <OSTaskChangePrio+0x250>
             OSRdyGrp &= ~bity_old;
81132478:	e0bffc43 	ldbu	r2,-15(fp)
8113247c:	0084303a 	nor	r2,zero,r2
81132480:	1007883a 	mov	r3,r2
81132484:	d0a08803 	ldbu	r2,-32224(gp)
81132488:	1884703a 	and	r2,r3,r2
8113248c:	d0a08805 	stb	r2,-32224(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
81132490:	d0e08803 	ldbu	r3,-32224(gp)
81132494:	e0bffb83 	ldbu	r2,-18(fp)
81132498:	1884b03a 	or	r2,r3,r2
8113249c:	d0a08805 	stb	r2,-32224(gp)
         OSRdyTbl[y_new] |= bitx_new;
811324a0:	e0fffb03 	ldbu	r3,-20(fp)
811324a4:	e13ffb03 	ldbu	r4,-20(fp)
811324a8:	d0a08844 	addi	r2,gp,-32223
811324ac:	2085883a 	add	r2,r4,r2
811324b0:	11000003 	ldbu	r4,0(r2)
811324b4:	e0bffbc3 	ldbu	r2,-17(fp)
811324b8:	2084b03a 	or	r2,r4,r2
811324bc:	1009883a 	mov	r4,r2
811324c0:	d0a08844 	addi	r2,gp,-32223
811324c4:	1885883a 	add	r2,r3,r2
811324c8:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
811324cc:	e0bff817 	ldw	r2,-32(fp)
811324d0:	10800717 	ldw	r2,28(r2)
811324d4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
811324d8:	e0bff317 	ldw	r2,-52(fp)
811324dc:	10003326 	beq	r2,zero,811325ac <OSTaskChangePrio+0x36c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
811324e0:	e0bffc03 	ldbu	r2,-16(fp)
811324e4:	e0fffc03 	ldbu	r3,-16(fp)
811324e8:	e13ff317 	ldw	r4,-52(fp)
811324ec:	20c7883a 	add	r3,r4,r3
811324f0:	18c002c4 	addi	r3,r3,11
811324f4:	18c00003 	ldbu	r3,0(r3)
811324f8:	1809883a 	mov	r4,r3
811324fc:	e0fffc83 	ldbu	r3,-14(fp)
81132500:	00c6303a 	nor	r3,zero,r3
81132504:	20c6703a 	and	r3,r4,r3
81132508:	1809883a 	mov	r4,r3
8113250c:	e0fff317 	ldw	r3,-52(fp)
81132510:	1885883a 	add	r2,r3,r2
81132514:	108002c4 	addi	r2,r2,11
81132518:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
8113251c:	e0bffc03 	ldbu	r2,-16(fp)
81132520:	e0fff317 	ldw	r3,-52(fp)
81132524:	1885883a 	add	r2,r3,r2
81132528:	108002c4 	addi	r2,r2,11
8113252c:	10800003 	ldbu	r2,0(r2)
81132530:	10803fcc 	andi	r2,r2,255
81132534:	1000091e 	bne	r2,zero,8113255c <OSTaskChangePrio+0x31c>
            pevent->OSEventGrp    &= ~bity_old;
81132538:	e0bff317 	ldw	r2,-52(fp)
8113253c:	10800283 	ldbu	r2,10(r2)
81132540:	1007883a 	mov	r3,r2
81132544:	e0bffc43 	ldbu	r2,-15(fp)
81132548:	0084303a 	nor	r2,zero,r2
8113254c:	1884703a 	and	r2,r3,r2
81132550:	1007883a 	mov	r3,r2
81132554:	e0bff317 	ldw	r2,-52(fp)
81132558:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
8113255c:	e0bff317 	ldw	r2,-52(fp)
81132560:	10c00283 	ldbu	r3,10(r2)
81132564:	e0bffb83 	ldbu	r2,-18(fp)
81132568:	1884b03a 	or	r2,r3,r2
8113256c:	1007883a 	mov	r3,r2
81132570:	e0bff317 	ldw	r2,-52(fp)
81132574:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
81132578:	e0bffb03 	ldbu	r2,-20(fp)
8113257c:	e0fffb03 	ldbu	r3,-20(fp)
81132580:	e13ff317 	ldw	r4,-52(fp)
81132584:	20c7883a 	add	r3,r4,r3
81132588:	18c002c4 	addi	r3,r3,11
8113258c:	19000003 	ldbu	r4,0(r3)
81132590:	e0fffbc3 	ldbu	r3,-17(fp)
81132594:	20c6b03a 	or	r3,r4,r3
81132598:	1809883a 	mov	r4,r3
8113259c:	e0fff317 	ldw	r3,-52(fp)
811325a0:	1885883a 	add	r2,r3,r2
811325a4:	108002c4 	addi	r2,r2,11
811325a8:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
811325ac:	e0bff817 	ldw	r2,-32(fp)
811325b0:	10800817 	ldw	r2,32(r2)
811325b4:	10004226 	beq	r2,zero,811326c0 <OSTaskChangePrio+0x480>
        pevents =  ptcb->OSTCBEventMultiPtr;
811325b8:	e0bff817 	ldw	r2,-32(fp)
811325bc:	10800817 	ldw	r2,32(r2)
811325c0:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
811325c4:	e0bff417 	ldw	r2,-48(fp)
811325c8:	10800017 	ldw	r2,0(r2)
811325cc:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
811325d0:	00003906 	br	811326b8 <OSTaskChangePrio+0x478>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
811325d4:	e0bffc03 	ldbu	r2,-16(fp)
811325d8:	e0fffc03 	ldbu	r3,-16(fp)
811325dc:	e13ff317 	ldw	r4,-52(fp)
811325e0:	20c7883a 	add	r3,r4,r3
811325e4:	18c002c4 	addi	r3,r3,11
811325e8:	18c00003 	ldbu	r3,0(r3)
811325ec:	1809883a 	mov	r4,r3
811325f0:	e0fffc83 	ldbu	r3,-14(fp)
811325f4:	00c6303a 	nor	r3,zero,r3
811325f8:	20c6703a 	and	r3,r4,r3
811325fc:	1809883a 	mov	r4,r3
81132600:	e0fff317 	ldw	r3,-52(fp)
81132604:	1885883a 	add	r2,r3,r2
81132608:	108002c4 	addi	r2,r2,11
8113260c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
81132610:	e0bffc03 	ldbu	r2,-16(fp)
81132614:	e0fff317 	ldw	r3,-52(fp)
81132618:	1885883a 	add	r2,r3,r2
8113261c:	108002c4 	addi	r2,r2,11
81132620:	10800003 	ldbu	r2,0(r2)
81132624:	10803fcc 	andi	r2,r2,255
81132628:	1000091e 	bne	r2,zero,81132650 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= ~bity_old;
8113262c:	e0bff317 	ldw	r2,-52(fp)
81132630:	10800283 	ldbu	r2,10(r2)
81132634:	1007883a 	mov	r3,r2
81132638:	e0bffc43 	ldbu	r2,-15(fp)
8113263c:	0084303a 	nor	r2,zero,r2
81132640:	1884703a 	and	r2,r3,r2
81132644:	1007883a 	mov	r3,r2
81132648:	e0bff317 	ldw	r2,-52(fp)
8113264c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
81132650:	e0bff317 	ldw	r2,-52(fp)
81132654:	10c00283 	ldbu	r3,10(r2)
81132658:	e0bffb83 	ldbu	r2,-18(fp)
8113265c:	1884b03a 	or	r2,r3,r2
81132660:	1007883a 	mov	r3,r2
81132664:	e0bff317 	ldw	r2,-52(fp)
81132668:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
8113266c:	e0bffb03 	ldbu	r2,-20(fp)
81132670:	e0fffb03 	ldbu	r3,-20(fp)
81132674:	e13ff317 	ldw	r4,-52(fp)
81132678:	20c7883a 	add	r3,r4,r3
8113267c:	18c002c4 	addi	r3,r3,11
81132680:	19000003 	ldbu	r4,0(r3)
81132684:	e0fffbc3 	ldbu	r3,-17(fp)
81132688:	20c6b03a 	or	r3,r4,r3
8113268c:	1809883a 	mov	r4,r3
81132690:	e0fff317 	ldw	r3,-52(fp)
81132694:	1885883a 	add	r2,r3,r2
81132698:	108002c4 	addi	r2,r2,11
8113269c:	11000005 	stb	r4,0(r2)
            pevents++;
811326a0:	e0bff417 	ldw	r2,-48(fp)
811326a4:	10800104 	addi	r2,r2,4
811326a8:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
811326ac:	e0bff417 	ldw	r2,-48(fp)
811326b0:	10800017 	ldw	r2,0(r2)
811326b4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
811326b8:	e0bff317 	ldw	r2,-52(fp)
811326bc:	103fc51e 	bne	r2,zero,811325d4 <__reset+0xfb1125d4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
811326c0:	e0bff817 	ldw	r2,-32(fp)
811326c4:	e0ffff03 	ldbu	r3,-4(fp)
811326c8:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
811326cc:	e0bff817 	ldw	r2,-32(fp)
811326d0:	e0fffb03 	ldbu	r3,-20(fp)
811326d4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
811326d8:	e0bff817 	ldw	r2,-32(fp)
811326dc:	e0fffb43 	ldbu	r3,-19(fp)
811326e0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
811326e4:	e0bff817 	ldw	r2,-32(fp)
811326e8:	e0fffb83 	ldbu	r3,-18(fp)
811326ec:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
811326f0:	e0bff817 	ldw	r2,-32(fp)
811326f4:	e0fffbc3 	ldbu	r3,-17(fp)
811326f8:	10c00d45 	stb	r3,53(r2)
811326fc:	e0bff517 	ldw	r2,-44(fp)
81132700:	e0bffa15 	stw	r2,-24(fp)
81132704:	e0bffa17 	ldw	r2,-24(fp)
81132708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8113270c:	d0a07b03 	ldbu	r2,-32276(gp)
81132710:	10803fcc 	andi	r2,r2,255
81132714:	10800058 	cmpnei	r2,r2,1
81132718:	1000011e 	bne	r2,zero,81132720 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
8113271c:	112ccd00 	call	8112ccd0 <OS_Sched>
    }
    return (OS_ERR_NONE);
81132720:	0005883a 	mov	r2,zero
}
81132724:	e037883a 	mov	sp,fp
81132728:	dfc00117 	ldw	ra,4(sp)
8113272c:	df000017 	ldw	fp,0(sp)
81132730:	dec00204 	addi	sp,sp,8
81132734:	f800283a 	ret

81132738 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
81132738:	deffee04 	addi	sp,sp,-72
8113273c:	de00012e 	bgeu	sp,et,81132744 <OSTaskCreate+0xc>
81132740:	003b68fa 	trap	3
81132744:	dfc01115 	stw	ra,68(sp)
81132748:	df001015 	stw	fp,64(sp)
8113274c:	df001004 	addi	fp,sp,64
81132750:	e13ffc15 	stw	r4,-16(fp)
81132754:	e17ffd15 	stw	r5,-12(fp)
81132758:	e1bffe15 	stw	r6,-8(fp)
8113275c:	3805883a 	mov	r2,r7
81132760:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
81132764:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
81132768:	e0bfff03 	ldbu	r2,-4(fp)
8113276c:	10800a70 	cmpltui	r2,r2,41
81132770:	1000021e 	bne	r2,zero,8113277c <OSTaskCreate+0x44>
        return (OS_ERR_PRIO_INVALID);
81132774:	00800a84 	movi	r2,42
81132778:	00005706 	br	811328d8 <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113277c:	0005303a 	rdctl	r2,status
81132780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132784:	e0fffb17 	ldw	r3,-20(fp)
81132788:	00bfff84 	movi	r2,-2
8113278c:	1884703a 	and	r2,r3,r2
81132790:	1001703a 	wrctl	status,r2
  
  return context;
81132794:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81132798:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8113279c:	d0a08b03 	ldbu	r2,-32212(gp)
811327a0:	10803fcc 	andi	r2,r2,255
811327a4:	10000626 	beq	r2,zero,811327c0 <OSTaskCreate+0x88>
811327a8:	e0bff317 	ldw	r2,-52(fp)
811327ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811327b0:	e0bff417 	ldw	r2,-48(fp)
811327b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
811327b8:	00800f04 	movi	r2,60
811327bc:	00004606 	br	811328d8 <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
811327c0:	e0ffff03 	ldbu	r3,-4(fp)
811327c4:	00a045b4 	movhi	r2,33046
811327c8:	10a05004 	addi	r2,r2,-32448
811327cc:	18c7883a 	add	r3,r3,r3
811327d0:	18c7883a 	add	r3,r3,r3
811327d4:	10c5883a 	add	r2,r2,r3
811327d8:	10800017 	ldw	r2,0(r2)
811327dc:	1000391e 	bne	r2,zero,811328c4 <OSTaskCreate+0x18c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
811327e0:	e0ffff03 	ldbu	r3,-4(fp)
811327e4:	00a045b4 	movhi	r2,33046
811327e8:	10a05004 	addi	r2,r2,-32448
811327ec:	18c7883a 	add	r3,r3,r3
811327f0:	18c7883a 	add	r3,r3,r3
811327f4:	10c5883a 	add	r2,r2,r3
811327f8:	00c00044 	movi	r3,1
811327fc:	10c00015 	stw	r3,0(r2)
81132800:	e0bff317 	ldw	r2,-52(fp)
81132804:	e0bff515 	stw	r2,-44(fp)
81132808:	e0bff517 	ldw	r2,-44(fp)
8113280c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
81132810:	000f883a 	mov	r7,zero
81132814:	e1bffe17 	ldw	r6,-8(fp)
81132818:	e17ffd17 	ldw	r5,-12(fp)
8113281c:	e13ffc17 	ldw	r4,-16(fp)
81132820:	113deb00 	call	8113deb0 <OSTaskStkInit>
81132824:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
81132828:	e0bfff03 	ldbu	r2,-4(fp)
8113282c:	d8000215 	stw	zero,8(sp)
81132830:	d8000115 	stw	zero,4(sp)
81132834:	d8000015 	stw	zero,0(sp)
81132838:	000f883a 	mov	r7,zero
8113283c:	000d883a 	mov	r6,zero
81132840:	e17ff717 	ldw	r5,-36(fp)
81132844:	1009883a 	mov	r4,r2
81132848:	112d1180 	call	8112d118 <OS_TCBInit>
8113284c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
81132850:	e0bff803 	ldbu	r2,-32(fp)
81132854:	1000061e 	bne	r2,zero,81132870 <OSTaskCreate+0x138>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
81132858:	d0a07b03 	ldbu	r2,-32276(gp)
8113285c:	10803fcc 	andi	r2,r2,255
81132860:	10800058 	cmpnei	r2,r2,1
81132864:	1000151e 	bne	r2,zero,811328bc <OSTaskCreate+0x184>
                OS_Sched();
81132868:	112ccd00 	call	8112ccd0 <OS_Sched>
8113286c:	00001306 	br	811328bc <OSTaskCreate+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132870:	0005303a 	rdctl	r2,status
81132874:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132878:	e0fffa17 	ldw	r3,-24(fp)
8113287c:	00bfff84 	movi	r2,-2
81132880:	1884703a 	and	r2,r3,r2
81132884:	1001703a 	wrctl	status,r2
  
  return context;
81132888:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8113288c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
81132890:	e0ffff03 	ldbu	r3,-4(fp)
81132894:	00a045b4 	movhi	r2,33046
81132898:	10a05004 	addi	r2,r2,-32448
8113289c:	18c7883a 	add	r3,r3,r3
811328a0:	18c7883a 	add	r3,r3,r3
811328a4:	10c5883a 	add	r2,r2,r3
811328a8:	10000015 	stw	zero,0(r2)
811328ac:	e0bff317 	ldw	r2,-52(fp)
811328b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811328b4:	e0bff617 	ldw	r2,-40(fp)
811328b8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
811328bc:	e0bff803 	ldbu	r2,-32(fp)
811328c0:	00000506 	br	811328d8 <OSTaskCreate+0x1a0>
811328c4:	e0bff317 	ldw	r2,-52(fp)
811328c8:	e0bff915 	stw	r2,-28(fp)
811328cc:	e0bff917 	ldw	r2,-28(fp)
811328d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
811328d4:	00800a04 	movi	r2,40
}
811328d8:	e037883a 	mov	sp,fp
811328dc:	dfc00117 	ldw	ra,4(sp)
811328e0:	df000017 	ldw	fp,0(sp)
811328e4:	dec00204 	addi	sp,sp,8
811328e8:	f800283a 	ret

811328ec <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
811328ec:	deffec04 	addi	sp,sp,-80
811328f0:	de00012e 	bgeu	sp,et,811328f8 <OSTaskCreateExt+0xc>
811328f4:	003b68fa 	trap	3
811328f8:	dfc01315 	stw	ra,76(sp)
811328fc:	df001215 	stw	fp,72(sp)
81132900:	df001204 	addi	fp,sp,72
81132904:	e13ffa15 	stw	r4,-24(fp)
81132908:	e17ffb15 	stw	r5,-20(fp)
8113290c:	e1bffc15 	stw	r6,-16(fp)
81132910:	3809883a 	mov	r4,r7
81132914:	e0c00217 	ldw	r3,8(fp)
81132918:	e0800617 	ldw	r2,24(fp)
8113291c:	e13ffd05 	stb	r4,-12(fp)
81132920:	e0fffe0d 	sth	r3,-8(fp)
81132924:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
81132928:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8113292c:	e0bffd03 	ldbu	r2,-12(fp)
81132930:	10800a70 	cmpltui	r2,r2,41
81132934:	1000021e 	bne	r2,zero,81132940 <OSTaskCreateExt+0x54>
        return (OS_ERR_PRIO_INVALID);
81132938:	00800a84 	movi	r2,42
8113293c:	00006106 	br	81132ac4 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132940:	0005303a 	rdctl	r2,status
81132944:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132948:	e0fff917 	ldw	r3,-28(fp)
8113294c:	00bfff84 	movi	r2,-2
81132950:	1884703a 	and	r2,r3,r2
81132954:	1001703a 	wrctl	status,r2
  
  return context;
81132958:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8113295c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81132960:	d0a08b03 	ldbu	r2,-32212(gp)
81132964:	10803fcc 	andi	r2,r2,255
81132968:	10000626 	beq	r2,zero,81132984 <OSTaskCreateExt+0x98>
8113296c:	e0bff117 	ldw	r2,-60(fp)
81132970:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132974:	e0bff217 	ldw	r2,-56(fp)
81132978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8113297c:	00800f04 	movi	r2,60
81132980:	00005006 	br	81132ac4 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
81132984:	e0fffd03 	ldbu	r3,-12(fp)
81132988:	00a045b4 	movhi	r2,33046
8113298c:	10a05004 	addi	r2,r2,-32448
81132990:	18c7883a 	add	r3,r3,r3
81132994:	18c7883a 	add	r3,r3,r3
81132998:	10c5883a 	add	r2,r2,r3
8113299c:	10800017 	ldw	r2,0(r2)
811329a0:	1000431e 	bne	r2,zero,81132ab0 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
811329a4:	e0fffd03 	ldbu	r3,-12(fp)
811329a8:	00a045b4 	movhi	r2,33046
811329ac:	10a05004 	addi	r2,r2,-32448
811329b0:	18c7883a 	add	r3,r3,r3
811329b4:	18c7883a 	add	r3,r3,r3
811329b8:	10c5883a 	add	r2,r2,r3
811329bc:	00c00044 	movi	r3,1
811329c0:	10c00015 	stw	r3,0(r2)
811329c4:	e0bff117 	ldw	r2,-60(fp)
811329c8:	e0bff315 	stw	r2,-52(fp)
811329cc:	e0bff317 	ldw	r2,-52(fp)
811329d0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
811329d4:	e0bfff0b 	ldhu	r2,-4(fp)
811329d8:	100d883a 	mov	r6,r2
811329dc:	e1400417 	ldw	r5,16(fp)
811329e0:	e1000317 	ldw	r4,12(fp)
811329e4:	11339940 	call	81133994 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
811329e8:	e0bfff0b 	ldhu	r2,-4(fp)
811329ec:	100f883a 	mov	r7,r2
811329f0:	e1bffc17 	ldw	r6,-16(fp)
811329f4:	e17ffb17 	ldw	r5,-20(fp)
811329f8:	e13ffa17 	ldw	r4,-24(fp)
811329fc:	113deb00 	call	8113deb0 <OSTaskStkInit>
81132a00:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
81132a04:	e0fffd03 	ldbu	r3,-12(fp)
81132a08:	e13ffe0b 	ldhu	r4,-8(fp)
81132a0c:	e0bfff0b 	ldhu	r2,-4(fp)
81132a10:	d8800215 	stw	r2,8(sp)
81132a14:	e0800517 	ldw	r2,20(fp)
81132a18:	d8800115 	stw	r2,4(sp)
81132a1c:	e0800417 	ldw	r2,16(fp)
81132a20:	d8800015 	stw	r2,0(sp)
81132a24:	200f883a 	mov	r7,r4
81132a28:	e1800317 	ldw	r6,12(fp)
81132a2c:	e17ff517 	ldw	r5,-44(fp)
81132a30:	1809883a 	mov	r4,r3
81132a34:	112d1180 	call	8112d118 <OS_TCBInit>
81132a38:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
81132a3c:	e0bff603 	ldbu	r2,-40(fp)
81132a40:	1000061e 	bne	r2,zero,81132a5c <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
81132a44:	d0a07b03 	ldbu	r2,-32276(gp)
81132a48:	10803fcc 	andi	r2,r2,255
81132a4c:	10800058 	cmpnei	r2,r2,1
81132a50:	1000151e 	bne	r2,zero,81132aa8 <OSTaskCreateExt+0x1bc>
                OS_Sched();
81132a54:	112ccd00 	call	8112ccd0 <OS_Sched>
81132a58:	00001306 	br	81132aa8 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132a5c:	0005303a 	rdctl	r2,status
81132a60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132a64:	e0fff817 	ldw	r3,-32(fp)
81132a68:	00bfff84 	movi	r2,-2
81132a6c:	1884703a 	and	r2,r3,r2
81132a70:	1001703a 	wrctl	status,r2
  
  return context;
81132a74:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81132a78:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
81132a7c:	e0fffd03 	ldbu	r3,-12(fp)
81132a80:	00a045b4 	movhi	r2,33046
81132a84:	10a05004 	addi	r2,r2,-32448
81132a88:	18c7883a 	add	r3,r3,r3
81132a8c:	18c7883a 	add	r3,r3,r3
81132a90:	10c5883a 	add	r2,r2,r3
81132a94:	10000015 	stw	zero,0(r2)
81132a98:	e0bff117 	ldw	r2,-60(fp)
81132a9c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132aa0:	e0bff417 	ldw	r2,-48(fp)
81132aa4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
81132aa8:	e0bff603 	ldbu	r2,-40(fp)
81132aac:	00000506 	br	81132ac4 <OSTaskCreateExt+0x1d8>
81132ab0:	e0bff117 	ldw	r2,-60(fp)
81132ab4:	e0bff715 	stw	r2,-36(fp)
81132ab8:	e0bff717 	ldw	r2,-36(fp)
81132abc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
81132ac0:	00800a04 	movi	r2,40
}
81132ac4:	e037883a 	mov	sp,fp
81132ac8:	dfc00117 	ldw	ra,4(sp)
81132acc:	df000017 	ldw	fp,0(sp)
81132ad0:	dec00204 	addi	sp,sp,8
81132ad4:	f800283a 	ret

81132ad8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
81132ad8:	defff404 	addi	sp,sp,-48
81132adc:	de00012e 	bgeu	sp,et,81132ae4 <OSTaskDel+0xc>
81132ae0:	003b68fa 	trap	3
81132ae4:	dfc00b15 	stw	ra,44(sp)
81132ae8:	df000a15 	stw	fp,40(sp)
81132aec:	df000a04 	addi	fp,sp,40
81132af0:	2005883a 	mov	r2,r4
81132af4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
81132af8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
81132afc:	d0a08b03 	ldbu	r2,-32212(gp)
81132b00:	10803fcc 	andi	r2,r2,255
81132b04:	10000226 	beq	r2,zero,81132b10 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
81132b08:	00801004 	movi	r2,64
81132b0c:	0000c006 	br	81132e10 <OSTaskDel+0x338>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
81132b10:	e0bfff03 	ldbu	r2,-4(fp)
81132b14:	10800a18 	cmpnei	r2,r2,40
81132b18:	1000021e 	bne	r2,zero,81132b24 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
81132b1c:	00800f84 	movi	r2,62
81132b20:	0000bb06 	br	81132e10 <OSTaskDel+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
81132b24:	e0bfff03 	ldbu	r2,-4(fp)
81132b28:	10800a30 	cmpltui	r2,r2,40
81132b2c:	1000051e 	bne	r2,zero,81132b44 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
81132b30:	e0bfff03 	ldbu	r2,-4(fp)
81132b34:	10803fe0 	cmpeqi	r2,r2,255
81132b38:	1000021e 	bne	r2,zero,81132b44 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
81132b3c:	00800a84 	movi	r2,42
81132b40:	0000b306 	br	81132e10 <OSTaskDel+0x338>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132b44:	0005303a 	rdctl	r2,status
81132b48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132b4c:	e0fffe17 	ldw	r3,-8(fp)
81132b50:	00bfff84 	movi	r2,-2
81132b54:	1884703a 	and	r2,r3,r2
81132b58:	1001703a 	wrctl	status,r2
  
  return context;
81132b5c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
81132b60:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
81132b64:	e0bfff03 	ldbu	r2,-4(fp)
81132b68:	10803fd8 	cmpnei	r2,r2,255
81132b6c:	1000031e 	bne	r2,zero,81132b7c <OSTaskDel+0xa4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
81132b70:	d0a08c17 	ldw	r2,-32208(gp)
81132b74:	10800c83 	ldbu	r2,50(r2)
81132b78:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81132b7c:	e0ffff03 	ldbu	r3,-4(fp)
81132b80:	00a045b4 	movhi	r2,33046
81132b84:	10a05004 	addi	r2,r2,-32448
81132b88:	18c7883a 	add	r3,r3,r3
81132b8c:	18c7883a 	add	r3,r3,r3
81132b90:	10c5883a 	add	r2,r2,r3
81132b94:	10800017 	ldw	r2,0(r2)
81132b98:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
81132b9c:	e0bff817 	ldw	r2,-32(fp)
81132ba0:	1000061e 	bne	r2,zero,81132bbc <OSTaskDel+0xe4>
81132ba4:	e0bff617 	ldw	r2,-40(fp)
81132ba8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132bac:	e0bff717 	ldw	r2,-36(fp)
81132bb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81132bb4:	008010c4 	movi	r2,67
81132bb8:	00009506 	br	81132e10 <OSTaskDel+0x338>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
81132bbc:	e0bff817 	ldw	r2,-32(fp)
81132bc0:	10800058 	cmpnei	r2,r2,1
81132bc4:	1000061e 	bne	r2,zero,81132be0 <OSTaskDel+0x108>
81132bc8:	e0bff617 	ldw	r2,-40(fp)
81132bcc:	e0bff915 	stw	r2,-28(fp)
81132bd0:	e0bff917 	ldw	r2,-28(fp)
81132bd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81132bd8:	00800f44 	movi	r2,61
81132bdc:	00008c06 	br	81132e10 <OSTaskDel+0x338>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
81132be0:	e0bff817 	ldw	r2,-32(fp)
81132be4:	10800d03 	ldbu	r2,52(r2)
81132be8:	10c03fcc 	andi	r3,r2,255
81132bec:	e0bff817 	ldw	r2,-32(fp)
81132bf0:	10800d03 	ldbu	r2,52(r2)
81132bf4:	11003fcc 	andi	r4,r2,255
81132bf8:	d0a08844 	addi	r2,gp,-32223
81132bfc:	2085883a 	add	r2,r4,r2
81132c00:	10800003 	ldbu	r2,0(r2)
81132c04:	1009883a 	mov	r4,r2
81132c08:	e0bff817 	ldw	r2,-32(fp)
81132c0c:	10800d43 	ldbu	r2,53(r2)
81132c10:	0084303a 	nor	r2,zero,r2
81132c14:	2084703a 	and	r2,r4,r2
81132c18:	1009883a 	mov	r4,r2
81132c1c:	d0a08844 	addi	r2,gp,-32223
81132c20:	1885883a 	add	r2,r3,r2
81132c24:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
81132c28:	e0bff817 	ldw	r2,-32(fp)
81132c2c:	10800d03 	ldbu	r2,52(r2)
81132c30:	10c03fcc 	andi	r3,r2,255
81132c34:	d0a08844 	addi	r2,gp,-32223
81132c38:	1885883a 	add	r2,r3,r2
81132c3c:	10800003 	ldbu	r2,0(r2)
81132c40:	10803fcc 	andi	r2,r2,255
81132c44:	1000071e 	bne	r2,zero,81132c64 <OSTaskDel+0x18c>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
81132c48:	e0bff817 	ldw	r2,-32(fp)
81132c4c:	10800d83 	ldbu	r2,54(r2)
81132c50:	0084303a 	nor	r2,zero,r2
81132c54:	1007883a 	mov	r3,r2
81132c58:	d0a08803 	ldbu	r2,-32224(gp)
81132c5c:	1884703a 	and	r2,r3,r2
81132c60:	d0a08805 	stb	r2,-32224(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
81132c64:	e0bff817 	ldw	r2,-32(fp)
81132c68:	10800717 	ldw	r2,28(r2)
81132c6c:	10000526 	beq	r2,zero,81132c84 <OSTaskDel+0x1ac>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
81132c70:	e0bff817 	ldw	r2,-32(fp)
81132c74:	10800717 	ldw	r2,28(r2)
81132c78:	100b883a 	mov	r5,r2
81132c7c:	e13ff817 	ldw	r4,-32(fp)
81132c80:	112c6240 	call	8112c624 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
81132c84:	e0bff817 	ldw	r2,-32(fp)
81132c88:	10800817 	ldw	r2,32(r2)
81132c8c:	10000526 	beq	r2,zero,81132ca4 <OSTaskDel+0x1cc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
81132c90:	e0bff817 	ldw	r2,-32(fp)
81132c94:	10800817 	ldw	r2,32(r2)
81132c98:	100b883a 	mov	r5,r2
81132c9c:	e13ff817 	ldw	r4,-32(fp)
81132ca0:	112c6e40 	call	8112c6e4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
81132ca4:	e0bff817 	ldw	r2,-32(fp)
81132ca8:	10800a17 	ldw	r2,40(r2)
81132cac:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
81132cb0:	e0bffb17 	ldw	r2,-20(fp)
81132cb4:	10000226 	beq	r2,zero,81132cc0 <OSTaskDel+0x1e8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
81132cb8:	e13ffb17 	ldw	r4,-20(fp)
81132cbc:	112ecbc0 	call	8112ecbc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
81132cc0:	e0bff817 	ldw	r2,-32(fp)
81132cc4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
81132cc8:	e0bff817 	ldw	r2,-32(fp)
81132ccc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
81132cd0:	e0bff817 	ldw	r2,-32(fp)
81132cd4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
81132cd8:	d0a07903 	ldbu	r2,-32284(gp)
81132cdc:	10803fcc 	andi	r2,r2,255
81132ce0:	10803fe0 	cmpeqi	r2,r2,255
81132ce4:	1000031e 	bne	r2,zero,81132cf4 <OSTaskDel+0x21c>
        OSLockNesting++;
81132ce8:	d0a07903 	ldbu	r2,-32284(gp)
81132cec:	10800044 	addi	r2,r2,1
81132cf0:	d0a07905 	stb	r2,-32284(gp)
81132cf4:	e0bff617 	ldw	r2,-40(fp)
81132cf8:	e0bffd15 	stw	r2,-12(fp)
81132cfc:	e0bffd17 	ldw	r2,-12(fp)
81132d00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
81132d04:	112c1ec0 	call	8112c1ec <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132d08:	0005303a 	rdctl	r2,status
81132d0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132d10:	e0fffa17 	ldw	r3,-24(fp)
81132d14:	00bfff84 	movi	r2,-2
81132d18:	1884703a 	and	r2,r3,r2
81132d1c:	1001703a 	wrctl	status,r2
  
  return context;
81132d20:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
81132d24:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
81132d28:	d0a07903 	ldbu	r2,-32284(gp)
81132d2c:	10803fcc 	andi	r2,r2,255
81132d30:	10000326 	beq	r2,zero,81132d40 <OSTaskDel+0x268>
        OSLockNesting--;
81132d34:	d0a07903 	ldbu	r2,-32284(gp)
81132d38:	10bfffc4 	addi	r2,r2,-1
81132d3c:	d0a07905 	stb	r2,-32284(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
81132d40:	e13ff817 	ldw	r4,-32(fp)
81132d44:	113e0400 	call	8113e040 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
81132d48:	d0a08443 	ldbu	r2,-32239(gp)
81132d4c:	10bfffc4 	addi	r2,r2,-1
81132d50:	d0a08445 	stb	r2,-32239(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
81132d54:	e0ffff03 	ldbu	r3,-4(fp)
81132d58:	00a045b4 	movhi	r2,33046
81132d5c:	10a05004 	addi	r2,r2,-32448
81132d60:	18c7883a 	add	r3,r3,r3
81132d64:	18c7883a 	add	r3,r3,r3
81132d68:	10c5883a 	add	r2,r2,r3
81132d6c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
81132d70:	e0bff817 	ldw	r2,-32(fp)
81132d74:	10800617 	ldw	r2,24(r2)
81132d78:	1000071e 	bne	r2,zero,81132d98 <OSTaskDel+0x2c0>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
81132d7c:	e0bff817 	ldw	r2,-32(fp)
81132d80:	10800517 	ldw	r2,20(r2)
81132d84:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
81132d88:	e0bff817 	ldw	r2,-32(fp)
81132d8c:	10800517 	ldw	r2,20(r2)
81132d90:	d0a07e15 	stw	r2,-32264(gp)
81132d94:	00000a06 	br	81132dc0 <OSTaskDel+0x2e8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
81132d98:	e0bff817 	ldw	r2,-32(fp)
81132d9c:	10800617 	ldw	r2,24(r2)
81132da0:	e0fff817 	ldw	r3,-32(fp)
81132da4:	18c00517 	ldw	r3,20(r3)
81132da8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
81132dac:	e0bff817 	ldw	r2,-32(fp)
81132db0:	10800517 	ldw	r2,20(r2)
81132db4:	e0fff817 	ldw	r3,-32(fp)
81132db8:	18c00617 	ldw	r3,24(r3)
81132dbc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
81132dc0:	d0e08317 	ldw	r3,-32244(gp)
81132dc4:	e0bff817 	ldw	r2,-32(fp)
81132dc8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
81132dcc:	e0bff817 	ldw	r2,-32(fp)
81132dd0:	d0a08315 	stw	r2,-32244(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
81132dd4:	e0bff817 	ldw	r2,-32(fp)
81132dd8:	00c00fc4 	movi	r3,63
81132ddc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
81132de0:	e0bff817 	ldw	r2,-32(fp)
81132de4:	10001345 	stb	zero,77(r2)
81132de8:	e0bff617 	ldw	r2,-40(fp)
81132dec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132df0:	e0bffc17 	ldw	r2,-16(fp)
81132df4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
81132df8:	d0a07b03 	ldbu	r2,-32276(gp)
81132dfc:	10803fcc 	andi	r2,r2,255
81132e00:	10800058 	cmpnei	r2,r2,1
81132e04:	1000011e 	bne	r2,zero,81132e0c <OSTaskDel+0x334>
        OS_Sched();                                     /* Find new highest priority task              */
81132e08:	112ccd00 	call	8112ccd0 <OS_Sched>
    }
    return (OS_ERR_NONE);
81132e0c:	0005883a 	mov	r2,zero
}
81132e10:	e037883a 	mov	sp,fp
81132e14:	dfc00117 	ldw	ra,4(sp)
81132e18:	df000017 	ldw	fp,0(sp)
81132e1c:	dec00204 	addi	sp,sp,8
81132e20:	f800283a 	ret

81132e24 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
81132e24:	defff504 	addi	sp,sp,-44
81132e28:	de00012e 	bgeu	sp,et,81132e30 <OSTaskDelReq+0xc>
81132e2c:	003b68fa 	trap	3
81132e30:	df000a15 	stw	fp,40(sp)
81132e34:	df000a04 	addi	fp,sp,40
81132e38:	2005883a 	mov	r2,r4
81132e3c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81132e40:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
81132e44:	e0bfff03 	ldbu	r2,-4(fp)
81132e48:	10800a18 	cmpnei	r2,r2,40
81132e4c:	1000021e 	bne	r2,zero,81132e58 <OSTaskDelReq+0x34>
        return (OS_ERR_TASK_DEL_IDLE);
81132e50:	00800f84 	movi	r2,62
81132e54:	00004506 	br	81132f6c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
81132e58:	e0bfff03 	ldbu	r2,-4(fp)
81132e5c:	10800a30 	cmpltui	r2,r2,40
81132e60:	1000051e 	bne	r2,zero,81132e78 <OSTaskDelReq+0x54>
        if (prio != OS_PRIO_SELF) {
81132e64:	e0bfff03 	ldbu	r2,-4(fp)
81132e68:	10803fe0 	cmpeqi	r2,r2,255
81132e6c:	1000021e 	bne	r2,zero,81132e78 <OSTaskDelReq+0x54>
            return (OS_ERR_PRIO_INVALID);
81132e70:	00800a84 	movi	r2,42
81132e74:	00003d06 	br	81132f6c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
81132e78:	e0bfff03 	ldbu	r2,-4(fp)
81132e7c:	10803fd8 	cmpnei	r2,r2,255
81132e80:	1000111e 	bne	r2,zero,81132ec8 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132e84:	0005303a 	rdctl	r2,status
81132e88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132e8c:	e0fff917 	ldw	r3,-28(fp)
81132e90:	00bfff84 	movi	r2,-2
81132e94:	1884703a 	and	r2,r3,r2
81132e98:	1001703a 	wrctl	status,r2
  
  return context;
81132e9c:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
81132ea0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
81132ea4:	d0a08c17 	ldw	r2,-32208(gp)
81132ea8:	10800dc3 	ldbu	r2,55(r2)
81132eac:	e0bff805 	stb	r2,-32(fp)
81132eb0:	e0bff617 	ldw	r2,-40(fp)
81132eb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132eb8:	e0bffe17 	ldw	r2,-8(fp)
81132ebc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
81132ec0:	e0bff803 	ldbu	r2,-32(fp)
81132ec4:	00002906 	br	81132f6c <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132ec8:	0005303a 	rdctl	r2,status
81132ecc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132ed0:	e0fff717 	ldw	r3,-36(fp)
81132ed4:	00bfff84 	movi	r2,-2
81132ed8:	1884703a 	and	r2,r3,r2
81132edc:	1001703a 	wrctl	status,r2
  
  return context;
81132ee0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
81132ee4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81132ee8:	e0ffff03 	ldbu	r3,-4(fp)
81132eec:	00a045b4 	movhi	r2,33046
81132ef0:	10a05004 	addi	r2,r2,-32448
81132ef4:	18c7883a 	add	r3,r3,r3
81132ef8:	18c7883a 	add	r3,r3,r3
81132efc:	10c5883a 	add	r2,r2,r3
81132f00:	10800017 	ldw	r2,0(r2)
81132f04:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
81132f08:	e0bffb17 	ldw	r2,-20(fp)
81132f0c:	1000061e 	bne	r2,zero,81132f28 <OSTaskDelReq+0x104>
81132f10:	e0bff617 	ldw	r2,-40(fp)
81132f14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132f18:	e0bffa17 	ldw	r2,-24(fp)
81132f1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
81132f20:	008010c4 	movi	r2,67
81132f24:	00001106 	br	81132f6c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
81132f28:	e0bffb17 	ldw	r2,-20(fp)
81132f2c:	10800058 	cmpnei	r2,r2,1
81132f30:	1000061e 	bne	r2,zero,81132f4c <OSTaskDelReq+0x128>
81132f34:	e0bff617 	ldw	r2,-40(fp)
81132f38:	e0bffc15 	stw	r2,-16(fp)
81132f3c:	e0bffc17 	ldw	r2,-16(fp)
81132f40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81132f44:	00800f44 	movi	r2,61
81132f48:	00000806 	br	81132f6c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
81132f4c:	e0bffb17 	ldw	r2,-20(fp)
81132f50:	00c00fc4 	movi	r3,63
81132f54:	10c00dc5 	stb	r3,55(r2)
81132f58:	e0bff617 	ldw	r2,-40(fp)
81132f5c:	e0bffd15 	stw	r2,-12(fp)
81132f60:	e0bffd17 	ldw	r2,-12(fp)
81132f64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81132f68:	0005883a 	mov	r2,zero
}
81132f6c:	e037883a 	mov	sp,fp
81132f70:	df000017 	ldw	fp,0(sp)
81132f74:	dec00104 	addi	sp,sp,4
81132f78:	f800283a 	ret

81132f7c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
81132f7c:	defff404 	addi	sp,sp,-48
81132f80:	de00012e 	bgeu	sp,et,81132f88 <OSTaskNameGet+0xc>
81132f84:	003b68fa 	trap	3
81132f88:	dfc00b15 	stw	ra,44(sp)
81132f8c:	df000a15 	stw	fp,40(sp)
81132f90:	df000a04 	addi	fp,sp,40
81132f94:	2005883a 	mov	r2,r4
81132f98:	e17ffe15 	stw	r5,-8(fp)
81132f9c:	e1bfff15 	stw	r6,-4(fp)
81132fa0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
81132fa4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
81132fa8:	e0bfff17 	ldw	r2,-4(fp)
81132fac:	1000021e 	bne	r2,zero,81132fb8 <OSTaskNameGet+0x3c>
        return (0);
81132fb0:	0005883a 	mov	r2,zero
81132fb4:	00005406 	br	81133108 <OSTaskNameGet+0x18c>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
81132fb8:	e0bffd03 	ldbu	r2,-12(fp)
81132fbc:	10800a70 	cmpltui	r2,r2,41
81132fc0:	1000081e 	bne	r2,zero,81132fe4 <OSTaskNameGet+0x68>
        if (prio != OS_PRIO_SELF) {
81132fc4:	e0bffd03 	ldbu	r2,-12(fp)
81132fc8:	10803fe0 	cmpeqi	r2,r2,255
81132fcc:	1000051e 	bne	r2,zero,81132fe4 <OSTaskNameGet+0x68>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
81132fd0:	e0bfff17 	ldw	r2,-4(fp)
81132fd4:	00c00a84 	movi	r3,42
81132fd8:	10c00005 	stb	r3,0(r2)
            return (0);
81132fdc:	0005883a 	mov	r2,zero
81132fe0:	00004906 	br	81133108 <OSTaskNameGet+0x18c>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
81132fe4:	e0bffe17 	ldw	r2,-8(fp)
81132fe8:	1000051e 	bne	r2,zero,81133000 <OSTaskNameGet+0x84>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
81132fec:	e0bfff17 	ldw	r2,-4(fp)
81132ff0:	00c00304 	movi	r3,12
81132ff4:	10c00005 	stb	r3,0(r2)
        return (0);
81132ff8:	0005883a 	mov	r2,zero
81132ffc:	00004206 	br	81133108 <OSTaskNameGet+0x18c>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
81133000:	d0a08b03 	ldbu	r2,-32212(gp)
81133004:	10803fcc 	andi	r2,r2,255
81133008:	10000526 	beq	r2,zero,81133020 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
8113300c:	e0bfff17 	ldw	r2,-4(fp)
81133010:	00c00444 	movi	r3,17
81133014:	10c00005 	stb	r3,0(r2)
        return (0);
81133018:	0005883a 	mov	r2,zero
8113301c:	00003a06 	br	81133108 <OSTaskNameGet+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133020:	0005303a 	rdctl	r2,status
81133024:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133028:	e0fffc17 	ldw	r3,-16(fp)
8113302c:	00bfff84 	movi	r2,-2
81133030:	1884703a 	and	r2,r3,r2
81133034:	1001703a 	wrctl	status,r2
  
  return context;
81133038:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8113303c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
81133040:	e0bffd03 	ldbu	r2,-12(fp)
81133044:	10803fd8 	cmpnei	r2,r2,255
81133048:	1000031e 	bne	r2,zero,81133058 <OSTaskNameGet+0xdc>
        prio = OSTCBCur->OSTCBPrio;
8113304c:	d0a08c17 	ldw	r2,-32208(gp)
81133050:	10800c83 	ldbu	r2,50(r2)
81133054:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81133058:	e0fffd03 	ldbu	r3,-12(fp)
8113305c:	00a045b4 	movhi	r2,33046
81133060:	10a05004 	addi	r2,r2,-32448
81133064:	18c7883a 	add	r3,r3,r3
81133068:	18c7883a 	add	r3,r3,r3
8113306c:	10c5883a 	add	r2,r2,r3
81133070:	10800017 	ldw	r2,0(r2)
81133074:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
81133078:	e0bff817 	ldw	r2,-32(fp)
8113307c:	1000091e 	bne	r2,zero,811330a4 <OSTaskNameGet+0x128>
81133080:	e0bff617 	ldw	r2,-40(fp)
81133084:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133088:	e0bff717 	ldw	r2,-36(fp)
8113308c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
81133090:	e0bfff17 	ldw	r2,-4(fp)
81133094:	00c010c4 	movi	r3,67
81133098:	10c00005 	stb	r3,0(r2)
        return (0);
8113309c:	0005883a 	mov	r2,zero
811330a0:	00001906 	br	81133108 <OSTaskNameGet+0x18c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
811330a4:	e0bff817 	ldw	r2,-32(fp)
811330a8:	10800058 	cmpnei	r2,r2,1
811330ac:	1000091e 	bne	r2,zero,811330d4 <OSTaskNameGet+0x158>
811330b0:	e0bff617 	ldw	r2,-40(fp)
811330b4:	e0bff915 	stw	r2,-28(fp)
811330b8:	e0bff917 	ldw	r2,-28(fp)
811330bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
811330c0:	e0bfff17 	ldw	r2,-4(fp)
811330c4:	00c010c4 	movi	r3,67
811330c8:	10c00005 	stb	r3,0(r2)
        return (0);
811330cc:	0005883a 	mov	r2,zero
811330d0:	00000d06 	br	81133108 <OSTaskNameGet+0x18c>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
811330d4:	e0bff817 	ldw	r2,-32(fp)
811330d8:	10801304 	addi	r2,r2,76
811330dc:	100b883a 	mov	r5,r2
811330e0:	e13ffe17 	ldw	r4,-8(fp)
811330e4:	112ce240 	call	8112ce24 <OS_StrCopy>
811330e8:	e0bffb05 	stb	r2,-20(fp)
811330ec:	e0bff617 	ldw	r2,-40(fp)
811330f0:	e0bffa15 	stw	r2,-24(fp)
811330f4:	e0bffa17 	ldw	r2,-24(fp)
811330f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811330fc:	e0bfff17 	ldw	r2,-4(fp)
81133100:	10000005 	stb	zero,0(r2)
    return (len);
81133104:	e0bffb03 	ldbu	r2,-20(fp)
}
81133108:	e037883a 	mov	sp,fp
8113310c:	dfc00117 	ldw	ra,4(sp)
81133110:	df000017 	ldw	fp,0(sp)
81133114:	dec00204 	addi	sp,sp,8
81133118:	f800283a 	ret

8113311c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
8113311c:	defff304 	addi	sp,sp,-52
81133120:	de00012e 	bgeu	sp,et,81133128 <OSTaskNameSet+0xc>
81133124:	003b68fa 	trap	3
81133128:	dfc00c15 	stw	ra,48(sp)
8113312c:	df000b15 	stw	fp,44(sp)
81133130:	df000b04 	addi	fp,sp,44
81133134:	2005883a 	mov	r2,r4
81133138:	e17ffe15 	stw	r5,-8(fp)
8113313c:	e1bfff15 	stw	r6,-4(fp)
81133140:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
81133144:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
81133148:	e0bfff17 	ldw	r2,-4(fp)
8113314c:	10005c26 	beq	r2,zero,811332c0 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
81133150:	e0bffd03 	ldbu	r2,-12(fp)
81133154:	10800a70 	cmpltui	r2,r2,41
81133158:	1000071e 	bne	r2,zero,81133178 <OSTaskNameSet+0x5c>
        if (prio != OS_PRIO_SELF) {
8113315c:	e0bffd03 	ldbu	r2,-12(fp)
81133160:	10803fe0 	cmpeqi	r2,r2,255
81133164:	1000041e 	bne	r2,zero,81133178 <OSTaskNameSet+0x5c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
81133168:	e0bfff17 	ldw	r2,-4(fp)
8113316c:	00c00a84 	movi	r3,42
81133170:	10c00005 	stb	r3,0(r2)
            return;
81133174:	00005306 	br	811332c4 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
81133178:	e0bffe17 	ldw	r2,-8(fp)
8113317c:	1000041e 	bne	r2,zero,81133190 <OSTaskNameSet+0x74>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
81133180:	e0bfff17 	ldw	r2,-4(fp)
81133184:	00c00304 	movi	r3,12
81133188:	10c00005 	stb	r3,0(r2)
        return;
8113318c:	00004d06 	br	811332c4 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
81133190:	d0a08b03 	ldbu	r2,-32212(gp)
81133194:	10803fcc 	andi	r2,r2,255
81133198:	10000426 	beq	r2,zero,811331ac <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
8113319c:	e0bfff17 	ldw	r2,-4(fp)
811331a0:	00c00484 	movi	r3,18
811331a4:	10c00005 	stb	r3,0(r2)
        return;
811331a8:	00004606 	br	811332c4 <OSTaskNameSet+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811331ac:	0005303a 	rdctl	r2,status
811331b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811331b4:	e0fffc17 	ldw	r3,-16(fp)
811331b8:	00bfff84 	movi	r2,-2
811331bc:	1884703a 	and	r2,r3,r2
811331c0:	1001703a 	wrctl	status,r2
  
  return context;
811331c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811331c8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
811331cc:	e0bffd03 	ldbu	r2,-12(fp)
811331d0:	10803fd8 	cmpnei	r2,r2,255
811331d4:	1000031e 	bne	r2,zero,811331e4 <OSTaskNameSet+0xc8>
        prio = OSTCBCur->OSTCBPrio;
811331d8:	d0a08c17 	ldw	r2,-32208(gp)
811331dc:	10800c83 	ldbu	r2,50(r2)
811331e0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811331e4:	e0fffd03 	ldbu	r3,-12(fp)
811331e8:	00a045b4 	movhi	r2,33046
811331ec:	10a05004 	addi	r2,r2,-32448
811331f0:	18c7883a 	add	r3,r3,r3
811331f4:	18c7883a 	add	r3,r3,r3
811331f8:	10c5883a 	add	r2,r2,r3
811331fc:	10800017 	ldw	r2,0(r2)
81133200:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
81133204:	e0bff717 	ldw	r2,-36(fp)
81133208:	1000081e 	bne	r2,zero,8113322c <OSTaskNameSet+0x110>
8113320c:	e0bff517 	ldw	r2,-44(fp)
81133210:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133214:	e0bff617 	ldw	r2,-40(fp)
81133218:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
8113321c:	e0bfff17 	ldw	r2,-4(fp)
81133220:	00c010c4 	movi	r3,67
81133224:	10c00005 	stb	r3,0(r2)
        return;
81133228:	00002606 	br	811332c4 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
8113322c:	e0bff717 	ldw	r2,-36(fp)
81133230:	10800058 	cmpnei	r2,r2,1
81133234:	1000081e 	bne	r2,zero,81133258 <OSTaskNameSet+0x13c>
81133238:	e0bff517 	ldw	r2,-44(fp)
8113323c:	e0bff815 	stw	r2,-32(fp)
81133240:	e0bff817 	ldw	r2,-32(fp)
81133244:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
81133248:	e0bfff17 	ldw	r2,-4(fp)
8113324c:	00c010c4 	movi	r3,67
81133250:	10c00005 	stb	r3,0(r2)
        return;
81133254:	00001b06 	br	811332c4 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
81133258:	e13ffe17 	ldw	r4,-8(fp)
8113325c:	112cea00 	call	8112cea0 <OS_StrLen>
81133260:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
81133264:	e0bffa03 	ldbu	r2,-24(fp)
81133268:	10800830 	cmpltui	r2,r2,32
8113326c:	1000081e 	bne	r2,zero,81133290 <OSTaskNameSet+0x174>
81133270:	e0bff517 	ldw	r2,-44(fp)
81133274:	e0bff915 	stw	r2,-28(fp)
81133278:	e0bff917 	ldw	r2,-28(fp)
8113327c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
81133280:	e0bfff17 	ldw	r2,-4(fp)
81133284:	00c01044 	movi	r3,65
81133288:	10c00005 	stb	r3,0(r2)
        return;
8113328c:	00000d06 	br	811332c4 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
81133290:	e0bff717 	ldw	r2,-36(fp)
81133294:	10801304 	addi	r2,r2,76
81133298:	e17ffe17 	ldw	r5,-8(fp)
8113329c:	1009883a 	mov	r4,r2
811332a0:	112ce240 	call	8112ce24 <OS_StrCopy>
811332a4:	e0bff517 	ldw	r2,-44(fp)
811332a8:	e0bffb15 	stw	r2,-20(fp)
811332ac:	e0bffb17 	ldw	r2,-20(fp)
811332b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811332b4:	e0bfff17 	ldw	r2,-4(fp)
811332b8:	10000005 	stb	zero,0(r2)
811332bc:	00000106 	br	811332c4 <OSTaskNameSet+0x1a8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
811332c0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
811332c4:	e037883a 	mov	sp,fp
811332c8:	dfc00117 	ldw	ra,4(sp)
811332cc:	df000017 	ldw	fp,0(sp)
811332d0:	dec00204 	addi	sp,sp,8
811332d4:	f800283a 	ret

811332d8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
811332d8:	defff404 	addi	sp,sp,-48
811332dc:	de00012e 	bgeu	sp,et,811332e4 <OSTaskResume+0xc>
811332e0:	003b68fa 	trap	3
811332e4:	dfc00b15 	stw	ra,44(sp)
811332e8:	df000a15 	stw	fp,40(sp)
811332ec:	df000a04 	addi	fp,sp,40
811332f0:	2005883a 	mov	r2,r4
811332f4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
811332f8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
811332fc:	e0bfff03 	ldbu	r2,-4(fp)
81133300:	10800a30 	cmpltui	r2,r2,40
81133304:	1000021e 	bne	r2,zero,81133310 <OSTaskResume+0x38>
        return (OS_ERR_PRIO_INVALID);
81133308:	00800a84 	movi	r2,42
8113330c:	00006406 	br	811334a0 <OSTaskResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133310:	0005303a 	rdctl	r2,status
81133314:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133318:	e0fffe17 	ldw	r3,-8(fp)
8113331c:	00bfff84 	movi	r2,-2
81133320:	1884703a 	and	r2,r3,r2
81133324:	1001703a 	wrctl	status,r2
  
  return context;
81133328:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8113332c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81133330:	e0ffff03 	ldbu	r3,-4(fp)
81133334:	00a045b4 	movhi	r2,33046
81133338:	10a05004 	addi	r2,r2,-32448
8113333c:	18c7883a 	add	r3,r3,r3
81133340:	18c7883a 	add	r3,r3,r3
81133344:	10c5883a 	add	r2,r2,r3
81133348:	10800017 	ldw	r2,0(r2)
8113334c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
81133350:	e0bff817 	ldw	r2,-32(fp)
81133354:	1000061e 	bne	r2,zero,81133370 <OSTaskResume+0x98>
81133358:	e0bff617 	ldw	r2,-40(fp)
8113335c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133360:	e0bff717 	ldw	r2,-36(fp)
81133364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
81133368:	00801184 	movi	r2,70
8113336c:	00004c06 	br	811334a0 <OSTaskResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
81133370:	e0bff817 	ldw	r2,-32(fp)
81133374:	10800058 	cmpnei	r2,r2,1
81133378:	1000061e 	bne	r2,zero,81133394 <OSTaskResume+0xbc>
8113337c:	e0bff617 	ldw	r2,-40(fp)
81133380:	e0bff915 	stw	r2,-28(fp)
81133384:	e0bff917 	ldw	r2,-28(fp)
81133388:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8113338c:	008010c4 	movi	r2,67
81133390:	00004306 	br	811334a0 <OSTaskResume+0x1c8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
81133394:	e0bff817 	ldw	r2,-32(fp)
81133398:	10800c03 	ldbu	r2,48(r2)
8113339c:	10803fcc 	andi	r2,r2,255
811333a0:	1080020c 	andi	r2,r2,8
811333a4:	10003926 	beq	r2,zero,8113348c <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
811333a8:	e0bff817 	ldw	r2,-32(fp)
811333ac:	10c00c03 	ldbu	r3,48(r2)
811333b0:	00bffdc4 	movi	r2,-9
811333b4:	1884703a 	and	r2,r3,r2
811333b8:	1007883a 	mov	r3,r2
811333bc:	e0bff817 	ldw	r2,-32(fp)
811333c0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
811333c4:	e0bff817 	ldw	r2,-32(fp)
811333c8:	10800c03 	ldbu	r2,48(r2)
811333cc:	10803fcc 	andi	r2,r2,255
811333d0:	1000281e 	bne	r2,zero,81133474 <OSTaskResume+0x19c>
            if (ptcb->OSTCBDly == 0) {
811333d4:	e0bff817 	ldw	r2,-32(fp)
811333d8:	10800b8b 	ldhu	r2,46(r2)
811333dc:	10bfffcc 	andi	r2,r2,65535
811333e0:	10001f1e 	bne	r2,zero,81133460 <OSTaskResume+0x188>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
811333e4:	e0bff817 	ldw	r2,-32(fp)
811333e8:	10c00d83 	ldbu	r3,54(r2)
811333ec:	d0a08803 	ldbu	r2,-32224(gp)
811333f0:	1884b03a 	or	r2,r3,r2
811333f4:	d0a08805 	stb	r2,-32224(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811333f8:	e0bff817 	ldw	r2,-32(fp)
811333fc:	10800d03 	ldbu	r2,52(r2)
81133400:	10c03fcc 	andi	r3,r2,255
81133404:	e0bff817 	ldw	r2,-32(fp)
81133408:	10800d03 	ldbu	r2,52(r2)
8113340c:	11003fcc 	andi	r4,r2,255
81133410:	d0a08844 	addi	r2,gp,-32223
81133414:	2085883a 	add	r2,r4,r2
81133418:	11000003 	ldbu	r4,0(r2)
8113341c:	e0bff817 	ldw	r2,-32(fp)
81133420:	10800d43 	ldbu	r2,53(r2)
81133424:	2084b03a 	or	r2,r4,r2
81133428:	1009883a 	mov	r4,r2
8113342c:	d0a08844 	addi	r2,gp,-32223
81133430:	1885883a 	add	r2,r3,r2
81133434:	11000005 	stb	r4,0(r2)
81133438:	e0bff617 	ldw	r2,-40(fp)
8113343c:	e0bffa15 	stw	r2,-24(fp)
81133440:	e0bffa17 	ldw	r2,-24(fp)
81133444:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
81133448:	d0a07b03 	ldbu	r2,-32276(gp)
8113344c:	10803fcc 	andi	r2,r2,255
81133450:	10800058 	cmpnei	r2,r2,1
81133454:	10000b1e 	bne	r2,zero,81133484 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
81133458:	112ccd00 	call	8112ccd0 <OS_Sched>
8113345c:	00000906 	br	81133484 <OSTaskResume+0x1ac>
81133460:	e0bff617 	ldw	r2,-40(fp)
81133464:	e0bffb15 	stw	r2,-20(fp)
81133468:	e0bffb17 	ldw	r2,-20(fp)
8113346c:	1001703a 	wrctl	status,r2
81133470:	00000406 	br	81133484 <OSTaskResume+0x1ac>
81133474:	e0bff617 	ldw	r2,-40(fp)
81133478:	e0bffc15 	stw	r2,-16(fp)
8113347c:	e0bffc17 	ldw	r2,-16(fp)
81133480:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
81133484:	0005883a 	mov	r2,zero
81133488:	00000506 	br	811334a0 <OSTaskResume+0x1c8>
8113348c:	e0bff617 	ldw	r2,-40(fp)
81133490:	e0bffd15 	stw	r2,-12(fp)
81133494:	e0bffd17 	ldw	r2,-12(fp)
81133498:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
8113349c:	00801104 	movi	r2,68
}
811334a0:	e037883a 	mov	sp,fp
811334a4:	dfc00117 	ldw	ra,4(sp)
811334a8:	df000017 	ldw	fp,0(sp)
811334ac:	dec00204 	addi	sp,sp,8
811334b0:	f800283a 	ret

811334b4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
811334b4:	defff304 	addi	sp,sp,-52
811334b8:	de00012e 	bgeu	sp,et,811334c0 <OSTaskStkChk+0xc>
811334bc:	003b68fa 	trap	3
811334c0:	df000c15 	stw	fp,48(sp)
811334c4:	df000c04 	addi	fp,sp,48
811334c8:	2005883a 	mov	r2,r4
811334cc:	e17fff15 	stw	r5,-4(fp)
811334d0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811334d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
811334d8:	e0bffe03 	ldbu	r2,-8(fp)
811334dc:	10800a70 	cmpltui	r2,r2,41
811334e0:	1000051e 	bne	r2,zero,811334f8 <OSTaskStkChk+0x44>
        if (prio != OS_PRIO_SELF) {
811334e4:	e0bffe03 	ldbu	r2,-8(fp)
811334e8:	10803fe0 	cmpeqi	r2,r2,255
811334ec:	1000021e 	bne	r2,zero,811334f8 <OSTaskStkChk+0x44>
            return (OS_ERR_PRIO_INVALID);
811334f0:	00800a84 	movi	r2,42
811334f4:	00005d06 	br	8113366c <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
811334f8:	e0bfff17 	ldw	r2,-4(fp)
811334fc:	1000021e 	bne	r2,zero,81133508 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
81133500:	00800244 	movi	r2,9
81133504:	00005906 	br	8113366c <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
81133508:	e0bfff17 	ldw	r2,-4(fp)
8113350c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
81133510:	e0bfff17 	ldw	r2,-4(fp)
81133514:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133518:	0005303a 	rdctl	r2,status
8113351c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133520:	e0fffd17 	ldw	r3,-12(fp)
81133524:	00bfff84 	movi	r2,-2
81133528:	1884703a 	and	r2,r3,r2
8113352c:	1001703a 	wrctl	status,r2
  
  return context;
81133530:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
81133534:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
81133538:	e0bffe03 	ldbu	r2,-8(fp)
8113353c:	10803fd8 	cmpnei	r2,r2,255
81133540:	1000031e 	bne	r2,zero,81133550 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
81133544:	d0a08c17 	ldw	r2,-32208(gp)
81133548:	10800c83 	ldbu	r2,50(r2)
8113354c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81133550:	e0fffe03 	ldbu	r3,-8(fp)
81133554:	00a045b4 	movhi	r2,33046
81133558:	10a05004 	addi	r2,r2,-32448
8113355c:	18c7883a 	add	r3,r3,r3
81133560:	18c7883a 	add	r3,r3,r3
81133564:	10c5883a 	add	r2,r2,r3
81133568:	10800017 	ldw	r2,0(r2)
8113356c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
81133570:	e0bff817 	ldw	r2,-32(fp)
81133574:	1000061e 	bne	r2,zero,81133590 <OSTaskStkChk+0xdc>
81133578:	e0bff617 	ldw	r2,-40(fp)
8113357c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133580:	e0bff717 	ldw	r2,-36(fp)
81133584:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81133588:	008010c4 	movi	r2,67
8113358c:	00003706 	br	8113366c <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
81133590:	e0bff817 	ldw	r2,-32(fp)
81133594:	10800058 	cmpnei	r2,r2,1
81133598:	1000061e 	bne	r2,zero,811335b4 <OSTaskStkChk+0x100>
8113359c:	e0bff617 	ldw	r2,-40(fp)
811335a0:	e0bff915 	stw	r2,-28(fp)
811335a4:	e0bff917 	ldw	r2,-28(fp)
811335a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811335ac:	008010c4 	movi	r2,67
811335b0:	00002e06 	br	8113366c <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
811335b4:	e0bff817 	ldw	r2,-32(fp)
811335b8:	1080040b 	ldhu	r2,16(r2)
811335bc:	10bfffcc 	andi	r2,r2,65535
811335c0:	1080004c 	andi	r2,r2,1
811335c4:	1000061e 	bne	r2,zero,811335e0 <OSTaskStkChk+0x12c>
811335c8:	e0bff617 	ldw	r2,-40(fp)
811335cc:	e0bffa15 	stw	r2,-24(fp)
811335d0:	e0bffa17 	ldw	r2,-24(fp)
811335d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
811335d8:	00801144 	movi	r2,69
811335dc:	00002306 	br	8113366c <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
811335e0:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
811335e4:	e0bff817 	ldw	r2,-32(fp)
811335e8:	10800317 	ldw	r2,12(r2)
811335ec:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
811335f0:	e0bff817 	ldw	r2,-32(fp)
811335f4:	10800217 	ldw	r2,8(r2)
811335f8:	e0bff415 	stw	r2,-48(fp)
811335fc:	e0bff617 	ldw	r2,-40(fp)
81133600:	e0bffb15 	stw	r2,-20(fp)
81133604:	e0bffb17 	ldw	r2,-20(fp)
81133608:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8113360c:	00000306 	br	8113361c <OSTaskStkChk+0x168>
        nfree++;
81133610:	e0bff517 	ldw	r2,-44(fp)
81133614:	10800044 	addi	r2,r2,1
81133618:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8113361c:	e0bff417 	ldw	r2,-48(fp)
81133620:	10c00104 	addi	r3,r2,4
81133624:	e0fff415 	stw	r3,-48(fp)
81133628:	10800017 	ldw	r2,0(r2)
8113362c:	103ff826 	beq	r2,zero,81133610 <__reset+0xfb113610>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
81133630:	e0bff517 	ldw	r2,-44(fp)
81133634:	1085883a 	add	r2,r2,r2
81133638:	1085883a 	add	r2,r2,r2
8113363c:	1007883a 	mov	r3,r2
81133640:	e0bfff17 	ldw	r2,-4(fp)
81133644:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
81133648:	e0fffc17 	ldw	r3,-16(fp)
8113364c:	e0bff517 	ldw	r2,-44(fp)
81133650:	1885c83a 	sub	r2,r3,r2
81133654:	1085883a 	add	r2,r2,r2
81133658:	1085883a 	add	r2,r2,r2
8113365c:	1007883a 	mov	r3,r2
81133660:	e0bfff17 	ldw	r2,-4(fp)
81133664:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
81133668:	0005883a 	mov	r2,zero
}
8113366c:	e037883a 	mov	sp,fp
81133670:	df000017 	ldw	fp,0(sp)
81133674:	dec00104 	addi	sp,sp,4
81133678:	f800283a 	ret

8113367c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
8113367c:	defff504 	addi	sp,sp,-44
81133680:	de00012e 	bgeu	sp,et,81133688 <OSTaskSuspend+0xc>
81133684:	003b68fa 	trap	3
81133688:	dfc00a15 	stw	ra,40(sp)
8113368c:	df000915 	stw	fp,36(sp)
81133690:	df000904 	addi	fp,sp,36
81133694:	2005883a 	mov	r2,r4
81133698:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8113369c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
811336a0:	e0bfff03 	ldbu	r2,-4(fp)
811336a4:	10800a18 	cmpnei	r2,r2,40
811336a8:	1000021e 	bne	r2,zero,811336b4 <OSTaskSuspend+0x38>
        return (OS_ERR_TASK_SUSPEND_IDLE);
811336ac:	008011c4 	movi	r2,71
811336b0:	00006806 	br	81133854 <OSTaskSuspend+0x1d8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
811336b4:	e0bfff03 	ldbu	r2,-4(fp)
811336b8:	10800a30 	cmpltui	r2,r2,40
811336bc:	1000051e 	bne	r2,zero,811336d4 <OSTaskSuspend+0x58>
        if (prio != OS_PRIO_SELF) {
811336c0:	e0bfff03 	ldbu	r2,-4(fp)
811336c4:	10803fe0 	cmpeqi	r2,r2,255
811336c8:	1000021e 	bne	r2,zero,811336d4 <OSTaskSuspend+0x58>
            return (OS_ERR_PRIO_INVALID);
811336cc:	00800a84 	movi	r2,42
811336d0:	00006006 	br	81133854 <OSTaskSuspend+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811336d4:	0005303a 	rdctl	r2,status
811336d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811336dc:	e0fffe17 	ldw	r3,-8(fp)
811336e0:	00bfff84 	movi	r2,-2
811336e4:	1884703a 	and	r2,r3,r2
811336e8:	1001703a 	wrctl	status,r2
  
  return context;
811336ec:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
811336f0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
811336f4:	e0bfff03 	ldbu	r2,-4(fp)
811336f8:	10803fd8 	cmpnei	r2,r2,255
811336fc:	1000061e 	bne	r2,zero,81133718 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
81133700:	d0a08c17 	ldw	r2,-32208(gp)
81133704:	10800c83 	ldbu	r2,50(r2)
81133708:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
8113370c:	00800044 	movi	r2,1
81133710:	e0bff705 	stb	r2,-36(fp)
81133714:	00000906 	br	8113373c <OSTaskSuspend+0xc0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
81133718:	d0a08c17 	ldw	r2,-32208(gp)
8113371c:	10800c83 	ldbu	r2,50(r2)
81133720:	10c03fcc 	andi	r3,r2,255
81133724:	e0bfff03 	ldbu	r2,-4(fp)
81133728:	1880031e 	bne	r3,r2,81133738 <OSTaskSuspend+0xbc>
        self = OS_TRUE;
8113372c:	00800044 	movi	r2,1
81133730:	e0bff705 	stb	r2,-36(fp)
81133734:	00000106 	br	8113373c <OSTaskSuspend+0xc0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
81133738:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8113373c:	e0ffff03 	ldbu	r3,-4(fp)
81133740:	00a045b4 	movhi	r2,33046
81133744:	10a05004 	addi	r2,r2,-32448
81133748:	18c7883a 	add	r3,r3,r3
8113374c:	18c7883a 	add	r3,r3,r3
81133750:	10c5883a 	add	r2,r2,r3
81133754:	10800017 	ldw	r2,0(r2)
81133758:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
8113375c:	e0bffa17 	ldw	r2,-24(fp)
81133760:	1000061e 	bne	r2,zero,8113377c <OSTaskSuspend+0x100>
81133764:	e0bff817 	ldw	r2,-32(fp)
81133768:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113376c:	e0bff917 	ldw	r2,-28(fp)
81133770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
81133774:	00801204 	movi	r2,72
81133778:	00003606 	br	81133854 <OSTaskSuspend+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
8113377c:	e0bffa17 	ldw	r2,-24(fp)
81133780:	10800058 	cmpnei	r2,r2,1
81133784:	1000061e 	bne	r2,zero,811337a0 <OSTaskSuspend+0x124>
81133788:	e0bff817 	ldw	r2,-32(fp)
8113378c:	e0bffb15 	stw	r2,-20(fp)
81133790:	e0bffb17 	ldw	r2,-20(fp)
81133794:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81133798:	008010c4 	movi	r2,67
8113379c:	00002d06 	br	81133854 <OSTaskSuspend+0x1d8>
    }
    y            = ptcb->OSTCBY;
811337a0:	e0bffa17 	ldw	r2,-24(fp)
811337a4:	10800d03 	ldbu	r2,52(r2)
811337a8:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
811337ac:	e0fffd03 	ldbu	r3,-12(fp)
811337b0:	e13ffd03 	ldbu	r4,-12(fp)
811337b4:	d0a08844 	addi	r2,gp,-32223
811337b8:	2085883a 	add	r2,r4,r2
811337bc:	10800003 	ldbu	r2,0(r2)
811337c0:	1009883a 	mov	r4,r2
811337c4:	e0bffa17 	ldw	r2,-24(fp)
811337c8:	10800d43 	ldbu	r2,53(r2)
811337cc:	0084303a 	nor	r2,zero,r2
811337d0:	2084703a 	and	r2,r4,r2
811337d4:	1009883a 	mov	r4,r2
811337d8:	d0a08844 	addi	r2,gp,-32223
811337dc:	1885883a 	add	r2,r3,r2
811337e0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
811337e4:	e0fffd03 	ldbu	r3,-12(fp)
811337e8:	d0a08844 	addi	r2,gp,-32223
811337ec:	1885883a 	add	r2,r3,r2
811337f0:	10800003 	ldbu	r2,0(r2)
811337f4:	10803fcc 	andi	r2,r2,255
811337f8:	1000071e 	bne	r2,zero,81133818 <OSTaskSuspend+0x19c>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
811337fc:	e0bffa17 	ldw	r2,-24(fp)
81133800:	10800d83 	ldbu	r2,54(r2)
81133804:	0084303a 	nor	r2,zero,r2
81133808:	1007883a 	mov	r3,r2
8113380c:	d0a08803 	ldbu	r2,-32224(gp)
81133810:	1884703a 	and	r2,r3,r2
81133814:	d0a08805 	stb	r2,-32224(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
81133818:	e0bffa17 	ldw	r2,-24(fp)
8113381c:	10800c03 	ldbu	r2,48(r2)
81133820:	10800214 	ori	r2,r2,8
81133824:	1007883a 	mov	r3,r2
81133828:	e0bffa17 	ldw	r2,-24(fp)
8113382c:	10c00c05 	stb	r3,48(r2)
81133830:	e0bff817 	ldw	r2,-32(fp)
81133834:	e0bffc15 	stw	r2,-16(fp)
81133838:	e0bffc17 	ldw	r2,-16(fp)
8113383c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
81133840:	e0bff703 	ldbu	r2,-36(fp)
81133844:	10800058 	cmpnei	r2,r2,1
81133848:	1000011e 	bne	r2,zero,81133850 <OSTaskSuspend+0x1d4>
        OS_Sched();                                             /* Find new highest priority task      */
8113384c:	112ccd00 	call	8112ccd0 <OS_Sched>
    }
    return (OS_ERR_NONE);
81133850:	0005883a 	mov	r2,zero
}
81133854:	e037883a 	mov	sp,fp
81133858:	dfc00117 	ldw	ra,4(sp)
8113385c:	df000017 	ldw	fp,0(sp)
81133860:	dec00204 	addi	sp,sp,8
81133864:	f800283a 	ret

81133868 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
81133868:	defff604 	addi	sp,sp,-40
8113386c:	de00012e 	bgeu	sp,et,81133874 <OSTaskQuery+0xc>
81133870:	003b68fa 	trap	3
81133874:	dfc00915 	stw	ra,36(sp)
81133878:	df000815 	stw	fp,32(sp)
8113387c:	df000804 	addi	fp,sp,32
81133880:	2005883a 	mov	r2,r4
81133884:	e17fff15 	stw	r5,-4(fp)
81133888:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8113388c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
81133890:	e0bffe03 	ldbu	r2,-8(fp)
81133894:	10800a70 	cmpltui	r2,r2,41
81133898:	1000051e 	bne	r2,zero,811338b0 <OSTaskQuery+0x48>
        if (prio != OS_PRIO_SELF) {
8113389c:	e0bffe03 	ldbu	r2,-8(fp)
811338a0:	10803fe0 	cmpeqi	r2,r2,255
811338a4:	1000021e 	bne	r2,zero,811338b0 <OSTaskQuery+0x48>
            return (OS_ERR_PRIO_INVALID);
811338a8:	00800a84 	movi	r2,42
811338ac:	00003406 	br	81133980 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
811338b0:	e0bfff17 	ldw	r2,-4(fp)
811338b4:	1000021e 	bne	r2,zero,811338c0 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
811338b8:	00800244 	movi	r2,9
811338bc:	00003006 	br	81133980 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811338c0:	0005303a 	rdctl	r2,status
811338c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811338c8:	e0fffd17 	ldw	r3,-12(fp)
811338cc:	00bfff84 	movi	r2,-2
811338d0:	1884703a 	and	r2,r3,r2
811338d4:	1001703a 	wrctl	status,r2
  
  return context;
811338d8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811338dc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
811338e0:	e0bffe03 	ldbu	r2,-8(fp)
811338e4:	10803fd8 	cmpnei	r2,r2,255
811338e8:	1000031e 	bne	r2,zero,811338f8 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
811338ec:	d0a08c17 	ldw	r2,-32208(gp)
811338f0:	10800c83 	ldbu	r2,50(r2)
811338f4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811338f8:	e0fffe03 	ldbu	r3,-8(fp)
811338fc:	00a045b4 	movhi	r2,33046
81133900:	10a05004 	addi	r2,r2,-32448
81133904:	18c7883a 	add	r3,r3,r3
81133908:	18c7883a 	add	r3,r3,r3
8113390c:	10c5883a 	add	r2,r2,r3
81133910:	10800017 	ldw	r2,0(r2)
81133914:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
81133918:	e0bffa17 	ldw	r2,-24(fp)
8113391c:	1000061e 	bne	r2,zero,81133938 <OSTaskQuery+0xd0>
81133920:	e0bff817 	ldw	r2,-32(fp)
81133924:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133928:	e0bff917 	ldw	r2,-28(fp)
8113392c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
81133930:	00800a44 	movi	r2,41
81133934:	00001206 	br	81133980 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
81133938:	e0bffa17 	ldw	r2,-24(fp)
8113393c:	10800058 	cmpnei	r2,r2,1
81133940:	1000061e 	bne	r2,zero,8113395c <OSTaskQuery+0xf4>
81133944:	e0bff817 	ldw	r2,-32(fp)
81133948:	e0bffb15 	stw	r2,-20(fp)
8113394c:	e0bffb17 	ldw	r2,-20(fp)
81133950:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81133954:	008010c4 	movi	r2,67
81133958:	00000906 	br	81133980 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
8113395c:	01801b04 	movi	r6,108
81133960:	e17ffa17 	ldw	r5,-24(fp)
81133964:	e13fff17 	ldw	r4,-4(fp)
81133968:	112cc600 	call	8112cc60 <OS_MemCopy>
8113396c:	e0bff817 	ldw	r2,-32(fp)
81133970:	e0bffc15 	stw	r2,-16(fp)
81133974:	e0bffc17 	ldw	r2,-16(fp)
81133978:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8113397c:	0005883a 	mov	r2,zero
}
81133980:	e037883a 	mov	sp,fp
81133984:	dfc00117 	ldw	ra,4(sp)
81133988:	df000017 	ldw	fp,0(sp)
8113398c:	dec00204 	addi	sp,sp,8
81133990:	f800283a 	ret

81133994 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
81133994:	defffc04 	addi	sp,sp,-16
81133998:	de00012e 	bgeu	sp,et,811339a0 <OS_TaskStkClr+0xc>
8113399c:	003b68fa 	trap	3
811339a0:	df000315 	stw	fp,12(sp)
811339a4:	df000304 	addi	fp,sp,12
811339a8:	e13ffd15 	stw	r4,-12(fp)
811339ac:	e17ffe15 	stw	r5,-8(fp)
811339b0:	3005883a 	mov	r2,r6
811339b4:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
811339b8:	e0bfff0b 	ldhu	r2,-4(fp)
811339bc:	1080004c 	andi	r2,r2,1
811339c0:	10000d26 	beq	r2,zero,811339f8 <OS_TaskStkClr+0x64>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
811339c4:	e0bfff0b 	ldhu	r2,-4(fp)
811339c8:	1080008c 	andi	r2,r2,2
811339cc:	10000a26 	beq	r2,zero,811339f8 <OS_TaskStkClr+0x64>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
811339d0:	00000706 	br	811339f0 <OS_TaskStkClr+0x5c>
                size--;
811339d4:	e0bffe17 	ldw	r2,-8(fp)
811339d8:	10bfffc4 	addi	r2,r2,-1
811339dc:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
811339e0:	e0bffd17 	ldw	r2,-12(fp)
811339e4:	10c00104 	addi	r3,r2,4
811339e8:	e0fffd15 	stw	r3,-12(fp)
811339ec:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
811339f0:	e0bffe17 	ldw	r2,-8(fp)
811339f4:	103ff71e 	bne	r2,zero,811339d4 <__reset+0xfb1139d4>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
811339f8:	0001883a 	nop
811339fc:	e037883a 	mov	sp,fp
81133a00:	df000017 	ldw	fp,0(sp)
81133a04:	dec00104 	addi	sp,sp,4
81133a08:	f800283a 	ret

81133a0c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
81133a0c:	defff904 	addi	sp,sp,-28
81133a10:	de00012e 	bgeu	sp,et,81133a18 <OSTimeDly+0xc>
81133a14:	003b68fa 	trap	3
81133a18:	dfc00615 	stw	ra,24(sp)
81133a1c:	df000515 	stw	fp,20(sp)
81133a20:	df000504 	addi	fp,sp,20
81133a24:	2005883a 	mov	r2,r4
81133a28:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81133a2c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81133a30:	d0a08b03 	ldbu	r2,-32212(gp)
81133a34:	10803fcc 	andi	r2,r2,255
81133a38:	1000311e 	bne	r2,zero,81133b00 <OSTimeDly+0xf4>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
81133a3c:	e0bfff0b 	ldhu	r2,-4(fp)
81133a40:	10003026 	beq	r2,zero,81133b04 <OSTimeDly+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133a44:	0005303a 	rdctl	r2,status
81133a48:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133a4c:	e0fffe17 	ldw	r3,-8(fp)
81133a50:	00bfff84 	movi	r2,-2
81133a54:	1884703a 	and	r2,r3,r2
81133a58:	1001703a 	wrctl	status,r2
  
  return context;
81133a5c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
81133a60:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
81133a64:	d0a08c17 	ldw	r2,-32208(gp)
81133a68:	10800d03 	ldbu	r2,52(r2)
81133a6c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
81133a70:	e0fffd03 	ldbu	r3,-12(fp)
81133a74:	e13ffd03 	ldbu	r4,-12(fp)
81133a78:	d0a08844 	addi	r2,gp,-32223
81133a7c:	2085883a 	add	r2,r4,r2
81133a80:	10800003 	ldbu	r2,0(r2)
81133a84:	1009883a 	mov	r4,r2
81133a88:	d0a08c17 	ldw	r2,-32208(gp)
81133a8c:	10800d43 	ldbu	r2,53(r2)
81133a90:	0084303a 	nor	r2,zero,r2
81133a94:	2084703a 	and	r2,r4,r2
81133a98:	1009883a 	mov	r4,r2
81133a9c:	d0a08844 	addi	r2,gp,-32223
81133aa0:	1885883a 	add	r2,r3,r2
81133aa4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
81133aa8:	e0fffd03 	ldbu	r3,-12(fp)
81133aac:	d0a08844 	addi	r2,gp,-32223
81133ab0:	1885883a 	add	r2,r3,r2
81133ab4:	10800003 	ldbu	r2,0(r2)
81133ab8:	10803fcc 	andi	r2,r2,255
81133abc:	1000071e 	bne	r2,zero,81133adc <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81133ac0:	d0a08c17 	ldw	r2,-32208(gp)
81133ac4:	10800d83 	ldbu	r2,54(r2)
81133ac8:	0084303a 	nor	r2,zero,r2
81133acc:	1007883a 	mov	r3,r2
81133ad0:	d0a08803 	ldbu	r2,-32224(gp)
81133ad4:	1884703a 	and	r2,r3,r2
81133ad8:	d0a08805 	stb	r2,-32224(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
81133adc:	d0a08c17 	ldw	r2,-32208(gp)
81133ae0:	e0ffff0b 	ldhu	r3,-4(fp)
81133ae4:	10c00b8d 	sth	r3,46(r2)
81133ae8:	e0bffb17 	ldw	r2,-20(fp)
81133aec:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133af0:	e0bffc17 	ldw	r2,-16(fp)
81133af4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
81133af8:	112ccd00 	call	8112ccd0 <OS_Sched>
81133afc:	00000106 	br	81133b04 <OSTimeDly+0xf8>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
81133b00:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
81133b04:	e037883a 	mov	sp,fp
81133b08:	dfc00117 	ldw	ra,4(sp)
81133b0c:	df000017 	ldw	fp,0(sp)
81133b10:	dec00204 	addi	sp,sp,8
81133b14:	f800283a 	ret

81133b18 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
81133b18:	defff804 	addi	sp,sp,-32
81133b1c:	de00012e 	bgeu	sp,et,81133b24 <OSTimeDlyHMSM+0xc>
81133b20:	003b68fa 	trap	3
81133b24:	dfc00715 	stw	ra,28(sp)
81133b28:	df000615 	stw	fp,24(sp)
81133b2c:	df000604 	addi	fp,sp,24
81133b30:	2015883a 	mov	r10,r4
81133b34:	2809883a 	mov	r4,r5
81133b38:	3007883a 	mov	r3,r6
81133b3c:	3805883a 	mov	r2,r7
81133b40:	e2bffc05 	stb	r10,-16(fp)
81133b44:	e13ffd05 	stb	r4,-12(fp)
81133b48:	e0fffe05 	stb	r3,-8(fp)
81133b4c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81133b50:	d0a08b03 	ldbu	r2,-32212(gp)
81133b54:	10803fcc 	andi	r2,r2,255
81133b58:	10000226 	beq	r2,zero,81133b64 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
81133b5c:	00801544 	movi	r2,85
81133b60:	00004106 	br	81133c68 <OSTimeDlyHMSM+0x150>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
81133b64:	e0bffc03 	ldbu	r2,-16(fp)
81133b68:	1000081e 	bne	r2,zero,81133b8c <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
81133b6c:	e0bffd03 	ldbu	r2,-12(fp)
81133b70:	1000061e 	bne	r2,zero,81133b8c <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
81133b74:	e0bffe03 	ldbu	r2,-8(fp)
81133b78:	1000041e 	bne	r2,zero,81133b8c <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
81133b7c:	e0bfff0b 	ldhu	r2,-4(fp)
81133b80:	1000021e 	bne	r2,zero,81133b8c <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
81133b84:	00801504 	movi	r2,84
81133b88:	00003706 	br	81133c68 <OSTimeDlyHMSM+0x150>
                }
            }
        }
    }
    if (minutes > 59) {
81133b8c:	e0bffd03 	ldbu	r2,-12(fp)
81133b90:	10800f30 	cmpltui	r2,r2,60
81133b94:	1000021e 	bne	r2,zero,81133ba0 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
81133b98:	00801444 	movi	r2,81
81133b9c:	00003206 	br	81133c68 <OSTimeDlyHMSM+0x150>
    }
    if (seconds > 59) {
81133ba0:	e0bffe03 	ldbu	r2,-8(fp)
81133ba4:	10800f30 	cmpltui	r2,r2,60
81133ba8:	1000021e 	bne	r2,zero,81133bb4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
81133bac:	00801484 	movi	r2,82
81133bb0:	00002d06 	br	81133c68 <OSTimeDlyHMSM+0x150>
    }
    if (ms > 999) {
81133bb4:	e0bfff0b 	ldhu	r2,-4(fp)
81133bb8:	1080fa30 	cmpltui	r2,r2,1000
81133bbc:	1000021e 	bne	r2,zero,81133bc8 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
81133bc0:	008014c4 	movi	r2,83
81133bc4:	00002806 	br	81133c68 <OSTimeDlyHMSM+0x150>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81133bc8:	e0bffc03 	ldbu	r2,-16(fp)
81133bcc:	10c38424 	muli	r3,r2,3600
81133bd0:	e0bffd03 	ldbu	r2,-12(fp)
81133bd4:	10800f24 	muli	r2,r2,60
81133bd8:	1887883a 	add	r3,r3,r2
81133bdc:	e0bffe03 	ldbu	r2,-8(fp)
81133be0:	1885883a 	add	r2,r3,r2
81133be4:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
81133be8:	e0bfff0b 	ldhu	r2,-4(fp)
81133bec:	10c0fa24 	muli	r3,r2,1000
81133bf0:	008418b4 	movhi	r2,4194
81133bf4:	109374c4 	addi	r2,r2,19923
81133bf8:	188a383a 	mulxuu	r5,r3,r2
81133bfc:	1885383a 	mul	r2,r3,r2
81133c00:	1011883a 	mov	r8,r2
81133c04:	2813883a 	mov	r9,r5
81133c08:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81133c0c:	2085883a 	add	r2,r4,r2
81133c10:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
81133c14:	e0bffb17 	ldw	r2,-20(fp)
81133c18:	1004d43a 	srli	r2,r2,16
81133c1c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
81133c20:	e0bffb17 	ldw	r2,-20(fp)
81133c24:	10bfffcc 	andi	r2,r2,65535
81133c28:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
81133c2c:	e0bffb17 	ldw	r2,-20(fp)
81133c30:	10bfffcc 	andi	r2,r2,65535
81133c34:	1009883a 	mov	r4,r2
81133c38:	1133a0c0 	call	81133a0c <OSTimeDly>
    while (loops > 0) {
81133c3c:	00000706 	br	81133c5c <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
81133c40:	01200014 	movui	r4,32768
81133c44:	1133a0c0 	call	81133a0c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
81133c48:	01200014 	movui	r4,32768
81133c4c:	1133a0c0 	call	81133a0c <OSTimeDly>
        loops--;
81133c50:	e0bffa0b 	ldhu	r2,-24(fp)
81133c54:	10bfffc4 	addi	r2,r2,-1
81133c58:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
81133c5c:	e0bffa0b 	ldhu	r2,-24(fp)
81133c60:	103ff71e 	bne	r2,zero,81133c40 <__reset+0xfb113c40>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
81133c64:	0005883a 	mov	r2,zero
}
81133c68:	e037883a 	mov	sp,fp
81133c6c:	dfc00117 	ldw	ra,4(sp)
81133c70:	df000017 	ldw	fp,0(sp)
81133c74:	dec00204 	addi	sp,sp,8
81133c78:	f800283a 	ret

81133c7c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
81133c7c:	defff504 	addi	sp,sp,-44
81133c80:	de00012e 	bgeu	sp,et,81133c88 <OSTimeDlyResume+0xc>
81133c84:	003b68fa 	trap	3
81133c88:	dfc00a15 	stw	ra,40(sp)
81133c8c:	df000915 	stw	fp,36(sp)
81133c90:	df000904 	addi	fp,sp,36
81133c94:	2005883a 	mov	r2,r4
81133c98:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81133c9c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
81133ca0:	e0bfff03 	ldbu	r2,-4(fp)
81133ca4:	10800a30 	cmpltui	r2,r2,40
81133ca8:	1000021e 	bne	r2,zero,81133cb4 <OSTimeDlyResume+0x38>
        return (OS_ERR_PRIO_INVALID);
81133cac:	00800a84 	movi	r2,42
81133cb0:	00006406 	br	81133e44 <OSTimeDlyResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133cb4:	0005303a 	rdctl	r2,status
81133cb8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133cbc:	e0fffe17 	ldw	r3,-8(fp)
81133cc0:	00bfff84 	movi	r2,-2
81133cc4:	1884703a 	and	r2,r3,r2
81133cc8:	1001703a 	wrctl	status,r2
  
  return context;
81133ccc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81133cd0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
81133cd4:	e0ffff03 	ldbu	r3,-4(fp)
81133cd8:	00a045b4 	movhi	r2,33046
81133cdc:	10a05004 	addi	r2,r2,-32448
81133ce0:	18c7883a 	add	r3,r3,r3
81133ce4:	18c7883a 	add	r3,r3,r3
81133ce8:	10c5883a 	add	r2,r2,r3
81133cec:	10800017 	ldw	r2,0(r2)
81133cf0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
81133cf4:	e0bff917 	ldw	r2,-28(fp)
81133cf8:	1000061e 	bne	r2,zero,81133d14 <OSTimeDlyResume+0x98>
81133cfc:	e0bff717 	ldw	r2,-36(fp)
81133d00:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133d04:	e0bff817 	ldw	r2,-32(fp)
81133d08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81133d0c:	008010c4 	movi	r2,67
81133d10:	00004c06 	br	81133e44 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {
81133d14:	e0bff917 	ldw	r2,-28(fp)
81133d18:	10800058 	cmpnei	r2,r2,1
81133d1c:	1000061e 	bne	r2,zero,81133d38 <OSTimeDlyResume+0xbc>
81133d20:	e0bff717 	ldw	r2,-36(fp)
81133d24:	e0bffa15 	stw	r2,-24(fp)
81133d28:	e0bffa17 	ldw	r2,-24(fp)
81133d2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81133d30:	008010c4 	movi	r2,67
81133d34:	00004306 	br	81133e44 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
81133d38:	e0bff917 	ldw	r2,-28(fp)
81133d3c:	10800b8b 	ldhu	r2,46(r2)
81133d40:	10bfffcc 	andi	r2,r2,65535
81133d44:	1000061e 	bne	r2,zero,81133d60 <OSTimeDlyResume+0xe4>
81133d48:	e0bff717 	ldw	r2,-36(fp)
81133d4c:	e0bffb15 	stw	r2,-20(fp)
81133d50:	e0bffb17 	ldw	r2,-20(fp)
81133d54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
81133d58:	00801404 	movi	r2,80
81133d5c:	00003906 	br	81133e44 <OSTimeDlyResume+0x1c8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
81133d60:	e0bff917 	ldw	r2,-28(fp)
81133d64:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
81133d68:	e0bff917 	ldw	r2,-28(fp)
81133d6c:	10800c03 	ldbu	r2,48(r2)
81133d70:	10803fcc 	andi	r2,r2,255
81133d74:	10800dcc 	andi	r2,r2,55
81133d78:	10000b26 	beq	r2,zero,81133da8 <OSTimeDlyResume+0x12c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
81133d7c:	e0bff917 	ldw	r2,-28(fp)
81133d80:	10c00c03 	ldbu	r3,48(r2)
81133d84:	00bff204 	movi	r2,-56
81133d88:	1884703a 	and	r2,r3,r2
81133d8c:	1007883a 	mov	r3,r2
81133d90:	e0bff917 	ldw	r2,-28(fp)
81133d94:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
81133d98:	e0bff917 	ldw	r2,-28(fp)
81133d9c:	00c00044 	movi	r3,1
81133da0:	10c00c45 	stb	r3,49(r2)
81133da4:	00000206 	br	81133db0 <OSTimeDlyResume+0x134>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
81133da8:	e0bff917 	ldw	r2,-28(fp)
81133dac:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
81133db0:	e0bff917 	ldw	r2,-28(fp)
81133db4:	10800c03 	ldbu	r2,48(r2)
81133db8:	10803fcc 	andi	r2,r2,255
81133dbc:	1080020c 	andi	r2,r2,8
81133dc0:	10001b1e 	bne	r2,zero,81133e30 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
81133dc4:	e0bff917 	ldw	r2,-28(fp)
81133dc8:	10c00d83 	ldbu	r3,54(r2)
81133dcc:	d0a08803 	ldbu	r2,-32224(gp)
81133dd0:	1884b03a 	or	r2,r3,r2
81133dd4:	d0a08805 	stb	r2,-32224(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81133dd8:	e0bff917 	ldw	r2,-28(fp)
81133ddc:	10800d03 	ldbu	r2,52(r2)
81133de0:	10c03fcc 	andi	r3,r2,255
81133de4:	e0bff917 	ldw	r2,-28(fp)
81133de8:	10800d03 	ldbu	r2,52(r2)
81133dec:	11003fcc 	andi	r4,r2,255
81133df0:	d0a08844 	addi	r2,gp,-32223
81133df4:	2085883a 	add	r2,r4,r2
81133df8:	11000003 	ldbu	r4,0(r2)
81133dfc:	e0bff917 	ldw	r2,-28(fp)
81133e00:	10800d43 	ldbu	r2,53(r2)
81133e04:	2084b03a 	or	r2,r4,r2
81133e08:	1009883a 	mov	r4,r2
81133e0c:	d0a08844 	addi	r2,gp,-32223
81133e10:	1885883a 	add	r2,r3,r2
81133e14:	11000005 	stb	r4,0(r2)
81133e18:	e0bff717 	ldw	r2,-36(fp)
81133e1c:	e0bffc15 	stw	r2,-16(fp)
81133e20:	e0bffc17 	ldw	r2,-16(fp)
81133e24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
81133e28:	112ccd00 	call	8112ccd0 <OS_Sched>
81133e2c:	00000406 	br	81133e40 <OSTimeDlyResume+0x1c4>
81133e30:	e0bff717 	ldw	r2,-36(fp)
81133e34:	e0bffd15 	stw	r2,-12(fp)
81133e38:	e0bffd17 	ldw	r2,-12(fp)
81133e3c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
81133e40:	0005883a 	mov	r2,zero
}
81133e44:	e037883a 	mov	sp,fp
81133e48:	dfc00117 	ldw	ra,4(sp)
81133e4c:	df000017 	ldw	fp,0(sp)
81133e50:	dec00204 	addi	sp,sp,8
81133e54:	f800283a 	ret

81133e58 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
81133e58:	defffb04 	addi	sp,sp,-20
81133e5c:	de00012e 	bgeu	sp,et,81133e64 <OSTimeGet+0xc>
81133e60:	003b68fa 	trap	3
81133e64:	df000415 	stw	fp,16(sp)
81133e68:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81133e6c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133e70:	0005303a 	rdctl	r2,status
81133e74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133e78:	e0fffe17 	ldw	r3,-8(fp)
81133e7c:	00bfff84 	movi	r2,-2
81133e80:	1884703a 	and	r2,r3,r2
81133e84:	1001703a 	wrctl	status,r2
  
  return context;
81133e88:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81133e8c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
81133e90:	d0a08e17 	ldw	r2,-32200(gp)
81133e94:	e0bffd15 	stw	r2,-12(fp)
81133e98:	e0bffc17 	ldw	r2,-16(fp)
81133e9c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133ea0:	e0bfff17 	ldw	r2,-4(fp)
81133ea4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
81133ea8:	e0bffd17 	ldw	r2,-12(fp)
}
81133eac:	e037883a 	mov	sp,fp
81133eb0:	df000017 	ldw	fp,0(sp)
81133eb4:	dec00104 	addi	sp,sp,4
81133eb8:	f800283a 	ret

81133ebc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
81133ebc:	defffb04 	addi	sp,sp,-20
81133ec0:	de00012e 	bgeu	sp,et,81133ec8 <OSTimeSet+0xc>
81133ec4:	003b68fa 	trap	3
81133ec8:	df000415 	stw	fp,16(sp)
81133ecc:	df000404 	addi	fp,sp,16
81133ed0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81133ed4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133ed8:	0005303a 	rdctl	r2,status
81133edc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133ee0:	e0fffd17 	ldw	r3,-12(fp)
81133ee4:	00bfff84 	movi	r2,-2
81133ee8:	1884703a 	and	r2,r3,r2
81133eec:	1001703a 	wrctl	status,r2
  
  return context;
81133ef0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
81133ef4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
81133ef8:	e0bfff17 	ldw	r2,-4(fp)
81133efc:	d0a08e15 	stw	r2,-32200(gp)
81133f00:	e0bffc17 	ldw	r2,-16(fp)
81133f04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133f08:	e0bffe17 	ldw	r2,-8(fp)
81133f0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81133f10:	0001883a 	nop
81133f14:	e037883a 	mov	sp,fp
81133f18:	df000017 	ldw	fp,0(sp)
81133f1c:	dec00104 	addi	sp,sp,4
81133f20:	f800283a 	ret

81133f24 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
81133f24:	defff804 	addi	sp,sp,-32
81133f28:	de00012e 	bgeu	sp,et,81133f30 <OSTmrCreate+0xc>
81133f2c:	003b68fa 	trap	3
81133f30:	dfc00715 	stw	ra,28(sp)
81133f34:	df000615 	stw	fp,24(sp)
81133f38:	df000604 	addi	fp,sp,24
81133f3c:	e13ffc15 	stw	r4,-16(fp)
81133f40:	e17ffd15 	stw	r5,-12(fp)
81133f44:	3005883a 	mov	r2,r6
81133f48:	e1ffff15 	stw	r7,-4(fp)
81133f4c:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81133f50:	e0800417 	ldw	r2,16(fp)
81133f54:	1000021e 	bne	r2,zero,81133f60 <OSTmrCreate+0x3c>
        return ((OS_TMR *)0);
81133f58:	0005883a 	mov	r2,zero
81133f5c:	00005d06 	br	811340d4 <OSTmrCreate+0x1b0>
    }
    switch (opt) {
81133f60:	e0bffe03 	ldbu	r2,-8(fp)
81133f64:	10c00060 	cmpeqi	r3,r2,1
81133f68:	1800091e 	bne	r3,zero,81133f90 <OSTmrCreate+0x6c>
81133f6c:	108000a0 	cmpeqi	r2,r2,2
81133f70:	10000e26 	beq	r2,zero,81133fac <OSTmrCreate+0x88>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
81133f74:	e0bffd17 	ldw	r2,-12(fp)
81133f78:	1000111e 	bne	r2,zero,81133fc0 <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
81133f7c:	e0800417 	ldw	r2,16(fp)
81133f80:	00ffe0c4 	movi	r3,-125
81133f84:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
81133f88:	0005883a 	mov	r2,zero
81133f8c:	00005106 	br	811340d4 <OSTmrCreate+0x1b0>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
81133f90:	e0bffc17 	ldw	r2,-16(fp)
81133f94:	10000c1e 	bne	r2,zero,81133fc8 <OSTmrCreate+0xa4>
                 *perr = OS_ERR_TMR_INVALID_DLY;
81133f98:	e0800417 	ldw	r2,16(fp)
81133f9c:	00ffe084 	movi	r3,-126
81133fa0:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
81133fa4:	0005883a 	mov	r2,zero
81133fa8:	00004a06 	br	811340d4 <OSTmrCreate+0x1b0>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
81133fac:	e0800417 	ldw	r2,16(fp)
81133fb0:	00ffe104 	movi	r3,-124
81133fb4:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
81133fb8:	0005883a 	mov	r2,zero
81133fbc:	00004506 	br	811340d4 <OSTmrCreate+0x1b0>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
81133fc0:	0001883a 	nop
81133fc4:	00000106 	br	81133fcc <OSTmrCreate+0xa8>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
81133fc8:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81133fcc:	d0a08b03 	ldbu	r2,-32212(gp)
81133fd0:	10803fcc 	andi	r2,r2,255
81133fd4:	10000526 	beq	r2,zero,81133fec <OSTmrCreate+0xc8>
        *perr  = OS_ERR_TMR_ISR;
81133fd8:	e0800417 	ldw	r2,16(fp)
81133fdc:	00ffe2c4 	movi	r3,-117
81133fe0:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81133fe4:	0005883a 	mov	r2,zero
81133fe8:	00003a06 	br	811340d4 <OSTmrCreate+0x1b0>
    }
    OSTmr_Lock();
81133fec:	1134edc0 	call	81134edc <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
81133ff0:	113497c0 	call	8113497c <OSTmr_Alloc>
81133ff4:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
81133ff8:	e0bffa17 	ldw	r2,-24(fp)
81133ffc:	1000061e 	bne	r2,zero,81134018 <OSTmrCreate+0xf4>
        OSTmr_Unlock();
81134000:	1134f200 	call	81134f20 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
81134004:	e0800417 	ldw	r2,16(fp)
81134008:	00ffe184 	movi	r3,-122
8113400c:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81134010:	0005883a 	mov	r2,zero
81134014:	00002f06 	br	811340d4 <OSTmrCreate+0x1b0>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
81134018:	e0bffa17 	ldw	r2,-24(fp)
8113401c:	00c00044 	movi	r3,1
81134020:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
81134024:	e0bffa17 	ldw	r2,-24(fp)
81134028:	e0fffc17 	ldw	r3,-16(fp)
8113402c:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
81134030:	e0bffa17 	ldw	r2,-24(fp)
81134034:	e0fffd17 	ldw	r3,-12(fp)
81134038:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
8113403c:	e0bffa17 	ldw	r2,-24(fp)
81134040:	e0fffe03 	ldbu	r3,-8(fp)
81134044:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
81134048:	e0bffa17 	ldw	r2,-24(fp)
8113404c:	e0ffff17 	ldw	r3,-4(fp)
81134050:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
81134054:	e0bffa17 	ldw	r2,-24(fp)
81134058:	e0c00217 	ldw	r3,8(fp)
8113405c:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
81134060:	e0800317 	ldw	r2,12(fp)
81134064:	10001726 	beq	r2,zero,811340c4 <OSTmrCreate+0x1a0>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
81134068:	e1000317 	ldw	r4,12(fp)
8113406c:	112cea00 	call	8112cea0 <OS_StrLen>
81134070:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
81134074:	e0bffb03 	ldbu	r2,-20(fp)
81134078:	10800428 	cmpgeui	r2,r2,16
8113407c:	1000061e 	bne	r2,zero,81134098 <OSTmrCreate+0x174>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
81134080:	e0bffa17 	ldw	r2,-24(fp)
81134084:	10800804 	addi	r2,r2,32
81134088:	e1400317 	ldw	r5,12(fp)
8113408c:	1009883a 	mov	r4,r2
81134090:	112ce240 	call	8112ce24 <OS_StrCopy>
81134094:	00000b06 	br	811340c4 <OSTmrCreate+0x1a0>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
81134098:	e0bffa17 	ldw	r2,-24(fp)
8113409c:	00c008c4 	movi	r3,35
811340a0:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
811340a4:	e0bffa17 	ldw	r2,-24(fp)
811340a8:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
811340ac:	e0800417 	ldw	r2,16(fp)
811340b0:	00ffe304 	movi	r3,-116
811340b4:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
811340b8:	1134f200 	call	81134f20 <OSTmr_Unlock>
            return (ptmr);
811340bc:	e0bffa17 	ldw	r2,-24(fp)
811340c0:	00000406 	br	811340d4 <OSTmrCreate+0x1b0>
        }
    }
#endif
    OSTmr_Unlock();
811340c4:	1134f200 	call	81134f20 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
811340c8:	e0800417 	ldw	r2,16(fp)
811340cc:	10000005 	stb	zero,0(r2)
    return (ptmr);
811340d0:	e0bffa17 	ldw	r2,-24(fp)
}
811340d4:	e037883a 	mov	sp,fp
811340d8:	dfc00117 	ldw	ra,4(sp)
811340dc:	df000017 	ldw	fp,0(sp)
811340e0:	dec00204 	addi	sp,sp,8
811340e4:	f800283a 	ret

811340e8 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
811340e8:	defffc04 	addi	sp,sp,-16
811340ec:	de00012e 	bgeu	sp,et,811340f4 <OSTmrDel+0xc>
811340f0:	003b68fa 	trap	3
811340f4:	dfc00315 	stw	ra,12(sp)
811340f8:	df000215 	stw	fp,8(sp)
811340fc:	df000204 	addi	fp,sp,8
81134100:	e13ffe15 	stw	r4,-8(fp)
81134104:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81134108:	e0bfff17 	ldw	r2,-4(fp)
8113410c:	1000021e 	bne	r2,zero,81134118 <OSTmrDel+0x30>
        return (OS_FALSE);
81134110:	0005883a 	mov	r2,zero
81134114:	00003f06 	br	81134214 <OSTmrDel+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
81134118:	e0bffe17 	ldw	r2,-8(fp)
8113411c:	1000051e 	bne	r2,zero,81134134 <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81134120:	e0bfff17 	ldw	r2,-4(fp)
81134124:	00ffe284 	movi	r3,-118
81134128:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8113412c:	0005883a 	mov	r2,zero
81134130:	00003806 	br	81134214 <OSTmrDel+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81134134:	e0bffe17 	ldw	r2,-8(fp)
81134138:	10800003 	ldbu	r2,0(r2)
8113413c:	10803fcc 	andi	r2,r2,255
81134140:	10801920 	cmpeqi	r2,r2,100
81134144:	1000051e 	bne	r2,zero,8113415c <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81134148:	e0bfff17 	ldw	r2,-4(fp)
8113414c:	00ffe244 	movi	r3,-119
81134150:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81134154:	0005883a 	mov	r2,zero
81134158:	00002e06 	br	81134214 <OSTmrDel+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8113415c:	d0a08b03 	ldbu	r2,-32212(gp)
81134160:	10803fcc 	andi	r2,r2,255
81134164:	10000526 	beq	r2,zero,8113417c <OSTmrDel+0x94>
        *perr  = OS_ERR_TMR_ISR;
81134168:	e0bfff17 	ldw	r2,-4(fp)
8113416c:	00ffe2c4 	movi	r3,-117
81134170:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81134174:	0005883a 	mov	r2,zero
81134178:	00002606 	br	81134214 <OSTmrDel+0x12c>
    }
    OSTmr_Lock();
8113417c:	1134edc0 	call	81134edc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81134180:	e0bffe17 	ldw	r2,-8(fp)
81134184:	10800c43 	ldbu	r2,49(r2)
81134188:	10803fcc 	andi	r2,r2,255
8113418c:	10c000c8 	cmpgei	r3,r2,3
81134190:	1800031e 	bne	r3,zero,811341a0 <OSTmrDel+0xb8>
81134194:	00800d16 	blt	zero,r2,811341cc <OSTmrDel+0xe4>
81134198:	10001326 	beq	r2,zero,811341e8 <OSTmrDel+0x100>
8113419c:	00001806 	br	81134200 <OSTmrDel+0x118>
811341a0:	108000e0 	cmpeqi	r2,r2,3
811341a4:	10001626 	beq	r2,zero,81134200 <OSTmrDel+0x118>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
811341a8:	e13ffe17 	ldw	r4,-8(fp)
811341ac:	1134de00 	call	81134de0 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
811341b0:	e13ffe17 	ldw	r4,-8(fp)
811341b4:	11349f00 	call	811349f0 <OSTmr_Free>
             OSTmr_Unlock();
811341b8:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811341bc:	e0bfff17 	ldw	r2,-4(fp)
811341c0:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
811341c4:	00800044 	movi	r2,1
811341c8:	00001206 	br	81134214 <OSTmrDel+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
811341cc:	e13ffe17 	ldw	r4,-8(fp)
811341d0:	11349f00 	call	811349f0 <OSTmr_Free>
             OSTmr_Unlock();
811341d4:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811341d8:	e0bfff17 	ldw	r2,-4(fp)
811341dc:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
811341e0:	00800044 	movi	r2,1
811341e4:	00000b06 	br	81134214 <OSTmrDel+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
811341e8:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
811341ec:	e0bfff17 	ldw	r2,-4(fp)
811341f0:	00ffe1c4 	movi	r3,-121
811341f4:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
811341f8:	0005883a 	mov	r2,zero
811341fc:	00000506 	br	81134214 <OSTmrDel+0x12c>

        default:
             OSTmr_Unlock();
81134200:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81134204:	e0bfff17 	ldw	r2,-4(fp)
81134208:	00ffe344 	movi	r3,-115
8113420c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81134210:	0005883a 	mov	r2,zero
    }
}
81134214:	e037883a 	mov	sp,fp
81134218:	dfc00117 	ldw	ra,4(sp)
8113421c:	df000017 	ldw	fp,0(sp)
81134220:	dec00204 	addi	sp,sp,8
81134224:	f800283a 	ret

81134228 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
81134228:	defffa04 	addi	sp,sp,-24
8113422c:	de00012e 	bgeu	sp,et,81134234 <OSTmrNameGet+0xc>
81134230:	003b68fa 	trap	3
81134234:	dfc00515 	stw	ra,20(sp)
81134238:	df000415 	stw	fp,16(sp)
8113423c:	df000404 	addi	fp,sp,16
81134240:	e13ffd15 	stw	r4,-12(fp)
81134244:	e17ffe15 	stw	r5,-8(fp)
81134248:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8113424c:	e0bfff17 	ldw	r2,-4(fp)
81134250:	1000021e 	bne	r2,zero,8113425c <OSTmrNameGet+0x34>
        return (0);
81134254:	0005883a 	mov	r2,zero
81134258:	00003e06 	br	81134354 <OSTmrNameGet+0x12c>
    }
    if (pdest == (INT8U *)0) {
8113425c:	e0bffe17 	ldw	r2,-8(fp)
81134260:	1000051e 	bne	r2,zero,81134278 <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
81134264:	e0bfff17 	ldw	r2,-4(fp)
81134268:	00ffe204 	movi	r3,-120
8113426c:	10c00005 	stb	r3,0(r2)
        return (0);
81134270:	0005883a 	mov	r2,zero
81134274:	00003706 	br	81134354 <OSTmrNameGet+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
81134278:	e0bffd17 	ldw	r2,-12(fp)
8113427c:	1000051e 	bne	r2,zero,81134294 <OSTmrNameGet+0x6c>
        *perr = OS_ERR_TMR_INVALID;
81134280:	e0bfff17 	ldw	r2,-4(fp)
81134284:	00ffe284 	movi	r3,-118
81134288:	10c00005 	stb	r3,0(r2)
        return (0);
8113428c:	0005883a 	mov	r2,zero
81134290:	00003006 	br	81134354 <OSTmrNameGet+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
81134294:	e0bffd17 	ldw	r2,-12(fp)
81134298:	10800003 	ldbu	r2,0(r2)
8113429c:	10803fcc 	andi	r2,r2,255
811342a0:	10801920 	cmpeqi	r2,r2,100
811342a4:	1000051e 	bne	r2,zero,811342bc <OSTmrNameGet+0x94>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811342a8:	e0bfff17 	ldw	r2,-4(fp)
811342ac:	00ffe244 	movi	r3,-119
811342b0:	10c00005 	stb	r3,0(r2)
        return (0);
811342b4:	0005883a 	mov	r2,zero
811342b8:	00002606 	br	81134354 <OSTmrNameGet+0x12c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
811342bc:	d0a08b03 	ldbu	r2,-32212(gp)
811342c0:	10803fcc 	andi	r2,r2,255
811342c4:	10000526 	beq	r2,zero,811342dc <OSTmrNameGet+0xb4>
        *perr = OS_ERR_NAME_GET_ISR;
811342c8:	e0bfff17 	ldw	r2,-4(fp)
811342cc:	00c00444 	movi	r3,17
811342d0:	10c00005 	stb	r3,0(r2)
        return (0);
811342d4:	0005883a 	mov	r2,zero
811342d8:	00001e06 	br	81134354 <OSTmrNameGet+0x12c>
    }
    OSTmr_Lock();
811342dc:	1134edc0 	call	81134edc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811342e0:	e0bffd17 	ldw	r2,-12(fp)
811342e4:	10800c43 	ldbu	r2,49(r2)
811342e8:	10803fcc 	andi	r2,r2,255
811342ec:	10000e26 	beq	r2,zero,81134328 <OSTmrNameGet+0x100>
811342f0:	10001316 	blt	r2,zero,81134340 <OSTmrNameGet+0x118>
811342f4:	10800108 	cmpgei	r2,r2,4
811342f8:	1000111e 	bne	r2,zero,81134340 <OSTmrNameGet+0x118>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
811342fc:	e0bffd17 	ldw	r2,-12(fp)
81134300:	10800804 	addi	r2,r2,32
81134304:	100b883a 	mov	r5,r2
81134308:	e13ffe17 	ldw	r4,-8(fp)
8113430c:	112ce240 	call	8112ce24 <OS_StrCopy>
81134310:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
81134314:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81134318:	e0bfff17 	ldw	r2,-4(fp)
8113431c:	10000005 	stb	zero,0(r2)
             return (len);
81134320:	e0bffc03 	ldbu	r2,-16(fp)
81134324:	00000b06 	br	81134354 <OSTmrNameGet+0x12c>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
81134328:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8113432c:	e0bfff17 	ldw	r2,-4(fp)
81134330:	00ffe1c4 	movi	r3,-121
81134334:	10c00005 	stb	r3,0(r2)
             return (0);
81134338:	0005883a 	mov	r2,zero
8113433c:	00000506 	br	81134354 <OSTmrNameGet+0x12c>

        default:
             OSTmr_Unlock();
81134340:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81134344:	e0bfff17 	ldw	r2,-4(fp)
81134348:	00ffe344 	movi	r3,-115
8113434c:	10c00005 	stb	r3,0(r2)
             return (0);
81134350:	0005883a 	mov	r2,zero
    }
}
81134354:	e037883a 	mov	sp,fp
81134358:	dfc00117 	ldw	ra,4(sp)
8113435c:	df000017 	ldw	fp,0(sp)
81134360:	dec00204 	addi	sp,sp,8
81134364:	f800283a 	ret

81134368 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
81134368:	defffb04 	addi	sp,sp,-20
8113436c:	de00012e 	bgeu	sp,et,81134374 <OSTmrRemainGet+0xc>
81134370:	003b68fa 	trap	3
81134374:	dfc00415 	stw	ra,16(sp)
81134378:	df000315 	stw	fp,12(sp)
8113437c:	df000304 	addi	fp,sp,12
81134380:	e13ffe15 	stw	r4,-8(fp)
81134384:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81134388:	e0bfff17 	ldw	r2,-4(fp)
8113438c:	1000021e 	bne	r2,zero,81134398 <OSTmrRemainGet+0x30>
        return (0);
81134390:	0005883a 	mov	r2,zero
81134394:	00005d06 	br	8113450c <OSTmrRemainGet+0x1a4>
    }
    if (ptmr == (OS_TMR *)0) {
81134398:	e0bffe17 	ldw	r2,-8(fp)
8113439c:	1000051e 	bne	r2,zero,811343b4 <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
811343a0:	e0bfff17 	ldw	r2,-4(fp)
811343a4:	00ffe284 	movi	r3,-118
811343a8:	10c00005 	stb	r3,0(r2)
        return (0);
811343ac:	0005883a 	mov	r2,zero
811343b0:	00005606 	br	8113450c <OSTmrRemainGet+0x1a4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
811343b4:	e0bffe17 	ldw	r2,-8(fp)
811343b8:	10800003 	ldbu	r2,0(r2)
811343bc:	10803fcc 	andi	r2,r2,255
811343c0:	10801920 	cmpeqi	r2,r2,100
811343c4:	1000051e 	bne	r2,zero,811343dc <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811343c8:	e0bfff17 	ldw	r2,-4(fp)
811343cc:	00ffe244 	movi	r3,-119
811343d0:	10c00005 	stb	r3,0(r2)
        return (0);
811343d4:	0005883a 	mov	r2,zero
811343d8:	00004c06 	br	8113450c <OSTmrRemainGet+0x1a4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
811343dc:	d0a08b03 	ldbu	r2,-32212(gp)
811343e0:	10803fcc 	andi	r2,r2,255
811343e4:	10000526 	beq	r2,zero,811343fc <OSTmrRemainGet+0x94>
        *perr = OS_ERR_TMR_ISR;
811343e8:	e0bfff17 	ldw	r2,-4(fp)
811343ec:	00ffe2c4 	movi	r3,-117
811343f0:	10c00005 	stb	r3,0(r2)
        return (0);
811343f4:	0005883a 	mov	r2,zero
811343f8:	00004406 	br	8113450c <OSTmrRemainGet+0x1a4>
    }
    OSTmr_Lock();
811343fc:	1134edc0 	call	81134edc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81134400:	e0bffe17 	ldw	r2,-8(fp)
81134404:	10800c43 	ldbu	r2,49(r2)
81134408:	10803fcc 	andi	r2,r2,255
8113440c:	10c00060 	cmpeqi	r3,r2,1
81134410:	1800121e 	bne	r3,zero,8113445c <OSTmrRemainGet+0xf4>
81134414:	10c00088 	cmpgei	r3,r2,2
81134418:	1800021e 	bne	r3,zero,81134424 <OSTmrRemainGet+0xbc>
8113441c:	10003026 	beq	r2,zero,811344e0 <OSTmrRemainGet+0x178>
81134420:	00003506 	br	811344f8 <OSTmrRemainGet+0x190>
81134424:	10c000a0 	cmpeqi	r3,r2,2
81134428:	1800281e 	bne	r3,zero,811344cc <OSTmrRemainGet+0x164>
8113442c:	108000e0 	cmpeqi	r2,r2,3
81134430:	10003126 	beq	r2,zero,811344f8 <OSTmrRemainGet+0x190>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
81134434:	e0bffe17 	ldw	r2,-8(fp)
81134438:	10c00517 	ldw	r3,20(r2)
8113443c:	d0a08d17 	ldw	r2,-32204(gp)
81134440:	1885c83a 	sub	r2,r3,r2
81134444:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
81134448:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
8113444c:	e0bfff17 	ldw	r2,-4(fp)
81134450:	10000005 	stb	zero,0(r2)
             return (remain);
81134454:	e0bffd17 	ldw	r2,-12(fp)
81134458:	00002c06 	br	8113450c <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
8113445c:	e0bffe17 	ldw	r2,-8(fp)
81134460:	10800c03 	ldbu	r2,48(r2)
81134464:	10803fcc 	andi	r2,r2,255
81134468:	108000a0 	cmpeqi	r2,r2,2
8113446c:	10000e26 	beq	r2,zero,811344a8 <OSTmrRemainGet+0x140>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
81134470:	e0bffe17 	ldw	r2,-8(fp)
81134474:	10800617 	ldw	r2,24(r2)
81134478:	1000041e 	bne	r2,zero,8113448c <OSTmrRemainGet+0x124>
                          remain = ptmr->OSTmrPeriod;
8113447c:	e0bffe17 	ldw	r2,-8(fp)
81134480:	10800717 	ldw	r2,28(r2)
81134484:	e0bffd15 	stw	r2,-12(fp)
81134488:	00000306 	br	81134498 <OSTmrRemainGet+0x130>
                      } else {
                          remain = ptmr->OSTmrDly;
8113448c:	e0bffe17 	ldw	r2,-8(fp)
81134490:	10800617 	ldw	r2,24(r2)
81134494:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
81134498:	1134f200 	call	81134f20 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
8113449c:	e0bfff17 	ldw	r2,-4(fp)
811344a0:	10000005 	stb	zero,0(r2)
                      break;
811344a4:	00000706 	br	811344c4 <OSTmrRemainGet+0x15c>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
811344a8:	e0bffe17 	ldw	r2,-8(fp)
811344ac:	10800617 	ldw	r2,24(r2)
811344b0:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
811344b4:	1134f200 	call	81134f20 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
811344b8:	e0bfff17 	ldw	r2,-4(fp)
811344bc:	10000005 	stb	zero,0(r2)
                      break;
811344c0:	0001883a 	nop
             }
             return (remain);
811344c4:	e0bffd17 	ldw	r2,-12(fp)
811344c8:	00001006 	br	8113450c <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
811344cc:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811344d0:	e0bfff17 	ldw	r2,-4(fp)
811344d4:	10000005 	stb	zero,0(r2)
             return (0);
811344d8:	0005883a 	mov	r2,zero
811344dc:	00000b06 	br	8113450c <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
811344e0:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
811344e4:	e0bfff17 	ldw	r2,-4(fp)
811344e8:	00ffe1c4 	movi	r3,-121
811344ec:	10c00005 	stb	r3,0(r2)
             return (0);
811344f0:	0005883a 	mov	r2,zero
811344f4:	00000506 	br	8113450c <OSTmrRemainGet+0x1a4>

        default:
             OSTmr_Unlock();
811344f8:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
811344fc:	e0bfff17 	ldw	r2,-4(fp)
81134500:	00ffe344 	movi	r3,-115
81134504:	10c00005 	stb	r3,0(r2)
             return (0);
81134508:	0005883a 	mov	r2,zero
    }
}
8113450c:	e037883a 	mov	sp,fp
81134510:	dfc00117 	ldw	ra,4(sp)
81134514:	df000017 	ldw	fp,0(sp)
81134518:	dec00204 	addi	sp,sp,8
8113451c:	f800283a 	ret

81134520 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
81134520:	defffb04 	addi	sp,sp,-20
81134524:	de00012e 	bgeu	sp,et,8113452c <OSTmrStateGet+0xc>
81134528:	003b68fa 	trap	3
8113452c:	dfc00415 	stw	ra,16(sp)
81134530:	df000315 	stw	fp,12(sp)
81134534:	df000304 	addi	fp,sp,12
81134538:	e13ffe15 	stw	r4,-8(fp)
8113453c:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81134540:	e0bfff17 	ldw	r2,-4(fp)
81134544:	1000021e 	bne	r2,zero,81134550 <OSTmrStateGet+0x30>
        return (0);
81134548:	0005883a 	mov	r2,zero
8113454c:	00002a06 	br	811345f8 <OSTmrStateGet+0xd8>
    }
    if (ptmr == (OS_TMR *)0) {
81134550:	e0bffe17 	ldw	r2,-8(fp)
81134554:	1000051e 	bne	r2,zero,8113456c <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81134558:	e0bfff17 	ldw	r2,-4(fp)
8113455c:	00ffe284 	movi	r3,-118
81134560:	10c00005 	stb	r3,0(r2)
        return (0);
81134564:	0005883a 	mov	r2,zero
81134568:	00002306 	br	811345f8 <OSTmrStateGet+0xd8>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8113456c:	e0bffe17 	ldw	r2,-8(fp)
81134570:	10800003 	ldbu	r2,0(r2)
81134574:	10803fcc 	andi	r2,r2,255
81134578:	10801920 	cmpeqi	r2,r2,100
8113457c:	1000051e 	bne	r2,zero,81134594 <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81134580:	e0bfff17 	ldw	r2,-4(fp)
81134584:	00ffe244 	movi	r3,-119
81134588:	10c00005 	stb	r3,0(r2)
        return (0);
8113458c:	0005883a 	mov	r2,zero
81134590:	00001906 	br	811345f8 <OSTmrStateGet+0xd8>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
81134594:	d0a08b03 	ldbu	r2,-32212(gp)
81134598:	10803fcc 	andi	r2,r2,255
8113459c:	10000526 	beq	r2,zero,811345b4 <OSTmrStateGet+0x94>
        *perr = OS_ERR_TMR_ISR;
811345a0:	e0bfff17 	ldw	r2,-4(fp)
811345a4:	00ffe2c4 	movi	r3,-117
811345a8:	10c00005 	stb	r3,0(r2)
        return (0);
811345ac:	0005883a 	mov	r2,zero
811345b0:	00001106 	br	811345f8 <OSTmrStateGet+0xd8>
    }
    OSTmr_Lock();
811345b4:	1134edc0 	call	81134edc <OSTmr_Lock>
    state = ptmr->OSTmrState;
811345b8:	e0bffe17 	ldw	r2,-8(fp)
811345bc:	10800c43 	ldbu	r2,49(r2)
811345c0:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
811345c4:	e0bffd03 	ldbu	r2,-12(fp)
811345c8:	1005883a 	mov	r2,r2
811345cc:	10800128 	cmpgeui	r2,r2,4
811345d0:	1000031e 	bne	r2,zero,811345e0 <OSTmrStateGet+0xc0>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
811345d4:	e0bfff17 	ldw	r2,-4(fp)
811345d8:	10000005 	stb	zero,0(r2)
             break;
811345dc:	00000406 	br	811345f0 <OSTmrStateGet+0xd0>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
811345e0:	e0bfff17 	ldw	r2,-4(fp)
811345e4:	00ffe344 	movi	r3,-115
811345e8:	10c00005 	stb	r3,0(r2)
             break;
811345ec:	0001883a 	nop
    }
    OSTmr_Unlock();
811345f0:	1134f200 	call	81134f20 <OSTmr_Unlock>
    return (state);
811345f4:	e0bffd03 	ldbu	r2,-12(fp)
}
811345f8:	e037883a 	mov	sp,fp
811345fc:	dfc00117 	ldw	ra,4(sp)
81134600:	df000017 	ldw	fp,0(sp)
81134604:	dec00204 	addi	sp,sp,8
81134608:	f800283a 	ret

8113460c <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
8113460c:	defffc04 	addi	sp,sp,-16
81134610:	de00012e 	bgeu	sp,et,81134618 <OSTmrStart+0xc>
81134614:	003b68fa 	trap	3
81134618:	dfc00315 	stw	ra,12(sp)
8113461c:	df000215 	stw	fp,8(sp)
81134620:	df000204 	addi	fp,sp,8
81134624:	e13ffe15 	stw	r4,-8(fp)
81134628:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8113462c:	e0bfff17 	ldw	r2,-4(fp)
81134630:	1000021e 	bne	r2,zero,8113463c <OSTmrStart+0x30>
        return (OS_FALSE);
81134634:	0005883a 	mov	r2,zero
81134638:	00004106 	br	81134740 <OSTmrStart+0x134>
    }
    if (ptmr == (OS_TMR *)0) {
8113463c:	e0bffe17 	ldw	r2,-8(fp)
81134640:	1000051e 	bne	r2,zero,81134658 <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81134644:	e0bfff17 	ldw	r2,-4(fp)
81134648:	00ffe284 	movi	r3,-118
8113464c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81134650:	0005883a 	mov	r2,zero
81134654:	00003a06 	br	81134740 <OSTmrStart+0x134>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81134658:	e0bffe17 	ldw	r2,-8(fp)
8113465c:	10800003 	ldbu	r2,0(r2)
81134660:	10803fcc 	andi	r2,r2,255
81134664:	10801920 	cmpeqi	r2,r2,100
81134668:	1000051e 	bne	r2,zero,81134680 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8113466c:	e0bfff17 	ldw	r2,-4(fp)
81134670:	00ffe244 	movi	r3,-119
81134674:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81134678:	0005883a 	mov	r2,zero
8113467c:	00003006 	br	81134740 <OSTmrStart+0x134>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81134680:	d0a08b03 	ldbu	r2,-32212(gp)
81134684:	10803fcc 	andi	r2,r2,255
81134688:	10000526 	beq	r2,zero,811346a0 <OSTmrStart+0x94>
        *perr  = OS_ERR_TMR_ISR;
8113468c:	e0bfff17 	ldw	r2,-4(fp)
81134690:	00ffe2c4 	movi	r3,-117
81134694:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81134698:	0005883a 	mov	r2,zero
8113469c:	00002806 	br	81134740 <OSTmrStart+0x134>
    }
    OSTmr_Lock();
811346a0:	1134edc0 	call	81134edc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811346a4:	e0bffe17 	ldw	r2,-8(fp)
811346a8:	10800c43 	ldbu	r2,49(r2)
811346ac:	10803fcc 	andi	r2,r2,255
811346b0:	10c000c8 	cmpgei	r3,r2,3
811346b4:	1800031e 	bne	r3,zero,811346c4 <OSTmrStart+0xb8>
811346b8:	00800e16 	blt	zero,r2,811346f4 <OSTmrStart+0xe8>
811346bc:	10001526 	beq	r2,zero,81134714 <OSTmrStart+0x108>
811346c0:	00001a06 	br	8113472c <OSTmrStart+0x120>
811346c4:	108000e0 	cmpeqi	r2,r2,3
811346c8:	10001826 	beq	r2,zero,8113472c <OSTmrStart+0x120>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
811346cc:	e13ffe17 	ldw	r4,-8(fp)
811346d0:	1134de00 	call	81134de0 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
811346d4:	000b883a 	mov	r5,zero
811346d8:	e13ffe17 	ldw	r4,-8(fp)
811346dc:	1134c900 	call	81134c90 <OSTmr_Link>
             OSTmr_Unlock();
811346e0:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811346e4:	e0bfff17 	ldw	r2,-4(fp)
811346e8:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
811346ec:	00800044 	movi	r2,1
811346f0:	00001306 	br	81134740 <OSTmrStart+0x134>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
811346f4:	000b883a 	mov	r5,zero
811346f8:	e13ffe17 	ldw	r4,-8(fp)
811346fc:	1134c900 	call	81134c90 <OSTmr_Link>
             OSTmr_Unlock();
81134700:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81134704:	e0bfff17 	ldw	r2,-4(fp)
81134708:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8113470c:	00800044 	movi	r2,1
81134710:	00000b06 	br	81134740 <OSTmrStart+0x134>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
81134714:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81134718:	e0bfff17 	ldw	r2,-4(fp)
8113471c:	00ffe1c4 	movi	r3,-121
81134720:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81134724:	0005883a 	mov	r2,zero
81134728:	00000506 	br	81134740 <OSTmrStart+0x134>

        default:
             OSTmr_Unlock();
8113472c:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81134730:	e0bfff17 	ldw	r2,-4(fp)
81134734:	00ffe344 	movi	r3,-115
81134738:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8113473c:	0005883a 	mov	r2,zero
    }
}
81134740:	e037883a 	mov	sp,fp
81134744:	dfc00117 	ldw	ra,4(sp)
81134748:	df000017 	ldw	fp,0(sp)
8113474c:	dec00204 	addi	sp,sp,8
81134750:	f800283a 	ret

81134754 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
81134754:	defff904 	addi	sp,sp,-28
81134758:	de00012e 	bgeu	sp,et,81134760 <OSTmrStop+0xc>
8113475c:	003b68fa 	trap	3
81134760:	dfc00615 	stw	ra,24(sp)
81134764:	df000515 	stw	fp,20(sp)
81134768:	df000504 	addi	fp,sp,20
8113476c:	e13ffc15 	stw	r4,-16(fp)
81134770:	2805883a 	mov	r2,r5
81134774:	e1bffe15 	stw	r6,-8(fp)
81134778:	e1ffff15 	stw	r7,-4(fp)
8113477c:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
81134780:	e0bfff17 	ldw	r2,-4(fp)
81134784:	1000021e 	bne	r2,zero,81134790 <OSTmrStop+0x3c>
        return (OS_FALSE);
81134788:	0005883a 	mov	r2,zero
8113478c:	00006606 	br	81134928 <OSTmrStop+0x1d4>
    }
    if (ptmr == (OS_TMR *)0) {
81134790:	e0bffc17 	ldw	r2,-16(fp)
81134794:	1000051e 	bne	r2,zero,811347ac <OSTmrStop+0x58>
        *perr = OS_ERR_TMR_INVALID;
81134798:	e0bfff17 	ldw	r2,-4(fp)
8113479c:	00ffe284 	movi	r3,-118
811347a0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811347a4:	0005883a 	mov	r2,zero
811347a8:	00005f06 	br	81134928 <OSTmrStop+0x1d4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
811347ac:	e0bffc17 	ldw	r2,-16(fp)
811347b0:	10800003 	ldbu	r2,0(r2)
811347b4:	10803fcc 	andi	r2,r2,255
811347b8:	10801920 	cmpeqi	r2,r2,100
811347bc:	1000051e 	bne	r2,zero,811347d4 <OSTmrStop+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811347c0:	e0bfff17 	ldw	r2,-4(fp)
811347c4:	00ffe244 	movi	r3,-119
811347c8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811347cc:	0005883a 	mov	r2,zero
811347d0:	00005506 	br	81134928 <OSTmrStop+0x1d4>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
811347d4:	d0a08b03 	ldbu	r2,-32212(gp)
811347d8:	10803fcc 	andi	r2,r2,255
811347dc:	10000526 	beq	r2,zero,811347f4 <OSTmrStop+0xa0>
        *perr  = OS_ERR_TMR_ISR;
811347e0:	e0bfff17 	ldw	r2,-4(fp)
811347e4:	00ffe2c4 	movi	r3,-117
811347e8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811347ec:	0005883a 	mov	r2,zero
811347f0:	00004d06 	br	81134928 <OSTmrStop+0x1d4>
    }
    OSTmr_Lock();
811347f4:	1134edc0 	call	81134edc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811347f8:	e0bffc17 	ldw	r2,-16(fp)
811347fc:	10800c43 	ldbu	r2,49(r2)
81134800:	10803fcc 	andi	r2,r2,255
81134804:	10c000c8 	cmpgei	r3,r2,3
81134808:	1800031e 	bne	r3,zero,81134818 <OSTmrStop+0xc4>
8113480c:	00803516 	blt	zero,r2,811348e4 <OSTmrStop+0x190>
81134810:	10003a26 	beq	r2,zero,811348fc <OSTmrStop+0x1a8>
81134814:	00003f06 	br	81134914 <OSTmrStop+0x1c0>
81134818:	108000e0 	cmpeqi	r2,r2,3
8113481c:	10003d26 	beq	r2,zero,81134914 <OSTmrStop+0x1c0>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
81134820:	e13ffc17 	ldw	r4,-16(fp)
81134824:	1134de00 	call	81134de0 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
81134828:	e0bfff17 	ldw	r2,-4(fp)
8113482c:	10000005 	stb	zero,0(r2)
             switch (opt) {
81134830:	e0bffd03 	ldbu	r2,-12(fp)
81134834:	10c000e0 	cmpeqi	r3,r2,3
81134838:	1800041e 	bne	r3,zero,8113484c <OSTmrStop+0xf8>
8113483c:	10c00120 	cmpeqi	r3,r2,4
81134840:	1800121e 	bne	r3,zero,8113488c <OSTmrStop+0x138>
81134844:	10002326 	beq	r2,zero,811348d4 <OSTmrStop+0x180>
81134848:	00001e06 	br	811348c4 <OSTmrStop+0x170>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
8113484c:	e0bffc17 	ldw	r2,-16(fp)
81134850:	10800117 	ldw	r2,4(r2)
81134854:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81134858:	e0bffb17 	ldw	r2,-20(fp)
8113485c:	10000726 	beq	r2,zero,8113487c <OSTmrStop+0x128>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
81134860:	e0bffc17 	ldw	r2,-16(fp)
81134864:	10c00217 	ldw	r3,8(r2)
81134868:	e0bffb17 	ldw	r2,-20(fp)
8113486c:	180b883a 	mov	r5,r3
81134870:	e13ffc17 	ldw	r4,-16(fp)
81134874:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
81134878:	00001706 	br	811348d8 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
8113487c:	e0bfff17 	ldw	r2,-4(fp)
81134880:	00ffe3c4 	movi	r3,-113
81134884:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81134888:	00001306 	br	811348d8 <OSTmrStop+0x184>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
8113488c:	e0bffc17 	ldw	r2,-16(fp)
81134890:	10800117 	ldw	r2,4(r2)
81134894:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81134898:	e0bffb17 	ldw	r2,-20(fp)
8113489c:	10000526 	beq	r2,zero,811348b4 <OSTmrStop+0x160>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
811348a0:	e0bffb17 	ldw	r2,-20(fp)
811348a4:	e17ffe17 	ldw	r5,-8(fp)
811348a8:	e13ffc17 	ldw	r4,-16(fp)
811348ac:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
811348b0:	00000906 	br	811348d8 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
811348b4:	e0bfff17 	ldw	r2,-4(fp)
811348b8:	00ffe3c4 	movi	r3,-113
811348bc:	10c00005 	stb	r3,0(r2)
                      }
                      break;
811348c0:	00000506 	br	811348d8 <OSTmrStop+0x184>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
811348c4:	e0bfff17 	ldw	r2,-4(fp)
811348c8:	00ffe104 	movi	r3,-124
811348cc:	10c00005 	stb	r3,0(r2)
                     break;
811348d0:	00000106 	br	811348d8 <OSTmrStop+0x184>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
811348d4:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
811348d8:	1134f200 	call	81134f20 <OSTmr_Unlock>
             return (OS_TRUE);
811348dc:	00800044 	movi	r2,1
811348e0:	00001106 	br	81134928 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
811348e4:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
811348e8:	e0bfff17 	ldw	r2,-4(fp)
811348ec:	00ffe384 	movi	r3,-114
811348f0:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
811348f4:	00800044 	movi	r2,1
811348f8:	00000b06 	br	81134928 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
811348fc:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81134900:	e0bfff17 	ldw	r2,-4(fp)
81134904:	00ffe1c4 	movi	r3,-121
81134908:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8113490c:	0005883a 	mov	r2,zero
81134910:	00000506 	br	81134928 <OSTmrStop+0x1d4>

        default:
             OSTmr_Unlock();
81134914:	1134f200 	call	81134f20 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81134918:	e0bfff17 	ldw	r2,-4(fp)
8113491c:	00ffe344 	movi	r3,-115
81134920:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81134924:	0005883a 	mov	r2,zero
    }
}
81134928:	e037883a 	mov	sp,fp
8113492c:	dfc00117 	ldw	ra,4(sp)
81134930:	df000017 	ldw	fp,0(sp)
81134934:	dec00204 	addi	sp,sp,8
81134938:	f800283a 	ret

8113493c <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
8113493c:	defffd04 	addi	sp,sp,-12
81134940:	de00012e 	bgeu	sp,et,81134948 <OSTmrSignal+0xc>
81134944:	003b68fa 	trap	3
81134948:	dfc00215 	stw	ra,8(sp)
8113494c:	df000115 	stw	fp,4(sp)
81134950:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
81134954:	d0a07a17 	ldw	r2,-32280(gp)
81134958:	1009883a 	mov	r4,r2
8113495c:	1131f080 	call	81131f08 <OSSemPost>
81134960:	e0bfff05 	stb	r2,-4(fp)
    return (err);
81134964:	e0bfff03 	ldbu	r2,-4(fp)
}
81134968:	e037883a 	mov	sp,fp
8113496c:	dfc00117 	ldw	ra,4(sp)
81134970:	df000017 	ldw	fp,0(sp)
81134974:	dec00204 	addi	sp,sp,8
81134978:	f800283a 	ret

8113497c <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
8113497c:	defffe04 	addi	sp,sp,-8
81134980:	de00012e 	bgeu	sp,et,81134988 <OSTmr_Alloc+0xc>
81134984:	003b68fa 	trap	3
81134988:	df000115 	stw	fp,4(sp)
8113498c:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
81134990:	d0a07817 	ldw	r2,-32288(gp)
81134994:	1000021e 	bne	r2,zero,811349a0 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
81134998:	0005883a 	mov	r2,zero
8113499c:	00001006 	br	811349e0 <OSTmr_Alloc+0x64>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
811349a0:	d0a07817 	ldw	r2,-32288(gp)
811349a4:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
811349a8:	e0bfff17 	ldw	r2,-4(fp)
811349ac:	10800317 	ldw	r2,12(r2)
811349b0:	d0a07815 	stw	r2,-32288(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
811349b4:	e0bfff17 	ldw	r2,-4(fp)
811349b8:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
811349bc:	e0bfff17 	ldw	r2,-4(fp)
811349c0:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
811349c4:	d0a07d0b 	ldhu	r2,-32268(gp)
811349c8:	10800044 	addi	r2,r2,1
811349cc:	d0a07d0d 	sth	r2,-32268(gp)
    OSTmrFree--;
811349d0:	d0a0810b 	ldhu	r2,-32252(gp)
811349d4:	10bfffc4 	addi	r2,r2,-1
811349d8:	d0a0810d 	sth	r2,-32252(gp)
    return (ptmr);
811349dc:	e0bfff17 	ldw	r2,-4(fp)
}
811349e0:	e037883a 	mov	sp,fp
811349e4:	df000017 	ldw	fp,0(sp)
811349e8:	dec00104 	addi	sp,sp,4
811349ec:	f800283a 	ret

811349f0 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
811349f0:	defffe04 	addi	sp,sp,-8
811349f4:	de00012e 	bgeu	sp,et,811349fc <OSTmr_Free+0xc>
811349f8:	003b68fa 	trap	3
811349fc:	df000115 	stw	fp,4(sp)
81134a00:	df000104 	addi	fp,sp,4
81134a04:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
81134a08:	e0bfff17 	ldw	r2,-4(fp)
81134a0c:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
81134a10:	e0bfff17 	ldw	r2,-4(fp)
81134a14:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
81134a18:	e0bfff17 	ldw	r2,-4(fp)
81134a1c:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
81134a20:	e0bfff17 	ldw	r2,-4(fp)
81134a24:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
81134a28:	e0bfff17 	ldw	r2,-4(fp)
81134a2c:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
81134a30:	e0bfff17 	ldw	r2,-4(fp)
81134a34:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
81134a38:	e0bfff17 	ldw	r2,-4(fp)
81134a3c:	00c00fc4 	movi	r3,63
81134a40:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
81134a44:	e0bfff17 	ldw	r2,-4(fp)
81134a48:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
81134a4c:	e0bfff17 	ldw	r2,-4(fp)
81134a50:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
81134a54:	d0e07817 	ldw	r3,-32288(gp)
81134a58:	e0bfff17 	ldw	r2,-4(fp)
81134a5c:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
81134a60:	e0bfff17 	ldw	r2,-4(fp)
81134a64:	d0a07815 	stw	r2,-32288(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
81134a68:	d0a07d0b 	ldhu	r2,-32268(gp)
81134a6c:	10bfffc4 	addi	r2,r2,-1
81134a70:	d0a07d0d 	sth	r2,-32268(gp)
    OSTmrFree++;
81134a74:	d0a0810b 	ldhu	r2,-32252(gp)
81134a78:	10800044 	addi	r2,r2,1
81134a7c:	d0a0810d 	sth	r2,-32252(gp)
}
81134a80:	0001883a 	nop
81134a84:	e037883a 	mov	sp,fp
81134a88:	df000017 	ldw	fp,0(sp)
81134a8c:	dec00104 	addi	sp,sp,4
81134a90:	f800283a 	ret

81134a94 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
81134a94:	defffa04 	addi	sp,sp,-24
81134a98:	de00012e 	bgeu	sp,et,81134aa0 <OSTmr_Init+0xc>
81134a9c:	003b68fa 	trap	3
81134aa0:	dfc00515 	stw	ra,20(sp)
81134aa4:	df000415 	stw	fp,16(sp)
81134aa8:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
81134aac:	01406804 	movi	r5,416
81134ab0:	01204574 	movhi	r4,33045
81134ab4:	210dda04 	addi	r4,r4,14184
81134ab8:	112cc040 	call	8112cc04 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
81134abc:	01400404 	movi	r5,16
81134ac0:	01204574 	movhi	r4,33045
81134ac4:	210c7604 	addi	r4,r4,12760
81134ac8:	112cc040 	call	8112cc04 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
81134acc:	00a04574 	movhi	r2,33045
81134ad0:	108dda04 	addi	r2,r2,14184
81134ad4:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
81134ad8:	00a04574 	movhi	r2,33045
81134adc:	108de704 	addi	r2,r2,14236
81134ae0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81134ae4:	e03ffc0d 	sth	zero,-16(fp)
81134ae8:	00001606 	br	81134b44 <OSTmr_Init+0xb0>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
81134aec:	e0bffd17 	ldw	r2,-12(fp)
81134af0:	00c01904 	movi	r3,100
81134af4:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
81134af8:	e0bffd17 	ldw	r2,-12(fp)
81134afc:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
81134b00:	e0bffd17 	ldw	r2,-12(fp)
81134b04:	e0fffe17 	ldw	r3,-8(fp)
81134b08:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
81134b0c:	e0bffd17 	ldw	r2,-12(fp)
81134b10:	00c00fc4 	movi	r3,63
81134b14:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81134b18:	e0bffd17 	ldw	r2,-12(fp)
81134b1c:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
81134b20:	e0bffd17 	ldw	r2,-12(fp)
81134b24:	10800d04 	addi	r2,r2,52
81134b28:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
81134b2c:	e0bffe17 	ldw	r2,-8(fp)
81134b30:	10800d04 	addi	r2,r2,52
81134b34:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81134b38:	e0bffc0b 	ldhu	r2,-16(fp)
81134b3c:	10800044 	addi	r2,r2,1
81134b40:	e0bffc0d 	sth	r2,-16(fp)
81134b44:	e0bffc0b 	ldhu	r2,-16(fp)
81134b48:	108001f0 	cmpltui	r2,r2,7
81134b4c:	103fe71e 	bne	r2,zero,81134aec <__reset+0xfb114aec>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
81134b50:	e0bffd17 	ldw	r2,-12(fp)
81134b54:	00c01904 	movi	r3,100
81134b58:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
81134b5c:	e0bffd17 	ldw	r2,-12(fp)
81134b60:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
81134b64:	e0bffd17 	ldw	r2,-12(fp)
81134b68:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
81134b6c:	e0bffd17 	ldw	r2,-12(fp)
81134b70:	00c00fc4 	movi	r3,63
81134b74:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81134b78:	e0bffd17 	ldw	r2,-12(fp)
81134b7c:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
81134b80:	d0208d15 	stw	zero,-32204(gp)
    OSTmrUsed           = 0;
81134b84:	d0207d0d 	sth	zero,-32268(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
81134b88:	00800204 	movi	r2,8
81134b8c:	d0a0810d 	sth	r2,-32252(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
81134b90:	00a04574 	movhi	r2,33045
81134b94:	108dda04 	addi	r2,r2,14184
81134b98:	d0a07815 	stw	r2,-32288(gp)
    OSTmrSem            = OSSemCreate(1);
81134b9c:	01000044 	movi	r4,1
81134ba0:	11318580 	call	81131858 <OSSemCreate>
81134ba4:	d0a08f15 	stw	r2,-32196(gp)
    OSTmrSemSignal      = OSSemCreate(0);
81134ba8:	0009883a 	mov	r4,zero
81134bac:	11318580 	call	81131858 <OSSemCreate>
81134bb0:	d0a07a15 	stw	r2,-32280(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
81134bb4:	d0a08f17 	ldw	r2,-32196(gp)
81134bb8:	e0ffff04 	addi	r3,fp,-4
81134bbc:	180d883a 	mov	r6,r3
81134bc0:	01604534 	movhi	r5,33044
81134bc4:	294a5a04 	addi	r5,r5,10600
81134bc8:	1009883a 	mov	r4,r2
81134bcc:	112b3dc0 	call	8112b3dc <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
81134bd0:	d0a07a17 	ldw	r2,-32280(gp)
81134bd4:	e0ffff04 	addi	r3,fp,-4
81134bd8:	180d883a 	mov	r6,r3
81134bdc:	01604534 	movhi	r5,33044
81134be0:	294a5f04 	addi	r5,r5,10620
81134be4:	1009883a 	mov	r4,r2
81134be8:	112b3dc0 	call	8112b3dc <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
81134bec:	1134c080 	call	81134c08 <OSTmr_InitTask>
}
81134bf0:	0001883a 	nop
81134bf4:	e037883a 	mov	sp,fp
81134bf8:	dfc00117 	ldw	ra,4(sp)
81134bfc:	df000017 	ldw	fp,0(sp)
81134c00:	dec00204 	addi	sp,sp,8
81134c04:	f800283a 	ret

81134c08 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
81134c08:	defff804 	addi	sp,sp,-32
81134c0c:	de00012e 	bgeu	sp,et,81134c14 <OSTmr_InitTask+0xc>
81134c10:	003b68fa 	trap	3
81134c14:	dfc00715 	stw	ra,28(sp)
81134c18:	df000615 	stw	fp,24(sp)
81134c1c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
81134c20:	008000c4 	movi	r2,3
81134c24:	d8800415 	stw	r2,16(sp)
81134c28:	d8000315 	stw	zero,12(sp)
81134c2c:	00808004 	movi	r2,512
81134c30:	d8800215 	stw	r2,8(sp)
81134c34:	00a04574 	movhi	r2,33045
81134c38:	1095ae04 	addi	r2,r2,22200
81134c3c:	d8800115 	stw	r2,4(sp)
81134c40:	00bfff54 	movui	r2,65533
81134c44:	d8800015 	stw	r2,0(sp)
81134c48:	01c00484 	movi	r7,18
81134c4c:	01a04574 	movhi	r6,33045
81134c50:	3197ad04 	addi	r6,r6,24244
81134c54:	000b883a 	mov	r5,zero
81134c58:	012044f4 	movhi	r4,33043
81134c5c:	2113d704 	addi	r4,r4,20316
81134c60:	11328ec0 	call	811328ec <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
81134c64:	e1bfff04 	addi	r6,fp,-4
81134c68:	01604534 	movhi	r5,33044
81134c6c:	294a6404 	addi	r5,r5,10640
81134c70:	01000484 	movi	r4,18
81134c74:	113311c0 	call	8113311c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
81134c78:	0001883a 	nop
81134c7c:	e037883a 	mov	sp,fp
81134c80:	dfc00117 	ldw	ra,4(sp)
81134c84:	df000017 	ldw	fp,0(sp)
81134c88:	dec00204 	addi	sp,sp,8
81134c8c:	f800283a 	ret

81134c90 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
81134c90:	defffa04 	addi	sp,sp,-24
81134c94:	de00012e 	bgeu	sp,et,81134c9c <OSTmr_Link+0xc>
81134c98:	003b68fa 	trap	3
81134c9c:	df000515 	stw	fp,20(sp)
81134ca0:	df000504 	addi	fp,sp,20
81134ca4:	e13ffe15 	stw	r4,-8(fp)
81134ca8:	2805883a 	mov	r2,r5
81134cac:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
81134cb0:	e0bffe17 	ldw	r2,-8(fp)
81134cb4:	00c000c4 	movi	r3,3
81134cb8:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
81134cbc:	e0bfff03 	ldbu	r2,-4(fp)
81134cc0:	10800058 	cmpnei	r2,r2,1
81134cc4:	1000071e 	bne	r2,zero,81134ce4 <OSTmr_Link+0x54>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81134cc8:	e0bffe17 	ldw	r2,-8(fp)
81134ccc:	10c00717 	ldw	r3,28(r2)
81134cd0:	d0a08d17 	ldw	r2,-32204(gp)
81134cd4:	1887883a 	add	r3,r3,r2
81134cd8:	e0bffe17 	ldw	r2,-8(fp)
81134cdc:	10c00515 	stw	r3,20(r2)
81134ce0:	00001006 	br	81134d24 <OSTmr_Link+0x94>
    } else {
        if (ptmr->OSTmrDly == 0) {
81134ce4:	e0bffe17 	ldw	r2,-8(fp)
81134ce8:	10800617 	ldw	r2,24(r2)
81134cec:	1000071e 	bne	r2,zero,81134d0c <OSTmr_Link+0x7c>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81134cf0:	e0bffe17 	ldw	r2,-8(fp)
81134cf4:	10c00717 	ldw	r3,28(r2)
81134cf8:	d0a08d17 	ldw	r2,-32204(gp)
81134cfc:	1887883a 	add	r3,r3,r2
81134d00:	e0bffe17 	ldw	r2,-8(fp)
81134d04:	10c00515 	stw	r3,20(r2)
81134d08:	00000606 	br	81134d24 <OSTmr_Link+0x94>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
81134d0c:	e0bffe17 	ldw	r2,-8(fp)
81134d10:	10c00617 	ldw	r3,24(r2)
81134d14:	d0a08d17 	ldw	r2,-32204(gp)
81134d18:	1887883a 	add	r3,r3,r2
81134d1c:	e0bffe17 	ldw	r2,-8(fp)
81134d20:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
81134d24:	e0bffe17 	ldw	r2,-8(fp)
81134d28:	10800517 	ldw	r2,20(r2)
81134d2c:	1080004c 	andi	r2,r2,1
81134d30:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81134d34:	e0bffb0b 	ldhu	r2,-20(fp)
81134d38:	100690fa 	slli	r3,r2,3
81134d3c:	00a04574 	movhi	r2,33045
81134d40:	108c7604 	addi	r2,r2,12760
81134d44:	1885883a 	add	r2,r3,r2
81134d48:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
81134d4c:	e0bffc17 	ldw	r2,-16(fp)
81134d50:	10800017 	ldw	r2,0(r2)
81134d54:	1000091e 	bne	r2,zero,81134d7c <OSTmr_Link+0xec>
        pspoke->OSTmrFirst   = ptmr;
81134d58:	e0bffc17 	ldw	r2,-16(fp)
81134d5c:	e0fffe17 	ldw	r3,-8(fp)
81134d60:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
81134d64:	e0bffe17 	ldw	r2,-8(fp)
81134d68:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
81134d6c:	e0bffc17 	ldw	r2,-16(fp)
81134d70:	00c00044 	movi	r3,1
81134d74:	10c0010d 	sth	r3,4(r2)
81134d78:	00001206 	br	81134dc4 <OSTmr_Link+0x134>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
81134d7c:	e0bffc17 	ldw	r2,-16(fp)
81134d80:	10800017 	ldw	r2,0(r2)
81134d84:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
81134d88:	e0bffc17 	ldw	r2,-16(fp)
81134d8c:	e0fffe17 	ldw	r3,-8(fp)
81134d90:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
81134d94:	e0bffe17 	ldw	r2,-8(fp)
81134d98:	e0fffd17 	ldw	r3,-12(fp)
81134d9c:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
81134da0:	e0bffd17 	ldw	r2,-12(fp)
81134da4:	e0fffe17 	ldw	r3,-8(fp)
81134da8:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
81134dac:	e0bffc17 	ldw	r2,-16(fp)
81134db0:	1080010b 	ldhu	r2,4(r2)
81134db4:	10800044 	addi	r2,r2,1
81134db8:	1007883a 	mov	r3,r2
81134dbc:	e0bffc17 	ldw	r2,-16(fp)
81134dc0:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
81134dc4:	e0bffe17 	ldw	r2,-8(fp)
81134dc8:	10000415 	stw	zero,16(r2)
}
81134dcc:	0001883a 	nop
81134dd0:	e037883a 	mov	sp,fp
81134dd4:	df000017 	ldw	fp,0(sp)
81134dd8:	dec00104 	addi	sp,sp,4
81134ddc:	f800283a 	ret

81134de0 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
81134de0:	defffa04 	addi	sp,sp,-24
81134de4:	de00012e 	bgeu	sp,et,81134dec <OSTmr_Unlink+0xc>
81134de8:	003b68fa 	trap	3
81134dec:	df000515 	stw	fp,20(sp)
81134df0:	df000504 	addi	fp,sp,20
81134df4:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
81134df8:	e0bfff17 	ldw	r2,-4(fp)
81134dfc:	10800517 	ldw	r2,20(r2)
81134e00:	1080004c 	andi	r2,r2,1
81134e04:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81134e08:	e0bffb0b 	ldhu	r2,-20(fp)
81134e0c:	100690fa 	slli	r3,r2,3
81134e10:	00a04574 	movhi	r2,33045
81134e14:	108c7604 	addi	r2,r2,12760
81134e18:	1885883a 	add	r2,r3,r2
81134e1c:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
81134e20:	e0bffc17 	ldw	r2,-16(fp)
81134e24:	10c00017 	ldw	r3,0(r2)
81134e28:	e0bfff17 	ldw	r2,-4(fp)
81134e2c:	18800b1e 	bne	r3,r2,81134e5c <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
81134e30:	e0bfff17 	ldw	r2,-4(fp)
81134e34:	10800317 	ldw	r2,12(r2)
81134e38:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
81134e3c:	e0bffc17 	ldw	r2,-16(fp)
81134e40:	e0fffd17 	ldw	r3,-12(fp)
81134e44:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
81134e48:	e0bffd17 	ldw	r2,-12(fp)
81134e4c:	10001126 	beq	r2,zero,81134e94 <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
81134e50:	e0bffd17 	ldw	r2,-12(fp)
81134e54:	10000415 	stw	zero,16(r2)
81134e58:	00000e06 	br	81134e94 <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
81134e5c:	e0bfff17 	ldw	r2,-4(fp)
81134e60:	10800417 	ldw	r2,16(r2)
81134e64:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
81134e68:	e0bfff17 	ldw	r2,-4(fp)
81134e6c:	10800317 	ldw	r2,12(r2)
81134e70:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
81134e74:	e0bffd17 	ldw	r2,-12(fp)
81134e78:	e0fffe17 	ldw	r3,-8(fp)
81134e7c:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
81134e80:	e0bffe17 	ldw	r2,-8(fp)
81134e84:	10000326 	beq	r2,zero,81134e94 <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
81134e88:	e0bffe17 	ldw	r2,-8(fp)
81134e8c:	e0fffd17 	ldw	r3,-12(fp)
81134e90:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
81134e94:	e0bfff17 	ldw	r2,-4(fp)
81134e98:	00c00044 	movi	r3,1
81134e9c:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
81134ea0:	e0bfff17 	ldw	r2,-4(fp)
81134ea4:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
81134ea8:	e0bfff17 	ldw	r2,-4(fp)
81134eac:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
81134eb0:	e0bffc17 	ldw	r2,-16(fp)
81134eb4:	1080010b 	ldhu	r2,4(r2)
81134eb8:	10bfffc4 	addi	r2,r2,-1
81134ebc:	1007883a 	mov	r3,r2
81134ec0:	e0bffc17 	ldw	r2,-16(fp)
81134ec4:	10c0010d 	sth	r3,4(r2)
}
81134ec8:	0001883a 	nop
81134ecc:	e037883a 	mov	sp,fp
81134ed0:	df000017 	ldw	fp,0(sp)
81134ed4:	dec00104 	addi	sp,sp,4
81134ed8:	f800283a 	ret

81134edc <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
81134edc:	defffd04 	addi	sp,sp,-12
81134ee0:	de00012e 	bgeu	sp,et,81134ee8 <OSTmr_Lock+0xc>
81134ee4:	003b68fa 	trap	3
81134ee8:	dfc00215 	stw	ra,8(sp)
81134eec:	df000115 	stw	fp,4(sp)
81134ef0:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
81134ef4:	d0a08f17 	ldw	r2,-32196(gp)
81134ef8:	e1bfff04 	addi	r6,fp,-4
81134efc:	000b883a 	mov	r5,zero
81134f00:	1009883a 	mov	r4,r2
81134f04:	1131b800 	call	81131b80 <OSSemPend>
    (void)err;
}
81134f08:	0001883a 	nop
81134f0c:	e037883a 	mov	sp,fp
81134f10:	dfc00117 	ldw	ra,4(sp)
81134f14:	df000017 	ldw	fp,0(sp)
81134f18:	dec00204 	addi	sp,sp,8
81134f1c:	f800283a 	ret

81134f20 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
81134f20:	defffe04 	addi	sp,sp,-8
81134f24:	de00012e 	bgeu	sp,et,81134f2c <OSTmr_Unlock+0xc>
81134f28:	003b68fa 	trap	3
81134f2c:	dfc00115 	stw	ra,4(sp)
81134f30:	df000015 	stw	fp,0(sp)
81134f34:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
81134f38:	d0a08f17 	ldw	r2,-32196(gp)
81134f3c:	1009883a 	mov	r4,r2
81134f40:	1131f080 	call	81131f08 <OSSemPost>
}
81134f44:	0001883a 	nop
81134f48:	e037883a 	mov	sp,fp
81134f4c:	dfc00117 	ldw	ra,4(sp)
81134f50:	df000017 	ldw	fp,0(sp)
81134f54:	dec00204 	addi	sp,sp,8
81134f58:	f800283a 	ret

81134f5c <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
81134f5c:	defff704 	addi	sp,sp,-36
81134f60:	de00012e 	bgeu	sp,et,81134f68 <OSTmr_Task+0xc>
81134f64:	003b68fa 	trap	3
81134f68:	dfc00815 	stw	ra,32(sp)
81134f6c:	df000715 	stw	fp,28(sp)
81134f70:	df000704 	addi	fp,sp,28
81134f74:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
81134f78:	d0a07a17 	ldw	r2,-32280(gp)
81134f7c:	e0fffe04 	addi	r3,fp,-8
81134f80:	180d883a 	mov	r6,r3
81134f84:	000b883a 	mov	r5,zero
81134f88:	1009883a 	mov	r4,r2
81134f8c:	1131b800 	call	81131b80 <OSSemPend>
        OSTmr_Lock();
81134f90:	1134edc0 	call	81134edc <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
81134f94:	d0a08d17 	ldw	r2,-32204(gp)
81134f98:	10800044 	addi	r2,r2,1
81134f9c:	d0a08d15 	stw	r2,-32204(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
81134fa0:	d0a08d17 	ldw	r2,-32204(gp)
81134fa4:	1080004c 	andi	r2,r2,1
81134fa8:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
81134fac:	e0bffa0b 	ldhu	r2,-24(fp)
81134fb0:	100690fa 	slli	r3,r2,3
81134fb4:	00a04574 	movhi	r2,33045
81134fb8:	108c7604 	addi	r2,r2,12760
81134fbc:	1885883a 	add	r2,r3,r2
81134fc0:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
81134fc4:	e0bffb17 	ldw	r2,-20(fp)
81134fc8:	10800017 	ldw	r2,0(r2)
81134fcc:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
81134fd0:	00002206 	br	8113505c <OSTmr_Task+0x100>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
81134fd4:	e0bff917 	ldw	r2,-28(fp)
81134fd8:	10800317 	ldw	r2,12(r2)
81134fdc:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
81134fe0:	e0bff917 	ldw	r2,-28(fp)
81134fe4:	10c00517 	ldw	r3,20(r2)
81134fe8:	d0a08d17 	ldw	r2,-32204(gp)
81134fec:	1880191e 	bne	r3,r2,81135054 <OSTmr_Task+0xf8>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
81134ff0:	e0bff917 	ldw	r2,-28(fp)
81134ff4:	10800117 	ldw	r2,4(r2)
81134ff8:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
81134ffc:	e0bffd17 	ldw	r2,-12(fp)
81135000:	10000626 	beq	r2,zero,8113501c <OSTmr_Task+0xc0>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
81135004:	e0bff917 	ldw	r2,-28(fp)
81135008:	10c00217 	ldw	r3,8(r2)
8113500c:	e0bffd17 	ldw	r2,-12(fp)
81135010:	180b883a 	mov	r5,r3
81135014:	e13ff917 	ldw	r4,-28(fp)
81135018:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
8113501c:	e13ff917 	ldw	r4,-28(fp)
81135020:	1134de00 	call	81134de0 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
81135024:	e0bff917 	ldw	r2,-28(fp)
81135028:	10800c03 	ldbu	r2,48(r2)
8113502c:	10803fcc 	andi	r2,r2,255
81135030:	10800098 	cmpnei	r2,r2,2
81135034:	1000041e 	bne	r2,zero,81135048 <OSTmr_Task+0xec>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
81135038:	01400044 	movi	r5,1
8113503c:	e13ff917 	ldw	r4,-28(fp)
81135040:	1134c900 	call	81134c90 <OSTmr_Link>
81135044:	00000306 	br	81135054 <OSTmr_Task+0xf8>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
81135048:	e0bff917 	ldw	r2,-28(fp)
8113504c:	00c00084 	movi	r3,2
81135050:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
81135054:	e0bffc17 	ldw	r2,-16(fp)
81135058:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
8113505c:	e0bff917 	ldw	r2,-28(fp)
81135060:	103fdc1e 	bne	r2,zero,81134fd4 <__reset+0xfb114fd4>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
81135064:	1134f200 	call	81134f20 <OSTmr_Unlock>
    }
81135068:	003fc306 	br	81134f78 <__reset+0xfb114f78>

8113506c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8113506c:	defffd04 	addi	sp,sp,-12
81135070:	de00012e 	bgeu	sp,et,81135078 <alt_dev_reg+0xc>
81135074:	003b68fa 	trap	3
81135078:	dfc00215 	stw	ra,8(sp)
8113507c:	df000115 	stw	fp,4(sp)
81135080:	df000104 	addi	fp,sp,4
81135084:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
81135088:	d1600d04 	addi	r5,gp,-32716
8113508c:	e13fff17 	ldw	r4,-4(fp)
81135090:	113d30c0 	call	8113d30c <alt_dev_llist_insert>
}
81135094:	e037883a 	mov	sp,fp
81135098:	dfc00117 	ldw	ra,4(sp)
8113509c:	df000017 	ldw	fp,0(sp)
811350a0:	dec00204 	addi	sp,sp,8
811350a4:	f800283a 	ret

811350a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
811350a8:	defffd04 	addi	sp,sp,-12
811350ac:	de00012e 	bgeu	sp,et,811350b4 <alt_irq_init+0xc>
811350b0:	003b68fa 	trap	3
811350b4:	dfc00215 	stw	ra,8(sp)
811350b8:	df000115 	stw	fp,4(sp)
811350bc:	df000104 	addi	fp,sp,4
811350c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
811350c4:	113dda40 	call	8113dda4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
811350c8:	00800044 	movi	r2,1
811350cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
811350d0:	0001883a 	nop
811350d4:	e037883a 	mov	sp,fp
811350d8:	dfc00117 	ldw	ra,4(sp)
811350dc:	df000017 	ldw	fp,0(sp)
811350e0:	dec00204 	addi	sp,sp,8
811350e4:	f800283a 	ret

811350e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
811350e8:	defffe04 	addi	sp,sp,-8
811350ec:	de00012e 	bgeu	sp,et,811350f4 <alt_sys_init+0xc>
811350f0:	003b68fa 	trap	3
811350f4:	dfc00115 	stw	ra,4(sp)
811350f8:	df000015 	stw	fp,0(sp)
811350fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81135100:	01c0fa04 	movi	r7,1000
81135104:	01800304 	movi	r6,12
81135108:	000b883a 	mov	r5,zero
8113510c:	01200034 	movhi	r4,32768
81135110:	21022004 	addi	r4,r4,2176
81135114:	113a4400 	call	8113a440 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81135118:	018002c4 	movi	r6,11
8113511c:	000b883a 	mov	r5,zero
81135120:	01204534 	movhi	r4,33044
81135124:	210e0004 	addi	r4,r4,14336
81135128:	113972c0 	call	8113972c <altera_avalon_jtag_uart_init>
8113512c:	01204534 	movhi	r4,33044
81135130:	210df604 	addi	r4,r4,14296
81135134:	113506c0 	call	8113506c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
81135138:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8113513c:	018003c4 	movi	r6,15
81135140:	000b883a 	mov	r5,zero
81135144:	01204534 	movhi	r4,33044
81135148:	21121b04 	addi	r4,r4,18540
8113514c:	113a5ec0 	call	8113a5ec <altera_avalon_uart_init>
81135150:	01204534 	movhi	r4,33044
81135154:	21121104 	addi	r4,r4,18500
81135158:	113506c0 	call	8113506c <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
8113515c:	00a04534 	movhi	r2,33044
81135160:	10924504 	addi	r2,r2,18708
81135164:	10c00717 	ldw	r3,28(r2)
81135168:	00a04534 	movhi	r2,33044
8113516c:	10924504 	addi	r2,r2,18708
81135170:	10800817 	ldw	r2,32(r2)
81135174:	100d883a 	mov	r6,r2
81135178:	180b883a 	mov	r5,r3
8113517c:	01204534 	movhi	r4,33044
81135180:	21124504 	addi	r4,r4,18708
81135184:	113ce740 	call	8113ce74 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
81135188:	00a04534 	movhi	r2,33044
8113518c:	10925e04 	addi	r2,r2,18808
81135190:	10c00717 	ldw	r3,28(r2)
81135194:	00a04534 	movhi	r2,33044
81135198:	10925e04 	addi	r2,r2,18808
8113519c:	10800817 	ldw	r2,32(r2)
811351a0:	100d883a 	mov	r6,r2
811351a4:	180b883a 	mov	r5,r3
811351a8:	01204534 	movhi	r4,33044
811351ac:	21125e04 	addi	r4,r4,18808
811351b0:	113ce740 	call	8113ce74 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
811351b4:	01204534 	movhi	r4,33044
811351b8:	21127704 	addi	r4,r4,18908
811351bc:	113506c0 	call	8113506c <alt_dev_reg>
}
811351c0:	0001883a 	nop
811351c4:	e037883a 	mov	sp,fp
811351c8:	dfc00117 	ldw	ra,4(sp)
811351cc:	df000017 	ldw	fp,0(sp)
811351d0:	dec00204 	addi	sp,sp,8
811351d4:	f800283a 	ret

811351d8 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
811351d8:	defffa04 	addi	sp,sp,-24
811351dc:	de00012e 	bgeu	sp,et,811351e4 <Write_Sector_Data+0xc>
811351e0:	003b68fa 	trap	3
811351e4:	dfc00515 	stw	ra,20(sp)
811351e8:	df000415 	stw	fp,16(sp)
811351ec:	df000404 	addi	fp,sp,16
811351f0:	e13ffe15 	stw	r4,-8(fp)
811351f4:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
811351f8:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
811351fc:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
81135200:	10001e26 	beq	r2,zero,8113527c <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
81135204:	00803fc4 	movi	r2,255
81135208:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
8113520c:	d0a09917 	ldw	r2,-32156(gp)
81135210:	e13ffe17 	ldw	r4,-8(fp)
81135214:	e0ffff17 	ldw	r3,-4(fp)
81135218:	20c7883a 	add	r3,r4,r3
8113521c:	1806927a 	slli	r3,r3,9
81135220:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
81135224:	d0a09817 	ldw	r2,-32160(gp)
81135228:	00c00604 	movi	r3,24
8113522c:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81135230:	d0a09517 	ldw	r2,-32172(gp)
81135234:	1080002b 	ldhuio	r2,0(r2)
81135238:	10bfffcc 	andi	r2,r2,65535
8113523c:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
81135240:	e0bffd0b 	ldhu	r2,-12(fp)
81135244:	10bfffcc 	andi	r2,r2,65535
81135248:	1080010c 	andi	r2,r2,4
8113524c:	103ff81e 	bne	r2,zero,81135230 <__reset+0xfb115230>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
81135250:	e0bffd0b 	ldhu	r2,-12(fp)
81135254:	10bfffcc 	andi	r2,r2,65535
81135258:	1080040c 	andi	r2,r2,16
8113525c:	1000071e 	bne	r2,zero,8113527c <Write_Sector_Data+0xa4>
        {
            result = true;
81135260:	00800044 	movi	r2,1
81135264:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
81135268:	d0209e15 	stw	zero,-32136(gp)
            current_sector_index = sector_index+partition_offset;
8113526c:	e0fffe17 	ldw	r3,-8(fp)
81135270:	e0bfff17 	ldw	r2,-4(fp)
81135274:	1885883a 	add	r2,r3,r2
81135278:	d0a09f15 	stw	r2,-32132(gp)
        }
    }
    return result;
8113527c:	e0bffc17 	ldw	r2,-16(fp)
}
81135280:	e037883a 	mov	sp,fp
81135284:	dfc00117 	ldw	ra,4(sp)
81135288:	df000017 	ldw	fp,0(sp)
8113528c:	dec00204 	addi	sp,sp,8
81135290:	f800283a 	ret

81135294 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
81135294:	defffd04 	addi	sp,sp,-12
81135298:	de00012e 	bgeu	sp,et,811352a0 <Save_Modified_Sector+0xc>
8113529c:	003b68fa 	trap	3
811352a0:	dfc00215 	stw	ra,8(sp)
811352a4:	df000115 	stw	fp,4(sp)
811352a8:	df000104 	addi	fp,sp,4
    bool result = true;
811352ac:	00800044 	movi	r2,1
811352b0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
811352b4:	d0a09e17 	ldw	r2,-32136(gp)
811352b8:	10000526 	beq	r2,zero,811352d0 <Save_Modified_Sector+0x3c>
    {
        result = Write_Sector_Data(current_sector_index, 0);
811352bc:	d0a09f17 	ldw	r2,-32132(gp)
811352c0:	000b883a 	mov	r5,zero
811352c4:	1009883a 	mov	r4,r2
811352c8:	11351d80 	call	811351d8 <Write_Sector_Data>
811352cc:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
811352d0:	e0bfff17 	ldw	r2,-4(fp)
}
811352d4:	e037883a 	mov	sp,fp
811352d8:	dfc00117 	ldw	ra,4(sp)
811352dc:	df000017 	ldw	fp,0(sp)
811352e0:	dec00204 	addi	sp,sp,8
811352e4:	f800283a 	ret

811352e8 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
811352e8:	defffa04 	addi	sp,sp,-24
811352ec:	de00012e 	bgeu	sp,et,811352f4 <Read_Sector_Data+0xc>
811352f0:	003b68fa 	trap	3
811352f4:	dfc00515 	stw	ra,20(sp)
811352f8:	df000415 	stw	fp,16(sp)
811352fc:	df000404 	addi	fp,sp,16
81135300:	e13ffe15 	stw	r4,-8(fp)
81135304:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
81135308:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
8113530c:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
81135310:	10002726 	beq	r2,zero,811353b0 <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
81135314:	00803fc4 	movi	r2,255
81135318:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
8113531c:	d0a09e17 	ldw	r2,-32136(gp)
81135320:	10000726 	beq	r2,zero,81135340 <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
81135324:	d0a09f17 	ldw	r2,-32132(gp)
81135328:	000b883a 	mov	r5,zero
8113532c:	1009883a 	mov	r4,r2
81135330:	11351d80 	call	811351d8 <Write_Sector_Data>
81135334:	1000021e 	bne	r2,zero,81135340 <Read_Sector_Data+0x58>
            {
                return false;
81135338:	0005883a 	mov	r2,zero
8113533c:	00001d06 	br	811353b4 <Read_Sector_Data+0xcc>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81135340:	d0a09917 	ldw	r2,-32156(gp)
81135344:	e13ffe17 	ldw	r4,-8(fp)
81135348:	e0ffff17 	ldw	r3,-4(fp)
8113534c:	20c7883a 	add	r3,r4,r3
81135350:	1806927a 	slli	r3,r3,9
81135354:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
81135358:	d0a09817 	ldw	r2,-32160(gp)
8113535c:	00c00444 	movi	r3,17
81135360:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81135364:	d0a09517 	ldw	r2,-32172(gp)
81135368:	1080002b 	ldhuio	r2,0(r2)
8113536c:	10bfffcc 	andi	r2,r2,65535
81135370:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
81135374:	e0bffd0b 	ldhu	r2,-12(fp)
81135378:	10bfffcc 	andi	r2,r2,65535
8113537c:	1080010c 	andi	r2,r2,4
81135380:	103ff81e 	bne	r2,zero,81135364 <__reset+0xfb115364>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
81135384:	e0bffd0b 	ldhu	r2,-12(fp)
81135388:	10bfffcc 	andi	r2,r2,65535
8113538c:	1080040c 	andi	r2,r2,16
81135390:	1000071e 	bne	r2,zero,811353b0 <Read_Sector_Data+0xc8>
		{
			result = true;
81135394:	00800044 	movi	r2,1
81135398:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
8113539c:	d0209e15 	stw	zero,-32136(gp)
            current_sector_index = sector_index+partition_offset;
811353a0:	e0fffe17 	ldw	r3,-8(fp)
811353a4:	e0bfff17 	ldw	r2,-4(fp)
811353a8:	1885883a 	add	r2,r3,r2
811353ac:	d0a09f15 	stw	r2,-32132(gp)
		}
	}
	return result;
811353b0:	e0bffc17 	ldw	r2,-16(fp)
}
811353b4:	e037883a 	mov	sp,fp
811353b8:	dfc00117 	ldw	ra,4(sp)
811353bc:	df000017 	ldw	fp,0(sp)
811353c0:	dec00204 	addi	sp,sp,8
811353c4:	f800283a 	ret

811353c8 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
811353c8:	defffb04 	addi	sp,sp,-20
811353cc:	de00012e 	bgeu	sp,et,811353d4 <get_cluster_flag+0xc>
811353d0:	003b68fa 	trap	3
811353d4:	dfc00415 	stw	ra,16(sp)
811353d8:	df000315 	stw	fp,12(sp)
811353dc:	df000304 	addi	fp,sp,12
811353e0:	e13ffe15 	stw	r4,-8(fp)
811353e4:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
811353e8:	e0bffe17 	ldw	r2,-8(fp)
811353ec:	1004d23a 	srli	r2,r2,8
811353f0:	d0e09b17 	ldw	r3,-32148(gp)
811353f4:	10c5883a 	add	r2,r2,r3
811353f8:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
811353fc:	00a045b4 	movhi	r2,33046
81135400:	10a07e04 	addi	r2,r2,-32264
81135404:	10801117 	ldw	r2,68(r2)
81135408:	e0fffd17 	ldw	r3,-12(fp)
8113540c:	1885883a 	add	r2,r3,r2
81135410:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
81135414:	d0a09f17 	ldw	r2,-32132(gp)
81135418:	e0fffd17 	ldw	r3,-12(fp)
8113541c:	18800726 	beq	r3,r2,8113543c <get_cluster_flag+0x74>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81135420:	e0bffd17 	ldw	r2,-12(fp)
81135424:	000b883a 	mov	r5,zero
81135428:	1009883a 	mov	r4,r2
8113542c:	11352e80 	call	811352e8 <Read_Sector_Data>
81135430:	1000021e 	bne	r2,zero,8113543c <get_cluster_flag+0x74>
        {
            return false;
81135434:	0005883a 	mov	r2,zero
81135438:	00000d06 	br	81135470 <get_cluster_flag+0xa8>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
8113543c:	e0bffe17 	ldw	r2,-8(fp)
81135440:	10803fcc 	andi	r2,r2,255
81135444:	1085883a 	add	r2,r2,r2
81135448:	1007883a 	mov	r3,r2
8113544c:	d0a09d17 	ldw	r2,-32140(gp)
81135450:	10800a17 	ldw	r2,40(r2)
81135454:	1885883a 	add	r2,r3,r2
81135458:	1080002b 	ldhuio	r2,0(r2)
8113545c:	10bfffcc 	andi	r2,r2,65535
81135460:	1007883a 	mov	r3,r2
81135464:	e0bfff17 	ldw	r2,-4(fp)
81135468:	10c0000d 	sth	r3,0(r2)
    return true;
8113546c:	00800044 	movi	r2,1
}
81135470:	e037883a 	mov	sp,fp
81135474:	dfc00117 	ldw	ra,4(sp)
81135478:	df000017 	ldw	fp,0(sp)
8113547c:	dec00204 	addi	sp,sp,8
81135480:	f800283a 	ret

81135484 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
81135484:	defffa04 	addi	sp,sp,-24
81135488:	de00012e 	bgeu	sp,et,81135490 <mark_cluster+0xc>
8113548c:	003b68fa 	trap	3
81135490:	dfc00515 	stw	ra,20(sp)
81135494:	df000415 	stw	fp,16(sp)
81135498:	df000404 	addi	fp,sp,16
8113549c:	e13ffd15 	stw	r4,-12(fp)
811354a0:	2805883a 	mov	r2,r5
811354a4:	e1bfff15 	stw	r6,-4(fp)
811354a8:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
811354ac:	e0bffd17 	ldw	r2,-12(fp)
811354b0:	1004d23a 	srli	r2,r2,8
811354b4:	d0e09b17 	ldw	r3,-32148(gp)
811354b8:	10c5883a 	add	r2,r2,r3
811354bc:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
811354c0:	e0bfff17 	ldw	r2,-4(fp)
811354c4:	10000726 	beq	r2,zero,811354e4 <mark_cluster+0x60>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
811354c8:	00a045b4 	movhi	r2,33046
811354cc:	10a07e04 	addi	r2,r2,-32264
811354d0:	10801117 	ldw	r2,68(r2)
811354d4:	e0fffc17 	ldw	r3,-16(fp)
811354d8:	1885883a 	add	r2,r3,r2
811354dc:	e0bffc15 	stw	r2,-16(fp)
811354e0:	00000606 	br	811354fc <mark_cluster+0x78>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
811354e4:	00a045b4 	movhi	r2,33046
811354e8:	10a07e04 	addi	r2,r2,-32264
811354ec:	10801217 	ldw	r2,72(r2)
811354f0:	e0fffc17 	ldw	r3,-16(fp)
811354f4:	1885883a 	add	r2,r3,r2
811354f8:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
811354fc:	d0a09f17 	ldw	r2,-32132(gp)
81135500:	e0fffc17 	ldw	r3,-16(fp)
81135504:	18800726 	beq	r3,r2,81135524 <mark_cluster+0xa0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81135508:	e0bffc17 	ldw	r2,-16(fp)
8113550c:	000b883a 	mov	r5,zero
81135510:	1009883a 	mov	r4,r2
81135514:	11352e80 	call	811352e8 <Read_Sector_Data>
81135518:	1000021e 	bne	r2,zero,81135524 <mark_cluster+0xa0>
        {
            return false;
8113551c:	0005883a 	mov	r2,zero
81135520:	00000d06 	br	81135558 <mark_cluster+0xd4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
81135524:	e0bffd17 	ldw	r2,-12(fp)
81135528:	10803fcc 	andi	r2,r2,255
8113552c:	1085883a 	add	r2,r2,r2
81135530:	1007883a 	mov	r3,r2
81135534:	d0a09d17 	ldw	r2,-32140(gp)
81135538:	10800a17 	ldw	r2,40(r2)
8113553c:	1885883a 	add	r2,r3,r2
81135540:	1007883a 	mov	r3,r2
81135544:	e0bffe0f 	ldh	r2,-8(fp)
81135548:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
8113554c:	00800044 	movi	r2,1
81135550:	d0a09e15 	stw	r2,-32136(gp)
    return true;
81135554:	00800044 	movi	r2,1
}
81135558:	e037883a 	mov	sp,fp
8113555c:	dfc00117 	ldw	ra,4(sp)
81135560:	df000017 	ldw	fp,0(sp)
81135564:	dec00204 	addi	sp,sp,8
81135568:	f800283a 	ret

8113556c <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
8113556c:	defff704 	addi	sp,sp,-36
81135570:	de00012e 	bgeu	sp,et,81135578 <Check_for_Master_Boot_Record+0xc>
81135574:	003b68fa 	trap	3
81135578:	dfc00815 	stw	ra,32(sp)
8113557c:	df000715 	stw	fp,28(sp)
81135580:	df000704 	addi	fp,sp,28
	bool result = false;
81135584:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
81135588:	000b883a 	mov	r5,zero
8113558c:	0009883a 	mov	r4,zero
81135590:	11352e80 	call	811352e8 <Read_Sector_Data>
81135594:	10005a26 	beq	r2,zero,81135700 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
81135598:	d0a09d17 	ldw	r2,-32140(gp)
8113559c:	10800a17 	ldw	r2,40(r2)
811355a0:	10807f84 	addi	r2,r2,510
811355a4:	1080002b 	ldhuio	r2,0(r2)
811355a8:	10bfffcc 	andi	r2,r2,65535
811355ac:	10bfffcc 	andi	r2,r2,65535
811355b0:	10a0001c 	xori	r2,r2,32768
811355b4:	10a00004 	addi	r2,r2,-32768
811355b8:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
811355bc:	e0bffb17 	ldw	r2,-20(fp)
811355c0:	10ffffcc 	andi	r3,r2,65535
811355c4:	00aa9554 	movui	r2,43605
811355c8:	18804d1e 	bne	r3,r2,81135700 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
811355cc:	e03ffa15 	stw	zero,-24(fp)
811355d0:	00004806 	br	811356f4 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
811355d4:	e0bffa17 	ldw	r2,-24(fp)
811355d8:	1004913a 	slli	r2,r2,4
811355dc:	10806f84 	addi	r2,r2,446
811355e0:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
811355e4:	d0a09d17 	ldw	r2,-32140(gp)
811355e8:	10c00a17 	ldw	r3,40(r2)
811355ec:	e0bffc17 	ldw	r2,-16(fp)
811355f0:	1885883a 	add	r2,r3,r2
811355f4:	10800104 	addi	r2,r2,4
811355f8:	10800023 	ldbuio	r2,0(r2)
811355fc:	10803fcc 	andi	r2,r2,255
81135600:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
81135604:	e0bffd07 	ldb	r2,-12(fp)
81135608:	10800060 	cmpeqi	r2,r2,1
8113560c:	1000091e 	bne	r2,zero,81135634 <Check_for_Master_Boot_Record+0xc8>
81135610:	e0bffd07 	ldb	r2,-12(fp)
81135614:	10800120 	cmpeqi	r2,r2,4
81135618:	1000061e 	bne	r2,zero,81135634 <Check_for_Master_Boot_Record+0xc8>
8113561c:	e0bffd07 	ldb	r2,-12(fp)
81135620:	108001a0 	cmpeqi	r2,r2,6
81135624:	1000031e 	bne	r2,zero,81135634 <Check_for_Master_Boot_Record+0xc8>
81135628:	e0bffd07 	ldb	r2,-12(fp)
8113562c:	10800398 	cmpnei	r2,r2,14
81135630:	10002d1e 	bne	r2,zero,811356e8 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
81135634:	d0a09d17 	ldw	r2,-32140(gp)
81135638:	10c00a17 	ldw	r3,40(r2)
8113563c:	e0bffc17 	ldw	r2,-16(fp)
81135640:	1885883a 	add	r2,r3,r2
81135644:	10800284 	addi	r2,r2,10
81135648:	1080002b 	ldhuio	r2,0(r2)
8113564c:	10bfffcc 	andi	r2,r2,65535
81135650:	1006943a 	slli	r3,r2,16
81135654:	d0a09d17 	ldw	r2,-32140(gp)
81135658:	11000a17 	ldw	r4,40(r2)
8113565c:	e0bffc17 	ldw	r2,-16(fp)
81135660:	2085883a 	add	r2,r4,r2
81135664:	10800204 	addi	r2,r2,8
81135668:	1080002b 	ldhuio	r2,0(r2)
8113566c:	10bfffcc 	andi	r2,r2,65535
81135670:	10bfffcc 	andi	r2,r2,65535
81135674:	1884b03a 	or	r2,r3,r2
81135678:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
8113567c:	d0a09d17 	ldw	r2,-32140(gp)
81135680:	10c00a17 	ldw	r3,40(r2)
81135684:	e0bffc17 	ldw	r2,-16(fp)
81135688:	1885883a 	add	r2,r3,r2
8113568c:	10800384 	addi	r2,r2,14
81135690:	1080002b 	ldhuio	r2,0(r2)
81135694:	10bfffcc 	andi	r2,r2,65535
81135698:	1006943a 	slli	r3,r2,16
8113569c:	d0a09d17 	ldw	r2,-32140(gp)
811356a0:	11000a17 	ldw	r4,40(r2)
811356a4:	e0bffc17 	ldw	r2,-16(fp)
811356a8:	2085883a 	add	r2,r4,r2
811356ac:	10800304 	addi	r2,r2,12
811356b0:	1080002b 	ldhuio	r2,0(r2)
811356b4:	10bfffcc 	andi	r2,r2,65535
811356b8:	10bfffcc 	andi	r2,r2,65535
811356bc:	1884b03a 	or	r2,r3,r2
811356c0:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
811356c4:	e0bfff17 	ldw	r2,-4(fp)
811356c8:	0080070e 	bge	zero,r2,811356e8 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
811356cc:	00800044 	movi	r2,1
811356d0:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
811356d4:	e0bfff17 	ldw	r2,-4(fp)
811356d8:	d0a09c15 	stw	r2,-32144(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
811356dc:	e0bffe17 	ldw	r2,-8(fp)
811356e0:	d0a09b15 	stw	r2,-32148(gp)
						break;
811356e4:	00000606 	br	81135700 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
811356e8:	e0bffa17 	ldw	r2,-24(fp)
811356ec:	10800044 	addi	r2,r2,1
811356f0:	e0bffa15 	stw	r2,-24(fp)
811356f4:	e0bffa17 	ldw	r2,-24(fp)
811356f8:	10800110 	cmplti	r2,r2,4
811356fc:	103fb51e 	bne	r2,zero,811355d4 <__reset+0xfb1155d4>
				}
			}
		}
	}

	return result;
81135700:	e0bff917 	ldw	r2,-28(fp)
}
81135704:	e037883a 	mov	sp,fp
81135708:	dfc00117 	ldw	ra,4(sp)
8113570c:	df000017 	ldw	fp,0(sp)
81135710:	dec00204 	addi	sp,sp,8
81135714:	f800283a 	ret

81135718 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
81135718:	defff804 	addi	sp,sp,-32
8113571c:	de00012e 	bgeu	sp,et,81135724 <Read_File_Record_At_Offset+0xc>
81135720:	003b68fa 	trap	3
81135724:	dfc00715 	stw	ra,28(sp)
81135728:	df000615 	stw	fp,24(sp)
8113572c:	df000604 	addi	fp,sp,24
81135730:	e13ffc15 	stw	r4,-16(fp)
81135734:	e17ffd15 	stw	r5,-12(fp)
81135738:	e1bffe15 	stw	r6,-8(fp)
8113573c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
81135740:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81135744:	e0bffc17 	ldw	r2,-16(fp)
81135748:	108007cc 	andi	r2,r2,31
8113574c:	10008d1e 	bne	r2,zero,81135984 <Read_File_Record_At_Offset+0x26c>
81135750:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
81135754:	10008b26 	beq	r2,zero,81135984 <Read_File_Record_At_Offset+0x26c>
81135758:	d0a09417 	ldw	r2,-32176(gp)
8113575c:	10008926 	beq	r2,zero,81135984 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81135760:	e03ffb15 	stw	zero,-20(fp)
81135764:	00001106 	br	811357ac <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
81135768:	e0fffc17 	ldw	r3,-16(fp)
8113576c:	e0bffb17 	ldw	r2,-20(fp)
81135770:	1885883a 	add	r2,r3,r2
81135774:	1007883a 	mov	r3,r2
81135778:	d0a09d17 	ldw	r2,-32140(gp)
8113577c:	10800a17 	ldw	r2,40(r2)
81135780:	1885883a 	add	r2,r3,r2
81135784:	10800023 	ldbuio	r2,0(r2)
81135788:	10803fcc 	andi	r2,r2,255
8113578c:	1009883a 	mov	r4,r2
81135790:	e0fffd17 	ldw	r3,-12(fp)
81135794:	e0bffb17 	ldw	r2,-20(fp)
81135798:	1885883a 	add	r2,r3,r2
8113579c:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
811357a0:	e0bffb17 	ldw	r2,-20(fp)
811357a4:	10800044 	addi	r2,r2,1
811357a8:	e0bffb15 	stw	r2,-20(fp)
811357ac:	e0bffb17 	ldw	r2,-20(fp)
811357b0:	10800210 	cmplti	r2,r2,8
811357b4:	103fec1e 	bne	r2,zero,81135768 <__reset+0xfb115768>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
811357b8:	e03ffb15 	stw	zero,-20(fp)
811357bc:	00001306 	br	8113580c <Read_File_Record_At_Offset+0xf4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
811357c0:	e0fffc17 	ldw	r3,-16(fp)
811357c4:	e0bffb17 	ldw	r2,-20(fp)
811357c8:	1885883a 	add	r2,r3,r2
811357cc:	1007883a 	mov	r3,r2
811357d0:	d0a09d17 	ldw	r2,-32140(gp)
811357d4:	10800a17 	ldw	r2,40(r2)
811357d8:	1885883a 	add	r2,r3,r2
811357dc:	10800204 	addi	r2,r2,8
811357e0:	10800023 	ldbuio	r2,0(r2)
811357e4:	10803fcc 	andi	r2,r2,255
811357e8:	1009883a 	mov	r4,r2
811357ec:	e0fffd17 	ldw	r3,-12(fp)
811357f0:	e0bffb17 	ldw	r2,-20(fp)
811357f4:	1885883a 	add	r2,r3,r2
811357f8:	10800204 	addi	r2,r2,8
811357fc:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81135800:	e0bffb17 	ldw	r2,-20(fp)
81135804:	10800044 	addi	r2,r2,1
81135808:	e0bffb15 	stw	r2,-20(fp)
8113580c:	e0bffb17 	ldw	r2,-20(fp)
81135810:	108000d0 	cmplti	r2,r2,3
81135814:	103fea1e 	bne	r2,zero,811357c0 <__reset+0xfb1157c0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
81135818:	d0a09d17 	ldw	r2,-32140(gp)
8113581c:	10c00a17 	ldw	r3,40(r2)
81135820:	e0bffc17 	ldw	r2,-16(fp)
81135824:	1885883a 	add	r2,r3,r2
81135828:	108002c4 	addi	r2,r2,11
8113582c:	10800023 	ldbuio	r2,0(r2)
81135830:	10803fcc 	andi	r2,r2,255
81135834:	1007883a 	mov	r3,r2
81135838:	e0bffd17 	ldw	r2,-12(fp)
8113583c:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
81135840:	d0a09d17 	ldw	r2,-32140(gp)
81135844:	10c00a17 	ldw	r3,40(r2)
81135848:	e0bffc17 	ldw	r2,-16(fp)
8113584c:	1885883a 	add	r2,r3,r2
81135850:	10800384 	addi	r2,r2,14
81135854:	1080002b 	ldhuio	r2,0(r2)
81135858:	10bfffcc 	andi	r2,r2,65535
8113585c:	1007883a 	mov	r3,r2
81135860:	e0bffd17 	ldw	r2,-12(fp)
81135864:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
81135868:	d0a09d17 	ldw	r2,-32140(gp)
8113586c:	10c00a17 	ldw	r3,40(r2)
81135870:	e0bffc17 	ldw	r2,-16(fp)
81135874:	1885883a 	add	r2,r3,r2
81135878:	10800404 	addi	r2,r2,16
8113587c:	1080002b 	ldhuio	r2,0(r2)
81135880:	10bfffcc 	andi	r2,r2,65535
81135884:	1007883a 	mov	r3,r2
81135888:	e0bffd17 	ldw	r2,-12(fp)
8113588c:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
81135890:	d0a09d17 	ldw	r2,-32140(gp)
81135894:	10c00a17 	ldw	r3,40(r2)
81135898:	e0bffc17 	ldw	r2,-16(fp)
8113589c:	1885883a 	add	r2,r3,r2
811358a0:	10800484 	addi	r2,r2,18
811358a4:	1080002b 	ldhuio	r2,0(r2)
811358a8:	10bfffcc 	andi	r2,r2,65535
811358ac:	1007883a 	mov	r3,r2
811358b0:	e0bffd17 	ldw	r2,-12(fp)
811358b4:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
811358b8:	d0a09d17 	ldw	r2,-32140(gp)
811358bc:	10c00a17 	ldw	r3,40(r2)
811358c0:	e0bffc17 	ldw	r2,-16(fp)
811358c4:	1885883a 	add	r2,r3,r2
811358c8:	10800584 	addi	r2,r2,22
811358cc:	1080002b 	ldhuio	r2,0(r2)
811358d0:	10bfffcc 	andi	r2,r2,65535
811358d4:	1007883a 	mov	r3,r2
811358d8:	e0bffd17 	ldw	r2,-12(fp)
811358dc:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
811358e0:	d0a09d17 	ldw	r2,-32140(gp)
811358e4:	10c00a17 	ldw	r3,40(r2)
811358e8:	e0bffc17 	ldw	r2,-16(fp)
811358ec:	1885883a 	add	r2,r3,r2
811358f0:	10800604 	addi	r2,r2,24
811358f4:	1080002b 	ldhuio	r2,0(r2)
811358f8:	10bfffcc 	andi	r2,r2,65535
811358fc:	1007883a 	mov	r3,r2
81135900:	e0bffd17 	ldw	r2,-12(fp)
81135904:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
81135908:	d0a09d17 	ldw	r2,-32140(gp)
8113590c:	10c00a17 	ldw	r3,40(r2)
81135910:	e0bffc17 	ldw	r2,-16(fp)
81135914:	1885883a 	add	r2,r3,r2
81135918:	10800684 	addi	r2,r2,26
8113591c:	1080002b 	ldhuio	r2,0(r2)
81135920:	10bfffcc 	andi	r2,r2,65535
81135924:	1007883a 	mov	r3,r2
81135928:	e0bffd17 	ldw	r2,-12(fp)
8113592c:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
81135930:	d0a09d17 	ldw	r2,-32140(gp)
81135934:	10c00a17 	ldw	r3,40(r2)
81135938:	e0bffc17 	ldw	r2,-16(fp)
8113593c:	1885883a 	add	r2,r3,r2
81135940:	10800704 	addi	r2,r2,28
81135944:	10800037 	ldwio	r2,0(r2)
81135948:	1007883a 	mov	r3,r2
8113594c:	e0bffd17 	ldw	r2,-12(fp)
81135950:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
81135954:	e0bffd17 	ldw	r2,-12(fp)
81135958:	e0fffe17 	ldw	r3,-8(fp)
8113595c:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
81135960:	e0bffd17 	ldw	r2,-12(fp)
81135964:	e0ffff17 	ldw	r3,-4(fp)
81135968:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
8113596c:	e0bffc17 	ldw	r2,-16(fp)
81135970:	1007883a 	mov	r3,r2
81135974:	e0bffd17 	ldw	r2,-12(fp)
81135978:	10c00c0d 	sth	r3,48(r2)
		result = true;
8113597c:	00800044 	movi	r2,1
81135980:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
81135984:	e0bffa17 	ldw	r2,-24(fp)
}
81135988:	e037883a 	mov	sp,fp
8113598c:	dfc00117 	ldw	ra,4(sp)
81135990:	df000017 	ldw	fp,0(sp)
81135994:	dec00204 	addi	sp,sp,8
81135998:	f800283a 	ret

8113599c <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
8113599c:	defff904 	addi	sp,sp,-28
811359a0:	de00012e 	bgeu	sp,et,811359a8 <Write_File_Record_At_Offset+0xc>
811359a4:	003b68fa 	trap	3
811359a8:	dfc00615 	stw	ra,24(sp)
811359ac:	df000515 	stw	fp,20(sp)
811359b0:	df000504 	addi	fp,sp,20
811359b4:	e13ffe15 	stw	r4,-8(fp)
811359b8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
811359bc:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811359c0:	e0bffe17 	ldw	r2,-8(fp)
811359c4:	108007cc 	andi	r2,r2,31
811359c8:	1000931e 	bne	r2,zero,81135c18 <Write_File_Record_At_Offset+0x27c>
811359cc:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
811359d0:	10009126 	beq	r2,zero,81135c18 <Write_File_Record_At_Offset+0x27c>
811359d4:	d0a09417 	ldw	r2,-32176(gp)
811359d8:	10008f26 	beq	r2,zero,81135c18 <Write_File_Record_At_Offset+0x27c>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
811359dc:	e03ffc15 	stw	zero,-16(fp)
811359e0:	00001f06 	br	81135a60 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
811359e4:	e0bffc17 	ldw	r2,-16(fp)
811359e8:	10800044 	addi	r2,r2,1
811359ec:	e0ffff17 	ldw	r3,-4(fp)
811359f0:	1885883a 	add	r2,r3,r2
811359f4:	10800003 	ldbu	r2,0(r2)
811359f8:	10803fcc 	andi	r2,r2,255
811359fc:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
81135a00:	e0bffd0f 	ldh	r2,-12(fp)
81135a04:	1004923a 	slli	r2,r2,8
81135a08:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
81135a0c:	e0ffff17 	ldw	r3,-4(fp)
81135a10:	e0bffc17 	ldw	r2,-16(fp)
81135a14:	1885883a 	add	r2,r3,r2
81135a18:	10800003 	ldbu	r2,0(r2)
81135a1c:	10c03fcc 	andi	r3,r2,255
81135a20:	e0bffd0b 	ldhu	r2,-12(fp)
81135a24:	1884b03a 	or	r2,r3,r2
81135a28:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
81135a2c:	e0fffe17 	ldw	r3,-8(fp)
81135a30:	e0bffc17 	ldw	r2,-16(fp)
81135a34:	1885883a 	add	r2,r3,r2
81135a38:	1007883a 	mov	r3,r2
81135a3c:	d0a09d17 	ldw	r2,-32140(gp)
81135a40:	10800a17 	ldw	r2,40(r2)
81135a44:	1885883a 	add	r2,r3,r2
81135a48:	1007883a 	mov	r3,r2
81135a4c:	e0bffd0f 	ldh	r2,-12(fp)
81135a50:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81135a54:	e0bffc17 	ldw	r2,-16(fp)
81135a58:	10800084 	addi	r2,r2,2
81135a5c:	e0bffc15 	stw	r2,-16(fp)
81135a60:	e0bffc17 	ldw	r2,-16(fp)
81135a64:	10800210 	cmplti	r2,r2,8
81135a68:	103fde1e 	bne	r2,zero,811359e4 <__reset+0xfb1159e4>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81135a6c:	e03ffc15 	stw	zero,-16(fp)
81135a70:	00001306 	br	81135ac0 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
81135a74:	e0fffe17 	ldw	r3,-8(fp)
81135a78:	e0bffc17 	ldw	r2,-16(fp)
81135a7c:	1885883a 	add	r2,r3,r2
81135a80:	1007883a 	mov	r3,r2
81135a84:	d0a09d17 	ldw	r2,-32140(gp)
81135a88:	10800a17 	ldw	r2,40(r2)
81135a8c:	1885883a 	add	r2,r3,r2
81135a90:	10800204 	addi	r2,r2,8
81135a94:	1009883a 	mov	r4,r2
81135a98:	e0ffff17 	ldw	r3,-4(fp)
81135a9c:	e0bffc17 	ldw	r2,-16(fp)
81135aa0:	1885883a 	add	r2,r3,r2
81135aa4:	10800204 	addi	r2,r2,8
81135aa8:	10800003 	ldbu	r2,0(r2)
81135aac:	10803fcc 	andi	r2,r2,255
81135ab0:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81135ab4:	e0bffc17 	ldw	r2,-16(fp)
81135ab8:	10800044 	addi	r2,r2,1
81135abc:	e0bffc15 	stw	r2,-16(fp)
81135ac0:	e0bffc17 	ldw	r2,-16(fp)
81135ac4:	108000d0 	cmplti	r2,r2,3
81135ac8:	103fea1e 	bne	r2,zero,81135a74 <__reset+0xfb115a74>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
81135acc:	d0a09d17 	ldw	r2,-32140(gp)
81135ad0:	10c00a17 	ldw	r3,40(r2)
81135ad4:	e0bffe17 	ldw	r2,-8(fp)
81135ad8:	1885883a 	add	r2,r3,r2
81135adc:	108002c4 	addi	r2,r2,11
81135ae0:	1007883a 	mov	r3,r2
81135ae4:	e0bfff17 	ldw	r2,-4(fp)
81135ae8:	108002c3 	ldbu	r2,11(r2)
81135aec:	10803fcc 	andi	r2,r2,255
81135af0:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
81135af4:	d0a09d17 	ldw	r2,-32140(gp)
81135af8:	10c00a17 	ldw	r3,40(r2)
81135afc:	e0bffe17 	ldw	r2,-8(fp)
81135b00:	1885883a 	add	r2,r3,r2
81135b04:	10800384 	addi	r2,r2,14
81135b08:	1007883a 	mov	r3,r2
81135b0c:	e0bfff17 	ldw	r2,-4(fp)
81135b10:	1080030b 	ldhu	r2,12(r2)
81135b14:	10bfffcc 	andi	r2,r2,65535
81135b18:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
81135b1c:	d0a09d17 	ldw	r2,-32140(gp)
81135b20:	10c00a17 	ldw	r3,40(r2)
81135b24:	e0bffe17 	ldw	r2,-8(fp)
81135b28:	1885883a 	add	r2,r3,r2
81135b2c:	10800404 	addi	r2,r2,16
81135b30:	1007883a 	mov	r3,r2
81135b34:	e0bfff17 	ldw	r2,-4(fp)
81135b38:	1080038b 	ldhu	r2,14(r2)
81135b3c:	10bfffcc 	andi	r2,r2,65535
81135b40:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
81135b44:	d0a09d17 	ldw	r2,-32140(gp)
81135b48:	10c00a17 	ldw	r3,40(r2)
81135b4c:	e0bffe17 	ldw	r2,-8(fp)
81135b50:	1885883a 	add	r2,r3,r2
81135b54:	10800484 	addi	r2,r2,18
81135b58:	1007883a 	mov	r3,r2
81135b5c:	e0bfff17 	ldw	r2,-4(fp)
81135b60:	1080040b 	ldhu	r2,16(r2)
81135b64:	10bfffcc 	andi	r2,r2,65535
81135b68:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
81135b6c:	d0a09d17 	ldw	r2,-32140(gp)
81135b70:	10c00a17 	ldw	r3,40(r2)
81135b74:	e0bffe17 	ldw	r2,-8(fp)
81135b78:	1885883a 	add	r2,r3,r2
81135b7c:	10800584 	addi	r2,r2,22
81135b80:	1007883a 	mov	r3,r2
81135b84:	e0bfff17 	ldw	r2,-4(fp)
81135b88:	1080048b 	ldhu	r2,18(r2)
81135b8c:	10bfffcc 	andi	r2,r2,65535
81135b90:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
81135b94:	d0a09d17 	ldw	r2,-32140(gp)
81135b98:	10c00a17 	ldw	r3,40(r2)
81135b9c:	e0bffe17 	ldw	r2,-8(fp)
81135ba0:	1885883a 	add	r2,r3,r2
81135ba4:	10800604 	addi	r2,r2,24
81135ba8:	1007883a 	mov	r3,r2
81135bac:	e0bfff17 	ldw	r2,-4(fp)
81135bb0:	1080050b 	ldhu	r2,20(r2)
81135bb4:	10bfffcc 	andi	r2,r2,65535
81135bb8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
81135bbc:	d0a09d17 	ldw	r2,-32140(gp)
81135bc0:	10c00a17 	ldw	r3,40(r2)
81135bc4:	e0bffe17 	ldw	r2,-8(fp)
81135bc8:	1885883a 	add	r2,r3,r2
81135bcc:	10800684 	addi	r2,r2,26
81135bd0:	1007883a 	mov	r3,r2
81135bd4:	e0bfff17 	ldw	r2,-4(fp)
81135bd8:	1080058b 	ldhu	r2,22(r2)
81135bdc:	10bfffcc 	andi	r2,r2,65535
81135be0:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
81135be4:	d0a09d17 	ldw	r2,-32140(gp)
81135be8:	10c00a17 	ldw	r3,40(r2)
81135bec:	e0bffe17 	ldw	r2,-8(fp)
81135bf0:	1885883a 	add	r2,r3,r2
81135bf4:	10800704 	addi	r2,r2,28
81135bf8:	1007883a 	mov	r3,r2
81135bfc:	e0bfff17 	ldw	r2,-4(fp)
81135c00:	10800617 	ldw	r2,24(r2)
81135c04:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
81135c08:	00800044 	movi	r2,1
81135c0c:	d0a09e15 	stw	r2,-32136(gp)
        result = true;
81135c10:	00800044 	movi	r2,1
81135c14:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
81135c18:	e0bffb17 	ldw	r2,-20(fp)
}
81135c1c:	e037883a 	mov	sp,fp
81135c20:	dfc00117 	ldw	ra,4(sp)
81135c24:	df000017 	ldw	fp,0(sp)
81135c28:	dec00204 	addi	sp,sp,8
81135c2c:	f800283a 	ret

81135c30 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
81135c30:	defff904 	addi	sp,sp,-28
81135c34:	de00012e 	bgeu	sp,et,81135c3c <Check_for_DOS_FAT+0xc>
81135c38:	003b68fa 	trap	3
81135c3c:	dfc00615 	stw	ra,24(sp)
81135c40:	df000515 	stw	fp,20(sp)
81135c44:	df000504 	addi	fp,sp,20
81135c48:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
81135c4c:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
81135c50:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
81135c54:	e17fff17 	ldw	r5,-4(fp)
81135c58:	0009883a 	mov	r4,zero
81135c5c:	11352e80 	call	811352e8 <Read_Sector_Data>
81135c60:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
81135c64:	d0a09d17 	ldw	r2,-32140(gp)
81135c68:	10800a17 	ldw	r2,40(r2)
81135c6c:	10807f84 	addi	r2,r2,510
81135c70:	1080002b 	ldhuio	r2,0(r2)
81135c74:	10bfffcc 	andi	r2,r2,65535
81135c78:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
81135c7c:	e0bffe0f 	ldh	r2,-8(fp)
81135c80:	10ffffcc 	andi	r3,r2,65535
81135c84:	00aa9554 	movui	r2,43605
81135c88:	1881841e 	bne	r3,r2,8113629c <Check_for_DOS_FAT+0x66c>
81135c8c:	e0bffb17 	ldw	r2,-20(fp)
81135c90:	10018226 	beq	r2,zero,8113629c <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
81135c94:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
81135c98:	d0a09d17 	ldw	r2,-32140(gp)
81135c9c:	10800a17 	ldw	r2,40(r2)
81135ca0:	10800023 	ldbuio	r2,0(r2)
81135ca4:	10803fcc 	andi	r2,r2,255
81135ca8:	1007883a 	mov	r3,r2
81135cac:	00a045b4 	movhi	r2,33046
81135cb0:	10a07e04 	addi	r2,r2,-32264
81135cb4:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
81135cb8:	d0a09d17 	ldw	r2,-32140(gp)
81135cbc:	10800a17 	ldw	r2,40(r2)
81135cc0:	10800044 	addi	r2,r2,1
81135cc4:	10800023 	ldbuio	r2,0(r2)
81135cc8:	10803fcc 	andi	r2,r2,255
81135ccc:	1007883a 	mov	r3,r2
81135cd0:	00a045b4 	movhi	r2,33046
81135cd4:	10a07e04 	addi	r2,r2,-32264
81135cd8:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
81135cdc:	d0a09d17 	ldw	r2,-32140(gp)
81135ce0:	10800a17 	ldw	r2,40(r2)
81135ce4:	10800084 	addi	r2,r2,2
81135ce8:	10800023 	ldbuio	r2,0(r2)
81135cec:	10803fcc 	andi	r2,r2,255
81135cf0:	1007883a 	mov	r3,r2
81135cf4:	00a045b4 	movhi	r2,33046
81135cf8:	10a07e04 	addi	r2,r2,-32264
81135cfc:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
81135d00:	e03ffc15 	stw	zero,-16(fp)
81135d04:	00001106 	br	81135d4c <Check_for_DOS_FAT+0x11c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
81135d08:	d0a09d17 	ldw	r2,-32140(gp)
81135d0c:	10c00a17 	ldw	r3,40(r2)
81135d10:	e0bffc17 	ldw	r2,-16(fp)
81135d14:	1885883a 	add	r2,r3,r2
81135d18:	108000c4 	addi	r2,r2,3
81135d1c:	10800023 	ldbuio	r2,0(r2)
81135d20:	10803fcc 	andi	r2,r2,255
81135d24:	1009883a 	mov	r4,r2
81135d28:	00a045b4 	movhi	r2,33046
81135d2c:	10a07e04 	addi	r2,r2,-32264
81135d30:	e0fffc17 	ldw	r3,-16(fp)
81135d34:	10c5883a 	add	r2,r2,r3
81135d38:	108000c4 	addi	r2,r2,3
81135d3c:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
81135d40:	e0bffc17 	ldw	r2,-16(fp)
81135d44:	10800044 	addi	r2,r2,1
81135d48:	e0bffc15 	stw	r2,-16(fp)
81135d4c:	e0bffc17 	ldw	r2,-16(fp)
81135d50:	10800210 	cmplti	r2,r2,8
81135d54:	103fec1e 	bne	r2,zero,81135d08 <__reset+0xfb115d08>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
81135d58:	d0a09d17 	ldw	r2,-32140(gp)
81135d5c:	10800a17 	ldw	r2,40(r2)
81135d60:	10800304 	addi	r2,r2,12
81135d64:	10800023 	ldbuio	r2,0(r2)
81135d68:	10803fcc 	andi	r2,r2,255
81135d6c:	1004923a 	slli	r2,r2,8
81135d70:	1007883a 	mov	r3,r2
81135d74:	d0a09d17 	ldw	r2,-32140(gp)
81135d78:	10800a17 	ldw	r2,40(r2)
81135d7c:	108002c4 	addi	r2,r2,11
81135d80:	10800023 	ldbuio	r2,0(r2)
81135d84:	10803fcc 	andi	r2,r2,255
81135d88:	10803fcc 	andi	r2,r2,255
81135d8c:	1080201c 	xori	r2,r2,128
81135d90:	10bfe004 	addi	r2,r2,-128
81135d94:	1884b03a 	or	r2,r3,r2
81135d98:	1007883a 	mov	r3,r2
81135d9c:	00a045b4 	movhi	r2,33046
81135da0:	10a07e04 	addi	r2,r2,-32264
81135da4:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
81135da8:	d0a09d17 	ldw	r2,-32140(gp)
81135dac:	10800a17 	ldw	r2,40(r2)
81135db0:	10800344 	addi	r2,r2,13
81135db4:	10800023 	ldbuio	r2,0(r2)
81135db8:	10803fcc 	andi	r2,r2,255
81135dbc:	1007883a 	mov	r3,r2
81135dc0:	00a045b4 	movhi	r2,33046
81135dc4:	10a07e04 	addi	r2,r2,-32264
81135dc8:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
81135dcc:	d0a09d17 	ldw	r2,-32140(gp)
81135dd0:	10800a17 	ldw	r2,40(r2)
81135dd4:	10800384 	addi	r2,r2,14
81135dd8:	1080002b 	ldhuio	r2,0(r2)
81135ddc:	10bfffcc 	andi	r2,r2,65535
81135de0:	1007883a 	mov	r3,r2
81135de4:	00a045b4 	movhi	r2,33046
81135de8:	10a07e04 	addi	r2,r2,-32264
81135dec:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
81135df0:	d0a09d17 	ldw	r2,-32140(gp)
81135df4:	10800a17 	ldw	r2,40(r2)
81135df8:	10800404 	addi	r2,r2,16
81135dfc:	10800023 	ldbuio	r2,0(r2)
81135e00:	10803fcc 	andi	r2,r2,255
81135e04:	1007883a 	mov	r3,r2
81135e08:	00a045b4 	movhi	r2,33046
81135e0c:	10a07e04 	addi	r2,r2,-32264
81135e10:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
81135e14:	d0a09d17 	ldw	r2,-32140(gp)
81135e18:	10800a17 	ldw	r2,40(r2)
81135e1c:	10800484 	addi	r2,r2,18
81135e20:	10800023 	ldbuio	r2,0(r2)
81135e24:	10803fcc 	andi	r2,r2,255
81135e28:	1004923a 	slli	r2,r2,8
81135e2c:	1007883a 	mov	r3,r2
81135e30:	d0a09d17 	ldw	r2,-32140(gp)
81135e34:	10800a17 	ldw	r2,40(r2)
81135e38:	10800444 	addi	r2,r2,17
81135e3c:	10800023 	ldbuio	r2,0(r2)
81135e40:	10803fcc 	andi	r2,r2,255
81135e44:	10803fcc 	andi	r2,r2,255
81135e48:	1884b03a 	or	r2,r3,r2
81135e4c:	1007883a 	mov	r3,r2
81135e50:	00a045b4 	movhi	r2,33046
81135e54:	10a07e04 	addi	r2,r2,-32264
81135e58:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
81135e5c:	d0a09d17 	ldw	r2,-32140(gp)
81135e60:	10800a17 	ldw	r2,40(r2)
81135e64:	10800504 	addi	r2,r2,20
81135e68:	10800023 	ldbuio	r2,0(r2)
81135e6c:	10803fcc 	andi	r2,r2,255
81135e70:	1004923a 	slli	r2,r2,8
81135e74:	1007883a 	mov	r3,r2
81135e78:	d0a09d17 	ldw	r2,-32140(gp)
81135e7c:	10800a17 	ldw	r2,40(r2)
81135e80:	108004c4 	addi	r2,r2,19
81135e84:	10800023 	ldbuio	r2,0(r2)
81135e88:	10803fcc 	andi	r2,r2,255
81135e8c:	10803fcc 	andi	r2,r2,255
81135e90:	1884b03a 	or	r2,r3,r2
81135e94:	1007883a 	mov	r3,r2
81135e98:	00a045b4 	movhi	r2,33046
81135e9c:	10a07e04 	addi	r2,r2,-32264
81135ea0:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
81135ea4:	d0a09d17 	ldw	r2,-32140(gp)
81135ea8:	10800a17 	ldw	r2,40(r2)
81135eac:	10800544 	addi	r2,r2,21
81135eb0:	10800023 	ldbuio	r2,0(r2)
81135eb4:	10803fcc 	andi	r2,r2,255
81135eb8:	1007883a 	mov	r3,r2
81135ebc:	00a045b4 	movhi	r2,33046
81135ec0:	10a07e04 	addi	r2,r2,-32264
81135ec4:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
81135ec8:	d0a09d17 	ldw	r2,-32140(gp)
81135ecc:	10800a17 	ldw	r2,40(r2)
81135ed0:	10800584 	addi	r2,r2,22
81135ed4:	1080002b 	ldhuio	r2,0(r2)
81135ed8:	10bfffcc 	andi	r2,r2,65535
81135edc:	1007883a 	mov	r3,r2
81135ee0:	00a045b4 	movhi	r2,33046
81135ee4:	10a07e04 	addi	r2,r2,-32264
81135ee8:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
81135eec:	d0a09d17 	ldw	r2,-32140(gp)
81135ef0:	10800a17 	ldw	r2,40(r2)
81135ef4:	10800604 	addi	r2,r2,24
81135ef8:	1080002b 	ldhuio	r2,0(r2)
81135efc:	10bfffcc 	andi	r2,r2,65535
81135f00:	1007883a 	mov	r3,r2
81135f04:	00a045b4 	movhi	r2,33046
81135f08:	10a07e04 	addi	r2,r2,-32264
81135f0c:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
81135f10:	d0a09d17 	ldw	r2,-32140(gp)
81135f14:	10800a17 	ldw	r2,40(r2)
81135f18:	10800684 	addi	r2,r2,26
81135f1c:	1080002b 	ldhuio	r2,0(r2)
81135f20:	10bfffcc 	andi	r2,r2,65535
81135f24:	1007883a 	mov	r3,r2
81135f28:	00a045b4 	movhi	r2,33046
81135f2c:	10a07e04 	addi	r2,r2,-32264
81135f30:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
81135f34:	d0a09d17 	ldw	r2,-32140(gp)
81135f38:	10800a17 	ldw	r2,40(r2)
81135f3c:	10800704 	addi	r2,r2,28
81135f40:	10800037 	ldwio	r2,0(r2)
81135f44:	1007883a 	mov	r3,r2
81135f48:	00a045b4 	movhi	r2,33046
81135f4c:	10a07e04 	addi	r2,r2,-32264
81135f50:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
81135f54:	d0a09d17 	ldw	r2,-32140(gp)
81135f58:	10800a17 	ldw	r2,40(r2)
81135f5c:	10800804 	addi	r2,r2,32
81135f60:	10800037 	ldwio	r2,0(r2)
81135f64:	1007883a 	mov	r3,r2
81135f68:	00a045b4 	movhi	r2,33046
81135f6c:	10a07e04 	addi	r2,r2,-32264
81135f70:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
81135f74:	d0a09d17 	ldw	r2,-32140(gp)
81135f78:	10800a17 	ldw	r2,40(r2)
81135f7c:	10800904 	addi	r2,r2,36
81135f80:	10800023 	ldbuio	r2,0(r2)
81135f84:	10803fcc 	andi	r2,r2,255
81135f88:	1007883a 	mov	r3,r2
81135f8c:	00a045b4 	movhi	r2,33046
81135f90:	10a07e04 	addi	r2,r2,-32264
81135f94:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
81135f98:	d0a09d17 	ldw	r2,-32140(gp)
81135f9c:	10800a17 	ldw	r2,40(r2)
81135fa0:	10800944 	addi	r2,r2,37
81135fa4:	10800023 	ldbuio	r2,0(r2)
81135fa8:	10803fcc 	andi	r2,r2,255
81135fac:	1007883a 	mov	r3,r2
81135fb0:	00a045b4 	movhi	r2,33046
81135fb4:	10a07e04 	addi	r2,r2,-32264
81135fb8:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
81135fbc:	d0a09d17 	ldw	r2,-32140(gp)
81135fc0:	10800a17 	ldw	r2,40(r2)
81135fc4:	10800984 	addi	r2,r2,38
81135fc8:	10800023 	ldbuio	r2,0(r2)
81135fcc:	10803fcc 	andi	r2,r2,255
81135fd0:	1007883a 	mov	r3,r2
81135fd4:	00a045b4 	movhi	r2,33046
81135fd8:	10a07e04 	addi	r2,r2,-32264
81135fdc:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
81135fe0:	00a045b4 	movhi	r2,33046
81135fe4:	10a07e04 	addi	r2,r2,-32264
81135fe8:	1080040b 	ldhu	r2,16(r2)
81135fec:	10ffffcc 	andi	r3,r2,65535
81135ff0:	00a045b4 	movhi	r2,33046
81135ff4:	10a07e04 	addi	r2,r2,-32264
81135ff8:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
81135ffc:	00a045b4 	movhi	r2,33046
81136000:	10a07e04 	addi	r2,r2,-32264
81136004:	10c01117 	ldw	r3,68(r2)
81136008:	00a045b4 	movhi	r2,33046
8113600c:	10a07e04 	addi	r2,r2,-32264
81136010:	1080068b 	ldhu	r2,26(r2)
81136014:	10bfffcc 	andi	r2,r2,65535
81136018:	1887883a 	add	r3,r3,r2
8113601c:	00a045b4 	movhi	r2,33046
81136020:	10a07e04 	addi	r2,r2,-32264
81136024:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
81136028:	00a045b4 	movhi	r2,33046
8113602c:	10a07e04 	addi	r2,r2,-32264
81136030:	10c01217 	ldw	r3,72(r2)
81136034:	00a045b4 	movhi	r2,33046
81136038:	10a07e04 	addi	r2,r2,-32264
8113603c:	1080068b 	ldhu	r2,26(r2)
81136040:	10bfffcc 	andi	r2,r2,65535
81136044:	1887883a 	add	r3,r3,r2
81136048:	00a045b4 	movhi	r2,33046
8113604c:	10a07e04 	addi	r2,r2,-32264
81136050:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
81136054:	00a045b4 	movhi	r2,33046
81136058:	10a07e04 	addi	r2,r2,-32264
8113605c:	10c01317 	ldw	r3,76(r2)
81136060:	00a045b4 	movhi	r2,33046
81136064:	10a07e04 	addi	r2,r2,-32264
81136068:	1080050b 	ldhu	r2,20(r2)
8113606c:	10bfffcc 	andi	r2,r2,65535
81136070:	1008917a 	slli	r4,r2,5
81136074:	00a045b4 	movhi	r2,33046
81136078:	10a07e04 	addi	r2,r2,-32264
8113607c:	1080030b 	ldhu	r2,12(r2)
81136080:	10bfffcc 	andi	r2,r2,65535
81136084:	2085283a 	div	r2,r4,r2
81136088:	1887883a 	add	r3,r3,r2
8113608c:	00a045b4 	movhi	r2,33046
81136090:	10a07e04 	addi	r2,r2,-32264
81136094:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
81136098:	00a045b4 	movhi	r2,33046
8113609c:	10a07e04 	addi	r2,r2,-32264
811360a0:	1080058b 	ldhu	r2,22(r2)
811360a4:	10bfffcc 	andi	r2,r2,65535
811360a8:	10000b26 	beq	r2,zero,811360d8 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
811360ac:	00a045b4 	movhi	r2,33046
811360b0:	10a07e04 	addi	r2,r2,-32264
811360b4:	1080058b 	ldhu	r2,22(r2)
811360b8:	10ffffcc 	andi	r3,r2,65535
811360bc:	00a045b4 	movhi	r2,33046
811360c0:	10a07e04 	addi	r2,r2,-32264
811360c4:	10800383 	ldbu	r2,14(r2)
811360c8:	10803fcc 	andi	r2,r2,255
811360cc:	1885283a 	div	r2,r3,r2
811360d0:	e0bffd15 	stw	r2,-12(fp)
811360d4:	00000906 	br	811360fc <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
811360d8:	00a045b4 	movhi	r2,33046
811360dc:	10a07e04 	addi	r2,r2,-32264
811360e0:	10c00917 	ldw	r3,36(r2)
811360e4:	00a045b4 	movhi	r2,33046
811360e8:	10a07e04 	addi	r2,r2,-32264
811360ec:	10800383 	ldbu	r2,14(r2)
811360f0:	10803fcc 	andi	r2,r2,255
811360f4:	1885203a 	divu	r2,r3,r2
811360f8:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
811360fc:	e0bffd17 	ldw	r2,-12(fp)
81136100:	1083fdc8 	cmpgei	r2,r2,4087
81136104:	1000051e 	bne	r2,zero,8113611c <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
81136108:	00a045b4 	movhi	r2,33046
8113610c:	10a07e04 	addi	r2,r2,-32264
81136110:	00c00304 	movi	r3,12
81136114:	10c01085 	stb	r3,66(r2)
81136118:	00000c06 	br	8113614c <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
8113611c:	e0bffd17 	ldw	r2,-12(fp)
81136120:	00fffb54 	movui	r3,65517
81136124:	18800516 	blt	r3,r2,8113613c <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
81136128:	00a045b4 	movhi	r2,33046
8113612c:	10a07e04 	addi	r2,r2,-32264
81136130:	00c00404 	movi	r3,16
81136134:	10c01085 	stb	r3,66(r2)
81136138:	00000406 	br	8113614c <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
8113613c:	00a045b4 	movhi	r2,33046
81136140:	10a07e04 	addi	r2,r2,-32264
81136144:	00c00804 	movi	r3,32
81136148:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
8113614c:	e03ffc15 	stw	zero,-16(fp)
81136150:	00001106 	br	81136198 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
81136154:	d0a09d17 	ldw	r2,-32140(gp)
81136158:	10c00a17 	ldw	r3,40(r2)
8113615c:	e0bffc17 	ldw	r2,-16(fp)
81136160:	1885883a 	add	r2,r3,r2
81136164:	108009c4 	addi	r2,r2,39
81136168:	10800023 	ldbuio	r2,0(r2)
8113616c:	10803fcc 	andi	r2,r2,255
81136170:	1009883a 	mov	r4,r2
81136174:	00a045b4 	movhi	r2,33046
81136178:	10a07e04 	addi	r2,r2,-32264
8113617c:	e0fffc17 	ldw	r3,-16(fp)
81136180:	10c5883a 	add	r2,r2,r3
81136184:	10800ac4 	addi	r2,r2,43
81136188:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
8113618c:	e0bffc17 	ldw	r2,-16(fp)
81136190:	10800044 	addi	r2,r2,1
81136194:	e0bffc15 	stw	r2,-16(fp)
81136198:	e0bffc17 	ldw	r2,-16(fp)
8113619c:	10800110 	cmplti	r2,r2,4
811361a0:	103fec1e 	bne	r2,zero,81136154 <__reset+0xfb116154>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
811361a4:	e03ffc15 	stw	zero,-16(fp)
811361a8:	00001106 	br	811361f0 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
811361ac:	d0a09d17 	ldw	r2,-32140(gp)
811361b0:	10c00a17 	ldw	r3,40(r2)
811361b4:	e0bffc17 	ldw	r2,-16(fp)
811361b8:	1885883a 	add	r2,r3,r2
811361bc:	10800ac4 	addi	r2,r2,43
811361c0:	10800023 	ldbuio	r2,0(r2)
811361c4:	10803fcc 	andi	r2,r2,255
811361c8:	1009883a 	mov	r4,r2
811361cc:	00a045b4 	movhi	r2,33046
811361d0:	10a07e04 	addi	r2,r2,-32264
811361d4:	e0fffc17 	ldw	r3,-16(fp)
811361d8:	10c5883a 	add	r2,r2,r3
811361dc:	10800bc4 	addi	r2,r2,47
811361e0:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
811361e4:	e0bffc17 	ldw	r2,-16(fp)
811361e8:	10800044 	addi	r2,r2,1
811361ec:	e0bffc15 	stw	r2,-16(fp)
811361f0:	e0bffc17 	ldw	r2,-16(fp)
811361f4:	108002d0 	cmplti	r2,r2,11
811361f8:	103fec1e 	bne	r2,zero,811361ac <__reset+0xfb1161ac>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
811361fc:	e03ffc15 	stw	zero,-16(fp)
81136200:	00001106 	br	81136248 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
81136204:	d0a09d17 	ldw	r2,-32140(gp)
81136208:	10c00a17 	ldw	r3,40(r2)
8113620c:	e0bffc17 	ldw	r2,-16(fp)
81136210:	1885883a 	add	r2,r3,r2
81136214:	10800d84 	addi	r2,r2,54
81136218:	10800023 	ldbuio	r2,0(r2)
8113621c:	10803fcc 	andi	r2,r2,255
81136220:	1009883a 	mov	r4,r2
81136224:	00a045b4 	movhi	r2,33046
81136228:	10a07e04 	addi	r2,r2,-32264
8113622c:	e0fffc17 	ldw	r3,-16(fp)
81136230:	10c5883a 	add	r2,r2,r3
81136234:	10800e84 	addi	r2,r2,58
81136238:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8113623c:	e0bffc17 	ldw	r2,-16(fp)
81136240:	10800044 	addi	r2,r2,1
81136244:	e0bffc15 	stw	r2,-16(fp)
81136248:	e0bffc17 	ldw	r2,-16(fp)
8113624c:	10800210 	cmplti	r2,r2,8
81136250:	103fec1e 	bne	r2,zero,81136204 <__reset+0xfb116204>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81136254:	e03ffc15 	stw	zero,-16(fp)
81136258:	00000a06 	br	81136284 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
8113625c:	00a045b4 	movhi	r2,33046
81136260:	10a09304 	addi	r2,r2,-32180
81136264:	e0fffc17 	ldw	r3,-16(fp)
81136268:	180691ba 	slli	r3,r3,6
8113626c:	10c5883a 	add	r2,r2,r3
81136270:	10800f04 	addi	r2,r2,60
81136274:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81136278:	e0bffc17 	ldw	r2,-16(fp)
8113627c:	10800044 	addi	r2,r2,1
81136280:	e0bffc15 	stw	r2,-16(fp)
81136284:	e0bffc17 	ldw	r2,-16(fp)
81136288:	10800510 	cmplti	r2,r2,20
8113628c:	103ff31e 	bne	r2,zero,8113625c <__reset+0xfb11625c>
		{
			active_files[counter].in_use = false;
		}
		result = true;
81136290:	00800044 	movi	r2,1
81136294:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
81136298:	00000106 	br	811362a0 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
8113629c:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
811362a0:	e0bffb17 	ldw	r2,-20(fp)
}
811362a4:	e037883a 	mov	sp,fp
811362a8:	dfc00117 	ldw	ra,4(sp)
811362ac:	df000017 	ldw	fp,0(sp)
811362b0:	dec00204 	addi	sp,sp,8
811362b4:	f800283a 	ret

811362b8 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
811362b8:	defffc04 	addi	sp,sp,-16
811362bc:	de00012e 	bgeu	sp,et,811362c4 <Look_for_FAT16+0xc>
811362c0:	003b68fa 	trap	3
811362c4:	dfc00315 	stw	ra,12(sp)
811362c8:	df000215 	stw	fp,8(sp)
811362cc:	df000204 	addi	fp,sp,8
	bool result = false;
811362d0:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
811362d4:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
811362d8:	10002e26 	beq	r2,zero,81136394 <Look_for_FAT16+0xdc>
	{
		short int csd_file_format = *CSD_register_w0;
811362dc:	d0a09717 	ldw	r2,-32164(gp)
811362e0:	1080000b 	ldhu	r2,0(r2)
811362e4:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
811362e8:	d0209b15 	stw	zero,-32148(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
811362ec:	d0209c15 	stw	zero,-32144(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
811362f0:	e0bfff0f 	ldh	r2,-4(fp)
811362f4:	10002716 	blt	r2,zero,81136394 <Look_for_FAT16+0xdc>
811362f8:	e0bfff0b 	ldhu	r2,-4(fp)
811362fc:	10bfffcc 	andi	r2,r2,65535
81136300:	1083000c 	andi	r2,r2,3072
81136304:	10830020 	cmpeqi	r2,r2,3072
81136308:	1000221e 	bne	r2,zero,81136394 <Look_for_FAT16+0xdc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
8113630c:	e0bfff0b 	ldhu	r2,-4(fp)
81136310:	10bfffcc 	andi	r2,r2,65535
81136314:	1083000c 	andi	r2,r2,3072
81136318:	10810018 	cmpnei	r2,r2,1024
8113631c:	1000031e 	bne	r2,zero,8113632c <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
81136320:	0009883a 	mov	r4,zero
81136324:	1135c300 	call	81135c30 <Check_for_DOS_FAT>
81136328:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
8113632c:	e0bfff0b 	ldhu	r2,-4(fp)
81136330:	10bfffcc 	andi	r2,r2,65535
81136334:	1083000c 	andi	r2,r2,3072
81136338:	1000061e 	bne	r2,zero,81136354 <Look_for_FAT16+0x9c>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
8113633c:	113556c0 	call	8113556c <Check_for_Master_Boot_Record>
81136340:	10000426 	beq	r2,zero,81136354 <Look_for_FAT16+0x9c>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
81136344:	d0a09b17 	ldw	r2,-32148(gp)
81136348:	1009883a 	mov	r4,r2
8113634c:	1135c300 	call	81135c30 <Check_for_DOS_FAT>
81136350:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
81136354:	e0bffe17 	ldw	r2,-8(fp)
81136358:	10800058 	cmpnei	r2,r2,1
8113635c:	10000d1e 	bne	r2,zero,81136394 <Look_for_FAT16+0xdc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
81136360:	00a045b4 	movhi	r2,33046
81136364:	10a07e04 	addi	r2,r2,-32264
81136368:	10801083 	ldbu	r2,66(r2)
8113636c:	10803fcc 	andi	r2,r2,255
81136370:	10800420 	cmpeqi	r2,r2,16
81136374:	1000021e 	bne	r2,zero,81136380 <Look_for_FAT16+0xc8>
				{
					result = false;
81136378:	e03ffe15 	stw	zero,-8(fp)
8113637c:	00000506 	br	81136394 <Look_for_FAT16+0xdc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
81136380:	00a045b4 	movhi	r2,33046
81136384:	10a07e04 	addi	r2,r2,-32264
81136388:	1080058b 	ldhu	r2,22(r2)
8113638c:	10bfffcc 	andi	r2,r2,65535
81136390:	d0a09c15 	stw	r2,-32144(gp)
				}
			}
		}
	}
	return result;
81136394:	e0bffe17 	ldw	r2,-8(fp)
}
81136398:	e037883a 	mov	sp,fp
8113639c:	dfc00117 	ldw	ra,4(sp)
811363a0:	df000017 	ldw	fp,0(sp)
811363a4:	dec00204 	addi	sp,sp,8
811363a8:	f800283a 	ret

811363ac <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
811363ac:	defffb04 	addi	sp,sp,-20
811363b0:	de00012e 	bgeu	sp,et,811363b8 <filename_to_upper_case+0xc>
811363b4:	003b68fa 	trap	3
811363b8:	dfc00415 	stw	ra,16(sp)
811363bc:	df000315 	stw	fp,12(sp)
811363c0:	df000304 	addi	fp,sp,12
811363c4:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
811363c8:	e13fff17 	ldw	r4,-4(fp)
811363cc:	11155840 	call	81115584 <strlen>
811363d0:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
811363d4:	e03ffd15 	stw	zero,-12(fp)
811363d8:	00001e06 	br	81136454 <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
811363dc:	e0bffd17 	ldw	r2,-12(fp)
811363e0:	e0ffff17 	ldw	r3,-4(fp)
811363e4:	1885883a 	add	r2,r3,r2
811363e8:	10800003 	ldbu	r2,0(r2)
811363ec:	10803fcc 	andi	r2,r2,255
811363f0:	1080201c 	xori	r2,r2,128
811363f4:	10bfe004 	addi	r2,r2,-128
811363f8:	10801850 	cmplti	r2,r2,97
811363fc:	1000121e 	bne	r2,zero,81136448 <filename_to_upper_case+0x9c>
81136400:	e0bffd17 	ldw	r2,-12(fp)
81136404:	e0ffff17 	ldw	r3,-4(fp)
81136408:	1885883a 	add	r2,r3,r2
8113640c:	10800003 	ldbu	r2,0(r2)
81136410:	10803fcc 	andi	r2,r2,255
81136414:	1080201c 	xori	r2,r2,128
81136418:	10bfe004 	addi	r2,r2,-128
8113641c:	10801ec8 	cmpgei	r2,r2,123
81136420:	1000091e 	bne	r2,zero,81136448 <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
81136424:	e0bffd17 	ldw	r2,-12(fp)
81136428:	e0ffff17 	ldw	r3,-4(fp)
8113642c:	1885883a 	add	r2,r3,r2
81136430:	e0fffd17 	ldw	r3,-12(fp)
81136434:	e13fff17 	ldw	r4,-4(fp)
81136438:	20c7883a 	add	r3,r4,r3
8113643c:	18c00003 	ldbu	r3,0(r3)
81136440:	18fff804 	addi	r3,r3,-32
81136444:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
81136448:	e0bffd17 	ldw	r2,-12(fp)
8113644c:	10800044 	addi	r2,r2,1
81136450:	e0bffd15 	stw	r2,-12(fp)
81136454:	e0fffd17 	ldw	r3,-12(fp)
81136458:	e0bffe17 	ldw	r2,-8(fp)
8113645c:	18bfdf16 	blt	r3,r2,811363dc <__reset+0xfb1163dc>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
81136460:	0001883a 	nop
81136464:	e037883a 	mov	sp,fp
81136468:	dfc00117 	ldw	ra,4(sp)
8113646c:	df000017 	ldw	fp,0(sp)
81136470:	dec00204 	addi	sp,sp,8
81136474:	f800283a 	ret

81136478 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
81136478:	defff804 	addi	sp,sp,-32
8113647c:	de00012e 	bgeu	sp,et,81136484 <check_file_name_for_FAT16_compliance+0xc>
81136480:	003b68fa 	trap	3
81136484:	dfc00715 	stw	ra,28(sp)
81136488:	df000615 	stw	fp,24(sp)
8113648c:	df000604 	addi	fp,sp,24
81136490:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
81136494:	e13fff17 	ldw	r4,-4(fp)
81136498:	11155840 	call	81115584 <strlen>
8113649c:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
811364a0:	00bfffc4 	movi	r2,-1
811364a4:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
811364a8:	00bfffc4 	movi	r2,-1
811364ac:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
811364b0:	00800044 	movi	r2,1
811364b4:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
811364b8:	e03ffa15 	stw	zero,-24(fp)
811364bc:	00006d06 	br	81136674 <check_file_name_for_FAT16_compliance+0x1fc>
    {
        if ((file_name[index] == ' ') ||
811364c0:	e0bffa17 	ldw	r2,-24(fp)
811364c4:	e0ffff17 	ldw	r3,-4(fp)
811364c8:	1885883a 	add	r2,r3,r2
811364cc:	10800003 	ldbu	r2,0(r2)
811364d0:	10803fcc 	andi	r2,r2,255
811364d4:	1080201c 	xori	r2,r2,128
811364d8:	10bfe004 	addi	r2,r2,-128
811364dc:	10800820 	cmpeqi	r2,r2,32
811364e0:	10003e1e 	bne	r2,zero,811365dc <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811364e4:	e0bffa17 	ldw	r2,-24(fp)
811364e8:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
811364ec:	e0bffb17 	ldw	r2,-20(fp)
811364f0:	1880121e 	bne	r3,r2,8113653c <check_file_name_for_FAT16_compliance+0xc4>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811364f4:	e0bffa17 	ldw	r2,-24(fp)
811364f8:	e0ffff17 	ldw	r3,-4(fp)
811364fc:	1885883a 	add	r2,r3,r2
81136500:	10800003 	ldbu	r2,0(r2)
81136504:	10803fcc 	andi	r2,r2,255
81136508:	1080201c 	xori	r2,r2,128
8113650c:	10bfe004 	addi	r2,r2,-128
81136510:	10801720 	cmpeqi	r2,r2,92
81136514:	1000311e 	bne	r2,zero,811365dc <check_file_name_for_FAT16_compliance+0x164>
81136518:	e0bffa17 	ldw	r2,-24(fp)
8113651c:	e0ffff17 	ldw	r3,-4(fp)
81136520:	1885883a 	add	r2,r3,r2
81136524:	10800003 	ldbu	r2,0(r2)
81136528:	10803fcc 	andi	r2,r2,255
8113652c:	1080201c 	xori	r2,r2,128
81136530:	10bfe004 	addi	r2,r2,-128
81136534:	10800be0 	cmpeqi	r2,r2,47
81136538:	1000281e 	bne	r2,zero,811365dc <check_file_name_for_FAT16_compliance+0x164>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
8113653c:	e0fffa17 	ldw	r3,-24(fp)
81136540:	e0bffc17 	ldw	r2,-16(fp)
81136544:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81136548:	10800258 	cmpnei	r2,r2,9
8113654c:	1000091e 	bne	r2,zero,81136574 <check_file_name_for_FAT16_compliance+0xfc>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81136550:	e0bffa17 	ldw	r2,-24(fp)
81136554:	e0ffff17 	ldw	r3,-4(fp)
81136558:	1885883a 	add	r2,r3,r2
8113655c:	10800003 	ldbu	r2,0(r2)
81136560:	10803fcc 	andi	r2,r2,255
81136564:	1080201c 	xori	r2,r2,128
81136568:	10bfe004 	addi	r2,r2,-128
8113656c:	10800b98 	cmpnei	r2,r2,46
81136570:	10001a1e 	bne	r2,zero,811365dc <check_file_name_for_FAT16_compliance+0x164>
81136574:	e0fffb17 	ldw	r3,-20(fp)
81136578:	e0bffc17 	ldw	r2,-16(fp)
8113657c:	18801926 	beq	r3,r2,811365e4 <check_file_name_for_FAT16_compliance+0x16c>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81136580:	e0fffa17 	ldw	r3,-24(fp)
81136584:	e0bffc17 	ldw	r2,-16(fp)
81136588:	1885c83a 	sub	r2,r3,r2
8113658c:	10800110 	cmplti	r2,r2,4
81136590:	1000141e 	bne	r2,zero,811365e4 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81136594:	e0bffa17 	ldw	r2,-24(fp)
81136598:	e0ffff17 	ldw	r3,-4(fp)
8113659c:	1885883a 	add	r2,r3,r2
811365a0:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
811365a4:	10803fcc 	andi	r2,r2,255
811365a8:	1080201c 	xori	r2,r2,128
811365ac:	10bfe004 	addi	r2,r2,-128
811365b0:	10801720 	cmpeqi	r2,r2,92
811365b4:	10000b1e 	bne	r2,zero,811365e4 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
811365b8:	e0bffa17 	ldw	r2,-24(fp)
811365bc:	e0ffff17 	ldw	r3,-4(fp)
811365c0:	1885883a 	add	r2,r3,r2
811365c4:	10800003 	ldbu	r2,0(r2)
811365c8:	10803fcc 	andi	r2,r2,255
811365cc:	1080201c 	xori	r2,r2,128
811365d0:	10bfe004 	addi	r2,r2,-128
811365d4:	10800be0 	cmpeqi	r2,r2,47
811365d8:	1000021e 	bne	r2,zero,811365e4 <check_file_name_for_FAT16_compliance+0x16c>
           )
        {
            result = false;
811365dc:	e03ffd15 	stw	zero,-12(fp)
            break;
811365e0:	00002706 	br	81136680 <check_file_name_for_FAT16_compliance+0x208>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
811365e4:	e0bffa17 	ldw	r2,-24(fp)
811365e8:	e0ffff17 	ldw	r3,-4(fp)
811365ec:	1885883a 	add	r2,r3,r2
811365f0:	10800003 	ldbu	r2,0(r2)
811365f4:	10803fcc 	andi	r2,r2,255
811365f8:	1080201c 	xori	r2,r2,128
811365fc:	10bfe004 	addi	r2,r2,-128
81136600:	10801720 	cmpeqi	r2,r2,92
81136604:	1000091e 	bne	r2,zero,8113662c <check_file_name_for_FAT16_compliance+0x1b4>
81136608:	e0bffa17 	ldw	r2,-24(fp)
8113660c:	e0ffff17 	ldw	r3,-4(fp)
81136610:	1885883a 	add	r2,r3,r2
81136614:	10800003 	ldbu	r2,0(r2)
81136618:	10803fcc 	andi	r2,r2,255
8113661c:	1080201c 	xori	r2,r2,128
81136620:	10bfe004 	addi	r2,r2,-128
81136624:	10800bd8 	cmpnei	r2,r2,47
81136628:	1000041e 	bne	r2,zero,8113663c <check_file_name_for_FAT16_compliance+0x1c4>
        {
            last_period = index;
8113662c:	e0bffa17 	ldw	r2,-24(fp)
81136630:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
81136634:	e0bffa17 	ldw	r2,-24(fp)
81136638:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
8113663c:	e0bffa17 	ldw	r2,-24(fp)
81136640:	e0ffff17 	ldw	r3,-4(fp)
81136644:	1885883a 	add	r2,r3,r2
81136648:	10800003 	ldbu	r2,0(r2)
8113664c:	10803fcc 	andi	r2,r2,255
81136650:	1080201c 	xori	r2,r2,128
81136654:	10bfe004 	addi	r2,r2,-128
81136658:	10800b98 	cmpnei	r2,r2,46
8113665c:	1000021e 	bne	r2,zero,81136668 <check_file_name_for_FAT16_compliance+0x1f0>
        {
            last_period = index;
81136660:	e0bffa17 	ldw	r2,-24(fp)
81136664:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
81136668:	e0bffa17 	ldw	r2,-24(fp)
8113666c:	10800044 	addi	r2,r2,1
81136670:	e0bffa15 	stw	r2,-24(fp)
81136674:	e0fffa17 	ldw	r3,-24(fp)
81136678:	e0bffe17 	ldw	r2,-8(fp)
8113667c:	18bf9016 	blt	r3,r2,811364c0 <__reset+0xfb1164c0>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
81136680:	e0bffe17 	ldw	r2,-8(fp)
81136684:	10bfffc4 	addi	r2,r2,-1
81136688:	e0ffff17 	ldw	r3,-4(fp)
8113668c:	1885883a 	add	r2,r3,r2
81136690:	10800003 	ldbu	r2,0(r2)
81136694:	10803fcc 	andi	r2,r2,255
81136698:	1080201c 	xori	r2,r2,128
8113669c:	10bfe004 	addi	r2,r2,-128
811366a0:	10801720 	cmpeqi	r2,r2,92
811366a4:	10000a1e 	bne	r2,zero,811366d0 <check_file_name_for_FAT16_compliance+0x258>
811366a8:	e0bffe17 	ldw	r2,-8(fp)
811366ac:	10bfffc4 	addi	r2,r2,-1
811366b0:	e0ffff17 	ldw	r3,-4(fp)
811366b4:	1885883a 	add	r2,r3,r2
811366b8:	10800003 	ldbu	r2,0(r2)
811366bc:	10803fcc 	andi	r2,r2,255
811366c0:	1080201c 	xori	r2,r2,128
811366c4:	10bfe004 	addi	r2,r2,-128
811366c8:	10800bd8 	cmpnei	r2,r2,47
811366cc:	1000011e 	bne	r2,zero,811366d4 <check_file_name_for_FAT16_compliance+0x25c>
    {
        result = false;
811366d0:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
811366d4:	e0bffd17 	ldw	r2,-12(fp)
}
811366d8:	e037883a 	mov	sp,fp
811366dc:	dfc00117 	ldw	ra,4(sp)
811366e0:	df000017 	ldw	fp,0(sp)
811366e4:	dec00204 	addi	sp,sp,8
811366e8:	f800283a 	ret

811366ec <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
811366ec:	defffb04 	addi	sp,sp,-20
811366f0:	de00012e 	bgeu	sp,et,811366f8 <get_dir_divider_location+0xc>
811366f4:	003b68fa 	trap	3
811366f8:	dfc00415 	stw	ra,16(sp)
811366fc:	df000315 	stw	fp,12(sp)
81136700:	df000304 	addi	fp,sp,12
81136704:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
81136708:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
8113670c:	e13fff17 	ldw	r4,-4(fp)
81136710:	11155840 	call	81115584 <strlen>
81136714:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
81136718:	e03ffd15 	stw	zero,-12(fp)
8113671c:	00001506 	br	81136774 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
81136720:	e0bffd17 	ldw	r2,-12(fp)
81136724:	e0ffff17 	ldw	r3,-4(fp)
81136728:	1885883a 	add	r2,r3,r2
8113672c:	10800003 	ldbu	r2,0(r2)
81136730:	10803fcc 	andi	r2,r2,255
81136734:	1080201c 	xori	r2,r2,128
81136738:	10bfe004 	addi	r2,r2,-128
8113673c:	10801720 	cmpeqi	r2,r2,92
81136740:	10000f1e 	bne	r2,zero,81136780 <get_dir_divider_location+0x94>
81136744:	e0bffd17 	ldw	r2,-12(fp)
81136748:	e0ffff17 	ldw	r3,-4(fp)
8113674c:	1885883a 	add	r2,r3,r2
81136750:	10800003 	ldbu	r2,0(r2)
81136754:	10803fcc 	andi	r2,r2,255
81136758:	1080201c 	xori	r2,r2,128
8113675c:	10bfe004 	addi	r2,r2,-128
81136760:	10800be0 	cmpeqi	r2,r2,47
81136764:	1000061e 	bne	r2,zero,81136780 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
81136768:	e0bffd17 	ldw	r2,-12(fp)
8113676c:	10800044 	addi	r2,r2,1
81136770:	e0bffd15 	stw	r2,-12(fp)
81136774:	e0fffd17 	ldw	r3,-12(fp)
81136778:	e0bffe17 	ldw	r2,-8(fp)
8113677c:	18bfe816 	blt	r3,r2,81136720 <__reset+0xfb116720>
        {
            break;
        }
    }
    
    if (index == length)
81136780:	e0fffd17 	ldw	r3,-12(fp)
81136784:	e0bffe17 	ldw	r2,-8(fp)
81136788:	1880021e 	bne	r3,r2,81136794 <get_dir_divider_location+0xa8>
    {
        index = -1;
8113678c:	00bfffc4 	movi	r2,-1
81136790:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
81136794:	e0bffd17 	ldw	r2,-12(fp)
}
81136798:	e037883a 	mov	sp,fp
8113679c:	dfc00117 	ldw	ra,4(sp)
811367a0:	df000017 	ldw	fp,0(sp)
811367a4:	dec00204 	addi	sp,sp,8
811367a8:	f800283a 	ret

811367ac <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
811367ac:	defffa04 	addi	sp,sp,-24
811367b0:	de00012e 	bgeu	sp,et,811367b8 <match_file_record_to_name_ext+0xc>
811367b4:	003b68fa 	trap	3
811367b8:	df000515 	stw	fp,20(sp)
811367bc:	df000504 	addi	fp,sp,20
811367c0:	e13ffd15 	stw	r4,-12(fp)
811367c4:	e17ffe15 	stw	r5,-8(fp)
811367c8:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
811367cc:	00800044 	movi	r2,1
811367d0:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
811367d4:	e03ffc15 	stw	zero,-16(fp)
811367d8:	00004606 	br	811368f4 <match_file_record_to_name_ext+0x148>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
811367dc:	e0fffd17 	ldw	r3,-12(fp)
811367e0:	e0bffc17 	ldw	r2,-16(fp)
811367e4:	1885883a 	add	r2,r3,r2
811367e8:	10800003 	ldbu	r2,0(r2)
811367ec:	10803fcc 	andi	r2,r2,255
811367f0:	10801870 	cmpltui	r2,r2,97
811367f4:	1000101e 	bne	r2,zero,81136838 <match_file_record_to_name_ext+0x8c>
811367f8:	e0fffd17 	ldw	r3,-12(fp)
811367fc:	e0bffc17 	ldw	r2,-16(fp)
81136800:	1885883a 	add	r2,r3,r2
81136804:	10800003 	ldbu	r2,0(r2)
81136808:	10803fcc 	andi	r2,r2,255
8113680c:	10801ee8 	cmpgeui	r2,r2,123
81136810:	1000091e 	bne	r2,zero,81136838 <match_file_record_to_name_ext+0x8c>
81136814:	e0fffd17 	ldw	r3,-12(fp)
81136818:	e0bffc17 	ldw	r2,-16(fp)
8113681c:	1885883a 	add	r2,r3,r2
81136820:	10800003 	ldbu	r2,0(r2)
81136824:	10bff804 	addi	r2,r2,-32
81136828:	10c03fcc 	andi	r3,r2,255
8113682c:	18c0201c 	xori	r3,r3,128
81136830:	18ffe004 	addi	r3,r3,-128
81136834:	00000706 	br	81136854 <match_file_record_to_name_ext+0xa8>
81136838:	e0fffd17 	ldw	r3,-12(fp)
8113683c:	e0bffc17 	ldw	r2,-16(fp)
81136840:	1885883a 	add	r2,r3,r2
81136844:	10800003 	ldbu	r2,0(r2)
81136848:	10c03fcc 	andi	r3,r2,255
8113684c:	18c0201c 	xori	r3,r3,128
81136850:	18ffe004 	addi	r3,r3,-128
81136854:	e0bffc17 	ldw	r2,-16(fp)
81136858:	e13ffe17 	ldw	r4,-8(fp)
8113685c:	2085883a 	add	r2,r4,r2
81136860:	10800003 	ldbu	r2,0(r2)
81136864:	10803fcc 	andi	r2,r2,255
81136868:	1080201c 	xori	r2,r2,128
8113686c:	10bfe004 	addi	r2,r2,-128
81136870:	10801850 	cmplti	r2,r2,97
81136874:	1000121e 	bne	r2,zero,811368c0 <match_file_record_to_name_ext+0x114>
81136878:	e0bffc17 	ldw	r2,-16(fp)
8113687c:	e13ffe17 	ldw	r4,-8(fp)
81136880:	2085883a 	add	r2,r4,r2
81136884:	10800003 	ldbu	r2,0(r2)
81136888:	10803fcc 	andi	r2,r2,255
8113688c:	1080201c 	xori	r2,r2,128
81136890:	10bfe004 	addi	r2,r2,-128
81136894:	10801ec8 	cmpgei	r2,r2,123
81136898:	1000091e 	bne	r2,zero,811368c0 <match_file_record_to_name_ext+0x114>
8113689c:	e0bffc17 	ldw	r2,-16(fp)
811368a0:	e13ffe17 	ldw	r4,-8(fp)
811368a4:	2085883a 	add	r2,r4,r2
811368a8:	10800003 	ldbu	r2,0(r2)
811368ac:	10bff804 	addi	r2,r2,-32
811368b0:	10803fcc 	andi	r2,r2,255
811368b4:	1080201c 	xori	r2,r2,128
811368b8:	10bfe004 	addi	r2,r2,-128
811368bc:	00000706 	br	811368dc <match_file_record_to_name_ext+0x130>
811368c0:	e0bffc17 	ldw	r2,-16(fp)
811368c4:	e13ffe17 	ldw	r4,-8(fp)
811368c8:	2085883a 	add	r2,r4,r2
811368cc:	10800003 	ldbu	r2,0(r2)
811368d0:	10803fcc 	andi	r2,r2,255
811368d4:	1080201c 	xori	r2,r2,128
811368d8:	10bfe004 	addi	r2,r2,-128
811368dc:	18800226 	beq	r3,r2,811368e8 <match_file_record_to_name_ext+0x13c>
        {
            match = false;
811368e0:	e03ffb15 	stw	zero,-20(fp)
			break;
811368e4:	00000606 	br	81136900 <match_file_record_to_name_ext+0x154>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
811368e8:	e0bffc17 	ldw	r2,-16(fp)
811368ec:	10800044 	addi	r2,r2,1
811368f0:	e0bffc15 	stw	r2,-16(fp)
811368f4:	e0bffc17 	ldw	r2,-16(fp)
811368f8:	10800210 	cmplti	r2,r2,8
811368fc:	103fb71e 	bne	r2,zero,811367dc <__reset+0xfb1167dc>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81136900:	e03ffc15 	stw	zero,-16(fp)
81136904:	00004a06 	br	81136a30 <match_file_record_to_name_ext+0x284>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
81136908:	e0fffd17 	ldw	r3,-12(fp)
8113690c:	e0bffc17 	ldw	r2,-16(fp)
81136910:	1885883a 	add	r2,r3,r2
81136914:	10800204 	addi	r2,r2,8
81136918:	10800003 	ldbu	r2,0(r2)
8113691c:	10803fcc 	andi	r2,r2,255
81136920:	10801870 	cmpltui	r2,r2,97
81136924:	1000121e 	bne	r2,zero,81136970 <match_file_record_to_name_ext+0x1c4>
81136928:	e0fffd17 	ldw	r3,-12(fp)
8113692c:	e0bffc17 	ldw	r2,-16(fp)
81136930:	1885883a 	add	r2,r3,r2
81136934:	10800204 	addi	r2,r2,8
81136938:	10800003 	ldbu	r2,0(r2)
8113693c:	10803fcc 	andi	r2,r2,255
81136940:	10801ee8 	cmpgeui	r2,r2,123
81136944:	10000a1e 	bne	r2,zero,81136970 <match_file_record_to_name_ext+0x1c4>
81136948:	e0fffd17 	ldw	r3,-12(fp)
8113694c:	e0bffc17 	ldw	r2,-16(fp)
81136950:	1885883a 	add	r2,r3,r2
81136954:	10800204 	addi	r2,r2,8
81136958:	10800003 	ldbu	r2,0(r2)
8113695c:	10bff804 	addi	r2,r2,-32
81136960:	10c03fcc 	andi	r3,r2,255
81136964:	18c0201c 	xori	r3,r3,128
81136968:	18ffe004 	addi	r3,r3,-128
8113696c:	00000806 	br	81136990 <match_file_record_to_name_ext+0x1e4>
81136970:	e0fffd17 	ldw	r3,-12(fp)
81136974:	e0bffc17 	ldw	r2,-16(fp)
81136978:	1885883a 	add	r2,r3,r2
8113697c:	10800204 	addi	r2,r2,8
81136980:	10800003 	ldbu	r2,0(r2)
81136984:	10c03fcc 	andi	r3,r2,255
81136988:	18c0201c 	xori	r3,r3,128
8113698c:	18ffe004 	addi	r3,r3,-128
81136990:	e0bffc17 	ldw	r2,-16(fp)
81136994:	e13fff17 	ldw	r4,-4(fp)
81136998:	2085883a 	add	r2,r4,r2
8113699c:	10800003 	ldbu	r2,0(r2)
811369a0:	10803fcc 	andi	r2,r2,255
811369a4:	1080201c 	xori	r2,r2,128
811369a8:	10bfe004 	addi	r2,r2,-128
811369ac:	10801850 	cmplti	r2,r2,97
811369b0:	1000121e 	bne	r2,zero,811369fc <match_file_record_to_name_ext+0x250>
811369b4:	e0bffc17 	ldw	r2,-16(fp)
811369b8:	e13fff17 	ldw	r4,-4(fp)
811369bc:	2085883a 	add	r2,r4,r2
811369c0:	10800003 	ldbu	r2,0(r2)
811369c4:	10803fcc 	andi	r2,r2,255
811369c8:	1080201c 	xori	r2,r2,128
811369cc:	10bfe004 	addi	r2,r2,-128
811369d0:	10801ec8 	cmpgei	r2,r2,123
811369d4:	1000091e 	bne	r2,zero,811369fc <match_file_record_to_name_ext+0x250>
811369d8:	e0bffc17 	ldw	r2,-16(fp)
811369dc:	e13fff17 	ldw	r4,-4(fp)
811369e0:	2085883a 	add	r2,r4,r2
811369e4:	10800003 	ldbu	r2,0(r2)
811369e8:	10bff804 	addi	r2,r2,-32
811369ec:	10803fcc 	andi	r2,r2,255
811369f0:	1080201c 	xori	r2,r2,128
811369f4:	10bfe004 	addi	r2,r2,-128
811369f8:	00000706 	br	81136a18 <match_file_record_to_name_ext+0x26c>
811369fc:	e0bffc17 	ldw	r2,-16(fp)
81136a00:	e13fff17 	ldw	r4,-4(fp)
81136a04:	2085883a 	add	r2,r4,r2
81136a08:	10800003 	ldbu	r2,0(r2)
81136a0c:	10803fcc 	andi	r2,r2,255
81136a10:	1080201c 	xori	r2,r2,128
81136a14:	10bfe004 	addi	r2,r2,-128
81136a18:	18800226 	beq	r3,r2,81136a24 <match_file_record_to_name_ext+0x278>
        {
            match = false;
81136a1c:	e03ffb15 	stw	zero,-20(fp)
			break;
81136a20:	00000606 	br	81136a3c <match_file_record_to_name_ext+0x290>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81136a24:	e0bffc17 	ldw	r2,-16(fp)
81136a28:	10800044 	addi	r2,r2,1
81136a2c:	e0bffc15 	stw	r2,-16(fp)
81136a30:	e0bffc17 	ldw	r2,-16(fp)
81136a34:	108000d0 	cmplti	r2,r2,3
81136a38:	103fb31e 	bne	r2,zero,81136908 <__reset+0xfb116908>
        {
            match = false;
			break;
        }
    }
	return match;
81136a3c:	e0bffb17 	ldw	r2,-20(fp)
}
81136a40:	e037883a 	mov	sp,fp
81136a44:	df000017 	ldw	fp,0(sp)
81136a48:	dec00104 	addi	sp,sp,4
81136a4c:	f800283a 	ret

81136a50 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
81136a50:	deffe704 	addi	sp,sp,-100
81136a54:	de00012e 	bgeu	sp,et,81136a5c <get_home_directory_cluster_for_file+0xc>
81136a58:	003b68fa 	trap	3
81136a5c:	dfc01815 	stw	ra,96(sp)
81136a60:	df001715 	stw	fp,92(sp)
81136a64:	df001704 	addi	fp,sp,92
81136a68:	e13ffd15 	stw	r4,-12(fp)
81136a6c:	e17ffe15 	stw	r5,-8(fp)
81136a70:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
81136a74:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
81136a78:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
81136a7c:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
81136a80:	e13ffd17 	ldw	r4,-12(fp)
81136a84:	11366ec0 	call	811366ec <get_dir_divider_location>
81136a88:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
81136a8c:	00012f06 	br	81136f4c <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81136a90:	00800804 	movi	r2,32
81136a94:	e0bff905 	stb	r2,-28(fp)
81136a98:	00800804 	movi	r2,32
81136a9c:	e0bff945 	stb	r2,-27(fp)
81136aa0:	00800804 	movi	r2,32
81136aa4:	e0bff985 	stb	r2,-26(fp)
81136aa8:	00800804 	movi	r2,32
81136aac:	e0bff9c5 	stb	r2,-25(fp)
81136ab0:	00800804 	movi	r2,32
81136ab4:	e0bffa05 	stb	r2,-24(fp)
81136ab8:	00800804 	movi	r2,32
81136abc:	e0bffa45 	stb	r2,-23(fp)
81136ac0:	00800804 	movi	r2,32
81136ac4:	e0bffa85 	stb	r2,-22(fp)
81136ac8:	00800804 	movi	r2,32
81136acc:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
81136ad0:	00800804 	movi	r2,32
81136ad4:	e0bffb05 	stb	r2,-20(fp)
81136ad8:	00800804 	movi	r2,32
81136adc:	e0bffb45 	stb	r2,-19(fp)
81136ae0:	00800804 	movi	r2,32
81136ae4:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
81136ae8:	00bfffc4 	movi	r2,-1
81136aec:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
81136af0:	e0bfea17 	ldw	r2,-88(fp)
81136af4:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81136af8:	e03fec15 	stw	zero,-80(fp)
81136afc:	00002d06 	br	81136bb4 <get_home_directory_cluster_for_file+0x164>
        {
            if (file_name[index+start_location] == '.')
81136b00:	e0ffec17 	ldw	r3,-80(fp)
81136b04:	e0bfed17 	ldw	r2,-76(fp)
81136b08:	1885883a 	add	r2,r3,r2
81136b0c:	1007883a 	mov	r3,r2
81136b10:	e0bffd17 	ldw	r2,-12(fp)
81136b14:	10c5883a 	add	r2,r2,r3
81136b18:	10800003 	ldbu	r2,0(r2)
81136b1c:	10803fcc 	andi	r2,r2,255
81136b20:	1080201c 	xori	r2,r2,128
81136b24:	10bfe004 	addi	r2,r2,-128
81136b28:	10800b98 	cmpnei	r2,r2,46
81136b2c:	1000031e 	bne	r2,zero,81136b3c <get_home_directory_cluster_for_file+0xec>
            {
                ext_index = index;
81136b30:	e0bfec17 	ldw	r2,-80(fp)
81136b34:	e0bfee15 	stw	r2,-72(fp)
81136b38:	00001b06 	br	81136ba8 <get_home_directory_cluster_for_file+0x158>
            }
            else if (ext_index < 0)
81136b3c:	e0bfee17 	ldw	r2,-72(fp)
81136b40:	10000c0e 	bge	r2,zero,81136b74 <get_home_directory_cluster_for_file+0x124>
            {
                name[index] = file_name[index+start_location];
81136b44:	e0ffec17 	ldw	r3,-80(fp)
81136b48:	e0bfed17 	ldw	r2,-76(fp)
81136b4c:	1885883a 	add	r2,r3,r2
81136b50:	1007883a 	mov	r3,r2
81136b54:	e0bffd17 	ldw	r2,-12(fp)
81136b58:	10c5883a 	add	r2,r2,r3
81136b5c:	10c00003 	ldbu	r3,0(r2)
81136b60:	e13ff904 	addi	r4,fp,-28
81136b64:	e0bfec17 	ldw	r2,-80(fp)
81136b68:	2085883a 	add	r2,r4,r2
81136b6c:	10c00005 	stb	r3,0(r2)
81136b70:	00000d06 	br	81136ba8 <get_home_directory_cluster_for_file+0x158>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
81136b74:	e0ffec17 	ldw	r3,-80(fp)
81136b78:	e0bfee17 	ldw	r2,-72(fp)
81136b7c:	1885c83a 	sub	r2,r3,r2
81136b80:	e13fec17 	ldw	r4,-80(fp)
81136b84:	e0ffed17 	ldw	r3,-76(fp)
81136b88:	20c7883a 	add	r3,r4,r3
81136b8c:	1809883a 	mov	r4,r3
81136b90:	e0fffd17 	ldw	r3,-12(fp)
81136b94:	1907883a 	add	r3,r3,r4
81136b98:	18c00003 	ldbu	r3,0(r3)
81136b9c:	e13ffb04 	addi	r4,fp,-20
81136ba0:	2085883a 	add	r2,r4,r2
81136ba4:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81136ba8:	e0bfec17 	ldw	r2,-80(fp)
81136bac:	10800044 	addi	r2,r2,1
81136bb0:	e0bfec15 	stw	r2,-80(fp)
81136bb4:	e0ffec17 	ldw	r3,-80(fp)
81136bb8:	e0bfeb17 	ldw	r2,-84(fp)
81136bbc:	18bfd016 	blt	r3,r2,81136b00 <__reset+0xfb116b00>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
81136bc0:	e0bfea17 	ldw	r2,-88(fp)
81136bc4:	10005c1e 	bne	r2,zero,81136d38 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81136bc8:	00a045b4 	movhi	r2,33046
81136bcc:	10a07e04 	addi	r2,r2,-32264
81136bd0:	1080050b 	ldhu	r2,20(r2)
81136bd4:	10bfffcc 	andi	r2,r2,65535
81136bd8:	1006917a 	slli	r3,r2,5
81136bdc:	00a045b4 	movhi	r2,33046
81136be0:	10a07e04 	addi	r2,r2,-32264
81136be4:	1080030b 	ldhu	r2,12(r2)
81136be8:	10bfffcc 	andi	r2,r2,65535
81136bec:	1885283a 	div	r2,r3,r2
81136bf0:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81136bf4:	e03ff015 	stw	zero,-64(fp)
81136bf8:	00003b06 	br	81136ce8 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
81136bfc:	00a045b4 	movhi	r2,33046
81136c00:	10a07e04 	addi	r2,r2,-32264
81136c04:	10c01317 	ldw	r3,76(r2)
81136c08:	e0bff017 	ldw	r2,-64(fp)
81136c0c:	1885883a 	add	r2,r3,r2
81136c10:	1007883a 	mov	r3,r2
81136c14:	d0a09b17 	ldw	r2,-32148(gp)
81136c18:	100b883a 	mov	r5,r2
81136c1c:	1809883a 	mov	r4,r3
81136c20:	11352e80 	call	811352e8 <Read_Sector_Data>
81136c24:	10003426 	beq	r2,zero,81136cf8 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81136c28:	e03ff115 	stw	zero,-60(fp)
81136c2c:	00002506 	br	81136cc4 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81136c30:	e0bff117 	ldw	r2,-60(fp)
81136c34:	1004917a 	slli	r2,r2,5
81136c38:	e0fff017 	ldw	r3,-64(fp)
81136c3c:	180f883a 	mov	r7,r3
81136c40:	000d883a 	mov	r6,zero
81136c44:	e17fff17 	ldw	r5,-4(fp)
81136c48:	1009883a 	mov	r4,r2
81136c4c:	11357180 	call	81135718 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81136c50:	e0bfff17 	ldw	r2,-4(fp)
81136c54:	10800003 	ldbu	r2,0(r2)
81136c58:	10803fcc 	andi	r2,r2,255
81136c5c:	10803960 	cmpeqi	r2,r2,229
81136c60:	1000151e 	bne	r2,zero,81136cb8 <get_home_directory_cluster_for_file+0x268>
81136c64:	e0bfff17 	ldw	r2,-4(fp)
81136c68:	10800003 	ldbu	r2,0(r2)
81136c6c:	10803fcc 	andi	r2,r2,255
81136c70:	10001126 	beq	r2,zero,81136cb8 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81136c74:	e0fffb04 	addi	r3,fp,-20
81136c78:	e0bff904 	addi	r2,fp,-28
81136c7c:	180d883a 	mov	r6,r3
81136c80:	100b883a 	mov	r5,r2
81136c84:	e13fff17 	ldw	r4,-4(fp)
81136c88:	11367ac0 	call	811367ac <match_file_record_to_name_ext>
81136c8c:	e0bff815 	stw	r2,-32(fp)
                            if (match)
81136c90:	e0bff817 	ldw	r2,-32(fp)
81136c94:	10000826 	beq	r2,zero,81136cb8 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
81136c98:	e0bfff17 	ldw	r2,-4(fp)
81136c9c:	1080058b 	ldhu	r2,22(r2)
81136ca0:	10bfffcc 	andi	r2,r2,65535
81136ca4:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
81136ca8:	e0bfff17 	ldw	r2,-4(fp)
81136cac:	00c00044 	movi	r3,1
81136cb0:	10c00a15 	stw	r3,40(r2)
                                break;
81136cb4:	00000606 	br	81136cd0 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81136cb8:	e0bff117 	ldw	r2,-60(fp)
81136cbc:	10800044 	addi	r2,r2,1
81136cc0:	e0bff115 	stw	r2,-60(fp)
81136cc4:	e0bff117 	ldw	r2,-60(fp)
81136cc8:	10800410 	cmplti	r2,r2,16
81136ccc:	103fd81e 	bne	r2,zero,81136c30 <__reset+0xfb116c30>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
81136cd0:	e0ffef17 	ldw	r3,-68(fp)
81136cd4:	e0bfea17 	ldw	r2,-88(fp)
81136cd8:	1880091e 	bne	r3,r2,81136d00 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81136cdc:	e0bff017 	ldw	r2,-64(fp)
81136ce0:	10800044 	addi	r2,r2,1
81136ce4:	e0bff015 	stw	r2,-64(fp)
81136ce8:	e0fff017 	ldw	r3,-64(fp)
81136cec:	e0bff717 	ldw	r2,-36(fp)
81136cf0:	18bfc216 	blt	r3,r2,81136bfc <__reset+0xfb116bfc>
81136cf4:	00000306 	br	81136d04 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
81136cf8:	0001883a 	nop
81136cfc:	00000106 	br	81136d04 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
81136d00:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
81136d04:	e0ffef17 	ldw	r3,-68(fp)
81136d08:	e0bfea17 	ldw	r2,-88(fp)
81136d0c:	18800826 	beq	r3,r2,81136d30 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81136d10:	e0bfef17 	ldw	r2,-68(fp)
81136d14:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81136d18:	e0ffed17 	ldw	r3,-76(fp)
81136d1c:	e0bfeb17 	ldw	r2,-84(fp)
81136d20:	1885883a 	add	r2,r3,r2
81136d24:	10800044 	addi	r2,r2,1
81136d28:	e0bfed15 	stw	r2,-76(fp)
81136d2c:	00007d06 	br	81136f24 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81136d30:	0005883a 	mov	r2,zero
81136d34:	00009106 	br	81136f7c <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
81136d38:	e0bfea17 	ldw	r2,-88(fp)
81136d3c:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81136d40:	e0bff417 	ldw	r2,-48(fp)
81136d44:	10ffff84 	addi	r3,r2,-2
81136d48:	00a045b4 	movhi	r2,33046
81136d4c:	10a07e04 	addi	r2,r2,-32264
81136d50:	10800383 	ldbu	r2,14(r2)
81136d54:	10803fcc 	andi	r2,r2,255
81136d58:	1885383a 	mul	r2,r3,r2
81136d5c:	1007883a 	mov	r3,r2
81136d60:	00a045b4 	movhi	r2,33046
81136d64:	10a07e04 	addi	r2,r2,-32264
81136d68:	10801417 	ldw	r2,80(r2)
81136d6c:	1885883a 	add	r2,r3,r2
81136d70:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81136d74:	e03ff215 	stw	zero,-56(fp)
81136d78:	00003606 	br	81136e54 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81136d7c:	e0fff217 	ldw	r3,-56(fp)
81136d80:	e0bff517 	ldw	r2,-44(fp)
81136d84:	1885883a 	add	r2,r3,r2
81136d88:	d0e09b17 	ldw	r3,-32148(gp)
81136d8c:	180b883a 	mov	r5,r3
81136d90:	1009883a 	mov	r4,r2
81136d94:	11352e80 	call	811352e8 <Read_Sector_Data>
81136d98:	10003526 	beq	r2,zero,81136e70 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81136d9c:	e03ff315 	stw	zero,-52(fp)
81136da0:	00002306 	br	81136e30 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
81136da4:	e0bff317 	ldw	r2,-52(fp)
81136da8:	1004917a 	slli	r2,r2,5
81136dac:	e0fff417 	ldw	r3,-48(fp)
81136db0:	e13ff217 	ldw	r4,-56(fp)
81136db4:	200f883a 	mov	r7,r4
81136db8:	180d883a 	mov	r6,r3
81136dbc:	e17fff17 	ldw	r5,-4(fp)
81136dc0:	1009883a 	mov	r4,r2
81136dc4:	11357180 	call	81135718 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81136dc8:	e0bfff17 	ldw	r2,-4(fp)
81136dcc:	10800003 	ldbu	r2,0(r2)
81136dd0:	10803fcc 	andi	r2,r2,255
81136dd4:	10803960 	cmpeqi	r2,r2,229
81136dd8:	1000121e 	bne	r2,zero,81136e24 <get_home_directory_cluster_for_file+0x3d4>
81136ddc:	e0bfff17 	ldw	r2,-4(fp)
81136de0:	10800003 	ldbu	r2,0(r2)
81136de4:	10803fcc 	andi	r2,r2,255
81136de8:	10000e26 	beq	r2,zero,81136e24 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
81136dec:	e0fffb04 	addi	r3,fp,-20
81136df0:	e0bff904 	addi	r2,fp,-28
81136df4:	180d883a 	mov	r6,r3
81136df8:	100b883a 	mov	r5,r2
81136dfc:	e13fff17 	ldw	r4,-4(fp)
81136e00:	11367ac0 	call	811367ac <match_file_record_to_name_ext>
81136e04:	e0bff615 	stw	r2,-40(fp)
                                if (match)
81136e08:	e0bff617 	ldw	r2,-40(fp)
81136e0c:	10000526 	beq	r2,zero,81136e24 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
81136e10:	e0bfff17 	ldw	r2,-4(fp)
81136e14:	1080058b 	ldhu	r2,22(r2)
81136e18:	10bfffcc 	andi	r2,r2,65535
81136e1c:	e0bfef15 	stw	r2,-68(fp)
                                    break;
81136e20:	00000606 	br	81136e3c <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81136e24:	e0bff317 	ldw	r2,-52(fp)
81136e28:	10800044 	addi	r2,r2,1
81136e2c:	e0bff315 	stw	r2,-52(fp)
81136e30:	e0bff317 	ldw	r2,-52(fp)
81136e34:	10800410 	cmplti	r2,r2,16
81136e38:	103fda1e 	bne	r2,zero,81136da4 <__reset+0xfb116da4>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
81136e3c:	e0ffef17 	ldw	r3,-68(fp)
81136e40:	e0bfea17 	ldw	r2,-88(fp)
81136e44:	18800c1e 	bne	r3,r2,81136e78 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81136e48:	e0bff217 	ldw	r2,-56(fp)
81136e4c:	10800044 	addi	r2,r2,1
81136e50:	e0bff215 	stw	r2,-56(fp)
81136e54:	00a045b4 	movhi	r2,33046
81136e58:	10a07e04 	addi	r2,r2,-32264
81136e5c:	10800383 	ldbu	r2,14(r2)
81136e60:	10803fcc 	andi	r2,r2,255
81136e64:	e0fff217 	ldw	r3,-56(fp)
81136e68:	18bfc416 	blt	r3,r2,81136d7c <__reset+0xfb116d7c>
81136e6c:	00000306 	br	81136e7c <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
81136e70:	0001883a 	nop
81136e74:	00000106 	br	81136e7c <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
81136e78:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
81136e7c:	e0ffef17 	ldw	r3,-68(fp)
81136e80:	e0bfea17 	ldw	r2,-88(fp)
81136e84:	1880141e 	bne	r3,r2,81136ed8 <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
81136e88:	e0bfef17 	ldw	r2,-68(fp)
81136e8c:	e0fffc04 	addi	r3,fp,-16
81136e90:	180b883a 	mov	r5,r3
81136e94:	1009883a 	mov	r4,r2
81136e98:	11353c80 	call	811353c8 <get_cluster_flag>
81136e9c:	10000c26 	beq	r2,zero,81136ed0 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81136ea0:	e0bffc0b 	ldhu	r2,-16(fp)
81136ea4:	10bfffcc 	andi	r2,r2,65535
81136ea8:	10fffe0c 	andi	r3,r2,65528
81136eac:	00bffe14 	movui	r2,65528
81136eb0:	1880021e 	bne	r3,r2,81136ebc <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
81136eb4:	0005883a 	mov	r2,zero
81136eb8:	00003006 	br	81136f7c <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
81136ebc:	e0bffc0b 	ldhu	r2,-16(fp)
81136ec0:	10bfffcc 	andi	r2,r2,65535
81136ec4:	10bffe0c 	andi	r2,r2,65528
81136ec8:	e0bfef15 	stw	r2,-68(fp)
81136ecc:	00000206 	br	81136ed8 <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
81136ed0:	0005883a 	mov	r2,zero
81136ed4:	00002906 	br	81136f7c <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
81136ed8:	e0bff417 	ldw	r2,-48(fp)
81136edc:	00fffdd4 	movui	r3,65527
81136ee0:	18800316 	blt	r3,r2,81136ef0 <get_home_directory_cluster_for_file+0x4a0>
81136ee4:	e0ffef17 	ldw	r3,-68(fp)
81136ee8:	e0bfea17 	ldw	r2,-88(fp)
81136eec:	18bf9426 	beq	r3,r2,81136d40 <__reset+0xfb116d40>
            if (new_cluster != home_dir_cluster)
81136ef0:	e0ffef17 	ldw	r3,-68(fp)
81136ef4:	e0bfea17 	ldw	r2,-88(fp)
81136ef8:	18800826 	beq	r3,r2,81136f1c <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81136efc:	e0bfef17 	ldw	r2,-68(fp)
81136f00:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81136f04:	e0ffed17 	ldw	r3,-76(fp)
81136f08:	e0bfeb17 	ldw	r2,-84(fp)
81136f0c:	1885883a 	add	r2,r3,r2
81136f10:	10800044 	addi	r2,r2,1
81136f14:	e0bfed15 	stw	r2,-76(fp)
81136f18:	00000206 	br	81136f24 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81136f1c:	0005883a 	mov	r2,zero
81136f20:	00001606 	br	81136f7c <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
81136f24:	e0bfed17 	ldw	r2,-76(fp)
81136f28:	e0fffd17 	ldw	r3,-12(fp)
81136f2c:	1885883a 	add	r2,r3,r2
81136f30:	1009883a 	mov	r4,r2
81136f34:	11366ec0 	call	811366ec <get_dir_divider_location>
81136f38:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
81136f3c:	e0bfeb17 	ldw	r2,-84(fp)
81136f40:	1000020e 	bge	r2,zero,81136f4c <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
81136f44:	00800044 	movi	r2,1
81136f48:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
81136f4c:	e0bfeb17 	ldw	r2,-84(fp)
81136f50:	00becf16 	blt	zero,r2,81136a90 <__reset+0xfb116a90>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
81136f54:	e0bffe17 	ldw	r2,-8(fp)
81136f58:	e0ffea17 	ldw	r3,-88(fp)
81136f5c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
81136f60:	e0bfea17 	ldw	r2,-88(fp)
81136f64:	1000041e 	bne	r2,zero,81136f78 <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
81136f68:	e0bfff17 	ldw	r2,-4(fp)
81136f6c:	10000a15 	stw	zero,40(r2)
		result = true;
81136f70:	00800044 	movi	r2,1
81136f74:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
81136f78:	e0bfe917 	ldw	r2,-92(fp)
}
81136f7c:	e037883a 	mov	sp,fp
81136f80:	dfc00117 	ldw	ra,4(sp)
81136f84:	df000017 	ldw	fp,0(sp)
81136f88:	dec00204 	addi	sp,sp,8
81136f8c:	f800283a 	ret

81136f90 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
81136f90:	deffe804 	addi	sp,sp,-96
81136f94:	de00012e 	bgeu	sp,et,81136f9c <find_file_in_directory+0xc>
81136f98:	003b68fa 	trap	3
81136f9c:	dfc01715 	stw	ra,92(sp)
81136fa0:	df001615 	stw	fp,88(sp)
81136fa4:	df001604 	addi	fp,sp,88
81136fa8:	e13ffd15 	stw	r4,-12(fp)
81136fac:	e17ffe15 	stw	r5,-8(fp)
81136fb0:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
81136fb4:	e13ffe17 	ldw	r4,-8(fp)
81136fb8:	11366ec0 	call	811366ec <get_dir_divider_location>
81136fbc:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
81136fc0:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81136fc4:	00800804 	movi	r2,32
81136fc8:	e0bff905 	stb	r2,-28(fp)
81136fcc:	00800804 	movi	r2,32
81136fd0:	e0bff945 	stb	r2,-27(fp)
81136fd4:	00800804 	movi	r2,32
81136fd8:	e0bff985 	stb	r2,-26(fp)
81136fdc:	00800804 	movi	r2,32
81136fe0:	e0bff9c5 	stb	r2,-25(fp)
81136fe4:	00800804 	movi	r2,32
81136fe8:	e0bffa05 	stb	r2,-24(fp)
81136fec:	00800804 	movi	r2,32
81136ff0:	e0bffa45 	stb	r2,-23(fp)
81136ff4:	00800804 	movi	r2,32
81136ff8:	e0bffa85 	stb	r2,-22(fp)
81136ffc:	00800804 	movi	r2,32
81137000:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
81137004:	00800804 	movi	r2,32
81137008:	e0bffb05 	stb	r2,-20(fp)
8113700c:	00800804 	movi	r2,32
81137010:	e0bffb45 	stb	r2,-19(fp)
81137014:	00800804 	movi	r2,32
81137018:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
8113701c:	00bfffc4 	movi	r2,-1
81137020:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
81137024:	e0bffd17 	ldw	r2,-12(fp)
81137028:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
8113702c:	e13ffe17 	ldw	r4,-8(fp)
81137030:	11155840 	call	81115584 <strlen>
81137034:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
81137038:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
8113703c:	00000b06 	br	8113706c <find_file_in_directory+0xdc>
    {
        last_dir_separator = last_dir_separator+location+1;
81137040:	e0ffeb17 	ldw	r3,-84(fp)
81137044:	e0bfea17 	ldw	r2,-88(fp)
81137048:	1885883a 	add	r2,r3,r2
8113704c:	10800044 	addi	r2,r2,1
81137050:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
81137054:	e0bfeb17 	ldw	r2,-84(fp)
81137058:	e0fffe17 	ldw	r3,-8(fp)
8113705c:	1885883a 	add	r2,r3,r2
81137060:	1009883a 	mov	r4,r2
81137064:	11366ec0 	call	811366ec <get_dir_divider_location>
81137068:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
8113706c:	e0bfea17 	ldw	r2,-88(fp)
81137070:	00bff316 	blt	zero,r2,81137040 <__reset+0xfb117040>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81137074:	e0bfeb17 	ldw	r2,-84(fp)
81137078:	e0bfee15 	stw	r2,-72(fp)
8113707c:	00002706 	br	8113711c <find_file_in_directory+0x18c>
    {
        if (file_name[index] == '.')
81137080:	e0bfee17 	ldw	r2,-72(fp)
81137084:	e0fffe17 	ldw	r3,-8(fp)
81137088:	1885883a 	add	r2,r3,r2
8113708c:	10800003 	ldbu	r2,0(r2)
81137090:	10803fcc 	andi	r2,r2,255
81137094:	1080201c 	xori	r2,r2,128
81137098:	10bfe004 	addi	r2,r2,-128
8113709c:	10800b98 	cmpnei	r2,r2,46
811370a0:	1000031e 	bne	r2,zero,811370b0 <find_file_in_directory+0x120>
        {
            ext_index = index;
811370a4:	e0bfee17 	ldw	r2,-72(fp)
811370a8:	e0bfec15 	stw	r2,-80(fp)
811370ac:	00001806 	br	81137110 <find_file_in_directory+0x180>
        }
        else if (ext_index < 0)
811370b0:	e0bfec17 	ldw	r2,-80(fp)
811370b4:	10000b0e 	bge	r2,zero,811370e4 <find_file_in_directory+0x154>
        {
            name[index-last_dir_separator] = file_name[index];
811370b8:	e0ffee17 	ldw	r3,-72(fp)
811370bc:	e0bfeb17 	ldw	r2,-84(fp)
811370c0:	1885c83a 	sub	r2,r3,r2
811370c4:	e0ffee17 	ldw	r3,-72(fp)
811370c8:	e13ffe17 	ldw	r4,-8(fp)
811370cc:	20c7883a 	add	r3,r4,r3
811370d0:	18c00003 	ldbu	r3,0(r3)
811370d4:	e13ff904 	addi	r4,fp,-28
811370d8:	2085883a 	add	r2,r4,r2
811370dc:	10c00005 	stb	r3,0(r2)
811370e0:	00000b06 	br	81137110 <find_file_in_directory+0x180>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
811370e4:	e0ffee17 	ldw	r3,-72(fp)
811370e8:	e0bfec17 	ldw	r2,-80(fp)
811370ec:	1885c83a 	sub	r2,r3,r2
811370f0:	10bfffc4 	addi	r2,r2,-1
811370f4:	e0ffee17 	ldw	r3,-72(fp)
811370f8:	e13ffe17 	ldw	r4,-8(fp)
811370fc:	20c7883a 	add	r3,r4,r3
81137100:	18c00003 	ldbu	r3,0(r3)
81137104:	e13ffb04 	addi	r4,fp,-20
81137108:	2085883a 	add	r2,r4,r2
8113710c:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81137110:	e0bfee17 	ldw	r2,-72(fp)
81137114:	10800044 	addi	r2,r2,1
81137118:	e0bfee15 	stw	r2,-72(fp)
8113711c:	e0ffee17 	ldw	r3,-72(fp)
81137120:	e0bff417 	ldw	r2,-48(fp)
81137124:	18bfd616 	blt	r3,r2,81137080 <__reset+0xfb117080>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
81137128:	e0bffd17 	ldw	r2,-12(fp)
8113712c:	1000461e 	bne	r2,zero,81137248 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81137130:	00a045b4 	movhi	r2,33046
81137134:	10a07e04 	addi	r2,r2,-32264
81137138:	1080050b 	ldhu	r2,20(r2)
8113713c:	10bfffcc 	andi	r2,r2,65535
81137140:	1006917a 	slli	r3,r2,5
81137144:	00a045b4 	movhi	r2,33046
81137148:	10a07e04 	addi	r2,r2,-32264
8113714c:	1080030b 	ldhu	r2,12(r2)
81137150:	10bfffcc 	andi	r2,r2,65535
81137154:	1885283a 	div	r2,r3,r2
81137158:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8113715c:	e03ff015 	stw	zero,-64(fp)
81137160:	00003506 	br	81137238 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81137164:	00a045b4 	movhi	r2,33046
81137168:	10a07e04 	addi	r2,r2,-32264
8113716c:	10c01317 	ldw	r3,76(r2)
81137170:	e0bff017 	ldw	r2,-64(fp)
81137174:	1885883a 	add	r2,r3,r2
81137178:	1007883a 	mov	r3,r2
8113717c:	d0a09b17 	ldw	r2,-32148(gp)
81137180:	100b883a 	mov	r5,r2
81137184:	1809883a 	mov	r4,r3
81137188:	11352e80 	call	811352e8 <Read_Sector_Data>
8113718c:	10009626 	beq	r2,zero,811373e8 <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81137190:	e03ff115 	stw	zero,-60(fp)
81137194:	00002006 	br	81137218 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81137198:	e0bff117 	ldw	r2,-60(fp)
8113719c:	1004917a 	slli	r2,r2,5
811371a0:	e0fff017 	ldw	r3,-64(fp)
811371a4:	180f883a 	mov	r7,r3
811371a8:	000d883a 	mov	r6,zero
811371ac:	e17fff17 	ldw	r5,-4(fp)
811371b0:	1009883a 	mov	r4,r2
811371b4:	11357180 	call	81135718 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811371b8:	e0bfff17 	ldw	r2,-4(fp)
811371bc:	10800003 	ldbu	r2,0(r2)
811371c0:	10803fcc 	andi	r2,r2,255
811371c4:	10803960 	cmpeqi	r2,r2,229
811371c8:	1000101e 	bne	r2,zero,8113720c <find_file_in_directory+0x27c>
811371cc:	e0bfff17 	ldw	r2,-4(fp)
811371d0:	10800003 	ldbu	r2,0(r2)
811371d4:	10803fcc 	andi	r2,r2,255
811371d8:	10000c26 	beq	r2,zero,8113720c <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
811371dc:	e0fffb04 	addi	r3,fp,-20
811371e0:	e0bff904 	addi	r2,fp,-28
811371e4:	180d883a 	mov	r6,r3
811371e8:	100b883a 	mov	r5,r2
811371ec:	e13fff17 	ldw	r4,-4(fp)
811371f0:	11367ac0 	call	811367ac <match_file_record_to_name_ext>
811371f4:	e0bff815 	stw	r2,-32(fp)

                        if (match)
811371f8:	e0bff817 	ldw	r2,-32(fp)
811371fc:	10000326 	beq	r2,zero,8113720c <find_file_in_directory+0x27c>
                        {
                            result = true;
81137200:	00800044 	movi	r2,1
81137204:	e0bfef15 	stw	r2,-68(fp)
                            break;
81137208:	00000606 	br	81137224 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8113720c:	e0bff117 	ldw	r2,-60(fp)
81137210:	10800044 	addi	r2,r2,1
81137214:	e0bff115 	stw	r2,-60(fp)
81137218:	e0bff117 	ldw	r2,-60(fp)
8113721c:	10800410 	cmplti	r2,r2,16
81137220:	103fdd1e 	bne	r2,zero,81137198 <__reset+0xfb117198>
            }
            else
            {
                break;
            }
            if (result)
81137224:	e0bfef17 	ldw	r2,-68(fp)
81137228:	1000711e 	bne	r2,zero,811373f0 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8113722c:	e0bff017 	ldw	r2,-64(fp)
81137230:	10800044 	addi	r2,r2,1
81137234:	e0bff015 	stw	r2,-64(fp)
81137238:	e0fff017 	ldw	r3,-64(fp)
8113723c:	e0bff717 	ldw	r2,-36(fp)
81137240:	18bfc816 	blt	r3,r2,81137164 <__reset+0xfb117164>
81137244:	00006b06 	br	811373f4 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81137248:	e0bfed17 	ldw	r2,-76(fp)
8113724c:	10ffff84 	addi	r3,r2,-2
81137250:	00a045b4 	movhi	r2,33046
81137254:	10a07e04 	addi	r2,r2,-32264
81137258:	10800383 	ldbu	r2,14(r2)
8113725c:	10803fcc 	andi	r2,r2,255
81137260:	1885383a 	mul	r2,r3,r2
81137264:	1007883a 	mov	r3,r2
81137268:	00a045b4 	movhi	r2,33046
8113726c:	10a07e04 	addi	r2,r2,-32264
81137270:	10801417 	ldw	r2,80(r2)
81137274:	1885883a 	add	r2,r3,r2
81137278:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8113727c:	e03ff215 	stw	zero,-56(fp)
81137280:	00003306 	br	81137350 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81137284:	e0fff217 	ldw	r3,-56(fp)
81137288:	e0bff517 	ldw	r2,-44(fp)
8113728c:	1885883a 	add	r2,r3,r2
81137290:	d0e09b17 	ldw	r3,-32148(gp)
81137294:	180b883a 	mov	r5,r3
81137298:	1009883a 	mov	r4,r2
8113729c:	11352e80 	call	811352e8 <Read_Sector_Data>
811372a0:	10003226 	beq	r2,zero,8113736c <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811372a4:	e03ff315 	stw	zero,-52(fp)
811372a8:	00002106 	br	81137330 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
811372ac:	e0bff317 	ldw	r2,-52(fp)
811372b0:	1004917a 	slli	r2,r2,5
811372b4:	e0ffed17 	ldw	r3,-76(fp)
811372b8:	e13ff217 	ldw	r4,-56(fp)
811372bc:	200f883a 	mov	r7,r4
811372c0:	180d883a 	mov	r6,r3
811372c4:	e17fff17 	ldw	r5,-4(fp)
811372c8:	1009883a 	mov	r4,r2
811372cc:	11357180 	call	81135718 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811372d0:	e0bfff17 	ldw	r2,-4(fp)
811372d4:	10800003 	ldbu	r2,0(r2)
811372d8:	10803fcc 	andi	r2,r2,255
811372dc:	10803960 	cmpeqi	r2,r2,229
811372e0:	1000101e 	bne	r2,zero,81137324 <find_file_in_directory+0x394>
811372e4:	e0bfff17 	ldw	r2,-4(fp)
811372e8:	10800003 	ldbu	r2,0(r2)
811372ec:	10803fcc 	andi	r2,r2,255
811372f0:	10000c26 	beq	r2,zero,81137324 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
811372f4:	e0fffb04 	addi	r3,fp,-20
811372f8:	e0bff904 	addi	r2,fp,-28
811372fc:	180d883a 	mov	r6,r3
81137300:	100b883a 	mov	r5,r2
81137304:	e13fff17 	ldw	r4,-4(fp)
81137308:	11367ac0 	call	811367ac <match_file_record_to_name_ext>
8113730c:	e0bff615 	stw	r2,-40(fp)

                            if (match)
81137310:	e0bff617 	ldw	r2,-40(fp)
81137314:	10000326 	beq	r2,zero,81137324 <find_file_in_directory+0x394>
                            {                               
                                result = true;
81137318:	00800044 	movi	r2,1
8113731c:	e0bfef15 	stw	r2,-68(fp)
                                break;
81137320:	00000606 	br	8113733c <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81137324:	e0bff317 	ldw	r2,-52(fp)
81137328:	10800044 	addi	r2,r2,1
8113732c:	e0bff315 	stw	r2,-52(fp)
81137330:	e0bff317 	ldw	r2,-52(fp)
81137334:	10800410 	cmplti	r2,r2,16
81137338:	103fdc1e 	bne	r2,zero,811372ac <__reset+0xfb1172ac>
                }
                else
                {
                    break;
                }
                if (result)
8113733c:	e0bfef17 	ldw	r2,-68(fp)
81137340:	10000c1e 	bne	r2,zero,81137374 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81137344:	e0bff217 	ldw	r2,-56(fp)
81137348:	10800044 	addi	r2,r2,1
8113734c:	e0bff215 	stw	r2,-56(fp)
81137350:	00a045b4 	movhi	r2,33046
81137354:	10a07e04 	addi	r2,r2,-32264
81137358:	10800383 	ldbu	r2,14(r2)
8113735c:	10803fcc 	andi	r2,r2,255
81137360:	e0fff217 	ldw	r3,-56(fp)
81137364:	18bfc716 	blt	r3,r2,81137284 <__reset+0xfb117284>
81137368:	00000306 	br	81137378 <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
8113736c:	0001883a 	nop
81137370:	00000106 	br	81137378 <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
81137374:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
81137378:	e0bfef17 	ldw	r2,-68(fp)
8113737c:	1000141e 	bne	r2,zero,811373d0 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
81137380:	e0bfed17 	ldw	r2,-76(fp)
81137384:	e0fffc04 	addi	r3,fp,-16
81137388:	180b883a 	mov	r5,r3
8113738c:	1009883a 	mov	r4,r2
81137390:	11353c80 	call	811353c8 <get_cluster_flag>
81137394:	10000c26 	beq	r2,zero,811373c8 <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81137398:	e0bffc0b 	ldhu	r2,-16(fp)
8113739c:	10bfffcc 	andi	r2,r2,65535
811373a0:	10fffe0c 	andi	r3,r2,65528
811373a4:	00bffe14 	movui	r2,65528
811373a8:	1880021e 	bne	r3,r2,811373b4 <find_file_in_directory+0x424>
					{
						return false;
811373ac:	0005883a 	mov	r2,zero
811373b0:	00001106 	br	811373f8 <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
811373b4:	e0bffc0b 	ldhu	r2,-16(fp)
811373b8:	10bfffcc 	andi	r2,r2,65535
811373bc:	10bffe0c 	andi	r2,r2,65528
811373c0:	e0bfed15 	stw	r2,-76(fp)
811373c4:	00000206 	br	811373d0 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
811373c8:	0005883a 	mov	r2,zero
811373cc:	00000a06 	br	811373f8 <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
811373d0:	e0bfed17 	ldw	r2,-76(fp)
811373d4:	00fffdd4 	movui	r3,65527
811373d8:	18800616 	blt	r3,r2,811373f4 <find_file_in_directory+0x464>
811373dc:	e0bfef17 	ldw	r2,-68(fp)
811373e0:	103f9926 	beq	r2,zero,81137248 <__reset+0xfb117248>
811373e4:	00000306 	br	811373f4 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
811373e8:	0001883a 	nop
811373ec:	00000106 	br	811373f4 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
811373f0:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
811373f4:	e0bfef17 	ldw	r2,-68(fp)
}
811373f8:	e037883a 	mov	sp,fp
811373fc:	dfc00117 	ldw	ra,4(sp)
81137400:	df000017 	ldw	fp,0(sp)
81137404:	dec00204 	addi	sp,sp,8
81137408:	f800283a 	ret

8113740c <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
8113740c:	defff504 	addi	sp,sp,-44
81137410:	de00012e 	bgeu	sp,et,81137418 <find_first_empty_cluster+0xc>
81137414:	003b68fa 	trap	3
81137418:	dfc00a15 	stw	ra,40(sp)
8113741c:	df000915 	stw	fp,36(sp)
81137420:	df000904 	addi	fp,sp,36
81137424:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
81137428:	00a045b4 	movhi	r2,33046
8113742c:	10a07e04 	addi	r2,r2,-32264
81137430:	10801117 	ldw	r2,68(r2)
81137434:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
81137438:	00800084 	movi	r2,2
8113743c:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
81137440:	00bfffc4 	movi	r2,-1
81137444:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
81137448:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
8113744c:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
81137450:	00a045b4 	movhi	r2,33046
81137454:	10a07e04 	addi	r2,r2,-32264
81137458:	10801417 	ldw	r2,80(r2)
8113745c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
81137460:	00a045b4 	movhi	r2,33046
81137464:	10a07e04 	addi	r2,r2,-32264
81137468:	1080058b 	ldhu	r2,22(r2)
8113746c:	10bfffcc 	andi	r2,r2,65535
81137470:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
81137474:	00a045b4 	movhi	r2,33046
81137478:	10a07e04 	addi	r2,r2,-32264
8113747c:	10800917 	ldw	r2,36(r2)
81137480:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
81137484:	e0bffd17 	ldw	r2,-12(fp)
81137488:	e0fffe17 	ldw	r3,-8(fp)
8113748c:	18800b2e 	bgeu	r3,r2,811374bc <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81137490:	e0fffd17 	ldw	r3,-12(fp)
81137494:	e0bffc17 	ldw	r2,-16(fp)
81137498:	1887c83a 	sub	r3,r3,r2
8113749c:	00a045b4 	movhi	r2,33046
811374a0:	10a07e04 	addi	r2,r2,-32264
811374a4:	10800383 	ldbu	r2,14(r2)
811374a8:	10803fcc 	andi	r2,r2,255
811374ac:	1885203a 	divu	r2,r3,r2
811374b0:	10800044 	addi	r2,r2,1
811374b4:	e0bffb15 	stw	r2,-20(fp)
811374b8:	00002a06 	br	81137564 <find_first_empty_cluster+0x158>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
811374bc:	e0fffe17 	ldw	r3,-8(fp)
811374c0:	e0bffc17 	ldw	r2,-16(fp)
811374c4:	1887c83a 	sub	r3,r3,r2
811374c8:	00a045b4 	movhi	r2,33046
811374cc:	10a07e04 	addi	r2,r2,-32264
811374d0:	10800383 	ldbu	r2,14(r2)
811374d4:	10803fcc 	andi	r2,r2,255
811374d8:	1885203a 	divu	r2,r3,r2
811374dc:	10800044 	addi	r2,r2,1
811374e0:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
811374e4:	00001f06 	br	81137564 <find_first_empty_cluster+0x158>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
811374e8:	e0bff717 	ldw	r2,-36(fp)
811374ec:	d0e09b17 	ldw	r3,-32148(gp)
811374f0:	180b883a 	mov	r5,r3
811374f4:	1009883a 	mov	r4,r2
811374f8:	11352e80 	call	811352e8 <Read_Sector_Data>
811374fc:	10001426 	beq	r2,zero,81137550 <find_first_empty_cluster+0x144>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
81137500:	e0bff817 	ldw	r2,-32(fp)
81137504:	10803fcc 	andi	r2,r2,255
81137508:	1085883a 	add	r2,r2,r2
8113750c:	1007883a 	mov	r3,r2
81137510:	d0a09d17 	ldw	r2,-32140(gp)
81137514:	10800a17 	ldw	r2,40(r2)
81137518:	1885883a 	add	r2,r3,r2
8113751c:	1080002b 	ldhuio	r2,0(r2)
81137520:	10bfffcc 	andi	r2,r2,65535
81137524:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
81137528:	e0bff90f 	ldh	r2,-28(fp)
8113752c:	10000726 	beq	r2,zero,8113754c <find_first_empty_cluster+0x140>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
81137530:	e0bff817 	ldw	r2,-32(fp)
81137534:	10800044 	addi	r2,r2,1
81137538:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
8113753c:	e0bff817 	ldw	r2,-32(fp)
81137540:	10803fcc 	andi	r2,r2,255
81137544:	103fee1e 	bne	r2,zero,81137500 <__reset+0xfb117500>
81137548:	00000106 	br	81137550 <find_first_empty_cluster+0x144>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
8113754c:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
81137550:	e0bff90f 	ldh	r2,-28(fp)
81137554:	10000926 	beq	r2,zero,8113757c <find_first_empty_cluster+0x170>
        {
            break;
        }
        sector++;
81137558:	e0bff717 	ldw	r2,-36(fp)
8113755c:	10800044 	addi	r2,r2,1
81137560:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
81137564:	00a045b4 	movhi	r2,33046
81137568:	10a07e04 	addi	r2,r2,-32264
8113756c:	10c01217 	ldw	r3,72(r2)
81137570:	e0bff717 	ldw	r2,-36(fp)
81137574:	18bfdc1e 	bne	r3,r2,811374e8 <__reset+0xfb1174e8>
81137578:	00000106 	br	81137580 <find_first_empty_cluster+0x174>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
8113757c:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
81137580:	e0bff90f 	ldh	r2,-28(fp)
81137584:	1000081e 	bne	r2,zero,811375a8 <find_first_empty_cluster+0x19c>
81137588:	e0bff90f 	ldh	r2,-28(fp)
8113758c:	e0fffb17 	ldw	r3,-20(fp)
81137590:	18800536 	bltu	r3,r2,811375a8 <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
81137594:	e0bfff17 	ldw	r2,-4(fp)
81137598:	e0fff817 	ldw	r3,-32(fp)
8113759c:	10c00015 	stw	r3,0(r2)
		result = true;
811375a0:	00800044 	movi	r2,1
811375a4:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
811375a8:	e0bffa17 	ldw	r2,-24(fp)
}
811375ac:	e037883a 	mov	sp,fp
811375b0:	dfc00117 	ldw	ra,4(sp)
811375b4:	df000017 	ldw	fp,0(sp)
811375b8:	dec00204 	addi	sp,sp,8
811375bc:	f800283a 	ret

811375c0 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
811375c0:	defff604 	addi	sp,sp,-40
811375c4:	de00012e 	bgeu	sp,et,811375cc <find_first_empty_record_in_a_subdirectory+0xc>
811375c8:	003b68fa 	trap	3
811375cc:	dfc00915 	stw	ra,36(sp)
811375d0:	df000815 	stw	fp,32(sp)
811375d4:	df000804 	addi	fp,sp,32
811375d8:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
811375dc:	00bfffc4 	movi	r2,-1
811375e0:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
811375e4:	e0bfff17 	ldw	r2,-4(fp)
811375e8:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811375ec:	e0bff917 	ldw	r2,-28(fp)
811375f0:	10ffff84 	addi	r3,r2,-2
811375f4:	00a045b4 	movhi	r2,33046
811375f8:	10a07e04 	addi	r2,r2,-32264
811375fc:	10800383 	ldbu	r2,14(r2)
81137600:	10803fcc 	andi	r2,r2,255
81137604:	1885383a 	mul	r2,r3,r2
81137608:	1007883a 	mov	r3,r2
8113760c:	00a045b4 	movhi	r2,33046
81137610:	10a07e04 	addi	r2,r2,-32264
81137614:	10801417 	ldw	r2,80(r2)
81137618:	1885883a 	add	r2,r3,r2
8113761c:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81137620:	e03ffa15 	stw	zero,-24(fp)
81137624:	00002c06 	br	811376d8 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81137628:	e0fffa17 	ldw	r3,-24(fp)
8113762c:	e0bffc17 	ldw	r2,-16(fp)
81137630:	1885883a 	add	r2,r3,r2
81137634:	d0e09b17 	ldw	r3,-32148(gp)
81137638:	180b883a 	mov	r5,r3
8113763c:	1009883a 	mov	r4,r2
81137640:	11352e80 	call	811352e8 <Read_Sector_Data>
81137644:	10002b26 	beq	r2,zero,811376f4 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81137648:	e03ffb15 	stw	zero,-20(fp)
8113764c:	00001c06 	br	811376c0 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81137650:	e0bffb17 	ldw	r2,-20(fp)
81137654:	1004917a 	slli	r2,r2,5
81137658:	1007883a 	mov	r3,r2
8113765c:	d0a09d17 	ldw	r2,-32140(gp)
81137660:	10800a17 	ldw	r2,40(r2)
81137664:	1885883a 	add	r2,r3,r2
81137668:	10800023 	ldbuio	r2,0(r2)
8113766c:	10803fcc 	andi	r2,r2,255
81137670:	10803fcc 	andi	r2,r2,255
81137674:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
81137678:	e0bffd0b 	ldhu	r2,-12(fp)
8113767c:	10803960 	cmpeqi	r2,r2,229
81137680:	1000021e 	bne	r2,zero,8113768c <find_first_empty_record_in_a_subdirectory+0xcc>
81137684:	e0bffd0b 	ldhu	r2,-12(fp)
81137688:	10000a1e 	bne	r2,zero,811376b4 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
8113768c:	e0bffa17 	ldw	r2,-24(fp)
81137690:	1006913a 	slli	r3,r2,4
81137694:	e0bffb17 	ldw	r2,-20(fp)
81137698:	1885883a 	add	r2,r3,r2
8113769c:	1006943a 	slli	r3,r2,16
811376a0:	e0bff917 	ldw	r2,-28(fp)
811376a4:	1884b03a 	or	r2,r3,r2
811376a8:	e0bff815 	stw	r2,-32(fp)
                        return result;
811376ac:	e0bff817 	ldw	r2,-32(fp)
811376b0:	00005306 	br	81137800 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
811376b4:	e0bffb17 	ldw	r2,-20(fp)
811376b8:	10800044 	addi	r2,r2,1
811376bc:	e0bffb15 	stw	r2,-20(fp)
811376c0:	e0bffb17 	ldw	r2,-20(fp)
811376c4:	10800410 	cmplti	r2,r2,16
811376c8:	103fe11e 	bne	r2,zero,81137650 <__reset+0xfb117650>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811376cc:	e0bffa17 	ldw	r2,-24(fp)
811376d0:	10800044 	addi	r2,r2,1
811376d4:	e0bffa15 	stw	r2,-24(fp)
811376d8:	00a045b4 	movhi	r2,33046
811376dc:	10a07e04 	addi	r2,r2,-32264
811376e0:	10800383 	ldbu	r2,14(r2)
811376e4:	10803fcc 	andi	r2,r2,255
811376e8:	e0fffa17 	ldw	r3,-24(fp)
811376ec:	18bfce16 	blt	r3,r2,81137628 <__reset+0xfb117628>
811376f0:	00000106 	br	811376f8 <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
811376f4:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
811376f8:	e0bff817 	ldw	r2,-32(fp)
811376fc:	1000390e 	bge	r2,zero,811377e4 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
81137700:	e0bff917 	ldw	r2,-28(fp)
81137704:	e0fffd84 	addi	r3,fp,-10
81137708:	180b883a 	mov	r5,r3
8113770c:	1009883a 	mov	r4,r2
81137710:	11353c80 	call	811353c8 <get_cluster_flag>
81137714:	10003126 	beq	r2,zero,811377dc <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81137718:	e0bffd8b 	ldhu	r2,-10(fp)
8113771c:	10bfffcc 	andi	r2,r2,65535
81137720:	10fffe0c 	andi	r3,r2,65528
81137724:	00bffe14 	movui	r2,65528
81137728:	18802e1e 	bne	r3,r2,811377e4 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
8113772c:	e0bffe04 	addi	r2,fp,-8
81137730:	1009883a 	mov	r4,r2
81137734:	113740c0 	call	8113740c <find_first_empty_cluster>
81137738:	10002326 	beq	r2,zero,811377c8 <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
8113773c:	e0bff917 	ldw	r2,-28(fp)
81137740:	e0fffe17 	ldw	r3,-8(fp)
81137744:	18ffffcc 	andi	r3,r3,65535
81137748:	18e0001c 	xori	r3,r3,32768
8113774c:	18e00004 	addi	r3,r3,-32768
81137750:	01800044 	movi	r6,1
81137754:	180b883a 	mov	r5,r3
81137758:	1009883a 	mov	r4,r2
8113775c:	11354840 	call	81135484 <mark_cluster>
81137760:	10001926 	beq	r2,zero,811377c8 <find_first_empty_record_in_a_subdirectory+0x208>
81137764:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81137768:	01800044 	movi	r6,1
8113776c:	017fffc4 	movi	r5,-1
81137770:	1009883a 	mov	r4,r2
81137774:	11354840 	call	81135484 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81137778:	10001326 	beq	r2,zero,811377c8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8113777c:	e0bff917 	ldw	r2,-28(fp)
81137780:	e0fffe17 	ldw	r3,-8(fp)
81137784:	18ffffcc 	andi	r3,r3,65535
81137788:	18e0001c 	xori	r3,r3,32768
8113778c:	18e00004 	addi	r3,r3,-32768
81137790:	000d883a 	mov	r6,zero
81137794:	180b883a 	mov	r5,r3
81137798:	1009883a 	mov	r4,r2
8113779c:	11354840 	call	81135484 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
811377a0:	10000926 	beq	r2,zero,811377c8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
811377a4:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
811377a8:	000d883a 	mov	r6,zero
811377ac:	017fffc4 	movi	r5,-1
811377b0:	1009883a 	mov	r4,r2
811377b4:	11354840 	call	81135484 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
811377b8:	10000326 	beq	r2,zero,811377c8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
811377bc:	11352940 	call	81135294 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
811377c0:	e0bffe17 	ldw	r2,-8(fp)
811377c4:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
811377c8:	e0bffd8b 	ldhu	r2,-10(fp)
811377cc:	10bfffcc 	andi	r2,r2,65535
811377d0:	10bffe0c 	andi	r2,r2,65528
811377d4:	e0bff915 	stw	r2,-28(fp)
811377d8:	00000206 	br	811377e4 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
811377dc:	00bfffc4 	movi	r2,-1
811377e0:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
811377e4:	e0bff917 	ldw	r2,-28(fp)
811377e8:	00fffdd4 	movui	r3,65527
811377ec:	18800316 	blt	r3,r2,811377fc <find_first_empty_record_in_a_subdirectory+0x23c>
811377f0:	e0bff817 	ldw	r2,-32(fp)
811377f4:	10bfffe0 	cmpeqi	r2,r2,-1
811377f8:	103f7c1e 	bne	r2,zero,811375ec <__reset+0xfb1175ec>
    return result; 
811377fc:	e0bff817 	ldw	r2,-32(fp)
}
81137800:	e037883a 	mov	sp,fp
81137804:	dfc00117 	ldw	ra,4(sp)
81137808:	df000017 	ldw	fp,0(sp)
8113780c:	dec00204 	addi	sp,sp,8
81137810:	f800283a 	ret

81137814 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
81137814:	defff904 	addi	sp,sp,-28
81137818:	de00012e 	bgeu	sp,et,81137820 <find_first_empty_record_in_root_directory+0xc>
8113781c:	003b68fa 	trap	3
81137820:	dfc00615 	stw	ra,24(sp)
81137824:	df000515 	stw	fp,20(sp)
81137828:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8113782c:	00a045b4 	movhi	r2,33046
81137830:	10a07e04 	addi	r2,r2,-32264
81137834:	1080050b 	ldhu	r2,20(r2)
81137838:	10bfffcc 	andi	r2,r2,65535
8113783c:	1006917a 	slli	r3,r2,5
81137840:	00a045b4 	movhi	r2,33046
81137844:	10a07e04 	addi	r2,r2,-32264
81137848:	1080030b 	ldhu	r2,12(r2)
8113784c:	10bfffcc 	andi	r2,r2,65535
81137850:	1885283a 	div	r2,r3,r2
81137854:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
81137858:	00bfffc4 	movi	r2,-1
8113785c:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81137860:	e03ffb15 	stw	zero,-20(fp)
81137864:	00002d06 	br	8113791c <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81137868:	00a045b4 	movhi	r2,33046
8113786c:	10a07e04 	addi	r2,r2,-32264
81137870:	10c01317 	ldw	r3,76(r2)
81137874:	e0bffb17 	ldw	r2,-20(fp)
81137878:	1885883a 	add	r2,r3,r2
8113787c:	1007883a 	mov	r3,r2
81137880:	d0a09b17 	ldw	r2,-32148(gp)
81137884:	100b883a 	mov	r5,r2
81137888:	1809883a 	mov	r4,r3
8113788c:	11352e80 	call	811352e8 <Read_Sector_Data>
81137890:	10002626 	beq	r2,zero,8113792c <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81137894:	e03ffc15 	stw	zero,-16(fp)
81137898:	00001a06 	br	81137904 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
8113789c:	e0bffc17 	ldw	r2,-16(fp)
811378a0:	1004917a 	slli	r2,r2,5
811378a4:	1007883a 	mov	r3,r2
811378a8:	d0a09d17 	ldw	r2,-32140(gp)
811378ac:	10800a17 	ldw	r2,40(r2)
811378b0:	1885883a 	add	r2,r3,r2
811378b4:	10800023 	ldbuio	r2,0(r2)
811378b8:	10803fcc 	andi	r2,r2,255
811378bc:	10803fcc 	andi	r2,r2,255
811378c0:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
811378c4:	e0bfff0b 	ldhu	r2,-4(fp)
811378c8:	10803960 	cmpeqi	r2,r2,229
811378cc:	1000021e 	bne	r2,zero,811378d8 <find_first_empty_record_in_root_directory+0xc4>
811378d0:	e0bfff0b 	ldhu	r2,-4(fp)
811378d4:	1000081e 	bne	r2,zero,811378f8 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
811378d8:	e0bffb17 	ldw	r2,-20(fp)
811378dc:	1006913a 	slli	r3,r2,4
811378e0:	e0bffc17 	ldw	r2,-16(fp)
811378e4:	1885883a 	add	r2,r3,r2
811378e8:	1004943a 	slli	r2,r2,16
811378ec:	e0bffe15 	stw	r2,-8(fp)
                    return result;
811378f0:	e0bffe17 	ldw	r2,-8(fp)
811378f4:	00000f06 	br	81137934 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
811378f8:	e0bffc17 	ldw	r2,-16(fp)
811378fc:	10800044 	addi	r2,r2,1
81137900:	e0bffc15 	stw	r2,-16(fp)
81137904:	e0bffc17 	ldw	r2,-16(fp)
81137908:	10800410 	cmplti	r2,r2,16
8113790c:	103fe31e 	bne	r2,zero,8113789c <__reset+0xfb11789c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81137910:	e0bffb17 	ldw	r2,-20(fp)
81137914:	10800044 	addi	r2,r2,1
81137918:	e0bffb15 	stw	r2,-20(fp)
8113791c:	e0fffb17 	ldw	r3,-20(fp)
81137920:	e0bffd17 	ldw	r2,-12(fp)
81137924:	18bfd016 	blt	r3,r2,81137868 <__reset+0xfb117868>
81137928:	00000106 	br	81137930 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
8113792c:	0001883a 	nop
        }
    }
    return result;
81137930:	e0bffe17 	ldw	r2,-8(fp)
}
81137934:	e037883a 	mov	sp,fp
81137938:	dfc00117 	ldw	ra,4(sp)
8113793c:	df000017 	ldw	fp,0(sp)
81137940:	dec00204 	addi	sp,sp,8
81137944:	f800283a 	ret

81137948 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
81137948:	defffa04 	addi	sp,sp,-24
8113794c:	de00012e 	bgeu	sp,et,81137954 <convert_filename_to_name_extension+0xc>
81137950:	003b68fa 	trap	3
81137954:	df000515 	stw	fp,20(sp)
81137958:	df000504 	addi	fp,sp,20
8113795c:	e13ffd15 	stw	r4,-12(fp)
81137960:	e17ffe15 	stw	r5,-8(fp)
81137964:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
81137968:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
8113796c:	e03ffb15 	stw	zero,-20(fp)
81137970:	00002506 	br	81137a08 <convert_filename_to_name_extension+0xc0>
    {
        if (filename[local] != '.')
81137974:	e0bffc17 	ldw	r2,-16(fp)
81137978:	e0fffd17 	ldw	r3,-12(fp)
8113797c:	1885883a 	add	r2,r3,r2
81137980:	10800003 	ldbu	r2,0(r2)
81137984:	10803fcc 	andi	r2,r2,255
81137988:	1080201c 	xori	r2,r2,128
8113798c:	10bfe004 	addi	r2,r2,-128
81137990:	10800ba0 	cmpeqi	r2,r2,46
81137994:	1000141e 	bne	r2,zero,811379e8 <convert_filename_to_name_extension+0xa0>
        {
            name[counter] = filename[local];
81137998:	e0bffb17 	ldw	r2,-20(fp)
8113799c:	e0fffe17 	ldw	r3,-8(fp)
811379a0:	1885883a 	add	r2,r3,r2
811379a4:	e0fffc17 	ldw	r3,-16(fp)
811379a8:	e13ffd17 	ldw	r4,-12(fp)
811379ac:	20c7883a 	add	r3,r4,r3
811379b0:	18c00003 	ldbu	r3,0(r3)
811379b4:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
811379b8:	e0bffc17 	ldw	r2,-16(fp)
811379bc:	e0fffd17 	ldw	r3,-12(fp)
811379c0:	1885883a 	add	r2,r3,r2
811379c4:	10800003 	ldbu	r2,0(r2)
811379c8:	10803fcc 	andi	r2,r2,255
811379cc:	1080201c 	xori	r2,r2,128
811379d0:	10bfe004 	addi	r2,r2,-128
811379d4:	10000926 	beq	r2,zero,811379fc <convert_filename_to_name_extension+0xb4>
811379d8:	e0bffc17 	ldw	r2,-16(fp)
811379dc:	10800044 	addi	r2,r2,1
811379e0:	e0bffc15 	stw	r2,-16(fp)
811379e4:	00000506 	br	811379fc <convert_filename_to_name_extension+0xb4>
        }
        else
        {
            name[counter] = ' ';
811379e8:	e0bffb17 	ldw	r2,-20(fp)
811379ec:	e0fffe17 	ldw	r3,-8(fp)
811379f0:	1885883a 	add	r2,r3,r2
811379f4:	00c00804 	movi	r3,32
811379f8:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
811379fc:	e0bffb17 	ldw	r2,-20(fp)
81137a00:	10800044 	addi	r2,r2,1
81137a04:	e0bffb15 	stw	r2,-20(fp)
81137a08:	e0bffb17 	ldw	r2,-20(fp)
81137a0c:	10800210 	cmplti	r2,r2,8
81137a10:	103fd81e 	bne	r2,zero,81137974 <__reset+0xfb117974>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
81137a14:	e0bffc17 	ldw	r2,-16(fp)
81137a18:	e0fffd17 	ldw	r3,-12(fp)
81137a1c:	1885883a 	add	r2,r3,r2
81137a20:	10800003 	ldbu	r2,0(r2)
81137a24:	10803fcc 	andi	r2,r2,255
81137a28:	1080201c 	xori	r2,r2,128
81137a2c:	10bfe004 	addi	r2,r2,-128
81137a30:	10800b98 	cmpnei	r2,r2,46
81137a34:	1000031e 	bne	r2,zero,81137a44 <convert_filename_to_name_extension+0xfc>
81137a38:	e0bffc17 	ldw	r2,-16(fp)
81137a3c:	10800044 	addi	r2,r2,1
81137a40:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
81137a44:	e03ffb15 	stw	zero,-20(fp)
81137a48:	00001c06 	br	81137abc <convert_filename_to_name_extension+0x174>
    {
        if (filename[local] != 0)
81137a4c:	e0bffc17 	ldw	r2,-16(fp)
81137a50:	e0fffd17 	ldw	r3,-12(fp)
81137a54:	1885883a 	add	r2,r3,r2
81137a58:	10800003 	ldbu	r2,0(r2)
81137a5c:	10803fcc 	andi	r2,r2,255
81137a60:	1080201c 	xori	r2,r2,128
81137a64:	10bfe004 	addi	r2,r2,-128
81137a68:	10000c26 	beq	r2,zero,81137a9c <convert_filename_to_name_extension+0x154>
        {
            extension[counter] = filename[local];
81137a6c:	e0bffb17 	ldw	r2,-20(fp)
81137a70:	e0ffff17 	ldw	r3,-4(fp)
81137a74:	1885883a 	add	r2,r3,r2
81137a78:	e0fffc17 	ldw	r3,-16(fp)
81137a7c:	e13ffd17 	ldw	r4,-12(fp)
81137a80:	20c7883a 	add	r3,r4,r3
81137a84:	18c00003 	ldbu	r3,0(r3)
81137a88:	10c00005 	stb	r3,0(r2)
            local++;
81137a8c:	e0bffc17 	ldw	r2,-16(fp)
81137a90:	10800044 	addi	r2,r2,1
81137a94:	e0bffc15 	stw	r2,-16(fp)
81137a98:	00000506 	br	81137ab0 <convert_filename_to_name_extension+0x168>
        }
        else
        {
            extension[counter] = ' ';
81137a9c:	e0bffb17 	ldw	r2,-20(fp)
81137aa0:	e0ffff17 	ldw	r3,-4(fp)
81137aa4:	1885883a 	add	r2,r3,r2
81137aa8:	00c00804 	movi	r3,32
81137aac:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
81137ab0:	e0bffb17 	ldw	r2,-20(fp)
81137ab4:	10800044 	addi	r2,r2,1
81137ab8:	e0bffb15 	stw	r2,-20(fp)
81137abc:	e0bffb17 	ldw	r2,-20(fp)
81137ac0:	108000d0 	cmplti	r2,r2,3
81137ac4:	103fe11e 	bne	r2,zero,81137a4c <__reset+0xfb117a4c>
        {
            extension[counter] = ' ';
        }
    }

}
81137ac8:	0001883a 	nop
81137acc:	e037883a 	mov	sp,fp
81137ad0:	df000017 	ldw	fp,0(sp)
81137ad4:	dec00104 	addi	sp,sp,4
81137ad8:	f800283a 	ret

81137adc <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
81137adc:	defff504 	addi	sp,sp,-44
81137ae0:	de00012e 	bgeu	sp,et,81137ae8 <create_file+0xc>
81137ae4:	003b68fa 	trap	3
81137ae8:	dfc00a15 	stw	ra,40(sp)
81137aec:	df000915 	stw	fp,36(sp)
81137af0:	df000904 	addi	fp,sp,36
81137af4:	e13ffd15 	stw	r4,-12(fp)
81137af8:	e17ffe15 	stw	r5,-8(fp)
81137afc:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
81137b00:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
81137b04:	e0bffc04 	addi	r2,fp,-16
81137b08:	1009883a 	mov	r4,r2
81137b0c:	113740c0 	call	8113740c <find_first_empty_cluster>
81137b10:	1000a026 	beq	r2,zero,81137d94 <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
81137b14:	e0bfff17 	ldw	r2,-4(fp)
81137b18:	10800a17 	ldw	r2,40(r2)
81137b1c:	1000031e 	bne	r2,zero,81137b2c <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
81137b20:	11378140 	call	81137814 <find_first_empty_record_in_root_directory>
81137b24:	e0bff815 	stw	r2,-32(fp)
81137b28:	00000606 	br	81137b44 <create_file+0x68>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
81137b2c:	e0bfff17 	ldw	r2,-4(fp)
81137b30:	1080058b 	ldhu	r2,22(r2)
81137b34:	10bfffcc 	andi	r2,r2,65535
81137b38:	1009883a 	mov	r4,r2
81137b3c:	11375c00 	call	811375c0 <find_first_empty_record_in_a_subdirectory>
81137b40:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
81137b44:	e0bff817 	ldw	r2,-32(fp)
81137b48:	10009216 	blt	r2,zero,81137d94 <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
81137b4c:	e13ffd17 	ldw	r4,-12(fp)
81137b50:	11366ec0 	call	811366ec <get_dir_divider_location>
81137b54:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
81137b58:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
81137b5c:	00000b06 	br	81137b8c <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
81137b60:	e0fffa17 	ldw	r3,-24(fp)
81137b64:	e0bff917 	ldw	r2,-28(fp)
81137b68:	1885883a 	add	r2,r3,r2
81137b6c:	10800044 	addi	r2,r2,1
81137b70:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
81137b74:	e0bffa17 	ldw	r2,-24(fp)
81137b78:	e0fffd17 	ldw	r3,-12(fp)
81137b7c:	1885883a 	add	r2,r3,r2
81137b80:	1009883a 	mov	r4,r2
81137b84:	11366ec0 	call	811366ec <get_dir_divider_location>
81137b88:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
81137b8c:	e0bff917 	ldw	r2,-28(fp)
81137b90:	00bff316 	blt	zero,r2,81137b60 <__reset+0xfb117b60>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
81137b94:	e0bffa17 	ldw	r2,-24(fp)
81137b98:	e0fffd17 	ldw	r3,-12(fp)
81137b9c:	1887883a 	add	r3,r3,r2
81137ba0:	e13ffe17 	ldw	r4,-8(fp)
81137ba4:	e0bffe17 	ldw	r2,-8(fp)
81137ba8:	10800204 	addi	r2,r2,8
81137bac:	100d883a 	mov	r6,r2
81137bb0:	200b883a 	mov	r5,r4
81137bb4:	1809883a 	mov	r4,r3
81137bb8:	11379480 	call	81137948 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
81137bbc:	e0bffe17 	ldw	r2,-8(fp)
81137bc0:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
81137bc4:	e0bffe17 	ldw	r2,-8(fp)
81137bc8:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
81137bcc:	e0bffe17 	ldw	r2,-8(fp)
81137bd0:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
81137bd4:	e0bffe17 	ldw	r2,-8(fp)
81137bd8:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
81137bdc:	e0bffe17 	ldw	r2,-8(fp)
81137be0:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
81137be4:	e0bffe17 	ldw	r2,-8(fp)
81137be8:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
81137bec:	e0bffc17 	ldw	r2,-16(fp)
81137bf0:	1007883a 	mov	r3,r2
81137bf4:	e0bffe17 	ldw	r2,-8(fp)
81137bf8:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
81137bfc:	e0bffe17 	ldw	r2,-8(fp)
81137c00:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
81137c04:	e0fffc17 	ldw	r3,-16(fp)
81137c08:	e0bffe17 	ldw	r2,-8(fp)
81137c0c:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
81137c10:	e0bffe17 	ldw	r2,-8(fp)
81137c14:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
81137c18:	e0bffe17 	ldw	r2,-8(fp)
81137c1c:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
81137c20:	e0bff817 	ldw	r2,-32(fp)
81137c24:	10ffffcc 	andi	r3,r2,65535
81137c28:	e0bffe17 	ldw	r2,-8(fp)
81137c2c:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
81137c30:	e0bff817 	ldw	r2,-32(fp)
81137c34:	1004d43a 	srli	r2,r2,16
81137c38:	1000010e 	bge	r2,zero,81137c40 <create_file+0x164>
81137c3c:	108003c4 	addi	r2,r2,15
81137c40:	1005d13a 	srai	r2,r2,4
81137c44:	1007883a 	mov	r3,r2
81137c48:	e0bffe17 	ldw	r2,-8(fp)
81137c4c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
81137c50:	e0bff817 	ldw	r2,-32(fp)
81137c54:	1004d43a 	srli	r2,r2,16
81137c58:	1007883a 	mov	r3,r2
81137c5c:	00a00034 	movhi	r2,32768
81137c60:	108003c4 	addi	r2,r2,15
81137c64:	1884703a 	and	r2,r3,r2
81137c68:	1000040e 	bge	r2,zero,81137c7c <create_file+0x1a0>
81137c6c:	10bfffc4 	addi	r2,r2,-1
81137c70:	00fffc04 	movi	r3,-16
81137c74:	10c4b03a 	or	r2,r2,r3
81137c78:	10800044 	addi	r2,r2,1
81137c7c:	1004917a 	slli	r2,r2,5
81137c80:	1007883a 	mov	r3,r2
81137c84:	e0bffe17 	ldw	r2,-8(fp)
81137c88:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
81137c8c:	e0bfff17 	ldw	r2,-4(fp)
81137c90:	1080058b 	ldhu	r2,22(r2)
81137c94:	10ffffcc 	andi	r3,r2,65535
81137c98:	e0bffe17 	ldw	r2,-8(fp)
81137c9c:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
81137ca0:	e0bffe17 	ldw	r2,-8(fp)
81137ca4:	00c00044 	movi	r3,1
81137ca8:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
81137cac:	e0bffe17 	ldw	r2,-8(fp)
81137cb0:	00c00044 	movi	r3,1
81137cb4:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81137cb8:	e0bffe17 	ldw	r2,-8(fp)
81137cbc:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81137cc0:	1000071e 	bne	r2,zero,81137ce0 <create_file+0x204>
81137cc4:	00a045b4 	movhi	r2,33046
81137cc8:	10a07e04 	addi	r2,r2,-32264
81137ccc:	10c01317 	ldw	r3,76(r2)
81137cd0:	e0bffe17 	ldw	r2,-8(fp)
81137cd4:	10800b17 	ldw	r2,44(r2)
81137cd8:	1885883a 	add	r2,r3,r2
81137cdc:	00000f06 	br	81137d1c <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
81137ce0:	00a045b4 	movhi	r2,33046
81137ce4:	10a07e04 	addi	r2,r2,-32264
81137ce8:	10c01417 	ldw	r3,80(r2)
81137cec:	e0bffe17 	ldw	r2,-8(fp)
81137cf0:	10800a17 	ldw	r2,40(r2)
81137cf4:	113fff84 	addi	r4,r2,-2
81137cf8:	00a045b4 	movhi	r2,33046
81137cfc:	10a07e04 	addi	r2,r2,-32264
81137d00:	10800383 	ldbu	r2,14(r2)
81137d04:	10803fcc 	andi	r2,r2,255
81137d08:	2085383a 	mul	r2,r4,r2
81137d0c:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
81137d10:	e0bffe17 	ldw	r2,-8(fp)
81137d14:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81137d18:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81137d1c:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
81137d20:	e0bffb17 	ldw	r2,-20(fp)
81137d24:	d0e09b17 	ldw	r3,-32148(gp)
81137d28:	180b883a 	mov	r5,r3
81137d2c:	1009883a 	mov	r4,r2
81137d30:	11352e80 	call	811352e8 <Read_Sector_Data>
81137d34:	10001726 	beq	r2,zero,81137d94 <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
81137d38:	e0bffe17 	ldw	r2,-8(fp)
81137d3c:	10800c0b 	ldhu	r2,48(r2)
81137d40:	10bfffcc 	andi	r2,r2,65535
81137d44:	10a0001c 	xori	r2,r2,32768
81137d48:	10a00004 	addi	r2,r2,-32768
81137d4c:	e17ffe17 	ldw	r5,-8(fp)
81137d50:	1009883a 	mov	r4,r2
81137d54:	113599c0 	call	8113599c <Write_File_Record_At_Offset>
81137d58:	10000e26 	beq	r2,zero,81137d94 <create_file+0x2b8>
                {
                    Save_Modified_Sector();
81137d5c:	11352940 	call	81135294 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
81137d60:	e0bffc17 	ldw	r2,-16(fp)
81137d64:	01800044 	movi	r6,1
81137d68:	017fffc4 	movi	r5,-1
81137d6c:	1009883a 	mov	r4,r2
81137d70:	11354840 	call	81135484 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
81137d74:	e0bffc17 	ldw	r2,-16(fp)
81137d78:	000d883a 	mov	r6,zero
81137d7c:	017fffc4 	movi	r5,-1
81137d80:	1009883a 	mov	r4,r2
81137d84:	11354840 	call	81135484 <mark_cluster>
81137d88:	10000226 	beq	r2,zero,81137d94 <create_file+0x2b8>
                    {
                        result = true;
81137d8c:	00800044 	movi	r2,1
81137d90:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
81137d94:	e0bff717 	ldw	r2,-36(fp)
}
81137d98:	e037883a 	mov	sp,fp
81137d9c:	dfc00117 	ldw	ra,4(sp)
81137da0:	df000017 	ldw	fp,0(sp)
81137da4:	dec00204 	addi	sp,sp,8
81137da8:	f800283a 	ret

81137dac <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
81137dac:	defffb04 	addi	sp,sp,-20
81137db0:	de00012e 	bgeu	sp,et,81137db8 <copy_file_record_name_to_string+0xc>
81137db4:	003b68fa 	trap	3
81137db8:	df000415 	stw	fp,16(sp)
81137dbc:	df000404 	addi	fp,sp,16
81137dc0:	e13ffe15 	stw	r4,-8(fp)
81137dc4:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
81137dc8:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81137dcc:	e03ffc15 	stw	zero,-16(fp)
81137dd0:	00001506 	br	81137e28 <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
81137dd4:	e0fffe17 	ldw	r3,-8(fp)
81137dd8:	e0bffc17 	ldw	r2,-16(fp)
81137ddc:	1885883a 	add	r2,r3,r2
81137de0:	10800003 	ldbu	r2,0(r2)
81137de4:	10803fcc 	andi	r2,r2,255
81137de8:	10800820 	cmpeqi	r2,r2,32
81137dec:	10000b1e 	bne	r2,zero,81137e1c <copy_file_record_name_to_string+0x70>
		{
			file_name[flength] = file_record->name[index];
81137df0:	e0bffd17 	ldw	r2,-12(fp)
81137df4:	e0ffff17 	ldw	r3,-4(fp)
81137df8:	1885883a 	add	r2,r3,r2
81137dfc:	e13ffe17 	ldw	r4,-8(fp)
81137e00:	e0fffc17 	ldw	r3,-16(fp)
81137e04:	20c7883a 	add	r3,r4,r3
81137e08:	18c00003 	ldbu	r3,0(r3)
81137e0c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
81137e10:	e0bffd17 	ldw	r2,-12(fp)
81137e14:	10800044 	addi	r2,r2,1
81137e18:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81137e1c:	e0bffc17 	ldw	r2,-16(fp)
81137e20:	10800044 	addi	r2,r2,1
81137e24:	e0bffc15 	stw	r2,-16(fp)
81137e28:	e0bffc17 	ldw	r2,-16(fp)
81137e2c:	10800210 	cmplti	r2,r2,8
81137e30:	103fe81e 	bne	r2,zero,81137dd4 <__reset+0xfb117dd4>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
81137e34:	e0bffe17 	ldw	r2,-8(fp)
81137e38:	10800203 	ldbu	r2,8(r2)
81137e3c:	10803fcc 	andi	r2,r2,255
81137e40:	10800820 	cmpeqi	r2,r2,32
81137e44:	1000241e 	bne	r2,zero,81137ed8 <copy_file_record_name_to_string+0x12c>
	{
		file_name[flength] = '.';
81137e48:	e0bffd17 	ldw	r2,-12(fp)
81137e4c:	e0ffff17 	ldw	r3,-4(fp)
81137e50:	1885883a 	add	r2,r3,r2
81137e54:	00c00b84 	movi	r3,46
81137e58:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
81137e5c:	e0bffd17 	ldw	r2,-12(fp)
81137e60:	10800044 	addi	r2,r2,1
81137e64:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
81137e68:	e03ffc15 	stw	zero,-16(fp)
81137e6c:	00001706 	br	81137ecc <copy_file_record_name_to_string+0x120>
		{
			if (file_record->extension[index] != ' ')
81137e70:	e0fffe17 	ldw	r3,-8(fp)
81137e74:	e0bffc17 	ldw	r2,-16(fp)
81137e78:	1885883a 	add	r2,r3,r2
81137e7c:	10800204 	addi	r2,r2,8
81137e80:	10800003 	ldbu	r2,0(r2)
81137e84:	10803fcc 	andi	r2,r2,255
81137e88:	10800820 	cmpeqi	r2,r2,32
81137e8c:	10000c1e 	bne	r2,zero,81137ec0 <copy_file_record_name_to_string+0x114>
			{
				file_name[flength] = file_record->extension[index];
81137e90:	e0bffd17 	ldw	r2,-12(fp)
81137e94:	e0ffff17 	ldw	r3,-4(fp)
81137e98:	1885883a 	add	r2,r3,r2
81137e9c:	e13ffe17 	ldw	r4,-8(fp)
81137ea0:	e0fffc17 	ldw	r3,-16(fp)
81137ea4:	20c7883a 	add	r3,r4,r3
81137ea8:	18c00204 	addi	r3,r3,8
81137eac:	18c00003 	ldbu	r3,0(r3)
81137eb0:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
81137eb4:	e0bffd17 	ldw	r2,-12(fp)
81137eb8:	10800044 	addi	r2,r2,1
81137ebc:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
81137ec0:	e0bffc17 	ldw	r2,-16(fp)
81137ec4:	10800044 	addi	r2,r2,1
81137ec8:	e0bffc15 	stw	r2,-16(fp)
81137ecc:	e0bffc17 	ldw	r2,-16(fp)
81137ed0:	108000d0 	cmplti	r2,r2,3
81137ed4:	103fe61e 	bne	r2,zero,81137e70 <__reset+0xfb117e70>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
81137ed8:	e0bffd17 	ldw	r2,-12(fp)
81137edc:	e0ffff17 	ldw	r3,-4(fp)
81137ee0:	1885883a 	add	r2,r3,r2
81137ee4:	10000005 	stb	zero,0(r2)
}
81137ee8:	0001883a 	nop
81137eec:	e037883a 	mov	sp,fp
81137ef0:	df000017 	ldw	fp,0(sp)
81137ef4:	dec00104 	addi	sp,sp,4
81137ef8:	f800283a 	ret

81137efc <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
81137efc:	defffc04 	addi	sp,sp,-16
81137f00:	de00012e 	bgeu	sp,et,81137f08 <alt_up_sd_card_open_dev+0xc>
81137f04:	003b68fa 	trap	3
81137f08:	dfc00315 	stw	ra,12(sp)
81137f0c:	df000215 	stw	fp,8(sp)
81137f10:	df000204 	addi	fp,sp,8
81137f14:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
81137f18:	d1600d04 	addi	r5,gp,-32716
81137f1c:	e13fff17 	ldw	r4,-4(fp)
81137f20:	113d4880 	call	8113d488 <alt_find_dev>
81137f24:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
81137f28:	e0bffe17 	ldw	r2,-8(fp)
81137f2c:	10001e26 	beq	r2,zero,81137fa8 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
81137f30:	e0bffe17 	ldw	r2,-8(fp)
81137f34:	10800a17 	ldw	r2,40(r2)
81137f38:	10808d04 	addi	r2,r2,564
81137f3c:	d0a09515 	stw	r2,-32172(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
81137f40:	e0bffe17 	ldw	r2,-8(fp)
81137f44:	10800a17 	ldw	r2,40(r2)
81137f48:	10808904 	addi	r2,r2,548
81137f4c:	d0a09615 	stw	r2,-32168(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
81137f50:	e0bffe17 	ldw	r2,-8(fp)
81137f54:	10800a17 	ldw	r2,40(r2)
81137f58:	10808404 	addi	r2,r2,528
81137f5c:	d0a09715 	stw	r2,-32164(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
81137f60:	e0bffe17 	ldw	r2,-8(fp)
81137f64:	10800a17 	ldw	r2,40(r2)
81137f68:	10808c04 	addi	r2,r2,560
81137f6c:	d0a09815 	stw	r2,-32160(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
81137f70:	e0bffe17 	ldw	r2,-8(fp)
81137f74:	10800a17 	ldw	r2,40(r2)
81137f78:	10808b04 	addi	r2,r2,556
81137f7c:	d0a09915 	stw	r2,-32156(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
81137f80:	e0bffe17 	ldw	r2,-8(fp)
81137f84:	10800a17 	ldw	r2,40(r2)
81137f88:	d0a09a15 	stw	r2,-32152(gp)
		device_pointer = dev;
81137f8c:	e0bffe17 	ldw	r2,-8(fp)
81137f90:	d0a09d15 	stw	r2,-32140(gp)
		initialized = false;
81137f94:	d0209315 	stw	zero,-32180(gp)
		is_sd_card_formated_as_FAT16 = false;
81137f98:	d0209415 	stw	zero,-32176(gp)
		search_data.valid = false;
81137f9c:	00a045b4 	movhi	r2,33046
81137fa0:	10a07904 	addi	r2,r2,-32284
81137fa4:	10000415 	stw	zero,16(r2)
	}
	return dev;
81137fa8:	e0bffe17 	ldw	r2,-8(fp)
}
81137fac:	e037883a 	mov	sp,fp
81137fb0:	dfc00117 	ldw	ra,4(sp)
81137fb4:	df000017 	ldw	fp,0(sp)
81137fb8:	dec00204 	addi	sp,sp,8
81137fbc:	f800283a 	ret

81137fc0 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
81137fc0:	defffd04 	addi	sp,sp,-12
81137fc4:	de00012e 	bgeu	sp,et,81137fcc <alt_up_sd_card_is_Present+0xc>
81137fc8:	003b68fa 	trap	3
81137fcc:	df000215 	stw	fp,8(sp)
81137fd0:	df000204 	addi	fp,sp,8
    bool result = false;
81137fd4:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
81137fd8:	d0a09d17 	ldw	r2,-32140(gp)
81137fdc:	10000826 	beq	r2,zero,81138000 <alt_up_sd_card_is_Present+0x40>
81137fe0:	d0a09517 	ldw	r2,-32172(gp)
81137fe4:	1080002b 	ldhuio	r2,0(r2)
81137fe8:	10bfffcc 	andi	r2,r2,65535
81137fec:	1080008c 	andi	r2,r2,2
81137ff0:	10000326 	beq	r2,zero,81138000 <alt_up_sd_card_is_Present+0x40>
    {
        result = true;
81137ff4:	00800044 	movi	r2,1
81137ff8:	e0bffe15 	stw	r2,-8(fp)
81137ffc:	00001e06 	br	81138078 <alt_up_sd_card_is_Present+0xb8>
    }
	else if (initialized == true)
81138000:	d0a09317 	ldw	r2,-32180(gp)
81138004:	10800058 	cmpnei	r2,r2,1
81138008:	10001b1e 	bne	r2,zero,81138078 <alt_up_sd_card_is_Present+0xb8>
	{
		int index;

		initialized = false;
8113800c:	d0209315 	stw	zero,-32180(gp)
		search_data.valid = false;
81138010:	00a045b4 	movhi	r2,33046
81138014:	10a07904 	addi	r2,r2,-32284
81138018:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
8113801c:	d0209415 	stw	zero,-32176(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
81138020:	e03fff15 	stw	zero,-4(fp)
81138024:	00001106 	br	8113806c <alt_up_sd_card_is_Present+0xac>
		{
			active_files[index].in_use = false;
81138028:	00a045b4 	movhi	r2,33046
8113802c:	10a09304 	addi	r2,r2,-32180
81138030:	e0ffff17 	ldw	r3,-4(fp)
81138034:	180691ba 	slli	r3,r3,6
81138038:	10c5883a 	add	r2,r2,r3
8113803c:	10800f04 	addi	r2,r2,60
81138040:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
81138044:	00a045b4 	movhi	r2,33046
81138048:	10a09304 	addi	r2,r2,-32180
8113804c:	e0ffff17 	ldw	r3,-4(fp)
81138050:	180691ba 	slli	r3,r3,6
81138054:	10c5883a 	add	r2,r2,r3
81138058:	10800e04 	addi	r2,r2,56
8113805c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
81138060:	e0bfff17 	ldw	r2,-4(fp)
81138064:	10800044 	addi	r2,r2,1
81138068:	e0bfff15 	stw	r2,-4(fp)
8113806c:	e0bfff17 	ldw	r2,-4(fp)
81138070:	10800510 	cmplti	r2,r2,20
81138074:	103fec1e 	bne	r2,zero,81138028 <__reset+0xfb118028>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
81138078:	e0bffe17 	ldw	r2,-8(fp)
}
8113807c:	e037883a 	mov	sp,fp
81138080:	df000017 	ldw	fp,0(sp)
81138084:	dec00104 	addi	sp,sp,4
81138088:	f800283a 	ret

8113808c <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
8113808c:	defffd04 	addi	sp,sp,-12
81138090:	de00012e 	bgeu	sp,et,81138098 <alt_up_sd_card_is_FAT16+0xc>
81138094:	003b68fa 	trap	3
81138098:	dfc00215 	stw	ra,8(sp)
8113809c:	df000115 	stw	fp,4(sp)
811380a0:	df000104 	addi	fp,sp,4
	bool result = false;
811380a4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
811380a8:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
811380ac:	10000c26 	beq	r2,zero,811380e0 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
811380b0:	d0a09317 	ldw	r2,-32180(gp)
811380b4:	1000071e 	bne	r2,zero,811380d4 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
811380b8:	11362b80 	call	811362b8 <Look_for_FAT16>
811380bc:	d0a09415 	stw	r2,-32176(gp)
			initialized = is_sd_card_formated_as_FAT16;
811380c0:	d0a09417 	ldw	r2,-32176(gp)
811380c4:	d0a09315 	stw	r2,-32180(gp)
			search_data.valid = false;
811380c8:	00a045b4 	movhi	r2,33046
811380cc:	10a07904 	addi	r2,r2,-32284
811380d0:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
811380d4:	d0a09417 	ldw	r2,-32176(gp)
811380d8:	e0bfff15 	stw	r2,-4(fp)
811380dc:	00000206 	br	811380e8 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
811380e0:	d0209315 	stw	zero,-32180(gp)
		is_sd_card_formated_as_FAT16 = false;
811380e4:	d0209415 	stw	zero,-32176(gp)
	}

	return result;
811380e8:	e0bfff17 	ldw	r2,-4(fp)
}
811380ec:	e037883a 	mov	sp,fp
811380f0:	dfc00117 	ldw	ra,4(sp)
811380f4:	df000017 	ldw	fp,0(sp)
811380f8:	dec00204 	addi	sp,sp,8
811380fc:	f800283a 	ret

81138100 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
81138100:	deffea04 	addi	sp,sp,-88
81138104:	de00012e 	bgeu	sp,et,8113810c <alt_up_sd_card_find_first+0xc>
81138108:	003b68fa 	trap	3
8113810c:	dfc01515 	stw	ra,84(sp)
81138110:	df001415 	stw	fp,80(sp)
81138114:	df001404 	addi	fp,sp,80
81138118:	e13ffe15 	stw	r4,-8(fp)
8113811c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
81138120:	00800084 	movi	r2,2
81138124:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81138128:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
8113812c:	10002426 	beq	r2,zero,811381c0 <alt_up_sd_card_find_first+0xc0>
81138130:	d0a09417 	ldw	r2,-32176(gp)
81138134:	10002226 	beq	r2,zero,811381c0 <alt_up_sd_card_find_first+0xc0>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
81138138:	e0ffee04 	addi	r3,fp,-72
8113813c:	e0bfed04 	addi	r2,fp,-76
81138140:	180d883a 	mov	r6,r3
81138144:	100b883a 	mov	r5,r2
81138148:	e13ffe17 	ldw	r4,-8(fp)
8113814c:	1136a500 	call	81136a50 <get_home_directory_cluster_for_file>
81138150:	10001926 	beq	r2,zero,811381b8 <alt_up_sd_card_find_first+0xb8>
		{
			search_data.directory_root_cluster = home_directory_cluster;
81138154:	e0bfed17 	ldw	r2,-76(fp)
81138158:	1007883a 	mov	r3,r2
8113815c:	00a045b4 	movhi	r2,33046
81138160:	10a07904 	addi	r2,r2,-32284
81138164:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
81138168:	e0bfed17 	ldw	r2,-76(fp)
8113816c:	1007883a 	mov	r3,r2
81138170:	00a045b4 	movhi	r2,33046
81138174:	10a07904 	addi	r2,r2,-32284
81138178:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
8113817c:	00a045b4 	movhi	r2,33046
81138180:	10a07904 	addi	r2,r2,-32284
81138184:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
81138188:	00a045b4 	movhi	r2,33046
8113818c:	10a07904 	addi	r2,r2,-32284
81138190:	00ffffc4 	movi	r3,-1
81138194:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
81138198:	00a045b4 	movhi	r2,33046
8113819c:	10a07904 	addi	r2,r2,-32284
811381a0:	00c00044 	movi	r3,1
811381a4:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
811381a8:	e13fff17 	ldw	r4,-4(fp)
811381ac:	11381d80 	call	811381d8 <alt_up_sd_card_find_next>
811381b0:	e0bfec0d 	sth	r2,-80(fp)
811381b4:	00000206 	br	811381c0 <alt_up_sd_card_find_first+0xc0>
		}
		else
		{
			result = 1;
811381b8:	00800044 	movi	r2,1
811381bc:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
811381c0:	e0bfec0b 	ldhu	r2,-80(fp)
}
811381c4:	e037883a 	mov	sp,fp
811381c8:	dfc00117 	ldw	ra,4(sp)
811381cc:	df000017 	ldw	fp,0(sp)
811381d0:	dec00204 	addi	sp,sp,8
811381d4:	f800283a 	ret

811381d8 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
811381d8:	deffe404 	addi	sp,sp,-112
811381dc:	de00012e 	bgeu	sp,et,811381e4 <alt_up_sd_card_find_next+0xc>
811381e0:	003b68fa 	trap	3
811381e4:	dfc01b15 	stw	ra,108(sp)
811381e8:	df001a15 	stw	fp,104(sp)
811381ec:	df001a04 	addi	fp,sp,104
811381f0:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
811381f4:	00800084 	movi	r2,2
811381f8:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811381fc:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
81138200:	1000df26 	beq	r2,zero,81138580 <alt_up_sd_card_find_next+0x3a8>
81138204:	d0a09417 	ldw	r2,-32176(gp)
81138208:	1000dd26 	beq	r2,zero,81138580 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
8113820c:	00a045b4 	movhi	r2,33046
81138210:	10a07904 	addi	r2,r2,-32284
81138214:	10800417 	ldw	r2,16(r2)
81138218:	1000d726 	beq	r2,zero,81138578 <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
8113821c:	00a045b4 	movhi	r2,33046
81138220:	10a07904 	addi	r2,r2,-32284
81138224:	10800117 	ldw	r2,4(r2)
81138228:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
8113822c:	e0bfe717 	ldw	r2,-100(fp)
81138230:	1000561e 	bne	r2,zero,8113838c <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81138234:	00a045b4 	movhi	r2,33046
81138238:	10a07e04 	addi	r2,r2,-32264
8113823c:	1080050b 	ldhu	r2,20(r2)
81138240:	10bfffcc 	andi	r2,r2,65535
81138244:	1006917a 	slli	r3,r2,5
81138248:	00a045b4 	movhi	r2,33046
8113824c:	10a07e04 	addi	r2,r2,-32264
81138250:	1080030b 	ldhu	r2,12(r2)
81138254:	10bfffcc 	andi	r2,r2,65535
81138258:	1885283a 	div	r2,r3,r2
8113825c:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
81138260:	00a045b4 	movhi	r2,33046
81138264:	10a07904 	addi	r2,r2,-32284
81138268:	10800217 	ldw	r2,8(r2)
8113826c:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
81138270:	00a045b4 	movhi	r2,33046
81138274:	10a07904 	addi	r2,r2,-32284
81138278:	1080030b 	ldhu	r2,12(r2)
8113827c:	10bfffcc 	andi	r2,r2,65535
81138280:	10a0001c 	xori	r2,r2,32768
81138284:	10a00004 	addi	r2,r2,-32768
81138288:	10800044 	addi	r2,r2,1
8113828c:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81138290:	00003606 	br	8113836c <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81138294:	00a045b4 	movhi	r2,33046
81138298:	10a07e04 	addi	r2,r2,-32264
8113829c:	10c01317 	ldw	r3,76(r2)
811382a0:	e0bfe817 	ldw	r2,-96(fp)
811382a4:	1885883a 	add	r2,r3,r2
811382a8:	1007883a 	mov	r3,r2
811382ac:	d0a09b17 	ldw	r2,-32148(gp)
811382b0:	100b883a 	mov	r5,r2
811382b4:	1809883a 	mov	r4,r3
811382b8:	11352e80 	call	811352e8 <Read_Sector_Data>
811382bc:	10002f26 	beq	r2,zero,8113837c <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
811382c0:	00002306 	br	81138350 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
811382c4:	e0bfe917 	ldw	r2,-92(fp)
811382c8:	1004917a 	slli	r2,r2,5
811382cc:	e13fe817 	ldw	r4,-96(fp)
811382d0:	e0ffef04 	addi	r3,fp,-68
811382d4:	200f883a 	mov	r7,r4
811382d8:	000d883a 	mov	r6,zero
811382dc:	180b883a 	mov	r5,r3
811382e0:	1009883a 	mov	r4,r2
811382e4:	11357180 	call	81135718 <Read_File_Record_At_Offset>
811382e8:	10001626 	beq	r2,zero,81138344 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
811382ec:	e0bfef03 	ldbu	r2,-68(fp)
811382f0:	10803fcc 	andi	r2,r2,255
811382f4:	10001326 	beq	r2,zero,81138344 <alt_up_sd_card_find_next+0x16c>
811382f8:	e0bfef03 	ldbu	r2,-68(fp)
811382fc:	10803fcc 	andi	r2,r2,255
81138300:	10803960 	cmpeqi	r2,r2,229
81138304:	10000f1e 	bne	r2,zero,81138344 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
81138308:	e0bfe917 	ldw	r2,-92(fp)
8113830c:	1007883a 	mov	r3,r2
81138310:	00a045b4 	movhi	r2,33046
81138314:	10a07904 	addi	r2,r2,-32284
81138318:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
8113831c:	e0ffe817 	ldw	r3,-96(fp)
81138320:	00a045b4 	movhi	r2,33046
81138324:	10a07904 	addi	r2,r2,-32284
81138328:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
8113832c:	e0bfef04 	addi	r2,fp,-68
81138330:	e17fff17 	ldw	r5,-4(fp)
81138334:	1009883a 	mov	r4,r2
81138338:	1137dac0 	call	81137dac <copy_file_record_name_to_string>
									return 0;
8113833c:	0005883a 	mov	r2,zero
81138340:	00009006 	br	81138584 <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81138344:	e0bfe917 	ldw	r2,-92(fp)
81138348:	10800044 	addi	r2,r2,1
8113834c:	e0bfe915 	stw	r2,-92(fp)
81138350:	e0bfe917 	ldw	r2,-92(fp)
81138354:	10800410 	cmplti	r2,r2,16
81138358:	103fda1e 	bne	r2,zero,811382c4 <__reset+0xfb1182c4>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
8113835c:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81138360:	e0bfe817 	ldw	r2,-96(fp)
81138364:	10800044 	addi	r2,r2,1
81138368:	e0bfe815 	stw	r2,-96(fp)
8113836c:	e0ffe817 	ldw	r3,-96(fp)
81138370:	e0bfec17 	ldw	r2,-80(fp)
81138374:	18bfc716 	blt	r3,r2,81138294 <__reset+0xfb118294>
81138378:	00000106 	br	81138380 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
8113837c:	0001883a 	nop
					}
				}
				result = -1;
81138380:	00bfffc4 	movi	r2,-1
81138384:	e0bfe60d 	sth	r2,-104(fp)
81138388:	00007d06 	br	81138580 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
8113838c:	00a045b4 	movhi	r2,33046
81138390:	10a07904 	addi	r2,r2,-32284
81138394:	1080030b 	ldhu	r2,12(r2)
81138398:	10bfffcc 	andi	r2,r2,65535
8113839c:	10a0001c 	xori	r2,r2,32768
811383a0:	10a00004 	addi	r2,r2,-32768
811383a4:	10800044 	addi	r2,r2,1
811383a8:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811383ac:	e0bfe717 	ldw	r2,-100(fp)
811383b0:	10ffff84 	addi	r3,r2,-2
811383b4:	00a045b4 	movhi	r2,33046
811383b8:	10a07e04 	addi	r2,r2,-32264
811383bc:	10800383 	ldbu	r2,14(r2)
811383c0:	10803fcc 	andi	r2,r2,255
811383c4:	1885383a 	mul	r2,r3,r2
811383c8:	1007883a 	mov	r3,r2
811383cc:	00a045b4 	movhi	r2,33046
811383d0:	10a07e04 	addi	r2,r2,-32264
811383d4:	10801417 	ldw	r2,80(r2)
811383d8:	1885883a 	add	r2,r3,r2
811383dc:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
811383e0:	00a045b4 	movhi	r2,33046
811383e4:	10a07904 	addi	r2,r2,-32284
811383e8:	10800217 	ldw	r2,8(r2)
811383ec:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811383f0:	00003806 	br	811384d4 <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811383f4:	e0ffeb17 	ldw	r3,-84(fp)
811383f8:	e0bfed17 	ldw	r2,-76(fp)
811383fc:	1885883a 	add	r2,r3,r2
81138400:	d0e09b17 	ldw	r3,-32148(gp)
81138404:	180b883a 	mov	r5,r3
81138408:	1009883a 	mov	r4,r2
8113840c:	11352e80 	call	811352e8 <Read_Sector_Data>
81138410:	10003726 	beq	r2,zero,811384f0 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
81138414:	00002806 	br	811384b8 <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
81138418:	e0bfea17 	ldw	r2,-88(fp)
8113841c:	1004917a 	slli	r2,r2,5
81138420:	e13fe717 	ldw	r4,-100(fp)
81138424:	e17feb17 	ldw	r5,-84(fp)
81138428:	e0ffef04 	addi	r3,fp,-68
8113842c:	280f883a 	mov	r7,r5
81138430:	200d883a 	mov	r6,r4
81138434:	180b883a 	mov	r5,r3
81138438:	1009883a 	mov	r4,r2
8113843c:	11357180 	call	81135718 <Read_File_Record_At_Offset>
81138440:	10001a26 	beq	r2,zero,811384ac <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81138444:	e0bfef03 	ldbu	r2,-68(fp)
81138448:	10803fcc 	andi	r2,r2,255
8113844c:	10001726 	beq	r2,zero,811384ac <alt_up_sd_card_find_next+0x2d4>
81138450:	e0bfef03 	ldbu	r2,-68(fp)
81138454:	10803fcc 	andi	r2,r2,255
81138458:	10803960 	cmpeqi	r2,r2,229
8113845c:	1000131e 	bne	r2,zero,811384ac <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
81138460:	e0ffe717 	ldw	r3,-100(fp)
81138464:	00a045b4 	movhi	r2,33046
81138468:	10a07904 	addi	r2,r2,-32284
8113846c:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
81138470:	e0bfea17 	ldw	r2,-88(fp)
81138474:	1007883a 	mov	r3,r2
81138478:	00a045b4 	movhi	r2,33046
8113847c:	10a07904 	addi	r2,r2,-32284
81138480:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
81138484:	e0ffeb17 	ldw	r3,-84(fp)
81138488:	00a045b4 	movhi	r2,33046
8113848c:	10a07904 	addi	r2,r2,-32284
81138490:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
81138494:	e0bfef04 	addi	r2,fp,-68
81138498:	e17fff17 	ldw	r5,-4(fp)
8113849c:	1009883a 	mov	r4,r2
811384a0:	1137dac0 	call	81137dac <copy_file_record_name_to_string>
										return 0;
811384a4:	0005883a 	mov	r2,zero
811384a8:	00003606 	br	81138584 <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
811384ac:	e0bfea17 	ldw	r2,-88(fp)
811384b0:	10800044 	addi	r2,r2,1
811384b4:	e0bfea15 	stw	r2,-88(fp)
811384b8:	e0bfea17 	ldw	r2,-88(fp)
811384bc:	10800410 	cmplti	r2,r2,16
811384c0:	103fd51e 	bne	r2,zero,81138418 <__reset+0xfb118418>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
811384c4:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811384c8:	e0bfeb17 	ldw	r2,-84(fp)
811384cc:	10800044 	addi	r2,r2,1
811384d0:	e0bfeb15 	stw	r2,-84(fp)
811384d4:	00a045b4 	movhi	r2,33046
811384d8:	10a07e04 	addi	r2,r2,-32264
811384dc:	10800383 	ldbu	r2,14(r2)
811384e0:	10803fcc 	andi	r2,r2,255
811384e4:	e0ffeb17 	ldw	r3,-84(fp)
811384e8:	18bfc216 	blt	r3,r2,811383f4 <__reset+0xfb1183f4>
811384ec:	00000106 	br	811384f4 <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
811384f0:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
811384f4:	00a045b4 	movhi	r2,33046
811384f8:	10a07e04 	addi	r2,r2,-32264
811384fc:	10800383 	ldbu	r2,14(r2)
81138500:	10803fcc 	andi	r2,r2,255
81138504:	e0ffeb17 	ldw	r3,-84(fp)
81138508:	18801716 	blt	r3,r2,81138568 <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
8113850c:	e0bfe717 	ldw	r2,-100(fp)
81138510:	e0ffee04 	addi	r3,fp,-72
81138514:	180b883a 	mov	r5,r3
81138518:	1009883a 	mov	r4,r2
8113851c:	11353c80 	call	811353c8 <get_cluster_flag>
81138520:	10000f26 	beq	r2,zero,81138560 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81138524:	e0bfee0b 	ldhu	r2,-72(fp)
81138528:	10bfffcc 	andi	r2,r2,65535
8113852c:	10fffe0c 	andi	r3,r2,65528
81138530:	00bffe14 	movui	r2,65528
81138534:	1880051e 	bne	r3,r2,8113854c <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
81138538:	00bfffc4 	movi	r2,-1
8113853c:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
81138540:	00a045b4 	movhi	r2,33046
81138544:	10a07904 	addi	r2,r2,-32284
81138548:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
8113854c:	e0bfee0b 	ldhu	r2,-72(fp)
81138550:	10bfffcc 	andi	r2,r2,65535
81138554:	10bffe0c 	andi	r2,r2,65528
81138558:	e0bfe715 	stw	r2,-100(fp)
8113855c:	00000206 	br	81138568 <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
81138560:	00bfffc4 	movi	r2,-1
81138564:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
81138568:	e0bfe717 	ldw	r2,-100(fp)
8113856c:	00fffdd4 	movui	r3,65527
81138570:	18bf8e0e 	bge	r3,r2,811383ac <__reset+0xfb1183ac>
81138574:	00000206 	br	81138580 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
81138578:	008000c4 	movi	r2,3
8113857c:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
81138580:	e0bfe60b 	ldhu	r2,-104(fp)
}
81138584:	e037883a 	mov	sp,fp
81138588:	dfc00117 	ldw	ra,4(sp)
8113858c:	df000017 	ldw	fp,0(sp)
81138590:	dec00204 	addi	sp,sp,8
81138594:	f800283a 	ret

81138598 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
81138598:	deffe904 	addi	sp,sp,-92
8113859c:	de00012e 	bgeu	sp,et,811385a4 <alt_up_sd_card_fopen+0xc>
811385a0:	003b68fa 	trap	3
811385a4:	dfc01615 	stw	ra,88(sp)
811385a8:	df001515 	stw	fp,84(sp)
811385ac:	df001504 	addi	fp,sp,84
811385b0:	e13ffe15 	stw	r4,-8(fp)
811385b4:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
811385b8:	00bfffc4 	movi	r2,-1
811385bc:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811385c0:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
811385c4:	1000cf26 	beq	r2,zero,81138904 <alt_up_sd_card_fopen+0x36c>
811385c8:	d0a09417 	ldw	r2,-32176(gp)
811385cc:	1000cd26 	beq	r2,zero,81138904 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
811385d0:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
811385d4:	e13ffe17 	ldw	r4,-8(fp)
811385d8:	11363ac0 	call	811363ac <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
811385dc:	e13ffe17 	ldw	r4,-8(fp)
811385e0:	11364780 	call	81136478 <check_file_name_for_FAT16_compliance>
811385e4:	1000c726 	beq	r2,zero,81138904 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
811385e8:	e0ffee04 	addi	r3,fp,-72
811385ec:	e0bfed04 	addi	r2,fp,-76
811385f0:	180d883a 	mov	r6,r3
811385f4:	100b883a 	mov	r5,r2
811385f8:	e13ffe17 	ldw	r4,-8(fp)
811385fc:	1136a500 	call	81136a50 <get_home_directory_cluster_for_file>
81138600:	1000021e 	bne	r2,zero,8113860c <alt_up_sd_card_fopen+0x74>
            {
                return file_record_index;
81138604:	e0bfeb0b 	ldhu	r2,-84(fp)
81138608:	0000bf06 	br	81138908 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
8113860c:	e03fec15 	stw	zero,-80(fp)
81138610:	00000e06 	br	8113864c <alt_up_sd_card_fopen+0xb4>
    		{
    			if (active_files[index].in_use == false)
81138614:	00a045b4 	movhi	r2,33046
81138618:	10a09304 	addi	r2,r2,-32180
8113861c:	e0ffec17 	ldw	r3,-80(fp)
81138620:	180691ba 	slli	r3,r3,6
81138624:	10c5883a 	add	r2,r2,r3
81138628:	10800f04 	addi	r2,r2,60
8113862c:	10800017 	ldw	r2,0(r2)
81138630:	1000031e 	bne	r2,zero,81138640 <alt_up_sd_card_fopen+0xa8>
    			{
    				file_record_index = index;
81138634:	e0bfec17 	ldw	r2,-80(fp)
81138638:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
8113863c:	00000606 	br	81138658 <alt_up_sd_card_fopen+0xc0>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81138640:	e0bfec17 	ldw	r2,-80(fp)
81138644:	10800044 	addi	r2,r2,1
81138648:	e0bfec15 	stw	r2,-80(fp)
8113864c:	e0bfec17 	ldw	r2,-80(fp)
81138650:	10800510 	cmplti	r2,r2,20
81138654:	103fef1e 	bne	r2,zero,81138614 <__reset+0xfb118614>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
81138658:	e0bfeb0f 	ldh	r2,-84(fp)
8113865c:	1000a916 	blt	r2,zero,81138904 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
81138660:	e0bfed17 	ldw	r2,-76(fp)
81138664:	1009883a 	mov	r4,r2
81138668:	e0bfeb0f 	ldh	r2,-84(fp)
8113866c:	100691ba 	slli	r3,r2,6
81138670:	00a045b4 	movhi	r2,33046
81138674:	10a09304 	addi	r2,r2,-32180
81138678:	1885883a 	add	r2,r3,r2
8113867c:	100d883a 	mov	r6,r2
81138680:	e17ffe17 	ldw	r5,-8(fp)
81138684:	1136f900 	call	81136f90 <find_file_in_directory>
81138688:	10007b26 	beq	r2,zero,81138878 <alt_up_sd_card_fopen+0x2e0>
                {
                    if (create)
8113868c:	e0bfff17 	ldw	r2,-4(fp)
81138690:	10000226 	beq	r2,zero,8113869c <alt_up_sd_card_fopen+0x104>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
81138694:	00bfffc4 	movi	r2,-1
81138698:	00009b06 	br	81138908 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
8113869c:	e13feb0f 	ldh	r4,-84(fp)
811386a0:	e0ffeb0f 	ldh	r3,-84(fp)
811386a4:	00a045b4 	movhi	r2,33046
811386a8:	10a09304 	addi	r2,r2,-32180
811386ac:	180691ba 	slli	r3,r3,6
811386b0:	10c5883a 	add	r2,r2,r3
811386b4:	10800584 	addi	r2,r2,22
811386b8:	1080000b 	ldhu	r2,0(r2)
811386bc:	10ffffcc 	andi	r3,r2,65535
811386c0:	00a045b4 	movhi	r2,33046
811386c4:	10a09304 	addi	r2,r2,-32180
811386c8:	200891ba 	slli	r4,r4,6
811386cc:	1105883a 	add	r2,r2,r4
811386d0:	10800704 	addi	r2,r2,28
811386d4:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
811386d8:	e0ffeb0f 	ldh	r3,-84(fp)
811386dc:	00a045b4 	movhi	r2,33046
811386e0:	10a09304 	addi	r2,r2,-32180
811386e4:	180691ba 	slli	r3,r3,6
811386e8:	10c5883a 	add	r2,r2,r3
811386ec:	10800804 	addi	r2,r2,32
811386f0:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
811386f4:	e0ffeb0f 	ldh	r3,-84(fp)
811386f8:	00a045b4 	movhi	r2,33046
811386fc:	10a09304 	addi	r2,r2,-32180
81138700:	180691ba 	slli	r3,r3,6
81138704:	10c5883a 	add	r2,r2,r3
81138708:	10800904 	addi	r2,r2,36
8113870c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
81138710:	e0ffeb0f 	ldh	r3,-84(fp)
81138714:	00a045b4 	movhi	r2,33046
81138718:	10a09304 	addi	r2,r2,-32180
8113871c:	180691ba 	slli	r3,r3,6
81138720:	10c5883a 	add	r2,r2,r3
81138724:	10800f04 	addi	r2,r2,60
81138728:	00c00044 	movi	r3,1
8113872c:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
81138730:	e0ffeb0f 	ldh	r3,-84(fp)
81138734:	00a045b4 	movhi	r2,33046
81138738:	10a09304 	addi	r2,r2,-32180
8113873c:	180691ba 	slli	r3,r3,6
81138740:	10c5883a 	add	r2,r2,r3
81138744:	10800e04 	addi	r2,r2,56
81138748:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8113874c:	e03fec15 	stw	zero,-80(fp)
81138750:	00004506 	br	81138868 <alt_up_sd_card_fopen+0x2d0>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
81138754:	e0ffeb0f 	ldh	r3,-84(fp)
81138758:	e0bfec17 	ldw	r2,-80(fp)
8113875c:	18803f26 	beq	r3,r2,8113885c <alt_up_sd_card_fopen+0x2c4>
81138760:	00a045b4 	movhi	r2,33046
81138764:	10a09304 	addi	r2,r2,-32180
81138768:	e0ffec17 	ldw	r3,-80(fp)
8113876c:	180691ba 	slli	r3,r3,6
81138770:	10c5883a 	add	r2,r2,r3
81138774:	10800f04 	addi	r2,r2,60
81138778:	10800017 	ldw	r2,0(r2)
8113877c:	10800058 	cmpnei	r2,r2,1
81138780:	1000361e 	bne	r2,zero,8113885c <alt_up_sd_card_fopen+0x2c4>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81138784:	e0ffeb0f 	ldh	r3,-84(fp)
81138788:	00a045b4 	movhi	r2,33046
8113878c:	10a09304 	addi	r2,r2,-32180
81138790:	180691ba 	slli	r3,r3,6
81138794:	10c5883a 	add	r2,r2,r3
81138798:	10800a04 	addi	r2,r2,40
8113879c:	10c00017 	ldw	r3,0(r2)
811387a0:	00a045b4 	movhi	r2,33046
811387a4:	10a09304 	addi	r2,r2,-32180
811387a8:	e13fec17 	ldw	r4,-80(fp)
811387ac:	200891ba 	slli	r4,r4,6
811387b0:	1105883a 	add	r2,r2,r4
811387b4:	10800a04 	addi	r2,r2,40
811387b8:	10800017 	ldw	r2,0(r2)
811387bc:	1880271e 	bne	r3,r2,8113885c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
811387c0:	e0ffeb0f 	ldh	r3,-84(fp)
811387c4:	00a045b4 	movhi	r2,33046
811387c8:	10a09304 	addi	r2,r2,-32180
811387cc:	180691ba 	slli	r3,r3,6
811387d0:	10c5883a 	add	r2,r2,r3
811387d4:	10800b04 	addi	r2,r2,44
811387d8:	10c00017 	ldw	r3,0(r2)
811387dc:	00a045b4 	movhi	r2,33046
811387e0:	10a09304 	addi	r2,r2,-32180
811387e4:	e13fec17 	ldw	r4,-80(fp)
811387e8:	200891ba 	slli	r4,r4,6
811387ec:	1105883a 	add	r2,r2,r4
811387f0:	10800b04 	addi	r2,r2,44
811387f4:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
811387f8:	1880181e 	bne	r3,r2,8113885c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
811387fc:	e0ffeb0f 	ldh	r3,-84(fp)
81138800:	00a045b4 	movhi	r2,33046
81138804:	10a09304 	addi	r2,r2,-32180
81138808:	180691ba 	slli	r3,r3,6
8113880c:	10c5883a 	add	r2,r2,r3
81138810:	10800c04 	addi	r2,r2,48
81138814:	1100000b 	ldhu	r4,0(r2)
81138818:	00a045b4 	movhi	r2,33046
8113881c:	10a09304 	addi	r2,r2,-32180
81138820:	e0ffec17 	ldw	r3,-80(fp)
81138824:	180691ba 	slli	r3,r3,6
81138828:	10c5883a 	add	r2,r2,r3
8113882c:	10800c04 	addi	r2,r2,48
81138830:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81138834:	20ffffcc 	andi	r3,r4,65535
81138838:	18e0001c 	xori	r3,r3,32768
8113883c:	18e00004 	addi	r3,r3,-32768
81138840:	10bfffcc 	andi	r2,r2,65535
81138844:	10a0001c 	xori	r2,r2,32768
81138848:	10a00004 	addi	r2,r2,-32768
8113884c:	1880031e 	bne	r3,r2,8113885c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
81138850:	00bfff84 	movi	r2,-2
81138854:	e0bfeb0d 	sth	r2,-84(fp)
								break;
81138858:	00002a06 	br	81138904 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8113885c:	e0bfec17 	ldw	r2,-80(fp)
81138860:	10800044 	addi	r2,r2,1
81138864:	e0bfec15 	stw	r2,-80(fp)
81138868:	e0bfec17 	ldw	r2,-80(fp)
8113886c:	10800510 	cmplti	r2,r2,20
81138870:	103fb81e 	bne	r2,zero,81138754 <__reset+0xfb118754>
81138874:	00002306 	br	81138904 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
81138878:	e0bfff17 	ldw	r2,-4(fp)
8113887c:	10001f26 	beq	r2,zero,811388fc <alt_up_sd_card_fopen+0x364>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
81138880:	e0bfeb0f 	ldh	r2,-84(fp)
81138884:	100691ba 	slli	r3,r2,6
81138888:	00a045b4 	movhi	r2,33046
8113888c:	10a09304 	addi	r2,r2,-32180
81138890:	1885883a 	add	r2,r3,r2
81138894:	e0ffee04 	addi	r3,fp,-72
81138898:	180d883a 	mov	r6,r3
8113889c:	100b883a 	mov	r5,r2
811388a0:	e13ffe17 	ldw	r4,-8(fp)
811388a4:	1137adc0 	call	81137adc <create_file>
811388a8:	10001126 	beq	r2,zero,811388f0 <alt_up_sd_card_fopen+0x358>
                    {
                        active_files[file_record_index].in_use = true;
811388ac:	e0ffeb0f 	ldh	r3,-84(fp)
811388b0:	00a045b4 	movhi	r2,33046
811388b4:	10a09304 	addi	r2,r2,-32180
811388b8:	180691ba 	slli	r3,r3,6
811388bc:	10c5883a 	add	r2,r2,r3
811388c0:	10800f04 	addi	r2,r2,60
811388c4:	00c00044 	movi	r3,1
811388c8:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
811388cc:	e0ffeb0f 	ldh	r3,-84(fp)
811388d0:	00a045b4 	movhi	r2,33046
811388d4:	10a09304 	addi	r2,r2,-32180
811388d8:	180691ba 	slli	r3,r3,6
811388dc:	10c5883a 	add	r2,r2,r3
811388e0:	10800e04 	addi	r2,r2,56
811388e4:	00c00044 	movi	r3,1
811388e8:	10c00015 	stw	r3,0(r2)
811388ec:	00000506 	br	81138904 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
811388f0:	00bfffc4 	movi	r2,-1
811388f4:	e0bfeb0d 	sth	r2,-84(fp)
811388f8:	00000206 	br	81138904 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
811388fc:	00bfffc4 	movi	r2,-1
81138900:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
81138904:	e0bfeb0b 	ldhu	r2,-84(fp)
}
81138908:	e037883a 	mov	sp,fp
8113890c:	dfc00117 	ldw	ra,4(sp)
81138910:	df000017 	ldw	fp,0(sp)
81138914:	dec00204 	addi	sp,sp,8
81138918:	f800283a 	ret

8113891c <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
8113891c:	defffd04 	addi	sp,sp,-12
81138920:	de00012e 	bgeu	sp,et,81138928 <alt_up_sd_card_set_attributes+0xc>
81138924:	003b68fa 	trap	3
81138928:	df000215 	stw	fp,8(sp)
8113892c:	df000204 	addi	fp,sp,8
81138930:	2007883a 	mov	r3,r4
81138934:	2805883a 	mov	r2,r5
81138938:	e0fffe0d 	sth	r3,-8(fp)
8113893c:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81138940:	e0bffe0f 	ldh	r2,-8(fp)
81138944:	10001416 	blt	r2,zero,81138998 <alt_up_sd_card_set_attributes+0x7c>
81138948:	e0bffe0f 	ldh	r2,-8(fp)
8113894c:	10800508 	cmpgei	r2,r2,20
81138950:	1000111e 	bne	r2,zero,81138998 <alt_up_sd_card_set_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81138954:	e0fffe0f 	ldh	r3,-8(fp)
81138958:	00a045b4 	movhi	r2,33046
8113895c:	10a09304 	addi	r2,r2,-32180
81138960:	180691ba 	slli	r3,r3,6
81138964:	10c5883a 	add	r2,r2,r3
81138968:	10800f04 	addi	r2,r2,60
8113896c:	10800017 	ldw	r2,0(r2)
81138970:	10000926 	beq	r2,zero,81138998 <alt_up_sd_card_set_attributes+0x7c>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
81138974:	e0fffe0f 	ldh	r3,-8(fp)
81138978:	e0bfff0b 	ldhu	r2,-4(fp)
8113897c:	1009883a 	mov	r4,r2
81138980:	00a045b4 	movhi	r2,33046
81138984:	10a09304 	addi	r2,r2,-32180
81138988:	180691ba 	slli	r3,r3,6
8113898c:	10c5883a 	add	r2,r2,r3
81138990:	108002c4 	addi	r2,r2,11
81138994:	11000005 	stb	r4,0(r2)
        }
    }
}
81138998:	0001883a 	nop
8113899c:	e037883a 	mov	sp,fp
811389a0:	df000017 	ldw	fp,0(sp)
811389a4:	dec00104 	addi	sp,sp,4
811389a8:	f800283a 	ret

811389ac <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
811389ac:	defffd04 	addi	sp,sp,-12
811389b0:	de00012e 	bgeu	sp,et,811389b8 <alt_up_sd_card_get_attributes+0xc>
811389b4:	003b68fa 	trap	3
811389b8:	df000215 	stw	fp,8(sp)
811389bc:	df000204 	addi	fp,sp,8
811389c0:	2005883a 	mov	r2,r4
811389c4:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
811389c8:	00bfffc4 	movi	r2,-1
811389cc:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
811389d0:	e0bfff0f 	ldh	r2,-4(fp)
811389d4:	10001416 	blt	r2,zero,81138a28 <alt_up_sd_card_get_attributes+0x7c>
811389d8:	e0bfff0f 	ldh	r2,-4(fp)
811389dc:	10800508 	cmpgei	r2,r2,20
811389e0:	1000111e 	bne	r2,zero,81138a28 <alt_up_sd_card_get_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
811389e4:	e0ffff0f 	ldh	r3,-4(fp)
811389e8:	00a045b4 	movhi	r2,33046
811389ec:	10a09304 	addi	r2,r2,-32180
811389f0:	180691ba 	slli	r3,r3,6
811389f4:	10c5883a 	add	r2,r2,r3
811389f8:	10800f04 	addi	r2,r2,60
811389fc:	10800017 	ldw	r2,0(r2)
81138a00:	10000926 	beq	r2,zero,81138a28 <alt_up_sd_card_get_attributes+0x7c>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
81138a04:	e0ffff0f 	ldh	r3,-4(fp)
81138a08:	00a045b4 	movhi	r2,33046
81138a0c:	10a09304 	addi	r2,r2,-32180
81138a10:	180691ba 	slli	r3,r3,6
81138a14:	10c5883a 	add	r2,r2,r3
81138a18:	108002c4 	addi	r2,r2,11
81138a1c:	10800003 	ldbu	r2,0(r2)
81138a20:	10803fcc 	andi	r2,r2,255
81138a24:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
81138a28:	e0bffe0b 	ldhu	r2,-8(fp)
}
81138a2c:	e037883a 	mov	sp,fp
81138a30:	df000017 	ldw	fp,0(sp)
81138a34:	dec00104 	addi	sp,sp,4
81138a38:	f800283a 	ret

81138a3c <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
81138a3c:	defffa04 	addi	sp,sp,-24
81138a40:	de00012e 	bgeu	sp,et,81138a48 <alt_up_sd_card_read+0xc>
81138a44:	003b68fa 	trap	3
81138a48:	dfc00515 	stw	ra,20(sp)
81138a4c:	df000415 	stw	fp,16(sp)
81138a50:	df000404 	addi	fp,sp,16
81138a54:	2005883a 	mov	r2,r4
81138a58:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
81138a5c:	00bfffc4 	movi	r2,-1
81138a60:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81138a64:	e0bfff0f 	ldh	r2,-4(fp)
81138a68:	1000ce16 	blt	r2,zero,81138da4 <alt_up_sd_card_read+0x368>
81138a6c:	e0bfff0f 	ldh	r2,-4(fp)
81138a70:	10800508 	cmpgei	r2,r2,20
81138a74:	1000cb1e 	bne	r2,zero,81138da4 <alt_up_sd_card_read+0x368>
    {
        if (active_files[file_handle].in_use)
81138a78:	e0ffff0f 	ldh	r3,-4(fp)
81138a7c:	00a045b4 	movhi	r2,33046
81138a80:	10a09304 	addi	r2,r2,-32180
81138a84:	180691ba 	slli	r3,r3,6
81138a88:	10c5883a 	add	r2,r2,r3
81138a8c:	10800f04 	addi	r2,r2,60
81138a90:	10800017 	ldw	r2,0(r2)
81138a94:	1000c326 	beq	r2,zero,81138da4 <alt_up_sd_card_read+0x368>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81138a98:	e0ffff0f 	ldh	r3,-4(fp)
81138a9c:	00a045b4 	movhi	r2,33046
81138aa0:	10a09304 	addi	r2,r2,-32180
81138aa4:	180691ba 	slli	r3,r3,6
81138aa8:	10c5883a 	add	r2,r2,r3
81138aac:	10800904 	addi	r2,r2,36
81138ab0:	10c00017 	ldw	r3,0(r2)
81138ab4:	e13fff0f 	ldh	r4,-4(fp)
81138ab8:	00a045b4 	movhi	r2,33046
81138abc:	10a09304 	addi	r2,r2,-32180
81138ac0:	200891ba 	slli	r4,r4,6
81138ac4:	1105883a 	add	r2,r2,r4
81138ac8:	10800604 	addi	r2,r2,24
81138acc:	10800017 	ldw	r2,0(r2)
81138ad0:	1880b42e 	bgeu	r3,r2,81138da4 <alt_up_sd_card_read+0x368>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138ad4:	00a045b4 	movhi	r2,33046
81138ad8:	10a07e04 	addi	r2,r2,-32264
81138adc:	10c01417 	ldw	r3,80(r2)
81138ae0:	e13fff0f 	ldh	r4,-4(fp)
81138ae4:	00a045b4 	movhi	r2,33046
81138ae8:	10a09304 	addi	r2,r2,-32180
81138aec:	200891ba 	slli	r4,r4,6
81138af0:	1105883a 	add	r2,r2,r4
81138af4:	10800704 	addi	r2,r2,28
81138af8:	10800017 	ldw	r2,0(r2)
81138afc:	113fff84 	addi	r4,r2,-2
81138b00:	00a045b4 	movhi	r2,33046
81138b04:	10a07e04 	addi	r2,r2,-32264
81138b08:	10800383 	ldbu	r2,14(r2)
81138b0c:	10803fcc 	andi	r2,r2,255
81138b10:	2085383a 	mul	r2,r4,r2
81138b14:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
81138b18:	e13fff0f 	ldh	r4,-4(fp)
81138b1c:	00a045b4 	movhi	r2,33046
81138b20:	10a09304 	addi	r2,r2,-32180
81138b24:	200891ba 	slli	r4,r4,6
81138b28:	1105883a 	add	r2,r2,r4
81138b2c:	10800804 	addi	r2,r2,32
81138b30:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138b34:	1885883a 	add	r2,r3,r2
81138b38:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
81138b3c:	e0ffff0f 	ldh	r3,-4(fp)
81138b40:	00a045b4 	movhi	r2,33046
81138b44:	10a09304 	addi	r2,r2,-32180
81138b48:	180691ba 	slli	r3,r3,6
81138b4c:	10c5883a 	add	r2,r2,r3
81138b50:	10800904 	addi	r2,r2,36
81138b54:	10800017 	ldw	r2,0(r2)
81138b58:	10006826 	beq	r2,zero,81138cfc <alt_up_sd_card_read+0x2c0>
81138b5c:	e0ffff0f 	ldh	r3,-4(fp)
81138b60:	00a045b4 	movhi	r2,33046
81138b64:	10a09304 	addi	r2,r2,-32180
81138b68:	180691ba 	slli	r3,r3,6
81138b6c:	10c5883a 	add	r2,r2,r3
81138b70:	10800904 	addi	r2,r2,36
81138b74:	10800017 	ldw	r2,0(r2)
81138b78:	10807fcc 	andi	r2,r2,511
81138b7c:	10005f1e 	bne	r2,zero,81138cfc <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81138b80:	e0ffff0f 	ldh	r3,-4(fp)
81138b84:	00a045b4 	movhi	r2,33046
81138b88:	10a09304 	addi	r2,r2,-32180
81138b8c:	180691ba 	slli	r3,r3,6
81138b90:	10c5883a 	add	r2,r2,r3
81138b94:	10800804 	addi	r2,r2,32
81138b98:	10c00017 	ldw	r3,0(r2)
81138b9c:	00a045b4 	movhi	r2,33046
81138ba0:	10a07e04 	addi	r2,r2,-32264
81138ba4:	10800383 	ldbu	r2,14(r2)
81138ba8:	10803fcc 	andi	r2,r2,255
81138bac:	10bfffc4 	addi	r2,r2,-1
81138bb0:	1880401e 	bne	r3,r2,81138cb4 <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81138bb4:	e0ffff0f 	ldh	r3,-4(fp)
81138bb8:	00a045b4 	movhi	r2,33046
81138bbc:	10a09304 	addi	r2,r2,-32180
81138bc0:	180691ba 	slli	r3,r3,6
81138bc4:	10c5883a 	add	r2,r2,r3
81138bc8:	10800704 	addi	r2,r2,28
81138bcc:	10800017 	ldw	r2,0(r2)
81138bd0:	e0fffe04 	addi	r3,fp,-8
81138bd4:	180b883a 	mov	r5,r3
81138bd8:	1009883a 	mov	r4,r2
81138bdc:	11353c80 	call	811353c8 <get_cluster_flag>
81138be0:	10003226 	beq	r2,zero,81138cac <alt_up_sd_card_read+0x270>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81138be4:	e0bffe0b 	ldhu	r2,-8(fp)
81138be8:	10bfffcc 	andi	r2,r2,65535
81138bec:	10fffe0c 	andi	r3,r2,65528
81138bf0:	00bffe14 	movui	r2,65528
81138bf4:	1880021e 	bne	r3,r2,81138c00 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
81138bf8:	00bfffc4 	movi	r2,-1
81138bfc:	00006a06 	br	81138da8 <alt_up_sd_card_read+0x36c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81138c00:	e13fff0f 	ldh	r4,-4(fp)
81138c04:	e0bffe0b 	ldhu	r2,-8(fp)
81138c08:	10ffffcc 	andi	r3,r2,65535
81138c0c:	00a045b4 	movhi	r2,33046
81138c10:	10a09304 	addi	r2,r2,-32180
81138c14:	200891ba 	slli	r4,r4,6
81138c18:	1105883a 	add	r2,r2,r4
81138c1c:	10800704 	addi	r2,r2,28
81138c20:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81138c24:	e0ffff0f 	ldh	r3,-4(fp)
81138c28:	00a045b4 	movhi	r2,33046
81138c2c:	10a09304 	addi	r2,r2,-32180
81138c30:	180691ba 	slli	r3,r3,6
81138c34:	10c5883a 	add	r2,r2,r3
81138c38:	10800804 	addi	r2,r2,32
81138c3c:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138c40:	00a045b4 	movhi	r2,33046
81138c44:	10a07e04 	addi	r2,r2,-32264
81138c48:	10c01417 	ldw	r3,80(r2)
81138c4c:	e13fff0f 	ldh	r4,-4(fp)
81138c50:	00a045b4 	movhi	r2,33046
81138c54:	10a09304 	addi	r2,r2,-32180
81138c58:	200891ba 	slli	r4,r4,6
81138c5c:	1105883a 	add	r2,r2,r4
81138c60:	10800704 	addi	r2,r2,28
81138c64:	10800017 	ldw	r2,0(r2)
81138c68:	113fff84 	addi	r4,r2,-2
81138c6c:	00a045b4 	movhi	r2,33046
81138c70:	10a07e04 	addi	r2,r2,-32264
81138c74:	10800383 	ldbu	r2,14(r2)
81138c78:	10803fcc 	andi	r2,r2,255
81138c7c:	2085383a 	mul	r2,r4,r2
81138c80:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81138c84:	e13fff0f 	ldh	r4,-4(fp)
81138c88:	00a045b4 	movhi	r2,33046
81138c8c:	10a09304 	addi	r2,r2,-32180
81138c90:	200891ba 	slli	r4,r4,6
81138c94:	1105883a 	add	r2,r2,r4
81138c98:	10800804 	addi	r2,r2,32
81138c9c:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138ca0:	1885883a 	add	r2,r3,r2
81138ca4:	e0bffd15 	stw	r2,-12(fp)
81138ca8:	00001406 	br	81138cfc <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
81138cac:	00bfff84 	movi	r2,-2
81138cb0:	00003d06 	br	81138da8 <alt_up_sd_card_read+0x36c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81138cb4:	e13fff0f 	ldh	r4,-4(fp)
81138cb8:	e0ffff0f 	ldh	r3,-4(fp)
81138cbc:	00a045b4 	movhi	r2,33046
81138cc0:	10a09304 	addi	r2,r2,-32180
81138cc4:	180691ba 	slli	r3,r3,6
81138cc8:	10c5883a 	add	r2,r2,r3
81138ccc:	10800804 	addi	r2,r2,32
81138cd0:	10800017 	ldw	r2,0(r2)
81138cd4:	10c00044 	addi	r3,r2,1
81138cd8:	00a045b4 	movhi	r2,33046
81138cdc:	10a09304 	addi	r2,r2,-32180
81138ce0:	200891ba 	slli	r4,r4,6
81138ce4:	1105883a 	add	r2,r2,r4
81138ce8:	10800804 	addi	r2,r2,32
81138cec:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81138cf0:	e0bffd17 	ldw	r2,-12(fp)
81138cf4:	10800044 	addi	r2,r2,1
81138cf8:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
81138cfc:	d0e09b17 	ldw	r3,-32148(gp)
81138d00:	e0bffd17 	ldw	r2,-12(fp)
81138d04:	1885883a 	add	r2,r3,r2
81138d08:	1007883a 	mov	r3,r2
81138d0c:	d0a09f17 	ldw	r2,-32132(gp)
81138d10:	18800726 	beq	r3,r2,81138d30 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
81138d14:	d0a09b17 	ldw	r2,-32148(gp)
81138d18:	100b883a 	mov	r5,r2
81138d1c:	e13ffd17 	ldw	r4,-12(fp)
81138d20:	11352e80 	call	811352e8 <Read_Sector_Data>
81138d24:	1000021e 	bne	r2,zero,81138d30 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
81138d28:	00bfff84 	movi	r2,-2
81138d2c:	00001e06 	br	81138da8 <alt_up_sd_card_read+0x36c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
81138d30:	d0e09a17 	ldw	r3,-32152(gp)
81138d34:	e13fff0f 	ldh	r4,-4(fp)
81138d38:	00a045b4 	movhi	r2,33046
81138d3c:	10a09304 	addi	r2,r2,-32180
81138d40:	200891ba 	slli	r4,r4,6
81138d44:	1105883a 	add	r2,r2,r4
81138d48:	10800904 	addi	r2,r2,36
81138d4c:	10800017 	ldw	r2,0(r2)
81138d50:	10807fcc 	andi	r2,r2,511
81138d54:	1885883a 	add	r2,r3,r2
81138d58:	10800023 	ldbuio	r2,0(r2)
81138d5c:	10803fcc 	andi	r2,r2,255
81138d60:	10803fcc 	andi	r2,r2,255
81138d64:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
81138d68:	e13fff0f 	ldh	r4,-4(fp)
81138d6c:	e0ffff0f 	ldh	r3,-4(fp)
81138d70:	00a045b4 	movhi	r2,33046
81138d74:	10a09304 	addi	r2,r2,-32180
81138d78:	180691ba 	slli	r3,r3,6
81138d7c:	10c5883a 	add	r2,r2,r3
81138d80:	10800904 	addi	r2,r2,36
81138d84:	10800017 	ldw	r2,0(r2)
81138d88:	10c00044 	addi	r3,r2,1
81138d8c:	00a045b4 	movhi	r2,33046
81138d90:	10a09304 	addi	r2,r2,-32180
81138d94:	200891ba 	slli	r4,r4,6
81138d98:	1105883a 	add	r2,r2,r4
81138d9c:	10800904 	addi	r2,r2,36
81138da0:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
81138da4:	e0bffc0b 	ldhu	r2,-16(fp)
}
81138da8:	e037883a 	mov	sp,fp
81138dac:	dfc00117 	ldw	ra,4(sp)
81138db0:	df000017 	ldw	fp,0(sp)
81138db4:	dec00204 	addi	sp,sp,8
81138db8:	f800283a 	ret

81138dbc <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
81138dbc:	defff804 	addi	sp,sp,-32
81138dc0:	de00012e 	bgeu	sp,et,81138dc8 <alt_up_sd_card_write+0xc>
81138dc4:	003b68fa 	trap	3
81138dc8:	dfc00715 	stw	ra,28(sp)
81138dcc:	df000615 	stw	fp,24(sp)
81138dd0:	df000604 	addi	fp,sp,24
81138dd4:	2007883a 	mov	r3,r4
81138dd8:	2805883a 	mov	r2,r5
81138ddc:	e0fffe0d 	sth	r3,-8(fp)
81138de0:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
81138de4:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81138de8:	e0bffe0f 	ldh	r2,-8(fp)
81138dec:	10017716 	blt	r2,zero,811393cc <alt_up_sd_card_write+0x610>
81138df0:	e0bffe0f 	ldh	r2,-8(fp)
81138df4:	10800508 	cmpgei	r2,r2,20
81138df8:	1001741e 	bne	r2,zero,811393cc <alt_up_sd_card_write+0x610>
    {
        if (active_files[file_handle].in_use)
81138dfc:	e0fffe0f 	ldh	r3,-8(fp)
81138e00:	00a045b4 	movhi	r2,33046
81138e04:	10a09304 	addi	r2,r2,-32180
81138e08:	180691ba 	slli	r3,r3,6
81138e0c:	10c5883a 	add	r2,r2,r3
81138e10:	10800f04 	addi	r2,r2,60
81138e14:	10800017 	ldw	r2,0(r2)
81138e18:	10016c26 	beq	r2,zero,811393cc <alt_up_sd_card_write+0x610>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138e1c:	00a045b4 	movhi	r2,33046
81138e20:	10a07e04 	addi	r2,r2,-32264
81138e24:	10c01417 	ldw	r3,80(r2)
81138e28:	e13ffe0f 	ldh	r4,-8(fp)
81138e2c:	00a045b4 	movhi	r2,33046
81138e30:	10a09304 	addi	r2,r2,-32180
81138e34:	200891ba 	slli	r4,r4,6
81138e38:	1105883a 	add	r2,r2,r4
81138e3c:	10800704 	addi	r2,r2,28
81138e40:	10800017 	ldw	r2,0(r2)
81138e44:	113fff84 	addi	r4,r2,-2
81138e48:	00a045b4 	movhi	r2,33046
81138e4c:	10a07e04 	addi	r2,r2,-32264
81138e50:	10800383 	ldbu	r2,14(r2)
81138e54:	10803fcc 	andi	r2,r2,255
81138e58:	2085383a 	mul	r2,r4,r2
81138e5c:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
81138e60:	e13ffe0f 	ldh	r4,-8(fp)
81138e64:	00a045b4 	movhi	r2,33046
81138e68:	10a09304 	addi	r2,r2,-32180
81138e6c:	200891ba 	slli	r4,r4,6
81138e70:	1105883a 	add	r2,r2,r4
81138e74:	10800804 	addi	r2,r2,32
81138e78:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138e7c:	1885883a 	add	r2,r3,r2
81138e80:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
81138e84:	e0fffe0f 	ldh	r3,-8(fp)
81138e88:	00a045b4 	movhi	r2,33046
81138e8c:	10a09304 	addi	r2,r2,-32180
81138e90:	180691ba 	slli	r3,r3,6
81138e94:	10c5883a 	add	r2,r2,r3
81138e98:	10800904 	addi	r2,r2,36
81138e9c:	10c00017 	ldw	r3,0(r2)
81138ea0:	00a045b4 	movhi	r2,33046
81138ea4:	10a07e04 	addi	r2,r2,-32264
81138ea8:	1080030b 	ldhu	r2,12(r2)
81138eac:	10bfffcc 	andi	r2,r2,65535
81138eb0:	1889203a 	divu	r4,r3,r2
81138eb4:	2085383a 	mul	r2,r4,r2
81138eb8:	1885c83a 	sub	r2,r3,r2
81138ebc:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81138ec0:	e0fffe0f 	ldh	r3,-8(fp)
81138ec4:	00a045b4 	movhi	r2,33046
81138ec8:	10a09304 	addi	r2,r2,-32180
81138ecc:	180691ba 	slli	r3,r3,6
81138ed0:	10c5883a 	add	r2,r2,r3
81138ed4:	10800904 	addi	r2,r2,36
81138ed8:	10c00017 	ldw	r3,0(r2)
81138edc:	e13ffe0f 	ldh	r4,-8(fp)
81138ee0:	00a045b4 	movhi	r2,33046
81138ee4:	10a09304 	addi	r2,r2,-32180
81138ee8:	200891ba 	slli	r4,r4,6
81138eec:	1105883a 	add	r2,r2,r4
81138ef0:	10800604 	addi	r2,r2,24
81138ef4:	10800017 	ldw	r2,0(r2)
81138ef8:	1880672e 	bgeu	r3,r2,81139098 <alt_up_sd_card_write+0x2dc>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
81138efc:	e0fffe0f 	ldh	r3,-8(fp)
81138f00:	00a045b4 	movhi	r2,33046
81138f04:	10a09304 	addi	r2,r2,-32180
81138f08:	180691ba 	slli	r3,r3,6
81138f0c:	10c5883a 	add	r2,r2,r3
81138f10:	10800904 	addi	r2,r2,36
81138f14:	10800017 	ldw	r2,0(r2)
81138f18:	1000e126 	beq	r2,zero,811392a0 <alt_up_sd_card_write+0x4e4>
81138f1c:	e0bffc0f 	ldh	r2,-16(fp)
81138f20:	1000df1e 	bne	r2,zero,811392a0 <alt_up_sd_card_write+0x4e4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81138f24:	e0fffe0f 	ldh	r3,-8(fp)
81138f28:	00a045b4 	movhi	r2,33046
81138f2c:	10a09304 	addi	r2,r2,-32180
81138f30:	180691ba 	slli	r3,r3,6
81138f34:	10c5883a 	add	r2,r2,r3
81138f38:	10800804 	addi	r2,r2,32
81138f3c:	10c00017 	ldw	r3,0(r2)
81138f40:	00a045b4 	movhi	r2,33046
81138f44:	10a07e04 	addi	r2,r2,-32264
81138f48:	10800383 	ldbu	r2,14(r2)
81138f4c:	10803fcc 	andi	r2,r2,255
81138f50:	10bfffc4 	addi	r2,r2,-1
81138f54:	18803d1e 	bne	r3,r2,8113904c <alt_up_sd_card_write+0x290>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81138f58:	e0fffe0f 	ldh	r3,-8(fp)
81138f5c:	00a045b4 	movhi	r2,33046
81138f60:	10a09304 	addi	r2,r2,-32180
81138f64:	180691ba 	slli	r3,r3,6
81138f68:	10c5883a 	add	r2,r2,r3
81138f6c:	10800704 	addi	r2,r2,28
81138f70:	10800017 	ldw	r2,0(r2)
81138f74:	e0fffc84 	addi	r3,fp,-14
81138f78:	180b883a 	mov	r5,r3
81138f7c:	1009883a 	mov	r4,r2
81138f80:	11353c80 	call	811353c8 <get_cluster_flag>
81138f84:	10002f26 	beq	r2,zero,81139044 <alt_up_sd_card_write+0x288>
                        {
                            if (next_cluster < 0x0000fff8)
81138f88:	e0bffc8b 	ldhu	r2,-14(fp)
81138f8c:	10bfffcc 	andi	r2,r2,65535
81138f90:	10bffe28 	cmpgeui	r2,r2,65528
81138f94:	1000c21e 	bne	r2,zero,811392a0 <alt_up_sd_card_write+0x4e4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81138f98:	e13ffe0f 	ldh	r4,-8(fp)
81138f9c:	e0bffc8b 	ldhu	r2,-14(fp)
81138fa0:	10ffffcc 	andi	r3,r2,65535
81138fa4:	00a045b4 	movhi	r2,33046
81138fa8:	10a09304 	addi	r2,r2,-32180
81138fac:	200891ba 	slli	r4,r4,6
81138fb0:	1105883a 	add	r2,r2,r4
81138fb4:	10800704 	addi	r2,r2,28
81138fb8:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81138fbc:	e0fffe0f 	ldh	r3,-8(fp)
81138fc0:	00a045b4 	movhi	r2,33046
81138fc4:	10a09304 	addi	r2,r2,-32180
81138fc8:	180691ba 	slli	r3,r3,6
81138fcc:	10c5883a 	add	r2,r2,r3
81138fd0:	10800804 	addi	r2,r2,32
81138fd4:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81138fd8:	00a045b4 	movhi	r2,33046
81138fdc:	10a07e04 	addi	r2,r2,-32264
81138fe0:	10c01417 	ldw	r3,80(r2)
81138fe4:	e13ffe0f 	ldh	r4,-8(fp)
81138fe8:	00a045b4 	movhi	r2,33046
81138fec:	10a09304 	addi	r2,r2,-32180
81138ff0:	200891ba 	slli	r4,r4,6
81138ff4:	1105883a 	add	r2,r2,r4
81138ff8:	10800704 	addi	r2,r2,28
81138ffc:	10800017 	ldw	r2,0(r2)
81139000:	113fff84 	addi	r4,r2,-2
81139004:	00a045b4 	movhi	r2,33046
81139008:	10a07e04 	addi	r2,r2,-32264
8113900c:	10800383 	ldbu	r2,14(r2)
81139010:	10803fcc 	andi	r2,r2,255
81139014:	2085383a 	mul	r2,r4,r2
81139018:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
8113901c:	e13ffe0f 	ldh	r4,-8(fp)
81139020:	00a045b4 	movhi	r2,33046
81139024:	10a09304 	addi	r2,r2,-32180
81139028:	200891ba 	slli	r4,r4,6
8113902c:	1105883a 	add	r2,r2,r4
81139030:	10800804 	addi	r2,r2,32
81139034:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81139038:	1885883a 	add	r2,r3,r2
8113903c:	e0bffb15 	stw	r2,-20(fp)
81139040:	00009706 	br	811392a0 <alt_up_sd_card_write+0x4e4>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
81139044:	0005883a 	mov	r2,zero
81139048:	0000e106 	br	811393d0 <alt_up_sd_card_write+0x614>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
8113904c:	e13ffe0f 	ldh	r4,-8(fp)
81139050:	e0fffe0f 	ldh	r3,-8(fp)
81139054:	00a045b4 	movhi	r2,33046
81139058:	10a09304 	addi	r2,r2,-32180
8113905c:	180691ba 	slli	r3,r3,6
81139060:	10c5883a 	add	r2,r2,r3
81139064:	10800804 	addi	r2,r2,32
81139068:	10800017 	ldw	r2,0(r2)
8113906c:	10c00044 	addi	r3,r2,1
81139070:	00a045b4 	movhi	r2,33046
81139074:	10a09304 	addi	r2,r2,-32180
81139078:	200891ba 	slli	r4,r4,6
8113907c:	1105883a 	add	r2,r2,r4
81139080:	10800804 	addi	r2,r2,32
81139084:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81139088:	e0bffb17 	ldw	r2,-20(fp)
8113908c:	10800044 	addi	r2,r2,1
81139090:	e0bffb15 	stw	r2,-20(fp)
81139094:	00008206 	br	811392a0 <alt_up_sd_card_write+0x4e4>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
81139098:	e0fffe0f 	ldh	r3,-8(fp)
8113909c:	00a045b4 	movhi	r2,33046
811390a0:	10a09304 	addi	r2,r2,-32180
811390a4:	180691ba 	slli	r3,r3,6
811390a8:	10c5883a 	add	r2,r2,r3
811390ac:	10800904 	addi	r2,r2,36
811390b0:	10800017 	ldw	r2,0(r2)
811390b4:	10007a26 	beq	r2,zero,811392a0 <alt_up_sd_card_write+0x4e4>
811390b8:	e0bffc0f 	ldh	r2,-16(fp)
811390bc:	1000781e 	bne	r2,zero,811392a0 <alt_up_sd_card_write+0x4e4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
811390c0:	e0fffe0f 	ldh	r3,-8(fp)
811390c4:	00a045b4 	movhi	r2,33046
811390c8:	10a09304 	addi	r2,r2,-32180
811390cc:	180691ba 	slli	r3,r3,6
811390d0:	10c5883a 	add	r2,r2,r3
811390d4:	10800804 	addi	r2,r2,32
811390d8:	10c00017 	ldw	r3,0(r2)
811390dc:	00a045b4 	movhi	r2,33046
811390e0:	10a07e04 	addi	r2,r2,-32264
811390e4:	10800383 	ldbu	r2,14(r2)
811390e8:	10803fcc 	andi	r2,r2,255
811390ec:	10bfffc4 	addi	r2,r2,-1
811390f0:	18803e1e 	bne	r3,r2,811391ec <alt_up_sd_card_write+0x430>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
811390f4:	e0bffd04 	addi	r2,fp,-12
811390f8:	1009883a 	mov	r4,r2
811390fc:	113740c0 	call	8113740c <find_first_empty_cluster>
81139100:	10003826 	beq	r2,zero,811391e4 <alt_up_sd_card_write+0x428>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
81139104:	e0fffe0f 	ldh	r3,-8(fp)
81139108:	00a045b4 	movhi	r2,33046
8113910c:	10a09304 	addi	r2,r2,-32180
81139110:	180691ba 	slli	r3,r3,6
81139114:	10c5883a 	add	r2,r2,r3
81139118:	10800704 	addi	r2,r2,28
8113911c:	10800017 	ldw	r2,0(r2)
81139120:	e0fffd17 	ldw	r3,-12(fp)
81139124:	18ffffcc 	andi	r3,r3,65535
81139128:	18e0001c 	xori	r3,r3,32768
8113912c:	18e00004 	addi	r3,r3,-32768
81139130:	01800044 	movi	r6,1
81139134:	180b883a 	mov	r5,r3
81139138:	1009883a 	mov	r4,r2
8113913c:	11354840 	call	81135484 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
81139140:	e0bffd17 	ldw	r2,-12(fp)
81139144:	01800044 	movi	r6,1
81139148:	017fffc4 	movi	r5,-1
8113914c:	1009883a 	mov	r4,r2
81139150:	11354840 	call	81135484 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
81139154:	e0fffe0f 	ldh	r3,-8(fp)
81139158:	00a045b4 	movhi	r2,33046
8113915c:	10a09304 	addi	r2,r2,-32180
81139160:	180691ba 	slli	r3,r3,6
81139164:	10c5883a 	add	r2,r2,r3
81139168:	10800704 	addi	r2,r2,28
8113916c:	10800017 	ldw	r2,0(r2)
81139170:	e0fffd17 	ldw	r3,-12(fp)
81139174:	18ffffcc 	andi	r3,r3,65535
81139178:	18e0001c 	xori	r3,r3,32768
8113917c:	18e00004 	addi	r3,r3,-32768
81139180:	000d883a 	mov	r6,zero
81139184:	180b883a 	mov	r5,r3
81139188:	1009883a 	mov	r4,r2
8113918c:	11354840 	call	81135484 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
81139190:	e0bffd17 	ldw	r2,-12(fp)
81139194:	000d883a 	mov	r6,zero
81139198:	017fffc4 	movi	r5,-1
8113919c:	1009883a 	mov	r4,r2
811391a0:	11354840 	call	81135484 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
811391a4:	e13ffe0f 	ldh	r4,-8(fp)
811391a8:	e0fffd17 	ldw	r3,-12(fp)
811391ac:	00a045b4 	movhi	r2,33046
811391b0:	10a09304 	addi	r2,r2,-32180
811391b4:	200891ba 	slli	r4,r4,6
811391b8:	1105883a 	add	r2,r2,r4
811391bc:	10800704 	addi	r2,r2,28
811391c0:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
811391c4:	e0fffe0f 	ldh	r3,-8(fp)
811391c8:	00a045b4 	movhi	r2,33046
811391cc:	10a09304 	addi	r2,r2,-32180
811391d0:	180691ba 	slli	r3,r3,6
811391d4:	10c5883a 	add	r2,r2,r3
811391d8:	10800804 	addi	r2,r2,32
811391dc:	10000015 	stw	zero,0(r2)
811391e0:	00001506 	br	81139238 <alt_up_sd_card_write+0x47c>
						}
						else
						{
							return false;
811391e4:	0005883a 	mov	r2,zero
811391e8:	00007906 	br	811393d0 <alt_up_sd_card_write+0x614>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
811391ec:	e13ffe0f 	ldh	r4,-8(fp)
811391f0:	e0fffe0f 	ldh	r3,-8(fp)
811391f4:	00a045b4 	movhi	r2,33046
811391f8:	10a09304 	addi	r2,r2,-32180
811391fc:	180691ba 	slli	r3,r3,6
81139200:	10c5883a 	add	r2,r2,r3
81139204:	10800904 	addi	r2,r2,36
81139208:	10c00017 	ldw	r3,0(r2)
8113920c:	00a045b4 	movhi	r2,33046
81139210:	10a07e04 	addi	r2,r2,-32264
81139214:	1080030b 	ldhu	r2,12(r2)
81139218:	10bfffcc 	andi	r2,r2,65535
8113921c:	1887203a 	divu	r3,r3,r2
81139220:	00a045b4 	movhi	r2,33046
81139224:	10a09304 	addi	r2,r2,-32180
81139228:	200891ba 	slli	r4,r4,6
8113922c:	1105883a 	add	r2,r2,r4
81139230:	10800804 	addi	r2,r2,32
81139234:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81139238:	00a045b4 	movhi	r2,33046
8113923c:	10a07e04 	addi	r2,r2,-32264
81139240:	10c01417 	ldw	r3,80(r2)
81139244:	e13ffe0f 	ldh	r4,-8(fp)
81139248:	00a045b4 	movhi	r2,33046
8113924c:	10a09304 	addi	r2,r2,-32180
81139250:	200891ba 	slli	r4,r4,6
81139254:	1105883a 	add	r2,r2,r4
81139258:	10800704 	addi	r2,r2,28
8113925c:	10800017 	ldw	r2,0(r2)
81139260:	113fff84 	addi	r4,r2,-2
81139264:	00a045b4 	movhi	r2,33046
81139268:	10a07e04 	addi	r2,r2,-32264
8113926c:	10800383 	ldbu	r2,14(r2)
81139270:	10803fcc 	andi	r2,r2,255
81139274:	2085383a 	mul	r2,r4,r2
81139278:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
8113927c:	e13ffe0f 	ldh	r4,-8(fp)
81139280:	00a045b4 	movhi	r2,33046
81139284:	10a09304 	addi	r2,r2,-32180
81139288:	200891ba 	slli	r4,r4,6
8113928c:	1105883a 	add	r2,r2,r4
81139290:	10800804 	addi	r2,r2,32
81139294:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81139298:	1885883a 	add	r2,r3,r2
8113929c:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
811392a0:	d0e09b17 	ldw	r3,-32148(gp)
811392a4:	e0bffb17 	ldw	r2,-20(fp)
811392a8:	1885883a 	add	r2,r3,r2
811392ac:	1007883a 	mov	r3,r2
811392b0:	d0a09f17 	ldw	r2,-32132(gp)
811392b4:	18800726 	beq	r3,r2,811392d4 <alt_up_sd_card_write+0x518>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
811392b8:	d0a09b17 	ldw	r2,-32148(gp)
811392bc:	100b883a 	mov	r5,r2
811392c0:	e13ffb17 	ldw	r4,-20(fp)
811392c4:	11352e80 	call	811352e8 <Read_Sector_Data>
811392c8:	1000021e 	bne	r2,zero,811392d4 <alt_up_sd_card_write+0x518>
                {
					return false;
811392cc:	0005883a 	mov	r2,zero
811392d0:	00003f06 	br	811393d0 <alt_up_sd_card_write+0x614>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
811392d4:	d0e09a17 	ldw	r3,-32152(gp)
811392d8:	e0bffc0f 	ldh	r2,-16(fp)
811392dc:	1885883a 	add	r2,r3,r2
811392e0:	e0ffff07 	ldb	r3,-4(fp)
811392e4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
811392e8:	e13ffe0f 	ldh	r4,-8(fp)
811392ec:	e0fffe0f 	ldh	r3,-8(fp)
811392f0:	00a045b4 	movhi	r2,33046
811392f4:	10a09304 	addi	r2,r2,-32180
811392f8:	180691ba 	slli	r3,r3,6
811392fc:	10c5883a 	add	r2,r2,r3
81139300:	10800904 	addi	r2,r2,36
81139304:	10800017 	ldw	r2,0(r2)
81139308:	10c00044 	addi	r3,r2,1
8113930c:	00a045b4 	movhi	r2,33046
81139310:	10a09304 	addi	r2,r2,-32180
81139314:	200891ba 	slli	r4,r4,6
81139318:	1105883a 	add	r2,r2,r4
8113931c:	10800904 	addi	r2,r2,36
81139320:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
81139324:	e0fffe0f 	ldh	r3,-8(fp)
81139328:	00a045b4 	movhi	r2,33046
8113932c:	10a09304 	addi	r2,r2,-32180
81139330:	180691ba 	slli	r3,r3,6
81139334:	10c5883a 	add	r2,r2,r3
81139338:	10800904 	addi	r2,r2,36
8113933c:	10c00017 	ldw	r3,0(r2)
81139340:	e13ffe0f 	ldh	r4,-8(fp)
81139344:	00a045b4 	movhi	r2,33046
81139348:	10a09304 	addi	r2,r2,-32180
8113934c:	200891ba 	slli	r4,r4,6
81139350:	1105883a 	add	r2,r2,r4
81139354:	10800604 	addi	r2,r2,24
81139358:	10800017 	ldw	r2,0(r2)
8113935c:	18801736 	bltu	r3,r2,811393bc <alt_up_sd_card_write+0x600>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
81139360:	e13ffe0f 	ldh	r4,-8(fp)
81139364:	e0fffe0f 	ldh	r3,-8(fp)
81139368:	00a045b4 	movhi	r2,33046
8113936c:	10a09304 	addi	r2,r2,-32180
81139370:	180691ba 	slli	r3,r3,6
81139374:	10c5883a 	add	r2,r2,r3
81139378:	10800604 	addi	r2,r2,24
8113937c:	10800017 	ldw	r2,0(r2)
81139380:	10c00044 	addi	r3,r2,1
81139384:	00a045b4 	movhi	r2,33046
81139388:	10a09304 	addi	r2,r2,-32180
8113938c:	200891ba 	slli	r4,r4,6
81139390:	1105883a 	add	r2,r2,r4
81139394:	10800604 	addi	r2,r2,24
81139398:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
8113939c:	e0fffe0f 	ldh	r3,-8(fp)
811393a0:	00a045b4 	movhi	r2,33046
811393a4:	10a09304 	addi	r2,r2,-32180
811393a8:	180691ba 	slli	r3,r3,6
811393ac:	10c5883a 	add	r2,r2,r3
811393b0:	10800e04 	addi	r2,r2,56
811393b4:	00c00044 	movi	r3,1
811393b8:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
811393bc:	00800044 	movi	r2,1
811393c0:	d0a09e15 	stw	r2,-32136(gp)
			result = true;
811393c4:	00800044 	movi	r2,1
811393c8:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
811393cc:	e0bffa17 	ldw	r2,-24(fp)
}
811393d0:	e037883a 	mov	sp,fp
811393d4:	dfc00117 	ldw	ra,4(sp)
811393d8:	df000017 	ldw	fp,0(sp)
811393dc:	dec00204 	addi	sp,sp,8
811393e0:	f800283a 	ret

811393e4 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
811393e4:	defffb04 	addi	sp,sp,-20
811393e8:	de00012e 	bgeu	sp,et,811393f0 <alt_up_sd_card_fclose+0xc>
811393ec:	003b68fa 	trap	3
811393f0:	dfc00415 	stw	ra,16(sp)
811393f4:	df000315 	stw	fp,12(sp)
811393f8:	df000304 	addi	fp,sp,12
811393fc:	2005883a 	mov	r2,r4
81139400:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
81139404:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81139408:	1137fc00 	call	81137fc0 <alt_up_sd_card_is_Present>
8113940c:	10006026 	beq	r2,zero,81139590 <alt_up_sd_card_fclose+0x1ac>
81139410:	d0a09417 	ldw	r2,-32176(gp)
81139414:	10005e26 	beq	r2,zero,81139590 <alt_up_sd_card_fclose+0x1ac>
    {
        if (active_files[file_handle].in_use) 
81139418:	e0ffff0f 	ldh	r3,-4(fp)
8113941c:	00a045b4 	movhi	r2,33046
81139420:	10a09304 	addi	r2,r2,-32180
81139424:	180691ba 	slli	r3,r3,6
81139428:	10c5883a 	add	r2,r2,r3
8113942c:	10800f04 	addi	r2,r2,60
81139430:	10800017 	ldw	r2,0(r2)
81139434:	10005626 	beq	r2,zero,81139590 <alt_up_sd_card_fclose+0x1ac>
        {
			if (active_files[file_handle].modified)
81139438:	e0ffff0f 	ldh	r3,-4(fp)
8113943c:	00a045b4 	movhi	r2,33046
81139440:	10a09304 	addi	r2,r2,-32180
81139444:	180691ba 	slli	r3,r3,6
81139448:	10c5883a 	add	r2,r2,r3
8113944c:	10800e04 	addi	r2,r2,56
81139450:	10800017 	ldw	r2,0(r2)
81139454:	10004526 	beq	r2,zero,8113956c <alt_up_sd_card_fclose+0x188>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
81139458:	e0ffff0f 	ldh	r3,-4(fp)
8113945c:	00a045b4 	movhi	r2,33046
81139460:	10a09304 	addi	r2,r2,-32180
81139464:	180691ba 	slli	r3,r3,6
81139468:	10c5883a 	add	r2,r2,r3
8113946c:	10800b04 	addi	r2,r2,44
81139470:	10800017 	ldw	r2,0(r2)
81139474:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
81139478:	e0ffff0f 	ldh	r3,-4(fp)
8113947c:	00a045b4 	movhi	r2,33046
81139480:	10a09304 	addi	r2,r2,-32180
81139484:	180691ba 	slli	r3,r3,6
81139488:	10c5883a 	add	r2,r2,r3
8113948c:	10800a04 	addi	r2,r2,40
81139490:	10800017 	ldw	r2,0(r2)
81139494:	1000071e 	bne	r2,zero,811394b4 <alt_up_sd_card_fclose+0xd0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
81139498:	00a045b4 	movhi	r2,33046
8113949c:	10a07e04 	addi	r2,r2,-32264
811394a0:	10801317 	ldw	r2,76(r2)
811394a4:	e0fffe17 	ldw	r3,-8(fp)
811394a8:	1885883a 	add	r2,r3,r2
811394ac:	e0bffe15 	stw	r2,-8(fp)
811394b0:	00001406 	br	81139504 <alt_up_sd_card_fclose+0x120>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
811394b4:	00a045b4 	movhi	r2,33046
811394b8:	10a07e04 	addi	r2,r2,-32264
811394bc:	10c01417 	ldw	r3,80(r2)
811394c0:	e0bffe17 	ldw	r2,-8(fp)
811394c4:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
811394c8:	e13fff0f 	ldh	r4,-4(fp)
811394cc:	00a045b4 	movhi	r2,33046
811394d0:	10a09304 	addi	r2,r2,-32180
811394d4:	200891ba 	slli	r4,r4,6
811394d8:	1105883a 	add	r2,r2,r4
811394dc:	10800a04 	addi	r2,r2,40
811394e0:	10800017 	ldw	r2,0(r2)
811394e4:	113fff84 	addi	r4,r2,-2
811394e8:	00a045b4 	movhi	r2,33046
811394ec:	10a07e04 	addi	r2,r2,-32264
811394f0:	10800383 	ldbu	r2,14(r2)
811394f4:	10803fcc 	andi	r2,r2,255
811394f8:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
811394fc:	1885883a 	add	r2,r3,r2
81139500:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
81139504:	e0bffe17 	ldw	r2,-8(fp)
81139508:	d0e09b17 	ldw	r3,-32148(gp)
8113950c:	180b883a 	mov	r5,r3
81139510:	1009883a 	mov	r4,r2
81139514:	11352e80 	call	811352e8 <Read_Sector_Data>
81139518:	10001426 	beq	r2,zero,8113956c <alt_up_sd_card_fclose+0x188>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
8113951c:	e0ffff0f 	ldh	r3,-4(fp)
81139520:	00a045b4 	movhi	r2,33046
81139524:	10a09304 	addi	r2,r2,-32180
81139528:	180691ba 	slli	r3,r3,6
8113952c:	10c5883a 	add	r2,r2,r3
81139530:	10800c04 	addi	r2,r2,48
81139534:	1080000b 	ldhu	r2,0(r2)
81139538:	113fffcc 	andi	r4,r2,65535
8113953c:	2120001c 	xori	r4,r4,32768
81139540:	21200004 	addi	r4,r4,-32768
81139544:	e0bfff0f 	ldh	r2,-4(fp)
81139548:	100691ba 	slli	r3,r2,6
8113954c:	00a045b4 	movhi	r2,33046
81139550:	10a09304 	addi	r2,r2,-32180
81139554:	1885883a 	add	r2,r3,r2
81139558:	100b883a 	mov	r5,r2
8113955c:	113599c0 	call	8113599c <Write_File_Record_At_Offset>
81139560:	10000226 	beq	r2,zero,8113956c <alt_up_sd_card_fclose+0x188>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
81139564:	11352940 	call	81135294 <Save_Modified_Sector>
81139568:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
8113956c:	e0ffff0f 	ldh	r3,-4(fp)
81139570:	00a045b4 	movhi	r2,33046
81139574:	10a09304 	addi	r2,r2,-32180
81139578:	180691ba 	slli	r3,r3,6
8113957c:	10c5883a 	add	r2,r2,r3
81139580:	10800f04 	addi	r2,r2,60
81139584:	10000015 	stw	zero,0(r2)
			result = true;
81139588:	00800044 	movi	r2,1
8113958c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
81139590:	e0bffd17 	ldw	r2,-12(fp)
}
81139594:	e037883a 	mov	sp,fp
81139598:	dfc00117 	ldw	ra,4(sp)
8113959c:	df000017 	ldw	fp,0(sp)
811395a0:	dec00204 	addi	sp,sp,8
811395a4:	f800283a 	ret

811395a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
811395a8:	defffa04 	addi	sp,sp,-24
811395ac:	de00012e 	bgeu	sp,et,811395b4 <altera_avalon_jtag_uart_read_fd+0xc>
811395b0:	003b68fa 	trap	3
811395b4:	dfc00515 	stw	ra,20(sp)
811395b8:	df000415 	stw	fp,16(sp)
811395bc:	df000404 	addi	fp,sp,16
811395c0:	e13ffd15 	stw	r4,-12(fp)
811395c4:	e17ffe15 	stw	r5,-8(fp)
811395c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811395cc:	e0bffd17 	ldw	r2,-12(fp)
811395d0:	10800017 	ldw	r2,0(r2)
811395d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
811395d8:	e0bffc17 	ldw	r2,-16(fp)
811395dc:	10c00a04 	addi	r3,r2,40
811395e0:	e0bffd17 	ldw	r2,-12(fp)
811395e4:	10800217 	ldw	r2,8(r2)
811395e8:	100f883a 	mov	r7,r2
811395ec:	e1bfff17 	ldw	r6,-4(fp)
811395f0:	e17ffe17 	ldw	r5,-8(fp)
811395f4:	1809883a 	mov	r4,r3
811395f8:	1139e2c0 	call	81139e2c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
811395fc:	e037883a 	mov	sp,fp
81139600:	dfc00117 	ldw	ra,4(sp)
81139604:	df000017 	ldw	fp,0(sp)
81139608:	dec00204 	addi	sp,sp,8
8113960c:	f800283a 	ret

81139610 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81139610:	defffa04 	addi	sp,sp,-24
81139614:	de00012e 	bgeu	sp,et,8113961c <altera_avalon_jtag_uart_write_fd+0xc>
81139618:	003b68fa 	trap	3
8113961c:	dfc00515 	stw	ra,20(sp)
81139620:	df000415 	stw	fp,16(sp)
81139624:	df000404 	addi	fp,sp,16
81139628:	e13ffd15 	stw	r4,-12(fp)
8113962c:	e17ffe15 	stw	r5,-8(fp)
81139630:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81139634:	e0bffd17 	ldw	r2,-12(fp)
81139638:	10800017 	ldw	r2,0(r2)
8113963c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81139640:	e0bffc17 	ldw	r2,-16(fp)
81139644:	10c00a04 	addi	r3,r2,40
81139648:	e0bffd17 	ldw	r2,-12(fp)
8113964c:	10800217 	ldw	r2,8(r2)
81139650:	100f883a 	mov	r7,r2
81139654:	e1bfff17 	ldw	r6,-4(fp)
81139658:	e17ffe17 	ldw	r5,-8(fp)
8113965c:	1809883a 	mov	r4,r3
81139660:	113a0f00 	call	8113a0f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
81139664:	e037883a 	mov	sp,fp
81139668:	dfc00117 	ldw	ra,4(sp)
8113966c:	df000017 	ldw	fp,0(sp)
81139670:	dec00204 	addi	sp,sp,8
81139674:	f800283a 	ret

81139678 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81139678:	defffc04 	addi	sp,sp,-16
8113967c:	de00012e 	bgeu	sp,et,81139684 <altera_avalon_jtag_uart_close_fd+0xc>
81139680:	003b68fa 	trap	3
81139684:	dfc00315 	stw	ra,12(sp)
81139688:	df000215 	stw	fp,8(sp)
8113968c:	df000204 	addi	fp,sp,8
81139690:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81139694:	e0bfff17 	ldw	r2,-4(fp)
81139698:	10800017 	ldw	r2,0(r2)
8113969c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
811396a0:	e0bffe17 	ldw	r2,-8(fp)
811396a4:	10c00a04 	addi	r3,r2,40
811396a8:	e0bfff17 	ldw	r2,-4(fp)
811396ac:	10800217 	ldw	r2,8(r2)
811396b0:	100b883a 	mov	r5,r2
811396b4:	1809883a 	mov	r4,r3
811396b8:	1139cc40 	call	81139cc4 <altera_avalon_jtag_uart_close>
}
811396bc:	e037883a 	mov	sp,fp
811396c0:	dfc00117 	ldw	ra,4(sp)
811396c4:	df000017 	ldw	fp,0(sp)
811396c8:	dec00204 	addi	sp,sp,8
811396cc:	f800283a 	ret

811396d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
811396d0:	defffa04 	addi	sp,sp,-24
811396d4:	de00012e 	bgeu	sp,et,811396dc <altera_avalon_jtag_uart_ioctl_fd+0xc>
811396d8:	003b68fa 	trap	3
811396dc:	dfc00515 	stw	ra,20(sp)
811396e0:	df000415 	stw	fp,16(sp)
811396e4:	df000404 	addi	fp,sp,16
811396e8:	e13ffd15 	stw	r4,-12(fp)
811396ec:	e17ffe15 	stw	r5,-8(fp)
811396f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
811396f4:	e0bffd17 	ldw	r2,-12(fp)
811396f8:	10800017 	ldw	r2,0(r2)
811396fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81139700:	e0bffc17 	ldw	r2,-16(fp)
81139704:	10800a04 	addi	r2,r2,40
81139708:	e1bfff17 	ldw	r6,-4(fp)
8113970c:	e17ffe17 	ldw	r5,-8(fp)
81139710:	1009883a 	mov	r4,r2
81139714:	1139d340 	call	81139d34 <altera_avalon_jtag_uart_ioctl>
}
81139718:	e037883a 	mov	sp,fp
8113971c:	dfc00117 	ldw	ra,4(sp)
81139720:	df000017 	ldw	fp,0(sp)
81139724:	dec00204 	addi	sp,sp,8
81139728:	f800283a 	ret

8113972c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8113972c:	deffef04 	addi	sp,sp,-68
81139730:	de00012e 	bgeu	sp,et,81139738 <altera_avalon_jtag_uart_init+0xc>
81139734:	003b68fa 	trap	3
81139738:	dfc01015 	stw	ra,64(sp)
8113973c:	df000f15 	stw	fp,60(sp)
81139740:	dc400e15 	stw	r17,56(sp)
81139744:	dc000d15 	stw	r16,52(sp)
81139748:	df000f04 	addi	fp,sp,60
8113974c:	e13ff715 	stw	r4,-36(fp)
81139750:	e17ff815 	stw	r5,-32(fp)
81139754:	e1bff915 	stw	r6,-28(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
81139758:	e0bff717 	ldw	r2,-36(fp)
8113975c:	10800c04 	addi	r2,r2,48
81139760:	e0bff215 	stw	r2,-56(fp)
81139764:	e03ff60d 	sth	zero,-40(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81139768:	e0bff60b 	ldhu	r2,-40(fp)
8113976c:	e0fff684 	addi	r3,fp,-38
81139770:	180b883a 	mov	r5,r3
81139774:	1009883a 	mov	r4,r2
81139778:	112d8fc0 	call	8112d8fc <OSFlagCreate>
8113977c:	1007883a 	mov	r3,r2
81139780:	e0bff217 	ldw	r2,-56(fp)
81139784:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
81139788:	e0bff717 	ldw	r2,-36(fp)
8113978c:	10800a04 	addi	r2,r2,40
81139790:	e0bff315 	stw	r2,-52(fp)
81139794:	00800044 	movi	r2,1
81139798:	e0bff58d 	sth	r2,-42(fp)
8113979c:	e0bff58b 	ldhu	r2,-42(fp)
811397a0:	1009883a 	mov	r4,r2
811397a4:	11318580 	call	81131858 <OSSemCreate>
811397a8:	1007883a 	mov	r3,r2
811397ac:	e0bff317 	ldw	r2,-52(fp)
811397b0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
811397b4:	e0bff717 	ldw	r2,-36(fp)
811397b8:	10800b04 	addi	r2,r2,44
811397bc:	e0bff415 	stw	r2,-48(fp)
811397c0:	00800044 	movi	r2,1
811397c4:	e0bff50d 	sth	r2,-44(fp)
811397c8:	e0bff50b 	ldhu	r2,-44(fp)
811397cc:	1009883a 	mov	r4,r2
811397d0:	11318580 	call	81131858 <OSSemCreate>
811397d4:	1007883a 	mov	r3,r2
811397d8:	e0bff417 	ldw	r2,-48(fp)
811397dc:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
811397e0:	e0bff717 	ldw	r2,-36(fp)
811397e4:	00c00044 	movi	r3,1
811397e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
811397ec:	e0bff717 	ldw	r2,-36(fp)
811397f0:	10800017 	ldw	r2,0(r2)
811397f4:	10800104 	addi	r2,r2,4
811397f8:	1007883a 	mov	r3,r2
811397fc:	e0bff717 	ldw	r2,-36(fp)
81139800:	10800817 	ldw	r2,32(r2)
81139804:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
81139808:	e0bff817 	ldw	r2,-32(fp)
8113980c:	e0fff917 	ldw	r3,-28(fp)
81139810:	d8000015 	stw	zero,0(sp)
81139814:	e1fff717 	ldw	r7,-36(fp)
81139818:	01a04534 	movhi	r6,33044
8113981c:	31a63f04 	addi	r6,r6,-26372
81139820:	180b883a 	mov	r5,r3
81139824:	1009883a 	mov	r4,r2
81139828:	113d7140 	call	8113d714 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8113982c:	e0bff717 	ldw	r2,-36(fp)
81139830:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
81139834:	e0bff717 	ldw	r2,-36(fp)
81139838:	10800204 	addi	r2,r2,8
8113983c:	d0e07217 	ldw	r3,-32312(gp)
81139840:	e1fff717 	ldw	r7,-36(fp)
81139844:	01a04534 	movhi	r6,33044
81139848:	31a6ee04 	addi	r6,r6,-25672
8113984c:	180b883a 	mov	r5,r3
81139850:	1009883a 	mov	r4,r2
81139854:	113d1940 	call	8113d194 <alt_alarm_start>
81139858:	1000040e 	bge	r2,zero,8113986c <altera_avalon_jtag_uart_init+0x140>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8113985c:	e0fff717 	ldw	r3,-36(fp)
81139860:	00a00034 	movhi	r2,32768
81139864:	10bfffc4 	addi	r2,r2,-1
81139868:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
8113986c:	d0a06b83 	ldbu	r2,-32338(gp)
81139870:	10803fcc 	andi	r2,r2,255
81139874:	10800058 	cmpnei	r2,r2,1
81139878:	10000f1e 	bne	r2,zero,811398b8 <altera_avalon_jtag_uart_init+0x18c>
8113987c:	d0e07217 	ldw	r3,-32312(gp)
81139880:	00b33374 	movhi	r2,52429
81139884:	10b33344 	addi	r2,r2,-13107
81139888:	1888383a 	mulxuu	r4,r3,r2
8113988c:	1885383a 	mul	r2,r3,r2
81139890:	1021883a 	mov	r16,r2
81139894:	2023883a 	mov	r17,r4
81139898:	8804d0fa 	srli	r2,r17,3
8113989c:	e1fff717 	ldw	r7,-36(fp)
811398a0:	01a044f4 	movhi	r6,33043
811398a4:	31a7da04 	addi	r6,r6,-24728
811398a8:	100b883a 	mov	r5,r2
811398ac:	01204574 	movhi	r4,33045
811398b0:	210c7004 	addi	r4,r4,12736
811398b4:	113d1940 	call	8113d194 <alt_alarm_start>
811398b8:	d0a06c03 	ldbu	r2,-32336(gp)
811398bc:	10803fcc 	andi	r2,r2,255
811398c0:	10800058 	cmpnei	r2,r2,1
811398c4:	1000051e 	bne	r2,zero,811398dc <altera_avalon_jtag_uart_init+0x1b0>
811398c8:	e0bff717 	ldw	r2,-36(fp)
811398cc:	10800017 	ldw	r2,0(r2)
811398d0:	100b883a 	mov	r5,r2
811398d4:	e13ff717 	ldw	r4,-36(fp)
811398d8:	112a1000 	call	8112a100 <alt_log_jtag_uart_startup_info>
}
811398dc:	0001883a 	nop
811398e0:	e6fffe04 	addi	sp,fp,-8
811398e4:	dfc00317 	ldw	ra,12(sp)
811398e8:	df000217 	ldw	fp,8(sp)
811398ec:	dc400117 	ldw	r17,4(sp)
811398f0:	dc000017 	ldw	r16,0(sp)
811398f4:	dec00404 	addi	sp,sp,16
811398f8:	f800283a 	ret

811398fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
811398fc:	defff204 	addi	sp,sp,-56
81139900:	de00012e 	bgeu	sp,et,81139908 <altera_avalon_jtag_uart_irq+0xc>
81139904:	003b68fa 	trap	3
81139908:	dfc00d15 	stw	ra,52(sp)
8113990c:	df000c15 	stw	fp,48(sp)
81139910:	df000c04 	addi	fp,sp,48
81139914:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81139918:	e0bfff17 	ldw	r2,-4(fp)
8113991c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
81139920:	e0bff617 	ldw	r2,-40(fp)
81139924:	10800017 	ldw	r2,0(r2)
81139928:	e0bff715 	stw	r2,-36(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
8113992c:	e0bff717 	ldw	r2,-36(fp)
81139930:	e17ff617 	ldw	r5,-40(fp)
81139934:	1009883a 	mov	r4,r2
81139938:	112a1540 	call	8112a154 <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8113993c:	e0bff717 	ldw	r2,-36(fp)
81139940:	10800104 	addi	r2,r2,4
81139944:	10800037 	ldwio	r2,0(r2)
81139948:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8113994c:	e0bff817 	ldw	r2,-32(fp)
81139950:	1080c00c 	andi	r2,r2,768
81139954:	10009126 	beq	r2,zero,81139b9c <altera_avalon_jtag_uart_irq+0x2a0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81139958:	e0bff817 	ldw	r2,-32(fp)
8113995c:	1080400c 	andi	r2,r2,256
81139960:	10004726 	beq	r2,zero,81139a80 <altera_avalon_jtag_uart_irq+0x184>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81139964:	00800074 	movhi	r2,1
81139968:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8113996c:	e0bff617 	ldw	r2,-40(fp)
81139970:	10800d17 	ldw	r2,52(r2)
81139974:	10800044 	addi	r2,r2,1
81139978:	1081ffcc 	andi	r2,r2,2047
8113997c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
81139980:	e0bff617 	ldw	r2,-40(fp)
81139984:	10c00e17 	ldw	r3,56(r2)
81139988:	e0bff917 	ldw	r2,-28(fp)
8113998c:	18802726 	beq	r3,r2,81139a2c <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
81139990:	e0bff717 	ldw	r2,-36(fp)
81139994:	10800037 	ldwio	r2,0(r2)
81139998:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
8113999c:	e0bff417 	ldw	r2,-48(fp)
811399a0:	10a0000c 	andi	r2,r2,32768
811399a4:	10002326 	beq	r2,zero,81139a34 <altera_avalon_jtag_uart_irq+0x138>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
811399a8:	e0bff617 	ldw	r2,-40(fp)
811399ac:	10800d17 	ldw	r2,52(r2)
811399b0:	e0fff417 	ldw	r3,-48(fp)
811399b4:	1809883a 	mov	r4,r3
811399b8:	e0fff617 	ldw	r3,-40(fp)
811399bc:	1885883a 	add	r2,r3,r2
811399c0:	10801104 	addi	r2,r2,68
811399c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811399c8:	e0bff617 	ldw	r2,-40(fp)
811399cc:	10800d17 	ldw	r2,52(r2)
811399d0:	10800044 	addi	r2,r2,1
811399d4:	10c1ffcc 	andi	r3,r2,2047
811399d8:	e0bff617 	ldw	r2,-40(fp)
811399dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
811399e0:	e0bff617 	ldw	r2,-40(fp)
811399e4:	10800c17 	ldw	r2,48(r2)
811399e8:	e0bffb15 	stw	r2,-20(fp)
811399ec:	00800044 	movi	r2,1
811399f0:	e0bffc0d 	sth	r2,-16(fp)
811399f4:	00800044 	movi	r2,1
811399f8:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
811399fc:	d0a07b03 	ldbu	r2,-32276(gp)
81139a00:	10803fcc 	andi	r2,r2,255
81139a04:	103fd926 	beq	r2,zero,8113996c <__reset+0xfb11996c>
  {
    OSFlagPost (group, flags, opt, &err);
81139a08:	e0bffc0b 	ldhu	r2,-16(fp)
81139a0c:	e0fffc83 	ldbu	r3,-14(fp)
81139a10:	e13ffdc4 	addi	r4,fp,-9
81139a14:	200f883a 	mov	r7,r4
81139a18:	180d883a 	mov	r6,r3
81139a1c:	100b883a 	mov	r5,r2
81139a20:	e13ffb17 	ldw	r4,-20(fp)
81139a24:	112e5080 	call	8112e508 <OSFlagPost>
      }
81139a28:	003fd006 	br	8113996c <__reset+0xfb11996c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81139a2c:	0001883a 	nop
81139a30:	00000106 	br	81139a38 <altera_avalon_jtag_uart_irq+0x13c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81139a34:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
81139a38:	e0bff417 	ldw	r2,-48(fp)
81139a3c:	10bfffec 	andhi	r2,r2,65535
81139a40:	10000f26 	beq	r2,zero,81139a80 <altera_avalon_jtag_uart_irq+0x184>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81139a44:	e0bff617 	ldw	r2,-40(fp)
81139a48:	10c00817 	ldw	r3,32(r2)
81139a4c:	00bfff84 	movi	r2,-2
81139a50:	1886703a 	and	r3,r3,r2
81139a54:	e0bff617 	ldw	r2,-40(fp)
81139a58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81139a5c:	e0bff717 	ldw	r2,-36(fp)
81139a60:	10800104 	addi	r2,r2,4
81139a64:	1007883a 	mov	r3,r2
81139a68:	e0bff617 	ldw	r2,-40(fp)
81139a6c:	10800817 	ldw	r2,32(r2)
81139a70:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81139a74:	e0bff717 	ldw	r2,-36(fp)
81139a78:	10800104 	addi	r2,r2,4
81139a7c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81139a80:	e0bff817 	ldw	r2,-32(fp)
81139a84:	1080800c 	andi	r2,r2,512
81139a88:	103fac26 	beq	r2,zero,8113993c <__reset+0xfb11993c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81139a8c:	e0bff817 	ldw	r2,-32(fp)
81139a90:	1004d43a 	srli	r2,r2,16
81139a94:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
81139a98:	00002606 	br	81139b34 <altera_avalon_jtag_uart_irq+0x238>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
81139a9c:	e0bff717 	ldw	r2,-36(fp)
81139aa0:	e0fff617 	ldw	r3,-40(fp)
81139aa4:	18c01017 	ldw	r3,64(r3)
81139aa8:	e13ff617 	ldw	r4,-40(fp)
81139aac:	20c7883a 	add	r3,r4,r3
81139ab0:	18c21104 	addi	r3,r3,2116
81139ab4:	18c00003 	ldbu	r3,0(r3)
81139ab8:	18c03fcc 	andi	r3,r3,255
81139abc:	18c0201c 	xori	r3,r3,128
81139ac0:	18ffe004 	addi	r3,r3,-128
81139ac4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81139ac8:	e0bff617 	ldw	r2,-40(fp)
81139acc:	10801017 	ldw	r2,64(r2)
81139ad0:	10800044 	addi	r2,r2,1
81139ad4:	10c1ffcc 	andi	r3,r2,2047
81139ad8:	e0bff617 	ldw	r2,-40(fp)
81139adc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
81139ae0:	e0bff617 	ldw	r2,-40(fp)
81139ae4:	10800c17 	ldw	r2,48(r2)
81139ae8:	e0bffa15 	stw	r2,-24(fp)
81139aec:	00800084 	movi	r2,2
81139af0:	e0bffd0d 	sth	r2,-12(fp)
81139af4:	00800044 	movi	r2,1
81139af8:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81139afc:	d0a07b03 	ldbu	r2,-32276(gp)
81139b00:	10803fcc 	andi	r2,r2,255
81139b04:	10000826 	beq	r2,zero,81139b28 <altera_avalon_jtag_uart_irq+0x22c>
  {
    OSFlagPost (group, flags, opt, &err);
81139b08:	e0bffd0b 	ldhu	r2,-12(fp)
81139b0c:	e0fffd83 	ldbu	r3,-10(fp)
81139b10:	e13ffe04 	addi	r4,fp,-8
81139b14:	200f883a 	mov	r7,r4
81139b18:	180d883a 	mov	r6,r3
81139b1c:	100b883a 	mov	r5,r2
81139b20:	e13ffa17 	ldw	r4,-24(fp)
81139b24:	112e5080 	call	8112e508 <OSFlagPost>

        space--;
81139b28:	e0bff517 	ldw	r2,-44(fp)
81139b2c:	10bfffc4 	addi	r2,r2,-1
81139b30:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
81139b34:	e0bff517 	ldw	r2,-44(fp)
81139b38:	10000526 	beq	r2,zero,81139b50 <altera_avalon_jtag_uart_irq+0x254>
81139b3c:	e0bff617 	ldw	r2,-40(fp)
81139b40:	10c01017 	ldw	r3,64(r2)
81139b44:	e0bff617 	ldw	r2,-40(fp)
81139b48:	10800f17 	ldw	r2,60(r2)
81139b4c:	18bfd31e 	bne	r3,r2,81139a9c <__reset+0xfb119a9c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
81139b50:	e0bff517 	ldw	r2,-44(fp)
81139b54:	103f7926 	beq	r2,zero,8113993c <__reset+0xfb11993c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81139b58:	e0bff617 	ldw	r2,-40(fp)
81139b5c:	10c00817 	ldw	r3,32(r2)
81139b60:	00bfff44 	movi	r2,-3
81139b64:	1886703a 	and	r3,r3,r2
81139b68:	e0bff617 	ldw	r2,-40(fp)
81139b6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81139b70:	e0bff617 	ldw	r2,-40(fp)
81139b74:	10800017 	ldw	r2,0(r2)
81139b78:	10800104 	addi	r2,r2,4
81139b7c:	1007883a 	mov	r3,r2
81139b80:	e0bff617 	ldw	r2,-40(fp)
81139b84:	10800817 	ldw	r2,32(r2)
81139b88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81139b8c:	e0bff717 	ldw	r2,-36(fp)
81139b90:	10800104 	addi	r2,r2,4
81139b94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81139b98:	003f6806 	br	8113993c <__reset+0xfb11993c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81139b9c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
81139ba0:	0001883a 	nop
81139ba4:	e037883a 	mov	sp,fp
81139ba8:	dfc00117 	ldw	ra,4(sp)
81139bac:	df000017 	ldw	fp,0(sp)
81139bb0:	dec00204 	addi	sp,sp,8
81139bb4:	f800283a 	ret

81139bb8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81139bb8:	defff904 	addi	sp,sp,-28
81139bbc:	de00012e 	bgeu	sp,et,81139bc4 <altera_avalon_jtag_uart_timeout+0xc>
81139bc0:	003b68fa 	trap	3
81139bc4:	dfc00615 	stw	ra,24(sp)
81139bc8:	df000515 	stw	fp,20(sp)
81139bcc:	df000504 	addi	fp,sp,20
81139bd0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81139bd4:	e0bfff17 	ldw	r2,-4(fp)
81139bd8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81139bdc:	e0bffb17 	ldw	r2,-20(fp)
81139be0:	10800017 	ldw	r2,0(r2)
81139be4:	10800104 	addi	r2,r2,4
81139be8:	10800037 	ldwio	r2,0(r2)
81139bec:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81139bf0:	e0bffc17 	ldw	r2,-16(fp)
81139bf4:	1081000c 	andi	r2,r2,1024
81139bf8:	10000b26 	beq	r2,zero,81139c28 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81139bfc:	e0bffb17 	ldw	r2,-20(fp)
81139c00:	10800017 	ldw	r2,0(r2)
81139c04:	10800104 	addi	r2,r2,4
81139c08:	1007883a 	mov	r3,r2
81139c0c:	e0bffb17 	ldw	r2,-20(fp)
81139c10:	10800817 	ldw	r2,32(r2)
81139c14:	10810014 	ori	r2,r2,1024
81139c18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
81139c1c:	e0bffb17 	ldw	r2,-20(fp)
81139c20:	10000915 	stw	zero,36(r2)
81139c24:	00002106 	br	81139cac <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
81139c28:	e0bffb17 	ldw	r2,-20(fp)
81139c2c:	10c00917 	ldw	r3,36(r2)
81139c30:	00a00034 	movhi	r2,32768
81139c34:	10bfff04 	addi	r2,r2,-4
81139c38:	10c01c36 	bltu	r2,r3,81139cac <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
81139c3c:	e0bffb17 	ldw	r2,-20(fp)
81139c40:	10800917 	ldw	r2,36(r2)
81139c44:	10c00044 	addi	r3,r2,1
81139c48:	e0bffb17 	ldw	r2,-20(fp)
81139c4c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
81139c50:	e0bffb17 	ldw	r2,-20(fp)
81139c54:	10c00917 	ldw	r3,36(r2)
81139c58:	e0bffb17 	ldw	r2,-20(fp)
81139c5c:	10800117 	ldw	r2,4(r2)
81139c60:	18801236 	bltu	r3,r2,81139cac <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
81139c64:	e0bffb17 	ldw	r2,-20(fp)
81139c68:	10800c17 	ldw	r2,48(r2)
81139c6c:	e0bffd15 	stw	r2,-12(fp)
81139c70:	00800104 	movi	r2,4
81139c74:	e0bffe0d 	sth	r2,-8(fp)
81139c78:	00800044 	movi	r2,1
81139c7c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81139c80:	d0a07b03 	ldbu	r2,-32276(gp)
81139c84:	10803fcc 	andi	r2,r2,255
81139c88:	10000826 	beq	r2,zero,81139cac <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
81139c8c:	e0bffe0b 	ldhu	r2,-8(fp)
81139c90:	e0fffe83 	ldbu	r3,-6(fp)
81139c94:	e13ffec4 	addi	r4,fp,-5
81139c98:	200f883a 	mov	r7,r4
81139c9c:	180d883a 	mov	r6,r3
81139ca0:	100b883a 	mov	r5,r2
81139ca4:	e13ffd17 	ldw	r4,-12(fp)
81139ca8:	112e5080 	call	8112e508 <OSFlagPost>
81139cac:	d0a07217 	ldw	r2,-32312(gp)
    }
  }

  return alt_ticks_per_second();
}
81139cb0:	e037883a 	mov	sp,fp
81139cb4:	dfc00117 	ldw	ra,4(sp)
81139cb8:	df000017 	ldw	fp,0(sp)
81139cbc:	dec00204 	addi	sp,sp,8
81139cc0:	f800283a 	ret

81139cc4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
81139cc4:	defffd04 	addi	sp,sp,-12
81139cc8:	de00012e 	bgeu	sp,et,81139cd0 <altera_avalon_jtag_uart_close+0xc>
81139ccc:	003b68fa 	trap	3
81139cd0:	df000215 	stw	fp,8(sp)
81139cd4:	df000204 	addi	fp,sp,8
81139cd8:	e13ffe15 	stw	r4,-8(fp)
81139cdc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81139ce0:	00000506 	br	81139cf8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81139ce4:	e0bfff17 	ldw	r2,-4(fp)
81139ce8:	1090000c 	andi	r2,r2,16384
81139cec:	10000226 	beq	r2,zero,81139cf8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
81139cf0:	00bffd44 	movi	r2,-11
81139cf4:	00000b06 	br	81139d24 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81139cf8:	e0bffe17 	ldw	r2,-8(fp)
81139cfc:	10c01017 	ldw	r3,64(r2)
81139d00:	e0bffe17 	ldw	r2,-8(fp)
81139d04:	10800f17 	ldw	r2,60(r2)
81139d08:	18800526 	beq	r3,r2,81139d20 <altera_avalon_jtag_uart_close+0x5c>
81139d0c:	e0bffe17 	ldw	r2,-8(fp)
81139d10:	10c00917 	ldw	r3,36(r2)
81139d14:	e0bffe17 	ldw	r2,-8(fp)
81139d18:	10800117 	ldw	r2,4(r2)
81139d1c:	18bff136 	bltu	r3,r2,81139ce4 <__reset+0xfb119ce4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81139d20:	0005883a 	mov	r2,zero
}
81139d24:	e037883a 	mov	sp,fp
81139d28:	df000017 	ldw	fp,0(sp)
81139d2c:	dec00104 	addi	sp,sp,4
81139d30:	f800283a 	ret

81139d34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81139d34:	defffa04 	addi	sp,sp,-24
81139d38:	de00012e 	bgeu	sp,et,81139d40 <altera_avalon_jtag_uart_ioctl+0xc>
81139d3c:	003b68fa 	trap	3
81139d40:	df000515 	stw	fp,20(sp)
81139d44:	df000504 	addi	fp,sp,20
81139d48:	e13ffd15 	stw	r4,-12(fp)
81139d4c:	e17ffe15 	stw	r5,-8(fp)
81139d50:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81139d54:	00bff9c4 	movi	r2,-25
81139d58:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81139d5c:	e0bffe17 	ldw	r2,-8(fp)
81139d60:	10da8060 	cmpeqi	r3,r2,27137
81139d64:	1800031e 	bne	r3,zero,81139d74 <altera_avalon_jtag_uart_ioctl+0x40>
81139d68:	109a80a0 	cmpeqi	r2,r2,27138
81139d6c:	1000181e 	bne	r2,zero,81139dd0 <altera_avalon_jtag_uart_ioctl+0x9c>
      rc = 0;
    }
    break;

  default:
    break;
81139d70:	00002906 	br	81139e18 <altera_avalon_jtag_uart_ioctl+0xe4>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
81139d74:	e0bffd17 	ldw	r2,-12(fp)
81139d78:	10c00117 	ldw	r3,4(r2)
81139d7c:	00a00034 	movhi	r2,32768
81139d80:	10bfffc4 	addi	r2,r2,-1
81139d84:	18802126 	beq	r3,r2,81139e0c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
81139d88:	e0bfff17 	ldw	r2,-4(fp)
81139d8c:	10800017 	ldw	r2,0(r2)
81139d90:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
81139d94:	e0bffc17 	ldw	r2,-16(fp)
81139d98:	10800090 	cmplti	r2,r2,2
81139d9c:	1000061e 	bne	r2,zero,81139db8 <altera_avalon_jtag_uart_ioctl+0x84>
81139da0:	e0fffc17 	ldw	r3,-16(fp)
81139da4:	00a00034 	movhi	r2,32768
81139da8:	10bfffc4 	addi	r2,r2,-1
81139dac:	18800226 	beq	r3,r2,81139db8 <altera_avalon_jtag_uart_ioctl+0x84>
81139db0:	e0bffc17 	ldw	r2,-16(fp)
81139db4:	00000206 	br	81139dc0 <altera_avalon_jtag_uart_ioctl+0x8c>
81139db8:	00a00034 	movhi	r2,32768
81139dbc:	10bfff84 	addi	r2,r2,-2
81139dc0:	e0fffd17 	ldw	r3,-12(fp)
81139dc4:	18800115 	stw	r2,4(r3)
      rc = 0;
81139dc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81139dcc:	00000f06 	br	81139e0c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
81139dd0:	e0bffd17 	ldw	r2,-12(fp)
81139dd4:	10c00117 	ldw	r3,4(r2)
81139dd8:	00a00034 	movhi	r2,32768
81139ddc:	10bfffc4 	addi	r2,r2,-1
81139de0:	18800c26 	beq	r3,r2,81139e14 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81139de4:	e0bffd17 	ldw	r2,-12(fp)
81139de8:	10c00917 	ldw	r3,36(r2)
81139dec:	e0bffd17 	ldw	r2,-12(fp)
81139df0:	10800117 	ldw	r2,4(r2)
81139df4:	1885803a 	cmpltu	r2,r3,r2
81139df8:	10c03fcc 	andi	r3,r2,255
81139dfc:	e0bfff17 	ldw	r2,-4(fp)
81139e00:	10c00015 	stw	r3,0(r2)
      rc = 0;
81139e04:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81139e08:	00000206 	br	81139e14 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81139e0c:	0001883a 	nop
81139e10:	00000106 	br	81139e18 <altera_avalon_jtag_uart_ioctl+0xe4>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81139e14:	0001883a 	nop

  default:
    break;
  }

  return rc;
81139e18:	e0bffb17 	ldw	r2,-20(fp)
}
81139e1c:	e037883a 	mov	sp,fp
81139e20:	df000017 	ldw	fp,0(sp)
81139e24:	dec00104 	addi	sp,sp,4
81139e28:	f800283a 	ret

81139e2c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81139e2c:	deffed04 	addi	sp,sp,-76
81139e30:	de00012e 	bgeu	sp,et,81139e38 <altera_avalon_jtag_uart_read+0xc>
81139e34:	003b68fa 	trap	3
81139e38:	dfc01215 	stw	ra,72(sp)
81139e3c:	df001115 	stw	fp,68(sp)
81139e40:	df001104 	addi	fp,sp,68
81139e44:	e13ffc15 	stw	r4,-16(fp)
81139e48:	e17ffd15 	stw	r5,-12(fp)
81139e4c:	e1bffe15 	stw	r6,-8(fp)
81139e50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81139e54:	e0bffd17 	ldw	r2,-12(fp)
81139e58:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
81139e5c:	e0bffc17 	ldw	r2,-16(fp)
81139e60:	10800a17 	ldw	r2,40(r2)
81139e64:	e0bff815 	stw	r2,-32(fp)
81139e68:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81139e6c:	e0bff90b 	ldhu	r2,-28(fp)
81139e70:	e0fffb04 	addi	r3,fp,-20
81139e74:	180d883a 	mov	r6,r3
81139e78:	100b883a 	mov	r5,r2
81139e7c:	e13ff817 	ldw	r4,-32(fp)
81139e80:	1131b800 	call	81131b80 <OSSemPend>

  while (space > 0)
81139e84:	00006106 	br	8113a00c <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81139e88:	e0bffc17 	ldw	r2,-16(fp)
81139e8c:	10800d17 	ldw	r2,52(r2)
81139e90:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
81139e94:	e0bffc17 	ldw	r2,-16(fp)
81139e98:	10800e17 	ldw	r2,56(r2)
81139e9c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
81139ea0:	e0fff317 	ldw	r3,-52(fp)
81139ea4:	e0bff417 	ldw	r2,-48(fp)
81139ea8:	18800536 	bltu	r3,r2,81139ec0 <altera_avalon_jtag_uart_read+0x94>
        n = in - out;
81139eac:	e0fff317 	ldw	r3,-52(fp)
81139eb0:	e0bff417 	ldw	r2,-48(fp)
81139eb4:	1885c83a 	sub	r2,r3,r2
81139eb8:	e0bff115 	stw	r2,-60(fp)
81139ebc:	00000406 	br	81139ed0 <altera_avalon_jtag_uart_read+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81139ec0:	00c20004 	movi	r3,2048
81139ec4:	e0bff417 	ldw	r2,-48(fp)
81139ec8:	1885c83a 	sub	r2,r3,r2
81139ecc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81139ed0:	e0bff117 	ldw	r2,-60(fp)
81139ed4:	10001e26 	beq	r2,zero,81139f50 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */

      if (n > space)
81139ed8:	e0fffe17 	ldw	r3,-8(fp)
81139edc:	e0bff117 	ldw	r2,-60(fp)
81139ee0:	1880022e 	bgeu	r3,r2,81139eec <altera_avalon_jtag_uart_read+0xc0>
        n = space;
81139ee4:	e0bffe17 	ldw	r2,-8(fp)
81139ee8:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81139eec:	e0bffc17 	ldw	r2,-16(fp)
81139ef0:	10c01104 	addi	r3,r2,68
81139ef4:	e0bff417 	ldw	r2,-48(fp)
81139ef8:	1885883a 	add	r2,r3,r2
81139efc:	e1bff117 	ldw	r6,-60(fp)
81139f00:	100b883a 	mov	r5,r2
81139f04:	e13ff017 	ldw	r4,-64(fp)
81139f08:	1114a700 	call	81114a70 <memcpy>
      ptr   += n;
81139f0c:	e0fff017 	ldw	r3,-64(fp)
81139f10:	e0bff117 	ldw	r2,-60(fp)
81139f14:	1885883a 	add	r2,r3,r2
81139f18:	e0bff015 	stw	r2,-64(fp)
      space -= n;
81139f1c:	e0fffe17 	ldw	r3,-8(fp)
81139f20:	e0bff117 	ldw	r2,-60(fp)
81139f24:	1885c83a 	sub	r2,r3,r2
81139f28:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81139f2c:	e0fff417 	ldw	r3,-48(fp)
81139f30:	e0bff117 	ldw	r2,-60(fp)
81139f34:	1885883a 	add	r2,r3,r2
81139f38:	10c1ffcc 	andi	r3,r2,2047
81139f3c:	e0bffc17 	ldw	r2,-16(fp)
81139f40:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
81139f44:	e0bffe17 	ldw	r2,-8(fp)
81139f48:	00bfcf16 	blt	zero,r2,81139e88 <__reset+0xfb119e88>
81139f4c:	00000106 	br	81139f54 <altera_avalon_jtag_uart_read+0x128>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81139f50:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81139f54:	e0fff017 	ldw	r3,-64(fp)
81139f58:	e0bffd17 	ldw	r2,-12(fp)
81139f5c:	18802e1e 	bne	r3,r2,8113a018 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81139f60:	e0bfff17 	ldw	r2,-4(fp)
81139f64:	1090000c 	andi	r2,r2,16384
81139f68:	10002d1e 	bne	r2,zero,8113a020 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
81139f6c:	d0a07b03 	ldbu	r2,-32276(gp)
81139f70:	10803fcc 	andi	r2,r2,255
81139f74:	10800058 	cmpnei	r2,r2,1
81139f78:	1000161e 	bne	r2,zero,81139fd4 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
81139f7c:	e0bffc17 	ldw	r2,-16(fp)
81139f80:	10800c17 	ldw	r2,48(r2)
81139f84:	e0bff215 	stw	r2,-56(fp)
81139f88:	00800144 	movi	r2,5
81139f8c:	e0bff98d 	sth	r2,-26(fp)
81139f90:	00bfe0c4 	movi	r2,-125
81139f94:	e0bffa05 	stb	r2,-24(fp)
81139f98:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81139f9c:	d0a07b03 	ldbu	r2,-32276(gp)
81139fa0:	10803fcc 	andi	r2,r2,255
81139fa4:	10001526 	beq	r2,zero,81139ffc <altera_avalon_jtag_uart_read+0x1d0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81139fa8:	e0fff98b 	ldhu	r3,-26(fp)
81139fac:	e13ffa03 	ldbu	r4,-24(fp)
81139fb0:	e17ffa8b 	ldhu	r5,-22(fp)
81139fb4:	e0bffb44 	addi	r2,fp,-19
81139fb8:	d8800015 	stw	r2,0(sp)
81139fbc:	280f883a 	mov	r7,r5
81139fc0:	200d883a 	mov	r6,r4
81139fc4:	180b883a 	mov	r5,r3
81139fc8:	e13ff217 	ldw	r4,-56(fp)
81139fcc:	112dee00 	call	8112dee0 <OSFlagPend>
81139fd0:	00000a06 	br	81139ffc <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81139fd4:	0001883a 	nop
81139fd8:	e0bffc17 	ldw	r2,-16(fp)
81139fdc:	10c00d17 	ldw	r3,52(r2)
81139fe0:	e0bff317 	ldw	r2,-52(fp)
81139fe4:	1880051e 	bne	r3,r2,81139ffc <altera_avalon_jtag_uart_read+0x1d0>
81139fe8:	e0bffc17 	ldw	r2,-16(fp)
81139fec:	10c00917 	ldw	r3,36(r2)
81139ff0:	e0bffc17 	ldw	r2,-16(fp)
81139ff4:	10800117 	ldw	r2,4(r2)
81139ff8:	18bff736 	bltu	r3,r2,81139fd8 <__reset+0xfb119fd8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81139ffc:	e0bffc17 	ldw	r2,-16(fp)
8113a000:	10c00d17 	ldw	r3,52(r2)
8113a004:	e0bff317 	ldw	r2,-52(fp)
8113a008:	18800726 	beq	r3,r2,8113a028 <altera_avalon_jtag_uart_read+0x1fc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8113a00c:	e0bffe17 	ldw	r2,-8(fp)
8113a010:	00bf9d16 	blt	zero,r2,81139e88 <__reset+0xfb119e88>
8113a014:	00000506 	br	8113a02c <altera_avalon_jtag_uart_read+0x200>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8113a018:	0001883a 	nop
8113a01c:	00000306 	br	8113a02c <altera_avalon_jtag_uart_read+0x200>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
8113a020:	0001883a 	nop
8113a024:	00000106 	br	8113a02c <altera_avalon_jtag_uart_read+0x200>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8113a028:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
8113a02c:	e0bffc17 	ldw	r2,-16(fp)
8113a030:	10800a17 	ldw	r2,40(r2)
8113a034:	1009883a 	mov	r4,r2
8113a038:	1131f080 	call	81131f08 <OSSemPost>

  if (ptr != buffer)
8113a03c:	e0fff017 	ldw	r3,-64(fp)
8113a040:	e0bffd17 	ldw	r2,-12(fp)
8113a044:	18801826 	beq	r3,r2,8113a0a8 <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a048:	0005303a 	rdctl	r2,status
8113a04c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a050:	e0fff717 	ldw	r3,-36(fp)
8113a054:	00bfff84 	movi	r2,-2
8113a058:	1884703a 	and	r2,r3,r2
8113a05c:	1001703a 	wrctl	status,r2
  
  return context;
8113a060:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
8113a064:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8113a068:	e0bffc17 	ldw	r2,-16(fp)
8113a06c:	10800817 	ldw	r2,32(r2)
8113a070:	10c00054 	ori	r3,r2,1
8113a074:	e0bffc17 	ldw	r2,-16(fp)
8113a078:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8113a07c:	e0bffc17 	ldw	r2,-16(fp)
8113a080:	10800017 	ldw	r2,0(r2)
8113a084:	10800104 	addi	r2,r2,4
8113a088:	1007883a 	mov	r3,r2
8113a08c:	e0bffc17 	ldw	r2,-16(fp)
8113a090:	10800817 	ldw	r2,32(r2)
8113a094:	18800035 	stwio	r2,0(r3)
8113a098:	e0bff617 	ldw	r2,-40(fp)
8113a09c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a0a0:	e0bff517 	ldw	r2,-44(fp)
8113a0a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8113a0a8:	e0fff017 	ldw	r3,-64(fp)
8113a0ac:	e0bffd17 	ldw	r2,-12(fp)
8113a0b0:	18800426 	beq	r3,r2,8113a0c4 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
8113a0b4:	e0fff017 	ldw	r3,-64(fp)
8113a0b8:	e0bffd17 	ldw	r2,-12(fp)
8113a0bc:	1885c83a 	sub	r2,r3,r2
8113a0c0:	00000606 	br	8113a0dc <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
8113a0c4:	e0bfff17 	ldw	r2,-4(fp)
8113a0c8:	1090000c 	andi	r2,r2,16384
8113a0cc:	10000226 	beq	r2,zero,8113a0d8 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
8113a0d0:	00bffd44 	movi	r2,-11
8113a0d4:	00000106 	br	8113a0dc <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
8113a0d8:	00bffec4 	movi	r2,-5
}
8113a0dc:	e037883a 	mov	sp,fp
8113a0e0:	dfc00117 	ldw	ra,4(sp)
8113a0e4:	df000017 	ldw	fp,0(sp)
8113a0e8:	dec00204 	addi	sp,sp,8
8113a0ec:	f800283a 	ret

8113a0f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
8113a0f0:	deffed04 	addi	sp,sp,-76
8113a0f4:	de00012e 	bgeu	sp,et,8113a0fc <altera_avalon_jtag_uart_write+0xc>
8113a0f8:	003b68fa 	trap	3
8113a0fc:	dfc01215 	stw	ra,72(sp)
8113a100:	df001115 	stw	fp,68(sp)
8113a104:	df001104 	addi	fp,sp,68
8113a108:	e13ffc15 	stw	r4,-16(fp)
8113a10c:	e17ffd15 	stw	r5,-12(fp)
8113a110:	e1bffe15 	stw	r6,-8(fp)
8113a114:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8113a118:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8113a11c:	e0bffd17 	ldw	r2,-12(fp)
8113a120:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
8113a124:	e0bffc17 	ldw	r2,-16(fp)
8113a128:	10800b17 	ldw	r2,44(r2)
8113a12c:	e0bff815 	stw	r2,-32(fp)
8113a130:	e03ff90d 	sth	zero,-28(fp)
8113a134:	e0bff90b 	ldhu	r2,-28(fp)
8113a138:	e0fffb44 	addi	r3,fp,-19
8113a13c:	180d883a 	mov	r6,r3
8113a140:	100b883a 	mov	r5,r2
8113a144:	e13ff817 	ldw	r4,-32(fp)
8113a148:	1131b800 	call	81131b80 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8113a14c:	00003706 	br	8113a22c <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
8113a150:	e0bffc17 	ldw	r2,-16(fp)
8113a154:	10800f17 	ldw	r2,60(r2)
8113a158:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
8113a15c:	e0bffc17 	ldw	r2,-16(fp)
8113a160:	10801017 	ldw	r2,64(r2)
8113a164:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
8113a168:	e0fff417 	ldw	r3,-48(fp)
8113a16c:	e0bff017 	ldw	r2,-64(fp)
8113a170:	1880062e 	bgeu	r3,r2,8113a18c <altera_avalon_jtag_uart_write+0x9c>
        n = out - 1 - in;
8113a174:	e0fff017 	ldw	r3,-64(fp)
8113a178:	e0bff417 	ldw	r2,-48(fp)
8113a17c:	1885c83a 	sub	r2,r3,r2
8113a180:	10bfffc4 	addi	r2,r2,-1
8113a184:	e0bff115 	stw	r2,-60(fp)
8113a188:	00000b06 	br	8113a1b8 <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
8113a18c:	e0bff017 	ldw	r2,-64(fp)
8113a190:	10000526 	beq	r2,zero,8113a1a8 <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
8113a194:	00c20004 	movi	r3,2048
8113a198:	e0bff417 	ldw	r2,-48(fp)
8113a19c:	1885c83a 	sub	r2,r3,r2
8113a1a0:	e0bff115 	stw	r2,-60(fp)
8113a1a4:	00000406 	br	8113a1b8 <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8113a1a8:	00c1ffc4 	movi	r3,2047
8113a1ac:	e0bff417 	ldw	r2,-48(fp)
8113a1b0:	1885c83a 	sub	r2,r3,r2
8113a1b4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
8113a1b8:	e0bff117 	ldw	r2,-60(fp)
8113a1bc:	10001e26 	beq	r2,zero,8113a238 <altera_avalon_jtag_uart_write+0x148>
        break;

      if (n > count)
8113a1c0:	e0fffe17 	ldw	r3,-8(fp)
8113a1c4:	e0bff117 	ldw	r2,-60(fp)
8113a1c8:	1880022e 	bgeu	r3,r2,8113a1d4 <altera_avalon_jtag_uart_write+0xe4>
        n = count;
8113a1cc:	e0bffe17 	ldw	r2,-8(fp)
8113a1d0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
8113a1d4:	e0bffc17 	ldw	r2,-16(fp)
8113a1d8:	10c21104 	addi	r3,r2,2116
8113a1dc:	e0bff417 	ldw	r2,-48(fp)
8113a1e0:	1885883a 	add	r2,r3,r2
8113a1e4:	e1bff117 	ldw	r6,-60(fp)
8113a1e8:	e17ffd17 	ldw	r5,-12(fp)
8113a1ec:	1009883a 	mov	r4,r2
8113a1f0:	1114a700 	call	81114a70 <memcpy>
      ptr   += n;
8113a1f4:	e0fffd17 	ldw	r3,-12(fp)
8113a1f8:	e0bff117 	ldw	r2,-60(fp)
8113a1fc:	1885883a 	add	r2,r3,r2
8113a200:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
8113a204:	e0fffe17 	ldw	r3,-8(fp)
8113a208:	e0bff117 	ldw	r2,-60(fp)
8113a20c:	1885c83a 	sub	r2,r3,r2
8113a210:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8113a214:	e0fff417 	ldw	r3,-48(fp)
8113a218:	e0bff117 	ldw	r2,-60(fp)
8113a21c:	1885883a 	add	r2,r3,r2
8113a220:	10c1ffcc 	andi	r3,r2,2047
8113a224:	e0bffc17 	ldw	r2,-16(fp)
8113a228:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
8113a22c:	e0bffe17 	ldw	r2,-8(fp)
8113a230:	00bfc716 	blt	zero,r2,8113a150 <__reset+0xfb11a150>
8113a234:	00000106 	br	8113a23c <altera_avalon_jtag_uart_write+0x14c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8113a238:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a23c:	0005303a 	rdctl	r2,status
8113a240:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a244:	e0fff717 	ldw	r3,-36(fp)
8113a248:	00bfff84 	movi	r2,-2
8113a24c:	1884703a 	and	r2,r3,r2
8113a250:	1001703a 	wrctl	status,r2
  
  return context;
8113a254:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8113a258:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8113a25c:	e0bffc17 	ldw	r2,-16(fp)
8113a260:	10800817 	ldw	r2,32(r2)
8113a264:	10c00094 	ori	r3,r2,2
8113a268:	e0bffc17 	ldw	r2,-16(fp)
8113a26c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8113a270:	e0bffc17 	ldw	r2,-16(fp)
8113a274:	10800017 	ldw	r2,0(r2)
8113a278:	10800104 	addi	r2,r2,4
8113a27c:	1007883a 	mov	r3,r2
8113a280:	e0bffc17 	ldw	r2,-16(fp)
8113a284:	10800817 	ldw	r2,32(r2)
8113a288:	18800035 	stwio	r2,0(r3)
8113a28c:	e0bff617 	ldw	r2,-40(fp)
8113a290:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a294:	e0bff317 	ldw	r2,-52(fp)
8113a298:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8113a29c:	e0bffe17 	ldw	r2,-8(fp)
8113a2a0:	00802a0e 	bge	zero,r2,8113a34c <altera_avalon_jtag_uart_write+0x25c>
    {
      if (flags & O_NONBLOCK)
8113a2a4:	e0bfff17 	ldw	r2,-4(fp)
8113a2a8:	1090000c 	andi	r2,r2,16384
8113a2ac:	10002a1e 	bne	r2,zero,8113a358 <altera_avalon_jtag_uart_write+0x268>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
8113a2b0:	d0a07b03 	ldbu	r2,-32276(gp)
8113a2b4:	10803fcc 	andi	r2,r2,255
8113a2b8:	10800058 	cmpnei	r2,r2,1
8113a2bc:	1000161e 	bne	r2,zero,8113a318 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
8113a2c0:	e0bffc17 	ldw	r2,-16(fp)
8113a2c4:	10800c17 	ldw	r2,48(r2)
8113a2c8:	e0bff515 	stw	r2,-44(fp)
8113a2cc:	00800184 	movi	r2,6
8113a2d0:	e0bff98d 	sth	r2,-26(fp)
8113a2d4:	00bfe0c4 	movi	r2,-125
8113a2d8:	e0bffa05 	stb	r2,-24(fp)
8113a2dc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8113a2e0:	d0a07b03 	ldbu	r2,-32276(gp)
8113a2e4:	10803fcc 	andi	r2,r2,255
8113a2e8:	10001526 	beq	r2,zero,8113a340 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113a2ec:	e0fff98b 	ldhu	r3,-26(fp)
8113a2f0:	e13ffa03 	ldbu	r4,-24(fp)
8113a2f4:	e17ffa8b 	ldhu	r5,-22(fp)
8113a2f8:	e0bffb04 	addi	r2,fp,-20
8113a2fc:	d8800015 	stw	r2,0(sp)
8113a300:	280f883a 	mov	r7,r5
8113a304:	200d883a 	mov	r6,r4
8113a308:	180b883a 	mov	r5,r3
8113a30c:	e13ff517 	ldw	r4,-44(fp)
8113a310:	112dee00 	call	8112dee0 <OSFlagPend>
8113a314:	00000a06 	br	8113a340 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8113a318:	0001883a 	nop
8113a31c:	e0bffc17 	ldw	r2,-16(fp)
8113a320:	10c01017 	ldw	r3,64(r2)
8113a324:	e0bff017 	ldw	r2,-64(fp)
8113a328:	1880051e 	bne	r3,r2,8113a340 <altera_avalon_jtag_uart_write+0x250>
8113a32c:	e0bffc17 	ldw	r2,-16(fp)
8113a330:	10c00917 	ldw	r3,36(r2)
8113a334:	e0bffc17 	ldw	r2,-16(fp)
8113a338:	10800117 	ldw	r2,4(r2)
8113a33c:	18bff736 	bltu	r3,r2,8113a31c <__reset+0xfb11a31c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8113a340:	e0bffc17 	ldw	r2,-16(fp)
8113a344:	10800917 	ldw	r2,36(r2)
8113a348:	1000051e 	bne	r2,zero,8113a360 <altera_avalon_jtag_uart_write+0x270>
         break;
    }
  }
  while (count > 0);
8113a34c:	e0bffe17 	ldw	r2,-8(fp)
8113a350:	00bfb616 	blt	zero,r2,8113a22c <__reset+0xfb11a22c>
8113a354:	00000306 	br	8113a364 <altera_avalon_jtag_uart_write+0x274>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8113a358:	0001883a 	nop
8113a35c:	00000106 	br	8113a364 <altera_avalon_jtag_uart_write+0x274>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
8113a360:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
8113a364:	e0bffc17 	ldw	r2,-16(fp)
8113a368:	10800b17 	ldw	r2,44(r2)
8113a36c:	1009883a 	mov	r4,r2
8113a370:	1131f080 	call	81131f08 <OSSemPost>

  if (ptr != start)
8113a374:	e0fffd17 	ldw	r3,-12(fp)
8113a378:	e0bff217 	ldw	r2,-56(fp)
8113a37c:	18800426 	beq	r3,r2,8113a390 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
8113a380:	e0fffd17 	ldw	r3,-12(fp)
8113a384:	e0bff217 	ldw	r2,-56(fp)
8113a388:	1885c83a 	sub	r2,r3,r2
8113a38c:	00000606 	br	8113a3a8 <altera_avalon_jtag_uart_write+0x2b8>
  else if (flags & O_NONBLOCK)
8113a390:	e0bfff17 	ldw	r2,-4(fp)
8113a394:	1090000c 	andi	r2,r2,16384
8113a398:	10000226 	beq	r2,zero,8113a3a4 <altera_avalon_jtag_uart_write+0x2b4>
    return -EWOULDBLOCK;
8113a39c:	00bffd44 	movi	r2,-11
8113a3a0:	00000106 	br	8113a3a8 <altera_avalon_jtag_uart_write+0x2b8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
8113a3a4:	00bffec4 	movi	r2,-5
}
8113a3a8:	e037883a 	mov	sp,fp
8113a3ac:	dfc00117 	ldw	ra,4(sp)
8113a3b0:	df000017 	ldw	fp,0(sp)
8113a3b4:	dec00204 	addi	sp,sp,8
8113a3b8:	f800283a 	ret

8113a3bc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8113a3bc:	defffa04 	addi	sp,sp,-24
8113a3c0:	de00012e 	bgeu	sp,et,8113a3c8 <alt_avalon_timer_sc_irq+0xc>
8113a3c4:	003b68fa 	trap	3
8113a3c8:	dfc00515 	stw	ra,20(sp)
8113a3cc:	df000415 	stw	fp,16(sp)
8113a3d0:	df000404 	addi	fp,sp,16
8113a3d4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
8113a3d8:	0007883a 	mov	r3,zero
8113a3dc:	e0bfff17 	ldw	r2,-4(fp)
8113a3e0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8113a3e4:	e0bfff17 	ldw	r2,-4(fp)
8113a3e8:	10800104 	addi	r2,r2,4
8113a3ec:	10800037 	ldwio	r2,0(r2)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();
8113a3f0:	112a2f80 	call	8112a2f8 <alt_log_system_clock>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a3f4:	0005303a 	rdctl	r2,status
8113a3f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a3fc:	e0fffd17 	ldw	r3,-12(fp)
8113a400:	00bfff84 	movi	r2,-2
8113a404:	1884703a 	and	r2,r3,r2
8113a408:	1001703a 	wrctl	status,r2
  
  return context;
8113a40c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8113a410:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
8113a414:	112abe80 	call	8112abe8 <alt_tick>
8113a418:	e0bffc17 	ldw	r2,-16(fp)
8113a41c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a420:	e0bffe17 	ldw	r2,-8(fp)
8113a424:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8113a428:	0001883a 	nop
8113a42c:	e037883a 	mov	sp,fp
8113a430:	dfc00117 	ldw	ra,4(sp)
8113a434:	df000017 	ldw	fp,0(sp)
8113a438:	dec00204 	addi	sp,sp,8
8113a43c:	f800283a 	ret

8113a440 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
8113a440:	defff804 	addi	sp,sp,-32
8113a444:	de00012e 	bgeu	sp,et,8113a44c <alt_avalon_timer_sc_init+0xc>
8113a448:	003b68fa 	trap	3
8113a44c:	dfc00715 	stw	ra,28(sp)
8113a450:	df000615 	stw	fp,24(sp)
8113a454:	df000604 	addi	fp,sp,24
8113a458:	e13ffc15 	stw	r4,-16(fp)
8113a45c:	e17ffd15 	stw	r5,-12(fp)
8113a460:	e1bffe15 	stw	r6,-8(fp)
8113a464:	e1ffff15 	stw	r7,-4(fp)
8113a468:	e0bfff17 	ldw	r2,-4(fp)
8113a46c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8113a470:	d0a07217 	ldw	r2,-32312(gp)
8113a474:	1000021e 	bne	r2,zero,8113a480 <alt_avalon_timer_sc_init+0x40>
  {
    _alt_tick_rate = nticks;
8113a478:	e0bffb17 	ldw	r2,-20(fp)
8113a47c:	d0a07215 	stw	r2,-32312(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8113a480:	e0bffc17 	ldw	r2,-16(fp)
8113a484:	10800104 	addi	r2,r2,4
8113a488:	00c001c4 	movi	r3,7
8113a48c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8113a490:	d8000015 	stw	zero,0(sp)
8113a494:	e1fffc17 	ldw	r7,-16(fp)
8113a498:	01a04534 	movhi	r6,33044
8113a49c:	31a8ef04 	addi	r6,r6,-23620
8113a4a0:	e17ffe17 	ldw	r5,-8(fp)
8113a4a4:	e13ffd17 	ldw	r4,-12(fp)
8113a4a8:	113d7140 	call	8113d714 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
8113a4ac:	0001883a 	nop
8113a4b0:	e037883a 	mov	sp,fp
8113a4b4:	dfc00117 	ldw	ra,4(sp)
8113a4b8:	df000017 	ldw	fp,0(sp)
8113a4bc:	dec00204 	addi	sp,sp,8
8113a4c0:	f800283a 	ret

8113a4c4 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8113a4c4:	defffa04 	addi	sp,sp,-24
8113a4c8:	de00012e 	bgeu	sp,et,8113a4d0 <altera_avalon_uart_read_fd+0xc>
8113a4cc:	003b68fa 	trap	3
8113a4d0:	dfc00515 	stw	ra,20(sp)
8113a4d4:	df000415 	stw	fp,16(sp)
8113a4d8:	df000404 	addi	fp,sp,16
8113a4dc:	e13ffd15 	stw	r4,-12(fp)
8113a4e0:	e17ffe15 	stw	r5,-8(fp)
8113a4e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113a4e8:	e0bffd17 	ldw	r2,-12(fp)
8113a4ec:	10800017 	ldw	r2,0(r2)
8113a4f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
8113a4f4:	e0bffc17 	ldw	r2,-16(fp)
8113a4f8:	10c00a04 	addi	r3,r2,40
8113a4fc:	e0bffd17 	ldw	r2,-12(fp)
8113a500:	10800217 	ldw	r2,8(r2)
8113a504:	100f883a 	mov	r7,r2
8113a508:	e1bfff17 	ldw	r6,-4(fp)
8113a50c:	e17ffe17 	ldw	r5,-8(fp)
8113a510:	1809883a 	mov	r4,r3
8113a514:	113ab840 	call	8113ab84 <altera_avalon_uart_read>
      fd->fd_flags);
}
8113a518:	e037883a 	mov	sp,fp
8113a51c:	dfc00117 	ldw	ra,4(sp)
8113a520:	df000017 	ldw	fp,0(sp)
8113a524:	dec00204 	addi	sp,sp,8
8113a528:	f800283a 	ret

8113a52c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8113a52c:	defffa04 	addi	sp,sp,-24
8113a530:	de00012e 	bgeu	sp,et,8113a538 <altera_avalon_uart_write_fd+0xc>
8113a534:	003b68fa 	trap	3
8113a538:	dfc00515 	stw	ra,20(sp)
8113a53c:	df000415 	stw	fp,16(sp)
8113a540:	df000404 	addi	fp,sp,16
8113a544:	e13ffd15 	stw	r4,-12(fp)
8113a548:	e17ffe15 	stw	r5,-8(fp)
8113a54c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113a550:	e0bffd17 	ldw	r2,-12(fp)
8113a554:	10800017 	ldw	r2,0(r2)
8113a558:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
8113a55c:	e0bffc17 	ldw	r2,-16(fp)
8113a560:	10c00a04 	addi	r3,r2,40
8113a564:	e0bffd17 	ldw	r2,-12(fp)
8113a568:	10800217 	ldw	r2,8(r2)
8113a56c:	100f883a 	mov	r7,r2
8113a570:	e1bfff17 	ldw	r6,-4(fp)
8113a574:	e17ffe17 	ldw	r5,-8(fp)
8113a578:	1809883a 	mov	r4,r3
8113a57c:	113ae380 	call	8113ae38 <altera_avalon_uart_write>
      fd->fd_flags);
}
8113a580:	e037883a 	mov	sp,fp
8113a584:	dfc00117 	ldw	ra,4(sp)
8113a588:	df000017 	ldw	fp,0(sp)
8113a58c:	dec00204 	addi	sp,sp,8
8113a590:	f800283a 	ret

8113a594 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
8113a594:	defffc04 	addi	sp,sp,-16
8113a598:	de00012e 	bgeu	sp,et,8113a5a0 <altera_avalon_uart_close_fd+0xc>
8113a59c:	003b68fa 	trap	3
8113a5a0:	dfc00315 	stw	ra,12(sp)
8113a5a4:	df000215 	stw	fp,8(sp)
8113a5a8:	df000204 	addi	fp,sp,8
8113a5ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113a5b0:	e0bfff17 	ldw	r2,-4(fp)
8113a5b4:	10800017 	ldw	r2,0(r2)
8113a5b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
8113a5bc:	e0bffe17 	ldw	r2,-8(fp)
8113a5c0:	10c00a04 	addi	r3,r2,40
8113a5c4:	e0bfff17 	ldw	r2,-4(fp)
8113a5c8:	10800217 	ldw	r2,8(r2)
8113a5cc:	100b883a 	mov	r5,r2
8113a5d0:	1809883a 	mov	r4,r3
8113a5d4:	113aae40 	call	8113aae4 <altera_avalon_uart_close>
}
8113a5d8:	e037883a 	mov	sp,fp
8113a5dc:	dfc00117 	ldw	ra,4(sp)
8113a5e0:	df000017 	ldw	fp,0(sp)
8113a5e4:	dec00204 	addi	sp,sp,8
8113a5e8:	f800283a 	ret

8113a5ec <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
8113a5ec:	defff304 	addi	sp,sp,-52
8113a5f0:	de00012e 	bgeu	sp,et,8113a5f8 <altera_avalon_uart_init+0xc>
8113a5f4:	003b68fa 	trap	3
8113a5f8:	dfc00c15 	stw	ra,48(sp)
8113a5fc:	df000b15 	stw	fp,44(sp)
8113a600:	df000b04 	addi	fp,sp,44
8113a604:	e13ffd15 	stw	r4,-12(fp)
8113a608:	e17ffe15 	stw	r5,-8(fp)
8113a60c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
8113a610:	e0bffd17 	ldw	r2,-12(fp)
8113a614:	10800017 	ldw	r2,0(r2)
8113a618:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8113a61c:	e0bffd17 	ldw	r2,-12(fp)
8113a620:	10800704 	addi	r2,r2,28
8113a624:	e0bffa15 	stw	r2,-24(fp)
8113a628:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
8113a62c:	e0bffb0b 	ldhu	r2,-20(fp)
8113a630:	e0fffc84 	addi	r3,fp,-14
8113a634:	180b883a 	mov	r5,r3
8113a638:	1009883a 	mov	r4,r2
8113a63c:	112d8fc0 	call	8112d8fc <OSFlagCreate>
8113a640:	1007883a 	mov	r3,r2
8113a644:	e0bffa17 	ldw	r2,-24(fp)
8113a648:	10c00015 	stw	r3,0(r2)
  return err;
8113a64c:	e0bffc83 	ldbu	r2,-14(fp)
8113a650:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8113a654:	1000241e 	bne	r2,zero,8113a6e8 <altera_avalon_uart_init+0xfc>
8113a658:	e0bffd17 	ldw	r2,-12(fp)
8113a65c:	10800804 	addi	r2,r2,32
8113a660:	e0bff715 	stw	r2,-36(fp)
8113a664:	00800044 	movi	r2,1
8113a668:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113a66c:	e0bffb8b 	ldhu	r2,-18(fp)
8113a670:	1009883a 	mov	r4,r2
8113a674:	11318580 	call	81131858 <OSSemCreate>
8113a678:	1007883a 	mov	r3,r2
8113a67c:	e0bff717 	ldw	r2,-36(fp)
8113a680:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113a684:	e0bff717 	ldw	r2,-36(fp)
8113a688:	10800017 	ldw	r2,0(r2)
8113a68c:	10000226 	beq	r2,zero,8113a698 <altera_avalon_uart_init+0xac>
8113a690:	0005883a 	mov	r2,zero
8113a694:	00000106 	br	8113a69c <altera_avalon_uart_init+0xb0>
8113a698:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8113a69c:	1000121e 	bne	r2,zero,8113a6e8 <altera_avalon_uart_init+0xfc>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
8113a6a0:	e0bffd17 	ldw	r2,-12(fp)
8113a6a4:	10800904 	addi	r2,r2,36
8113a6a8:	e0bff815 	stw	r2,-32(fp)
8113a6ac:	00800044 	movi	r2,1
8113a6b0:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113a6b4:	e0bffc0b 	ldhu	r2,-16(fp)
8113a6b8:	1009883a 	mov	r4,r2
8113a6bc:	11318580 	call	81131858 <OSSemCreate>
8113a6c0:	1007883a 	mov	r3,r2
8113a6c4:	e0bff817 	ldw	r2,-32(fp)
8113a6c8:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113a6cc:	e0bff817 	ldw	r2,-32(fp)
8113a6d0:	10800017 	ldw	r2,0(r2)
8113a6d4:	10000226 	beq	r2,zero,8113a6e0 <altera_avalon_uart_init+0xf4>
8113a6d8:	0005883a 	mov	r2,zero
8113a6dc:	00000106 	br	8113a6e4 <altera_avalon_uart_init+0xf8>
8113a6e0:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
8113a6e4:	10000226 	beq	r2,zero,8113a6f0 <altera_avalon_uart_init+0x104>
8113a6e8:	00800044 	movi	r2,1
8113a6ec:	00000106 	br	8113a6f4 <altera_avalon_uart_init+0x108>
8113a6f0:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
8113a6f4:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
8113a6f8:	e0bff917 	ldw	r2,-28(fp)
8113a6fc:	10000f1e 	bne	r2,zero,8113a73c <altera_avalon_uart_init+0x150>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
8113a700:	e0bffd17 	ldw	r2,-12(fp)
8113a704:	00c32004 	movi	r3,3200
8113a708:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
8113a70c:	e0bff617 	ldw	r2,-40(fp)
8113a710:	10800304 	addi	r2,r2,12
8113a714:	e0fffd17 	ldw	r3,-12(fp)
8113a718:	18c00117 	ldw	r3,4(r3)
8113a71c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
8113a720:	d8000015 	stw	zero,0(sp)
8113a724:	e1fffd17 	ldw	r7,-12(fp)
8113a728:	01a04534 	movhi	r6,33044
8113a72c:	31a9d504 	addi	r6,r6,-22700
8113a730:	e17fff17 	ldw	r5,-4(fp)
8113a734:	e13ffe17 	ldw	r4,-8(fp)
8113a738:	113d7140 	call	8113d714 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
8113a73c:	0001883a 	nop
8113a740:	e037883a 	mov	sp,fp
8113a744:	dfc00117 	ldw	ra,4(sp)
8113a748:	df000017 	ldw	fp,0(sp)
8113a74c:	dec00204 	addi	sp,sp,8
8113a750:	f800283a 	ret

8113a754 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
8113a754:	defffa04 	addi	sp,sp,-24
8113a758:	de00012e 	bgeu	sp,et,8113a760 <altera_avalon_uart_irq+0xc>
8113a75c:	003b68fa 	trap	3
8113a760:	dfc00515 	stw	ra,20(sp)
8113a764:	df000415 	stw	fp,16(sp)
8113a768:	df000404 	addi	fp,sp,16
8113a76c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
8113a770:	e0bfff17 	ldw	r2,-4(fp)
8113a774:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8113a778:	e0bffc17 	ldw	r2,-16(fp)
8113a77c:	10800017 	ldw	r2,0(r2)
8113a780:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
8113a784:	e0bffd17 	ldw	r2,-12(fp)
8113a788:	10800204 	addi	r2,r2,8
8113a78c:	10800037 	ldwio	r2,0(r2)
8113a790:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
8113a794:	e0bffd17 	ldw	r2,-12(fp)
8113a798:	10800204 	addi	r2,r2,8
8113a79c:	0007883a 	mov	r3,zero
8113a7a0:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
8113a7a4:	e0bffd17 	ldw	r2,-12(fp)
8113a7a8:	10800204 	addi	r2,r2,8
8113a7ac:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
8113a7b0:	e0bffe17 	ldw	r2,-8(fp)
8113a7b4:	1080200c 	andi	r2,r2,128
8113a7b8:	10000326 	beq	r2,zero,8113a7c8 <altera_avalon_uart_irq+0x74>
  {
    altera_avalon_uart_rxirq(sp, status);
8113a7bc:	e17ffe17 	ldw	r5,-8(fp)
8113a7c0:	e13ffc17 	ldw	r4,-16(fp)
8113a7c4:	113a7f80 	call	8113a7f8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
8113a7c8:	e0bffe17 	ldw	r2,-8(fp)
8113a7cc:	1081100c 	andi	r2,r2,1088
8113a7d0:	10000326 	beq	r2,zero,8113a7e0 <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
8113a7d4:	e17ffe17 	ldw	r5,-8(fp)
8113a7d8:	e13ffc17 	ldw	r4,-16(fp)
8113a7dc:	113a9380 	call	8113a938 <altera_avalon_uart_txirq>
  }
  

}
8113a7e0:	0001883a 	nop
8113a7e4:	e037883a 	mov	sp,fp
8113a7e8:	dfc00117 	ldw	ra,4(sp)
8113a7ec:	df000017 	ldw	fp,0(sp)
8113a7f0:	dec00204 	addi	sp,sp,8
8113a7f4:	f800283a 	ret

8113a7f8 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8113a7f8:	defff904 	addi	sp,sp,-28
8113a7fc:	de00012e 	bgeu	sp,et,8113a804 <altera_avalon_uart_rxirq+0xc>
8113a800:	003b68fa 	trap	3
8113a804:	dfc00615 	stw	ra,24(sp)
8113a808:	df000515 	stw	fp,20(sp)
8113a80c:	df000504 	addi	fp,sp,20
8113a810:	e13ffe15 	stw	r4,-8(fp)
8113a814:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
8113a818:	e0bfff17 	ldw	r2,-4(fp)
8113a81c:	108000cc 	andi	r2,r2,3
8113a820:	10003f1e 	bne	r2,zero,8113a920 <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
8113a824:	e0bffe17 	ldw	r2,-8(fp)
8113a828:	10c00317 	ldw	r3,12(r2)
8113a82c:	e0bffe17 	ldw	r2,-8(fp)
8113a830:	10800217 	ldw	r2,8(r2)
8113a834:	1880121e 	bne	r3,r2,8113a880 <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
8113a838:	e0bffe17 	ldw	r2,-8(fp)
8113a83c:	10800717 	ldw	r2,28(r2)
8113a840:	e0bffc15 	stw	r2,-16(fp)
8113a844:	00800044 	movi	r2,1
8113a848:	e0bffd0d 	sth	r2,-12(fp)
8113a84c:	00800044 	movi	r2,1
8113a850:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8113a854:	d0a07b03 	ldbu	r2,-32276(gp)
8113a858:	10803fcc 	andi	r2,r2,255
8113a85c:	10000826 	beq	r2,zero,8113a880 <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
8113a860:	e0bffd0b 	ldhu	r2,-12(fp)
8113a864:	e0fffd83 	ldbu	r3,-10(fp)
8113a868:	e13ffdc4 	addi	r4,fp,-9
8113a86c:	200f883a 	mov	r7,r4
8113a870:	180d883a 	mov	r6,r3
8113a874:	100b883a 	mov	r5,r2
8113a878:	e13ffc17 	ldw	r4,-16(fp)
8113a87c:	112e5080 	call	8112e508 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8113a880:	e0bffe17 	ldw	r2,-8(fp)
8113a884:	10800317 	ldw	r2,12(r2)
8113a888:	10800044 	addi	r2,r2,1
8113a88c:	10800fcc 	andi	r2,r2,63
8113a890:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
8113a894:	e0bffe17 	ldw	r2,-8(fp)
8113a898:	10800317 	ldw	r2,12(r2)
8113a89c:	e0fffe17 	ldw	r3,-8(fp)
8113a8a0:	18c00017 	ldw	r3,0(r3)
8113a8a4:	18c00037 	ldwio	r3,0(r3)
8113a8a8:	1809883a 	mov	r4,r3
8113a8ac:	e0fffe17 	ldw	r3,-8(fp)
8113a8b0:	1885883a 	add	r2,r3,r2
8113a8b4:	10800a04 	addi	r2,r2,40
8113a8b8:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
8113a8bc:	e0bffe17 	ldw	r2,-8(fp)
8113a8c0:	e0fffb17 	ldw	r3,-20(fp)
8113a8c4:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8113a8c8:	e0bffe17 	ldw	r2,-8(fp)
8113a8cc:	10800317 	ldw	r2,12(r2)
8113a8d0:	10800044 	addi	r2,r2,1
8113a8d4:	10800fcc 	andi	r2,r2,63
8113a8d8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
8113a8dc:	e0bffe17 	ldw	r2,-8(fp)
8113a8e0:	10c00217 	ldw	r3,8(r2)
8113a8e4:	e0bffb17 	ldw	r2,-20(fp)
8113a8e8:	18800e1e 	bne	r3,r2,8113a924 <altera_avalon_uart_rxirq+0x12c>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8113a8ec:	e0bffe17 	ldw	r2,-8(fp)
8113a8f0:	10c00117 	ldw	r3,4(r2)
8113a8f4:	00bfdfc4 	movi	r2,-129
8113a8f8:	1886703a 	and	r3,r3,r2
8113a8fc:	e0bffe17 	ldw	r2,-8(fp)
8113a900:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
8113a904:	e0bffe17 	ldw	r2,-8(fp)
8113a908:	10800017 	ldw	r2,0(r2)
8113a90c:	10800304 	addi	r2,r2,12
8113a910:	e0fffe17 	ldw	r3,-8(fp)
8113a914:	18c00117 	ldw	r3,4(r3)
8113a918:	10c00035 	stwio	r3,0(r2)
8113a91c:	00000106 	br	8113a924 <altera_avalon_uart_rxirq+0x12c>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
8113a920:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
8113a924:	e037883a 	mov	sp,fp
8113a928:	dfc00117 	ldw	ra,4(sp)
8113a92c:	df000017 	ldw	fp,0(sp)
8113a930:	dec00204 	addi	sp,sp,8
8113a934:	f800283a 	ret

8113a938 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8113a938:	defffa04 	addi	sp,sp,-24
8113a93c:	de00012e 	bgeu	sp,et,8113a944 <altera_avalon_uart_txirq+0xc>
8113a940:	003b68fa 	trap	3
8113a944:	dfc00515 	stw	ra,20(sp)
8113a948:	df000415 	stw	fp,16(sp)
8113a94c:	df000404 	addi	fp,sp,16
8113a950:	e13ffe15 	stw	r4,-8(fp)
8113a954:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
8113a958:	e0bffe17 	ldw	r2,-8(fp)
8113a95c:	10c00417 	ldw	r3,16(r2)
8113a960:	e0bffe17 	ldw	r2,-8(fp)
8113a964:	10800517 	ldw	r2,20(r2)
8113a968:	18804726 	beq	r3,r2,8113aa88 <altera_avalon_uart_txirq+0x150>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8113a96c:	e0bffe17 	ldw	r2,-8(fp)
8113a970:	10800617 	ldw	r2,24(r2)
8113a974:	1080008c 	andi	r2,r2,2
8113a978:	10000326 	beq	r2,zero,8113a988 <altera_avalon_uart_txirq+0x50>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8113a97c:	e0bfff17 	ldw	r2,-4(fp)
8113a980:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
8113a984:	10003226 	beq	r2,zero,8113aa50 <altera_avalon_uart_txirq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
8113a988:	e0bffe17 	ldw	r2,-8(fp)
8113a98c:	10c00417 	ldw	r3,16(r2)
8113a990:	e0bffe17 	ldw	r2,-8(fp)
8113a994:	10800517 	ldw	r2,20(r2)
8113a998:	10800044 	addi	r2,r2,1
8113a99c:	10800fcc 	andi	r2,r2,63
8113a9a0:	1880121e 	bne	r3,r2,8113a9ec <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
8113a9a4:	e0bffe17 	ldw	r2,-8(fp)
8113a9a8:	10800717 	ldw	r2,28(r2)
8113a9ac:	e0bffc15 	stw	r2,-16(fp)
8113a9b0:	00800084 	movi	r2,2
8113a9b4:	e0bffd0d 	sth	r2,-12(fp)
8113a9b8:	00800044 	movi	r2,1
8113a9bc:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8113a9c0:	d0a07b03 	ldbu	r2,-32276(gp)
8113a9c4:	10803fcc 	andi	r2,r2,255
8113a9c8:	10000826 	beq	r2,zero,8113a9ec <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
8113a9cc:	e0bffd0b 	ldhu	r2,-12(fp)
8113a9d0:	e0fffd83 	ldbu	r3,-10(fp)
8113a9d4:	e13ffdc4 	addi	r4,fp,-9
8113a9d8:	200f883a 	mov	r7,r4
8113a9dc:	180d883a 	mov	r6,r3
8113a9e0:	100b883a 	mov	r5,r2
8113a9e4:	e13ffc17 	ldw	r4,-16(fp)
8113a9e8:	112e5080 	call	8112e508 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
8113a9ec:	e0bffe17 	ldw	r2,-8(fp)
8113a9f0:	10800017 	ldw	r2,0(r2)
8113a9f4:	10800104 	addi	r2,r2,4
8113a9f8:	e0fffe17 	ldw	r3,-8(fp)
8113a9fc:	18c00417 	ldw	r3,16(r3)
8113aa00:	e13ffe17 	ldw	r4,-8(fp)
8113aa04:	20c7883a 	add	r3,r4,r3
8113aa08:	18c01a04 	addi	r3,r3,104
8113aa0c:	18c00003 	ldbu	r3,0(r3)
8113aa10:	18c03fcc 	andi	r3,r3,255
8113aa14:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
8113aa18:	e0bffe17 	ldw	r2,-8(fp)
8113aa1c:	10800417 	ldw	r2,16(r2)
8113aa20:	10800044 	addi	r2,r2,1
8113aa24:	e0fffe17 	ldw	r3,-8(fp)
8113aa28:	18800415 	stw	r2,16(r3)
8113aa2c:	10c00fcc 	andi	r3,r2,63
8113aa30:	e0bffe17 	ldw	r2,-8(fp)
8113aa34:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8113aa38:	e0bffe17 	ldw	r2,-8(fp)
8113aa3c:	10800117 	ldw	r2,4(r2)
8113aa40:	10c01014 	ori	r3,r2,64
8113aa44:	e0bffe17 	ldw	r2,-8(fp)
8113aa48:	10c00115 	stw	r3,4(r2)
8113aa4c:	00000e06 	br	8113aa88 <altera_avalon_uart_txirq+0x150>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
8113aa50:	e0bffe17 	ldw	r2,-8(fp)
8113aa54:	10800017 	ldw	r2,0(r2)
8113aa58:	10800204 	addi	r2,r2,8
8113aa5c:	10800037 	ldwio	r2,0(r2)
8113aa60:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
8113aa64:	e0bfff17 	ldw	r2,-4(fp)
8113aa68:	1082000c 	andi	r2,r2,2048
8113aa6c:	1000061e 	bne	r2,zero,8113aa88 <altera_avalon_uart_txirq+0x150>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8113aa70:	e0bffe17 	ldw	r2,-8(fp)
8113aa74:	10c00117 	ldw	r3,4(r2)
8113aa78:	00bfefc4 	movi	r2,-65
8113aa7c:	1886703a 	and	r3,r3,r2
8113aa80:	e0bffe17 	ldw	r2,-8(fp)
8113aa84:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
8113aa88:	e0bffe17 	ldw	r2,-8(fp)
8113aa8c:	10c00417 	ldw	r3,16(r2)
8113aa90:	e0bffe17 	ldw	r2,-8(fp)
8113aa94:	10800517 	ldw	r2,20(r2)
8113aa98:	1880061e 	bne	r3,r2,8113aab4 <altera_avalon_uart_txirq+0x17c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8113aa9c:	e0bffe17 	ldw	r2,-8(fp)
8113aaa0:	10c00117 	ldw	r3,4(r2)
8113aaa4:	00beefc4 	movi	r2,-1089
8113aaa8:	1886703a 	and	r3,r3,r2
8113aaac:	e0bffe17 	ldw	r2,-8(fp)
8113aab0:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113aab4:	e0bffe17 	ldw	r2,-8(fp)
8113aab8:	10800017 	ldw	r2,0(r2)
8113aabc:	10800304 	addi	r2,r2,12
8113aac0:	e0fffe17 	ldw	r3,-8(fp)
8113aac4:	18c00117 	ldw	r3,4(r3)
8113aac8:	10c00035 	stwio	r3,0(r2)
}
8113aacc:	0001883a 	nop
8113aad0:	e037883a 	mov	sp,fp
8113aad4:	dfc00117 	ldw	ra,4(sp)
8113aad8:	df000017 	ldw	fp,0(sp)
8113aadc:	dec00204 	addi	sp,sp,8
8113aae0:	f800283a 	ret

8113aae4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
8113aae4:	defffd04 	addi	sp,sp,-12
8113aae8:	de00012e 	bgeu	sp,et,8113aaf0 <altera_avalon_uart_close+0xc>
8113aaec:	003b68fa 	trap	3
8113aaf0:	df000215 	stw	fp,8(sp)
8113aaf4:	df000204 	addi	fp,sp,8
8113aaf8:	e13ffe15 	stw	r4,-8(fp)
8113aafc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8113ab00:	00000506 	br	8113ab18 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
8113ab04:	e0bfff17 	ldw	r2,-4(fp)
8113ab08:	1090000c 	andi	r2,r2,16384
8113ab0c:	10000226 	beq	r2,zero,8113ab18 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
8113ab10:	00bffd44 	movi	r2,-11
8113ab14:	00000606 	br	8113ab30 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8113ab18:	e0bffe17 	ldw	r2,-8(fp)
8113ab1c:	10c00417 	ldw	r3,16(r2)
8113ab20:	e0bffe17 	ldw	r2,-8(fp)
8113ab24:	10800517 	ldw	r2,20(r2)
8113ab28:	18bff61e 	bne	r3,r2,8113ab04 <__reset+0xfb11ab04>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8113ab2c:	0005883a 	mov	r2,zero
}
8113ab30:	e037883a 	mov	sp,fp
8113ab34:	df000017 	ldw	fp,0(sp)
8113ab38:	dec00104 	addi	sp,sp,4
8113ab3c:	f800283a 	ret

8113ab40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113ab40:	defffe04 	addi	sp,sp,-8
8113ab44:	de00012e 	bgeu	sp,et,8113ab4c <alt_get_errno+0xc>
8113ab48:	003b68fa 	trap	3
8113ab4c:	dfc00115 	stw	ra,4(sp)
8113ab50:	df000015 	stw	fp,0(sp)
8113ab54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113ab58:	d0a01017 	ldw	r2,-32704(gp)
8113ab5c:	10000326 	beq	r2,zero,8113ab6c <alt_get_errno+0x2c>
8113ab60:	d0a01017 	ldw	r2,-32704(gp)
8113ab64:	103ee83a 	callr	r2
8113ab68:	00000106 	br	8113ab70 <alt_get_errno+0x30>
8113ab6c:	d0a06204 	addi	r2,gp,-32376
}
8113ab70:	e037883a 	mov	sp,fp
8113ab74:	dfc00117 	ldw	ra,4(sp)
8113ab78:	df000017 	ldw	fp,0(sp)
8113ab7c:	dec00204 	addi	sp,sp,8
8113ab80:	f800283a 	ret

8113ab84 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
8113ab84:	deffec04 	addi	sp,sp,-80
8113ab88:	de00012e 	bgeu	sp,et,8113ab90 <altera_avalon_uart_read+0xc>
8113ab8c:	003b68fa 	trap	3
8113ab90:	dfc01315 	stw	ra,76(sp)
8113ab94:	df001215 	stw	fp,72(sp)
8113ab98:	df001204 	addi	fp,sp,72
8113ab9c:	e13ffc15 	stw	r4,-16(fp)
8113aba0:	e17ffd15 	stw	r5,-12(fp)
8113aba4:	e1bffe15 	stw	r6,-8(fp)
8113aba8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
8113abac:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
8113abb0:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
8113abb4:	e0bfff17 	ldw	r2,-4(fp)
8113abb8:	1090000c 	andi	r2,r2,16384
8113abbc:	1005003a 	cmpeq	r2,r2,zero
8113abc0:	10803fcc 	andi	r2,r2,255
8113abc4:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
8113abc8:	e0bffc17 	ldw	r2,-16(fp)
8113abcc:	10800817 	ldw	r2,32(r2)
8113abd0:	e0bff815 	stw	r2,-32(fp)
8113abd4:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8113abd8:	e0bff90b 	ldhu	r2,-28(fp)
8113abdc:	e0fffb44 	addi	r3,fp,-19
8113abe0:	180d883a 	mov	r6,r3
8113abe4:	100b883a 	mov	r5,r2
8113abe8:	e13ff817 	ldw	r4,-32(fp)
8113abec:	1131b800 	call	81131b80 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8113abf0:	00001306 	br	8113ac40 <altera_avalon_uart_read+0xbc>
    {
      count++;
8113abf4:	e0bff017 	ldw	r2,-64(fp)
8113abf8:	10800044 	addi	r2,r2,1
8113abfc:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8113ac00:	e0bffd17 	ldw	r2,-12(fp)
8113ac04:	10c00044 	addi	r3,r2,1
8113ac08:	e0fffd15 	stw	r3,-12(fp)
8113ac0c:	e0fffc17 	ldw	r3,-16(fp)
8113ac10:	18c00217 	ldw	r3,8(r3)
8113ac14:	e13ffc17 	ldw	r4,-16(fp)
8113ac18:	20c7883a 	add	r3,r4,r3
8113ac1c:	18c00a04 	addi	r3,r3,40
8113ac20:	18c00003 	ldbu	r3,0(r3)
8113ac24:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8113ac28:	e0bffc17 	ldw	r2,-16(fp)
8113ac2c:	10800217 	ldw	r2,8(r2)
8113ac30:	10800044 	addi	r2,r2,1
8113ac34:	10c00fcc 	andi	r3,r2,63
8113ac38:	e0bffc17 	ldw	r2,-16(fp)
8113ac3c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8113ac40:	e0fff017 	ldw	r3,-64(fp)
8113ac44:	e0bffe17 	ldw	r2,-8(fp)
8113ac48:	1880050e 	bge	r3,r2,8113ac60 <altera_avalon_uart_read+0xdc>
8113ac4c:	e0bffc17 	ldw	r2,-16(fp)
8113ac50:	10c00217 	ldw	r3,8(r2)
8113ac54:	e0bffc17 	ldw	r2,-16(fp)
8113ac58:	10800317 	ldw	r2,12(r2)
8113ac5c:	18bfe51e 	bne	r3,r2,8113abf4 <__reset+0xfb11abf4>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
8113ac60:	e0bff017 	ldw	r2,-64(fp)
8113ac64:	10003a1e 	bne	r2,zero,8113ad50 <altera_avalon_uart_read+0x1cc>
8113ac68:	e0bffc17 	ldw	r2,-16(fp)
8113ac6c:	10c00217 	ldw	r3,8(r2)
8113ac70:	e0bffc17 	ldw	r2,-16(fp)
8113ac74:	10800317 	ldw	r2,12(r2)
8113ac78:	1880351e 	bne	r3,r2,8113ad50 <altera_avalon_uart_read+0x1cc>
    {
      if (!block)
8113ac7c:	e0bff117 	ldw	r2,-60(fp)
8113ac80:	1000071e 	bne	r2,zero,8113aca0 <altera_avalon_uart_read+0x11c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
8113ac84:	113ab400 	call	8113ab40 <alt_get_errno>
8113ac88:	1007883a 	mov	r3,r2
8113ac8c:	008002c4 	movi	r2,11
8113ac90:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
8113ac94:	00800044 	movi	r2,1
8113ac98:	e0bfef05 	stb	r2,-68(fp)
        break;
8113ac9c:	00003006 	br	8113ad60 <altera_avalon_uart_read+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113aca0:	0005303a 	rdctl	r2,status
8113aca4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113aca8:	e0fff517 	ldw	r3,-44(fp)
8113acac:	00bfff84 	movi	r2,-2
8113acb0:	1884703a 	and	r2,r3,r2
8113acb4:	1001703a 	wrctl	status,r2
  
  return context;
8113acb8:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
8113acbc:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8113acc0:	e0bffc17 	ldw	r2,-16(fp)
8113acc4:	10800117 	ldw	r2,4(r2)
8113acc8:	10c02014 	ori	r3,r2,128
8113accc:	e0bffc17 	ldw	r2,-16(fp)
8113acd0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113acd4:	e0bffc17 	ldw	r2,-16(fp)
8113acd8:	10800017 	ldw	r2,0(r2)
8113acdc:	10800304 	addi	r2,r2,12
8113ace0:	e0fffc17 	ldw	r3,-16(fp)
8113ace4:	18c00117 	ldw	r3,4(r3)
8113ace8:	10c00035 	stwio	r3,0(r2)
8113acec:	e0bff417 	ldw	r2,-48(fp)
8113acf0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113acf4:	e0bff617 	ldw	r2,-40(fp)
8113acf8:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
8113acfc:	e0bffc17 	ldw	r2,-16(fp)
8113ad00:	10800717 	ldw	r2,28(r2)
8113ad04:	e0bff215 	stw	r2,-56(fp)
8113ad08:	00800044 	movi	r2,1
8113ad0c:	e0bff98d 	sth	r2,-26(fp)
8113ad10:	00bfe0c4 	movi	r2,-125
8113ad14:	e0bffa05 	stb	r2,-24(fp)
8113ad18:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8113ad1c:	d0a07b03 	ldbu	r2,-32276(gp)
8113ad20:	10803fcc 	andi	r2,r2,255
8113ad24:	10000a26 	beq	r2,zero,8113ad50 <altera_avalon_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113ad28:	e0fff98b 	ldhu	r3,-26(fp)
8113ad2c:	e13ffa03 	ldbu	r4,-24(fp)
8113ad30:	e17ffa8b 	ldhu	r5,-22(fp)
8113ad34:	e0bffb04 	addi	r2,fp,-20
8113ad38:	d8800015 	stw	r2,0(sp)
8113ad3c:	280f883a 	mov	r7,r5
8113ad40:	200d883a 	mov	r6,r4
8113ad44:	180b883a 	mov	r5,r3
8113ad48:	e13ff217 	ldw	r4,-56(fp)
8113ad4c:	112dee00 	call	8112dee0 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
8113ad50:	e0bff017 	ldw	r2,-64(fp)
8113ad54:	1000021e 	bne	r2,zero,8113ad60 <altera_avalon_uart_read+0x1dc>
8113ad58:	e0bffe17 	ldw	r2,-8(fp)
8113ad5c:	103fb81e 	bne	r2,zero,8113ac40 <__reset+0xfb11ac40>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
8113ad60:	e0bffc17 	ldw	r2,-16(fp)
8113ad64:	10800817 	ldw	r2,32(r2)
8113ad68:	1009883a 	mov	r4,r2
8113ad6c:	1131f080 	call	81131f08 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113ad70:	0005303a 	rdctl	r2,status
8113ad74:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113ad78:	e0fff717 	ldw	r3,-36(fp)
8113ad7c:	00bfff84 	movi	r2,-2
8113ad80:	1884703a 	and	r2,r3,r2
8113ad84:	1001703a 	wrctl	status,r2
  
  return context;
8113ad88:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
8113ad8c:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8113ad90:	e0bffc17 	ldw	r2,-16(fp)
8113ad94:	10800117 	ldw	r2,4(r2)
8113ad98:	10c02014 	ori	r3,r2,128
8113ad9c:	e0bffc17 	ldw	r2,-16(fp)
8113ada0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113ada4:	e0bffc17 	ldw	r2,-16(fp)
8113ada8:	10800017 	ldw	r2,0(r2)
8113adac:	10800304 	addi	r2,r2,12
8113adb0:	e0fffc17 	ldw	r3,-16(fp)
8113adb4:	18c00117 	ldw	r3,4(r3)
8113adb8:	10c00035 	stwio	r3,0(r2)
8113adbc:	e0bff417 	ldw	r2,-48(fp)
8113adc0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113adc4:	e0bff317 	ldw	r2,-52(fp)
8113adc8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
8113adcc:	e0bfef03 	ldbu	r2,-68(fp)
8113add0:	10000226 	beq	r2,zero,8113addc <altera_avalon_uart_read+0x258>
    return -EWOULDBLOCK;
8113add4:	00bffd44 	movi	r2,-11
8113add8:	00000106 	br	8113ade0 <altera_avalon_uart_read+0x25c>
  }
  else {
    return count;
8113addc:	e0bff017 	ldw	r2,-64(fp)
  }
}
8113ade0:	e037883a 	mov	sp,fp
8113ade4:	dfc00117 	ldw	ra,4(sp)
8113ade8:	df000017 	ldw	fp,0(sp)
8113adec:	dec00204 	addi	sp,sp,8
8113adf0:	f800283a 	ret

8113adf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113adf4:	defffe04 	addi	sp,sp,-8
8113adf8:	de00012e 	bgeu	sp,et,8113ae00 <alt_get_errno+0xc>
8113adfc:	003b68fa 	trap	3
8113ae00:	dfc00115 	stw	ra,4(sp)
8113ae04:	df000015 	stw	fp,0(sp)
8113ae08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113ae0c:	d0a01017 	ldw	r2,-32704(gp)
8113ae10:	10000326 	beq	r2,zero,8113ae20 <alt_get_errno+0x2c>
8113ae14:	d0a01017 	ldw	r2,-32704(gp)
8113ae18:	103ee83a 	callr	r2
8113ae1c:	00000106 	br	8113ae24 <alt_get_errno+0x30>
8113ae20:	d0a06204 	addi	r2,gp,-32376
}
8113ae24:	e037883a 	mov	sp,fp
8113ae28:	dfc00117 	ldw	ra,4(sp)
8113ae2c:	df000017 	ldw	fp,0(sp)
8113ae30:	dec00204 	addi	sp,sp,8
8113ae34:	f800283a 	ret

8113ae38 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8113ae38:	deffec04 	addi	sp,sp,-80
8113ae3c:	de00012e 	bgeu	sp,et,8113ae44 <altera_avalon_uart_write+0xc>
8113ae40:	003b68fa 	trap	3
8113ae44:	dfc01315 	stw	ra,76(sp)
8113ae48:	df001215 	stw	fp,72(sp)
8113ae4c:	df001204 	addi	fp,sp,72
8113ae50:	e13ffc15 	stw	r4,-16(fp)
8113ae54:	e17ffd15 	stw	r5,-12(fp)
8113ae58:	e1bffe15 	stw	r6,-8(fp)
8113ae5c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
8113ae60:	e0bffe17 	ldw	r2,-8(fp)
8113ae64:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8113ae68:	e0bfff17 	ldw	r2,-4(fp)
8113ae6c:	1090000c 	andi	r2,r2,16384
8113ae70:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
8113ae74:	e0bffc17 	ldw	r2,-16(fp)
8113ae78:	10800917 	ldw	r2,36(r2)
8113ae7c:	e0bff815 	stw	r2,-32(fp)
8113ae80:	e03ff90d 	sth	zero,-28(fp)
8113ae84:	e0bff90b 	ldhu	r2,-28(fp)
8113ae88:	e0fffb44 	addi	r3,fp,-19
8113ae8c:	180d883a 	mov	r6,r3
8113ae90:	100b883a 	mov	r5,r2
8113ae94:	e13ff817 	ldw	r4,-32(fp)
8113ae98:	1131b800 	call	81131b80 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8113ae9c:	00005106 	br	8113afe4 <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8113aea0:	e0bffc17 	ldw	r2,-16(fp)
8113aea4:	10800517 	ldw	r2,20(r2)
8113aea8:	10800044 	addi	r2,r2,1
8113aeac:	10800fcc 	andi	r2,r2,63
8113aeb0:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
8113aeb4:	e0bffc17 	ldw	r2,-16(fp)
8113aeb8:	10c00417 	ldw	r3,16(r2)
8113aebc:	e0bff217 	ldw	r2,-56(fp)
8113aec0:	1880371e 	bne	r3,r2,8113afa0 <altera_avalon_uart_write+0x168>
    {
      if (no_block)
8113aec4:	e0bff017 	ldw	r2,-64(fp)
8113aec8:	10000526 	beq	r2,zero,8113aee0 <altera_avalon_uart_write+0xa8>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
8113aecc:	113adf40 	call	8113adf4 <alt_get_errno>
8113aed0:	1007883a 	mov	r3,r2
8113aed4:	008002c4 	movi	r2,11
8113aed8:	18800015 	stw	r2,0(r3)
        break;
8113aedc:	00004306 	br	8113afec <altera_avalon_uart_write+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113aee0:	0005303a 	rdctl	r2,status
8113aee4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113aee8:	e0fff517 	ldw	r3,-44(fp)
8113aeec:	00bfff84 	movi	r2,-2
8113aef0:	1884703a 	and	r2,r3,r2
8113aef4:	1001703a 	wrctl	status,r2
  
  return context;
8113aef8:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
8113aefc:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8113af00:	e0bffc17 	ldw	r2,-16(fp)
8113af04:	10800117 	ldw	r2,4(r2)
8113af08:	10c11014 	ori	r3,r2,1088
8113af0c:	e0bffc17 	ldw	r2,-16(fp)
8113af10:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113af14:	e0bffc17 	ldw	r2,-16(fp)
8113af18:	10800017 	ldw	r2,0(r2)
8113af1c:	10800304 	addi	r2,r2,12
8113af20:	e0fffc17 	ldw	r3,-16(fp)
8113af24:	18c00117 	ldw	r3,4(r3)
8113af28:	10c00035 	stwio	r3,0(r2)
8113af2c:	e0bff417 	ldw	r2,-48(fp)
8113af30:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113af34:	e0bff117 	ldw	r2,-60(fp)
8113af38:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
8113af3c:	e0bffc17 	ldw	r2,-16(fp)
8113af40:	10800717 	ldw	r2,28(r2)
8113af44:	e0bff315 	stw	r2,-52(fp)
8113af48:	00800084 	movi	r2,2
8113af4c:	e0bff98d 	sth	r2,-26(fp)
8113af50:	00bfe0c4 	movi	r2,-125
8113af54:	e0bffa05 	stb	r2,-24(fp)
8113af58:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8113af5c:	d0a07b03 	ldbu	r2,-32276(gp)
8113af60:	10803fcc 	andi	r2,r2,255
8113af64:	10000a26 	beq	r2,zero,8113af90 <altera_avalon_uart_write+0x158>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113af68:	e0fff98b 	ldhu	r3,-26(fp)
8113af6c:	e13ffa03 	ldbu	r4,-24(fp)
8113af70:	e17ffa8b 	ldhu	r5,-22(fp)
8113af74:	e0bffb04 	addi	r2,fp,-20
8113af78:	d8800015 	stw	r2,0(sp)
8113af7c:	280f883a 	mov	r7,r5
8113af80:	200d883a 	mov	r6,r4
8113af84:	180b883a 	mov	r5,r3
8113af88:	e13ff317 	ldw	r4,-52(fp)
8113af8c:	112dee00 	call	8112dee0 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8113af90:	e0bffc17 	ldw	r2,-16(fp)
8113af94:	10c00417 	ldw	r3,16(r2)
8113af98:	e0bff217 	ldw	r2,-56(fp)
8113af9c:	18bfe726 	beq	r3,r2,8113af3c <__reset+0xfb11af3c>
      }
    }

    count--;
8113afa0:	e0bfef17 	ldw	r2,-68(fp)
8113afa4:	10bfffc4 	addi	r2,r2,-1
8113afa8:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
8113afac:	e0bffc17 	ldw	r2,-16(fp)
8113afb0:	10c00517 	ldw	r3,20(r2)
8113afb4:	e0bffd17 	ldw	r2,-12(fp)
8113afb8:	11000044 	addi	r4,r2,1
8113afbc:	e13ffd15 	stw	r4,-12(fp)
8113afc0:	10800003 	ldbu	r2,0(r2)
8113afc4:	1009883a 	mov	r4,r2
8113afc8:	e0bffc17 	ldw	r2,-16(fp)
8113afcc:	10c5883a 	add	r2,r2,r3
8113afd0:	10801a04 	addi	r2,r2,104
8113afd4:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
8113afd8:	e0bffc17 	ldw	r2,-16(fp)
8113afdc:	e0fff217 	ldw	r3,-56(fp)
8113afe0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
8113afe4:	e0bfef17 	ldw	r2,-68(fp)
8113afe8:	103fad1e 	bne	r2,zero,8113aea0 <__reset+0xfb11aea0>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
8113afec:	e0bffc17 	ldw	r2,-16(fp)
8113aff0:	10800917 	ldw	r2,36(r2)
8113aff4:	1009883a 	mov	r4,r2
8113aff8:	1131f080 	call	81131f08 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113affc:	0005303a 	rdctl	r2,status
8113b000:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b004:	e0fff717 	ldw	r3,-36(fp)
8113b008:	00bfff84 	movi	r2,-2
8113b00c:	1884703a 	and	r2,r3,r2
8113b010:	1001703a 	wrctl	status,r2
  
  return context;
8113b014:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8113b018:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8113b01c:	e0bffc17 	ldw	r2,-16(fp)
8113b020:	10800117 	ldw	r2,4(r2)
8113b024:	10c11014 	ori	r3,r2,1088
8113b028:	e0bffc17 	ldw	r2,-16(fp)
8113b02c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
8113b030:	e0bffc17 	ldw	r2,-16(fp)
8113b034:	10800017 	ldw	r2,0(r2)
8113b038:	10800304 	addi	r2,r2,12
8113b03c:	e0fffc17 	ldw	r3,-16(fp)
8113b040:	18c00117 	ldw	r3,4(r3)
8113b044:	10c00035 	stwio	r3,0(r2)
8113b048:	e0bff417 	ldw	r2,-48(fp)
8113b04c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b050:	e0bff617 	ldw	r2,-40(fp)
8113b054:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8113b058:	e0fffe17 	ldw	r3,-8(fp)
8113b05c:	e0bfef17 	ldw	r2,-68(fp)
8113b060:	1885c83a 	sub	r2,r3,r2
}
8113b064:	e037883a 	mov	sp,fp
8113b068:	dfc00117 	ldw	ra,4(sp)
8113b06c:	df000017 	ldw	fp,0(sp)
8113b070:	dec00204 	addi	sp,sp,8
8113b074:	f800283a 	ret

8113b078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113b078:	defffe04 	addi	sp,sp,-8
8113b07c:	de00012e 	bgeu	sp,et,8113b084 <alt_get_errno+0xc>
8113b080:	003b68fa 	trap	3
8113b084:	dfc00115 	stw	ra,4(sp)
8113b088:	df000015 	stw	fp,0(sp)
8113b08c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113b090:	d0a01017 	ldw	r2,-32704(gp)
8113b094:	10000326 	beq	r2,zero,8113b0a4 <alt_get_errno+0x2c>
8113b098:	d0a01017 	ldw	r2,-32704(gp)
8113b09c:	103ee83a 	callr	r2
8113b0a0:	00000106 	br	8113b0a8 <alt_get_errno+0x30>
8113b0a4:	d0a06204 	addi	r2,gp,-32376
}
8113b0a8:	e037883a 	mov	sp,fp
8113b0ac:	dfc00117 	ldw	ra,4(sp)
8113b0b0:	df000017 	ldw	fp,0(sp)
8113b0b4:	dec00204 	addi	sp,sp,8
8113b0b8:	f800283a 	ret

8113b0bc <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
8113b0bc:	defffc04 	addi	sp,sp,-16
8113b0c0:	de00012e 	bgeu	sp,et,8113b0c8 <alt_msgdma_write_standard_descriptor+0xc>
8113b0c4:	003b68fa 	trap	3
8113b0c8:	df000315 	stw	fp,12(sp)
8113b0cc:	df000304 	addi	fp,sp,12
8113b0d0:	e13ffd15 	stw	r4,-12(fp)
8113b0d4:	e17ffe15 	stw	r5,-8(fp)
8113b0d8:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8113b0dc:	e0bffd17 	ldw	r2,-12(fp)
8113b0e0:	10800037 	ldwio	r2,0(r2)
8113b0e4:	1080010c 	andi	r2,r2,4
8113b0e8:	10000226 	beq	r2,zero,8113b0f4 <alt_msgdma_write_standard_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
8113b0ec:	00bff904 	movi	r2,-28
8113b0f0:	00001506 	br	8113b148 <alt_msgdma_write_standard_descriptor+0x8c>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
8113b0f4:	e0bfff17 	ldw	r2,-4(fp)
8113b0f8:	10800017 	ldw	r2,0(r2)
8113b0fc:	1007883a 	mov	r3,r2
8113b100:	e0bffe17 	ldw	r2,-8(fp)
8113b104:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
8113b108:	e0bffe17 	ldw	r2,-8(fp)
8113b10c:	10800104 	addi	r2,r2,4
8113b110:	e0ffff17 	ldw	r3,-4(fp)
8113b114:	18c00117 	ldw	r3,4(r3)
8113b118:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
8113b11c:	e0bffe17 	ldw	r2,-8(fp)
8113b120:	10800204 	addi	r2,r2,8
8113b124:	e0ffff17 	ldw	r3,-4(fp)
8113b128:	18c00217 	ldw	r3,8(r3)
8113b12c:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
8113b130:	e0bffe17 	ldw	r2,-8(fp)
8113b134:	10800304 	addi	r2,r2,12
8113b138:	e0ffff17 	ldw	r3,-4(fp)
8113b13c:	18c00317 	ldw	r3,12(r3)
8113b140:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
8113b144:	0005883a 	mov	r2,zero
}
8113b148:	e037883a 	mov	sp,fp
8113b14c:	df000017 	ldw	fp,0(sp)
8113b150:	dec00104 	addi	sp,sp,4
8113b154:	f800283a 	ret

8113b158 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8113b158:	defffc04 	addi	sp,sp,-16
8113b15c:	de00012e 	bgeu	sp,et,8113b164 <alt_msgdma_write_extended_descriptor+0xc>
8113b160:	003b68fa 	trap	3
8113b164:	df000315 	stw	fp,12(sp)
8113b168:	df000304 	addi	fp,sp,12
8113b16c:	e13ffd15 	stw	r4,-12(fp)
8113b170:	e17ffe15 	stw	r5,-8(fp)
8113b174:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8113b178:	e0bffd17 	ldw	r2,-12(fp)
8113b17c:	10800037 	ldwio	r2,0(r2)
8113b180:	1080010c 	andi	r2,r2,4
8113b184:	10000226 	beq	r2,zero,8113b190 <alt_msgdma_write_extended_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
8113b188:	00bff904 	movi	r2,-28
8113b18c:	00003b06 	br	8113b27c <alt_msgdma_write_extended_descriptor+0x124>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8113b190:	e0bfff17 	ldw	r2,-4(fp)
8113b194:	10800017 	ldw	r2,0(r2)
8113b198:	1007883a 	mov	r3,r2
8113b19c:	e0bffe17 	ldw	r2,-8(fp)
8113b1a0:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
8113b1a4:	e0bffe17 	ldw	r2,-8(fp)
8113b1a8:	10800104 	addi	r2,r2,4
8113b1ac:	e0ffff17 	ldw	r3,-4(fp)
8113b1b0:	18c00117 	ldw	r3,4(r3)
8113b1b4:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
8113b1b8:	e0bffe17 	ldw	r2,-8(fp)
8113b1bc:	10800204 	addi	r2,r2,8
8113b1c0:	e0ffff17 	ldw	r3,-4(fp)
8113b1c4:	18c00217 	ldw	r3,8(r3)
8113b1c8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
8113b1cc:	e0bffe17 	ldw	r2,-8(fp)
8113b1d0:	10800304 	addi	r2,r2,12
8113b1d4:	e0ffff17 	ldw	r3,-4(fp)
8113b1d8:	18c0030b 	ldhu	r3,12(r3)
8113b1dc:	18ffffcc 	andi	r3,r3,65535
8113b1e0:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
8113b1e4:	e0bffe17 	ldw	r2,-8(fp)
8113b1e8:	10800384 	addi	r2,r2,14
8113b1ec:	e0ffff17 	ldw	r3,-4(fp)
8113b1f0:	18c00383 	ldbu	r3,14(r3)
8113b1f4:	18c03fcc 	andi	r3,r3,255
8113b1f8:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
8113b1fc:	e0bffe17 	ldw	r2,-8(fp)
8113b200:	108003c4 	addi	r2,r2,15
8113b204:	e0ffff17 	ldw	r3,-4(fp)
8113b208:	18c003c3 	ldbu	r3,15(r3)
8113b20c:	18c03fcc 	andi	r3,r3,255
8113b210:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
8113b214:	e0bffe17 	ldw	r2,-8(fp)
8113b218:	10800404 	addi	r2,r2,16
8113b21c:	e0ffff17 	ldw	r3,-4(fp)
8113b220:	18c0040b 	ldhu	r3,16(r3)
8113b224:	18ffffcc 	andi	r3,r3,65535
8113b228:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
8113b22c:	e0bffe17 	ldw	r2,-8(fp)
8113b230:	10800484 	addi	r2,r2,18
8113b234:	e0ffff17 	ldw	r3,-4(fp)
8113b238:	18c0048b 	ldhu	r3,18(r3)
8113b23c:	18ffffcc 	andi	r3,r3,65535
8113b240:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
8113b244:	e0bffe17 	ldw	r2,-8(fp)
8113b248:	10800504 	addi	r2,r2,20
8113b24c:	0007883a 	mov	r3,zero
8113b250:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
8113b254:	e0bffe17 	ldw	r2,-8(fp)
8113b258:	10800604 	addi	r2,r2,24
8113b25c:	0007883a 	mov	r3,zero
8113b260:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
8113b264:	e0bffe17 	ldw	r2,-8(fp)
8113b268:	10800704 	addi	r2,r2,28
8113b26c:	e0ffff17 	ldw	r3,-4(fp)
8113b270:	18c00717 	ldw	r3,28(r3)
8113b274:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8113b278:	0005883a 	mov	r2,zero
}
8113b27c:	e037883a 	mov	sp,fp
8113b280:	df000017 	ldw	fp,0(sp)
8113b284:	dec00104 	addi	sp,sp,4
8113b288:	f800283a 	ret

8113b28c <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
8113b28c:	defff804 	addi	sp,sp,-32
8113b290:	de00012e 	bgeu	sp,et,8113b298 <alt_msgdma_irq+0xc>
8113b294:	003b68fa 	trap	3
8113b298:	dfc00715 	stw	ra,28(sp)
8113b29c:	df000615 	stw	fp,24(sp)
8113b2a0:	df000604 	addi	fp,sp,24
8113b2a4:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8113b2a8:	e0bfff17 	ldw	r2,-4(fp)
8113b2ac:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8113b2b0:	e0bffa17 	ldw	r2,-24(fp)
8113b2b4:	10801783 	ldbu	r2,94(r2)
8113b2b8:	10803fcc 	andi	r2,r2,255
8113b2bc:	10001126 	beq	r2,zero,8113b304 <alt_msgdma_irq+0x78>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8113b2c0:	e0bffa17 	ldw	r2,-24(fp)
8113b2c4:	10800617 	ldw	r2,24(r2)
8113b2c8:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
8113b2cc:	1007883a 	mov	r3,r2
8113b2d0:	00bffdc4 	movi	r2,-9
8113b2d4:	1884703a 	and	r2,r3,r2
8113b2d8:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8113b2dc:	e0bffa17 	ldw	r2,-24(fp)
8113b2e0:	10800617 	ldw	r2,24(r2)
8113b2e4:	e0fffb17 	ldw	r3,-20(fp)
8113b2e8:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
8113b2ec:	e0bffa17 	ldw	r2,-24(fp)
8113b2f0:	10800617 	ldw	r2,24(r2)
8113b2f4:	10800404 	addi	r2,r2,16
8113b2f8:	00c00044 	movi	r3,1
8113b2fc:	10c00035 	stwio	r3,0(r2)
8113b300:	00001106 	br	8113b348 <alt_msgdma_irq+0xbc>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8113b304:	e0bffa17 	ldw	r2,-24(fp)
8113b308:	10800317 	ldw	r2,12(r2)
8113b30c:	10800104 	addi	r2,r2,4
8113b310:	10800037 	ldwio	r2,0(r2)
8113b314:	1007883a 	mov	r3,r2
8113b318:	00bffbc4 	movi	r2,-17
8113b31c:	1884703a 	and	r2,r3,r2
8113b320:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113b324:	e0bffa17 	ldw	r2,-24(fp)
8113b328:	10800317 	ldw	r2,12(r2)
8113b32c:	10800104 	addi	r2,r2,4
8113b330:	e0fffb17 	ldw	r3,-20(fp)
8113b334:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8113b338:	e0bffa17 	ldw	r2,-24(fp)
8113b33c:	10800317 	ldw	r2,12(r2)
8113b340:	00c08004 	movi	r3,512
8113b344:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8113b348:	e0bffa17 	ldw	r2,-24(fp)
8113b34c:	10800b17 	ldw	r2,44(r2)
8113b350:	10001226 	beq	r2,zero,8113b39c <alt_msgdma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b354:	0005303a 	rdctl	r2,status
8113b358:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b35c:	e0fffd17 	ldw	r3,-12(fp)
8113b360:	00bfff84 	movi	r2,-2
8113b364:	1884703a 	and	r2,r3,r2
8113b368:	1001703a 	wrctl	status,r2
  
  return context;
8113b36c:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
8113b370:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
8113b374:	e0bffa17 	ldw	r2,-24(fp)
8113b378:	10800b17 	ldw	r2,44(r2)
8113b37c:	e0fffa17 	ldw	r3,-24(fp)
8113b380:	18c00c17 	ldw	r3,48(r3)
8113b384:	1809883a 	mov	r4,r3
8113b388:	103ee83a 	callr	r2
8113b38c:	e0bffc17 	ldw	r2,-16(fp)
8113b390:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b394:	e0bffe17 	ldw	r2,-8(fp)
8113b398:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
8113b39c:	e0bffa17 	ldw	r2,-24(fp)
8113b3a0:	10801783 	ldbu	r2,94(r2)
8113b3a4:	10803fcc 	andi	r2,r2,255
8113b3a8:	10000a26 	beq	r2,zero,8113b3d4 <alt_msgdma_irq+0x148>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8113b3ac:	e0bffa17 	ldw	r2,-24(fp)
8113b3b0:	10800617 	ldw	r2,24(r2)
8113b3b4:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8113b3b8:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
8113b3bc:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8113b3c0:	e0bffa17 	ldw	r2,-24(fp)
8113b3c4:	10800617 	ldw	r2,24(r2)
8113b3c8:	e0fffb17 	ldw	r3,-20(fp)
8113b3cc:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8113b3d0:	00000c06 	br	8113b404 <alt_msgdma_irq+0x178>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8113b3d4:	e0bffa17 	ldw	r2,-24(fp)
8113b3d8:	10800317 	ldw	r2,12(r2)
8113b3dc:	10800104 	addi	r2,r2,4
8113b3e0:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
8113b3e4:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8113b3e8:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113b3ec:	e0bffa17 	ldw	r2,-24(fp)
8113b3f0:	10800317 	ldw	r2,12(r2)
8113b3f4:	10800104 	addi	r2,r2,4
8113b3f8:	e0fffb17 	ldw	r3,-20(fp)
8113b3fc:	10c00035 	stwio	r3,0(r2)
    }

    return;
8113b400:	0001883a 	nop
}
8113b404:	e037883a 	mov	sp,fp
8113b408:	dfc00117 	ldw	ra,4(sp)
8113b40c:	df000017 	ldw	fp,0(sp)
8113b410:	dec00204 	addi	sp,sp,8
8113b414:	f800283a 	ret

8113b418 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113b418:	defffb04 	addi	sp,sp,-20
8113b41c:	de00012e 	bgeu	sp,et,8113b424 <alt_msgdma_construct_standard_descriptor+0xc>
8113b420:	003b68fa 	trap	3
8113b424:	df000415 	stw	fp,16(sp)
8113b428:	df000404 	addi	fp,sp,16
8113b42c:	e13ffc15 	stw	r4,-16(fp)
8113b430:	e17ffd15 	stw	r5,-12(fp)
8113b434:	e1bffe15 	stw	r6,-8(fp)
8113b438:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8113b43c:	e0bffc17 	ldw	r2,-16(fp)
8113b440:	10c01217 	ldw	r3,72(r2)
8113b444:	e0800117 	ldw	r2,4(fp)
8113b448:	18800436 	bltu	r3,r2,8113b45c <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
8113b44c:	e0bffc17 	ldw	r2,-16(fp)
8113b450:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8113b454:	10803fcc 	andi	r2,r2,255
8113b458:	10000226 	beq	r2,zero,8113b464 <alt_msgdma_construct_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8113b45c:	00bffa84 	movi	r2,-22
8113b460:	00000e06 	br	8113b49c <alt_msgdma_construct_standard_descriptor+0x84>
    }
    descriptor->read_address = read_address;
8113b464:	e0bffd17 	ldw	r2,-12(fp)
8113b468:	e0fffe17 	ldw	r3,-8(fp)
8113b46c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8113b470:	e0bffd17 	ldw	r2,-12(fp)
8113b474:	e0ffff17 	ldw	r3,-4(fp)
8113b478:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113b47c:	e0bffd17 	ldw	r2,-12(fp)
8113b480:	e0c00117 	ldw	r3,4(fp)
8113b484:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113b488:	e0800217 	ldw	r2,8(fp)
8113b48c:	10e00034 	orhi	r3,r2,32768
8113b490:	e0bffd17 	ldw	r2,-12(fp)
8113b494:	10c00315 	stw	r3,12(r2)
    
    return 0;
8113b498:	0005883a 	mov	r2,zero
}
8113b49c:	e037883a 	mov	sp,fp
8113b4a0:	df000017 	ldw	fp,0(sp)
8113b4a4:	dec00104 	addi	sp,sp,4
8113b4a8:	f800283a 	ret

8113b4ac <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113b4ac:	defff604 	addi	sp,sp,-40
8113b4b0:	de00012e 	bgeu	sp,et,8113b4b8 <alt_msgdma_construct_extended_descriptor+0xc>
8113b4b4:	003b68fa 	trap	3
8113b4b8:	df000915 	stw	fp,36(sp)
8113b4bc:	df000904 	addi	fp,sp,36
8113b4c0:	e13ff715 	stw	r4,-36(fp)
8113b4c4:	e17ff815 	stw	r5,-32(fp)
8113b4c8:	e1bff915 	stw	r6,-28(fp)
8113b4cc:	e1fffa15 	stw	r7,-24(fp)
8113b4d0:	e1800317 	ldw	r6,12(fp)
8113b4d4:	e1400417 	ldw	r5,16(fp)
8113b4d8:	e1000517 	ldw	r4,20(fp)
8113b4dc:	e0c00617 	ldw	r3,24(fp)
8113b4e0:	e0800717 	ldw	r2,28(fp)
8113b4e4:	e1bffb0d 	sth	r6,-20(fp)
8113b4e8:	e17ffc05 	stb	r5,-16(fp)
8113b4ec:	e13ffd05 	stb	r4,-12(fp)
8113b4f0:	e0fffe0d 	sth	r3,-8(fp)
8113b4f4:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8113b4f8:	e0bff717 	ldw	r2,-36(fp)
8113b4fc:	10c01217 	ldw	r3,72(r2)
8113b500:	e0800117 	ldw	r2,4(fp)
8113b504:	18801936 	bltu	r3,r2,8113b56c <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
8113b508:	e13ff717 	ldw	r4,-36(fp)
8113b50c:	20801317 	ldw	r2,76(r4)
8113b510:	20c01417 	ldw	r3,80(r4)
8113b514:	e13ffe0b 	ldhu	r4,-8(fp)
8113b518:	213fffcc 	andi	r4,r4,65535
8113b51c:	2015883a 	mov	r10,r4
8113b520:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
8113b524:	1ac01136 	bltu	r3,r11,8113b56c <alt_msgdma_construct_extended_descriptor+0xc0>
8113b528:	58c0011e 	bne	r11,r3,8113b530 <alt_msgdma_construct_extended_descriptor+0x84>
8113b52c:	12800f36 	bltu	r2,r10,8113b56c <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113b530:	e13ff717 	ldw	r4,-36(fp)
8113b534:	20801317 	ldw	r2,76(r4)
8113b538:	20c01417 	ldw	r3,80(r4)
8113b53c:	e13fff0b 	ldhu	r4,-4(fp)
8113b540:	213fffcc 	andi	r4,r4,65535
8113b544:	2011883a 	mov	r8,r4
8113b548:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8113b54c:	1a400736 	bltu	r3,r9,8113b56c <alt_msgdma_construct_extended_descriptor+0xc0>
8113b550:	48c0011e 	bne	r9,r3,8113b558 <alt_msgdma_construct_extended_descriptor+0xac>
8113b554:	12000536 	bltu	r2,r8,8113b56c <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8113b558:	e0bff717 	ldw	r2,-36(fp)
8113b55c:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113b560:	10803fcc 	andi	r2,r2,255
8113b564:	10800060 	cmpeqi	r2,r2,1
8113b568:	1000021e 	bne	r2,zero,8113b574 <alt_msgdma_construct_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8113b56c:	00bffa84 	movi	r2,-22
8113b570:	00002106 	br	8113b5f8 <alt_msgdma_construct_extended_descriptor+0x14c>
    }
    
    descriptor->read_address_low = read_address;
8113b574:	e0bff817 	ldw	r2,-32(fp)
8113b578:	e0fff917 	ldw	r3,-28(fp)
8113b57c:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
8113b580:	e0bff817 	ldw	r2,-32(fp)
8113b584:	e0fffa17 	ldw	r3,-24(fp)
8113b588:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113b58c:	e0bff817 	ldw	r2,-32(fp)
8113b590:	e0c00117 	ldw	r3,4(fp)
8113b594:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8113b598:	e0bff817 	ldw	r2,-32(fp)
8113b59c:	e0fffb0b 	ldhu	r3,-20(fp)
8113b5a0:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
8113b5a4:	e0bff817 	ldw	r2,-32(fp)
8113b5a8:	e0fffc03 	ldbu	r3,-16(fp)
8113b5ac:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
8113b5b0:	e0bff817 	ldw	r2,-32(fp)
8113b5b4:	e0fffd03 	ldbu	r3,-12(fp)
8113b5b8:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
8113b5bc:	e0bff817 	ldw	r2,-32(fp)
8113b5c0:	e0fffe0b 	ldhu	r3,-8(fp)
8113b5c4:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
8113b5c8:	e0bff817 	ldw	r2,-32(fp)
8113b5cc:	e0ffff0b 	ldhu	r3,-4(fp)
8113b5d0:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
8113b5d4:	e0bff817 	ldw	r2,-32(fp)
8113b5d8:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
8113b5dc:	e0bff817 	ldw	r2,-32(fp)
8113b5e0:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113b5e4:	e0800217 	ldw	r2,8(fp)
8113b5e8:	10e00034 	orhi	r3,r2,32768
8113b5ec:	e0bff817 	ldw	r2,-32(fp)
8113b5f0:	10c00715 	stw	r3,28(r2)

  return 0 ;
8113b5f4:	0005883a 	mov	r2,zero

}
8113b5f8:	e037883a 	mov	sp,fp
8113b5fc:	df000017 	ldw	fp,0(sp)
8113b600:	dec00104 	addi	sp,sp,4
8113b604:	f800283a 	ret

8113b608 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8113b608:	deffee04 	addi	sp,sp,-72
8113b60c:	de00012e 	bgeu	sp,et,8113b614 <alt_msgdma_descriptor_async_transfer+0xc>
8113b610:	003b68fa 	trap	3
8113b614:	dfc01115 	stw	ra,68(sp)
8113b618:	df001015 	stw	fp,64(sp)
8113b61c:	df001004 	addi	fp,sp,64
8113b620:	e13ffd15 	stw	r4,-12(fp)
8113b624:	e17ffe15 	stw	r5,-8(fp)
8113b628:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
8113b62c:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
8113b630:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
8113b634:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b638:	e0bffd17 	ldw	r2,-12(fp)
8113b63c:	10800317 	ldw	r2,12(r2)
8113b640:	10800204 	addi	r2,r2,8
8113b644:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8113b648:	10bfffcc 	andi	r2,r2,65535
8113b64c:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b650:	e0bffd17 	ldw	r2,-12(fp)
8113b654:	10800317 	ldw	r2,12(r2)
8113b658:	10800204 	addi	r2,r2,8
8113b65c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8113b660:	1004d43a 	srli	r2,r2,16
8113b664:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113b668:	e0bffd17 	ldw	r2,-12(fp)
8113b66c:	10800917 	ldw	r2,36(r2)
8113b670:	e0fff417 	ldw	r3,-48(fp)
8113b674:	1880042e 	bgeu	r3,r2,8113b688 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8113b678:	e0bffd17 	ldw	r2,-12(fp)
8113b67c:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113b680:	e0fff317 	ldw	r3,-52(fp)
8113b684:	18800236 	bltu	r3,r2,8113b690 <alt_msgdma_descriptor_async_transfer+0x88>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
8113b688:	00bff904 	movi	r2,-28
8113b68c:	0000a906 	br	8113b934 <alt_msgdma_descriptor_async_transfer+0x32c>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
8113b690:	e0bffd17 	ldw	r2,-12(fp)
8113b694:	10801817 	ldw	r2,96(r2)
8113b698:	e0bff615 	stw	r2,-40(fp)
8113b69c:	e03ffc0d 	sth	zero,-16(fp)
8113b6a0:	e0bffc0b 	ldhu	r2,-16(fp)
8113b6a4:	e0fffc84 	addi	r3,fp,-14
8113b6a8:	180d883a 	mov	r6,r3
8113b6ac:	100b883a 	mov	r5,r2
8113b6b0:	e13ff617 	ldw	r4,-40(fp)
8113b6b4:	1131b800 	call	81131b80 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113b6b8:	00800804 	movi	r2,32
8113b6bc:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b6c0:	0005303a 	rdctl	r2,status
8113b6c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b6c8:	e0fff717 	ldw	r3,-36(fp)
8113b6cc:	00bfff84 	movi	r2,-2
8113b6d0:	1884703a 	and	r2,r3,r2
8113b6d4:	1001703a 	wrctl	status,r2
  
  return context;
8113b6d8:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8113b6dc:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113b6e0:	e0bffd17 	ldw	r2,-12(fp)
8113b6e4:	10800317 	ldw	r2,12(r2)
8113b6e8:	10800104 	addi	r2,r2,4
8113b6ec:	e0fff117 	ldw	r3,-60(fp)
8113b6f0:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113b6f4:	e0bffd17 	ldw	r2,-12(fp)
8113b6f8:	10800317 	ldw	r2,12(r2)
8113b6fc:	e0fffd17 	ldw	r3,-12(fp)
8113b700:	18c00317 	ldw	r3,12(r3)
8113b704:	18c00037 	ldwio	r3,0(r3)
8113b708:	10c00035 	stwio	r3,0(r2)
8113b70c:	e0bff217 	ldw	r2,-56(fp)
8113b710:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b714:	e0bffb17 	ldw	r2,-20(fp)
8113b718:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8113b71c:	e0bffe17 	ldw	r2,-8(fp)
8113b720:	10001e26 	beq	r2,zero,8113b79c <alt_msgdma_descriptor_async_transfer+0x194>
8113b724:	e0bfff17 	ldw	r2,-4(fp)
8113b728:	10001c1e 	bne	r2,zero,8113b79c <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113b72c:	00001106 	br	8113b774 <alt_msgdma_descriptor_async_transfer+0x16c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8113b730:	01000044 	movi	r4,1
8113b734:	11292440 	call	81129244 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113b738:	e0bff00b 	ldhu	r2,-64(fp)
8113b73c:	1084e230 	cmpltui	r2,r2,5000
8113b740:	1000091e 	bne	r2,zero,8113b768 <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
8113b744:	01204534 	movhi	r4,33044
8113b748:	210a8c04 	addi	r4,r4,10800
8113b74c:	113db2c0 	call	8113db2c <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113b750:	e0bffd17 	ldw	r2,-12(fp)
8113b754:	10801817 	ldw	r2,96(r2)
8113b758:	1009883a 	mov	r4,r2
8113b75c:	1131f080 	call	81131f08 <OSSemPost>
				
                return -ETIME;
8113b760:	00bff084 	movi	r2,-62
8113b764:	00007306 	br	8113b934 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
8113b768:	e0bff00b 	ldhu	r2,-64(fp)
8113b76c:	10800044 	addi	r2,r2,1
8113b770:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113b774:	e0bffd17 	ldw	r2,-12(fp)
8113b778:	10c00317 	ldw	r3,12(r2)
8113b77c:	e0bffd17 	ldw	r2,-12(fp)
8113b780:	10800417 	ldw	r2,16(r2)
8113b784:	e1bffe17 	ldw	r6,-8(fp)
8113b788:	100b883a 	mov	r5,r2
8113b78c:	1809883a 	mov	r4,r3
8113b790:	113b0bc0 	call	8113b0bc <alt_msgdma_write_standard_descriptor>
8113b794:	103fe61e 	bne	r2,zero,8113b730 <__reset+0xfb11b730>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
8113b798:	00002706 	br	8113b838 <alt_msgdma_descriptor_async_transfer+0x230>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113b79c:	e0bffe17 	ldw	r2,-8(fp)
8113b7a0:	10001f1e 	bne	r2,zero,8113b820 <alt_msgdma_descriptor_async_transfer+0x218>
8113b7a4:	e0bfff17 	ldw	r2,-4(fp)
8113b7a8:	10001d26 	beq	r2,zero,8113b820 <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
8113b7ac:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113b7b0:	00001106 	br	8113b7f8 <alt_msgdma_descriptor_async_transfer+0x1f0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8113b7b4:	01000044 	movi	r4,1
8113b7b8:	11292440 	call	81129244 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113b7bc:	e0bff00b 	ldhu	r2,-64(fp)
8113b7c0:	1084e230 	cmpltui	r2,r2,5000
8113b7c4:	1000091e 	bne	r2,zero,8113b7ec <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8113b7c8:	01204534 	movhi	r4,33044
8113b7cc:	210aa204 	addi	r4,r4,10888
8113b7d0:	113db2c0 	call	8113db2c <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113b7d4:	e0bffd17 	ldw	r2,-12(fp)
8113b7d8:	10801817 	ldw	r2,96(r2)
8113b7dc:	1009883a 	mov	r4,r2
8113b7e0:	1131f080 	call	81131f08 <OSSemPost>
				
                return -ETIME;
8113b7e4:	00bff084 	movi	r2,-62
8113b7e8:	00005206 	br	8113b934 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
8113b7ec:	e0bff00b 	ldhu	r2,-64(fp)
8113b7f0:	10800044 	addi	r2,r2,1
8113b7f4:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113b7f8:	e0bffd17 	ldw	r2,-12(fp)
8113b7fc:	10c00317 	ldw	r3,12(r2)
8113b800:	e0bffd17 	ldw	r2,-12(fp)
8113b804:	10800417 	ldw	r2,16(r2)
8113b808:	e1bfff17 	ldw	r6,-4(fp)
8113b80c:	100b883a 	mov	r5,r2
8113b810:	1809883a 	mov	r4,r3
8113b814:	113b1580 	call	8113b158 <alt_msgdma_write_extended_descriptor>
8113b818:	103fe61e 	bne	r2,zero,8113b7b4 <__reset+0xfb11b7b4>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113b81c:	00000606 	br	8113b838 <alt_msgdma_descriptor_async_transfer+0x230>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8113b820:	e0bffd17 	ldw	r2,-12(fp)
8113b824:	10801817 	ldw	r2,96(r2)
8113b828:	1009883a 	mov	r4,r2
8113b82c:	1131f080 	call	81131f08 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8113b830:	00bfffc4 	movi	r2,-1
8113b834:	00003f06 	br	8113b934 <alt_msgdma_descriptor_async_transfer+0x32c>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8113b838:	e0bffd17 	ldw	r2,-12(fp)
8113b83c:	10800b17 	ldw	r2,44(r2)
8113b840:	10001c26 	beq	r2,zero,8113b8b4 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
8113b844:	e0bffd17 	ldw	r2,-12(fp)
8113b848:	10c00d17 	ldw	r3,52(r2)
8113b84c:	e0bff117 	ldw	r2,-60(fp)
8113b850:	1884b03a 	or	r2,r3,r2
8113b854:	10800514 	ori	r2,r2,20
8113b858:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8113b85c:	e0fff117 	ldw	r3,-60(fp)
8113b860:	00bff7c4 	movi	r2,-33
8113b864:	1884703a 	and	r2,r3,r2
8113b868:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b86c:	0005303a 	rdctl	r2,status
8113b870:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b874:	e0fff917 	ldw	r3,-28(fp)
8113b878:	00bfff84 	movi	r2,-2
8113b87c:	1884703a 	and	r2,r3,r2
8113b880:	1001703a 	wrctl	status,r2
  
  return context;
8113b884:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
8113b888:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113b88c:	e0bffd17 	ldw	r2,-12(fp)
8113b890:	10800317 	ldw	r2,12(r2)
8113b894:	10800104 	addi	r2,r2,4
8113b898:	e0fff117 	ldw	r3,-60(fp)
8113b89c:	10c00035 	stwio	r3,0(r2)
8113b8a0:	e0bff217 	ldw	r2,-56(fp)
8113b8a4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b8a8:	e0bff517 	ldw	r2,-44(fp)
8113b8ac:	1001703a 	wrctl	status,r2
8113b8b0:	00001b06 	br	8113b920 <alt_msgdma_descriptor_async_transfer+0x318>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
8113b8b4:	e0bffd17 	ldw	r2,-12(fp)
8113b8b8:	10c00d17 	ldw	r3,52(r2)
8113b8bc:	e0bff117 	ldw	r2,-60(fp)
8113b8c0:	1884b03a 	or	r2,r3,r2
8113b8c4:	10800114 	ori	r2,r2,4
8113b8c8:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
8113b8cc:	e0fff117 	ldw	r3,-60(fp)
8113b8d0:	00bff3c4 	movi	r2,-49
8113b8d4:	1884703a 	and	r2,r3,r2
8113b8d8:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b8dc:	0005303a 	rdctl	r2,status
8113b8e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b8e4:	e0fffa17 	ldw	r3,-24(fp)
8113b8e8:	00bfff84 	movi	r2,-2
8113b8ec:	1884703a 	and	r2,r3,r2
8113b8f0:	1001703a 	wrctl	status,r2
  
  return context;
8113b8f4:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8113b8f8:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113b8fc:	e0bffd17 	ldw	r2,-12(fp)
8113b900:	10800317 	ldw	r2,12(r2)
8113b904:	10800104 	addi	r2,r2,4
8113b908:	e0fff117 	ldw	r3,-60(fp)
8113b90c:	10c00035 	stwio	r3,0(r2)
8113b910:	e0bff217 	ldw	r2,-56(fp)
8113b914:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b918:	e0bff817 	ldw	r2,-32(fp)
8113b91c:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
8113b920:	e0bffd17 	ldw	r2,-12(fp)
8113b924:	10801817 	ldw	r2,96(r2)
8113b928:	1009883a 	mov	r4,r2
8113b92c:	1131f080 	call	81131f08 <OSSemPost>
    
    return 0;
8113b930:	0005883a 	mov	r2,zero
}
8113b934:	e037883a 	mov	sp,fp
8113b938:	dfc00117 	ldw	ra,4(sp)
8113b93c:	df000017 	ldw	fp,0(sp)
8113b940:	dec00204 	addi	sp,sp,8
8113b944:	f800283a 	ret

8113b948 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8113b948:	deffee04 	addi	sp,sp,-72
8113b94c:	de00012e 	bgeu	sp,et,8113b954 <alt_msgdma_descriptor_sync_transfer+0xc>
8113b950:	003b68fa 	trap	3
8113b954:	dfc01115 	stw	ra,68(sp)
8113b958:	df001015 	stw	fp,64(sp)
8113b95c:	df001004 	addi	fp,sp,64
8113b960:	e13ffd15 	stw	r4,-12(fp)
8113b964:	e17ffe15 	stw	r5,-8(fp)
8113b968:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
8113b96c:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
8113b970:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
8113b974:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
8113b978:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b97c:	e0bffd17 	ldw	r2,-12(fp)
8113b980:	10800317 	ldw	r2,12(r2)
8113b984:	10800204 	addi	r2,r2,8
8113b988:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8113b98c:	10bfffcc 	andi	r2,r2,65535
8113b990:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b994:	e0bffd17 	ldw	r2,-12(fp)
8113b998:	10800317 	ldw	r2,12(r2)
8113b99c:	10800204 	addi	r2,r2,8
8113b9a0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
8113b9a4:	1004d43a 	srli	r2,r2,16
8113b9a8:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
8113b9ac:	00807804 	movi	r2,480
8113b9b0:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113b9b4:	00001906 	br	8113ba1c <alt_msgdma_descriptor_sync_transfer+0xd4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
8113b9b8:	01000044 	movi	r4,1
8113b9bc:	11292440 	call	81129244 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113b9c0:	e0bff10b 	ldhu	r2,-60(fp)
8113b9c4:	1084e230 	cmpltui	r2,r2,5000
8113b9c8:	1000051e 	bne	r2,zero,8113b9e0 <alt_msgdma_descriptor_sync_transfer+0x98>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
8113b9cc:	01204534 	movhi	r4,33044
8113b9d0:	210ab804 	addi	r4,r4,10976
8113b9d4:	113db2c0 	call	8113db2c <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
8113b9d8:	00bff084 	movi	r2,-62
8113b9dc:	0000d706 	br	8113bd3c <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;  
8113b9e0:	e0bff10b 	ldhu	r2,-60(fp)
8113b9e4:	10800044 	addi	r2,r2,1
8113b9e8:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113b9ec:	e0bffd17 	ldw	r2,-12(fp)
8113b9f0:	10800317 	ldw	r2,12(r2)
8113b9f4:	10800204 	addi	r2,r2,8
8113b9f8:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
8113b9fc:	10bfffcc 	andi	r2,r2,65535
8113ba00:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113ba04:	e0bffd17 	ldw	r2,-12(fp)
8113ba08:	10800317 	ldw	r2,12(r2)
8113ba0c:	10800204 	addi	r2,r2,8
8113ba10:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
8113ba14:	1004d43a 	srli	r2,r2,16
8113ba18:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113ba1c:	e0bffd17 	ldw	r2,-12(fp)
8113ba20:	10800917 	ldw	r2,36(r2)
8113ba24:	e0fff317 	ldw	r3,-52(fp)
8113ba28:	18bfe32e 	bgeu	r3,r2,8113b9b8 <__reset+0xfb11b9b8>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8113ba2c:	e0bffd17 	ldw	r2,-12(fp)
8113ba30:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113ba34:	e0fff217 	ldw	r3,-56(fp)
8113ba38:	18bfdf2e 	bgeu	r3,r2,8113b9b8 <__reset+0xfb11b9b8>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
8113ba3c:	e0bffd17 	ldw	r2,-12(fp)
8113ba40:	10801817 	ldw	r2,96(r2)
8113ba44:	e0bff815 	stw	r2,-32(fp)
8113ba48:	e03ffc0d 	sth	zero,-16(fp)
8113ba4c:	e0bffc0b 	ldhu	r2,-16(fp)
8113ba50:	e0fffc84 	addi	r3,fp,-14
8113ba54:	180d883a 	mov	r6,r3
8113ba58:	100b883a 	mov	r5,r2
8113ba5c:	e13ff817 	ldw	r4,-32(fp)
8113ba60:	1131b800 	call	81131b80 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113ba64:	0005303a 	rdctl	r2,status
8113ba68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113ba6c:	e0fffb17 	ldw	r3,-20(fp)
8113ba70:	00bfff84 	movi	r2,-2
8113ba74:	1884703a 	and	r2,r3,r2
8113ba78:	1001703a 	wrctl	status,r2
  
  return context;
8113ba7c:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
8113ba80:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8113ba84:	e0bffd17 	ldw	r2,-12(fp)
8113ba88:	10800317 	ldw	r2,12(r2)
8113ba8c:	10800104 	addi	r2,r2,4
8113ba90:	00c00804 	movi	r3,32
8113ba94:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113ba98:	e0bffd17 	ldw	r2,-12(fp)
8113ba9c:	10800317 	ldw	r2,12(r2)
8113baa0:	e0fffd17 	ldw	r3,-12(fp)
8113baa4:	18c00317 	ldw	r3,12(r3)
8113baa8:	18c00037 	ldwio	r3,0(r3)
8113baac:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8113bab0:	e0bffe17 	ldw	r2,-8(fp)
8113bab4:	10001f26 	beq	r2,zero,8113bb34 <alt_msgdma_descriptor_sync_transfer+0x1ec>
8113bab8:	e0bfff17 	ldw	r2,-4(fp)
8113babc:	10001d1e 	bne	r2,zero,8113bb34 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
8113bac0:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113bac4:	00001106 	br	8113bb0c <alt_msgdma_descriptor_sync_transfer+0x1c4>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
8113bac8:	01000044 	movi	r4,1
8113bacc:	11292440 	call	81129244 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113bad0:	e0bff10b 	ldhu	r2,-60(fp)
8113bad4:	1084e230 	cmpltui	r2,r2,5000
8113bad8:	1000091e 	bne	r2,zero,8113bb00 <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
8113badc:	01204534 	movhi	r4,33044
8113bae0:	210acc04 	addi	r4,r4,11056
8113bae4:	113db2c0 	call	8113db2c <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113bae8:	e0bffd17 	ldw	r2,-12(fp)
8113baec:	10801817 	ldw	r2,96(r2)
8113baf0:	1009883a 	mov	r4,r2
8113baf4:	1131f080 	call	81131f08 <OSSemPost>
				
                return -ETIME;
8113baf8:	00bff084 	movi	r2,-62
8113bafc:	00008f06 	br	8113bd3c <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;    
8113bb00:	e0bff10b 	ldhu	r2,-60(fp)
8113bb04:	10800044 	addi	r2,r2,1
8113bb08:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
8113bb0c:	e0bffd17 	ldw	r2,-12(fp)
8113bb10:	10c00317 	ldw	r3,12(r2)
8113bb14:	e0bffd17 	ldw	r2,-12(fp)
8113bb18:	10800417 	ldw	r2,16(r2)
8113bb1c:	e1bffe17 	ldw	r6,-8(fp)
8113bb20:	100b883a 	mov	r5,r2
8113bb24:	1809883a 	mov	r4,r3
8113bb28:	113b0bc0 	call	8113b0bc <alt_msgdma_write_standard_descriptor>
8113bb2c:	103fe61e 	bne	r2,zero,8113bac8 <__reset+0xfb11bac8>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8113bb30:	00002706 	br	8113bbd0 <alt_msgdma_descriptor_sync_transfer+0x288>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113bb34:	e0bffe17 	ldw	r2,-8(fp)
8113bb38:	10001f1e 	bne	r2,zero,8113bbb8 <alt_msgdma_descriptor_sync_transfer+0x270>
8113bb3c:	e0bfff17 	ldw	r2,-4(fp)
8113bb40:	10001d26 	beq	r2,zero,8113bbb8 <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
8113bb44:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113bb48:	00001106 	br	8113bb90 <alt_msgdma_descriptor_sync_transfer+0x248>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
8113bb4c:	01000044 	movi	r4,1
8113bb50:	11292440 	call	81129244 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113bb54:	e0bff10b 	ldhu	r2,-60(fp)
8113bb58:	1084e230 	cmpltui	r2,r2,5000
8113bb5c:	1000091e 	bne	r2,zero,8113bb84 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
8113bb60:	01204534 	movhi	r4,33044
8113bb64:	210add04 	addi	r4,r4,11124
8113bb68:	113db2c0 	call	8113db2c <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113bb6c:	e0bffd17 	ldw	r2,-12(fp)
8113bb70:	10801817 	ldw	r2,96(r2)
8113bb74:	1009883a 	mov	r4,r2
8113bb78:	1131f080 	call	81131f08 <OSSemPost>
				
                return -ETIME;
8113bb7c:	00bff084 	movi	r2,-62
8113bb80:	00006e06 	br	8113bd3c <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;
8113bb84:	e0bff10b 	ldhu	r2,-60(fp)
8113bb88:	10800044 	addi	r2,r2,1
8113bb8c:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113bb90:	e0bffd17 	ldw	r2,-12(fp)
8113bb94:	10c00317 	ldw	r3,12(r2)
8113bb98:	e0bffd17 	ldw	r2,-12(fp)
8113bb9c:	10800417 	ldw	r2,16(r2)
8113bba0:	e1bfff17 	ldw	r6,-4(fp)
8113bba4:	100b883a 	mov	r5,r2
8113bba8:	1809883a 	mov	r4,r3
8113bbac:	113b1580 	call	8113b158 <alt_msgdma_write_extended_descriptor>
8113bbb0:	103fe61e 	bne	r2,zero,8113bb4c <__reset+0xfb11bb4c>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
8113bbb4:	00000606 	br	8113bbd0 <alt_msgdma_descriptor_sync_transfer+0x288>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8113bbb8:	e0bffd17 	ldw	r2,-12(fp)
8113bbbc:	10801817 	ldw	r2,96(r2)
8113bbc0:	1009883a 	mov	r4,r2
8113bbc4:	1131f080 	call	81131f08 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
8113bbc8:	00bfffc4 	movi	r2,-1
8113bbcc:	00005b06 	br	8113bd3c <alt_msgdma_descriptor_sync_transfer+0x3f4>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8113bbd0:	e0bffd17 	ldw	r2,-12(fp)
8113bbd4:	10800317 	ldw	r2,12(r2)
8113bbd8:	10800104 	addi	r2,r2,4
8113bbdc:	e0fffd17 	ldw	r3,-12(fp)
8113bbe0:	19000d17 	ldw	r4,52(r3)
8113bbe4:	00fff2c4 	movi	r3,-53
8113bbe8:	20c6703a 	and	r3,r4,r3
8113bbec:	18c00114 	ori	r3,r3,4
8113bbf0:	10c00035 	stwio	r3,0(r2)
8113bbf4:	e0bff517 	ldw	r2,-44(fp)
8113bbf8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113bbfc:	e0bff717 	ldw	r2,-36(fp)
8113bc00:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
8113bc04:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8113bc08:	e0bffd17 	ldw	r2,-12(fp)
8113bc0c:	10800317 	ldw	r2,12(r2)
8113bc10:	10800037 	ldwio	r2,0(r2)
8113bc14:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8113bc18:	00001506 	br	8113bc70 <alt_msgdma_descriptor_sync_transfer+0x328>
    {
        alt_busy_sleep(1); /* delay 1us */
8113bc1c:	01000044 	movi	r4,1
8113bc20:	11292440 	call	81129244 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113bc24:	e0bff10b 	ldhu	r2,-60(fp)
8113bc28:	1084e230 	cmpltui	r2,r2,5000
8113bc2c:	1000091e 	bne	r2,zero,8113bc54 <alt_msgdma_descriptor_sync_transfer+0x30c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8113bc30:	01204534 	movhi	r4,33044
8113bc34:	210aee04 	addi	r4,r4,11192
8113bc38:	113db2c0 	call	8113db2c <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
8113bc3c:	e0bffd17 	ldw	r2,-12(fp)
8113bc40:	10801817 	ldw	r2,96(r2)
8113bc44:	1009883a 	mov	r4,r2
8113bc48:	1131f080 	call	81131f08 <OSSemPost>
			
            return -ETIME;
8113bc4c:	00bff084 	movi	r2,-62
8113bc50:	00003a06 	br	8113bd3c <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;
8113bc54:	e0bff10b 	ldhu	r2,-60(fp)
8113bc58:	10800044 	addi	r2,r2,1
8113bc5c:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8113bc60:	e0bffd17 	ldw	r2,-12(fp)
8113bc64:	10800317 	ldw	r2,12(r2)
8113bc68:	10800037 	ldwio	r2,0(r2)
8113bc6c:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8113bc70:	e0fff017 	ldw	r3,-64(fp)
8113bc74:	e0bff617 	ldw	r2,-40(fp)
8113bc78:	1884703a 	and	r2,r3,r2
8113bc7c:	1000031e 	bne	r2,zero,8113bc8c <alt_msgdma_descriptor_sync_transfer+0x344>
8113bc80:	e0bff017 	ldw	r2,-64(fp)
8113bc84:	1080004c 	andi	r2,r2,1
8113bc88:	103fe41e 	bne	r2,zero,8113bc1c <__reset+0xfb11bc1c>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8113bc8c:	e0fff017 	ldw	r3,-64(fp)
8113bc90:	e0bff617 	ldw	r2,-40(fp)
8113bc94:	1884703a 	and	r2,r3,r2
8113bc98:	10000626 	beq	r2,zero,8113bcb4 <alt_msgdma_descriptor_sync_transfer+0x36c>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8113bc9c:	e0bffd17 	ldw	r2,-12(fp)
8113bca0:	10801817 	ldw	r2,96(r2)
8113bca4:	1009883a 	mov	r4,r2
8113bca8:	1131f080 	call	81131f08 <OSSemPost>
		
        return error;
8113bcac:	e0bff617 	ldw	r2,-40(fp)
8113bcb0:	00002206 	br	8113bd3c <alt_msgdma_descriptor_sync_transfer+0x3f4>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8113bcb4:	e0bffd17 	ldw	r2,-12(fp)
8113bcb8:	10800317 	ldw	r2,12(r2)
8113bcbc:	10800104 	addi	r2,r2,4
8113bcc0:	10800037 	ldwio	r2,0(r2)
8113bcc4:	10800814 	ori	r2,r2,32
8113bcc8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113bccc:	0005303a 	rdctl	r2,status
8113bcd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113bcd4:	e0fffa17 	ldw	r3,-24(fp)
8113bcd8:	00bfff84 	movi	r2,-2
8113bcdc:	1884703a 	and	r2,r3,r2
8113bce0:	1001703a 	wrctl	status,r2
  
  return context;
8113bce4:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8113bce8:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113bcec:	e0bffd17 	ldw	r2,-12(fp)
8113bcf0:	10800317 	ldw	r2,12(r2)
8113bcf4:	10800104 	addi	r2,r2,4
8113bcf8:	e0fff417 	ldw	r3,-48(fp)
8113bcfc:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113bd00:	e0bffd17 	ldw	r2,-12(fp)
8113bd04:	10800317 	ldw	r2,12(r2)
8113bd08:	e0fffd17 	ldw	r3,-12(fp)
8113bd0c:	18c00317 	ldw	r3,12(r3)
8113bd10:	18c00037 	ldwio	r3,0(r3)
8113bd14:	10c00035 	stwio	r3,0(r2)
8113bd18:	e0bff517 	ldw	r2,-44(fp)
8113bd1c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113bd20:	e0bff917 	ldw	r2,-28(fp)
8113bd24:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
8113bd28:	e0bffd17 	ldw	r2,-12(fp)
8113bd2c:	10801817 	ldw	r2,96(r2)
8113bd30:	1009883a 	mov	r4,r2
8113bd34:	1131f080 	call	81131f08 <OSSemPost>
    
    return 0;
8113bd38:	0005883a 	mov	r2,zero

}
8113bd3c:	e037883a 	mov	sp,fp
8113bd40:	dfc00117 	ldw	ra,4(sp)
8113bd44:	df000017 	ldw	fp,0(sp)
8113bd48:	dec00204 	addi	sp,sp,8
8113bd4c:	f800283a 	ret

8113bd50 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8113bd50:	defff804 	addi	sp,sp,-32
8113bd54:	de00012e 	bgeu	sp,et,8113bd5c <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
8113bd58:	003b68fa 	trap	3
8113bd5c:	dfc00715 	stw	ra,28(sp)
8113bd60:	df000615 	stw	fp,24(sp)
8113bd64:	df000604 	addi	fp,sp,24
8113bd68:	e13ffc15 	stw	r4,-16(fp)
8113bd6c:	e17ffd15 	stw	r5,-12(fp)
8113bd70:	e1bffe15 	stw	r6,-8(fp)
8113bd74:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8113bd78:	e0800217 	ldw	r2,8(fp)
8113bd7c:	d8800115 	stw	r2,4(sp)
8113bd80:	e0bfff17 	ldw	r2,-4(fp)
8113bd84:	d8800015 	stw	r2,0(sp)
8113bd88:	e1fffe17 	ldw	r7,-8(fp)
8113bd8c:	000d883a 	mov	r6,zero
8113bd90:	e17ffd17 	ldw	r5,-12(fp)
8113bd94:	e13ffc17 	ldw	r4,-16(fp)
8113bd98:	113b4180 	call	8113b418 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8113bd9c:	e037883a 	mov	sp,fp
8113bda0:	dfc00117 	ldw	ra,4(sp)
8113bda4:	df000017 	ldw	fp,0(sp)
8113bda8:	dec00204 	addi	sp,sp,8
8113bdac:	f800283a 	ret

8113bdb0 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8113bdb0:	defff804 	addi	sp,sp,-32
8113bdb4:	de00012e 	bgeu	sp,et,8113bdbc <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
8113bdb8:	003b68fa 	trap	3
8113bdbc:	dfc00715 	stw	ra,28(sp)
8113bdc0:	df000615 	stw	fp,24(sp)
8113bdc4:	df000604 	addi	fp,sp,24
8113bdc8:	e13ffc15 	stw	r4,-16(fp)
8113bdcc:	e17ffd15 	stw	r5,-12(fp)
8113bdd0:	e1bffe15 	stw	r6,-8(fp)
8113bdd4:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113bdd8:	e0800217 	ldw	r2,8(fp)
8113bddc:	d8800115 	stw	r2,4(sp)
8113bde0:	e0bfff17 	ldw	r2,-4(fp)
8113bde4:	d8800015 	stw	r2,0(sp)
8113bde8:	000f883a 	mov	r7,zero
8113bdec:	e1bffe17 	ldw	r6,-8(fp)
8113bdf0:	e17ffd17 	ldw	r5,-12(fp)
8113bdf4:	e13ffc17 	ldw	r4,-16(fp)
8113bdf8:	113b4180 	call	8113b418 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8113bdfc:	e037883a 	mov	sp,fp
8113be00:	dfc00117 	ldw	ra,4(sp)
8113be04:	df000017 	ldw	fp,0(sp)
8113be08:	dec00204 	addi	sp,sp,8
8113be0c:	f800283a 	ret

8113be10 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113be10:	defff804 	addi	sp,sp,-32
8113be14:	de00012e 	bgeu	sp,et,8113be1c <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
8113be18:	003b68fa 	trap	3
8113be1c:	dfc00715 	stw	ra,28(sp)
8113be20:	df000615 	stw	fp,24(sp)
8113be24:	df000604 	addi	fp,sp,24
8113be28:	e13ffc15 	stw	r4,-16(fp)
8113be2c:	e17ffd15 	stw	r5,-12(fp)
8113be30:	e1bffe15 	stw	r6,-8(fp)
8113be34:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113be38:	e0800317 	ldw	r2,12(fp)
8113be3c:	d8800115 	stw	r2,4(sp)
8113be40:	e0800217 	ldw	r2,8(fp)
8113be44:	d8800015 	stw	r2,0(sp)
8113be48:	e1ffff17 	ldw	r7,-4(fp)
8113be4c:	e1bffe17 	ldw	r6,-8(fp)
8113be50:	e17ffd17 	ldw	r5,-12(fp)
8113be54:	e13ffc17 	ldw	r4,-16(fp)
8113be58:	113b4180 	call	8113b418 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8113be5c:	e037883a 	mov	sp,fp
8113be60:	dfc00117 	ldw	ra,4(sp)
8113be64:	df000017 	ldw	fp,0(sp)
8113be68:	dec00204 	addi	sp,sp,8
8113be6c:	f800283a 	ret

8113be70 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
8113be70:	defff004 	addi	sp,sp,-64
8113be74:	de00012e 	bgeu	sp,et,8113be7c <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
8113be78:	003b68fa 	trap	3
8113be7c:	dfc00f15 	stw	ra,60(sp)
8113be80:	df000e15 	stw	fp,56(sp)
8113be84:	df000e04 	addi	fp,sp,56
8113be88:	e13ff915 	stw	r4,-28(fp)
8113be8c:	e17ffa15 	stw	r5,-24(fp)
8113be90:	e1bffb15 	stw	r6,-20(fp)
8113be94:	e1fffc15 	stw	r7,-16(fp)
8113be98:	e1000317 	ldw	r4,12(fp)
8113be9c:	e0c00417 	ldw	r3,16(fp)
8113bea0:	e0800517 	ldw	r2,20(fp)
8113bea4:	e13ffd0d 	sth	r4,-12(fp)
8113bea8:	e0fffe05 	stb	r3,-8(fp)
8113beac:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113beb0:	e0bffd0b 	ldhu	r2,-12(fp)
8113beb4:	e0fffe03 	ldbu	r3,-8(fp)
8113beb8:	e13fff0b 	ldhu	r4,-4(fp)
8113bebc:	d9000615 	stw	r4,24(sp)
8113bec0:	d8000515 	stw	zero,20(sp)
8113bec4:	d8c00415 	stw	r3,16(sp)
8113bec8:	d8000315 	stw	zero,12(sp)
8113becc:	d8800215 	stw	r2,8(sp)
8113bed0:	e0800217 	ldw	r2,8(fp)
8113bed4:	d8800115 	stw	r2,4(sp)
8113bed8:	e0bffc17 	ldw	r2,-16(fp)
8113bedc:	d8800015 	stw	r2,0(sp)
8113bee0:	e1fffb17 	ldw	r7,-20(fp)
8113bee4:	000d883a 	mov	r6,zero
8113bee8:	e17ffa17 	ldw	r5,-24(fp)
8113beec:	e13ff917 	ldw	r4,-28(fp)
8113bef0:	113b4ac0 	call	8113b4ac <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8113bef4:	e037883a 	mov	sp,fp
8113bef8:	dfc00117 	ldw	ra,4(sp)
8113befc:	df000017 	ldw	fp,0(sp)
8113bf00:	dec00204 	addi	sp,sp,8
8113bf04:	f800283a 	ret

8113bf08 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113bf08:	defff004 	addi	sp,sp,-64
8113bf0c:	de00012e 	bgeu	sp,et,8113bf14 <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
8113bf10:	003b68fa 	trap	3
8113bf14:	dfc00f15 	stw	ra,60(sp)
8113bf18:	df000e15 	stw	fp,56(sp)
8113bf1c:	df000e04 	addi	fp,sp,56
8113bf20:	e13ff915 	stw	r4,-28(fp)
8113bf24:	e17ffa15 	stw	r5,-24(fp)
8113bf28:	e1bffb15 	stw	r6,-20(fp)
8113bf2c:	e1fffc15 	stw	r7,-16(fp)
8113bf30:	e1000317 	ldw	r4,12(fp)
8113bf34:	e0c00417 	ldw	r3,16(fp)
8113bf38:	e0800517 	ldw	r2,20(fp)
8113bf3c:	e13ffd0d 	sth	r4,-12(fp)
8113bf40:	e0fffe05 	stb	r3,-8(fp)
8113bf44:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8113bf48:	e0bffd0b 	ldhu	r2,-12(fp)
8113bf4c:	e0fffe03 	ldbu	r3,-8(fp)
8113bf50:	e13fff0b 	ldhu	r4,-4(fp)
8113bf54:	d8000615 	stw	zero,24(sp)
8113bf58:	d9000515 	stw	r4,20(sp)
8113bf5c:	d8000415 	stw	zero,16(sp)
8113bf60:	d8c00315 	stw	r3,12(sp)
8113bf64:	d8800215 	stw	r2,8(sp)
8113bf68:	e0800217 	ldw	r2,8(fp)
8113bf6c:	d8800115 	stw	r2,4(sp)
8113bf70:	e0bffc17 	ldw	r2,-16(fp)
8113bf74:	d8800015 	stw	r2,0(sp)
8113bf78:	000f883a 	mov	r7,zero
8113bf7c:	e1bffb17 	ldw	r6,-20(fp)
8113bf80:	e17ffa17 	ldw	r5,-24(fp)
8113bf84:	e13ff917 	ldw	r4,-28(fp)
8113bf88:	113b4ac0 	call	8113b4ac <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8113bf8c:	e037883a 	mov	sp,fp
8113bf90:	dfc00117 	ldw	ra,4(sp)
8113bf94:	df000017 	ldw	fp,0(sp)
8113bf98:	dec00204 	addi	sp,sp,8
8113bf9c:	f800283a 	ret

8113bfa0 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8113bfa0:	deffee04 	addi	sp,sp,-72
8113bfa4:	de00012e 	bgeu	sp,et,8113bfac <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
8113bfa8:	003b68fa 	trap	3
8113bfac:	dfc01115 	stw	ra,68(sp)
8113bfb0:	df001015 	stw	fp,64(sp)
8113bfb4:	df001004 	addi	fp,sp,64
8113bfb8:	e13ff715 	stw	r4,-36(fp)
8113bfbc:	e17ff815 	stw	r5,-32(fp)
8113bfc0:	e1bff915 	stw	r6,-28(fp)
8113bfc4:	e1fffa15 	stw	r7,-24(fp)
8113bfc8:	e1800417 	ldw	r6,16(fp)
8113bfcc:	e1400517 	ldw	r5,20(fp)
8113bfd0:	e1000617 	ldw	r4,24(fp)
8113bfd4:	e0c00717 	ldw	r3,28(fp)
8113bfd8:	e0800817 	ldw	r2,32(fp)
8113bfdc:	e1bffb0d 	sth	r6,-20(fp)
8113bfe0:	e17ffc05 	stb	r5,-16(fp)
8113bfe4:	e13ffd05 	stb	r4,-12(fp)
8113bfe8:	e0fffe0d 	sth	r3,-8(fp)
8113bfec:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113bff0:	e0bffb0b 	ldhu	r2,-20(fp)
8113bff4:	e0fffc03 	ldbu	r3,-16(fp)
8113bff8:	e13ffd03 	ldbu	r4,-12(fp)
8113bffc:	e17ffe0b 	ldhu	r5,-8(fp)
8113c000:	e1bfff0b 	ldhu	r6,-4(fp)
8113c004:	d9800615 	stw	r6,24(sp)
8113c008:	d9400515 	stw	r5,20(sp)
8113c00c:	d9000415 	stw	r4,16(sp)
8113c010:	d8c00315 	stw	r3,12(sp)
8113c014:	d8800215 	stw	r2,8(sp)
8113c018:	e0800317 	ldw	r2,12(fp)
8113c01c:	d8800115 	stw	r2,4(sp)
8113c020:	e0800217 	ldw	r2,8(fp)
8113c024:	d8800015 	stw	r2,0(sp)
8113c028:	e1fffa17 	ldw	r7,-24(fp)
8113c02c:	e1bff917 	ldw	r6,-28(fp)
8113c030:	e17ff817 	ldw	r5,-32(fp)
8113c034:	e13ff717 	ldw	r4,-36(fp)
8113c038:	113b4ac0 	call	8113b4ac <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8113c03c:	e037883a 	mov	sp,fp
8113c040:	dfc00117 	ldw	ra,4(sp)
8113c044:	df000017 	ldw	fp,0(sp)
8113c048:	dec00204 	addi	sp,sp,8
8113c04c:	f800283a 	ret

8113c050 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113c050:	defffb04 	addi	sp,sp,-20
8113c054:	de00012e 	bgeu	sp,et,8113c05c <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
8113c058:	003b68fa 	trap	3
8113c05c:	df000415 	stw	fp,16(sp)
8113c060:	df000404 	addi	fp,sp,16
8113c064:	e13ffc15 	stw	r4,-16(fp)
8113c068:	e17ffd15 	stw	r5,-12(fp)
8113c06c:	e1bffe15 	stw	r6,-8(fp)
8113c070:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8113c074:	e0bffc17 	ldw	r2,-16(fp)
8113c078:	10c01217 	ldw	r3,72(r2)
8113c07c:	e0800117 	ldw	r2,4(fp)
8113c080:	18800436 	bltu	r3,r2,8113c094 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
8113c084:	e0bffc17 	ldw	r2,-16(fp)
8113c088:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8113c08c:	10803fcc 	andi	r2,r2,255
8113c090:	10000226 	beq	r2,zero,8113c09c <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8113c094:	00bffa84 	movi	r2,-22
8113c098:	00001406 	br	8113c0ec <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
    }
    descriptor->read_address = read_address;
8113c09c:	e0bffd17 	ldw	r2,-12(fp)
8113c0a0:	e0fffe17 	ldw	r3,-8(fp)
8113c0a4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8113c0a8:	e0bffd17 	ldw	r2,-12(fp)
8113c0ac:	e0ffff17 	ldw	r3,-4(fp)
8113c0b0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113c0b4:	e0bffd17 	ldw	r2,-12(fp)
8113c0b8:	e0c00117 	ldw	r3,4(fp)
8113c0bc:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8113c0c0:	e0fffd17 	ldw	r3,-12(fp)
8113c0c4:	e0bffd17 	ldw	r2,-12(fp)
8113c0c8:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113c0cc:	e0c00217 	ldw	r3,8(fp)
8113c0d0:	00900034 	movhi	r2,16384
8113c0d4:	10bfffc4 	addi	r2,r2,-1
8113c0d8:	1884703a 	and	r2,r3,r2
8113c0dc:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8113c0e0:	e0bffd17 	ldw	r2,-12(fp)
8113c0e4:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8113c0e8:	0005883a 	mov	r2,zero
}
8113c0ec:	e037883a 	mov	sp,fp
8113c0f0:	df000017 	ldw	fp,0(sp)
8113c0f4:	dec00104 	addi	sp,sp,4
8113c0f8:	f800283a 	ret

8113c0fc <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113c0fc:	defff404 	addi	sp,sp,-48
8113c100:	de00012e 	bgeu	sp,et,8113c108 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
8113c104:	003b68fa 	trap	3
8113c108:	df000b15 	stw	fp,44(sp)
8113c10c:	df000b04 	addi	fp,sp,44
8113c110:	e13ff715 	stw	r4,-36(fp)
8113c114:	e17ff815 	stw	r5,-32(fp)
8113c118:	e1bff915 	stw	r6,-28(fp)
8113c11c:	e1fffa15 	stw	r7,-24(fp)
8113c120:	e1800517 	ldw	r6,20(fp)
8113c124:	e1400617 	ldw	r5,24(fp)
8113c128:	e1000717 	ldw	r4,28(fp)
8113c12c:	e0c00817 	ldw	r3,32(fp)
8113c130:	e0800917 	ldw	r2,36(fp)
8113c134:	e1bffb0d 	sth	r6,-20(fp)
8113c138:	e17ffc05 	stb	r5,-16(fp)
8113c13c:	e13ffd05 	stb	r4,-12(fp)
8113c140:	e0fffe0d 	sth	r3,-8(fp)
8113c144:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8113c148:	e0bff717 	ldw	r2,-36(fp)
8113c14c:	10c01217 	ldw	r3,72(r2)
8113c150:	e0800317 	ldw	r2,12(fp)
8113c154:	18801936 	bltu	r3,r2,8113c1bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
8113c158:	e13ff717 	ldw	r4,-36(fp)
8113c15c:	20801317 	ldw	r2,76(r4)
8113c160:	20c01417 	ldw	r3,80(r4)
8113c164:	e13ffe0b 	ldhu	r4,-8(fp)
8113c168:	213fffcc 	andi	r4,r4,65535
8113c16c:	2015883a 	mov	r10,r4
8113c170:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8113c174:	1ac01136 	bltu	r3,r11,8113c1bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113c178:	58c0011e 	bne	r11,r3,8113c180 <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
8113c17c:	12800f36 	bltu	r2,r10,8113c1bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113c180:	e13ff717 	ldw	r4,-36(fp)
8113c184:	20801317 	ldw	r2,76(r4)
8113c188:	20c01417 	ldw	r3,80(r4)
8113c18c:	e13fff0b 	ldhu	r4,-4(fp)
8113c190:	213fffcc 	andi	r4,r4,65535
8113c194:	2011883a 	mov	r8,r4
8113c198:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8113c19c:	1a400736 	bltu	r3,r9,8113c1bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113c1a0:	48c0011e 	bne	r9,r3,8113c1a8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
8113c1a4:	12000536 	bltu	r2,r8,8113c1bc <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8113c1a8:	e0bff717 	ldw	r2,-36(fp)
8113c1ac:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113c1b0:	10803fcc 	andi	r2,r2,255
8113c1b4:	10800060 	cmpeqi	r2,r2,1
8113c1b8:	1000021e 	bne	r2,zero,8113c1c4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8113c1bc:	00bffa84 	movi	r2,-22
8113c1c0:	00003106 	br	8113c288 <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
    }
    
    descriptor->read_address_high = read_address_high;
8113c1c4:	e0bff817 	ldw	r2,-32(fp)
8113c1c8:	e0fff917 	ldw	r3,-28(fp)
8113c1cc:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8113c1d0:	e0bff817 	ldw	r2,-32(fp)
8113c1d4:	e0fffa17 	ldw	r3,-24(fp)
8113c1d8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8113c1dc:	e0bff817 	ldw	r2,-32(fp)
8113c1e0:	e0c00117 	ldw	r3,4(fp)
8113c1e4:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8113c1e8:	e0bff817 	ldw	r2,-32(fp)
8113c1ec:	e0c00217 	ldw	r3,8(fp)
8113c1f0:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113c1f4:	e0bff817 	ldw	r2,-32(fp)
8113c1f8:	e0c00317 	ldw	r3,12(fp)
8113c1fc:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8113c200:	e0bff817 	ldw	r2,-32(fp)
8113c204:	e0fffb0b 	ldhu	r3,-20(fp)
8113c208:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8113c20c:	e0bff817 	ldw	r2,-32(fp)
8113c210:	e0fffc03 	ldbu	r3,-16(fp)
8113c214:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8113c218:	e0bff817 	ldw	r2,-32(fp)
8113c21c:	e0fffd03 	ldbu	r3,-12(fp)
8113c220:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8113c224:	e0bff817 	ldw	r2,-32(fp)
8113c228:	e0fffe0b 	ldhu	r3,-8(fp)
8113c22c:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8113c230:	e0bff817 	ldw	r2,-32(fp)
8113c234:	e0ffff0b 	ldhu	r3,-4(fp)
8113c238:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8113c23c:	e0bff817 	ldw	r2,-32(fp)
8113c240:	1019883a 	mov	r12,r2
8113c244:	001b883a 	mov	r13,zero
8113c248:	e33ff515 	stw	r12,-44(fp)
8113c24c:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8113c250:	e0fff517 	ldw	r3,-44(fp)
8113c254:	e0bff817 	ldw	r2,-32(fp)
8113c258:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8113c25c:	e0fff617 	ldw	r3,-40(fp)
8113c260:	e0bff817 	ldw	r2,-32(fp)
8113c264:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113c268:	e0c00417 	ldw	r3,16(fp)
8113c26c:	00900034 	movhi	r2,16384
8113c270:	10bfffc4 	addi	r2,r2,-1
8113c274:	1884703a 	and	r2,r3,r2
8113c278:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8113c27c:	e0bff817 	ldw	r2,-32(fp)
8113c280:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8113c284:	0005883a 	mov	r2,zero
}
8113c288:	e037883a 	mov	sp,fp
8113c28c:	df000017 	ldw	fp,0(sp)
8113c290:	dec00104 	addi	sp,sp,4
8113c294:	f800283a 	ret

8113c298 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
8113c298:	defff804 	addi	sp,sp,-32
8113c29c:	de00012e 	bgeu	sp,et,8113c2a4 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
8113c2a0:	003b68fa 	trap	3
8113c2a4:	dfc00715 	stw	ra,28(sp)
8113c2a8:	df000615 	stw	fp,24(sp)
8113c2ac:	df000604 	addi	fp,sp,24
8113c2b0:	e13ffc15 	stw	r4,-16(fp)
8113c2b4:	e17ffd15 	stw	r5,-12(fp)
8113c2b8:	e1bffe15 	stw	r6,-8(fp)
8113c2bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113c2c0:	e0800317 	ldw	r2,12(fp)
8113c2c4:	d8800115 	stw	r2,4(sp)
8113c2c8:	e0800217 	ldw	r2,8(fp)
8113c2cc:	d8800015 	stw	r2,0(sp)
8113c2d0:	e1ffff17 	ldw	r7,-4(fp)
8113c2d4:	e1bffe17 	ldw	r6,-8(fp)
8113c2d8:	e17ffd17 	ldw	r5,-12(fp)
8113c2dc:	e13ffc17 	ldw	r4,-16(fp)
8113c2e0:	113c0500 	call	8113c050 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
8113c2e4:	e037883a 	mov	sp,fp
8113c2e8:	dfc00117 	ldw	ra,4(sp)
8113c2ec:	df000017 	ldw	fp,0(sp)
8113c2f0:	dec00204 	addi	sp,sp,8
8113c2f4:	f800283a 	ret

8113c2f8 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113c2f8:	defff804 	addi	sp,sp,-32
8113c2fc:	de00012e 	bgeu	sp,et,8113c304 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
8113c300:	003b68fa 	trap	3
8113c304:	dfc00715 	stw	ra,28(sp)
8113c308:	df000615 	stw	fp,24(sp)
8113c30c:	df000604 	addi	fp,sp,24
8113c310:	e13ffc15 	stw	r4,-16(fp)
8113c314:	e17ffd15 	stw	r5,-12(fp)
8113c318:	e1bffe15 	stw	r6,-8(fp)
8113c31c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113c320:	e0800217 	ldw	r2,8(fp)
8113c324:	d8800115 	stw	r2,4(sp)
8113c328:	e0bfff17 	ldw	r2,-4(fp)
8113c32c:	d8800015 	stw	r2,0(sp)
8113c330:	e1fffe17 	ldw	r7,-8(fp)
8113c334:	000d883a 	mov	r6,zero
8113c338:	e17ffd17 	ldw	r5,-12(fp)
8113c33c:	e13ffc17 	ldw	r4,-16(fp)
8113c340:	113c0500 	call	8113c050 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
8113c344:	e037883a 	mov	sp,fp
8113c348:	dfc00117 	ldw	ra,4(sp)
8113c34c:	df000017 	ldw	fp,0(sp)
8113c350:	dec00204 	addi	sp,sp,8
8113c354:	f800283a 	ret

8113c358 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113c358:	defff804 	addi	sp,sp,-32
8113c35c:	de00012e 	bgeu	sp,et,8113c364 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
8113c360:	003b68fa 	trap	3
8113c364:	dfc00715 	stw	ra,28(sp)
8113c368:	df000615 	stw	fp,24(sp)
8113c36c:	df000604 	addi	fp,sp,24
8113c370:	e13ffc15 	stw	r4,-16(fp)
8113c374:	e17ffd15 	stw	r5,-12(fp)
8113c378:	e1bffe15 	stw	r6,-8(fp)
8113c37c:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113c380:	e0800217 	ldw	r2,8(fp)
8113c384:	d8800115 	stw	r2,4(sp)
8113c388:	e0bfff17 	ldw	r2,-4(fp)
8113c38c:	d8800015 	stw	r2,0(sp)
8113c390:	000f883a 	mov	r7,zero
8113c394:	e1bffe17 	ldw	r6,-8(fp)
8113c398:	e17ffd17 	ldw	r5,-12(fp)
8113c39c:	e13ffc17 	ldw	r4,-16(fp)
8113c3a0:	113c0500 	call	8113c050 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8113c3a4:	e037883a 	mov	sp,fp
8113c3a8:	dfc00117 	ldw	ra,4(sp)
8113c3ac:	df000017 	ldw	fp,0(sp)
8113c3b0:	dec00204 	addi	sp,sp,8
8113c3b4:	f800283a 	ret

8113c3b8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8113c3b8:	deffee04 	addi	sp,sp,-72
8113c3bc:	de00012e 	bgeu	sp,et,8113c3c4 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
8113c3c0:	003b68fa 	trap	3
8113c3c4:	dfc01115 	stw	ra,68(sp)
8113c3c8:	df001015 	stw	fp,64(sp)
8113c3cc:	df001004 	addi	fp,sp,64
8113c3d0:	e13ff915 	stw	r4,-28(fp)
8113c3d4:	e17ffa15 	stw	r5,-24(fp)
8113c3d8:	e1bffb15 	stw	r6,-20(fp)
8113c3dc:	e1fffc15 	stw	r7,-16(fp)
8113c3e0:	e1000417 	ldw	r4,16(fp)
8113c3e4:	e0c00517 	ldw	r3,20(fp)
8113c3e8:	e0800617 	ldw	r2,24(fp)
8113c3ec:	e13ffd0d 	sth	r4,-12(fp)
8113c3f0:	e0fffe05 	stb	r3,-8(fp)
8113c3f4:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8113c3f8:	e0bffd0b 	ldhu	r2,-12(fp)
8113c3fc:	e0fffe03 	ldbu	r3,-8(fp)
8113c400:	e13fff0b 	ldhu	r4,-4(fp)
8113c404:	d9000815 	stw	r4,32(sp)
8113c408:	d8000715 	stw	zero,28(sp)
8113c40c:	d8c00615 	stw	r3,24(sp)
8113c410:	d8000515 	stw	zero,20(sp)
8113c414:	d8800415 	stw	r2,16(sp)
8113c418:	e0800317 	ldw	r2,12(fp)
8113c41c:	d8800315 	stw	r2,12(sp)
8113c420:	e0800217 	ldw	r2,8(fp)
8113c424:	d8800215 	stw	r2,8(sp)
8113c428:	e0bffc17 	ldw	r2,-16(fp)
8113c42c:	d8800115 	stw	r2,4(sp)
8113c430:	e0bffb17 	ldw	r2,-20(fp)
8113c434:	d8800015 	stw	r2,0(sp)
8113c438:	000f883a 	mov	r7,zero
8113c43c:	000d883a 	mov	r6,zero
8113c440:	e17ffa17 	ldw	r5,-24(fp)
8113c444:	e13ff917 	ldw	r4,-28(fp)
8113c448:	113c0fc0 	call	8113c0fc <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8113c44c:	e037883a 	mov	sp,fp
8113c450:	dfc00117 	ldw	ra,4(sp)
8113c454:	df000017 	ldw	fp,0(sp)
8113c458:	dec00204 	addi	sp,sp,8
8113c45c:	f800283a 	ret

8113c460 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113c460:	deffee04 	addi	sp,sp,-72
8113c464:	de00012e 	bgeu	sp,et,8113c46c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
8113c468:	003b68fa 	trap	3
8113c46c:	dfc01115 	stw	ra,68(sp)
8113c470:	df001015 	stw	fp,64(sp)
8113c474:	df001004 	addi	fp,sp,64
8113c478:	e13ff915 	stw	r4,-28(fp)
8113c47c:	e17ffa15 	stw	r5,-24(fp)
8113c480:	e1bffb15 	stw	r6,-20(fp)
8113c484:	e1fffc15 	stw	r7,-16(fp)
8113c488:	e1000417 	ldw	r4,16(fp)
8113c48c:	e0c00517 	ldw	r3,20(fp)
8113c490:	e0800617 	ldw	r2,24(fp)
8113c494:	e13ffd0d 	sth	r4,-12(fp)
8113c498:	e0fffe05 	stb	r3,-8(fp)
8113c49c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113c4a0:	e0bffd0b 	ldhu	r2,-12(fp)
8113c4a4:	e0fffe03 	ldbu	r3,-8(fp)
8113c4a8:	e13fff0b 	ldhu	r4,-4(fp)
8113c4ac:	d8000815 	stw	zero,32(sp)
8113c4b0:	d9000715 	stw	r4,28(sp)
8113c4b4:	d8000615 	stw	zero,24(sp)
8113c4b8:	d8c00515 	stw	r3,20(sp)
8113c4bc:	d8800415 	stw	r2,16(sp)
8113c4c0:	e0800317 	ldw	r2,12(fp)
8113c4c4:	d8800315 	stw	r2,12(sp)
8113c4c8:	e0800217 	ldw	r2,8(fp)
8113c4cc:	d8800215 	stw	r2,8(sp)
8113c4d0:	d8000115 	stw	zero,4(sp)
8113c4d4:	d8000015 	stw	zero,0(sp)
8113c4d8:	e1fffc17 	ldw	r7,-16(fp)
8113c4dc:	e1bffb17 	ldw	r6,-20(fp)
8113c4e0:	e17ffa17 	ldw	r5,-24(fp)
8113c4e4:	e13ff917 	ldw	r4,-28(fp)
8113c4e8:	113c0fc0 	call	8113c0fc <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
8113c4ec:	e037883a 	mov	sp,fp
8113c4f0:	dfc00117 	ldw	ra,4(sp)
8113c4f4:	df000017 	ldw	fp,0(sp)
8113c4f8:	dec00204 	addi	sp,sp,8
8113c4fc:	f800283a 	ret

8113c500 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113c500:	deffec04 	addi	sp,sp,-80
8113c504:	de00012e 	bgeu	sp,et,8113c50c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
8113c508:	003b68fa 	trap	3
8113c50c:	dfc01315 	stw	ra,76(sp)
8113c510:	df001215 	stw	fp,72(sp)
8113c514:	df001204 	addi	fp,sp,72
8113c518:	e13ff715 	stw	r4,-36(fp)
8113c51c:	e17ff815 	stw	r5,-32(fp)
8113c520:	e1bff915 	stw	r6,-28(fp)
8113c524:	e1fffa15 	stw	r7,-24(fp)
8113c528:	e1800617 	ldw	r6,24(fp)
8113c52c:	e1400717 	ldw	r5,28(fp)
8113c530:	e1000817 	ldw	r4,32(fp)
8113c534:	e0c00917 	ldw	r3,36(fp)
8113c538:	e0800a17 	ldw	r2,40(fp)
8113c53c:	e1bffb0d 	sth	r6,-20(fp)
8113c540:	e17ffc05 	stb	r5,-16(fp)
8113c544:	e13ffd05 	stb	r4,-12(fp)
8113c548:	e0fffe0d 	sth	r3,-8(fp)
8113c54c:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113c550:	e0bffb0b 	ldhu	r2,-20(fp)
8113c554:	e0fffc03 	ldbu	r3,-16(fp)
8113c558:	e13ffd03 	ldbu	r4,-12(fp)
8113c55c:	e17ffe0b 	ldhu	r5,-8(fp)
8113c560:	e1bfff0b 	ldhu	r6,-4(fp)
8113c564:	d9800815 	stw	r6,32(sp)
8113c568:	d9400715 	stw	r5,28(sp)
8113c56c:	d9000615 	stw	r4,24(sp)
8113c570:	d8c00515 	stw	r3,20(sp)
8113c574:	d8800415 	stw	r2,16(sp)
8113c578:	e0800517 	ldw	r2,20(fp)
8113c57c:	d8800315 	stw	r2,12(sp)
8113c580:	e0800417 	ldw	r2,16(fp)
8113c584:	d8800215 	stw	r2,8(sp)
8113c588:	e0800317 	ldw	r2,12(fp)
8113c58c:	d8800115 	stw	r2,4(sp)
8113c590:	e0800217 	ldw	r2,8(fp)
8113c594:	d8800015 	stw	r2,0(sp)
8113c598:	e1fffa17 	ldw	r7,-24(fp)
8113c59c:	e1bff917 	ldw	r6,-28(fp)
8113c5a0:	e17ff817 	ldw	r5,-32(fp)
8113c5a4:	e13ff717 	ldw	r4,-36(fp)
8113c5a8:	113c0fc0 	call	8113c0fc <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8113c5ac:	e037883a 	mov	sp,fp
8113c5b0:	dfc00117 	ldw	ra,4(sp)
8113c5b4:	df000017 	ldw	fp,0(sp)
8113c5b8:	dec00204 	addi	sp,sp,8
8113c5bc:	f800283a 	ret

8113c5c0 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8113c5c0:	defffc04 	addi	sp,sp,-16
8113c5c4:	de00012e 	bgeu	sp,et,8113c5cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
8113c5c8:	003b68fa 	trap	3
8113c5cc:	df000315 	stw	fp,12(sp)
8113c5d0:	df000304 	addi	fp,sp,12
8113c5d4:	e13ffe15 	stw	r4,-8(fp)
8113c5d8:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8113c5dc:	e0bfff17 	ldw	r2,-4(fp)
8113c5e0:	1000021e 	bne	r2,zero,8113c5ec <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113c5e4:	00bffa84 	movi	r2,-22
8113c5e8:	00002f06 	br	8113c6a8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8113c5ec:	e0bfff17 	ldw	r2,-4(fp)
8113c5f0:	10c00317 	ldw	r3,12(r2)
8113c5f4:	e0bfff17 	ldw	r2,-4(fp)
8113c5f8:	18800226 	beq	r3,r2,8113c604 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113c5fc:	00bffa84 	movi	r2,-22
8113c600:	00002906 	br	8113c6a8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == NULL)
8113c604:	e0bffe17 	ldw	r2,-8(fp)
8113c608:	10800017 	ldw	r2,0(r2)
8113c60c:	1000051e 	bne	r2,zero,8113c624 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8113c610:	e0bffe17 	ldw	r2,-8(fp)
8113c614:	e0ffff17 	ldw	r3,-4(fp)
8113c618:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8113c61c:	0005883a 	mov	r2,zero
8113c620:	00002106 	br	8113c6a8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == descriptor)
8113c624:	e0bffe17 	ldw	r2,-8(fp)
8113c628:	10c00017 	ldw	r3,0(r2)
8113c62c:	e0bfff17 	ldw	r2,-4(fp)
8113c630:	1880021e 	bne	r3,r2,8113c63c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8113c634:	00bffa84 	movi	r2,-22
8113c638:	00001b06 	br	8113c6a8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113c63c:	e0bffe17 	ldw	r2,-8(fp)
8113c640:	10800017 	ldw	r2,0(r2)
8113c644:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113c648:	00000906 	br	8113c670 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8113c64c:	e0bffd17 	ldw	r2,-12(fp)
8113c650:	10c00317 	ldw	r3,12(r2)
8113c654:	e0bfff17 	ldw	r2,-4(fp)
8113c658:	1880021e 	bne	r3,r2,8113c664 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8113c65c:	00bffa84 	movi	r2,-22
8113c660:	00001106 	br	8113c6a8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8113c664:	e0bffd17 	ldw	r2,-12(fp)
8113c668:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
8113c66c:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113c670:	e0bffd17 	ldw	r2,-12(fp)
8113c674:	10800317 	ldw	r2,12(r2)
8113c678:	e0fffe17 	ldw	r3,-8(fp)
8113c67c:	18c00017 	ldw	r3,0(r3)
8113c680:	10fff21e 	bne	r2,r3,8113c64c <__reset+0xfb11c64c>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8113c684:	e0ffff17 	ldw	r3,-4(fp)
8113c688:	e0bffd17 	ldw	r2,-12(fp)
8113c68c:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8113c690:	e0bffe17 	ldw	r2,-8(fp)
8113c694:	10800017 	ldw	r2,0(r2)
8113c698:	1007883a 	mov	r3,r2
8113c69c:	e0bfff17 	ldw	r2,-4(fp)
8113c6a0:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8113c6a4:	0005883a 	mov	r2,zero
}
8113c6a8:	e037883a 	mov	sp,fp
8113c6ac:	df000017 	ldw	fp,0(sp)
8113c6b0:	dec00104 	addi	sp,sp,4
8113c6b4:	f800283a 	ret

8113c6b8 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8113c6b8:	defff804 	addi	sp,sp,-32
8113c6bc:	de00012e 	bgeu	sp,et,8113c6c4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
8113c6c0:	003b68fa 	trap	3
8113c6c4:	df000715 	stw	fp,28(sp)
8113c6c8:	df000704 	addi	fp,sp,28
8113c6cc:	e13ffe15 	stw	r4,-8(fp)
8113c6d0:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
8113c6d4:	e13fff17 	ldw	r4,-4(fp)
8113c6d8:	2000021e 	bne	r4,zero,8113c6e4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113c6dc:	00bffa84 	movi	r2,-22
8113c6e0:	00005906 	br	8113c848 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
8113c6e4:	e13fff17 	ldw	r4,-4(fp)
8113c6e8:	2015883a 	mov	r10,r4
8113c6ec:	0017883a 	mov	r11,zero
8113c6f0:	e2bffc15 	stw	r10,-16(fp)
8113c6f4:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113c6f8:	e13fff17 	ldw	r4,-4(fp)
8113c6fc:	21400317 	ldw	r5,12(r4)
8113c700:	e13ffc17 	ldw	r4,-16(fp)
8113c704:	29000626 	beq	r5,r4,8113c720 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8113c708:	e13fff17 	ldw	r4,-4(fp)
8113c70c:	21400b17 	ldw	r5,44(r4)
8113c710:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113c714:	29000226 	beq	r5,r4,8113c720 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113c718:	00bffa84 	movi	r2,-22
8113c71c:	00004a06 	br	8113c848 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	if (*list == NULL)
8113c720:	e13ffe17 	ldw	r4,-8(fp)
8113c724:	21000017 	ldw	r4,0(r4)
8113c728:	2000051e 	bne	r4,zero,8113c740 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
8113c72c:	e0bffe17 	ldw	r2,-8(fp)
8113c730:	e0ffff17 	ldw	r3,-4(fp)
8113c734:	10c00015 	stw	r3,0(r2)
		return 0;
8113c738:	0005883a 	mov	r2,zero
8113c73c:	00004206 	br	8113c848 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	if (*list == descriptor)
8113c740:	e13ffe17 	ldw	r4,-8(fp)
8113c744:	21400017 	ldw	r5,0(r4)
8113c748:	e13fff17 	ldw	r4,-4(fp)
8113c74c:	2900021e 	bne	r5,r4,8113c758 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8113c750:	00bffa84 	movi	r2,-22
8113c754:	00003c06 	br	8113c848 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113c758:	e13ffe17 	ldw	r4,-8(fp)
8113c75c:	21000017 	ldw	r4,0(r4)
8113c760:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
8113c764:	e13ffe17 	ldw	r4,-8(fp)
8113c768:	21000017 	ldw	r4,0(r4)
8113c76c:	2011883a 	mov	r8,r4
8113c770:	0013883a 	mov	r9,zero
8113c774:	e23ffa15 	stw	r8,-24(fp)
8113c778:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113c77c:	00001806 	br	8113c7e0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8113c780:	e13fff17 	ldw	r4,-4(fp)
8113c784:	200d883a 	mov	r6,r4
8113c788:	000f883a 	mov	r7,zero
8113c78c:	e1bffc15 	stw	r6,-16(fp)
8113c790:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8113c794:	e13ff917 	ldw	r4,-28(fp)
8113c798:	21400317 	ldw	r5,12(r4)
8113c79c:	e13ffc17 	ldw	r4,-16(fp)
8113c7a0:	2900061e 	bne	r5,r4,8113c7bc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8113c7a4:	e13ff917 	ldw	r4,-28(fp)
8113c7a8:	21400b17 	ldw	r5,44(r4)
8113c7ac:	e13ffd17 	ldw	r4,-12(fp)
8113c7b0:	2900021e 	bne	r5,r4,8113c7bc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8113c7b4:	00bffa84 	movi	r2,-22
8113c7b8:	00002306 	br	8113c848 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113c7bc:	e13ff917 	ldw	r4,-28(fp)
8113c7c0:	21000317 	ldw	r4,12(r4)
8113c7c4:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8113c7c8:	e13ff917 	ldw	r4,-28(fp)
8113c7cc:	21000b17 	ldw	r4,44(r4)
8113c7d0:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8113c7d4:	e13ffc17 	ldw	r4,-16(fp)
8113c7d8:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113c7dc:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113c7e0:	e13ff917 	ldw	r4,-28(fp)
8113c7e4:	21400317 	ldw	r5,12(r4)
8113c7e8:	e13ffa17 	ldw	r4,-24(fp)
8113c7ec:	29000426 	beq	r5,r4,8113c800 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8113c7f0:	e13ff917 	ldw	r4,-28(fp)
8113c7f4:	21400b17 	ldw	r5,44(r4)
8113c7f8:	e13ffb17 	ldw	r4,-20(fp)
8113c7fc:	293fe01e 	bne	r5,r4,8113c780 <__reset+0xfb11c780>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
8113c800:	e13fff17 	ldw	r4,-4(fp)
8113c804:	2005883a 	mov	r2,r4
8113c808:	0007883a 	mov	r3,zero
8113c80c:	e0bffc15 	stw	r2,-16(fp)
8113c810:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8113c814:	e0fffc17 	ldw	r3,-16(fp)
8113c818:	e0bff917 	ldw	r2,-28(fp)
8113c81c:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8113c820:	e0fffd17 	ldw	r3,-12(fp)
8113c824:	e0bff917 	ldw	r2,-28(fp)
8113c828:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8113c82c:	e0fffa17 	ldw	r3,-24(fp)
8113c830:	e0bfff17 	ldw	r2,-4(fp)
8113c834:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8113c838:	e0fffb17 	ldw	r3,-20(fp)
8113c83c:	e0bfff17 	ldw	r2,-4(fp)
8113c840:	10c00b15 	stw	r3,44(r2)
	return 0;
8113c844:	0005883a 	mov	r2,zero
}
8113c848:	e037883a 	mov	sp,fp
8113c84c:	df000017 	ldw	fp,0(sp)
8113c850:	dec00104 	addi	sp,sp,4
8113c854:	f800283a 	ret

8113c858 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8113c858:	defffc04 	addi	sp,sp,-16
8113c85c:	de00012e 	bgeu	sp,et,8113c864 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
8113c860:	003b68fa 	trap	3
8113c864:	df000315 	stw	fp,12(sp)
8113c868:	df000304 	addi	fp,sp,12
8113c86c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8113c870:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8113c874:	e0bfff17 	ldw	r2,-4(fp)
8113c878:	1000021e 	bne	r2,zero,8113c884 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
8113c87c:	00bffa84 	movi	r2,-22
8113c880:	00001906 	br	8113c8e8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8113c884:	e0bfff17 	ldw	r2,-4(fp)
8113c888:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8113c88c:	00000a06 	br	8113c8b8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8113c890:	e0bffd17 	ldw	r2,-12(fp)
8113c894:	10800717 	ldw	r2,28(r2)
8113c898:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113c89c:	e0bffe17 	ldw	r2,-8(fp)
8113c8a0:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113c8a4:	e0bffd17 	ldw	r2,-12(fp)
8113c8a8:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8113c8ac:	e0bffd17 	ldw	r2,-12(fp)
8113c8b0:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8113c8b4:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8113c8b8:	e0bffd17 	ldw	r2,-12(fp)
8113c8bc:	10c00317 	ldw	r3,12(r2)
8113c8c0:	e0bfff17 	ldw	r2,-4(fp)
8113c8c4:	18bff21e 	bne	r3,r2,8113c890 <__reset+0xfb11c890>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
8113c8c8:	e0bffd17 	ldw	r2,-12(fp)
8113c8cc:	10800717 	ldw	r2,28(r2)
8113c8d0:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113c8d4:	e0bffe17 	ldw	r2,-8(fp)
8113c8d8:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8113c8dc:	e0bffd17 	ldw	r2,-12(fp)
8113c8e0:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8113c8e4:	0005883a 	mov	r2,zero
}
8113c8e8:	e037883a 	mov	sp,fp
8113c8ec:	df000017 	ldw	fp,0(sp)
8113c8f0:	dec00104 	addi	sp,sp,4
8113c8f4:	f800283a 	ret

8113c8f8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
8113c8f8:	defff804 	addi	sp,sp,-32
8113c8fc:	de00012e 	bgeu	sp,et,8113c904 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
8113c900:	003b68fa 	trap	3
8113c904:	df000715 	stw	fp,28(sp)
8113c908:	df000704 	addi	fp,sp,28
8113c90c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8113c910:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8113c914:	e13fff17 	ldw	r4,-4(fp)
8113c918:	2000021e 	bne	r4,zero,8113c924 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
8113c91c:	00bffa84 	movi	r2,-22
8113c920:	00002806 	br	8113c9c4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8113c924:	e13fff17 	ldw	r4,-4(fp)
8113c928:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8113c92c:	e13fff17 	ldw	r4,-4(fp)
8113c930:	2005883a 	mov	r2,r4
8113c934:	0007883a 	mov	r3,zero
8113c938:	e0bffb15 	stw	r2,-20(fp)
8113c93c:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113c940:	00001006 	br	8113c984 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
8113c944:	e0bff917 	ldw	r2,-28(fp)
8113c948:	10800f17 	ldw	r2,60(r2)
8113c94c:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113c950:	e0bffa17 	ldw	r2,-24(fp)
8113c954:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113c958:	e0bff917 	ldw	r2,-28(fp)
8113c95c:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113c960:	e0bff917 	ldw	r2,-28(fp)
8113c964:	10800317 	ldw	r2,12(r2)
8113c968:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8113c96c:	e0bff917 	ldw	r2,-28(fp)
8113c970:	10800b17 	ldw	r2,44(r2)
8113c974:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8113c978:	e0bffd17 	ldw	r2,-12(fp)
8113c97c:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113c980:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113c984:	e0bff917 	ldw	r2,-28(fp)
8113c988:	10c00317 	ldw	r3,12(r2)
8113c98c:	e0bffb17 	ldw	r2,-20(fp)
8113c990:	18800426 	beq	r3,r2,8113c9a4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8113c994:	e0bff917 	ldw	r2,-28(fp)
8113c998:	10c00b17 	ldw	r3,44(r2)
8113c99c:	e0bffc17 	ldw	r2,-16(fp)
8113c9a0:	18bfe81e 	bne	r3,r2,8113c944 <__reset+0xfb11c944>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8113c9a4:	e0bff917 	ldw	r2,-28(fp)
8113c9a8:	10800f17 	ldw	r2,60(r2)
8113c9ac:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113c9b0:	e0bffa17 	ldw	r2,-24(fp)
8113c9b4:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8113c9b8:	e0bff917 	ldw	r2,-28(fp)
8113c9bc:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
8113c9c0:	0005883a 	mov	r2,zero
}
8113c9c4:	e037883a 	mov	sp,fp
8113c9c8:	df000017 	ldw	fp,0(sp)
8113c9cc:	dec00104 	addi	sp,sp,4
8113c9d0:	f800283a 	ret

8113c9d4 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8113c9d4:	deffeb04 	addi	sp,sp,-84
8113c9d8:	de00012e 	bgeu	sp,et,8113c9e0 <alt_msgdma_start_prefetcher_with_list_addr+0xc>
8113c9dc:	003b68fa 	trap	3
8113c9e0:	dfc01415 	stw	ra,80(sp)
8113c9e4:	df001315 	stw	fp,76(sp)
8113c9e8:	df001304 	addi	fp,sp,76
8113c9ec:	e13ffb15 	stw	r4,-20(fp)
8113c9f0:	e17ffc15 	stw	r5,-16(fp)
8113c9f4:	e1bffd15 	stw	r6,-12(fp)
8113c9f8:	3807883a 	mov	r3,r7
8113c9fc:	e0800217 	ldw	r2,8(fp)
8113ca00:	e0fffe05 	stb	r3,-8(fp)
8113ca04:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
8113ca08:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
8113ca0c:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
8113ca10:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8113ca14:	e0bffc17 	ldw	r2,-16(fp)
8113ca18:	e0bff815 	stw	r2,-32(fp)
8113ca1c:	e0bffd17 	ldw	r2,-12(fp)
8113ca20:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
8113ca24:	e0bffb17 	ldw	r2,-20(fp)
8113ca28:	10801817 	ldw	r2,96(r2)
8113ca2c:	e0bff615 	stw	r2,-40(fp)
8113ca30:	e03ff70d 	sth	zero,-36(fp)
8113ca34:	e0bff70b 	ldhu	r2,-36(fp)
8113ca38:	e0fffa04 	addi	r3,fp,-24
8113ca3c:	180d883a 	mov	r6,r3
8113ca40:	100b883a 	mov	r5,r2
8113ca44:	e13ff617 	ldw	r4,-40(fp)
8113ca48:	1131b800 	call	81131b80 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8113ca4c:	e0bffb17 	ldw	r2,-20(fp)
8113ca50:	10800617 	ldw	r2,24(r2)
8113ca54:	10800037 	ldwio	r2,0(r2)
8113ca58:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8113ca5c:	e0bfed17 	ldw	r2,-76(fp)
8113ca60:	1080004c 	andi	r2,r2,1
8113ca64:	10000626 	beq	r2,zero,8113ca80 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
8113ca68:	e0bffb17 	ldw	r2,-20(fp)
8113ca6c:	10801817 	ldw	r2,96(r2)
8113ca70:	1009883a 	mov	r4,r2
8113ca74:	1131f080 	call	81131f08 <OSSemPost>
		return -EBUSY;
8113ca78:	00bffc04 	movi	r2,-16
8113ca7c:	00009606 	br	8113ccd8 <alt_msgdma_start_prefetcher_with_list_addr+0x304>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113ca80:	00800804 	movi	r2,32
8113ca84:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113ca88:	0005303a 	rdctl	r2,status
8113ca8c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113ca90:	e0fff217 	ldw	r3,-56(fp)
8113ca94:	00bfff84 	movi	r2,-2
8113ca98:	1884703a 	and	r2,r3,r2
8113ca9c:	1001703a 	wrctl	status,r2
  
  return context;
8113caa0:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8113caa4:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113caa8:	e0bffb17 	ldw	r2,-20(fp)
8113caac:	10800317 	ldw	r2,12(r2)
8113cab0:	10800104 	addi	r2,r2,4
8113cab4:	e0ffee17 	ldw	r3,-72(fp)
8113cab8:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8113cabc:	e0bffb17 	ldw	r2,-20(fp)
8113cac0:	10800317 	ldw	r2,12(r2)
8113cac4:	e0fffb17 	ldw	r3,-20(fp)
8113cac8:	18c00317 	ldw	r3,12(r3)
8113cacc:	18c00037 	ldwio	r3,0(r3)
8113cad0:	10c00035 	stwio	r3,0(r2)
8113cad4:	e0bfef17 	ldw	r2,-68(fp)
8113cad8:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113cadc:	e0bff017 	ldw	r2,-64(fp)
8113cae0:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8113cae4:	e0bffb17 	ldw	r2,-20(fp)
8113cae8:	10800b17 	ldw	r2,44(r2)
8113caec:	10002326 	beq	r2,zero,8113cb7c <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8113caf0:	e0bffb17 	ldw	r2,-20(fp)
8113caf4:	10c00d17 	ldw	r3,52(r2)
8113caf8:	e0bfee17 	ldw	r2,-72(fp)
8113cafc:	1884b03a 	or	r2,r3,r2
8113cb00:	10800514 	ori	r2,r2,20
8113cb04:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8113cb08:	e0ffee17 	ldw	r3,-72(fp)
8113cb0c:	00bff7c4 	movi	r2,-33
8113cb10:	1884703a 	and	r2,r3,r2
8113cb14:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8113cb18:	e0bfed17 	ldw	r2,-76(fp)
8113cb1c:	10800214 	ori	r2,r2,8
8113cb20:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113cb24:	0005303a 	rdctl	r2,status
8113cb28:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113cb2c:	e0fff417 	ldw	r3,-48(fp)
8113cb30:	00bfff84 	movi	r2,-2
8113cb34:	1884703a 	and	r2,r3,r2
8113cb38:	1001703a 	wrctl	status,r2
  
  return context;
8113cb3c:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
8113cb40:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113cb44:	e0bffb17 	ldw	r2,-20(fp)
8113cb48:	10800317 	ldw	r2,12(r2)
8113cb4c:	10800104 	addi	r2,r2,4
8113cb50:	e0ffee17 	ldw	r3,-72(fp)
8113cb54:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113cb58:	e0bffb17 	ldw	r2,-20(fp)
8113cb5c:	10800617 	ldw	r2,24(r2)
8113cb60:	e0ffed17 	ldw	r3,-76(fp)
8113cb64:	10c00035 	stwio	r3,0(r2)
8113cb68:	e0bfef17 	ldw	r2,-68(fp)
8113cb6c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113cb70:	e0bff117 	ldw	r2,-60(fp)
8113cb74:	1001703a 	wrctl	status,r2
8113cb78:	00002306 	br	8113cc08 <alt_msgdma_start_prefetcher_with_list_addr+0x234>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8113cb7c:	e0bffb17 	ldw	r2,-20(fp)
8113cb80:	10c00d17 	ldw	r3,52(r2)
8113cb84:	e0bfee17 	ldw	r2,-72(fp)
8113cb88:	1884b03a 	or	r2,r3,r2
8113cb8c:	10800114 	ori	r2,r2,4
8113cb90:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8113cb94:	e0ffee17 	ldw	r3,-72(fp)
8113cb98:	00bff3c4 	movi	r2,-49
8113cb9c:	1884703a 	and	r2,r3,r2
8113cba0:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8113cba4:	e0ffed17 	ldw	r3,-76(fp)
8113cba8:	00bffdc4 	movi	r2,-9
8113cbac:	1884703a 	and	r2,r3,r2
8113cbb0:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113cbb4:	0005303a 	rdctl	r2,status
8113cbb8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113cbbc:	e0fff517 	ldw	r3,-44(fp)
8113cbc0:	00bfff84 	movi	r2,-2
8113cbc4:	1884703a 	and	r2,r3,r2
8113cbc8:	1001703a 	wrctl	status,r2
  
  return context;
8113cbcc:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
8113cbd0:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113cbd4:	e0bffb17 	ldw	r2,-20(fp)
8113cbd8:	10800317 	ldw	r2,12(r2)
8113cbdc:	10800104 	addi	r2,r2,4
8113cbe0:	e0ffee17 	ldw	r3,-72(fp)
8113cbe4:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113cbe8:	e0bffb17 	ldw	r2,-20(fp)
8113cbec:	10800617 	ldw	r2,24(r2)
8113cbf0:	e0ffed17 	ldw	r3,-76(fp)
8113cbf4:	10c00035 	stwio	r3,0(r2)
8113cbf8:	e0bfef17 	ldw	r2,-68(fp)
8113cbfc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113cc00:	e0bff317 	ldw	r2,-52(fp)
8113cc04:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8113cc08:	e0bffb17 	ldw	r2,-20(fp)
8113cc0c:	10800617 	ldw	r2,24(r2)
8113cc10:	10800104 	addi	r2,r2,4
8113cc14:	e0fff817 	ldw	r3,-32(fp)
8113cc18:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8113cc1c:	e0bffb17 	ldw	r2,-20(fp)
8113cc20:	10800617 	ldw	r2,24(r2)
8113cc24:	10800204 	addi	r2,r2,8
8113cc28:	e0fff917 	ldw	r3,-28(fp)
8113cc2c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
8113cc30:	e0bffe03 	ldbu	r2,-8(fp)
8113cc34:	10000426 	beq	r2,zero,8113cc48 <alt_msgdma_start_prefetcher_with_list_addr+0x274>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8113cc38:	e0bfed17 	ldw	r2,-76(fp)
8113cc3c:	10800414 	ori	r2,r2,16
8113cc40:	e0bfed15 	stw	r2,-76(fp)
8113cc44:	00000406 	br	8113cc58 <alt_msgdma_start_prefetcher_with_list_addr+0x284>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8113cc48:	e0ffed17 	ldw	r3,-76(fp)
8113cc4c:	00bffbc4 	movi	r2,-17
8113cc50:	1884703a 	and	r2,r3,r2
8113cc54:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8113cc58:	e0bfff03 	ldbu	r2,-4(fp)
8113cc5c:	10000e26 	beq	r2,zero,8113cc98 <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8113cc60:	e0bfed17 	ldw	r2,-76(fp)
8113cc64:	10800094 	ori	r2,r2,2
8113cc68:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8113cc6c:	e0bffb17 	ldw	r2,-20(fp)
8113cc70:	10800617 	ldw	r2,24(r2)
8113cc74:	10800304 	addi	r2,r2,12
8113cc78:	10800037 	ldwio	r2,0(r2)
8113cc7c:	10000a1e 	bne	r2,zero,8113cca8 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8113cc80:	e0bffb17 	ldw	r2,-20(fp)
8113cc84:	10800617 	ldw	r2,24(r2)
8113cc88:	10800304 	addi	r2,r2,12
8113cc8c:	00c03fc4 	movi	r3,255
8113cc90:	10c00035 	stwio	r3,0(r2)
8113cc94:	00000406 	br	8113cca8 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8113cc98:	e0ffed17 	ldw	r3,-76(fp)
8113cc9c:	00bfff44 	movi	r2,-3
8113cca0:	1884703a 	and	r2,r3,r2
8113cca4:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8113cca8:	e0bfed17 	ldw	r2,-76(fp)
8113ccac:	10800054 	ori	r2,r2,1
8113ccb0:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113ccb4:	e0bffb17 	ldw	r2,-20(fp)
8113ccb8:	10800617 	ldw	r2,24(r2)
8113ccbc:	e0ffed17 	ldw	r3,-76(fp)
8113ccc0:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
8113ccc4:	e0bffb17 	ldw	r2,-20(fp)
8113ccc8:	10801817 	ldw	r2,96(r2)
8113cccc:	1009883a 	mov	r4,r2
8113ccd0:	1131f080 	call	81131f08 <OSSemPost>
	 
	 return 0;
8113ccd4:	0005883a 	mov	r2,zero
}
8113ccd8:	e037883a 	mov	sp,fp
8113ccdc:	dfc00117 	ldw	ra,4(sp)
8113cce0:	df000017 	ldw	fp,0(sp)
8113cce4:	dec00204 	addi	sp,sp,8
8113cce8:	f800283a 	ret

8113ccec <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8113ccec:	defff704 	addi	sp,sp,-36
8113ccf0:	de00012e 	bgeu	sp,et,8113ccf8 <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
8113ccf4:	003b68fa 	trap	3
8113ccf8:	dfc00815 	stw	ra,32(sp)
8113ccfc:	df000715 	stw	fp,28(sp)
8113cd00:	dc400615 	stw	r17,24(sp)
8113cd04:	dc000515 	stw	r16,20(sp)
8113cd08:	df000704 	addi	fp,sp,28
8113cd0c:	e13ffa15 	stw	r4,-24(fp)
8113cd10:	e17ffb15 	stw	r5,-20(fp)
8113cd14:	3007883a 	mov	r3,r6
8113cd18:	3805883a 	mov	r2,r7
8113cd1c:	e0fffc05 	stb	r3,-16(fp)
8113cd20:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8113cd24:	e13ffb17 	ldw	r4,-20(fp)
8113cd28:	113c8580 	call	8113c858 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8113cd2c:	10000226 	beq	r2,zero,8113cd38 <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
		return -EINVAL;
8113cd30:	00bffa84 	movi	r2,-22
8113cd34:	00000b06 	br	8113cd64 <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8113cd38:	e0bffb17 	ldw	r2,-20(fp)
8113cd3c:	1021883a 	mov	r16,r2
8113cd40:	0023883a 	mov	r17,zero
8113cd44:	e0fffc03 	ldbu	r3,-16(fp)
8113cd48:	e0bffd03 	ldbu	r2,-12(fp)
8113cd4c:	d8800015 	stw	r2,0(sp)
8113cd50:	180f883a 	mov	r7,r3
8113cd54:	800b883a 	mov	r5,r16
8113cd58:	880d883a 	mov	r6,r17
8113cd5c:	e13ffa17 	ldw	r4,-24(fp)
8113cd60:	113c9d40 	call	8113c9d4 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8113cd64:	e6fffe04 	addi	sp,fp,-8
8113cd68:	dfc00317 	ldw	ra,12(sp)
8113cd6c:	df000217 	ldw	fp,8(sp)
8113cd70:	dc400117 	ldw	r17,4(sp)
8113cd74:	dc000017 	ldw	r16,0(sp)
8113cd78:	dec00404 	addi	sp,sp,16
8113cd7c:	f800283a 	ret

8113cd80 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8113cd80:	defff704 	addi	sp,sp,-36
8113cd84:	de00012e 	bgeu	sp,et,8113cd8c <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
8113cd88:	003b68fa 	trap	3
8113cd8c:	dfc00815 	stw	ra,32(sp)
8113cd90:	df000715 	stw	fp,28(sp)
8113cd94:	dc400615 	stw	r17,24(sp)
8113cd98:	dc000515 	stw	r16,20(sp)
8113cd9c:	df000704 	addi	fp,sp,28
8113cda0:	e13ffa15 	stw	r4,-24(fp)
8113cda4:	e17ffb15 	stw	r5,-20(fp)
8113cda8:	3007883a 	mov	r3,r6
8113cdac:	3805883a 	mov	r2,r7
8113cdb0:	e0fffc05 	stb	r3,-16(fp)
8113cdb4:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8113cdb8:	e13ffb17 	ldw	r4,-20(fp)
8113cdbc:	113c8f80 	call	8113c8f8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8113cdc0:	10000226 	beq	r2,zero,8113cdcc <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		return -EINVAL;
8113cdc4:	00bffa84 	movi	r2,-22
8113cdc8:	00000b06 	br	8113cdf8 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8113cdcc:	e0bffb17 	ldw	r2,-20(fp)
8113cdd0:	1021883a 	mov	r16,r2
8113cdd4:	0023883a 	mov	r17,zero
8113cdd8:	e0fffc03 	ldbu	r3,-16(fp)
8113cddc:	e0bffd03 	ldbu	r2,-12(fp)
8113cde0:	d8800015 	stw	r2,0(sp)
8113cde4:	180f883a 	mov	r7,r3
8113cde8:	800b883a 	mov	r5,r16
8113cdec:	880d883a 	mov	r6,r17
8113cdf0:	e13ffa17 	ldw	r4,-24(fp)
8113cdf4:	113c9d40 	call	8113c9d4 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8113cdf8:	e6fffe04 	addi	sp,fp,-8
8113cdfc:	dfc00317 	ldw	ra,12(sp)
8113ce00:	df000217 	ldw	fp,8(sp)
8113ce04:	dc400117 	ldw	r17,4(sp)
8113ce08:	dc000017 	ldw	r16,0(sp)
8113ce0c:	dec00404 	addi	sp,sp,16
8113ce10:	f800283a 	ret

8113ce14 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8113ce14:	defffc04 	addi	sp,sp,-16
8113ce18:	de00012e 	bgeu	sp,et,8113ce20 <alt_msgdma_open+0xc>
8113ce1c:	003b68fa 	trap	3
8113ce20:	dfc00315 	stw	ra,12(sp)
8113ce24:	df000215 	stw	fp,8(sp)
8113ce28:	df000204 	addi	fp,sp,8
8113ce2c:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8113ce30:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8113ce34:	d1603504 	addi	r5,gp,-32556
8113ce38:	e13fff17 	ldw	r4,-4(fp)
8113ce3c:	113d4880 	call	8113d488 <alt_find_dev>
8113ce40:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8113ce44:	e0bffe17 	ldw	r2,-8(fp)
8113ce48:	1000041e 	bne	r2,zero,8113ce5c <alt_msgdma_open+0x48>
    {
        ALT_ERRNO = ENODEV;
8113ce4c:	113b0780 	call	8113b078 <alt_get_errno>
8113ce50:	1007883a 	mov	r3,r2
8113ce54:	008004c4 	movi	r2,19
8113ce58:	18800015 	stw	r2,0(r3)
    }

    return dev;
8113ce5c:	e0bffe17 	ldw	r2,-8(fp)
}
8113ce60:	e037883a 	mov	sp,fp
8113ce64:	dfc00117 	ldw	ra,4(sp)
8113ce68:	df000017 	ldw	fp,0(sp)
8113ce6c:	dec00204 	addi	sp,sp,8
8113ce70:	f800283a 	ret

8113ce74 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8113ce74:	defff604 	addi	sp,sp,-40
8113ce78:	de00012e 	bgeu	sp,et,8113ce80 <alt_msgdma_init+0xc>
8113ce7c:	003b68fa 	trap	3
8113ce80:	dfc00915 	stw	ra,36(sp)
8113ce84:	df000815 	stw	fp,32(sp)
8113ce88:	df000804 	addi	fp,sp,32
8113ce8c:	e13ffd15 	stw	r4,-12(fp)
8113ce90:	e17ffe15 	stw	r5,-8(fp)
8113ce94:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8113ce98:	e0bffd17 	ldw	r2,-12(fp)
8113ce9c:	10801783 	ldbu	r2,94(r2)
8113cea0:	10803fcc 	andi	r2,r2,255
8113cea4:	10000b26 	beq	r2,zero,8113ced4 <alt_msgdma_init+0x60>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8113cea8:	e0bffd17 	ldw	r2,-12(fp)
8113ceac:	10800617 	ldw	r2,24(r2)
8113ceb0:	00c00104 	movi	r3,4
8113ceb4:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8113ceb8:	0001883a 	nop
8113cebc:	e0bffd17 	ldw	r2,-12(fp)
8113cec0:	10800617 	ldw	r2,24(r2)
8113cec4:	10800037 	ldwio	r2,0(r2)
8113cec8:	1080010c 	andi	r2,r2,4
8113cecc:	1005d0ba 	srai	r2,r2,2
8113ced0:	103ffa1e 	bne	r2,zero,8113cebc <__reset+0xfb11cebc>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8113ced4:	e0bffd17 	ldw	r2,-12(fp)
8113ced8:	10800317 	ldw	r2,12(r2)
8113cedc:	10800104 	addi	r2,r2,4
8113cee0:	00c00084 	movi	r3,2
8113cee4:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113cee8:	0001883a 	nop
8113ceec:	e0bffd17 	ldw	r2,-12(fp)
8113cef0:	10800317 	ldw	r2,12(r2)
8113cef4:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8113cef8:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113cefc:	103ffb1e 	bne	r2,zero,8113ceec <__reset+0xfb11ceec>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8113cf00:	e0bffd17 	ldw	r2,-12(fp)
8113cf04:	10800317 	ldw	r2,12(r2)
8113cf08:	10800104 	addi	r2,r2,4
8113cf0c:	10800037 	ldwio	r2,0(r2)
8113cf10:	1007883a 	mov	r3,r2
8113cf14:	00bffbc4 	movi	r2,-17
8113cf18:	1884703a 	and	r2,r3,r2
8113cf1c:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113cf20:	e0bff917 	ldw	r2,-28(fp)
8113cf24:	10800814 	ori	r2,r2,32
8113cf28:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113cf2c:	e0bffd17 	ldw	r2,-12(fp)
8113cf30:	10800317 	ldw	r2,12(r2)
8113cf34:	10800104 	addi	r2,r2,4
8113cf38:	e0fff917 	ldw	r3,-28(fp)
8113cf3c:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8113cf40:	e0bffd17 	ldw	r2,-12(fp)
8113cf44:	10800317 	ldw	r2,12(r2)
8113cf48:	e0fffd17 	ldw	r3,-12(fp)
8113cf4c:	18c00317 	ldw	r3,12(r3)
8113cf50:	18c00037 	ldwio	r3,0(r3)
8113cf54:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8113cf58:	e0bffd17 	ldw	r2,-12(fp)
8113cf5c:	10801783 	ldbu	r2,94(r2)
8113cf60:	10803fcc 	andi	r2,r2,255
8113cf64:	10000826 	beq	r2,zero,8113cf88 <alt_msgdma_init+0x114>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8113cf68:	e0bffd17 	ldw	r2,-12(fp)
8113cf6c:	10800617 	ldw	r2,24(r2)
8113cf70:	10800404 	addi	r2,r2,16
8113cf74:	e0fffd17 	ldw	r3,-12(fp)
8113cf78:	18c00617 	ldw	r3,24(r3)
8113cf7c:	18c00404 	addi	r3,r3,16
8113cf80:	18c00037 	ldwio	r3,0(r3)
8113cf84:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8113cf88:	d1603504 	addi	r5,gp,-32556
8113cf8c:	e13ffd17 	ldw	r4,-12(fp)
8113cf90:	113d30c0 	call	8113d30c <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8113cf94:	e0bffd17 	ldw	r2,-12(fp)
8113cf98:	10801804 	addi	r2,r2,96
8113cf9c:	e0bffb15 	stw	r2,-20(fp)
8113cfa0:	00800044 	movi	r2,1
8113cfa4:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113cfa8:	e0bffc0b 	ldhu	r2,-16(fp)
8113cfac:	1009883a 	mov	r4,r2
8113cfb0:	11318580 	call	81131858 <OSSemCreate>
8113cfb4:	1007883a 	mov	r3,r2
8113cfb8:	e0bffb17 	ldw	r2,-20(fp)
8113cfbc:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113cfc0:	e0bffb17 	ldw	r2,-20(fp)
8113cfc4:	10800017 	ldw	r2,0(r2)
8113cfc8:	10000226 	beq	r2,zero,8113cfd4 <alt_msgdma_init+0x160>
8113cfcc:	0005883a 	mov	r2,zero
8113cfd0:	00000106 	br	8113cfd8 <alt_msgdma_init+0x164>
8113cfd4:	00bfffc4 	movi	r2,-1
8113cfd8:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
8113cfdc:	e0bffa17 	ldw	r2,-24(fp)
8113cfe0:	1000081e 	bne	r2,zero,8113d004 <alt_msgdma_init+0x190>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8113cfe4:	d8000015 	stw	zero,0(sp)
8113cfe8:	e1fffd17 	ldw	r7,-12(fp)
8113cfec:	01a04534 	movhi	r6,33044
8113cff0:	31aca304 	addi	r6,r6,-19828
8113cff4:	e17fff17 	ldw	r5,-4(fp)
8113cff8:	e13ffe17 	ldw	r4,-8(fp)
8113cffc:	113d7140 	call	8113d714 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8113d000:	00000406 	br	8113d014 <alt_msgdma_init+0x1a0>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8113d004:	01204534 	movhi	r4,33044
8113d008:	210b0004 	addi	r4,r4,11264
8113d00c:	113db2c0 	call	8113db2c <alt_printf>
    }
    
    return;
8113d010:	0001883a 	nop

}
8113d014:	e037883a 	mov	sp,fp
8113d018:	dfc00117 	ldw	ra,4(sp)
8113d01c:	df000017 	ldw	fp,0(sp)
8113d020:	dec00204 	addi	sp,sp,8
8113d024:	f800283a 	ret

8113d028 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8113d028:	defffb04 	addi	sp,sp,-20
8113d02c:	de00012e 	bgeu	sp,et,8113d034 <alt_msgdma_register_callback+0xc>
8113d030:	003b68fa 	trap	3
8113d034:	df000415 	stw	fp,16(sp)
8113d038:	df000404 	addi	fp,sp,16
8113d03c:	e13ffc15 	stw	r4,-16(fp)
8113d040:	e17ffd15 	stw	r5,-12(fp)
8113d044:	e1bffe15 	stw	r6,-8(fp)
8113d048:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8113d04c:	e0bffc17 	ldw	r2,-16(fp)
8113d050:	e0fffd17 	ldw	r3,-12(fp)
8113d054:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8113d058:	e0bffc17 	ldw	r2,-16(fp)
8113d05c:	e0ffff17 	ldw	r3,-4(fp)
8113d060:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8113d064:	e0bffc17 	ldw	r2,-16(fp)
8113d068:	e0fffe17 	ldw	r3,-8(fp)
8113d06c:	10c00d15 	stw	r3,52(r2)

    return ;
8113d070:	0001883a 	nop
}
8113d074:	e037883a 	mov	sp,fp
8113d078:	df000017 	ldw	fp,0(sp)
8113d07c:	dec00104 	addi	sp,sp,4
8113d080:	f800283a 	ret

8113d084 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113d084:	defffc04 	addi	sp,sp,-16
8113d088:	de00012e 	bgeu	sp,et,8113d090 <alt_msgdma_standard_descriptor_async_transfer+0xc>
8113d08c:	003b68fa 	trap	3
8113d090:	dfc00315 	stw	ra,12(sp)
8113d094:	df000215 	stw	fp,8(sp)
8113d098:	df000204 	addi	fp,sp,8
8113d09c:	e13ffe15 	stw	r4,-8(fp)
8113d0a0:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8113d0a4:	000d883a 	mov	r6,zero
8113d0a8:	e17fff17 	ldw	r5,-4(fp)
8113d0ac:	e13ffe17 	ldw	r4,-8(fp)
8113d0b0:	113b6080 	call	8113b608 <alt_msgdma_descriptor_async_transfer>

}
8113d0b4:	e037883a 	mov	sp,fp
8113d0b8:	dfc00117 	ldw	ra,4(sp)
8113d0bc:	df000017 	ldw	fp,0(sp)
8113d0c0:	dec00204 	addi	sp,sp,8
8113d0c4:	f800283a 	ret

8113d0c8 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113d0c8:	defffc04 	addi	sp,sp,-16
8113d0cc:	de00012e 	bgeu	sp,et,8113d0d4 <alt_msgdma_extended_descriptor_async_transfer+0xc>
8113d0d0:	003b68fa 	trap	3
8113d0d4:	dfc00315 	stw	ra,12(sp)
8113d0d8:	df000215 	stw	fp,8(sp)
8113d0dc:	df000204 	addi	fp,sp,8
8113d0e0:	e13ffe15 	stw	r4,-8(fp)
8113d0e4:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8113d0e8:	e1bfff17 	ldw	r6,-4(fp)
8113d0ec:	000b883a 	mov	r5,zero
8113d0f0:	e13ffe17 	ldw	r4,-8(fp)
8113d0f4:	113b6080 	call	8113b608 <alt_msgdma_descriptor_async_transfer>
}
8113d0f8:	e037883a 	mov	sp,fp
8113d0fc:	dfc00117 	ldw	ra,4(sp)
8113d100:	df000017 	ldw	fp,0(sp)
8113d104:	dec00204 	addi	sp,sp,8
8113d108:	f800283a 	ret

8113d10c <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113d10c:	defffc04 	addi	sp,sp,-16
8113d110:	de00012e 	bgeu	sp,et,8113d118 <alt_msgdma_standard_descriptor_sync_transfer+0xc>
8113d114:	003b68fa 	trap	3
8113d118:	dfc00315 	stw	ra,12(sp)
8113d11c:	df000215 	stw	fp,8(sp)
8113d120:	df000204 	addi	fp,sp,8
8113d124:	e13ffe15 	stw	r4,-8(fp)
8113d128:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8113d12c:	000d883a 	mov	r6,zero
8113d130:	e17fff17 	ldw	r5,-4(fp)
8113d134:	e13ffe17 	ldw	r4,-8(fp)
8113d138:	113b9480 	call	8113b948 <alt_msgdma_descriptor_sync_transfer>
}
8113d13c:	e037883a 	mov	sp,fp
8113d140:	dfc00117 	ldw	ra,4(sp)
8113d144:	df000017 	ldw	fp,0(sp)
8113d148:	dec00204 	addi	sp,sp,8
8113d14c:	f800283a 	ret

8113d150 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113d150:	defffc04 	addi	sp,sp,-16
8113d154:	de00012e 	bgeu	sp,et,8113d15c <alt_msgdma_extended_descriptor_sync_transfer+0xc>
8113d158:	003b68fa 	trap	3
8113d15c:	dfc00315 	stw	ra,12(sp)
8113d160:	df000215 	stw	fp,8(sp)
8113d164:	df000204 	addi	fp,sp,8
8113d168:	e13ffe15 	stw	r4,-8(fp)
8113d16c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8113d170:	e1bfff17 	ldw	r6,-4(fp)
8113d174:	000b883a 	mov	r5,zero
8113d178:	e13ffe17 	ldw	r4,-8(fp)
8113d17c:	113b9480 	call	8113b948 <alt_msgdma_descriptor_sync_transfer>
}
8113d180:	e037883a 	mov	sp,fp
8113d184:	dfc00117 	ldw	ra,4(sp)
8113d188:	df000017 	ldw	fp,0(sp)
8113d18c:	dec00204 	addi	sp,sp,8
8113d190:	f800283a 	ret

8113d194 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8113d194:	defff504 	addi	sp,sp,-44
8113d198:	de00012e 	bgeu	sp,et,8113d1a0 <alt_alarm_start+0xc>
8113d19c:	003b68fa 	trap	3
8113d1a0:	df000a15 	stw	fp,40(sp)
8113d1a4:	df000a04 	addi	fp,sp,40
8113d1a8:	e13ffc15 	stw	r4,-16(fp)
8113d1ac:	e17ffd15 	stw	r5,-12(fp)
8113d1b0:	e1bffe15 	stw	r6,-8(fp)
8113d1b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8113d1b8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8113d1bc:	d0a07217 	ldw	r2,-32312(gp)
  
  if (alt_ticks_per_second ())
8113d1c0:	10003c26 	beq	r2,zero,8113d2b4 <alt_alarm_start+0x120>
  {
    if (alarm)
8113d1c4:	e0bffc17 	ldw	r2,-16(fp)
8113d1c8:	10003826 	beq	r2,zero,8113d2ac <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
8113d1cc:	e0bffc17 	ldw	r2,-16(fp)
8113d1d0:	e0fffe17 	ldw	r3,-8(fp)
8113d1d4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8113d1d8:	e0bffc17 	ldw	r2,-16(fp)
8113d1dc:	e0ffff17 	ldw	r3,-4(fp)
8113d1e0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113d1e4:	0005303a 	rdctl	r2,status
8113d1e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113d1ec:	e0fff917 	ldw	r3,-28(fp)
8113d1f0:	00bfff84 	movi	r2,-2
8113d1f4:	1884703a 	and	r2,r3,r2
8113d1f8:	1001703a 	wrctl	status,r2
  
  return context;
8113d1fc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8113d200:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8113d204:	d0a07317 	ldw	r2,-32308(gp)
      
      current_nticks = alt_nticks();
8113d208:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8113d20c:	e0fffd17 	ldw	r3,-12(fp)
8113d210:	e0bff617 	ldw	r2,-40(fp)
8113d214:	1885883a 	add	r2,r3,r2
8113d218:	10c00044 	addi	r3,r2,1
8113d21c:	e0bffc17 	ldw	r2,-16(fp)
8113d220:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8113d224:	e0bffc17 	ldw	r2,-16(fp)
8113d228:	10c00217 	ldw	r3,8(r2)
8113d22c:	e0bff617 	ldw	r2,-40(fp)
8113d230:	1880042e 	bgeu	r3,r2,8113d244 <alt_alarm_start+0xb0>
      {
        alarm->rollover = 1;
8113d234:	e0bffc17 	ldw	r2,-16(fp)
8113d238:	00c00044 	movi	r3,1
8113d23c:	10c00405 	stb	r3,16(r2)
8113d240:	00000206 	br	8113d24c <alt_alarm_start+0xb8>
      }
      else
      {
        alarm->rollover = 0;
8113d244:	e0bffc17 	ldw	r2,-16(fp)
8113d248:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8113d24c:	e0bffc17 	ldw	r2,-16(fp)
8113d250:	d0e01404 	addi	r3,gp,-32688
8113d254:	e0fffa15 	stw	r3,-24(fp)
8113d258:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113d25c:	e0bffb17 	ldw	r2,-20(fp)
8113d260:	e0fffa17 	ldw	r3,-24(fp)
8113d264:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113d268:	e0bffa17 	ldw	r2,-24(fp)
8113d26c:	10c00017 	ldw	r3,0(r2)
8113d270:	e0bffb17 	ldw	r2,-20(fp)
8113d274:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113d278:	e0bffa17 	ldw	r2,-24(fp)
8113d27c:	10800017 	ldw	r2,0(r2)
8113d280:	e0fffb17 	ldw	r3,-20(fp)
8113d284:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113d288:	e0bffa17 	ldw	r2,-24(fp)
8113d28c:	e0fffb17 	ldw	r3,-20(fp)
8113d290:	10c00015 	stw	r3,0(r2)
8113d294:	e0bff817 	ldw	r2,-32(fp)
8113d298:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113d29c:	e0bff717 	ldw	r2,-36(fp)
8113d2a0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8113d2a4:	0005883a 	mov	r2,zero
8113d2a8:	00000306 	br	8113d2b8 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
8113d2ac:	00bffa84 	movi	r2,-22
8113d2b0:	00000106 	br	8113d2b8 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
8113d2b4:	00bfde84 	movi	r2,-134
  }
}
8113d2b8:	e037883a 	mov	sp,fp
8113d2bc:	df000017 	ldw	fp,0(sp)
8113d2c0:	dec00104 	addi	sp,sp,4
8113d2c4:	f800283a 	ret

8113d2c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113d2c8:	defffe04 	addi	sp,sp,-8
8113d2cc:	de00012e 	bgeu	sp,et,8113d2d4 <alt_get_errno+0xc>
8113d2d0:	003b68fa 	trap	3
8113d2d4:	dfc00115 	stw	ra,4(sp)
8113d2d8:	df000015 	stw	fp,0(sp)
8113d2dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113d2e0:	d0a01017 	ldw	r2,-32704(gp)
8113d2e4:	10000326 	beq	r2,zero,8113d2f4 <alt_get_errno+0x2c>
8113d2e8:	d0a01017 	ldw	r2,-32704(gp)
8113d2ec:	103ee83a 	callr	r2
8113d2f0:	00000106 	br	8113d2f8 <alt_get_errno+0x30>
8113d2f4:	d0a06204 	addi	r2,gp,-32376
}
8113d2f8:	e037883a 	mov	sp,fp
8113d2fc:	dfc00117 	ldw	ra,4(sp)
8113d300:	df000017 	ldw	fp,0(sp)
8113d304:	dec00204 	addi	sp,sp,8
8113d308:	f800283a 	ret

8113d30c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8113d30c:	defffa04 	addi	sp,sp,-24
8113d310:	de00012e 	bgeu	sp,et,8113d318 <alt_dev_llist_insert+0xc>
8113d314:	003b68fa 	trap	3
8113d318:	dfc00515 	stw	ra,20(sp)
8113d31c:	df000415 	stw	fp,16(sp)
8113d320:	df000404 	addi	fp,sp,16
8113d324:	e13ffe15 	stw	r4,-8(fp)
8113d328:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8113d32c:	e0bffe17 	ldw	r2,-8(fp)
8113d330:	10000326 	beq	r2,zero,8113d340 <alt_dev_llist_insert+0x34>
8113d334:	e0bffe17 	ldw	r2,-8(fp)
8113d338:	10800217 	ldw	r2,8(r2)
8113d33c:	1000061e 	bne	r2,zero,8113d358 <alt_dev_llist_insert+0x4c>
  {
    ALT_ERRNO = EINVAL;
8113d340:	113d2c80 	call	8113d2c8 <alt_get_errno>
8113d344:	1007883a 	mov	r3,r2
8113d348:	00800584 	movi	r2,22
8113d34c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8113d350:	00bffa84 	movi	r2,-22
8113d354:	00001306 	br	8113d3a4 <alt_dev_llist_insert+0x98>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8113d358:	e0bffe17 	ldw	r2,-8(fp)
8113d35c:	e0ffff17 	ldw	r3,-4(fp)
8113d360:	e0fffc15 	stw	r3,-16(fp)
8113d364:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113d368:	e0bffd17 	ldw	r2,-12(fp)
8113d36c:	e0fffc17 	ldw	r3,-16(fp)
8113d370:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113d374:	e0bffc17 	ldw	r2,-16(fp)
8113d378:	10c00017 	ldw	r3,0(r2)
8113d37c:	e0bffd17 	ldw	r2,-12(fp)
8113d380:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113d384:	e0bffc17 	ldw	r2,-16(fp)
8113d388:	10800017 	ldw	r2,0(r2)
8113d38c:	e0fffd17 	ldw	r3,-12(fp)
8113d390:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113d394:	e0bffc17 	ldw	r2,-16(fp)
8113d398:	e0fffd17 	ldw	r3,-12(fp)
8113d39c:	10c00015 	stw	r3,0(r2)

  return 0;  
8113d3a0:	0005883a 	mov	r2,zero
}
8113d3a4:	e037883a 	mov	sp,fp
8113d3a8:	dfc00117 	ldw	ra,4(sp)
8113d3ac:	df000017 	ldw	fp,0(sp)
8113d3b0:	dec00204 	addi	sp,sp,8
8113d3b4:	f800283a 	ret

8113d3b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8113d3b8:	defffd04 	addi	sp,sp,-12
8113d3bc:	de00012e 	bgeu	sp,et,8113d3c4 <_do_ctors+0xc>
8113d3c0:	003b68fa 	trap	3
8113d3c4:	dfc00215 	stw	ra,8(sp)
8113d3c8:	df000115 	stw	fp,4(sp)
8113d3cc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113d3d0:	00a04534 	movhi	r2,33044
8113d3d4:	10b9de04 	addi	r2,r2,-6280
8113d3d8:	e0bfff15 	stw	r2,-4(fp)
8113d3dc:	00000606 	br	8113d3f8 <_do_ctors+0x40>
        (*ctor) (); 
8113d3e0:	e0bfff17 	ldw	r2,-4(fp)
8113d3e4:	10800017 	ldw	r2,0(r2)
8113d3e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113d3ec:	e0bfff17 	ldw	r2,-4(fp)
8113d3f0:	10bfff04 	addi	r2,r2,-4
8113d3f4:	e0bfff15 	stw	r2,-4(fp)
8113d3f8:	e0ffff17 	ldw	r3,-4(fp)
8113d3fc:	00a04534 	movhi	r2,33044
8113d400:	10b9df04 	addi	r2,r2,-6276
8113d404:	18bff62e 	bgeu	r3,r2,8113d3e0 <__reset+0xfb11d3e0>
        (*ctor) (); 
}
8113d408:	0001883a 	nop
8113d40c:	e037883a 	mov	sp,fp
8113d410:	dfc00117 	ldw	ra,4(sp)
8113d414:	df000017 	ldw	fp,0(sp)
8113d418:	dec00204 	addi	sp,sp,8
8113d41c:	f800283a 	ret

8113d420 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8113d420:	defffd04 	addi	sp,sp,-12
8113d424:	de00012e 	bgeu	sp,et,8113d42c <_do_dtors+0xc>
8113d428:	003b68fa 	trap	3
8113d42c:	dfc00215 	stw	ra,8(sp)
8113d430:	df000115 	stw	fp,4(sp)
8113d434:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113d438:	00a04534 	movhi	r2,33044
8113d43c:	10b9de04 	addi	r2,r2,-6280
8113d440:	e0bfff15 	stw	r2,-4(fp)
8113d444:	00000606 	br	8113d460 <_do_dtors+0x40>
        (*dtor) (); 
8113d448:	e0bfff17 	ldw	r2,-4(fp)
8113d44c:	10800017 	ldw	r2,0(r2)
8113d450:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113d454:	e0bfff17 	ldw	r2,-4(fp)
8113d458:	10bfff04 	addi	r2,r2,-4
8113d45c:	e0bfff15 	stw	r2,-4(fp)
8113d460:	e0ffff17 	ldw	r3,-4(fp)
8113d464:	00a04534 	movhi	r2,33044
8113d468:	10b9df04 	addi	r2,r2,-6276
8113d46c:	18bff62e 	bgeu	r3,r2,8113d448 <__reset+0xfb11d448>
        (*dtor) (); 
}
8113d470:	0001883a 	nop
8113d474:	e037883a 	mov	sp,fp
8113d478:	dfc00117 	ldw	ra,4(sp)
8113d47c:	df000017 	ldw	fp,0(sp)
8113d480:	dec00204 	addi	sp,sp,8
8113d484:	f800283a 	ret

8113d488 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8113d488:	defffa04 	addi	sp,sp,-24
8113d48c:	de00012e 	bgeu	sp,et,8113d494 <alt_find_dev+0xc>
8113d490:	003b68fa 	trap	3
8113d494:	dfc00515 	stw	ra,20(sp)
8113d498:	df000415 	stw	fp,16(sp)
8113d49c:	df000404 	addi	fp,sp,16
8113d4a0:	e13ffe15 	stw	r4,-8(fp)
8113d4a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8113d4a8:	e0bfff17 	ldw	r2,-4(fp)
8113d4ac:	10800017 	ldw	r2,0(r2)
8113d4b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8113d4b4:	e13ffe17 	ldw	r4,-8(fp)
8113d4b8:	11155840 	call	81115584 <strlen>
8113d4bc:	10800044 	addi	r2,r2,1
8113d4c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113d4c4:	00000d06 	br	8113d4fc <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8113d4c8:	e0bffc17 	ldw	r2,-16(fp)
8113d4cc:	10800217 	ldw	r2,8(r2)
8113d4d0:	e0fffd17 	ldw	r3,-12(fp)
8113d4d4:	180d883a 	mov	r6,r3
8113d4d8:	e17ffe17 	ldw	r5,-8(fp)
8113d4dc:	1009883a 	mov	r4,r2
8113d4e0:	113e2b00 	call	8113e2b0 <memcmp>
8113d4e4:	1000021e 	bne	r2,zero,8113d4f0 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
8113d4e8:	e0bffc17 	ldw	r2,-16(fp)
8113d4ec:	00000706 	br	8113d50c <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
8113d4f0:	e0bffc17 	ldw	r2,-16(fp)
8113d4f4:	10800017 	ldw	r2,0(r2)
8113d4f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113d4fc:	e0fffc17 	ldw	r3,-16(fp)
8113d500:	e0bfff17 	ldw	r2,-4(fp)
8113d504:	18bff01e 	bne	r3,r2,8113d4c8 <__reset+0xfb11d4c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8113d508:	0005883a 	mov	r2,zero
}
8113d50c:	e037883a 	mov	sp,fp
8113d510:	dfc00117 	ldw	ra,4(sp)
8113d514:	df000017 	ldw	fp,0(sp)
8113d518:	dec00204 	addi	sp,sp,8
8113d51c:	f800283a 	ret

8113d520 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8113d520:	defffb04 	addi	sp,sp,-20
8113d524:	de00012e 	bgeu	sp,et,8113d52c <alt_find_file+0xc>
8113d528:	003b68fa 	trap	3
8113d52c:	dfc00415 	stw	ra,16(sp)
8113d530:	df000315 	stw	fp,12(sp)
8113d534:	df000304 	addi	fp,sp,12
8113d538:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8113d53c:	d0a00b17 	ldw	r2,-32724(gp)
8113d540:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113d544:	00003106 	br	8113d60c <alt_find_file+0xec>
  {
    len = strlen(next->name);
8113d548:	e0bffd17 	ldw	r2,-12(fp)
8113d54c:	10800217 	ldw	r2,8(r2)
8113d550:	1009883a 	mov	r4,r2
8113d554:	11155840 	call	81115584 <strlen>
8113d558:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8113d55c:	e0bffd17 	ldw	r2,-12(fp)
8113d560:	10c00217 	ldw	r3,8(r2)
8113d564:	e0bffe17 	ldw	r2,-8(fp)
8113d568:	10bfffc4 	addi	r2,r2,-1
8113d56c:	1885883a 	add	r2,r3,r2
8113d570:	10800003 	ldbu	r2,0(r2)
8113d574:	10803fcc 	andi	r2,r2,255
8113d578:	1080201c 	xori	r2,r2,128
8113d57c:	10bfe004 	addi	r2,r2,-128
8113d580:	10800bd8 	cmpnei	r2,r2,47
8113d584:	1000031e 	bne	r2,zero,8113d594 <alt_find_file+0x74>
    {
      len -= 1;
8113d588:	e0bffe17 	ldw	r2,-8(fp)
8113d58c:	10bfffc4 	addi	r2,r2,-1
8113d590:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113d594:	e0bffe17 	ldw	r2,-8(fp)
8113d598:	e0ffff17 	ldw	r3,-4(fp)
8113d59c:	1885883a 	add	r2,r3,r2
8113d5a0:	10800003 	ldbu	r2,0(r2)
8113d5a4:	10803fcc 	andi	r2,r2,255
8113d5a8:	1080201c 	xori	r2,r2,128
8113d5ac:	10bfe004 	addi	r2,r2,-128
8113d5b0:	10800be0 	cmpeqi	r2,r2,47
8113d5b4:	1000081e 	bne	r2,zero,8113d5d8 <alt_find_file+0xb8>
8113d5b8:	e0bffe17 	ldw	r2,-8(fp)
8113d5bc:	e0ffff17 	ldw	r3,-4(fp)
8113d5c0:	1885883a 	add	r2,r3,r2
8113d5c4:	10800003 	ldbu	r2,0(r2)
8113d5c8:	10803fcc 	andi	r2,r2,255
8113d5cc:	1080201c 	xori	r2,r2,128
8113d5d0:	10bfe004 	addi	r2,r2,-128
8113d5d4:	10000a1e 	bne	r2,zero,8113d600 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
8113d5d8:	e0bffd17 	ldw	r2,-12(fp)
8113d5dc:	10800217 	ldw	r2,8(r2)
8113d5e0:	e0fffe17 	ldw	r3,-8(fp)
8113d5e4:	180d883a 	mov	r6,r3
8113d5e8:	e17fff17 	ldw	r5,-4(fp)
8113d5ec:	1009883a 	mov	r4,r2
8113d5f0:	113e2b00 	call	8113e2b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113d5f4:	1000021e 	bne	r2,zero,8113d600 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8113d5f8:	e0bffd17 	ldw	r2,-12(fp)
8113d5fc:	00000706 	br	8113d61c <alt_find_file+0xfc>
    }
    next = (alt_dev*) next->llist.next;
8113d600:	e0bffd17 	ldw	r2,-12(fp)
8113d604:	10800017 	ldw	r2,0(r2)
8113d608:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113d60c:	e0fffd17 	ldw	r3,-12(fp)
8113d610:	d0a00b04 	addi	r2,gp,-32724
8113d614:	18bfcc1e 	bne	r3,r2,8113d548 <__reset+0xfb11d548>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8113d618:	0005883a 	mov	r2,zero
}
8113d61c:	e037883a 	mov	sp,fp
8113d620:	dfc00117 	ldw	ra,4(sp)
8113d624:	df000017 	ldw	fp,0(sp)
8113d628:	dec00204 	addi	sp,sp,8
8113d62c:	f800283a 	ret

8113d630 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8113d630:	defff904 	addi	sp,sp,-28
8113d634:	de00012e 	bgeu	sp,et,8113d63c <alt_get_fd+0xc>
8113d638:	003b68fa 	trap	3
8113d63c:	dfc00615 	stw	ra,24(sp)
8113d640:	df000515 	stw	fp,20(sp)
8113d644:	df000504 	addi	fp,sp,20
8113d648:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8113d64c:	00bffa04 	movi	r2,-24
8113d650:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
8113d654:	d0a06917 	ldw	r2,-32348(gp)
8113d658:	e0bffd15 	stw	r2,-12(fp)
8113d65c:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8113d660:	e0bffe0b 	ldhu	r2,-8(fp)
8113d664:	e0fffe84 	addi	r3,fp,-6
8113d668:	180d883a 	mov	r6,r3
8113d66c:	100b883a 	mov	r5,r2
8113d670:	e13ffd17 	ldw	r4,-12(fp)
8113d674:	1131b800 	call	81131b80 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113d678:	e03ffb15 	stw	zero,-20(fp)
8113d67c:	00001906 	br	8113d6e4 <alt_get_fd+0xb4>
  {
    if (!alt_fd_list[i].dev)
8113d680:	00a04534 	movhi	r2,33044
8113d684:	108d6f04 	addi	r2,r2,13756
8113d688:	e0fffb17 	ldw	r3,-20(fp)
8113d68c:	18c00324 	muli	r3,r3,12
8113d690:	10c5883a 	add	r2,r2,r3
8113d694:	10800017 	ldw	r2,0(r2)
8113d698:	10000f1e 	bne	r2,zero,8113d6d8 <alt_get_fd+0xa8>
    {
      alt_fd_list[i].dev = dev;
8113d69c:	00a04534 	movhi	r2,33044
8113d6a0:	108d6f04 	addi	r2,r2,13756
8113d6a4:	e0fffb17 	ldw	r3,-20(fp)
8113d6a8:	18c00324 	muli	r3,r3,12
8113d6ac:	10c5883a 	add	r2,r2,r3
8113d6b0:	e0ffff17 	ldw	r3,-4(fp)
8113d6b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8113d6b8:	d0e00f17 	ldw	r3,-32708(gp)
8113d6bc:	e0bffb17 	ldw	r2,-20(fp)
8113d6c0:	1880020e 	bge	r3,r2,8113d6cc <alt_get_fd+0x9c>
      {
        alt_max_fd = i;
8113d6c4:	e0bffb17 	ldw	r2,-20(fp)
8113d6c8:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
8113d6cc:	e0bffb17 	ldw	r2,-20(fp)
8113d6d0:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
8113d6d4:	00000606 	br	8113d6f0 <alt_get_fd+0xc0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113d6d8:	e0bffb17 	ldw	r2,-20(fp)
8113d6dc:	10800044 	addi	r2,r2,1
8113d6e0:	e0bffb15 	stw	r2,-20(fp)
8113d6e4:	e0bffb17 	ldw	r2,-20(fp)
8113d6e8:	10800810 	cmplti	r2,r2,32
8113d6ec:	103fe41e 	bne	r2,zero,8113d680 <__reset+0xfb11d680>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
8113d6f0:	d0a06917 	ldw	r2,-32348(gp)
8113d6f4:	1009883a 	mov	r4,r2
8113d6f8:	1131f080 	call	81131f08 <OSSemPost>

  return rc;
8113d6fc:	e0bffc17 	ldw	r2,-16(fp)
}
8113d700:	e037883a 	mov	sp,fp
8113d704:	dfc00117 	ldw	ra,4(sp)
8113d708:	df000017 	ldw	fp,0(sp)
8113d70c:	dec00204 	addi	sp,sp,8
8113d710:	f800283a 	ret

8113d714 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113d714:	defff904 	addi	sp,sp,-28
8113d718:	de00012e 	bgeu	sp,et,8113d720 <alt_ic_isr_register+0xc>
8113d71c:	003b68fa 	trap	3
8113d720:	dfc00615 	stw	ra,24(sp)
8113d724:	df000515 	stw	fp,20(sp)
8113d728:	df000504 	addi	fp,sp,20
8113d72c:	e13ffc15 	stw	r4,-16(fp)
8113d730:	e17ffd15 	stw	r5,-12(fp)
8113d734:	e1bffe15 	stw	r6,-8(fp)
8113d738:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8113d73c:	e0800217 	ldw	r2,8(fp)
8113d740:	d8800015 	stw	r2,0(sp)
8113d744:	e1ffff17 	ldw	r7,-4(fp)
8113d748:	e1bffe17 	ldw	r6,-8(fp)
8113d74c:	e17ffd17 	ldw	r5,-12(fp)
8113d750:	e13ffc17 	ldw	r4,-16(fp)
8113d754:	113d8e40 	call	8113d8e4 <alt_iic_isr_register>
}  
8113d758:	e037883a 	mov	sp,fp
8113d75c:	dfc00117 	ldw	ra,4(sp)
8113d760:	df000017 	ldw	fp,0(sp)
8113d764:	dec00204 	addi	sp,sp,8
8113d768:	f800283a 	ret

8113d76c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8113d76c:	defff904 	addi	sp,sp,-28
8113d770:	de00012e 	bgeu	sp,et,8113d778 <alt_ic_irq_enable+0xc>
8113d774:	003b68fa 	trap	3
8113d778:	df000615 	stw	fp,24(sp)
8113d77c:	df000604 	addi	fp,sp,24
8113d780:	e13ffe15 	stw	r4,-8(fp)
8113d784:	e17fff15 	stw	r5,-4(fp)
8113d788:	e0bfff17 	ldw	r2,-4(fp)
8113d78c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113d790:	0005303a 	rdctl	r2,status
8113d794:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113d798:	e0fffb17 	ldw	r3,-20(fp)
8113d79c:	00bfff84 	movi	r2,-2
8113d7a0:	1884703a 	and	r2,r3,r2
8113d7a4:	1001703a 	wrctl	status,r2
  
  return context;
8113d7a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113d7ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8113d7b0:	00c00044 	movi	r3,1
8113d7b4:	e0bffa17 	ldw	r2,-24(fp)
8113d7b8:	1884983a 	sll	r2,r3,r2
8113d7bc:	1007883a 	mov	r3,r2
8113d7c0:	d0a06a17 	ldw	r2,-32344(gp)
8113d7c4:	1884b03a 	or	r2,r3,r2
8113d7c8:	d0a06a15 	stw	r2,-32344(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113d7cc:	d0a06a17 	ldw	r2,-32344(gp)
8113d7d0:	100170fa 	wrctl	ienable,r2
8113d7d4:	e0bffc17 	ldw	r2,-16(fp)
8113d7d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113d7dc:	e0bffd17 	ldw	r2,-12(fp)
8113d7e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113d7e4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8113d7e8:	0001883a 	nop
}
8113d7ec:	e037883a 	mov	sp,fp
8113d7f0:	df000017 	ldw	fp,0(sp)
8113d7f4:	dec00104 	addi	sp,sp,4
8113d7f8:	f800283a 	ret

8113d7fc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8113d7fc:	defff904 	addi	sp,sp,-28
8113d800:	de00012e 	bgeu	sp,et,8113d808 <alt_ic_irq_disable+0xc>
8113d804:	003b68fa 	trap	3
8113d808:	df000615 	stw	fp,24(sp)
8113d80c:	df000604 	addi	fp,sp,24
8113d810:	e13ffe15 	stw	r4,-8(fp)
8113d814:	e17fff15 	stw	r5,-4(fp)
8113d818:	e0bfff17 	ldw	r2,-4(fp)
8113d81c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113d820:	0005303a 	rdctl	r2,status
8113d824:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113d828:	e0fffb17 	ldw	r3,-20(fp)
8113d82c:	00bfff84 	movi	r2,-2
8113d830:	1884703a 	and	r2,r3,r2
8113d834:	1001703a 	wrctl	status,r2
  
  return context;
8113d838:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113d83c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8113d840:	00c00044 	movi	r3,1
8113d844:	e0bffa17 	ldw	r2,-24(fp)
8113d848:	1884983a 	sll	r2,r3,r2
8113d84c:	0084303a 	nor	r2,zero,r2
8113d850:	1007883a 	mov	r3,r2
8113d854:	d0a06a17 	ldw	r2,-32344(gp)
8113d858:	1884703a 	and	r2,r3,r2
8113d85c:	d0a06a15 	stw	r2,-32344(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113d860:	d0a06a17 	ldw	r2,-32344(gp)
8113d864:	100170fa 	wrctl	ienable,r2
8113d868:	e0bffc17 	ldw	r2,-16(fp)
8113d86c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113d870:	e0bffd17 	ldw	r2,-12(fp)
8113d874:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113d878:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8113d87c:	0001883a 	nop
}
8113d880:	e037883a 	mov	sp,fp
8113d884:	df000017 	ldw	fp,0(sp)
8113d888:	dec00104 	addi	sp,sp,4
8113d88c:	f800283a 	ret

8113d890 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8113d890:	defffc04 	addi	sp,sp,-16
8113d894:	de00012e 	bgeu	sp,et,8113d89c <alt_ic_irq_enabled+0xc>
8113d898:	003b68fa 	trap	3
8113d89c:	df000315 	stw	fp,12(sp)
8113d8a0:	df000304 	addi	fp,sp,12
8113d8a4:	e13ffe15 	stw	r4,-8(fp)
8113d8a8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8113d8ac:	000530fa 	rdctl	r2,ienable
8113d8b0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8113d8b4:	00c00044 	movi	r3,1
8113d8b8:	e0bfff17 	ldw	r2,-4(fp)
8113d8bc:	1884983a 	sll	r2,r3,r2
8113d8c0:	1007883a 	mov	r3,r2
8113d8c4:	e0bffd17 	ldw	r2,-12(fp)
8113d8c8:	1884703a 	and	r2,r3,r2
8113d8cc:	1004c03a 	cmpne	r2,r2,zero
8113d8d0:	10803fcc 	andi	r2,r2,255
}
8113d8d4:	e037883a 	mov	sp,fp
8113d8d8:	df000017 	ldw	fp,0(sp)
8113d8dc:	dec00104 	addi	sp,sp,4
8113d8e0:	f800283a 	ret

8113d8e4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113d8e4:	defff504 	addi	sp,sp,-44
8113d8e8:	de00012e 	bgeu	sp,et,8113d8f0 <alt_iic_isr_register+0xc>
8113d8ec:	003b68fa 	trap	3
8113d8f0:	dfc00a15 	stw	ra,40(sp)
8113d8f4:	df000915 	stw	fp,36(sp)
8113d8f8:	df000904 	addi	fp,sp,36
8113d8fc:	e13ffc15 	stw	r4,-16(fp)
8113d900:	e17ffd15 	stw	r5,-12(fp)
8113d904:	e1bffe15 	stw	r6,-8(fp)
8113d908:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8113d90c:	00bffa84 	movi	r2,-22
8113d910:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8113d914:	e0bffd17 	ldw	r2,-12(fp)
8113d918:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8113d91c:	e0bff817 	ldw	r2,-32(fp)
8113d920:	10800808 	cmpgei	r2,r2,32
8113d924:	1000271e 	bne	r2,zero,8113d9c4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113d928:	0005303a 	rdctl	r2,status
8113d92c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113d930:	e0fffb17 	ldw	r3,-20(fp)
8113d934:	00bfff84 	movi	r2,-2
8113d938:	1884703a 	and	r2,r3,r2
8113d93c:	1001703a 	wrctl	status,r2
  
  return context;
8113d940:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8113d944:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8113d948:	00a045b4 	movhi	r2,33046
8113d94c:	10a1d304 	addi	r2,r2,-30900
8113d950:	e0fff817 	ldw	r3,-32(fp)
8113d954:	180690fa 	slli	r3,r3,3
8113d958:	10c5883a 	add	r2,r2,r3
8113d95c:	e0fffe17 	ldw	r3,-8(fp)
8113d960:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8113d964:	00a045b4 	movhi	r2,33046
8113d968:	10a1d304 	addi	r2,r2,-30900
8113d96c:	e0fff817 	ldw	r3,-32(fp)
8113d970:	180690fa 	slli	r3,r3,3
8113d974:	10c5883a 	add	r2,r2,r3
8113d978:	10800104 	addi	r2,r2,4
8113d97c:	e0ffff17 	ldw	r3,-4(fp)
8113d980:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8113d984:	e0bffe17 	ldw	r2,-8(fp)
8113d988:	10000526 	beq	r2,zero,8113d9a0 <alt_iic_isr_register+0xbc>
8113d98c:	e0bff817 	ldw	r2,-32(fp)
8113d990:	100b883a 	mov	r5,r2
8113d994:	e13ffc17 	ldw	r4,-16(fp)
8113d998:	113d76c0 	call	8113d76c <alt_ic_irq_enable>
8113d99c:	00000406 	br	8113d9b0 <alt_iic_isr_register+0xcc>
8113d9a0:	e0bff817 	ldw	r2,-32(fp)
8113d9a4:	100b883a 	mov	r5,r2
8113d9a8:	e13ffc17 	ldw	r4,-16(fp)
8113d9ac:	113d7fc0 	call	8113d7fc <alt_ic_irq_disable>
8113d9b0:	e0bff715 	stw	r2,-36(fp)
8113d9b4:	e0bffa17 	ldw	r2,-24(fp)
8113d9b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113d9bc:	e0bff917 	ldw	r2,-28(fp)
8113d9c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8113d9c4:	e0bff717 	ldw	r2,-36(fp)
}
8113d9c8:	e037883a 	mov	sp,fp
8113d9cc:	dfc00117 	ldw	ra,4(sp)
8113d9d0:	df000017 	ldw	fp,0(sp)
8113d9d4:	dec00204 	addi	sp,sp,8
8113d9d8:	f800283a 	ret

8113d9dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8113d9dc:	defff904 	addi	sp,sp,-28
8113d9e0:	de00012e 	bgeu	sp,et,8113d9e8 <alt_open_fd+0xc>
8113d9e4:	003b68fa 	trap	3
8113d9e8:	dfc00615 	stw	ra,24(sp)
8113d9ec:	df000515 	stw	fp,20(sp)
8113d9f0:	df000504 	addi	fp,sp,20
8113d9f4:	e13ffc15 	stw	r4,-16(fp)
8113d9f8:	e17ffd15 	stw	r5,-12(fp)
8113d9fc:	e1bffe15 	stw	r6,-8(fp)
8113da00:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8113da04:	e1bfff17 	ldw	r6,-4(fp)
8113da08:	e17ffe17 	ldw	r5,-8(fp)
8113da0c:	e13ffd17 	ldw	r4,-12(fp)
8113da10:	112a7380 	call	8112a738 <open>
8113da14:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8113da18:	e0bffb17 	ldw	r2,-20(fp)
8113da1c:	10001c16 	blt	r2,zero,8113da90 <alt_open_fd+0xb4>
  {
    fd->dev      = alt_fd_list[old].dev;
8113da20:	00a04534 	movhi	r2,33044
8113da24:	108d6f04 	addi	r2,r2,13756
8113da28:	e0fffb17 	ldw	r3,-20(fp)
8113da2c:	18c00324 	muli	r3,r3,12
8113da30:	10c5883a 	add	r2,r2,r3
8113da34:	10c00017 	ldw	r3,0(r2)
8113da38:	e0bffc17 	ldw	r2,-16(fp)
8113da3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8113da40:	00a04534 	movhi	r2,33044
8113da44:	108d6f04 	addi	r2,r2,13756
8113da48:	e0fffb17 	ldw	r3,-20(fp)
8113da4c:	18c00324 	muli	r3,r3,12
8113da50:	10c5883a 	add	r2,r2,r3
8113da54:	10800104 	addi	r2,r2,4
8113da58:	10c00017 	ldw	r3,0(r2)
8113da5c:	e0bffc17 	ldw	r2,-16(fp)
8113da60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8113da64:	00a04534 	movhi	r2,33044
8113da68:	108d6f04 	addi	r2,r2,13756
8113da6c:	e0fffb17 	ldw	r3,-20(fp)
8113da70:	18c00324 	muli	r3,r3,12
8113da74:	10c5883a 	add	r2,r2,r3
8113da78:	10800204 	addi	r2,r2,8
8113da7c:	10c00017 	ldw	r3,0(r2)
8113da80:	e0bffc17 	ldw	r2,-16(fp)
8113da84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8113da88:	e13ffb17 	ldw	r4,-20(fp)
8113da8c:	112a9dc0 	call	8112a9dc <alt_release_fd>
  }
} 
8113da90:	0001883a 	nop
8113da94:	e037883a 	mov	sp,fp
8113da98:	dfc00117 	ldw	ra,4(sp)
8113da9c:	df000017 	ldw	fp,0(sp)
8113daa0:	dec00204 	addi	sp,sp,8
8113daa4:	f800283a 	ret

8113daa8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8113daa8:	defffb04 	addi	sp,sp,-20
8113daac:	de00012e 	bgeu	sp,et,8113dab4 <alt_io_redirect+0xc>
8113dab0:	003b68fa 	trap	3
8113dab4:	dfc00415 	stw	ra,16(sp)
8113dab8:	df000315 	stw	fp,12(sp)
8113dabc:	df000304 	addi	fp,sp,12
8113dac0:	e13ffd15 	stw	r4,-12(fp)
8113dac4:	e17ffe15 	stw	r5,-8(fp)
8113dac8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8113dacc:	01c07fc4 	movi	r7,511
8113dad0:	01800044 	movi	r6,1
8113dad4:	e17ffd17 	ldw	r5,-12(fp)
8113dad8:	01204534 	movhi	r4,33044
8113dadc:	210d7204 	addi	r4,r4,13768
8113dae0:	113d9dc0 	call	8113d9dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8113dae4:	01c07fc4 	movi	r7,511
8113dae8:	000d883a 	mov	r6,zero
8113daec:	e17ffe17 	ldw	r5,-8(fp)
8113daf0:	01204534 	movhi	r4,33044
8113daf4:	210d6f04 	addi	r4,r4,13756
8113daf8:	113d9dc0 	call	8113d9dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8113dafc:	01c07fc4 	movi	r7,511
8113db00:	01800044 	movi	r6,1
8113db04:	e17fff17 	ldw	r5,-4(fp)
8113db08:	01204534 	movhi	r4,33044
8113db0c:	210d7504 	addi	r4,r4,13780
8113db10:	113d9dc0 	call	8113d9dc <alt_open_fd>
}  
8113db14:	0001883a 	nop
8113db18:	e037883a 	mov	sp,fp
8113db1c:	dfc00117 	ldw	ra,4(sp)
8113db20:	df000017 	ldw	fp,0(sp)
8113db24:	dec00204 	addi	sp,sp,8
8113db28:	f800283a 	ret

8113db2c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8113db2c:	defff204 	addi	sp,sp,-56
8113db30:	de00012e 	bgeu	sp,et,8113db38 <alt_printf+0xc>
8113db34:	003b68fa 	trap	3
8113db38:	dfc00a15 	stw	ra,40(sp)
8113db3c:	df000915 	stw	fp,36(sp)
8113db40:	df000904 	addi	fp,sp,36
8113db44:	e13fff15 	stw	r4,-4(fp)
8113db48:	e1400215 	stw	r5,8(fp)
8113db4c:	e1800315 	stw	r6,12(fp)
8113db50:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8113db54:	e0800204 	addi	r2,fp,8
8113db58:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8113db5c:	e0bfff17 	ldw	r2,-4(fp)
8113db60:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8113db64:	00006f06 	br	8113dd24 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8113db68:	e0bff807 	ldb	r2,-32(fp)
8113db6c:	10800960 	cmpeqi	r2,r2,37
8113db70:	1000041e 	bne	r2,zero,8113db84 <alt_printf+0x58>
        {
            alt_putchar(c);
8113db74:	e0bff807 	ldb	r2,-32(fp)
8113db78:	1009883a 	mov	r4,r2
8113db7c:	113dd600 	call	8113dd60 <alt_putchar>
8113db80:	00006806 	br	8113dd24 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8113db84:	e0bff717 	ldw	r2,-36(fp)
8113db88:	10c00044 	addi	r3,r2,1
8113db8c:	e0fff715 	stw	r3,-36(fp)
8113db90:	10800003 	ldbu	r2,0(r2)
8113db94:	e0bff805 	stb	r2,-32(fp)
8113db98:	e0bff807 	ldb	r2,-32(fp)
8113db9c:	10006926 	beq	r2,zero,8113dd44 <alt_printf+0x218>
            {
                if (c == '%')
8113dba0:	e0bff807 	ldb	r2,-32(fp)
8113dba4:	10800958 	cmpnei	r2,r2,37
8113dba8:	1000041e 	bne	r2,zero,8113dbbc <alt_printf+0x90>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8113dbac:	e0bff807 	ldb	r2,-32(fp)
8113dbb0:	1009883a 	mov	r4,r2
8113dbb4:	113dd600 	call	8113dd60 <alt_putchar>
8113dbb8:	00005a06 	br	8113dd24 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
8113dbbc:	e0bff807 	ldb	r2,-32(fp)
8113dbc0:	108018d8 	cmpnei	r2,r2,99
8113dbc4:	1000081e 	bne	r2,zero,8113dbe8 <alt_printf+0xbc>
                {
                    int v = va_arg(args, int);
8113dbc8:	e0bffe17 	ldw	r2,-8(fp)
8113dbcc:	10c00104 	addi	r3,r2,4
8113dbd0:	e0fffe15 	stw	r3,-8(fp)
8113dbd4:	10800017 	ldw	r2,0(r2)
8113dbd8:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8113dbdc:	e13ffd17 	ldw	r4,-12(fp)
8113dbe0:	113dd600 	call	8113dd60 <alt_putchar>
8113dbe4:	00004f06 	br	8113dd24 <alt_printf+0x1f8>
                }
                else if (c == 'x')
8113dbe8:	e0bff807 	ldb	r2,-32(fp)
8113dbec:	10801e18 	cmpnei	r2,r2,120
8113dbf0:	1000341e 	bne	r2,zero,8113dcc4 <alt_printf+0x198>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8113dbf4:	e0bffe17 	ldw	r2,-8(fp)
8113dbf8:	10c00104 	addi	r3,r2,4
8113dbfc:	e0fffe15 	stw	r3,-8(fp)
8113dc00:	10800017 	ldw	r2,0(r2)
8113dc04:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8113dc08:	e0bffb17 	ldw	r2,-20(fp)
8113dc0c:	1000031e 	bne	r2,zero,8113dc1c <alt_printf+0xf0>
                    {
                        alt_putchar('0');
8113dc10:	01000c04 	movi	r4,48
8113dc14:	113dd600 	call	8113dd60 <alt_putchar>
                        continue;
8113dc18:	00004206 	br	8113dd24 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8113dc1c:	00800704 	movi	r2,28
8113dc20:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8113dc24:	00000306 	br	8113dc34 <alt_printf+0x108>
                        digit_shift -= 4;
8113dc28:	e0bff917 	ldw	r2,-28(fp)
8113dc2c:	10bfff04 	addi	r2,r2,-4
8113dc30:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8113dc34:	00c003c4 	movi	r3,15
8113dc38:	e0bff917 	ldw	r2,-28(fp)
8113dc3c:	1884983a 	sll	r2,r3,r2
8113dc40:	1007883a 	mov	r3,r2
8113dc44:	e0bffb17 	ldw	r2,-20(fp)
8113dc48:	1884703a 	and	r2,r3,r2
8113dc4c:	103ff626 	beq	r2,zero,8113dc28 <__reset+0xfb11dc28>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113dc50:	00001906 	br	8113dcb8 <alt_printf+0x18c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8113dc54:	00c003c4 	movi	r3,15
8113dc58:	e0bff917 	ldw	r2,-28(fp)
8113dc5c:	1884983a 	sll	r2,r3,r2
8113dc60:	1007883a 	mov	r3,r2
8113dc64:	e0bffb17 	ldw	r2,-20(fp)
8113dc68:	1886703a 	and	r3,r3,r2
8113dc6c:	e0bff917 	ldw	r2,-28(fp)
8113dc70:	1884d83a 	srl	r2,r3,r2
8113dc74:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8113dc78:	e0bffc17 	ldw	r2,-16(fp)
8113dc7c:	108002a8 	cmpgeui	r2,r2,10
8113dc80:	1000041e 	bne	r2,zero,8113dc94 <alt_printf+0x168>
                            c = '0' + digit;
8113dc84:	e0bffc17 	ldw	r2,-16(fp)
8113dc88:	10800c04 	addi	r2,r2,48
8113dc8c:	e0bff805 	stb	r2,-32(fp)
8113dc90:	00000306 	br	8113dca0 <alt_printf+0x174>
                        else
                            c = 'a' + digit - 10;
8113dc94:	e0bffc17 	ldw	r2,-16(fp)
8113dc98:	108015c4 	addi	r2,r2,87
8113dc9c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8113dca0:	e0bff807 	ldb	r2,-32(fp)
8113dca4:	1009883a 	mov	r4,r2
8113dca8:	113dd600 	call	8113dd60 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113dcac:	e0bff917 	ldw	r2,-28(fp)
8113dcb0:	10bfff04 	addi	r2,r2,-4
8113dcb4:	e0bff915 	stw	r2,-28(fp)
8113dcb8:	e0bff917 	ldw	r2,-28(fp)
8113dcbc:	103fe50e 	bge	r2,zero,8113dc54 <__reset+0xfb11dc54>
8113dcc0:	00001806 	br	8113dd24 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8113dcc4:	e0bff807 	ldb	r2,-32(fp)
8113dcc8:	10801cd8 	cmpnei	r2,r2,115
8113dccc:	1000151e 	bne	r2,zero,8113dd24 <alt_printf+0x1f8>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8113dcd0:	e0bffe17 	ldw	r2,-8(fp)
8113dcd4:	10c00104 	addi	r3,r2,4
8113dcd8:	e0fffe15 	stw	r3,-8(fp)
8113dcdc:	10800017 	ldw	r2,0(r2)
8113dce0:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8113dce4:	00000906 	br	8113dd0c <alt_printf+0x1e0>
                      alt_putchar(*s++);
8113dce8:	e0bffa17 	ldw	r2,-24(fp)
8113dcec:	10c00044 	addi	r3,r2,1
8113dcf0:	e0fffa15 	stw	r3,-24(fp)
8113dcf4:	10800003 	ldbu	r2,0(r2)
8113dcf8:	10803fcc 	andi	r2,r2,255
8113dcfc:	1080201c 	xori	r2,r2,128
8113dd00:	10bfe004 	addi	r2,r2,-128
8113dd04:	1009883a 	mov	r4,r2
8113dd08:	113dd600 	call	8113dd60 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8113dd0c:	e0bffa17 	ldw	r2,-24(fp)
8113dd10:	10800003 	ldbu	r2,0(r2)
8113dd14:	10803fcc 	andi	r2,r2,255
8113dd18:	1080201c 	xori	r2,r2,128
8113dd1c:	10bfe004 	addi	r2,r2,-128
8113dd20:	103ff11e 	bne	r2,zero,8113dce8 <__reset+0xfb11dce8>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8113dd24:	e0bff717 	ldw	r2,-36(fp)
8113dd28:	10c00044 	addi	r3,r2,1
8113dd2c:	e0fff715 	stw	r3,-36(fp)
8113dd30:	10800003 	ldbu	r2,0(r2)
8113dd34:	e0bff805 	stb	r2,-32(fp)
8113dd38:	e0bff807 	ldb	r2,-32(fp)
8113dd3c:	103f8a1e 	bne	r2,zero,8113db68 <__reset+0xfb11db68>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113dd40:	00000106 	br	8113dd48 <alt_printf+0x21c>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8113dd44:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113dd48:	0001883a 	nop
8113dd4c:	e037883a 	mov	sp,fp
8113dd50:	dfc00117 	ldw	ra,4(sp)
8113dd54:	df000017 	ldw	fp,0(sp)
8113dd58:	dec00504 	addi	sp,sp,20
8113dd5c:	f800283a 	ret

8113dd60 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8113dd60:	defffd04 	addi	sp,sp,-12
8113dd64:	de00012e 	bgeu	sp,et,8113dd6c <alt_putchar+0xc>
8113dd68:	003b68fa 	trap	3
8113dd6c:	dfc00215 	stw	ra,8(sp)
8113dd70:	df000115 	stw	fp,4(sp)
8113dd74:	df000104 	addi	fp,sp,4
8113dd78:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8113dd7c:	d0a00517 	ldw	r2,-32748(gp)
8113dd80:	10800217 	ldw	r2,8(r2)
8113dd84:	100b883a 	mov	r5,r2
8113dd88:	e13fff17 	ldw	r4,-4(fp)
8113dd8c:	1114e740 	call	81114e74 <putc>
#endif
#endif
}
8113dd90:	e037883a 	mov	sp,fp
8113dd94:	dfc00117 	ldw	ra,4(sp)
8113dd98:	df000017 	ldw	fp,0(sp)
8113dd9c:	dec00204 	addi	sp,sp,8
8113dda0:	f800283a 	ret

8113dda4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8113dda4:	deffff04 	addi	sp,sp,-4
8113dda8:	de00012e 	bgeu	sp,et,8113ddb0 <altera_nios2_gen2_irq_init+0xc>
8113ddac:	003b68fa 	trap	3
8113ddb0:	df000015 	stw	fp,0(sp)
8113ddb4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8113ddb8:	000170fa 	wrctl	ienable,zero
}
8113ddbc:	0001883a 	nop
8113ddc0:	e037883a 	mov	sp,fp
8113ddc4:	df000017 	ldw	fp,0(sp)
8113ddc8:	dec00104 	addi	sp,sp,4
8113ddcc:	f800283a 	ret

8113ddd0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
8113ddd0:	defff504 	addi	sp,sp,-44

#ifdef ALT_STACK_CHECK

      bltu  sp, et, .Lstack_overflow
8113ddd4:	de002436 	bltu	sp,et,8113de68 <OSCtxSw+0x98>

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
8113ddd8:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
8113dddc:	d1208c17 	ldw	r4,-32208(gp)

      stw ra,  0(sp)
8113dde0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
8113dde4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
8113dde8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
8113ddec:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
8113ddf0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
8113ddf4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
8113ddf8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
8113ddfc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
8113de00:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
8113de04:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
8113de08:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
8113de0c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113de10:	113e06c0 	call	8113e06c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
8113de14:	d1208617 	ldw	r4,-32232(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
8113de18:	d1607d87 	ldb	r5,-32266(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
8113de1c:	d1208c15 	stw	r4,-32208(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
8113de20:	d1607dc5 	stb	r5,-32265(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
8113de24:	26c00017 	ldw	sp,0(r4)
      
#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      ldw et, 8(r4)                  /* load the new stack limit */
8113de28:	26000217 	ldw	et,8(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
8113de2c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
8113de30:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
8113de34:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
8113de38:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
8113de3c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
8113de40:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
8113de44:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
8113de48:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
8113de4c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
8113de50:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
8113de54:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
8113de58:	d0e00515 	stw	r3,-32748(gp)

#endif /* OS_THREAD_SAFE_NEWLIB */

#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      stw et, %gprel(alt_stack_limit_value)(gp)
8113de5c:	d6200015 	stw	et,-32768(gp)

#endif

      addi sp, sp, 44
8113de60:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
8113de64:	f800283a 	ret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
8113de68:	003da0fa 	break	3

8113de6c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
8113de6c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
8113de70:	047fff84 	movi	r17,-2
      and   r18, r18, r17
8113de74:	9464703a 	and	r18,r18,r17
      wrctl status, r18
8113de78:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113de7c:	113e06c0 	call	8113e06c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
8113de80:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
8113de84:	d4a07b05 	stb	r18,-32276(gp)

      /*
       * start execution of the new task.
       */

      br 9b
8113de88:	003fe206 	br	8113de14 <__reset+0xfb11de14>

8113de8c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
8113de8c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
8113de90:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
8113de94:	10800054 	ori	r2,r2,1
      wrctl status, r2
8113de98:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
8113de9c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
8113dea0:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
8113dea4:	dec00204 	addi	sp,sp,8

      callr r2
8113dea8:	103ee83a 	callr	r2

      nop
8113deac:	0001883a 	nop

8113deb0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
8113deb0:	defff704 	addi	sp,sp,-36
8113deb4:	de00012e 	bgeu	sp,et,8113debc <OSTaskStkInit+0xc>
8113deb8:	003b68fa 	trap	3
8113debc:	dfc00815 	stw	ra,32(sp)
8113dec0:	df000715 	stw	fp,28(sp)
8113dec4:	df000704 	addi	fp,sp,28
8113dec8:	e13ffc15 	stw	r4,-16(fp)
8113decc:	e17ffd15 	stw	r5,-12(fp)
8113ded0:	e1bffe15 	stw	r6,-8(fp)
8113ded4:	3805883a 	mov	r2,r7
8113ded8:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
8113dedc:	e0fffe17 	ldw	r3,-8(fp)
8113dee0:	00bfff04 	movi	r2,-4
8113dee4:	1884703a 	and	r2,r3,r2
8113dee8:	10bef704 	addi	r2,r2,-1060
8113deec:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
8113def0:	01810904 	movi	r6,1060
8113def4:	000b883a 	mov	r5,zero
8113def8:	e13ff917 	ldw	r4,-28(fp)
8113defc:	1114bc00 	call	81114bc0 <memset>
8113df00:	e0bff917 	ldw	r2,-28(fp)
8113df04:	10c0bb04 	addi	r3,r2,748
8113df08:	e0bff917 	ldw	r2,-28(fp)
8113df0c:	10c00115 	stw	r3,4(r2)
8113df10:	e0bff917 	ldw	r2,-28(fp)
8113df14:	10c0d504 	addi	r3,r2,852
8113df18:	e0bff917 	ldw	r2,-28(fp)
8113df1c:	10c00215 	stw	r3,8(r2)
8113df20:	e0bff917 	ldw	r2,-28(fp)
8113df24:	10c0ef04 	addi	r3,r2,956
8113df28:	e0bff917 	ldw	r2,-28(fp)
8113df2c:	10c00315 	stw	r3,12(r2)
8113df30:	e0fff917 	ldw	r3,-28(fp)
8113df34:	00a04534 	movhi	r2,33044
8113df38:	108b0804 	addi	r2,r2,11296
8113df3c:	18800d15 	stw	r2,52(r3)
8113df40:	e0bff917 	ldw	r2,-28(fp)
8113df44:	00c00044 	movi	r3,1
8113df48:	10c02915 	stw	r3,164(r2)
8113df4c:	10002a15 	stw	zero,168(r2)
8113df50:	e0bff917 	ldw	r2,-28(fp)
8113df54:	00ccc384 	movi	r3,13070
8113df58:	10c02b0d 	sth	r3,172(r2)
8113df5c:	e0bff917 	ldw	r2,-28(fp)
8113df60:	00eaf344 	movi	r3,-21555
8113df64:	10c02b8d 	sth	r3,174(r2)
8113df68:	e0bff917 	ldw	r2,-28(fp)
8113df6c:	00c48d04 	movi	r3,4660
8113df70:	10c02c0d 	sth	r3,176(r2)
8113df74:	e0bff917 	ldw	r2,-28(fp)
8113df78:	00f99b44 	movi	r3,-6547
8113df7c:	10c02c8d 	sth	r3,178(r2)
8113df80:	e0bff917 	ldw	r2,-28(fp)
8113df84:	00f7bb04 	movi	r3,-8468
8113df88:	10c02d0d 	sth	r3,180(r2)
8113df8c:	e0bff917 	ldw	r2,-28(fp)
8113df90:	00c00144 	movi	r3,5
8113df94:	10c02d8d 	sth	r3,182(r2)
8113df98:	e0bff917 	ldw	r2,-28(fp)
8113df9c:	00c002c4 	movi	r3,11
8113dfa0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
8113dfa4:	e0bff917 	ldw	r2,-28(fp)
8113dfa8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
8113dfac:	e0bffa17 	ldw	r2,-24(fp)
8113dfb0:	10bff304 	addi	r2,r2,-52
8113dfb4:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
8113dfb8:	e0bffb17 	ldw	r2,-20(fp)
8113dfbc:	10800c04 	addi	r2,r2,48
8113dfc0:	e0fffc17 	ldw	r3,-16(fp)
8113dfc4:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
8113dfc8:	e0bffb17 	ldw	r2,-20(fp)
8113dfcc:	10800b04 	addi	r2,r2,44
8113dfd0:	e0fffd17 	ldw	r3,-12(fp)
8113dfd4:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
8113dfd8:	e0bffb17 	ldw	r2,-20(fp)
8113dfdc:	10800a04 	addi	r2,r2,40
8113dfe0:	e0fff917 	ldw	r3,-28(fp)
8113dfe4:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
8113dfe8:	00a04534 	movhi	r2,33044
8113dfec:	10b7a304 	addi	r2,r2,-8564
8113dff0:	10c00104 	addi	r3,r2,4
8113dff4:	e0bffb17 	ldw	r2,-20(fp)
8113dff8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
8113dffc:	e0bffb17 	ldw	r2,-20(fp)
}
8113e000:	e037883a 	mov	sp,fp
8113e004:	dfc00117 	ldw	ra,4(sp)
8113e008:	df000017 	ldw	fp,0(sp)
8113e00c:	dec00204 	addi	sp,sp,8
8113e010:	f800283a 	ret

8113e014 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
8113e014:	defffe04 	addi	sp,sp,-8
8113e018:	de00012e 	bgeu	sp,et,8113e020 <OSTaskCreateHook+0xc>
8113e01c:	003b68fa 	trap	3
8113e020:	df000115 	stw	fp,4(sp)
8113e024:	df000104 	addi	fp,sp,4
8113e028:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
8113e02c:	0001883a 	nop
8113e030:	e037883a 	mov	sp,fp
8113e034:	df000017 	ldw	fp,0(sp)
8113e038:	dec00104 	addi	sp,sp,4
8113e03c:	f800283a 	ret

8113e040 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
8113e040:	defffe04 	addi	sp,sp,-8
8113e044:	de00012e 	bgeu	sp,et,8113e04c <OSTaskDelHook+0xc>
8113e048:	003b68fa 	trap	3
8113e04c:	df000115 	stw	fp,4(sp)
8113e050:	df000104 	addi	fp,sp,4
8113e054:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
8113e058:	0001883a 	nop
8113e05c:	e037883a 	mov	sp,fp
8113e060:	df000017 	ldw	fp,0(sp)
8113e064:	dec00104 	addi	sp,sp,4
8113e068:	f800283a 	ret

8113e06c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
8113e06c:	deffff04 	addi	sp,sp,-4
8113e070:	de00012e 	bgeu	sp,et,8113e078 <OSTaskSwHook+0xc>
8113e074:	003b68fa 	trap	3
8113e078:	df000015 	stw	fp,0(sp)
8113e07c:	d839883a 	mov	fp,sp
}
8113e080:	0001883a 	nop
8113e084:	e037883a 	mov	sp,fp
8113e088:	df000017 	ldw	fp,0(sp)
8113e08c:	dec00104 	addi	sp,sp,4
8113e090:	f800283a 	ret

8113e094 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
8113e094:	deffff04 	addi	sp,sp,-4
8113e098:	de00012e 	bgeu	sp,et,8113e0a0 <OSTaskStatHook+0xc>
8113e09c:	003b68fa 	trap	3
8113e0a0:	df000015 	stw	fp,0(sp)
8113e0a4:	d839883a 	mov	fp,sp
}
8113e0a8:	0001883a 	nop
8113e0ac:	e037883a 	mov	sp,fp
8113e0b0:	df000017 	ldw	fp,0(sp)
8113e0b4:	dec00104 	addi	sp,sp,4
8113e0b8:	f800283a 	ret

8113e0bc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
8113e0bc:	defffe04 	addi	sp,sp,-8
8113e0c0:	de00012e 	bgeu	sp,et,8113e0c8 <OSTimeTickHook+0xc>
8113e0c4:	003b68fa 	trap	3
8113e0c8:	dfc00115 	stw	ra,4(sp)
8113e0cc:	df000015 	stw	fp,0(sp)
8113e0d0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
8113e0d4:	d0a0a00b 	ldhu	r2,-32128(gp)
8113e0d8:	10800044 	addi	r2,r2,1
8113e0dc:	d0a0a00d 	sth	r2,-32128(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
8113e0e0:	d0a0a00b 	ldhu	r2,-32128(gp)
8113e0e4:	10bfffcc 	andi	r2,r2,65535
8113e0e8:	10807d30 	cmpltui	r2,r2,500
8113e0ec:	1000021e 	bne	r2,zero,8113e0f8 <OSTimeTickHook+0x3c>
        OSTmrCtr = 0;
8113e0f0:	d020a00d 	sth	zero,-32128(gp)
        OSTmrSignal();
8113e0f4:	113493c0 	call	8113493c <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
8113e0f8:	0001883a 	nop
8113e0fc:	e037883a 	mov	sp,fp
8113e100:	dfc00117 	ldw	ra,4(sp)
8113e104:	df000017 	ldw	fp,0(sp)
8113e108:	dec00204 	addi	sp,sp,8
8113e10c:	f800283a 	ret

8113e110 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
8113e110:	deffff04 	addi	sp,sp,-4
8113e114:	de00012e 	bgeu	sp,et,8113e11c <OSInitHookBegin+0xc>
8113e118:	003b68fa 	trap	3
8113e11c:	df000015 	stw	fp,0(sp)
8113e120:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
8113e124:	d020a00d 	sth	zero,-32128(gp)
#endif
}
8113e128:	0001883a 	nop
8113e12c:	e037883a 	mov	sp,fp
8113e130:	df000017 	ldw	fp,0(sp)
8113e134:	dec00104 	addi	sp,sp,4
8113e138:	f800283a 	ret

8113e13c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
8113e13c:	deffff04 	addi	sp,sp,-4
8113e140:	de00012e 	bgeu	sp,et,8113e148 <OSInitHookEnd+0xc>
8113e144:	003b68fa 	trap	3
8113e148:	df000015 	stw	fp,0(sp)
8113e14c:	d839883a 	mov	fp,sp
}
8113e150:	0001883a 	nop
8113e154:	e037883a 	mov	sp,fp
8113e158:	df000017 	ldw	fp,0(sp)
8113e15c:	dec00104 	addi	sp,sp,4
8113e160:	f800283a 	ret

8113e164 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
8113e164:	deffff04 	addi	sp,sp,-4
8113e168:	de00012e 	bgeu	sp,et,8113e170 <OSTaskIdleHook+0xc>
8113e16c:	003b68fa 	trap	3
8113e170:	df000015 	stw	fp,0(sp)
8113e174:	d839883a 	mov	fp,sp
}
8113e178:	0001883a 	nop
8113e17c:	e037883a 	mov	sp,fp
8113e180:	df000017 	ldw	fp,0(sp)
8113e184:	dec00104 	addi	sp,sp,4
8113e188:	f800283a 	ret

8113e18c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
8113e18c:	defffe04 	addi	sp,sp,-8
8113e190:	de00012e 	bgeu	sp,et,8113e198 <OSTCBInitHook+0xc>
8113e194:	003b68fa 	trap	3
8113e198:	df000115 	stw	fp,4(sp)
8113e19c:	df000104 	addi	fp,sp,4
8113e1a0:	e13fff15 	stw	r4,-4(fp)
}
8113e1a4:	0001883a 	nop
8113e1a8:	e037883a 	mov	sp,fp
8113e1ac:	df000017 	ldw	fp,0(sp)
8113e1b0:	dec00104 	addi	sp,sp,4
8113e1b4:	f800283a 	ret

8113e1b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8113e1b8:	defffe04 	addi	sp,sp,-8
8113e1bc:	de00012e 	bgeu	sp,et,8113e1c4 <alt_exception_cause_generated_bad_addr+0xc>
8113e1c0:	003b68fa 	trap	3
8113e1c4:	df000115 	stw	fp,4(sp)
8113e1c8:	df000104 	addi	fp,sp,4
8113e1cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8113e1d0:	e0bfff17 	ldw	r2,-4(fp)
8113e1d4:	10bffe84 	addi	r2,r2,-6
8113e1d8:	10c00428 	cmpgeui	r3,r2,16
8113e1dc:	18001a1e 	bne	r3,zero,8113e248 <alt_exception_cause_generated_bad_addr+0x90>
8113e1e0:	100690ba 	slli	r3,r2,2
8113e1e4:	00a04534 	movhi	r2,33044
8113e1e8:	10b87e04 	addi	r2,r2,-7688
8113e1ec:	1885883a 	add	r2,r3,r2
8113e1f0:	10800017 	ldw	r2,0(r2)
8113e1f4:	1000683a 	jmp	r2
8113e1f8:	8113e238 	rdprs	r4,r16,20360
8113e1fc:	8113e238 	rdprs	r4,r16,20360
8113e200:	8113e248 	cmpgei	r4,r16,20361
8113e204:	8113e248 	cmpgei	r4,r16,20361
8113e208:	8113e248 	cmpgei	r4,r16,20361
8113e20c:	8113e238 	rdprs	r4,r16,20360
8113e210:	8113e240 	call	88113e24 <__reset+0x20f3e24>
8113e214:	8113e248 	cmpgei	r4,r16,20361
8113e218:	8113e238 	rdprs	r4,r16,20360
8113e21c:	8113e238 	rdprs	r4,r16,20360
8113e220:	8113e248 	cmpgei	r4,r16,20361
8113e224:	8113e238 	rdprs	r4,r16,20360
8113e228:	8113e240 	call	88113e24 <__reset+0x20f3e24>
8113e22c:	8113e248 	cmpgei	r4,r16,20361
8113e230:	8113e248 	cmpgei	r4,r16,20361
8113e234:	8113e238 	rdprs	r4,r16,20360
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8113e238:	00800044 	movi	r2,1
8113e23c:	00000306 	br	8113e24c <alt_exception_cause_generated_bad_addr+0x94>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8113e240:	0005883a 	mov	r2,zero
8113e244:	00000106 	br	8113e24c <alt_exception_cause_generated_bad_addr+0x94>

  default:
    return 0;
8113e248:	0005883a 	mov	r2,zero
  }
}
8113e24c:	e037883a 	mov	sp,fp
8113e250:	df000017 	ldw	fp,0(sp)
8113e254:	dec00104 	addi	sp,sp,4
8113e258:	f800283a 	ret

8113e25c <atexit>:
8113e25c:	200b883a 	mov	r5,r4
8113e260:	000f883a 	mov	r7,zero
8113e264:	000d883a 	mov	r6,zero
8113e268:	0009883a 	mov	r4,zero
8113e26c:	113e4181 	jmpi	8113e418 <__register_exitproc>

8113e270 <exit>:
8113e270:	defffe04 	addi	sp,sp,-8
8113e274:	000b883a 	mov	r5,zero
8113e278:	de00012e 	bgeu	sp,et,8113e280 <exit+0x10>
8113e27c:	003b68fa 	trap	3
8113e280:	dc000015 	stw	r16,0(sp)
8113e284:	dfc00115 	stw	ra,4(sp)
8113e288:	2021883a 	mov	r16,r4
8113e28c:	113e5380 	call	8113e538 <__call_exitprocs>
8113e290:	00a04534 	movhi	r2,33044
8113e294:	10928604 	addi	r2,r2,18968
8113e298:	11000017 	ldw	r4,0(r2)
8113e29c:	20800f17 	ldw	r2,60(r4)
8113e2a0:	10000126 	beq	r2,zero,8113e2a8 <exit+0x38>
8113e2a4:	103ee83a 	callr	r2
8113e2a8:	8009883a 	mov	r4,r16
8113e2ac:	113e6c00 	call	8113e6c0 <_exit>

8113e2b0 <memcmp>:
8113e2b0:	01c000c4 	movi	r7,3
8113e2b4:	3980192e 	bgeu	r7,r6,8113e31c <memcmp+0x6c>
8113e2b8:	2144b03a 	or	r2,r4,r5
8113e2bc:	11c4703a 	and	r2,r2,r7
8113e2c0:	10000f26 	beq	r2,zero,8113e300 <memcmp+0x50>
8113e2c4:	20800003 	ldbu	r2,0(r4)
8113e2c8:	28c00003 	ldbu	r3,0(r5)
8113e2cc:	10c0151e 	bne	r2,r3,8113e324 <memcmp+0x74>
8113e2d0:	31bfff84 	addi	r6,r6,-2
8113e2d4:	01ffffc4 	movi	r7,-1
8113e2d8:	00000406 	br	8113e2ec <memcmp+0x3c>
8113e2dc:	20800003 	ldbu	r2,0(r4)
8113e2e0:	28c00003 	ldbu	r3,0(r5)
8113e2e4:	31bfffc4 	addi	r6,r6,-1
8113e2e8:	10c00e1e 	bne	r2,r3,8113e324 <memcmp+0x74>
8113e2ec:	21000044 	addi	r4,r4,1
8113e2f0:	29400044 	addi	r5,r5,1
8113e2f4:	31fff91e 	bne	r6,r7,8113e2dc <__reset+0xfb11e2dc>
8113e2f8:	0005883a 	mov	r2,zero
8113e2fc:	f800283a 	ret
8113e300:	20c00017 	ldw	r3,0(r4)
8113e304:	28800017 	ldw	r2,0(r5)
8113e308:	18bfee1e 	bne	r3,r2,8113e2c4 <__reset+0xfb11e2c4>
8113e30c:	31bfff04 	addi	r6,r6,-4
8113e310:	21000104 	addi	r4,r4,4
8113e314:	29400104 	addi	r5,r5,4
8113e318:	39bff936 	bltu	r7,r6,8113e300 <__reset+0xfb11e300>
8113e31c:	303fe91e 	bne	r6,zero,8113e2c4 <__reset+0xfb11e2c4>
8113e320:	003ff506 	br	8113e2f8 <__reset+0xfb11e2f8>
8113e324:	10c5c83a 	sub	r2,r2,r3
8113e328:	f800283a 	ret

8113e32c <strncpy>:
8113e32c:	2906b03a 	or	r3,r5,r4
8113e330:	18c000cc 	andi	r3,r3,3
8113e334:	2005883a 	mov	r2,r4
8113e338:	18002c1e 	bne	r3,zero,8113e3ec <strncpy+0xc0>
8113e33c:	010000c4 	movi	r4,3
8113e340:	21802a2e 	bgeu	r4,r6,8113e3ec <strncpy+0xc0>
8113e344:	033fbff4 	movhi	r12,65279
8113e348:	02e02074 	movhi	r11,32897
8113e34c:	633fbfc4 	addi	r12,r12,-257
8113e350:	5ae02004 	addi	r11,r11,-32640
8113e354:	100f883a 	mov	r7,r2
8113e358:	2a000017 	ldw	r8,0(r5)
8113e35c:	3815883a 	mov	r10,r7
8113e360:	4313883a 	add	r9,r8,r12
8113e364:	0206303a 	nor	r3,zero,r8
8113e368:	48c6703a 	and	r3,r9,r3
8113e36c:	1ac6703a 	and	r3,r3,r11
8113e370:	1800261e 	bne	r3,zero,8113e40c <strncpy+0xe0>
8113e374:	39c00104 	addi	r7,r7,4
8113e378:	52000015 	stw	r8,0(r10)
8113e37c:	31bfff04 	addi	r6,r6,-4
8113e380:	3811883a 	mov	r8,r7
8113e384:	29400104 	addi	r5,r5,4
8113e388:	21bff336 	bltu	r4,r6,8113e358 <__reset+0xfb11e358>
8113e38c:	30001e26 	beq	r6,zero,8113e408 <strncpy+0xdc>
8113e390:	29c00003 	ldbu	r7,0(r5)
8113e394:	31bfffc4 	addi	r6,r6,-1
8113e398:	40c00044 	addi	r3,r8,1
8113e39c:	41c00005 	stb	r7,0(r8)
8113e3a0:	39c03fcc 	andi	r7,r7,255
8113e3a4:	39c0201c 	xori	r7,r7,128
8113e3a8:	39ffe004 	addi	r7,r7,-128
8113e3ac:	29400044 	addi	r5,r5,1
8113e3b0:	38001026 	beq	r7,zero,8113e3f4 <strncpy+0xc8>
8113e3b4:	1811883a 	mov	r8,r3
8113e3b8:	00000906 	br	8113e3e0 <strncpy+0xb4>
8113e3bc:	29c00003 	ldbu	r7,0(r5)
8113e3c0:	31bfffc4 	addi	r6,r6,-1
8113e3c4:	29400044 	addi	r5,r5,1
8113e3c8:	41c00005 	stb	r7,0(r8)
8113e3cc:	39c03fcc 	andi	r7,r7,255
8113e3d0:	39c0201c 	xori	r7,r7,128
8113e3d4:	39ffe004 	addi	r7,r7,-128
8113e3d8:	1811883a 	mov	r8,r3
8113e3dc:	38000526 	beq	r7,zero,8113e3f4 <strncpy+0xc8>
8113e3e0:	18c00044 	addi	r3,r3,1
8113e3e4:	303ff51e 	bne	r6,zero,8113e3bc <__reset+0xfb11e3bc>
8113e3e8:	f800283a 	ret
8113e3ec:	1011883a 	mov	r8,r2
8113e3f0:	003fe606 	br	8113e38c <__reset+0xfb11e38c>
8113e3f4:	30000726 	beq	r6,zero,8113e414 <strncpy+0xe8>
8113e3f8:	198d883a 	add	r6,r3,r6
8113e3fc:	18000005 	stb	zero,0(r3)
8113e400:	18c00044 	addi	r3,r3,1
8113e404:	19bffd1e 	bne	r3,r6,8113e3fc <__reset+0xfb11e3fc>
8113e408:	f800283a 	ret
8113e40c:	3811883a 	mov	r8,r7
8113e410:	003fdf06 	br	8113e390 <__reset+0xfb11e390>
8113e414:	f800283a 	ret

8113e418 <__register_exitproc>:
8113e418:	defffa04 	addi	sp,sp,-24
8113e41c:	de00012e 	bgeu	sp,et,8113e424 <__register_exitproc+0xc>
8113e420:	003b68fa 	trap	3
8113e424:	dc000315 	stw	r16,12(sp)
8113e428:	04204534 	movhi	r16,33044
8113e42c:	84128604 	addi	r16,r16,18968
8113e430:	80c00017 	ldw	r3,0(r16)
8113e434:	dc400415 	stw	r17,16(sp)
8113e438:	dfc00515 	stw	ra,20(sp)
8113e43c:	18805217 	ldw	r2,328(r3)
8113e440:	2023883a 	mov	r17,r4
8113e444:	10003726 	beq	r2,zero,8113e524 <__register_exitproc+0x10c>
8113e448:	10c00117 	ldw	r3,4(r2)
8113e44c:	010007c4 	movi	r4,31
8113e450:	20c00e16 	blt	r4,r3,8113e48c <__register_exitproc+0x74>
8113e454:	1a000044 	addi	r8,r3,1
8113e458:	8800221e 	bne	r17,zero,8113e4e4 <__register_exitproc+0xcc>
8113e45c:	18c00084 	addi	r3,r3,2
8113e460:	18c7883a 	add	r3,r3,r3
8113e464:	18c7883a 	add	r3,r3,r3
8113e468:	12000115 	stw	r8,4(r2)
8113e46c:	10c7883a 	add	r3,r2,r3
8113e470:	19400015 	stw	r5,0(r3)
8113e474:	0005883a 	mov	r2,zero
8113e478:	dfc00517 	ldw	ra,20(sp)
8113e47c:	dc400417 	ldw	r17,16(sp)
8113e480:	dc000317 	ldw	r16,12(sp)
8113e484:	dec00604 	addi	sp,sp,24
8113e488:	f800283a 	ret
8113e48c:	00800034 	movhi	r2,0
8113e490:	10800004 	addi	r2,r2,0
8113e494:	10002626 	beq	r2,zero,8113e530 <__register_exitproc+0x118>
8113e498:	01006404 	movi	r4,400
8113e49c:	d9400015 	stw	r5,0(sp)
8113e4a0:	d9800115 	stw	r6,4(sp)
8113e4a4:	d9c00215 	stw	r7,8(sp)
8113e4a8:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113e4ac:	d9400017 	ldw	r5,0(sp)
8113e4b0:	d9800117 	ldw	r6,4(sp)
8113e4b4:	d9c00217 	ldw	r7,8(sp)
8113e4b8:	10001d26 	beq	r2,zero,8113e530 <__register_exitproc+0x118>
8113e4bc:	81000017 	ldw	r4,0(r16)
8113e4c0:	10000115 	stw	zero,4(r2)
8113e4c4:	02000044 	movi	r8,1
8113e4c8:	22405217 	ldw	r9,328(r4)
8113e4cc:	0007883a 	mov	r3,zero
8113e4d0:	12400015 	stw	r9,0(r2)
8113e4d4:	20805215 	stw	r2,328(r4)
8113e4d8:	10006215 	stw	zero,392(r2)
8113e4dc:	10006315 	stw	zero,396(r2)
8113e4e0:	883fde26 	beq	r17,zero,8113e45c <__reset+0xfb11e45c>
8113e4e4:	18c9883a 	add	r4,r3,r3
8113e4e8:	2109883a 	add	r4,r4,r4
8113e4ec:	1109883a 	add	r4,r2,r4
8113e4f0:	21802215 	stw	r6,136(r4)
8113e4f4:	01800044 	movi	r6,1
8113e4f8:	12406217 	ldw	r9,392(r2)
8113e4fc:	30cc983a 	sll	r6,r6,r3
8113e500:	4992b03a 	or	r9,r9,r6
8113e504:	12406215 	stw	r9,392(r2)
8113e508:	21c04215 	stw	r7,264(r4)
8113e50c:	01000084 	movi	r4,2
8113e510:	893fd21e 	bne	r17,r4,8113e45c <__reset+0xfb11e45c>
8113e514:	11006317 	ldw	r4,396(r2)
8113e518:	218cb03a 	or	r6,r4,r6
8113e51c:	11806315 	stw	r6,396(r2)
8113e520:	003fce06 	br	8113e45c <__reset+0xfb11e45c>
8113e524:	18805304 	addi	r2,r3,332
8113e528:	18805215 	stw	r2,328(r3)
8113e52c:	003fc606 	br	8113e448 <__reset+0xfb11e448>
8113e530:	00bfffc4 	movi	r2,-1
8113e534:	003fd006 	br	8113e478 <__reset+0xfb11e478>

8113e538 <__call_exitprocs>:
8113e538:	defff504 	addi	sp,sp,-44
8113e53c:	de00012e 	bgeu	sp,et,8113e544 <__call_exitprocs+0xc>
8113e540:	003b68fa 	trap	3
8113e544:	df000915 	stw	fp,36(sp)
8113e548:	dd400615 	stw	r21,24(sp)
8113e54c:	dc800315 	stw	r18,12(sp)
8113e550:	dfc00a15 	stw	ra,40(sp)
8113e554:	ddc00815 	stw	r23,32(sp)
8113e558:	dd800715 	stw	r22,28(sp)
8113e55c:	dd000515 	stw	r20,20(sp)
8113e560:	dcc00415 	stw	r19,16(sp)
8113e564:	dc400215 	stw	r17,8(sp)
8113e568:	dc000115 	stw	r16,4(sp)
8113e56c:	d9000015 	stw	r4,0(sp)
8113e570:	2839883a 	mov	fp,r5
8113e574:	04800044 	movi	r18,1
8113e578:	057fffc4 	movi	r21,-1
8113e57c:	00a04534 	movhi	r2,33044
8113e580:	10928604 	addi	r2,r2,18968
8113e584:	12000017 	ldw	r8,0(r2)
8113e588:	45005217 	ldw	r20,328(r8)
8113e58c:	44c05204 	addi	r19,r8,328
8113e590:	a0001c26 	beq	r20,zero,8113e604 <__call_exitprocs+0xcc>
8113e594:	a0800117 	ldw	r2,4(r20)
8113e598:	15ffffc4 	addi	r23,r2,-1
8113e59c:	b8000d16 	blt	r23,zero,8113e5d4 <__call_exitprocs+0x9c>
8113e5a0:	14000044 	addi	r16,r2,1
8113e5a4:	8421883a 	add	r16,r16,r16
8113e5a8:	8421883a 	add	r16,r16,r16
8113e5ac:	84402004 	addi	r17,r16,128
8113e5b0:	a463883a 	add	r17,r20,r17
8113e5b4:	a421883a 	add	r16,r20,r16
8113e5b8:	e0001e26 	beq	fp,zero,8113e634 <__call_exitprocs+0xfc>
8113e5bc:	80804017 	ldw	r2,256(r16)
8113e5c0:	e0801c26 	beq	fp,r2,8113e634 <__call_exitprocs+0xfc>
8113e5c4:	bdffffc4 	addi	r23,r23,-1
8113e5c8:	843fff04 	addi	r16,r16,-4
8113e5cc:	8c7fff04 	addi	r17,r17,-4
8113e5d0:	bd7ff91e 	bne	r23,r21,8113e5b8 <__reset+0xfb11e5b8>
8113e5d4:	00800034 	movhi	r2,0
8113e5d8:	10800004 	addi	r2,r2,0
8113e5dc:	10000926 	beq	r2,zero,8113e604 <__call_exitprocs+0xcc>
8113e5e0:	a0800117 	ldw	r2,4(r20)
8113e5e4:	1000301e 	bne	r2,zero,8113e6a8 <__call_exitprocs+0x170>
8113e5e8:	a0800017 	ldw	r2,0(r20)
8113e5ec:	10003226 	beq	r2,zero,8113e6b8 <__call_exitprocs+0x180>
8113e5f0:	a009883a 	mov	r4,r20
8113e5f4:	98800015 	stw	r2,0(r19)
8113e5f8:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113e5fc:	9d000017 	ldw	r20,0(r19)
8113e600:	a03fe41e 	bne	r20,zero,8113e594 <__reset+0xfb11e594>
8113e604:	dfc00a17 	ldw	ra,40(sp)
8113e608:	df000917 	ldw	fp,36(sp)
8113e60c:	ddc00817 	ldw	r23,32(sp)
8113e610:	dd800717 	ldw	r22,28(sp)
8113e614:	dd400617 	ldw	r21,24(sp)
8113e618:	dd000517 	ldw	r20,20(sp)
8113e61c:	dcc00417 	ldw	r19,16(sp)
8113e620:	dc800317 	ldw	r18,12(sp)
8113e624:	dc400217 	ldw	r17,8(sp)
8113e628:	dc000117 	ldw	r16,4(sp)
8113e62c:	dec00b04 	addi	sp,sp,44
8113e630:	f800283a 	ret
8113e634:	a0800117 	ldw	r2,4(r20)
8113e638:	80c00017 	ldw	r3,0(r16)
8113e63c:	10bfffc4 	addi	r2,r2,-1
8113e640:	15c01426 	beq	r2,r23,8113e694 <__call_exitprocs+0x15c>
8113e644:	80000015 	stw	zero,0(r16)
8113e648:	183fde26 	beq	r3,zero,8113e5c4 <__reset+0xfb11e5c4>
8113e64c:	95c8983a 	sll	r4,r18,r23
8113e650:	a0806217 	ldw	r2,392(r20)
8113e654:	a5800117 	ldw	r22,4(r20)
8113e658:	2084703a 	and	r2,r4,r2
8113e65c:	10000b26 	beq	r2,zero,8113e68c <__call_exitprocs+0x154>
8113e660:	a0806317 	ldw	r2,396(r20)
8113e664:	2088703a 	and	r4,r4,r2
8113e668:	20000c1e 	bne	r4,zero,8113e69c <__call_exitprocs+0x164>
8113e66c:	89400017 	ldw	r5,0(r17)
8113e670:	d9000017 	ldw	r4,0(sp)
8113e674:	183ee83a 	callr	r3
8113e678:	a0800117 	ldw	r2,4(r20)
8113e67c:	15bfbf1e 	bne	r2,r22,8113e57c <__reset+0xfb11e57c>
8113e680:	98800017 	ldw	r2,0(r19)
8113e684:	153fcf26 	beq	r2,r20,8113e5c4 <__reset+0xfb11e5c4>
8113e688:	003fbc06 	br	8113e57c <__reset+0xfb11e57c>
8113e68c:	183ee83a 	callr	r3
8113e690:	003ff906 	br	8113e678 <__reset+0xfb11e678>
8113e694:	a5c00115 	stw	r23,4(r20)
8113e698:	003feb06 	br	8113e648 <__reset+0xfb11e648>
8113e69c:	89000017 	ldw	r4,0(r17)
8113e6a0:	183ee83a 	callr	r3
8113e6a4:	003ff406 	br	8113e678 <__reset+0xfb11e678>
8113e6a8:	a0800017 	ldw	r2,0(r20)
8113e6ac:	a027883a 	mov	r19,r20
8113e6b0:	1029883a 	mov	r20,r2
8113e6b4:	003fb606 	br	8113e590 <__reset+0xfb11e590>
8113e6b8:	0005883a 	mov	r2,zero
8113e6bc:	003ffb06 	br	8113e6ac <__reset+0xfb11e6ac>

8113e6c0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8113e6c0:	defffc04 	addi	sp,sp,-16
8113e6c4:	de00012e 	bgeu	sp,et,8113e6cc <_exit+0xc>
8113e6c8:	003b68fa 	trap	3
8113e6cc:	dfc00315 	stw	ra,12(sp)
8113e6d0:	df000215 	stw	fp,8(sp)
8113e6d4:	df000204 	addi	fp,sp,8
8113e6d8:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
8113e6dc:	d0a01217 	ldw	r2,-32696(gp)
8113e6e0:	10800058 	cmpnei	r2,r2,1
8113e6e4:	1000031e 	bne	r2,zero,8113e6f4 <_exit+0x34>
8113e6e8:	01204534 	movhi	r4,33044
8113e6ec:	210b0904 	addi	r4,r4,11300
8113e6f0:	1129f080 	call	81129f08 <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
8113e6f4:	d0a01217 	ldw	r2,-32696(gp)
8113e6f8:	10800058 	cmpnei	r2,r2,1
8113e6fc:	1000041e 	bne	r2,zero,8113e710 <_exit+0x50>
8113e700:	e17fff17 	ldw	r5,-4(fp)
8113e704:	01204534 	movhi	r4,33044
8113e708:	210b1404 	addi	r4,r4,11344
8113e70c:	1129f080 	call	81129f08 <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
8113e710:	d0a01217 	ldw	r2,-32696(gp)
8113e714:	10800058 	cmpnei	r2,r2,1
8113e718:	1000031e 	bne	r2,zero,8113e728 <_exit+0x68>
8113e71c:	01204534 	movhi	r4,33044
8113e720:	210b1f04 	addi	r4,r4,11388
8113e724:	1129f080 	call	81129f08 <alt_log_printf_proc>
  ALT_OS_STOP();
8113e728:	d0207b05 	stb	zero,-32276(gp)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
8113e72c:	d0a01217 	ldw	r2,-32696(gp)
8113e730:	10800058 	cmpnei	r2,r2,1
8113e734:	1000031e 	bne	r2,zero,8113e744 <_exit+0x84>
8113e738:	01204534 	movhi	r4,33044
8113e73c:	210b2904 	addi	r4,r4,11428
8113e740:	1129f080 	call	81129f08 <alt_log_printf_proc>
8113e744:	e0bfff17 	ldw	r2,-4(fp)
8113e748:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8113e74c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8113e750:	10000226 	beq	r2,zero,8113e75c <_exit+0x9c>
    ALT_SIM_FAIL();
8113e754:	002af070 	cmpltui	zero,zero,43969
8113e758:	00000106 	br	8113e760 <_exit+0xa0>
  } else {
    ALT_SIM_PASS();
8113e75c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
8113e760:	d0a01217 	ldw	r2,-32696(gp)
8113e764:	10800058 	cmpnei	r2,r2,1
8113e768:	1000031e 	bne	r2,zero,8113e778 <_exit+0xb8>
8113e76c:	01204534 	movhi	r4,33044
8113e770:	210b3304 	addi	r4,r4,11468
8113e774:	1129f080 	call	81129f08 <alt_log_printf_proc>
  while (1);
8113e778:	003fff06 	br	8113e778 <__reset+0xfb11e778>
