
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00042610 memsz 0x000508d8 flags rwx
    LOAD off    0x00044000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00044000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0003c914  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003ccc  8113cb70  8113cb70  0003db70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001df4  8114083c  8114083c  0004183c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000e2c8  81142630  81142630  00043630  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  811508f8  811508f8  00044000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00044000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00044000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001ce0  00000000  00000000  00044028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0005d242  00000000  00000000  00045d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00015142  00000000  00000000  000a2f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001e0a2  00000000  00000000  000b808c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00007e4c  00000000  00000000  000d6130  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000ab7b  00000000  00000000  000ddf7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002707d  00000000  00000000  000e8af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0010fb74  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000023b0  00000000  00000000  0010fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0011c49d  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0011c4a3  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0011c4af  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0011c4b0  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0011c4b1  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0011c4b5  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0011c4b9  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0011c4bd  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  0011c4c8  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  0011c4d2  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  0011c4dc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003f  00000000  00000000  0011c4ed  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  0011c52c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
8113cb70 l    d  .rodata	00000000 .rodata
8114083c l    d  .rwdata	00000000 .rwdata
81142630 l    d  .bss	00000000 .bss
811508f8 l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100304 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
8114264c l     O .bss	00000004 viCh1HoldContext
81142650 l     O .bss	00000004 viCh2HoldContext
81142654 l     O .bss	00000004 viCh3HoldContext
81142658 l     O .bss	00000004 viCh4HoldContext
8114265c l     O .bss	00000004 viCh5HoldContext
81142660 l     O .bss	00000004 viCh6HoldContext
81142664 l     O .bss	00000004 viCh7HoldContext
81142668 l     O .bss	00000004 viCh8HoldContext
81105148 l     F .text	00000054 vFeebWriteReg
8110519c l     F .text	00000050 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
8110574c l     F .text	00000050 uliSpwcReadReg
811056f8 l     F .text	00000054 vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
81142558 l     O .rwdata	00000001 ucIoValue
8110594c l     F .text	0000007c bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
8110623c l     F .text	0000013c msgdma_write_extended_descriptor
81106378 l     F .text	00000164 msgdma_construct_extended_descriptor
811064dc l     F .text	00000318 msgdma_descriptor_async_transfer
811067f4 l     F .text	000003fc msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81107370 l     F .text	00000054 vRstcWriteReg
811073c4 l     F .text	00000050 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
81142670 l     O .bss	00000004 viHoldContext
811086f8 l     F .text	00000058 uliSyncReadReg
8110869c l     F .text	0000005c bSyncWriteReg
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
81142676 l     O .bss	00000004 xRAckLocal.4481
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
8114267a l     O .bss	00000004 xSAckLocal.4466
00000000 l    df *ABS*	00000000 parser_comm_task.c
811427d8 l     O .bss	0000004c PreParsedLocal.4550
00000000 l    df *ABS*	00000000 receiver_uart_task.c
81142824 l     O .bss	0000004c xPreParsedReader.4545
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 stack_monitor_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
8113e9ab l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
8113fc31 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8114083c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
81113434 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strnlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113fdfe l     O .rodata	00000010 zeroes.4389
8113fe0e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8113fe1e l     O .rodata	00000010 zeroes.4404
811180ac l     F .text	000000c4 __sbprintf
8113fe2e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
8113fe46 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81119d94 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
8111b8e4 l     F .text	00000008 __fp_unlock
8111b8f8 l     F .text	000001a4 __sinit.part.1
8111ba9c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
81141088 l     O .rwdata	00000020 lc_ctype_charset
81141068 l     O .rwdata	00000020 lc_message_charset
811410a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
8113fe84 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8111e90c l     F .text	0000006c sulp
8113ffcc l     O .rodata	00000014 fpi.2737
8113ffe0 l     O .rodata	00000028 tinytens
8113ffb8 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
81140018 l     O .rodata	00000010 blanks.4332
81140008 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
81121f7c l     F .text	00000104 __sprint_r.part.0
81140038 l     O .rodata	00000010 blanks.4348
81140028 l     O .rodata	00000010 zeroes.4349
81123518 l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
811239cc l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
81127768 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
811278ac l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
811278e0 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
81127b64 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_log_macro.o
81127c5c l       .text	00000000 tx_next_char
81127c84 l       .text	00000000 end_tx
81127c64 l       .text	00000000 wait_tx_ready_loop
00000000 l    df *ABS*	00000000 alt_log_printf.c
00000000 l    df *ABS*	00000000 alt_lseek.c
81128760 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
81128a1c l     F .text	00000044 alt_get_errno
81128a60 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81128c88 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
811425a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81129228 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
811425ac l     O .rwdata	00000004 lockid
81142720 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
811425b0 l     O .rwdata	00000004 lockid
81142728 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
8112ad38 l     F .text	00000050 OS_InitMisc
8112ad88 l     F .text	00000074 OS_InitRdyList
8112af0c l     F .text	000000ec OS_InitTCBList
8112ac50 l     F .text	000000e8 OS_InitEventList
8112adfc l     F .text	00000088 OS_InitTaskIdle
8112ae84 l     F .text	00000088 OS_InitTaskStat
8112b19c l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112cfb4 l     F .text	000000fc OS_FlagTaskRdy
8112cd64 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
8112e8a0 l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
811332d0 l     F .text	00000044 OSTmr_Lock
81132d70 l     F .text	00000074 OSTmr_Alloc
81133314 l     F .text	0000003c OSTmr_Unlock
811331d4 l     F .text	000000fc OSTmr_Unlink
81132de4 l     F .text	000000a4 OSTmr_Free
81133084 l     F .text	00000150 OSTmr_Link
81132ffc l     F .text	00000088 OSTmr_InitTask
81133350 l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
81133460 l     F .text	0000003c alt_dev_reg
81141324 l     O .rwdata	0000106c jtag_uart_0
81142390 l     O .rwdata	000000d0 rs232_uart
81142460 l     O .rwdata	00000064 dma_DDR_M1
811424c4 l     O .rwdata	00000064 dma_DDR_M2
81142528 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81137cf0 l     F .text	000002bc altera_avalon_jtag_uart_irq
81137fac l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
811387b0 l     F .text	00000084 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81138b48 l     F .text	000000a4 altera_avalon_uart_irq
81138bec l     F .text	00000140 altera_avalon_uart_rxirq
81138d2c l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
81138f34 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
811391e8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
8113946c l     F .text	00000044 alt_get_errno
811394b0 l     F .text	0000009c alt_msgdma_write_standard_descriptor
8113954c l     F .text	00000134 alt_msgdma_write_extended_descriptor
81139680 l     F .text	0000018c alt_msgdma_irq
8113980c l     F .text	00000094 alt_msgdma_construct_standard_descriptor
811398a0 l     F .text	0000015c alt_msgdma_construct_extended_descriptor
811399fc l     F .text	00000340 alt_msgdma_descriptor_async_transfer
81139d3c l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
8113a444 l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
8113a4f0 l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8113b6bc l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
8113bdd0 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
811427d0 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
811427d4 g     O .bss	00000004 alt_instruction_exception_handler
8110e760 g     F .text	0000004c vFailDeleteInitialization
811427a4 g     O .bss	00000004 aux_status_register
81142d98 g     O .bss	00001000 vInAckHandlerTask_stk
8113b478 g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
811078fc g     F .text	0000004c vSyncInitIrq
8110b198 g     F .text	00000284 vCheckRetransmission128
8111df90 g     F .text	0000007c _mprec_log10
81107a78 g     F .text	00000040 bSyncSetMbt
81105b30 g     F .text	00000108 I2C_Read
811425fe g     O .rwdata	00000002 OSTaskNameSize
81143d98 g     O .bss	00000260 xBuffer64
8111e084 g     F .text	0000008c __any_on
8111ca58 g     F .text	0000005c _isatty_r
8113fe90 g     O .rodata	00000028 __mprec_tinytens
81128880 g     F .text	0000019c alt_main
81113358 g     F .text	000000c8 _puts_r
811049d4 g     F .text	00000058 bFeebCh3IrqFlagBufferEmpty
81142730 g     O .bss	00000004 OSTmrFreeList
811507f8 g     O .bss	00000100 alt_irq
8111cbc8 g     F .text	00000068 _lseek_r
81110014 g     F .text	00000030 vChangeDefaultAutoResetSync
8112d814 g     F .text	000000d4 OS_MemInit
8110d3b8 g     F .text	0000098c vLoadDefaultETHConf
81108c18 g     F .text	0000014c bCheckInAck64
811322b0 g     F .text	00000068 OSTimeSet
8111bc9c g     F .text	000000ac __sflags
811268c8 g     F .text	00000088 .hidden __eqdf2
81102aa8 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
8110fe8c g     F .text	00000034 vLoadDefaultSyncSource
81133960 g     F .text	000001ac Check_for_Master_Boot_Record
8114bc34 g     O .bss	00000010 OSTmrWheelTbl
8113a204 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
81129918 g     F .text	00000618 OSEventPendMulti
811508f8 g       *ABS*	00000000 __alt_heap_start
8113c408 g     F .text	0000002c OSTaskCreateHook
811377d8 g     F .text	000001c4 alt_up_sd_card_fclose
81142684 g     O .bss	00000004 xSemCountBuffer64
8111319c g     F .text	00000044 printf
8114266d g     O .bss	00000001 SspdConfigControl
81107e94 g     F .text	00000054 bSyncCtrReset
811425d6 g     O .rwdata	00000002 OSMboxEn
81110688 g     F .text	000000a4 aatoh
81129f94 g     F .text	00000054 OSIntEnter
81124638 g     F .text	000000a4 _wcrtomb_r
811048e0 g     F .text	00000044 vFeebCh8IrqFlagClrBufferEmpty
8110e6c8 g     F .text	0000004c vFailReceiverCreate
81104544 g     F .text	00000040 vFeebCh2HandleIrq
811138c0 g     F .text	00000064 __sseek
8111bc4c g     F .text	00000010 __sinit
81106cb0 g     F .text	00000044 iMsgdmaExtendedDescriptorAsyncTransfer
81119a14 g     F .text	00000148 __swbuf_r
8110b970 g     F .text	000002f0 bResourcesInitRTOS
811053bc g     F .text	000000f4 bSpwcGetLinkError
811425e6 g     O .rwdata	00000002 OSQEn
8111cae4 g     F .text	00000084 _setlocale_r
8114255c g     O .rwdata	00000004 LedsPainelControl
81142898 g     O .bss	00000100 cDebugBuffer
8111baa4 g     F .text	00000070 __sfmoreglue
81121f64 g     F .text	00000018 ungetc
811295d4 g     F .text	000000d4 __malloc_unlock
81102d98 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
8113c488 g     F .text	00000028 OSTaskStatHook
8110fefc g     F .text	00000030 vChangeDefaultSyncSource
81142734 g     O .bss	00000001 OSLockNesting
81142738 g     O .bss	00000004 OSTmrSemSignal
8110f474 g     F .text	000000d8 vNFeeStructureInit
81142688 g     O .bss	00000004 xSemCommInit
8110292c g     F .text	00000080 uliXorshift32
8111e978 g     F .text	00001600 _strtod_r
8114268c g     O .bss	00000004 xSemCountSenderACK
811107c4 g     F .text	00000448 .hidden __divsf3
811427c8 g     O .bss	00000004 current_sector_modified
81142624 g     O .rwdata	00000002 OSDataSize
8114273c g     O .bss	00000001 OSRunning
81105580 g     F .text	00000178 bSpwcInitCh
81128548 g     F .text	00000064 alt_log_jtag_uart_isr_proc
81143ff8 g     O .bss	00001000 senderTask_stk
81142690 g     O .bss	00000004 fp
81108ad0 g     F .text	00000148 bCheckInAck128
8111cf58 g     F .text	0000015c memmove
81144ff8 g     O .bss	0000045c xSimMebStruct
8113c504 g     F .text	0000002c OSInitHookBegin
81108330 g     F .text	00000074 bSyncCtrCh8OutEnable
8114261c g     O .rwdata	00000002 OSTmrSize
8111bc34 g     F .text	00000018 _cleanup
811102c0 g     F .text	00000040 siCloseFile
8111d0b4 g     F .text	000000b0 _Balloc
8110ffa0 g     F .text	00000038 vLoadDefaultAutoResetSync
811363b4 g     F .text	000000cc alt_up_sd_card_is_Present
8113a144 g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
81142638 g     O .bss	00000004 pxDmaM1Dev
81102b40 g     F .text	000000a4 DMA_DISPATCHER_STOP
81133688 g     F .text	00000054 Save_Modified_Sector
81104b34 g     F .text	00000058 bFeebCh7IrqFlagBufferEmpty
81142740 g     O .bss	00000004 OSIdleCtr
811426fc g     O .bss	00000001 alt_log_write_on_flag
8110579c g     F .text	0000003c bEnableIsoDrivers
81126950 g     F .text	000000dc .hidden __gtdf2
8113c198 g     F .text	0000002c altera_nios2_gen2_irq_init
8113c280 g       .text	00000000 OSStartTsk
81107bec g     F .text	00000070 bSyncSetNCycles
8112b50c g     F .text	000002dc OS_TCBInit
811426ff g     O .bss	00000001 alt_log_jtag_uart_isr_on_flag
8110fa74 g     F .text	00000068 vInitSimucamBasicHW
81145454 g     O .bss	00001000 vTimeoutCheckerTask_stk
81108248 g     F .text	00000074 bSyncCtrCh6OutEnable
81105eac g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
811427c0 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
81142744 g     O .bss	00000002 OSTmrUsed
81142694 g     O .bss	00000004 xSemCountBuffer128
81103270 g     F .text	000000f8 TEMP_Read
811045c4 g     F .text	00000040 vFeebCh4HandleIrq
81142622 g     O .rwdata	00000002 OSTmrWheelTblSize
8110f944 g     F .text	0000002c cFeeSpwChannelDisable
811425c2 g     O .rwdata	00000002 OSEventSize
81142746 g     O .bss	00000001 OSPrioHighRdy
81112338 g     F .text	00000064 _fstat_r
8113c434 g     F .text	0000002c OSTaskDelHook
811426d8 g     O .bss	00000004 errno
81108624 g     F .text	0000003c uliSyncGetCtr
811199a4 g     F .text	0000001c __svfscanf
81113834 g     F .text	00000008 __seofread
8113c260 g       .text	00000000 OSStartHighRdy
81130ce0 g     F .text	000001ec OSTaskCreateExt
8114bc08 g     O .bss	00000011 alt_log_write_buf
8110ea84 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
81120aa8 g     F .text	00001244 ___svfiprintf_internal_r
8110a744 g     F .text	00000364 bPreParserV2
8112c894 g     F .text	00000068 OSFlagPendGetFlagsRdy
81142602 g     O .rwdata	00000002 OSTaskStatStkSize
8112b9e0 g     F .text	00000310 OSFlagAccept
8112efbc g     F .text	000000c0 OSQFlush
8112ea38 g     F .text	00000148 OSQAccept
81142710 g     O .bss	00000004 alt_argv
8114a554 g       *ABS*	00000000 _gp
8110e390 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
811290ec g     F .text	0000013c usleep
8113698c g     F .text	00000384 alt_up_sd_card_fopen
8111012c g     F .text	00000030 bSDcardIsPresent
8110aaa8 g     F .text	0000017c vSenderComTask
811364f4 g     F .text	000000d8 alt_up_sd_card_find_first
81130b2c g     F .text	000001b4 OSTaskCreate
8110ec24 g     F .text	00000068 vFailSendNack
811427b4 g     O .bss	00000004 command_argument_register
81130634 g     F .text	000004f8 OSTaskChangePrio
8110f334 g     F .text	00000088 vCouldNotSendTMPusCommand
8114272c g     O .bss	00000004 alt_heapsem
81106144 g     F .text	00000080 bSetBoardLeds
8112b7e8 g     F .text	000001f8 OSDebugInit
81130ecc g     F .text	0000034c OSTaskDel
8112d8e8 g     F .text	000001ac OSMutexAccept
8110ff2c g     F .text	00000040 vSetTimeCode
8113acec g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81142698 g     O .bss	00000004 xSemCountPreParsed
81141108 g     O .rwdata	00000180 alt_fd_list
81104a84 g     F .text	00000058 bFeebCh5IrqFlagBufferEmpty
811412a4 g     O .rwdata	0000001d alt_log_msg_alt_main
8114bc44 g     O .bss	00000370 OSFlagTbl
8110e4f8 g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
8110fde4 g     F .text	0000003c vLoadDefaultRTValue
8112aa18 g     F .text	000000c0 OS_EventTaskRemove
811426fe g     O .bss	00000001 alt_log_jtag_uart_alarm_on_flag
81135c08 g     F .text	00000134 find_first_empty_record_in_root_directory
8113b87c g     F .text	00000098 alt_find_dev
81112e84 g     F .text	00000150 memcpy
81124304 g     F .text	00000264 __hexnan
81146454 g     O .bss	00000160 xBuffer32
811425ec g     O .rwdata	00000002 OSRdyTblSize
8114bfb4 g     O .bss	000001a0 OSTmrTbl
8111b8ec g     F .text	0000000c _cleanup_r
811274a4 g     F .text	000000e4 .hidden __floatsidf
8110cfe0 g     F .text	000001a8 vSendPusTM64
811079e8 g     F .text	0000004c ucSyncStatusErrorCode
8110fa40 g     F .text	00000034 cFeeRMAPLogDisable
8110953c g     F .text	000009ac vParserCommTask
8113be9c g     F .text	00000084 alt_io_redirect
8110f9d4 g     F .text	00000034 cFeeRMAPEchoingDisable
81126a2c g     F .text	000000f4 .hidden __ltdf2
81104d64 g     F .text	000000d4 bFeebSetIrqControl
8110f194 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
8114269c g     O .bss	00000004 xMutexReceivedACK
81103bec g     F .text	000000b0 bSdmaInitM2Dma
8113cb70 g       *ABS*	00000000 __DTOR_END__
8113b174 g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
8113b4bc g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81107f3c g     F .text	00000054 bSyncCtrErrInj
8113b41c g     F .text	0000005c alt_msgdma_register_callback
8110dd44 g     F .text	00000330 vShowEthConfig
8110fadc g     F .text	00000030 bLogWriteSDCard
8110e814 g     F .text	00000068 vFailSetCountSemaphorexBuffer64
8110a000 g     F .text	000000a0 bTrySendSemaphoreCommInit
81113420 g     F .text	00000014 puts
8113c5ac g     F .text	000000a4 alt_exception_cause_generated_bad_addr
811078bc g     F .text	00000040 vSyncHandleIrq
811296a8 g     F .text	00000128 OSEventNameGet
81104748 g     F .text	00000044 vFeebCh2IrqFlagClrBufferEmpty
811425d0 g     O .rwdata	00000002 OSFlagMax
8111cce4 g     F .text	000000e0 mbrtowc
81135800 g     F .text	000001b4 find_first_empty_cluster
811081d4 g     F .text	00000074 bSyncCtrCh5OutEnable
81142674 g     O .bss	00000001 vucN
8111e6e4 g     F .text	00000074 __fpclassifyd
81107948 g     F .text	00000054 bSyncStatusExtnIrq
811199c0 g     F .text	00000054 _vfscanf_r
8112df68 g     F .text	000005a4 OSMutexPend
8111dee4 g     F .text	000000ac __ratio
811362f0 g     F .text	000000c4 alt_up_sd_card_open_dev
8110f3bc g     F .text	00000068 vWarnCouldNotgetMutexRetrans128
81129fe8 g     F .text	00000100 OSIntExit
81107ab8 g     F .text	00000040 bSyncSetBt
811234fc g     F .text	0000001c __vfiprintf_internal
8114260a g     O .rwdata	00000002 OSTCBSize
81104704 g     F .text	00000044 vFeebCh1IrqFlagClrBufferEmpty
81142747 g     O .bss	00000001 OSPrioCur
81138220 g     F .text	000002c4 altera_avalon_jtag_uart_read
8113a9b4 g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
81113164 g     F .text	00000038 _printf_r
8112546c g     F .text	00000064 .hidden __udivsi3
81127ba8 g     F .text	000000ac isatty
8114266c g     O .bss	00000001 LedsBoardControl
811426a0 g     O .bss	00000004 xSemCountReceivedACK
811425f0 g     O .rwdata	00000002 OSStkWidth
8111cab4 g     F .text	00000030 iswspace
8113fee0 g     O .rodata	000000c8 __mprec_tens
811425e4 g     O .rwdata	00000002 OSPtrSize
8111cb68 g     F .text	0000000c __locale_charset
811080ec g     F .text	00000074 bSyncCtrCh3OutEnable
8112565c g     F .text	000000c8 .hidden __lesf2
811425c4 g     O .rwdata	00000002 OSEventTblSize
81124838 g     F .text	0000007c .hidden __fixunsdfsi
8113c1c4 g       .text	00000000 OSCtxSw
81105c38 g     F .text	00000160 I2C_MultipleRead
811286ec g     F .text	00000074 alt_log_system_clock
811426e4 g     O .bss	00000004 __malloc_top_pad
81142748 g     O .bss	00000004 OSTCBList
81132d30 g     F .text	00000040 OSTmrSignal
811426f4 g     O .bss	00000004 alt_fd_list_lock
811205d4 g     F .text	0000001c strtoul
81142574 g     O .rwdata	00000004 __mb_cur_max
8111cb98 g     F .text	0000000c _localeconv_r
811205f0 g     F .text	000002e0 _strtoull_r
81107300 g     F .text	00000070 vRstcHoldDeviceReset
8111d4d8 g     F .text	00000044 __i2b
8111c3fc g     F .text	000004c4 __sfvwrite_r
81134ae0 g     F .text	000000c0 get_dir_divider_location
8114c154 g     O .bss	00000c30 OSMemTbl
8114274c g     O .bss	00000001 OSTickStepState
811282fc g     F .text	00000060 alt_log_printf_proc
811465b4 g     O .bss	00001000 vReceiverUartTask_stk
8111362c g     F .text	0000005c _sbrk_r
811426a4 g     O .bss	00000004 xSemTimeoutChecker
811347a0 g     F .text	000000cc filename_to_upper_case
81142700 g     O .bss	00000001 alt_log_jtag_uart_startup_info_on_flag
811425e8 g     O .rwdata	00000002 OSQMax
81136d10 g     F .text	00000090 alt_up_sd_card_set_attributes
8112dc64 g     F .text	00000304 OSMutexDel
8114cd84 g     O .bss	00000800 OSTaskStatStk
8111015c g     F .text	00000030 bSDcardFAT16Check
8112d430 g     F .text	000000f8 OSMemNameGet
8110e1e4 g     F .text	00000060 vFailCreateMutexSResources
81133b0c g     F .text	00000284 Read_File_Record_At_Offset
811425c8 g     O .rwdata	00000002 OSFlagEn
8111e110 g     F .text	00000068 _read_r
8114260e g     O .rwdata	00000002 OSTimeTickHookEn
8112f484 g     F .text	00000170 OSQPost
8112d0b0 g     F .text	000000ac OS_FlagUnlink
81102490 g     F .text	0000049c bDdr2MemoryRandomReadTest
81142590 g     O .rwdata	00000004 alt_max_fd
8110ef40 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
8112b054 g     F .text	00000070 OS_MemCopy
8112b0c4 g     F .text	000000d8 OS_Sched
81135384 g     F .text	0000047c find_file_in_directory
811236a8 g     F .text	000000f8 _fclose_r
8112d338 g     F .text	000000f8 OSMemGet
81131510 g     F .text	000001bc OSTaskNameSet
8111b8b4 g     F .text	00000030 fflush
811426e0 g     O .bss	00000004 __malloc_max_sbrked_mem
81142750 g     O .bss	00000004 OSCtxSwCtr
8113c4b0 g     F .text	00000054 OSTimeTickHook
811475b4 g     O .bss	00001000 vOutAckHandlerTask_stk
811279dc g     F .text	00000188 alt_irq_register
811425d2 g     O .rwdata	00000002 OSFlagNameSize
81111954 g     F .text	00000118 .hidden __extendsfdf2
8112aad8 g     F .text	00000108 OS_EventTaskRemoveMulti
81136480 g     F .text	00000074 alt_up_sd_card_is_FAT16
811059c8 g     F .text	00000088 I2C_TestAdress
81125724 g     F .text	000008b4 .hidden __adddf3
8114bc1c g     O .bss	00000018 alt_log_jtag_uart_alarm_1
81125528 g     F .text	00000078 .hidden __nesf2
8112a8c0 g     F .text	00000158 OS_EventTaskWaitMulti
8111dc7c g     F .text	00000114 __b2d
8113a6ec g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
811425ea g     O .rwdata	00000002 OSQSize
81124e34 g     F .text	00000540 .hidden __umoddi3
811287a4 g     F .text	000000dc lseek
8112ff74 g     F .text	00000214 OSSemPend
811054b0 g     F .text	000000d0 bSpwcGetLinkStatus
81105014 g     F .text	00000088 bFeebGetWindowing
81142564 g     O .rwdata	00000004 _global_impure_ptr
81107870 g     F .text	0000004c bSSDisplayUpdate
81134e44 g     F .text	00000540 get_home_directory_cluster_for_file
8111e178 g     F .text	0000056c _realloc_r
811425d4 g     O .rwdata	00000002 OSLowestPrio
811508f8 g       *ABS*	00000000 __bss_end
8113bcd8 g     F .text	000000f8 alt_iic_isr_register
8113c580 g     F .text	0000002c OSTCBInitHook
8114261a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
81128fdc g     F .text	00000110 alt_tick
8110e490 g     F .text	00000068 vFailGetMutexSenderTask
81107220 g     F .text	0000006c vRstcSimucamReset
81140048 g     O .rodata	00000100 __hexdig
8113b268 g     F .text	000001b4 alt_msgdma_init
811248b4 g     F .text	00000580 .hidden __udivdi3
8110a42c g     F .text	0000017c setPreAckSenderFreePos
81123920 g     F .text	00000024 _fputwc_r
811425bc g     O .rwdata	00000002 OSEventEn
8113feb8 g     O .rodata	00000028 __mprec_bigtens
8111d2b4 g     F .text	0000010c __s2b
81142616 g     O .rwdata	00000002 OSTmrCfgNameSize
81107b78 g     F .text	00000074 bSyncSetPolarity
8110b41c g     F .text	0000028c vCheckRetransmission64
81127588 g     F .text	000000b0 .hidden __floatunsidf
81142704 g     O .bss	00000004 alt_system_clock_in_sec
811284f4 g     F .text	00000054 alt_log_jtag_uart_startup_info
8110ea1c g     F .text	00000068 vFailFoundBufferRetransmission
8111d9b4 g     F .text	00000060 __mcmp
811427cc g     O .bss	00000004 current_sector_index
811389e0 g     F .text	00000168 altera_avalon_uart_init
8113b544 g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
811040cc g     F .text	00000438 bSdmaDmaM2Transfer
8110ff6c g     F .text	00000034 vResetTimeCode
8110f918 g     F .text	0000002c cFeeSpwChannelEnable
8111bc6c g     F .text	00000018 __fp_lock_all
8113bc84 g     F .text	00000054 alt_ic_irq_enabled
81105a50 g     F .text	000000e0 I2C_Write
81142754 g     O .bss	00000002 OSTmrFree
8112cecc g     F .text	000000e8 OS_FlagInit
81128f38 g     F .text	000000a4 alt_alarm_stop
81113c94 g     F .text	0000001c strtol
811426fd g     O .bss	00000001 alt_log_sys_clk_on_flag
811324dc g     F .text	00000140 OSTmrDel
81133878 g     F .text	000000e8 mark_cluster
811425f8 g     O .rwdata	00000002 OSTaskIdleStkSize
811426f8 g     O .bss	00000004 alt_irq_active
8112fb94 g     F .text	000000b8 OSSemAccept
81111ed0 g     F .text	0000044c _fseeko_r
81113a10 g     F .text	00000044 strnlen
8112d644 g     F .text	000000e0 OSMemPut
8112d15c g     F .text	000001dc OSMemCreate
81142758 g     O .bss	00000004 OSIdleCtrMax
8110d188 g     F .text	000001a8 vSendPusTM128
81100104 g     F .exceptions	000000dc alt_irq_handler
81127d44 g     F .text	000005b8 alt_log_private_printf
811410e0 g     O .rwdata	00000028 alt_dev_null
8113a2fc g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
81107b38 g     F .text	00000040 bSyncSetOst
8114260c g     O .rwdata	00000002 OSTicksPerSec
81141288 g     O .rwdata	00000019 alt_log_msg_bss
81135d3c g     F .text	00000194 convert_filename_to_name_extension
8110ac24 g     F .text	00000030 vSimMebTask
81105d98 g     F .text	00000094 i2c_start
8113c1c4 g       .text	00000000 OSIntCtxSw
81108160 g     F .text	00000074 bSyncCtrCh4OutEnable
8113b0e0 g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
81127884 g     F .text	00000028 alt_dcache_flush_all
8111d3c0 g     F .text	00000068 __hi0bits
8110fe20 g     F .text	0000003c vChangeRTValue
811427a0 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110b014 g     F .text	00000184 vCheck
8110f424 g     F .text	00000050 vNFeeNotInUse
81127424 g     F .text	00000080 .hidden __fixdfsi
811485b4 g     O .bss	00001000 vInitialTask_stk
811426a8 g     O .bss	00000002 usiIdCMD
81107e40 g     F .text	00000054 bSyncCtrStart
811359b4 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
8111ff78 g     F .text	00000018 strtod
8114275c g     O .bss	00000004 OSTCBFreeList
81130188 g     F .text	00000174 OSSemPendAbort
8110e630 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110eea8 g     F .text	0000004c vFailCreateTimerRetransmisison
8110e9b4 g     F .text	00000068 vFailGetCountSemaphorexBuffer32
8110c168 g     F .text	000002f0 bSendUART128v2
8110fba4 g     F .text	0000019c vSimucamStructureInit
81142588 g     O .rwdata	00000008 alt_dev_list
81111e00 g     F .text	0000004c _fputc_r
8112926c g     F .text	0000010c write
811131e0 g     F .text	000000a8 _putc_r
811427c4 g     O .bss	00000004 device_pointer
81142610 g     O .rwdata	00000002 OSVersionNbr
811255a0 g     F .text	000000bc .hidden __gtsf2
81109ee8 g     F .text	00000118 getPreParsedPacket
81127924 g     F .text	000000b8 fstat
81110078 g     F .text	00000040 vChangeIdNFEEMaster
81111dd4 g     F .text	0000002c fprintf
8110fa08 g     F .text	00000038 cFeeRMAPLogEnable
81102c88 g     F .text	00000110 DMA_SINGLE_TRANSFER
81104adc g     F .text	00000058 bFeebCh6IrqFlagBufferEmpty
8110eff4 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
81110368 g     F .text	00000058 _reg_write
811100b8 g     F .text	00000034 vChangeDefaultIdNFEEMaster
81126a2c g     F .text	000000f4 .hidden __ledf2
811495b4 g     O .bss	00001000 vStackMonitor_stk
8110f2cc g     F .text	00000068 vCouldNotSendLog
8113275c g     F .text	000001b8 OSTmrRemainGet
811425b8 g     O .rwdata	00000004 OSEndiannessTest
81107414 g     F .text	00000058 v_spi_start
8111d71c g     F .text	00000148 __pow5mult
81122098 g     F .text	00001464 ___vfiprintf_internal_r
811426f0 g     O .bss	00000004 __nlocale_changed
811254d0 g     F .text	00000058 .hidden __umodsi3
81107f90 g     F .text	00000074 bSyncCtrSyncOutEnable
8111018c g     F .text	000000f8 bInitializeSDCard
8110edc4 g     F .text	0000004c vFailParserCommTaskCreate
811136cc g     F .text	00000038 _scanf_r
8110ee5c g     F .text	0000004c vFailOutAckHandlerTaskCreate
811425ca g     O .rwdata	00000002 OSFlagGrpSize
8114a5b4 g     O .bss	00000058 xInUseRetrans
8113a74c g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81132914 g     F .text	000000ec OSTmrStateGet
811508f8 g       *ABS*	00000000 end
81104644 g     F .text	00000040 vFeebCh6HandleIrq
8110eb54 g     F .text	00000068 vNoContentInPreParsedBuffer
8111231c g     F .text	0000001c fseeko
81111c84 g     F .text	0000000c _atoi_r
8113922c g     F .text	00000240 altera_avalon_uart_write
81127c88 g     F .text	00000054 alt_log_txchar
81111eb4 g     F .text	0000001c fseek
8110c0d8 g     F .text	00000090 vCCDChangeValues
81137b20 g     F .text	000001d0 altera_avalon_jtag_uart_init
8112b354 g     F .text	000000e4 OS_TaskStat
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110e290 g     F .text	0000004c vFailTestCriticasParts
8113cb70 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81102020 g     F .text	00000470 bDdr2MemoryRandomWriteTest
81138834 g     F .text	00000084 alt_avalon_timer_sc_init
81104f6c g     F .text	000000a8 bFeebSetWindowing
81138920 g     F .text	00000068 altera_avalon_uart_write_fd
81111c14 g     F .text	00000064 .hidden __clzsi2
81138988 g     F .text	00000058 altera_avalon_uart_close_fd
811384e4 g     F .text	000002cc altera_avalon_jtag_uart_write
81132e88 g     F .text	00000174 OSTmr_Init
8114a60c g     O .bss	00000348 xBuffer128
8111bc5c g     F .text	00000004 __sfp_lock_acquire
81103368 g     F .text	00000048 sense_log_temp
8111ce74 g     F .text	000000e4 memchr
8112aff8 g     F .text	0000005c OS_MemClr
81115e90 g     F .text	00002200 ___vfprintf_internal_r
8113c2a4 g     F .text	00000164 OSTaskStkInit
81113704 g     F .text	00000060 _sprintf_r
811426aa g     O .bss	00000001 SemCount32
8111c0e4 g     F .text	00000318 _free_r
8113bf20 g     F .text	00000234 alt_printf
8110cf90 g     F .text	00000050 vTimeoutCheck
81110418 g     F .text	000001fc _print_codec_status
8111cb74 g     F .text	00000010 __locale_mb_cur_max
8112a608 g     F .text	000001a0 OS_EventTaskRdy
81102be4 g     F .text	000000a4 DMA_DISPATCHER_RESET
8113c92c g     F .text	00000188 __call_exitprocs
81142760 g     O .bss	00000001 OSCPUUsage
811426ec g     O .bss	00000004 __mlocale_changed
81107ee8 g     F .text	00000054 bSyncCtrOneShot
8114256c g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	000000ac _start
81108660 g     F .text	0000003c uliSyncReadStatus
81142718 g     O .bss	00000004 _alt_tick_rate
8112f07c g     F .text	00000294 OSQPend
81120098 g     F .text	000002e8 _strtoll_r
81131e00 g     F .text	0000010c OSTimeDly
8111d864 g     F .text	00000150 __lshift
81109244 g     F .text	000002f8 vOutAckHandlerTask
8113a1a4 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
8114271c g     O .bss	00000004 _alt_nticks
81128ccc g     F .text	00000104 read
811334dc g     F .text	000000f0 alt_sys_init
81111010 g     F .text	0000012c .hidden __floatsisf
811208d0 g     F .text	000001d8 __ssprint_r
811130fc g     F .text	00000068 _open_r
81110340 g     F .text	00000028 bTestSimucamCriticalHW
8110509c g     F .text	000000ac bFeebGetBuffersStatus
8110e074 g     F .text	000000a4 ucCrc8
8110081c g     F .text	00000cb4 bDdr2EepromDump
8113c80c g     F .text	00000120 __register_exitproc
81142761 g     O .bss	00000001 OSTaskCtr
81127c54 g       .text	00000000 tx_log_str
8110cf40 g     F .text	00000050 siPosStr
81124568 g     F .text	000000d0 strncmp
81131f0c g     F .text	00000164 OSTimeDlyHMSM
8111d51c g     F .text	00000200 __multiply
811380b8 g     F .text	00000070 altera_avalon_jtag_uart_close
811075e4 g     F .text	00000058 v_spi_end
81110300 g     F .text	00000040 cGetNextChar
8113c720 g     F .text	000000ec strncpy
81142870 g     O .bss	00000028 __malloc_current_mallinfo
811425be g     O .rwdata	00000002 OSEventMax
81125528 g     F .text	00000078 .hidden __eqsf2
8111dd90 g     F .text	00000154 __d2b
811302fc g     F .text	00000118 OSSemPost
811047d0 g     F .text	00000044 vFeebCh4IrqFlagClrBufferEmpty
8110fe5c g     F .text	00000030 vChangeDefaultRTValue
811046c4 g     F .text	00000040 vFeebCh8HandleIrq
8114279c g     O .bss	00000004 initialized
8110cdf0 g     F .text	00000100 vSendLog
8112a17c g     F .text	000000e4 OSSchedUnlock
8110763c g     F .text	00000164 RTCC_SPI_R_MAC
8114259c g     O .rwdata	00000004 alt_log_boot_on_flag
8113799c g     F .text	00000068 altera_avalon_jtag_uart_read_fd
81120380 g     F .text	00000254 _strtoul_r
8113ba24 g     F .text	000000e4 alt_get_fd
81142764 g     O .bss	00000004 OSMemFreeList
8112a2d8 g     F .text	000000b8 OSStatInit
811029ac g     F .text	00000064 DMA_OPEN_DEVICE
81150290 g     O .bss	00000014 search_data
811051ec g     F .text	00000100 bSpwcSetLink
81127638 g     F .text	00000130 alt_busy_sleep
8112cc98 g     F .text	000000cc OSFlagQuery
81108004 g     F .text	00000074 bSyncCtrCh1OutEnable
811425f4 g     O .rwdata	00000002 OSTaskCreateExtEn
81110614 g     F .text	00000074 _split_codec_status
81119d38 g     F .text	0000005c _close_r
8110ebbc g     F .text	00000068 vCouldNotSendEthConfUART
81108eb0 g     F .text	00000394 vInitialTask
811283fc g     F .text	000000f8 alt_log_jtag_uart_print_control_reg
8113a68c g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8113c6a4 g     F .text	0000007c memcmp
8112a5e0 g     F .text	00000028 OS_Dummy
81137a6c g     F .text	00000058 altera_avalon_jtag_uart_close_fd
811508f8 g       *ABS*	00000000 __alt_stack_base
81137ac4 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
81104814 g     F .text	00000044 vFeebCh5IrqFlagClrBufferEmpty
8111239c g     F .text	000000d4 _fwrite_r
8113a7ac g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81104924 g     F .text	00000058 bFeebCh1IrqFlagBufferEmpty
81119bdc g     F .text	0000015c __swsetup_r
8114d584 g     O .bss	000001e0 OSQTbl
8114bbec g     O .bss	0000001c xConfEth
81125fd8 g     F .text	000008f0 .hidden __divdf3
8110fec0 g     F .text	0000003c vChangeSyncSource
8111bb14 g     F .text	00000120 __sfp
811502a4 g     O .bss	00000054 boot_sector_data
81102af4 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111e00c g     F .text	00000078 __copybits
81140c60 g     O .rwdata	00000408 __malloc_av_
8111bc68 g     F .text	00000004 __sinit_lock_release
81142630 g     O .bss	00000004 uliInitialState
81105e2c g     F .text	00000080 i2c_stop
8111072c g     F .text	00000064 Verif_Error
81110790 g     F .text	00000034 toInt
8110e3dc g     F .text	0000004c vFailSendPreAckSenderSemaphore
81142768 g     O .bss	00000004 OSTCBHighRdy
81111234 g     F .text	00000720 .hidden __muldf3
811137d8 g     F .text	0000005c __sread
8111bf7c g     F .text	0000003c fread
8114276c g     O .bss	00000004 OSQFreeList
8113b914 g     F .text	00000110 alt_find_file
8113b700 g     F .text	000000ac alt_dev_llist_insert
811294ac g     F .text	00000128 __malloc_lock
81111da4 g     F .text	00000030 _fprintf_r
81128e3c g     F .text	000000fc sbrk
8110f894 g     F .text	0000002c vFeeSpwRMAPLoadDefault
8110e94c g     F .text	00000068 vFailGetCountSemaphorexBuffer64
81113cb0 g     F .text	000021e0 ___svfprintf_internal_r
8110d330 g     F .text	00000088 vTMPusTestConnection
811297d0 g     F .text	00000148 OSEventNameSet
8111b850 g     F .text	00000064 _fflush_r
811235dc g     F .text	000000cc _calloc_r
81142770 g     O .bss	00000001 OSRdyGrp
81107a34 g     F .text	00000044 ucSyncStatusCycleNumber
81132a00 g     F .text	00000148 OSTmrStart
81104604 g     F .text	00000040 vFeebCh5HandleIrq
81111d8c g     F .text	00000018 fopen
81102a10 g     F .text	0000004c DMA_CONFIG
81142630 g       *ABS*	00000000 __bss_start
81112fd4 g     F .text	00000128 memset
8110a2f0 g     F .text	0000013c setPreParsedFreePos
8113b208 g     F .text	00000060 alt_msgdma_open
8110bef4 g     F .text	0000017c main
8110e560 g     F .text	00000068 vFailGetMutexReceiverTask
8110fd78 g     F .text	0000003c vChangeEPValue
81142714 g     O .bss	00000004 alt_envp
811426dc g     O .bss	00000004 __malloc_max_total_mem
8113aaac g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
8110e118 g     F .text	0000005c ucCrc8wInit
8110eef4 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81137a04 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81102fa8 g     F .text	000002c8 POWER_Read
81105fe4 g     F .text	00000160 i2c_read
81119b5c g     F .text	00000018 __swbuf
81140394 g     O .rodata	00000100 OSUnMapTbl
8112565c g     F .text	000000c8 .hidden __ltsf2
81136da0 g     F .text	00000090 alt_up_sd_card_get_attributes
8111bd48 g     F .text	00000234 _fread_r
8110e428 g     F .text	00000068 vFailGetCountSemaphoreSenderTask
811057d8 g     F .text	0000003c bDisableIsoDrivers
811425ee g     O .rwdata	00000002 OSSemEn
811335cc g     F .text	000000bc Write_Sector_Data
811371b0 g     F .text	00000628 alt_up_sd_card_write
8112c8fc g     F .text	0000039c OSFlagPost
81113924 g     F .text	00000008 __sclose
8110f1fc g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
811237a0 g     F .text	00000014 fclose
8112a7a8 g     F .text	00000118 OS_EventTaskWait
8110f0c4 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
81113a54 g     F .text	00000240 _strtol_r
81111a6c g     F .text	000001a8 .hidden __truncdfsf2
8112b438 g     F .text	000000d4 OS_TaskStatStkChk
81131218 g     F .text	00000158 OSTaskDelReq
81119f9c g     F .text	00001690 _dtoa_r
8113adc8 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
81112670 g     F .text	00000814 _malloc_r
811247a4 g     F .text	00000030 __ascii_wctomb
8112da94 g     F .text	000001d0 OSMutexCreate
8110f05c g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
81108d64 g     F .text	0000014c bCheckInAck32
81142594 g     O .rwdata	00000004 alt_errno
8113a8f4 g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8112a260 g     F .text	00000078 OSStart
811052ec g     F .text	000000d0 bSpwcGetLink
81106d38 g     F .text	000004e8 POWER_SPI_RW
81121cec g     F .text	000000dc __submore
8112835c g     F .text	000000a0 altera_avalon_jtag_uart_report_log
81129444 g     F .text	00000068 __env_unlock
8111c8c0 g     F .text	000000cc _fwalk
811316cc g     F .text	000001dc OSTaskResume
8112d724 g     F .text	000000f0 OSMemQuery
81142600 g     O .rwdata	00000002 OSTaskStatEn
811508f8 g       *ABS*	00000000 __alt_stack_limit
81142648 g     O .bss	00000004 ECommSpwCh
8110ffd8 g     F .text	0000003c vChangeAutoResetSync
8111ce10 g     F .text	00000064 _mbtowc_r
81108780 g     F .text	00000350 vInAckHandlerTaskV2
811425da g     O .rwdata	00000002 OSMemMax
8112f5f4 g     F .text	00000178 OSQPostFront
81113288 g     F .text	000000d0 putc
81125374 g     F .text	00000084 .hidden __divsi3
81142771 g     O .bss	00000006 OSRdyTbl
811425b4 g     O .rwdata	00000002 OSDebugEn
811412f8 g     O .rwdata	0000002a alt_log_msg_cache
8111bfb8 g     F .text	0000012c _malloc_trim_r
8113cb70 g       *ABS*	00000000 __CTOR_END__
811426d0 g     O .bss	00000008 xSdHandle
81110c0c g     F .text	00000404 .hidden __mulsf3
811425cc g     O .rwdata	00000002 OSFlagNodeSize
81142634 g     O .bss	00000004 pnt_memory
811100ec g     F .text	00000040 vSyncReset
81107af8 g     F .text	00000040 bSyncSetPer
81100308 g     F .text	00000514 bDdr2EepromTest
811427a8 g     O .bss	00000004 status_register
81142614 g     O .rwdata	00000002 OSTmrCfgMax
8110848c g     F .text	00000074 bSyncIrqFlagClrError
8110ec8c g     F .text	00000068 vFailSetPreAckSenderBuffer
8111e830 g     F .text	000000dc strcmp
811427b0 g     O .bss	00000004 command_register
8112eb80 g     F .text	000001b4 OSQCreate
81131370 g     F .text	000001a0 OSTaskNameGet
8114a954 g     O .bss	00000018 xReceivedACK
8112f76c g     F .text	00000214 OSQPostOpt
8112a390 g     F .text	00000228 OSTimeTick
811425fc g     O .rwdata	00000002 OSTaskMax
8113cb70 g       *ABS*	00000000 __DTOR_LIST__
8112fc4c g     F .text	000000e0 OSSemCreate
81142620 g     O .rwdata	00000002 OSTmrWheelSize
811103c0 g     F .text	00000058 _reg_read
8112e72c g     F .text	00000174 OSMutexQuery
811268c8 g     F .text	00000088 .hidden __nedf2
811425f6 g     O .rwdata	00000002 OSTaskDelEn
8110fd40 g     F .text	00000038 vLoadDefaultEPValue
811082bc g     F .text	00000074 bSyncCtrCh7OutEnable
81130414 g     F .text	00000118 OSSemQuery
8112ed34 g     F .text	00000288 OSQDel
8112f310 g     F .text	00000174 OSQPendAbort
811426ac g     O .bss	00000004 xMutexPreParsed
8113349c g     F .text	00000040 alt_irq_init
81128dd0 g     F .text	0000006c alt_release_fd
811337bc g     F .text	000000bc get_cluster_flag
81108500 g     F .text	00000074 bSyncIrqFlagClrBlank
8113b500 g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
811412c4 g     O .rwdata	00000031 alt_log_msg_stackpointer
81113764 g     F .text	00000074 sprintf
8113fa30 g     O .rodata	00000100 .hidden __clz_tab
81133d90 g     F .text	00000294 Write_File_Record_At_Offset
81101590 g     F .text	00000580 bDdr2MemoryWriteTest
8110e5c8 g     F .text	00000068 vFailGetMutexTxUARTSenderTask
811426e8 g     O .bss	00000004 _PathLocale
811085cc g     F .text	00000058 bSyncIrqFlagBlank
81106bf0 g     F .text	000000c0 iMsgdmaConstructExtendedMmToMmDescriptor
81132b48 g     F .text	000001e8 OSTmrStop
8110cef0 g     F .text	00000050 usiGetIdCMD
8111ff90 g     F .text	00000108 strtof
8113c650 g     F .text	00000014 atexit
81104584 g     F .text	00000040 vFeebCh3HandleIrq
811255a0 g     F .text	000000bc .hidden __gesf2
8111392c g     F .text	0000004c strcspn
81119b74 g     F .text	00000068 _write_r
8110728c g     F .text	00000074 vRstcReleaseDeviceReset
8110ee10 g     F .text	0000004c vFailInAckHandlerTaskCreate
8112a0e8 g     F .text	00000094 OSSchedLock
8111cba4 g     F .text	00000018 setlocale
8113a854 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8114d764 g     O .bss	00000800 OSTmrTaskStk
81113688 g     F .text	00000044 scanf
8112bcf0 g     F .text	00000110 OSFlagCreate
81134024 g     F .text	00000688 Check_for_DOS_FAT
81135ed0 g     F .text	000002d0 create_file
8111e828 g     F .text	00000008 nanf
81142568 g     O .rwdata	00000004 _impure_ptr
811427ac g     O .bss	00000004 CSD_register_w0
8114270c g     O .bss	00000004 alt_argc
8110e8e4 g     F .text	00000068 vFailGetCountSemaphorexBuffer128
8111b62c g     F .text	00000224 __sflush_r
8111cc30 g     F .text	000000b4 _mbrtowc_r
8113b814 g     F .text	00000068 _do_dtors
8111cb90 g     F .text	00000008 __locale_cjk_lang
811033b0 g     F .text	0000078c sense_log
81142640 g     O .bss	00000004 ESdmaBufferSide
811425c6 g     O .rwdata	00000002 OSEventMultiEn
81111eb0 g     F .text	00000004 _fseek_r
8114a96c g     O .bss	00001000 vParserCommTask_stk
8110e174 g     F .text	00000070 printErrorTask
8110fdb4 g     F .text	00000030 vChangeDefaultEPValue
8110b6a8 g     F .text	000002c8 vCheckRetransmission32
81132318 g     F .text	000001c4 OSTmrCreate
8110ac54 g     F .text	00000354 vStackMonitor
81113450 g     F .text	000001dc __srefill_r
81105814 g     F .text	0000003c bEnableLvdsBoard
811426b0 g     O .bss	00000004 xMutexBuffer32
8112be00 g     F .text	00000250 OSFlagDel
81142778 g     O .bss	00000004 OSEventFreeList
8110588c g     F .text	000000c0 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8111cdc4 g     F .text	0000004c __ascii_mbtowc
81107dc8 g     F .text	00000078 bSyncCtrExtnIrq
8111dc18 g     F .text	00000064 __ulp
8112c2d4 g     F .text	000005c0 OSFlagPend
81142612 g     O .rwdata	00000002 OSTmrEn
8111bc84 g     F .text	00000018 __fp_unlock_all
81111e4c g     F .text	00000064 fputc
8110c750 g     F .text	000002f8 bSendUART32v2
8110a5a8 g     F .text	0000019c setPreAckReceiverFreePos
81107d88 g     F .text	00000040 bSyncErrInj
81142580 g     O .rwdata	00000008 alt_fs_list
8113486c g     F .text	00000274 check_file_name_for_FAT16_compliance
8113261c g     F .text	00000140 OSTmrNameGet
81142998 g     O .bss	00000400 xSZData
8112b218 g     F .text	0000007c OS_StrCopy
811427b8 g     O .bss	00000004 buffer_memory
8110eaec g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
8110fb0c g     F .text	00000098 vLogWriteNUC
811425dc g     O .rwdata	00000002 OSMemNameSize
81103b3c g     F .text	000000b0 bSdmaInitM1Dma
81108418 g     F .text	00000074 bSyncIrqEnableBlank
8113c530 g     F .text	00000028 OSInitHookEnd
8110f54c g     F .text	00000348 vUpdateMemMapFEE
8110ed5c g     F .text	00000068 vFailSetPreAckReceiverBuffer
81104b8c g     F .text	00000058 bFeebCh8IrqFlagBufferEmpty
81142608 g     O .rwdata	00000002 OSTCBPrioTblMax
8111cbbc g     F .text	0000000c localeconv
811426b4 g     O .bss	00000004 xTimerRetransmission
8110a0a0 g     F .text	00000250 vReceiverUartTask
81142708 g     O .bss	00000004 alt_log_sys_clk_count
81142604 g     O .rwdata	00000002 OSTaskStatStkChkEn
811285ac g     F .text	00000140 alt_log_write
811426b8 g     O .bss	00000004 xMutexBuffer128
81104504 g     F .text	00000040 vFeebCh1HandleIrq
81104684 g     F .text	00000040 vFeebCh7HandleIrq
8113bb08 g     F .text	00000058 alt_ic_isr_register
811425d8 g     O .rwdata	00000002 OSMemEn
81142554 g     O .rwdata	00000004 alt_stack_limit_value
81112470 g     F .text	0000003c fwrite
811427bc g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
811425e2 g     O .rwdata	00000002 OSMutexEn
81142630 g       *ABS*	00000000 _edata
811388b8 g     F .text	00000068 altera_avalon_uart_read_fd
81110044 g     F .text	00000034 vLoadDefaultIdNFEEMaster
811508f8 g       *ABS*	00000000 _end
811502f8 g     O .bss	00000500 active_files
8114277c g     O .bss	00000001 OSIntNesting
8110e67c g     F .text	0000004c vFailInitialization
811014d0 g     F .text	000000c0 bDdr2SwitchMemory
8110f970 g     F .text	0000002c cFeeRMAPDump
811426bc g     O .bss	00000004 xSemCountBuffer32
811237b4 g     F .text	0000016c __fputwc
8110f8c0 g     F .text	0000002c vFeeSpwRMAPChangeConfig
81119934 g     F .text	00000070 vfscanf
811361a0 g     F .text	00000150 copy_file_record_name_to_string
81138128 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
81132070 g     F .text	000001dc OSTimeDlyResume
811346ac g     F .text	000000f4 Look_for_FAT16
8112c180 g     F .text	00000154 OSFlagNameSet
811426c0 g     O .bss	00000004 xMutexBuffer64
811318a8 g     F .text	000001c8 OSTaskStkChk
8113bbf0 g     F .text	00000094 alt_ic_irq_disable
81103c9c g     F .text	00000430 bSdmaDmaM1Transfer
811425de g     O .rwdata	00000002 OSMemSize
8110e7ac g     F .text	00000068 vFailSetCountSemaphorexBuffer32
8111383c g     F .text	00000084 __swrite
81142570 g     O .rwdata	00000004 __malloc_trim_threshold
8111cb84 g     F .text	0000000c __locale_msgcharset
81142780 g     O .bss	00000004 OSTCBCur
8110f12c g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81106cf4 g     F .text	00000044 iMsgdmaExtendedDescriptorSyncTransfer
8113c664 g     F .text	00000040 exit
8112e50c g     F .text	00000220 OSMutexPost
81108574 g     F .text	00000058 bSyncIrqFlagError
811365cc g     F .text	000003c0 alt_up_sd_card_find_next
811425e0 g     O .rwdata	00000002 OSMemTblSize
8111c98c g     F .text	000000cc _fwalk_reent
8113ac4c g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8111113c g     F .text	000000f8 .hidden __floatunsisf
8111da14 g     F .text	00000204 __mdiff
81104be4 g     F .text	00000180 vFeebInitIrq
8110e714 g     F .text	0000004c vFailSenderCreate
811253f8 g     F .text	00000074 .hidden __modsi3
81107cd4 g     F .text	0000003c uliSyncGetPer
811426c4 g     O .bss	00000004 xMutexSenderACK
8110ef8c g     F .text	00000068 vFailGetBlockingSemTimeoutTask
81142560 g     O .rwdata	00000004 __ctype_ptr__
8110ecf4 g     F .text	00000068 vFailSetPreParsedBuffer
811336dc g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
8111bc60 g     F .text	00000004 __sfp_lock_release
81104e38 g     F .text	000000ac bFeebGetIrqControl
8110f264 g     F .text	00000068 vCouldNotSendTurnOff
81129f30 g     F .text	00000064 OSInit
811061c4 g     F .text	00000078 bSetPainelLeds
8113a394 g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
81142784 g     O .bss	00000004 OSTmrTime
81101b10 g     F .text	00000510 bDdr2MemoryReadTest
81131c5c g     F .text	0000012c OSTaskQuery
811083a4 g     F .text	00000074 bSyncIrqEnableError
8112fae4 g     F .text	000000b0 OS_QInit
8111e758 g     F .text	000000d0 __sccl
81111c78 g     F .text	0000000c atoi
81108750 g     F .text	00000030 vFeeTask
8112b294 g     F .text	0000005c OS_StrLen
8110497c g     F .text	00000058 bFeebCh2IrqFlagBufferEmpty
8112d528 g     F .text	0000011c OSMemNameSet
8113fb30 g     O .rodata	00000101 _ctype_
81107c98 g     F .text	0000003c uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110e87c g     F .text	00000068 vFailSetCountSemaphorexBuffer128
811425fa g     O .rwdata	00000002 OSTaskProfileEn
8113a264 g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
811426c8 g     O .bss	00000004 xTxUARTMutex
81142788 g     O .bss	00000004 OSTime
81142578 g     O .rwdata	00000004 __mbtowc
81138ed8 g     F .text	0000005c altera_avalon_uart_close
8114278c g     O .bss	00000004 OSTmrSem
8114df64 g     O .bss	00000800 OSTaskIdleStk
81111c90 g     F .text	000000fc _fopen_r
81142680 g     O .bss	00000004 pdata
8113cab4 g     F .text	000000bc _exit
8113b588 g     F .text	00000134 alt_alarm_start
8112c050 g     F .text	00000130 OSFlagNameGet
8113224c g     F .text	00000064 OSTimeGet
81142644 g     O .bss	00000004 ESdmaChBufferId
81136e30 g     F .text	00000380 alt_up_sd_card_read
811124ac g     F .text	000001c4 __smakebuf_r
811426cc g     O .bss	00000001 SemCount64
8110c458 g     F .text	000002f8 bSendUART64v2
81104a2c g     F .text	00000058 bFeebCh4IrqFlagBufferEmpty
81142628 g     O .rwdata	00000008 alt_msgdma_list
81113978 g     F .text	00000098 strlen
81107530 g     F .text	000000b4 uc_spi_get_byte
8113c460 g     F .text	00000028 OSTaskSwHook
81128b2c g     F .text	0000015c open
8114e764 g     O .bss	00000c30 OSEventTbl
8110f8ec g     F .text	0000002c vFeeSpwRMAPChangeDefault
81126950 g     F .text	000000dc .hidden __gedf2
8114b96c g     O .bss	00000020 xSenderACK
8113c154 g     F .text	00000044 alt_putchar
8114f394 g     O .bss	00000e58 OSTCBTbl
81123acc g     F .text	00000838 __gethex
8113052c g     F .text	00000108 OSSemSet
8110afa8 g     F .text	0000006c vTimeoutCheckerTaskv2
8110f99c g     F .text	00000038 cFeeRMAPEchoingEnable
8114257c g     O .rwdata	00000004 __wctomb
8110bc60 g     F .text	00000294 vVariablesInitialization
81122080 g     F .text	00000018 __sprint_r
81104ee4 g     F .text	00000088 bFeebGetIrqFlags
8114263c g     O .bss	00000004 pxDmaM2Dev
8110e244 g     F .text	0000004c vFailCreateSemaphoreResources
81142598 g     O .rwdata	00000004 alt_priority_mask
81105850 g     F .text	0000003c bDisableLvdsBoard
8112fd2c g     F .text	00000248 OSSemDel
81142790 g     O .bss	00000004 OSFlagFreeList
8110746c g     F .text	000000c4 v_spi_send_byte
811077a0 g     F .text	000000d0 bSSDisplayConfig
8113bb60 g     F .text	00000090 alt_ic_irq_enable
811425c0 g     O .rwdata	00000002 OSEventNameSize
81118090 g     F .text	0000001c __vfprintf_internal
81142794 g     O .bss	00000001 OSStatRdy
81108078 g     F .text	00000074 bSyncCtrCh2OutEnable
811501ec g     O .bss	000000a4 OSTCBPrioTbl
81138f78 g     F .text	00000270 altera_avalon_uart_read
811247d4 g     F .text	00000064 _wctomb_r
81129378 g     F .text	000000cc __env_lock
81142606 g     O .rwdata	00000002 OSTaskSwHookEn
8110478c g     F .text	00000044 vFeebCh3IrqFlagClrBufferEmpty
81126b20 g     F .text	00000904 .hidden __subdf3
8114b98c g     O .bss	00000260 xPreParsed
81107d10 g     F .text	0000003c uliSyncGetOst
811426cd g     O .bss	00000001 SemCount128
81104858 g     F .text	00000044 vFeebCh6IrqFlagClrBufferEmpty
8110ca48 g     F .text	00000290 vSendEthConf
8111d428 g     F .text	000000b0 __lo0bits
81118170 g     F .text	000017c4 __svfscanf_r
811425a4 g     O .rwdata	00000008 alt_alarm_list
81121dc8 g     F .text	0000019c _ungetc_r
811425ce g     O .rwdata	00000002 OSFlagWidth
8113b7ac g     F .text	00000068 _do_ctors
81102a5c g     F .text	0000004c DMA_BUSY
811246dc g     F .text	000000c8 wcrtomb
8110c070 g     F .text	00000068 vCCDLoadDefaultValues
811277ac g     F .text	000000d8 close
81107d4c g     F .text	0000003c uliSyncGetGeneral
81142724 g     O .bss	00000004 alt_envsem
81127cdc g     F .text	00000068 alt_log_repchar
81142798 g     O .bss	00000004 OSIdleCtrRun
8112a5b8 g     F .text	00000028 OSVersion
81142618 g     O .rwdata	00000002 OSTmrCfgWheelSize
81131d88 g     F .text	00000078 OS_TaskStkClr
81110284 g     F .text	0000003c siOpenFile
811425f2 g     O .rwdata	00000002 OSTaskCreateEn
8110ccd8 g     F .text	00000118 vSendTurnOff
8110e344 g     F .text	0000004c vFailSendPreParsedSemaphore
81134ba0 g     F .text	000002a4 match_file_record_to_name_ext
8112abe0 g     F .text	00000070 OS_EventWaitListInit
81123944 g     F .text	00000088 fputwc
8110e2dc g     F .text	00000068 vFailSendxSemCommInit
8113c558 g     F .text	00000028 OSTaskIdleHook
8111bc64 g     F .text	00000004 __sinit_lock_acquire
8111d18c g     F .text	00000128 __multadd
8110489c g     F .text	00000044 vFeebCh7IrqFlagClrBufferEmpty
8110799c g     F .text	0000004c ucSyncStatusState
81131a70 g     F .text	000001ec OSTaskSuspend
8111d164 g     F .text	00000028 _Bfree
81107c5c g     F .text	0000003c uliSyncGetMbt
8112b2f0 g     F .text	00000064 OS_TaskIdle
8114261e g     O .rwdata	00000002 OSTmrTblSize
8112f980 g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK
        /* Ensure stack didn't just overflow. */
        bltu  sp, et, .Lstack_overflow
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100028:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
8110002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
81100030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
8110003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
81100040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100044:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100048:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
8110004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
81100050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
8110005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
81100060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
8110006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
81100070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
8110007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100088:	11001040 	call	81100104 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
81100090:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100094:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100098:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a4:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a8:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000fc:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110011c:	1129f940 	call	81129f94 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110014c:	00a04574 	movhi	r2,33045
81100150:	1081fe04 	addi	r2,r2,2040
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a04574 	movhi	r2,33045
81100168:	1081fe04 	addi	r2,r2,2040
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
      }
      mask <<= 1;
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>

    active = alt_irq_pending ();
811001b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001c4:	1129fe80 	call	81129fe8 <OSIntExit>
}
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8110021c:	d0a0a017 	ldw	r2,-32128(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
81100224:	d0a0a017 	ldw	r2,-32128(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
81100244:	0005883a 	mov	r2,zero
}
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:
    .int 2, 1, 0b, 1b
    .popsection
#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)
8110025c:	01204534 	movhi	r4,33044
81100260:	21096704 	addi	r4,r4,9628
81100264:	21400037 	ldwio	r5,0(r4)
81100268:	01400326 	beq	zero,r5,81100278 <_start+0x1c>
8110026c:	01204534 	movhi	r4,33044
81100270:	2104be04 	addi	r4,r4,4856
81100274:	1127c540 	call	81127c54 <tx_log_str>

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)
81100278:	01204534 	movhi	r4,33044
8110027c:	21096704 	addi	r4,r4,9628
81100280:	21400037 	ldwio	r5,0(r4)
81100284:	01400326 	beq	zero,r5,81100294 <_start+0x38>
81100288:	01204534 	movhi	r4,33044
8110028c:	2104b104 	addi	r4,r4,4804
81100290:	1127c540 	call	81127c54 <tx_log_str>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100294:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100298:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110029c:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
811002a0:	d6a95514 	ori	gp,gp,42324
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)
811002a4:	01204534 	movhi	r4,33044
811002a8:	21096704 	addi	r4,r4,9628
811002ac:	21400037 	ldwio	r5,0(r4)
811002b0:	01400326 	beq	zero,r5,811002c0 <_start+0x64>
811002b4:	01204534 	movhi	r4,33044
811002b8:	2104a204 	addi	r4,r4,4744
811002bc:	1127c540 	call	81127c54 <tx_log_str>

    movhi r2, %hi(__bss_start)
811002c0:	00a04534 	movhi	r2,33044
    ori r2, r2, %lo(__bss_start)
811002c4:	10898c14 	ori	r2,r2,9776

    movhi r3, %hi(__bss_end)
811002c8:	00e04574 	movhi	r3,33045
    ori r3, r3, %lo(__bss_end)
811002cc:	18c23e14 	ori	r3,r3,2296

    beq r2, r3, 1f
811002d0:	10c00326 	beq	r2,r3,811002e0 <_start+0x84>

0:
    stw zero, (r2)
811002d4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
811002d8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
811002dc:	10fffd36 	bltu	r2,r3,811002d4 <__reset+0xfb0e02d4>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
811002e0:	d6200017 	ldw	et,-32768(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)
811002e4:	01204534 	movhi	r4,33044
811002e8:	21096704 	addi	r4,r4,9628
811002ec:	21400037 	ldwio	r5,0(r4)
811002f0:	01400326 	beq	zero,r5,81100300 <_start+0xa4>
811002f4:	01204534 	movhi	r4,33044
811002f8:	2104a904 	addi	r4,r4,4772
811002fc:	1127c540 	call	81127c54 <tx_log_str>

    /* Call the C entry point. It should never return. */
    call alt_main
81100300:	11288800 	call	81128880 <alt_main>

81100304 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100304:	003fff06 	br	81100304 <__reset+0xfb0e0304>

81100308 <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
81100308:	defff604 	addi	sp,sp,-40
8110030c:	de00012e 	bgeu	sp,et,81100314 <bDdr2EepromTest+0xc>
81100310:	003b68fa 	trap	3
81100314:	dfc00915 	stw	ra,36(sp)
81100318:	df000815 	stw	fp,32(sp)
8110031c:	df000804 	addi	fp,sp,32
81100320:	2005883a 	mov	r2,r4
81100324:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
81100328:	00e04534 	movhi	r3,33044
8110032c:	18ca2604 	addi	r3,r3,10392
81100330:	00a04534 	movhi	r2,33044
81100334:	10b2dc04 	addi	r2,r2,-13456
81100338:	1009883a 	mov	r4,r2
8110033c:	00800884 	movi	r2,34
81100340:	100d883a 	mov	r6,r2
81100344:	200b883a 	mov	r5,r4
81100348:	1809883a 	mov	r4,r3
8110034c:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
81100350:	d0a04f17 	ldw	r2,-32452(gp)
81100354:	01604534 	movhi	r5,33044
81100358:	294a2604 	addi	r5,r5,10392
8110035c:	1009883a 	mov	r4,r2
81100360:	1111dd40 	call	81111dd4 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100364:	00bfe804 	movi	r2,-96
81100368:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
8110036c:	00800044 	movi	r2,1
81100370:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
81100374:	e0bfff03 	ldbu	r2,-4(fp)
81100378:	10c00060 	cmpeqi	r3,r2,1
8110037c:	1800031e 	bne	r3,zero,8110038c <bDdr2EepromTest+0x84>
81100380:	108000a0 	cmpeqi	r2,r2,2
81100384:	1000081e 	bne	r2,zero,811003a8 <bDdr2EepromTest+0xa0>
81100388:	00000e06 	br	811003c4 <bDdr2EepromTest+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110038c:	00a00034 	movhi	r2,32768
81100390:	10827c04 	addi	r2,r2,2544
81100394:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100398:	00a00034 	movhi	r2,32768
8110039c:	10828004 	addi	r2,r2,2560
811003a0:	e0bffb15 	stw	r2,-20(fp)
		break;
811003a4:	00001906 	br	8110040c <bDdr2EepromTest+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811003a8:	00a00034 	movhi	r2,32768
811003ac:	10825804 	addi	r2,r2,2400
811003b0:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
811003b4:	00a00034 	movhi	r2,32768
811003b8:	10825c04 	addi	r2,r2,2416
811003bc:	e0bffb15 	stw	r2,-20(fp)
		break;
811003c0:	00001206 	br	8110040c <bDdr2EepromTest+0x104>
	default:
		bSuccess = FALSE;
811003c4:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811003c8:	00e04534 	movhi	r3,33044
811003cc:	18ca2604 	addi	r3,r3,10392
811003d0:	00a04534 	movhi	r2,33044
811003d4:	10b2e504 	addi	r2,r2,-13420
811003d8:	1009883a 	mov	r4,r2
811003dc:	00800bc4 	movi	r2,47
811003e0:	100d883a 	mov	r6,r2
811003e4:	200b883a 	mov	r5,r4
811003e8:	1809883a 	mov	r4,r3
811003ec:	1112e840 	call	81112e84 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811003f0:	d0a04f17 	ldw	r2,-32452(gp)
811003f4:	01604534 	movhi	r5,33044
811003f8:	294a2604 	addi	r5,r5,10392
811003fc:	1009883a 	mov	r4,r2
81100400:	1111dd40 	call	81111dd4 <fprintf>
		;
#endif
		return bSuccess;
81100404:	e0bff917 	ldw	r2,-28(fp)
81100408:	0000ff06 	br	81100808 <bDdr2EepromTest+0x500>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
8110040c:	00e04534 	movhi	r3,33044
81100410:	18ca2604 	addi	r3,r3,10392
81100414:	00a04534 	movhi	r2,33044
81100418:	10b2f104 	addi	r2,r2,-13372
8110041c:	1009883a 	mov	r4,r2
81100420:	008005c4 	movi	r2,23
81100424:	100d883a 	mov	r6,r2
81100428:	200b883a 	mov	r5,r4
8110042c:	1809883a 	mov	r4,r3
81100430:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
81100434:	d0a04f17 	ldw	r2,-32452(gp)
81100438:	01604534 	movhi	r5,33044
8110043c:	294a2604 	addi	r5,r5,10392
81100440:	1009883a 	mov	r4,r2
81100444:	1111dd40 	call	81111dd4 <fprintf>
#endif
	usleep(20 * 1000);
81100448:	01138804 	movi	r4,20000
8110044c:	11290ec0 	call	811290ec <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100450:	e03ffc15 	stw	zero,-16(fp)
81100454:	00003306 	br	81100524 <bDdr2EepromTest+0x21c>
		ucControlAddr = iI;
81100458:	e0bffc17 	ldw	r2,-16(fp)
8110045c:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100460:	e0bffd03 	ldbu	r2,-12(fp)
81100464:	10c03fcc 	andi	r3,r2,255
81100468:	18c0201c 	xori	r3,r3,128
8110046c:	18ffe004 	addi	r3,r3,-128
81100470:	e13ffd43 	ldbu	r4,-11(fp)
81100474:	e0bffe04 	addi	r2,fp,-8
81100478:	d8800015 	stw	r2,0(sp)
8110047c:	200f883a 	mov	r7,r4
81100480:	180d883a 	mov	r6,r3
81100484:	e17ffb17 	ldw	r5,-20(fp)
81100488:	e13ffa17 	ldw	r4,-24(fp)
8110048c:	1105b300 	call	81105b30 <I2C_Read>
81100490:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100494:	e0bff917 	ldw	r2,-28(fp)
81100498:	10001026 	beq	r2,zero,811004dc <bDdr2EepromTest+0x1d4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
8110049c:	e0bffd43 	ldbu	r2,-11(fp)
811004a0:	e0fffe03 	ldbu	r3,-8(fp)
811004a4:	18c03fcc 	andi	r3,r3,255
811004a8:	180f883a 	mov	r7,r3
811004ac:	100d883a 	mov	r6,r2
811004b0:	01604534 	movhi	r5,33044
811004b4:	2972f704 	addi	r5,r5,-13348
811004b8:	01204534 	movhi	r4,33044
811004bc:	210a2604 	addi	r4,r4,10392
811004c0:	11137640 	call	81113764 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
811004c4:	d0a04f17 	ldw	r2,-32452(gp)
811004c8:	01604534 	movhi	r5,33044
811004cc:	294a2604 	addi	r5,r5,10392
811004d0:	1009883a 	mov	r4,r2
811004d4:	1111dd40 	call	81111dd4 <fprintf>
811004d8:	00000f06 	br	81100518 <bDdr2EepromTest+0x210>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
811004dc:	00e04534 	movhi	r3,33044
811004e0:	18ca2604 	addi	r3,r3,10392
811004e4:	00a04534 	movhi	r2,33044
811004e8:	10b2fc04 	addi	r2,r2,-13328
811004ec:	1009883a 	mov	r4,r2
811004f0:	008005c4 	movi	r2,23
811004f4:	100d883a 	mov	r6,r2
811004f8:	200b883a 	mov	r5,r4
811004fc:	1809883a 	mov	r4,r3
81100500:	1112e840 	call	81112e84 <memcpy>
			debug(fp, cDebugBuffer);
81100504:	d0a04f17 	ldw	r2,-32452(gp)
81100508:	01604534 	movhi	r5,33044
8110050c:	294a2604 	addi	r5,r5,10392
81100510:	1009883a 	mov	r4,r2
81100514:	1111dd40 	call	81111dd4 <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
81100518:	e0bffc17 	ldw	r2,-16(fp)
8110051c:	10800044 	addi	r2,r2,1
81100520:	e0bffc15 	stw	r2,-16(fp)
81100524:	e0bffc17 	ldw	r2,-16(fp)
81100528:	10804008 	cmpgei	r2,r2,256
8110052c:	1000021e 	bne	r2,zero,81100538 <bDdr2EepromTest+0x230>
81100530:	e0bff917 	ldw	r2,-28(fp)
81100534:	103fc81e 	bne	r2,zero,81100458 <__reset+0xfb0e0458>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
81100538:	e0bff917 	ldw	r2,-28(fp)
8110053c:	10001026 	beq	r2,zero,81100580 <bDdr2EepromTest+0x278>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
81100540:	00e04534 	movhi	r3,33044
81100544:	18ca2604 	addi	r3,r3,10392
81100548:	00a04534 	movhi	r2,33044
8110054c:	10b30204 	addi	r2,r2,-13304
81100550:	1009883a 	mov	r4,r2
81100554:	00800884 	movi	r2,34
81100558:	100d883a 	mov	r6,r2
8110055c:	200b883a 	mov	r5,r4
81100560:	1809883a 	mov	r4,r3
81100564:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
81100568:	d0a04f17 	ldw	r2,-32452(gp)
8110056c:	01604534 	movhi	r5,33044
81100570:	294a2604 	addi	r5,r5,10392
81100574:	1009883a 	mov	r4,r2
81100578:	1111dd40 	call	81111dd4 <fprintf>
8110057c:	00000f06 	br	811005bc <bDdr2EepromTest+0x2b4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
81100580:	00e04534 	movhi	r3,33044
81100584:	18ca2604 	addi	r3,r3,10392
81100588:	00a04534 	movhi	r2,33044
8110058c:	10b30b04 	addi	r2,r2,-13268
81100590:	1009883a 	mov	r4,r2
81100594:	008007c4 	movi	r2,31
81100598:	100d883a 	mov	r6,r2
8110059c:	200b883a 	mov	r5,r4
811005a0:	1809883a 	mov	r4,r3
811005a4:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
811005a8:	d0a04f17 	ldw	r2,-32452(gp)
811005ac:	01604534 	movhi	r5,33044
811005b0:	294a2604 	addi	r5,r5,10392
811005b4:	1009883a 	mov	r4,r2
811005b8:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
811005bc:	00e04534 	movhi	r3,33044
811005c0:	18ca2604 	addi	r3,r3,10392
811005c4:	00a04534 	movhi	r2,33044
811005c8:	10b31304 	addi	r2,r2,-13236
811005cc:	1009883a 	mov	r4,r2
811005d0:	00800604 	movi	r2,24
811005d4:	100d883a 	mov	r6,r2
811005d8:	200b883a 	mov	r5,r4
811005dc:	1809883a 	mov	r4,r3
811005e0:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
811005e4:	d0a04f17 	ldw	r2,-32452(gp)
811005e8:	01604534 	movhi	r5,33044
811005ec:	294a2604 	addi	r5,r5,10392
811005f0:	1009883a 	mov	r4,r2
811005f4:	1111dd40 	call	81111dd4 <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
811005f8:	00800484 	movi	r2,18
811005fc:	e0bffd85 	stb	r2,-10(fp)
81100600:	00bfe004 	movi	r2,-128
81100604:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100608:	01138804 	movi	r4,20000
8110060c:	11290ec0 	call	811290ec <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100610:	e0bffd03 	ldbu	r2,-12(fp)
81100614:	10c03fcc 	andi	r3,r2,255
81100618:	18c0201c 	xori	r3,r3,128
8110061c:	18ffe004 	addi	r3,r3,-128
81100620:	e13ffdc3 	ldbu	r4,-9(fp)
81100624:	e0bffd83 	ldbu	r2,-10(fp)
81100628:	d8800015 	stw	r2,0(sp)
8110062c:	200f883a 	mov	r7,r4
81100630:	180d883a 	mov	r6,r3
81100634:	e17ffb17 	ldw	r5,-20(fp)
81100638:	e13ffa17 	ldw	r4,-24(fp)
8110063c:	1105a500 	call	81105a50 <I2C_Write>
81100640:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
81100644:	e0bff917 	ldw	r2,-28(fp)
81100648:	1000101e 	bne	r2,zero,8110068c <bDdr2EepromTest+0x384>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
8110064c:	00e04534 	movhi	r3,33044
81100650:	18ca2604 	addi	r3,r3,10392
81100654:	00a04534 	movhi	r2,33044
81100658:	10b31904 	addi	r2,r2,-13212
8110065c:	1009883a 	mov	r4,r2
81100660:	00800604 	movi	r2,24
81100664:	100d883a 	mov	r6,r2
81100668:	200b883a 	mov	r5,r4
8110066c:	1809883a 	mov	r4,r3
81100670:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
81100674:	d0a04f17 	ldw	r2,-32452(gp)
81100678:	01604534 	movhi	r5,33044
8110067c:	294a2604 	addi	r5,r5,10392
81100680:	1009883a 	mov	r4,r2
81100684:	1111dd40 	call	81111dd4 <fprintf>
81100688:	00003306 	br	81100758 <bDdr2EepromTest+0x450>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110068c:	e0bffd03 	ldbu	r2,-12(fp)
81100690:	10c03fcc 	andi	r3,r2,255
81100694:	18c0201c 	xori	r3,r3,128
81100698:	18ffe004 	addi	r3,r3,-128
8110069c:	e13ffdc3 	ldbu	r4,-9(fp)
811006a0:	e0bffe44 	addi	r2,fp,-7
811006a4:	d8800015 	stw	r2,0(sp)
811006a8:	200f883a 	mov	r7,r4
811006ac:	180d883a 	mov	r6,r3
811006b0:	e17ffb17 	ldw	r5,-20(fp)
811006b4:	e13ffa17 	ldw	r4,-24(fp)
811006b8:	1105b300 	call	81105b30 <I2C_Read>
811006bc:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
811006c0:	e0bff917 	ldw	r2,-28(fp)
811006c4:	1000101e 	bne	r2,zero,81100708 <bDdr2EepromTest+0x400>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
811006c8:	00e04534 	movhi	r3,33044
811006cc:	18ca2604 	addi	r3,r3,10392
811006d0:	00a04534 	movhi	r2,33044
811006d4:	10b31f04 	addi	r2,r2,-13188
811006d8:	1009883a 	mov	r4,r2
811006dc:	00800884 	movi	r2,34
811006e0:	100d883a 	mov	r6,r2
811006e4:	200b883a 	mov	r5,r4
811006e8:	1809883a 	mov	r4,r3
811006ec:	1112e840 	call	81112e84 <memcpy>
			debug(fp, cDebugBuffer);
811006f0:	d0a04f17 	ldw	r2,-32452(gp)
811006f4:	01604534 	movhi	r5,33044
811006f8:	294a2604 	addi	r5,r5,10392
811006fc:	1009883a 	mov	r4,r2
81100700:	1111dd40 	call	81111dd4 <fprintf>
81100704:	00001406 	br	81100758 <bDdr2EepromTest+0x450>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100708:	e0bffe43 	ldbu	r2,-7(fp)
8110070c:	10c03fcc 	andi	r3,r2,255
81100710:	e0bffd83 	ldbu	r2,-10(fp)
81100714:	18801026 	beq	r3,r2,81100758 <bDdr2EepromTest+0x450>
				bSuccess = FALSE;
81100718:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110071c:	e0bffe43 	ldbu	r2,-7(fp)
81100720:	10803fcc 	andi	r2,r2,255
81100724:	e0fffd83 	ldbu	r3,-10(fp)
81100728:	180f883a 	mov	r7,r3
8110072c:	100d883a 	mov	r6,r2
81100730:	01604534 	movhi	r5,33044
81100734:	29732804 	addi	r5,r5,-13152
81100738:	01204534 	movhi	r4,33044
8110073c:	210a2604 	addi	r4,r4,10392
81100740:	11137640 	call	81113764 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
81100744:	d0a04f17 	ldw	r2,-32452(gp)
81100748:	01604534 	movhi	r5,33044
8110074c:	294a2604 	addi	r5,r5,10392
81100750:	1009883a 	mov	r4,r2
81100754:	1111dd40 	call	81111dd4 <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
81100758:	e0bff917 	ldw	r2,-28(fp)
8110075c:	10001026 	beq	r2,zero,811007a0 <bDdr2EepromTest+0x498>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
81100760:	00e04534 	movhi	r3,33044
81100764:	18ca2604 	addi	r3,r3,10392
81100768:	00a04534 	movhi	r2,33044
8110076c:	10b33704 	addi	r2,r2,-13092
81100770:	1009883a 	mov	r4,r2
81100774:	008008c4 	movi	r2,35
81100778:	100d883a 	mov	r6,r2
8110077c:	200b883a 	mov	r5,r4
81100780:	1809883a 	mov	r4,r3
81100784:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
81100788:	d0a04f17 	ldw	r2,-32452(gp)
8110078c:	01604534 	movhi	r5,33044
81100790:	294a2604 	addi	r5,r5,10392
81100794:	1009883a 	mov	r4,r2
81100798:	1111dd40 	call	81111dd4 <fprintf>
8110079c:	00000f06 	br	811007dc <bDdr2EepromTest+0x4d4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
811007a0:	00e04534 	movhi	r3,33044
811007a4:	18ca2604 	addi	r3,r3,10392
811007a8:	00a04534 	movhi	r2,33044
811007ac:	10b34004 	addi	r2,r2,-13056
811007b0:	1009883a 	mov	r4,r2
811007b4:	00800804 	movi	r2,32
811007b8:	100d883a 	mov	r6,r2
811007bc:	200b883a 	mov	r5,r4
811007c0:	1809883a 	mov	r4,r3
811007c4:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
811007c8:	d0a04f17 	ldw	r2,-32452(gp)
811007cc:	01604534 	movhi	r5,33044
811007d0:	294a2604 	addi	r5,r5,10392
811007d4:	1009883a 	mov	r4,r2
811007d8:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811007dc:	00a04534 	movhi	r2,33044
811007e0:	108a2604 	addi	r2,r2,10392
811007e4:	00c00284 	movi	r3,10
811007e8:	10c00005 	stb	r3,0(r2)
811007ec:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811007f0:	d0a04f17 	ldw	r2,-32452(gp)
811007f4:	01604534 	movhi	r5,33044
811007f8:	294a2604 	addi	r5,r5,10392
811007fc:	1009883a 	mov	r4,r2
81100800:	1111dd40 	call	81111dd4 <fprintf>
#endif

	return bSuccess;
81100804:	e0bff917 	ldw	r2,-28(fp)
}
81100808:	e037883a 	mov	sp,fp
8110080c:	dfc00117 	ldw	ra,4(sp)
81100810:	df000017 	ldw	fp,0(sp)
81100814:	dec00204 	addi	sp,sp,8
81100818:	f800283a 	ret

8110081c <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
8110081c:	deffb704 	addi	sp,sp,-292
81100820:	de00012e 	bgeu	sp,et,81100828 <bDdr2EepromDump+0xc>
81100824:	003b68fa 	trap	3
81100828:	dfc04815 	stw	ra,288(sp)
8110082c:	df004715 	stw	fp,284(sp)
81100830:	df004704 	addi	fp,sp,284
81100834:	2005883a 	mov	r2,r4
81100838:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
8110083c:	00e04534 	movhi	r3,33044
81100840:	18ca2604 	addi	r3,r3,10392
81100844:	00a04534 	movhi	r2,33044
81100848:	10b34804 	addi	r2,r2,-13024
8110084c:	1009883a 	mov	r4,r2
81100850:	00800884 	movi	r2,34
81100854:	100d883a 	mov	r6,r2
81100858:	200b883a 	mov	r5,r4
8110085c:	1809883a 	mov	r4,r3
81100860:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
81100864:	d0a04f17 	ldw	r2,-32452(gp)
81100868:	01604534 	movhi	r5,33044
8110086c:	294a2604 	addi	r5,r5,10392
81100870:	1009883a 	mov	r4,r2
81100874:	1111dd40 	call	81111dd4 <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100878:	00bfe804 	movi	r2,-96
8110087c:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
81100880:	00800044 	movi	r2,1
81100884:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
81100888:	e0bfff03 	ldbu	r2,-4(fp)
8110088c:	10c00060 	cmpeqi	r3,r2,1
81100890:	1800031e 	bne	r3,zero,811008a0 <bDdr2EepromDump+0x84>
81100894:	108000a0 	cmpeqi	r2,r2,2
81100898:	1000081e 	bne	r2,zero,811008bc <bDdr2EepromDump+0xa0>
8110089c:	00000e06 	br	811008d8 <bDdr2EepromDump+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811008a0:	00a00034 	movhi	r2,32768
811008a4:	10827c04 	addi	r2,r2,2544
811008a8:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811008ac:	00a00034 	movhi	r2,32768
811008b0:	10828004 	addi	r2,r2,2560
811008b4:	e0bfbb15 	stw	r2,-276(fp)
		break;
811008b8:	00001906 	br	81100920 <bDdr2EepromDump+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811008bc:	00a00034 	movhi	r2,32768
811008c0:	10825804 	addi	r2,r2,2400
811008c4:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
811008c8:	00a00034 	movhi	r2,32768
811008cc:	10825c04 	addi	r2,r2,2416
811008d0:	e0bfbb15 	stw	r2,-276(fp)
		break;
811008d4:	00001206 	br	81100920 <bDdr2EepromDump+0x104>
	default:
		bSuccess = FALSE;
811008d8:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811008dc:	00e04534 	movhi	r3,33044
811008e0:	18ca2604 	addi	r3,r3,10392
811008e4:	00a04534 	movhi	r2,33044
811008e8:	10b35104 	addi	r2,r2,-12988
811008ec:	1009883a 	mov	r4,r2
811008f0:	00800bc4 	movi	r2,47
811008f4:	100d883a 	mov	r6,r2
811008f8:	200b883a 	mov	r5,r4
811008fc:	1809883a 	mov	r4,r3
81100900:	1112e840 	call	81112e84 <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100904:	d0a04f17 	ldw	r2,-32452(gp)
81100908:	01604534 	movhi	r5,33044
8110090c:	294a2604 	addi	r5,r5,10392
81100910:	1009883a 	mov	r4,r2
81100914:	1111dd40 	call	81111dd4 <fprintf>
		;
#endif
		return bSuccess;
81100918:	e0bfbe17 	ldw	r2,-264(fp)
8110091c:	0002e706 	br	811014bc <bDdr2EepromDump+0xca0>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
81100920:	e0bfbd03 	ldbu	r2,-268(fp)
81100924:	10c03fcc 	andi	r3,r2,255
81100928:	18c0201c 	xori	r3,r3,128
8110092c:	18ffe004 	addi	r3,r3,-128
81100930:	e13fbf04 	addi	r4,fp,-260
81100934:	00804004 	movi	r2,256
81100938:	d8800015 	stw	r2,0(sp)
8110093c:	200f883a 	mov	r7,r4
81100940:	180d883a 	mov	r6,r3
81100944:	e17fbb17 	ldw	r5,-276(fp)
81100948:	e13fba17 	ldw	r4,-280(fp)
8110094c:	1105c380 	call	81105c38 <I2C_MultipleRead>
81100950:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
81100954:	e0bfbe17 	ldw	r2,-264(fp)
81100958:	1002be26 	beq	r2,zero,81101454 <bDdr2EepromDump+0xc38>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
8110095c:	e03fbc15 	stw	zero,-272(fp)
81100960:	0002b606 	br	8110143c <bDdr2EepromDump+0xc20>
			if (iI == 0) {
81100964:	e0bfbc17 	ldw	r2,-272(fp)
81100968:	1000121e 	bne	r2,zero,811009b4 <bDdr2EepromDump+0x198>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
8110096c:	e0ffbf04 	addi	r3,fp,-260
81100970:	e0bfbc17 	ldw	r2,-272(fp)
81100974:	1885883a 	add	r2,r3,r2
81100978:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110097c:	10803fcc 	andi	r2,r2,255
81100980:	100f883a 	mov	r7,r2
81100984:	e1bfbc17 	ldw	r6,-272(fp)
81100988:	01604534 	movhi	r5,33044
8110098c:	29735d04 	addi	r5,r5,-12940
81100990:	01204534 	movhi	r4,33044
81100994:	210a2604 	addi	r4,r4,10392
81100998:	11137640 	call	81113764 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
8110099c:	d0a04f17 	ldw	r2,-32452(gp)
811009a0:	01604534 	movhi	r5,33044
811009a4:	294a2604 	addi	r5,r5,10392
811009a8:	1009883a 	mov	r4,r2
811009ac:	1111dd40 	call	81111dd4 <fprintf>
811009b0:	00029f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 1) {
811009b4:	e0bfbc17 	ldw	r2,-272(fp)
811009b8:	10800058 	cmpnei	r2,r2,1
811009bc:	1000101e 	bne	r2,zero,81100a00 <bDdr2EepromDump+0x1e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009c0:	00e04534 	movhi	r3,33044
811009c4:	18ca2604 	addi	r3,r3,10392
811009c8:	00a04534 	movhi	r2,33044
811009cc:	10b36904 	addi	r2,r2,-12892
811009d0:	1009883a 	mov	r4,r2
811009d4:	00800c04 	movi	r2,48
811009d8:	100d883a 	mov	r6,r2
811009dc:	200b883a 	mov	r5,r4
811009e0:	1809883a 	mov	r4,r3
811009e4:	1112e840 	call	81112e84 <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
811009e8:	d0a04f17 	ldw	r2,-32452(gp)
811009ec:	01604534 	movhi	r5,33044
811009f0:	294a2604 	addi	r5,r5,10392
811009f4:	1009883a 	mov	r4,r2
811009f8:	1111dd40 	call	81111dd4 <fprintf>
811009fc:	00028c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 2) {
81100a00:	e0bfbc17 	ldw	r2,-272(fp)
81100a04:	10800098 	cmpnei	r2,r2,2
81100a08:	1000101e 	bne	r2,zero,81100a4c <bDdr2EepromDump+0x230>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
81100a0c:	00e04534 	movhi	r3,33044
81100a10:	18ca2604 	addi	r3,r3,10392
81100a14:	00a04534 	movhi	r2,33044
81100a18:	10b37504 	addi	r2,r2,-12844
81100a1c:	1009883a 	mov	r4,r2
81100a20:	008007c4 	movi	r2,31
81100a24:	100d883a 	mov	r6,r2
81100a28:	200b883a 	mov	r5,r4
81100a2c:	1809883a 	mov	r4,r3
81100a30:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81100a34:	d0a04f17 	ldw	r2,-32452(gp)
81100a38:	01604534 	movhi	r5,33044
81100a3c:	294a2604 	addi	r5,r5,10392
81100a40:	1009883a 	mov	r4,r2
81100a44:	1111dd40 	call	81111dd4 <fprintf>
81100a48:	00027906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 3) {
81100a4c:	e0bfbc17 	ldw	r2,-272(fp)
81100a50:	108000d8 	cmpnei	r2,r2,3
81100a54:	1000101e 	bne	r2,zero,81100a98 <bDdr2EepromDump+0x27c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a58:	00e04534 	movhi	r3,33044
81100a5c:	18ca2604 	addi	r3,r3,10392
81100a60:	00a04534 	movhi	r2,33044
81100a64:	10b37d04 	addi	r2,r2,-12812
81100a68:	1009883a 	mov	r4,r2
81100a6c:	008009c4 	movi	r2,39
81100a70:	100d883a 	mov	r6,r2
81100a74:	200b883a 	mov	r5,r4
81100a78:	1809883a 	mov	r4,r3
81100a7c:	1112e840 	call	81112e84 <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a80:	d0a04f17 	ldw	r2,-32452(gp)
81100a84:	01604534 	movhi	r5,33044
81100a88:	294a2604 	addi	r5,r5,10392
81100a8c:	1009883a 	mov	r4,r2
81100a90:	1111dd40 	call	81111dd4 <fprintf>
81100a94:	00026606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 4) {
81100a98:	e0bfbc17 	ldw	r2,-272(fp)
81100a9c:	10800118 	cmpnei	r2,r2,4
81100aa0:	1000101e 	bne	r2,zero,81100ae4 <bDdr2EepromDump+0x2c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100aa4:	00e04534 	movhi	r3,33044
81100aa8:	18ca2604 	addi	r3,r3,10392
81100aac:	00a04534 	movhi	r2,33044
81100ab0:	10b38704 	addi	r2,r2,-12772
81100ab4:	1009883a 	mov	r4,r2
81100ab8:	00800a84 	movi	r2,42
81100abc:	100d883a 	mov	r6,r2
81100ac0:	200b883a 	mov	r5,r4
81100ac4:	1809883a 	mov	r4,r3
81100ac8:	1112e840 	call	81112e84 <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100acc:	d0a04f17 	ldw	r2,-32452(gp)
81100ad0:	01604534 	movhi	r5,33044
81100ad4:	294a2604 	addi	r5,r5,10392
81100ad8:	1009883a 	mov	r4,r2
81100adc:	1111dd40 	call	81111dd4 <fprintf>
81100ae0:	00025306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 5) {
81100ae4:	e0bfbc17 	ldw	r2,-272(fp)
81100ae8:	10800158 	cmpnei	r2,r2,5
81100aec:	1000101e 	bne	r2,zero,81100b30 <bDdr2EepromDump+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100af0:	00e04534 	movhi	r3,33044
81100af4:	18ca2604 	addi	r3,r3,10392
81100af8:	00a04534 	movhi	r2,33044
81100afc:	10b39204 	addi	r2,r2,-12728
81100b00:	1009883a 	mov	r4,r2
81100b04:	00800c04 	movi	r2,48
81100b08:	100d883a 	mov	r6,r2
81100b0c:	200b883a 	mov	r5,r4
81100b10:	1809883a 	mov	r4,r3
81100b14:	1112e840 	call	81112e84 <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100b18:	d0a04f17 	ldw	r2,-32452(gp)
81100b1c:	01604534 	movhi	r5,33044
81100b20:	294a2604 	addi	r5,r5,10392
81100b24:	1009883a 	mov	r4,r2
81100b28:	1111dd40 	call	81111dd4 <fprintf>
81100b2c:	00024006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 6) {
81100b30:	e0bfbc17 	ldw	r2,-272(fp)
81100b34:	10800198 	cmpnei	r2,r2,6
81100b38:	1000101e 	bne	r2,zero,81100b7c <bDdr2EepromDump+0x360>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100b3c:	00e04534 	movhi	r3,33044
81100b40:	18ca2604 	addi	r3,r3,10392
81100b44:	00a04534 	movhi	r2,33044
81100b48:	10b39e04 	addi	r2,r2,-12680
81100b4c:	1009883a 	mov	r4,r2
81100b50:	00800544 	movi	r2,21
81100b54:	100d883a 	mov	r6,r2
81100b58:	200b883a 	mov	r5,r4
81100b5c:	1809883a 	mov	r4,r3
81100b60:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81100b64:	d0a04f17 	ldw	r2,-32452(gp)
81100b68:	01604534 	movhi	r5,33044
81100b6c:	294a2604 	addi	r5,r5,10392
81100b70:	1009883a 	mov	r4,r2
81100b74:	1111dd40 	call	81111dd4 <fprintf>
81100b78:	00022d06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 7) {
81100b7c:	e0bfbc17 	ldw	r2,-272(fp)
81100b80:	108001d8 	cmpnei	r2,r2,7
81100b84:	1000101e 	bne	r2,zero,81100bc8 <bDdr2EepromDump+0x3ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100b88:	00e04534 	movhi	r3,33044
81100b8c:	18ca2604 	addi	r3,r3,10392
81100b90:	00a04534 	movhi	r2,33044
81100b94:	10b3a404 	addi	r2,r2,-12656
81100b98:	1009883a 	mov	r4,r2
81100b9c:	00800804 	movi	r2,32
81100ba0:	100d883a 	mov	r6,r2
81100ba4:	200b883a 	mov	r5,r4
81100ba8:	1809883a 	mov	r4,r3
81100bac:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81100bb0:	d0a04f17 	ldw	r2,-32452(gp)
81100bb4:	01604534 	movhi	r5,33044
81100bb8:	294a2604 	addi	r5,r5,10392
81100bbc:	1009883a 	mov	r4,r2
81100bc0:	1111dd40 	call	81111dd4 <fprintf>
81100bc4:	00021a06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 16) {
81100bc8:	e0bfbc17 	ldw	r2,-272(fp)
81100bcc:	10800418 	cmpnei	r2,r2,16
81100bd0:	1000101e 	bne	r2,zero,81100c14 <bDdr2EepromDump+0x3f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100bd4:	00e04534 	movhi	r3,33044
81100bd8:	18ca2604 	addi	r3,r3,10392
81100bdc:	00a04534 	movhi	r2,33044
81100be0:	10b3ac04 	addi	r2,r2,-12624
81100be4:	1009883a 	mov	r4,r2
81100be8:	00800d04 	movi	r2,52
81100bec:	100d883a 	mov	r6,r2
81100bf0:	200b883a 	mov	r5,r4
81100bf4:	1809883a 	mov	r4,r3
81100bf8:	1112e840 	call	81112e84 <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100bfc:	d0a04f17 	ldw	r2,-32452(gp)
81100c00:	01604534 	movhi	r5,33044
81100c04:	294a2604 	addi	r5,r5,10392
81100c08:	1009883a 	mov	r4,r2
81100c0c:	1111dd40 	call	81111dd4 <fprintf>
81100c10:	00020706 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 13) {
81100c14:	e0bfbc17 	ldw	r2,-272(fp)
81100c18:	10800358 	cmpnei	r2,r2,13
81100c1c:	1000101e 	bne	r2,zero,81100c60 <bDdr2EepromDump+0x444>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100c20:	00e04534 	movhi	r3,33044
81100c24:	18ca2604 	addi	r3,r3,10392
81100c28:	00a04534 	movhi	r2,33044
81100c2c:	10b3b904 	addi	r2,r2,-12572
81100c30:	1009883a 	mov	r4,r2
81100c34:	008005c4 	movi	r2,23
81100c38:	100d883a 	mov	r6,r2
81100c3c:	200b883a 	mov	r5,r4
81100c40:	1809883a 	mov	r4,r3
81100c44:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81100c48:	d0a04f17 	ldw	r2,-32452(gp)
81100c4c:	01604534 	movhi	r5,33044
81100c50:	294a2604 	addi	r5,r5,10392
81100c54:	1009883a 	mov	r4,r2
81100c58:	1111dd40 	call	81111dd4 <fprintf>
81100c5c:	0001f406 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 14) {
81100c60:	e0bfbc17 	ldw	r2,-272(fp)
81100c64:	10800398 	cmpnei	r2,r2,14
81100c68:	1000101e 	bne	r2,zero,81100cac <bDdr2EepromDump+0x490>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100c6c:	00e04534 	movhi	r3,33044
81100c70:	18ca2604 	addi	r3,r3,10392
81100c74:	00a04534 	movhi	r2,33044
81100c78:	10b3bf04 	addi	r2,r2,-12548
81100c7c:	1009883a 	mov	r4,r2
81100c80:	008004c4 	movi	r2,19
81100c84:	100d883a 	mov	r6,r2
81100c88:	200b883a 	mov	r5,r4
81100c8c:	1809883a 	mov	r4,r3
81100c90:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81100c94:	d0a04f17 	ldw	r2,-32452(gp)
81100c98:	01604534 	movhi	r5,33044
81100c9c:	294a2604 	addi	r5,r5,10392
81100ca0:	1009883a 	mov	r4,r2
81100ca4:	1111dd40 	call	81111dd4 <fprintf>
81100ca8:	0001e106 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 17) {
81100cac:	e0bfbc17 	ldw	r2,-272(fp)
81100cb0:	10800458 	cmpnei	r2,r2,17
81100cb4:	1000101e 	bne	r2,zero,81100cf8 <bDdr2EepromDump+0x4dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100cb8:	00e04534 	movhi	r3,33044
81100cbc:	18ca2604 	addi	r3,r3,10392
81100cc0:	00a04534 	movhi	r2,33044
81100cc4:	10b3c404 	addi	r2,r2,-12528
81100cc8:	1009883a 	mov	r4,r2
81100ccc:	00800684 	movi	r2,26
81100cd0:	100d883a 	mov	r6,r2
81100cd4:	200b883a 	mov	r5,r4
81100cd8:	1809883a 	mov	r4,r3
81100cdc:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81100ce0:	d0a04f17 	ldw	r2,-32452(gp)
81100ce4:	01604534 	movhi	r5,33044
81100ce8:	294a2604 	addi	r5,r5,10392
81100cec:	1009883a 	mov	r4,r2
81100cf0:	1111dd40 	call	81111dd4 <fprintf>
81100cf4:	0001ce06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 18) {
81100cf8:	e0bfbc17 	ldw	r2,-272(fp)
81100cfc:	10800498 	cmpnei	r2,r2,18
81100d00:	1000101e 	bne	r2,zero,81100d44 <bDdr2EepromDump+0x528>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d04:	00e04534 	movhi	r3,33044
81100d08:	18ca2604 	addi	r3,r3,10392
81100d0c:	00a04534 	movhi	r2,33044
81100d10:	10b3cb04 	addi	r2,r2,-12500
81100d14:	1009883a 	mov	r4,r2
81100d18:	00800d44 	movi	r2,53
81100d1c:	100d883a 	mov	r6,r2
81100d20:	200b883a 	mov	r5,r4
81100d24:	1809883a 	mov	r4,r3
81100d28:	1112e840 	call	81112e84 <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100d2c:	d0a04f17 	ldw	r2,-32452(gp)
81100d30:	01604534 	movhi	r5,33044
81100d34:	294a2604 	addi	r5,r5,10392
81100d38:	1009883a 	mov	r4,r2
81100d3c:	1111dd40 	call	81111dd4 <fprintf>
81100d40:	0001bb06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 20) {
81100d44:	e0bfbc17 	ldw	r2,-272(fp)
81100d48:	10800518 	cmpnei	r2,r2,20
81100d4c:	1000101e 	bne	r2,zero,81100d90 <bDdr2EepromDump+0x574>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d50:	00e04534 	movhi	r3,33044
81100d54:	18ca2604 	addi	r3,r3,10392
81100d58:	00a04534 	movhi	r2,33044
81100d5c:	10b3d904 	addi	r2,r2,-12444
81100d60:	1009883a 	mov	r4,r2
81100d64:	00801204 	movi	r2,72
81100d68:	100d883a 	mov	r6,r2
81100d6c:	200b883a 	mov	r5,r4
81100d70:	1809883a 	mov	r4,r3
81100d74:	1112e840 	call	81112e84 <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100d78:	d0a04f17 	ldw	r2,-32452(gp)
81100d7c:	01604534 	movhi	r5,33044
81100d80:	294a2604 	addi	r5,r5,10392
81100d84:	1009883a 	mov	r4,r2
81100d88:	1111dd40 	call	81111dd4 <fprintf>
81100d8c:	0001a806 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 22) {
81100d90:	e0bfbc17 	ldw	r2,-272(fp)
81100d94:	10800598 	cmpnei	r2,r2,22
81100d98:	1000101e 	bne	r2,zero,81100ddc <bDdr2EepromDump+0x5c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d9c:	00e04534 	movhi	r3,33044
81100da0:	18ca2604 	addi	r3,r3,10392
81100da4:	00a04534 	movhi	r2,33044
81100da8:	10b3eb04 	addi	r2,r2,-12372
81100dac:	1009883a 	mov	r4,r2
81100db0:	00800784 	movi	r2,30
81100db4:	100d883a 	mov	r6,r2
81100db8:	200b883a 	mov	r5,r4
81100dbc:	1809883a 	mov	r4,r3
81100dc0:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81100dc4:	d0a04f17 	ldw	r2,-32452(gp)
81100dc8:	01604534 	movhi	r5,33044
81100dcc:	294a2604 	addi	r5,r5,10392
81100dd0:	1009883a 	mov	r4,r2
81100dd4:	1111dd40 	call	81111dd4 <fprintf>
81100dd8:	00019506 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 27) {
81100ddc:	e0bfbc17 	ldw	r2,-272(fp)
81100de0:	108006d8 	cmpnei	r2,r2,27
81100de4:	1000101e 	bne	r2,zero,81100e28 <bDdr2EepromDump+0x60c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100de8:	00e04534 	movhi	r3,33044
81100dec:	18ca2604 	addi	r3,r3,10392
81100df0:	00a04534 	movhi	r2,33044
81100df4:	10b3f304 	addi	r2,r2,-12340
81100df8:	1009883a 	mov	r4,r2
81100dfc:	00800a04 	movi	r2,40
81100e00:	100d883a 	mov	r6,r2
81100e04:	200b883a 	mov	r5,r4
81100e08:	1809883a 	mov	r4,r3
81100e0c:	1112e840 	call	81112e84 <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e10:	d0a04f17 	ldw	r2,-32452(gp)
81100e14:	01604534 	movhi	r5,33044
81100e18:	294a2604 	addi	r5,r5,10392
81100e1c:	1009883a 	mov	r4,r2
81100e20:	1111dd40 	call	81111dd4 <fprintf>
81100e24:	00018206 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 28) {
81100e28:	e0bfbc17 	ldw	r2,-272(fp)
81100e2c:	10800718 	cmpnei	r2,r2,28
81100e30:	1000101e 	bne	r2,zero,81100e74 <bDdr2EepromDump+0x658>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e34:	00e04534 	movhi	r3,33044
81100e38:	18ca2604 	addi	r3,r3,10392
81100e3c:	00a04534 	movhi	r2,33044
81100e40:	10b3fd04 	addi	r2,r2,-12300
81100e44:	1009883a 	mov	r4,r2
81100e48:	00800cc4 	movi	r2,51
81100e4c:	100d883a 	mov	r6,r2
81100e50:	200b883a 	mov	r5,r4
81100e54:	1809883a 	mov	r4,r3
81100e58:	1112e840 	call	81112e84 <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e5c:	d0a04f17 	ldw	r2,-32452(gp)
81100e60:	01604534 	movhi	r5,33044
81100e64:	294a2604 	addi	r5,r5,10392
81100e68:	1009883a 	mov	r4,r2
81100e6c:	1111dd40 	call	81111dd4 <fprintf>
81100e70:	00016f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 29) {
81100e74:	e0bfbc17 	ldw	r2,-272(fp)
81100e78:	10800758 	cmpnei	r2,r2,29
81100e7c:	1000101e 	bne	r2,zero,81100ec0 <bDdr2EepromDump+0x6a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e80:	00e04534 	movhi	r3,33044
81100e84:	18ca2604 	addi	r3,r3,10392
81100e88:	00a04534 	movhi	r2,33044
81100e8c:	10b40a04 	addi	r2,r2,-12248
81100e90:	1009883a 	mov	r4,r2
81100e94:	008009c4 	movi	r2,39
81100e98:	100d883a 	mov	r6,r2
81100e9c:	200b883a 	mov	r5,r4
81100ea0:	1809883a 	mov	r4,r3
81100ea4:	1112e840 	call	81112e84 <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100ea8:	d0a04f17 	ldw	r2,-32452(gp)
81100eac:	01604534 	movhi	r5,33044
81100eb0:	294a2604 	addi	r5,r5,10392
81100eb4:	1009883a 	mov	r4,r2
81100eb8:	1111dd40 	call	81111dd4 <fprintf>
81100ebc:	00015c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 30) {
81100ec0:	e0bfbc17 	ldw	r2,-272(fp)
81100ec4:	10800798 	cmpnei	r2,r2,30
81100ec8:	1000101e 	bne	r2,zero,81100f0c <bDdr2EepromDump+0x6f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ecc:	00e04534 	movhi	r3,33044
81100ed0:	18ca2604 	addi	r3,r3,10392
81100ed4:	00a04534 	movhi	r2,33044
81100ed8:	10b41404 	addi	r2,r2,-12208
81100edc:	1009883a 	mov	r4,r2
81100ee0:	00800b04 	movi	r2,44
81100ee4:	100d883a 	mov	r6,r2
81100ee8:	200b883a 	mov	r5,r4
81100eec:	1809883a 	mov	r4,r3
81100ef0:	1112e840 	call	81112e84 <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100ef4:	d0a04f17 	ldw	r2,-32452(gp)
81100ef8:	01604534 	movhi	r5,33044
81100efc:	294a2604 	addi	r5,r5,10392
81100f00:	1009883a 	mov	r4,r2
81100f04:	1111dd40 	call	81111dd4 <fprintf>
81100f08:	00014906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 31) {
81100f0c:	e0bfbc17 	ldw	r2,-272(fp)
81100f10:	108007d8 	cmpnei	r2,r2,31
81100f14:	1000101e 	bne	r2,zero,81100f58 <bDdr2EepromDump+0x73c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f18:	00e04534 	movhi	r3,33044
81100f1c:	18ca2604 	addi	r3,r3,10392
81100f20:	00a04534 	movhi	r2,33044
81100f24:	10b41f04 	addi	r2,r2,-12164
81100f28:	1009883a 	mov	r4,r2
81100f2c:	008010c4 	movi	r2,67
81100f30:	100d883a 	mov	r6,r2
81100f34:	200b883a 	mov	r5,r4
81100f38:	1809883a 	mov	r4,r3
81100f3c:	1112e840 	call	81112e84 <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100f40:	d0a04f17 	ldw	r2,-32452(gp)
81100f44:	01604534 	movhi	r5,33044
81100f48:	294a2604 	addi	r5,r5,10392
81100f4c:	1009883a 	mov	r4,r2
81100f50:	1111dd40 	call	81111dd4 <fprintf>
81100f54:	00013606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 36) {
81100f58:	e0bfbc17 	ldw	r2,-272(fp)
81100f5c:	10800918 	cmpnei	r2,r2,36
81100f60:	1000101e 	bne	r2,zero,81100fa4 <bDdr2EepromDump+0x788>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f64:	00e04534 	movhi	r3,33044
81100f68:	18ca2604 	addi	r3,r3,10392
81100f6c:	00a04534 	movhi	r2,33044
81100f70:	10b43004 	addi	r2,r2,-12096
81100f74:	1009883a 	mov	r4,r2
81100f78:	00800a84 	movi	r2,42
81100f7c:	100d883a 	mov	r6,r2
81100f80:	200b883a 	mov	r5,r4
81100f84:	1809883a 	mov	r4,r3
81100f88:	1112e840 	call	81112e84 <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f8c:	d0a04f17 	ldw	r2,-32452(gp)
81100f90:	01604534 	movhi	r5,33044
81100f94:	294a2604 	addi	r5,r5,10392
81100f98:	1009883a 	mov	r4,r2
81100f9c:	1111dd40 	call	81111dd4 <fprintf>
81100fa0:	00012306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 37) {
81100fa4:	e0bfbc17 	ldw	r2,-272(fp)
81100fa8:	10800958 	cmpnei	r2,r2,37
81100fac:	1000101e 	bne	r2,zero,81100ff0 <bDdr2EepromDump+0x7d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fb0:	00e04534 	movhi	r3,33044
81100fb4:	18ca2604 	addi	r3,r3,10392
81100fb8:	00a04534 	movhi	r2,33044
81100fbc:	10b43b04 	addi	r2,r2,-12052
81100fc0:	1009883a 	mov	r4,r2
81100fc4:	00800cc4 	movi	r2,51
81100fc8:	100d883a 	mov	r6,r2
81100fcc:	200b883a 	mov	r5,r4
81100fd0:	1809883a 	mov	r4,r3
81100fd4:	1112e840 	call	81112e84 <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100fd8:	d0a04f17 	ldw	r2,-32452(gp)
81100fdc:	01604534 	movhi	r5,33044
81100fe0:	294a2604 	addi	r5,r5,10392
81100fe4:	1009883a 	mov	r4,r2
81100fe8:	1111dd40 	call	81111dd4 <fprintf>
81100fec:	00011006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 38) {
81100ff0:	e0bfbc17 	ldw	r2,-272(fp)
81100ff4:	10800998 	cmpnei	r2,r2,38
81100ff8:	1000101e 	bne	r2,zero,8110103c <bDdr2EepromDump+0x820>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ffc:	00e04534 	movhi	r3,33044
81101000:	18ca2604 	addi	r3,r3,10392
81101004:	00a04534 	movhi	r2,33044
81101008:	10b44804 	addi	r2,r2,-12000
8110100c:	1009883a 	mov	r4,r2
81101010:	00800dc4 	movi	r2,55
81101014:	100d883a 	mov	r6,r2
81101018:	200b883a 	mov	r5,r4
8110101c:	1809883a 	mov	r4,r3
81101020:	1112e840 	call	81112e84 <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81101024:	d0a04f17 	ldw	r2,-32452(gp)
81101028:	01604534 	movhi	r5,33044
8110102c:	294a2604 	addi	r5,r5,10392
81101030:	1009883a 	mov	r4,r2
81101034:	1111dd40 	call	81111dd4 <fprintf>
81101038:	0000fd06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 41) {
8110103c:	e0bfbc17 	ldw	r2,-272(fp)
81101040:	10800a58 	cmpnei	r2,r2,41
81101044:	1000101e 	bne	r2,zero,81101088 <bDdr2EepromDump+0x86c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101048:	00e04534 	movhi	r3,33044
8110104c:	18ca2604 	addi	r3,r3,10392
81101050:	00a04534 	movhi	r2,33044
81101054:	10b45604 	addi	r2,r2,-11944
81101058:	1009883a 	mov	r4,r2
8110105c:	00800c84 	movi	r2,50
81101060:	100d883a 	mov	r6,r2
81101064:	200b883a 	mov	r5,r4
81101068:	1809883a 	mov	r4,r3
8110106c:	1112e840 	call	81112e84 <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81101070:	d0a04f17 	ldw	r2,-32452(gp)
81101074:	01604534 	movhi	r5,33044
81101078:	294a2604 	addi	r5,r5,10392
8110107c:	1009883a 	mov	r4,r2
81101080:	1111dd40 	call	81111dd4 <fprintf>
81101084:	0000ea06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 42) {
81101088:	e0bfbc17 	ldw	r2,-272(fp)
8110108c:	10800a98 	cmpnei	r2,r2,42
81101090:	1000101e 	bne	r2,zero,811010d4 <bDdr2EepromDump+0x8b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101094:	00e04534 	movhi	r3,33044
81101098:	18ca2604 	addi	r3,r3,10392
8110109c:	00a04534 	movhi	r2,33044
811010a0:	10b46304 	addi	r2,r2,-11892
811010a4:	1009883a 	mov	r4,r2
811010a8:	00800cc4 	movi	r2,51
811010ac:	100d883a 	mov	r6,r2
811010b0:	200b883a 	mov	r5,r4
811010b4:	1809883a 	mov	r4,r3
811010b8:	1112e840 	call	81112e84 <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
811010bc:	d0a04f17 	ldw	r2,-32452(gp)
811010c0:	01604534 	movhi	r5,33044
811010c4:	294a2604 	addi	r5,r5,10392
811010c8:	1009883a 	mov	r4,r2
811010cc:	1111dd40 	call	81111dd4 <fprintf>
811010d0:	0000d706 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 62) {
811010d4:	e0bfbc17 	ldw	r2,-272(fp)
811010d8:	10800f98 	cmpnei	r2,r2,62
811010dc:	1000101e 	bne	r2,zero,81101120 <bDdr2EepromDump+0x904>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
811010e0:	00e04534 	movhi	r3,33044
811010e4:	18ca2604 	addi	r3,r3,10392
811010e8:	00a04534 	movhi	r2,33044
811010ec:	10b47004 	addi	r2,r2,-11840
811010f0:	1009883a 	mov	r4,r2
811010f4:	00800404 	movi	r2,16
811010f8:	100d883a 	mov	r6,r2
811010fc:	200b883a 	mov	r5,r4
81101100:	1809883a 	mov	r4,r3
81101104:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81101108:	d0a04f17 	ldw	r2,-32452(gp)
8110110c:	01604534 	movhi	r5,33044
81101110:	294a2604 	addi	r5,r5,10392
81101114:	1009883a 	mov	r4,r2
81101118:	1111dd40 	call	81111dd4 <fprintf>
8110111c:	0000c406 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 63) {
81101120:	e0bfbc17 	ldw	r2,-272(fp)
81101124:	10800fd8 	cmpnei	r2,r2,63
81101128:	10001f1e 	bne	r2,zero,811011a8 <bDdr2EepromDump+0x98c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
8110112c:	00a04534 	movhi	r2,33044
81101130:	108a2604 	addi	r2,r2,10392
81101134:	00c00a04 	movi	r3,40
81101138:	10c00005 	stb	r3,0(r2)
8110113c:	00c010c4 	movi	r3,67
81101140:	10c00045 	stb	r3,1(r2)
81101144:	00c01a04 	movi	r3,104
81101148:	10c00085 	stb	r3,2(r2)
8110114c:	00c01944 	movi	r3,101
81101150:	10c000c5 	stb	r3,3(r2)
81101154:	00c018c4 	movi	r3,99
81101158:	10c00105 	stb	r3,4(r2)
8110115c:	00c01ac4 	movi	r3,107
81101160:	10c00145 	stb	r3,5(r2)
81101164:	00c01cc4 	movi	r3,115
81101168:	10c00185 	stb	r3,6(r2)
8110116c:	00c01d44 	movi	r3,117
81101170:	10c001c5 	stb	r3,7(r2)
81101174:	00c01b44 	movi	r3,109
81101178:	10c00205 	stb	r3,8(r2)
8110117c:	00c00a44 	movi	r3,41
81101180:	10c00245 	stb	r3,9(r2)
81101184:	00c00284 	movi	r3,10
81101188:	10c00285 	stb	r3,10(r2)
8110118c:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
81101190:	d0a04f17 	ldw	r2,-32452(gp)
81101194:	01604534 	movhi	r5,33044
81101198:	294a2604 	addi	r5,r5,10392
8110119c:	1009883a 	mov	r4,r2
811011a0:	1111dd40 	call	81111dd4 <fprintf>
811011a4:	0000a206 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 64) {
811011a8:	e0bfbc17 	ldw	r2,-272(fp)
811011ac:	10801018 	cmpnei	r2,r2,64
811011b0:	1000101e 	bne	r2,zero,811011f4 <bDdr2EepromDump+0x9d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
811011b4:	00e04534 	movhi	r3,33044
811011b8:	18ca2604 	addi	r3,r3,10392
811011bc:	00a04534 	movhi	r2,33044
811011c0:	10b47404 	addi	r2,r2,-11824
811011c4:	1009883a 	mov	r4,r2
811011c8:	00800804 	movi	r2,32
811011cc:	100d883a 	mov	r6,r2
811011d0:	200b883a 	mov	r5,r4
811011d4:	1809883a 	mov	r4,r3
811011d8:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
811011dc:	d0a04f17 	ldw	r2,-32452(gp)
811011e0:	01604534 	movhi	r5,33044
811011e4:	294a2604 	addi	r5,r5,10392
811011e8:	1009883a 	mov	r4,r2
811011ec:	1111dd40 	call	81111dd4 <fprintf>
811011f0:	00008f06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 72) {
811011f4:	e0bfbc17 	ldw	r2,-272(fp)
811011f8:	10801218 	cmpnei	r2,r2,72
811011fc:	1000101e 	bne	r2,zero,81101240 <bDdr2EepromDump+0xa24>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101200:	00e04534 	movhi	r3,33044
81101204:	18ca2604 	addi	r3,r3,10392
81101208:	00a04534 	movhi	r2,33044
8110120c:	10b47c04 	addi	r2,r2,-11792
81101210:	1009883a 	mov	r4,r2
81101214:	00800dc4 	movi	r2,55
81101218:	100d883a 	mov	r6,r2
8110121c:	200b883a 	mov	r5,r4
81101220:	1809883a 	mov	r4,r3
81101224:	1112e840 	call	81112e84 <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
81101228:	d0a04f17 	ldw	r2,-32452(gp)
8110122c:	01604534 	movhi	r5,33044
81101230:	294a2604 	addi	r5,r5,10392
81101234:	1009883a 	mov	r4,r2
81101238:	1111dd40 	call	81111dd4 <fprintf>
8110123c:	00007c06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 73) {
81101240:	e0bfbc17 	ldw	r2,-272(fp)
81101244:	10801258 	cmpnei	r2,r2,73
81101248:	1000101e 	bne	r2,zero,8110128c <bDdr2EepromDump+0xa70>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
8110124c:	00e04534 	movhi	r3,33044
81101250:	18ca2604 	addi	r3,r3,10392
81101254:	00a04534 	movhi	r2,33044
81101258:	10b48a04 	addi	r2,r2,-11736
8110125c:	1009883a 	mov	r4,r2
81101260:	00800784 	movi	r2,30
81101264:	100d883a 	mov	r6,r2
81101268:	200b883a 	mov	r5,r4
8110126c:	1809883a 	mov	r4,r3
81101270:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81101274:	d0a04f17 	ldw	r2,-32452(gp)
81101278:	01604534 	movhi	r5,33044
8110127c:	294a2604 	addi	r5,r5,10392
81101280:	1009883a 	mov	r4,r2
81101284:	1111dd40 	call	81111dd4 <fprintf>
81101288:	00006906 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 91) {
8110128c:	e0bfbc17 	ldw	r2,-272(fp)
81101290:	108016d8 	cmpnei	r2,r2,91
81101294:	1000101e 	bne	r2,zero,811012d8 <bDdr2EepromDump+0xabc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
81101298:	00e04534 	movhi	r3,33044
8110129c:	18ca2604 	addi	r3,r3,10392
811012a0:	00a04534 	movhi	r2,33044
811012a4:	10b49204 	addi	r2,r2,-11704
811012a8:	1009883a 	mov	r4,r2
811012ac:	00800804 	movi	r2,32
811012b0:	100d883a 	mov	r6,r2
811012b4:	200b883a 	mov	r5,r4
811012b8:	1809883a 	mov	r4,r3
811012bc:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
811012c0:	d0a04f17 	ldw	r2,-32452(gp)
811012c4:	01604534 	movhi	r5,33044
811012c8:	294a2604 	addi	r5,r5,10392
811012cc:	1009883a 	mov	r4,r2
811012d0:	1111dd40 	call	81111dd4 <fprintf>
811012d4:	00005606 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 93) {
811012d8:	e0bfbc17 	ldw	r2,-272(fp)
811012dc:	10801758 	cmpnei	r2,r2,93
811012e0:	1000101e 	bne	r2,zero,81101324 <bDdr2EepromDump+0xb08>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811012e4:	00e04534 	movhi	r3,33044
811012e8:	18ca2604 	addi	r3,r3,10392
811012ec:	00a04534 	movhi	r2,33044
811012f0:	10b49a04 	addi	r2,r2,-11672
811012f4:	1009883a 	mov	r4,r2
811012f8:	008009c4 	movi	r2,39
811012fc:	100d883a 	mov	r6,r2
81101300:	200b883a 	mov	r5,r4
81101304:	1809883a 	mov	r4,r3
81101308:	1112e840 	call	81112e84 <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
8110130c:	d0a04f17 	ldw	r2,-32452(gp)
81101310:	01604534 	movhi	r5,33044
81101314:	294a2604 	addi	r5,r5,10392
81101318:	1009883a 	mov	r4,r2
8110131c:	1111dd40 	call	81111dd4 <fprintf>
81101320:	00004306 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 94) {
81101324:	e0bfbc17 	ldw	r2,-272(fp)
81101328:	10801798 	cmpnei	r2,r2,94
8110132c:	1000101e 	bne	r2,zero,81101370 <bDdr2EepromDump+0xb54>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
81101330:	00e04534 	movhi	r3,33044
81101334:	18ca2604 	addi	r3,r3,10392
81101338:	00a04534 	movhi	r2,33044
8110133c:	10b4a404 	addi	r2,r2,-11632
81101340:	1009883a 	mov	r4,r2
81101344:	008006c4 	movi	r2,27
81101348:	100d883a 	mov	r6,r2
8110134c:	200b883a 	mov	r5,r4
81101350:	1809883a 	mov	r4,r3
81101354:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
81101358:	d0a04f17 	ldw	r2,-32452(gp)
8110135c:	01604534 	movhi	r5,33044
81101360:	294a2604 	addi	r5,r5,10392
81101364:	1009883a 	mov	r4,r2
81101368:	1111dd40 	call	81111dd4 <fprintf>
8110136c:	00003006 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 95) {
81101370:	e0bfbc17 	ldw	r2,-272(fp)
81101374:	108017d8 	cmpnei	r2,r2,95
81101378:	1000101e 	bne	r2,zero,811013bc <bDdr2EepromDump+0xba0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110137c:	00e04534 	movhi	r3,33044
81101380:	18ca2604 	addi	r3,r3,10392
81101384:	00a04534 	movhi	r2,33044
81101388:	10b4ab04 	addi	r2,r2,-11604
8110138c:	1009883a 	mov	r4,r2
81101390:	00800a04 	movi	r2,40
81101394:	100d883a 	mov	r6,r2
81101398:	200b883a 	mov	r5,r4
8110139c:	1809883a 	mov	r4,r3
811013a0:	1112e840 	call	81112e84 <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
811013a4:	d0a04f17 	ldw	r2,-32452(gp)
811013a8:	01604534 	movhi	r5,33044
811013ac:	294a2604 	addi	r5,r5,10392
811013b0:	1009883a 	mov	r4,r2
811013b4:	1111dd40 	call	81111dd4 <fprintf>
811013b8:	00001d06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 99) {
811013bc:	e0bfbc17 	ldw	r2,-272(fp)
811013c0:	108018d8 	cmpnei	r2,r2,99
811013c4:	1000101e 	bne	r2,zero,81101408 <bDdr2EepromDump+0xbec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
811013c8:	00e04534 	movhi	r3,33044
811013cc:	18ca2604 	addi	r3,r3,10392
811013d0:	00a04534 	movhi	r2,33044
811013d4:	10b4b504 	addi	r2,r2,-11564
811013d8:	1009883a 	mov	r4,r2
811013dc:	00800984 	movi	r2,38
811013e0:	100d883a 	mov	r6,r2
811013e4:	200b883a 	mov	r5,r4
811013e8:	1809883a 	mov	r4,r3
811013ec:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
811013f0:	d0a04f17 	ldw	r2,-32452(gp)
811013f4:	01604534 	movhi	r5,33044
811013f8:	294a2604 	addi	r5,r5,10392
811013fc:	1009883a 	mov	r4,r2
81101400:	1111dd40 	call	81111dd4 <fprintf>
81101404:	00000a06 	br	81101430 <bDdr2EepromDump+0xc14>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101408:	00a04534 	movhi	r2,33044
8110140c:	108a2604 	addi	r2,r2,10392
81101410:	00c00284 	movi	r3,10
81101414:	10c00005 	stb	r3,0(r2)
81101418:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
8110141c:	d0a04f17 	ldw	r2,-32452(gp)
81101420:	01604534 	movhi	r5,33044
81101424:	294a2604 	addi	r5,r5,10392
81101428:	1009883a 	mov	r4,r2
8110142c:	1111dd40 	call	81111dd4 <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
81101430:	e0bfbc17 	ldw	r2,-272(fp)
81101434:	10800044 	addi	r2,r2,1
81101438:	e0bfbc15 	stw	r2,-272(fp)
8110143c:	e0bfbc17 	ldw	r2,-272(fp)
81101440:	10804008 	cmpgei	r2,r2,256
81101444:	1000121e 	bne	r2,zero,81101490 <bDdr2EepromDump+0xc74>
81101448:	e0bfbe17 	ldw	r2,-264(fp)
8110144c:	103d451e 	bne	r2,zero,81100964 <__reset+0xfb0e0964>
81101450:	00000f06 	br	81101490 <bDdr2EepromDump+0xc74>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
81101454:	00e04534 	movhi	r3,33044
81101458:	18ca2604 	addi	r3,r3,10392
8110145c:	00a04534 	movhi	r2,33044
81101460:	10b4bf04 	addi	r2,r2,-11524
81101464:	1009883a 	mov	r4,r2
81101468:	008005c4 	movi	r2,23
8110146c:	100d883a 	mov	r6,r2
81101470:	200b883a 	mov	r5,r4
81101474:	1809883a 	mov	r4,r3
81101478:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
8110147c:	d0a04f17 	ldw	r2,-32452(gp)
81101480:	01604534 	movhi	r5,33044
81101484:	294a2604 	addi	r5,r5,10392
81101488:	1009883a 	mov	r4,r2
8110148c:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101490:	00a04534 	movhi	r2,33044
81101494:	108a2604 	addi	r2,r2,10392
81101498:	00c00284 	movi	r3,10
8110149c:	10c00005 	stb	r3,0(r2)
811014a0:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811014a4:	d0a04f17 	ldw	r2,-32452(gp)
811014a8:	01604534 	movhi	r5,33044
811014ac:	294a2604 	addi	r5,r5,10392
811014b0:	1009883a 	mov	r4,r2
811014b4:	1111dd40 	call	81111dd4 <fprintf>
#endif

	return bSuccess;
811014b8:	e0bfbe17 	ldw	r2,-264(fp)
}
811014bc:	e037883a 	mov	sp,fp
811014c0:	dfc00117 	ldw	ra,4(sp)
811014c4:	df000017 	ldw	fp,0(sp)
811014c8:	dec00204 	addi	sp,sp,8
811014cc:	f800283a 	ret

811014d0 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
811014d0:	defffb04 	addi	sp,sp,-20
811014d4:	de00012e 	bgeu	sp,et,811014dc <bDdr2SwitchMemory+0xc>
811014d8:	003b68fa 	trap	3
811014dc:	dfc00415 	stw	ra,16(sp)
811014e0:	df000315 	stw	fp,12(sp)
811014e4:	df000304 	addi	fp,sp,12
811014e8:	2005883a 	mov	r2,r4
811014ec:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
811014f0:	00a04834 	movhi	r2,33056
811014f4:	108c2204 	addi	r2,r2,12424
811014f8:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
811014fc:	00800044 	movi	r2,1
81101500:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101504:	e0bfff03 	ldbu	r2,-4(fp)
81101508:	10c00060 	cmpeqi	r3,r2,1
8110150c:	1800031e 	bne	r3,zero,8110151c <bDdr2SwitchMemory+0x4c>
81101510:	108000a0 	cmpeqi	r2,r2,2
81101514:	1000041e 	bne	r2,zero,81101528 <bDdr2SwitchMemory+0x58>
81101518:	00000706 	br	81101538 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
8110151c:	e0bffe17 	ldw	r2,-8(fp)
81101520:	10000015 	stw	zero,0(r2)
		break;
81101524:	00001406 	br	81101578 <bDdr2SwitchMemory+0xa8>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81101528:	e0bffe17 	ldw	r2,-8(fp)
8110152c:	00e00034 	movhi	r3,32768
81101530:	10c00015 	stw	r3,0(r2)
		break;
81101534:	00001006 	br	81101578 <bDdr2SwitchMemory+0xa8>
	default:
		bSuccess = FALSE;
81101538:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110153c:	00e04534 	movhi	r3,33044
81101540:	18ca2604 	addi	r3,r3,10392
81101544:	00a04534 	movhi	r2,33044
81101548:	10b4c504 	addi	r2,r2,-11500
8110154c:	1009883a 	mov	r4,r2
81101550:	00800f04 	movi	r2,60
81101554:	100d883a 	mov	r6,r2
81101558:	200b883a 	mov	r5,r4
8110155c:	1809883a 	mov	r4,r3
81101560:	1112e840 	call	81112e84 <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
81101564:	d0a04f17 	ldw	r2,-32452(gp)
81101568:	01604534 	movhi	r5,33044
8110156c:	294a2604 	addi	r5,r5,10392
81101570:	1009883a 	mov	r4,r2
81101574:	1111dd40 	call	81111dd4 <fprintf>
		;
#endif
	}

	return bSuccess;
81101578:	e0bffd17 	ldw	r2,-12(fp)
}
8110157c:	e037883a 	mov	sp,fp
81101580:	dfc00117 	ldw	ra,4(sp)
81101584:	df000017 	ldw	fp,0(sp)
81101588:	dec00204 	addi	sp,sp,8
8110158c:	f800283a 	ret

81101590 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81101590:	deffe204 	addi	sp,sp,-120
81101594:	de00012e 	bgeu	sp,et,8110159c <bDdr2MemoryWriteTest+0xc>
81101598:	003b68fa 	trap	3
8110159c:	dfc01d15 	stw	ra,116(sp)
811015a0:	df001c15 	stw	fp,112(sp)
811015a4:	dc401b15 	stw	r17,108(sp)
811015a8:	dc001a15 	stw	r16,104(sp)
811015ac:	df001c04 	addi	fp,sp,112
811015b0:	2005883a 	mov	r2,r4
811015b4:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
811015b8:	00e04534 	movhi	r3,33044
811015bc:	18ca2604 	addi	r3,r3,10392
811015c0:	00a04534 	movhi	r2,33044
811015c4:	10b4d404 	addi	r2,r2,-11440
811015c8:	1009883a 	mov	r4,r2
811015cc:	00800a04 	movi	r2,40
811015d0:	100d883a 	mov	r6,r2
811015d4:	200b883a 	mov	r5,r4
811015d8:	1809883a 	mov	r4,r3
811015dc:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
811015e0:	d0a04f17 	ldw	r2,-32452(gp)
811015e4:	01604534 	movhi	r5,33044
811015e8:	294a2604 	addi	r5,r5,10392
811015ec:	1009883a 	mov	r4,r2
811015f0:	1111dd40 	call	81111dd4 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
811015f4:	00800044 	movi	r2,1
811015f8:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
811015fc:	e0bffd03 	ldbu	r2,-12(fp)
81101600:	10c00060 	cmpeqi	r3,r2,1
81101604:	1800031e 	bne	r3,zero,81101614 <bDdr2MemoryWriteTest+0x84>
81101608:	108000a0 	cmpeqi	r2,r2,2
8110160c:	1000081e 	bne	r2,zero,81101630 <bDdr2MemoryWriteTest+0xa0>
81101610:	00000e06 	br	8110164c <bDdr2MemoryWriteTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101614:	e0bffd03 	ldbu	r2,-12(fp)
81101618:	1009883a 	mov	r4,r2
8110161c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101620:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101624:	00a00034 	movhi	r2,32768
81101628:	e0bfe615 	stw	r2,-104(fp)
		break;
8110162c:	00001906 	br	81101694 <bDdr2MemoryWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101630:	e0bffd03 	ldbu	r2,-12(fp)
81101634:	1009883a 	mov	r4,r2
81101638:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110163c:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101640:	00a00034 	movhi	r2,32768
81101644:	e0bfe615 	stw	r2,-104(fp)
		break;
81101648:	00001206 	br	81101694 <bDdr2MemoryWriteTest+0x104>
	default:
		bSuccess = FALSE;
8110164c:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101650:	00e04534 	movhi	r3,33044
81101654:	18ca2604 	addi	r3,r3,10392
81101658:	00a04534 	movhi	r2,33044
8110165c:	10b2e504 	addi	r2,r2,-13420
81101660:	1009883a 	mov	r4,r2
81101664:	00800bc4 	movi	r2,47
81101668:	100d883a 	mov	r6,r2
8110166c:	200b883a 	mov	r5,r4
81101670:	1809883a 	mov	r4,r3
81101674:	1112e840 	call	81112e84 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101678:	d0a04f17 	ldw	r2,-32452(gp)
8110167c:	01604534 	movhi	r5,33044
81101680:	294a2604 	addi	r5,r5,10392
81101684:	1009883a 	mov	r4,r2
81101688:	1111dd40 	call	81111dd4 <fprintf>
		;
#endif
		return bSuccess;
8110168c:	e0bfed17 	ldw	r2,-76(fp)
81101690:	00011806 	br	81101af4 <bDdr2MemoryWriteTest+0x564>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81101694:	e0bfe617 	ldw	r2,-104(fp)
81101698:	1004d53a 	srli	r2,r2,20
8110169c:	100d883a 	mov	r6,r2
811016a0:	01604534 	movhi	r5,33044
811016a4:	2974de04 	addi	r5,r5,-11400
811016a8:	01204534 	movhi	r4,33044
811016ac:	210a2604 	addi	r4,r4,10392
811016b0:	11137640 	call	81113764 <sprintf>
	debug(fp, cDebugBuffer);
811016b4:	d0a04f17 	ldw	r2,-32452(gp)
811016b8:	01604534 	movhi	r5,33044
811016bc:	294a2604 	addi	r5,r5,10392
811016c0:	1009883a 	mov	r4,r2
811016c4:	1111dd40 	call	81111dd4 <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
811016c8:	00800104 	movi	r2,4
811016cc:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
811016d0:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
811016d4:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
811016d8:	e03fe715 	stw	zero,-100(fp)
811016dc:	00001506 	br	81101734 <bDdr2MemoryWriteTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
811016e0:	e0ffe617 	ldw	r3,-104(fp)
811016e4:	00b33374 	movhi	r2,52429
811016e8:	10b33344 	addi	r2,r2,-13107
811016ec:	1888383a 	mulxuu	r4,r3,r2
811016f0:	1885383a 	mul	r2,r3,r2
811016f4:	1021883a 	mov	r16,r2
811016f8:	2023883a 	mov	r17,r4
811016fc:	8804d0fa 	srli	r2,r17,3
81101700:	e0ffe717 	ldw	r3,-100(fp)
81101704:	18c00044 	addi	r3,r3,1
81101708:	10c7383a 	mul	r3,r2,r3
8110170c:	e0bfe717 	ldw	r2,-100(fp)
81101710:	1085883a 	add	r2,r2,r2
81101714:	1085883a 	add	r2,r2,r2
81101718:	e13fe504 	addi	r4,fp,-108
8110171c:	2085883a 	add	r2,r4,r2
81101720:	10800e04 	addi	r2,r2,56
81101724:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101728:	e0bfe717 	ldw	r2,-100(fp)
8110172c:	10800044 	addi	r2,r2,1
81101730:	e0bfe715 	stw	r2,-100(fp)
81101734:	e0bfe717 	ldw	r2,-100(fp)
81101738:	10800290 	cmplti	r2,r2,10
8110173c:	103fe81e 	bne	r2,zero,811016e0 <__reset+0xfb0e16e0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101740:	d0a07217 	ldw	r2,-32312(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
81101744:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101748:	00804004 	movi	r2,256
8110174c:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
81101750:	e03fe715 	stw	zero,-100(fp)
81101754:	00001e06 	br	811017d0 <bDdr2MemoryWriteTest+0x240>
		if (iI == 0) {
81101758:	e0bfe717 	ldw	r2,-100(fp)
8110175c:	1000091e 	bne	r2,zero,81101784 <bDdr2MemoryWriteTest+0x1f4>
			xSZData[iI] = uliInitValue;
81101760:	00a04534 	movhi	r2,33044
81101764:	108a6604 	addi	r2,r2,10648
81101768:	e0ffe717 	ldw	r3,-100(fp)
8110176c:	18c7883a 	add	r3,r3,r3
81101770:	18c7883a 	add	r3,r3,r3
81101774:	10c5883a 	add	r2,r2,r3
81101778:	e0fff017 	ldw	r3,-64(fp)
8110177c:	10c00015 	stw	r3,0(r2)
81101780:	00001006 	br	811017c4 <bDdr2MemoryWriteTest+0x234>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81101784:	e0bfe717 	ldw	r2,-100(fp)
81101788:	10ffffc4 	addi	r3,r2,-1
8110178c:	00a04534 	movhi	r2,33044
81101790:	108a6604 	addi	r2,r2,10648
81101794:	18c7883a 	add	r3,r3,r3
81101798:	18c7883a 	add	r3,r3,r3
8110179c:	10c5883a 	add	r2,r2,r3
811017a0:	10800017 	ldw	r2,0(r2)
811017a4:	11000364 	muli	r4,r2,13
811017a8:	00a04534 	movhi	r2,33044
811017ac:	108a6604 	addi	r2,r2,10648
811017b0:	e0ffe717 	ldw	r3,-100(fp)
811017b4:	18c7883a 	add	r3,r3,r3
811017b8:	18c7883a 	add	r3,r3,r3
811017bc:	10c5883a 	add	r2,r2,r3
811017c0:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
811017c4:	e0bfe717 	ldw	r2,-100(fp)
811017c8:	10800044 	addi	r2,r2,1
811017cc:	e0bfe715 	stw	r2,-100(fp)
811017d0:	e0ffe717 	ldw	r3,-100(fp)
811017d4:	e0bfea17 	ldw	r2,-88(fp)
811017d8:	18bfdf16 	blt	r3,r2,81101758 <__reset+0xfb0e1758>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
811017dc:	e0bfea17 	ldw	r2,-88(fp)
811017e0:	10ffffc4 	addi	r3,r2,-1
811017e4:	00a04534 	movhi	r2,33044
811017e8:	108a6604 	addi	r2,r2,10648
811017ec:	18c7883a 	add	r3,r3,r3
811017f0:	18c7883a 	add	r3,r3,r3
811017f4:	10c7883a 	add	r3,r2,r3
811017f8:	00aaaaf4 	movhi	r2,43691
811017fc:	10aaaa84 	addi	r2,r2,-21846
81101800:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101804:	e0bfea17 	ldw	r2,-88(fp)
81101808:	10ffff84 	addi	r3,r2,-2
8110180c:	00a04534 	movhi	r2,33044
81101810:	108a6604 	addi	r2,r2,10648
81101814:	18c7883a 	add	r3,r3,r3
81101818:	18c7883a 	add	r3,r3,r3
8110181c:	10c7883a 	add	r3,r2,r3
81101820:	00955574 	movhi	r2,21845
81101824:	10955544 	addi	r2,r2,21845
81101828:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
8110182c:	e0bfea17 	ldw	r2,-88(fp)
81101830:	10ffff44 	addi	r3,r2,-3
81101834:	00a04534 	movhi	r2,33044
81101838:	108a6604 	addi	r2,r2,10648
8110183c:	18c7883a 	add	r3,r3,r3
81101840:	18c7883a 	add	r3,r3,r3
81101844:	10c5883a 	add	r2,r2,r3
81101848:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
8110184c:	e0bfea17 	ldw	r2,-88(fp)
81101850:	10ffff04 	addi	r3,r2,-4
81101854:	00a04534 	movhi	r2,33044
81101858:	108a6604 	addi	r2,r2,10648
8110185c:	18c7883a 	add	r3,r3,r3
81101860:	18c7883a 	add	r3,r3,r3
81101864:	10c5883a 	add	r2,r2,r3
81101868:	00ffffc4 	movi	r3,-1
8110186c:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
81101870:	00e04534 	movhi	r3,33044
81101874:	18ca2604 	addi	r3,r3,10392
81101878:	00a04534 	movhi	r2,33044
8110187c:	10b4e404 	addi	r2,r2,-11376
81101880:	1009883a 	mov	r4,r2
81101884:	00800444 	movi	r2,17
81101888:	100d883a 	mov	r6,r2
8110188c:	200b883a 	mov	r5,r4
81101890:	1809883a 	mov	r4,r3
81101894:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
81101898:	d0a04f17 	ldw	r2,-32452(gp)
8110189c:	01604534 	movhi	r5,33044
811018a0:	294a2604 	addi	r5,r5,10392
811018a4:	1009883a 	mov	r4,r2
811018a8:	1111dd40 	call	81111dd4 <fprintf>
811018ac:	d0a07217 	ldw	r2,-32312(gp)
#endif
	iTimeStart = alt_nticks();
811018b0:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
811018b4:	e0bfe517 	ldw	r2,-108(fp)
811018b8:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
811018bc:	00810004 	movi	r2,1024
811018c0:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
811018c4:	e0ffe817 	ldw	r3,-96(fp)
811018c8:	e0bfee17 	ldw	r2,-72(fp)
811018cc:	1885283a 	div	r2,r3,r2
811018d0:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
811018d4:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
811018d8:	00003a06 	br	811019c4 <bDdr2MemoryWriteTest+0x434>
		iNRemainedLen = uliByteLen - iNPos;
811018dc:	e0bfeb17 	ldw	r2,-84(fp)
811018e0:	e0ffe617 	ldw	r3,-104(fp)
811018e4:	1885c83a 	sub	r2,r3,r2
811018e8:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
811018ec:	e0bfe817 	ldw	r2,-96(fp)
811018f0:	e0fff217 	ldw	r3,-56(fp)
811018f4:	1880060e 	bge	r3,r2,81101910 <bDdr2MemoryWriteTest+0x380>
			iNAccessLen = iNRemainedLen;
811018f8:	e0bff217 	ldw	r2,-56(fp)
811018fc:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101900:	e0ffe817 	ldw	r3,-96(fp)
81101904:	e0bfee17 	ldw	r2,-72(fp)
81101908:	1885283a 	div	r2,r3,r2
8110190c:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
81101910:	e0bfe817 	ldw	r2,-96(fp)
81101914:	100d883a 	mov	r6,r2
81101918:	01604534 	movhi	r5,33044
8110191c:	294a6604 	addi	r5,r5,10648
81101920:	e13fe917 	ldw	r4,-92(fp)
81101924:	1112e840 	call	81112e84 <memcpy>
		pxDes += iNItemNum;
81101928:	e0bfea17 	ldw	r2,-88(fp)
8110192c:	1085883a 	add	r2,r2,r2
81101930:	1085883a 	add	r2,r2,r2
81101934:	1007883a 	mov	r3,r2
81101938:	e0bfe917 	ldw	r2,-92(fp)
8110193c:	10c5883a 	add	r2,r2,r3
81101940:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
81101944:	e0ffeb17 	ldw	r3,-84(fp)
81101948:	e0bfe817 	ldw	r2,-96(fp)
8110194c:	1885883a 	add	r2,r3,r2
81101950:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101954:	e0bfec17 	ldw	r2,-80(fp)
81101958:	10800288 	cmpgei	r2,r2,10
8110195c:	1000191e 	bne	r2,zero,811019c4 <bDdr2MemoryWriteTest+0x434>
81101960:	e0bfec17 	ldw	r2,-80(fp)
81101964:	1085883a 	add	r2,r2,r2
81101968:	1085883a 	add	r2,r2,r2
8110196c:	e0ffe504 	addi	r3,fp,-108
81101970:	1885883a 	add	r2,r3,r2
81101974:	10800e04 	addi	r2,r2,56
81101978:	10800017 	ldw	r2,0(r2)
8110197c:	e0ffeb17 	ldw	r3,-84(fp)
81101980:	18801036 	bltu	r3,r2,811019c4 <bDdr2MemoryWriteTest+0x434>
			iNProgressIndex++;
81101984:	e0bfec17 	ldw	r2,-80(fp)
81101988:	10800044 	addi	r2,r2,1
8110198c:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101990:	e0bfec17 	ldw	r2,-80(fp)
81101994:	108002a4 	muli	r2,r2,10
81101998:	100d883a 	mov	r6,r2
8110199c:	01604534 	movhi	r5,33044
811019a0:	2974e904 	addi	r5,r5,-11356
811019a4:	01204534 	movhi	r4,33044
811019a8:	210a2604 	addi	r4,r4,10392
811019ac:	11137640 	call	81113764 <sprintf>
			debug(fp, cDebugBuffer);
811019b0:	d0a04f17 	ldw	r2,-32452(gp)
811019b4:	01604534 	movhi	r5,33044
811019b8:	294a2604 	addi	r5,r5,10392
811019bc:	1009883a 	mov	r4,r2
811019c0:	1111dd40 	call	81111dd4 <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
811019c4:	e0ffeb17 	ldw	r3,-84(fp)
811019c8:	e0bfe617 	ldw	r2,-104(fp)
811019cc:	18bfc336 	bltu	r3,r2,811018dc <__reset+0xfb0e18dc>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
811019d0:	11278840 	call	81127884 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811019d4:	00a04534 	movhi	r2,33044
811019d8:	108a2604 	addi	r2,r2,10392
811019dc:	00c00284 	movi	r3,10
811019e0:	10c00005 	stb	r3,0(r2)
811019e4:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811019e8:	d0a04f17 	ldw	r2,-32452(gp)
811019ec:	01604534 	movhi	r5,33044
811019f0:	294a2604 	addi	r5,r5,10392
811019f4:	1009883a 	mov	r4,r2
811019f8:	1111dd40 	call	81111dd4 <fprintf>
811019fc:	d0e07217 	ldw	r3,-32312(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101a00:	e0bff117 	ldw	r2,-60(fp)
81101a04:	1885c83a 	sub	r2,r3,r2
81101a08:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
81101a0c:	e0bfed17 	ldw	r2,-76(fp)
81101a10:	10001e26 	beq	r2,zero,81101a8c <bDdr2MemoryWriteTest+0x4fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101a14:	e13fef17 	ldw	r4,-68(fp)
81101a18:	11110100 	call	81111010 <__floatsisf>
81101a1c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101a20:	d0a07117 	ldw	r2,-32316(gp)
81101a24:	1009883a 	mov	r4,r2
81101a28:	111113c0 	call	8111113c <__floatunsisf>
81101a2c:	1007883a 	mov	r3,r2
81101a30:	180b883a 	mov	r5,r3
81101a34:	8009883a 	mov	r4,r16
81101a38:	11107c40 	call	811107c4 <__divsf3>
81101a3c:	1007883a 	mov	r3,r2
81101a40:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101a44:	1009883a 	mov	r4,r2
81101a48:	11119540 	call	81111954 <__extendsfdf2>
81101a4c:	1009883a 	mov	r4,r2
81101a50:	180b883a 	mov	r5,r3
81101a54:	d9400015 	stw	r5,0(sp)
81101a58:	200f883a 	mov	r7,r4
81101a5c:	e1bfe617 	ldw	r6,-104(fp)
81101a60:	01604534 	movhi	r5,33044
81101a64:	2974eb04 	addi	r5,r5,-11348
81101a68:	01204534 	movhi	r4,33044
81101a6c:	210a2604 	addi	r4,r4,10392
81101a70:	11137640 	call	81113764 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101a74:	d0a04f17 	ldw	r2,-32452(gp)
81101a78:	01604534 	movhi	r5,33044
81101a7c:	294a2604 	addi	r5,r5,10392
81101a80:	1009883a 	mov	r4,r2
81101a84:	1111dd40 	call	81111dd4 <fprintf>
81101a88:	00000f06 	br	81101ac8 <bDdr2MemoryWriteTest+0x538>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81101a8c:	00e04534 	movhi	r3,33044
81101a90:	18ca2604 	addi	r3,r3,10392
81101a94:	00a04534 	movhi	r2,33044
81101a98:	10b4f704 	addi	r2,r2,-11300
81101a9c:	1009883a 	mov	r4,r2
81101aa0:	00800584 	movi	r2,22
81101aa4:	100d883a 	mov	r6,r2
81101aa8:	200b883a 	mov	r5,r4
81101aac:	1809883a 	mov	r4,r3
81101ab0:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
81101ab4:	d0a04f17 	ldw	r2,-32452(gp)
81101ab8:	01604534 	movhi	r5,33044
81101abc:	294a2604 	addi	r5,r5,10392
81101ac0:	1009883a 	mov	r4,r2
81101ac4:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101ac8:	00a04534 	movhi	r2,33044
81101acc:	108a2604 	addi	r2,r2,10392
81101ad0:	00c00284 	movi	r3,10
81101ad4:	10c00005 	stb	r3,0(r2)
81101ad8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101adc:	d0a04f17 	ldw	r2,-32452(gp)
81101ae0:	01604534 	movhi	r5,33044
81101ae4:	294a2604 	addi	r5,r5,10392
81101ae8:	1009883a 	mov	r4,r2
81101aec:	1111dd40 	call	81111dd4 <fprintf>
#endif

	return bSuccess;
81101af0:	e0bfed17 	ldw	r2,-76(fp)
}
81101af4:	e6fffe04 	addi	sp,fp,-8
81101af8:	dfc00317 	ldw	ra,12(sp)
81101afc:	df000217 	ldw	fp,8(sp)
81101b00:	dc400117 	ldw	r17,4(sp)
81101b04:	dc000017 	ldw	r16,0(sp)
81101b08:	dec00404 	addi	sp,sp,16
81101b0c:	f800283a 	ret

81101b10 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101b10:	deffe204 	addi	sp,sp,-120
81101b14:	de00012e 	bgeu	sp,et,81101b1c <bDdr2MemoryReadTest+0xc>
81101b18:	003b68fa 	trap	3
81101b1c:	dfc01d15 	stw	ra,116(sp)
81101b20:	df001c15 	stw	fp,112(sp)
81101b24:	dc401b15 	stw	r17,108(sp)
81101b28:	dc001a15 	stw	r16,104(sp)
81101b2c:	df001c04 	addi	fp,sp,112
81101b30:	2005883a 	mov	r2,r4
81101b34:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101b38:	00e04534 	movhi	r3,33044
81101b3c:	18ca2604 	addi	r3,r3,10392
81101b40:	00a04534 	movhi	r2,33044
81101b44:	10b4fd04 	addi	r2,r2,-11276
81101b48:	1009883a 	mov	r4,r2
81101b4c:	008009c4 	movi	r2,39
81101b50:	100d883a 	mov	r6,r2
81101b54:	200b883a 	mov	r5,r4
81101b58:	1809883a 	mov	r4,r3
81101b5c:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
81101b60:	d0a04f17 	ldw	r2,-32452(gp)
81101b64:	01604534 	movhi	r5,33044
81101b68:	294a2604 	addi	r5,r5,10392
81101b6c:	1009883a 	mov	r4,r2
81101b70:	1111dd40 	call	81111dd4 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101b74:	00800044 	movi	r2,1
81101b78:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101b7c:	e0bffd03 	ldbu	r2,-12(fp)
81101b80:	10c00060 	cmpeqi	r3,r2,1
81101b84:	1800031e 	bne	r3,zero,81101b94 <bDdr2MemoryReadTest+0x84>
81101b88:	108000a0 	cmpeqi	r2,r2,2
81101b8c:	1000081e 	bne	r2,zero,81101bb0 <bDdr2MemoryReadTest+0xa0>
81101b90:	00000e06 	br	81101bcc <bDdr2MemoryReadTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b94:	e0bffd03 	ldbu	r2,-12(fp)
81101b98:	1009883a 	mov	r4,r2
81101b9c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101ba0:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101ba4:	00a00034 	movhi	r2,32768
81101ba8:	e0bfe715 	stw	r2,-100(fp)
		break;
81101bac:	00001906 	br	81101c14 <bDdr2MemoryReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101bb0:	e0bffd03 	ldbu	r2,-12(fp)
81101bb4:	1009883a 	mov	r4,r2
81101bb8:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101bbc:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101bc0:	00a00034 	movhi	r2,32768
81101bc4:	e0bfe715 	stw	r2,-100(fp)
		break;
81101bc8:	00001206 	br	81101c14 <bDdr2MemoryReadTest+0x104>
	default:
		bSuccess = FALSE;
81101bcc:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101bd0:	00e04534 	movhi	r3,33044
81101bd4:	18ca2604 	addi	r3,r3,10392
81101bd8:	00a04534 	movhi	r2,33044
81101bdc:	10b2e504 	addi	r2,r2,-13420
81101be0:	1009883a 	mov	r4,r2
81101be4:	00800bc4 	movi	r2,47
81101be8:	100d883a 	mov	r6,r2
81101bec:	200b883a 	mov	r5,r4
81101bf0:	1809883a 	mov	r4,r3
81101bf4:	1112e840 	call	81112e84 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101bf8:	d0a04f17 	ldw	r2,-32452(gp)
81101bfc:	01604534 	movhi	r5,33044
81101c00:	294a2604 	addi	r5,r5,10392
81101c04:	1009883a 	mov	r4,r2
81101c08:	1111dd40 	call	81111dd4 <fprintf>
		;
#endif
		return bSuccess;
81101c0c:	e0bfe517 	ldw	r2,-108(fp)
81101c10:	0000fc06 	br	81102004 <bDdr2MemoryReadTest+0x4f4>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101c14:	e0bfe717 	ldw	r2,-100(fp)
81101c18:	1004d53a 	srli	r2,r2,20
81101c1c:	100d883a 	mov	r6,r2
81101c20:	01604534 	movhi	r5,33044
81101c24:	29750704 	addi	r5,r5,-11236
81101c28:	01204534 	movhi	r4,33044
81101c2c:	210a2604 	addi	r4,r4,10392
81101c30:	11137640 	call	81113764 <sprintf>
	debug(fp, cDebugBuffer);
81101c34:	d0a04f17 	ldw	r2,-32452(gp)
81101c38:	01604534 	movhi	r5,33044
81101c3c:	294a2604 	addi	r5,r5,10392
81101c40:	1009883a 	mov	r4,r2
81101c44:	1111dd40 	call	81111dd4 <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101c48:	00804004 	movi	r2,256
81101c4c:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101c50:	00800104 	movi	r2,4
81101c54:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101c58:	e0ffec17 	ldw	r3,-80(fp)
81101c5c:	e0bfef17 	ldw	r2,-68(fp)
81101c60:	1885383a 	mul	r2,r3,r2
81101c64:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101c68:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101c6c:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101c70:	e03fe815 	stw	zero,-96(fp)
81101c74:	00001506 	br	81101ccc <bDdr2MemoryReadTest+0x1bc>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101c78:	e0ffe717 	ldw	r3,-100(fp)
81101c7c:	00b33374 	movhi	r2,52429
81101c80:	10b33344 	addi	r2,r2,-13107
81101c84:	1888383a 	mulxuu	r4,r3,r2
81101c88:	1885383a 	mul	r2,r3,r2
81101c8c:	1021883a 	mov	r16,r2
81101c90:	2023883a 	mov	r17,r4
81101c94:	8804d0fa 	srli	r2,r17,3
81101c98:	e0ffe817 	ldw	r3,-96(fp)
81101c9c:	18c00044 	addi	r3,r3,1
81101ca0:	10c7383a 	mul	r3,r2,r3
81101ca4:	e0bfe817 	ldw	r2,-96(fp)
81101ca8:	1085883a 	add	r2,r2,r2
81101cac:	1085883a 	add	r2,r2,r2
81101cb0:	e13fe504 	addi	r4,fp,-108
81101cb4:	2085883a 	add	r2,r4,r2
81101cb8:	10800e04 	addi	r2,r2,56
81101cbc:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101cc0:	e0bfe817 	ldw	r2,-96(fp)
81101cc4:	10800044 	addi	r2,r2,1
81101cc8:	e0bfe815 	stw	r2,-96(fp)
81101ccc:	e0bfe817 	ldw	r2,-96(fp)
81101cd0:	10800290 	cmplti	r2,r2,10
81101cd4:	103fe81e 	bne	r2,zero,81101c78 <__reset+0xfb0e1c78>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101cd8:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101cdc:	00e04534 	movhi	r3,33044
81101ce0:	18ca2604 	addi	r3,r3,10392
81101ce4:	00a04534 	movhi	r2,33044
81101ce8:	10b50d04 	addi	r2,r2,-11212
81101cec:	1009883a 	mov	r4,r2
81101cf0:	008006c4 	movi	r2,27
81101cf4:	100d883a 	mov	r6,r2
81101cf8:	200b883a 	mov	r5,r4
81101cfc:	1809883a 	mov	r4,r3
81101d00:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
81101d04:	d0a04f17 	ldw	r2,-32452(gp)
81101d08:	01604534 	movhi	r5,33044
81101d0c:	294a2604 	addi	r5,r5,10392
81101d10:	1009883a 	mov	r4,r2
81101d14:	1111dd40 	call	81111dd4 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101d18:	d0a07217 	ldw	r2,-32312(gp)
#endif
	iTimeStart = alt_nticks();
81101d1c:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101d20:	e0bfe617 	ldw	r2,-104(fp)
81101d24:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101d28:	00810004 	movi	r2,1024
81101d2c:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101d30:	e0ffe917 	ldw	r3,-92(fp)
81101d34:	e0bfef17 	ldw	r2,-68(fp)
81101d38:	1885283a 	div	r2,r3,r2
81101d3c:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101d40:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101d44:	00006206 	br	81101ed0 <bDdr2MemoryReadTest+0x3c0>
		iNRemainedLen = uliByteLen - iNPos;
81101d48:	e0bfed17 	ldw	r2,-76(fp)
81101d4c:	e0ffe717 	ldw	r3,-100(fp)
81101d50:	1885c83a 	sub	r2,r3,r2
81101d54:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101d58:	e0bfe917 	ldw	r2,-92(fp)
81101d5c:	e0fff217 	ldw	r3,-56(fp)
81101d60:	1880060e 	bge	r3,r2,81101d7c <bDdr2MemoryReadTest+0x26c>
			iNAccessLen = iNRemainedLen;
81101d64:	e0bff217 	ldw	r2,-56(fp)
81101d68:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101d6c:	e0ffe917 	ldw	r3,-92(fp)
81101d70:	e0bfef17 	ldw	r2,-68(fp)
81101d74:	1885283a 	div	r2,r3,r2
81101d78:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101d7c:	00a04534 	movhi	r2,33044
81101d80:	108a6604 	addi	r2,r2,10648
81101d84:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d88:	e03fe815 	stw	zero,-96(fp)
81101d8c:	00002b06 	br	81101e3c <bDdr2MemoryReadTest+0x32c>
			if (*pxSrc++ != *pxDes++) {
81101d90:	e0bfeb17 	ldw	r2,-84(fp)
81101d94:	10c00104 	addi	r3,r2,4
81101d98:	e0ffeb15 	stw	r3,-84(fp)
81101d9c:	10c00017 	ldw	r3,0(r2)
81101da0:	e0bfea17 	ldw	r2,-88(fp)
81101da4:	11000104 	addi	r4,r2,4
81101da8:	e13fea15 	stw	r4,-88(fp)
81101dac:	10800017 	ldw	r2,0(r2)
81101db0:	18801f26 	beq	r3,r2,81101e30 <bDdr2MemoryReadTest+0x320>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101db4:	e0bfeb17 	ldw	r2,-84(fp)
81101db8:	10bfff04 	addi	r2,r2,-4
81101dbc:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101dc0:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101dc4:	00a04534 	movhi	r2,33044
81101dc8:	108a6604 	addi	r2,r2,10648
81101dcc:	e0ffe817 	ldw	r3,-96(fp)
81101dd0:	18c7883a 	add	r3,r3,r3
81101dd4:	18c7883a 	add	r3,r3,r3
81101dd8:	10c5883a 	add	r2,r2,r3
81101ddc:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101de0:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101de4:	e0ffed17 	ldw	r3,-76(fp)
81101de8:	e0bfef17 	ldw	r2,-68(fp)
81101dec:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101df0:	e0bfe817 	ldw	r2,-96(fp)
81101df4:	1885883a 	add	r2,r3,r2
81101df8:	d8800015 	stw	r2,0(sp)
81101dfc:	280f883a 	mov	r7,r5
81101e00:	200d883a 	mov	r6,r4
81101e04:	01604534 	movhi	r5,33044
81101e08:	29751404 	addi	r5,r5,-11184
81101e0c:	01204534 	movhi	r4,33044
81101e10:	210a2604 	addi	r4,r4,10392
81101e14:	11137640 	call	81113764 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101e18:	d0a04f17 	ldw	r2,-32452(gp)
81101e1c:	01604534 	movhi	r5,33044
81101e20:	294a2604 	addi	r5,r5,10392
81101e24:	1009883a 	mov	r4,r2
81101e28:	1111dd40 	call	81111dd4 <fprintf>
#endif
				bSuccess = FALSE;
81101e2c:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101e30:	e0bfe817 	ldw	r2,-96(fp)
81101e34:	10800044 	addi	r2,r2,1
81101e38:	e0bfe815 	stw	r2,-96(fp)
81101e3c:	e0ffe817 	ldw	r3,-96(fp)
81101e40:	e0bfec17 	ldw	r2,-80(fp)
81101e44:	1880020e 	bge	r3,r2,81101e50 <bDdr2MemoryReadTest+0x340>
81101e48:	e0bfe517 	ldw	r2,-108(fp)
81101e4c:	103fd01e 	bne	r2,zero,81101d90 <__reset+0xfb0e1d90>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101e50:	e0ffed17 	ldw	r3,-76(fp)
81101e54:	e0bfe917 	ldw	r2,-92(fp)
81101e58:	1885883a 	add	r2,r3,r2
81101e5c:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101e60:	e0bfee17 	ldw	r2,-72(fp)
81101e64:	10800288 	cmpgei	r2,r2,10
81101e68:	1000191e 	bne	r2,zero,81101ed0 <bDdr2MemoryReadTest+0x3c0>
81101e6c:	e0bfee17 	ldw	r2,-72(fp)
81101e70:	1085883a 	add	r2,r2,r2
81101e74:	1085883a 	add	r2,r2,r2
81101e78:	e0ffe504 	addi	r3,fp,-108
81101e7c:	1885883a 	add	r2,r3,r2
81101e80:	10800e04 	addi	r2,r2,56
81101e84:	10800017 	ldw	r2,0(r2)
81101e88:	e0ffed17 	ldw	r3,-76(fp)
81101e8c:	18801036 	bltu	r3,r2,81101ed0 <bDdr2MemoryReadTest+0x3c0>
			iNProgressIndex++;
81101e90:	e0bfee17 	ldw	r2,-72(fp)
81101e94:	10800044 	addi	r2,r2,1
81101e98:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101e9c:	e0bfee17 	ldw	r2,-72(fp)
81101ea0:	108002a4 	muli	r2,r2,10
81101ea4:	100d883a 	mov	r6,r2
81101ea8:	01604534 	movhi	r5,33044
81101eac:	2974e904 	addi	r5,r5,-11356
81101eb0:	01204534 	movhi	r4,33044
81101eb4:	210a2604 	addi	r4,r4,10392
81101eb8:	11137640 	call	81113764 <sprintf>
			debug(fp, cDebugBuffer);
81101ebc:	d0a04f17 	ldw	r2,-32452(gp)
81101ec0:	01604534 	movhi	r5,33044
81101ec4:	294a2604 	addi	r5,r5,10392
81101ec8:	1009883a 	mov	r4,r2
81101ecc:	1111dd40 	call	81111dd4 <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101ed0:	e0bfe517 	ldw	r2,-108(fp)
81101ed4:	10000326 	beq	r2,zero,81101ee4 <bDdr2MemoryReadTest+0x3d4>
81101ed8:	e0ffed17 	ldw	r3,-76(fp)
81101edc:	e0bfe717 	ldw	r2,-100(fp)
81101ee0:	18bf9936 	bltu	r3,r2,81101d48 <__reset+0xfb0e1d48>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101ee4:	00a04534 	movhi	r2,33044
81101ee8:	108a2604 	addi	r2,r2,10392
81101eec:	00c00284 	movi	r3,10
81101ef0:	10c00005 	stb	r3,0(r2)
81101ef4:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101ef8:	d0a04f17 	ldw	r2,-32452(gp)
81101efc:	01604534 	movhi	r5,33044
81101f00:	294a2604 	addi	r5,r5,10392
81101f04:	1009883a 	mov	r4,r2
81101f08:	1111dd40 	call	81111dd4 <fprintf>
81101f0c:	d0e07217 	ldw	r3,-32312(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101f10:	e0bff117 	ldw	r2,-60(fp)
81101f14:	1885c83a 	sub	r2,r3,r2
81101f18:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101f1c:	e0bfe517 	ldw	r2,-108(fp)
81101f20:	10001e26 	beq	r2,zero,81101f9c <bDdr2MemoryReadTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101f24:	e13ff017 	ldw	r4,-64(fp)
81101f28:	11110100 	call	81111010 <__floatsisf>
81101f2c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101f30:	d0a07117 	ldw	r2,-32316(gp)
81101f34:	1009883a 	mov	r4,r2
81101f38:	111113c0 	call	8111113c <__floatunsisf>
81101f3c:	1007883a 	mov	r3,r2
81101f40:	180b883a 	mov	r5,r3
81101f44:	8009883a 	mov	r4,r16
81101f48:	11107c40 	call	811107c4 <__divsf3>
81101f4c:	1007883a 	mov	r3,r2
81101f50:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101f54:	1009883a 	mov	r4,r2
81101f58:	11119540 	call	81111954 <__extendsfdf2>
81101f5c:	1009883a 	mov	r4,r2
81101f60:	180b883a 	mov	r5,r3
81101f64:	d9400015 	stw	r5,0(sp)
81101f68:	200f883a 	mov	r7,r4
81101f6c:	e1bfe717 	ldw	r6,-100(fp)
81101f70:	01604534 	movhi	r5,33044
81101f74:	29752204 	addi	r5,r5,-11128
81101f78:	01204534 	movhi	r4,33044
81101f7c:	210a2604 	addi	r4,r4,10392
81101f80:	11137640 	call	81113764 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101f84:	d0a04f17 	ldw	r2,-32452(gp)
81101f88:	01604534 	movhi	r5,33044
81101f8c:	294a2604 	addi	r5,r5,10392
81101f90:	1009883a 	mov	r4,r2
81101f94:	1111dd40 	call	81111dd4 <fprintf>
81101f98:	00000f06 	br	81101fd8 <bDdr2MemoryReadTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101f9c:	00e04534 	movhi	r3,33044
81101fa0:	18ca2604 	addi	r3,r3,10392
81101fa4:	00a04534 	movhi	r2,33044
81101fa8:	10b52e04 	addi	r2,r2,-11080
81101fac:	1009883a 	mov	r4,r2
81101fb0:	00800544 	movi	r2,21
81101fb4:	100d883a 	mov	r6,r2
81101fb8:	200b883a 	mov	r5,r4
81101fbc:	1809883a 	mov	r4,r3
81101fc0:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
81101fc4:	d0a04f17 	ldw	r2,-32452(gp)
81101fc8:	01604534 	movhi	r5,33044
81101fcc:	294a2604 	addi	r5,r5,10392
81101fd0:	1009883a 	mov	r4,r2
81101fd4:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101fd8:	00a04534 	movhi	r2,33044
81101fdc:	108a2604 	addi	r2,r2,10392
81101fe0:	00c00284 	movi	r3,10
81101fe4:	10c00005 	stb	r3,0(r2)
81101fe8:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101fec:	d0a04f17 	ldw	r2,-32452(gp)
81101ff0:	01604534 	movhi	r5,33044
81101ff4:	294a2604 	addi	r5,r5,10392
81101ff8:	1009883a 	mov	r4,r2
81101ffc:	1111dd40 	call	81111dd4 <fprintf>
#endif

	return bSuccess;
81102000:	e0bfe517 	ldw	r2,-108(fp)
}
81102004:	e6fffe04 	addi	sp,fp,-8
81102008:	dfc00317 	ldw	ra,12(sp)
8110200c:	df000217 	ldw	fp,8(sp)
81102010:	dc400117 	ldw	r17,4(sp)
81102014:	dc000017 	ldw	r16,0(sp)
81102018:	dec00404 	addi	sp,sp,16
8110201c:	f800283a 	ret

81102020 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102020:	deffec04 	addi	sp,sp,-80
81102024:	de00012e 	bgeu	sp,et,8110202c <bDdr2MemoryRandomWriteTest+0xc>
81102028:	003b68fa 	trap	3
8110202c:	dfc01315 	stw	ra,76(sp)
81102030:	df001215 	stw	fp,72(sp)
81102034:	dcc01115 	stw	r19,68(sp)
81102038:	dc801015 	stw	r18,64(sp)
8110203c:	dc400f15 	stw	r17,60(sp)
81102040:	dc000e15 	stw	r16,56(sp)
81102044:	df001204 	addi	fp,sp,72
81102048:	2005883a 	mov	r2,r4
8110204c:	e17ffa15 	stw	r5,-24(fp)
81102050:	e1bffb15 	stw	r6,-20(fp)
81102054:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81102058:	00e04534 	movhi	r3,33044
8110205c:	18ca2604 	addi	r3,r3,10392
81102060:	00a04534 	movhi	r2,33044
81102064:	10b53404 	addi	r2,r2,-11056
81102068:	1009883a 	mov	r4,r2
8110206c:	00800bc4 	movi	r2,47
81102070:	100d883a 	mov	r6,r2
81102074:	200b883a 	mov	r5,r4
81102078:	1809883a 	mov	r4,r3
8110207c:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
81102080:	d0a04f17 	ldw	r2,-32452(gp)
81102084:	01604534 	movhi	r5,33044
81102088:	294a2604 	addi	r5,r5,10392
8110208c:	1009883a 	mov	r4,r2
81102090:	1111dd40 	call	81111dd4 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102094:	00800044 	movi	r2,1
81102098:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
8110209c:	e0bff903 	ldbu	r2,-28(fp)
811020a0:	10c00060 	cmpeqi	r3,r2,1
811020a4:	1800031e 	bne	r3,zero,811020b4 <bDdr2MemoryRandomWriteTest+0x94>
811020a8:	108000a0 	cmpeqi	r2,r2,2
811020ac:	1000081e 	bne	r2,zero,811020d0 <bDdr2MemoryRandomWriteTest+0xb0>
811020b0:	00000e06 	br	811020ec <bDdr2MemoryRandomWriteTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811020b4:	e0bff903 	ldbu	r2,-28(fp)
811020b8:	1009883a 	mov	r4,r2
811020bc:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811020c0:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811020c4:	00a00034 	movhi	r2,32768
811020c8:	e0bff015 	stw	r2,-64(fp)
		break;
811020cc:	00001906 	br	81102134 <bDdr2MemoryRandomWriteTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811020d0:	e0bff903 	ldbu	r2,-28(fp)
811020d4:	1009883a 	mov	r4,r2
811020d8:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811020dc:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811020e0:	00a00034 	movhi	r2,32768
811020e4:	e0bff015 	stw	r2,-64(fp)
		break;
811020e8:	00001206 	br	81102134 <bDdr2MemoryRandomWriteTest+0x114>
	default:
		bSuccess = FALSE;
811020ec:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811020f0:	00e04534 	movhi	r3,33044
811020f4:	18ca2604 	addi	r3,r3,10392
811020f8:	00a04534 	movhi	r2,33044
811020fc:	10b2e504 	addi	r2,r2,-13420
81102100:	1009883a 	mov	r4,r2
81102104:	00800bc4 	movi	r2,47
81102108:	100d883a 	mov	r6,r2
8110210c:	200b883a 	mov	r5,r4
81102110:	1809883a 	mov	r4,r3
81102114:	1112e840 	call	81112e84 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102118:	d0a04f17 	ldw	r2,-32452(gp)
8110211c:	01604534 	movhi	r5,33044
81102120:	294a2604 	addi	r5,r5,10392
81102124:	1009883a 	mov	r4,r2
81102128:	1111dd40 	call	81111dd4 <fprintf>
		;
#endif
		return bSuccess;
8110212c:	e0bff417 	ldw	r2,-48(fp)
81102130:	0000ce06 	br	8110246c <bDdr2MemoryRandomWriteTest+0x44c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102134:	e0bff017 	ldw	r2,-64(fp)
81102138:	1004d53a 	srli	r2,r2,20
8110213c:	100d883a 	mov	r6,r2
81102140:	01604534 	movhi	r5,33044
81102144:	2974de04 	addi	r5,r5,-11400
81102148:	01204534 	movhi	r4,33044
8110214c:	210a2604 	addi	r4,r4,10392
81102150:	11137640 	call	81113764 <sprintf>
	debug(fp, cDebugBuffer);
81102154:	d0a04f17 	ldw	r2,-32452(gp)
81102158:	01604534 	movhi	r5,33044
8110215c:	294a2604 	addi	r5,r5,10392
81102160:	1009883a 	mov	r4,r2
81102164:	1111dd40 	call	81111dd4 <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102168:	d0a07217 	ldw	r2,-32312(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
8110216c:	d0a03715 	stw	r2,-32548(gp)
	uliCurrentState = uliInitialState;
81102170:	d0a03717 	ldw	r2,-32548(gp)
81102174:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102178:	e0ffef17 	ldw	r3,-68(fp)
8110217c:	e0bff017 	ldw	r2,-64(fp)
81102180:	1885883a 	add	r2,r3,r2
81102184:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102188:	e0fff017 	ldw	r3,-64(fp)
8110218c:	00b33374 	movhi	r2,52429
81102190:	10b33344 	addi	r2,r2,-13107
81102194:	1888383a 	mulxuu	r4,r3,r2
81102198:	1885383a 	mul	r2,r3,r2
8110219c:	1025883a 	mov	r18,r2
811021a0:	2027883a 	mov	r19,r4
811021a4:	9806d13a 	srli	r3,r19,4
811021a8:	e0bfef17 	ldw	r2,-68(fp)
811021ac:	1885883a 	add	r2,r3,r2
811021b0:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
811021b4:	00800144 	movi	r2,5
811021b8:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
811021bc:	00e04534 	movhi	r3,33044
811021c0:	18ca2604 	addi	r3,r3,10392
811021c4:	00a04534 	movhi	r2,33044
811021c8:	10b54004 	addi	r2,r2,-11008
811021cc:	1009883a 	mov	r4,r2
811021d0:	00800584 	movi	r2,22
811021d4:	100d883a 	mov	r6,r2
811021d8:	200b883a 	mov	r5,r4
811021dc:	1809883a 	mov	r4,r3
811021e0:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
811021e4:	d0a04f17 	ldw	r2,-32452(gp)
811021e8:	01604534 	movhi	r5,33044
811021ec:	294a2604 	addi	r5,r5,10392
811021f0:	1009883a 	mov	r4,r2
811021f4:	1111dd40 	call	81111dd4 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
811021f8:	e0bffa17 	ldw	r2,-24(fp)
811021fc:	10800058 	cmpnei	r2,r2,1
81102200:	10000a1e 	bne	r2,zero,8110222c <bDdr2MemoryRandomWriteTest+0x20c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102204:	01604534 	movhi	r5,33044
81102208:	29754604 	addi	r5,r5,-10984
8110220c:	01204534 	movhi	r4,33044
81102210:	210a2604 	addi	r4,r4,10392
81102214:	11137640 	call	81113764 <sprintf>
		debug(fp, cDebugBuffer);
81102218:	d0a04f17 	ldw	r2,-32452(gp)
8110221c:	01604534 	movhi	r5,33044
81102220:	294a2604 	addi	r5,r5,10392
81102224:	1009883a 	mov	r4,r2
81102228:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
8110222c:	e03ff615 	stw	zero,-40(fp)
81102230:	d0a07217 	ldw	r2,-32312(gp)

	TimeStart = alt_nticks();
81102234:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102238:	e0bfef17 	ldw	r2,-68(fp)
8110223c:	e0bff115 	stw	r2,-60(fp)
81102240:	00002c06 	br	811022f4 <bDdr2MemoryRandomWriteTest+0x2d4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
81102244:	e0bff804 	addi	r2,fp,-32
81102248:	1009883a 	mov	r4,r2
8110224c:	110292c0 	call	8110292c <uliXorshift32>
81102250:	1007883a 	mov	r3,r2
81102254:	e0bff117 	ldw	r2,-60(fp)
81102258:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
8110225c:	e0bffa17 	ldw	r2,-24(fp)
81102260:	10800060 	cmpeqi	r2,r2,1
81102264:	1009883a 	mov	r4,r2
81102268:	e0bff117 	ldw	r2,-60(fp)
8110226c:	e0fff217 	ldw	r3,-56(fp)
81102270:	1885803a 	cmpltu	r2,r3,r2
81102274:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
81102278:	10803fcc 	andi	r2,r2,255
8110227c:	10001a26 	beq	r2,zero,811022e8 <bDdr2MemoryRandomWriteTest+0x2c8>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102280:	e0bff303 	ldbu	r2,-52(fp)
81102284:	100d883a 	mov	r6,r2
81102288:	01604534 	movhi	r5,33044
8110228c:	29754804 	addi	r5,r5,-10976
81102290:	01204534 	movhi	r4,33044
81102294:	210a2604 	addi	r4,r4,10392
81102298:	11137640 	call	81113764 <sprintf>
			debug(fp, cDebugBuffer);
8110229c:	d0a04f17 	ldw	r2,-32452(gp)
811022a0:	01604534 	movhi	r5,33044
811022a4:	294a2604 	addi	r5,r5,10392
811022a8:	1009883a 	mov	r4,r2
811022ac:	1111dd40 	call	81111dd4 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811022b0:	e0fff017 	ldw	r3,-64(fp)
811022b4:	00b33374 	movhi	r2,52429
811022b8:	10b33344 	addi	r2,r2,-13107
811022bc:	1888383a 	mulxuu	r4,r3,r2
811022c0:	1885383a 	mul	r2,r3,r2
811022c4:	1021883a 	mov	r16,r2
811022c8:	2023883a 	mov	r17,r4
811022cc:	8804d13a 	srli	r2,r17,4
811022d0:	e0fff217 	ldw	r3,-56(fp)
811022d4:	1885883a 	add	r2,r3,r2
811022d8:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
811022dc:	e0bff303 	ldbu	r2,-52(fp)
811022e0:	10800144 	addi	r2,r2,5
811022e4:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
811022e8:	e0bff117 	ldw	r2,-60(fp)
811022ec:	10800104 	addi	r2,r2,4
811022f0:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
811022f4:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
811022f8:	e0bff517 	ldw	r2,-44(fp)
811022fc:	18bfd136 	bltu	r3,r2,81102244 <__reset+0xfb0e2244>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102300:	11278840 	call	81127884 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102304:	e0bffa17 	ldw	r2,-24(fp)
81102308:	10800058 	cmpnei	r2,r2,1
8110230c:	10000a1e 	bne	r2,zero,81102338 <bDdr2MemoryRandomWriteTest+0x318>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
81102310:	01604534 	movhi	r5,33044
81102314:	29754b04 	addi	r5,r5,-10964
81102318:	01204534 	movhi	r4,33044
8110231c:	210a2604 	addi	r4,r4,10392
81102320:	11137640 	call	81113764 <sprintf>
		debug(fp, cDebugBuffer);
81102324:	d0a04f17 	ldw	r2,-32452(gp)
81102328:	01604534 	movhi	r5,33044
8110232c:	294a2604 	addi	r5,r5,10392
81102330:	1009883a 	mov	r4,r2
81102334:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}

	if (bSuccess) {
81102338:	e0bff417 	ldw	r2,-48(fp)
8110233c:	10003126 	beq	r2,zero,81102404 <bDdr2MemoryRandomWriteTest+0x3e4>
		if (bTime == TRUE) {
81102340:	e0bffb17 	ldw	r2,-20(fp)
81102344:	10800058 	cmpnei	r2,r2,1
81102348:	1000221e 	bne	r2,zero,811023d4 <bDdr2MemoryRandomWriteTest+0x3b4>
8110234c:	d0e07217 	ldw	r3,-32312(gp)
			TimeElapsed = alt_nticks() - TimeStart;
81102350:	e0bff717 	ldw	r2,-36(fp)
81102354:	1885c83a 	sub	r2,r3,r2
81102358:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
8110235c:	e13ff617 	ldw	r4,-40(fp)
81102360:	11110100 	call	81111010 <__floatsisf>
81102364:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102368:	d0a07117 	ldw	r2,-32316(gp)
8110236c:	1009883a 	mov	r4,r2
81102370:	111113c0 	call	8111113c <__floatunsisf>
81102374:	1007883a 	mov	r3,r2
81102378:	180b883a 	mov	r5,r3
8110237c:	8009883a 	mov	r4,r16
81102380:	11107c40 	call	811107c4 <__divsf3>
81102384:	1007883a 	mov	r3,r2
81102388:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
8110238c:	1009883a 	mov	r4,r2
81102390:	11119540 	call	81111954 <__extendsfdf2>
81102394:	1009883a 	mov	r4,r2
81102398:	180b883a 	mov	r5,r3
8110239c:	d9400015 	stw	r5,0(sp)
811023a0:	200f883a 	mov	r7,r4
811023a4:	e1bff017 	ldw	r6,-64(fp)
811023a8:	01604534 	movhi	r5,33044
811023ac:	29754e04 	addi	r5,r5,-10952
811023b0:	01204534 	movhi	r4,33044
811023b4:	210a2604 	addi	r4,r4,10392
811023b8:	11137640 	call	81113764 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811023bc:	d0a04f17 	ldw	r2,-32452(gp)
811023c0:	01604534 	movhi	r5,33044
811023c4:	294a2604 	addi	r5,r5,10392
811023c8:	1009883a 	mov	r4,r2
811023cc:	1111dd40 	call	81111dd4 <fprintf>
811023d0:	00001b06 	br	81102440 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
811023d4:	e1bff017 	ldw	r6,-64(fp)
811023d8:	01604534 	movhi	r5,33044
811023dc:	29755a04 	addi	r5,r5,-10904
811023e0:	01204534 	movhi	r4,33044
811023e4:	210a2604 	addi	r4,r4,10392
811023e8:	11137640 	call	81113764 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
811023ec:	d0a04f17 	ldw	r2,-32452(gp)
811023f0:	01604534 	movhi	r5,33044
811023f4:	294a2604 	addi	r5,r5,10392
811023f8:	1009883a 	mov	r4,r2
811023fc:	1111dd40 	call	81111dd4 <fprintf>
81102400:	00000f06 	br	81102440 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102404:	00e04534 	movhi	r3,33044
81102408:	18ca2604 	addi	r3,r3,10392
8110240c:	00a04534 	movhi	r2,33044
81102410:	10b4f704 	addi	r2,r2,-11300
81102414:	1009883a 	mov	r4,r2
81102418:	00800584 	movi	r2,22
8110241c:	100d883a 	mov	r6,r2
81102420:	200b883a 	mov	r5,r4
81102424:	1809883a 	mov	r4,r3
81102428:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
8110242c:	d0a04f17 	ldw	r2,-32452(gp)
81102430:	01604534 	movhi	r5,33044
81102434:	294a2604 	addi	r5,r5,10392
81102438:	1009883a 	mov	r4,r2
8110243c:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81102440:	00a04534 	movhi	r2,33044
81102444:	108a2604 	addi	r2,r2,10392
81102448:	00c00284 	movi	r3,10
8110244c:	10c00005 	stb	r3,0(r2)
81102450:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102454:	d0a04f17 	ldw	r2,-32452(gp)
81102458:	01604534 	movhi	r5,33044
8110245c:	294a2604 	addi	r5,r5,10392
81102460:	1009883a 	mov	r4,r2
81102464:	1111dd40 	call	81111dd4 <fprintf>
#endif

	return bSuccess;
81102468:	e0bff417 	ldw	r2,-48(fp)
}
8110246c:	e6fffc04 	addi	sp,fp,-16
81102470:	dfc00517 	ldw	ra,20(sp)
81102474:	df000417 	ldw	fp,16(sp)
81102478:	dcc00317 	ldw	r19,12(sp)
8110247c:	dc800217 	ldw	r18,8(sp)
81102480:	dc400117 	ldw	r17,4(sp)
81102484:	dc000017 	ldw	r16,0(sp)
81102488:	dec00604 	addi	sp,sp,24
8110248c:	f800283a 	ret

81102490 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102490:	deffec04 	addi	sp,sp,-80
81102494:	de00012e 	bgeu	sp,et,8110249c <bDdr2MemoryRandomReadTest+0xc>
81102498:	003b68fa 	trap	3
8110249c:	dfc01315 	stw	ra,76(sp)
811024a0:	df001215 	stw	fp,72(sp)
811024a4:	dcc01115 	stw	r19,68(sp)
811024a8:	dc801015 	stw	r18,64(sp)
811024ac:	dc400f15 	stw	r17,60(sp)
811024b0:	dc000e15 	stw	r16,56(sp)
811024b4:	df001204 	addi	fp,sp,72
811024b8:	2005883a 	mov	r2,r4
811024bc:	e17ffa15 	stw	r5,-24(fp)
811024c0:	e1bffb15 	stw	r6,-20(fp)
811024c4:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
811024c8:	00e04534 	movhi	r3,33044
811024cc:	18ca2604 	addi	r3,r3,10392
811024d0:	00a04534 	movhi	r2,33044
811024d4:	10b56404 	addi	r2,r2,-10864
811024d8:	1009883a 	mov	r4,r2
811024dc:	00800b84 	movi	r2,46
811024e0:	100d883a 	mov	r6,r2
811024e4:	200b883a 	mov	r5,r4
811024e8:	1809883a 	mov	r4,r3
811024ec:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
811024f0:	d0a04f17 	ldw	r2,-32452(gp)
811024f4:	01604534 	movhi	r5,33044
811024f8:	294a2604 	addi	r5,r5,10392
811024fc:	1009883a 	mov	r4,r2
81102500:	1111dd40 	call	81111dd4 <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102504:	00800044 	movi	r2,1
81102508:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
8110250c:	e0bff903 	ldbu	r2,-28(fp)
81102510:	10c00060 	cmpeqi	r3,r2,1
81102514:	1800031e 	bne	r3,zero,81102524 <bDdr2MemoryRandomReadTest+0x94>
81102518:	108000a0 	cmpeqi	r2,r2,2
8110251c:	1000081e 	bne	r2,zero,81102540 <bDdr2MemoryRandomReadTest+0xb0>
81102520:	00000e06 	br	8110255c <bDdr2MemoryRandomReadTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102524:	e0bff903 	ldbu	r2,-28(fp)
81102528:	1009883a 	mov	r4,r2
8110252c:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102530:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102534:	00a00034 	movhi	r2,32768
81102538:	e0bff115 	stw	r2,-60(fp)
		break;
8110253c:	00001906 	br	811025a4 <bDdr2MemoryRandomReadTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102540:	e0bff903 	ldbu	r2,-28(fp)
81102544:	1009883a 	mov	r4,r2
81102548:	11014d00 	call	811014d0 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110254c:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102550:	00a00034 	movhi	r2,32768
81102554:	e0bff115 	stw	r2,-60(fp)
		break;
81102558:	00001206 	br	811025a4 <bDdr2MemoryRandomReadTest+0x114>
	default:
		bSuccess = FALSE;
8110255c:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102560:	00e04534 	movhi	r3,33044
81102564:	18ca2604 	addi	r3,r3,10392
81102568:	00a04534 	movhi	r2,33044
8110256c:	10b2e504 	addi	r2,r2,-13420
81102570:	1009883a 	mov	r4,r2
81102574:	00800bc4 	movi	r2,47
81102578:	100d883a 	mov	r6,r2
8110257c:	200b883a 	mov	r5,r4
81102580:	1809883a 	mov	r4,r3
81102584:	1112e840 	call	81112e84 <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102588:	d0a04f17 	ldw	r2,-32452(gp)
8110258c:	01604534 	movhi	r5,33044
81102590:	294a2604 	addi	r5,r5,10392
81102594:	1009883a 	mov	r4,r2
81102598:	1111dd40 	call	81111dd4 <fprintf>
		;
#endif
		return bSuccess;
8110259c:	e0bfef17 	ldw	r2,-68(fp)
811025a0:	0000d906 	br	81102908 <bDdr2MemoryRandomReadTest+0x478>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811025a4:	e0bff117 	ldw	r2,-60(fp)
811025a8:	1004d53a 	srli	r2,r2,20
811025ac:	100d883a 	mov	r6,r2
811025b0:	01604534 	movhi	r5,33044
811025b4:	2974de04 	addi	r5,r5,-11400
811025b8:	01204534 	movhi	r4,33044
811025bc:	210a2604 	addi	r4,r4,10392
811025c0:	11137640 	call	81113764 <sprintf>
	debug(fp, cDebugBuffer);
811025c4:	d0a04f17 	ldw	r2,-32452(gp)
811025c8:	01604534 	movhi	r5,33044
811025cc:	294a2604 	addi	r5,r5,10392
811025d0:	1009883a 	mov	r4,r2
811025d4:	1111dd40 	call	81111dd4 <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
811025d8:	d0a03717 	ldw	r2,-32548(gp)
811025dc:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
811025e0:	e0fff017 	ldw	r3,-64(fp)
811025e4:	e0bff117 	ldw	r2,-60(fp)
811025e8:	1885883a 	add	r2,r3,r2
811025ec:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
811025f0:	e0fff117 	ldw	r3,-60(fp)
811025f4:	00b33374 	movhi	r2,52429
811025f8:	10b33344 	addi	r2,r2,-13107
811025fc:	1888383a 	mulxuu	r4,r3,r2
81102600:	1885383a 	mul	r2,r3,r2
81102604:	1025883a 	mov	r18,r2
81102608:	2027883a 	mov	r19,r4
8110260c:	9806d13a 	srli	r3,r19,4
81102610:	e0bff017 	ldw	r2,-64(fp)
81102614:	1885883a 	add	r2,r3,r2
81102618:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
8110261c:	00800144 	movi	r2,5
81102620:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
81102624:	00e04534 	movhi	r3,33044
81102628:	18ca2604 	addi	r3,r3,10392
8110262c:	00a04534 	movhi	r2,33044
81102630:	10b57004 	addi	r2,r2,-10816
81102634:	1009883a 	mov	r4,r2
81102638:	00800604 	movi	r2,24
8110263c:	100d883a 	mov	r6,r2
81102640:	200b883a 	mov	r5,r4
81102644:	1809883a 	mov	r4,r3
81102648:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
8110264c:	d0a04f17 	ldw	r2,-32452(gp)
81102650:	01604534 	movhi	r5,33044
81102654:	294a2604 	addi	r5,r5,10392
81102658:	1009883a 	mov	r4,r2
8110265c:	1111dd40 	call	81111dd4 <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102660:	e0bffa17 	ldw	r2,-24(fp)
81102664:	10800058 	cmpnei	r2,r2,1
81102668:	10000a1e 	bne	r2,zero,81102694 <bDdr2MemoryRandomReadTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
8110266c:	01604534 	movhi	r5,33044
81102670:	29754604 	addi	r5,r5,-10984
81102674:	01204534 	movhi	r4,33044
81102678:	210a2604 	addi	r4,r4,10392
8110267c:	11137640 	call	81113764 <sprintf>
		debug(fp, cDebugBuffer);
81102680:	d0a04f17 	ldw	r2,-32452(gp)
81102684:	01604534 	movhi	r5,33044
81102688:	294a2604 	addi	r5,r5,10392
8110268c:	1009883a 	mov	r4,r2
81102690:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
81102694:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102698:	d0a07217 	ldw	r2,-32312(gp)

	TimeStart = alt_nticks();
8110269c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
811026a0:	e0bff017 	ldw	r2,-64(fp)
811026a4:	e0bff215 	stw	r2,-56(fp)
811026a8:	00003a06 	br	81102794 <bDdr2MemoryRandomReadTest+0x304>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
811026ac:	e0bff804 	addi	r2,fp,-32
811026b0:	1009883a 	mov	r4,r2
811026b4:	110292c0 	call	8110292c <uliXorshift32>
811026b8:	1007883a 	mov	r3,r2
811026bc:	e0bff217 	ldw	r2,-56(fp)
811026c0:	10800017 	ldw	r2,0(r2)
811026c4:	18801026 	beq	r3,r2,81102708 <bDdr2MemoryRandomReadTest+0x278>
			bSuccess = FALSE;
811026c8:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
811026cc:	e0bffa17 	ldw	r2,-24(fp)
811026d0:	10800058 	cmpnei	r2,r2,1
811026d4:	10000c1e 	bne	r2,zero,81102708 <bDdr2MemoryRandomReadTest+0x278>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
811026d8:	e0bff217 	ldw	r2,-56(fp)
811026dc:	100d883a 	mov	r6,r2
811026e0:	01604534 	movhi	r5,33044
811026e4:	29757604 	addi	r5,r5,-10792
811026e8:	01204534 	movhi	r4,33044
811026ec:	210a2604 	addi	r4,r4,10392
811026f0:	11137640 	call	81113764 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
811026f4:	d0a04f17 	ldw	r2,-32452(gp)
811026f8:	01604534 	movhi	r5,33044
811026fc:	294a2604 	addi	r5,r5,10392
81102700:	1009883a 	mov	r4,r2
81102704:	1111dd40 	call	81111dd4 <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102708:	e0bffa17 	ldw	r2,-24(fp)
8110270c:	10800058 	cmpnei	r2,r2,1
81102710:	10001d1e 	bne	r2,zero,81102788 <bDdr2MemoryRandomReadTest+0x2f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
81102714:	e0bff217 	ldw	r2,-56(fp)
81102718:	e0fff317 	ldw	r3,-52(fp)
8110271c:	18801a2e 	bgeu	r3,r2,81102788 <bDdr2MemoryRandomReadTest+0x2f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102720:	e0bff403 	ldbu	r2,-48(fp)
81102724:	100d883a 	mov	r6,r2
81102728:	01604534 	movhi	r5,33044
8110272c:	29754804 	addi	r5,r5,-10976
81102730:	01204534 	movhi	r4,33044
81102734:	210a2604 	addi	r4,r4,10392
81102738:	11137640 	call	81113764 <sprintf>
			debug(fp, cDebugBuffer);
8110273c:	d0a04f17 	ldw	r2,-32452(gp)
81102740:	01604534 	movhi	r5,33044
81102744:	294a2604 	addi	r5,r5,10392
81102748:	1009883a 	mov	r4,r2
8110274c:	1111dd40 	call	81111dd4 <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102750:	e0fff117 	ldw	r3,-60(fp)
81102754:	00b33374 	movhi	r2,52429
81102758:	10b33344 	addi	r2,r2,-13107
8110275c:	1888383a 	mulxuu	r4,r3,r2
81102760:	1885383a 	mul	r2,r3,r2
81102764:	1021883a 	mov	r16,r2
81102768:	2023883a 	mov	r17,r4
8110276c:	8804d13a 	srli	r2,r17,4
81102770:	e0fff317 	ldw	r3,-52(fp)
81102774:	1885883a 	add	r2,r3,r2
81102778:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110277c:	e0bff403 	ldbu	r2,-48(fp)
81102780:	10800144 	addi	r2,r2,5
81102784:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81102788:	e0bff217 	ldw	r2,-56(fp)
8110278c:	10800104 	addi	r2,r2,4
81102790:	e0bff215 	stw	r2,-56(fp)
81102794:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81102798:	e0bff517 	ldw	r2,-44(fp)
8110279c:	18bfc336 	bltu	r3,r2,811026ac <__reset+0xfb0e26ac>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
811027a0:	e0bffa17 	ldw	r2,-24(fp)
811027a4:	10800058 	cmpnei	r2,r2,1
811027a8:	10000a1e 	bne	r2,zero,811027d4 <bDdr2MemoryRandomReadTest+0x344>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811027ac:	01604534 	movhi	r5,33044
811027b0:	29754b04 	addi	r5,r5,-10964
811027b4:	01204534 	movhi	r4,33044
811027b8:	210a2604 	addi	r4,r4,10392
811027bc:	11137640 	call	81113764 <sprintf>
		debug(fp, cDebugBuffer);
811027c0:	d0a04f17 	ldw	r2,-32452(gp)
811027c4:	01604534 	movhi	r5,33044
811027c8:	294a2604 	addi	r5,r5,10392
811027cc:	1009883a 	mov	r4,r2
811027d0:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}

	if (bSuccess) {
811027d4:	e0bfef17 	ldw	r2,-68(fp)
811027d8:	10003126 	beq	r2,zero,811028a0 <bDdr2MemoryRandomReadTest+0x410>
		if (bTime == TRUE) {
811027dc:	e0bffb17 	ldw	r2,-20(fp)
811027e0:	10800058 	cmpnei	r2,r2,1
811027e4:	1000221e 	bne	r2,zero,81102870 <bDdr2MemoryRandomReadTest+0x3e0>
811027e8:	d0e07217 	ldw	r3,-32312(gp)
			TimeElapsed = alt_nticks() - TimeStart;
811027ec:	e0bff717 	ldw	r2,-36(fp)
811027f0:	1885c83a 	sub	r2,r3,r2
811027f4:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811027f8:	e13ff617 	ldw	r4,-40(fp)
811027fc:	11110100 	call	81111010 <__floatsisf>
81102800:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102804:	d0a07117 	ldw	r2,-32316(gp)
81102808:	1009883a 	mov	r4,r2
8110280c:	111113c0 	call	8111113c <__floatunsisf>
81102810:	1007883a 	mov	r3,r2
81102814:	180b883a 	mov	r5,r3
81102818:	8009883a 	mov	r4,r16
8110281c:	11107c40 	call	811107c4 <__divsf3>
81102820:	1007883a 	mov	r3,r2
81102824:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
81102828:	1009883a 	mov	r4,r2
8110282c:	11119540 	call	81111954 <__extendsfdf2>
81102830:	1009883a 	mov	r4,r2
81102834:	180b883a 	mov	r5,r3
81102838:	d9400015 	stw	r5,0(sp)
8110283c:	200f883a 	mov	r7,r4
81102840:	e1bff117 	ldw	r6,-60(fp)
81102844:	01604534 	movhi	r5,33044
81102848:	29757e04 	addi	r5,r5,-10760
8110284c:	01204534 	movhi	r4,33044
81102850:	210a2604 	addi	r4,r4,10392
81102854:	11137640 	call	81113764 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
81102858:	d0a04f17 	ldw	r2,-32452(gp)
8110285c:	01604534 	movhi	r5,33044
81102860:	294a2604 	addi	r5,r5,10392
81102864:	1009883a 	mov	r4,r2
81102868:	1111dd40 	call	81111dd4 <fprintf>
8110286c:	00001b06 	br	811028dc <bDdr2MemoryRandomReadTest+0x44c>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102870:	e1bff117 	ldw	r6,-60(fp)
81102874:	01604534 	movhi	r5,33044
81102878:	29758a04 	addi	r5,r5,-10712
8110287c:	01204534 	movhi	r4,33044
81102880:	210a2604 	addi	r4,r4,10392
81102884:	11137640 	call	81113764 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102888:	d0a04f17 	ldw	r2,-32452(gp)
8110288c:	01604534 	movhi	r5,33044
81102890:	294a2604 	addi	r5,r5,10392
81102894:	1009883a 	mov	r4,r2
81102898:	1111dd40 	call	81111dd4 <fprintf>
8110289c:	00000f06 	br	811028dc <bDdr2MemoryRandomReadTest+0x44c>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
811028a0:	00e04534 	movhi	r3,33044
811028a4:	18ca2604 	addi	r3,r3,10392
811028a8:	00a04534 	movhi	r2,33044
811028ac:	10b52e04 	addi	r2,r2,-11080
811028b0:	1009883a 	mov	r4,r2
811028b4:	00800544 	movi	r2,21
811028b8:	100d883a 	mov	r6,r2
811028bc:	200b883a 	mov	r5,r4
811028c0:	1809883a 	mov	r4,r3
811028c4:	1112e840 	call	81112e84 <memcpy>
		debug(fp, cDebugBuffer);
811028c8:	d0a04f17 	ldw	r2,-32452(gp)
811028cc:	01604534 	movhi	r5,33044
811028d0:	294a2604 	addi	r5,r5,10392
811028d4:	1009883a 	mov	r4,r2
811028d8:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811028dc:	00a04534 	movhi	r2,33044
811028e0:	108a2604 	addi	r2,r2,10392
811028e4:	00c00284 	movi	r3,10
811028e8:	10c00005 	stb	r3,0(r2)
811028ec:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811028f0:	d0a04f17 	ldw	r2,-32452(gp)
811028f4:	01604534 	movhi	r5,33044
811028f8:	294a2604 	addi	r5,r5,10392
811028fc:	1009883a 	mov	r4,r2
81102900:	1111dd40 	call	81111dd4 <fprintf>
#endif

	return bSuccess;
81102904:	e0bfef17 	ldw	r2,-68(fp)
}
81102908:	e6fffc04 	addi	sp,fp,-16
8110290c:	dfc00517 	ldw	ra,20(sp)
81102910:	df000417 	ldw	fp,16(sp)
81102914:	dcc00317 	ldw	r19,12(sp)
81102918:	dc800217 	ldw	r18,8(sp)
8110291c:	dc400117 	ldw	r17,4(sp)
81102920:	dc000017 	ldw	r16,0(sp)
81102924:	dec00604 	addi	sp,sp,24
81102928:	f800283a 	ret

8110292c <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
8110292c:	defffd04 	addi	sp,sp,-12
81102930:	de00012e 	bgeu	sp,et,81102938 <uliXorshift32+0xc>
81102934:	003b68fa 	trap	3
81102938:	df000215 	stw	fp,8(sp)
8110293c:	df000204 	addi	fp,sp,8
81102940:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
81102944:	e0bfff17 	ldw	r2,-4(fp)
81102948:	10800017 	ldw	r2,0(r2)
8110294c:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
81102950:	e0bffe17 	ldw	r2,-8(fp)
81102954:	1004937a 	slli	r2,r2,13
81102958:	e0fffe17 	ldw	r3,-8(fp)
8110295c:	1884f03a 	xor	r2,r3,r2
81102960:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
81102964:	e0bffe17 	ldw	r2,-8(fp)
81102968:	1004d47a 	srli	r2,r2,17
8110296c:	e0fffe17 	ldw	r3,-8(fp)
81102970:	1884f03a 	xor	r2,r3,r2
81102974:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102978:	e0bffe17 	ldw	r2,-8(fp)
8110297c:	1004917a 	slli	r2,r2,5
81102980:	e0fffe17 	ldw	r3,-8(fp)
81102984:	1884f03a 	xor	r2,r3,r2
81102988:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
8110298c:	e0bfff17 	ldw	r2,-4(fp)
81102990:	e0fffe17 	ldw	r3,-8(fp)
81102994:	10c00015 	stw	r3,0(r2)

	return uliX;
81102998:	e0bffe17 	ldw	r2,-8(fp)
}
8110299c:	e037883a 	mov	sp,fp
811029a0:	df000017 	ldw	fp,0(sp)
811029a4:	dec00104 	addi	sp,sp,4
811029a8:	f800283a 	ret

811029ac <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
811029ac:	defffb04 	addi	sp,sp,-20
811029b0:	de00012e 	bgeu	sp,et,811029b8 <DMA_OPEN_DEVICE+0xc>
811029b4:	003b68fa 	trap	3
811029b8:	dfc00415 	stw	ra,16(sp)
811029bc:	df000315 	stw	fp,12(sp)
811029c0:	df000304 	addi	fp,sp,12
811029c4:	e13ffe15 	stw	r4,-8(fp)
811029c8:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811029cc:	00800044 	movi	r2,1
811029d0:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
811029d4:	e13fff17 	ldw	r4,-4(fp)
811029d8:	113b2080 	call	8113b208 <alt_msgdma_open>
811029dc:	1007883a 	mov	r3,r2
811029e0:	e0bffe17 	ldw	r2,-8(fp)
811029e4:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
811029e8:	e0bffe17 	ldw	r2,-8(fp)
811029ec:	10800017 	ldw	r2,0(r2)
811029f0:	1000011e 	bne	r2,zero,811029f8 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
811029f4:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
811029f8:	e0bffd17 	ldw	r2,-12(fp)
}
811029fc:	e037883a 	mov	sp,fp
81102a00:	dfc00117 	ldw	ra,4(sp)
81102a04:	df000017 	ldw	fp,0(sp)
81102a08:	dec00204 	addi	sp,sp,8
81102a0c:	f800283a 	ret

81102a10 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
81102a10:	defffc04 	addi	sp,sp,-16
81102a14:	de00012e 	bgeu	sp,et,81102a1c <DMA_CONFIG+0xc>
81102a18:	003b68fa 	trap	3
81102a1c:	df000315 	stw	fp,12(sp)
81102a20:	df000304 	addi	fp,sp,12
81102a24:	e13ffe15 	stw	r4,-8(fp)
81102a28:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81102a2c:	00800044 	movi	r2,1
81102a30:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
81102a34:	e0bffe17 	ldw	r2,-8(fp)
81102a38:	10800317 	ldw	r2,12(r2)
81102a3c:	10800104 	addi	r2,r2,4
81102a40:	e0ffff17 	ldw	r3,-4(fp)
81102a44:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
81102a48:	e0bffd17 	ldw	r2,-12(fp)
}
81102a4c:	e037883a 	mov	sp,fp
81102a50:	df000017 	ldw	fp,0(sp)
81102a54:	dec00104 	addi	sp,sp,4
81102a58:	f800283a 	ret

81102a5c <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
81102a5c:	defffd04 	addi	sp,sp,-12
81102a60:	de00012e 	bgeu	sp,et,81102a68 <DMA_BUSY+0xc>
81102a64:	003b68fa 	trap	3
81102a68:	df000215 	stw	fp,8(sp)
81102a6c:	df000204 	addi	fp,sp,8
81102a70:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81102a74:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81102a78:	e0bfff17 	ldw	r2,-4(fp)
81102a7c:	10800317 	ldw	r2,12(r2)
81102a80:	10800037 	ldwio	r2,0(r2)
81102a84:	1080004c 	andi	r2,r2,1
81102a88:	10000226 	beq	r2,zero,81102a94 <DMA_BUSY+0x38>
    bBusy = TRUE;
81102a8c:	00800044 	movi	r2,1
81102a90:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81102a94:	e0bffe17 	ldw	r2,-8(fp)
}
81102a98:	e037883a 	mov	sp,fp
81102a9c:	df000017 	ldw	fp,0(sp)
81102aa0:	dec00104 	addi	sp,sp,4
81102aa4:	f800283a 	ret

81102aa8 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81102aa8:	defffd04 	addi	sp,sp,-12
81102aac:	de00012e 	bgeu	sp,et,81102ab4 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81102ab0:	003b68fa 	trap	3
81102ab4:	df000215 	stw	fp,8(sp)
81102ab8:	df000204 	addi	fp,sp,8
81102abc:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81102ac0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102ac4:	e0bfff17 	ldw	r2,-4(fp)
81102ac8:	10800317 	ldw	r2,12(r2)
81102acc:	10800037 	ldwio	r2,0(r2)
81102ad0:	1080010c 	andi	r2,r2,4
81102ad4:	10000226 	beq	r2,zero,81102ae0 <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81102ad8:	00800044 	movi	r2,1
81102adc:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81102ae0:	e0bffe17 	ldw	r2,-8(fp)
}
81102ae4:	e037883a 	mov	sp,fp
81102ae8:	df000017 	ldw	fp,0(sp)
81102aec:	dec00104 	addi	sp,sp,4
81102af0:	f800283a 	ret

81102af4 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102af4:	defffd04 	addi	sp,sp,-12
81102af8:	de00012e 	bgeu	sp,et,81102b00 <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81102afc:	003b68fa 	trap	3
81102b00:	df000215 	stw	fp,8(sp)
81102b04:	df000204 	addi	fp,sp,8
81102b08:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102b0c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102b10:	e0bfff17 	ldw	r2,-4(fp)
81102b14:	10800317 	ldw	r2,12(r2)
81102b18:	10800037 	ldwio	r2,0(r2)
81102b1c:	1080008c 	andi	r2,r2,2
81102b20:	10000226 	beq	r2,zero,81102b2c <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81102b24:	00800044 	movi	r2,1
81102b28:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102b2c:	e0bffe17 	ldw	r2,-8(fp)
}
81102b30:	e037883a 	mov	sp,fp
81102b34:	df000017 	ldw	fp,0(sp)
81102b38:	dec00104 	addi	sp,sp,4
81102b3c:	f800283a 	ret

81102b40 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102b40:	defffa04 	addi	sp,sp,-24
81102b44:	de00012e 	bgeu	sp,et,81102b4c <DMA_DISPATCHER_STOP+0xc>
81102b48:	003b68fa 	trap	3
81102b4c:	dfc00515 	stw	ra,20(sp)
81102b50:	df000415 	stw	fp,16(sp)
81102b54:	df000404 	addi	fp,sp,16
81102b58:	e13ffd15 	stw	r4,-12(fp)
81102b5c:	e17ffe15 	stw	r5,-8(fp)
81102b60:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102b64:	00800044 	movi	r2,1
81102b68:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81102b6c:	e0bffd17 	ldw	r2,-12(fp)
81102b70:	10800317 	ldw	r2,12(r2)
81102b74:	10800104 	addi	r2,r2,4
81102b78:	00c00044 	movi	r3,1
81102b7c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102b80:	e0bffe17 	ldw	r2,-8(fp)
81102b84:	10800058 	cmpnei	r2,r2,1
81102b88:	10000e1e 	bne	r2,zero,81102bc4 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b8c:	00000706 	br	81102bac <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b90:	e0bfff17 	ldw	r2,-4(fp)
81102b94:	1000031e 	bne	r2,zero,81102ba4 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81102b98:	01000044 	movi	r4,1
81102b9c:	11290ec0 	call	811290ec <usleep>
81102ba0:	00000206 	br	81102bac <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102ba4:	e13fff17 	ldw	r4,-4(fp)
81102ba8:	11290ec0 	call	811290ec <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102bac:	e0bffd17 	ldw	r2,-12(fp)
81102bb0:	10800317 	ldw	r2,12(r2)
81102bb4:	10800037 	ldwio	r2,0(r2)
81102bb8:	1080080c 	andi	r2,r2,32
81102bbc:	103ff41e 	bne	r2,zero,81102b90 <__reset+0xfb0e2b90>
81102bc0:	00000206 	br	81102bcc <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102bc4:	e0bffc17 	ldw	r2,-16(fp)
81102bc8:	00000106 	br	81102bd0 <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81102bcc:	e0bffc17 	ldw	r2,-16(fp)
}
81102bd0:	e037883a 	mov	sp,fp
81102bd4:	dfc00117 	ldw	ra,4(sp)
81102bd8:	df000017 	ldw	fp,0(sp)
81102bdc:	dec00204 	addi	sp,sp,8
81102be0:	f800283a 	ret

81102be4 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102be4:	defffa04 	addi	sp,sp,-24
81102be8:	de00012e 	bgeu	sp,et,81102bf0 <DMA_DISPATCHER_RESET+0xc>
81102bec:	003b68fa 	trap	3
81102bf0:	dfc00515 	stw	ra,20(sp)
81102bf4:	df000415 	stw	fp,16(sp)
81102bf8:	df000404 	addi	fp,sp,16
81102bfc:	e13ffd15 	stw	r4,-12(fp)
81102c00:	e17ffe15 	stw	r5,-8(fp)
81102c04:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102c08:	00800044 	movi	r2,1
81102c0c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102c10:	e0bffd17 	ldw	r2,-12(fp)
81102c14:	10800317 	ldw	r2,12(r2)
81102c18:	10800104 	addi	r2,r2,4
81102c1c:	00c00084 	movi	r3,2
81102c20:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102c24:	e0bffe17 	ldw	r2,-8(fp)
81102c28:	10800058 	cmpnei	r2,r2,1
81102c2c:	10000e1e 	bne	r2,zero,81102c68 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102c30:	00000706 	br	81102c50 <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102c34:	e0bfff17 	ldw	r2,-4(fp)
81102c38:	1000031e 	bne	r2,zero,81102c48 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81102c3c:	01000044 	movi	r4,1
81102c40:	11290ec0 	call	811290ec <usleep>
81102c44:	00000206 	br	81102c50 <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102c48:	e13fff17 	ldw	r4,-4(fp)
81102c4c:	11290ec0 	call	811290ec <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102c50:	e0bffd17 	ldw	r2,-12(fp)
81102c54:	10800317 	ldw	r2,12(r2)
81102c58:	10800037 	ldwio	r2,0(r2)
81102c5c:	1080100c 	andi	r2,r2,64
81102c60:	103ff41e 	bne	r2,zero,81102c34 <__reset+0xfb0e2c34>
81102c64:	00000206 	br	81102c70 <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102c68:	e0bffc17 	ldw	r2,-16(fp)
81102c6c:	00000106 	br	81102c74 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81102c70:	e0bffc17 	ldw	r2,-16(fp)
}
81102c74:	e037883a 	mov	sp,fp
81102c78:	dfc00117 	ldw	ra,4(sp)
81102c7c:	df000017 	ldw	fp,0(sp)
81102c80:	dec00204 	addi	sp,sp,8
81102c84:	f800283a 	ret

81102c88 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102c88:	defff604 	addi	sp,sp,-40
81102c8c:	de00012e 	bgeu	sp,et,81102c94 <DMA_SINGLE_TRANSFER+0xc>
81102c90:	003b68fa 	trap	3
81102c94:	dfc00915 	stw	ra,36(sp)
81102c98:	df000815 	stw	fp,32(sp)
81102c9c:	dc000715 	stw	r16,28(sp)
81102ca0:	df000804 	addi	fp,sp,32
81102ca4:	e13ffb15 	stw	r4,-20(fp)
81102ca8:	e17ffc15 	stw	r5,-16(fp)
81102cac:	e1bffd15 	stw	r6,-12(fp)
81102cb0:	e1fffe15 	stw	r7,-8(fp)
81102cb4:	defff804 	addi	sp,sp,-32
81102cb8:	d8800204 	addi	r2,sp,8
81102cbc:	108003c4 	addi	r2,r2,15
81102cc0:	1004d13a 	srli	r2,r2,4
81102cc4:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102cc8:	00800044 	movi	r2,1
81102ccc:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102cd0:	e0fffc17 	ldw	r3,-16(fp)
81102cd4:	e13ffd17 	ldw	r4,-12(fp)
81102cd8:	e0800217 	ldw	r2,8(fp)
81102cdc:	d8800115 	stw	r2,4(sp)
81102ce0:	e0bffe17 	ldw	r2,-8(fp)
81102ce4:	d8800015 	stw	r2,0(sp)
81102ce8:	200f883a 	mov	r7,r4
81102cec:	180d883a 	mov	r6,r3
81102cf0:	800b883a 	mov	r5,r16
81102cf4:	e13ffb17 	ldw	r4,-20(fp)
81102cf8:	113a2040 	call	8113a204 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102cfc:	10000326 	beq	r2,zero,81102d0c <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81102d00:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102d04:	e0bffa17 	ldw	r2,-24(fp)
81102d08:	00001d06 	br	81102d80 <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102d0c:	800b883a 	mov	r5,r16
81102d10:	e13ffb17 	ldw	r4,-20(fp)
81102d14:	113b4780 	call	8113b478 <alt_msgdma_standard_descriptor_async_transfer>
81102d18:	10000326 	beq	r2,zero,81102d28 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81102d1c:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102d20:	e0bffa17 	ldw	r2,-24(fp)
81102d24:	00001606 	br	81102d80 <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102d28:	e0bffa17 	ldw	r2,-24(fp)
81102d2c:	10800060 	cmpeqi	r2,r2,1
81102d30:	1007883a 	mov	r3,r2
81102d34:	e0800317 	ldw	r2,12(fp)
81102d38:	10800060 	cmpeqi	r2,r2,1
81102d3c:	1884703a 	and	r2,r3,r2
81102d40:	10803fcc 	andi	r2,r2,255
81102d44:	10000d26 	beq	r2,zero,81102d7c <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102d48:	00000706 	br	81102d68 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102d4c:	e0800417 	ldw	r2,16(fp)
81102d50:	1000031e 	bne	r2,zero,81102d60 <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81102d54:	0100fa04 	movi	r4,1000
81102d58:	11290ec0 	call	811290ec <usleep>
81102d5c:	00000206 	br	81102d68 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81102d60:	e1000417 	ldw	r4,16(fp)
81102d64:	11290ec0 	call	811290ec <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102d68:	e0bffb17 	ldw	r2,-20(fp)
81102d6c:	10800317 	ldw	r2,12(r2)
81102d70:	10800037 	ldwio	r2,0(r2)
81102d74:	1080004c 	andi	r2,r2,1
81102d78:	103ff41e 	bne	r2,zero,81102d4c <__reset+0xfb0e2d4c>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102d7c:	e0bffa17 	ldw	r2,-24(fp)
}
81102d80:	e6ffff04 	addi	sp,fp,-4
81102d84:	dfc00217 	ldw	ra,8(sp)
81102d88:	df000117 	ldw	fp,4(sp)
81102d8c:	dc000017 	ldw	r16,0(sp)
81102d90:	dec00304 	addi	sp,sp,12
81102d94:	f800283a 	ret

81102d98 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102d98:	defff504 	addi	sp,sp,-44
81102d9c:	de00012e 	bgeu	sp,et,81102da4 <DMA_MULTIPLE_TRANSFER+0xc>
81102da0:	003b68fa 	trap	3
81102da4:	dfc00a15 	stw	ra,40(sp)
81102da8:	df000915 	stw	fp,36(sp)
81102dac:	dc000815 	stw	r16,32(sp)
81102db0:	df000904 	addi	fp,sp,36
81102db4:	e13ffb15 	stw	r4,-20(fp)
81102db8:	e17ffc15 	stw	r5,-16(fp)
81102dbc:	e1bffd15 	stw	r6,-12(fp)
81102dc0:	3805883a 	mov	r2,r7
81102dc4:	e0bffe05 	stb	r2,-8(fp)
81102dc8:	defff804 	addi	sp,sp,-32
81102dcc:	d8800204 	addi	r2,sp,8
81102dd0:	108003c4 	addi	r2,r2,15
81102dd4:	1004d13a 	srli	r2,r2,4
81102dd8:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102ddc:	00800044 	movi	r2,1
81102de0:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102de4:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102de8:	00002506 	br	81102e80 <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102dec:	e0bffa03 	ldbu	r2,-24(fp)
81102df0:	1085883a 	add	r2,r2,r2
81102df4:	1085883a 	add	r2,r2,r2
81102df8:	1007883a 	mov	r3,r2
81102dfc:	e0bffc17 	ldw	r2,-16(fp)
81102e00:	10c5883a 	add	r2,r2,r3
81102e04:	10800017 	ldw	r2,0(r2)
81102e08:	1009883a 	mov	r4,r2
81102e0c:	e0bffa03 	ldbu	r2,-24(fp)
81102e10:	1085883a 	add	r2,r2,r2
81102e14:	1085883a 	add	r2,r2,r2
81102e18:	1007883a 	mov	r3,r2
81102e1c:	e0bffd17 	ldw	r2,-12(fp)
81102e20:	10c5883a 	add	r2,r2,r3
81102e24:	10800017 	ldw	r2,0(r2)
81102e28:	1007883a 	mov	r3,r2
81102e2c:	e0800317 	ldw	r2,12(fp)
81102e30:	10804034 	orhi	r2,r2,256
81102e34:	d8800115 	stw	r2,4(sp)
81102e38:	e0800217 	ldw	r2,8(fp)
81102e3c:	d8800015 	stw	r2,0(sp)
81102e40:	180f883a 	mov	r7,r3
81102e44:	200d883a 	mov	r6,r4
81102e48:	800b883a 	mov	r5,r16
81102e4c:	e13ffb17 	ldw	r4,-20(fp)
81102e50:	113a2040 	call	8113a204 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102e54:	10000226 	beq	r2,zero,81102e60 <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81102e58:	e03ff915 	stw	zero,-28(fp)
81102e5c:	00000506 	br	81102e74 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102e60:	800b883a 	mov	r5,r16
81102e64:	e13ffb17 	ldw	r4,-20(fp)
81102e68:	113b4780 	call	8113b478 <alt_msgdma_standard_descriptor_async_transfer>
81102e6c:	10000126 	beq	r2,zero,81102e74 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81102e70:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102e74:	e0bffa03 	ldbu	r2,-24(fp)
81102e78:	10800044 	addi	r2,r2,1
81102e7c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102e80:	e0bff917 	ldw	r2,-28(fp)
81102e84:	10800060 	cmpeqi	r2,r2,1
81102e88:	1009883a 	mov	r4,r2
81102e8c:	e0fffa03 	ldbu	r3,-24(fp)
81102e90:	e0bffe03 	ldbu	r2,-8(fp)
81102e94:	10bfffc4 	addi	r2,r2,-1
81102e98:	1884803a 	cmplt	r2,r3,r2
81102e9c:	2084703a 	and	r2,r4,r2
81102ea0:	10803fcc 	andi	r2,r2,255
81102ea4:	103fd11e 	bne	r2,zero,81102dec <__reset+0xfb0e2dec>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102ea8:	e0bff917 	ldw	r2,-28(fp)
81102eac:	10800058 	cmpnei	r2,r2,1
81102eb0:	1000211e 	bne	r2,zero,81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102eb4:	e0bffa03 	ldbu	r2,-24(fp)
81102eb8:	1085883a 	add	r2,r2,r2
81102ebc:	1085883a 	add	r2,r2,r2
81102ec0:	1007883a 	mov	r3,r2
81102ec4:	e0bffc17 	ldw	r2,-16(fp)
81102ec8:	10c5883a 	add	r2,r2,r3
81102ecc:	10800017 	ldw	r2,0(r2)
81102ed0:	1009883a 	mov	r4,r2
81102ed4:	e0bffa03 	ldbu	r2,-24(fp)
81102ed8:	1085883a 	add	r2,r2,r2
81102edc:	1085883a 	add	r2,r2,r2
81102ee0:	1007883a 	mov	r3,r2
81102ee4:	e0bffd17 	ldw	r2,-12(fp)
81102ee8:	10c5883a 	add	r2,r2,r3
81102eec:	10800017 	ldw	r2,0(r2)
81102ef0:	1007883a 	mov	r3,r2
81102ef4:	e0800317 	ldw	r2,12(fp)
81102ef8:	d8800115 	stw	r2,4(sp)
81102efc:	e0800217 	ldw	r2,8(fp)
81102f00:	d8800015 	stw	r2,0(sp)
81102f04:	180f883a 	mov	r7,r3
81102f08:	200d883a 	mov	r6,r4
81102f0c:	800b883a 	mov	r5,r16
81102f10:	e13ffb17 	ldw	r4,-20(fp)
81102f14:	113a2040 	call	8113a204 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102f18:	10000226 	beq	r2,zero,81102f24 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81102f1c:	e03ff915 	stw	zero,-28(fp)
81102f20:	00000506 	br	81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102f24:	800b883a 	mov	r5,r16
81102f28:	e13ffb17 	ldw	r4,-20(fp)
81102f2c:	113b4780 	call	8113b478 <alt_msgdma_standard_descriptor_async_transfer>
81102f30:	10000126 	beq	r2,zero,81102f38 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81102f34:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102f38:	e0bff917 	ldw	r2,-28(fp)
81102f3c:	10800060 	cmpeqi	r2,r2,1
81102f40:	1007883a 	mov	r3,r2
81102f44:	e0800417 	ldw	r2,16(fp)
81102f48:	10800060 	cmpeqi	r2,r2,1
81102f4c:	1884703a 	and	r2,r3,r2
81102f50:	10803fcc 	andi	r2,r2,255
81102f54:	10000d26 	beq	r2,zero,81102f8c <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f58:	00000706 	br	81102f78 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102f5c:	e0800517 	ldw	r2,20(fp)
81102f60:	1000031e 	bne	r2,zero,81102f70 <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81102f64:	0100fa04 	movi	r4,1000
81102f68:	11290ec0 	call	811290ec <usleep>
81102f6c:	00000206 	br	81102f78 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81102f70:	e1000517 	ldw	r4,20(fp)
81102f74:	11290ec0 	call	811290ec <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f78:	e0bffb17 	ldw	r2,-20(fp)
81102f7c:	10800317 	ldw	r2,12(r2)
81102f80:	10800037 	ldwio	r2,0(r2)
81102f84:	1080004c 	andi	r2,r2,1
81102f88:	103ff41e 	bne	r2,zero,81102f5c <__reset+0xfb0e2f5c>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102f8c:	e0bff917 	ldw	r2,-28(fp)
}
81102f90:	e6ffff04 	addi	sp,fp,-4
81102f94:	dfc00217 	ldw	ra,8(sp)
81102f98:	df000117 	ldw	fp,4(sp)
81102f9c:	dc000017 	ldw	r16,0(sp)
81102fa0:	dec00304 	addi	sp,sp,12
81102fa4:	f800283a 	ret

81102fa8 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
81102fa8:	deffef04 	addi	sp,sp,-68
81102fac:	de00012e 	bgeu	sp,et,81102fb4 <POWER_Read+0xc>
81102fb0:	003b68fa 	trap	3
81102fb4:	dfc01015 	stw	ra,64(sp)
81102fb8:	df000f15 	stw	fp,60(sp)
81102fbc:	df000f04 	addi	fp,sp,60
81102fc0:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
81102fc4:	00800044 	movi	r2,1
81102fc8:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
81102fcc:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102fd0:	00800204 	movi	r2,8
81102fd4:	e0bffc15 	stw	r2,-16(fp)
81102fd8:	00800104 	movi	r2,4
81102fdc:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102fe0:	00800044 	movi	r2,1
81102fe4:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102fe8:	00800044 	movi	r2,1
81102fec:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102ff0:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102ff4:	e03ff515 	stw	zero,-44(fp)
81102ff8:	00009206 	br	81103244 <POWER_Read+0x29c>
		NextChannel = 0;
81102ffc:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81103000:	e0bff517 	ldw	r2,-44(fp)
81103004:	10c03fcc 	andi	r3,r2,255
81103008:	e13ffa03 	ldbu	r4,-24(fp)
8110300c:	e0bfff17 	ldw	r2,-4(fp)
81103010:	d8800115 	stw	r2,4(sp)
81103014:	e0bff917 	ldw	r2,-28(fp)
81103018:	d8800015 	stw	r2,0(sp)
8110301c:	e1fff817 	ldw	r7,-32(fp)
81103020:	e1bff717 	ldw	r6,-36(fp)
81103024:	200b883a 	mov	r5,r4
81103028:	1809883a 	mov	r4,r3
8110302c:	1106d380 	call	81106d38 <POWER_SPI_RW>
81103030:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103034:	e03ff415 	stw	zero,-48(fp)
81103038:	00007406 	br	8110320c <POWER_Read+0x264>
			NextChannel = i + 1;
8110303c:	e0bff417 	ldw	r2,-48(fp)
81103040:	10800044 	addi	r2,r2,1
81103044:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81103048:	e0bff517 	ldw	r2,-44(fp)
8110304c:	10c03fcc 	andi	r3,r2,255
81103050:	e13ffa03 	ldbu	r4,-24(fp)
81103054:	e0bffe04 	addi	r2,fp,-8
81103058:	d8800115 	stw	r2,4(sp)
8110305c:	e0bff917 	ldw	r2,-28(fp)
81103060:	d8800015 	stw	r2,0(sp)
81103064:	e1fff817 	ldw	r7,-32(fp)
81103068:	e1bff717 	ldw	r6,-36(fp)
8110306c:	200b883a 	mov	r5,r4
81103070:	1809883a 	mov	r4,r3
81103074:	1106d380 	call	81106d38 <POWER_SPI_RW>
81103078:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
8110307c:	e0bff317 	ldw	r2,-52(fp)
81103080:	10005026 	beq	r2,zero,811031c4 <POWER_Read+0x21c>
				HEAD = (Value32 >> 30) & 0x03;
81103084:	e0bffe17 	ldw	r2,-8(fp)
81103088:	1004d7ba 	srli	r2,r2,30
8110308c:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
81103090:	e0bffe17 	ldw	r2,-8(fp)
81103094:	1004d07a 	srli	r2,r2,1
81103098:	108001cc 	andi	r2,r2,7
8110309c:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
811030a0:	e0bffe17 	ldw	r2,-8(fp)
811030a4:	1004d13a 	srli	r2,r2,4
811030a8:	1080004c 	andi	r2,r2,1
811030ac:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
811030b0:	e0bffe17 	ldw	r2,-8(fp)
811030b4:	1004d17a 	srli	r2,r2,5
811030b8:	1080004c 	andi	r2,r2,1
811030bc:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
811030c0:	e0bffe17 	ldw	r2,-8(fp)
811030c4:	1080004c 	andi	r2,r2,1
811030c8:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
811030cc:	e0bffa43 	ldbu	r2,-23(fp)
811030d0:	10000d26 	beq	r2,zero,81103108 <POWER_Read+0x160>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
811030d4:	e1bff417 	ldw	r6,-48(fp)
811030d8:	01604534 	movhi	r5,33044
811030dc:	29759404 	addi	r5,r5,-10672
811030e0:	01204534 	movhi	r4,33044
811030e4:	210a2604 	addi	r4,r4,10392
811030e8:	11137640 	call	81113764 <sprintf>
					debug(fp, cDebugBuffer);
811030ec:	d0a04f17 	ldw	r2,-32452(gp)
811030f0:	01604534 	movhi	r5,33044
811030f4:	294a2604 	addi	r5,r5,10392
811030f8:	1009883a 	mov	r4,r2
811030fc:	1111dd40 	call	81111dd4 <fprintf>
#endif
					bSuccess = FALSE;
81103100:	e03ff315 	stw	zero,-52(fp)
81103104:	00002206 	br	81103190 <POWER_Read+0x1e8>
				} else if (Channel != i) {
81103108:	e0fffa83 	ldbu	r3,-22(fp)
8110310c:	e0bff417 	ldw	r2,-48(fp)
81103110:	18801026 	beq	r3,r2,81103154 <POWER_Read+0x1ac>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
81103114:	e0bffa83 	ldbu	r2,-22(fp)
81103118:	d8800015 	stw	r2,0(sp)
8110311c:	e1fff417 	ldw	r7,-48(fp)
81103120:	e1bff417 	ldw	r6,-48(fp)
81103124:	01604534 	movhi	r5,33044
81103128:	29759a04 	addi	r5,r5,-10648
8110312c:	01204534 	movhi	r4,33044
81103130:	210a2604 	addi	r4,r4,10392
81103134:	11137640 	call	81113764 <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
81103138:	d0a04f17 	ldw	r2,-32452(gp)
8110313c:	01604534 	movhi	r5,33044
81103140:	294a2604 	addi	r5,r5,10392
81103144:	1009883a 	mov	r4,r2
81103148:	1111dd40 	call	81111dd4 <fprintf>
#endif
					bSuccess = FALSE;
8110314c:	e03ff315 	stw	zero,-52(fp)
81103150:	00000f06 	br	81103190 <POWER_Read+0x1e8>
				} else if (SIGN ^ bSIGN) {
81103154:	e0fffac3 	ldbu	r3,-21(fp)
81103158:	e0bff817 	ldw	r2,-32(fp)
8110315c:	18800c26 	beq	r3,r2,81103190 <POWER_Read+0x1e8>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
81103160:	e1bff417 	ldw	r6,-48(fp)
81103164:	01604534 	movhi	r5,33044
81103168:	2975a604 	addi	r5,r5,-10600
8110316c:	01204534 	movhi	r4,33044
81103170:	210a2604 	addi	r4,r4,10392
81103174:	11137640 	call	81113764 <sprintf>
					debug(fp, cDebugBuffer);
81103178:	d0a04f17 	ldw	r2,-32452(gp)
8110317c:	01604534 	movhi	r5,33044
81103180:	294a2604 	addi	r5,r5,10392
81103184:	1009883a 	mov	r4,r2
81103188:	1111dd40 	call	81111dd4 <fprintf>
#endif
					bSuccess = FALSE;
8110318c:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81103190:	e0bff317 	ldw	r2,-52(fp)
81103194:	10001a26 	beq	r2,zero,81103200 <POWER_Read+0x258>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81103198:	e0bff617 	ldw	r2,-40(fp)
8110319c:	10c00044 	addi	r3,r2,1
811031a0:	e0fff615 	stw	r3,-40(fp)
811031a4:	1085883a 	add	r2,r2,r2
811031a8:	1085883a 	add	r2,r2,r2
811031ac:	1007883a 	mov	r3,r2
811031b0:	e0bfff17 	ldw	r2,-4(fp)
811031b4:	10c5883a 	add	r2,r2,r3
811031b8:	e0fffe17 	ldw	r3,-8(fp)
811031bc:	10c00015 	stw	r3,0(r2)
811031c0:	00000f06 	br	81103200 <POWER_Read+0x258>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
811031c4:	00e04534 	movhi	r3,33044
811031c8:	18ca2604 	addi	r3,r3,10392
811031cc:	00a04534 	movhi	r2,33044
811031d0:	10b5ac04 	addi	r2,r2,-10576
811031d4:	1009883a 	mov	r4,r2
811031d8:	00800444 	movi	r2,17
811031dc:	100d883a 	mov	r6,r2
811031e0:	200b883a 	mov	r5,r4
811031e4:	1809883a 	mov	r4,r3
811031e8:	1112e840 	call	81112e84 <memcpy>
				debug(fp, cDebugBuffer);
811031ec:	d0a04f17 	ldw	r2,-32452(gp)
811031f0:	01604534 	movhi	r5,33044
811031f4:	294a2604 	addi	r5,r5,10392
811031f8:	1009883a 	mov	r4,r2
811031fc:	1111dd40 	call	81111dd4 <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103200:	e0bff417 	ldw	r2,-48(fp)
81103204:	10800044 	addi	r2,r2,1
81103208:	e0bff415 	stw	r2,-48(fp)
8110320c:	e0bff517 	ldw	r2,-44(fp)
81103210:	1085883a 	add	r2,r2,r2
81103214:	1085883a 	add	r2,r2,r2
81103218:	e0fff304 	addi	r3,fp,-52
8110321c:	1885883a 	add	r2,r3,r2
81103220:	10800904 	addi	r2,r2,36
81103224:	10800017 	ldw	r2,0(r2)
81103228:	e0fff417 	ldw	r3,-48(fp)
8110322c:	1880020e 	bge	r3,r2,81103238 <POWER_Read+0x290>
81103230:	e0bff317 	ldw	r2,-52(fp)
81103234:	103f811e 	bne	r2,zero,8110303c <__reset+0xfb0e303c>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81103238:	e0bff517 	ldw	r2,-44(fp)
8110323c:	10800044 	addi	r2,r2,1
81103240:	e0bff515 	stw	r2,-44(fp)
81103244:	e0bff517 	ldw	r2,-44(fp)
81103248:	10800088 	cmpgei	r2,r2,2
8110324c:	1000021e 	bne	r2,zero,81103258 <POWER_Read+0x2b0>
81103250:	e0bff317 	ldw	r2,-52(fp)
81103254:	103f691e 	bne	r2,zero,81102ffc <__reset+0xfb0e2ffc>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
81103258:	e0bff317 	ldw	r2,-52(fp)
}
8110325c:	e037883a 	mov	sp,fp
81103260:	dfc00117 	ldw	ra,4(sp)
81103264:	df000017 	ldw	fp,0(sp)
81103268:	dec00204 	addi	sp,sp,8
8110326c:	f800283a 	ret

81103270 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81103270:	defff904 	addi	sp,sp,-28
81103274:	de00012e 	bgeu	sp,et,8110327c <TEMP_Read+0xc>
81103278:	003b68fa 	trap	3
8110327c:	dfc00615 	stw	ra,24(sp)
81103280:	df000515 	stw	fp,20(sp)
81103284:	df000504 	addi	fp,sp,20
81103288:	e13ffe15 	stw	r4,-8(fp)
8110328c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81103290:	00800c04 	movi	r2,48
81103294:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81103298:	e0bffd83 	ldbu	r2,-10(fp)
8110329c:	10c03fcc 	andi	r3,r2,255
811032a0:	18c0201c 	xori	r3,r3,128
811032a4:	18ffe004 	addi	r3,r3,-128
811032a8:	e0bffdc4 	addi	r2,fp,-9
811032ac:	d8800015 	stw	r2,0(sp)
811032b0:	000f883a 	mov	r7,zero
811032b4:	180d883a 	mov	r6,r3
811032b8:	01600034 	movhi	r5,32768
811032bc:	29426004 	addi	r5,r5,2432
811032c0:	01200034 	movhi	r4,32768
811032c4:	21026404 	addi	r4,r4,2448
811032c8:	1105b300 	call	81105b30 <I2C_Read>
811032cc:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
811032d0:	e0bffc17 	ldw	r2,-16(fp)
811032d4:	10000226 	beq	r2,zero,811032e0 <TEMP_Read+0x70>
		BoardTemp = Data;
811032d8:	e0bffdc3 	ldbu	r2,-9(fp)
811032dc:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
811032e0:	e0bffc17 	ldw	r2,-16(fp)
811032e4:	10001226 	beq	r2,zero,81103330 <TEMP_Read+0xc0>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
811032e8:	e0bffd83 	ldbu	r2,-10(fp)
811032ec:	10c03fcc 	andi	r3,r2,255
811032f0:	18c0201c 	xori	r3,r3,128
811032f4:	18ffe004 	addi	r3,r3,-128
811032f8:	e0bffdc4 	addi	r2,fp,-9
811032fc:	d8800015 	stw	r2,0(sp)
81103300:	01c00044 	movi	r7,1
81103304:	180d883a 	mov	r6,r3
81103308:	01600034 	movhi	r5,32768
8110330c:	29426004 	addi	r5,r5,2432
81103310:	01200034 	movhi	r4,32768
81103314:	21026404 	addi	r4,r4,2448
81103318:	1105b300 	call	81105b30 <I2C_Read>
8110331c:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
81103320:	e0bffc17 	ldw	r2,-16(fp)
81103324:	10000226 	beq	r2,zero,81103330 <TEMP_Read+0xc0>
			FpgaTemp = Data;
81103328:	e0bffdc3 	ldbu	r2,-9(fp)
8110332c:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
81103330:	e0bffc17 	ldw	r2,-16(fp)
81103334:	10000626 	beq	r2,zero,81103350 <TEMP_Read+0xe0>
		*pFpgaTemp = FpgaTemp;
81103338:	e0bffe17 	ldw	r2,-8(fp)
8110333c:	e0fffd03 	ldbu	r3,-12(fp)
81103340:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
81103344:	e0bfff17 	ldw	r2,-4(fp)
81103348:	e0fffd43 	ldbu	r3,-11(fp)
8110334c:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
81103350:	e0bffc17 	ldw	r2,-16(fp)
}
81103354:	e037883a 	mov	sp,fp
81103358:	dfc00117 	ldw	ra,4(sp)
8110335c:	df000017 	ldw	fp,0(sp)
81103360:	dec00204 	addi	sp,sp,8
81103364:	f800283a 	ret

81103368 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
81103368:	defffb04 	addi	sp,sp,-20
8110336c:	de00012e 	bgeu	sp,et,81103374 <sense_log_temp+0xc>
81103370:	003b68fa 	trap	3
81103374:	dfc00415 	stw	ra,16(sp)
81103378:	df000315 	stw	fp,12(sp)
8110337c:	df000304 	addi	fp,sp,12
81103380:	e13ffe15 	stw	r4,-8(fp)
81103384:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81103388:	e17fff17 	ldw	r5,-4(fp)
8110338c:	e13ffe17 	ldw	r4,-8(fp)
81103390:	11032700 	call	81103270 <TEMP_Read>
81103394:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81103398:	e0bffd17 	ldw	r2,-12(fp)
}
8110339c:	e037883a 	mov	sp,fp
811033a0:	dfc00117 	ldw	ra,4(sp)
811033a4:	df000017 	ldw	fp,0(sp)
811033a8:	dec00204 	addi	sp,sp,8
811033ac:	f800283a 	ret

811033b0 <sense_log>:

void sense_log(void) {
811033b0:	deff0404 	addi	sp,sp,-1008
811033b4:	de00012e 	bgeu	sp,et,811033bc <sense_log+0xc>
811033b8:	003b68fa 	trap	3
811033bc:	dfc0fb15 	stw	ra,1004(sp)
811033c0:	df00fa15 	stw	fp,1000(sp)
811033c4:	dd40f915 	stw	r21,996(sp)
811033c8:	dd00f815 	stw	r20,992(sp)
811033cc:	dcc0f715 	stw	r19,988(sp)
811033d0:	dc80f615 	stw	r18,984(sp)
811033d4:	dc40f515 	stw	r17,980(sp)
811033d8:	dc00f415 	stw	r16,976(sp)
811033dc:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
811033e0:	00902834 	movhi	r2,16544
811033e4:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
811033e8:	008ed174 	movhi	r2,15173
811033ec:	10a6e984 	addi	r2,r2,-25690
811033f0:	e0bf2215 	stw	r2,-888(fp)
811033f4:	008ea0f4 	movhi	r2,14979
811033f8:	10849bc4 	addi	r2,r2,4719
811033fc:	e0bf2315 	stw	r2,-884(fp)
81103400:	008ed174 	movhi	r2,15173
81103404:	10a6e984 	addi	r2,r2,-25690
81103408:	e0bf2415 	stw	r2,-880(fp)
8110340c:	008ed174 	movhi	r2,15173
81103410:	10a6e984 	addi	r2,r2,-25690
81103414:	e0bf2515 	stw	r2,-876(fp)
81103418:	008ed174 	movhi	r2,15173
8110341c:	10a6e984 	addi	r2,r2,-25690
81103420:	e0bf2615 	stw	r2,-872(fp)
81103424:	008ed174 	movhi	r2,15173
81103428:	10a6e984 	addi	r2,r2,-25690
8110342c:	e0bf2715 	stw	r2,-868(fp)
81103430:	008ed174 	movhi	r2,15173
81103434:	10a6e984 	addi	r2,r2,-25690
81103438:	e0bf2815 	stw	r2,-864(fp)
8110343c:	008ed174 	movhi	r2,15173
81103440:	10a6e984 	addi	r2,r2,-25690
81103444:	e0bf2915 	stw	r2,-860(fp)
81103448:	008ed174 	movhi	r2,15173
8110344c:	10a6e984 	addi	r2,r2,-25690
81103450:	e0bf2a15 	stw	r2,-856(fp)
81103454:	008ed174 	movhi	r2,15173
81103458:	10a6e984 	addi	r2,r2,-25690
8110345c:	e0bf2b15 	stw	r2,-852(fp)
81103460:	008ed174 	movhi	r2,15173
81103464:	10a6e984 	addi	r2,r2,-25690
81103468:	e0bf2c15 	stw	r2,-848(fp)
8110346c:	008ed174 	movhi	r2,15173
81103470:	10a6e984 	addi	r2,r2,-25690
81103474:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81103478:	008fd9b4 	movhi	r2,16230
8110347c:	10999984 	addi	r2,r2,26214
81103480:	e0bf2e15 	stw	r2,-840(fp)
81103484:	008fd9b4 	movhi	r2,16230
81103488:	10999984 	addi	r2,r2,26214
8110348c:	e0bf2f15 	stw	r2,-836(fp)
81103490:	00901034 	movhi	r2,16448
81103494:	e0bf3015 	stw	r2,-832(fp)
81103498:	008fd9b4 	movhi	r2,16230
8110349c:	10999984 	addi	r2,r2,26214
811034a0:	e0bf3115 	stw	r2,-828(fp)
811034a4:	008ff9b4 	movhi	r2,16358
811034a8:	10999984 	addi	r2,r2,26214
811034ac:	e0bf3215 	stw	r2,-824(fp)
811034b0:	00900834 	movhi	r2,16416
811034b4:	e0bf3315 	stw	r2,-820(fp)
811034b8:	008ff9b4 	movhi	r2,16358
811034bc:	10999984 	addi	r2,r2,26214
811034c0:	e0bf3415 	stw	r2,-816(fp)
811034c4:	00900834 	movhi	r2,16416
811034c8:	e0bf3515 	stw	r2,-812(fp)
811034cc:	008fe374 	movhi	r2,16269
811034d0:	10b33344 	addi	r2,r2,-13107
811034d4:	e0bf3615 	stw	r2,-808(fp)
811034d8:	008fecf4 	movhi	r2,16307
811034dc:	108cccc4 	addi	r2,r2,13107
811034e0:	e0bf3715 	stw	r2,-804(fp)
811034e4:	009014f4 	movhi	r2,16467
811034e8:	108cccc4 	addi	r2,r2,13107
811034ec:	e0bf3815 	stw	r2,-800(fp)
811034f0:	00900834 	movhi	r2,16416
811034f4:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
811034f8:	00a04534 	movhi	r2,33044
811034fc:	10b5e304 	addi	r2,r2,-10356
81103500:	e0ff3a04 	addi	r3,fp,-792
81103504:	1009883a 	mov	r4,r2
81103508:	0080c004 	movi	r2,768
8110350c:	100d883a 	mov	r6,r2
81103510:	200b883a 	mov	r5,r4
81103514:	1809883a 	mov	r4,r3
81103518:	1112e840 	call	81112e84 <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
8110351c:	e0bf1604 	addi	r2,fp,-936
81103520:	1009883a 	mov	r4,r2
81103524:	1102fa80 	call	81102fa8 <POWER_Read>
81103528:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
8110352c:	e0bf0f17 	ldw	r2,-964(fp)
81103530:	10016026 	beq	r2,zero,81103ab4 <sense_log+0x704>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81103534:	e03f0c15 	stw	zero,-976(fp)
81103538:	00014c06 	br	81103a6c <sense_log+0x6bc>
			SIG = (szVol[i] >> 29) & 0x01;
8110353c:	e0bf0c17 	ldw	r2,-976(fp)
81103540:	1085883a 	add	r2,r2,r2
81103544:	1085883a 	add	r2,r2,r2
81103548:	e0ff0c04 	addi	r3,fp,-976
8110354c:	1885883a 	add	r2,r3,r2
81103550:	10800a04 	addi	r2,r2,40
81103554:	10800017 	ldw	r2,0(r2)
81103558:	1004d77a 	srli	r2,r2,29
8110355c:	1080004c 	andi	r2,r2,1
81103560:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
81103564:	e0bf0c17 	ldw	r2,-976(fp)
81103568:	1085883a 	add	r2,r2,r2
8110356c:	1085883a 	add	r2,r2,r2
81103570:	e0ff0c04 	addi	r3,fp,-976
81103574:	1885883a 	add	r2,r3,r2
81103578:	10800a04 	addi	r2,r2,40
8110357c:	10800017 	ldw	r2,0(r2)
81103580:	1004d73a 	srli	r2,r2,28
81103584:	1080004c 	andi	r2,r2,1
81103588:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110358c:	e0bf0c17 	ldw	r2,-976(fp)
81103590:	1085883a 	add	r2,r2,r2
81103594:	1085883a 	add	r2,r2,r2
81103598:	e0ff0c04 	addi	r3,fp,-976
8110359c:	1885883a 	add	r2,r3,r2
811035a0:	10800a04 	addi	r2,r2,40
811035a4:	10800017 	ldw	r2,0(r2)
811035a8:	1006d1ba 	srli	r3,r2,6
811035ac:	00801034 	movhi	r2,64
811035b0:	10bfffc4 	addi	r2,r2,-1
811035b4:	1884703a 	and	r2,r3,r2
811035b8:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
811035bc:	e0bf1117 	ldw	r2,-956(fp)
811035c0:	1000091e 	bne	r2,zero,811035e8 <sense_log+0x238>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
811035c4:	e13f1217 	ldw	r4,-952(fp)
811035c8:	111113c0 	call	8111113c <__floatunsisf>
811035cc:	1007883a 	mov	r3,r2
811035d0:	0152a034 	movhi	r5,19072
811035d4:	1809883a 	mov	r4,r3
811035d8:	11107c40 	call	811107c4 <__divsf3>
811035dc:	1007883a 	mov	r3,r2
811035e0:	e0ff0d15 	stw	r3,-972(fp)
811035e4:	00000106 	br	811035ec <sense_log+0x23c>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
811035e8:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
811035ec:	e0bf1017 	ldw	r2,-960(fp)
811035f0:	10002626 	beq	r2,zero,8110368c <sense_log+0x2dc>
811035f4:	e0bf1117 	ldw	r2,-956(fp)
811035f8:	10002426 	beq	r2,zero,8110368c <sense_log+0x2dc>
				fVol = fRef * 0.5;
811035fc:	014fc034 	movhi	r5,16128
81103600:	e13f0e17 	ldw	r4,-968(fp)
81103604:	1110c0c0 	call	81110c0c <__mulsf3>
81103608:	1007883a 	mov	r3,r2
8110360c:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103610:	e0ff3a04 	addi	r3,fp,-792
81103614:	e0bf0c17 	ldw	r2,-976(fp)
81103618:	100491ba 	slli	r2,r2,6
8110361c:	18a1883a 	add	r16,r3,r2
81103620:	e0bf0c17 	ldw	r2,-976(fp)
81103624:	1085883a 	add	r2,r2,r2
81103628:	1085883a 	add	r2,r2,r2
8110362c:	e0ff0c04 	addi	r3,fp,-976
81103630:	1885883a 	add	r2,r3,r2
81103634:	10800a04 	addi	r2,r2,40
81103638:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
8110363c:	1023883a 	mov	r17,r2
81103640:	e13f1317 	ldw	r4,-948(fp)
81103644:	11119540 	call	81111954 <__extendsfdf2>
81103648:	1009883a 	mov	r4,r2
8110364c:	180b883a 	mov	r5,r3
81103650:	d9000015 	stw	r4,0(sp)
81103654:	d9400115 	stw	r5,4(sp)
81103658:	880f883a 	mov	r7,r17
8110365c:	800d883a 	mov	r6,r16
81103660:	01604534 	movhi	r5,33044
81103664:	2975b104 	addi	r5,r5,-10556
81103668:	01204534 	movhi	r4,33044
8110366c:	210a2604 	addi	r4,r4,10392
81103670:	11137640 	call	81113764 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103674:	d0a04f17 	ldw	r2,-32452(gp)
81103678:	01604534 	movhi	r5,33044
8110367c:	294a2604 	addi	r5,r5,10392
81103680:	1009883a 	mov	r4,r2
81103684:	1111dd40 	call	81111dd4 <fprintf>
81103688:	0000f506 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (SIG && !MSB) {
8110368c:	e0bf1017 	ldw	r2,-960(fp)
81103690:	10006426 	beq	r2,zero,81103824 <sense_log+0x474>
81103694:	e0bf1117 	ldw	r2,-956(fp)
81103698:	1000621e 	bne	r2,zero,81103824 <sense_log+0x474>
				fVol = fRef * 0.5 * fVolDrop;
8110369c:	e13f0e17 	ldw	r4,-968(fp)
811036a0:	11119540 	call	81111954 <__extendsfdf2>
811036a4:	1011883a 	mov	r8,r2
811036a8:	1813883a 	mov	r9,r3
811036ac:	000d883a 	mov	r6,zero
811036b0:	01cff834 	movhi	r7,16352
811036b4:	4009883a 	mov	r4,r8
811036b8:	480b883a 	mov	r5,r9
811036bc:	11112340 	call	81111234 <__muldf3>
811036c0:	1009883a 	mov	r4,r2
811036c4:	180b883a 	mov	r5,r3
811036c8:	2021883a 	mov	r16,r4
811036cc:	2823883a 	mov	r17,r5
811036d0:	e13f0d17 	ldw	r4,-972(fp)
811036d4:	11119540 	call	81111954 <__extendsfdf2>
811036d8:	1009883a 	mov	r4,r2
811036dc:	180b883a 	mov	r5,r3
811036e0:	200d883a 	mov	r6,r4
811036e4:	280f883a 	mov	r7,r5
811036e8:	8009883a 	mov	r4,r16
811036ec:	880b883a 	mov	r5,r17
811036f0:	11112340 	call	81111234 <__muldf3>
811036f4:	1009883a 	mov	r4,r2
811036f8:	180b883a 	mov	r5,r3
811036fc:	2005883a 	mov	r2,r4
81103700:	2807883a 	mov	r3,r5
81103704:	1009883a 	mov	r4,r2
81103708:	180b883a 	mov	r5,r3
8110370c:	1111a6c0 	call	81111a6c <__truncdfsf2>
81103710:	1007883a 	mov	r3,r2
81103714:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103718:	e0bf0c17 	ldw	r2,-976(fp)
8110371c:	1085883a 	add	r2,r2,r2
81103720:	1085883a 	add	r2,r2,r2
81103724:	e0ff0c04 	addi	r3,fp,-976
81103728:	1885883a 	add	r2,r3,r2
8110372c:	10801604 	addi	r2,r2,88
81103730:	10c00017 	ldw	r3,0(r2)
81103734:	180b883a 	mov	r5,r3
81103738:	e13f0d17 	ldw	r4,-972(fp)
8110373c:	11107c40 	call	811107c4 <__divsf3>
81103740:	1007883a 	mov	r3,r2
81103744:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103748:	e0bf0c17 	ldw	r2,-976(fp)
8110374c:	1085883a 	add	r2,r2,r2
81103750:	1085883a 	add	r2,r2,r2
81103754:	e0ff0c04 	addi	r3,fp,-976
81103758:	1885883a 	add	r2,r3,r2
8110375c:	10802204 	addi	r2,r2,136
81103760:	10c00017 	ldw	r3,0(r2)
81103764:	e17f1417 	ldw	r5,-944(fp)
81103768:	1809883a 	mov	r4,r3
8110376c:	1110c0c0 	call	81110c0c <__mulsf3>
81103770:	1007883a 	mov	r3,r2
81103774:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103778:	e0ff3a04 	addi	r3,fp,-792
8110377c:	e0bf0c17 	ldw	r2,-976(fp)
81103780:	100491ba 	slli	r2,r2,6
81103784:	18a9883a 	add	r20,r3,r2
81103788:	e0bf0c17 	ldw	r2,-976(fp)
8110378c:	1085883a 	add	r2,r2,r2
81103790:	1085883a 	add	r2,r2,r2
81103794:	e0ff0c04 	addi	r3,fp,-976
81103798:	1885883a 	add	r2,r3,r2
8110379c:	10800a04 	addi	r2,r2,40
811037a0:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811037a4:	102b883a 	mov	r21,r2
811037a8:	e13f0d17 	ldw	r4,-972(fp)
811037ac:	11119540 	call	81111954 <__extendsfdf2>
811037b0:	1021883a 	mov	r16,r2
811037b4:	1823883a 	mov	r17,r3
811037b8:	e13f1417 	ldw	r4,-944(fp)
811037bc:	11119540 	call	81111954 <__extendsfdf2>
811037c0:	1025883a 	mov	r18,r2
811037c4:	1827883a 	mov	r19,r3
811037c8:	e13f1517 	ldw	r4,-940(fp)
811037cc:	11119540 	call	81111954 <__extendsfdf2>
811037d0:	1009883a 	mov	r4,r2
811037d4:	180b883a 	mov	r5,r3
811037d8:	d9000415 	stw	r4,16(sp)
811037dc:	d9400515 	stw	r5,20(sp)
811037e0:	dc800215 	stw	r18,8(sp)
811037e4:	dcc00315 	stw	r19,12(sp)
811037e8:	dc000015 	stw	r16,0(sp)
811037ec:	dc400115 	stw	r17,4(sp)
811037f0:	a80f883a 	mov	r7,r21
811037f4:	a00d883a 	mov	r6,r20
811037f8:	01604534 	movhi	r5,33044
811037fc:	2975ba04 	addi	r5,r5,-10520
81103800:	01204534 	movhi	r4,33044
81103804:	210a2604 	addi	r4,r4,10392
81103808:	11137640 	call	81113764 <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
8110380c:	d0a04f17 	ldw	r2,-32452(gp)
81103810:	01604534 	movhi	r5,33044
81103814:	294a2604 	addi	r5,r5,10392
81103818:	1009883a 	mov	r4,r2
8110381c:	1111dd40 	call	81111dd4 <fprintf>
81103820:	00008f06 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (!SIG && MSB) {
81103824:	e0bf1017 	ldw	r2,-960(fp)
81103828:	1000641e 	bne	r2,zero,811039bc <sense_log+0x60c>
8110382c:	e0bf1117 	ldw	r2,-956(fp)
81103830:	10006226 	beq	r2,zero,811039bc <sense_log+0x60c>
				fVol = fRef * 0.5 * fVolDrop;
81103834:	e13f0e17 	ldw	r4,-968(fp)
81103838:	11119540 	call	81111954 <__extendsfdf2>
8110383c:	1011883a 	mov	r8,r2
81103840:	1813883a 	mov	r9,r3
81103844:	000d883a 	mov	r6,zero
81103848:	01cff834 	movhi	r7,16352
8110384c:	4009883a 	mov	r4,r8
81103850:	480b883a 	mov	r5,r9
81103854:	11112340 	call	81111234 <__muldf3>
81103858:	1009883a 	mov	r4,r2
8110385c:	180b883a 	mov	r5,r3
81103860:	2021883a 	mov	r16,r4
81103864:	2823883a 	mov	r17,r5
81103868:	e13f0d17 	ldw	r4,-972(fp)
8110386c:	11119540 	call	81111954 <__extendsfdf2>
81103870:	1009883a 	mov	r4,r2
81103874:	180b883a 	mov	r5,r3
81103878:	200d883a 	mov	r6,r4
8110387c:	280f883a 	mov	r7,r5
81103880:	8009883a 	mov	r4,r16
81103884:	880b883a 	mov	r5,r17
81103888:	11112340 	call	81111234 <__muldf3>
8110388c:	1009883a 	mov	r4,r2
81103890:	180b883a 	mov	r5,r3
81103894:	2005883a 	mov	r2,r4
81103898:	2807883a 	mov	r3,r5
8110389c:	1009883a 	mov	r4,r2
811038a0:	180b883a 	mov	r5,r3
811038a4:	1111a6c0 	call	81111a6c <__truncdfsf2>
811038a8:	1007883a 	mov	r3,r2
811038ac:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811038b0:	e0bf0c17 	ldw	r2,-976(fp)
811038b4:	1085883a 	add	r2,r2,r2
811038b8:	1085883a 	add	r2,r2,r2
811038bc:	e0ff0c04 	addi	r3,fp,-976
811038c0:	1885883a 	add	r2,r3,r2
811038c4:	10801604 	addi	r2,r2,88
811038c8:	10c00017 	ldw	r3,0(r2)
811038cc:	180b883a 	mov	r5,r3
811038d0:	e13f0d17 	ldw	r4,-972(fp)
811038d4:	11107c40 	call	811107c4 <__divsf3>
811038d8:	1007883a 	mov	r3,r2
811038dc:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811038e0:	e0bf0c17 	ldw	r2,-976(fp)
811038e4:	1085883a 	add	r2,r2,r2
811038e8:	1085883a 	add	r2,r2,r2
811038ec:	e0ff0c04 	addi	r3,fp,-976
811038f0:	1885883a 	add	r2,r3,r2
811038f4:	10802204 	addi	r2,r2,136
811038f8:	10c00017 	ldw	r3,0(r2)
811038fc:	e17f1417 	ldw	r5,-944(fp)
81103900:	1809883a 	mov	r4,r3
81103904:	1110c0c0 	call	81110c0c <__mulsf3>
81103908:	1007883a 	mov	r3,r2
8110390c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103910:	e0ff3a04 	addi	r3,fp,-792
81103914:	e0bf0c17 	ldw	r2,-976(fp)
81103918:	100491ba 	slli	r2,r2,6
8110391c:	18a9883a 	add	r20,r3,r2
81103920:	e0bf0c17 	ldw	r2,-976(fp)
81103924:	1085883a 	add	r2,r2,r2
81103928:	1085883a 	add	r2,r2,r2
8110392c:	e0ff0c04 	addi	r3,fp,-976
81103930:	1885883a 	add	r2,r3,r2
81103934:	10800a04 	addi	r2,r2,40
81103938:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110393c:	102b883a 	mov	r21,r2
81103940:	e13f0d17 	ldw	r4,-972(fp)
81103944:	11119540 	call	81111954 <__extendsfdf2>
81103948:	1021883a 	mov	r16,r2
8110394c:	1823883a 	mov	r17,r3
81103950:	e13f1417 	ldw	r4,-944(fp)
81103954:	11119540 	call	81111954 <__extendsfdf2>
81103958:	1025883a 	mov	r18,r2
8110395c:	1827883a 	mov	r19,r3
81103960:	e13f1517 	ldw	r4,-940(fp)
81103964:	11119540 	call	81111954 <__extendsfdf2>
81103968:	1009883a 	mov	r4,r2
8110396c:	180b883a 	mov	r5,r3
81103970:	d9000415 	stw	r4,16(sp)
81103974:	d9400515 	stw	r5,20(sp)
81103978:	dc800215 	stw	r18,8(sp)
8110397c:	dcc00315 	stw	r19,12(sp)
81103980:	dc000015 	stw	r16,0(sp)
81103984:	dc400115 	stw	r17,4(sp)
81103988:	a80f883a 	mov	r7,r21
8110398c:	a00d883a 	mov	r6,r20
81103990:	01604534 	movhi	r5,33044
81103994:	2975ca04 	addi	r5,r5,-10456
81103998:	01204534 	movhi	r4,33044
8110399c:	210a2604 	addi	r4,r4,10392
811039a0:	11137640 	call	81113764 <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
811039a4:	d0a04f17 	ldw	r2,-32452(gp)
811039a8:	01604534 	movhi	r5,33044
811039ac:	294a2604 	addi	r5,r5,10392
811039b0:	1009883a 	mov	r4,r2
811039b4:	1111dd40 	call	81111dd4 <fprintf>
811039b8:	00002906 	br	81103a60 <sense_log+0x6b0>
#endif
			} else if (!SIG && !MSB) {
811039bc:	e0bf1017 	ldw	r2,-960(fp)
811039c0:	1000271e 	bne	r2,zero,81103a60 <sense_log+0x6b0>
811039c4:	e0bf1117 	ldw	r2,-956(fp)
811039c8:	1000251e 	bne	r2,zero,81103a60 <sense_log+0x6b0>
				fVol = -fRef * 0.5;
811039cc:	e0bf0e17 	ldw	r2,-968(fp)
811039d0:	10a0003c 	xorhi	r2,r2,32768
811039d4:	014fc034 	movhi	r5,16128
811039d8:	1009883a 	mov	r4,r2
811039dc:	1110c0c0 	call	81110c0c <__mulsf3>
811039e0:	1007883a 	mov	r3,r2
811039e4:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811039e8:	e0ff3a04 	addi	r3,fp,-792
811039ec:	e0bf0c17 	ldw	r2,-976(fp)
811039f0:	100491ba 	slli	r2,r2,6
811039f4:	18a1883a 	add	r16,r3,r2
811039f8:	e0bf0c17 	ldw	r2,-976(fp)
811039fc:	1085883a 	add	r2,r2,r2
81103a00:	1085883a 	add	r2,r2,r2
81103a04:	e0ff0c04 	addi	r3,fp,-976
81103a08:	1885883a 	add	r2,r3,r2
81103a0c:	10800a04 	addi	r2,r2,40
81103a10:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
81103a14:	1023883a 	mov	r17,r2
81103a18:	e13f1317 	ldw	r4,-948(fp)
81103a1c:	11119540 	call	81111954 <__extendsfdf2>
81103a20:	1009883a 	mov	r4,r2
81103a24:	180b883a 	mov	r5,r3
81103a28:	d9000015 	stw	r4,0(sp)
81103a2c:	d9400115 	stw	r5,4(sp)
81103a30:	880f883a 	mov	r7,r17
81103a34:	800d883a 	mov	r6,r16
81103a38:	01604534 	movhi	r5,33044
81103a3c:	2975da04 	addi	r5,r5,-10392
81103a40:	01204534 	movhi	r4,33044
81103a44:	210a2604 	addi	r4,r4,10392
81103a48:	11137640 	call	81113764 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103a4c:	d0a04f17 	ldw	r2,-32452(gp)
81103a50:	01604534 	movhi	r5,33044
81103a54:	294a2604 	addi	r5,r5,10392
81103a58:	1009883a 	mov	r4,r2
81103a5c:	1111dd40 	call	81111dd4 <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
81103a60:	e0bf0c17 	ldw	r2,-976(fp)
81103a64:	10800044 	addi	r2,r2,1
81103a68:	e0bf0c15 	stw	r2,-976(fp)
81103a6c:	e0bf0c17 	ldw	r2,-976(fp)
81103a70:	10800308 	cmpgei	r2,r2,12
81103a74:	1000021e 	bne	r2,zero,81103a80 <sense_log+0x6d0>
81103a78:	e0bf0f17 	ldw	r2,-964(fp)
81103a7c:	103eaf1e 	bne	r2,zero,8110353c <__reset+0xfb0e353c>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103a80:	00a04534 	movhi	r2,33044
81103a84:	108a2604 	addi	r2,r2,10392
81103a88:	00c00344 	movi	r3,13
81103a8c:	10c00005 	stb	r3,0(r2)
81103a90:	00c00284 	movi	r3,10
81103a94:	10c00045 	stb	r3,1(r2)
81103a98:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103a9c:	d0a04f17 	ldw	r2,-32452(gp)
81103aa0:	01604534 	movhi	r5,33044
81103aa4:	294a2604 	addi	r5,r5,10392
81103aa8:	1009883a 	mov	r4,r2
81103aac:	1111dd40 	call	81111dd4 <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
81103ab0:	00001606 	br	81103b0c <sense_log+0x75c>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
81103ab4:	00a04534 	movhi	r2,33044
81103ab8:	108a2604 	addi	r2,r2,10392
81103abc:	00c01144 	movi	r3,69
81103ac0:	10c00005 	stb	r3,0(r2)
81103ac4:	00c01c84 	movi	r3,114
81103ac8:	10c00045 	stb	r3,1(r2)
81103acc:	00c01c84 	movi	r3,114
81103ad0:	10c00085 	stb	r3,2(r2)
81103ad4:	00c01bc4 	movi	r3,111
81103ad8:	10c000c5 	stb	r3,3(r2)
81103adc:	00c01c84 	movi	r3,114
81103ae0:	10c00105 	stb	r3,4(r2)
81103ae4:	00c00344 	movi	r3,13
81103ae8:	10c00145 	stb	r3,5(r2)
81103aec:	00c00284 	movi	r3,10
81103af0:	10c00185 	stb	r3,6(r2)
81103af4:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103af8:	d0a04f17 	ldw	r2,-32452(gp)
81103afc:	01604534 	movhi	r5,33044
81103b00:	294a2604 	addi	r5,r5,10392
81103b04:	1009883a 	mov	r4,r2
81103b08:	1111dd40 	call	81111dd4 <fprintf>
#endif
	}
}
81103b0c:	0001883a 	nop
81103b10:	e6fffa04 	addi	sp,fp,-24
81103b14:	dfc00717 	ldw	ra,28(sp)
81103b18:	df000617 	ldw	fp,24(sp)
81103b1c:	dd400517 	ldw	r21,20(sp)
81103b20:	dd000417 	ldw	r20,16(sp)
81103b24:	dcc00317 	ldw	r19,12(sp)
81103b28:	dc800217 	ldw	r18,8(sp)
81103b2c:	dc400117 	ldw	r17,4(sp)
81103b30:	dc000017 	ldw	r16,0(sp)
81103b34:	dec00804 	addi	sp,sp,32
81103b38:	f800283a 	ret

81103b3c <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103b3c:	defffc04 	addi	sp,sp,-16
81103b40:	de00012e 	bgeu	sp,et,81103b48 <bSdmaInitM1Dma+0xc>
81103b44:	003b68fa 	trap	3
81103b48:	dfc00315 	stw	ra,12(sp)
81103b4c:	df000215 	stw	fp,8(sp)
81103b50:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103b54:	00800044 	movi	r2,1
81103b58:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103b5c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103b60:	01204534 	movhi	r4,33044
81103b64:	2136a304 	addi	r4,r4,-9588
81103b68:	113b2080 	call	8113b208 <alt_msgdma_open>
81103b6c:	d0a03915 	stw	r2,-32540(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103b70:	d0a03917 	ldw	r2,-32540(gp)
81103b74:	1000021e 	bne	r2,zero,81103b80 <bSdmaInitM1Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103b78:	e03ffe15 	stw	zero,-8(fp)
81103b7c:	00001506 	br	81103bd4 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103b80:	d0a03917 	ldw	r2,-32540(gp)
81103b84:	10800317 	ldw	r2,12(r2)
81103b88:	10800104 	addi	r2,r2,4
81103b8c:	00c00084 	movi	r3,2
81103b90:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b94:	00000a06 	br	81103bc0 <bSdmaInitM1Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103b98:	01000044 	movi	r4,1
81103b9c:	11290ec0 	call	811290ec <usleep>
			usiCounter++;
81103ba0:	e0bfff0b 	ldhu	r2,-4(fp)
81103ba4:	10800044 	addi	r2,r2,1
81103ba8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103bac:	e0bfff0b 	ldhu	r2,-4(fp)
81103bb0:	1084e230 	cmpltui	r2,r2,5000
81103bb4:	1000021e 	bne	r2,zero,81103bc0 <bSdmaInitM1Dma+0x84>
				bStatus = FALSE;
81103bb8:	e03ffe15 	stw	zero,-8(fp)
				break;
81103bbc:	00000506 	br	81103bd4 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103bc0:	d0a03917 	ldw	r2,-32540(gp)
81103bc4:	10800317 	ldw	r2,12(r2)
81103bc8:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103bcc:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103bd0:	103ff11e 	bne	r2,zero,81103b98 <__reset+0xfb0e3b98>
				break;
			}
		}
	}

	return bStatus;
81103bd4:	e0bffe17 	ldw	r2,-8(fp)
}
81103bd8:	e037883a 	mov	sp,fp
81103bdc:	dfc00117 	ldw	ra,4(sp)
81103be0:	df000017 	ldw	fp,0(sp)
81103be4:	dec00204 	addi	sp,sp,8
81103be8:	f800283a 	ret

81103bec <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
81103bec:	defffc04 	addi	sp,sp,-16
81103bf0:	de00012e 	bgeu	sp,et,81103bf8 <bSdmaInitM2Dma+0xc>
81103bf4:	003b68fa 	trap	3
81103bf8:	dfc00315 	stw	ra,12(sp)
81103bfc:	df000215 	stw	fp,8(sp)
81103c00:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103c04:	00800044 	movi	r2,1
81103c08:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103c0c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103c10:	01204534 	movhi	r4,33044
81103c14:	2136a804 	addi	r4,r4,-9568
81103c18:	113b2080 	call	8113b208 <alt_msgdma_open>
81103c1c:	d0a03a15 	stw	r2,-32536(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103c20:	d0a03a17 	ldw	r2,-32536(gp)
81103c24:	1000021e 	bne	r2,zero,81103c30 <bSdmaInitM2Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103c28:	e03ffe15 	stw	zero,-8(fp)
81103c2c:	00001506 	br	81103c84 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103c30:	d0a03a17 	ldw	r2,-32536(gp)
81103c34:	10800317 	ldw	r2,12(r2)
81103c38:	10800104 	addi	r2,r2,4
81103c3c:	00c00084 	movi	r3,2
81103c40:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c44:	00000a06 	br	81103c70 <bSdmaInitM2Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103c48:	01000044 	movi	r4,1
81103c4c:	11290ec0 	call	811290ec <usleep>
			usiCounter++;
81103c50:	e0bfff0b 	ldhu	r2,-4(fp)
81103c54:	10800044 	addi	r2,r2,1
81103c58:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103c5c:	e0bfff0b 	ldhu	r2,-4(fp)
81103c60:	1084e230 	cmpltui	r2,r2,5000
81103c64:	1000021e 	bne	r2,zero,81103c70 <bSdmaInitM2Dma+0x84>
				bStatus = FALSE;
81103c68:	e03ffe15 	stw	zero,-8(fp)
				break;
81103c6c:	00000506 	br	81103c84 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c70:	d0a03a17 	ldw	r2,-32536(gp)
81103c74:	10800317 	ldw	r2,12(r2)
81103c78:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103c7c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c80:	103ff11e 	bne	r2,zero,81103c48 <__reset+0xfb0e3c48>
				break;
			}
		}
	}

	return bStatus;
81103c84:	e0bffe17 	ldw	r2,-8(fp)
}
81103c88:	e037883a 	mov	sp,fp
81103c8c:	dfc00117 	ldw	ra,4(sp)
81103c90:	df000017 	ldw	fp,0(sp)
81103c94:	dec00204 	addi	sp,sp,8
81103c98:	f800283a 	ret

81103c9c <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103c9c:	deffe904 	addi	sp,sp,-92
81103ca0:	de00012e 	bgeu	sp,et,81103ca8 <bSdmaDmaM1Transfer+0xc>
81103ca4:	003b68fa 	trap	3
81103ca8:	dfc01615 	stw	ra,88(sp)
81103cac:	df001515 	stw	fp,84(sp)
81103cb0:	dc001415 	stw	r16,80(sp)
81103cb4:	df001504 	addi	fp,sp,84
81103cb8:	e13ffb15 	stw	r4,-20(fp)
81103cbc:	2809883a 	mov	r4,r5
81103cc0:	3007883a 	mov	r3,r6
81103cc4:	3805883a 	mov	r2,r7
81103cc8:	e13ffc0d 	sth	r4,-16(fp)
81103ccc:	e0fffd05 	stb	r3,-12(fp)
81103cd0:	e0bffe05 	stb	r2,-8(fp)
81103cd4:	defff004 	addi	sp,sp,-64
81103cd8:	d8800904 	addi	r2,sp,36
81103cdc:	108007c4 	addi	r2,r2,31
81103ce0:	1004d17a 	srli	r2,r2,5
81103ce4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103ce8:	00800044 	movi	r2,1
81103cec:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103cf0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103cf4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103cf8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103cfc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103d00:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103d04:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103d08:	e0bffe03 	ldbu	r2,-8(fp)
81103d0c:	10c00268 	cmpgeui	r3,r2,9
81103d10:	1800a51e 	bne	r3,zero,81103fa8 <bSdmaDmaM1Transfer+0x30c>
81103d14:	100690ba 	slli	r3,r2,2
81103d18:	00a04434 	movhi	r2,33040
81103d1c:	108f4b04 	addi	r2,r2,15660
81103d20:	1885883a 	add	r2,r3,r2
81103d24:	10800017 	ldw	r2,0(r2)
81103d28:	1000683a 	jmp	r2
81103d2c:	81103fa8 	cmpgeui	r4,r16,16638
81103d30:	81103d50 	cmplti	r4,r16,16629
81103d34:	81103d94 	ori	r4,r16,16630
81103d38:	81103de0 	cmpeqi	r4,r16,16631
81103d3c:	81103e2c 	andhi	r4,r16,16632
81103d40:	81103e78 	rdprs	r4,r16,16633
81103d44:	81103ec4 	addi	r4,r16,16635
81103d48:	81103f10 	cmplti	r4,r16,16636
81103d4c:	81103f5c 	xori	r4,r16,16637
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103d50:	e0bffd03 	ldbu	r2,-12(fp)
81103d54:	10000326 	beq	r2,zero,81103d64 <bSdmaDmaM1Transfer+0xc8>
81103d58:	10800060 	cmpeqi	r2,r2,1
81103d5c:	1000051e 	bne	r2,zero,81103d74 <bSdmaDmaM1Transfer+0xd8>
81103d60:	00000906 	br	81103d88 <bSdmaDmaM1Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103d64:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103d68:	00800044 	movi	r2,1
81103d6c:	e0bff715 	stw	r2,-36(fp)
			break;
81103d70:	00000706 	br	81103d90 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103d74:	00800074 	movhi	r2,1
81103d78:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103d7c:	00800044 	movi	r2,1
81103d80:	e0bff715 	stw	r2,-36(fp)
			break;
81103d84:	00000206 	br	81103d90 <bSdmaDmaM1Transfer+0xf4>
		default:
			bStatus = FALSE;
81103d88:	e03ff415 	stw	zero,-48(fp)
			break;
81103d8c:	0001883a 	nop
		}
		break;
81103d90:	00008706 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103d94:	e0bffd03 	ldbu	r2,-12(fp)
81103d98:	10000326 	beq	r2,zero,81103da8 <bSdmaDmaM1Transfer+0x10c>
81103d9c:	10800060 	cmpeqi	r2,r2,1
81103da0:	1000061e 	bne	r2,zero,81103dbc <bSdmaDmaM1Transfer+0x120>
81103da4:	00000b06 	br	81103dd4 <bSdmaDmaM1Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103da8:	00880004 	movi	r2,8192
81103dac:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103db0:	00800044 	movi	r2,1
81103db4:	e0bff715 	stw	r2,-36(fp)
			break;
81103db8:	00000806 	br	81103ddc <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103dbc:	00800074 	movhi	r2,1
81103dc0:	10880004 	addi	r2,r2,8192
81103dc4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103dc8:	00800044 	movi	r2,1
81103dcc:	e0bff715 	stw	r2,-36(fp)
			break;
81103dd0:	00000206 	br	81103ddc <bSdmaDmaM1Transfer+0x140>
		default:
			bStatus = FALSE;
81103dd4:	e03ff415 	stw	zero,-48(fp)
			break;
81103dd8:	0001883a 	nop
		}
		break;
81103ddc:	00007406 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103de0:	e0bffd03 	ldbu	r2,-12(fp)
81103de4:	10000326 	beq	r2,zero,81103df4 <bSdmaDmaM1Transfer+0x158>
81103de8:	10800060 	cmpeqi	r2,r2,1
81103dec:	1000061e 	bne	r2,zero,81103e08 <bSdmaDmaM1Transfer+0x16c>
81103df0:	00000b06 	br	81103e20 <bSdmaDmaM1Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103df4:	00900004 	movi	r2,16384
81103df8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103dfc:	00800044 	movi	r2,1
81103e00:	e0bff715 	stw	r2,-36(fp)
			break;
81103e04:	00000806 	br	81103e28 <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103e08:	00800074 	movhi	r2,1
81103e0c:	10900004 	addi	r2,r2,16384
81103e10:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103e14:	00800044 	movi	r2,1
81103e18:	e0bff715 	stw	r2,-36(fp)
			break;
81103e1c:	00000206 	br	81103e28 <bSdmaDmaM1Transfer+0x18c>
		default:
			bStatus = FALSE;
81103e20:	e03ff415 	stw	zero,-48(fp)
			break;
81103e24:	0001883a 	nop
		}
		break;
81103e28:	00006106 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103e2c:	e0bffd03 	ldbu	r2,-12(fp)
81103e30:	10000326 	beq	r2,zero,81103e40 <bSdmaDmaM1Transfer+0x1a4>
81103e34:	10800060 	cmpeqi	r2,r2,1
81103e38:	1000061e 	bne	r2,zero,81103e54 <bSdmaDmaM1Transfer+0x1b8>
81103e3c:	00000b06 	br	81103e6c <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103e40:	00980004 	movi	r2,24576
81103e44:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103e48:	00800044 	movi	r2,1
81103e4c:	e0bff715 	stw	r2,-36(fp)
			break;
81103e50:	00000806 	br	81103e74 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103e54:	00800074 	movhi	r2,1
81103e58:	10980004 	addi	r2,r2,24576
81103e5c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103e60:	00800044 	movi	r2,1
81103e64:	e0bff715 	stw	r2,-36(fp)
			break;
81103e68:	00000206 	br	81103e74 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bStatus = FALSE;
81103e6c:	e03ff415 	stw	zero,-48(fp)
			break;
81103e70:	0001883a 	nop
		}
		break;
81103e74:	00004e06 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103e78:	e0bffd03 	ldbu	r2,-12(fp)
81103e7c:	10000326 	beq	r2,zero,81103e8c <bSdmaDmaM1Transfer+0x1f0>
81103e80:	10800060 	cmpeqi	r2,r2,1
81103e84:	1000061e 	bne	r2,zero,81103ea0 <bSdmaDmaM1Transfer+0x204>
81103e88:	00000b06 	br	81103eb8 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103e8c:	00a00014 	movui	r2,32768
81103e90:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103e94:	00800044 	movi	r2,1
81103e98:	e0bff715 	stw	r2,-36(fp)
			break;
81103e9c:	00000806 	br	81103ec0 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103ea0:	008000b4 	movhi	r2,2
81103ea4:	10a00004 	addi	r2,r2,-32768
81103ea8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103eac:	00800044 	movi	r2,1
81103eb0:	e0bff715 	stw	r2,-36(fp)
			break;
81103eb4:	00000206 	br	81103ec0 <bSdmaDmaM1Transfer+0x224>
		default:
			bStatus = FALSE;
81103eb8:	e03ff415 	stw	zero,-48(fp)
			break;
81103ebc:	0001883a 	nop
		}
		break;
81103ec0:	00003b06 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103ec4:	e0bffd03 	ldbu	r2,-12(fp)
81103ec8:	10000326 	beq	r2,zero,81103ed8 <bSdmaDmaM1Transfer+0x23c>
81103ecc:	10800060 	cmpeqi	r2,r2,1
81103ed0:	1000061e 	bne	r2,zero,81103eec <bSdmaDmaM1Transfer+0x250>
81103ed4:	00000b06 	br	81103f04 <bSdmaDmaM1Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103ed8:	00a80014 	movui	r2,40960
81103edc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103ee0:	00800044 	movi	r2,1
81103ee4:	e0bff715 	stw	r2,-36(fp)
			break;
81103ee8:	00000806 	br	81103f0c <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103eec:	008000b4 	movhi	r2,2
81103ef0:	10a80004 	addi	r2,r2,-24576
81103ef4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103ef8:	00800044 	movi	r2,1
81103efc:	e0bff715 	stw	r2,-36(fp)
			break;
81103f00:	00000206 	br	81103f0c <bSdmaDmaM1Transfer+0x270>
		default:
			bStatus = FALSE;
81103f04:	e03ff415 	stw	zero,-48(fp)
			break;
81103f08:	0001883a 	nop
		}
		break;
81103f0c:	00002806 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103f10:	e0bffd03 	ldbu	r2,-12(fp)
81103f14:	10000326 	beq	r2,zero,81103f24 <bSdmaDmaM1Transfer+0x288>
81103f18:	10800060 	cmpeqi	r2,r2,1
81103f1c:	1000061e 	bne	r2,zero,81103f38 <bSdmaDmaM1Transfer+0x29c>
81103f20:	00000b06 	br	81103f50 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103f24:	00b00014 	movui	r2,49152
81103f28:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103f2c:	00800044 	movi	r2,1
81103f30:	e0bff715 	stw	r2,-36(fp)
			break;
81103f34:	00000806 	br	81103f58 <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103f38:	008000b4 	movhi	r2,2
81103f3c:	10b00004 	addi	r2,r2,-16384
81103f40:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103f44:	00800044 	movi	r2,1
81103f48:	e0bff715 	stw	r2,-36(fp)
			break;
81103f4c:	00000206 	br	81103f58 <bSdmaDmaM1Transfer+0x2bc>
		default:
			bStatus = FALSE;
81103f50:	e03ff415 	stw	zero,-48(fp)
			break;
81103f54:	0001883a 	nop
		}
		break;
81103f58:	00001506 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103f5c:	e0bffd03 	ldbu	r2,-12(fp)
81103f60:	10000326 	beq	r2,zero,81103f70 <bSdmaDmaM1Transfer+0x2d4>
81103f64:	10800060 	cmpeqi	r2,r2,1
81103f68:	1000061e 	bne	r2,zero,81103f84 <bSdmaDmaM1Transfer+0x2e8>
81103f6c:	00000b06 	br	81103f9c <bSdmaDmaM1Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103f70:	00b80014 	movui	r2,57344
81103f74:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103f78:	00800044 	movi	r2,1
81103f7c:	e0bff715 	stw	r2,-36(fp)
			break;
81103f80:	00000806 	br	81103fa4 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103f84:	008000b4 	movhi	r2,2
81103f88:	10b80004 	addi	r2,r2,-8192
81103f8c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103f90:	00800044 	movi	r2,1
81103f94:	e0bff715 	stw	r2,-36(fp)
			break;
81103f98:	00000206 	br	81103fa4 <bSdmaDmaM1Transfer+0x308>
		default:
			bStatus = FALSE;
81103f9c:	e03ff415 	stw	zero,-48(fp)
			break;
81103fa0:	0001883a 	nop
		}
		break;
81103fa4:	00000206 	br	81103fb0 <bSdmaDmaM1Transfer+0x314>
	default:
		bStatus = FALSE;
81103fa8:	e03ff415 	stw	zero,-48(fp)
		break;
81103fac:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
81103fb0:	e0bffb17 	ldw	r2,-20(fp)
81103fb4:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103fb8:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103fbc:	e0bff417 	ldw	r2,-48(fp)
81103fc0:	10003b26 	beq	r2,zero,811040b0 <bSdmaDmaM1Transfer+0x414>
		if (pxDmaM1Dev == NULL) {
81103fc4:	d0a03917 	ldw	r2,-32540(gp)
81103fc8:	1000021e 	bne	r2,zero,81103fd4 <bSdmaDmaM1Transfer+0x338>
			bStatus = FALSE;
81103fcc:	e03ff415 	stw	zero,-48(fp)
81103fd0:	00003706 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103fd4:	e03ff50d 	sth	zero,-44(fp)
81103fd8:	00003206 	br	811040a4 <bSdmaDmaM1Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103fdc:	01000044 	movi	r4,1
81103fe0:	11276380 	call	81127638 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103fe4:	d0a03917 	ldw	r2,-32540(gp)
81103fe8:	10800317 	ldw	r2,12(r2)
81103fec:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103ff0:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103ff4:	103ff91e 	bne	r2,zero,81103fdc <__reset+0xfb0e3fdc>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103ff8:	d2203917 	ldw	r8,-32540(gp)
81103ffc:	e17ff817 	ldw	r5,-32(fp)
81104000:	e1bff617 	ldw	r6,-40(fp)
81104004:	e0bff917 	ldw	r2,-28(fp)
81104008:	e0fff717 	ldw	r3,-36(fp)
8110400c:	01000044 	movi	r4,1
81104010:	d9000815 	stw	r4,32(sp)
81104014:	01000044 	movi	r4,1
81104018:	d9000715 	stw	r4,28(sp)
8110401c:	01000044 	movi	r4,1
81104020:	d9000615 	stw	r4,24(sp)
81104024:	01000044 	movi	r4,1
81104028:	d9000515 	stw	r4,20(sp)
8110402c:	01000044 	movi	r4,1
81104030:	d9000415 	stw	r4,16(sp)
81104034:	d8c00315 	stw	r3,12(sp)
81104038:	d8800215 	stw	r2,8(sp)
8110403c:	e0bffa17 	ldw	r2,-24(fp)
81104040:	d8800115 	stw	r2,4(sp)
81104044:	00802204 	movi	r2,136
81104048:	d8800015 	stw	r2,0(sp)
8110404c:	300f883a 	mov	r7,r6
81104050:	280d883a 	mov	r6,r5
81104054:	800b883a 	mov	r5,r16
81104058:	4009883a 	mov	r4,r8
8110405c:	1106bf00 	call	81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104060:	10000226 	beq	r2,zero,8110406c <bSdmaDmaM1Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81104064:	e03ff415 	stw	zero,-48(fp)
					break;
81104068:	00001106 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
8110406c:	d0a03917 	ldw	r2,-32540(gp)
81104070:	800b883a 	mov	r5,r16
81104074:	1009883a 	mov	r4,r2
81104078:	1106cf40 	call	81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>
8110407c:	10000226 	beq	r2,zero,81104088 <bSdmaDmaM1Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104080:	e03ff415 	stw	zero,-48(fp)
						break;
81104084:	00000a06 	br	811040b0 <bSdmaDmaM1Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104088:	e0bff817 	ldw	r2,-32(fp)
8110408c:	10802204 	addi	r2,r2,136
81104090:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81104094:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104098:	e0bff50b 	ldhu	r2,-44(fp)
8110409c:	10800044 	addi	r2,r2,1
811040a0:	e0bff50d 	sth	r2,-44(fp)
811040a4:	e0fff50b 	ldhu	r3,-44(fp)
811040a8:	e0bffc0b 	ldhu	r2,-16(fp)
811040ac:	18bfcd36 	bltu	r3,r2,81103fe4 <__reset+0xfb0e3fe4>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811040b0:	e0bff417 	ldw	r2,-48(fp)
}
811040b4:	e6ffff04 	addi	sp,fp,-4
811040b8:	dfc00217 	ldw	ra,8(sp)
811040bc:	df000117 	ldw	fp,4(sp)
811040c0:	dc000017 	ldw	r16,0(sp)
811040c4:	dec00304 	addi	sp,sp,12
811040c8:	f800283a 	ret

811040cc <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
811040cc:	deffe904 	addi	sp,sp,-92
811040d0:	de00012e 	bgeu	sp,et,811040d8 <bSdmaDmaM2Transfer+0xc>
811040d4:	003b68fa 	trap	3
811040d8:	dfc01615 	stw	ra,88(sp)
811040dc:	df001515 	stw	fp,84(sp)
811040e0:	dc001415 	stw	r16,80(sp)
811040e4:	df001504 	addi	fp,sp,84
811040e8:	e13ffb15 	stw	r4,-20(fp)
811040ec:	2809883a 	mov	r4,r5
811040f0:	3007883a 	mov	r3,r6
811040f4:	3805883a 	mov	r2,r7
811040f8:	e13ffc0d 	sth	r4,-16(fp)
811040fc:	e0fffd05 	stb	r3,-12(fp)
81104100:	e0bffe05 	stb	r2,-8(fp)
81104104:	defff004 	addi	sp,sp,-64
81104108:	d8800904 	addi	r2,sp,36
8110410c:	108007c4 	addi	r2,r2,31
81104110:	1004d17a 	srli	r2,r2,5
81104114:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81104118:	00800044 	movi	r2,1
8110411c:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81104120:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81104124:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81104128:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
8110412c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81104130:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81104134:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81104138:	e0bffe03 	ldbu	r2,-8(fp)
8110413c:	10c00268 	cmpgeui	r3,r2,9
81104140:	1800a51e 	bne	r3,zero,811043d8 <bSdmaDmaM2Transfer+0x30c>
81104144:	100690ba 	slli	r3,r2,2
81104148:	00a04434 	movhi	r2,33040
8110414c:	10905704 	addi	r2,r2,16732
81104150:	1885883a 	add	r2,r3,r2
81104154:	10800017 	ldw	r2,0(r2)
81104158:	1000683a 	jmp	r2
8110415c:	811043d8 	cmpnei	r4,r16,16655
81104160:	81104180 	call	88110418 <__reset+0x20f0418>
81104164:	811041c4 	addi	r4,r16,16647
81104168:	81104210 	cmplti	r4,r16,16648
8110416c:	8110425c 	xori	r4,r16,16649
81104170:	811042a8 	cmpgeui	r4,r16,16650
81104174:	811042f4 	orhi	r4,r16,16651
81104178:	81104340 	call	88110434 <__reset+0x20f0434>
8110417c:	8110438c 	andi	r4,r16,16654
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81104180:	e0bffd03 	ldbu	r2,-12(fp)
81104184:	10000326 	beq	r2,zero,81104194 <bSdmaDmaM2Transfer+0xc8>
81104188:	10800060 	cmpeqi	r2,r2,1
8110418c:	1000051e 	bne	r2,zero,811041a4 <bSdmaDmaM2Transfer+0xd8>
81104190:	00000906 	br	811041b8 <bSdmaDmaM2Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81104194:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81104198:	00800044 	movi	r2,1
8110419c:	e0bff715 	stw	r2,-36(fp)
			break;
811041a0:	00000706 	br	811041c0 <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
811041a4:	00800074 	movhi	r2,1
811041a8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
811041ac:	00800044 	movi	r2,1
811041b0:	e0bff715 	stw	r2,-36(fp)
			break;
811041b4:	00000206 	br	811041c0 <bSdmaDmaM2Transfer+0xf4>
		default:
			bStatus = FALSE;
811041b8:	e03ff415 	stw	zero,-48(fp)
			break;
811041bc:	0001883a 	nop
		}
		break;
811041c0:	00008706 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
811041c4:	e0bffd03 	ldbu	r2,-12(fp)
811041c8:	10000326 	beq	r2,zero,811041d8 <bSdmaDmaM2Transfer+0x10c>
811041cc:	10800060 	cmpeqi	r2,r2,1
811041d0:	1000061e 	bne	r2,zero,811041ec <bSdmaDmaM2Transfer+0x120>
811041d4:	00000b06 	br	81104204 <bSdmaDmaM2Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
811041d8:	00880004 	movi	r2,8192
811041dc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
811041e0:	00800044 	movi	r2,1
811041e4:	e0bff715 	stw	r2,-36(fp)
			break;
811041e8:	00000806 	br	8110420c <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
811041ec:	00800074 	movhi	r2,1
811041f0:	10880004 	addi	r2,r2,8192
811041f4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
811041f8:	00800044 	movi	r2,1
811041fc:	e0bff715 	stw	r2,-36(fp)
			break;
81104200:	00000206 	br	8110420c <bSdmaDmaM2Transfer+0x140>
		default:
			bStatus = FALSE;
81104204:	e03ff415 	stw	zero,-48(fp)
			break;
81104208:	0001883a 	nop
		}
		break;
8110420c:	00007406 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81104210:	e0bffd03 	ldbu	r2,-12(fp)
81104214:	10000326 	beq	r2,zero,81104224 <bSdmaDmaM2Transfer+0x158>
81104218:	10800060 	cmpeqi	r2,r2,1
8110421c:	1000061e 	bne	r2,zero,81104238 <bSdmaDmaM2Transfer+0x16c>
81104220:	00000b06 	br	81104250 <bSdmaDmaM2Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81104224:	00900004 	movi	r2,16384
81104228:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
8110422c:	00800044 	movi	r2,1
81104230:	e0bff715 	stw	r2,-36(fp)
			break;
81104234:	00000806 	br	81104258 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81104238:	00800074 	movhi	r2,1
8110423c:	10900004 	addi	r2,r2,16384
81104240:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81104244:	00800044 	movi	r2,1
81104248:	e0bff715 	stw	r2,-36(fp)
			break;
8110424c:	00000206 	br	81104258 <bSdmaDmaM2Transfer+0x18c>
		default:
			bStatus = FALSE;
81104250:	e03ff415 	stw	zero,-48(fp)
			break;
81104254:	0001883a 	nop
		}
		break;
81104258:	00006106 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
8110425c:	e0bffd03 	ldbu	r2,-12(fp)
81104260:	10000326 	beq	r2,zero,81104270 <bSdmaDmaM2Transfer+0x1a4>
81104264:	10800060 	cmpeqi	r2,r2,1
81104268:	1000061e 	bne	r2,zero,81104284 <bSdmaDmaM2Transfer+0x1b8>
8110426c:	00000b06 	br	8110429c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81104270:	00980004 	movi	r2,24576
81104274:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81104278:	00800044 	movi	r2,1
8110427c:	e0bff715 	stw	r2,-36(fp)
			break;
81104280:	00000806 	br	811042a4 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81104284:	00800074 	movhi	r2,1
81104288:	10980004 	addi	r2,r2,24576
8110428c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81104290:	00800044 	movi	r2,1
81104294:	e0bff715 	stw	r2,-36(fp)
			break;
81104298:	00000206 	br	811042a4 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bStatus = FALSE;
8110429c:	e03ff415 	stw	zero,-48(fp)
			break;
811042a0:	0001883a 	nop
		}
		break;
811042a4:	00004e06 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
811042a8:	e0bffd03 	ldbu	r2,-12(fp)
811042ac:	10000326 	beq	r2,zero,811042bc <bSdmaDmaM2Transfer+0x1f0>
811042b0:	10800060 	cmpeqi	r2,r2,1
811042b4:	1000061e 	bne	r2,zero,811042d0 <bSdmaDmaM2Transfer+0x204>
811042b8:	00000b06 	br	811042e8 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
811042bc:	00a00014 	movui	r2,32768
811042c0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
811042c4:	00800044 	movi	r2,1
811042c8:	e0bff715 	stw	r2,-36(fp)
			break;
811042cc:	00000806 	br	811042f0 <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
811042d0:	008000b4 	movhi	r2,2
811042d4:	10a00004 	addi	r2,r2,-32768
811042d8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
811042dc:	00800044 	movi	r2,1
811042e0:	e0bff715 	stw	r2,-36(fp)
			break;
811042e4:	00000206 	br	811042f0 <bSdmaDmaM2Transfer+0x224>
		default:
			bStatus = FALSE;
811042e8:	e03ff415 	stw	zero,-48(fp)
			break;
811042ec:	0001883a 	nop
		}
		break;
811042f0:	00003b06 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
811042f4:	e0bffd03 	ldbu	r2,-12(fp)
811042f8:	10000326 	beq	r2,zero,81104308 <bSdmaDmaM2Transfer+0x23c>
811042fc:	10800060 	cmpeqi	r2,r2,1
81104300:	1000061e 	bne	r2,zero,8110431c <bSdmaDmaM2Transfer+0x250>
81104304:	00000b06 	br	81104334 <bSdmaDmaM2Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81104308:	00a80014 	movui	r2,40960
8110430c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81104310:	00800044 	movi	r2,1
81104314:	e0bff715 	stw	r2,-36(fp)
			break;
81104318:	00000806 	br	8110433c <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
8110431c:	008000b4 	movhi	r2,2
81104320:	10a80004 	addi	r2,r2,-24576
81104324:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81104328:	00800044 	movi	r2,1
8110432c:	e0bff715 	stw	r2,-36(fp)
			break;
81104330:	00000206 	br	8110433c <bSdmaDmaM2Transfer+0x270>
		default:
			bStatus = FALSE;
81104334:	e03ff415 	stw	zero,-48(fp)
			break;
81104338:	0001883a 	nop
		}
		break;
8110433c:	00002806 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81104340:	e0bffd03 	ldbu	r2,-12(fp)
81104344:	10000326 	beq	r2,zero,81104354 <bSdmaDmaM2Transfer+0x288>
81104348:	10800060 	cmpeqi	r2,r2,1
8110434c:	1000061e 	bne	r2,zero,81104368 <bSdmaDmaM2Transfer+0x29c>
81104350:	00000b06 	br	81104380 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81104354:	00b00014 	movui	r2,49152
81104358:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
8110435c:	00800044 	movi	r2,1
81104360:	e0bff715 	stw	r2,-36(fp)
			break;
81104364:	00000806 	br	81104388 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81104368:	008000b4 	movhi	r2,2
8110436c:	10b00004 	addi	r2,r2,-16384
81104370:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81104374:	00800044 	movi	r2,1
81104378:	e0bff715 	stw	r2,-36(fp)
			break;
8110437c:	00000206 	br	81104388 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bStatus = FALSE;
81104380:	e03ff415 	stw	zero,-48(fp)
			break;
81104384:	0001883a 	nop
		}
		break;
81104388:	00001506 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110438c:	e0bffd03 	ldbu	r2,-12(fp)
81104390:	10000326 	beq	r2,zero,811043a0 <bSdmaDmaM2Transfer+0x2d4>
81104394:	10800060 	cmpeqi	r2,r2,1
81104398:	1000061e 	bne	r2,zero,811043b4 <bSdmaDmaM2Transfer+0x2e8>
8110439c:	00000b06 	br	811043cc <bSdmaDmaM2Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
811043a0:	00b80014 	movui	r2,57344
811043a4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
811043a8:	00800044 	movi	r2,1
811043ac:	e0bff715 	stw	r2,-36(fp)
			break;
811043b0:	00000806 	br	811043d4 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
811043b4:	008000b4 	movhi	r2,2
811043b8:	10b80004 	addi	r2,r2,-8192
811043bc:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
811043c0:	00800044 	movi	r2,1
811043c4:	e0bff715 	stw	r2,-36(fp)
			break;
811043c8:	00000206 	br	811043d4 <bSdmaDmaM2Transfer+0x308>
		default:
			bStatus = FALSE;
811043cc:	e03ff415 	stw	zero,-48(fp)
			break;
811043d0:	0001883a 	nop
		}
		break;
811043d4:	00000206 	br	811043e0 <bSdmaDmaM2Transfer+0x314>
	default:
		bStatus = FALSE;
811043d8:	e03ff415 	stw	zero,-48(fp)
		break;
811043dc:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
811043e0:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
811043e4:	00a00034 	movhi	r2,32768
811043e8:	1885883a 	add	r2,r3,r2
811043ec:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
811043f0:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
811043f4:	e0bff417 	ldw	r2,-48(fp)
811043f8:	10003b26 	beq	r2,zero,811044e8 <bSdmaDmaM2Transfer+0x41c>
		if (pxDmaM2Dev == NULL) {
811043fc:	d0a03a17 	ldw	r2,-32536(gp)
81104400:	1000021e 	bne	r2,zero,8110440c <bSdmaDmaM2Transfer+0x340>
			bStatus = FALSE;
81104404:	e03ff415 	stw	zero,-48(fp)
81104408:	00003706 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
8110440c:	e03ff50d 	sth	zero,-44(fp)
81104410:	00003206 	br	811044dc <bSdmaDmaM2Transfer+0x410>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81104414:	01000044 	movi	r4,1
81104418:	11276380 	call	81127638 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
8110441c:	d0a03a17 	ldw	r2,-32536(gp)
81104420:	10800317 	ldw	r2,12(r2)
81104424:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81104428:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
8110442c:	103ff91e 	bne	r2,zero,81104414 <__reset+0xfb0e4414>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
81104430:	d2203a17 	ldw	r8,-32536(gp)
81104434:	e17ff817 	ldw	r5,-32(fp)
81104438:	e1bff617 	ldw	r6,-40(fp)
8110443c:	e0bff917 	ldw	r2,-28(fp)
81104440:	e0fff717 	ldw	r3,-36(fp)
81104444:	01000044 	movi	r4,1
81104448:	d9000815 	stw	r4,32(sp)
8110444c:	01000044 	movi	r4,1
81104450:	d9000715 	stw	r4,28(sp)
81104454:	01000044 	movi	r4,1
81104458:	d9000615 	stw	r4,24(sp)
8110445c:	01000044 	movi	r4,1
81104460:	d9000515 	stw	r4,20(sp)
81104464:	01000044 	movi	r4,1
81104468:	d9000415 	stw	r4,16(sp)
8110446c:	d8c00315 	stw	r3,12(sp)
81104470:	d8800215 	stw	r2,8(sp)
81104474:	e0bffa17 	ldw	r2,-24(fp)
81104478:	d8800115 	stw	r2,4(sp)
8110447c:	00802204 	movi	r2,136
81104480:	d8800015 	stw	r2,0(sp)
81104484:	300f883a 	mov	r7,r6
81104488:	280d883a 	mov	r6,r5
8110448c:	800b883a 	mov	r5,r16
81104490:	4009883a 	mov	r4,r8
81104494:	1106bf00 	call	81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104498:	10000226 	beq	r2,zero,811044a4 <bSdmaDmaM2Transfer+0x3d8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
8110449c:	e03ff415 	stw	zero,-48(fp)
					break;
811044a0:	00001106 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
811044a4:	d0a03a17 	ldw	r2,-32536(gp)
811044a8:	800b883a 	mov	r5,r16
811044ac:	1009883a 	mov	r4,r2
811044b0:	1106cf40 	call	81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>
811044b4:	10000226 	beq	r2,zero,811044c0 <bSdmaDmaM2Transfer+0x3f4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
811044b8:	e03ff415 	stw	zero,-48(fp)
						break;
811044bc:	00000a06 	br	811044e8 <bSdmaDmaM2Transfer+0x41c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
811044c0:	e0bff817 	ldw	r2,-32(fp)
811044c4:	10802204 	addi	r2,r2,136
811044c8:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
811044cc:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
811044d0:	e0bff50b 	ldhu	r2,-44(fp)
811044d4:	10800044 	addi	r2,r2,1
811044d8:	e0bff50d 	sth	r2,-44(fp)
811044dc:	e0fff50b 	ldhu	r3,-44(fp)
811044e0:	e0bffc0b 	ldhu	r2,-16(fp)
811044e4:	18bfcd36 	bltu	r3,r2,8110441c <__reset+0xfb0e441c>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
811044e8:	e0bff417 	ldw	r2,-48(fp)
}
811044ec:	e6ffff04 	addi	sp,fp,-4
811044f0:	dfc00217 	ldw	ra,8(sp)
811044f4:	df000117 	ldw	fp,4(sp)
811044f8:	dc000017 	ldw	r16,0(sp)
811044fc:	dec00304 	addi	sp,sp,12
81104500:	f800283a 	ret

81104504 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81104504:	defffc04 	addi	sp,sp,-16
81104508:	de00012e 	bgeu	sp,et,81104510 <vFeebCh1HandleIrq+0xc>
8110450c:	003b68fa 	trap	3
81104510:	dfc00315 	stw	ra,12(sp)
81104514:	df000215 	stw	fp,8(sp)
81104518:	df000204 	addi	fp,sp,8
8110451c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104520:	e0bfff17 	ldw	r2,-4(fp)
81104524:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
81104528:	11047040 	call	81104704 <vFeebCh1IrqFlagClrBufferEmpty>
}
8110452c:	0001883a 	nop
81104530:	e037883a 	mov	sp,fp
81104534:	dfc00117 	ldw	ra,4(sp)
81104538:	df000017 	ldw	fp,0(sp)
8110453c:	dec00204 	addi	sp,sp,8
81104540:	f800283a 	ret

81104544 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
81104544:	defffc04 	addi	sp,sp,-16
81104548:	de00012e 	bgeu	sp,et,81104550 <vFeebCh2HandleIrq+0xc>
8110454c:	003b68fa 	trap	3
81104550:	dfc00315 	stw	ra,12(sp)
81104554:	df000215 	stw	fp,8(sp)
81104558:	df000204 	addi	fp,sp,8
8110455c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104560:	e0bfff17 	ldw	r2,-4(fp)
81104564:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
81104568:	11047480 	call	81104748 <vFeebCh2IrqFlagClrBufferEmpty>
}
8110456c:	0001883a 	nop
81104570:	e037883a 	mov	sp,fp
81104574:	dfc00117 	ldw	ra,4(sp)
81104578:	df000017 	ldw	fp,0(sp)
8110457c:	dec00204 	addi	sp,sp,8
81104580:	f800283a 	ret

81104584 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104584:	defffc04 	addi	sp,sp,-16
81104588:	de00012e 	bgeu	sp,et,81104590 <vFeebCh3HandleIrq+0xc>
8110458c:	003b68fa 	trap	3
81104590:	dfc00315 	stw	ra,12(sp)
81104594:	df000215 	stw	fp,8(sp)
81104598:	df000204 	addi	fp,sp,8
8110459c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045a0:	e0bfff17 	ldw	r2,-4(fp)
811045a4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
811045a8:	110478c0 	call	8110478c <vFeebCh3IrqFlagClrBufferEmpty>
}
811045ac:	0001883a 	nop
811045b0:	e037883a 	mov	sp,fp
811045b4:	dfc00117 	ldw	ra,4(sp)
811045b8:	df000017 	ldw	fp,0(sp)
811045bc:	dec00204 	addi	sp,sp,8
811045c0:	f800283a 	ret

811045c4 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
811045c4:	defffc04 	addi	sp,sp,-16
811045c8:	de00012e 	bgeu	sp,et,811045d0 <vFeebCh4HandleIrq+0xc>
811045cc:	003b68fa 	trap	3
811045d0:	dfc00315 	stw	ra,12(sp)
811045d4:	df000215 	stw	fp,8(sp)
811045d8:	df000204 	addi	fp,sp,8
811045dc:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045e0:	e0bfff17 	ldw	r2,-4(fp)
811045e4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
811045e8:	11047d00 	call	811047d0 <vFeebCh4IrqFlagClrBufferEmpty>
}
811045ec:	0001883a 	nop
811045f0:	e037883a 	mov	sp,fp
811045f4:	dfc00117 	ldw	ra,4(sp)
811045f8:	df000017 	ldw	fp,0(sp)
811045fc:	dec00204 	addi	sp,sp,8
81104600:	f800283a 	ret

81104604 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81104604:	defffc04 	addi	sp,sp,-16
81104608:	de00012e 	bgeu	sp,et,81104610 <vFeebCh5HandleIrq+0xc>
8110460c:	003b68fa 	trap	3
81104610:	dfc00315 	stw	ra,12(sp)
81104614:	df000215 	stw	fp,8(sp)
81104618:	df000204 	addi	fp,sp,8
8110461c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104620:	e0bfff17 	ldw	r2,-4(fp)
81104624:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
81104628:	11048140 	call	81104814 <vFeebCh5IrqFlagClrBufferEmpty>
}
8110462c:	0001883a 	nop
81104630:	e037883a 	mov	sp,fp
81104634:	dfc00117 	ldw	ra,4(sp)
81104638:	df000017 	ldw	fp,0(sp)
8110463c:	dec00204 	addi	sp,sp,8
81104640:	f800283a 	ret

81104644 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
81104644:	defffc04 	addi	sp,sp,-16
81104648:	de00012e 	bgeu	sp,et,81104650 <vFeebCh6HandleIrq+0xc>
8110464c:	003b68fa 	trap	3
81104650:	dfc00315 	stw	ra,12(sp)
81104654:	df000215 	stw	fp,8(sp)
81104658:	df000204 	addi	fp,sp,8
8110465c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104660:	e0bfff17 	ldw	r2,-4(fp)
81104664:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
81104668:	11048580 	call	81104858 <vFeebCh6IrqFlagClrBufferEmpty>
}
8110466c:	0001883a 	nop
81104670:	e037883a 	mov	sp,fp
81104674:	dfc00117 	ldw	ra,4(sp)
81104678:	df000017 	ldw	fp,0(sp)
8110467c:	dec00204 	addi	sp,sp,8
81104680:	f800283a 	ret

81104684 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104684:	defffc04 	addi	sp,sp,-16
81104688:	de00012e 	bgeu	sp,et,81104690 <vFeebCh7HandleIrq+0xc>
8110468c:	003b68fa 	trap	3
81104690:	dfc00315 	stw	ra,12(sp)
81104694:	df000215 	stw	fp,8(sp)
81104698:	df000204 	addi	fp,sp,8
8110469c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811046a0:	e0bfff17 	ldw	r2,-4(fp)
811046a4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
811046a8:	110489c0 	call	8110489c <vFeebCh7IrqFlagClrBufferEmpty>
}
811046ac:	0001883a 	nop
811046b0:	e037883a 	mov	sp,fp
811046b4:	dfc00117 	ldw	ra,4(sp)
811046b8:	df000017 	ldw	fp,0(sp)
811046bc:	dec00204 	addi	sp,sp,8
811046c0:	f800283a 	ret

811046c4 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
811046c4:	defffc04 	addi	sp,sp,-16
811046c8:	de00012e 	bgeu	sp,et,811046d0 <vFeebCh8HandleIrq+0xc>
811046cc:	003b68fa 	trap	3
811046d0:	dfc00315 	stw	ra,12(sp)
811046d4:	df000215 	stw	fp,8(sp)
811046d8:	df000204 	addi	fp,sp,8
811046dc:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811046e0:	e0bfff17 	ldw	r2,-4(fp)
811046e4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
811046e8:	11048e00 	call	811048e0 <vFeebCh8IrqFlagClrBufferEmpty>
}
811046ec:	0001883a 	nop
811046f0:	e037883a 	mov	sp,fp
811046f4:	dfc00117 	ldw	ra,4(sp)
811046f8:	df000017 	ldw	fp,0(sp)
811046fc:	dec00204 	addi	sp,sp,8
81104700:	f800283a 	ret

81104704 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104704:	defffe04 	addi	sp,sp,-8
81104708:	de00012e 	bgeu	sp,et,81104710 <vFeebCh1IrqFlagClrBufferEmpty+0xc>
8110470c:	003b68fa 	trap	3
81104710:	dfc00115 	stw	ra,4(sp)
81104714:	df000015 	stw	fp,0(sp)
81104718:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
8110471c:	01800044 	movi	r6,1
81104720:	01400144 	movi	r5,5
81104724:	01204834 	movhi	r4,33056
81104728:	210b0004 	addi	r4,r4,11264
8110472c:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104730:	0001883a 	nop
81104734:	e037883a 	mov	sp,fp
81104738:	dfc00117 	ldw	ra,4(sp)
8110473c:	df000017 	ldw	fp,0(sp)
81104740:	dec00204 	addi	sp,sp,8
81104744:	f800283a 	ret

81104748 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
81104748:	defffe04 	addi	sp,sp,-8
8110474c:	de00012e 	bgeu	sp,et,81104754 <vFeebCh2IrqFlagClrBufferEmpty+0xc>
81104750:	003b68fa 	trap	3
81104754:	dfc00115 	stw	ra,4(sp)
81104758:	df000015 	stw	fp,0(sp)
8110475c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104760:	01800044 	movi	r6,1
81104764:	01400144 	movi	r5,5
81104768:	01204834 	movhi	r4,33056
8110476c:	210a0004 	addi	r4,r4,10240
81104770:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104774:	0001883a 	nop
81104778:	e037883a 	mov	sp,fp
8110477c:	dfc00117 	ldw	ra,4(sp)
81104780:	df000017 	ldw	fp,0(sp)
81104784:	dec00204 	addi	sp,sp,8
81104788:	f800283a 	ret

8110478c <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
8110478c:	defffe04 	addi	sp,sp,-8
81104790:	de00012e 	bgeu	sp,et,81104798 <vFeebCh3IrqFlagClrBufferEmpty+0xc>
81104794:	003b68fa 	trap	3
81104798:	dfc00115 	stw	ra,4(sp)
8110479c:	df000015 	stw	fp,0(sp)
811047a0:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811047a4:	01800044 	movi	r6,1
811047a8:	01400144 	movi	r5,5
811047ac:	01204834 	movhi	r4,33056
811047b0:	21090004 	addi	r4,r4,9216
811047b4:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047b8:	0001883a 	nop
811047bc:	e037883a 	mov	sp,fp
811047c0:	dfc00117 	ldw	ra,4(sp)
811047c4:	df000017 	ldw	fp,0(sp)
811047c8:	dec00204 	addi	sp,sp,8
811047cc:	f800283a 	ret

811047d0 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
811047d0:	defffe04 	addi	sp,sp,-8
811047d4:	de00012e 	bgeu	sp,et,811047dc <vFeebCh4IrqFlagClrBufferEmpty+0xc>
811047d8:	003b68fa 	trap	3
811047dc:	dfc00115 	stw	ra,4(sp)
811047e0:	df000015 	stw	fp,0(sp)
811047e4:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811047e8:	01800044 	movi	r6,1
811047ec:	01400144 	movi	r5,5
811047f0:	01204834 	movhi	r4,33056
811047f4:	21080004 	addi	r4,r4,8192
811047f8:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047fc:	0001883a 	nop
81104800:	e037883a 	mov	sp,fp
81104804:	dfc00117 	ldw	ra,4(sp)
81104808:	df000017 	ldw	fp,0(sp)
8110480c:	dec00204 	addi	sp,sp,8
81104810:	f800283a 	ret

81104814 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
81104814:	defffe04 	addi	sp,sp,-8
81104818:	de00012e 	bgeu	sp,et,81104820 <vFeebCh5IrqFlagClrBufferEmpty+0xc>
8110481c:	003b68fa 	trap	3
81104820:	dfc00115 	stw	ra,4(sp)
81104824:	df000015 	stw	fp,0(sp)
81104828:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
8110482c:	01800044 	movi	r6,1
81104830:	01400144 	movi	r5,5
81104834:	01204834 	movhi	r4,33056
81104838:	21070004 	addi	r4,r4,7168
8110483c:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104840:	0001883a 	nop
81104844:	e037883a 	mov	sp,fp
81104848:	dfc00117 	ldw	ra,4(sp)
8110484c:	df000017 	ldw	fp,0(sp)
81104850:	dec00204 	addi	sp,sp,8
81104854:	f800283a 	ret

81104858 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
81104858:	defffe04 	addi	sp,sp,-8
8110485c:	de00012e 	bgeu	sp,et,81104864 <vFeebCh6IrqFlagClrBufferEmpty+0xc>
81104860:	003b68fa 	trap	3
81104864:	dfc00115 	stw	ra,4(sp)
81104868:	df000015 	stw	fp,0(sp)
8110486c:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104870:	01800044 	movi	r6,1
81104874:	01400144 	movi	r5,5
81104878:	01204834 	movhi	r4,33056
8110487c:	21060004 	addi	r4,r4,6144
81104880:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104884:	0001883a 	nop
81104888:	e037883a 	mov	sp,fp
8110488c:	dfc00117 	ldw	ra,4(sp)
81104890:	df000017 	ldw	fp,0(sp)
81104894:	dec00204 	addi	sp,sp,8
81104898:	f800283a 	ret

8110489c <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
8110489c:	defffe04 	addi	sp,sp,-8
811048a0:	de00012e 	bgeu	sp,et,811048a8 <vFeebCh7IrqFlagClrBufferEmpty+0xc>
811048a4:	003b68fa 	trap	3
811048a8:	dfc00115 	stw	ra,4(sp)
811048ac:	df000015 	stw	fp,0(sp)
811048b0:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
811048b4:	01800044 	movi	r6,1
811048b8:	01400144 	movi	r5,5
811048bc:	01204834 	movhi	r4,33056
811048c0:	21050004 	addi	r4,r4,5120
811048c4:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811048c8:	0001883a 	nop
811048cc:	e037883a 	mov	sp,fp
811048d0:	dfc00117 	ldw	ra,4(sp)
811048d4:	df000017 	ldw	fp,0(sp)
811048d8:	dec00204 	addi	sp,sp,8
811048dc:	f800283a 	ret

811048e0 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
811048e0:	defffe04 	addi	sp,sp,-8
811048e4:	de00012e 	bgeu	sp,et,811048ec <vFeebCh8IrqFlagClrBufferEmpty+0xc>
811048e8:	003b68fa 	trap	3
811048ec:	dfc00115 	stw	ra,4(sp)
811048f0:	df000015 	stw	fp,0(sp)
811048f4:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
811048f8:	01800044 	movi	r6,1
811048fc:	01400144 	movi	r5,5
81104900:	01204834 	movhi	r4,33056
81104904:	21040004 	addi	r4,r4,4096
81104908:	11051480 	call	81105148 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110490c:	0001883a 	nop
81104910:	e037883a 	mov	sp,fp
81104914:	dfc00117 	ldw	ra,4(sp)
81104918:	df000017 	ldw	fp,0(sp)
8110491c:	dec00204 	addi	sp,sp,8
81104920:	f800283a 	ret

81104924 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
81104924:	defffd04 	addi	sp,sp,-12
81104928:	de00012e 	bgeu	sp,et,81104930 <bFeebCh1IrqFlagBufferEmpty+0xc>
8110492c:	003b68fa 	trap	3
81104930:	dfc00215 	stw	ra,8(sp)
81104934:	df000115 	stw	fp,4(sp)
81104938:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
8110493c:	01400144 	movi	r5,5
81104940:	01204834 	movhi	r4,33056
81104944:	210b0004 	addi	r4,r4,11264
81104948:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110494c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
81104950:	10000326 	beq	r2,zero,81104960 <bFeebCh1IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104954:	00800044 	movi	r2,1
81104958:	e0bfff15 	stw	r2,-4(fp)
8110495c:	00000106 	br	81104964 <bFeebCh1IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104960:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104964:	e0bfff17 	ldw	r2,-4(fp)
}
81104968:	e037883a 	mov	sp,fp
8110496c:	dfc00117 	ldw	ra,4(sp)
81104970:	df000017 	ldw	fp,0(sp)
81104974:	dec00204 	addi	sp,sp,8
81104978:	f800283a 	ret

8110497c <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
8110497c:	defffd04 	addi	sp,sp,-12
81104980:	de00012e 	bgeu	sp,et,81104988 <bFeebCh2IrqFlagBufferEmpty+0xc>
81104984:	003b68fa 	trap	3
81104988:	dfc00215 	stw	ra,8(sp)
8110498c:	df000115 	stw	fp,4(sp)
81104990:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104994:	01400144 	movi	r5,5
81104998:	01204834 	movhi	r4,33056
8110499c:	210a0004 	addi	r4,r4,10240
811049a0:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049a4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811049a8:	10000326 	beq	r2,zero,811049b8 <bFeebCh2IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811049ac:	00800044 	movi	r2,1
811049b0:	e0bfff15 	stw	r2,-4(fp)
811049b4:	00000106 	br	811049bc <bFeebCh2IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049b8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049bc:	e0bfff17 	ldw	r2,-4(fp)
}
811049c0:	e037883a 	mov	sp,fp
811049c4:	dfc00117 	ldw	ra,4(sp)
811049c8:	df000017 	ldw	fp,0(sp)
811049cc:	dec00204 	addi	sp,sp,8
811049d0:	f800283a 	ret

811049d4 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
811049d4:	defffd04 	addi	sp,sp,-12
811049d8:	de00012e 	bgeu	sp,et,811049e0 <bFeebCh3IrqFlagBufferEmpty+0xc>
811049dc:	003b68fa 	trap	3
811049e0:	dfc00215 	stw	ra,8(sp)
811049e4:	df000115 	stw	fp,4(sp)
811049e8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
811049ec:	01400144 	movi	r5,5
811049f0:	01204834 	movhi	r4,33056
811049f4:	21090004 	addi	r4,r4,9216
811049f8:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049fc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104a00:	10000326 	beq	r2,zero,81104a10 <bFeebCh3IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a04:	00800044 	movi	r2,1
81104a08:	e0bfff15 	stw	r2,-4(fp)
81104a0c:	00000106 	br	81104a14 <bFeebCh3IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a10:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a14:	e0bfff17 	ldw	r2,-4(fp)
}
81104a18:	e037883a 	mov	sp,fp
81104a1c:	dfc00117 	ldw	ra,4(sp)
81104a20:	df000017 	ldw	fp,0(sp)
81104a24:	dec00204 	addi	sp,sp,8
81104a28:	f800283a 	ret

81104a2c <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
81104a2c:	defffd04 	addi	sp,sp,-12
81104a30:	de00012e 	bgeu	sp,et,81104a38 <bFeebCh4IrqFlagBufferEmpty+0xc>
81104a34:	003b68fa 	trap	3
81104a38:	dfc00215 	stw	ra,8(sp)
81104a3c:	df000115 	stw	fp,4(sp)
81104a40:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104a44:	01400144 	movi	r5,5
81104a48:	01204834 	movhi	r4,33056
81104a4c:	21080004 	addi	r4,r4,8192
81104a50:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a54:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104a58:	10000326 	beq	r2,zero,81104a68 <bFeebCh4IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a5c:	00800044 	movi	r2,1
81104a60:	e0bfff15 	stw	r2,-4(fp)
81104a64:	00000106 	br	81104a6c <bFeebCh4IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a68:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a6c:	e0bfff17 	ldw	r2,-4(fp)
}
81104a70:	e037883a 	mov	sp,fp
81104a74:	dfc00117 	ldw	ra,4(sp)
81104a78:	df000017 	ldw	fp,0(sp)
81104a7c:	dec00204 	addi	sp,sp,8
81104a80:	f800283a 	ret

81104a84 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104a84:	defffd04 	addi	sp,sp,-12
81104a88:	de00012e 	bgeu	sp,et,81104a90 <bFeebCh5IrqFlagBufferEmpty+0xc>
81104a8c:	003b68fa 	trap	3
81104a90:	dfc00215 	stw	ra,8(sp)
81104a94:	df000115 	stw	fp,4(sp)
81104a98:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a9c:	01400144 	movi	r5,5
81104aa0:	01204834 	movhi	r4,33056
81104aa4:	21070004 	addi	r4,r4,7168
81104aa8:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104aac:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104ab0:	10000326 	beq	r2,zero,81104ac0 <bFeebCh5IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104ab4:	00800044 	movi	r2,1
81104ab8:	e0bfff15 	stw	r2,-4(fp)
81104abc:	00000106 	br	81104ac4 <bFeebCh5IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104ac0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104ac4:	e0bfff17 	ldw	r2,-4(fp)
}
81104ac8:	e037883a 	mov	sp,fp
81104acc:	dfc00117 	ldw	ra,4(sp)
81104ad0:	df000017 	ldw	fp,0(sp)
81104ad4:	dec00204 	addi	sp,sp,8
81104ad8:	f800283a 	ret

81104adc <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104adc:	defffd04 	addi	sp,sp,-12
81104ae0:	de00012e 	bgeu	sp,et,81104ae8 <bFeebCh6IrqFlagBufferEmpty+0xc>
81104ae4:	003b68fa 	trap	3
81104ae8:	dfc00215 	stw	ra,8(sp)
81104aec:	df000115 	stw	fp,4(sp)
81104af0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104af4:	01400144 	movi	r5,5
81104af8:	01204834 	movhi	r4,33056
81104afc:	21060004 	addi	r4,r4,6144
81104b00:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b04:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104b08:	10000326 	beq	r2,zero,81104b18 <bFeebCh6IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b0c:	00800044 	movi	r2,1
81104b10:	e0bfff15 	stw	r2,-4(fp)
81104b14:	00000106 	br	81104b1c <bFeebCh6IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b18:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b1c:	e0bfff17 	ldw	r2,-4(fp)
}
81104b20:	e037883a 	mov	sp,fp
81104b24:	dfc00117 	ldw	ra,4(sp)
81104b28:	df000017 	ldw	fp,0(sp)
81104b2c:	dec00204 	addi	sp,sp,8
81104b30:	f800283a 	ret

81104b34 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104b34:	defffd04 	addi	sp,sp,-12
81104b38:	de00012e 	bgeu	sp,et,81104b40 <bFeebCh7IrqFlagBufferEmpty+0xc>
81104b3c:	003b68fa 	trap	3
81104b40:	dfc00215 	stw	ra,8(sp)
81104b44:	df000115 	stw	fp,4(sp)
81104b48:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104b4c:	01400144 	movi	r5,5
81104b50:	01204834 	movhi	r4,33056
81104b54:	21050004 	addi	r4,r4,5120
81104b58:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b5c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104b60:	10000326 	beq	r2,zero,81104b70 <bFeebCh7IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b64:	00800044 	movi	r2,1
81104b68:	e0bfff15 	stw	r2,-4(fp)
81104b6c:	00000106 	br	81104b74 <bFeebCh7IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b70:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b74:	e0bfff17 	ldw	r2,-4(fp)
}
81104b78:	e037883a 	mov	sp,fp
81104b7c:	dfc00117 	ldw	ra,4(sp)
81104b80:	df000017 	ldw	fp,0(sp)
81104b84:	dec00204 	addi	sp,sp,8
81104b88:	f800283a 	ret

81104b8c <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104b8c:	defffd04 	addi	sp,sp,-12
81104b90:	de00012e 	bgeu	sp,et,81104b98 <bFeebCh8IrqFlagBufferEmpty+0xc>
81104b94:	003b68fa 	trap	3
81104b98:	dfc00215 	stw	ra,8(sp)
81104b9c:	df000115 	stw	fp,4(sp)
81104ba0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104ba4:	01400144 	movi	r5,5
81104ba8:	01204834 	movhi	r4,33056
81104bac:	21040004 	addi	r4,r4,4096
81104bb0:	110519c0 	call	8110519c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104bb4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104bb8:	10000326 	beq	r2,zero,81104bc8 <bFeebCh8IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104bbc:	00800044 	movi	r2,1
81104bc0:	e0bfff15 	stw	r2,-4(fp)
81104bc4:	00000106 	br	81104bcc <bFeebCh8IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104bc8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104bcc:	e0bfff17 	ldw	r2,-4(fp)
}
81104bd0:	e037883a 	mov	sp,fp
81104bd4:	dfc00117 	ldw	ra,4(sp)
81104bd8:	df000017 	ldw	fp,0(sp)
81104bdc:	dec00204 	addi	sp,sp,8
81104be0:	f800283a 	ret

81104be4 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81104be4:	defffc04 	addi	sp,sp,-16
81104be8:	de00012e 	bgeu	sp,et,81104bf0 <vFeebInitIrq+0xc>
81104bec:	003b68fa 	trap	3
81104bf0:	dfc00315 	stw	ra,12(sp)
81104bf4:	df000215 	stw	fp,8(sp)
81104bf8:	df000204 	addi	fp,sp,8
81104bfc:	2005883a 	mov	r2,r4
81104c00:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104c04:	e0bfff03 	ldbu	r2,-4(fp)
81104c08:	10c00268 	cmpgeui	r3,r2,9
81104c0c:	18004f1e 	bne	r3,zero,81104d4c <vFeebInitIrq+0x168>
81104c10:	100690ba 	slli	r3,r2,2
81104c14:	00a04434 	movhi	r2,33040
81104c18:	10930a04 	addi	r2,r2,19496
81104c1c:	1885883a 	add	r2,r3,r2
81104c20:	10800017 	ldw	r2,0(r2)
81104c24:	1000683a 	jmp	r2
81104c28:	81104d4c 	andi	r4,r16,16693
81104c2c:	81104c4c 	andi	r4,r16,16689
81104c30:	81104c6c 	andhi	r4,r16,16689
81104c34:	81104c8c 	andi	r4,r16,16690
81104c38:	81104cac 	andhi	r4,r16,16690
81104c3c:	81104ccc 	andi	r4,r16,16691
81104c40:	81104cec 	andhi	r4,r16,16691
81104c44:	81104d0c 	andi	r4,r16,16692
81104c48:	81104d2c 	andhi	r4,r16,16692
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81104c4c:	d0a03e04 	addi	r2,gp,-32520
81104c50:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104c54:	01a04434 	movhi	r6,33040
81104c58:	31914104 	addi	r6,r6,17668
81104c5c:	e17ffe17 	ldw	r5,-8(fp)
81104c60:	01000084 	movi	r4,2
81104c64:	11279dc0 	call	811279dc <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104c68:	00003806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81104c6c:	d0a03f04 	addi	r2,gp,-32516
81104c70:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
81104c74:	01a04434 	movhi	r6,33040
81104c78:	31915104 	addi	r6,r6,17732
81104c7c:	e17ffe17 	ldw	r5,-8(fp)
81104c80:	010000c4 	movi	r4,3
81104c84:	11279dc0 	call	811279dc <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
81104c88:	00003006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81104c8c:	d0a04004 	addi	r2,gp,-32512
81104c90:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
81104c94:	01a04434 	movhi	r6,33040
81104c98:	31916104 	addi	r6,r6,17796
81104c9c:	e17ffe17 	ldw	r5,-8(fp)
81104ca0:	01000104 	movi	r4,4
81104ca4:	11279dc0 	call	811279dc <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81104ca8:	00002806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81104cac:	d0a04104 	addi	r2,gp,-32508
81104cb0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
81104cb4:	01a04434 	movhi	r6,33040
81104cb8:	31917104 	addi	r6,r6,17860
81104cbc:	e17ffe17 	ldw	r5,-8(fp)
81104cc0:	01000204 	movi	r4,8
81104cc4:	11279dc0 	call	811279dc <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81104cc8:	00002006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81104ccc:	d0a04204 	addi	r2,gp,-32504
81104cd0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104cd4:	01a04434 	movhi	r6,33040
81104cd8:	31918104 	addi	r6,r6,17924
81104cdc:	e17ffe17 	ldw	r5,-8(fp)
81104ce0:	010001c4 	movi	r4,7
81104ce4:	11279dc0 	call	811279dc <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104ce8:	00001806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81104cec:	d0a04304 	addi	r2,gp,-32500
81104cf0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104cf4:	01a04434 	movhi	r6,33040
81104cf8:	31919104 	addi	r6,r6,17988
81104cfc:	e17ffe17 	ldw	r5,-8(fp)
81104d00:	01000184 	movi	r4,6
81104d04:	11279dc0 	call	811279dc <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104d08:	00001006 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81104d0c:	d0a04404 	addi	r2,gp,-32496
81104d10:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104d14:	01a04434 	movhi	r6,33040
81104d18:	3191a104 	addi	r6,r6,18052
81104d1c:	e17ffe17 	ldw	r5,-8(fp)
81104d20:	01000144 	movi	r4,5
81104d24:	11279dc0 	call	811279dc <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104d28:	00000806 	br	81104d4c <vFeebInitIrq+0x168>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81104d2c:	d0a04504 	addi	r2,gp,-32492
81104d30:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104d34:	01a04434 	movhi	r6,33040
81104d38:	3191b104 	addi	r6,r6,18116
81104d3c:	e17ffe17 	ldw	r5,-8(fp)
81104d40:	01000244 	movi	r4,9
81104d44:	11279dc0 	call	811279dc <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104d48:	0001883a 	nop
	}
}
81104d4c:	0001883a 	nop
81104d50:	e037883a 	mov	sp,fp
81104d54:	dfc00117 	ldw	ra,4(sp)
81104d58:	df000017 	ldw	fp,0(sp)
81104d5c:	dec00204 	addi	sp,sp,8
81104d60:	f800283a 	ret

81104d64 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104d64:	defffb04 	addi	sp,sp,-20
81104d68:	de00012e 	bgeu	sp,et,81104d70 <bFeebSetIrqControl+0xc>
81104d6c:	003b68fa 	trap	3
81104d70:	dfc00415 	stw	ra,16(sp)
81104d74:	df000315 	stw	fp,12(sp)
81104d78:	df000304 	addi	fp,sp,12
81104d7c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104d80:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104d84:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104d88:	e0bfff17 	ldw	r2,-4(fp)
81104d8c:	10002426 	beq	r2,zero,81104e20 <bFeebSetIrqControl+0xbc>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104d90:	e0bfff17 	ldw	r2,-4(fp)
81104d94:	10800017 	ldw	r2,0(r2)
81104d98:	01400104 	movi	r5,4
81104d9c:	1009883a 	mov	r4,r2
81104da0:	110519c0 	call	8110519c <uliFeebReadReg>
81104da4:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81104da8:	e0bfff17 	ldw	r2,-4(fp)
81104dac:	10800217 	ldw	r2,8(r2)
81104db0:	10000426 	beq	r2,zero,81104dc4 <bFeebSetIrqControl+0x60>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
81104db4:	e0bffe17 	ldw	r2,-8(fp)
81104db8:	10804014 	ori	r2,r2,256
81104dbc:	e0bffe15 	stw	r2,-8(fp)
81104dc0:	00000406 	br	81104dd4 <bFeebSetIrqControl+0x70>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
81104dc4:	e0fffe17 	ldw	r3,-8(fp)
81104dc8:	00bfbfc4 	movi	r2,-257
81104dcc:	1884703a 	and	r2,r3,r2
81104dd0:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
81104dd4:	e0bfff17 	ldw	r2,-4(fp)
81104dd8:	10800317 	ldw	r2,12(r2)
81104ddc:	10000426 	beq	r2,zero,81104df0 <bFeebSetIrqControl+0x8c>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104de0:	e0bffe17 	ldw	r2,-8(fp)
81104de4:	10800054 	ori	r2,r2,1
81104de8:	e0bffe15 	stw	r2,-8(fp)
81104dec:	00000406 	br	81104e00 <bFeebSetIrqControl+0x9c>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104df0:	e0fffe17 	ldw	r3,-8(fp)
81104df4:	00bfff84 	movi	r2,-2
81104df8:	1884703a 	and	r2,r3,r2
81104dfc:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104e00:	e0bfff17 	ldw	r2,-4(fp)
81104e04:	10800017 	ldw	r2,0(r2)
81104e08:	e1bffe17 	ldw	r6,-8(fp)
81104e0c:	01400104 	movi	r5,4
81104e10:	1009883a 	mov	r4,r2
81104e14:	11051480 	call	81105148 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104e18:	00800044 	movi	r2,1
81104e1c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104e20:	e0bffd17 	ldw	r2,-12(fp)
}
81104e24:	e037883a 	mov	sp,fp
81104e28:	dfc00117 	ldw	ra,4(sp)
81104e2c:	df000017 	ldw	fp,0(sp)
81104e30:	dec00204 	addi	sp,sp,8
81104e34:	f800283a 	ret

81104e38 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104e38:	defffb04 	addi	sp,sp,-20
81104e3c:	de00012e 	bgeu	sp,et,81104e44 <bFeebGetIrqControl+0xc>
81104e40:	003b68fa 	trap	3
81104e44:	dfc00415 	stw	ra,16(sp)
81104e48:	df000315 	stw	fp,12(sp)
81104e4c:	df000304 	addi	fp,sp,12
81104e50:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104e54:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104e58:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104e5c:	e0bfff17 	ldw	r2,-4(fp)
81104e60:	10001a26 	beq	r2,zero,81104ecc <bFeebGetIrqControl+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104e64:	e0bfff17 	ldw	r2,-4(fp)
81104e68:	10800017 	ldw	r2,0(r2)
81104e6c:	01400104 	movi	r5,4
81104e70:	1009883a 	mov	r4,r2
81104e74:	110519c0 	call	8110519c <uliFeebReadReg>
81104e78:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
81104e7c:	e0bffe17 	ldw	r2,-8(fp)
81104e80:	1080400c 	andi	r2,r2,256
81104e84:	10000426 	beq	r2,zero,81104e98 <bFeebGetIrqControl+0x60>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
81104e88:	e0bfff17 	ldw	r2,-4(fp)
81104e8c:	00c00044 	movi	r3,1
81104e90:	10c00215 	stw	r3,8(r2)
81104e94:	00000206 	br	81104ea0 <bFeebGetIrqControl+0x68>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
81104e98:	e0bfff17 	ldw	r2,-4(fp)
81104e9c:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
81104ea0:	e0bffe17 	ldw	r2,-8(fp)
81104ea4:	1080004c 	andi	r2,r2,1
81104ea8:	10000426 	beq	r2,zero,81104ebc <bFeebGetIrqControl+0x84>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
81104eac:	e0bfff17 	ldw	r2,-4(fp)
81104eb0:	00c00044 	movi	r3,1
81104eb4:	10c00315 	stw	r3,12(r2)
81104eb8:	00000206 	br	81104ec4 <bFeebGetIrqControl+0x8c>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
81104ebc:	e0bfff17 	ldw	r2,-4(fp)
81104ec0:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104ec4:	00800044 	movi	r2,1
81104ec8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ecc:	e0bffd17 	ldw	r2,-12(fp)
}
81104ed0:	e037883a 	mov	sp,fp
81104ed4:	dfc00117 	ldw	ra,4(sp)
81104ed8:	df000017 	ldw	fp,0(sp)
81104edc:	dec00204 	addi	sp,sp,8
81104ee0:	f800283a 	ret

81104ee4 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104ee4:	defffb04 	addi	sp,sp,-20
81104ee8:	de00012e 	bgeu	sp,et,81104ef0 <bFeebGetIrqFlags+0xc>
81104eec:	003b68fa 	trap	3
81104ef0:	dfc00415 	stw	ra,16(sp)
81104ef4:	df000315 	stw	fp,12(sp)
81104ef8:	df000304 	addi	fp,sp,12
81104efc:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f00:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f04:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f08:	e0bfff17 	ldw	r2,-4(fp)
81104f0c:	10001126 	beq	r2,zero,81104f54 <bFeebGetIrqFlags+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f10:	e0bfff17 	ldw	r2,-4(fp)
81104f14:	10800017 	ldw	r2,0(r2)
81104f18:	01400144 	movi	r5,5
81104f1c:	1009883a 	mov	r4,r2
81104f20:	110519c0 	call	8110519c <uliFeebReadReg>
81104f24:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104f28:	e0bffe17 	ldw	r2,-8(fp)
81104f2c:	1080004c 	andi	r2,r2,1
81104f30:	10000426 	beq	r2,zero,81104f44 <bFeebGetIrqFlags+0x60>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
81104f34:	e0bfff17 	ldw	r2,-4(fp)
81104f38:	00c00044 	movi	r3,1
81104f3c:	10c00415 	stw	r3,16(r2)
81104f40:	00000206 	br	81104f4c <bFeebGetIrqFlags+0x68>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
81104f44:	e0bfff17 	ldw	r2,-4(fp)
81104f48:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104f4c:	00800044 	movi	r2,1
81104f50:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104f54:	e0bffd17 	ldw	r2,-12(fp)
}
81104f58:	e037883a 	mov	sp,fp
81104f5c:	dfc00117 	ldw	ra,4(sp)
81104f60:	df000017 	ldw	fp,0(sp)
81104f64:	dec00204 	addi	sp,sp,8
81104f68:	f800283a 	ret

81104f6c <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104f6c:	defffb04 	addi	sp,sp,-20
81104f70:	de00012e 	bgeu	sp,et,81104f78 <bFeebSetWindowing+0xc>
81104f74:	003b68fa 	trap	3
81104f78:	dfc00415 	stw	ra,16(sp)
81104f7c:	df000315 	stw	fp,12(sp)
81104f80:	df000304 	addi	fp,sp,12
81104f84:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f88:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f8c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f90:	e0bfff17 	ldw	r2,-4(fp)
81104f94:	10001926 	beq	r2,zero,81104ffc <bFeebSetWindowing+0x90>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f98:	e0bfff17 	ldw	r2,-4(fp)
81104f9c:	10800017 	ldw	r2,0(r2)
81104fa0:	000b883a 	mov	r5,zero
81104fa4:	1009883a 	mov	r4,r2
81104fa8:	110519c0 	call	8110519c <uliFeebReadReg>
81104fac:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81104fb0:	e0bfff17 	ldw	r2,-4(fp)
81104fb4:	10800117 	ldw	r2,4(r2)
81104fb8:	10000426 	beq	r2,zero,81104fcc <bFeebSetWindowing+0x60>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
81104fbc:	e0bffe17 	ldw	r2,-8(fp)
81104fc0:	10804014 	ori	r2,r2,256
81104fc4:	e0bffe15 	stw	r2,-8(fp)
81104fc8:	00000406 	br	81104fdc <bFeebSetWindowing+0x70>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
81104fcc:	e0fffe17 	ldw	r3,-8(fp)
81104fd0:	00bfbfc4 	movi	r2,-257
81104fd4:	1884703a 	and	r2,r3,r2
81104fd8:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104fdc:	e0bfff17 	ldw	r2,-4(fp)
81104fe0:	10800017 	ldw	r2,0(r2)
81104fe4:	e1bffe17 	ldw	r6,-8(fp)
81104fe8:	000b883a 	mov	r5,zero
81104fec:	1009883a 	mov	r4,r2
81104ff0:	11051480 	call	81105148 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104ff4:	00800044 	movi	r2,1
81104ff8:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ffc:	e0bffd17 	ldw	r2,-12(fp)
}
81105000:	e037883a 	mov	sp,fp
81105004:	dfc00117 	ldw	ra,4(sp)
81105008:	df000017 	ldw	fp,0(sp)
8110500c:	dec00204 	addi	sp,sp,8
81105010:	f800283a 	ret

81105014 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81105014:	defffb04 	addi	sp,sp,-20
81105018:	de00012e 	bgeu	sp,et,81105020 <bFeebGetWindowing+0xc>
8110501c:	003b68fa 	trap	3
81105020:	dfc00415 	stw	ra,16(sp)
81105024:	df000315 	stw	fp,12(sp)
81105028:	df000304 	addi	fp,sp,12
8110502c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105030:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105034:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105038:	e0bfff17 	ldw	r2,-4(fp)
8110503c:	10001126 	beq	r2,zero,81105084 <bFeebGetWindowing+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105040:	e0bfff17 	ldw	r2,-4(fp)
81105044:	10800017 	ldw	r2,0(r2)
81105048:	000b883a 	mov	r5,zero
8110504c:	1009883a 	mov	r4,r2
81105050:	110519c0 	call	8110519c <uliFeebReadReg>
81105054:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81105058:	e0bffe17 	ldw	r2,-8(fp)
8110505c:	1080400c 	andi	r2,r2,256
81105060:	10000426 	beq	r2,zero,81105074 <bFeebGetWindowing+0x60>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81105064:	e0bfff17 	ldw	r2,-4(fp)
81105068:	00c00044 	movi	r3,1
8110506c:	10c00115 	stw	r3,4(r2)
81105070:	00000206 	br	8110507c <bFeebGetWindowing+0x68>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105074:	e0bfff17 	ldw	r2,-4(fp)
81105078:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
8110507c:	00800044 	movi	r2,1
81105080:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105084:	e0bffd17 	ldw	r2,-12(fp)
}
81105088:	e037883a 	mov	sp,fp
8110508c:	dfc00117 	ldw	ra,4(sp)
81105090:	df000017 	ldw	fp,0(sp)
81105094:	dec00204 	addi	sp,sp,8
81105098:	f800283a 	ret

8110509c <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
8110509c:	defffb04 	addi	sp,sp,-20
811050a0:	de00012e 	bgeu	sp,et,811050a8 <bFeebGetBuffersStatus+0xc>
811050a4:	003b68fa 	trap	3
811050a8:	dfc00415 	stw	ra,16(sp)
811050ac:	df000315 	stw	fp,12(sp)
811050b0:	df000304 	addi	fp,sp,12
811050b4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811050b8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811050bc:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
811050c0:	e0bfff17 	ldw	r2,-4(fp)
811050c4:	10001a26 	beq	r2,zero,81105130 <bFeebGetBuffersStatus+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
811050c8:	e0bfff17 	ldw	r2,-4(fp)
811050cc:	10800017 	ldw	r2,0(r2)
811050d0:	01400184 	movi	r5,6
811050d4:	1009883a 	mov	r4,r2
811050d8:	110519c0 	call	8110519c <uliFeebReadReg>
811050dc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
811050e0:	e0bffe17 	ldw	r2,-8(fp)
811050e4:	1080400c 	andi	r2,r2,256
811050e8:	10000426 	beq	r2,zero,811050fc <bFeebGetBuffersStatus+0x60>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
811050ec:	e0bfff17 	ldw	r2,-4(fp)
811050f0:	00c00044 	movi	r3,1
811050f4:	10c00515 	stw	r3,20(r2)
811050f8:	00000206 	br	81105104 <bFeebGetBuffersStatus+0x68>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
811050fc:	e0bfff17 	ldw	r2,-4(fp)
81105100:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81105104:	e0bffe17 	ldw	r2,-8(fp)
81105108:	1080004c 	andi	r2,r2,1
8110510c:	10000426 	beq	r2,zero,81105120 <bFeebGetBuffersStatus+0x84>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
81105110:	e0bfff17 	ldw	r2,-4(fp)
81105114:	00c00044 	movi	r3,1
81105118:	10c00615 	stw	r3,24(r2)
8110511c:	00000206 	br	81105128 <bFeebGetBuffersStatus+0x8c>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
81105120:	e0bfff17 	ldw	r2,-4(fp)
81105124:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
81105128:	00800044 	movi	r2,1
8110512c:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105130:	e0bffd17 	ldw	r2,-12(fp)
}
81105134:	e037883a 	mov	sp,fp
81105138:	dfc00117 	ldw	ra,4(sp)
8110513c:	df000017 	ldw	fp,0(sp)
81105140:	dec00204 	addi	sp,sp,8
81105144:	f800283a 	ret

81105148 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81105148:	defffc04 	addi	sp,sp,-16
8110514c:	de00012e 	bgeu	sp,et,81105154 <vFeebWriteReg+0xc>
81105150:	003b68fa 	trap	3
81105154:	df000315 	stw	fp,12(sp)
81105158:	df000304 	addi	fp,sp,12
8110515c:	e13ffd15 	stw	r4,-12(fp)
81105160:	e17ffe15 	stw	r5,-8(fp)
81105164:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81105168:	e0bffe17 	ldw	r2,-8(fp)
8110516c:	1085883a 	add	r2,r2,r2
81105170:	1085883a 	add	r2,r2,r2
81105174:	1007883a 	mov	r3,r2
81105178:	e0bffd17 	ldw	r2,-12(fp)
8110517c:	10c5883a 	add	r2,r2,r3
81105180:	e0ffff17 	ldw	r3,-4(fp)
81105184:	10c00015 	stw	r3,0(r2)
}
81105188:	0001883a 	nop
8110518c:	e037883a 	mov	sp,fp
81105190:	df000017 	ldw	fp,0(sp)
81105194:	dec00104 	addi	sp,sp,4
81105198:	f800283a 	ret

8110519c <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110519c:	defffc04 	addi	sp,sp,-16
811051a0:	de00012e 	bgeu	sp,et,811051a8 <uliFeebReadReg+0xc>
811051a4:	003b68fa 	trap	3
811051a8:	df000315 	stw	fp,12(sp)
811051ac:	df000304 	addi	fp,sp,12
811051b0:	e13ffe15 	stw	r4,-8(fp)
811051b4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811051b8:	e0bfff17 	ldw	r2,-4(fp)
811051bc:	1085883a 	add	r2,r2,r2
811051c0:	1085883a 	add	r2,r2,r2
811051c4:	1007883a 	mov	r3,r2
811051c8:	e0bffe17 	ldw	r2,-8(fp)
811051cc:	10c5883a 	add	r2,r2,r3
811051d0:	10800017 	ldw	r2,0(r2)
811051d4:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
811051d8:	e0bffd17 	ldw	r2,-12(fp)
}
811051dc:	e037883a 	mov	sp,fp
811051e0:	df000017 	ldw	fp,0(sp)
811051e4:	dec00104 	addi	sp,sp,4
811051e8:	f800283a 	ret

811051ec <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
811051ec:	defffb04 	addi	sp,sp,-20
811051f0:	de00012e 	bgeu	sp,et,811051f8 <bSpwcSetLink+0xc>
811051f4:	003b68fa 	trap	3
811051f8:	dfc00415 	stw	ra,16(sp)
811051fc:	df000315 	stw	fp,12(sp)
81105200:	df000304 	addi	fp,sp,12
81105204:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105208:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110520c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105210:	e0bfff17 	ldw	r2,-4(fp)
81105214:	10002f26 	beq	r2,zero,811052d4 <bSpwcSetLink+0xe8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105218:	e0bfff17 	ldw	r2,-4(fp)
8110521c:	10800017 	ldw	r2,0(r2)
81105220:	000b883a 	mov	r5,zero
81105224:	1009883a 	mov	r4,r2
81105228:	110574c0 	call	8110574c <uliSpwcReadReg>
8110522c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
81105230:	e0bfff17 	ldw	r2,-4(fp)
81105234:	10800117 	ldw	r2,4(r2)
81105238:	10000426 	beq	r2,zero,8110524c <bSpwcSetLink+0x60>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
8110523c:	e0bffe17 	ldw	r2,-8(fp)
81105240:	10800114 	ori	r2,r2,4
81105244:	e0bffe15 	stw	r2,-8(fp)
81105248:	00000406 	br	8110525c <bSpwcSetLink+0x70>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
8110524c:	e0fffe17 	ldw	r3,-8(fp)
81105250:	00bffec4 	movi	r2,-5
81105254:	1884703a 	and	r2,r3,r2
81105258:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
8110525c:	e0bfff17 	ldw	r2,-4(fp)
81105260:	10800217 	ldw	r2,8(r2)
81105264:	10000426 	beq	r2,zero,81105278 <bSpwcSetLink+0x8c>
			uliReg |= COMM_CTRL_LINK_START_MSK;
81105268:	e0bffe17 	ldw	r2,-8(fp)
8110526c:	10800094 	ori	r2,r2,2
81105270:	e0bffe15 	stw	r2,-8(fp)
81105274:	00000406 	br	81105288 <bSpwcSetLink+0x9c>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81105278:	e0fffe17 	ldw	r3,-8(fp)
8110527c:	00bfff44 	movi	r2,-3
81105280:	1884703a 	and	r2,r3,r2
81105284:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81105288:	e0bfff17 	ldw	r2,-4(fp)
8110528c:	10800317 	ldw	r2,12(r2)
81105290:	10000426 	beq	r2,zero,811052a4 <bSpwcSetLink+0xb8>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81105294:	e0bffe17 	ldw	r2,-8(fp)
81105298:	10800054 	ori	r2,r2,1
8110529c:	e0bffe15 	stw	r2,-8(fp)
811052a0:	00000406 	br	811052b4 <bSpwcSetLink+0xc8>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
811052a4:	e0fffe17 	ldw	r3,-8(fp)
811052a8:	00bfff84 	movi	r2,-2
811052ac:	1884703a 	and	r2,r3,r2
811052b0:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
811052b4:	e0bfff17 	ldw	r2,-4(fp)
811052b8:	10800017 	ldw	r2,0(r2)
811052bc:	e1bffe17 	ldw	r6,-8(fp)
811052c0:	000b883a 	mov	r5,zero
811052c4:	1009883a 	mov	r4,r2
811052c8:	11056f80 	call	811056f8 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
811052cc:	00800044 	movi	r2,1
811052d0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811052d4:	e0bffd17 	ldw	r2,-12(fp)
}
811052d8:	e037883a 	mov	sp,fp
811052dc:	dfc00117 	ldw	ra,4(sp)
811052e0:	df000017 	ldw	fp,0(sp)
811052e4:	dec00204 	addi	sp,sp,8
811052e8:	f800283a 	ret

811052ec <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
811052ec:	defffb04 	addi	sp,sp,-20
811052f0:	de00012e 	bgeu	sp,et,811052f8 <bSpwcGetLink+0xc>
811052f4:	003b68fa 	trap	3
811052f8:	dfc00415 	stw	ra,16(sp)
811052fc:	df000315 	stw	fp,12(sp)
81105300:	df000304 	addi	fp,sp,12
81105304:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105308:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110530c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105310:	e0bfff17 	ldw	r2,-4(fp)
81105314:	10002326 	beq	r2,zero,811053a4 <bSpwcGetLink+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105318:	e0bfff17 	ldw	r2,-4(fp)
8110531c:	10800017 	ldw	r2,0(r2)
81105320:	000b883a 	mov	r5,zero
81105324:	1009883a 	mov	r4,r2
81105328:	110574c0 	call	8110574c <uliSpwcReadReg>
8110532c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
81105330:	e0bffe17 	ldw	r2,-8(fp)
81105334:	1080010c 	andi	r2,r2,4
81105338:	10000426 	beq	r2,zero,8110534c <bSpwcGetLink+0x60>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
8110533c:	e0bfff17 	ldw	r2,-4(fp)
81105340:	00c00044 	movi	r3,1
81105344:	10c00115 	stw	r3,4(r2)
81105348:	00000206 	br	81105354 <bSpwcGetLink+0x68>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
8110534c:	e0bfff17 	ldw	r2,-4(fp)
81105350:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
81105354:	e0bffe17 	ldw	r2,-8(fp)
81105358:	1080008c 	andi	r2,r2,2
8110535c:	10000426 	beq	r2,zero,81105370 <bSpwcGetLink+0x84>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
81105360:	e0bfff17 	ldw	r2,-4(fp)
81105364:	00c00044 	movi	r3,1
81105368:	10c00215 	stw	r3,8(r2)
8110536c:	00000206 	br	81105378 <bSpwcGetLink+0x8c>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81105370:	e0bfff17 	ldw	r2,-4(fp)
81105374:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81105378:	e0bffe17 	ldw	r2,-8(fp)
8110537c:	1080004c 	andi	r2,r2,1
81105380:	10000426 	beq	r2,zero,81105394 <bSpwcGetLink+0xa8>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81105384:	e0bfff17 	ldw	r2,-4(fp)
81105388:	00c00044 	movi	r3,1
8110538c:	10c00315 	stw	r3,12(r2)
81105390:	00000206 	br	8110539c <bSpwcGetLink+0xb0>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81105394:	e0bfff17 	ldw	r2,-4(fp)
81105398:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
8110539c:	00800044 	movi	r2,1
811053a0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811053a4:	e0bffd17 	ldw	r2,-12(fp)
}
811053a8:	e037883a 	mov	sp,fp
811053ac:	dfc00117 	ldw	ra,4(sp)
811053b0:	df000017 	ldw	fp,0(sp)
811053b4:	dec00204 	addi	sp,sp,8
811053b8:	f800283a 	ret

811053bc <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
811053bc:	defffb04 	addi	sp,sp,-20
811053c0:	de00012e 	bgeu	sp,et,811053c8 <bSpwcGetLinkError+0xc>
811053c4:	003b68fa 	trap	3
811053c8:	dfc00415 	stw	ra,16(sp)
811053cc:	df000315 	stw	fp,12(sp)
811053d0:	df000304 	addi	fp,sp,12
811053d4:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811053d8:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811053dc:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811053e0:	e0bfff17 	ldw	r2,-4(fp)
811053e4:	10002c26 	beq	r2,zero,81105498 <bSpwcGetLinkError+0xdc>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811053e8:	e0bfff17 	ldw	r2,-4(fp)
811053ec:	10800017 	ldw	r2,0(r2)
811053f0:	01400044 	movi	r5,1
811053f4:	1009883a 	mov	r4,r2
811053f8:	110574c0 	call	8110574c <uliSpwcReadReg>
811053fc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81105400:	e0bffe17 	ldw	r2,-8(fp)
81105404:	1082000c 	andi	r2,r2,2048
81105408:	10000426 	beq	r2,zero,8110541c <bSpwcGetLinkError+0x60>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110540c:	e0bfff17 	ldw	r2,-4(fp)
81105410:	00c00044 	movi	r3,1
81105414:	10c00415 	stw	r3,16(r2)
81105418:	00000206 	br	81105424 <bSpwcGetLinkError+0x68>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
8110541c:	e0bfff17 	ldw	r2,-4(fp)
81105420:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
81105424:	e0bffe17 	ldw	r2,-8(fp)
81105428:	1081000c 	andi	r2,r2,1024
8110542c:	10000426 	beq	r2,zero,81105440 <bSpwcGetLinkError+0x84>
			pxSpwcCh->xLinkError.bParity = TRUE;
81105430:	e0bfff17 	ldw	r2,-4(fp)
81105434:	00c00044 	movi	r3,1
81105438:	10c00515 	stw	r3,20(r2)
8110543c:	00000206 	br	81105448 <bSpwcGetLinkError+0x8c>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
81105440:	e0bfff17 	ldw	r2,-4(fp)
81105444:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
81105448:	e0bffe17 	ldw	r2,-8(fp)
8110544c:	1080800c 	andi	r2,r2,512
81105450:	10000426 	beq	r2,zero,81105464 <bSpwcGetLinkError+0xa8>
			pxSpwcCh->xLinkError.bEscape = TRUE;
81105454:	e0bfff17 	ldw	r2,-4(fp)
81105458:	00c00044 	movi	r3,1
8110545c:	10c00615 	stw	r3,24(r2)
81105460:	00000206 	br	8110546c <bSpwcGetLinkError+0xb0>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
81105464:	e0bfff17 	ldw	r2,-4(fp)
81105468:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
8110546c:	e0bffe17 	ldw	r2,-8(fp)
81105470:	1080400c 	andi	r2,r2,256
81105474:	10000426 	beq	r2,zero,81105488 <bSpwcGetLinkError+0xcc>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81105478:	e0bfff17 	ldw	r2,-4(fp)
8110547c:	00c00044 	movi	r3,1
81105480:	10c00715 	stw	r3,28(r2)
81105484:	00000206 	br	81105490 <bSpwcGetLinkError+0xd4>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81105488:	e0bfff17 	ldw	r2,-4(fp)
8110548c:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81105490:	00800044 	movi	r2,1
81105494:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105498:	e0bffd17 	ldw	r2,-12(fp)
}
8110549c:	e037883a 	mov	sp,fp
811054a0:	dfc00117 	ldw	ra,4(sp)
811054a4:	df000017 	ldw	fp,0(sp)
811054a8:	dec00204 	addi	sp,sp,8
811054ac:	f800283a 	ret

811054b0 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
811054b0:	defffb04 	addi	sp,sp,-20
811054b4:	de00012e 	bgeu	sp,et,811054bc <bSpwcGetLinkStatus+0xc>
811054b8:	003b68fa 	trap	3
811054bc:	dfc00415 	stw	ra,16(sp)
811054c0:	df000315 	stw	fp,12(sp)
811054c4:	df000304 	addi	fp,sp,12
811054c8:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
811054cc:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
811054d0:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811054d4:	e0bfff17 	ldw	r2,-4(fp)
811054d8:	10002326 	beq	r2,zero,81105568 <bSpwcGetLinkStatus+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811054dc:	e0bfff17 	ldw	r2,-4(fp)
811054e0:	10800017 	ldw	r2,0(r2)
811054e4:	01400044 	movi	r5,1
811054e8:	1009883a 	mov	r4,r2
811054ec:	110574c0 	call	8110574c <uliSpwcReadReg>
811054f0:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
811054f4:	e0bffe17 	ldw	r2,-8(fp)
811054f8:	1080010c 	andi	r2,r2,4
811054fc:	10000426 	beq	r2,zero,81105510 <bSpwcGetLinkStatus+0x60>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81105500:	e0bfff17 	ldw	r2,-4(fp)
81105504:	00c00044 	movi	r3,1
81105508:	10c00815 	stw	r3,32(r2)
8110550c:	00000206 	br	81105518 <bSpwcGetLinkStatus+0x68>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
81105510:	e0bfff17 	ldw	r2,-4(fp)
81105514:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
81105518:	e0bffe17 	ldw	r2,-8(fp)
8110551c:	1080008c 	andi	r2,r2,2
81105520:	10000426 	beq	r2,zero,81105534 <bSpwcGetLinkStatus+0x84>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
81105524:	e0bfff17 	ldw	r2,-4(fp)
81105528:	00c00044 	movi	r3,1
8110552c:	10c00915 	stw	r3,36(r2)
81105530:	00000206 	br	8110553c <bSpwcGetLinkStatus+0x8c>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
81105534:	e0bfff17 	ldw	r2,-4(fp)
81105538:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
8110553c:	e0bffe17 	ldw	r2,-8(fp)
81105540:	1080004c 	andi	r2,r2,1
81105544:	10000426 	beq	r2,zero,81105558 <bSpwcGetLinkStatus+0xa8>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
81105548:	e0bfff17 	ldw	r2,-4(fp)
8110554c:	00c00044 	movi	r3,1
81105550:	10c00a15 	stw	r3,40(r2)
81105554:	00000206 	br	81105560 <bSpwcGetLinkStatus+0xb0>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
81105558:	e0bfff17 	ldw	r2,-4(fp)
8110555c:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
81105560:	00800044 	movi	r2,1
81105564:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105568:	e0bffd17 	ldw	r2,-12(fp)
}
8110556c:	e037883a 	mov	sp,fp
81105570:	dfc00117 	ldw	ra,4(sp)
81105574:	df000017 	ldw	fp,0(sp)
81105578:	dec00204 	addi	sp,sp,8
8110557c:	f800283a 	ret

81105580 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81105580:	defffb04 	addi	sp,sp,-20
81105584:	de00012e 	bgeu	sp,et,8110558c <bSpwcInitCh+0xc>
81105588:	003b68fa 	trap	3
8110558c:	dfc00415 	stw	ra,16(sp)
81105590:	df000315 	stw	fp,12(sp)
81105594:	df000304 	addi	fp,sp,12
81105598:	e13ffe15 	stw	r4,-8(fp)
8110559c:	2805883a 	mov	r2,r5
811055a0:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
811055a4:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
811055a8:	e0bffe17 	ldw	r2,-8(fp)
811055ac:	10004c26 	beq	r2,zero,811056e0 <bSpwcInitCh+0x160>
		bStatus = TRUE;
811055b0:	00800044 	movi	r2,1
811055b4:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
811055b8:	e0bfff03 	ldbu	r2,-4(fp)
811055bc:	10c00268 	cmpgeui	r3,r2,9
811055c0:	1800371e 	bne	r3,zero,811056a0 <bSpwcInitCh+0x120>
811055c4:	100690ba 	slli	r3,r2,2
811055c8:	00a04434 	movhi	r2,33040
811055cc:	10957704 	addi	r2,r2,21980
811055d0:	1885883a 	add	r2,r3,r2
811055d4:	10800017 	ldw	r2,0(r2)
811055d8:	1000683a 	jmp	r2
811055dc:	811056a0 	cmpeqi	r4,r16,16730
811055e0:	81105600 	call	88110560 <__reset+0x20f0560>
811055e4:	81105614 	ori	r4,r16,16728
811055e8:	81105628 	cmpgeui	r4,r16,16728
811055ec:	8110563c 	xorhi	r4,r16,16728
811055f0:	81105650 	cmplti	r4,r16,16729
811055f4:	81105664 	muli	r4,r16,16729
811055f8:	81105678 	rdprs	r4,r16,16729
811055fc:	8110568c 	andi	r4,r16,16730
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81105600:	e0fffe17 	ldw	r3,-8(fp)
81105604:	00a04834 	movhi	r2,33056
81105608:	108b0004 	addi	r2,r2,11264
8110560c:	18800015 	stw	r2,0(r3)
			break;
81105610:	00002506 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
81105614:	e0fffe17 	ldw	r3,-8(fp)
81105618:	00a04834 	movhi	r2,33056
8110561c:	108a0004 	addi	r2,r2,10240
81105620:	18800015 	stw	r2,0(r3)
			break;
81105624:	00002006 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
81105628:	e0fffe17 	ldw	r3,-8(fp)
8110562c:	00a04834 	movhi	r2,33056
81105630:	10890004 	addi	r2,r2,9216
81105634:	18800015 	stw	r2,0(r3)
			break;
81105638:	00001b06 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
8110563c:	e0fffe17 	ldw	r3,-8(fp)
81105640:	00a04834 	movhi	r2,33056
81105644:	10880004 	addi	r2,r2,8192
81105648:	18800015 	stw	r2,0(r3)
			break;
8110564c:	00001606 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
81105650:	e0fffe17 	ldw	r3,-8(fp)
81105654:	00a04834 	movhi	r2,33056
81105658:	10870004 	addi	r2,r2,7168
8110565c:	18800015 	stw	r2,0(r3)
			break;
81105660:	00001106 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
81105664:	e0fffe17 	ldw	r3,-8(fp)
81105668:	00a04834 	movhi	r2,33056
8110566c:	10860004 	addi	r2,r2,6144
81105670:	18800015 	stw	r2,0(r3)
			break;
81105674:	00000c06 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81105678:	e0fffe17 	ldw	r3,-8(fp)
8110567c:	00a04834 	movhi	r2,33056
81105680:	10850004 	addi	r2,r2,5120
81105684:	18800015 	stw	r2,0(r3)
			break;
81105688:	00000706 	br	811056a8 <bSpwcInitCh+0x128>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
8110568c:	e0fffe17 	ldw	r3,-8(fp)
81105690:	00a04834 	movhi	r2,33056
81105694:	10840004 	addi	r2,r2,4096
81105698:	18800015 	stw	r2,0(r3)
			break;
8110569c:	00000206 	br	811056a8 <bSpwcInitCh+0x128>
		default:
			bStatus = FALSE;
811056a0:	e03ffd15 	stw	zero,-12(fp)
			break;
811056a4:	0001883a 	nop
		}

		if (bStatus) {
811056a8:	e0bffd17 	ldw	r2,-12(fp)
811056ac:	10000c26 	beq	r2,zero,811056e0 <bSpwcInitCh+0x160>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
811056b0:	e13ffe17 	ldw	r4,-8(fp)
811056b4:	11052ec0 	call	811052ec <bSpwcGetLink>
811056b8:	1000011e 	bne	r2,zero,811056c0 <bSpwcInitCh+0x140>
				bStatus = FALSE;
811056bc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
811056c0:	e13ffe17 	ldw	r4,-8(fp)
811056c4:	11053bc0 	call	811053bc <bSpwcGetLinkError>
811056c8:	1000011e 	bne	r2,zero,811056d0 <bSpwcInitCh+0x150>
				bStatus = FALSE;
811056cc:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
811056d0:	e13ffe17 	ldw	r4,-8(fp)
811056d4:	11054b00 	call	811054b0 <bSpwcGetLinkStatus>
811056d8:	1000011e 	bne	r2,zero,811056e0 <bSpwcInitCh+0x160>
				bStatus = FALSE;
811056dc:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
811056e0:	e0bffd17 	ldw	r2,-12(fp)
}
811056e4:	e037883a 	mov	sp,fp
811056e8:	dfc00117 	ldw	ra,4(sp)
811056ec:	df000017 	ldw	fp,0(sp)
811056f0:	dec00204 	addi	sp,sp,8
811056f4:	f800283a 	ret

811056f8 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
811056f8:	defffc04 	addi	sp,sp,-16
811056fc:	de00012e 	bgeu	sp,et,81105704 <vSpwcWriteReg+0xc>
81105700:	003b68fa 	trap	3
81105704:	df000315 	stw	fp,12(sp)
81105708:	df000304 	addi	fp,sp,12
8110570c:	e13ffd15 	stw	r4,-12(fp)
81105710:	e17ffe15 	stw	r5,-8(fp)
81105714:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81105718:	e0bffe17 	ldw	r2,-8(fp)
8110571c:	1085883a 	add	r2,r2,r2
81105720:	1085883a 	add	r2,r2,r2
81105724:	1007883a 	mov	r3,r2
81105728:	e0bffd17 	ldw	r2,-12(fp)
8110572c:	10c5883a 	add	r2,r2,r3
81105730:	e0ffff17 	ldw	r3,-4(fp)
81105734:	10c00015 	stw	r3,0(r2)
}
81105738:	0001883a 	nop
8110573c:	e037883a 	mov	sp,fp
81105740:	df000017 	ldw	fp,0(sp)
81105744:	dec00104 	addi	sp,sp,4
81105748:	f800283a 	ret

8110574c <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110574c:	defffc04 	addi	sp,sp,-16
81105750:	de00012e 	bgeu	sp,et,81105758 <uliSpwcReadReg+0xc>
81105754:	003b68fa 	trap	3
81105758:	df000315 	stw	fp,12(sp)
8110575c:	df000304 	addi	fp,sp,12
81105760:	e13ffe15 	stw	r4,-8(fp)
81105764:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81105768:	e0bfff17 	ldw	r2,-4(fp)
8110576c:	1085883a 	add	r2,r2,r2
81105770:	1085883a 	add	r2,r2,r2
81105774:	1007883a 	mov	r3,r2
81105778:	e0bffe17 	ldw	r2,-8(fp)
8110577c:	10c5883a 	add	r2,r2,r3
81105780:	10800017 	ldw	r2,0(r2)
81105784:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105788:	e0bffd17 	ldw	r2,-12(fp)
}
8110578c:	e037883a 	mov	sp,fp
81105790:	df000017 	ldw	fp,0(sp)
81105794:	dec00104 	addi	sp,sp,4
81105798:	f800283a 	ret

8110579c <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
8110579c:	defffe04 	addi	sp,sp,-8
811057a0:	de00012e 	bgeu	sp,et,811057a8 <bEnableIsoDrivers+0xc>
811057a4:	003b68fa 	trap	3
811057a8:	dfc00115 	stw	ra,4(sp)
811057ac:	df000015 	stw	fp,0(sp)
811057b0:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
811057b4:	01400204 	movi	r5,8
811057b8:	01000044 	movi	r4,1
811057bc:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
811057c0:	00800044 	movi	r2,1
}
811057c4:	e037883a 	mov	sp,fp
811057c8:	dfc00117 	ldw	ra,4(sp)
811057cc:	df000017 	ldw	fp,0(sp)
811057d0:	dec00204 	addi	sp,sp,8
811057d4:	f800283a 	ret

811057d8 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
811057d8:	defffe04 	addi	sp,sp,-8
811057dc:	de00012e 	bgeu	sp,et,811057e4 <bDisableIsoDrivers+0xc>
811057e0:	003b68fa 	trap	3
811057e4:	dfc00115 	stw	ra,4(sp)
811057e8:	df000015 	stw	fp,0(sp)
811057ec:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
811057f0:	01400204 	movi	r5,8
811057f4:	0009883a 	mov	r4,zero
811057f8:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
811057fc:	00800044 	movi	r2,1
}
81105800:	e037883a 	mov	sp,fp
81105804:	dfc00117 	ldw	ra,4(sp)
81105808:	df000017 	ldw	fp,0(sp)
8110580c:	dec00204 	addi	sp,sp,8
81105810:	f800283a 	ret

81105814 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
81105814:	defffe04 	addi	sp,sp,-8
81105818:	de00012e 	bgeu	sp,et,81105820 <bEnableLvdsBoard+0xc>
8110581c:	003b68fa 	trap	3
81105820:	dfc00115 	stw	ra,4(sp)
81105824:	df000015 	stw	fp,0(sp)
81105828:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
8110582c:	01400104 	movi	r5,4
81105830:	01000044 	movi	r4,1
81105834:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
81105838:	00800044 	movi	r2,1
}
8110583c:	e037883a 	mov	sp,fp
81105840:	dfc00117 	ldw	ra,4(sp)
81105844:	df000017 	ldw	fp,0(sp)
81105848:	dec00204 	addi	sp,sp,8
8110584c:	f800283a 	ret

81105850 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
81105850:	defffe04 	addi	sp,sp,-8
81105854:	de00012e 	bgeu	sp,et,8110585c <bDisableLvdsBoard+0xc>
81105858:	003b68fa 	trap	3
8110585c:	dfc00115 	stw	ra,4(sp)
81105860:	df000015 	stw	fp,0(sp)
81105864:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
81105868:	01400104 	movi	r5,4
8110586c:	0009883a 	mov	r4,zero
81105870:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
  return  TRUE;
81105874:	00800044 	movi	r2,1
}
81105878:	e037883a 	mov	sp,fp
8110587c:	dfc00117 	ldw	ra,4(sp)
81105880:	df000017 	ldw	fp,0(sp)
81105884:	dec00204 	addi	sp,sp,8
81105888:	f800283a 	ret

8110588c <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
8110588c:	defffd04 	addi	sp,sp,-12
81105890:	de00012e 	bgeu	sp,et,81105898 <bSetPreEmphasys+0xc>
81105894:	003b68fa 	trap	3
81105898:	dfc00215 	stw	ra,8(sp)
8110589c:	df000115 	stw	fp,4(sp)
811058a0:	df000104 	addi	fp,sp,4
811058a4:	2005883a 	mov	r2,r4
811058a8:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
811058ac:	e0bfff03 	ldbu	r2,-4(fp)
811058b0:	10c00060 	cmpeqi	r3,r2,1
811058b4:	18000d1e 	bne	r3,zero,811058ec <bSetPreEmphasys+0x60>
811058b8:	10c00088 	cmpgei	r3,r2,2
811058bc:	1800021e 	bne	r3,zero,811058c8 <bSetPreEmphasys+0x3c>
811058c0:	10000626 	beq	r2,zero,811058dc <bSetPreEmphasys+0x50>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
811058c4:	00001b06 	br	81105934 <bSetPreEmphasys+0xa8>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
811058c8:	10c000a0 	cmpeqi	r3,r2,2
811058cc:	18000e1e 	bne	r3,zero,81105908 <bSetPreEmphasys+0x7c>
811058d0:	108000e0 	cmpeqi	r2,r2,3
811058d4:	1000131e 	bne	r2,zero,81105924 <bSetPreEmphasys+0x98>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
811058d8:	00001606 	br	81105934 <bSetPreEmphasys+0xa8>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811058dc:	014000c4 	movi	r5,3
811058e0:	0009883a 	mov	r4,zero
811058e4:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
811058e8:	00001206 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
811058ec:	01400084 	movi	r5,2
811058f0:	0009883a 	mov	r4,zero
811058f4:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
811058f8:	01400044 	movi	r5,1
811058fc:	01000044 	movi	r4,1
81105900:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105904:	00000b06 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105908:	01400044 	movi	r5,1
8110590c:	0009883a 	mov	r4,zero
81105910:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
81105914:	01400084 	movi	r5,2
81105918:	01000044 	movi	r4,1
8110591c:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105920:	00000406 	br	81105934 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
81105924:	014000c4 	movi	r5,3
81105928:	01000044 	movi	r4,1
8110592c:	110594c0 	call	8110594c <bCtrlIoLvdsDrive>
      break;
81105930:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
81105934:	00800044 	movi	r2,1
}
81105938:	e037883a 	mov	sp,fp
8110593c:	dfc00117 	ldw	ra,4(sp)
81105940:	df000017 	ldw	fp,0(sp)
81105944:	dec00204 	addi	sp,sp,8
81105948:	f800283a 	ret

8110594c <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
8110594c:	defffd04 	addi	sp,sp,-12
81105950:	de00012e 	bgeu	sp,et,81105958 <bCtrlIoLvdsDrive+0xc>
81105954:	003b68fa 	trap	3
81105958:	df000215 	stw	fp,8(sp)
8110595c:	df000204 	addi	fp,sp,8
81105960:	e13ffe15 	stw	r4,-8(fp)
81105964:	2805883a 	mov	r2,r5
81105968:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
8110596c:	e0bffe17 	ldw	r2,-8(fp)
81105970:	1000071e 	bne	r2,zero,81105990 <bCtrlIoLvdsDrive+0x44>
	 ucIoValue &= (~ucMask);
81105974:	e0bfff03 	ldbu	r2,-4(fp)
81105978:	0084303a 	nor	r2,zero,r2
8110597c:	1007883a 	mov	r3,r2
81105980:	d0a00103 	ldbu	r2,-32764(gp)
81105984:	1884703a 	and	r2,r3,r2
81105988:	d0a00105 	stb	r2,-32764(gp)
8110598c:	00000406 	br	811059a0 <bCtrlIoLvdsDrive+0x54>
  }
  else {
	 ucIoValue |= ucMask;
81105990:	d0e00103 	ldbu	r3,-32764(gp)
81105994:	e0bfff03 	ldbu	r2,-4(fp)
81105998:	1884b03a 	or	r2,r3,r2
8110599c:	d0a00105 	stb	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
811059a0:	d0a00103 	ldbu	r2,-32764(gp)
811059a4:	10c03fcc 	andi	r3,r2,255
811059a8:	00a00034 	movhi	r2,32768
811059ac:	10822804 	addi	r2,r2,2208
811059b0:	10c00035 	stwio	r3,0(r2)
  return TRUE;
811059b4:	00800044 	movi	r2,1
}
811059b8:	e037883a 	mov	sp,fp
811059bc:	df000017 	ldw	fp,0(sp)
811059c0:	dec00104 	addi	sp,sp,4
811059c4:	f800283a 	ret

811059c8 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
811059c8:	defffa04 	addi	sp,sp,-24
811059cc:	de00012e 	bgeu	sp,et,811059d4 <I2C_TestAdress+0xc>
811059d0:	003b68fa 	trap	3
811059d4:	dfc00515 	stw	ra,20(sp)
811059d8:	df000415 	stw	fp,16(sp)
811059dc:	df000404 	addi	fp,sp,16
811059e0:	e13ffd15 	stw	r4,-12(fp)
811059e4:	e17ffe15 	stw	r5,-8(fp)
811059e8:	3005883a 	mov	r2,r6
811059ec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811059f0:	00800044 	movi	r2,1
811059f4:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811059f8:	e17ffe17 	ldw	r5,-8(fp)
811059fc:	e13ffd17 	ldw	r4,-12(fp)
81105a00:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a04:	e0bfff03 	ldbu	r2,-4(fp)
81105a08:	10803fcc 	andi	r2,r2,255
81105a0c:	100d883a 	mov	r6,r2
81105a10:	e17ffe17 	ldw	r5,-8(fp)
81105a14:	e13ffd17 	ldw	r4,-12(fp)
81105a18:	1105eac0 	call	81105eac <i2c_write>
81105a1c:	1000011e 	bne	r2,zero,81105a24 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
81105a20:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105a24:	e17ffe17 	ldw	r5,-8(fp)
81105a28:	e13ffd17 	ldw	r4,-12(fp)
81105a2c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105a30:	0106d604 	movi	r4,7000
81105a34:	11290ec0 	call	811290ec <usleep>
    
    return bSuccess;
81105a38:	e0bffc17 	ldw	r2,-16(fp)

}
81105a3c:	e037883a 	mov	sp,fp
81105a40:	dfc00117 	ldw	ra,4(sp)
81105a44:	df000017 	ldw	fp,0(sp)
81105a48:	dec00204 	addi	sp,sp,8
81105a4c:	f800283a 	ret

81105a50 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81105a50:	defff804 	addi	sp,sp,-32
81105a54:	de00012e 	bgeu	sp,et,81105a5c <I2C_Write+0xc>
81105a58:	003b68fa 	trap	3
81105a5c:	dfc00715 	stw	ra,28(sp)
81105a60:	df000615 	stw	fp,24(sp)
81105a64:	df000604 	addi	fp,sp,24
81105a68:	e13ffb15 	stw	r4,-20(fp)
81105a6c:	e17ffc15 	stw	r5,-16(fp)
81105a70:	3009883a 	mov	r4,r6
81105a74:	3807883a 	mov	r3,r7
81105a78:	e0800217 	ldw	r2,8(fp)
81105a7c:	e13ffd05 	stb	r4,-12(fp)
81105a80:	e0fffe05 	stb	r3,-8(fp)
81105a84:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105a88:	00800044 	movi	r2,1
81105a8c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105a90:	e17ffc17 	ldw	r5,-16(fp)
81105a94:	e13ffb17 	ldw	r4,-20(fp)
81105a98:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a9c:	e0bffd03 	ldbu	r2,-12(fp)
81105aa0:	10803fcc 	andi	r2,r2,255
81105aa4:	100d883a 	mov	r6,r2
81105aa8:	e17ffc17 	ldw	r5,-16(fp)
81105aac:	e13ffb17 	ldw	r4,-20(fp)
81105ab0:	1105eac0 	call	81105eac <i2c_write>
81105ab4:	1000011e 	bne	r2,zero,81105abc <I2C_Write+0x6c>
        bSuccess = FALSE;
81105ab8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105abc:	e0bffa17 	ldw	r2,-24(fp)
81105ac0:	10000726 	beq	r2,zero,81105ae0 <I2C_Write+0x90>
81105ac4:	e0bffe03 	ldbu	r2,-8(fp)
81105ac8:	100d883a 	mov	r6,r2
81105acc:	e17ffc17 	ldw	r5,-16(fp)
81105ad0:	e13ffb17 	ldw	r4,-20(fp)
81105ad4:	1105eac0 	call	81105eac <i2c_write>
81105ad8:	1000011e 	bne	r2,zero,81105ae0 <I2C_Write+0x90>
        bSuccess = FALSE;
81105adc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105ae0:	e0bffa17 	ldw	r2,-24(fp)
81105ae4:	10000726 	beq	r2,zero,81105b04 <I2C_Write+0xb4>
81105ae8:	e0bfff03 	ldbu	r2,-4(fp)
81105aec:	100d883a 	mov	r6,r2
81105af0:	e17ffc17 	ldw	r5,-16(fp)
81105af4:	e13ffb17 	ldw	r4,-20(fp)
81105af8:	1105eac0 	call	81105eac <i2c_write>
81105afc:	1000011e 	bne	r2,zero,81105b04 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105b00:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105b04:	e17ffc17 	ldw	r5,-16(fp)
81105b08:	e13ffb17 	ldw	r4,-20(fp)
81105b0c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105b10:	0106d604 	movi	r4,7000
81105b14:	11290ec0 	call	811290ec <usleep>
    
    return bSuccess;
81105b18:	e0bffa17 	ldw	r2,-24(fp)

}
81105b1c:	e037883a 	mov	sp,fp
81105b20:	dfc00117 	ldw	ra,4(sp)
81105b24:	df000017 	ldw	fp,0(sp)
81105b28:	dec00204 	addi	sp,sp,8
81105b2c:	f800283a 	ret

81105b30 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105b30:	defff904 	addi	sp,sp,-28
81105b34:	de00012e 	bgeu	sp,et,81105b3c <I2C_Read+0xc>
81105b38:	003b68fa 	trap	3
81105b3c:	dfc00615 	stw	ra,24(sp)
81105b40:	df000515 	stw	fp,20(sp)
81105b44:	df000504 	addi	fp,sp,20
81105b48:	e13ffc15 	stw	r4,-16(fp)
81105b4c:	e17ffd15 	stw	r5,-12(fp)
81105b50:	3007883a 	mov	r3,r6
81105b54:	3805883a 	mov	r2,r7
81105b58:	e0fffe05 	stb	r3,-8(fp)
81105b5c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105b60:	00800044 	movi	r2,1
81105b64:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105b68:	e17ffd17 	ldw	r5,-12(fp)
81105b6c:	e13ffc17 	ldw	r4,-16(fp)
81105b70:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105b74:	e0bffe03 	ldbu	r2,-8(fp)
81105b78:	10803fcc 	andi	r2,r2,255
81105b7c:	100d883a 	mov	r6,r2
81105b80:	e17ffd17 	ldw	r5,-12(fp)
81105b84:	e13ffc17 	ldw	r4,-16(fp)
81105b88:	1105eac0 	call	81105eac <i2c_write>
81105b8c:	1000011e 	bne	r2,zero,81105b94 <I2C_Read+0x64>
        bSuccess = FALSE;
81105b90:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105b94:	e0bffb17 	ldw	r2,-20(fp)
81105b98:	10000726 	beq	r2,zero,81105bb8 <I2C_Read+0x88>
81105b9c:	e0bfff03 	ldbu	r2,-4(fp)
81105ba0:	100d883a 	mov	r6,r2
81105ba4:	e17ffd17 	ldw	r5,-12(fp)
81105ba8:	e13ffc17 	ldw	r4,-16(fp)
81105bac:	1105eac0 	call	81105eac <i2c_write>
81105bb0:	1000011e 	bne	r2,zero,81105bb8 <I2C_Read+0x88>
        bSuccess = FALSE;
81105bb4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105bb8:	e17ffd17 	ldw	r5,-12(fp)
81105bbc:	e13ffc17 	ldw	r4,-16(fp)
81105bc0:	1105d980 	call	81105d98 <i2c_start>
    DeviceAddr |= 1; // Read
81105bc4:	e0bffe03 	ldbu	r2,-8(fp)
81105bc8:	10800054 	ori	r2,r2,1
81105bcc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105bd0:	e0bffb17 	ldw	r2,-20(fp)
81105bd4:	10000826 	beq	r2,zero,81105bf8 <I2C_Read+0xc8>
81105bd8:	e0bffe03 	ldbu	r2,-8(fp)
81105bdc:	10803fcc 	andi	r2,r2,255
81105be0:	100d883a 	mov	r6,r2
81105be4:	e17ffd17 	ldw	r5,-12(fp)
81105be8:	e13ffc17 	ldw	r4,-16(fp)
81105bec:	1105eac0 	call	81105eac <i2c_write>
81105bf0:	1000011e 	bne	r2,zero,81105bf8 <I2C_Read+0xc8>
        bSuccess = FALSE;
81105bf4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105bf8:	e0bffb17 	ldw	r2,-20(fp)
81105bfc:	10000526 	beq	r2,zero,81105c14 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105c00:	000f883a 	mov	r7,zero
81105c04:	e1800217 	ldw	r6,8(fp)
81105c08:	e17ffd17 	ldw	r5,-12(fp)
81105c0c:	e13ffc17 	ldw	r4,-16(fp)
81105c10:	1105fe40 	call	81105fe4 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105c14:	e17ffd17 	ldw	r5,-12(fp)
81105c18:	e13ffc17 	ldw	r4,-16(fp)
81105c1c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    return bSuccess;
81105c20:	e0bffb17 	ldw	r2,-20(fp)
}
81105c24:	e037883a 	mov	sp,fp
81105c28:	dfc00117 	ldw	ra,4(sp)
81105c2c:	df000017 	ldw	fp,0(sp)
81105c30:	dec00204 	addi	sp,sp,8
81105c34:	f800283a 	ret

81105c38 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105c38:	defff604 	addi	sp,sp,-40
81105c3c:	de00012e 	bgeu	sp,et,81105c44 <I2C_MultipleRead+0xc>
81105c40:	003b68fa 	trap	3
81105c44:	dfc00915 	stw	ra,36(sp)
81105c48:	df000815 	stw	fp,32(sp)
81105c4c:	df000804 	addi	fp,sp,32
81105c50:	e13ffb15 	stw	r4,-20(fp)
81105c54:	e17ffc15 	stw	r5,-16(fp)
81105c58:	3007883a 	mov	r3,r6
81105c5c:	e1fffe15 	stw	r7,-8(fp)
81105c60:	e0800217 	ldw	r2,8(fp)
81105c64:	e0fffd05 	stb	r3,-12(fp)
81105c68:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105c6c:	00800044 	movi	r2,1
81105c70:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81105c74:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105c78:	e17ffc17 	ldw	r5,-16(fp)
81105c7c:	e13ffb17 	ldw	r4,-20(fp)
81105c80:	1105d980 	call	81105d98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105c84:	e0bffd03 	ldbu	r2,-12(fp)
81105c88:	10803fcc 	andi	r2,r2,255
81105c8c:	100d883a 	mov	r6,r2
81105c90:	e17ffc17 	ldw	r5,-16(fp)
81105c94:	e13ffb17 	ldw	r4,-20(fp)
81105c98:	1105eac0 	call	81105eac <i2c_write>
81105c9c:	1000011e 	bne	r2,zero,81105ca4 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
81105ca0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105ca4:	e0bff917 	ldw	r2,-28(fp)
81105ca8:	10000726 	beq	r2,zero,81105cc8 <I2C_MultipleRead+0x90>
81105cac:	e0bffa03 	ldbu	r2,-24(fp)
81105cb0:	100d883a 	mov	r6,r2
81105cb4:	e17ffc17 	ldw	r5,-16(fp)
81105cb8:	e13ffb17 	ldw	r4,-20(fp)
81105cbc:	1105eac0 	call	81105eac <i2c_write>
81105cc0:	1000011e 	bne	r2,zero,81105cc8 <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
81105cc4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105cc8:	e0bff917 	ldw	r2,-28(fp)
81105ccc:	10000326 	beq	r2,zero,81105cdc <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105cd0:	e17ffc17 	ldw	r5,-16(fp)
81105cd4:	e13ffb17 	ldw	r4,-20(fp)
81105cd8:	1105d980 	call	81105d98 <i2c_start>
    DeviceAddr |= 1; // Read
81105cdc:	e0bffd03 	ldbu	r2,-12(fp)
81105ce0:	10800054 	ori	r2,r2,1
81105ce4:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105ce8:	e0bff917 	ldw	r2,-28(fp)
81105cec:	10000826 	beq	r2,zero,81105d10 <I2C_MultipleRead+0xd8>
81105cf0:	e0bffd03 	ldbu	r2,-12(fp)
81105cf4:	10803fcc 	andi	r2,r2,255
81105cf8:	100d883a 	mov	r6,r2
81105cfc:	e17ffc17 	ldw	r5,-16(fp)
81105d00:	e13ffb17 	ldw	r4,-20(fp)
81105d04:	1105eac0 	call	81105eac <i2c_write>
81105d08:	1000011e 	bne	r2,zero,81105d10 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105d0c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105d10:	e0bff917 	ldw	r2,-28(fp)
81105d14:	10001726 	beq	r2,zero,81105d74 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
81105d18:	e03ff815 	stw	zero,-32(fp)
81105d1c:	00001006 	br	81105d60 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105d20:	e0bff817 	ldw	r2,-32(fp)
81105d24:	e0fffe17 	ldw	r3,-8(fp)
81105d28:	1889883a 	add	r4,r3,r2
81105d2c:	e0bfff0b 	ldhu	r2,-4(fp)
81105d30:	10ffffc4 	addi	r3,r2,-1
81105d34:	e0bff817 	ldw	r2,-32(fp)
81105d38:	1884c03a 	cmpne	r2,r3,r2
81105d3c:	10803fcc 	andi	r2,r2,255
81105d40:	100f883a 	mov	r7,r2
81105d44:	200d883a 	mov	r6,r4
81105d48:	e17ffc17 	ldw	r5,-16(fp)
81105d4c:	e13ffb17 	ldw	r4,-20(fp)
81105d50:	1105fe40 	call	81105fe4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105d54:	e0bff817 	ldw	r2,-32(fp)
81105d58:	10800044 	addi	r2,r2,1
81105d5c:	e0bff815 	stw	r2,-32(fp)
81105d60:	e0bfff0b 	ldhu	r2,-4(fp)
81105d64:	e0fff817 	ldw	r3,-32(fp)
81105d68:	1880020e 	bge	r3,r2,81105d74 <I2C_MultipleRead+0x13c>
81105d6c:	e0bff917 	ldw	r2,-28(fp)
81105d70:	103feb1e 	bne	r2,zero,81105d20 <__reset+0xfb0e5d20>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81105d74:	e17ffc17 	ldw	r5,-16(fp)
81105d78:	e13ffb17 	ldw	r4,-20(fp)
81105d7c:	1105e2c0 	call	81105e2c <i2c_stop>
    
    return bSuccess;    
81105d80:	e0bff917 	ldw	r2,-28(fp)
    
}
81105d84:	e037883a 	mov	sp,fp
81105d88:	dfc00117 	ldw	ra,4(sp)
81105d8c:	df000017 	ldw	fp,0(sp)
81105d90:	dec00204 	addi	sp,sp,8
81105d94:	f800283a 	ret

81105d98 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105d98:	defffc04 	addi	sp,sp,-16
81105d9c:	de00012e 	bgeu	sp,et,81105da4 <i2c_start+0xc>
81105da0:	003b68fa 	trap	3
81105da4:	dfc00315 	stw	ra,12(sp)
81105da8:	df000215 	stw	fp,8(sp)
81105dac:	df000204 	addi	fp,sp,8
81105db0:	e13ffe15 	stw	r4,-8(fp)
81105db4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105db8:	e0bfff17 	ldw	r2,-4(fp)
81105dbc:	10800104 	addi	r2,r2,4
81105dc0:	1007883a 	mov	r3,r2
81105dc4:	00800044 	movi	r2,1
81105dc8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105dcc:	e0bfff17 	ldw	r2,-4(fp)
81105dd0:	00c00044 	movi	r3,1
81105dd4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105dd8:	e0bffe17 	ldw	r2,-8(fp)
81105ddc:	00c00044 	movi	r3,1
81105de0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105de4:	01000044 	movi	r4,1
81105de8:	11290ec0 	call	811290ec <usleep>
     
    SDA_LOW(data_base); // data low
81105dec:	e0bfff17 	ldw	r2,-4(fp)
81105df0:	0007883a 	mov	r3,zero
81105df4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105df8:	01000044 	movi	r4,1
81105dfc:	11290ec0 	call	811290ec <usleep>
    SCL_LOW(clk_base); // clock low
81105e00:	e0bffe17 	ldw	r2,-8(fp)
81105e04:	0007883a 	mov	r3,zero
81105e08:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105e0c:	01000044 	movi	r4,1
81105e10:	11290ec0 	call	811290ec <usleep>
}
81105e14:	0001883a 	nop
81105e18:	e037883a 	mov	sp,fp
81105e1c:	dfc00117 	ldw	ra,4(sp)
81105e20:	df000017 	ldw	fp,0(sp)
81105e24:	dec00204 	addi	sp,sp,8
81105e28:	f800283a 	ret

81105e2c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105e2c:	defffc04 	addi	sp,sp,-16
81105e30:	de00012e 	bgeu	sp,et,81105e38 <i2c_stop+0xc>
81105e34:	003b68fa 	trap	3
81105e38:	dfc00315 	stw	ra,12(sp)
81105e3c:	df000215 	stw	fp,8(sp)
81105e40:	df000204 	addi	fp,sp,8
81105e44:	e13ffe15 	stw	r4,-8(fp)
81105e48:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105e4c:	e0bfff17 	ldw	r2,-4(fp)
81105e50:	10800104 	addi	r2,r2,4
81105e54:	1007883a 	mov	r3,r2
81105e58:	00800044 	movi	r2,1
81105e5c:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105e60:	e0bfff17 	ldw	r2,-4(fp)
81105e64:	0007883a 	mov	r3,zero
81105e68:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105e6c:	e0bffe17 	ldw	r2,-8(fp)
81105e70:	00c00044 	movi	r3,1
81105e74:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105e78:	01000044 	movi	r4,1
81105e7c:	11290ec0 	call	811290ec <usleep>
    SDA_HIGH(data_base); // data high
81105e80:	e0bfff17 	ldw	r2,-4(fp)
81105e84:	00c00044 	movi	r3,1
81105e88:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105e8c:	01000044 	movi	r4,1
81105e90:	11290ec0 	call	811290ec <usleep>
    

    
}
81105e94:	0001883a 	nop
81105e98:	e037883a 	mov	sp,fp
81105e9c:	dfc00117 	ldw	ra,4(sp)
81105ea0:	df000017 	ldw	fp,0(sp)
81105ea4:	dec00204 	addi	sp,sp,8
81105ea8:	f800283a 	ret

81105eac <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105eac:	defff804 	addi	sp,sp,-32
81105eb0:	de00012e 	bgeu	sp,et,81105eb8 <i2c_write+0xc>
81105eb4:	003b68fa 	trap	3
81105eb8:	dfc00715 	stw	ra,28(sp)
81105ebc:	df000615 	stw	fp,24(sp)
81105ec0:	df000604 	addi	fp,sp,24
81105ec4:	e13ffd15 	stw	r4,-12(fp)
81105ec8:	e17ffe15 	stw	r5,-8(fp)
81105ecc:	3005883a 	mov	r2,r6
81105ed0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105ed4:	00bfe004 	movi	r2,-128
81105ed8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105edc:	e0bffe17 	ldw	r2,-8(fp)
81105ee0:	10800104 	addi	r2,r2,4
81105ee4:	1007883a 	mov	r3,r2
81105ee8:	00800044 	movi	r2,1
81105eec:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105ef0:	e03ffb15 	stw	zero,-20(fp)
81105ef4:	00001f06 	br	81105f74 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105ef8:	e0bffd17 	ldw	r2,-12(fp)
81105efc:	0007883a 	mov	r3,zero
81105f00:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105f04:	e0ffff03 	ldbu	r3,-4(fp)
81105f08:	e0bffa03 	ldbu	r2,-24(fp)
81105f0c:	1884703a 	and	r2,r3,r2
81105f10:	10803fcc 	andi	r2,r2,255
81105f14:	10000426 	beq	r2,zero,81105f28 <i2c_write+0x7c>
            SDA_HIGH(data_base);
81105f18:	e0bffe17 	ldw	r2,-8(fp)
81105f1c:	00c00044 	movi	r3,1
81105f20:	10c00035 	stwio	r3,0(r2)
81105f24:	00000306 	br	81105f34 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
81105f28:	e0bffe17 	ldw	r2,-8(fp)
81105f2c:	0007883a 	mov	r3,zero
81105f30:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105f34:	e0bffa03 	ldbu	r2,-24(fp)
81105f38:	1004d07a 	srli	r2,r2,1
81105f3c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105f40:	e0bffd17 	ldw	r2,-12(fp)
81105f44:	00c00044 	movi	r3,1
81105f48:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105f4c:	01000044 	movi	r4,1
81105f50:	11290ec0 	call	811290ec <usleep>
        SCL_LOW(clk_base);
81105f54:	e0bffd17 	ldw	r2,-12(fp)
81105f58:	0007883a 	mov	r3,zero
81105f5c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105f60:	01000044 	movi	r4,1
81105f64:	11290ec0 	call	811290ec <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105f68:	e0bffb17 	ldw	r2,-20(fp)
81105f6c:	10800044 	addi	r2,r2,1
81105f70:	e0bffb15 	stw	r2,-20(fp)
81105f74:	e0bffb17 	ldw	r2,-20(fp)
81105f78:	10800210 	cmplti	r2,r2,8
81105f7c:	103fde1e 	bne	r2,zero,81105ef8 <__reset+0xfb0e5ef8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105f80:	e0bffe17 	ldw	r2,-8(fp)
81105f84:	10800104 	addi	r2,r2,4
81105f88:	0007883a 	mov	r3,zero
81105f8c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105f90:	e0bffd17 	ldw	r2,-12(fp)
81105f94:	00c00044 	movi	r3,1
81105f98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81105f9c:	01000044 	movi	r4,1
81105fa0:	11290ec0 	call	811290ec <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105fa4:	e0bffe17 	ldw	r2,-8(fp)
81105fa8:	10800037 	ldwio	r2,0(r2)
81105fac:	1005003a 	cmpeq	r2,r2,zero
81105fb0:	10803fcc 	andi	r2,r2,255
81105fb4:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105fb8:	e0bffd17 	ldw	r2,-12(fp)
81105fbc:	0007883a 	mov	r3,zero
81105fc0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105fc4:	01000044 	movi	r4,1
81105fc8:	11290ec0 	call	811290ec <usleep>
    return bAck;
81105fcc:	e0bffc17 	ldw	r2,-16(fp)
}    
81105fd0:	e037883a 	mov	sp,fp
81105fd4:	dfc00117 	ldw	ra,4(sp)
81105fd8:	df000017 	ldw	fp,0(sp)
81105fdc:	dec00204 	addi	sp,sp,8
81105fe0:	f800283a 	ret

81105fe4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105fe4:	defff804 	addi	sp,sp,-32
81105fe8:	de00012e 	bgeu	sp,et,81105ff0 <i2c_read+0xc>
81105fec:	003b68fa 	trap	3
81105ff0:	dfc00715 	stw	ra,28(sp)
81105ff4:	df000615 	stw	fp,24(sp)
81105ff8:	df000604 	addi	fp,sp,24
81105ffc:	e13ffc15 	stw	r4,-16(fp)
81106000:	e17ffd15 	stw	r5,-12(fp)
81106004:	e1bffe15 	stw	r6,-8(fp)
81106008:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
8110600c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81106010:	e0bffd17 	ldw	r2,-12(fp)
81106014:	10800104 	addi	r2,r2,4
81106018:	0007883a 	mov	r3,zero
8110601c:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81106020:	e0bffc17 	ldw	r2,-16(fp)
81106024:	0007883a 	mov	r3,zero
81106028:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
8110602c:	01000044 	movi	r4,1
81106030:	11290ec0 	call	811290ec <usleep>

    for(i=0;i<8;i++){
81106034:	e03ffb15 	stw	zero,-20(fp)
81106038:	00001606 	br	81106094 <i2c_read+0xb0>
        Data <<= 1;
8110603c:	e0bffa03 	ldbu	r2,-24(fp)
81106040:	1085883a 	add	r2,r2,r2
81106044:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81106048:	e0bffc17 	ldw	r2,-16(fp)
8110604c:	00c00044 	movi	r3,1
81106050:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106054:	01000044 	movi	r4,1
81106058:	11290ec0 	call	811290ec <usleep>
        if (SDA_READ(data_base))  // read data   
8110605c:	e0bffd17 	ldw	r2,-12(fp)
81106060:	10800037 	ldwio	r2,0(r2)
81106064:	10000326 	beq	r2,zero,81106074 <i2c_read+0x90>
            Data |= 0x01;
81106068:	e0bffa03 	ldbu	r2,-24(fp)
8110606c:	10800054 	ori	r2,r2,1
81106070:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81106074:	e0bffc17 	ldw	r2,-16(fp)
81106078:	0007883a 	mov	r3,zero
8110607c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106080:	01000044 	movi	r4,1
81106084:	11290ec0 	call	811290ec <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81106088:	e0bffb17 	ldw	r2,-20(fp)
8110608c:	10800044 	addi	r2,r2,1
81106090:	e0bffb15 	stw	r2,-20(fp)
81106094:	e0bffb17 	ldw	r2,-20(fp)
81106098:	10800210 	cmplti	r2,r2,8
8110609c:	103fe71e 	bne	r2,zero,8110603c <__reset+0xfb0e603c>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
811060a0:	e0bffc17 	ldw	r2,-16(fp)
811060a4:	0007883a 	mov	r3,zero
811060a8:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
811060ac:	e0bffd17 	ldw	r2,-12(fp)
811060b0:	10800104 	addi	r2,r2,4
811060b4:	1007883a 	mov	r3,r2
811060b8:	00800044 	movi	r2,1
811060bc:	18800035 	stwio	r2,0(r3)
    if (bAck)
811060c0:	e0bfff17 	ldw	r2,-4(fp)
811060c4:	10000426 	beq	r2,zero,811060d8 <i2c_read+0xf4>
        SDA_LOW(data_base);
811060c8:	e0bffd17 	ldw	r2,-12(fp)
811060cc:	0007883a 	mov	r3,zero
811060d0:	10c00035 	stwio	r3,0(r2)
811060d4:	00000306 	br	811060e4 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
811060d8:	e0bffd17 	ldw	r2,-12(fp)
811060dc:	00c00044 	movi	r3,1
811060e0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
811060e4:	e0bffc17 	ldw	r2,-16(fp)
811060e8:	00c00044 	movi	r3,1
811060ec:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
811060f0:	01000044 	movi	r4,1
811060f4:	11290ec0 	call	811290ec <usleep>
    SCL_LOW(clk_base); // clock low
811060f8:	e0bffc17 	ldw	r2,-16(fp)
811060fc:	0007883a 	mov	r3,zero
81106100:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81106104:	01000044 	movi	r4,1
81106108:	11290ec0 	call	811290ec <usleep>
    SDA_LOW(data_base);  // data low
8110610c:	e0bffd17 	ldw	r2,-12(fp)
81106110:	0007883a 	mov	r3,zero
81106114:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
81106118:	01000044 	movi	r4,1
8110611c:	11290ec0 	call	811290ec <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81106120:	e0bffe17 	ldw	r2,-8(fp)
81106124:	e0fffa03 	ldbu	r3,-24(fp)
81106128:	10c00005 	stb	r3,0(r2)
}
8110612c:	0001883a 	nop
81106130:	e037883a 	mov	sp,fp
81106134:	dfc00117 	ldw	ra,4(sp)
81106138:	df000017 	ldw	fp,0(sp)
8110613c:	dec00204 	addi	sp,sp,8
81106140:	f800283a 	ret

81106144 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
81106144:	defffd04 	addi	sp,sp,-12
81106148:	de00012e 	bgeu	sp,et,81106150 <bSetBoardLeds+0xc>
8110614c:	003b68fa 	trap	3
81106150:	df000215 	stw	fp,8(sp)
81106154:	df000204 	addi	fp,sp,8
81106158:	e13ffe15 	stw	r4,-8(fp)
8110615c:	2805883a 	mov	r2,r5
81106160:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81106164:	e0bffe17 	ldw	r2,-8(fp)
81106168:	10800058 	cmpnei	r2,r2,1
8110616c:	1000071e 	bne	r2,zero,8110618c <bSetBoardLeds+0x48>
	LedsBoardControl &= (~LedsMask);
81106170:	e0bfff03 	ldbu	r2,-4(fp)
81106174:	0084303a 	nor	r2,zero,r2
81106178:	1007883a 	mov	r3,r2
8110617c:	d0a04603 	ldbu	r2,-32488(gp)
81106180:	1884703a 	and	r2,r3,r2
81106184:	d0a04605 	stb	r2,-32488(gp)
81106188:	00000406 	br	8110619c <bSetBoardLeds+0x58>
  } else {
	LedsBoardControl |= LedsMask;
8110618c:	d0e04603 	ldbu	r3,-32488(gp)
81106190:	e0bfff03 	ldbu	r2,-4(fp)
81106194:	1884b03a 	or	r2,r3,r2
81106198:	d0a04605 	stb	r2,-32488(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110619c:	d0a04603 	ldbu	r2,-32488(gp)
811061a0:	10c03fcc 	andi	r3,r2,255
811061a4:	00a00034 	movhi	r2,32768
811061a8:	10827404 	addi	r2,r2,2512
811061ac:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811061b0:	00800044 	movi	r2,1
}
811061b4:	e037883a 	mov	sp,fp
811061b8:	df000017 	ldw	fp,0(sp)
811061bc:	dec00104 	addi	sp,sp,4
811061c0:	f800283a 	ret

811061c4 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
811061c4:	defffd04 	addi	sp,sp,-12
811061c8:	de00012e 	bgeu	sp,et,811061d0 <bSetPainelLeds+0xc>
811061cc:	003b68fa 	trap	3
811061d0:	df000215 	stw	fp,8(sp)
811061d4:	df000204 	addi	fp,sp,8
811061d8:	e13ffe15 	stw	r4,-8(fp)
811061dc:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
811061e0:	e0bffe17 	ldw	r2,-8(fp)
811061e4:	10800058 	cmpnei	r2,r2,1
811061e8:	1000051e 	bne	r2,zero,81106200 <bSetPainelLeds+0x3c>
	LedsPainelControl |= LedsMask;
811061ec:	d0e00217 	ldw	r3,-32760(gp)
811061f0:	e0bfff17 	ldw	r2,-4(fp)
811061f4:	1884b03a 	or	r2,r3,r2
811061f8:	d0a00215 	stw	r2,-32760(gp)
811061fc:	00000506 	br	81106214 <bSetPainelLeds+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81106200:	e0bfff17 	ldw	r2,-4(fp)
81106204:	0086303a 	nor	r3,zero,r2
81106208:	d0a00217 	ldw	r2,-32760(gp)
8110620c:	1884703a 	and	r2,r3,r2
81106210:	d0a00215 	stw	r2,-32760(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
81106214:	d0a00217 	ldw	r2,-32760(gp)
81106218:	1007883a 	mov	r3,r2
8110621c:	00a00034 	movhi	r2,32768
81106220:	10824004 	addi	r2,r2,2304
81106224:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81106228:	00800044 	movi	r2,1
}
8110622c:	e037883a 	mov	sp,fp
81106230:	df000017 	ldw	fp,0(sp)
81106234:	dec00104 	addi	sp,sp,4
81106238:	f800283a 	ret

8110623c <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
8110623c:	defffc04 	addi	sp,sp,-16
81106240:	de00012e 	bgeu	sp,et,81106248 <msgdma_write_extended_descriptor+0xc>
81106244:	003b68fa 	trap	3
81106248:	df000315 	stw	fp,12(sp)
8110624c:	df000304 	addi	fp,sp,12
81106250:	e13ffd15 	stw	r4,-12(fp)
81106254:	e17ffe15 	stw	r5,-8(fp)
81106258:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
8110625c:	e0bffd17 	ldw	r2,-12(fp)
81106260:	10800037 	ldwio	r2,0(r2)
81106264:	1080010c 	andi	r2,r2,4
81106268:	10000226 	beq	r2,zero,81106274 <msgdma_write_extended_descriptor+0x38>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
8110626c:	00bff904 	movi	r2,-28
81106270:	00003d06 	br	81106368 <msgdma_write_extended_descriptor+0x12c>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81106274:	e0bfff17 	ldw	r2,-4(fp)
81106278:	10800017 	ldw	r2,0(r2)
8110627c:	1007883a 	mov	r3,r2
81106280:	e0bffe17 	ldw	r2,-8(fp)
81106284:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81106288:	e0bffe17 	ldw	r2,-8(fp)
8110628c:	10800104 	addi	r2,r2,4
81106290:	e0ffff17 	ldw	r3,-4(fp)
81106294:	18c00117 	ldw	r3,4(r3)
81106298:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110629c:	e0bffe17 	ldw	r2,-8(fp)
811062a0:	10800204 	addi	r2,r2,8
811062a4:	e0ffff17 	ldw	r3,-4(fp)
811062a8:	18c00217 	ldw	r3,8(r3)
811062ac:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
811062b0:	e0bffe17 	ldw	r2,-8(fp)
811062b4:	10800304 	addi	r2,r2,12
811062b8:	e0ffff17 	ldw	r3,-4(fp)
811062bc:	18c0030b 	ldhu	r3,12(r3)
811062c0:	18ffffcc 	andi	r3,r3,65535
811062c4:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
811062c8:	e0bffe17 	ldw	r2,-8(fp)
811062cc:	10800384 	addi	r2,r2,14
811062d0:	e0ffff17 	ldw	r3,-4(fp)
811062d4:	18c00383 	ldbu	r3,14(r3)
811062d8:	18c03fcc 	andi	r3,r3,255
811062dc:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
811062e0:	e0bffe17 	ldw	r2,-8(fp)
811062e4:	108003c4 	addi	r2,r2,15
811062e8:	e0ffff17 	ldw	r3,-4(fp)
811062ec:	18c003c3 	ldbu	r3,15(r3)
811062f0:	18c03fcc 	andi	r3,r3,255
811062f4:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
811062f8:	e0bffe17 	ldw	r2,-8(fp)
811062fc:	10800404 	addi	r2,r2,16
81106300:	e0ffff17 	ldw	r3,-4(fp)
81106304:	18c0040b 	ldhu	r3,16(r3)
81106308:	18ffffcc 	andi	r3,r3,65535
8110630c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
81106310:	e0bffe17 	ldw	r2,-8(fp)
81106314:	10800484 	addi	r2,r2,18
81106318:	e0ffff17 	ldw	r3,-4(fp)
8110631c:	18c0048b 	ldhu	r3,18(r3)
81106320:	18ffffcc 	andi	r3,r3,65535
81106324:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
81106328:	e0bffe17 	ldw	r2,-8(fp)
8110632c:	10800504 	addi	r2,r2,20
81106330:	e0ffff17 	ldw	r3,-4(fp)
81106334:	18c00517 	ldw	r3,20(r3)
81106338:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
8110633c:	e0bffe17 	ldw	r2,-8(fp)
81106340:	10800604 	addi	r2,r2,24
81106344:	e0ffff17 	ldw	r3,-4(fp)
81106348:	18c00617 	ldw	r3,24(r3)
8110634c:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
81106350:	e0bffe17 	ldw	r2,-8(fp)
81106354:	10800704 	addi	r2,r2,28
81106358:	e0ffff17 	ldw	r3,-4(fp)
8110635c:	18c00717 	ldw	r3,28(r3)
81106360:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
81106364:	0005883a 	mov	r2,zero
}
81106368:	e037883a 	mov	sp,fp
8110636c:	df000017 	ldw	fp,0(sp)
81106370:	dec00104 	addi	sp,sp,4
81106374:	f800283a 	ret

81106378 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81106378:	defff604 	addi	sp,sp,-40
8110637c:	de00012e 	bgeu	sp,et,81106384 <msgdma_construct_extended_descriptor+0xc>
81106380:	003b68fa 	trap	3
81106384:	df000915 	stw	fp,36(sp)
81106388:	df000904 	addi	fp,sp,36
8110638c:	e13ff715 	stw	r4,-36(fp)
81106390:	e17ff815 	stw	r5,-32(fp)
81106394:	e1bff915 	stw	r6,-28(fp)
81106398:	e1fffa15 	stw	r7,-24(fp)
8110639c:	e1800517 	ldw	r6,20(fp)
811063a0:	e1400617 	ldw	r5,24(fp)
811063a4:	e1000717 	ldw	r4,28(fp)
811063a8:	e0c00817 	ldw	r3,32(fp)
811063ac:	e0800917 	ldw	r2,36(fp)
811063b0:	e1bffb0d 	sth	r6,-20(fp)
811063b4:	e17ffc05 	stb	r5,-16(fp)
811063b8:	e13ffd05 	stb	r4,-12(fp)
811063bc:	e0fffe0d 	sth	r3,-8(fp)
811063c0:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
811063c4:	e0bff717 	ldw	r2,-36(fp)
811063c8:	10c01217 	ldw	r3,72(r2)
811063cc:	e0800117 	ldw	r2,4(fp)
811063d0:	18801936 	bltu	r3,r2,81106438 <msgdma_construct_extended_descriptor+0xc0>
811063d4:	e13ff717 	ldw	r4,-36(fp)
811063d8:	20801317 	ldw	r2,76(r4)
811063dc:	20c01417 	ldw	r3,80(r4)
811063e0:	e13ffe0b 	ldhu	r4,-8(fp)
811063e4:	213fffcc 	andi	r4,r4,65535
811063e8:	2015883a 	mov	r10,r4
811063ec:	0017883a 	mov	r11,zero
811063f0:	1ac01136 	bltu	r3,r11,81106438 <msgdma_construct_extended_descriptor+0xc0>
811063f4:	58c0011e 	bne	r11,r3,811063fc <msgdma_construct_extended_descriptor+0x84>
811063f8:	12800f36 	bltu	r2,r10,81106438 <msgdma_construct_extended_descriptor+0xc0>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
811063fc:	e13ff717 	ldw	r4,-36(fp)
81106400:	20801317 	ldw	r2,76(r4)
81106404:	20c01417 	ldw	r3,80(r4)
81106408:	e13fff0b 	ldhu	r4,-4(fp)
8110640c:	213fffcc 	andi	r4,r4,65535
81106410:	2011883a 	mov	r8,r4
81106414:	0013883a 	mov	r9,zero
81106418:	1a400736 	bltu	r3,r9,81106438 <msgdma_construct_extended_descriptor+0xc0>
8110641c:	48c0011e 	bne	r9,r3,81106424 <msgdma_construct_extended_descriptor+0xac>
81106420:	12000536 	bltu	r2,r8,81106438 <msgdma_construct_extended_descriptor+0xc0>
81106424:	e0bff717 	ldw	r2,-36(fp)
81106428:	10801703 	ldbu	r2,92(r2)
8110642c:	10803fcc 	andi	r2,r2,255
81106430:	10800060 	cmpeqi	r2,r2,1
81106434:	1000021e 	bne	r2,zero,81106440 <msgdma_construct_extended_descriptor+0xc8>
		return -EINVAL;
81106438:	00bffa84 	movi	r2,-22
8110643c:	00002306 	br	811064cc <msgdma_construct_extended_descriptor+0x154>
	}

	descriptor->read_address_low = read_address;
81106440:	e0bff817 	ldw	r2,-32(fp)
81106444:	e0fff917 	ldw	r3,-28(fp)
81106448:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
8110644c:	e0bff817 	ldw	r2,-32(fp)
81106450:	e0fffa17 	ldw	r3,-24(fp)
81106454:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
81106458:	e0bff817 	ldw	r2,-32(fp)
8110645c:	e0c00117 	ldw	r3,4(fp)
81106460:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
81106464:	e0bff817 	ldw	r2,-32(fp)
81106468:	e0fffb0b 	ldhu	r3,-20(fp)
8110646c:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81106470:	e0bff817 	ldw	r2,-32(fp)
81106474:	e0fffc03 	ldbu	r3,-16(fp)
81106478:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110647c:	e0bff817 	ldw	r2,-32(fp)
81106480:	e0fffd03 	ldbu	r3,-12(fp)
81106484:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81106488:	e0bff817 	ldw	r2,-32(fp)
8110648c:	e0fffe0b 	ldhu	r3,-8(fp)
81106490:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81106494:	e0bff817 	ldw	r2,-32(fp)
81106498:	e0ffff0b 	ldhu	r3,-4(fp)
8110649c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
811064a0:	e0bff817 	ldw	r2,-32(fp)
811064a4:	e0c00317 	ldw	r3,12(fp)
811064a8:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
811064ac:	e0bff817 	ldw	r2,-32(fp)
811064b0:	e0c00417 	ldw	r3,16(fp)
811064b4:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811064b8:	e0800217 	ldw	r2,8(fp)
811064bc:	10e00034 	orhi	r3,r2,32768
811064c0:	e0bff817 	ldw	r2,-32(fp)
811064c4:	10c00715 	stw	r3,28(r2)

	return 0;
811064c8:	0005883a 	mov	r2,zero

}
811064cc:	e037883a 	mov	sp,fp
811064d0:	df000017 	ldw	fp,0(sp)
811064d4:	dec00104 	addi	sp,sp,4
811064d8:	f800283a 	ret

811064dc <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
811064dc:	deffee04 	addi	sp,sp,-72
811064e0:	de00012e 	bgeu	sp,et,811064e8 <msgdma_descriptor_async_transfer+0xc>
811064e4:	003b68fa 	trap	3
811064e8:	dfc01115 	stw	ra,68(sp)
811064ec:	df001015 	stw	fp,64(sp)
811064f0:	df001004 	addi	fp,sp,64
811064f4:	e13ffd15 	stw	r4,-12(fp)
811064f8:	e17ffe15 	stw	r5,-8(fp)
811064fc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106500:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106504:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81106508:	e03ff00d 	sth	zero,-64(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110650c:	e0bffd17 	ldw	r2,-12(fp)
81106510:	10800317 	ldw	r2,12(r2)
81106514:	10800204 	addi	r2,r2,8
81106518:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
8110651c:	10bfffcc 	andi	r2,r2,65535
81106520:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106524:	e0bffd17 	ldw	r2,-12(fp)
81106528:	10800317 	ldw	r2,12(r2)
8110652c:	10800204 	addi	r2,r2,8
81106530:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81106534:	1004d43a 	srli	r2,r2,16
81106538:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
8110653c:	e0bffd17 	ldw	r2,-12(fp)
81106540:	10800917 	ldw	r2,36(r2)
81106544:	e0fff417 	ldw	r3,-48(fp)
81106548:	1880042e 	bgeu	r3,r2,8110655c <msgdma_descriptor_async_transfer+0x80>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
8110654c:	e0bffd17 	ldw	r2,-12(fp)
81106550:	10800917 	ldw	r2,36(r2)
81106554:	e0fff317 	ldw	r3,-52(fp)
81106558:	18800236 	bltu	r3,r2,81106564 <msgdma_descriptor_async_transfer+0x88>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
8110655c:	00bff904 	movi	r2,-28
81106560:	00009f06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
81106564:	e0bffd17 	ldw	r2,-12(fp)
81106568:	10801817 	ldw	r2,96(r2)
8110656c:	e0bff615 	stw	r2,-40(fp)
81106570:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81106574:	e0bffc0b 	ldhu	r2,-16(fp)
81106578:	e0fffc84 	addi	r3,fp,-14
8110657c:	180d883a 	mov	r6,r3
81106580:	100b883a 	mov	r5,r2
81106584:	e13ff617 	ldw	r4,-40(fp)
81106588:	112ff740 	call	8112ff74 <OSSemPend>

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110658c:	00800804 	movi	r2,32
81106590:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106594:	0005303a 	rdctl	r2,status
81106598:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110659c:	e0fff717 	ldw	r3,-36(fp)
811065a0:	00bfff84 	movi	r2,-2
811065a4:	1884703a 	and	r2,r3,r2
811065a8:	1001703a 	wrctl	status,r2
  
  return context;
811065ac:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811065b0:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811065b4:	e0bffd17 	ldw	r2,-12(fp)
811065b8:	10800317 	ldw	r2,12(r2)
811065bc:	10800104 	addi	r2,r2,4
811065c0:	e0fff117 	ldw	r3,-60(fp)
811065c4:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811065c8:	e0bffd17 	ldw	r2,-12(fp)
811065cc:	10800317 	ldw	r2,12(r2)
811065d0:	e0fffd17 	ldw	r3,-12(fp)
811065d4:	18c00317 	ldw	r3,12(r3)
811065d8:	18c00037 	ldwio	r3,0(r3)
811065dc:	10c00035 	stwio	r3,0(r2)
811065e0:	e0bff217 	ldw	r2,-56(fp)
811065e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811065e8:	e0bffb17 	ldw	r2,-20(fp)
811065ec:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
811065f0:	e0bffe17 	ldw	r2,-8(fp)
811065f4:	10001026 	beq	r2,zero,81106638 <msgdma_descriptor_async_transfer+0x15c>
811065f8:	e0bfff17 	ldw	r2,-4(fp)
811065fc:	10000e1e 	bne	r2,zero,81106638 <msgdma_descriptor_async_transfer+0x15c>
		counter = 0; /* reset counter */
81106600:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106604:	d0a04f17 	ldw	r2,-32452(gp)
81106608:	100f883a 	mov	r7,r2
8110660c:	01800784 	movi	r6,30
81106610:	01400044 	movi	r5,1
81106614:	01204534 	movhi	r4,33044
81106618:	2136ad04 	addi	r4,r4,-9548
8110661c:	11124700 	call	81112470 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106620:	e0bffd17 	ldw	r2,-12(fp)
81106624:	10801817 	ldw	r2,96(r2)
81106628:	1009883a 	mov	r4,r2
8110662c:	11302fc0 	call	811302fc <OSSemPost>

		return -ETIME;
81106630:	00bff084 	movi	r2,-62
81106634:	00006a06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106638:	e0bffe17 	ldw	r2,-8(fp)
8110663c:	1000231e 	bne	r2,zero,811066cc <msgdma_descriptor_async_transfer+0x1f0>
81106640:	e0bfff17 	ldw	r2,-4(fp)
81106644:	10002126 	beq	r2,zero,811066cc <msgdma_descriptor_async_transfer+0x1f0>
		counter = 0; /* reset counter */
81106648:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
8110664c:	00001506 	br	811066a4 <msgdma_descriptor_async_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
81106650:	01000044 	movi	r4,1
81106654:	11276380 	call	81127638 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106658:	e0bff00b 	ldhu	r2,-64(fp)
8110665c:	1084e230 	cmpltui	r2,r2,5000
81106660:	10000d1e 	bne	r2,zero,81106698 <msgdma_descriptor_async_transfer+0x1bc>
			{
#ifdef DEBUG_ON
				debug(fp,
81106664:	d0a04f17 	ldw	r2,-32452(gp)
81106668:	100f883a 	mov	r7,r2
8110666c:	01801544 	movi	r6,85
81106670:	01400044 	movi	r5,1
81106674:	01204534 	movhi	r4,33044
81106678:	2136b504 	addi	r4,r4,-9516
8110667c:	11124700 	call	81112470 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
81106680:	e0bffd17 	ldw	r2,-12(fp)
81106684:	10801817 	ldw	r2,96(r2)
81106688:	1009883a 	mov	r4,r2
8110668c:	11302fc0 	call	811302fc <OSSemPost>

				return -ETIME;
81106690:	00bff084 	movi	r2,-62
81106694:	00005206 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
			}
			counter++;
81106698:	e0bff00b 	ldhu	r2,-64(fp)
8110669c:	10800044 	addi	r2,r2,1
811066a0:	e0bff00d 	sth	r2,-64(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811066a4:	e0bffd17 	ldw	r2,-12(fp)
811066a8:	10c00317 	ldw	r3,12(r2)
811066ac:	e0bffd17 	ldw	r2,-12(fp)
811066b0:	10800417 	ldw	r2,16(r2)
811066b4:	e1bfff17 	ldw	r6,-4(fp)
811066b8:	100b883a 	mov	r5,r2
811066bc:	1809883a 	mov	r4,r3
811066c0:	110623c0 	call	8110623c <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811066c4:	103fe21e 	bne	r2,zero,81106650 <__reset+0xfb0e6650>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811066c8:	00000606 	br	811066e4 <msgdma_descriptor_async_transfer+0x208>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811066cc:	e0bffd17 	ldw	r2,-12(fp)
811066d0:	10801817 	ldw	r2,96(r2)
811066d4:	1009883a 	mov	r4,r2
811066d8:	11302fc0 	call	811302fc <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811066dc:	00bfffc4 	movi	r2,-1
811066e0:	00003f06 	br	811067e0 <msgdma_descriptor_async_transfer+0x304>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
811066e4:	e0bffd17 	ldw	r2,-12(fp)
811066e8:	10800b17 	ldw	r2,44(r2)
811066ec:	10001c26 	beq	r2,zero,81106760 <msgdma_descriptor_async_transfer+0x284>

		control |= (dev->control |
811066f0:	e0bffd17 	ldw	r2,-12(fp)
811066f4:	10c00d17 	ldw	r3,52(r2)
811066f8:	e0bff117 	ldw	r2,-60(fp)
811066fc:	1884b03a 	or	r2,r3,r2
81106700:	10800514 	ori	r2,r2,20
81106704:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106708:	e0fff117 	ldw	r3,-60(fp)
8110670c:	00bff7c4 	movi	r2,-33
81106710:	1884703a 	and	r2,r3,r2
81106714:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106718:	0005303a 	rdctl	r2,status
8110671c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106720:	e0fff917 	ldw	r3,-28(fp)
81106724:	00bfff84 	movi	r2,-2
81106728:	1884703a 	and	r2,r3,r2
8110672c:	1001703a 	wrctl	status,r2
  
  return context;
81106730:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81106734:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	10800104 	addi	r2,r2,4
81106744:	e0fff117 	ldw	r3,-60(fp)
81106748:	10c00035 	stwio	r3,0(r2)
8110674c:	e0bff217 	ldw	r2,-56(fp)
81106750:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106754:	e0bff517 	ldw	r2,-44(fp)
81106758:	1001703a 	wrctl	status,r2
8110675c:	00001b06 	br	811067cc <msgdma_descriptor_async_transfer+0x2f0>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
81106760:	e0bffd17 	ldw	r2,-12(fp)
81106764:	10c00d17 	ldw	r3,52(r2)
81106768:	e0bff117 	ldw	r2,-60(fp)
8110676c:	1884b03a 	or	r2,r3,r2
81106770:	10800114 	ori	r2,r2,4
81106774:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81106778:	e0fff117 	ldw	r3,-60(fp)
8110677c:	00bff3c4 	movi	r2,-49
81106780:	1884703a 	and	r2,r3,r2
81106784:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106788:	0005303a 	rdctl	r2,status
8110678c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106790:	e0fffa17 	ldw	r3,-24(fp)
81106794:	00bfff84 	movi	r2,-2
81106798:	1884703a 	and	r2,r3,r2
8110679c:	1001703a 	wrctl	status,r2
  
  return context;
811067a0:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811067a4:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811067a8:	e0bffd17 	ldw	r2,-12(fp)
811067ac:	10800317 	ldw	r2,12(r2)
811067b0:	10800104 	addi	r2,r2,4
811067b4:	e0fff117 	ldw	r3,-60(fp)
811067b8:	10c00035 	stwio	r3,0(r2)
811067bc:	e0bff217 	ldw	r2,-56(fp)
811067c0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811067c4:	e0bff817 	ldw	r2,-32(fp)
811067c8:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
811067cc:	e0bffd17 	ldw	r2,-12(fp)
811067d0:	10801817 	ldw	r2,96(r2)
811067d4:	1009883a 	mov	r4,r2
811067d8:	11302fc0 	call	811302fc <OSSemPost>

	return 0;
811067dc:	0005883a 	mov	r2,zero
}
811067e0:	e037883a 	mov	sp,fp
811067e4:	dfc00117 	ldw	ra,4(sp)
811067e8:	df000017 	ldw	fp,0(sp)
811067ec:	dec00204 	addi	sp,sp,8
811067f0:	f800283a 	ret

811067f4 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
811067f4:	deffee04 	addi	sp,sp,-72
811067f8:	de00012e 	bgeu	sp,et,81106800 <msgdma_descriptor_sync_transfer+0xc>
811067fc:	003b68fa 	trap	3
81106800:	dfc01115 	stw	ra,68(sp)
81106804:	df001015 	stw	fp,64(sp)
81106808:	df001004 	addi	fp,sp,64
8110680c:	e13ffd15 	stw	r4,-12(fp)
81106810:	e17ffe15 	stw	r5,-8(fp)
81106814:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106818:	e03ff415 	stw	zero,-48(fp)
	alt_irq_context context = 0;
8110681c:	e03ff515 	stw	zero,-44(fp)
	alt_u32 csr_status = 0;
81106820:	e03ff015 	stw	zero,-64(fp)
	alt_u16 counter = 0;
81106824:	e03ff10d 	sth	zero,-60(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106828:	e0bffd17 	ldw	r2,-12(fp)
8110682c:	10800317 	ldw	r2,12(r2)
81106830:	10800204 	addi	r2,r2,8
81106834:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
81106838:	10bfffcc 	andi	r2,r2,65535
8110683c:	e0bff215 	stw	r2,-56(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106840:	e0bffd17 	ldw	r2,-12(fp)
81106844:	10800317 	ldw	r2,12(r2)
81106848:	10800204 	addi	r2,r2,8
8110684c:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
81106850:	1004d43a 	srli	r2,r2,16
81106854:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
81106858:	00807804 	movi	r2,480
8110685c:	e0bff615 	stw	r2,-40(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81106860:	00001d06 	br	811068d8 <msgdma_descriptor_sync_transfer+0xe4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
81106864:	01000044 	movi	r4,1
81106868:	11276380 	call	81127638 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
8110686c:	e0bff10b 	ldhu	r2,-60(fp)
81106870:	1084e230 	cmpltui	r2,r2,5000
81106874:	1000091e 	bne	r2,zero,8110689c <msgdma_descriptor_sync_transfer+0xa8>
		{
#ifdef DEBUG_ON
			debug(fp,
81106878:	d0a04f17 	ldw	r2,-32452(gp)
8110687c:	100f883a 	mov	r7,r2
81106880:	01801304 	movi	r6,76
81106884:	01400044 	movi	r5,1
81106888:	01204534 	movhi	r4,33044
8110688c:	2136cb04 	addi	r4,r4,-9428
81106890:	11124700 	call	81112470 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81106894:	00bff084 	movi	r2,-62
81106898:	0000d006 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
8110689c:	e0bff10b 	ldhu	r2,-60(fp)
811068a0:	10800044 	addi	r2,r2,1
811068a4:	e0bff10d 	sth	r2,-60(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811068a8:	e0bffd17 	ldw	r2,-12(fp)
811068ac:	10800317 	ldw	r2,12(r2)
811068b0:	10800204 	addi	r2,r2,8
811068b4:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
811068b8:	10bfffcc 	andi	r2,r2,65535
811068bc:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811068c0:	e0bffd17 	ldw	r2,-12(fp)
811068c4:	10800317 	ldw	r2,12(r2)
811068c8:	10800204 	addi	r2,r2,8
811068cc:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
811068d0:	1004d43a 	srli	r2,r2,16
811068d4:	e0bff315 	stw	r2,-52(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811068d8:	e0bffd17 	ldw	r2,-12(fp)
811068dc:	10800917 	ldw	r2,36(r2)
811068e0:	e0fff317 	ldw	r3,-52(fp)
811068e4:	18bfdf2e 	bgeu	r3,r2,81106864 <__reset+0xfb0e6864>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
811068e8:	e0bffd17 	ldw	r2,-12(fp)
811068ec:	10800917 	ldw	r2,36(r2)
811068f0:	e0fff217 	ldw	r3,-56(fp)
811068f4:	18bfdb2e 	bgeu	r3,r2,81106864 <__reset+0xfb0e6864>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
811068f8:	e0bffd17 	ldw	r2,-12(fp)
811068fc:	10801817 	ldw	r2,96(r2)
81106900:	e0bff815 	stw	r2,-32(fp)
81106904:	e03ffc0d 	sth	zero,-16(fp)
81106908:	e0bffc0b 	ldhu	r2,-16(fp)
8110690c:	e0fffc84 	addi	r3,fp,-14
81106910:	180d883a 	mov	r6,r3
81106914:	100b883a 	mov	r5,r2
81106918:	e13ff817 	ldw	r4,-32(fp)
8110691c:	112ff740 	call	8112ff74 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106920:	0005303a 	rdctl	r2,status
81106924:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106928:	e0fffb17 	ldw	r3,-20(fp)
8110692c:	00bfff84 	movi	r2,-2
81106930:	1884703a 	and	r2,r3,r2
81106934:	1001703a 	wrctl	status,r2
  
  return context;
81106938:	e0bffb17 	ldw	r2,-20(fp)

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8110693c:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106940:	e0bffd17 	ldw	r2,-12(fp)
81106944:	10800317 	ldw	r2,12(r2)
81106948:	10800104 	addi	r2,r2,4
8110694c:	00c00804 	movi	r3,32
81106950:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106954:	e0bffd17 	ldw	r2,-12(fp)
81106958:	10800317 	ldw	r2,12(r2)
8110695c:	e0fffd17 	ldw	r3,-12(fp)
81106960:	18c00317 	ldw	r3,12(r3)
81106964:	18c00037 	ldwio	r3,0(r3)
81106968:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
8110696c:	e0bffe17 	ldw	r2,-8(fp)
81106970:	10001026 	beq	r2,zero,811069b4 <msgdma_descriptor_sync_transfer+0x1c0>
81106974:	e0bfff17 	ldw	r2,-4(fp)
81106978:	10000e1e 	bne	r2,zero,811069b4 <msgdma_descriptor_sync_transfer+0x1c0>
		counter = 0; /* reset counter */
8110697c:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106980:	d0a04f17 	ldw	r2,-32452(gp)
81106984:	100f883a 	mov	r7,r2
81106988:	01800784 	movi	r6,30
8110698c:	01400044 	movi	r5,1
81106990:	01204534 	movhi	r4,33044
81106994:	2136ad04 	addi	r4,r4,-9548
81106998:	11124700 	call	81112470 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110699c:	e0bffd17 	ldw	r2,-12(fp)
811069a0:	10801817 	ldw	r2,96(r2)
811069a4:	1009883a 	mov	r4,r2
811069a8:	11302fc0 	call	811302fc <OSSemPost>

		return -ETIME;
811069ac:	00bff084 	movi	r2,-62
811069b0:	00008a06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811069b4:	e0bffe17 	ldw	r2,-8(fp)
811069b8:	1000231e 	bne	r2,zero,81106a48 <msgdma_descriptor_sync_transfer+0x254>
811069bc:	e0bfff17 	ldw	r2,-4(fp)
811069c0:	10002126 	beq	r2,zero,81106a48 <msgdma_descriptor_sync_transfer+0x254>
		counter = 0; /* reset counter */
811069c4:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811069c8:	00001506 	br	81106a20 <msgdma_descriptor_sync_transfer+0x22c>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811069cc:	01000044 	movi	r4,1
811069d0:	11276380 	call	81127638 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811069d4:	e0bff10b 	ldhu	r2,-60(fp)
811069d8:	1084e230 	cmpltui	r2,r2,5000
811069dc:	10000d1e 	bne	r2,zero,81106a14 <msgdma_descriptor_sync_transfer+0x220>
			{
#ifdef DEBUG_ON
				debug(fp,
811069e0:	d0a04f17 	ldw	r2,-32452(gp)
811069e4:	100f883a 	mov	r7,r2
811069e8:	01801004 	movi	r6,64
811069ec:	01400044 	movi	r5,1
811069f0:	01204534 	movhi	r4,33044
811069f4:	2136df04 	addi	r4,r4,-9348
811069f8:	11124700 	call	81112470 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
811069fc:	e0bffd17 	ldw	r2,-12(fp)
81106a00:	10801817 	ldw	r2,96(r2)
81106a04:	1009883a 	mov	r4,r2
81106a08:	11302fc0 	call	811302fc <OSSemPost>

				return -ETIME;
81106a0c:	00bff084 	movi	r2,-62
81106a10:	00007206 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
			}
			counter++;
81106a14:	e0bff10b 	ldhu	r2,-60(fp)
81106a18:	10800044 	addi	r2,r2,1
81106a1c:	e0bff10d 	sth	r2,-60(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106a20:	e0bffd17 	ldw	r2,-12(fp)
81106a24:	10c00317 	ldw	r3,12(r2)
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	10800417 	ldw	r2,16(r2)
81106a30:	e1bfff17 	ldw	r6,-4(fp)
81106a34:	100b883a 	mov	r5,r2
81106a38:	1809883a 	mov	r4,r3
81106a3c:	110623c0 	call	8110623c <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106a40:	103fe21e 	bne	r2,zero,811069cc <__reset+0xfb0e69cc>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106a44:	00000606 	br	81106a60 <msgdma_descriptor_sync_transfer+0x26c>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106a48:	e0bffd17 	ldw	r2,-12(fp)
81106a4c:	10801817 	ldw	r2,96(r2)
81106a50:	1009883a 	mov	r4,r2
81106a54:	11302fc0 	call	811302fc <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
81106a58:	00bfffc4 	movi	r2,-1
81106a5c:	00005f06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81106a60:	e0bffd17 	ldw	r2,-12(fp)
81106a64:	10800317 	ldw	r2,12(r2)
81106a68:	10800104 	addi	r2,r2,4
81106a6c:	e0fffd17 	ldw	r3,-12(fp)
81106a70:	19000d17 	ldw	r4,52(r3)
81106a74:	00fff2c4 	movi	r3,-53
81106a78:	20c6703a 	and	r3,r4,r3
81106a7c:	18c00114 	ori	r3,r3,4
81106a80:	10c00035 	stwio	r3,0(r2)
81106a84:	e0bff517 	ldw	r2,-44(fp)
81106a88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106a8c:	e0bff717 	ldw	r2,-36(fp)
81106a90:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81106a94:	e03ff10d 	sth	zero,-60(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a98:	e0bffd17 	ldw	r2,-12(fp)
81106a9c:	10800317 	ldw	r2,12(r2)
81106aa0:	10800037 	ldwio	r2,0(r2)
81106aa4:	e0bff015 	stw	r2,-64(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106aa8:	00001906 	br	81106b10 <msgdma_descriptor_sync_transfer+0x31c>
		alt_busy_sleep(1); /* delay 1us */
81106aac:	01000044 	movi	r4,1
81106ab0:	11276380 	call	81127638 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106ab4:	e0bff10b 	ldhu	r2,-60(fp)
81106ab8:	1084e230 	cmpltui	r2,r2,5000
81106abc:	10000d1e 	bne	r2,zero,81106af4 <msgdma_descriptor_sync_transfer+0x300>
		{
#ifdef DEBUG_ON
			debug(fp,
81106ac0:	d0a04f17 	ldw	r2,-32452(gp)
81106ac4:	100f883a 	mov	r7,r2
81106ac8:	01801184 	movi	r6,70
81106acc:	01400044 	movi	r5,1
81106ad0:	01204534 	movhi	r4,33044
81106ad4:	2136f004 	addi	r4,r4,-9280
81106ad8:	11124700 	call	81112470 <fwrite>

			/*
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);
81106adc:	e0bffd17 	ldw	r2,-12(fp)
81106ae0:	10801817 	ldw	r2,96(r2)
81106ae4:	1009883a 	mov	r4,r2
81106ae8:	11302fc0 	call	811302fc <OSSemPost>

			return -ETIME;
81106aec:	00bff084 	movi	r2,-62
81106af0:	00003a06 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
81106af4:	e0bff10b 	ldhu	r2,-60(fp)
81106af8:	10800044 	addi	r2,r2,1
81106afc:	e0bff10d 	sth	r2,-60(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106b00:	e0bffd17 	ldw	r2,-12(fp)
81106b04:	10800317 	ldw	r2,12(r2)
81106b08:	10800037 	ldwio	r2,0(r2)
81106b0c:	e0bff015 	stw	r2,-64(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106b10:	e0fff017 	ldw	r3,-64(fp)
81106b14:	e0bff617 	ldw	r2,-40(fp)
81106b18:	1884703a 	and	r2,r3,r2
81106b1c:	1000031e 	bne	r2,zero,81106b2c <msgdma_descriptor_sync_transfer+0x338>
81106b20:	e0bff017 	ldw	r2,-64(fp)
81106b24:	1080004c 	andi	r2,r2,1
81106b28:	103fe01e 	bne	r2,zero,81106aac <__reset+0xfb0e6aac>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106b2c:	e0fff017 	ldw	r3,-64(fp)
81106b30:	e0bff617 	ldw	r2,-40(fp)
81106b34:	1884703a 	and	r2,r3,r2
81106b38:	10000626 	beq	r2,zero,81106b54 <msgdma_descriptor_sync_transfer+0x360>
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106b3c:	e0bffd17 	ldw	r2,-12(fp)
81106b40:	10801817 	ldw	r2,96(r2)
81106b44:	1009883a 	mov	r4,r2
81106b48:	11302fc0 	call	811302fc <OSSemPost>

		return error;
81106b4c:	e0bff617 	ldw	r2,-40(fp)
81106b50:	00002206 	br	81106bdc <msgdma_descriptor_sync_transfer+0x3e8>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81106b54:	e0bffd17 	ldw	r2,-12(fp)
81106b58:	10800317 	ldw	r2,12(r2)
81106b5c:	10800104 	addi	r2,r2,4
81106b60:	10800037 	ldwio	r2,0(r2)
81106b64:	10800814 	ori	r2,r2,32
81106b68:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106b6c:	0005303a 	rdctl	r2,status
81106b70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b74:	e0fffa17 	ldw	r3,-24(fp)
81106b78:	00bfff84 	movi	r2,-2
81106b7c:	1884703a 	and	r2,r3,r2
81106b80:	1001703a 	wrctl	status,r2
  
  return context;
81106b84:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b88:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106b8c:	e0bffd17 	ldw	r2,-12(fp)
81106b90:	10800317 	ldw	r2,12(r2)
81106b94:	10800104 	addi	r2,r2,4
81106b98:	e0fff417 	ldw	r3,-48(fp)
81106b9c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106ba0:	e0bffd17 	ldw	r2,-12(fp)
81106ba4:	10800317 	ldw	r2,12(r2)
81106ba8:	e0fffd17 	ldw	r3,-12(fp)
81106bac:	18c00317 	ldw	r3,12(r3)
81106bb0:	18c00037 	ldwio	r3,0(r3)
81106bb4:	10c00035 	stwio	r3,0(r2)
81106bb8:	e0bff517 	ldw	r2,-44(fp)
81106bbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106bc0:	e0bff917 	ldw	r2,-28(fp)
81106bc4:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
81106bc8:	e0bffd17 	ldw	r2,-12(fp)
81106bcc:	10801817 	ldw	r2,96(r2)
81106bd0:	1009883a 	mov	r4,r2
81106bd4:	11302fc0 	call	811302fc <OSSemPost>

	return 0;
81106bd8:	0005883a 	mov	r2,zero

}
81106bdc:	e037883a 	mov	sp,fp
81106be0:	dfc00117 	ldw	ra,4(sp)
81106be4:	df000017 	ldw	fp,0(sp)
81106be8:	dec00204 	addi	sp,sp,8
81106bec:	f800283a 	ret

81106bf0 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106bf0:	deffec04 	addi	sp,sp,-80
81106bf4:	de00012e 	bgeu	sp,et,81106bfc <iMsgdmaConstructExtendedMmToMmDescriptor+0xc>
81106bf8:	003b68fa 	trap	3
81106bfc:	dfc01315 	stw	ra,76(sp)
81106c00:	df001215 	stw	fp,72(sp)
81106c04:	df001204 	addi	fp,sp,72
81106c08:	e13ff715 	stw	r4,-36(fp)
81106c0c:	e17ff815 	stw	r5,-32(fp)
81106c10:	e1bff915 	stw	r6,-28(fp)
81106c14:	e1fffa15 	stw	r7,-24(fp)
81106c18:	e1800617 	ldw	r6,24(fp)
81106c1c:	e1400717 	ldw	r5,28(fp)
81106c20:	e1000817 	ldw	r4,32(fp)
81106c24:	e0c00917 	ldw	r3,36(fp)
81106c28:	e0800a17 	ldw	r2,40(fp)
81106c2c:	e1bffb0d 	sth	r6,-20(fp)
81106c30:	e17ffc05 	stb	r5,-16(fp)
81106c34:	e13ffd05 	stb	r4,-12(fp)
81106c38:	e0fffe0d 	sth	r3,-8(fp)
81106c3c:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106c40:	e0bffb0b 	ldhu	r2,-20(fp)
81106c44:	e0fffc03 	ldbu	r3,-16(fp)
81106c48:	e13ffd03 	ldbu	r4,-12(fp)
81106c4c:	e17ffe0b 	ldhu	r5,-8(fp)
81106c50:	e1bfff0b 	ldhu	r6,-4(fp)
81106c54:	d9800815 	stw	r6,32(sp)
81106c58:	d9400715 	stw	r5,28(sp)
81106c5c:	d9000615 	stw	r4,24(sp)
81106c60:	d8c00515 	stw	r3,20(sp)
81106c64:	d8800415 	stw	r2,16(sp)
81106c68:	e0800517 	ldw	r2,20(fp)
81106c6c:	d8800315 	stw	r2,12(sp)
81106c70:	e0800417 	ldw	r2,16(fp)
81106c74:	d8800215 	stw	r2,8(sp)
81106c78:	e0800317 	ldw	r2,12(fp)
81106c7c:	d8800115 	stw	r2,4(sp)
81106c80:	e0800217 	ldw	r2,8(fp)
81106c84:	d8800015 	stw	r2,0(sp)
81106c88:	e1fffa17 	ldw	r7,-24(fp)
81106c8c:	e1bff917 	ldw	r6,-28(fp)
81106c90:	e17ff817 	ldw	r5,-32(fp)
81106c94:	e13ff717 	ldw	r4,-36(fp)
81106c98:	11063780 	call	81106378 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
81106c9c:	e037883a 	mov	sp,fp
81106ca0:	dfc00117 	ldw	ra,4(sp)
81106ca4:	df000017 	ldw	fp,0(sp)
81106ca8:	dec00204 	addi	sp,sp,8
81106cac:	f800283a 	ret

81106cb0 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106cb0:	defffc04 	addi	sp,sp,-16
81106cb4:	de00012e 	bgeu	sp,et,81106cbc <iMsgdmaExtendedDescriptorAsyncTransfer+0xc>
81106cb8:	003b68fa 	trap	3
81106cbc:	dfc00315 	stw	ra,12(sp)
81106cc0:	df000215 	stw	fp,8(sp)
81106cc4:	df000204 	addi	fp,sp,8
81106cc8:	e13ffe15 	stw	r4,-8(fp)
81106ccc:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
81106cd0:	e1bfff17 	ldw	r6,-4(fp)
81106cd4:	000b883a 	mov	r5,zero
81106cd8:	e13ffe17 	ldw	r4,-8(fp)
81106cdc:	11064dc0 	call	811064dc <msgdma_descriptor_async_transfer>
}
81106ce0:	e037883a 	mov	sp,fp
81106ce4:	dfc00117 	ldw	ra,4(sp)
81106ce8:	df000017 	ldw	fp,0(sp)
81106cec:	dec00204 	addi	sp,sp,8
81106cf0:	f800283a 	ret

81106cf4 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106cf4:	defffc04 	addi	sp,sp,-16
81106cf8:	de00012e 	bgeu	sp,et,81106d00 <iMsgdmaExtendedDescriptorSyncTransfer+0xc>
81106cfc:	003b68fa 	trap	3
81106d00:	dfc00315 	stw	ra,12(sp)
81106d04:	df000215 	stw	fp,8(sp)
81106d08:	df000204 	addi	fp,sp,8
81106d0c:	e13ffe15 	stw	r4,-8(fp)
81106d10:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106d14:	e1bfff17 	ldw	r6,-4(fp)
81106d18:	000b883a 	mov	r5,zero
81106d1c:	e13ffe17 	ldw	r4,-8(fp)
81106d20:	11067f40 	call	811067f4 <msgdma_descriptor_sync_transfer>
}
81106d24:	e037883a 	mov	sp,fp
81106d28:	dfc00117 	ldw	ra,4(sp)
81106d2c:	df000017 	ldw	fp,0(sp)
81106d30:	dec00204 	addi	sp,sp,8
81106d34:	f800283a 	ret

81106d38 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106d38:	defff204 	addi	sp,sp,-56
81106d3c:	de00012e 	bgeu	sp,et,81106d44 <POWER_SPI_RW+0xc>
81106d40:	003b68fa 	trap	3
81106d44:	dfc00d15 	stw	ra,52(sp)
81106d48:	df000c15 	stw	fp,48(sp)
81106d4c:	df000c04 	addi	fp,sp,48
81106d50:	2007883a 	mov	r3,r4
81106d54:	2805883a 	mov	r2,r5
81106d58:	e1bffe15 	stw	r6,-8(fp)
81106d5c:	e1ffff15 	stw	r7,-4(fp)
81106d60:	e0fffc05 	stb	r3,-16(fp)
81106d64:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106d68:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106d6c:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106d70:	008003f4 	movhi	r2,15
81106d74:	10909004 	addi	r2,r2,16960
81106d78:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106d7c:	00bfe004 	movi	r2,-128
81106d80:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
81106d84:	e0bffe17 	ldw	r2,-8(fp)
81106d88:	10000226 	beq	r2,zero,81106d94 <POWER_SPI_RW+0x5c>
81106d8c:	00800804 	movi	r2,32
81106d90:	00000106 	br	81106d98 <POWER_SPI_RW+0x60>
81106d94:	0005883a 	mov	r2,zero
81106d98:	e0fff403 	ldbu	r3,-48(fp)
81106d9c:	10c4b03a 	or	r2,r2,r3
81106da0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
81106da4:	e0800217 	ldw	r2,8(fp)
81106da8:	10000226 	beq	r2,zero,81106db4 <POWER_SPI_RW+0x7c>
81106dac:	00800404 	movi	r2,16
81106db0:	00000106 	br	81106db8 <POWER_SPI_RW+0x80>
81106db4:	0005883a 	mov	r2,zero
81106db8:	e0fff403 	ldbu	r3,-48(fp)
81106dbc:	10c4b03a 	or	r2,r2,r3
81106dc0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
81106dc4:	e0bfff17 	ldw	r2,-4(fp)
81106dc8:	10000226 	beq	r2,zero,81106dd4 <POWER_SPI_RW+0x9c>
81106dcc:	00800204 	movi	r2,8
81106dd0:	00000106 	br	81106dd8 <POWER_SPI_RW+0xa0>
81106dd4:	0005883a 	mov	r2,zero
81106dd8:	e0fff403 	ldbu	r3,-48(fp)
81106ddc:	10c4b03a 	or	r2,r2,r3
81106de0:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
81106de4:	e0bffd03 	ldbu	r2,-12(fp)
81106de8:	108001cc 	andi	r2,r2,7
81106dec:	1007883a 	mov	r3,r2
81106df0:	e0bff403 	ldbu	r2,-48(fp)
81106df4:	1884b03a 	or	r2,r3,r2
81106df8:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106dfc:	0007883a 	mov	r3,zero
81106e00:	00a00034 	movhi	r2,32768
81106e04:	10824404 	addi	r2,r2,2320
81106e08:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106e0c:	0007883a 	mov	r3,zero
81106e10:	00a00034 	movhi	r2,32768
81106e14:	10824c04 	addi	r2,r2,2352
81106e18:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106e1c:	e0bffc03 	ldbu	r2,-16(fp)
81106e20:	1000021e 	bne	r2,zero,81106e2c <POWER_SPI_RW+0xf4>
81106e24:	00c00084 	movi	r3,2
81106e28:	00000106 	br	81106e30 <POWER_SPI_RW+0xf8>
81106e2c:	00c00044 	movi	r3,1
81106e30:	00a00034 	movhi	r2,32768
81106e34:	10824804 	addi	r2,r2,2336
81106e38:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106e3c:	010003c4 	movi	r4,15
81106e40:	11290ec0 	call	811290ec <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106e44:	00000306 	br	81106e54 <POWER_SPI_RW+0x11c>
		nWait++;
81106e48:	e0bff817 	ldw	r2,-32(fp)
81106e4c:	10800044 	addi	r2,r2,1
81106e50:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106e54:	00a00034 	movhi	r2,32768
81106e58:	10825404 	addi	r2,r2,2384
81106e5c:	10800037 	ldwio	r2,0(r2)
81106e60:	1080004c 	andi	r2,r2,1
81106e64:	10000326 	beq	r2,zero,81106e74 <POWER_SPI_RW+0x13c>
81106e68:	e0fff817 	ldw	r3,-32(fp)
81106e6c:	e0bffa17 	ldw	r2,-24(fp)
81106e70:	18bff516 	blt	r3,r2,81106e48 <__reset+0xfb0e6e48>
		nWait++;
	}

	if (SPI_SDO) {
81106e74:	00a00034 	movhi	r2,32768
81106e78:	10825404 	addi	r2,r2,2384
81106e7c:	10800037 	ldwio	r2,0(r2)
81106e80:	1080004c 	andi	r2,r2,1
81106e84:	10000626 	beq	r2,zero,81106ea0 <POWER_SPI_RW+0x168>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106e88:	00c000c4 	movi	r3,3
81106e8c:	00a00034 	movhi	r2,32768
81106e90:	10824804 	addi	r2,r2,2336
81106e94:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
81106e98:	0005883a 	mov	r2,zero
81106e9c:	0000db06 	br	8110720c <POWER_SPI_RW+0x4d4>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106ea0:	e03ff715 	stw	zero,-36(fp)
81106ea4:	00002406 	br	81106f38 <POWER_SPI_RW+0x200>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
81106ea8:	e0bff403 	ldbu	r2,-48(fp)
81106eac:	10803fcc 	andi	r2,r2,255
81106eb0:	1004d1fa 	srli	r2,r2,7
81106eb4:	10c03fcc 	andi	r3,r2,255
81106eb8:	00a00034 	movhi	r2,32768
81106ebc:	10825004 	addi	r2,r2,2368
81106ec0:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106ec4:	e0bff403 	ldbu	r2,-48(fp)
81106ec8:	1085883a 	add	r2,r2,r2
81106ecc:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81106ed0:	e0bff517 	ldw	r2,-44(fp)
81106ed4:	1085883a 	add	r2,r2,r2
81106ed8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81106edc:	00a00034 	movhi	r2,32768
81106ee0:	10825404 	addi	r2,r2,2384
81106ee4:	10800037 	ldwio	r2,0(r2)
81106ee8:	1080004c 	andi	r2,r2,1
81106eec:	1007883a 	mov	r3,r2
81106ef0:	e0bff517 	ldw	r2,-44(fp)
81106ef4:	10c4b03a 	or	r2,r2,r3
81106ef8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106efc:	00c00044 	movi	r3,1
81106f00:	00a00034 	movhi	r2,32768
81106f04:	10824c04 	addi	r2,r2,2352
81106f08:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f0c:	010003c4 	movi	r4,15
81106f10:	11290ec0 	call	811290ec <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106f14:	0007883a 	mov	r3,zero
81106f18:	00a00034 	movhi	r2,32768
81106f1c:	10824c04 	addi	r2,r2,2352
81106f20:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f24:	010003c4 	movi	r4,15
81106f28:	11290ec0 	call	811290ec <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106f2c:	e0bff717 	ldw	r2,-36(fp)
81106f30:	10800044 	addi	r2,r2,1
81106f34:	e0bff715 	stw	r2,-36(fp)
81106f38:	e0bff717 	ldw	r2,-36(fp)
81106f3c:	10800090 	cmplti	r2,r2,2
81106f40:	103fd91e 	bne	r2,zero,81106ea8 <__reset+0xfb0e6ea8>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106f44:	e03ff715 	stw	zero,-36(fp)
81106f48:	00002406 	br	81106fdc <POWER_SPI_RW+0x2a4>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106f4c:	e0bff403 	ldbu	r2,-48(fp)
81106f50:	10803fcc 	andi	r2,r2,255
81106f54:	1004d1fa 	srli	r2,r2,7
81106f58:	10c03fcc 	andi	r3,r2,255
81106f5c:	00a00034 	movhi	r2,32768
81106f60:	10825004 	addi	r2,r2,2368
81106f64:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106f68:	e0bff403 	ldbu	r2,-48(fp)
81106f6c:	1085883a 	add	r2,r2,r2
81106f70:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81106f74:	e0bff517 	ldw	r2,-44(fp)
81106f78:	1085883a 	add	r2,r2,r2
81106f7c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106f80:	00a00034 	movhi	r2,32768
81106f84:	10825404 	addi	r2,r2,2384
81106f88:	10800037 	ldwio	r2,0(r2)
81106f8c:	1080004c 	andi	r2,r2,1
81106f90:	1007883a 	mov	r3,r2
81106f94:	e0bff517 	ldw	r2,-44(fp)
81106f98:	10c4b03a 	or	r2,r2,r3
81106f9c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106fa0:	00c00044 	movi	r3,1
81106fa4:	00a00034 	movhi	r2,32768
81106fa8:	10824c04 	addi	r2,r2,2352
81106fac:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fb0:	010003c4 	movi	r4,15
81106fb4:	11290ec0 	call	811290ec <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106fb8:	0007883a 	mov	r3,zero
81106fbc:	00a00034 	movhi	r2,32768
81106fc0:	10824c04 	addi	r2,r2,2352
81106fc4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fc8:	010003c4 	movi	r4,15
81106fcc:	11290ec0 	call	811290ec <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106fd0:	e0bff717 	ldw	r2,-36(fp)
81106fd4:	10800044 	addi	r2,r2,1
81106fd8:	e0bff715 	stw	r2,-36(fp)
81106fdc:	e0bff717 	ldw	r2,-36(fp)
81106fe0:	10800210 	cmplti	r2,r2,8
81106fe4:	103fd91e 	bne	r2,zero,81106f4c <__reset+0xfb0e6f4c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106fe8:	e03ff715 	stw	zero,-36(fp)
81106fec:	00001a06 	br	81107058 <POWER_SPI_RW+0x320>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81106ff0:	e0bff517 	ldw	r2,-44(fp)
81106ff4:	1085883a 	add	r2,r2,r2
81106ff8:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106ffc:	00a00034 	movhi	r2,32768
81107000:	10825404 	addi	r2,r2,2384
81107004:	10800037 	ldwio	r2,0(r2)
81107008:	1080004c 	andi	r2,r2,1
8110700c:	1007883a 	mov	r3,r2
81107010:	e0bff517 	ldw	r2,-44(fp)
81107014:	10c4b03a 	or	r2,r2,r3
81107018:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
8110701c:	00c00044 	movi	r3,1
81107020:	00a00034 	movhi	r2,32768
81107024:	10824c04 	addi	r2,r2,2352
81107028:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110702c:	010003c4 	movi	r4,15
81107030:	11290ec0 	call	811290ec <usleep>
		SPI_SCK(0); //sck=0; // clock low
81107034:	0007883a 	mov	r3,zero
81107038:	00a00034 	movhi	r2,32768
8110703c:	10824c04 	addi	r2,r2,2352
81107040:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107044:	010003c4 	movi	r4,15
81107048:	11290ec0 	call	811290ec <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
8110704c:	e0bff717 	ldw	r2,-36(fp)
81107050:	10800044 	addi	r2,r2,1
81107054:	e0bff715 	stw	r2,-36(fp)
81107058:	e0bff717 	ldw	r2,-36(fp)
8110705c:	10800210 	cmplti	r2,r2,8
81107060:	103fe31e 	bne	r2,zero,81106ff0 <__reset+0xfb0e6ff0>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81107064:	e03ff715 	stw	zero,-36(fp)
81107068:	00001a06 	br	811070d4 <POWER_SPI_RW+0x39c>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
8110706c:	e0bff517 	ldw	r2,-44(fp)
81107070:	1085883a 	add	r2,r2,r2
81107074:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81107078:	00a00034 	movhi	r2,32768
8110707c:	10825404 	addi	r2,r2,2384
81107080:	10800037 	ldwio	r2,0(r2)
81107084:	1080004c 	andi	r2,r2,1
81107088:	1007883a 	mov	r3,r2
8110708c:	e0bff517 	ldw	r2,-44(fp)
81107090:	10c4b03a 	or	r2,r2,r3
81107094:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107098:	00c00044 	movi	r3,1
8110709c:	00a00034 	movhi	r2,32768
811070a0:	10824c04 	addi	r2,r2,2352
811070a4:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070a8:	010003c4 	movi	r4,15
811070ac:	11290ec0 	call	811290ec <usleep>
		SPI_SCK(0); //sck=0; // clock low
811070b0:	0007883a 	mov	r3,zero
811070b4:	00a00034 	movhi	r2,32768
811070b8:	10824c04 	addi	r2,r2,2352
811070bc:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070c0:	010003c4 	movi	r4,15
811070c4:	11290ec0 	call	811290ec <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
811070c8:	e0bff717 	ldw	r2,-36(fp)
811070cc:	10800044 	addi	r2,r2,1
811070d0:	e0bff715 	stw	r2,-36(fp)
811070d4:	e0bff717 	ldw	r2,-36(fp)
811070d8:	10800210 	cmplti	r2,r2,8
811070dc:	103fe31e 	bne	r2,zero,8110706c <__reset+0xfb0e706c>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811070e0:	e03ff715 	stw	zero,-36(fp)
811070e4:	00001a06 	br	81107150 <POWER_SPI_RW+0x418>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
811070e8:	e0bff517 	ldw	r2,-44(fp)
811070ec:	1085883a 	add	r2,r2,r2
811070f0:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
811070f4:	00a00034 	movhi	r2,32768
811070f8:	10825404 	addi	r2,r2,2384
811070fc:	10800037 	ldwio	r2,0(r2)
81107100:	1080004c 	andi	r2,r2,1
81107104:	1007883a 	mov	r3,r2
81107108:	e0bff517 	ldw	r2,-44(fp)
8110710c:	10c4b03a 	or	r2,r2,r3
81107110:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107114:	00c00044 	movi	r3,1
81107118:	00a00034 	movhi	r2,32768
8110711c:	10824c04 	addi	r2,r2,2352
81107120:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107124:	010003c4 	movi	r4,15
81107128:	11290ec0 	call	811290ec <usleep>
		SPI_SCK(0); //sck=0; // clock low
8110712c:	0007883a 	mov	r3,zero
81107130:	00a00034 	movhi	r2,32768
81107134:	10824c04 	addi	r2,r2,2352
81107138:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
8110713c:	010003c4 	movi	r4,15
81107140:	11290ec0 	call	811290ec <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
81107144:	e0bff717 	ldw	r2,-36(fp)
81107148:	10800044 	addi	r2,r2,1
8110714c:	e0bff715 	stw	r2,-36(fp)
81107150:	e0bff717 	ldw	r2,-36(fp)
81107154:	10800190 	cmplti	r2,r2,6
81107158:	103fe31e 	bne	r2,zero,811070e8 <__reset+0xfb0e70e8>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
8110715c:	00c00044 	movi	r3,1
81107160:	00a00034 	movhi	r2,32768
81107164:	10824c04 	addi	r2,r2,2352
81107168:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
8110716c:	010003c4 	movi	r4,15
81107170:	11290ec0 	call	811290ec <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
81107174:	00c000c4 	movi	r3,3
81107178:	00a00034 	movhi	r2,32768
8110717c:	10824804 	addi	r2,r2,2336
81107180:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
81107184:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81107188:	00800044 	movi	r2,1
8110718c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81107190:	e03ff715 	stw	zero,-36(fp)
81107194:	00000d06 	br	811071cc <POWER_SPI_RW+0x494>
		if ((Value32 & Mask32) == 0x00) {
81107198:	e0fff517 	ldw	r3,-44(fp)
8110719c:	e0bff617 	ldw	r2,-40(fp)
811071a0:	1884703a 	and	r2,r3,r2
811071a4:	1000031e 	bne	r2,zero,811071b4 <POWER_SPI_RW+0x47c>
			nZeroCnt++;
811071a8:	e0bff917 	ldw	r2,-28(fp)
811071ac:	10800044 	addi	r2,r2,1
811071b0:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
811071b4:	e0bff617 	ldw	r2,-40(fp)
811071b8:	1085883a 	add	r2,r2,r2
811071bc:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
811071c0:	e0bff717 	ldw	r2,-36(fp)
811071c4:	10800044 	addi	r2,r2,1
811071c8:	e0bff715 	stw	r2,-36(fp)
811071cc:	e0bff717 	ldw	r2,-36(fp)
811071d0:	10800810 	cmplti	r2,r2,32
811071d4:	103ff01e 	bne	r2,zero,81107198 <__reset+0xfb0e7198>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
811071d8:	e0bff917 	ldw	r2,-28(fp)
811071dc:	1080004c 	andi	r2,r2,1
811071e0:	1005003a 	cmpeq	r2,r2,zero
811071e4:	10803fcc 	andi	r2,r2,255
811071e8:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
811071ec:	e0bffb17 	ldw	r2,-20(fp)
811071f0:	1000021e 	bne	r2,zero,811071fc <POWER_SPI_RW+0x4c4>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
811071f4:	0005883a 	mov	r2,zero
811071f8:	00000406 	br	8110720c <POWER_SPI_RW+0x4d4>
	}

	*pValue = Value32;
811071fc:	e0800317 	ldw	r2,12(fp)
81107200:	e0fff517 	ldw	r3,-44(fp)
81107204:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81107208:	e0bffb17 	ldw	r2,-20(fp)
}
8110720c:	e037883a 	mov	sp,fp
81107210:	dfc00117 	ldw	ra,4(sp)
81107214:	df000017 	ldw	fp,0(sp)
81107218:	dec00204 	addi	sp,sp,8
8110721c:	f800283a 	ret

81107220 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
81107220:	defffc04 	addi	sp,sp,-16
81107224:	de00012e 	bgeu	sp,et,8110722c <vRstcSimucamReset+0xc>
81107228:	003b68fa 	trap	3
8110722c:	dfc00315 	stw	ra,12(sp)
81107230:	df000215 	stw	fp,8(sp)
81107234:	df000204 	addi	fp,sp,8
81107238:	2005883a 	mov	r2,r4
8110723c:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
81107240:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
81107244:	e0bfff0b 	ldhu	r2,-4(fp)
81107248:	e0fffe17 	ldw	r3,-8(fp)
8110724c:	1884b03a 	or	r2,r3,r2
81107250:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
81107254:	e0bffe17 	ldw	r2,-8(fp)
81107258:	10800074 	orhi	r2,r2,1
8110725c:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107260:	e1bffe17 	ldw	r6,-8(fp)
81107264:	000b883a 	mov	r5,zero
81107268:	01200034 	movhi	r4,32768
8110726c:	21020004 	addi	r4,r4,2048
81107270:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81107274:	0001883a 	nop
81107278:	e037883a 	mov	sp,fp
8110727c:	dfc00117 	ldw	ra,4(sp)
81107280:	df000017 	ldw	fp,0(sp)
81107284:	dec00204 	addi	sp,sp,8
81107288:	f800283a 	ret

8110728c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110728c:	defffc04 	addi	sp,sp,-16
81107290:	de00012e 	bgeu	sp,et,81107298 <vRstcReleaseDeviceReset+0xc>
81107294:	003b68fa 	trap	3
81107298:	dfc00315 	stw	ra,12(sp)
8110729c:	df000215 	stw	fp,8(sp)
811072a0:	df000204 	addi	fp,sp,8
811072a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811072a8:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072ac:	01400044 	movi	r5,1
811072b0:	01200034 	movhi	r4,32768
811072b4:	21020004 	addi	r4,r4,2048
811072b8:	11073c40 	call	811073c4 <uliRstReadReg>
811072bc:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
811072c0:	e0bfff17 	ldw	r2,-4(fp)
811072c4:	0084303a 	nor	r2,zero,r2
811072c8:	e0fffe17 	ldw	r3,-8(fp)
811072cc:	1884703a 	and	r2,r3,r2
811072d0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072d4:	e1bffe17 	ldw	r6,-8(fp)
811072d8:	01400044 	movi	r5,1
811072dc:	01200034 	movhi	r4,32768
811072e0:	21020004 	addi	r4,r4,2048
811072e4:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811072e8:	0001883a 	nop
811072ec:	e037883a 	mov	sp,fp
811072f0:	dfc00117 	ldw	ra,4(sp)
811072f4:	df000017 	ldw	fp,0(sp)
811072f8:	dec00204 	addi	sp,sp,8
811072fc:	f800283a 	ret

81107300 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
81107300:	defffc04 	addi	sp,sp,-16
81107304:	de00012e 	bgeu	sp,et,8110730c <vRstcHoldDeviceReset+0xc>
81107308:	003b68fa 	trap	3
8110730c:	dfc00315 	stw	ra,12(sp)
81107310:	df000215 	stw	fp,8(sp)
81107314:	df000204 	addi	fp,sp,8
81107318:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
8110731c:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107320:	01400044 	movi	r5,1
81107324:	01200034 	movhi	r4,32768
81107328:	21020004 	addi	r4,r4,2048
8110732c:	11073c40 	call	811073c4 <uliRstReadReg>
81107330:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
81107334:	e0fffe17 	ldw	r3,-8(fp)
81107338:	e0bfff17 	ldw	r2,-4(fp)
8110733c:	1884b03a 	or	r2,r3,r2
81107340:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107344:	e1bffe17 	ldw	r6,-8(fp)
81107348:	01400044 	movi	r5,1
8110734c:	01200034 	movhi	r4,32768
81107350:	21020004 	addi	r4,r4,2048
81107354:	11073700 	call	81107370 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81107358:	0001883a 	nop
8110735c:	e037883a 	mov	sp,fp
81107360:	dfc00117 	ldw	ra,4(sp)
81107364:	df000017 	ldw	fp,0(sp)
81107368:	dec00204 	addi	sp,sp,8
8110736c:	f800283a 	ret

81107370 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81107370:	defffc04 	addi	sp,sp,-16
81107374:	de00012e 	bgeu	sp,et,8110737c <vRstcWriteReg+0xc>
81107378:	003b68fa 	trap	3
8110737c:	df000315 	stw	fp,12(sp)
81107380:	df000304 	addi	fp,sp,12
81107384:	e13ffd15 	stw	r4,-12(fp)
81107388:	e17ffe15 	stw	r5,-8(fp)
8110738c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81107390:	e0bffe17 	ldw	r2,-8(fp)
81107394:	1085883a 	add	r2,r2,r2
81107398:	1085883a 	add	r2,r2,r2
8110739c:	1007883a 	mov	r3,r2
811073a0:	e0bffd17 	ldw	r2,-12(fp)
811073a4:	10c5883a 	add	r2,r2,r3
811073a8:	e0ffff17 	ldw	r3,-4(fp)
811073ac:	10c00015 	stw	r3,0(r2)
}
811073b0:	0001883a 	nop
811073b4:	e037883a 	mov	sp,fp
811073b8:	df000017 	ldw	fp,0(sp)
811073bc:	dec00104 	addi	sp,sp,4
811073c0:	f800283a 	ret

811073c4 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811073c4:	defffc04 	addi	sp,sp,-16
811073c8:	de00012e 	bgeu	sp,et,811073d0 <uliRstReadReg+0xc>
811073cc:	003b68fa 	trap	3
811073d0:	df000315 	stw	fp,12(sp)
811073d4:	df000304 	addi	fp,sp,12
811073d8:	e13ffe15 	stw	r4,-8(fp)
811073dc:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811073e0:	e0bfff17 	ldw	r2,-4(fp)
811073e4:	1085883a 	add	r2,r2,r2
811073e8:	1085883a 	add	r2,r2,r2
811073ec:	1007883a 	mov	r3,r2
811073f0:	e0bffe17 	ldw	r2,-8(fp)
811073f4:	10c5883a 	add	r2,r2,r3
811073f8:	10800017 	ldw	r2,0(r2)
811073fc:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81107400:	e0bffd17 	ldw	r2,-12(fp)
}
81107404:	e037883a 	mov	sp,fp
81107408:	df000017 	ldw	fp,0(sp)
8110740c:	dec00104 	addi	sp,sp,4
81107410:	f800283a 	ret

81107414 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
81107414:	defffe04 	addi	sp,sp,-8
81107418:	de00012e 	bgeu	sp,et,81107420 <v_spi_start+0xc>
8110741c:	003b68fa 	trap	3
81107420:	dfc00115 	stw	ra,4(sp)
81107424:	df000015 	stw	fp,0(sp)
81107428:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
8110742c:	0007883a 	mov	r3,zero
81107430:	00a00034 	movhi	r2,32768
81107434:	10823004 	addi	r2,r2,2240
81107438:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
8110743c:	0007883a 	mov	r3,zero
81107440:	00a00034 	movhi	r2,32768
81107444:	10822c04 	addi	r2,r2,2224
81107448:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110744c:	01002584 	movi	r4,150
81107450:	11290ec0 	call	811290ec <usleep>
}
81107454:	0001883a 	nop
81107458:	e037883a 	mov	sp,fp
8110745c:	dfc00117 	ldw	ra,4(sp)
81107460:	df000017 	ldw	fp,0(sp)
81107464:	dec00204 	addi	sp,sp,8
81107468:	f800283a 	ret

8110746c <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
8110746c:	defffc04 	addi	sp,sp,-16
81107470:	de00012e 	bgeu	sp,et,81107478 <v_spi_send_byte+0xc>
81107474:	003b68fa 	trap	3
81107478:	dfc00315 	stw	ra,12(sp)
8110747c:	df000215 	stw	fp,8(sp)
81107480:	df000204 	addi	fp,sp,8
81107484:	2005883a 	mov	r2,r4
81107488:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110748c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81107490:	00bfe004 	movi	r2,-128
81107494:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81107498:	e03ffe05 	stb	zero,-8(fp)
8110749c:	00001b06 	br	8110750c <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
811074a0:	e0ffff03 	ldbu	r3,-4(fp)
811074a4:	e0bffe43 	ldbu	r2,-7(fp)
811074a8:	1884703a 	and	r2,r3,r2
811074ac:	10803fcc 	andi	r2,r2,255
811074b0:	1004c03a 	cmpne	r2,r2,zero
811074b4:	10c03fcc 	andi	r3,r2,255
811074b8:	00a00034 	movhi	r2,32768
811074bc:	10823404 	addi	r2,r2,2256
811074c0:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
811074c4:	e0bffe43 	ldbu	r2,-7(fp)
811074c8:	1004d07a 	srli	r2,r2,1
811074cc:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
811074d0:	00c00044 	movi	r3,1
811074d4:	00a00034 	movhi	r2,32768
811074d8:	10823004 	addi	r2,r2,2240
811074dc:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811074e0:	01002584 	movi	r4,150
811074e4:	11290ec0 	call	811290ec <usleep>
        SPI_SCK(0);//sck=0; // clock low
811074e8:	0007883a 	mov	r3,zero
811074ec:	00a00034 	movhi	r2,32768
811074f0:	10823004 	addi	r2,r2,2240
811074f4:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811074f8:	01002584 	movi	r4,150
811074fc:	11290ec0 	call	811290ec <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81107500:	e0bffe03 	ldbu	r2,-8(fp)
81107504:	10800044 	addi	r2,r2,1
81107508:	e0bffe05 	stb	r2,-8(fp)
8110750c:	e0bffe03 	ldbu	r2,-8(fp)
81107510:	10800230 	cmpltui	r2,r2,8
81107514:	103fe21e 	bne	r2,zero,811074a0 <__reset+0xfb0e74a0>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81107518:	0001883a 	nop
8110751c:	e037883a 	mov	sp,fp
81107520:	dfc00117 	ldw	ra,4(sp)
81107524:	df000017 	ldw	fp,0(sp)
81107528:	dec00204 	addi	sp,sp,8
8110752c:	f800283a 	ret

81107530 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
81107530:	defffd04 	addi	sp,sp,-12
81107534:	de00012e 	bgeu	sp,et,8110753c <uc_spi_get_byte+0xc>
81107538:	003b68fa 	trap	3
8110753c:	dfc00215 	stw	ra,8(sp)
81107540:	df000115 	stw	fp,4(sp)
81107544:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
81107548:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
8110754c:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
81107550:	e03fff05 	stb	zero,-4(fp)
81107554:	00001a06 	br	811075c0 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
81107558:	e0bfff43 	ldbu	r2,-3(fp)
8110755c:	1085883a 	add	r2,r2,r2
81107560:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
81107564:	00a00034 	movhi	r2,32768
81107568:	10823804 	addi	r2,r2,2272
8110756c:	10800037 	ldwio	r2,0(r2)
81107570:	1080004c 	andi	r2,r2,1
81107574:	1007883a 	mov	r3,r2
81107578:	e0bfff43 	ldbu	r2,-3(fp)
8110757c:	1884b03a 	or	r2,r3,r2
81107580:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81107584:	00c00044 	movi	r3,1
81107588:	00a00034 	movhi	r2,32768
8110758c:	10823004 	addi	r2,r2,2240
81107590:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107594:	01002584 	movi	r4,150
81107598:	11290ec0 	call	811290ec <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110759c:	0007883a 	mov	r3,zero
811075a0:	00a00034 	movhi	r2,32768
811075a4:	10823004 	addi	r2,r2,2240
811075a8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811075ac:	01002584 	movi	r4,150
811075b0:	11290ec0 	call	811290ec <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
811075b4:	e0bfff03 	ldbu	r2,-4(fp)
811075b8:	10800044 	addi	r2,r2,1
811075bc:	e0bfff05 	stb	r2,-4(fp)
811075c0:	e0bfff03 	ldbu	r2,-4(fp)
811075c4:	10800230 	cmpltui	r2,r2,8
811075c8:	103fe31e 	bne	r2,zero,81107558 <__reset+0xfb0e7558>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
811075cc:	e0bfff43 	ldbu	r2,-3(fp)
}
811075d0:	e037883a 	mov	sp,fp
811075d4:	dfc00117 	ldw	ra,4(sp)
811075d8:	df000017 	ldw	fp,0(sp)
811075dc:	dec00204 	addi	sp,sp,8
811075e0:	f800283a 	ret

811075e4 <v_spi_end>:

void v_spi_end(void){
811075e4:	defffe04 	addi	sp,sp,-8
811075e8:	de00012e 	bgeu	sp,et,811075f0 <v_spi_end+0xc>
811075ec:	003b68fa 	trap	3
811075f0:	dfc00115 	stw	ra,4(sp)
811075f4:	df000015 	stw	fp,0(sp)
811075f8:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
811075fc:	0007883a 	mov	r3,zero
81107600:	00a00034 	movhi	r2,32768
81107604:	10823004 	addi	r2,r2,2240
81107608:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110760c:	01002584 	movi	r4,150
81107610:	11290ec0 	call	811290ec <usleep>
    SPI_CS_N(1);
81107614:	00c00044 	movi	r3,1
81107618:	00a00034 	movhi	r2,32768
8110761c:	10822c04 	addi	r2,r2,2224
81107620:	10c00035 	stwio	r3,0(r2)
}
81107624:	0001883a 	nop
81107628:	e037883a 	mov	sp,fp
8110762c:	dfc00117 	ldw	ra,4(sp)
81107630:	df000017 	ldw	fp,0(sp)
81107634:	dec00204 	addi	sp,sp,8
81107638:	f800283a 	ret

8110763c <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
8110763c:	defff604 	addi	sp,sp,-40
81107640:	de00012e 	bgeu	sp,et,81107648 <RTCC_SPI_R_MAC+0xc>
81107644:	003b68fa 	trap	3
81107648:	dfc00915 	stw	ra,36(sp)
8110764c:	df000815 	stw	fp,32(sp)
81107650:	df000804 	addi	fp,sp,32
81107654:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107658:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
8110765c:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
81107660:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
81107664:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
81107668:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
8110766c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81107670:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81107674:	00800084 	movi	r2,2
81107678:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110767c:	00800cc4 	movi	r2,51
81107680:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81107684:	11074140 	call	81107414 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81107688:	e0bffec3 	ldbu	r2,-5(fp)
8110768c:	1009883a 	mov	r4,r2
81107690:	110746c0 	call	8110746c <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81107694:	e0bffe83 	ldbu	r2,-6(fp)
81107698:	1009883a 	mov	r4,r2
8110769c:	110746c0 	call	8110746c <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
811076a0:	11075300 	call	81107530 <uc_spi_get_byte>
811076a4:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
811076a8:	11075300 	call	81107530 <uc_spi_get_byte>
811076ac:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
811076b0:	11075300 	call	81107530 <uc_spi_get_byte>
811076b4:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
811076b8:	11075300 	call	81107530 <uc_spi_get_byte>
811076bc:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
811076c0:	11075300 	call	81107530 <uc_spi_get_byte>
811076c4:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
811076c8:	11075300 	call	81107530 <uc_spi_get_byte>
811076cc:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
811076d0:	11075e40 	call	811075e4 <v_spi_end>

    bSuccess = TRUE;
811076d4:	00800044 	movi	r2,1
811076d8:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
811076dc:	e0bfff17 	ldw	r2,-4(fp)
811076e0:	e0fffd03 	ldbu	r3,-12(fp)
811076e4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
811076e8:	e0bfff17 	ldw	r2,-4(fp)
811076ec:	10800044 	addi	r2,r2,1
811076f0:	e0fffd43 	ldbu	r3,-11(fp)
811076f4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
811076f8:	e0bfff17 	ldw	r2,-4(fp)
811076fc:	10800084 	addi	r2,r2,2
81107700:	e0fffd83 	ldbu	r3,-10(fp)
81107704:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81107708:	e0bfff17 	ldw	r2,-4(fp)
8110770c:	108000c4 	addi	r2,r2,3
81107710:	e0fffdc3 	ldbu	r3,-9(fp)
81107714:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
81107718:	e0bfff17 	ldw	r2,-4(fp)
8110771c:	10800104 	addi	r2,r2,4
81107720:	e0fffe03 	ldbu	r3,-8(fp)
81107724:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
81107728:	e0bfff17 	ldw	r2,-4(fp)
8110772c:	10800144 	addi	r2,r2,5
81107730:	e0fffe43 	ldbu	r3,-7(fp)
81107734:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
81107738:	e1bffd03 	ldbu	r6,-12(fp)
8110773c:	e1fffd43 	ldbu	r7,-11(fp)
81107740:	e0bffd83 	ldbu	r2,-10(fp)
81107744:	e0fffdc3 	ldbu	r3,-9(fp)
81107748:	e13ffe03 	ldbu	r4,-8(fp)
8110774c:	e17ffe43 	ldbu	r5,-7(fp)
81107750:	d9400315 	stw	r5,12(sp)
81107754:	d9000215 	stw	r4,8(sp)
81107758:	d8c00115 	stw	r3,4(sp)
8110775c:	d8800015 	stw	r2,0(sp)
81107760:	01604534 	movhi	r5,33044
81107764:	29770204 	addi	r5,r5,-9208
81107768:	01204534 	movhi	r4,33044
8110776c:	210a2604 	addi	r4,r4,10392
81107770:	11137640 	call	81113764 <sprintf>
	debug(fp, cDebugBuffer);
81107774:	d0a04f17 	ldw	r2,-32452(gp)
81107778:	01604534 	movhi	r5,33044
8110777c:	294a2604 	addi	r5,r5,10392
81107780:	1009883a 	mov	r4,r2
81107784:	1111dd40 	call	81111dd4 <fprintf>
#endif

    return bSuccess;
81107788:	e0bffc17 	ldw	r2,-16(fp)
}
8110778c:	e037883a 	mov	sp,fp
81107790:	dfc00117 	ldw	ra,4(sp)
81107794:	df000017 	ldw	fp,0(sp)
81107798:	dec00204 	addi	sp,sp,8
8110779c:	f800283a 	ret

811077a0 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
811077a0:	defffd04 	addi	sp,sp,-12
811077a4:	de00012e 	bgeu	sp,et,811077ac <bSSDisplayConfig+0xc>
811077a8:	003b68fa 	trap	3
811077ac:	df000215 	stw	fp,8(sp)
811077b0:	df000204 	addi	fp,sp,8
811077b4:	2005883a 	mov	r2,r4
811077b8:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
811077bc:	e0bfff03 	ldbu	r2,-4(fp)
811077c0:	10c00168 	cmpgeui	r3,r2,5
811077c4:	18001c1e 	bne	r3,zero,81107838 <bSSDisplayConfig+0x98>
811077c8:	100690ba 	slli	r3,r2,2
811077cc:	00a04434 	movhi	r2,33040
811077d0:	109df804 	addi	r2,r2,30688
811077d4:	1885883a 	add	r2,r3,r2
811077d8:	10800017 	ldw	r2,0(r2)
811077dc:	1000683a 	jmp	r2
811077e0:	811077f4 	orhi	r4,r16,16863
811077e4:	81107800 	call	88110780 <__reset+0x20f0780>
811077e8:	8110780c 	andi	r4,r16,16864
811077ec:	81107820 	cmpeqi	r4,r16,16864
811077f0:	81107830 	cmpltui	r4,r16,16864
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
811077f4:	00800cc4 	movi	r2,51
811077f8:	d0a04645 	stb	r2,-32487(gp)
	    break;
811077fc:	00001006 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81107800:	00801544 	movi	r2,85
81107804:	d0a04645 	stb	r2,-32487(gp)
	    break;
81107808:	00000d06 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110780c:	d0e04643 	ldbu	r3,-32487(gp)
81107810:	00bff744 	movi	r2,-35
81107814:	1884703a 	and	r2,r3,r2
81107818:	d0a04645 	stb	r2,-32487(gp)
	    break;
8110781c:	00000806 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81107820:	d0a04643 	ldbu	r2,-32487(gp)
81107824:	10800894 	ori	r2,r2,34
81107828:	d0a04645 	stb	r2,-32487(gp)
	    break;
8110782c:	00000406 	br	81107840 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81107830:	d0204645 	stb	zero,-32487(gp)
	    break;
81107834:	00000206 	br	81107840 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
81107838:	0005883a 	mov	r2,zero
8110783c:	00000806 	br	81107860 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
81107840:	00a00034 	movhi	r2,32768
81107844:	10828404 	addi	r2,r2,2576
81107848:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
8110784c:	d0a04643 	ldbu	r2,-32487(gp)
81107850:	10c03fcc 	andi	r3,r2,255
81107854:	e0bffe17 	ldw	r2,-8(fp)
81107858:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110785c:	00800044 	movi	r2,1
}
81107860:	e037883a 	mov	sp,fp
81107864:	df000017 	ldw	fp,0(sp)
81107868:	dec00104 	addi	sp,sp,4
8110786c:	f800283a 	ret

81107870 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81107870:	defffd04 	addi	sp,sp,-12
81107874:	de00012e 	bgeu	sp,et,8110787c <bSSDisplayUpdate+0xc>
81107878:	003b68fa 	trap	3
8110787c:	df000215 	stw	fp,8(sp)
81107880:	df000204 	addi	fp,sp,8
81107884:	2005883a 	mov	r2,r4
81107888:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110788c:	00a00034 	movhi	r2,32768
81107890:	10828404 	addi	r2,r2,2576
81107894:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81107898:	e0bffe17 	ldw	r2,-8(fp)
8110789c:	10800104 	addi	r2,r2,4
811078a0:	e0ffff03 	ldbu	r3,-4(fp)
811078a4:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811078a8:	00800044 	movi	r2,1
}
811078ac:	e037883a 	mov	sp,fp
811078b0:	df000017 	ldw	fp,0(sp)
811078b4:	dec00104 	addi	sp,sp,4
811078b8:	f800283a 	ret

811078bc <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
811078bc:	defffd04 	addi	sp,sp,-12
811078c0:	de00012e 	bgeu	sp,et,811078c8 <vSyncHandleIrq+0xc>
811078c4:	003b68fa 	trap	3
811078c8:	df000215 	stw	fp,8(sp)
811078cc:	df000204 	addi	fp,sp,8
811078d0:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811078d4:	e0bfff17 	ldw	r2,-4(fp)
811078d8:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
811078dc:	d0a04803 	ldbu	r2,-32480(gp)
811078e0:	10800044 	addi	r2,r2,1
811078e4:	d0a04805 	stb	r2,-32480(gp)
}
811078e8:	0001883a 	nop
811078ec:	e037883a 	mov	sp,fp
811078f0:	df000017 	ldw	fp,0(sp)
811078f4:	dec00104 	addi	sp,sp,4
811078f8:	f800283a 	ret

811078fc <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
811078fc:	defffd04 	addi	sp,sp,-12
81107900:	de00012e 	bgeu	sp,et,81107908 <vSyncInitIrq+0xc>
81107904:	003b68fa 	trap	3
81107908:	dfc00215 	stw	ra,8(sp)
8110790c:	df000115 	stw	fp,4(sp)
81107910:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
81107914:	d0a04704 	addi	r2,gp,-32484
81107918:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
8110791c:	01a04434 	movhi	r6,33040
81107920:	319e2f04 	addi	r6,r6,30908
81107924:	e17fff17 	ldw	r5,-4(fp)
81107928:	01000284 	movi	r4,10
8110792c:	11279dc0 	call	811279dc <alt_irq_register>
}
81107930:	0001883a 	nop
81107934:	e037883a 	mov	sp,fp
81107938:	dfc00117 	ldw	ra,4(sp)
8110793c:	df000017 	ldw	fp,0(sp)
81107940:	dec00204 	addi	sp,sp,8
81107944:	f800283a 	ret

81107948 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
81107948:	defffc04 	addi	sp,sp,-16
8110794c:	de00012e 	bgeu	sp,et,81107954 <bSyncStatusExtnIrq+0xc>
81107950:	003b68fa 	trap	3
81107954:	dfc00315 	stw	ra,12(sp)
81107958:	df000215 	stw	fp,8(sp)
8110795c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107960:	0009883a 	mov	r4,zero
81107964:	11086f80 	call	811086f8 <uliSyncReadReg>
81107968:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
8110796c:	e0bfff17 	ldw	r2,-4(fp)
81107970:	1000030e 	bge	r2,zero,81107980 <bSyncStatusExtnIrq+0x38>
		bResult = TRUE;
81107974:	00800044 	movi	r2,1
81107978:	e0bffe15 	stw	r2,-8(fp)
8110797c:	00000106 	br	81107984 <bSyncStatusExtnIrq+0x3c>
	} else {
		bResult = FALSE;
81107980:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107984:	e0bffe17 	ldw	r2,-8(fp)
}
81107988:	e037883a 	mov	sp,fp
8110798c:	dfc00117 	ldw	ra,4(sp)
81107990:	df000017 	ldw	fp,0(sp)
81107994:	dec00204 	addi	sp,sp,8
81107998:	f800283a 	ret

8110799c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110799c:	defffc04 	addi	sp,sp,-16
811079a0:	de00012e 	bgeu	sp,et,811079a8 <ucSyncStatusState+0xc>
811079a4:	003b68fa 	trap	3
811079a8:	dfc00315 	stw	ra,12(sp)
811079ac:	df000215 	stw	fp,8(sp)
811079b0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811079b4:	0009883a 	mov	r4,zero
811079b8:	11086f80 	call	811086f8 <uliSyncReadReg>
811079bc:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
811079c0:	e0bffe17 	ldw	r2,-8(fp)
811079c4:	10803fec 	andhi	r2,r2,255
811079c8:	1004d43a 	srli	r2,r2,16
811079cc:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079d0:	e0bfff03 	ldbu	r2,-4(fp)
}
811079d4:	e037883a 	mov	sp,fp
811079d8:	dfc00117 	ldw	ra,4(sp)
811079dc:	df000017 	ldw	fp,0(sp)
811079e0:	dec00204 	addi	sp,sp,8
811079e4:	f800283a 	ret

811079e8 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
811079e8:	defffc04 	addi	sp,sp,-16
811079ec:	de00012e 	bgeu	sp,et,811079f4 <ucSyncStatusErrorCode+0xc>
811079f0:	003b68fa 	trap	3
811079f4:	dfc00315 	stw	ra,12(sp)
811079f8:	df000215 	stw	fp,8(sp)
811079fc:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107a00:	0009883a 	mov	r4,zero
81107a04:	11086f80 	call	811086f8 <uliSyncReadReg>
81107a08:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
81107a0c:	e0bffe17 	ldw	r2,-8(fp)
81107a10:	10bfc00c 	andi	r2,r2,65280
81107a14:	1004d23a 	srli	r2,r2,8
81107a18:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107a1c:	e0bfff03 	ldbu	r2,-4(fp)
}
81107a20:	e037883a 	mov	sp,fp
81107a24:	dfc00117 	ldw	ra,4(sp)
81107a28:	df000017 	ldw	fp,0(sp)
81107a2c:	dec00204 	addi	sp,sp,8
81107a30:	f800283a 	ret

81107a34 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
81107a34:	defffc04 	addi	sp,sp,-16
81107a38:	de00012e 	bgeu	sp,et,81107a40 <ucSyncStatusCycleNumber+0xc>
81107a3c:	003b68fa 	trap	3
81107a40:	dfc00315 	stw	ra,12(sp)
81107a44:	df000215 	stw	fp,8(sp)
81107a48:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107a4c:	0009883a 	mov	r4,zero
81107a50:	11086f80 	call	811086f8 <uliSyncReadReg>
81107a54:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
81107a58:	e0bffe17 	ldw	r2,-8(fp)
81107a5c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107a60:	e0bfff03 	ldbu	r2,-4(fp)
}
81107a64:	e037883a 	mov	sp,fp
81107a68:	dfc00117 	ldw	ra,4(sp)
81107a6c:	df000017 	ldw	fp,0(sp)
81107a70:	dec00204 	addi	sp,sp,8
81107a74:	f800283a 	ret

81107a78 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81107a78:	defffd04 	addi	sp,sp,-12
81107a7c:	de00012e 	bgeu	sp,et,81107a84 <bSyncSetMbt+0xc>
81107a80:	003b68fa 	trap	3
81107a84:	dfc00215 	stw	ra,8(sp)
81107a88:	df000115 	stw	fp,4(sp)
81107a8c:	df000104 	addi	fp,sp,4
81107a90:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107a94:	e17fff17 	ldw	r5,-4(fp)
81107a98:	01000104 	movi	r4,4
81107a9c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107aa0:	00800044 	movi	r2,1
}
81107aa4:	e037883a 	mov	sp,fp
81107aa8:	dfc00117 	ldw	ra,4(sp)
81107aac:	df000017 	ldw	fp,0(sp)
81107ab0:	dec00204 	addi	sp,sp,8
81107ab4:	f800283a 	ret

81107ab8 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107ab8:	defffd04 	addi	sp,sp,-12
81107abc:	de00012e 	bgeu	sp,et,81107ac4 <bSyncSetBt+0xc>
81107ac0:	003b68fa 	trap	3
81107ac4:	dfc00215 	stw	ra,8(sp)
81107ac8:	df000115 	stw	fp,4(sp)
81107acc:	df000104 	addi	fp,sp,4
81107ad0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
81107ad4:	e17fff17 	ldw	r5,-4(fp)
81107ad8:	01000144 	movi	r4,5
81107adc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107ae0:	00800044 	movi	r2,1
}
81107ae4:	e037883a 	mov	sp,fp
81107ae8:	dfc00117 	ldw	ra,4(sp)
81107aec:	df000017 	ldw	fp,0(sp)
81107af0:	dec00204 	addi	sp,sp,8
81107af4:	f800283a 	ret

81107af8 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107af8:	defffd04 	addi	sp,sp,-12
81107afc:	de00012e 	bgeu	sp,et,81107b04 <bSyncSetPer+0xc>
81107b00:	003b68fa 	trap	3
81107b04:	dfc00215 	stw	ra,8(sp)
81107b08:	df000115 	stw	fp,4(sp)
81107b0c:	df000104 	addi	fp,sp,4
81107b10:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107b14:	e17fff17 	ldw	r5,-4(fp)
81107b18:	01000184 	movi	r4,6
81107b1c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107b20:	00800044 	movi	r2,1
}
81107b24:	e037883a 	mov	sp,fp
81107b28:	dfc00117 	ldw	ra,4(sp)
81107b2c:	df000017 	ldw	fp,0(sp)
81107b30:	dec00204 	addi	sp,sp,8
81107b34:	f800283a 	ret

81107b38 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107b38:	defffd04 	addi	sp,sp,-12
81107b3c:	de00012e 	bgeu	sp,et,81107b44 <bSyncSetOst+0xc>
81107b40:	003b68fa 	trap	3
81107b44:	dfc00215 	stw	ra,8(sp)
81107b48:	df000115 	stw	fp,4(sp)
81107b4c:	df000104 	addi	fp,sp,4
81107b50:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
81107b54:	e17fff17 	ldw	r5,-4(fp)
81107b58:	010001c4 	movi	r4,7
81107b5c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107b60:	00800044 	movi	r2,1
}
81107b64:	e037883a 	mov	sp,fp
81107b68:	dfc00117 	ldw	ra,4(sp)
81107b6c:	df000017 	ldw	fp,0(sp)
81107b70:	dec00204 	addi	sp,sp,8
81107b74:	f800283a 	ret

81107b78 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
81107b78:	defffc04 	addi	sp,sp,-16
81107b7c:	de00012e 	bgeu	sp,et,81107b84 <bSyncSetPolarity+0xc>
81107b80:	003b68fa 	trap	3
81107b84:	dfc00315 	stw	ra,12(sp)
81107b88:	df000215 	stw	fp,8(sp)
81107b8c:	df000204 	addi	fp,sp,8
81107b90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b94:	01000204 	movi	r4,8
81107b98:	11086f80 	call	811086f8 <uliSyncReadReg>
81107b9c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107ba0:	e0bfff17 	ldw	r2,-4(fp)
81107ba4:	1000051e 	bne	r2,zero,81107bbc <bSyncSetPolarity+0x44>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
81107ba8:	e0fffe17 	ldw	r3,-8(fp)
81107bac:	00bfbfc4 	movi	r2,-257
81107bb0:	1884703a 	and	r2,r3,r2
81107bb4:	e0bffe15 	stw	r2,-8(fp)
81107bb8:	00000306 	br	81107bc8 <bSyncSetPolarity+0x50>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
81107bbc:	e0bffe17 	ldw	r2,-8(fp)
81107bc0:	10804014 	ori	r2,r2,256
81107bc4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107bc8:	e17ffe17 	ldw	r5,-8(fp)
81107bcc:	01000204 	movi	r4,8
81107bd0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107bd4:	00800044 	movi	r2,1
}
81107bd8:	e037883a 	mov	sp,fp
81107bdc:	dfc00117 	ldw	ra,4(sp)
81107be0:	df000017 	ldw	fp,0(sp)
81107be4:	dec00204 	addi	sp,sp,8
81107be8:	f800283a 	ret

81107bec <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
81107bec:	defffc04 	addi	sp,sp,-16
81107bf0:	de00012e 	bgeu	sp,et,81107bf8 <bSyncSetNCycles+0xc>
81107bf4:	003b68fa 	trap	3
81107bf8:	dfc00315 	stw	ra,12(sp)
81107bfc:	df000215 	stw	fp,8(sp)
81107c00:	df000204 	addi	fp,sp,8
81107c04:	2005883a 	mov	r2,r4
81107c08:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107c0c:	01000204 	movi	r4,8
81107c10:	11086f80 	call	811086f8 <uliSyncReadReg>
81107c14:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107c18:	e0fffe17 	ldw	r3,-8(fp)
81107c1c:	00bfc004 	movi	r2,-256
81107c20:	1884703a 	and	r2,r3,r2
81107c24:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107c28:	e0bfff03 	ldbu	r2,-4(fp)
81107c2c:	e0fffe17 	ldw	r3,-8(fp)
81107c30:	1884b03a 	or	r2,r3,r2
81107c34:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107c38:	e17ffe17 	ldw	r5,-8(fp)
81107c3c:	01000204 	movi	r4,8
81107c40:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107c44:	00800044 	movi	r2,1
}
81107c48:	e037883a 	mov	sp,fp
81107c4c:	dfc00117 	ldw	ra,4(sp)
81107c50:	df000017 	ldw	fp,0(sp)
81107c54:	dec00204 	addi	sp,sp,8
81107c58:	f800283a 	ret

81107c5c <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
81107c5c:	defffd04 	addi	sp,sp,-12
81107c60:	de00012e 	bgeu	sp,et,81107c68 <uliSyncGetMbt+0xc>
81107c64:	003b68fa 	trap	3
81107c68:	dfc00215 	stw	ra,8(sp)
81107c6c:	df000115 	stw	fp,4(sp)
81107c70:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
81107c74:	01000104 	movi	r4,4
81107c78:	11086f80 	call	811086f8 <uliSyncReadReg>
81107c7c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c80:	e0bfff17 	ldw	r2,-4(fp)
}
81107c84:	e037883a 	mov	sp,fp
81107c88:	dfc00117 	ldw	ra,4(sp)
81107c8c:	df000017 	ldw	fp,0(sp)
81107c90:	dec00204 	addi	sp,sp,8
81107c94:	f800283a 	ret

81107c98 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
81107c98:	defffd04 	addi	sp,sp,-12
81107c9c:	de00012e 	bgeu	sp,et,81107ca4 <uliSyncGetBt+0xc>
81107ca0:	003b68fa 	trap	3
81107ca4:	dfc00215 	stw	ra,8(sp)
81107ca8:	df000115 	stw	fp,4(sp)
81107cac:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
81107cb0:	01000144 	movi	r4,5
81107cb4:	11086f80 	call	811086f8 <uliSyncReadReg>
81107cb8:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cbc:	e0bfff17 	ldw	r2,-4(fp)
}
81107cc0:	e037883a 	mov	sp,fp
81107cc4:	dfc00117 	ldw	ra,4(sp)
81107cc8:	df000017 	ldw	fp,0(sp)
81107ccc:	dec00204 	addi	sp,sp,8
81107cd0:	f800283a 	ret

81107cd4 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
81107cd4:	defffd04 	addi	sp,sp,-12
81107cd8:	de00012e 	bgeu	sp,et,81107ce0 <uliSyncGetPer+0xc>
81107cdc:	003b68fa 	trap	3
81107ce0:	dfc00215 	stw	ra,8(sp)
81107ce4:	df000115 	stw	fp,4(sp)
81107ce8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
81107cec:	01000184 	movi	r4,6
81107cf0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107cf4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cf8:	e0bfff17 	ldw	r2,-4(fp)
}
81107cfc:	e037883a 	mov	sp,fp
81107d00:	dfc00117 	ldw	ra,4(sp)
81107d04:	df000017 	ldw	fp,0(sp)
81107d08:	dec00204 	addi	sp,sp,8
81107d0c:	f800283a 	ret

81107d10 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107d10:	defffd04 	addi	sp,sp,-12
81107d14:	de00012e 	bgeu	sp,et,81107d1c <uliSyncGetOst+0xc>
81107d18:	003b68fa 	trap	3
81107d1c:	dfc00215 	stw	ra,8(sp)
81107d20:	df000115 	stw	fp,4(sp)
81107d24:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107d28:	010001c4 	movi	r4,7
81107d2c:	11086f80 	call	811086f8 <uliSyncReadReg>
81107d30:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d34:	e0bfff17 	ldw	r2,-4(fp)
}
81107d38:	e037883a 	mov	sp,fp
81107d3c:	dfc00117 	ldw	ra,4(sp)
81107d40:	df000017 	ldw	fp,0(sp)
81107d44:	dec00204 	addi	sp,sp,8
81107d48:	f800283a 	ret

81107d4c <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107d4c:	defffd04 	addi	sp,sp,-12
81107d50:	de00012e 	bgeu	sp,et,81107d58 <uliSyncGetGeneral+0xc>
81107d54:	003b68fa 	trap	3
81107d58:	dfc00215 	stw	ra,8(sp)
81107d5c:	df000115 	stw	fp,4(sp)
81107d60:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107d64:	01000204 	movi	r4,8
81107d68:	11086f80 	call	811086f8 <uliSyncReadReg>
81107d6c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d70:	e0bfff17 	ldw	r2,-4(fp)
}
81107d74:	e037883a 	mov	sp,fp
81107d78:	dfc00117 	ldw	ra,4(sp)
81107d7c:	df000017 	ldw	fp,0(sp)
81107d80:	dec00204 	addi	sp,sp,8
81107d84:	f800283a 	ret

81107d88 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
81107d88:	defffd04 	addi	sp,sp,-12
81107d8c:	de00012e 	bgeu	sp,et,81107d94 <bSyncErrInj+0xc>
81107d90:	003b68fa 	trap	3
81107d94:	dfc00215 	stw	ra,8(sp)
81107d98:	df000115 	stw	fp,4(sp)
81107d9c:	df000104 	addi	fp,sp,4
81107da0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
81107da4:	e17fff17 	ldw	r5,-4(fp)
81107da8:	01000244 	movi	r4,9
81107dac:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107db0:	00800044 	movi	r2,1
}
81107db4:	e037883a 	mov	sp,fp
81107db8:	dfc00117 	ldw	ra,4(sp)
81107dbc:	df000017 	ldw	fp,0(sp)
81107dc0:	dec00204 	addi	sp,sp,8
81107dc4:	f800283a 	ret

81107dc8 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
81107dc8:	defffc04 	addi	sp,sp,-16
81107dcc:	de00012e 	bgeu	sp,et,81107dd4 <bSyncCtrExtnIrq+0xc>
81107dd0:	003b68fa 	trap	3
81107dd4:	dfc00315 	stw	ra,12(sp)
81107dd8:	df000215 	stw	fp,8(sp)
81107ddc:	df000204 	addi	fp,sp,8
81107de0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107de4:	01000284 	movi	r4,10
81107de8:	11086f80 	call	811086f8 <uliSyncReadReg>
81107dec:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107df0:	e0bfff17 	ldw	r2,-4(fp)
81107df4:	1000061e 	bne	r2,zero,81107e10 <bSyncCtrExtnIrq+0x48>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107df8:	e0fffe17 	ldw	r3,-8(fp)
81107dfc:	00a00034 	movhi	r2,32768
81107e00:	10bfffc4 	addi	r2,r2,-1
81107e04:	1884703a 	and	r2,r3,r2
81107e08:	e0bffe15 	stw	r2,-8(fp)
81107e0c:	00000306 	br	81107e1c <bSyncCtrExtnIrq+0x54>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107e10:	e0bffe17 	ldw	r2,-8(fp)
81107e14:	10a00034 	orhi	r2,r2,32768
81107e18:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e1c:	e17ffe17 	ldw	r5,-8(fp)
81107e20:	01000284 	movi	r4,10
81107e24:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107e28:	00800044 	movi	r2,1
}
81107e2c:	e037883a 	mov	sp,fp
81107e30:	dfc00117 	ldw	ra,4(sp)
81107e34:	df000017 	ldw	fp,0(sp)
81107e38:	dec00204 	addi	sp,sp,8
81107e3c:	f800283a 	ret

81107e40 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107e40:	defffd04 	addi	sp,sp,-12
81107e44:	de00012e 	bgeu	sp,et,81107e4c <bSyncCtrStart+0xc>
81107e48:	003b68fa 	trap	3
81107e4c:	dfc00215 	stw	ra,8(sp)
81107e50:	df000115 	stw	fp,4(sp)
81107e54:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e58:	01000284 	movi	r4,10
81107e5c:	11086f80 	call	811086f8 <uliSyncReadReg>
81107e60:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
81107e64:	e0bfff17 	ldw	r2,-4(fp)
81107e68:	10800234 	orhi	r2,r2,8
81107e6c:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e70:	e17fff17 	ldw	r5,-4(fp)
81107e74:	01000284 	movi	r4,10
81107e78:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107e7c:	00800044 	movi	r2,1
}
81107e80:	e037883a 	mov	sp,fp
81107e84:	dfc00117 	ldw	ra,4(sp)
81107e88:	df000017 	ldw	fp,0(sp)
81107e8c:	dec00204 	addi	sp,sp,8
81107e90:	f800283a 	ret

81107e94 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
81107e94:	defffd04 	addi	sp,sp,-12
81107e98:	de00012e 	bgeu	sp,et,81107ea0 <bSyncCtrReset+0xc>
81107e9c:	003b68fa 	trap	3
81107ea0:	dfc00215 	stw	ra,8(sp)
81107ea4:	df000115 	stw	fp,4(sp)
81107ea8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107eac:	01000284 	movi	r4,10
81107eb0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107eb4:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
81107eb8:	e0bfff17 	ldw	r2,-4(fp)
81107ebc:	10800134 	orhi	r2,r2,4
81107ec0:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107ec4:	e17fff17 	ldw	r5,-4(fp)
81107ec8:	01000284 	movi	r4,10
81107ecc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107ed0:	00800044 	movi	r2,1
}
81107ed4:	e037883a 	mov	sp,fp
81107ed8:	dfc00117 	ldw	ra,4(sp)
81107edc:	df000017 	ldw	fp,0(sp)
81107ee0:	dec00204 	addi	sp,sp,8
81107ee4:	f800283a 	ret

81107ee8 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
81107ee8:	defffd04 	addi	sp,sp,-12
81107eec:	de00012e 	bgeu	sp,et,81107ef4 <bSyncCtrOneShot+0xc>
81107ef0:	003b68fa 	trap	3
81107ef4:	dfc00215 	stw	ra,8(sp)
81107ef8:	df000115 	stw	fp,4(sp)
81107efc:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f00:	01000284 	movi	r4,10
81107f04:	11086f80 	call	811086f8 <uliSyncReadReg>
81107f08:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107f0c:	e0bfff17 	ldw	r2,-4(fp)
81107f10:	108000b4 	orhi	r2,r2,2
81107f14:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f18:	e17fff17 	ldw	r5,-4(fp)
81107f1c:	01000284 	movi	r4,10
81107f20:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107f24:	00800044 	movi	r2,1
}
81107f28:	e037883a 	mov	sp,fp
81107f2c:	dfc00117 	ldw	ra,4(sp)
81107f30:	df000017 	ldw	fp,0(sp)
81107f34:	dec00204 	addi	sp,sp,8
81107f38:	f800283a 	ret

81107f3c <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107f3c:	defffd04 	addi	sp,sp,-12
81107f40:	de00012e 	bgeu	sp,et,81107f48 <bSyncCtrErrInj+0xc>
81107f44:	003b68fa 	trap	3
81107f48:	dfc00215 	stw	ra,8(sp)
81107f4c:	df000115 	stw	fp,4(sp)
81107f50:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f54:	01000284 	movi	r4,10
81107f58:	11086f80 	call	811086f8 <uliSyncReadReg>
81107f5c:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107f60:	e0bfff17 	ldw	r2,-4(fp)
81107f64:	10800074 	orhi	r2,r2,1
81107f68:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f6c:	e17fff17 	ldw	r5,-4(fp)
81107f70:	01000284 	movi	r4,10
81107f74:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107f78:	00800044 	movi	r2,1
}
81107f7c:	e037883a 	mov	sp,fp
81107f80:	dfc00117 	ldw	ra,4(sp)
81107f84:	df000017 	ldw	fp,0(sp)
81107f88:	dec00204 	addi	sp,sp,8
81107f8c:	f800283a 	ret

81107f90 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107f90:	defffc04 	addi	sp,sp,-16
81107f94:	de00012e 	bgeu	sp,et,81107f9c <bSyncCtrSyncOutEnable+0xc>
81107f98:	003b68fa 	trap	3
81107f9c:	dfc00315 	stw	ra,12(sp)
81107fa0:	df000215 	stw	fp,8(sp)
81107fa4:	df000204 	addi	fp,sp,8
81107fa8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107fac:	01000284 	movi	r4,10
81107fb0:	11086f80 	call	811086f8 <uliSyncReadReg>
81107fb4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107fb8:	e0bfff17 	ldw	r2,-4(fp)
81107fbc:	1000051e 	bne	r2,zero,81107fd4 <bSyncCtrSyncOutEnable+0x44>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
81107fc0:	e0fffe17 	ldw	r3,-8(fp)
81107fc4:	00bfbfc4 	movi	r2,-257
81107fc8:	1884703a 	and	r2,r3,r2
81107fcc:	e0bffe15 	stw	r2,-8(fp)
81107fd0:	00000306 	br	81107fe0 <bSyncCtrSyncOutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
81107fd4:	e0bffe17 	ldw	r2,-8(fp)
81107fd8:	10804014 	ori	r2,r2,256
81107fdc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107fe0:	e17ffe17 	ldw	r5,-8(fp)
81107fe4:	01000284 	movi	r4,10
81107fe8:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81107fec:	00800044 	movi	r2,1
}
81107ff0:	e037883a 	mov	sp,fp
81107ff4:	dfc00117 	ldw	ra,4(sp)
81107ff8:	df000017 	ldw	fp,0(sp)
81107ffc:	dec00204 	addi	sp,sp,8
81108000:	f800283a 	ret

81108004 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
81108004:	defffc04 	addi	sp,sp,-16
81108008:	de00012e 	bgeu	sp,et,81108010 <bSyncCtrCh1OutEnable+0xc>
8110800c:	003b68fa 	trap	3
81108010:	dfc00315 	stw	ra,12(sp)
81108014:	df000215 	stw	fp,8(sp)
81108018:	df000204 	addi	fp,sp,8
8110801c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108020:	01000284 	movi	r4,10
81108024:	11086f80 	call	811086f8 <uliSyncReadReg>
81108028:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110802c:	e0bfff17 	ldw	r2,-4(fp)
81108030:	1000051e 	bne	r2,zero,81108048 <bSyncCtrCh1OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81108034:	e0fffe17 	ldw	r3,-8(fp)
81108038:	00bfff84 	movi	r2,-2
8110803c:	1884703a 	and	r2,r3,r2
81108040:	e0bffe15 	stw	r2,-8(fp)
81108044:	00000306 	br	81108054 <bSyncCtrCh1OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81108048:	e0bffe17 	ldw	r2,-8(fp)
8110804c:	10800054 	ori	r2,r2,1
81108050:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108054:	e17ffe17 	ldw	r5,-8(fp)
81108058:	01000284 	movi	r4,10
8110805c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108060:	00800044 	movi	r2,1
}
81108064:	e037883a 	mov	sp,fp
81108068:	dfc00117 	ldw	ra,4(sp)
8110806c:	df000017 	ldw	fp,0(sp)
81108070:	dec00204 	addi	sp,sp,8
81108074:	f800283a 	ret

81108078 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81108078:	defffc04 	addi	sp,sp,-16
8110807c:	de00012e 	bgeu	sp,et,81108084 <bSyncCtrCh2OutEnable+0xc>
81108080:	003b68fa 	trap	3
81108084:	dfc00315 	stw	ra,12(sp)
81108088:	df000215 	stw	fp,8(sp)
8110808c:	df000204 	addi	fp,sp,8
81108090:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108094:	01000284 	movi	r4,10
81108098:	11086f80 	call	811086f8 <uliSyncReadReg>
8110809c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811080a0:	e0bfff17 	ldw	r2,-4(fp)
811080a4:	1000051e 	bne	r2,zero,811080bc <bSyncCtrCh2OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
811080a8:	e0fffe17 	ldw	r3,-8(fp)
811080ac:	00bfff44 	movi	r2,-3
811080b0:	1884703a 	and	r2,r3,r2
811080b4:	e0bffe15 	stw	r2,-8(fp)
811080b8:	00000306 	br	811080c8 <bSyncCtrCh2OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
811080bc:	e0bffe17 	ldw	r2,-8(fp)
811080c0:	10800094 	ori	r2,r2,2
811080c4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811080c8:	e17ffe17 	ldw	r5,-8(fp)
811080cc:	01000284 	movi	r4,10
811080d0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811080d4:	00800044 	movi	r2,1
}
811080d8:	e037883a 	mov	sp,fp
811080dc:	dfc00117 	ldw	ra,4(sp)
811080e0:	df000017 	ldw	fp,0(sp)
811080e4:	dec00204 	addi	sp,sp,8
811080e8:	f800283a 	ret

811080ec <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
811080ec:	defffc04 	addi	sp,sp,-16
811080f0:	de00012e 	bgeu	sp,et,811080f8 <bSyncCtrCh3OutEnable+0xc>
811080f4:	003b68fa 	trap	3
811080f8:	dfc00315 	stw	ra,12(sp)
811080fc:	df000215 	stw	fp,8(sp)
81108100:	df000204 	addi	fp,sp,8
81108104:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108108:	01000284 	movi	r4,10
8110810c:	11086f80 	call	811086f8 <uliSyncReadReg>
81108110:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108114:	e0bfff17 	ldw	r2,-4(fp)
81108118:	1000051e 	bne	r2,zero,81108130 <bSyncCtrCh3OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
8110811c:	e0fffe17 	ldw	r3,-8(fp)
81108120:	00bffec4 	movi	r2,-5
81108124:	1884703a 	and	r2,r3,r2
81108128:	e0bffe15 	stw	r2,-8(fp)
8110812c:	00000306 	br	8110813c <bSyncCtrCh3OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
81108130:	e0bffe17 	ldw	r2,-8(fp)
81108134:	10800114 	ori	r2,r2,4
81108138:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110813c:	e17ffe17 	ldw	r5,-8(fp)
81108140:	01000284 	movi	r4,10
81108144:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108148:	00800044 	movi	r2,1
}
8110814c:	e037883a 	mov	sp,fp
81108150:	dfc00117 	ldw	ra,4(sp)
81108154:	df000017 	ldw	fp,0(sp)
81108158:	dec00204 	addi	sp,sp,8
8110815c:	f800283a 	ret

81108160 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
81108160:	defffc04 	addi	sp,sp,-16
81108164:	de00012e 	bgeu	sp,et,8110816c <bSyncCtrCh4OutEnable+0xc>
81108168:	003b68fa 	trap	3
8110816c:	dfc00315 	stw	ra,12(sp)
81108170:	df000215 	stw	fp,8(sp)
81108174:	df000204 	addi	fp,sp,8
81108178:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110817c:	01000284 	movi	r4,10
81108180:	11086f80 	call	811086f8 <uliSyncReadReg>
81108184:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108188:	e0bfff17 	ldw	r2,-4(fp)
8110818c:	1000051e 	bne	r2,zero,811081a4 <bSyncCtrCh4OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81108190:	e0fffe17 	ldw	r3,-8(fp)
81108194:	00bffdc4 	movi	r2,-9
81108198:	1884703a 	and	r2,r3,r2
8110819c:	e0bffe15 	stw	r2,-8(fp)
811081a0:	00000306 	br	811081b0 <bSyncCtrCh4OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
811081a4:	e0bffe17 	ldw	r2,-8(fp)
811081a8:	10800214 	ori	r2,r2,8
811081ac:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811081b0:	e17ffe17 	ldw	r5,-8(fp)
811081b4:	01000284 	movi	r4,10
811081b8:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811081bc:	00800044 	movi	r2,1
}
811081c0:	e037883a 	mov	sp,fp
811081c4:	dfc00117 	ldw	ra,4(sp)
811081c8:	df000017 	ldw	fp,0(sp)
811081cc:	dec00204 	addi	sp,sp,8
811081d0:	f800283a 	ret

811081d4 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
811081d4:	defffc04 	addi	sp,sp,-16
811081d8:	de00012e 	bgeu	sp,et,811081e0 <bSyncCtrCh5OutEnable+0xc>
811081dc:	003b68fa 	trap	3
811081e0:	dfc00315 	stw	ra,12(sp)
811081e4:	df000215 	stw	fp,8(sp)
811081e8:	df000204 	addi	fp,sp,8
811081ec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811081f0:	01000284 	movi	r4,10
811081f4:	11086f80 	call	811086f8 <uliSyncReadReg>
811081f8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811081fc:	e0bfff17 	ldw	r2,-4(fp)
81108200:	1000051e 	bne	r2,zero,81108218 <bSyncCtrCh5OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
81108204:	e0fffe17 	ldw	r3,-8(fp)
81108208:	00bffbc4 	movi	r2,-17
8110820c:	1884703a 	and	r2,r3,r2
81108210:	e0bffe15 	stw	r2,-8(fp)
81108214:	00000306 	br	81108224 <bSyncCtrCh5OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
81108218:	e0bffe17 	ldw	r2,-8(fp)
8110821c:	10800414 	ori	r2,r2,16
81108220:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108224:	e17ffe17 	ldw	r5,-8(fp)
81108228:	01000284 	movi	r4,10
8110822c:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108230:	00800044 	movi	r2,1
}
81108234:	e037883a 	mov	sp,fp
81108238:	dfc00117 	ldw	ra,4(sp)
8110823c:	df000017 	ldw	fp,0(sp)
81108240:	dec00204 	addi	sp,sp,8
81108244:	f800283a 	ret

81108248 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
81108248:	defffc04 	addi	sp,sp,-16
8110824c:	de00012e 	bgeu	sp,et,81108254 <bSyncCtrCh6OutEnable+0xc>
81108250:	003b68fa 	trap	3
81108254:	dfc00315 	stw	ra,12(sp)
81108258:	df000215 	stw	fp,8(sp)
8110825c:	df000204 	addi	fp,sp,8
81108260:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108264:	01000284 	movi	r4,10
81108268:	11086f80 	call	811086f8 <uliSyncReadReg>
8110826c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108270:	e0bfff17 	ldw	r2,-4(fp)
81108274:	1000051e 	bne	r2,zero,8110828c <bSyncCtrCh6OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81108278:	e0fffe17 	ldw	r3,-8(fp)
8110827c:	00bff7c4 	movi	r2,-33
81108280:	1884703a 	and	r2,r3,r2
81108284:	e0bffe15 	stw	r2,-8(fp)
81108288:	00000306 	br	81108298 <bSyncCtrCh6OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110828c:	e0bffe17 	ldw	r2,-8(fp)
81108290:	10800814 	ori	r2,r2,32
81108294:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108298:	e17ffe17 	ldw	r5,-8(fp)
8110829c:	01000284 	movi	r4,10
811082a0:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811082a4:	00800044 	movi	r2,1
}
811082a8:	e037883a 	mov	sp,fp
811082ac:	dfc00117 	ldw	ra,4(sp)
811082b0:	df000017 	ldw	fp,0(sp)
811082b4:	dec00204 	addi	sp,sp,8
811082b8:	f800283a 	ret

811082bc <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
811082bc:	defffc04 	addi	sp,sp,-16
811082c0:	de00012e 	bgeu	sp,et,811082c8 <bSyncCtrCh7OutEnable+0xc>
811082c4:	003b68fa 	trap	3
811082c8:	dfc00315 	stw	ra,12(sp)
811082cc:	df000215 	stw	fp,8(sp)
811082d0:	df000204 	addi	fp,sp,8
811082d4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811082d8:	01000284 	movi	r4,10
811082dc:	11086f80 	call	811086f8 <uliSyncReadReg>
811082e0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811082e4:	e0bfff17 	ldw	r2,-4(fp)
811082e8:	1000051e 	bne	r2,zero,81108300 <bSyncCtrCh7OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
811082ec:	e0fffe17 	ldw	r3,-8(fp)
811082f0:	00bfefc4 	movi	r2,-65
811082f4:	1884703a 	and	r2,r3,r2
811082f8:	e0bffe15 	stw	r2,-8(fp)
811082fc:	00000306 	br	8110830c <bSyncCtrCh7OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
81108300:	e0bffe17 	ldw	r2,-8(fp)
81108304:	10801014 	ori	r2,r2,64
81108308:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110830c:	e17ffe17 	ldw	r5,-8(fp)
81108310:	01000284 	movi	r4,10
81108314:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108318:	00800044 	movi	r2,1
}
8110831c:	e037883a 	mov	sp,fp
81108320:	dfc00117 	ldw	ra,4(sp)
81108324:	df000017 	ldw	fp,0(sp)
81108328:	dec00204 	addi	sp,sp,8
8110832c:	f800283a 	ret

81108330 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
81108330:	defffc04 	addi	sp,sp,-16
81108334:	de00012e 	bgeu	sp,et,8110833c <bSyncCtrCh8OutEnable+0xc>
81108338:	003b68fa 	trap	3
8110833c:	dfc00315 	stw	ra,12(sp)
81108340:	df000215 	stw	fp,8(sp)
81108344:	df000204 	addi	fp,sp,8
81108348:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110834c:	01000284 	movi	r4,10
81108350:	11086f80 	call	811086f8 <uliSyncReadReg>
81108354:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108358:	e0bfff17 	ldw	r2,-4(fp)
8110835c:	1000051e 	bne	r2,zero,81108374 <bSyncCtrCh8OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
81108360:	e0fffe17 	ldw	r3,-8(fp)
81108364:	00bfdfc4 	movi	r2,-129
81108368:	1884703a 	and	r2,r3,r2
8110836c:	e0bffe15 	stw	r2,-8(fp)
81108370:	00000306 	br	81108380 <bSyncCtrCh8OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
81108374:	e0bffe17 	ldw	r2,-8(fp)
81108378:	10802014 	ori	r2,r2,128
8110837c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108380:	e17ffe17 	ldw	r5,-8(fp)
81108384:	01000284 	movi	r4,10
81108388:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
8110838c:	00800044 	movi	r2,1
}
81108390:	e037883a 	mov	sp,fp
81108394:	dfc00117 	ldw	ra,4(sp)
81108398:	df000017 	ldw	fp,0(sp)
8110839c:	dec00204 	addi	sp,sp,8
811083a0:	f800283a 	ret

811083a4 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
811083a4:	defffc04 	addi	sp,sp,-16
811083a8:	de00012e 	bgeu	sp,et,811083b0 <bSyncIrqEnableError+0xc>
811083ac:	003b68fa 	trap	3
811083b0:	dfc00315 	stw	ra,12(sp)
811083b4:	df000215 	stw	fp,8(sp)
811083b8:	df000204 	addi	fp,sp,8
811083bc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811083c0:	01000044 	movi	r4,1
811083c4:	11086f80 	call	811086f8 <uliSyncReadReg>
811083c8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811083cc:	e0bfff17 	ldw	r2,-4(fp)
811083d0:	1000051e 	bne	r2,zero,811083e8 <bSyncIrqEnableError+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
811083d4:	e0fffe17 	ldw	r3,-8(fp)
811083d8:	00bfff44 	movi	r2,-3
811083dc:	1884703a 	and	r2,r3,r2
811083e0:	e0bffe15 	stw	r2,-8(fp)
811083e4:	00000306 	br	811083f4 <bSyncIrqEnableError+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
811083e8:	e0bffe17 	ldw	r2,-8(fp)
811083ec:	10800094 	ori	r2,r2,2
811083f0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
811083f4:	e17ffe17 	ldw	r5,-8(fp)
811083f8:	01000044 	movi	r4,1
811083fc:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108400:	00800044 	movi	r2,1
}
81108404:	e037883a 	mov	sp,fp
81108408:	dfc00117 	ldw	ra,4(sp)
8110840c:	df000017 	ldw	fp,0(sp)
81108410:	dec00204 	addi	sp,sp,8
81108414:	f800283a 	ret

81108418 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
81108418:	defffc04 	addi	sp,sp,-16
8110841c:	de00012e 	bgeu	sp,et,81108424 <bSyncIrqEnableBlank+0xc>
81108420:	003b68fa 	trap	3
81108424:	dfc00315 	stw	ra,12(sp)
81108428:	df000215 	stw	fp,8(sp)
8110842c:	df000204 	addi	fp,sp,8
81108430:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81108434:	01000044 	movi	r4,1
81108438:	11086f80 	call	811086f8 <uliSyncReadReg>
8110843c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108440:	e0bfff17 	ldw	r2,-4(fp)
81108444:	1000051e 	bne	r2,zero,8110845c <bSyncIrqEnableBlank+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
81108448:	e0fffe17 	ldw	r3,-8(fp)
8110844c:	00bfff84 	movi	r2,-2
81108450:	1884703a 	and	r2,r3,r2
81108454:	e0bffe15 	stw	r2,-8(fp)
81108458:	00000306 	br	81108468 <bSyncIrqEnableBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
8110845c:	e0bffe17 	ldw	r2,-8(fp)
81108460:	10800054 	ori	r2,r2,1
81108464:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81108468:	e17ffe17 	ldw	r5,-8(fp)
8110846c:	01000044 	movi	r4,1
81108470:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
81108474:	00800044 	movi	r2,1
}
81108478:	e037883a 	mov	sp,fp
8110847c:	dfc00117 	ldw	ra,4(sp)
81108480:	df000017 	ldw	fp,0(sp)
81108484:	dec00204 	addi	sp,sp,8
81108488:	f800283a 	ret

8110848c <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110848c:	defffc04 	addi	sp,sp,-16
81108490:	de00012e 	bgeu	sp,et,81108498 <bSyncIrqFlagClrError+0xc>
81108494:	003b68fa 	trap	3
81108498:	dfc00315 	stw	ra,12(sp)
8110849c:	df000215 	stw	fp,8(sp)
811084a0:	df000204 	addi	fp,sp,8
811084a4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811084a8:	01000084 	movi	r4,2
811084ac:	11086f80 	call	811086f8 <uliSyncReadReg>
811084b0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811084b4:	e0bfff17 	ldw	r2,-4(fp)
811084b8:	1000051e 	bne	r2,zero,811084d0 <bSyncIrqFlagClrError+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
811084bc:	e0fffe17 	ldw	r3,-8(fp)
811084c0:	00bfff44 	movi	r2,-3
811084c4:	1884703a 	and	r2,r3,r2
811084c8:	e0bffe15 	stw	r2,-8(fp)
811084cc:	00000306 	br	811084dc <bSyncIrqFlagClrError+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
811084d0:	e0bffe17 	ldw	r2,-8(fp)
811084d4:	10800094 	ori	r2,r2,2
811084d8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811084dc:	e17ffe17 	ldw	r5,-8(fp)
811084e0:	01000084 	movi	r4,2
811084e4:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
811084e8:	00800044 	movi	r2,1
}
811084ec:	e037883a 	mov	sp,fp
811084f0:	dfc00117 	ldw	ra,4(sp)
811084f4:	df000017 	ldw	fp,0(sp)
811084f8:	dec00204 	addi	sp,sp,8
811084fc:	f800283a 	ret

81108500 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81108500:	defffc04 	addi	sp,sp,-16
81108504:	de00012e 	bgeu	sp,et,8110850c <bSyncIrqFlagClrBlank+0xc>
81108508:	003b68fa 	trap	3
8110850c:	dfc00315 	stw	ra,12(sp)
81108510:	df000215 	stw	fp,8(sp)
81108514:	df000204 	addi	fp,sp,8
81108518:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
8110851c:	01000084 	movi	r4,2
81108520:	11086f80 	call	811086f8 <uliSyncReadReg>
81108524:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108528:	e0bfff17 	ldw	r2,-4(fp)
8110852c:	1000051e 	bne	r2,zero,81108544 <bSyncIrqFlagClrBlank+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
81108530:	e0fffe17 	ldw	r3,-8(fp)
81108534:	00bfff84 	movi	r2,-2
81108538:	1884703a 	and	r2,r3,r2
8110853c:	e0bffe15 	stw	r2,-8(fp)
81108540:	00000306 	br	81108550 <bSyncIrqFlagClrBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
81108544:	e0bffe17 	ldw	r2,-8(fp)
81108548:	10800054 	ori	r2,r2,1
8110854c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
81108550:	e17ffe17 	ldw	r5,-8(fp)
81108554:	01000084 	movi	r4,2
81108558:	110869c0 	call	8110869c <bSyncWriteReg>
	return TRUE;
8110855c:	00800044 	movi	r2,1
}
81108560:	e037883a 	mov	sp,fp
81108564:	dfc00117 	ldw	ra,4(sp)
81108568:	df000017 	ldw	fp,0(sp)
8110856c:	dec00204 	addi	sp,sp,8
81108570:	f800283a 	ret

81108574 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
81108574:	defffc04 	addi	sp,sp,-16
81108578:	de00012e 	bgeu	sp,et,81108580 <bSyncIrqFlagError+0xc>
8110857c:	003b68fa 	trap	3
81108580:	dfc00315 	stw	ra,12(sp)
81108584:	df000215 	stw	fp,8(sp)
81108588:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110858c:	010000c4 	movi	r4,3
81108590:	11086f80 	call	811086f8 <uliSyncReadReg>
81108594:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81108598:	e0bfff17 	ldw	r2,-4(fp)
8110859c:	1080008c 	andi	r2,r2,2
811085a0:	10000326 	beq	r2,zero,811085b0 <bSyncIrqFlagError+0x3c>
		bResult = TRUE;
811085a4:	00800044 	movi	r2,1
811085a8:	e0bffe15 	stw	r2,-8(fp)
811085ac:	00000106 	br	811085b4 <bSyncIrqFlagError+0x40>
	} else {
		bResult = FALSE;
811085b0:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
811085b4:	e0bffe17 	ldw	r2,-8(fp)
}
811085b8:	e037883a 	mov	sp,fp
811085bc:	dfc00117 	ldw	ra,4(sp)
811085c0:	df000017 	ldw	fp,0(sp)
811085c4:	dec00204 	addi	sp,sp,8
811085c8:	f800283a 	ret

811085cc <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
811085cc:	defffc04 	addi	sp,sp,-16
811085d0:	de00012e 	bgeu	sp,et,811085d8 <bSyncIrqFlagBlank+0xc>
811085d4:	003b68fa 	trap	3
811085d8:	dfc00315 	stw	ra,12(sp)
811085dc:	df000215 	stw	fp,8(sp)
811085e0:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
811085e4:	010000c4 	movi	r4,3
811085e8:	11086f80 	call	811086f8 <uliSyncReadReg>
811085ec:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
811085f0:	e0bfff17 	ldw	r2,-4(fp)
811085f4:	1080004c 	andi	r2,r2,1
811085f8:	10000326 	beq	r2,zero,81108608 <bSyncIrqFlagBlank+0x3c>
		bResult = TRUE;
811085fc:	00800044 	movi	r2,1
81108600:	e0bffe15 	stw	r2,-8(fp)
81108604:	00000106 	br	8110860c <bSyncIrqFlagBlank+0x40>
	} else {
		bResult = FALSE;
81108608:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110860c:	e0bffe17 	ldw	r2,-8(fp)
}
81108610:	e037883a 	mov	sp,fp
81108614:	dfc00117 	ldw	ra,4(sp)
81108618:	df000017 	ldw	fp,0(sp)
8110861c:	dec00204 	addi	sp,sp,8
81108620:	f800283a 	ret

81108624 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
81108624:	defffd04 	addi	sp,sp,-12
81108628:	de00012e 	bgeu	sp,et,81108630 <uliSyncGetCtr+0xc>
8110862c:	003b68fa 	trap	3
81108630:	dfc00215 	stw	ra,8(sp)
81108634:	df000115 	stw	fp,4(sp)
81108638:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110863c:	01000284 	movi	r4,10
81108640:	11086f80 	call	811086f8 <uliSyncReadReg>
81108644:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81108648:	e0bfff17 	ldw	r2,-4(fp)
}
8110864c:	e037883a 	mov	sp,fp
81108650:	dfc00117 	ldw	ra,4(sp)
81108654:	df000017 	ldw	fp,0(sp)
81108658:	dec00204 	addi	sp,sp,8
8110865c:	f800283a 	ret

81108660 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
81108660:	defffd04 	addi	sp,sp,-12
81108664:	de00012e 	bgeu	sp,et,8110866c <uliSyncReadStatus+0xc>
81108668:	003b68fa 	trap	3
8110866c:	dfc00215 	stw	ra,8(sp)
81108670:	df000115 	stw	fp,4(sp)
81108674:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81108678:	0009883a 	mov	r4,zero
8110867c:	11086f80 	call	811086f8 <uliSyncReadReg>
81108680:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81108684:	e0bfff17 	ldw	r2,-4(fp)
}
81108688:	e037883a 	mov	sp,fp
8110868c:	dfc00117 	ldw	ra,4(sp)
81108690:	df000017 	ldw	fp,0(sp)
81108694:	dec00204 	addi	sp,sp,8
81108698:	f800283a 	ret

8110869c <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110869c:	defffc04 	addi	sp,sp,-16
811086a0:	de00012e 	bgeu	sp,et,811086a8 <bSyncWriteReg+0xc>
811086a4:	003b68fa 	trap	3
811086a8:	df000315 	stw	fp,12(sp)
811086ac:	df000304 	addi	fp,sp,12
811086b0:	e13ffe15 	stw	r4,-8(fp)
811086b4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
811086b8:	00a00034 	movhi	r2,32768
811086bc:	10810004 	addi	r2,r2,1024
811086c0:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
811086c4:	e0bffe17 	ldw	r2,-8(fp)
811086c8:	1085883a 	add	r2,r2,r2
811086cc:	1085883a 	add	r2,r2,r2
811086d0:	1007883a 	mov	r3,r2
811086d4:	e0bffd17 	ldw	r2,-12(fp)
811086d8:	10c5883a 	add	r2,r2,r3
811086dc:	e0ffff17 	ldw	r3,-4(fp)
811086e0:	10c00015 	stw	r3,0(r2)
	return TRUE;
811086e4:	00800044 	movi	r2,1
}
811086e8:	e037883a 	mov	sp,fp
811086ec:	df000017 	ldw	fp,0(sp)
811086f0:	dec00104 	addi	sp,sp,4
811086f4:	f800283a 	ret

811086f8 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
811086f8:	defffc04 	addi	sp,sp,-16
811086fc:	de00012e 	bgeu	sp,et,81108704 <uliSyncReadReg+0xc>
81108700:	003b68fa 	trap	3
81108704:	df000315 	stw	fp,12(sp)
81108708:	df000304 	addi	fp,sp,12
8110870c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81108710:	00a00034 	movhi	r2,32768
81108714:	10810004 	addi	r2,r2,1024
81108718:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
8110871c:	e0bfff17 	ldw	r2,-4(fp)
81108720:	1085883a 	add	r2,r2,r2
81108724:	1085883a 	add	r2,r2,r2
81108728:	1007883a 	mov	r3,r2
8110872c:	e0bffd17 	ldw	r2,-12(fp)
81108730:	10c5883a 	add	r2,r2,r3
81108734:	10800017 	ldw	r2,0(r2)
81108738:	e0bffe15 	stw	r2,-8(fp)
	return value;
8110873c:	e0bffe17 	ldw	r2,-8(fp)
}
81108740:	e037883a 	mov	sp,fp
81108744:	df000017 	ldw	fp,0(sp)
81108748:	dec00104 	addi	sp,sp,4
8110874c:	f800283a 	ret

81108750 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
81108750:	defffd04 	addi	sp,sp,-12
81108754:	de00012e 	bgeu	sp,et,8110875c <vFeeTask+0xc>
81108758:	003b68fa 	trap	3
8110875c:	df000215 	stw	fp,8(sp)
81108760:	df000204 	addi	fp,sp,8
81108764:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
81108768:	e03ffe15 	stw	zero,-8(fp)

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
8110876c:	0001883a 	nop
81108770:	e037883a 	mov	sp,fp
81108774:	df000017 	ldw	fp,0(sp)
81108778:	dec00104 	addi	sp,sp,4
8110877c:	f800283a 	ret

81108780 <vInAckHandlerTaskV2>:


#include "in_ack_handler_task.h"


void vInAckHandlerTaskV2(void *task_data) {
81108780:	defff604 	addi	sp,sp,-40
81108784:	de00012e 	bgeu	sp,et,8110878c <vInAckHandlerTaskV2+0xc>
81108788:	003b68fa 	trap	3
8110878c:	dfc00915 	stw	ra,36(sp)
81108790:	df000815 	stw	fp,32(sp)
81108794:	df000804 	addi	fp,sp,32
81108798:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
8110879c:	e03ff815 	stw	zero,-32(fp)
    bool bFinished32 = FALSE;
811087a0:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished64 = FALSE;
811087a4:	e03ffc15 	stw	zero,-16(fp)
    bool bFinished128 = FALSE;
811087a8:	e03ffd15 	stw	zero,-12(fp)
	INT8U error_code;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucHashVerification = 0;
811087ac:	e03ffa85 	stb	zero,-22(fp)
    unsigned char ucCountRetries = 0;
811087b0:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0;
811087b4:	e03ffa45 	stb	zero,-23(fp)

    #ifdef DEBUG_ON
        debug(fp,"In Ack Handler Task. (Task on)\n");
811087b8:	d0a04f17 	ldw	r2,-32452(gp)
811087bc:	100f883a 	mov	r7,r2
811087c0:	018007c4 	movi	r6,31
811087c4:	01400044 	movi	r5,1
811087c8:	01204534 	movhi	r4,33044
811087cc:	21371104 	addi	r4,r4,-9148
811087d0:	11124700 	call	81112470 <fwrite>
    #endif    

	eReceiverAckState = sRAConfiguring;
811087d4:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eReceiverAckState) {
811087d8:	e0bff917 	ldw	r2,-28(fp)
811087dc:	10c00060 	cmpeqi	r3,r2,1
811087e0:	1800071e 	bne	r3,zero,81108800 <vInAckHandlerTaskV2+0x80>
811087e4:	0080032e 	bgeu	zero,r2,811087f4 <vInAckHandlerTaskV2+0x74>
811087e8:	108000a0 	cmpeqi	r2,r2,2
811087ec:	10004a1e 	bne	r2,zero,81108918 <vInAckHandlerTaskV2+0x198>
811087f0:	0000ac06 	br	81108aa4 <vInAckHandlerTaskV2+0x324>
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
811087f4:	00800044 	movi	r2,1
811087f8:	e0bff915 	stw	r2,-28(fp)
				break;
811087fc:	0000b306 	br	81108acc <vInAckHandlerTaskV2+0x34c>
            case sRAGettingACK:
                eReceiverAckState = sRAGettingACK;
81108800:	00800044 	movi	r2,1
81108804:	e0bff915 	stw	r2,-28(fp)
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
81108808:	d0a05317 	ldw	r2,-32436(gp)
8110880c:	e0fffe04 	addi	r3,fp,-8
81108810:	180d883a 	mov	r6,r3
81108814:	000b883a 	mov	r5,zero
81108818:	1009883a 	mov	r4,r2
8110881c:	112ff740 	call	8112ff74 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
81108820:	e0bffe03 	ldbu	r2,-8(fp)
81108824:	10803fcc 	andi	r2,r2,255
81108828:	1000391e 	bne	r2,zero,81108910 <vInAckHandlerTaskV2+0x190>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
8110882c:	d0a05217 	ldw	r2,-32440(gp)
81108830:	e0fffe04 	addi	r3,fp,-8
81108834:	180d883a 	mov	r6,r3
81108838:	000b883a 	mov	r5,zero
8110883c:	1009883a 	mov	r4,r2
81108840:	112df680 	call	8112df68 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108844:	e0bffe03 	ldbu	r2,-8(fp)
81108848:	10803fcc 	andi	r2,r2,255
8110884c:	10002b1e 	bne	r2,zero,811088fc <vInAckHandlerTaskV2+0x17c>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
81108850:	e03ffa45 	stb	zero,-23(fp)
81108854:	00002206 	br	811088e0 <vInAckHandlerTaskV2+0x160>
                        {
                            if ( xReceivedACK[i].cType != 0 ) {
81108858:	e0fffa43 	ldbu	r3,-23(fp)
8110885c:	00a04574 	movhi	r2,33045
81108860:	10aa5504 	addi	r2,r2,-22188
81108864:	18c7883a 	add	r3,r3,r3
81108868:	18c7883a 	add	r3,r3,r3
8110886c:	10c5883a 	add	r2,r2,r3
81108870:	10800003 	ldbu	r2,0(r2)
81108874:	10803fcc 	andi	r2,r2,255
81108878:	1080201c 	xori	r2,r2,128
8110887c:	10bfe004 	addi	r2,r2,-128
81108880:	10001426 	beq	r2,zero,811088d4 <vInAckHandlerTaskV2+0x154>

                                /*  Nack don't get here */
                                xRAckLocal = xReceivedACK[i];
81108884:	e0fffa43 	ldbu	r3,-23(fp)
81108888:	00a04574 	movhi	r2,33045
8110888c:	10aa5504 	addi	r2,r2,-22188
81108890:	18c7883a 	add	r3,r3,r3
81108894:	18c7883a 	add	r3,r3,r3
81108898:	10c5883a 	add	r2,r2,r3
8110889c:	10c0000b 	ldhu	r3,0(r2)
811088a0:	d0e0488d 	sth	r3,-32478(gp)
811088a4:	1080008b 	ldhu	r2,2(r2)
811088a8:	d0a0490d 	sth	r2,-32476(gp)
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811088ac:	e0fffa43 	ldbu	r3,-23(fp)
811088b0:	00a04574 	movhi	r2,33045
811088b4:	10aa5504 	addi	r2,r2,-22188
811088b8:	18c7883a 	add	r3,r3,r3
811088bc:	18c7883a 	add	r3,r3,r3
811088c0:	10c5883a 	add	r2,r2,r3
811088c4:	10000005 	stb	zero,0(r2)
                                eReceiverAckState = sRACleanningBuffer;
811088c8:	00800084 	movi	r2,2
811088cc:	e0bff915 	stw	r2,-28(fp)
                                break;                                
811088d0:	00000606 	br	811088ec <vInAckHandlerTaskV2+0x16c>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811088d4:	e0bffa43 	ldbu	r2,-23(fp)
811088d8:	10800044 	addi	r2,r2,1
811088dc:	e0bffa45 	stb	r2,-23(fp)
811088e0:	e0bffa43 	ldbu	r2,-23(fp)
811088e4:	108001b0 	cmpltui	r2,r2,6
811088e8:	103fdb1e 	bne	r2,zero,81108858 <__reset+0xfb0e8858>
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                eReceiverAckState = sRACleanningBuffer;
                                break;                                
                            }
                        }
                        OSMutexPost(xMutexReceivedACK);
811088ec:	d0a05217 	ldw	r2,-32440(gp)
811088f0:	1009883a 	mov	r4,r2
811088f4:	112e50c0 	call	8112e50c <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088f8:	00007406 	br	81108acc <vInAckHandlerTaskV2+0x34c>
                        OSMutexPost(xMutexReceivedACK);

                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                    	OSSemPost(xSemCountReceivedACK);
811088fc:	d0a05317 	ldw	r2,-32436(gp)
81108900:	1009883a 	mov	r4,r2
81108904:	11302fc0 	call	811302fc <OSSemPost>
                    	vFailGetMutexReceiverTask();
81108908:	110e5600 	call	8110e560 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
8110890c:	00006f06 	br	81108acc <vInAckHandlerTaskV2+0x34c>
                    	vFailGetMutexReceiverTask();
                    }
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
81108910:	110e4f80 	call	8110e4f8 <vFailGetCountSemaphoreReceiverTask>
                }
                break;
81108914:	00006d06 	br	81108acc <vInAckHandlerTaskV2+0x34c>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */
                
                ucHashVerification = 0;
81108918:	e03ffa85 	stb	zero,-22(fp)
                ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);
8110891c:	d0a05583 	ldbu	r2,-32426(gp)
81108920:	10803fcc 	andi	r2,r2,255
81108924:	10800218 	cmpnei	r2,r2,8
81108928:	1000021e 	bne	r2,zero,81108934 <vInAckHandlerTaskV2+0x1b4>
8110892c:	00c00104 	movi	r3,4
81108930:	00000106 	br	81108938 <vInAckHandlerTaskV2+0x1b8>
81108934:	0007883a 	mov	r3,zero
81108938:	d0a05e03 	ldbu	r2,-32392(gp)
8110893c:	10803fcc 	andi	r2,r2,255
81108940:	10800218 	cmpnei	r2,r2,8
81108944:	1000021e 	bne	r2,zero,81108950 <vInAckHandlerTaskV2+0x1d0>
81108948:	00800084 	movi	r2,2
8110894c:	00000106 	br	81108954 <vInAckHandlerTaskV2+0x1d4>
81108950:	0005883a 	mov	r2,zero
81108954:	1884b03a 	or	r2,r3,r2
81108958:	1007883a 	mov	r3,r2
8110895c:	d0a05e43 	ldbu	r2,-32391(gp)
81108960:	10803fcc 	andi	r2,r2,255
81108964:	108001a0 	cmpeqi	r2,r2,6
81108968:	1884b03a 	or	r2,r3,r2
8110896c:	1007883a 	mov	r3,r2
81108970:	e0bffa83 	ldbu	r2,-22(fp)
81108974:	1884b03a 	or	r2,r3,r2
81108978:	e0bffa85 	stb	r2,-22(fp)

                bFound = FALSE;
8110897c:	e03ff815 	stw	zero,-32(fp)
                bFinished32=FALSE;
81108980:	e03ffb15 	stw	zero,-20(fp)
                bFinished64=FALSE;
81108984:	e03ffc15 	stw	zero,-16(fp)
                bFinished128=FALSE;
81108988:	e03ffd15 	stw	zero,-12(fp)
                ucCountRetries = 0;
8110898c:	e03ffa05 	stb	zero,-24(fp)
                do
                {
                    ucCountRetries++;
81108990:	e0bffa03 	ldbu	r2,-24(fp)
81108994:	10800044 	addi	r2,r2,1
81108998:	e0bffa05 	stb	r2,-24(fp)

                    /* There are any spot used in the xBuffer128? */
                    if ( 0b00000001 != (0b00000001 & ucHashVerification ) )
8110899c:	e0bffa83 	ldbu	r2,-22(fp)
811089a0:	1080004c 	andi	r2,r2,1
811089a4:	10803fcc 	andi	r2,r2,255
811089a8:	1000061e 	bne	r2,zero,811089c4 <vInAckHandlerTaskV2+0x244>
                        bFound = bCheckInAck128( &xRAckLocal, &bFinished128  );
811089ac:	e0bffd04 	addi	r2,fp,-12
811089b0:	100b883a 	mov	r5,r2
811089b4:	d1204884 	addi	r4,gp,-32478
811089b8:	1108ad00 	call	81108ad0 <bCheckInAck128>
811089bc:	e0bff815 	stw	r2,-32(fp)
811089c0:	00000206 	br	811089cc <vInAckHandlerTaskV2+0x24c>
                    else
                        bFinished128 = TRUE;
811089c4:	00800044 	movi	r2,1
811089c8:	e0bffd15 	stw	r2,-12(fp)

                    /* There are any spot used in the xBuffer64? */
                    if ( (0b00000010 != (0b00000010 & ucHashVerification )) && (bFound ==FALSE ) )
811089cc:	e0bffa83 	ldbu	r2,-22(fp)
811089d0:	1080008c 	andi	r2,r2,2
811089d4:	10803fcc 	andi	r2,r2,255
811089d8:	1000081e 	bne	r2,zero,811089fc <vInAckHandlerTaskV2+0x27c>
811089dc:	e0bff817 	ldw	r2,-32(fp)
811089e0:	1000061e 	bne	r2,zero,811089fc <vInAckHandlerTaskV2+0x27c>
                        bFound = bCheckInAck64( &xRAckLocal, &bFinished64 );
811089e4:	e0bffc04 	addi	r2,fp,-16
811089e8:	100b883a 	mov	r5,r2
811089ec:	d1204884 	addi	r4,gp,-32478
811089f0:	1108c180 	call	81108c18 <bCheckInAck64>
811089f4:	e0bff815 	stw	r2,-32(fp)
811089f8:	00000206 	br	81108a04 <vInAckHandlerTaskV2+0x284>
                    else
                        bFinished64 = TRUE;
811089fc:	00800044 	movi	r2,1
81108a00:	e0bffc15 	stw	r2,-16(fp)

                    /* There are any spot used in the xBuffer32? */
                    if ( (0b00000100 != (0b00000100 & ucHashVerification ) ) && (bFound ==FALSE ) )
81108a04:	e0bffa83 	ldbu	r2,-22(fp)
81108a08:	1080010c 	andi	r2,r2,4
81108a0c:	10803fcc 	andi	r2,r2,255
81108a10:	1000081e 	bne	r2,zero,81108a34 <vInAckHandlerTaskV2+0x2b4>
81108a14:	e0bff817 	ldw	r2,-32(fp)
81108a18:	1000061e 	bne	r2,zero,81108a34 <vInAckHandlerTaskV2+0x2b4>
                        bFound = bCheckInAck32( &xRAckLocal, &bFinished32  );
81108a1c:	e0bffb04 	addi	r2,fp,-20
81108a20:	100b883a 	mov	r5,r2
81108a24:	d1204884 	addi	r4,gp,-32478
81108a28:	1108d640 	call	81108d64 <bCheckInAck32>
81108a2c:	e0bff815 	stw	r2,-32(fp)
81108a30:	00000206 	br	81108a3c <vInAckHandlerTaskV2+0x2bc>
                    else
                        bFinished32 = TRUE;
81108a34:	00800044 	movi	r2,1
81108a38:	e0bffb15 	stw	r2,-20(fp)

                } while ( ((ucCountRetries++ < MAX_RETRIES_ACK_IN) && (bFound == FALSE) && ((bFinished32 == FALSE) | (bFinished64 == FALSE) | (bFinished128 == FALSE))) );
81108a3c:	e0bffa03 	ldbu	r2,-24(fp)
81108a40:	10c00044 	addi	r3,r2,1
81108a44:	e0fffa05 	stb	r3,-24(fp)
81108a48:	10803fcc 	andi	r2,r2,255
81108a4c:	10800ca8 	cmpgeui	r2,r2,50
81108a50:	10000e1e 	bne	r2,zero,81108a8c <vInAckHandlerTaskV2+0x30c>
81108a54:	e0bff817 	ldw	r2,-32(fp)
81108a58:	10000c1e 	bne	r2,zero,81108a8c <vInAckHandlerTaskV2+0x30c>
81108a5c:	e0bffb17 	ldw	r2,-20(fp)
81108a60:	1005003a 	cmpeq	r2,r2,zero
81108a64:	1007883a 	mov	r3,r2
81108a68:	e0bffc17 	ldw	r2,-16(fp)
81108a6c:	1005003a 	cmpeq	r2,r2,zero
81108a70:	1884b03a 	or	r2,r3,r2
81108a74:	10c03fcc 	andi	r3,r2,255
81108a78:	e0bffd17 	ldw	r2,-12(fp)
81108a7c:	1005003a 	cmpeq	r2,r2,zero
81108a80:	10803fcc 	andi	r2,r2,255
81108a84:	1884b03a 	or	r2,r3,r2
81108a88:	103fc11e 	bne	r2,zero,81108990 <__reset+0xfb0e8990>
                
                if (bFound == FALSE) {
81108a8c:	e0bff817 	ldw	r2,-32(fp)
81108a90:	1000011e 	bne	r2,zero,81108a98 <vInAckHandlerTaskV2+0x318>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81108a94:	110ea1c0 	call	8110ea1c <vFailFoundBufferRetransmission>
                }

                eReceiverAckState = sRAGettingACK;
81108a98:	00800044 	movi	r2,1
81108a9c:	e0bff915 	stw	r2,-28(fp)
				break;
81108aa0:	00000a06 	br	81108acc <vInAckHandlerTaskV2+0x34c>
			default:
                #ifdef DEBUG_ON
		            debug(fp,"Critical: Default State. Should never get here.(vInAckHandlerTaskV2)\n");
81108aa4:	d0a04f17 	ldw	r2,-32452(gp)
81108aa8:	100f883a 	mov	r7,r2
81108aac:	01801144 	movi	r6,69
81108ab0:	01400044 	movi	r5,1
81108ab4:	01204534 	movhi	r4,33044
81108ab8:	21371904 	addi	r4,r4,-9116
81108abc:	11124700 	call	81112470 <fwrite>
	            #endif
                eReceiverAckState = sRAGettingACK;
81108ac0:	00800044 	movi	r2,1
81108ac4:	e0bff915 	stw	r2,-28(fp)
				break;
81108ac8:	0001883a 	nop
		}
	}
81108acc:	003f4206 	br	811087d8 <__reset+0xfb0e87d8>

81108ad0 <bCheckInAck128>:
}


bool bCheckInAck128( txReceivedACK *xRecAckL , bool *bFinished ) {
81108ad0:	defffa04 	addi	sp,sp,-24
81108ad4:	de00012e 	bgeu	sp,et,81108adc <bCheckInAck128+0xc>
81108ad8:	003b68fa 	trap	3
81108adc:	dfc00515 	stw	ra,20(sp)
81108ae0:	df000415 	stw	fp,16(sp)
81108ae4:	df000404 	addi	fp,sp,16
81108ae8:	e13ffe15 	stw	r4,-8(fp)
81108aec:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81108af0:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81108af4:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81108af8:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81108afc:	e0bfff17 	ldw	r2,-4(fp)
81108b00:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer128, 5, &error_code); /* Mas wait 1 tick = 1 ms */
81108b04:	d0a05917 	ldw	r2,-32412(gp)
81108b08:	e0fffd44 	addi	r3,fp,-11
81108b0c:	180d883a 	mov	r6,r3
81108b10:	01400144 	movi	r5,5
81108b14:	1009883a 	mov	r4,r2
81108b18:	112df680 	call	8112df68 <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81108b1c:	e0bffd43 	ldbu	r2,-11(fp)
81108b20:	10803fcc 	andi	r2,r2,255
81108b24:	10000226 	beq	r2,zero,81108b30 <bCheckInAck128+0x60>
        return bFound;
81108b28:	e0bffc17 	ldw	r2,-16(fp)
81108b2c:	00003506 	br	81108c04 <bCheckInAck128+0x134>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_128; ucIL++)
81108b30:	e03ffd05 	stb	zero,-12(fp)
81108b34:	00002706 	br	81108bd4 <bCheckInAck128+0x104>
    {
        if ( xBuffer128[ucIL].usiId == xRecAckL->usiId ) {
81108b38:	e0fffd03 	ldbu	r3,-12(fp)
81108b3c:	00a04574 	movhi	r2,33045
81108b40:	10a98304 	addi	r2,r2,-23028
81108b44:	18c02324 	muli	r3,r3,140
81108b48:	10c5883a 	add	r2,r2,r3
81108b4c:	10802104 	addi	r2,r2,132
81108b50:	10c0000b 	ldhu	r3,0(r2)
81108b54:	e0bffe17 	ldw	r2,-8(fp)
81108b58:	1080008b 	ldhu	r2,2(r2)
81108b5c:	18ffffcc 	andi	r3,r3,65535
81108b60:	10bfffcc 	andi	r2,r2,65535
81108b64:	1880181e 	bne	r3,r2,81108bc8 <bCheckInAck128+0xf8>
            bFound = TRUE;
81108b68:	00800044 	movi	r2,1
81108b6c:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b128[ucIL] = FALSE;
81108b70:	e0fffd03 	ldbu	r3,-12(fp)
81108b74:	00a04574 	movhi	r2,33045
81108b78:	10a96d04 	addi	r2,r2,-23116
81108b7c:	18c7883a 	add	r3,r3,r3
81108b80:	18c7883a 	add	r3,r3,r3
81108b84:	10c5883a 	add	r2,r2,r3
81108b88:	10000015 	stw	zero,0(r2)
            SemCount128++;
81108b8c:	d0a05e43 	ldbu	r2,-32391(gp)
81108b90:	10800044 	addi	r2,r2,1
81108b94:	d0a05e45 	stb	r2,-32391(gp)
            error_code = OSSemPost(xSemCountBuffer128);
81108b98:	d0a05017 	ldw	r2,-32448(gp)
81108b9c:	1009883a 	mov	r4,r2
81108ba0:	11302fc0 	call	811302fc <OSSemPost>
81108ba4:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81108ba8:	e0bffd43 	ldbu	r2,-11(fp)
81108bac:	10803fcc 	andi	r2,r2,255
81108bb0:	10000c26 	beq	r2,zero,81108be4 <bCheckInAck128+0x114>
                SemCount128--;
81108bb4:	d0a05e43 	ldbu	r2,-32391(gp)
81108bb8:	10bfffc4 	addi	r2,r2,-1
81108bbc:	d0a05e45 	stb	r2,-32391(gp)
                vFailSetCountSemaphorexBuffer128();
81108bc0:	110e87c0 	call	8110e87c <vFailSetCountSemaphorexBuffer128>
            }
            break;
81108bc4:	00000706 	br	81108be4 <bCheckInAck128+0x114>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_128; ucIL++)
81108bc8:	e0bffd03 	ldbu	r2,-12(fp)
81108bcc:	10800044 	addi	r2,r2,1
81108bd0:	e0bffd05 	stb	r2,-12(fp)
81108bd4:	e0bffd03 	ldbu	r2,-12(fp)
81108bd8:	108001b0 	cmpltui	r2,r2,6
81108bdc:	103fd61e 	bne	r2,zero,81108b38 <__reset+0xfb0e8b38>
81108be0:	00000106 	br	81108be8 <bCheckInAck128+0x118>
            error_code = OSSemPost(xSemCountBuffer128);
            if ( error_code != OS_ERR_NONE ) {
                SemCount128--;
                vFailSetCountSemaphorexBuffer128();
            }
            break;
81108be4:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81108be8:	d0a05917 	ldw	r2,-32412(gp)
81108bec:	1009883a 	mov	r4,r2
81108bf0:	112e50c0 	call	8112e50c <OSMutexPost>
    (*bFinished) = TRUE;
81108bf4:	e0bfff17 	ldw	r2,-4(fp)
81108bf8:	00c00044 	movi	r3,1
81108bfc:	10c00015 	stw	r3,0(r2)

    return bFound;
81108c00:	e0bffc17 	ldw	r2,-16(fp)
}
81108c04:	e037883a 	mov	sp,fp
81108c08:	dfc00117 	ldw	ra,4(sp)
81108c0c:	df000017 	ldw	fp,0(sp)
81108c10:	dec00204 	addi	sp,sp,8
81108c14:	f800283a 	ret

81108c18 <bCheckInAck64>:


bool bCheckInAck64( txReceivedACK *xRecAckL , bool *bFinished ) {
81108c18:	defffa04 	addi	sp,sp,-24
81108c1c:	de00012e 	bgeu	sp,et,81108c24 <bCheckInAck64+0xc>
81108c20:	003b68fa 	trap	3
81108c24:	dfc00515 	stw	ra,20(sp)
81108c28:	df000415 	stw	fp,16(sp)
81108c2c:	df000404 	addi	fp,sp,16
81108c30:	e13ffe15 	stw	r4,-8(fp)
81108c34:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81108c38:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81108c3c:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81108c40:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81108c44:	e0bfff17 	ldw	r2,-4(fp)
81108c48:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer64, 1, &error_code); /* Mas wait 1 tick = 1 ms */
81108c4c:	d0a05b17 	ldw	r2,-32404(gp)
81108c50:	e0fffd44 	addi	r3,fp,-11
81108c54:	180d883a 	mov	r6,r3
81108c58:	01400044 	movi	r5,1
81108c5c:	1009883a 	mov	r4,r2
81108c60:	112df680 	call	8112df68 <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81108c64:	e0bffd43 	ldbu	r2,-11(fp)
81108c68:	10803fcc 	andi	r2,r2,255
81108c6c:	10000226 	beq	r2,zero,81108c78 <bCheckInAck64+0x60>
        return bFound;
81108c70:	e0bffc17 	ldw	r2,-16(fp)
81108c74:	00003606 	br	81108d50 <bCheckInAck64+0x138>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_64; ucIL++)
81108c78:	e03ffd05 	stb	zero,-12(fp)
81108c7c:	00002806 	br	81108d20 <bCheckInAck64+0x108>
    {
        if ( xBuffer64[ucIL].usiId == xRecAckL->usiId ) {
81108c80:	e0fffd03 	ldbu	r3,-12(fp)
81108c84:	00a04534 	movhi	r2,33044
81108c88:	108f6604 	addi	r2,r2,15768
81108c8c:	18c01324 	muli	r3,r3,76
81108c90:	10c5883a 	add	r2,r2,r3
81108c94:	10801104 	addi	r2,r2,68
81108c98:	10c0000b 	ldhu	r3,0(r2)
81108c9c:	e0bffe17 	ldw	r2,-8(fp)
81108ca0:	1080008b 	ldhu	r2,2(r2)
81108ca4:	18ffffcc 	andi	r3,r3,65535
81108ca8:	10bfffcc 	andi	r2,r2,65535
81108cac:	1880191e 	bne	r3,r2,81108d14 <bCheckInAck64+0xfc>
            bFound = TRUE;
81108cb0:	00800044 	movi	r2,1
81108cb4:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b64[ucIL] = FALSE;
81108cb8:	e0fffd03 	ldbu	r3,-12(fp)
81108cbc:	00a04574 	movhi	r2,33045
81108cc0:	10a96d04 	addi	r2,r2,-23116
81108cc4:	18c00184 	addi	r3,r3,6
81108cc8:	18c7883a 	add	r3,r3,r3
81108ccc:	18c7883a 	add	r3,r3,r3
81108cd0:	10c5883a 	add	r2,r2,r3
81108cd4:	10000015 	stw	zero,0(r2)
            SemCount64++;
81108cd8:	d0a05e03 	ldbu	r2,-32392(gp)
81108cdc:	10800044 	addi	r2,r2,1
81108ce0:	d0a05e05 	stb	r2,-32392(gp)
            error_code = OSSemPost(xSemCountBuffer64);
81108ce4:	d0a04c17 	ldw	r2,-32464(gp)
81108ce8:	1009883a 	mov	r4,r2
81108cec:	11302fc0 	call	811302fc <OSSemPost>
81108cf0:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81108cf4:	e0bffd43 	ldbu	r2,-11(fp)
81108cf8:	10803fcc 	andi	r2,r2,255
81108cfc:	10000c26 	beq	r2,zero,81108d30 <bCheckInAck64+0x118>
                SemCount64--;
81108d00:	d0a05e03 	ldbu	r2,-32392(gp)
81108d04:	10bfffc4 	addi	r2,r2,-1
81108d08:	d0a05e05 	stb	r2,-32392(gp)
                vFailSetCountSemaphorexBuffer64();
81108d0c:	110e8140 	call	8110e814 <vFailSetCountSemaphorexBuffer64>
            }
            break;
81108d10:	00000706 	br	81108d30 <bCheckInAck64+0x118>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_64; ucIL++)
81108d14:	e0bffd03 	ldbu	r2,-12(fp)
81108d18:	10800044 	addi	r2,r2,1
81108d1c:	e0bffd05 	stb	r2,-12(fp)
81108d20:	e0bffd03 	ldbu	r2,-12(fp)
81108d24:	10800230 	cmpltui	r2,r2,8
81108d28:	103fd51e 	bne	r2,zero,81108c80 <__reset+0xfb0e8c80>
81108d2c:	00000106 	br	81108d34 <bCheckInAck64+0x11c>
            error_code = OSSemPost(xSemCountBuffer64);
            if ( error_code != OS_ERR_NONE ) {
                SemCount64--;
                vFailSetCountSemaphorexBuffer64();
            }
            break;
81108d30:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer128*/
81108d34:	d0a05b17 	ldw	r2,-32404(gp)
81108d38:	1009883a 	mov	r4,r2
81108d3c:	112e50c0 	call	8112e50c <OSMutexPost>
    (*bFinished) = TRUE;
81108d40:	e0bfff17 	ldw	r2,-4(fp)
81108d44:	00c00044 	movi	r3,1
81108d48:	10c00015 	stw	r3,0(r2)

    return bFound;
81108d4c:	e0bffc17 	ldw	r2,-16(fp)
}
81108d50:	e037883a 	mov	sp,fp
81108d54:	dfc00117 	ldw	ra,4(sp)
81108d58:	df000017 	ldw	fp,0(sp)
81108d5c:	dec00204 	addi	sp,sp,8
81108d60:	f800283a 	ret

81108d64 <bCheckInAck32>:



bool bCheckInAck32( txReceivedACK *xRecAckL , bool *bFinished ) {
81108d64:	defffa04 	addi	sp,sp,-24
81108d68:	de00012e 	bgeu	sp,et,81108d70 <bCheckInAck32+0xc>
81108d6c:	003b68fa 	trap	3
81108d70:	dfc00515 	stw	ra,20(sp)
81108d74:	df000415 	stw	fp,16(sp)
81108d78:	df000404 	addi	fp,sp,16
81108d7c:	e13ffe15 	stw	r4,-8(fp)
81108d80:	e17fff15 	stw	r5,-4(fp)
	bool bFound = FALSE;
81108d84:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    unsigned char ucIL = 0;
81108d88:	e03ffd05 	stb	zero,-12(fp)

    bFound = FALSE;
81108d8c:	e03ffc15 	stw	zero,-16(fp)
    *bFinished = FALSE;
81108d90:	e0bfff17 	ldw	r2,-4(fp)
81108d94:	10000015 	stw	zero,0(r2)
    OSMutexPend(xMutexBuffer32, 1, &error_code); /* Mas wait 1 tick = 1 ms */
81108d98:	d0a05717 	ldw	r2,-32420(gp)
81108d9c:	e0fffd44 	addi	r3,fp,-11
81108da0:	180d883a 	mov	r6,r3
81108da4:	01400044 	movi	r5,1
81108da8:	1009883a 	mov	r4,r2
81108dac:	112df680 	call	8112df68 <OSMutexPend>
    if ( error_code != OS_NO_ERR )
81108db0:	e0bffd43 	ldbu	r2,-11(fp)
81108db4:	10803fcc 	andi	r2,r2,255
81108db8:	10000226 	beq	r2,zero,81108dc4 <bCheckInAck32+0x60>
        return bFound;
81108dbc:	e0bffc17 	ldw	r2,-16(fp)
81108dc0:	00003606 	br	81108e9c <bCheckInAck32+0x138>

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_32; ucIL++)
81108dc4:	e03ffd05 	stb	zero,-12(fp)
81108dc8:	00002806 	br	81108e6c <bCheckInAck32+0x108>
    {
        if ( xBuffer32[ucIL].usiId == xRecAckL->usiId ) {
81108dcc:	e0fffd03 	ldbu	r3,-12(fp)
81108dd0:	00a04534 	movhi	r2,33044
81108dd4:	10991504 	addi	r2,r2,25684
81108dd8:	18c00b24 	muli	r3,r3,44
81108ddc:	10c5883a 	add	r2,r2,r3
81108de0:	10800904 	addi	r2,r2,36
81108de4:	10c0000b 	ldhu	r3,0(r2)
81108de8:	e0bffe17 	ldw	r2,-8(fp)
81108dec:	1080008b 	ldhu	r2,2(r2)
81108df0:	18ffffcc 	andi	r3,r3,65535
81108df4:	10bfffcc 	andi	r2,r2,65535
81108df8:	1880191e 	bne	r3,r2,81108e60 <bCheckInAck32+0xfc>
            bFound = TRUE;
81108dfc:	00800044 	movi	r2,1
81108e00:	e0bffc15 	stw	r2,-16(fp)
            /* Free the slot with the index ucIL */
            xInUseRetrans.b32[ucIL] = FALSE;
81108e04:	e0fffd03 	ldbu	r3,-12(fp)
81108e08:	00a04574 	movhi	r2,33045
81108e0c:	10a96d04 	addi	r2,r2,-23116
81108e10:	18c00384 	addi	r3,r3,14
81108e14:	18c7883a 	add	r3,r3,r3
81108e18:	18c7883a 	add	r3,r3,r3
81108e1c:	10c5883a 	add	r2,r2,r3
81108e20:	10000015 	stw	zero,0(r2)
            SemCount32++;
81108e24:	d0a05583 	ldbu	r2,-32426(gp)
81108e28:	10800044 	addi	r2,r2,1
81108e2c:	d0a05585 	stb	r2,-32426(gp)
            error_code = OSSemPost(xSemCountBuffer32);
81108e30:	d0a05a17 	ldw	r2,-32408(gp)
81108e34:	1009883a 	mov	r4,r2
81108e38:	11302fc0 	call	811302fc <OSSemPost>
81108e3c:	e0bffd45 	stb	r2,-11(fp)
            if ( error_code != OS_ERR_NONE ) {
81108e40:	e0bffd43 	ldbu	r2,-11(fp)
81108e44:	10803fcc 	andi	r2,r2,255
81108e48:	10000c26 	beq	r2,zero,81108e7c <bCheckInAck32+0x118>
                SemCount32--;
81108e4c:	d0a05583 	ldbu	r2,-32426(gp)
81108e50:	10bfffc4 	addi	r2,r2,-1
81108e54:	d0a05585 	stb	r2,-32426(gp)
                vFailSetCountSemaphorexBuffer32();
81108e58:	110e7ac0 	call	8110e7ac <vFailSetCountSemaphorexBuffer32>
            }
            break;
81108e5c:	00000706 	br	81108e7c <bCheckInAck32+0x118>
    if ( error_code != OS_NO_ERR )
        return bFound;

    /* ---> At this point we have access to xBuffer128 */

    for(ucIL = 0; ucIL < N_32; ucIL++)
81108e60:	e0bffd03 	ldbu	r2,-12(fp)
81108e64:	10800044 	addi	r2,r2,1
81108e68:	e0bffd05 	stb	r2,-12(fp)
81108e6c:	e0bffd03 	ldbu	r2,-12(fp)
81108e70:	10800230 	cmpltui	r2,r2,8
81108e74:	103fd51e 	bne	r2,zero,81108dcc <__reset+0xfb0e8dcc>
81108e78:	00000106 	br	81108e80 <bCheckInAck32+0x11c>
            error_code = OSSemPost(xSemCountBuffer32);
            if ( error_code != OS_ERR_NONE ) {
                SemCount32--;
                vFailSetCountSemaphorexBuffer32();
            }
            break;
81108e7c:	0001883a 	nop
        }
    }
    OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xMutexBuffer32*/
81108e80:	d0a05717 	ldw	r2,-32420(gp)
81108e84:	1009883a 	mov	r4,r2
81108e88:	112e50c0 	call	8112e50c <OSMutexPost>
    (*bFinished) = TRUE;
81108e8c:	e0bfff17 	ldw	r2,-4(fp)
81108e90:	00c00044 	movi	r3,1
81108e94:	10c00015 	stw	r3,0(r2)

    return bFound;
81108e98:	e0bffc17 	ldw	r2,-16(fp)
}
81108e9c:	e037883a 	mov	sp,fp
81108ea0:	dfc00117 	ldw	ra,4(sp)
81108ea4:	df000017 	ldw	fp,0(sp)
81108ea8:	dec00204 	addi	sp,sp,8
81108eac:	f800283a 	ret

81108eb0 <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81108eb0:	defff704 	addi	sp,sp,-36
81108eb4:	de00012e 	bgeu	sp,et,81108ebc <vInitialTask+0xc>
81108eb8:	003b68fa 	trap	3
81108ebc:	dfc00815 	stw	ra,32(sp)
81108ec0:	df000715 	stw	fp,28(sp)
81108ec4:	df000704 	addi	fp,sp,28
81108ec8:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81108ecc:	e03ffe05 	stb	zero,-8(fp)
									vTimeoutCheckerTask_stk,
									TIMEOUT_CHECKER_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vTimeoutCheckerTaskv2,
81108ed0:	d8000415 	stw	zero,16(sp)
81108ed4:	d8000315 	stw	zero,12(sp)
81108ed8:	00810004 	movi	r2,1024
81108edc:	d8800215 	stw	r2,8(sp)
81108ee0:	00a04534 	movhi	r2,33044
81108ee4:	10951504 	addi	r2,r2,21588
81108ee8:	d8800115 	stw	r2,4(sp)
81108eec:	00800704 	movi	r2,28
81108ef0:	d8800015 	stw	r2,0(sp)
81108ef4:	01c00704 	movi	r7,28
81108ef8:	01a04534 	movhi	r6,33044
81108efc:	31991404 	addi	r6,r6,25680
81108f00:	000b883a 	mov	r5,zero
81108f04:	01204474 	movhi	r4,33041
81108f08:	212bea04 	addi	r4,r4,-20568
81108f0c:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
81108f10:	e0bffe05 	stb	r2,-8(fp)
									TIMEOUT_CHECKER_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
81108f14:	e0bffe03 	ldbu	r2,-8(fp)
81108f18:	10803fcc 	andi	r2,r2,255
81108f1c:	10000526 	beq	r2,zero,81108f34 <vInitialTask+0x84>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108f20:	e0bffe03 	ldbu	r2,-8(fp)
81108f24:	10803fcc 	andi	r2,r2,255
81108f28:	1009883a 	mov	r4,r2
81108f2c:	110e1740 	call	8110e174 <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
81108f30:	110ef400 	call	8110ef40 <vFailTimeoutCheckerTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
81108f34:	01c00044 	movi	r7,1
81108f38:	000d883a 	mov	r6,zero
81108f3c:	000b883a 	mov	r5,zero
81108f40:	0009883a 	mov	r4,zero
81108f44:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>
									vOutAckHandlerTask_stk,
									OUT_ACK_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81108f48:	d8000415 	stw	zero,16(sp)
81108f4c:	d8000315 	stw	zero,12(sp)
81108f50:	00810004 	movi	r2,1024
81108f54:	d8800215 	stw	r2,8(sp)
81108f58:	00a04534 	movhi	r2,33044
81108f5c:	109d6d04 	addi	r2,r2,30132
81108f60:	d8800115 	stw	r2,4(sp)
81108f64:	00800644 	movi	r2,25
81108f68:	d8800015 	stw	r2,0(sp)
81108f6c:	01c00644 	movi	r7,25
81108f70:	01a04574 	movhi	r6,33045
81108f74:	31a16c04 	addi	r6,r6,-31312
81108f78:	000b883a 	mov	r5,zero
81108f7c:	01204474 	movhi	r4,33041
81108f80:	21249104 	addi	r4,r4,-28092
81108f84:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
81108f88:	e0bffe05 	stb	r2,-8(fp)
									OUT_ACK_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
81108f8c:	e0bffe03 	ldbu	r2,-8(fp)
81108f90:	10803fcc 	andi	r2,r2,255
81108f94:	10000526 	beq	r2,zero,81108fac <vInitialTask+0xfc>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108f98:	e0bffe03 	ldbu	r2,-8(fp)
81108f9c:	10803fcc 	andi	r2,r2,255
81108fa0:	1009883a 	mov	r4,r2
81108fa4:	110e1740 	call	8110e174 <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81108fa8:	110ee5c0 	call	8110ee5c <vFailOutAckHandlerTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
81108fac:	01c00044 	movi	r7,1
81108fb0:	000d883a 	mov	r6,zero
81108fb4:	000b883a 	mov	r5,zero
81108fb8:	0009883a 	mov	r4,zero
81108fbc:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>
									vInAckHandlerTask_stk,
									IN_ACK_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vInAckHandlerTaskV2,
81108fc0:	d8000415 	stw	zero,16(sp)
81108fc4:	d8000315 	stw	zero,12(sp)
81108fc8:	00810004 	movi	r2,1024
81108fcc:	d8800215 	stw	r2,8(sp)
81108fd0:	00a04534 	movhi	r2,33044
81108fd4:	108b6604 	addi	r2,r2,11672
81108fd8:	d8800115 	stw	r2,4(sp)
81108fdc:	008005c4 	movi	r2,23
81108fe0:	d8800015 	stw	r2,0(sp)
81108fe4:	01c005c4 	movi	r7,23
81108fe8:	01a04534 	movhi	r6,33044
81108fec:	318f6504 	addi	r6,r6,15764
81108ff0:	000b883a 	mov	r5,zero
81108ff4:	01204474 	movhi	r4,33041
81108ff8:	2121e004 	addi	r4,r4,-30848
81108ffc:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
81109000:	e0bffe05 	stb	r2,-8(fp)
									IN_ACK_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
81109004:	e0bffe03 	ldbu	r2,-8(fp)
81109008:	10803fcc 	andi	r2,r2,255
8110900c:	10000526 	beq	r2,zero,81109024 <vInitialTask+0x174>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81109010:	e0bffe03 	ldbu	r2,-8(fp)
81109014:	10803fcc 	andi	r2,r2,255
81109018:	1009883a 	mov	r4,r2
8110901c:	110e1740 	call	8110e174 <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81109020:	110ee100 	call	8110ee10 <vFailInAckHandlerTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
81109024:	01c00044 	movi	r7,1
81109028:	000d883a 	mov	r6,zero
8110902c:	000b883a 	mov	r5,zero
81109030:	0009883a 	mov	r4,zero
81109034:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>
									vParserCommTask_stk,
									PARSER_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CHK + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vParserCommTask,
81109038:	d8000415 	stw	zero,16(sp)
8110903c:	d8000315 	stw	zero,12(sp)
81109040:	00810004 	movi	r2,1024
81109044:	d8800215 	stw	r2,8(sp)
81109048:	00a04574 	movhi	r2,33045
8110904c:	10aa5b04 	addi	r2,r2,-22164
81109050:	d8800115 	stw	r2,4(sp)
81109054:	00800684 	movi	r2,26
81109058:	d8800015 	stw	r2,0(sp)
8110905c:	01c00684 	movi	r7,26
81109060:	01a04574 	movhi	r6,33045
81109064:	31ae5a04 	addi	r6,r6,-18072
81109068:	000b883a 	mov	r5,zero
8110906c:	01204474 	movhi	r4,33041
81109070:	21254f04 	addi	r4,r4,-27332
81109074:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
81109078:	e0bffe05 	stb	r2,-8(fp)
									PARSER_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
8110907c:	e0bffe03 	ldbu	r2,-8(fp)
81109080:	10803fcc 	andi	r2,r2,255
81109084:	10000526 	beq	r2,zero,8110909c <vInitialTask+0x1ec>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81109088:	e0bffe03 	ldbu	r2,-8(fp)
8110908c:	10803fcc 	andi	r2,r2,255
81109090:	1009883a 	mov	r4,r2
81109094:	110e1740 	call	8110e174 <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
81109098:	110edc40 	call	8110edc4 <vFailParserCommTaskCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
8110909c:	01c00044 	movi	r7,1
811090a0:	000d883a 	mov	r6,zero
811090a4:	000b883a 	mov	r5,zero
811090a8:	0009883a 	mov	r4,zero
811090ac:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>
									vReceiverUartTask_stk,
									RECEIVER_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CHK + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vReceiverUartTask,
811090b0:	d8000415 	stw	zero,16(sp)
811090b4:	d8000315 	stw	zero,12(sp)
811090b8:	00810004 	movi	r2,1024
811090bc:	d8800215 	stw	r2,8(sp)
811090c0:	00a04534 	movhi	r2,33044
811090c4:	10996d04 	addi	r2,r2,26036
811090c8:	d8800115 	stw	r2,4(sp)
811090cc:	00800784 	movi	r2,30
811090d0:	d8800015 	stw	r2,0(sp)
811090d4:	01c00784 	movi	r7,30
811090d8:	01a04534 	movhi	r6,33044
811090dc:	319d6c04 	addi	r6,r6,30128
811090e0:	000b883a 	mov	r5,zero
811090e4:	01204474 	movhi	r4,33041
811090e8:	21282804 	addi	r4,r4,-24416
811090ec:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
811090f0:	e0bffe05 	stb	r2,-8(fp)
									RECEIVER_TASK_SIZE,
									NULL,
									0);
	#endif

	if ( error_code != OS_ERR_NONE) {
811090f4:	e0bffe03 	ldbu	r2,-8(fp)
811090f8:	10803fcc 	andi	r2,r2,255
811090fc:	10000526 	beq	r2,zero,81109114 <vInitialTask+0x264>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81109100:	e0bffe03 	ldbu	r2,-8(fp)
81109104:	10803fcc 	andi	r2,r2,255
81109108:	1009883a 	mov	r4,r2
8110910c:	110e1740 	call	8110e174 <printErrorTask>
		#endif
		vFailReceiverCreate();
81109110:	110e6c80 	call	8110e6c8 <vFailReceiverCreate>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
81109114:	01c00044 	movi	r7,1
81109118:	000d883a 	mov	r6,zero
8110911c:	000b883a 	mov	r5,zero
81109120:	0009883a 	mov	r4,zero
81109124:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>
									senderTask_stk,
									SENDER_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK);
	#else
		error_code = OSTaskCreateExt(vSenderComTask,
81109128:	d8000415 	stw	zero,16(sp)
8110912c:	d8000315 	stw	zero,12(sp)
81109130:	00810004 	movi	r2,1024
81109134:	d8800215 	stw	r2,8(sp)
81109138:	00a04534 	movhi	r2,33044
8110913c:	108ffe04 	addi	r2,r2,16376
81109140:	d8800115 	stw	r2,4(sp)
81109144:	00800604 	movi	r2,24
81109148:	d8800015 	stw	r2,0(sp)
8110914c:	01c00604 	movi	r7,24
81109150:	01a04534 	movhi	r6,33044
81109154:	3193fd04 	addi	r6,r6,20468
81109158:	000b883a 	mov	r5,zero
8110915c:	01204474 	movhi	r4,33041
81109160:	212aaa04 	addi	r4,r4,-21848
81109164:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
81109168:	e0bffe05 	stb	r2,-8(fp)
									SENDER_TASK_SIZE,
									NULL,
									0);
	#endif

	OSTimeDlyHMSM(0, 0, 0, 1);
8110916c:	01c00044 	movi	r7,1
81109170:	000d883a 	mov	r6,zero
81109174:	000b883a 	mov	r5,zero
81109178:	0009883a 	mov	r4,zero
8110917c:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>





	if ( error_code != OS_ERR_NONE) {
81109180:	e0bffe03 	ldbu	r2,-8(fp)
81109184:	10803fcc 	andi	r2,r2,255
81109188:	10000526 	beq	r2,zero,811091a0 <vInitialTask+0x2f0>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
8110918c:	e0bffe03 	ldbu	r2,-8(fp)
81109190:	10803fcc 	andi	r2,r2,255
81109194:	1009883a 	mov	r4,r2
81109198:	110e1740 	call	8110e174 <printErrorTask>
		#endif
		vFailSenderCreate();
8110919c:	110e7140 	call	8110e714 <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
811091a0:	d0a05817 	ldw	r2,-32416(gp)
811091a4:	e17ffe04 	addi	r5,fp,-8
811091a8:	1009883a 	mov	r4,r2
811091ac:	1132a000 	call	81132a00 <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
811091b0:	e0bffe03 	ldbu	r2,-8(fp)
811091b4:	10803fcc 	andi	r2,r2,255
811091b8:	10000126 	beq	r2,zero,811091c0 <vInitialTask+0x310>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
811091bc:	110f1fc0 	call	8110f1fc <vFailStartTimerRetransmission>
	}


	OSTimeDlyHMSM(0, 0, 0, 1);
811091c0:	01c00044 	movi	r7,1
811091c4:	000d883a 	mov	r6,zero
811091c8:	000b883a 	mov	r5,zero
811091cc:	0009883a 	mov	r4,zero
811091d0:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>


	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
811091d4:	01003fc4 	movi	r4,255
811091d8:	1130ecc0 	call	81130ecc <OSTaskDel>
811091dc:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
811091e0:	e0bffe03 	ldbu	r2,-8(fp)
811091e4:	10803fcc 	andi	r2,r2,255
811091e8:	10001026 	beq	r2,zero,8110922c <vInitialTask+0x37c>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
811091ec:	e0bffe03 	ldbu	r2,-8(fp)
811091f0:	10803fcc 	andi	r2,r2,255
811091f4:	1009883a 	mov	r4,r2
811091f8:	110e1740 	call	8110e174 <printErrorTask>
		#endif
		vFailDeleteInitialization();
811091fc:	110e7600 	call	8110e760 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81109200:	014009c4 	movi	r5,39
81109204:	01000044 	movi	r4,1
81109208:	11306340 	call	81130634 <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
8110920c:	01003fc4 	movi	r4,255
81109210:	1130ecc0 	call	81130ecc <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81109214:	000f883a 	mov	r7,zero
81109218:	01800284 	movi	r6,10
8110921c:	000b883a 	mov	r5,zero
81109220:	0009883a 	mov	r4,zero
81109224:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>
		}
81109228:	003ff806 	br	8110920c <__reset+0xfb0e920c>
	}

}
8110922c:	0001883a 	nop
81109230:	e037883a 	mov	sp,fp
81109234:	dfc00117 	ldw	ra,4(sp)
81109238:	df000017 	ldw	fp,0(sp)
8110923c:	dec00204 	addi	sp,sp,8
81109240:	f800283a 	ret

81109244 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81109244:	defff704 	addi	sp,sp,-36
81109248:	de00012e 	bgeu	sp,et,81109250 <vOutAckHandlerTask+0xc>
8110924c:	003b68fa 	trap	3
81109250:	dfc00815 	stw	ra,32(sp)
81109254:	df000715 	stw	fp,28(sp)
81109258:	df000704 	addi	fp,sp,28
8110925c:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81109260:	e03ffac5 	stb	zero,-21(fp)
81109264:	e03ffb05 	stb	zero,-20(fp)
81109268:	e03ffb45 	stb	zero,-19(fp)
8110926c:	e03ffb85 	stb	zero,-18(fp)
81109270:	e03ffbc5 	stb	zero,-17(fp)
81109274:	e03ffc05 	stb	zero,-16(fp)
81109278:	e03ffc45 	stb	zero,-15(fp)
8110927c:	e03ffc85 	stb	zero,-14(fp)
81109280:	e03ffcc5 	stb	zero,-13(fp)
81109284:	e03ffd05 	stb	zero,-12(fp)
81109288:	e03ffd45 	stb	zero,-11(fp)
8110928c:	e03ffd85 	stb	zero,-10(fp)
81109290:	e03ffdc5 	stb	zero,-9(fp)
81109294:	e03ffe05 	stb	zero,-8(fp)
81109298:	e03ffe45 	stb	zero,-7(fp)
8110929c:	e03ffe85 	stb	zero,-6(fp)
    unsigned char crc = 0;
811092a0:	e03ffa45 	stb	zero,-23(fp)

	#ifdef DEBUG_ON
		debug(fp,"Out Ack Handler Task. (Task on)\n");
811092a4:	d0a04f17 	ldw	r2,-32452(gp)
811092a8:	100f883a 	mov	r7,r2
811092ac:	01800804 	movi	r6,32
811092b0:	01400044 	movi	r5,1
811092b4:	01204534 	movhi	r4,33044
811092b8:	21372b04 	addi	r4,r4,-9044
811092bc:	11124700 	call	81112470 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
811092c0:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
811092c4:	e0bff917 	ldw	r2,-28(fp)
811092c8:	10c00060 	cmpeqi	r3,r2,1
811092cc:	1800071e 	bne	r3,zero,811092ec <vOutAckHandlerTask+0xa8>
811092d0:	0080032e 	bgeu	zero,r2,811092e0 <vOutAckHandlerTask+0x9c>
811092d4:	108000a0 	cmpeqi	r2,r2,2
811092d8:	1000471e 	bne	r2,zero,811093f8 <vOutAckHandlerTask+0x1b4>
811092dc:	00008c06 	br	81109510 <vOutAckHandlerTask+0x2cc>
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
811092e0:	00800044 	movi	r2,1
811092e4:	e0bff915 	stw	r2,-28(fp)
				break;
811092e8:	00009306 	br	81109538 <vOutAckHandlerTask+0x2f4>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                eSenderAckState = sSAGettingACK;
811092ec:	00800044 	movi	r2,1
811092f0:	e0bff915 	stw	r2,-28(fp)
                OSSemPend(xSemCountSenderACK, 0, &error_code);
811092f4:	d0a04e17 	ldw	r2,-32456(gp)
811092f8:	e0fffa84 	addi	r3,fp,-22
811092fc:	180d883a 	mov	r6,r3
81109300:	000b883a 	mov	r5,zero
81109304:	1009883a 	mov	r4,r2
81109308:	112ff740 	call	8112ff74 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
8110930c:	e0bffa83 	ldbu	r2,-22(fp)
81109310:	10803fcc 	andi	r2,r2,255
81109314:	1000361e 	bne	r2,zero,811093f0 <vOutAckHandlerTask+0x1ac>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
81109318:	d0a05c17 	ldw	r2,-32400(gp)
8110931c:	e0fffa84 	addi	r3,fp,-22
81109320:	180d883a 	mov	r6,r3
81109324:	000b883a 	mov	r5,zero
81109328:	1009883a 	mov	r4,r2
8110932c:	112df680 	call	8112df68 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81109330:	e0bffa83 	ldbu	r2,-22(fp)
81109334:	10803fcc 	andi	r2,r2,255
81109338:	10002b1e 	bne	r2,zero,811093e8 <vOutAckHandlerTask+0x1a4>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
8110933c:	e03ffa05 	stb	zero,-24(fp)
81109340:	00002206 	br	811093cc <vOutAckHandlerTask+0x188>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
81109344:	e0fffa03 	ldbu	r3,-24(fp)
81109348:	00a04574 	movhi	r2,33045
8110934c:	10ae5b04 	addi	r2,r2,-18068
81109350:	18c7883a 	add	r3,r3,r3
81109354:	18c7883a 	add	r3,r3,r3
81109358:	10c5883a 	add	r2,r2,r3
8110935c:	10800003 	ldbu	r2,0(r2)
81109360:	10803fcc 	andi	r2,r2,255
81109364:	1080201c 	xori	r2,r2,128
81109368:	10bfe004 	addi	r2,r2,-128
8110936c:	10001426 	beq	r2,zero,811093c0 <vOutAckHandlerTask+0x17c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81109370:	e0fffa03 	ldbu	r3,-24(fp)
81109374:	00a04574 	movhi	r2,33045
81109378:	10ae5b04 	addi	r2,r2,-18068
8110937c:	18c7883a 	add	r3,r3,r3
81109380:	18c7883a 	add	r3,r3,r3
81109384:	10c5883a 	add	r2,r2,r3
81109388:	10c0000b 	ldhu	r3,0(r2)
8110938c:	d0e0498d 	sth	r3,-32474(gp)
81109390:	1080008b 	ldhu	r2,2(r2)
81109394:	d0a04a0d 	sth	r2,-32472(gp)
                                eSenderAckState = sSASending;
81109398:	00800084 	movi	r2,2
8110939c:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811093a0:	e0fffa03 	ldbu	r3,-24(fp)
811093a4:	00a04574 	movhi	r2,33045
811093a8:	10ae5b04 	addi	r2,r2,-18068
811093ac:	18c7883a 	add	r3,r3,r3
811093b0:	18c7883a 	add	r3,r3,r3
811093b4:	10c5883a 	add	r2,r2,r3
811093b8:	10000005 	stb	zero,0(r2)
                                break;
811093bc:	00000606 	br	811093d8 <vOutAckHandlerTask+0x194>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
811093c0:	e0bffa03 	ldbu	r2,-24(fp)
811093c4:	10800044 	addi	r2,r2,1
811093c8:	e0bffa05 	stb	r2,-24(fp)
811093cc:	e0bffa03 	ldbu	r2,-24(fp)
811093d0:	10800230 	cmpltui	r2,r2,8
811093d4:	103fdb1e 	bne	r2,zero,81109344 <__reset+0xfb0e9344>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
811093d8:	d0a05c17 	ldw	r2,-32400(gp)
811093dc:	1009883a 	mov	r4,r2
811093e0:	112e50c0 	call	8112e50c <OSMutexPost>
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }

                break;
811093e4:	00005406 	br	81109538 <vOutAckHandlerTask+0x2f4>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
811093e8:	110e4900 	call	8110e490 <vFailGetMutexSenderTask>
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }

                break;
811093ec:	00005206 	br	81109538 <vOutAckHandlerTask+0x2f4>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
811093f0:	110e4280 	call	8110e428 <vFailGetCountSemaphoreSenderTask>
                }

                break;
811093f4:	00005006 	br	81109538 <vOutAckHandlerTask+0x2f4>
			case sSASending:
                
                /* First check if is an NACK packet that should be sent */
                if ( xSAckLocal.cType != '#' ) {
811093f8:	d0a04983 	ldbu	r2,-32474(gp)
811093fc:	10803fcc 	andi	r2,r2,255
81109400:	1080201c 	xori	r2,r2,128
81109404:	10bfe004 	addi	r2,r2,-128
81109408:	108008e0 	cmpeqi	r2,r2,35
8110940c:	1000201e 	bne	r2,zero,81109490 <vOutAckHandlerTask+0x24c>
                    /* In this state has a parsed ack packet in the variable xSAckLocal
                    we just need to calc the crc8 and create the uart packet to send. */
                    sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
81109410:	d0a049c3 	ldbu	r2,-32473(gp)
81109414:	10c03fcc 	andi	r3,r2,255
81109418:	18c0201c 	xori	r3,r3,128
8110941c:	18ffe004 	addi	r3,r3,-128
81109420:	d0a04a0b 	ldhu	r2,-32472(gp)
81109424:	113fffcc 	andi	r4,r2,65535
81109428:	e0bffac4 	addi	r2,fp,-21
8110942c:	200f883a 	mov	r7,r4
81109430:	180d883a 	mov	r6,r3
81109434:	01604534 	movhi	r5,33044
81109438:	29773404 	addi	r5,r5,-9008
8110943c:	1009883a 	mov	r4,r2
81109440:	11137640 	call	81113764 <sprintf>
                    crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
81109444:	e0bffac4 	addi	r2,fp,-21
81109448:	1009883a 	mov	r4,r2
8110944c:	11139780 	call	81113978 <strlen>
81109450:	1007883a 	mov	r3,r2
81109454:	e0bffac4 	addi	r2,fp,-21
81109458:	180b883a 	mov	r5,r3
8110945c:	1009883a 	mov	r4,r2
81109460:	110e1180 	call	8110e118 <ucCrc8wInit>
81109464:	e0bffa45 	stb	r2,-23(fp)
                    sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
81109468:	e13ffa43 	ldbu	r4,-23(fp)
8110946c:	e0fffac4 	addi	r3,fp,-21
81109470:	e0bffac4 	addi	r2,fp,-21
81109474:	200f883a 	mov	r7,r4
81109478:	180d883a 	mov	r6,r3
8110947c:	01604534 	movhi	r5,33044
81109480:	29773604 	addi	r5,r5,-9000
81109484:	1009883a 	mov	r4,r2
81109488:	11137640 	call	81113764 <sprintf>
8110948c:	00000c06 	br	811094c0 <vOutAckHandlerTask+0x27c>
                } else {
                    /* Nack */
                    sprintf(cBufferAck, "%s", NACK_SEQUENCE);
81109490:	e0bffac4 	addi	r2,fp,-21
81109494:	00c008c4 	movi	r3,35
81109498:	10c00005 	stb	r3,0(r2)
8110949c:	00c01f04 	movi	r3,124
811094a0:	10c00045 	stb	r3,1(r2)
811094a4:	00c00d44 	movi	r3,53
811094a8:	10c00085 	stb	r3,2(r2)
811094ac:	00c00d04 	movi	r3,52
811094b0:	10c000c5 	stb	r3,3(r2)
811094b4:	00c00ec4 	movi	r3,59
811094b8:	10c00105 	stb	r3,4(r2)
811094bc:	10000145 	stb	zero,5(r2)
                }


                OSMutexPend(xTxUARTMutex, 100, &error_code); /* Wait max 100 ticks = 100 ms */
811094c0:	d0a05d17 	ldw	r2,-32396(gp)
811094c4:	e0fffa84 	addi	r3,fp,-22
811094c8:	180d883a 	mov	r6,r3
811094cc:	01401904 	movi	r5,100
811094d0:	1009883a 	mov	r4,r2
811094d4:	112df680 	call	8112df68 <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
811094d8:	e0bffa83 	ldbu	r2,-22(fp)
811094dc:	10803fcc 	andi	r2,r2,255
811094e0:	1000071e 	bne	r2,zero,81109500 <vOutAckHandlerTask+0x2bc>
                    puts(cBufferAck);
811094e4:	e0bffac4 	addi	r2,fp,-21
811094e8:	1009883a 	mov	r4,r2
811094ec:	11134200 	call	81113420 <puts>
                    OSMutexPost(xTxUARTMutex);
811094f0:	d0a05d17 	ldw	r2,-32396(gp)
811094f4:	1009883a 	mov	r4,r2
811094f8:	112e50c0 	call	8112e50c <OSMutexPost>
811094fc:	00000106 	br	81109504 <vOutAckHandlerTask+0x2c0>
                } else
                    vFailGetMutexTxUARTSenderTask(); /* Could not use the uart tx buffer to send the ack*/
81109500:	110e5c80 	call	8110e5c8 <vFailGetMutexTxUARTSenderTask>

                eSenderAckState = sSAGettingACK;
81109504:	00800044 	movi	r2,1
81109508:	e0bff915 	stw	r2,-28(fp)
                
				break;
8110950c:	00000a06 	br	81109538 <vOutAckHandlerTask+0x2f4>
			default:
            	#ifdef DEBUG_ON
		            debug(fp,"Critical: Default State. Should never get here.(vOutAckHandlerTask)\n");
81109510:	d0a04f17 	ldw	r2,-32452(gp)
81109514:	100f883a 	mov	r7,r2
81109518:	01801104 	movi	r6,68
8110951c:	01400044 	movi	r5,1
81109520:	01204534 	movhi	r4,33044
81109524:	21373904 	addi	r4,r4,-8988
81109528:	11124700 	call	81112470 <fwrite>
	            #endif
                eSenderAckState = sSAGettingACK;
8110952c:	00800044 	movi	r2,1
81109530:	e0bff915 	stw	r2,-28(fp)
				break;
81109534:	0001883a 	nop
		}
	}
81109538:	003f6206 	br	811092c4 <__reset+0xfb0e92c4>

8110953c <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
8110953c:	deffc104 	addi	sp,sp,-252
81109540:	de00012e 	bgeu	sp,et,81109548 <vParserCommTask+0xc>
81109544:	003b68fa 	trap	3
81109548:	dfc03e15 	stw	ra,248(sp)
8110954c:	df003d15 	stw	fp,244(sp)
81109550:	df003d04 	addi	fp,sp,244
81109554:	e13fff15 	stw	r4,-4(fp)
	unsigned short int usiTypeL;
	unsigned short int usiSubTypeL;
	unsigned short int usiPUSidL;
	unsigned short int usiFeeInstL;
	bool bSuccess = FALSE;
81109558:	e03fc915 	stw	zero,-220(fp)
	#ifdef DEBUG_ON
		char cPUSDebug[128];
	#endif

    #ifdef DEBUG_ON
        debug(fp,"Parser Comm Task. (Task on)\n");
8110955c:	d0a04f17 	ldw	r2,-32452(gp)
81109560:	100f883a 	mov	r7,r2
81109564:	01800704 	movi	r6,28
81109568:	01400044 	movi	r5,1
8110956c:	01204534 	movhi	r4,33044
81109570:	21374b04 	addi	r4,r4,-8916
81109574:	11124700 	call	81112470 <fwrite>
    #endif

	eParserMode = sConfiguring;
81109578:	e03fc815 	stw	zero,-224(fp)

	for(;;){

		switch (eParserMode) {
8110957c:	e0bfc817 	ldw	r2,-224(fp)
81109580:	10800168 	cmpgeui	r2,r2,5
81109584:	1002541e 	bne	r2,zero,81109ed8 <vParserCommTask+0x99c>
81109588:	e0bfc817 	ldw	r2,-224(fp)
8110958c:	100690ba 	slli	r3,r2,2
81109590:	00a04474 	movhi	r2,33041
81109594:	10a56904 	addi	r2,r2,-27228
81109598:	1885883a 	add	r2,r3,r2
8110959c:	10800017 	ldw	r2,0(r2)
811095a0:	1000683a 	jmp	r2
811095a4:	811095b8 	rdprs	r4,r16,16982
811095a8:	811095c4 	addi	r4,r16,16983
811095ac:	81109658 	cmpnei	r4,r16,16985
811095b0:	811097b0 	cmpltui	r4,r16,16990
811095b4:	811097f8 	rdprs	r4,r16,16991
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingMessage;
811095b8:	00800044 	movi	r2,1
811095bc:	e0bfc815 	stw	r2,-224(fp)
				break;
811095c0:	00024806 	br	81109ee4 <vParserCommTask+0x9a8>
			case sWaitingMessage:

				bSuccess = FALSE;
811095c4:	e03fc915 	stw	zero,-220(fp)
				eParserMode = sWaitingMessage;
811095c8:	00800044 	movi	r2,1
811095cc:	e0bfc815 	stw	r2,-224(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
811095d0:	d0a05117 	ldw	r2,-32444(gp)
811095d4:	e0ffca84 	addi	r3,fp,-214
811095d8:	180d883a 	mov	r6,r3
811095dc:	000b883a 	mov	r5,zero
811095e0:	1009883a 	mov	r4,r2
811095e4:	112ff740 	call	8112ff74 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
811095e8:	e0bfca83 	ldbu	r2,-214(fp)
811095ec:	10803fcc 	andi	r2,r2,255
811095f0:	1000171e 	bne	r2,zero,81109650 <vParserCommTask+0x114>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
811095f4:	01204534 	movhi	r4,33044
811095f8:	2109f604 	addi	r4,r4,10200
811095fc:	1109ee80 	call	81109ee8 <getPreParsedPacket>
81109600:	e0bfc915 	stw	r2,-220(fp)
					if (bSuccess == TRUE) {
81109604:	e0bfc917 	ldw	r2,-220(fp)
81109608:	10800058 	cmpnei	r2,r2,1
8110960c:	10000e1e 	bne	r2,zero,81109648 <vParserCommTask+0x10c>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
81109610:	00a04534 	movhi	r2,33044
81109614:	1089f604 	addi	r2,r2,10200
81109618:	10800103 	ldbu	r2,4(r2)
8110961c:	10803fcc 	andi	r2,r2,255
81109620:	1080201c 	xori	r2,r2,128
81109624:	10bfe004 	addi	r2,r2,-128
81109628:	10800858 	cmpnei	r2,r2,33
8110962c:	1000031e 	bne	r2,zero,8110963c <vParserCommTask+0x100>
							eParserMode = sReplyParsing;
81109630:	008000c4 	movi	r2,3
81109634:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81109638:	00022a06 	br	81109ee4 <vParserCommTask+0x9a8>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
8110963c:	00800084 	movi	r2,2
81109640:	e0bfc815 	stw	r2,-224(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81109644:	00022706 	br	81109ee4 <vParserCommTask+0x9a8>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
81109648:	110eb540 	call	8110eb54 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110964c:	00022506 	br	81109ee4 <vParserCommTask+0x9a8>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
81109650:	110ea840 	call	8110ea84 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
81109654:	00022306 	br	81109ee4 <vParserCommTask+0x9a8>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cCommand)
81109658:	00a04534 	movhi	r2,33044
8110965c:	1089f604 	addi	r2,r2,10200
81109660:	10800143 	ldbu	r2,5(r2)
81109664:	10803fcc 	andi	r2,r2,255
81109668:	1080201c 	xori	r2,r2,128
8110966c:	10bfe004 	addi	r2,r2,-128
81109670:	10c01120 	cmpeqi	r3,r2,68
81109674:	1800081e 	bne	r3,zero,81109698 <vParserCommTask+0x15c>
81109678:	10c01420 	cmpeqi	r3,r2,80
8110967c:	18000a1e 	bne	r3,zero,811096a8 <vParserCommTask+0x16c>
81109680:	108010e0 	cmpeqi	r2,r2,67
81109684:	10004626 	beq	r2,zero,811097a0 <vParserCommTask+0x264>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
						vSendEthConf();
81109688:	110ca480 	call	8110ca48 <vSendEthConf>
						eParserMode = sWaitingMessage;
8110968c:	00800044 	movi	r2,1
81109690:	e0bfc815 	stw	r2,-224(fp)
						break;
81109694:	00004506 	br	811097ac <vParserCommTask+0x270>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
81109698:	110ccd80 	call	8110ccd8 <vSendTurnOff>
						eParserMode = sWaitingMessage;
8110969c:	00800044 	movi	r2,1
811096a0:	e0bfc815 	stw	r2,-224(fp)
                        break;						
811096a4:	00004106 	br	811097ac <vParserCommTask+0x270>
                    case PUS_CMD: /*PUS command to MEB - TC*/

						#ifdef DEBUG_ON
							debug(fp,"PUS Received:\n");
811096a8:	d0a04f17 	ldw	r2,-32452(gp)
811096ac:	100f883a 	mov	r7,r2
811096b0:	01800384 	movi	r6,14
811096b4:	01400044 	movi	r5,1
811096b8:	01204534 	movhi	r4,33044
811096bc:	21375304 	addi	r4,r4,-8884
811096c0:	11124700 	call	81112470 <fwrite>
							memset(cPUSDebug,0,128);
811096c4:	e0bfdf04 	addi	r2,fp,-132
811096c8:	01802004 	movi	r6,128
811096cc:	000b883a 	mov	r5,zero
811096d0:	1009883a 	mov	r4,r2
811096d4:	1112fd40 	call	81112fd4 <memset>
							sprintf(cPUSDebug, "TC-> pid: %hu; pcat: %hu; srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", PreParsedLocal.usiValues[1], PreParsedLocal.usiValues[2], PreParsedLocal.usiValues[3], PreParsedLocal.usiValues[4], PreParsedLocal.usiValues[5]);
811096d8:	00a04534 	movhi	r2,33044
811096dc:	1089f604 	addi	r2,r2,10200
811096e0:	1080028b 	ldhu	r2,10(r2)
811096e4:	117fffcc 	andi	r5,r2,65535
811096e8:	00a04534 	movhi	r2,33044
811096ec:	1089f604 	addi	r2,r2,10200
811096f0:	1080030b 	ldhu	r2,12(r2)
811096f4:	11bfffcc 	andi	r6,r2,65535
811096f8:	00a04534 	movhi	r2,33044
811096fc:	1089f604 	addi	r2,r2,10200
81109700:	1080038b 	ldhu	r2,14(r2)
81109704:	10ffffcc 	andi	r3,r2,65535
81109708:	00a04534 	movhi	r2,33044
8110970c:	1089f604 	addi	r2,r2,10200
81109710:	1080040b 	ldhu	r2,16(r2)
81109714:	113fffcc 	andi	r4,r2,65535
81109718:	00a04534 	movhi	r2,33044
8110971c:	1089f604 	addi	r2,r2,10200
81109720:	1080048b 	ldhu	r2,18(r2)
81109724:	10bfffcc 	andi	r2,r2,65535
81109728:	e23fdf04 	addi	r8,fp,-132
8110972c:	d8800215 	stw	r2,8(sp)
81109730:	d9000115 	stw	r4,4(sp)
81109734:	d8c00015 	stw	r3,0(sp)
81109738:	300f883a 	mov	r7,r6
8110973c:	280d883a 	mov	r6,r5
81109740:	01604534 	movhi	r5,33044
81109744:	29775704 	addi	r5,r5,-8868
81109748:	4009883a 	mov	r4,r8
8110974c:	11137640 	call	81113764 <sprintf>
							debug(fp, cPUSDebug );
81109750:	d0a04f17 	ldw	r2,-32452(gp)
81109754:	e0ffdf04 	addi	r3,fp,-132
81109758:	180b883a 	mov	r5,r3
8110975c:	1009883a 	mov	r4,r2
81109760:	1111dd40 	call	81111dd4 <fprintf>
						#endif
	
						usiTypeL = PreParsedLocal.usiValues[3];
81109764:	00a04534 	movhi	r2,33044
81109768:	1089f604 	addi	r2,r2,10200
8110976c:	1080038b 	ldhu	r2,14(r2)
81109770:	e0bfc60d 	sth	r2,-232(fp)
						usiSubTypeL = PreParsedLocal.usiValues[4];
81109774:	00a04534 	movhi	r2,33044
81109778:	1089f604 	addi	r2,r2,10200
8110977c:	1080040b 	ldhu	r2,16(r2)
81109780:	e0bfc68d 	sth	r2,-230(fp)
						usiPUSidL = PreParsedLocal.usiValues[5];
81109784:	00a04534 	movhi	r2,33044
81109788:	1089f604 	addi	r2,r2,10200
8110978c:	1080048b 	ldhu	r2,18(r2)
81109790:	e0bfc70d 	sth	r2,-228(fp)

						eParserMode = sPusHandling;
81109794:	00800104 	movi	r2,4
81109798:	e0bfc815 	stw	r2,-224(fp)
                        break;						
8110979c:	00000306 	br	811097ac <vParserCommTask+0x270>
					default:
						eParserMode = sWaitingMessage;
811097a0:	00800044 	movi	r2,1
811097a4:	e0bfc815 	stw	r2,-224(fp)
						break;
811097a8:	0001883a 	nop
				}
				break;
811097ac:	0001cd06 	br	81109ee4 <vParserCommTask+0x9a8>
			case sReplyParsing:
				eParserMode = sWaitingMessage;
811097b0:	00800044 	movi	r2,1
811097b4:	e0bfc815 	stw	r2,-224(fp)
                switch ( usiTypeL )
811097b8:	e0bfc60b 	ldhu	r2,-232(fp)
811097bc:	10c01220 	cmpeqi	r3,r2,72
811097c0:	1800091e 	bne	r3,zero,811097e8 <vParserCommTask+0x2ac>
811097c4:	10c014e0 	cmpeqi	r3,r2,83
811097c8:	1800091e 	bne	r3,zero,811097f0 <vParserCommTask+0x2b4>
811097cc:	10801120 	cmpeqi	r2,r2,68
811097d0:	10000226 	beq	r2,zero,811097dc <vParserCommTask+0x2a0>
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/
						vSendTurnOff();
811097d4:	110ccd80 	call	8110ccd8 <vSendTurnOff>
						
						
                        break;
811097d8:	00000606 	br	811097f4 <vParserCommTask+0x2b8>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
                    default:
						eParserMode = sWaitingMessage;
811097dc:	00800044 	movi	r2,1
811097e0:	e0bfc815 	stw	r2,-224(fp)
                        break;
811097e4:	00000306 	br	811097f4 <vParserCommTask+0x2b8>
						
                        break;
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						
                        break;
811097e8:	0001883a 	nop
811097ec:	0001bd06 	br	81109ee4 <vParserCommTask+0x9a8>
                switch ( usiTypeL )
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						
                        break;
811097f0:	0001883a 	nop
                        break;
                    default:
						eParserMode = sWaitingMessage;
                        break;
                }
				break;
811097f4:	0001bb06 	br	81109ee4 <vParserCommTask+0x9a8>
			case sPusHandling:
				eParserMode = sWaitingMessage;
811097f8:	00800044 	movi	r2,1
811097fc:	e0bfc815 	stw	r2,-224(fp)
				
                switch ( usiTypeL )
81109800:	e0bfc60b 	ldhu	r2,-232(fp)
81109804:	10c03ea0 	cmpeqi	r3,r2,250
81109808:	1800311e 	bne	r3,zero,811098d0 <vParserCommTask+0x394>
8110980c:	10c03ec8 	cmpgei	r3,r2,251
81109810:	1800031e 	bne	r3,zero,81109820 <vParserCommTask+0x2e4>
81109814:	10800460 	cmpeqi	r2,r2,17
81109818:	1000061e 	bne	r2,zero,81109834 <vParserCommTask+0x2f8>
8110981c:	0001aa06 	br	81109ec8 <vParserCommTask+0x98c>
81109820:	10c03ee0 	cmpeqi	r3,r2,251
81109824:	1800621e 	bne	r3,zero,811099b0 <vParserCommTask+0x474>
81109828:	10803f20 	cmpeqi	r2,r2,252
8110982c:	1000ba1e 	bne	r2,zero,81109b18 <vParserCommTask+0x5dc>
81109830:	0001a506 	br	81109ec8 <vParserCommTask+0x98c>
                {
                    case 17: /* srv-Type = 17 */
						switch ( usiSubTypeL )
81109834:	e0bfc68b 	ldhu	r2,-230(fp)
81109838:	10800060 	cmpeqi	r2,r2,1
8110983c:	10000b26 	beq	r2,zero,8110986c <vParserCommTask+0x330>
						{
							case 1: /* TC_SCAM_TEST_CONNECTION */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_TEST_CONNECTION\n");
81109840:	d0a04f17 	ldw	r2,-32452(gp)
81109844:	100f883a 	mov	r7,r2
81109848:	01800604 	movi	r6,24
8110984c:	01400044 	movi	r5,1
81109850:	01204534 	movhi	r4,33044
81109854:	21376a04 	addi	r4,r4,-8792
81109858:	11124700 	call	81112470 <fwrite>
								#endif

								/* Reply with the TM os connection */
								vTMPusTestConnection( usiPUSidL );
8110985c:	e0bfc70b 	ldhu	r2,-228(fp)
81109860:	1009883a 	mov	r4,r2
81109864:	110d3300 	call	8110d330 <vTMPusTestConnection>

								break;
81109868:	00001806 	br	811098cc <vParserCommTask+0x390>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110986c:	e0bfdf04 	addi	r2,fp,-132
81109870:	01802004 	movi	r6,128
81109874:	000b883a 	mov	r5,zero
81109878:	1009883a 	mov	r4,r2
8110987c:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109880:	e13fc60b 	ldhu	r4,-232(fp)
81109884:	e17fc68b 	ldhu	r5,-230(fp)
81109888:	e0bfc70b 	ldhu	r2,-228(fp)
8110988c:	e0ffdf04 	addi	r3,fp,-132
81109890:	d8800015 	stw	r2,0(sp)
81109894:	280f883a 	mov	r7,r5
81109898:	200d883a 	mov	r6,r4
8110989c:	01604534 	movhi	r5,33044
811098a0:	29777104 	addi	r5,r5,-8764
811098a4:	1809883a 	mov	r4,r3
811098a8:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
811098ac:	d0a04f17 	ldw	r2,-32452(gp)
811098b0:	e0ffdf04 	addi	r3,fp,-132
811098b4:	180b883a 	mov	r5,r3
811098b8:	1009883a 	mov	r4,r2
811098bc:	1111dd40 	call	81111dd4 <fprintf>
								#endif
								eParserMode = sWaitingMessage;
811098c0:	00800044 	movi	r2,1
811098c4:	e0bfc815 	stw	r2,-224(fp)
								break;
811098c8:	0001883a 	nop
						}
                        break;
811098cc:	00018106 	br	81109ed4 <vParserCommTask+0x998>
                    case 250: /* srv-Type = 250 */
						switch ( usiSubTypeL )
811098d0:	e0bfc68b 	ldhu	r2,-230(fp)
811098d4:	10c00f20 	cmpeqi	r3,r2,60
811098d8:	18000c1e 	bne	r3,zero,8110990c <vParserCommTask+0x3d0>
811098dc:	10c00f60 	cmpeqi	r3,r2,61
811098e0:	1800121e 	bne	r3,zero,8110992c <vParserCommTask+0x3f0>
811098e4:	10800ee0 	cmpeqi	r2,r2,59
811098e8:	10001826 	beq	r2,zero,8110994c <vParserCommTask+0x410>
						{
							case 59: /* TC_SCAM_RESET */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RESET\n");
811098ec:	d0a04f17 	ldw	r2,-32452(gp)
811098f0:	100f883a 	mov	r7,r2
811098f4:	01800384 	movi	r6,14
811098f8:	01400044 	movi	r5,1
811098fc:	01204534 	movhi	r4,33044
81109900:	21378104 	addi	r4,r4,-8700
81109904:	11124700 	call	81112470 <fwrite>
								#endif

								
								break;
81109908:	00002806 	br	811099ac <vParserCommTask+0x470>
							case 60: /* TC_SCAM_CONFIG */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_CONFIG\n");
8110990c:	d0a04f17 	ldw	r2,-32452(gp)
81109910:	100f883a 	mov	r7,r2
81109914:	018003c4 	movi	r6,15
81109918:	01400044 	movi	r5,1
8110991c:	01204534 	movhi	r4,33044
81109920:	21378504 	addi	r4,r4,-8684
81109924:	11124700 	call	81112470 <fwrite>
								#endif


								break;
81109928:	00002006 	br	811099ac <vParserCommTask+0x470>
							case 61: /* TC_SCAM_RUN */
								#ifdef DEBUG_ON
									debug(fp,"TC_SCAM_RUN\n");
8110992c:	d0a04f17 	ldw	r2,-32452(gp)
81109930:	100f883a 	mov	r7,r2
81109934:	01800304 	movi	r6,12
81109938:	01400044 	movi	r5,1
8110993c:	01204534 	movhi	r4,33044
81109940:	21378904 	addi	r4,r4,-8668
81109944:	11124700 	call	81112470 <fwrite>
								#endif


								break;
81109948:	00001806 	br	811099ac <vParserCommTask+0x470>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
8110994c:	e0bfdf04 	addi	r2,fp,-132
81109950:	01802004 	movi	r6,128
81109954:	000b883a 	mov	r5,zero
81109958:	1009883a 	mov	r4,r2
8110995c:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109960:	e13fc60b 	ldhu	r4,-232(fp)
81109964:	e17fc68b 	ldhu	r5,-230(fp)
81109968:	e0bfc70b 	ldhu	r2,-228(fp)
8110996c:	e0ffdf04 	addi	r3,fp,-132
81109970:	d8800015 	stw	r2,0(sp)
81109974:	280f883a 	mov	r7,r5
81109978:	200d883a 	mov	r6,r4
8110997c:	01604534 	movhi	r5,33044
81109980:	29777104 	addi	r5,r5,-8764
81109984:	1809883a 	mov	r4,r3
81109988:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
8110998c:	d0a04f17 	ldw	r2,-32452(gp)
81109990:	e0ffdf04 	addi	r3,fp,-132
81109994:	180b883a 	mov	r5,r3
81109998:	1009883a 	mov	r4,r2
8110999c:	1111dd40 	call	81111dd4 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
811099a0:	00800044 	movi	r2,1
811099a4:	e0bfc815 	stw	r2,-224(fp)
								break;
811099a8:	0001883a 	nop
						}
                        break;
811099ac:	00014906 	br	81109ed4 <vParserCommTask+0x998>
                    case 251: /* srv-Type = 251 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
811099b0:	00a04534 	movhi	r2,33044
811099b4:	1089f604 	addi	r2,r2,10200
811099b8:	1080050b 	ldhu	r2,20(r2)
811099bc:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
811099c0:	e0bfc68b 	ldhu	r2,-230(fp)
811099c4:	10c000a0 	cmpeqi	r3,r2,2
811099c8:	1800161e 	bne	r3,zero,81109a24 <vParserCommTask+0x4e8>
811099cc:	10c00160 	cmpeqi	r3,r2,5
811099d0:	1800261e 	bne	r3,zero,81109a6c <vParserCommTask+0x530>
811099d4:	10800060 	cmpeqi	r2,r2,1
811099d8:	10003626 	beq	r2,zero,81109ab4 <vParserCommTask+0x578>
						{
							case 1: /* TC_SCAM_FEE_CONFIG_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
811099dc:	e0bfdf04 	addi	r2,fp,-132
811099e0:	01802004 	movi	r6,128
811099e4:	000b883a 	mov	r5,zero
811099e8:	1009883a 	mov	r4,r2
811099ec:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CONFIG_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
811099f0:	e0ffca0b 	ldhu	r3,-216(fp)
811099f4:	e0bfdf04 	addi	r2,fp,-132
811099f8:	180d883a 	mov	r6,r3
811099fc:	01604534 	movhi	r5,33044
81109a00:	29778d04 	addi	r5,r5,-8652
81109a04:	1009883a 	mov	r4,r2
81109a08:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109a0c:	d0a04f17 	ldw	r2,-32452(gp)
81109a10:	e0ffdf04 	addi	r3,fp,-132
81109a14:	180b883a 	mov	r5,r3
81109a18:	1009883a 	mov	r4,r2
81109a1c:	1111dd40 	call	81111dd4 <fprintf>
								#endif							


								break;
81109a20:	00003c06 	br	81109b14 <vParserCommTask+0x5d8>
							case 2: /* TC_SCAM_FEE_STANDBY_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109a24:	e0bfdf04 	addi	r2,fp,-132
81109a28:	01802004 	movi	r6,128
81109a2c:	000b883a 	mov	r5,zero
81109a30:	1009883a 	mov	r4,r2
81109a34:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_STANDBY_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109a38:	e0ffca0b 	ldhu	r3,-216(fp)
81109a3c:	e0bfdf04 	addi	r2,fp,-132
81109a40:	180d883a 	mov	r6,r3
81109a44:	01604534 	movhi	r5,33044
81109a48:	29779904 	addi	r5,r5,-8604
81109a4c:	1009883a 	mov	r4,r2
81109a50:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109a54:	d0a04f17 	ldw	r2,-32452(gp)
81109a58:	e0ffdf04 	addi	r3,fp,-132
81109a5c:	180b883a 	mov	r5,r3
81109a60:	1009883a 	mov	r4,r2
81109a64:	1111dd40 	call	81111dd4 <fprintf>
								#endif


								break;
81109a68:	00002a06 	br	81109b14 <vParserCommTask+0x5d8>
							case 5: /* TC_SCAM_FEE_CALIBRATION_ENTER */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109a6c:	e0bfdf04 	addi	r2,fp,-132
81109a70:	01802004 	movi	r6,128
81109a74:	000b883a 	mov	r5,zero
81109a78:	1009883a 	mov	r4,r2
81109a7c:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "TC_SCAM_FEE_CALIBRATION_ENTER-> Fee Instance: %hu;\n", usiFeeInstL );
81109a80:	e0ffca0b 	ldhu	r3,-216(fp)
81109a84:	e0bfdf04 	addi	r2,fp,-132
81109a88:	180d883a 	mov	r6,r3
81109a8c:	01604534 	movhi	r5,33044
81109a90:	2977a504 	addi	r5,r5,-8556
81109a94:	1009883a 	mov	r4,r2
81109a98:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109a9c:	d0a04f17 	ldw	r2,-32452(gp)
81109aa0:	e0ffdf04 	addi	r3,fp,-132
81109aa4:	180b883a 	mov	r5,r3
81109aa8:	1009883a 	mov	r4,r2
81109aac:	1111dd40 	call	81111dd4 <fprintf>
								#endif


								break;
81109ab0:	00001806 	br	81109b14 <vParserCommTask+0x5d8>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109ab4:	e0bfdf04 	addi	r2,fp,-132
81109ab8:	01802004 	movi	r6,128
81109abc:	000b883a 	mov	r5,zero
81109ac0:	1009883a 	mov	r4,r2
81109ac4:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109ac8:	e13fc60b 	ldhu	r4,-232(fp)
81109acc:	e17fc68b 	ldhu	r5,-230(fp)
81109ad0:	e0bfc70b 	ldhu	r2,-228(fp)
81109ad4:	e0ffdf04 	addi	r3,fp,-132
81109ad8:	d8800015 	stw	r2,0(sp)
81109adc:	280f883a 	mov	r7,r5
81109ae0:	200d883a 	mov	r6,r4
81109ae4:	01604534 	movhi	r5,33044
81109ae8:	29777104 	addi	r5,r5,-8764
81109aec:	1809883a 	mov	r4,r3
81109af0:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109af4:	d0a04f17 	ldw	r2,-32452(gp)
81109af8:	e0ffdf04 	addi	r3,fp,-132
81109afc:	180b883a 	mov	r5,r3
81109b00:	1009883a 	mov	r4,r2
81109b04:	1111dd40 	call	81111dd4 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109b08:	00800044 	movi	r2,1
81109b0c:	e0bfc815 	stw	r2,-224(fp)
								break;
81109b10:	0001883a 	nop
						}
                        break;
81109b14:	0000ef06 	br	81109ed4 <vParserCommTask+0x998>
					case 252: /* srv-Type = 252 */
						usiFeeInstL = PreParsedLocal.usiValues[6];
81109b18:	00a04534 	movhi	r2,33044
81109b1c:	1089f604 	addi	r2,r2,10200
81109b20:	1080050b 	ldhu	r2,20(r2)
81109b24:	e0bfca0d 	sth	r2,-216(fp)

						switch ( usiSubTypeL )
81109b28:	e0bfc68b 	ldhu	r2,-230(fp)
81109b2c:	10c000e0 	cmpeqi	r3,r2,3
81109b30:	18000a1e 	bne	r3,zero,81109b5c <vParserCommTask+0x620>
81109b34:	10c00108 	cmpgei	r3,r2,4
81109b38:	1800031e 	bne	r3,zero,81109b48 <vParserCommTask+0x60c>
81109b3c:	108000a0 	cmpeqi	r2,r2,2
81109b40:	10003c1e 	bne	r2,zero,81109c34 <vParserCommTask+0x6f8>
81109b44:	0000c706 	br	81109e64 <vParserCommTask+0x928>
81109b48:	10c00120 	cmpeqi	r3,r2,4
81109b4c:	1800151e 	bne	r3,zero,81109ba4 <vParserCommTask+0x668>
81109b50:	10800160 	cmpeqi	r2,r2,5
81109b54:	1000251e 	bne	r2,zero,81109bec <vParserCommTask+0x6b0>
81109b58:	0000c206 	br	81109e64 <vParserCommTask+0x928>
						{					
							case 3: /* TC_SCAM_SPW_LINK_ENABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109b5c:	e0bfdf04 	addi	r2,fp,-132
81109b60:	01802004 	movi	r6,128
81109b64:	000b883a 	mov	r5,zero
81109b68:	1009883a 	mov	r4,r2
81109b6c:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_ENABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109b70:	e0ffca0b 	ldhu	r3,-216(fp)
81109b74:	e0bfdf04 	addi	r2,fp,-132
81109b78:	180d883a 	mov	r6,r3
81109b7c:	01604534 	movhi	r5,33044
81109b80:	2977b204 	addi	r5,r5,-8504
81109b84:	1009883a 	mov	r4,r2
81109b88:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109b8c:	d0a04f17 	ldw	r2,-32452(gp)
81109b90:	e0ffdf04 	addi	r3,fp,-132
81109b94:	180b883a 	mov	r5,r3
81109b98:	1009883a 	mov	r4,r2
81109b9c:	1111dd40 	call	81111dd4 <fprintf>
								#endif


								break;
81109ba0:	0000c806 	br	81109ec4 <vParserCommTask+0x988>
							case 4: /* TC_SCAM_SPW_LINK_DISABLE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109ba4:	e0bfdf04 	addi	r2,fp,-132
81109ba8:	01802004 	movi	r6,128
81109bac:	000b883a 	mov	r5,zero
81109bb0:	1009883a 	mov	r4,r2
81109bb4:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_DISABLE-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109bb8:	e0ffca0b 	ldhu	r3,-216(fp)
81109bbc:	e0bfdf04 	addi	r2,fp,-132
81109bc0:	180d883a 	mov	r6,r3
81109bc4:	01604534 	movhi	r5,33044
81109bc8:	2977bf04 	addi	r5,r5,-8452
81109bcc:	1009883a 	mov	r4,r2
81109bd0:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109bd4:	d0a04f17 	ldw	r2,-32452(gp)
81109bd8:	e0ffdf04 	addi	r3,fp,-132
81109bdc:	180b883a 	mov	r5,r3
81109be0:	1009883a 	mov	r4,r2
81109be4:	1111dd40 	call	81111dd4 <fprintf>
								#endif


								break;
81109be8:	0000b606 	br	81109ec4 <vParserCommTask+0x988>
							case 5: /* TC_SCAM_SPW_LINK_RESET */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109bec:	e0bfdf04 	addi	r2,fp,-132
81109bf0:	01802004 	movi	r6,128
81109bf4:	000b883a 	mov	r5,zero
81109bf8:	1009883a 	mov	r4,r2
81109bfc:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_LINK_RESET-> FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109c00:	e0ffca0b 	ldhu	r3,-216(fp)
81109c04:	e0bfdf04 	addi	r2,fp,-132
81109c08:	180d883a 	mov	r6,r3
81109c0c:	01604534 	movhi	r5,33044
81109c10:	2977cc04 	addi	r5,r5,-8400
81109c14:	1009883a 	mov	r4,r2
81109c18:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109c1c:	d0a04f17 	ldw	r2,-32452(gp)
81109c20:	e0ffdf04 	addi	r3,fp,-132
81109c24:	180b883a 	mov	r5,r3
81109c28:	1009883a 	mov	r4,r2
81109c2c:	1111dd40 	call	81111dd4 <fprintf>
								#endif


								break;
81109c30:	0000a406 	br	81109ec4 <vParserCommTask+0x988>
							case 2: /* TC_SCAM_SPW_RMAP_CONFIG_UPDATE */
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109c34:	e0bfdf04 	addi	r2,fp,-132
81109c38:	01802004 	movi	r6,128
81109c3c:	000b883a 	mov	r5,zero
81109c40:	1009883a 	mov	r4,r2
81109c44:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "TC_SCAM_SPW_RMAP_CONFIG_UPDATE->\n");
81109c48:	e0bfdf04 	addi	r2,fp,-132
81109c4c:	00d4d7f4 	movhi	r3,21343
81109c50:	18d0d504 	addi	r3,r3,17236
81109c54:	10c00015 	stw	r3,0(r2)
81109c58:	00d7d374 	movhi	r3,24397
81109c5c:	18d050c4 	addi	r3,r3,16707
81109c60:	10c00115 	stw	r3,4(r2)
81109c64:	00d7d5f4 	movhi	r3,24407
81109c68:	18d414c4 	addi	r3,r3,20563
81109c6c:	10c00215 	stw	r3,8(r2)
81109c70:	00d41074 	movhi	r3,20545
81109c74:	18d35484 	addi	r3,r3,19794
81109c78:	10c00315 	stw	r3,12(r2)
81109c7c:	00d393f4 	movhi	r3,20047
81109c80:	18d0d7c4 	addi	r3,r3,17247
81109c84:	10c00415 	stw	r3,16(r2)
81109c88:	00d7d1f4 	movhi	r3,24391
81109c8c:	18d25184 	addi	r3,r3,18758
81109c90:	10c00515 	stw	r3,20(r2)
81109c94:	00d05134 	movhi	r3,16708
81109c98:	18d41544 	addi	r3,r3,20565
81109c9c:	10c00615 	stw	r3,24(r2)
81109ca0:	00cf8b74 	movhi	r3,15917
81109ca4:	18d15504 	addi	r3,r3,17748
81109ca8:	10c00715 	stw	r3,28(r2)
81109cac:	00c00284 	movi	r3,10
81109cb0:	10c0080d 	sth	r3,32(r2)
									debug(fp, cPUSDebug );
81109cb4:	d0a04f17 	ldw	r2,-32452(gp)
81109cb8:	e0ffdf04 	addi	r3,fp,-132
81109cbc:	180b883a 	mov	r5,r3
81109cc0:	1009883a 	mov	r4,r2
81109cc4:	1111dd40 	call	81111dd4 <fprintf>
									sprintf(cPUSDebug, "- FEESIM_INSTANCE: %hu;\n", usiFeeInstL );
81109cc8:	e0ffca0b 	ldhu	r3,-216(fp)
81109ccc:	e0bfdf04 	addi	r2,fp,-132
81109cd0:	180d883a 	mov	r6,r3
81109cd4:	01604534 	movhi	r5,33044
81109cd8:	2977d804 	addi	r5,r5,-8352
81109cdc:	1009883a 	mov	r4,r2
81109ce0:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109ce4:	d0a04f17 	ldw	r2,-32452(gp)
81109ce8:	e0ffdf04 	addi	r3,fp,-132
81109cec:	180b883a 	mov	r5,r3
81109cf0:	1009883a 	mov	r4,r2
81109cf4:	1111dd40 	call	81111dd4 <fprintf>
									sprintf(cPUSDebug, "- MODE: %hu;\n", PreParsedLocal.usiValues[7] );
81109cf8:	00a04534 	movhi	r2,33044
81109cfc:	1089f604 	addi	r2,r2,10200
81109d00:	1080058b 	ldhu	r2,22(r2)
81109d04:	10ffffcc 	andi	r3,r2,65535
81109d08:	e0bfdf04 	addi	r2,fp,-132
81109d0c:	180d883a 	mov	r6,r3
81109d10:	01604534 	movhi	r5,33044
81109d14:	2977df04 	addi	r5,r5,-8324
81109d18:	1009883a 	mov	r4,r2
81109d1c:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109d20:	d0a04f17 	ldw	r2,-32452(gp)
81109d24:	e0ffdf04 	addi	r3,fp,-132
81109d28:	180b883a 	mov	r5,r3
81109d2c:	1009883a 	mov	r4,r2
81109d30:	1111dd40 	call	81111dd4 <fprintf>
									sprintf(cPUSDebug, "- LINK_SPEED: %hu;\n", PreParsedLocal.usiValues[8] );
81109d34:	00a04534 	movhi	r2,33044
81109d38:	1089f604 	addi	r2,r2,10200
81109d3c:	1080060b 	ldhu	r2,24(r2)
81109d40:	10ffffcc 	andi	r3,r2,65535
81109d44:	e0bfdf04 	addi	r2,fp,-132
81109d48:	180d883a 	mov	r6,r3
81109d4c:	01604534 	movhi	r5,33044
81109d50:	2977e304 	addi	r5,r5,-8308
81109d54:	1009883a 	mov	r4,r2
81109d58:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109d5c:	d0a04f17 	ldw	r2,-32452(gp)
81109d60:	e0ffdf04 	addi	r3,fp,-132
81109d64:	180b883a 	mov	r5,r3
81109d68:	1009883a 	mov	r4,r2
81109d6c:	1111dd40 	call	81111dd4 <fprintf>
									sprintf(cPUSDebug, "- LOGICAL_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[9] );
81109d70:	00a04534 	movhi	r2,33044
81109d74:	1089f604 	addi	r2,r2,10200
81109d78:	1080068b 	ldhu	r2,26(r2)
81109d7c:	10ffffcc 	andi	r3,r2,65535
81109d80:	e0bfdf04 	addi	r2,fp,-132
81109d84:	180d883a 	mov	r6,r3
81109d88:	01604534 	movhi	r5,33044
81109d8c:	2977e804 	addi	r5,r5,-8288
81109d90:	1009883a 	mov	r4,r2
81109d94:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109d98:	d0a04f17 	ldw	r2,-32452(gp)
81109d9c:	e0ffdf04 	addi	r3,fp,-132
81109da0:	180b883a 	mov	r5,r3
81109da4:	1009883a 	mov	r4,r2
81109da8:	1111dd40 	call	81111dd4 <fprintf>
									sprintf(cPUSDebug, "- DEST_NODE_ADDR: 0x%02X;\n", PreParsedLocal.usiValues[10] );
81109dac:	00a04534 	movhi	r2,33044
81109db0:	1089f604 	addi	r2,r2,10200
81109db4:	1080070b 	ldhu	r2,28(r2)
81109db8:	10ffffcc 	andi	r3,r2,65535
81109dbc:	e0bfdf04 	addi	r2,fp,-132
81109dc0:	180d883a 	mov	r6,r3
81109dc4:	01604534 	movhi	r5,33044
81109dc8:	2977ef04 	addi	r5,r5,-8260
81109dcc:	1009883a 	mov	r4,r2
81109dd0:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109dd4:	d0a04f17 	ldw	r2,-32452(gp)
81109dd8:	e0ffdf04 	addi	r3,fp,-132
81109ddc:	180b883a 	mov	r5,r3
81109de0:	1009883a 	mov	r4,r2
81109de4:	1111dd40 	call	81111dd4 <fprintf>
									sprintf(cPUSDebug, "- TIME_CODE_GEN: %hu;\n", PreParsedLocal.usiValues[11] );
81109de8:	00a04534 	movhi	r2,33044
81109dec:	1089f604 	addi	r2,r2,10200
81109df0:	1080078b 	ldhu	r2,30(r2)
81109df4:	10ffffcc 	andi	r3,r2,65535
81109df8:	e0bfdf04 	addi	r2,fp,-132
81109dfc:	180d883a 	mov	r6,r3
81109e00:	01604534 	movhi	r5,33044
81109e04:	2977f604 	addi	r5,r5,-8232
81109e08:	1009883a 	mov	r4,r2
81109e0c:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109e10:	d0a04f17 	ldw	r2,-32452(gp)
81109e14:	e0ffdf04 	addi	r3,fp,-132
81109e18:	180b883a 	mov	r5,r3
81109e1c:	1009883a 	mov	r4,r2
81109e20:	1111dd40 	call	81111dd4 <fprintf>
									sprintf(cPUSDebug, "- RMAP_KEY: 0x%02X;\n", PreParsedLocal.usiValues[12] );
81109e24:	00a04534 	movhi	r2,33044
81109e28:	1089f604 	addi	r2,r2,10200
81109e2c:	1080080b 	ldhu	r2,32(r2)
81109e30:	10ffffcc 	andi	r3,r2,65535
81109e34:	e0bfdf04 	addi	r2,fp,-132
81109e38:	180d883a 	mov	r6,r3
81109e3c:	01604534 	movhi	r5,33044
81109e40:	2977fc04 	addi	r5,r5,-8208
81109e44:	1009883a 	mov	r4,r2
81109e48:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109e4c:	d0a04f17 	ldw	r2,-32452(gp)
81109e50:	e0ffdf04 	addi	r3,fp,-132
81109e54:	180b883a 	mov	r5,r3
81109e58:	1009883a 	mov	r4,r2
81109e5c:	1111dd40 	call	81111dd4 <fprintf>
								#endif



								break;
81109e60:	00001806 	br	81109ec4 <vParserCommTask+0x988>
							default:
								#ifdef DEBUG_ON
									memset(cPUSDebug,0,128);
81109e64:	e0bfdf04 	addi	r2,fp,-132
81109e68:	01802004 	movi	r6,128
81109e6c:	000b883a 	mov	r5,zero
81109e70:	1009883a 	mov	r4,r2
81109e74:	1112fd40 	call	81112fd4 <memset>
									sprintf(cPUSDebug, "Default - TC-> srv-type: %hu; srv-subtype: %hu; pus-id: %hu;\n", usiTypeL, usiSubTypeL, usiPUSidL );
81109e78:	e13fc60b 	ldhu	r4,-232(fp)
81109e7c:	e17fc68b 	ldhu	r5,-230(fp)
81109e80:	e0bfc70b 	ldhu	r2,-228(fp)
81109e84:	e0ffdf04 	addi	r3,fp,-132
81109e88:	d8800015 	stw	r2,0(sp)
81109e8c:	280f883a 	mov	r7,r5
81109e90:	200d883a 	mov	r6,r4
81109e94:	01604534 	movhi	r5,33044
81109e98:	29777104 	addi	r5,r5,-8764
81109e9c:	1809883a 	mov	r4,r3
81109ea0:	11137640 	call	81113764 <sprintf>
									debug(fp, cPUSDebug );
81109ea4:	d0a04f17 	ldw	r2,-32452(gp)
81109ea8:	e0ffdf04 	addi	r3,fp,-132
81109eac:	180b883a 	mov	r5,r3
81109eb0:	1009883a 	mov	r4,r2
81109eb4:	1111dd40 	call	81111dd4 <fprintf>
								#endif							
								eParserMode = sWaitingMessage;
81109eb8:	00800044 	movi	r2,1
81109ebc:	e0bfc815 	stw	r2,-224(fp)
								break;
81109ec0:	0001883a 	nop
						}
                        break;
81109ec4:	00000306 	br	81109ed4 <vParserCommTask+0x998>
                    default:
						eParserMode = sWaitingMessage;
81109ec8:	00800044 	movi	r2,1
81109ecc:	e0bfc815 	stw	r2,-224(fp)
                        break;
81109ed0:	0001883a 	nop
                }
				break;				
81109ed4:	00000306 	br	81109ee4 <vParserCommTask+0x9a8>
			default:
				eParserMode = sWaitingMessage;
81109ed8:	00800044 	movi	r2,1
81109edc:	e0bfc815 	stw	r2,-224(fp)
				break;
81109ee0:	0001883a 	nop
		}
	}
81109ee4:	003da506 	br	8110957c <__reset+0xfb0e957c>

81109ee8 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
81109ee8:	defffb04 	addi	sp,sp,-20
81109eec:	de00012e 	bgeu	sp,et,81109ef4 <getPreParsedPacket+0xc>
81109ef0:	003b68fa 	trap	3
81109ef4:	dfc00415 	stw	ra,16(sp)
81109ef8:	df000315 	stw	fp,12(sp)
81109efc:	df000304 	addi	fp,sp,12
81109f00:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109f04:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
81109f08:	d0a05617 	ldw	r2,-32424(gp)
81109f0c:	e0fffe44 	addi	r3,fp,-7
81109f10:	180d883a 	mov	r6,r3
81109f14:	000b883a 	mov	r5,zero
81109f18:	1009883a 	mov	r4,r2
81109f1c:	112df680 	call	8112df68 <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
81109f20:	e0bffe43 	ldbu	r2,-7(fp)
81109f24:	10803fcc 	andi	r2,r2,255
81109f28:	10002e1e 	bne	r2,zero,81109fe4 <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for( i = 0; i < N_PREPARSED_ENTRIES; i++)
81109f2c:	e03ffe05 	stb	zero,-8(fp)
81109f30:	00002506 	br	81109fc8 <getPreParsedPacket+0xe0>
		{

            if ( xPreParsed[i].cType != 0 ) {
81109f34:	e0fffe03 	ldbu	r3,-8(fp)
81109f38:	00a04574 	movhi	r2,33045
81109f3c:	10ae6304 	addi	r2,r2,-18036
81109f40:	18c01324 	muli	r3,r3,76
81109f44:	10c5883a 	add	r2,r2,r3
81109f48:	10800104 	addi	r2,r2,4
81109f4c:	10800003 	ldbu	r2,0(r2)
81109f50:	10803fcc 	andi	r2,r2,255
81109f54:	1080201c 	xori	r2,r2,128
81109f58:	10bfe004 	addi	r2,r2,-128
81109f5c:	10001726 	beq	r2,zero,81109fbc <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
81109f60:	e0fffe03 	ldbu	r3,-8(fp)
81109f64:	e13fff17 	ldw	r4,-4(fp)
81109f68:	00a04574 	movhi	r2,33045
81109f6c:	10ae6304 	addi	r2,r2,-18036
81109f70:	18c01324 	muli	r3,r3,76
81109f74:	10c5883a 	add	r2,r2,r3
81109f78:	2007883a 	mov	r3,r4
81109f7c:	1009883a 	mov	r4,r2
81109f80:	00801304 	movi	r2,76
81109f84:	100d883a 	mov	r6,r2
81109f88:	200b883a 	mov	r5,r4
81109f8c:	1809883a 	mov	r4,r3
81109f90:	1112e840 	call	81112e84 <memcpy>
                bSuccess = TRUE;
81109f94:	00800044 	movi	r2,1
81109f98:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
81109f9c:	e0fffe03 	ldbu	r3,-8(fp)
81109fa0:	00a04574 	movhi	r2,33045
81109fa4:	10ae6304 	addi	r2,r2,-18036
81109fa8:	18c01324 	muli	r3,r3,76
81109fac:	10c5883a 	add	r2,r2,r3
81109fb0:	10800104 	addi	r2,r2,4
81109fb4:	10000005 	stb	zero,0(r2)
                break;
81109fb8:	00000606 	br	81109fd4 <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for( i = 0; i < N_PREPARSED_ENTRIES; i++)
81109fbc:	e0bffe03 	ldbu	r2,-8(fp)
81109fc0:	10800044 	addi	r2,r2,1
81109fc4:	e0bffe05 	stb	r2,-8(fp)
81109fc8:	e0bffe03 	ldbu	r2,-8(fp)
81109fcc:	10800230 	cmpltui	r2,r2,8
81109fd0:	103fd81e 	bne	r2,zero,81109f34 <__reset+0xfb0e9f34>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
81109fd4:	d0a05617 	ldw	r2,-32424(gp)
81109fd8:	1009883a 	mov	r4,r2
81109fdc:	112e50c0 	call	8112e50c <OSMutexPost>
81109fe0:	00000106 	br	81109fe8 <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
81109fe4:	110eaec0 	call	8110eaec <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
81109fe8:	e0bffd17 	ldw	r2,-12(fp)
}
81109fec:	e037883a 	mov	sp,fp
81109ff0:	dfc00117 	ldw	ra,4(sp)
81109ff4:	df000017 	ldw	fp,0(sp)
81109ff8:	dec00204 	addi	sp,sp,8
81109ffc:	f800283a 	ret

8110a000 <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
8110a000:	defffc04 	addi	sp,sp,-16
8110a004:	de00012e 	bgeu	sp,et,8110a00c <bTrySendSemaphoreCommInit+0xc>
8110a008:	003b68fa 	trap	3
8110a00c:	dfc00315 	stw	ra,12(sp)
8110a010:	df000215 	stw	fp,8(sp)
8110a014:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
8110a018:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
8110a01c:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
8110a020:	d0a04f17 	ldw	r2,-32452(gp)
8110a024:	100f883a 	mov	r7,r2
8110a028:	01800e84 	movi	r6,58
8110a02c:	01400044 	movi	r5,1
8110a030:	01204534 	movhi	r4,33044
8110a034:	21380204 	addi	r4,r4,-8184
8110a038:	11124700 	call	81112470 <fwrite>
	#endif

	ucCountRetries = 0;
8110a03c:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
8110a040:	e0bfff03 	ldbu	r2,-4(fp)
8110a044:	10800044 	addi	r2,r2,1
8110a048:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
8110a04c:	01000c84 	movi	r4,50
8110a050:	1131e000 	call	81131e00 <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
8110a054:	d0a04d17 	ldw	r2,-32460(gp)
8110a058:	1009883a 	mov	r4,r2
8110a05c:	11302fc0 	call	811302fc <OSSemPost>
8110a060:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
8110a064:	e0bfff43 	ldbu	r2,-3(fp)
8110a068:	10000326 	beq	r2,zero,8110a078 <bTrySendSemaphoreCommInit+0x78>
8110a06c:	e0bfff03 	ldbu	r2,-4(fp)
8110a070:	108002f0 	cmpltui	r2,r2,11
8110a074:	103ff21e 	bne	r2,zero,8110a040 <__reset+0xfb0ea040>

	if ( error_code == OS_ERR_NONE ) {
8110a078:	e0bfff43 	ldbu	r2,-3(fp)
8110a07c:	1000021e 	bne	r2,zero,8110a088 <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
8110a080:	00800044 	movi	r2,1
8110a084:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
8110a088:	e0bffe17 	ldw	r2,-8(fp)
}
8110a08c:	e037883a 	mov	sp,fp
8110a090:	dfc00117 	ldw	ra,4(sp)
8110a094:	df000017 	ldw	fp,0(sp)
8110a098:	dec00204 	addi	sp,sp,8
8110a09c:	f800283a 	ret

8110a0a0 <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
8110a0a0:	deffab04 	addi	sp,sp,-340
8110a0a4:	de00012e 	bgeu	sp,et,8110a0ac <vReceiverUartTask+0xc>
8110a0a8:	003b68fa 	trap	3
8110a0ac:	dfc05415 	stw	ra,336(sp)
8110a0b0:	df005315 	stw	fp,332(sp)
8110a0b4:	df005304 	addi	fp,sp,332
8110a0b8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a0bc:	e03fae15 	stw	zero,-328(fp)
    char cReceive[SIZE_RCV_BUFFER+64];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"Receiver UART Task. (Task on)\n");
8110a0c0:	d0a04f17 	ldw	r2,-32452(gp)
8110a0c4:	100f883a 	mov	r7,r2
8110a0c8:	01800784 	movi	r6,30
8110a0cc:	01400044 	movi	r5,1
8110a0d0:	01204534 	movhi	r4,33044
8110a0d4:	21381104 	addi	r4,r4,-8124
8110a0d8:	11124700 	call	81112470 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
8110a0dc:	e03fad15 	stw	zero,-332(fp)

    for(;;) {

        switch (eReaderRXMode)
8110a0e0:	e0bfad17 	ldw	r2,-332(fp)
8110a0e4:	10c00060 	cmpeqi	r3,r2,1
8110a0e8:	1800091e 	bne	r3,zero,8110a110 <vReceiverUartTask+0x70>
8110a0ec:	0080052e 	bgeu	zero,r2,8110a104 <vReceiverUartTask+0x64>
8110a0f0:	10c000a0 	cmpeqi	r3,r2,2
8110a0f4:	18005d1e 	bne	r3,zero,8110a26c <vReceiverUartTask+0x1cc>
8110a0f8:	108000e0 	cmpeqi	r2,r2,3
8110a0fc:	10006e1e 	bne	r2,zero,8110a2b8 <vReceiverUartTask+0x218>
8110a100:	00007706 	br	8110a2e0 <vReceiverUartTask+0x240>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
8110a104:	00800044 	movi	r2,1
8110a108:	e0bfad15 	stw	r2,-332(fp)
                break;
8110a10c:	00007706 	br	8110a2ec <vReceiverUartTask+0x24c>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
8110a110:	e0bfaf04 	addi	r2,fp,-324
8110a114:	01802004 	movi	r6,128
8110a118:	000b883a 	mov	r5,zero
8110a11c:	1009883a 	mov	r4,r2
8110a120:	1112fd40 	call	81112fd4 <memset>
                scanf("%s", cReceive);
8110a124:	e0bfcf04 	addi	r2,fp,-196
8110a128:	100b883a 	mov	r5,r2
8110a12c:	01204534 	movhi	r4,33044
8110a130:	21381904 	addi	r4,r4,-8092
8110a134:	11136880 	call	81113688 <scanf>
                memcpy(cReceiveBuffer, cReceive, (SIZE_RCV_BUFFER -1) ); /* Make that there's a zero terminator */
8110a138:	e0ffcf04 	addi	r3,fp,-196
8110a13c:	e0bfaf04 	addi	r2,fp,-324
8110a140:	01801fc4 	movi	r6,127
8110a144:	180b883a 	mov	r5,r3
8110a148:	1009883a 	mov	r4,r2
8110a14c:	1112e840 	call	81112e84 <memcpy>
                bSuccess = bPreParserV2( cReceiveBuffer , &xPreParsedReader );
8110a150:	e0bfaf04 	addi	r2,fp,-324
8110a154:	01604534 	movhi	r5,33044
8110a158:	294a0904 	addi	r5,r5,10276
8110a15c:	1009883a 	mov	r4,r2
8110a160:	110a7440 	call	8110a744 <bPreParserV2>
8110a164:	e0bfae15 	stw	r2,-328(fp)

                if ( bSuccess == TRUE ) {
8110a168:	e0bfae17 	ldw	r2,-328(fp)
8110a16c:	10800058 	cmpnei	r2,r2,1
8110a170:	1000281e 	bne	r2,zero,8110a214 <vReceiverUartTask+0x174>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
8110a174:	00a04534 	movhi	r2,33044
8110a178:	108a0904 	addi	r2,r2,10276
8110a17c:	10800103 	ldbu	r2,4(r2)
8110a180:	10803fcc 	andi	r2,r2,255
8110a184:	1080201c 	xori	r2,r2,128
8110a188:	10bfe004 	addi	r2,r2,-128
8110a18c:	10800fe0 	cmpeqi	r2,r2,63
8110a190:	1000081e 	bne	r2,zero,8110a1b4 <vReceiverUartTask+0x114>
8110a194:	00a04534 	movhi	r2,33044
8110a198:	108a0904 	addi	r2,r2,10276
8110a19c:	10800103 	ldbu	r2,4(r2)
8110a1a0:	10803fcc 	andi	r2,r2,255
8110a1a4:	1080201c 	xori	r2,r2,128
8110a1a8:	10bfe004 	addi	r2,r2,-128
8110a1ac:	10800858 	cmpnei	r2,r2,33
8110a1b0:	1000031e 	bne	r2,zero,8110a1c0 <vReceiverUartTask+0x120>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
8110a1b4:	00800084 	movi	r2,2
8110a1b8:	e0bfad15 	stw	r2,-332(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110a1bc:	00004b06 	br	8110a2ec <vReceiverUartTask+0x24c>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        /* If is a Nack, do nothing. The packet will be retransmited by the timeout checker. */
                        if ( xPreParsedReader.cType == NACK_CHAR ) {
8110a1c0:	00a04534 	movhi	r2,33044
8110a1c4:	108a0904 	addi	r2,r2,10276
8110a1c8:	10800103 	ldbu	r2,4(r2)
8110a1cc:	10803fcc 	andi	r2,r2,255
8110a1d0:	1080201c 	xori	r2,r2,128
8110a1d4:	10bfe004 	addi	r2,r2,-128
8110a1d8:	108008d8 	cmpnei	r2,r2,35
8110a1dc:	10000a1e 	bne	r2,zero,8110a208 <vReceiverUartTask+0x168>
                            eReaderRXMode = sGetRxUart;
8110a1e0:	00800044 	movi	r2,1
8110a1e4:	e0bfad15 	stw	r2,-332(fp)
                            #ifdef DEBUG_ON
                                debug(fp,"Nack Received. Do nothing!\n");
8110a1e8:	d0a04f17 	ldw	r2,-32452(gp)
8110a1ec:	100f883a 	mov	r7,r2
8110a1f0:	018006c4 	movi	r6,27
8110a1f4:	01400044 	movi	r5,1
8110a1f8:	01204534 	movhi	r4,33044
8110a1fc:	21381a04 	addi	r4,r4,-8088
8110a200:	11124700 	call	81112470 <fwrite>
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110a204:	00003906 	br	8110a2ec <vReceiverUartTask+0x24c>
                            eReaderRXMode = sGetRxUart;
                            #ifdef DEBUG_ON
                                debug(fp,"Nack Received. Do nothing!\n");
                            #endif
                        } else
                            eReaderRXMode = sSendToACKReceiver;
8110a208:	008000c4 	movi	r2,3
8110a20c:	e0bfad15 	stw	r2,-332(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110a210:	00003606 	br	8110a2ec <vReceiverUartTask+0x24c>

                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
8110a214:	00a04534 	movhi	r2,33044
8110a218:	108a0904 	addi	r2,r2,10276
8110a21c:	00c008c4 	movi	r3,35
8110a220:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = '.';
8110a224:	00a04534 	movhi	r2,33044
8110a228:	108a0904 	addi	r2,r2,10276
8110a22c:	00c00b84 	movi	r3,46
8110a230:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
8110a234:	00a04534 	movhi	r2,33044
8110a238:	108a0904 	addi	r2,r2,10276
8110a23c:	00c00044 	movi	r3,1
8110a240:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110a244:	01204534 	movhi	r4,33044
8110a248:	210a0904 	addi	r4,r4,10276
8110a24c:	110a42c0 	call	8110a42c <setPreAckSenderFreePos>
8110a250:	e0bfae15 	stw	r2,-328(fp)
                    if ( bSuccess == FALSE ) {
8110a254:	e0bfae17 	ldw	r2,-328(fp)
8110a258:	1000011e 	bne	r2,zero,8110a260 <vReceiverUartTask+0x1c0>
                        vFailSendNack();
8110a25c:	110ec240 	call	8110ec24 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
8110a260:	00800044 	movi	r2,1
8110a264:	e0bfad15 	stw	r2,-332(fp)
                }

                break;
8110a268:	00002006 	br	8110a2ec <vReceiverUartTask+0x24c>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110a26c:	01204534 	movhi	r4,33044
8110a270:	210a0904 	addi	r4,r4,10276
8110a274:	110a42c0 	call	8110a42c <setPreAckSenderFreePos>
8110a278:	e0bfae15 	stw	r2,-328(fp)
                if ( bSuccess == TRUE ) {
8110a27c:	e0bfae17 	ldw	r2,-328(fp)
8110a280:	10800058 	cmpnei	r2,r2,1
8110a284:	1000081e 	bne	r2,zero,8110a2a8 <vReceiverUartTask+0x208>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
8110a288:	01204534 	movhi	r4,33044
8110a28c:	210a0904 	addi	r4,r4,10276
8110a290:	110a2f00 	call	8110a2f0 <setPreParsedFreePos>
8110a294:	e0bfae15 	stw	r2,-328(fp)
                    if ( bSuccess == FALSE ) {
8110a298:	e0bfae17 	ldw	r2,-328(fp)
8110a29c:	1000031e 	bne	r2,zero,8110a2ac <vReceiverUartTask+0x20c>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
8110a2a0:	110ecf40 	call	8110ecf4 <vFailSetPreParsedBuffer>
8110a2a4:	00000106 	br	8110a2ac <vReceiverUartTask+0x20c>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
8110a2a8:	110ec8c0 	call	8110ec8c <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
8110a2ac:	00800044 	movi	r2,1
8110a2b0:	e0bfad15 	stw	r2,-332(fp)
                break;
8110a2b4:	00000d06 	br	8110a2ec <vReceiverUartTask+0x24c>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
8110a2b8:	01204534 	movhi	r4,33044
8110a2bc:	210a0904 	addi	r4,r4,10276
8110a2c0:	110a5a80 	call	8110a5a8 <setPreAckReceiverFreePos>
8110a2c4:	e0bfae15 	stw	r2,-328(fp)
                if ( bSuccess == FALSE ) {
8110a2c8:	e0bfae17 	ldw	r2,-328(fp)
8110a2cc:	1000011e 	bne	r2,zero,8110a2d4 <vReceiverUartTask+0x234>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
8110a2d0:	110ed5c0 	call	8110ed5c <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
8110a2d4:	00800044 	movi	r2,1
8110a2d8:	e0bfad15 	stw	r2,-332(fp)
                break;
8110a2dc:	00000306 	br	8110a2ec <vReceiverUartTask+0x24c>
            default:
                eReaderRXMode = sGetRxUart;
8110a2e0:	00800044 	movi	r2,1
8110a2e4:	e0bfad15 	stw	r2,-332(fp)
                break;
8110a2e8:	0001883a 	nop
        }

    }
8110a2ec:	003f7c06 	br	8110a0e0 <__reset+0xfb0ea0e0>

8110a2f0 <setPreParsedFreePos>:
}


/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
8110a2f0:	defffb04 	addi	sp,sp,-20
8110a2f4:	de00012e 	bgeu	sp,et,8110a2fc <setPreParsedFreePos+0xc>
8110a2f8:	003b68fa 	trap	3
8110a2fc:	dfc00415 	stw	ra,16(sp)
8110a300:	df000315 	stw	fp,12(sp)
8110a304:	df000304 	addi	fp,sp,12
8110a308:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a30c:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110a310:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110a314:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexPreParsed, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
8110a318:	d0a05617 	ldw	r2,-32424(gp)
8110a31c:	e0fffe44 	addi	r3,fp,-7
8110a320:	180d883a 	mov	r6,r3
8110a324:	01400284 	movi	r5,10
8110a328:	1009883a 	mov	r4,r2
8110a32c:	112df680 	call	8112df68 <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110a330:	e0bffe43 	ldbu	r2,-7(fp)
8110a334:	10803fcc 	andi	r2,r2,255
8110a338:	1000361e 	bne	r2,zero,8110a414 <setPreParsedFreePos+0x124>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_PREPARSED_ENTRIES; i++ )
8110a33c:	e03ffe05 	stb	zero,-8(fp)
8110a340:	00002e06 	br	8110a3fc <setPreParsedFreePos+0x10c>
        {
            if ( xPreParsed[i].cType == 0 ) {
8110a344:	e0fffe03 	ldbu	r3,-8(fp)
8110a348:	00a04574 	movhi	r2,33045
8110a34c:	10ae6304 	addi	r2,r2,-18036
8110a350:	18c01324 	muli	r3,r3,76
8110a354:	10c5883a 	add	r2,r2,r3
8110a358:	10800104 	addi	r2,r2,4
8110a35c:	10800003 	ldbu	r2,0(r2)
8110a360:	10803fcc 	andi	r2,r2,255
8110a364:	1080201c 	xori	r2,r2,128
8110a368:	10bfe004 	addi	r2,r2,-128
8110a36c:	1000201e 	bne	r2,zero,8110a3f0 <setPreParsedFreePos+0x100>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xPreParsed[i] = (*xPrePReader);
8110a370:	e0fffe03 	ldbu	r3,-8(fp)
8110a374:	00a04574 	movhi	r2,33045
8110a378:	10ae6304 	addi	r2,r2,-18036
8110a37c:	18c01324 	muli	r3,r3,76
8110a380:	10c7883a 	add	r3,r2,r3
8110a384:	e0bfff17 	ldw	r2,-4(fp)
8110a388:	1009883a 	mov	r4,r2
8110a38c:	00801304 	movi	r2,76
8110a390:	100d883a 	mov	r6,r2
8110a394:	200b883a 	mov	r5,r4
8110a398:	1809883a 	mov	r4,r3
8110a39c:	1112e840 	call	81112e84 <memcpy>
                error_code = OSSemPost(xSemCountPreParsed);
8110a3a0:	d0a05117 	ldw	r2,-32444(gp)
8110a3a4:	1009883a 	mov	r4,r2
8110a3a8:	11302fc0 	call	811302fc <OSSemPost>
8110a3ac:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code == OS_ERR_NONE ) {
8110a3b0:	e0bffe43 	ldbu	r2,-7(fp)
8110a3b4:	10803fcc 	andi	r2,r2,255
8110a3b8:	1000031e 	bne	r2,zero,8110a3c8 <setPreParsedFreePos+0xd8>
                    bSuccess = TRUE;
8110a3bc:	00800044 	movi	r2,1
8110a3c0:	e0bffd15 	stw	r2,-12(fp)
                } else {
                    vFailSendPreParsedSemaphore();
                    xPreParsed[i].cType = 0;
                    bSuccess = FALSE;
                }
                break;
8110a3c4:	00001006 	br	8110a408 <setPreParsedFreePos+0x118>
                xPreParsed[i] = (*xPrePReader);
                error_code = OSSemPost(xSemCountPreParsed);
                if ( error_code == OS_ERR_NONE ) {
                    bSuccess = TRUE;
                } else {
                    vFailSendPreParsedSemaphore();
8110a3c8:	110e3440 	call	8110e344 <vFailSendPreParsedSemaphore>
                    xPreParsed[i].cType = 0;
8110a3cc:	e0fffe03 	ldbu	r3,-8(fp)
8110a3d0:	00a04574 	movhi	r2,33045
8110a3d4:	10ae6304 	addi	r2,r2,-18036
8110a3d8:	18c01324 	muli	r3,r3,76
8110a3dc:	10c5883a 	add	r2,r2,r3
8110a3e0:	10800104 	addi	r2,r2,4
8110a3e4:	10000005 	stb	zero,0(r2)
                    bSuccess = FALSE;
8110a3e8:	e03ffd15 	stw	zero,-12(fp)
                }
                break;
8110a3ec:	00000606 	br	8110a408 <setPreParsedFreePos+0x118>
    bSuccess = FALSE;
    OSMutexPend(xMutexPreParsed, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_PREPARSED_ENTRIES; i++ )
8110a3f0:	e0bffe03 	ldbu	r2,-8(fp)
8110a3f4:	10800044 	addi	r2,r2,1
8110a3f8:	e0bffe05 	stb	r2,-8(fp)
8110a3fc:	e0bffe03 	ldbu	r2,-8(fp)
8110a400:	10800230 	cmpltui	r2,r2,8
8110a404:	103fcf1e 	bne	r2,zero,8110a344 <__reset+0xfb0ea344>
                    bSuccess = FALSE;
                }
                break;
            }
        }
        OSMutexPost(xMutexPreParsed);
8110a408:	d0a05617 	ldw	r2,-32424(gp)
8110a40c:	1009883a 	mov	r4,r2
8110a410:	112e50c0 	call	8112e50c <OSMutexPost>
    }
    return bSuccess;
8110a414:	e0bffd17 	ldw	r2,-12(fp)
}
8110a418:	e037883a 	mov	sp,fp
8110a41c:	dfc00117 	ldw	ra,4(sp)
8110a420:	df000017 	ldw	fp,0(sp)
8110a424:	dec00204 	addi	sp,sp,8
8110a428:	f800283a 	ret

8110a42c <setPreAckSenderFreePos>:



/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
8110a42c:	defffb04 	addi	sp,sp,-20
8110a430:	de00012e 	bgeu	sp,et,8110a438 <setPreAckSenderFreePos+0xc>
8110a434:	003b68fa 	trap	3
8110a438:	dfc00415 	stw	ra,16(sp)
8110a43c:	df000315 	stw	fp,12(sp)
8110a440:	df000304 	addi	fp,sp,12
8110a444:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a448:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110a44c:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110a450:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexSenderACK, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
8110a454:	d0a05c17 	ldw	r2,-32400(gp)
8110a458:	e0fffe44 	addi	r3,fp,-7
8110a45c:	180d883a 	mov	r6,r3
8110a460:	01400284 	movi	r5,10
8110a464:	1009883a 	mov	r4,r2
8110a468:	112df680 	call	8112df68 <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110a46c:	e0bffe43 	ldbu	r2,-7(fp)
8110a470:	10803fcc 	andi	r2,r2,255
8110a474:	1000461e 	bne	r2,zero,8110a590 <setPreAckSenderFreePos+0x164>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for(i = 0; i < N_ACKS_SENDER; i++)
8110a478:	e03ffe05 	stb	zero,-8(fp)
8110a47c:	00003e06 	br	8110a578 <setPreAckSenderFreePos+0x14c>
        {
            if ( xSenderACK[i].cType == 0 ) {
8110a480:	e0fffe03 	ldbu	r3,-8(fp)
8110a484:	00a04574 	movhi	r2,33045
8110a488:	10ae5b04 	addi	r2,r2,-18068
8110a48c:	18c7883a 	add	r3,r3,r3
8110a490:	18c7883a 	add	r3,r3,r3
8110a494:	10c5883a 	add	r2,r2,r3
8110a498:	10800003 	ldbu	r2,0(r2)
8110a49c:	10803fcc 	andi	r2,r2,255
8110a4a0:	1080201c 	xori	r2,r2,128
8110a4a4:	10bfe004 	addi	r2,r2,-128
8110a4a8:	1000301e 	bne	r2,zero,8110a56c <setPreAckSenderFreePos+0x140>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xSenderACK[i].cType = xPrePReader->cType;
8110a4ac:	e0fffe03 	ldbu	r3,-8(fp)
8110a4b0:	e0bfff17 	ldw	r2,-4(fp)
8110a4b4:	11000103 	ldbu	r4,4(r2)
8110a4b8:	00a04574 	movhi	r2,33045
8110a4bc:	10ae5b04 	addi	r2,r2,-18068
8110a4c0:	18c7883a 	add	r3,r3,r3
8110a4c4:	18c7883a 	add	r3,r3,r3
8110a4c8:	10c5883a 	add	r2,r2,r3
8110a4cc:	11000005 	stb	r4,0(r2)
                xSenderACK[i].cCommand = xPrePReader->cCommand;
8110a4d0:	e0fffe03 	ldbu	r3,-8(fp)
8110a4d4:	e0bfff17 	ldw	r2,-4(fp)
8110a4d8:	11000143 	ldbu	r4,5(r2)
8110a4dc:	00a04574 	movhi	r2,33045
8110a4e0:	10ae5b04 	addi	r2,r2,-18068
8110a4e4:	18c7883a 	add	r3,r3,r3
8110a4e8:	18c7883a 	add	r3,r3,r3
8110a4ec:	10c5883a 	add	r2,r2,r3
8110a4f0:	10800044 	addi	r2,r2,1
8110a4f4:	11000005 	stb	r4,0(r2)
                xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
8110a4f8:	e0fffe03 	ldbu	r3,-8(fp)
8110a4fc:	e0bfff17 	ldw	r2,-4(fp)
8110a500:	1100020b 	ldhu	r4,8(r2)
8110a504:	00a04574 	movhi	r2,33045
8110a508:	10ae5b04 	addi	r2,r2,-18068
8110a50c:	18c7883a 	add	r3,r3,r3
8110a510:	18c7883a 	add	r3,r3,r3
8110a514:	10c5883a 	add	r2,r2,r3
8110a518:	10800084 	addi	r2,r2,2
8110a51c:	1100000d 	sth	r4,0(r2)

                error_code = OSSemPost(xSemCountSenderACK);
8110a520:	d0a04e17 	ldw	r2,-32456(gp)
8110a524:	1009883a 	mov	r4,r2
8110a528:	11302fc0 	call	811302fc <OSSemPost>
8110a52c:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code != OS_ERR_NONE ) {
8110a530:	e0bffe43 	ldbu	r2,-7(fp)
8110a534:	10803fcc 	andi	r2,r2,255
8110a538:	10000926 	beq	r2,zero,8110a560 <setPreAckSenderFreePos+0x134>
                    vFailSendPreAckSenderSemaphore();
8110a53c:	110e3dc0 	call	8110e3dc <vFailSendPreAckSenderSemaphore>
                    xSenderACK[i].cType = 0;
8110a540:	e0fffe03 	ldbu	r3,-8(fp)
8110a544:	00a04574 	movhi	r2,33045
8110a548:	10ae5b04 	addi	r2,r2,-18068
8110a54c:	18c7883a 	add	r3,r3,r3
8110a550:	18c7883a 	add	r3,r3,r3
8110a554:	10c5883a 	add	r2,r2,r3
8110a558:	10000005 	stb	zero,0(r2)
                } else
                    bSuccess = TRUE;
                break;
8110a55c:	00000906 	br	8110a584 <setPreAckSenderFreePos+0x158>
                error_code = OSSemPost(xSemCountSenderACK);
                if ( error_code != OS_ERR_NONE ) {
                    vFailSendPreAckSenderSemaphore();
                    xSenderACK[i].cType = 0;
                } else
                    bSuccess = TRUE;
8110a560:	00800044 	movi	r2,1
8110a564:	e0bffd15 	stw	r2,-12(fp)
                break;
8110a568:	00000606 	br	8110a584 <setPreAckSenderFreePos+0x158>
    bSuccess = FALSE;
    OSMutexPend(xMutexSenderACK, 10, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait max 10 ticks = 10 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for(i = 0; i < N_ACKS_SENDER; i++)
8110a56c:	e0bffe03 	ldbu	r2,-8(fp)
8110a570:	10800044 	addi	r2,r2,1
8110a574:	e0bffe05 	stb	r2,-8(fp)
8110a578:	e0bffe03 	ldbu	r2,-8(fp)
8110a57c:	10800230 	cmpltui	r2,r2,8
8110a580:	103fbf1e 	bne	r2,zero,8110a480 <__reset+0xfb0ea480>
                } else
                    bSuccess = TRUE;
                break;
            }
        }
        OSMutexPost(xMutexSenderACK);
8110a584:	d0a05c17 	ldw	r2,-32400(gp)
8110a588:	1009883a 	mov	r4,r2
8110a58c:	112e50c0 	call	8112e50c <OSMutexPost>
    }

    return bSuccess;
8110a590:	e0bffd17 	ldw	r2,-12(fp)
}
8110a594:	e037883a 	mov	sp,fp
8110a598:	dfc00117 	ldw	ra,4(sp)
8110a59c:	df000017 	ldw	fp,0(sp)
8110a5a0:	dec00204 	addi	sp,sp,8
8110a5a4:	f800283a 	ret

8110a5a8 <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
8110a5a8:	defffb04 	addi	sp,sp,-20
8110a5ac:	de00012e 	bgeu	sp,et,8110a5b4 <setPreAckReceiverFreePos+0xc>
8110a5b0:	003b68fa 	trap	3
8110a5b4:	dfc00415 	stw	ra,16(sp)
8110a5b8:	df000315 	stw	fp,12(sp)
8110a5bc:	df000304 	addi	fp,sp,12
8110a5c0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110a5c4:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char i = 0;
8110a5c8:	e03ffe05 	stb	zero,-8(fp)

    bSuccess = FALSE;
8110a5cc:	e03ffd15 	stw	zero,-12(fp)
    OSMutexPend(xMutexReceivedACK, 20, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 20 ticks = 20 ms */
8110a5d0:	d0a05217 	ldw	r2,-32440(gp)
8110a5d4:	e0fffe44 	addi	r3,fp,-7
8110a5d8:	180d883a 	mov	r6,r3
8110a5dc:	01400504 	movi	r5,20
8110a5e0:	1009883a 	mov	r4,r2
8110a5e4:	112df680 	call	8112df68 <OSMutexPend>
    if ( error_code == OS_NO_ERR ) {
8110a5e8:	e0bffe43 	ldbu	r2,-7(fp)
8110a5ec:	10803fcc 	andi	r2,r2,255
8110a5f0:	1000471e 	bne	r2,zero,8110a710 <setPreAckReceiverFreePos+0x168>
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_ACKS_RECEIVED; i++ )
8110a5f4:	e03ffe05 	stb	zero,-8(fp)
8110a5f8:	00003e06 	br	8110a6f4 <setPreAckReceiverFreePos+0x14c>
        {
            if ( xReceivedACK[i].cType == 0 ) {
8110a5fc:	e0fffe03 	ldbu	r3,-8(fp)
8110a600:	00a04574 	movhi	r2,33045
8110a604:	10aa5504 	addi	r2,r2,-22188
8110a608:	18c7883a 	add	r3,r3,r3
8110a60c:	18c7883a 	add	r3,r3,r3
8110a610:	10c5883a 	add	r2,r2,r3
8110a614:	10800003 	ldbu	r2,0(r2)
8110a618:	10803fcc 	andi	r2,r2,255
8110a61c:	1080201c 	xori	r2,r2,128
8110a620:	10bfe004 	addi	r2,r2,-128
8110a624:	1000301e 	bne	r2,zero,8110a6e8 <setPreAckReceiverFreePos+0x140>
                /* Locate a free place*/
                /* Need to check if the performance is the same as memcpy*/
                xReceivedACK[i].cType = xPrePReader->cType;
8110a628:	e0fffe03 	ldbu	r3,-8(fp)
8110a62c:	e0bfff17 	ldw	r2,-4(fp)
8110a630:	11000103 	ldbu	r4,4(r2)
8110a634:	00a04574 	movhi	r2,33045
8110a638:	10aa5504 	addi	r2,r2,-22188
8110a63c:	18c7883a 	add	r3,r3,r3
8110a640:	18c7883a 	add	r3,r3,r3
8110a644:	10c5883a 	add	r2,r2,r3
8110a648:	11000005 	stb	r4,0(r2)
                xReceivedACK[i].cCommand = xPrePReader->cCommand;
8110a64c:	e0fffe03 	ldbu	r3,-8(fp)
8110a650:	e0bfff17 	ldw	r2,-4(fp)
8110a654:	11000143 	ldbu	r4,5(r2)
8110a658:	00a04574 	movhi	r2,33045
8110a65c:	10aa5504 	addi	r2,r2,-22188
8110a660:	18c7883a 	add	r3,r3,r3
8110a664:	18c7883a 	add	r3,r3,r3
8110a668:	10c5883a 	add	r2,r2,r3
8110a66c:	10800044 	addi	r2,r2,1
8110a670:	11000005 	stb	r4,0(r2)
                xReceivedACK[i].usiId = xPrePReader->usiValues[0];
8110a674:	e0fffe03 	ldbu	r3,-8(fp)
8110a678:	e0bfff17 	ldw	r2,-4(fp)
8110a67c:	1100020b 	ldhu	r4,8(r2)
8110a680:	00a04574 	movhi	r2,33045
8110a684:	10aa5504 	addi	r2,r2,-22188
8110a688:	18c7883a 	add	r3,r3,r3
8110a68c:	18c7883a 	add	r3,r3,r3
8110a690:	10c5883a 	add	r2,r2,r3
8110a694:	10800084 	addi	r2,r2,2
8110a698:	1100000d 	sth	r4,0(r2)

                error_code = OSSemPost(xSemCountReceivedACK);
8110a69c:	d0a05317 	ldw	r2,-32436(gp)
8110a6a0:	1009883a 	mov	r4,r2
8110a6a4:	11302fc0 	call	811302fc <OSSemPost>
8110a6a8:	e0bffe45 	stb	r2,-7(fp)
                if ( error_code == OS_ERR_NONE ) {
8110a6ac:	e0bffe43 	ldbu	r2,-7(fp)
8110a6b0:	10803fcc 	andi	r2,r2,255
8110a6b4:	1000031e 	bne	r2,zero,8110a6c4 <setPreAckReceiverFreePos+0x11c>
                    bSuccess = TRUE;
8110a6b8:	00800044 	movi	r2,1
8110a6bc:	e0bffd15 	stw	r2,-12(fp)
                } else {
                    vFailSendPreAckReceiverSemaphore();
                    xReceivedACK[i].cType = 0;
                }
                break;
8110a6c0:	00000f06 	br	8110a700 <setPreAckReceiverFreePos+0x158>

                error_code = OSSemPost(xSemCountReceivedACK);
                if ( error_code == OS_ERR_NONE ) {
                    bSuccess = TRUE;
                } else {
                    vFailSendPreAckReceiverSemaphore();
8110a6c4:	110e3900 	call	8110e390 <vFailSendPreAckReceiverSemaphore>
                    xReceivedACK[i].cType = 0;
8110a6c8:	e0fffe03 	ldbu	r3,-8(fp)
8110a6cc:	00a04574 	movhi	r2,33045
8110a6d0:	10aa5504 	addi	r2,r2,-22188
8110a6d4:	18c7883a 	add	r3,r3,r3
8110a6d8:	18c7883a 	add	r3,r3,r3
8110a6dc:	10c5883a 	add	r2,r2,r3
8110a6e0:	10000005 	stb	zero,0(r2)
                }
                break;
8110a6e4:	00000606 	br	8110a700 <setPreAckReceiverFreePos+0x158>
    bSuccess = FALSE;
    OSMutexPend(xMutexReceivedACK, 20, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 20 ticks = 20 ms */
    if ( error_code == OS_NO_ERR ) {
        /* Have free access to the buffer, check if there's any no threated command using the cType  */

        for( i = 0; i < N_ACKS_RECEIVED; i++ )
8110a6e8:	e0bffe03 	ldbu	r2,-8(fp)
8110a6ec:	10800044 	addi	r2,r2,1
8110a6f0:	e0bffe05 	stb	r2,-8(fp)
8110a6f4:	e0bffe03 	ldbu	r2,-8(fp)
8110a6f8:	108001b0 	cmpltui	r2,r2,6
8110a6fc:	103fbf1e 	bne	r2,zero,8110a5fc <__reset+0xfb0ea5fc>
                    xReceivedACK[i].cType = 0;
                }
                break;
            }
        }
        OSMutexPost(xMutexReceivedACK);
8110a700:	d0a05217 	ldw	r2,-32440(gp)
8110a704:	1009883a 	mov	r4,r2
8110a708:	112e50c0 	call	8112e50c <OSMutexPost>
8110a70c:	00000706 	br	8110a72c <setPreAckReceiverFreePos+0x184>
    } else {
        /* Could not  */
        #ifdef DEBUG_ON
            debug(fp,"Could not put the ack packet receiveid in the queue. (setPreAckReceiverFreePos)\n");
8110a710:	d0a04f17 	ldw	r2,-32452(gp)
8110a714:	100f883a 	mov	r7,r2
8110a718:	01801404 	movi	r6,80
8110a71c:	01400044 	movi	r5,1
8110a720:	01204534 	movhi	r4,33044
8110a724:	21382104 	addi	r4,r4,-8060
8110a728:	11124700 	call	81112470 <fwrite>
        #endif
    }

    return bSuccess;
8110a72c:	e0bffd17 	ldw	r2,-12(fp)
}
8110a730:	e037883a 	mov	sp,fp
8110a734:	dfc00117 	ldw	ra,4(sp)
8110a738:	df000017 	ldw	fp,0(sp)
8110a73c:	dec00204 	addi	sp,sp,8
8110a740:	f800283a 	ret

8110a744 <bPreParserV2>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParserV2( char *buffer, tPreParsed *xPerParcedBuffer )
{
8110a744:	defff404 	addi	sp,sp,-48
8110a748:	de00012e 	bgeu	sp,et,8110a750 <bPreParserV2+0xc>
8110a74c:	003b68fa 	trap	3
8110a750:	dfc00b15 	stw	ra,44(sp)
8110a754:	df000a15 	stw	fp,40(sp)
8110a758:	dc000915 	stw	r16,36(sp)
8110a75c:	df000a04 	addi	fp,sp,40
8110a760:	e13ffd15 	stw	r4,-12(fp)
8110a764:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110a768:	e03ff615 	stw	zero,-40(fp)
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */


    bSuccess = FALSE;
8110a76c:	e03ff615 	stw	zero,-40(fp)

    siStrLen = strnlen(buffer, SIZE_RCV_BUFFER);
8110a770:	01402004 	movi	r5,128
8110a774:	e13ffd17 	ldw	r4,-12(fp)
8110a778:	1113a100 	call	81113a10 <strnlen>
8110a77c:	e0bff90d 	sth	r2,-28(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110a780:	01400ec4 	movi	r5,59
8110a784:	e13ffd17 	ldw	r4,-12(fp)
8110a788:	110cf400 	call	8110cf40 <siPosStr>
8110a78c:	e0bff98d 	sth	r2,-26(fp)

    /* Check the protocol terminator char ';' */
    if ( (siTeminador != (siStrLen-1)) )
8110a790:	e0fff98f 	ldh	r3,-26(fp)
8110a794:	e0bff90f 	ldh	r2,-28(fp)
8110a798:	10bfffc4 	addi	r2,r2,-1
8110a79c:	18800226 	beq	r3,r2,8110a7a8 <bPreParserV2+0x64>
        return bSuccess;
8110a7a0:	e0bff617 	ldw	r2,-40(fp)
8110a7a4:	0000ba06 	br	8110aa90 <bPreParserV2+0x34c>

    siCRC = siPosStr(buffer, SEPARATOR_CRC);
8110a7a8:	01401f04 	movi	r5,124
8110a7ac:	e13ffd17 	ldw	r4,-12(fp)
8110a7b0:	110cf400 	call	8110cf40 <siPosStr>
8110a7b4:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there's an CRC char */
    if ( siCRC > siTeminador )
8110a7b8:	e0bffa0f 	ldh	r2,-24(fp)
8110a7bc:	e0fff98f 	ldh	r3,-26(fp)
8110a7c0:	1880020e 	bge	r3,r2,8110a7cc <bPreParserV2+0x88>
        return bSuccess;
8110a7c4:	e0bff617 	ldw	r2,-40(fp)
8110a7c8:	0000b106 	br	8110aa90 <bPreParserV2+0x34c>

    siIni = strcspn( buffer , ALL_INI_CHAR ); /* Verify if there's any one of the initial characters */
8110a7cc:	01604534 	movhi	r5,33044
8110a7d0:	29783604 	addi	r5,r5,-7976
8110a7d4:	e13ffd17 	ldw	r4,-12(fp)
8110a7d8:	111392c0 	call	8111392c <strcspn>
8110a7dc:	e0bffa8d 	sth	r2,-22(fp)

    /* Check if there's any initial char protocol and if is before the crc char */
    if ( siIni > siCRC)
8110a7e0:	e0bffa8f 	ldh	r2,-22(fp)
8110a7e4:	e0fffa0f 	ldh	r3,-24(fp)
8110a7e8:	1880020e 	bge	r3,r2,8110a7f4 <bPreParserV2+0xb0>
        return bSuccess;
8110a7ec:	e0bff617 	ldw	r2,-40(fp)
8110a7f0:	0000a706 	br	8110aa90 <bPreParserV2+0x34c>

    
    /*" ---> At this point we validate the existence and position of all characters in for the protocol in the message "*/


    xPerParcedBuffer->cType = buffer[siIni];
8110a7f4:	e0bffa8f 	ldh	r2,-22(fp)
8110a7f8:	e0fffd17 	ldw	r3,-12(fp)
8110a7fc:	1885883a 	add	r2,r3,r2
8110a800:	10c00003 	ldbu	r3,0(r2)
8110a804:	e0bffe17 	ldw	r2,-8(fp)
8110a808:	10c00105 	stb	r3,4(r2)
    if (xPerParcedBuffer->cType == NACK_CHAR ) {
8110a80c:	e0bffe17 	ldw	r2,-8(fp)
8110a810:	10800103 	ldbu	r2,4(r2)
8110a814:	10803fcc 	andi	r2,r2,255
8110a818:	1080201c 	xori	r2,r2,128
8110a81c:	10bfe004 	addi	r2,r2,-128
8110a820:	108008d8 	cmpnei	r2,r2,35
8110a824:	1000041e 	bne	r2,zero,8110a838 <bPreParserV2+0xf4>
        bSuccess = TRUE;
8110a828:	00800044 	movi	r2,1
8110a82c:	e0bff615 	stw	r2,-40(fp)
        return bSuccess;
8110a830:	e0bff617 	ldw	r2,-40(fp)
8110a834:	00009606 	br	8110aa90 <bPreParserV2+0x34c>


    /*" ---> At this point the packet is a Resquest, Reply or ACK packet"*/


    xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit( &buffer[siIni] , (siCRC - siIni) );
8110a838:	e0bffa8f 	ldh	r2,-22(fp)
8110a83c:	e0fffd17 	ldw	r3,-12(fp)
8110a840:	1889883a 	add	r4,r3,r2
8110a844:	e0fffa0f 	ldh	r3,-24(fp)
8110a848:	e0bffa8f 	ldh	r2,-22(fp)
8110a84c:	1885c83a 	sub	r2,r3,r2
8110a850:	100b883a 	mov	r5,r2
8110a854:	110e1180 	call	8110e118 <ucCrc8wInit>
8110a858:	1007883a 	mov	r3,r2
8110a85c:	e0bffe17 	ldw	r2,-8(fp)
8110a860:	10c01205 	stb	r3,72(r2)

    xPerParcedBuffer->cCommand = buffer[siIni+1];
8110a864:	e0bffa8f 	ldh	r2,-22(fp)
8110a868:	10800044 	addi	r2,r2,1
8110a86c:	e0fffd17 	ldw	r3,-12(fp)
8110a870:	1885883a 	add	r2,r3,r2
8110a874:	10c00003 	ldbu	r3,0(r2)
8110a878:	e0bffe17 	ldw	r2,-8(fp)
8110a87c:	10c00145 	stb	r3,5(r2)
    xPerParcedBuffer->ucNofBytes = 0;
8110a880:	e0bffe17 	ldw	r2,-8(fp)
8110a884:	10000185 	stb	zero,6(r2)

    memset( xPerParcedBuffer->usiValues , 0x00 , sizeof(xPerParcedBuffer->usiValues) );
8110a888:	e0bffe17 	ldw	r2,-8(fp)
8110a88c:	10800204 	addi	r2,r2,8
8110a890:	01801004 	movi	r6,64
8110a894:	000b883a 	mov	r5,zero
8110a898:	1009883a 	mov	r4,r2
8110a89c:	1112fd40 	call	81112fd4 <memset>

    i = siIni + 3; /* "?C:i..." */
8110a8a0:	e0bffa8b 	ldhu	r2,-22(fp)
8110a8a4:	108000c4 	addi	r2,r2,3
8110a8a8:	e0bff705 	stb	r2,-36(fp)
    do {
        p_inteiro = inteiro;
8110a8ac:	e0bffb44 	addi	r2,fp,-19
8110a8b0:	e0bff815 	stw	r2,-32(fp)
        memset( &(inteiro) , 0 , sizeof( inteiro ) );
8110a8b4:	e0bffb44 	addi	r2,fp,-19
8110a8b8:	01800184 	movi	r6,6
8110a8bc:	000b883a 	mov	r5,zero
8110a8c0:	1009883a 	mov	r4,r2
8110a8c4:	1112fd40 	call	81112fd4 <memset>
        do {
            c = buffer[i];
8110a8c8:	e0bff703 	ldbu	r2,-36(fp)
8110a8cc:	e0fffd17 	ldw	r3,-12(fp)
8110a8d0:	1885883a 	add	r2,r3,r2
8110a8d4:	10800003 	ldbu	r2,0(r2)
8110a8d8:	e0bffb05 	stb	r2,-20(fp)
            if ( isdigit( c ) ) {
8110a8dc:	d0e00317 	ldw	r3,-32756(gp)
8110a8e0:	e0bffb07 	ldb	r2,-20(fp)
8110a8e4:	10800044 	addi	r2,r2,1
8110a8e8:	1885883a 	add	r2,r3,r2
8110a8ec:	10800003 	ldbu	r2,0(r2)
8110a8f0:	10803fcc 	andi	r2,r2,255
8110a8f4:	1080010c 	andi	r2,r2,4
8110a8f8:	10000626 	beq	r2,zero,8110a914 <bPreParserV2+0x1d0>
                (*p_inteiro) = c;
8110a8fc:	e0bff817 	ldw	r2,-32(fp)
8110a900:	e0fffb03 	ldbu	r3,-20(fp)
8110a904:	10c00005 	stb	r3,0(r2)
                p_inteiro++;
8110a908:	e0bff817 	ldw	r2,-32(fp)
8110a90c:	10800044 	addi	r2,r2,1
8110a910:	e0bff815 	stw	r2,-32(fp)
            }
            i++;
8110a914:	e0bff703 	ldbu	r2,-36(fp)
8110a918:	10800044 	addi	r2,r2,1
8110a91c:	e0bff705 	stb	r2,-36(fp)
        } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
8110a920:	e0bff90f 	ldh	r2,-28(fp)
8110a924:	e0fff703 	ldbu	r3,-36(fp)
8110a928:	1880090e 	bge	r3,r2,8110a950 <bPreParserV2+0x20c>
8110a92c:	e0bffb07 	ldb	r2,-20(fp)
8110a930:	10800ea0 	cmpeqi	r2,r2,58
8110a934:	1000061e 	bne	r2,zero,8110a950 <bPreParserV2+0x20c>
8110a938:	e0bffb07 	ldb	r2,-20(fp)
8110a93c:	10800ee0 	cmpeqi	r2,r2,59
8110a940:	1000031e 	bne	r2,zero,8110a950 <bPreParserV2+0x20c>
8110a944:	e0bffb07 	ldb	r2,-20(fp)
8110a948:	10801f18 	cmpnei	r2,r2,124
8110a94c:	103fde1e 	bne	r2,zero,8110a8c8 <__reset+0xfb0ea8c8>
        (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a950:	e0bff817 	ldw	r2,-32(fp)
8110a954:	00c00284 	movi	r3,10
8110a958:	10c00005 	stb	r3,0(r2)

        if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
8110a95c:	e0bffb07 	ldb	r2,-20(fp)
8110a960:	10800ea0 	cmpeqi	r2,r2,58
8110a964:	1000031e 	bne	r2,zero,8110a974 <bPreParserV2+0x230>
8110a968:	e0bffb07 	ldb	r2,-20(fp)
8110a96c:	10801f18 	cmpnei	r2,r2,124
8110a970:	10001a1e 	bne	r2,zero,8110a9dc <bPreParserV2+0x298>
            xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
8110a974:	e0bffe17 	ldw	r2,-8(fp)
8110a978:	10800183 	ldbu	r2,6(r2)
8110a97c:	10803fcc 	andi	r2,r2,255
8110a980:	10800828 	cmpgeui	r2,r2,32
8110a984:	1000041e 	bne	r2,zero,8110a998 <bPreParserV2+0x254>
8110a988:	e0bffe17 	ldw	r2,-8(fp)
8110a98c:	10800183 	ldbu	r2,6(r2)
8110a990:	14003fcc 	andi	r16,r2,255
8110a994:	00000106 	br	8110a99c <bPreParserV2+0x258>
8110a998:	04000804 	movi	r16,32
8110a99c:	e0bffb44 	addi	r2,fp,-19
8110a9a0:	1009883a 	mov	r4,r2
8110a9a4:	1111c780 	call	81111c78 <atoi>
8110a9a8:	1009883a 	mov	r4,r2
8110a9ac:	e0fffe17 	ldw	r3,-8(fp)
8110a9b0:	80800104 	addi	r2,r16,4
8110a9b4:	1085883a 	add	r2,r2,r2
8110a9b8:	1885883a 	add	r2,r3,r2
8110a9bc:	1100000d 	sth	r4,0(r2)
            xPerParcedBuffer->ucNofBytes++;
8110a9c0:	e0bffe17 	ldw	r2,-8(fp)
8110a9c4:	10800183 	ldbu	r2,6(r2)
8110a9c8:	10800044 	addi	r2,r2,1
8110a9cc:	1007883a 	mov	r3,r2
8110a9d0:	e0bffe17 	ldw	r2,-8(fp)
8110a9d4:	10c00185 	stb	r3,6(r2)
8110a9d8:	00000906 	br	8110aa00 <bPreParserV2+0x2bc>
        }
        else if ( c == FINAL_CHAR )
8110a9dc:	e0bffb07 	ldb	r2,-20(fp)
8110a9e0:	10800ed8 	cmpnei	r2,r2,59
8110a9e4:	1000061e 	bne	r2,zero,8110aa00 <bPreParserV2+0x2bc>
        {
            xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
8110a9e8:	e0bffb44 	addi	r2,fp,-19
8110a9ec:	1009883a 	mov	r4,r2
8110a9f0:	1111c780 	call	81111c78 <atoi>
8110a9f4:	1007883a 	mov	r3,r2
8110a9f8:	e0bffe17 	ldw	r2,-8(fp)
8110a9fc:	10c01245 	stb	r3,73(r2)
        }

    } while ( (c != FINAL_CHAR) && (siStrLen>i) );
8110aa00:	e0bffb07 	ldb	r2,-20(fp)
8110aa04:	10800ee0 	cmpeqi	r2,r2,59
8110aa08:	1000031e 	bne	r2,zero,8110aa18 <bPreParserV2+0x2d4>
8110aa0c:	e0bff90f 	ldh	r2,-28(fp)
8110aa10:	e0fff703 	ldbu	r3,-36(fp)
8110aa14:	18bfa516 	blt	r3,r2,8110a8ac <__reset+0xfb0ea8ac>


    if ( c == FINAL_CHAR )
8110aa18:	e0bffb07 	ldb	r2,-20(fp)
8110aa1c:	10800ed8 	cmpnei	r2,r2,59
8110aa20:	1000191e 	bne	r2,zero,8110aa88 <bPreParserV2+0x344>
        if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
8110aa24:	e0bffe17 	ldw	r2,-8(fp)
8110aa28:	10c01243 	ldbu	r3,73(r2)
8110aa2c:	e0bffe17 	ldw	r2,-8(fp)
8110aa30:	10801203 	ldbu	r2,72(r2)
8110aa34:	18c03fcc 	andi	r3,r3,255
8110aa38:	10803fcc 	andi	r2,r2,255
8110aa3c:	1880031e 	bne	r3,r2,8110aa4c <bPreParserV2+0x308>
            bSuccess = TRUE;
8110aa40:	00800044 	movi	r2,1
8110aa44:	e0bff615 	stw	r2,-40(fp)
8110aa48:	00001006 	br	8110aa8c <bPreParserV2+0x348>
        } else {
            /* Wrong CRC */
            #ifdef DEBUG_ON
                fprintf(fp,"Wrong CRC. Expected = %hhu, received = %hhu\n", xPerParcedBuffer->ucCalculatedCRC8, xPerParcedBuffer->ucMessageCRC8 );
8110aa4c:	d0e04f17 	ldw	r3,-32452(gp)
8110aa50:	e0bffe17 	ldw	r2,-8(fp)
8110aa54:	10801203 	ldbu	r2,72(r2)
8110aa58:	11003fcc 	andi	r4,r2,255
8110aa5c:	e0bffe17 	ldw	r2,-8(fp)
8110aa60:	10801243 	ldbu	r2,73(r2)
8110aa64:	10803fcc 	andi	r2,r2,255
8110aa68:	100f883a 	mov	r7,r2
8110aa6c:	200d883a 	mov	r6,r4
8110aa70:	01604534 	movhi	r5,33044
8110aa74:	29783804 	addi	r5,r5,-7968
8110aa78:	1809883a 	mov	r4,r3
8110aa7c:	1111dd40 	call	81111dd4 <fprintf>
            #endif
            bSuccess = FALSE;
8110aa80:	e03ff615 	stw	zero,-40(fp)
8110aa84:	00000106 	br	8110aa8c <bPreParserV2+0x348>
        }
    else
        bSuccess = FALSE; /* Index overflow in the buffer */
8110aa88:	e03ff615 	stw	zero,-40(fp)


    return bSuccess;
8110aa8c:	e0bff617 	ldw	r2,-40(fp)
}
8110aa90:	e6ffff04 	addi	sp,fp,-4
8110aa94:	dfc00217 	ldw	ra,8(sp)
8110aa98:	df000117 	ldw	fp,4(sp)
8110aa9c:	dc000017 	ldw	r16,0(sp)
8110aaa0:	dec00304 	addi	sp,sp,12
8110aaa4:	f800283a 	ret

8110aaa8 <vSenderComTask>:


OS_STK_DATA *pdata;

void vSenderComTask(void *task_data)
{
8110aaa8:	defff804 	addi	sp,sp,-32
8110aaac:	de00012e 	bgeu	sp,et,8110aab4 <vSenderComTask+0xc>
8110aab0:	003b68fa 	trap	3
8110aab4:	dfc00715 	stw	ra,28(sp)
8110aab8:	df000615 	stw	fp,24(sp)
8110aabc:	df000604 	addi	fp,sp,24
8110aac0:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    OS_STK_DATA data;
    bool bSuccess;
    int desligarEm = 0;
8110aac4:	e03ffb15 	stw	zero,-20(fp)

    eSenderMode = sConfiguringSender;
8110aac8:	e03ffa15 	stw	zero,-24(fp)

    #ifdef DEBUG_ON
        debug(fp,"Sender Comm Task. (Task on)\n");
8110aacc:	d0a04f17 	ldw	r2,-32452(gp)
8110aad0:	100f883a 	mov	r7,r2
8110aad4:	01800704 	movi	r6,28
8110aad8:	01400044 	movi	r5,1
8110aadc:	01204534 	movhi	r4,33044
8110aae0:	21384404 	addi	r4,r4,-7920
8110aae4:	11124700 	call	81112470 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110aae8:	e0bffa17 	ldw	r2,-24(fp)
8110aaec:	10c00060 	cmpeqi	r3,r2,1
8110aaf0:	1800091e 	bne	r3,zero,8110ab18 <vSenderComTask+0x70>
8110aaf4:	0080052e 	bgeu	zero,r2,8110ab0c <vSenderComTask+0x64>
8110aaf8:	10c000a0 	cmpeqi	r3,r2,2
8110aafc:	1800471e 	bne	r3,zero,8110ac1c <vSenderComTask+0x174>
8110ab00:	10800160 	cmpeqi	r2,r2,5
8110ab04:	10002c1e 	bne	r2,zero,8110abb8 <vSenderComTask+0x110>
8110ab08:	00003a06 	br	8110abf4 <vSenderComTask+0x14c>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
8110ab0c:	00800044 	movi	r2,1
8110ab10:	e0bffa15 	stw	r2,-24(fp)
                break;
8110ab14:	00004206 	br	8110ac20 <vSenderComTask+0x178>
                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/

                #ifdef DEBUG_ON
                    debug(fp,"Preparing the Start Sequence.\n");
8110ab18:	d0a04f17 	ldw	r2,-32452(gp)
8110ab1c:	100f883a 	mov	r7,r2
8110ab20:	01800784 	movi	r6,30
8110ab24:	01400044 	movi	r5,1
8110ab28:	01204534 	movhi	r4,33044
8110ab2c:	21384c04 	addi	r4,r4,-7888
8110ab30:	11124700 	call	81112470 <fwrite>
                #endif

                /* id of the first message will be 1 */
                bSuccess = bSendUART32v2(START_STATUS_SEQUENCE, 1);
8110ab34:	01400044 	movi	r5,1
8110ab38:	01204534 	movhi	r4,33044
8110ab3c:	21385404 	addi	r4,r4,-7856
8110ab40:	110c7500 	call	8110c750 <bSendUART32v2>
8110ab44:	e0bffc15 	stw	r2,-16(fp)
                if ( bSuccess == TRUE ) {
8110ab48:	e0bffc17 	ldw	r2,-16(fp)
8110ab4c:	10800058 	cmpnei	r2,r2,1
8110ab50:	10000a1e 	bne	r2,zero,8110ab7c <vSenderComTask+0xd4>
                    eSenderMode = sDummySender;
8110ab54:	00800144 	movi	r2,5
8110ab58:	e0bffa15 	stw	r2,-24(fp)
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
8110ab5c:	d0a04f17 	ldw	r2,-32452(gp)
8110ab60:	100f883a 	mov	r7,r2
8110ab64:	01800d44 	movi	r6,53
8110ab68:	01400044 	movi	r5,1
8110ab6c:	01204534 	movhi	r4,33044
8110ab70:	21385704 	addi	r4,r4,-7844
8110ab74:	11124700 	call	81112470 <fwrite>
                        debug(fp,"Fail, try again in 5 seconds.\n");
                    #endif 
                    eSenderMode = sStartingConnSender;
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }
                break;
8110ab78:	00002906 	br	8110ac20 <vSenderComTask+0x178>
                    #ifdef DEBUG_ON
                        debug(fp,"Success, start message in the retransmission buffer.\n");
                    #endif                    
                } else {
                    #ifdef DEBUG_ON
                        debug(fp,"Fail, try again in 5 seconds.\n");
8110ab7c:	d0a04f17 	ldw	r2,-32452(gp)
8110ab80:	100f883a 	mov	r7,r2
8110ab84:	01800784 	movi	r6,30
8110ab88:	01400044 	movi	r5,1
8110ab8c:	01204534 	movhi	r4,33044
8110ab90:	21386504 	addi	r4,r4,-7788
8110ab94:	11124700 	call	81112470 <fwrite>
                    #endif 
                    eSenderMode = sStartingConnSender;
8110ab98:	00800044 	movi	r2,1
8110ab9c:	e0bffa15 	stw	r2,-24(fp)
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
8110aba0:	000f883a 	mov	r7,zero
8110aba4:	01800144 	movi	r6,5
8110aba8:	000b883a 	mov	r5,zero
8110abac:	0009883a 	mov	r4,zero
8110abb0:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>
                }
                break;
8110abb4:	00001a06 	br	8110ac20 <vSenderComTask+0x178>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
8110abb8:	00800144 	movi	r2,5
8110abbc:	e0bffa15 	stw	r2,-24(fp)

                #ifdef DEBUG_ON
                    debug(fp,"sDummySender\n");
8110abc0:	d0a04f17 	ldw	r2,-32452(gp)
8110abc4:	100f883a 	mov	r7,r2
8110abc8:	01800344 	movi	r6,13
8110abcc:	01400044 	movi	r5,1
8110abd0:	01204534 	movhi	r4,33044
8110abd4:	21386d04 	addi	r4,r4,-7756
8110abd8:	11124700 	call	81112470 <fwrite>
                #endif

				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
8110abdc:	000f883a 	mov	r7,zero
8110abe0:	01800284 	movi	r6,10
8110abe4:	000b883a 	mov	r5,zero
8110abe8:	0009883a 	mov	r4,zero
8110abec:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>

                break;
8110abf0:	00000b06 	br	8110ac20 <vSenderComTask+0x178>
            default:
                #ifdef DEBUG_ON
                    debug(fp,"Sender default\n");
8110abf4:	d0a04f17 	ldw	r2,-32452(gp)
8110abf8:	100f883a 	mov	r7,r2
8110abfc:	018003c4 	movi	r6,15
8110ac00:	01400044 	movi	r5,1
8110ac04:	01204534 	movhi	r4,33044
8110ac08:	21387104 	addi	r4,r4,-7740
8110ac0c:	11124700 	call	81112470 <fwrite>
                #endif
                eSenderMode = sDummySender;
8110ac10:	00800144 	movi	r2,5
8110ac14:	e0bffa15 	stw	r2,-24(fp)
                break;
8110ac18:	00000106 	br	8110ac20 <vSenderComTask+0x178>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
8110ac1c:	0001883a 	nop
                #endif
                eSenderMode = sDummySender;
                break;
        }

    }
8110ac20:	003fb106 	br	8110aae8 <__reset+0xfb0eaae8>

8110ac24 <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
8110ac24:	defffd04 	addi	sp,sp,-12
8110ac28:	de00012e 	bgeu	sp,et,8110ac30 <vSimMebTask+0xc>
8110ac2c:	003b68fa 	trap	3
8110ac30:	df000215 	stw	fp,8(sp)
8110ac34:	df000204 	addi	fp,sp,8
8110ac38:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
8110ac3c:	e03ffe15 	stw	zero,-8(fp)


	//SIMUCAM MAIN TASK


}
8110ac40:	0001883a 	nop
8110ac44:	e037883a 	mov	sp,fp
8110ac48:	df000017 	ldw	fp,0(sp)
8110ac4c:	dec00104 	addi	sp,sp,4
8110ac50:	f800283a 	ret

8110ac54 <vStackMonitor>:
    }
}

#else
#ifdef DEBUG_ON
void vStackMonitor(void *task_data) {
8110ac54:	deffd804 	addi	sp,sp,-160
8110ac58:	de00012e 	bgeu	sp,et,8110ac60 <vStackMonitor+0xc>
8110ac5c:	003b68fa 	trap	3
8110ac60:	dfc02715 	stw	ra,156(sp)
8110ac64:	df002615 	stw	fp,152(sp)
8110ac68:	df002604 	addi	fp,sp,152
8110ac6c:	e13fff15 	stw	r4,-4(fp)
	INT8U ucErrorCode = 0;
8110ac70:	e03fdc05 	stb	zero,-144(fp)
	OS_STK_DATA data;
	char cBuffer[128];


        debug(fp,"vStackMonitor, enter task.\n");
8110ac74:	d0a04f17 	ldw	r2,-32452(gp)
8110ac78:	100f883a 	mov	r7,r2
8110ac7c:	018006c4 	movi	r6,27
8110ac80:	01400044 	movi	r5,1
8110ac84:	01204534 	movhi	r4,33044
8110ac88:	21387504 	addi	r4,r4,-7724
8110ac8c:	11124700 	call	81112470 <fwrite>


    for (;;) {

    	fprintf(fp, "=========== STACK MONITOR =================\n" );
8110ac90:	d0a04f17 	ldw	r2,-32452(gp)
8110ac94:	100f883a 	mov	r7,r2
8110ac98:	01800b04 	movi	r6,44
8110ac9c:	01400044 	movi	r5,1
8110aca0:	01204534 	movhi	r4,33044
8110aca4:	21387c04 	addi	r4,r4,-7696
8110aca8:	11124700 	call	81112470 <fwrite>
    	fprintf(fp, " Task           Total               Free             In use  \n" );
8110acac:	d0a04f17 	ldw	r2,-32452(gp)
8110acb0:	100f883a 	mov	r7,r2
8110acb4:	01800f84 	movi	r6,62
8110acb8:	01400044 	movi	r5,1
8110acbc:	01204534 	movhi	r4,33044
8110acc0:	21388804 	addi	r4,r4,-7648
8110acc4:	11124700 	call	81112470 <fwrite>

    	ucErrorCode = OSTaskStkChk( RECEIVER_TASK_PRIO , &data);
8110acc8:	e0bfdd04 	addi	r2,fp,-140
8110accc:	100b883a 	mov	r5,r2
8110acd0:	01000784 	movi	r4,30
8110acd4:	11318a80 	call	811318a8 <OSTaskStkChk>
8110acd8:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE ) {
8110acdc:	e0bfdc03 	ldbu	r2,-144(fp)
8110ace0:	10000f1e 	bne	r2,zero,8110ad20 <vStackMonitor+0xcc>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110ace4:	d1204f17 	ldw	r4,-32452(gp)
    				"RECEIVER_TASK",
    				data.OSFree + data.OSUsed,
8110ace8:	e0ffdd17 	ldw	r3,-140(fp)
8110acec:	e0bfde17 	ldw	r2,-136(fp)
    	fprintf(fp, " Task           Total               Free             In use  \n" );

    	ucErrorCode = OSTaskStkChk( RECEIVER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110acf0:	188b883a 	add	r5,r3,r2
8110acf4:	e0bfdd17 	ldw	r2,-140(fp)
8110acf8:	e0ffde17 	ldw	r3,-136(fp)
8110acfc:	d8c00115 	stw	r3,4(sp)
8110ad00:	d8800015 	stw	r2,0(sp)
8110ad04:	280f883a 	mov	r7,r5
8110ad08:	01a04534 	movhi	r6,33044
8110ad0c:	31b89804 	addi	r6,r6,-7584
8110ad10:	01604534 	movhi	r5,33044
8110ad14:	29789c04 	addi	r5,r5,-7568
8110ad18:	1111dd40 	call	81111dd4 <fprintf>
8110ad1c:	00000706 	br	8110ad3c <vStackMonitor+0xe8>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get RECEIVER_TASK stack \n" );
8110ad20:	d0a04f17 	ldw	r2,-32452(gp)
8110ad24:	100f883a 	mov	r7,r2
8110ad28:	01800904 	movi	r6,36
8110ad2c:	01400044 	movi	r5,1
8110ad30:	01204534 	movhi	r4,33044
8110ad34:	2138ab04 	addi	r4,r4,-7508
8110ad38:	11124700 	call	81112470 <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( TIMEOUT_CHECKER_PRIO , &data);
8110ad3c:	e0bfdd04 	addi	r2,fp,-140
8110ad40:	100b883a 	mov	r5,r2
8110ad44:	01000704 	movi	r4,28
8110ad48:	11318a80 	call	811318a8 <OSTaskStkChk>
8110ad4c:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110ad50:	e0bfdc03 	ldbu	r2,-144(fp)
8110ad54:	10000f1e 	bne	r2,zero,8110ad94 <vStackMonitor+0x140>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110ad58:	d1204f17 	ldw	r4,-32452(gp)
    				"TIMEOUT_CHECKER",
    				data.OSFree + data.OSUsed,
8110ad5c:	e0ffdd17 	ldw	r3,-140(fp)
8110ad60:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( TIMEOUT_CHECKER_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110ad64:	188b883a 	add	r5,r3,r2
8110ad68:	e0bfdd17 	ldw	r2,-140(fp)
8110ad6c:	e0ffde17 	ldw	r3,-136(fp)
8110ad70:	d8c00115 	stw	r3,4(sp)
8110ad74:	d8800015 	stw	r2,0(sp)
8110ad78:	280f883a 	mov	r7,r5
8110ad7c:	01a04534 	movhi	r6,33044
8110ad80:	31b8b504 	addi	r6,r6,-7468
8110ad84:	01604534 	movhi	r5,33044
8110ad88:	29789c04 	addi	r5,r5,-7568
8110ad8c:	1111dd40 	call	81111dd4 <fprintf>
8110ad90:	00000706 	br	8110adb0 <vStackMonitor+0x15c>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get TIMEOUT_CHECKER stack \n" );
8110ad94:	d0a04f17 	ldw	r2,-32452(gp)
8110ad98:	100f883a 	mov	r7,r2
8110ad9c:	01800984 	movi	r6,38
8110ada0:	01400044 	movi	r5,1
8110ada4:	01204534 	movhi	r4,33044
8110ada8:	2138b904 	addi	r4,r4,-7452
8110adac:	11124700 	call	81112470 <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( PARSER_TASK_PRIO , &data);
8110adb0:	e0bfdd04 	addi	r2,fp,-140
8110adb4:	100b883a 	mov	r5,r2
8110adb8:	01000684 	movi	r4,26
8110adbc:	11318a80 	call	811318a8 <OSTaskStkChk>
8110adc0:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110adc4:	e0bfdc03 	ldbu	r2,-144(fp)
8110adc8:	10000f1e 	bne	r2,zero,8110ae08 <vStackMonitor+0x1b4>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110adcc:	d1204f17 	ldw	r4,-32452(gp)
    				"PARSER_TASK",
    				data.OSFree + data.OSUsed,
8110add0:	e0ffdd17 	ldw	r3,-140(fp)
8110add4:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( PARSER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110add8:	188b883a 	add	r5,r3,r2
8110addc:	e0bfdd17 	ldw	r2,-140(fp)
8110ade0:	e0ffde17 	ldw	r3,-136(fp)
8110ade4:	d8c00115 	stw	r3,4(sp)
8110ade8:	d8800015 	stw	r2,0(sp)
8110adec:	280f883a 	mov	r7,r5
8110adf0:	01a04534 	movhi	r6,33044
8110adf4:	31b8c304 	addi	r6,r6,-7412
8110adf8:	01604534 	movhi	r5,33044
8110adfc:	29789c04 	addi	r5,r5,-7568
8110ae00:	1111dd40 	call	81111dd4 <fprintf>
8110ae04:	00000706 	br	8110ae24 <vStackMonitor+0x1d0>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get PARSER_TASK stack \n" );
8110ae08:	d0a04f17 	ldw	r2,-32452(gp)
8110ae0c:	100f883a 	mov	r7,r2
8110ae10:	01800884 	movi	r6,34
8110ae14:	01400044 	movi	r5,1
8110ae18:	01204534 	movhi	r4,33044
8110ae1c:	2138c604 	addi	r4,r4,-7400
8110ae20:	11124700 	call	81112470 <fwrite>
    	}


    	ucErrorCode = OSTaskStkChk( OUT_ACK_TASK_PRIO , &data);
8110ae24:	e0bfdd04 	addi	r2,fp,-140
8110ae28:	100b883a 	mov	r5,r2
8110ae2c:	01000644 	movi	r4,25
8110ae30:	11318a80 	call	811318a8 <OSTaskStkChk>
8110ae34:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110ae38:	e0bfdc03 	ldbu	r2,-144(fp)
8110ae3c:	10000f1e 	bne	r2,zero,8110ae7c <vStackMonitor+0x228>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110ae40:	d1204f17 	ldw	r4,-32452(gp)
    				"OUT_ACK_TASK",
    				data.OSFree + data.OSUsed,
8110ae44:	e0ffdd17 	ldw	r3,-140(fp)
8110ae48:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( OUT_ACK_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110ae4c:	188b883a 	add	r5,r3,r2
8110ae50:	e0bfdd17 	ldw	r2,-140(fp)
8110ae54:	e0ffde17 	ldw	r3,-136(fp)
8110ae58:	d8c00115 	stw	r3,4(sp)
8110ae5c:	d8800015 	stw	r2,0(sp)
8110ae60:	280f883a 	mov	r7,r5
8110ae64:	01a04534 	movhi	r6,33044
8110ae68:	31b8cf04 	addi	r6,r6,-7364
8110ae6c:	01604534 	movhi	r5,33044
8110ae70:	29789c04 	addi	r5,r5,-7568
8110ae74:	1111dd40 	call	81111dd4 <fprintf>
8110ae78:	00000706 	br	8110ae98 <vStackMonitor+0x244>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get OUT_ACK_TASK stack \n" );
8110ae7c:	d0a04f17 	ldw	r2,-32452(gp)
8110ae80:	100f883a 	mov	r7,r2
8110ae84:	018008c4 	movi	r6,35
8110ae88:	01400044 	movi	r5,1
8110ae8c:	01204534 	movhi	r4,33044
8110ae90:	2138d304 	addi	r4,r4,-7348
8110ae94:	11124700 	call	81112470 <fwrite>
    	}



    	ucErrorCode = OSTaskStkChk( SENDER_TASK_PRIO , &data);
8110ae98:	e0bfdd04 	addi	r2,fp,-140
8110ae9c:	100b883a 	mov	r5,r2
8110aea0:	01000604 	movi	r4,24
8110aea4:	11318a80 	call	811318a8 <OSTaskStkChk>
8110aea8:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110aeac:	e0bfdc03 	ldbu	r2,-144(fp)
8110aeb0:	10000f1e 	bne	r2,zero,8110aef0 <vStackMonitor+0x29c>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110aeb4:	d1204f17 	ldw	r4,-32452(gp)
    				"SENDER_TASK",
    				data.OSFree + data.OSUsed,
8110aeb8:	e0ffdd17 	ldw	r3,-140(fp)
8110aebc:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( SENDER_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110aec0:	188b883a 	add	r5,r3,r2
8110aec4:	e0bfdd17 	ldw	r2,-140(fp)
8110aec8:	e0ffde17 	ldw	r3,-136(fp)
8110aecc:	d8c00115 	stw	r3,4(sp)
8110aed0:	d8800015 	stw	r2,0(sp)
8110aed4:	280f883a 	mov	r7,r5
8110aed8:	01a04534 	movhi	r6,33044
8110aedc:	31b8dc04 	addi	r6,r6,-7312
8110aee0:	01604534 	movhi	r5,33044
8110aee4:	29789c04 	addi	r5,r5,-7568
8110aee8:	1111dd40 	call	81111dd4 <fprintf>
8110aeec:	00000706 	br	8110af0c <vStackMonitor+0x2b8>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get SENDER_TASK stack \n" );
8110aef0:	d0a04f17 	ldw	r2,-32452(gp)
8110aef4:	100f883a 	mov	r7,r2
8110aef8:	01800884 	movi	r6,34
8110aefc:	01400044 	movi	r5,1
8110af00:	01204534 	movhi	r4,33044
8110af04:	2138df04 	addi	r4,r4,-7300
8110af08:	11124700 	call	81112470 <fwrite>
    	}



    	ucErrorCode = OSTaskStkChk( IN_ACK_TASK_PRIO , &data);
8110af0c:	e0bfdd04 	addi	r2,fp,-140
8110af10:	100b883a 	mov	r5,r2
8110af14:	010005c4 	movi	r4,23
8110af18:	11318a80 	call	811318a8 <OSTaskStkChk>
8110af1c:	e0bfdc05 	stb	r2,-144(fp)
    	if ( ucErrorCode == OS_ERR_NONE  ) {
8110af20:	e0bfdc03 	ldbu	r2,-144(fp)
8110af24:	10000f1e 	bne	r2,zero,8110af64 <vStackMonitor+0x310>

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110af28:	d1204f17 	ldw	r4,-32452(gp)
    				"IN_ACK_TASK",
    				data.OSFree + data.OSUsed,
8110af2c:	e0ffdd17 	ldw	r3,-140(fp)
8110af30:	e0bfde17 	ldw	r2,-136(fp)


    	ucErrorCode = OSTaskStkChk( IN_ACK_TASK_PRIO , &data);
    	if ( ucErrorCode == OS_ERR_NONE  ) {

    		fprintf(fp, " %s           %4ld              %4ld              %4ld  \n",
8110af34:	188b883a 	add	r5,r3,r2
8110af38:	e0bfdd17 	ldw	r2,-140(fp)
8110af3c:	e0ffde17 	ldw	r3,-136(fp)
8110af40:	d8c00115 	stw	r3,4(sp)
8110af44:	d8800015 	stw	r2,0(sp)
8110af48:	280f883a 	mov	r7,r5
8110af4c:	01a04534 	movhi	r6,33044
8110af50:	31b8e804 	addi	r6,r6,-7264
8110af54:	01604534 	movhi	r5,33044
8110af58:	29789c04 	addi	r5,r5,-7568
8110af5c:	1111dd40 	call	81111dd4 <fprintf>
8110af60:	00000706 	br	8110af80 <vStackMonitor+0x32c>
    				data.OSFree + data.OSUsed,
                    data.OSFree,
                    data.OSUsed );

    	} else {
    		fprintf(fp, " Could not get IN_ACK_TASK stack \n" );
8110af64:	d0a04f17 	ldw	r2,-32452(gp)
8110af68:	100f883a 	mov	r7,r2
8110af6c:	01800884 	movi	r6,34
8110af70:	01400044 	movi	r5,1
8110af74:	01204534 	movhi	r4,33044
8110af78:	2138eb04 	addi	r4,r4,-7252
8110af7c:	11124700 	call	81112470 <fwrite>
    	}

    	fprintf(fp, "\n" );
8110af80:	d0a04f17 	ldw	r2,-32452(gp)
8110af84:	100b883a 	mov	r5,r2
8110af88:	01000284 	movi	r4,10
8110af8c:	1111e4c0 	call	81111e4c <fputc>

    	OSTimeDlyHMSM(0, 0, 10, 0);
8110af90:	000f883a 	mov	r7,zero
8110af94:	01800284 	movi	r6,10
8110af98:	000b883a 	mov	r5,zero
8110af9c:	0009883a 	mov	r4,zero
8110afa0:	1131f0c0 	call	81131f0c <OSTimeDlyHMSM>
    }
8110afa4:	003f3a06 	br	8110ac90 <__reset+0xfb0eac90>

8110afa8 <vTimeoutCheckerTaskv2>:

#include "timeout_checker_ack_task.h"



void vTimeoutCheckerTaskv2(void *task_data) {
8110afa8:	defffc04 	addi	sp,sp,-16
8110afac:	de00012e 	bgeu	sp,et,8110afb4 <vTimeoutCheckerTaskv2+0xc>
8110afb0:	003b68fa 	trap	3
8110afb4:	dfc00315 	stw	ra,12(sp)
8110afb8:	df000215 	stw	fp,8(sp)
8110afbc:	df000204 	addi	fp,sp,8
8110afc0:	e13fff15 	stw	r4,-4(fp)
	INT8U ucErrorCode = 0;
8110afc4:	e03ffe05 	stb	zero,-8(fp)

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
8110afc8:	d0a04f17 	ldw	r2,-32452(gp)
8110afcc:	100f883a 	mov	r7,r2
8110afd0:	01800844 	movi	r6,33
8110afd4:	01400044 	movi	r5,1
8110afd8:	01204534 	movhi	r4,33044
8110afdc:	2138f404 	addi	r4,r4,-7216
8110afe0:	11124700 	call	81112470 <fwrite>
    #endif   

    for (;;) {
        OSSemPend(xSemTimeoutChecker, 0, &ucErrorCode);
8110afe4:	d0a05417 	ldw	r2,-32432(gp)
8110afe8:	e1bffe04 	addi	r6,fp,-8
8110afec:	000b883a 	mov	r5,zero
8110aff0:	1009883a 	mov	r4,r2
8110aff4:	112ff740 	call	8112ff74 <OSSemPend>
        if ( ucErrorCode == OS_NO_ERR ) {
8110aff8:	e0bffe03 	ldbu	r2,-8(fp)
8110affc:	10803fcc 	andi	r2,r2,255
8110b000:	1000021e 	bne	r2,zero,8110b00c <vTimeoutCheckerTaskv2+0x64>
            /* Just check the restransmission buffer */
            vCheck();
8110b004:	110b0140 	call	8110b014 <vCheck>
8110b008:	003ff606 	br	8110afe4 <__reset+0xfb0eafe4>
        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
8110b00c:	110ef8c0 	call	8110ef8c <vFailGetBlockingSemTimeoutTask>
        }
    }
8110b010:	003ff406 	br	8110afe4 <__reset+0xfb0eafe4>

8110b014 <vCheck>:
}


void vCheck( void ) {
8110b014:	defffd04 	addi	sp,sp,-12
8110b018:	de00012e 	bgeu	sp,et,8110b020 <vCheck+0xc>
8110b01c:	003b68fa 	trap	3
8110b020:	dfc00215 	stw	ra,8(sp)
8110b024:	df000115 	stw	fp,4(sp)
8110b028:	df000104 	addi	fp,sp,4
	INT8U ucErrorCode = 0;
8110b02c:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucHashVerification = 0;
8110b030:	e03fff05 	stb	zero,-4(fp)

    ucHashVerification = 0;
8110b034:	e03fff05 	stb	zero,-4(fp)
    ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);
8110b038:	d0a05583 	ldbu	r2,-32426(gp)
8110b03c:	10803fcc 	andi	r2,r2,255
8110b040:	10800218 	cmpnei	r2,r2,8
8110b044:	1000021e 	bne	r2,zero,8110b050 <vCheck+0x3c>
8110b048:	00c00104 	movi	r3,4
8110b04c:	00000106 	br	8110b054 <vCheck+0x40>
8110b050:	0007883a 	mov	r3,zero
8110b054:	d0a05e03 	ldbu	r2,-32392(gp)
8110b058:	10803fcc 	andi	r2,r2,255
8110b05c:	10800218 	cmpnei	r2,r2,8
8110b060:	1000021e 	bne	r2,zero,8110b06c <vCheck+0x58>
8110b064:	00800084 	movi	r2,2
8110b068:	00000106 	br	8110b070 <vCheck+0x5c>
8110b06c:	0005883a 	mov	r2,zero
8110b070:	1884b03a 	or	r2,r3,r2
8110b074:	1007883a 	mov	r3,r2
8110b078:	d0a05e43 	ldbu	r2,-32391(gp)
8110b07c:	10803fcc 	andi	r2,r2,255
8110b080:	108001a0 	cmpeqi	r2,r2,6
8110b084:	1884b03a 	or	r2,r3,r2
8110b088:	1007883a 	mov	r3,r2
8110b08c:	e0bfff03 	ldbu	r2,-4(fp)
8110b090:	1884b03a 	or	r2,r3,r2
8110b094:	e0bfff05 	stb	r2,-4(fp)

    /* Nothing in the (re)transmission buffer */
    if ( ucHashVerification == 0b00000111 )
8110b098:	e0bfff03 	ldbu	r2,-4(fp)
8110b09c:	108001d8 	cmpnei	r2,r2,7
8110b0a0:	10003726 	beq	r2,zero,8110b180 <vCheck+0x16c>
        return;

    /* Try to get the Mutex of the UART */
	OSMutexPend(xTxUARTMutex, 0, &ucErrorCode); /* Blocking */
8110b0a4:	d0a05d17 	ldw	r2,-32396(gp)
8110b0a8:	e0ffff44 	addi	r3,fp,-3
8110b0ac:	180d883a 	mov	r6,r3
8110b0b0:	000b883a 	mov	r5,zero
8110b0b4:	1009883a 	mov	r4,r2
8110b0b8:	112df680 	call	8112df68 <OSMutexPend>
    if ( ucErrorCode != OS_NO_ERR ) {
8110b0bc:	e0bfff43 	ldbu	r2,-3(fp)
8110b0c0:	10803fcc 	andi	r2,r2,255
8110b0c4:	10000826 	beq	r2,zero,8110b0e8 <vCheck+0xd4>
        /* Should never get here, is a blocking operation */
		#ifdef DEBUG_ON
			debug(fp,"Should never get here. Trying to get xTxUARTMutex. (vCheck)\n");
8110b0c8:	d0a04f17 	ldw	r2,-32452(gp)
8110b0cc:	100f883a 	mov	r7,r2
8110b0d0:	01800f04 	movi	r6,60
8110b0d4:	01400044 	movi	r5,1
8110b0d8:	01204534 	movhi	r4,33044
8110b0dc:	2138fd04 	addi	r4,r4,-7180
8110b0e0:	11124700 	call	81112470 <fwrite>
		#endif
        return;
8110b0e4:	00002706 	br	8110b184 <vCheck+0x170>

    /* ---> At this point we have the Mutex of TX UART, let's try to get the mutex of all retransmission buffer. */


    /* There are any spot used in the xBuffer128? */
    if ( 0b00000001 != (0b00000001 & ucHashVerification ) )
8110b0e8:	e0bfff03 	ldbu	r2,-4(fp)
8110b0ec:	1080004c 	andi	r2,r2,1
8110b0f0:	10803fcc 	andi	r2,r2,255
8110b0f4:	1000021e 	bne	r2,zero,8110b100 <vCheck+0xec>
        vCheckRetransmission128();
8110b0f8:	110b1980 	call	8110b198 <vCheckRetransmission128>
8110b0fc:	00000506 	br	8110b114 <vCheck+0x100>
    else
    	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128)); /* For consistency with SemCount128 */
8110b100:	01800604 	movi	r6,24
8110b104:	000b883a 	mov	r5,zero
8110b108:	01204574 	movhi	r4,33045
8110b10c:	21296d04 	addi	r4,r4,-23116
8110b110:	1112fd40 	call	81112fd4 <memset>


        /* There are any spot used in the xBuffer64? */
    if ( 0b00000010 != (0b00000010 & ucHashVerification ) )
8110b114:	e0bfff03 	ldbu	r2,-4(fp)
8110b118:	1080008c 	andi	r2,r2,2
8110b11c:	10803fcc 	andi	r2,r2,255
8110b120:	1000021e 	bne	r2,zero,8110b12c <vCheck+0x118>
        vCheckRetransmission64();
8110b124:	110b41c0 	call	8110b41c <vCheckRetransmission64>
8110b128:	00000506 	br	8110b140 <vCheck+0x12c>
    else
        memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64)); /* For consistency with SemCount64 */
8110b12c:	01800804 	movi	r6,32
8110b130:	000b883a 	mov	r5,zero
8110b134:	01204574 	movhi	r4,33045
8110b138:	21297304 	addi	r4,r4,-23092
8110b13c:	1112fd40 	call	81112fd4 <memset>

    /* There are any spot used in the xBuffer32? */
    if ( 0b00000100 != (0b00000100 & ucHashVerification ) )
8110b140:	e0bfff03 	ldbu	r2,-4(fp)
8110b144:	1080010c 	andi	r2,r2,4
8110b148:	10803fcc 	andi	r2,r2,255
8110b14c:	1000021e 	bne	r2,zero,8110b158 <vCheck+0x144>
        vCheckRetransmission32();
8110b150:	110b6a80 	call	8110b6a8 <vCheckRetransmission32>
8110b154:	00000506 	br	8110b16c <vCheck+0x158>
    else
    	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32)); /* For consistency with SemCount32 */
8110b158:	01800804 	movi	r6,32
8110b15c:	000b883a 	mov	r5,zero
8110b160:	01204574 	movhi	r4,33045
8110b164:	21297b04 	addi	r4,r4,-23060
8110b168:	1112fd40 	call	81112fd4 <memset>


    OSMutexPost(xTxUARTMutex);
8110b16c:	d0a05d17 	ldw	r2,-32396(gp)
8110b170:	1009883a 	mov	r4,r2
8110b174:	112e50c0 	call	8112e50c <OSMutexPost>

    return;
8110b178:	0001883a 	nop
8110b17c:	00000106 	br	8110b184 <vCheck+0x170>
    ucHashVerification = 0;
    ucHashVerification |= (( SemCount32 == N_32 ) << 2) | ( ( SemCount64 == N_64 ) << 1 ) | (( SemCount128 == N_128 ) << 0);

    /* Nothing in the (re)transmission buffer */
    if ( ucHashVerification == 0b00000111 )
        return;
8110b180:	0001883a 	nop


    OSMutexPost(xTxUARTMutex);

    return;
}
8110b184:	e037883a 	mov	sp,fp
8110b188:	dfc00117 	ldw	ra,4(sp)
8110b18c:	df000017 	ldw	fp,0(sp)
8110b190:	dec00204 	addi	sp,sp,8
8110b194:	f800283a 	ret

8110b198 <vCheckRetransmission128>:

inline void vCheckRetransmission128( void ) {
8110b198:	defffd04 	addi	sp,sp,-12
8110b19c:	de00012e 	bgeu	sp,et,8110b1a4 <vCheckRetransmission128+0xc>
8110b1a0:	003b68fa 	trap	3
8110b1a4:	dfc00215 	stw	ra,8(sp)
8110b1a8:	df000115 	stw	fp,4(sp)
8110b1ac:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110b1b0:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucIL = 0;
8110b1b4:	e03fff05 	stb	zero,-4(fp)

    OSMutexAccept(xMutexBuffer128, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110b1b8:	d0a05917 	ldw	r2,-32412(gp)
8110b1bc:	e0ffff44 	addi	r3,fp,-3
8110b1c0:	180b883a 	mov	r5,r3
8110b1c4:	1009883a 	mov	r4,r2
8110b1c8:	112d8e80 	call	8112d8e8 <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110b1cc:	e0bfff43 	ldbu	r2,-3(fp)
8110b1d0:	10803fcc 	andi	r2,r2,255
8110b1d4:	10008b1e 	bne	r2,zero,8110b404 <vCheckRetransmission128+0x26c>
    

    /* ---> At this point we have access to the xBuffer128*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_128; ucIL++) {
8110b1d8:	e03fff05 	stb	zero,-4(fp)
8110b1dc:	00008106 	br	8110b3e4 <vCheckRetransmission128+0x24c>
        /* Check if in use */
        if ( xInUseRetrans.b128[ucIL] == TRUE ) {
8110b1e0:	e0ffff03 	ldbu	r3,-4(fp)
8110b1e4:	00a04574 	movhi	r2,33045
8110b1e8:	10a96d04 	addi	r2,r2,-23116
8110b1ec:	18c7883a 	add	r3,r3,r3
8110b1f0:	18c7883a 	add	r3,r3,r3
8110b1f4:	10c5883a 	add	r2,r2,r3
8110b1f8:	10800017 	ldw	r2,0(r2)
8110b1fc:	10800058 	cmpnei	r2,r2,1
8110b200:	1000751e 	bne	r2,zero,8110b3d8 <vCheckRetransmission128+0x240>

            if ( xBuffer128[ucIL].bSent == TRUE )
8110b204:	e0ffff03 	ldbu	r3,-4(fp)
8110b208:	00a04574 	movhi	r2,33045
8110b20c:	10a98304 	addi	r2,r2,-23028
8110b210:	18c02324 	muli	r3,r3,140
8110b214:	10c5883a 	add	r2,r2,r3
8110b218:	10802004 	addi	r2,r2,128
8110b21c:	10800017 	ldw	r2,0(r2)
8110b220:	10800058 	cmpnei	r2,r2,1
8110b224:	1000211e 	bne	r2,zero,8110b2ac <vCheckRetransmission128+0x114>
                if ( ++xBuffer128[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110b228:	e0ffff03 	ldbu	r3,-4(fp)
8110b22c:	00a04574 	movhi	r2,33045
8110b230:	10a98304 	addi	r2,r2,-23028
8110b234:	19002324 	muli	r4,r3,140
8110b238:	1105883a 	add	r2,r2,r4
8110b23c:	10802184 	addi	r2,r2,134
8110b240:	1080000b 	ldhu	r2,0(r2)
8110b244:	10800044 	addi	r2,r2,1
8110b248:	100b883a 	mov	r5,r2
8110b24c:	00a04574 	movhi	r2,33045
8110b250:	10a98304 	addi	r2,r2,-23028
8110b254:	19002324 	muli	r4,r3,140
8110b258:	1105883a 	add	r2,r2,r4
8110b25c:	10802184 	addi	r2,r2,134
8110b260:	1140000d 	sth	r5,0(r2)
8110b264:	00a04574 	movhi	r2,33045
8110b268:	10a98304 	addi	r2,r2,-23028
8110b26c:	18c02324 	muli	r3,r3,140
8110b270:	10c5883a 	add	r2,r2,r3
8110b274:	10802184 	addi	r2,r2,134
8110b278:	1080000b 	ldhu	r2,0(r2)
8110b27c:	10bfffcc 	andi	r2,r2,65535
8110b280:	10a0001c 	xori	r2,r2,32768
8110b284:	10a00004 	addi	r2,r2,-32768
8110b288:	10800090 	cmplti	r2,r2,2
8110b28c:	1000071e 	bne	r2,zero,8110b2ac <vCheckRetransmission128+0x114>
                    xBuffer128[ucIL].bSent = FALSE;
8110b290:	e0ffff03 	ldbu	r3,-4(fp)
8110b294:	00a04574 	movhi	r2,33045
8110b298:	10a98304 	addi	r2,r2,-23028
8110b29c:	18c02324 	muli	r3,r3,140
8110b2a0:	10c5883a 	add	r2,r2,r3
8110b2a4:	10802004 	addi	r2,r2,128
8110b2a8:	10000015 	stw	zero,0(r2)

            if ( xBuffer128[ucIL].bSent == FALSE ) {
8110b2ac:	e0ffff03 	ldbu	r3,-4(fp)
8110b2b0:	00a04574 	movhi	r2,33045
8110b2b4:	10a98304 	addi	r2,r2,-23028
8110b2b8:	18c02324 	muli	r3,r3,140
8110b2bc:	10c5883a 	add	r2,r2,r3
8110b2c0:	10802004 	addi	r2,r2,128
8110b2c4:	10800017 	ldw	r2,0(r2)
8110b2c8:	1000431e 	bne	r2,zero,8110b3d8 <vCheckRetransmission128+0x240>
                puts(xBuffer128[ucIL].buffer);
8110b2cc:	e0bfff03 	ldbu	r2,-4(fp)
8110b2d0:	10c02324 	muli	r3,r2,140
8110b2d4:	00a04574 	movhi	r2,33045
8110b2d8:	10a98304 	addi	r2,r2,-23028
8110b2dc:	1885883a 	add	r2,r3,r2
8110b2e0:	1009883a 	mov	r4,r2
8110b2e4:	11134200 	call	81113420 <puts>
                xBuffer128[ucIL].bSent = TRUE;
8110b2e8:	e0ffff03 	ldbu	r3,-4(fp)
8110b2ec:	00a04574 	movhi	r2,33045
8110b2f0:	10a98304 	addi	r2,r2,-23028
8110b2f4:	18c02324 	muli	r3,r3,140
8110b2f8:	10c5883a 	add	r2,r2,r3
8110b2fc:	10802004 	addi	r2,r2,128
8110b300:	00c00044 	movi	r3,1
8110b304:	10c00015 	stw	r3,0(r2)
                xBuffer128[ucIL].usiTimeOut = 0;
8110b308:	e0ffff03 	ldbu	r3,-4(fp)
8110b30c:	00a04574 	movhi	r2,33045
8110b310:	10a98304 	addi	r2,r2,-23028
8110b314:	18c02324 	muli	r3,r3,140
8110b318:	10c5883a 	add	r2,r2,r3
8110b31c:	10802184 	addi	r2,r2,134
8110b320:	1000000d 	sth	zero,0(r2)

                /* Check if already tried all the times */
                if ( ++xBuffer128[ucIL].ucNofRetries > N_RETRIES_COMM ) {
8110b324:	e0ffff03 	ldbu	r3,-4(fp)
8110b328:	00a04574 	movhi	r2,33045
8110b32c:	10a98304 	addi	r2,r2,-23028
8110b330:	19002324 	muli	r4,r3,140
8110b334:	1105883a 	add	r2,r2,r4
8110b338:	10802204 	addi	r2,r2,136
8110b33c:	10800003 	ldbu	r2,0(r2)
8110b340:	10800044 	addi	r2,r2,1
8110b344:	100b883a 	mov	r5,r2
8110b348:	00a04574 	movhi	r2,33045
8110b34c:	10a98304 	addi	r2,r2,-23028
8110b350:	19002324 	muli	r4,r3,140
8110b354:	1105883a 	add	r2,r2,r4
8110b358:	10802204 	addi	r2,r2,136
8110b35c:	11400005 	stb	r5,0(r2)
8110b360:	00a04574 	movhi	r2,33045
8110b364:	10a98304 	addi	r2,r2,-23028
8110b368:	18c02324 	muli	r3,r3,140
8110b36c:	10c5883a 	add	r2,r2,r3
8110b370:	10802204 	addi	r2,r2,136
8110b374:	10800003 	ldbu	r2,0(r2)
8110b378:	10803fcc 	andi	r2,r2,255
8110b37c:	108000b0 	cmpltui	r2,r2,2
8110b380:	1000151e 	bne	r2,zero,8110b3d8 <vCheckRetransmission128+0x240>
                    /* Now it is a Free place */
                    xInUseRetrans.b128[ucIL] = FALSE;
8110b384:	e0ffff03 	ldbu	r3,-4(fp)
8110b388:	00a04574 	movhi	r2,33045
8110b38c:	10a96d04 	addi	r2,r2,-23116
8110b390:	18c7883a 	add	r3,r3,r3
8110b394:	18c7883a 	add	r3,r3,r3
8110b398:	10c5883a 	add	r2,r2,r3
8110b39c:	10000015 	stw	zero,0(r2)
                    SemCount128++;
8110b3a0:	d0a05e43 	ldbu	r2,-32391(gp)
8110b3a4:	10800044 	addi	r2,r2,1
8110b3a8:	d0a05e45 	stb	r2,-32391(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer128);
8110b3ac:	d0a05017 	ldw	r2,-32448(gp)
8110b3b0:	1009883a 	mov	r4,r2
8110b3b4:	11302fc0 	call	811302fc <OSSemPost>
8110b3b8:	e0bfff45 	stb	r2,-3(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110b3bc:	e0bfff43 	ldbu	r2,-3(fp)
8110b3c0:	10803fcc 	andi	r2,r2,255
8110b3c4:	10000426 	beq	r2,zero,8110b3d8 <vCheckRetransmission128+0x240>
                        SemCount128--;
8110b3c8:	d0a05e43 	ldbu	r2,-32391(gp)
8110b3cc:	10bfffc4 	addi	r2,r2,-1
8110b3d0:	d0a05e45 	stb	r2,-32391(gp)
                        vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110b3d4:	110e87c0 	call	8110e87c <vFailSetCountSemaphorexBuffer128>
    

    /* ---> At this point we have access to the xBuffer128*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_128; ucIL++) {
8110b3d8:	e0bfff03 	ldbu	r2,-4(fp)
8110b3dc:	10800044 	addi	r2,r2,1
8110b3e0:	e0bfff05 	stb	r2,-4(fp)
8110b3e4:	e0bfff03 	ldbu	r2,-4(fp)
8110b3e8:	108001b0 	cmpltui	r2,r2,6
8110b3ec:	103f7c1e 	bne	r2,zero,8110b1e0 <__reset+0xfb0eb1e0>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer128);
8110b3f0:	d0a05917 	ldw	r2,-32412(gp)
8110b3f4:	1009883a 	mov	r4,r2
8110b3f8:	112e50c0 	call	8112e50c <OSMutexPost>

    return;
8110b3fc:	0001883a 	nop
8110b400:	00000106 	br	8110b408 <vCheckRetransmission128+0x270>
    unsigned char ucIL = 0;

    OSMutexAccept(xMutexBuffer128, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110b404:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer128);

    return;
}
8110b408:	e037883a 	mov	sp,fp
8110b40c:	dfc00117 	ldw	ra,4(sp)
8110b410:	df000017 	ldw	fp,0(sp)
8110b414:	dec00204 	addi	sp,sp,8
8110b418:	f800283a 	ret

8110b41c <vCheckRetransmission64>:

inline void vCheckRetransmission64( void ) {
8110b41c:	defffd04 	addi	sp,sp,-12
8110b420:	de00012e 	bgeu	sp,et,8110b428 <vCheckRetransmission64+0xc>
8110b424:	003b68fa 	trap	3
8110b428:	dfc00215 	stw	ra,8(sp)
8110b42c:	df000115 	stw	fp,4(sp)
8110b430:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110b434:	e03fff45 	stb	zero,-3(fp)
    unsigned char ucIL = 0;
8110b438:	e03fff05 	stb	zero,-4(fp)

    OSMutexAccept(xMutexBuffer64, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110b43c:	d0a05b17 	ldw	r2,-32404(gp)
8110b440:	e0ffff44 	addi	r3,fp,-3
8110b444:	180b883a 	mov	r5,r3
8110b448:	1009883a 	mov	r4,r2
8110b44c:	112d8e80 	call	8112d8e8 <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110b450:	e0bfff43 	ldbu	r2,-3(fp)
8110b454:	10803fcc 	andi	r2,r2,255
8110b458:	10008d1e 	bne	r2,zero,8110b690 <vCheckRetransmission64+0x274>
    

    /* ---> At this point we have access to the xBuffer64*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_64; ucIL++) {
8110b45c:	e03fff05 	stb	zero,-4(fp)
8110b460:	00008306 	br	8110b670 <vCheckRetransmission64+0x254>
        /* Check if in use */
        if ( xInUseRetrans.b64[ucIL] == TRUE ) {
8110b464:	e0ffff03 	ldbu	r3,-4(fp)
8110b468:	00a04574 	movhi	r2,33045
8110b46c:	10a96d04 	addi	r2,r2,-23116
8110b470:	18c00184 	addi	r3,r3,6
8110b474:	18c7883a 	add	r3,r3,r3
8110b478:	18c7883a 	add	r3,r3,r3
8110b47c:	10c5883a 	add	r2,r2,r3
8110b480:	10800017 	ldw	r2,0(r2)
8110b484:	10800058 	cmpnei	r2,r2,1
8110b488:	1000761e 	bne	r2,zero,8110b664 <vCheckRetransmission64+0x248>

            if ( xBuffer64[ucIL].bSent == TRUE )
8110b48c:	e0ffff03 	ldbu	r3,-4(fp)
8110b490:	00a04534 	movhi	r2,33044
8110b494:	108f6604 	addi	r2,r2,15768
8110b498:	18c01324 	muli	r3,r3,76
8110b49c:	10c5883a 	add	r2,r2,r3
8110b4a0:	10801004 	addi	r2,r2,64
8110b4a4:	10800017 	ldw	r2,0(r2)
8110b4a8:	10800058 	cmpnei	r2,r2,1
8110b4ac:	1000211e 	bne	r2,zero,8110b534 <vCheckRetransmission64+0x118>
                if ( ++xBuffer64[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110b4b0:	e0ffff03 	ldbu	r3,-4(fp)
8110b4b4:	00a04534 	movhi	r2,33044
8110b4b8:	108f6604 	addi	r2,r2,15768
8110b4bc:	19001324 	muli	r4,r3,76
8110b4c0:	1105883a 	add	r2,r2,r4
8110b4c4:	10801184 	addi	r2,r2,70
8110b4c8:	1080000b 	ldhu	r2,0(r2)
8110b4cc:	10800044 	addi	r2,r2,1
8110b4d0:	100b883a 	mov	r5,r2
8110b4d4:	00a04534 	movhi	r2,33044
8110b4d8:	108f6604 	addi	r2,r2,15768
8110b4dc:	19001324 	muli	r4,r3,76
8110b4e0:	1105883a 	add	r2,r2,r4
8110b4e4:	10801184 	addi	r2,r2,70
8110b4e8:	1140000d 	sth	r5,0(r2)
8110b4ec:	00a04534 	movhi	r2,33044
8110b4f0:	108f6604 	addi	r2,r2,15768
8110b4f4:	18c01324 	muli	r3,r3,76
8110b4f8:	10c5883a 	add	r2,r2,r3
8110b4fc:	10801184 	addi	r2,r2,70
8110b500:	1080000b 	ldhu	r2,0(r2)
8110b504:	10bfffcc 	andi	r2,r2,65535
8110b508:	10a0001c 	xori	r2,r2,32768
8110b50c:	10a00004 	addi	r2,r2,-32768
8110b510:	10800090 	cmplti	r2,r2,2
8110b514:	1000071e 	bne	r2,zero,8110b534 <vCheckRetransmission64+0x118>
                    xBuffer64[ucIL].bSent = FALSE;
8110b518:	e0ffff03 	ldbu	r3,-4(fp)
8110b51c:	00a04534 	movhi	r2,33044
8110b520:	108f6604 	addi	r2,r2,15768
8110b524:	18c01324 	muli	r3,r3,76
8110b528:	10c5883a 	add	r2,r2,r3
8110b52c:	10801004 	addi	r2,r2,64
8110b530:	10000015 	stw	zero,0(r2)

            if ( xBuffer64[ucIL].bSent == FALSE ) {
8110b534:	e0ffff03 	ldbu	r3,-4(fp)
8110b538:	00a04534 	movhi	r2,33044
8110b53c:	108f6604 	addi	r2,r2,15768
8110b540:	18c01324 	muli	r3,r3,76
8110b544:	10c5883a 	add	r2,r2,r3
8110b548:	10801004 	addi	r2,r2,64
8110b54c:	10800017 	ldw	r2,0(r2)
8110b550:	1000441e 	bne	r2,zero,8110b664 <vCheckRetransmission64+0x248>
                puts(xBuffer64[ucIL].buffer);
8110b554:	e0bfff03 	ldbu	r2,-4(fp)
8110b558:	10c01324 	muli	r3,r2,76
8110b55c:	00a04534 	movhi	r2,33044
8110b560:	108f6604 	addi	r2,r2,15768
8110b564:	1885883a 	add	r2,r3,r2
8110b568:	1009883a 	mov	r4,r2
8110b56c:	11134200 	call	81113420 <puts>
                xBuffer64[ucIL].bSent = TRUE;
8110b570:	e0ffff03 	ldbu	r3,-4(fp)
8110b574:	00a04534 	movhi	r2,33044
8110b578:	108f6604 	addi	r2,r2,15768
8110b57c:	18c01324 	muli	r3,r3,76
8110b580:	10c5883a 	add	r2,r2,r3
8110b584:	10801004 	addi	r2,r2,64
8110b588:	00c00044 	movi	r3,1
8110b58c:	10c00015 	stw	r3,0(r2)
                xBuffer64[ucIL].usiTimeOut = 0;
8110b590:	e0ffff03 	ldbu	r3,-4(fp)
8110b594:	00a04534 	movhi	r2,33044
8110b598:	108f6604 	addi	r2,r2,15768
8110b59c:	18c01324 	muli	r3,r3,76
8110b5a0:	10c5883a 	add	r2,r2,r3
8110b5a4:	10801184 	addi	r2,r2,70
8110b5a8:	1000000d 	sth	zero,0(r2)
                /* Check if already tried all the times */
                if ( ++xBuffer64[ucIL].ucNofRetries > N_RETRIES_COMM ) {
8110b5ac:	e0ffff03 	ldbu	r3,-4(fp)
8110b5b0:	00a04534 	movhi	r2,33044
8110b5b4:	108f6604 	addi	r2,r2,15768
8110b5b8:	19001324 	muli	r4,r3,76
8110b5bc:	1105883a 	add	r2,r2,r4
8110b5c0:	10801204 	addi	r2,r2,72
8110b5c4:	10800003 	ldbu	r2,0(r2)
8110b5c8:	10800044 	addi	r2,r2,1
8110b5cc:	100b883a 	mov	r5,r2
8110b5d0:	00a04534 	movhi	r2,33044
8110b5d4:	108f6604 	addi	r2,r2,15768
8110b5d8:	19001324 	muli	r4,r3,76
8110b5dc:	1105883a 	add	r2,r2,r4
8110b5e0:	10801204 	addi	r2,r2,72
8110b5e4:	11400005 	stb	r5,0(r2)
8110b5e8:	00a04534 	movhi	r2,33044
8110b5ec:	108f6604 	addi	r2,r2,15768
8110b5f0:	18c01324 	muli	r3,r3,76
8110b5f4:	10c5883a 	add	r2,r2,r3
8110b5f8:	10801204 	addi	r2,r2,72
8110b5fc:	10800003 	ldbu	r2,0(r2)
8110b600:	10803fcc 	andi	r2,r2,255
8110b604:	108000b0 	cmpltui	r2,r2,2
8110b608:	1000161e 	bne	r2,zero,8110b664 <vCheckRetransmission64+0x248>
                    /* Now it is a Free place */
                    xInUseRetrans.b64[ucIL] = FALSE;
8110b60c:	e0ffff03 	ldbu	r3,-4(fp)
8110b610:	00a04574 	movhi	r2,33045
8110b614:	10a96d04 	addi	r2,r2,-23116
8110b618:	18c00184 	addi	r3,r3,6
8110b61c:	18c7883a 	add	r3,r3,r3
8110b620:	18c7883a 	add	r3,r3,r3
8110b624:	10c5883a 	add	r2,r2,r3
8110b628:	10000015 	stw	zero,0(r2)
                    SemCount64++;
8110b62c:	d0a05e03 	ldbu	r2,-32392(gp)
8110b630:	10800044 	addi	r2,r2,1
8110b634:	d0a05e05 	stb	r2,-32392(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer64);
8110b638:	d0a04c17 	ldw	r2,-32464(gp)
8110b63c:	1009883a 	mov	r4,r2
8110b640:	11302fc0 	call	811302fc <OSSemPost>
8110b644:	e0bfff45 	stb	r2,-3(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110b648:	e0bfff43 	ldbu	r2,-3(fp)
8110b64c:	10803fcc 	andi	r2,r2,255
8110b650:	10000426 	beq	r2,zero,8110b664 <vCheckRetransmission64+0x248>
                        SemCount64--;
8110b654:	d0a05e03 	ldbu	r2,-32392(gp)
8110b658:	10bfffc4 	addi	r2,r2,-1
8110b65c:	d0a05e05 	stb	r2,-32392(gp)
                        vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110b660:	110e8140 	call	8110e814 <vFailSetCountSemaphorexBuffer64>
    

    /* ---> At this point we have access to the xBuffer64*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_64; ucIL++) {
8110b664:	e0bfff03 	ldbu	r2,-4(fp)
8110b668:	10800044 	addi	r2,r2,1
8110b66c:	e0bfff05 	stb	r2,-4(fp)
8110b670:	e0bfff03 	ldbu	r2,-4(fp)
8110b674:	10800230 	cmpltui	r2,r2,8
8110b678:	103f7a1e 	bne	r2,zero,8110b464 <__reset+0xfb0eb464>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer64);
8110b67c:	d0a05b17 	ldw	r2,-32404(gp)
8110b680:	1009883a 	mov	r4,r2
8110b684:	112e50c0 	call	8112e50c <OSMutexPost>

    return;
8110b688:	0001883a 	nop
8110b68c:	00000106 	br	8110b694 <vCheckRetransmission64+0x278>
    unsigned char ucIL = 0;

    OSMutexAccept(xMutexBuffer64, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110b690:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer64);

    return;
}
8110b694:	e037883a 	mov	sp,fp
8110b698:	dfc00117 	ldw	ra,4(sp)
8110b69c:	df000017 	ldw	fp,0(sp)
8110b6a0:	dec00204 	addi	sp,sp,8
8110b6a4:	f800283a 	ret

8110b6a8 <vCheckRetransmission32>:


inline void vCheckRetransmission32( void ) {
8110b6a8:	defffd04 	addi	sp,sp,-12
8110b6ac:	de00012e 	bgeu	sp,et,8110b6b4 <vCheckRetransmission32+0xc>
8110b6b0:	003b68fa 	trap	3
8110b6b4:	dfc00215 	stw	ra,8(sp)
8110b6b8:	df000115 	stw	fp,4(sp)
8110b6bc:	df000104 	addi	fp,sp,4
    INT8U ucErrorCodeL = 0;
8110b6c0:	e03fff85 	stb	zero,-2(fp)
    unsigned char ucIL = 0;
8110b6c4:	e03fff05 	stb	zero,-4(fp)
    unsigned char ucMax = 0;
8110b6c8:	e03fff45 	stb	zero,-3(fp)

    OSMutexAccept(xMutexBuffer32, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
8110b6cc:	d0a05717 	ldw	r2,-32420(gp)
8110b6d0:	e0ffff84 	addi	r3,fp,-2
8110b6d4:	180b883a 	mov	r5,r3
8110b6d8:	1009883a 	mov	r4,r2
8110b6dc:	112d8e80 	call	8112d8e8 <OSMutexAccept>
    if ( ucErrorCodeL != OS_NO_ERR ) {
8110b6e0:	e0bfff83 	ldbu	r2,-2(fp)
8110b6e4:	10803fcc 	andi	r2,r2,255
8110b6e8:	10009b1e 	bne	r2,zero,8110b958 <vCheckRetransmission32+0x2b0>
    

    /* ---> At this point we have access to the xBuffer32*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_32; ucIL++) {
8110b6ec:	e03fff05 	stb	zero,-4(fp)
8110b6f0:	00009106 	br	8110b938 <vCheckRetransmission32+0x290>
        /* Check if in use */
        if ( xInUseRetrans.b32[ucIL] == TRUE ) {
8110b6f4:	e0ffff03 	ldbu	r3,-4(fp)
8110b6f8:	00a04574 	movhi	r2,33045
8110b6fc:	10a96d04 	addi	r2,r2,-23116
8110b700:	18c00384 	addi	r3,r3,14
8110b704:	18c7883a 	add	r3,r3,r3
8110b708:	18c7883a 	add	r3,r3,r3
8110b70c:	10c5883a 	add	r2,r2,r3
8110b710:	10800017 	ldw	r2,0(r2)
8110b714:	10800058 	cmpnei	r2,r2,1
8110b718:	1000841e 	bne	r2,zero,8110b92c <vCheckRetransmission32+0x284>

            if ( xBuffer32[ucIL].bSent == TRUE )
8110b71c:	e0ffff03 	ldbu	r3,-4(fp)
8110b720:	00a04534 	movhi	r2,33044
8110b724:	10991504 	addi	r2,r2,25684
8110b728:	18c00b24 	muli	r3,r3,44
8110b72c:	10c5883a 	add	r2,r2,r3
8110b730:	10800804 	addi	r2,r2,32
8110b734:	10800017 	ldw	r2,0(r2)
8110b738:	10800058 	cmpnei	r2,r2,1
8110b73c:	1000211e 	bne	r2,zero,8110b7c4 <vCheckRetransmission32+0x11c>
                if ( ++xBuffer32[ucIL].usiTimeOut > TIMEOUT_COUNT )
8110b740:	e0ffff03 	ldbu	r3,-4(fp)
8110b744:	00a04534 	movhi	r2,33044
8110b748:	10991504 	addi	r2,r2,25684
8110b74c:	19000b24 	muli	r4,r3,44
8110b750:	1105883a 	add	r2,r2,r4
8110b754:	10800984 	addi	r2,r2,38
8110b758:	1080000b 	ldhu	r2,0(r2)
8110b75c:	10800044 	addi	r2,r2,1
8110b760:	100b883a 	mov	r5,r2
8110b764:	00a04534 	movhi	r2,33044
8110b768:	10991504 	addi	r2,r2,25684
8110b76c:	19000b24 	muli	r4,r3,44
8110b770:	1105883a 	add	r2,r2,r4
8110b774:	10800984 	addi	r2,r2,38
8110b778:	1140000d 	sth	r5,0(r2)
8110b77c:	00a04534 	movhi	r2,33044
8110b780:	10991504 	addi	r2,r2,25684
8110b784:	18c00b24 	muli	r3,r3,44
8110b788:	10c5883a 	add	r2,r2,r3
8110b78c:	10800984 	addi	r2,r2,38
8110b790:	1080000b 	ldhu	r2,0(r2)
8110b794:	10bfffcc 	andi	r2,r2,65535
8110b798:	10a0001c 	xori	r2,r2,32768
8110b79c:	10a00004 	addi	r2,r2,-32768
8110b7a0:	10800090 	cmplti	r2,r2,2
8110b7a4:	1000071e 	bne	r2,zero,8110b7c4 <vCheckRetransmission32+0x11c>
                    xBuffer32[ucIL].bSent = FALSE;
8110b7a8:	e0ffff03 	ldbu	r3,-4(fp)
8110b7ac:	00a04534 	movhi	r2,33044
8110b7b0:	10991504 	addi	r2,r2,25684
8110b7b4:	18c00b24 	muli	r3,r3,44
8110b7b8:	10c5883a 	add	r2,r2,r3
8110b7bc:	10800804 	addi	r2,r2,32
8110b7c0:	10000015 	stw	zero,0(r2)

            if ( xBuffer32[ucIL].bSent == FALSE ) {
8110b7c4:	e0ffff03 	ldbu	r3,-4(fp)
8110b7c8:	00a04534 	movhi	r2,33044
8110b7cc:	10991504 	addi	r2,r2,25684
8110b7d0:	18c00b24 	muli	r3,r3,44
8110b7d4:	10c5883a 	add	r2,r2,r3
8110b7d8:	10800804 	addi	r2,r2,32
8110b7dc:	10800017 	ldw	r2,0(r2)
8110b7e0:	1000521e 	bne	r2,zero,8110b92c <vCheckRetransmission32+0x284>
                puts(xBuffer32[ucIL].buffer);
8110b7e4:	e0bfff03 	ldbu	r2,-4(fp)
8110b7e8:	10c00b24 	muli	r3,r2,44
8110b7ec:	00a04534 	movhi	r2,33044
8110b7f0:	10991504 	addi	r2,r2,25684
8110b7f4:	1885883a 	add	r2,r3,r2
8110b7f8:	1009883a 	mov	r4,r2
8110b7fc:	11134200 	call	81113420 <puts>
                xBuffer32[ucIL].bSent = TRUE;
8110b800:	e0ffff03 	ldbu	r3,-4(fp)
8110b804:	00a04534 	movhi	r2,33044
8110b808:	10991504 	addi	r2,r2,25684
8110b80c:	18c00b24 	muli	r3,r3,44
8110b810:	10c5883a 	add	r2,r2,r3
8110b814:	10800804 	addi	r2,r2,32
8110b818:	00c00044 	movi	r3,1
8110b81c:	10c00015 	stw	r3,0(r2)
                xBuffer32[ucIL].usiTimeOut = 0;
8110b820:	e0ffff03 	ldbu	r3,-4(fp)
8110b824:	00a04534 	movhi	r2,33044
8110b828:	10991504 	addi	r2,r2,25684
8110b82c:	18c00b24 	muli	r3,r3,44
8110b830:	10c5883a 	add	r2,r2,r3
8110b834:	10800984 	addi	r2,r2,38
8110b838:	1000000d 	sth	zero,0(r2)
                /* Check if already tried all the times */

                ucMax = ( xBuffer32[ucIL].usiId == 1 ) ? N_RETRIES_INI_INF : N_RETRIES_COMM;
8110b83c:	e0ffff03 	ldbu	r3,-4(fp)
8110b840:	00a04534 	movhi	r2,33044
8110b844:	10991504 	addi	r2,r2,25684
8110b848:	18c00b24 	muli	r3,r3,44
8110b84c:	10c5883a 	add	r2,r2,r3
8110b850:	10800904 	addi	r2,r2,36
8110b854:	1080000b 	ldhu	r2,0(r2)
8110b858:	10bfffcc 	andi	r2,r2,65535
8110b85c:	10800058 	cmpnei	r2,r2,1
8110b860:	1000021e 	bne	r2,zero,8110b86c <vCheckRetransmission32+0x1c4>
8110b864:	00bffe84 	movi	r2,-6
8110b868:	00000106 	br	8110b870 <vCheckRetransmission32+0x1c8>
8110b86c:	00800044 	movi	r2,1
8110b870:	e0bfff45 	stb	r2,-3(fp)

                if ( ++xBuffer32[ucIL].ucNofRetries > ucMax ) {
8110b874:	e0ffff03 	ldbu	r3,-4(fp)
8110b878:	00a04534 	movhi	r2,33044
8110b87c:	10991504 	addi	r2,r2,25684
8110b880:	19000b24 	muli	r4,r3,44
8110b884:	1105883a 	add	r2,r2,r4
8110b888:	10800a04 	addi	r2,r2,40
8110b88c:	10800003 	ldbu	r2,0(r2)
8110b890:	10800044 	addi	r2,r2,1
8110b894:	100b883a 	mov	r5,r2
8110b898:	00a04534 	movhi	r2,33044
8110b89c:	10991504 	addi	r2,r2,25684
8110b8a0:	19000b24 	muli	r4,r3,44
8110b8a4:	1105883a 	add	r2,r2,r4
8110b8a8:	10800a04 	addi	r2,r2,40
8110b8ac:	11400005 	stb	r5,0(r2)
8110b8b0:	00a04534 	movhi	r2,33044
8110b8b4:	10991504 	addi	r2,r2,25684
8110b8b8:	18c00b24 	muli	r3,r3,44
8110b8bc:	10c5883a 	add	r2,r2,r3
8110b8c0:	10800a04 	addi	r2,r2,40
8110b8c4:	10800003 	ldbu	r2,0(r2)
8110b8c8:	10803fcc 	andi	r2,r2,255
8110b8cc:	e0ffff43 	ldbu	r3,-3(fp)
8110b8d0:	1880162e 	bgeu	r3,r2,8110b92c <vCheckRetransmission32+0x284>
                    /* Now it is a Free place */
                    xInUseRetrans.b32[ucIL] = FALSE;
8110b8d4:	e0ffff03 	ldbu	r3,-4(fp)
8110b8d8:	00a04574 	movhi	r2,33045
8110b8dc:	10a96d04 	addi	r2,r2,-23116
8110b8e0:	18c00384 	addi	r3,r3,14
8110b8e4:	18c7883a 	add	r3,r3,r3
8110b8e8:	18c7883a 	add	r3,r3,r3
8110b8ec:	10c5883a 	add	r2,r2,r3
8110b8f0:	10000015 	stw	zero,0(r2)
                    SemCount32++;
8110b8f4:	d0a05583 	ldbu	r2,-32426(gp)
8110b8f8:	10800044 	addi	r2,r2,1
8110b8fc:	d0a05585 	stb	r2,-32426(gp)
                    ucErrorCodeL = OSSemPost(xSemCountBuffer32);
8110b900:	d0a05a17 	ldw	r2,-32408(gp)
8110b904:	1009883a 	mov	r4,r2
8110b908:	11302fc0 	call	811302fc <OSSemPost>
8110b90c:	e0bfff85 	stb	r2,-2(fp)
                    if ( ucErrorCodeL != OS_ERR_NONE ) {
8110b910:	e0bfff83 	ldbu	r2,-2(fp)
8110b914:	10803fcc 	andi	r2,r2,255
8110b918:	10000426 	beq	r2,zero,8110b92c <vCheckRetransmission32+0x284>
                        SemCount32--;
8110b91c:	d0a05583 	ldbu	r2,-32426(gp)
8110b920:	10bfffc4 	addi	r2,r2,-1
8110b924:	d0a05585 	stb	r2,-32426(gp)
                        vFailSetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110b928:	110e7ac0 	call	8110e7ac <vFailSetCountSemaphorexBuffer32>
    

    /* ---> At this point we have access to the xBuffer32*/

    /* Search the one that if in use */
	for( ucIL = 0; ucIL < N_32; ucIL++) {
8110b92c:	e0bfff03 	ldbu	r2,-4(fp)
8110b930:	10800044 	addi	r2,r2,1
8110b934:	e0bfff05 	stb	r2,-4(fp)
8110b938:	e0bfff03 	ldbu	r2,-4(fp)
8110b93c:	10800230 	cmpltui	r2,r2,8
8110b940:	103f6c1e 	bne	r2,zero,8110b6f4 <__reset+0xfb0eb6f4>
                    }                    
                }
            }   
        }
	}
    OSMutexPost(xMutexBuffer32);
8110b944:	d0a05717 	ldw	r2,-32420(gp)
8110b948:	1009883a 	mov	r4,r2
8110b94c:	112e50c0 	call	8112e50c <OSMutexPost>

    return;
8110b950:	0001883a 	nop
8110b954:	00000106 	br	8110b95c <vCheckRetransmission32+0x2b4>
    unsigned char ucMax = 0;

    OSMutexAccept(xMutexBuffer32, &ucErrorCodeL); /* Just check the the mutex (non blocking) */
    if ( ucErrorCodeL != OS_NO_ERR ) {
        /* Could not get the Mutex at this time, not critical it will try again later */
        return;
8110b958:	0001883a 	nop
        }
	}
    OSMutexPost(xMutexBuffer32);

    return;
}
8110b95c:	e037883a 	mov	sp,fp
8110b960:	dfc00117 	ldw	ra,4(sp)
8110b964:	df000017 	ldw	fp,0(sp)
8110b968:	dec00204 	addi	sp,sp,8
8110b96c:	f800283a 	ret

8110b970 <bResourcesInitRTOS>:
 */
TSimucam_MEB xSimMebStruct;

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
8110b970:	defff904 	addi	sp,sp,-28
8110b974:	de00012e 	bgeu	sp,et,8110b97c <bResourcesInitRTOS+0xc>
8110b978:	003b68fa 	trap	3
8110b97c:	dfc00615 	stw	ra,24(sp)
8110b980:	df000515 	stw	fp,20(sp)
8110b984:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
8110b988:	00800044 	movi	r2,1
8110b98c:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
8110b990:	0009883a 	mov	r4,zero
8110b994:	112fc4c0 	call	8112fc4c <OSSemCreate>
8110b998:	d0a04d15 	stw	r2,-32460(gp)
	if (!xSemCommInit) {
8110b99c:	d0a04d17 	ldw	r2,-32460(gp)
8110b9a0:	1000021e 	bne	r2,zero,8110b9ac <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110b9a4:	110e2440 	call	8110e244 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110b9a8:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110b9ac:	e0bfff04 	addi	r2,fp,-4
8110b9b0:	100b883a 	mov	r5,r2
8110b9b4:	010000c4 	movi	r4,3
8110b9b8:	112da940 	call	8112da94 <OSMutexCreate>
8110b9bc:	d0a05d15 	stw	r2,-32396(gp)
	if ( err != OS_ERR_NONE ) {
8110b9c0:	e0bfff03 	ldbu	r2,-4(fp)
8110b9c4:	10803fcc 	andi	r2,r2,255
8110b9c8:	10000526 	beq	r2,zero,8110b9e0 <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
8110b9cc:	e0bfff03 	ldbu	r2,-4(fp)
8110b9d0:	10803fcc 	andi	r2,r2,255
8110b9d4:	1009883a 	mov	r4,r2
8110b9d8:	110e1e40 	call	8110e1e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110b9dc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
8110b9e0:	e0bfff04 	addi	r2,fp,-4
8110b9e4:	100b883a 	mov	r5,r2
8110b9e8:	01000184 	movi	r4,6
8110b9ec:	112da940 	call	8112da94 <OSMutexCreate>
8110b9f0:	d0a05915 	stw	r2,-32412(gp)
	if ( err != OS_ERR_NONE ) {
8110b9f4:	e0bfff03 	ldbu	r2,-4(fp)
8110b9f8:	10803fcc 	andi	r2,r2,255
8110b9fc:	10000526 	beq	r2,zero,8110ba14 <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
8110ba00:	e0bfff03 	ldbu	r2,-4(fp)
8110ba04:	10803fcc 	andi	r2,r2,255
8110ba08:	1009883a 	mov	r4,r2
8110ba0c:	110e1e40 	call	8110e1e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ba10:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110ba14:	e0bfff04 	addi	r2,fp,-4
8110ba18:	100b883a 	mov	r5,r2
8110ba1c:	010001c4 	movi	r4,7
8110ba20:	112da940 	call	8112da94 <OSMutexCreate>
8110ba24:	d0a05b15 	stw	r2,-32404(gp)
	if ( err != OS_ERR_NONE ) {
8110ba28:	e0bfff03 	ldbu	r2,-4(fp)
8110ba2c:	10803fcc 	andi	r2,r2,255
8110ba30:	10000526 	beq	r2,zero,8110ba48 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110ba34:	e0bfff03 	ldbu	r2,-4(fp)
8110ba38:	10803fcc 	andi	r2,r2,255
8110ba3c:	1009883a 	mov	r4,r2
8110ba40:	110e1e40 	call	8110e1e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ba44:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
8110ba48:	e0bfff04 	addi	r2,fp,-4
8110ba4c:	100b883a 	mov	r5,r2
8110ba50:	01000204 	movi	r4,8
8110ba54:	112da940 	call	8112da94 <OSMutexCreate>
8110ba58:	d0a05715 	stw	r2,-32420(gp)
	if ( err != OS_ERR_NONE ) {
8110ba5c:	e0bfff03 	ldbu	r2,-4(fp)
8110ba60:	10803fcc 	andi	r2,r2,255
8110ba64:	10000526 	beq	r2,zero,8110ba7c <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
8110ba68:	e0bfff03 	ldbu	r2,-4(fp)
8110ba6c:	10803fcc 	andi	r2,r2,255
8110ba70:	1009883a 	mov	r4,r2
8110ba74:	110e1e40 	call	8110e1e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ba78:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	SemCount128 = N_128;
8110ba7c:	00800184 	movi	r2,6
8110ba80:	d0a05e45 	stb	r2,-32391(gp)
	xSemCountBuffer128 = OSSemCreate(N_128);
8110ba84:	01000184 	movi	r4,6
8110ba88:	112fc4c0 	call	8112fc4c <OSSemCreate>
8110ba8c:	d0a05015 	stw	r2,-32448(gp)
	if (!xSemCountBuffer128) {
8110ba90:	d0a05017 	ldw	r2,-32448(gp)
8110ba94:	1000031e 	bne	r2,zero,8110baa4 <bResourcesInitRTOS+0x134>
		SemCount128 = 0;
8110ba98:	d0205e45 	stb	zero,-32391(gp)
		vFailCreateSemaphoreResources();
8110ba9c:	110e2440 	call	8110e244 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110baa0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	SemCount64 = N_64;
8110baa4:	00800204 	movi	r2,8
8110baa8:	d0a05e05 	stb	r2,-32392(gp)
	xSemCountBuffer64 = OSSemCreate(N_64);
8110baac:	01000204 	movi	r4,8
8110bab0:	112fc4c0 	call	8112fc4c <OSSemCreate>
8110bab4:	d0a04c15 	stw	r2,-32464(gp)
	if (!xSemCountBuffer64) {
8110bab8:	d0a04c17 	ldw	r2,-32464(gp)
8110babc:	1000031e 	bne	r2,zero,8110bacc <bResourcesInitRTOS+0x15c>
		SemCount64 = 0;
8110bac0:	d0205e05 	stb	zero,-32392(gp)
		vFailCreateSemaphoreResources();
8110bac4:	110e2440 	call	8110e244 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bac8:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	SemCount32 = N_32;
8110bacc:	00800204 	movi	r2,8
8110bad0:	d0a05585 	stb	r2,-32426(gp)
	xSemCountBuffer32 = OSSemCreate(N_32);
8110bad4:	01000204 	movi	r4,8
8110bad8:	112fc4c0 	call	8112fc4c <OSSemCreate>
8110badc:	d0a05a15 	stw	r2,-32408(gp)
	if (!xSemCountBuffer32) {
8110bae0:	d0a05a17 	ldw	r2,-32408(gp)
8110bae4:	1000031e 	bne	r2,zero,8110baf4 <bResourcesInitRTOS+0x184>
		SemCount32 = 0;
8110bae8:	d0205585 	stb	zero,-32426(gp)
		vFailCreateSemaphoreResources();
8110baec:	110e2440 	call	8110e244 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110baf0:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
8110baf4:	e0bfff04 	addi	r2,fp,-4
8110baf8:	100b883a 	mov	r5,r2
8110bafc:	01000144 	movi	r4,5
8110bb00:	112da940 	call	8112da94 <OSMutexCreate>
8110bb04:	d0a05215 	stw	r2,-32440(gp)
	if ( err != OS_ERR_NONE ) {
8110bb08:	e0bfff03 	ldbu	r2,-4(fp)
8110bb0c:	10803fcc 	andi	r2,r2,255
8110bb10:	10000526 	beq	r2,zero,8110bb28 <bResourcesInitRTOS+0x1b8>
		vFailCreateMutexSResources(err);
8110bb14:	e0bfff03 	ldbu	r2,-4(fp)
8110bb18:	10803fcc 	andi	r2,r2,255
8110bb1c:	1009883a 	mov	r4,r2
8110bb20:	110e1e40 	call	8110e1e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110bb24:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110bb28:	e0bfff04 	addi	r2,fp,-4
8110bb2c:	100b883a 	mov	r5,r2
8110bb30:	01000244 	movi	r4,9
8110bb34:	112da940 	call	8112da94 <OSMutexCreate>
8110bb38:	d0a05615 	stw	r2,-32424(gp)
	if ( err != OS_ERR_NONE ) {
8110bb3c:	e0bfff03 	ldbu	r2,-4(fp)
8110bb40:	10803fcc 	andi	r2,r2,255
8110bb44:	10000526 	beq	r2,zero,8110bb5c <bResourcesInitRTOS+0x1ec>
		vFailCreateMutexSResources(err);
8110bb48:	e0bfff03 	ldbu	r2,-4(fp)
8110bb4c:	10803fcc 	andi	r2,r2,255
8110bb50:	1009883a 	mov	r4,r2
8110bb54:	110e1e40 	call	8110e1e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110bb58:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
8110bb5c:	0009883a 	mov	r4,zero
8110bb60:	112fc4c0 	call	8112fc4c <OSSemCreate>
8110bb64:	d0a05315 	stw	r2,-32436(gp)
	if (!xSemCountReceivedACK) {
8110bb68:	d0a05317 	ldw	r2,-32436(gp)
8110bb6c:	1000021e 	bne	r2,zero,8110bb78 <bResourcesInitRTOS+0x208>
		vFailCreateSemaphoreResources();
8110bb70:	110e2440 	call	8110e244 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bb74:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110bb78:	0009883a 	mov	r4,zero
8110bb7c:	112fc4c0 	call	8112fc4c <OSSemCreate>
8110bb80:	d0a05115 	stw	r2,-32444(gp)
	if (!xSemCountPreParsed) {
8110bb84:	d0a05117 	ldw	r2,-32444(gp)
8110bb88:	1000021e 	bne	r2,zero,8110bb94 <bResourcesInitRTOS+0x224>
		vFailCreateSemaphoreResources();
8110bb8c:	110e2440 	call	8110e244 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bb90:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
8110bb94:	0009883a 	mov	r4,zero
8110bb98:	112fc4c0 	call	8112fc4c <OSSemCreate>
8110bb9c:	d0a04e15 	stw	r2,-32456(gp)
	if (!xSemCountSenderACK) {
8110bba0:	d0a04e17 	ldw	r2,-32456(gp)
8110bba4:	1000021e 	bne	r2,zero,8110bbb0 <bResourcesInitRTOS+0x240>
		vFailCreateSemaphoreResources();
8110bba8:	110e2440 	call	8110e244 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bbac:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110bbb0:	e0bfff04 	addi	r2,fp,-4
8110bbb4:	100b883a 	mov	r5,r2
8110bbb8:	01000104 	movi	r4,4
8110bbbc:	112da940 	call	8112da94 <OSMutexCreate>
8110bbc0:	d0a05c15 	stw	r2,-32400(gp)
	if ( err != OS_ERR_NONE ) {
8110bbc4:	e0bfff03 	ldbu	r2,-4(fp)
8110bbc8:	10803fcc 	andi	r2,r2,255
8110bbcc:	10000526 	beq	r2,zero,8110bbe4 <bResourcesInitRTOS+0x274>
		vFailCreateMutexSResources(err);
8110bbd0:	e0bfff03 	ldbu	r2,-4(fp)
8110bbd4:	10803fcc 	andi	r2,r2,255
8110bbd8:	1009883a 	mov	r4,r2
8110bbdc:	110e1e40 	call	8110e1e4 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110bbe0:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
8110bbe4:	0009883a 	mov	r4,zero
8110bbe8:	112fc4c0 	call	8112fc4c <OSSemCreate>
8110bbec:	d0a05415 	stw	r2,-32432(gp)
	if (!xSemTimeoutChecker) {
8110bbf0:	d0a05417 	ldw	r2,-32432(gp)
8110bbf4:	1000021e 	bne	r2,zero,8110bc00 <bResourcesInitRTOS+0x290>
		vFailCreateSemaphoreResources();
8110bbf8:	110e2440 	call	8110e244 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110bbfc:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
8110bc00:	e0bfff04 	addi	r2,fp,-4
8110bc04:	d8800215 	stw	r2,8(sp)
8110bc08:	00a04534 	movhi	r2,33044
8110bc0c:	10b90d04 	addi	r2,r2,-7116
8110bc10:	d8800115 	stw	r2,4(sp)
8110bc14:	d8000015 	stw	zero,0(sp)
8110bc18:	01e04474 	movhi	r7,33041
8110bc1c:	39f3e404 	addi	r7,r7,-12400
8110bc20:	01800084 	movi	r6,2
8110bc24:	01400104 	movi	r5,4
8110bc28:	01000284 	movi	r4,10
8110bc2c:	11323180 	call	81132318 <OSTmrCreate>
8110bc30:	d0a05815 	stw	r2,-32416(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
8110bc34:	e0bfff03 	ldbu	r2,-4(fp)
8110bc38:	10803fcc 	andi	r2,r2,255
8110bc3c:	10000226 	beq	r2,zero,8110bc48 <bResourcesInitRTOS+0x2d8>
		vFailCreateTimerRetransmisison();
8110bc40:	110eea80 	call	8110eea8 <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
8110bc44:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110bc48:	e0bffe17 	ldw	r2,-8(fp)
}
8110bc4c:	e037883a 	mov	sp,fp
8110bc50:	dfc00117 	ldw	ra,4(sp)
8110bc54:	df000017 	ldw	fp,0(sp)
8110bc58:	dec00204 	addi	sp,sp,8
8110bc5c:	f800283a 	ret

8110bc60 <vVariablesInitialization>:

/* Global variables already initialized with zero. But better safe than I'm sorry. */
void vVariablesInitialization ( void ) {
8110bc60:	defffd04 	addi	sp,sp,-12
8110bc64:	de00012e 	bgeu	sp,et,8110bc6c <vVariablesInitialization+0xc>
8110bc68:	003b68fa 	trap	3
8110bc6c:	dfc00215 	stw	ra,8(sp)
8110bc70:	df000115 	stw	fp,4(sp)
8110bc74:	df000104 	addi	fp,sp,4
	unsigned char ucIL = 0;
8110bc78:	e03fff05 	stb	zero,-4(fp)

	usiIdCMD = 2;
8110bc7c:	00800084 	movi	r2,2
8110bc80:	d0a0550d 	sth	r2,-32428(gp)

	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128));
8110bc84:	01800604 	movi	r6,24
8110bc88:	000b883a 	mov	r5,zero
8110bc8c:	01204574 	movhi	r4,33045
8110bc90:	21296d04 	addi	r4,r4,-23116
8110bc94:	1112fd40 	call	81112fd4 <memset>
	memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64));
8110bc98:	01800804 	movi	r6,32
8110bc9c:	000b883a 	mov	r5,zero
8110bca0:	01204574 	movhi	r4,33045
8110bca4:	21297304 	addi	r4,r4,-23092
8110bca8:	1112fd40 	call	81112fd4 <memset>
	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32));
8110bcac:	01800804 	movi	r6,32
8110bcb0:	000b883a 	mov	r5,zero
8110bcb4:	01204574 	movhi	r4,33045
8110bcb8:	21297b04 	addi	r4,r4,-23060
8110bcbc:	1112fd40 	call	81112fd4 <memset>
	
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110bcc0:	e03fff05 	stb	zero,-4(fp)
8110bcc4:	00002806 	br	8110bd68 <vVariablesInitialization+0x108>
	{
		memset( xBuffer128[ucIL].buffer, 0, 128);
8110bcc8:	e0bfff03 	ldbu	r2,-4(fp)
8110bccc:	10c02324 	muli	r3,r2,140
8110bcd0:	00a04574 	movhi	r2,33045
8110bcd4:	10a98304 	addi	r2,r2,-23028
8110bcd8:	1885883a 	add	r2,r3,r2
8110bcdc:	01802004 	movi	r6,128
8110bce0:	000b883a 	mov	r5,zero
8110bce4:	1009883a 	mov	r4,r2
8110bce8:	1112fd40 	call	81112fd4 <memset>
		xBuffer128[ucIL].bSent = FALSE;
8110bcec:	e0ffff03 	ldbu	r3,-4(fp)
8110bcf0:	00a04574 	movhi	r2,33045
8110bcf4:	10a98304 	addi	r2,r2,-23028
8110bcf8:	18c02324 	muli	r3,r3,140
8110bcfc:	10c5883a 	add	r2,r2,r3
8110bd00:	10802004 	addi	r2,r2,128
8110bd04:	10000015 	stw	zero,0(r2)
		xBuffer128[ucIL].usiId = 0;
8110bd08:	e0ffff03 	ldbu	r3,-4(fp)
8110bd0c:	00a04574 	movhi	r2,33045
8110bd10:	10a98304 	addi	r2,r2,-23028
8110bd14:	18c02324 	muli	r3,r3,140
8110bd18:	10c5883a 	add	r2,r2,r3
8110bd1c:	10802104 	addi	r2,r2,132
8110bd20:	1000000d 	sth	zero,0(r2)
		xBuffer128[ucIL].usiTimeOut = 0;
8110bd24:	e0ffff03 	ldbu	r3,-4(fp)
8110bd28:	00a04574 	movhi	r2,33045
8110bd2c:	10a98304 	addi	r2,r2,-23028
8110bd30:	18c02324 	muli	r3,r3,140
8110bd34:	10c5883a 	add	r2,r2,r3
8110bd38:	10802184 	addi	r2,r2,134
8110bd3c:	1000000d 	sth	zero,0(r2)
		xBuffer128[ucIL].ucNofRetries = 0;
8110bd40:	e0ffff03 	ldbu	r3,-4(fp)
8110bd44:	00a04574 	movhi	r2,33045
8110bd48:	10a98304 	addi	r2,r2,-23028
8110bd4c:	18c02324 	muli	r3,r3,140
8110bd50:	10c5883a 	add	r2,r2,r3
8110bd54:	10802204 	addi	r2,r2,136
8110bd58:	10000005 	stb	zero,0(r2)

	memset( xInUseRetrans.b128 , FALSE , sizeof(xInUseRetrans.b128));
	memset( xInUseRetrans.b64 , FALSE , sizeof(xInUseRetrans.b64));
	memset( xInUseRetrans.b32 , FALSE , sizeof(xInUseRetrans.b32));
	
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110bd5c:	e0bfff03 	ldbu	r2,-4(fp)
8110bd60:	10800044 	addi	r2,r2,1
8110bd64:	e0bfff05 	stb	r2,-4(fp)
8110bd68:	e0bfff03 	ldbu	r2,-4(fp)
8110bd6c:	108001b0 	cmpltui	r2,r2,6
8110bd70:	103fd51e 	bne	r2,zero,8110bcc8 <__reset+0xfb0ebcc8>
		xBuffer128[ucIL].usiId = 0;
		xBuffer128[ucIL].usiTimeOut = 0;
		xBuffer128[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_64; ucIL++)
8110bd74:	e03fff05 	stb	zero,-4(fp)
8110bd78:	00002806 	br	8110be1c <vVariablesInitialization+0x1bc>
	{
		memset( xBuffer64[ucIL].buffer, 0, 64);
8110bd7c:	e0bfff03 	ldbu	r2,-4(fp)
8110bd80:	10c01324 	muli	r3,r2,76
8110bd84:	00a04534 	movhi	r2,33044
8110bd88:	108f6604 	addi	r2,r2,15768
8110bd8c:	1885883a 	add	r2,r3,r2
8110bd90:	01801004 	movi	r6,64
8110bd94:	000b883a 	mov	r5,zero
8110bd98:	1009883a 	mov	r4,r2
8110bd9c:	1112fd40 	call	81112fd4 <memset>
		xBuffer64[ucIL].bSent = FALSE;
8110bda0:	e0ffff03 	ldbu	r3,-4(fp)
8110bda4:	00a04534 	movhi	r2,33044
8110bda8:	108f6604 	addi	r2,r2,15768
8110bdac:	18c01324 	muli	r3,r3,76
8110bdb0:	10c5883a 	add	r2,r2,r3
8110bdb4:	10801004 	addi	r2,r2,64
8110bdb8:	10000015 	stw	zero,0(r2)
		xBuffer64[ucIL].usiId = 0;
8110bdbc:	e0ffff03 	ldbu	r3,-4(fp)
8110bdc0:	00a04534 	movhi	r2,33044
8110bdc4:	108f6604 	addi	r2,r2,15768
8110bdc8:	18c01324 	muli	r3,r3,76
8110bdcc:	10c5883a 	add	r2,r2,r3
8110bdd0:	10801104 	addi	r2,r2,68
8110bdd4:	1000000d 	sth	zero,0(r2)
		xBuffer64[ucIL].usiTimeOut = 0;
8110bdd8:	e0ffff03 	ldbu	r3,-4(fp)
8110bddc:	00a04534 	movhi	r2,33044
8110bde0:	108f6604 	addi	r2,r2,15768
8110bde4:	18c01324 	muli	r3,r3,76
8110bde8:	10c5883a 	add	r2,r2,r3
8110bdec:	10801184 	addi	r2,r2,70
8110bdf0:	1000000d 	sth	zero,0(r2)
		xBuffer64[ucIL].ucNofRetries = 0;
8110bdf4:	e0ffff03 	ldbu	r3,-4(fp)
8110bdf8:	00a04534 	movhi	r2,33044
8110bdfc:	108f6604 	addi	r2,r2,15768
8110be00:	18c01324 	muli	r3,r3,76
8110be04:	10c5883a 	add	r2,r2,r3
8110be08:	10801204 	addi	r2,r2,72
8110be0c:	10000005 	stb	zero,0(r2)
		xBuffer128[ucIL].usiId = 0;
		xBuffer128[ucIL].usiTimeOut = 0;
		xBuffer128[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_64; ucIL++)
8110be10:	e0bfff03 	ldbu	r2,-4(fp)
8110be14:	10800044 	addi	r2,r2,1
8110be18:	e0bfff05 	stb	r2,-4(fp)
8110be1c:	e0bfff03 	ldbu	r2,-4(fp)
8110be20:	10800230 	cmpltui	r2,r2,8
8110be24:	103fd51e 	bne	r2,zero,8110bd7c <__reset+0xfb0ebd7c>
		xBuffer64[ucIL].usiId = 0;
		xBuffer64[ucIL].usiTimeOut = 0;
		xBuffer64[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_32; ucIL++)
8110be28:	e03fff05 	stb	zero,-4(fp)
8110be2c:	00002806 	br	8110bed0 <vVariablesInitialization+0x270>
	{
		memset( xBuffer32[ucIL].buffer, 0, 32);
8110be30:	e0bfff03 	ldbu	r2,-4(fp)
8110be34:	10c00b24 	muli	r3,r2,44
8110be38:	00a04534 	movhi	r2,33044
8110be3c:	10991504 	addi	r2,r2,25684
8110be40:	1885883a 	add	r2,r3,r2
8110be44:	01800804 	movi	r6,32
8110be48:	000b883a 	mov	r5,zero
8110be4c:	1009883a 	mov	r4,r2
8110be50:	1112fd40 	call	81112fd4 <memset>
		xBuffer32[ucIL].bSent = FALSE;
8110be54:	e0ffff03 	ldbu	r3,-4(fp)
8110be58:	00a04534 	movhi	r2,33044
8110be5c:	10991504 	addi	r2,r2,25684
8110be60:	18c00b24 	muli	r3,r3,44
8110be64:	10c5883a 	add	r2,r2,r3
8110be68:	10800804 	addi	r2,r2,32
8110be6c:	10000015 	stw	zero,0(r2)
		xBuffer32[ucIL].usiId = 0;
8110be70:	e0ffff03 	ldbu	r3,-4(fp)
8110be74:	00a04534 	movhi	r2,33044
8110be78:	10991504 	addi	r2,r2,25684
8110be7c:	18c00b24 	muli	r3,r3,44
8110be80:	10c5883a 	add	r2,r2,r3
8110be84:	10800904 	addi	r2,r2,36
8110be88:	1000000d 	sth	zero,0(r2)
		xBuffer32[ucIL].usiTimeOut = 0;
8110be8c:	e0ffff03 	ldbu	r3,-4(fp)
8110be90:	00a04534 	movhi	r2,33044
8110be94:	10991504 	addi	r2,r2,25684
8110be98:	18c00b24 	muli	r3,r3,44
8110be9c:	10c5883a 	add	r2,r2,r3
8110bea0:	10800984 	addi	r2,r2,38
8110bea4:	1000000d 	sth	zero,0(r2)
		xBuffer32[ucIL].ucNofRetries = 0;
8110bea8:	e0ffff03 	ldbu	r3,-4(fp)
8110beac:	00a04534 	movhi	r2,33044
8110beb0:	10991504 	addi	r2,r2,25684
8110beb4:	18c00b24 	muli	r3,r3,44
8110beb8:	10c5883a 	add	r2,r2,r3
8110bebc:	10800a04 	addi	r2,r2,40
8110bec0:	10000005 	stb	zero,0(r2)
		xBuffer64[ucIL].usiId = 0;
		xBuffer64[ucIL].usiTimeOut = 0;
		xBuffer64[ucIL].ucNofRetries = 0;
	}

	for( ucIL = 0; ucIL < N_32; ucIL++)
8110bec4:	e0bfff03 	ldbu	r2,-4(fp)
8110bec8:	10800044 	addi	r2,r2,1
8110becc:	e0bfff05 	stb	r2,-4(fp)
8110bed0:	e0bfff03 	ldbu	r2,-4(fp)
8110bed4:	10800230 	cmpltui	r2,r2,8
8110bed8:	103fd51e 	bne	r2,zero,8110be30 <__reset+0xfb0ebe30>
*/




}
8110bedc:	0001883a 	nop
8110bee0:	e037883a 	mov	sp,fp
8110bee4:	dfc00117 	ldw	ra,4(sp)
8110bee8:	df000017 	ldw	fp,0(sp)
8110beec:	dec00204 	addi	sp,sp,8
8110bef0:	f800283a 	ret

8110bef4 <main>:



/* Entry point */
int main(void)
{
8110bef4:	defff704 	addi	sp,sp,-36
8110bef8:	de00012e 	bgeu	sp,et,8110bf00 <main+0xc>
8110befc:	003b68fa 	trap	3
8110bf00:	dfc00815 	stw	ra,32(sp)
8110bf04:	df000715 	stw	fp,28(sp)
8110bf08:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110bf0c:	e03ffe15 	stw	zero,-8(fp)
	
	OSInit();
8110bf10:	1129f300 	call	81129f30 <OSInit>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
8110bf14:	01604534 	movhi	r5,33044
8110bf18:	29791104 	addi	r5,r5,-7100
8110bf1c:	01204534 	movhi	r4,33044
8110bf20:	21391204 	addi	r4,r4,-7096
8110bf24:	1111d8c0 	call	81111d8c <fopen>
8110bf28:	d0a04f15 	stw	r2,-32452(gp)
	#endif	

	#ifdef DEBUG_ON
		debug(fp, "Main entry point.\n");
8110bf2c:	d0a04f17 	ldw	r2,-32452(gp)
8110bf30:	100f883a 	mov	r7,r2
8110bf34:	01800484 	movi	r6,18
8110bf38:	01400044 	movi	r5,1
8110bf3c:	01204534 	movhi	r4,33044
8110bf40:	21391704 	addi	r4,r4,-7076
8110bf44:	11124700 	call	81112470 <fwrite>
	#endif


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110bf48:	110fa740 	call	8110fa74 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
8110bf4c:	11103400 	call	81110340 <bTestSimucamCriticalHW>
8110bf50:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110bf54:	e0bffe17 	ldw	r2,-8(fp)
8110bf58:	1000031e 	bne	r2,zero,8110bf68 <main+0x74>
		vFailTestCriticasParts();
8110bf5c:	110e2900 	call	8110e290 <vFailTestCriticasParts>
		return -1;
8110bf60:	00bfffc4 	movi	r2,-1
8110bf64:	00003d06 	br	8110c05c <main+0x168>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110bf68:	111018c0 	call	8111018c <bInitializeSDCard>
8110bf6c:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110bf70:	e0bffe17 	ldw	r2,-8(fp)
8110bf74:	1000031e 	bne	r2,zero,8110bf84 <main+0x90>
		vFailTestCriticasParts();
8110bf78:	110e2900 	call	8110e290 <vFailTestCriticasParts>
		return -1;
8110bf7c:	00bfffc4 	movi	r2,-1
8110bf80:	00003606 	br	8110c05c <main+0x168>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
8110bf84:	110d3b80 	call	8110d3b8 <vLoadDefaultETHConf>
8110bf88:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110bf8c:	e0bffe17 	ldw	r2,-8(fp)
8110bf90:	1000091e 	bne	r2,zero,8110bfb8 <main+0xc4>
		/* Default configuration for eth connection loaded */
		#ifdef DEBUG_ON
			debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110bf94:	d0a04f17 	ldw	r2,-32452(gp)
8110bf98:	100f883a 	mov	r7,r2
8110bf9c:	01801644 	movi	r6,89
8110bfa0:	01400044 	movi	r5,1
8110bfa4:	01204534 	movhi	r4,33044
8110bfa8:	21391c04 	addi	r4,r4,-7056
8110bfac:	11124700 	call	81112470 <fwrite>
		#endif
		return -1;
8110bfb0:	00bfffc4 	movi	r2,-1
8110bfb4:	00002906 	br	8110c05c <main+0x168>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110bfb8:	110dd440 	call	8110dd44 <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
8110bfbc:	110b9700 	call	8110b970 <bResourcesInitRTOS>
8110bfc0:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110bfc4:	e0bffe17 	ldw	r2,-8(fp)
8110bfc8:	1000091e 	bne	r2,zero,8110bff0 <main+0xfc>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
8110bfcc:	d0a04f17 	ldw	r2,-32452(gp)
8110bfd0:	100f883a 	mov	r7,r2
8110bfd4:	01800ac4 	movi	r6,43
8110bfd8:	01400044 	movi	r5,1
8110bfdc:	01204534 	movhi	r4,33044
8110bfe0:	21393304 	addi	r4,r4,-6964
8110bfe4:	11124700 	call	81112470 <fwrite>
		return -1;
8110bfe8:	00bfffc4 	movi	r2,-1
8110bfec:	00001b06 	br	8110c05c <main+0x168>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMebStruct );
8110bff0:	01204534 	movhi	r4,33044
8110bff4:	2113fe04 	addi	r4,r4,20472
8110bff8:	110fba40 	call	8110fba4 <vSimucamStructureInit>

	vVariablesInitialization();
8110bffc:	110bc600 	call	8110bc60 <vVariablesInitialization>
									vInitialTask_stk,
									INITIALIZATION_TASK_SIZE,
									NULL,
									OS_TASK_OPT_STK_CLR + OS_TASK_OPT_STK_CLR);
	#else
		error_code = OSTaskCreateExt(vInitialTask,
8110c000:	d8000415 	stw	zero,16(sp)
8110c004:	d8000315 	stw	zero,12(sp)
8110c008:	00810004 	movi	r2,1024
8110c00c:	d8800215 	stw	r2,8(sp)
8110c010:	00a04574 	movhi	r2,33045
8110c014:	10a16d04 	addi	r2,r2,-31308
8110c018:	d8800115 	stw	r2,4(sp)
8110c01c:	00800044 	movi	r2,1
8110c020:	d8800015 	stw	r2,0(sp)
8110c024:	01c00044 	movi	r7,1
8110c028:	01a04574 	movhi	r6,33045
8110c02c:	31a56c04 	addi	r6,r6,-27216
8110c030:	000b883a 	mov	r5,zero
8110c034:	01204474 	movhi	r4,33041
8110c038:	2123ac04 	addi	r4,r4,-29008
8110c03c:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
8110c040:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
8110c044:	e0bfff03 	ldbu	r2,-4(fp)
8110c048:	1000021e 	bne	r2,zero,8110c054 <main+0x160>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
8110c04c:	112a2600 	call	8112a260 <OSStart>
8110c050:	00000106 	br	8110c058 <main+0x164>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
8110c054:	110e67c0 	call	8110e67c <vFailInitialization>
	}
  
	return 0;
8110c058:	0005883a 	mov	r2,zero
}
8110c05c:	e037883a 	mov	sp,fp
8110c060:	dfc00117 	ldw	ra,4(sp)
8110c064:	df000017 	ldw	fp,0(sp)
8110c068:	dec00204 	addi	sp,sp,8
8110c06c:	f800283a 	ret

8110c070 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
8110c070:	defffe04 	addi	sp,sp,-8
8110c074:	de00012e 	bgeu	sp,et,8110c07c <vCCDLoadDefaultValues+0xc>
8110c078:	003b68fa 	trap	3
8110c07c:	df000115 	stw	fp,4(sp)
8110c080:	df000104 	addi	fp,sp,4
8110c084:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110c088:	e0bfff17 	ldw	r2,-4(fp)
8110c08c:	00c46784 	movi	r3,4510
8110c090:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
8110c094:	e0bfff17 	ldw	r2,-4(fp)
8110c098:	00c00784 	movi	r3,30
8110c09c:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
8110c0a0:	e0bfff17 	ldw	r2,-4(fp)
8110c0a4:	00c233c4 	movi	r3,2255
8110c0a8:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
8110c0ac:	e0bfff17 	ldw	r2,-4(fp)
8110c0b0:	00c003c4 	movi	r3,15
8110c0b4:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110c0b8:	e0bfff17 	ldw	r2,-4(fp)
8110c0bc:	00c00644 	movi	r3,25
8110c0c0:	10c0000d 	sth	r3,0(r2)
}
8110c0c4:	0001883a 	nop
8110c0c8:	e037883a 	mov	sp,fp
8110c0cc:	df000017 	ldw	fp,0(sp)
8110c0d0:	dec00104 	addi	sp,sp,4
8110c0d4:	f800283a 	ret

8110c0d8 <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
8110c0d8:	defff904 	addi	sp,sp,-28
8110c0dc:	de00012e 	bgeu	sp,et,8110c0e4 <vCCDChangeValues+0xc>
8110c0e0:	003b68fa 	trap	3
8110c0e4:	df000615 	stw	fp,24(sp)
8110c0e8:	df000604 	addi	fp,sp,24
8110c0ec:	e13ffa15 	stw	r4,-24(fp)
8110c0f0:	2811883a 	mov	r8,r5
8110c0f4:	300b883a 	mov	r5,r6
8110c0f8:	3809883a 	mov	r4,r7
8110c0fc:	e0c00117 	ldw	r3,4(fp)
8110c100:	e0800217 	ldw	r2,8(fp)
8110c104:	e23ffb0d 	sth	r8,-20(fp)
8110c108:	e17ffc0d 	sth	r5,-16(fp)
8110c10c:	e13ffd0d 	sth	r4,-12(fp)
8110c110:	e0fffe0d 	sth	r3,-8(fp)
8110c114:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
8110c118:	e0bffa17 	ldw	r2,-24(fp)
8110c11c:	e0fffb0b 	ldhu	r3,-20(fp)
8110c120:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
8110c124:	e0bffa17 	ldw	r2,-24(fp)
8110c128:	e0fffc0b 	ldhu	r3,-16(fp)
8110c12c:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
8110c130:	e0bffa17 	ldw	r2,-24(fp)
8110c134:	e0fffd0b 	ldhu	r3,-12(fp)
8110c138:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
8110c13c:	e0bffa17 	ldw	r2,-24(fp)
8110c140:	e0fffe0b 	ldhu	r3,-8(fp)
8110c144:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110c148:	e0bffa17 	ldw	r2,-24(fp)
8110c14c:	e0ffff0b 	ldhu	r3,-4(fp)
8110c150:	10c0000d 	sth	r3,0(r2)
}
8110c154:	0001883a 	nop
8110c158:	e037883a 	mov	sp,fp
8110c15c:	df000017 	ldw	fp,0(sp)
8110c160:	dec00104 	addi	sp,sp,4
8110c164:	f800283a 	ret

8110c168 <bSendUART128v2>:
#include "communication_utils.h"


/* Make sure that there is only 127 characters to send */
/* Always, ALWAYS send only an char[128] that you first did a memset(cBuffer,0,128), before put some string on it. */
bool bSendUART128v2 ( char *cBuffer, short int siIdMessage ) {
8110c168:	defff904 	addi	sp,sp,-28
8110c16c:	de00012e 	bgeu	sp,et,8110c174 <bSendUART128v2+0xc>
8110c170:	003b68fa 	trap	3
8110c174:	dfc00615 	stw	ra,24(sp)
8110c178:	df000515 	stw	fp,20(sp)
8110c17c:	df000504 	addi	fp,sp,20
8110c180:	e13ffe15 	stw	r4,-8(fp)
8110c184:	2805883a 	mov	r2,r5
8110c188:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;;
8110c18c:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110c190:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110c194:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110c198:	e03ffc15 	stw	zero,-16(fp)

	OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110c19c:	d0a05017 	ldw	r2,-32448(gp)
8110c1a0:	e0fffd04 	addi	r3,fp,-12
8110c1a4:	180d883a 	mov	r6,r3
8110c1a8:	01400504 	movi	r5,20
8110c1ac:	1009883a 	mov	r4,r2
8110c1b0:	112ff740 	call	8112ff74 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110c1b4:	e0bffd03 	ldbu	r2,-12(fp)
8110c1b8:	10803fcc 	andi	r2,r2,255
8110c1bc:	10000326 	beq	r2,zero,8110c1cc <bSendUART128v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110c1c0:	110e8e40 	call	8110e8e4 <vFailGetCountSemaphorexBuffer128>
		return bSuccessL;
8110c1c4:	e0bffc17 	ldw	r2,-16(fp)
8110c1c8:	00009e06 	br	8110c444 <bSendUART128v2+0x2dc>

	/* ---> At this point we know that there is some space in the buffer */


	/* Need to get the Mutex that protects xBuffer128 */
	OSMutexPend(xMutexBuffer128, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110c1cc:	d0a05917 	ldw	r2,-32412(gp)
8110c1d0:	e0fffd04 	addi	r3,fp,-12
8110c1d4:	180d883a 	mov	r6,r3
8110c1d8:	01400104 	movi	r5,4
8110c1dc:	1009883a 	mov	r4,r2
8110c1e0:	112df680 	call	8112df68 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c1e4:	e0bffd03 	ldbu	r2,-12(fp)
8110c1e8:	10803fcc 	andi	r2,r2,255
8110c1ec:	10001126 	beq	r2,zero,8110c234 <bSendUART128v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer128 that protect xBuffer128. (bSendUART128v2)\n");
8110c1f0:	d0a04f17 	ldw	r2,-32452(gp)
8110c1f4:	100f883a 	mov	r7,r2
8110c1f8:	01801484 	movi	r6,82
8110c1fc:	01400044 	movi	r5,1
8110c200:	01204534 	movhi	r4,33044
8110c204:	21393e04 	addi	r4,r4,-6920
8110c208:	11124700 	call	81112470 <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer128);
8110c20c:	d0a05017 	ldw	r2,-32448(gp)
8110c210:	1009883a 	mov	r4,r2
8110c214:	11302fc0 	call	811302fc <OSSemPost>
8110c218:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110c21c:	e0bffd03 	ldbu	r2,-12(fp)
8110c220:	10803fcc 	andi	r2,r2,255
8110c224:	10000126 	beq	r2,zero,8110c22c <bSendUART128v2+0xc4>
			vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110c228:	110e87c0 	call	8110e87c <vFailSetCountSemaphorexBuffer128>
		}

		return bSuccessL;
8110c22c:	e0bffc17 	ldw	r2,-16(fp)
8110c230:	00008406 	br	8110c444 <bSendUART128v2+0x2dc>
	/* ---> At this point we Have the mutex of the xBuffer128, and we can use it freely */


	
	/* Search for space */
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110c234:	e03ffb05 	stb	zero,-20(fp)
8110c238:	00004306 	br	8110c348 <bSendUART128v2+0x1e0>
	{
		if ( xInUseRetrans.b128[ucIL] == FALSE ) {
8110c23c:	e0fffb03 	ldbu	r3,-20(fp)
8110c240:	00a04574 	movhi	r2,33045
8110c244:	10a96d04 	addi	r2,r2,-23116
8110c248:	18c7883a 	add	r3,r3,r3
8110c24c:	18c7883a 	add	r3,r3,r3
8110c250:	10c5883a 	add	r2,r2,r3
8110c254:	10800017 	ldw	r2,0(r2)
8110c258:	1000381e 	bne	r2,zero,8110c33c <bSendUART128v2+0x1d4>
			/* Clear the buffer */
			memset(xBuffer128[ucIL].buffer, 0, 128);
8110c25c:	e0bffb03 	ldbu	r2,-20(fp)
8110c260:	10c02324 	muli	r3,r2,140
8110c264:	00a04574 	movhi	r2,33045
8110c268:	10a98304 	addi	r2,r2,-23028
8110c26c:	1885883a 	add	r2,r3,r2
8110c270:	01802004 	movi	r6,128
8110c274:	000b883a 	mov	r5,zero
8110c278:	1009883a 	mov	r4,r2
8110c27c:	1112fd40 	call	81112fd4 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer128[ucIL].buffer, cBuffer, 127);
8110c280:	e0bffb03 	ldbu	r2,-20(fp)
8110c284:	10c02324 	muli	r3,r2,140
8110c288:	00a04574 	movhi	r2,33045
8110c28c:	10a98304 	addi	r2,r2,-23028
8110c290:	1885883a 	add	r2,r3,r2
8110c294:	01801fc4 	movi	r6,127
8110c298:	e17ffe17 	ldw	r5,-8(fp)
8110c29c:	1009883a 	mov	r4,r2
8110c2a0:	1112e840 	call	81112e84 <memcpy>
			xBuffer128[ucIL].usiId = siIdMessage;
8110c2a4:	e13ffb03 	ldbu	r4,-20(fp)
8110c2a8:	e0ffff0b 	ldhu	r3,-4(fp)
8110c2ac:	00a04574 	movhi	r2,33045
8110c2b0:	10a98304 	addi	r2,r2,-23028
8110c2b4:	21002324 	muli	r4,r4,140
8110c2b8:	1105883a 	add	r2,r2,r4
8110c2bc:	10802104 	addi	r2,r2,132
8110c2c0:	10c0000d 	sth	r3,0(r2)
			xBuffer128[ucIL].ucNofRetries = 0;
8110c2c4:	e0fffb03 	ldbu	r3,-20(fp)
8110c2c8:	00a04574 	movhi	r2,33045
8110c2cc:	10a98304 	addi	r2,r2,-23028
8110c2d0:	18c02324 	muli	r3,r3,140
8110c2d4:	10c5883a 	add	r2,r2,r3
8110c2d8:	10802204 	addi	r2,r2,136
8110c2dc:	10000005 	stb	zero,0(r2)
			xBuffer128[ucIL].usiTimeOut = 0;
8110c2e0:	e0fffb03 	ldbu	r3,-20(fp)
8110c2e4:	00a04574 	movhi	r2,33045
8110c2e8:	10a98304 	addi	r2,r2,-23028
8110c2ec:	18c02324 	muli	r3,r3,140
8110c2f0:	10c5883a 	add	r2,r2,r3
8110c2f4:	10802184 	addi	r2,r2,134
8110c2f8:	1000000d 	sth	zero,0(r2)
			xBuffer128[ucIL].bSent = FALSE;
8110c2fc:	e0fffb03 	ldbu	r3,-20(fp)
8110c300:	00a04574 	movhi	r2,33045
8110c304:	10a98304 	addi	r2,r2,-23028
8110c308:	18c02324 	muli	r3,r3,140
8110c30c:	10c5883a 	add	r2,r2,r3
8110c310:	10802004 	addi	r2,r2,128
8110c314:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b128[ucIL] = TRUE;
8110c318:	e0fffb03 	ldbu	r3,-20(fp)
8110c31c:	00a04574 	movhi	r2,33045
8110c320:	10a96d04 	addi	r2,r2,-23116
8110c324:	18c7883a 	add	r3,r3,r3
8110c328:	18c7883a 	add	r3,r3,r3
8110c32c:	10c5883a 	add	r2,r2,r3
8110c330:	00c00044 	movi	r3,1
8110c334:	10c00015 	stw	r3,0(r2)
			break;
8110c338:	00000606 	br	8110c354 <bSendUART128v2+0x1ec>
	/* ---> At this point we Have the mutex of the xBuffer128, and we can use it freely */


	
	/* Search for space */
	for( ucIL = 0; ucIL < N_128; ucIL++)
8110c33c:	e0bffb03 	ldbu	r2,-20(fp)
8110c340:	10800044 	addi	r2,r2,1
8110c344:	e0bffb05 	stb	r2,-20(fp)
8110c348:	e0bffb03 	ldbu	r2,-20(fp)
8110c34c:	108001b0 	cmpltui	r2,r2,6
8110c350:	103fba1e 	bne	r2,zero,8110c23c <__reset+0xfb0ec23c>
			xInUseRetrans.b128[ucIL] = TRUE;
			break;
		}
	}

	if ( ucIL >= N_128 ) {
8110c354:	e0bffb03 	ldbu	r2,-20(fp)
8110c358:	108001b0 	cmpltui	r2,r2,6
8110c35c:	1000091e 	bne	r2,zero,8110c384 <bSendUART128v2+0x21c>
		ucErrorCode = OSSemPost(xSemCountBuffer128);
8110c360:	d0a05017 	ldw	r2,-32448(gp)
8110c364:	1009883a 	mov	r4,r2
8110c368:	11302fc0 	call	811302fc <OSSemPost>
8110c36c:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer128);
8110c370:	d0a05917 	ldw	r2,-32412(gp)
8110c374:	1009883a 	mov	r4,r2
8110c378:	112e50c0 	call	8112e50c <OSMutexPost>
		return bSuccessL;
8110c37c:	e0bffc17 	ldw	r2,-16(fp)
8110c380:	00003006 	br	8110c444 <bSendUART128v2+0x2dc>
	}

	bSuccessL = TRUE;
8110c384:	00800044 	movi	r2,1
8110c388:	e0bffc15 	stw	r2,-16(fp)
	SemCount128--; /* Sure that you get the semaphore */
8110c38c:	d0a05e43 	ldbu	r2,-32391(gp)
8110c390:	10bfffc4 	addi	r2,r2,-1
8110c394:	d0a05e45 	stb	r2,-32391(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */


	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110c398:	d0a05d17 	ldw	r2,-32396(gp)
8110c39c:	e0fffd04 	addi	r3,fp,-12
8110c3a0:	180d883a 	mov	r6,r3
8110c3a4:	01400084 	movi	r5,2
8110c3a8:	1009883a 	mov	r4,r2
8110c3ac:	112df680 	call	8112df68 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c3b0:	e0bffd03 	ldbu	r2,-12(fp)
8110c3b4:	10803fcc 	andi	r2,r2,255
8110c3b8:	10000c26 	beq	r2,zero,8110c3ec <bSendUART128v2+0x284>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART128v2)\n");
8110c3bc:	d0a04f17 	ldw	r2,-32452(gp)
8110c3c0:	100f883a 	mov	r7,r2
8110c3c4:	01801c04 	movi	r6,112
8110c3c8:	01400044 	movi	r5,1
8110c3cc:	01204534 	movhi	r4,33044
8110c3d0:	21395304 	addi	r4,r4,-6836
8110c3d4:	11124700 	call	81112470 <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer128 */
		OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110c3d8:	d0a05917 	ldw	r2,-32412(gp)
8110c3dc:	1009883a 	mov	r4,r2
8110c3e0:	112e50c0 	call	8112e50c <OSMutexPost>
		return bSuccessL;
8110c3e4:	e0bffc17 	ldw	r2,-16(fp)
8110c3e8:	00001606 	br	8110c444 <bSendUART128v2+0x2dc>


	/* ---> At this point we have all resources to send the message */


	puts(xBuffer128[ucIL].buffer);
8110c3ec:	e0bffb03 	ldbu	r2,-20(fp)
8110c3f0:	10c02324 	muli	r3,r2,140
8110c3f4:	00a04574 	movhi	r2,33045
8110c3f8:	10a98304 	addi	r2,r2,-23028
8110c3fc:	1885883a 	add	r2,r3,r2
8110c400:	1009883a 	mov	r4,r2
8110c404:	11134200 	call	81113420 <puts>
	xBuffer128[ucIL].bSent = TRUE;
8110c408:	e0fffb03 	ldbu	r3,-20(fp)
8110c40c:	00a04574 	movhi	r2,33045
8110c410:	10a98304 	addi	r2,r2,-23028
8110c414:	18c02324 	muli	r3,r3,140
8110c418:	10c5883a 	add	r2,r2,r3
8110c41c:	10802004 	addi	r2,r2,128
8110c420:	00c00044 	movi	r3,1
8110c424:	10c00015 	stw	r3,0(r2)


	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */

	OSMutexPost(xTxUARTMutex);
8110c428:	d0a05d17 	ldw	r2,-32396(gp)
8110c42c:	1009883a 	mov	r4,r2
8110c430:	112e50c0 	call	8112e50c <OSMutexPost>
	OSMutexPost(xMutexBuffer128);
8110c434:	d0a05917 	ldw	r2,-32412(gp)
8110c438:	1009883a 	mov	r4,r2
8110c43c:	112e50c0 	call	8112e50c <OSMutexPost>

	return bSuccessL;
8110c440:	e0bffc17 	ldw	r2,-16(fp)
}
8110c444:	e037883a 	mov	sp,fp
8110c448:	dfc00117 	ldw	ra,4(sp)
8110c44c:	df000017 	ldw	fp,0(sp)
8110c450:	dec00204 	addi	sp,sp,8
8110c454:	f800283a 	ret

8110c458 <bSendUART64v2>:



/* Make sure that there is only 63 characters to send */
/* Always, ALWAYS send only an char[64] that you first did a memset(cBuffer,0,64), before put some string on it. */
bool bSendUART64v2 ( char *cBuffer, short int siIdMessage ) {
8110c458:	defff904 	addi	sp,sp,-28
8110c45c:	de00012e 	bgeu	sp,et,8110c464 <bSendUART64v2+0xc>
8110c460:	003b68fa 	trap	3
8110c464:	dfc00615 	stw	ra,24(sp)
8110c468:	df000515 	stw	fp,20(sp)
8110c46c:	df000504 	addi	fp,sp,20
8110c470:	e13ffe15 	stw	r4,-8(fp)
8110c474:	2805883a 	mov	r2,r5
8110c478:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;
8110c47c:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110c480:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110c484:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110c488:	e03ffc15 	stw	zero,-16(fp)

	OSSemPend(xSemCountBuffer64, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110c48c:	d0a04c17 	ldw	r2,-32464(gp)
8110c490:	e0fffd04 	addi	r3,fp,-12
8110c494:	180d883a 	mov	r6,r3
8110c498:	01400504 	movi	r5,20
8110c49c:	1009883a 	mov	r4,r2
8110c4a0:	112ff740 	call	8112ff74 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110c4a4:	e0bffd03 	ldbu	r2,-12(fp)
8110c4a8:	10803fcc 	andi	r2,r2,255
8110c4ac:	10000326 	beq	r2,zero,8110c4bc <bSendUART64v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c4b0:	110e94c0 	call	8110e94c <vFailGetCountSemaphorexBuffer64>
		return bSuccessL;
8110c4b4:	e0bffc17 	ldw	r2,-16(fp)
8110c4b8:	0000a006 	br	8110c73c <bSendUART64v2+0x2e4>
	/* ---> At this point we know that there is some space in the buffer */

	
	
	/* Need to get the Mutex that protects xBuffer64 */
	OSMutexPend(xMutexBuffer64, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110c4bc:	d0a05b17 	ldw	r2,-32404(gp)
8110c4c0:	e0fffd04 	addi	r3,fp,-12
8110c4c4:	180d883a 	mov	r6,r3
8110c4c8:	01400104 	movi	r5,4
8110c4cc:	1009883a 	mov	r4,r2
8110c4d0:	112df680 	call	8112df68 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c4d4:	e0bffd03 	ldbu	r2,-12(fp)
8110c4d8:	10803fcc 	andi	r2,r2,255
8110c4dc:	10001126 	beq	r2,zero,8110c524 <bSendUART64v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer64 that protect xBuffer64. (bSendUART64v2)\n");
8110c4e0:	d0a04f17 	ldw	r2,-32452(gp)
8110c4e4:	100f883a 	mov	r7,r2
8110c4e8:	018013c4 	movi	r6,79
8110c4ec:	01400044 	movi	r5,1
8110c4f0:	01204534 	movhi	r4,33044
8110c4f4:	21397004 	addi	r4,r4,-6720
8110c4f8:	11124700 	call	81112470 <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer64);
8110c4fc:	d0a04c17 	ldw	r2,-32464(gp)
8110c500:	1009883a 	mov	r4,r2
8110c504:	11302fc0 	call	811302fc <OSSemPost>
8110c508:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110c50c:	e0bffd03 	ldbu	r2,-12(fp)
8110c510:	10803fcc 	andi	r2,r2,255
8110c514:	10000126 	beq	r2,zero,8110c51c <bSendUART64v2+0xc4>
			vFailSetCountSemaphorexBuffer64(); /*Could not send back the semaphore, this is critical.*/
8110c518:	110e8140 	call	8110e814 <vFailSetCountSemaphorexBuffer64>
		}

		return bSuccessL;
8110c51c:	e0bffc17 	ldw	r2,-16(fp)
8110c520:	00008606 	br	8110c73c <bSendUART64v2+0x2e4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_64; ucIL++)
8110c524:	e03ffb05 	stb	zero,-20(fp)
8110c528:	00004506 	br	8110c640 <bSendUART64v2+0x1e8>
	{
		if ( xInUseRetrans.b64[ucIL] == FALSE ) {
8110c52c:	e0fffb03 	ldbu	r3,-20(fp)
8110c530:	00a04574 	movhi	r2,33045
8110c534:	10a96d04 	addi	r2,r2,-23116
8110c538:	18c00184 	addi	r3,r3,6
8110c53c:	18c7883a 	add	r3,r3,r3
8110c540:	18c7883a 	add	r3,r3,r3
8110c544:	10c5883a 	add	r2,r2,r3
8110c548:	10800017 	ldw	r2,0(r2)
8110c54c:	1000391e 	bne	r2,zero,8110c634 <bSendUART64v2+0x1dc>
			/* Clear the buffer */
			memset(xBuffer64[ucIL].buffer, 0, 64);
8110c550:	e0bffb03 	ldbu	r2,-20(fp)
8110c554:	10c01324 	muli	r3,r2,76
8110c558:	00a04534 	movhi	r2,33044
8110c55c:	108f6604 	addi	r2,r2,15768
8110c560:	1885883a 	add	r2,r3,r2
8110c564:	01801004 	movi	r6,64
8110c568:	000b883a 	mov	r5,zero
8110c56c:	1009883a 	mov	r4,r2
8110c570:	1112fd40 	call	81112fd4 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer64[ucIL].buffer, cBuffer, 63);
8110c574:	e0bffb03 	ldbu	r2,-20(fp)
8110c578:	10c01324 	muli	r3,r2,76
8110c57c:	00a04534 	movhi	r2,33044
8110c580:	108f6604 	addi	r2,r2,15768
8110c584:	1885883a 	add	r2,r3,r2
8110c588:	01800fc4 	movi	r6,63
8110c58c:	e17ffe17 	ldw	r5,-8(fp)
8110c590:	1009883a 	mov	r4,r2
8110c594:	1112e840 	call	81112e84 <memcpy>
			xBuffer64[ucIL].usiId = siIdMessage;
8110c598:	e13ffb03 	ldbu	r4,-20(fp)
8110c59c:	e0ffff0b 	ldhu	r3,-4(fp)
8110c5a0:	00a04534 	movhi	r2,33044
8110c5a4:	108f6604 	addi	r2,r2,15768
8110c5a8:	21001324 	muli	r4,r4,76
8110c5ac:	1105883a 	add	r2,r2,r4
8110c5b0:	10801104 	addi	r2,r2,68
8110c5b4:	10c0000d 	sth	r3,0(r2)
			xBuffer64[ucIL].ucNofRetries = 0;
8110c5b8:	e0fffb03 	ldbu	r3,-20(fp)
8110c5bc:	00a04534 	movhi	r2,33044
8110c5c0:	108f6604 	addi	r2,r2,15768
8110c5c4:	18c01324 	muli	r3,r3,76
8110c5c8:	10c5883a 	add	r2,r2,r3
8110c5cc:	10801204 	addi	r2,r2,72
8110c5d0:	10000005 	stb	zero,0(r2)
			xBuffer64[ucIL].usiTimeOut = 0;
8110c5d4:	e0fffb03 	ldbu	r3,-20(fp)
8110c5d8:	00a04534 	movhi	r2,33044
8110c5dc:	108f6604 	addi	r2,r2,15768
8110c5e0:	18c01324 	muli	r3,r3,76
8110c5e4:	10c5883a 	add	r2,r2,r3
8110c5e8:	10801184 	addi	r2,r2,70
8110c5ec:	1000000d 	sth	zero,0(r2)
			xBuffer64[ucIL].bSent = FALSE;
8110c5f0:	e0fffb03 	ldbu	r3,-20(fp)
8110c5f4:	00a04534 	movhi	r2,33044
8110c5f8:	108f6604 	addi	r2,r2,15768
8110c5fc:	18c01324 	muli	r3,r3,76
8110c600:	10c5883a 	add	r2,r2,r3
8110c604:	10801004 	addi	r2,r2,64
8110c608:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b64[ucIL] = TRUE;
8110c60c:	e0fffb03 	ldbu	r3,-20(fp)
8110c610:	00a04574 	movhi	r2,33045
8110c614:	10a96d04 	addi	r2,r2,-23116
8110c618:	18c00184 	addi	r3,r3,6
8110c61c:	18c7883a 	add	r3,r3,r3
8110c620:	18c7883a 	add	r3,r3,r3
8110c624:	10c5883a 	add	r2,r2,r3
8110c628:	00c00044 	movi	r3,1
8110c62c:	10c00015 	stw	r3,0(r2)
			break;
8110c630:	00000606 	br	8110c64c <bSendUART64v2+0x1f4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_64; ucIL++)
8110c634:	e0bffb03 	ldbu	r2,-20(fp)
8110c638:	10800044 	addi	r2,r2,1
8110c63c:	e0bffb05 	stb	r2,-20(fp)
8110c640:	e0bffb03 	ldbu	r2,-20(fp)
8110c644:	10800230 	cmpltui	r2,r2,8
8110c648:	103fb81e 	bne	r2,zero,8110c52c <__reset+0xfb0ec52c>
			break;
		}
	}


	if ( ucIL >= N_64 ) {
8110c64c:	e0bffb03 	ldbu	r2,-20(fp)
8110c650:	10800230 	cmpltui	r2,r2,8
8110c654:	1000091e 	bne	r2,zero,8110c67c <bSendUART64v2+0x224>
		ucErrorCode = OSSemPost(xSemCountBuffer64);
8110c658:	d0a04c17 	ldw	r2,-32464(gp)
8110c65c:	1009883a 	mov	r4,r2
8110c660:	11302fc0 	call	811302fc <OSSemPost>
8110c664:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer64);
8110c668:	d0a05b17 	ldw	r2,-32404(gp)
8110c66c:	1009883a 	mov	r4,r2
8110c670:	112e50c0 	call	8112e50c <OSMutexPost>
		return bSuccessL;
8110c674:	e0bffc17 	ldw	r2,-16(fp)
8110c678:	00003006 	br	8110c73c <bSendUART64v2+0x2e4>
	}

	bSuccessL = TRUE;
8110c67c:	00800044 	movi	r2,1
8110c680:	e0bffc15 	stw	r2,-16(fp)
	SemCount64--; /* Sure that you get the semaphore */
8110c684:	d0a05e03 	ldbu	r2,-32392(gp)
8110c688:	10bfffc4 	addi	r2,r2,-1
8110c68c:	d0a05e05 	stb	r2,-32392(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */


	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110c690:	d0a05d17 	ldw	r2,-32396(gp)
8110c694:	e0fffd04 	addi	r3,fp,-12
8110c698:	180d883a 	mov	r6,r3
8110c69c:	01400084 	movi	r5,2
8110c6a0:	1009883a 	mov	r4,r2
8110c6a4:	112df680 	call	8112df68 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c6a8:	e0bffd03 	ldbu	r2,-12(fp)
8110c6ac:	10803fcc 	andi	r2,r2,255
8110c6b0:	10000c26 	beq	r2,zero,8110c6e4 <bSendUART64v2+0x28c>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART64v2)\n");
8110c6b4:	d0a04f17 	ldw	r2,-32452(gp)
8110c6b8:	100f883a 	mov	r7,r2
8110c6bc:	01801bc4 	movi	r6,111
8110c6c0:	01400044 	movi	r5,1
8110c6c4:	01204534 	movhi	r4,33044
8110c6c8:	21398404 	addi	r4,r4,-6640
8110c6cc:	11124700 	call	81112470 <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer64 */
		OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64 */
8110c6d0:	d0a05b17 	ldw	r2,-32404(gp)
8110c6d4:	1009883a 	mov	r4,r2
8110c6d8:	112e50c0 	call	8112e50c <OSMutexPost>
		return bSuccessL;
8110c6dc:	e0bffc17 	ldw	r2,-16(fp)
8110c6e0:	00001606 	br	8110c73c <bSendUART64v2+0x2e4>


	/* ---> At this point we have all resources to send the message */


	puts(xBuffer64[ucIL].buffer);
8110c6e4:	e0bffb03 	ldbu	r2,-20(fp)
8110c6e8:	10c01324 	muli	r3,r2,76
8110c6ec:	00a04534 	movhi	r2,33044
8110c6f0:	108f6604 	addi	r2,r2,15768
8110c6f4:	1885883a 	add	r2,r3,r2
8110c6f8:	1009883a 	mov	r4,r2
8110c6fc:	11134200 	call	81113420 <puts>
	xBuffer64[ucIL].bSent = TRUE;
8110c700:	e0fffb03 	ldbu	r3,-20(fp)
8110c704:	00a04534 	movhi	r2,33044
8110c708:	108f6604 	addi	r2,r2,15768
8110c70c:	18c01324 	muli	r3,r3,76
8110c710:	10c5883a 	add	r2,r2,r3
8110c714:	10801004 	addi	r2,r2,64
8110c718:	00c00044 	movi	r3,1
8110c71c:	10c00015 	stw	r3,0(r2)


	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */
	OSMutexPost(xTxUARTMutex);
8110c720:	d0a05d17 	ldw	r2,-32396(gp)
8110c724:	1009883a 	mov	r4,r2
8110c728:	112e50c0 	call	8112e50c <OSMutexPost>
	OSMutexPost(xMutexBuffer64);
8110c72c:	d0a05b17 	ldw	r2,-32404(gp)
8110c730:	1009883a 	mov	r4,r2
8110c734:	112e50c0 	call	8112e50c <OSMutexPost>

	return bSuccessL;
8110c738:	e0bffc17 	ldw	r2,-16(fp)
}
8110c73c:	e037883a 	mov	sp,fp
8110c740:	dfc00117 	ldw	ra,4(sp)
8110c744:	df000017 	ldw	fp,0(sp)
8110c748:	dec00204 	addi	sp,sp,8
8110c74c:	f800283a 	ret

8110c750 <bSendUART32v2>:



/* Make sure that there is only 31 characters to send */
/* Always, ALWAYS send only an char[32] that you first did a memset(cBuffer,0,32), before put some string on it. */
bool bSendUART32v2 ( char *cBuffer, short int siIdMessage ) {
8110c750:	defff904 	addi	sp,sp,-28
8110c754:	de00012e 	bgeu	sp,et,8110c75c <bSendUART32v2+0xc>
8110c758:	003b68fa 	trap	3
8110c75c:	dfc00615 	stw	ra,24(sp)
8110c760:	df000515 	stw	fp,20(sp)
8110c764:	df000504 	addi	fp,sp,20
8110c768:	e13ffe15 	stw	r4,-8(fp)
8110c76c:	2805883a 	mov	r2,r5
8110c770:	e0bfff0d 	sth	r2,-4(fp)
	INT8U ucErrorCode = 0;
8110c774:	e03ffd05 	stb	zero,-12(fp)
	unsigned char ucIL = 0;
8110c778:	e03ffb05 	stb	zero,-20(fp)
	bool bSuccessL = FALSE;
8110c77c:	e03ffc15 	stw	zero,-16(fp)
	

	bSuccessL = FALSE;
8110c780:	e03ffc15 	stw	zero,-16(fp)
	
	OSSemPend(xSemCountBuffer32, TICKS_WAITING_FOR_SPACE, &ucErrorCode);
8110c784:	d0a05a17 	ldw	r2,-32408(gp)
8110c788:	e0fffd04 	addi	r3,fp,-12
8110c78c:	180d883a 	mov	r6,r3
8110c790:	01400504 	movi	r5,20
8110c794:	1009883a 	mov	r4,r2
8110c798:	112ff740 	call	8112ff74 <OSSemPend>
	/* Check if gets The semaphore, if yes means that are some space in the (re)transmission buffer */
	if ( ucErrorCode != OS_NO_ERR ) {
8110c79c:	e0bffd03 	ldbu	r2,-12(fp)
8110c7a0:	10803fcc 	andi	r2,r2,255
8110c7a4:	10000326 	beq	r2,zero,8110c7b4 <bSendUART32v2+0x64>
		/* No space in the transmission buffer */
		vFailGetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110c7a8:	110e9b40 	call	8110e9b4 <vFailGetCountSemaphorexBuffer32>
		return bSuccessL;
8110c7ac:	e0bffc17 	ldw	r2,-16(fp)
8110c7b0:	0000a006 	br	8110ca34 <bSendUART32v2+0x2e4>

	/* ---> At this point we know that there is some space in the buffer */


	/* Need to get the Mutex that protects xBuffer32 */
	OSMutexPend(xMutexBuffer32, TICKS_WAITING_MUTEX_RETRANS, &ucErrorCode); /* Wait X ticks = X ms */
8110c7b4:	d0a05717 	ldw	r2,-32420(gp)
8110c7b8:	e0fffd04 	addi	r3,fp,-12
8110c7bc:	180d883a 	mov	r6,r3
8110c7c0:	01400104 	movi	r5,4
8110c7c4:	1009883a 	mov	r4,r2
8110c7c8:	112df680 	call	8112df68 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c7cc:	e0bffd03 	ldbu	r2,-12(fp)
8110c7d0:	10803fcc 	andi	r2,r2,255
8110c7d4:	10001126 	beq	r2,zero,8110c81c <bSendUART32v2+0xcc>
		/* Could not get the mutex, so we need to give the semaphore back */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xMutexBuffer32 that protect xBuffer32. (bSendUART32v2)\n");
8110c7d8:	d0a04f17 	ldw	r2,-32452(gp)
8110c7dc:	100f883a 	mov	r7,r2
8110c7e0:	018013c4 	movi	r6,79
8110c7e4:	01400044 	movi	r5,1
8110c7e8:	01204534 	movhi	r4,33044
8110c7ec:	2139a004 	addi	r4,r4,-6528
8110c7f0:	11124700 	call	81112470 <fwrite>
		#endif
		ucErrorCode = OSSemPost(xSemCountBuffer32);
8110c7f4:	d0a05a17 	ldw	r2,-32408(gp)
8110c7f8:	1009883a 	mov	r4,r2
8110c7fc:	11302fc0 	call	811302fc <OSSemPost>
8110c800:	e0bffd05 	stb	r2,-12(fp)
		if ( ucErrorCode != OS_ERR_NONE ) {
8110c804:	e0bffd03 	ldbu	r2,-12(fp)
8110c808:	10803fcc 	andi	r2,r2,255
8110c80c:	10000126 	beq	r2,zero,8110c814 <bSendUART32v2+0xc4>
			vFailSetCountSemaphorexBuffer32(); /*Could not send back the semaphore, this is critical.*/
8110c810:	110e7ac0 	call	8110e7ac <vFailSetCountSemaphorexBuffer32>
		}

		return bSuccessL;
8110c814:	e0bffc17 	ldw	r2,-16(fp)
8110c818:	00008606 	br	8110ca34 <bSendUART32v2+0x2e4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_32; ucIL++)
8110c81c:	e03ffb05 	stb	zero,-20(fp)
8110c820:	00004506 	br	8110c938 <bSendUART32v2+0x1e8>
	{
		if ( xInUseRetrans.b32[ucIL] == FALSE ) {
8110c824:	e0fffb03 	ldbu	r3,-20(fp)
8110c828:	00a04574 	movhi	r2,33045
8110c82c:	10a96d04 	addi	r2,r2,-23116
8110c830:	18c00384 	addi	r3,r3,14
8110c834:	18c7883a 	add	r3,r3,r3
8110c838:	18c7883a 	add	r3,r3,r3
8110c83c:	10c5883a 	add	r2,r2,r3
8110c840:	10800017 	ldw	r2,0(r2)
8110c844:	1000391e 	bne	r2,zero,8110c92c <bSendUART32v2+0x1dc>
			/* Clear the buffer */
			memset(xBuffer32[ucIL].buffer, 0, 32);
8110c848:	e0bffb03 	ldbu	r2,-20(fp)
8110c84c:	10c00b24 	muli	r3,r2,44
8110c850:	00a04534 	movhi	r2,33044
8110c854:	10991504 	addi	r2,r2,25684
8110c858:	1885883a 	add	r2,r3,r2
8110c85c:	01800804 	movi	r6,32
8110c860:	000b883a 	mov	r5,zero
8110c864:	1009883a 	mov	r4,r2
8110c868:	1112fd40 	call	81112fd4 <memset>
			/* Making sure that will have some \0 */
			memcpy(xBuffer32[ucIL].buffer, cBuffer, 31);
8110c86c:	e0bffb03 	ldbu	r2,-20(fp)
8110c870:	10c00b24 	muli	r3,r2,44
8110c874:	00a04534 	movhi	r2,33044
8110c878:	10991504 	addi	r2,r2,25684
8110c87c:	1885883a 	add	r2,r3,r2
8110c880:	018007c4 	movi	r6,31
8110c884:	e17ffe17 	ldw	r5,-8(fp)
8110c888:	1009883a 	mov	r4,r2
8110c88c:	1112e840 	call	81112e84 <memcpy>
			xBuffer32[ucIL].usiId = siIdMessage;
8110c890:	e13ffb03 	ldbu	r4,-20(fp)
8110c894:	e0ffff0b 	ldhu	r3,-4(fp)
8110c898:	00a04534 	movhi	r2,33044
8110c89c:	10991504 	addi	r2,r2,25684
8110c8a0:	21000b24 	muli	r4,r4,44
8110c8a4:	1105883a 	add	r2,r2,r4
8110c8a8:	10800904 	addi	r2,r2,36
8110c8ac:	10c0000d 	sth	r3,0(r2)
			xBuffer32[ucIL].ucNofRetries = 0;
8110c8b0:	e0fffb03 	ldbu	r3,-20(fp)
8110c8b4:	00a04534 	movhi	r2,33044
8110c8b8:	10991504 	addi	r2,r2,25684
8110c8bc:	18c00b24 	muli	r3,r3,44
8110c8c0:	10c5883a 	add	r2,r2,r3
8110c8c4:	10800a04 	addi	r2,r2,40
8110c8c8:	10000005 	stb	zero,0(r2)
			xBuffer32[ucIL].usiTimeOut = 0;
8110c8cc:	e0fffb03 	ldbu	r3,-20(fp)
8110c8d0:	00a04534 	movhi	r2,33044
8110c8d4:	10991504 	addi	r2,r2,25684
8110c8d8:	18c00b24 	muli	r3,r3,44
8110c8dc:	10c5883a 	add	r2,r2,r3
8110c8e0:	10800984 	addi	r2,r2,38
8110c8e4:	1000000d 	sth	zero,0(r2)
			xBuffer32[ucIL].bSent = FALSE;
8110c8e8:	e0fffb03 	ldbu	r3,-20(fp)
8110c8ec:	00a04534 	movhi	r2,33044
8110c8f0:	10991504 	addi	r2,r2,25684
8110c8f4:	18c00b24 	muli	r3,r3,44
8110c8f8:	10c5883a 	add	r2,r2,r3
8110c8fc:	10800804 	addi	r2,r2,32
8110c900:	10000015 	stw	zero,0(r2)
			xInUseRetrans.b32[ucIL] = TRUE;
8110c904:	e0fffb03 	ldbu	r3,-20(fp)
8110c908:	00a04574 	movhi	r2,33045
8110c90c:	10a96d04 	addi	r2,r2,-23116
8110c910:	18c00384 	addi	r3,r3,14
8110c914:	18c7883a 	add	r3,r3,r3
8110c918:	18c7883a 	add	r3,r3,r3
8110c91c:	10c5883a 	add	r2,r2,r3
8110c920:	00c00044 	movi	r3,1
8110c924:	10c00015 	stw	r3,0(r2)
			break;
8110c928:	00000606 	br	8110c944 <bSendUART32v2+0x1f4>
	

	/* ---> At this point we Have the mutex of the xBuffer64, and we can use it freely */


	for( ucIL = 0; ucIL < N_32; ucIL++)
8110c92c:	e0bffb03 	ldbu	r2,-20(fp)
8110c930:	10800044 	addi	r2,r2,1
8110c934:	e0bffb05 	stb	r2,-20(fp)
8110c938:	e0bffb03 	ldbu	r2,-20(fp)
8110c93c:	10800230 	cmpltui	r2,r2,8
8110c940:	103fb81e 	bne	r2,zero,8110c824 <__reset+0xfb0ec824>
			xInUseRetrans.b32[ucIL] = TRUE;
			break;
		}
	}	

	if ( ucIL >= N_32 ) {
8110c944:	e0bffb03 	ldbu	r2,-20(fp)
8110c948:	10800230 	cmpltui	r2,r2,8
8110c94c:	1000091e 	bne	r2,zero,8110c974 <bSendUART32v2+0x224>
		ucErrorCode = OSSemPost(xSemCountBuffer32);
8110c950:	d0a05a17 	ldw	r2,-32408(gp)
8110c954:	1009883a 	mov	r4,r2
8110c958:	11302fc0 	call	811302fc <OSSemPost>
8110c95c:	e0bffd05 	stb	r2,-12(fp)
		OSMutexPost(xMutexBuffer32);
8110c960:	d0a05717 	ldw	r2,-32420(gp)
8110c964:	1009883a 	mov	r4,r2
8110c968:	112e50c0 	call	8112e50c <OSMutexPost>
		return bSuccessL;
8110c96c:	e0bffc17 	ldw	r2,-16(fp)
8110c970:	00003006 	br	8110ca34 <bSendUART32v2+0x2e4>
	}
	
	bSuccessL = TRUE;
8110c974:	00800044 	movi	r2,1
8110c978:	e0bffc15 	stw	r2,-16(fp)
	SemCount32--; /* Sure that you get the semaphore */
8110c97c:	d0a05583 	ldbu	r2,-32426(gp)
8110c980:	10bfffc4 	addi	r2,r2,-1
8110c984:	d0a05585 	stb	r2,-32426(gp)


	/* ---> Now try to get the Mutex that protects the TX of the UART to transmit the message */


	OSMutexPend(xTxUARTMutex, TICKS_WAITING_MUTEX_TX, &ucErrorCode); /* Wait X ticks = X ms */
8110c988:	d0a05d17 	ldw	r2,-32396(gp)
8110c98c:	e0fffd04 	addi	r3,fp,-12
8110c990:	180d883a 	mov	r6,r3
8110c994:	01400084 	movi	r5,2
8110c998:	1009883a 	mov	r4,r2
8110c99c:	112df680 	call	8112df68 <OSMutexPend>
	if ( ucErrorCode != OS_NO_ERR ) {
8110c9a0:	e0bffd03 	ldbu	r2,-12(fp)
8110c9a4:	10803fcc 	andi	r2,r2,255
8110c9a8:	10000c26 	beq	r2,zero,8110c9dc <bSendUART32v2+0x28c>
		/* Could not get the mutex of TX */
		/* That's ok, as the message was already put in the retransmission buffer it will be sent by the checker timeout task */
		#ifdef DEBUG_ON
			debug(fp,"Could not get the mutex xTxUARTMutex, but the message is already in the retransmission buffer. (bSendUART32v2)\n");
8110c9ac:	d0a04f17 	ldw	r2,-32452(gp)
8110c9b0:	100f883a 	mov	r7,r2
8110c9b4:	01801bc4 	movi	r6,111
8110c9b8:	01400044 	movi	r5,1
8110c9bc:	01204534 	movhi	r4,33044
8110c9c0:	2139b404 	addi	r4,r4,-6448
8110c9c4:	11124700 	call	81112470 <fwrite>
		#endif
		/* Indicates that this buffer already has a message that should be sent by the retransmission immediately */
		/* Free the Mutex of the xBuffer64 */
		OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xMutexBuffer32 */
8110c9c8:	d0a05717 	ldw	r2,-32420(gp)
8110c9cc:	1009883a 	mov	r4,r2
8110c9d0:	112e50c0 	call	8112e50c <OSMutexPost>
		return bSuccessL;
8110c9d4:	e0bffc17 	ldw	r2,-16(fp)
8110c9d8:	00001606 	br	8110ca34 <bSendUART32v2+0x2e4>
	}


	/* ---> At this point we have all resources to send the message */

	puts(xBuffer32[ucIL].buffer);
8110c9dc:	e0bffb03 	ldbu	r2,-20(fp)
8110c9e0:	10c00b24 	muli	r3,r2,44
8110c9e4:	00a04534 	movhi	r2,33044
8110c9e8:	10991504 	addi	r2,r2,25684
8110c9ec:	1885883a 	add	r2,r3,r2
8110c9f0:	1009883a 	mov	r4,r2
8110c9f4:	11134200 	call	81113420 <puts>
	xBuffer32[ucIL].bSent = TRUE;
8110c9f8:	e0fffb03 	ldbu	r3,-20(fp)
8110c9fc:	00a04534 	movhi	r2,33044
8110ca00:	10991504 	addi	r2,r2,25684
8110ca04:	18c00b24 	muli	r3,r3,44
8110ca08:	10c5883a 	add	r2,r2,r3
8110ca0c:	10800804 	addi	r2,r2,32
8110ca10:	00c00044 	movi	r3,1
8110ca14:	10c00015 	stw	r3,0(r2)

	/* ---> Best scenario, giving the mutexes back in the inverse order to avoid deadlock */


	OSMutexPost(xTxUARTMutex);
8110ca18:	d0a05d17 	ldw	r2,-32396(gp)
8110ca1c:	1009883a 	mov	r4,r2
8110ca20:	112e50c0 	call	8112e50c <OSMutexPost>
	OSMutexPost(xMutexBuffer32);
8110ca24:	d0a05717 	ldw	r2,-32420(gp)
8110ca28:	1009883a 	mov	r4,r2
8110ca2c:	112e50c0 	call	8112e50c <OSMutexPost>

	return bSuccessL;
8110ca30:	e0bffc17 	ldw	r2,-16(fp)
}
8110ca34:	e037883a 	mov	sp,fp
8110ca38:	dfc00117 	ldw	ra,4(sp)
8110ca3c:	df000017 	ldw	fp,0(sp)
8110ca40:	dec00204 	addi	sp,sp,8
8110ca44:	f800283a 	ret

8110ca48 <vSendEthConf>:


void vSendEthConf ( void ) {
8110ca48:	deffc304 	addi	sp,sp,-244
8110ca4c:	de00012e 	bgeu	sp,et,8110ca54 <vSendEthConf+0xc>
8110ca50:	003b68fa 	trap	3
8110ca54:	dfc03c15 	stw	ra,240(sp)
8110ca58:	df003b15 	stw	fp,236(sp)
8110ca5c:	dd403a15 	stw	r21,232(sp)
8110ca60:	dd003915 	stw	r20,228(sp)
8110ca64:	dcc03815 	stw	r19,224(sp)
8110ca68:	dc803715 	stw	r18,220(sp)
8110ca6c:	dc403615 	stw	r17,216(sp)
8110ca70:	dc003515 	stw	r16,212(sp)
8110ca74:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
8110ca78:	e03fd98d 	sth	zero,-154(fp)
8110ca7c:	e03fda0d 	sth	zero,-152(fp)
8110ca80:	e0bfda84 	addi	r2,fp,-150
8110ca84:	00c01f04 	movi	r3,124
8110ca88:	180d883a 	mov	r6,r3
8110ca8c:	000b883a 	mov	r5,zero
8110ca90:	1009883a 	mov	r4,r2
8110ca94:	1112fd40 	call	81112fd4 <memset>
    unsigned char crc = 0;
8110ca98:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110ca9c:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110caa0:	110cef00 	call	8110cef0 <usiGetIdCMD>
8110caa4:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110caa8:	e57fd90b 	ldhu	r21,-156(fp)
8110caac:	00a04574 	movhi	r2,33045
8110cab0:	10aefb04 	addi	r2,r2,-17428
8110cab4:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110cab8:	00a04574 	movhi	r2,33045
8110cabc:	10aefb04 	addi	r2,r2,-17428
8110cac0:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cac4:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110cac8:	00a04574 	movhi	r2,33045
8110cacc:	10aefb04 	addi	r2,r2,-17428
8110cad0:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cad4:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110cad8:	00a04574 	movhi	r2,33045
8110cadc:	10aefb04 	addi	r2,r2,-17428
8110cae0:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cae4:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110cae8:	00a04574 	movhi	r2,33045
8110caec:	10aefb04 	addi	r2,r2,-17428
8110caf0:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110caf4:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110caf8:	00a04574 	movhi	r2,33045
8110cafc:	10aefb04 	addi	r2,r2,-17428
8110cb00:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb04:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110cb08:	00a04574 	movhi	r2,33045
8110cb0c:	10aefb04 	addi	r2,r2,-17428
8110cb10:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb14:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110cb18:	00a04574 	movhi	r2,33045
8110cb1c:	10aefb04 	addi	r2,r2,-17428
8110cb20:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb24:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110cb28:	00a04574 	movhi	r2,33045
8110cb2c:	10aefb04 	addi	r2,r2,-17428
8110cb30:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb34:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110cb38:	00a04574 	movhi	r2,33045
8110cb3c:	10aefb04 	addi	r2,r2,-17428
8110cb40:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb44:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110cb48:	00a04574 	movhi	r2,33045
8110cb4c:	10aefb04 	addi	r2,r2,-17428
8110cb50:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb54:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110cb58:	00a04574 	movhi	r2,33045
8110cb5c:	10aefb04 	addi	r2,r2,-17428
8110cb60:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb64:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110cb68:	00a04574 	movhi	r2,33045
8110cb6c:	10aefb04 	addi	r2,r2,-17428
8110cb70:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb74:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110cb78:	00a04574 	movhi	r2,33045
8110cb7c:	10aefb04 	addi	r2,r2,-17428
8110cb80:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb84:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110cb88:	00a04574 	movhi	r2,33045
8110cb8c:	10aefb04 	addi	r2,r2,-17428
8110cb90:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cb94:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110cb98:	00a04574 	movhi	r2,33045
8110cb9c:	10aefb04 	addi	r2,r2,-17428
8110cba0:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cba4:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110cba8:	00a04574 	movhi	r2,33045
8110cbac:	10aefb04 	addi	r2,r2,-17428
8110cbb0:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cbb4:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
8110cbb8:	00a04574 	movhi	r2,33045
8110cbbc:	10aefb04 	addi	r2,r2,-17428
8110cbc0:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110cbc4:	10bfffcc 	andi	r2,r2,65535
8110cbc8:	e53fd984 	addi	r20,fp,-154
8110cbcc:	d8801115 	stw	r2,68(sp)
8110cbd0:	dcc01015 	stw	r19,64(sp)
8110cbd4:	dc800f15 	stw	r18,60(sp)
8110cbd8:	dc400e15 	stw	r17,56(sp)
8110cbdc:	dc000d15 	stw	r16,52(sp)
8110cbe0:	dbc00c15 	stw	r15,48(sp)
8110cbe4:	db800b15 	stw	r14,44(sp)
8110cbe8:	db400a15 	stw	r13,40(sp)
8110cbec:	db000915 	stw	r12,36(sp)
8110cbf0:	dac00815 	stw	r11,32(sp)
8110cbf4:	da800715 	stw	r10,28(sp)
8110cbf8:	da400615 	stw	r9,24(sp)
8110cbfc:	da000515 	stw	r8,20(sp)
8110cc00:	d9c00415 	stw	r7,16(sp)
8110cc04:	d9800315 	stw	r6,12(sp)
8110cc08:	d9400215 	stw	r5,8(sp)
8110cc0c:	d9000115 	stw	r4,4(sp)
8110cc10:	d8c00015 	stw	r3,0(sp)
8110cc14:	a80f883a 	mov	r7,r21
8110cc18:	018010c4 	movi	r6,67
8110cc1c:	01604534 	movhi	r5,33044
8110cc20:	2979d004 	addi	r5,r5,-6336
8110cc24:	a009883a 	mov	r4,r20
8110cc28:	11137640 	call	81113764 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
8110cc2c:	e0bfd984 	addi	r2,fp,-154
8110cc30:	1009883a 	mov	r4,r2
8110cc34:	11139780 	call	81113978 <strlen>
8110cc38:	1007883a 	mov	r3,r2
8110cc3c:	e0bfd984 	addi	r2,fp,-154
8110cc40:	180b883a 	mov	r5,r3
8110cc44:	1009883a 	mov	r4,r2
8110cc48:	110e1180 	call	8110e118 <ucCrc8wInit>
8110cc4c:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
8110cc50:	e13fd703 	ldbu	r4,-164(fp)
8110cc54:	e0ffd984 	addi	r3,fp,-154
8110cc58:	e0bfd984 	addi	r2,fp,-154
8110cc5c:	200f883a 	mov	r7,r4
8110cc60:	180d883a 	mov	r6,r3
8110cc64:	01604534 	movhi	r5,33044
8110cc68:	2979e804 	addi	r5,r5,-6240
8110cc6c:	1009883a 	mov	r4,r2
8110cc70:	11137640 	call	81113764 <sprintf>

	bSuccees = bSendUART128v2(cBufferETH, usiIdCMDLocal);
8110cc74:	e0bfd90b 	ldhu	r2,-156(fp)
8110cc78:	10ffffcc 	andi	r3,r2,65535
8110cc7c:	18e0001c 	xori	r3,r3,32768
8110cc80:	18e00004 	addi	r3,r3,-32768
8110cc84:	e0bfd984 	addi	r2,fp,-154
8110cc88:	180b883a 	mov	r5,r3
8110cc8c:	1009883a 	mov	r4,r2
8110cc90:	110c1680 	call	8110c168 <bSendUART128v2>
8110cc94:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
8110cc98:	e0bfd817 	ldw	r2,-160(fp)
8110cc9c:	10800060 	cmpeqi	r2,r2,1
8110cca0:	1000011e 	bne	r2,zero,8110cca8 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
8110cca4:	110ebbc0 	call	8110ebbc <vCouldNotSendEthConfUART>
	}
}
8110cca8:	0001883a 	nop
8110ccac:	e6fffa04 	addi	sp,fp,-24
8110ccb0:	dfc00717 	ldw	ra,28(sp)
8110ccb4:	df000617 	ldw	fp,24(sp)
8110ccb8:	dd400517 	ldw	r21,20(sp)
8110ccbc:	dd000417 	ldw	r20,16(sp)
8110ccc0:	dcc00317 	ldw	r19,12(sp)
8110ccc4:	dc800217 	ldw	r18,8(sp)
8110ccc8:	dc400117 	ldw	r17,4(sp)
8110cccc:	dc000017 	ldw	r16,0(sp)
8110ccd0:	dec00804 	addi	sp,sp,32
8110ccd4:	f800283a 	ret

8110ccd8 <vSendTurnOff>:


void vSendTurnOff ( void ) {
8110ccd8:	defff304 	addi	sp,sp,-52
8110ccdc:	de00012e 	bgeu	sp,et,8110cce4 <vSendTurnOff+0xc>
8110cce0:	003b68fa 	trap	3
8110cce4:	dfc00c15 	stw	ra,48(sp)
8110cce8:	df000b15 	stw	fp,44(sp)
8110ccec:	df000b04 	addi	fp,sp,44
    char cBufferTurnOff[32] = "";
8110ccf0:	e03ff78d 	sth	zero,-34(fp)
8110ccf4:	e03ff80d 	sth	zero,-32(fp)
8110ccf8:	e03ff88d 	sth	zero,-30(fp)
8110ccfc:	e03ff90d 	sth	zero,-28(fp)
8110cd00:	e03ff98d 	sth	zero,-26(fp)
8110cd04:	e03ffa0d 	sth	zero,-24(fp)
8110cd08:	e03ffa8d 	sth	zero,-22(fp)
8110cd0c:	e03ffb0d 	sth	zero,-20(fp)
8110cd10:	e03ffb8d 	sth	zero,-18(fp)
8110cd14:	e03ffc0d 	sth	zero,-16(fp)
8110cd18:	e03ffc8d 	sth	zero,-14(fp)
8110cd1c:	e03ffd0d 	sth	zero,-12(fp)
8110cd20:	e03ffd8d 	sth	zero,-10(fp)
8110cd24:	e03ffe0d 	sth	zero,-8(fp)
8110cd28:	e03ffe8d 	sth	zero,-6(fp)
8110cd2c:	e03fff0d 	sth	zero,-4(fp)
    unsigned char crc = 0;
8110cd30:	e03ff505 	stb	zero,-44(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110cd34:	e03ff615 	stw	zero,-40(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110cd38:	110cef00 	call	8110cef0 <usiGetIdCMD>
8110cd3c:	e0bff70d 	sth	r2,-36(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferTurnOff, TURNOFF_SPRINTF, usiIdCMDLocal);
8110cd40:	e0fff70b 	ldhu	r3,-36(fp)
8110cd44:	e0bff784 	addi	r2,fp,-34
8110cd48:	180d883a 	mov	r6,r3
8110cd4c:	01604534 	movhi	r5,33044
8110cd50:	2979eb04 	addi	r5,r5,-6228
8110cd54:	1009883a 	mov	r4,r2
8110cd58:	11137640 	call	81113764 <sprintf>
    crc = ucCrc8wInit( cBufferTurnOff , strlen(cBufferTurnOff));
8110cd5c:	e0bff784 	addi	r2,fp,-34
8110cd60:	1009883a 	mov	r4,r2
8110cd64:	11139780 	call	81113978 <strlen>
8110cd68:	1007883a 	mov	r3,r2
8110cd6c:	e0bff784 	addi	r2,fp,-34
8110cd70:	180b883a 	mov	r5,r3
8110cd74:	1009883a 	mov	r4,r2
8110cd78:	110e1180 	call	8110e118 <ucCrc8wInit>
8110cd7c:	e0bff505 	stb	r2,-44(fp)
    sprintf(cBufferTurnOff, "%s|%hhu;", cBufferTurnOff, crc );
8110cd80:	e13ff503 	ldbu	r4,-44(fp)
8110cd84:	e0fff784 	addi	r3,fp,-34
8110cd88:	e0bff784 	addi	r2,fp,-34
8110cd8c:	200f883a 	mov	r7,r4
8110cd90:	180d883a 	mov	r6,r3
8110cd94:	01604534 	movhi	r5,33044
8110cd98:	2979e804 	addi	r5,r5,-6240
8110cd9c:	1009883a 	mov	r4,r2
8110cda0:	11137640 	call	81113764 <sprintf>

	bSuccees = bSendUART32v2(cBufferTurnOff, usiIdCMDLocal);
8110cda4:	e0bff70b 	ldhu	r2,-36(fp)
8110cda8:	10ffffcc 	andi	r3,r2,65535
8110cdac:	18e0001c 	xori	r3,r3,32768
8110cdb0:	18e00004 	addi	r3,r3,-32768
8110cdb4:	e0bff784 	addi	r2,fp,-34
8110cdb8:	180b883a 	mov	r5,r3
8110cdbc:	1009883a 	mov	r4,r2
8110cdc0:	110c7500 	call	8110c750 <bSendUART32v2>
8110cdc4:	e0bff615 	stw	r2,-40(fp)

	if ( bSuccees != TRUE ) {
8110cdc8:	e0bff617 	ldw	r2,-40(fp)
8110cdcc:	10800060 	cmpeqi	r2,r2,1
8110cdd0:	1000011e 	bne	r2,zero,8110cdd8 <vSendTurnOff+0x100>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTurnOff();
8110cdd4:	110f2640 	call	8110f264 <vCouldNotSendTurnOff>
	}
}
8110cdd8:	0001883a 	nop
8110cddc:	e037883a 	mov	sp,fp
8110cde0:	dfc00117 	ldw	ra,4(sp)
8110cde4:	df000017 	ldw	fp,0(sp)
8110cde8:	dec00204 	addi	sp,sp,8
8110cdec:	f800283a 	ret

8110cdf0 <vSendLog>:

void vSendLog ( const char * cDataIn ) {
8110cdf0:	deffda04 	addi	sp,sp,-152
8110cdf4:	de00012e 	bgeu	sp,et,8110cdfc <vSendLog+0xc>
8110cdf8:	003b68fa 	trap	3
8110cdfc:	dfc02515 	stw	ra,148(sp)
8110ce00:	df002415 	stw	fp,144(sp)
8110ce04:	df002404 	addi	fp,sp,144
8110ce08:	e13fff15 	stw	r4,-4(fp)
    char cBufferLog[128] = "";
8110ce0c:	e03fde8d 	sth	zero,-134(fp)
8110ce10:	e03fdf0d 	sth	zero,-132(fp)
8110ce14:	e0bfdf84 	addi	r2,fp,-130
8110ce18:	00c01f04 	movi	r3,124
8110ce1c:	180d883a 	mov	r6,r3
8110ce20:	000b883a 	mov	r5,zero
8110ce24:	1009883a 	mov	r4,r2
8110ce28:	1112fd40 	call	81112fd4 <memset>
    unsigned char crc = 0;
8110ce2c:	e03fdc05 	stb	zero,-144(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110ce30:	e03fdd15 	stw	zero,-140(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110ce34:	110cef00 	call	8110cef0 <usiGetIdCMD>
8110ce38:	e0bfde0d 	sth	r2,-136(fp)

	/* Creating the packet with the CRC */
    sprintf(cBufferLog, LOG_SPRINTF, usiIdCMDLocal, cDataIn);
8110ce3c:	e0ffde0b 	ldhu	r3,-136(fp)
8110ce40:	e0bfde84 	addi	r2,fp,-134
8110ce44:	e1ffff17 	ldw	r7,-4(fp)
8110ce48:	180d883a 	mov	r6,r3
8110ce4c:	01604534 	movhi	r5,33044
8110ce50:	2979ed04 	addi	r5,r5,-6220
8110ce54:	1009883a 	mov	r4,r2
8110ce58:	11137640 	call	81113764 <sprintf>
    crc = ucCrc8wInit( cBufferLog , strlen(cBufferLog));
8110ce5c:	e0bfde84 	addi	r2,fp,-134
8110ce60:	1009883a 	mov	r4,r2
8110ce64:	11139780 	call	81113978 <strlen>
8110ce68:	1007883a 	mov	r3,r2
8110ce6c:	e0bfde84 	addi	r2,fp,-134
8110ce70:	180b883a 	mov	r5,r3
8110ce74:	1009883a 	mov	r4,r2
8110ce78:	110e1180 	call	8110e118 <ucCrc8wInit>
8110ce7c:	e0bfdc05 	stb	r2,-144(fp)
    sprintf(cBufferLog, "%s|%hhu;", cBufferLog, crc );
8110ce80:	e13fdc03 	ldbu	r4,-144(fp)
8110ce84:	e0ffde84 	addi	r3,fp,-134
8110ce88:	e0bfde84 	addi	r2,fp,-134
8110ce8c:	200f883a 	mov	r7,r4
8110ce90:	180d883a 	mov	r6,r3
8110ce94:	01604534 	movhi	r5,33044
8110ce98:	2979e804 	addi	r5,r5,-6240
8110ce9c:	1009883a 	mov	r4,r2
8110cea0:	11137640 	call	81113764 <sprintf>

	bSuccees = bSendUART128v2(cBufferLog, usiIdCMDLocal);
8110cea4:	e0bfde0b 	ldhu	r2,-136(fp)
8110cea8:	10ffffcc 	andi	r3,r2,65535
8110ceac:	18e0001c 	xori	r3,r3,32768
8110ceb0:	18e00004 	addi	r3,r3,-32768
8110ceb4:	e0bfde84 	addi	r2,fp,-134
8110ceb8:	180b883a 	mov	r5,r3
8110cebc:	1009883a 	mov	r4,r2
8110cec0:	110c1680 	call	8110c168 <bSendUART128v2>
8110cec4:	e0bfdd15 	stw	r2,-140(fp)

	if ( bSuccees != TRUE ) {
8110cec8:	e0bfdd17 	ldw	r2,-140(fp)
8110cecc:	10800060 	cmpeqi	r2,r2,1
8110ced0:	1000011e 	bne	r2,zero,8110ced8 <vSendLog+0xe8>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendLog();
8110ced4:	110f2cc0 	call	8110f2cc <vCouldNotSendLog>
	}
}
8110ced8:	0001883a 	nop
8110cedc:	e037883a 	mov	sp,fp
8110cee0:	dfc00117 	ldw	ra,4(sp)
8110cee4:	df000017 	ldw	fp,0(sp)
8110cee8:	dec00204 	addi	sp,sp,8
8110ceec:	f800283a 	ret

8110cef0 <usiGetIdCMD>:

unsigned short int usiGetIdCMD ( void ) {
8110cef0:	deffff04 	addi	sp,sp,-4
8110cef4:	de00012e 	bgeu	sp,et,8110cefc <usiGetIdCMD+0xc>
8110cef8:	003b68fa 	trap	3
8110cefc:	df000015 	stw	fp,0(sp)
8110cf00:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
8110cf04:	d0a0550b 	ldhu	r2,-32428(gp)
8110cf08:	10ffffcc 	andi	r3,r2,65535
8110cf0c:	00bfffd4 	movui	r2,65535
8110cf10:	1880031e 	bne	r3,r2,8110cf20 <usiGetIdCMD+0x30>
        usiIdCMD = 2;
8110cf14:	00800084 	movi	r2,2
8110cf18:	d0a0550d 	sth	r2,-32428(gp)
8110cf1c:	00000306 	br	8110cf2c <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
8110cf20:	d0a0550b 	ldhu	r2,-32428(gp)
8110cf24:	10800044 	addi	r2,r2,1
8110cf28:	d0a0550d 	sth	r2,-32428(gp)

    return usiIdCMD;
8110cf2c:	d0a0550b 	ldhu	r2,-32428(gp)
}
8110cf30:	e037883a 	mov	sp,fp
8110cf34:	df000017 	ldw	fp,0(sp)
8110cf38:	dec00104 	addi	sp,sp,4
8110cf3c:	f800283a 	ret

8110cf40 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
8110cf40:	defffb04 	addi	sp,sp,-20
8110cf44:	de00012e 	bgeu	sp,et,8110cf4c <siPosStr+0xc>
8110cf48:	003b68fa 	trap	3
8110cf4c:	dfc00415 	stw	ra,16(sp)
8110cf50:	df000315 	stw	fp,12(sp)
8110cf54:	df000304 	addi	fp,sp,12
8110cf58:	e13ffe15 	stw	r4,-8(fp)
8110cf5c:	2805883a 	mov	r2,r5
8110cf60:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
8110cf64:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
8110cf68:	e0bfff03 	ldbu	r2,-4(fp)
8110cf6c:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
8110cf70:	e17ffd04 	addi	r5,fp,-12
8110cf74:	e13ffe17 	ldw	r4,-8(fp)
8110cf78:	111392c0 	call	8111392c <strcspn>
}
8110cf7c:	e037883a 	mov	sp,fp
8110cf80:	dfc00117 	ldw	ra,4(sp)
8110cf84:	df000017 	ldw	fp,0(sp)
8110cf88:	dec00204 	addi	sp,sp,8
8110cf8c:	f800283a 	ret

8110cf90 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110cf90:	defffc04 	addi	sp,sp,-16
8110cf94:	de00012e 	bgeu	sp,et,8110cf9c <vTimeoutCheck+0xc>
8110cf98:	003b68fa 	trap	3
8110cf9c:	dfc00315 	stw	ra,12(sp)
8110cfa0:	df000215 	stw	fp,8(sp)
8110cfa4:	df000204 	addi	fp,sp,8
8110cfa8:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110cfac:	d0a05417 	ldw	r2,-32432(gp)
8110cfb0:	1009883a 	mov	r4,r2
8110cfb4:	11302fc0 	call	811302fc <OSSemPost>
8110cfb8:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110cfbc:	e0bffe03 	ldbu	r2,-8(fp)
8110cfc0:	10000126 	beq	r2,zero,8110cfc8 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110cfc4:	110eff40 	call	8110eff4 <vFailPostBlockingSemTimeoutTask>
	}
}
8110cfc8:	0001883a 	nop
8110cfcc:	e037883a 	mov	sp,fp
8110cfd0:	dfc00117 	ldw	ra,4(sp)
8110cfd4:	df000017 	ldw	fp,0(sp)
8110cfd8:	dec00204 	addi	sp,sp,8
8110cfdc:	f800283a 	ret

8110cfe0 <vSendPusTM64>:


/* Send through a medium buffer */
void vSendPusTM64 ( tTMPus xPcktPus ) {
8110cfe0:	deffe304 	addi	sp,sp,-116
8110cfe4:	de00012e 	bgeu	sp,et,8110cfec <vSendPusTM64+0xc>
8110cfe8:	003b68fa 	trap	3
8110cfec:	dfc01815 	stw	ra,96(sp)
8110cff0:	df001715 	stw	fp,92(sp)
8110cff4:	df001704 	addi	fp,sp,92
8110cff8:	e1000215 	stw	r4,8(fp)
8110cffc:	e1400315 	stw	r5,12(fp)
8110d000:	e1800415 	stw	r6,16(fp)
8110d004:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[64] = "";
8110d008:	e03fef8d 	sth	zero,-66(fp)
8110d00c:	e03ff00d 	sth	zero,-64(fp)
8110d010:	e0bff084 	addi	r2,fp,-62
8110d014:	00c00f04 	movi	r3,60
8110d018:	180d883a 	mov	r6,r3
8110d01c:	000b883a 	mov	r5,zero
8110d020:	1009883a 	mov	r4,r2
8110d024:	1112fd40 	call	81112fd4 <memset>
    unsigned char crc = 0;
8110d028:	e03fed45 	stb	zero,-75(fp)
	unsigned char ucIL = 0;
8110d02c:	e03fed05 	stb	zero,-76(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110d030:	e03fee15 	stw	zero,-72(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110d034:	110cef00 	call	8110cef0 <usiGetIdCMD>
8110d038:	e0bfef0d 	sth	r2,-68(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110d03c:	e1bfef0b 	ldhu	r6,-68(fp)
8110d040:	e080030b 	ldhu	r2,12(fp)
8110d044:	11ffffcc 	andi	r7,r2,65535
8110d048:	e080038b 	ldhu	r2,14(fp)
8110d04c:	10bfffcc 	andi	r2,r2,65535
8110d050:	e0c0040b 	ldhu	r3,16(fp)
8110d054:	18ffffcc 	andi	r3,r3,65535
8110d058:	e100048b 	ldhu	r4,18(fp)
8110d05c:	213fffcc 	andi	r4,r4,65535
8110d060:	e140050b 	ldhu	r5,20(fp)
8110d064:	297fffcc 	andi	r5,r5,65535
8110d068:	e23fef84 	addi	r8,fp,-66
8110d06c:	d9400315 	stw	r5,12(sp)
8110d070:	d9000215 	stw	r4,8(sp)
8110d074:	d8c00115 	stw	r3,4(sp)
8110d078:	d8800015 	stw	r2,0(sp)
8110d07c:	01604534 	movhi	r5,33044
8110d080:	2979f004 	addi	r5,r5,-6208
8110d084:	4009883a 	mov	r4,r8
8110d088:	11137640 	call	81113764 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d08c:	e03fed05 	stb	zero,-76(fp)
8110d090:	00001206 	br	8110d0dc <vSendPusTM64+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110d094:	e0bfed03 	ldbu	r2,-76(fp)
8110d098:	10800204 	addi	r2,r2,8
8110d09c:	1085883a 	add	r2,r2,r2
8110d0a0:	e0c00204 	addi	r3,fp,8
8110d0a4:	1885883a 	add	r2,r3,r2
8110d0a8:	1080000b 	ldhu	r2,0(r2)
8110d0ac:	113fffcc 	andi	r4,r2,65535
8110d0b0:	e0ffef84 	addi	r3,fp,-66
8110d0b4:	e0bfef84 	addi	r2,fp,-66
8110d0b8:	200f883a 	mov	r7,r4
8110d0bc:	180d883a 	mov	r6,r3
8110d0c0:	01604534 	movhi	r5,33044
8110d0c4:	2979f704 	addi	r5,r5,-6180
8110d0c8:	1009883a 	mov	r4,r2
8110d0cc:	11137640 	call	81113764 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d0d0:	e0bfed03 	ldbu	r2,-76(fp)
8110d0d4:	10800044 	addi	r2,r2,1
8110d0d8:	e0bfed05 	stb	r2,-76(fp)
8110d0dc:	e0800583 	ldbu	r2,22(fp)
8110d0e0:	10803fcc 	andi	r2,r2,255
8110d0e4:	e0ffed03 	ldbu	r3,-76(fp)
8110d0e8:	18bfea36 	bltu	r3,r2,8110d094 <__reset+0xfb0ed094>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110d0ec:	e0bfef84 	addi	r2,fp,-66
8110d0f0:	1009883a 	mov	r4,r2
8110d0f4:	11139780 	call	81113978 <strlen>
8110d0f8:	1007883a 	mov	r3,r2
8110d0fc:	e0bfef84 	addi	r2,fp,-66
8110d100:	180b883a 	mov	r5,r3
8110d104:	1009883a 	mov	r4,r2
8110d108:	110e1180 	call	8110e118 <ucCrc8wInit>
8110d10c:	e0bfed45 	stb	r2,-75(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110d110:	e13fed43 	ldbu	r4,-75(fp)
8110d114:	e0ffef84 	addi	r3,fp,-66
8110d118:	e0bfef84 	addi	r2,fp,-66
8110d11c:	200f883a 	mov	r7,r4
8110d120:	180d883a 	mov	r6,r3
8110d124:	01604534 	movhi	r5,33044
8110d128:	2979e804 	addi	r5,r5,-6240
8110d12c:	1009883a 	mov	r4,r2
8110d130:	11137640 	call	81113764 <sprintf>

	bSuccees = bSendUART64v2(cBufferPus, usiIdCMDLocal);
8110d134:	e0bfef0b 	ldhu	r2,-68(fp)
8110d138:	10ffffcc 	andi	r3,r2,65535
8110d13c:	18e0001c 	xori	r3,r3,32768
8110d140:	18e00004 	addi	r3,r3,-32768
8110d144:	e0bfef84 	addi	r2,fp,-66
8110d148:	180b883a 	mov	r5,r3
8110d14c:	1009883a 	mov	r4,r2
8110d150:	110c4580 	call	8110c458 <bSendUART64v2>
8110d154:	e0bfee15 	stw	r2,-72(fp)

	if ( bSuccees != TRUE ) {
8110d158:	e0bfee17 	ldw	r2,-72(fp)
8110d15c:	10800060 	cmpeqi	r2,r2,1
8110d160:	1000031e 	bne	r2,zero,8110d170 <vSendPusTM64+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110d164:	e0bfef84 	addi	r2,fp,-66
8110d168:	1009883a 	mov	r4,r2
8110d16c:	110f3340 	call	8110f334 <vCouldNotSendTMPusCommand>
	}
}
8110d170:	0001883a 	nop
8110d174:	e037883a 	mov	sp,fp
8110d178:	dfc00117 	ldw	ra,4(sp)
8110d17c:	df000017 	ldw	fp,0(sp)
8110d180:	dec00604 	addi	sp,sp,24
8110d184:	f800283a 	ret

8110d188 <vSendPusTM128>:

/* Send through a big buffer */
void vSendPusTM128 ( tTMPus xPcktPus ) {
8110d188:	deffd304 	addi	sp,sp,-180
8110d18c:	de00012e 	bgeu	sp,et,8110d194 <vSendPusTM128+0xc>
8110d190:	003b68fa 	trap	3
8110d194:	dfc02815 	stw	ra,160(sp)
8110d198:	df002715 	stw	fp,156(sp)
8110d19c:	df002704 	addi	fp,sp,156
8110d1a0:	e1000215 	stw	r4,8(fp)
8110d1a4:	e1400315 	stw	r5,12(fp)
8110d1a8:	e1800415 	stw	r6,16(fp)
8110d1ac:	e1c00515 	stw	r7,20(fp)
    char cBufferPus[128] = "";
8110d1b0:	e03fdf8d 	sth	zero,-130(fp)
8110d1b4:	e03fe00d 	sth	zero,-128(fp)
8110d1b8:	e0bfe084 	addi	r2,fp,-126
8110d1bc:	00c01f04 	movi	r3,124
8110d1c0:	180d883a 	mov	r6,r3
8110d1c4:	000b883a 	mov	r5,zero
8110d1c8:	1009883a 	mov	r4,r2
8110d1cc:	1112fd40 	call	81112fd4 <memset>
    unsigned char crc = 0;
8110d1d0:	e03fdd45 	stb	zero,-139(fp)
	unsigned char ucIL = 0;
8110d1d4:	e03fdd05 	stb	zero,-140(fp)
    unsigned short int usiIdCMDLocal;
	bool bSuccees = FALSE;
8110d1d8:	e03fde15 	stw	zero,-136(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110d1dc:	110cef00 	call	8110cef0 <usiGetIdCMD>
8110d1e0:	e0bfdf0d 	sth	r2,-132(fp)

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
8110d1e4:	e1bfdf0b 	ldhu	r6,-132(fp)
8110d1e8:	e080030b 	ldhu	r2,12(fp)
8110d1ec:	11ffffcc 	andi	r7,r2,65535
8110d1f0:	e080038b 	ldhu	r2,14(fp)
8110d1f4:	10bfffcc 	andi	r2,r2,65535
8110d1f8:	e0c0040b 	ldhu	r3,16(fp)
8110d1fc:	18ffffcc 	andi	r3,r3,65535
8110d200:	e100048b 	ldhu	r4,18(fp)
8110d204:	213fffcc 	andi	r4,r4,65535
8110d208:	e140050b 	ldhu	r5,20(fp)
8110d20c:	297fffcc 	andi	r5,r5,65535
8110d210:	e23fdf84 	addi	r8,fp,-130
8110d214:	d9400315 	stw	r5,12(sp)
8110d218:	d9000215 	stw	r4,8(sp)
8110d21c:	d8c00115 	stw	r3,4(sp)
8110d220:	d8800015 	stw	r2,0(sp)
8110d224:	01604534 	movhi	r5,33044
8110d228:	2979f004 	addi	r5,r5,-6208
8110d22c:	4009883a 	mov	r4,r8
8110d230:	11137640 	call	81113764 <sprintf>
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d234:	e03fdd05 	stb	zero,-140(fp)
8110d238:	00001206 	br	8110d284 <vSendPusTM128+0xfc>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
8110d23c:	e0bfdd03 	ldbu	r2,-140(fp)
8110d240:	10800204 	addi	r2,r2,8
8110d244:	1085883a 	add	r2,r2,r2
8110d248:	e0c00204 	addi	r3,fp,8
8110d24c:	1885883a 	add	r2,r3,r2
8110d250:	1080000b 	ldhu	r2,0(r2)
8110d254:	113fffcc 	andi	r4,r2,65535
8110d258:	e0ffdf84 	addi	r3,fp,-130
8110d25c:	e0bfdf84 	addi	r2,fp,-130
8110d260:	200f883a 	mov	r7,r4
8110d264:	180d883a 	mov	r6,r3
8110d268:	01604534 	movhi	r5,33044
8110d26c:	2979f704 	addi	r5,r5,-6180
8110d270:	1009883a 	mov	r4,r2
8110d274:	11137640 	call	81113764 <sprintf>
    usiIdCMDLocal = usiGetIdCMD();

	/* Start with the beginning of the PUS header values */
	sprintf(cBufferPus, PUS_TM_SPRINTF, usiIdCMDLocal, xPcktPus.usiPid, xPcktPus.usiCat, xPcktPus.usiType, xPcktPus.usiSubType, xPcktPus.usiPusId );
	/* Add how many parameters need to send in the command */
	for(ucIL = 0; ucIL < xPcktPus.ucNofValues; ucIL++)
8110d278:	e0bfdd03 	ldbu	r2,-140(fp)
8110d27c:	10800044 	addi	r2,r2,1
8110d280:	e0bfdd05 	stb	r2,-140(fp)
8110d284:	e0800583 	ldbu	r2,22(fp)
8110d288:	10803fcc 	andi	r2,r2,255
8110d28c:	e0ffdd03 	ldbu	r3,-140(fp)
8110d290:	18bfea36 	bltu	r3,r2,8110d23c <__reset+0xfb0ed23c>
	{
		sprintf(cBufferPus, PUS_ADDER_SPRINTF, cBufferPus, xPcktPus.usiValues[ucIL] );
	}
	/* Calculate the crc, append it and finish the string with ";" character */
    crc = ucCrc8wInit( cBufferPus , strlen(cBufferPus));
8110d294:	e0bfdf84 	addi	r2,fp,-130
8110d298:	1009883a 	mov	r4,r2
8110d29c:	11139780 	call	81113978 <strlen>
8110d2a0:	1007883a 	mov	r3,r2
8110d2a4:	e0bfdf84 	addi	r2,fp,-130
8110d2a8:	180b883a 	mov	r5,r3
8110d2ac:	1009883a 	mov	r4,r2
8110d2b0:	110e1180 	call	8110e118 <ucCrc8wInit>
8110d2b4:	e0bfdd45 	stb	r2,-139(fp)
    sprintf(cBufferPus, "%s|%hhu;", cBufferPus, crc );
8110d2b8:	e13fdd43 	ldbu	r4,-139(fp)
8110d2bc:	e0ffdf84 	addi	r3,fp,-130
8110d2c0:	e0bfdf84 	addi	r2,fp,-130
8110d2c4:	200f883a 	mov	r7,r4
8110d2c8:	180d883a 	mov	r6,r3
8110d2cc:	01604534 	movhi	r5,33044
8110d2d0:	2979e804 	addi	r5,r5,-6240
8110d2d4:	1009883a 	mov	r4,r2
8110d2d8:	11137640 	call	81113764 <sprintf>

	bSuccees = bSendUART128v2(cBufferPus, usiIdCMDLocal);
8110d2dc:	e0bfdf0b 	ldhu	r2,-132(fp)
8110d2e0:	10ffffcc 	andi	r3,r2,65535
8110d2e4:	18e0001c 	xori	r3,r3,32768
8110d2e8:	18e00004 	addi	r3,r3,-32768
8110d2ec:	e0bfdf84 	addi	r2,fp,-130
8110d2f0:	180b883a 	mov	r5,r3
8110d2f4:	1009883a 	mov	r4,r2
8110d2f8:	110c1680 	call	8110c168 <bSendUART128v2>
8110d2fc:	e0bfde15 	stw	r2,-136(fp)

	if ( bSuccees != TRUE ) {
8110d300:	e0bfde17 	ldw	r2,-136(fp)
8110d304:	10800060 	cmpeqi	r2,r2,1
8110d308:	1000031e 	bne	r2,zero,8110d318 <vSendPusTM128+0x190>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendTMPusCommand( cBufferPus );
8110d30c:	e0bfdf84 	addi	r2,fp,-130
8110d310:	1009883a 	mov	r4,r2
8110d314:	110f3340 	call	8110f334 <vCouldNotSendTMPusCommand>
	}
}
8110d318:	0001883a 	nop
8110d31c:	e037883a 	mov	sp,fp
8110d320:	dfc00117 	ldw	ra,4(sp)
8110d324:	df000017 	ldw	fp,0(sp)
8110d328:	dec00604 	addi	sp,sp,24
8110d32c:	f800283a 	ret

8110d330 <vTMPusTestConnection>:
/* TM_SCAM_TEST_CONNECTION */
/* 
hp-pck-type		hp-pid		hp-pcat		hp-srv-type		hp-srv-subtype
0				112			0			17				2
*/
void vTMPusTestConnection( unsigned short int usiPusId ) {
8110d330:	deffd904 	addi	sp,sp,-156
8110d334:	de00012e 	bgeu	sp,et,8110d33c <vTMPusTestConnection+0xc>
8110d338:	003b68fa 	trap	3
8110d33c:	dfc02615 	stw	ra,152(sp)
8110d340:	df002515 	stw	fp,148(sp)
8110d344:	df002504 	addi	fp,sp,148
8110d348:	2005883a 	mov	r2,r4
8110d34c:	e0bfff0d 	sth	r2,-4(fp)
	tTMPus xTmPusL;

	/* For now is hardcoded after full release of the pus I will create defines */
	xTmPusL.usiPusId = usiPusId;
8110d350:	e0bfff0b 	ldhu	r2,-4(fp)
8110d354:	e0bfee0d 	sth	r2,-72(fp)
	xTmPusL.usiPid = 112;
8110d358:	00801c04 	movi	r2,112
8110d35c:	e0bfec0d 	sth	r2,-80(fp)
	xTmPusL.usiCat = 0;
8110d360:	e03fec8d 	sth	zero,-78(fp)
	xTmPusL.usiType = 17;
8110d364:	00800444 	movi	r2,17
8110d368:	e0bfed0d 	sth	r2,-76(fp)
	xTmPusL.usiSubType = 2;
8110d36c:	00800084 	movi	r2,2
8110d370:	e0bfed8d 	sth	r2,-74(fp)

	vSendPusTM64( xTmPusL );
8110d374:	d809883a 	mov	r4,sp
8110d378:	e0bfef04 	addi	r2,fp,-68
8110d37c:	00c01004 	movi	r3,64
8110d380:	180d883a 	mov	r6,r3
8110d384:	100b883a 	mov	r5,r2
8110d388:	1112e840 	call	81112e84 <memcpy>
8110d38c:	e13feb17 	ldw	r4,-84(fp)
8110d390:	e17fec17 	ldw	r5,-80(fp)
8110d394:	e1bfed17 	ldw	r6,-76(fp)
8110d398:	e1ffee17 	ldw	r7,-72(fp)
8110d39c:	110cfe00 	call	8110cfe0 <vSendPusTM64>
}
8110d3a0:	0001883a 	nop
8110d3a4:	e037883a 	mov	sp,fp
8110d3a8:	dfc00117 	ldw	ra,4(sp)
8110d3ac:	df000017 	ldw	fp,0(sp)
8110d3b0:	dec00204 	addi	sp,sp,8
8110d3b4:	f800283a 	ret

8110d3b8 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110d3b8:	defff504 	addi	sp,sp,-44
8110d3bc:	de00012e 	bgeu	sp,et,8110d3c4 <vLoadDefaultETHConf+0xc>
8110d3c0:	003b68fa 	trap	3
8110d3c4:	dfc00a15 	stw	ra,40(sp)
8110d3c8:	df000915 	stw	fp,36(sp)
8110d3cc:	dc000815 	stw	r16,32(sp)
8110d3d0:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110d3d4:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110d3d8:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110d3dc:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110d3e0:	d0a05f17 	ldw	r2,-32388(gp)
8110d3e4:	10800058 	cmpnei	r2,r2,1
8110d3e8:	1001f61e 	bne	r2,zero,8110dbc4 <vLoadDefaultETHConf+0x80c>
8110d3ec:	111012c0 	call	8111012c <bSDcardIsPresent>
8110d3f0:	1001f426 	beq	r2,zero,8110dbc4 <vLoadDefaultETHConf+0x80c>
8110d3f4:	111015c0 	call	8111015c <bSDcardFAT16Check>
8110d3f8:	1001f226 	beq	r2,zero,8110dbc4 <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110d3fc:	01204534 	movhi	r4,33044
8110d400:	2139f904 	addi	r4,r4,-6172
8110d404:	11102840 	call	81110284 <siOpenFile>
8110d408:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110d40c:	e0bffc0f 	ldh	r2,-16(fp)
8110d410:	1001e816 	blt	r2,zero,8110dbb4 <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110d414:	e0bffd04 	addi	r2,fp,-12
8110d418:	01800204 	movi	r6,8
8110d41c:	01400284 	movi	r5,10
8110d420:	1009883a 	mov	r4,r2
8110d424:	1112fd40 	call	81112fd4 <memset>
			p_inteiro = inteiro;
8110d428:	e0bffd04 	addi	r2,fp,-12
8110d42c:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110d430:	e0bffc0f 	ldh	r2,-16(fp)
8110d434:	1009883a 	mov	r4,r2
8110d438:	11103000 	call	81110300 <cGetNextChar>
8110d43c:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110d440:	e0bff947 	ldb	r2,-27(fp)
8110d444:	10800084 	addi	r2,r2,2
8110d448:	10c015a8 	cmpgeui	r3,r2,86
8110d44c:	1801cf1e 	bne	r3,zero,8110db8c <vLoadDefaultETHConf+0x7d4>
8110d450:	100690ba 	slli	r3,r2,2
8110d454:	00a04474 	movhi	r2,33041
8110d458:	10b51a04 	addi	r2,r2,-11160
8110d45c:	1885883a 	add	r2,r3,r2
8110d460:	10800017 	ldw	r2,0(r2)
8110d464:	1000683a 	jmp	r2
8110d468:	8110d600 	call	88110d60 <__reset+0x20f0d60>
8110d46c:	8110d5f4 	orhi	r4,r16,17239
8110d470:	8110db8c 	andi	r4,r16,17262
8110d474:	8110db8c 	andi	r4,r16,17262
8110d478:	8110db8c 	andi	r4,r16,17262
8110d47c:	8110db8c 	andi	r4,r16,17262
8110d480:	8110db8c 	andi	r4,r16,17262
8110d484:	8110db8c 	andi	r4,r16,17262
8110d488:	8110db8c 	andi	r4,r16,17262
8110d48c:	8110db8c 	andi	r4,r16,17262
8110d490:	8110db8c 	andi	r4,r16,17262
8110d494:	8110db8c 	andi	r4,r16,17262
8110d498:	8110dba4 	muli	r4,r16,17262
8110d49c:	8110db8c 	andi	r4,r16,17262
8110d4a0:	8110db8c 	andi	r4,r16,17262
8110d4a4:	8110dba4 	muli	r4,r16,17262
8110d4a8:	8110db8c 	andi	r4,r16,17262
8110d4ac:	8110db8c 	andi	r4,r16,17262
8110d4b0:	8110db8c 	andi	r4,r16,17262
8110d4b4:	8110db8c 	andi	r4,r16,17262
8110d4b8:	8110db8c 	andi	r4,r16,17262
8110d4bc:	8110db8c 	andi	r4,r16,17262
8110d4c0:	8110db8c 	andi	r4,r16,17262
8110d4c4:	8110db8c 	andi	r4,r16,17262
8110d4c8:	8110db8c 	andi	r4,r16,17262
8110d4cc:	8110db8c 	andi	r4,r16,17262
8110d4d0:	8110db8c 	andi	r4,r16,17262
8110d4d4:	8110db8c 	andi	r4,r16,17262
8110d4d8:	8110db8c 	andi	r4,r16,17262
8110d4dc:	8110db8c 	andi	r4,r16,17262
8110d4e0:	8110db8c 	andi	r4,r16,17262
8110d4e4:	8110db8c 	andi	r4,r16,17262
8110d4e8:	8110db8c 	andi	r4,r16,17262
8110d4ec:	8110db8c 	andi	r4,r16,17262
8110d4f0:	8110dba4 	muli	r4,r16,17262
8110d4f4:	8110db8c 	andi	r4,r16,17262
8110d4f8:	8110db8c 	andi	r4,r16,17262
8110d4fc:	8110db8c 	andi	r4,r16,17262
8110d500:	8110db8c 	andi	r4,r16,17262
8110d504:	8110db8c 	andi	r4,r16,17262
8110d508:	8110db8c 	andi	r4,r16,17262
8110d50c:	8110d5c0 	call	88110d5c <__reset+0x20f0d5c>
8110d510:	8110db8c 	andi	r4,r16,17262
8110d514:	8110db8c 	andi	r4,r16,17262
8110d518:	8110db8c 	andi	r4,r16,17262
8110d51c:	8110db8c 	andi	r4,r16,17262
8110d520:	8110db8c 	andi	r4,r16,17262
8110d524:	8110db8c 	andi	r4,r16,17262
8110d528:	8110db8c 	andi	r4,r16,17262
8110d52c:	8110db8c 	andi	r4,r16,17262
8110d530:	8110db8c 	andi	r4,r16,17262
8110d534:	8110db8c 	andi	r4,r16,17262
8110d538:	8110db8c 	andi	r4,r16,17262
8110d53c:	8110db8c 	andi	r4,r16,17262
8110d540:	8110db8c 	andi	r4,r16,17262
8110d544:	8110db8c 	andi	r4,r16,17262
8110d548:	8110db8c 	andi	r4,r16,17262
8110d54c:	8110db8c 	andi	r4,r16,17262
8110d550:	8110db8c 	andi	r4,r16,17262
8110d554:	8110db8c 	andi	r4,r16,17262
8110d558:	8110db8c 	andi	r4,r16,17262
8110d55c:	8110db8c 	andi	r4,r16,17262
8110d560:	8110db54 	ori	r4,r16,17261
8110d564:	8110db8c 	andi	r4,r16,17262
8110d568:	8110db8c 	andi	r4,r16,17262
8110d56c:	8110db8c 	andi	r4,r16,17262
8110d570:	8110db8c 	andi	r4,r16,17262
8110d574:	8110db8c 	andi	r4,r16,17262
8110d578:	8110db8c 	andi	r4,r16,17262
8110d57c:	8110db8c 	andi	r4,r16,17262
8110d580:	8110d954 	ori	r4,r16,17253
8110d584:	8110db8c 	andi	r4,r16,17262
8110d588:	8110db8c 	andi	r4,r16,17262
8110d58c:	8110d7b4 	orhi	r4,r16,17246
8110d590:	8110daac 	andhi	r4,r16,17258
8110d594:	8110d6e8 	cmpgeui	r4,r16,17243
8110d598:	8110db8c 	andi	r4,r16,17262
8110d59c:	8110db8c 	andi	r4,r16,17262
8110d5a0:	8110db8c 	andi	r4,r16,17262
8110d5a4:	8110d618 	cmpnei	r4,r16,17240
8110d5a8:	8110db8c 	andi	r4,r16,17262
8110d5ac:	8110db8c 	andi	r4,r16,17262
8110d5b0:	8110da24 	muli	r4,r16,17256
8110d5b4:	8110db8c 	andi	r4,r16,17262
8110d5b8:	8110db8c 	andi	r4,r16,17262
8110d5bc:	8110d884 	addi	r4,r16,17250
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110d5c0:	e0bffc0f 	ldh	r2,-16(fp)
8110d5c4:	1009883a 	mov	r4,r2
8110d5c8:	11103000 	call	81110300 <cGetNextChar>
8110d5cc:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110d5d0:	00000406 	br	8110d5e4 <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110d5d4:	e0bffc0f 	ldh	r2,-16(fp)
8110d5d8:	1009883a 	mov	r4,r2
8110d5dc:	11103000 	call	81110300 <cGetNextChar>
8110d5e0:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110d5e4:	e0bff947 	ldb	r2,-27(fp)
8110d5e8:	108009d8 	cmpnei	r2,r2,39
8110d5ec:	103ff91e 	bne	r2,zero,8110d5d4 <__reset+0xfb0ed5d4>
							c = cGetNextChar(siFile);
						}
						break;
8110d5f0:	00016d06 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110d5f4:	00800044 	movi	r2,1
8110d5f8:	e0bff815 	stw	r2,-32(fp)
						break;
8110d5fc:	00016a06 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110d600:	01204534 	movhi	r4,33044
8110d604:	2139fb04 	addi	r4,r4,-6164
8110d608:	111319c0 	call	8111319c <printf>
						bEOF = TRUE;
8110d60c:	00800044 	movi	r2,1
8110d610:	e0bff815 	stw	r2,-32(fp)
						break;
8110d614:	00016406 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110d618:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d61c:	e0bffc0f 	ldh	r2,-16(fp)
8110d620:	1009883a 	mov	r4,r2
8110d624:	11103000 	call	81110300 <cGetNextChar>
8110d628:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d62c:	d0e00317 	ldw	r3,-32756(gp)
8110d630:	e0bff947 	ldb	r2,-27(fp)
8110d634:	10800044 	addi	r2,r2,1
8110d638:	1885883a 	add	r2,r3,r2
8110d63c:	10800003 	ldbu	r2,0(r2)
8110d640:	10803fcc 	andi	r2,r2,255
8110d644:	1080010c 	andi	r2,r2,4
8110d648:	10000626 	beq	r2,zero,8110d664 <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110d64c:	e0bffa17 	ldw	r2,-24(fp)
8110d650:	e0fff943 	ldbu	r3,-27(fp)
8110d654:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d658:	e0bffa17 	ldw	r2,-24(fp)
8110d65c:	10800044 	addi	r2,r2,1
8110d660:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110d664:	e0bff947 	ldb	r2,-27(fp)
8110d668:	10800ea0 	cmpeqi	r2,r2,58
8110d66c:	1000031e 	bne	r2,zero,8110d67c <vLoadDefaultETHConf+0x2c4>
8110d670:	e0bff947 	ldb	r2,-27(fp)
8110d674:	10800ed8 	cmpnei	r2,r2,59
8110d678:	103fe81e 	bne	r2,zero,8110d61c <__reset+0xfb0ed61c>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d67c:	e0bffa17 	ldw	r2,-24(fp)
8110d680:	00c00284 	movi	r3,10
8110d684:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110d688:	e0bff903 	ldbu	r2,-28(fp)
8110d68c:	10800168 	cmpgeui	r2,r2,5
8110d690:	1000021e 	bne	r2,zero,8110d69c <vLoadDefaultETHConf+0x2e4>
8110d694:	e43ff903 	ldbu	r16,-28(fp)
8110d698:	00000106 	br	8110d6a0 <vLoadDefaultETHConf+0x2e8>
8110d69c:	04000144 	movi	r16,5
8110d6a0:	e0bffd04 	addi	r2,fp,-12
8110d6a4:	1009883a 	mov	r4,r2
8110d6a8:	1111c780 	call	81111c78 <atoi>
8110d6ac:	1007883a 	mov	r3,r2
8110d6b0:	00a04574 	movhi	r2,33045
8110d6b4:	10aefb04 	addi	r2,r2,-17428
8110d6b8:	1405883a 	add	r2,r2,r16
8110d6bc:	10800404 	addi	r2,r2,16
8110d6c0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d6c4:	e0bffd04 	addi	r2,fp,-12
8110d6c8:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d6cc:	e0bff903 	ldbu	r2,-28(fp)
8110d6d0:	10800044 	addi	r2,r2,1
8110d6d4:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d6d8:	e0bff947 	ldb	r2,-27(fp)
8110d6dc:	10800ed8 	cmpnei	r2,r2,59
8110d6e0:	103fce1e 	bne	r2,zero,8110d61c <__reset+0xfb0ed61c>

						break;
8110d6e4:	00013006 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110d6e8:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d6ec:	e0bffc0f 	ldh	r2,-16(fp)
8110d6f0:	1009883a 	mov	r4,r2
8110d6f4:	11103000 	call	81110300 <cGetNextChar>
8110d6f8:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d6fc:	d0e00317 	ldw	r3,-32756(gp)
8110d700:	e0bff947 	ldb	r2,-27(fp)
8110d704:	10800044 	addi	r2,r2,1
8110d708:	1885883a 	add	r2,r3,r2
8110d70c:	10800003 	ldbu	r2,0(r2)
8110d710:	10803fcc 	andi	r2,r2,255
8110d714:	1080010c 	andi	r2,r2,4
8110d718:	10000626 	beq	r2,zero,8110d734 <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110d71c:	e0bffa17 	ldw	r2,-24(fp)
8110d720:	e0fff943 	ldbu	r3,-27(fp)
8110d724:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d728:	e0bffa17 	ldw	r2,-24(fp)
8110d72c:	10800044 	addi	r2,r2,1
8110d730:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d734:	e0bff947 	ldb	r2,-27(fp)
8110d738:	10800ba0 	cmpeqi	r2,r2,46
8110d73c:	1000031e 	bne	r2,zero,8110d74c <vLoadDefaultETHConf+0x394>
8110d740:	e0bff947 	ldb	r2,-27(fp)
8110d744:	10800ed8 	cmpnei	r2,r2,59
8110d748:	103fe81e 	bne	r2,zero,8110d6ec <__reset+0xfb0ed6ec>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d74c:	e0bffa17 	ldw	r2,-24(fp)
8110d750:	00c00284 	movi	r3,10
8110d754:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110d758:	e0bff903 	ldbu	r2,-28(fp)
8110d75c:	108000e8 	cmpgeui	r2,r2,3
8110d760:	1000021e 	bne	r2,zero,8110d76c <vLoadDefaultETHConf+0x3b4>
8110d764:	e43ff903 	ldbu	r16,-28(fp)
8110d768:	00000106 	br	8110d770 <vLoadDefaultETHConf+0x3b8>
8110d76c:	040000c4 	movi	r16,3
8110d770:	e0bffd04 	addi	r2,fp,-12
8110d774:	1009883a 	mov	r4,r2
8110d778:	1111c780 	call	81111c78 <atoi>
8110d77c:	1007883a 	mov	r3,r2
8110d780:	00a04574 	movhi	r2,33045
8110d784:	10aefb04 	addi	r2,r2,-17428
8110d788:	1405883a 	add	r2,r2,r16
8110d78c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d790:	e0bffd04 	addi	r2,fp,-12
8110d794:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d798:	e0bff903 	ldbu	r2,-28(fp)
8110d79c:	10800044 	addi	r2,r2,1
8110d7a0:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d7a4:	e0bff947 	ldb	r2,-27(fp)
8110d7a8:	10800ed8 	cmpnei	r2,r2,59
8110d7ac:	103fcf1e 	bne	r2,zero,8110d6ec <__reset+0xfb0ed6ec>

						break;
8110d7b0:	0000fd06 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110d7b4:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d7b8:	e0bffc0f 	ldh	r2,-16(fp)
8110d7bc:	1009883a 	mov	r4,r2
8110d7c0:	11103000 	call	81110300 <cGetNextChar>
8110d7c4:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d7c8:	d0e00317 	ldw	r3,-32756(gp)
8110d7cc:	e0bff947 	ldb	r2,-27(fp)
8110d7d0:	10800044 	addi	r2,r2,1
8110d7d4:	1885883a 	add	r2,r3,r2
8110d7d8:	10800003 	ldbu	r2,0(r2)
8110d7dc:	10803fcc 	andi	r2,r2,255
8110d7e0:	1080010c 	andi	r2,r2,4
8110d7e4:	10000626 	beq	r2,zero,8110d800 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110d7e8:	e0bffa17 	ldw	r2,-24(fp)
8110d7ec:	e0fff943 	ldbu	r3,-27(fp)
8110d7f0:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d7f4:	e0bffa17 	ldw	r2,-24(fp)
8110d7f8:	10800044 	addi	r2,r2,1
8110d7fc:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d800:	e0bff947 	ldb	r2,-27(fp)
8110d804:	10800ba0 	cmpeqi	r2,r2,46
8110d808:	1000031e 	bne	r2,zero,8110d818 <vLoadDefaultETHConf+0x460>
8110d80c:	e0bff947 	ldb	r2,-27(fp)
8110d810:	10800ed8 	cmpnei	r2,r2,59
8110d814:	103fe81e 	bne	r2,zero,8110d7b8 <__reset+0xfb0ed7b8>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d818:	e0bffa17 	ldw	r2,-24(fp)
8110d81c:	00c00284 	movi	r3,10
8110d820:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110d824:	e0bff903 	ldbu	r2,-28(fp)
8110d828:	108000e8 	cmpgeui	r2,r2,3
8110d82c:	1000021e 	bne	r2,zero,8110d838 <vLoadDefaultETHConf+0x480>
8110d830:	e43ff903 	ldbu	r16,-28(fp)
8110d834:	00000106 	br	8110d83c <vLoadDefaultETHConf+0x484>
8110d838:	040000c4 	movi	r16,3
8110d83c:	e0bffd04 	addi	r2,fp,-12
8110d840:	1009883a 	mov	r4,r2
8110d844:	1111c780 	call	81111c78 <atoi>
8110d848:	1007883a 	mov	r3,r2
8110d84c:	00a04574 	movhi	r2,33045
8110d850:	10aefb04 	addi	r2,r2,-17428
8110d854:	1405883a 	add	r2,r2,r16
8110d858:	10800104 	addi	r2,r2,4
8110d85c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d860:	e0bffd04 	addi	r2,fp,-12
8110d864:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d868:	e0bff903 	ldbu	r2,-28(fp)
8110d86c:	10800044 	addi	r2,r2,1
8110d870:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d874:	e0bff947 	ldb	r2,-27(fp)
8110d878:	10800ed8 	cmpnei	r2,r2,59
8110d87c:	103fce1e 	bne	r2,zero,8110d7b8 <__reset+0xfb0ed7b8>

						break;
8110d880:	0000c906 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110d884:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d888:	e0bffc0f 	ldh	r2,-16(fp)
8110d88c:	1009883a 	mov	r4,r2
8110d890:	11103000 	call	81110300 <cGetNextChar>
8110d894:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d898:	d0e00317 	ldw	r3,-32756(gp)
8110d89c:	e0bff947 	ldb	r2,-27(fp)
8110d8a0:	10800044 	addi	r2,r2,1
8110d8a4:	1885883a 	add	r2,r3,r2
8110d8a8:	10800003 	ldbu	r2,0(r2)
8110d8ac:	10803fcc 	andi	r2,r2,255
8110d8b0:	1080010c 	andi	r2,r2,4
8110d8b4:	10000626 	beq	r2,zero,8110d8d0 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110d8b8:	e0bffa17 	ldw	r2,-24(fp)
8110d8bc:	e0fff943 	ldbu	r3,-27(fp)
8110d8c0:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d8c4:	e0bffa17 	ldw	r2,-24(fp)
8110d8c8:	10800044 	addi	r2,r2,1
8110d8cc:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d8d0:	e0bff947 	ldb	r2,-27(fp)
8110d8d4:	10800ba0 	cmpeqi	r2,r2,46
8110d8d8:	1000031e 	bne	r2,zero,8110d8e8 <vLoadDefaultETHConf+0x530>
8110d8dc:	e0bff947 	ldb	r2,-27(fp)
8110d8e0:	10800ed8 	cmpnei	r2,r2,59
8110d8e4:	103fe81e 	bne	r2,zero,8110d888 <__reset+0xfb0ed888>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d8e8:	e0bffa17 	ldw	r2,-24(fp)
8110d8ec:	00c00284 	movi	r3,10
8110d8f0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110d8f4:	e0bff903 	ldbu	r2,-28(fp)
8110d8f8:	108000e8 	cmpgeui	r2,r2,3
8110d8fc:	1000021e 	bne	r2,zero,8110d908 <vLoadDefaultETHConf+0x550>
8110d900:	e43ff903 	ldbu	r16,-28(fp)
8110d904:	00000106 	br	8110d90c <vLoadDefaultETHConf+0x554>
8110d908:	040000c4 	movi	r16,3
8110d90c:	e0bffd04 	addi	r2,fp,-12
8110d910:	1009883a 	mov	r4,r2
8110d914:	1111c780 	call	81111c78 <atoi>
8110d918:	1007883a 	mov	r3,r2
8110d91c:	00a04574 	movhi	r2,33045
8110d920:	10aefb04 	addi	r2,r2,-17428
8110d924:	1405883a 	add	r2,r2,r16
8110d928:	10800204 	addi	r2,r2,8
8110d92c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110d930:	e0bffd04 	addi	r2,fp,-12
8110d934:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110d938:	e0bff903 	ldbu	r2,-28(fp)
8110d93c:	10800044 	addi	r2,r2,1
8110d940:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110d944:	e0bff947 	ldb	r2,-27(fp)
8110d948:	10800ed8 	cmpnei	r2,r2,59
8110d94c:	103fce1e 	bne	r2,zero,8110d888 <__reset+0xfb0ed888>

						break;
8110d950:	00009506 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110d954:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110d958:	e0bffc0f 	ldh	r2,-16(fp)
8110d95c:	1009883a 	mov	r4,r2
8110d960:	11103000 	call	81110300 <cGetNextChar>
8110d964:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110d968:	d0e00317 	ldw	r3,-32756(gp)
8110d96c:	e0bff947 	ldb	r2,-27(fp)
8110d970:	10800044 	addi	r2,r2,1
8110d974:	1885883a 	add	r2,r3,r2
8110d978:	10800003 	ldbu	r2,0(r2)
8110d97c:	10803fcc 	andi	r2,r2,255
8110d980:	1080010c 	andi	r2,r2,4
8110d984:	10000626 	beq	r2,zero,8110d9a0 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110d988:	e0bffa17 	ldw	r2,-24(fp)
8110d98c:	e0fff943 	ldbu	r3,-27(fp)
8110d990:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110d994:	e0bffa17 	ldw	r2,-24(fp)
8110d998:	10800044 	addi	r2,r2,1
8110d99c:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110d9a0:	e0bff947 	ldb	r2,-27(fp)
8110d9a4:	10800ba0 	cmpeqi	r2,r2,46
8110d9a8:	1000031e 	bne	r2,zero,8110d9b8 <vLoadDefaultETHConf+0x600>
8110d9ac:	e0bff947 	ldb	r2,-27(fp)
8110d9b0:	10800ed8 	cmpnei	r2,r2,59
8110d9b4:	103fe81e 	bne	r2,zero,8110d958 <__reset+0xfb0ed958>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110d9b8:	e0bffa17 	ldw	r2,-24(fp)
8110d9bc:	00c00284 	movi	r3,10
8110d9c0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110d9c4:	e0bff903 	ldbu	r2,-28(fp)
8110d9c8:	108000e8 	cmpgeui	r2,r2,3
8110d9cc:	1000021e 	bne	r2,zero,8110d9d8 <vLoadDefaultETHConf+0x620>
8110d9d0:	e43ff903 	ldbu	r16,-28(fp)
8110d9d4:	00000106 	br	8110d9dc <vLoadDefaultETHConf+0x624>
8110d9d8:	040000c4 	movi	r16,3
8110d9dc:	e0bffd04 	addi	r2,fp,-12
8110d9e0:	1009883a 	mov	r4,r2
8110d9e4:	1111c780 	call	81111c78 <atoi>
8110d9e8:	1007883a 	mov	r3,r2
8110d9ec:	00a04574 	movhi	r2,33045
8110d9f0:	10aefb04 	addi	r2,r2,-17428
8110d9f4:	1405883a 	add	r2,r2,r16
8110d9f8:	10800304 	addi	r2,r2,12
8110d9fc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110da00:	e0bffd04 	addi	r2,fp,-12
8110da04:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110da08:	e0bff903 	ldbu	r2,-28(fp)
8110da0c:	10800044 	addi	r2,r2,1
8110da10:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110da14:	e0bff947 	ldb	r2,-27(fp)
8110da18:	10800ed8 	cmpnei	r2,r2,59
8110da1c:	103fce1e 	bne	r2,zero,8110d958 <__reset+0xfb0ed958>

						break;						
8110da20:	00006106 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110da24:	e0bffc0f 	ldh	r2,-16(fp)
8110da28:	1009883a 	mov	r4,r2
8110da2c:	11103000 	call	81110300 <cGetNextChar>
8110da30:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110da34:	d0e00317 	ldw	r3,-32756(gp)
8110da38:	e0bff947 	ldb	r2,-27(fp)
8110da3c:	10800044 	addi	r2,r2,1
8110da40:	1885883a 	add	r2,r3,r2
8110da44:	10800003 	ldbu	r2,0(r2)
8110da48:	10803fcc 	andi	r2,r2,255
8110da4c:	1080010c 	andi	r2,r2,4
8110da50:	10000626 	beq	r2,zero,8110da6c <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110da54:	e0bffa17 	ldw	r2,-24(fp)
8110da58:	e0fff943 	ldbu	r3,-27(fp)
8110da5c:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110da60:	e0bffa17 	ldw	r2,-24(fp)
8110da64:	10800044 	addi	r2,r2,1
8110da68:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110da6c:	e0bff947 	ldb	r2,-27(fp)
8110da70:	10800ed8 	cmpnei	r2,r2,59
8110da74:	103feb1e 	bne	r2,zero,8110da24 <__reset+0xfb0eda24>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110da78:	e0bffa17 	ldw	r2,-24(fp)
8110da7c:	00c00284 	movi	r3,10
8110da80:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110da84:	e0bffd04 	addi	r2,fp,-12
8110da88:	1009883a 	mov	r4,r2
8110da8c:	1111c780 	call	81111c78 <atoi>
8110da90:	1007883a 	mov	r3,r2
8110da94:	00a04574 	movhi	r2,33045
8110da98:	10aefb04 	addi	r2,r2,-17428
8110da9c:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110daa0:	e0bffd04 	addi	r2,fp,-12
8110daa4:	e0bffa15 	stw	r2,-24(fp)

						break;
8110daa8:	00003f06 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110daac:	e0bffc0f 	ldh	r2,-16(fp)
8110dab0:	1009883a 	mov	r4,r2
8110dab4:	11103000 	call	81110300 <cGetNextChar>
8110dab8:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110dabc:	d0e00317 	ldw	r3,-32756(gp)
8110dac0:	e0bff947 	ldb	r2,-27(fp)
8110dac4:	10800044 	addi	r2,r2,1
8110dac8:	1885883a 	add	r2,r3,r2
8110dacc:	10800003 	ldbu	r2,0(r2)
8110dad0:	10803fcc 	andi	r2,r2,255
8110dad4:	1080010c 	andi	r2,r2,4
8110dad8:	10000626 	beq	r2,zero,8110daf4 <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110dadc:	e0bffa17 	ldw	r2,-24(fp)
8110dae0:	e0fff943 	ldbu	r3,-27(fp)
8110dae4:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110dae8:	e0bffa17 	ldw	r2,-24(fp)
8110daec:	10800044 	addi	r2,r2,1
8110daf0:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110daf4:	e0bff947 	ldb	r2,-27(fp)
8110daf8:	10800ed8 	cmpnei	r2,r2,59
8110dafc:	103feb1e 	bne	r2,zero,8110daac <__reset+0xfb0edaac>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110db00:	e0bffa17 	ldw	r2,-24(fp)
8110db04:	00c00284 	movi	r3,10
8110db08:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110db0c:	e0bffd04 	addi	r2,fp,-12
8110db10:	1009883a 	mov	r4,r2
8110db14:	1111c780 	call	81111c78 <atoi>
8110db18:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110db1c:	e0bffc8f 	ldh	r2,-14(fp)
8110db20:	10800058 	cmpnei	r2,r2,1
8110db24:	1000051e 	bne	r2,zero,8110db3c <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110db28:	00a04574 	movhi	r2,33045
8110db2c:	10aefb04 	addi	r2,r2,-17428
8110db30:	00c00044 	movi	r3,1
8110db34:	10c00615 	stw	r3,24(r2)
8110db38:	00000306 	br	8110db48 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110db3c:	00a04574 	movhi	r2,33045
8110db40:	10aefb04 	addi	r2,r2,-17428
8110db44:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110db48:	e0bffd04 	addi	r2,fp,-12
8110db4c:	e0bffa15 	stw	r2,-24(fp)

						break;
8110db50:	00001506 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110db54:	e0bffc0f 	ldh	r2,-16(fp)
8110db58:	1009883a 	mov	r4,r2
8110db5c:	11102c00 	call	811102c0 <siCloseFile>
8110db60:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110db64:	e0bffb17 	ldw	r2,-20(fp)
8110db68:	1000031e 	bne	r2,zero,8110db78 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110db6c:	01204534 	movhi	r4,33044
8110db70:	213a0004 	addi	r4,r4,-6144
8110db74:	11134200 	call	81113420 <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110db78:	00800044 	movi	r2,1
8110db7c:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110db80:	00800044 	movi	r2,1
8110db84:	e0bff715 	stw	r2,-36(fp)
						break;
8110db88:	00000706 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110db8c:	e0bff947 	ldb	r2,-27(fp)
8110db90:	100b883a 	mov	r5,r2
8110db94:	01204534 	movhi	r4,33044
8110db98:	213a0804 	addi	r4,r4,-6112
8110db9c:	111319c0 	call	8111319c <printf>
						break;
8110dba0:	00000106 	br	8110dba8 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110dba4:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110dba8:	e0bff817 	ldw	r2,-32(fp)
8110dbac:	103e2026 	beq	r2,zero,8110d430 <__reset+0xfb0ed430>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110dbb0:	00000706 	br	8110dbd0 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110dbb4:	01204534 	movhi	r4,33044
8110dbb8:	213a1504 	addi	r4,r4,-6060
8110dbbc:	11134200 	call	81113420 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110dbc0:	00000306 	br	8110dbd0 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110dbc4:	01204534 	movhi	r4,33044
8110dbc8:	213a1e04 	addi	r4,r4,-6024
8110dbcc:	11134200 	call	81113420 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110dbd0:	e0bff717 	ldw	r2,-36(fp)
8110dbd4:	1000541e 	bne	r2,zero,8110dd28 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110dbd8:	01204534 	movhi	r4,33044
8110dbdc:	213a2104 	addi	r4,r4,-6012
8110dbe0:	11134200 	call	81113420 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110dbe4:	01604534 	movhi	r5,33044
8110dbe8:	2979f904 	addi	r5,r5,-6172
8110dbec:	01204534 	movhi	r4,33044
8110dbf0:	213a3504 	addi	r4,r4,-5932
8110dbf4:	111319c0 	call	8111319c <printf>


		xConfEth.siPortPUS = 17000;
8110dbf8:	00a04574 	movhi	r2,33045
8110dbfc:	10aefb04 	addi	r2,r2,-17428
8110dc00:	00d09a04 	movi	r3,17000
8110dc04:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110dc08:	00a04574 	movhi	r2,33045
8110dc0c:	10aefb04 	addi	r2,r2,-17428
8110dc10:	00fff004 	movi	r3,-64
8110dc14:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110dc18:	00a04574 	movhi	r2,33045
8110dc1c:	10aefb04 	addi	r2,r2,-17428
8110dc20:	00ffea04 	movi	r3,-88
8110dc24:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110dc28:	00a04574 	movhi	r2,33045
8110dc2c:	10aefb04 	addi	r2,r2,-17428
8110dc30:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110dc34:	00a04574 	movhi	r2,33045
8110dc38:	10aefb04 	addi	r2,r2,-17428
8110dc3c:	00c00144 	movi	r3,5
8110dc40:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110dc44:	00a04574 	movhi	r2,33045
8110dc48:	10aefb04 	addi	r2,r2,-17428
8110dc4c:	00fff004 	movi	r3,-64
8110dc50:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110dc54:	00a04574 	movhi	r2,33045
8110dc58:	10aefb04 	addi	r2,r2,-17428
8110dc5c:	00ffea04 	movi	r3,-88
8110dc60:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110dc64:	00a04574 	movhi	r2,33045
8110dc68:	10aefb04 	addi	r2,r2,-17428
8110dc6c:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110dc70:	00a04574 	movhi	r2,33045
8110dc74:	10aefb04 	addi	r2,r2,-17428
8110dc78:	00c00044 	movi	r3,1
8110dc7c:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110dc80:	00a04574 	movhi	r2,33045
8110dc84:	10aefb04 	addi	r2,r2,-17428
8110dc88:	00ffffc4 	movi	r3,-1
8110dc8c:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110dc90:	00a04574 	movhi	r2,33045
8110dc94:	10aefb04 	addi	r2,r2,-17428
8110dc98:	00ffffc4 	movi	r3,-1
8110dc9c:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110dca0:	00a04574 	movhi	r2,33045
8110dca4:	10aefb04 	addi	r2,r2,-17428
8110dca8:	00ffffc4 	movi	r3,-1
8110dcac:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110dcb0:	00a04574 	movhi	r2,33045
8110dcb4:	10aefb04 	addi	r2,r2,-17428
8110dcb8:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110dcbc:	00a04574 	movhi	r2,33045
8110dcc0:	10aefb04 	addi	r2,r2,-17428
8110dcc4:	00ffff04 	movi	r3,-4
8110dcc8:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110dccc:	00a04574 	movhi	r2,33045
8110dcd0:	10aefb04 	addi	r2,r2,-17428
8110dcd4:	00fffdc4 	movi	r3,-9
8110dcd8:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110dcdc:	00a04574 	movhi	r2,33045
8110dce0:	10aefb04 	addi	r2,r2,-17428
8110dce4:	00c018c4 	movi	r3,99
8110dce8:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110dcec:	00a04574 	movhi	r2,33045
8110dcf0:	10aefb04 	addi	r2,r2,-17428
8110dcf4:	00c01344 	movi	r3,77
8110dcf8:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110dcfc:	00a04574 	movhi	r2,33045
8110dd00:	10aefb04 	addi	r2,r2,-17428
8110dd04:	00c007c4 	movi	r3,31
8110dd08:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110dd0c:	00a04574 	movhi	r2,33045
8110dd10:	10aefb04 	addi	r2,r2,-17428
8110dd14:	00c01084 	movi	r3,66
8110dd18:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110dd1c:	00a04574 	movhi	r2,33045
8110dd20:	10aefb04 	addi	r2,r2,-17428
8110dd24:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110dd28:	e0bff717 	ldw	r2,-36(fp)
}
8110dd2c:	e6ffff04 	addi	sp,fp,-4
8110dd30:	dfc00217 	ldw	ra,8(sp)
8110dd34:	df000117 	ldw	fp,4(sp)
8110dd38:	dc000017 	ldw	r16,0(sp)
8110dd3c:	dec00304 	addi	sp,sp,12
8110dd40:	f800283a 	ret

8110dd44 <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110dd44:	defff004 	addi	sp,sp,-64
8110dd48:	de00012e 	bgeu	sp,et,8110dd50 <vShowEthConfig+0xc>
8110dd4c:	003b68fa 	trap	3
8110dd50:	dfc00f15 	stw	ra,60(sp)
8110dd54:	df000e15 	stw	fp,56(sp)
8110dd58:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110dd5c:	d0a04f17 	ldw	r2,-32452(gp)
8110dd60:	100f883a 	mov	r7,r2
8110dd64:	018007c4 	movi	r6,31
8110dd68:	01400044 	movi	r5,1
8110dd6c:	01204534 	movhi	r4,33044
8110dd70:	213a3b04 	addi	r4,r4,-5908
8110dd74:	11124700 	call	81112470 <fwrite>

		memset(buffer,0,40);
8110dd78:	01800a04 	movi	r6,40
8110dd7c:	000b883a 	mov	r5,zero
8110dd80:	e13ff604 	addi	r4,fp,-40
8110dd84:	1112fd40 	call	81112fd4 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110dd88:	00a04574 	movhi	r2,33045
8110dd8c:	10aefb04 	addi	r2,r2,-17428
8110dd90:	10800403 	ldbu	r2,16(r2)
8110dd94:	11803fcc 	andi	r6,r2,255
8110dd98:	00a04574 	movhi	r2,33045
8110dd9c:	10aefb04 	addi	r2,r2,-17428
8110dda0:	10800443 	ldbu	r2,17(r2)
8110dda4:	11c03fcc 	andi	r7,r2,255
8110dda8:	00a04574 	movhi	r2,33045
8110ddac:	10aefb04 	addi	r2,r2,-17428
8110ddb0:	10800483 	ldbu	r2,18(r2)
8110ddb4:	10c03fcc 	andi	r3,r2,255
8110ddb8:	00a04574 	movhi	r2,33045
8110ddbc:	10aefb04 	addi	r2,r2,-17428
8110ddc0:	108004c3 	ldbu	r2,19(r2)
8110ddc4:	11003fcc 	andi	r4,r2,255
8110ddc8:	00a04574 	movhi	r2,33045
8110ddcc:	10aefb04 	addi	r2,r2,-17428
8110ddd0:	10800503 	ldbu	r2,20(r2)
8110ddd4:	11403fcc 	andi	r5,r2,255
8110ddd8:	00a04574 	movhi	r2,33045
8110dddc:	10aefb04 	addi	r2,r2,-17428
8110dde0:	10800543 	ldbu	r2,21(r2)
8110dde4:	10803fcc 	andi	r2,r2,255
8110dde8:	d8800315 	stw	r2,12(sp)
8110ddec:	d9400215 	stw	r5,8(sp)
8110ddf0:	d9000115 	stw	r4,4(sp)
8110ddf4:	d8c00015 	stw	r3,0(sp)
8110ddf8:	01604534 	movhi	r5,33044
8110ddfc:	297a4304 	addi	r5,r5,-5876
8110de00:	e13ff604 	addi	r4,fp,-40
8110de04:	11137640 	call	81113764 <sprintf>
		debug(fp, buffer );
8110de08:	d0a04f17 	ldw	r2,-32452(gp)
8110de0c:	e17ff604 	addi	r5,fp,-40
8110de10:	1009883a 	mov	r4,r2
8110de14:	1111dd40 	call	81111dd4 <fprintf>

		memset(buffer,0,40);
8110de18:	01800a04 	movi	r6,40
8110de1c:	000b883a 	mov	r5,zero
8110de20:	e13ff604 	addi	r4,fp,-40
8110de24:	1112fd40 	call	81112fd4 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110de28:	00a04574 	movhi	r2,33045
8110de2c:	10aefb04 	addi	r2,r2,-17428
8110de30:	10800003 	ldbu	r2,0(r2)
8110de34:	11003fcc 	andi	r4,r2,255
8110de38:	00a04574 	movhi	r2,33045
8110de3c:	10aefb04 	addi	r2,r2,-17428
8110de40:	10800043 	ldbu	r2,1(r2)
8110de44:	11403fcc 	andi	r5,r2,255
8110de48:	00a04574 	movhi	r2,33045
8110de4c:	10aefb04 	addi	r2,r2,-17428
8110de50:	10800083 	ldbu	r2,2(r2)
8110de54:	10c03fcc 	andi	r3,r2,255
8110de58:	00a04574 	movhi	r2,33045
8110de5c:	10aefb04 	addi	r2,r2,-17428
8110de60:	108000c3 	ldbu	r2,3(r2)
8110de64:	10803fcc 	andi	r2,r2,255
8110de68:	d8800115 	stw	r2,4(sp)
8110de6c:	d8c00015 	stw	r3,0(sp)
8110de70:	280f883a 	mov	r7,r5
8110de74:	200d883a 	mov	r6,r4
8110de78:	01604534 	movhi	r5,33044
8110de7c:	297a4c04 	addi	r5,r5,-5840
8110de80:	e13ff604 	addi	r4,fp,-40
8110de84:	11137640 	call	81113764 <sprintf>
		debug(fp, buffer );
8110de88:	d0a04f17 	ldw	r2,-32452(gp)
8110de8c:	e17ff604 	addi	r5,fp,-40
8110de90:	1009883a 	mov	r4,r2
8110de94:	1111dd40 	call	81111dd4 <fprintf>

		memset(buffer,0,40);
8110de98:	01800a04 	movi	r6,40
8110de9c:	000b883a 	mov	r5,zero
8110dea0:	e13ff604 	addi	r4,fp,-40
8110dea4:	1112fd40 	call	81112fd4 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110dea8:	00a04574 	movhi	r2,33045
8110deac:	10aefb04 	addi	r2,r2,-17428
8110deb0:	10800103 	ldbu	r2,4(r2)
8110deb4:	11003fcc 	andi	r4,r2,255
8110deb8:	00a04574 	movhi	r2,33045
8110debc:	10aefb04 	addi	r2,r2,-17428
8110dec0:	10800143 	ldbu	r2,5(r2)
8110dec4:	11403fcc 	andi	r5,r2,255
8110dec8:	00a04574 	movhi	r2,33045
8110decc:	10aefb04 	addi	r2,r2,-17428
8110ded0:	10800183 	ldbu	r2,6(r2)
8110ded4:	10c03fcc 	andi	r3,r2,255
8110ded8:	00a04574 	movhi	r2,33045
8110dedc:	10aefb04 	addi	r2,r2,-17428
8110dee0:	108001c3 	ldbu	r2,7(r2)
8110dee4:	10803fcc 	andi	r2,r2,255
8110dee8:	d8800115 	stw	r2,4(sp)
8110deec:	d8c00015 	stw	r3,0(sp)
8110def0:	280f883a 	mov	r7,r5
8110def4:	200d883a 	mov	r6,r4
8110def8:	01604534 	movhi	r5,33044
8110defc:	297a5204 	addi	r5,r5,-5816
8110df00:	e13ff604 	addi	r4,fp,-40
8110df04:	11137640 	call	81113764 <sprintf>
		debug(fp, buffer );
8110df08:	d0a04f17 	ldw	r2,-32452(gp)
8110df0c:	e17ff604 	addi	r5,fp,-40
8110df10:	1009883a 	mov	r4,r2
8110df14:	1111dd40 	call	81111dd4 <fprintf>

		memset(buffer,0,40);
8110df18:	01800a04 	movi	r6,40
8110df1c:	000b883a 	mov	r5,zero
8110df20:	e13ff604 	addi	r4,fp,-40
8110df24:	1112fd40 	call	81112fd4 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110df28:	00a04574 	movhi	r2,33045
8110df2c:	10aefb04 	addi	r2,r2,-17428
8110df30:	10800203 	ldbu	r2,8(r2)
8110df34:	11003fcc 	andi	r4,r2,255
8110df38:	00a04574 	movhi	r2,33045
8110df3c:	10aefb04 	addi	r2,r2,-17428
8110df40:	10800243 	ldbu	r2,9(r2)
8110df44:	11403fcc 	andi	r5,r2,255
8110df48:	00a04574 	movhi	r2,33045
8110df4c:	10aefb04 	addi	r2,r2,-17428
8110df50:	10800283 	ldbu	r2,10(r2)
8110df54:	10c03fcc 	andi	r3,r2,255
8110df58:	00a04574 	movhi	r2,33045
8110df5c:	10aefb04 	addi	r2,r2,-17428
8110df60:	108002c3 	ldbu	r2,11(r2)
8110df64:	10803fcc 	andi	r2,r2,255
8110df68:	d8800115 	stw	r2,4(sp)
8110df6c:	d8c00015 	stw	r3,0(sp)
8110df70:	280f883a 	mov	r7,r5
8110df74:	200d883a 	mov	r6,r4
8110df78:	01604534 	movhi	r5,33044
8110df7c:	297a5904 	addi	r5,r5,-5788
8110df80:	e13ff604 	addi	r4,fp,-40
8110df84:	11137640 	call	81113764 <sprintf>
		debug(fp, buffer );
8110df88:	d0a04f17 	ldw	r2,-32452(gp)
8110df8c:	e17ff604 	addi	r5,fp,-40
8110df90:	1009883a 	mov	r4,r2
8110df94:	1111dd40 	call	81111dd4 <fprintf>

		memset(buffer,0,40);
8110df98:	01800a04 	movi	r6,40
8110df9c:	000b883a 	mov	r5,zero
8110dfa0:	e13ff604 	addi	r4,fp,-40
8110dfa4:	1112fd40 	call	81112fd4 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110dfa8:	00a04574 	movhi	r2,33045
8110dfac:	10aefb04 	addi	r2,r2,-17428
8110dfb0:	10800303 	ldbu	r2,12(r2)
8110dfb4:	11003fcc 	andi	r4,r2,255
8110dfb8:	00a04574 	movhi	r2,33045
8110dfbc:	10aefb04 	addi	r2,r2,-17428
8110dfc0:	10800343 	ldbu	r2,13(r2)
8110dfc4:	11403fcc 	andi	r5,r2,255
8110dfc8:	00a04574 	movhi	r2,33045
8110dfcc:	10aefb04 	addi	r2,r2,-17428
8110dfd0:	10800383 	ldbu	r2,14(r2)
8110dfd4:	10c03fcc 	andi	r3,r2,255
8110dfd8:	00a04574 	movhi	r2,33045
8110dfdc:	10aefb04 	addi	r2,r2,-17428
8110dfe0:	108003c3 	ldbu	r2,15(r2)
8110dfe4:	10803fcc 	andi	r2,r2,255
8110dfe8:	d8800115 	stw	r2,4(sp)
8110dfec:	d8c00015 	stw	r3,0(sp)
8110dff0:	280f883a 	mov	r7,r5
8110dff4:	200d883a 	mov	r6,r4
8110dff8:	01604534 	movhi	r5,33044
8110dffc:	297a6004 	addi	r5,r5,-5760
8110e000:	e13ff604 	addi	r4,fp,-40
8110e004:	11137640 	call	81113764 <sprintf>
		debug(fp, buffer );
8110e008:	d0a04f17 	ldw	r2,-32452(gp)
8110e00c:	e17ff604 	addi	r5,fp,-40
8110e010:	1009883a 	mov	r4,r2
8110e014:	1111dd40 	call	81111dd4 <fprintf>

		memset(buffer,0,40);
8110e018:	01800a04 	movi	r6,40
8110e01c:	000b883a 	mov	r5,zero
8110e020:	e13ff604 	addi	r4,fp,-40
8110e024:	1112fd40 	call	81112fd4 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110e028:	00a04574 	movhi	r2,33045
8110e02c:	10aefb04 	addi	r2,r2,-17428
8110e030:	1080058b 	ldhu	r2,22(r2)
8110e034:	10bfffcc 	andi	r2,r2,65535
8110e038:	100d883a 	mov	r6,r2
8110e03c:	01604534 	movhi	r5,33044
8110e040:	297a6704 	addi	r5,r5,-5732
8110e044:	e13ff604 	addi	r4,fp,-40
8110e048:	11137640 	call	81113764 <sprintf>
		debug(fp, buffer );
8110e04c:	d0a04f17 	ldw	r2,-32452(gp)
8110e050:	e17ff604 	addi	r5,fp,-40
8110e054:	1009883a 	mov	r4,r2
8110e058:	1111dd40 	call	81111dd4 <fprintf>

	}
8110e05c:	0001883a 	nop
8110e060:	e037883a 	mov	sp,fp
8110e064:	dfc00117 	ldw	ra,4(sp)
8110e068:	df000017 	ldw	fp,0(sp)
8110e06c:	dec00204 	addi	sp,sp,8
8110e070:	f800283a 	ret

8110e074 <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110e074:	defffb04 	addi	sp,sp,-20
8110e078:	de00012e 	bgeu	sp,et,8110e080 <ucCrc8+0xc>
8110e07c:	003b68fa 	trap	3
8110e080:	df000415 	stw	fp,16(sp)
8110e084:	df000404 	addi	fp,sp,16
8110e088:	e13ffd15 	stw	r4,-12(fp)
8110e08c:	e17ffe15 	stw	r5,-8(fp)
8110e090:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110e094:	e0bffe17 	ldw	r2,-8(fp)
8110e098:	1000021e 	bne	r2,zero,8110e0a4 <ucCrc8+0x30>
        return 0;
8110e09c:	0005883a 	mov	r2,zero
8110e0a0:	00001906 	br	8110e108 <ucCrc8+0x94>
    crc &= 0xff;
8110e0a4:	e0bffd17 	ldw	r2,-12(fp)
8110e0a8:	10803fcc 	andi	r2,r2,255
8110e0ac:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110e0b0:	e0fffe17 	ldw	r3,-8(fp)
8110e0b4:	e0bfff17 	ldw	r2,-4(fp)
8110e0b8:	1885883a 	add	r2,r3,r2
8110e0bc:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110e0c0:	00000d06 	br	8110e0f8 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110e0c4:	e0bffe17 	ldw	r2,-8(fp)
8110e0c8:	10c00044 	addi	r3,r2,1
8110e0cc:	e0fffe15 	stw	r3,-8(fp)
8110e0d0:	10800003 	ldbu	r2,0(r2)
8110e0d4:	10c03fcc 	andi	r3,r2,255
8110e0d8:	e0bffd17 	ldw	r2,-12(fp)
8110e0dc:	1886f03a 	xor	r3,r3,r2
8110e0e0:	00a04534 	movhi	r2,33044
8110e0e4:	10ba6ac4 	addi	r2,r2,-5717
8110e0e8:	10c5883a 	add	r2,r2,r3
8110e0ec:	10800003 	ldbu	r2,0(r2)
8110e0f0:	10803fcc 	andi	r2,r2,255
8110e0f4:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110e0f8:	e0fffe17 	ldw	r3,-8(fp)
8110e0fc:	e0bffc17 	ldw	r2,-16(fp)
8110e100:	18bff036 	bltu	r3,r2,8110e0c4 <__reset+0xfb0ee0c4>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110e104:	e0bffd17 	ldw	r2,-12(fp)
}
8110e108:	e037883a 	mov	sp,fp
8110e10c:	df000017 	ldw	fp,0(sp)
8110e110:	dec00104 	addi	sp,sp,4
8110e114:	f800283a 	ret

8110e118 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110e118:	defffb04 	addi	sp,sp,-20
8110e11c:	de00012e 	bgeu	sp,et,8110e124 <ucCrc8wInit+0xc>
8110e120:	003b68fa 	trap	3
8110e124:	dfc00415 	stw	ra,16(sp)
8110e128:	df000315 	stw	fp,12(sp)
8110e12c:	df000304 	addi	fp,sp,12
8110e130:	e13ffe15 	stw	r4,-8(fp)
8110e134:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;

	crc = ucCrc8(0, NULL, 0);
8110e138:	000d883a 	mov	r6,zero
8110e13c:	000b883a 	mov	r5,zero
8110e140:	0009883a 	mov	r4,zero
8110e144:	110e0740 	call	8110e074 <ucCrc8>
8110e148:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110e14c:	e0bffd03 	ldbu	r2,-12(fp)
8110e150:	e1bfff17 	ldw	r6,-4(fp)
8110e154:	e17ffe17 	ldw	r5,-8(fp)
8110e158:	1009883a 	mov	r4,r2
8110e15c:	110e0740 	call	8110e074 <ucCrc8>
}
8110e160:	e037883a 	mov	sp,fp
8110e164:	dfc00117 	ldw	ra,4(sp)
8110e168:	df000017 	ldw	fp,0(sp)
8110e16c:	dec00204 	addi	sp,sp,8
8110e170:	f800283a 	ret

8110e174 <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110e174:	defff904 	addi	sp,sp,-28
8110e178:	de00012e 	bgeu	sp,et,8110e180 <printErrorTask+0xc>
8110e17c:	003b68fa 	trap	3
8110e180:	dfc00615 	stw	ra,24(sp)
8110e184:	df000515 	stw	fp,20(sp)
8110e188:	df000504 	addi	fp,sp,20
8110e18c:	2005883a 	mov	r2,r4
8110e190:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110e194:	e03ffb15 	stw	zero,-20(fp)
8110e198:	e03ffc15 	stw	zero,-16(fp)
8110e19c:	e03ffd15 	stw	zero,-12(fp)
8110e1a0:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110e1a4:	e0bfff03 	ldbu	r2,-4(fp)
8110e1a8:	100d883a 	mov	r6,r2
8110e1ac:	01604534 	movhi	r5,33044
8110e1b0:	297aab04 	addi	r5,r5,-5460
8110e1b4:	e13ffb04 	addi	r4,fp,-20
8110e1b8:	11137640 	call	81113764 <sprintf>
		debug(fp, buffer);
8110e1bc:	d0a04f17 	ldw	r2,-32452(gp)
8110e1c0:	e17ffb04 	addi	r5,fp,-20
8110e1c4:	1009883a 	mov	r4,r2
8110e1c8:	1111dd40 	call	81111dd4 <fprintf>
	}
8110e1cc:	0001883a 	nop
8110e1d0:	e037883a 	mov	sp,fp
8110e1d4:	dfc00117 	ldw	ra,4(sp)
8110e1d8:	df000017 	ldw	fp,0(sp)
8110e1dc:	dec00204 	addi	sp,sp,8
8110e1e0:	f800283a 	ret

8110e1e4 <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110e1e4:	defffd04 	addi	sp,sp,-12
8110e1e8:	de00012e 	bgeu	sp,et,8110e1f0 <vFailCreateMutexSResources+0xc>
8110e1ec:	003b68fa 	trap	3
8110e1f0:	dfc00215 	stw	ra,8(sp)
8110e1f4:	df000115 	stw	fp,4(sp)
8110e1f8:	df000104 	addi	fp,sp,4
8110e1fc:	2005883a 	mov	r2,r4
8110e200:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)\n");
8110e204:	d0a04f17 	ldw	r2,-32452(gp)
8110e208:	100f883a 	mov	r7,r2
8110e20c:	018008c4 	movi	r6,35
8110e210:	01400044 	movi	r5,1
8110e214:	01204534 	movhi	r4,33044
8110e218:	213aae04 	addi	r4,r4,-5448
8110e21c:	11124700 	call	81112470 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110e220:	e0bfff03 	ldbu	r2,-4(fp)
8110e224:	1009883a 	mov	r4,r2
8110e228:	110e1740 	call	8110e174 <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e22c:	0001883a 	nop
8110e230:	e037883a 	mov	sp,fp
8110e234:	dfc00117 	ldw	ra,4(sp)
8110e238:	df000017 	ldw	fp,0(sp)
8110e23c:	dec00204 	addi	sp,sp,8
8110e240:	f800283a 	ret

8110e244 <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110e244:	defffe04 	addi	sp,sp,-8
8110e248:	de00012e 	bgeu	sp,et,8110e250 <vFailCreateSemaphoreResources+0xc>
8110e24c:	003b68fa 	trap	3
8110e250:	dfc00115 	stw	ra,4(sp)
8110e254:	df000015 	stw	fp,0(sp)
8110e258:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)\n");
8110e25c:	d0a04f17 	ldw	r2,-32452(gp)
8110e260:	100f883a 	mov	r7,r2
8110e264:	01800984 	movi	r6,38
8110e268:	01400044 	movi	r5,1
8110e26c:	01204534 	movhi	r4,33044
8110e270:	213ab704 	addi	r4,r4,-5412
8110e274:	11124700 	call	81112470 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e278:	0001883a 	nop
8110e27c:	e037883a 	mov	sp,fp
8110e280:	dfc00117 	ldw	ra,4(sp)
8110e284:	df000017 	ldw	fp,0(sp)
8110e288:	dec00204 	addi	sp,sp,8
8110e28c:	f800283a 	ret

8110e290 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110e290:	defffe04 	addi	sp,sp,-8
8110e294:	de00012e 	bgeu	sp,et,8110e29c <vFailTestCriticasParts+0xc>
8110e298:	003b68fa 	trap	3
8110e29c:	dfc00115 	stw	ra,4(sp)
8110e2a0:	df000015 	stw	fp,0(sp)
8110e2a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)\n");
8110e2a8:	d0a04f17 	ldw	r2,-32452(gp)
8110e2ac:	100f883a 	mov	r7,r2
8110e2b0:	018007c4 	movi	r6,31
8110e2b4:	01400044 	movi	r5,1
8110e2b8:	01204534 	movhi	r4,33044
8110e2bc:	213ac104 	addi	r4,r4,-5372
8110e2c0:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e2c4:	0001883a 	nop
8110e2c8:	e037883a 	mov	sp,fp
8110e2cc:	dfc00117 	ldw	ra,4(sp)
8110e2d0:	df000017 	ldw	fp,0(sp)
8110e2d4:	dec00204 	addi	sp,sp,8
8110e2d8:	f800283a 	ret

8110e2dc <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110e2dc:	defffe04 	addi	sp,sp,-8
8110e2e0:	de00012e 	bgeu	sp,et,8110e2e8 <vFailSendxSemCommInit+0xc>
8110e2e4:	003b68fa 	trap	3
8110e2e8:	dfc00115 	stw	ra,4(sp)
8110e2ec:	df000015 	stw	fp,0(sp)
8110e2f0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110e2f4:	d0a04f17 	ldw	r2,-32452(gp)
8110e2f8:	100f883a 	mov	r7,r2
8110e2fc:	01800744 	movi	r6,29
8110e300:	01400044 	movi	r5,1
8110e304:	01204534 	movhi	r4,33044
8110e308:	213ac904 	addi	r4,r4,-5340
8110e30c:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)\n");
8110e310:	d0a04f17 	ldw	r2,-32452(gp)
8110e314:	100f883a 	mov	r7,r2
8110e318:	01800a44 	movi	r6,41
8110e31c:	01400044 	movi	r5,1
8110e320:	01204534 	movhi	r4,33044
8110e324:	213ad104 	addi	r4,r4,-5308
8110e328:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e32c:	0001883a 	nop
8110e330:	e037883a 	mov	sp,fp
8110e334:	dfc00117 	ldw	ra,4(sp)
8110e338:	df000017 	ldw	fp,0(sp)
8110e33c:	dec00204 	addi	sp,sp,8
8110e340:	f800283a 	ret

8110e344 <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110e344:	defffe04 	addi	sp,sp,-8
8110e348:	de00012e 	bgeu	sp,et,8110e350 <vFailSendPreParsedSemaphore+0xc>
8110e34c:	003b68fa 	trap	3
8110e350:	dfc00115 	stw	ra,4(sp)
8110e354:	df000015 	stw	fp,0(sp)
8110e358:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)\n");
8110e35c:	d0a04f17 	ldw	r2,-32452(gp)
8110e360:	100f883a 	mov	r7,r2
8110e364:	01800904 	movi	r6,36
8110e368:	01400044 	movi	r5,1
8110e36c:	01204534 	movhi	r4,33044
8110e370:	213adc04 	addi	r4,r4,-5264
8110e374:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e378:	0001883a 	nop
8110e37c:	e037883a 	mov	sp,fp
8110e380:	dfc00117 	ldw	ra,4(sp)
8110e384:	df000017 	ldw	fp,0(sp)
8110e388:	dec00204 	addi	sp,sp,8
8110e38c:	f800283a 	ret

8110e390 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110e390:	defffe04 	addi	sp,sp,-8
8110e394:	de00012e 	bgeu	sp,et,8110e39c <vFailSendPreAckReceiverSemaphore+0xc>
8110e398:	003b68fa 	trap	3
8110e39c:	dfc00115 	stw	ra,4(sp)
8110e3a0:	df000015 	stw	fp,0(sp)
8110e3a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)\n");
8110e3a8:	d0a04f17 	ldw	r2,-32452(gp)
8110e3ac:	100f883a 	mov	r7,r2
8110e3b0:	01800a44 	movi	r6,41
8110e3b4:	01400044 	movi	r5,1
8110e3b8:	01204534 	movhi	r4,33044
8110e3bc:	213ae604 	addi	r4,r4,-5224
8110e3c0:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e3c4:	0001883a 	nop
8110e3c8:	e037883a 	mov	sp,fp
8110e3cc:	dfc00117 	ldw	ra,4(sp)
8110e3d0:	df000017 	ldw	fp,0(sp)
8110e3d4:	dec00204 	addi	sp,sp,8
8110e3d8:	f800283a 	ret

8110e3dc <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110e3dc:	defffe04 	addi	sp,sp,-8
8110e3e0:	de00012e 	bgeu	sp,et,8110e3e8 <vFailSendPreAckSenderSemaphore+0xc>
8110e3e4:	003b68fa 	trap	3
8110e3e8:	dfc00115 	stw	ra,4(sp)
8110e3ec:	df000015 	stw	fp,0(sp)
8110e3f0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)\n");
8110e3f4:	d0a04f17 	ldw	r2,-32452(gp)
8110e3f8:	100f883a 	mov	r7,r2
8110e3fc:	018009c4 	movi	r6,39
8110e400:	01400044 	movi	r5,1
8110e404:	01204534 	movhi	r4,33044
8110e408:	213af104 	addi	r4,r4,-5180
8110e40c:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e410:	0001883a 	nop
8110e414:	e037883a 	mov	sp,fp
8110e418:	dfc00117 	ldw	ra,4(sp)
8110e41c:	df000017 	ldw	fp,0(sp)
8110e420:	dec00204 	addi	sp,sp,8
8110e424:	f800283a 	ret

8110e428 <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110e428:	defffe04 	addi	sp,sp,-8
8110e42c:	de00012e 	bgeu	sp,et,8110e434 <vFailGetCountSemaphoreSenderTask+0xc>
8110e430:	003b68fa 	trap	3
8110e434:	dfc00115 	stw	ra,4(sp)
8110e438:	df000015 	stw	fp,0(sp)
8110e43c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)\n");
8110e440:	d0a04f17 	ldw	r2,-32452(gp)
8110e444:	100f883a 	mov	r7,r2
8110e448:	01800a44 	movi	r6,41
8110e44c:	01400044 	movi	r5,1
8110e450:	01204534 	movhi	r4,33044
8110e454:	213afb04 	addi	r4,r4,-5140
8110e458:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110e45c:	d0a04f17 	ldw	r2,-32452(gp)
8110e460:	100f883a 	mov	r7,r2
8110e464:	01801104 	movi	r6,68
8110e468:	01400044 	movi	r5,1
8110e46c:	01204534 	movhi	r4,33044
8110e470:	213b0604 	addi	r4,r4,-5096
8110e474:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e478:	0001883a 	nop
8110e47c:	e037883a 	mov	sp,fp
8110e480:	dfc00117 	ldw	ra,4(sp)
8110e484:	df000017 	ldw	fp,0(sp)
8110e488:	dec00204 	addi	sp,sp,8
8110e48c:	f800283a 	ret

8110e490 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110e490:	defffe04 	addi	sp,sp,-8
8110e494:	de00012e 	bgeu	sp,et,8110e49c <vFailGetMutexSenderTask+0xc>
8110e498:	003b68fa 	trap	3
8110e49c:	dfc00115 	stw	ra,4(sp)
8110e4a0:	df000015 	stw	fp,0(sp)
8110e4a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)\n");
8110e4a8:	d0a04f17 	ldw	r2,-32452(gp)
8110e4ac:	100f883a 	mov	r7,r2
8110e4b0:	01800804 	movi	r6,32
8110e4b4:	01400044 	movi	r5,1
8110e4b8:	01204534 	movhi	r4,33044
8110e4bc:	213b1804 	addi	r4,r4,-5024
8110e4c0:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110e4c4:	d0a04f17 	ldw	r2,-32452(gp)
8110e4c8:	100f883a 	mov	r7,r2
8110e4cc:	01801084 	movi	r6,66
8110e4d0:	01400044 	movi	r5,1
8110e4d4:	01204534 	movhi	r4,33044
8110e4d8:	213b2104 	addi	r4,r4,-4988
8110e4dc:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e4e0:	0001883a 	nop
8110e4e4:	e037883a 	mov	sp,fp
8110e4e8:	dfc00117 	ldw	ra,4(sp)
8110e4ec:	df000017 	ldw	fp,0(sp)
8110e4f0:	dec00204 	addi	sp,sp,8
8110e4f4:	f800283a 	ret

8110e4f8 <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110e4f8:	defffe04 	addi	sp,sp,-8
8110e4fc:	de00012e 	bgeu	sp,et,8110e504 <vFailGetCountSemaphoreReceiverTask+0xc>
8110e500:	003b68fa 	trap	3
8110e504:	dfc00115 	stw	ra,4(sp)
8110e508:	df000015 	stw	fp,0(sp)
8110e50c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)\n");
8110e510:	d0a04f17 	ldw	r2,-32452(gp)
8110e514:	100f883a 	mov	r7,r2
8110e518:	01800ac4 	movi	r6,43
8110e51c:	01400044 	movi	r5,1
8110e520:	01204534 	movhi	r4,33044
8110e524:	213b3204 	addi	r4,r4,-4920
8110e528:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110e52c:	d0a04f17 	ldw	r2,-32452(gp)
8110e530:	100f883a 	mov	r7,r2
8110e534:	01801184 	movi	r6,70
8110e538:	01400044 	movi	r5,1
8110e53c:	01204534 	movhi	r4,33044
8110e540:	213b3d04 	addi	r4,r4,-4876
8110e544:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e548:	0001883a 	nop
8110e54c:	e037883a 	mov	sp,fp
8110e550:	dfc00117 	ldw	ra,4(sp)
8110e554:	df000017 	ldw	fp,0(sp)
8110e558:	dec00204 	addi	sp,sp,8
8110e55c:	f800283a 	ret

8110e560 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110e560:	defffe04 	addi	sp,sp,-8
8110e564:	de00012e 	bgeu	sp,et,8110e56c <vFailGetMutexReceiverTask+0xc>
8110e568:	003b68fa 	trap	3
8110e56c:	dfc00115 	stw	ra,4(sp)
8110e570:	df000015 	stw	fp,0(sp)
8110e574:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)\n");
8110e578:	d0a04f17 	ldw	r2,-32452(gp)
8110e57c:	100f883a 	mov	r7,r2
8110e580:	01800884 	movi	r6,34
8110e584:	01400044 	movi	r5,1
8110e588:	01204534 	movhi	r4,33044
8110e58c:	213b4f04 	addi	r4,r4,-4804
8110e590:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110e594:	d0a04f17 	ldw	r2,-32452(gp)
8110e598:	100f883a 	mov	r7,r2
8110e59c:	01801104 	movi	r6,68
8110e5a0:	01400044 	movi	r5,1
8110e5a4:	01204534 	movhi	r4,33044
8110e5a8:	213b5804 	addi	r4,r4,-4768
8110e5ac:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e5b0:	0001883a 	nop
8110e5b4:	e037883a 	mov	sp,fp
8110e5b8:	dfc00117 	ldw	ra,4(sp)
8110e5bc:	df000017 	ldw	fp,0(sp)
8110e5c0:	dec00204 	addi	sp,sp,8
8110e5c4:	f800283a 	ret

8110e5c8 <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110e5c8:	defffe04 	addi	sp,sp,-8
8110e5cc:	de00012e 	bgeu	sp,et,8110e5d4 <vFailGetMutexTxUARTSenderTask+0xc>
8110e5d0:	003b68fa 	trap	3
8110e5d4:	dfc00115 	stw	ra,4(sp)
8110e5d8:	df000015 	stw	fp,0(sp)
8110e5dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)\n");
8110e5e0:	d0a04f17 	ldw	r2,-32452(gp)
8110e5e4:	100f883a 	mov	r7,r2
8110e5e8:	01800984 	movi	r6,38
8110e5ec:	01400044 	movi	r5,1
8110e5f0:	01204534 	movhi	r4,33044
8110e5f4:	213b6a04 	addi	r4,r4,-4696
8110e5f8:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110e5fc:	d0a04f17 	ldw	r2,-32452(gp)
8110e600:	100f883a 	mov	r7,r2
8110e604:	01801044 	movi	r6,65
8110e608:	01400044 	movi	r5,1
8110e60c:	01204534 	movhi	r4,33044
8110e610:	213b7404 	addi	r4,r4,-4656
8110e614:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e618:	0001883a 	nop
8110e61c:	e037883a 	mov	sp,fp
8110e620:	dfc00117 	ldw	ra,4(sp)
8110e624:	df000017 	ldw	fp,0(sp)
8110e628:	dec00204 	addi	sp,sp,8
8110e62c:	f800283a 	ret

8110e630 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110e630:	defffe04 	addi	sp,sp,-8
8110e634:	de00012e 	bgeu	sp,et,8110e63c <vFailGetMacRTC+0xc>
8110e638:	003b68fa 	trap	3
8110e63c:	dfc00115 	stw	ra,4(sp)
8110e640:	df000015 	stw	fp,0(sp)
8110e644:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC\n");
8110e648:	d0a04f17 	ldw	r2,-32452(gp)
8110e64c:	100f883a 	mov	r7,r2
8110e650:	018003c4 	movi	r6,15
8110e654:	01400044 	movi	r5,1
8110e658:	01204534 	movhi	r4,33044
8110e65c:	213b8504 	addi	r4,r4,-4588
8110e660:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e664:	0001883a 	nop
8110e668:	e037883a 	mov	sp,fp
8110e66c:	dfc00117 	ldw	ra,4(sp)
8110e670:	df000017 	ldw	fp,0(sp)
8110e674:	dec00204 	addi	sp,sp,8
8110e678:	f800283a 	ret

8110e67c <vFailInitialization>:


void vFailInitialization( void )
{
8110e67c:	defffe04 	addi	sp,sp,-8
8110e680:	de00012e 	bgeu	sp,et,8110e688 <vFailInitialization+0xc>
8110e684:	003b68fa 	trap	3
8110e688:	dfc00115 	stw	ra,4(sp)
8110e68c:	df000015 	stw	fp,0(sp)
8110e690:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization\n");
8110e694:	d0a04f17 	ldw	r2,-32452(gp)
8110e698:	100f883a 	mov	r7,r2
8110e69c:	01800504 	movi	r6,20
8110e6a0:	01400044 	movi	r5,1
8110e6a4:	01204534 	movhi	r4,33044
8110e6a8:	213b8904 	addi	r4,r4,-4572
8110e6ac:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e6b0:	0001883a 	nop
8110e6b4:	e037883a 	mov	sp,fp
8110e6b8:	dfc00117 	ldw	ra,4(sp)
8110e6bc:	df000017 	ldw	fp,0(sp)
8110e6c0:	dec00204 	addi	sp,sp,8
8110e6c4:	f800283a 	ret

8110e6c8 <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110e6c8:	defffe04 	addi	sp,sp,-8
8110e6cc:	de00012e 	bgeu	sp,et,8110e6d4 <vFailReceiverCreate+0xc>
8110e6d0:	003b68fa 	trap	3
8110e6d4:	dfc00115 	stw	ra,4(sp)
8110e6d8:	df000015 	stw	fp,0(sp)
8110e6dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask\n");
8110e6e0:	d0a04f17 	ldw	r2,-32452(gp)
8110e6e4:	100f883a 	mov	r7,r2
8110e6e8:	01800484 	movi	r6,18
8110e6ec:	01400044 	movi	r5,1
8110e6f0:	01204534 	movhi	r4,33044
8110e6f4:	213b8f04 	addi	r4,r4,-4548
8110e6f8:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e6fc:	0001883a 	nop
8110e700:	e037883a 	mov	sp,fp
8110e704:	dfc00117 	ldw	ra,4(sp)
8110e708:	df000017 	ldw	fp,0(sp)
8110e70c:	dec00204 	addi	sp,sp,8
8110e710:	f800283a 	ret

8110e714 <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110e714:	defffe04 	addi	sp,sp,-8
8110e718:	de00012e 	bgeu	sp,et,8110e720 <vFailSenderCreate+0xc>
8110e71c:	003b68fa 	trap	3
8110e720:	dfc00115 	stw	ra,4(sp)
8110e724:	df000015 	stw	fp,0(sp)
8110e728:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate\n");
8110e72c:	d0a04f17 	ldw	r2,-32452(gp)
8110e730:	100f883a 	mov	r7,r2
8110e734:	01800484 	movi	r6,18
8110e738:	01400044 	movi	r5,1
8110e73c:	01204534 	movhi	r4,33044
8110e740:	213b9404 	addi	r4,r4,-4528
8110e744:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e748:	0001883a 	nop
8110e74c:	e037883a 	mov	sp,fp
8110e750:	dfc00117 	ldw	ra,4(sp)
8110e754:	df000017 	ldw	fp,0(sp)
8110e758:	dec00204 	addi	sp,sp,8
8110e75c:	f800283a 	ret

8110e760 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110e760:	defffe04 	addi	sp,sp,-8
8110e764:	de00012e 	bgeu	sp,et,8110e76c <vFailDeleteInitialization+0xc>
8110e768:	003b68fa 	trap	3
8110e76c:	dfc00115 	stw	ra,4(sp)
8110e770:	df000015 	stw	fp,0(sp)
8110e774:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization\n");
8110e778:	d0a04f17 	ldw	r2,-32452(gp)
8110e77c:	100f883a 	mov	r7,r2
8110e780:	01800684 	movi	r6,26
8110e784:	01400044 	movi	r5,1
8110e788:	01204534 	movhi	r4,33044
8110e78c:	213b9904 	addi	r4,r4,-4508
8110e790:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e794:	0001883a 	nop
8110e798:	e037883a 	mov	sp,fp
8110e79c:	dfc00117 	ldw	ra,4(sp)
8110e7a0:	df000017 	ldw	fp,0(sp)
8110e7a4:	dec00204 	addi	sp,sp,8
8110e7a8:	f800283a 	ret

8110e7ac <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110e7ac:	defffe04 	addi	sp,sp,-8
8110e7b0:	de00012e 	bgeu	sp,et,8110e7b8 <vFailSetCountSemaphorexBuffer32+0xc>
8110e7b4:	003b68fa 	trap	3
8110e7b8:	dfc00115 	stw	ra,4(sp)
8110e7bc:	df000015 	stw	fp,0(sp)
8110e7c0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)\n");
8110e7c4:	d0a04f17 	ldw	r2,-32452(gp)
8110e7c8:	100f883a 	mov	r7,r2
8110e7cc:	01800a04 	movi	r6,40
8110e7d0:	01400044 	movi	r5,1
8110e7d4:	01204534 	movhi	r4,33044
8110e7d8:	213ba004 	addi	r4,r4,-4480
8110e7dc:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110e7e0:	d0a04f17 	ldw	r2,-32452(gp)
8110e7e4:	100f883a 	mov	r7,r2
8110e7e8:	018008c4 	movi	r6,35
8110e7ec:	01400044 	movi	r5,1
8110e7f0:	01204534 	movhi	r4,33044
8110e7f4:	213bab04 	addi	r4,r4,-4436
8110e7f8:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e7fc:	0001883a 	nop
8110e800:	e037883a 	mov	sp,fp
8110e804:	dfc00117 	ldw	ra,4(sp)
8110e808:	df000017 	ldw	fp,0(sp)
8110e80c:	dec00204 	addi	sp,sp,8
8110e810:	f800283a 	ret

8110e814 <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110e814:	defffe04 	addi	sp,sp,-8
8110e818:	de00012e 	bgeu	sp,et,8110e820 <vFailSetCountSemaphorexBuffer64+0xc>
8110e81c:	003b68fa 	trap	3
8110e820:	dfc00115 	stw	ra,4(sp)
8110e824:	df000015 	stw	fp,0(sp)
8110e828:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)\n");
8110e82c:	d0a04f17 	ldw	r2,-32452(gp)
8110e830:	100f883a 	mov	r7,r2
8110e834:	01800a04 	movi	r6,40
8110e838:	01400044 	movi	r5,1
8110e83c:	01204534 	movhi	r4,33044
8110e840:	213bb404 	addi	r4,r4,-4400
8110e844:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110e848:	d0a04f17 	ldw	r2,-32452(gp)
8110e84c:	100f883a 	mov	r7,r2
8110e850:	018008c4 	movi	r6,35
8110e854:	01400044 	movi	r5,1
8110e858:	01204534 	movhi	r4,33044
8110e85c:	213bab04 	addi	r4,r4,-4436
8110e860:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e864:	0001883a 	nop
8110e868:	e037883a 	mov	sp,fp
8110e86c:	dfc00117 	ldw	ra,4(sp)
8110e870:	df000017 	ldw	fp,0(sp)
8110e874:	dec00204 	addi	sp,sp,8
8110e878:	f800283a 	ret

8110e87c <vFailSetCountSemaphorexBuffer128>:

/*CRITICAL*/
void vFailSetCountSemaphorexBuffer128( void )
{
8110e87c:	defffe04 	addi	sp,sp,-8
8110e880:	de00012e 	bgeu	sp,et,8110e888 <vFailSetCountSemaphorexBuffer128+0xc>
8110e884:	003b68fa 	trap	3
8110e888:	dfc00115 	stw	ra,4(sp)
8110e88c:	df000015 	stw	fp,0(sp)
8110e890:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)\n");
8110e894:	d0a04f17 	ldw	r2,-32452(gp)
8110e898:	100f883a 	mov	r7,r2
8110e89c:	01800a44 	movi	r6,41
8110e8a0:	01400044 	movi	r5,1
8110e8a4:	01204534 	movhi	r4,33044
8110e8a8:	213bbf04 	addi	r4,r4,-4356
8110e8ac:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110e8b0:	d0a04f17 	ldw	r2,-32452(gp)
8110e8b4:	100f883a 	mov	r7,r2
8110e8b8:	018008c4 	movi	r6,35
8110e8bc:	01400044 	movi	r5,1
8110e8c0:	01204534 	movhi	r4,33044
8110e8c4:	213bab04 	addi	r4,r4,-4436
8110e8c8:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e8cc:	0001883a 	nop
8110e8d0:	e037883a 	mov	sp,fp
8110e8d4:	dfc00117 	ldw	ra,4(sp)
8110e8d8:	df000017 	ldw	fp,0(sp)
8110e8dc:	dec00204 	addi	sp,sp,8
8110e8e0:	f800283a 	ret

8110e8e4 <vFailGetCountSemaphorexBuffer128>:

void vFailGetCountSemaphorexBuffer128( void )
{
8110e8e4:	defffe04 	addi	sp,sp,-8
8110e8e8:	de00012e 	bgeu	sp,et,8110e8f0 <vFailGetCountSemaphorexBuffer128+0xc>
8110e8ec:	003b68fa 	trap	3
8110e8f0:	dfc00115 	stw	ra,4(sp)
8110e8f4:	df000015 	stw	fp,0(sp)
8110e8f8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer128. (exit)\n");
8110e8fc:	d0a04f17 	ldw	r2,-32452(gp)
8110e900:	100f883a 	mov	r7,r2
8110e904:	01800a44 	movi	r6,41
8110e908:	01400044 	movi	r5,1
8110e90c:	01204534 	movhi	r4,33044
8110e910:	213bca04 	addi	r4,r4,-4312
8110e914:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8110e918:	d0a04f17 	ldw	r2,-32452(gp)
8110e91c:	100f883a 	mov	r7,r2
8110e920:	01800884 	movi	r6,34
8110e924:	01400044 	movi	r5,1
8110e928:	01204534 	movhi	r4,33044
8110e92c:	213bd504 	addi	r4,r4,-4268
8110e930:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e934:	0001883a 	nop
8110e938:	e037883a 	mov	sp,fp
8110e93c:	dfc00117 	ldw	ra,4(sp)
8110e940:	df000017 	ldw	fp,0(sp)
8110e944:	dec00204 	addi	sp,sp,8
8110e948:	f800283a 	ret

8110e94c <vFailGetCountSemaphorexBuffer64>:

void vFailGetCountSemaphorexBuffer64( void )
{
8110e94c:	defffe04 	addi	sp,sp,-8
8110e950:	de00012e 	bgeu	sp,et,8110e958 <vFailGetCountSemaphorexBuffer64+0xc>
8110e954:	003b68fa 	trap	3
8110e958:	dfc00115 	stw	ra,4(sp)
8110e95c:	df000015 	stw	fp,0(sp)
8110e960:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer64. (exit)\n");
8110e964:	d0a04f17 	ldw	r2,-32452(gp)
8110e968:	100f883a 	mov	r7,r2
8110e96c:	01800a04 	movi	r6,40
8110e970:	01400044 	movi	r5,1
8110e974:	01204534 	movhi	r4,33044
8110e978:	213bde04 	addi	r4,r4,-4232
8110e97c:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8110e980:	d0a04f17 	ldw	r2,-32452(gp)
8110e984:	100f883a 	mov	r7,r2
8110e988:	01800884 	movi	r6,34
8110e98c:	01400044 	movi	r5,1
8110e990:	01204534 	movhi	r4,33044
8110e994:	213bd504 	addi	r4,r4,-4268
8110e998:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110e99c:	0001883a 	nop
8110e9a0:	e037883a 	mov	sp,fp
8110e9a4:	dfc00117 	ldw	ra,4(sp)
8110e9a8:	df000017 	ldw	fp,0(sp)
8110e9ac:	dec00204 	addi	sp,sp,8
8110e9b0:	f800283a 	ret

8110e9b4 <vFailGetCountSemaphorexBuffer32>:

void vFailGetCountSemaphorexBuffer32( void )
{
8110e9b4:	defffe04 	addi	sp,sp,-8
8110e9b8:	de00012e 	bgeu	sp,et,8110e9c0 <vFailGetCountSemaphorexBuffer32+0xc>
8110e9bc:	003b68fa 	trap	3
8110e9c0:	dfc00115 	stw	ra,4(sp)
8110e9c4:	df000015 	stw	fp,0(sp)
8110e9c8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorexBuffer32. (exit)\n");
8110e9cc:	d0a04f17 	ldw	r2,-32452(gp)
8110e9d0:	100f883a 	mov	r7,r2
8110e9d4:	01800a04 	movi	r6,40
8110e9d8:	01400044 	movi	r5,1
8110e9dc:	01204534 	movhi	r4,33044
8110e9e0:	213be904 	addi	r4,r4,-4188
8110e9e4:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get to the semaphore.()\n");
8110e9e8:	d0a04f17 	ldw	r2,-32452(gp)
8110e9ec:	100f883a 	mov	r7,r2
8110e9f0:	01800884 	movi	r6,34
8110e9f4:	01400044 	movi	r5,1
8110e9f8:	01204534 	movhi	r4,33044
8110e9fc:	213bd504 	addi	r4,r4,-4268
8110ea00:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ea04:	0001883a 	nop
8110ea08:	e037883a 	mov	sp,fp
8110ea0c:	dfc00117 	ldw	ra,4(sp)
8110ea10:	df000017 	ldw	fp,0(sp)
8110ea14:	dec00204 	addi	sp,sp,8
8110ea18:	f800283a 	ret

8110ea1c <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110ea1c:	defffe04 	addi	sp,sp,-8
8110ea20:	de00012e 	bgeu	sp,et,8110ea28 <vFailFoundBufferRetransmission+0xc>
8110ea24:	003b68fa 	trap	3
8110ea28:	dfc00115 	stw	ra,4(sp)
8110ea2c:	df000015 	stw	fp,0(sp)
8110ea30:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"Warning: Incomming Ack id doesn't exists.\n");
8110ea34:	d0a04f17 	ldw	r2,-32452(gp)
8110ea38:	100f883a 	mov	r7,r2
8110ea3c:	01800a84 	movi	r6,42
8110ea40:	01400044 	movi	r5,1
8110ea44:	01204534 	movhi	r4,33044
8110ea48:	213bf404 	addi	r4,r4,-4144
8110ea4c:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(In Ack Handler)\n");
8110ea50:	d0a04f17 	ldw	r2,-32452(gp)
8110ea54:	100f883a 	mov	r7,r2
8110ea58:	01801204 	movi	r6,72
8110ea5c:	01400044 	movi	r5,1
8110ea60:	01204534 	movhi	r4,33044
8110ea64:	213bff04 	addi	r4,r4,-4100
8110ea68:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ea6c:	0001883a 	nop
8110ea70:	e037883a 	mov	sp,fp
8110ea74:	dfc00117 	ldw	ra,4(sp)
8110ea78:	df000017 	ldw	fp,0(sp)
8110ea7c:	dec00204 	addi	sp,sp,8
8110ea80:	f800283a 	ret

8110ea84 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110ea84:	defffe04 	addi	sp,sp,-8
8110ea88:	de00012e 	bgeu	sp,et,8110ea90 <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110ea8c:	003b68fa 	trap	3
8110ea90:	dfc00115 	stw	ra,4(sp)
8110ea94:	df000015 	stw	fp,0(sp)
8110ea98:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)\n");
8110ea9c:	d0a04f17 	ldw	r2,-32452(gp)
8110eaa0:	100f883a 	mov	r7,r2
8110eaa4:	01800b84 	movi	r6,46
8110eaa8:	01400044 	movi	r5,1
8110eaac:	01204534 	movhi	r4,33044
8110eab0:	213c1204 	addi	r4,r4,-4024
8110eab4:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110eab8:	d0a04f17 	ldw	r2,-32452(gp)
8110eabc:	100f883a 	mov	r7,r2
8110eac0:	018010c4 	movi	r6,67
8110eac4:	01400044 	movi	r5,1
8110eac8:	01204534 	movhi	r4,33044
8110eacc:	213c1e04 	addi	r4,r4,-3976
8110ead0:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ead4:	0001883a 	nop
8110ead8:	e037883a 	mov	sp,fp
8110eadc:	dfc00117 	ldw	ra,4(sp)
8110eae0:	df000017 	ldw	fp,0(sp)
8110eae4:	dec00204 	addi	sp,sp,8
8110eae8:	f800283a 	ret

8110eaec <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110eaec:	defffe04 	addi	sp,sp,-8
8110eaf0:	de00012e 	bgeu	sp,et,8110eaf8 <vFailGetxMutexPreParsedParserRxTask+0xc>
8110eaf4:	003b68fa 	trap	3
8110eaf8:	dfc00115 	stw	ra,4(sp)
8110eafc:	df000015 	stw	fp,0(sp)
8110eb00:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)\n");
8110eb04:	d0a04f17 	ldw	r2,-32452(gp)
8110eb08:	100f883a 	mov	r7,r2
8110eb0c:	01800b04 	movi	r6,44
8110eb10:	01400044 	movi	r5,1
8110eb14:	01204534 	movhi	r4,33044
8110eb18:	213c2f04 	addi	r4,r4,-3908
8110eb1c:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110eb20:	d0a04f17 	ldw	r2,-32452(gp)
8110eb24:	100f883a 	mov	r7,r2
8110eb28:	01800fc4 	movi	r6,63
8110eb2c:	01400044 	movi	r5,1
8110eb30:	01204534 	movhi	r4,33044
8110eb34:	213c3b04 	addi	r4,r4,-3860
8110eb38:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eb3c:	0001883a 	nop
8110eb40:	e037883a 	mov	sp,fp
8110eb44:	dfc00117 	ldw	ra,4(sp)
8110eb48:	df000017 	ldw	fp,0(sp)
8110eb4c:	dec00204 	addi	sp,sp,8
8110eb50:	f800283a 	ret

8110eb54 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110eb54:	defffe04 	addi	sp,sp,-8
8110eb58:	de00012e 	bgeu	sp,et,8110eb60 <vNoContentInPreParsedBuffer+0xc>
8110eb5c:	003b68fa 	trap	3
8110eb60:	dfc00115 	stw	ra,4(sp)
8110eb64:	df000015 	stw	fp,0(sp)
8110eb68:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)\n");
8110eb6c:	d0a04f17 	ldw	r2,-32452(gp)
8110eb70:	100f883a 	mov	r7,r2
8110eb74:	01800904 	movi	r6,36
8110eb78:	01400044 	movi	r5,1
8110eb7c:	01204534 	movhi	r4,33044
8110eb80:	213c4b04 	addi	r4,r4,-3796
8110eb84:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110eb88:	d0a04f17 	ldw	r2,-32452(gp)
8110eb8c:	100f883a 	mov	r7,r2
8110eb90:	01801684 	movi	r6,90
8110eb94:	01400044 	movi	r5,1
8110eb98:	01204534 	movhi	r4,33044
8110eb9c:	213c5504 	addi	r4,r4,-3756
8110eba0:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110eba4:	0001883a 	nop
8110eba8:	e037883a 	mov	sp,fp
8110ebac:	dfc00117 	ldw	ra,4(sp)
8110ebb0:	df000017 	ldw	fp,0(sp)
8110ebb4:	dec00204 	addi	sp,sp,8
8110ebb8:	f800283a 	ret

8110ebbc <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110ebbc:	defffe04 	addi	sp,sp,-8
8110ebc0:	de00012e 	bgeu	sp,et,8110ebc8 <vCouldNotSendEthConfUART+0xc>
8110ebc4:	003b68fa 	trap	3
8110ebc8:	dfc00115 	stw	ra,4(sp)
8110ebcc:	df000015 	stw	fp,0(sp)
8110ebd0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)\n");
8110ebd4:	d0a04f17 	ldw	r2,-32452(gp)
8110ebd8:	100f883a 	mov	r7,r2
8110ebdc:	01800844 	movi	r6,33
8110ebe0:	01400044 	movi	r5,1
8110ebe4:	01204534 	movhi	r4,33044
8110ebe8:	213c6c04 	addi	r4,r4,-3664
8110ebec:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110ebf0:	d0a04f17 	ldw	r2,-32452(gp)
8110ebf4:	100f883a 	mov	r7,r2
8110ebf8:	01801784 	movi	r6,94
8110ebfc:	01400044 	movi	r5,1
8110ec00:	01204534 	movhi	r4,33044
8110ec04:	213c7504 	addi	r4,r4,-3628
8110ec08:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ec0c:	0001883a 	nop
8110ec10:	e037883a 	mov	sp,fp
8110ec14:	dfc00117 	ldw	ra,4(sp)
8110ec18:	df000017 	ldw	fp,0(sp)
8110ec1c:	dec00204 	addi	sp,sp,8
8110ec20:	f800283a 	ret

8110ec24 <vFailSendNack>:

void vFailSendNack( void )
{
8110ec24:	defffe04 	addi	sp,sp,-8
8110ec28:	de00012e 	bgeu	sp,et,8110ec30 <vFailSendNack+0xc>
8110ec2c:	003b68fa 	trap	3
8110ec30:	dfc00115 	stw	ra,4(sp)
8110ec34:	df000015 	stw	fp,0(sp)
8110ec38:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)\n");
8110ec3c:	d0a04f17 	ldw	r2,-32452(gp)
8110ec40:	100f883a 	mov	r7,r2
8110ec44:	01800584 	movi	r6,22
8110ec48:	01400044 	movi	r5,1
8110ec4c:	01204534 	movhi	r4,33044
8110ec50:	213c8d04 	addi	r4,r4,-3532
8110ec54:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110ec58:	d0a04f17 	ldw	r2,-32452(gp)
8110ec5c:	100f883a 	mov	r7,r2
8110ec60:	01800a84 	movi	r6,42
8110ec64:	01400044 	movi	r5,1
8110ec68:	01204534 	movhi	r4,33044
8110ec6c:	213c9304 	addi	r4,r4,-3508
8110ec70:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ec74:	0001883a 	nop
8110ec78:	e037883a 	mov	sp,fp
8110ec7c:	dfc00117 	ldw	ra,4(sp)
8110ec80:	df000017 	ldw	fp,0(sp)
8110ec84:	dec00204 	addi	sp,sp,8
8110ec88:	f800283a 	ret

8110ec8c <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110ec8c:	defffe04 	addi	sp,sp,-8
8110ec90:	de00012e 	bgeu	sp,et,8110ec98 <vFailSetPreAckSenderBuffer+0xc>
8110ec94:	003b68fa 	trap	3
8110ec98:	dfc00115 	stw	ra,4(sp)
8110ec9c:	df000015 	stw	fp,0(sp)
8110eca0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)\n");
8110eca4:	d0a04f17 	ldw	r2,-32452(gp)
8110eca8:	100f883a 	mov	r7,r2
8110ecac:	018008c4 	movi	r6,35
8110ecb0:	01400044 	movi	r5,1
8110ecb4:	01204534 	movhi	r4,33044
8110ecb8:	213c9e04 	addi	r4,r4,-3464
8110ecbc:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110ecc0:	d0a04f17 	ldw	r2,-32452(gp)
8110ecc4:	100f883a 	mov	r7,r2
8110ecc8:	01801584 	movi	r6,86
8110eccc:	01400044 	movi	r5,1
8110ecd0:	01204534 	movhi	r4,33044
8110ecd4:	213ca704 	addi	r4,r4,-3428
8110ecd8:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ecdc:	0001883a 	nop
8110ece0:	e037883a 	mov	sp,fp
8110ece4:	dfc00117 	ldw	ra,4(sp)
8110ece8:	df000017 	ldw	fp,0(sp)
8110ecec:	dec00204 	addi	sp,sp,8
8110ecf0:	f800283a 	ret

8110ecf4 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110ecf4:	defffe04 	addi	sp,sp,-8
8110ecf8:	de00012e 	bgeu	sp,et,8110ed00 <vFailSetPreParsedBuffer+0xc>
8110ecfc:	003b68fa 	trap	3
8110ed00:	dfc00115 	stw	ra,4(sp)
8110ed04:	df000015 	stw	fp,0(sp)
8110ed08:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)\n");
8110ed0c:	d0a04f17 	ldw	r2,-32452(gp)
8110ed10:	100f883a 	mov	r7,r2
8110ed14:	01800804 	movi	r6,32
8110ed18:	01400044 	movi	r5,1
8110ed1c:	01204534 	movhi	r4,33044
8110ed20:	213cbd04 	addi	r4,r4,-3340
8110ed24:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110ed28:	d0a04f17 	ldw	r2,-32452(gp)
8110ed2c:	100f883a 	mov	r7,r2
8110ed30:	018013c4 	movi	r6,79
8110ed34:	01400044 	movi	r5,1
8110ed38:	01204534 	movhi	r4,33044
8110ed3c:	213cc604 	addi	r4,r4,-3304
8110ed40:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ed44:	0001883a 	nop
8110ed48:	e037883a 	mov	sp,fp
8110ed4c:	dfc00117 	ldw	ra,4(sp)
8110ed50:	df000017 	ldw	fp,0(sp)
8110ed54:	dec00204 	addi	sp,sp,8
8110ed58:	f800283a 	ret

8110ed5c <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110ed5c:	defffe04 	addi	sp,sp,-8
8110ed60:	de00012e 	bgeu	sp,et,8110ed68 <vFailSetPreAckReceiverBuffer+0xc>
8110ed64:	003b68fa 	trap	3
8110ed68:	dfc00115 	stw	ra,4(sp)
8110ed6c:	df000015 	stw	fp,0(sp)
8110ed70:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)\n");
8110ed74:	d0a04f17 	ldw	r2,-32452(gp)
8110ed78:	100f883a 	mov	r7,r2
8110ed7c:	01800944 	movi	r6,37
8110ed80:	01400044 	movi	r5,1
8110ed84:	01204534 	movhi	r4,33044
8110ed88:	213cda04 	addi	r4,r4,-3224
8110ed8c:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110ed90:	d0a04f17 	ldw	r2,-32452(gp)
8110ed94:	100f883a 	mov	r7,r2
8110ed98:	018015c4 	movi	r6,87
8110ed9c:	01400044 	movi	r5,1
8110eda0:	01204534 	movhi	r4,33044
8110eda4:	213ce404 	addi	r4,r4,-3184
8110eda8:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110edac:	0001883a 	nop
8110edb0:	e037883a 	mov	sp,fp
8110edb4:	dfc00117 	ldw	ra,4(sp)
8110edb8:	df000017 	ldw	fp,0(sp)
8110edbc:	dec00204 	addi	sp,sp,8
8110edc0:	f800283a 	ret

8110edc4 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110edc4:	defffe04 	addi	sp,sp,-8
8110edc8:	de00012e 	bgeu	sp,et,8110edd0 <vFailParserCommTaskCreate+0xc>
8110edcc:	003b68fa 	trap	3
8110edd0:	dfc00115 	stw	ra,4(sp)
8110edd4:	df000015 	stw	fp,0(sp)
8110edd8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate\n");
8110eddc:	d0a04f17 	ldw	r2,-32452(gp)
8110ede0:	100f883a 	mov	r7,r2
8110ede4:	01800684 	movi	r6,26
8110ede8:	01400044 	movi	r5,1
8110edec:	01204534 	movhi	r4,33044
8110edf0:	213cfa04 	addi	r4,r4,-3096
8110edf4:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110edf8:	0001883a 	nop
8110edfc:	e037883a 	mov	sp,fp
8110ee00:	dfc00117 	ldw	ra,4(sp)
8110ee04:	df000017 	ldw	fp,0(sp)
8110ee08:	dec00204 	addi	sp,sp,8
8110ee0c:	f800283a 	ret

8110ee10 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110ee10:	defffe04 	addi	sp,sp,-8
8110ee14:	de00012e 	bgeu	sp,et,8110ee1c <vFailInAckHandlerTaskCreate+0xc>
8110ee18:	003b68fa 	trap	3
8110ee1c:	dfc00115 	stw	ra,4(sp)
8110ee20:	df000015 	stw	fp,0(sp)
8110ee24:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110ee28:	d0a04f17 	ldw	r2,-32452(gp)
8110ee2c:	100f883a 	mov	r7,r2
8110ee30:	01800704 	movi	r6,28
8110ee34:	01400044 	movi	r5,1
8110ee38:	01204534 	movhi	r4,33044
8110ee3c:	213d0104 	addi	r4,r4,-3068
8110ee40:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ee44:	0001883a 	nop
8110ee48:	e037883a 	mov	sp,fp
8110ee4c:	dfc00117 	ldw	ra,4(sp)
8110ee50:	df000017 	ldw	fp,0(sp)
8110ee54:	dec00204 	addi	sp,sp,8
8110ee58:	f800283a 	ret

8110ee5c <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110ee5c:	defffe04 	addi	sp,sp,-8
8110ee60:	de00012e 	bgeu	sp,et,8110ee68 <vFailOutAckHandlerTaskCreate+0xc>
8110ee64:	003b68fa 	trap	3
8110ee68:	dfc00115 	stw	ra,4(sp)
8110ee6c:	df000015 	stw	fp,0(sp)
8110ee70:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate\n");
8110ee74:	d0a04f17 	ldw	r2,-32452(gp)
8110ee78:	100f883a 	mov	r7,r2
8110ee7c:	01800704 	movi	r6,28
8110ee80:	01400044 	movi	r5,1
8110ee84:	01204534 	movhi	r4,33044
8110ee88:	213d0104 	addi	r4,r4,-3068
8110ee8c:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ee90:	0001883a 	nop
8110ee94:	e037883a 	mov	sp,fp
8110ee98:	dfc00117 	ldw	ra,4(sp)
8110ee9c:	df000017 	ldw	fp,0(sp)
8110eea0:	dec00204 	addi	sp,sp,8
8110eea4:	f800283a 	ret

8110eea8 <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8110eea8:	defffe04 	addi	sp,sp,-8
8110eeac:	de00012e 	bgeu	sp,et,8110eeb4 <vFailCreateTimerRetransmisison+0xc>
8110eeb0:	003b68fa 	trap	3
8110eeb4:	dfc00115 	stw	ra,4(sp)
8110eeb8:	df000015 	stw	fp,0(sp)
8110eebc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison\n");
8110eec0:	d0a04f17 	ldw	r2,-32452(gp)
8110eec4:	100f883a 	mov	r7,r2
8110eec8:	018007c4 	movi	r6,31
8110eecc:	01400044 	movi	r5,1
8110eed0:	01204534 	movhi	r4,33044
8110eed4:	213d0904 	addi	r4,r4,-3036
8110eed8:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110eedc:	0001883a 	nop
8110eee0:	e037883a 	mov	sp,fp
8110eee4:	dfc00117 	ldw	ra,4(sp)
8110eee8:	df000017 	ldw	fp,0(sp)
8110eeec:	dec00204 	addi	sp,sp,8
8110eef0:	f800283a 	ret

8110eef4 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
8110eef4:	defffe04 	addi	sp,sp,-8
8110eef8:	de00012e 	bgeu	sp,et,8110ef00 <vCouldNotCheckBufferTimeOutFunction+0xc>
8110eefc:	003b68fa 	trap	3
8110ef00:	dfc00115 	stw	ra,4(sp)
8110ef04:	df000015 	stw	fp,0(sp)
8110ef08:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction\n");
8110ef0c:	d0a04f17 	ldw	r2,-32452(gp)
8110ef10:	100f883a 	mov	r7,r2
8110ef14:	01800904 	movi	r6,36
8110ef18:	01400044 	movi	r5,1
8110ef1c:	01204534 	movhi	r4,33044
8110ef20:	213d1104 	addi	r4,r4,-3004
8110ef24:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ef28:	0001883a 	nop
8110ef2c:	e037883a 	mov	sp,fp
8110ef30:	dfc00117 	ldw	ra,4(sp)
8110ef34:	df000017 	ldw	fp,0(sp)
8110ef38:	dec00204 	addi	sp,sp,8
8110ef3c:	f800283a 	ret

8110ef40 <vFailTimeoutCheckerTaskCreate>:

/* Critico */
void vFailTimeoutCheckerTaskCreate( void )
{
8110ef40:	defffe04 	addi	sp,sp,-8
8110ef44:	de00012e 	bgeu	sp,et,8110ef4c <vFailTimeoutCheckerTaskCreate+0xc>
8110ef48:	003b68fa 	trap	3
8110ef4c:	dfc00115 	stw	ra,4(sp)
8110ef50:	df000015 	stw	fp,0(sp)
8110ef54:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate (Critico)\n");
8110ef58:	d0a04f17 	ldw	r2,-32452(gp)
8110ef5c:	100f883a 	mov	r7,r2
8110ef60:	01800a04 	movi	r6,40
8110ef64:	01400044 	movi	r5,1
8110ef68:	01204534 	movhi	r4,33044
8110ef6c:	213d1b04 	addi	r4,r4,-2964
8110ef70:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110ef74:	0001883a 	nop
8110ef78:	e037883a 	mov	sp,fp
8110ef7c:	dfc00117 	ldw	ra,4(sp)
8110ef80:	df000017 	ldw	fp,0(sp)
8110ef84:	dec00204 	addi	sp,sp,8
8110ef88:	f800283a 	ret

8110ef8c <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
8110ef8c:	defffe04 	addi	sp,sp,-8
8110ef90:	de00012e 	bgeu	sp,et,8110ef98 <vFailGetBlockingSemTimeoutTask+0xc>
8110ef94:	003b68fa 	trap	3
8110ef98:	dfc00115 	stw	ra,4(sp)
8110ef9c:	df000015 	stw	fp,0(sp)
8110efa0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)\n");
8110efa4:	d0a04f17 	ldw	r2,-32452(gp)
8110efa8:	100f883a 	mov	r7,r2
8110efac:	018009c4 	movi	r6,39
8110efb0:	01400044 	movi	r5,1
8110efb4:	01204534 	movhi	r4,33044
8110efb8:	213d2604 	addi	r4,r4,-2920
8110efbc:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.\n");
8110efc0:	d0a04f17 	ldw	r2,-32452(gp)
8110efc4:	100f883a 	mov	r7,r2
8110efc8:	01800cc4 	movi	r6,51
8110efcc:	01400044 	movi	r5,1
8110efd0:	01204534 	movhi	r4,33044
8110efd4:	213d3004 	addi	r4,r4,-2880
8110efd8:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110efdc:	0001883a 	nop
8110efe0:	e037883a 	mov	sp,fp
8110efe4:	dfc00117 	ldw	ra,4(sp)
8110efe8:	df000017 	ldw	fp,0(sp)
8110efec:	dec00204 	addi	sp,sp,8
8110eff0:	f800283a 	ret

8110eff4 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
8110eff4:	defffe04 	addi	sp,sp,-8
8110eff8:	de00012e 	bgeu	sp,et,8110f000 <vFailPostBlockingSemTimeoutTask+0xc>
8110effc:	003b68fa 	trap	3
8110f000:	dfc00115 	stw	ra,4(sp)
8110f004:	df000015 	stw	fp,0(sp)
8110f008:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)\n");
8110f00c:	d0a04f17 	ldw	r2,-32452(gp)
8110f010:	100f883a 	mov	r7,r2
8110f014:	01800a04 	movi	r6,40
8110f018:	01400044 	movi	r5,1
8110f01c:	01204534 	movhi	r4,33044
8110f020:	213d3d04 	addi	r4,r4,-2828
8110f024:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.\n");
8110f028:	d0a04f17 	ldw	r2,-32452(gp)
8110f02c:	100f883a 	mov	r7,r2
8110f030:	01800c84 	movi	r6,50
8110f034:	01400044 	movi	r5,1
8110f038:	01204534 	movhi	r4,33044
8110f03c:	213d4804 	addi	r4,r4,-2784
8110f040:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f044:	0001883a 	nop
8110f048:	e037883a 	mov	sp,fp
8110f04c:	dfc00117 	ldw	ra,4(sp)
8110f050:	df000017 	ldw	fp,0(sp)
8110f054:	dec00204 	addi	sp,sp,8
8110f058:	f800283a 	ret

8110f05c <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
8110f05c:	defffe04 	addi	sp,sp,-8
8110f060:	de00012e 	bgeu	sp,et,8110f068 <vFailCouldNotRetransmitTimeoutTask+0xc>
8110f064:	003b68fa 	trap	3
8110f068:	dfc00115 	stw	ra,4(sp)
8110f06c:	df000015 	stw	fp,0(sp)
8110f070:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)\n");
8110f074:	d0a04f17 	ldw	r2,-32452(gp)
8110f078:	100f883a 	mov	r7,r2
8110f07c:	01800ac4 	movi	r6,43
8110f080:	01400044 	movi	r5,1
8110f084:	01204534 	movhi	r4,33044
8110f088:	213d5504 	addi	r4,r4,-2732
8110f08c:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.\n");
8110f090:	d0a04f17 	ldw	r2,-32452(gp)
8110f094:	100f883a 	mov	r7,r2
8110f098:	01801644 	movi	r6,89
8110f09c:	01400044 	movi	r5,1
8110f0a0:	01204534 	movhi	r4,33044
8110f0a4:	213d6004 	addi	r4,r4,-2688
8110f0a8:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f0ac:	0001883a 	nop
8110f0b0:	e037883a 	mov	sp,fp
8110f0b4:	dfc00117 	ldw	ra,4(sp)
8110f0b8:	df000017 	ldw	fp,0(sp)
8110f0bc:	dec00204 	addi	sp,sp,8
8110f0c0:	f800283a 	ret

8110f0c4 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
8110f0c4:	defffe04 	addi	sp,sp,-8
8110f0c8:	de00012e 	bgeu	sp,et,8110f0d0 <vCouldNotRetransmitB32TimeoutTask+0xc>
8110f0cc:	003b68fa 	trap	3
8110f0d0:	dfc00115 	stw	ra,4(sp)
8110f0d4:	df000015 	stw	fp,0(sp)
8110f0d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)\n");
8110f0dc:	d0a04f17 	ldw	r2,-32452(gp)
8110f0e0:	100f883a 	mov	r7,r2
8110f0e4:	01800a84 	movi	r6,42
8110f0e8:	01400044 	movi	r5,1
8110f0ec:	01204534 	movhi	r4,33044
8110f0f0:	213d7704 	addi	r4,r4,-2596
8110f0f4:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).\n");
8110f0f8:	d0a04f17 	ldw	r2,-32452(gp)
8110f0fc:	100f883a 	mov	r7,r2
8110f100:	01801444 	movi	r6,81
8110f104:	01400044 	movi	r5,1
8110f108:	01204534 	movhi	r4,33044
8110f10c:	213d8204 	addi	r4,r4,-2552
8110f110:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f114:	0001883a 	nop
8110f118:	e037883a 	mov	sp,fp
8110f11c:	dfc00117 	ldw	ra,4(sp)
8110f120:	df000017 	ldw	fp,0(sp)
8110f124:	dec00204 	addi	sp,sp,8
8110f128:	f800283a 	ret

8110f12c <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
8110f12c:	defffe04 	addi	sp,sp,-8
8110f130:	de00012e 	bgeu	sp,et,8110f138 <vCouldNotRetransmitB64TimeoutTask+0xc>
8110f134:	003b68fa 	trap	3
8110f138:	dfc00115 	stw	ra,4(sp)
8110f13c:	df000015 	stw	fp,0(sp)
8110f140:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)\n");
8110f144:	d0a04f17 	ldw	r2,-32452(gp)
8110f148:	100f883a 	mov	r7,r2
8110f14c:	01800a84 	movi	r6,42
8110f150:	01400044 	movi	r5,1
8110f154:	01204534 	movhi	r4,33044
8110f158:	213d9704 	addi	r4,r4,-2468
8110f15c:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).\n");
8110f160:	d0a04f17 	ldw	r2,-32452(gp)
8110f164:	100f883a 	mov	r7,r2
8110f168:	01801444 	movi	r6,81
8110f16c:	01400044 	movi	r5,1
8110f170:	01204534 	movhi	r4,33044
8110f174:	213da204 	addi	r4,r4,-2424
8110f178:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f17c:	0001883a 	nop
8110f180:	e037883a 	mov	sp,fp
8110f184:	dfc00117 	ldw	ra,4(sp)
8110f188:	df000017 	ldw	fp,0(sp)
8110f18c:	dec00204 	addi	sp,sp,8
8110f190:	f800283a 	ret

8110f194 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
8110f194:	defffe04 	addi	sp,sp,-8
8110f198:	de00012e 	bgeu	sp,et,8110f1a0 <vCouldNotRetransmitB128TimeoutTask+0xc>
8110f19c:	003b68fa 	trap	3
8110f1a0:	dfc00115 	stw	ra,4(sp)
8110f1a4:	df000015 	stw	fp,0(sp)
8110f1a8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)\n");
8110f1ac:	d0a04f17 	ldw	r2,-32452(gp)
8110f1b0:	100f883a 	mov	r7,r2
8110f1b4:	01800ac4 	movi	r6,43
8110f1b8:	01400044 	movi	r5,1
8110f1bc:	01204534 	movhi	r4,33044
8110f1c0:	213db704 	addi	r4,r4,-2340
8110f1c4:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).\n");
8110f1c8:	d0a04f17 	ldw	r2,-32452(gp)
8110f1cc:	100f883a 	mov	r7,r2
8110f1d0:	01801484 	movi	r6,82
8110f1d4:	01400044 	movi	r5,1
8110f1d8:	01204534 	movhi	r4,33044
8110f1dc:	213dc204 	addi	r4,r4,-2296
8110f1e0:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f1e4:	0001883a 	nop
8110f1e8:	e037883a 	mov	sp,fp
8110f1ec:	dfc00117 	ldw	ra,4(sp)
8110f1f0:	df000017 	ldw	fp,0(sp)
8110f1f4:	dec00204 	addi	sp,sp,8
8110f1f8:	f800283a 	ret

8110f1fc <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
8110f1fc:	defffe04 	addi	sp,sp,-8
8110f200:	de00012e 	bgeu	sp,et,8110f208 <vFailStartTimerRetransmission+0xc>
8110f204:	003b68fa 	trap	3
8110f208:	dfc00115 	stw	ra,4(sp)
8110f20c:	df000015 	stw	fp,0(sp)
8110f210:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)\n");
8110f214:	d0a04f17 	ldw	r2,-32452(gp)
8110f218:	100f883a 	mov	r7,r2
8110f21c:	01800984 	movi	r6,38
8110f220:	01400044 	movi	r5,1
8110f224:	01204534 	movhi	r4,33044
8110f228:	213dd704 	addi	r4,r4,-2212
8110f22c:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.\n");
8110f230:	d0a04f17 	ldw	r2,-32452(gp)
8110f234:	100f883a 	mov	r7,r2
8110f238:	01800d44 	movi	r6,53
8110f23c:	01400044 	movi	r5,1
8110f240:	01204534 	movhi	r4,33044
8110f244:	213de104 	addi	r4,r4,-2172
8110f248:	11124700 	call	81112470 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f24c:	0001883a 	nop
8110f250:	e037883a 	mov	sp,fp
8110f254:	dfc00117 	ldw	ra,4(sp)
8110f258:	df000017 	ldw	fp,0(sp)
8110f25c:	dec00204 	addi	sp,sp,8
8110f260:	f800283a 	ret

8110f264 <vCouldNotSendTurnOff>:


void vCouldNotSendTurnOff( void )
{
8110f264:	defffe04 	addi	sp,sp,-8
8110f268:	de00012e 	bgeu	sp,et,8110f270 <vCouldNotSendTurnOff+0xc>
8110f26c:	003b68fa 	trap	3
8110f270:	dfc00115 	stw	ra,4(sp)
8110f274:	df000015 	stw	fp,0(sp)
8110f278:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTurnOff. (exit)\n");
8110f27c:	d0a04f17 	ldw	r2,-32452(gp)
8110f280:	100f883a 	mov	r7,r2
8110f284:	01800744 	movi	r6,29
8110f288:	01400044 	movi	r5,1
8110f28c:	01204534 	movhi	r4,33044
8110f290:	213def04 	addi	r4,r4,-2116
8110f294:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the turn off command. \n");
8110f298:	d0a04f17 	ldw	r2,-32452(gp)
8110f29c:	100f883a 	mov	r7,r2
8110f2a0:	01800984 	movi	r6,38
8110f2a4:	01400044 	movi	r5,1
8110f2a8:	01204534 	movhi	r4,33044
8110f2ac:	213df704 	addi	r4,r4,-2084
8110f2b0:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f2b4:	0001883a 	nop
8110f2b8:	e037883a 	mov	sp,fp
8110f2bc:	dfc00117 	ldw	ra,4(sp)
8110f2c0:	df000017 	ldw	fp,0(sp)
8110f2c4:	dec00204 	addi	sp,sp,8
8110f2c8:	f800283a 	ret

8110f2cc <vCouldNotSendLog>:


void vCouldNotSendLog( void )
{
8110f2cc:	defffe04 	addi	sp,sp,-8
8110f2d0:	de00012e 	bgeu	sp,et,8110f2d8 <vCouldNotSendLog+0xc>
8110f2d4:	003b68fa 	trap	3
8110f2d8:	dfc00115 	stw	ra,4(sp)
8110f2dc:	df000015 	stw	fp,0(sp)
8110f2e0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendLog. (exit)\n");
8110f2e4:	d0a04f17 	ldw	r2,-32452(gp)
8110f2e8:	100f883a 	mov	r7,r2
8110f2ec:	01800644 	movi	r6,25
8110f2f0:	01400044 	movi	r5,1
8110f2f4:	01204534 	movhi	r4,33044
8110f2f8:	213e0104 	addi	r4,r4,-2044
8110f2fc:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send log packet to NUC. \n");
8110f300:	d0a04f17 	ldw	r2,-32452(gp)
8110f304:	100f883a 	mov	r7,r2
8110f308:	018008c4 	movi	r6,35
8110f30c:	01400044 	movi	r5,1
8110f310:	01204534 	movhi	r4,33044
8110f314:	213e0804 	addi	r4,r4,-2016
8110f318:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f31c:	0001883a 	nop
8110f320:	e037883a 	mov	sp,fp
8110f324:	dfc00117 	ldw	ra,4(sp)
8110f328:	df000017 	ldw	fp,0(sp)
8110f32c:	dec00204 	addi	sp,sp,8
8110f330:	f800283a 	ret

8110f334 <vCouldNotSendTMPusCommand>:


void vCouldNotSendTMPusCommand( const char *cData )
{
8110f334:	defffd04 	addi	sp,sp,-12
8110f338:	de00012e 	bgeu	sp,et,8110f340 <vCouldNotSendTMPusCommand+0xc>
8110f33c:	003b68fa 	trap	3
8110f340:	dfc00215 	stw	ra,8(sp)
8110f344:	df000115 	stw	fp,4(sp)
8110f348:	df000104 	addi	fp,sp,4
8110f34c:	e13fff15 	stw	r4,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendTMPusCommand. (exit)\n");
8110f350:	d0a04f17 	ldw	r2,-32452(gp)
8110f354:	100f883a 	mov	r7,r2
8110f358:	01800884 	movi	r6,34
8110f35c:	01400044 	movi	r5,1
8110f360:	01204534 	movhi	r4,33044
8110f364:	213e1104 	addi	r4,r4,-1980
8110f368:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the TM PUS command to NUC. \n");
8110f36c:	d0a04f17 	ldw	r2,-32452(gp)
8110f370:	100f883a 	mov	r7,r2
8110f374:	01800ac4 	movi	r6,43
8110f378:	01400044 	movi	r5,1
8110f37c:	01204534 	movhi	r4,33044
8110f380:	213e1a04 	addi	r4,r4,-1944
8110f384:	11124700 	call	81112470 <fwrite>
		debug(fp,"cData");
8110f388:	d0a04f17 	ldw	r2,-32452(gp)
8110f38c:	100f883a 	mov	r7,r2
8110f390:	01800144 	movi	r6,5
8110f394:	01400044 	movi	r5,1
8110f398:	01204534 	movhi	r4,33044
8110f39c:	213e2504 	addi	r4,r4,-1900
8110f3a0:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f3a4:	0001883a 	nop
8110f3a8:	e037883a 	mov	sp,fp
8110f3ac:	dfc00117 	ldw	ra,4(sp)
8110f3b0:	df000017 	ldw	fp,0(sp)
8110f3b4:	dec00204 	addi	sp,sp,8
8110f3b8:	f800283a 	ret

8110f3bc <vWarnCouldNotgetMutexRetrans128>:

/* Not send message is bad but the Simucam will continue to work. */
void vWarnCouldNotgetMutexRetrans128( void )
{
8110f3bc:	defffe04 	addi	sp,sp,-8
8110f3c0:	de00012e 	bgeu	sp,et,8110f3c8 <vWarnCouldNotgetMutexRetrans128+0xc>
8110f3c4:	003b68fa 	trap	3
8110f3c8:	dfc00115 	stw	ra,4(sp)
8110f3cc:	df000015 	stw	fp,0(sp)
8110f3d0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vWarnCouldNotgetMutexRetrans128. (exit)\n");
8110f3d4:	d0a04f17 	ldw	r2,-32452(gp)
8110f3d8:	100f883a 	mov	r7,r2
8110f3dc:	01800a04 	movi	r6,40
8110f3e0:	01400044 	movi	r5,1
8110f3e4:	01204534 	movhi	r4,33044
8110f3e8:	213e2704 	addi	r4,r4,-1892
8110f3ec:	11124700 	call	81112470 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Warning: Could not get the mutex for the retransmission. The message will be lost.\n");
8110f3f0:	d0a04f17 	ldw	r2,-32452(gp)
8110f3f4:	100f883a 	mov	r7,r2
8110f3f8:	018014c4 	movi	r6,83
8110f3fc:	01400044 	movi	r5,1
8110f400:	01204534 	movhi	r4,33044
8110f404:	213e3204 	addi	r4,r4,-1848
8110f408:	11124700 	call	81112470 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110f40c:	0001883a 	nop
8110f410:	e037883a 	mov	sp,fp
8110f414:	dfc00117 	ldw	ra,4(sp)
8110f418:	df000017 	ldw	fp,0(sp)
8110f41c:	dec00204 	addi	sp,sp,8
8110f420:	f800283a 	ret

8110f424 <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110f424:	defffd04 	addi	sp,sp,-12
8110f428:	de00012e 	bgeu	sp,et,8110f430 <vNFeeNotInUse+0xc>
8110f42c:	003b68fa 	trap	3
8110f430:	df000215 	stw	fp,8(sp)
8110f434:	df000204 	addi	fp,sp,8
8110f438:	e13ffe15 	stw	r4,-8(fp)
8110f43c:	2805883a 	mov	r2,r5
8110f440:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
8110f444:	e0bffe17 	ldw	r2,-8(fp)
8110f448:	e0ffff03 	ldbu	r3,-4(fp)
8110f44c:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
8110f450:	e0bffe17 	ldw	r2,-8(fp)
8110f454:	10002015 	stw	zero,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110f458:	e0bffe17 	ldw	r2,-8(fp)
8110f45c:	10002115 	stw	zero,132(r2)
}
8110f460:	0001883a 	nop
8110f464:	e037883a 	mov	sp,fp
8110f468:	df000017 	ldw	fp,0(sp)
8110f46c:	dec00104 	addi	sp,sp,4
8110f470:	f800283a 	ret

8110f474 <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110f474:	defffb04 	addi	sp,sp,-20
8110f478:	de00012e 	bgeu	sp,et,8110f480 <vNFeeStructureInit+0xc>
8110f47c:	003b68fa 	trap	3
8110f480:	dfc00415 	stw	ra,16(sp)
8110f484:	df000315 	stw	fp,12(sp)
8110f488:	df000304 	addi	fp,sp,12
8110f48c:	e13ffe15 	stw	r4,-8(fp)
8110f490:	2805883a 	mov	r2,r5
8110f494:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
8110f498:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
8110f49c:	e0bffe17 	ldw	r2,-8(fp)
8110f4a0:	e0ffff03 	ldbu	r3,-4(fp)
8110f4a4:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
8110f4a8:	e0bffe17 	ldw	r2,-8(fp)
8110f4ac:	10802804 	addi	r2,r2,160
8110f4b0:	1009883a 	mov	r4,r2
8110f4b4:	110c0700 	call	8110c070 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
8110f4b8:	e13ffe17 	ldw	r4,-8(fp)
8110f4bc:	110f54c0 	call	8110f54c <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
8110f4c0:	e0bffe17 	ldw	r2,-8(fp)
8110f4c4:	00c00044 	movi	r3,1
8110f4c8:	10c02015 	stw	r3,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110f4cc:	e0bffe17 	ldw	r2,-8(fp)
8110f4d0:	10002115 	stw	zero,132(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
8110f4d4:	e0bffe17 	ldw	r2,-8(fp)
8110f4d8:	10002615 	stw	zero,152(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110f4dc:	e03ffd05 	stb	zero,-12(fp)
8110f4e0:	00000906 	br	8110f508 <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
8110f4e4:	e0bffd03 	ldbu	r2,-12(fp)
8110f4e8:	e0fffe17 	ldw	r3,-8(fp)
8110f4ec:	1885883a 	add	r2,r3,r2
8110f4f0:	10802504 	addi	r2,r2,148
8110f4f4:	e0fffd03 	ldbu	r3,-12(fp)
8110f4f8:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110f4fc:	e0bffd03 	ldbu	r2,-12(fp)
8110f500:	10800044 	addi	r2,r2,1
8110f504:	e0bffd05 	stb	r2,-12(fp)
8110f508:	e0bffd03 	ldbu	r2,-12(fp)
8110f50c:	10800130 	cmpltui	r2,r2,4
8110f510:	103ff41e 	bne	r2,zero,8110f4e4 <__reset+0xfb0ef4e4>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
8110f514:	e0bffe17 	ldw	r2,-8(fp)
8110f518:	10002715 	stw	zero,156(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
8110f51c:	e0bffe17 	ldw	r2,-8(fp)
8110f520:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bLogging = FALSE;
8110f524:	e0bffe17 	ldw	r2,-8(fp)
8110f528:	10002215 	stw	zero,136(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
8110f52c:	e0bffe17 	ldw	r2,-8(fp)
8110f530:	10002415 	stw	zero,144(r2)

}
8110f534:	0001883a 	nop
8110f538:	e037883a 	mov	sp,fp
8110f53c:	dfc00117 	ldw	ra,4(sp)
8110f540:	df000017 	ldw	fp,0(sp)
8110f544:	dec00204 	addi	sp,sp,8
8110f548:	f800283a 	ret

8110f54c <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
8110f54c:	defff404 	addi	sp,sp,-48
8110f550:	de00012e 	bgeu	sp,et,8110f558 <vUpdateMemMapFEE+0xc>
8110f554:	003b68fa 	trap	3
8110f558:	df000b15 	stw	fp,44(sp)
8110f55c:	df000b04 	addi	fp,sp,44
8110f560:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
8110f564:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
8110f568:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
8110f56c:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
8110f570:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
8110f574:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
8110f578:	e03ff615 	stw	zero,-40(fp)
    unsigned char ucPixelsInLastBlockL = 0;
8110f57c:	e03ff705 	stb	zero,-36(fp)
    unsigned char ucShiftsL = 0;
8110f580:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
8110f584:	e03ff745 	stb	zero,-35(fp)
    unsigned long ulLastOffset = 0;
8110f588:	e03ff815 	stw	zero,-32(fp)
    unsigned long ulStepHalfCCD = 0;
8110f58c:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
8110f590:	e17fff17 	ldw	r5,-4(fp)
8110f594:	01035a34 	movhi	r4,3432
8110f598:	21348c04 	addi	r4,r4,-11728
8110f59c:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
8110f5a0:	e13fff17 	ldw	r4,-4(fp)
8110f5a4:	21000003 	ldbu	r4,0(r4)
8110f5a8:	21403fcc 	andi	r5,r4,255
8110f5ac:	01035a34 	movhi	r4,3432
8110f5b0:	21348c04 	addi	r4,r4,-11728
8110f5b4:	2909383a 	mul	r4,r5,r4
8110f5b8:	200b883a 	mov	r5,r4
8110f5bc:	e13fff17 	ldw	r4,-4(fp)
8110f5c0:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
8110f5c4:	e13fff17 	ldw	r4,-4(fp)
8110f5c8:	21400117 	ldw	r5,4(r4)
8110f5cc:	01033234 	movhi	r4,3272
8110f5d0:	21348c04 	addi	r4,r4,-11728
8110f5d4:	290b883a 	add	r5,r5,r4
8110f5d8:	e13fff17 	ldw	r4,-4(fp)
8110f5dc:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110f5e0:	e13fff17 	ldw	r4,-4(fp)
8110f5e4:	21002a0b 	ldhu	r4,168(r4)
8110f5e8:	217fffcc 	andi	r5,r4,65535
8110f5ec:	e13fff17 	ldw	r4,-4(fp)
8110f5f0:	2100290b 	ldhu	r4,164(r4)
8110f5f4:	213fffcc 	andi	r4,r4,65535
8110f5f8:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
8110f5fc:	e13fff17 	ldw	r4,-4(fp)
8110f600:	2100298b 	ldhu	r4,166(r4)
8110f604:	21bfffcc 	andi	r6,r4,65535
8110f608:	e13fff17 	ldw	r4,-4(fp)
8110f60c:	2100288b 	ldhu	r4,162(r4)
8110f610:	213fffcc 	andi	r4,r4,65535
8110f614:	310d883a 	add	r6,r6,r4
8110f618:	e13fff17 	ldw	r4,-4(fp)
8110f61c:	2100280b 	ldhu	r4,160(r4)
8110f620:	213fffcc 	andi	r4,r4,65535
8110f624:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110f628:	2909383a 	mul	r4,r5,r4
8110f62c:	e13ff915 	stw	r4,-28(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
8110f630:	e13ff917 	ldw	r4,-28(fp)
8110f634:	2109883a 	add	r4,r4,r4
8110f638:	200b883a 	mov	r5,r4
8110f63c:	e13fff17 	ldw	r4,-4(fp)
8110f640:	2140048d 	sth	r5,18(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
8110f644:	e13fff17 	ldw	r4,-4(fp)
8110f648:	2100048b 	ldhu	r4,18(r4)
8110f64c:	213fffcc 	andi	r4,r4,65535
8110f650:	2008d0fa 	srli	r4,r4,3
8110f654:	213fffcc 	andi	r4,r4,65535
8110f658:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
8110f65c:	e13fff17 	ldw	r4,-4(fp)
8110f660:	2100048b 	ldhu	r4,18(r4)
8110f664:	213fffcc 	andi	r4,r4,65535
8110f668:	210001cc 	andi	r4,r4,7
8110f66c:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
8110f670:	e13ffb17 	ldw	r4,-20(fp)
8110f674:	20001326 	beq	r4,zero,8110f6c4 <vUpdateMemMapFEE+0x178>
        ulMemLinesL = ulMemLinesL + 1;
8110f678:	e13ff517 	ldw	r4,-44(fp)
8110f67c:	21000044 	addi	r4,r4,1
8110f680:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
8110f684:	e13fff17 	ldw	r4,-4(fp)
8110f688:	2100048b 	ldhu	r4,18(r4)
8110f68c:	e17ffb17 	ldw	r5,-20(fp)
8110f690:	2149c83a 	sub	r4,r4,r5
8110f694:	21000204 	addi	r4,r4,8
8110f698:	200b883a 	mov	r5,r4
8110f69c:	e13fff17 	ldw	r4,-4(fp)
8110f6a0:	2140048d 	sth	r5,18(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
8110f6a4:	e13ffb17 	ldw	r4,-20(fp)
8110f6a8:	200b883a 	mov	r5,r4
8110f6ac:	01000204 	movi	r4,8
8110f6b0:	2149c83a 	sub	r4,r4,r5
8110f6b4:	200b883a 	mov	r5,r4
8110f6b8:	e13fff17 	ldw	r4,-4(fp)
8110f6bc:	21400505 	stb	r5,20(r4)
8110f6c0:	00000206 	br	8110f6cc <vUpdateMemMapFEE+0x180>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
8110f6c4:	e13fff17 	ldw	r4,-4(fp)
8110f6c8:	20000505 	stb	zero,20(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
8110f6cc:	e13ff517 	ldw	r4,-44(fp)
8110f6d0:	2008d13a 	srli	r4,r4,4
8110f6d4:	e13ff615 	stw	r4,-40(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
8110f6d8:	e13ff517 	ldw	r4,-44(fp)
8110f6dc:	210003cc 	andi	r4,r4,15
8110f6e0:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
8110f6e4:	e13ffc17 	ldw	r4,-16(fp)
8110f6e8:	20000b26 	beq	r4,zero,8110f718 <vUpdateMemMapFEE+0x1cc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
8110f6ec:	e13ff617 	ldw	r4,-40(fp)
8110f6f0:	21000044 	addi	r4,r4,1
8110f6f4:	e13ff615 	stw	r4,-40(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
8110f6f8:	e17ff517 	ldw	r5,-44(fp)
8110f6fc:	e13ffc17 	ldw	r4,-16(fp)
8110f700:	290bc83a 	sub	r5,r5,r4
8110f704:	e13ff617 	ldw	r4,-40(fp)
8110f708:	2909883a 	add	r4,r5,r4
8110f70c:	21000404 	addi	r4,r4,16
8110f710:	e13ffa15 	stw	r4,-24(fp)
8110f714:	00000406 	br	8110f728 <vUpdateMemMapFEE+0x1dc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
8110f718:	e17ff517 	ldw	r5,-44(fp)
8110f71c:	e13ff617 	ldw	r4,-40(fp)
8110f720:	2909883a 	add	r4,r5,r4
8110f724:	e13ffa15 	stw	r4,-24(fp)
    }

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
8110f728:	e13ffb17 	ldw	r4,-20(fp)
8110f72c:	20000926 	beq	r4,zero,8110f754 <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
8110f730:	e13ffc17 	ldw	r4,-16(fp)
8110f734:	2109883a 	add	r4,r4,r4
8110f738:	2109883a 	add	r4,r4,r4
8110f73c:	200b883a 	mov	r5,r4
8110f740:	e13ffb17 	ldw	r4,-20(fp)
8110f744:	2008d07a 	srli	r4,r4,1
8110f748:	2909883a 	add	r4,r5,r4
8110f74c:	e13ff705 	stb	r4,-36(fp)
8110f750:	00000406 	br	8110f764 <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
8110f754:	e13ffc17 	ldw	r4,-16(fp)
8110f758:	2109883a 	add	r4,r4,r4
8110f75c:	2109883a 	add	r4,r4,r4
8110f760:	e13ff705 	stb	r4,-36(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
8110f764:	e13ff703 	ldbu	r4,-36(fp)
8110f768:	01401004 	movi	r5,64
8110f76c:	2909c83a 	sub	r4,r5,r4
8110f770:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
8110f774:	e13ffd03 	ldbu	r4,-12(fp)
8110f778:	217ff804 	addi	r5,r4,-32
8110f77c:	28000416 	blt	r5,zero,8110f790 <vUpdateMemMapFEE+0x244>
8110f780:	013fffc4 	movi	r4,-1
8110f784:	2144d83a 	srl	r2,r4,r5
8110f788:	0007883a 	mov	r3,zero
8110f78c:	00000a06 	br	8110f7b8 <vUpdateMemMapFEE+0x26c>
8110f790:	017fffc4 	movi	r5,-1
8110f794:	280c907a 	slli	r6,r5,1
8110f798:	014007c4 	movi	r5,31
8110f79c:	290bc83a 	sub	r5,r5,r4
8110f7a0:	314a983a 	sll	r5,r6,r5
8110f7a4:	01bfffc4 	movi	r6,-1
8110f7a8:	3104d83a 	srl	r2,r6,r4
8110f7ac:	2884b03a 	or	r2,r5,r2
8110f7b0:	017fffc4 	movi	r5,-1
8110f7b4:	2906d83a 	srl	r3,r5,r4
8110f7b8:	e13fff17 	ldw	r4,-4(fp)
8110f7bc:	20800615 	stw	r2,24(r4)
8110f7c0:	20c00715 	stw	r3,28(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
8110f7c4:	e0bff617 	ldw	r2,-40(fp)
8110f7c8:	1007883a 	mov	r3,r2
8110f7cc:	e0bfff17 	ldw	r2,-4(fp)
8110f7d0:	10c0040d 	sth	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
8110f7d4:	e0bfff17 	ldw	r2,-4(fp)
8110f7d8:	10c00117 	ldw	r3,4(r2)
8110f7dc:	008004b4 	movhi	r2,18
8110f7e0:	10a40004 	addi	r2,r2,-28672
8110f7e4:	1885883a 	add	r2,r3,r2
8110f7e8:	e0bff815 	stw	r2,-32(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
8110f7ec:	e0bfff17 	ldw	r2,-4(fp)
8110f7f0:	1080048b 	ldhu	r2,18(r2)
8110f7f4:	10ffffcc 	andi	r3,r2,65535
8110f7f8:	008000b4 	movhi	r2,2
8110f7fc:	10a40004 	addi	r2,r2,-28672
8110f800:	1885883a 	add	r2,r3,r2
8110f804:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110f808:	e03ff745 	stb	zero,-35(fp)
8110f80c:	00001906 	br	8110f874 <vUpdateMemMapFEE+0x328>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
8110f810:	e0bff743 	ldbu	r2,-35(fp)
8110f814:	e0ffff17 	ldw	r3,-4(fp)
8110f818:	10800624 	muli	r2,r2,24
8110f81c:	1885883a 	add	r2,r3,r2
8110f820:	10800804 	addi	r2,r2,32
8110f824:	e0fff817 	ldw	r3,-32(fp)
8110f828:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110f82c:	e0fff817 	ldw	r3,-32(fp)
8110f830:	e0bffe17 	ldw	r2,-8(fp)
8110f834:	1885883a 	add	r2,r3,r2
8110f838:	e0bff815 	stw	r2,-32(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
8110f83c:	e0bff743 	ldbu	r2,-35(fp)
8110f840:	e0ffff17 	ldw	r3,-4(fp)
8110f844:	10800624 	muli	r2,r2,24
8110f848:	1885883a 	add	r2,r3,r2
8110f84c:	10800b04 	addi	r2,r2,44
8110f850:	e0fff817 	ldw	r3,-32(fp)
8110f854:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110f858:	e0fff817 	ldw	r3,-32(fp)
8110f85c:	e0bffe17 	ldw	r2,-8(fp)
8110f860:	1885883a 	add	r2,r3,r2
8110f864:	e0bff815 	stw	r2,-32(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110f868:	e0bff743 	ldbu	r2,-35(fp)
8110f86c:	10800044 	addi	r2,r2,1
8110f870:	e0bff745 	stb	r2,-35(fp)
8110f874:	e0bff743 	ldbu	r2,-35(fp)
8110f878:	10800130 	cmpltui	r2,r2,4
8110f87c:	103fe41e 	bne	r2,zero,8110f810 <__reset+0xfb0ef810>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
8110f880:	0001883a 	nop
8110f884:	e037883a 	mov	sp,fp
8110f888:	df000017 	ldw	fp,0(sp)
8110f88c:	dec00104 	addi	sp,sp,4
8110f890:	f800283a 	ret

8110f894 <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
8110f894:	defffe04 	addi	sp,sp,-8
8110f898:	de00012e 	bgeu	sp,et,8110f8a0 <vFeeSpwRMAPLoadDefault+0xc>
8110f89c:	003b68fa 	trap	3
8110f8a0:	df000115 	stw	fp,4(sp)
8110f8a4:	df000104 	addi	fp,sp,4
8110f8a8:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
8110f8ac:	0001883a 	nop
8110f8b0:	e037883a 	mov	sp,fp
8110f8b4:	df000017 	ldw	fp,0(sp)
8110f8b8:	dec00104 	addi	sp,sp,4
8110f8bc:	f800283a 	ret

8110f8c0 <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
8110f8c0:	defffe04 	addi	sp,sp,-8
8110f8c4:	de00012e 	bgeu	sp,et,8110f8cc <vFeeSpwRMAPChangeConfig+0xc>
8110f8c8:	003b68fa 	trap	3
8110f8cc:	df000115 	stw	fp,4(sp)
8110f8d0:	df000104 	addi	fp,sp,4
8110f8d4:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
8110f8d8:	0001883a 	nop
8110f8dc:	e037883a 	mov	sp,fp
8110f8e0:	df000017 	ldw	fp,0(sp)
8110f8e4:	dec00104 	addi	sp,sp,4
8110f8e8:	f800283a 	ret

8110f8ec <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
8110f8ec:	defffe04 	addi	sp,sp,-8
8110f8f0:	de00012e 	bgeu	sp,et,8110f8f8 <vFeeSpwRMAPChangeDefault+0xc>
8110f8f4:	003b68fa 	trap	3
8110f8f8:	df000115 	stw	fp,4(sp)
8110f8fc:	df000104 	addi	fp,sp,4
8110f900:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
8110f904:	0001883a 	nop
8110f908:	e037883a 	mov	sp,fp
8110f90c:	df000017 	ldw	fp,0(sp)
8110f910:	dec00104 	addi	sp,sp,4
8110f914:	f800283a 	ret

8110f918 <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
8110f918:	defffe04 	addi	sp,sp,-8
8110f91c:	de00012e 	bgeu	sp,et,8110f924 <cFeeSpwChannelEnable+0xc>
8110f920:	003b68fa 	trap	3
8110f924:	df000115 	stw	fp,4(sp)
8110f928:	df000104 	addi	fp,sp,4
8110f92c:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110f930:	0001883a 	nop
8110f934:	e037883a 	mov	sp,fp
8110f938:	df000017 	ldw	fp,0(sp)
8110f93c:	dec00104 	addi	sp,sp,4
8110f940:	f800283a 	ret

8110f944 <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
8110f944:	defffe04 	addi	sp,sp,-8
8110f948:	de00012e 	bgeu	sp,et,8110f950 <cFeeSpwChannelDisable+0xc>
8110f94c:	003b68fa 	trap	3
8110f950:	df000115 	stw	fp,4(sp)
8110f954:	df000104 	addi	fp,sp,4
8110f958:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110f95c:	0001883a 	nop
8110f960:	e037883a 	mov	sp,fp
8110f964:	df000017 	ldw	fp,0(sp)
8110f968:	dec00104 	addi	sp,sp,4
8110f96c:	f800283a 	ret

8110f970 <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
8110f970:	defffe04 	addi	sp,sp,-8
8110f974:	de00012e 	bgeu	sp,et,8110f97c <cFeeRMAPDump+0xc>
8110f978:	003b68fa 	trap	3
8110f97c:	df000115 	stw	fp,4(sp)
8110f980:	df000104 	addi	fp,sp,4
8110f984:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
8110f988:	0001883a 	nop
8110f98c:	e037883a 	mov	sp,fp
8110f990:	df000017 	ldw	fp,0(sp)
8110f994:	dec00104 	addi	sp,sp,4
8110f998:	f800283a 	ret

8110f99c <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
8110f99c:	defffe04 	addi	sp,sp,-8
8110f9a0:	de00012e 	bgeu	sp,et,8110f9a8 <cFeeRMAPEchoingEnable+0xc>
8110f9a4:	003b68fa 	trap	3
8110f9a8:	df000115 	stw	fp,4(sp)
8110f9ac:	df000104 	addi	fp,sp,4
8110f9b0:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
8110f9b4:	e0bfff17 	ldw	r2,-4(fp)
8110f9b8:	00c00044 	movi	r3,1
8110f9bc:	10c02315 	stw	r3,140(r2)
}
8110f9c0:	0001883a 	nop
8110f9c4:	e037883a 	mov	sp,fp
8110f9c8:	df000017 	ldw	fp,0(sp)
8110f9cc:	dec00104 	addi	sp,sp,4
8110f9d0:	f800283a 	ret

8110f9d4 <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
8110f9d4:	defffe04 	addi	sp,sp,-8
8110f9d8:	de00012e 	bgeu	sp,et,8110f9e0 <cFeeRMAPEchoingDisable+0xc>
8110f9dc:	003b68fa 	trap	3
8110f9e0:	df000115 	stw	fp,4(sp)
8110f9e4:	df000104 	addi	fp,sp,4
8110f9e8:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
8110f9ec:	e0bfff17 	ldw	r2,-4(fp)
8110f9f0:	10002315 	stw	zero,140(r2)
}
8110f9f4:	0001883a 	nop
8110f9f8:	e037883a 	mov	sp,fp
8110f9fc:	df000017 	ldw	fp,0(sp)
8110fa00:	dec00104 	addi	sp,sp,4
8110fa04:	f800283a 	ret

8110fa08 <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
8110fa08:	defffe04 	addi	sp,sp,-8
8110fa0c:	de00012e 	bgeu	sp,et,8110fa14 <cFeeRMAPLogEnable+0xc>
8110fa10:	003b68fa 	trap	3
8110fa14:	df000115 	stw	fp,4(sp)
8110fa18:	df000104 	addi	fp,sp,4
8110fa1c:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
8110fa20:	e0bfff17 	ldw	r2,-4(fp)
8110fa24:	00c00044 	movi	r3,1
8110fa28:	10c02215 	stw	r3,136(r2)
}
8110fa2c:	0001883a 	nop
8110fa30:	e037883a 	mov	sp,fp
8110fa34:	df000017 	ldw	fp,0(sp)
8110fa38:	dec00104 	addi	sp,sp,4
8110fa3c:	f800283a 	ret

8110fa40 <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
8110fa40:	defffe04 	addi	sp,sp,-8
8110fa44:	de00012e 	bgeu	sp,et,8110fa4c <cFeeRMAPLogDisable+0xc>
8110fa48:	003b68fa 	trap	3
8110fa4c:	df000115 	stw	fp,4(sp)
8110fa50:	df000104 	addi	fp,sp,4
8110fa54:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
8110fa58:	e0bfff17 	ldw	r2,-4(fp)
8110fa5c:	10002215 	stw	zero,136(r2)
}
8110fa60:	0001883a 	nop
8110fa64:	e037883a 	mov	sp,fp
8110fa68:	df000017 	ldw	fp,0(sp)
8110fa6c:	dec00104 	addi	sp,sp,4
8110fa70:	f800283a 	ret

8110fa74 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110fa74:	defffe04 	addi	sp,sp,-8
8110fa78:	de00012e 	bgeu	sp,et,8110fa80 <vInitSimucamBasicHW+0xc>
8110fa7c:	003b68fa 	trap	3
8110fa80:	dfc00115 	stw	ra,4(sp)
8110fa84:	df000015 	stw	fp,0(sp)
8110fa88:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110fa8c:	01403fc4 	movi	r5,255
8110fa90:	0009883a 	mov	r4,zero
8110fa94:	11061440 	call	81106144 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110fa98:	01400834 	movhi	r5,32
8110fa9c:	297fffc4 	addi	r5,r5,-1
8110faa0:	0009883a 	mov	r4,zero
8110faa4:	11061c40 	call	811061c4 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110faa8:	01400074 	movhi	r5,1
8110faac:	01000044 	movi	r4,1
8110fab0:	11061c40 	call	811061c4 <bSetPainelLeds>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110fab4:	0009883a 	mov	r4,zero
8110fab8:	11077a00 	call	811077a0 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110fabc:	0009883a 	mov	r4,zero
8110fac0:	11078700 	call	81107870 <bSSDisplayUpdate>

}
8110fac4:	0001883a 	nop
8110fac8:	e037883a 	mov	sp,fp
8110facc:	dfc00117 	ldw	ra,4(sp)
8110fad0:	df000017 	ldw	fp,0(sp)
8110fad4:	dec00204 	addi	sp,sp,8
8110fad8:	f800283a 	ret

8110fadc <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110fadc:	defffd04 	addi	sp,sp,-12
8110fae0:	de00012e 	bgeu	sp,et,8110fae8 <bLogWriteSDCard+0xc>
8110fae4:	003b68fa 	trap	3
8110fae8:	df000215 	stw	fp,8(sp)
8110faec:	df000204 	addi	fp,sp,8
8110faf0:	e13ffe15 	stw	r4,-8(fp)
8110faf4:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110faf8:	00800044 	movi	r2,1
}
8110fafc:	e037883a 	mov	sp,fp
8110fb00:	df000017 	ldw	fp,0(sp)
8110fb04:	dec00104 	addi	sp,sp,4
8110fb08:	f800283a 	ret

8110fb0c <vLogWriteNUC>:

/* Prefer to use directly vSendLog, if there's any error use this function */
void vLogWriteNUC ( const char * cDataIn )
{
8110fb0c:	deffe004 	addi	sp,sp,-128
8110fb10:	de00012e 	bgeu	sp,et,8110fb18 <vLogWriteNUC+0xc>
8110fb14:	003b68fa 	trap	3
8110fb18:	dfc01f15 	stw	ra,124(sp)
8110fb1c:	df001e15 	stw	fp,120(sp)
8110fb20:	df001e04 	addi	fp,sp,120
8110fb24:	e13fff15 	stw	r4,-4(fp)
	char cTemp[114] = "";
8110fb28:	e03fe215 	stw	zero,-120(fp)
8110fb2c:	e0bfe304 	addi	r2,fp,-116
8110fb30:	00c01b84 	movi	r3,110
8110fb34:	180d883a 	mov	r6,r3
8110fb38:	000b883a 	mov	r5,zero
8110fb3c:	1009883a 	mov	r4,r2
8110fb40:	1112fd40 	call	81112fd4 <memset>
	memset(cTemp,0,114);
8110fb44:	01801c84 	movi	r6,114
8110fb48:	000b883a 	mov	r5,zero
8110fb4c:	e13fe204 	addi	r4,fp,-120
8110fb50:	1112fd40 	call	81112fd4 <memset>
	memcpy(cTemp,cDataIn, min_sim( strlen(cDataIn), 113 ) ); /* 113 to let a zero terminator in the worst case (truc the message) */
8110fb54:	e13fff17 	ldw	r4,-4(fp)
8110fb58:	11139780 	call	81113978 <strlen>
8110fb5c:	10801c68 	cmpgeui	r2,r2,113
8110fb60:	1000031e 	bne	r2,zero,8110fb70 <vLogWriteNUC+0x64>
8110fb64:	e13fff17 	ldw	r4,-4(fp)
8110fb68:	11139780 	call	81113978 <strlen>
8110fb6c:	00000106 	br	8110fb74 <vLogWriteNUC+0x68>
8110fb70:	00801c44 	movi	r2,113
8110fb74:	100d883a 	mov	r6,r2
8110fb78:	e17fff17 	ldw	r5,-4(fp)
8110fb7c:	e13fe204 	addi	r4,fp,-120
8110fb80:	1112e840 	call	81112e84 <memcpy>
	vSendLog ( cDataIn );
8110fb84:	e13fff17 	ldw	r4,-4(fp)
8110fb88:	110cdf00 	call	8110cdf0 <vSendLog>
}
8110fb8c:	0001883a 	nop
8110fb90:	e037883a 	mov	sp,fp
8110fb94:	dfc00117 	ldw	ra,4(sp)
8110fb98:	df000017 	ldw	fp,0(sp)
8110fb9c:	dec00204 	addi	sp,sp,8
8110fba0:	f800283a 	ret

8110fba4 <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
8110fba4:	defffc04 	addi	sp,sp,-16
8110fba8:	de00012e 	bgeu	sp,et,8110fbb0 <vSimucamStructureInit+0xc>
8110fbac:	003b68fa 	trap	3
8110fbb0:	dfc00315 	stw	ra,12(sp)
8110fbb4:	df000215 	stw	fp,8(sp)
8110fbb8:	df000204 	addi	fp,sp,8
8110fbbc:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
8110fbc0:	e03ffe05 	stb	zero,-8(fp)

    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
8110fbc4:	e0bfff17 	ldw	r2,-4(fp)
8110fbc8:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
8110fbcc:	e0bfff17 	ldw	r2,-4(fp)
8110fbd0:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
8110fbd4:	e13fff17 	ldw	r4,-4(fp)
8110fbd8:	110fd400 	call	8110fd40 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
8110fbdc:	e13fff17 	ldw	r4,-4(fp)
8110fbe0:	110fde40 	call	8110fde4 <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
8110fbe4:	e13fff17 	ldw	r4,-4(fp)
8110fbe8:	110fe8c0 	call	8110fe8c <vLoadDefaultSyncSource>
    /* Reset TimeCode */
    vResetTimeCode( xMeb );
8110fbec:	e13fff17 	ldw	r4,-4(fp)
8110fbf0:	110ff6c0 	call	8110ff6c <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xMeb );
8110fbf4:	e13fff17 	ldw	r4,-4(fp)
8110fbf8:	11100440 	call	81110044 <vLoadDefaultIdNFEEMaster>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
8110fbfc:	e13fff17 	ldw	r4,-4(fp)
8110fc00:	110ffa00 	call	8110ffa0 <vLoadDefaultAutoResetSync>

    // LoadNumberOfNFeesSDCard();
    /* todo: Load from SDCard for now is Hardcoded for 4 instances of NFEE */
    xMeb->ucNofFeesInUse = 2;
8110fc04:	e0bfff17 	ldw	r2,-4(fp)
8110fc08:	00c00084 	movi	r3,2
8110fc0c:	10c00205 	stb	r3,8(r2)

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
8110fc10:	e0bfff17 	ldw	r2,-4(fp)
8110fc14:	10800017 	ldw	r2,0(r2)
8110fc18:	1000391e 	bne	r2,zero,8110fd00 <vSimucamStructureInit+0x15c>
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110fc1c:	e03ffe05 	stb	zero,-8(fp)
8110fc20:	00003306 	br	8110fcf0 <vSimucamStructureInit+0x14c>
            if ( ucIL < xMeb->ucNofFeesInUse ) {
8110fc24:	e0bfff17 	ldw	r2,-4(fp)
8110fc28:	10800203 	ldbu	r2,8(r2)
8110fc2c:	10803fcc 	andi	r2,r2,255
8110fc30:	e0fffe03 	ldbu	r3,-8(fp)
8110fc34:	18800a2e 	bgeu	r3,r2,8110fc60 <vSimucamStructureInit+0xbc>
                vNFeeStructureInit( &xMeb->xNfee[ ucIL ], ucIL);
8110fc38:	e0bffe03 	ldbu	r2,-8(fp)
8110fc3c:	10802b24 	muli	r2,r2,172
8110fc40:	10800304 	addi	r2,r2,12
8110fc44:	e0ffff17 	ldw	r3,-4(fp)
8110fc48:	1885883a 	add	r2,r3,r2
8110fc4c:	e0fffe03 	ldbu	r3,-8(fp)
8110fc50:	180b883a 	mov	r5,r3
8110fc54:	1009883a 	mov	r4,r2
8110fc58:	110f4740 	call	8110f474 <vNFeeStructureInit>
8110fc5c:	00000906 	br	8110fc84 <vSimucamStructureInit+0xe0>
            } else {
                vNFeeNotInUse( &xMeb->xNfee[ ucIL ], ucIL);
8110fc60:	e0bffe03 	ldbu	r2,-8(fp)
8110fc64:	10802b24 	muli	r2,r2,172
8110fc68:	10800304 	addi	r2,r2,12
8110fc6c:	e0ffff17 	ldw	r3,-4(fp)
8110fc70:	1885883a 	add	r2,r3,r2
8110fc74:	e0fffe03 	ldbu	r3,-8(fp)
8110fc78:	180b883a 	mov	r5,r3
8110fc7c:	1009883a 	mov	r4,r2
8110fc80:	110f4240 	call	8110f424 <vNFeeNotInUse>
            }
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
8110fc84:	e0bffe03 	ldbu	r2,-8(fp)
8110fc88:	e0fffe03 	ldbu	r3,-8(fp)
8110fc8c:	18c02b24 	muli	r3,r3,172
8110fc90:	18c02304 	addi	r3,r3,140
8110fc94:	e13fff17 	ldw	r4,-4(fp)
8110fc98:	20c7883a 	add	r3,r4,r3
8110fc9c:	e13fff17 	ldw	r4,-4(fp)
8110fca0:	108042c4 	addi	r2,r2,267
8110fca4:	1085883a 	add	r2,r2,r2
8110fca8:	1085883a 	add	r2,r2,r2
8110fcac:	2085883a 	add	r2,r4,r2
8110fcb0:	10c00015 	stw	r3,0(r2)
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
8110fcb4:	e0bffe03 	ldbu	r2,-8(fp)
8110fcb8:	e0fffe03 	ldbu	r3,-8(fp)
8110fcbc:	18c02b24 	muli	r3,r3,172
8110fcc0:	18c02404 	addi	r3,r3,144
8110fcc4:	e13fff17 	ldw	r4,-4(fp)
8110fcc8:	20c7883a 	add	r3,r4,r3
8110fccc:	e13fff17 	ldw	r4,-4(fp)
8110fcd0:	10804444 	addi	r2,r2,273
8110fcd4:	1085883a 	add	r2,r2,r2
8110fcd8:	1085883a 	add	r2,r2,r2
8110fcdc:	2085883a 	add	r2,r4,r2
8110fce0:	10c00015 	stw	r3,0(r2)
    xMeb->ucNofFeesInUse = 2;

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110fce4:	e0bffe03 	ldbu	r2,-8(fp)
8110fce8:	10800044 	addi	r2,r2,1
8110fcec:	e0bffe05 	stb	r2,-8(fp)
8110fcf0:	e0bffe03 	ldbu	r2,-8(fp)
8110fcf4:	108001b0 	cmpltui	r2,r2,6
8110fcf8:	103fca1e 	bne	r2,zero,8110fc24 <__reset+0xfb0efc24>
8110fcfc:	00000806 	br	8110fd20 <vSimucamStructureInit+0x17c>
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
        }
    } else {
        /* Are Fast Fee instances */
        for ( ucIL = 0; ucIL < N_OF_FastFEE; ucIL++ ) {
8110fd00:	e03ffe05 	stb	zero,-8(fp)
8110fd04:	00000306 	br	8110fd14 <vSimucamStructureInit+0x170>
8110fd08:	e0bffe03 	ldbu	r2,-8(fp)
8110fd0c:	10800044 	addi	r2,r2,1
8110fd10:	e0bffe05 	stb	r2,-8(fp)
8110fd14:	e0bffe03 	ldbu	r2,-8(fp)
8110fd18:	108000b0 	cmpltui	r2,r2,2
8110fd1c:	103ffa1e 	bne	r2,zero,8110fd08 <__reset+0xfb0efd08>
            }            
        }
    }

    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
8110fd20:	e0bfff17 	ldw	r2,-4(fp)
8110fd24:	10010505 	stb	zero,1044(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
8110fd28:	0001883a 	nop
8110fd2c:	e037883a 	mov	sp,fp
8110fd30:	dfc00117 	ldw	ra,4(sp)
8110fd34:	df000017 	ldw	fp,0(sp)
8110fd38:	dec00204 	addi	sp,sp,8
8110fd3c:	f800283a 	ret

8110fd40 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
8110fd40:	defffe04 	addi	sp,sp,-8
8110fd44:	de00012e 	bgeu	sp,et,8110fd4c <vLoadDefaultEPValue+0xc>
8110fd48:	003b68fa 	trap	3
8110fd4c:	df000115 	stw	fp,4(sp)
8110fd50:	df000104 	addi	fp,sp,4
8110fd54:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
8110fd58:	e0bfff17 	ldw	r2,-4(fp)
8110fd5c:	00d07234 	movhi	r3,16840
8110fd60:	10c10615 	stw	r3,1048(r2)
}
8110fd64:	0001883a 	nop
8110fd68:	e037883a 	mov	sp,fp
8110fd6c:	df000017 	ldw	fp,0(sp)
8110fd70:	dec00104 	addi	sp,sp,4
8110fd74:	f800283a 	ret

8110fd78 <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110fd78:	defffd04 	addi	sp,sp,-12
8110fd7c:	de00012e 	bgeu	sp,et,8110fd84 <vChangeEPValue+0xc>
8110fd80:	003b68fa 	trap	3
8110fd84:	df000215 	stw	fp,8(sp)
8110fd88:	df000204 	addi	fp,sp,8
8110fd8c:	e13ffe15 	stw	r4,-8(fp)
8110fd90:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
8110fd94:	e0bffe17 	ldw	r2,-8(fp)
8110fd98:	e0ffff17 	ldw	r3,-4(fp)
8110fd9c:	10c10615 	stw	r3,1048(r2)
}
8110fda0:	0001883a 	nop
8110fda4:	e037883a 	mov	sp,fp
8110fda8:	df000017 	ldw	fp,0(sp)
8110fdac:	dec00104 	addi	sp,sp,4
8110fdb0:	f800283a 	ret

8110fdb4 <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110fdb4:	defffd04 	addi	sp,sp,-12
8110fdb8:	de00012e 	bgeu	sp,et,8110fdc0 <vChangeDefaultEPValue+0xc>
8110fdbc:	003b68fa 	trap	3
8110fdc0:	df000215 	stw	fp,8(sp)
8110fdc4:	df000204 	addi	fp,sp,8
8110fdc8:	e13ffe15 	stw	r4,-8(fp)
8110fdcc:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
8110fdd0:	0001883a 	nop
8110fdd4:	e037883a 	mov	sp,fp
8110fdd8:	df000017 	ldw	fp,0(sp)
8110fddc:	dec00104 	addi	sp,sp,4
8110fde0:	f800283a 	ret

8110fde4 <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
8110fde4:	defffe04 	addi	sp,sp,-8
8110fde8:	de00012e 	bgeu	sp,et,8110fdf0 <vLoadDefaultRTValue+0xc>
8110fdec:	003b68fa 	trap	3
8110fdf0:	df000115 	stw	fp,4(sp)
8110fdf4:	df000104 	addi	fp,sp,4
8110fdf8:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
8110fdfc:	e0ffff17 	ldw	r3,-4(fp)
8110fe00:	00901eb4 	movhi	r2,16506
8110fe04:	10a66684 	addi	r2,r2,-26214
8110fe08:	18810715 	stw	r2,1052(r3)
}
8110fe0c:	0001883a 	nop
8110fe10:	e037883a 	mov	sp,fp
8110fe14:	df000017 	ldw	fp,0(sp)
8110fe18:	dec00104 	addi	sp,sp,4
8110fe1c:	f800283a 	ret

8110fe20 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110fe20:	defffd04 	addi	sp,sp,-12
8110fe24:	de00012e 	bgeu	sp,et,8110fe2c <vChangeRTValue+0xc>
8110fe28:	003b68fa 	trap	3
8110fe2c:	df000215 	stw	fp,8(sp)
8110fe30:	df000204 	addi	fp,sp,8
8110fe34:	e13ffe15 	stw	r4,-8(fp)
8110fe38:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
8110fe3c:	e0bffe17 	ldw	r2,-8(fp)
8110fe40:	e0ffff17 	ldw	r3,-4(fp)
8110fe44:	10c10715 	stw	r3,1052(r2)
}
8110fe48:	0001883a 	nop
8110fe4c:	e037883a 	mov	sp,fp
8110fe50:	df000017 	ldw	fp,0(sp)
8110fe54:	dec00104 	addi	sp,sp,4
8110fe58:	f800283a 	ret

8110fe5c <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110fe5c:	defffd04 	addi	sp,sp,-12
8110fe60:	de00012e 	bgeu	sp,et,8110fe68 <vChangeDefaultRTValue+0xc>
8110fe64:	003b68fa 	trap	3
8110fe68:	df000215 	stw	fp,8(sp)
8110fe6c:	df000204 	addi	fp,sp,8
8110fe70:	e13ffe15 	stw	r4,-8(fp)
8110fe74:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
8110fe78:	0001883a 	nop
8110fe7c:	e037883a 	mov	sp,fp
8110fe80:	df000017 	ldw	fp,0(sp)
8110fe84:	dec00104 	addi	sp,sp,4
8110fe88:	f800283a 	ret

8110fe8c <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
8110fe8c:	defffe04 	addi	sp,sp,-8
8110fe90:	de00012e 	bgeu	sp,et,8110fe98 <vLoadDefaultSyncSource+0xc>
8110fe94:	003b68fa 	trap	3
8110fe98:	df000115 	stw	fp,4(sp)
8110fe9c:	df000104 	addi	fp,sp,4
8110fea0:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
8110fea4:	e0bfff17 	ldw	r2,-4(fp)
8110fea8:	10010815 	stw	zero,1056(r2)
}
8110feac:	0001883a 	nop
8110feb0:	e037883a 	mov	sp,fp
8110feb4:	df000017 	ldw	fp,0(sp)
8110feb8:	dec00104 	addi	sp,sp,4
8110febc:	f800283a 	ret

8110fec0 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110fec0:	defffd04 	addi	sp,sp,-12
8110fec4:	de00012e 	bgeu	sp,et,8110fecc <vChangeSyncSource+0xc>
8110fec8:	003b68fa 	trap	3
8110fecc:	df000215 	stw	fp,8(sp)
8110fed0:	df000204 	addi	fp,sp,8
8110fed4:	e13ffe15 	stw	r4,-8(fp)
8110fed8:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
8110fedc:	e0bffe17 	ldw	r2,-8(fp)
8110fee0:	e0ffff17 	ldw	r3,-4(fp)
8110fee4:	10c10815 	stw	r3,1056(r2)
}
8110fee8:	0001883a 	nop
8110feec:	e037883a 	mov	sp,fp
8110fef0:	df000017 	ldw	fp,0(sp)
8110fef4:	dec00104 	addi	sp,sp,4
8110fef8:	f800283a 	ret

8110fefc <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110fefc:	defffd04 	addi	sp,sp,-12
8110ff00:	de00012e 	bgeu	sp,et,8110ff08 <vChangeDefaultSyncSource+0xc>
8110ff04:	003b68fa 	trap	3
8110ff08:	df000215 	stw	fp,8(sp)
8110ff0c:	df000204 	addi	fp,sp,8
8110ff10:	e13ffe15 	stw	r4,-8(fp)
8110ff14:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
8110ff18:	0001883a 	nop
8110ff1c:	e037883a 	mov	sp,fp
8110ff20:	df000017 	ldw	fp,0(sp)
8110ff24:	dec00104 	addi	sp,sp,4
8110ff28:	f800283a 	ret

8110ff2c <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TSimucam_MEB *xMeb, unsigned char ucTime ) {
8110ff2c:	defffd04 	addi	sp,sp,-12
8110ff30:	de00012e 	bgeu	sp,et,8110ff38 <vSetTimeCode+0xc>
8110ff34:	003b68fa 	trap	3
8110ff38:	df000215 	stw	fp,8(sp)
8110ff3c:	df000204 	addi	fp,sp,8
8110ff40:	e13ffe15 	stw	r4,-8(fp)
8110ff44:	2805883a 	mov	r2,r5
8110ff48:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucTimeCode = ucTime;
8110ff4c:	e0bffe17 	ldw	r2,-8(fp)
8110ff50:	e0ffff03 	ldbu	r3,-4(fp)
8110ff54:	10c10905 	stb	r3,1060(r2)
}
8110ff58:	0001883a 	nop
8110ff5c:	e037883a 	mov	sp,fp
8110ff60:	df000017 	ldw	fp,0(sp)
8110ff64:	dec00104 	addi	sp,sp,4
8110ff68:	f800283a 	ret

8110ff6c <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TSimucam_MEB *xMeb ) {
8110ff6c:	defffe04 	addi	sp,sp,-8
8110ff70:	de00012e 	bgeu	sp,et,8110ff78 <vResetTimeCode+0xc>
8110ff74:	003b68fa 	trap	3
8110ff78:	df000115 	stw	fp,4(sp)
8110ff7c:	df000104 	addi	fp,sp,4
8110ff80:	e13fff15 	stw	r4,-4(fp)
    xMeb->ucTimeCode = 0;
8110ff84:	e0bfff17 	ldw	r2,-4(fp)
8110ff88:	10010905 	stb	zero,1060(r2)
}
8110ff8c:	0001883a 	nop
8110ff90:	e037883a 	mov	sp,fp
8110ff94:	df000017 	ldw	fp,0(sp)
8110ff98:	dec00104 	addi	sp,sp,4
8110ff9c:	f800283a 	ret

8110ffa0 <vLoadDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
8110ffa0:	defffe04 	addi	sp,sp,-8
8110ffa4:	de00012e 	bgeu	sp,et,8110ffac <vLoadDefaultAutoResetSync+0xc>
8110ffa8:	003b68fa 	trap	3
8110ffac:	df000115 	stw	fp,4(sp)
8110ffb0:	df000104 	addi	fp,sp,4
8110ffb4:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
8110ffb8:	e0bfff17 	ldw	r2,-4(fp)
8110ffbc:	00c00044 	movi	r3,1
8110ffc0:	10c10a15 	stw	r3,1064(r2)
}
8110ffc4:	0001883a 	nop
8110ffc8:	e037883a 	mov	sp,fp
8110ffcc:	df000017 	ldw	fp,0(sp)
8110ffd0:	dec00104 	addi	sp,sp,4
8110ffd4:	f800283a 	ret

8110ffd8 <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110ffd8:	defffd04 	addi	sp,sp,-12
8110ffdc:	de00012e 	bgeu	sp,et,8110ffe4 <vChangeAutoResetSync+0xc>
8110ffe0:	003b68fa 	trap	3
8110ffe4:	df000215 	stw	fp,8(sp)
8110ffe8:	df000204 	addi	fp,sp,8
8110ffec:	e13ffe15 	stw	r4,-8(fp)
8110fff0:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
8110fff4:	e0bffe17 	ldw	r2,-8(fp)
8110fff8:	e0ffff17 	ldw	r3,-4(fp)
8110fffc:	10c10a15 	stw	r3,1064(r2)
}
81110000:	0001883a 	nop
81110004:	e037883a 	mov	sp,fp
81110008:	df000017 	ldw	fp,0(sp)
8111000c:	dec00104 	addi	sp,sp,4
81110010:	f800283a 	ret

81110014 <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
81110014:	defffd04 	addi	sp,sp,-12
81110018:	de00012e 	bgeu	sp,et,81110020 <vChangeDefaultAutoResetSync+0xc>
8111001c:	003b68fa 	trap	3
81110020:	df000215 	stw	fp,8(sp)
81110024:	df000204 	addi	fp,sp,8
81110028:	e13ffe15 	stw	r4,-8(fp)
8111002c:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
81110030:	0001883a 	nop
81110034:	e037883a 	mov	sp,fp
81110038:	df000017 	ldw	fp,0(sp)
8111003c:	dec00104 	addi	sp,sp,4
81110040:	f800283a 	ret

81110044 <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TSimucam_MEB *xMeb ) {
81110044:	defffe04 	addi	sp,sp,-8
81110048:	de00012e 	bgeu	sp,et,81110050 <vLoadDefaultIdNFEEMaster+0xc>
8111004c:	003b68fa 	trap	3
81110050:	df000115 	stw	fp,4(sp)
81110054:	df000104 	addi	fp,sp,4
81110058:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xMeb->ucIdNFEEMaster = 0;
8111005c:	e0bfff17 	ldw	r2,-4(fp)
81110060:	10010945 	stb	zero,1061(r2)
}
81110064:	0001883a 	nop
81110068:	e037883a 	mov	sp,fp
8111006c:	df000017 	ldw	fp,0(sp)
81110070:	dec00104 	addi	sp,sp,4
81110074:	f800283a 	ret

81110078 <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
81110078:	defffd04 	addi	sp,sp,-12
8111007c:	de00012e 	bgeu	sp,et,81110084 <vChangeIdNFEEMaster+0xc>
81110080:	003b68fa 	trap	3
81110084:	df000215 	stw	fp,8(sp)
81110088:	df000204 	addi	fp,sp,8
8111008c:	e13ffe15 	stw	r4,-8(fp)
81110090:	2805883a 	mov	r2,r5
81110094:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucIdNFEEMaster = ucIdMaster;
81110098:	e0bffe17 	ldw	r2,-8(fp)
8111009c:	e0ffff03 	ldbu	r3,-4(fp)
811100a0:	10c10945 	stb	r3,1061(r2)
}
811100a4:	0001883a 	nop
811100a8:	e037883a 	mov	sp,fp
811100ac:	df000017 	ldw	fp,0(sp)
811100b0:	dec00104 	addi	sp,sp,4
811100b4:	f800283a 	ret

811100b8 <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
811100b8:	defffd04 	addi	sp,sp,-12
811100bc:	de00012e 	bgeu	sp,et,811100c4 <vChangeDefaultIdNFEEMaster+0xc>
811100c0:	003b68fa 	trap	3
811100c4:	df000215 	stw	fp,8(sp)
811100c8:	df000204 	addi	fp,sp,8
811100cc:	e13ffe15 	stw	r4,-8(fp)
811100d0:	2805883a 	mov	r2,r5
811100d4:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
811100d8:	0001883a 	nop
811100dc:	e037883a 	mov	sp,fp
811100e0:	df000017 	ldw	fp,0(sp)
811100e4:	dec00104 	addi	sp,sp,4
811100e8:	f800283a 	ret

811100ec <vSyncReset>:

/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
811100ec:	defffc04 	addi	sp,sp,-16
811100f0:	de00012e 	bgeu	sp,et,811100f8 <vSyncReset+0xc>
811100f4:	003b68fa 	trap	3
811100f8:	dfc00315 	stw	ra,12(sp)
811100fc:	df000215 	stw	fp,8(sp)
81110100:	df000204 	addi	fp,sp,8
81110104:	e13ffe15 	stw	r4,-8(fp)
81110108:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(xMeb);
8111010c:	e13ffe17 	ldw	r4,-8(fp)
81110110:	110ff6c0 	call	8110ff6c <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
81110114:	0001883a 	nop
81110118:	e037883a 	mov	sp,fp
8111011c:	dfc00117 	ldw	ra,4(sp)
81110120:	df000017 	ldw	fp,0(sp)
81110124:	dec00204 	addi	sp,sp,8
81110128:	f800283a 	ret

8111012c <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8111012c:	defffe04 	addi	sp,sp,-8
81110130:	de00012e 	bgeu	sp,et,81110138 <bSDcardIsPresent+0xc>
81110134:	003b68fa 	trap	3
81110138:	dfc00115 	stw	ra,4(sp)
8111013c:	df000015 	stw	fp,0(sp)
81110140:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
81110144:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
}
81110148:	e037883a 	mov	sp,fp
8111014c:	dfc00117 	ldw	ra,4(sp)
81110150:	df000017 	ldw	fp,0(sp)
81110154:	dec00204 	addi	sp,sp,8
81110158:	f800283a 	ret

8111015c <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8111015c:	defffe04 	addi	sp,sp,-8
81110160:	de00012e 	bgeu	sp,et,81110168 <bSDcardFAT16Check+0xc>
81110164:	003b68fa 	trap	3
81110168:	dfc00115 	stw	ra,4(sp)
8111016c:	df000015 	stw	fp,0(sp)
81110170:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
81110174:	11364800 	call	81136480 <alt_up_sd_card_is_FAT16>
}
81110178:	e037883a 	mov	sp,fp
8111017c:	dfc00117 	ldw	ra,4(sp)
81110180:	df000017 	ldw	fp,0(sp)
81110184:	dec00204 	addi	sp,sp,8
81110188:	f800283a 	ret

8111018c <bInitializeSDCard>:

bool bInitializeSDCard( void ){
8111018c:	defffd04 	addi	sp,sp,-12
81110190:	de00012e 	bgeu	sp,et,81110198 <bInitializeSDCard+0xc>
81110194:	003b68fa 	trap	3
81110198:	dfc00215 	stw	ra,8(sp)
8111019c:	df000115 	stw	fp,4(sp)
811101a0:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
811101a4:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
811101a8:	d0206015 	stw	zero,-32384(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
811101ac:	01204534 	movhi	r4,33044
811101b0:	213e4704 	addi	r4,r4,-1764
811101b4:	11362f00 	call	811362f0 <alt_up_sd_card_open_dev>
811101b8:	d0a06015 	stw	r2,-32384(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
811101bc:	d0a06017 	ldw	r2,-32384(gp)
811101c0:	10002226 	beq	r2,zero,8111024c <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
811101c4:	111012c0 	call	8111012c <bSDcardIsPresent>
811101c8:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
811101cc:	e0bfff17 	ldw	r2,-4(fp)
811101d0:	10001626 	beq	r2,zero,8111022c <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
811101d4:	111015c0 	call	8111015c <bSDcardFAT16Check>
811101d8:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
811101dc:	e0bfff17 	ldw	r2,-4(fp)
811101e0:	10000a26 	beq	r2,zero,8111020c <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
811101e4:	00800044 	movi	r2,1
811101e8:	d0a05f15 	stw	r2,-32388(gp)
				debug(fp, "SD is up.\r\n");
811101ec:	d0a04f17 	ldw	r2,-32452(gp)
811101f0:	100f883a 	mov	r7,r2
811101f4:	018002c4 	movi	r6,11
811101f8:	01400044 	movi	r5,1
811101fc:	01204534 	movhi	r4,33044
81110200:	213e5204 	addi	r4,r4,-1720
81110204:	11124700 	call	81112470 <fwrite>
81110208:	00001806 	br	8111026c <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8111020c:	d0a04f17 	ldw	r2,-32452(gp)
81110210:	100f883a 	mov	r7,r2
81110214:	01800984 	movi	r6,38
81110218:	01400044 	movi	r5,1
8111021c:	01204534 	movhi	r4,33044
81110220:	213e5504 	addi	r4,r4,-1708
81110224:	11124700 	call	81112470 <fwrite>
81110228:	00001006 	br	8111026c <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8111022c:	d0a04f17 	ldw	r2,-32452(gp)
81110230:	100f883a 	mov	r7,r2
81110234:	01800744 	movi	r6,29
81110238:	01400044 	movi	r5,1
8111023c:	01204534 	movhi	r4,33044
81110240:	213e5f04 	addi	r4,r4,-1668
81110244:	11124700 	call	81112470 <fwrite>
81110248:	00000806 	br	8111026c <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8111024c:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
81110250:	d0a04f17 	ldw	r2,-32452(gp)
81110254:	100f883a 	mov	r7,r2
81110258:	018008c4 	movi	r6,35
8111025c:	01400044 	movi	r5,1
81110260:	01204534 	movhi	r4,33044
81110264:	213e6704 	addi	r4,r4,-1636
81110268:	11124700 	call	81112470 <fwrite>
	}

	return bSucess;
8111026c:	e0bfff17 	ldw	r2,-4(fp)
}
81110270:	e037883a 	mov	sp,fp
81110274:	dfc00117 	ldw	ra,4(sp)
81110278:	df000017 	ldw	fp,0(sp)
8111027c:	dec00204 	addi	sp,sp,8
81110280:	f800283a 	ret

81110284 <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
81110284:	defffd04 	addi	sp,sp,-12
81110288:	de00012e 	bgeu	sp,et,81110290 <siOpenFile+0xc>
8111028c:	003b68fa 	trap	3
81110290:	dfc00215 	stw	ra,8(sp)
81110294:	df000115 	stw	fp,4(sp)
81110298:	df000104 	addi	fp,sp,4
8111029c:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
811102a0:	000b883a 	mov	r5,zero
811102a4:	e13fff17 	ldw	r4,-4(fp)
811102a8:	113698c0 	call	8113698c <alt_up_sd_card_fopen>
}
811102ac:	e037883a 	mov	sp,fp
811102b0:	dfc00117 	ldw	ra,4(sp)
811102b4:	df000017 	ldw	fp,0(sp)
811102b8:	dec00204 	addi	sp,sp,8
811102bc:	f800283a 	ret

811102c0 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
811102c0:	defffd04 	addi	sp,sp,-12
811102c4:	de00012e 	bgeu	sp,et,811102cc <siCloseFile+0xc>
811102c8:	003b68fa 	trap	3
811102cc:	dfc00215 	stw	ra,8(sp)
811102d0:	df000115 	stw	fp,4(sp)
811102d4:	df000104 	addi	fp,sp,4
811102d8:	2005883a 	mov	r2,r4
811102dc:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
811102e0:	e0bfff0f 	ldh	r2,-4(fp)
811102e4:	1009883a 	mov	r4,r2
811102e8:	11377d80 	call	811377d8 <alt_up_sd_card_fclose>
}
811102ec:	e037883a 	mov	sp,fp
811102f0:	dfc00117 	ldw	ra,4(sp)
811102f4:	df000017 	ldw	fp,0(sp)
811102f8:	dec00204 	addi	sp,sp,8
811102fc:	f800283a 	ret

81110300 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
81110300:	defffd04 	addi	sp,sp,-12
81110304:	de00012e 	bgeu	sp,et,8111030c <cGetNextChar+0xc>
81110308:	003b68fa 	trap	3
8111030c:	dfc00215 	stw	ra,8(sp)
81110310:	df000115 	stw	fp,4(sp)
81110314:	df000104 	addi	fp,sp,4
81110318:	2005883a 	mov	r2,r4
8111031c:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
81110320:	e0bfff0f 	ldh	r2,-4(fp)
81110324:	1009883a 	mov	r4,r2
81110328:	1136e300 	call	81136e30 <alt_up_sd_card_read>
}
8111032c:	e037883a 	mov	sp,fp
81110330:	dfc00117 	ldw	ra,4(sp)
81110334:	df000017 	ldw	fp,0(sp)
81110338:	dec00204 	addi	sp,sp,8
8111033c:	f800283a 	ret

81110340 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
81110340:	deffff04 	addi	sp,sp,-4
81110344:	de00012e 	bgeu	sp,et,8111034c <bTestSimucamCriticalHW+0xc>
81110348:	003b68fa 	trap	3
8111034c:	df000015 	stw	fp,0(sp)
81110350:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
81110354:	00800044 	movi	r2,1
}
81110358:	e037883a 	mov	sp,fp
8111035c:	df000017 	ldw	fp,0(sp)
81110360:	dec00104 	addi	sp,sp,4
81110364:	f800283a 	ret

81110368 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
81110368:	defffc04 	addi	sp,sp,-16
8111036c:	de00012e 	bgeu	sp,et,81110374 <_reg_write+0xc>
81110370:	003b68fa 	trap	3
81110374:	df000315 	stw	fp,12(sp)
81110378:	df000304 	addi	fp,sp,12
8111037c:	e13ffd15 	stw	r4,-12(fp)
81110380:	e17ffe15 	stw	r5,-8(fp)
81110384:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
81110388:	e0bffe17 	ldw	r2,-8(fp)
8111038c:	1085883a 	add	r2,r2,r2
81110390:	1085883a 	add	r2,r2,r2
81110394:	1007883a 	mov	r3,r2
81110398:	e0bffd17 	ldw	r2,-12(fp)
8111039c:	1885883a 	add	r2,r3,r2
811103a0:	1007883a 	mov	r3,r2
811103a4:	e0bfff17 	ldw	r2,-4(fp)
811103a8:	18800035 	stwio	r2,0(r3)
	return 1;
811103ac:	00800044 	movi	r2,1

}
811103b0:	e037883a 	mov	sp,fp
811103b4:	df000017 	ldw	fp,0(sp)
811103b8:	dec00104 	addi	sp,sp,4
811103bc:	f800283a 	ret

811103c0 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
811103c0:	defffc04 	addi	sp,sp,-16
811103c4:	de00012e 	bgeu	sp,et,811103cc <_reg_read+0xc>
811103c8:	003b68fa 	trap	3
811103cc:	df000315 	stw	fp,12(sp)
811103d0:	df000304 	addi	fp,sp,12
811103d4:	e13ffd15 	stw	r4,-12(fp)
811103d8:	e17ffe15 	stw	r5,-8(fp)
811103dc:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
811103e0:	e0bffe17 	ldw	r2,-8(fp)
811103e4:	1085883a 	add	r2,r2,r2
811103e8:	1085883a 	add	r2,r2,r2
811103ec:	1007883a 	mov	r3,r2
811103f0:	e0bffd17 	ldw	r2,-12(fp)
811103f4:	1885883a 	add	r2,r3,r2
811103f8:	10c00037 	ldwio	r3,0(r2)
811103fc:	e0bfff17 	ldw	r2,-4(fp)
81110400:	10c00015 	stw	r3,0(r2)
	return 1;
81110404:	00800044 	movi	r2,1

}
81110408:	e037883a 	mov	sp,fp
8111040c:	df000017 	ldw	fp,0(sp)
81110410:	dec00104 	addi	sp,sp,4
81110414:	f800283a 	ret

81110418 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
81110418:	defffa04 	addi	sp,sp,-24
8111041c:	de00012e 	bgeu	sp,et,81110424 <_print_codec_status+0xc>
81110420:	003b68fa 	trap	3
81110424:	dfc00515 	stw	ra,20(sp)
81110428:	df000415 	stw	fp,16(sp)
8111042c:	df000404 	addi	fp,sp,16
81110430:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
81110434:	e0bfff17 	ldw	r2,-4(fp)
81110438:	1005d1ba 	srai	r2,r2,6
8111043c:	1080004c 	andi	r2,r2,1
81110440:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
81110444:	e0bfff17 	ldw	r2,-4(fp)
81110448:	1005d17a 	srai	r2,r2,5
8111044c:	1080004c 	andi	r2,r2,1
81110450:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
81110454:	e0bfff17 	ldw	r2,-4(fp)
81110458:	1005d13a 	srai	r2,r2,4
8111045c:	1080004c 	andi	r2,r2,1
81110460:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
81110464:	00e04534 	movhi	r3,33044
81110468:	18ca2604 	addi	r3,r3,10392
8111046c:	00a04534 	movhi	r2,33044
81110470:	10be7004 	addi	r2,r2,-1600
81110474:	1009883a 	mov	r4,r2
81110478:	008005c4 	movi	r2,23
8111047c:	100d883a 	mov	r6,r2
81110480:	200b883a 	mov	r5,r4
81110484:	1809883a 	mov	r4,r3
81110488:	1112e840 	call	81112e84 <memcpy>
	debug(fp, cDebugBuffer);
8111048c:	d0a04f17 	ldw	r2,-32452(gp)
81110490:	01604534 	movhi	r5,33044
81110494:	294a2604 	addi	r5,r5,10392
81110498:	1009883a 	mov	r4,r2
8111049c:	1111dd40 	call	81111dd4 <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
811104a0:	e0bffc17 	ldw	r2,-16(fp)
811104a4:	10800058 	cmpnei	r2,r2,1
811104a8:	1000031e 	bne	r2,zero,811104b8 <_print_codec_status+0xa0>
811104ac:	00a04534 	movhi	r2,33044
811104b0:	10be7604 	addi	r2,r2,-1576
811104b4:	00000206 	br	811104c0 <_print_codec_status+0xa8>
811104b8:	00a04534 	movhi	r2,33044
811104bc:	10be7704 	addi	r2,r2,-1572
811104c0:	100d883a 	mov	r6,r2
811104c4:	01604534 	movhi	r5,33044
811104c8:	297e7804 	addi	r5,r5,-1568
811104cc:	01204534 	movhi	r4,33044
811104d0:	210a2604 	addi	r4,r4,10392
811104d4:	11137640 	call	81113764 <sprintf>
	debug(fp, cDebugBuffer);
811104d8:	d0a04f17 	ldw	r2,-32452(gp)
811104dc:	01604534 	movhi	r5,33044
811104e0:	294a2604 	addi	r5,r5,10392
811104e4:	1009883a 	mov	r4,r2
811104e8:	1111dd40 	call	81111dd4 <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
811104ec:	e0bffd17 	ldw	r2,-12(fp)
811104f0:	10800058 	cmpnei	r2,r2,1
811104f4:	1000031e 	bne	r2,zero,81110504 <_print_codec_status+0xec>
811104f8:	00a04534 	movhi	r2,33044
811104fc:	10be7604 	addi	r2,r2,-1576
81110500:	00000206 	br	8111050c <_print_codec_status+0xf4>
81110504:	00a04534 	movhi	r2,33044
81110508:	10be7704 	addi	r2,r2,-1572
8111050c:	100d883a 	mov	r6,r2
81110510:	01604534 	movhi	r5,33044
81110514:	297e7e04 	addi	r5,r5,-1544
81110518:	01204534 	movhi	r4,33044
8111051c:	210a2604 	addi	r4,r4,10392
81110520:	11137640 	call	81113764 <sprintf>
	debug(fp, cDebugBuffer);
81110524:	d0a04f17 	ldw	r2,-32452(gp)
81110528:	01604534 	movhi	r5,33044
8111052c:	294a2604 	addi	r5,r5,10392
81110530:	1009883a 	mov	r4,r2
81110534:	1111dd40 	call	81111dd4 <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
81110538:	e0bffe17 	ldw	r2,-8(fp)
8111053c:	10800058 	cmpnei	r2,r2,1
81110540:	1000031e 	bne	r2,zero,81110550 <_print_codec_status+0x138>
81110544:	00a04534 	movhi	r2,33044
81110548:	10be7604 	addi	r2,r2,-1576
8111054c:	00000206 	br	81110558 <_print_codec_status+0x140>
81110550:	00a04534 	movhi	r2,33044
81110554:	10be7704 	addi	r2,r2,-1572
81110558:	100d883a 	mov	r6,r2
8111055c:	01604534 	movhi	r5,33044
81110560:	297e8404 	addi	r5,r5,-1520
81110564:	01204534 	movhi	r4,33044
81110568:	210a2604 	addi	r4,r4,10392
8111056c:	11137640 	call	81113764 <sprintf>
	debug(fp, cDebugBuffer);
81110570:	d0a04f17 	ldw	r2,-32452(gp)
81110574:	01604534 	movhi	r5,33044
81110578:	294a2604 	addi	r5,r5,10392
8111057c:	1009883a 	mov	r4,r2
81110580:	1111dd40 	call	81111dd4 <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
81110584:	00a04534 	movhi	r2,33044
81110588:	108a2604 	addi	r2,r2,10392
8111058c:	00c00b44 	movi	r3,45
81110590:	10c00005 	stb	r3,0(r2)
81110594:	00c00b44 	movi	r3,45
81110598:	10c00045 	stb	r3,1(r2)
8111059c:	00c00b44 	movi	r3,45
811105a0:	10c00085 	stb	r3,2(r2)
811105a4:	00c00b44 	movi	r3,45
811105a8:	10c000c5 	stb	r3,3(r2)
811105ac:	00c00b44 	movi	r3,45
811105b0:	10c00105 	stb	r3,4(r2)
811105b4:	00c00b44 	movi	r3,45
811105b8:	10c00145 	stb	r3,5(r2)
811105bc:	00c00b44 	movi	r3,45
811105c0:	10c00185 	stb	r3,6(r2)
811105c4:	00c00b44 	movi	r3,45
811105c8:	10c001c5 	stb	r3,7(r2)
811105cc:	00c00804 	movi	r3,32
811105d0:	10c00205 	stb	r3,8(r2)
811105d4:	00c00804 	movi	r3,32
811105d8:	10c00245 	stb	r3,9(r2)
811105dc:	00c00284 	movi	r3,10
811105e0:	10c00285 	stb	r3,10(r2)
811105e4:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
811105e8:	d0a04f17 	ldw	r2,-32452(gp)
811105ec:	01604534 	movhi	r5,33044
811105f0:	294a2604 	addi	r5,r5,10392
811105f4:	1009883a 	mov	r4,r2
811105f8:	1111dd40 	call	81111dd4 <fprintf>
#endif
}
811105fc:	0001883a 	nop
81110600:	e037883a 	mov	sp,fp
81110604:	dfc00117 	ldw	ra,4(sp)
81110608:	df000017 	ldw	fp,0(sp)
8111060c:	dec00204 	addi	sp,sp,8
81110610:	f800283a 	ret

81110614 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
81110614:	defffb04 	addi	sp,sp,-20
81110618:	de00012e 	bgeu	sp,et,81110620 <_split_codec_status+0xc>
8111061c:	003b68fa 	trap	3
81110620:	df000415 	stw	fp,16(sp)
81110624:	df000404 	addi	fp,sp,16
81110628:	e13ffc15 	stw	r4,-16(fp)
8111062c:	e17ffd15 	stw	r5,-12(fp)
81110630:	e1bffe15 	stw	r6,-8(fp)
81110634:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
81110638:	e0bffc17 	ldw	r2,-16(fp)
8111063c:	1005d1ba 	srai	r2,r2,6
81110640:	10c0004c 	andi	r3,r2,1
81110644:	e0bffd17 	ldw	r2,-12(fp)
81110648:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8111064c:	e0bffc17 	ldw	r2,-16(fp)
81110650:	1005d17a 	srai	r2,r2,5
81110654:	10c0004c 	andi	r3,r2,1
81110658:	e0bffe17 	ldw	r2,-8(fp)
8111065c:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
81110660:	e0bffc17 	ldw	r2,-16(fp)
81110664:	1005d13a 	srai	r2,r2,4
81110668:	10c0004c 	andi	r3,r2,1
8111066c:	e0bfff17 	ldw	r2,-4(fp)
81110670:	10c00015 	stw	r3,0(r2)
}
81110674:	0001883a 	nop
81110678:	e037883a 	mov	sp,fp
8111067c:	df000017 	ldw	fp,0(sp)
81110680:	dec00104 	addi	sp,sp,4
81110684:	f800283a 	ret

81110688 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
81110688:	defffc04 	addi	sp,sp,-16
8111068c:	de00012e 	bgeu	sp,et,81110694 <aatoh+0xc>
81110690:	003b68fa 	trap	3
81110694:	df000315 	stw	fp,12(sp)
81110698:	df000304 	addi	fp,sp,12
8111069c:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
811106a0:	e0bfff17 	ldw	r2,-4(fp)
811106a4:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
811106a8:	e0bffd17 	ldw	r2,-12(fp)
811106ac:	10c00003 	ldbu	r3,0(r2)
811106b0:	e0bffd17 	ldw	r2,-12(fp)
811106b4:	10800003 	ldbu	r2,0(r2)
811106b8:	10803fcc 	andi	r2,r2,255
811106bc:	10800eb0 	cmpltui	r2,r2,58
811106c0:	1000021e 	bne	r2,zero,811106cc <aatoh+0x44>
811106c4:	00800dc4 	movi	r2,55
811106c8:	00000106 	br	811106d0 <aatoh+0x48>
811106cc:	00800c04 	movi	r2,48
811106d0:	1885c83a 	sub	r2,r3,r2
811106d4:	1004913a 	slli	r2,r2,4
811106d8:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
811106dc:	e0bffd17 	ldw	r2,-12(fp)
811106e0:	10800044 	addi	r2,r2,1
811106e4:	10c00003 	ldbu	r3,0(r2)
811106e8:	e0bffd17 	ldw	r2,-12(fp)
811106ec:	10800044 	addi	r2,r2,1
811106f0:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
811106f4:	10803fcc 	andi	r2,r2,255
811106f8:	10800eb0 	cmpltui	r2,r2,58
811106fc:	1000021e 	bne	r2,zero,81110708 <aatoh+0x80>
81110700:	00800dc4 	movi	r2,55
81110704:	00000106 	br	8111070c <aatoh+0x84>
81110708:	00800c04 	movi	r2,48
8111070c:	1885c83a 	sub	r2,r3,r2
81110710:	2085883a 	add	r2,r4,r2
81110714:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
81110718:	e0bffe03 	ldbu	r2,-8(fp)
}
8111071c:	e037883a 	mov	sp,fp
81110720:	df000017 	ldw	fp,0(sp)
81110724:	dec00104 	addi	sp,sp,4
81110728:	f800283a 	ret

8111072c <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
8111072c:	defffd04 	addi	sp,sp,-12
81110730:	de00012e 	bgeu	sp,et,81110738 <Verif_Error+0xc>
81110734:	003b68fa 	trap	3
81110738:	dfc00215 	stw	ra,8(sp)
8111073c:	df000115 	stw	fp,4(sp)
81110740:	df000104 	addi	fp,sp,4
81110744:	2005883a 	mov	r2,r4
81110748:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8111074c:	e0bfff03 	ldbu	r2,-4(fp)
81110750:	1000091e 	bne	r2,zero,81110778 <Verif_Error+0x4c>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
81110754:	d0a04f17 	ldw	r2,-32452(gp)
81110758:	100f883a 	mov	r7,r2
8111075c:	018001c4 	movi	r6,7
81110760:	01400044 	movi	r5,1
81110764:	01204534 	movhi	r4,33044
81110768:	213e8a04 	addi	r4,r4,-1496
8111076c:	11124700 	call	81112470 <fwrite>
#endif
		return 0;
81110770:	0005883a 	mov	r2,zero
81110774:	00000106 	br	8111077c <Verif_Error+0x50>
	} else
		return 1;
81110778:	00800044 	movi	r2,1
}
8111077c:	e037883a 	mov	sp,fp
81110780:	dfc00117 	ldw	ra,4(sp)
81110784:	df000017 	ldw	fp,0(sp)
81110788:	dec00204 	addi	sp,sp,8
8111078c:	f800283a 	ret

81110790 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
81110790:	defffe04 	addi	sp,sp,-8
81110794:	de00012e 	bgeu	sp,et,8111079c <toInt+0xc>
81110798:	003b68fa 	trap	3
8111079c:	df000115 	stw	fp,4(sp)
811107a0:	df000104 	addi	fp,sp,4
811107a4:	2005883a 	mov	r2,r4
811107a8:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
811107ac:	e0bfff03 	ldbu	r2,-4(fp)
811107b0:	10bff404 	addi	r2,r2,-48
}
811107b4:	e037883a 	mov	sp,fp
811107b8:	df000017 	ldw	fp,0(sp)
811107bc:	dec00104 	addi	sp,sp,4
811107c0:	f800283a 	ret

811107c4 <__divsf3>:
811107c4:	defff504 	addi	sp,sp,-44
811107c8:	200cd5fa 	srli	r6,r4,23
811107cc:	de00012e 	bgeu	sp,et,811107d4 <__divsf3+0x10>
811107d0:	003b68fa 	trap	3
811107d4:	dcc00415 	stw	r19,16(sp)
811107d8:	2026d7fa 	srli	r19,r4,31
811107dc:	00c02034 	movhi	r3,128
811107e0:	dd800715 	stw	r22,28(sp)
811107e4:	dd000515 	stw	r20,20(sp)
811107e8:	dc800315 	stw	r18,12(sp)
811107ec:	18ffffc4 	addi	r3,r3,-1
811107f0:	dfc00a15 	stw	ra,40(sp)
811107f4:	df000915 	stw	fp,36(sp)
811107f8:	ddc00815 	stw	r23,32(sp)
811107fc:	dd400615 	stw	r21,24(sp)
81110800:	dc400215 	stw	r17,8(sp)
81110804:	dc000115 	stw	r16,4(sp)
81110808:	35003fcc 	andi	r20,r6,255
8111080c:	1924703a 	and	r18,r3,r4
81110810:	9d803fcc 	andi	r22,r19,255
81110814:	a0005226 	beq	r20,zero,81110960 <__divsf3+0x19c>
81110818:	00803fc4 	movi	r2,255
8111081c:	a0802e26 	beq	r20,r2,811108d8 <__divsf3+0x114>
81110820:	91002034 	orhi	r4,r18,128
81110824:	202490fa 	slli	r18,r4,3
81110828:	a53fe044 	addi	r20,r20,-127
8111082c:	0021883a 	mov	r16,zero
81110830:	002f883a 	mov	r23,zero
81110834:	280cd5fa 	srli	r6,r5,23
81110838:	282ad7fa 	srli	r21,r5,31
8111083c:	00c02034 	movhi	r3,128
81110840:	18ffffc4 	addi	r3,r3,-1
81110844:	31803fcc 	andi	r6,r6,255
81110848:	1962703a 	and	r17,r3,r5
8111084c:	af003fcc 	andi	fp,r21,255
81110850:	30004a26 	beq	r6,zero,8111097c <__divsf3+0x1b8>
81110854:	00803fc4 	movi	r2,255
81110858:	30804526 	beq	r6,r2,81110970 <__divsf3+0x1ac>
8111085c:	89402034 	orhi	r5,r17,128
81110860:	282290fa 	slli	r17,r5,3
81110864:	31bfe044 	addi	r6,r6,-127
81110868:	000b883a 	mov	r5,zero
8111086c:	2c20b03a 	or	r16,r5,r16
81110870:	802090ba 	slli	r16,r16,2
81110874:	00a04474 	movhi	r2,33041
81110878:	10822604 	addi	r2,r2,2200
8111087c:	80a1883a 	add	r16,r16,r2
81110880:	81000017 	ldw	r4,0(r16)
81110884:	9d46f03a 	xor	r3,r19,r21
81110888:	180f883a 	mov	r7,r3
8111088c:	18803fcc 	andi	r2,r3,255
81110890:	a18dc83a 	sub	r6,r20,r6
81110894:	2000683a 	jmp	r4
81110898:	81110a7c 	xorhi	r4,r16,17449
8111089c:	81110900 	call	88111090 <__reset+0x20f1090>
811108a0:	81110a70 	cmpltui	r4,r16,17449
811108a4:	811108ec 	andhi	r4,r16,17443
811108a8:	81110a70 	cmpltui	r4,r16,17449
811108ac:	81110a48 	cmpgei	r4,r16,17449
811108b0:	81110a70 	cmpltui	r4,r16,17449
811108b4:	811108ec 	andhi	r4,r16,17443
811108b8:	81110900 	call	88111090 <__reset+0x20f1090>
811108bc:	81110900 	call	88111090 <__reset+0x20f1090>
811108c0:	81110a48 	cmpgei	r4,r16,17449
811108c4:	811108ec 	andhi	r4,r16,17443
811108c8:	81110b5c 	xori	r4,r16,17453
811108cc:	81110b5c 	xori	r4,r16,17453
811108d0:	81110b5c 	xori	r4,r16,17453
811108d4:	81110b10 	cmplti	r4,r16,17452
811108d8:	9000581e 	bne	r18,zero,81110a3c <__divsf3+0x278>
811108dc:	04000204 	movi	r16,8
811108e0:	05c00084 	movi	r23,2
811108e4:	003fd306 	br	81110834 <__reset+0xfb0f0834>
811108e8:	0023883a 	mov	r17,zero
811108ec:	e02d883a 	mov	r22,fp
811108f0:	282f883a 	mov	r23,r5
811108f4:	00800084 	movi	r2,2
811108f8:	b8808f1e 	bne	r23,r2,81110b38 <__divsf3+0x374>
811108fc:	b005883a 	mov	r2,r22
81110900:	11c0004c 	andi	r7,r2,1
81110904:	013fffc4 	movi	r4,-1
81110908:	000d883a 	mov	r6,zero
8111090c:	21003fcc 	andi	r4,r4,255
81110910:	200895fa 	slli	r4,r4,23
81110914:	38803fcc 	andi	r2,r7,255
81110918:	00c02034 	movhi	r3,128
8111091c:	100497fa 	slli	r2,r2,31
81110920:	18ffffc4 	addi	r3,r3,-1
81110924:	30c6703a 	and	r3,r6,r3
81110928:	1906b03a 	or	r3,r3,r4
8111092c:	1884b03a 	or	r2,r3,r2
81110930:	dfc00a17 	ldw	ra,40(sp)
81110934:	df000917 	ldw	fp,36(sp)
81110938:	ddc00817 	ldw	r23,32(sp)
8111093c:	dd800717 	ldw	r22,28(sp)
81110940:	dd400617 	ldw	r21,24(sp)
81110944:	dd000517 	ldw	r20,20(sp)
81110948:	dcc00417 	ldw	r19,16(sp)
8111094c:	dc800317 	ldw	r18,12(sp)
81110950:	dc400217 	ldw	r17,8(sp)
81110954:	dc000117 	ldw	r16,4(sp)
81110958:	dec00b04 	addi	sp,sp,44
8111095c:	f800283a 	ret
81110960:	90002b1e 	bne	r18,zero,81110a10 <__divsf3+0x24c>
81110964:	04000104 	movi	r16,4
81110968:	05c00044 	movi	r23,1
8111096c:	003fb106 	br	81110834 <__reset+0xfb0f0834>
81110970:	8800251e 	bne	r17,zero,81110a08 <__divsf3+0x244>
81110974:	01400084 	movi	r5,2
81110978:	00000206 	br	81110984 <__divsf3+0x1c0>
8111097c:	88001a1e 	bne	r17,zero,811109e8 <__divsf3+0x224>
81110980:	01400044 	movi	r5,1
81110984:	8160b03a 	or	r16,r16,r5
81110988:	802090ba 	slli	r16,r16,2
8111098c:	00e04474 	movhi	r3,33041
81110990:	18c26a04 	addi	r3,r3,2472
81110994:	80e1883a 	add	r16,r16,r3
81110998:	80c00017 	ldw	r3,0(r16)
8111099c:	9d44f03a 	xor	r2,r19,r21
811109a0:	a18dc83a 	sub	r6,r20,r6
811109a4:	1800683a 	jmp	r3
811109a8:	81110900 	call	88111090 <__reset+0x20f1090>
811109ac:	81110900 	call	88111090 <__reset+0x20f1090>
811109b0:	81110b4c 	andi	r4,r16,17453
811109b4:	811108e8 	cmpgeui	r4,r16,17443
811109b8:	81110b4c 	andi	r4,r16,17453
811109bc:	81110a48 	cmpgei	r4,r16,17449
811109c0:	81110b4c 	andi	r4,r16,17453
811109c4:	811108e8 	cmpgeui	r4,r16,17443
811109c8:	81110900 	call	88111090 <__reset+0x20f1090>
811109cc:	81110900 	call	88111090 <__reset+0x20f1090>
811109d0:	81110a48 	cmpgei	r4,r16,17449
811109d4:	811108e8 	cmpgeui	r4,r16,17443
811109d8:	81110b5c 	xori	r4,r16,17453
811109dc:	81110b5c 	xori	r4,r16,17453
811109e0:	81110b5c 	xori	r4,r16,17453
811109e4:	81110b74 	orhi	r4,r16,17453
811109e8:	8809883a 	mov	r4,r17
811109ec:	1111c140 	call	81111c14 <__clzsi2>
811109f0:	10fffec4 	addi	r3,r2,-5
811109f4:	10801d84 	addi	r2,r2,118
811109f8:	88e2983a 	sll	r17,r17,r3
811109fc:	008dc83a 	sub	r6,zero,r2
81110a00:	000b883a 	mov	r5,zero
81110a04:	003f9906 	br	8111086c <__reset+0xfb0f086c>
81110a08:	014000c4 	movi	r5,3
81110a0c:	003f9706 	br	8111086c <__reset+0xfb0f086c>
81110a10:	9009883a 	mov	r4,r18
81110a14:	d9400015 	stw	r5,0(sp)
81110a18:	1111c140 	call	81111c14 <__clzsi2>
81110a1c:	10fffec4 	addi	r3,r2,-5
81110a20:	11801d84 	addi	r6,r2,118
81110a24:	90e4983a 	sll	r18,r18,r3
81110a28:	01a9c83a 	sub	r20,zero,r6
81110a2c:	0021883a 	mov	r16,zero
81110a30:	002f883a 	mov	r23,zero
81110a34:	d9400017 	ldw	r5,0(sp)
81110a38:	003f7e06 	br	81110834 <__reset+0xfb0f0834>
81110a3c:	04000304 	movi	r16,12
81110a40:	05c000c4 	movi	r23,3
81110a44:	003f7b06 	br	81110834 <__reset+0xfb0f0834>
81110a48:	01802034 	movhi	r6,128
81110a4c:	000f883a 	mov	r7,zero
81110a50:	31bfffc4 	addi	r6,r6,-1
81110a54:	013fffc4 	movi	r4,-1
81110a58:	003fac06 	br	8111090c <__reset+0xfb0f090c>
81110a5c:	01400044 	movi	r5,1
81110a60:	2909c83a 	sub	r4,r5,r4
81110a64:	00c006c4 	movi	r3,27
81110a68:	19004b0e 	bge	r3,r4,81110b98 <__divsf3+0x3d4>
81110a6c:	114e703a 	and	r7,r2,r5
81110a70:	0009883a 	mov	r4,zero
81110a74:	000d883a 	mov	r6,zero
81110a78:	003fa406 	br	8111090c <__reset+0xfb0f090c>
81110a7c:	9006917a 	slli	r3,r18,5
81110a80:	8822917a 	slli	r17,r17,5
81110a84:	1c40372e 	bgeu	r3,r17,81110b64 <__divsf3+0x3a0>
81110a88:	31bfffc4 	addi	r6,r6,-1
81110a8c:	010006c4 	movi	r4,27
81110a90:	000b883a 	mov	r5,zero
81110a94:	180f883a 	mov	r7,r3
81110a98:	294b883a 	add	r5,r5,r5
81110a9c:	18c7883a 	add	r3,r3,r3
81110aa0:	38000116 	blt	r7,zero,81110aa8 <__divsf3+0x2e4>
81110aa4:	1c400236 	bltu	r3,r17,81110ab0 <__divsf3+0x2ec>
81110aa8:	1c47c83a 	sub	r3,r3,r17
81110aac:	29400054 	ori	r5,r5,1
81110ab0:	213fffc4 	addi	r4,r4,-1
81110ab4:	203ff71e 	bne	r4,zero,81110a94 <__reset+0xfb0f0a94>
81110ab8:	1806c03a 	cmpne	r3,r3,zero
81110abc:	1962b03a 	or	r17,r3,r5
81110ac0:	31001fc4 	addi	r4,r6,127
81110ac4:	013fe50e 	bge	zero,r4,81110a5c <__reset+0xfb0f0a5c>
81110ac8:	88c001cc 	andi	r3,r17,7
81110acc:	18000426 	beq	r3,zero,81110ae0 <__divsf3+0x31c>
81110ad0:	88c003cc 	andi	r3,r17,15
81110ad4:	01400104 	movi	r5,4
81110ad8:	19400126 	beq	r3,r5,81110ae0 <__divsf3+0x31c>
81110adc:	8963883a 	add	r17,r17,r5
81110ae0:	88c2002c 	andhi	r3,r17,2048
81110ae4:	18000426 	beq	r3,zero,81110af8 <__divsf3+0x334>
81110ae8:	00fe0034 	movhi	r3,63488
81110aec:	18ffffc4 	addi	r3,r3,-1
81110af0:	31002004 	addi	r4,r6,128
81110af4:	88e2703a 	and	r17,r17,r3
81110af8:	00c03f84 	movi	r3,254
81110afc:	193f8016 	blt	r3,r4,81110900 <__reset+0xfb0f0900>
81110b00:	880c91ba 	slli	r6,r17,6
81110b04:	11c0004c 	andi	r7,r2,1
81110b08:	300cd27a 	srli	r6,r6,9
81110b0c:	003f7f06 	br	8111090c <__reset+0xfb0f090c>
81110b10:	9080102c 	andhi	r2,r18,64
81110b14:	10000226 	beq	r2,zero,81110b20 <__divsf3+0x35c>
81110b18:	8880102c 	andhi	r2,r17,64
81110b1c:	10001826 	beq	r2,zero,81110b80 <__divsf3+0x3bc>
81110b20:	00802034 	movhi	r2,128
81110b24:	91801034 	orhi	r6,r18,64
81110b28:	10bfffc4 	addi	r2,r2,-1
81110b2c:	980f883a 	mov	r7,r19
81110b30:	308c703a 	and	r6,r6,r2
81110b34:	003fc706 	br	81110a54 <__reset+0xfb0f0a54>
81110b38:	008000c4 	movi	r2,3
81110b3c:	b8802d26 	beq	r23,r2,81110bf4 <__divsf3+0x430>
81110b40:	00c00044 	movi	r3,1
81110b44:	b005883a 	mov	r2,r22
81110b48:	b8ffdd1e 	bne	r23,r3,81110ac0 <__reset+0xfb0f0ac0>
81110b4c:	11c0004c 	andi	r7,r2,1
81110b50:	0009883a 	mov	r4,zero
81110b54:	000d883a 	mov	r6,zero
81110b58:	003f6c06 	br	8111090c <__reset+0xfb0f090c>
81110b5c:	9023883a 	mov	r17,r18
81110b60:	003f6406 	br	811108f4 <__reset+0xfb0f08f4>
81110b64:	1c47c83a 	sub	r3,r3,r17
81110b68:	01000684 	movi	r4,26
81110b6c:	01400044 	movi	r5,1
81110b70:	003fc806 	br	81110a94 <__reset+0xfb0f0a94>
81110b74:	9080102c 	andhi	r2,r18,64
81110b78:	103fe926 	beq	r2,zero,81110b20 <__reset+0xfb0f0b20>
81110b7c:	0023883a 	mov	r17,zero
81110b80:	00802034 	movhi	r2,128
81110b84:	89801034 	orhi	r6,r17,64
81110b88:	10bfffc4 	addi	r2,r2,-1
81110b8c:	a80f883a 	mov	r7,r21
81110b90:	308c703a 	and	r6,r6,r2
81110b94:	003faf06 	br	81110a54 <__reset+0xfb0f0a54>
81110b98:	01c00804 	movi	r7,32
81110b9c:	390fc83a 	sub	r7,r7,r4
81110ba0:	89ce983a 	sll	r7,r17,r7
81110ba4:	890ad83a 	srl	r5,r17,r4
81110ba8:	380ec03a 	cmpne	r7,r7,zero
81110bac:	29cab03a 	or	r5,r5,r7
81110bb0:	28c001cc 	andi	r3,r5,7
81110bb4:	18000426 	beq	r3,zero,81110bc8 <__divsf3+0x404>
81110bb8:	28c003cc 	andi	r3,r5,15
81110bbc:	01000104 	movi	r4,4
81110bc0:	19000126 	beq	r3,r4,81110bc8 <__divsf3+0x404>
81110bc4:	290b883a 	add	r5,r5,r4
81110bc8:	28c1002c 	andhi	r3,r5,1024
81110bcc:	18000426 	beq	r3,zero,81110be0 <__divsf3+0x41c>
81110bd0:	11c0004c 	andi	r7,r2,1
81110bd4:	01000044 	movi	r4,1
81110bd8:	000d883a 	mov	r6,zero
81110bdc:	003f4b06 	br	8111090c <__reset+0xfb0f090c>
81110be0:	280a91ba 	slli	r5,r5,6
81110be4:	11c0004c 	andi	r7,r2,1
81110be8:	0009883a 	mov	r4,zero
81110bec:	280cd27a 	srli	r6,r5,9
81110bf0:	003f4606 	br	8111090c <__reset+0xfb0f090c>
81110bf4:	00802034 	movhi	r2,128
81110bf8:	89801034 	orhi	r6,r17,64
81110bfc:	10bfffc4 	addi	r2,r2,-1
81110c00:	b00f883a 	mov	r7,r22
81110c04:	308c703a 	and	r6,r6,r2
81110c08:	003f9206 	br	81110a54 <__reset+0xfb0f0a54>

81110c0c <__mulsf3>:
81110c0c:	defff504 	addi	sp,sp,-44
81110c10:	de00012e 	bgeu	sp,et,81110c18 <__mulsf3+0xc>
81110c14:	003b68fa 	trap	3
81110c18:	dc000115 	stw	r16,4(sp)
81110c1c:	2020d5fa 	srli	r16,r4,23
81110c20:	dd400615 	stw	r21,24(sp)
81110c24:	202ad7fa 	srli	r21,r4,31
81110c28:	dc800315 	stw	r18,12(sp)
81110c2c:	04802034 	movhi	r18,128
81110c30:	df000915 	stw	fp,36(sp)
81110c34:	dd000515 	stw	r20,20(sp)
81110c38:	94bfffc4 	addi	r18,r18,-1
81110c3c:	dfc00a15 	stw	ra,40(sp)
81110c40:	ddc00815 	stw	r23,32(sp)
81110c44:	dd800715 	stw	r22,28(sp)
81110c48:	dcc00415 	stw	r19,16(sp)
81110c4c:	dc400215 	stw	r17,8(sp)
81110c50:	84003fcc 	andi	r16,r16,255
81110c54:	9124703a 	and	r18,r18,r4
81110c58:	a829883a 	mov	r20,r21
81110c5c:	af003fcc 	andi	fp,r21,255
81110c60:	80005426 	beq	r16,zero,81110db4 <__mulsf3+0x1a8>
81110c64:	00803fc4 	movi	r2,255
81110c68:	80802f26 	beq	r16,r2,81110d28 <__mulsf3+0x11c>
81110c6c:	91002034 	orhi	r4,r18,128
81110c70:	202490fa 	slli	r18,r4,3
81110c74:	843fe044 	addi	r16,r16,-127
81110c78:	0023883a 	mov	r17,zero
81110c7c:	002f883a 	mov	r23,zero
81110c80:	2804d5fa 	srli	r2,r5,23
81110c84:	282cd7fa 	srli	r22,r5,31
81110c88:	01002034 	movhi	r4,128
81110c8c:	213fffc4 	addi	r4,r4,-1
81110c90:	10803fcc 	andi	r2,r2,255
81110c94:	2166703a 	and	r19,r4,r5
81110c98:	b1803fcc 	andi	r6,r22,255
81110c9c:	10004c26 	beq	r2,zero,81110dd0 <__mulsf3+0x1c4>
81110ca0:	00c03fc4 	movi	r3,255
81110ca4:	10c04726 	beq	r2,r3,81110dc4 <__mulsf3+0x1b8>
81110ca8:	99002034 	orhi	r4,r19,128
81110cac:	202690fa 	slli	r19,r4,3
81110cb0:	10bfe044 	addi	r2,r2,-127
81110cb4:	0007883a 	mov	r3,zero
81110cb8:	80a1883a 	add	r16,r16,r2
81110cbc:	010003c4 	movi	r4,15
81110cc0:	1c44b03a 	or	r2,r3,r17
81110cc4:	b56af03a 	xor	r21,r22,r21
81110cc8:	81c00044 	addi	r7,r16,1
81110ccc:	20806b36 	bltu	r4,r2,81110e7c <__mulsf3+0x270>
81110cd0:	100490ba 	slli	r2,r2,2
81110cd4:	01204474 	movhi	r4,33041
81110cd8:	21033a04 	addi	r4,r4,3304
81110cdc:	1105883a 	add	r2,r2,r4
81110ce0:	10800017 	ldw	r2,0(r2)
81110ce4:	1000683a 	jmp	r2
81110ce8:	81110e7c 	xorhi	r4,r16,17465
81110cec:	81110d3c 	xorhi	r4,r16,17460
81110cf0:	81110d3c 	xorhi	r4,r16,17460
81110cf4:	81110d38 	rdprs	r4,r16,17460
81110cf8:	81110e60 	cmpeqi	r4,r16,17465
81110cfc:	81110e60 	cmpeqi	r4,r16,17465
81110d00:	81110e4c 	andi	r4,r16,17465
81110d04:	81110d38 	rdprs	r4,r16,17460
81110d08:	81110e60 	cmpeqi	r4,r16,17465
81110d0c:	81110e4c 	andi	r4,r16,17465
81110d10:	81110e60 	cmpeqi	r4,r16,17465
81110d14:	81110d38 	rdprs	r4,r16,17460
81110d18:	81110e6c 	andhi	r4,r16,17465
81110d1c:	81110e6c 	andhi	r4,r16,17465
81110d20:	81110e6c 	andhi	r4,r16,17465
81110d24:	81110f48 	cmpgei	r4,r16,17469
81110d28:	90003b1e 	bne	r18,zero,81110e18 <__mulsf3+0x20c>
81110d2c:	04400204 	movi	r17,8
81110d30:	05c00084 	movi	r23,2
81110d34:	003fd206 	br	81110c80 <__reset+0xfb0f0c80>
81110d38:	302b883a 	mov	r21,r6
81110d3c:	00800084 	movi	r2,2
81110d40:	18802626 	beq	r3,r2,81110ddc <__mulsf3+0x1d0>
81110d44:	008000c4 	movi	r2,3
81110d48:	1880ab26 	beq	r3,r2,81110ff8 <__mulsf3+0x3ec>
81110d4c:	00800044 	movi	r2,1
81110d50:	1880a21e 	bne	r3,r2,81110fdc <__mulsf3+0x3d0>
81110d54:	a829883a 	mov	r20,r21
81110d58:	0007883a 	mov	r3,zero
81110d5c:	0009883a 	mov	r4,zero
81110d60:	18803fcc 	andi	r2,r3,255
81110d64:	100695fa 	slli	r3,r2,23
81110d68:	a0803fcc 	andi	r2,r20,255
81110d6c:	100a97fa 	slli	r5,r2,31
81110d70:	00802034 	movhi	r2,128
81110d74:	10bfffc4 	addi	r2,r2,-1
81110d78:	2084703a 	and	r2,r4,r2
81110d7c:	10c4b03a 	or	r2,r2,r3
81110d80:	1144b03a 	or	r2,r2,r5
81110d84:	dfc00a17 	ldw	ra,40(sp)
81110d88:	df000917 	ldw	fp,36(sp)
81110d8c:	ddc00817 	ldw	r23,32(sp)
81110d90:	dd800717 	ldw	r22,28(sp)
81110d94:	dd400617 	ldw	r21,24(sp)
81110d98:	dd000517 	ldw	r20,20(sp)
81110d9c:	dcc00417 	ldw	r19,16(sp)
81110da0:	dc800317 	ldw	r18,12(sp)
81110da4:	dc400217 	ldw	r17,8(sp)
81110da8:	dc000117 	ldw	r16,4(sp)
81110dac:	dec00b04 	addi	sp,sp,44
81110db0:	f800283a 	ret
81110db4:	90000d1e 	bne	r18,zero,81110dec <__mulsf3+0x1e0>
81110db8:	04400104 	movi	r17,4
81110dbc:	05c00044 	movi	r23,1
81110dc0:	003faf06 	br	81110c80 <__reset+0xfb0f0c80>
81110dc4:	9806c03a 	cmpne	r3,r19,zero
81110dc8:	18c00084 	addi	r3,r3,2
81110dcc:	003fba06 	br	81110cb8 <__reset+0xfb0f0cb8>
81110dd0:	9800141e 	bne	r19,zero,81110e24 <__mulsf3+0x218>
81110dd4:	00c00044 	movi	r3,1
81110dd8:	003fb706 	br	81110cb8 <__reset+0xfb0f0cb8>
81110ddc:	a829883a 	mov	r20,r21
81110de0:	00ffffc4 	movi	r3,-1
81110de4:	0009883a 	mov	r4,zero
81110de8:	003fdd06 	br	81110d60 <__reset+0xfb0f0d60>
81110dec:	9009883a 	mov	r4,r18
81110df0:	d9400015 	stw	r5,0(sp)
81110df4:	1111c140 	call	81111c14 <__clzsi2>
81110df8:	10fffec4 	addi	r3,r2,-5
81110dfc:	10801d84 	addi	r2,r2,118
81110e00:	90e4983a 	sll	r18,r18,r3
81110e04:	00a1c83a 	sub	r16,zero,r2
81110e08:	0023883a 	mov	r17,zero
81110e0c:	002f883a 	mov	r23,zero
81110e10:	d9400017 	ldw	r5,0(sp)
81110e14:	003f9a06 	br	81110c80 <__reset+0xfb0f0c80>
81110e18:	04400304 	movi	r17,12
81110e1c:	05c000c4 	movi	r23,3
81110e20:	003f9706 	br	81110c80 <__reset+0xfb0f0c80>
81110e24:	9809883a 	mov	r4,r19
81110e28:	d9800015 	stw	r6,0(sp)
81110e2c:	1111c140 	call	81111c14 <__clzsi2>
81110e30:	10fffec4 	addi	r3,r2,-5
81110e34:	10801d84 	addi	r2,r2,118
81110e38:	98e6983a 	sll	r19,r19,r3
81110e3c:	0085c83a 	sub	r2,zero,r2
81110e40:	0007883a 	mov	r3,zero
81110e44:	d9800017 	ldw	r6,0(sp)
81110e48:	003f9b06 	br	81110cb8 <__reset+0xfb0f0cb8>
81110e4c:	01002034 	movhi	r4,128
81110e50:	0029883a 	mov	r20,zero
81110e54:	213fffc4 	addi	r4,r4,-1
81110e58:	00ffffc4 	movi	r3,-1
81110e5c:	003fc006 	br	81110d60 <__reset+0xfb0f0d60>
81110e60:	9027883a 	mov	r19,r18
81110e64:	b807883a 	mov	r3,r23
81110e68:	003fb406 	br	81110d3c <__reset+0xfb0f0d3c>
81110e6c:	9027883a 	mov	r19,r18
81110e70:	e02b883a 	mov	r21,fp
81110e74:	b807883a 	mov	r3,r23
81110e78:	003fb006 	br	81110d3c <__reset+0xfb0f0d3c>
81110e7c:	9004d43a 	srli	r2,r18,16
81110e80:	9810d43a 	srli	r8,r19,16
81110e84:	94bfffcc 	andi	r18,r18,65535
81110e88:	993fffcc 	andi	r4,r19,65535
81110e8c:	910d383a 	mul	r6,r18,r4
81110e90:	20a7383a 	mul	r19,r4,r2
81110e94:	9225383a 	mul	r18,r18,r8
81110e98:	3006d43a 	srli	r3,r6,16
81110e9c:	1211383a 	mul	r8,r2,r8
81110ea0:	94e5883a 	add	r18,r18,r19
81110ea4:	1c87883a 	add	r3,r3,r18
81110ea8:	1cc0022e 	bgeu	r3,r19,81110eb4 <__mulsf3+0x2a8>
81110eac:	00800074 	movhi	r2,1
81110eb0:	4091883a 	add	r8,r8,r2
81110eb4:	1804943a 	slli	r2,r3,16
81110eb8:	31bfffcc 	andi	r6,r6,65535
81110ebc:	1806d43a 	srli	r3,r3,16
81110ec0:	1185883a 	add	r2,r2,r6
81110ec4:	102691ba 	slli	r19,r2,6
81110ec8:	1a07883a 	add	r3,r3,r8
81110ecc:	1004d6ba 	srli	r2,r2,26
81110ed0:	180891ba 	slli	r4,r3,6
81110ed4:	9826c03a 	cmpne	r19,r19,zero
81110ed8:	9884b03a 	or	r2,r19,r2
81110edc:	1126b03a 	or	r19,r2,r4
81110ee0:	9882002c 	andhi	r2,r19,2048
81110ee4:	10000426 	beq	r2,zero,81110ef8 <__mulsf3+0x2ec>
81110ee8:	9804d07a 	srli	r2,r19,1
81110eec:	9900004c 	andi	r4,r19,1
81110ef0:	3821883a 	mov	r16,r7
81110ef4:	1126b03a 	or	r19,r2,r4
81110ef8:	80c01fc4 	addi	r3,r16,127
81110efc:	00c0210e 	bge	zero,r3,81110f84 <__mulsf3+0x378>
81110f00:	988001cc 	andi	r2,r19,7
81110f04:	10000426 	beq	r2,zero,81110f18 <__mulsf3+0x30c>
81110f08:	988003cc 	andi	r2,r19,15
81110f0c:	01000104 	movi	r4,4
81110f10:	11000126 	beq	r2,r4,81110f18 <__mulsf3+0x30c>
81110f14:	9927883a 	add	r19,r19,r4
81110f18:	9882002c 	andhi	r2,r19,2048
81110f1c:	10000426 	beq	r2,zero,81110f30 <__mulsf3+0x324>
81110f20:	00be0034 	movhi	r2,63488
81110f24:	10bfffc4 	addi	r2,r2,-1
81110f28:	80c02004 	addi	r3,r16,128
81110f2c:	98a6703a 	and	r19,r19,r2
81110f30:	00803f84 	movi	r2,254
81110f34:	10ffa916 	blt	r2,r3,81110ddc <__reset+0xfb0f0ddc>
81110f38:	980891ba 	slli	r4,r19,6
81110f3c:	a829883a 	mov	r20,r21
81110f40:	2008d27a 	srli	r4,r4,9
81110f44:	003f8606 	br	81110d60 <__reset+0xfb0f0d60>
81110f48:	9080102c 	andhi	r2,r18,64
81110f4c:	10000826 	beq	r2,zero,81110f70 <__mulsf3+0x364>
81110f50:	9880102c 	andhi	r2,r19,64
81110f54:	1000061e 	bne	r2,zero,81110f70 <__mulsf3+0x364>
81110f58:	00802034 	movhi	r2,128
81110f5c:	99001034 	orhi	r4,r19,64
81110f60:	10bfffc4 	addi	r2,r2,-1
81110f64:	b029883a 	mov	r20,r22
81110f68:	2088703a 	and	r4,r4,r2
81110f6c:	003fba06 	br	81110e58 <__reset+0xfb0f0e58>
81110f70:	00802034 	movhi	r2,128
81110f74:	91001034 	orhi	r4,r18,64
81110f78:	10bfffc4 	addi	r2,r2,-1
81110f7c:	2088703a 	and	r4,r4,r2
81110f80:	003fb506 	br	81110e58 <__reset+0xfb0f0e58>
81110f84:	00800044 	movi	r2,1
81110f88:	10c7c83a 	sub	r3,r2,r3
81110f8c:	008006c4 	movi	r2,27
81110f90:	10ff7016 	blt	r2,r3,81110d54 <__reset+0xfb0f0d54>
81110f94:	00800804 	movi	r2,32
81110f98:	10c5c83a 	sub	r2,r2,r3
81110f9c:	9884983a 	sll	r2,r19,r2
81110fa0:	98c6d83a 	srl	r3,r19,r3
81110fa4:	1004c03a 	cmpne	r2,r2,zero
81110fa8:	1884b03a 	or	r2,r3,r2
81110fac:	10c001cc 	andi	r3,r2,7
81110fb0:	18000426 	beq	r3,zero,81110fc4 <__mulsf3+0x3b8>
81110fb4:	10c003cc 	andi	r3,r2,15
81110fb8:	01000104 	movi	r4,4
81110fbc:	19000126 	beq	r3,r4,81110fc4 <__mulsf3+0x3b8>
81110fc0:	1105883a 	add	r2,r2,r4
81110fc4:	10c1002c 	andhi	r3,r2,1024
81110fc8:	18000626 	beq	r3,zero,81110fe4 <__mulsf3+0x3d8>
81110fcc:	a829883a 	mov	r20,r21
81110fd0:	00c00044 	movi	r3,1
81110fd4:	0009883a 	mov	r4,zero
81110fd8:	003f6106 	br	81110d60 <__reset+0xfb0f0d60>
81110fdc:	3821883a 	mov	r16,r7
81110fe0:	003fc506 	br	81110ef8 <__reset+0xfb0f0ef8>
81110fe4:	100491ba 	slli	r2,r2,6
81110fe8:	a829883a 	mov	r20,r21
81110fec:	0007883a 	mov	r3,zero
81110ff0:	1008d27a 	srli	r4,r2,9
81110ff4:	003f5a06 	br	81110d60 <__reset+0xfb0f0d60>
81110ff8:	00802034 	movhi	r2,128
81110ffc:	99001034 	orhi	r4,r19,64
81111000:	10bfffc4 	addi	r2,r2,-1
81111004:	a829883a 	mov	r20,r21
81111008:	2088703a 	and	r4,r4,r2
8111100c:	003f9206 	br	81110e58 <__reset+0xfb0f0e58>

81111010 <__floatsisf>:
81111010:	defffd04 	addi	sp,sp,-12
81111014:	de00012e 	bgeu	sp,et,8111101c <__floatsisf+0xc>
81111018:	003b68fa 	trap	3
8111101c:	dfc00215 	stw	ra,8(sp)
81111020:	dc400115 	stw	r17,4(sp)
81111024:	dc000015 	stw	r16,0(sp)
81111028:	20003526 	beq	r4,zero,81111100 <__floatsisf+0xf0>
8111102c:	2021883a 	mov	r16,r4
81111030:	2022d7fa 	srli	r17,r4,31
81111034:	20003616 	blt	r4,zero,81111110 <__floatsisf+0x100>
81111038:	8009883a 	mov	r4,r16
8111103c:	1111c140 	call	81111c14 <__clzsi2>
81111040:	00c02784 	movi	r3,158
81111044:	1887c83a 	sub	r3,r3,r2
81111048:	01002584 	movi	r4,150
8111104c:	20c01416 	blt	r4,r3,811110a0 <__floatsisf+0x90>
81111050:	20c9c83a 	sub	r4,r4,r3
81111054:	8120983a 	sll	r16,r16,r4
81111058:	00802034 	movhi	r2,128
8111105c:	10bfffc4 	addi	r2,r2,-1
81111060:	8809883a 	mov	r4,r17
81111064:	80a0703a 	and	r16,r16,r2
81111068:	18803fcc 	andi	r2,r3,255
8111106c:	100695fa 	slli	r3,r2,23
81111070:	20803fcc 	andi	r2,r4,255
81111074:	100897fa 	slli	r4,r2,31
81111078:	00802034 	movhi	r2,128
8111107c:	10bfffc4 	addi	r2,r2,-1
81111080:	8084703a 	and	r2,r16,r2
81111084:	10c4b03a 	or	r2,r2,r3
81111088:	1104b03a 	or	r2,r2,r4
8111108c:	dfc00217 	ldw	ra,8(sp)
81111090:	dc400117 	ldw	r17,4(sp)
81111094:	dc000017 	ldw	r16,0(sp)
81111098:	dec00304 	addi	sp,sp,12
8111109c:	f800283a 	ret
811110a0:	01002644 	movi	r4,153
811110a4:	20c01c16 	blt	r4,r3,81111118 <__floatsisf+0x108>
811110a8:	20c9c83a 	sub	r4,r4,r3
811110ac:	8120983a 	sll	r16,r16,r4
811110b0:	013f0034 	movhi	r4,64512
811110b4:	213fffc4 	addi	r4,r4,-1
811110b8:	814001cc 	andi	r5,r16,7
811110bc:	8108703a 	and	r4,r16,r4
811110c0:	28000426 	beq	r5,zero,811110d4 <__floatsisf+0xc4>
811110c4:	840003cc 	andi	r16,r16,15
811110c8:	01400104 	movi	r5,4
811110cc:	81400126 	beq	r16,r5,811110d4 <__floatsisf+0xc4>
811110d0:	2149883a 	add	r4,r4,r5
811110d4:	2141002c 	andhi	r5,r4,1024
811110d8:	28000526 	beq	r5,zero,811110f0 <__floatsisf+0xe0>
811110dc:	00c027c4 	movi	r3,159
811110e0:	1887c83a 	sub	r3,r3,r2
811110e4:	00bf0034 	movhi	r2,64512
811110e8:	10bfffc4 	addi	r2,r2,-1
811110ec:	2088703a 	and	r4,r4,r2
811110f0:	202091ba 	slli	r16,r4,6
811110f4:	8809883a 	mov	r4,r17
811110f8:	8020d27a 	srli	r16,r16,9
811110fc:	003fda06 	br	81111068 <__reset+0xfb0f1068>
81111100:	0009883a 	mov	r4,zero
81111104:	0007883a 	mov	r3,zero
81111108:	0021883a 	mov	r16,zero
8111110c:	003fd606 	br	81111068 <__reset+0xfb0f1068>
81111110:	0121c83a 	sub	r16,zero,r4
81111114:	003fc806 	br	81111038 <__reset+0xfb0f1038>
81111118:	01002e44 	movi	r4,185
8111111c:	20c9c83a 	sub	r4,r4,r3
81111120:	01400144 	movi	r5,5
81111124:	8108983a 	sll	r4,r16,r4
81111128:	288bc83a 	sub	r5,r5,r2
8111112c:	8160d83a 	srl	r16,r16,r5
81111130:	2008c03a 	cmpne	r4,r4,zero
81111134:	8120b03a 	or	r16,r16,r4
81111138:	003fdd06 	br	811110b0 <__reset+0xfb0f10b0>

8111113c <__floatunsisf>:
8111113c:	defffe04 	addi	sp,sp,-8
81111140:	de00012e 	bgeu	sp,et,81111148 <__floatunsisf+0xc>
81111144:	003b68fa 	trap	3
81111148:	dfc00115 	stw	ra,4(sp)
8111114c:	dc000015 	stw	r16,0(sp)
81111150:	20002c26 	beq	r4,zero,81111204 <__floatunsisf+0xc8>
81111154:	2021883a 	mov	r16,r4
81111158:	1111c140 	call	81111c14 <__clzsi2>
8111115c:	00c02784 	movi	r3,158
81111160:	1887c83a 	sub	r3,r3,r2
81111164:	01002584 	movi	r4,150
81111168:	20c00f16 	blt	r4,r3,811111a8 <__floatunsisf+0x6c>
8111116c:	20c9c83a 	sub	r4,r4,r3
81111170:	8108983a 	sll	r4,r16,r4
81111174:	00802034 	movhi	r2,128
81111178:	10bfffc4 	addi	r2,r2,-1
8111117c:	2088703a 	and	r4,r4,r2
81111180:	18803fcc 	andi	r2,r3,255
81111184:	100695fa 	slli	r3,r2,23
81111188:	00802034 	movhi	r2,128
8111118c:	10bfffc4 	addi	r2,r2,-1
81111190:	2084703a 	and	r2,r4,r2
81111194:	10c4b03a 	or	r2,r2,r3
81111198:	dfc00117 	ldw	ra,4(sp)
8111119c:	dc000017 	ldw	r16,0(sp)
811111a0:	dec00204 	addi	sp,sp,8
811111a4:	f800283a 	ret
811111a8:	01002644 	movi	r4,153
811111ac:	20c01816 	blt	r4,r3,81111210 <__floatunsisf+0xd4>
811111b0:	20c9c83a 	sub	r4,r4,r3
811111b4:	8108983a 	sll	r4,r16,r4
811111b8:	017f0034 	movhi	r5,64512
811111bc:	297fffc4 	addi	r5,r5,-1
811111c0:	218001cc 	andi	r6,r4,7
811111c4:	214a703a 	and	r5,r4,r5
811111c8:	30000426 	beq	r6,zero,811111dc <__floatunsisf+0xa0>
811111cc:	210003cc 	andi	r4,r4,15
811111d0:	01800104 	movi	r6,4
811111d4:	21800126 	beq	r4,r6,811111dc <__floatunsisf+0xa0>
811111d8:	298b883a 	add	r5,r5,r6
811111dc:	2901002c 	andhi	r4,r5,1024
811111e0:	20000526 	beq	r4,zero,811111f8 <__floatunsisf+0xbc>
811111e4:	00c027c4 	movi	r3,159
811111e8:	1887c83a 	sub	r3,r3,r2
811111ec:	00bf0034 	movhi	r2,64512
811111f0:	10bfffc4 	addi	r2,r2,-1
811111f4:	288a703a 	and	r5,r5,r2
811111f8:	280891ba 	slli	r4,r5,6
811111fc:	2008d27a 	srli	r4,r4,9
81111200:	003fdf06 	br	81111180 <__reset+0xfb0f1180>
81111204:	0007883a 	mov	r3,zero
81111208:	0009883a 	mov	r4,zero
8111120c:	003fdc06 	br	81111180 <__reset+0xfb0f1180>
81111210:	01402e44 	movi	r5,185
81111214:	28cbc83a 	sub	r5,r5,r3
81111218:	01000144 	movi	r4,5
8111121c:	2089c83a 	sub	r4,r4,r2
81111220:	814a983a 	sll	r5,r16,r5
81111224:	8108d83a 	srl	r4,r16,r4
81111228:	2820c03a 	cmpne	r16,r5,zero
8111122c:	2408b03a 	or	r4,r4,r16
81111230:	003fe106 	br	811111b8 <__reset+0xfb0f11b8>

81111234 <__muldf3>:
81111234:	defff304 	addi	sp,sp,-52
81111238:	2804d53a 	srli	r2,r5,20
8111123c:	de00012e 	bgeu	sp,et,81111244 <__muldf3+0x10>
81111240:	003b68fa 	trap	3
81111244:	dd800915 	stw	r22,36(sp)
81111248:	282cd7fa 	srli	r22,r5,31
8111124c:	dc000315 	stw	r16,12(sp)
81111250:	04000434 	movhi	r16,16
81111254:	dd400815 	stw	r21,32(sp)
81111258:	dc800515 	stw	r18,20(sp)
8111125c:	843fffc4 	addi	r16,r16,-1
81111260:	dfc00c15 	stw	ra,48(sp)
81111264:	df000b15 	stw	fp,44(sp)
81111268:	ddc00a15 	stw	r23,40(sp)
8111126c:	dd000715 	stw	r20,28(sp)
81111270:	dcc00615 	stw	r19,24(sp)
81111274:	dc400415 	stw	r17,16(sp)
81111278:	1481ffcc 	andi	r18,r2,2047
8111127c:	2c20703a 	and	r16,r5,r16
81111280:	b02b883a 	mov	r21,r22
81111284:	b2403fcc 	andi	r9,r22,255
81111288:	90006026 	beq	r18,zero,8111140c <__muldf3+0x1d8>
8111128c:	0081ffc4 	movi	r2,2047
81111290:	2029883a 	mov	r20,r4
81111294:	90803626 	beq	r18,r2,81111370 <__muldf3+0x13c>
81111298:	80800434 	orhi	r2,r16,16
8111129c:	100490fa 	slli	r2,r2,3
811112a0:	2020d77a 	srli	r16,r4,29
811112a4:	202890fa 	slli	r20,r4,3
811112a8:	94bf0044 	addi	r18,r18,-1023
811112ac:	80a0b03a 	or	r16,r16,r2
811112b0:	0027883a 	mov	r19,zero
811112b4:	0039883a 	mov	fp,zero
811112b8:	3804d53a 	srli	r2,r7,20
811112bc:	382ed7fa 	srli	r23,r7,31
811112c0:	04400434 	movhi	r17,16
811112c4:	8c7fffc4 	addi	r17,r17,-1
811112c8:	1081ffcc 	andi	r2,r2,2047
811112cc:	3011883a 	mov	r8,r6
811112d0:	3c62703a 	and	r17,r7,r17
811112d4:	ba803fcc 	andi	r10,r23,255
811112d8:	10006d26 	beq	r2,zero,81111490 <__muldf3+0x25c>
811112dc:	00c1ffc4 	movi	r3,2047
811112e0:	10c06526 	beq	r2,r3,81111478 <__muldf3+0x244>
811112e4:	88c00434 	orhi	r3,r17,16
811112e8:	180690fa 	slli	r3,r3,3
811112ec:	3022d77a 	srli	r17,r6,29
811112f0:	301090fa 	slli	r8,r6,3
811112f4:	10bf0044 	addi	r2,r2,-1023
811112f8:	88e2b03a 	or	r17,r17,r3
811112fc:	000b883a 	mov	r5,zero
81111300:	9085883a 	add	r2,r18,r2
81111304:	2cc8b03a 	or	r4,r5,r19
81111308:	00c003c4 	movi	r3,15
8111130c:	bdacf03a 	xor	r22,r23,r22
81111310:	12c00044 	addi	r11,r2,1
81111314:	19009936 	bltu	r3,r4,8111157c <__muldf3+0x348>
81111318:	200890ba 	slli	r4,r4,2
8111131c:	00e04474 	movhi	r3,33041
81111320:	18c4cc04 	addi	r3,r3,4912
81111324:	20c9883a 	add	r4,r4,r3
81111328:	20c00017 	ldw	r3,0(r4)
8111132c:	1800683a 	jmp	r3
81111330:	8111157c 	xorhi	r4,r16,17493
81111334:	81111390 	cmplti	r4,r16,17486
81111338:	81111390 	cmplti	r4,r16,17486
8111133c:	8111138c 	andi	r4,r16,17486
81111340:	81111558 	cmpnei	r4,r16,17493
81111344:	81111558 	cmpnei	r4,r16,17493
81111348:	81111540 	call	88111154 <__reset+0x20f1154>
8111134c:	8111138c 	andi	r4,r16,17486
81111350:	81111558 	cmpnei	r4,r16,17493
81111354:	81111540 	call	88111154 <__reset+0x20f1154>
81111358:	81111558 	cmpnei	r4,r16,17493
8111135c:	8111138c 	andi	r4,r16,17486
81111360:	81111568 	cmpgeui	r4,r16,17493
81111364:	81111568 	cmpgeui	r4,r16,17493
81111368:	81111568 	cmpgeui	r4,r16,17493
8111136c:	81111784 	addi	r4,r16,17502
81111370:	2404b03a 	or	r2,r4,r16
81111374:	10006f1e 	bne	r2,zero,81111534 <__muldf3+0x300>
81111378:	04c00204 	movi	r19,8
8111137c:	0021883a 	mov	r16,zero
81111380:	0029883a 	mov	r20,zero
81111384:	07000084 	movi	fp,2
81111388:	003fcb06 	br	811112b8 <__reset+0xfb0f12b8>
8111138c:	502d883a 	mov	r22,r10
81111390:	00800084 	movi	r2,2
81111394:	28805726 	beq	r5,r2,811114f4 <__muldf3+0x2c0>
81111398:	008000c4 	movi	r2,3
8111139c:	28816626 	beq	r5,r2,81111938 <__muldf3+0x704>
811113a0:	00800044 	movi	r2,1
811113a4:	2881411e 	bne	r5,r2,811118ac <__muldf3+0x678>
811113a8:	b02b883a 	mov	r21,r22
811113ac:	0005883a 	mov	r2,zero
811113b0:	000b883a 	mov	r5,zero
811113b4:	0029883a 	mov	r20,zero
811113b8:	1004953a 	slli	r2,r2,20
811113bc:	a8c03fcc 	andi	r3,r21,255
811113c0:	04400434 	movhi	r17,16
811113c4:	8c7fffc4 	addi	r17,r17,-1
811113c8:	180697fa 	slli	r3,r3,31
811113cc:	2c4a703a 	and	r5,r5,r17
811113d0:	288ab03a 	or	r5,r5,r2
811113d4:	28c6b03a 	or	r3,r5,r3
811113d8:	a005883a 	mov	r2,r20
811113dc:	dfc00c17 	ldw	ra,48(sp)
811113e0:	df000b17 	ldw	fp,44(sp)
811113e4:	ddc00a17 	ldw	r23,40(sp)
811113e8:	dd800917 	ldw	r22,36(sp)
811113ec:	dd400817 	ldw	r21,32(sp)
811113f0:	dd000717 	ldw	r20,28(sp)
811113f4:	dcc00617 	ldw	r19,24(sp)
811113f8:	dc800517 	ldw	r18,20(sp)
811113fc:	dc400417 	ldw	r17,16(sp)
81111400:	dc000317 	ldw	r16,12(sp)
81111404:	dec00d04 	addi	sp,sp,52
81111408:	f800283a 	ret
8111140c:	2404b03a 	or	r2,r4,r16
81111410:	2027883a 	mov	r19,r4
81111414:	10004226 	beq	r2,zero,81111520 <__muldf3+0x2ec>
81111418:	8000fc26 	beq	r16,zero,8111180c <__muldf3+0x5d8>
8111141c:	8009883a 	mov	r4,r16
81111420:	d9800215 	stw	r6,8(sp)
81111424:	d9c00015 	stw	r7,0(sp)
81111428:	da400115 	stw	r9,4(sp)
8111142c:	1111c140 	call	81111c14 <__clzsi2>
81111430:	d9800217 	ldw	r6,8(sp)
81111434:	d9c00017 	ldw	r7,0(sp)
81111438:	da400117 	ldw	r9,4(sp)
8111143c:	113ffd44 	addi	r4,r2,-11
81111440:	00c00704 	movi	r3,28
81111444:	1900ed16 	blt	r3,r4,811117fc <__muldf3+0x5c8>
81111448:	00c00744 	movi	r3,29
8111144c:	147ffe04 	addi	r17,r2,-8
81111450:	1907c83a 	sub	r3,r3,r4
81111454:	8460983a 	sll	r16,r16,r17
81111458:	98c6d83a 	srl	r3,r19,r3
8111145c:	9c68983a 	sll	r20,r19,r17
81111460:	1c20b03a 	or	r16,r3,r16
81111464:	1080fcc4 	addi	r2,r2,1011
81111468:	00a5c83a 	sub	r18,zero,r2
8111146c:	0027883a 	mov	r19,zero
81111470:	0039883a 	mov	fp,zero
81111474:	003f9006 	br	811112b8 <__reset+0xfb0f12b8>
81111478:	3446b03a 	or	r3,r6,r17
8111147c:	1800261e 	bne	r3,zero,81111518 <__muldf3+0x2e4>
81111480:	0023883a 	mov	r17,zero
81111484:	0011883a 	mov	r8,zero
81111488:	01400084 	movi	r5,2
8111148c:	003f9c06 	br	81111300 <__reset+0xfb0f1300>
81111490:	3446b03a 	or	r3,r6,r17
81111494:	18001c26 	beq	r3,zero,81111508 <__muldf3+0x2d4>
81111498:	8800ce26 	beq	r17,zero,811117d4 <__muldf3+0x5a0>
8111149c:	8809883a 	mov	r4,r17
811114a0:	d9800215 	stw	r6,8(sp)
811114a4:	da400115 	stw	r9,4(sp)
811114a8:	da800015 	stw	r10,0(sp)
811114ac:	1111c140 	call	81111c14 <__clzsi2>
811114b0:	d9800217 	ldw	r6,8(sp)
811114b4:	da400117 	ldw	r9,4(sp)
811114b8:	da800017 	ldw	r10,0(sp)
811114bc:	113ffd44 	addi	r4,r2,-11
811114c0:	00c00704 	movi	r3,28
811114c4:	1900bf16 	blt	r3,r4,811117c4 <__muldf3+0x590>
811114c8:	00c00744 	movi	r3,29
811114cc:	123ffe04 	addi	r8,r2,-8
811114d0:	1907c83a 	sub	r3,r3,r4
811114d4:	8a22983a 	sll	r17,r17,r8
811114d8:	30c6d83a 	srl	r3,r6,r3
811114dc:	3210983a 	sll	r8,r6,r8
811114e0:	1c62b03a 	or	r17,r3,r17
811114e4:	1080fcc4 	addi	r2,r2,1011
811114e8:	0085c83a 	sub	r2,zero,r2
811114ec:	000b883a 	mov	r5,zero
811114f0:	003f8306 	br	81111300 <__reset+0xfb0f1300>
811114f4:	b02b883a 	mov	r21,r22
811114f8:	0081ffc4 	movi	r2,2047
811114fc:	000b883a 	mov	r5,zero
81111500:	0029883a 	mov	r20,zero
81111504:	003fac06 	br	811113b8 <__reset+0xfb0f13b8>
81111508:	0023883a 	mov	r17,zero
8111150c:	0011883a 	mov	r8,zero
81111510:	01400044 	movi	r5,1
81111514:	003f7a06 	br	81111300 <__reset+0xfb0f1300>
81111518:	014000c4 	movi	r5,3
8111151c:	003f7806 	br	81111300 <__reset+0xfb0f1300>
81111520:	04c00104 	movi	r19,4
81111524:	0021883a 	mov	r16,zero
81111528:	0029883a 	mov	r20,zero
8111152c:	07000044 	movi	fp,1
81111530:	003f6106 	br	811112b8 <__reset+0xfb0f12b8>
81111534:	04c00304 	movi	r19,12
81111538:	070000c4 	movi	fp,3
8111153c:	003f5e06 	br	811112b8 <__reset+0xfb0f12b8>
81111540:	01400434 	movhi	r5,16
81111544:	002b883a 	mov	r21,zero
81111548:	297fffc4 	addi	r5,r5,-1
8111154c:	053fffc4 	movi	r20,-1
81111550:	0081ffc4 	movi	r2,2047
81111554:	003f9806 	br	811113b8 <__reset+0xfb0f13b8>
81111558:	8023883a 	mov	r17,r16
8111155c:	a011883a 	mov	r8,r20
81111560:	e00b883a 	mov	r5,fp
81111564:	003f8a06 	br	81111390 <__reset+0xfb0f1390>
81111568:	8023883a 	mov	r17,r16
8111156c:	a011883a 	mov	r8,r20
81111570:	482d883a 	mov	r22,r9
81111574:	e00b883a 	mov	r5,fp
81111578:	003f8506 	br	81111390 <__reset+0xfb0f1390>
8111157c:	a00ad43a 	srli	r5,r20,16
81111580:	401ad43a 	srli	r13,r8,16
81111584:	a53fffcc 	andi	r20,r20,65535
81111588:	423fffcc 	andi	r8,r8,65535
8111158c:	4519383a 	mul	r12,r8,r20
81111590:	4147383a 	mul	r3,r8,r5
81111594:	6d09383a 	mul	r4,r13,r20
81111598:	600cd43a 	srli	r6,r12,16
8111159c:	2b5d383a 	mul	r14,r5,r13
811115a0:	20c9883a 	add	r4,r4,r3
811115a4:	310d883a 	add	r6,r6,r4
811115a8:	30c0022e 	bgeu	r6,r3,811115b4 <__muldf3+0x380>
811115ac:	00c00074 	movhi	r3,1
811115b0:	70dd883a 	add	r14,r14,r3
811115b4:	8826d43a 	srli	r19,r17,16
811115b8:	8bffffcc 	andi	r15,r17,65535
811115bc:	7d23383a 	mul	r17,r15,r20
811115c0:	7949383a 	mul	r4,r15,r5
811115c4:	9d29383a 	mul	r20,r19,r20
811115c8:	8814d43a 	srli	r10,r17,16
811115cc:	3012943a 	slli	r9,r6,16
811115d0:	a129883a 	add	r20,r20,r4
811115d4:	633fffcc 	andi	r12,r12,65535
811115d8:	5515883a 	add	r10,r10,r20
811115dc:	3006d43a 	srli	r3,r6,16
811115e0:	4b13883a 	add	r9,r9,r12
811115e4:	2ccb383a 	mul	r5,r5,r19
811115e8:	5100022e 	bgeu	r10,r4,811115f4 <__muldf3+0x3c0>
811115ec:	01000074 	movhi	r4,1
811115f0:	290b883a 	add	r5,r5,r4
811115f4:	802ad43a 	srli	r21,r16,16
811115f8:	843fffcc 	andi	r16,r16,65535
811115fc:	440d383a 	mul	r6,r8,r16
81111600:	4565383a 	mul	r18,r8,r21
81111604:	8349383a 	mul	r4,r16,r13
81111608:	500e943a 	slli	r7,r10,16
8111160c:	3010d43a 	srli	r8,r6,16
81111610:	5028d43a 	srli	r20,r10,16
81111614:	2489883a 	add	r4,r4,r18
81111618:	8abfffcc 	andi	r10,r17,65535
8111161c:	3a95883a 	add	r10,r7,r10
81111620:	4119883a 	add	r12,r8,r4
81111624:	a169883a 	add	r20,r20,r5
81111628:	1a87883a 	add	r3,r3,r10
8111162c:	6d5b383a 	mul	r13,r13,r21
81111630:	6480022e 	bgeu	r12,r18,8111163c <__muldf3+0x408>
81111634:	01000074 	movhi	r4,1
81111638:	691b883a 	add	r13,r13,r4
8111163c:	7c25383a 	mul	r18,r15,r16
81111640:	7d4b383a 	mul	r5,r15,r21
81111644:	84cf383a 	mul	r7,r16,r19
81111648:	901ed43a 	srli	r15,r18,16
8111164c:	6008d43a 	srli	r4,r12,16
81111650:	6010943a 	slli	r8,r12,16
81111654:	394f883a 	add	r7,r7,r5
81111658:	333fffcc 	andi	r12,r6,65535
8111165c:	79df883a 	add	r15,r15,r7
81111660:	235b883a 	add	r13,r4,r13
81111664:	9d63383a 	mul	r17,r19,r21
81111668:	4309883a 	add	r4,r8,r12
8111166c:	7940022e 	bgeu	r15,r5,81111678 <__muldf3+0x444>
81111670:	01400074 	movhi	r5,1
81111674:	8963883a 	add	r17,r17,r5
81111678:	780a943a 	slli	r5,r15,16
8111167c:	91bfffcc 	andi	r6,r18,65535
81111680:	70c7883a 	add	r3,r14,r3
81111684:	298d883a 	add	r6,r5,r6
81111688:	1a8f803a 	cmpltu	r7,r3,r10
8111168c:	350b883a 	add	r5,r6,r20
81111690:	20c7883a 	add	r3,r4,r3
81111694:	3955883a 	add	r10,r7,r5
81111698:	1909803a 	cmpltu	r4,r3,r4
8111169c:	6a91883a 	add	r8,r13,r10
811116a0:	780cd43a 	srli	r6,r15,16
811116a4:	2219883a 	add	r12,r4,r8
811116a8:	2d0b803a 	cmpltu	r5,r5,r20
811116ac:	51cf803a 	cmpltu	r7,r10,r7
811116b0:	29ceb03a 	or	r7,r5,r7
811116b4:	4351803a 	cmpltu	r8,r8,r13
811116b8:	610b803a 	cmpltu	r5,r12,r4
811116bc:	4148b03a 	or	r4,r8,r5
811116c0:	398f883a 	add	r7,r7,r6
811116c4:	3909883a 	add	r4,r7,r4
811116c8:	1810927a 	slli	r8,r3,9
811116cc:	2449883a 	add	r4,r4,r17
811116d0:	2008927a 	slli	r4,r4,9
811116d4:	6022d5fa 	srli	r17,r12,23
811116d8:	1806d5fa 	srli	r3,r3,23
811116dc:	4252b03a 	or	r9,r8,r9
811116e0:	600a927a 	slli	r5,r12,9
811116e4:	4810c03a 	cmpne	r8,r9,zero
811116e8:	2462b03a 	or	r17,r4,r17
811116ec:	40c6b03a 	or	r3,r8,r3
811116f0:	8900402c 	andhi	r4,r17,256
811116f4:	1950b03a 	or	r8,r3,r5
811116f8:	20000726 	beq	r4,zero,81111718 <__muldf3+0x4e4>
811116fc:	4006d07a 	srli	r3,r8,1
81111700:	880497fa 	slli	r2,r17,31
81111704:	4200004c 	andi	r8,r8,1
81111708:	8822d07a 	srli	r17,r17,1
8111170c:	1a10b03a 	or	r8,r3,r8
81111710:	1210b03a 	or	r8,r2,r8
81111714:	5805883a 	mov	r2,r11
81111718:	1140ffc4 	addi	r5,r2,1023
8111171c:	0140440e 	bge	zero,r5,81111830 <__muldf3+0x5fc>
81111720:	40c001cc 	andi	r3,r8,7
81111724:	18000726 	beq	r3,zero,81111744 <__muldf3+0x510>
81111728:	40c003cc 	andi	r3,r8,15
8111172c:	01000104 	movi	r4,4
81111730:	19000426 	beq	r3,r4,81111744 <__muldf3+0x510>
81111734:	4107883a 	add	r3,r8,r4
81111738:	1a11803a 	cmpltu	r8,r3,r8
8111173c:	8a23883a 	add	r17,r17,r8
81111740:	1811883a 	mov	r8,r3
81111744:	88c0402c 	andhi	r3,r17,256
81111748:	18000426 	beq	r3,zero,8111175c <__muldf3+0x528>
8111174c:	11410004 	addi	r5,r2,1024
81111750:	00bfc034 	movhi	r2,65280
81111754:	10bfffc4 	addi	r2,r2,-1
81111758:	88a2703a 	and	r17,r17,r2
8111175c:	0081ff84 	movi	r2,2046
81111760:	117f6416 	blt	r2,r5,811114f4 <__reset+0xfb0f14f4>
81111764:	8828977a 	slli	r20,r17,29
81111768:	4010d0fa 	srli	r8,r8,3
8111176c:	8822927a 	slli	r17,r17,9
81111770:	2881ffcc 	andi	r2,r5,2047
81111774:	a228b03a 	or	r20,r20,r8
81111778:	880ad33a 	srli	r5,r17,12
8111177c:	b02b883a 	mov	r21,r22
81111780:	003f0d06 	br	811113b8 <__reset+0xfb0f13b8>
81111784:	8080022c 	andhi	r2,r16,8
81111788:	10000926 	beq	r2,zero,811117b0 <__muldf3+0x57c>
8111178c:	8880022c 	andhi	r2,r17,8
81111790:	1000071e 	bne	r2,zero,811117b0 <__muldf3+0x57c>
81111794:	00800434 	movhi	r2,16
81111798:	89400234 	orhi	r5,r17,8
8111179c:	10bfffc4 	addi	r2,r2,-1
811117a0:	b82b883a 	mov	r21,r23
811117a4:	288a703a 	and	r5,r5,r2
811117a8:	4029883a 	mov	r20,r8
811117ac:	003f6806 	br	81111550 <__reset+0xfb0f1550>
811117b0:	00800434 	movhi	r2,16
811117b4:	81400234 	orhi	r5,r16,8
811117b8:	10bfffc4 	addi	r2,r2,-1
811117bc:	288a703a 	and	r5,r5,r2
811117c0:	003f6306 	br	81111550 <__reset+0xfb0f1550>
811117c4:	147ff604 	addi	r17,r2,-40
811117c8:	3462983a 	sll	r17,r6,r17
811117cc:	0011883a 	mov	r8,zero
811117d0:	003f4406 	br	811114e4 <__reset+0xfb0f14e4>
811117d4:	3009883a 	mov	r4,r6
811117d8:	d9800215 	stw	r6,8(sp)
811117dc:	da400115 	stw	r9,4(sp)
811117e0:	da800015 	stw	r10,0(sp)
811117e4:	1111c140 	call	81111c14 <__clzsi2>
811117e8:	10800804 	addi	r2,r2,32
811117ec:	da800017 	ldw	r10,0(sp)
811117f0:	da400117 	ldw	r9,4(sp)
811117f4:	d9800217 	ldw	r6,8(sp)
811117f8:	003f3006 	br	811114bc <__reset+0xfb0f14bc>
811117fc:	143ff604 	addi	r16,r2,-40
81111800:	9c20983a 	sll	r16,r19,r16
81111804:	0029883a 	mov	r20,zero
81111808:	003f1606 	br	81111464 <__reset+0xfb0f1464>
8111180c:	d9800215 	stw	r6,8(sp)
81111810:	d9c00015 	stw	r7,0(sp)
81111814:	da400115 	stw	r9,4(sp)
81111818:	1111c140 	call	81111c14 <__clzsi2>
8111181c:	10800804 	addi	r2,r2,32
81111820:	da400117 	ldw	r9,4(sp)
81111824:	d9c00017 	ldw	r7,0(sp)
81111828:	d9800217 	ldw	r6,8(sp)
8111182c:	003f0306 	br	8111143c <__reset+0xfb0f143c>
81111830:	00c00044 	movi	r3,1
81111834:	1947c83a 	sub	r3,r3,r5
81111838:	00800e04 	movi	r2,56
8111183c:	10feda16 	blt	r2,r3,811113a8 <__reset+0xfb0f13a8>
81111840:	008007c4 	movi	r2,31
81111844:	10c01b16 	blt	r2,r3,811118b4 <__muldf3+0x680>
81111848:	00800804 	movi	r2,32
8111184c:	10c5c83a 	sub	r2,r2,r3
81111850:	888a983a 	sll	r5,r17,r2
81111854:	40c8d83a 	srl	r4,r8,r3
81111858:	4084983a 	sll	r2,r8,r2
8111185c:	88e2d83a 	srl	r17,r17,r3
81111860:	2906b03a 	or	r3,r5,r4
81111864:	1004c03a 	cmpne	r2,r2,zero
81111868:	1886b03a 	or	r3,r3,r2
8111186c:	188001cc 	andi	r2,r3,7
81111870:	10000726 	beq	r2,zero,81111890 <__muldf3+0x65c>
81111874:	188003cc 	andi	r2,r3,15
81111878:	01000104 	movi	r4,4
8111187c:	11000426 	beq	r2,r4,81111890 <__muldf3+0x65c>
81111880:	1805883a 	mov	r2,r3
81111884:	10c00104 	addi	r3,r2,4
81111888:	1885803a 	cmpltu	r2,r3,r2
8111188c:	88a3883a 	add	r17,r17,r2
81111890:	8880202c 	andhi	r2,r17,128
81111894:	10001c26 	beq	r2,zero,81111908 <__muldf3+0x6d4>
81111898:	b02b883a 	mov	r21,r22
8111189c:	00800044 	movi	r2,1
811118a0:	000b883a 	mov	r5,zero
811118a4:	0029883a 	mov	r20,zero
811118a8:	003ec306 	br	811113b8 <__reset+0xfb0f13b8>
811118ac:	5805883a 	mov	r2,r11
811118b0:	003f9906 	br	81111718 <__reset+0xfb0f1718>
811118b4:	00bff844 	movi	r2,-31
811118b8:	1145c83a 	sub	r2,r2,r5
811118bc:	8888d83a 	srl	r4,r17,r2
811118c0:	00800804 	movi	r2,32
811118c4:	18801a26 	beq	r3,r2,81111930 <__muldf3+0x6fc>
811118c8:	00801004 	movi	r2,64
811118cc:	10c5c83a 	sub	r2,r2,r3
811118d0:	8884983a 	sll	r2,r17,r2
811118d4:	1204b03a 	or	r2,r2,r8
811118d8:	1004c03a 	cmpne	r2,r2,zero
811118dc:	2084b03a 	or	r2,r4,r2
811118e0:	144001cc 	andi	r17,r2,7
811118e4:	88000d1e 	bne	r17,zero,8111191c <__muldf3+0x6e8>
811118e8:	000b883a 	mov	r5,zero
811118ec:	1028d0fa 	srli	r20,r2,3
811118f0:	b02b883a 	mov	r21,r22
811118f4:	0005883a 	mov	r2,zero
811118f8:	a468b03a 	or	r20,r20,r17
811118fc:	003eae06 	br	811113b8 <__reset+0xfb0f13b8>
81111900:	1007883a 	mov	r3,r2
81111904:	0023883a 	mov	r17,zero
81111908:	880a927a 	slli	r5,r17,9
8111190c:	1805883a 	mov	r2,r3
81111910:	8822977a 	slli	r17,r17,29
81111914:	280ad33a 	srli	r5,r5,12
81111918:	003ff406 	br	811118ec <__reset+0xfb0f18ec>
8111191c:	10c003cc 	andi	r3,r2,15
81111920:	01000104 	movi	r4,4
81111924:	193ff626 	beq	r3,r4,81111900 <__reset+0xfb0f1900>
81111928:	0023883a 	mov	r17,zero
8111192c:	003fd506 	br	81111884 <__reset+0xfb0f1884>
81111930:	0005883a 	mov	r2,zero
81111934:	003fe706 	br	811118d4 <__reset+0xfb0f18d4>
81111938:	00800434 	movhi	r2,16
8111193c:	89400234 	orhi	r5,r17,8
81111940:	10bfffc4 	addi	r2,r2,-1
81111944:	b02b883a 	mov	r21,r22
81111948:	288a703a 	and	r5,r5,r2
8111194c:	4029883a 	mov	r20,r8
81111950:	003eff06 	br	81111550 <__reset+0xfb0f1550>

81111954 <__extendsfdf2>:
81111954:	200ad5fa 	srli	r5,r4,23
81111958:	defffd04 	addi	sp,sp,-12
8111195c:	de00012e 	bgeu	sp,et,81111964 <__extendsfdf2+0x10>
81111960:	003b68fa 	trap	3
81111964:	29403fcc 	andi	r5,r5,255
81111968:	dc400115 	stw	r17,4(sp)
8111196c:	29800044 	addi	r6,r5,1
81111970:	04402034 	movhi	r17,128
81111974:	dc000015 	stw	r16,0(sp)
81111978:	8c7fffc4 	addi	r17,r17,-1
8111197c:	dfc00215 	stw	ra,8(sp)
81111980:	31803fcc 	andi	r6,r6,255
81111984:	00800044 	movi	r2,1
81111988:	8922703a 	and	r17,r17,r4
8111198c:	2020d7fa 	srli	r16,r4,31
81111990:	1180110e 	bge	r2,r6,811119d8 <__extendsfdf2+0x84>
81111994:	880cd0fa 	srli	r6,r17,3
81111998:	8822977a 	slli	r17,r17,29
8111199c:	2940e004 	addi	r5,r5,896
811119a0:	2941ffcc 	andi	r5,r5,2047
811119a4:	2804953a 	slli	r2,r5,20
811119a8:	01400434 	movhi	r5,16
811119ac:	800697fa 	slli	r3,r16,31
811119b0:	297fffc4 	addi	r5,r5,-1
811119b4:	314a703a 	and	r5,r6,r5
811119b8:	288ab03a 	or	r5,r5,r2
811119bc:	28c6b03a 	or	r3,r5,r3
811119c0:	8805883a 	mov	r2,r17
811119c4:	dfc00217 	ldw	ra,8(sp)
811119c8:	dc400117 	ldw	r17,4(sp)
811119cc:	dc000017 	ldw	r16,0(sp)
811119d0:	dec00304 	addi	sp,sp,12
811119d4:	f800283a 	ret
811119d8:	2800111e 	bne	r5,zero,81111a20 <__extendsfdf2+0xcc>
811119dc:	88001c26 	beq	r17,zero,81111a50 <__extendsfdf2+0xfc>
811119e0:	8809883a 	mov	r4,r17
811119e4:	1111c140 	call	81111c14 <__clzsi2>
811119e8:	00c00284 	movi	r3,10
811119ec:	18801b16 	blt	r3,r2,81111a5c <__extendsfdf2+0x108>
811119f0:	018002c4 	movi	r6,11
811119f4:	308dc83a 	sub	r6,r6,r2
811119f8:	11000544 	addi	r4,r2,21
811119fc:	8986d83a 	srl	r3,r17,r6
81111a00:	8922983a 	sll	r17,r17,r4
81111a04:	0180e244 	movi	r6,905
81111a08:	01400434 	movhi	r5,16
81111a0c:	3085c83a 	sub	r2,r6,r2
81111a10:	297fffc4 	addi	r5,r5,-1
81111a14:	194c703a 	and	r6,r3,r5
81111a18:	1141ffcc 	andi	r5,r2,2047
81111a1c:	003fe006 	br	811119a0 <__reset+0xfb0f19a0>
81111a20:	88000826 	beq	r17,zero,81111a44 <__extendsfdf2+0xf0>
81111a24:	880cd0fa 	srli	r6,r17,3
81111a28:	00800434 	movhi	r2,16
81111a2c:	10bfffc4 	addi	r2,r2,-1
81111a30:	31800234 	orhi	r6,r6,8
81111a34:	8822977a 	slli	r17,r17,29
81111a38:	308c703a 	and	r6,r6,r2
81111a3c:	0141ffc4 	movi	r5,2047
81111a40:	003fd706 	br	811119a0 <__reset+0xfb0f19a0>
81111a44:	0141ffc4 	movi	r5,2047
81111a48:	000d883a 	mov	r6,zero
81111a4c:	003fd406 	br	811119a0 <__reset+0xfb0f19a0>
81111a50:	000b883a 	mov	r5,zero
81111a54:	000d883a 	mov	r6,zero
81111a58:	003fd106 	br	811119a0 <__reset+0xfb0f19a0>
81111a5c:	11bffd44 	addi	r6,r2,-11
81111a60:	8986983a 	sll	r3,r17,r6
81111a64:	0023883a 	mov	r17,zero
81111a68:	003fe606 	br	81111a04 <__reset+0xfb0f1a04>

81111a6c <__truncdfsf2>:
81111a6c:	2810d53a 	srli	r8,r5,20
81111a70:	01c00434 	movhi	r7,16
81111a74:	39ffffc4 	addi	r7,r7,-1
81111a78:	29ce703a 	and	r7,r5,r7
81111a7c:	4201ffcc 	andi	r8,r8,2047
81111a80:	380e90fa 	slli	r7,r7,3
81111a84:	200cd77a 	srli	r6,r4,29
81111a88:	42400044 	addi	r9,r8,1
81111a8c:	4a41ffcc 	andi	r9,r9,2047
81111a90:	00c00044 	movi	r3,1
81111a94:	280ad7fa 	srli	r5,r5,31
81111a98:	31ceb03a 	or	r7,r6,r7
81111a9c:	200490fa 	slli	r2,r4,3
81111aa0:	1a40230e 	bge	r3,r9,81111b30 <__truncdfsf2+0xc4>
81111aa4:	40ff2004 	addi	r3,r8,-896
81111aa8:	01803f84 	movi	r6,254
81111aac:	30c01516 	blt	r6,r3,81111b04 <__truncdfsf2+0x98>
81111ab0:	00c0380e 	bge	zero,r3,81111b94 <__truncdfsf2+0x128>
81111ab4:	200c91ba 	slli	r6,r4,6
81111ab8:	380e90fa 	slli	r7,r7,3
81111abc:	1004d77a 	srli	r2,r2,29
81111ac0:	300cc03a 	cmpne	r6,r6,zero
81111ac4:	31ccb03a 	or	r6,r6,r7
81111ac8:	308cb03a 	or	r6,r6,r2
81111acc:	308001cc 	andi	r2,r6,7
81111ad0:	10000426 	beq	r2,zero,81111ae4 <__truncdfsf2+0x78>
81111ad4:	308003cc 	andi	r2,r6,15
81111ad8:	01000104 	movi	r4,4
81111adc:	11000126 	beq	r2,r4,81111ae4 <__truncdfsf2+0x78>
81111ae0:	31800104 	addi	r6,r6,4
81111ae4:	3081002c 	andhi	r2,r6,1024
81111ae8:	10001626 	beq	r2,zero,81111b44 <__truncdfsf2+0xd8>
81111aec:	18c00044 	addi	r3,r3,1
81111af0:	00803fc4 	movi	r2,255
81111af4:	18800326 	beq	r3,r2,81111b04 <__truncdfsf2+0x98>
81111af8:	300c91ba 	slli	r6,r6,6
81111afc:	300cd27a 	srli	r6,r6,9
81111b00:	00000206 	br	81111b0c <__truncdfsf2+0xa0>
81111b04:	00ffffc4 	movi	r3,-1
81111b08:	000d883a 	mov	r6,zero
81111b0c:	18c03fcc 	andi	r3,r3,255
81111b10:	180895fa 	slli	r4,r3,23
81111b14:	00c02034 	movhi	r3,128
81111b18:	280a97fa 	slli	r5,r5,31
81111b1c:	18ffffc4 	addi	r3,r3,-1
81111b20:	30c6703a 	and	r3,r6,r3
81111b24:	1906b03a 	or	r3,r3,r4
81111b28:	1944b03a 	or	r2,r3,r5
81111b2c:	f800283a 	ret
81111b30:	40000b1e 	bne	r8,zero,81111b60 <__truncdfsf2+0xf4>
81111b34:	388cb03a 	or	r6,r7,r2
81111b38:	0007883a 	mov	r3,zero
81111b3c:	30000426 	beq	r6,zero,81111b50 <__truncdfsf2+0xe4>
81111b40:	01800144 	movi	r6,5
81111b44:	00803fc4 	movi	r2,255
81111b48:	300cd0fa 	srli	r6,r6,3
81111b4c:	18800a26 	beq	r3,r2,81111b78 <__truncdfsf2+0x10c>
81111b50:	00802034 	movhi	r2,128
81111b54:	10bfffc4 	addi	r2,r2,-1
81111b58:	308c703a 	and	r6,r6,r2
81111b5c:	003feb06 	br	81111b0c <__reset+0xfb0f1b0c>
81111b60:	3888b03a 	or	r4,r7,r2
81111b64:	203fe726 	beq	r4,zero,81111b04 <__reset+0xfb0f1b04>
81111b68:	380c90fa 	slli	r6,r7,3
81111b6c:	00c03fc4 	movi	r3,255
81111b70:	31808034 	orhi	r6,r6,512
81111b74:	003fd506 	br	81111acc <__reset+0xfb0f1acc>
81111b78:	303fe226 	beq	r6,zero,81111b04 <__reset+0xfb0f1b04>
81111b7c:	00802034 	movhi	r2,128
81111b80:	31801034 	orhi	r6,r6,64
81111b84:	10bfffc4 	addi	r2,r2,-1
81111b88:	00ffffc4 	movi	r3,-1
81111b8c:	308c703a 	and	r6,r6,r2
81111b90:	003fde06 	br	81111b0c <__reset+0xfb0f1b0c>
81111b94:	013ffa44 	movi	r4,-23
81111b98:	19000e16 	blt	r3,r4,81111bd4 <__truncdfsf2+0x168>
81111b9c:	01000784 	movi	r4,30
81111ba0:	20c9c83a 	sub	r4,r4,r3
81111ba4:	018007c4 	movi	r6,31
81111ba8:	39c02034 	orhi	r7,r7,128
81111bac:	31000b16 	blt	r6,r4,81111bdc <__truncdfsf2+0x170>
81111bb0:	423f2084 	addi	r8,r8,-894
81111bb4:	120c983a 	sll	r6,r2,r8
81111bb8:	3a0e983a 	sll	r7,r7,r8
81111bbc:	1104d83a 	srl	r2,r2,r4
81111bc0:	300cc03a 	cmpne	r6,r6,zero
81111bc4:	31ceb03a 	or	r7,r6,r7
81111bc8:	388cb03a 	or	r6,r7,r2
81111bcc:	0007883a 	mov	r3,zero
81111bd0:	003fbe06 	br	81111acc <__reset+0xfb0f1acc>
81111bd4:	0007883a 	mov	r3,zero
81111bd8:	003fd906 	br	81111b40 <__reset+0xfb0f1b40>
81111bdc:	01bfff84 	movi	r6,-2
81111be0:	30cdc83a 	sub	r6,r6,r3
81111be4:	00c00804 	movi	r3,32
81111be8:	398cd83a 	srl	r6,r7,r6
81111bec:	20c00726 	beq	r4,r3,81111c0c <__truncdfsf2+0x1a0>
81111bf0:	423f2884 	addi	r8,r8,-862
81111bf4:	3a0e983a 	sll	r7,r7,r8
81111bf8:	3884b03a 	or	r2,r7,r2
81111bfc:	1004c03a 	cmpne	r2,r2,zero
81111c00:	118cb03a 	or	r6,r2,r6
81111c04:	0007883a 	mov	r3,zero
81111c08:	003fb006 	br	81111acc <__reset+0xfb0f1acc>
81111c0c:	000f883a 	mov	r7,zero
81111c10:	003ff906 	br	81111bf8 <__reset+0xfb0f1bf8>

81111c14 <__clzsi2>:
81111c14:	00bfffd4 	movui	r2,65535
81111c18:	11000536 	bltu	r2,r4,81111c30 <__clzsi2+0x1c>
81111c1c:	00803fc4 	movi	r2,255
81111c20:	11000f36 	bltu	r2,r4,81111c60 <__clzsi2+0x4c>
81111c24:	00800804 	movi	r2,32
81111c28:	0007883a 	mov	r3,zero
81111c2c:	00000506 	br	81111c44 <__clzsi2+0x30>
81111c30:	00804034 	movhi	r2,256
81111c34:	10bfffc4 	addi	r2,r2,-1
81111c38:	11000c2e 	bgeu	r2,r4,81111c6c <__clzsi2+0x58>
81111c3c:	00800204 	movi	r2,8
81111c40:	00c00604 	movi	r3,24
81111c44:	20c8d83a 	srl	r4,r4,r3
81111c48:	00e04534 	movhi	r3,33044
81111c4c:	18fe8c04 	addi	r3,r3,-1488
81111c50:	1909883a 	add	r4,r3,r4
81111c54:	20c00003 	ldbu	r3,0(r4)
81111c58:	10c5c83a 	sub	r2,r2,r3
81111c5c:	f800283a 	ret
81111c60:	00800604 	movi	r2,24
81111c64:	00c00204 	movi	r3,8
81111c68:	003ff606 	br	81111c44 <__reset+0xfb0f1c44>
81111c6c:	00800404 	movi	r2,16
81111c70:	1007883a 	mov	r3,r2
81111c74:	003ff306 	br	81111c44 <__reset+0xfb0f1c44>

81111c78 <atoi>:
81111c78:	01800284 	movi	r6,10
81111c7c:	000b883a 	mov	r5,zero
81111c80:	1113c941 	jmpi	81113c94 <strtol>

81111c84 <_atoi_r>:
81111c84:	01c00284 	movi	r7,10
81111c88:	000d883a 	mov	r6,zero
81111c8c:	1113a541 	jmpi	81113a54 <_strtol_r>

81111c90 <_fopen_r>:
81111c90:	defffa04 	addi	sp,sp,-24
81111c94:	3005883a 	mov	r2,r6
81111c98:	de00012e 	bgeu	sp,et,81111ca0 <_fopen_r+0x10>
81111c9c:	003b68fa 	trap	3
81111ca0:	d80d883a 	mov	r6,sp
81111ca4:	dcc00415 	stw	r19,16(sp)
81111ca8:	2827883a 	mov	r19,r5
81111cac:	100b883a 	mov	r5,r2
81111cb0:	dc800315 	stw	r18,12(sp)
81111cb4:	dfc00515 	stw	ra,20(sp)
81111cb8:	dc400215 	stw	r17,8(sp)
81111cbc:	dc000115 	stw	r16,4(sp)
81111cc0:	2025883a 	mov	r18,r4
81111cc4:	111bc9c0 	call	8111bc9c <__sflags>
81111cc8:	10002726 	beq	r2,zero,81111d68 <_fopen_r+0xd8>
81111ccc:	9009883a 	mov	r4,r18
81111cd0:	1023883a 	mov	r17,r2
81111cd4:	111bb140 	call	8111bb14 <__sfp>
81111cd8:	1021883a 	mov	r16,r2
81111cdc:	10002226 	beq	r2,zero,81111d68 <_fopen_r+0xd8>
81111ce0:	d9800017 	ldw	r6,0(sp)
81111ce4:	01c06d84 	movi	r7,438
81111ce8:	980b883a 	mov	r5,r19
81111cec:	9009883a 	mov	r4,r18
81111cf0:	11130fc0 	call	811130fc <_open_r>
81111cf4:	10001916 	blt	r2,zero,81111d5c <_fopen_r+0xcc>
81111cf8:	8080038d 	sth	r2,14(r16)
81111cfc:	00a04474 	movhi	r2,33041
81111d00:	108df604 	addi	r2,r2,14296
81111d04:	80800815 	stw	r2,32(r16)
81111d08:	00a04474 	movhi	r2,33041
81111d0c:	108e0f04 	addi	r2,r2,14396
81111d10:	80800915 	stw	r2,36(r16)
81111d14:	00a04474 	movhi	r2,33041
81111d18:	108e3004 	addi	r2,r2,14528
81111d1c:	80800a15 	stw	r2,40(r16)
81111d20:	00a04474 	movhi	r2,33041
81111d24:	108e4904 	addi	r2,r2,14628
81111d28:	8440030d 	sth	r17,12(r16)
81111d2c:	84000715 	stw	r16,28(r16)
81111d30:	80800b15 	stw	r2,44(r16)
81111d34:	8c40400c 	andi	r17,r17,256
81111d38:	88000d1e 	bne	r17,zero,81111d70 <_fopen_r+0xe0>
81111d3c:	8005883a 	mov	r2,r16
81111d40:	dfc00517 	ldw	ra,20(sp)
81111d44:	dcc00417 	ldw	r19,16(sp)
81111d48:	dc800317 	ldw	r18,12(sp)
81111d4c:	dc400217 	ldw	r17,8(sp)
81111d50:	dc000117 	ldw	r16,4(sp)
81111d54:	dec00604 	addi	sp,sp,24
81111d58:	f800283a 	ret
81111d5c:	111bc5c0 	call	8111bc5c <__sfp_lock_acquire>
81111d60:	8000030d 	sth	zero,12(r16)
81111d64:	111bc600 	call	8111bc60 <__sfp_lock_release>
81111d68:	0005883a 	mov	r2,zero
81111d6c:	003ff406 	br	81111d40 <__reset+0xfb0f1d40>
81111d70:	01c00084 	movi	r7,2
81111d74:	000d883a 	mov	r6,zero
81111d78:	800b883a 	mov	r5,r16
81111d7c:	9009883a 	mov	r4,r18
81111d80:	1111eb00 	call	81111eb0 <_fseek_r>
81111d84:	8005883a 	mov	r2,r16
81111d88:	003fed06 	br	81111d40 <__reset+0xfb0f1d40>

81111d8c <fopen>:
81111d8c:	00a04534 	movhi	r2,33044
81111d90:	10895a04 	addi	r2,r2,9576
81111d94:	280d883a 	mov	r6,r5
81111d98:	200b883a 	mov	r5,r4
81111d9c:	11000017 	ldw	r4,0(r2)
81111da0:	1111c901 	jmpi	81111c90 <_fopen_r>

81111da4 <_fprintf_r>:
81111da4:	defffe04 	addi	sp,sp,-8
81111da8:	2809883a 	mov	r4,r5
81111dac:	300b883a 	mov	r5,r6
81111db0:	de00012e 	bgeu	sp,et,81111db8 <_fprintf_r+0x14>
81111db4:	003b68fa 	trap	3
81111db8:	dfc00015 	stw	ra,0(sp)
81111dbc:	d9c00115 	stw	r7,4(sp)
81111dc0:	d9800104 	addi	r6,sp,4
81111dc4:	11180900 	call	81118090 <__vfprintf_internal>
81111dc8:	dfc00017 	ldw	ra,0(sp)
81111dcc:	dec00204 	addi	sp,sp,8
81111dd0:	f800283a 	ret

81111dd4 <fprintf>:
81111dd4:	defffd04 	addi	sp,sp,-12
81111dd8:	de00012e 	bgeu	sp,et,81111de0 <fprintf+0xc>
81111ddc:	003b68fa 	trap	3
81111de0:	dfc00015 	stw	ra,0(sp)
81111de4:	d9800115 	stw	r6,4(sp)
81111de8:	d9c00215 	stw	r7,8(sp)
81111dec:	d9800104 	addi	r6,sp,4
81111df0:	11180900 	call	81118090 <__vfprintf_internal>
81111df4:	dfc00017 	ldw	ra,0(sp)
81111df8:	dec00304 	addi	sp,sp,12
81111dfc:	f800283a 	ret

81111e00 <_fputc_r>:
81111e00:	defffc04 	addi	sp,sp,-16
81111e04:	de00012e 	bgeu	sp,et,81111e0c <_fputc_r+0xc>
81111e08:	003b68fa 	trap	3
81111e0c:	dc000215 	stw	r16,8(sp)
81111e10:	dfc00315 	stw	ra,12(sp)
81111e14:	2021883a 	mov	r16,r4
81111e18:	20000726 	beq	r4,zero,81111e38 <_fputc_r+0x38>
81111e1c:	20800e17 	ldw	r2,56(r4)
81111e20:	1000051e 	bne	r2,zero,81111e38 <_fputc_r+0x38>
81111e24:	d9400015 	stw	r5,0(sp)
81111e28:	d9800115 	stw	r6,4(sp)
81111e2c:	111bc4c0 	call	8111bc4c <__sinit>
81111e30:	d9800117 	ldw	r6,4(sp)
81111e34:	d9400017 	ldw	r5,0(sp)
81111e38:	8009883a 	mov	r4,r16
81111e3c:	dfc00317 	ldw	ra,12(sp)
81111e40:	dc000217 	ldw	r16,8(sp)
81111e44:	dec00404 	addi	sp,sp,16
81111e48:	11131e01 	jmpi	811131e0 <_putc_r>

81111e4c <fputc>:
81111e4c:	00a04534 	movhi	r2,33044
81111e50:	defffc04 	addi	sp,sp,-16
81111e54:	10895a04 	addi	r2,r2,9576
81111e58:	de00012e 	bgeu	sp,et,81111e60 <fputc+0x14>
81111e5c:	003b68fa 	trap	3
81111e60:	dc000115 	stw	r16,4(sp)
81111e64:	14000017 	ldw	r16,0(r2)
81111e68:	dc400215 	stw	r17,8(sp)
81111e6c:	dfc00315 	stw	ra,12(sp)
81111e70:	2023883a 	mov	r17,r4
81111e74:	80000626 	beq	r16,zero,81111e90 <fputc+0x44>
81111e78:	80800e17 	ldw	r2,56(r16)
81111e7c:	1000041e 	bne	r2,zero,81111e90 <fputc+0x44>
81111e80:	8009883a 	mov	r4,r16
81111e84:	d9400015 	stw	r5,0(sp)
81111e88:	111bc4c0 	call	8111bc4c <__sinit>
81111e8c:	d9400017 	ldw	r5,0(sp)
81111e90:	280d883a 	mov	r6,r5
81111e94:	8009883a 	mov	r4,r16
81111e98:	880b883a 	mov	r5,r17
81111e9c:	dfc00317 	ldw	ra,12(sp)
81111ea0:	dc400217 	ldw	r17,8(sp)
81111ea4:	dc000117 	ldw	r16,4(sp)
81111ea8:	dec00404 	addi	sp,sp,16
81111eac:	11131e01 	jmpi	811131e0 <_putc_r>

81111eb0 <_fseek_r>:
81111eb0:	1111ed01 	jmpi	81111ed0 <_fseeko_r>

81111eb4 <fseek>:
81111eb4:	00a04534 	movhi	r2,33044
81111eb8:	10895a04 	addi	r2,r2,9576
81111ebc:	300f883a 	mov	r7,r6
81111ec0:	280d883a 	mov	r6,r5
81111ec4:	200b883a 	mov	r5,r4
81111ec8:	11000017 	ldw	r4,0(r2)
81111ecc:	1111ed01 	jmpi	81111ed0 <_fseeko_r>

81111ed0 <_fseeko_r>:
81111ed0:	deffe804 	addi	sp,sp,-96
81111ed4:	de00012e 	bgeu	sp,et,81111edc <_fseeko_r+0xc>
81111ed8:	003b68fa 	trap	3
81111edc:	dd401415 	stw	r21,80(sp)
81111ee0:	dc801115 	stw	r18,68(sp)
81111ee4:	dc401015 	stw	r17,64(sp)
81111ee8:	dc000f15 	stw	r16,60(sp)
81111eec:	dfc01715 	stw	ra,92(sp)
81111ef0:	ddc01615 	stw	r23,88(sp)
81111ef4:	dd801515 	stw	r22,84(sp)
81111ef8:	dd001315 	stw	r20,76(sp)
81111efc:	dcc01215 	stw	r19,72(sp)
81111f00:	2023883a 	mov	r17,r4
81111f04:	2821883a 	mov	r16,r5
81111f08:	302b883a 	mov	r21,r6
81111f0c:	3825883a 	mov	r18,r7
81111f10:	20000226 	beq	r4,zero,81111f1c <_fseeko_r+0x4c>
81111f14:	20800e17 	ldw	r2,56(r4)
81111f18:	10005a26 	beq	r2,zero,81112084 <_fseeko_r+0x1b4>
81111f1c:	8080030b 	ldhu	r2,12(r16)
81111f20:	00c04204 	movi	r3,264
81111f24:	1080420c 	andi	r2,r2,264
81111f28:	10c05b26 	beq	r2,r3,81112098 <_fseeko_r+0x1c8>
81111f2c:	85000a17 	ldw	r20,40(r16)
81111f30:	a000f626 	beq	r20,zero,8111230c <_fseeko_r+0x43c>
81111f34:	00800044 	movi	r2,1
81111f38:	90803e26 	beq	r18,r2,81112034 <_fseeko_r+0x164>
81111f3c:	00800084 	movi	r2,2
81111f40:	90801026 	beq	r18,r2,81111f84 <_fseeko_r+0xb4>
81111f44:	90000f26 	beq	r18,zero,81111f84 <_fseeko_r+0xb4>
81111f48:	00800584 	movi	r2,22
81111f4c:	88800015 	stw	r2,0(r17)
81111f50:	04ffffc4 	movi	r19,-1
81111f54:	9805883a 	mov	r2,r19
81111f58:	dfc01717 	ldw	ra,92(sp)
81111f5c:	ddc01617 	ldw	r23,88(sp)
81111f60:	dd801517 	ldw	r22,84(sp)
81111f64:	dd401417 	ldw	r21,80(sp)
81111f68:	dd001317 	ldw	r20,76(sp)
81111f6c:	dcc01217 	ldw	r19,72(sp)
81111f70:	dc801117 	ldw	r18,68(sp)
81111f74:	dc401017 	ldw	r17,64(sp)
81111f78:	dc000f17 	ldw	r16,60(sp)
81111f7c:	dec01804 	addi	sp,sp,96
81111f80:	f800283a 	ret
81111f84:	80800417 	ldw	r2,16(r16)
81111f88:	002f883a 	mov	r23,zero
81111f8c:	0027883a 	mov	r19,zero
81111f90:	1000cb26 	beq	r2,zero,811122c0 <_fseeko_r+0x3f0>
81111f94:	8080030b 	ldhu	r2,12(r16)
81111f98:	10c2068c 	andi	r3,r2,2074
81111f9c:	1800071e 	bne	r3,zero,81111fbc <_fseeko_r+0xec>
81111fa0:	10c1000c 	andi	r3,r2,1024
81111fa4:	1800451e 	bne	r3,zero,811120bc <_fseeko_r+0x1ec>
81111fa8:	00e04474 	movhi	r3,33041
81111fac:	18ce3004 	addi	r3,r3,14528
81111fb0:	a0c0b726 	beq	r20,r3,81112290 <_fseeko_r+0x3c0>
81111fb4:	10820014 	ori	r2,r2,2048
81111fb8:	8080030d 	sth	r2,12(r16)
81111fbc:	800b883a 	mov	r5,r16
81111fc0:	8809883a 	mov	r4,r17
81111fc4:	111b8500 	call	8111b850 <_fflush_r>
81111fc8:	1027883a 	mov	r19,r2
81111fcc:	103fe01e 	bne	r2,zero,81111f50 <__reset+0xfb0f1f50>
81111fd0:	81400717 	ldw	r5,28(r16)
81111fd4:	900f883a 	mov	r7,r18
81111fd8:	a80d883a 	mov	r6,r21
81111fdc:	8809883a 	mov	r4,r17
81111fe0:	a03ee83a 	callr	r20
81111fe4:	00ffffc4 	movi	r3,-1
81111fe8:	10ffd926 	beq	r2,r3,81111f50 <__reset+0xfb0f1f50>
81111fec:	81400c17 	ldw	r5,48(r16)
81111ff0:	28000526 	beq	r5,zero,81112008 <_fseeko_r+0x138>
81111ff4:	80801004 	addi	r2,r16,64
81111ff8:	28800226 	beq	r5,r2,81112004 <_fseeko_r+0x134>
81111ffc:	8809883a 	mov	r4,r17
81112000:	111c0e40 	call	8111c0e4 <_free_r>
81112004:	80000c15 	stw	zero,48(r16)
81112008:	8080030b 	ldhu	r2,12(r16)
8111200c:	80c00417 	ldw	r3,16(r16)
81112010:	80000115 	stw	zero,4(r16)
81112014:	10bdf7cc 	andi	r2,r2,63455
81112018:	80c00015 	stw	r3,0(r16)
8111201c:	8080030d 	sth	r2,12(r16)
81112020:	01800204 	movi	r6,8
81112024:	000b883a 	mov	r5,zero
81112028:	81001704 	addi	r4,r16,92
8111202c:	1112fd40 	call	81112fd4 <memset>
81112030:	003fc806 	br	81111f54 <__reset+0xfb0f1f54>
81112034:	800b883a 	mov	r5,r16
81112038:	8809883a 	mov	r4,r17
8111203c:	111b8500 	call	8111b850 <_fflush_r>
81112040:	8080030b 	ldhu	r2,12(r16)
81112044:	10c4000c 	andi	r3,r2,4096
81112048:	18008726 	beq	r3,zero,81112268 <_fseeko_r+0x398>
8111204c:	84c01417 	ldw	r19,80(r16)
81112050:	10c0010c 	andi	r3,r2,4
81112054:	1800431e 	bne	r3,zero,81112164 <_fseeko_r+0x294>
81112058:	1080020c 	andi	r2,r2,8
8111205c:	10008026 	beq	r2,zero,81112260 <_fseeko_r+0x390>
81112060:	80c00017 	ldw	r3,0(r16)
81112064:	80800417 	ldw	r2,16(r16)
81112068:	18000226 	beq	r3,zero,81112074 <_fseeko_r+0x1a4>
8111206c:	1887c83a 	sub	r3,r3,r2
81112070:	98e7883a 	add	r19,r19,r3
81112074:	aceb883a 	add	r21,r21,r19
81112078:	05c00044 	movi	r23,1
8111207c:	0025883a 	mov	r18,zero
81112080:	003fc306 	br	81111f90 <__reset+0xfb0f1f90>
81112084:	111bc4c0 	call	8111bc4c <__sinit>
81112088:	8080030b 	ldhu	r2,12(r16)
8111208c:	00c04204 	movi	r3,264
81112090:	1080420c 	andi	r2,r2,264
81112094:	10ffa51e 	bne	r2,r3,81111f2c <__reset+0xfb0f1f2c>
81112098:	800b883a 	mov	r5,r16
8111209c:	8809883a 	mov	r4,r17
811120a0:	111b8500 	call	8111b850 <_fflush_r>
811120a4:	003fa106 	br	81111f2c <__reset+0xfb0f1f2c>
811120a8:	8080030b 	ldhu	r2,12(r16)
811120ac:	00c10004 	movi	r3,1024
811120b0:	80c01315 	stw	r3,76(r16)
811120b4:	10c4b03a 	or	r2,r2,r3
811120b8:	8080030d 	sth	r2,12(r16)
811120bc:	9000311e 	bne	r18,zero,81112184 <_fseeko_r+0x2b4>
811120c0:	a82d883a 	mov	r22,r21
811120c4:	b800371e 	bne	r23,zero,811121a4 <_fseeko_r+0x2d4>
811120c8:	8080030b 	ldhu	r2,12(r16)
811120cc:	1084000c 	andi	r2,r2,4096
811120d0:	10007f26 	beq	r2,zero,811122d0 <_fseeko_r+0x400>
811120d4:	80801417 	ldw	r2,80(r16)
811120d8:	81800117 	ldw	r6,4(r16)
811120dc:	81400c17 	ldw	r5,48(r16)
811120e0:	11a7c83a 	sub	r19,r2,r6
811120e4:	28008226 	beq	r5,zero,811122f0 <_fseeko_r+0x420>
811120e8:	81c00f17 	ldw	r7,60(r16)
811120ec:	99e7c83a 	sub	r19,r19,r7
811120f0:	81000e17 	ldw	r4,56(r16)
811120f4:	80800417 	ldw	r2,16(r16)
811120f8:	99a7883a 	add	r19,r19,r6
811120fc:	2087c83a 	sub	r3,r4,r2
81112100:	98e7c83a 	sub	r19,r19,r3
81112104:	38c7883a 	add	r3,r7,r3
81112108:	b4c02b16 	blt	r22,r19,811121b8 <_fseeko_r+0x2e8>
8111210c:	98c9883a 	add	r4,r19,r3
81112110:	b100292e 	bgeu	r22,r4,811121b8 <_fseeko_r+0x2e8>
81112114:	b4e7c83a 	sub	r19,r22,r19
81112118:	14c5883a 	add	r2,r2,r19
8111211c:	1ce7c83a 	sub	r19,r3,r19
81112120:	80800015 	stw	r2,0(r16)
81112124:	84c00115 	stw	r19,4(r16)
81112128:	28000526 	beq	r5,zero,81112140 <_fseeko_r+0x270>
8111212c:	80801004 	addi	r2,r16,64
81112130:	28800226 	beq	r5,r2,8111213c <_fseeko_r+0x26c>
81112134:	8809883a 	mov	r4,r17
81112138:	111c0e40 	call	8111c0e4 <_free_r>
8111213c:	80000c15 	stw	zero,48(r16)
81112140:	8080030b 	ldhu	r2,12(r16)
81112144:	01800204 	movi	r6,8
81112148:	000b883a 	mov	r5,zero
8111214c:	10bff7cc 	andi	r2,r2,65503
81112150:	8080030d 	sth	r2,12(r16)
81112154:	81001704 	addi	r4,r16,92
81112158:	1112fd40 	call	81112fd4 <memset>
8111215c:	0027883a 	mov	r19,zero
81112160:	003f7c06 	br	81111f54 <__reset+0xfb0f1f54>
81112164:	80c00117 	ldw	r3,4(r16)
81112168:	80800c17 	ldw	r2,48(r16)
8111216c:	98e7c83a 	sub	r19,r19,r3
81112170:	10003b26 	beq	r2,zero,81112260 <_fseeko_r+0x390>
81112174:	80c00f17 	ldw	r3,60(r16)
81112178:	80800417 	ldw	r2,16(r16)
8111217c:	98e7c83a 	sub	r19,r19,r3
81112180:	003fbc06 	br	81112074 <__reset+0xfb0f2074>
81112184:	8140038f 	ldh	r5,14(r16)
81112188:	d80d883a 	mov	r6,sp
8111218c:	8809883a 	mov	r4,r17
81112190:	11123380 	call	81112338 <_fstat_r>
81112194:	103f891e 	bne	r2,zero,81111fbc <__reset+0xfb0f1fbc>
81112198:	dd800417 	ldw	r22,16(sp)
8111219c:	adad883a 	add	r22,r21,r22
811121a0:	b83fc926 	beq	r23,zero,811120c8 <__reset+0xfb0f20c8>
811121a4:	81400c17 	ldw	r5,48(r16)
811121a8:	81800117 	ldw	r6,4(r16)
811121ac:	28005026 	beq	r5,zero,811122f0 <_fseeko_r+0x420>
811121b0:	81c00f17 	ldw	r7,60(r16)
811121b4:	003fce06 	br	811120f0 <__reset+0xfb0f20f0>
811121b8:	84c01317 	ldw	r19,76(r16)
811121bc:	81400717 	ldw	r5,28(r16)
811121c0:	000f883a 	mov	r7,zero
811121c4:	04e7c83a 	sub	r19,zero,r19
811121c8:	9da6703a 	and	r19,r19,r22
811121cc:	980d883a 	mov	r6,r19
811121d0:	8809883a 	mov	r4,r17
811121d4:	a03ee83a 	callr	r20
811121d8:	00ffffc4 	movi	r3,-1
811121dc:	10ff7726 	beq	r2,r3,81111fbc <__reset+0xfb0f1fbc>
811121e0:	80800417 	ldw	r2,16(r16)
811121e4:	81400c17 	ldw	r5,48(r16)
811121e8:	80000115 	stw	zero,4(r16)
811121ec:	80800015 	stw	r2,0(r16)
811121f0:	28000526 	beq	r5,zero,81112208 <_fseeko_r+0x338>
811121f4:	80801004 	addi	r2,r16,64
811121f8:	28800226 	beq	r5,r2,81112204 <_fseeko_r+0x334>
811121fc:	8809883a 	mov	r4,r17
81112200:	111c0e40 	call	8111c0e4 <_free_r>
81112204:	80000c15 	stw	zero,48(r16)
81112208:	8080030b 	ldhu	r2,12(r16)
8111220c:	b4e7c83a 	sub	r19,r22,r19
81112210:	10bff7cc 	andi	r2,r2,65503
81112214:	8080030d 	sth	r2,12(r16)
81112218:	98000b26 	beq	r19,zero,81112248 <_fseeko_r+0x378>
8111221c:	800b883a 	mov	r5,r16
81112220:	8809883a 	mov	r4,r17
81112224:	11134500 	call	81113450 <__srefill_r>
81112228:	103f641e 	bne	r2,zero,81111fbc <__reset+0xfb0f1fbc>
8111222c:	80800117 	ldw	r2,4(r16)
81112230:	14ff6236 	bltu	r2,r19,81111fbc <__reset+0xfb0f1fbc>
81112234:	80c00017 	ldw	r3,0(r16)
81112238:	14c5c83a 	sub	r2,r2,r19
8111223c:	80800115 	stw	r2,4(r16)
81112240:	1ce7883a 	add	r19,r3,r19
81112244:	84c00015 	stw	r19,0(r16)
81112248:	01800204 	movi	r6,8
8111224c:	000b883a 	mov	r5,zero
81112250:	81001704 	addi	r4,r16,92
81112254:	1112fd40 	call	81112fd4 <memset>
81112258:	0027883a 	mov	r19,zero
8111225c:	003f3d06 	br	81111f54 <__reset+0xfb0f1f54>
81112260:	80800417 	ldw	r2,16(r16)
81112264:	003f8306 	br	81112074 <__reset+0xfb0f2074>
81112268:	81400717 	ldw	r5,28(r16)
8111226c:	900f883a 	mov	r7,r18
81112270:	000d883a 	mov	r6,zero
81112274:	8809883a 	mov	r4,r17
81112278:	a03ee83a 	callr	r20
8111227c:	1027883a 	mov	r19,r2
81112280:	00bfffc4 	movi	r2,-1
81112284:	98bf3226 	beq	r19,r2,81111f50 <__reset+0xfb0f1f50>
81112288:	8080030b 	ldhu	r2,12(r16)
8111228c:	003f7006 	br	81112050 <__reset+0xfb0f2050>
81112290:	8140038f 	ldh	r5,14(r16)
81112294:	283f4716 	blt	r5,zero,81111fb4 <__reset+0xfb0f1fb4>
81112298:	d80d883a 	mov	r6,sp
8111229c:	8809883a 	mov	r4,r17
811122a0:	11123380 	call	81112338 <_fstat_r>
811122a4:	1000041e 	bne	r2,zero,811122b8 <_fseeko_r+0x3e8>
811122a8:	d8800117 	ldw	r2,4(sp)
811122ac:	00e00014 	movui	r3,32768
811122b0:	10bc000c 	andi	r2,r2,61440
811122b4:	10ff7c26 	beq	r2,r3,811120a8 <__reset+0xfb0f20a8>
811122b8:	8080030b 	ldhu	r2,12(r16)
811122bc:	003f3d06 	br	81111fb4 <__reset+0xfb0f1fb4>
811122c0:	800b883a 	mov	r5,r16
811122c4:	8809883a 	mov	r4,r17
811122c8:	11124ac0 	call	811124ac <__smakebuf_r>
811122cc:	003f3106 	br	81111f94 <__reset+0xfb0f1f94>
811122d0:	81400717 	ldw	r5,28(r16)
811122d4:	01c00044 	movi	r7,1
811122d8:	000d883a 	mov	r6,zero
811122dc:	8809883a 	mov	r4,r17
811122e0:	a03ee83a 	callr	r20
811122e4:	00ffffc4 	movi	r3,-1
811122e8:	10ff7b1e 	bne	r2,r3,811120d8 <__reset+0xfb0f20d8>
811122ec:	003f3306 	br	81111fbc <__reset+0xfb0f1fbc>
811122f0:	80c00017 	ldw	r3,0(r16)
811122f4:	80800417 	ldw	r2,16(r16)
811122f8:	000b883a 	mov	r5,zero
811122fc:	1887c83a 	sub	r3,r3,r2
81112300:	98e7c83a 	sub	r19,r19,r3
81112304:	30c7883a 	add	r3,r6,r3
81112308:	003f7f06 	br	81112108 <__reset+0xfb0f2108>
8111230c:	00800744 	movi	r2,29
81112310:	88800015 	stw	r2,0(r17)
81112314:	04ffffc4 	movi	r19,-1
81112318:	003f0e06 	br	81111f54 <__reset+0xfb0f1f54>

8111231c <fseeko>:
8111231c:	00a04534 	movhi	r2,33044
81112320:	10895a04 	addi	r2,r2,9576
81112324:	300f883a 	mov	r7,r6
81112328:	280d883a 	mov	r6,r5
8111232c:	200b883a 	mov	r5,r4
81112330:	11000017 	ldw	r4,0(r2)
81112334:	1111ed01 	jmpi	81111ed0 <_fseeko_r>

81112338 <_fstat_r>:
81112338:	defffd04 	addi	sp,sp,-12
8111233c:	de00012e 	bgeu	sp,et,81112344 <_fstat_r+0xc>
81112340:	003b68fa 	trap	3
81112344:	2805883a 	mov	r2,r5
81112348:	dc000015 	stw	r16,0(sp)
8111234c:	04204534 	movhi	r16,33044
81112350:	dc400115 	stw	r17,4(sp)
81112354:	8409b604 	addi	r16,r16,9944
81112358:	2023883a 	mov	r17,r4
8111235c:	300b883a 	mov	r5,r6
81112360:	1009883a 	mov	r4,r2
81112364:	dfc00215 	stw	ra,8(sp)
81112368:	80000015 	stw	zero,0(r16)
8111236c:	11279240 	call	81127924 <fstat>
81112370:	00ffffc4 	movi	r3,-1
81112374:	10c00526 	beq	r2,r3,8111238c <_fstat_r+0x54>
81112378:	dfc00217 	ldw	ra,8(sp)
8111237c:	dc400117 	ldw	r17,4(sp)
81112380:	dc000017 	ldw	r16,0(sp)
81112384:	dec00304 	addi	sp,sp,12
81112388:	f800283a 	ret
8111238c:	80c00017 	ldw	r3,0(r16)
81112390:	183ff926 	beq	r3,zero,81112378 <__reset+0xfb0f2378>
81112394:	88c00015 	stw	r3,0(r17)
81112398:	003ff706 	br	81112378 <__reset+0xfb0f2378>

8111239c <_fwrite_r>:
8111239c:	defff504 	addi	sp,sp,-44
811123a0:	de00012e 	bgeu	sp,et,811123a8 <_fwrite_r+0xc>
811123a4:	003b68fa 	trap	3
811123a8:	dc800815 	stw	r18,32(sp)
811123ac:	39a5383a 	mul	r18,r7,r6
811123b0:	d8800304 	addi	r2,sp,12
811123b4:	d8800015 	stw	r2,0(sp)
811123b8:	00800044 	movi	r2,1
811123bc:	dcc00915 	stw	r19,36(sp)
811123c0:	dc400715 	stw	r17,28(sp)
811123c4:	dc000615 	stw	r16,24(sp)
811123c8:	d9400315 	stw	r5,12(sp)
811123cc:	dfc00a15 	stw	ra,40(sp)
811123d0:	dc800415 	stw	r18,16(sp)
811123d4:	dc800215 	stw	r18,8(sp)
811123d8:	d8800115 	stw	r2,4(sp)
811123dc:	3027883a 	mov	r19,r6
811123e0:	3821883a 	mov	r16,r7
811123e4:	2023883a 	mov	r17,r4
811123e8:	d9400b17 	ldw	r5,44(sp)
811123ec:	20000226 	beq	r4,zero,811123f8 <_fwrite_r+0x5c>
811123f0:	20800e17 	ldw	r2,56(r4)
811123f4:	10001a26 	beq	r2,zero,81112460 <_fwrite_r+0xc4>
811123f8:	2880030b 	ldhu	r2,12(r5)
811123fc:	10c8000c 	andi	r3,r2,8192
81112400:	1800061e 	bne	r3,zero,8111241c <_fwrite_r+0x80>
81112404:	29001917 	ldw	r4,100(r5)
81112408:	00f7ffc4 	movi	r3,-8193
8111240c:	10880014 	ori	r2,r2,8192
81112410:	20c6703a 	and	r3,r4,r3
81112414:	2880030d 	sth	r2,12(r5)
81112418:	28c01915 	stw	r3,100(r5)
8111241c:	d80d883a 	mov	r6,sp
81112420:	8809883a 	mov	r4,r17
81112424:	111c3fc0 	call	8111c3fc <__sfvwrite_r>
81112428:	10000b26 	beq	r2,zero,81112458 <_fwrite_r+0xbc>
8111242c:	d9000217 	ldw	r4,8(sp)
81112430:	980b883a 	mov	r5,r19
81112434:	9109c83a 	sub	r4,r18,r4
81112438:	112546c0 	call	8112546c <__udivsi3>
8111243c:	dfc00a17 	ldw	ra,40(sp)
81112440:	dcc00917 	ldw	r19,36(sp)
81112444:	dc800817 	ldw	r18,32(sp)
81112448:	dc400717 	ldw	r17,28(sp)
8111244c:	dc000617 	ldw	r16,24(sp)
81112450:	dec00b04 	addi	sp,sp,44
81112454:	f800283a 	ret
81112458:	8005883a 	mov	r2,r16
8111245c:	003ff706 	br	8111243c <__reset+0xfb0f243c>
81112460:	d9400515 	stw	r5,20(sp)
81112464:	111bc4c0 	call	8111bc4c <__sinit>
81112468:	d9400517 	ldw	r5,20(sp)
8111246c:	003fe206 	br	811123f8 <__reset+0xfb0f23f8>

81112470 <fwrite>:
81112470:	defffe04 	addi	sp,sp,-8
81112474:	00a04534 	movhi	r2,33044
81112478:	de00012e 	bgeu	sp,et,81112480 <fwrite+0x10>
8111247c:	003b68fa 	trap	3
81112480:	10895a04 	addi	r2,r2,9576
81112484:	d9c00015 	stw	r7,0(sp)
81112488:	300f883a 	mov	r7,r6
8111248c:	280d883a 	mov	r6,r5
81112490:	200b883a 	mov	r5,r4
81112494:	11000017 	ldw	r4,0(r2)
81112498:	dfc00115 	stw	ra,4(sp)
8111249c:	111239c0 	call	8111239c <_fwrite_r>
811124a0:	dfc00117 	ldw	ra,4(sp)
811124a4:	dec00204 	addi	sp,sp,8
811124a8:	f800283a 	ret

811124ac <__smakebuf_r>:
811124ac:	2880030b 	ldhu	r2,12(r5)
811124b0:	10c0008c 	andi	r3,r2,2
811124b4:	1800431e 	bne	r3,zero,811125c4 <__smakebuf_r+0x118>
811124b8:	deffec04 	addi	sp,sp,-80
811124bc:	de00012e 	bgeu	sp,et,811124c4 <__smakebuf_r+0x18>
811124c0:	003b68fa 	trap	3
811124c4:	dc000f15 	stw	r16,60(sp)
811124c8:	2821883a 	mov	r16,r5
811124cc:	2940038f 	ldh	r5,14(r5)
811124d0:	dc401015 	stw	r17,64(sp)
811124d4:	dfc01315 	stw	ra,76(sp)
811124d8:	dcc01215 	stw	r19,72(sp)
811124dc:	dc801115 	stw	r18,68(sp)
811124e0:	2023883a 	mov	r17,r4
811124e4:	28001c16 	blt	r5,zero,81112558 <__smakebuf_r+0xac>
811124e8:	d80d883a 	mov	r6,sp
811124ec:	11123380 	call	81112338 <_fstat_r>
811124f0:	10001816 	blt	r2,zero,81112554 <__smakebuf_r+0xa8>
811124f4:	d8800117 	ldw	r2,4(sp)
811124f8:	00e00014 	movui	r3,32768
811124fc:	10bc000c 	andi	r2,r2,61440
81112500:	14c80020 	cmpeqi	r19,r2,8192
81112504:	10c03726 	beq	r2,r3,811125e4 <__smakebuf_r+0x138>
81112508:	80c0030b 	ldhu	r3,12(r16)
8111250c:	18c20014 	ori	r3,r3,2048
81112510:	80c0030d 	sth	r3,12(r16)
81112514:	00c80004 	movi	r3,8192
81112518:	10c0521e 	bne	r2,r3,81112664 <__smakebuf_r+0x1b8>
8111251c:	8140038f 	ldh	r5,14(r16)
81112520:	8809883a 	mov	r4,r17
81112524:	111ca580 	call	8111ca58 <_isatty_r>
81112528:	10004c26 	beq	r2,zero,8111265c <__smakebuf_r+0x1b0>
8111252c:	8080030b 	ldhu	r2,12(r16)
81112530:	80c010c4 	addi	r3,r16,67
81112534:	80c00015 	stw	r3,0(r16)
81112538:	10800054 	ori	r2,r2,1
8111253c:	8080030d 	sth	r2,12(r16)
81112540:	00800044 	movi	r2,1
81112544:	80c00415 	stw	r3,16(r16)
81112548:	80800515 	stw	r2,20(r16)
8111254c:	04810004 	movi	r18,1024
81112550:	00000706 	br	81112570 <__smakebuf_r+0xc4>
81112554:	8080030b 	ldhu	r2,12(r16)
81112558:	10c0200c 	andi	r3,r2,128
8111255c:	18001f1e 	bne	r3,zero,811125dc <__smakebuf_r+0x130>
81112560:	04810004 	movi	r18,1024
81112564:	10820014 	ori	r2,r2,2048
81112568:	8080030d 	sth	r2,12(r16)
8111256c:	0027883a 	mov	r19,zero
81112570:	900b883a 	mov	r5,r18
81112574:	8809883a 	mov	r4,r17
81112578:	11126700 	call	81112670 <_malloc_r>
8111257c:	10002c26 	beq	r2,zero,81112630 <__smakebuf_r+0x184>
81112580:	80c0030b 	ldhu	r3,12(r16)
81112584:	012044b4 	movhi	r4,33042
81112588:	212e3b04 	addi	r4,r4,-18196
8111258c:	89000f15 	stw	r4,60(r17)
81112590:	18c02014 	ori	r3,r3,128
81112594:	80c0030d 	sth	r3,12(r16)
81112598:	80800015 	stw	r2,0(r16)
8111259c:	80800415 	stw	r2,16(r16)
811125a0:	84800515 	stw	r18,20(r16)
811125a4:	98001a1e 	bne	r19,zero,81112610 <__smakebuf_r+0x164>
811125a8:	dfc01317 	ldw	ra,76(sp)
811125ac:	dcc01217 	ldw	r19,72(sp)
811125b0:	dc801117 	ldw	r18,68(sp)
811125b4:	dc401017 	ldw	r17,64(sp)
811125b8:	dc000f17 	ldw	r16,60(sp)
811125bc:	dec01404 	addi	sp,sp,80
811125c0:	f800283a 	ret
811125c4:	288010c4 	addi	r2,r5,67
811125c8:	28800015 	stw	r2,0(r5)
811125cc:	28800415 	stw	r2,16(r5)
811125d0:	00800044 	movi	r2,1
811125d4:	28800515 	stw	r2,20(r5)
811125d8:	f800283a 	ret
811125dc:	04801004 	movi	r18,64
811125e0:	003fe006 	br	81112564 <__reset+0xfb0f2564>
811125e4:	81000a17 	ldw	r4,40(r16)
811125e8:	00e04474 	movhi	r3,33041
811125ec:	18ce3004 	addi	r3,r3,14528
811125f0:	20ffc51e 	bne	r4,r3,81112508 <__reset+0xfb0f2508>
811125f4:	8080030b 	ldhu	r2,12(r16)
811125f8:	04810004 	movi	r18,1024
811125fc:	84801315 	stw	r18,76(r16)
81112600:	1484b03a 	or	r2,r2,r18
81112604:	8080030d 	sth	r2,12(r16)
81112608:	0027883a 	mov	r19,zero
8111260c:	003fd806 	br	81112570 <__reset+0xfb0f2570>
81112610:	8140038f 	ldh	r5,14(r16)
81112614:	8809883a 	mov	r4,r17
81112618:	111ca580 	call	8111ca58 <_isatty_r>
8111261c:	103fe226 	beq	r2,zero,811125a8 <__reset+0xfb0f25a8>
81112620:	8080030b 	ldhu	r2,12(r16)
81112624:	10800054 	ori	r2,r2,1
81112628:	8080030d 	sth	r2,12(r16)
8111262c:	003fde06 	br	811125a8 <__reset+0xfb0f25a8>
81112630:	8080030b 	ldhu	r2,12(r16)
81112634:	10c0800c 	andi	r3,r2,512
81112638:	183fdb1e 	bne	r3,zero,811125a8 <__reset+0xfb0f25a8>
8111263c:	10800094 	ori	r2,r2,2
81112640:	80c010c4 	addi	r3,r16,67
81112644:	8080030d 	sth	r2,12(r16)
81112648:	00800044 	movi	r2,1
8111264c:	80c00015 	stw	r3,0(r16)
81112650:	80c00415 	stw	r3,16(r16)
81112654:	80800515 	stw	r2,20(r16)
81112658:	003fd306 	br	811125a8 <__reset+0xfb0f25a8>
8111265c:	04810004 	movi	r18,1024
81112660:	003fc306 	br	81112570 <__reset+0xfb0f2570>
81112664:	0027883a 	mov	r19,zero
81112668:	04810004 	movi	r18,1024
8111266c:	003fc006 	br	81112570 <__reset+0xfb0f2570>

81112670 <_malloc_r>:
81112670:	defff504 	addi	sp,sp,-44
81112674:	de00012e 	bgeu	sp,et,8111267c <_malloc_r+0xc>
81112678:	003b68fa 	trap	3
8111267c:	288002c4 	addi	r2,r5,11
81112680:	dc800315 	stw	r18,12(sp)
81112684:	dfc00a15 	stw	ra,40(sp)
81112688:	df000915 	stw	fp,36(sp)
8111268c:	ddc00815 	stw	r23,32(sp)
81112690:	dd800715 	stw	r22,28(sp)
81112694:	dd400615 	stw	r21,24(sp)
81112698:	dd000515 	stw	r20,20(sp)
8111269c:	dcc00415 	stw	r19,16(sp)
811126a0:	dc400215 	stw	r17,8(sp)
811126a4:	dc000115 	stw	r16,4(sp)
811126a8:	00c00584 	movi	r3,22
811126ac:	2025883a 	mov	r18,r4
811126b0:	18807f2e 	bgeu	r3,r2,811128b0 <_malloc_r+0x240>
811126b4:	047ffe04 	movi	r17,-8
811126b8:	1462703a 	and	r17,r2,r17
811126bc:	8800a316 	blt	r17,zero,8111294c <_malloc_r+0x2dc>
811126c0:	8940a236 	bltu	r17,r5,8111294c <_malloc_r+0x2dc>
811126c4:	11294ac0 	call	811294ac <__malloc_lock>
811126c8:	00807dc4 	movi	r2,503
811126cc:	1441e92e 	bgeu	r2,r17,81112e74 <_malloc_r+0x804>
811126d0:	8804d27a 	srli	r2,r17,9
811126d4:	1000a126 	beq	r2,zero,8111295c <_malloc_r+0x2ec>
811126d8:	00c00104 	movi	r3,4
811126dc:	18811e36 	bltu	r3,r2,81112b58 <_malloc_r+0x4e8>
811126e0:	8804d1ba 	srli	r2,r17,6
811126e4:	12000e44 	addi	r8,r2,57
811126e8:	11c00e04 	addi	r7,r2,56
811126ec:	4209883a 	add	r4,r8,r8
811126f0:	04e04534 	movhi	r19,33044
811126f4:	2109883a 	add	r4,r4,r4
811126f8:	9cc31804 	addi	r19,r19,3168
811126fc:	2109883a 	add	r4,r4,r4
81112700:	9909883a 	add	r4,r19,r4
81112704:	24000117 	ldw	r16,4(r4)
81112708:	213ffe04 	addi	r4,r4,-8
8111270c:	24009726 	beq	r4,r16,8111296c <_malloc_r+0x2fc>
81112710:	80800117 	ldw	r2,4(r16)
81112714:	01bfff04 	movi	r6,-4
81112718:	014003c4 	movi	r5,15
8111271c:	1184703a 	and	r2,r2,r6
81112720:	1447c83a 	sub	r3,r2,r17
81112724:	28c00716 	blt	r5,r3,81112744 <_malloc_r+0xd4>
81112728:	1800920e 	bge	r3,zero,81112974 <_malloc_r+0x304>
8111272c:	84000317 	ldw	r16,12(r16)
81112730:	24008e26 	beq	r4,r16,8111296c <_malloc_r+0x2fc>
81112734:	80800117 	ldw	r2,4(r16)
81112738:	1184703a 	and	r2,r2,r6
8111273c:	1447c83a 	sub	r3,r2,r17
81112740:	28fff90e 	bge	r5,r3,81112728 <__reset+0xfb0f2728>
81112744:	3809883a 	mov	r4,r7
81112748:	01a04534 	movhi	r6,33044
8111274c:	9c000417 	ldw	r16,16(r19)
81112750:	31831804 	addi	r6,r6,3168
81112754:	32000204 	addi	r8,r6,8
81112758:	82013426 	beq	r16,r8,81112c2c <_malloc_r+0x5bc>
8111275c:	80c00117 	ldw	r3,4(r16)
81112760:	00bfff04 	movi	r2,-4
81112764:	188e703a 	and	r7,r3,r2
81112768:	3c45c83a 	sub	r2,r7,r17
8111276c:	00c003c4 	movi	r3,15
81112770:	18811f16 	blt	r3,r2,81112bf0 <_malloc_r+0x580>
81112774:	32000515 	stw	r8,20(r6)
81112778:	32000415 	stw	r8,16(r6)
8111277c:	10007f0e 	bge	r2,zero,8111297c <_malloc_r+0x30c>
81112780:	00807fc4 	movi	r2,511
81112784:	11c0fd36 	bltu	r2,r7,81112b7c <_malloc_r+0x50c>
81112788:	3806d0fa 	srli	r3,r7,3
8111278c:	01c00044 	movi	r7,1
81112790:	30800117 	ldw	r2,4(r6)
81112794:	19400044 	addi	r5,r3,1
81112798:	294b883a 	add	r5,r5,r5
8111279c:	1807d0ba 	srai	r3,r3,2
811127a0:	294b883a 	add	r5,r5,r5
811127a4:	294b883a 	add	r5,r5,r5
811127a8:	298b883a 	add	r5,r5,r6
811127ac:	38c6983a 	sll	r3,r7,r3
811127b0:	29c00017 	ldw	r7,0(r5)
811127b4:	2a7ffe04 	addi	r9,r5,-8
811127b8:	1886b03a 	or	r3,r3,r2
811127bc:	82400315 	stw	r9,12(r16)
811127c0:	81c00215 	stw	r7,8(r16)
811127c4:	30c00115 	stw	r3,4(r6)
811127c8:	2c000015 	stw	r16,0(r5)
811127cc:	3c000315 	stw	r16,12(r7)
811127d0:	2005d0ba 	srai	r2,r4,2
811127d4:	01400044 	movi	r5,1
811127d8:	288a983a 	sll	r5,r5,r2
811127dc:	19406f36 	bltu	r3,r5,8111299c <_malloc_r+0x32c>
811127e0:	28c4703a 	and	r2,r5,r3
811127e4:	10000a1e 	bne	r2,zero,81112810 <_malloc_r+0x1a0>
811127e8:	00bfff04 	movi	r2,-4
811127ec:	294b883a 	add	r5,r5,r5
811127f0:	2088703a 	and	r4,r4,r2
811127f4:	28c4703a 	and	r2,r5,r3
811127f8:	21000104 	addi	r4,r4,4
811127fc:	1000041e 	bne	r2,zero,81112810 <_malloc_r+0x1a0>
81112800:	294b883a 	add	r5,r5,r5
81112804:	28c4703a 	and	r2,r5,r3
81112808:	21000104 	addi	r4,r4,4
8111280c:	103ffc26 	beq	r2,zero,81112800 <__reset+0xfb0f2800>
81112810:	02bfff04 	movi	r10,-4
81112814:	024003c4 	movi	r9,15
81112818:	21800044 	addi	r6,r4,1
8111281c:	318d883a 	add	r6,r6,r6
81112820:	318d883a 	add	r6,r6,r6
81112824:	318d883a 	add	r6,r6,r6
81112828:	998d883a 	add	r6,r19,r6
8111282c:	333ffe04 	addi	r12,r6,-8
81112830:	2017883a 	mov	r11,r4
81112834:	31800104 	addi	r6,r6,4
81112838:	34000017 	ldw	r16,0(r6)
8111283c:	31fffd04 	addi	r7,r6,-12
81112840:	81c0041e 	bne	r16,r7,81112854 <_malloc_r+0x1e4>
81112844:	0000fb06 	br	81112c34 <_malloc_r+0x5c4>
81112848:	1801030e 	bge	r3,zero,81112c58 <_malloc_r+0x5e8>
8111284c:	84000317 	ldw	r16,12(r16)
81112850:	81c0f826 	beq	r16,r7,81112c34 <_malloc_r+0x5c4>
81112854:	80800117 	ldw	r2,4(r16)
81112858:	1284703a 	and	r2,r2,r10
8111285c:	1447c83a 	sub	r3,r2,r17
81112860:	48fff90e 	bge	r9,r3,81112848 <__reset+0xfb0f2848>
81112864:	80800317 	ldw	r2,12(r16)
81112868:	81000217 	ldw	r4,8(r16)
8111286c:	89400054 	ori	r5,r17,1
81112870:	81400115 	stw	r5,4(r16)
81112874:	20800315 	stw	r2,12(r4)
81112878:	11000215 	stw	r4,8(r2)
8111287c:	8463883a 	add	r17,r16,r17
81112880:	9c400515 	stw	r17,20(r19)
81112884:	9c400415 	stw	r17,16(r19)
81112888:	18800054 	ori	r2,r3,1
8111288c:	88800115 	stw	r2,4(r17)
81112890:	8a000315 	stw	r8,12(r17)
81112894:	8a000215 	stw	r8,8(r17)
81112898:	88e3883a 	add	r17,r17,r3
8111289c:	88c00015 	stw	r3,0(r17)
811128a0:	9009883a 	mov	r4,r18
811128a4:	11295d40 	call	811295d4 <__malloc_unlock>
811128a8:	80800204 	addi	r2,r16,8
811128ac:	00001b06 	br	8111291c <_malloc_r+0x2ac>
811128b0:	04400404 	movi	r17,16
811128b4:	89402536 	bltu	r17,r5,8111294c <_malloc_r+0x2dc>
811128b8:	11294ac0 	call	811294ac <__malloc_lock>
811128bc:	00800184 	movi	r2,6
811128c0:	01000084 	movi	r4,2
811128c4:	04e04534 	movhi	r19,33044
811128c8:	1085883a 	add	r2,r2,r2
811128cc:	9cc31804 	addi	r19,r19,3168
811128d0:	1085883a 	add	r2,r2,r2
811128d4:	9885883a 	add	r2,r19,r2
811128d8:	14000117 	ldw	r16,4(r2)
811128dc:	10fffe04 	addi	r3,r2,-8
811128e0:	80c0d926 	beq	r16,r3,81112c48 <_malloc_r+0x5d8>
811128e4:	80c00117 	ldw	r3,4(r16)
811128e8:	81000317 	ldw	r4,12(r16)
811128ec:	00bfff04 	movi	r2,-4
811128f0:	1884703a 	and	r2,r3,r2
811128f4:	81400217 	ldw	r5,8(r16)
811128f8:	8085883a 	add	r2,r16,r2
811128fc:	10c00117 	ldw	r3,4(r2)
81112900:	29000315 	stw	r4,12(r5)
81112904:	21400215 	stw	r5,8(r4)
81112908:	18c00054 	ori	r3,r3,1
8111290c:	10c00115 	stw	r3,4(r2)
81112910:	9009883a 	mov	r4,r18
81112914:	11295d40 	call	811295d4 <__malloc_unlock>
81112918:	80800204 	addi	r2,r16,8
8111291c:	dfc00a17 	ldw	ra,40(sp)
81112920:	df000917 	ldw	fp,36(sp)
81112924:	ddc00817 	ldw	r23,32(sp)
81112928:	dd800717 	ldw	r22,28(sp)
8111292c:	dd400617 	ldw	r21,24(sp)
81112930:	dd000517 	ldw	r20,20(sp)
81112934:	dcc00417 	ldw	r19,16(sp)
81112938:	dc800317 	ldw	r18,12(sp)
8111293c:	dc400217 	ldw	r17,8(sp)
81112940:	dc000117 	ldw	r16,4(sp)
81112944:	dec00b04 	addi	sp,sp,44
81112948:	f800283a 	ret
8111294c:	00800304 	movi	r2,12
81112950:	90800015 	stw	r2,0(r18)
81112954:	0005883a 	mov	r2,zero
81112958:	003ff006 	br	8111291c <__reset+0xfb0f291c>
8111295c:	01002004 	movi	r4,128
81112960:	02001004 	movi	r8,64
81112964:	01c00fc4 	movi	r7,63
81112968:	003f6106 	br	811126f0 <__reset+0xfb0f26f0>
8111296c:	4009883a 	mov	r4,r8
81112970:	003f7506 	br	81112748 <__reset+0xfb0f2748>
81112974:	81000317 	ldw	r4,12(r16)
81112978:	003fde06 	br	811128f4 <__reset+0xfb0f28f4>
8111297c:	81c5883a 	add	r2,r16,r7
81112980:	11400117 	ldw	r5,4(r2)
81112984:	9009883a 	mov	r4,r18
81112988:	29400054 	ori	r5,r5,1
8111298c:	11400115 	stw	r5,4(r2)
81112990:	11295d40 	call	811295d4 <__malloc_unlock>
81112994:	80800204 	addi	r2,r16,8
81112998:	003fe006 	br	8111291c <__reset+0xfb0f291c>
8111299c:	9c000217 	ldw	r16,8(r19)
811129a0:	00bfff04 	movi	r2,-4
811129a4:	85800117 	ldw	r22,4(r16)
811129a8:	b0ac703a 	and	r22,r22,r2
811129ac:	b4400336 	bltu	r22,r17,811129bc <_malloc_r+0x34c>
811129b0:	b445c83a 	sub	r2,r22,r17
811129b4:	00c003c4 	movi	r3,15
811129b8:	18805d16 	blt	r3,r2,81112b30 <_malloc_r+0x4c0>
811129bc:	05e04534 	movhi	r23,33044
811129c0:	00a04534 	movhi	r2,33044
811129c4:	1089b904 	addi	r2,r2,9956
811129c8:	bdc95b04 	addi	r23,r23,9580
811129cc:	15400017 	ldw	r21,0(r2)
811129d0:	b8c00017 	ldw	r3,0(r23)
811129d4:	00bfffc4 	movi	r2,-1
811129d8:	858d883a 	add	r6,r16,r22
811129dc:	8d6b883a 	add	r21,r17,r21
811129e0:	1880ea26 	beq	r3,r2,81112d8c <_malloc_r+0x71c>
811129e4:	ad4403c4 	addi	r21,r21,4111
811129e8:	00bc0004 	movi	r2,-4096
811129ec:	a8aa703a 	and	r21,r21,r2
811129f0:	a80b883a 	mov	r5,r21
811129f4:	9009883a 	mov	r4,r18
811129f8:	d9800015 	stw	r6,0(sp)
811129fc:	111362c0 	call	8111362c <_sbrk_r>
81112a00:	1029883a 	mov	r20,r2
81112a04:	00bfffc4 	movi	r2,-1
81112a08:	d9800017 	ldw	r6,0(sp)
81112a0c:	a080e826 	beq	r20,r2,81112db0 <_malloc_r+0x740>
81112a10:	a180a636 	bltu	r20,r6,81112cac <_malloc_r+0x63c>
81112a14:	07204534 	movhi	fp,33044
81112a18:	e70a1c04 	addi	fp,fp,10352
81112a1c:	e0800017 	ldw	r2,0(fp)
81112a20:	a887883a 	add	r3,r21,r2
81112a24:	e0c00015 	stw	r3,0(fp)
81112a28:	3500e626 	beq	r6,r20,81112dc4 <_malloc_r+0x754>
81112a2c:	b9000017 	ldw	r4,0(r23)
81112a30:	00bfffc4 	movi	r2,-1
81112a34:	2080ee26 	beq	r4,r2,81112df0 <_malloc_r+0x780>
81112a38:	a185c83a 	sub	r2,r20,r6
81112a3c:	10c5883a 	add	r2,r2,r3
81112a40:	e0800015 	stw	r2,0(fp)
81112a44:	a0c001cc 	andi	r3,r20,7
81112a48:	1800bc26 	beq	r3,zero,81112d3c <_malloc_r+0x6cc>
81112a4c:	a0e9c83a 	sub	r20,r20,r3
81112a50:	00840204 	movi	r2,4104
81112a54:	a5000204 	addi	r20,r20,8
81112a58:	10c7c83a 	sub	r3,r2,r3
81112a5c:	a545883a 	add	r2,r20,r21
81112a60:	1083ffcc 	andi	r2,r2,4095
81112a64:	18abc83a 	sub	r21,r3,r2
81112a68:	a80b883a 	mov	r5,r21
81112a6c:	9009883a 	mov	r4,r18
81112a70:	111362c0 	call	8111362c <_sbrk_r>
81112a74:	00ffffc4 	movi	r3,-1
81112a78:	10c0e126 	beq	r2,r3,81112e00 <_malloc_r+0x790>
81112a7c:	1505c83a 	sub	r2,r2,r20
81112a80:	1545883a 	add	r2,r2,r21
81112a84:	10800054 	ori	r2,r2,1
81112a88:	e0c00017 	ldw	r3,0(fp)
81112a8c:	9d000215 	stw	r20,8(r19)
81112a90:	a0800115 	stw	r2,4(r20)
81112a94:	a8c7883a 	add	r3,r21,r3
81112a98:	e0c00015 	stw	r3,0(fp)
81112a9c:	84c00e26 	beq	r16,r19,81112ad8 <_malloc_r+0x468>
81112aa0:	018003c4 	movi	r6,15
81112aa4:	3580a72e 	bgeu	r6,r22,81112d44 <_malloc_r+0x6d4>
81112aa8:	81400117 	ldw	r5,4(r16)
81112aac:	013ffe04 	movi	r4,-8
81112ab0:	b0bffd04 	addi	r2,r22,-12
81112ab4:	1104703a 	and	r2,r2,r4
81112ab8:	2900004c 	andi	r4,r5,1
81112abc:	2088b03a 	or	r4,r4,r2
81112ac0:	81000115 	stw	r4,4(r16)
81112ac4:	01400144 	movi	r5,5
81112ac8:	8089883a 	add	r4,r16,r2
81112acc:	21400115 	stw	r5,4(r4)
81112ad0:	21400215 	stw	r5,8(r4)
81112ad4:	3080cd36 	bltu	r6,r2,81112e0c <_malloc_r+0x79c>
81112ad8:	00a04534 	movhi	r2,33044
81112adc:	1089b804 	addi	r2,r2,9952
81112ae0:	11000017 	ldw	r4,0(r2)
81112ae4:	20c0012e 	bgeu	r4,r3,81112aec <_malloc_r+0x47c>
81112ae8:	10c00015 	stw	r3,0(r2)
81112aec:	00a04534 	movhi	r2,33044
81112af0:	1089b704 	addi	r2,r2,9948
81112af4:	11000017 	ldw	r4,0(r2)
81112af8:	9c000217 	ldw	r16,8(r19)
81112afc:	20c0012e 	bgeu	r4,r3,81112b04 <_malloc_r+0x494>
81112b00:	10c00015 	stw	r3,0(r2)
81112b04:	80c00117 	ldw	r3,4(r16)
81112b08:	00bfff04 	movi	r2,-4
81112b0c:	1886703a 	and	r3,r3,r2
81112b10:	1c45c83a 	sub	r2,r3,r17
81112b14:	1c400236 	bltu	r3,r17,81112b20 <_malloc_r+0x4b0>
81112b18:	00c003c4 	movi	r3,15
81112b1c:	18800416 	blt	r3,r2,81112b30 <_malloc_r+0x4c0>
81112b20:	9009883a 	mov	r4,r18
81112b24:	11295d40 	call	811295d4 <__malloc_unlock>
81112b28:	0005883a 	mov	r2,zero
81112b2c:	003f7b06 	br	8111291c <__reset+0xfb0f291c>
81112b30:	88c00054 	ori	r3,r17,1
81112b34:	80c00115 	stw	r3,4(r16)
81112b38:	8463883a 	add	r17,r16,r17
81112b3c:	10800054 	ori	r2,r2,1
81112b40:	9c400215 	stw	r17,8(r19)
81112b44:	88800115 	stw	r2,4(r17)
81112b48:	9009883a 	mov	r4,r18
81112b4c:	11295d40 	call	811295d4 <__malloc_unlock>
81112b50:	80800204 	addi	r2,r16,8
81112b54:	003f7106 	br	8111291c <__reset+0xfb0f291c>
81112b58:	00c00504 	movi	r3,20
81112b5c:	18804a2e 	bgeu	r3,r2,81112c88 <_malloc_r+0x618>
81112b60:	00c01504 	movi	r3,84
81112b64:	18806e36 	bltu	r3,r2,81112d20 <_malloc_r+0x6b0>
81112b68:	8804d33a 	srli	r2,r17,12
81112b6c:	12001bc4 	addi	r8,r2,111
81112b70:	11c01b84 	addi	r7,r2,110
81112b74:	4209883a 	add	r4,r8,r8
81112b78:	003edd06 	br	811126f0 <__reset+0xfb0f26f0>
81112b7c:	3804d27a 	srli	r2,r7,9
81112b80:	00c00104 	movi	r3,4
81112b84:	1880442e 	bgeu	r3,r2,81112c98 <_malloc_r+0x628>
81112b88:	00c00504 	movi	r3,20
81112b8c:	18808136 	bltu	r3,r2,81112d94 <_malloc_r+0x724>
81112b90:	11401704 	addi	r5,r2,92
81112b94:	10c016c4 	addi	r3,r2,91
81112b98:	294b883a 	add	r5,r5,r5
81112b9c:	294b883a 	add	r5,r5,r5
81112ba0:	294b883a 	add	r5,r5,r5
81112ba4:	994b883a 	add	r5,r19,r5
81112ba8:	28800017 	ldw	r2,0(r5)
81112bac:	01a04534 	movhi	r6,33044
81112bb0:	297ffe04 	addi	r5,r5,-8
81112bb4:	31831804 	addi	r6,r6,3168
81112bb8:	28806526 	beq	r5,r2,81112d50 <_malloc_r+0x6e0>
81112bbc:	01bfff04 	movi	r6,-4
81112bc0:	10c00117 	ldw	r3,4(r2)
81112bc4:	1986703a 	and	r3,r3,r6
81112bc8:	38c0022e 	bgeu	r7,r3,81112bd4 <_malloc_r+0x564>
81112bcc:	10800217 	ldw	r2,8(r2)
81112bd0:	28bffb1e 	bne	r5,r2,81112bc0 <__reset+0xfb0f2bc0>
81112bd4:	11400317 	ldw	r5,12(r2)
81112bd8:	98c00117 	ldw	r3,4(r19)
81112bdc:	81400315 	stw	r5,12(r16)
81112be0:	80800215 	stw	r2,8(r16)
81112be4:	2c000215 	stw	r16,8(r5)
81112be8:	14000315 	stw	r16,12(r2)
81112bec:	003ef806 	br	811127d0 <__reset+0xfb0f27d0>
81112bf0:	88c00054 	ori	r3,r17,1
81112bf4:	80c00115 	stw	r3,4(r16)
81112bf8:	8463883a 	add	r17,r16,r17
81112bfc:	34400515 	stw	r17,20(r6)
81112c00:	34400415 	stw	r17,16(r6)
81112c04:	10c00054 	ori	r3,r2,1
81112c08:	8a000315 	stw	r8,12(r17)
81112c0c:	8a000215 	stw	r8,8(r17)
81112c10:	88c00115 	stw	r3,4(r17)
81112c14:	88a3883a 	add	r17,r17,r2
81112c18:	88800015 	stw	r2,0(r17)
81112c1c:	9009883a 	mov	r4,r18
81112c20:	11295d40 	call	811295d4 <__malloc_unlock>
81112c24:	80800204 	addi	r2,r16,8
81112c28:	003f3c06 	br	8111291c <__reset+0xfb0f291c>
81112c2c:	30c00117 	ldw	r3,4(r6)
81112c30:	003ee706 	br	811127d0 <__reset+0xfb0f27d0>
81112c34:	5ac00044 	addi	r11,r11,1
81112c38:	588000cc 	andi	r2,r11,3
81112c3c:	31800204 	addi	r6,r6,8
81112c40:	103efd1e 	bne	r2,zero,81112838 <__reset+0xfb0f2838>
81112c44:	00002406 	br	81112cd8 <_malloc_r+0x668>
81112c48:	14000317 	ldw	r16,12(r2)
81112c4c:	143f251e 	bne	r2,r16,811128e4 <__reset+0xfb0f28e4>
81112c50:	21000084 	addi	r4,r4,2
81112c54:	003ebc06 	br	81112748 <__reset+0xfb0f2748>
81112c58:	8085883a 	add	r2,r16,r2
81112c5c:	10c00117 	ldw	r3,4(r2)
81112c60:	81000317 	ldw	r4,12(r16)
81112c64:	81400217 	ldw	r5,8(r16)
81112c68:	18c00054 	ori	r3,r3,1
81112c6c:	10c00115 	stw	r3,4(r2)
81112c70:	29000315 	stw	r4,12(r5)
81112c74:	21400215 	stw	r5,8(r4)
81112c78:	9009883a 	mov	r4,r18
81112c7c:	11295d40 	call	811295d4 <__malloc_unlock>
81112c80:	80800204 	addi	r2,r16,8
81112c84:	003f2506 	br	8111291c <__reset+0xfb0f291c>
81112c88:	12001704 	addi	r8,r2,92
81112c8c:	11c016c4 	addi	r7,r2,91
81112c90:	4209883a 	add	r4,r8,r8
81112c94:	003e9606 	br	811126f0 <__reset+0xfb0f26f0>
81112c98:	3804d1ba 	srli	r2,r7,6
81112c9c:	11400e44 	addi	r5,r2,57
81112ca0:	10c00e04 	addi	r3,r2,56
81112ca4:	294b883a 	add	r5,r5,r5
81112ca8:	003fbc06 	br	81112b9c <__reset+0xfb0f2b9c>
81112cac:	84ff5926 	beq	r16,r19,81112a14 <__reset+0xfb0f2a14>
81112cb0:	00a04534 	movhi	r2,33044
81112cb4:	10831804 	addi	r2,r2,3168
81112cb8:	14000217 	ldw	r16,8(r2)
81112cbc:	00bfff04 	movi	r2,-4
81112cc0:	80c00117 	ldw	r3,4(r16)
81112cc4:	1886703a 	and	r3,r3,r2
81112cc8:	003f9106 	br	81112b10 <__reset+0xfb0f2b10>
81112ccc:	60800217 	ldw	r2,8(r12)
81112cd0:	213fffc4 	addi	r4,r4,-1
81112cd4:	1300651e 	bne	r2,r12,81112e6c <_malloc_r+0x7fc>
81112cd8:	208000cc 	andi	r2,r4,3
81112cdc:	633ffe04 	addi	r12,r12,-8
81112ce0:	103ffa1e 	bne	r2,zero,81112ccc <__reset+0xfb0f2ccc>
81112ce4:	98800117 	ldw	r2,4(r19)
81112ce8:	0146303a 	nor	r3,zero,r5
81112cec:	1884703a 	and	r2,r3,r2
81112cf0:	98800115 	stw	r2,4(r19)
81112cf4:	294b883a 	add	r5,r5,r5
81112cf8:	117f2836 	bltu	r2,r5,8111299c <__reset+0xfb0f299c>
81112cfc:	283f2726 	beq	r5,zero,8111299c <__reset+0xfb0f299c>
81112d00:	2886703a 	and	r3,r5,r2
81112d04:	5809883a 	mov	r4,r11
81112d08:	183ec31e 	bne	r3,zero,81112818 <__reset+0xfb0f2818>
81112d0c:	294b883a 	add	r5,r5,r5
81112d10:	2886703a 	and	r3,r5,r2
81112d14:	21000104 	addi	r4,r4,4
81112d18:	183ffc26 	beq	r3,zero,81112d0c <__reset+0xfb0f2d0c>
81112d1c:	003ebe06 	br	81112818 <__reset+0xfb0f2818>
81112d20:	00c05504 	movi	r3,340
81112d24:	18801236 	bltu	r3,r2,81112d70 <_malloc_r+0x700>
81112d28:	8804d3fa 	srli	r2,r17,15
81112d2c:	12001e04 	addi	r8,r2,120
81112d30:	11c01dc4 	addi	r7,r2,119
81112d34:	4209883a 	add	r4,r8,r8
81112d38:	003e6d06 	br	811126f0 <__reset+0xfb0f26f0>
81112d3c:	00c40004 	movi	r3,4096
81112d40:	003f4606 	br	81112a5c <__reset+0xfb0f2a5c>
81112d44:	00800044 	movi	r2,1
81112d48:	a0800115 	stw	r2,4(r20)
81112d4c:	003f7406 	br	81112b20 <__reset+0xfb0f2b20>
81112d50:	1805d0ba 	srai	r2,r3,2
81112d54:	01c00044 	movi	r7,1
81112d58:	30c00117 	ldw	r3,4(r6)
81112d5c:	388e983a 	sll	r7,r7,r2
81112d60:	2805883a 	mov	r2,r5
81112d64:	38c6b03a 	or	r3,r7,r3
81112d68:	30c00115 	stw	r3,4(r6)
81112d6c:	003f9b06 	br	81112bdc <__reset+0xfb0f2bdc>
81112d70:	00c15504 	movi	r3,1364
81112d74:	18801a36 	bltu	r3,r2,81112de0 <_malloc_r+0x770>
81112d78:	8804d4ba 	srli	r2,r17,18
81112d7c:	12001f44 	addi	r8,r2,125
81112d80:	11c01f04 	addi	r7,r2,124
81112d84:	4209883a 	add	r4,r8,r8
81112d88:	003e5906 	br	811126f0 <__reset+0xfb0f26f0>
81112d8c:	ad400404 	addi	r21,r21,16
81112d90:	003f1706 	br	811129f0 <__reset+0xfb0f29f0>
81112d94:	00c01504 	movi	r3,84
81112d98:	18802336 	bltu	r3,r2,81112e28 <_malloc_r+0x7b8>
81112d9c:	3804d33a 	srli	r2,r7,12
81112da0:	11401bc4 	addi	r5,r2,111
81112da4:	10c01b84 	addi	r3,r2,110
81112da8:	294b883a 	add	r5,r5,r5
81112dac:	003f7b06 	br	81112b9c <__reset+0xfb0f2b9c>
81112db0:	9c000217 	ldw	r16,8(r19)
81112db4:	00bfff04 	movi	r2,-4
81112db8:	80c00117 	ldw	r3,4(r16)
81112dbc:	1886703a 	and	r3,r3,r2
81112dc0:	003f5306 	br	81112b10 <__reset+0xfb0f2b10>
81112dc4:	3083ffcc 	andi	r2,r6,4095
81112dc8:	103f181e 	bne	r2,zero,81112a2c <__reset+0xfb0f2a2c>
81112dcc:	99000217 	ldw	r4,8(r19)
81112dd0:	b545883a 	add	r2,r22,r21
81112dd4:	10800054 	ori	r2,r2,1
81112dd8:	20800115 	stw	r2,4(r4)
81112ddc:	003f3e06 	br	81112ad8 <__reset+0xfb0f2ad8>
81112de0:	01003f84 	movi	r4,254
81112de4:	02001fc4 	movi	r8,127
81112de8:	01c01f84 	movi	r7,126
81112dec:	003e4006 	br	811126f0 <__reset+0xfb0f26f0>
81112df0:	00a04534 	movhi	r2,33044
81112df4:	10895b04 	addi	r2,r2,9580
81112df8:	15000015 	stw	r20,0(r2)
81112dfc:	003f1106 	br	81112a44 <__reset+0xfb0f2a44>
81112e00:	00800044 	movi	r2,1
81112e04:	002b883a 	mov	r21,zero
81112e08:	003f1f06 	br	81112a88 <__reset+0xfb0f2a88>
81112e0c:	81400204 	addi	r5,r16,8
81112e10:	9009883a 	mov	r4,r18
81112e14:	111c0e40 	call	8111c0e4 <_free_r>
81112e18:	00a04534 	movhi	r2,33044
81112e1c:	108a1c04 	addi	r2,r2,10352
81112e20:	10c00017 	ldw	r3,0(r2)
81112e24:	003f2c06 	br	81112ad8 <__reset+0xfb0f2ad8>
81112e28:	00c05504 	movi	r3,340
81112e2c:	18800536 	bltu	r3,r2,81112e44 <_malloc_r+0x7d4>
81112e30:	3804d3fa 	srli	r2,r7,15
81112e34:	11401e04 	addi	r5,r2,120
81112e38:	10c01dc4 	addi	r3,r2,119
81112e3c:	294b883a 	add	r5,r5,r5
81112e40:	003f5606 	br	81112b9c <__reset+0xfb0f2b9c>
81112e44:	00c15504 	movi	r3,1364
81112e48:	18800536 	bltu	r3,r2,81112e60 <_malloc_r+0x7f0>
81112e4c:	3804d4ba 	srli	r2,r7,18
81112e50:	11401f44 	addi	r5,r2,125
81112e54:	10c01f04 	addi	r3,r2,124
81112e58:	294b883a 	add	r5,r5,r5
81112e5c:	003f4f06 	br	81112b9c <__reset+0xfb0f2b9c>
81112e60:	01403f84 	movi	r5,254
81112e64:	00c01f84 	movi	r3,126
81112e68:	003f4c06 	br	81112b9c <__reset+0xfb0f2b9c>
81112e6c:	98800117 	ldw	r2,4(r19)
81112e70:	003fa006 	br	81112cf4 <__reset+0xfb0f2cf4>
81112e74:	8808d0fa 	srli	r4,r17,3
81112e78:	20800044 	addi	r2,r4,1
81112e7c:	1085883a 	add	r2,r2,r2
81112e80:	003e9006 	br	811128c4 <__reset+0xfb0f28c4>

81112e84 <memcpy>:
81112e84:	defffd04 	addi	sp,sp,-12
81112e88:	de00012e 	bgeu	sp,et,81112e90 <memcpy+0xc>
81112e8c:	003b68fa 	trap	3
81112e90:	00c003c4 	movi	r3,15
81112e94:	dfc00215 	stw	ra,8(sp)
81112e98:	dc400115 	stw	r17,4(sp)
81112e9c:	dc000015 	stw	r16,0(sp)
81112ea0:	2005883a 	mov	r2,r4
81112ea4:	1980452e 	bgeu	r3,r6,81112fbc <memcpy+0x138>
81112ea8:	2906b03a 	or	r3,r5,r4
81112eac:	18c000cc 	andi	r3,r3,3
81112eb0:	1800441e 	bne	r3,zero,81112fc4 <memcpy+0x140>
81112eb4:	347ffc04 	addi	r17,r6,-16
81112eb8:	8822d13a 	srli	r17,r17,4
81112ebc:	28c00104 	addi	r3,r5,4
81112ec0:	23400104 	addi	r13,r4,4
81112ec4:	8820913a 	slli	r16,r17,4
81112ec8:	2b000204 	addi	r12,r5,8
81112ecc:	22c00204 	addi	r11,r4,8
81112ed0:	84000504 	addi	r16,r16,20
81112ed4:	2a800304 	addi	r10,r5,12
81112ed8:	22400304 	addi	r9,r4,12
81112edc:	2c21883a 	add	r16,r5,r16
81112ee0:	2811883a 	mov	r8,r5
81112ee4:	200f883a 	mov	r7,r4
81112ee8:	41000017 	ldw	r4,0(r8)
81112eec:	1fc00017 	ldw	ra,0(r3)
81112ef0:	63c00017 	ldw	r15,0(r12)
81112ef4:	39000015 	stw	r4,0(r7)
81112ef8:	53800017 	ldw	r14,0(r10)
81112efc:	6fc00015 	stw	ra,0(r13)
81112f00:	5bc00015 	stw	r15,0(r11)
81112f04:	4b800015 	stw	r14,0(r9)
81112f08:	18c00404 	addi	r3,r3,16
81112f0c:	39c00404 	addi	r7,r7,16
81112f10:	42000404 	addi	r8,r8,16
81112f14:	6b400404 	addi	r13,r13,16
81112f18:	63000404 	addi	r12,r12,16
81112f1c:	5ac00404 	addi	r11,r11,16
81112f20:	52800404 	addi	r10,r10,16
81112f24:	4a400404 	addi	r9,r9,16
81112f28:	1c3fef1e 	bne	r3,r16,81112ee8 <__reset+0xfb0f2ee8>
81112f2c:	89c00044 	addi	r7,r17,1
81112f30:	380e913a 	slli	r7,r7,4
81112f34:	310003cc 	andi	r4,r6,15
81112f38:	02c000c4 	movi	r11,3
81112f3c:	11c7883a 	add	r3,r2,r7
81112f40:	29cb883a 	add	r5,r5,r7
81112f44:	5900212e 	bgeu	r11,r4,81112fcc <memcpy+0x148>
81112f48:	1813883a 	mov	r9,r3
81112f4c:	2811883a 	mov	r8,r5
81112f50:	200f883a 	mov	r7,r4
81112f54:	42800017 	ldw	r10,0(r8)
81112f58:	4a400104 	addi	r9,r9,4
81112f5c:	39ffff04 	addi	r7,r7,-4
81112f60:	4abfff15 	stw	r10,-4(r9)
81112f64:	42000104 	addi	r8,r8,4
81112f68:	59fffa36 	bltu	r11,r7,81112f54 <__reset+0xfb0f2f54>
81112f6c:	213fff04 	addi	r4,r4,-4
81112f70:	2008d0ba 	srli	r4,r4,2
81112f74:	318000cc 	andi	r6,r6,3
81112f78:	21000044 	addi	r4,r4,1
81112f7c:	2109883a 	add	r4,r4,r4
81112f80:	2109883a 	add	r4,r4,r4
81112f84:	1907883a 	add	r3,r3,r4
81112f88:	290b883a 	add	r5,r5,r4
81112f8c:	30000626 	beq	r6,zero,81112fa8 <memcpy+0x124>
81112f90:	198d883a 	add	r6,r3,r6
81112f94:	29c00003 	ldbu	r7,0(r5)
81112f98:	18c00044 	addi	r3,r3,1
81112f9c:	29400044 	addi	r5,r5,1
81112fa0:	19ffffc5 	stb	r7,-1(r3)
81112fa4:	19bffb1e 	bne	r3,r6,81112f94 <__reset+0xfb0f2f94>
81112fa8:	dfc00217 	ldw	ra,8(sp)
81112fac:	dc400117 	ldw	r17,4(sp)
81112fb0:	dc000017 	ldw	r16,0(sp)
81112fb4:	dec00304 	addi	sp,sp,12
81112fb8:	f800283a 	ret
81112fbc:	2007883a 	mov	r3,r4
81112fc0:	003ff206 	br	81112f8c <__reset+0xfb0f2f8c>
81112fc4:	2007883a 	mov	r3,r4
81112fc8:	003ff106 	br	81112f90 <__reset+0xfb0f2f90>
81112fcc:	200d883a 	mov	r6,r4
81112fd0:	003fee06 	br	81112f8c <__reset+0xfb0f2f8c>

81112fd4 <memset>:
81112fd4:	20c000cc 	andi	r3,r4,3
81112fd8:	2005883a 	mov	r2,r4
81112fdc:	18004426 	beq	r3,zero,811130f0 <memset+0x11c>
81112fe0:	31ffffc4 	addi	r7,r6,-1
81112fe4:	30004026 	beq	r6,zero,811130e8 <memset+0x114>
81112fe8:	2813883a 	mov	r9,r5
81112fec:	200d883a 	mov	r6,r4
81112ff0:	2007883a 	mov	r3,r4
81112ff4:	00000406 	br	81113008 <memset+0x34>
81112ff8:	3a3fffc4 	addi	r8,r7,-1
81112ffc:	31800044 	addi	r6,r6,1
81113000:	38003926 	beq	r7,zero,811130e8 <memset+0x114>
81113004:	400f883a 	mov	r7,r8
81113008:	18c00044 	addi	r3,r3,1
8111300c:	32400005 	stb	r9,0(r6)
81113010:	1a0000cc 	andi	r8,r3,3
81113014:	403ff81e 	bne	r8,zero,81112ff8 <__reset+0xfb0f2ff8>
81113018:	010000c4 	movi	r4,3
8111301c:	21c02d2e 	bgeu	r4,r7,811130d4 <memset+0x100>
81113020:	29003fcc 	andi	r4,r5,255
81113024:	200c923a 	slli	r6,r4,8
81113028:	3108b03a 	or	r4,r6,r4
8111302c:	200c943a 	slli	r6,r4,16
81113030:	218cb03a 	or	r6,r4,r6
81113034:	010003c4 	movi	r4,15
81113038:	21c0182e 	bgeu	r4,r7,8111309c <memset+0xc8>
8111303c:	3b3ffc04 	addi	r12,r7,-16
81113040:	6018d13a 	srli	r12,r12,4
81113044:	1a000104 	addi	r8,r3,4
81113048:	1ac00204 	addi	r11,r3,8
8111304c:	6008913a 	slli	r4,r12,4
81113050:	1a800304 	addi	r10,r3,12
81113054:	1813883a 	mov	r9,r3
81113058:	21000504 	addi	r4,r4,20
8111305c:	1909883a 	add	r4,r3,r4
81113060:	49800015 	stw	r6,0(r9)
81113064:	41800015 	stw	r6,0(r8)
81113068:	59800015 	stw	r6,0(r11)
8111306c:	51800015 	stw	r6,0(r10)
81113070:	42000404 	addi	r8,r8,16
81113074:	4a400404 	addi	r9,r9,16
81113078:	5ac00404 	addi	r11,r11,16
8111307c:	52800404 	addi	r10,r10,16
81113080:	413ff71e 	bne	r8,r4,81113060 <__reset+0xfb0f3060>
81113084:	63000044 	addi	r12,r12,1
81113088:	6018913a 	slli	r12,r12,4
8111308c:	39c003cc 	andi	r7,r7,15
81113090:	010000c4 	movi	r4,3
81113094:	1b07883a 	add	r3,r3,r12
81113098:	21c00e2e 	bgeu	r4,r7,811130d4 <memset+0x100>
8111309c:	1813883a 	mov	r9,r3
811130a0:	3811883a 	mov	r8,r7
811130a4:	010000c4 	movi	r4,3
811130a8:	49800015 	stw	r6,0(r9)
811130ac:	423fff04 	addi	r8,r8,-4
811130b0:	4a400104 	addi	r9,r9,4
811130b4:	223ffc36 	bltu	r4,r8,811130a8 <__reset+0xfb0f30a8>
811130b8:	393fff04 	addi	r4,r7,-4
811130bc:	2008d0ba 	srli	r4,r4,2
811130c0:	39c000cc 	andi	r7,r7,3
811130c4:	21000044 	addi	r4,r4,1
811130c8:	2109883a 	add	r4,r4,r4
811130cc:	2109883a 	add	r4,r4,r4
811130d0:	1907883a 	add	r3,r3,r4
811130d4:	38000526 	beq	r7,zero,811130ec <memset+0x118>
811130d8:	19cf883a 	add	r7,r3,r7
811130dc:	19400005 	stb	r5,0(r3)
811130e0:	18c00044 	addi	r3,r3,1
811130e4:	38fffd1e 	bne	r7,r3,811130dc <__reset+0xfb0f30dc>
811130e8:	f800283a 	ret
811130ec:	f800283a 	ret
811130f0:	2007883a 	mov	r3,r4
811130f4:	300f883a 	mov	r7,r6
811130f8:	003fc706 	br	81113018 <__reset+0xfb0f3018>

811130fc <_open_r>:
811130fc:	defffd04 	addi	sp,sp,-12
81113100:	de00012e 	bgeu	sp,et,81113108 <_open_r+0xc>
81113104:	003b68fa 	trap	3
81113108:	2805883a 	mov	r2,r5
8111310c:	dc000015 	stw	r16,0(sp)
81113110:	04204534 	movhi	r16,33044
81113114:	dc400115 	stw	r17,4(sp)
81113118:	300b883a 	mov	r5,r6
8111311c:	8409b604 	addi	r16,r16,9944
81113120:	2023883a 	mov	r17,r4
81113124:	380d883a 	mov	r6,r7
81113128:	1009883a 	mov	r4,r2
8111312c:	dfc00215 	stw	ra,8(sp)
81113130:	80000015 	stw	zero,0(r16)
81113134:	1128b2c0 	call	81128b2c <open>
81113138:	00ffffc4 	movi	r3,-1
8111313c:	10c00526 	beq	r2,r3,81113154 <_open_r+0x58>
81113140:	dfc00217 	ldw	ra,8(sp)
81113144:	dc400117 	ldw	r17,4(sp)
81113148:	dc000017 	ldw	r16,0(sp)
8111314c:	dec00304 	addi	sp,sp,12
81113150:	f800283a 	ret
81113154:	80c00017 	ldw	r3,0(r16)
81113158:	183ff926 	beq	r3,zero,81113140 <__reset+0xfb0f3140>
8111315c:	88c00015 	stw	r3,0(r17)
81113160:	003ff706 	br	81113140 <__reset+0xfb0f3140>

81113164 <_printf_r>:
81113164:	defffd04 	addi	sp,sp,-12
81113168:	2805883a 	mov	r2,r5
8111316c:	de00012e 	bgeu	sp,et,81113174 <_printf_r+0x10>
81113170:	003b68fa 	trap	3
81113174:	dfc00015 	stw	ra,0(sp)
81113178:	d9800115 	stw	r6,4(sp)
8111317c:	d9c00215 	stw	r7,8(sp)
81113180:	21400217 	ldw	r5,8(r4)
81113184:	d9c00104 	addi	r7,sp,4
81113188:	100d883a 	mov	r6,r2
8111318c:	1115e900 	call	81115e90 <___vfprintf_internal_r>
81113190:	dfc00017 	ldw	ra,0(sp)
81113194:	dec00304 	addi	sp,sp,12
81113198:	f800283a 	ret

8111319c <printf>:
8111319c:	defffc04 	addi	sp,sp,-16
811131a0:	de00012e 	bgeu	sp,et,811131a8 <printf+0xc>
811131a4:	003b68fa 	trap	3
811131a8:	dfc00015 	stw	ra,0(sp)
811131ac:	d9400115 	stw	r5,4(sp)
811131b0:	d9800215 	stw	r6,8(sp)
811131b4:	d9c00315 	stw	r7,12(sp)
811131b8:	00a04534 	movhi	r2,33044
811131bc:	10895a04 	addi	r2,r2,9576
811131c0:	10800017 	ldw	r2,0(r2)
811131c4:	200b883a 	mov	r5,r4
811131c8:	d9800104 	addi	r6,sp,4
811131cc:	11000217 	ldw	r4,8(r2)
811131d0:	11180900 	call	81118090 <__vfprintf_internal>
811131d4:	dfc00017 	ldw	ra,0(sp)
811131d8:	dec00404 	addi	sp,sp,16
811131dc:	f800283a 	ret

811131e0 <_putc_r>:
811131e0:	defffc04 	addi	sp,sp,-16
811131e4:	de00012e 	bgeu	sp,et,811131ec <_putc_r+0xc>
811131e8:	003b68fa 	trap	3
811131ec:	dc000215 	stw	r16,8(sp)
811131f0:	dfc00315 	stw	ra,12(sp)
811131f4:	2021883a 	mov	r16,r4
811131f8:	20000226 	beq	r4,zero,81113204 <_putc_r+0x24>
811131fc:	20800e17 	ldw	r2,56(r4)
81113200:	10001b26 	beq	r2,zero,81113270 <_putc_r+0x90>
81113204:	30800217 	ldw	r2,8(r6)
81113208:	10bfffc4 	addi	r2,r2,-1
8111320c:	30800215 	stw	r2,8(r6)
81113210:	10000a16 	blt	r2,zero,8111323c <_putc_r+0x5c>
81113214:	30800017 	ldw	r2,0(r6)
81113218:	11400005 	stb	r5,0(r2)
8111321c:	30800017 	ldw	r2,0(r6)
81113220:	10c00044 	addi	r3,r2,1
81113224:	30c00015 	stw	r3,0(r6)
81113228:	10800003 	ldbu	r2,0(r2)
8111322c:	dfc00317 	ldw	ra,12(sp)
81113230:	dc000217 	ldw	r16,8(sp)
81113234:	dec00404 	addi	sp,sp,16
81113238:	f800283a 	ret
8111323c:	30c00617 	ldw	r3,24(r6)
81113240:	10c00616 	blt	r2,r3,8111325c <_putc_r+0x7c>
81113244:	30800017 	ldw	r2,0(r6)
81113248:	00c00284 	movi	r3,10
8111324c:	11400005 	stb	r5,0(r2)
81113250:	30800017 	ldw	r2,0(r6)
81113254:	11400003 	ldbu	r5,0(r2)
81113258:	28fff11e 	bne	r5,r3,81113220 <__reset+0xfb0f3220>
8111325c:	8009883a 	mov	r4,r16
81113260:	dfc00317 	ldw	ra,12(sp)
81113264:	dc000217 	ldw	r16,8(sp)
81113268:	dec00404 	addi	sp,sp,16
8111326c:	1119a141 	jmpi	81119a14 <__swbuf_r>
81113270:	d9400015 	stw	r5,0(sp)
81113274:	d9800115 	stw	r6,4(sp)
81113278:	111bc4c0 	call	8111bc4c <__sinit>
8111327c:	d9800117 	ldw	r6,4(sp)
81113280:	d9400017 	ldw	r5,0(sp)
81113284:	003fdf06 	br	81113204 <__reset+0xfb0f3204>

81113288 <putc>:
81113288:	00a04534 	movhi	r2,33044
8111328c:	defffc04 	addi	sp,sp,-16
81113290:	10895a04 	addi	r2,r2,9576
81113294:	de00012e 	bgeu	sp,et,8111329c <putc+0x14>
81113298:	003b68fa 	trap	3
8111329c:	dc000115 	stw	r16,4(sp)
811132a0:	14000017 	ldw	r16,0(r2)
811132a4:	dc400215 	stw	r17,8(sp)
811132a8:	dfc00315 	stw	ra,12(sp)
811132ac:	2023883a 	mov	r17,r4
811132b0:	80000226 	beq	r16,zero,811132bc <putc+0x34>
811132b4:	80800e17 	ldw	r2,56(r16)
811132b8:	10001a26 	beq	r2,zero,81113324 <putc+0x9c>
811132bc:	28800217 	ldw	r2,8(r5)
811132c0:	10bfffc4 	addi	r2,r2,-1
811132c4:	28800215 	stw	r2,8(r5)
811132c8:	10000b16 	blt	r2,zero,811132f8 <putc+0x70>
811132cc:	28800017 	ldw	r2,0(r5)
811132d0:	14400005 	stb	r17,0(r2)
811132d4:	28800017 	ldw	r2,0(r5)
811132d8:	10c00044 	addi	r3,r2,1
811132dc:	28c00015 	stw	r3,0(r5)
811132e0:	10800003 	ldbu	r2,0(r2)
811132e4:	dfc00317 	ldw	ra,12(sp)
811132e8:	dc400217 	ldw	r17,8(sp)
811132ec:	dc000117 	ldw	r16,4(sp)
811132f0:	dec00404 	addi	sp,sp,16
811132f4:	f800283a 	ret
811132f8:	28c00617 	ldw	r3,24(r5)
811132fc:	10c00e16 	blt	r2,r3,81113338 <putc+0xb0>
81113300:	28800017 	ldw	r2,0(r5)
81113304:	01000284 	movi	r4,10
81113308:	14400005 	stb	r17,0(r2)
8111330c:	28800017 	ldw	r2,0(r5)
81113310:	10c00003 	ldbu	r3,0(r2)
81113314:	193ff01e 	bne	r3,r4,811132d8 <__reset+0xfb0f32d8>
81113318:	280d883a 	mov	r6,r5
8111331c:	180b883a 	mov	r5,r3
81113320:	00000706 	br	81113340 <putc+0xb8>
81113324:	8009883a 	mov	r4,r16
81113328:	d9400015 	stw	r5,0(sp)
8111332c:	111bc4c0 	call	8111bc4c <__sinit>
81113330:	d9400017 	ldw	r5,0(sp)
81113334:	003fe106 	br	811132bc <__reset+0xfb0f32bc>
81113338:	280d883a 	mov	r6,r5
8111333c:	880b883a 	mov	r5,r17
81113340:	8009883a 	mov	r4,r16
81113344:	dfc00317 	ldw	ra,12(sp)
81113348:	dc400217 	ldw	r17,8(sp)
8111334c:	dc000117 	ldw	r16,4(sp)
81113350:	dec00404 	addi	sp,sp,16
81113354:	1119a141 	jmpi	81119a14 <__swbuf_r>

81113358 <_puts_r>:
81113358:	defff604 	addi	sp,sp,-40
8111335c:	de00012e 	bgeu	sp,et,81113364 <_puts_r+0xc>
81113360:	003b68fa 	trap	3
81113364:	dc000715 	stw	r16,28(sp)
81113368:	2021883a 	mov	r16,r4
8111336c:	2809883a 	mov	r4,r5
81113370:	dc400815 	stw	r17,32(sp)
81113374:	dfc00915 	stw	ra,36(sp)
81113378:	2823883a 	mov	r17,r5
8111337c:	11139780 	call	81113978 <strlen>
81113380:	10c00044 	addi	r3,r2,1
81113384:	d8800115 	stw	r2,4(sp)
81113388:	00a04534 	movhi	r2,33044
8111338c:	10bf6e04 	addi	r2,r2,-584
81113390:	d8800215 	stw	r2,8(sp)
81113394:	00800044 	movi	r2,1
81113398:	d8800315 	stw	r2,12(sp)
8111339c:	00800084 	movi	r2,2
811133a0:	dc400015 	stw	r17,0(sp)
811133a4:	d8c00615 	stw	r3,24(sp)
811133a8:	dec00415 	stw	sp,16(sp)
811133ac:	d8800515 	stw	r2,20(sp)
811133b0:	80000226 	beq	r16,zero,811133bc <_puts_r+0x64>
811133b4:	80800e17 	ldw	r2,56(r16)
811133b8:	10001426 	beq	r2,zero,8111340c <_puts_r+0xb4>
811133bc:	81400217 	ldw	r5,8(r16)
811133c0:	2880030b 	ldhu	r2,12(r5)
811133c4:	10c8000c 	andi	r3,r2,8192
811133c8:	1800061e 	bne	r3,zero,811133e4 <_puts_r+0x8c>
811133cc:	29001917 	ldw	r4,100(r5)
811133d0:	00f7ffc4 	movi	r3,-8193
811133d4:	10880014 	ori	r2,r2,8192
811133d8:	20c6703a 	and	r3,r4,r3
811133dc:	2880030d 	sth	r2,12(r5)
811133e0:	28c01915 	stw	r3,100(r5)
811133e4:	d9800404 	addi	r6,sp,16
811133e8:	8009883a 	mov	r4,r16
811133ec:	111c3fc0 	call	8111c3fc <__sfvwrite_r>
811133f0:	1000091e 	bne	r2,zero,81113418 <_puts_r+0xc0>
811133f4:	00800284 	movi	r2,10
811133f8:	dfc00917 	ldw	ra,36(sp)
811133fc:	dc400817 	ldw	r17,32(sp)
81113400:	dc000717 	ldw	r16,28(sp)
81113404:	dec00a04 	addi	sp,sp,40
81113408:	f800283a 	ret
8111340c:	8009883a 	mov	r4,r16
81113410:	111bc4c0 	call	8111bc4c <__sinit>
81113414:	003fe906 	br	811133bc <__reset+0xfb0f33bc>
81113418:	00bfffc4 	movi	r2,-1
8111341c:	003ff606 	br	811133f8 <__reset+0xfb0f33f8>

81113420 <puts>:
81113420:	00a04534 	movhi	r2,33044
81113424:	10895a04 	addi	r2,r2,9576
81113428:	200b883a 	mov	r5,r4
8111342c:	11000017 	ldw	r4,0(r2)
81113430:	11133581 	jmpi	81113358 <_puts_r>

81113434 <lflush>:
81113434:	2080030b 	ldhu	r2,12(r4)
81113438:	00c00244 	movi	r3,9
8111343c:	1080024c 	andi	r2,r2,9
81113440:	10c00226 	beq	r2,r3,8111344c <lflush+0x18>
81113444:	0005883a 	mov	r2,zero
81113448:	f800283a 	ret
8111344c:	111b8b41 	jmpi	8111b8b4 <fflush>

81113450 <__srefill_r>:
81113450:	defffc04 	addi	sp,sp,-16
81113454:	de00012e 	bgeu	sp,et,8111345c <__srefill_r+0xc>
81113458:	003b68fa 	trap	3
8111345c:	dc400115 	stw	r17,4(sp)
81113460:	dc000015 	stw	r16,0(sp)
81113464:	dfc00315 	stw	ra,12(sp)
81113468:	dc800215 	stw	r18,8(sp)
8111346c:	2023883a 	mov	r17,r4
81113470:	2821883a 	mov	r16,r5
81113474:	20000226 	beq	r4,zero,81113480 <__srefill_r+0x30>
81113478:	20800e17 	ldw	r2,56(r4)
8111347c:	10003c26 	beq	r2,zero,81113570 <__srefill_r+0x120>
81113480:	80c0030b 	ldhu	r3,12(r16)
81113484:	1908000c 	andi	r4,r3,8192
81113488:	1805883a 	mov	r2,r3
8111348c:	2000071e 	bne	r4,zero,811134ac <__srefill_r+0x5c>
81113490:	81001917 	ldw	r4,100(r16)
81113494:	18880014 	ori	r2,r3,8192
81113498:	00f7ffc4 	movi	r3,-8193
8111349c:	20c8703a 	and	r4,r4,r3
811134a0:	8080030d 	sth	r2,12(r16)
811134a4:	1007883a 	mov	r3,r2
811134a8:	81001915 	stw	r4,100(r16)
811134ac:	80000115 	stw	zero,4(r16)
811134b0:	1100080c 	andi	r4,r2,32
811134b4:	2000571e 	bne	r4,zero,81113614 <__srefill_r+0x1c4>
811134b8:	1100010c 	andi	r4,r2,4
811134bc:	20001f26 	beq	r4,zero,8111353c <__srefill_r+0xec>
811134c0:	81400c17 	ldw	r5,48(r16)
811134c4:	28000826 	beq	r5,zero,811134e8 <__srefill_r+0x98>
811134c8:	80801004 	addi	r2,r16,64
811134cc:	28800226 	beq	r5,r2,811134d8 <__srefill_r+0x88>
811134d0:	8809883a 	mov	r4,r17
811134d4:	111c0e40 	call	8111c0e4 <_free_r>
811134d8:	80800f17 	ldw	r2,60(r16)
811134dc:	80000c15 	stw	zero,48(r16)
811134e0:	80800115 	stw	r2,4(r16)
811134e4:	1000391e 	bne	r2,zero,811135cc <__srefill_r+0x17c>
811134e8:	80800417 	ldw	r2,16(r16)
811134ec:	10004b26 	beq	r2,zero,8111361c <__srefill_r+0x1cc>
811134f0:	8480030b 	ldhu	r18,12(r16)
811134f4:	908000cc 	andi	r2,r18,3
811134f8:	10001f1e 	bne	r2,zero,81113578 <__srefill_r+0x128>
811134fc:	81800417 	ldw	r6,16(r16)
81113500:	80800817 	ldw	r2,32(r16)
81113504:	81c00517 	ldw	r7,20(r16)
81113508:	81400717 	ldw	r5,28(r16)
8111350c:	81800015 	stw	r6,0(r16)
81113510:	8809883a 	mov	r4,r17
81113514:	103ee83a 	callr	r2
81113518:	80800115 	stw	r2,4(r16)
8111351c:	00800e0e 	bge	zero,r2,81113558 <__srefill_r+0x108>
81113520:	0005883a 	mov	r2,zero
81113524:	dfc00317 	ldw	ra,12(sp)
81113528:	dc800217 	ldw	r18,8(sp)
8111352c:	dc400117 	ldw	r17,4(sp)
81113530:	dc000017 	ldw	r16,0(sp)
81113534:	dec00404 	addi	sp,sp,16
81113538:	f800283a 	ret
8111353c:	1100040c 	andi	r4,r2,16
81113540:	20003026 	beq	r4,zero,81113604 <__srefill_r+0x1b4>
81113544:	1080020c 	andi	r2,r2,8
81113548:	1000241e 	bne	r2,zero,811135dc <__srefill_r+0x18c>
8111354c:	18c00114 	ori	r3,r3,4
81113550:	80c0030d 	sth	r3,12(r16)
81113554:	003fe406 	br	811134e8 <__reset+0xfb0f34e8>
81113558:	80c0030b 	ldhu	r3,12(r16)
8111355c:	1000161e 	bne	r2,zero,811135b8 <__srefill_r+0x168>
81113560:	18c00814 	ori	r3,r3,32
81113564:	00bfffc4 	movi	r2,-1
81113568:	80c0030d 	sth	r3,12(r16)
8111356c:	003fed06 	br	81113524 <__reset+0xfb0f3524>
81113570:	111bc4c0 	call	8111bc4c <__sinit>
81113574:	003fc206 	br	81113480 <__reset+0xfb0f3480>
81113578:	00a04534 	movhi	r2,33044
8111357c:	10895904 	addi	r2,r2,9572
81113580:	11000017 	ldw	r4,0(r2)
81113584:	01604474 	movhi	r5,33041
81113588:	00800044 	movi	r2,1
8111358c:	294d0d04 	addi	r5,r5,13364
81113590:	8080030d 	sth	r2,12(r16)
81113594:	111c8c00 	call	8111c8c0 <_fwalk>
81113598:	00800244 	movi	r2,9
8111359c:	8480030d 	sth	r18,12(r16)
811135a0:	9480024c 	andi	r18,r18,9
811135a4:	90bfd51e 	bne	r18,r2,811134fc <__reset+0xfb0f34fc>
811135a8:	800b883a 	mov	r5,r16
811135ac:	8809883a 	mov	r4,r17
811135b0:	111b62c0 	call	8111b62c <__sflush_r>
811135b4:	003fd106 	br	811134fc <__reset+0xfb0f34fc>
811135b8:	18c01014 	ori	r3,r3,64
811135bc:	80000115 	stw	zero,4(r16)
811135c0:	00bfffc4 	movi	r2,-1
811135c4:	80c0030d 	sth	r3,12(r16)
811135c8:	003fd606 	br	81113524 <__reset+0xfb0f3524>
811135cc:	80c00e17 	ldw	r3,56(r16)
811135d0:	0005883a 	mov	r2,zero
811135d4:	80c00015 	stw	r3,0(r16)
811135d8:	003fd206 	br	81113524 <__reset+0xfb0f3524>
811135dc:	800b883a 	mov	r5,r16
811135e0:	8809883a 	mov	r4,r17
811135e4:	111b8500 	call	8111b850 <_fflush_r>
811135e8:	10000a1e 	bne	r2,zero,81113614 <__srefill_r+0x1c4>
811135ec:	8080030b 	ldhu	r2,12(r16)
811135f0:	00fffdc4 	movi	r3,-9
811135f4:	80000215 	stw	zero,8(r16)
811135f8:	1886703a 	and	r3,r3,r2
811135fc:	80000615 	stw	zero,24(r16)
81113600:	003fd206 	br	8111354c <__reset+0xfb0f354c>
81113604:	00800244 	movi	r2,9
81113608:	88800015 	stw	r2,0(r17)
8111360c:	18c01014 	ori	r3,r3,64
81113610:	80c0030d 	sth	r3,12(r16)
81113614:	00bfffc4 	movi	r2,-1
81113618:	003fc206 	br	81113524 <__reset+0xfb0f3524>
8111361c:	800b883a 	mov	r5,r16
81113620:	8809883a 	mov	r4,r17
81113624:	11124ac0 	call	811124ac <__smakebuf_r>
81113628:	003fb106 	br	811134f0 <__reset+0xfb0f34f0>

8111362c <_sbrk_r>:
8111362c:	defffd04 	addi	sp,sp,-12
81113630:	de00012e 	bgeu	sp,et,81113638 <_sbrk_r+0xc>
81113634:	003b68fa 	trap	3
81113638:	dc000015 	stw	r16,0(sp)
8111363c:	04204534 	movhi	r16,33044
81113640:	dc400115 	stw	r17,4(sp)
81113644:	8409b604 	addi	r16,r16,9944
81113648:	2023883a 	mov	r17,r4
8111364c:	2809883a 	mov	r4,r5
81113650:	dfc00215 	stw	ra,8(sp)
81113654:	80000015 	stw	zero,0(r16)
81113658:	1128e3c0 	call	81128e3c <sbrk>
8111365c:	00ffffc4 	movi	r3,-1
81113660:	10c00526 	beq	r2,r3,81113678 <_sbrk_r+0x4c>
81113664:	dfc00217 	ldw	ra,8(sp)
81113668:	dc400117 	ldw	r17,4(sp)
8111366c:	dc000017 	ldw	r16,0(sp)
81113670:	dec00304 	addi	sp,sp,12
81113674:	f800283a 	ret
81113678:	80c00017 	ldw	r3,0(r16)
8111367c:	183ff926 	beq	r3,zero,81113664 <__reset+0xfb0f3664>
81113680:	88c00015 	stw	r3,0(r17)
81113684:	003ff706 	br	81113664 <__reset+0xfb0f3664>

81113688 <scanf>:
81113688:	defffc04 	addi	sp,sp,-16
8111368c:	de00012e 	bgeu	sp,et,81113694 <scanf+0xc>
81113690:	003b68fa 	trap	3
81113694:	dfc00015 	stw	ra,0(sp)
81113698:	d9400115 	stw	r5,4(sp)
8111369c:	d9800215 	stw	r6,8(sp)
811136a0:	d9c00315 	stw	r7,12(sp)
811136a4:	00a04534 	movhi	r2,33044
811136a8:	10895a04 	addi	r2,r2,9576
811136ac:	200d883a 	mov	r6,r4
811136b0:	11000017 	ldw	r4,0(r2)
811136b4:	d9c00104 	addi	r7,sp,4
811136b8:	21400117 	ldw	r5,4(r4)
811136bc:	11199c00 	call	811199c0 <_vfscanf_r>
811136c0:	dfc00017 	ldw	ra,0(sp)
811136c4:	dec00404 	addi	sp,sp,16
811136c8:	f800283a 	ret

811136cc <_scanf_r>:
811136cc:	defffd04 	addi	sp,sp,-12
811136d0:	2805883a 	mov	r2,r5
811136d4:	de00012e 	bgeu	sp,et,811136dc <_scanf_r+0x10>
811136d8:	003b68fa 	trap	3
811136dc:	dfc00015 	stw	ra,0(sp)
811136e0:	d9800115 	stw	r6,4(sp)
811136e4:	d9c00215 	stw	r7,8(sp)
811136e8:	21400117 	ldw	r5,4(r4)
811136ec:	d9c00104 	addi	r7,sp,4
811136f0:	100d883a 	mov	r6,r2
811136f4:	11199c00 	call	811199c0 <_vfscanf_r>
811136f8:	dfc00017 	ldw	ra,0(sp)
811136fc:	dec00304 	addi	sp,sp,12
81113700:	f800283a 	ret

81113704 <_sprintf_r>:
81113704:	deffe404 	addi	sp,sp,-112
81113708:	2807883a 	mov	r3,r5
8111370c:	de00012e 	bgeu	sp,et,81113714 <_sprintf_r+0x10>
81113710:	003b68fa 	trap	3
81113714:	dfc01a15 	stw	ra,104(sp)
81113718:	d9c01b15 	stw	r7,108(sp)
8111371c:	00a00034 	movhi	r2,32768
81113720:	10bfffc4 	addi	r2,r2,-1
81113724:	02008204 	movi	r8,520
81113728:	d8800215 	stw	r2,8(sp)
8111372c:	d8800515 	stw	r2,20(sp)
81113730:	d9c01b04 	addi	r7,sp,108
81113734:	d80b883a 	mov	r5,sp
81113738:	00bfffc4 	movi	r2,-1
8111373c:	d8c00015 	stw	r3,0(sp)
81113740:	d8c00415 	stw	r3,16(sp)
81113744:	da00030d 	sth	r8,12(sp)
81113748:	d880038d 	sth	r2,14(sp)
8111374c:	1113cb00 	call	81113cb0 <___svfprintf_internal_r>
81113750:	d8c00017 	ldw	r3,0(sp)
81113754:	18000005 	stb	zero,0(r3)
81113758:	dfc01a17 	ldw	ra,104(sp)
8111375c:	dec01c04 	addi	sp,sp,112
81113760:	f800283a 	ret

81113764 <sprintf>:
81113764:	deffe304 	addi	sp,sp,-116
81113768:	2007883a 	mov	r3,r4
8111376c:	de00012e 	bgeu	sp,et,81113774 <sprintf+0x10>
81113770:	003b68fa 	trap	3
81113774:	dfc01a15 	stw	ra,104(sp)
81113778:	d9801b15 	stw	r6,108(sp)
8111377c:	d9c01c15 	stw	r7,112(sp)
81113780:	01204534 	movhi	r4,33044
81113784:	21095a04 	addi	r4,r4,9576
81113788:	21000017 	ldw	r4,0(r4)
8111378c:	00a00034 	movhi	r2,32768
81113790:	10bfffc4 	addi	r2,r2,-1
81113794:	280d883a 	mov	r6,r5
81113798:	02008204 	movi	r8,520
8111379c:	d8800215 	stw	r2,8(sp)
811137a0:	d8800515 	stw	r2,20(sp)
811137a4:	d9c01b04 	addi	r7,sp,108
811137a8:	d80b883a 	mov	r5,sp
811137ac:	00bfffc4 	movi	r2,-1
811137b0:	d8c00015 	stw	r3,0(sp)
811137b4:	d8c00415 	stw	r3,16(sp)
811137b8:	da00030d 	sth	r8,12(sp)
811137bc:	d880038d 	sth	r2,14(sp)
811137c0:	1113cb00 	call	81113cb0 <___svfprintf_internal_r>
811137c4:	d8c00017 	ldw	r3,0(sp)
811137c8:	18000005 	stb	zero,0(r3)
811137cc:	dfc01a17 	ldw	ra,104(sp)
811137d0:	dec01d04 	addi	sp,sp,116
811137d4:	f800283a 	ret

811137d8 <__sread>:
811137d8:	defffe04 	addi	sp,sp,-8
811137dc:	de00012e 	bgeu	sp,et,811137e4 <__sread+0xc>
811137e0:	003b68fa 	trap	3
811137e4:	dc000015 	stw	r16,0(sp)
811137e8:	2821883a 	mov	r16,r5
811137ec:	2940038f 	ldh	r5,14(r5)
811137f0:	dfc00115 	stw	ra,4(sp)
811137f4:	111e1100 	call	8111e110 <_read_r>
811137f8:	10000716 	blt	r2,zero,81113818 <__sread+0x40>
811137fc:	80c01417 	ldw	r3,80(r16)
81113800:	1887883a 	add	r3,r3,r2
81113804:	80c01415 	stw	r3,80(r16)
81113808:	dfc00117 	ldw	ra,4(sp)
8111380c:	dc000017 	ldw	r16,0(sp)
81113810:	dec00204 	addi	sp,sp,8
81113814:	f800283a 	ret
81113818:	80c0030b 	ldhu	r3,12(r16)
8111381c:	18fbffcc 	andi	r3,r3,61439
81113820:	80c0030d 	sth	r3,12(r16)
81113824:	dfc00117 	ldw	ra,4(sp)
81113828:	dc000017 	ldw	r16,0(sp)
8111382c:	dec00204 	addi	sp,sp,8
81113830:	f800283a 	ret

81113834 <__seofread>:
81113834:	0005883a 	mov	r2,zero
81113838:	f800283a 	ret

8111383c <__swrite>:
8111383c:	defffb04 	addi	sp,sp,-20
81113840:	de00012e 	bgeu	sp,et,81113848 <__swrite+0xc>
81113844:	003b68fa 	trap	3
81113848:	2880030b 	ldhu	r2,12(r5)
8111384c:	dcc00315 	stw	r19,12(sp)
81113850:	dc800215 	stw	r18,8(sp)
81113854:	dc400115 	stw	r17,4(sp)
81113858:	dc000015 	stw	r16,0(sp)
8111385c:	dfc00415 	stw	ra,16(sp)
81113860:	10c0400c 	andi	r3,r2,256
81113864:	2821883a 	mov	r16,r5
81113868:	2023883a 	mov	r17,r4
8111386c:	3025883a 	mov	r18,r6
81113870:	3827883a 	mov	r19,r7
81113874:	18000526 	beq	r3,zero,8111388c <__swrite+0x50>
81113878:	2940038f 	ldh	r5,14(r5)
8111387c:	01c00084 	movi	r7,2
81113880:	000d883a 	mov	r6,zero
81113884:	111cbc80 	call	8111cbc8 <_lseek_r>
81113888:	8080030b 	ldhu	r2,12(r16)
8111388c:	8140038f 	ldh	r5,14(r16)
81113890:	10bbffcc 	andi	r2,r2,61439
81113894:	980f883a 	mov	r7,r19
81113898:	900d883a 	mov	r6,r18
8111389c:	8809883a 	mov	r4,r17
811138a0:	8080030d 	sth	r2,12(r16)
811138a4:	dfc00417 	ldw	ra,16(sp)
811138a8:	dcc00317 	ldw	r19,12(sp)
811138ac:	dc800217 	ldw	r18,8(sp)
811138b0:	dc400117 	ldw	r17,4(sp)
811138b4:	dc000017 	ldw	r16,0(sp)
811138b8:	dec00504 	addi	sp,sp,20
811138bc:	1119b741 	jmpi	81119b74 <_write_r>

811138c0 <__sseek>:
811138c0:	defffe04 	addi	sp,sp,-8
811138c4:	de00012e 	bgeu	sp,et,811138cc <__sseek+0xc>
811138c8:	003b68fa 	trap	3
811138cc:	dc000015 	stw	r16,0(sp)
811138d0:	2821883a 	mov	r16,r5
811138d4:	2940038f 	ldh	r5,14(r5)
811138d8:	dfc00115 	stw	ra,4(sp)
811138dc:	111cbc80 	call	8111cbc8 <_lseek_r>
811138e0:	00ffffc4 	movi	r3,-1
811138e4:	10c00826 	beq	r2,r3,81113908 <__sseek+0x48>
811138e8:	80c0030b 	ldhu	r3,12(r16)
811138ec:	80801415 	stw	r2,80(r16)
811138f0:	18c40014 	ori	r3,r3,4096
811138f4:	80c0030d 	sth	r3,12(r16)
811138f8:	dfc00117 	ldw	ra,4(sp)
811138fc:	dc000017 	ldw	r16,0(sp)
81113900:	dec00204 	addi	sp,sp,8
81113904:	f800283a 	ret
81113908:	80c0030b 	ldhu	r3,12(r16)
8111390c:	18fbffcc 	andi	r3,r3,61439
81113910:	80c0030d 	sth	r3,12(r16)
81113914:	dfc00117 	ldw	ra,4(sp)
81113918:	dc000017 	ldw	r16,0(sp)
8111391c:	dec00204 	addi	sp,sp,8
81113920:	f800283a 	ret

81113924 <__sclose>:
81113924:	2940038f 	ldh	r5,14(r5)
81113928:	1119d381 	jmpi	81119d38 <_close_r>

8111392c <strcspn>:
8111392c:	21c00007 	ldb	r7,0(r4)
81113930:	38000f26 	beq	r7,zero,81113970 <strcspn+0x44>
81113934:	2a000007 	ldb	r8,0(r5)
81113938:	2005883a 	mov	r2,r4
8111393c:	40000726 	beq	r8,zero,8111395c <strcspn+0x30>
81113940:	3a000926 	beq	r7,r8,81113968 <strcspn+0x3c>
81113944:	2807883a 	mov	r3,r5
81113948:	00000106 	br	81113950 <strcspn+0x24>
8111394c:	31c00626 	beq	r6,r7,81113968 <strcspn+0x3c>
81113950:	18c00044 	addi	r3,r3,1
81113954:	19800007 	ldb	r6,0(r3)
81113958:	303ffc1e 	bne	r6,zero,8111394c <__reset+0xfb0f394c>
8111395c:	10800044 	addi	r2,r2,1
81113960:	11c00007 	ldb	r7,0(r2)
81113964:	383ff51e 	bne	r7,zero,8111393c <__reset+0xfb0f393c>
81113968:	1105c83a 	sub	r2,r2,r4
8111396c:	f800283a 	ret
81113970:	0005883a 	mov	r2,zero
81113974:	f800283a 	ret

81113978 <strlen>:
81113978:	208000cc 	andi	r2,r4,3
8111397c:	10002026 	beq	r2,zero,81113a00 <strlen+0x88>
81113980:	20800007 	ldb	r2,0(r4)
81113984:	10002026 	beq	r2,zero,81113a08 <strlen+0x90>
81113988:	2005883a 	mov	r2,r4
8111398c:	00000206 	br	81113998 <strlen+0x20>
81113990:	10c00007 	ldb	r3,0(r2)
81113994:	18001826 	beq	r3,zero,811139f8 <strlen+0x80>
81113998:	10800044 	addi	r2,r2,1
8111399c:	10c000cc 	andi	r3,r2,3
811139a0:	183ffb1e 	bne	r3,zero,81113990 <__reset+0xfb0f3990>
811139a4:	10c00017 	ldw	r3,0(r2)
811139a8:	01ffbff4 	movhi	r7,65279
811139ac:	39ffbfc4 	addi	r7,r7,-257
811139b0:	00ca303a 	nor	r5,zero,r3
811139b4:	01a02074 	movhi	r6,32897
811139b8:	19c7883a 	add	r3,r3,r7
811139bc:	31a02004 	addi	r6,r6,-32640
811139c0:	1946703a 	and	r3,r3,r5
811139c4:	1986703a 	and	r3,r3,r6
811139c8:	1800091e 	bne	r3,zero,811139f0 <strlen+0x78>
811139cc:	10800104 	addi	r2,r2,4
811139d0:	10c00017 	ldw	r3,0(r2)
811139d4:	19cb883a 	add	r5,r3,r7
811139d8:	00c6303a 	nor	r3,zero,r3
811139dc:	28c6703a 	and	r3,r5,r3
811139e0:	1986703a 	and	r3,r3,r6
811139e4:	183ff926 	beq	r3,zero,811139cc <__reset+0xfb0f39cc>
811139e8:	00000106 	br	811139f0 <strlen+0x78>
811139ec:	10800044 	addi	r2,r2,1
811139f0:	10c00007 	ldb	r3,0(r2)
811139f4:	183ffd1e 	bne	r3,zero,811139ec <__reset+0xfb0f39ec>
811139f8:	1105c83a 	sub	r2,r2,r4
811139fc:	f800283a 	ret
81113a00:	2005883a 	mov	r2,r4
81113a04:	003fe706 	br	811139a4 <__reset+0xfb0f39a4>
81113a08:	0005883a 	mov	r2,zero
81113a0c:	f800283a 	ret

81113a10 <strnlen>:
81113a10:	28000e26 	beq	r5,zero,81113a4c <strnlen+0x3c>
81113a14:	20800007 	ldb	r2,0(r4)
81113a18:	10000c26 	beq	r2,zero,81113a4c <strnlen+0x3c>
81113a1c:	20c00044 	addi	r3,r4,1
81113a20:	214b883a 	add	r5,r4,r5
81113a24:	28c00526 	beq	r5,r3,81113a3c <strnlen+0x2c>
81113a28:	19800007 	ldb	r6,0(r3)
81113a2c:	19c00044 	addi	r7,r3,1
81113a30:	30000426 	beq	r6,zero,81113a44 <strnlen+0x34>
81113a34:	3807883a 	mov	r3,r7
81113a38:	28fffb1e 	bne	r5,r3,81113a28 <__reset+0xfb0f3a28>
81113a3c:	2905c83a 	sub	r2,r5,r4
81113a40:	f800283a 	ret
81113a44:	1905c83a 	sub	r2,r3,r4
81113a48:	f800283a 	ret
81113a4c:	0005883a 	mov	r2,zero
81113a50:	f800283a 	ret

81113a54 <_strtol_r>:
81113a54:	00a04534 	movhi	r2,33044
81113a58:	defff404 	addi	sp,sp,-48
81113a5c:	10895804 	addi	r2,r2,9568
81113a60:	de00012e 	bgeu	sp,et,81113a68 <_strtol_r+0x14>
81113a64:	003b68fa 	trap	3
81113a68:	dd400715 	stw	r21,28(sp)
81113a6c:	15400017 	ldw	r21,0(r2)
81113a70:	dd800815 	stw	r22,32(sp)
81113a74:	dd000615 	stw	r20,24(sp)
81113a78:	dcc00515 	stw	r19,20(sp)
81113a7c:	d9000015 	stw	r4,0(sp)
81113a80:	dfc00b15 	stw	ra,44(sp)
81113a84:	df000a15 	stw	fp,40(sp)
81113a88:	ddc00915 	stw	r23,36(sp)
81113a8c:	dc800415 	stw	r18,16(sp)
81113a90:	dc400315 	stw	r17,12(sp)
81113a94:	dc000215 	stw	r16,8(sp)
81113a98:	2829883a 	mov	r20,r5
81113a9c:	3027883a 	mov	r19,r6
81113aa0:	382d883a 	mov	r22,r7
81113aa4:	2809883a 	mov	r4,r5
81113aa8:	24000003 	ldbu	r16,0(r4)
81113aac:	24400044 	addi	r17,r4,1
81113ab0:	2007883a 	mov	r3,r4
81113ab4:	ac05883a 	add	r2,r21,r16
81113ab8:	10800043 	ldbu	r2,1(r2)
81113abc:	8809883a 	mov	r4,r17
81113ac0:	1080020c 	andi	r2,r2,8
81113ac4:	103ff81e 	bne	r2,zero,81113aa8 <__reset+0xfb0f3aa8>
81113ac8:	00800b44 	movi	r2,45
81113acc:	80805826 	beq	r16,r2,81113c30 <_strtol_r+0x1dc>
81113ad0:	00800ac4 	movi	r2,43
81113ad4:	80805a26 	beq	r16,r2,81113c40 <_strtol_r+0x1ec>
81113ad8:	0039883a 	mov	fp,zero
81113adc:	b0004426 	beq	r22,zero,81113bf0 <_strtol_r+0x19c>
81113ae0:	00800404 	movi	r2,16
81113ae4:	b0806026 	beq	r22,r2,81113c68 <_strtol_r+0x214>
81113ae8:	b02f883a 	mov	r23,r22
81113aec:	00a00034 	movhi	r2,32768
81113af0:	e025003a 	cmpeq	r18,fp,zero
81113af4:	14a5c83a 	sub	r18,r2,r18
81113af8:	b80b883a 	mov	r5,r23
81113afc:	9009883a 	mov	r4,r18
81113b00:	11254d00 	call	811254d0 <__umodsi3>
81113b04:	b80b883a 	mov	r5,r23
81113b08:	9009883a 	mov	r4,r18
81113b0c:	d8800115 	stw	r2,4(sp)
81113b10:	112546c0 	call	8112546c <__udivsi3>
81113b14:	ac07883a 	add	r3,r21,r16
81113b18:	18c00043 	ldbu	r3,1(r3)
81113b1c:	880b883a 	mov	r5,r17
81113b20:	000d883a 	mov	r6,zero
81113b24:	1a00010c 	andi	r8,r3,4
81113b28:	0009883a 	mov	r4,zero
81113b2c:	02800044 	movi	r10,1
81113b30:	027fffc4 	movi	r9,-1
81113b34:	d9c00117 	ldw	r7,4(sp)
81113b38:	40000e26 	beq	r8,zero,81113b74 <_strtol_r+0x120>
81113b3c:	843ff404 	addi	r16,r16,-48
81113b40:	8580120e 	bge	r16,r22,81113b8c <_strtol_r+0x138>
81113b44:	32400526 	beq	r6,r9,81113b5c <_strtol_r+0x108>
81113b48:	11002536 	bltu	r2,r4,81113be0 <_strtol_r+0x18c>
81113b4c:	20802326 	beq	r4,r2,81113bdc <_strtol_r+0x188>
81113b50:	25c9383a 	mul	r4,r4,r23
81113b54:	01800044 	movi	r6,1
81113b58:	8109883a 	add	r4,r16,r4
81113b5c:	2c000003 	ldbu	r16,0(r5)
81113b60:	29400044 	addi	r5,r5,1
81113b64:	ac07883a 	add	r3,r21,r16
81113b68:	18c00043 	ldbu	r3,1(r3)
81113b6c:	1a00010c 	andi	r8,r3,4
81113b70:	403ff21e 	bne	r8,zero,81113b3c <__reset+0xfb0f3b3c>
81113b74:	18c000cc 	andi	r3,r3,3
81113b78:	18000426 	beq	r3,zero,81113b8c <_strtol_r+0x138>
81113b7c:	1a801a26 	beq	r3,r10,81113be8 <_strtol_r+0x194>
81113b80:	00c015c4 	movi	r3,87
81113b84:	80e1c83a 	sub	r16,r16,r3
81113b88:	85bfee16 	blt	r16,r22,81113b44 <__reset+0xfb0f3b44>
81113b8c:	00bfffc4 	movi	r2,-1
81113b90:	30801e26 	beq	r6,r2,81113c0c <_strtol_r+0x1b8>
81113b94:	e0001b1e 	bne	fp,zero,81113c04 <_strtol_r+0x1b0>
81113b98:	2005883a 	mov	r2,r4
81113b9c:	98000326 	beq	r19,zero,81113bac <_strtol_r+0x158>
81113ba0:	3000211e 	bne	r6,zero,81113c28 <_strtol_r+0x1d4>
81113ba4:	a00b883a 	mov	r5,r20
81113ba8:	99400015 	stw	r5,0(r19)
81113bac:	dfc00b17 	ldw	ra,44(sp)
81113bb0:	df000a17 	ldw	fp,40(sp)
81113bb4:	ddc00917 	ldw	r23,36(sp)
81113bb8:	dd800817 	ldw	r22,32(sp)
81113bbc:	dd400717 	ldw	r21,28(sp)
81113bc0:	dd000617 	ldw	r20,24(sp)
81113bc4:	dcc00517 	ldw	r19,20(sp)
81113bc8:	dc800417 	ldw	r18,16(sp)
81113bcc:	dc400317 	ldw	r17,12(sp)
81113bd0:	dc000217 	ldw	r16,8(sp)
81113bd4:	dec00c04 	addi	sp,sp,48
81113bd8:	f800283a 	ret
81113bdc:	3c3fdc0e 	bge	r7,r16,81113b50 <__reset+0xfb0f3b50>
81113be0:	01bfffc4 	movi	r6,-1
81113be4:	003fdd06 	br	81113b5c <__reset+0xfb0f3b5c>
81113be8:	00c00dc4 	movi	r3,55
81113bec:	003fe506 	br	81113b84 <__reset+0xfb0f3b84>
81113bf0:	00800c04 	movi	r2,48
81113bf4:	80801626 	beq	r16,r2,81113c50 <_strtol_r+0x1fc>
81113bf8:	05800284 	movi	r22,10
81113bfc:	b02f883a 	mov	r23,r22
81113c00:	003fba06 	br	81113aec <__reset+0xfb0f3aec>
81113c04:	0109c83a 	sub	r4,zero,r4
81113c08:	003fe306 	br	81113b98 <__reset+0xfb0f3b98>
81113c0c:	d9000017 	ldw	r4,0(sp)
81113c10:	00c00884 	movi	r3,34
81113c14:	e005003a 	cmpeq	r2,fp,zero
81113c18:	20c00015 	stw	r3,0(r4)
81113c1c:	00e00034 	movhi	r3,32768
81113c20:	1885c83a 	sub	r2,r3,r2
81113c24:	983fe126 	beq	r19,zero,81113bac <__reset+0xfb0f3bac>
81113c28:	297fffc4 	addi	r5,r5,-1
81113c2c:	003fde06 	br	81113ba8 <__reset+0xfb0f3ba8>
81113c30:	1c400084 	addi	r17,r3,2
81113c34:	1c000043 	ldbu	r16,1(r3)
81113c38:	07000044 	movi	fp,1
81113c3c:	003fa706 	br	81113adc <__reset+0xfb0f3adc>
81113c40:	1c400084 	addi	r17,r3,2
81113c44:	1c000043 	ldbu	r16,1(r3)
81113c48:	0039883a 	mov	fp,zero
81113c4c:	003fa306 	br	81113adc <__reset+0xfb0f3adc>
81113c50:	88800003 	ldbu	r2,0(r17)
81113c54:	00c01604 	movi	r3,88
81113c58:	108037cc 	andi	r2,r2,223
81113c5c:	10c00826 	beq	r2,r3,81113c80 <_strtol_r+0x22c>
81113c60:	05800204 	movi	r22,8
81113c64:	003fa006 	br	81113ae8 <__reset+0xfb0f3ae8>
81113c68:	00800c04 	movi	r2,48
81113c6c:	80bf9e1e 	bne	r16,r2,81113ae8 <__reset+0xfb0f3ae8>
81113c70:	88800003 	ldbu	r2,0(r17)
81113c74:	00c01604 	movi	r3,88
81113c78:	108037cc 	andi	r2,r2,223
81113c7c:	10ff9a1e 	bne	r2,r3,81113ae8 <__reset+0xfb0f3ae8>
81113c80:	05c00404 	movi	r23,16
81113c84:	8c000043 	ldbu	r16,1(r17)
81113c88:	b82d883a 	mov	r22,r23
81113c8c:	8c400084 	addi	r17,r17,2
81113c90:	003f9606 	br	81113aec <__reset+0xfb0f3aec>

81113c94 <strtol>:
81113c94:	00a04534 	movhi	r2,33044
81113c98:	10895a04 	addi	r2,r2,9576
81113c9c:	300f883a 	mov	r7,r6
81113ca0:	280d883a 	mov	r6,r5
81113ca4:	200b883a 	mov	r5,r4
81113ca8:	11000017 	ldw	r4,0(r2)
81113cac:	1113a541 	jmpi	81113a54 <_strtol_r>

81113cb0 <___svfprintf_internal_r>:
81113cb0:	deffb704 	addi	sp,sp,-292
81113cb4:	de00012e 	bgeu	sp,et,81113cbc <___svfprintf_internal_r+0xc>
81113cb8:	003b68fa 	trap	3
81113cbc:	dfc04815 	stw	ra,288(sp)
81113cc0:	ddc04615 	stw	r23,280(sp)
81113cc4:	d9402c15 	stw	r5,176(sp)
81113cc8:	d9003915 	stw	r4,228(sp)
81113ccc:	302f883a 	mov	r23,r6
81113cd0:	d9c02d15 	stw	r7,180(sp)
81113cd4:	df004715 	stw	fp,284(sp)
81113cd8:	dd804515 	stw	r22,276(sp)
81113cdc:	dd404415 	stw	r21,272(sp)
81113ce0:	dd004315 	stw	r20,268(sp)
81113ce4:	dcc04215 	stw	r19,264(sp)
81113ce8:	dc804115 	stw	r18,260(sp)
81113cec:	dc404015 	stw	r17,256(sp)
81113cf0:	dc003f15 	stw	r16,252(sp)
81113cf4:	111cb980 	call	8111cb98 <_localeconv_r>
81113cf8:	10800017 	ldw	r2,0(r2)
81113cfc:	1009883a 	mov	r4,r2
81113d00:	d8803415 	stw	r2,208(sp)
81113d04:	11139780 	call	81113978 <strlen>
81113d08:	d8c02c17 	ldw	r3,176(sp)
81113d0c:	d8803815 	stw	r2,224(sp)
81113d10:	1880030b 	ldhu	r2,12(r3)
81113d14:	1080200c 	andi	r2,r2,128
81113d18:	10000226 	beq	r2,zero,81113d24 <___svfprintf_internal_r+0x74>
81113d1c:	18800417 	ldw	r2,16(r3)
81113d20:	10067f26 	beq	r2,zero,81115720 <___svfprintf_internal_r+0x1a70>
81113d24:	dcc03917 	ldw	r19,228(sp)
81113d28:	d8c00404 	addi	r3,sp,16
81113d2c:	05604534 	movhi	r21,33044
81113d30:	d9001e04 	addi	r4,sp,120
81113d34:	ad7f7f84 	addi	r21,r21,-514
81113d38:	d8c01e15 	stw	r3,120(sp)
81113d3c:	d8002015 	stw	zero,128(sp)
81113d40:	d8001f15 	stw	zero,124(sp)
81113d44:	d8003315 	stw	zero,204(sp)
81113d48:	d8003615 	stw	zero,216(sp)
81113d4c:	d8003715 	stw	zero,220(sp)
81113d50:	1811883a 	mov	r8,r3
81113d54:	d8003a15 	stw	zero,232(sp)
81113d58:	d8003b15 	stw	zero,236(sp)
81113d5c:	d8002f15 	stw	zero,188(sp)
81113d60:	d9002815 	stw	r4,160(sp)
81113d64:	b8800007 	ldb	r2,0(r23)
81113d68:	10026726 	beq	r2,zero,81114708 <___svfprintf_internal_r+0xa58>
81113d6c:	00c00944 	movi	r3,37
81113d70:	b821883a 	mov	r16,r23
81113d74:	10c0021e 	bne	r2,r3,81113d80 <___svfprintf_internal_r+0xd0>
81113d78:	00001406 	br	81113dcc <___svfprintf_internal_r+0x11c>
81113d7c:	10c00326 	beq	r2,r3,81113d8c <___svfprintf_internal_r+0xdc>
81113d80:	84000044 	addi	r16,r16,1
81113d84:	80800007 	ldb	r2,0(r16)
81113d88:	103ffc1e 	bne	r2,zero,81113d7c <__reset+0xfb0f3d7c>
81113d8c:	85e3c83a 	sub	r17,r16,r23
81113d90:	88000e26 	beq	r17,zero,81113dcc <___svfprintf_internal_r+0x11c>
81113d94:	d8c02017 	ldw	r3,128(sp)
81113d98:	d8801f17 	ldw	r2,124(sp)
81113d9c:	45c00015 	stw	r23,0(r8)
81113da0:	1c47883a 	add	r3,r3,r17
81113da4:	10800044 	addi	r2,r2,1
81113da8:	d8c02015 	stw	r3,128(sp)
81113dac:	44400115 	stw	r17,4(r8)
81113db0:	d8801f15 	stw	r2,124(sp)
81113db4:	00c001c4 	movi	r3,7
81113db8:	18809716 	blt	r3,r2,81114018 <___svfprintf_internal_r+0x368>
81113dbc:	42000204 	addi	r8,r8,8
81113dc0:	d9402f17 	ldw	r5,188(sp)
81113dc4:	2c4b883a 	add	r5,r5,r17
81113dc8:	d9402f15 	stw	r5,188(sp)
81113dcc:	80800007 	ldb	r2,0(r16)
81113dd0:	10009826 	beq	r2,zero,81114034 <___svfprintf_internal_r+0x384>
81113dd4:	84400047 	ldb	r17,1(r16)
81113dd8:	00bfffc4 	movi	r2,-1
81113ddc:	85c00044 	addi	r23,r16,1
81113de0:	d8002785 	stb	zero,158(sp)
81113de4:	0007883a 	mov	r3,zero
81113de8:	000f883a 	mov	r7,zero
81113dec:	d8802915 	stw	r2,164(sp)
81113df0:	d8003115 	stw	zero,196(sp)
81113df4:	0025883a 	mov	r18,zero
81113df8:	01401604 	movi	r5,88
81113dfc:	01800244 	movi	r6,9
81113e00:	02800a84 	movi	r10,42
81113e04:	02401b04 	movi	r9,108
81113e08:	bdc00044 	addi	r23,r23,1
81113e0c:	88bff804 	addi	r2,r17,-32
81113e10:	2882f036 	bltu	r5,r2,811149d4 <___svfprintf_internal_r+0xd24>
81113e14:	100490ba 	slli	r2,r2,2
81113e18:	01204474 	movhi	r4,33041
81113e1c:	210f8b04 	addi	r4,r4,15916
81113e20:	1105883a 	add	r2,r2,r4
81113e24:	10800017 	ldw	r2,0(r2)
81113e28:	1000683a 	jmp	r2
81113e2c:	8111493c 	xorhi	r4,r16,17700
81113e30:	811149d4 	ori	r4,r16,17703
81113e34:	811149d4 	ori	r4,r16,17703
81113e38:	81114930 	cmpltui	r4,r16,17700
81113e3c:	811149d4 	ori	r4,r16,17703
81113e40:	811149d4 	ori	r4,r16,17703
81113e44:	811149d4 	ori	r4,r16,17703
81113e48:	811149d4 	ori	r4,r16,17703
81113e4c:	811149d4 	ori	r4,r16,17703
81113e50:	811149d4 	ori	r4,r16,17703
81113e54:	81114090 	cmplti	r4,r16,17666
81113e58:	8111486c 	andhi	r4,r16,17697
81113e5c:	811149d4 	ori	r4,r16,17703
81113e60:	81113fa0 	cmpeqi	r4,r16,17662
81113e64:	811140b8 	rdprs	r4,r16,17666
81113e68:	811149d4 	ori	r4,r16,17703
81113e6c:	8111412c 	andhi	r4,r16,17668
81113e70:	811140f8 	rdprs	r4,r16,17667
81113e74:	811140f8 	rdprs	r4,r16,17667
81113e78:	811140f8 	rdprs	r4,r16,17667
81113e7c:	811140f8 	rdprs	r4,r16,17667
81113e80:	811140f8 	rdprs	r4,r16,17667
81113e84:	811140f8 	rdprs	r4,r16,17667
81113e88:	811140f8 	rdprs	r4,r16,17667
81113e8c:	811140f8 	rdprs	r4,r16,17667
81113e90:	811140f8 	rdprs	r4,r16,17667
81113e94:	811149d4 	ori	r4,r16,17703
81113e98:	811149d4 	ori	r4,r16,17703
81113e9c:	811149d4 	ori	r4,r16,17703
81113ea0:	811149d4 	ori	r4,r16,17703
81113ea4:	811149d4 	ori	r4,r16,17703
81113ea8:	811149d4 	ori	r4,r16,17703
81113eac:	811149d4 	ori	r4,r16,17703
81113eb0:	811149d4 	ori	r4,r16,17703
81113eb4:	811149d4 	ori	r4,r16,17703
81113eb8:	811149d4 	ori	r4,r16,17703
81113ebc:	811141e4 	muli	r4,r16,17671
81113ec0:	81114138 	rdprs	r4,r16,17668
81113ec4:	811149d4 	ori	r4,r16,17703
81113ec8:	81114138 	rdprs	r4,r16,17668
81113ecc:	811149d4 	ori	r4,r16,17703
81113ed0:	811149d4 	ori	r4,r16,17703
81113ed4:	811149d4 	ori	r4,r16,17703
81113ed8:	811149d4 	ori	r4,r16,17703
81113edc:	811141d8 	cmpnei	r4,r16,17671
81113ee0:	811149d4 	ori	r4,r16,17703
81113ee4:	811149d4 	ori	r4,r16,17703
81113ee8:	811142a0 	cmpeqi	r4,r16,17674
81113eec:	811149d4 	ori	r4,r16,17703
81113ef0:	811149d4 	ori	r4,r16,17703
81113ef4:	811149d4 	ori	r4,r16,17703
81113ef8:	811149d4 	ori	r4,r16,17703
81113efc:	811149d4 	ori	r4,r16,17703
81113f00:	81114710 	cmplti	r4,r16,17692
81113f04:	811149d4 	ori	r4,r16,17703
81113f08:	811149d4 	ori	r4,r16,17703
81113f0c:	81114770 	cmpltui	r4,r16,17693
81113f10:	811149d4 	ori	r4,r16,17703
81113f14:	811149d4 	ori	r4,r16,17703
81113f18:	811149d4 	ori	r4,r16,17703
81113f1c:	811149d4 	ori	r4,r16,17703
81113f20:	811149d4 	ori	r4,r16,17703
81113f24:	811149d4 	ori	r4,r16,17703
81113f28:	811149d4 	ori	r4,r16,17703
81113f2c:	811149d4 	ori	r4,r16,17703
81113f30:	811149d4 	ori	r4,r16,17703
81113f34:	811149d4 	ori	r4,r16,17703
81113f38:	81114820 	cmpeqi	r4,r16,17696
81113f3c:	8111495c 	xori	r4,r16,17701
81113f40:	81114138 	rdprs	r4,r16,17668
81113f44:	81114138 	rdprs	r4,r16,17668
81113f48:	81114138 	rdprs	r4,r16,17668
81113f4c:	811149b0 	cmpltui	r4,r16,17702
81113f50:	8111495c 	xori	r4,r16,17701
81113f54:	811149d4 	ori	r4,r16,17703
81113f58:	811149d4 	ori	r4,r16,17703
81113f5c:	8111496c 	andhi	r4,r16,17701
81113f60:	811149d4 	ori	r4,r16,17703
81113f64:	8111497c 	xorhi	r4,r16,17701
81113f68:	8111485c 	xori	r4,r16,17697
81113f6c:	81113fac 	andhi	r4,r16,17662
81113f70:	8111487c 	xorhi	r4,r16,17697
81113f74:	811149d4 	ori	r4,r16,17703
81113f78:	81114888 	cmpgei	r4,r16,17698
81113f7c:	811149d4 	ori	r4,r16,17703
81113f80:	811148e4 	muli	r4,r16,17699
81113f84:	811149d4 	ori	r4,r16,17703
81113f88:	811149d4 	ori	r4,r16,17703
81113f8c:	811148f4 	orhi	r4,r16,17699
81113f90:	d9003117 	ldw	r4,196(sp)
81113f94:	d8802d15 	stw	r2,180(sp)
81113f98:	0109c83a 	sub	r4,zero,r4
81113f9c:	d9003115 	stw	r4,196(sp)
81113fa0:	94800114 	ori	r18,r18,4
81113fa4:	bc400007 	ldb	r17,0(r23)
81113fa8:	003f9706 	br	81113e08 <__reset+0xfb0f3e08>
81113fac:	00800c04 	movi	r2,48
81113fb0:	d9002d17 	ldw	r4,180(sp)
81113fb4:	d9402917 	ldw	r5,164(sp)
81113fb8:	d8802705 	stb	r2,156(sp)
81113fbc:	00801e04 	movi	r2,120
81113fc0:	d8802745 	stb	r2,157(sp)
81113fc4:	d8002785 	stb	zero,158(sp)
81113fc8:	20c00104 	addi	r3,r4,4
81113fcc:	25000017 	ldw	r20,0(r4)
81113fd0:	002d883a 	mov	r22,zero
81113fd4:	90800094 	ori	r2,r18,2
81113fd8:	28028616 	blt	r5,zero,811149f4 <___svfprintf_internal_r+0xd44>
81113fdc:	00bfdfc4 	movi	r2,-129
81113fe0:	90a4703a 	and	r18,r18,r2
81113fe4:	d8c02d15 	stw	r3,180(sp)
81113fe8:	94800094 	ori	r18,r18,2
81113fec:	a002731e 	bne	r20,zero,811149bc <___svfprintf_internal_r+0xd0c>
81113ff0:	00a04534 	movhi	r2,33044
81113ff4:	10bf7804 	addi	r2,r2,-544
81113ff8:	d8803a15 	stw	r2,232(sp)
81113ffc:	04401e04 	movi	r17,120
81114000:	d8c02917 	ldw	r3,164(sp)
81114004:	0039883a 	mov	fp,zero
81114008:	1801d526 	beq	r3,zero,81114760 <___svfprintf_internal_r+0xab0>
8111400c:	0029883a 	mov	r20,zero
81114010:	002d883a 	mov	r22,zero
81114014:	0001f106 	br	811147dc <___svfprintf_internal_r+0xb2c>
81114018:	d9402c17 	ldw	r5,176(sp)
8111401c:	d9801e04 	addi	r6,sp,120
81114020:	9809883a 	mov	r4,r19
81114024:	11208d00 	call	811208d0 <__ssprint_r>
81114028:	1000081e 	bne	r2,zero,8111404c <___svfprintf_internal_r+0x39c>
8111402c:	da000404 	addi	r8,sp,16
81114030:	003f6306 	br	81113dc0 <__reset+0xfb0f3dc0>
81114034:	d8802017 	ldw	r2,128(sp)
81114038:	10000426 	beq	r2,zero,8111404c <___svfprintf_internal_r+0x39c>
8111403c:	d9402c17 	ldw	r5,176(sp)
81114040:	d9003917 	ldw	r4,228(sp)
81114044:	d9801e04 	addi	r6,sp,120
81114048:	11208d00 	call	811208d0 <__ssprint_r>
8111404c:	d8802c17 	ldw	r2,176(sp)
81114050:	10c0030b 	ldhu	r3,12(r2)
81114054:	d8802f17 	ldw	r2,188(sp)
81114058:	18c0100c 	andi	r3,r3,64
8111405c:	1805f51e 	bne	r3,zero,81115834 <___svfprintf_internal_r+0x1b84>
81114060:	dfc04817 	ldw	ra,288(sp)
81114064:	df004717 	ldw	fp,284(sp)
81114068:	ddc04617 	ldw	r23,280(sp)
8111406c:	dd804517 	ldw	r22,276(sp)
81114070:	dd404417 	ldw	r21,272(sp)
81114074:	dd004317 	ldw	r20,268(sp)
81114078:	dcc04217 	ldw	r19,264(sp)
8111407c:	dc804117 	ldw	r18,260(sp)
81114080:	dc404017 	ldw	r17,256(sp)
81114084:	dc003f17 	ldw	r16,252(sp)
81114088:	dec04904 	addi	sp,sp,292
8111408c:	f800283a 	ret
81114090:	d8802d17 	ldw	r2,180(sp)
81114094:	d9002d17 	ldw	r4,180(sp)
81114098:	10800017 	ldw	r2,0(r2)
8111409c:	d8803115 	stw	r2,196(sp)
811140a0:	20800104 	addi	r2,r4,4
811140a4:	d9003117 	ldw	r4,196(sp)
811140a8:	203fb916 	blt	r4,zero,81113f90 <__reset+0xfb0f3f90>
811140ac:	d8802d15 	stw	r2,180(sp)
811140b0:	bc400007 	ldb	r17,0(r23)
811140b4:	003f5406 	br	81113e08 <__reset+0xfb0f3e08>
811140b8:	bc400007 	ldb	r17,0(r23)
811140bc:	bac00044 	addi	r11,r23,1
811140c0:	8a873926 	beq	r17,r10,81115da8 <___svfprintf_internal_r+0x20f8>
811140c4:	88bff404 	addi	r2,r17,-48
811140c8:	0009883a 	mov	r4,zero
811140cc:	30868836 	bltu	r6,r2,81115af0 <___svfprintf_internal_r+0x1e40>
811140d0:	5c400007 	ldb	r17,0(r11)
811140d4:	210002a4 	muli	r4,r4,10
811140d8:	5dc00044 	addi	r23,r11,1
811140dc:	b817883a 	mov	r11,r23
811140e0:	2089883a 	add	r4,r4,r2
811140e4:	88bff404 	addi	r2,r17,-48
811140e8:	30bff92e 	bgeu	r6,r2,811140d0 <__reset+0xfb0f40d0>
811140ec:	2005d716 	blt	r4,zero,8111584c <___svfprintf_internal_r+0x1b9c>
811140f0:	d9002915 	stw	r4,164(sp)
811140f4:	003f4506 	br	81113e0c <__reset+0xfb0f3e0c>
811140f8:	b809883a 	mov	r4,r23
811140fc:	d8003115 	stw	zero,196(sp)
81114100:	88bff404 	addi	r2,r17,-48
81114104:	0017883a 	mov	r11,zero
81114108:	24400007 	ldb	r17,0(r4)
8111410c:	5ac002a4 	muli	r11,r11,10
81114110:	bdc00044 	addi	r23,r23,1
81114114:	b809883a 	mov	r4,r23
81114118:	12d7883a 	add	r11,r2,r11
8111411c:	88bff404 	addi	r2,r17,-48
81114120:	30bff92e 	bgeu	r6,r2,81114108 <__reset+0xfb0f4108>
81114124:	dac03115 	stw	r11,196(sp)
81114128:	003f3806 	br	81113e0c <__reset+0xfb0f3e0c>
8111412c:	94802014 	ori	r18,r18,128
81114130:	bc400007 	ldb	r17,0(r23)
81114134:	003f3406 	br	81113e08 <__reset+0xfb0f3e08>
81114138:	18c03fcc 	andi	r3,r3,255
8111413c:	1807471e 	bne	r3,zero,81115e5c <___svfprintf_internal_r+0x21ac>
81114140:	9080020c 	andi	r2,r18,8
81114144:	10047d26 	beq	r2,zero,8111533c <___svfprintf_internal_r+0x168c>
81114148:	d8c02d17 	ldw	r3,180(sp)
8111414c:	d9002d17 	ldw	r4,180(sp)
81114150:	d9402d17 	ldw	r5,180(sp)
81114154:	18c00017 	ldw	r3,0(r3)
81114158:	21000117 	ldw	r4,4(r4)
8111415c:	29400204 	addi	r5,r5,8
81114160:	d8c03615 	stw	r3,216(sp)
81114164:	d9003715 	stw	r4,220(sp)
81114168:	d9402d15 	stw	r5,180(sp)
8111416c:	d9003617 	ldw	r4,216(sp)
81114170:	d9403717 	ldw	r5,220(sp)
81114174:	da003e15 	stw	r8,248(sp)
81114178:	04000044 	movi	r16,1
8111417c:	111e6e40 	call	8111e6e4 <__fpclassifyd>
81114180:	da003e17 	ldw	r8,248(sp)
81114184:	14044b1e 	bne	r2,r16,811152b4 <___svfprintf_internal_r+0x1604>
81114188:	d9003617 	ldw	r4,216(sp)
8111418c:	d9403717 	ldw	r5,220(sp)
81114190:	000d883a 	mov	r6,zero
81114194:	000f883a 	mov	r7,zero
81114198:	1126a2c0 	call	81126a2c <__ledf2>
8111419c:	da003e17 	ldw	r8,248(sp)
811141a0:	1005f316 	blt	r2,zero,81115970 <___svfprintf_internal_r+0x1cc0>
811141a4:	df002783 	ldbu	fp,158(sp)
811141a8:	008011c4 	movi	r2,71
811141ac:	1445590e 	bge	r2,r17,81115714 <___svfprintf_internal_r+0x1a64>
811141b0:	04204534 	movhi	r16,33044
811141b4:	843f7004 	addi	r16,r16,-576
811141b8:	00c000c4 	movi	r3,3
811141bc:	00bfdfc4 	movi	r2,-129
811141c0:	d8c02a15 	stw	r3,168(sp)
811141c4:	90a4703a 	and	r18,r18,r2
811141c8:	d8c02e15 	stw	r3,184(sp)
811141cc:	d8002915 	stw	zero,164(sp)
811141d0:	d8003215 	stw	zero,200(sp)
811141d4:	00006606 	br	81114370 <___svfprintf_internal_r+0x6c0>
811141d8:	94800214 	ori	r18,r18,8
811141dc:	bc400007 	ldb	r17,0(r23)
811141e0:	003f0906 	br	81113e08 <__reset+0xfb0f3e08>
811141e4:	18c03fcc 	andi	r3,r3,255
811141e8:	1807181e 	bne	r3,zero,81115e4c <___svfprintf_internal_r+0x219c>
811141ec:	94800414 	ori	r18,r18,16
811141f0:	9080080c 	andi	r2,r18,32
811141f4:	10039626 	beq	r2,zero,81115050 <___svfprintf_internal_r+0x13a0>
811141f8:	d9402d17 	ldw	r5,180(sp)
811141fc:	28800117 	ldw	r2,4(r5)
81114200:	2d000017 	ldw	r20,0(r5)
81114204:	29400204 	addi	r5,r5,8
81114208:	d9402d15 	stw	r5,180(sp)
8111420c:	102d883a 	mov	r22,r2
81114210:	10039816 	blt	r2,zero,81115074 <___svfprintf_internal_r+0x13c4>
81114214:	d9402917 	ldw	r5,164(sp)
81114218:	df002783 	ldbu	fp,158(sp)
8111421c:	2803ab16 	blt	r5,zero,811150cc <___svfprintf_internal_r+0x141c>
81114220:	00ffdfc4 	movi	r3,-129
81114224:	a584b03a 	or	r2,r20,r22
81114228:	90e4703a 	and	r18,r18,r3
8111422c:	10014a26 	beq	r2,zero,81114758 <___svfprintf_internal_r+0xaa8>
81114230:	b0034b26 	beq	r22,zero,81114f60 <___svfprintf_internal_r+0x12b0>
81114234:	dc402a15 	stw	r17,168(sp)
81114238:	dc001e04 	addi	r16,sp,120
8111423c:	b023883a 	mov	r17,r22
81114240:	402d883a 	mov	r22,r8
81114244:	a009883a 	mov	r4,r20
81114248:	880b883a 	mov	r5,r17
8111424c:	01800284 	movi	r6,10
81114250:	000f883a 	mov	r7,zero
81114254:	1124e340 	call	81124e34 <__umoddi3>
81114258:	10800c04 	addi	r2,r2,48
8111425c:	843fffc4 	addi	r16,r16,-1
81114260:	a009883a 	mov	r4,r20
81114264:	880b883a 	mov	r5,r17
81114268:	80800005 	stb	r2,0(r16)
8111426c:	01800284 	movi	r6,10
81114270:	000f883a 	mov	r7,zero
81114274:	11248b40 	call	811248b4 <__udivdi3>
81114278:	1029883a 	mov	r20,r2
8111427c:	10c4b03a 	or	r2,r2,r3
81114280:	1823883a 	mov	r17,r3
81114284:	103fef1e 	bne	r2,zero,81114244 <__reset+0xfb0f4244>
81114288:	d8c02817 	ldw	r3,160(sp)
8111428c:	dc402a17 	ldw	r17,168(sp)
81114290:	b011883a 	mov	r8,r22
81114294:	1c07c83a 	sub	r3,r3,r16
81114298:	d8c02e15 	stw	r3,184(sp)
8111429c:	00002e06 	br	81114358 <___svfprintf_internal_r+0x6a8>
811142a0:	18c03fcc 	andi	r3,r3,255
811142a4:	1806e71e 	bne	r3,zero,81115e44 <___svfprintf_internal_r+0x2194>
811142a8:	94800414 	ori	r18,r18,16
811142ac:	9080080c 	andi	r2,r18,32
811142b0:	1002d426 	beq	r2,zero,81114e04 <___svfprintf_internal_r+0x1154>
811142b4:	d9402d17 	ldw	r5,180(sp)
811142b8:	d8c02917 	ldw	r3,164(sp)
811142bc:	d8002785 	stb	zero,158(sp)
811142c0:	28800204 	addi	r2,r5,8
811142c4:	2d000017 	ldw	r20,0(r5)
811142c8:	2d800117 	ldw	r22,4(r5)
811142cc:	18041516 	blt	r3,zero,81115324 <___svfprintf_internal_r+0x1674>
811142d0:	013fdfc4 	movi	r4,-129
811142d4:	a586b03a 	or	r3,r20,r22
811142d8:	d8802d15 	stw	r2,180(sp)
811142dc:	9124703a 	and	r18,r18,r4
811142e0:	1802d51e 	bne	r3,zero,81114e38 <___svfprintf_internal_r+0x1188>
811142e4:	d9402917 	ldw	r5,164(sp)
811142e8:	0039883a 	mov	fp,zero
811142ec:	2806be26 	beq	r5,zero,81115de8 <___svfprintf_internal_r+0x2138>
811142f0:	0029883a 	mov	r20,zero
811142f4:	002d883a 	mov	r22,zero
811142f8:	dc001e04 	addi	r16,sp,120
811142fc:	a006d0fa 	srli	r3,r20,3
81114300:	b008977a 	slli	r4,r22,29
81114304:	b02cd0fa 	srli	r22,r22,3
81114308:	a50001cc 	andi	r20,r20,7
8111430c:	a0800c04 	addi	r2,r20,48
81114310:	843fffc4 	addi	r16,r16,-1
81114314:	20e8b03a 	or	r20,r4,r3
81114318:	80800005 	stb	r2,0(r16)
8111431c:	a586b03a 	or	r3,r20,r22
81114320:	183ff61e 	bne	r3,zero,811142fc <__reset+0xfb0f42fc>
81114324:	90c0004c 	andi	r3,r18,1
81114328:	18013926 	beq	r3,zero,81114810 <___svfprintf_internal_r+0xb60>
8111432c:	10803fcc 	andi	r2,r2,255
81114330:	1080201c 	xori	r2,r2,128
81114334:	10bfe004 	addi	r2,r2,-128
81114338:	00c00c04 	movi	r3,48
8111433c:	10c13426 	beq	r2,r3,81114810 <___svfprintf_internal_r+0xb60>
81114340:	80ffffc5 	stb	r3,-1(r16)
81114344:	d8c02817 	ldw	r3,160(sp)
81114348:	80bfffc4 	addi	r2,r16,-1
8111434c:	1021883a 	mov	r16,r2
81114350:	1887c83a 	sub	r3,r3,r2
81114354:	d8c02e15 	stw	r3,184(sp)
81114358:	d8802e17 	ldw	r2,184(sp)
8111435c:	d9002917 	ldw	r4,164(sp)
81114360:	1100010e 	bge	r2,r4,81114368 <___svfprintf_internal_r+0x6b8>
81114364:	2005883a 	mov	r2,r4
81114368:	d8802a15 	stw	r2,168(sp)
8111436c:	d8003215 	stw	zero,200(sp)
81114370:	e7003fcc 	andi	fp,fp,255
81114374:	e700201c 	xori	fp,fp,128
81114378:	e73fe004 	addi	fp,fp,-128
8111437c:	e0000326 	beq	fp,zero,8111438c <___svfprintf_internal_r+0x6dc>
81114380:	d8c02a17 	ldw	r3,168(sp)
81114384:	18c00044 	addi	r3,r3,1
81114388:	d8c02a15 	stw	r3,168(sp)
8111438c:	90c0008c 	andi	r3,r18,2
81114390:	d8c02b15 	stw	r3,172(sp)
81114394:	18000326 	beq	r3,zero,811143a4 <___svfprintf_internal_r+0x6f4>
81114398:	d8c02a17 	ldw	r3,168(sp)
8111439c:	18c00084 	addi	r3,r3,2
811143a0:	d8c02a15 	stw	r3,168(sp)
811143a4:	90c0210c 	andi	r3,r18,132
811143a8:	d8c03015 	stw	r3,192(sp)
811143ac:	1801a11e 	bne	r3,zero,81114a34 <___svfprintf_internal_r+0xd84>
811143b0:	d9003117 	ldw	r4,196(sp)
811143b4:	d8c02a17 	ldw	r3,168(sp)
811143b8:	20e9c83a 	sub	r20,r4,r3
811143bc:	05019d0e 	bge	zero,r20,81114a34 <___svfprintf_internal_r+0xd84>
811143c0:	02400404 	movi	r9,16
811143c4:	d8c02017 	ldw	r3,128(sp)
811143c8:	d8801f17 	ldw	r2,124(sp)
811143cc:	4d051b0e 	bge	r9,r20,8111583c <___svfprintf_internal_r+0x1b8c>
811143d0:	01604534 	movhi	r5,33044
811143d4:	297f8384 	addi	r5,r5,-498
811143d8:	dc403c15 	stw	r17,240(sp)
811143dc:	d9403515 	stw	r5,212(sp)
811143e0:	a023883a 	mov	r17,r20
811143e4:	482d883a 	mov	r22,r9
811143e8:	9029883a 	mov	r20,r18
811143ec:	070001c4 	movi	fp,7
811143f0:	8025883a 	mov	r18,r16
811143f4:	dc002c17 	ldw	r16,176(sp)
811143f8:	00000306 	br	81114408 <___svfprintf_internal_r+0x758>
811143fc:	8c7ffc04 	addi	r17,r17,-16
81114400:	42000204 	addi	r8,r8,8
81114404:	b440130e 	bge	r22,r17,81114454 <___svfprintf_internal_r+0x7a4>
81114408:	01204534 	movhi	r4,33044
8111440c:	18c00404 	addi	r3,r3,16
81114410:	10800044 	addi	r2,r2,1
81114414:	213f8384 	addi	r4,r4,-498
81114418:	41000015 	stw	r4,0(r8)
8111441c:	45800115 	stw	r22,4(r8)
81114420:	d8c02015 	stw	r3,128(sp)
81114424:	d8801f15 	stw	r2,124(sp)
81114428:	e0bff40e 	bge	fp,r2,811143fc <__reset+0xfb0f43fc>
8111442c:	d9801e04 	addi	r6,sp,120
81114430:	800b883a 	mov	r5,r16
81114434:	9809883a 	mov	r4,r19
81114438:	11208d00 	call	811208d0 <__ssprint_r>
8111443c:	103f031e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114440:	8c7ffc04 	addi	r17,r17,-16
81114444:	d8c02017 	ldw	r3,128(sp)
81114448:	d8801f17 	ldw	r2,124(sp)
8111444c:	da000404 	addi	r8,sp,16
81114450:	b47fed16 	blt	r22,r17,81114408 <__reset+0xfb0f4408>
81114454:	9021883a 	mov	r16,r18
81114458:	a025883a 	mov	r18,r20
8111445c:	8829883a 	mov	r20,r17
81114460:	dc403c17 	ldw	r17,240(sp)
81114464:	d9403517 	ldw	r5,212(sp)
81114468:	a0c7883a 	add	r3,r20,r3
8111446c:	10800044 	addi	r2,r2,1
81114470:	41400015 	stw	r5,0(r8)
81114474:	45000115 	stw	r20,4(r8)
81114478:	d8c02015 	stw	r3,128(sp)
8111447c:	d8801f15 	stw	r2,124(sp)
81114480:	010001c4 	movi	r4,7
81114484:	20829f16 	blt	r4,r2,81114f04 <___svfprintf_internal_r+0x1254>
81114488:	df002787 	ldb	fp,158(sp)
8111448c:	42000204 	addi	r8,r8,8
81114490:	e0000c26 	beq	fp,zero,811144c4 <___svfprintf_internal_r+0x814>
81114494:	d8801f17 	ldw	r2,124(sp)
81114498:	d9002784 	addi	r4,sp,158
8111449c:	18c00044 	addi	r3,r3,1
811144a0:	10800044 	addi	r2,r2,1
811144a4:	41000015 	stw	r4,0(r8)
811144a8:	01000044 	movi	r4,1
811144ac:	41000115 	stw	r4,4(r8)
811144b0:	d8c02015 	stw	r3,128(sp)
811144b4:	d8801f15 	stw	r2,124(sp)
811144b8:	010001c4 	movi	r4,7
811144bc:	20823816 	blt	r4,r2,81114da0 <___svfprintf_internal_r+0x10f0>
811144c0:	42000204 	addi	r8,r8,8
811144c4:	d8802b17 	ldw	r2,172(sp)
811144c8:	10000c26 	beq	r2,zero,811144fc <___svfprintf_internal_r+0x84c>
811144cc:	d8801f17 	ldw	r2,124(sp)
811144d0:	d9002704 	addi	r4,sp,156
811144d4:	18c00084 	addi	r3,r3,2
811144d8:	10800044 	addi	r2,r2,1
811144dc:	41000015 	stw	r4,0(r8)
811144e0:	01000084 	movi	r4,2
811144e4:	41000115 	stw	r4,4(r8)
811144e8:	d8c02015 	stw	r3,128(sp)
811144ec:	d8801f15 	stw	r2,124(sp)
811144f0:	010001c4 	movi	r4,7
811144f4:	20823216 	blt	r4,r2,81114dc0 <___svfprintf_internal_r+0x1110>
811144f8:	42000204 	addi	r8,r8,8
811144fc:	d9003017 	ldw	r4,192(sp)
81114500:	00802004 	movi	r2,128
81114504:	20819726 	beq	r4,r2,81114b64 <___svfprintf_internal_r+0xeb4>
81114508:	d9402917 	ldw	r5,164(sp)
8111450c:	d8802e17 	ldw	r2,184(sp)
81114510:	28adc83a 	sub	r22,r5,r2
81114514:	05802f0e 	bge	zero,r22,811145d4 <___svfprintf_internal_r+0x924>
81114518:	07000404 	movi	fp,16
8111451c:	d8801f17 	ldw	r2,124(sp)
81114520:	e583c00e 	bge	fp,r22,81115424 <___svfprintf_internal_r+0x1774>
81114524:	01604534 	movhi	r5,33044
81114528:	297f7f84 	addi	r5,r5,-514
8111452c:	dc402915 	stw	r17,164(sp)
81114530:	d9402b15 	stw	r5,172(sp)
81114534:	b023883a 	mov	r17,r22
81114538:	050001c4 	movi	r20,7
8111453c:	902d883a 	mov	r22,r18
81114540:	8025883a 	mov	r18,r16
81114544:	dc002c17 	ldw	r16,176(sp)
81114548:	00000306 	br	81114558 <___svfprintf_internal_r+0x8a8>
8111454c:	8c7ffc04 	addi	r17,r17,-16
81114550:	42000204 	addi	r8,r8,8
81114554:	e440110e 	bge	fp,r17,8111459c <___svfprintf_internal_r+0x8ec>
81114558:	18c00404 	addi	r3,r3,16
8111455c:	10800044 	addi	r2,r2,1
81114560:	45400015 	stw	r21,0(r8)
81114564:	47000115 	stw	fp,4(r8)
81114568:	d8c02015 	stw	r3,128(sp)
8111456c:	d8801f15 	stw	r2,124(sp)
81114570:	a0bff60e 	bge	r20,r2,8111454c <__reset+0xfb0f454c>
81114574:	d9801e04 	addi	r6,sp,120
81114578:	800b883a 	mov	r5,r16
8111457c:	9809883a 	mov	r4,r19
81114580:	11208d00 	call	811208d0 <__ssprint_r>
81114584:	103eb11e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114588:	8c7ffc04 	addi	r17,r17,-16
8111458c:	d8c02017 	ldw	r3,128(sp)
81114590:	d8801f17 	ldw	r2,124(sp)
81114594:	da000404 	addi	r8,sp,16
81114598:	e47fef16 	blt	fp,r17,81114558 <__reset+0xfb0f4558>
8111459c:	9021883a 	mov	r16,r18
811145a0:	b025883a 	mov	r18,r22
811145a4:	882d883a 	mov	r22,r17
811145a8:	dc402917 	ldw	r17,164(sp)
811145ac:	d9002b17 	ldw	r4,172(sp)
811145b0:	1d87883a 	add	r3,r3,r22
811145b4:	10800044 	addi	r2,r2,1
811145b8:	41000015 	stw	r4,0(r8)
811145bc:	45800115 	stw	r22,4(r8)
811145c0:	d8c02015 	stw	r3,128(sp)
811145c4:	d8801f15 	stw	r2,124(sp)
811145c8:	010001c4 	movi	r4,7
811145cc:	2081ec16 	blt	r4,r2,81114d80 <___svfprintf_internal_r+0x10d0>
811145d0:	42000204 	addi	r8,r8,8
811145d4:	9080400c 	andi	r2,r18,256
811145d8:	1001181e 	bne	r2,zero,81114a3c <___svfprintf_internal_r+0xd8c>
811145dc:	d9402e17 	ldw	r5,184(sp)
811145e0:	d8801f17 	ldw	r2,124(sp)
811145e4:	44000015 	stw	r16,0(r8)
811145e8:	1947883a 	add	r3,r3,r5
811145ec:	10800044 	addi	r2,r2,1
811145f0:	41400115 	stw	r5,4(r8)
811145f4:	d8c02015 	stw	r3,128(sp)
811145f8:	d8801f15 	stw	r2,124(sp)
811145fc:	010001c4 	movi	r4,7
81114600:	2081d116 	blt	r4,r2,81114d48 <___svfprintf_internal_r+0x1098>
81114604:	42000204 	addi	r8,r8,8
81114608:	9480010c 	andi	r18,r18,4
8111460c:	90003226 	beq	r18,zero,811146d8 <___svfprintf_internal_r+0xa28>
81114610:	d9403117 	ldw	r5,196(sp)
81114614:	d8802a17 	ldw	r2,168(sp)
81114618:	28a1c83a 	sub	r16,r5,r2
8111461c:	04002e0e 	bge	zero,r16,811146d8 <___svfprintf_internal_r+0xa28>
81114620:	04400404 	movi	r17,16
81114624:	d8801f17 	ldw	r2,124(sp)
81114628:	8c04b90e 	bge	r17,r16,81115910 <___svfprintf_internal_r+0x1c60>
8111462c:	01604534 	movhi	r5,33044
81114630:	297f8384 	addi	r5,r5,-498
81114634:	d9403515 	stw	r5,212(sp)
81114638:	048001c4 	movi	r18,7
8111463c:	dd002c17 	ldw	r20,176(sp)
81114640:	00000306 	br	81114650 <___svfprintf_internal_r+0x9a0>
81114644:	843ffc04 	addi	r16,r16,-16
81114648:	42000204 	addi	r8,r8,8
8111464c:	8c00130e 	bge	r17,r16,8111469c <___svfprintf_internal_r+0x9ec>
81114650:	01204534 	movhi	r4,33044
81114654:	18c00404 	addi	r3,r3,16
81114658:	10800044 	addi	r2,r2,1
8111465c:	213f8384 	addi	r4,r4,-498
81114660:	41000015 	stw	r4,0(r8)
81114664:	44400115 	stw	r17,4(r8)
81114668:	d8c02015 	stw	r3,128(sp)
8111466c:	d8801f15 	stw	r2,124(sp)
81114670:	90bff40e 	bge	r18,r2,81114644 <__reset+0xfb0f4644>
81114674:	d9801e04 	addi	r6,sp,120
81114678:	a00b883a 	mov	r5,r20
8111467c:	9809883a 	mov	r4,r19
81114680:	11208d00 	call	811208d0 <__ssprint_r>
81114684:	103e711e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114688:	843ffc04 	addi	r16,r16,-16
8111468c:	d8c02017 	ldw	r3,128(sp)
81114690:	d8801f17 	ldw	r2,124(sp)
81114694:	da000404 	addi	r8,sp,16
81114698:	8c3fed16 	blt	r17,r16,81114650 <__reset+0xfb0f4650>
8111469c:	d9403517 	ldw	r5,212(sp)
811146a0:	1c07883a 	add	r3,r3,r16
811146a4:	10800044 	addi	r2,r2,1
811146a8:	41400015 	stw	r5,0(r8)
811146ac:	44000115 	stw	r16,4(r8)
811146b0:	d8c02015 	stw	r3,128(sp)
811146b4:	d8801f15 	stw	r2,124(sp)
811146b8:	010001c4 	movi	r4,7
811146bc:	2080060e 	bge	r4,r2,811146d8 <___svfprintf_internal_r+0xa28>
811146c0:	d9402c17 	ldw	r5,176(sp)
811146c4:	d9801e04 	addi	r6,sp,120
811146c8:	9809883a 	mov	r4,r19
811146cc:	11208d00 	call	811208d0 <__ssprint_r>
811146d0:	103e5e1e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
811146d4:	d8c02017 	ldw	r3,128(sp)
811146d8:	d8803117 	ldw	r2,196(sp)
811146dc:	d9002a17 	ldw	r4,168(sp)
811146e0:	1100010e 	bge	r2,r4,811146e8 <___svfprintf_internal_r+0xa38>
811146e4:	2005883a 	mov	r2,r4
811146e8:	d9402f17 	ldw	r5,188(sp)
811146ec:	288b883a 	add	r5,r5,r2
811146f0:	d9402f15 	stw	r5,188(sp)
811146f4:	18019c1e 	bne	r3,zero,81114d68 <___svfprintf_internal_r+0x10b8>
811146f8:	b8800007 	ldb	r2,0(r23)
811146fc:	d8001f15 	stw	zero,124(sp)
81114700:	da000404 	addi	r8,sp,16
81114704:	103d991e 	bne	r2,zero,81113d6c <__reset+0xfb0f3d6c>
81114708:	b821883a 	mov	r16,r23
8111470c:	003daf06 	br	81113dcc <__reset+0xfb0f3dcc>
81114710:	18c03fcc 	andi	r3,r3,255
81114714:	1805c71e 	bne	r3,zero,81115e34 <___svfprintf_internal_r+0x2184>
81114718:	94800414 	ori	r18,r18,16
8111471c:	9080080c 	andi	r2,r18,32
81114720:	10020126 	beq	r2,zero,81114f28 <___svfprintf_internal_r+0x1278>
81114724:	d8802d17 	ldw	r2,180(sp)
81114728:	d9002917 	ldw	r4,164(sp)
8111472c:	d8002785 	stb	zero,158(sp)
81114730:	10c00204 	addi	r3,r2,8
81114734:	15000017 	ldw	r20,0(r2)
81114738:	15800117 	ldw	r22,4(r2)
8111473c:	20038e16 	blt	r4,zero,81115578 <___svfprintf_internal_r+0x18c8>
81114740:	013fdfc4 	movi	r4,-129
81114744:	a584b03a 	or	r2,r20,r22
81114748:	d8c02d15 	stw	r3,180(sp)
8111474c:	9124703a 	and	r18,r18,r4
81114750:	0039883a 	mov	fp,zero
81114754:	103eb61e 	bne	r2,zero,81114230 <__reset+0xfb0f4230>
81114758:	d8802917 	ldw	r2,164(sp)
8111475c:	1002c81e 	bne	r2,zero,81115280 <___svfprintf_internal_r+0x15d0>
81114760:	d8002915 	stw	zero,164(sp)
81114764:	d8002e15 	stw	zero,184(sp)
81114768:	dc001e04 	addi	r16,sp,120
8111476c:	003efa06 	br	81114358 <__reset+0xfb0f4358>
81114770:	18c03fcc 	andi	r3,r3,255
81114774:	1805ad1e 	bne	r3,zero,81115e2c <___svfprintf_internal_r+0x217c>
81114778:	01604534 	movhi	r5,33044
8111477c:	297f7304 	addi	r5,r5,-564
81114780:	d9403a15 	stw	r5,232(sp)
81114784:	9080080c 	andi	r2,r18,32
81114788:	10006126 	beq	r2,zero,81114910 <___svfprintf_internal_r+0xc60>
8111478c:	d8802d17 	ldw	r2,180(sp)
81114790:	15000017 	ldw	r20,0(r2)
81114794:	15800117 	ldw	r22,4(r2)
81114798:	10800204 	addi	r2,r2,8
8111479c:	d8802d15 	stw	r2,180(sp)
811147a0:	9080004c 	andi	r2,r18,1
811147a4:	10018e26 	beq	r2,zero,81114de0 <___svfprintf_internal_r+0x1130>
811147a8:	a584b03a 	or	r2,r20,r22
811147ac:	10030926 	beq	r2,zero,811153d4 <___svfprintf_internal_r+0x1724>
811147b0:	d8c02917 	ldw	r3,164(sp)
811147b4:	00800c04 	movi	r2,48
811147b8:	d8802705 	stb	r2,156(sp)
811147bc:	dc402745 	stb	r17,157(sp)
811147c0:	d8002785 	stb	zero,158(sp)
811147c4:	90800094 	ori	r2,r18,2
811147c8:	18048716 	blt	r3,zero,811159e8 <___svfprintf_internal_r+0x1d38>
811147cc:	00bfdfc4 	movi	r2,-129
811147d0:	90a4703a 	and	r18,r18,r2
811147d4:	94800094 	ori	r18,r18,2
811147d8:	0039883a 	mov	fp,zero
811147dc:	d9003a17 	ldw	r4,232(sp)
811147e0:	dc001e04 	addi	r16,sp,120
811147e4:	a08003cc 	andi	r2,r20,15
811147e8:	b006973a 	slli	r3,r22,28
811147ec:	2085883a 	add	r2,r4,r2
811147f0:	a028d13a 	srli	r20,r20,4
811147f4:	10800003 	ldbu	r2,0(r2)
811147f8:	b02cd13a 	srli	r22,r22,4
811147fc:	843fffc4 	addi	r16,r16,-1
81114800:	1d28b03a 	or	r20,r3,r20
81114804:	80800005 	stb	r2,0(r16)
81114808:	a584b03a 	or	r2,r20,r22
8111480c:	103ff51e 	bne	r2,zero,811147e4 <__reset+0xfb0f47e4>
81114810:	d8c02817 	ldw	r3,160(sp)
81114814:	1c07c83a 	sub	r3,r3,r16
81114818:	d8c02e15 	stw	r3,184(sp)
8111481c:	003ece06 	br	81114358 <__reset+0xfb0f4358>
81114820:	d8c02d17 	ldw	r3,180(sp)
81114824:	d9002d17 	ldw	r4,180(sp)
81114828:	d8002785 	stb	zero,158(sp)
8111482c:	18800017 	ldw	r2,0(r3)
81114830:	21000104 	addi	r4,r4,4
81114834:	00c00044 	movi	r3,1
81114838:	d8c02a15 	stw	r3,168(sp)
8111483c:	d8801405 	stb	r2,80(sp)
81114840:	d9002d15 	stw	r4,180(sp)
81114844:	d8c02e15 	stw	r3,184(sp)
81114848:	d8002915 	stw	zero,164(sp)
8111484c:	d8003215 	stw	zero,200(sp)
81114850:	dc001404 	addi	r16,sp,80
81114854:	0039883a 	mov	fp,zero
81114858:	003ecc06 	br	8111438c <__reset+0xfb0f438c>
8111485c:	18c03fcc 	andi	r3,r3,255
81114860:	183e9226 	beq	r3,zero,811142ac <__reset+0xfb0f42ac>
81114864:	d9c02785 	stb	r7,158(sp)
81114868:	003e9006 	br	811142ac <__reset+0xfb0f42ac>
8111486c:	00c00044 	movi	r3,1
81114870:	01c00ac4 	movi	r7,43
81114874:	bc400007 	ldb	r17,0(r23)
81114878:	003d6306 	br	81113e08 <__reset+0xfb0f3e08>
8111487c:	94800814 	ori	r18,r18,32
81114880:	bc400007 	ldb	r17,0(r23)
81114884:	003d6006 	br	81113e08 <__reset+0xfb0f3e08>
81114888:	d8c02d17 	ldw	r3,180(sp)
8111488c:	d8002785 	stb	zero,158(sp)
81114890:	1c000017 	ldw	r16,0(r3)
81114894:	1d000104 	addi	r20,r3,4
81114898:	80040f26 	beq	r16,zero,811158d8 <___svfprintf_internal_r+0x1c28>
8111489c:	d9002917 	ldw	r4,164(sp)
811148a0:	2003dc16 	blt	r4,zero,81115814 <___svfprintf_internal_r+0x1b64>
811148a4:	200d883a 	mov	r6,r4
811148a8:	000b883a 	mov	r5,zero
811148ac:	8009883a 	mov	r4,r16
811148b0:	da003e15 	stw	r8,248(sp)
811148b4:	111ce740 	call	8111ce74 <memchr>
811148b8:	da003e17 	ldw	r8,248(sp)
811148bc:	10045826 	beq	r2,zero,81115a20 <___svfprintf_internal_r+0x1d70>
811148c0:	1405c83a 	sub	r2,r2,r16
811148c4:	d8802e15 	stw	r2,184(sp)
811148c8:	1003d816 	blt	r2,zero,8111582c <___svfprintf_internal_r+0x1b7c>
811148cc:	df002783 	ldbu	fp,158(sp)
811148d0:	d8802a15 	stw	r2,168(sp)
811148d4:	dd002d15 	stw	r20,180(sp)
811148d8:	d8002915 	stw	zero,164(sp)
811148dc:	d8003215 	stw	zero,200(sp)
811148e0:	003ea306 	br	81114370 <__reset+0xfb0f4370>
811148e4:	18c03fcc 	andi	r3,r3,255
811148e8:	183f8c26 	beq	r3,zero,8111471c <__reset+0xfb0f471c>
811148ec:	d9c02785 	stb	r7,158(sp)
811148f0:	003f8a06 	br	8111471c <__reset+0xfb0f471c>
811148f4:	18c03fcc 	andi	r3,r3,255
811148f8:	1805631e 	bne	r3,zero,81115e88 <___svfprintf_internal_r+0x21d8>
811148fc:	01604534 	movhi	r5,33044
81114900:	297f7804 	addi	r5,r5,-544
81114904:	d9403a15 	stw	r5,232(sp)
81114908:	9080080c 	andi	r2,r18,32
8111490c:	103f9f1e 	bne	r2,zero,8111478c <__reset+0xfb0f478c>
81114910:	9080040c 	andi	r2,r18,16
81114914:	10029c26 	beq	r2,zero,81115388 <___svfprintf_internal_r+0x16d8>
81114918:	d8c02d17 	ldw	r3,180(sp)
8111491c:	002d883a 	mov	r22,zero
81114920:	1d000017 	ldw	r20,0(r3)
81114924:	18c00104 	addi	r3,r3,4
81114928:	d8c02d15 	stw	r3,180(sp)
8111492c:	003f9c06 	br	811147a0 <__reset+0xfb0f47a0>
81114930:	94800054 	ori	r18,r18,1
81114934:	bc400007 	ldb	r17,0(r23)
81114938:	003d3306 	br	81113e08 <__reset+0xfb0f3e08>
8111493c:	38803fcc 	andi	r2,r7,255
81114940:	1080201c 	xori	r2,r2,128
81114944:	10bfe004 	addi	r2,r2,-128
81114948:	1002971e 	bne	r2,zero,811153a8 <___svfprintf_internal_r+0x16f8>
8111494c:	00c00044 	movi	r3,1
81114950:	01c00804 	movi	r7,32
81114954:	bc400007 	ldb	r17,0(r23)
81114958:	003d2b06 	br	81113e08 <__reset+0xfb0f3e08>
8111495c:	18c03fcc 	andi	r3,r3,255
81114960:	183e2326 	beq	r3,zero,811141f0 <__reset+0xfb0f41f0>
81114964:	d9c02785 	stb	r7,158(sp)
81114968:	003e2106 	br	811141f0 <__reset+0xfb0f41f0>
8111496c:	bc400007 	ldb	r17,0(r23)
81114970:	8a430426 	beq	r17,r9,81115584 <___svfprintf_internal_r+0x18d4>
81114974:	94800414 	ori	r18,r18,16
81114978:	003d2306 	br	81113e08 <__reset+0xfb0f3e08>
8111497c:	18c03fcc 	andi	r3,r3,255
81114980:	18053f1e 	bne	r3,zero,81115e80 <___svfprintf_internal_r+0x21d0>
81114984:	9080080c 	andi	r2,r18,32
81114988:	10028926 	beq	r2,zero,811153b0 <___svfprintf_internal_r+0x1700>
8111498c:	d9402d17 	ldw	r5,180(sp)
81114990:	d9002f17 	ldw	r4,188(sp)
81114994:	28800017 	ldw	r2,0(r5)
81114998:	2007d7fa 	srai	r3,r4,31
8111499c:	29400104 	addi	r5,r5,4
811149a0:	d9402d15 	stw	r5,180(sp)
811149a4:	11000015 	stw	r4,0(r2)
811149a8:	10c00115 	stw	r3,4(r2)
811149ac:	003ced06 	br	81113d64 <__reset+0xfb0f3d64>
811149b0:	94801014 	ori	r18,r18,64
811149b4:	bc400007 	ldb	r17,0(r23)
811149b8:	003d1306 	br	81113e08 <__reset+0xfb0f3e08>
811149bc:	01204534 	movhi	r4,33044
811149c0:	213f7804 	addi	r4,r4,-544
811149c4:	0039883a 	mov	fp,zero
811149c8:	d9003a15 	stw	r4,232(sp)
811149cc:	04401e04 	movi	r17,120
811149d0:	003f8206 	br	811147dc <__reset+0xfb0f47dc>
811149d4:	18c03fcc 	andi	r3,r3,255
811149d8:	1805221e 	bne	r3,zero,81115e64 <___svfprintf_internal_r+0x21b4>
811149dc:	883d9526 	beq	r17,zero,81114034 <__reset+0xfb0f4034>
811149e0:	00c00044 	movi	r3,1
811149e4:	d8c02a15 	stw	r3,168(sp)
811149e8:	dc401405 	stb	r17,80(sp)
811149ec:	d8002785 	stb	zero,158(sp)
811149f0:	003f9406 	br	81114844 <__reset+0xfb0f4844>
811149f4:	01204534 	movhi	r4,33044
811149f8:	213f7804 	addi	r4,r4,-544
811149fc:	d9003a15 	stw	r4,232(sp)
81114a00:	d8c02d15 	stw	r3,180(sp)
81114a04:	1025883a 	mov	r18,r2
81114a08:	04401e04 	movi	r17,120
81114a0c:	a584b03a 	or	r2,r20,r22
81114a10:	1000fa1e 	bne	r2,zero,81114dfc <___svfprintf_internal_r+0x114c>
81114a14:	0039883a 	mov	fp,zero
81114a18:	00800084 	movi	r2,2
81114a1c:	10803fcc 	andi	r2,r2,255
81114a20:	00c00044 	movi	r3,1
81114a24:	10c21626 	beq	r2,r3,81115280 <___svfprintf_internal_r+0x15d0>
81114a28:	00c00084 	movi	r3,2
81114a2c:	10fe301e 	bne	r2,r3,811142f0 <__reset+0xfb0f42f0>
81114a30:	003d7606 	br	8111400c <__reset+0xfb0f400c>
81114a34:	d8c02017 	ldw	r3,128(sp)
81114a38:	003e9506 	br	81114490 <__reset+0xfb0f4490>
81114a3c:	00801944 	movi	r2,101
81114a40:	14407c0e 	bge	r2,r17,81114c34 <___svfprintf_internal_r+0xf84>
81114a44:	d9003617 	ldw	r4,216(sp)
81114a48:	d9403717 	ldw	r5,220(sp)
81114a4c:	000d883a 	mov	r6,zero
81114a50:	000f883a 	mov	r7,zero
81114a54:	d8c03d15 	stw	r3,244(sp)
81114a58:	da003e15 	stw	r8,248(sp)
81114a5c:	11268c80 	call	811268c8 <__eqdf2>
81114a60:	d8c03d17 	ldw	r3,244(sp)
81114a64:	da003e17 	ldw	r8,248(sp)
81114a68:	1000f51e 	bne	r2,zero,81114e40 <___svfprintf_internal_r+0x1190>
81114a6c:	d8801f17 	ldw	r2,124(sp)
81114a70:	01204534 	movhi	r4,33044
81114a74:	213f7f04 	addi	r4,r4,-516
81114a78:	18c00044 	addi	r3,r3,1
81114a7c:	10800044 	addi	r2,r2,1
81114a80:	41000015 	stw	r4,0(r8)
81114a84:	01000044 	movi	r4,1
81114a88:	41000115 	stw	r4,4(r8)
81114a8c:	d8c02015 	stw	r3,128(sp)
81114a90:	d8801f15 	stw	r2,124(sp)
81114a94:	010001c4 	movi	r4,7
81114a98:	20826616 	blt	r4,r2,81115434 <___svfprintf_internal_r+0x1784>
81114a9c:	42000204 	addi	r8,r8,8
81114aa0:	d8802617 	ldw	r2,152(sp)
81114aa4:	d9403317 	ldw	r5,204(sp)
81114aa8:	11400216 	blt	r2,r5,81114ab4 <___svfprintf_internal_r+0xe04>
81114aac:	9080004c 	andi	r2,r18,1
81114ab0:	103ed526 	beq	r2,zero,81114608 <__reset+0xfb0f4608>
81114ab4:	d8803817 	ldw	r2,224(sp)
81114ab8:	d9003417 	ldw	r4,208(sp)
81114abc:	d9403817 	ldw	r5,224(sp)
81114ac0:	1887883a 	add	r3,r3,r2
81114ac4:	d8801f17 	ldw	r2,124(sp)
81114ac8:	41000015 	stw	r4,0(r8)
81114acc:	41400115 	stw	r5,4(r8)
81114ad0:	10800044 	addi	r2,r2,1
81114ad4:	d8c02015 	stw	r3,128(sp)
81114ad8:	d8801f15 	stw	r2,124(sp)
81114adc:	010001c4 	movi	r4,7
81114ae0:	2082af16 	blt	r4,r2,811155a0 <___svfprintf_internal_r+0x18f0>
81114ae4:	42000204 	addi	r8,r8,8
81114ae8:	d8803317 	ldw	r2,204(sp)
81114aec:	143fffc4 	addi	r16,r2,-1
81114af0:	043ec50e 	bge	zero,r16,81114608 <__reset+0xfb0f4608>
81114af4:	04400404 	movi	r17,16
81114af8:	d8801f17 	ldw	r2,124(sp)
81114afc:	8c00860e 	bge	r17,r16,81114d18 <___svfprintf_internal_r+0x1068>
81114b00:	01604534 	movhi	r5,33044
81114b04:	297f7f84 	addi	r5,r5,-514
81114b08:	d9402b15 	stw	r5,172(sp)
81114b0c:	058001c4 	movi	r22,7
81114b10:	dd002c17 	ldw	r20,176(sp)
81114b14:	00000306 	br	81114b24 <___svfprintf_internal_r+0xe74>
81114b18:	42000204 	addi	r8,r8,8
81114b1c:	843ffc04 	addi	r16,r16,-16
81114b20:	8c00800e 	bge	r17,r16,81114d24 <___svfprintf_internal_r+0x1074>
81114b24:	18c00404 	addi	r3,r3,16
81114b28:	10800044 	addi	r2,r2,1
81114b2c:	45400015 	stw	r21,0(r8)
81114b30:	44400115 	stw	r17,4(r8)
81114b34:	d8c02015 	stw	r3,128(sp)
81114b38:	d8801f15 	stw	r2,124(sp)
81114b3c:	b0bff60e 	bge	r22,r2,81114b18 <__reset+0xfb0f4b18>
81114b40:	d9801e04 	addi	r6,sp,120
81114b44:	a00b883a 	mov	r5,r20
81114b48:	9809883a 	mov	r4,r19
81114b4c:	11208d00 	call	811208d0 <__ssprint_r>
81114b50:	103d3e1e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114b54:	d8c02017 	ldw	r3,128(sp)
81114b58:	d8801f17 	ldw	r2,124(sp)
81114b5c:	da000404 	addi	r8,sp,16
81114b60:	003fee06 	br	81114b1c <__reset+0xfb0f4b1c>
81114b64:	d9403117 	ldw	r5,196(sp)
81114b68:	d8802a17 	ldw	r2,168(sp)
81114b6c:	28adc83a 	sub	r22,r5,r2
81114b70:	05be650e 	bge	zero,r22,81114508 <__reset+0xfb0f4508>
81114b74:	07000404 	movi	fp,16
81114b78:	d8801f17 	ldw	r2,124(sp)
81114b7c:	e583a20e 	bge	fp,r22,81115a08 <___svfprintf_internal_r+0x1d58>
81114b80:	01604534 	movhi	r5,33044
81114b84:	297f7f84 	addi	r5,r5,-514
81114b88:	dc403015 	stw	r17,192(sp)
81114b8c:	d9402b15 	stw	r5,172(sp)
81114b90:	b023883a 	mov	r17,r22
81114b94:	050001c4 	movi	r20,7
81114b98:	902d883a 	mov	r22,r18
81114b9c:	8025883a 	mov	r18,r16
81114ba0:	dc002c17 	ldw	r16,176(sp)
81114ba4:	00000306 	br	81114bb4 <___svfprintf_internal_r+0xf04>
81114ba8:	8c7ffc04 	addi	r17,r17,-16
81114bac:	42000204 	addi	r8,r8,8
81114bb0:	e440110e 	bge	fp,r17,81114bf8 <___svfprintf_internal_r+0xf48>
81114bb4:	18c00404 	addi	r3,r3,16
81114bb8:	10800044 	addi	r2,r2,1
81114bbc:	45400015 	stw	r21,0(r8)
81114bc0:	47000115 	stw	fp,4(r8)
81114bc4:	d8c02015 	stw	r3,128(sp)
81114bc8:	d8801f15 	stw	r2,124(sp)
81114bcc:	a0bff60e 	bge	r20,r2,81114ba8 <__reset+0xfb0f4ba8>
81114bd0:	d9801e04 	addi	r6,sp,120
81114bd4:	800b883a 	mov	r5,r16
81114bd8:	9809883a 	mov	r4,r19
81114bdc:	11208d00 	call	811208d0 <__ssprint_r>
81114be0:	103d1a1e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114be4:	8c7ffc04 	addi	r17,r17,-16
81114be8:	d8c02017 	ldw	r3,128(sp)
81114bec:	d8801f17 	ldw	r2,124(sp)
81114bf0:	da000404 	addi	r8,sp,16
81114bf4:	e47fef16 	blt	fp,r17,81114bb4 <__reset+0xfb0f4bb4>
81114bf8:	9021883a 	mov	r16,r18
81114bfc:	b025883a 	mov	r18,r22
81114c00:	882d883a 	mov	r22,r17
81114c04:	dc403017 	ldw	r17,192(sp)
81114c08:	d9002b17 	ldw	r4,172(sp)
81114c0c:	1d87883a 	add	r3,r3,r22
81114c10:	10800044 	addi	r2,r2,1
81114c14:	41000015 	stw	r4,0(r8)
81114c18:	45800115 	stw	r22,4(r8)
81114c1c:	d8c02015 	stw	r3,128(sp)
81114c20:	d8801f15 	stw	r2,124(sp)
81114c24:	010001c4 	movi	r4,7
81114c28:	20819a16 	blt	r4,r2,81115294 <___svfprintf_internal_r+0x15e4>
81114c2c:	42000204 	addi	r8,r8,8
81114c30:	003e3506 	br	81114508 <__reset+0xfb0f4508>
81114c34:	d9403317 	ldw	r5,204(sp)
81114c38:	00800044 	movi	r2,1
81114c3c:	18c00044 	addi	r3,r3,1
81114c40:	1141710e 	bge	r2,r5,81115208 <___svfprintf_internal_r+0x1558>
81114c44:	dc401f17 	ldw	r17,124(sp)
81114c48:	00800044 	movi	r2,1
81114c4c:	40800115 	stw	r2,4(r8)
81114c50:	8c400044 	addi	r17,r17,1
81114c54:	44000015 	stw	r16,0(r8)
81114c58:	d8c02015 	stw	r3,128(sp)
81114c5c:	dc401f15 	stw	r17,124(sp)
81114c60:	008001c4 	movi	r2,7
81114c64:	14417416 	blt	r2,r17,81115238 <___svfprintf_internal_r+0x1588>
81114c68:	42000204 	addi	r8,r8,8
81114c6c:	d8803817 	ldw	r2,224(sp)
81114c70:	d9003417 	ldw	r4,208(sp)
81114c74:	8c400044 	addi	r17,r17,1
81114c78:	10c7883a 	add	r3,r2,r3
81114c7c:	40800115 	stw	r2,4(r8)
81114c80:	41000015 	stw	r4,0(r8)
81114c84:	d8c02015 	stw	r3,128(sp)
81114c88:	dc401f15 	stw	r17,124(sp)
81114c8c:	008001c4 	movi	r2,7
81114c90:	14417216 	blt	r2,r17,8111525c <___svfprintf_internal_r+0x15ac>
81114c94:	45800204 	addi	r22,r8,8
81114c98:	d9003617 	ldw	r4,216(sp)
81114c9c:	d9403717 	ldw	r5,220(sp)
81114ca0:	000d883a 	mov	r6,zero
81114ca4:	000f883a 	mov	r7,zero
81114ca8:	d8c03d15 	stw	r3,244(sp)
81114cac:	11268c80 	call	811268c8 <__eqdf2>
81114cb0:	d8c03d17 	ldw	r3,244(sp)
81114cb4:	1000b326 	beq	r2,zero,81114f84 <___svfprintf_internal_r+0x12d4>
81114cb8:	d9403317 	ldw	r5,204(sp)
81114cbc:	84000044 	addi	r16,r16,1
81114cc0:	8c400044 	addi	r17,r17,1
81114cc4:	28bfffc4 	addi	r2,r5,-1
81114cc8:	1887883a 	add	r3,r3,r2
81114ccc:	b0800115 	stw	r2,4(r22)
81114cd0:	b4000015 	stw	r16,0(r22)
81114cd4:	d8c02015 	stw	r3,128(sp)
81114cd8:	dc401f15 	stw	r17,124(sp)
81114cdc:	008001c4 	movi	r2,7
81114ce0:	1440d216 	blt	r2,r17,8111502c <___svfprintf_internal_r+0x137c>
81114ce4:	b5800204 	addi	r22,r22,8
81114ce8:	d9003b17 	ldw	r4,236(sp)
81114cec:	df0022c4 	addi	fp,sp,139
81114cf0:	8c400044 	addi	r17,r17,1
81114cf4:	20c7883a 	add	r3,r4,r3
81114cf8:	b7000015 	stw	fp,0(r22)
81114cfc:	b1000115 	stw	r4,4(r22)
81114d00:	d8c02015 	stw	r3,128(sp)
81114d04:	dc401f15 	stw	r17,124(sp)
81114d08:	008001c4 	movi	r2,7
81114d0c:	14400e16 	blt	r2,r17,81114d48 <___svfprintf_internal_r+0x1098>
81114d10:	b2000204 	addi	r8,r22,8
81114d14:	003e3c06 	br	81114608 <__reset+0xfb0f4608>
81114d18:	01204534 	movhi	r4,33044
81114d1c:	213f7f84 	addi	r4,r4,-514
81114d20:	d9002b15 	stw	r4,172(sp)
81114d24:	d9002b17 	ldw	r4,172(sp)
81114d28:	1c07883a 	add	r3,r3,r16
81114d2c:	44000115 	stw	r16,4(r8)
81114d30:	41000015 	stw	r4,0(r8)
81114d34:	10800044 	addi	r2,r2,1
81114d38:	d8c02015 	stw	r3,128(sp)
81114d3c:	d8801f15 	stw	r2,124(sp)
81114d40:	010001c4 	movi	r4,7
81114d44:	20be2f0e 	bge	r4,r2,81114604 <__reset+0xfb0f4604>
81114d48:	d9402c17 	ldw	r5,176(sp)
81114d4c:	d9801e04 	addi	r6,sp,120
81114d50:	9809883a 	mov	r4,r19
81114d54:	11208d00 	call	811208d0 <__ssprint_r>
81114d58:	103cbc1e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114d5c:	d8c02017 	ldw	r3,128(sp)
81114d60:	da000404 	addi	r8,sp,16
81114d64:	003e2806 	br	81114608 <__reset+0xfb0f4608>
81114d68:	d9402c17 	ldw	r5,176(sp)
81114d6c:	d9801e04 	addi	r6,sp,120
81114d70:	9809883a 	mov	r4,r19
81114d74:	11208d00 	call	811208d0 <__ssprint_r>
81114d78:	103e5f26 	beq	r2,zero,811146f8 <__reset+0xfb0f46f8>
81114d7c:	003cb306 	br	8111404c <__reset+0xfb0f404c>
81114d80:	d9402c17 	ldw	r5,176(sp)
81114d84:	d9801e04 	addi	r6,sp,120
81114d88:	9809883a 	mov	r4,r19
81114d8c:	11208d00 	call	811208d0 <__ssprint_r>
81114d90:	103cae1e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114d94:	d8c02017 	ldw	r3,128(sp)
81114d98:	da000404 	addi	r8,sp,16
81114d9c:	003e0d06 	br	811145d4 <__reset+0xfb0f45d4>
81114da0:	d9402c17 	ldw	r5,176(sp)
81114da4:	d9801e04 	addi	r6,sp,120
81114da8:	9809883a 	mov	r4,r19
81114dac:	11208d00 	call	811208d0 <__ssprint_r>
81114db0:	103ca61e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114db4:	d8c02017 	ldw	r3,128(sp)
81114db8:	da000404 	addi	r8,sp,16
81114dbc:	003dc106 	br	811144c4 <__reset+0xfb0f44c4>
81114dc0:	d9402c17 	ldw	r5,176(sp)
81114dc4:	d9801e04 	addi	r6,sp,120
81114dc8:	9809883a 	mov	r4,r19
81114dcc:	11208d00 	call	811208d0 <__ssprint_r>
81114dd0:	103c9e1e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114dd4:	d8c02017 	ldw	r3,128(sp)
81114dd8:	da000404 	addi	r8,sp,16
81114ddc:	003dc706 	br	811144fc <__reset+0xfb0f44fc>
81114de0:	d8802917 	ldw	r2,164(sp)
81114de4:	d8002785 	stb	zero,158(sp)
81114de8:	103f0816 	blt	r2,zero,81114a0c <__reset+0xfb0f4a0c>
81114dec:	00ffdfc4 	movi	r3,-129
81114df0:	a584b03a 	or	r2,r20,r22
81114df4:	90e4703a 	and	r18,r18,r3
81114df8:	103c8126 	beq	r2,zero,81114000 <__reset+0xfb0f4000>
81114dfc:	0039883a 	mov	fp,zero
81114e00:	003e7606 	br	811147dc <__reset+0xfb0f47dc>
81114e04:	9080040c 	andi	r2,r18,16
81114e08:	10013d26 	beq	r2,zero,81115300 <___svfprintf_internal_r+0x1650>
81114e0c:	d9002d17 	ldw	r4,180(sp)
81114e10:	d9402917 	ldw	r5,164(sp)
81114e14:	d8002785 	stb	zero,158(sp)
81114e18:	20800104 	addi	r2,r4,4
81114e1c:	25000017 	ldw	r20,0(r4)
81114e20:	002d883a 	mov	r22,zero
81114e24:	28013f16 	blt	r5,zero,81115324 <___svfprintf_internal_r+0x1674>
81114e28:	00ffdfc4 	movi	r3,-129
81114e2c:	d8802d15 	stw	r2,180(sp)
81114e30:	90e4703a 	and	r18,r18,r3
81114e34:	a03d2b26 	beq	r20,zero,811142e4 <__reset+0xfb0f42e4>
81114e38:	0039883a 	mov	fp,zero
81114e3c:	003d2e06 	br	811142f8 <__reset+0xfb0f42f8>
81114e40:	dc402617 	ldw	r17,152(sp)
81114e44:	0441830e 	bge	zero,r17,81115454 <___svfprintf_internal_r+0x17a4>
81114e48:	dc403217 	ldw	r17,200(sp)
81114e4c:	d8803317 	ldw	r2,204(sp)
81114e50:	1440010e 	bge	r2,r17,81114e58 <___svfprintf_internal_r+0x11a8>
81114e54:	1023883a 	mov	r17,r2
81114e58:	04400a0e 	bge	zero,r17,81114e84 <___svfprintf_internal_r+0x11d4>
81114e5c:	d8801f17 	ldw	r2,124(sp)
81114e60:	1c47883a 	add	r3,r3,r17
81114e64:	44000015 	stw	r16,0(r8)
81114e68:	10800044 	addi	r2,r2,1
81114e6c:	44400115 	stw	r17,4(r8)
81114e70:	d8c02015 	stw	r3,128(sp)
81114e74:	d8801f15 	stw	r2,124(sp)
81114e78:	010001c4 	movi	r4,7
81114e7c:	20827516 	blt	r4,r2,81115854 <___svfprintf_internal_r+0x1ba4>
81114e80:	42000204 	addi	r8,r8,8
81114e84:	88027b16 	blt	r17,zero,81115874 <___svfprintf_internal_r+0x1bc4>
81114e88:	d9003217 	ldw	r4,200(sp)
81114e8c:	2463c83a 	sub	r17,r4,r17
81114e90:	0440990e 	bge	zero,r17,811150f8 <___svfprintf_internal_r+0x1448>
81114e94:	05800404 	movi	r22,16
81114e98:	d8801f17 	ldw	r2,124(sp)
81114e9c:	b441530e 	bge	r22,r17,811153ec <___svfprintf_internal_r+0x173c>
81114ea0:	01204534 	movhi	r4,33044
81114ea4:	213f7f84 	addi	r4,r4,-514
81114ea8:	d9002b15 	stw	r4,172(sp)
81114eac:	070001c4 	movi	fp,7
81114eb0:	dd002c17 	ldw	r20,176(sp)
81114eb4:	00000306 	br	81114ec4 <___svfprintf_internal_r+0x1214>
81114eb8:	42000204 	addi	r8,r8,8
81114ebc:	8c7ffc04 	addi	r17,r17,-16
81114ec0:	b4414d0e 	bge	r22,r17,811153f8 <___svfprintf_internal_r+0x1748>
81114ec4:	18c00404 	addi	r3,r3,16
81114ec8:	10800044 	addi	r2,r2,1
81114ecc:	45400015 	stw	r21,0(r8)
81114ed0:	45800115 	stw	r22,4(r8)
81114ed4:	d8c02015 	stw	r3,128(sp)
81114ed8:	d8801f15 	stw	r2,124(sp)
81114edc:	e0bff60e 	bge	fp,r2,81114eb8 <__reset+0xfb0f4eb8>
81114ee0:	d9801e04 	addi	r6,sp,120
81114ee4:	a00b883a 	mov	r5,r20
81114ee8:	9809883a 	mov	r4,r19
81114eec:	11208d00 	call	811208d0 <__ssprint_r>
81114ef0:	103c561e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114ef4:	d8c02017 	ldw	r3,128(sp)
81114ef8:	d8801f17 	ldw	r2,124(sp)
81114efc:	da000404 	addi	r8,sp,16
81114f00:	003fee06 	br	81114ebc <__reset+0xfb0f4ebc>
81114f04:	d9402c17 	ldw	r5,176(sp)
81114f08:	d9801e04 	addi	r6,sp,120
81114f0c:	9809883a 	mov	r4,r19
81114f10:	11208d00 	call	811208d0 <__ssprint_r>
81114f14:	103c4d1e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114f18:	d8c02017 	ldw	r3,128(sp)
81114f1c:	df002787 	ldb	fp,158(sp)
81114f20:	da000404 	addi	r8,sp,16
81114f24:	003d5a06 	br	81114490 <__reset+0xfb0f4490>
81114f28:	9080040c 	andi	r2,r18,16
81114f2c:	10005c26 	beq	r2,zero,811150a0 <___svfprintf_internal_r+0x13f0>
81114f30:	d9402d17 	ldw	r5,180(sp)
81114f34:	d8c02917 	ldw	r3,164(sp)
81114f38:	d8002785 	stb	zero,158(sp)
81114f3c:	28800104 	addi	r2,r5,4
81114f40:	2d000017 	ldw	r20,0(r5)
81114f44:	002d883a 	mov	r22,zero
81114f48:	18005e16 	blt	r3,zero,811150c4 <___svfprintf_internal_r+0x1414>
81114f4c:	00ffdfc4 	movi	r3,-129
81114f50:	d8802d15 	stw	r2,180(sp)
81114f54:	90e4703a 	and	r18,r18,r3
81114f58:	0039883a 	mov	fp,zero
81114f5c:	a03dfe26 	beq	r20,zero,81114758 <__reset+0xfb0f4758>
81114f60:	00800244 	movi	r2,9
81114f64:	153cb336 	bltu	r2,r20,81114234 <__reset+0xfb0f4234>
81114f68:	a5000c04 	addi	r20,r20,48
81114f6c:	dc001dc4 	addi	r16,sp,119
81114f70:	dd001dc5 	stb	r20,119(sp)
81114f74:	d8c02817 	ldw	r3,160(sp)
81114f78:	1c07c83a 	sub	r3,r3,r16
81114f7c:	d8c02e15 	stw	r3,184(sp)
81114f80:	003cf506 	br	81114358 <__reset+0xfb0f4358>
81114f84:	d8803317 	ldw	r2,204(sp)
81114f88:	143fffc4 	addi	r16,r2,-1
81114f8c:	043f560e 	bge	zero,r16,81114ce8 <__reset+0xfb0f4ce8>
81114f90:	07000404 	movi	fp,16
81114f94:	e403530e 	bge	fp,r16,81115ce4 <___svfprintf_internal_r+0x2034>
81114f98:	01604534 	movhi	r5,33044
81114f9c:	297f7f84 	addi	r5,r5,-514
81114fa0:	d9402b15 	stw	r5,172(sp)
81114fa4:	01c001c4 	movi	r7,7
81114fa8:	dd002c17 	ldw	r20,176(sp)
81114fac:	00000306 	br	81114fbc <___svfprintf_internal_r+0x130c>
81114fb0:	843ffc04 	addi	r16,r16,-16
81114fb4:	b5800204 	addi	r22,r22,8
81114fb8:	e400130e 	bge	fp,r16,81115008 <___svfprintf_internal_r+0x1358>
81114fbc:	18c00404 	addi	r3,r3,16
81114fc0:	8c400044 	addi	r17,r17,1
81114fc4:	b5400015 	stw	r21,0(r22)
81114fc8:	b7000115 	stw	fp,4(r22)
81114fcc:	d8c02015 	stw	r3,128(sp)
81114fd0:	dc401f15 	stw	r17,124(sp)
81114fd4:	3c7ff60e 	bge	r7,r17,81114fb0 <__reset+0xfb0f4fb0>
81114fd8:	d9801e04 	addi	r6,sp,120
81114fdc:	a00b883a 	mov	r5,r20
81114fe0:	9809883a 	mov	r4,r19
81114fe4:	d9c03d15 	stw	r7,244(sp)
81114fe8:	11208d00 	call	811208d0 <__ssprint_r>
81114fec:	d9c03d17 	ldw	r7,244(sp)
81114ff0:	103c161e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81114ff4:	843ffc04 	addi	r16,r16,-16
81114ff8:	d8c02017 	ldw	r3,128(sp)
81114ffc:	dc401f17 	ldw	r17,124(sp)
81115000:	dd800404 	addi	r22,sp,16
81115004:	e43fed16 	blt	fp,r16,81114fbc <__reset+0xfb0f4fbc>
81115008:	d8802b17 	ldw	r2,172(sp)
8111500c:	1c07883a 	add	r3,r3,r16
81115010:	8c400044 	addi	r17,r17,1
81115014:	b0800015 	stw	r2,0(r22)
81115018:	b4000115 	stw	r16,4(r22)
8111501c:	d8c02015 	stw	r3,128(sp)
81115020:	dc401f15 	stw	r17,124(sp)
81115024:	008001c4 	movi	r2,7
81115028:	147f2e0e 	bge	r2,r17,81114ce4 <__reset+0xfb0f4ce4>
8111502c:	d9402c17 	ldw	r5,176(sp)
81115030:	d9801e04 	addi	r6,sp,120
81115034:	9809883a 	mov	r4,r19
81115038:	11208d00 	call	811208d0 <__ssprint_r>
8111503c:	103c031e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81115040:	d8c02017 	ldw	r3,128(sp)
81115044:	dc401f17 	ldw	r17,124(sp)
81115048:	dd800404 	addi	r22,sp,16
8111504c:	003f2606 	br	81114ce8 <__reset+0xfb0f4ce8>
81115050:	9080040c 	andi	r2,r18,16
81115054:	1000c326 	beq	r2,zero,81115364 <___svfprintf_internal_r+0x16b4>
81115058:	d8802d17 	ldw	r2,180(sp)
8111505c:	15000017 	ldw	r20,0(r2)
81115060:	10800104 	addi	r2,r2,4
81115064:	d8802d15 	stw	r2,180(sp)
81115068:	a02dd7fa 	srai	r22,r20,31
8111506c:	b005883a 	mov	r2,r22
81115070:	103c680e 	bge	r2,zero,81114214 <__reset+0xfb0f4214>
81115074:	0529c83a 	sub	r20,zero,r20
81115078:	a004c03a 	cmpne	r2,r20,zero
8111507c:	05adc83a 	sub	r22,zero,r22
81115080:	b0adc83a 	sub	r22,r22,r2
81115084:	d8802917 	ldw	r2,164(sp)
81115088:	07000b44 	movi	fp,45
8111508c:	df002785 	stb	fp,158(sp)
81115090:	10022e16 	blt	r2,zero,8111594c <___svfprintf_internal_r+0x1c9c>
81115094:	00bfdfc4 	movi	r2,-129
81115098:	90a4703a 	and	r18,r18,r2
8111509c:	003c6406 	br	81114230 <__reset+0xfb0f4230>
811150a0:	9080100c 	andi	r2,r18,64
811150a4:	d8002785 	stb	zero,158(sp)
811150a8:	10012526 	beq	r2,zero,81115540 <___svfprintf_internal_r+0x1890>
811150ac:	d9002d17 	ldw	r4,180(sp)
811150b0:	d9402917 	ldw	r5,164(sp)
811150b4:	002d883a 	mov	r22,zero
811150b8:	20800104 	addi	r2,r4,4
811150bc:	2500000b 	ldhu	r20,0(r4)
811150c0:	283fa20e 	bge	r5,zero,81114f4c <__reset+0xfb0f4f4c>
811150c4:	d8802d15 	stw	r2,180(sp)
811150c8:	0039883a 	mov	fp,zero
811150cc:	a584b03a 	or	r2,r20,r22
811150d0:	103c571e 	bne	r2,zero,81114230 <__reset+0xfb0f4230>
811150d4:	00800044 	movi	r2,1
811150d8:	003e5006 	br	81114a1c <__reset+0xfb0f4a1c>
811150dc:	d9402c17 	ldw	r5,176(sp)
811150e0:	d9801e04 	addi	r6,sp,120
811150e4:	9809883a 	mov	r4,r19
811150e8:	11208d00 	call	811208d0 <__ssprint_r>
811150ec:	103bd71e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
811150f0:	d8c02017 	ldw	r3,128(sp)
811150f4:	da000404 	addi	r8,sp,16
811150f8:	d9003217 	ldw	r4,200(sp)
811150fc:	d8802617 	ldw	r2,152(sp)
81115100:	d9403317 	ldw	r5,204(sp)
81115104:	8123883a 	add	r17,r16,r4
81115108:	11400216 	blt	r2,r5,81115114 <___svfprintf_internal_r+0x1464>
8111510c:	9100004c 	andi	r4,r18,1
81115110:	20000d26 	beq	r4,zero,81115148 <___svfprintf_internal_r+0x1498>
81115114:	d9003817 	ldw	r4,224(sp)
81115118:	d9403417 	ldw	r5,208(sp)
8111511c:	1907883a 	add	r3,r3,r4
81115120:	d9001f17 	ldw	r4,124(sp)
81115124:	41400015 	stw	r5,0(r8)
81115128:	d9403817 	ldw	r5,224(sp)
8111512c:	21000044 	addi	r4,r4,1
81115130:	d8c02015 	stw	r3,128(sp)
81115134:	41400115 	stw	r5,4(r8)
81115138:	d9001f15 	stw	r4,124(sp)
8111513c:	014001c4 	movi	r5,7
81115140:	2901dc16 	blt	r5,r4,811158b4 <___svfprintf_internal_r+0x1c04>
81115144:	42000204 	addi	r8,r8,8
81115148:	d9003317 	ldw	r4,204(sp)
8111514c:	8121883a 	add	r16,r16,r4
81115150:	2085c83a 	sub	r2,r4,r2
81115154:	8461c83a 	sub	r16,r16,r17
81115158:	1400010e 	bge	r2,r16,81115160 <___svfprintf_internal_r+0x14b0>
8111515c:	1021883a 	mov	r16,r2
81115160:	04000a0e 	bge	zero,r16,8111518c <___svfprintf_internal_r+0x14dc>
81115164:	d9001f17 	ldw	r4,124(sp)
81115168:	1c07883a 	add	r3,r3,r16
8111516c:	44400015 	stw	r17,0(r8)
81115170:	21000044 	addi	r4,r4,1
81115174:	44000115 	stw	r16,4(r8)
81115178:	d8c02015 	stw	r3,128(sp)
8111517c:	d9001f15 	stw	r4,124(sp)
81115180:	014001c4 	movi	r5,7
81115184:	2901e616 	blt	r5,r4,81115920 <___svfprintf_internal_r+0x1c70>
81115188:	42000204 	addi	r8,r8,8
8111518c:	8001f616 	blt	r16,zero,81115968 <___svfprintf_internal_r+0x1cb8>
81115190:	1421c83a 	sub	r16,r2,r16
81115194:	043d1c0e 	bge	zero,r16,81114608 <__reset+0xfb0f4608>
81115198:	04400404 	movi	r17,16
8111519c:	d8801f17 	ldw	r2,124(sp)
811151a0:	8c3edd0e 	bge	r17,r16,81114d18 <__reset+0xfb0f4d18>
811151a4:	01604534 	movhi	r5,33044
811151a8:	297f7f84 	addi	r5,r5,-514
811151ac:	d9402b15 	stw	r5,172(sp)
811151b0:	058001c4 	movi	r22,7
811151b4:	dd002c17 	ldw	r20,176(sp)
811151b8:	00000306 	br	811151c8 <___svfprintf_internal_r+0x1518>
811151bc:	42000204 	addi	r8,r8,8
811151c0:	843ffc04 	addi	r16,r16,-16
811151c4:	8c3ed70e 	bge	r17,r16,81114d24 <__reset+0xfb0f4d24>
811151c8:	18c00404 	addi	r3,r3,16
811151cc:	10800044 	addi	r2,r2,1
811151d0:	45400015 	stw	r21,0(r8)
811151d4:	44400115 	stw	r17,4(r8)
811151d8:	d8c02015 	stw	r3,128(sp)
811151dc:	d8801f15 	stw	r2,124(sp)
811151e0:	b0bff60e 	bge	r22,r2,811151bc <__reset+0xfb0f51bc>
811151e4:	d9801e04 	addi	r6,sp,120
811151e8:	a00b883a 	mov	r5,r20
811151ec:	9809883a 	mov	r4,r19
811151f0:	11208d00 	call	811208d0 <__ssprint_r>
811151f4:	103b951e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
811151f8:	d8c02017 	ldw	r3,128(sp)
811151fc:	d8801f17 	ldw	r2,124(sp)
81115200:	da000404 	addi	r8,sp,16
81115204:	003fee06 	br	811151c0 <__reset+0xfb0f51c0>
81115208:	9088703a 	and	r4,r18,r2
8111520c:	203e8d1e 	bne	r4,zero,81114c44 <__reset+0xfb0f4c44>
81115210:	dc401f17 	ldw	r17,124(sp)
81115214:	40800115 	stw	r2,4(r8)
81115218:	44000015 	stw	r16,0(r8)
8111521c:	8c400044 	addi	r17,r17,1
81115220:	d8c02015 	stw	r3,128(sp)
81115224:	dc401f15 	stw	r17,124(sp)
81115228:	008001c4 	movi	r2,7
8111522c:	147f7f16 	blt	r2,r17,8111502c <__reset+0xfb0f502c>
81115230:	45800204 	addi	r22,r8,8
81115234:	003eac06 	br	81114ce8 <__reset+0xfb0f4ce8>
81115238:	d9402c17 	ldw	r5,176(sp)
8111523c:	d9801e04 	addi	r6,sp,120
81115240:	9809883a 	mov	r4,r19
81115244:	11208d00 	call	811208d0 <__ssprint_r>
81115248:	103b801e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
8111524c:	d8c02017 	ldw	r3,128(sp)
81115250:	dc401f17 	ldw	r17,124(sp)
81115254:	da000404 	addi	r8,sp,16
81115258:	003e8406 	br	81114c6c <__reset+0xfb0f4c6c>
8111525c:	d9402c17 	ldw	r5,176(sp)
81115260:	d9801e04 	addi	r6,sp,120
81115264:	9809883a 	mov	r4,r19
81115268:	11208d00 	call	811208d0 <__ssprint_r>
8111526c:	103b771e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81115270:	d8c02017 	ldw	r3,128(sp)
81115274:	dc401f17 	ldw	r17,124(sp)
81115278:	dd800404 	addi	r22,sp,16
8111527c:	003e8606 	br	81114c98 <__reset+0xfb0f4c98>
81115280:	0029883a 	mov	r20,zero
81115284:	a5000c04 	addi	r20,r20,48
81115288:	dc001dc4 	addi	r16,sp,119
8111528c:	dd001dc5 	stb	r20,119(sp)
81115290:	003f3806 	br	81114f74 <__reset+0xfb0f4f74>
81115294:	d9402c17 	ldw	r5,176(sp)
81115298:	d9801e04 	addi	r6,sp,120
8111529c:	9809883a 	mov	r4,r19
811152a0:	11208d00 	call	811208d0 <__ssprint_r>
811152a4:	103b691e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
811152a8:	d8c02017 	ldw	r3,128(sp)
811152ac:	da000404 	addi	r8,sp,16
811152b0:	003c9506 	br	81114508 <__reset+0xfb0f4508>
811152b4:	d9003617 	ldw	r4,216(sp)
811152b8:	d9403717 	ldw	r5,220(sp)
811152bc:	da003e15 	stw	r8,248(sp)
811152c0:	111e6e40 	call	8111e6e4 <__fpclassifyd>
811152c4:	da003e17 	ldw	r8,248(sp)
811152c8:	1000bd1e 	bne	r2,zero,811155c0 <___svfprintf_internal_r+0x1910>
811152cc:	008011c4 	movi	r2,71
811152d0:	14411e0e 	bge	r2,r17,8111574c <___svfprintf_internal_r+0x1a9c>
811152d4:	04204534 	movhi	r16,33044
811152d8:	843f7204 	addi	r16,r16,-568
811152dc:	00c000c4 	movi	r3,3
811152e0:	00bfdfc4 	movi	r2,-129
811152e4:	d8c02a15 	stw	r3,168(sp)
811152e8:	90a4703a 	and	r18,r18,r2
811152ec:	df002783 	ldbu	fp,158(sp)
811152f0:	d8c02e15 	stw	r3,184(sp)
811152f4:	d8002915 	stw	zero,164(sp)
811152f8:	d8003215 	stw	zero,200(sp)
811152fc:	003c1c06 	br	81114370 <__reset+0xfb0f4370>
81115300:	9080100c 	andi	r2,r18,64
81115304:	d8002785 	stb	zero,158(sp)
81115308:	10009426 	beq	r2,zero,8111555c <___svfprintf_internal_r+0x18ac>
8111530c:	d8c02d17 	ldw	r3,180(sp)
81115310:	d9002917 	ldw	r4,164(sp)
81115314:	002d883a 	mov	r22,zero
81115318:	18800104 	addi	r2,r3,4
8111531c:	1d00000b 	ldhu	r20,0(r3)
81115320:	203ec10e 	bge	r4,zero,81114e28 <__reset+0xfb0f4e28>
81115324:	a586b03a 	or	r3,r20,r22
81115328:	d8802d15 	stw	r2,180(sp)
8111532c:	183ec21e 	bne	r3,zero,81114e38 <__reset+0xfb0f4e38>
81115330:	0039883a 	mov	fp,zero
81115334:	0005883a 	mov	r2,zero
81115338:	003db806 	br	81114a1c <__reset+0xfb0f4a1c>
8111533c:	d8802d17 	ldw	r2,180(sp)
81115340:	d8c02d17 	ldw	r3,180(sp)
81115344:	d9002d17 	ldw	r4,180(sp)
81115348:	10800017 	ldw	r2,0(r2)
8111534c:	18c00117 	ldw	r3,4(r3)
81115350:	21000204 	addi	r4,r4,8
81115354:	d8803615 	stw	r2,216(sp)
81115358:	d8c03715 	stw	r3,220(sp)
8111535c:	d9002d15 	stw	r4,180(sp)
81115360:	003b8206 	br	8111416c <__reset+0xfb0f416c>
81115364:	9080100c 	andi	r2,r18,64
81115368:	10010726 	beq	r2,zero,81115788 <___svfprintf_internal_r+0x1ad8>
8111536c:	d8c02d17 	ldw	r3,180(sp)
81115370:	1d00000f 	ldh	r20,0(r3)
81115374:	18c00104 	addi	r3,r3,4
81115378:	d8c02d15 	stw	r3,180(sp)
8111537c:	a02dd7fa 	srai	r22,r20,31
81115380:	b005883a 	mov	r2,r22
81115384:	003ba206 	br	81114210 <__reset+0xfb0f4210>
81115388:	9080100c 	andi	r2,r18,64
8111538c:	10010526 	beq	r2,zero,811157a4 <___svfprintf_internal_r+0x1af4>
81115390:	d9002d17 	ldw	r4,180(sp)
81115394:	002d883a 	mov	r22,zero
81115398:	2500000b 	ldhu	r20,0(r4)
8111539c:	21000104 	addi	r4,r4,4
811153a0:	d9002d15 	stw	r4,180(sp)
811153a4:	003cfe06 	br	811147a0 <__reset+0xfb0f47a0>
811153a8:	bc400007 	ldb	r17,0(r23)
811153ac:	003a9606 	br	81113e08 <__reset+0xfb0f3e08>
811153b0:	9080040c 	andi	r2,r18,16
811153b4:	10010126 	beq	r2,zero,811157bc <___svfprintf_internal_r+0x1b0c>
811153b8:	d9402d17 	ldw	r5,180(sp)
811153bc:	d8c02f17 	ldw	r3,188(sp)
811153c0:	28800017 	ldw	r2,0(r5)
811153c4:	29400104 	addi	r5,r5,4
811153c8:	d9402d15 	stw	r5,180(sp)
811153cc:	10c00015 	stw	r3,0(r2)
811153d0:	003a6406 	br	81113d64 <__reset+0xfb0f3d64>
811153d4:	d9002917 	ldw	r4,164(sp)
811153d8:	d8002785 	stb	zero,158(sp)
811153dc:	203d8d16 	blt	r4,zero,81114a14 <__reset+0xfb0f4a14>
811153e0:	00bfdfc4 	movi	r2,-129
811153e4:	90a4703a 	and	r18,r18,r2
811153e8:	003b0506 	br	81114000 <__reset+0xfb0f4000>
811153ec:	01604534 	movhi	r5,33044
811153f0:	297f7f84 	addi	r5,r5,-514
811153f4:	d9402b15 	stw	r5,172(sp)
811153f8:	d9402b17 	ldw	r5,172(sp)
811153fc:	1c47883a 	add	r3,r3,r17
81115400:	10800044 	addi	r2,r2,1
81115404:	41400015 	stw	r5,0(r8)
81115408:	44400115 	stw	r17,4(r8)
8111540c:	d8c02015 	stw	r3,128(sp)
81115410:	d8801f15 	stw	r2,124(sp)
81115414:	010001c4 	movi	r4,7
81115418:	20bf3016 	blt	r4,r2,811150dc <__reset+0xfb0f50dc>
8111541c:	42000204 	addi	r8,r8,8
81115420:	003f3506 	br	811150f8 <__reset+0xfb0f50f8>
81115424:	01204534 	movhi	r4,33044
81115428:	213f7f84 	addi	r4,r4,-514
8111542c:	d9002b15 	stw	r4,172(sp)
81115430:	003c5e06 	br	811145ac <__reset+0xfb0f45ac>
81115434:	d9402c17 	ldw	r5,176(sp)
81115438:	d9801e04 	addi	r6,sp,120
8111543c:	9809883a 	mov	r4,r19
81115440:	11208d00 	call	811208d0 <__ssprint_r>
81115444:	103b011e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81115448:	d8c02017 	ldw	r3,128(sp)
8111544c:	da000404 	addi	r8,sp,16
81115450:	003d9306 	br	81114aa0 <__reset+0xfb0f4aa0>
81115454:	d8801f17 	ldw	r2,124(sp)
81115458:	01604534 	movhi	r5,33044
8111545c:	01000044 	movi	r4,1
81115460:	18c00044 	addi	r3,r3,1
81115464:	10800044 	addi	r2,r2,1
81115468:	297f7f04 	addi	r5,r5,-516
8111546c:	41000115 	stw	r4,4(r8)
81115470:	41400015 	stw	r5,0(r8)
81115474:	d8c02015 	stw	r3,128(sp)
81115478:	d8801f15 	stw	r2,124(sp)
8111547c:	010001c4 	movi	r4,7
81115480:	2080b516 	blt	r4,r2,81115758 <___svfprintf_internal_r+0x1aa8>
81115484:	42000204 	addi	r8,r8,8
81115488:	8800041e 	bne	r17,zero,8111549c <___svfprintf_internal_r+0x17ec>
8111548c:	d8803317 	ldw	r2,204(sp)
81115490:	1000021e 	bne	r2,zero,8111549c <___svfprintf_internal_r+0x17ec>
81115494:	9080004c 	andi	r2,r18,1
81115498:	103c5b26 	beq	r2,zero,81114608 <__reset+0xfb0f4608>
8111549c:	d9003817 	ldw	r4,224(sp)
811154a0:	d8801f17 	ldw	r2,124(sp)
811154a4:	d9403417 	ldw	r5,208(sp)
811154a8:	20c7883a 	add	r3,r4,r3
811154ac:	10800044 	addi	r2,r2,1
811154b0:	41000115 	stw	r4,4(r8)
811154b4:	41400015 	stw	r5,0(r8)
811154b8:	d8c02015 	stw	r3,128(sp)
811154bc:	d8801f15 	stw	r2,124(sp)
811154c0:	010001c4 	movi	r4,7
811154c4:	20818016 	blt	r4,r2,81115ac8 <___svfprintf_internal_r+0x1e18>
811154c8:	42000204 	addi	r8,r8,8
811154cc:	0463c83a 	sub	r17,zero,r17
811154d0:	0440cb0e 	bge	zero,r17,81115800 <___svfprintf_internal_r+0x1b50>
811154d4:	05800404 	movi	r22,16
811154d8:	b440e80e 	bge	r22,r17,8111587c <___svfprintf_internal_r+0x1bcc>
811154dc:	01604534 	movhi	r5,33044
811154e0:	297f7f84 	addi	r5,r5,-514
811154e4:	d9402b15 	stw	r5,172(sp)
811154e8:	070001c4 	movi	fp,7
811154ec:	dd002c17 	ldw	r20,176(sp)
811154f0:	00000306 	br	81115500 <___svfprintf_internal_r+0x1850>
811154f4:	42000204 	addi	r8,r8,8
811154f8:	8c7ffc04 	addi	r17,r17,-16
811154fc:	b440e20e 	bge	r22,r17,81115888 <___svfprintf_internal_r+0x1bd8>
81115500:	18c00404 	addi	r3,r3,16
81115504:	10800044 	addi	r2,r2,1
81115508:	45400015 	stw	r21,0(r8)
8111550c:	45800115 	stw	r22,4(r8)
81115510:	d8c02015 	stw	r3,128(sp)
81115514:	d8801f15 	stw	r2,124(sp)
81115518:	e0bff60e 	bge	fp,r2,811154f4 <__reset+0xfb0f54f4>
8111551c:	d9801e04 	addi	r6,sp,120
81115520:	a00b883a 	mov	r5,r20
81115524:	9809883a 	mov	r4,r19
81115528:	11208d00 	call	811208d0 <__ssprint_r>
8111552c:	103ac71e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81115530:	d8c02017 	ldw	r3,128(sp)
81115534:	d8801f17 	ldw	r2,124(sp)
81115538:	da000404 	addi	r8,sp,16
8111553c:	003fee06 	br	811154f8 <__reset+0xfb0f54f8>
81115540:	d8c02d17 	ldw	r3,180(sp)
81115544:	d9002917 	ldw	r4,164(sp)
81115548:	002d883a 	mov	r22,zero
8111554c:	18800104 	addi	r2,r3,4
81115550:	1d000017 	ldw	r20,0(r3)
81115554:	203e7d0e 	bge	r4,zero,81114f4c <__reset+0xfb0f4f4c>
81115558:	003eda06 	br	811150c4 <__reset+0xfb0f50c4>
8111555c:	d9402d17 	ldw	r5,180(sp)
81115560:	d8c02917 	ldw	r3,164(sp)
81115564:	002d883a 	mov	r22,zero
81115568:	28800104 	addi	r2,r5,4
8111556c:	2d000017 	ldw	r20,0(r5)
81115570:	183e2d0e 	bge	r3,zero,81114e28 <__reset+0xfb0f4e28>
81115574:	003f6b06 	br	81115324 <__reset+0xfb0f5324>
81115578:	d8c02d15 	stw	r3,180(sp)
8111557c:	0039883a 	mov	fp,zero
81115580:	003ed206 	br	811150cc <__reset+0xfb0f50cc>
81115584:	bc400043 	ldbu	r17,1(r23)
81115588:	94800814 	ori	r18,r18,32
8111558c:	bdc00044 	addi	r23,r23,1
81115590:	8c403fcc 	andi	r17,r17,255
81115594:	8c40201c 	xori	r17,r17,128
81115598:	8c7fe004 	addi	r17,r17,-128
8111559c:	003a1a06 	br	81113e08 <__reset+0xfb0f3e08>
811155a0:	d9402c17 	ldw	r5,176(sp)
811155a4:	d9801e04 	addi	r6,sp,120
811155a8:	9809883a 	mov	r4,r19
811155ac:	11208d00 	call	811208d0 <__ssprint_r>
811155b0:	103aa61e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
811155b4:	d8c02017 	ldw	r3,128(sp)
811155b8:	da000404 	addi	r8,sp,16
811155bc:	003d4a06 	br	81114ae8 <__reset+0xfb0f4ae8>
811155c0:	d9002917 	ldw	r4,164(sp)
811155c4:	05bff7c4 	movi	r22,-33
811155c8:	00bfffc4 	movi	r2,-1
811155cc:	8dac703a 	and	r22,r17,r22
811155d0:	20806a26 	beq	r4,r2,8111577c <___svfprintf_internal_r+0x1acc>
811155d4:	008011c4 	movi	r2,71
811155d8:	b0813726 	beq	r22,r2,81115ab8 <___svfprintf_internal_r+0x1e08>
811155dc:	d9003717 	ldw	r4,220(sp)
811155e0:	90c04014 	ori	r3,r18,256
811155e4:	d8c02b15 	stw	r3,172(sp)
811155e8:	20015d16 	blt	r4,zero,81115b60 <___svfprintf_internal_r+0x1eb0>
811155ec:	dd003717 	ldw	r20,220(sp)
811155f0:	d8002a05 	stb	zero,168(sp)
811155f4:	00801984 	movi	r2,102
811155f8:	88814026 	beq	r17,r2,81115afc <___svfprintf_internal_r+0x1e4c>
811155fc:	00801184 	movi	r2,70
81115600:	88817126 	beq	r17,r2,81115bc8 <___svfprintf_internal_r+0x1f18>
81115604:	00801144 	movi	r2,69
81115608:	b0816226 	beq	r22,r2,81115b94 <___svfprintf_internal_r+0x1ee4>
8111560c:	d8c02917 	ldw	r3,164(sp)
81115610:	d8802104 	addi	r2,sp,132
81115614:	d8800315 	stw	r2,12(sp)
81115618:	d9403617 	ldw	r5,216(sp)
8111561c:	d8802504 	addi	r2,sp,148
81115620:	d8800215 	stw	r2,8(sp)
81115624:	d8802604 	addi	r2,sp,152
81115628:	d8c00015 	stw	r3,0(sp)
8111562c:	d8800115 	stw	r2,4(sp)
81115630:	01c00084 	movi	r7,2
81115634:	a00d883a 	mov	r6,r20
81115638:	9809883a 	mov	r4,r19
8111563c:	d8c03d15 	stw	r3,244(sp)
81115640:	da003e15 	stw	r8,248(sp)
81115644:	1119f9c0 	call	81119f9c <_dtoa_r>
81115648:	1021883a 	mov	r16,r2
8111564c:	008019c4 	movi	r2,103
81115650:	d8c03d17 	ldw	r3,244(sp)
81115654:	da003e17 	ldw	r8,248(sp)
81115658:	8880e726 	beq	r17,r2,811159f8 <___svfprintf_internal_r+0x1d48>
8111565c:	008011c4 	movi	r2,71
81115660:	8880d426 	beq	r17,r2,811159b4 <___svfprintf_internal_r+0x1d04>
81115664:	80f9883a 	add	fp,r16,r3
81115668:	d9003617 	ldw	r4,216(sp)
8111566c:	000d883a 	mov	r6,zero
81115670:	000f883a 	mov	r7,zero
81115674:	a00b883a 	mov	r5,r20
81115678:	da003e15 	stw	r8,248(sp)
8111567c:	11268c80 	call	811268c8 <__eqdf2>
81115680:	da003e17 	ldw	r8,248(sp)
81115684:	1000e426 	beq	r2,zero,81115a18 <___svfprintf_internal_r+0x1d68>
81115688:	d8802117 	ldw	r2,132(sp)
8111568c:	1700062e 	bgeu	r2,fp,811156a8 <___svfprintf_internal_r+0x19f8>
81115690:	01000c04 	movi	r4,48
81115694:	10c00044 	addi	r3,r2,1
81115698:	d8c02115 	stw	r3,132(sp)
8111569c:	11000005 	stb	r4,0(r2)
811156a0:	d8802117 	ldw	r2,132(sp)
811156a4:	173ffb36 	bltu	r2,fp,81115694 <__reset+0xfb0f5694>
811156a8:	1405c83a 	sub	r2,r2,r16
811156ac:	d8803315 	stw	r2,204(sp)
811156b0:	008011c4 	movi	r2,71
811156b4:	b080c526 	beq	r22,r2,811159cc <___svfprintf_internal_r+0x1d1c>
811156b8:	00801944 	movi	r2,101
811156bc:	1441d90e 	bge	r2,r17,81115e24 <___svfprintf_internal_r+0x2174>
811156c0:	d8c02617 	ldw	r3,152(sp)
811156c4:	00801984 	movi	r2,102
811156c8:	d8c03215 	stw	r3,200(sp)
811156cc:	88813426 	beq	r17,r2,81115ba0 <___svfprintf_internal_r+0x1ef0>
811156d0:	d8c03217 	ldw	r3,200(sp)
811156d4:	d9003317 	ldw	r4,204(sp)
811156d8:	19012516 	blt	r3,r4,81115b70 <___svfprintf_internal_r+0x1ec0>
811156dc:	9480004c 	andi	r18,r18,1
811156e0:	9001841e 	bne	r18,zero,81115cf4 <___svfprintf_internal_r+0x2044>
811156e4:	1805883a 	mov	r2,r3
811156e8:	1801cc16 	blt	r3,zero,81115e1c <___svfprintf_internal_r+0x216c>
811156ec:	d8c03217 	ldw	r3,200(sp)
811156f0:	044019c4 	movi	r17,103
811156f4:	d8c02e15 	stw	r3,184(sp)
811156f8:	df002a07 	ldb	fp,168(sp)
811156fc:	e000a61e 	bne	fp,zero,81115998 <___svfprintf_internal_r+0x1ce8>
81115700:	df002783 	ldbu	fp,158(sp)
81115704:	d8802a15 	stw	r2,168(sp)
81115708:	dc802b17 	ldw	r18,172(sp)
8111570c:	d8002915 	stw	zero,164(sp)
81115710:	003b1706 	br	81114370 <__reset+0xfb0f4370>
81115714:	04204534 	movhi	r16,33044
81115718:	843f6f04 	addi	r16,r16,-580
8111571c:	003aa606 	br	811141b8 <__reset+0xfb0f41b8>
81115720:	d9003917 	ldw	r4,228(sp)
81115724:	04001004 	movi	r16,64
81115728:	800b883a 	mov	r5,r16
8111572c:	11126700 	call	81112670 <_malloc_r>
81115730:	d9002c17 	ldw	r4,176(sp)
81115734:	20800015 	stw	r2,0(r4)
81115738:	20800415 	stw	r2,16(r4)
8111573c:	1001cb26 	beq	r2,zero,81115e6c <___svfprintf_internal_r+0x21bc>
81115740:	d8802c17 	ldw	r2,176(sp)
81115744:	14000515 	stw	r16,20(r2)
81115748:	00397606 	br	81113d24 <__reset+0xfb0f3d24>
8111574c:	04204534 	movhi	r16,33044
81115750:	843f7104 	addi	r16,r16,-572
81115754:	003ee106 	br	811152dc <__reset+0xfb0f52dc>
81115758:	d9402c17 	ldw	r5,176(sp)
8111575c:	d9801e04 	addi	r6,sp,120
81115760:	9809883a 	mov	r4,r19
81115764:	11208d00 	call	811208d0 <__ssprint_r>
81115768:	103a381e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
8111576c:	dc402617 	ldw	r17,152(sp)
81115770:	d8c02017 	ldw	r3,128(sp)
81115774:	da000404 	addi	r8,sp,16
81115778:	003f4306 	br	81115488 <__reset+0xfb0f5488>
8111577c:	01400184 	movi	r5,6
81115780:	d9402915 	stw	r5,164(sp)
81115784:	003f9506 	br	811155dc <__reset+0xfb0f55dc>
81115788:	d9002d17 	ldw	r4,180(sp)
8111578c:	25000017 	ldw	r20,0(r4)
81115790:	21000104 	addi	r4,r4,4
81115794:	d9002d15 	stw	r4,180(sp)
81115798:	a02dd7fa 	srai	r22,r20,31
8111579c:	b005883a 	mov	r2,r22
811157a0:	003a9b06 	br	81114210 <__reset+0xfb0f4210>
811157a4:	d9402d17 	ldw	r5,180(sp)
811157a8:	002d883a 	mov	r22,zero
811157ac:	2d000017 	ldw	r20,0(r5)
811157b0:	29400104 	addi	r5,r5,4
811157b4:	d9402d15 	stw	r5,180(sp)
811157b8:	003bf906 	br	811147a0 <__reset+0xfb0f47a0>
811157bc:	9480100c 	andi	r18,r18,64
811157c0:	90006e26 	beq	r18,zero,8111597c <___svfprintf_internal_r+0x1ccc>
811157c4:	d9002d17 	ldw	r4,180(sp)
811157c8:	d9402f17 	ldw	r5,188(sp)
811157cc:	20800017 	ldw	r2,0(r4)
811157d0:	21000104 	addi	r4,r4,4
811157d4:	d9002d15 	stw	r4,180(sp)
811157d8:	1140000d 	sth	r5,0(r2)
811157dc:	00396106 	br	81113d64 <__reset+0xfb0f3d64>
811157e0:	d9402c17 	ldw	r5,176(sp)
811157e4:	d9801e04 	addi	r6,sp,120
811157e8:	9809883a 	mov	r4,r19
811157ec:	11208d00 	call	811208d0 <__ssprint_r>
811157f0:	103a161e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
811157f4:	d8c02017 	ldw	r3,128(sp)
811157f8:	d8801f17 	ldw	r2,124(sp)
811157fc:	da000404 	addi	r8,sp,16
81115800:	d9403317 	ldw	r5,204(sp)
81115804:	10800044 	addi	r2,r2,1
81115808:	44000015 	stw	r16,0(r8)
8111580c:	28c7883a 	add	r3,r5,r3
81115810:	003b7706 	br	811145f0 <__reset+0xfb0f45f0>
81115814:	8009883a 	mov	r4,r16
81115818:	da003e15 	stw	r8,248(sp)
8111581c:	11139780 	call	81113978 <strlen>
81115820:	d8802e15 	stw	r2,184(sp)
81115824:	da003e17 	ldw	r8,248(sp)
81115828:	103c280e 	bge	r2,zero,811148cc <__reset+0xfb0f48cc>
8111582c:	0005883a 	mov	r2,zero
81115830:	003c2606 	br	811148cc <__reset+0xfb0f48cc>
81115834:	00bfffc4 	movi	r2,-1
81115838:	003a0906 	br	81114060 <__reset+0xfb0f4060>
8111583c:	01204534 	movhi	r4,33044
81115840:	213f8384 	addi	r4,r4,-498
81115844:	d9003515 	stw	r4,212(sp)
81115848:	003b0606 	br	81114464 <__reset+0xfb0f4464>
8111584c:	013fffc4 	movi	r4,-1
81115850:	003a2706 	br	811140f0 <__reset+0xfb0f40f0>
81115854:	d9402c17 	ldw	r5,176(sp)
81115858:	d9801e04 	addi	r6,sp,120
8111585c:	9809883a 	mov	r4,r19
81115860:	11208d00 	call	811208d0 <__ssprint_r>
81115864:	1039f91e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81115868:	d8c02017 	ldw	r3,128(sp)
8111586c:	da000404 	addi	r8,sp,16
81115870:	003d8406 	br	81114e84 <__reset+0xfb0f4e84>
81115874:	0023883a 	mov	r17,zero
81115878:	003d8306 	br	81114e88 <__reset+0xfb0f4e88>
8111587c:	01204534 	movhi	r4,33044
81115880:	213f7f84 	addi	r4,r4,-514
81115884:	d9002b15 	stw	r4,172(sp)
81115888:	d9002b17 	ldw	r4,172(sp)
8111588c:	1c47883a 	add	r3,r3,r17
81115890:	10800044 	addi	r2,r2,1
81115894:	41000015 	stw	r4,0(r8)
81115898:	44400115 	stw	r17,4(r8)
8111589c:	d8c02015 	stw	r3,128(sp)
811158a0:	d8801f15 	stw	r2,124(sp)
811158a4:	010001c4 	movi	r4,7
811158a8:	20bfcd16 	blt	r4,r2,811157e0 <__reset+0xfb0f57e0>
811158ac:	42000204 	addi	r8,r8,8
811158b0:	003fd306 	br	81115800 <__reset+0xfb0f5800>
811158b4:	d9402c17 	ldw	r5,176(sp)
811158b8:	d9801e04 	addi	r6,sp,120
811158bc:	9809883a 	mov	r4,r19
811158c0:	11208d00 	call	811208d0 <__ssprint_r>
811158c4:	1039e11e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
811158c8:	d8802617 	ldw	r2,152(sp)
811158cc:	d8c02017 	ldw	r3,128(sp)
811158d0:	da000404 	addi	r8,sp,16
811158d4:	003e1c06 	br	81115148 <__reset+0xfb0f5148>
811158d8:	d8802917 	ldw	r2,164(sp)
811158dc:	00c00184 	movi	r3,6
811158e0:	1880012e 	bgeu	r3,r2,811158e8 <___svfprintf_internal_r+0x1c38>
811158e4:	1805883a 	mov	r2,r3
811158e8:	d8802e15 	stw	r2,184(sp)
811158ec:	1000f316 	blt	r2,zero,81115cbc <___svfprintf_internal_r+0x200c>
811158f0:	04204534 	movhi	r16,33044
811158f4:	d8802a15 	stw	r2,168(sp)
811158f8:	dd002d15 	stw	r20,180(sp)
811158fc:	d8002915 	stw	zero,164(sp)
81115900:	d8003215 	stw	zero,200(sp)
81115904:	843f7d04 	addi	r16,r16,-524
81115908:	0039883a 	mov	fp,zero
8111590c:	003a9f06 	br	8111438c <__reset+0xfb0f438c>
81115910:	01204534 	movhi	r4,33044
81115914:	213f8384 	addi	r4,r4,-498
81115918:	d9003515 	stw	r4,212(sp)
8111591c:	003b5f06 	br	8111469c <__reset+0xfb0f469c>
81115920:	d9402c17 	ldw	r5,176(sp)
81115924:	d9801e04 	addi	r6,sp,120
81115928:	9809883a 	mov	r4,r19
8111592c:	11208d00 	call	811208d0 <__ssprint_r>
81115930:	1039c61e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81115934:	d8802617 	ldw	r2,152(sp)
81115938:	d9403317 	ldw	r5,204(sp)
8111593c:	d8c02017 	ldw	r3,128(sp)
81115940:	da000404 	addi	r8,sp,16
81115944:	2885c83a 	sub	r2,r5,r2
81115948:	003e1006 	br	8111518c <__reset+0xfb0f518c>
8111594c:	00800044 	movi	r2,1
81115950:	10803fcc 	andi	r2,r2,255
81115954:	00c00044 	movi	r3,1
81115958:	10fa3526 	beq	r2,r3,81114230 <__reset+0xfb0f4230>
8111595c:	00c00084 	movi	r3,2
81115960:	10fb9e26 	beq	r2,r3,811147dc <__reset+0xfb0f47dc>
81115964:	003a6406 	br	811142f8 <__reset+0xfb0f42f8>
81115968:	0021883a 	mov	r16,zero
8111596c:	003e0806 	br	81115190 <__reset+0xfb0f5190>
81115970:	07000b44 	movi	fp,45
81115974:	df002785 	stb	fp,158(sp)
81115978:	003a0b06 	br	811141a8 <__reset+0xfb0f41a8>
8111597c:	d8c02d17 	ldw	r3,180(sp)
81115980:	d9002f17 	ldw	r4,188(sp)
81115984:	18800017 	ldw	r2,0(r3)
81115988:	18c00104 	addi	r3,r3,4
8111598c:	d8c02d15 	stw	r3,180(sp)
81115990:	11000015 	stw	r4,0(r2)
81115994:	0038f306 	br	81113d64 <__reset+0xfb0f3d64>
81115998:	00c00b44 	movi	r3,45
8111599c:	d8c02785 	stb	r3,158(sp)
811159a0:	d8802a15 	stw	r2,168(sp)
811159a4:	dc802b17 	ldw	r18,172(sp)
811159a8:	d8002915 	stw	zero,164(sp)
811159ac:	07000b44 	movi	fp,45
811159b0:	003a7306 	br	81114380 <__reset+0xfb0f4380>
811159b4:	9080004c 	andi	r2,r18,1
811159b8:	1000941e 	bne	r2,zero,81115c0c <___svfprintf_internal_r+0x1f5c>
811159bc:	d8802117 	ldw	r2,132(sp)
811159c0:	1405c83a 	sub	r2,r2,r16
811159c4:	d8803315 	stw	r2,204(sp)
811159c8:	b441161e 	bne	r22,r17,81115e24 <___svfprintf_internal_r+0x2174>
811159cc:	dd802617 	ldw	r22,152(sp)
811159d0:	00bfff44 	movi	r2,-3
811159d4:	b0801a16 	blt	r22,r2,81115a40 <___svfprintf_internal_r+0x1d90>
811159d8:	d9402917 	ldw	r5,164(sp)
811159dc:	2d801816 	blt	r5,r22,81115a40 <___svfprintf_internal_r+0x1d90>
811159e0:	dd803215 	stw	r22,200(sp)
811159e4:	003f3a06 	br	811156d0 <__reset+0xfb0f56d0>
811159e8:	1025883a 	mov	r18,r2
811159ec:	0039883a 	mov	fp,zero
811159f0:	00800084 	movi	r2,2
811159f4:	003fd606 	br	81115950 <__reset+0xfb0f5950>
811159f8:	9080004c 	andi	r2,r18,1
811159fc:	103f191e 	bne	r2,zero,81115664 <__reset+0xfb0f5664>
81115a00:	d8802117 	ldw	r2,132(sp)
81115a04:	003f2806 	br	811156a8 <__reset+0xfb0f56a8>
81115a08:	01204534 	movhi	r4,33044
81115a0c:	213f7f84 	addi	r4,r4,-514
81115a10:	d9002b15 	stw	r4,172(sp)
81115a14:	003c7c06 	br	81114c08 <__reset+0xfb0f4c08>
81115a18:	e005883a 	mov	r2,fp
81115a1c:	003f2206 	br	811156a8 <__reset+0xfb0f56a8>
81115a20:	d9402917 	ldw	r5,164(sp)
81115a24:	df002783 	ldbu	fp,158(sp)
81115a28:	dd002d15 	stw	r20,180(sp)
81115a2c:	d9402a15 	stw	r5,168(sp)
81115a30:	d9402e15 	stw	r5,184(sp)
81115a34:	d8002915 	stw	zero,164(sp)
81115a38:	d8003215 	stw	zero,200(sp)
81115a3c:	003a4c06 	br	81114370 <__reset+0xfb0f4370>
81115a40:	8c7fff84 	addi	r17,r17,-2
81115a44:	b5bfffc4 	addi	r22,r22,-1
81115a48:	dd802615 	stw	r22,152(sp)
81115a4c:	dc4022c5 	stb	r17,139(sp)
81115a50:	b000c316 	blt	r22,zero,81115d60 <___svfprintf_internal_r+0x20b0>
81115a54:	00800ac4 	movi	r2,43
81115a58:	d8802305 	stb	r2,140(sp)
81115a5c:	00800244 	movi	r2,9
81115a60:	15806e16 	blt	r2,r22,81115c1c <___svfprintf_internal_r+0x1f6c>
81115a64:	00800c04 	movi	r2,48
81115a68:	b5800c04 	addi	r22,r22,48
81115a6c:	d8802345 	stb	r2,141(sp)
81115a70:	dd802385 	stb	r22,142(sp)
81115a74:	d88023c4 	addi	r2,sp,143
81115a78:	df0022c4 	addi	fp,sp,139
81115a7c:	d8c03317 	ldw	r3,204(sp)
81115a80:	1739c83a 	sub	fp,r2,fp
81115a84:	d9003317 	ldw	r4,204(sp)
81115a88:	e0c7883a 	add	r3,fp,r3
81115a8c:	df003b15 	stw	fp,236(sp)
81115a90:	d8c02e15 	stw	r3,184(sp)
81115a94:	00800044 	movi	r2,1
81115a98:	1100b70e 	bge	r2,r4,81115d78 <___svfprintf_internal_r+0x20c8>
81115a9c:	d8c02e17 	ldw	r3,184(sp)
81115aa0:	18c00044 	addi	r3,r3,1
81115aa4:	d8c02e15 	stw	r3,184(sp)
81115aa8:	1805883a 	mov	r2,r3
81115aac:	1800b016 	blt	r3,zero,81115d70 <___svfprintf_internal_r+0x20c0>
81115ab0:	d8003215 	stw	zero,200(sp)
81115ab4:	003f1006 	br	811156f8 <__reset+0xfb0f56f8>
81115ab8:	d8802917 	ldw	r2,164(sp)
81115abc:	103ec71e 	bne	r2,zero,811155dc <__reset+0xfb0f55dc>
81115ac0:	dc002915 	stw	r16,164(sp)
81115ac4:	003ec506 	br	811155dc <__reset+0xfb0f55dc>
81115ac8:	d9402c17 	ldw	r5,176(sp)
81115acc:	d9801e04 	addi	r6,sp,120
81115ad0:	9809883a 	mov	r4,r19
81115ad4:	11208d00 	call	811208d0 <__ssprint_r>
81115ad8:	10395c1e 	bne	r2,zero,8111404c <__reset+0xfb0f404c>
81115adc:	dc402617 	ldw	r17,152(sp)
81115ae0:	d8c02017 	ldw	r3,128(sp)
81115ae4:	d8801f17 	ldw	r2,124(sp)
81115ae8:	da000404 	addi	r8,sp,16
81115aec:	003e7706 	br	811154cc <__reset+0xfb0f54cc>
81115af0:	582f883a 	mov	r23,r11
81115af4:	d8002915 	stw	zero,164(sp)
81115af8:	0038c406 	br	81113e0c <__reset+0xfb0f3e0c>
81115afc:	d8c02917 	ldw	r3,164(sp)
81115b00:	d8802104 	addi	r2,sp,132
81115b04:	d8800315 	stw	r2,12(sp)
81115b08:	d9403617 	ldw	r5,216(sp)
81115b0c:	d8802504 	addi	r2,sp,148
81115b10:	d8800215 	stw	r2,8(sp)
81115b14:	d8802604 	addi	r2,sp,152
81115b18:	d8c00015 	stw	r3,0(sp)
81115b1c:	9809883a 	mov	r4,r19
81115b20:	d8800115 	stw	r2,4(sp)
81115b24:	01c000c4 	movi	r7,3
81115b28:	a00d883a 	mov	r6,r20
81115b2c:	da003e15 	stw	r8,248(sp)
81115b30:	1119f9c0 	call	81119f9c <_dtoa_r>
81115b34:	d9002917 	ldw	r4,164(sp)
81115b38:	da003e17 	ldw	r8,248(sp)
81115b3c:	1021883a 	mov	r16,r2
81115b40:	1139883a 	add	fp,r2,r4
81115b44:	2007883a 	mov	r3,r4
81115b48:	81000007 	ldb	r4,0(r16)
81115b4c:	00800c04 	movi	r2,48
81115b50:	20806f26 	beq	r4,r2,81115d10 <___svfprintf_internal_r+0x2060>
81115b54:	d8c02617 	ldw	r3,152(sp)
81115b58:	e0f9883a 	add	fp,fp,r3
81115b5c:	003ec206 	br	81115668 <__reset+0xfb0f5668>
81115b60:	00c00b44 	movi	r3,45
81115b64:	2520003c 	xorhi	r20,r4,32768
81115b68:	d8c02a05 	stb	r3,168(sp)
81115b6c:	003ea106 	br	811155f4 <__reset+0xfb0f55f4>
81115b70:	d8c03217 	ldw	r3,200(sp)
81115b74:	00c0890e 	bge	zero,r3,81115d9c <___svfprintf_internal_r+0x20ec>
81115b78:	00800044 	movi	r2,1
81115b7c:	d9003317 	ldw	r4,204(sp)
81115b80:	1105883a 	add	r2,r2,r4
81115b84:	d8802e15 	stw	r2,184(sp)
81115b88:	10005f16 	blt	r2,zero,81115d08 <___svfprintf_internal_r+0x2058>
81115b8c:	044019c4 	movi	r17,103
81115b90:	003ed906 	br	811156f8 <__reset+0xfb0f56f8>
81115b94:	d9002917 	ldw	r4,164(sp)
81115b98:	20c00044 	addi	r3,r4,1
81115b9c:	003e9c06 	br	81115610 <__reset+0xfb0f5610>
81115ba0:	d9002917 	ldw	r4,164(sp)
81115ba4:	00c0680e 	bge	zero,r3,81115d48 <___svfprintf_internal_r+0x2098>
81115ba8:	2000461e 	bne	r4,zero,81115cc4 <___svfprintf_internal_r+0x2014>
81115bac:	9480004c 	andi	r18,r18,1
81115bb0:	9000441e 	bne	r18,zero,81115cc4 <___svfprintf_internal_r+0x2014>
81115bb4:	1805883a 	mov	r2,r3
81115bb8:	1800a016 	blt	r3,zero,81115e3c <___svfprintf_internal_r+0x218c>
81115bbc:	d8c03217 	ldw	r3,200(sp)
81115bc0:	d8c02e15 	stw	r3,184(sp)
81115bc4:	003ecc06 	br	811156f8 <__reset+0xfb0f56f8>
81115bc8:	d9402917 	ldw	r5,164(sp)
81115bcc:	d8802104 	addi	r2,sp,132
81115bd0:	d8800315 	stw	r2,12(sp)
81115bd4:	d9400015 	stw	r5,0(sp)
81115bd8:	d8802504 	addi	r2,sp,148
81115bdc:	d9403617 	ldw	r5,216(sp)
81115be0:	d8800215 	stw	r2,8(sp)
81115be4:	d8802604 	addi	r2,sp,152
81115be8:	d8800115 	stw	r2,4(sp)
81115bec:	01c000c4 	movi	r7,3
81115bf0:	a00d883a 	mov	r6,r20
81115bf4:	9809883a 	mov	r4,r19
81115bf8:	da003e15 	stw	r8,248(sp)
81115bfc:	1119f9c0 	call	81119f9c <_dtoa_r>
81115c00:	d8c02917 	ldw	r3,164(sp)
81115c04:	da003e17 	ldw	r8,248(sp)
81115c08:	1021883a 	mov	r16,r2
81115c0c:	00801184 	movi	r2,70
81115c10:	80f9883a 	add	fp,r16,r3
81115c14:	88bfcc26 	beq	r17,r2,81115b48 <__reset+0xfb0f5b48>
81115c18:	003e9306 	br	81115668 <__reset+0xfb0f5668>
81115c1c:	df0022c4 	addi	fp,sp,139
81115c20:	dc002915 	stw	r16,164(sp)
81115c24:	9829883a 	mov	r20,r19
81115c28:	e021883a 	mov	r16,fp
81115c2c:	4027883a 	mov	r19,r8
81115c30:	b009883a 	mov	r4,r22
81115c34:	01400284 	movi	r5,10
81115c38:	11253f80 	call	811253f8 <__modsi3>
81115c3c:	10800c04 	addi	r2,r2,48
81115c40:	843fffc4 	addi	r16,r16,-1
81115c44:	b009883a 	mov	r4,r22
81115c48:	01400284 	movi	r5,10
81115c4c:	80800005 	stb	r2,0(r16)
81115c50:	11253740 	call	81125374 <__divsi3>
81115c54:	102d883a 	mov	r22,r2
81115c58:	00800244 	movi	r2,9
81115c5c:	15bff416 	blt	r2,r22,81115c30 <__reset+0xfb0f5c30>
81115c60:	9811883a 	mov	r8,r19
81115c64:	b0800c04 	addi	r2,r22,48
81115c68:	a027883a 	mov	r19,r20
81115c6c:	8029883a 	mov	r20,r16
81115c70:	a17fffc4 	addi	r5,r20,-1
81115c74:	a0bfffc5 	stb	r2,-1(r20)
81115c78:	dc002917 	ldw	r16,164(sp)
81115c7c:	2f00752e 	bgeu	r5,fp,81115e54 <___svfprintf_internal_r+0x21a4>
81115c80:	d9c02384 	addi	r7,sp,142
81115c84:	3d0fc83a 	sub	r7,r7,r20
81115c88:	d9002344 	addi	r4,sp,141
81115c8c:	e1cf883a 	add	r7,fp,r7
81115c90:	00000106 	br	81115c98 <___svfprintf_internal_r+0x1fe8>
81115c94:	28800003 	ldbu	r2,0(r5)
81115c98:	20800005 	stb	r2,0(r4)
81115c9c:	21000044 	addi	r4,r4,1
81115ca0:	29400044 	addi	r5,r5,1
81115ca4:	21fffb1e 	bne	r4,r7,81115c94 <__reset+0xfb0f5c94>
81115ca8:	d8802304 	addi	r2,sp,140
81115cac:	1505c83a 	sub	r2,r2,r20
81115cb0:	d8c02344 	addi	r3,sp,141
81115cb4:	1885883a 	add	r2,r3,r2
81115cb8:	003f7006 	br	81115a7c <__reset+0xfb0f5a7c>
81115cbc:	0005883a 	mov	r2,zero
81115cc0:	003f0b06 	br	811158f0 <__reset+0xfb0f58f0>
81115cc4:	d9002917 	ldw	r4,164(sp)
81115cc8:	d8c03217 	ldw	r3,200(sp)
81115ccc:	20800044 	addi	r2,r4,1
81115cd0:	1885883a 	add	r2,r3,r2
81115cd4:	d8802e15 	stw	r2,184(sp)
81115cd8:	103e870e 	bge	r2,zero,811156f8 <__reset+0xfb0f56f8>
81115cdc:	0005883a 	mov	r2,zero
81115ce0:	003e8506 	br	811156f8 <__reset+0xfb0f56f8>
81115ce4:	01204534 	movhi	r4,33044
81115ce8:	213f7f84 	addi	r4,r4,-514
81115cec:	d9002b15 	stw	r4,172(sp)
81115cf0:	003cc506 	br	81115008 <__reset+0xfb0f5008>
81115cf4:	d8c03217 	ldw	r3,200(sp)
81115cf8:	18c00044 	addi	r3,r3,1
81115cfc:	d8c02e15 	stw	r3,184(sp)
81115d00:	1805883a 	mov	r2,r3
81115d04:	183fa10e 	bge	r3,zero,81115b8c <__reset+0xfb0f5b8c>
81115d08:	0005883a 	mov	r2,zero
81115d0c:	003f9f06 	br	81115b8c <__reset+0xfb0f5b8c>
81115d10:	d9003617 	ldw	r4,216(sp)
81115d14:	000d883a 	mov	r6,zero
81115d18:	000f883a 	mov	r7,zero
81115d1c:	a00b883a 	mov	r5,r20
81115d20:	d8c03d15 	stw	r3,244(sp)
81115d24:	da003e15 	stw	r8,248(sp)
81115d28:	11268c80 	call	811268c8 <__eqdf2>
81115d2c:	d8c03d17 	ldw	r3,244(sp)
81115d30:	da003e17 	ldw	r8,248(sp)
81115d34:	103f8726 	beq	r2,zero,81115b54 <__reset+0xfb0f5b54>
81115d38:	00800044 	movi	r2,1
81115d3c:	10c7c83a 	sub	r3,r2,r3
81115d40:	d8c02615 	stw	r3,152(sp)
81115d44:	003f8406 	br	81115b58 <__reset+0xfb0f5b58>
81115d48:	20000e1e 	bne	r4,zero,81115d84 <___svfprintf_internal_r+0x20d4>
81115d4c:	9480004c 	andi	r18,r18,1
81115d50:	90000c1e 	bne	r18,zero,81115d84 <___svfprintf_internal_r+0x20d4>
81115d54:	00800044 	movi	r2,1
81115d58:	d8802e15 	stw	r2,184(sp)
81115d5c:	003e6606 	br	811156f8 <__reset+0xfb0f56f8>
81115d60:	00800b44 	movi	r2,45
81115d64:	05adc83a 	sub	r22,zero,r22
81115d68:	d8802305 	stb	r2,140(sp)
81115d6c:	003f3b06 	br	81115a5c <__reset+0xfb0f5a5c>
81115d70:	0005883a 	mov	r2,zero
81115d74:	003f4e06 	br	81115ab0 <__reset+0xfb0f5ab0>
81115d78:	90a4703a 	and	r18,r18,r2
81115d7c:	903f4a26 	beq	r18,zero,81115aa8 <__reset+0xfb0f5aa8>
81115d80:	003f4606 	br	81115a9c <__reset+0xfb0f5a9c>
81115d84:	d8c02917 	ldw	r3,164(sp)
81115d88:	18c00084 	addi	r3,r3,2
81115d8c:	d8c02e15 	stw	r3,184(sp)
81115d90:	1805883a 	mov	r2,r3
81115d94:	183e580e 	bge	r3,zero,811156f8 <__reset+0xfb0f56f8>
81115d98:	003fd006 	br	81115cdc <__reset+0xfb0f5cdc>
81115d9c:	00800084 	movi	r2,2
81115da0:	10c5c83a 	sub	r2,r2,r3
81115da4:	003f7506 	br	81115b7c <__reset+0xfb0f5b7c>
81115da8:	d8802d17 	ldw	r2,180(sp)
81115dac:	d9002d17 	ldw	r4,180(sp)
81115db0:	bc400043 	ldbu	r17,1(r23)
81115db4:	10800017 	ldw	r2,0(r2)
81115db8:	582f883a 	mov	r23,r11
81115dbc:	d8802915 	stw	r2,164(sp)
81115dc0:	20800104 	addi	r2,r4,4
81115dc4:	d9002917 	ldw	r4,164(sp)
81115dc8:	d8802d15 	stw	r2,180(sp)
81115dcc:	203df00e 	bge	r4,zero,81115590 <__reset+0xfb0f5590>
81115dd0:	8c403fcc 	andi	r17,r17,255
81115dd4:	00bfffc4 	movi	r2,-1
81115dd8:	8c40201c 	xori	r17,r17,128
81115ddc:	d8802915 	stw	r2,164(sp)
81115de0:	8c7fe004 	addi	r17,r17,-128
81115de4:	00380806 	br	81113e08 <__reset+0xfb0f3e08>
81115de8:	9080004c 	andi	r2,r18,1
81115dec:	0039883a 	mov	fp,zero
81115df0:	10000726 	beq	r2,zero,81115e10 <___svfprintf_internal_r+0x2160>
81115df4:	d8c02817 	ldw	r3,160(sp)
81115df8:	dc001dc4 	addi	r16,sp,119
81115dfc:	00800c04 	movi	r2,48
81115e00:	1c07c83a 	sub	r3,r3,r16
81115e04:	d8801dc5 	stb	r2,119(sp)
81115e08:	d8c02e15 	stw	r3,184(sp)
81115e0c:	00395206 	br	81114358 <__reset+0xfb0f4358>
81115e10:	d8002e15 	stw	zero,184(sp)
81115e14:	dc001e04 	addi	r16,sp,120
81115e18:	00394f06 	br	81114358 <__reset+0xfb0f4358>
81115e1c:	0005883a 	mov	r2,zero
81115e20:	003e3206 	br	811156ec <__reset+0xfb0f56ec>
81115e24:	dd802617 	ldw	r22,152(sp)
81115e28:	003f0606 	br	81115a44 <__reset+0xfb0f5a44>
81115e2c:	d9c02785 	stb	r7,158(sp)
81115e30:	003a5106 	br	81114778 <__reset+0xfb0f4778>
81115e34:	d9c02785 	stb	r7,158(sp)
81115e38:	003a3706 	br	81114718 <__reset+0xfb0f4718>
81115e3c:	0005883a 	mov	r2,zero
81115e40:	003f5e06 	br	81115bbc <__reset+0xfb0f5bbc>
81115e44:	d9c02785 	stb	r7,158(sp)
81115e48:	00391706 	br	811142a8 <__reset+0xfb0f42a8>
81115e4c:	d9c02785 	stb	r7,158(sp)
81115e50:	0038e606 	br	811141ec <__reset+0xfb0f41ec>
81115e54:	d8802344 	addi	r2,sp,141
81115e58:	003f0806 	br	81115a7c <__reset+0xfb0f5a7c>
81115e5c:	d9c02785 	stb	r7,158(sp)
81115e60:	0038b706 	br	81114140 <__reset+0xfb0f4140>
81115e64:	d9c02785 	stb	r7,158(sp)
81115e68:	003adc06 	br	811149dc <__reset+0xfb0f49dc>
81115e6c:	d9403917 	ldw	r5,228(sp)
81115e70:	00800304 	movi	r2,12
81115e74:	28800015 	stw	r2,0(r5)
81115e78:	00bfffc4 	movi	r2,-1
81115e7c:	00387806 	br	81114060 <__reset+0xfb0f4060>
81115e80:	d9c02785 	stb	r7,158(sp)
81115e84:	003abf06 	br	81114984 <__reset+0xfb0f4984>
81115e88:	d9c02785 	stb	r7,158(sp)
81115e8c:	003a9b06 	br	811148fc <__reset+0xfb0f48fc>

81115e90 <___vfprintf_internal_r>:
81115e90:	deffb804 	addi	sp,sp,-288
81115e94:	de00012e 	bgeu	sp,et,81115e9c <___vfprintf_internal_r+0xc>
81115e98:	003b68fa 	trap	3
81115e9c:	dfc04715 	stw	ra,284(sp)
81115ea0:	ddc04515 	stw	r23,276(sp)
81115ea4:	dd404315 	stw	r21,268(sp)
81115ea8:	d9002c15 	stw	r4,176(sp)
81115eac:	282f883a 	mov	r23,r5
81115eb0:	302b883a 	mov	r21,r6
81115eb4:	d9c02d15 	stw	r7,180(sp)
81115eb8:	df004615 	stw	fp,280(sp)
81115ebc:	dd804415 	stw	r22,272(sp)
81115ec0:	dd004215 	stw	r20,264(sp)
81115ec4:	dcc04115 	stw	r19,260(sp)
81115ec8:	dc804015 	stw	r18,256(sp)
81115ecc:	dc403f15 	stw	r17,252(sp)
81115ed0:	dc003e15 	stw	r16,248(sp)
81115ed4:	111cb980 	call	8111cb98 <_localeconv_r>
81115ed8:	10800017 	ldw	r2,0(r2)
81115edc:	1009883a 	mov	r4,r2
81115ee0:	d8803415 	stw	r2,208(sp)
81115ee4:	11139780 	call	81113978 <strlen>
81115ee8:	d8803715 	stw	r2,220(sp)
81115eec:	d8802c17 	ldw	r2,176(sp)
81115ef0:	10000226 	beq	r2,zero,81115efc <___vfprintf_internal_r+0x6c>
81115ef4:	10800e17 	ldw	r2,56(r2)
81115ef8:	1000f926 	beq	r2,zero,811162e0 <___vfprintf_internal_r+0x450>
81115efc:	b880030b 	ldhu	r2,12(r23)
81115f00:	10c8000c 	andi	r3,r2,8192
81115f04:	1800061e 	bne	r3,zero,81115f20 <___vfprintf_internal_r+0x90>
81115f08:	b9001917 	ldw	r4,100(r23)
81115f0c:	00f7ffc4 	movi	r3,-8193
81115f10:	10880014 	ori	r2,r2,8192
81115f14:	20c6703a 	and	r3,r4,r3
81115f18:	b880030d 	sth	r2,12(r23)
81115f1c:	b8c01915 	stw	r3,100(r23)
81115f20:	10c0020c 	andi	r3,r2,8
81115f24:	1800c126 	beq	r3,zero,8111622c <___vfprintf_internal_r+0x39c>
81115f28:	b8c00417 	ldw	r3,16(r23)
81115f2c:	1800bf26 	beq	r3,zero,8111622c <___vfprintf_internal_r+0x39c>
81115f30:	1080068c 	andi	r2,r2,26
81115f34:	00c00284 	movi	r3,10
81115f38:	10c0c426 	beq	r2,r3,8111624c <___vfprintf_internal_r+0x3bc>
81115f3c:	d8c00404 	addi	r3,sp,16
81115f40:	05204534 	movhi	r20,33044
81115f44:	d9001e04 	addi	r4,sp,120
81115f48:	a53f8784 	addi	r20,r20,-482
81115f4c:	d8c01e15 	stw	r3,120(sp)
81115f50:	d8002015 	stw	zero,128(sp)
81115f54:	d8001f15 	stw	zero,124(sp)
81115f58:	d8003315 	stw	zero,204(sp)
81115f5c:	d8003615 	stw	zero,216(sp)
81115f60:	d8003815 	stw	zero,224(sp)
81115f64:	1811883a 	mov	r8,r3
81115f68:	d8003915 	stw	zero,228(sp)
81115f6c:	d8003a15 	stw	zero,232(sp)
81115f70:	d8002f15 	stw	zero,188(sp)
81115f74:	d9002815 	stw	r4,160(sp)
81115f78:	a8800007 	ldb	r2,0(r21)
81115f7c:	10027b26 	beq	r2,zero,8111696c <___vfprintf_internal_r+0xadc>
81115f80:	00c00944 	movi	r3,37
81115f84:	a821883a 	mov	r16,r21
81115f88:	10c0021e 	bne	r2,r3,81115f94 <___vfprintf_internal_r+0x104>
81115f8c:	00001406 	br	81115fe0 <___vfprintf_internal_r+0x150>
81115f90:	10c00326 	beq	r2,r3,81115fa0 <___vfprintf_internal_r+0x110>
81115f94:	84000044 	addi	r16,r16,1
81115f98:	80800007 	ldb	r2,0(r16)
81115f9c:	103ffc1e 	bne	r2,zero,81115f90 <__reset+0xfb0f5f90>
81115fa0:	8563c83a 	sub	r17,r16,r21
81115fa4:	88000e26 	beq	r17,zero,81115fe0 <___vfprintf_internal_r+0x150>
81115fa8:	d8c02017 	ldw	r3,128(sp)
81115fac:	d8801f17 	ldw	r2,124(sp)
81115fb0:	45400015 	stw	r21,0(r8)
81115fb4:	1c47883a 	add	r3,r3,r17
81115fb8:	10800044 	addi	r2,r2,1
81115fbc:	d8c02015 	stw	r3,128(sp)
81115fc0:	44400115 	stw	r17,4(r8)
81115fc4:	d8801f15 	stw	r2,124(sp)
81115fc8:	00c001c4 	movi	r3,7
81115fcc:	1880a716 	blt	r3,r2,8111626c <___vfprintf_internal_r+0x3dc>
81115fd0:	42000204 	addi	r8,r8,8
81115fd4:	d9402f17 	ldw	r5,188(sp)
81115fd8:	2c4b883a 	add	r5,r5,r17
81115fdc:	d9402f15 	stw	r5,188(sp)
81115fe0:	80800007 	ldb	r2,0(r16)
81115fe4:	1000a826 	beq	r2,zero,81116288 <___vfprintf_internal_r+0x3f8>
81115fe8:	84400047 	ldb	r17,1(r16)
81115fec:	00bfffc4 	movi	r2,-1
81115ff0:	85400044 	addi	r21,r16,1
81115ff4:	d8002785 	stb	zero,158(sp)
81115ff8:	0007883a 	mov	r3,zero
81115ffc:	000f883a 	mov	r7,zero
81116000:	d8802915 	stw	r2,164(sp)
81116004:	d8003115 	stw	zero,196(sp)
81116008:	0025883a 	mov	r18,zero
8111600c:	01401604 	movi	r5,88
81116010:	01800244 	movi	r6,9
81116014:	02800a84 	movi	r10,42
81116018:	02401b04 	movi	r9,108
8111601c:	ad400044 	addi	r21,r21,1
81116020:	88bff804 	addi	r2,r17,-32
81116024:	28830436 	bltu	r5,r2,81116c38 <___vfprintf_internal_r+0xda8>
81116028:	100490ba 	slli	r2,r2,2
8111602c:	01204474 	movhi	r4,33041
81116030:	21181004 	addi	r4,r4,24640
81116034:	1105883a 	add	r2,r2,r4
81116038:	10800017 	ldw	r2,0(r2)
8111603c:	1000683a 	jmp	r2
81116040:	81116b58 	cmpnei	r4,r16,17837
81116044:	81116c38 	rdprs	r4,r16,17840
81116048:	81116c38 	rdprs	r4,r16,17840
8111604c:	81116b78 	rdprs	r4,r16,17837
81116050:	81116c38 	rdprs	r4,r16,17840
81116054:	81116c38 	rdprs	r4,r16,17840
81116058:	81116c38 	rdprs	r4,r16,17840
8111605c:	81116c38 	rdprs	r4,r16,17840
81116060:	81116c38 	rdprs	r4,r16,17840
81116064:	81116c38 	rdprs	r4,r16,17840
81116068:	811162ec 	andhi	r4,r16,17803
8111606c:	81116a94 	ori	r4,r16,17834
81116070:	81116c38 	rdprs	r4,r16,17840
81116074:	811161b4 	orhi	r4,r16,17798
81116078:	81116314 	ori	r4,r16,17804
8111607c:	81116c38 	rdprs	r4,r16,17840
81116080:	81116354 	ori	r4,r16,17805
81116084:	81116360 	cmpeqi	r4,r16,17805
81116088:	81116360 	cmpeqi	r4,r16,17805
8111608c:	81116360 	cmpeqi	r4,r16,17805
81116090:	81116360 	cmpeqi	r4,r16,17805
81116094:	81116360 	cmpeqi	r4,r16,17805
81116098:	81116360 	cmpeqi	r4,r16,17805
8111609c:	81116360 	cmpeqi	r4,r16,17805
811160a0:	81116360 	cmpeqi	r4,r16,17805
811160a4:	81116360 	cmpeqi	r4,r16,17805
811160a8:	81116c38 	rdprs	r4,r16,17840
811160ac:	81116c38 	rdprs	r4,r16,17840
811160b0:	81116c38 	rdprs	r4,r16,17840
811160b4:	81116c38 	rdprs	r4,r16,17840
811160b8:	81116c38 	rdprs	r4,r16,17840
811160bc:	81116c38 	rdprs	r4,r16,17840
811160c0:	81116c38 	rdprs	r4,r16,17840
811160c4:	81116c38 	rdprs	r4,r16,17840
811160c8:	81116c38 	rdprs	r4,r16,17840
811160cc:	81116c38 	rdprs	r4,r16,17840
811160d0:	81116394 	ori	r4,r16,17806
811160d4:	81116450 	cmplti	r4,r16,17809
811160d8:	81116c38 	rdprs	r4,r16,17840
811160dc:	81116450 	cmplti	r4,r16,17809
811160e0:	81116c38 	rdprs	r4,r16,17840
811160e4:	81116c38 	rdprs	r4,r16,17840
811160e8:	81116c38 	rdprs	r4,r16,17840
811160ec:	81116c38 	rdprs	r4,r16,17840
811160f0:	811164f0 	cmpltui	r4,r16,17811
811160f4:	81116c38 	rdprs	r4,r16,17840
811160f8:	81116c38 	rdprs	r4,r16,17840
811160fc:	811164fc 	xorhi	r4,r16,17811
81116100:	81116c38 	rdprs	r4,r16,17840
81116104:	81116c38 	rdprs	r4,r16,17840
81116108:	81116c38 	rdprs	r4,r16,17840
8111610c:	81116c38 	rdprs	r4,r16,17840
81116110:	81116c38 	rdprs	r4,r16,17840
81116114:	81116974 	orhi	r4,r16,17829
81116118:	81116c38 	rdprs	r4,r16,17840
8111611c:	81116c38 	rdprs	r4,r16,17840
81116120:	811169d4 	ori	r4,r16,17831
81116124:	81116c38 	rdprs	r4,r16,17840
81116128:	81116c38 	rdprs	r4,r16,17840
8111612c:	81116c38 	rdprs	r4,r16,17840
81116130:	81116c38 	rdprs	r4,r16,17840
81116134:	81116c38 	rdprs	r4,r16,17840
81116138:	81116c38 	rdprs	r4,r16,17840
8111613c:	81116c38 	rdprs	r4,r16,17840
81116140:	81116c38 	rdprs	r4,r16,17840
81116144:	81116c38 	rdprs	r4,r16,17840
81116148:	81116c38 	rdprs	r4,r16,17840
8111614c:	81116be4 	muli	r4,r16,17839
81116150:	81116b84 	addi	r4,r16,17838
81116154:	81116450 	cmplti	r4,r16,17809
81116158:	81116450 	cmplti	r4,r16,17809
8111615c:	81116450 	cmplti	r4,r16,17809
81116160:	81116b94 	ori	r4,r16,17838
81116164:	81116b84 	addi	r4,r16,17838
81116168:	81116c38 	rdprs	r4,r16,17840
8111616c:	81116c38 	rdprs	r4,r16,17840
81116170:	81116ba0 	cmpeqi	r4,r16,17838
81116174:	81116c38 	rdprs	r4,r16,17840
81116178:	81116bb0 	cmpltui	r4,r16,17838
8111617c:	81116a84 	addi	r4,r16,17834
81116180:	811161c0 	call	8811161c <__reset+0x20f161c>
81116184:	81116aa4 	muli	r4,r16,17834
81116188:	81116c38 	rdprs	r4,r16,17840
8111618c:	81116ab0 	cmpltui	r4,r16,17834
81116190:	81116c38 	rdprs	r4,r16,17840
81116194:	81116b0c 	andi	r4,r16,17836
81116198:	81116c38 	rdprs	r4,r16,17840
8111619c:	81116c38 	rdprs	r4,r16,17840
811161a0:	81116b1c 	xori	r4,r16,17836
811161a4:	d9003117 	ldw	r4,196(sp)
811161a8:	d8802d15 	stw	r2,180(sp)
811161ac:	0109c83a 	sub	r4,zero,r4
811161b0:	d9003115 	stw	r4,196(sp)
811161b4:	94800114 	ori	r18,r18,4
811161b8:	ac400007 	ldb	r17,0(r21)
811161bc:	003f9706 	br	8111601c <__reset+0xfb0f601c>
811161c0:	00800c04 	movi	r2,48
811161c4:	d9002d17 	ldw	r4,180(sp)
811161c8:	d9402917 	ldw	r5,164(sp)
811161cc:	d8802705 	stb	r2,156(sp)
811161d0:	00801e04 	movi	r2,120
811161d4:	d8802745 	stb	r2,157(sp)
811161d8:	d8002785 	stb	zero,158(sp)
811161dc:	20c00104 	addi	r3,r4,4
811161e0:	24c00017 	ldw	r19,0(r4)
811161e4:	002d883a 	mov	r22,zero
811161e8:	90800094 	ori	r2,r18,2
811161ec:	28029a16 	blt	r5,zero,81116c58 <___vfprintf_internal_r+0xdc8>
811161f0:	00bfdfc4 	movi	r2,-129
811161f4:	90a4703a 	and	r18,r18,r2
811161f8:	d8c02d15 	stw	r3,180(sp)
811161fc:	94800094 	ori	r18,r18,2
81116200:	9802871e 	bne	r19,zero,81116c20 <___vfprintf_internal_r+0xd90>
81116204:	00a04534 	movhi	r2,33044
81116208:	10bf7804 	addi	r2,r2,-544
8111620c:	d8803915 	stw	r2,228(sp)
81116210:	04401e04 	movi	r17,120
81116214:	d8802917 	ldw	r2,164(sp)
81116218:	0039883a 	mov	fp,zero
8111621c:	1001e926 	beq	r2,zero,811169c4 <___vfprintf_internal_r+0xb34>
81116220:	0027883a 	mov	r19,zero
81116224:	002d883a 	mov	r22,zero
81116228:	00020506 	br	81116a40 <___vfprintf_internal_r+0xbb0>
8111622c:	d9002c17 	ldw	r4,176(sp)
81116230:	b80b883a 	mov	r5,r23
81116234:	1119bdc0 	call	81119bdc <__swsetup_r>
81116238:	1005ac1e 	bne	r2,zero,811178ec <___vfprintf_internal_r+0x1a5c>
8111623c:	b880030b 	ldhu	r2,12(r23)
81116240:	00c00284 	movi	r3,10
81116244:	1080068c 	andi	r2,r2,26
81116248:	10ff3c1e 	bne	r2,r3,81115f3c <__reset+0xfb0f5f3c>
8111624c:	b880038f 	ldh	r2,14(r23)
81116250:	103f3a16 	blt	r2,zero,81115f3c <__reset+0xfb0f5f3c>
81116254:	d9c02d17 	ldw	r7,180(sp)
81116258:	d9002c17 	ldw	r4,176(sp)
8111625c:	a80d883a 	mov	r6,r21
81116260:	b80b883a 	mov	r5,r23
81116264:	11180ac0 	call	811180ac <__sbprintf>
81116268:	00001106 	br	811162b0 <___vfprintf_internal_r+0x420>
8111626c:	d9002c17 	ldw	r4,176(sp)
81116270:	d9801e04 	addi	r6,sp,120
81116274:	b80b883a 	mov	r5,r23
81116278:	11220800 	call	81122080 <__sprint_r>
8111627c:	1000081e 	bne	r2,zero,811162a0 <___vfprintf_internal_r+0x410>
81116280:	da000404 	addi	r8,sp,16
81116284:	003f5306 	br	81115fd4 <__reset+0xfb0f5fd4>
81116288:	d8802017 	ldw	r2,128(sp)
8111628c:	10000426 	beq	r2,zero,811162a0 <___vfprintf_internal_r+0x410>
81116290:	d9002c17 	ldw	r4,176(sp)
81116294:	d9801e04 	addi	r6,sp,120
81116298:	b80b883a 	mov	r5,r23
8111629c:	11220800 	call	81122080 <__sprint_r>
811162a0:	b880030b 	ldhu	r2,12(r23)
811162a4:	1080100c 	andi	r2,r2,64
811162a8:	1005901e 	bne	r2,zero,811178ec <___vfprintf_internal_r+0x1a5c>
811162ac:	d8802f17 	ldw	r2,188(sp)
811162b0:	dfc04717 	ldw	ra,284(sp)
811162b4:	df004617 	ldw	fp,280(sp)
811162b8:	ddc04517 	ldw	r23,276(sp)
811162bc:	dd804417 	ldw	r22,272(sp)
811162c0:	dd404317 	ldw	r21,268(sp)
811162c4:	dd004217 	ldw	r20,264(sp)
811162c8:	dcc04117 	ldw	r19,260(sp)
811162cc:	dc804017 	ldw	r18,256(sp)
811162d0:	dc403f17 	ldw	r17,252(sp)
811162d4:	dc003e17 	ldw	r16,248(sp)
811162d8:	dec04804 	addi	sp,sp,288
811162dc:	f800283a 	ret
811162e0:	d9002c17 	ldw	r4,176(sp)
811162e4:	111bc4c0 	call	8111bc4c <__sinit>
811162e8:	003f0406 	br	81115efc <__reset+0xfb0f5efc>
811162ec:	d8802d17 	ldw	r2,180(sp)
811162f0:	d9002d17 	ldw	r4,180(sp)
811162f4:	10800017 	ldw	r2,0(r2)
811162f8:	d8803115 	stw	r2,196(sp)
811162fc:	20800104 	addi	r2,r4,4
81116300:	d9003117 	ldw	r4,196(sp)
81116304:	203fa716 	blt	r4,zero,811161a4 <__reset+0xfb0f61a4>
81116308:	d8802d15 	stw	r2,180(sp)
8111630c:	ac400007 	ldb	r17,0(r21)
81116310:	003f4206 	br	8111601c <__reset+0xfb0f601c>
81116314:	ac400007 	ldb	r17,0(r21)
81116318:	aac00044 	addi	r11,r21,1
8111631c:	8a872826 	beq	r17,r10,81117fc0 <___vfprintf_internal_r+0x2130>
81116320:	88bff404 	addi	r2,r17,-48
81116324:	0009883a 	mov	r4,zero
81116328:	30867d36 	bltu	r6,r2,81117d20 <___vfprintf_internal_r+0x1e90>
8111632c:	5c400007 	ldb	r17,0(r11)
81116330:	210002a4 	muli	r4,r4,10
81116334:	5d400044 	addi	r21,r11,1
81116338:	a817883a 	mov	r11,r21
8111633c:	2089883a 	add	r4,r4,r2
81116340:	88bff404 	addi	r2,r17,-48
81116344:	30bff92e 	bgeu	r6,r2,8111632c <__reset+0xfb0f632c>
81116348:	2005c916 	blt	r4,zero,81117a70 <___vfprintf_internal_r+0x1be0>
8111634c:	d9002915 	stw	r4,164(sp)
81116350:	003f3306 	br	81116020 <__reset+0xfb0f6020>
81116354:	94802014 	ori	r18,r18,128
81116358:	ac400007 	ldb	r17,0(r21)
8111635c:	003f2f06 	br	8111601c <__reset+0xfb0f601c>
81116360:	a809883a 	mov	r4,r21
81116364:	d8003115 	stw	zero,196(sp)
81116368:	88bff404 	addi	r2,r17,-48
8111636c:	0017883a 	mov	r11,zero
81116370:	24400007 	ldb	r17,0(r4)
81116374:	5ac002a4 	muli	r11,r11,10
81116378:	ad400044 	addi	r21,r21,1
8111637c:	a809883a 	mov	r4,r21
81116380:	12d7883a 	add	r11,r2,r11
81116384:	88bff404 	addi	r2,r17,-48
81116388:	30bff92e 	bgeu	r6,r2,81116370 <__reset+0xfb0f6370>
8111638c:	dac03115 	stw	r11,196(sp)
81116390:	003f2306 	br	81116020 <__reset+0xfb0f6020>
81116394:	18c03fcc 	andi	r3,r3,255
81116398:	18072b1e 	bne	r3,zero,81118048 <___vfprintf_internal_r+0x21b8>
8111639c:	94800414 	ori	r18,r18,16
811163a0:	9080080c 	andi	r2,r18,32
811163a4:	10037b26 	beq	r2,zero,81117194 <___vfprintf_internal_r+0x1304>
811163a8:	d9402d17 	ldw	r5,180(sp)
811163ac:	28800117 	ldw	r2,4(r5)
811163b0:	2cc00017 	ldw	r19,0(r5)
811163b4:	29400204 	addi	r5,r5,8
811163b8:	d9402d15 	stw	r5,180(sp)
811163bc:	102d883a 	mov	r22,r2
811163c0:	10044b16 	blt	r2,zero,811174f0 <___vfprintf_internal_r+0x1660>
811163c4:	d9402917 	ldw	r5,164(sp)
811163c8:	df002783 	ldbu	fp,158(sp)
811163cc:	2803bc16 	blt	r5,zero,811172c0 <___vfprintf_internal_r+0x1430>
811163d0:	00ffdfc4 	movi	r3,-129
811163d4:	9d84b03a 	or	r2,r19,r22
811163d8:	90e4703a 	and	r18,r18,r3
811163dc:	10017726 	beq	r2,zero,811169bc <___vfprintf_internal_r+0xb2c>
811163e0:	b0038326 	beq	r22,zero,811171f0 <___vfprintf_internal_r+0x1360>
811163e4:	dc402a15 	stw	r17,168(sp)
811163e8:	dc001e04 	addi	r16,sp,120
811163ec:	b023883a 	mov	r17,r22
811163f0:	402d883a 	mov	r22,r8
811163f4:	9809883a 	mov	r4,r19
811163f8:	880b883a 	mov	r5,r17
811163fc:	01800284 	movi	r6,10
81116400:	000f883a 	mov	r7,zero
81116404:	1124e340 	call	81124e34 <__umoddi3>
81116408:	10800c04 	addi	r2,r2,48
8111640c:	843fffc4 	addi	r16,r16,-1
81116410:	9809883a 	mov	r4,r19
81116414:	880b883a 	mov	r5,r17
81116418:	80800005 	stb	r2,0(r16)
8111641c:	01800284 	movi	r6,10
81116420:	000f883a 	mov	r7,zero
81116424:	11248b40 	call	811248b4 <__udivdi3>
81116428:	1027883a 	mov	r19,r2
8111642c:	10c4b03a 	or	r2,r2,r3
81116430:	1823883a 	mov	r17,r3
81116434:	103fef1e 	bne	r2,zero,811163f4 <__reset+0xfb0f63f4>
81116438:	d8c02817 	ldw	r3,160(sp)
8111643c:	dc402a17 	ldw	r17,168(sp)
81116440:	b011883a 	mov	r8,r22
81116444:	1c07c83a 	sub	r3,r3,r16
81116448:	d8c02e15 	stw	r3,184(sp)
8111644c:	00005906 	br	811165b4 <___vfprintf_internal_r+0x724>
81116450:	18c03fcc 	andi	r3,r3,255
81116454:	1806fa1e 	bne	r3,zero,81118040 <___vfprintf_internal_r+0x21b0>
81116458:	9080020c 	andi	r2,r18,8
8111645c:	10048a26 	beq	r2,zero,81117688 <___vfprintf_internal_r+0x17f8>
81116460:	d8c02d17 	ldw	r3,180(sp)
81116464:	d9002d17 	ldw	r4,180(sp)
81116468:	d9402d17 	ldw	r5,180(sp)
8111646c:	18c00017 	ldw	r3,0(r3)
81116470:	21000117 	ldw	r4,4(r4)
81116474:	29400204 	addi	r5,r5,8
81116478:	d8c03615 	stw	r3,216(sp)
8111647c:	d9003815 	stw	r4,224(sp)
81116480:	d9402d15 	stw	r5,180(sp)
81116484:	d9003617 	ldw	r4,216(sp)
81116488:	d9403817 	ldw	r5,224(sp)
8111648c:	da003d15 	stw	r8,244(sp)
81116490:	04000044 	movi	r16,1
81116494:	111e6e40 	call	8111e6e4 <__fpclassifyd>
81116498:	da003d17 	ldw	r8,244(sp)
8111649c:	14041f1e 	bne	r2,r16,8111751c <___vfprintf_internal_r+0x168c>
811164a0:	d9003617 	ldw	r4,216(sp)
811164a4:	d9403817 	ldw	r5,224(sp)
811164a8:	000d883a 	mov	r6,zero
811164ac:	000f883a 	mov	r7,zero
811164b0:	1126a2c0 	call	81126a2c <__ledf2>
811164b4:	da003d17 	ldw	r8,244(sp)
811164b8:	1005be16 	blt	r2,zero,81117bb4 <___vfprintf_internal_r+0x1d24>
811164bc:	df002783 	ldbu	fp,158(sp)
811164c0:	008011c4 	movi	r2,71
811164c4:	1445330e 	bge	r2,r17,81117994 <___vfprintf_internal_r+0x1b04>
811164c8:	04204534 	movhi	r16,33044
811164cc:	843f7004 	addi	r16,r16,-576
811164d0:	00c000c4 	movi	r3,3
811164d4:	00bfdfc4 	movi	r2,-129
811164d8:	d8c02a15 	stw	r3,168(sp)
811164dc:	90a4703a 	and	r18,r18,r2
811164e0:	d8c02e15 	stw	r3,184(sp)
811164e4:	d8002915 	stw	zero,164(sp)
811164e8:	d8003215 	stw	zero,200(sp)
811164ec:	00003706 	br	811165cc <___vfprintf_internal_r+0x73c>
811164f0:	94800214 	ori	r18,r18,8
811164f4:	ac400007 	ldb	r17,0(r21)
811164f8:	003ec806 	br	8111601c <__reset+0xfb0f601c>
811164fc:	18c03fcc 	andi	r3,r3,255
81116500:	1806db1e 	bne	r3,zero,81118070 <___vfprintf_internal_r+0x21e0>
81116504:	94800414 	ori	r18,r18,16
81116508:	9080080c 	andi	r2,r18,32
8111650c:	1002d826 	beq	r2,zero,81117070 <___vfprintf_internal_r+0x11e0>
81116510:	d9402d17 	ldw	r5,180(sp)
81116514:	d8c02917 	ldw	r3,164(sp)
81116518:	d8002785 	stb	zero,158(sp)
8111651c:	28800204 	addi	r2,r5,8
81116520:	2cc00017 	ldw	r19,0(r5)
81116524:	2d800117 	ldw	r22,4(r5)
81116528:	18048f16 	blt	r3,zero,81117768 <___vfprintf_internal_r+0x18d8>
8111652c:	013fdfc4 	movi	r4,-129
81116530:	9d86b03a 	or	r3,r19,r22
81116534:	d8802d15 	stw	r2,180(sp)
81116538:	9124703a 	and	r18,r18,r4
8111653c:	1802d91e 	bne	r3,zero,811170a4 <___vfprintf_internal_r+0x1214>
81116540:	d8c02917 	ldw	r3,164(sp)
81116544:	0039883a 	mov	fp,zero
81116548:	1805c326 	beq	r3,zero,81117c58 <___vfprintf_internal_r+0x1dc8>
8111654c:	0027883a 	mov	r19,zero
81116550:	002d883a 	mov	r22,zero
81116554:	dc001e04 	addi	r16,sp,120
81116558:	9806d0fa 	srli	r3,r19,3
8111655c:	b008977a 	slli	r4,r22,29
81116560:	b02cd0fa 	srli	r22,r22,3
81116564:	9cc001cc 	andi	r19,r19,7
81116568:	98800c04 	addi	r2,r19,48
8111656c:	843fffc4 	addi	r16,r16,-1
81116570:	20e6b03a 	or	r19,r4,r3
81116574:	80800005 	stb	r2,0(r16)
81116578:	9d86b03a 	or	r3,r19,r22
8111657c:	183ff61e 	bne	r3,zero,81116558 <__reset+0xfb0f6558>
81116580:	90c0004c 	andi	r3,r18,1
81116584:	18013b26 	beq	r3,zero,81116a74 <___vfprintf_internal_r+0xbe4>
81116588:	10803fcc 	andi	r2,r2,255
8111658c:	1080201c 	xori	r2,r2,128
81116590:	10bfe004 	addi	r2,r2,-128
81116594:	00c00c04 	movi	r3,48
81116598:	10c13626 	beq	r2,r3,81116a74 <___vfprintf_internal_r+0xbe4>
8111659c:	80ffffc5 	stb	r3,-1(r16)
811165a0:	d8c02817 	ldw	r3,160(sp)
811165a4:	80bfffc4 	addi	r2,r16,-1
811165a8:	1021883a 	mov	r16,r2
811165ac:	1887c83a 	sub	r3,r3,r2
811165b0:	d8c02e15 	stw	r3,184(sp)
811165b4:	d8802e17 	ldw	r2,184(sp)
811165b8:	d9002917 	ldw	r4,164(sp)
811165bc:	1100010e 	bge	r2,r4,811165c4 <___vfprintf_internal_r+0x734>
811165c0:	2005883a 	mov	r2,r4
811165c4:	d8802a15 	stw	r2,168(sp)
811165c8:	d8003215 	stw	zero,200(sp)
811165cc:	e7003fcc 	andi	fp,fp,255
811165d0:	e700201c 	xori	fp,fp,128
811165d4:	e73fe004 	addi	fp,fp,-128
811165d8:	e0000326 	beq	fp,zero,811165e8 <___vfprintf_internal_r+0x758>
811165dc:	d8c02a17 	ldw	r3,168(sp)
811165e0:	18c00044 	addi	r3,r3,1
811165e4:	d8c02a15 	stw	r3,168(sp)
811165e8:	90c0008c 	andi	r3,r18,2
811165ec:	d8c02b15 	stw	r3,172(sp)
811165f0:	18000326 	beq	r3,zero,81116600 <___vfprintf_internal_r+0x770>
811165f4:	d8c02a17 	ldw	r3,168(sp)
811165f8:	18c00084 	addi	r3,r3,2
811165fc:	d8c02a15 	stw	r3,168(sp)
81116600:	90c0210c 	andi	r3,r18,132
81116604:	d8c03015 	stw	r3,192(sp)
81116608:	1801a31e 	bne	r3,zero,81116c98 <___vfprintf_internal_r+0xe08>
8111660c:	d9003117 	ldw	r4,196(sp)
81116610:	d8c02a17 	ldw	r3,168(sp)
81116614:	20e7c83a 	sub	r19,r4,r3
81116618:	04c19f0e 	bge	zero,r19,81116c98 <___vfprintf_internal_r+0xe08>
8111661c:	02400404 	movi	r9,16
81116620:	d8c02017 	ldw	r3,128(sp)
81116624:	d8801f17 	ldw	r2,124(sp)
81116628:	4cc50d0e 	bge	r9,r19,81117a60 <___vfprintf_internal_r+0x1bd0>
8111662c:	01604534 	movhi	r5,33044
81116630:	297f8b84 	addi	r5,r5,-466
81116634:	dc403b15 	stw	r17,236(sp)
81116638:	d9403515 	stw	r5,212(sp)
8111663c:	9823883a 	mov	r17,r19
81116640:	482d883a 	mov	r22,r9
81116644:	9027883a 	mov	r19,r18
81116648:	070001c4 	movi	fp,7
8111664c:	8025883a 	mov	r18,r16
81116650:	dc002c17 	ldw	r16,176(sp)
81116654:	00000306 	br	81116664 <___vfprintf_internal_r+0x7d4>
81116658:	8c7ffc04 	addi	r17,r17,-16
8111665c:	42000204 	addi	r8,r8,8
81116660:	b440130e 	bge	r22,r17,811166b0 <___vfprintf_internal_r+0x820>
81116664:	01204534 	movhi	r4,33044
81116668:	18c00404 	addi	r3,r3,16
8111666c:	10800044 	addi	r2,r2,1
81116670:	213f8b84 	addi	r4,r4,-466
81116674:	41000015 	stw	r4,0(r8)
81116678:	45800115 	stw	r22,4(r8)
8111667c:	d8c02015 	stw	r3,128(sp)
81116680:	d8801f15 	stw	r2,124(sp)
81116684:	e0bff40e 	bge	fp,r2,81116658 <__reset+0xfb0f6658>
81116688:	d9801e04 	addi	r6,sp,120
8111668c:	b80b883a 	mov	r5,r23
81116690:	8009883a 	mov	r4,r16
81116694:	11220800 	call	81122080 <__sprint_r>
81116698:	103f011e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
8111669c:	8c7ffc04 	addi	r17,r17,-16
811166a0:	d8c02017 	ldw	r3,128(sp)
811166a4:	d8801f17 	ldw	r2,124(sp)
811166a8:	da000404 	addi	r8,sp,16
811166ac:	b47fed16 	blt	r22,r17,81116664 <__reset+0xfb0f6664>
811166b0:	9021883a 	mov	r16,r18
811166b4:	9825883a 	mov	r18,r19
811166b8:	8827883a 	mov	r19,r17
811166bc:	dc403b17 	ldw	r17,236(sp)
811166c0:	d9403517 	ldw	r5,212(sp)
811166c4:	98c7883a 	add	r3,r19,r3
811166c8:	10800044 	addi	r2,r2,1
811166cc:	41400015 	stw	r5,0(r8)
811166d0:	44c00115 	stw	r19,4(r8)
811166d4:	d8c02015 	stw	r3,128(sp)
811166d8:	d8801f15 	stw	r2,124(sp)
811166dc:	010001c4 	movi	r4,7
811166e0:	2082a316 	blt	r4,r2,81117170 <___vfprintf_internal_r+0x12e0>
811166e4:	df002787 	ldb	fp,158(sp)
811166e8:	42000204 	addi	r8,r8,8
811166ec:	e0000c26 	beq	fp,zero,81116720 <___vfprintf_internal_r+0x890>
811166f0:	d8801f17 	ldw	r2,124(sp)
811166f4:	d9002784 	addi	r4,sp,158
811166f8:	18c00044 	addi	r3,r3,1
811166fc:	10800044 	addi	r2,r2,1
81116700:	41000015 	stw	r4,0(r8)
81116704:	01000044 	movi	r4,1
81116708:	41000115 	stw	r4,4(r8)
8111670c:	d8c02015 	stw	r3,128(sp)
81116710:	d8801f15 	stw	r2,124(sp)
81116714:	010001c4 	movi	r4,7
81116718:	20823c16 	blt	r4,r2,8111700c <___vfprintf_internal_r+0x117c>
8111671c:	42000204 	addi	r8,r8,8
81116720:	d8802b17 	ldw	r2,172(sp)
81116724:	10000c26 	beq	r2,zero,81116758 <___vfprintf_internal_r+0x8c8>
81116728:	d8801f17 	ldw	r2,124(sp)
8111672c:	d9002704 	addi	r4,sp,156
81116730:	18c00084 	addi	r3,r3,2
81116734:	10800044 	addi	r2,r2,1
81116738:	41000015 	stw	r4,0(r8)
8111673c:	01000084 	movi	r4,2
81116740:	41000115 	stw	r4,4(r8)
81116744:	d8c02015 	stw	r3,128(sp)
81116748:	d8801f15 	stw	r2,124(sp)
8111674c:	010001c4 	movi	r4,7
81116750:	20823616 	blt	r4,r2,8111702c <___vfprintf_internal_r+0x119c>
81116754:	42000204 	addi	r8,r8,8
81116758:	d9003017 	ldw	r4,192(sp)
8111675c:	00802004 	movi	r2,128
81116760:	20819926 	beq	r4,r2,81116dc8 <___vfprintf_internal_r+0xf38>
81116764:	d9402917 	ldw	r5,164(sp)
81116768:	d8802e17 	ldw	r2,184(sp)
8111676c:	28adc83a 	sub	r22,r5,r2
81116770:	0580310e 	bge	zero,r22,81116838 <___vfprintf_internal_r+0x9a8>
81116774:	07000404 	movi	fp,16
81116778:	d8801f17 	ldw	r2,124(sp)
8111677c:	e584140e 	bge	fp,r22,811177d0 <___vfprintf_internal_r+0x1940>
81116780:	01604534 	movhi	r5,33044
81116784:	297f8784 	addi	r5,r5,-482
81116788:	dc402915 	stw	r17,164(sp)
8111678c:	d9402b15 	stw	r5,172(sp)
81116790:	b023883a 	mov	r17,r22
81116794:	04c001c4 	movi	r19,7
81116798:	a82d883a 	mov	r22,r21
8111679c:	902b883a 	mov	r21,r18
811167a0:	8025883a 	mov	r18,r16
811167a4:	dc002c17 	ldw	r16,176(sp)
811167a8:	00000306 	br	811167b8 <___vfprintf_internal_r+0x928>
811167ac:	8c7ffc04 	addi	r17,r17,-16
811167b0:	42000204 	addi	r8,r8,8
811167b4:	e440110e 	bge	fp,r17,811167fc <___vfprintf_internal_r+0x96c>
811167b8:	18c00404 	addi	r3,r3,16
811167bc:	10800044 	addi	r2,r2,1
811167c0:	45000015 	stw	r20,0(r8)
811167c4:	47000115 	stw	fp,4(r8)
811167c8:	d8c02015 	stw	r3,128(sp)
811167cc:	d8801f15 	stw	r2,124(sp)
811167d0:	98bff60e 	bge	r19,r2,811167ac <__reset+0xfb0f67ac>
811167d4:	d9801e04 	addi	r6,sp,120
811167d8:	b80b883a 	mov	r5,r23
811167dc:	8009883a 	mov	r4,r16
811167e0:	11220800 	call	81122080 <__sprint_r>
811167e4:	103eae1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
811167e8:	8c7ffc04 	addi	r17,r17,-16
811167ec:	d8c02017 	ldw	r3,128(sp)
811167f0:	d8801f17 	ldw	r2,124(sp)
811167f4:	da000404 	addi	r8,sp,16
811167f8:	e47fef16 	blt	fp,r17,811167b8 <__reset+0xfb0f67b8>
811167fc:	9021883a 	mov	r16,r18
81116800:	a825883a 	mov	r18,r21
81116804:	b02b883a 	mov	r21,r22
81116808:	882d883a 	mov	r22,r17
8111680c:	dc402917 	ldw	r17,164(sp)
81116810:	d9002b17 	ldw	r4,172(sp)
81116814:	1d87883a 	add	r3,r3,r22
81116818:	10800044 	addi	r2,r2,1
8111681c:	41000015 	stw	r4,0(r8)
81116820:	45800115 	stw	r22,4(r8)
81116824:	d8c02015 	stw	r3,128(sp)
81116828:	d8801f15 	stw	r2,124(sp)
8111682c:	010001c4 	movi	r4,7
81116830:	2081ee16 	blt	r4,r2,81116fec <___vfprintf_internal_r+0x115c>
81116834:	42000204 	addi	r8,r8,8
81116838:	9080400c 	andi	r2,r18,256
8111683c:	1001181e 	bne	r2,zero,81116ca0 <___vfprintf_internal_r+0xe10>
81116840:	d9402e17 	ldw	r5,184(sp)
81116844:	d8801f17 	ldw	r2,124(sp)
81116848:	44000015 	stw	r16,0(r8)
8111684c:	1947883a 	add	r3,r3,r5
81116850:	10800044 	addi	r2,r2,1
81116854:	41400115 	stw	r5,4(r8)
81116858:	d8c02015 	stw	r3,128(sp)
8111685c:	d8801f15 	stw	r2,124(sp)
81116860:	010001c4 	movi	r4,7
81116864:	2081d316 	blt	r4,r2,81116fb4 <___vfprintf_internal_r+0x1124>
81116868:	42000204 	addi	r8,r8,8
8111686c:	9480010c 	andi	r18,r18,4
81116870:	90003226 	beq	r18,zero,8111693c <___vfprintf_internal_r+0xaac>
81116874:	d9403117 	ldw	r5,196(sp)
81116878:	d8802a17 	ldw	r2,168(sp)
8111687c:	28a1c83a 	sub	r16,r5,r2
81116880:	04002e0e 	bge	zero,r16,8111693c <___vfprintf_internal_r+0xaac>
81116884:	04400404 	movi	r17,16
81116888:	d8801f17 	ldw	r2,124(sp)
8111688c:	8c04a20e 	bge	r17,r16,81117b18 <___vfprintf_internal_r+0x1c88>
81116890:	01604534 	movhi	r5,33044
81116894:	297f8b84 	addi	r5,r5,-466
81116898:	d9403515 	stw	r5,212(sp)
8111689c:	048001c4 	movi	r18,7
811168a0:	dcc02c17 	ldw	r19,176(sp)
811168a4:	00000306 	br	811168b4 <___vfprintf_internal_r+0xa24>
811168a8:	843ffc04 	addi	r16,r16,-16
811168ac:	42000204 	addi	r8,r8,8
811168b0:	8c00130e 	bge	r17,r16,81116900 <___vfprintf_internal_r+0xa70>
811168b4:	01204534 	movhi	r4,33044
811168b8:	18c00404 	addi	r3,r3,16
811168bc:	10800044 	addi	r2,r2,1
811168c0:	213f8b84 	addi	r4,r4,-466
811168c4:	41000015 	stw	r4,0(r8)
811168c8:	44400115 	stw	r17,4(r8)
811168cc:	d8c02015 	stw	r3,128(sp)
811168d0:	d8801f15 	stw	r2,124(sp)
811168d4:	90bff40e 	bge	r18,r2,811168a8 <__reset+0xfb0f68a8>
811168d8:	d9801e04 	addi	r6,sp,120
811168dc:	b80b883a 	mov	r5,r23
811168e0:	9809883a 	mov	r4,r19
811168e4:	11220800 	call	81122080 <__sprint_r>
811168e8:	103e6d1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
811168ec:	843ffc04 	addi	r16,r16,-16
811168f0:	d8c02017 	ldw	r3,128(sp)
811168f4:	d8801f17 	ldw	r2,124(sp)
811168f8:	da000404 	addi	r8,sp,16
811168fc:	8c3fed16 	blt	r17,r16,811168b4 <__reset+0xfb0f68b4>
81116900:	d9403517 	ldw	r5,212(sp)
81116904:	1c07883a 	add	r3,r3,r16
81116908:	10800044 	addi	r2,r2,1
8111690c:	41400015 	stw	r5,0(r8)
81116910:	44000115 	stw	r16,4(r8)
81116914:	d8c02015 	stw	r3,128(sp)
81116918:	d8801f15 	stw	r2,124(sp)
8111691c:	010001c4 	movi	r4,7
81116920:	2080060e 	bge	r4,r2,8111693c <___vfprintf_internal_r+0xaac>
81116924:	d9002c17 	ldw	r4,176(sp)
81116928:	d9801e04 	addi	r6,sp,120
8111692c:	b80b883a 	mov	r5,r23
81116930:	11220800 	call	81122080 <__sprint_r>
81116934:	103e5a1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81116938:	d8c02017 	ldw	r3,128(sp)
8111693c:	d8803117 	ldw	r2,196(sp)
81116940:	d9002a17 	ldw	r4,168(sp)
81116944:	1100010e 	bge	r2,r4,8111694c <___vfprintf_internal_r+0xabc>
81116948:	2005883a 	mov	r2,r4
8111694c:	d9402f17 	ldw	r5,188(sp)
81116950:	288b883a 	add	r5,r5,r2
81116954:	d9402f15 	stw	r5,188(sp)
81116958:	18019e1e 	bne	r3,zero,81116fd4 <___vfprintf_internal_r+0x1144>
8111695c:	a8800007 	ldb	r2,0(r21)
81116960:	d8001f15 	stw	zero,124(sp)
81116964:	da000404 	addi	r8,sp,16
81116968:	103d851e 	bne	r2,zero,81115f80 <__reset+0xfb0f5f80>
8111696c:	a821883a 	mov	r16,r21
81116970:	003d9b06 	br	81115fe0 <__reset+0xfb0f5fe0>
81116974:	18c03fcc 	andi	r3,r3,255
81116978:	1805c11e 	bne	r3,zero,81118080 <___vfprintf_internal_r+0x21f0>
8111697c:	94800414 	ori	r18,r18,16
81116980:	9080080c 	andi	r2,r18,32
81116984:	10020c26 	beq	r2,zero,811171b8 <___vfprintf_internal_r+0x1328>
81116988:	d8802d17 	ldw	r2,180(sp)
8111698c:	d9002917 	ldw	r4,164(sp)
81116990:	d8002785 	stb	zero,158(sp)
81116994:	10c00204 	addi	r3,r2,8
81116998:	14c00017 	ldw	r19,0(r2)
8111699c:	15800117 	ldw	r22,4(r2)
811169a0:	20040f16 	blt	r4,zero,811179e0 <___vfprintf_internal_r+0x1b50>
811169a4:	013fdfc4 	movi	r4,-129
811169a8:	9d84b03a 	or	r2,r19,r22
811169ac:	d8c02d15 	stw	r3,180(sp)
811169b0:	9124703a 	and	r18,r18,r4
811169b4:	0039883a 	mov	fp,zero
811169b8:	103e891e 	bne	r2,zero,811163e0 <__reset+0xfb0f63e0>
811169bc:	d9002917 	ldw	r4,164(sp)
811169c0:	2002c11e 	bne	r4,zero,811174c8 <___vfprintf_internal_r+0x1638>
811169c4:	d8002915 	stw	zero,164(sp)
811169c8:	d8002e15 	stw	zero,184(sp)
811169cc:	dc001e04 	addi	r16,sp,120
811169d0:	003ef806 	br	811165b4 <__reset+0xfb0f65b4>
811169d4:	18c03fcc 	andi	r3,r3,255
811169d8:	18059d1e 	bne	r3,zero,81118050 <___vfprintf_internal_r+0x21c0>
811169dc:	01604534 	movhi	r5,33044
811169e0:	297f7304 	addi	r5,r5,-564
811169e4:	d9403915 	stw	r5,228(sp)
811169e8:	9080080c 	andi	r2,r18,32
811169ec:	10005226 	beq	r2,zero,81116b38 <___vfprintf_internal_r+0xca8>
811169f0:	d8802d17 	ldw	r2,180(sp)
811169f4:	14c00017 	ldw	r19,0(r2)
811169f8:	15800117 	ldw	r22,4(r2)
811169fc:	10800204 	addi	r2,r2,8
81116a00:	d8802d15 	stw	r2,180(sp)
81116a04:	9080004c 	andi	r2,r18,1
81116a08:	10019026 	beq	r2,zero,8111704c <___vfprintf_internal_r+0x11bc>
81116a0c:	9d84b03a 	or	r2,r19,r22
81116a10:	10036926 	beq	r2,zero,811177b8 <___vfprintf_internal_r+0x1928>
81116a14:	d8c02917 	ldw	r3,164(sp)
81116a18:	00800c04 	movi	r2,48
81116a1c:	d8802705 	stb	r2,156(sp)
81116a20:	dc402745 	stb	r17,157(sp)
81116a24:	d8002785 	stb	zero,158(sp)
81116a28:	90800094 	ori	r2,r18,2
81116a2c:	18045d16 	blt	r3,zero,81117ba4 <___vfprintf_internal_r+0x1d14>
81116a30:	00bfdfc4 	movi	r2,-129
81116a34:	90a4703a 	and	r18,r18,r2
81116a38:	94800094 	ori	r18,r18,2
81116a3c:	0039883a 	mov	fp,zero
81116a40:	d9003917 	ldw	r4,228(sp)
81116a44:	dc001e04 	addi	r16,sp,120
81116a48:	988003cc 	andi	r2,r19,15
81116a4c:	b006973a 	slli	r3,r22,28
81116a50:	2085883a 	add	r2,r4,r2
81116a54:	9826d13a 	srli	r19,r19,4
81116a58:	10800003 	ldbu	r2,0(r2)
81116a5c:	b02cd13a 	srli	r22,r22,4
81116a60:	843fffc4 	addi	r16,r16,-1
81116a64:	1ce6b03a 	or	r19,r3,r19
81116a68:	80800005 	stb	r2,0(r16)
81116a6c:	9d84b03a 	or	r2,r19,r22
81116a70:	103ff51e 	bne	r2,zero,81116a48 <__reset+0xfb0f6a48>
81116a74:	d8c02817 	ldw	r3,160(sp)
81116a78:	1c07c83a 	sub	r3,r3,r16
81116a7c:	d8c02e15 	stw	r3,184(sp)
81116a80:	003ecc06 	br	811165b4 <__reset+0xfb0f65b4>
81116a84:	18c03fcc 	andi	r3,r3,255
81116a88:	183e9f26 	beq	r3,zero,81116508 <__reset+0xfb0f6508>
81116a8c:	d9c02785 	stb	r7,158(sp)
81116a90:	003e9d06 	br	81116508 <__reset+0xfb0f6508>
81116a94:	00c00044 	movi	r3,1
81116a98:	01c00ac4 	movi	r7,43
81116a9c:	ac400007 	ldb	r17,0(r21)
81116aa0:	003d5e06 	br	8111601c <__reset+0xfb0f601c>
81116aa4:	94800814 	ori	r18,r18,32
81116aa8:	ac400007 	ldb	r17,0(r21)
81116aac:	003d5b06 	br	8111601c <__reset+0xfb0f601c>
81116ab0:	d8c02d17 	ldw	r3,180(sp)
81116ab4:	d8002785 	stb	zero,158(sp)
81116ab8:	1c000017 	ldw	r16,0(r3)
81116abc:	1cc00104 	addi	r19,r3,4
81116ac0:	80041926 	beq	r16,zero,81117b28 <___vfprintf_internal_r+0x1c98>
81116ac4:	d9002917 	ldw	r4,164(sp)
81116ac8:	2003d016 	blt	r4,zero,81117a0c <___vfprintf_internal_r+0x1b7c>
81116acc:	200d883a 	mov	r6,r4
81116ad0:	000b883a 	mov	r5,zero
81116ad4:	8009883a 	mov	r4,r16
81116ad8:	da003d15 	stw	r8,244(sp)
81116adc:	111ce740 	call	8111ce74 <memchr>
81116ae0:	da003d17 	ldw	r8,244(sp)
81116ae4:	10045426 	beq	r2,zero,81117c38 <___vfprintf_internal_r+0x1da8>
81116ae8:	1405c83a 	sub	r2,r2,r16
81116aec:	d8802e15 	stw	r2,184(sp)
81116af0:	1003cc16 	blt	r2,zero,81117a24 <___vfprintf_internal_r+0x1b94>
81116af4:	df002783 	ldbu	fp,158(sp)
81116af8:	d8802a15 	stw	r2,168(sp)
81116afc:	dcc02d15 	stw	r19,180(sp)
81116b00:	d8002915 	stw	zero,164(sp)
81116b04:	d8003215 	stw	zero,200(sp)
81116b08:	003eb006 	br	811165cc <__reset+0xfb0f65cc>
81116b0c:	18c03fcc 	andi	r3,r3,255
81116b10:	183f9b26 	beq	r3,zero,81116980 <__reset+0xfb0f6980>
81116b14:	d9c02785 	stb	r7,158(sp)
81116b18:	003f9906 	br	81116980 <__reset+0xfb0f6980>
81116b1c:	18c03fcc 	andi	r3,r3,255
81116b20:	1805551e 	bne	r3,zero,81118078 <___vfprintf_internal_r+0x21e8>
81116b24:	01604534 	movhi	r5,33044
81116b28:	297f7804 	addi	r5,r5,-544
81116b2c:	d9403915 	stw	r5,228(sp)
81116b30:	9080080c 	andi	r2,r18,32
81116b34:	103fae1e 	bne	r2,zero,811169f0 <__reset+0xfb0f69f0>
81116b38:	9080040c 	andi	r2,r18,16
81116b3c:	1002de26 	beq	r2,zero,811176b8 <___vfprintf_internal_r+0x1828>
81116b40:	d8c02d17 	ldw	r3,180(sp)
81116b44:	002d883a 	mov	r22,zero
81116b48:	1cc00017 	ldw	r19,0(r3)
81116b4c:	18c00104 	addi	r3,r3,4
81116b50:	d8c02d15 	stw	r3,180(sp)
81116b54:	003fab06 	br	81116a04 <__reset+0xfb0f6a04>
81116b58:	38803fcc 	andi	r2,r7,255
81116b5c:	1080201c 	xori	r2,r2,128
81116b60:	10bfe004 	addi	r2,r2,-128
81116b64:	1002d21e 	bne	r2,zero,811176b0 <___vfprintf_internal_r+0x1820>
81116b68:	00c00044 	movi	r3,1
81116b6c:	01c00804 	movi	r7,32
81116b70:	ac400007 	ldb	r17,0(r21)
81116b74:	003d2906 	br	8111601c <__reset+0xfb0f601c>
81116b78:	94800054 	ori	r18,r18,1
81116b7c:	ac400007 	ldb	r17,0(r21)
81116b80:	003d2606 	br	8111601c <__reset+0xfb0f601c>
81116b84:	18c03fcc 	andi	r3,r3,255
81116b88:	183e0526 	beq	r3,zero,811163a0 <__reset+0xfb0f63a0>
81116b8c:	d9c02785 	stb	r7,158(sp)
81116b90:	003e0306 	br	811163a0 <__reset+0xfb0f63a0>
81116b94:	94801014 	ori	r18,r18,64
81116b98:	ac400007 	ldb	r17,0(r21)
81116b9c:	003d1f06 	br	8111601c <__reset+0xfb0f601c>
81116ba0:	ac400007 	ldb	r17,0(r21)
81116ba4:	8a438726 	beq	r17,r9,811179c4 <___vfprintf_internal_r+0x1b34>
81116ba8:	94800414 	ori	r18,r18,16
81116bac:	003d1b06 	br	8111601c <__reset+0xfb0f601c>
81116bb0:	18c03fcc 	andi	r3,r3,255
81116bb4:	1805341e 	bne	r3,zero,81118088 <___vfprintf_internal_r+0x21f8>
81116bb8:	9080080c 	andi	r2,r18,32
81116bbc:	1002cd26 	beq	r2,zero,811176f4 <___vfprintf_internal_r+0x1864>
81116bc0:	d9402d17 	ldw	r5,180(sp)
81116bc4:	d9002f17 	ldw	r4,188(sp)
81116bc8:	28800017 	ldw	r2,0(r5)
81116bcc:	2007d7fa 	srai	r3,r4,31
81116bd0:	29400104 	addi	r5,r5,4
81116bd4:	d9402d15 	stw	r5,180(sp)
81116bd8:	11000015 	stw	r4,0(r2)
81116bdc:	10c00115 	stw	r3,4(r2)
81116be0:	003ce506 	br	81115f78 <__reset+0xfb0f5f78>
81116be4:	d8c02d17 	ldw	r3,180(sp)
81116be8:	d9002d17 	ldw	r4,180(sp)
81116bec:	d8002785 	stb	zero,158(sp)
81116bf0:	18800017 	ldw	r2,0(r3)
81116bf4:	21000104 	addi	r4,r4,4
81116bf8:	00c00044 	movi	r3,1
81116bfc:	d8c02a15 	stw	r3,168(sp)
81116c00:	d8801405 	stb	r2,80(sp)
81116c04:	d9002d15 	stw	r4,180(sp)
81116c08:	d8c02e15 	stw	r3,184(sp)
81116c0c:	d8002915 	stw	zero,164(sp)
81116c10:	d8003215 	stw	zero,200(sp)
81116c14:	dc001404 	addi	r16,sp,80
81116c18:	0039883a 	mov	fp,zero
81116c1c:	003e7206 	br	811165e8 <__reset+0xfb0f65e8>
81116c20:	01204534 	movhi	r4,33044
81116c24:	213f7804 	addi	r4,r4,-544
81116c28:	0039883a 	mov	fp,zero
81116c2c:	d9003915 	stw	r4,228(sp)
81116c30:	04401e04 	movi	r17,120
81116c34:	003f8206 	br	81116a40 <__reset+0xfb0f6a40>
81116c38:	18c03fcc 	andi	r3,r3,255
81116c3c:	1805061e 	bne	r3,zero,81118058 <___vfprintf_internal_r+0x21c8>
81116c40:	883d9126 	beq	r17,zero,81116288 <__reset+0xfb0f6288>
81116c44:	00c00044 	movi	r3,1
81116c48:	d8c02a15 	stw	r3,168(sp)
81116c4c:	dc401405 	stb	r17,80(sp)
81116c50:	d8002785 	stb	zero,158(sp)
81116c54:	003fec06 	br	81116c08 <__reset+0xfb0f6c08>
81116c58:	01604534 	movhi	r5,33044
81116c5c:	297f7804 	addi	r5,r5,-544
81116c60:	d9403915 	stw	r5,228(sp)
81116c64:	d8c02d15 	stw	r3,180(sp)
81116c68:	1025883a 	mov	r18,r2
81116c6c:	04401e04 	movi	r17,120
81116c70:	9d84b03a 	or	r2,r19,r22
81116c74:	1000fc1e 	bne	r2,zero,81117068 <___vfprintf_internal_r+0x11d8>
81116c78:	0039883a 	mov	fp,zero
81116c7c:	00800084 	movi	r2,2
81116c80:	10803fcc 	andi	r2,r2,255
81116c84:	00c00044 	movi	r3,1
81116c88:	10c20f26 	beq	r2,r3,811174c8 <___vfprintf_internal_r+0x1638>
81116c8c:	00c00084 	movi	r3,2
81116c90:	10fd6326 	beq	r2,r3,81116220 <__reset+0xfb0f6220>
81116c94:	003e2d06 	br	8111654c <__reset+0xfb0f654c>
81116c98:	d8c02017 	ldw	r3,128(sp)
81116c9c:	003e9306 	br	811166ec <__reset+0xfb0f66ec>
81116ca0:	00801944 	movi	r2,101
81116ca4:	14407e0e 	bge	r2,r17,81116ea0 <___vfprintf_internal_r+0x1010>
81116ca8:	d9003617 	ldw	r4,216(sp)
81116cac:	d9403817 	ldw	r5,224(sp)
81116cb0:	000d883a 	mov	r6,zero
81116cb4:	000f883a 	mov	r7,zero
81116cb8:	d8c03c15 	stw	r3,240(sp)
81116cbc:	da003d15 	stw	r8,244(sp)
81116cc0:	11268c80 	call	811268c8 <__eqdf2>
81116cc4:	d8c03c17 	ldw	r3,240(sp)
81116cc8:	da003d17 	ldw	r8,244(sp)
81116ccc:	1000f71e 	bne	r2,zero,811170ac <___vfprintf_internal_r+0x121c>
81116cd0:	d8801f17 	ldw	r2,124(sp)
81116cd4:	01204534 	movhi	r4,33044
81116cd8:	213f7f04 	addi	r4,r4,-516
81116cdc:	18c00044 	addi	r3,r3,1
81116ce0:	10800044 	addi	r2,r2,1
81116ce4:	41000015 	stw	r4,0(r8)
81116ce8:	01000044 	movi	r4,1
81116cec:	41000115 	stw	r4,4(r8)
81116cf0:	d8c02015 	stw	r3,128(sp)
81116cf4:	d8801f15 	stw	r2,124(sp)
81116cf8:	010001c4 	movi	r4,7
81116cfc:	2082b816 	blt	r4,r2,811177e0 <___vfprintf_internal_r+0x1950>
81116d00:	42000204 	addi	r8,r8,8
81116d04:	d8802617 	ldw	r2,152(sp)
81116d08:	d9403317 	ldw	r5,204(sp)
81116d0c:	11400216 	blt	r2,r5,81116d18 <___vfprintf_internal_r+0xe88>
81116d10:	9080004c 	andi	r2,r18,1
81116d14:	103ed526 	beq	r2,zero,8111686c <__reset+0xfb0f686c>
81116d18:	d8803717 	ldw	r2,220(sp)
81116d1c:	d9003417 	ldw	r4,208(sp)
81116d20:	d9403717 	ldw	r5,220(sp)
81116d24:	1887883a 	add	r3,r3,r2
81116d28:	d8801f17 	ldw	r2,124(sp)
81116d2c:	41000015 	stw	r4,0(r8)
81116d30:	41400115 	stw	r5,4(r8)
81116d34:	10800044 	addi	r2,r2,1
81116d38:	d8c02015 	stw	r3,128(sp)
81116d3c:	d8801f15 	stw	r2,124(sp)
81116d40:	010001c4 	movi	r4,7
81116d44:	20832916 	blt	r4,r2,811179ec <___vfprintf_internal_r+0x1b5c>
81116d48:	42000204 	addi	r8,r8,8
81116d4c:	d8803317 	ldw	r2,204(sp)
81116d50:	143fffc4 	addi	r16,r2,-1
81116d54:	043ec50e 	bge	zero,r16,8111686c <__reset+0xfb0f686c>
81116d58:	04400404 	movi	r17,16
81116d5c:	d8801f17 	ldw	r2,124(sp)
81116d60:	8c00880e 	bge	r17,r16,81116f84 <___vfprintf_internal_r+0x10f4>
81116d64:	01604534 	movhi	r5,33044
81116d68:	297f8784 	addi	r5,r5,-482
81116d6c:	d9402b15 	stw	r5,172(sp)
81116d70:	058001c4 	movi	r22,7
81116d74:	dcc02c17 	ldw	r19,176(sp)
81116d78:	00000306 	br	81116d88 <___vfprintf_internal_r+0xef8>
81116d7c:	42000204 	addi	r8,r8,8
81116d80:	843ffc04 	addi	r16,r16,-16
81116d84:	8c00820e 	bge	r17,r16,81116f90 <___vfprintf_internal_r+0x1100>
81116d88:	18c00404 	addi	r3,r3,16
81116d8c:	10800044 	addi	r2,r2,1
81116d90:	45000015 	stw	r20,0(r8)
81116d94:	44400115 	stw	r17,4(r8)
81116d98:	d8c02015 	stw	r3,128(sp)
81116d9c:	d8801f15 	stw	r2,124(sp)
81116da0:	b0bff60e 	bge	r22,r2,81116d7c <__reset+0xfb0f6d7c>
81116da4:	d9801e04 	addi	r6,sp,120
81116da8:	b80b883a 	mov	r5,r23
81116dac:	9809883a 	mov	r4,r19
81116db0:	11220800 	call	81122080 <__sprint_r>
81116db4:	103d3a1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81116db8:	d8c02017 	ldw	r3,128(sp)
81116dbc:	d8801f17 	ldw	r2,124(sp)
81116dc0:	da000404 	addi	r8,sp,16
81116dc4:	003fee06 	br	81116d80 <__reset+0xfb0f6d80>
81116dc8:	d9403117 	ldw	r5,196(sp)
81116dcc:	d8802a17 	ldw	r2,168(sp)
81116dd0:	28adc83a 	sub	r22,r5,r2
81116dd4:	05be630e 	bge	zero,r22,81116764 <__reset+0xfb0f6764>
81116dd8:	07000404 	movi	fp,16
81116ddc:	d8801f17 	ldw	r2,124(sp)
81116de0:	e5838f0e 	bge	fp,r22,81117c20 <___vfprintf_internal_r+0x1d90>
81116de4:	01604534 	movhi	r5,33044
81116de8:	297f8784 	addi	r5,r5,-482
81116dec:	dc403015 	stw	r17,192(sp)
81116df0:	d9402b15 	stw	r5,172(sp)
81116df4:	b023883a 	mov	r17,r22
81116df8:	04c001c4 	movi	r19,7
81116dfc:	a82d883a 	mov	r22,r21
81116e00:	902b883a 	mov	r21,r18
81116e04:	8025883a 	mov	r18,r16
81116e08:	dc002c17 	ldw	r16,176(sp)
81116e0c:	00000306 	br	81116e1c <___vfprintf_internal_r+0xf8c>
81116e10:	8c7ffc04 	addi	r17,r17,-16
81116e14:	42000204 	addi	r8,r8,8
81116e18:	e440110e 	bge	fp,r17,81116e60 <___vfprintf_internal_r+0xfd0>
81116e1c:	18c00404 	addi	r3,r3,16
81116e20:	10800044 	addi	r2,r2,1
81116e24:	45000015 	stw	r20,0(r8)
81116e28:	47000115 	stw	fp,4(r8)
81116e2c:	d8c02015 	stw	r3,128(sp)
81116e30:	d8801f15 	stw	r2,124(sp)
81116e34:	98bff60e 	bge	r19,r2,81116e10 <__reset+0xfb0f6e10>
81116e38:	d9801e04 	addi	r6,sp,120
81116e3c:	b80b883a 	mov	r5,r23
81116e40:	8009883a 	mov	r4,r16
81116e44:	11220800 	call	81122080 <__sprint_r>
81116e48:	103d151e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81116e4c:	8c7ffc04 	addi	r17,r17,-16
81116e50:	d8c02017 	ldw	r3,128(sp)
81116e54:	d8801f17 	ldw	r2,124(sp)
81116e58:	da000404 	addi	r8,sp,16
81116e5c:	e47fef16 	blt	fp,r17,81116e1c <__reset+0xfb0f6e1c>
81116e60:	9021883a 	mov	r16,r18
81116e64:	a825883a 	mov	r18,r21
81116e68:	b02b883a 	mov	r21,r22
81116e6c:	882d883a 	mov	r22,r17
81116e70:	dc403017 	ldw	r17,192(sp)
81116e74:	d9002b17 	ldw	r4,172(sp)
81116e78:	1d87883a 	add	r3,r3,r22
81116e7c:	10800044 	addi	r2,r2,1
81116e80:	41000015 	stw	r4,0(r8)
81116e84:	45800115 	stw	r22,4(r8)
81116e88:	d8c02015 	stw	r3,128(sp)
81116e8c:	d8801f15 	stw	r2,124(sp)
81116e90:	010001c4 	movi	r4,7
81116e94:	20818e16 	blt	r4,r2,811174d0 <___vfprintf_internal_r+0x1640>
81116e98:	42000204 	addi	r8,r8,8
81116e9c:	003e3106 	br	81116764 <__reset+0xfb0f6764>
81116ea0:	d9403317 	ldw	r5,204(sp)
81116ea4:	00800044 	movi	r2,1
81116ea8:	18c00044 	addi	r3,r3,1
81116eac:	1141530e 	bge	r2,r5,811173fc <___vfprintf_internal_r+0x156c>
81116eb0:	dc401f17 	ldw	r17,124(sp)
81116eb4:	00800044 	movi	r2,1
81116eb8:	40800115 	stw	r2,4(r8)
81116ebc:	8c400044 	addi	r17,r17,1
81116ec0:	44000015 	stw	r16,0(r8)
81116ec4:	d8c02015 	stw	r3,128(sp)
81116ec8:	dc401f15 	stw	r17,124(sp)
81116ecc:	008001c4 	movi	r2,7
81116ed0:	14416b16 	blt	r2,r17,81117480 <___vfprintf_internal_r+0x15f0>
81116ed4:	42000204 	addi	r8,r8,8
81116ed8:	d8803717 	ldw	r2,220(sp)
81116edc:	d9003417 	ldw	r4,208(sp)
81116ee0:	8c400044 	addi	r17,r17,1
81116ee4:	10c7883a 	add	r3,r2,r3
81116ee8:	40800115 	stw	r2,4(r8)
81116eec:	41000015 	stw	r4,0(r8)
81116ef0:	d8c02015 	stw	r3,128(sp)
81116ef4:	dc401f15 	stw	r17,124(sp)
81116ef8:	008001c4 	movi	r2,7
81116efc:	14416916 	blt	r2,r17,811174a4 <___vfprintf_internal_r+0x1614>
81116f00:	45800204 	addi	r22,r8,8
81116f04:	d9003617 	ldw	r4,216(sp)
81116f08:	d9403817 	ldw	r5,224(sp)
81116f0c:	000d883a 	mov	r6,zero
81116f10:	000f883a 	mov	r7,zero
81116f14:	d8c03c15 	stw	r3,240(sp)
81116f18:	11268c80 	call	811268c8 <__eqdf2>
81116f1c:	d8c03c17 	ldw	r3,240(sp)
81116f20:	1000bc26 	beq	r2,zero,81117214 <___vfprintf_internal_r+0x1384>
81116f24:	d9403317 	ldw	r5,204(sp)
81116f28:	84000044 	addi	r16,r16,1
81116f2c:	8c400044 	addi	r17,r17,1
81116f30:	28bfffc4 	addi	r2,r5,-1
81116f34:	1887883a 	add	r3,r3,r2
81116f38:	b0800115 	stw	r2,4(r22)
81116f3c:	b4000015 	stw	r16,0(r22)
81116f40:	d8c02015 	stw	r3,128(sp)
81116f44:	dc401f15 	stw	r17,124(sp)
81116f48:	008001c4 	movi	r2,7
81116f4c:	14414316 	blt	r2,r17,8111745c <___vfprintf_internal_r+0x15cc>
81116f50:	b5800204 	addi	r22,r22,8
81116f54:	d9003a17 	ldw	r4,232(sp)
81116f58:	df0022c4 	addi	fp,sp,139
81116f5c:	8c400044 	addi	r17,r17,1
81116f60:	20c7883a 	add	r3,r4,r3
81116f64:	b7000015 	stw	fp,0(r22)
81116f68:	b1000115 	stw	r4,4(r22)
81116f6c:	d8c02015 	stw	r3,128(sp)
81116f70:	dc401f15 	stw	r17,124(sp)
81116f74:	008001c4 	movi	r2,7
81116f78:	14400e16 	blt	r2,r17,81116fb4 <___vfprintf_internal_r+0x1124>
81116f7c:	b2000204 	addi	r8,r22,8
81116f80:	003e3a06 	br	8111686c <__reset+0xfb0f686c>
81116f84:	01204534 	movhi	r4,33044
81116f88:	213f8784 	addi	r4,r4,-482
81116f8c:	d9002b15 	stw	r4,172(sp)
81116f90:	d9002b17 	ldw	r4,172(sp)
81116f94:	1c07883a 	add	r3,r3,r16
81116f98:	44000115 	stw	r16,4(r8)
81116f9c:	41000015 	stw	r4,0(r8)
81116fa0:	10800044 	addi	r2,r2,1
81116fa4:	d8c02015 	stw	r3,128(sp)
81116fa8:	d8801f15 	stw	r2,124(sp)
81116fac:	010001c4 	movi	r4,7
81116fb0:	20be2d0e 	bge	r4,r2,81116868 <__reset+0xfb0f6868>
81116fb4:	d9002c17 	ldw	r4,176(sp)
81116fb8:	d9801e04 	addi	r6,sp,120
81116fbc:	b80b883a 	mov	r5,r23
81116fc0:	11220800 	call	81122080 <__sprint_r>
81116fc4:	103cb61e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81116fc8:	d8c02017 	ldw	r3,128(sp)
81116fcc:	da000404 	addi	r8,sp,16
81116fd0:	003e2606 	br	8111686c <__reset+0xfb0f686c>
81116fd4:	d9002c17 	ldw	r4,176(sp)
81116fd8:	d9801e04 	addi	r6,sp,120
81116fdc:	b80b883a 	mov	r5,r23
81116fe0:	11220800 	call	81122080 <__sprint_r>
81116fe4:	103e5d26 	beq	r2,zero,8111695c <__reset+0xfb0f695c>
81116fe8:	003cad06 	br	811162a0 <__reset+0xfb0f62a0>
81116fec:	d9002c17 	ldw	r4,176(sp)
81116ff0:	d9801e04 	addi	r6,sp,120
81116ff4:	b80b883a 	mov	r5,r23
81116ff8:	11220800 	call	81122080 <__sprint_r>
81116ffc:	103ca81e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117000:	d8c02017 	ldw	r3,128(sp)
81117004:	da000404 	addi	r8,sp,16
81117008:	003e0b06 	br	81116838 <__reset+0xfb0f6838>
8111700c:	d9002c17 	ldw	r4,176(sp)
81117010:	d9801e04 	addi	r6,sp,120
81117014:	b80b883a 	mov	r5,r23
81117018:	11220800 	call	81122080 <__sprint_r>
8111701c:	103ca01e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117020:	d8c02017 	ldw	r3,128(sp)
81117024:	da000404 	addi	r8,sp,16
81117028:	003dbd06 	br	81116720 <__reset+0xfb0f6720>
8111702c:	d9002c17 	ldw	r4,176(sp)
81117030:	d9801e04 	addi	r6,sp,120
81117034:	b80b883a 	mov	r5,r23
81117038:	11220800 	call	81122080 <__sprint_r>
8111703c:	103c981e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117040:	d8c02017 	ldw	r3,128(sp)
81117044:	da000404 	addi	r8,sp,16
81117048:	003dc306 	br	81116758 <__reset+0xfb0f6758>
8111704c:	d8802917 	ldw	r2,164(sp)
81117050:	d8002785 	stb	zero,158(sp)
81117054:	103f0616 	blt	r2,zero,81116c70 <__reset+0xfb0f6c70>
81117058:	00ffdfc4 	movi	r3,-129
8111705c:	9d84b03a 	or	r2,r19,r22
81117060:	90e4703a 	and	r18,r18,r3
81117064:	103c6b26 	beq	r2,zero,81116214 <__reset+0xfb0f6214>
81117068:	0039883a 	mov	fp,zero
8111706c:	003e7406 	br	81116a40 <__reset+0xfb0f6a40>
81117070:	9080040c 	andi	r2,r18,16
81117074:	1001b326 	beq	r2,zero,81117744 <___vfprintf_internal_r+0x18b4>
81117078:	d9002d17 	ldw	r4,180(sp)
8111707c:	d9402917 	ldw	r5,164(sp)
81117080:	d8002785 	stb	zero,158(sp)
81117084:	20800104 	addi	r2,r4,4
81117088:	24c00017 	ldw	r19,0(r4)
8111708c:	002d883a 	mov	r22,zero
81117090:	2801b516 	blt	r5,zero,81117768 <___vfprintf_internal_r+0x18d8>
81117094:	00ffdfc4 	movi	r3,-129
81117098:	d8802d15 	stw	r2,180(sp)
8111709c:	90e4703a 	and	r18,r18,r3
811170a0:	983d2726 	beq	r19,zero,81116540 <__reset+0xfb0f6540>
811170a4:	0039883a 	mov	fp,zero
811170a8:	003d2a06 	br	81116554 <__reset+0xfb0f6554>
811170ac:	dc402617 	ldw	r17,152(sp)
811170b0:	0441d30e 	bge	zero,r17,81117800 <___vfprintf_internal_r+0x1970>
811170b4:	dc403217 	ldw	r17,200(sp)
811170b8:	d8803317 	ldw	r2,204(sp)
811170bc:	1440010e 	bge	r2,r17,811170c4 <___vfprintf_internal_r+0x1234>
811170c0:	1023883a 	mov	r17,r2
811170c4:	04400a0e 	bge	zero,r17,811170f0 <___vfprintf_internal_r+0x1260>
811170c8:	d8801f17 	ldw	r2,124(sp)
811170cc:	1c47883a 	add	r3,r3,r17
811170d0:	44000015 	stw	r16,0(r8)
811170d4:	10800044 	addi	r2,r2,1
811170d8:	44400115 	stw	r17,4(r8)
811170dc:	d8c02015 	stw	r3,128(sp)
811170e0:	d8801f15 	stw	r2,124(sp)
811170e4:	010001c4 	movi	r4,7
811170e8:	20826516 	blt	r4,r2,81117a80 <___vfprintf_internal_r+0x1bf0>
811170ec:	42000204 	addi	r8,r8,8
811170f0:	88026116 	blt	r17,zero,81117a78 <___vfprintf_internal_r+0x1be8>
811170f4:	d9003217 	ldw	r4,200(sp)
811170f8:	2463c83a 	sub	r17,r4,r17
811170fc:	04407b0e 	bge	zero,r17,811172ec <___vfprintf_internal_r+0x145c>
81117100:	05800404 	movi	r22,16
81117104:	d8801f17 	ldw	r2,124(sp)
81117108:	b4419d0e 	bge	r22,r17,81117780 <___vfprintf_internal_r+0x18f0>
8111710c:	01204534 	movhi	r4,33044
81117110:	213f8784 	addi	r4,r4,-482
81117114:	d9002b15 	stw	r4,172(sp)
81117118:	070001c4 	movi	fp,7
8111711c:	dcc02c17 	ldw	r19,176(sp)
81117120:	00000306 	br	81117130 <___vfprintf_internal_r+0x12a0>
81117124:	42000204 	addi	r8,r8,8
81117128:	8c7ffc04 	addi	r17,r17,-16
8111712c:	b441970e 	bge	r22,r17,8111778c <___vfprintf_internal_r+0x18fc>
81117130:	18c00404 	addi	r3,r3,16
81117134:	10800044 	addi	r2,r2,1
81117138:	45000015 	stw	r20,0(r8)
8111713c:	45800115 	stw	r22,4(r8)
81117140:	d8c02015 	stw	r3,128(sp)
81117144:	d8801f15 	stw	r2,124(sp)
81117148:	e0bff60e 	bge	fp,r2,81117124 <__reset+0xfb0f7124>
8111714c:	d9801e04 	addi	r6,sp,120
81117150:	b80b883a 	mov	r5,r23
81117154:	9809883a 	mov	r4,r19
81117158:	11220800 	call	81122080 <__sprint_r>
8111715c:	103c501e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117160:	d8c02017 	ldw	r3,128(sp)
81117164:	d8801f17 	ldw	r2,124(sp)
81117168:	da000404 	addi	r8,sp,16
8111716c:	003fee06 	br	81117128 <__reset+0xfb0f7128>
81117170:	d9002c17 	ldw	r4,176(sp)
81117174:	d9801e04 	addi	r6,sp,120
81117178:	b80b883a 	mov	r5,r23
8111717c:	11220800 	call	81122080 <__sprint_r>
81117180:	103c471e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117184:	d8c02017 	ldw	r3,128(sp)
81117188:	df002787 	ldb	fp,158(sp)
8111718c:	da000404 	addi	r8,sp,16
81117190:	003d5606 	br	811166ec <__reset+0xfb0f66ec>
81117194:	9080040c 	andi	r2,r18,16
81117198:	10016126 	beq	r2,zero,81117720 <___vfprintf_internal_r+0x1890>
8111719c:	d8802d17 	ldw	r2,180(sp)
811171a0:	14c00017 	ldw	r19,0(r2)
811171a4:	10800104 	addi	r2,r2,4
811171a8:	d8802d15 	stw	r2,180(sp)
811171ac:	982dd7fa 	srai	r22,r19,31
811171b0:	b005883a 	mov	r2,r22
811171b4:	003c8206 	br	811163c0 <__reset+0xfb0f63c0>
811171b8:	9080040c 	andi	r2,r18,16
811171bc:	10003526 	beq	r2,zero,81117294 <___vfprintf_internal_r+0x1404>
811171c0:	d9402d17 	ldw	r5,180(sp)
811171c4:	d8c02917 	ldw	r3,164(sp)
811171c8:	d8002785 	stb	zero,158(sp)
811171cc:	28800104 	addi	r2,r5,4
811171d0:	2cc00017 	ldw	r19,0(r5)
811171d4:	002d883a 	mov	r22,zero
811171d8:	18003716 	blt	r3,zero,811172b8 <___vfprintf_internal_r+0x1428>
811171dc:	00ffdfc4 	movi	r3,-129
811171e0:	d8802d15 	stw	r2,180(sp)
811171e4:	90e4703a 	and	r18,r18,r3
811171e8:	0039883a 	mov	fp,zero
811171ec:	983df326 	beq	r19,zero,811169bc <__reset+0xfb0f69bc>
811171f0:	00800244 	movi	r2,9
811171f4:	14fc7b36 	bltu	r2,r19,811163e4 <__reset+0xfb0f63e4>
811171f8:	d8c02817 	ldw	r3,160(sp)
811171fc:	dc001dc4 	addi	r16,sp,119
81117200:	9cc00c04 	addi	r19,r19,48
81117204:	1c07c83a 	sub	r3,r3,r16
81117208:	dcc01dc5 	stb	r19,119(sp)
8111720c:	d8c02e15 	stw	r3,184(sp)
81117210:	003ce806 	br	811165b4 <__reset+0xfb0f65b4>
81117214:	d8803317 	ldw	r2,204(sp)
81117218:	143fffc4 	addi	r16,r2,-1
8111721c:	043f4d0e 	bge	zero,r16,81116f54 <__reset+0xfb0f6f54>
81117220:	07000404 	movi	fp,16
81117224:	e400810e 	bge	fp,r16,8111742c <___vfprintf_internal_r+0x159c>
81117228:	01604534 	movhi	r5,33044
8111722c:	297f8784 	addi	r5,r5,-482
81117230:	d9402b15 	stw	r5,172(sp)
81117234:	01c001c4 	movi	r7,7
81117238:	dcc02c17 	ldw	r19,176(sp)
8111723c:	00000306 	br	8111724c <___vfprintf_internal_r+0x13bc>
81117240:	b5800204 	addi	r22,r22,8
81117244:	843ffc04 	addi	r16,r16,-16
81117248:	e4007b0e 	bge	fp,r16,81117438 <___vfprintf_internal_r+0x15a8>
8111724c:	18c00404 	addi	r3,r3,16
81117250:	8c400044 	addi	r17,r17,1
81117254:	b5000015 	stw	r20,0(r22)
81117258:	b7000115 	stw	fp,4(r22)
8111725c:	d8c02015 	stw	r3,128(sp)
81117260:	dc401f15 	stw	r17,124(sp)
81117264:	3c7ff60e 	bge	r7,r17,81117240 <__reset+0xfb0f7240>
81117268:	d9801e04 	addi	r6,sp,120
8111726c:	b80b883a 	mov	r5,r23
81117270:	9809883a 	mov	r4,r19
81117274:	d9c03c15 	stw	r7,240(sp)
81117278:	11220800 	call	81122080 <__sprint_r>
8111727c:	d9c03c17 	ldw	r7,240(sp)
81117280:	103c071e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117284:	d8c02017 	ldw	r3,128(sp)
81117288:	dc401f17 	ldw	r17,124(sp)
8111728c:	dd800404 	addi	r22,sp,16
81117290:	003fec06 	br	81117244 <__reset+0xfb0f7244>
81117294:	9080100c 	andi	r2,r18,64
81117298:	d8002785 	stb	zero,158(sp)
8111729c:	10010e26 	beq	r2,zero,811176d8 <___vfprintf_internal_r+0x1848>
811172a0:	d9002d17 	ldw	r4,180(sp)
811172a4:	d9402917 	ldw	r5,164(sp)
811172a8:	002d883a 	mov	r22,zero
811172ac:	20800104 	addi	r2,r4,4
811172b0:	24c0000b 	ldhu	r19,0(r4)
811172b4:	283fc90e 	bge	r5,zero,811171dc <__reset+0xfb0f71dc>
811172b8:	d8802d15 	stw	r2,180(sp)
811172bc:	0039883a 	mov	fp,zero
811172c0:	9d84b03a 	or	r2,r19,r22
811172c4:	103c461e 	bne	r2,zero,811163e0 <__reset+0xfb0f63e0>
811172c8:	00800044 	movi	r2,1
811172cc:	003e6c06 	br	81116c80 <__reset+0xfb0f6c80>
811172d0:	d9002c17 	ldw	r4,176(sp)
811172d4:	d9801e04 	addi	r6,sp,120
811172d8:	b80b883a 	mov	r5,r23
811172dc:	11220800 	call	81122080 <__sprint_r>
811172e0:	103bef1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
811172e4:	d8c02017 	ldw	r3,128(sp)
811172e8:	da000404 	addi	r8,sp,16
811172ec:	d9003217 	ldw	r4,200(sp)
811172f0:	d8802617 	ldw	r2,152(sp)
811172f4:	d9403317 	ldw	r5,204(sp)
811172f8:	8123883a 	add	r17,r16,r4
811172fc:	11400216 	blt	r2,r5,81117308 <___vfprintf_internal_r+0x1478>
81117300:	9100004c 	andi	r4,r18,1
81117304:	20000d26 	beq	r4,zero,8111733c <___vfprintf_internal_r+0x14ac>
81117308:	d9003717 	ldw	r4,220(sp)
8111730c:	d9403417 	ldw	r5,208(sp)
81117310:	1907883a 	add	r3,r3,r4
81117314:	d9001f17 	ldw	r4,124(sp)
81117318:	41400015 	stw	r5,0(r8)
8111731c:	d9403717 	ldw	r5,220(sp)
81117320:	21000044 	addi	r4,r4,1
81117324:	d8c02015 	stw	r3,128(sp)
81117328:	41400115 	stw	r5,4(r8)
8111732c:	d9001f15 	stw	r4,124(sp)
81117330:	014001c4 	movi	r5,7
81117334:	2901e816 	blt	r5,r4,81117ad8 <___vfprintf_internal_r+0x1c48>
81117338:	42000204 	addi	r8,r8,8
8111733c:	d9003317 	ldw	r4,204(sp)
81117340:	8121883a 	add	r16,r16,r4
81117344:	2085c83a 	sub	r2,r4,r2
81117348:	8461c83a 	sub	r16,r16,r17
8111734c:	1400010e 	bge	r2,r16,81117354 <___vfprintf_internal_r+0x14c4>
81117350:	1021883a 	mov	r16,r2
81117354:	04000a0e 	bge	zero,r16,81117380 <___vfprintf_internal_r+0x14f0>
81117358:	d9001f17 	ldw	r4,124(sp)
8111735c:	1c07883a 	add	r3,r3,r16
81117360:	44400015 	stw	r17,0(r8)
81117364:	21000044 	addi	r4,r4,1
81117368:	44000115 	stw	r16,4(r8)
8111736c:	d8c02015 	stw	r3,128(sp)
81117370:	d9001f15 	stw	r4,124(sp)
81117374:	014001c4 	movi	r5,7
81117378:	2901fb16 	blt	r5,r4,81117b68 <___vfprintf_internal_r+0x1cd8>
8111737c:	42000204 	addi	r8,r8,8
81117380:	8001f716 	blt	r16,zero,81117b60 <___vfprintf_internal_r+0x1cd0>
81117384:	1421c83a 	sub	r16,r2,r16
81117388:	043d380e 	bge	zero,r16,8111686c <__reset+0xfb0f686c>
8111738c:	04400404 	movi	r17,16
81117390:	d8801f17 	ldw	r2,124(sp)
81117394:	8c3efb0e 	bge	r17,r16,81116f84 <__reset+0xfb0f6f84>
81117398:	01604534 	movhi	r5,33044
8111739c:	297f8784 	addi	r5,r5,-482
811173a0:	d9402b15 	stw	r5,172(sp)
811173a4:	058001c4 	movi	r22,7
811173a8:	dcc02c17 	ldw	r19,176(sp)
811173ac:	00000306 	br	811173bc <___vfprintf_internal_r+0x152c>
811173b0:	42000204 	addi	r8,r8,8
811173b4:	843ffc04 	addi	r16,r16,-16
811173b8:	8c3ef50e 	bge	r17,r16,81116f90 <__reset+0xfb0f6f90>
811173bc:	18c00404 	addi	r3,r3,16
811173c0:	10800044 	addi	r2,r2,1
811173c4:	45000015 	stw	r20,0(r8)
811173c8:	44400115 	stw	r17,4(r8)
811173cc:	d8c02015 	stw	r3,128(sp)
811173d0:	d8801f15 	stw	r2,124(sp)
811173d4:	b0bff60e 	bge	r22,r2,811173b0 <__reset+0xfb0f73b0>
811173d8:	d9801e04 	addi	r6,sp,120
811173dc:	b80b883a 	mov	r5,r23
811173e0:	9809883a 	mov	r4,r19
811173e4:	11220800 	call	81122080 <__sprint_r>
811173e8:	103bad1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
811173ec:	d8c02017 	ldw	r3,128(sp)
811173f0:	d8801f17 	ldw	r2,124(sp)
811173f4:	da000404 	addi	r8,sp,16
811173f8:	003fee06 	br	811173b4 <__reset+0xfb0f73b4>
811173fc:	9088703a 	and	r4,r18,r2
81117400:	203eab1e 	bne	r4,zero,81116eb0 <__reset+0xfb0f6eb0>
81117404:	dc401f17 	ldw	r17,124(sp)
81117408:	40800115 	stw	r2,4(r8)
8111740c:	44000015 	stw	r16,0(r8)
81117410:	8c400044 	addi	r17,r17,1
81117414:	d8c02015 	stw	r3,128(sp)
81117418:	dc401f15 	stw	r17,124(sp)
8111741c:	008001c4 	movi	r2,7
81117420:	14400e16 	blt	r2,r17,8111745c <___vfprintf_internal_r+0x15cc>
81117424:	45800204 	addi	r22,r8,8
81117428:	003eca06 	br	81116f54 <__reset+0xfb0f6f54>
8111742c:	01204534 	movhi	r4,33044
81117430:	213f8784 	addi	r4,r4,-482
81117434:	d9002b15 	stw	r4,172(sp)
81117438:	d8802b17 	ldw	r2,172(sp)
8111743c:	1c07883a 	add	r3,r3,r16
81117440:	8c400044 	addi	r17,r17,1
81117444:	b0800015 	stw	r2,0(r22)
81117448:	b4000115 	stw	r16,4(r22)
8111744c:	d8c02015 	stw	r3,128(sp)
81117450:	dc401f15 	stw	r17,124(sp)
81117454:	008001c4 	movi	r2,7
81117458:	147ebd0e 	bge	r2,r17,81116f50 <__reset+0xfb0f6f50>
8111745c:	d9002c17 	ldw	r4,176(sp)
81117460:	d9801e04 	addi	r6,sp,120
81117464:	b80b883a 	mov	r5,r23
81117468:	11220800 	call	81122080 <__sprint_r>
8111746c:	103b8c1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117470:	d8c02017 	ldw	r3,128(sp)
81117474:	dc401f17 	ldw	r17,124(sp)
81117478:	dd800404 	addi	r22,sp,16
8111747c:	003eb506 	br	81116f54 <__reset+0xfb0f6f54>
81117480:	d9002c17 	ldw	r4,176(sp)
81117484:	d9801e04 	addi	r6,sp,120
81117488:	b80b883a 	mov	r5,r23
8111748c:	11220800 	call	81122080 <__sprint_r>
81117490:	103b831e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117494:	d8c02017 	ldw	r3,128(sp)
81117498:	dc401f17 	ldw	r17,124(sp)
8111749c:	da000404 	addi	r8,sp,16
811174a0:	003e8d06 	br	81116ed8 <__reset+0xfb0f6ed8>
811174a4:	d9002c17 	ldw	r4,176(sp)
811174a8:	d9801e04 	addi	r6,sp,120
811174ac:	b80b883a 	mov	r5,r23
811174b0:	11220800 	call	81122080 <__sprint_r>
811174b4:	103b7a1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
811174b8:	d8c02017 	ldw	r3,128(sp)
811174bc:	dc401f17 	ldw	r17,124(sp)
811174c0:	dd800404 	addi	r22,sp,16
811174c4:	003e8f06 	br	81116f04 <__reset+0xfb0f6f04>
811174c8:	0027883a 	mov	r19,zero
811174cc:	003f4a06 	br	811171f8 <__reset+0xfb0f71f8>
811174d0:	d9002c17 	ldw	r4,176(sp)
811174d4:	d9801e04 	addi	r6,sp,120
811174d8:	b80b883a 	mov	r5,r23
811174dc:	11220800 	call	81122080 <__sprint_r>
811174e0:	103b6f1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
811174e4:	d8c02017 	ldw	r3,128(sp)
811174e8:	da000404 	addi	r8,sp,16
811174ec:	003c9d06 	br	81116764 <__reset+0xfb0f6764>
811174f0:	04e7c83a 	sub	r19,zero,r19
811174f4:	9804c03a 	cmpne	r2,r19,zero
811174f8:	05adc83a 	sub	r22,zero,r22
811174fc:	b0adc83a 	sub	r22,r22,r2
81117500:	d8802917 	ldw	r2,164(sp)
81117504:	07000b44 	movi	fp,45
81117508:	df002785 	stb	fp,158(sp)
8111750c:	10017b16 	blt	r2,zero,81117afc <___vfprintf_internal_r+0x1c6c>
81117510:	00bfdfc4 	movi	r2,-129
81117514:	90a4703a 	and	r18,r18,r2
81117518:	003bb106 	br	811163e0 <__reset+0xfb0f63e0>
8111751c:	d9003617 	ldw	r4,216(sp)
81117520:	d9403817 	ldw	r5,224(sp)
81117524:	da003d15 	stw	r8,244(sp)
81117528:	111e6e40 	call	8111e6e4 <__fpclassifyd>
8111752c:	da003d17 	ldw	r8,244(sp)
81117530:	1000f026 	beq	r2,zero,811178f4 <___vfprintf_internal_r+0x1a64>
81117534:	d9002917 	ldw	r4,164(sp)
81117538:	05bff7c4 	movi	r22,-33
8111753c:	00bfffc4 	movi	r2,-1
81117540:	8dac703a 	and	r22,r17,r22
81117544:	20820026 	beq	r4,r2,81117d48 <___vfprintf_internal_r+0x1eb8>
81117548:	008011c4 	movi	r2,71
8111754c:	b081f726 	beq	r22,r2,81117d2c <___vfprintf_internal_r+0x1e9c>
81117550:	d9003817 	ldw	r4,224(sp)
81117554:	90c04014 	ori	r3,r18,256
81117558:	d8c02b15 	stw	r3,172(sp)
8111755c:	20021516 	blt	r4,zero,81117db4 <___vfprintf_internal_r+0x1f24>
81117560:	dcc03817 	ldw	r19,224(sp)
81117564:	d8002a05 	stb	zero,168(sp)
81117568:	00801984 	movi	r2,102
8111756c:	8881f926 	beq	r17,r2,81117d54 <___vfprintf_internal_r+0x1ec4>
81117570:	00801184 	movi	r2,70
81117574:	88821c26 	beq	r17,r2,81117de8 <___vfprintf_internal_r+0x1f58>
81117578:	00801144 	movi	r2,69
8111757c:	b081ef26 	beq	r22,r2,81117d3c <___vfprintf_internal_r+0x1eac>
81117580:	d8c02917 	ldw	r3,164(sp)
81117584:	d8802104 	addi	r2,sp,132
81117588:	d8800315 	stw	r2,12(sp)
8111758c:	d9403617 	ldw	r5,216(sp)
81117590:	d8802504 	addi	r2,sp,148
81117594:	d9002c17 	ldw	r4,176(sp)
81117598:	d8800215 	stw	r2,8(sp)
8111759c:	d8802604 	addi	r2,sp,152
811175a0:	d8c00015 	stw	r3,0(sp)
811175a4:	d8800115 	stw	r2,4(sp)
811175a8:	01c00084 	movi	r7,2
811175ac:	980d883a 	mov	r6,r19
811175b0:	d8c03c15 	stw	r3,240(sp)
811175b4:	da003d15 	stw	r8,244(sp)
811175b8:	1119f9c0 	call	81119f9c <_dtoa_r>
811175bc:	1021883a 	mov	r16,r2
811175c0:	008019c4 	movi	r2,103
811175c4:	d8c03c17 	ldw	r3,240(sp)
811175c8:	da003d17 	ldw	r8,244(sp)
811175cc:	88817126 	beq	r17,r2,81117b94 <___vfprintf_internal_r+0x1d04>
811175d0:	008011c4 	movi	r2,71
811175d4:	88829226 	beq	r17,r2,81118020 <___vfprintf_internal_r+0x2190>
811175d8:	80f9883a 	add	fp,r16,r3
811175dc:	d9003617 	ldw	r4,216(sp)
811175e0:	000d883a 	mov	r6,zero
811175e4:	000f883a 	mov	r7,zero
811175e8:	980b883a 	mov	r5,r19
811175ec:	da003d15 	stw	r8,244(sp)
811175f0:	11268c80 	call	811268c8 <__eqdf2>
811175f4:	da003d17 	ldw	r8,244(sp)
811175f8:	10018d26 	beq	r2,zero,81117c30 <___vfprintf_internal_r+0x1da0>
811175fc:	d8802117 	ldw	r2,132(sp)
81117600:	1700062e 	bgeu	r2,fp,8111761c <___vfprintf_internal_r+0x178c>
81117604:	01000c04 	movi	r4,48
81117608:	10c00044 	addi	r3,r2,1
8111760c:	d8c02115 	stw	r3,132(sp)
81117610:	11000005 	stb	r4,0(r2)
81117614:	d8802117 	ldw	r2,132(sp)
81117618:	173ffb36 	bltu	r2,fp,81117608 <__reset+0xfb0f7608>
8111761c:	1405c83a 	sub	r2,r2,r16
81117620:	d8803315 	stw	r2,204(sp)
81117624:	008011c4 	movi	r2,71
81117628:	b0817626 	beq	r22,r2,81117c04 <___vfprintf_internal_r+0x1d74>
8111762c:	00801944 	movi	r2,101
81117630:	1442810e 	bge	r2,r17,81118038 <___vfprintf_internal_r+0x21a8>
81117634:	d8c02617 	ldw	r3,152(sp)
81117638:	00801984 	movi	r2,102
8111763c:	d8c03215 	stw	r3,200(sp)
81117640:	8881fe26 	beq	r17,r2,81117e3c <___vfprintf_internal_r+0x1fac>
81117644:	d8c03217 	ldw	r3,200(sp)
81117648:	d9003317 	ldw	r4,204(sp)
8111764c:	1901dd16 	blt	r3,r4,81117dc4 <___vfprintf_internal_r+0x1f34>
81117650:	9480004c 	andi	r18,r18,1
81117654:	90022b1e 	bne	r18,zero,81117f04 <___vfprintf_internal_r+0x2074>
81117658:	1805883a 	mov	r2,r3
8111765c:	18028016 	blt	r3,zero,81118060 <___vfprintf_internal_r+0x21d0>
81117660:	d8c03217 	ldw	r3,200(sp)
81117664:	044019c4 	movi	r17,103
81117668:	d8c02e15 	stw	r3,184(sp)
8111766c:	df002a07 	ldb	fp,168(sp)
81117670:	e001531e 	bne	fp,zero,81117bc0 <___vfprintf_internal_r+0x1d30>
81117674:	df002783 	ldbu	fp,158(sp)
81117678:	d8802a15 	stw	r2,168(sp)
8111767c:	dc802b17 	ldw	r18,172(sp)
81117680:	d8002915 	stw	zero,164(sp)
81117684:	003bd106 	br	811165cc <__reset+0xfb0f65cc>
81117688:	d8802d17 	ldw	r2,180(sp)
8111768c:	d8c02d17 	ldw	r3,180(sp)
81117690:	d9002d17 	ldw	r4,180(sp)
81117694:	10800017 	ldw	r2,0(r2)
81117698:	18c00117 	ldw	r3,4(r3)
8111769c:	21000204 	addi	r4,r4,8
811176a0:	d8803615 	stw	r2,216(sp)
811176a4:	d8c03815 	stw	r3,224(sp)
811176a8:	d9002d15 	stw	r4,180(sp)
811176ac:	003b7506 	br	81116484 <__reset+0xfb0f6484>
811176b0:	ac400007 	ldb	r17,0(r21)
811176b4:	003a5906 	br	8111601c <__reset+0xfb0f601c>
811176b8:	9080100c 	andi	r2,r18,64
811176bc:	1000a826 	beq	r2,zero,81117960 <___vfprintf_internal_r+0x1ad0>
811176c0:	d9002d17 	ldw	r4,180(sp)
811176c4:	002d883a 	mov	r22,zero
811176c8:	24c0000b 	ldhu	r19,0(r4)
811176cc:	21000104 	addi	r4,r4,4
811176d0:	d9002d15 	stw	r4,180(sp)
811176d4:	003ccb06 	br	81116a04 <__reset+0xfb0f6a04>
811176d8:	d8c02d17 	ldw	r3,180(sp)
811176dc:	d9002917 	ldw	r4,164(sp)
811176e0:	002d883a 	mov	r22,zero
811176e4:	18800104 	addi	r2,r3,4
811176e8:	1cc00017 	ldw	r19,0(r3)
811176ec:	203ebb0e 	bge	r4,zero,811171dc <__reset+0xfb0f71dc>
811176f0:	003ef106 	br	811172b8 <__reset+0xfb0f72b8>
811176f4:	9080040c 	andi	r2,r18,16
811176f8:	1000921e 	bne	r2,zero,81117944 <___vfprintf_internal_r+0x1ab4>
811176fc:	9480100c 	andi	r18,r18,64
81117700:	90013926 	beq	r18,zero,81117be8 <___vfprintf_internal_r+0x1d58>
81117704:	d9002d17 	ldw	r4,180(sp)
81117708:	d9402f17 	ldw	r5,188(sp)
8111770c:	20800017 	ldw	r2,0(r4)
81117710:	21000104 	addi	r4,r4,4
81117714:	d9002d15 	stw	r4,180(sp)
81117718:	1140000d 	sth	r5,0(r2)
8111771c:	003a1606 	br	81115f78 <__reset+0xfb0f5f78>
81117720:	9080100c 	andi	r2,r18,64
81117724:	10008026 	beq	r2,zero,81117928 <___vfprintf_internal_r+0x1a98>
81117728:	d8c02d17 	ldw	r3,180(sp)
8111772c:	1cc0000f 	ldh	r19,0(r3)
81117730:	18c00104 	addi	r3,r3,4
81117734:	d8c02d15 	stw	r3,180(sp)
81117738:	982dd7fa 	srai	r22,r19,31
8111773c:	b005883a 	mov	r2,r22
81117740:	003b1f06 	br	811163c0 <__reset+0xfb0f63c0>
81117744:	9080100c 	andi	r2,r18,64
81117748:	d8002785 	stb	zero,158(sp)
8111774c:	10008a1e 	bne	r2,zero,81117978 <___vfprintf_internal_r+0x1ae8>
81117750:	d9402d17 	ldw	r5,180(sp)
81117754:	d8c02917 	ldw	r3,164(sp)
81117758:	002d883a 	mov	r22,zero
8111775c:	28800104 	addi	r2,r5,4
81117760:	2cc00017 	ldw	r19,0(r5)
81117764:	183e4b0e 	bge	r3,zero,81117094 <__reset+0xfb0f7094>
81117768:	9d86b03a 	or	r3,r19,r22
8111776c:	d8802d15 	stw	r2,180(sp)
81117770:	183e4c1e 	bne	r3,zero,811170a4 <__reset+0xfb0f70a4>
81117774:	0039883a 	mov	fp,zero
81117778:	0005883a 	mov	r2,zero
8111777c:	003d4006 	br	81116c80 <__reset+0xfb0f6c80>
81117780:	01604534 	movhi	r5,33044
81117784:	297f8784 	addi	r5,r5,-482
81117788:	d9402b15 	stw	r5,172(sp)
8111778c:	d9402b17 	ldw	r5,172(sp)
81117790:	1c47883a 	add	r3,r3,r17
81117794:	10800044 	addi	r2,r2,1
81117798:	41400015 	stw	r5,0(r8)
8111779c:	44400115 	stw	r17,4(r8)
811177a0:	d8c02015 	stw	r3,128(sp)
811177a4:	d8801f15 	stw	r2,124(sp)
811177a8:	010001c4 	movi	r4,7
811177ac:	20bec816 	blt	r4,r2,811172d0 <__reset+0xfb0f72d0>
811177b0:	42000204 	addi	r8,r8,8
811177b4:	003ecd06 	br	811172ec <__reset+0xfb0f72ec>
811177b8:	d9002917 	ldw	r4,164(sp)
811177bc:	d8002785 	stb	zero,158(sp)
811177c0:	203d2d16 	blt	r4,zero,81116c78 <__reset+0xfb0f6c78>
811177c4:	00bfdfc4 	movi	r2,-129
811177c8:	90a4703a 	and	r18,r18,r2
811177cc:	003a9106 	br	81116214 <__reset+0xfb0f6214>
811177d0:	01204534 	movhi	r4,33044
811177d4:	213f8784 	addi	r4,r4,-482
811177d8:	d9002b15 	stw	r4,172(sp)
811177dc:	003c0c06 	br	81116810 <__reset+0xfb0f6810>
811177e0:	d9002c17 	ldw	r4,176(sp)
811177e4:	d9801e04 	addi	r6,sp,120
811177e8:	b80b883a 	mov	r5,r23
811177ec:	11220800 	call	81122080 <__sprint_r>
811177f0:	103aab1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
811177f4:	d8c02017 	ldw	r3,128(sp)
811177f8:	da000404 	addi	r8,sp,16
811177fc:	003d4106 	br	81116d04 <__reset+0xfb0f6d04>
81117800:	d8801f17 	ldw	r2,124(sp)
81117804:	01604534 	movhi	r5,33044
81117808:	01000044 	movi	r4,1
8111780c:	18c00044 	addi	r3,r3,1
81117810:	10800044 	addi	r2,r2,1
81117814:	297f7f04 	addi	r5,r5,-516
81117818:	41000115 	stw	r4,4(r8)
8111781c:	41400015 	stw	r5,0(r8)
81117820:	d8c02015 	stw	r3,128(sp)
81117824:	d8801f15 	stw	r2,124(sp)
81117828:	010001c4 	movi	r4,7
8111782c:	20805c16 	blt	r4,r2,811179a0 <___vfprintf_internal_r+0x1b10>
81117830:	42000204 	addi	r8,r8,8
81117834:	8800041e 	bne	r17,zero,81117848 <___vfprintf_internal_r+0x19b8>
81117838:	d8803317 	ldw	r2,204(sp)
8111783c:	1000021e 	bne	r2,zero,81117848 <___vfprintf_internal_r+0x19b8>
81117840:	9080004c 	andi	r2,r18,1
81117844:	103c0926 	beq	r2,zero,8111686c <__reset+0xfb0f686c>
81117848:	d9003717 	ldw	r4,220(sp)
8111784c:	d8801f17 	ldw	r2,124(sp)
81117850:	d9403417 	ldw	r5,208(sp)
81117854:	20c7883a 	add	r3,r4,r3
81117858:	10800044 	addi	r2,r2,1
8111785c:	41000115 	stw	r4,4(r8)
81117860:	41400015 	stw	r5,0(r8)
81117864:	d8c02015 	stw	r3,128(sp)
81117868:	d8801f15 	stw	r2,124(sp)
8111786c:	010001c4 	movi	r4,7
81117870:	20812116 	blt	r4,r2,81117cf8 <___vfprintf_internal_r+0x1e68>
81117874:	42000204 	addi	r8,r8,8
81117878:	0463c83a 	sub	r17,zero,r17
8111787c:	0440730e 	bge	zero,r17,81117a4c <___vfprintf_internal_r+0x1bbc>
81117880:	05800404 	movi	r22,16
81117884:	b440860e 	bge	r22,r17,81117aa0 <___vfprintf_internal_r+0x1c10>
81117888:	01604534 	movhi	r5,33044
8111788c:	297f8784 	addi	r5,r5,-482
81117890:	d9402b15 	stw	r5,172(sp)
81117894:	070001c4 	movi	fp,7
81117898:	dcc02c17 	ldw	r19,176(sp)
8111789c:	00000306 	br	811178ac <___vfprintf_internal_r+0x1a1c>
811178a0:	42000204 	addi	r8,r8,8
811178a4:	8c7ffc04 	addi	r17,r17,-16
811178a8:	b440800e 	bge	r22,r17,81117aac <___vfprintf_internal_r+0x1c1c>
811178ac:	18c00404 	addi	r3,r3,16
811178b0:	10800044 	addi	r2,r2,1
811178b4:	45000015 	stw	r20,0(r8)
811178b8:	45800115 	stw	r22,4(r8)
811178bc:	d8c02015 	stw	r3,128(sp)
811178c0:	d8801f15 	stw	r2,124(sp)
811178c4:	e0bff60e 	bge	fp,r2,811178a0 <__reset+0xfb0f78a0>
811178c8:	d9801e04 	addi	r6,sp,120
811178cc:	b80b883a 	mov	r5,r23
811178d0:	9809883a 	mov	r4,r19
811178d4:	11220800 	call	81122080 <__sprint_r>
811178d8:	103a711e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
811178dc:	d8c02017 	ldw	r3,128(sp)
811178e0:	d8801f17 	ldw	r2,124(sp)
811178e4:	da000404 	addi	r8,sp,16
811178e8:	003fee06 	br	811178a4 <__reset+0xfb0f78a4>
811178ec:	00bfffc4 	movi	r2,-1
811178f0:	003a6f06 	br	811162b0 <__reset+0xfb0f62b0>
811178f4:	008011c4 	movi	r2,71
811178f8:	1440b816 	blt	r2,r17,81117bdc <___vfprintf_internal_r+0x1d4c>
811178fc:	04204534 	movhi	r16,33044
81117900:	843f7104 	addi	r16,r16,-572
81117904:	00c000c4 	movi	r3,3
81117908:	00bfdfc4 	movi	r2,-129
8111790c:	d8c02a15 	stw	r3,168(sp)
81117910:	90a4703a 	and	r18,r18,r2
81117914:	df002783 	ldbu	fp,158(sp)
81117918:	d8c02e15 	stw	r3,184(sp)
8111791c:	d8002915 	stw	zero,164(sp)
81117920:	d8003215 	stw	zero,200(sp)
81117924:	003b2906 	br	811165cc <__reset+0xfb0f65cc>
81117928:	d9002d17 	ldw	r4,180(sp)
8111792c:	24c00017 	ldw	r19,0(r4)
81117930:	21000104 	addi	r4,r4,4
81117934:	d9002d15 	stw	r4,180(sp)
81117938:	982dd7fa 	srai	r22,r19,31
8111793c:	b005883a 	mov	r2,r22
81117940:	003a9f06 	br	811163c0 <__reset+0xfb0f63c0>
81117944:	d9402d17 	ldw	r5,180(sp)
81117948:	d8c02f17 	ldw	r3,188(sp)
8111794c:	28800017 	ldw	r2,0(r5)
81117950:	29400104 	addi	r5,r5,4
81117954:	d9402d15 	stw	r5,180(sp)
81117958:	10c00015 	stw	r3,0(r2)
8111795c:	00398606 	br	81115f78 <__reset+0xfb0f5f78>
81117960:	d9402d17 	ldw	r5,180(sp)
81117964:	002d883a 	mov	r22,zero
81117968:	2cc00017 	ldw	r19,0(r5)
8111796c:	29400104 	addi	r5,r5,4
81117970:	d9402d15 	stw	r5,180(sp)
81117974:	003c2306 	br	81116a04 <__reset+0xfb0f6a04>
81117978:	d8c02d17 	ldw	r3,180(sp)
8111797c:	d9002917 	ldw	r4,164(sp)
81117980:	002d883a 	mov	r22,zero
81117984:	18800104 	addi	r2,r3,4
81117988:	1cc0000b 	ldhu	r19,0(r3)
8111798c:	203dc10e 	bge	r4,zero,81117094 <__reset+0xfb0f7094>
81117990:	003f7506 	br	81117768 <__reset+0xfb0f7768>
81117994:	04204534 	movhi	r16,33044
81117998:	843f6f04 	addi	r16,r16,-580
8111799c:	003acc06 	br	811164d0 <__reset+0xfb0f64d0>
811179a0:	d9002c17 	ldw	r4,176(sp)
811179a4:	d9801e04 	addi	r6,sp,120
811179a8:	b80b883a 	mov	r5,r23
811179ac:	11220800 	call	81122080 <__sprint_r>
811179b0:	103a3b1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
811179b4:	dc402617 	ldw	r17,152(sp)
811179b8:	d8c02017 	ldw	r3,128(sp)
811179bc:	da000404 	addi	r8,sp,16
811179c0:	003f9c06 	br	81117834 <__reset+0xfb0f7834>
811179c4:	ac400043 	ldbu	r17,1(r21)
811179c8:	94800814 	ori	r18,r18,32
811179cc:	ad400044 	addi	r21,r21,1
811179d0:	8c403fcc 	andi	r17,r17,255
811179d4:	8c40201c 	xori	r17,r17,128
811179d8:	8c7fe004 	addi	r17,r17,-128
811179dc:	00398f06 	br	8111601c <__reset+0xfb0f601c>
811179e0:	d8c02d15 	stw	r3,180(sp)
811179e4:	0039883a 	mov	fp,zero
811179e8:	003e3506 	br	811172c0 <__reset+0xfb0f72c0>
811179ec:	d9002c17 	ldw	r4,176(sp)
811179f0:	d9801e04 	addi	r6,sp,120
811179f4:	b80b883a 	mov	r5,r23
811179f8:	11220800 	call	81122080 <__sprint_r>
811179fc:	103a281e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117a00:	d8c02017 	ldw	r3,128(sp)
81117a04:	da000404 	addi	r8,sp,16
81117a08:	003cd006 	br	81116d4c <__reset+0xfb0f6d4c>
81117a0c:	8009883a 	mov	r4,r16
81117a10:	da003d15 	stw	r8,244(sp)
81117a14:	11139780 	call	81113978 <strlen>
81117a18:	d8802e15 	stw	r2,184(sp)
81117a1c:	da003d17 	ldw	r8,244(sp)
81117a20:	103c340e 	bge	r2,zero,81116af4 <__reset+0xfb0f6af4>
81117a24:	0005883a 	mov	r2,zero
81117a28:	003c3206 	br	81116af4 <__reset+0xfb0f6af4>
81117a2c:	d9002c17 	ldw	r4,176(sp)
81117a30:	d9801e04 	addi	r6,sp,120
81117a34:	b80b883a 	mov	r5,r23
81117a38:	11220800 	call	81122080 <__sprint_r>
81117a3c:	103a181e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117a40:	d8c02017 	ldw	r3,128(sp)
81117a44:	d8801f17 	ldw	r2,124(sp)
81117a48:	da000404 	addi	r8,sp,16
81117a4c:	d9403317 	ldw	r5,204(sp)
81117a50:	10800044 	addi	r2,r2,1
81117a54:	44000015 	stw	r16,0(r8)
81117a58:	28c7883a 	add	r3,r5,r3
81117a5c:	003b7d06 	br	81116854 <__reset+0xfb0f6854>
81117a60:	01204534 	movhi	r4,33044
81117a64:	213f8b84 	addi	r4,r4,-466
81117a68:	d9003515 	stw	r4,212(sp)
81117a6c:	003b1406 	br	811166c0 <__reset+0xfb0f66c0>
81117a70:	013fffc4 	movi	r4,-1
81117a74:	003a3506 	br	8111634c <__reset+0xfb0f634c>
81117a78:	0023883a 	mov	r17,zero
81117a7c:	003d9d06 	br	811170f4 <__reset+0xfb0f70f4>
81117a80:	d9002c17 	ldw	r4,176(sp)
81117a84:	d9801e04 	addi	r6,sp,120
81117a88:	b80b883a 	mov	r5,r23
81117a8c:	11220800 	call	81122080 <__sprint_r>
81117a90:	103a031e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117a94:	d8c02017 	ldw	r3,128(sp)
81117a98:	da000404 	addi	r8,sp,16
81117a9c:	003d9406 	br	811170f0 <__reset+0xfb0f70f0>
81117aa0:	01204534 	movhi	r4,33044
81117aa4:	213f8784 	addi	r4,r4,-482
81117aa8:	d9002b15 	stw	r4,172(sp)
81117aac:	d9002b17 	ldw	r4,172(sp)
81117ab0:	1c47883a 	add	r3,r3,r17
81117ab4:	10800044 	addi	r2,r2,1
81117ab8:	41000015 	stw	r4,0(r8)
81117abc:	44400115 	stw	r17,4(r8)
81117ac0:	d8c02015 	stw	r3,128(sp)
81117ac4:	d8801f15 	stw	r2,124(sp)
81117ac8:	010001c4 	movi	r4,7
81117acc:	20bfd716 	blt	r4,r2,81117a2c <__reset+0xfb0f7a2c>
81117ad0:	42000204 	addi	r8,r8,8
81117ad4:	003fdd06 	br	81117a4c <__reset+0xfb0f7a4c>
81117ad8:	d9002c17 	ldw	r4,176(sp)
81117adc:	d9801e04 	addi	r6,sp,120
81117ae0:	b80b883a 	mov	r5,r23
81117ae4:	11220800 	call	81122080 <__sprint_r>
81117ae8:	1039ed1e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117aec:	d8802617 	ldw	r2,152(sp)
81117af0:	d8c02017 	ldw	r3,128(sp)
81117af4:	da000404 	addi	r8,sp,16
81117af8:	003e1006 	br	8111733c <__reset+0xfb0f733c>
81117afc:	00800044 	movi	r2,1
81117b00:	10803fcc 	andi	r2,r2,255
81117b04:	00c00044 	movi	r3,1
81117b08:	10fa3526 	beq	r2,r3,811163e0 <__reset+0xfb0f63e0>
81117b0c:	00c00084 	movi	r3,2
81117b10:	10fbcb26 	beq	r2,r3,81116a40 <__reset+0xfb0f6a40>
81117b14:	003a8f06 	br	81116554 <__reset+0xfb0f6554>
81117b18:	01204534 	movhi	r4,33044
81117b1c:	213f8b84 	addi	r4,r4,-466
81117b20:	d9003515 	stw	r4,212(sp)
81117b24:	003b7606 	br	81116900 <__reset+0xfb0f6900>
81117b28:	d8802917 	ldw	r2,164(sp)
81117b2c:	00c00184 	movi	r3,6
81117b30:	1880012e 	bgeu	r3,r2,81117b38 <___vfprintf_internal_r+0x1ca8>
81117b34:	1805883a 	mov	r2,r3
81117b38:	d8802e15 	stw	r2,184(sp)
81117b3c:	1000ef16 	blt	r2,zero,81117efc <___vfprintf_internal_r+0x206c>
81117b40:	04204534 	movhi	r16,33044
81117b44:	d8802a15 	stw	r2,168(sp)
81117b48:	dcc02d15 	stw	r19,180(sp)
81117b4c:	d8002915 	stw	zero,164(sp)
81117b50:	d8003215 	stw	zero,200(sp)
81117b54:	843f7d04 	addi	r16,r16,-524
81117b58:	0039883a 	mov	fp,zero
81117b5c:	003aa206 	br	811165e8 <__reset+0xfb0f65e8>
81117b60:	0021883a 	mov	r16,zero
81117b64:	003e0706 	br	81117384 <__reset+0xfb0f7384>
81117b68:	d9002c17 	ldw	r4,176(sp)
81117b6c:	d9801e04 	addi	r6,sp,120
81117b70:	b80b883a 	mov	r5,r23
81117b74:	11220800 	call	81122080 <__sprint_r>
81117b78:	1039c91e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117b7c:	d8802617 	ldw	r2,152(sp)
81117b80:	d9403317 	ldw	r5,204(sp)
81117b84:	d8c02017 	ldw	r3,128(sp)
81117b88:	da000404 	addi	r8,sp,16
81117b8c:	2885c83a 	sub	r2,r5,r2
81117b90:	003dfb06 	br	81117380 <__reset+0xfb0f7380>
81117b94:	9080004c 	andi	r2,r18,1
81117b98:	103e8f1e 	bne	r2,zero,811175d8 <__reset+0xfb0f75d8>
81117b9c:	d8802117 	ldw	r2,132(sp)
81117ba0:	003e9e06 	br	8111761c <__reset+0xfb0f761c>
81117ba4:	1025883a 	mov	r18,r2
81117ba8:	0039883a 	mov	fp,zero
81117bac:	00800084 	movi	r2,2
81117bb0:	003fd306 	br	81117b00 <__reset+0xfb0f7b00>
81117bb4:	07000b44 	movi	fp,45
81117bb8:	df002785 	stb	fp,158(sp)
81117bbc:	003a4006 	br	811164c0 <__reset+0xfb0f64c0>
81117bc0:	00c00b44 	movi	r3,45
81117bc4:	d8c02785 	stb	r3,158(sp)
81117bc8:	d8802a15 	stw	r2,168(sp)
81117bcc:	dc802b17 	ldw	r18,172(sp)
81117bd0:	d8002915 	stw	zero,164(sp)
81117bd4:	07000b44 	movi	fp,45
81117bd8:	003a8006 	br	811165dc <__reset+0xfb0f65dc>
81117bdc:	04204534 	movhi	r16,33044
81117be0:	843f7204 	addi	r16,r16,-568
81117be4:	003f4706 	br	81117904 <__reset+0xfb0f7904>
81117be8:	d8c02d17 	ldw	r3,180(sp)
81117bec:	d9002f17 	ldw	r4,188(sp)
81117bf0:	18800017 	ldw	r2,0(r3)
81117bf4:	18c00104 	addi	r3,r3,4
81117bf8:	d8c02d15 	stw	r3,180(sp)
81117bfc:	11000015 	stw	r4,0(r2)
81117c00:	0038dd06 	br	81115f78 <__reset+0xfb0f5f78>
81117c04:	dd802617 	ldw	r22,152(sp)
81117c08:	00bfff44 	movi	r2,-3
81117c0c:	b0801c16 	blt	r22,r2,81117c80 <___vfprintf_internal_r+0x1df0>
81117c10:	d9402917 	ldw	r5,164(sp)
81117c14:	2d801a16 	blt	r5,r22,81117c80 <___vfprintf_internal_r+0x1df0>
81117c18:	dd803215 	stw	r22,200(sp)
81117c1c:	003e8906 	br	81117644 <__reset+0xfb0f7644>
81117c20:	01204534 	movhi	r4,33044
81117c24:	213f8784 	addi	r4,r4,-482
81117c28:	d9002b15 	stw	r4,172(sp)
81117c2c:	003c9106 	br	81116e74 <__reset+0xfb0f6e74>
81117c30:	e005883a 	mov	r2,fp
81117c34:	003e7906 	br	8111761c <__reset+0xfb0f761c>
81117c38:	d9402917 	ldw	r5,164(sp)
81117c3c:	df002783 	ldbu	fp,158(sp)
81117c40:	dcc02d15 	stw	r19,180(sp)
81117c44:	d9402a15 	stw	r5,168(sp)
81117c48:	d9402e15 	stw	r5,184(sp)
81117c4c:	d8002915 	stw	zero,164(sp)
81117c50:	d8003215 	stw	zero,200(sp)
81117c54:	003a5d06 	br	811165cc <__reset+0xfb0f65cc>
81117c58:	9080004c 	andi	r2,r18,1
81117c5c:	0039883a 	mov	fp,zero
81117c60:	10000426 	beq	r2,zero,81117c74 <___vfprintf_internal_r+0x1de4>
81117c64:	00800c04 	movi	r2,48
81117c68:	dc001dc4 	addi	r16,sp,119
81117c6c:	d8801dc5 	stb	r2,119(sp)
81117c70:	003b8006 	br	81116a74 <__reset+0xfb0f6a74>
81117c74:	d8002e15 	stw	zero,184(sp)
81117c78:	dc001e04 	addi	r16,sp,120
81117c7c:	003a4d06 	br	811165b4 <__reset+0xfb0f65b4>
81117c80:	8c7fff84 	addi	r17,r17,-2
81117c84:	b5bfffc4 	addi	r22,r22,-1
81117c88:	dd802615 	stw	r22,152(sp)
81117c8c:	dc4022c5 	stb	r17,139(sp)
81117c90:	b000bf16 	blt	r22,zero,81117f90 <___vfprintf_internal_r+0x2100>
81117c94:	00800ac4 	movi	r2,43
81117c98:	d8802305 	stb	r2,140(sp)
81117c9c:	00800244 	movi	r2,9
81117ca0:	15807016 	blt	r2,r22,81117e64 <___vfprintf_internal_r+0x1fd4>
81117ca4:	00800c04 	movi	r2,48
81117ca8:	b5800c04 	addi	r22,r22,48
81117cac:	d8802345 	stb	r2,141(sp)
81117cb0:	dd802385 	stb	r22,142(sp)
81117cb4:	d88023c4 	addi	r2,sp,143
81117cb8:	df0022c4 	addi	fp,sp,139
81117cbc:	d8c03317 	ldw	r3,204(sp)
81117cc0:	1739c83a 	sub	fp,r2,fp
81117cc4:	d9003317 	ldw	r4,204(sp)
81117cc8:	e0c7883a 	add	r3,fp,r3
81117ccc:	df003a15 	stw	fp,232(sp)
81117cd0:	d8c02e15 	stw	r3,184(sp)
81117cd4:	00800044 	movi	r2,1
81117cd8:	1100b30e 	bge	r2,r4,81117fa8 <___vfprintf_internal_r+0x2118>
81117cdc:	d8c02e17 	ldw	r3,184(sp)
81117ce0:	18c00044 	addi	r3,r3,1
81117ce4:	d8c02e15 	stw	r3,184(sp)
81117ce8:	1805883a 	mov	r2,r3
81117cec:	1800ac16 	blt	r3,zero,81117fa0 <___vfprintf_internal_r+0x2110>
81117cf0:	d8003215 	stw	zero,200(sp)
81117cf4:	003e5d06 	br	8111766c <__reset+0xfb0f766c>
81117cf8:	d9002c17 	ldw	r4,176(sp)
81117cfc:	d9801e04 	addi	r6,sp,120
81117d00:	b80b883a 	mov	r5,r23
81117d04:	11220800 	call	81122080 <__sprint_r>
81117d08:	1039651e 	bne	r2,zero,811162a0 <__reset+0xfb0f62a0>
81117d0c:	dc402617 	ldw	r17,152(sp)
81117d10:	d8c02017 	ldw	r3,128(sp)
81117d14:	d8801f17 	ldw	r2,124(sp)
81117d18:	da000404 	addi	r8,sp,16
81117d1c:	003ed606 	br	81117878 <__reset+0xfb0f7878>
81117d20:	582b883a 	mov	r21,r11
81117d24:	d8002915 	stw	zero,164(sp)
81117d28:	0038bd06 	br	81116020 <__reset+0xfb0f6020>
81117d2c:	d8802917 	ldw	r2,164(sp)
81117d30:	103e071e 	bne	r2,zero,81117550 <__reset+0xfb0f7550>
81117d34:	dc002915 	stw	r16,164(sp)
81117d38:	003e0506 	br	81117550 <__reset+0xfb0f7550>
81117d3c:	d9002917 	ldw	r4,164(sp)
81117d40:	20c00044 	addi	r3,r4,1
81117d44:	003e0f06 	br	81117584 <__reset+0xfb0f7584>
81117d48:	01400184 	movi	r5,6
81117d4c:	d9402915 	stw	r5,164(sp)
81117d50:	003dff06 	br	81117550 <__reset+0xfb0f7550>
81117d54:	d8802104 	addi	r2,sp,132
81117d58:	d8800315 	stw	r2,12(sp)
81117d5c:	d8802504 	addi	r2,sp,148
81117d60:	d8800215 	stw	r2,8(sp)
81117d64:	d8802604 	addi	r2,sp,152
81117d68:	d8800115 	stw	r2,4(sp)
81117d6c:	d8802917 	ldw	r2,164(sp)
81117d70:	d9403617 	ldw	r5,216(sp)
81117d74:	d9002c17 	ldw	r4,176(sp)
81117d78:	d8800015 	stw	r2,0(sp)
81117d7c:	01c000c4 	movi	r7,3
81117d80:	980d883a 	mov	r6,r19
81117d84:	da003d15 	stw	r8,244(sp)
81117d88:	1119f9c0 	call	81119f9c <_dtoa_r>
81117d8c:	d8c02917 	ldw	r3,164(sp)
81117d90:	da003d17 	ldw	r8,244(sp)
81117d94:	1021883a 	mov	r16,r2
81117d98:	10f9883a 	add	fp,r2,r3
81117d9c:	81000007 	ldb	r4,0(r16)
81117da0:	00800c04 	movi	r2,48
81117da4:	20805e26 	beq	r4,r2,81117f20 <___vfprintf_internal_r+0x2090>
81117da8:	d8c02617 	ldw	r3,152(sp)
81117dac:	e0f9883a 	add	fp,fp,r3
81117db0:	003e0a06 	br	811175dc <__reset+0xfb0f75dc>
81117db4:	00c00b44 	movi	r3,45
81117db8:	24e0003c 	xorhi	r19,r4,32768
81117dbc:	d8c02a05 	stb	r3,168(sp)
81117dc0:	003de906 	br	81117568 <__reset+0xfb0f7568>
81117dc4:	d8c03217 	ldw	r3,200(sp)
81117dc8:	00c07a0e 	bge	zero,r3,81117fb4 <___vfprintf_internal_r+0x2124>
81117dcc:	00800044 	movi	r2,1
81117dd0:	d9003317 	ldw	r4,204(sp)
81117dd4:	1105883a 	add	r2,r2,r4
81117dd8:	d8802e15 	stw	r2,184(sp)
81117ddc:	10004e16 	blt	r2,zero,81117f18 <___vfprintf_internal_r+0x2088>
81117de0:	044019c4 	movi	r17,103
81117de4:	003e2106 	br	8111766c <__reset+0xfb0f766c>
81117de8:	d9002917 	ldw	r4,164(sp)
81117dec:	d8802104 	addi	r2,sp,132
81117df0:	d8800315 	stw	r2,12(sp)
81117df4:	d9000015 	stw	r4,0(sp)
81117df8:	d8802504 	addi	r2,sp,148
81117dfc:	d9403617 	ldw	r5,216(sp)
81117e00:	d9002c17 	ldw	r4,176(sp)
81117e04:	d8800215 	stw	r2,8(sp)
81117e08:	d8802604 	addi	r2,sp,152
81117e0c:	d8800115 	stw	r2,4(sp)
81117e10:	01c000c4 	movi	r7,3
81117e14:	980d883a 	mov	r6,r19
81117e18:	da003d15 	stw	r8,244(sp)
81117e1c:	1119f9c0 	call	81119f9c <_dtoa_r>
81117e20:	d8c02917 	ldw	r3,164(sp)
81117e24:	da003d17 	ldw	r8,244(sp)
81117e28:	1021883a 	mov	r16,r2
81117e2c:	00801184 	movi	r2,70
81117e30:	80f9883a 	add	fp,r16,r3
81117e34:	88bfd926 	beq	r17,r2,81117d9c <__reset+0xfb0f7d9c>
81117e38:	003de806 	br	811175dc <__reset+0xfb0f75dc>
81117e3c:	d9002917 	ldw	r4,164(sp)
81117e40:	00c04d0e 	bge	zero,r3,81117f78 <___vfprintf_internal_r+0x20e8>
81117e44:	2000441e 	bne	r4,zero,81117f58 <___vfprintf_internal_r+0x20c8>
81117e48:	9480004c 	andi	r18,r18,1
81117e4c:	9000421e 	bne	r18,zero,81117f58 <___vfprintf_internal_r+0x20c8>
81117e50:	1805883a 	mov	r2,r3
81117e54:	18007016 	blt	r3,zero,81118018 <___vfprintf_internal_r+0x2188>
81117e58:	d8c03217 	ldw	r3,200(sp)
81117e5c:	d8c02e15 	stw	r3,184(sp)
81117e60:	003e0206 	br	8111766c <__reset+0xfb0f766c>
81117e64:	df0022c4 	addi	fp,sp,139
81117e68:	dc002915 	stw	r16,164(sp)
81117e6c:	4027883a 	mov	r19,r8
81117e70:	e021883a 	mov	r16,fp
81117e74:	b009883a 	mov	r4,r22
81117e78:	01400284 	movi	r5,10
81117e7c:	11253f80 	call	811253f8 <__modsi3>
81117e80:	10800c04 	addi	r2,r2,48
81117e84:	843fffc4 	addi	r16,r16,-1
81117e88:	b009883a 	mov	r4,r22
81117e8c:	01400284 	movi	r5,10
81117e90:	80800005 	stb	r2,0(r16)
81117e94:	11253740 	call	81125374 <__divsi3>
81117e98:	102d883a 	mov	r22,r2
81117e9c:	00800244 	movi	r2,9
81117ea0:	15bff416 	blt	r2,r22,81117e74 <__reset+0xfb0f7e74>
81117ea4:	9811883a 	mov	r8,r19
81117ea8:	b0800c04 	addi	r2,r22,48
81117eac:	8027883a 	mov	r19,r16
81117eb0:	997fffc4 	addi	r5,r19,-1
81117eb4:	98bfffc5 	stb	r2,-1(r19)
81117eb8:	dc002917 	ldw	r16,164(sp)
81117ebc:	2f006a2e 	bgeu	r5,fp,81118068 <___vfprintf_internal_r+0x21d8>
81117ec0:	d9c02384 	addi	r7,sp,142
81117ec4:	3ccfc83a 	sub	r7,r7,r19
81117ec8:	d9002344 	addi	r4,sp,141
81117ecc:	e1cf883a 	add	r7,fp,r7
81117ed0:	00000106 	br	81117ed8 <___vfprintf_internal_r+0x2048>
81117ed4:	28800003 	ldbu	r2,0(r5)
81117ed8:	20800005 	stb	r2,0(r4)
81117edc:	21000044 	addi	r4,r4,1
81117ee0:	29400044 	addi	r5,r5,1
81117ee4:	393ffb1e 	bne	r7,r4,81117ed4 <__reset+0xfb0f7ed4>
81117ee8:	d8802304 	addi	r2,sp,140
81117eec:	14c5c83a 	sub	r2,r2,r19
81117ef0:	d8c02344 	addi	r3,sp,141
81117ef4:	1885883a 	add	r2,r3,r2
81117ef8:	003f7006 	br	81117cbc <__reset+0xfb0f7cbc>
81117efc:	0005883a 	mov	r2,zero
81117f00:	003f0f06 	br	81117b40 <__reset+0xfb0f7b40>
81117f04:	d8c03217 	ldw	r3,200(sp)
81117f08:	18c00044 	addi	r3,r3,1
81117f0c:	d8c02e15 	stw	r3,184(sp)
81117f10:	1805883a 	mov	r2,r3
81117f14:	183fb20e 	bge	r3,zero,81117de0 <__reset+0xfb0f7de0>
81117f18:	0005883a 	mov	r2,zero
81117f1c:	003fb006 	br	81117de0 <__reset+0xfb0f7de0>
81117f20:	d9003617 	ldw	r4,216(sp)
81117f24:	000d883a 	mov	r6,zero
81117f28:	000f883a 	mov	r7,zero
81117f2c:	980b883a 	mov	r5,r19
81117f30:	d8c03c15 	stw	r3,240(sp)
81117f34:	da003d15 	stw	r8,244(sp)
81117f38:	11268c80 	call	811268c8 <__eqdf2>
81117f3c:	d8c03c17 	ldw	r3,240(sp)
81117f40:	da003d17 	ldw	r8,244(sp)
81117f44:	103f9826 	beq	r2,zero,81117da8 <__reset+0xfb0f7da8>
81117f48:	00800044 	movi	r2,1
81117f4c:	10c7c83a 	sub	r3,r2,r3
81117f50:	d8c02615 	stw	r3,152(sp)
81117f54:	003f9506 	br	81117dac <__reset+0xfb0f7dac>
81117f58:	d9002917 	ldw	r4,164(sp)
81117f5c:	d8c03217 	ldw	r3,200(sp)
81117f60:	20800044 	addi	r2,r4,1
81117f64:	1885883a 	add	r2,r3,r2
81117f68:	d8802e15 	stw	r2,184(sp)
81117f6c:	103dbf0e 	bge	r2,zero,8111766c <__reset+0xfb0f766c>
81117f70:	0005883a 	mov	r2,zero
81117f74:	003dbd06 	br	8111766c <__reset+0xfb0f766c>
81117f78:	2000211e 	bne	r4,zero,81118000 <___vfprintf_internal_r+0x2170>
81117f7c:	9480004c 	andi	r18,r18,1
81117f80:	90001f1e 	bne	r18,zero,81118000 <___vfprintf_internal_r+0x2170>
81117f84:	00800044 	movi	r2,1
81117f88:	d8802e15 	stw	r2,184(sp)
81117f8c:	003db706 	br	8111766c <__reset+0xfb0f766c>
81117f90:	00800b44 	movi	r2,45
81117f94:	05adc83a 	sub	r22,zero,r22
81117f98:	d8802305 	stb	r2,140(sp)
81117f9c:	003f3f06 	br	81117c9c <__reset+0xfb0f7c9c>
81117fa0:	0005883a 	mov	r2,zero
81117fa4:	003f5206 	br	81117cf0 <__reset+0xfb0f7cf0>
81117fa8:	90a4703a 	and	r18,r18,r2
81117fac:	903f4e26 	beq	r18,zero,81117ce8 <__reset+0xfb0f7ce8>
81117fb0:	003f4a06 	br	81117cdc <__reset+0xfb0f7cdc>
81117fb4:	00800084 	movi	r2,2
81117fb8:	10c5c83a 	sub	r2,r2,r3
81117fbc:	003f8406 	br	81117dd0 <__reset+0xfb0f7dd0>
81117fc0:	d8802d17 	ldw	r2,180(sp)
81117fc4:	d9002d17 	ldw	r4,180(sp)
81117fc8:	ac400043 	ldbu	r17,1(r21)
81117fcc:	10800017 	ldw	r2,0(r2)
81117fd0:	582b883a 	mov	r21,r11
81117fd4:	d8802915 	stw	r2,164(sp)
81117fd8:	20800104 	addi	r2,r4,4
81117fdc:	d9002917 	ldw	r4,164(sp)
81117fe0:	d8802d15 	stw	r2,180(sp)
81117fe4:	203e7a0e 	bge	r4,zero,811179d0 <__reset+0xfb0f79d0>
81117fe8:	8c403fcc 	andi	r17,r17,255
81117fec:	00bfffc4 	movi	r2,-1
81117ff0:	8c40201c 	xori	r17,r17,128
81117ff4:	d8802915 	stw	r2,164(sp)
81117ff8:	8c7fe004 	addi	r17,r17,-128
81117ffc:	00380706 	br	8111601c <__reset+0xfb0f601c>
81118000:	d8c02917 	ldw	r3,164(sp)
81118004:	18c00084 	addi	r3,r3,2
81118008:	d8c02e15 	stw	r3,184(sp)
8111800c:	1805883a 	mov	r2,r3
81118010:	183d960e 	bge	r3,zero,8111766c <__reset+0xfb0f766c>
81118014:	003fd606 	br	81117f70 <__reset+0xfb0f7f70>
81118018:	0005883a 	mov	r2,zero
8111801c:	003f8e06 	br	81117e58 <__reset+0xfb0f7e58>
81118020:	9080004c 	andi	r2,r18,1
81118024:	103f811e 	bne	r2,zero,81117e2c <__reset+0xfb0f7e2c>
81118028:	d8802117 	ldw	r2,132(sp)
8111802c:	1405c83a 	sub	r2,r2,r16
81118030:	d8803315 	stw	r2,204(sp)
81118034:	b47ef326 	beq	r22,r17,81117c04 <__reset+0xfb0f7c04>
81118038:	dd802617 	ldw	r22,152(sp)
8111803c:	003f1106 	br	81117c84 <__reset+0xfb0f7c84>
81118040:	d9c02785 	stb	r7,158(sp)
81118044:	00390406 	br	81116458 <__reset+0xfb0f6458>
81118048:	d9c02785 	stb	r7,158(sp)
8111804c:	0038d306 	br	8111639c <__reset+0xfb0f639c>
81118050:	d9c02785 	stb	r7,158(sp)
81118054:	003a6106 	br	811169dc <__reset+0xfb0f69dc>
81118058:	d9c02785 	stb	r7,158(sp)
8111805c:	003af806 	br	81116c40 <__reset+0xfb0f6c40>
81118060:	0005883a 	mov	r2,zero
81118064:	003d7e06 	br	81117660 <__reset+0xfb0f7660>
81118068:	d8802344 	addi	r2,sp,141
8111806c:	003f1306 	br	81117cbc <__reset+0xfb0f7cbc>
81118070:	d9c02785 	stb	r7,158(sp)
81118074:	00392306 	br	81116504 <__reset+0xfb0f6504>
81118078:	d9c02785 	stb	r7,158(sp)
8111807c:	003aa906 	br	81116b24 <__reset+0xfb0f6b24>
81118080:	d9c02785 	stb	r7,158(sp)
81118084:	003a3d06 	br	8111697c <__reset+0xfb0f697c>
81118088:	d9c02785 	stb	r7,158(sp)
8111808c:	003aca06 	br	81116bb8 <__reset+0xfb0f6bb8>

81118090 <__vfprintf_internal>:
81118090:	00a04534 	movhi	r2,33044
81118094:	10895a04 	addi	r2,r2,9576
81118098:	300f883a 	mov	r7,r6
8111809c:	280d883a 	mov	r6,r5
811180a0:	200b883a 	mov	r5,r4
811180a4:	11000017 	ldw	r4,0(r2)
811180a8:	1115e901 	jmpi	81115e90 <___vfprintf_internal_r>

811180ac <__sbprintf>:
811180ac:	defee204 	addi	sp,sp,-1144
811180b0:	de00012e 	bgeu	sp,et,811180b8 <__sbprintf+0xc>
811180b4:	003b68fa 	trap	3
811180b8:	2880030b 	ldhu	r2,12(r5)
811180bc:	2ac01917 	ldw	r11,100(r5)
811180c0:	2a80038b 	ldhu	r10,14(r5)
811180c4:	2a400717 	ldw	r9,28(r5)
811180c8:	2a000917 	ldw	r8,36(r5)
811180cc:	00c10004 	movi	r3,1024
811180d0:	dc011a15 	stw	r16,1128(sp)
811180d4:	10bfff4c 	andi	r2,r2,65533
811180d8:	2821883a 	mov	r16,r5
811180dc:	d8cb883a 	add	r5,sp,r3
811180e0:	dc811c15 	stw	r18,1136(sp)
811180e4:	dc411b15 	stw	r17,1132(sp)
811180e8:	dfc11d15 	stw	ra,1140(sp)
811180ec:	2025883a 	mov	r18,r4
811180f0:	d881030d 	sth	r2,1036(sp)
811180f4:	dac11915 	stw	r11,1124(sp)
811180f8:	da81038d 	sth	r10,1038(sp)
811180fc:	da410715 	stw	r9,1052(sp)
81118100:	da010915 	stw	r8,1060(sp)
81118104:	dec10015 	stw	sp,1024(sp)
81118108:	dec10415 	stw	sp,1040(sp)
8111810c:	d8c10215 	stw	r3,1032(sp)
81118110:	d8c10515 	stw	r3,1044(sp)
81118114:	d8010615 	stw	zero,1048(sp)
81118118:	1115e900 	call	81115e90 <___vfprintf_internal_r>
8111811c:	1023883a 	mov	r17,r2
81118120:	10000416 	blt	r2,zero,81118134 <__sbprintf+0x88>
81118124:	d9410004 	addi	r5,sp,1024
81118128:	9009883a 	mov	r4,r18
8111812c:	111b8500 	call	8111b850 <_fflush_r>
81118130:	10000d1e 	bne	r2,zero,81118168 <__sbprintf+0xbc>
81118134:	d881030b 	ldhu	r2,1036(sp)
81118138:	1080100c 	andi	r2,r2,64
8111813c:	10000326 	beq	r2,zero,8111814c <__sbprintf+0xa0>
81118140:	8080030b 	ldhu	r2,12(r16)
81118144:	10801014 	ori	r2,r2,64
81118148:	8080030d 	sth	r2,12(r16)
8111814c:	8805883a 	mov	r2,r17
81118150:	dfc11d17 	ldw	ra,1140(sp)
81118154:	dc811c17 	ldw	r18,1136(sp)
81118158:	dc411b17 	ldw	r17,1132(sp)
8111815c:	dc011a17 	ldw	r16,1128(sp)
81118160:	dec11e04 	addi	sp,sp,1144
81118164:	f800283a 	ret
81118168:	047fffc4 	movi	r17,-1
8111816c:	003ff106 	br	81118134 <__reset+0xfb0f8134>

81118170 <__svfscanf_r>:
81118170:	deff4b04 	addi	sp,sp,-724
81118174:	de00012e 	bgeu	sp,et,8111817c <__svfscanf_r+0xc>
81118178:	003b68fa 	trap	3
8111817c:	2880030b 	ldhu	r2,12(r5)
81118180:	df00b315 	stw	fp,716(sp)
81118184:	dd80b115 	stw	r22,708(sp)
81118188:	dfc0b415 	stw	ra,720(sp)
8111818c:	ddc0b215 	stw	r23,712(sp)
81118190:	dd40b015 	stw	r21,704(sp)
81118194:	dd00af15 	stw	r20,700(sp)
81118198:	dcc0ae15 	stw	r19,696(sp)
8111819c:	dc80ad15 	stw	r18,692(sp)
811181a0:	dc40ac15 	stw	r17,688(sp)
811181a4:	dc00ab15 	stw	r16,684(sp)
811181a8:	10c8000c 	andi	r3,r2,8192
811181ac:	d9c09c15 	stw	r7,624(sp)
811181b0:	2839883a 	mov	fp,r5
811181b4:	202d883a 	mov	r22,r4
811181b8:	1800061e 	bne	r3,zero,811181d4 <__svfscanf_r+0x64>
811181bc:	29001917 	ldw	r4,100(r5)
811181c0:	00f7ffc4 	movi	r3,-8193
811181c4:	10880014 	ori	r2,r2,8192
811181c8:	20c6703a 	and	r3,r4,r3
811181cc:	2880030d 	sth	r2,12(r5)
811181d0:	28c01915 	stw	r3,100(r5)
811181d4:	30800003 	ldbu	r2,0(r6)
811181d8:	0021883a 	mov	r16,zero
811181dc:	05e04534 	movhi	r23,33044
811181e0:	d800a115 	stw	zero,644(sp)
811181e4:	d8009e15 	stw	zero,632(sp)
811181e8:	d800a015 	stw	zero,640(sp)
811181ec:	d8809b15 	stw	r2,620(sp)
811181f0:	bdc95804 	addi	r23,r23,9568
811181f4:	8025883a 	mov	r18,r16
811181f8:	35000044 	addi	r20,r6,1
811181fc:	10001e26 	beq	r2,zero,81118278 <__svfscanf_r+0x108>
81118200:	b9c00017 	ldw	r7,0(r23)
81118204:	3887883a 	add	r3,r7,r2
81118208:	18c00043 	ldbu	r3,1(r3)
8111820c:	18c0020c 	andi	r3,r3,8
81118210:	18001b26 	beq	r3,zero,81118280 <__svfscanf_r+0x110>
81118214:	e0800117 	ldw	r2,4(fp)
81118218:	00800e0e 	bge	zero,r2,81118254 <__svfscanf_r+0xe4>
8111821c:	e0c00017 	ldw	r3,0(fp)
81118220:	b9000017 	ldw	r4,0(r23)
81118224:	18800003 	ldbu	r2,0(r3)
81118228:	2085883a 	add	r2,r4,r2
8111822c:	10800043 	ldbu	r2,1(r2)
81118230:	1080020c 	andi	r2,r2,8
81118234:	10000b26 	beq	r2,zero,81118264 <__svfscanf_r+0xf4>
81118238:	e0800117 	ldw	r2,4(fp)
8111823c:	18c00044 	addi	r3,r3,1
81118240:	e0c00015 	stw	r3,0(fp)
81118244:	10bfffc4 	addi	r2,r2,-1
81118248:	e0800115 	stw	r2,4(fp)
8111824c:	94800044 	addi	r18,r18,1
81118250:	00bff216 	blt	zero,r2,8111821c <__reset+0xfb0f821c>
81118254:	e00b883a 	mov	r5,fp
81118258:	b009883a 	mov	r4,r22
8111825c:	11134500 	call	81113450 <__srefill_r>
81118260:	103fee26 	beq	r2,zero,8111821c <__reset+0xfb0f821c>
81118264:	a00d883a 	mov	r6,r20
81118268:	30800003 	ldbu	r2,0(r6)
8111826c:	35000044 	addi	r20,r6,1
81118270:	d8809b15 	stw	r2,620(sp)
81118274:	103fe21e 	bne	r2,zero,81118200 <__reset+0xfb0f8200>
81118278:	d880a017 	ldw	r2,640(sp)
8111827c:	00009906 	br	811184e4 <__svfscanf_r+0x374>
81118280:	00c00944 	movi	r3,37
81118284:	10c0881e 	bne	r2,r3,811184a8 <__svfscanf_r+0x338>
81118288:	30c00043 	ldbu	r3,1(r6)
8111828c:	0023883a 	mov	r17,zero
81118290:	0027883a 	mov	r19,zero
81118294:	01001e04 	movi	r4,120
81118298:	01401b04 	movi	r5,108
8111829c:	a1800044 	addi	r6,r20,1
811182a0:	20c0a236 	bltu	r4,r3,8111852c <__svfscanf_r+0x3bc>
811182a4:	180490ba 	slli	r2,r3,2
811182a8:	022044b4 	movhi	r8,33042
811182ac:	4220af04 	addi	r8,r8,-32068
811182b0:	1205883a 	add	r2,r2,r8
811182b4:	10800017 	ldw	r2,0(r2)
811182b8:	1000683a 	jmp	r2
811182bc:	811184e0 	cmpeqi	r4,r16,17939
811182c0:	8111852c 	andhi	r4,r16,17940
811182c4:	8111852c 	andhi	r4,r16,17940
811182c8:	8111852c 	andhi	r4,r16,17940
811182cc:	8111852c 	andhi	r4,r16,17940
811182d0:	8111852c 	andhi	r4,r16,17940
811182d4:	8111852c 	andhi	r4,r16,17940
811182d8:	8111852c 	andhi	r4,r16,17940
811182dc:	8111852c 	andhi	r4,r16,17940
811182e0:	8111852c 	andhi	r4,r16,17940
811182e4:	8111852c 	andhi	r4,r16,17940
811182e8:	8111852c 	andhi	r4,r16,17940
811182ec:	8111852c 	andhi	r4,r16,17940
811182f0:	8111852c 	andhi	r4,r16,17940
811182f4:	8111852c 	andhi	r4,r16,17940
811182f8:	8111852c 	andhi	r4,r16,17940
811182fc:	8111852c 	andhi	r4,r16,17940
81118300:	8111852c 	andhi	r4,r16,17940
81118304:	8111852c 	andhi	r4,r16,17940
81118308:	8111852c 	andhi	r4,r16,17940
8111830c:	8111852c 	andhi	r4,r16,17940
81118310:	8111852c 	andhi	r4,r16,17940
81118314:	8111852c 	andhi	r4,r16,17940
81118318:	8111852c 	andhi	r4,r16,17940
8111831c:	8111852c 	andhi	r4,r16,17940
81118320:	8111852c 	andhi	r4,r16,17940
81118324:	8111852c 	andhi	r4,r16,17940
81118328:	8111852c 	andhi	r4,r16,17940
8111832c:	8111852c 	andhi	r4,r16,17940
81118330:	8111852c 	andhi	r4,r16,17940
81118334:	8111852c 	andhi	r4,r16,17940
81118338:	8111852c 	andhi	r4,r16,17940
8111833c:	8111852c 	andhi	r4,r16,17940
81118340:	8111852c 	andhi	r4,r16,17940
81118344:	8111852c 	andhi	r4,r16,17940
81118348:	8111852c 	andhi	r4,r16,17940
8111834c:	8111852c 	andhi	r4,r16,17940
81118350:	811184a0 	cmpeqi	r4,r16,17938
81118354:	8111852c 	andhi	r4,r16,17940
81118358:	8111852c 	andhi	r4,r16,17940
8111835c:	8111852c 	andhi	r4,r16,17940
81118360:	8111852c 	andhi	r4,r16,17940
81118364:	81118514 	ori	r4,r16,17940
81118368:	8111852c 	andhi	r4,r16,17940
8111836c:	8111852c 	andhi	r4,r16,17940
81118370:	8111852c 	andhi	r4,r16,17940
81118374:	8111852c 	andhi	r4,r16,17940
81118378:	8111852c 	andhi	r4,r16,17940
8111837c:	81118648 	cmpgei	r4,r16,17945
81118380:	81118648 	cmpgei	r4,r16,17945
81118384:	81118648 	cmpgei	r4,r16,17945
81118388:	81118648 	cmpgei	r4,r16,17945
8111838c:	81118648 	cmpgei	r4,r16,17945
81118390:	81118648 	cmpgei	r4,r16,17945
81118394:	81118648 	cmpgei	r4,r16,17945
81118398:	81118648 	cmpgei	r4,r16,17945
8111839c:	81118648 	cmpgei	r4,r16,17945
811183a0:	81118648 	cmpgei	r4,r16,17945
811183a4:	8111852c 	andhi	r4,r16,17940
811183a8:	8111852c 	andhi	r4,r16,17940
811183ac:	8111852c 	andhi	r4,r16,17940
811183b0:	8111852c 	andhi	r4,r16,17940
811183b4:	8111852c 	andhi	r4,r16,17940
811183b8:	8111852c 	andhi	r4,r16,17940
811183bc:	8111852c 	andhi	r4,r16,17940
811183c0:	8111852c 	andhi	r4,r16,17940
811183c4:	8111852c 	andhi	r4,r16,17940
811183c8:	8111852c 	andhi	r4,r16,17940
811183cc:	8111861c 	xori	r4,r16,17944
811183d0:	811186cc 	andi	r4,r16,17947
811183d4:	8111852c 	andhi	r4,r16,17940
811183d8:	811186cc 	andi	r4,r16,17947
811183dc:	8111852c 	andhi	r4,r16,17940
811183e0:	8111852c 	andhi	r4,r16,17940
811183e4:	8111852c 	andhi	r4,r16,17940
811183e8:	8111852c 	andhi	r4,r16,17940
811183ec:	811186b8 	rdprs	r4,r16,17946
811183f0:	8111852c 	andhi	r4,r16,17940
811183f4:	8111852c 	andhi	r4,r16,17940
811183f8:	8111868c 	andi	r4,r16,17946
811183fc:	8111852c 	andhi	r4,r16,17940
81118400:	8111852c 	andhi	r4,r16,17940
81118404:	8111852c 	andhi	r4,r16,17940
81118408:	8111852c 	andhi	r4,r16,17940
8111840c:	8111852c 	andhi	r4,r16,17940
81118410:	8111852c 	andhi	r4,r16,17940
81118414:	8111852c 	andhi	r4,r16,17940
81118418:	8111852c 	andhi	r4,r16,17940
8111841c:	81118664 	muli	r4,r16,17945
81118420:	8111852c 	andhi	r4,r16,17940
81118424:	8111852c 	andhi	r4,r16,17940
81118428:	81118800 	call	88111880 <__reset+0x20f1880>
8111842c:	8111852c 	andhi	r4,r16,17940
81118430:	8111852c 	andhi	r4,r16,17940
81118434:	8111852c 	andhi	r4,r16,17940
81118438:	8111852c 	andhi	r4,r16,17940
8111843c:	8111852c 	andhi	r4,r16,17940
81118440:	8111852c 	andhi	r4,r16,17940
81118444:	8111852c 	andhi	r4,r16,17940
81118448:	81118784 	addi	r4,r16,17950
8111844c:	8111875c 	xori	r4,r16,17949
81118450:	811186cc 	andi	r4,r16,17947
81118454:	811186cc 	andi	r4,r16,17947
81118458:	811186cc 	andi	r4,r16,17947
8111845c:	81118748 	cmpgei	r4,r16,17949
81118460:	8111888c 	andi	r4,r16,17954
81118464:	8111852c 	andhi	r4,r16,17940
81118468:	8111852c 	andhi	r4,r16,17940
8111846c:	81118734 	orhi	r4,r16,17948
81118470:	8111852c 	andhi	r4,r16,17940
81118474:	81118704 	addi	r4,r16,17948
81118478:	811186e0 	cmpeqi	r4,r16,17947
8111847c:	811185f0 	cmpltui	r4,r16,17943
81118480:	8111852c 	andhi	r4,r16,17940
81118484:	8111852c 	andhi	r4,r16,17940
81118488:	811185dc 	xori	r4,r16,17943
8111848c:	8111852c 	andhi	r4,r16,17940
81118490:	81118564 	muli	r4,r16,17941
81118494:	8111852c 	andhi	r4,r16,17940
81118498:	8111852c 	andhi	r4,r16,17940
8111849c:	81118664 	muli	r4,r16,17945
811184a0:	d9809d15 	stw	r6,628(sp)
811184a4:	3029883a 	mov	r20,r6
811184a8:	e0800117 	ldw	r2,4(fp)
811184ac:	0081aa0e 	bge	zero,r2,81118b58 <__svfscanf_r+0x9e8>
811184b0:	e0800017 	ldw	r2,0(fp)
811184b4:	a0ffffc3 	ldbu	r3,-1(r20)
811184b8:	11000003 	ldbu	r4,0(r2)
811184bc:	20ff6e1e 	bne	r4,r3,81118278 <__reset+0xfb0f8278>
811184c0:	e0c00117 	ldw	r3,4(fp)
811184c4:	10800044 	addi	r2,r2,1
811184c8:	e0800015 	stw	r2,0(fp)
811184cc:	18bfffc4 	addi	r2,r3,-1
811184d0:	e0800115 	stw	r2,4(fp)
811184d4:	94800044 	addi	r18,r18,1
811184d8:	a00d883a 	mov	r6,r20
811184dc:	003f6206 	br	81118268 <__reset+0xfb0f8268>
811184e0:	00bfffc4 	movi	r2,-1
811184e4:	dfc0b417 	ldw	ra,720(sp)
811184e8:	df00b317 	ldw	fp,716(sp)
811184ec:	ddc0b217 	ldw	r23,712(sp)
811184f0:	dd80b117 	ldw	r22,708(sp)
811184f4:	dd40b017 	ldw	r21,704(sp)
811184f8:	dd00af17 	ldw	r20,700(sp)
811184fc:	dcc0ae17 	ldw	r19,696(sp)
81118500:	dc80ad17 	ldw	r18,692(sp)
81118504:	dc40ac17 	ldw	r17,688(sp)
81118508:	dc00ab17 	ldw	r16,684(sp)
8111850c:	dec0b504 	addi	sp,sp,724
81118510:	f800283a 	ret
81118514:	a0800043 	ldbu	r2,1(r20)
81118518:	3029883a 	mov	r20,r6
8111851c:	8c400414 	ori	r17,r17,16
81118520:	10c03fcc 	andi	r3,r2,255
81118524:	a1800044 	addi	r6,r20,1
81118528:	20ff5e2e 	bgeu	r4,r3,811182a4 <__reset+0xfb0f82a4>
8111852c:	38c7883a 	add	r3,r7,r3
81118530:	18800043 	ldbu	r2,1(r3)
81118534:	d9809d15 	stw	r6,628(sp)
81118538:	00c00044 	movi	r3,1
8111853c:	108000cc 	andi	r2,r2,3
81118540:	10c18f26 	beq	r2,r3,81118b80 <__svfscanf_r+0xa10>
81118544:	e0800117 	ldw	r2,4(fp)
81118548:	00808716 	blt	zero,r2,81118768 <__svfscanf_r+0x5f8>
8111854c:	e00b883a 	mov	r5,fp
81118550:	b009883a 	mov	r4,r22
81118554:	11134500 	call	81113450 <__srefill_r>
81118558:	1001431e 	bne	r2,zero,81118a68 <__svfscanf_r+0x8f8>
8111855c:	b9c00017 	ldw	r7,0(r23)
81118560:	00008106 	br	81118768 <__svfscanf_r+0x5f8>
81118564:	e0800117 	ldw	r2,4(fp)
81118568:	d9809d15 	stw	r6,628(sp)
8111856c:	0081a30e 	bge	zero,r2,81118bfc <__svfscanf_r+0xa8c>
81118570:	00a044b4 	movhi	r2,33042
81118574:	1080e004 	addi	r2,r2,896
81118578:	02000284 	movi	r8,10
8111857c:	d880a115 	stw	r2,644(sp)
81118580:	da009e15 	stw	r8,632(sp)
81118584:	050000c4 	movi	r20,3
81118588:	e0c00017 	ldw	r3,0(fp)
8111858c:	00000206 	br	81118598 <__svfscanf_r+0x428>
81118590:	18c00044 	addi	r3,r3,1
81118594:	e0c00015 	stw	r3,0(fp)
81118598:	19000003 	ldbu	r4,0(r3)
8111859c:	20803fcc 	andi	r2,r4,255
811185a0:	3885883a 	add	r2,r7,r2
811185a4:	10800043 	ldbu	r2,1(r2)
811185a8:	1140020c 	andi	r5,r2,8
811185ac:	2801ab26 	beq	r5,zero,81118c5c <__svfscanf_r+0xaec>
811185b0:	e0800117 	ldw	r2,4(fp)
811185b4:	94800044 	addi	r18,r18,1
811185b8:	10bfffc4 	addi	r2,r2,-1
811185bc:	e0800115 	stw	r2,4(fp)
811185c0:	00bff316 	blt	zero,r2,81118590 <__reset+0xfb0f8590>
811185c4:	e00b883a 	mov	r5,fp
811185c8:	b009883a 	mov	r4,r22
811185cc:	11134500 	call	81113450 <__srefill_r>
811185d0:	1001251e 	bne	r2,zero,81118a68 <__svfscanf_r+0x8f8>
811185d4:	b9c00017 	ldw	r7,0(r23)
811185d8:	003feb06 	br	81118588 <__reset+0xfb0f8588>
811185dc:	e0800117 	ldw	r2,4(fp)
811185e0:	d9809d15 	stw	r6,628(sp)
811185e4:	00818b0e 	bge	zero,r2,81118c14 <__svfscanf_r+0xaa4>
811185e8:	05000084 	movi	r20,2
811185ec:	003fe606 	br	81118588 <__reset+0xfb0f8588>
811185f0:	e0800117 	ldw	r2,4(fp)
811185f4:	d9809d15 	stw	r6,628(sp)
811185f8:	8c408814 	ori	r17,r17,544
811185fc:	00801d0e 	bge	zero,r2,81118674 <__svfscanf_r+0x504>
81118600:	00a044b4 	movhi	r2,33042
81118604:	1080e004 	addi	r2,r2,896
81118608:	02000404 	movi	r8,16
8111860c:	d880a115 	stw	r2,644(sp)
81118610:	da009e15 	stw	r8,632(sp)
81118614:	050000c4 	movi	r20,3
81118618:	003fdb06 	br	81118588 <__reset+0xfb0f8588>
8111861c:	e0800117 	ldw	r2,4(fp)
81118620:	d9809d15 	stw	r6,628(sp)
81118624:	8c400054 	ori	r17,r17,1
81118628:	00bfc80e 	bge	zero,r2,8111854c <__reset+0xfb0f854c>
8111862c:	00e04474 	movhi	r3,33041
81118630:	18ce9504 	addi	r3,r3,14932
81118634:	02000284 	movi	r8,10
81118638:	d8c0a115 	stw	r3,644(sp)
8111863c:	da009e15 	stw	r8,632(sp)
81118640:	050000c4 	movi	r20,3
81118644:	003fd006 	br	81118588 <__reset+0xfb0f8588>
81118648:	9cc002a4 	muli	r19,r19,10
8111864c:	a0800043 	ldbu	r2,1(r20)
81118650:	3029883a 	mov	r20,r6
81118654:	98e7883a 	add	r19,r19,r3
81118658:	9cfff404 	addi	r19,r19,-48
8111865c:	10c03fcc 	andi	r3,r2,255
81118660:	003f0e06 	br	8111829c <__reset+0xfb0f829c>
81118664:	e0800117 	ldw	r2,4(fp)
81118668:	d9809d15 	stw	r6,628(sp)
8111866c:	8c408014 	ori	r17,r17,512
81118670:	00bfe316 	blt	zero,r2,81118600 <__reset+0xfb0f8600>
81118674:	e00b883a 	mov	r5,fp
81118678:	b009883a 	mov	r4,r22
8111867c:	11134500 	call	81113450 <__srefill_r>
81118680:	1000f91e 	bne	r2,zero,81118a68 <__svfscanf_r+0x8f8>
81118684:	b9c00017 	ldw	r7,0(r23)
81118688:	003fdd06 	br	81118600 <__reset+0xfb0f8600>
8111868c:	e0800117 	ldw	r2,4(fp)
81118690:	d9809d15 	stw	r6,628(sp)
81118694:	8c400054 	ori	r17,r17,1
81118698:	0080140e 	bge	zero,r2,811186ec <__svfscanf_r+0x57c>
8111869c:	00a044b4 	movhi	r2,33042
811186a0:	1080e004 	addi	r2,r2,896
811186a4:	02000204 	movi	r8,8
811186a8:	d880a115 	stw	r2,644(sp)
811186ac:	da009e15 	stw	r8,632(sp)
811186b0:	050000c4 	movi	r20,3
811186b4:	003fb406 	br	81118588 <__reset+0xfb0f8588>
811186b8:	a0800043 	ldbu	r2,1(r20)
811186bc:	8c400094 	ori	r17,r17,2
811186c0:	3029883a 	mov	r20,r6
811186c4:	10c03fcc 	andi	r3,r2,255
811186c8:	003ef406 	br	8111829c <__reset+0xfb0f829c>
811186cc:	e0800117 	ldw	r2,4(fp)
811186d0:	d9809d15 	stw	r6,628(sp)
811186d4:	0081420e 	bge	zero,r2,81118be0 <__svfscanf_r+0xa70>
811186d8:	05000104 	movi	r20,4
811186dc:	003faa06 	br	81118588 <__reset+0xfb0f8588>
811186e0:	e0800117 	ldw	r2,4(fp)
811186e4:	d9809d15 	stw	r6,628(sp)
811186e8:	00bfec16 	blt	zero,r2,8111869c <__reset+0xfb0f869c>
811186ec:	e00b883a 	mov	r5,fp
811186f0:	b009883a 	mov	r4,r22
811186f4:	11134500 	call	81113450 <__srefill_r>
811186f8:	1000db1e 	bne	r2,zero,81118a68 <__svfscanf_r+0x8f8>
811186fc:	b9c00017 	ldw	r7,0(r23)
81118700:	003fe606 	br	8111869c <__reset+0xfb0f869c>
81118704:	d9809d15 	stw	r6,628(sp)
81118708:	8880040c 	andi	r2,r17,16
8111870c:	10009c1e 	bne	r2,zero,81118980 <__svfscanf_r+0x810>
81118710:	8880010c 	andi	r2,r17,4
81118714:	10011e26 	beq	r2,zero,81118b90 <__svfscanf_r+0xa20>
81118718:	da009c17 	ldw	r8,624(sp)
8111871c:	3029883a 	mov	r20,r6
81118720:	40800017 	ldw	r2,0(r8)
81118724:	42000104 	addi	r8,r8,4
81118728:	da009c15 	stw	r8,624(sp)
8111872c:	1480000d 	sth	r18,0(r2)
81118730:	003ecc06 	br	81118264 <__reset+0xfb0f8264>
81118734:	a0c00043 	ldbu	r3,1(r20)
81118738:	19410c26 	beq	r3,r5,81118b6c <__svfscanf_r+0x9fc>
8111873c:	8c400054 	ori	r17,r17,1
81118740:	3029883a 	mov	r20,r6
81118744:	003ed506 	br	8111829c <__reset+0xfb0f829c>
81118748:	a0800043 	ldbu	r2,1(r20)
8111874c:	8c400114 	ori	r17,r17,4
81118750:	3029883a 	mov	r20,r6
81118754:	10c03fcc 	andi	r3,r2,255
81118758:	003ed006 	br	8111829c <__reset+0xfb0f829c>
8111875c:	e0800117 	ldw	r2,4(fp)
81118760:	d9809d15 	stw	r6,628(sp)
81118764:	00bf790e 	bge	zero,r2,8111854c <__reset+0xfb0f854c>
81118768:	00a04474 	movhi	r2,33041
8111876c:	108e9504 	addi	r2,r2,14932
81118770:	02000284 	movi	r8,10
81118774:	d880a115 	stw	r2,644(sp)
81118778:	da009e15 	stw	r8,632(sp)
8111877c:	050000c4 	movi	r20,3
81118780:	003f8106 	br	81118588 <__reset+0xfb0f8588>
81118784:	e0800117 	ldw	r2,4(fp)
81118788:	d9809d15 	stw	r6,628(sp)
8111878c:	0080c40e 	bge	zero,r2,81118aa0 <__svfscanf_r+0x930>
81118790:	9800011e 	bne	r19,zero,81118798 <__svfscanf_r+0x628>
81118794:	04c00044 	movi	r19,1
81118798:	8880004c 	andi	r2,r17,1
8111879c:	1000441e 	bne	r2,zero,811188b0 <__svfscanf_r+0x740>
811187a0:	8c40040c 	andi	r17,r17,16
811187a4:	8800da26 	beq	r17,zero,81118b10 <__svfscanf_r+0x9a0>
811187a8:	0021883a 	mov	r16,zero
811187ac:	00000806 	br	811187d0 <__svfscanf_r+0x660>
811187b0:	1887883a 	add	r3,r3,r2
811187b4:	e00b883a 	mov	r5,fp
811187b8:	b009883a 	mov	r4,r22
811187bc:	e0c00015 	stw	r3,0(fp)
811187c0:	80a1883a 	add	r16,r16,r2
811187c4:	98a7c83a 	sub	r19,r19,r2
811187c8:	11134500 	call	81113450 <__srefill_r>
811187cc:	1000ca1e 	bne	r2,zero,81118af8 <__svfscanf_r+0x988>
811187d0:	e0800117 	ldw	r2,4(fp)
811187d4:	e0c00017 	ldw	r3,0(fp)
811187d8:	14fff516 	blt	r2,r19,811187b0 <__reset+0xfb0f87b0>
811187dc:	14c5c83a 	sub	r2,r2,r19
811187e0:	1cd5883a 	add	r10,r3,r19
811187e4:	84e1883a 	add	r16,r16,r19
811187e8:	e0800115 	stw	r2,4(fp)
811187ec:	e2800015 	stw	r10,0(fp)
811187f0:	dd009d17 	ldw	r20,628(sp)
811187f4:	9425883a 	add	r18,r18,r16
811187f8:	a00d883a 	mov	r6,r20
811187fc:	003e9a06 	br	81118268 <__reset+0xfb0f8268>
81118800:	300b883a 	mov	r5,r6
81118804:	d9005884 	addi	r4,sp,354
81118808:	d9809d15 	stw	r6,628(sp)
8111880c:	111e7580 	call	8111e758 <__sccl>
81118810:	1029883a 	mov	r20,r2
81118814:	e0800117 	ldw	r2,4(fp)
81118818:	0081050e 	bge	zero,r2,81118c30 <__svfscanf_r+0xac0>
8111881c:	e1000017 	ldw	r4,0(fp)
81118820:	20800003 	ldbu	r2,0(r4)
81118824:	98005926 	beq	r19,zero,8111898c <__svfscanf_r+0x81c>
81118828:	8c40040c 	andi	r17,r17,16
8111882c:	88005a26 	beq	r17,zero,81118998 <__svfscanf_r+0x828>
81118830:	9823883a 	mov	r17,r19
81118834:	0021883a 	mov	r16,zero
81118838:	00000106 	br	81118840 <__svfscanf_r+0x6d0>
8111883c:	20800003 	ldbu	r2,0(r4)
81118840:	10803fcc 	andi	r2,r2,255
81118844:	d8c05884 	addi	r3,sp,354
81118848:	1885883a 	add	r2,r3,r2
8111884c:	10800007 	ldb	r2,0(r2)
81118850:	1000ad26 	beq	r2,zero,81118b08 <__svfscanf_r+0x998>
81118854:	e0800117 	ldw	r2,4(fp)
81118858:	21000044 	addi	r4,r4,1
8111885c:	84000044 	addi	r16,r16,1
81118860:	10bfffc4 	addi	r2,r2,-1
81118864:	e0800115 	stw	r2,4(fp)
81118868:	e1000015 	stw	r4,0(fp)
8111886c:	84c0a026 	beq	r16,r19,81118af0 <__svfscanf_r+0x980>
81118870:	00bff216 	blt	zero,r2,8111883c <__reset+0xfb0f883c>
81118874:	e00b883a 	mov	r5,fp
81118878:	b009883a 	mov	r4,r22
8111887c:	11134500 	call	81113450 <__srefill_r>
81118880:	10009a1e 	bne	r2,zero,81118aec <__svfscanf_r+0x97c>
81118884:	e1000017 	ldw	r4,0(fp)
81118888:	003fec06 	br	8111883c <__reset+0xfb0f883c>
8111888c:	e0800117 	ldw	r2,4(fp)
81118890:	d9809d15 	stw	r6,628(sp)
81118894:	0080eb0e 	bge	zero,r2,81118c44 <__svfscanf_r+0xad4>
81118898:	00a04474 	movhi	r2,33041
8111889c:	108e9504 	addi	r2,r2,14932
811188a0:	d880a115 	stw	r2,644(sp)
811188a4:	d8009e15 	stw	zero,632(sp)
811188a8:	050000c4 	movi	r20,3
811188ac:	003f3606 	br	81118588 <__reset+0xfb0f8588>
811188b0:	dd409904 	addi	r21,sp,612
811188b4:	8c40040c 	andi	r17,r17,16
811188b8:	01800204 	movi	r6,8
811188bc:	000b883a 	mov	r5,zero
811188c0:	a809883a 	mov	r4,r21
811188c4:	dc409f15 	stw	r17,636(sp)
811188c8:	1112fd40 	call	81112fd4 <memset>
811188cc:	dc409f17 	ldw	r17,636(sp)
811188d0:	88006e26 	beq	r17,zero,81118a8c <__svfscanf_r+0x91c>
811188d4:	0029883a 	mov	r20,zero
811188d8:	0023883a 	mov	r17,zero
811188dc:	111cb740 	call	8111cb74 <__locale_mb_cur_max>
811188e0:	14406126 	beq	r2,r17,81118a68 <__svfscanf_r+0x8f8>
811188e4:	e0800017 	ldw	r2,0(fp)
811188e8:	e0c00117 	ldw	r3,4(fp)
811188ec:	d9000104 	addi	r4,sp,4
811188f0:	12000003 	ldbu	r8,0(r2)
811188f4:	18ffffc4 	addi	r3,r3,-1
811188f8:	10800044 	addi	r2,r2,1
811188fc:	e0c00115 	stw	r3,4(fp)
81118900:	e0800015 	stw	r2,0(fp)
81118904:	8c000044 	addi	r16,r17,1
81118908:	dd400015 	stw	r21,0(sp)
8111890c:	2463883a 	add	r17,r4,r17
81118910:	200d883a 	mov	r6,r4
81118914:	a00b883a 	mov	r5,r20
81118918:	800f883a 	mov	r7,r16
8111891c:	b009883a 	mov	r4,r22
81118920:	8a000005 	stb	r8,0(r17)
81118924:	111cc300 	call	8111cc30 <_mbrtowc_r>
81118928:	017fffc4 	movi	r5,-1
8111892c:	11404e26 	beq	r2,r5,81118a68 <__svfscanf_r+0x8f8>
81118930:	1000601e 	bne	r2,zero,81118ab4 <__svfscanf_r+0x944>
81118934:	da009f17 	ldw	r8,636(sp)
81118938:	4000641e 	bne	r8,zero,81118acc <__svfscanf_r+0x95c>
8111893c:	a0000015 	stw	zero,0(r20)
81118940:	9425883a 	add	r18,r18,r16
81118944:	9967883a 	add	r19,r19,r5
81118948:	a5000104 	addi	r20,r20,4
8111894c:	e0800117 	ldw	r2,4(fp)
81118950:	0023883a 	mov	r17,zero
81118954:	00804b16 	blt	zero,r2,81118a84 <__svfscanf_r+0x914>
81118958:	e00b883a 	mov	r5,fp
8111895c:	b009883a 	mov	r4,r22
81118960:	11134500 	call	81113450 <__srefill_r>
81118964:	10004726 	beq	r2,zero,81118a84 <__svfscanf_r+0x914>
81118968:	88003f1e 	bne	r17,zero,81118a68 <__svfscanf_r+0x8f8>
8111896c:	d8c09f17 	ldw	r3,636(sp)
81118970:	1800031e 	bne	r3,zero,81118980 <__svfscanf_r+0x810>
81118974:	da00a017 	ldw	r8,640(sp)
81118978:	42000044 	addi	r8,r8,1
8111897c:	da00a015 	stw	r8,640(sp)
81118980:	dd009d17 	ldw	r20,628(sp)
81118984:	a00d883a 	mov	r6,r20
81118988:	003e3706 	br	81118268 <__reset+0xfb0f8268>
8111898c:	8c40040c 	andi	r17,r17,16
81118990:	04ffffc4 	movi	r19,-1
81118994:	883fa61e 	bne	r17,zero,81118830 <__reset+0xfb0f8830>
81118998:	da009c17 	ldw	r8,624(sp)
8111899c:	9abfffc4 	addi	r10,r19,-1
811189a0:	44000017 	ldw	r16,0(r8)
811189a4:	44400104 	addi	r17,r8,4
811189a8:	8007883a 	mov	r3,r16
811189ac:	82ab883a 	add	r21,r16,r10
811189b0:	00000306 	br	811189c0 <__svfscanf_r+0x850>
811189b4:	e1000017 	ldw	r4,0(fp)
811189b8:	9807883a 	mov	r3,r19
811189bc:	20800003 	ldbu	r2,0(r4)
811189c0:	10803fcc 	andi	r2,r2,255
811189c4:	d9405884 	addi	r5,sp,354
811189c8:	2885883a 	add	r2,r5,r2
811189cc:	10800007 	ldb	r2,0(r2)
811189d0:	10004b26 	beq	r2,zero,81118b00 <__svfscanf_r+0x990>
811189d4:	e0800117 	ldw	r2,4(fp)
811189d8:	21400044 	addi	r5,r4,1
811189dc:	e1400015 	stw	r5,0(fp)
811189e0:	10bfffc4 	addi	r2,r2,-1
811189e4:	e0800115 	stw	r2,4(fp)
811189e8:	20800003 	ldbu	r2,0(r4)
811189ec:	1cc00044 	addi	r19,r3,1
811189f0:	18800005 	stb	r2,0(r3)
811189f4:	1d400726 	beq	r3,r21,81118a14 <__svfscanf_r+0x8a4>
811189f8:	e0800117 	ldw	r2,4(fp)
811189fc:	00bfed16 	blt	zero,r2,811189b4 <__reset+0xfb0f89b4>
81118a00:	e00b883a 	mov	r5,fp
81118a04:	b009883a 	mov	r4,r22
81118a08:	11134500 	call	81113450 <__srefill_r>
81118a0c:	103fe926 	beq	r2,zero,811189b4 <__reset+0xfb0f89b4>
81118a10:	84c01526 	beq	r16,r19,81118a68 <__svfscanf_r+0x8f8>
81118a14:	9c21c83a 	sub	r16,r19,r16
81118a18:	803e1726 	beq	r16,zero,81118278 <__reset+0xfb0f8278>
81118a1c:	da00a017 	ldw	r8,640(sp)
81118a20:	98000005 	stb	zero,0(r19)
81118a24:	dc409c15 	stw	r17,624(sp)
81118a28:	42000044 	addi	r8,r8,1
81118a2c:	da00a015 	stw	r8,640(sp)
81118a30:	9425883a 	add	r18,r18,r16
81118a34:	a00d883a 	mov	r6,r20
81118a38:	003e0b06 	br	81118268 <__reset+0xfb0f8268>
81118a3c:	017fff84 	movi	r5,-2
81118a40:	11439b1e 	bne	r2,r5,811198b0 <__svfscanf_r+0x1740>
81118a44:	8821883a 	mov	r16,r17
81118a48:	e0800117 	ldw	r2,4(fp)
81118a4c:	0082e516 	blt	zero,r2,811195e4 <__svfscanf_r+0x1474>
81118a50:	e00b883a 	mov	r5,fp
81118a54:	b009883a 	mov	r4,r22
81118a58:	11134500 	call	81113450 <__srefill_r>
81118a5c:	1002e126 	beq	r2,zero,811195e4 <__svfscanf_r+0x1474>
81118a60:	dc409f17 	ldw	r17,636(sp)
81118a64:	8002e826 	beq	r16,zero,81119608 <__svfscanf_r+0x1498>
81118a68:	da00a017 	ldw	r8,640(sp)
81118a6c:	403e9c26 	beq	r8,zero,811184e0 <__reset+0xfb0f84e0>
81118a70:	e080030b 	ldhu	r2,12(fp)
81118a74:	1080100c 	andi	r2,r2,64
81118a78:	103e991e 	bne	r2,zero,811184e0 <__reset+0xfb0f84e0>
81118a7c:	4005883a 	mov	r2,r8
81118a80:	003e9806 	br	811184e4 <__reset+0xfb0f84e4>
81118a84:	983f951e 	bne	r19,zero,811188dc <__reset+0xfb0f88dc>
81118a88:	003fb806 	br	8111896c <__reset+0xfb0f896c>
81118a8c:	da009c17 	ldw	r8,624(sp)
81118a90:	45000017 	ldw	r20,0(r8)
81118a94:	42000104 	addi	r8,r8,4
81118a98:	da009c15 	stw	r8,624(sp)
81118a9c:	003f8e06 	br	811188d8 <__reset+0xfb0f88d8>
81118aa0:	e00b883a 	mov	r5,fp
81118aa4:	b009883a 	mov	r4,r22
81118aa8:	11134500 	call	81113450 <__srefill_r>
81118aac:	103f3826 	beq	r2,zero,81118790 <__reset+0xfb0f8790>
81118ab0:	003fed06 	br	81118a68 <__reset+0xfb0f8a68>
81118ab4:	00ffff84 	movi	r3,-2
81118ab8:	10c0071e 	bne	r2,r3,81118ad8 <__svfscanf_r+0x968>
81118abc:	e0800117 	ldw	r2,4(fp)
81118ac0:	8023883a 	mov	r17,r16
81118ac4:	00bf8516 	blt	zero,r2,811188dc <__reset+0xfb0f88dc>
81118ac8:	003fa306 	br	81118958 <__reset+0xfb0f8958>
81118acc:	9425883a 	add	r18,r18,r16
81118ad0:	9cffffc4 	addi	r19,r19,-1
81118ad4:	003f9d06 	br	8111894c <__reset+0xfb0f894c>
81118ad8:	da009f17 	ldw	r8,636(sp)
81118adc:	9425883a 	add	r18,r18,r16
81118ae0:	9cffffc4 	addi	r19,r19,-1
81118ae4:	403f9826 	beq	r8,zero,81118948 <__reset+0xfb0f8948>
81118ae8:	003f9806 	br	8111894c <__reset+0xfb0f894c>
81118aec:	8023883a 	mov	r17,r16
81118af0:	8821883a 	mov	r16,r17
81118af4:	003fce06 	br	81118a30 <__reset+0xfb0f8a30>
81118af8:	803f3d1e 	bne	r16,zero,811187f0 <__reset+0xfb0f87f0>
81118afc:	003fda06 	br	81118a68 <__reset+0xfb0f8a68>
81118b00:	1827883a 	mov	r19,r3
81118b04:	003fc306 	br	81118a14 <__reset+0xfb0f8a14>
81118b08:	803fc91e 	bne	r16,zero,81118a30 <__reset+0xfb0f8a30>
81118b0c:	003dda06 	br	81118278 <__reset+0xfb0f8278>
81118b10:	da009c17 	ldw	r8,624(sp)
81118b14:	df000015 	stw	fp,0(sp)
81118b18:	980f883a 	mov	r7,r19
81118b1c:	41400017 	ldw	r5,0(r8)
81118b20:	01800044 	movi	r6,1
81118b24:	b009883a 	mov	r4,r22
81118b28:	111bd480 	call	8111bd48 <_fread_r>
81118b2c:	da009c17 	ldw	r8,624(sp)
81118b30:	40c00104 	addi	r3,r8,4
81118b34:	103fcc26 	beq	r2,zero,81118a68 <__reset+0xfb0f8a68>
81118b38:	da00a017 	ldw	r8,640(sp)
81118b3c:	dd009d17 	ldw	r20,628(sp)
81118b40:	90a5883a 	add	r18,r18,r2
81118b44:	42000044 	addi	r8,r8,1
81118b48:	da00a015 	stw	r8,640(sp)
81118b4c:	d8c09c15 	stw	r3,624(sp)
81118b50:	a00d883a 	mov	r6,r20
81118b54:	003dc406 	br	81118268 <__reset+0xfb0f8268>
81118b58:	e00b883a 	mov	r5,fp
81118b5c:	b009883a 	mov	r4,r22
81118b60:	11134500 	call	81113450 <__srefill_r>
81118b64:	103e5226 	beq	r2,zero,811184b0 <__reset+0xfb0f84b0>
81118b68:	003fbf06 	br	81118a68 <__reset+0xfb0f8a68>
81118b6c:	a0800083 	ldbu	r2,2(r20)
81118b70:	8c400094 	ori	r17,r17,2
81118b74:	a5000084 	addi	r20,r20,2
81118b78:	10c03fcc 	andi	r3,r2,255
81118b7c:	003dc706 	br	8111829c <__reset+0xfb0f829c>
81118b80:	e0800117 	ldw	r2,4(fp)
81118b84:	88e2b03a 	or	r17,r17,r3
81118b88:	00bef716 	blt	zero,r2,81118768 <__reset+0xfb0f8768>
81118b8c:	003e6f06 	br	8111854c <__reset+0xfb0f854c>
81118b90:	8880004c 	andi	r2,r17,1
81118b94:	10000b1e 	bne	r2,zero,81118bc4 <__svfscanf_r+0xa54>
81118b98:	8c40008c 	andi	r17,r17,2
81118b9c:	88000926 	beq	r17,zero,81118bc4 <__svfscanf_r+0xa54>
81118ba0:	da009c17 	ldw	r8,624(sp)
81118ba4:	9007d7fa 	srai	r3,r18,31
81118ba8:	dd009d17 	ldw	r20,628(sp)
81118bac:	40800017 	ldw	r2,0(r8)
81118bb0:	42000104 	addi	r8,r8,4
81118bb4:	da009c15 	stw	r8,624(sp)
81118bb8:	14800015 	stw	r18,0(r2)
81118bbc:	10c00115 	stw	r3,4(r2)
81118bc0:	003da806 	br	81118264 <__reset+0xfb0f8264>
81118bc4:	da009c17 	ldw	r8,624(sp)
81118bc8:	dd009d17 	ldw	r20,628(sp)
81118bcc:	40800017 	ldw	r2,0(r8)
81118bd0:	42000104 	addi	r8,r8,4
81118bd4:	da009c15 	stw	r8,624(sp)
81118bd8:	14800015 	stw	r18,0(r2)
81118bdc:	003da106 	br	81118264 <__reset+0xfb0f8264>
81118be0:	e00b883a 	mov	r5,fp
81118be4:	b009883a 	mov	r4,r22
81118be8:	11134500 	call	81113450 <__srefill_r>
81118bec:	103f9e1e 	bne	r2,zero,81118a68 <__reset+0xfb0f8a68>
81118bf0:	b9c00017 	ldw	r7,0(r23)
81118bf4:	05000104 	movi	r20,4
81118bf8:	003e6306 	br	81118588 <__reset+0xfb0f8588>
81118bfc:	e00b883a 	mov	r5,fp
81118c00:	b009883a 	mov	r4,r22
81118c04:	11134500 	call	81113450 <__srefill_r>
81118c08:	103f971e 	bne	r2,zero,81118a68 <__reset+0xfb0f8a68>
81118c0c:	b9c00017 	ldw	r7,0(r23)
81118c10:	003e5706 	br	81118570 <__reset+0xfb0f8570>
81118c14:	e00b883a 	mov	r5,fp
81118c18:	b009883a 	mov	r4,r22
81118c1c:	11134500 	call	81113450 <__srefill_r>
81118c20:	103f911e 	bne	r2,zero,81118a68 <__reset+0xfb0f8a68>
81118c24:	b9c00017 	ldw	r7,0(r23)
81118c28:	05000084 	movi	r20,2
81118c2c:	003e5606 	br	81118588 <__reset+0xfb0f8588>
81118c30:	e00b883a 	mov	r5,fp
81118c34:	b009883a 	mov	r4,r22
81118c38:	11134500 	call	81113450 <__srefill_r>
81118c3c:	103ef726 	beq	r2,zero,8111881c <__reset+0xfb0f881c>
81118c40:	003f8906 	br	81118a68 <__reset+0xfb0f8a68>
81118c44:	e00b883a 	mov	r5,fp
81118c48:	b009883a 	mov	r4,r22
81118c4c:	11134500 	call	81113450 <__srefill_r>
81118c50:	103f851e 	bne	r2,zero,81118a68 <__reset+0xfb0f8a68>
81118c54:	b9c00017 	ldw	r7,0(r23)
81118c58:	003f0f06 	br	81118898 <__reset+0xfb0f8898>
81118c5c:	014000c4 	movi	r5,3
81118c60:	a1414a26 	beq	r20,r5,8111918c <__svfscanf_r+0x101c>
81118c64:	01000104 	movi	r4,4
81118c68:	a101f11e 	bne	r20,r4,81119430 <__svfscanf_r+0x12c0>
81118c6c:	b009883a 	mov	r4,r22
81118c70:	111cb980 	call	8111cb98 <_localeconv_r>
81118c74:	10800017 	ldw	r2,0(r2)
81118c78:	98ffffc4 	addi	r3,r19,-1
81118c7c:	d880a315 	stw	r2,652(sp)
81118c80:	00805704 	movi	r2,348
81118c84:	10c21e2e 	bgeu	r2,r3,81119500 <__svfscanf_r+0x1390>
81118c88:	9cffa8c4 	addi	r19,r19,-349
81118c8c:	dcc0a215 	stw	r19,648(sp)
81118c90:	04c05744 	movi	r19,349
81118c94:	8d01e014 	ori	r20,r17,1920
81118c98:	0023883a 	mov	r17,zero
81118c9c:	dc000104 	addi	r16,sp,4
81118ca0:	8805883a 	mov	r2,r17
81118ca4:	0019883a 	mov	r12,zero
81118ca8:	8023883a 	mov	r17,r16
81118cac:	b007883a 	mov	r3,r22
81118cb0:	9821883a 	mov	r16,r19
81118cb4:	002b883a 	mov	r21,zero
81118cb8:	d800a515 	stw	zero,660(sp)
81118cbc:	d800a415 	stw	zero,656(sp)
81118cc0:	d8009f15 	stw	zero,636(sp)
81118cc4:	01c01384 	movi	r7,78
81118cc8:	602d883a 	mov	r22,r12
81118ccc:	1027883a 	mov	r19,r2
81118cd0:	e1000017 	ldw	r4,0(fp)
81118cd4:	21400003 	ldbu	r5,0(r4)
81118cd8:	28bff544 	addi	r2,r5,-43
81118cdc:	10803fcc 	andi	r2,r2,255
81118ce0:	38810e36 	bltu	r7,r2,8111911c <__svfscanf_r+0xfac>
81118ce4:	100490ba 	slli	r2,r2,2
81118ce8:	01a044b4 	movhi	r6,33042
81118cec:	31a33f04 	addi	r6,r6,-29444
81118cf0:	1185883a 	add	r2,r2,r6
81118cf4:	10800017 	ldw	r2,0(r2)
81118cf8:	1000683a 	jmp	r2
81118cfc:	81118ff4 	orhi	r4,r16,17983
81118d00:	8111911c 	xori	r4,r16,17988
81118d04:	81118ff4 	orhi	r4,r16,17983
81118d08:	8111911c 	xori	r4,r16,17988
81118d0c:	8111911c 	xori	r4,r16,17988
81118d10:	81118fc8 	cmpgei	r4,r16,17983
81118d14:	81118e38 	rdprs	r4,r16,17976
81118d18:	81118e38 	rdprs	r4,r16,17976
81118d1c:	81118e38 	rdprs	r4,r16,17976
81118d20:	81118e38 	rdprs	r4,r16,17976
81118d24:	81118e38 	rdprs	r4,r16,17976
81118d28:	81118e38 	rdprs	r4,r16,17976
81118d2c:	81118e38 	rdprs	r4,r16,17976
81118d30:	81118e38 	rdprs	r4,r16,17976
81118d34:	81118e38 	rdprs	r4,r16,17976
81118d38:	8111911c 	xori	r4,r16,17988
81118d3c:	8111911c 	xori	r4,r16,17988
81118d40:	8111911c 	xori	r4,r16,17988
81118d44:	8111911c 	xori	r4,r16,17988
81118d48:	8111911c 	xori	r4,r16,17988
81118d4c:	8111911c 	xori	r4,r16,17988
81118d50:	8111911c 	xori	r4,r16,17988
81118d54:	8111910c 	andi	r4,r16,17988
81118d58:	8111911c 	xori	r4,r16,17988
81118d5c:	8111911c 	xori	r4,r16,17988
81118d60:	8111911c 	xori	r4,r16,17988
81118d64:	811190c8 	cmpgei	r4,r16,17987
81118d68:	811190ac 	andhi	r4,r16,17986
81118d6c:	8111911c 	xori	r4,r16,17988
81118d70:	8111911c 	xori	r4,r16,17988
81118d74:	81119078 	rdprs	r4,r16,17985
81118d78:	8111911c 	xori	r4,r16,17988
81118d7c:	8111911c 	xori	r4,r16,17988
81118d80:	8111911c 	xori	r4,r16,17988
81118d84:	8111911c 	xori	r4,r16,17988
81118d88:	81119040 	call	88111904 <__reset+0x20f1904>
81118d8c:	8111911c 	xori	r4,r16,17988
81118d90:	8111911c 	xori	r4,r16,17988
81118d94:	8111911c 	xori	r4,r16,17988
81118d98:	8111911c 	xori	r4,r16,17988
81118d9c:	8111911c 	xori	r4,r16,17988
81118da0:	81119024 	muli	r4,r16,17984
81118da4:	8111911c 	xori	r4,r16,17988
81118da8:	8111911c 	xori	r4,r16,17988
81118dac:	8111911c 	xori	r4,r16,17988
81118db0:	8111911c 	xori	r4,r16,17988
81118db4:	81119008 	cmpgei	r4,r16,17984
81118db8:	8111911c 	xori	r4,r16,17988
81118dbc:	8111911c 	xori	r4,r16,17988
81118dc0:	8111911c 	xori	r4,r16,17988
81118dc4:	8111911c 	xori	r4,r16,17988
81118dc8:	8111911c 	xori	r4,r16,17988
81118dcc:	8111911c 	xori	r4,r16,17988
81118dd0:	8111911c 	xori	r4,r16,17988
81118dd4:	8111910c 	andi	r4,r16,17988
81118dd8:	8111911c 	xori	r4,r16,17988
81118ddc:	8111911c 	xori	r4,r16,17988
81118de0:	8111911c 	xori	r4,r16,17988
81118de4:	811190c8 	cmpgei	r4,r16,17987
81118de8:	811190ac 	andhi	r4,r16,17986
81118dec:	8111911c 	xori	r4,r16,17988
81118df0:	8111911c 	xori	r4,r16,17988
81118df4:	81119078 	rdprs	r4,r16,17985
81118df8:	8111911c 	xori	r4,r16,17988
81118dfc:	8111911c 	xori	r4,r16,17988
81118e00:	8111911c 	xori	r4,r16,17988
81118e04:	8111911c 	xori	r4,r16,17988
81118e08:	81119040 	call	88111904 <__reset+0x20f1904>
81118e0c:	8111911c 	xori	r4,r16,17988
81118e10:	8111911c 	xori	r4,r16,17988
81118e14:	8111911c 	xori	r4,r16,17988
81118e18:	8111911c 	xori	r4,r16,17988
81118e1c:	8111911c 	xori	r4,r16,17988
81118e20:	81119024 	muli	r4,r16,17984
81118e24:	8111911c 	xori	r4,r16,17988
81118e28:	8111911c 	xori	r4,r16,17988
81118e2c:	8111911c 	xori	r4,r16,17988
81118e30:	8111911c 	xori	r4,r16,17988
81118e34:	81119008 	cmpgei	r4,r16,17984
81118e38:	a8803fcc 	andi	r2,r21,255
81118e3c:	1080201c 	xori	r2,r2,128
81118e40:	10bfe004 	addi	r2,r2,-128
81118e44:	b085883a 	add	r2,r22,r2
81118e48:	10000d1e 	bne	r2,zero,81118e80 <__svfscanf_r+0xd10>
81118e4c:	00bf9fc4 	movi	r2,-385
81118e50:	a0a8703a 	and	r20,r20,r2
81118e54:	89400005 	stb	r5,0(r17)
81118e58:	8c400044 	addi	r17,r17,1
81118e5c:	e0800117 	ldw	r2,4(fp)
81118e60:	843fffc4 	addi	r16,r16,-1
81118e64:	94800044 	addi	r18,r18,1
81118e68:	10bfffc4 	addi	r2,r2,-1
81118e6c:	e0800115 	stw	r2,4(fp)
81118e70:	0080b40e 	bge	zero,r2,81119144 <__svfscanf_r+0xfd4>
81118e74:	21000044 	addi	r4,r4,1
81118e78:	e1000015 	stw	r4,0(fp)
81118e7c:	803f941e 	bne	r16,zero,81118cd0 <__reset+0xfb0f8cd0>
81118e80:	8821883a 	mov	r16,r17
81118e84:	b019883a 	mov	r12,r22
81118e88:	9823883a 	mov	r17,r19
81118e8c:	182d883a 	mov	r22,r3
81118e90:	9801961e 	bne	r19,zero,811194ec <__svfscanf_r+0x137c>
81118e94:	633fffc4 	addi	r12,r12,-1
81118e98:	00800044 	movi	r2,1
81118e9c:	1302882e 	bgeu	r2,r12,811198c0 <__svfscanf_r+0x1750>
81118ea0:	a8803fcc 	andi	r2,r21,255
81118ea4:	1080201c 	xori	r2,r2,128
81118ea8:	10bfe004 	addi	r2,r2,-128
81118eac:	113fffc4 	addi	r4,r2,-1
81118eb0:	01400184 	movi	r5,6
81118eb4:	29001136 	bltu	r5,r4,81118efc <__svfscanf_r+0xd8c>
81118eb8:	01000084 	movi	r4,2
81118ebc:	2082900e 	bge	r4,r2,81119900 <__svfscanf_r+0x1790>
81118ec0:	00c000c4 	movi	r3,3
81118ec4:	10c00d26 	beq	r2,r3,81118efc <__svfscanf_r+0xd8c>
81118ec8:	9425c83a 	sub	r18,r18,r16
81118ecc:	1827883a 	mov	r19,r3
81118ed0:	843fffc4 	addi	r16,r16,-1
81118ed4:	81400007 	ldb	r5,0(r16)
81118ed8:	e00d883a 	mov	r6,fp
81118edc:	b009883a 	mov	r4,r22
81118ee0:	1121dc80 	call	81121dc8 <_ungetc_r>
81118ee4:	a8bfffc4 	addi	r2,r21,-1
81118ee8:	10c03fcc 	andi	r3,r2,255
81118eec:	8493883a 	add	r9,r16,r18
81118ef0:	102b883a 	mov	r21,r2
81118ef4:	98fff636 	bltu	r19,r3,81118ed0 <__reset+0xfb0f8ed0>
81118ef8:	4825883a 	mov	r18,r9
81118efc:	a080400c 	andi	r2,r20,256
81118f00:	10001426 	beq	r2,zero,81118f54 <__svfscanf_r+0xde4>
81118f04:	a081000c 	andi	r2,r20,1024
81118f08:	1002571e 	bne	r2,zero,81119868 <__svfscanf_r+0x16f8>
81118f0c:	817fffc7 	ldb	r5,-1(r16)
81118f10:	00801944 	movi	r2,101
81118f14:	84ffffc4 	addi	r19,r16,-1
81118f18:	957fffc4 	addi	r21,r18,-1
81118f1c:	28800826 	beq	r5,r2,81118f40 <__svfscanf_r+0xdd0>
81118f20:	00801144 	movi	r2,69
81118f24:	28800626 	beq	r5,r2,81118f40 <__svfscanf_r+0xdd0>
81118f28:	e00d883a 	mov	r6,fp
81118f2c:	b009883a 	mov	r4,r22
81118f30:	1121dc80 	call	81121dc8 <_ungetc_r>
81118f34:	817fff87 	ldb	r5,-2(r16)
81118f38:	84ffff84 	addi	r19,r16,-2
81118f3c:	957fff84 	addi	r21,r18,-2
81118f40:	e00d883a 	mov	r6,fp
81118f44:	b009883a 	mov	r4,r22
81118f48:	1121dc80 	call	81121dc8 <_ungetc_r>
81118f4c:	a825883a 	mov	r18,r21
81118f50:	9821883a 	mov	r16,r19
81118f54:	a080040c 	andi	r2,r20,16
81118f58:	103e891e 	bne	r2,zero,81118980 <__reset+0xfb0f8980>
81118f5c:	80000005 	stb	zero,0(r16)
81118f60:	a081800c 	andi	r2,r20,1536
81118f64:	01010004 	movi	r4,1024
81118f68:	1101dd26 	beq	r2,r4,811196e0 <__svfscanf_r+0x1570>
81118f6c:	da00a417 	ldw	r8,656(sp)
81118f70:	4001e71e 	bne	r8,zero,81119710 <__svfscanf_r+0x15a0>
81118f74:	000d883a 	mov	r6,zero
81118f78:	d9400104 	addi	r5,sp,4
81118f7c:	b009883a 	mov	r4,r22
81118f80:	111e9780 	call	8111e978 <_strtod_r>
81118f84:	1021883a 	mov	r16,r2
81118f88:	a080004c 	andi	r2,r20,1
81118f8c:	1000021e 	bne	r2,zero,81118f98 <__svfscanf_r+0xe28>
81118f90:	a2c0008c 	andi	r11,r20,2
81118f94:	5801e826 	beq	r11,zero,81119738 <__svfscanf_r+0x15c8>
81118f98:	da009c17 	ldw	r8,624(sp)
81118f9c:	40800017 	ldw	r2,0(r8)
81118fa0:	42000104 	addi	r8,r8,4
81118fa4:	da009c15 	stw	r8,624(sp)
81118fa8:	14000015 	stw	r16,0(r2)
81118fac:	10c00115 	stw	r3,4(r2)
81118fb0:	da00a017 	ldw	r8,640(sp)
81118fb4:	dd009d17 	ldw	r20,628(sp)
81118fb8:	42000044 	addi	r8,r8,1
81118fbc:	da00a015 	stw	r8,640(sp)
81118fc0:	a00d883a 	mov	r6,r20
81118fc4:	003ca806 	br	81118268 <__reset+0xfb0f8268>
81118fc8:	a080400c 	andi	r2,r20,256
81118fcc:	103f9a26 	beq	r2,zero,81118e38 <__reset+0xfb0f8e38>
81118fd0:	da00a217 	ldw	r8,648(sp)
81118fd4:	00bfdfc4 	movi	r2,-129
81118fd8:	a0a8703a 	and	r20,r20,r2
81118fdc:	9cc00044 	addi	r19,r19,1
81118fe0:	403f9e26 	beq	r8,zero,81118e5c <__reset+0xfb0f8e5c>
81118fe4:	423fffc4 	addi	r8,r8,-1
81118fe8:	da00a215 	stw	r8,648(sp)
81118fec:	84000044 	addi	r16,r16,1
81118ff0:	003f9a06 	br	81118e5c <__reset+0xfb0f8e5c>
81118ff4:	a080200c 	andi	r2,r20,128
81118ff8:	103fa126 	beq	r2,zero,81118e80 <__reset+0xfb0f8e80>
81118ffc:	00bfdfc4 	movi	r2,-129
81119000:	a0a8703a 	and	r20,r20,r2
81119004:	003f9306 	br	81118e54 <__reset+0xfb0f8e54>
81119008:	a8803fcc 	andi	r2,r21,255
8111900c:	1080201c 	xori	r2,r2,128
81119010:	10bfe004 	addi	r2,r2,-128
81119014:	020001c4 	movi	r8,7
81119018:	123f991e 	bne	r2,r8,81118e80 <__reset+0xfb0f8e80>
8111901c:	05400204 	movi	r21,8
81119020:	003f8c06 	br	81118e54 <__reset+0xfb0f8e54>
81119024:	a8803fcc 	andi	r2,r21,255
81119028:	1080201c 	xori	r2,r2,128
8111902c:	10bfe004 	addi	r2,r2,-128
81119030:	01800184 	movi	r6,6
81119034:	11bf921e 	bne	r2,r6,81118e80 <__reset+0xfb0f8e80>
81119038:	054001c4 	movi	r21,7
8111903c:	003f8506 	br	81118e54 <__reset+0xfb0f8e54>
81119040:	b000491e 	bne	r22,zero,81119168 <__svfscanf_r+0xff8>
81119044:	9800031e 	bne	r19,zero,81119054 <__svfscanf_r+0xee4>
81119048:	a081c00c 	andi	r2,r20,1792
8111904c:	0181c004 	movi	r6,1792
81119050:	11819f26 	beq	r2,r6,811196d0 <__svfscanf_r+0x1560>
81119054:	a8803fcc 	andi	r2,r21,255
81119058:	1080201c 	xori	r2,r2,128
8111905c:	10bfe004 	addi	r2,r2,-128
81119060:	01800044 	movi	r6,1
81119064:	11800226 	beq	r2,r6,81119070 <__svfscanf_r+0xf00>
81119068:	01800104 	movi	r6,4
8111906c:	11bf841e 	bne	r2,r6,81118e80 <__reset+0xfb0f8e80>
81119070:	ad400044 	addi	r21,r21,1
81119074:	003f7706 	br	81118e54 <__reset+0xfb0f8e54>
81119078:	a8803fcc 	andi	r2,r21,255
8111907c:	1080201c 	xori	r2,r2,128
81119080:	10bfe004 	addi	r2,r2,-128
81119084:	10003c1e 	bne	r2,zero,81119178 <__svfscanf_r+0x1008>
81119088:	9801141e 	bne	r19,zero,811194dc <__svfscanf_r+0x136c>
8111908c:	a081c00c 	andi	r2,r20,1792
81119090:	0181c004 	movi	r6,1792
81119094:	11818226 	beq	r2,r6,811196a0 <__svfscanf_r+0x1530>
81119098:	8821883a 	mov	r16,r17
8111909c:	b019883a 	mov	r12,r22
811190a0:	9823883a 	mov	r17,r19
811190a4:	182d883a 	mov	r22,r3
811190a8:	003f7a06 	br	81118e94 <__reset+0xfb0f8e94>
811190ac:	a8803fcc 	andi	r2,r21,255
811190b0:	1080201c 	xori	r2,r2,128
811190b4:	10bfe004 	addi	r2,r2,-128
811190b8:	01800084 	movi	r6,2
811190bc:	11bf701e 	bne	r2,r6,81118e80 <__reset+0xfb0f8e80>
811190c0:	054000c4 	movi	r21,3
811190c4:	003f6306 	br	81118e54 <__reset+0xfb0f8e54>
811190c8:	a081400c 	andi	r2,r20,1280
811190cc:	01810004 	movi	r6,1024
811190d0:	11800326 	beq	r2,r6,811190e0 <__svfscanf_r+0xf70>
811190d4:	a184703a 	and	r2,r20,r6
811190d8:	103f6926 	beq	r2,zero,81118e80 <__reset+0xfb0f8e80>
811190dc:	983fee26 	beq	r19,zero,81119098 <__reset+0xfb0f9098>
811190e0:	a080800c 	andi	r2,r20,512
811190e4:	1000041e 	bne	r2,zero,811190f8 <__svfscanf_r+0xf88>
811190e8:	da009f17 	ldw	r8,636(sp)
811190ec:	dc40a515 	stw	r17,660(sp)
811190f0:	9a27c83a 	sub	r19,r19,r8
811190f4:	dcc0a415 	stw	r19,656(sp)
811190f8:	00be1fc4 	movi	r2,-1921
811190fc:	a0a8703a 	and	r20,r20,r2
81119100:	a5006014 	ori	r20,r20,384
81119104:	0027883a 	mov	r19,zero
81119108:	003f5206 	br	81118e54 <__reset+0xfb0f8e54>
8111910c:	00800044 	movi	r2,1
81119110:	b0bf5b1e 	bne	r22,r2,81118e80 <__reset+0xfb0f8e80>
81119114:	05800084 	movi	r22,2
81119118:	003f4e06 	br	81118e54 <__reset+0xfb0f8e54>
8111911c:	d980a317 	ldw	r6,652(sp)
81119120:	30800003 	ldbu	r2,0(r6)
81119124:	29803fcc 	andi	r6,r5,255
81119128:	30bf551e 	bne	r6,r2,81118e80 <__reset+0xfb0f8e80>
8111912c:	a080800c 	andi	r2,r20,512
81119130:	103f5326 	beq	r2,zero,81118e80 <__reset+0xfb0f8e80>
81119134:	023f5fc4 	movi	r8,-641
81119138:	a228703a 	and	r20,r20,r8
8111913c:	dcc09f15 	stw	r19,636(sp)
81119140:	003f4406 	br	81118e54 <__reset+0xfb0f8e54>
81119144:	1809883a 	mov	r4,r3
81119148:	e00b883a 	mov	r5,fp
8111914c:	d8c0a615 	stw	r3,664(sp)
81119150:	d9c0aa15 	stw	r7,680(sp)
81119154:	11134500 	call	81113450 <__srefill_r>
81119158:	d8c0a617 	ldw	r3,664(sp)
8111915c:	d9c0aa17 	ldw	r7,680(sp)
81119160:	103f4626 	beq	r2,zero,81118e7c <__reset+0xfb0f8e7c>
81119164:	003f4606 	br	81118e80 <__reset+0xfb0f8e80>
81119168:	00800084 	movi	r2,2
8111916c:	b0bfb91e 	bne	r22,r2,81119054 <__reset+0xfb0f9054>
81119170:	058000c4 	movi	r22,3
81119174:	003f3706 	br	81118e54 <__reset+0xfb0f8e54>
81119178:	018000c4 	movi	r6,3
8111917c:	11bfbc26 	beq	r2,r6,81119070 <__reset+0xfb0f9070>
81119180:	01800144 	movi	r6,5
81119184:	11bfba26 	beq	r2,r6,81119070 <__reset+0xfb0f9070>
81119188:	003f3d06 	br	81118e80 <__reset+0xfb0f8e80>
8111918c:	98bfffc4 	addi	r2,r19,-1
81119190:	01405704 	movi	r5,348
81119194:	2880d82e 	bgeu	r5,r2,811194f8 <__svfscanf_r+0x1388>
81119198:	99ffa8c4 	addi	r7,r19,-349
8111919c:	04c05744 	movi	r19,349
811191a0:	8c436014 	ori	r17,r17,3456
811191a4:	9013883a 	mov	r9,r18
811191a8:	8825883a 	mov	r18,r17
811191ac:	dc409e17 	ldw	r17,632(sp)
811191b0:	0029883a 	mov	r20,zero
811191b4:	dc000104 	addi	r16,sp,4
811191b8:	05401344 	movi	r21,77
811191bc:	02c08004 	movi	r11,512
811191c0:	01bf7fc4 	movi	r6,-513
811191c4:	023fdfc4 	movi	r8,-129
811191c8:	20bff544 	addi	r2,r4,-43
811191cc:	10803fcc 	andi	r2,r2,255
811191d0:	a8807236 	bltu	r21,r2,8111939c <__svfscanf_r+0x122c>
811191d4:	100490ba 	slli	r2,r2,2
811191d8:	016044b4 	movhi	r5,33042
811191dc:	29647b04 	addi	r5,r5,-28180
811191e0:	1145883a 	add	r2,r2,r5
811191e4:	10800017 	ldw	r2,0(r2)
811191e8:	1000683a 	jmp	r2
811191ec:	81119420 	cmpeqi	r4,r16,18000
811191f0:	8111939c 	xori	r4,r16,17998
811191f4:	81119420 	cmpeqi	r4,r16,18000
811191f8:	8111939c 	xori	r4,r16,17998
811191fc:	8111939c 	xori	r4,r16,17998
81119200:	811193f8 	rdprs	r4,r16,17999
81119204:	811193d8 	cmpnei	r4,r16,17999
81119208:	811193d8 	cmpnei	r4,r16,17999
8111920c:	811193d8 	cmpnei	r4,r16,17999
81119210:	811193d8 	cmpnei	r4,r16,17999
81119214:	811193d8 	cmpnei	r4,r16,17999
81119218:	811193d8 	cmpnei	r4,r16,17999
8111921c:	811193d8 	cmpnei	r4,r16,17999
81119220:	81119380 	call	88111938 <__reset+0x20f1938>
81119224:	81119380 	call	88111938 <__reset+0x20f1938>
81119228:	8111939c 	xori	r4,r16,17998
8111922c:	8111939c 	xori	r4,r16,17998
81119230:	8111939c 	xori	r4,r16,17998
81119234:	8111939c 	xori	r4,r16,17998
81119238:	8111939c 	xori	r4,r16,17998
8111923c:	8111939c 	xori	r4,r16,17998
81119240:	8111939c 	xori	r4,r16,17998
81119244:	8111936c 	andhi	r4,r16,17997
81119248:	8111936c 	andhi	r4,r16,17997
8111924c:	8111936c 	andhi	r4,r16,17997
81119250:	8111936c 	andhi	r4,r16,17997
81119254:	8111936c 	andhi	r4,r16,17997
81119258:	8111936c 	andhi	r4,r16,17997
8111925c:	8111939c 	xori	r4,r16,17998
81119260:	8111939c 	xori	r4,r16,17998
81119264:	8111939c 	xori	r4,r16,17998
81119268:	8111939c 	xori	r4,r16,17998
8111926c:	8111939c 	xori	r4,r16,17998
81119270:	8111939c 	xori	r4,r16,17998
81119274:	8111939c 	xori	r4,r16,17998
81119278:	8111939c 	xori	r4,r16,17998
8111927c:	8111939c 	xori	r4,r16,17998
81119280:	8111939c 	xori	r4,r16,17998
81119284:	8111939c 	xori	r4,r16,17998
81119288:	8111939c 	xori	r4,r16,17998
8111928c:	8111939c 	xori	r4,r16,17998
81119290:	8111939c 	xori	r4,r16,17998
81119294:	8111939c 	xori	r4,r16,17998
81119298:	8111939c 	xori	r4,r16,17998
8111929c:	8111939c 	xori	r4,r16,17998
811192a0:	81119324 	muli	r4,r16,17996
811192a4:	8111939c 	xori	r4,r16,17998
811192a8:	8111939c 	xori	r4,r16,17998
811192ac:	8111939c 	xori	r4,r16,17998
811192b0:	8111939c 	xori	r4,r16,17998
811192b4:	8111939c 	xori	r4,r16,17998
811192b8:	8111939c 	xori	r4,r16,17998
811192bc:	8111939c 	xori	r4,r16,17998
811192c0:	8111939c 	xori	r4,r16,17998
811192c4:	8111936c 	andhi	r4,r16,17997
811192c8:	8111936c 	andhi	r4,r16,17997
811192cc:	8111936c 	andhi	r4,r16,17997
811192d0:	8111936c 	andhi	r4,r16,17997
811192d4:	8111936c 	andhi	r4,r16,17997
811192d8:	8111936c 	andhi	r4,r16,17997
811192dc:	8111939c 	xori	r4,r16,17998
811192e0:	8111939c 	xori	r4,r16,17998
811192e4:	8111939c 	xori	r4,r16,17998
811192e8:	8111939c 	xori	r4,r16,17998
811192ec:	8111939c 	xori	r4,r16,17998
811192f0:	8111939c 	xori	r4,r16,17998
811192f4:	8111939c 	xori	r4,r16,17998
811192f8:	8111939c 	xori	r4,r16,17998
811192fc:	8111939c 	xori	r4,r16,17998
81119300:	8111939c 	xori	r4,r16,17998
81119304:	8111939c 	xori	r4,r16,17998
81119308:	8111939c 	xori	r4,r16,17998
8111930c:	8111939c 	xori	r4,r16,17998
81119310:	8111939c 	xori	r4,r16,17998
81119314:	8111939c 	xori	r4,r16,17998
81119318:	8111939c 	xori	r4,r16,17998
8111931c:	8111939c 	xori	r4,r16,17998
81119320:	81119324 	muli	r4,r16,17996
81119324:	9081800c 	andi	r2,r18,1536
81119328:	12c01c1e 	bne	r2,r11,8111939c <__svfscanf_r+0x122c>
8111932c:	91a4703a 	and	r18,r18,r6
81119330:	94814014 	ori	r18,r18,1280
81119334:	04400404 	movi	r17,16
81119338:	81000005 	stb	r4,0(r16)
8111933c:	84000044 	addi	r16,r16,1
81119340:	e0800117 	ldw	r2,4(fp)
81119344:	10bfffc4 	addi	r2,r2,-1
81119348:	e0800115 	stw	r2,4(fp)
8111934c:	0080540e 	bge	zero,r2,811194a0 <__svfscanf_r+0x1330>
81119350:	18c00044 	addi	r3,r3,1
81119354:	e0c00015 	stw	r3,0(fp)
81119358:	9cffffc4 	addi	r19,r19,-1
8111935c:	98000f26 	beq	r19,zero,8111939c <__svfscanf_r+0x122c>
81119360:	e0c00017 	ldw	r3,0(fp)
81119364:	19000003 	ldbu	r4,0(r3)
81119368:	003f9706 	br	811191c8 <__reset+0xfb0f91c8>
8111936c:	00800284 	movi	r2,10
81119370:	14400a0e 	bge	r2,r17,8111939c <__svfscanf_r+0x122c>
81119374:	00bd1fc4 	movi	r2,-2945
81119378:	90a4703a 	and	r18,r18,r2
8111937c:	003fee06 	br	81119338 <__reset+0xfb0f9338>
81119380:	01604534 	movhi	r5,33044
81119384:	8c63883a 	add	r17,r17,r17
81119388:	297f9184 	addi	r5,r5,-442
8111938c:	2c45883a 	add	r2,r5,r17
81119390:	1440000f 	ldh	r17,0(r2)
81119394:	00800204 	movi	r2,8
81119398:	147ff616 	blt	r2,r17,81119374 <__reset+0xfb0f9374>
8111939c:	dc409e15 	stw	r17,632(sp)
811193a0:	9023883a 	mov	r17,r18
811193a4:	8880400c 	andi	r2,r17,256
811193a8:	4825883a 	mov	r18,r9
811193ac:	10000426 	beq	r2,zero,811193c0 <__svfscanf_r+0x1250>
811193b0:	d9800104 	addi	r6,sp,4
811193b4:	3400be36 	bltu	r6,r16,811196b0 <__svfscanf_r+0x1540>
811193b8:	da000104 	addi	r8,sp,4
811193bc:	443bae26 	beq	r8,r16,81118278 <__reset+0xfb0f8278>
811193c0:	8880040c 	andi	r2,r17,16
811193c4:	10009326 	beq	r2,zero,81119614 <__svfscanf_r+0x14a4>
811193c8:	d8800104 	addi	r2,sp,4
811193cc:	80a1c83a 	sub	r16,r16,r2
811193d0:	8521883a 	add	r16,r16,r20
811193d4:	003d0606 	br	811187f0 <__reset+0xfb0f87f0>
811193d8:	01604534 	movhi	r5,33044
811193dc:	8c63883a 	add	r17,r17,r17
811193e0:	297f9184 	addi	r5,r5,-442
811193e4:	2c45883a 	add	r2,r5,r17
811193e8:	1440000f 	ldh	r17,0(r2)
811193ec:	00bd1fc4 	movi	r2,-2945
811193f0:	90a4703a 	and	r18,r18,r2
811193f4:	003fd006 	br	81119338 <__reset+0xfb0f9338>
811193f8:	9082000c 	andi	r2,r18,2048
811193fc:	103fce26 	beq	r2,zero,81119338 <__reset+0xfb0f9338>
81119400:	8800021e 	bne	r17,zero,8111940c <__svfscanf_r+0x129c>
81119404:	94808014 	ori	r18,r18,512
81119408:	04400204 	movi	r17,8
8111940c:	9081000c 	andi	r2,r18,1024
81119410:	10009426 	beq	r2,zero,81119664 <__svfscanf_r+0x14f4>
81119414:	00be9fc4 	movi	r2,-1409
81119418:	90a4703a 	and	r18,r18,r2
8111941c:	003fc606 	br	81119338 <__reset+0xfb0f9338>
81119420:	9080200c 	andi	r2,r18,128
81119424:	103fdd26 	beq	r2,zero,8111939c <__reset+0xfb0f939c>
81119428:	9224703a 	and	r18,r18,r8
8111942c:	003fc206 	br	81119338 <__reset+0xfb0f9338>
81119430:	9800011e 	bne	r19,zero,81119438 <__svfscanf_r+0x12c8>
81119434:	04ffffc4 	movi	r19,-1
81119438:	8900004c 	andi	r4,r17,1
8111943c:	20005b1e 	bne	r4,zero,811195ac <__svfscanf_r+0x143c>
81119440:	8c40040c 	andi	r17,r17,16
81119444:	88003026 	beq	r17,zero,81119508 <__svfscanf_r+0x1398>
81119448:	0021883a 	mov	r16,zero
8111944c:	00000306 	br	8111945c <__svfscanf_r+0x12ec>
81119450:	18800003 	ldbu	r2,0(r3)
81119454:	3885883a 	add	r2,r7,r2
81119458:	10800043 	ldbu	r2,1(r2)
8111945c:	1080020c 	andi	r2,r2,8
81119460:	103ce31e 	bne	r2,zero,811187f0 <__reset+0xfb0f87f0>
81119464:	e0800117 	ldw	r2,4(fp)
81119468:	18c00044 	addi	r3,r3,1
8111946c:	84000044 	addi	r16,r16,1
81119470:	10bfffc4 	addi	r2,r2,-1
81119474:	e0800115 	stw	r2,4(fp)
81119478:	e0c00015 	stw	r3,0(fp)
8111947c:	84fcdc26 	beq	r16,r19,811187f0 <__reset+0xfb0f87f0>
81119480:	00bff316 	blt	zero,r2,81119450 <__reset+0xfb0f9450>
81119484:	e00b883a 	mov	r5,fp
81119488:	b009883a 	mov	r4,r22
8111948c:	11134500 	call	81113450 <__srefill_r>
81119490:	103cd71e 	bne	r2,zero,811187f0 <__reset+0xfb0f87f0>
81119494:	b9c00017 	ldw	r7,0(r23)
81119498:	e0c00017 	ldw	r3,0(fp)
8111949c:	003fec06 	br	81119450 <__reset+0xfb0f9450>
811194a0:	e00b883a 	mov	r5,fp
811194a4:	b009883a 	mov	r4,r22
811194a8:	d980a715 	stw	r6,668(sp)
811194ac:	d9c0aa15 	stw	r7,680(sp)
811194b0:	da00a815 	stw	r8,672(sp)
811194b4:	da40a915 	stw	r9,676(sp)
811194b8:	dac0a615 	stw	r11,664(sp)
811194bc:	11134500 	call	81113450 <__srefill_r>
811194c0:	d980a717 	ldw	r6,668(sp)
811194c4:	d9c0aa17 	ldw	r7,680(sp)
811194c8:	da00a817 	ldw	r8,672(sp)
811194cc:	da40a917 	ldw	r9,676(sp)
811194d0:	dac0a617 	ldw	r11,664(sp)
811194d4:	103fa026 	beq	r2,zero,81119358 <__reset+0xfb0f9358>
811194d8:	003fb006 	br	8111939c <__reset+0xfb0f939c>
811194dc:	8821883a 	mov	r16,r17
811194e0:	b019883a 	mov	r12,r22
811194e4:	9823883a 	mov	r17,r19
811194e8:	182d883a 	mov	r22,r3
811194ec:	00bfbfc4 	movi	r2,-257
811194f0:	a0a8703a 	and	r20,r20,r2
811194f4:	003e6706 	br	81118e94 <__reset+0xfb0f8e94>
811194f8:	000f883a 	mov	r7,zero
811194fc:	003f2806 	br	811191a0 <__reset+0xfb0f91a0>
81119500:	d800a215 	stw	zero,648(sp)
81119504:	003de306 	br	81118c94 <__reset+0xfb0f8c94>
81119508:	da009c17 	ldw	r8,624(sp)
8111950c:	9abfffc4 	addi	r10,r19,-1
81119510:	44400017 	ldw	r17,0(r8)
81119514:	44000104 	addi	r16,r8,4
81119518:	880b883a 	mov	r5,r17
8111951c:	8aa9883a 	add	r20,r17,r10
81119520:	00000606 	br	8111953c <__svfscanf_r+0x13cc>
81119524:	e0c00017 	ldw	r3,0(fp)
81119528:	b9000017 	ldw	r4,0(r23)
8111952c:	a80b883a 	mov	r5,r21
81119530:	18800003 	ldbu	r2,0(r3)
81119534:	2085883a 	add	r2,r4,r2
81119538:	10800043 	ldbu	r2,1(r2)
8111953c:	1080020c 	andi	r2,r2,8
81119540:	1000551e 	bne	r2,zero,81119698 <__svfscanf_r+0x1528>
81119544:	e0800117 	ldw	r2,4(fp)
81119548:	19000044 	addi	r4,r3,1
8111954c:	e1000015 	stw	r4,0(fp)
81119550:	10bfffc4 	addi	r2,r2,-1
81119554:	e0800115 	stw	r2,4(fp)
81119558:	18800003 	ldbu	r2,0(r3)
8111955c:	2d400044 	addi	r21,r5,1
81119560:	a827883a 	mov	r19,r21
81119564:	28800005 	stb	r2,0(r5)
81119568:	2d000626 	beq	r5,r20,81119584 <__svfscanf_r+0x1414>
8111956c:	e0800117 	ldw	r2,4(fp)
81119570:	00bfec16 	blt	zero,r2,81119524 <__reset+0xfb0f9524>
81119574:	e00b883a 	mov	r5,fp
81119578:	b009883a 	mov	r4,r22
8111957c:	11134500 	call	81113450 <__srefill_r>
81119580:	103fe826 	beq	r2,zero,81119524 <__reset+0xfb0f9524>
81119584:	da00a017 	ldw	r8,640(sp)
81119588:	dd009d17 	ldw	r20,628(sp)
8111958c:	9c63c83a 	sub	r17,r19,r17
81119590:	42000044 	addi	r8,r8,1
81119594:	98000005 	stb	zero,0(r19)
81119598:	9465883a 	add	r18,r18,r17
8111959c:	da00a015 	stw	r8,640(sp)
811195a0:	dc009c15 	stw	r16,624(sp)
811195a4:	a00d883a 	mov	r6,r20
811195a8:	003b2f06 	br	81118268 <__reset+0xfb0f8268>
811195ac:	dd409904 	addi	r21,sp,612
811195b0:	8c40040c 	andi	r17,r17,16
811195b4:	01800204 	movi	r6,8
811195b8:	000b883a 	mov	r5,zero
811195bc:	a809883a 	mov	r4,r21
811195c0:	1112fd40 	call	81112fd4 <memset>
811195c4:	8800401e 	bne	r17,zero,811196c8 <__svfscanf_r+0x1558>
811195c8:	da009c17 	ldw	r8,624(sp)
811195cc:	45000017 	ldw	r20,0(r8)
811195d0:	42000104 	addi	r8,r8,4
811195d4:	da009c15 	stw	r8,624(sp)
811195d8:	000d883a 	mov	r6,zero
811195dc:	3021883a 	mov	r16,r6
811195e0:	dc409f15 	stw	r17,636(sp)
811195e4:	e0800017 	ldw	r2,0(fp)
811195e8:	b8c00017 	ldw	r3,0(r23)
811195ec:	10800003 	ldbu	r2,0(r2)
811195f0:	1885883a 	add	r2,r3,r2
811195f4:	10800043 	ldbu	r2,1(r2)
811195f8:	1080020c 	andi	r2,r2,8
811195fc:	1000011e 	bne	r2,zero,81119604 <__svfscanf_r+0x1494>
81119600:	9800701e 	bne	r19,zero,811197c4 <__svfscanf_r+0x1654>
81119604:	dc409f17 	ldw	r17,636(sp)
81119608:	883cdd1e 	bne	r17,zero,81118980 <__reset+0xfb0f8980>
8111960c:	a0000015 	stw	zero,0(r20)
81119610:	003cd806 	br	81118974 <__reset+0xfb0f8974>
81119614:	d9c09e17 	ldw	r7,632(sp)
81119618:	da00a117 	ldw	r8,644(sp)
8111961c:	000d883a 	mov	r6,zero
81119620:	d9400104 	addi	r5,sp,4
81119624:	b009883a 	mov	r4,r22
81119628:	80000005 	stb	zero,0(r16)
8111962c:	403ee83a 	callr	r8
81119630:	88c0080c 	andi	r3,r17,32
81119634:	1800121e 	bne	r3,zero,81119680 <__svfscanf_r+0x1510>
81119638:	88c0010c 	andi	r3,r17,4
8111963c:	18004d26 	beq	r3,zero,81119774 <__svfscanf_r+0x1604>
81119640:	da009c17 	ldw	r8,624(sp)
81119644:	40c00017 	ldw	r3,0(r8)
81119648:	42000104 	addi	r8,r8,4
8111964c:	da009c15 	stw	r8,624(sp)
81119650:	1880000d 	sth	r2,0(r3)
81119654:	da00a017 	ldw	r8,640(sp)
81119658:	42000044 	addi	r8,r8,1
8111965c:	da00a015 	stw	r8,640(sp)
81119660:	003f5906 	br	811193c8 <__reset+0xfb0f93c8>
81119664:	00bf1fc4 	movi	r2,-897
81119668:	90a4703a 	and	r18,r18,r2
8111966c:	38000226 	beq	r7,zero,81119678 <__svfscanf_r+0x1508>
81119670:	39ffffc4 	addi	r7,r7,-1
81119674:	9cc00044 	addi	r19,r19,1
81119678:	a5000044 	addi	r20,r20,1
8111967c:	003f3006 	br	81119340 <__reset+0xfb0f9340>
81119680:	da009c17 	ldw	r8,624(sp)
81119684:	40c00017 	ldw	r3,0(r8)
81119688:	42000104 	addi	r8,r8,4
8111968c:	da009c15 	stw	r8,624(sp)
81119690:	18800015 	stw	r2,0(r3)
81119694:	003fef06 	br	81119654 <__reset+0xfb0f9654>
81119698:	2827883a 	mov	r19,r5
8111969c:	003fb906 	br	81119584 <__reset+0xfb0f9584>
811196a0:	01be1fc4 	movi	r6,-1921
811196a4:	a1a8703a 	and	r20,r20,r6
811196a8:	05400044 	movi	r21,1
811196ac:	003de906 	br	81118e54 <__reset+0xfb0f8e54>
811196b0:	817fffc7 	ldb	r5,-1(r16)
811196b4:	e00d883a 	mov	r6,fp
811196b8:	b009883a 	mov	r4,r22
811196bc:	843fffc4 	addi	r16,r16,-1
811196c0:	1121dc80 	call	81121dc8 <_ungetc_r>
811196c4:	003f3c06 	br	811193b8 <__reset+0xfb0f93b8>
811196c8:	dd009b04 	addi	r20,sp,620
811196cc:	003fc206 	br	811195d8 <__reset+0xfb0f95d8>
811196d0:	00be1fc4 	movi	r2,-1921
811196d4:	a0a8703a 	and	r20,r20,r2
811196d8:	05800044 	movi	r22,1
811196dc:	003ddd06 	br	81118e54 <__reset+0xfb0f8e54>
811196e0:	d8c09f17 	ldw	r3,636(sp)
811196e4:	88e3c83a 	sub	r17,r17,r3
811196e8:	044dc83a 	sub	r6,zero,r17
811196ec:	883e2126 	beq	r17,zero,81118f74 <__reset+0xfb0f8f74>
811196f0:	d88055c4 	addi	r2,sp,343
811196f4:	80800136 	bltu	r16,r2,811196fc <__svfscanf_r+0x158c>
811196f8:	dc005584 	addi	r16,sp,342
811196fc:	01604534 	movhi	r5,33044
81119700:	297f9004 	addi	r5,r5,-448
81119704:	8009883a 	mov	r4,r16
81119708:	11137640 	call	81113764 <sprintf>
8111970c:	003e1906 	br	81118f74 <__reset+0xfb0f8f74>
81119710:	d8c0a517 	ldw	r3,660(sp)
81119714:	000d883a 	mov	r6,zero
81119718:	01c00284 	movi	r7,10
8111971c:	19400044 	addi	r5,r3,1
81119720:	b009883a 	mov	r4,r22
81119724:	1113a540 	call	81113a54 <_strtol_r>
81119728:	da00a417 	ldw	r8,656(sp)
8111972c:	dc00a517 	ldw	r16,660(sp)
81119730:	120dc83a 	sub	r6,r2,r8
81119734:	003fee06 	br	811196f0 <__reset+0xfb0f96f0>
81119738:	da009c17 	ldw	r8,624(sp)
8111973c:	180b883a 	mov	r5,r3
81119740:	8009883a 	mov	r4,r16
81119744:	45000017 	ldw	r20,0(r8)
81119748:	44400104 	addi	r17,r8,4
8111974c:	d8c0a615 	stw	r3,664(sp)
81119750:	111e6e40 	call	8111e6e4 <__fpclassifyd>
81119754:	d8c0a617 	ldw	r3,664(sp)
81119758:	10006426 	beq	r2,zero,811198ec <__svfscanf_r+0x177c>
8111975c:	8009883a 	mov	r4,r16
81119760:	180b883a 	mov	r5,r3
81119764:	1111a6c0 	call	81111a6c <__truncdfsf2>
81119768:	a0800015 	stw	r2,0(r20)
8111976c:	dc409c15 	stw	r17,624(sp)
81119770:	003e0f06 	br	81118fb0 <__reset+0xfb0f8fb0>
81119774:	88c0004c 	andi	r3,r17,1
81119778:	183fc11e 	bne	r3,zero,81119680 <__reset+0xfb0f9680>
8111977c:	8c40008c 	andi	r17,r17,2
81119780:	883fbf26 	beq	r17,zero,81119680 <__reset+0xfb0f9680>
81119784:	da00a117 	ldw	r8,644(sp)
81119788:	00a044b4 	movhi	r2,33042
8111978c:	1080e004 	addi	r2,r2,896
81119790:	d9c09e17 	ldw	r7,632(sp)
81119794:	000d883a 	mov	r6,zero
81119798:	d9400104 	addi	r5,sp,4
8111979c:	b009883a 	mov	r4,r22
811197a0:	40806226 	beq	r8,r2,8111992c <__svfscanf_r+0x17bc>
811197a4:	11200980 	call	81120098 <_strtoll_r>
811197a8:	da009c17 	ldw	r8,624(sp)
811197ac:	41000017 	ldw	r4,0(r8)
811197b0:	42000104 	addi	r8,r8,4
811197b4:	da009c15 	stw	r8,624(sp)
811197b8:	20800015 	stw	r2,0(r4)
811197bc:	20c00115 	stw	r3,4(r4)
811197c0:	003fa406 	br	81119654 <__reset+0xfb0f9654>
811197c4:	111cb740 	call	8111cb74 <__locale_mb_cur_max>
811197c8:	80bca726 	beq	r16,r2,81118a68 <__reset+0xfb0f8a68>
811197cc:	e0800017 	ldw	r2,0(fp)
811197d0:	e1000117 	ldw	r4,4(fp)
811197d4:	d8c00104 	addi	r3,sp,4
811197d8:	12000003 	ldbu	r8,0(r2)
811197dc:	213fffc4 	addi	r4,r4,-1
811197e0:	10800044 	addi	r2,r2,1
811197e4:	e1000115 	stw	r4,4(fp)
811197e8:	e0800015 	stw	r2,0(fp)
811197ec:	84400044 	addi	r17,r16,1
811197f0:	dd400015 	stw	r21,0(sp)
811197f4:	1c21883a 	add	r16,r3,r16
811197f8:	b009883a 	mov	r4,r22
811197fc:	880f883a 	mov	r7,r17
81119800:	180d883a 	mov	r6,r3
81119804:	a00b883a 	mov	r5,r20
81119808:	82000005 	stb	r8,0(r16)
8111980c:	111cc300 	call	8111cc30 <_mbrtowc_r>
81119810:	013fffc4 	movi	r4,-1
81119814:	113c9426 	beq	r2,r4,81118a68 <__reset+0xfb0f8a68>
81119818:	103c881e 	bne	r2,zero,81118a3c <__reset+0xfb0f8a3c>
8111981c:	a0000015 	stw	zero,0(r20)
81119820:	0009883a 	mov	r4,zero
81119824:	111cab40 	call	8111cab4 <iswspace>
81119828:	10001a26 	beq	r2,zero,81119894 <__svfscanf_r+0x1724>
8111982c:	8821883a 	mov	r16,r17
81119830:	dc409f17 	ldw	r17,636(sp)
81119834:	803f7426 	beq	r16,zero,81119608 <__reset+0xfb0f9608>
81119838:	843fffc4 	addi	r16,r16,-1
8111983c:	d9800104 	addi	r6,sp,4
81119840:	342b883a 	add	r21,r6,r16
81119844:	00000106 	br	8111984c <__svfscanf_r+0x16dc>
81119848:	843fffc4 	addi	r16,r16,-1
8111984c:	a9400003 	ldbu	r5,0(r21)
81119850:	e00d883a 	mov	r6,fp
81119854:	b009883a 	mov	r4,r22
81119858:	1121dc80 	call	81121dc8 <_ungetc_r>
8111985c:	ad7fffc4 	addi	r21,r21,-1
81119860:	803ff91e 	bne	r16,zero,81119848 <__reset+0xfb0f9848>
81119864:	003f6806 	br	81119608 <__reset+0xfb0f9608>
81119868:	d9800104 	addi	r6,sp,4
8111986c:	802b883a 	mov	r21,r16
81119870:	343a812e 	bgeu	r6,r16,81118278 <__reset+0xfb0f8278>
81119874:	ad7fffc4 	addi	r21,r21,-1
81119878:	a9400007 	ldb	r5,0(r21)
8111987c:	e00d883a 	mov	r6,fp
81119880:	b009883a 	mov	r4,r22
81119884:	1121dc80 	call	81121dc8 <_ungetc_r>
81119888:	da000104 	addi	r8,sp,4
8111988c:	457ff91e 	bne	r8,r21,81119874 <__reset+0xfb0f9874>
81119890:	003a7906 	br	81118278 <__reset+0xfb0f8278>
81119894:	da009f17 	ldw	r8,636(sp)
81119898:	9465883a 	add	r18,r18,r17
8111989c:	9cffffc4 	addi	r19,r19,-1
811198a0:	4000051e 	bne	r8,zero,811198b8 <__svfscanf_r+0x1748>
811198a4:	a5000104 	addi	r20,r20,4
811198a8:	0021883a 	mov	r16,zero
811198ac:	003c6606 	br	81118a48 <__reset+0xfb0f8a48>
811198b0:	a1000017 	ldw	r4,0(r20)
811198b4:	003fdb06 	br	81119824 <__reset+0xfb0f9824>
811198b8:	0021883a 	mov	r16,zero
811198bc:	003c6206 	br	81118a48 <__reset+0xfb0f8a48>
811198c0:	d8800104 	addi	r2,sp,4
811198c4:	802b883a 	mov	r21,r16
811198c8:	143a6b2e 	bgeu	r2,r16,81118278 <__reset+0xfb0f8278>
811198cc:	ad7fffc4 	addi	r21,r21,-1
811198d0:	a9400007 	ldb	r5,0(r21)
811198d4:	e00d883a 	mov	r6,fp
811198d8:	b009883a 	mov	r4,r22
811198dc:	1121dc80 	call	81121dc8 <_ungetc_r>
811198e0:	d8c00104 	addi	r3,sp,4
811198e4:	1d7ff91e 	bne	r3,r21,811198cc <__reset+0xfb0f98cc>
811198e8:	003a6306 	br	81118278 <__reset+0xfb0f8278>
811198ec:	0009883a 	mov	r4,zero
811198f0:	111e8280 	call	8111e828 <nanf>
811198f4:	a0800015 	stw	r2,0(r20)
811198f8:	dc409c15 	stw	r17,624(sp)
811198fc:	003dac06 	br	81118fb0 <__reset+0xfb0f8fb0>
81119900:	d9000104 	addi	r4,sp,4
81119904:	802b883a 	mov	r21,r16
81119908:	243a5b2e 	bgeu	r4,r16,81118278 <__reset+0xfb0f8278>
8111990c:	ad7fffc4 	addi	r21,r21,-1
81119910:	a9400007 	ldb	r5,0(r21)
81119914:	e00d883a 	mov	r6,fp
81119918:	b009883a 	mov	r4,r22
8111991c:	1121dc80 	call	81121dc8 <_ungetc_r>
81119920:	d9400104 	addi	r5,sp,4
81119924:	2d7ff91e 	bne	r5,r21,8111990c <__reset+0xfb0f990c>
81119928:	003a5306 	br	81118278 <__reset+0xfb0f8278>
8111992c:	11205f00 	call	811205f0 <_strtoull_r>
81119930:	003f9d06 	br	811197a8 <__reset+0xfb0f97a8>

81119934 <vfscanf>:
81119934:	00a04534 	movhi	r2,33044
81119938:	defffb04 	addi	sp,sp,-20
8111993c:	10895a04 	addi	r2,r2,9576
81119940:	de00012e 	bgeu	sp,et,81119948 <vfscanf+0x14>
81119944:	003b68fa 	trap	3
81119948:	dc000215 	stw	r16,8(sp)
8111994c:	14000017 	ldw	r16,0(r2)
81119950:	dc400315 	stw	r17,12(sp)
81119954:	dfc00415 	stw	ra,16(sp)
81119958:	2023883a 	mov	r17,r4
8111995c:	80000826 	beq	r16,zero,81119980 <vfscanf+0x4c>
81119960:	80800e17 	ldw	r2,56(r16)
81119964:	1000061e 	bne	r2,zero,81119980 <vfscanf+0x4c>
81119968:	8009883a 	mov	r4,r16
8111996c:	d9400015 	stw	r5,0(sp)
81119970:	d9800115 	stw	r6,4(sp)
81119974:	111bc4c0 	call	8111bc4c <__sinit>
81119978:	d9800117 	ldw	r6,4(sp)
8111997c:	d9400017 	ldw	r5,0(sp)
81119980:	300f883a 	mov	r7,r6
81119984:	8009883a 	mov	r4,r16
81119988:	280d883a 	mov	r6,r5
8111998c:	880b883a 	mov	r5,r17
81119990:	dfc00417 	ldw	ra,16(sp)
81119994:	dc400317 	ldw	r17,12(sp)
81119998:	dc000217 	ldw	r16,8(sp)
8111999c:	dec00504 	addi	sp,sp,20
811199a0:	11181701 	jmpi	81118170 <__svfscanf_r>

811199a4 <__svfscanf>:
811199a4:	00a04534 	movhi	r2,33044
811199a8:	10895a04 	addi	r2,r2,9576
811199ac:	300f883a 	mov	r7,r6
811199b0:	280d883a 	mov	r6,r5
811199b4:	200b883a 	mov	r5,r4
811199b8:	11000017 	ldw	r4,0(r2)
811199bc:	11181701 	jmpi	81118170 <__svfscanf_r>

811199c0 <_vfscanf_r>:
811199c0:	defffb04 	addi	sp,sp,-20
811199c4:	de00012e 	bgeu	sp,et,811199cc <_vfscanf_r+0xc>
811199c8:	003b68fa 	trap	3
811199cc:	dc000315 	stw	r16,12(sp)
811199d0:	dfc00415 	stw	ra,16(sp)
811199d4:	2021883a 	mov	r16,r4
811199d8:	20000926 	beq	r4,zero,81119a00 <_vfscanf_r+0x40>
811199dc:	20800e17 	ldw	r2,56(r4)
811199e0:	1000071e 	bne	r2,zero,81119a00 <_vfscanf_r+0x40>
811199e4:	d9400015 	stw	r5,0(sp)
811199e8:	d9800115 	stw	r6,4(sp)
811199ec:	d9c00215 	stw	r7,8(sp)
811199f0:	111bc4c0 	call	8111bc4c <__sinit>
811199f4:	d9c00217 	ldw	r7,8(sp)
811199f8:	d9800117 	ldw	r6,4(sp)
811199fc:	d9400017 	ldw	r5,0(sp)
81119a00:	8009883a 	mov	r4,r16
81119a04:	dfc00417 	ldw	ra,16(sp)
81119a08:	dc000317 	ldw	r16,12(sp)
81119a0c:	dec00504 	addi	sp,sp,20
81119a10:	11181701 	jmpi	81118170 <__svfscanf_r>

81119a14 <__swbuf_r>:
81119a14:	defffb04 	addi	sp,sp,-20
81119a18:	de00012e 	bgeu	sp,et,81119a20 <__swbuf_r+0xc>
81119a1c:	003b68fa 	trap	3
81119a20:	dcc00315 	stw	r19,12(sp)
81119a24:	dc800215 	stw	r18,8(sp)
81119a28:	dc000015 	stw	r16,0(sp)
81119a2c:	dfc00415 	stw	ra,16(sp)
81119a30:	dc400115 	stw	r17,4(sp)
81119a34:	2025883a 	mov	r18,r4
81119a38:	2827883a 	mov	r19,r5
81119a3c:	3021883a 	mov	r16,r6
81119a40:	20000226 	beq	r4,zero,81119a4c <__swbuf_r+0x38>
81119a44:	20800e17 	ldw	r2,56(r4)
81119a48:	10004226 	beq	r2,zero,81119b54 <__swbuf_r+0x140>
81119a4c:	80800617 	ldw	r2,24(r16)
81119a50:	8100030b 	ldhu	r4,12(r16)
81119a54:	80800215 	stw	r2,8(r16)
81119a58:	2080020c 	andi	r2,r4,8
81119a5c:	10003626 	beq	r2,zero,81119b38 <__swbuf_r+0x124>
81119a60:	80c00417 	ldw	r3,16(r16)
81119a64:	18003426 	beq	r3,zero,81119b38 <__swbuf_r+0x124>
81119a68:	2088000c 	andi	r2,r4,8192
81119a6c:	9c403fcc 	andi	r17,r19,255
81119a70:	10001a26 	beq	r2,zero,81119adc <__swbuf_r+0xc8>
81119a74:	80800017 	ldw	r2,0(r16)
81119a78:	81000517 	ldw	r4,20(r16)
81119a7c:	10c7c83a 	sub	r3,r2,r3
81119a80:	1900200e 	bge	r3,r4,81119b04 <__swbuf_r+0xf0>
81119a84:	18c00044 	addi	r3,r3,1
81119a88:	81000217 	ldw	r4,8(r16)
81119a8c:	11400044 	addi	r5,r2,1
81119a90:	81400015 	stw	r5,0(r16)
81119a94:	213fffc4 	addi	r4,r4,-1
81119a98:	81000215 	stw	r4,8(r16)
81119a9c:	14c00005 	stb	r19,0(r2)
81119aa0:	80800517 	ldw	r2,20(r16)
81119aa4:	10c01e26 	beq	r2,r3,81119b20 <__swbuf_r+0x10c>
81119aa8:	8080030b 	ldhu	r2,12(r16)
81119aac:	1080004c 	andi	r2,r2,1
81119ab0:	10000226 	beq	r2,zero,81119abc <__swbuf_r+0xa8>
81119ab4:	00800284 	movi	r2,10
81119ab8:	88801926 	beq	r17,r2,81119b20 <__swbuf_r+0x10c>
81119abc:	8805883a 	mov	r2,r17
81119ac0:	dfc00417 	ldw	ra,16(sp)
81119ac4:	dcc00317 	ldw	r19,12(sp)
81119ac8:	dc800217 	ldw	r18,8(sp)
81119acc:	dc400117 	ldw	r17,4(sp)
81119ad0:	dc000017 	ldw	r16,0(sp)
81119ad4:	dec00504 	addi	sp,sp,20
81119ad8:	f800283a 	ret
81119adc:	81401917 	ldw	r5,100(r16)
81119ae0:	00b7ffc4 	movi	r2,-8193
81119ae4:	21080014 	ori	r4,r4,8192
81119ae8:	2884703a 	and	r2,r5,r2
81119aec:	80801915 	stw	r2,100(r16)
81119af0:	80800017 	ldw	r2,0(r16)
81119af4:	8100030d 	sth	r4,12(r16)
81119af8:	81000517 	ldw	r4,20(r16)
81119afc:	10c7c83a 	sub	r3,r2,r3
81119b00:	193fe016 	blt	r3,r4,81119a84 <__reset+0xfb0f9a84>
81119b04:	800b883a 	mov	r5,r16
81119b08:	9009883a 	mov	r4,r18
81119b0c:	111b8500 	call	8111b850 <_fflush_r>
81119b10:	1000071e 	bne	r2,zero,81119b30 <__swbuf_r+0x11c>
81119b14:	80800017 	ldw	r2,0(r16)
81119b18:	00c00044 	movi	r3,1
81119b1c:	003fda06 	br	81119a88 <__reset+0xfb0f9a88>
81119b20:	800b883a 	mov	r5,r16
81119b24:	9009883a 	mov	r4,r18
81119b28:	111b8500 	call	8111b850 <_fflush_r>
81119b2c:	103fe326 	beq	r2,zero,81119abc <__reset+0xfb0f9abc>
81119b30:	00bfffc4 	movi	r2,-1
81119b34:	003fe206 	br	81119ac0 <__reset+0xfb0f9ac0>
81119b38:	800b883a 	mov	r5,r16
81119b3c:	9009883a 	mov	r4,r18
81119b40:	1119bdc0 	call	81119bdc <__swsetup_r>
81119b44:	103ffa1e 	bne	r2,zero,81119b30 <__reset+0xfb0f9b30>
81119b48:	8100030b 	ldhu	r4,12(r16)
81119b4c:	80c00417 	ldw	r3,16(r16)
81119b50:	003fc506 	br	81119a68 <__reset+0xfb0f9a68>
81119b54:	111bc4c0 	call	8111bc4c <__sinit>
81119b58:	003fbc06 	br	81119a4c <__reset+0xfb0f9a4c>

81119b5c <__swbuf>:
81119b5c:	00a04534 	movhi	r2,33044
81119b60:	10895a04 	addi	r2,r2,9576
81119b64:	280d883a 	mov	r6,r5
81119b68:	200b883a 	mov	r5,r4
81119b6c:	11000017 	ldw	r4,0(r2)
81119b70:	1119a141 	jmpi	81119a14 <__swbuf_r>

81119b74 <_write_r>:
81119b74:	defffd04 	addi	sp,sp,-12
81119b78:	de00012e 	bgeu	sp,et,81119b80 <_write_r+0xc>
81119b7c:	003b68fa 	trap	3
81119b80:	2805883a 	mov	r2,r5
81119b84:	dc000015 	stw	r16,0(sp)
81119b88:	04204534 	movhi	r16,33044
81119b8c:	dc400115 	stw	r17,4(sp)
81119b90:	300b883a 	mov	r5,r6
81119b94:	8409b604 	addi	r16,r16,9944
81119b98:	2023883a 	mov	r17,r4
81119b9c:	380d883a 	mov	r6,r7
81119ba0:	1009883a 	mov	r4,r2
81119ba4:	dfc00215 	stw	ra,8(sp)
81119ba8:	80000015 	stw	zero,0(r16)
81119bac:	112926c0 	call	8112926c <write>
81119bb0:	00ffffc4 	movi	r3,-1
81119bb4:	10c00526 	beq	r2,r3,81119bcc <_write_r+0x58>
81119bb8:	dfc00217 	ldw	ra,8(sp)
81119bbc:	dc400117 	ldw	r17,4(sp)
81119bc0:	dc000017 	ldw	r16,0(sp)
81119bc4:	dec00304 	addi	sp,sp,12
81119bc8:	f800283a 	ret
81119bcc:	80c00017 	ldw	r3,0(r16)
81119bd0:	183ff926 	beq	r3,zero,81119bb8 <__reset+0xfb0f9bb8>
81119bd4:	88c00015 	stw	r3,0(r17)
81119bd8:	003ff706 	br	81119bb8 <__reset+0xfb0f9bb8>

81119bdc <__swsetup_r>:
81119bdc:	00a04534 	movhi	r2,33044
81119be0:	defffd04 	addi	sp,sp,-12
81119be4:	10895a04 	addi	r2,r2,9576
81119be8:	de00012e 	bgeu	sp,et,81119bf0 <__swsetup_r+0x14>
81119bec:	003b68fa 	trap	3
81119bf0:	dc400115 	stw	r17,4(sp)
81119bf4:	2023883a 	mov	r17,r4
81119bf8:	11000017 	ldw	r4,0(r2)
81119bfc:	dc000015 	stw	r16,0(sp)
81119c00:	dfc00215 	stw	ra,8(sp)
81119c04:	2821883a 	mov	r16,r5
81119c08:	20000226 	beq	r4,zero,81119c14 <__swsetup_r+0x38>
81119c0c:	20800e17 	ldw	r2,56(r4)
81119c10:	10003126 	beq	r2,zero,81119cd8 <__swsetup_r+0xfc>
81119c14:	8080030b 	ldhu	r2,12(r16)
81119c18:	10c0020c 	andi	r3,r2,8
81119c1c:	1009883a 	mov	r4,r2
81119c20:	18000f26 	beq	r3,zero,81119c60 <__swsetup_r+0x84>
81119c24:	80c00417 	ldw	r3,16(r16)
81119c28:	18001526 	beq	r3,zero,81119c80 <__swsetup_r+0xa4>
81119c2c:	1100004c 	andi	r4,r2,1
81119c30:	20001c1e 	bne	r4,zero,81119ca4 <__swsetup_r+0xc8>
81119c34:	1080008c 	andi	r2,r2,2
81119c38:	1000291e 	bne	r2,zero,81119ce0 <__swsetup_r+0x104>
81119c3c:	80800517 	ldw	r2,20(r16)
81119c40:	80800215 	stw	r2,8(r16)
81119c44:	18001c26 	beq	r3,zero,81119cb8 <__swsetup_r+0xdc>
81119c48:	0005883a 	mov	r2,zero
81119c4c:	dfc00217 	ldw	ra,8(sp)
81119c50:	dc400117 	ldw	r17,4(sp)
81119c54:	dc000017 	ldw	r16,0(sp)
81119c58:	dec00304 	addi	sp,sp,12
81119c5c:	f800283a 	ret
81119c60:	2080040c 	andi	r2,r4,16
81119c64:	10002e26 	beq	r2,zero,81119d20 <__swsetup_r+0x144>
81119c68:	2080010c 	andi	r2,r4,4
81119c6c:	10001e1e 	bne	r2,zero,81119ce8 <__swsetup_r+0x10c>
81119c70:	80c00417 	ldw	r3,16(r16)
81119c74:	20800214 	ori	r2,r4,8
81119c78:	8080030d 	sth	r2,12(r16)
81119c7c:	183feb1e 	bne	r3,zero,81119c2c <__reset+0xfb0f9c2c>
81119c80:	1100a00c 	andi	r4,r2,640
81119c84:	01408004 	movi	r5,512
81119c88:	217fe826 	beq	r4,r5,81119c2c <__reset+0xfb0f9c2c>
81119c8c:	800b883a 	mov	r5,r16
81119c90:	8809883a 	mov	r4,r17
81119c94:	11124ac0 	call	811124ac <__smakebuf_r>
81119c98:	8080030b 	ldhu	r2,12(r16)
81119c9c:	80c00417 	ldw	r3,16(r16)
81119ca0:	003fe206 	br	81119c2c <__reset+0xfb0f9c2c>
81119ca4:	80800517 	ldw	r2,20(r16)
81119ca8:	80000215 	stw	zero,8(r16)
81119cac:	0085c83a 	sub	r2,zero,r2
81119cb0:	80800615 	stw	r2,24(r16)
81119cb4:	183fe41e 	bne	r3,zero,81119c48 <__reset+0xfb0f9c48>
81119cb8:	80c0030b 	ldhu	r3,12(r16)
81119cbc:	0005883a 	mov	r2,zero
81119cc0:	1900200c 	andi	r4,r3,128
81119cc4:	203fe126 	beq	r4,zero,81119c4c <__reset+0xfb0f9c4c>
81119cc8:	18c01014 	ori	r3,r3,64
81119ccc:	80c0030d 	sth	r3,12(r16)
81119cd0:	00bfffc4 	movi	r2,-1
81119cd4:	003fdd06 	br	81119c4c <__reset+0xfb0f9c4c>
81119cd8:	111bc4c0 	call	8111bc4c <__sinit>
81119cdc:	003fcd06 	br	81119c14 <__reset+0xfb0f9c14>
81119ce0:	0005883a 	mov	r2,zero
81119ce4:	003fd606 	br	81119c40 <__reset+0xfb0f9c40>
81119ce8:	81400c17 	ldw	r5,48(r16)
81119cec:	28000626 	beq	r5,zero,81119d08 <__swsetup_r+0x12c>
81119cf0:	80801004 	addi	r2,r16,64
81119cf4:	28800326 	beq	r5,r2,81119d04 <__swsetup_r+0x128>
81119cf8:	8809883a 	mov	r4,r17
81119cfc:	111c0e40 	call	8111c0e4 <_free_r>
81119d00:	8100030b 	ldhu	r4,12(r16)
81119d04:	80000c15 	stw	zero,48(r16)
81119d08:	80c00417 	ldw	r3,16(r16)
81119d0c:	00bff6c4 	movi	r2,-37
81119d10:	1108703a 	and	r4,r2,r4
81119d14:	80000115 	stw	zero,4(r16)
81119d18:	80c00015 	stw	r3,0(r16)
81119d1c:	003fd506 	br	81119c74 <__reset+0xfb0f9c74>
81119d20:	00800244 	movi	r2,9
81119d24:	88800015 	stw	r2,0(r17)
81119d28:	20801014 	ori	r2,r4,64
81119d2c:	8080030d 	sth	r2,12(r16)
81119d30:	00bfffc4 	movi	r2,-1
81119d34:	003fc506 	br	81119c4c <__reset+0xfb0f9c4c>

81119d38 <_close_r>:
81119d38:	defffd04 	addi	sp,sp,-12
81119d3c:	de00012e 	bgeu	sp,et,81119d44 <_close_r+0xc>
81119d40:	003b68fa 	trap	3
81119d44:	dc000015 	stw	r16,0(sp)
81119d48:	04204534 	movhi	r16,33044
81119d4c:	dc400115 	stw	r17,4(sp)
81119d50:	8409b604 	addi	r16,r16,9944
81119d54:	2023883a 	mov	r17,r4
81119d58:	2809883a 	mov	r4,r5
81119d5c:	dfc00215 	stw	ra,8(sp)
81119d60:	80000015 	stw	zero,0(r16)
81119d64:	11277ac0 	call	811277ac <close>
81119d68:	00ffffc4 	movi	r3,-1
81119d6c:	10c00526 	beq	r2,r3,81119d84 <_close_r+0x4c>
81119d70:	dfc00217 	ldw	ra,8(sp)
81119d74:	dc400117 	ldw	r17,4(sp)
81119d78:	dc000017 	ldw	r16,0(sp)
81119d7c:	dec00304 	addi	sp,sp,12
81119d80:	f800283a 	ret
81119d84:	80c00017 	ldw	r3,0(r16)
81119d88:	183ff926 	beq	r3,zero,81119d70 <__reset+0xfb0f9d70>
81119d8c:	88c00015 	stw	r3,0(r17)
81119d90:	003ff706 	br	81119d70 <__reset+0xfb0f9d70>

81119d94 <quorem>:
81119d94:	defff704 	addi	sp,sp,-36
81119d98:	de00012e 	bgeu	sp,et,81119da0 <quorem+0xc>
81119d9c:	003b68fa 	trap	3
81119da0:	dc800215 	stw	r18,8(sp)
81119da4:	20800417 	ldw	r2,16(r4)
81119da8:	2c800417 	ldw	r18,16(r5)
81119dac:	dfc00815 	stw	ra,32(sp)
81119db0:	ddc00715 	stw	r23,28(sp)
81119db4:	dd800615 	stw	r22,24(sp)
81119db8:	dd400515 	stw	r21,20(sp)
81119dbc:	dd000415 	stw	r20,16(sp)
81119dc0:	dcc00315 	stw	r19,12(sp)
81119dc4:	dc400115 	stw	r17,4(sp)
81119dc8:	dc000015 	stw	r16,0(sp)
81119dcc:	14807116 	blt	r2,r18,81119f94 <quorem+0x200>
81119dd0:	94bfffc4 	addi	r18,r18,-1
81119dd4:	94ad883a 	add	r22,r18,r18
81119dd8:	b5ad883a 	add	r22,r22,r22
81119ddc:	2c400504 	addi	r17,r5,20
81119de0:	8da9883a 	add	r20,r17,r22
81119de4:	25400504 	addi	r21,r4,20
81119de8:	282f883a 	mov	r23,r5
81119dec:	adad883a 	add	r22,r21,r22
81119df0:	a1400017 	ldw	r5,0(r20)
81119df4:	2021883a 	mov	r16,r4
81119df8:	b1000017 	ldw	r4,0(r22)
81119dfc:	29400044 	addi	r5,r5,1
81119e00:	112546c0 	call	8112546c <__udivsi3>
81119e04:	1027883a 	mov	r19,r2
81119e08:	10002c26 	beq	r2,zero,81119ebc <quorem+0x128>
81119e0c:	a813883a 	mov	r9,r21
81119e10:	880b883a 	mov	r5,r17
81119e14:	0009883a 	mov	r4,zero
81119e18:	000d883a 	mov	r6,zero
81119e1c:	2a000017 	ldw	r8,0(r5)
81119e20:	49c00017 	ldw	r7,0(r9)
81119e24:	29400104 	addi	r5,r5,4
81119e28:	40bfffcc 	andi	r2,r8,65535
81119e2c:	14c5383a 	mul	r2,r2,r19
81119e30:	4010d43a 	srli	r8,r8,16
81119e34:	38ffffcc 	andi	r3,r7,65535
81119e38:	1105883a 	add	r2,r2,r4
81119e3c:	1008d43a 	srli	r4,r2,16
81119e40:	44d1383a 	mul	r8,r8,r19
81119e44:	198d883a 	add	r6,r3,r6
81119e48:	10ffffcc 	andi	r3,r2,65535
81119e4c:	30c7c83a 	sub	r3,r6,r3
81119e50:	380ed43a 	srli	r7,r7,16
81119e54:	4105883a 	add	r2,r8,r4
81119e58:	180dd43a 	srai	r6,r3,16
81119e5c:	113fffcc 	andi	r4,r2,65535
81119e60:	390fc83a 	sub	r7,r7,r4
81119e64:	398d883a 	add	r6,r7,r6
81119e68:	300e943a 	slli	r7,r6,16
81119e6c:	18ffffcc 	andi	r3,r3,65535
81119e70:	1008d43a 	srli	r4,r2,16
81119e74:	38ceb03a 	or	r7,r7,r3
81119e78:	49c00015 	stw	r7,0(r9)
81119e7c:	300dd43a 	srai	r6,r6,16
81119e80:	4a400104 	addi	r9,r9,4
81119e84:	a17fe52e 	bgeu	r20,r5,81119e1c <__reset+0xfb0f9e1c>
81119e88:	b0800017 	ldw	r2,0(r22)
81119e8c:	10000b1e 	bne	r2,zero,81119ebc <quorem+0x128>
81119e90:	b0bfff04 	addi	r2,r22,-4
81119e94:	a880082e 	bgeu	r21,r2,81119eb8 <quorem+0x124>
81119e98:	b0ffff17 	ldw	r3,-4(r22)
81119e9c:	18000326 	beq	r3,zero,81119eac <quorem+0x118>
81119ea0:	00000506 	br	81119eb8 <quorem+0x124>
81119ea4:	10c00017 	ldw	r3,0(r2)
81119ea8:	1800031e 	bne	r3,zero,81119eb8 <quorem+0x124>
81119eac:	10bfff04 	addi	r2,r2,-4
81119eb0:	94bfffc4 	addi	r18,r18,-1
81119eb4:	a8bffb36 	bltu	r21,r2,81119ea4 <__reset+0xfb0f9ea4>
81119eb8:	84800415 	stw	r18,16(r16)
81119ebc:	b80b883a 	mov	r5,r23
81119ec0:	8009883a 	mov	r4,r16
81119ec4:	111d9b40 	call	8111d9b4 <__mcmp>
81119ec8:	10002616 	blt	r2,zero,81119f64 <quorem+0x1d0>
81119ecc:	9cc00044 	addi	r19,r19,1
81119ed0:	a805883a 	mov	r2,r21
81119ed4:	000b883a 	mov	r5,zero
81119ed8:	11000017 	ldw	r4,0(r2)
81119edc:	89800017 	ldw	r6,0(r17)
81119ee0:	10800104 	addi	r2,r2,4
81119ee4:	20ffffcc 	andi	r3,r4,65535
81119ee8:	194b883a 	add	r5,r3,r5
81119eec:	30ffffcc 	andi	r3,r6,65535
81119ef0:	28c7c83a 	sub	r3,r5,r3
81119ef4:	300cd43a 	srli	r6,r6,16
81119ef8:	2008d43a 	srli	r4,r4,16
81119efc:	180bd43a 	srai	r5,r3,16
81119f00:	18ffffcc 	andi	r3,r3,65535
81119f04:	2189c83a 	sub	r4,r4,r6
81119f08:	2149883a 	add	r4,r4,r5
81119f0c:	200c943a 	slli	r6,r4,16
81119f10:	8c400104 	addi	r17,r17,4
81119f14:	200bd43a 	srai	r5,r4,16
81119f18:	30c6b03a 	or	r3,r6,r3
81119f1c:	10ffff15 	stw	r3,-4(r2)
81119f20:	a47fed2e 	bgeu	r20,r17,81119ed8 <__reset+0xfb0f9ed8>
81119f24:	9485883a 	add	r2,r18,r18
81119f28:	1085883a 	add	r2,r2,r2
81119f2c:	a887883a 	add	r3,r21,r2
81119f30:	18800017 	ldw	r2,0(r3)
81119f34:	10000b1e 	bne	r2,zero,81119f64 <quorem+0x1d0>
81119f38:	18bfff04 	addi	r2,r3,-4
81119f3c:	a880082e 	bgeu	r21,r2,81119f60 <quorem+0x1cc>
81119f40:	18ffff17 	ldw	r3,-4(r3)
81119f44:	18000326 	beq	r3,zero,81119f54 <quorem+0x1c0>
81119f48:	00000506 	br	81119f60 <quorem+0x1cc>
81119f4c:	10c00017 	ldw	r3,0(r2)
81119f50:	1800031e 	bne	r3,zero,81119f60 <quorem+0x1cc>
81119f54:	10bfff04 	addi	r2,r2,-4
81119f58:	94bfffc4 	addi	r18,r18,-1
81119f5c:	a8bffb36 	bltu	r21,r2,81119f4c <__reset+0xfb0f9f4c>
81119f60:	84800415 	stw	r18,16(r16)
81119f64:	9805883a 	mov	r2,r19
81119f68:	dfc00817 	ldw	ra,32(sp)
81119f6c:	ddc00717 	ldw	r23,28(sp)
81119f70:	dd800617 	ldw	r22,24(sp)
81119f74:	dd400517 	ldw	r21,20(sp)
81119f78:	dd000417 	ldw	r20,16(sp)
81119f7c:	dcc00317 	ldw	r19,12(sp)
81119f80:	dc800217 	ldw	r18,8(sp)
81119f84:	dc400117 	ldw	r17,4(sp)
81119f88:	dc000017 	ldw	r16,0(sp)
81119f8c:	dec00904 	addi	sp,sp,36
81119f90:	f800283a 	ret
81119f94:	0005883a 	mov	r2,zero
81119f98:	003ff306 	br	81119f68 <__reset+0xfb0f9f68>

81119f9c <_dtoa_r>:
81119f9c:	deffde04 	addi	sp,sp,-136
81119fa0:	de00012e 	bgeu	sp,et,81119fa8 <_dtoa_r+0xc>
81119fa4:	003b68fa 	trap	3
81119fa8:	20801017 	ldw	r2,64(r4)
81119fac:	df002015 	stw	fp,128(sp)
81119fb0:	dcc01b15 	stw	r19,108(sp)
81119fb4:	dc801a15 	stw	r18,104(sp)
81119fb8:	dc401915 	stw	r17,100(sp)
81119fbc:	dc001815 	stw	r16,96(sp)
81119fc0:	dfc02115 	stw	ra,132(sp)
81119fc4:	ddc01f15 	stw	r23,124(sp)
81119fc8:	dd801e15 	stw	r22,120(sp)
81119fcc:	dd401d15 	stw	r21,116(sp)
81119fd0:	dd001c15 	stw	r20,112(sp)
81119fd4:	d9c00315 	stw	r7,12(sp)
81119fd8:	2039883a 	mov	fp,r4
81119fdc:	3023883a 	mov	r17,r6
81119fe0:	2825883a 	mov	r18,r5
81119fe4:	dc002417 	ldw	r16,144(sp)
81119fe8:	3027883a 	mov	r19,r6
81119fec:	10000826 	beq	r2,zero,8111a010 <_dtoa_r+0x74>
81119ff0:	21801117 	ldw	r6,68(r4)
81119ff4:	00c00044 	movi	r3,1
81119ff8:	100b883a 	mov	r5,r2
81119ffc:	1986983a 	sll	r3,r3,r6
8111a000:	11800115 	stw	r6,4(r2)
8111a004:	10c00215 	stw	r3,8(r2)
8111a008:	111d1640 	call	8111d164 <_Bfree>
8111a00c:	e0001015 	stw	zero,64(fp)
8111a010:	88002e16 	blt	r17,zero,8111a0cc <_dtoa_r+0x130>
8111a014:	80000015 	stw	zero,0(r16)
8111a018:	889ffc2c 	andhi	r2,r17,32752
8111a01c:	00dffc34 	movhi	r3,32752
8111a020:	10c01c26 	beq	r2,r3,8111a094 <_dtoa_r+0xf8>
8111a024:	000d883a 	mov	r6,zero
8111a028:	000f883a 	mov	r7,zero
8111a02c:	9009883a 	mov	r4,r18
8111a030:	980b883a 	mov	r5,r19
8111a034:	11268c80 	call	811268c8 <__eqdf2>
8111a038:	10002b1e 	bne	r2,zero,8111a0e8 <_dtoa_r+0x14c>
8111a03c:	d9c02317 	ldw	r7,140(sp)
8111a040:	00800044 	movi	r2,1
8111a044:	38800015 	stw	r2,0(r7)
8111a048:	d8802517 	ldw	r2,148(sp)
8111a04c:	10019e26 	beq	r2,zero,8111a6c8 <_dtoa_r+0x72c>
8111a050:	d8c02517 	ldw	r3,148(sp)
8111a054:	00a04534 	movhi	r2,33044
8111a058:	10bf7f44 	addi	r2,r2,-515
8111a05c:	18800015 	stw	r2,0(r3)
8111a060:	10bfffc4 	addi	r2,r2,-1
8111a064:	dfc02117 	ldw	ra,132(sp)
8111a068:	df002017 	ldw	fp,128(sp)
8111a06c:	ddc01f17 	ldw	r23,124(sp)
8111a070:	dd801e17 	ldw	r22,120(sp)
8111a074:	dd401d17 	ldw	r21,116(sp)
8111a078:	dd001c17 	ldw	r20,112(sp)
8111a07c:	dcc01b17 	ldw	r19,108(sp)
8111a080:	dc801a17 	ldw	r18,104(sp)
8111a084:	dc401917 	ldw	r17,100(sp)
8111a088:	dc001817 	ldw	r16,96(sp)
8111a08c:	dec02204 	addi	sp,sp,136
8111a090:	f800283a 	ret
8111a094:	d8c02317 	ldw	r3,140(sp)
8111a098:	0089c3c4 	movi	r2,9999
8111a09c:	18800015 	stw	r2,0(r3)
8111a0a0:	90017726 	beq	r18,zero,8111a680 <_dtoa_r+0x6e4>
8111a0a4:	00a04534 	movhi	r2,33044
8111a0a8:	10bf9d04 	addi	r2,r2,-396
8111a0ac:	d9002517 	ldw	r4,148(sp)
8111a0b0:	203fec26 	beq	r4,zero,8111a064 <__reset+0xfb0fa064>
8111a0b4:	10c000c7 	ldb	r3,3(r2)
8111a0b8:	1801781e 	bne	r3,zero,8111a69c <_dtoa_r+0x700>
8111a0bc:	10c000c4 	addi	r3,r2,3
8111a0c0:	d9802517 	ldw	r6,148(sp)
8111a0c4:	30c00015 	stw	r3,0(r6)
8111a0c8:	003fe606 	br	8111a064 <__reset+0xfb0fa064>
8111a0cc:	04e00034 	movhi	r19,32768
8111a0d0:	9cffffc4 	addi	r19,r19,-1
8111a0d4:	00800044 	movi	r2,1
8111a0d8:	8ce6703a 	and	r19,r17,r19
8111a0dc:	80800015 	stw	r2,0(r16)
8111a0e0:	9823883a 	mov	r17,r19
8111a0e4:	003fcc06 	br	8111a018 <__reset+0xfb0fa018>
8111a0e8:	d8800204 	addi	r2,sp,8
8111a0ec:	d8800015 	stw	r2,0(sp)
8111a0f0:	d9c00104 	addi	r7,sp,4
8111a0f4:	900b883a 	mov	r5,r18
8111a0f8:	980d883a 	mov	r6,r19
8111a0fc:	e009883a 	mov	r4,fp
8111a100:	8820d53a 	srli	r16,r17,20
8111a104:	111dd900 	call	8111dd90 <__d2b>
8111a108:	d8800915 	stw	r2,36(sp)
8111a10c:	8001651e 	bne	r16,zero,8111a6a4 <_dtoa_r+0x708>
8111a110:	dd800217 	ldw	r22,8(sp)
8111a114:	dc000117 	ldw	r16,4(sp)
8111a118:	00800804 	movi	r2,32
8111a11c:	b421883a 	add	r16,r22,r16
8111a120:	80c10c84 	addi	r3,r16,1074
8111a124:	10c2d10e 	bge	r2,r3,8111ac6c <_dtoa_r+0xcd0>
8111a128:	00801004 	movi	r2,64
8111a12c:	81010484 	addi	r4,r16,1042
8111a130:	10c7c83a 	sub	r3,r2,r3
8111a134:	9108d83a 	srl	r4,r18,r4
8111a138:	88e2983a 	sll	r17,r17,r3
8111a13c:	2448b03a 	or	r4,r4,r17
8111a140:	11275880 	call	81127588 <__floatunsidf>
8111a144:	017f8434 	movhi	r5,65040
8111a148:	01800044 	movi	r6,1
8111a14c:	1009883a 	mov	r4,r2
8111a150:	194b883a 	add	r5,r3,r5
8111a154:	843fffc4 	addi	r16,r16,-1
8111a158:	d9801115 	stw	r6,68(sp)
8111a15c:	000d883a 	mov	r6,zero
8111a160:	01cffe34 	movhi	r7,16376
8111a164:	1126b200 	call	81126b20 <__subdf3>
8111a168:	0198dbf4 	movhi	r6,25455
8111a16c:	01cff4f4 	movhi	r7,16339
8111a170:	3190d844 	addi	r6,r6,17249
8111a174:	39e1e9c4 	addi	r7,r7,-30809
8111a178:	1009883a 	mov	r4,r2
8111a17c:	180b883a 	mov	r5,r3
8111a180:	11112340 	call	81111234 <__muldf3>
8111a184:	01a2d874 	movhi	r6,35681
8111a188:	01cff1f4 	movhi	r7,16327
8111a18c:	31b22cc4 	addi	r6,r6,-14157
8111a190:	39e28a04 	addi	r7,r7,-30168
8111a194:	180b883a 	mov	r5,r3
8111a198:	1009883a 	mov	r4,r2
8111a19c:	11257240 	call	81125724 <__adddf3>
8111a1a0:	8009883a 	mov	r4,r16
8111a1a4:	1029883a 	mov	r20,r2
8111a1a8:	1823883a 	mov	r17,r3
8111a1ac:	11274a40 	call	811274a4 <__floatsidf>
8111a1b0:	019427f4 	movhi	r6,20639
8111a1b4:	01cff4f4 	movhi	r7,16339
8111a1b8:	319e7ec4 	addi	r6,r6,31227
8111a1bc:	39d104c4 	addi	r7,r7,17427
8111a1c0:	1009883a 	mov	r4,r2
8111a1c4:	180b883a 	mov	r5,r3
8111a1c8:	11112340 	call	81111234 <__muldf3>
8111a1cc:	100d883a 	mov	r6,r2
8111a1d0:	180f883a 	mov	r7,r3
8111a1d4:	a009883a 	mov	r4,r20
8111a1d8:	880b883a 	mov	r5,r17
8111a1dc:	11257240 	call	81125724 <__adddf3>
8111a1e0:	1009883a 	mov	r4,r2
8111a1e4:	180b883a 	mov	r5,r3
8111a1e8:	1029883a 	mov	r20,r2
8111a1ec:	1823883a 	mov	r17,r3
8111a1f0:	11274240 	call	81127424 <__fixdfsi>
8111a1f4:	000d883a 	mov	r6,zero
8111a1f8:	000f883a 	mov	r7,zero
8111a1fc:	a009883a 	mov	r4,r20
8111a200:	880b883a 	mov	r5,r17
8111a204:	d8800515 	stw	r2,20(sp)
8111a208:	1126a2c0 	call	81126a2c <__ledf2>
8111a20c:	10028716 	blt	r2,zero,8111ac2c <_dtoa_r+0xc90>
8111a210:	d8c00517 	ldw	r3,20(sp)
8111a214:	00800584 	movi	r2,22
8111a218:	10c27536 	bltu	r2,r3,8111abf0 <_dtoa_r+0xc54>
8111a21c:	180490fa 	slli	r2,r3,3
8111a220:	00e04534 	movhi	r3,33044
8111a224:	18ffb804 	addi	r3,r3,-288
8111a228:	1885883a 	add	r2,r3,r2
8111a22c:	11000017 	ldw	r4,0(r2)
8111a230:	11400117 	ldw	r5,4(r2)
8111a234:	900d883a 	mov	r6,r18
8111a238:	980f883a 	mov	r7,r19
8111a23c:	11269500 	call	81126950 <__gedf2>
8111a240:	00828d0e 	bge	zero,r2,8111ac78 <_dtoa_r+0xcdc>
8111a244:	d9000517 	ldw	r4,20(sp)
8111a248:	d8000e15 	stw	zero,56(sp)
8111a24c:	213fffc4 	addi	r4,r4,-1
8111a250:	d9000515 	stw	r4,20(sp)
8111a254:	b42dc83a 	sub	r22,r22,r16
8111a258:	b5bfffc4 	addi	r22,r22,-1
8111a25c:	b0026f16 	blt	r22,zero,8111ac1c <_dtoa_r+0xc80>
8111a260:	d8000815 	stw	zero,32(sp)
8111a264:	d9c00517 	ldw	r7,20(sp)
8111a268:	38026416 	blt	r7,zero,8111abfc <_dtoa_r+0xc60>
8111a26c:	b1ed883a 	add	r22,r22,r7
8111a270:	d9c00d15 	stw	r7,52(sp)
8111a274:	d8000a15 	stw	zero,40(sp)
8111a278:	d9800317 	ldw	r6,12(sp)
8111a27c:	00800244 	movi	r2,9
8111a280:	11811436 	bltu	r2,r6,8111a6d4 <_dtoa_r+0x738>
8111a284:	00800144 	movi	r2,5
8111a288:	1184e10e 	bge	r2,r6,8111b610 <_dtoa_r+0x1674>
8111a28c:	31bfff04 	addi	r6,r6,-4
8111a290:	d9800315 	stw	r6,12(sp)
8111a294:	0023883a 	mov	r17,zero
8111a298:	d9800317 	ldw	r6,12(sp)
8111a29c:	008000c4 	movi	r2,3
8111a2a0:	30836726 	beq	r6,r2,8111b040 <_dtoa_r+0x10a4>
8111a2a4:	1183410e 	bge	r2,r6,8111afac <_dtoa_r+0x1010>
8111a2a8:	d9c00317 	ldw	r7,12(sp)
8111a2ac:	00800104 	movi	r2,4
8111a2b0:	38827c26 	beq	r7,r2,8111aca4 <_dtoa_r+0xd08>
8111a2b4:	00800144 	movi	r2,5
8111a2b8:	3884c41e 	bne	r7,r2,8111b5cc <_dtoa_r+0x1630>
8111a2bc:	00800044 	movi	r2,1
8111a2c0:	d8800b15 	stw	r2,44(sp)
8111a2c4:	d8c00517 	ldw	r3,20(sp)
8111a2c8:	d9002217 	ldw	r4,136(sp)
8111a2cc:	1907883a 	add	r3,r3,r4
8111a2d0:	19800044 	addi	r6,r3,1
8111a2d4:	d8c00c15 	stw	r3,48(sp)
8111a2d8:	d9800615 	stw	r6,24(sp)
8111a2dc:	0183a40e 	bge	zero,r6,8111b170 <_dtoa_r+0x11d4>
8111a2e0:	d9800617 	ldw	r6,24(sp)
8111a2e4:	3021883a 	mov	r16,r6
8111a2e8:	e0001115 	stw	zero,68(fp)
8111a2ec:	008005c4 	movi	r2,23
8111a2f0:	1184c92e 	bgeu	r2,r6,8111b618 <_dtoa_r+0x167c>
8111a2f4:	00c00044 	movi	r3,1
8111a2f8:	00800104 	movi	r2,4
8111a2fc:	1085883a 	add	r2,r2,r2
8111a300:	11000504 	addi	r4,r2,20
8111a304:	180b883a 	mov	r5,r3
8111a308:	18c00044 	addi	r3,r3,1
8111a30c:	313ffb2e 	bgeu	r6,r4,8111a2fc <__reset+0xfb0fa2fc>
8111a310:	e1401115 	stw	r5,68(fp)
8111a314:	e009883a 	mov	r4,fp
8111a318:	111d0b40 	call	8111d0b4 <_Balloc>
8111a31c:	d8800715 	stw	r2,28(sp)
8111a320:	e0801015 	stw	r2,64(fp)
8111a324:	00800384 	movi	r2,14
8111a328:	1400f736 	bltu	r2,r16,8111a708 <_dtoa_r+0x76c>
8111a32c:	8800f626 	beq	r17,zero,8111a708 <_dtoa_r+0x76c>
8111a330:	d9c00517 	ldw	r7,20(sp)
8111a334:	01c39a0e 	bge	zero,r7,8111b1a0 <_dtoa_r+0x1204>
8111a338:	388003cc 	andi	r2,r7,15
8111a33c:	100490fa 	slli	r2,r2,3
8111a340:	382bd13a 	srai	r21,r7,4
8111a344:	00e04534 	movhi	r3,33044
8111a348:	18ffb804 	addi	r3,r3,-288
8111a34c:	1885883a 	add	r2,r3,r2
8111a350:	a8c0040c 	andi	r3,r21,16
8111a354:	12400017 	ldw	r9,0(r2)
8111a358:	12000117 	ldw	r8,4(r2)
8111a35c:	18037926 	beq	r3,zero,8111b144 <_dtoa_r+0x11a8>
8111a360:	00a04534 	movhi	r2,33044
8111a364:	10bfae04 	addi	r2,r2,-328
8111a368:	11800817 	ldw	r6,32(r2)
8111a36c:	11c00917 	ldw	r7,36(r2)
8111a370:	9009883a 	mov	r4,r18
8111a374:	980b883a 	mov	r5,r19
8111a378:	da001715 	stw	r8,92(sp)
8111a37c:	da401615 	stw	r9,88(sp)
8111a380:	1125fd80 	call	81125fd8 <__divdf3>
8111a384:	da001717 	ldw	r8,92(sp)
8111a388:	da401617 	ldw	r9,88(sp)
8111a38c:	ad4003cc 	andi	r21,r21,15
8111a390:	040000c4 	movi	r16,3
8111a394:	1023883a 	mov	r17,r2
8111a398:	1829883a 	mov	r20,r3
8111a39c:	a8001126 	beq	r21,zero,8111a3e4 <_dtoa_r+0x448>
8111a3a0:	05e04534 	movhi	r23,33044
8111a3a4:	bdffae04 	addi	r23,r23,-328
8111a3a8:	4805883a 	mov	r2,r9
8111a3ac:	4007883a 	mov	r3,r8
8111a3b0:	a980004c 	andi	r6,r21,1
8111a3b4:	1009883a 	mov	r4,r2
8111a3b8:	a82bd07a 	srai	r21,r21,1
8111a3bc:	180b883a 	mov	r5,r3
8111a3c0:	30000426 	beq	r6,zero,8111a3d4 <_dtoa_r+0x438>
8111a3c4:	b9800017 	ldw	r6,0(r23)
8111a3c8:	b9c00117 	ldw	r7,4(r23)
8111a3cc:	84000044 	addi	r16,r16,1
8111a3d0:	11112340 	call	81111234 <__muldf3>
8111a3d4:	bdc00204 	addi	r23,r23,8
8111a3d8:	a83ff51e 	bne	r21,zero,8111a3b0 <__reset+0xfb0fa3b0>
8111a3dc:	1013883a 	mov	r9,r2
8111a3e0:	1811883a 	mov	r8,r3
8111a3e4:	480d883a 	mov	r6,r9
8111a3e8:	400f883a 	mov	r7,r8
8111a3ec:	8809883a 	mov	r4,r17
8111a3f0:	a00b883a 	mov	r5,r20
8111a3f4:	1125fd80 	call	81125fd8 <__divdf3>
8111a3f8:	d8800f15 	stw	r2,60(sp)
8111a3fc:	d8c01015 	stw	r3,64(sp)
8111a400:	d8c00e17 	ldw	r3,56(sp)
8111a404:	18000626 	beq	r3,zero,8111a420 <_dtoa_r+0x484>
8111a408:	d9000f17 	ldw	r4,60(sp)
8111a40c:	d9401017 	ldw	r5,64(sp)
8111a410:	000d883a 	mov	r6,zero
8111a414:	01cffc34 	movhi	r7,16368
8111a418:	1126a2c0 	call	81126a2c <__ledf2>
8111a41c:	10040b16 	blt	r2,zero,8111b44c <_dtoa_r+0x14b0>
8111a420:	8009883a 	mov	r4,r16
8111a424:	11274a40 	call	811274a4 <__floatsidf>
8111a428:	d9800f17 	ldw	r6,60(sp)
8111a42c:	d9c01017 	ldw	r7,64(sp)
8111a430:	1009883a 	mov	r4,r2
8111a434:	180b883a 	mov	r5,r3
8111a438:	11112340 	call	81111234 <__muldf3>
8111a43c:	000d883a 	mov	r6,zero
8111a440:	01d00734 	movhi	r7,16412
8111a444:	1009883a 	mov	r4,r2
8111a448:	180b883a 	mov	r5,r3
8111a44c:	11257240 	call	81125724 <__adddf3>
8111a450:	1021883a 	mov	r16,r2
8111a454:	d8800617 	ldw	r2,24(sp)
8111a458:	047f3034 	movhi	r17,64704
8111a45c:	1c63883a 	add	r17,r3,r17
8111a460:	10031826 	beq	r2,zero,8111b0c4 <_dtoa_r+0x1128>
8111a464:	d8c00517 	ldw	r3,20(sp)
8111a468:	db000617 	ldw	r12,24(sp)
8111a46c:	d8c01315 	stw	r3,76(sp)
8111a470:	d9000b17 	ldw	r4,44(sp)
8111a474:	20038f26 	beq	r4,zero,8111b2b4 <_dtoa_r+0x1318>
8111a478:	60bfffc4 	addi	r2,r12,-1
8111a47c:	100490fa 	slli	r2,r2,3
8111a480:	00e04534 	movhi	r3,33044
8111a484:	18ffb804 	addi	r3,r3,-288
8111a488:	1885883a 	add	r2,r3,r2
8111a48c:	11800017 	ldw	r6,0(r2)
8111a490:	11c00117 	ldw	r7,4(r2)
8111a494:	d8800717 	ldw	r2,28(sp)
8111a498:	0009883a 	mov	r4,zero
8111a49c:	014ff834 	movhi	r5,16352
8111a4a0:	db001615 	stw	r12,88(sp)
8111a4a4:	15c00044 	addi	r23,r2,1
8111a4a8:	1125fd80 	call	81125fd8 <__divdf3>
8111a4ac:	800d883a 	mov	r6,r16
8111a4b0:	880f883a 	mov	r7,r17
8111a4b4:	1009883a 	mov	r4,r2
8111a4b8:	180b883a 	mov	r5,r3
8111a4bc:	1126b200 	call	81126b20 <__subdf3>
8111a4c0:	d9401017 	ldw	r5,64(sp)
8111a4c4:	d9000f17 	ldw	r4,60(sp)
8111a4c8:	102b883a 	mov	r21,r2
8111a4cc:	d8c01215 	stw	r3,72(sp)
8111a4d0:	11274240 	call	81127424 <__fixdfsi>
8111a4d4:	1009883a 	mov	r4,r2
8111a4d8:	1029883a 	mov	r20,r2
8111a4dc:	11274a40 	call	811274a4 <__floatsidf>
8111a4e0:	d9000f17 	ldw	r4,60(sp)
8111a4e4:	d9401017 	ldw	r5,64(sp)
8111a4e8:	100d883a 	mov	r6,r2
8111a4ec:	180f883a 	mov	r7,r3
8111a4f0:	1126b200 	call	81126b20 <__subdf3>
8111a4f4:	1823883a 	mov	r17,r3
8111a4f8:	d8c00717 	ldw	r3,28(sp)
8111a4fc:	d9401217 	ldw	r5,72(sp)
8111a500:	a2000c04 	addi	r8,r20,48
8111a504:	1021883a 	mov	r16,r2
8111a508:	1a000005 	stb	r8,0(r3)
8111a50c:	800d883a 	mov	r6,r16
8111a510:	880f883a 	mov	r7,r17
8111a514:	a809883a 	mov	r4,r21
8111a518:	4029883a 	mov	r20,r8
8111a51c:	11269500 	call	81126950 <__gedf2>
8111a520:	00841d16 	blt	zero,r2,8111b598 <_dtoa_r+0x15fc>
8111a524:	800d883a 	mov	r6,r16
8111a528:	880f883a 	mov	r7,r17
8111a52c:	0009883a 	mov	r4,zero
8111a530:	014ffc34 	movhi	r5,16368
8111a534:	1126b200 	call	81126b20 <__subdf3>
8111a538:	d9401217 	ldw	r5,72(sp)
8111a53c:	100d883a 	mov	r6,r2
8111a540:	180f883a 	mov	r7,r3
8111a544:	a809883a 	mov	r4,r21
8111a548:	11269500 	call	81126950 <__gedf2>
8111a54c:	db001617 	ldw	r12,88(sp)
8111a550:	00840e16 	blt	zero,r2,8111b58c <_dtoa_r+0x15f0>
8111a554:	00800044 	movi	r2,1
8111a558:	13006b0e 	bge	r2,r12,8111a708 <_dtoa_r+0x76c>
8111a55c:	d9000717 	ldw	r4,28(sp)
8111a560:	dd800f15 	stw	r22,60(sp)
8111a564:	dcc01015 	stw	r19,64(sp)
8111a568:	2319883a 	add	r12,r4,r12
8111a56c:	dcc01217 	ldw	r19,72(sp)
8111a570:	602d883a 	mov	r22,r12
8111a574:	dc801215 	stw	r18,72(sp)
8111a578:	b825883a 	mov	r18,r23
8111a57c:	00000906 	br	8111a5a4 <_dtoa_r+0x608>
8111a580:	1126b200 	call	81126b20 <__subdf3>
8111a584:	a80d883a 	mov	r6,r21
8111a588:	980f883a 	mov	r7,r19
8111a58c:	1009883a 	mov	r4,r2
8111a590:	180b883a 	mov	r5,r3
8111a594:	1126a2c0 	call	81126a2c <__ledf2>
8111a598:	1003e816 	blt	r2,zero,8111b53c <_dtoa_r+0x15a0>
8111a59c:	b825883a 	mov	r18,r23
8111a5a0:	bd83e926 	beq	r23,r22,8111b548 <_dtoa_r+0x15ac>
8111a5a4:	a809883a 	mov	r4,r21
8111a5a8:	980b883a 	mov	r5,r19
8111a5ac:	000d883a 	mov	r6,zero
8111a5b0:	01d00934 	movhi	r7,16420
8111a5b4:	11112340 	call	81111234 <__muldf3>
8111a5b8:	000d883a 	mov	r6,zero
8111a5bc:	01d00934 	movhi	r7,16420
8111a5c0:	8009883a 	mov	r4,r16
8111a5c4:	880b883a 	mov	r5,r17
8111a5c8:	102b883a 	mov	r21,r2
8111a5cc:	1827883a 	mov	r19,r3
8111a5d0:	11112340 	call	81111234 <__muldf3>
8111a5d4:	180b883a 	mov	r5,r3
8111a5d8:	1009883a 	mov	r4,r2
8111a5dc:	1821883a 	mov	r16,r3
8111a5e0:	1023883a 	mov	r17,r2
8111a5e4:	11274240 	call	81127424 <__fixdfsi>
8111a5e8:	1009883a 	mov	r4,r2
8111a5ec:	1029883a 	mov	r20,r2
8111a5f0:	11274a40 	call	811274a4 <__floatsidf>
8111a5f4:	8809883a 	mov	r4,r17
8111a5f8:	800b883a 	mov	r5,r16
8111a5fc:	100d883a 	mov	r6,r2
8111a600:	180f883a 	mov	r7,r3
8111a604:	1126b200 	call	81126b20 <__subdf3>
8111a608:	a5000c04 	addi	r20,r20,48
8111a60c:	a80d883a 	mov	r6,r21
8111a610:	980f883a 	mov	r7,r19
8111a614:	1009883a 	mov	r4,r2
8111a618:	180b883a 	mov	r5,r3
8111a61c:	95000005 	stb	r20,0(r18)
8111a620:	1021883a 	mov	r16,r2
8111a624:	1823883a 	mov	r17,r3
8111a628:	1126a2c0 	call	81126a2c <__ledf2>
8111a62c:	bdc00044 	addi	r23,r23,1
8111a630:	800d883a 	mov	r6,r16
8111a634:	880f883a 	mov	r7,r17
8111a638:	0009883a 	mov	r4,zero
8111a63c:	014ffc34 	movhi	r5,16368
8111a640:	103fcf0e 	bge	r2,zero,8111a580 <__reset+0xfb0fa580>
8111a644:	d8c01317 	ldw	r3,76(sp)
8111a648:	d8c00515 	stw	r3,20(sp)
8111a64c:	d9400917 	ldw	r5,36(sp)
8111a650:	e009883a 	mov	r4,fp
8111a654:	111d1640 	call	8111d164 <_Bfree>
8111a658:	d9000517 	ldw	r4,20(sp)
8111a65c:	d9802317 	ldw	r6,140(sp)
8111a660:	d9c02517 	ldw	r7,148(sp)
8111a664:	b8000005 	stb	zero,0(r23)
8111a668:	20800044 	addi	r2,r4,1
8111a66c:	30800015 	stw	r2,0(r6)
8111a670:	3802aa26 	beq	r7,zero,8111b11c <_dtoa_r+0x1180>
8111a674:	3dc00015 	stw	r23,0(r7)
8111a678:	d8800717 	ldw	r2,28(sp)
8111a67c:	003e7906 	br	8111a064 <__reset+0xfb0fa064>
8111a680:	00800434 	movhi	r2,16
8111a684:	10bfffc4 	addi	r2,r2,-1
8111a688:	88a2703a 	and	r17,r17,r2
8111a68c:	883e851e 	bne	r17,zero,8111a0a4 <__reset+0xfb0fa0a4>
8111a690:	00a04534 	movhi	r2,33044
8111a694:	10bf9a04 	addi	r2,r2,-408
8111a698:	003e8406 	br	8111a0ac <__reset+0xfb0fa0ac>
8111a69c:	10c00204 	addi	r3,r2,8
8111a6a0:	003e8706 	br	8111a0c0 <__reset+0xfb0fa0c0>
8111a6a4:	01400434 	movhi	r5,16
8111a6a8:	297fffc4 	addi	r5,r5,-1
8111a6ac:	994a703a 	and	r5,r19,r5
8111a6b0:	9009883a 	mov	r4,r18
8111a6b4:	843f0044 	addi	r16,r16,-1023
8111a6b8:	294ffc34 	orhi	r5,r5,16368
8111a6bc:	dd800217 	ldw	r22,8(sp)
8111a6c0:	d8001115 	stw	zero,68(sp)
8111a6c4:	003ea506 	br	8111a15c <__reset+0xfb0fa15c>
8111a6c8:	00a04534 	movhi	r2,33044
8111a6cc:	10bf7f04 	addi	r2,r2,-516
8111a6d0:	003e6406 	br	8111a064 <__reset+0xfb0fa064>
8111a6d4:	e0001115 	stw	zero,68(fp)
8111a6d8:	000b883a 	mov	r5,zero
8111a6dc:	e009883a 	mov	r4,fp
8111a6e0:	111d0b40 	call	8111d0b4 <_Balloc>
8111a6e4:	01bfffc4 	movi	r6,-1
8111a6e8:	01c00044 	movi	r7,1
8111a6ec:	d8800715 	stw	r2,28(sp)
8111a6f0:	d9800c15 	stw	r6,48(sp)
8111a6f4:	e0801015 	stw	r2,64(fp)
8111a6f8:	d8000315 	stw	zero,12(sp)
8111a6fc:	d9c00b15 	stw	r7,44(sp)
8111a700:	d9800615 	stw	r6,24(sp)
8111a704:	d8002215 	stw	zero,136(sp)
8111a708:	d8800117 	ldw	r2,4(sp)
8111a70c:	10008916 	blt	r2,zero,8111a934 <_dtoa_r+0x998>
8111a710:	d9000517 	ldw	r4,20(sp)
8111a714:	00c00384 	movi	r3,14
8111a718:	19008616 	blt	r3,r4,8111a934 <_dtoa_r+0x998>
8111a71c:	200490fa 	slli	r2,r4,3
8111a720:	00e04534 	movhi	r3,33044
8111a724:	d9802217 	ldw	r6,136(sp)
8111a728:	18ffb804 	addi	r3,r3,-288
8111a72c:	1885883a 	add	r2,r3,r2
8111a730:	14000017 	ldw	r16,0(r2)
8111a734:	14400117 	ldw	r17,4(r2)
8111a738:	30016316 	blt	r6,zero,8111acc8 <_dtoa_r+0xd2c>
8111a73c:	800d883a 	mov	r6,r16
8111a740:	880f883a 	mov	r7,r17
8111a744:	9009883a 	mov	r4,r18
8111a748:	980b883a 	mov	r5,r19
8111a74c:	1125fd80 	call	81125fd8 <__divdf3>
8111a750:	180b883a 	mov	r5,r3
8111a754:	1009883a 	mov	r4,r2
8111a758:	11274240 	call	81127424 <__fixdfsi>
8111a75c:	1009883a 	mov	r4,r2
8111a760:	102b883a 	mov	r21,r2
8111a764:	11274a40 	call	811274a4 <__floatsidf>
8111a768:	800d883a 	mov	r6,r16
8111a76c:	880f883a 	mov	r7,r17
8111a770:	1009883a 	mov	r4,r2
8111a774:	180b883a 	mov	r5,r3
8111a778:	11112340 	call	81111234 <__muldf3>
8111a77c:	100d883a 	mov	r6,r2
8111a780:	180f883a 	mov	r7,r3
8111a784:	9009883a 	mov	r4,r18
8111a788:	980b883a 	mov	r5,r19
8111a78c:	1126b200 	call	81126b20 <__subdf3>
8111a790:	d9c00717 	ldw	r7,28(sp)
8111a794:	1009883a 	mov	r4,r2
8111a798:	a8800c04 	addi	r2,r21,48
8111a79c:	38800005 	stb	r2,0(r7)
8111a7a0:	3dc00044 	addi	r23,r7,1
8111a7a4:	d9c00617 	ldw	r7,24(sp)
8111a7a8:	01800044 	movi	r6,1
8111a7ac:	180b883a 	mov	r5,r3
8111a7b0:	2005883a 	mov	r2,r4
8111a7b4:	39803826 	beq	r7,r6,8111a898 <_dtoa_r+0x8fc>
8111a7b8:	000d883a 	mov	r6,zero
8111a7bc:	01d00934 	movhi	r7,16420
8111a7c0:	11112340 	call	81111234 <__muldf3>
8111a7c4:	000d883a 	mov	r6,zero
8111a7c8:	000f883a 	mov	r7,zero
8111a7cc:	1009883a 	mov	r4,r2
8111a7d0:	180b883a 	mov	r5,r3
8111a7d4:	1025883a 	mov	r18,r2
8111a7d8:	1827883a 	mov	r19,r3
8111a7dc:	11268c80 	call	811268c8 <__eqdf2>
8111a7e0:	103f9a26 	beq	r2,zero,8111a64c <__reset+0xfb0fa64c>
8111a7e4:	d9c00617 	ldw	r7,24(sp)
8111a7e8:	d8c00717 	ldw	r3,28(sp)
8111a7ec:	b829883a 	mov	r20,r23
8111a7f0:	38bfffc4 	addi	r2,r7,-1
8111a7f4:	18ad883a 	add	r22,r3,r2
8111a7f8:	00000a06 	br	8111a824 <_dtoa_r+0x888>
8111a7fc:	11112340 	call	81111234 <__muldf3>
8111a800:	000d883a 	mov	r6,zero
8111a804:	000f883a 	mov	r7,zero
8111a808:	1009883a 	mov	r4,r2
8111a80c:	180b883a 	mov	r5,r3
8111a810:	1025883a 	mov	r18,r2
8111a814:	1827883a 	mov	r19,r3
8111a818:	b829883a 	mov	r20,r23
8111a81c:	11268c80 	call	811268c8 <__eqdf2>
8111a820:	103f8a26 	beq	r2,zero,8111a64c <__reset+0xfb0fa64c>
8111a824:	800d883a 	mov	r6,r16
8111a828:	880f883a 	mov	r7,r17
8111a82c:	9009883a 	mov	r4,r18
8111a830:	980b883a 	mov	r5,r19
8111a834:	1125fd80 	call	81125fd8 <__divdf3>
8111a838:	180b883a 	mov	r5,r3
8111a83c:	1009883a 	mov	r4,r2
8111a840:	11274240 	call	81127424 <__fixdfsi>
8111a844:	1009883a 	mov	r4,r2
8111a848:	102b883a 	mov	r21,r2
8111a84c:	11274a40 	call	811274a4 <__floatsidf>
8111a850:	800d883a 	mov	r6,r16
8111a854:	880f883a 	mov	r7,r17
8111a858:	1009883a 	mov	r4,r2
8111a85c:	180b883a 	mov	r5,r3
8111a860:	11112340 	call	81111234 <__muldf3>
8111a864:	100d883a 	mov	r6,r2
8111a868:	180f883a 	mov	r7,r3
8111a86c:	9009883a 	mov	r4,r18
8111a870:	980b883a 	mov	r5,r19
8111a874:	1126b200 	call	81126b20 <__subdf3>
8111a878:	aa000c04 	addi	r8,r21,48
8111a87c:	a2000005 	stb	r8,0(r20)
8111a880:	000d883a 	mov	r6,zero
8111a884:	01d00934 	movhi	r7,16420
8111a888:	1009883a 	mov	r4,r2
8111a88c:	180b883a 	mov	r5,r3
8111a890:	a5c00044 	addi	r23,r20,1
8111a894:	b53fd91e 	bne	r22,r20,8111a7fc <__reset+0xfb0fa7fc>
8111a898:	100d883a 	mov	r6,r2
8111a89c:	180f883a 	mov	r7,r3
8111a8a0:	1009883a 	mov	r4,r2
8111a8a4:	180b883a 	mov	r5,r3
8111a8a8:	11257240 	call	81125724 <__adddf3>
8111a8ac:	100d883a 	mov	r6,r2
8111a8b0:	180f883a 	mov	r7,r3
8111a8b4:	8009883a 	mov	r4,r16
8111a8b8:	880b883a 	mov	r5,r17
8111a8bc:	1027883a 	mov	r19,r2
8111a8c0:	1825883a 	mov	r18,r3
8111a8c4:	1126a2c0 	call	81126a2c <__ledf2>
8111a8c8:	10000816 	blt	r2,zero,8111a8ec <_dtoa_r+0x950>
8111a8cc:	980d883a 	mov	r6,r19
8111a8d0:	900f883a 	mov	r7,r18
8111a8d4:	8009883a 	mov	r4,r16
8111a8d8:	880b883a 	mov	r5,r17
8111a8dc:	11268c80 	call	811268c8 <__eqdf2>
8111a8e0:	103f5a1e 	bne	r2,zero,8111a64c <__reset+0xfb0fa64c>
8111a8e4:	ad40004c 	andi	r21,r21,1
8111a8e8:	a83f5826 	beq	r21,zero,8111a64c <__reset+0xfb0fa64c>
8111a8ec:	bd3fffc3 	ldbu	r20,-1(r23)
8111a8f0:	b8bfffc4 	addi	r2,r23,-1
8111a8f4:	1007883a 	mov	r3,r2
8111a8f8:	01400e44 	movi	r5,57
8111a8fc:	d9800717 	ldw	r6,28(sp)
8111a900:	00000506 	br	8111a918 <_dtoa_r+0x97c>
8111a904:	18ffffc4 	addi	r3,r3,-1
8111a908:	11824726 	beq	r2,r6,8111b228 <_dtoa_r+0x128c>
8111a90c:	1d000003 	ldbu	r20,0(r3)
8111a910:	102f883a 	mov	r23,r2
8111a914:	10bfffc4 	addi	r2,r2,-1
8111a918:	a1003fcc 	andi	r4,r20,255
8111a91c:	2100201c 	xori	r4,r4,128
8111a920:	213fe004 	addi	r4,r4,-128
8111a924:	217ff726 	beq	r4,r5,8111a904 <__reset+0xfb0fa904>
8111a928:	a2000044 	addi	r8,r20,1
8111a92c:	12000005 	stb	r8,0(r2)
8111a930:	003f4606 	br	8111a64c <__reset+0xfb0fa64c>
8111a934:	d9000b17 	ldw	r4,44(sp)
8111a938:	2000c826 	beq	r4,zero,8111ac5c <_dtoa_r+0xcc0>
8111a93c:	d9800317 	ldw	r6,12(sp)
8111a940:	00c00044 	movi	r3,1
8111a944:	1980f90e 	bge	r3,r6,8111ad2c <_dtoa_r+0xd90>
8111a948:	d8800617 	ldw	r2,24(sp)
8111a94c:	d8c00a17 	ldw	r3,40(sp)
8111a950:	157fffc4 	addi	r21,r2,-1
8111a954:	1d41f316 	blt	r3,r21,8111b124 <_dtoa_r+0x1188>
8111a958:	1d6bc83a 	sub	r21,r3,r21
8111a95c:	d9c00617 	ldw	r7,24(sp)
8111a960:	3802aa16 	blt	r7,zero,8111b40c <_dtoa_r+0x1470>
8111a964:	dd000817 	ldw	r20,32(sp)
8111a968:	d8800617 	ldw	r2,24(sp)
8111a96c:	d8c00817 	ldw	r3,32(sp)
8111a970:	01400044 	movi	r5,1
8111a974:	e009883a 	mov	r4,fp
8111a978:	1887883a 	add	r3,r3,r2
8111a97c:	d8c00815 	stw	r3,32(sp)
8111a980:	b0ad883a 	add	r22,r22,r2
8111a984:	111d4d80 	call	8111d4d8 <__i2b>
8111a988:	1023883a 	mov	r17,r2
8111a98c:	a0000826 	beq	r20,zero,8111a9b0 <_dtoa_r+0xa14>
8111a990:	0580070e 	bge	zero,r22,8111a9b0 <_dtoa_r+0xa14>
8111a994:	a005883a 	mov	r2,r20
8111a998:	b500b916 	blt	r22,r20,8111ac80 <_dtoa_r+0xce4>
8111a99c:	d9000817 	ldw	r4,32(sp)
8111a9a0:	a0a9c83a 	sub	r20,r20,r2
8111a9a4:	b0adc83a 	sub	r22,r22,r2
8111a9a8:	2089c83a 	sub	r4,r4,r2
8111a9ac:	d9000815 	stw	r4,32(sp)
8111a9b0:	d9800a17 	ldw	r6,40(sp)
8111a9b4:	0181810e 	bge	zero,r6,8111afbc <_dtoa_r+0x1020>
8111a9b8:	d9c00b17 	ldw	r7,44(sp)
8111a9bc:	3800b326 	beq	r7,zero,8111ac8c <_dtoa_r+0xcf0>
8111a9c0:	a800b226 	beq	r21,zero,8111ac8c <_dtoa_r+0xcf0>
8111a9c4:	880b883a 	mov	r5,r17
8111a9c8:	a80d883a 	mov	r6,r21
8111a9cc:	e009883a 	mov	r4,fp
8111a9d0:	111d71c0 	call	8111d71c <__pow5mult>
8111a9d4:	d9800917 	ldw	r6,36(sp)
8111a9d8:	100b883a 	mov	r5,r2
8111a9dc:	e009883a 	mov	r4,fp
8111a9e0:	1023883a 	mov	r17,r2
8111a9e4:	111d51c0 	call	8111d51c <__multiply>
8111a9e8:	1021883a 	mov	r16,r2
8111a9ec:	d8800a17 	ldw	r2,40(sp)
8111a9f0:	d9400917 	ldw	r5,36(sp)
8111a9f4:	e009883a 	mov	r4,fp
8111a9f8:	1545c83a 	sub	r2,r2,r21
8111a9fc:	d8800a15 	stw	r2,40(sp)
8111aa00:	111d1640 	call	8111d164 <_Bfree>
8111aa04:	d8c00a17 	ldw	r3,40(sp)
8111aa08:	18009f1e 	bne	r3,zero,8111ac88 <_dtoa_r+0xcec>
8111aa0c:	05c00044 	movi	r23,1
8111aa10:	e009883a 	mov	r4,fp
8111aa14:	b80b883a 	mov	r5,r23
8111aa18:	111d4d80 	call	8111d4d8 <__i2b>
8111aa1c:	d9000d17 	ldw	r4,52(sp)
8111aa20:	102b883a 	mov	r21,r2
8111aa24:	2000ce26 	beq	r4,zero,8111ad60 <_dtoa_r+0xdc4>
8111aa28:	200d883a 	mov	r6,r4
8111aa2c:	100b883a 	mov	r5,r2
8111aa30:	e009883a 	mov	r4,fp
8111aa34:	111d71c0 	call	8111d71c <__pow5mult>
8111aa38:	d9800317 	ldw	r6,12(sp)
8111aa3c:	102b883a 	mov	r21,r2
8111aa40:	b981810e 	bge	r23,r6,8111b048 <_dtoa_r+0x10ac>
8111aa44:	0027883a 	mov	r19,zero
8111aa48:	a8800417 	ldw	r2,16(r21)
8111aa4c:	05c00804 	movi	r23,32
8111aa50:	10800104 	addi	r2,r2,4
8111aa54:	1085883a 	add	r2,r2,r2
8111aa58:	1085883a 	add	r2,r2,r2
8111aa5c:	a885883a 	add	r2,r21,r2
8111aa60:	11000017 	ldw	r4,0(r2)
8111aa64:	111d3c00 	call	8111d3c0 <__hi0bits>
8111aa68:	b885c83a 	sub	r2,r23,r2
8111aa6c:	1585883a 	add	r2,r2,r22
8111aa70:	108007cc 	andi	r2,r2,31
8111aa74:	1000b326 	beq	r2,zero,8111ad44 <_dtoa_r+0xda8>
8111aa78:	00c00804 	movi	r3,32
8111aa7c:	1887c83a 	sub	r3,r3,r2
8111aa80:	01000104 	movi	r4,4
8111aa84:	20c2cd0e 	bge	r4,r3,8111b5bc <_dtoa_r+0x1620>
8111aa88:	00c00704 	movi	r3,28
8111aa8c:	1885c83a 	sub	r2,r3,r2
8111aa90:	d8c00817 	ldw	r3,32(sp)
8111aa94:	a0a9883a 	add	r20,r20,r2
8111aa98:	b0ad883a 	add	r22,r22,r2
8111aa9c:	1887883a 	add	r3,r3,r2
8111aaa0:	d8c00815 	stw	r3,32(sp)
8111aaa4:	d9800817 	ldw	r6,32(sp)
8111aaa8:	0180040e 	bge	zero,r6,8111aabc <_dtoa_r+0xb20>
8111aaac:	800b883a 	mov	r5,r16
8111aab0:	e009883a 	mov	r4,fp
8111aab4:	111d8640 	call	8111d864 <__lshift>
8111aab8:	1021883a 	mov	r16,r2
8111aabc:	0580050e 	bge	zero,r22,8111aad4 <_dtoa_r+0xb38>
8111aac0:	a80b883a 	mov	r5,r21
8111aac4:	b00d883a 	mov	r6,r22
8111aac8:	e009883a 	mov	r4,fp
8111aacc:	111d8640 	call	8111d864 <__lshift>
8111aad0:	102b883a 	mov	r21,r2
8111aad4:	d9c00e17 	ldw	r7,56(sp)
8111aad8:	3801211e 	bne	r7,zero,8111af60 <_dtoa_r+0xfc4>
8111aadc:	d9800617 	ldw	r6,24(sp)
8111aae0:	0181380e 	bge	zero,r6,8111afc4 <_dtoa_r+0x1028>
8111aae4:	d8c00b17 	ldw	r3,44(sp)
8111aae8:	1800ab1e 	bne	r3,zero,8111ad98 <_dtoa_r+0xdfc>
8111aaec:	dc800717 	ldw	r18,28(sp)
8111aaf0:	dcc00617 	ldw	r19,24(sp)
8111aaf4:	9029883a 	mov	r20,r18
8111aaf8:	00000206 	br	8111ab04 <_dtoa_r+0xb68>
8111aafc:	111d18c0 	call	8111d18c <__multadd>
8111ab00:	1021883a 	mov	r16,r2
8111ab04:	a80b883a 	mov	r5,r21
8111ab08:	8009883a 	mov	r4,r16
8111ab0c:	1119d940 	call	81119d94 <quorem>
8111ab10:	10800c04 	addi	r2,r2,48
8111ab14:	90800005 	stb	r2,0(r18)
8111ab18:	94800044 	addi	r18,r18,1
8111ab1c:	9507c83a 	sub	r3,r18,r20
8111ab20:	000f883a 	mov	r7,zero
8111ab24:	01800284 	movi	r6,10
8111ab28:	800b883a 	mov	r5,r16
8111ab2c:	e009883a 	mov	r4,fp
8111ab30:	1cfff216 	blt	r3,r19,8111aafc <__reset+0xfb0faafc>
8111ab34:	1011883a 	mov	r8,r2
8111ab38:	d8800617 	ldw	r2,24(sp)
8111ab3c:	0082370e 	bge	zero,r2,8111b41c <_dtoa_r+0x1480>
8111ab40:	d9000717 	ldw	r4,28(sp)
8111ab44:	0025883a 	mov	r18,zero
8111ab48:	20af883a 	add	r23,r4,r2
8111ab4c:	01800044 	movi	r6,1
8111ab50:	800b883a 	mov	r5,r16
8111ab54:	e009883a 	mov	r4,fp
8111ab58:	da001715 	stw	r8,92(sp)
8111ab5c:	111d8640 	call	8111d864 <__lshift>
8111ab60:	a80b883a 	mov	r5,r21
8111ab64:	1009883a 	mov	r4,r2
8111ab68:	d8800915 	stw	r2,36(sp)
8111ab6c:	111d9b40 	call	8111d9b4 <__mcmp>
8111ab70:	da001717 	ldw	r8,92(sp)
8111ab74:	0081800e 	bge	zero,r2,8111b178 <_dtoa_r+0x11dc>
8111ab78:	b93fffc3 	ldbu	r4,-1(r23)
8111ab7c:	b8bfffc4 	addi	r2,r23,-1
8111ab80:	1007883a 	mov	r3,r2
8111ab84:	01800e44 	movi	r6,57
8111ab88:	d9c00717 	ldw	r7,28(sp)
8111ab8c:	00000506 	br	8111aba4 <_dtoa_r+0xc08>
8111ab90:	18ffffc4 	addi	r3,r3,-1
8111ab94:	11c12326 	beq	r2,r7,8111b024 <_dtoa_r+0x1088>
8111ab98:	19000003 	ldbu	r4,0(r3)
8111ab9c:	102f883a 	mov	r23,r2
8111aba0:	10bfffc4 	addi	r2,r2,-1
8111aba4:	21403fcc 	andi	r5,r4,255
8111aba8:	2940201c 	xori	r5,r5,128
8111abac:	297fe004 	addi	r5,r5,-128
8111abb0:	29bff726 	beq	r5,r6,8111ab90 <__reset+0xfb0fab90>
8111abb4:	21000044 	addi	r4,r4,1
8111abb8:	11000005 	stb	r4,0(r2)
8111abbc:	a80b883a 	mov	r5,r21
8111abc0:	e009883a 	mov	r4,fp
8111abc4:	111d1640 	call	8111d164 <_Bfree>
8111abc8:	883ea026 	beq	r17,zero,8111a64c <__reset+0xfb0fa64c>
8111abcc:	90000426 	beq	r18,zero,8111abe0 <_dtoa_r+0xc44>
8111abd0:	94400326 	beq	r18,r17,8111abe0 <_dtoa_r+0xc44>
8111abd4:	900b883a 	mov	r5,r18
8111abd8:	e009883a 	mov	r4,fp
8111abdc:	111d1640 	call	8111d164 <_Bfree>
8111abe0:	880b883a 	mov	r5,r17
8111abe4:	e009883a 	mov	r4,fp
8111abe8:	111d1640 	call	8111d164 <_Bfree>
8111abec:	003e9706 	br	8111a64c <__reset+0xfb0fa64c>
8111abf0:	01800044 	movi	r6,1
8111abf4:	d9800e15 	stw	r6,56(sp)
8111abf8:	003d9606 	br	8111a254 <__reset+0xfb0fa254>
8111abfc:	d8800817 	ldw	r2,32(sp)
8111ac00:	d8c00517 	ldw	r3,20(sp)
8111ac04:	d8000d15 	stw	zero,52(sp)
8111ac08:	10c5c83a 	sub	r2,r2,r3
8111ac0c:	00c9c83a 	sub	r4,zero,r3
8111ac10:	d8800815 	stw	r2,32(sp)
8111ac14:	d9000a15 	stw	r4,40(sp)
8111ac18:	003d9706 	br	8111a278 <__reset+0xfb0fa278>
8111ac1c:	05adc83a 	sub	r22,zero,r22
8111ac20:	dd800815 	stw	r22,32(sp)
8111ac24:	002d883a 	mov	r22,zero
8111ac28:	003d8e06 	br	8111a264 <__reset+0xfb0fa264>
8111ac2c:	d9000517 	ldw	r4,20(sp)
8111ac30:	11274a40 	call	811274a4 <__floatsidf>
8111ac34:	100d883a 	mov	r6,r2
8111ac38:	180f883a 	mov	r7,r3
8111ac3c:	a009883a 	mov	r4,r20
8111ac40:	880b883a 	mov	r5,r17
8111ac44:	11268c80 	call	811268c8 <__eqdf2>
8111ac48:	103d7126 	beq	r2,zero,8111a210 <__reset+0xfb0fa210>
8111ac4c:	d9c00517 	ldw	r7,20(sp)
8111ac50:	39ffffc4 	addi	r7,r7,-1
8111ac54:	d9c00515 	stw	r7,20(sp)
8111ac58:	003d6d06 	br	8111a210 <__reset+0xfb0fa210>
8111ac5c:	dd400a17 	ldw	r21,40(sp)
8111ac60:	dd000817 	ldw	r20,32(sp)
8111ac64:	0023883a 	mov	r17,zero
8111ac68:	003f4806 	br	8111a98c <__reset+0xfb0fa98c>
8111ac6c:	10e3c83a 	sub	r17,r2,r3
8111ac70:	9448983a 	sll	r4,r18,r17
8111ac74:	003d3206 	br	8111a140 <__reset+0xfb0fa140>
8111ac78:	d8000e15 	stw	zero,56(sp)
8111ac7c:	003d7506 	br	8111a254 <__reset+0xfb0fa254>
8111ac80:	b005883a 	mov	r2,r22
8111ac84:	003f4506 	br	8111a99c <__reset+0xfb0fa99c>
8111ac88:	dc000915 	stw	r16,36(sp)
8111ac8c:	d9800a17 	ldw	r6,40(sp)
8111ac90:	d9400917 	ldw	r5,36(sp)
8111ac94:	e009883a 	mov	r4,fp
8111ac98:	111d71c0 	call	8111d71c <__pow5mult>
8111ac9c:	1021883a 	mov	r16,r2
8111aca0:	003f5a06 	br	8111aa0c <__reset+0xfb0faa0c>
8111aca4:	01c00044 	movi	r7,1
8111aca8:	d9c00b15 	stw	r7,44(sp)
8111acac:	d8802217 	ldw	r2,136(sp)
8111acb0:	0081280e 	bge	zero,r2,8111b154 <_dtoa_r+0x11b8>
8111acb4:	100d883a 	mov	r6,r2
8111acb8:	1021883a 	mov	r16,r2
8111acbc:	d8800c15 	stw	r2,48(sp)
8111acc0:	d8800615 	stw	r2,24(sp)
8111acc4:	003d8806 	br	8111a2e8 <__reset+0xfb0fa2e8>
8111acc8:	d8800617 	ldw	r2,24(sp)
8111accc:	00be9b16 	blt	zero,r2,8111a73c <__reset+0xfb0fa73c>
8111acd0:	10010f1e 	bne	r2,zero,8111b110 <_dtoa_r+0x1174>
8111acd4:	880b883a 	mov	r5,r17
8111acd8:	000d883a 	mov	r6,zero
8111acdc:	01d00534 	movhi	r7,16404
8111ace0:	8009883a 	mov	r4,r16
8111ace4:	11112340 	call	81111234 <__muldf3>
8111ace8:	900d883a 	mov	r6,r18
8111acec:	980f883a 	mov	r7,r19
8111acf0:	1009883a 	mov	r4,r2
8111acf4:	180b883a 	mov	r5,r3
8111acf8:	11269500 	call	81126950 <__gedf2>
8111acfc:	002b883a 	mov	r21,zero
8111ad00:	0023883a 	mov	r17,zero
8111ad04:	1000bf16 	blt	r2,zero,8111b004 <_dtoa_r+0x1068>
8111ad08:	d9802217 	ldw	r6,136(sp)
8111ad0c:	ddc00717 	ldw	r23,28(sp)
8111ad10:	018c303a 	nor	r6,zero,r6
8111ad14:	d9800515 	stw	r6,20(sp)
8111ad18:	a80b883a 	mov	r5,r21
8111ad1c:	e009883a 	mov	r4,fp
8111ad20:	111d1640 	call	8111d164 <_Bfree>
8111ad24:	883e4926 	beq	r17,zero,8111a64c <__reset+0xfb0fa64c>
8111ad28:	003fad06 	br	8111abe0 <__reset+0xfb0fabe0>
8111ad2c:	d9c01117 	ldw	r7,68(sp)
8111ad30:	3801bc26 	beq	r7,zero,8111b424 <_dtoa_r+0x1488>
8111ad34:	10810cc4 	addi	r2,r2,1075
8111ad38:	dd400a17 	ldw	r21,40(sp)
8111ad3c:	dd000817 	ldw	r20,32(sp)
8111ad40:	003f0a06 	br	8111a96c <__reset+0xfb0fa96c>
8111ad44:	00800704 	movi	r2,28
8111ad48:	d9000817 	ldw	r4,32(sp)
8111ad4c:	a0a9883a 	add	r20,r20,r2
8111ad50:	b0ad883a 	add	r22,r22,r2
8111ad54:	2089883a 	add	r4,r4,r2
8111ad58:	d9000815 	stw	r4,32(sp)
8111ad5c:	003f5106 	br	8111aaa4 <__reset+0xfb0faaa4>
8111ad60:	d8c00317 	ldw	r3,12(sp)
8111ad64:	b8c1fc0e 	bge	r23,r3,8111b558 <_dtoa_r+0x15bc>
8111ad68:	0027883a 	mov	r19,zero
8111ad6c:	b805883a 	mov	r2,r23
8111ad70:	003f3e06 	br	8111aa6c <__reset+0xfb0faa6c>
8111ad74:	880b883a 	mov	r5,r17
8111ad78:	e009883a 	mov	r4,fp
8111ad7c:	000f883a 	mov	r7,zero
8111ad80:	01800284 	movi	r6,10
8111ad84:	111d18c0 	call	8111d18c <__multadd>
8111ad88:	d9000c17 	ldw	r4,48(sp)
8111ad8c:	1023883a 	mov	r17,r2
8111ad90:	0102040e 	bge	zero,r4,8111b5a4 <_dtoa_r+0x1608>
8111ad94:	d9000615 	stw	r4,24(sp)
8111ad98:	0500050e 	bge	zero,r20,8111adb0 <_dtoa_r+0xe14>
8111ad9c:	880b883a 	mov	r5,r17
8111ada0:	a00d883a 	mov	r6,r20
8111ada4:	e009883a 	mov	r4,fp
8111ada8:	111d8640 	call	8111d864 <__lshift>
8111adac:	1023883a 	mov	r17,r2
8111adb0:	9801241e 	bne	r19,zero,8111b244 <_dtoa_r+0x12a8>
8111adb4:	8829883a 	mov	r20,r17
8111adb8:	d9000617 	ldw	r4,24(sp)
8111adbc:	dcc00717 	ldw	r19,28(sp)
8111adc0:	9480004c 	andi	r18,r18,1
8111adc4:	20bfffc4 	addi	r2,r4,-1
8111adc8:	9885883a 	add	r2,r19,r2
8111adcc:	d8800415 	stw	r2,16(sp)
8111add0:	dc800615 	stw	r18,24(sp)
8111add4:	a80b883a 	mov	r5,r21
8111add8:	8009883a 	mov	r4,r16
8111addc:	1119d940 	call	81119d94 <quorem>
8111ade0:	880b883a 	mov	r5,r17
8111ade4:	8009883a 	mov	r4,r16
8111ade8:	102f883a 	mov	r23,r2
8111adec:	111d9b40 	call	8111d9b4 <__mcmp>
8111adf0:	a80b883a 	mov	r5,r21
8111adf4:	a00d883a 	mov	r6,r20
8111adf8:	e009883a 	mov	r4,fp
8111adfc:	102d883a 	mov	r22,r2
8111ae00:	111da140 	call	8111da14 <__mdiff>
8111ae04:	1007883a 	mov	r3,r2
8111ae08:	10800317 	ldw	r2,12(r2)
8111ae0c:	bc800c04 	addi	r18,r23,48
8111ae10:	180b883a 	mov	r5,r3
8111ae14:	10004e1e 	bne	r2,zero,8111af50 <_dtoa_r+0xfb4>
8111ae18:	8009883a 	mov	r4,r16
8111ae1c:	d8c01615 	stw	r3,88(sp)
8111ae20:	111d9b40 	call	8111d9b4 <__mcmp>
8111ae24:	d8c01617 	ldw	r3,88(sp)
8111ae28:	e009883a 	mov	r4,fp
8111ae2c:	d8801615 	stw	r2,88(sp)
8111ae30:	180b883a 	mov	r5,r3
8111ae34:	111d1640 	call	8111d164 <_Bfree>
8111ae38:	d8801617 	ldw	r2,88(sp)
8111ae3c:	1000041e 	bne	r2,zero,8111ae50 <_dtoa_r+0xeb4>
8111ae40:	d9800317 	ldw	r6,12(sp)
8111ae44:	3000021e 	bne	r6,zero,8111ae50 <_dtoa_r+0xeb4>
8111ae48:	d8c00617 	ldw	r3,24(sp)
8111ae4c:	18003726 	beq	r3,zero,8111af2c <_dtoa_r+0xf90>
8111ae50:	b0002016 	blt	r22,zero,8111aed4 <_dtoa_r+0xf38>
8111ae54:	b000041e 	bne	r22,zero,8111ae68 <_dtoa_r+0xecc>
8111ae58:	d9000317 	ldw	r4,12(sp)
8111ae5c:	2000021e 	bne	r4,zero,8111ae68 <_dtoa_r+0xecc>
8111ae60:	d8c00617 	ldw	r3,24(sp)
8111ae64:	18001b26 	beq	r3,zero,8111aed4 <_dtoa_r+0xf38>
8111ae68:	00810716 	blt	zero,r2,8111b288 <_dtoa_r+0x12ec>
8111ae6c:	d8c00417 	ldw	r3,16(sp)
8111ae70:	9d800044 	addi	r22,r19,1
8111ae74:	9c800005 	stb	r18,0(r19)
8111ae78:	b02f883a 	mov	r23,r22
8111ae7c:	98c10626 	beq	r19,r3,8111b298 <_dtoa_r+0x12fc>
8111ae80:	800b883a 	mov	r5,r16
8111ae84:	000f883a 	mov	r7,zero
8111ae88:	01800284 	movi	r6,10
8111ae8c:	e009883a 	mov	r4,fp
8111ae90:	111d18c0 	call	8111d18c <__multadd>
8111ae94:	1021883a 	mov	r16,r2
8111ae98:	000f883a 	mov	r7,zero
8111ae9c:	01800284 	movi	r6,10
8111aea0:	880b883a 	mov	r5,r17
8111aea4:	e009883a 	mov	r4,fp
8111aea8:	8d002526 	beq	r17,r20,8111af40 <_dtoa_r+0xfa4>
8111aeac:	111d18c0 	call	8111d18c <__multadd>
8111aeb0:	a00b883a 	mov	r5,r20
8111aeb4:	000f883a 	mov	r7,zero
8111aeb8:	01800284 	movi	r6,10
8111aebc:	e009883a 	mov	r4,fp
8111aec0:	1023883a 	mov	r17,r2
8111aec4:	111d18c0 	call	8111d18c <__multadd>
8111aec8:	1029883a 	mov	r20,r2
8111aecc:	b027883a 	mov	r19,r22
8111aed0:	003fc006 	br	8111add4 <__reset+0xfb0fadd4>
8111aed4:	9011883a 	mov	r8,r18
8111aed8:	00800e0e 	bge	zero,r2,8111af14 <_dtoa_r+0xf78>
8111aedc:	800b883a 	mov	r5,r16
8111aee0:	01800044 	movi	r6,1
8111aee4:	e009883a 	mov	r4,fp
8111aee8:	da001715 	stw	r8,92(sp)
8111aeec:	111d8640 	call	8111d864 <__lshift>
8111aef0:	a80b883a 	mov	r5,r21
8111aef4:	1009883a 	mov	r4,r2
8111aef8:	1021883a 	mov	r16,r2
8111aefc:	111d9b40 	call	8111d9b4 <__mcmp>
8111af00:	da001717 	ldw	r8,92(sp)
8111af04:	0081960e 	bge	zero,r2,8111b560 <_dtoa_r+0x15c4>
8111af08:	00800e44 	movi	r2,57
8111af0c:	40817026 	beq	r8,r2,8111b4d0 <_dtoa_r+0x1534>
8111af10:	ba000c44 	addi	r8,r23,49
8111af14:	8825883a 	mov	r18,r17
8111af18:	9dc00044 	addi	r23,r19,1
8111af1c:	9a000005 	stb	r8,0(r19)
8111af20:	a023883a 	mov	r17,r20
8111af24:	dc000915 	stw	r16,36(sp)
8111af28:	003f2406 	br	8111abbc <__reset+0xfb0fabbc>
8111af2c:	00800e44 	movi	r2,57
8111af30:	9011883a 	mov	r8,r18
8111af34:	90816626 	beq	r18,r2,8111b4d0 <_dtoa_r+0x1534>
8111af38:	05bff516 	blt	zero,r22,8111af10 <__reset+0xfb0faf10>
8111af3c:	003ff506 	br	8111af14 <__reset+0xfb0faf14>
8111af40:	111d18c0 	call	8111d18c <__multadd>
8111af44:	1023883a 	mov	r17,r2
8111af48:	1029883a 	mov	r20,r2
8111af4c:	003fdf06 	br	8111aecc <__reset+0xfb0faecc>
8111af50:	e009883a 	mov	r4,fp
8111af54:	111d1640 	call	8111d164 <_Bfree>
8111af58:	00800044 	movi	r2,1
8111af5c:	003fbc06 	br	8111ae50 <__reset+0xfb0fae50>
8111af60:	a80b883a 	mov	r5,r21
8111af64:	8009883a 	mov	r4,r16
8111af68:	111d9b40 	call	8111d9b4 <__mcmp>
8111af6c:	103edb0e 	bge	r2,zero,8111aadc <__reset+0xfb0faadc>
8111af70:	800b883a 	mov	r5,r16
8111af74:	000f883a 	mov	r7,zero
8111af78:	01800284 	movi	r6,10
8111af7c:	e009883a 	mov	r4,fp
8111af80:	111d18c0 	call	8111d18c <__multadd>
8111af84:	1021883a 	mov	r16,r2
8111af88:	d8800517 	ldw	r2,20(sp)
8111af8c:	d8c00b17 	ldw	r3,44(sp)
8111af90:	10bfffc4 	addi	r2,r2,-1
8111af94:	d8800515 	stw	r2,20(sp)
8111af98:	183f761e 	bne	r3,zero,8111ad74 <__reset+0xfb0fad74>
8111af9c:	d9000c17 	ldw	r4,48(sp)
8111afa0:	0101730e 	bge	zero,r4,8111b570 <_dtoa_r+0x15d4>
8111afa4:	d9000615 	stw	r4,24(sp)
8111afa8:	003ed006 	br	8111aaec <__reset+0xfb0faaec>
8111afac:	00800084 	movi	r2,2
8111afb0:	3081861e 	bne	r6,r2,8111b5cc <_dtoa_r+0x1630>
8111afb4:	d8000b15 	stw	zero,44(sp)
8111afb8:	003f3c06 	br	8111acac <__reset+0xfb0facac>
8111afbc:	dc000917 	ldw	r16,36(sp)
8111afc0:	003e9206 	br	8111aa0c <__reset+0xfb0faa0c>
8111afc4:	d9c00317 	ldw	r7,12(sp)
8111afc8:	00800084 	movi	r2,2
8111afcc:	11fec50e 	bge	r2,r7,8111aae4 <__reset+0xfb0faae4>
8111afd0:	d9000617 	ldw	r4,24(sp)
8111afd4:	20013c1e 	bne	r4,zero,8111b4c8 <_dtoa_r+0x152c>
8111afd8:	a80b883a 	mov	r5,r21
8111afdc:	000f883a 	mov	r7,zero
8111afe0:	01800144 	movi	r6,5
8111afe4:	e009883a 	mov	r4,fp
8111afe8:	111d18c0 	call	8111d18c <__multadd>
8111afec:	100b883a 	mov	r5,r2
8111aff0:	8009883a 	mov	r4,r16
8111aff4:	102b883a 	mov	r21,r2
8111aff8:	111d9b40 	call	8111d9b4 <__mcmp>
8111affc:	dc000915 	stw	r16,36(sp)
8111b000:	00bf410e 	bge	zero,r2,8111ad08 <__reset+0xfb0fad08>
8111b004:	d9c00717 	ldw	r7,28(sp)
8111b008:	00800c44 	movi	r2,49
8111b00c:	38800005 	stb	r2,0(r7)
8111b010:	d8800517 	ldw	r2,20(sp)
8111b014:	3dc00044 	addi	r23,r7,1
8111b018:	10800044 	addi	r2,r2,1
8111b01c:	d8800515 	stw	r2,20(sp)
8111b020:	003f3d06 	br	8111ad18 <__reset+0xfb0fad18>
8111b024:	d9800517 	ldw	r6,20(sp)
8111b028:	d9c00717 	ldw	r7,28(sp)
8111b02c:	00800c44 	movi	r2,49
8111b030:	31800044 	addi	r6,r6,1
8111b034:	d9800515 	stw	r6,20(sp)
8111b038:	38800005 	stb	r2,0(r7)
8111b03c:	003edf06 	br	8111abbc <__reset+0xfb0fabbc>
8111b040:	d8000b15 	stw	zero,44(sp)
8111b044:	003c9f06 	br	8111a2c4 <__reset+0xfb0fa2c4>
8111b048:	903e7e1e 	bne	r18,zero,8111aa44 <__reset+0xfb0faa44>
8111b04c:	00800434 	movhi	r2,16
8111b050:	10bfffc4 	addi	r2,r2,-1
8111b054:	9884703a 	and	r2,r19,r2
8111b058:	1000ea1e 	bne	r2,zero,8111b404 <_dtoa_r+0x1468>
8111b05c:	9cdffc2c 	andhi	r19,r19,32752
8111b060:	9800e826 	beq	r19,zero,8111b404 <_dtoa_r+0x1468>
8111b064:	d9c00817 	ldw	r7,32(sp)
8111b068:	b5800044 	addi	r22,r22,1
8111b06c:	04c00044 	movi	r19,1
8111b070:	39c00044 	addi	r7,r7,1
8111b074:	d9c00815 	stw	r7,32(sp)
8111b078:	d8800d17 	ldw	r2,52(sp)
8111b07c:	103e721e 	bne	r2,zero,8111aa48 <__reset+0xfb0faa48>
8111b080:	00800044 	movi	r2,1
8111b084:	003e7906 	br	8111aa6c <__reset+0xfb0faa6c>
8111b088:	8009883a 	mov	r4,r16
8111b08c:	11274a40 	call	811274a4 <__floatsidf>
8111b090:	d9800f17 	ldw	r6,60(sp)
8111b094:	d9c01017 	ldw	r7,64(sp)
8111b098:	1009883a 	mov	r4,r2
8111b09c:	180b883a 	mov	r5,r3
8111b0a0:	11112340 	call	81111234 <__muldf3>
8111b0a4:	000d883a 	mov	r6,zero
8111b0a8:	01d00734 	movhi	r7,16412
8111b0ac:	1009883a 	mov	r4,r2
8111b0b0:	180b883a 	mov	r5,r3
8111b0b4:	11257240 	call	81125724 <__adddf3>
8111b0b8:	047f3034 	movhi	r17,64704
8111b0bc:	1021883a 	mov	r16,r2
8111b0c0:	1c63883a 	add	r17,r3,r17
8111b0c4:	d9000f17 	ldw	r4,60(sp)
8111b0c8:	d9401017 	ldw	r5,64(sp)
8111b0cc:	000d883a 	mov	r6,zero
8111b0d0:	01d00534 	movhi	r7,16404
8111b0d4:	1126b200 	call	81126b20 <__subdf3>
8111b0d8:	800d883a 	mov	r6,r16
8111b0dc:	880f883a 	mov	r7,r17
8111b0e0:	1009883a 	mov	r4,r2
8111b0e4:	180b883a 	mov	r5,r3
8111b0e8:	102b883a 	mov	r21,r2
8111b0ec:	1829883a 	mov	r20,r3
8111b0f0:	11269500 	call	81126950 <__gedf2>
8111b0f4:	00806c16 	blt	zero,r2,8111b2a8 <_dtoa_r+0x130c>
8111b0f8:	89e0003c 	xorhi	r7,r17,32768
8111b0fc:	800d883a 	mov	r6,r16
8111b100:	a809883a 	mov	r4,r21
8111b104:	a00b883a 	mov	r5,r20
8111b108:	1126a2c0 	call	81126a2c <__ledf2>
8111b10c:	103d7e0e 	bge	r2,zero,8111a708 <__reset+0xfb0fa708>
8111b110:	002b883a 	mov	r21,zero
8111b114:	0023883a 	mov	r17,zero
8111b118:	003efb06 	br	8111ad08 <__reset+0xfb0fad08>
8111b11c:	d8800717 	ldw	r2,28(sp)
8111b120:	003bd006 	br	8111a064 <__reset+0xfb0fa064>
8111b124:	d9000a17 	ldw	r4,40(sp)
8111b128:	d9800d17 	ldw	r6,52(sp)
8111b12c:	dd400a15 	stw	r21,40(sp)
8111b130:	a905c83a 	sub	r2,r21,r4
8111b134:	308d883a 	add	r6,r6,r2
8111b138:	d9800d15 	stw	r6,52(sp)
8111b13c:	002b883a 	mov	r21,zero
8111b140:	003e0606 	br	8111a95c <__reset+0xfb0fa95c>
8111b144:	9023883a 	mov	r17,r18
8111b148:	9829883a 	mov	r20,r19
8111b14c:	04000084 	movi	r16,2
8111b150:	003c9206 	br	8111a39c <__reset+0xfb0fa39c>
8111b154:	04000044 	movi	r16,1
8111b158:	dc000c15 	stw	r16,48(sp)
8111b15c:	dc000615 	stw	r16,24(sp)
8111b160:	dc002215 	stw	r16,136(sp)
8111b164:	e0001115 	stw	zero,68(fp)
8111b168:	000b883a 	mov	r5,zero
8111b16c:	003c6906 	br	8111a314 <__reset+0xfb0fa314>
8111b170:	3021883a 	mov	r16,r6
8111b174:	003ffb06 	br	8111b164 <__reset+0xfb0fb164>
8111b178:	1000021e 	bne	r2,zero,8111b184 <_dtoa_r+0x11e8>
8111b17c:	4200004c 	andi	r8,r8,1
8111b180:	403e7d1e 	bne	r8,zero,8111ab78 <__reset+0xfb0fab78>
8111b184:	01000c04 	movi	r4,48
8111b188:	00000106 	br	8111b190 <_dtoa_r+0x11f4>
8111b18c:	102f883a 	mov	r23,r2
8111b190:	b8bfffc4 	addi	r2,r23,-1
8111b194:	10c00007 	ldb	r3,0(r2)
8111b198:	193ffc26 	beq	r3,r4,8111b18c <__reset+0xfb0fb18c>
8111b19c:	003e8706 	br	8111abbc <__reset+0xfb0fabbc>
8111b1a0:	d8800517 	ldw	r2,20(sp)
8111b1a4:	00a3c83a 	sub	r17,zero,r2
8111b1a8:	8800a426 	beq	r17,zero,8111b43c <_dtoa_r+0x14a0>
8111b1ac:	888003cc 	andi	r2,r17,15
8111b1b0:	100490fa 	slli	r2,r2,3
8111b1b4:	00e04534 	movhi	r3,33044
8111b1b8:	18ffb804 	addi	r3,r3,-288
8111b1bc:	1885883a 	add	r2,r3,r2
8111b1c0:	11800017 	ldw	r6,0(r2)
8111b1c4:	11c00117 	ldw	r7,4(r2)
8111b1c8:	9009883a 	mov	r4,r18
8111b1cc:	980b883a 	mov	r5,r19
8111b1d0:	8823d13a 	srai	r17,r17,4
8111b1d4:	11112340 	call	81111234 <__muldf3>
8111b1d8:	d8800f15 	stw	r2,60(sp)
8111b1dc:	d8c01015 	stw	r3,64(sp)
8111b1e0:	8800e826 	beq	r17,zero,8111b584 <_dtoa_r+0x15e8>
8111b1e4:	05204534 	movhi	r20,33044
8111b1e8:	a53fae04 	addi	r20,r20,-328
8111b1ec:	04000084 	movi	r16,2
8111b1f0:	8980004c 	andi	r6,r17,1
8111b1f4:	1009883a 	mov	r4,r2
8111b1f8:	8823d07a 	srai	r17,r17,1
8111b1fc:	180b883a 	mov	r5,r3
8111b200:	30000426 	beq	r6,zero,8111b214 <_dtoa_r+0x1278>
8111b204:	a1800017 	ldw	r6,0(r20)
8111b208:	a1c00117 	ldw	r7,4(r20)
8111b20c:	84000044 	addi	r16,r16,1
8111b210:	11112340 	call	81111234 <__muldf3>
8111b214:	a5000204 	addi	r20,r20,8
8111b218:	883ff51e 	bne	r17,zero,8111b1f0 <__reset+0xfb0fb1f0>
8111b21c:	d8800f15 	stw	r2,60(sp)
8111b220:	d8c01015 	stw	r3,64(sp)
8111b224:	003c7606 	br	8111a400 <__reset+0xfb0fa400>
8111b228:	00c00c04 	movi	r3,48
8111b22c:	10c00005 	stb	r3,0(r2)
8111b230:	d8c00517 	ldw	r3,20(sp)
8111b234:	bd3fffc3 	ldbu	r20,-1(r23)
8111b238:	18c00044 	addi	r3,r3,1
8111b23c:	d8c00515 	stw	r3,20(sp)
8111b240:	003db906 	br	8111a928 <__reset+0xfb0fa928>
8111b244:	89400117 	ldw	r5,4(r17)
8111b248:	e009883a 	mov	r4,fp
8111b24c:	111d0b40 	call	8111d0b4 <_Balloc>
8111b250:	89800417 	ldw	r6,16(r17)
8111b254:	89400304 	addi	r5,r17,12
8111b258:	11000304 	addi	r4,r2,12
8111b25c:	31800084 	addi	r6,r6,2
8111b260:	318d883a 	add	r6,r6,r6
8111b264:	318d883a 	add	r6,r6,r6
8111b268:	1027883a 	mov	r19,r2
8111b26c:	1112e840 	call	81112e84 <memcpy>
8111b270:	01800044 	movi	r6,1
8111b274:	980b883a 	mov	r5,r19
8111b278:	e009883a 	mov	r4,fp
8111b27c:	111d8640 	call	8111d864 <__lshift>
8111b280:	1029883a 	mov	r20,r2
8111b284:	003ecc06 	br	8111adb8 <__reset+0xfb0fadb8>
8111b288:	00800e44 	movi	r2,57
8111b28c:	90809026 	beq	r18,r2,8111b4d0 <_dtoa_r+0x1534>
8111b290:	92000044 	addi	r8,r18,1
8111b294:	003f1f06 	br	8111af14 <__reset+0xfb0faf14>
8111b298:	9011883a 	mov	r8,r18
8111b29c:	8825883a 	mov	r18,r17
8111b2a0:	a023883a 	mov	r17,r20
8111b2a4:	003e2906 	br	8111ab4c <__reset+0xfb0fab4c>
8111b2a8:	002b883a 	mov	r21,zero
8111b2ac:	0023883a 	mov	r17,zero
8111b2b0:	003f5406 	br	8111b004 <__reset+0xfb0fb004>
8111b2b4:	61bfffc4 	addi	r6,r12,-1
8111b2b8:	300490fa 	slli	r2,r6,3
8111b2bc:	00e04534 	movhi	r3,33044
8111b2c0:	18ffb804 	addi	r3,r3,-288
8111b2c4:	1885883a 	add	r2,r3,r2
8111b2c8:	11000017 	ldw	r4,0(r2)
8111b2cc:	11400117 	ldw	r5,4(r2)
8111b2d0:	d8800717 	ldw	r2,28(sp)
8111b2d4:	880f883a 	mov	r7,r17
8111b2d8:	d9801215 	stw	r6,72(sp)
8111b2dc:	800d883a 	mov	r6,r16
8111b2e0:	db001615 	stw	r12,88(sp)
8111b2e4:	15c00044 	addi	r23,r2,1
8111b2e8:	11112340 	call	81111234 <__muldf3>
8111b2ec:	d9401017 	ldw	r5,64(sp)
8111b2f0:	d9000f17 	ldw	r4,60(sp)
8111b2f4:	d8c01515 	stw	r3,84(sp)
8111b2f8:	d8801415 	stw	r2,80(sp)
8111b2fc:	11274240 	call	81127424 <__fixdfsi>
8111b300:	1009883a 	mov	r4,r2
8111b304:	1021883a 	mov	r16,r2
8111b308:	11274a40 	call	811274a4 <__floatsidf>
8111b30c:	d9000f17 	ldw	r4,60(sp)
8111b310:	d9401017 	ldw	r5,64(sp)
8111b314:	100d883a 	mov	r6,r2
8111b318:	180f883a 	mov	r7,r3
8111b31c:	1126b200 	call	81126b20 <__subdf3>
8111b320:	1829883a 	mov	r20,r3
8111b324:	d8c00717 	ldw	r3,28(sp)
8111b328:	84000c04 	addi	r16,r16,48
8111b32c:	1023883a 	mov	r17,r2
8111b330:	1c000005 	stb	r16,0(r3)
8111b334:	db001617 	ldw	r12,88(sp)
8111b338:	00800044 	movi	r2,1
8111b33c:	60802226 	beq	r12,r2,8111b3c8 <_dtoa_r+0x142c>
8111b340:	d9c00717 	ldw	r7,28(sp)
8111b344:	8805883a 	mov	r2,r17
8111b348:	b82b883a 	mov	r21,r23
8111b34c:	3b19883a 	add	r12,r7,r12
8111b350:	6023883a 	mov	r17,r12
8111b354:	a007883a 	mov	r3,r20
8111b358:	dc800f15 	stw	r18,60(sp)
8111b35c:	000d883a 	mov	r6,zero
8111b360:	01d00934 	movhi	r7,16420
8111b364:	1009883a 	mov	r4,r2
8111b368:	180b883a 	mov	r5,r3
8111b36c:	11112340 	call	81111234 <__muldf3>
8111b370:	180b883a 	mov	r5,r3
8111b374:	1009883a 	mov	r4,r2
8111b378:	1829883a 	mov	r20,r3
8111b37c:	1025883a 	mov	r18,r2
8111b380:	11274240 	call	81127424 <__fixdfsi>
8111b384:	1009883a 	mov	r4,r2
8111b388:	1021883a 	mov	r16,r2
8111b38c:	11274a40 	call	811274a4 <__floatsidf>
8111b390:	100d883a 	mov	r6,r2
8111b394:	180f883a 	mov	r7,r3
8111b398:	9009883a 	mov	r4,r18
8111b39c:	a00b883a 	mov	r5,r20
8111b3a0:	84000c04 	addi	r16,r16,48
8111b3a4:	1126b200 	call	81126b20 <__subdf3>
8111b3a8:	ad400044 	addi	r21,r21,1
8111b3ac:	ac3fffc5 	stb	r16,-1(r21)
8111b3b0:	ac7fea1e 	bne	r21,r17,8111b35c <__reset+0xfb0fb35c>
8111b3b4:	1023883a 	mov	r17,r2
8111b3b8:	d8801217 	ldw	r2,72(sp)
8111b3bc:	dc800f17 	ldw	r18,60(sp)
8111b3c0:	1829883a 	mov	r20,r3
8111b3c4:	b8af883a 	add	r23,r23,r2
8111b3c8:	d9001417 	ldw	r4,80(sp)
8111b3cc:	d9401517 	ldw	r5,84(sp)
8111b3d0:	000d883a 	mov	r6,zero
8111b3d4:	01cff834 	movhi	r7,16352
8111b3d8:	11257240 	call	81125724 <__adddf3>
8111b3dc:	880d883a 	mov	r6,r17
8111b3e0:	a00f883a 	mov	r7,r20
8111b3e4:	1009883a 	mov	r4,r2
8111b3e8:	180b883a 	mov	r5,r3
8111b3ec:	1126a2c0 	call	81126a2c <__ledf2>
8111b3f0:	10003e0e 	bge	r2,zero,8111b4ec <_dtoa_r+0x1550>
8111b3f4:	d9001317 	ldw	r4,76(sp)
8111b3f8:	bd3fffc3 	ldbu	r20,-1(r23)
8111b3fc:	d9000515 	stw	r4,20(sp)
8111b400:	003d3b06 	br	8111a8f0 <__reset+0xfb0fa8f0>
8111b404:	0027883a 	mov	r19,zero
8111b408:	003f1b06 	br	8111b078 <__reset+0xfb0fb078>
8111b40c:	d8800817 	ldw	r2,32(sp)
8111b410:	11e9c83a 	sub	r20,r2,r7
8111b414:	0005883a 	mov	r2,zero
8111b418:	003d5406 	br	8111a96c <__reset+0xfb0fa96c>
8111b41c:	00800044 	movi	r2,1
8111b420:	003dc706 	br	8111ab40 <__reset+0xfb0fab40>
8111b424:	d8c00217 	ldw	r3,8(sp)
8111b428:	00800d84 	movi	r2,54
8111b42c:	dd400a17 	ldw	r21,40(sp)
8111b430:	10c5c83a 	sub	r2,r2,r3
8111b434:	dd000817 	ldw	r20,32(sp)
8111b438:	003d4c06 	br	8111a96c <__reset+0xfb0fa96c>
8111b43c:	dc800f15 	stw	r18,60(sp)
8111b440:	dcc01015 	stw	r19,64(sp)
8111b444:	04000084 	movi	r16,2
8111b448:	003bed06 	br	8111a400 <__reset+0xfb0fa400>
8111b44c:	d9000617 	ldw	r4,24(sp)
8111b450:	203f0d26 	beq	r4,zero,8111b088 <__reset+0xfb0fb088>
8111b454:	d9800c17 	ldw	r6,48(sp)
8111b458:	01bcab0e 	bge	zero,r6,8111a708 <__reset+0xfb0fa708>
8111b45c:	d9401017 	ldw	r5,64(sp)
8111b460:	d9000f17 	ldw	r4,60(sp)
8111b464:	000d883a 	mov	r6,zero
8111b468:	01d00934 	movhi	r7,16420
8111b46c:	11112340 	call	81111234 <__muldf3>
8111b470:	81000044 	addi	r4,r16,1
8111b474:	d8800f15 	stw	r2,60(sp)
8111b478:	d8c01015 	stw	r3,64(sp)
8111b47c:	11274a40 	call	811274a4 <__floatsidf>
8111b480:	d9800f17 	ldw	r6,60(sp)
8111b484:	d9c01017 	ldw	r7,64(sp)
8111b488:	1009883a 	mov	r4,r2
8111b48c:	180b883a 	mov	r5,r3
8111b490:	11112340 	call	81111234 <__muldf3>
8111b494:	01d00734 	movhi	r7,16412
8111b498:	000d883a 	mov	r6,zero
8111b49c:	1009883a 	mov	r4,r2
8111b4a0:	180b883a 	mov	r5,r3
8111b4a4:	11257240 	call	81125724 <__adddf3>
8111b4a8:	d9c00517 	ldw	r7,20(sp)
8111b4ac:	047f3034 	movhi	r17,64704
8111b4b0:	1021883a 	mov	r16,r2
8111b4b4:	39ffffc4 	addi	r7,r7,-1
8111b4b8:	d9c01315 	stw	r7,76(sp)
8111b4bc:	1c63883a 	add	r17,r3,r17
8111b4c0:	db000c17 	ldw	r12,48(sp)
8111b4c4:	003bea06 	br	8111a470 <__reset+0xfb0fa470>
8111b4c8:	dc000915 	stw	r16,36(sp)
8111b4cc:	003e0e06 	br	8111ad08 <__reset+0xfb0fad08>
8111b4d0:	01000e44 	movi	r4,57
8111b4d4:	8825883a 	mov	r18,r17
8111b4d8:	9dc00044 	addi	r23,r19,1
8111b4dc:	99000005 	stb	r4,0(r19)
8111b4e0:	a023883a 	mov	r17,r20
8111b4e4:	dc000915 	stw	r16,36(sp)
8111b4e8:	003da406 	br	8111ab7c <__reset+0xfb0fab7c>
8111b4ec:	d9801417 	ldw	r6,80(sp)
8111b4f0:	d9c01517 	ldw	r7,84(sp)
8111b4f4:	0009883a 	mov	r4,zero
8111b4f8:	014ff834 	movhi	r5,16352
8111b4fc:	1126b200 	call	81126b20 <__subdf3>
8111b500:	880d883a 	mov	r6,r17
8111b504:	a00f883a 	mov	r7,r20
8111b508:	1009883a 	mov	r4,r2
8111b50c:	180b883a 	mov	r5,r3
8111b510:	11269500 	call	81126950 <__gedf2>
8111b514:	00bc7c0e 	bge	zero,r2,8111a708 <__reset+0xfb0fa708>
8111b518:	01000c04 	movi	r4,48
8111b51c:	00000106 	br	8111b524 <_dtoa_r+0x1588>
8111b520:	102f883a 	mov	r23,r2
8111b524:	b8bfffc4 	addi	r2,r23,-1
8111b528:	10c00007 	ldb	r3,0(r2)
8111b52c:	193ffc26 	beq	r3,r4,8111b520 <__reset+0xfb0fb520>
8111b530:	d9801317 	ldw	r6,76(sp)
8111b534:	d9800515 	stw	r6,20(sp)
8111b538:	003c4406 	br	8111a64c <__reset+0xfb0fa64c>
8111b53c:	d9801317 	ldw	r6,76(sp)
8111b540:	d9800515 	stw	r6,20(sp)
8111b544:	003cea06 	br	8111a8f0 <__reset+0xfb0fa8f0>
8111b548:	dd800f17 	ldw	r22,60(sp)
8111b54c:	dcc01017 	ldw	r19,64(sp)
8111b550:	dc801217 	ldw	r18,72(sp)
8111b554:	003c6c06 	br	8111a708 <__reset+0xfb0fa708>
8111b558:	903e031e 	bne	r18,zero,8111ad68 <__reset+0xfb0fad68>
8111b55c:	003ebb06 	br	8111b04c <__reset+0xfb0fb04c>
8111b560:	103e6c1e 	bne	r2,zero,8111af14 <__reset+0xfb0faf14>
8111b564:	4080004c 	andi	r2,r8,1
8111b568:	103e6a26 	beq	r2,zero,8111af14 <__reset+0xfb0faf14>
8111b56c:	003e6606 	br	8111af08 <__reset+0xfb0faf08>
8111b570:	d8c00317 	ldw	r3,12(sp)
8111b574:	00800084 	movi	r2,2
8111b578:	10c02916 	blt	r2,r3,8111b620 <_dtoa_r+0x1684>
8111b57c:	d9000c17 	ldw	r4,48(sp)
8111b580:	003e8806 	br	8111afa4 <__reset+0xfb0fafa4>
8111b584:	04000084 	movi	r16,2
8111b588:	003b9d06 	br	8111a400 <__reset+0xfb0fa400>
8111b58c:	d9001317 	ldw	r4,76(sp)
8111b590:	d9000515 	stw	r4,20(sp)
8111b594:	003cd606 	br	8111a8f0 <__reset+0xfb0fa8f0>
8111b598:	d8801317 	ldw	r2,76(sp)
8111b59c:	d8800515 	stw	r2,20(sp)
8111b5a0:	003c2a06 	br	8111a64c <__reset+0xfb0fa64c>
8111b5a4:	d9800317 	ldw	r6,12(sp)
8111b5a8:	00800084 	movi	r2,2
8111b5ac:	11801516 	blt	r2,r6,8111b604 <_dtoa_r+0x1668>
8111b5b0:	d9c00c17 	ldw	r7,48(sp)
8111b5b4:	d9c00615 	stw	r7,24(sp)
8111b5b8:	003df706 	br	8111ad98 <__reset+0xfb0fad98>
8111b5bc:	193d3926 	beq	r3,r4,8111aaa4 <__reset+0xfb0faaa4>
8111b5c0:	00c00f04 	movi	r3,60
8111b5c4:	1885c83a 	sub	r2,r3,r2
8111b5c8:	003ddf06 	br	8111ad48 <__reset+0xfb0fad48>
8111b5cc:	e009883a 	mov	r4,fp
8111b5d0:	e0001115 	stw	zero,68(fp)
8111b5d4:	000b883a 	mov	r5,zero
8111b5d8:	111d0b40 	call	8111d0b4 <_Balloc>
8111b5dc:	d8800715 	stw	r2,28(sp)
8111b5e0:	d8c00717 	ldw	r3,28(sp)
8111b5e4:	00bfffc4 	movi	r2,-1
8111b5e8:	01000044 	movi	r4,1
8111b5ec:	d8800c15 	stw	r2,48(sp)
8111b5f0:	e0c01015 	stw	r3,64(fp)
8111b5f4:	d9000b15 	stw	r4,44(sp)
8111b5f8:	d8800615 	stw	r2,24(sp)
8111b5fc:	d8002215 	stw	zero,136(sp)
8111b600:	003c4106 	br	8111a708 <__reset+0xfb0fa708>
8111b604:	d8c00c17 	ldw	r3,48(sp)
8111b608:	d8c00615 	stw	r3,24(sp)
8111b60c:	003e7006 	br	8111afd0 <__reset+0xfb0fafd0>
8111b610:	04400044 	movi	r17,1
8111b614:	003b2006 	br	8111a298 <__reset+0xfb0fa298>
8111b618:	000b883a 	mov	r5,zero
8111b61c:	003b3d06 	br	8111a314 <__reset+0xfb0fa314>
8111b620:	d8800c17 	ldw	r2,48(sp)
8111b624:	d8800615 	stw	r2,24(sp)
8111b628:	003e6906 	br	8111afd0 <__reset+0xfb0fafd0>

8111b62c <__sflush_r>:
8111b62c:	defffb04 	addi	sp,sp,-20
8111b630:	de00012e 	bgeu	sp,et,8111b638 <__sflush_r+0xc>
8111b634:	003b68fa 	trap	3
8111b638:	2880030b 	ldhu	r2,12(r5)
8111b63c:	dcc00315 	stw	r19,12(sp)
8111b640:	dc400115 	stw	r17,4(sp)
8111b644:	dfc00415 	stw	ra,16(sp)
8111b648:	dc800215 	stw	r18,8(sp)
8111b64c:	dc000015 	stw	r16,0(sp)
8111b650:	10c0020c 	andi	r3,r2,8
8111b654:	2823883a 	mov	r17,r5
8111b658:	2027883a 	mov	r19,r4
8111b65c:	1800311e 	bne	r3,zero,8111b724 <__sflush_r+0xf8>
8111b660:	28c00117 	ldw	r3,4(r5)
8111b664:	10820014 	ori	r2,r2,2048
8111b668:	2880030d 	sth	r2,12(r5)
8111b66c:	00c04b0e 	bge	zero,r3,8111b79c <__sflush_r+0x170>
8111b670:	8a000a17 	ldw	r8,40(r17)
8111b674:	40002326 	beq	r8,zero,8111b704 <__sflush_r+0xd8>
8111b678:	9c000017 	ldw	r16,0(r19)
8111b67c:	10c4000c 	andi	r3,r2,4096
8111b680:	98000015 	stw	zero,0(r19)
8111b684:	18004826 	beq	r3,zero,8111b7a8 <__sflush_r+0x17c>
8111b688:	89801417 	ldw	r6,80(r17)
8111b68c:	10c0010c 	andi	r3,r2,4
8111b690:	18000626 	beq	r3,zero,8111b6ac <__sflush_r+0x80>
8111b694:	88c00117 	ldw	r3,4(r17)
8111b698:	88800c17 	ldw	r2,48(r17)
8111b69c:	30cdc83a 	sub	r6,r6,r3
8111b6a0:	10000226 	beq	r2,zero,8111b6ac <__sflush_r+0x80>
8111b6a4:	88800f17 	ldw	r2,60(r17)
8111b6a8:	308dc83a 	sub	r6,r6,r2
8111b6ac:	89400717 	ldw	r5,28(r17)
8111b6b0:	000f883a 	mov	r7,zero
8111b6b4:	9809883a 	mov	r4,r19
8111b6b8:	403ee83a 	callr	r8
8111b6bc:	00ffffc4 	movi	r3,-1
8111b6c0:	10c04426 	beq	r2,r3,8111b7d4 <__sflush_r+0x1a8>
8111b6c4:	88c0030b 	ldhu	r3,12(r17)
8111b6c8:	89000417 	ldw	r4,16(r17)
8111b6cc:	88000115 	stw	zero,4(r17)
8111b6d0:	197dffcc 	andi	r5,r3,63487
8111b6d4:	8940030d 	sth	r5,12(r17)
8111b6d8:	89000015 	stw	r4,0(r17)
8111b6dc:	18c4000c 	andi	r3,r3,4096
8111b6e0:	18002c1e 	bne	r3,zero,8111b794 <__sflush_r+0x168>
8111b6e4:	89400c17 	ldw	r5,48(r17)
8111b6e8:	9c000015 	stw	r16,0(r19)
8111b6ec:	28000526 	beq	r5,zero,8111b704 <__sflush_r+0xd8>
8111b6f0:	88801004 	addi	r2,r17,64
8111b6f4:	28800226 	beq	r5,r2,8111b700 <__sflush_r+0xd4>
8111b6f8:	9809883a 	mov	r4,r19
8111b6fc:	111c0e40 	call	8111c0e4 <_free_r>
8111b700:	88000c15 	stw	zero,48(r17)
8111b704:	0005883a 	mov	r2,zero
8111b708:	dfc00417 	ldw	ra,16(sp)
8111b70c:	dcc00317 	ldw	r19,12(sp)
8111b710:	dc800217 	ldw	r18,8(sp)
8111b714:	dc400117 	ldw	r17,4(sp)
8111b718:	dc000017 	ldw	r16,0(sp)
8111b71c:	dec00504 	addi	sp,sp,20
8111b720:	f800283a 	ret
8111b724:	2c800417 	ldw	r18,16(r5)
8111b728:	903ff626 	beq	r18,zero,8111b704 <__reset+0xfb0fb704>
8111b72c:	2c000017 	ldw	r16,0(r5)
8111b730:	108000cc 	andi	r2,r2,3
8111b734:	2c800015 	stw	r18,0(r5)
8111b738:	84a1c83a 	sub	r16,r16,r18
8111b73c:	1000131e 	bne	r2,zero,8111b78c <__sflush_r+0x160>
8111b740:	28800517 	ldw	r2,20(r5)
8111b744:	88800215 	stw	r2,8(r17)
8111b748:	04000316 	blt	zero,r16,8111b758 <__sflush_r+0x12c>
8111b74c:	003fed06 	br	8111b704 <__reset+0xfb0fb704>
8111b750:	90a5883a 	add	r18,r18,r2
8111b754:	043feb0e 	bge	zero,r16,8111b704 <__reset+0xfb0fb704>
8111b758:	88800917 	ldw	r2,36(r17)
8111b75c:	89400717 	ldw	r5,28(r17)
8111b760:	800f883a 	mov	r7,r16
8111b764:	900d883a 	mov	r6,r18
8111b768:	9809883a 	mov	r4,r19
8111b76c:	103ee83a 	callr	r2
8111b770:	80a1c83a 	sub	r16,r16,r2
8111b774:	00bff616 	blt	zero,r2,8111b750 <__reset+0xfb0fb750>
8111b778:	88c0030b 	ldhu	r3,12(r17)
8111b77c:	00bfffc4 	movi	r2,-1
8111b780:	18c01014 	ori	r3,r3,64
8111b784:	88c0030d 	sth	r3,12(r17)
8111b788:	003fdf06 	br	8111b708 <__reset+0xfb0fb708>
8111b78c:	0005883a 	mov	r2,zero
8111b790:	003fec06 	br	8111b744 <__reset+0xfb0fb744>
8111b794:	88801415 	stw	r2,80(r17)
8111b798:	003fd206 	br	8111b6e4 <__reset+0xfb0fb6e4>
8111b79c:	28c00f17 	ldw	r3,60(r5)
8111b7a0:	00ffb316 	blt	zero,r3,8111b670 <__reset+0xfb0fb670>
8111b7a4:	003fd706 	br	8111b704 <__reset+0xfb0fb704>
8111b7a8:	89400717 	ldw	r5,28(r17)
8111b7ac:	000d883a 	mov	r6,zero
8111b7b0:	01c00044 	movi	r7,1
8111b7b4:	9809883a 	mov	r4,r19
8111b7b8:	403ee83a 	callr	r8
8111b7bc:	100d883a 	mov	r6,r2
8111b7c0:	00bfffc4 	movi	r2,-1
8111b7c4:	30801426 	beq	r6,r2,8111b818 <__sflush_r+0x1ec>
8111b7c8:	8880030b 	ldhu	r2,12(r17)
8111b7cc:	8a000a17 	ldw	r8,40(r17)
8111b7d0:	003fae06 	br	8111b68c <__reset+0xfb0fb68c>
8111b7d4:	98c00017 	ldw	r3,0(r19)
8111b7d8:	183fba26 	beq	r3,zero,8111b6c4 <__reset+0xfb0fb6c4>
8111b7dc:	01000744 	movi	r4,29
8111b7e0:	19000626 	beq	r3,r4,8111b7fc <__sflush_r+0x1d0>
8111b7e4:	01000584 	movi	r4,22
8111b7e8:	19000426 	beq	r3,r4,8111b7fc <__sflush_r+0x1d0>
8111b7ec:	88c0030b 	ldhu	r3,12(r17)
8111b7f0:	18c01014 	ori	r3,r3,64
8111b7f4:	88c0030d 	sth	r3,12(r17)
8111b7f8:	003fc306 	br	8111b708 <__reset+0xfb0fb708>
8111b7fc:	8880030b 	ldhu	r2,12(r17)
8111b800:	88c00417 	ldw	r3,16(r17)
8111b804:	88000115 	stw	zero,4(r17)
8111b808:	10bdffcc 	andi	r2,r2,63487
8111b80c:	8880030d 	sth	r2,12(r17)
8111b810:	88c00015 	stw	r3,0(r17)
8111b814:	003fb306 	br	8111b6e4 <__reset+0xfb0fb6e4>
8111b818:	98800017 	ldw	r2,0(r19)
8111b81c:	103fea26 	beq	r2,zero,8111b7c8 <__reset+0xfb0fb7c8>
8111b820:	00c00744 	movi	r3,29
8111b824:	10c00226 	beq	r2,r3,8111b830 <__sflush_r+0x204>
8111b828:	00c00584 	movi	r3,22
8111b82c:	10c0031e 	bne	r2,r3,8111b83c <__sflush_r+0x210>
8111b830:	9c000015 	stw	r16,0(r19)
8111b834:	0005883a 	mov	r2,zero
8111b838:	003fb306 	br	8111b708 <__reset+0xfb0fb708>
8111b83c:	88c0030b 	ldhu	r3,12(r17)
8111b840:	3005883a 	mov	r2,r6
8111b844:	18c01014 	ori	r3,r3,64
8111b848:	88c0030d 	sth	r3,12(r17)
8111b84c:	003fae06 	br	8111b708 <__reset+0xfb0fb708>

8111b850 <_fflush_r>:
8111b850:	defffd04 	addi	sp,sp,-12
8111b854:	de00012e 	bgeu	sp,et,8111b85c <_fflush_r+0xc>
8111b858:	003b68fa 	trap	3
8111b85c:	dc000115 	stw	r16,4(sp)
8111b860:	dfc00215 	stw	ra,8(sp)
8111b864:	2021883a 	mov	r16,r4
8111b868:	20000226 	beq	r4,zero,8111b874 <_fflush_r+0x24>
8111b86c:	20800e17 	ldw	r2,56(r4)
8111b870:	10000c26 	beq	r2,zero,8111b8a4 <_fflush_r+0x54>
8111b874:	2880030f 	ldh	r2,12(r5)
8111b878:	1000051e 	bne	r2,zero,8111b890 <_fflush_r+0x40>
8111b87c:	0005883a 	mov	r2,zero
8111b880:	dfc00217 	ldw	ra,8(sp)
8111b884:	dc000117 	ldw	r16,4(sp)
8111b888:	dec00304 	addi	sp,sp,12
8111b88c:	f800283a 	ret
8111b890:	8009883a 	mov	r4,r16
8111b894:	dfc00217 	ldw	ra,8(sp)
8111b898:	dc000117 	ldw	r16,4(sp)
8111b89c:	dec00304 	addi	sp,sp,12
8111b8a0:	111b62c1 	jmpi	8111b62c <__sflush_r>
8111b8a4:	d9400015 	stw	r5,0(sp)
8111b8a8:	111bc4c0 	call	8111bc4c <__sinit>
8111b8ac:	d9400017 	ldw	r5,0(sp)
8111b8b0:	003ff006 	br	8111b874 <__reset+0xfb0fb874>

8111b8b4 <fflush>:
8111b8b4:	20000526 	beq	r4,zero,8111b8cc <fflush+0x18>
8111b8b8:	00a04534 	movhi	r2,33044
8111b8bc:	10895a04 	addi	r2,r2,9576
8111b8c0:	200b883a 	mov	r5,r4
8111b8c4:	11000017 	ldw	r4,0(r2)
8111b8c8:	111b8501 	jmpi	8111b850 <_fflush_r>
8111b8cc:	00a04534 	movhi	r2,33044
8111b8d0:	10895904 	addi	r2,r2,9572
8111b8d4:	11000017 	ldw	r4,0(r2)
8111b8d8:	016044b4 	movhi	r5,33042
8111b8dc:	296e1404 	addi	r5,r5,-18352
8111b8e0:	111c98c1 	jmpi	8111c98c <_fwalk_reent>

8111b8e4 <__fp_unlock>:
8111b8e4:	0005883a 	mov	r2,zero
8111b8e8:	f800283a 	ret

8111b8ec <_cleanup_r>:
8111b8ec:	016044b4 	movhi	r5,33042
8111b8f0:	294daa04 	addi	r5,r5,13992
8111b8f4:	111c98c1 	jmpi	8111c98c <_fwalk_reent>

8111b8f8 <__sinit.part.1>:
8111b8f8:	defff704 	addi	sp,sp,-36
8111b8fc:	00e044b4 	movhi	r3,33042
8111b900:	de00012e 	bgeu	sp,et,8111b908 <__sinit.part.1+0x10>
8111b904:	003b68fa 	trap	3
8111b908:	18ee3b04 	addi	r3,r3,-18196
8111b90c:	dfc00815 	stw	ra,32(sp)
8111b910:	ddc00715 	stw	r23,28(sp)
8111b914:	dd800615 	stw	r22,24(sp)
8111b918:	dd400515 	stw	r21,20(sp)
8111b91c:	dd000415 	stw	r20,16(sp)
8111b920:	dcc00315 	stw	r19,12(sp)
8111b924:	dc800215 	stw	r18,8(sp)
8111b928:	dc400115 	stw	r17,4(sp)
8111b92c:	dc000015 	stw	r16,0(sp)
8111b930:	24000117 	ldw	r16,4(r4)
8111b934:	20c00f15 	stw	r3,60(r4)
8111b938:	2080bb04 	addi	r2,r4,748
8111b93c:	00c000c4 	movi	r3,3
8111b940:	20c0b915 	stw	r3,740(r4)
8111b944:	2080ba15 	stw	r2,744(r4)
8111b948:	2000b815 	stw	zero,736(r4)
8111b94c:	05c00204 	movi	r23,8
8111b950:	00800104 	movi	r2,4
8111b954:	2025883a 	mov	r18,r4
8111b958:	b80d883a 	mov	r6,r23
8111b95c:	81001704 	addi	r4,r16,92
8111b960:	000b883a 	mov	r5,zero
8111b964:	80000015 	stw	zero,0(r16)
8111b968:	80000115 	stw	zero,4(r16)
8111b96c:	80000215 	stw	zero,8(r16)
8111b970:	8080030d 	sth	r2,12(r16)
8111b974:	80001915 	stw	zero,100(r16)
8111b978:	8000038d 	sth	zero,14(r16)
8111b97c:	80000415 	stw	zero,16(r16)
8111b980:	80000515 	stw	zero,20(r16)
8111b984:	80000615 	stw	zero,24(r16)
8111b988:	1112fd40 	call	81112fd4 <memset>
8111b98c:	05a04474 	movhi	r22,33041
8111b990:	94400217 	ldw	r17,8(r18)
8111b994:	05604474 	movhi	r21,33041
8111b998:	05204474 	movhi	r20,33041
8111b99c:	04e04474 	movhi	r19,33041
8111b9a0:	b58df604 	addi	r22,r22,14296
8111b9a4:	ad4e0f04 	addi	r21,r21,14396
8111b9a8:	a50e3004 	addi	r20,r20,14528
8111b9ac:	9cce4904 	addi	r19,r19,14628
8111b9b0:	85800815 	stw	r22,32(r16)
8111b9b4:	85400915 	stw	r21,36(r16)
8111b9b8:	85000a15 	stw	r20,40(r16)
8111b9bc:	84c00b15 	stw	r19,44(r16)
8111b9c0:	84000715 	stw	r16,28(r16)
8111b9c4:	00800284 	movi	r2,10
8111b9c8:	8880030d 	sth	r2,12(r17)
8111b9cc:	00800044 	movi	r2,1
8111b9d0:	b80d883a 	mov	r6,r23
8111b9d4:	89001704 	addi	r4,r17,92
8111b9d8:	000b883a 	mov	r5,zero
8111b9dc:	88000015 	stw	zero,0(r17)
8111b9e0:	88000115 	stw	zero,4(r17)
8111b9e4:	88000215 	stw	zero,8(r17)
8111b9e8:	88001915 	stw	zero,100(r17)
8111b9ec:	8880038d 	sth	r2,14(r17)
8111b9f0:	88000415 	stw	zero,16(r17)
8111b9f4:	88000515 	stw	zero,20(r17)
8111b9f8:	88000615 	stw	zero,24(r17)
8111b9fc:	1112fd40 	call	81112fd4 <memset>
8111ba00:	94000317 	ldw	r16,12(r18)
8111ba04:	00800484 	movi	r2,18
8111ba08:	8c400715 	stw	r17,28(r17)
8111ba0c:	8d800815 	stw	r22,32(r17)
8111ba10:	8d400915 	stw	r21,36(r17)
8111ba14:	8d000a15 	stw	r20,40(r17)
8111ba18:	8cc00b15 	stw	r19,44(r17)
8111ba1c:	8080030d 	sth	r2,12(r16)
8111ba20:	00800084 	movi	r2,2
8111ba24:	80000015 	stw	zero,0(r16)
8111ba28:	80000115 	stw	zero,4(r16)
8111ba2c:	80000215 	stw	zero,8(r16)
8111ba30:	80001915 	stw	zero,100(r16)
8111ba34:	8080038d 	sth	r2,14(r16)
8111ba38:	80000415 	stw	zero,16(r16)
8111ba3c:	80000515 	stw	zero,20(r16)
8111ba40:	80000615 	stw	zero,24(r16)
8111ba44:	b80d883a 	mov	r6,r23
8111ba48:	000b883a 	mov	r5,zero
8111ba4c:	81001704 	addi	r4,r16,92
8111ba50:	1112fd40 	call	81112fd4 <memset>
8111ba54:	00800044 	movi	r2,1
8111ba58:	84000715 	stw	r16,28(r16)
8111ba5c:	85800815 	stw	r22,32(r16)
8111ba60:	85400915 	stw	r21,36(r16)
8111ba64:	85000a15 	stw	r20,40(r16)
8111ba68:	84c00b15 	stw	r19,44(r16)
8111ba6c:	90800e15 	stw	r2,56(r18)
8111ba70:	dfc00817 	ldw	ra,32(sp)
8111ba74:	ddc00717 	ldw	r23,28(sp)
8111ba78:	dd800617 	ldw	r22,24(sp)
8111ba7c:	dd400517 	ldw	r21,20(sp)
8111ba80:	dd000417 	ldw	r20,16(sp)
8111ba84:	dcc00317 	ldw	r19,12(sp)
8111ba88:	dc800217 	ldw	r18,8(sp)
8111ba8c:	dc400117 	ldw	r17,4(sp)
8111ba90:	dc000017 	ldw	r16,0(sp)
8111ba94:	dec00904 	addi	sp,sp,36
8111ba98:	f800283a 	ret

8111ba9c <__fp_lock>:
8111ba9c:	0005883a 	mov	r2,zero
8111baa0:	f800283a 	ret

8111baa4 <__sfmoreglue>:
8111baa4:	defffc04 	addi	sp,sp,-16
8111baa8:	de00012e 	bgeu	sp,et,8111bab0 <__sfmoreglue+0xc>
8111baac:	003b68fa 	trap	3
8111bab0:	dc400115 	stw	r17,4(sp)
8111bab4:	2c7fffc4 	addi	r17,r5,-1
8111bab8:	8c401a24 	muli	r17,r17,104
8111babc:	dc800215 	stw	r18,8(sp)
8111bac0:	2825883a 	mov	r18,r5
8111bac4:	89401d04 	addi	r5,r17,116
8111bac8:	dc000015 	stw	r16,0(sp)
8111bacc:	dfc00315 	stw	ra,12(sp)
8111bad0:	11126700 	call	81112670 <_malloc_r>
8111bad4:	1021883a 	mov	r16,r2
8111bad8:	10000726 	beq	r2,zero,8111baf8 <__sfmoreglue+0x54>
8111badc:	11000304 	addi	r4,r2,12
8111bae0:	10000015 	stw	zero,0(r2)
8111bae4:	14800115 	stw	r18,4(r2)
8111bae8:	11000215 	stw	r4,8(r2)
8111baec:	89801a04 	addi	r6,r17,104
8111baf0:	000b883a 	mov	r5,zero
8111baf4:	1112fd40 	call	81112fd4 <memset>
8111baf8:	8005883a 	mov	r2,r16
8111bafc:	dfc00317 	ldw	ra,12(sp)
8111bb00:	dc800217 	ldw	r18,8(sp)
8111bb04:	dc400117 	ldw	r17,4(sp)
8111bb08:	dc000017 	ldw	r16,0(sp)
8111bb0c:	dec00404 	addi	sp,sp,16
8111bb10:	f800283a 	ret

8111bb14 <__sfp>:
8111bb14:	defffb04 	addi	sp,sp,-20
8111bb18:	de00012e 	bgeu	sp,et,8111bb20 <__sfp+0xc>
8111bb1c:	003b68fa 	trap	3
8111bb20:	dc000015 	stw	r16,0(sp)
8111bb24:	04204534 	movhi	r16,33044
8111bb28:	84095904 	addi	r16,r16,9572
8111bb2c:	dcc00315 	stw	r19,12(sp)
8111bb30:	2027883a 	mov	r19,r4
8111bb34:	81000017 	ldw	r4,0(r16)
8111bb38:	dfc00415 	stw	ra,16(sp)
8111bb3c:	dc800215 	stw	r18,8(sp)
8111bb40:	20800e17 	ldw	r2,56(r4)
8111bb44:	dc400115 	stw	r17,4(sp)
8111bb48:	1000021e 	bne	r2,zero,8111bb54 <__sfp+0x40>
8111bb4c:	111b8f80 	call	8111b8f8 <__sinit.part.1>
8111bb50:	81000017 	ldw	r4,0(r16)
8111bb54:	2480b804 	addi	r18,r4,736
8111bb58:	047fffc4 	movi	r17,-1
8111bb5c:	91000117 	ldw	r4,4(r18)
8111bb60:	94000217 	ldw	r16,8(r18)
8111bb64:	213fffc4 	addi	r4,r4,-1
8111bb68:	20000a16 	blt	r4,zero,8111bb94 <__sfp+0x80>
8111bb6c:	8080030f 	ldh	r2,12(r16)
8111bb70:	10000c26 	beq	r2,zero,8111bba4 <__sfp+0x90>
8111bb74:	80c01d04 	addi	r3,r16,116
8111bb78:	00000206 	br	8111bb84 <__sfp+0x70>
8111bb7c:	18bfe60f 	ldh	r2,-104(r3)
8111bb80:	10000826 	beq	r2,zero,8111bba4 <__sfp+0x90>
8111bb84:	213fffc4 	addi	r4,r4,-1
8111bb88:	1c3ffd04 	addi	r16,r3,-12
8111bb8c:	18c01a04 	addi	r3,r3,104
8111bb90:	247ffa1e 	bne	r4,r17,8111bb7c <__reset+0xfb0fbb7c>
8111bb94:	90800017 	ldw	r2,0(r18)
8111bb98:	10001d26 	beq	r2,zero,8111bc10 <__sfp+0xfc>
8111bb9c:	1025883a 	mov	r18,r2
8111bba0:	003fee06 	br	8111bb5c <__reset+0xfb0fbb5c>
8111bba4:	00bfffc4 	movi	r2,-1
8111bba8:	8080038d 	sth	r2,14(r16)
8111bbac:	00800044 	movi	r2,1
8111bbb0:	8080030d 	sth	r2,12(r16)
8111bbb4:	80001915 	stw	zero,100(r16)
8111bbb8:	80000015 	stw	zero,0(r16)
8111bbbc:	80000215 	stw	zero,8(r16)
8111bbc0:	80000115 	stw	zero,4(r16)
8111bbc4:	80000415 	stw	zero,16(r16)
8111bbc8:	80000515 	stw	zero,20(r16)
8111bbcc:	80000615 	stw	zero,24(r16)
8111bbd0:	01800204 	movi	r6,8
8111bbd4:	000b883a 	mov	r5,zero
8111bbd8:	81001704 	addi	r4,r16,92
8111bbdc:	1112fd40 	call	81112fd4 <memset>
8111bbe0:	8005883a 	mov	r2,r16
8111bbe4:	80000c15 	stw	zero,48(r16)
8111bbe8:	80000d15 	stw	zero,52(r16)
8111bbec:	80001115 	stw	zero,68(r16)
8111bbf0:	80001215 	stw	zero,72(r16)
8111bbf4:	dfc00417 	ldw	ra,16(sp)
8111bbf8:	dcc00317 	ldw	r19,12(sp)
8111bbfc:	dc800217 	ldw	r18,8(sp)
8111bc00:	dc400117 	ldw	r17,4(sp)
8111bc04:	dc000017 	ldw	r16,0(sp)
8111bc08:	dec00504 	addi	sp,sp,20
8111bc0c:	f800283a 	ret
8111bc10:	01400104 	movi	r5,4
8111bc14:	9809883a 	mov	r4,r19
8111bc18:	111baa40 	call	8111baa4 <__sfmoreglue>
8111bc1c:	90800015 	stw	r2,0(r18)
8111bc20:	103fde1e 	bne	r2,zero,8111bb9c <__reset+0xfb0fbb9c>
8111bc24:	00800304 	movi	r2,12
8111bc28:	98800015 	stw	r2,0(r19)
8111bc2c:	0005883a 	mov	r2,zero
8111bc30:	003ff006 	br	8111bbf4 <__reset+0xfb0fbbf4>

8111bc34 <_cleanup>:
8111bc34:	00a04534 	movhi	r2,33044
8111bc38:	10895904 	addi	r2,r2,9572
8111bc3c:	11000017 	ldw	r4,0(r2)
8111bc40:	016044b4 	movhi	r5,33042
8111bc44:	294daa04 	addi	r5,r5,13992
8111bc48:	111c98c1 	jmpi	8111c98c <_fwalk_reent>

8111bc4c <__sinit>:
8111bc4c:	20800e17 	ldw	r2,56(r4)
8111bc50:	10000126 	beq	r2,zero,8111bc58 <__sinit+0xc>
8111bc54:	f800283a 	ret
8111bc58:	111b8f81 	jmpi	8111b8f8 <__sinit.part.1>

8111bc5c <__sfp_lock_acquire>:
8111bc5c:	f800283a 	ret

8111bc60 <__sfp_lock_release>:
8111bc60:	f800283a 	ret

8111bc64 <__sinit_lock_acquire>:
8111bc64:	f800283a 	ret

8111bc68 <__sinit_lock_release>:
8111bc68:	f800283a 	ret

8111bc6c <__fp_lock_all>:
8111bc6c:	00a04534 	movhi	r2,33044
8111bc70:	10895a04 	addi	r2,r2,9576
8111bc74:	11000017 	ldw	r4,0(r2)
8111bc78:	016044b4 	movhi	r5,33042
8111bc7c:	296ea704 	addi	r5,r5,-17764
8111bc80:	111c8c01 	jmpi	8111c8c0 <_fwalk>

8111bc84 <__fp_unlock_all>:
8111bc84:	00a04534 	movhi	r2,33044
8111bc88:	10895a04 	addi	r2,r2,9576
8111bc8c:	11000017 	ldw	r4,0(r2)
8111bc90:	016044b4 	movhi	r5,33042
8111bc94:	296e3904 	addi	r5,r5,-18204
8111bc98:	111c8c01 	jmpi	8111c8c0 <_fwalk>

8111bc9c <__sflags>:
8111bc9c:	28800007 	ldb	r2,0(r5)
8111bca0:	00c01c84 	movi	r3,114
8111bca4:	10c02426 	beq	r2,r3,8111bd38 <__sflags+0x9c>
8111bca8:	00c01dc4 	movi	r3,119
8111bcac:	10c01e26 	beq	r2,r3,8111bd28 <__sflags+0x8c>
8111bcb0:	00c01844 	movi	r3,97
8111bcb4:	10c00426 	beq	r2,r3,8111bcc8 <__sflags+0x2c>
8111bcb8:	00800584 	movi	r2,22
8111bcbc:	20800015 	stw	r2,0(r4)
8111bcc0:	0005883a 	mov	r2,zero
8111bcc4:	f800283a 	ret
8111bcc8:	02c08204 	movi	r11,520
8111bccc:	01000044 	movi	r4,1
8111bcd0:	00804204 	movi	r2,264
8111bcd4:	01c00ac4 	movi	r7,43
8111bcd8:	02bff8c4 	movi	r10,-29
8111bcdc:	027fff04 	movi	r9,-4
8111bce0:	02001e04 	movi	r8,120
8111bce4:	29400044 	addi	r5,r5,1
8111bce8:	28c00007 	ldb	r3,0(r5)
8111bcec:	18000626 	beq	r3,zero,8111bd08 <__sflags+0x6c>
8111bcf0:	19c00826 	beq	r3,r7,8111bd14 <__sflags+0x78>
8111bcf4:	1a3ffb1e 	bne	r3,r8,8111bce4 <__reset+0xfb0fbce4>
8111bcf8:	29400044 	addi	r5,r5,1
8111bcfc:	28c00007 	ldb	r3,0(r5)
8111bd00:	21020014 	ori	r4,r4,2048
8111bd04:	183ffa1e 	bne	r3,zero,8111bcf0 <__reset+0xfb0fbcf0>
8111bd08:	22c8b03a 	or	r4,r4,r11
8111bd0c:	31000015 	stw	r4,0(r6)
8111bd10:	f800283a 	ret
8111bd14:	1284703a 	and	r2,r2,r10
8111bd18:	2248703a 	and	r4,r4,r9
8111bd1c:	10800414 	ori	r2,r2,16
8111bd20:	21000094 	ori	r4,r4,2
8111bd24:	003fef06 	br	8111bce4 <__reset+0xfb0fbce4>
8111bd28:	02c18004 	movi	r11,1536
8111bd2c:	01000044 	movi	r4,1
8111bd30:	00800204 	movi	r2,8
8111bd34:	003fe706 	br	8111bcd4 <__reset+0xfb0fbcd4>
8111bd38:	0017883a 	mov	r11,zero
8111bd3c:	0009883a 	mov	r4,zero
8111bd40:	00800104 	movi	r2,4
8111bd44:	003fe306 	br	8111bcd4 <__reset+0xfb0fbcd4>

8111bd48 <_fread_r>:
8111bd48:	defff404 	addi	sp,sp,-48
8111bd4c:	de00012e 	bgeu	sp,et,8111bd54 <_fread_r+0xc>
8111bd50:	003b68fa 	trap	3
8111bd54:	dd800815 	stw	r22,32(sp)
8111bd58:	39ad383a 	mul	r22,r7,r6
8111bd5c:	dc000215 	stw	r16,8(sp)
8111bd60:	dfc00b15 	stw	ra,44(sp)
8111bd64:	df000a15 	stw	fp,40(sp)
8111bd68:	ddc00915 	stw	r23,36(sp)
8111bd6c:	dd400715 	stw	r21,28(sp)
8111bd70:	dd000615 	stw	r20,24(sp)
8111bd74:	dcc00515 	stw	r19,20(sp)
8111bd78:	dc800415 	stw	r18,16(sp)
8111bd7c:	dc400315 	stw	r17,12(sp)
8111bd80:	dc000c17 	ldw	r16,48(sp)
8111bd84:	b0003b26 	beq	r22,zero,8111be74 <_fread_r+0x12c>
8111bd88:	302f883a 	mov	r23,r6
8111bd8c:	382b883a 	mov	r21,r7
8111bd90:	2029883a 	mov	r20,r4
8111bd94:	2827883a 	mov	r19,r5
8111bd98:	20000226 	beq	r4,zero,8111bda4 <_fread_r+0x5c>
8111bd9c:	20800e17 	ldw	r2,56(r4)
8111bda0:	10006e26 	beq	r2,zero,8111bf5c <_fread_r+0x214>
8111bda4:	8080030b 	ldhu	r2,12(r16)
8111bda8:	10c8000c 	andi	r3,r2,8192
8111bdac:	1800061e 	bne	r3,zero,8111bdc8 <_fread_r+0x80>
8111bdb0:	81001917 	ldw	r4,100(r16)
8111bdb4:	00f7ffc4 	movi	r3,-8193
8111bdb8:	10880014 	ori	r2,r2,8192
8111bdbc:	20c6703a 	and	r3,r4,r3
8111bdc0:	8080030d 	sth	r2,12(r16)
8111bdc4:	80c01915 	stw	r3,100(r16)
8111bdc8:	84400117 	ldw	r17,4(r16)
8111bdcc:	88005f16 	blt	r17,zero,8111bf4c <_fread_r+0x204>
8111bdd0:	8809883a 	mov	r4,r17
8111bdd4:	1080008c 	andi	r2,r2,2
8111bdd8:	1000281e 	bne	r2,zero,8111be7c <_fread_r+0x134>
8111bddc:	b025883a 	mov	r18,r22
8111bde0:	00000b06 	br	8111be10 <_fread_r+0xc8>
8111bde4:	1112e840 	call	81112e84 <memcpy>
8111bde8:	80800017 	ldw	r2,0(r16)
8111bdec:	9c67883a 	add	r19,r19,r17
8111bdf0:	9465c83a 	sub	r18,r18,r17
8111bdf4:	1463883a 	add	r17,r2,r17
8111bdf8:	800b883a 	mov	r5,r16
8111bdfc:	a009883a 	mov	r4,r20
8111be00:	84400015 	stw	r17,0(r16)
8111be04:	11134500 	call	81113450 <__srefill_r>
8111be08:	10004c1e 	bne	r2,zero,8111bf3c <_fread_r+0x1f4>
8111be0c:	84400117 	ldw	r17,4(r16)
8111be10:	880d883a 	mov	r6,r17
8111be14:	9809883a 	mov	r4,r19
8111be18:	81400017 	ldw	r5,0(r16)
8111be1c:	8cbff136 	bltu	r17,r18,8111bde4 <__reset+0xfb0fbde4>
8111be20:	900d883a 	mov	r6,r18
8111be24:	1112e840 	call	81112e84 <memcpy>
8111be28:	80c00117 	ldw	r3,4(r16)
8111be2c:	81000017 	ldw	r4,0(r16)
8111be30:	a805883a 	mov	r2,r21
8111be34:	1c87c83a 	sub	r3,r3,r18
8111be38:	24a5883a 	add	r18,r4,r18
8111be3c:	80c00115 	stw	r3,4(r16)
8111be40:	84800015 	stw	r18,0(r16)
8111be44:	dfc00b17 	ldw	ra,44(sp)
8111be48:	df000a17 	ldw	fp,40(sp)
8111be4c:	ddc00917 	ldw	r23,36(sp)
8111be50:	dd800817 	ldw	r22,32(sp)
8111be54:	dd400717 	ldw	r21,28(sp)
8111be58:	dd000617 	ldw	r20,24(sp)
8111be5c:	dcc00517 	ldw	r19,20(sp)
8111be60:	dc800417 	ldw	r18,16(sp)
8111be64:	dc400317 	ldw	r17,12(sp)
8111be68:	dc000217 	ldw	r16,8(sp)
8111be6c:	dec00c04 	addi	sp,sp,48
8111be70:	f800283a 	ret
8111be74:	0005883a 	mov	r2,zero
8111be78:	003ff206 	br	8111be44 <__reset+0xfb0fbe44>
8111be7c:	b007883a 	mov	r3,r22
8111be80:	2580012e 	bgeu	r4,r22,8111be88 <_fread_r+0x140>
8111be84:	2007883a 	mov	r3,r4
8111be88:	81400017 	ldw	r5,0(r16)
8111be8c:	180d883a 	mov	r6,r3
8111be90:	9809883a 	mov	r4,r19
8111be94:	d8c00115 	stw	r3,4(sp)
8111be98:	1112e840 	call	81112e84 <memcpy>
8111be9c:	d8c00117 	ldw	r3,4(sp)
8111bea0:	84400017 	ldw	r17,0(r16)
8111bea4:	80800117 	ldw	r2,4(r16)
8111bea8:	81400c17 	ldw	r5,48(r16)
8111beac:	88e3883a 	add	r17,r17,r3
8111beb0:	10c5c83a 	sub	r2,r2,r3
8111beb4:	84400015 	stw	r17,0(r16)
8111beb8:	80800115 	stw	r2,4(r16)
8111bebc:	b0e5c83a 	sub	r18,r22,r3
8111bec0:	28002b26 	beq	r5,zero,8111bf70 <_fread_r+0x228>
8111bec4:	90002b26 	beq	r18,zero,8111bf74 <_fread_r+0x22c>
8111bec8:	80801004 	addi	r2,r16,64
8111becc:	28800526 	beq	r5,r2,8111bee4 <_fread_r+0x19c>
8111bed0:	a009883a 	mov	r4,r20
8111bed4:	d8c00115 	stw	r3,4(sp)
8111bed8:	111c0e40 	call	8111c0e4 <_free_r>
8111bedc:	d8c00117 	ldw	r3,4(sp)
8111bee0:	84400017 	ldw	r17,0(r16)
8111bee4:	80000c15 	stw	zero,48(r16)
8111bee8:	80800517 	ldw	r2,20(r16)
8111beec:	87000417 	ldw	fp,16(r16)
8111bef0:	98e7883a 	add	r19,r19,r3
8111bef4:	d8800015 	stw	r2,0(sp)
8111bef8:	00000106 	br	8111bf00 <_fread_r+0x1b8>
8111befc:	90001d26 	beq	r18,zero,8111bf74 <_fread_r+0x22c>
8111bf00:	84c00415 	stw	r19,16(r16)
8111bf04:	84800515 	stw	r18,20(r16)
8111bf08:	84c00015 	stw	r19,0(r16)
8111bf0c:	a009883a 	mov	r4,r20
8111bf10:	800b883a 	mov	r5,r16
8111bf14:	11134500 	call	81113450 <__srefill_r>
8111bf18:	d9000017 	ldw	r4,0(sp)
8111bf1c:	80c00117 	ldw	r3,4(r16)
8111bf20:	87000415 	stw	fp,16(r16)
8111bf24:	81000515 	stw	r4,20(r16)
8111bf28:	84400015 	stw	r17,0(r16)
8111bf2c:	80000115 	stw	zero,4(r16)
8111bf30:	90e5c83a 	sub	r18,r18,r3
8111bf34:	98e7883a 	add	r19,r19,r3
8111bf38:	103ff026 	beq	r2,zero,8111befc <__reset+0xfb0fbefc>
8111bf3c:	b80b883a 	mov	r5,r23
8111bf40:	b489c83a 	sub	r4,r22,r18
8111bf44:	112546c0 	call	8112546c <__udivsi3>
8111bf48:	003fbe06 	br	8111be44 <__reset+0xfb0fbe44>
8111bf4c:	80000115 	stw	zero,4(r16)
8111bf50:	0009883a 	mov	r4,zero
8111bf54:	0023883a 	mov	r17,zero
8111bf58:	003f9e06 	br	8111bdd4 <__reset+0xfb0fbdd4>
8111bf5c:	111bc4c0 	call	8111bc4c <__sinit>
8111bf60:	8080030b 	ldhu	r2,12(r16)
8111bf64:	10c8000c 	andi	r3,r2,8192
8111bf68:	183f971e 	bne	r3,zero,8111bdc8 <__reset+0xfb0fbdc8>
8111bf6c:	003f9006 	br	8111bdb0 <__reset+0xfb0fbdb0>
8111bf70:	903fdd1e 	bne	r18,zero,8111bee8 <__reset+0xfb0fbee8>
8111bf74:	a805883a 	mov	r2,r21
8111bf78:	003fb206 	br	8111be44 <__reset+0xfb0fbe44>

8111bf7c <fread>:
8111bf7c:	defffe04 	addi	sp,sp,-8
8111bf80:	00a04534 	movhi	r2,33044
8111bf84:	de00012e 	bgeu	sp,et,8111bf8c <fread+0x10>
8111bf88:	003b68fa 	trap	3
8111bf8c:	10895a04 	addi	r2,r2,9576
8111bf90:	d9c00015 	stw	r7,0(sp)
8111bf94:	300f883a 	mov	r7,r6
8111bf98:	280d883a 	mov	r6,r5
8111bf9c:	200b883a 	mov	r5,r4
8111bfa0:	11000017 	ldw	r4,0(r2)
8111bfa4:	dfc00115 	stw	ra,4(sp)
8111bfa8:	111bd480 	call	8111bd48 <_fread_r>
8111bfac:	dfc00117 	ldw	ra,4(sp)
8111bfb0:	dec00204 	addi	sp,sp,8
8111bfb4:	f800283a 	ret

8111bfb8 <_malloc_trim_r>:
8111bfb8:	defffb04 	addi	sp,sp,-20
8111bfbc:	de00012e 	bgeu	sp,et,8111bfc4 <_malloc_trim_r+0xc>
8111bfc0:	003b68fa 	trap	3
8111bfc4:	dcc00315 	stw	r19,12(sp)
8111bfc8:	04e04534 	movhi	r19,33044
8111bfcc:	dc800215 	stw	r18,8(sp)
8111bfd0:	dc400115 	stw	r17,4(sp)
8111bfd4:	dc000015 	stw	r16,0(sp)
8111bfd8:	dfc00415 	stw	ra,16(sp)
8111bfdc:	2821883a 	mov	r16,r5
8111bfe0:	9cc31804 	addi	r19,r19,3168
8111bfe4:	2025883a 	mov	r18,r4
8111bfe8:	11294ac0 	call	811294ac <__malloc_lock>
8111bfec:	98800217 	ldw	r2,8(r19)
8111bff0:	14400117 	ldw	r17,4(r2)
8111bff4:	00bfff04 	movi	r2,-4
8111bff8:	88a2703a 	and	r17,r17,r2
8111bffc:	8c21c83a 	sub	r16,r17,r16
8111c000:	8403fbc4 	addi	r16,r16,4079
8111c004:	8020d33a 	srli	r16,r16,12
8111c008:	0083ffc4 	movi	r2,4095
8111c00c:	843fffc4 	addi	r16,r16,-1
8111c010:	8020933a 	slli	r16,r16,12
8111c014:	1400060e 	bge	r2,r16,8111c030 <_malloc_trim_r+0x78>
8111c018:	000b883a 	mov	r5,zero
8111c01c:	9009883a 	mov	r4,r18
8111c020:	111362c0 	call	8111362c <_sbrk_r>
8111c024:	98c00217 	ldw	r3,8(r19)
8111c028:	1c47883a 	add	r3,r3,r17
8111c02c:	10c00a26 	beq	r2,r3,8111c058 <_malloc_trim_r+0xa0>
8111c030:	9009883a 	mov	r4,r18
8111c034:	11295d40 	call	811295d4 <__malloc_unlock>
8111c038:	0005883a 	mov	r2,zero
8111c03c:	dfc00417 	ldw	ra,16(sp)
8111c040:	dcc00317 	ldw	r19,12(sp)
8111c044:	dc800217 	ldw	r18,8(sp)
8111c048:	dc400117 	ldw	r17,4(sp)
8111c04c:	dc000017 	ldw	r16,0(sp)
8111c050:	dec00504 	addi	sp,sp,20
8111c054:	f800283a 	ret
8111c058:	040bc83a 	sub	r5,zero,r16
8111c05c:	9009883a 	mov	r4,r18
8111c060:	111362c0 	call	8111362c <_sbrk_r>
8111c064:	00ffffc4 	movi	r3,-1
8111c068:	10c00d26 	beq	r2,r3,8111c0a0 <_malloc_trim_r+0xe8>
8111c06c:	00e04534 	movhi	r3,33044
8111c070:	18ca1c04 	addi	r3,r3,10352
8111c074:	18800017 	ldw	r2,0(r3)
8111c078:	99000217 	ldw	r4,8(r19)
8111c07c:	8c23c83a 	sub	r17,r17,r16
8111c080:	8c400054 	ori	r17,r17,1
8111c084:	1421c83a 	sub	r16,r2,r16
8111c088:	24400115 	stw	r17,4(r4)
8111c08c:	9009883a 	mov	r4,r18
8111c090:	1c000015 	stw	r16,0(r3)
8111c094:	11295d40 	call	811295d4 <__malloc_unlock>
8111c098:	00800044 	movi	r2,1
8111c09c:	003fe706 	br	8111c03c <__reset+0xfb0fc03c>
8111c0a0:	000b883a 	mov	r5,zero
8111c0a4:	9009883a 	mov	r4,r18
8111c0a8:	111362c0 	call	8111362c <_sbrk_r>
8111c0ac:	99000217 	ldw	r4,8(r19)
8111c0b0:	014003c4 	movi	r5,15
8111c0b4:	1107c83a 	sub	r3,r2,r4
8111c0b8:	28ffdd0e 	bge	r5,r3,8111c030 <__reset+0xfb0fc030>
8111c0bc:	01604534 	movhi	r5,33044
8111c0c0:	29495b04 	addi	r5,r5,9580
8111c0c4:	29400017 	ldw	r5,0(r5)
8111c0c8:	18c00054 	ori	r3,r3,1
8111c0cc:	20c00115 	stw	r3,4(r4)
8111c0d0:	00e04534 	movhi	r3,33044
8111c0d4:	1145c83a 	sub	r2,r2,r5
8111c0d8:	18ca1c04 	addi	r3,r3,10352
8111c0dc:	18800015 	stw	r2,0(r3)
8111c0e0:	003fd306 	br	8111c030 <__reset+0xfb0fc030>

8111c0e4 <_free_r>:
8111c0e4:	28004326 	beq	r5,zero,8111c1f4 <_free_r+0x110>
8111c0e8:	defffd04 	addi	sp,sp,-12
8111c0ec:	de00012e 	bgeu	sp,et,8111c0f4 <_free_r+0x10>
8111c0f0:	003b68fa 	trap	3
8111c0f4:	dc400115 	stw	r17,4(sp)
8111c0f8:	dc000015 	stw	r16,0(sp)
8111c0fc:	2023883a 	mov	r17,r4
8111c100:	2821883a 	mov	r16,r5
8111c104:	dfc00215 	stw	ra,8(sp)
8111c108:	11294ac0 	call	811294ac <__malloc_lock>
8111c10c:	81ffff17 	ldw	r7,-4(r16)
8111c110:	00bfff84 	movi	r2,-2
8111c114:	01204534 	movhi	r4,33044
8111c118:	81bffe04 	addi	r6,r16,-8
8111c11c:	3884703a 	and	r2,r7,r2
8111c120:	21031804 	addi	r4,r4,3168
8111c124:	308b883a 	add	r5,r6,r2
8111c128:	2a400117 	ldw	r9,4(r5)
8111c12c:	22000217 	ldw	r8,8(r4)
8111c130:	00ffff04 	movi	r3,-4
8111c134:	48c6703a 	and	r3,r9,r3
8111c138:	2a005726 	beq	r5,r8,8111c298 <_free_r+0x1b4>
8111c13c:	28c00115 	stw	r3,4(r5)
8111c140:	39c0004c 	andi	r7,r7,1
8111c144:	3800091e 	bne	r7,zero,8111c16c <_free_r+0x88>
8111c148:	823ffe17 	ldw	r8,-8(r16)
8111c14c:	22400204 	addi	r9,r4,8
8111c150:	320dc83a 	sub	r6,r6,r8
8111c154:	31c00217 	ldw	r7,8(r6)
8111c158:	1205883a 	add	r2,r2,r8
8111c15c:	3a406526 	beq	r7,r9,8111c2f4 <_free_r+0x210>
8111c160:	32000317 	ldw	r8,12(r6)
8111c164:	3a000315 	stw	r8,12(r7)
8111c168:	41c00215 	stw	r7,8(r8)
8111c16c:	28cf883a 	add	r7,r5,r3
8111c170:	39c00117 	ldw	r7,4(r7)
8111c174:	39c0004c 	andi	r7,r7,1
8111c178:	38003a26 	beq	r7,zero,8111c264 <_free_r+0x180>
8111c17c:	10c00054 	ori	r3,r2,1
8111c180:	30c00115 	stw	r3,4(r6)
8111c184:	3087883a 	add	r3,r6,r2
8111c188:	18800015 	stw	r2,0(r3)
8111c18c:	00c07fc4 	movi	r3,511
8111c190:	18801936 	bltu	r3,r2,8111c1f8 <_free_r+0x114>
8111c194:	1004d0fa 	srli	r2,r2,3
8111c198:	01c00044 	movi	r7,1
8111c19c:	21400117 	ldw	r5,4(r4)
8111c1a0:	10c00044 	addi	r3,r2,1
8111c1a4:	18c7883a 	add	r3,r3,r3
8111c1a8:	1005d0ba 	srai	r2,r2,2
8111c1ac:	18c7883a 	add	r3,r3,r3
8111c1b0:	18c7883a 	add	r3,r3,r3
8111c1b4:	1907883a 	add	r3,r3,r4
8111c1b8:	3884983a 	sll	r2,r7,r2
8111c1bc:	19c00017 	ldw	r7,0(r3)
8111c1c0:	1a3ffe04 	addi	r8,r3,-8
8111c1c4:	1144b03a 	or	r2,r2,r5
8111c1c8:	32000315 	stw	r8,12(r6)
8111c1cc:	31c00215 	stw	r7,8(r6)
8111c1d0:	20800115 	stw	r2,4(r4)
8111c1d4:	19800015 	stw	r6,0(r3)
8111c1d8:	39800315 	stw	r6,12(r7)
8111c1dc:	8809883a 	mov	r4,r17
8111c1e0:	dfc00217 	ldw	ra,8(sp)
8111c1e4:	dc400117 	ldw	r17,4(sp)
8111c1e8:	dc000017 	ldw	r16,0(sp)
8111c1ec:	dec00304 	addi	sp,sp,12
8111c1f0:	11295d41 	jmpi	811295d4 <__malloc_unlock>
8111c1f4:	f800283a 	ret
8111c1f8:	100ad27a 	srli	r5,r2,9
8111c1fc:	00c00104 	movi	r3,4
8111c200:	19404a36 	bltu	r3,r5,8111c32c <_free_r+0x248>
8111c204:	100ad1ba 	srli	r5,r2,6
8111c208:	28c00e44 	addi	r3,r5,57
8111c20c:	18c7883a 	add	r3,r3,r3
8111c210:	29400e04 	addi	r5,r5,56
8111c214:	18c7883a 	add	r3,r3,r3
8111c218:	18c7883a 	add	r3,r3,r3
8111c21c:	1909883a 	add	r4,r3,r4
8111c220:	20c00017 	ldw	r3,0(r4)
8111c224:	01e04534 	movhi	r7,33044
8111c228:	213ffe04 	addi	r4,r4,-8
8111c22c:	39c31804 	addi	r7,r7,3168
8111c230:	20c04426 	beq	r4,r3,8111c344 <_free_r+0x260>
8111c234:	01ffff04 	movi	r7,-4
8111c238:	19400117 	ldw	r5,4(r3)
8111c23c:	29ca703a 	and	r5,r5,r7
8111c240:	1140022e 	bgeu	r2,r5,8111c24c <_free_r+0x168>
8111c244:	18c00217 	ldw	r3,8(r3)
8111c248:	20fffb1e 	bne	r4,r3,8111c238 <__reset+0xfb0fc238>
8111c24c:	19000317 	ldw	r4,12(r3)
8111c250:	31000315 	stw	r4,12(r6)
8111c254:	30c00215 	stw	r3,8(r6)
8111c258:	21800215 	stw	r6,8(r4)
8111c25c:	19800315 	stw	r6,12(r3)
8111c260:	003fde06 	br	8111c1dc <__reset+0xfb0fc1dc>
8111c264:	29c00217 	ldw	r7,8(r5)
8111c268:	10c5883a 	add	r2,r2,r3
8111c26c:	00e04534 	movhi	r3,33044
8111c270:	18c31a04 	addi	r3,r3,3176
8111c274:	38c03b26 	beq	r7,r3,8111c364 <_free_r+0x280>
8111c278:	2a000317 	ldw	r8,12(r5)
8111c27c:	11400054 	ori	r5,r2,1
8111c280:	3087883a 	add	r3,r6,r2
8111c284:	3a000315 	stw	r8,12(r7)
8111c288:	41c00215 	stw	r7,8(r8)
8111c28c:	31400115 	stw	r5,4(r6)
8111c290:	18800015 	stw	r2,0(r3)
8111c294:	003fbd06 	br	8111c18c <__reset+0xfb0fc18c>
8111c298:	39c0004c 	andi	r7,r7,1
8111c29c:	10c5883a 	add	r2,r2,r3
8111c2a0:	3800071e 	bne	r7,zero,8111c2c0 <_free_r+0x1dc>
8111c2a4:	81fffe17 	ldw	r7,-8(r16)
8111c2a8:	31cdc83a 	sub	r6,r6,r7
8111c2ac:	30c00317 	ldw	r3,12(r6)
8111c2b0:	31400217 	ldw	r5,8(r6)
8111c2b4:	11c5883a 	add	r2,r2,r7
8111c2b8:	28c00315 	stw	r3,12(r5)
8111c2bc:	19400215 	stw	r5,8(r3)
8111c2c0:	10c00054 	ori	r3,r2,1
8111c2c4:	30c00115 	stw	r3,4(r6)
8111c2c8:	00e04534 	movhi	r3,33044
8111c2cc:	18c95c04 	addi	r3,r3,9584
8111c2d0:	18c00017 	ldw	r3,0(r3)
8111c2d4:	21800215 	stw	r6,8(r4)
8111c2d8:	10ffc036 	bltu	r2,r3,8111c1dc <__reset+0xfb0fc1dc>
8111c2dc:	00a04534 	movhi	r2,33044
8111c2e0:	1089b904 	addi	r2,r2,9956
8111c2e4:	11400017 	ldw	r5,0(r2)
8111c2e8:	8809883a 	mov	r4,r17
8111c2ec:	111bfb80 	call	8111bfb8 <_malloc_trim_r>
8111c2f0:	003fba06 	br	8111c1dc <__reset+0xfb0fc1dc>
8111c2f4:	28c9883a 	add	r4,r5,r3
8111c2f8:	21000117 	ldw	r4,4(r4)
8111c2fc:	2100004c 	andi	r4,r4,1
8111c300:	2000391e 	bne	r4,zero,8111c3e8 <_free_r+0x304>
8111c304:	29c00217 	ldw	r7,8(r5)
8111c308:	29000317 	ldw	r4,12(r5)
8111c30c:	1885883a 	add	r2,r3,r2
8111c310:	10c00054 	ori	r3,r2,1
8111c314:	39000315 	stw	r4,12(r7)
8111c318:	21c00215 	stw	r7,8(r4)
8111c31c:	30c00115 	stw	r3,4(r6)
8111c320:	308d883a 	add	r6,r6,r2
8111c324:	30800015 	stw	r2,0(r6)
8111c328:	003fac06 	br	8111c1dc <__reset+0xfb0fc1dc>
8111c32c:	00c00504 	movi	r3,20
8111c330:	19401536 	bltu	r3,r5,8111c388 <_free_r+0x2a4>
8111c334:	28c01704 	addi	r3,r5,92
8111c338:	18c7883a 	add	r3,r3,r3
8111c33c:	294016c4 	addi	r5,r5,91
8111c340:	003fb406 	br	8111c214 <__reset+0xfb0fc214>
8111c344:	280bd0ba 	srai	r5,r5,2
8111c348:	00c00044 	movi	r3,1
8111c34c:	38800117 	ldw	r2,4(r7)
8111c350:	194a983a 	sll	r5,r3,r5
8111c354:	2007883a 	mov	r3,r4
8111c358:	2884b03a 	or	r2,r5,r2
8111c35c:	38800115 	stw	r2,4(r7)
8111c360:	003fbb06 	br	8111c250 <__reset+0xfb0fc250>
8111c364:	21800515 	stw	r6,20(r4)
8111c368:	21800415 	stw	r6,16(r4)
8111c36c:	10c00054 	ori	r3,r2,1
8111c370:	31c00315 	stw	r7,12(r6)
8111c374:	31c00215 	stw	r7,8(r6)
8111c378:	30c00115 	stw	r3,4(r6)
8111c37c:	308d883a 	add	r6,r6,r2
8111c380:	30800015 	stw	r2,0(r6)
8111c384:	003f9506 	br	8111c1dc <__reset+0xfb0fc1dc>
8111c388:	00c01504 	movi	r3,84
8111c38c:	19400536 	bltu	r3,r5,8111c3a4 <_free_r+0x2c0>
8111c390:	100ad33a 	srli	r5,r2,12
8111c394:	28c01bc4 	addi	r3,r5,111
8111c398:	18c7883a 	add	r3,r3,r3
8111c39c:	29401b84 	addi	r5,r5,110
8111c3a0:	003f9c06 	br	8111c214 <__reset+0xfb0fc214>
8111c3a4:	00c05504 	movi	r3,340
8111c3a8:	19400536 	bltu	r3,r5,8111c3c0 <_free_r+0x2dc>
8111c3ac:	100ad3fa 	srli	r5,r2,15
8111c3b0:	28c01e04 	addi	r3,r5,120
8111c3b4:	18c7883a 	add	r3,r3,r3
8111c3b8:	29401dc4 	addi	r5,r5,119
8111c3bc:	003f9506 	br	8111c214 <__reset+0xfb0fc214>
8111c3c0:	00c15504 	movi	r3,1364
8111c3c4:	19400536 	bltu	r3,r5,8111c3dc <_free_r+0x2f8>
8111c3c8:	100ad4ba 	srli	r5,r2,18
8111c3cc:	28c01f44 	addi	r3,r5,125
8111c3d0:	18c7883a 	add	r3,r3,r3
8111c3d4:	29401f04 	addi	r5,r5,124
8111c3d8:	003f8e06 	br	8111c214 <__reset+0xfb0fc214>
8111c3dc:	00c03f84 	movi	r3,254
8111c3e0:	01401f84 	movi	r5,126
8111c3e4:	003f8b06 	br	8111c214 <__reset+0xfb0fc214>
8111c3e8:	10c00054 	ori	r3,r2,1
8111c3ec:	30c00115 	stw	r3,4(r6)
8111c3f0:	308d883a 	add	r6,r6,r2
8111c3f4:	30800015 	stw	r2,0(r6)
8111c3f8:	003f7806 	br	8111c1dc <__reset+0xfb0fc1dc>

8111c3fc <__sfvwrite_r>:
8111c3fc:	30800217 	ldw	r2,8(r6)
8111c400:	10006926 	beq	r2,zero,8111c5a8 <__sfvwrite_r+0x1ac>
8111c404:	defff404 	addi	sp,sp,-48
8111c408:	de00012e 	bgeu	sp,et,8111c410 <__sfvwrite_r+0x14>
8111c40c:	003b68fa 	trap	3
8111c410:	28c0030b 	ldhu	r3,12(r5)
8111c414:	dd400715 	stw	r21,28(sp)
8111c418:	dd000615 	stw	r20,24(sp)
8111c41c:	dc000215 	stw	r16,8(sp)
8111c420:	dfc00b15 	stw	ra,44(sp)
8111c424:	df000a15 	stw	fp,40(sp)
8111c428:	ddc00915 	stw	r23,36(sp)
8111c42c:	dd800815 	stw	r22,32(sp)
8111c430:	dcc00515 	stw	r19,20(sp)
8111c434:	dc800415 	stw	r18,16(sp)
8111c438:	dc400315 	stw	r17,12(sp)
8111c43c:	1880020c 	andi	r2,r3,8
8111c440:	2821883a 	mov	r16,r5
8111c444:	202b883a 	mov	r21,r4
8111c448:	3029883a 	mov	r20,r6
8111c44c:	10002726 	beq	r2,zero,8111c4ec <__sfvwrite_r+0xf0>
8111c450:	28800417 	ldw	r2,16(r5)
8111c454:	10002526 	beq	r2,zero,8111c4ec <__sfvwrite_r+0xf0>
8111c458:	1880008c 	andi	r2,r3,2
8111c45c:	a4400017 	ldw	r17,0(r20)
8111c460:	10002a26 	beq	r2,zero,8111c50c <__sfvwrite_r+0x110>
8111c464:	05a00034 	movhi	r22,32768
8111c468:	0027883a 	mov	r19,zero
8111c46c:	0025883a 	mov	r18,zero
8111c470:	b5bf0004 	addi	r22,r22,-1024
8111c474:	980d883a 	mov	r6,r19
8111c478:	a809883a 	mov	r4,r21
8111c47c:	90004626 	beq	r18,zero,8111c598 <__sfvwrite_r+0x19c>
8111c480:	900f883a 	mov	r7,r18
8111c484:	b480022e 	bgeu	r22,r18,8111c490 <__sfvwrite_r+0x94>
8111c488:	01e00034 	movhi	r7,32768
8111c48c:	39ff0004 	addi	r7,r7,-1024
8111c490:	80800917 	ldw	r2,36(r16)
8111c494:	81400717 	ldw	r5,28(r16)
8111c498:	103ee83a 	callr	r2
8111c49c:	0080570e 	bge	zero,r2,8111c5fc <__sfvwrite_r+0x200>
8111c4a0:	a0c00217 	ldw	r3,8(r20)
8111c4a4:	98a7883a 	add	r19,r19,r2
8111c4a8:	90a5c83a 	sub	r18,r18,r2
8111c4ac:	1885c83a 	sub	r2,r3,r2
8111c4b0:	a0800215 	stw	r2,8(r20)
8111c4b4:	103fef1e 	bne	r2,zero,8111c474 <__reset+0xfb0fc474>
8111c4b8:	0005883a 	mov	r2,zero
8111c4bc:	dfc00b17 	ldw	ra,44(sp)
8111c4c0:	df000a17 	ldw	fp,40(sp)
8111c4c4:	ddc00917 	ldw	r23,36(sp)
8111c4c8:	dd800817 	ldw	r22,32(sp)
8111c4cc:	dd400717 	ldw	r21,28(sp)
8111c4d0:	dd000617 	ldw	r20,24(sp)
8111c4d4:	dcc00517 	ldw	r19,20(sp)
8111c4d8:	dc800417 	ldw	r18,16(sp)
8111c4dc:	dc400317 	ldw	r17,12(sp)
8111c4e0:	dc000217 	ldw	r16,8(sp)
8111c4e4:	dec00c04 	addi	sp,sp,48
8111c4e8:	f800283a 	ret
8111c4ec:	800b883a 	mov	r5,r16
8111c4f0:	a809883a 	mov	r4,r21
8111c4f4:	1119bdc0 	call	81119bdc <__swsetup_r>
8111c4f8:	1000eb1e 	bne	r2,zero,8111c8a8 <__sfvwrite_r+0x4ac>
8111c4fc:	80c0030b 	ldhu	r3,12(r16)
8111c500:	a4400017 	ldw	r17,0(r20)
8111c504:	1880008c 	andi	r2,r3,2
8111c508:	103fd61e 	bne	r2,zero,8111c464 <__reset+0xfb0fc464>
8111c50c:	1880004c 	andi	r2,r3,1
8111c510:	10003f1e 	bne	r2,zero,8111c610 <__sfvwrite_r+0x214>
8111c514:	0039883a 	mov	fp,zero
8111c518:	0025883a 	mov	r18,zero
8111c51c:	90001a26 	beq	r18,zero,8111c588 <__sfvwrite_r+0x18c>
8111c520:	1880800c 	andi	r2,r3,512
8111c524:	84c00217 	ldw	r19,8(r16)
8111c528:	10002126 	beq	r2,zero,8111c5b0 <__sfvwrite_r+0x1b4>
8111c52c:	982f883a 	mov	r23,r19
8111c530:	94c09336 	bltu	r18,r19,8111c780 <__sfvwrite_r+0x384>
8111c534:	1881200c 	andi	r2,r3,1152
8111c538:	10009e1e 	bne	r2,zero,8111c7b4 <__sfvwrite_r+0x3b8>
8111c53c:	81000017 	ldw	r4,0(r16)
8111c540:	b80d883a 	mov	r6,r23
8111c544:	e00b883a 	mov	r5,fp
8111c548:	111cf580 	call	8111cf58 <memmove>
8111c54c:	80c00217 	ldw	r3,8(r16)
8111c550:	81000017 	ldw	r4,0(r16)
8111c554:	9005883a 	mov	r2,r18
8111c558:	1ce7c83a 	sub	r19,r3,r19
8111c55c:	25cf883a 	add	r7,r4,r23
8111c560:	84c00215 	stw	r19,8(r16)
8111c564:	81c00015 	stw	r7,0(r16)
8111c568:	a0c00217 	ldw	r3,8(r20)
8111c56c:	e0b9883a 	add	fp,fp,r2
8111c570:	90a5c83a 	sub	r18,r18,r2
8111c574:	18a7c83a 	sub	r19,r3,r2
8111c578:	a4c00215 	stw	r19,8(r20)
8111c57c:	983fce26 	beq	r19,zero,8111c4b8 <__reset+0xfb0fc4b8>
8111c580:	80c0030b 	ldhu	r3,12(r16)
8111c584:	903fe61e 	bne	r18,zero,8111c520 <__reset+0xfb0fc520>
8111c588:	8f000017 	ldw	fp,0(r17)
8111c58c:	8c800117 	ldw	r18,4(r17)
8111c590:	8c400204 	addi	r17,r17,8
8111c594:	003fe106 	br	8111c51c <__reset+0xfb0fc51c>
8111c598:	8cc00017 	ldw	r19,0(r17)
8111c59c:	8c800117 	ldw	r18,4(r17)
8111c5a0:	8c400204 	addi	r17,r17,8
8111c5a4:	003fb306 	br	8111c474 <__reset+0xfb0fc474>
8111c5a8:	0005883a 	mov	r2,zero
8111c5ac:	f800283a 	ret
8111c5b0:	81000017 	ldw	r4,0(r16)
8111c5b4:	80800417 	ldw	r2,16(r16)
8111c5b8:	11005736 	bltu	r2,r4,8111c718 <__sfvwrite_r+0x31c>
8111c5bc:	85c00517 	ldw	r23,20(r16)
8111c5c0:	95c05536 	bltu	r18,r23,8111c718 <__sfvwrite_r+0x31c>
8111c5c4:	00a00034 	movhi	r2,32768
8111c5c8:	10bfffc4 	addi	r2,r2,-1
8111c5cc:	9009883a 	mov	r4,r18
8111c5d0:	1480012e 	bgeu	r2,r18,8111c5d8 <__sfvwrite_r+0x1dc>
8111c5d4:	1009883a 	mov	r4,r2
8111c5d8:	b80b883a 	mov	r5,r23
8111c5dc:	11253740 	call	81125374 <__divsi3>
8111c5e0:	15cf383a 	mul	r7,r2,r23
8111c5e4:	81400717 	ldw	r5,28(r16)
8111c5e8:	80800917 	ldw	r2,36(r16)
8111c5ec:	e00d883a 	mov	r6,fp
8111c5f0:	a809883a 	mov	r4,r21
8111c5f4:	103ee83a 	callr	r2
8111c5f8:	00bfdb16 	blt	zero,r2,8111c568 <__reset+0xfb0fc568>
8111c5fc:	8080030b 	ldhu	r2,12(r16)
8111c600:	10801014 	ori	r2,r2,64
8111c604:	8080030d 	sth	r2,12(r16)
8111c608:	00bfffc4 	movi	r2,-1
8111c60c:	003fab06 	br	8111c4bc <__reset+0xfb0fc4bc>
8111c610:	0027883a 	mov	r19,zero
8111c614:	0011883a 	mov	r8,zero
8111c618:	0039883a 	mov	fp,zero
8111c61c:	0025883a 	mov	r18,zero
8111c620:	90001f26 	beq	r18,zero,8111c6a0 <__sfvwrite_r+0x2a4>
8111c624:	40005a26 	beq	r8,zero,8111c790 <__sfvwrite_r+0x394>
8111c628:	982d883a 	mov	r22,r19
8111c62c:	94c0012e 	bgeu	r18,r19,8111c634 <__sfvwrite_r+0x238>
8111c630:	902d883a 	mov	r22,r18
8111c634:	81000017 	ldw	r4,0(r16)
8111c638:	80800417 	ldw	r2,16(r16)
8111c63c:	b02f883a 	mov	r23,r22
8111c640:	81c00517 	ldw	r7,20(r16)
8111c644:	1100032e 	bgeu	r2,r4,8111c654 <__sfvwrite_r+0x258>
8111c648:	80c00217 	ldw	r3,8(r16)
8111c64c:	38c7883a 	add	r3,r7,r3
8111c650:	1d801816 	blt	r3,r22,8111c6b4 <__sfvwrite_r+0x2b8>
8111c654:	b1c03e16 	blt	r22,r7,8111c750 <__sfvwrite_r+0x354>
8111c658:	80800917 	ldw	r2,36(r16)
8111c65c:	81400717 	ldw	r5,28(r16)
8111c660:	e00d883a 	mov	r6,fp
8111c664:	da000115 	stw	r8,4(sp)
8111c668:	a809883a 	mov	r4,r21
8111c66c:	103ee83a 	callr	r2
8111c670:	102f883a 	mov	r23,r2
8111c674:	da000117 	ldw	r8,4(sp)
8111c678:	00bfe00e 	bge	zero,r2,8111c5fc <__reset+0xfb0fc5fc>
8111c67c:	9de7c83a 	sub	r19,r19,r23
8111c680:	98001f26 	beq	r19,zero,8111c700 <__sfvwrite_r+0x304>
8111c684:	a0800217 	ldw	r2,8(r20)
8111c688:	e5f9883a 	add	fp,fp,r23
8111c68c:	95e5c83a 	sub	r18,r18,r23
8111c690:	15efc83a 	sub	r23,r2,r23
8111c694:	a5c00215 	stw	r23,8(r20)
8111c698:	b83f8726 	beq	r23,zero,8111c4b8 <__reset+0xfb0fc4b8>
8111c69c:	903fe11e 	bne	r18,zero,8111c624 <__reset+0xfb0fc624>
8111c6a0:	8f000017 	ldw	fp,0(r17)
8111c6a4:	8c800117 	ldw	r18,4(r17)
8111c6a8:	0011883a 	mov	r8,zero
8111c6ac:	8c400204 	addi	r17,r17,8
8111c6b0:	003fdb06 	br	8111c620 <__reset+0xfb0fc620>
8111c6b4:	180d883a 	mov	r6,r3
8111c6b8:	e00b883a 	mov	r5,fp
8111c6bc:	da000115 	stw	r8,4(sp)
8111c6c0:	d8c00015 	stw	r3,0(sp)
8111c6c4:	111cf580 	call	8111cf58 <memmove>
8111c6c8:	d8c00017 	ldw	r3,0(sp)
8111c6cc:	80800017 	ldw	r2,0(r16)
8111c6d0:	800b883a 	mov	r5,r16
8111c6d4:	a809883a 	mov	r4,r21
8111c6d8:	10c5883a 	add	r2,r2,r3
8111c6dc:	80800015 	stw	r2,0(r16)
8111c6e0:	d8c00015 	stw	r3,0(sp)
8111c6e4:	111b8500 	call	8111b850 <_fflush_r>
8111c6e8:	d8c00017 	ldw	r3,0(sp)
8111c6ec:	da000117 	ldw	r8,4(sp)
8111c6f0:	103fc21e 	bne	r2,zero,8111c5fc <__reset+0xfb0fc5fc>
8111c6f4:	182f883a 	mov	r23,r3
8111c6f8:	9de7c83a 	sub	r19,r19,r23
8111c6fc:	983fe11e 	bne	r19,zero,8111c684 <__reset+0xfb0fc684>
8111c700:	800b883a 	mov	r5,r16
8111c704:	a809883a 	mov	r4,r21
8111c708:	111b8500 	call	8111b850 <_fflush_r>
8111c70c:	103fbb1e 	bne	r2,zero,8111c5fc <__reset+0xfb0fc5fc>
8111c710:	0011883a 	mov	r8,zero
8111c714:	003fdb06 	br	8111c684 <__reset+0xfb0fc684>
8111c718:	94c0012e 	bgeu	r18,r19,8111c720 <__sfvwrite_r+0x324>
8111c71c:	9027883a 	mov	r19,r18
8111c720:	980d883a 	mov	r6,r19
8111c724:	e00b883a 	mov	r5,fp
8111c728:	111cf580 	call	8111cf58 <memmove>
8111c72c:	80800217 	ldw	r2,8(r16)
8111c730:	80c00017 	ldw	r3,0(r16)
8111c734:	14c5c83a 	sub	r2,r2,r19
8111c738:	1cc7883a 	add	r3,r3,r19
8111c73c:	80800215 	stw	r2,8(r16)
8111c740:	80c00015 	stw	r3,0(r16)
8111c744:	10004326 	beq	r2,zero,8111c854 <__sfvwrite_r+0x458>
8111c748:	9805883a 	mov	r2,r19
8111c74c:	003f8606 	br	8111c568 <__reset+0xfb0fc568>
8111c750:	b00d883a 	mov	r6,r22
8111c754:	e00b883a 	mov	r5,fp
8111c758:	da000115 	stw	r8,4(sp)
8111c75c:	111cf580 	call	8111cf58 <memmove>
8111c760:	80800217 	ldw	r2,8(r16)
8111c764:	80c00017 	ldw	r3,0(r16)
8111c768:	da000117 	ldw	r8,4(sp)
8111c76c:	1585c83a 	sub	r2,r2,r22
8111c770:	1dad883a 	add	r22,r3,r22
8111c774:	80800215 	stw	r2,8(r16)
8111c778:	85800015 	stw	r22,0(r16)
8111c77c:	003fbf06 	br	8111c67c <__reset+0xfb0fc67c>
8111c780:	81000017 	ldw	r4,0(r16)
8111c784:	9027883a 	mov	r19,r18
8111c788:	902f883a 	mov	r23,r18
8111c78c:	003f6c06 	br	8111c540 <__reset+0xfb0fc540>
8111c790:	900d883a 	mov	r6,r18
8111c794:	01400284 	movi	r5,10
8111c798:	e009883a 	mov	r4,fp
8111c79c:	111ce740 	call	8111ce74 <memchr>
8111c7a0:	10003e26 	beq	r2,zero,8111c89c <__sfvwrite_r+0x4a0>
8111c7a4:	10800044 	addi	r2,r2,1
8111c7a8:	1727c83a 	sub	r19,r2,fp
8111c7ac:	02000044 	movi	r8,1
8111c7b0:	003f9d06 	br	8111c628 <__reset+0xfb0fc628>
8111c7b4:	80800517 	ldw	r2,20(r16)
8111c7b8:	81400417 	ldw	r5,16(r16)
8111c7bc:	81c00017 	ldw	r7,0(r16)
8111c7c0:	10a7883a 	add	r19,r2,r2
8111c7c4:	9885883a 	add	r2,r19,r2
8111c7c8:	1026d7fa 	srli	r19,r2,31
8111c7cc:	396dc83a 	sub	r22,r7,r5
8111c7d0:	b1000044 	addi	r4,r22,1
8111c7d4:	9885883a 	add	r2,r19,r2
8111c7d8:	1027d07a 	srai	r19,r2,1
8111c7dc:	2485883a 	add	r2,r4,r18
8111c7e0:	980d883a 	mov	r6,r19
8111c7e4:	9880022e 	bgeu	r19,r2,8111c7f0 <__sfvwrite_r+0x3f4>
8111c7e8:	1027883a 	mov	r19,r2
8111c7ec:	100d883a 	mov	r6,r2
8111c7f0:	18c1000c 	andi	r3,r3,1024
8111c7f4:	18001c26 	beq	r3,zero,8111c868 <__sfvwrite_r+0x46c>
8111c7f8:	300b883a 	mov	r5,r6
8111c7fc:	a809883a 	mov	r4,r21
8111c800:	11126700 	call	81112670 <_malloc_r>
8111c804:	102f883a 	mov	r23,r2
8111c808:	10002926 	beq	r2,zero,8111c8b0 <__sfvwrite_r+0x4b4>
8111c80c:	81400417 	ldw	r5,16(r16)
8111c810:	b00d883a 	mov	r6,r22
8111c814:	1009883a 	mov	r4,r2
8111c818:	1112e840 	call	81112e84 <memcpy>
8111c81c:	8080030b 	ldhu	r2,12(r16)
8111c820:	00fedfc4 	movi	r3,-1153
8111c824:	10c4703a 	and	r2,r2,r3
8111c828:	10802014 	ori	r2,r2,128
8111c82c:	8080030d 	sth	r2,12(r16)
8111c830:	bd89883a 	add	r4,r23,r22
8111c834:	9d8fc83a 	sub	r7,r19,r22
8111c838:	85c00415 	stw	r23,16(r16)
8111c83c:	84c00515 	stw	r19,20(r16)
8111c840:	81000015 	stw	r4,0(r16)
8111c844:	9027883a 	mov	r19,r18
8111c848:	81c00215 	stw	r7,8(r16)
8111c84c:	902f883a 	mov	r23,r18
8111c850:	003f3b06 	br	8111c540 <__reset+0xfb0fc540>
8111c854:	800b883a 	mov	r5,r16
8111c858:	a809883a 	mov	r4,r21
8111c85c:	111b8500 	call	8111b850 <_fflush_r>
8111c860:	103fb926 	beq	r2,zero,8111c748 <__reset+0xfb0fc748>
8111c864:	003f6506 	br	8111c5fc <__reset+0xfb0fc5fc>
8111c868:	a809883a 	mov	r4,r21
8111c86c:	111e1780 	call	8111e178 <_realloc_r>
8111c870:	102f883a 	mov	r23,r2
8111c874:	103fee1e 	bne	r2,zero,8111c830 <__reset+0xfb0fc830>
8111c878:	81400417 	ldw	r5,16(r16)
8111c87c:	a809883a 	mov	r4,r21
8111c880:	111c0e40 	call	8111c0e4 <_free_r>
8111c884:	8080030b 	ldhu	r2,12(r16)
8111c888:	00ffdfc4 	movi	r3,-129
8111c88c:	1884703a 	and	r2,r3,r2
8111c890:	00c00304 	movi	r3,12
8111c894:	a8c00015 	stw	r3,0(r21)
8111c898:	003f5906 	br	8111c600 <__reset+0xfb0fc600>
8111c89c:	94c00044 	addi	r19,r18,1
8111c8a0:	02000044 	movi	r8,1
8111c8a4:	003f6006 	br	8111c628 <__reset+0xfb0fc628>
8111c8a8:	00bfffc4 	movi	r2,-1
8111c8ac:	003f0306 	br	8111c4bc <__reset+0xfb0fc4bc>
8111c8b0:	00800304 	movi	r2,12
8111c8b4:	a8800015 	stw	r2,0(r21)
8111c8b8:	8080030b 	ldhu	r2,12(r16)
8111c8bc:	003f5006 	br	8111c600 <__reset+0xfb0fc600>

8111c8c0 <_fwalk>:
8111c8c0:	defff704 	addi	sp,sp,-36
8111c8c4:	de00012e 	bgeu	sp,et,8111c8cc <_fwalk+0xc>
8111c8c8:	003b68fa 	trap	3
8111c8cc:	dd000415 	stw	r20,16(sp)
8111c8d0:	dfc00815 	stw	ra,32(sp)
8111c8d4:	ddc00715 	stw	r23,28(sp)
8111c8d8:	dd800615 	stw	r22,24(sp)
8111c8dc:	dd400515 	stw	r21,20(sp)
8111c8e0:	dcc00315 	stw	r19,12(sp)
8111c8e4:	dc800215 	stw	r18,8(sp)
8111c8e8:	dc400115 	stw	r17,4(sp)
8111c8ec:	dc000015 	stw	r16,0(sp)
8111c8f0:	2500b804 	addi	r20,r4,736
8111c8f4:	a0002326 	beq	r20,zero,8111c984 <_fwalk+0xc4>
8111c8f8:	282b883a 	mov	r21,r5
8111c8fc:	002f883a 	mov	r23,zero
8111c900:	05800044 	movi	r22,1
8111c904:	04ffffc4 	movi	r19,-1
8111c908:	a4400117 	ldw	r17,4(r20)
8111c90c:	a4800217 	ldw	r18,8(r20)
8111c910:	8c7fffc4 	addi	r17,r17,-1
8111c914:	88000d16 	blt	r17,zero,8111c94c <_fwalk+0x8c>
8111c918:	94000304 	addi	r16,r18,12
8111c91c:	94800384 	addi	r18,r18,14
8111c920:	8080000b 	ldhu	r2,0(r16)
8111c924:	8c7fffc4 	addi	r17,r17,-1
8111c928:	813ffd04 	addi	r4,r16,-12
8111c92c:	b080042e 	bgeu	r22,r2,8111c940 <_fwalk+0x80>
8111c930:	9080000f 	ldh	r2,0(r18)
8111c934:	14c00226 	beq	r2,r19,8111c940 <_fwalk+0x80>
8111c938:	a83ee83a 	callr	r21
8111c93c:	b8aeb03a 	or	r23,r23,r2
8111c940:	84001a04 	addi	r16,r16,104
8111c944:	94801a04 	addi	r18,r18,104
8111c948:	8cfff51e 	bne	r17,r19,8111c920 <__reset+0xfb0fc920>
8111c94c:	a5000017 	ldw	r20,0(r20)
8111c950:	a03fed1e 	bne	r20,zero,8111c908 <__reset+0xfb0fc908>
8111c954:	b805883a 	mov	r2,r23
8111c958:	dfc00817 	ldw	ra,32(sp)
8111c95c:	ddc00717 	ldw	r23,28(sp)
8111c960:	dd800617 	ldw	r22,24(sp)
8111c964:	dd400517 	ldw	r21,20(sp)
8111c968:	dd000417 	ldw	r20,16(sp)
8111c96c:	dcc00317 	ldw	r19,12(sp)
8111c970:	dc800217 	ldw	r18,8(sp)
8111c974:	dc400117 	ldw	r17,4(sp)
8111c978:	dc000017 	ldw	r16,0(sp)
8111c97c:	dec00904 	addi	sp,sp,36
8111c980:	f800283a 	ret
8111c984:	002f883a 	mov	r23,zero
8111c988:	003ff206 	br	8111c954 <__reset+0xfb0fc954>

8111c98c <_fwalk_reent>:
8111c98c:	defff704 	addi	sp,sp,-36
8111c990:	de00012e 	bgeu	sp,et,8111c998 <_fwalk_reent+0xc>
8111c994:	003b68fa 	trap	3
8111c998:	dd000415 	stw	r20,16(sp)
8111c99c:	dfc00815 	stw	ra,32(sp)
8111c9a0:	ddc00715 	stw	r23,28(sp)
8111c9a4:	dd800615 	stw	r22,24(sp)
8111c9a8:	dd400515 	stw	r21,20(sp)
8111c9ac:	dcc00315 	stw	r19,12(sp)
8111c9b0:	dc800215 	stw	r18,8(sp)
8111c9b4:	dc400115 	stw	r17,4(sp)
8111c9b8:	dc000015 	stw	r16,0(sp)
8111c9bc:	2500b804 	addi	r20,r4,736
8111c9c0:	a0002326 	beq	r20,zero,8111ca50 <_fwalk_reent+0xc4>
8111c9c4:	282b883a 	mov	r21,r5
8111c9c8:	2027883a 	mov	r19,r4
8111c9cc:	002f883a 	mov	r23,zero
8111c9d0:	05800044 	movi	r22,1
8111c9d4:	04bfffc4 	movi	r18,-1
8111c9d8:	a4400117 	ldw	r17,4(r20)
8111c9dc:	a4000217 	ldw	r16,8(r20)
8111c9e0:	8c7fffc4 	addi	r17,r17,-1
8111c9e4:	88000c16 	blt	r17,zero,8111ca18 <_fwalk_reent+0x8c>
8111c9e8:	84000304 	addi	r16,r16,12
8111c9ec:	8080000b 	ldhu	r2,0(r16)
8111c9f0:	8c7fffc4 	addi	r17,r17,-1
8111c9f4:	817ffd04 	addi	r5,r16,-12
8111c9f8:	b080052e 	bgeu	r22,r2,8111ca10 <_fwalk_reent+0x84>
8111c9fc:	8080008f 	ldh	r2,2(r16)
8111ca00:	9809883a 	mov	r4,r19
8111ca04:	14800226 	beq	r2,r18,8111ca10 <_fwalk_reent+0x84>
8111ca08:	a83ee83a 	callr	r21
8111ca0c:	b8aeb03a 	or	r23,r23,r2
8111ca10:	84001a04 	addi	r16,r16,104
8111ca14:	8cbff51e 	bne	r17,r18,8111c9ec <__reset+0xfb0fc9ec>
8111ca18:	a5000017 	ldw	r20,0(r20)
8111ca1c:	a03fee1e 	bne	r20,zero,8111c9d8 <__reset+0xfb0fc9d8>
8111ca20:	b805883a 	mov	r2,r23
8111ca24:	dfc00817 	ldw	ra,32(sp)
8111ca28:	ddc00717 	ldw	r23,28(sp)
8111ca2c:	dd800617 	ldw	r22,24(sp)
8111ca30:	dd400517 	ldw	r21,20(sp)
8111ca34:	dd000417 	ldw	r20,16(sp)
8111ca38:	dcc00317 	ldw	r19,12(sp)
8111ca3c:	dc800217 	ldw	r18,8(sp)
8111ca40:	dc400117 	ldw	r17,4(sp)
8111ca44:	dc000017 	ldw	r16,0(sp)
8111ca48:	dec00904 	addi	sp,sp,36
8111ca4c:	f800283a 	ret
8111ca50:	002f883a 	mov	r23,zero
8111ca54:	003ff206 	br	8111ca20 <__reset+0xfb0fca20>

8111ca58 <_isatty_r>:
8111ca58:	defffd04 	addi	sp,sp,-12
8111ca5c:	de00012e 	bgeu	sp,et,8111ca64 <_isatty_r+0xc>
8111ca60:	003b68fa 	trap	3
8111ca64:	dc000015 	stw	r16,0(sp)
8111ca68:	04204534 	movhi	r16,33044
8111ca6c:	dc400115 	stw	r17,4(sp)
8111ca70:	8409b604 	addi	r16,r16,9944
8111ca74:	2023883a 	mov	r17,r4
8111ca78:	2809883a 	mov	r4,r5
8111ca7c:	dfc00215 	stw	ra,8(sp)
8111ca80:	80000015 	stw	zero,0(r16)
8111ca84:	1127ba80 	call	81127ba8 <isatty>
8111ca88:	00ffffc4 	movi	r3,-1
8111ca8c:	10c00526 	beq	r2,r3,8111caa4 <_isatty_r+0x4c>
8111ca90:	dfc00217 	ldw	ra,8(sp)
8111ca94:	dc400117 	ldw	r17,4(sp)
8111ca98:	dc000017 	ldw	r16,0(sp)
8111ca9c:	dec00304 	addi	sp,sp,12
8111caa0:	f800283a 	ret
8111caa4:	80c00017 	ldw	r3,0(r16)
8111caa8:	183ff926 	beq	r3,zero,8111ca90 <__reset+0xfb0fca90>
8111caac:	88c00015 	stw	r3,0(r17)
8111cab0:	003ff706 	br	8111ca90 <__reset+0xfb0fca90>

8111cab4 <iswspace>:
8111cab4:	00803fc4 	movi	r2,255
8111cab8:	11000836 	bltu	r2,r4,8111cadc <iswspace+0x28>
8111cabc:	00a04534 	movhi	r2,33044
8111cac0:	10895804 	addi	r2,r2,9568
8111cac4:	10800017 	ldw	r2,0(r2)
8111cac8:	1109883a 	add	r4,r2,r4
8111cacc:	20800043 	ldbu	r2,1(r4)
8111cad0:	1080020c 	andi	r2,r2,8
8111cad4:	10803fcc 	andi	r2,r2,255
8111cad8:	f800283a 	ret
8111cadc:	0005883a 	mov	r2,zero
8111cae0:	f800283a 	ret

8111cae4 <_setlocale_r>:
8111cae4:	30001d26 	beq	r6,zero,8111cb5c <_setlocale_r+0x78>
8111cae8:	01604534 	movhi	r5,33044
8111caec:	defffe04 	addi	sp,sp,-8
8111caf0:	297f9e04 	addi	r5,r5,-392
8111caf4:	3009883a 	mov	r4,r6
8111caf8:	de00012e 	bgeu	sp,et,8111cb00 <_setlocale_r+0x1c>
8111cafc:	003b68fa 	trap	3
8111cb00:	dc000015 	stw	r16,0(sp)
8111cb04:	dfc00115 	stw	ra,4(sp)
8111cb08:	3021883a 	mov	r16,r6
8111cb0c:	111e8300 	call	8111e830 <strcmp>
8111cb10:	1000061e 	bne	r2,zero,8111cb2c <_setlocale_r+0x48>
8111cb14:	00a04534 	movhi	r2,33044
8111cb18:	10bf6d04 	addi	r2,r2,-588
8111cb1c:	dfc00117 	ldw	ra,4(sp)
8111cb20:	dc000017 	ldw	r16,0(sp)
8111cb24:	dec00204 	addi	sp,sp,8
8111cb28:	f800283a 	ret
8111cb2c:	01604534 	movhi	r5,33044
8111cb30:	297f6d04 	addi	r5,r5,-588
8111cb34:	8009883a 	mov	r4,r16
8111cb38:	111e8300 	call	8111e830 <strcmp>
8111cb3c:	103ff526 	beq	r2,zero,8111cb14 <__reset+0xfb0fcb14>
8111cb40:	01604534 	movhi	r5,33044
8111cb44:	297f7704 	addi	r5,r5,-548
8111cb48:	8009883a 	mov	r4,r16
8111cb4c:	111e8300 	call	8111e830 <strcmp>
8111cb50:	103ff026 	beq	r2,zero,8111cb14 <__reset+0xfb0fcb14>
8111cb54:	0005883a 	mov	r2,zero
8111cb58:	003ff006 	br	8111cb1c <__reset+0xfb0fcb1c>
8111cb5c:	00a04534 	movhi	r2,33044
8111cb60:	10bf6d04 	addi	r2,r2,-588
8111cb64:	f800283a 	ret

8111cb68 <__locale_charset>:
8111cb68:	00a04534 	movhi	r2,33044
8111cb6c:	10842204 	addi	r2,r2,4232
8111cb70:	f800283a 	ret

8111cb74 <__locale_mb_cur_max>:
8111cb74:	00a04534 	movhi	r2,33044
8111cb78:	10895d04 	addi	r2,r2,9588
8111cb7c:	10800017 	ldw	r2,0(r2)
8111cb80:	f800283a 	ret

8111cb84 <__locale_msgcharset>:
8111cb84:	00a04534 	movhi	r2,33044
8111cb88:	10841a04 	addi	r2,r2,4200
8111cb8c:	f800283a 	ret

8111cb90 <__locale_cjk_lang>:
8111cb90:	0005883a 	mov	r2,zero
8111cb94:	f800283a 	ret

8111cb98 <_localeconv_r>:
8111cb98:	00a04534 	movhi	r2,33044
8111cb9c:	10842a04 	addi	r2,r2,4264
8111cba0:	f800283a 	ret

8111cba4 <setlocale>:
8111cba4:	00a04534 	movhi	r2,33044
8111cba8:	10895a04 	addi	r2,r2,9576
8111cbac:	280d883a 	mov	r6,r5
8111cbb0:	200b883a 	mov	r5,r4
8111cbb4:	11000017 	ldw	r4,0(r2)
8111cbb8:	111cae41 	jmpi	8111cae4 <_setlocale_r>

8111cbbc <localeconv>:
8111cbbc:	00a04534 	movhi	r2,33044
8111cbc0:	10842a04 	addi	r2,r2,4264
8111cbc4:	f800283a 	ret

8111cbc8 <_lseek_r>:
8111cbc8:	defffd04 	addi	sp,sp,-12
8111cbcc:	de00012e 	bgeu	sp,et,8111cbd4 <_lseek_r+0xc>
8111cbd0:	003b68fa 	trap	3
8111cbd4:	2805883a 	mov	r2,r5
8111cbd8:	dc000015 	stw	r16,0(sp)
8111cbdc:	04204534 	movhi	r16,33044
8111cbe0:	dc400115 	stw	r17,4(sp)
8111cbe4:	300b883a 	mov	r5,r6
8111cbe8:	8409b604 	addi	r16,r16,9944
8111cbec:	2023883a 	mov	r17,r4
8111cbf0:	380d883a 	mov	r6,r7
8111cbf4:	1009883a 	mov	r4,r2
8111cbf8:	dfc00215 	stw	ra,8(sp)
8111cbfc:	80000015 	stw	zero,0(r16)
8111cc00:	11287a40 	call	811287a4 <lseek>
8111cc04:	00ffffc4 	movi	r3,-1
8111cc08:	10c00526 	beq	r2,r3,8111cc20 <_lseek_r+0x58>
8111cc0c:	dfc00217 	ldw	ra,8(sp)
8111cc10:	dc400117 	ldw	r17,4(sp)
8111cc14:	dc000017 	ldw	r16,0(sp)
8111cc18:	dec00304 	addi	sp,sp,12
8111cc1c:	f800283a 	ret
8111cc20:	80c00017 	ldw	r3,0(r16)
8111cc24:	183ff926 	beq	r3,zero,8111cc0c <__reset+0xfb0fcc0c>
8111cc28:	88c00015 	stw	r3,0(r17)
8111cc2c:	003ff706 	br	8111cc0c <__reset+0xfb0fcc0c>

8111cc30 <_mbrtowc_r>:
8111cc30:	defff704 	addi	sp,sp,-36
8111cc34:	00a04534 	movhi	r2,33044
8111cc38:	de00012e 	bgeu	sp,et,8111cc40 <_mbrtowc_r+0x10>
8111cc3c:	003b68fa 	trap	3
8111cc40:	10895e04 	addi	r2,r2,9592
8111cc44:	dc800715 	stw	r18,28(sp)
8111cc48:	dc400615 	stw	r17,24(sp)
8111cc4c:	dc000515 	stw	r16,20(sp)
8111cc50:	dfc00815 	stw	ra,32(sp)
8111cc54:	2021883a 	mov	r16,r4
8111cc58:	dc400917 	ldw	r17,36(sp)
8111cc5c:	14800017 	ldw	r18,0(r2)
8111cc60:	30001626 	beq	r6,zero,8111ccbc <_mbrtowc_r+0x8c>
8111cc64:	d9400215 	stw	r5,8(sp)
8111cc68:	d9800315 	stw	r6,12(sp)
8111cc6c:	d9c00415 	stw	r7,16(sp)
8111cc70:	111cb680 	call	8111cb68 <__locale_charset>
8111cc74:	d9c00417 	ldw	r7,16(sp)
8111cc78:	d9800317 	ldw	r6,12(sp)
8111cc7c:	d9400217 	ldw	r5,8(sp)
8111cc80:	d8800015 	stw	r2,0(sp)
8111cc84:	dc400115 	stw	r17,4(sp)
8111cc88:	8009883a 	mov	r4,r16
8111cc8c:	903ee83a 	callr	r18
8111cc90:	00ffffc4 	movi	r3,-1
8111cc94:	10c0031e 	bne	r2,r3,8111cca4 <_mbrtowc_r+0x74>
8111cc98:	88000015 	stw	zero,0(r17)
8111cc9c:	00c02284 	movi	r3,138
8111cca0:	80c00015 	stw	r3,0(r16)
8111cca4:	dfc00817 	ldw	ra,32(sp)
8111cca8:	dc800717 	ldw	r18,28(sp)
8111ccac:	dc400617 	ldw	r17,24(sp)
8111ccb0:	dc000517 	ldw	r16,20(sp)
8111ccb4:	dec00904 	addi	sp,sp,36
8111ccb8:	f800283a 	ret
8111ccbc:	111cb680 	call	8111cb68 <__locale_charset>
8111ccc0:	01a04534 	movhi	r6,33044
8111ccc4:	31bf7704 	addi	r6,r6,-548
8111ccc8:	dc400115 	stw	r17,4(sp)
8111cccc:	d8800015 	stw	r2,0(sp)
8111ccd0:	01c00044 	movi	r7,1
8111ccd4:	000b883a 	mov	r5,zero
8111ccd8:	8009883a 	mov	r4,r16
8111ccdc:	903ee83a 	callr	r18
8111cce0:	003feb06 	br	8111cc90 <__reset+0xfb0fcc90>

8111cce4 <mbrtowc>:
8111cce4:	defff704 	addi	sp,sp,-36
8111cce8:	00a04534 	movhi	r2,33044
8111ccec:	de00012e 	bgeu	sp,et,8111ccf4 <mbrtowc+0x10>
8111ccf0:	003b68fa 	trap	3
8111ccf4:	10895a04 	addi	r2,r2,9576
8111ccf8:	dc800415 	stw	r18,16(sp)
8111ccfc:	dc400315 	stw	r17,12(sp)
8111cd00:	dfc00815 	stw	ra,32(sp)
8111cd04:	dd400715 	stw	r21,28(sp)
8111cd08:	dd000615 	stw	r20,24(sp)
8111cd0c:	dcc00515 	stw	r19,20(sp)
8111cd10:	dc000215 	stw	r16,8(sp)
8111cd14:	3825883a 	mov	r18,r7
8111cd18:	14400017 	ldw	r17,0(r2)
8111cd1c:	28001c26 	beq	r5,zero,8111cd90 <mbrtowc+0xac>
8111cd20:	00a04534 	movhi	r2,33044
8111cd24:	10895e04 	addi	r2,r2,9592
8111cd28:	15400017 	ldw	r21,0(r2)
8111cd2c:	2821883a 	mov	r16,r5
8111cd30:	2027883a 	mov	r19,r4
8111cd34:	3029883a 	mov	r20,r6
8111cd38:	111cb680 	call	8111cb68 <__locale_charset>
8111cd3c:	d8800015 	stw	r2,0(sp)
8111cd40:	dc800115 	stw	r18,4(sp)
8111cd44:	a00f883a 	mov	r7,r20
8111cd48:	800d883a 	mov	r6,r16
8111cd4c:	980b883a 	mov	r5,r19
8111cd50:	8809883a 	mov	r4,r17
8111cd54:	a83ee83a 	callr	r21
8111cd58:	00ffffc4 	movi	r3,-1
8111cd5c:	10c0031e 	bne	r2,r3,8111cd6c <mbrtowc+0x88>
8111cd60:	90000015 	stw	zero,0(r18)
8111cd64:	00c02284 	movi	r3,138
8111cd68:	88c00015 	stw	r3,0(r17)
8111cd6c:	dfc00817 	ldw	ra,32(sp)
8111cd70:	dd400717 	ldw	r21,28(sp)
8111cd74:	dd000617 	ldw	r20,24(sp)
8111cd78:	dcc00517 	ldw	r19,20(sp)
8111cd7c:	dc800417 	ldw	r18,16(sp)
8111cd80:	dc400317 	ldw	r17,12(sp)
8111cd84:	dc000217 	ldw	r16,8(sp)
8111cd88:	dec00904 	addi	sp,sp,36
8111cd8c:	f800283a 	ret
8111cd90:	00a04534 	movhi	r2,33044
8111cd94:	10895e04 	addi	r2,r2,9592
8111cd98:	14000017 	ldw	r16,0(r2)
8111cd9c:	111cb680 	call	8111cb68 <__locale_charset>
8111cda0:	01a04534 	movhi	r6,33044
8111cda4:	31bf7704 	addi	r6,r6,-548
8111cda8:	dc800115 	stw	r18,4(sp)
8111cdac:	d8800015 	stw	r2,0(sp)
8111cdb0:	01c00044 	movi	r7,1
8111cdb4:	000b883a 	mov	r5,zero
8111cdb8:	8809883a 	mov	r4,r17
8111cdbc:	803ee83a 	callr	r16
8111cdc0:	003fe506 	br	8111cd58 <__reset+0xfb0fcd58>

8111cdc4 <__ascii_mbtowc>:
8111cdc4:	deffff04 	addi	sp,sp,-4
8111cdc8:	de00012e 	bgeu	sp,et,8111cdd0 <__ascii_mbtowc+0xc>
8111cdcc:	003b68fa 	trap	3
8111cdd0:	28000826 	beq	r5,zero,8111cdf4 <__ascii_mbtowc+0x30>
8111cdd4:	30000926 	beq	r6,zero,8111cdfc <__ascii_mbtowc+0x38>
8111cdd8:	38000b26 	beq	r7,zero,8111ce08 <__ascii_mbtowc+0x44>
8111cddc:	30800003 	ldbu	r2,0(r6)
8111cde0:	28800015 	stw	r2,0(r5)
8111cde4:	30800003 	ldbu	r2,0(r6)
8111cde8:	1004c03a 	cmpne	r2,r2,zero
8111cdec:	dec00104 	addi	sp,sp,4
8111cdf0:	f800283a 	ret
8111cdf4:	d80b883a 	mov	r5,sp
8111cdf8:	303ff71e 	bne	r6,zero,8111cdd8 <__reset+0xfb0fcdd8>
8111cdfc:	0005883a 	mov	r2,zero
8111ce00:	dec00104 	addi	sp,sp,4
8111ce04:	f800283a 	ret
8111ce08:	00bfff84 	movi	r2,-2
8111ce0c:	003ff706 	br	8111cdec <__reset+0xfb0fcdec>

8111ce10 <_mbtowc_r>:
8111ce10:	00a04534 	movhi	r2,33044
8111ce14:	defff804 	addi	sp,sp,-32
8111ce18:	10895e04 	addi	r2,r2,9592
8111ce1c:	de00012e 	bgeu	sp,et,8111ce24 <_mbtowc_r+0x14>
8111ce20:	003b68fa 	trap	3
8111ce24:	dfc00715 	stw	ra,28(sp)
8111ce28:	dc000615 	stw	r16,24(sp)
8111ce2c:	14000017 	ldw	r16,0(r2)
8111ce30:	d9000215 	stw	r4,8(sp)
8111ce34:	d9400315 	stw	r5,12(sp)
8111ce38:	d9800415 	stw	r6,16(sp)
8111ce3c:	d9c00515 	stw	r7,20(sp)
8111ce40:	111cb680 	call	8111cb68 <__locale_charset>
8111ce44:	d8800015 	stw	r2,0(sp)
8111ce48:	d8800817 	ldw	r2,32(sp)
8111ce4c:	d9c00517 	ldw	r7,20(sp)
8111ce50:	d9800417 	ldw	r6,16(sp)
8111ce54:	d9400317 	ldw	r5,12(sp)
8111ce58:	d9000217 	ldw	r4,8(sp)
8111ce5c:	d8800115 	stw	r2,4(sp)
8111ce60:	803ee83a 	callr	r16
8111ce64:	dfc00717 	ldw	ra,28(sp)
8111ce68:	dc000617 	ldw	r16,24(sp)
8111ce6c:	dec00804 	addi	sp,sp,32
8111ce70:	f800283a 	ret

8111ce74 <memchr>:
8111ce74:	208000cc 	andi	r2,r4,3
8111ce78:	280f883a 	mov	r7,r5
8111ce7c:	10003426 	beq	r2,zero,8111cf50 <memchr+0xdc>
8111ce80:	30bfffc4 	addi	r2,r6,-1
8111ce84:	30001a26 	beq	r6,zero,8111cef0 <memchr+0x7c>
8111ce88:	20c00003 	ldbu	r3,0(r4)
8111ce8c:	29803fcc 	andi	r6,r5,255
8111ce90:	30c0051e 	bne	r6,r3,8111cea8 <memchr+0x34>
8111ce94:	00001806 	br	8111cef8 <memchr+0x84>
8111ce98:	10001526 	beq	r2,zero,8111cef0 <memchr+0x7c>
8111ce9c:	20c00003 	ldbu	r3,0(r4)
8111cea0:	10bfffc4 	addi	r2,r2,-1
8111cea4:	30c01426 	beq	r6,r3,8111cef8 <memchr+0x84>
8111cea8:	21000044 	addi	r4,r4,1
8111ceac:	20c000cc 	andi	r3,r4,3
8111ceb0:	183ff91e 	bne	r3,zero,8111ce98 <__reset+0xfb0fce98>
8111ceb4:	020000c4 	movi	r8,3
8111ceb8:	40801136 	bltu	r8,r2,8111cf00 <memchr+0x8c>
8111cebc:	10000c26 	beq	r2,zero,8111cef0 <memchr+0x7c>
8111cec0:	20c00003 	ldbu	r3,0(r4)
8111cec4:	29403fcc 	andi	r5,r5,255
8111cec8:	28c00b26 	beq	r5,r3,8111cef8 <memchr+0x84>
8111cecc:	20c00044 	addi	r3,r4,1
8111ced0:	39803fcc 	andi	r6,r7,255
8111ced4:	2089883a 	add	r4,r4,r2
8111ced8:	00000306 	br	8111cee8 <memchr+0x74>
8111cedc:	18c00044 	addi	r3,r3,1
8111cee0:	197fffc3 	ldbu	r5,-1(r3)
8111cee4:	31400526 	beq	r6,r5,8111cefc <memchr+0x88>
8111cee8:	1805883a 	mov	r2,r3
8111ceec:	20fffb1e 	bne	r4,r3,8111cedc <__reset+0xfb0fcedc>
8111cef0:	0005883a 	mov	r2,zero
8111cef4:	f800283a 	ret
8111cef8:	2005883a 	mov	r2,r4
8111cefc:	f800283a 	ret
8111cf00:	28c03fcc 	andi	r3,r5,255
8111cf04:	1812923a 	slli	r9,r3,8
8111cf08:	02ffbff4 	movhi	r11,65279
8111cf0c:	02a02074 	movhi	r10,32897
8111cf10:	48d2b03a 	or	r9,r9,r3
8111cf14:	4806943a 	slli	r3,r9,16
8111cf18:	5affbfc4 	addi	r11,r11,-257
8111cf1c:	52a02004 	addi	r10,r10,-32640
8111cf20:	48d2b03a 	or	r9,r9,r3
8111cf24:	20c00017 	ldw	r3,0(r4)
8111cf28:	48c6f03a 	xor	r3,r9,r3
8111cf2c:	1acd883a 	add	r6,r3,r11
8111cf30:	00c6303a 	nor	r3,zero,r3
8111cf34:	30c6703a 	and	r3,r6,r3
8111cf38:	1a86703a 	and	r3,r3,r10
8111cf3c:	183fe01e 	bne	r3,zero,8111cec0 <__reset+0xfb0fcec0>
8111cf40:	10bfff04 	addi	r2,r2,-4
8111cf44:	21000104 	addi	r4,r4,4
8111cf48:	40bff636 	bltu	r8,r2,8111cf24 <__reset+0xfb0fcf24>
8111cf4c:	003fdb06 	br	8111cebc <__reset+0xfb0fcebc>
8111cf50:	3005883a 	mov	r2,r6
8111cf54:	003fd706 	br	8111ceb4 <__reset+0xfb0fceb4>

8111cf58 <memmove>:
8111cf58:	2005883a 	mov	r2,r4
8111cf5c:	29000b2e 	bgeu	r5,r4,8111cf8c <memmove+0x34>
8111cf60:	298f883a 	add	r7,r5,r6
8111cf64:	21c0092e 	bgeu	r4,r7,8111cf8c <memmove+0x34>
8111cf68:	2187883a 	add	r3,r4,r6
8111cf6c:	198bc83a 	sub	r5,r3,r6
8111cf70:	30004826 	beq	r6,zero,8111d094 <memmove+0x13c>
8111cf74:	39ffffc4 	addi	r7,r7,-1
8111cf78:	39000003 	ldbu	r4,0(r7)
8111cf7c:	18ffffc4 	addi	r3,r3,-1
8111cf80:	19000005 	stb	r4,0(r3)
8111cf84:	28fffb1e 	bne	r5,r3,8111cf74 <__reset+0xfb0fcf74>
8111cf88:	f800283a 	ret
8111cf8c:	00c003c4 	movi	r3,15
8111cf90:	1980412e 	bgeu	r3,r6,8111d098 <memmove+0x140>
8111cf94:	2886b03a 	or	r3,r5,r2
8111cf98:	18c000cc 	andi	r3,r3,3
8111cf9c:	1800401e 	bne	r3,zero,8111d0a0 <memmove+0x148>
8111cfa0:	33fffc04 	addi	r15,r6,-16
8111cfa4:	781ed13a 	srli	r15,r15,4
8111cfa8:	28c00104 	addi	r3,r5,4
8111cfac:	13400104 	addi	r13,r2,4
8111cfb0:	781c913a 	slli	r14,r15,4
8111cfb4:	2b000204 	addi	r12,r5,8
8111cfb8:	12c00204 	addi	r11,r2,8
8111cfbc:	73800504 	addi	r14,r14,20
8111cfc0:	2a800304 	addi	r10,r5,12
8111cfc4:	12400304 	addi	r9,r2,12
8111cfc8:	2b9d883a 	add	r14,r5,r14
8111cfcc:	2811883a 	mov	r8,r5
8111cfd0:	100f883a 	mov	r7,r2
8111cfd4:	41000017 	ldw	r4,0(r8)
8111cfd8:	39c00404 	addi	r7,r7,16
8111cfdc:	18c00404 	addi	r3,r3,16
8111cfe0:	393ffc15 	stw	r4,-16(r7)
8111cfe4:	193ffc17 	ldw	r4,-16(r3)
8111cfe8:	6b400404 	addi	r13,r13,16
8111cfec:	5ac00404 	addi	r11,r11,16
8111cff0:	693ffc15 	stw	r4,-16(r13)
8111cff4:	61000017 	ldw	r4,0(r12)
8111cff8:	4a400404 	addi	r9,r9,16
8111cffc:	42000404 	addi	r8,r8,16
8111d000:	593ffc15 	stw	r4,-16(r11)
8111d004:	51000017 	ldw	r4,0(r10)
8111d008:	63000404 	addi	r12,r12,16
8111d00c:	52800404 	addi	r10,r10,16
8111d010:	493ffc15 	stw	r4,-16(r9)
8111d014:	1bbfef1e 	bne	r3,r14,8111cfd4 <__reset+0xfb0fcfd4>
8111d018:	79000044 	addi	r4,r15,1
8111d01c:	2008913a 	slli	r4,r4,4
8111d020:	328003cc 	andi	r10,r6,15
8111d024:	02c000c4 	movi	r11,3
8111d028:	1107883a 	add	r3,r2,r4
8111d02c:	290b883a 	add	r5,r5,r4
8111d030:	5a801e2e 	bgeu	r11,r10,8111d0ac <memmove+0x154>
8111d034:	1813883a 	mov	r9,r3
8111d038:	2811883a 	mov	r8,r5
8111d03c:	500f883a 	mov	r7,r10
8111d040:	41000017 	ldw	r4,0(r8)
8111d044:	4a400104 	addi	r9,r9,4
8111d048:	39ffff04 	addi	r7,r7,-4
8111d04c:	493fff15 	stw	r4,-4(r9)
8111d050:	42000104 	addi	r8,r8,4
8111d054:	59fffa36 	bltu	r11,r7,8111d040 <__reset+0xfb0fd040>
8111d058:	513fff04 	addi	r4,r10,-4
8111d05c:	2008d0ba 	srli	r4,r4,2
8111d060:	318000cc 	andi	r6,r6,3
8111d064:	21000044 	addi	r4,r4,1
8111d068:	2109883a 	add	r4,r4,r4
8111d06c:	2109883a 	add	r4,r4,r4
8111d070:	1907883a 	add	r3,r3,r4
8111d074:	290b883a 	add	r5,r5,r4
8111d078:	30000b26 	beq	r6,zero,8111d0a8 <memmove+0x150>
8111d07c:	198d883a 	add	r6,r3,r6
8111d080:	29c00003 	ldbu	r7,0(r5)
8111d084:	18c00044 	addi	r3,r3,1
8111d088:	29400044 	addi	r5,r5,1
8111d08c:	19ffffc5 	stb	r7,-1(r3)
8111d090:	19bffb1e 	bne	r3,r6,8111d080 <__reset+0xfb0fd080>
8111d094:	f800283a 	ret
8111d098:	1007883a 	mov	r3,r2
8111d09c:	003ff606 	br	8111d078 <__reset+0xfb0fd078>
8111d0a0:	1007883a 	mov	r3,r2
8111d0a4:	003ff506 	br	8111d07c <__reset+0xfb0fd07c>
8111d0a8:	f800283a 	ret
8111d0ac:	500d883a 	mov	r6,r10
8111d0b0:	003ff106 	br	8111d078 <__reset+0xfb0fd078>

8111d0b4 <_Balloc>:
8111d0b4:	defffc04 	addi	sp,sp,-16
8111d0b8:	de00012e 	bgeu	sp,et,8111d0c0 <_Balloc+0xc>
8111d0bc:	003b68fa 	trap	3
8111d0c0:	20801317 	ldw	r2,76(r4)
8111d0c4:	dc400115 	stw	r17,4(sp)
8111d0c8:	dc000015 	stw	r16,0(sp)
8111d0cc:	dfc00315 	stw	ra,12(sp)
8111d0d0:	dc800215 	stw	r18,8(sp)
8111d0d4:	2023883a 	mov	r17,r4
8111d0d8:	2821883a 	mov	r16,r5
8111d0dc:	10000f26 	beq	r2,zero,8111d11c <_Balloc+0x68>
8111d0e0:	8407883a 	add	r3,r16,r16
8111d0e4:	18c7883a 	add	r3,r3,r3
8111d0e8:	10c7883a 	add	r3,r2,r3
8111d0ec:	18800017 	ldw	r2,0(r3)
8111d0f0:	10001126 	beq	r2,zero,8111d138 <_Balloc+0x84>
8111d0f4:	11000017 	ldw	r4,0(r2)
8111d0f8:	19000015 	stw	r4,0(r3)
8111d0fc:	10000415 	stw	zero,16(r2)
8111d100:	10000315 	stw	zero,12(r2)
8111d104:	dfc00317 	ldw	ra,12(sp)
8111d108:	dc800217 	ldw	r18,8(sp)
8111d10c:	dc400117 	ldw	r17,4(sp)
8111d110:	dc000017 	ldw	r16,0(sp)
8111d114:	dec00404 	addi	sp,sp,16
8111d118:	f800283a 	ret
8111d11c:	01800844 	movi	r6,33
8111d120:	01400104 	movi	r5,4
8111d124:	11235dc0 	call	811235dc <_calloc_r>
8111d128:	88801315 	stw	r2,76(r17)
8111d12c:	103fec1e 	bne	r2,zero,8111d0e0 <__reset+0xfb0fd0e0>
8111d130:	0005883a 	mov	r2,zero
8111d134:	003ff306 	br	8111d104 <__reset+0xfb0fd104>
8111d138:	01400044 	movi	r5,1
8111d13c:	2c24983a 	sll	r18,r5,r16
8111d140:	8809883a 	mov	r4,r17
8111d144:	91800144 	addi	r6,r18,5
8111d148:	318d883a 	add	r6,r6,r6
8111d14c:	318d883a 	add	r6,r6,r6
8111d150:	11235dc0 	call	811235dc <_calloc_r>
8111d154:	103ff626 	beq	r2,zero,8111d130 <__reset+0xfb0fd130>
8111d158:	14000115 	stw	r16,4(r2)
8111d15c:	14800215 	stw	r18,8(r2)
8111d160:	003fe606 	br	8111d0fc <__reset+0xfb0fd0fc>

8111d164 <_Bfree>:
8111d164:	28000826 	beq	r5,zero,8111d188 <_Bfree+0x24>
8111d168:	28c00117 	ldw	r3,4(r5)
8111d16c:	20801317 	ldw	r2,76(r4)
8111d170:	18c7883a 	add	r3,r3,r3
8111d174:	18c7883a 	add	r3,r3,r3
8111d178:	10c5883a 	add	r2,r2,r3
8111d17c:	10c00017 	ldw	r3,0(r2)
8111d180:	28c00015 	stw	r3,0(r5)
8111d184:	11400015 	stw	r5,0(r2)
8111d188:	f800283a 	ret

8111d18c <__multadd>:
8111d18c:	defffa04 	addi	sp,sp,-24
8111d190:	de00012e 	bgeu	sp,et,8111d198 <__multadd+0xc>
8111d194:	003b68fa 	trap	3
8111d198:	0011883a 	mov	r8,zero
8111d19c:	dc800315 	stw	r18,12(sp)
8111d1a0:	dc400215 	stw	r17,8(sp)
8111d1a4:	dc000115 	stw	r16,4(sp)
8111d1a8:	2823883a 	mov	r17,r5
8111d1ac:	2c000417 	ldw	r16,16(r5)
8111d1b0:	dfc00515 	stw	ra,20(sp)
8111d1b4:	dcc00415 	stw	r19,16(sp)
8111d1b8:	2025883a 	mov	r18,r4
8111d1bc:	29400504 	addi	r5,r5,20
8111d1c0:	28c00017 	ldw	r3,0(r5)
8111d1c4:	29400104 	addi	r5,r5,4
8111d1c8:	42000044 	addi	r8,r8,1
8111d1cc:	18bfffcc 	andi	r2,r3,65535
8111d1d0:	1185383a 	mul	r2,r2,r6
8111d1d4:	1806d43a 	srli	r3,r3,16
8111d1d8:	11cf883a 	add	r7,r2,r7
8111d1dc:	3808d43a 	srli	r4,r7,16
8111d1e0:	1987383a 	mul	r3,r3,r6
8111d1e4:	38bfffcc 	andi	r2,r7,65535
8111d1e8:	1907883a 	add	r3,r3,r4
8111d1ec:	1808943a 	slli	r4,r3,16
8111d1f0:	180ed43a 	srli	r7,r3,16
8111d1f4:	2085883a 	add	r2,r4,r2
8111d1f8:	28bfff15 	stw	r2,-4(r5)
8111d1fc:	443ff016 	blt	r8,r16,8111d1c0 <__reset+0xfb0fd1c0>
8111d200:	38000926 	beq	r7,zero,8111d228 <__multadd+0x9c>
8111d204:	88800217 	ldw	r2,8(r17)
8111d208:	80800f0e 	bge	r16,r2,8111d248 <__multadd+0xbc>
8111d20c:	80800144 	addi	r2,r16,5
8111d210:	1085883a 	add	r2,r2,r2
8111d214:	1085883a 	add	r2,r2,r2
8111d218:	8885883a 	add	r2,r17,r2
8111d21c:	11c00015 	stw	r7,0(r2)
8111d220:	84000044 	addi	r16,r16,1
8111d224:	8c000415 	stw	r16,16(r17)
8111d228:	8805883a 	mov	r2,r17
8111d22c:	dfc00517 	ldw	ra,20(sp)
8111d230:	dcc00417 	ldw	r19,16(sp)
8111d234:	dc800317 	ldw	r18,12(sp)
8111d238:	dc400217 	ldw	r17,8(sp)
8111d23c:	dc000117 	ldw	r16,4(sp)
8111d240:	dec00604 	addi	sp,sp,24
8111d244:	f800283a 	ret
8111d248:	89400117 	ldw	r5,4(r17)
8111d24c:	9009883a 	mov	r4,r18
8111d250:	d9c00015 	stw	r7,0(sp)
8111d254:	29400044 	addi	r5,r5,1
8111d258:	111d0b40 	call	8111d0b4 <_Balloc>
8111d25c:	89800417 	ldw	r6,16(r17)
8111d260:	89400304 	addi	r5,r17,12
8111d264:	11000304 	addi	r4,r2,12
8111d268:	31800084 	addi	r6,r6,2
8111d26c:	318d883a 	add	r6,r6,r6
8111d270:	318d883a 	add	r6,r6,r6
8111d274:	1027883a 	mov	r19,r2
8111d278:	1112e840 	call	81112e84 <memcpy>
8111d27c:	d9c00017 	ldw	r7,0(sp)
8111d280:	88000a26 	beq	r17,zero,8111d2ac <__multadd+0x120>
8111d284:	88c00117 	ldw	r3,4(r17)
8111d288:	90801317 	ldw	r2,76(r18)
8111d28c:	18c7883a 	add	r3,r3,r3
8111d290:	18c7883a 	add	r3,r3,r3
8111d294:	10c5883a 	add	r2,r2,r3
8111d298:	10c00017 	ldw	r3,0(r2)
8111d29c:	88c00015 	stw	r3,0(r17)
8111d2a0:	14400015 	stw	r17,0(r2)
8111d2a4:	9823883a 	mov	r17,r19
8111d2a8:	003fd806 	br	8111d20c <__reset+0xfb0fd20c>
8111d2ac:	9823883a 	mov	r17,r19
8111d2b0:	003fd606 	br	8111d20c <__reset+0xfb0fd20c>

8111d2b4 <__s2b>:
8111d2b4:	defff904 	addi	sp,sp,-28
8111d2b8:	de00012e 	bgeu	sp,et,8111d2c0 <__s2b+0xc>
8111d2bc:	003b68fa 	trap	3
8111d2c0:	dc400115 	stw	r17,4(sp)
8111d2c4:	dc000015 	stw	r16,0(sp)
8111d2c8:	2023883a 	mov	r17,r4
8111d2cc:	2821883a 	mov	r16,r5
8111d2d0:	39000204 	addi	r4,r7,8
8111d2d4:	01400244 	movi	r5,9
8111d2d8:	dcc00315 	stw	r19,12(sp)
8111d2dc:	dc800215 	stw	r18,8(sp)
8111d2e0:	dfc00615 	stw	ra,24(sp)
8111d2e4:	dd400515 	stw	r21,20(sp)
8111d2e8:	dd000415 	stw	r20,16(sp)
8111d2ec:	3825883a 	mov	r18,r7
8111d2f0:	3027883a 	mov	r19,r6
8111d2f4:	11253740 	call	81125374 <__divsi3>
8111d2f8:	00c00044 	movi	r3,1
8111d2fc:	000b883a 	mov	r5,zero
8111d300:	1880030e 	bge	r3,r2,8111d310 <__s2b+0x5c>
8111d304:	18c7883a 	add	r3,r3,r3
8111d308:	29400044 	addi	r5,r5,1
8111d30c:	18bffd16 	blt	r3,r2,8111d304 <__reset+0xfb0fd304>
8111d310:	8809883a 	mov	r4,r17
8111d314:	111d0b40 	call	8111d0b4 <_Balloc>
8111d318:	d8c00717 	ldw	r3,28(sp)
8111d31c:	10c00515 	stw	r3,20(r2)
8111d320:	00c00044 	movi	r3,1
8111d324:	10c00415 	stw	r3,16(r2)
8111d328:	00c00244 	movi	r3,9
8111d32c:	1cc0210e 	bge	r3,r19,8111d3b4 <__s2b+0x100>
8111d330:	80eb883a 	add	r21,r16,r3
8111d334:	a829883a 	mov	r20,r21
8111d338:	84e1883a 	add	r16,r16,r19
8111d33c:	a1c00007 	ldb	r7,0(r20)
8111d340:	01800284 	movi	r6,10
8111d344:	a5000044 	addi	r20,r20,1
8111d348:	100b883a 	mov	r5,r2
8111d34c:	39fff404 	addi	r7,r7,-48
8111d350:	8809883a 	mov	r4,r17
8111d354:	111d18c0 	call	8111d18c <__multadd>
8111d358:	a43ff81e 	bne	r20,r16,8111d33c <__reset+0xfb0fd33c>
8111d35c:	ace1883a 	add	r16,r21,r19
8111d360:	843ffe04 	addi	r16,r16,-8
8111d364:	9c800a0e 	bge	r19,r18,8111d390 <__s2b+0xdc>
8111d368:	94e5c83a 	sub	r18,r18,r19
8111d36c:	84a5883a 	add	r18,r16,r18
8111d370:	81c00007 	ldb	r7,0(r16)
8111d374:	01800284 	movi	r6,10
8111d378:	84000044 	addi	r16,r16,1
8111d37c:	100b883a 	mov	r5,r2
8111d380:	39fff404 	addi	r7,r7,-48
8111d384:	8809883a 	mov	r4,r17
8111d388:	111d18c0 	call	8111d18c <__multadd>
8111d38c:	84bff81e 	bne	r16,r18,8111d370 <__reset+0xfb0fd370>
8111d390:	dfc00617 	ldw	ra,24(sp)
8111d394:	dd400517 	ldw	r21,20(sp)
8111d398:	dd000417 	ldw	r20,16(sp)
8111d39c:	dcc00317 	ldw	r19,12(sp)
8111d3a0:	dc800217 	ldw	r18,8(sp)
8111d3a4:	dc400117 	ldw	r17,4(sp)
8111d3a8:	dc000017 	ldw	r16,0(sp)
8111d3ac:	dec00704 	addi	sp,sp,28
8111d3b0:	f800283a 	ret
8111d3b4:	84000284 	addi	r16,r16,10
8111d3b8:	1827883a 	mov	r19,r3
8111d3bc:	003fe906 	br	8111d364 <__reset+0xfb0fd364>

8111d3c0 <__hi0bits>:
8111d3c0:	20bfffec 	andhi	r2,r4,65535
8111d3c4:	1000141e 	bne	r2,zero,8111d418 <__hi0bits+0x58>
8111d3c8:	2008943a 	slli	r4,r4,16
8111d3cc:	00800404 	movi	r2,16
8111d3d0:	20ffc02c 	andhi	r3,r4,65280
8111d3d4:	1800021e 	bne	r3,zero,8111d3e0 <__hi0bits+0x20>
8111d3d8:	2008923a 	slli	r4,r4,8
8111d3dc:	10800204 	addi	r2,r2,8
8111d3e0:	20fc002c 	andhi	r3,r4,61440
8111d3e4:	1800021e 	bne	r3,zero,8111d3f0 <__hi0bits+0x30>
8111d3e8:	2008913a 	slli	r4,r4,4
8111d3ec:	10800104 	addi	r2,r2,4
8111d3f0:	20f0002c 	andhi	r3,r4,49152
8111d3f4:	1800031e 	bne	r3,zero,8111d404 <__hi0bits+0x44>
8111d3f8:	2109883a 	add	r4,r4,r4
8111d3fc:	10800084 	addi	r2,r2,2
8111d400:	2109883a 	add	r4,r4,r4
8111d404:	20000316 	blt	r4,zero,8111d414 <__hi0bits+0x54>
8111d408:	2110002c 	andhi	r4,r4,16384
8111d40c:	2000041e 	bne	r4,zero,8111d420 <__hi0bits+0x60>
8111d410:	00800804 	movi	r2,32
8111d414:	f800283a 	ret
8111d418:	0005883a 	mov	r2,zero
8111d41c:	003fec06 	br	8111d3d0 <__reset+0xfb0fd3d0>
8111d420:	10800044 	addi	r2,r2,1
8111d424:	f800283a 	ret

8111d428 <__lo0bits>:
8111d428:	20c00017 	ldw	r3,0(r4)
8111d42c:	188001cc 	andi	r2,r3,7
8111d430:	10000826 	beq	r2,zero,8111d454 <__lo0bits+0x2c>
8111d434:	1880004c 	andi	r2,r3,1
8111d438:	1000211e 	bne	r2,zero,8111d4c0 <__lo0bits+0x98>
8111d43c:	1880008c 	andi	r2,r3,2
8111d440:	1000211e 	bne	r2,zero,8111d4c8 <__lo0bits+0xa0>
8111d444:	1806d0ba 	srli	r3,r3,2
8111d448:	00800084 	movi	r2,2
8111d44c:	20c00015 	stw	r3,0(r4)
8111d450:	f800283a 	ret
8111d454:	18bfffcc 	andi	r2,r3,65535
8111d458:	10001326 	beq	r2,zero,8111d4a8 <__lo0bits+0x80>
8111d45c:	0005883a 	mov	r2,zero
8111d460:	19403fcc 	andi	r5,r3,255
8111d464:	2800021e 	bne	r5,zero,8111d470 <__lo0bits+0x48>
8111d468:	1806d23a 	srli	r3,r3,8
8111d46c:	10800204 	addi	r2,r2,8
8111d470:	194003cc 	andi	r5,r3,15
8111d474:	2800021e 	bne	r5,zero,8111d480 <__lo0bits+0x58>
8111d478:	1806d13a 	srli	r3,r3,4
8111d47c:	10800104 	addi	r2,r2,4
8111d480:	194000cc 	andi	r5,r3,3
8111d484:	2800021e 	bne	r5,zero,8111d490 <__lo0bits+0x68>
8111d488:	1806d0ba 	srli	r3,r3,2
8111d48c:	10800084 	addi	r2,r2,2
8111d490:	1940004c 	andi	r5,r3,1
8111d494:	2800081e 	bne	r5,zero,8111d4b8 <__lo0bits+0x90>
8111d498:	1806d07a 	srli	r3,r3,1
8111d49c:	1800051e 	bne	r3,zero,8111d4b4 <__lo0bits+0x8c>
8111d4a0:	00800804 	movi	r2,32
8111d4a4:	f800283a 	ret
8111d4a8:	1806d43a 	srli	r3,r3,16
8111d4ac:	00800404 	movi	r2,16
8111d4b0:	003feb06 	br	8111d460 <__reset+0xfb0fd460>
8111d4b4:	10800044 	addi	r2,r2,1
8111d4b8:	20c00015 	stw	r3,0(r4)
8111d4bc:	f800283a 	ret
8111d4c0:	0005883a 	mov	r2,zero
8111d4c4:	f800283a 	ret
8111d4c8:	1806d07a 	srli	r3,r3,1
8111d4cc:	00800044 	movi	r2,1
8111d4d0:	20c00015 	stw	r3,0(r4)
8111d4d4:	f800283a 	ret

8111d4d8 <__i2b>:
8111d4d8:	defffd04 	addi	sp,sp,-12
8111d4dc:	de00012e 	bgeu	sp,et,8111d4e4 <__i2b+0xc>
8111d4e0:	003b68fa 	trap	3
8111d4e4:	dc000015 	stw	r16,0(sp)
8111d4e8:	04000044 	movi	r16,1
8111d4ec:	dc400115 	stw	r17,4(sp)
8111d4f0:	2823883a 	mov	r17,r5
8111d4f4:	800b883a 	mov	r5,r16
8111d4f8:	dfc00215 	stw	ra,8(sp)
8111d4fc:	111d0b40 	call	8111d0b4 <_Balloc>
8111d500:	14400515 	stw	r17,20(r2)
8111d504:	14000415 	stw	r16,16(r2)
8111d508:	dfc00217 	ldw	ra,8(sp)
8111d50c:	dc400117 	ldw	r17,4(sp)
8111d510:	dc000017 	ldw	r16,0(sp)
8111d514:	dec00304 	addi	sp,sp,12
8111d518:	f800283a 	ret

8111d51c <__multiply>:
8111d51c:	defffa04 	addi	sp,sp,-24
8111d520:	de00012e 	bgeu	sp,et,8111d528 <__multiply+0xc>
8111d524:	003b68fa 	trap	3
8111d528:	dcc00315 	stw	r19,12(sp)
8111d52c:	dc800215 	stw	r18,8(sp)
8111d530:	34c00417 	ldw	r19,16(r6)
8111d534:	2c800417 	ldw	r18,16(r5)
8111d538:	dd000415 	stw	r20,16(sp)
8111d53c:	dc400115 	stw	r17,4(sp)
8111d540:	dfc00515 	stw	ra,20(sp)
8111d544:	dc000015 	stw	r16,0(sp)
8111d548:	2829883a 	mov	r20,r5
8111d54c:	3023883a 	mov	r17,r6
8111d550:	94c0050e 	bge	r18,r19,8111d568 <__multiply+0x4c>
8111d554:	9007883a 	mov	r3,r18
8111d558:	3029883a 	mov	r20,r6
8111d55c:	9825883a 	mov	r18,r19
8111d560:	2823883a 	mov	r17,r5
8111d564:	1827883a 	mov	r19,r3
8111d568:	a0800217 	ldw	r2,8(r20)
8111d56c:	94e1883a 	add	r16,r18,r19
8111d570:	a1400117 	ldw	r5,4(r20)
8111d574:	1400010e 	bge	r2,r16,8111d57c <__multiply+0x60>
8111d578:	29400044 	addi	r5,r5,1
8111d57c:	111d0b40 	call	8111d0b4 <_Balloc>
8111d580:	8415883a 	add	r10,r16,r16
8111d584:	12c00504 	addi	r11,r2,20
8111d588:	5295883a 	add	r10,r10,r10
8111d58c:	5a95883a 	add	r10,r11,r10
8111d590:	5807883a 	mov	r3,r11
8111d594:	5a80032e 	bgeu	r11,r10,8111d5a4 <__multiply+0x88>
8111d598:	18000015 	stw	zero,0(r3)
8111d59c:	18c00104 	addi	r3,r3,4
8111d5a0:	1abffd36 	bltu	r3,r10,8111d598 <__reset+0xfb0fd598>
8111d5a4:	9ce7883a 	add	r19,r19,r19
8111d5a8:	94a5883a 	add	r18,r18,r18
8111d5ac:	89800504 	addi	r6,r17,20
8111d5b0:	9ce7883a 	add	r19,r19,r19
8111d5b4:	a3400504 	addi	r13,r20,20
8111d5b8:	94a5883a 	add	r18,r18,r18
8111d5bc:	34d9883a 	add	r12,r6,r19
8111d5c0:	6c93883a 	add	r9,r13,r18
8111d5c4:	3300422e 	bgeu	r6,r12,8111d6d0 <__multiply+0x1b4>
8111d5c8:	37c00017 	ldw	ra,0(r6)
8111d5cc:	fbffffcc 	andi	r15,ra,65535
8111d5d0:	78001b26 	beq	r15,zero,8111d640 <__multiply+0x124>
8111d5d4:	5811883a 	mov	r8,r11
8111d5d8:	681d883a 	mov	r14,r13
8111d5dc:	000f883a 	mov	r7,zero
8111d5e0:	71000017 	ldw	r4,0(r14)
8111d5e4:	40c00017 	ldw	r3,0(r8)
8111d5e8:	73800104 	addi	r14,r14,4
8111d5ec:	217fffcc 	andi	r5,r4,65535
8111d5f0:	2bcb383a 	mul	r5,r5,r15
8111d5f4:	2008d43a 	srli	r4,r4,16
8111d5f8:	1c7fffcc 	andi	r17,r3,65535
8111d5fc:	2c4b883a 	add	r5,r5,r17
8111d600:	29cb883a 	add	r5,r5,r7
8111d604:	23c9383a 	mul	r4,r4,r15
8111d608:	1806d43a 	srli	r3,r3,16
8111d60c:	280ed43a 	srli	r7,r5,16
8111d610:	297fffcc 	andi	r5,r5,65535
8111d614:	20c7883a 	add	r3,r4,r3
8111d618:	19c7883a 	add	r3,r3,r7
8111d61c:	1808943a 	slli	r4,r3,16
8111d620:	4023883a 	mov	r17,r8
8111d624:	180ed43a 	srli	r7,r3,16
8111d628:	214ab03a 	or	r5,r4,r5
8111d62c:	41400015 	stw	r5,0(r8)
8111d630:	42000104 	addi	r8,r8,4
8111d634:	727fea36 	bltu	r14,r9,8111d5e0 <__reset+0xfb0fd5e0>
8111d638:	89c00115 	stw	r7,4(r17)
8111d63c:	37c00017 	ldw	ra,0(r6)
8111d640:	f83ed43a 	srli	ra,ra,16
8111d644:	f8001f26 	beq	ra,zero,8111d6c4 <__multiply+0x1a8>
8111d648:	58c00017 	ldw	r3,0(r11)
8111d64c:	681d883a 	mov	r14,r13
8111d650:	581f883a 	mov	r15,r11
8111d654:	1811883a 	mov	r8,r3
8111d658:	5825883a 	mov	r18,r11
8111d65c:	000f883a 	mov	r7,zero
8111d660:	00000106 	br	8111d668 <__multiply+0x14c>
8111d664:	8825883a 	mov	r18,r17
8111d668:	7140000b 	ldhu	r5,0(r14)
8111d66c:	4010d43a 	srli	r8,r8,16
8111d670:	193fffcc 	andi	r4,r3,65535
8111d674:	2fcb383a 	mul	r5,r5,ra
8111d678:	7bc00104 	addi	r15,r15,4
8111d67c:	73800104 	addi	r14,r14,4
8111d680:	2a0b883a 	add	r5,r5,r8
8111d684:	29cb883a 	add	r5,r5,r7
8111d688:	2806943a 	slli	r3,r5,16
8111d68c:	94400104 	addi	r17,r18,4
8111d690:	280ad43a 	srli	r5,r5,16
8111d694:	1908b03a 	or	r4,r3,r4
8111d698:	793fff15 	stw	r4,-4(r15)
8111d69c:	70ffff17 	ldw	r3,-4(r14)
8111d6a0:	8a000017 	ldw	r8,0(r17)
8111d6a4:	1806d43a 	srli	r3,r3,16
8111d6a8:	413fffcc 	andi	r4,r8,65535
8111d6ac:	1fc7383a 	mul	r3,r3,ra
8111d6b0:	1907883a 	add	r3,r3,r4
8111d6b4:	1947883a 	add	r3,r3,r5
8111d6b8:	180ed43a 	srli	r7,r3,16
8111d6bc:	727fe936 	bltu	r14,r9,8111d664 <__reset+0xfb0fd664>
8111d6c0:	90c00115 	stw	r3,4(r18)
8111d6c4:	31800104 	addi	r6,r6,4
8111d6c8:	5ac00104 	addi	r11,r11,4
8111d6cc:	333fbe36 	bltu	r6,r12,8111d5c8 <__reset+0xfb0fd5c8>
8111d6d0:	0400090e 	bge	zero,r16,8111d6f8 <__multiply+0x1dc>
8111d6d4:	50ffff17 	ldw	r3,-4(r10)
8111d6d8:	52bfff04 	addi	r10,r10,-4
8111d6dc:	18000326 	beq	r3,zero,8111d6ec <__multiply+0x1d0>
8111d6e0:	00000506 	br	8111d6f8 <__multiply+0x1dc>
8111d6e4:	50c00017 	ldw	r3,0(r10)
8111d6e8:	1800031e 	bne	r3,zero,8111d6f8 <__multiply+0x1dc>
8111d6ec:	843fffc4 	addi	r16,r16,-1
8111d6f0:	52bfff04 	addi	r10,r10,-4
8111d6f4:	803ffb1e 	bne	r16,zero,8111d6e4 <__reset+0xfb0fd6e4>
8111d6f8:	14000415 	stw	r16,16(r2)
8111d6fc:	dfc00517 	ldw	ra,20(sp)
8111d700:	dd000417 	ldw	r20,16(sp)
8111d704:	dcc00317 	ldw	r19,12(sp)
8111d708:	dc800217 	ldw	r18,8(sp)
8111d70c:	dc400117 	ldw	r17,4(sp)
8111d710:	dc000017 	ldw	r16,0(sp)
8111d714:	dec00604 	addi	sp,sp,24
8111d718:	f800283a 	ret

8111d71c <__pow5mult>:
8111d71c:	defffa04 	addi	sp,sp,-24
8111d720:	de00012e 	bgeu	sp,et,8111d728 <__pow5mult+0xc>
8111d724:	003b68fa 	trap	3
8111d728:	308000cc 	andi	r2,r6,3
8111d72c:	dcc00315 	stw	r19,12(sp)
8111d730:	dc000015 	stw	r16,0(sp)
8111d734:	dfc00515 	stw	ra,20(sp)
8111d738:	dd000415 	stw	r20,16(sp)
8111d73c:	dc800215 	stw	r18,8(sp)
8111d740:	dc400115 	stw	r17,4(sp)
8111d744:	3021883a 	mov	r16,r6
8111d748:	2027883a 	mov	r19,r4
8111d74c:	10002f1e 	bne	r2,zero,8111d80c <__pow5mult+0xf0>
8111d750:	2825883a 	mov	r18,r5
8111d754:	8021d0ba 	srai	r16,r16,2
8111d758:	80001a26 	beq	r16,zero,8111d7c4 <__pow5mult+0xa8>
8111d75c:	9c401217 	ldw	r17,72(r19)
8111d760:	8800061e 	bne	r17,zero,8111d77c <__pow5mult+0x60>
8111d764:	00003406 	br	8111d838 <__pow5mult+0x11c>
8111d768:	8021d07a 	srai	r16,r16,1
8111d76c:	80001526 	beq	r16,zero,8111d7c4 <__pow5mult+0xa8>
8111d770:	88800017 	ldw	r2,0(r17)
8111d774:	10001c26 	beq	r2,zero,8111d7e8 <__pow5mult+0xcc>
8111d778:	1023883a 	mov	r17,r2
8111d77c:	8080004c 	andi	r2,r16,1
8111d780:	103ff926 	beq	r2,zero,8111d768 <__reset+0xfb0fd768>
8111d784:	880d883a 	mov	r6,r17
8111d788:	900b883a 	mov	r5,r18
8111d78c:	9809883a 	mov	r4,r19
8111d790:	111d51c0 	call	8111d51c <__multiply>
8111d794:	90001b26 	beq	r18,zero,8111d804 <__pow5mult+0xe8>
8111d798:	91000117 	ldw	r4,4(r18)
8111d79c:	98c01317 	ldw	r3,76(r19)
8111d7a0:	8021d07a 	srai	r16,r16,1
8111d7a4:	2109883a 	add	r4,r4,r4
8111d7a8:	2109883a 	add	r4,r4,r4
8111d7ac:	1907883a 	add	r3,r3,r4
8111d7b0:	19000017 	ldw	r4,0(r3)
8111d7b4:	91000015 	stw	r4,0(r18)
8111d7b8:	1c800015 	stw	r18,0(r3)
8111d7bc:	1025883a 	mov	r18,r2
8111d7c0:	803feb1e 	bne	r16,zero,8111d770 <__reset+0xfb0fd770>
8111d7c4:	9005883a 	mov	r2,r18
8111d7c8:	dfc00517 	ldw	ra,20(sp)
8111d7cc:	dd000417 	ldw	r20,16(sp)
8111d7d0:	dcc00317 	ldw	r19,12(sp)
8111d7d4:	dc800217 	ldw	r18,8(sp)
8111d7d8:	dc400117 	ldw	r17,4(sp)
8111d7dc:	dc000017 	ldw	r16,0(sp)
8111d7e0:	dec00604 	addi	sp,sp,24
8111d7e4:	f800283a 	ret
8111d7e8:	880d883a 	mov	r6,r17
8111d7ec:	880b883a 	mov	r5,r17
8111d7f0:	9809883a 	mov	r4,r19
8111d7f4:	111d51c0 	call	8111d51c <__multiply>
8111d7f8:	88800015 	stw	r2,0(r17)
8111d7fc:	10000015 	stw	zero,0(r2)
8111d800:	003fdd06 	br	8111d778 <__reset+0xfb0fd778>
8111d804:	1025883a 	mov	r18,r2
8111d808:	003fd706 	br	8111d768 <__reset+0xfb0fd768>
8111d80c:	10bfffc4 	addi	r2,r2,-1
8111d810:	1085883a 	add	r2,r2,r2
8111d814:	00e04534 	movhi	r3,33044
8111d818:	18ffa104 	addi	r3,r3,-380
8111d81c:	1085883a 	add	r2,r2,r2
8111d820:	1885883a 	add	r2,r3,r2
8111d824:	11800017 	ldw	r6,0(r2)
8111d828:	000f883a 	mov	r7,zero
8111d82c:	111d18c0 	call	8111d18c <__multadd>
8111d830:	1025883a 	mov	r18,r2
8111d834:	003fc706 	br	8111d754 <__reset+0xfb0fd754>
8111d838:	05000044 	movi	r20,1
8111d83c:	a00b883a 	mov	r5,r20
8111d840:	9809883a 	mov	r4,r19
8111d844:	111d0b40 	call	8111d0b4 <_Balloc>
8111d848:	1023883a 	mov	r17,r2
8111d84c:	00809c44 	movi	r2,625
8111d850:	88800515 	stw	r2,20(r17)
8111d854:	8d000415 	stw	r20,16(r17)
8111d858:	9c401215 	stw	r17,72(r19)
8111d85c:	88000015 	stw	zero,0(r17)
8111d860:	003fc606 	br	8111d77c <__reset+0xfb0fd77c>

8111d864 <__lshift>:
8111d864:	defff904 	addi	sp,sp,-28
8111d868:	de00012e 	bgeu	sp,et,8111d870 <__lshift+0xc>
8111d86c:	003b68fa 	trap	3
8111d870:	dd400515 	stw	r21,20(sp)
8111d874:	dcc00315 	stw	r19,12(sp)
8111d878:	302bd17a 	srai	r21,r6,5
8111d87c:	2cc00417 	ldw	r19,16(r5)
8111d880:	28800217 	ldw	r2,8(r5)
8111d884:	dd000415 	stw	r20,16(sp)
8111d888:	ace7883a 	add	r19,r21,r19
8111d88c:	dc800215 	stw	r18,8(sp)
8111d890:	dc400115 	stw	r17,4(sp)
8111d894:	dc000015 	stw	r16,0(sp)
8111d898:	dfc00615 	stw	ra,24(sp)
8111d89c:	9c000044 	addi	r16,r19,1
8111d8a0:	2823883a 	mov	r17,r5
8111d8a4:	3029883a 	mov	r20,r6
8111d8a8:	2025883a 	mov	r18,r4
8111d8ac:	29400117 	ldw	r5,4(r5)
8111d8b0:	1400030e 	bge	r2,r16,8111d8c0 <__lshift+0x5c>
8111d8b4:	1085883a 	add	r2,r2,r2
8111d8b8:	29400044 	addi	r5,r5,1
8111d8bc:	143ffd16 	blt	r2,r16,8111d8b4 <__reset+0xfb0fd8b4>
8111d8c0:	9009883a 	mov	r4,r18
8111d8c4:	111d0b40 	call	8111d0b4 <_Balloc>
8111d8c8:	10c00504 	addi	r3,r2,20
8111d8cc:	0540070e 	bge	zero,r21,8111d8ec <__lshift+0x88>
8111d8d0:	ad6b883a 	add	r21,r21,r21
8111d8d4:	ad6b883a 	add	r21,r21,r21
8111d8d8:	1809883a 	mov	r4,r3
8111d8dc:	1d47883a 	add	r3,r3,r21
8111d8e0:	20000015 	stw	zero,0(r4)
8111d8e4:	21000104 	addi	r4,r4,4
8111d8e8:	193ffd1e 	bne	r3,r4,8111d8e0 <__reset+0xfb0fd8e0>
8111d8ec:	8a000417 	ldw	r8,16(r17)
8111d8f0:	89000504 	addi	r4,r17,20
8111d8f4:	a18007cc 	andi	r6,r20,31
8111d8f8:	4211883a 	add	r8,r8,r8
8111d8fc:	4211883a 	add	r8,r8,r8
8111d900:	2211883a 	add	r8,r4,r8
8111d904:	30002326 	beq	r6,zero,8111d994 <__lshift+0x130>
8111d908:	02400804 	movi	r9,32
8111d90c:	4993c83a 	sub	r9,r9,r6
8111d910:	000b883a 	mov	r5,zero
8111d914:	21c00017 	ldw	r7,0(r4)
8111d918:	1815883a 	mov	r10,r3
8111d91c:	18c00104 	addi	r3,r3,4
8111d920:	398e983a 	sll	r7,r7,r6
8111d924:	21000104 	addi	r4,r4,4
8111d928:	394ab03a 	or	r5,r7,r5
8111d92c:	197fff15 	stw	r5,-4(r3)
8111d930:	217fff17 	ldw	r5,-4(r4)
8111d934:	2a4ad83a 	srl	r5,r5,r9
8111d938:	223ff636 	bltu	r4,r8,8111d914 <__reset+0xfb0fd914>
8111d93c:	51400115 	stw	r5,4(r10)
8111d940:	28001a1e 	bne	r5,zero,8111d9ac <__lshift+0x148>
8111d944:	843fffc4 	addi	r16,r16,-1
8111d948:	14000415 	stw	r16,16(r2)
8111d94c:	88000826 	beq	r17,zero,8111d970 <__lshift+0x10c>
8111d950:	89000117 	ldw	r4,4(r17)
8111d954:	90c01317 	ldw	r3,76(r18)
8111d958:	2109883a 	add	r4,r4,r4
8111d95c:	2109883a 	add	r4,r4,r4
8111d960:	1907883a 	add	r3,r3,r4
8111d964:	19000017 	ldw	r4,0(r3)
8111d968:	89000015 	stw	r4,0(r17)
8111d96c:	1c400015 	stw	r17,0(r3)
8111d970:	dfc00617 	ldw	ra,24(sp)
8111d974:	dd400517 	ldw	r21,20(sp)
8111d978:	dd000417 	ldw	r20,16(sp)
8111d97c:	dcc00317 	ldw	r19,12(sp)
8111d980:	dc800217 	ldw	r18,8(sp)
8111d984:	dc400117 	ldw	r17,4(sp)
8111d988:	dc000017 	ldw	r16,0(sp)
8111d98c:	dec00704 	addi	sp,sp,28
8111d990:	f800283a 	ret
8111d994:	21400017 	ldw	r5,0(r4)
8111d998:	18c00104 	addi	r3,r3,4
8111d99c:	21000104 	addi	r4,r4,4
8111d9a0:	197fff15 	stw	r5,-4(r3)
8111d9a4:	223ffb36 	bltu	r4,r8,8111d994 <__reset+0xfb0fd994>
8111d9a8:	003fe606 	br	8111d944 <__reset+0xfb0fd944>
8111d9ac:	9c000084 	addi	r16,r19,2
8111d9b0:	003fe406 	br	8111d944 <__reset+0xfb0fd944>

8111d9b4 <__mcmp>:
8111d9b4:	20800417 	ldw	r2,16(r4)
8111d9b8:	28c00417 	ldw	r3,16(r5)
8111d9bc:	10c5c83a 	sub	r2,r2,r3
8111d9c0:	1000111e 	bne	r2,zero,8111da08 <__mcmp+0x54>
8111d9c4:	18c7883a 	add	r3,r3,r3
8111d9c8:	18c7883a 	add	r3,r3,r3
8111d9cc:	21000504 	addi	r4,r4,20
8111d9d0:	29400504 	addi	r5,r5,20
8111d9d4:	20c5883a 	add	r2,r4,r3
8111d9d8:	28cb883a 	add	r5,r5,r3
8111d9dc:	00000106 	br	8111d9e4 <__mcmp+0x30>
8111d9e0:	20800a2e 	bgeu	r4,r2,8111da0c <__mcmp+0x58>
8111d9e4:	10bfff04 	addi	r2,r2,-4
8111d9e8:	297fff04 	addi	r5,r5,-4
8111d9ec:	11800017 	ldw	r6,0(r2)
8111d9f0:	28c00017 	ldw	r3,0(r5)
8111d9f4:	30fffa26 	beq	r6,r3,8111d9e0 <__reset+0xfb0fd9e0>
8111d9f8:	30c00236 	bltu	r6,r3,8111da04 <__mcmp+0x50>
8111d9fc:	00800044 	movi	r2,1
8111da00:	f800283a 	ret
8111da04:	00bfffc4 	movi	r2,-1
8111da08:	f800283a 	ret
8111da0c:	0005883a 	mov	r2,zero
8111da10:	f800283a 	ret

8111da14 <__mdiff>:
8111da14:	defffa04 	addi	sp,sp,-24
8111da18:	de00012e 	bgeu	sp,et,8111da20 <__mdiff+0xc>
8111da1c:	003b68fa 	trap	3
8111da20:	28c00417 	ldw	r3,16(r5)
8111da24:	30800417 	ldw	r2,16(r6)
8111da28:	dcc00315 	stw	r19,12(sp)
8111da2c:	dc800215 	stw	r18,8(sp)
8111da30:	dfc00515 	stw	ra,20(sp)
8111da34:	dd000415 	stw	r20,16(sp)
8111da38:	dc400115 	stw	r17,4(sp)
8111da3c:	dc000015 	stw	r16,0(sp)
8111da40:	1887c83a 	sub	r3,r3,r2
8111da44:	2825883a 	mov	r18,r5
8111da48:	3027883a 	mov	r19,r6
8111da4c:	1800141e 	bne	r3,zero,8111daa0 <__mdiff+0x8c>
8111da50:	1085883a 	add	r2,r2,r2
8111da54:	1085883a 	add	r2,r2,r2
8111da58:	2a000504 	addi	r8,r5,20
8111da5c:	34000504 	addi	r16,r6,20
8111da60:	4087883a 	add	r3,r8,r2
8111da64:	8085883a 	add	r2,r16,r2
8111da68:	00000106 	br	8111da70 <__mdiff+0x5c>
8111da6c:	40c0592e 	bgeu	r8,r3,8111dbd4 <__mdiff+0x1c0>
8111da70:	18ffff04 	addi	r3,r3,-4
8111da74:	10bfff04 	addi	r2,r2,-4
8111da78:	19c00017 	ldw	r7,0(r3)
8111da7c:	11400017 	ldw	r5,0(r2)
8111da80:	397ffa26 	beq	r7,r5,8111da6c <__reset+0xfb0fda6c>
8111da84:	3940592e 	bgeu	r7,r5,8111dbec <__mdiff+0x1d8>
8111da88:	9005883a 	mov	r2,r18
8111da8c:	4023883a 	mov	r17,r8
8111da90:	9825883a 	mov	r18,r19
8111da94:	05000044 	movi	r20,1
8111da98:	1027883a 	mov	r19,r2
8111da9c:	00000406 	br	8111dab0 <__mdiff+0x9c>
8111daa0:	18005616 	blt	r3,zero,8111dbfc <__mdiff+0x1e8>
8111daa4:	34400504 	addi	r17,r6,20
8111daa8:	2c000504 	addi	r16,r5,20
8111daac:	0029883a 	mov	r20,zero
8111dab0:	91400117 	ldw	r5,4(r18)
8111dab4:	111d0b40 	call	8111d0b4 <_Balloc>
8111dab8:	92400417 	ldw	r9,16(r18)
8111dabc:	9b000417 	ldw	r12,16(r19)
8111dac0:	12c00504 	addi	r11,r2,20
8111dac4:	4a51883a 	add	r8,r9,r9
8111dac8:	6319883a 	add	r12,r12,r12
8111dacc:	4211883a 	add	r8,r8,r8
8111dad0:	6319883a 	add	r12,r12,r12
8111dad4:	15000315 	stw	r20,12(r2)
8111dad8:	8211883a 	add	r8,r16,r8
8111dadc:	8b19883a 	add	r12,r17,r12
8111dae0:	0007883a 	mov	r3,zero
8111dae4:	81400017 	ldw	r5,0(r16)
8111dae8:	89c00017 	ldw	r7,0(r17)
8111daec:	59800104 	addi	r6,r11,4
8111daf0:	293fffcc 	andi	r4,r5,65535
8111daf4:	20c7883a 	add	r3,r4,r3
8111daf8:	393fffcc 	andi	r4,r7,65535
8111dafc:	1909c83a 	sub	r4,r3,r4
8111db00:	280ad43a 	srli	r5,r5,16
8111db04:	380ed43a 	srli	r7,r7,16
8111db08:	2007d43a 	srai	r3,r4,16
8111db0c:	213fffcc 	andi	r4,r4,65535
8111db10:	29cbc83a 	sub	r5,r5,r7
8111db14:	28c7883a 	add	r3,r5,r3
8111db18:	180a943a 	slli	r5,r3,16
8111db1c:	8c400104 	addi	r17,r17,4
8111db20:	84000104 	addi	r16,r16,4
8111db24:	2908b03a 	or	r4,r5,r4
8111db28:	59000015 	stw	r4,0(r11)
8111db2c:	1807d43a 	srai	r3,r3,16
8111db30:	3015883a 	mov	r10,r6
8111db34:	3017883a 	mov	r11,r6
8111db38:	8b3fea36 	bltu	r17,r12,8111dae4 <__reset+0xfb0fdae4>
8111db3c:	8200162e 	bgeu	r16,r8,8111db98 <__mdiff+0x184>
8111db40:	8017883a 	mov	r11,r16
8111db44:	59400017 	ldw	r5,0(r11)
8111db48:	31800104 	addi	r6,r6,4
8111db4c:	5ac00104 	addi	r11,r11,4
8111db50:	293fffcc 	andi	r4,r5,65535
8111db54:	20c7883a 	add	r3,r4,r3
8111db58:	280ed43a 	srli	r7,r5,16
8111db5c:	180bd43a 	srai	r5,r3,16
8111db60:	193fffcc 	andi	r4,r3,65535
8111db64:	3947883a 	add	r3,r7,r5
8111db68:	180a943a 	slli	r5,r3,16
8111db6c:	1807d43a 	srai	r3,r3,16
8111db70:	2908b03a 	or	r4,r5,r4
8111db74:	313fff15 	stw	r4,-4(r6)
8111db78:	5a3ff236 	bltu	r11,r8,8111db44 <__reset+0xfb0fdb44>
8111db7c:	0406303a 	nor	r3,zero,r16
8111db80:	1a07883a 	add	r3,r3,r8
8111db84:	1806d0ba 	srli	r3,r3,2
8111db88:	18c00044 	addi	r3,r3,1
8111db8c:	18c7883a 	add	r3,r3,r3
8111db90:	18c7883a 	add	r3,r3,r3
8111db94:	50d5883a 	add	r10,r10,r3
8111db98:	50ffff04 	addi	r3,r10,-4
8111db9c:	2000041e 	bne	r4,zero,8111dbb0 <__mdiff+0x19c>
8111dba0:	18ffff04 	addi	r3,r3,-4
8111dba4:	19000017 	ldw	r4,0(r3)
8111dba8:	4a7fffc4 	addi	r9,r9,-1
8111dbac:	203ffc26 	beq	r4,zero,8111dba0 <__reset+0xfb0fdba0>
8111dbb0:	12400415 	stw	r9,16(r2)
8111dbb4:	dfc00517 	ldw	ra,20(sp)
8111dbb8:	dd000417 	ldw	r20,16(sp)
8111dbbc:	dcc00317 	ldw	r19,12(sp)
8111dbc0:	dc800217 	ldw	r18,8(sp)
8111dbc4:	dc400117 	ldw	r17,4(sp)
8111dbc8:	dc000017 	ldw	r16,0(sp)
8111dbcc:	dec00604 	addi	sp,sp,24
8111dbd0:	f800283a 	ret
8111dbd4:	000b883a 	mov	r5,zero
8111dbd8:	111d0b40 	call	8111d0b4 <_Balloc>
8111dbdc:	00c00044 	movi	r3,1
8111dbe0:	10c00415 	stw	r3,16(r2)
8111dbe4:	10000515 	stw	zero,20(r2)
8111dbe8:	003ff206 	br	8111dbb4 <__reset+0xfb0fdbb4>
8111dbec:	8023883a 	mov	r17,r16
8111dbf0:	0029883a 	mov	r20,zero
8111dbf4:	4021883a 	mov	r16,r8
8111dbf8:	003fad06 	br	8111dab0 <__reset+0xfb0fdab0>
8111dbfc:	9005883a 	mov	r2,r18
8111dc00:	94400504 	addi	r17,r18,20
8111dc04:	9c000504 	addi	r16,r19,20
8111dc08:	9825883a 	mov	r18,r19
8111dc0c:	05000044 	movi	r20,1
8111dc10:	1027883a 	mov	r19,r2
8111dc14:	003fa606 	br	8111dab0 <__reset+0xfb0fdab0>

8111dc18 <__ulp>:
8111dc18:	295ffc2c 	andhi	r5,r5,32752
8111dc1c:	00bf3034 	movhi	r2,64704
8111dc20:	2887883a 	add	r3,r5,r2
8111dc24:	00c0020e 	bge	zero,r3,8111dc30 <__ulp+0x18>
8111dc28:	0005883a 	mov	r2,zero
8111dc2c:	f800283a 	ret
8111dc30:	00c7c83a 	sub	r3,zero,r3
8111dc34:	1807d53a 	srai	r3,r3,20
8111dc38:	008004c4 	movi	r2,19
8111dc3c:	10c00b0e 	bge	r2,r3,8111dc6c <__ulp+0x54>
8111dc40:	18bffb04 	addi	r2,r3,-20
8111dc44:	01000784 	movi	r4,30
8111dc48:	0007883a 	mov	r3,zero
8111dc4c:	20800516 	blt	r4,r2,8111dc64 <__ulp+0x4c>
8111dc50:	010007c4 	movi	r4,31
8111dc54:	2089c83a 	sub	r4,r4,r2
8111dc58:	00800044 	movi	r2,1
8111dc5c:	1104983a 	sll	r2,r2,r4
8111dc60:	f800283a 	ret
8111dc64:	00800044 	movi	r2,1
8111dc68:	f800283a 	ret
8111dc6c:	01400234 	movhi	r5,8
8111dc70:	28c7d83a 	sra	r3,r5,r3
8111dc74:	0005883a 	mov	r2,zero
8111dc78:	f800283a 	ret

8111dc7c <__b2d>:
8111dc7c:	defffa04 	addi	sp,sp,-24
8111dc80:	de00012e 	bgeu	sp,et,8111dc88 <__b2d+0xc>
8111dc84:	003b68fa 	trap	3
8111dc88:	dc000015 	stw	r16,0(sp)
8111dc8c:	24000417 	ldw	r16,16(r4)
8111dc90:	dc400115 	stw	r17,4(sp)
8111dc94:	24400504 	addi	r17,r4,20
8111dc98:	8421883a 	add	r16,r16,r16
8111dc9c:	8421883a 	add	r16,r16,r16
8111dca0:	8c21883a 	add	r16,r17,r16
8111dca4:	dc800215 	stw	r18,8(sp)
8111dca8:	84bfff17 	ldw	r18,-4(r16)
8111dcac:	dd000415 	stw	r20,16(sp)
8111dcb0:	dcc00315 	stw	r19,12(sp)
8111dcb4:	9009883a 	mov	r4,r18
8111dcb8:	2829883a 	mov	r20,r5
8111dcbc:	dfc00515 	stw	ra,20(sp)
8111dcc0:	111d3c00 	call	8111d3c0 <__hi0bits>
8111dcc4:	00c00804 	movi	r3,32
8111dcc8:	1889c83a 	sub	r4,r3,r2
8111dccc:	a1000015 	stw	r4,0(r20)
8111dcd0:	01000284 	movi	r4,10
8111dcd4:	84ffff04 	addi	r19,r16,-4
8111dcd8:	20801216 	blt	r4,r2,8111dd24 <__b2d+0xa8>
8111dcdc:	018002c4 	movi	r6,11
8111dce0:	308dc83a 	sub	r6,r6,r2
8111dce4:	9186d83a 	srl	r3,r18,r6
8111dce8:	18cffc34 	orhi	r3,r3,16368
8111dcec:	8cc0212e 	bgeu	r17,r19,8111dd74 <__b2d+0xf8>
8111dcf0:	813ffe17 	ldw	r4,-8(r16)
8111dcf4:	218cd83a 	srl	r6,r4,r6
8111dcf8:	10800544 	addi	r2,r2,21
8111dcfc:	9084983a 	sll	r2,r18,r2
8111dd00:	1184b03a 	or	r2,r2,r6
8111dd04:	dfc00517 	ldw	ra,20(sp)
8111dd08:	dd000417 	ldw	r20,16(sp)
8111dd0c:	dcc00317 	ldw	r19,12(sp)
8111dd10:	dc800217 	ldw	r18,8(sp)
8111dd14:	dc400117 	ldw	r17,4(sp)
8111dd18:	dc000017 	ldw	r16,0(sp)
8111dd1c:	dec00604 	addi	sp,sp,24
8111dd20:	f800283a 	ret
8111dd24:	8cc00f2e 	bgeu	r17,r19,8111dd64 <__b2d+0xe8>
8111dd28:	117ffd44 	addi	r5,r2,-11
8111dd2c:	80bffe17 	ldw	r2,-8(r16)
8111dd30:	28000e26 	beq	r5,zero,8111dd6c <__b2d+0xf0>
8111dd34:	1949c83a 	sub	r4,r3,r5
8111dd38:	9164983a 	sll	r18,r18,r5
8111dd3c:	1106d83a 	srl	r3,r2,r4
8111dd40:	81bffe04 	addi	r6,r16,-8
8111dd44:	948ffc34 	orhi	r18,r18,16368
8111dd48:	90c6b03a 	or	r3,r18,r3
8111dd4c:	89800e2e 	bgeu	r17,r6,8111dd88 <__b2d+0x10c>
8111dd50:	81bffd17 	ldw	r6,-12(r16)
8111dd54:	1144983a 	sll	r2,r2,r5
8111dd58:	310ad83a 	srl	r5,r6,r4
8111dd5c:	2884b03a 	or	r2,r5,r2
8111dd60:	003fe806 	br	8111dd04 <__reset+0xfb0fdd04>
8111dd64:	10bffd44 	addi	r2,r2,-11
8111dd68:	1000041e 	bne	r2,zero,8111dd7c <__b2d+0x100>
8111dd6c:	90cffc34 	orhi	r3,r18,16368
8111dd70:	003fe406 	br	8111dd04 <__reset+0xfb0fdd04>
8111dd74:	000d883a 	mov	r6,zero
8111dd78:	003fdf06 	br	8111dcf8 <__reset+0xfb0fdcf8>
8111dd7c:	90a4983a 	sll	r18,r18,r2
8111dd80:	0005883a 	mov	r2,zero
8111dd84:	003ff906 	br	8111dd6c <__reset+0xfb0fdd6c>
8111dd88:	1144983a 	sll	r2,r2,r5
8111dd8c:	003fdd06 	br	8111dd04 <__reset+0xfb0fdd04>

8111dd90 <__d2b>:
8111dd90:	defff804 	addi	sp,sp,-32
8111dd94:	de00012e 	bgeu	sp,et,8111dd9c <__d2b+0xc>
8111dd98:	003b68fa 	trap	3
8111dd9c:	dc000215 	stw	r16,8(sp)
8111dda0:	3021883a 	mov	r16,r6
8111dda4:	dc400315 	stw	r17,12(sp)
8111dda8:	8022907a 	slli	r17,r16,1
8111ddac:	dd000615 	stw	r20,24(sp)
8111ddb0:	2829883a 	mov	r20,r5
8111ddb4:	01400044 	movi	r5,1
8111ddb8:	dcc00515 	stw	r19,20(sp)
8111ddbc:	dc800415 	stw	r18,16(sp)
8111ddc0:	dfc00715 	stw	ra,28(sp)
8111ddc4:	3825883a 	mov	r18,r7
8111ddc8:	8822d57a 	srli	r17,r17,21
8111ddcc:	111d0b40 	call	8111d0b4 <_Balloc>
8111ddd0:	1027883a 	mov	r19,r2
8111ddd4:	00800434 	movhi	r2,16
8111ddd8:	10bfffc4 	addi	r2,r2,-1
8111dddc:	808c703a 	and	r6,r16,r2
8111dde0:	88000126 	beq	r17,zero,8111dde8 <__d2b+0x58>
8111dde4:	31800434 	orhi	r6,r6,16
8111dde8:	d9800015 	stw	r6,0(sp)
8111ddec:	a0002426 	beq	r20,zero,8111de80 <__d2b+0xf0>
8111ddf0:	d9000104 	addi	r4,sp,4
8111ddf4:	dd000115 	stw	r20,4(sp)
8111ddf8:	111d4280 	call	8111d428 <__lo0bits>
8111ddfc:	d8c00017 	ldw	r3,0(sp)
8111de00:	10002f1e 	bne	r2,zero,8111dec0 <__d2b+0x130>
8111de04:	d9000117 	ldw	r4,4(sp)
8111de08:	99000515 	stw	r4,20(r19)
8111de0c:	1821003a 	cmpeq	r16,r3,zero
8111de10:	01000084 	movi	r4,2
8111de14:	2421c83a 	sub	r16,r4,r16
8111de18:	98c00615 	stw	r3,24(r19)
8111de1c:	9c000415 	stw	r16,16(r19)
8111de20:	88001f1e 	bne	r17,zero,8111dea0 <__d2b+0x110>
8111de24:	10bef384 	addi	r2,r2,-1074
8111de28:	90800015 	stw	r2,0(r18)
8111de2c:	00900034 	movhi	r2,16384
8111de30:	10bfffc4 	addi	r2,r2,-1
8111de34:	8085883a 	add	r2,r16,r2
8111de38:	1085883a 	add	r2,r2,r2
8111de3c:	1085883a 	add	r2,r2,r2
8111de40:	9885883a 	add	r2,r19,r2
8111de44:	11000517 	ldw	r4,20(r2)
8111de48:	8020917a 	slli	r16,r16,5
8111de4c:	111d3c00 	call	8111d3c0 <__hi0bits>
8111de50:	d8c00817 	ldw	r3,32(sp)
8111de54:	8085c83a 	sub	r2,r16,r2
8111de58:	18800015 	stw	r2,0(r3)
8111de5c:	9805883a 	mov	r2,r19
8111de60:	dfc00717 	ldw	ra,28(sp)
8111de64:	dd000617 	ldw	r20,24(sp)
8111de68:	dcc00517 	ldw	r19,20(sp)
8111de6c:	dc800417 	ldw	r18,16(sp)
8111de70:	dc400317 	ldw	r17,12(sp)
8111de74:	dc000217 	ldw	r16,8(sp)
8111de78:	dec00804 	addi	sp,sp,32
8111de7c:	f800283a 	ret
8111de80:	d809883a 	mov	r4,sp
8111de84:	111d4280 	call	8111d428 <__lo0bits>
8111de88:	d8c00017 	ldw	r3,0(sp)
8111de8c:	04000044 	movi	r16,1
8111de90:	9c000415 	stw	r16,16(r19)
8111de94:	98c00515 	stw	r3,20(r19)
8111de98:	10800804 	addi	r2,r2,32
8111de9c:	883fe126 	beq	r17,zero,8111de24 <__reset+0xfb0fde24>
8111dea0:	00c00d44 	movi	r3,53
8111dea4:	8c7ef344 	addi	r17,r17,-1075
8111dea8:	88a3883a 	add	r17,r17,r2
8111deac:	1885c83a 	sub	r2,r3,r2
8111deb0:	d8c00817 	ldw	r3,32(sp)
8111deb4:	94400015 	stw	r17,0(r18)
8111deb8:	18800015 	stw	r2,0(r3)
8111debc:	003fe706 	br	8111de5c <__reset+0xfb0fde5c>
8111dec0:	01000804 	movi	r4,32
8111dec4:	2089c83a 	sub	r4,r4,r2
8111dec8:	1908983a 	sll	r4,r3,r4
8111decc:	d9400117 	ldw	r5,4(sp)
8111ded0:	1886d83a 	srl	r3,r3,r2
8111ded4:	2148b03a 	or	r4,r4,r5
8111ded8:	99000515 	stw	r4,20(r19)
8111dedc:	d8c00015 	stw	r3,0(sp)
8111dee0:	003fca06 	br	8111de0c <__reset+0xfb0fde0c>

8111dee4 <__ratio>:
8111dee4:	defff904 	addi	sp,sp,-28
8111dee8:	de00012e 	bgeu	sp,et,8111def0 <__ratio+0xc>
8111deec:	003b68fa 	trap	3
8111def0:	dc400315 	stw	r17,12(sp)
8111def4:	2823883a 	mov	r17,r5
8111def8:	d9400104 	addi	r5,sp,4
8111defc:	dfc00615 	stw	ra,24(sp)
8111df00:	dcc00515 	stw	r19,20(sp)
8111df04:	dc800415 	stw	r18,16(sp)
8111df08:	2027883a 	mov	r19,r4
8111df0c:	dc000215 	stw	r16,8(sp)
8111df10:	111dc7c0 	call	8111dc7c <__b2d>
8111df14:	d80b883a 	mov	r5,sp
8111df18:	8809883a 	mov	r4,r17
8111df1c:	1025883a 	mov	r18,r2
8111df20:	1821883a 	mov	r16,r3
8111df24:	111dc7c0 	call	8111dc7c <__b2d>
8111df28:	8a000417 	ldw	r8,16(r17)
8111df2c:	99000417 	ldw	r4,16(r19)
8111df30:	d9400117 	ldw	r5,4(sp)
8111df34:	2209c83a 	sub	r4,r4,r8
8111df38:	2010917a 	slli	r8,r4,5
8111df3c:	d9000017 	ldw	r4,0(sp)
8111df40:	2909c83a 	sub	r4,r5,r4
8111df44:	4109883a 	add	r4,r8,r4
8111df48:	01000e0e 	bge	zero,r4,8111df84 <__ratio+0xa0>
8111df4c:	2008953a 	slli	r4,r4,20
8111df50:	2421883a 	add	r16,r4,r16
8111df54:	100d883a 	mov	r6,r2
8111df58:	180f883a 	mov	r7,r3
8111df5c:	9009883a 	mov	r4,r18
8111df60:	800b883a 	mov	r5,r16
8111df64:	1125fd80 	call	81125fd8 <__divdf3>
8111df68:	dfc00617 	ldw	ra,24(sp)
8111df6c:	dcc00517 	ldw	r19,20(sp)
8111df70:	dc800417 	ldw	r18,16(sp)
8111df74:	dc400317 	ldw	r17,12(sp)
8111df78:	dc000217 	ldw	r16,8(sp)
8111df7c:	dec00704 	addi	sp,sp,28
8111df80:	f800283a 	ret
8111df84:	2008953a 	slli	r4,r4,20
8111df88:	1907c83a 	sub	r3,r3,r4
8111df8c:	003ff106 	br	8111df54 <__reset+0xfb0fdf54>

8111df90 <_mprec_log10>:
8111df90:	defffe04 	addi	sp,sp,-8
8111df94:	de00012e 	bgeu	sp,et,8111df9c <_mprec_log10+0xc>
8111df98:	003b68fa 	trap	3
8111df9c:	008005c4 	movi	r2,23
8111dfa0:	dc000015 	stw	r16,0(sp)
8111dfa4:	dfc00115 	stw	ra,4(sp)
8111dfa8:	2021883a 	mov	r16,r4
8111dfac:	11000d0e 	bge	r2,r4,8111dfe4 <_mprec_log10+0x54>
8111dfb0:	0005883a 	mov	r2,zero
8111dfb4:	00cffc34 	movhi	r3,16368
8111dfb8:	843fffc4 	addi	r16,r16,-1
8111dfbc:	000d883a 	mov	r6,zero
8111dfc0:	01d00934 	movhi	r7,16420
8111dfc4:	1009883a 	mov	r4,r2
8111dfc8:	180b883a 	mov	r5,r3
8111dfcc:	11112340 	call	81111234 <__muldf3>
8111dfd0:	803ff91e 	bne	r16,zero,8111dfb8 <__reset+0xfb0fdfb8>
8111dfd4:	dfc00117 	ldw	ra,4(sp)
8111dfd8:	dc000017 	ldw	r16,0(sp)
8111dfdc:	dec00204 	addi	sp,sp,8
8111dfe0:	f800283a 	ret
8111dfe4:	202090fa 	slli	r16,r4,3
8111dfe8:	00a04534 	movhi	r2,33044
8111dfec:	10bfb804 	addi	r2,r2,-288
8111dff0:	1421883a 	add	r16,r2,r16
8111dff4:	80800017 	ldw	r2,0(r16)
8111dff8:	80c00117 	ldw	r3,4(r16)
8111dffc:	dfc00117 	ldw	ra,4(sp)
8111e000:	dc000017 	ldw	r16,0(sp)
8111e004:	dec00204 	addi	sp,sp,8
8111e008:	f800283a 	ret

8111e00c <__copybits>:
8111e00c:	297fffc4 	addi	r5,r5,-1
8111e010:	280fd17a 	srai	r7,r5,5
8111e014:	30c00417 	ldw	r3,16(r6)
8111e018:	30800504 	addi	r2,r6,20
8111e01c:	39c00044 	addi	r7,r7,1
8111e020:	18c7883a 	add	r3,r3,r3
8111e024:	39cf883a 	add	r7,r7,r7
8111e028:	18c7883a 	add	r3,r3,r3
8111e02c:	39cf883a 	add	r7,r7,r7
8111e030:	10c7883a 	add	r3,r2,r3
8111e034:	21cf883a 	add	r7,r4,r7
8111e038:	10c00d2e 	bgeu	r2,r3,8111e070 <__copybits+0x64>
8111e03c:	200b883a 	mov	r5,r4
8111e040:	12000017 	ldw	r8,0(r2)
8111e044:	29400104 	addi	r5,r5,4
8111e048:	10800104 	addi	r2,r2,4
8111e04c:	2a3fff15 	stw	r8,-4(r5)
8111e050:	10fffb36 	bltu	r2,r3,8111e040 <__reset+0xfb0fe040>
8111e054:	1985c83a 	sub	r2,r3,r6
8111e058:	10bffac4 	addi	r2,r2,-21
8111e05c:	1004d0ba 	srli	r2,r2,2
8111e060:	10800044 	addi	r2,r2,1
8111e064:	1085883a 	add	r2,r2,r2
8111e068:	1085883a 	add	r2,r2,r2
8111e06c:	2089883a 	add	r4,r4,r2
8111e070:	21c0032e 	bgeu	r4,r7,8111e080 <__copybits+0x74>
8111e074:	20000015 	stw	zero,0(r4)
8111e078:	21000104 	addi	r4,r4,4
8111e07c:	21fffd36 	bltu	r4,r7,8111e074 <__reset+0xfb0fe074>
8111e080:	f800283a 	ret

8111e084 <__any_on>:
8111e084:	20c00417 	ldw	r3,16(r4)
8111e088:	2805d17a 	srai	r2,r5,5
8111e08c:	21000504 	addi	r4,r4,20
8111e090:	18800d0e 	bge	r3,r2,8111e0c8 <__any_on+0x44>
8111e094:	18c7883a 	add	r3,r3,r3
8111e098:	18c7883a 	add	r3,r3,r3
8111e09c:	20c7883a 	add	r3,r4,r3
8111e0a0:	20c0192e 	bgeu	r4,r3,8111e108 <__any_on+0x84>
8111e0a4:	18bfff17 	ldw	r2,-4(r3)
8111e0a8:	18ffff04 	addi	r3,r3,-4
8111e0ac:	1000041e 	bne	r2,zero,8111e0c0 <__any_on+0x3c>
8111e0b0:	20c0142e 	bgeu	r4,r3,8111e104 <__any_on+0x80>
8111e0b4:	18ffff04 	addi	r3,r3,-4
8111e0b8:	19400017 	ldw	r5,0(r3)
8111e0bc:	283ffc26 	beq	r5,zero,8111e0b0 <__reset+0xfb0fe0b0>
8111e0c0:	00800044 	movi	r2,1
8111e0c4:	f800283a 	ret
8111e0c8:	10c00a0e 	bge	r2,r3,8111e0f4 <__any_on+0x70>
8111e0cc:	1085883a 	add	r2,r2,r2
8111e0d0:	1085883a 	add	r2,r2,r2
8111e0d4:	294007cc 	andi	r5,r5,31
8111e0d8:	2087883a 	add	r3,r4,r2
8111e0dc:	283ff026 	beq	r5,zero,8111e0a0 <__reset+0xfb0fe0a0>
8111e0e0:	19800017 	ldw	r6,0(r3)
8111e0e4:	3144d83a 	srl	r2,r6,r5
8111e0e8:	114a983a 	sll	r5,r2,r5
8111e0ec:	317ff41e 	bne	r6,r5,8111e0c0 <__reset+0xfb0fe0c0>
8111e0f0:	003feb06 	br	8111e0a0 <__reset+0xfb0fe0a0>
8111e0f4:	1085883a 	add	r2,r2,r2
8111e0f8:	1085883a 	add	r2,r2,r2
8111e0fc:	2087883a 	add	r3,r4,r2
8111e100:	003fe706 	br	8111e0a0 <__reset+0xfb0fe0a0>
8111e104:	f800283a 	ret
8111e108:	0005883a 	mov	r2,zero
8111e10c:	f800283a 	ret

8111e110 <_read_r>:
8111e110:	defffd04 	addi	sp,sp,-12
8111e114:	de00012e 	bgeu	sp,et,8111e11c <_read_r+0xc>
8111e118:	003b68fa 	trap	3
8111e11c:	2805883a 	mov	r2,r5
8111e120:	dc000015 	stw	r16,0(sp)
8111e124:	04204534 	movhi	r16,33044
8111e128:	dc400115 	stw	r17,4(sp)
8111e12c:	300b883a 	mov	r5,r6
8111e130:	8409b604 	addi	r16,r16,9944
8111e134:	2023883a 	mov	r17,r4
8111e138:	380d883a 	mov	r6,r7
8111e13c:	1009883a 	mov	r4,r2
8111e140:	dfc00215 	stw	ra,8(sp)
8111e144:	80000015 	stw	zero,0(r16)
8111e148:	1128ccc0 	call	81128ccc <read>
8111e14c:	00ffffc4 	movi	r3,-1
8111e150:	10c00526 	beq	r2,r3,8111e168 <_read_r+0x58>
8111e154:	dfc00217 	ldw	ra,8(sp)
8111e158:	dc400117 	ldw	r17,4(sp)
8111e15c:	dc000017 	ldw	r16,0(sp)
8111e160:	dec00304 	addi	sp,sp,12
8111e164:	f800283a 	ret
8111e168:	80c00017 	ldw	r3,0(r16)
8111e16c:	183ff926 	beq	r3,zero,8111e154 <__reset+0xfb0fe154>
8111e170:	88c00015 	stw	r3,0(r17)
8111e174:	003ff706 	br	8111e154 <__reset+0xfb0fe154>

8111e178 <_realloc_r>:
8111e178:	defff604 	addi	sp,sp,-40
8111e17c:	de00012e 	bgeu	sp,et,8111e184 <_realloc_r+0xc>
8111e180:	003b68fa 	trap	3
8111e184:	dc800215 	stw	r18,8(sp)
8111e188:	dfc00915 	stw	ra,36(sp)
8111e18c:	df000815 	stw	fp,32(sp)
8111e190:	ddc00715 	stw	r23,28(sp)
8111e194:	dd800615 	stw	r22,24(sp)
8111e198:	dd400515 	stw	r21,20(sp)
8111e19c:	dd000415 	stw	r20,16(sp)
8111e1a0:	dcc00315 	stw	r19,12(sp)
8111e1a4:	dc400115 	stw	r17,4(sp)
8111e1a8:	dc000015 	stw	r16,0(sp)
8111e1ac:	3025883a 	mov	r18,r6
8111e1b0:	2800b726 	beq	r5,zero,8111e490 <_realloc_r+0x318>
8111e1b4:	282b883a 	mov	r21,r5
8111e1b8:	2029883a 	mov	r20,r4
8111e1bc:	11294ac0 	call	811294ac <__malloc_lock>
8111e1c0:	a8bfff17 	ldw	r2,-4(r21)
8111e1c4:	043fff04 	movi	r16,-4
8111e1c8:	90c002c4 	addi	r3,r18,11
8111e1cc:	01000584 	movi	r4,22
8111e1d0:	acfffe04 	addi	r19,r21,-8
8111e1d4:	1420703a 	and	r16,r2,r16
8111e1d8:	20c0332e 	bgeu	r4,r3,8111e2a8 <_realloc_r+0x130>
8111e1dc:	047ffe04 	movi	r17,-8
8111e1e0:	1c62703a 	and	r17,r3,r17
8111e1e4:	8807883a 	mov	r3,r17
8111e1e8:	88005816 	blt	r17,zero,8111e34c <_realloc_r+0x1d4>
8111e1ec:	8c805736 	bltu	r17,r18,8111e34c <_realloc_r+0x1d4>
8111e1f0:	80c0300e 	bge	r16,r3,8111e2b4 <_realloc_r+0x13c>
8111e1f4:	07204534 	movhi	fp,33044
8111e1f8:	e7031804 	addi	fp,fp,3168
8111e1fc:	e1c00217 	ldw	r7,8(fp)
8111e200:	9c09883a 	add	r4,r19,r16
8111e204:	22000117 	ldw	r8,4(r4)
8111e208:	21c06326 	beq	r4,r7,8111e398 <_realloc_r+0x220>
8111e20c:	017fff84 	movi	r5,-2
8111e210:	414a703a 	and	r5,r8,r5
8111e214:	214b883a 	add	r5,r4,r5
8111e218:	29800117 	ldw	r6,4(r5)
8111e21c:	3180004c 	andi	r6,r6,1
8111e220:	30003f26 	beq	r6,zero,8111e320 <_realloc_r+0x1a8>
8111e224:	1080004c 	andi	r2,r2,1
8111e228:	10008326 	beq	r2,zero,8111e438 <_realloc_r+0x2c0>
8111e22c:	900b883a 	mov	r5,r18
8111e230:	a009883a 	mov	r4,r20
8111e234:	11126700 	call	81112670 <_malloc_r>
8111e238:	1025883a 	mov	r18,r2
8111e23c:	10011e26 	beq	r2,zero,8111e6b8 <_realloc_r+0x540>
8111e240:	a93fff17 	ldw	r4,-4(r21)
8111e244:	10fffe04 	addi	r3,r2,-8
8111e248:	00bfff84 	movi	r2,-2
8111e24c:	2084703a 	and	r2,r4,r2
8111e250:	9885883a 	add	r2,r19,r2
8111e254:	1880ee26 	beq	r3,r2,8111e610 <_realloc_r+0x498>
8111e258:	81bfff04 	addi	r6,r16,-4
8111e25c:	00800904 	movi	r2,36
8111e260:	1180b836 	bltu	r2,r6,8111e544 <_realloc_r+0x3cc>
8111e264:	00c004c4 	movi	r3,19
8111e268:	19809636 	bltu	r3,r6,8111e4c4 <_realloc_r+0x34c>
8111e26c:	9005883a 	mov	r2,r18
8111e270:	a807883a 	mov	r3,r21
8111e274:	19000017 	ldw	r4,0(r3)
8111e278:	11000015 	stw	r4,0(r2)
8111e27c:	19000117 	ldw	r4,4(r3)
8111e280:	11000115 	stw	r4,4(r2)
8111e284:	18c00217 	ldw	r3,8(r3)
8111e288:	10c00215 	stw	r3,8(r2)
8111e28c:	a80b883a 	mov	r5,r21
8111e290:	a009883a 	mov	r4,r20
8111e294:	111c0e40 	call	8111c0e4 <_free_r>
8111e298:	a009883a 	mov	r4,r20
8111e29c:	11295d40 	call	811295d4 <__malloc_unlock>
8111e2a0:	9005883a 	mov	r2,r18
8111e2a4:	00001206 	br	8111e2f0 <_realloc_r+0x178>
8111e2a8:	00c00404 	movi	r3,16
8111e2ac:	1823883a 	mov	r17,r3
8111e2b0:	003fce06 	br	8111e1ec <__reset+0xfb0fe1ec>
8111e2b4:	a825883a 	mov	r18,r21
8111e2b8:	8445c83a 	sub	r2,r16,r17
8111e2bc:	00c003c4 	movi	r3,15
8111e2c0:	18802636 	bltu	r3,r2,8111e35c <_realloc_r+0x1e4>
8111e2c4:	99800117 	ldw	r6,4(r19)
8111e2c8:	9c07883a 	add	r3,r19,r16
8111e2cc:	3180004c 	andi	r6,r6,1
8111e2d0:	3420b03a 	or	r16,r6,r16
8111e2d4:	9c000115 	stw	r16,4(r19)
8111e2d8:	18800117 	ldw	r2,4(r3)
8111e2dc:	10800054 	ori	r2,r2,1
8111e2e0:	18800115 	stw	r2,4(r3)
8111e2e4:	a009883a 	mov	r4,r20
8111e2e8:	11295d40 	call	811295d4 <__malloc_unlock>
8111e2ec:	9005883a 	mov	r2,r18
8111e2f0:	dfc00917 	ldw	ra,36(sp)
8111e2f4:	df000817 	ldw	fp,32(sp)
8111e2f8:	ddc00717 	ldw	r23,28(sp)
8111e2fc:	dd800617 	ldw	r22,24(sp)
8111e300:	dd400517 	ldw	r21,20(sp)
8111e304:	dd000417 	ldw	r20,16(sp)
8111e308:	dcc00317 	ldw	r19,12(sp)
8111e30c:	dc800217 	ldw	r18,8(sp)
8111e310:	dc400117 	ldw	r17,4(sp)
8111e314:	dc000017 	ldw	r16,0(sp)
8111e318:	dec00a04 	addi	sp,sp,40
8111e31c:	f800283a 	ret
8111e320:	017fff04 	movi	r5,-4
8111e324:	414a703a 	and	r5,r8,r5
8111e328:	814d883a 	add	r6,r16,r5
8111e32c:	30c01f16 	blt	r6,r3,8111e3ac <_realloc_r+0x234>
8111e330:	20800317 	ldw	r2,12(r4)
8111e334:	20c00217 	ldw	r3,8(r4)
8111e338:	a825883a 	mov	r18,r21
8111e33c:	3021883a 	mov	r16,r6
8111e340:	18800315 	stw	r2,12(r3)
8111e344:	10c00215 	stw	r3,8(r2)
8111e348:	003fdb06 	br	8111e2b8 <__reset+0xfb0fe2b8>
8111e34c:	00800304 	movi	r2,12
8111e350:	a0800015 	stw	r2,0(r20)
8111e354:	0005883a 	mov	r2,zero
8111e358:	003fe506 	br	8111e2f0 <__reset+0xfb0fe2f0>
8111e35c:	98c00117 	ldw	r3,4(r19)
8111e360:	9c4b883a 	add	r5,r19,r17
8111e364:	11000054 	ori	r4,r2,1
8111e368:	18c0004c 	andi	r3,r3,1
8111e36c:	1c62b03a 	or	r17,r3,r17
8111e370:	9c400115 	stw	r17,4(r19)
8111e374:	29000115 	stw	r4,4(r5)
8111e378:	2885883a 	add	r2,r5,r2
8111e37c:	10c00117 	ldw	r3,4(r2)
8111e380:	29400204 	addi	r5,r5,8
8111e384:	a009883a 	mov	r4,r20
8111e388:	18c00054 	ori	r3,r3,1
8111e38c:	10c00115 	stw	r3,4(r2)
8111e390:	111c0e40 	call	8111c0e4 <_free_r>
8111e394:	003fd306 	br	8111e2e4 <__reset+0xfb0fe2e4>
8111e398:	017fff04 	movi	r5,-4
8111e39c:	414a703a 	and	r5,r8,r5
8111e3a0:	89800404 	addi	r6,r17,16
8111e3a4:	8151883a 	add	r8,r16,r5
8111e3a8:	4180590e 	bge	r8,r6,8111e510 <_realloc_r+0x398>
8111e3ac:	1080004c 	andi	r2,r2,1
8111e3b0:	103f9e1e 	bne	r2,zero,8111e22c <__reset+0xfb0fe22c>
8111e3b4:	adbffe17 	ldw	r22,-8(r21)
8111e3b8:	00bfff04 	movi	r2,-4
8111e3bc:	9dadc83a 	sub	r22,r19,r22
8111e3c0:	b1800117 	ldw	r6,4(r22)
8111e3c4:	3084703a 	and	r2,r6,r2
8111e3c8:	20002026 	beq	r4,zero,8111e44c <_realloc_r+0x2d4>
8111e3cc:	80af883a 	add	r23,r16,r2
8111e3d0:	b96f883a 	add	r23,r23,r5
8111e3d4:	21c05f26 	beq	r4,r7,8111e554 <_realloc_r+0x3dc>
8111e3d8:	b8c01c16 	blt	r23,r3,8111e44c <_realloc_r+0x2d4>
8111e3dc:	20800317 	ldw	r2,12(r4)
8111e3e0:	20c00217 	ldw	r3,8(r4)
8111e3e4:	81bfff04 	addi	r6,r16,-4
8111e3e8:	01000904 	movi	r4,36
8111e3ec:	18800315 	stw	r2,12(r3)
8111e3f0:	10c00215 	stw	r3,8(r2)
8111e3f4:	b0c00217 	ldw	r3,8(r22)
8111e3f8:	b0800317 	ldw	r2,12(r22)
8111e3fc:	b4800204 	addi	r18,r22,8
8111e400:	18800315 	stw	r2,12(r3)
8111e404:	10c00215 	stw	r3,8(r2)
8111e408:	21801b36 	bltu	r4,r6,8111e478 <_realloc_r+0x300>
8111e40c:	008004c4 	movi	r2,19
8111e410:	1180352e 	bgeu	r2,r6,8111e4e8 <_realloc_r+0x370>
8111e414:	a8800017 	ldw	r2,0(r21)
8111e418:	b0800215 	stw	r2,8(r22)
8111e41c:	a8800117 	ldw	r2,4(r21)
8111e420:	b0800315 	stw	r2,12(r22)
8111e424:	008006c4 	movi	r2,27
8111e428:	11807f36 	bltu	r2,r6,8111e628 <_realloc_r+0x4b0>
8111e42c:	b0800404 	addi	r2,r22,16
8111e430:	ad400204 	addi	r21,r21,8
8111e434:	00002d06 	br	8111e4ec <_realloc_r+0x374>
8111e438:	adbffe17 	ldw	r22,-8(r21)
8111e43c:	00bfff04 	movi	r2,-4
8111e440:	9dadc83a 	sub	r22,r19,r22
8111e444:	b1000117 	ldw	r4,4(r22)
8111e448:	2084703a 	and	r2,r4,r2
8111e44c:	b03f7726 	beq	r22,zero,8111e22c <__reset+0xfb0fe22c>
8111e450:	80af883a 	add	r23,r16,r2
8111e454:	b8ff7516 	blt	r23,r3,8111e22c <__reset+0xfb0fe22c>
8111e458:	b0800317 	ldw	r2,12(r22)
8111e45c:	b0c00217 	ldw	r3,8(r22)
8111e460:	81bfff04 	addi	r6,r16,-4
8111e464:	01000904 	movi	r4,36
8111e468:	18800315 	stw	r2,12(r3)
8111e46c:	10c00215 	stw	r3,8(r2)
8111e470:	b4800204 	addi	r18,r22,8
8111e474:	21bfe52e 	bgeu	r4,r6,8111e40c <__reset+0xfb0fe40c>
8111e478:	a80b883a 	mov	r5,r21
8111e47c:	9009883a 	mov	r4,r18
8111e480:	111cf580 	call	8111cf58 <memmove>
8111e484:	b821883a 	mov	r16,r23
8111e488:	b027883a 	mov	r19,r22
8111e48c:	003f8a06 	br	8111e2b8 <__reset+0xfb0fe2b8>
8111e490:	300b883a 	mov	r5,r6
8111e494:	dfc00917 	ldw	ra,36(sp)
8111e498:	df000817 	ldw	fp,32(sp)
8111e49c:	ddc00717 	ldw	r23,28(sp)
8111e4a0:	dd800617 	ldw	r22,24(sp)
8111e4a4:	dd400517 	ldw	r21,20(sp)
8111e4a8:	dd000417 	ldw	r20,16(sp)
8111e4ac:	dcc00317 	ldw	r19,12(sp)
8111e4b0:	dc800217 	ldw	r18,8(sp)
8111e4b4:	dc400117 	ldw	r17,4(sp)
8111e4b8:	dc000017 	ldw	r16,0(sp)
8111e4bc:	dec00a04 	addi	sp,sp,40
8111e4c0:	11126701 	jmpi	81112670 <_malloc_r>
8111e4c4:	a8c00017 	ldw	r3,0(r21)
8111e4c8:	90c00015 	stw	r3,0(r18)
8111e4cc:	a8c00117 	ldw	r3,4(r21)
8111e4d0:	90c00115 	stw	r3,4(r18)
8111e4d4:	00c006c4 	movi	r3,27
8111e4d8:	19804536 	bltu	r3,r6,8111e5f0 <_realloc_r+0x478>
8111e4dc:	90800204 	addi	r2,r18,8
8111e4e0:	a8c00204 	addi	r3,r21,8
8111e4e4:	003f6306 	br	8111e274 <__reset+0xfb0fe274>
8111e4e8:	9005883a 	mov	r2,r18
8111e4ec:	a8c00017 	ldw	r3,0(r21)
8111e4f0:	b821883a 	mov	r16,r23
8111e4f4:	b027883a 	mov	r19,r22
8111e4f8:	10c00015 	stw	r3,0(r2)
8111e4fc:	a8c00117 	ldw	r3,4(r21)
8111e500:	10c00115 	stw	r3,4(r2)
8111e504:	a8c00217 	ldw	r3,8(r21)
8111e508:	10c00215 	stw	r3,8(r2)
8111e50c:	003f6a06 	br	8111e2b8 <__reset+0xfb0fe2b8>
8111e510:	9c67883a 	add	r19,r19,r17
8111e514:	4445c83a 	sub	r2,r8,r17
8111e518:	e4c00215 	stw	r19,8(fp)
8111e51c:	10800054 	ori	r2,r2,1
8111e520:	98800115 	stw	r2,4(r19)
8111e524:	a8bfff17 	ldw	r2,-4(r21)
8111e528:	a009883a 	mov	r4,r20
8111e52c:	1080004c 	andi	r2,r2,1
8111e530:	1462b03a 	or	r17,r2,r17
8111e534:	ac7fff15 	stw	r17,-4(r21)
8111e538:	11295d40 	call	811295d4 <__malloc_unlock>
8111e53c:	a805883a 	mov	r2,r21
8111e540:	003f6b06 	br	8111e2f0 <__reset+0xfb0fe2f0>
8111e544:	a80b883a 	mov	r5,r21
8111e548:	9009883a 	mov	r4,r18
8111e54c:	111cf580 	call	8111cf58 <memmove>
8111e550:	003f4e06 	br	8111e28c <__reset+0xfb0fe28c>
8111e554:	89000404 	addi	r4,r17,16
8111e558:	b93fbc16 	blt	r23,r4,8111e44c <__reset+0xfb0fe44c>
8111e55c:	b0800317 	ldw	r2,12(r22)
8111e560:	b0c00217 	ldw	r3,8(r22)
8111e564:	81bfff04 	addi	r6,r16,-4
8111e568:	01000904 	movi	r4,36
8111e56c:	18800315 	stw	r2,12(r3)
8111e570:	10c00215 	stw	r3,8(r2)
8111e574:	b4800204 	addi	r18,r22,8
8111e578:	21804336 	bltu	r4,r6,8111e688 <_realloc_r+0x510>
8111e57c:	008004c4 	movi	r2,19
8111e580:	11803f2e 	bgeu	r2,r6,8111e680 <_realloc_r+0x508>
8111e584:	a8800017 	ldw	r2,0(r21)
8111e588:	b0800215 	stw	r2,8(r22)
8111e58c:	a8800117 	ldw	r2,4(r21)
8111e590:	b0800315 	stw	r2,12(r22)
8111e594:	008006c4 	movi	r2,27
8111e598:	11803f36 	bltu	r2,r6,8111e698 <_realloc_r+0x520>
8111e59c:	b0800404 	addi	r2,r22,16
8111e5a0:	ad400204 	addi	r21,r21,8
8111e5a4:	a8c00017 	ldw	r3,0(r21)
8111e5a8:	10c00015 	stw	r3,0(r2)
8111e5ac:	a8c00117 	ldw	r3,4(r21)
8111e5b0:	10c00115 	stw	r3,4(r2)
8111e5b4:	a8c00217 	ldw	r3,8(r21)
8111e5b8:	10c00215 	stw	r3,8(r2)
8111e5bc:	b447883a 	add	r3,r22,r17
8111e5c0:	bc45c83a 	sub	r2,r23,r17
8111e5c4:	e0c00215 	stw	r3,8(fp)
8111e5c8:	10800054 	ori	r2,r2,1
8111e5cc:	18800115 	stw	r2,4(r3)
8111e5d0:	b0800117 	ldw	r2,4(r22)
8111e5d4:	a009883a 	mov	r4,r20
8111e5d8:	1080004c 	andi	r2,r2,1
8111e5dc:	1462b03a 	or	r17,r2,r17
8111e5e0:	b4400115 	stw	r17,4(r22)
8111e5e4:	11295d40 	call	811295d4 <__malloc_unlock>
8111e5e8:	9005883a 	mov	r2,r18
8111e5ec:	003f4006 	br	8111e2f0 <__reset+0xfb0fe2f0>
8111e5f0:	a8c00217 	ldw	r3,8(r21)
8111e5f4:	90c00215 	stw	r3,8(r18)
8111e5f8:	a8c00317 	ldw	r3,12(r21)
8111e5fc:	90c00315 	stw	r3,12(r18)
8111e600:	30801126 	beq	r6,r2,8111e648 <_realloc_r+0x4d0>
8111e604:	90800404 	addi	r2,r18,16
8111e608:	a8c00404 	addi	r3,r21,16
8111e60c:	003f1906 	br	8111e274 <__reset+0xfb0fe274>
8111e610:	90ffff17 	ldw	r3,-4(r18)
8111e614:	00bfff04 	movi	r2,-4
8111e618:	a825883a 	mov	r18,r21
8111e61c:	1884703a 	and	r2,r3,r2
8111e620:	80a1883a 	add	r16,r16,r2
8111e624:	003f2406 	br	8111e2b8 <__reset+0xfb0fe2b8>
8111e628:	a8800217 	ldw	r2,8(r21)
8111e62c:	b0800415 	stw	r2,16(r22)
8111e630:	a8800317 	ldw	r2,12(r21)
8111e634:	b0800515 	stw	r2,20(r22)
8111e638:	31000a26 	beq	r6,r4,8111e664 <_realloc_r+0x4ec>
8111e63c:	b0800604 	addi	r2,r22,24
8111e640:	ad400404 	addi	r21,r21,16
8111e644:	003fa906 	br	8111e4ec <__reset+0xfb0fe4ec>
8111e648:	a9000417 	ldw	r4,16(r21)
8111e64c:	90800604 	addi	r2,r18,24
8111e650:	a8c00604 	addi	r3,r21,24
8111e654:	91000415 	stw	r4,16(r18)
8111e658:	a9000517 	ldw	r4,20(r21)
8111e65c:	91000515 	stw	r4,20(r18)
8111e660:	003f0406 	br	8111e274 <__reset+0xfb0fe274>
8111e664:	a8c00417 	ldw	r3,16(r21)
8111e668:	ad400604 	addi	r21,r21,24
8111e66c:	b0800804 	addi	r2,r22,32
8111e670:	b0c00615 	stw	r3,24(r22)
8111e674:	a8ffff17 	ldw	r3,-4(r21)
8111e678:	b0c00715 	stw	r3,28(r22)
8111e67c:	003f9b06 	br	8111e4ec <__reset+0xfb0fe4ec>
8111e680:	9005883a 	mov	r2,r18
8111e684:	003fc706 	br	8111e5a4 <__reset+0xfb0fe5a4>
8111e688:	a80b883a 	mov	r5,r21
8111e68c:	9009883a 	mov	r4,r18
8111e690:	111cf580 	call	8111cf58 <memmove>
8111e694:	003fc906 	br	8111e5bc <__reset+0xfb0fe5bc>
8111e698:	a8800217 	ldw	r2,8(r21)
8111e69c:	b0800415 	stw	r2,16(r22)
8111e6a0:	a8800317 	ldw	r2,12(r21)
8111e6a4:	b0800515 	stw	r2,20(r22)
8111e6a8:	31000726 	beq	r6,r4,8111e6c8 <_realloc_r+0x550>
8111e6ac:	b0800604 	addi	r2,r22,24
8111e6b0:	ad400404 	addi	r21,r21,16
8111e6b4:	003fbb06 	br	8111e5a4 <__reset+0xfb0fe5a4>
8111e6b8:	a009883a 	mov	r4,r20
8111e6bc:	11295d40 	call	811295d4 <__malloc_unlock>
8111e6c0:	0005883a 	mov	r2,zero
8111e6c4:	003f0a06 	br	8111e2f0 <__reset+0xfb0fe2f0>
8111e6c8:	a8c00417 	ldw	r3,16(r21)
8111e6cc:	ad400604 	addi	r21,r21,24
8111e6d0:	b0800804 	addi	r2,r22,32
8111e6d4:	b0c00615 	stw	r3,24(r22)
8111e6d8:	a8ffff17 	ldw	r3,-4(r21)
8111e6dc:	b0c00715 	stw	r3,28(r22)
8111e6e0:	003fb006 	br	8111e5a4 <__reset+0xfb0fe5a4>

8111e6e4 <__fpclassifyd>:
8111e6e4:	00a00034 	movhi	r2,32768
8111e6e8:	10bfffc4 	addi	r2,r2,-1
8111e6ec:	2884703a 	and	r2,r5,r2
8111e6f0:	10000726 	beq	r2,zero,8111e710 <__fpclassifyd+0x2c>
8111e6f4:	00fffc34 	movhi	r3,65520
8111e6f8:	019ff834 	movhi	r6,32736
8111e6fc:	28c7883a 	add	r3,r5,r3
8111e700:	31bfffc4 	addi	r6,r6,-1
8111e704:	30c00536 	bltu	r6,r3,8111e71c <__fpclassifyd+0x38>
8111e708:	00800104 	movi	r2,4
8111e70c:	f800283a 	ret
8111e710:	2000021e 	bne	r4,zero,8111e71c <__fpclassifyd+0x38>
8111e714:	00800084 	movi	r2,2
8111e718:	f800283a 	ret
8111e71c:	00dffc34 	movhi	r3,32752
8111e720:	019ff834 	movhi	r6,32736
8111e724:	28cb883a 	add	r5,r5,r3
8111e728:	31bfffc4 	addi	r6,r6,-1
8111e72c:	317ff62e 	bgeu	r6,r5,8111e708 <__reset+0xfb0fe708>
8111e730:	01400434 	movhi	r5,16
8111e734:	297fffc4 	addi	r5,r5,-1
8111e738:	28800236 	bltu	r5,r2,8111e744 <__fpclassifyd+0x60>
8111e73c:	008000c4 	movi	r2,3
8111e740:	f800283a 	ret
8111e744:	10c00226 	beq	r2,r3,8111e750 <__fpclassifyd+0x6c>
8111e748:	0005883a 	mov	r2,zero
8111e74c:	f800283a 	ret
8111e750:	2005003a 	cmpeq	r2,r4,zero
8111e754:	f800283a 	ret

8111e758 <__sccl>:
8111e758:	2a000003 	ldbu	r8,0(r5)
8111e75c:	00801784 	movi	r2,94
8111e760:	40802a26 	beq	r8,r2,8111e80c <__sccl+0xb4>
8111e764:	29400044 	addi	r5,r5,1
8111e768:	000f883a 	mov	r7,zero
8111e76c:	0013883a 	mov	r9,zero
8111e770:	2007883a 	mov	r3,r4
8111e774:	21804004 	addi	r6,r4,256
8111e778:	19c00005 	stb	r7,0(r3)
8111e77c:	18c00044 	addi	r3,r3,1
8111e780:	19bffd1e 	bne	r3,r6,8111e778 <__reset+0xfb0fe778>
8111e784:	40001126 	beq	r8,zero,8111e7cc <__sccl+0x74>
8111e788:	00800044 	movi	r2,1
8111e78c:	124fc83a 	sub	r7,r2,r9
8111e790:	02800b44 	movi	r10,45
8111e794:	02c01744 	movi	r11,93
8111e798:	2205883a 	add	r2,r4,r8
8111e79c:	11c00005 	stb	r7,0(r2)
8111e7a0:	28800044 	addi	r2,r5,1
8111e7a4:	28c00003 	ldbu	r3,0(r5)
8111e7a8:	1a800a26 	beq	r3,r10,8111e7d4 <__sccl+0x7c>
8111e7ac:	1ac00426 	beq	r3,r11,8111e7c0 <__sccl+0x68>
8111e7b0:	18000426 	beq	r3,zero,8111e7c4 <__sccl+0x6c>
8111e7b4:	1811883a 	mov	r8,r3
8111e7b8:	100b883a 	mov	r5,r2
8111e7bc:	003ff606 	br	8111e798 <__reset+0xfb0fe798>
8111e7c0:	f800283a 	ret
8111e7c4:	2805883a 	mov	r2,r5
8111e7c8:	f800283a 	ret
8111e7cc:	28bfffc4 	addi	r2,r5,-1
8111e7d0:	f800283a 	ret
8111e7d4:	12400003 	ldbu	r9,0(r2)
8111e7d8:	4ac01126 	beq	r9,r11,8111e820 <__sccl+0xc8>
8111e7dc:	4a001016 	blt	r9,r8,8111e820 <__sccl+0xc8>
8111e7e0:	41800044 	addi	r6,r8,1
8111e7e4:	29400084 	addi	r5,r5,2
8111e7e8:	2187883a 	add	r3,r4,r6
8111e7ec:	00000106 	br	8111e7f4 <__sccl+0x9c>
8111e7f0:	31800044 	addi	r6,r6,1
8111e7f4:	19c00005 	stb	r7,0(r3)
8111e7f8:	3011883a 	mov	r8,r6
8111e7fc:	18c00044 	addi	r3,r3,1
8111e800:	327ffb16 	blt	r6,r9,8111e7f0 <__reset+0xfb0fe7f0>
8111e804:	10800084 	addi	r2,r2,2
8111e808:	003fe606 	br	8111e7a4 <__reset+0xfb0fe7a4>
8111e80c:	2a000043 	ldbu	r8,1(r5)
8111e810:	01c00044 	movi	r7,1
8111e814:	29400084 	addi	r5,r5,2
8111e818:	02400044 	movi	r9,1
8111e81c:	003fd406 	br	8111e770 <__reset+0xfb0fe770>
8111e820:	5011883a 	mov	r8,r10
8111e824:	003fe406 	br	8111e7b8 <__reset+0xfb0fe7b8>

8111e828 <nanf>:
8111e828:	009ff034 	movhi	r2,32704
8111e82c:	f800283a 	ret

8111e830 <strcmp>:
8111e830:	2144b03a 	or	r2,r4,r5
8111e834:	108000cc 	andi	r2,r2,3
8111e838:	1000171e 	bne	r2,zero,8111e898 <strcmp+0x68>
8111e83c:	20800017 	ldw	r2,0(r4)
8111e840:	28c00017 	ldw	r3,0(r5)
8111e844:	10c0141e 	bne	r2,r3,8111e898 <strcmp+0x68>
8111e848:	027fbff4 	movhi	r9,65279
8111e84c:	4a7fbfc4 	addi	r9,r9,-257
8111e850:	0086303a 	nor	r3,zero,r2
8111e854:	02202074 	movhi	r8,32897
8111e858:	1245883a 	add	r2,r2,r9
8111e85c:	42202004 	addi	r8,r8,-32640
8111e860:	10c4703a 	and	r2,r2,r3
8111e864:	1204703a 	and	r2,r2,r8
8111e868:	10000226 	beq	r2,zero,8111e874 <strcmp+0x44>
8111e86c:	00002306 	br	8111e8fc <strcmp+0xcc>
8111e870:	1000221e 	bne	r2,zero,8111e8fc <strcmp+0xcc>
8111e874:	21000104 	addi	r4,r4,4
8111e878:	20c00017 	ldw	r3,0(r4)
8111e87c:	29400104 	addi	r5,r5,4
8111e880:	29800017 	ldw	r6,0(r5)
8111e884:	1a4f883a 	add	r7,r3,r9
8111e888:	00c4303a 	nor	r2,zero,r3
8111e88c:	3884703a 	and	r2,r7,r2
8111e890:	1204703a 	and	r2,r2,r8
8111e894:	19bff626 	beq	r3,r6,8111e870 <__reset+0xfb0fe870>
8111e898:	20800003 	ldbu	r2,0(r4)
8111e89c:	10c03fcc 	andi	r3,r2,255
8111e8a0:	18c0201c 	xori	r3,r3,128
8111e8a4:	18ffe004 	addi	r3,r3,-128
8111e8a8:	18000c26 	beq	r3,zero,8111e8dc <strcmp+0xac>
8111e8ac:	29800007 	ldb	r6,0(r5)
8111e8b0:	19800326 	beq	r3,r6,8111e8c0 <strcmp+0x90>
8111e8b4:	00001306 	br	8111e904 <strcmp+0xd4>
8111e8b8:	29800007 	ldb	r6,0(r5)
8111e8bc:	11800b1e 	bne	r2,r6,8111e8ec <strcmp+0xbc>
8111e8c0:	21000044 	addi	r4,r4,1
8111e8c4:	20c00003 	ldbu	r3,0(r4)
8111e8c8:	29400044 	addi	r5,r5,1
8111e8cc:	18803fcc 	andi	r2,r3,255
8111e8d0:	1080201c 	xori	r2,r2,128
8111e8d4:	10bfe004 	addi	r2,r2,-128
8111e8d8:	103ff71e 	bne	r2,zero,8111e8b8 <__reset+0xfb0fe8b8>
8111e8dc:	0007883a 	mov	r3,zero
8111e8e0:	28800003 	ldbu	r2,0(r5)
8111e8e4:	1885c83a 	sub	r2,r3,r2
8111e8e8:	f800283a 	ret
8111e8ec:	28800003 	ldbu	r2,0(r5)
8111e8f0:	18c03fcc 	andi	r3,r3,255
8111e8f4:	1885c83a 	sub	r2,r3,r2
8111e8f8:	f800283a 	ret
8111e8fc:	0005883a 	mov	r2,zero
8111e900:	f800283a 	ret
8111e904:	10c03fcc 	andi	r3,r2,255
8111e908:	003ff506 	br	8111e8e0 <__reset+0xfb0fe8e0>

8111e90c <sulp>:
8111e90c:	defffd04 	addi	sp,sp,-12
8111e910:	de00012e 	bgeu	sp,et,8111e918 <sulp+0xc>
8111e914:	003b68fa 	trap	3
8111e918:	dc400115 	stw	r17,4(sp)
8111e91c:	3023883a 	mov	r17,r6
8111e920:	dc000015 	stw	r16,0(sp)
8111e924:	dfc00215 	stw	ra,8(sp)
8111e928:	2821883a 	mov	r16,r5
8111e92c:	111dc180 	call	8111dc18 <__ulp>
8111e930:	88000c26 	beq	r17,zero,8111e964 <sulp+0x58>
8111e934:	841ffc2c 	andhi	r16,r16,32752
8111e938:	8020d53a 	srli	r16,r16,20
8111e93c:	01c01ac4 	movi	r7,107
8111e940:	3c21c83a 	sub	r16,r7,r16
8111e944:	0400070e 	bge	zero,r16,8111e964 <sulp+0x58>
8111e948:	8020953a 	slli	r16,r16,20
8111e94c:	01cffc34 	movhi	r7,16368
8111e950:	000d883a 	mov	r6,zero
8111e954:	81cf883a 	add	r7,r16,r7
8111e958:	1009883a 	mov	r4,r2
8111e95c:	180b883a 	mov	r5,r3
8111e960:	11112340 	call	81111234 <__muldf3>
8111e964:	dfc00217 	ldw	ra,8(sp)
8111e968:	dc400117 	ldw	r17,4(sp)
8111e96c:	dc000017 	ldw	r16,0(sp)
8111e970:	dec00304 	addi	sp,sp,12
8111e974:	f800283a 	ret

8111e978 <_strtod_r>:
8111e978:	deffe204 	addi	sp,sp,-120
8111e97c:	de00012e 	bgeu	sp,et,8111e984 <_strtod_r+0xc>
8111e980:	003b68fa 	trap	3
8111e984:	ddc01b15 	stw	r23,108(sp)
8111e988:	dd001815 	stw	r20,96(sp)
8111e98c:	dc801615 	stw	r18,88(sp)
8111e990:	dc401515 	stw	r17,84(sp)
8111e994:	dc001415 	stw	r16,80(sp)
8111e998:	d9400615 	stw	r5,24(sp)
8111e99c:	dfc01d15 	stw	ra,116(sp)
8111e9a0:	df001c15 	stw	fp,112(sp)
8111e9a4:	dd801a15 	stw	r22,104(sp)
8111e9a8:	dd401915 	stw	r21,100(sp)
8111e9ac:	dcc01715 	stw	r19,92(sp)
8111e9b0:	2021883a 	mov	r16,r4
8111e9b4:	d8000515 	stw	zero,20(sp)
8111e9b8:	2809883a 	mov	r4,r5
8111e9bc:	20800003 	ldbu	r2,0(r4)
8111e9c0:	01e044b4 	movhi	r7,33042
8111e9c4:	282f883a 	mov	r23,r5
8111e9c8:	10c03fcc 	andi	r3,r2,255
8111e9cc:	01400b44 	movi	r5,45
8111e9d0:	39fa7d04 	addi	r7,r7,-5644
8111e9d4:	3029883a 	mov	r20,r6
8111e9d8:	0025883a 	mov	r18,zero
8111e9dc:	0023883a 	mov	r17,zero
8111e9e0:	28c0ba36 	bltu	r5,r3,8111eccc <_strtod_r+0x354>
8111e9e4:	180690ba 	slli	r3,r3,2
8111e9e8:	19c7883a 	add	r3,r3,r7
8111e9ec:	18c00017 	ldw	r3,0(r3)
8111e9f0:	1800683a 	jmp	r3
8111e9f4:	8111eab4 	orhi	r4,r16,18346
8111e9f8:	8111eccc 	andi	r4,r16,18355
8111e9fc:	8111eccc 	andi	r4,r16,18355
8111ea00:	8111eccc 	andi	r4,r16,18355
8111ea04:	8111eccc 	andi	r4,r16,18355
8111ea08:	8111eccc 	andi	r4,r16,18355
8111ea0c:	8111eccc 	andi	r4,r16,18355
8111ea10:	8111eccc 	andi	r4,r16,18355
8111ea14:	8111eccc 	andi	r4,r16,18355
8111ea18:	8111ecb8 	rdprs	r4,r16,18354
8111ea1c:	8111ecb8 	rdprs	r4,r16,18354
8111ea20:	8111ecb8 	rdprs	r4,r16,18354
8111ea24:	8111ecb8 	rdprs	r4,r16,18354
8111ea28:	8111ecb8 	rdprs	r4,r16,18354
8111ea2c:	8111eccc 	andi	r4,r16,18355
8111ea30:	8111eccc 	andi	r4,r16,18355
8111ea34:	8111eccc 	andi	r4,r16,18355
8111ea38:	8111eccc 	andi	r4,r16,18355
8111ea3c:	8111eccc 	andi	r4,r16,18355
8111ea40:	8111eccc 	andi	r4,r16,18355
8111ea44:	8111eccc 	andi	r4,r16,18355
8111ea48:	8111eccc 	andi	r4,r16,18355
8111ea4c:	8111eccc 	andi	r4,r16,18355
8111ea50:	8111eccc 	andi	r4,r16,18355
8111ea54:	8111eccc 	andi	r4,r16,18355
8111ea58:	8111eccc 	andi	r4,r16,18355
8111ea5c:	8111eccc 	andi	r4,r16,18355
8111ea60:	8111eccc 	andi	r4,r16,18355
8111ea64:	8111eccc 	andi	r4,r16,18355
8111ea68:	8111eccc 	andi	r4,r16,18355
8111ea6c:	8111eccc 	andi	r4,r16,18355
8111ea70:	8111eccc 	andi	r4,r16,18355
8111ea74:	8111ecb8 	rdprs	r4,r16,18354
8111ea78:	8111eccc 	andi	r4,r16,18355
8111ea7c:	8111eccc 	andi	r4,r16,18355
8111ea80:	8111eccc 	andi	r4,r16,18355
8111ea84:	8111eccc 	andi	r4,r16,18355
8111ea88:	8111eccc 	andi	r4,r16,18355
8111ea8c:	8111eccc 	andi	r4,r16,18355
8111ea90:	8111eccc 	andi	r4,r16,18355
8111ea94:	8111eccc 	andi	r4,r16,18355
8111ea98:	8111eccc 	andi	r4,r16,18355
8111ea9c:	8111eccc 	andi	r4,r16,18355
8111eaa0:	8111eb0c 	andi	r4,r16,18348
8111eaa4:	8111eccc 	andi	r4,r16,18355
8111eaa8:	8111ecac 	andhi	r4,r16,18354
8111eaac:	00801244 	movi	r2,73
8111eab0:	88843526 	beq	r17,r2,8111fb88 <_strtod_r+0x1210>
8111eab4:	002b883a 	mov	r21,zero
8111eab8:	002d883a 	mov	r22,zero
8111eabc:	a0000526 	beq	r20,zero,8111ead4 <_strtod_r+0x15c>
8111eac0:	d8000715 	stw	zero,28(sp)
8111eac4:	a5c00015 	stw	r23,0(r20)
8111eac8:	d9000717 	ldw	r4,28(sp)
8111eacc:	20000126 	beq	r4,zero,8111ead4 <_strtod_r+0x15c>
8111ead0:	b5a0003c 	xorhi	r22,r22,32768
8111ead4:	a805883a 	mov	r2,r21
8111ead8:	b007883a 	mov	r3,r22
8111eadc:	dfc01d17 	ldw	ra,116(sp)
8111eae0:	df001c17 	ldw	fp,112(sp)
8111eae4:	ddc01b17 	ldw	r23,108(sp)
8111eae8:	dd801a17 	ldw	r22,104(sp)
8111eaec:	dd401917 	ldw	r21,100(sp)
8111eaf0:	dd001817 	ldw	r20,96(sp)
8111eaf4:	dcc01717 	ldw	r19,92(sp)
8111eaf8:	dc801617 	ldw	r18,88(sp)
8111eafc:	dc401517 	ldw	r17,84(sp)
8111eb00:	dc001417 	ldw	r16,80(sp)
8111eb04:	dec01e04 	addi	sp,sp,120
8111eb08:	f800283a 	ret
8111eb0c:	d8000715 	stw	zero,28(sp)
8111eb10:	24c00044 	addi	r19,r4,1
8111eb14:	dcc00615 	stw	r19,24(sp)
8111eb18:	20800043 	ldbu	r2,1(r4)
8111eb1c:	10c03fcc 	andi	r3,r2,255
8111eb20:	18c0201c 	xori	r3,r3,128
8111eb24:	18ffe004 	addi	r3,r3,-128
8111eb28:	183fe226 	beq	r3,zero,8111eab4 <__reset+0xfb0feab4>
8111eb2c:	11403fcc 	andi	r5,r2,255
8111eb30:	2940201c 	xori	r5,r5,128
8111eb34:	297fe004 	addi	r5,r5,-128
8111eb38:	00c00c04 	movi	r3,48
8111eb3c:	28c0e526 	beq	r5,r3,8111eed4 <_strtod_r+0x55c>
8111eb40:	dcc00815 	stw	r19,32(sp)
8111eb44:	0025883a 	mov	r18,zero
8111eb48:	10fff404 	addi	r3,r2,-48
8111eb4c:	18c03fcc 	andi	r3,r3,255
8111eb50:	01000244 	movi	r4,9
8111eb54:	20c37536 	bltu	r4,r3,8111f92c <_strtod_r+0xfb4>
8111eb58:	dd400817 	ldw	r21,32(sp)
8111eb5c:	0027883a 	mov	r19,zero
8111eb60:	0039883a 	mov	fp,zero
8111eb64:	002d883a 	mov	r22,zero
8111eb68:	01400204 	movi	r5,8
8111eb6c:	2d805a16 	blt	r5,r22,8111ecd8 <_strtod_r+0x360>
8111eb70:	e70002a4 	muli	fp,fp,10
8111eb74:	10c03fcc 	andi	r3,r2,255
8111eb78:	18c0201c 	xori	r3,r3,128
8111eb7c:	18ffe004 	addi	r3,r3,-128
8111eb80:	e0f9883a 	add	fp,fp,r3
8111eb84:	e73ff404 	addi	fp,fp,-48
8111eb88:	ad400044 	addi	r21,r21,1
8111eb8c:	dd400615 	stw	r21,24(sp)
8111eb90:	a8800003 	ldbu	r2,0(r21)
8111eb94:	b5800044 	addi	r22,r22,1
8111eb98:	10fff404 	addi	r3,r2,-48
8111eb9c:	18c03fcc 	andi	r3,r3,255
8111eba0:	20fff22e 	bgeu	r4,r3,8111eb6c <__reset+0xfb0feb6c>
8111eba4:	14403fcc 	andi	r17,r2,255
8111eba8:	8c40201c 	xori	r17,r17,128
8111ebac:	8c7fe004 	addi	r17,r17,-128
8111ebb0:	8009883a 	mov	r4,r16
8111ebb4:	111cb980 	call	8111cb98 <_localeconv_r>
8111ebb8:	11400017 	ldw	r5,0(r2)
8111ebbc:	8009883a 	mov	r4,r16
8111ebc0:	d9401315 	stw	r5,76(sp)
8111ebc4:	111cb980 	call	8111cb98 <_localeconv_r>
8111ebc8:	11000017 	ldw	r4,0(r2)
8111ebcc:	11139780 	call	81113978 <strlen>
8111ebd0:	d9401317 	ldw	r5,76(sp)
8111ebd4:	100d883a 	mov	r6,r2
8111ebd8:	a809883a 	mov	r4,r21
8111ebdc:	11245680 	call	81124568 <strncmp>
8111ebe0:	1000ce26 	beq	r2,zero,8111ef1c <_strtod_r+0x5a4>
8111ebe4:	b013883a 	mov	r9,r22
8111ebe8:	000b883a 	mov	r5,zero
8111ebec:	0015883a 	mov	r10,zero
8111ebf0:	0017883a 	mov	r11,zero
8111ebf4:	00801944 	movi	r2,101
8111ebf8:	88807826 	beq	r17,r2,8111eddc <_strtod_r+0x464>
8111ebfc:	00801144 	movi	r2,69
8111ec00:	88807626 	beq	r17,r2,8111eddc <_strtod_r+0x464>
8111ec04:	002b883a 	mov	r21,zero
8111ec08:	48003d1e 	bne	r9,zero,8111ed00 <_strtod_r+0x388>
8111ec0c:	2800391e 	bne	r5,zero,8111ecf4 <_strtod_r+0x37c>
8111ec10:	9000381e 	bne	r18,zero,8111ecf4 <_strtod_r+0x37c>
8111ec14:	583fa71e 	bne	r11,zero,8111eab4 <__reset+0xfb0feab4>
8111ec18:	00801384 	movi	r2,78
8111ec1c:	88800526 	beq	r17,r2,8111ec34 <_strtod_r+0x2bc>
8111ec20:	147fa20e 	bge	r2,r17,8111eaac <__reset+0xfb0feaac>
8111ec24:	00801a44 	movi	r2,105
8111ec28:	8883d726 	beq	r17,r2,8111fb88 <_strtod_r+0x1210>
8111ec2c:	00801b84 	movi	r2,110
8111ec30:	88bfa01e 	bne	r17,r2,8111eab4 <__reset+0xfb0feab4>
8111ec34:	01604534 	movhi	r5,33044
8111ec38:	d9000617 	ldw	r4,24(sp)
8111ec3c:	297fed04 	addi	r5,r5,-76
8111ec40:	01c00644 	movi	r7,25
8111ec44:	00000b06 	br	8111ec74 <_strtod_r+0x2fc>
8111ec48:	21000044 	addi	r4,r4,1
8111ec4c:	20800003 	ldbu	r2,0(r4)
8111ec50:	10ffefc4 	addi	r3,r2,-65
8111ec54:	10803fcc 	andi	r2,r2,255
8111ec58:	1080201c 	xori	r2,r2,128
8111ec5c:	18c03fcc 	andi	r3,r3,255
8111ec60:	10bfe004 	addi	r2,r2,-128
8111ec64:	38c00136 	bltu	r7,r3,8111ec6c <_strtod_r+0x2f4>
8111ec68:	10800804 	addi	r2,r2,32
8111ec6c:	29400044 	addi	r5,r5,1
8111ec70:	11bf901e 	bne	r2,r6,8111eab4 <__reset+0xfb0feab4>
8111ec74:	29800007 	ldb	r6,0(r5)
8111ec78:	303ff31e 	bne	r6,zero,8111ec48 <__reset+0xfb0fec48>
8111ec7c:	20800044 	addi	r2,r4,1
8111ec80:	d8800615 	stw	r2,24(sp)
8111ec84:	20c00047 	ldb	r3,1(r4)
8111ec88:	00800a04 	movi	r2,40
8111ec8c:	18849d26 	beq	r3,r2,8111ff04 <_strtod_r+0x158c>
8111ec90:	047ffe34 	movhi	r17,65528
8111ec94:	0025883a 	mov	r18,zero
8111ec98:	902b883a 	mov	r21,r18
8111ec9c:	882d883a 	mov	r22,r17
8111eca0:	a03f8926 	beq	r20,zero,8111eac8 <__reset+0xfb0feac8>
8111eca4:	ddc00617 	ldw	r23,24(sp)
8111eca8:	003f8606 	br	8111eac4 <__reset+0xfb0feac4>
8111ecac:	00800044 	movi	r2,1
8111ecb0:	d8800715 	stw	r2,28(sp)
8111ecb4:	003f9606 	br	8111eb10 <__reset+0xfb0feb10>
8111ecb8:	21000044 	addi	r4,r4,1
8111ecbc:	d9000615 	stw	r4,24(sp)
8111ecc0:	20800003 	ldbu	r2,0(r4)
8111ecc4:	10c03fcc 	andi	r3,r2,255
8111ecc8:	28ff462e 	bgeu	r5,r3,8111e9e4 <__reset+0xfb0fe9e4>
8111eccc:	2027883a 	mov	r19,r4
8111ecd0:	d8000715 	stw	zero,28(sp)
8111ecd4:	003f9506 	br	8111eb2c <__reset+0xfb0feb2c>
8111ecd8:	9cc002a4 	muli	r19,r19,10
8111ecdc:	10803fcc 	andi	r2,r2,255
8111ece0:	1080201c 	xori	r2,r2,128
8111ece4:	10bfe004 	addi	r2,r2,-128
8111ece8:	9885883a 	add	r2,r19,r2
8111ecec:	14fff404 	addi	r19,r2,-48
8111ecf0:	003fa506 	br	8111eb88 <__reset+0xfb0feb88>
8111ecf4:	002b883a 	mov	r21,zero
8111ecf8:	002d883a 	mov	r22,zero
8111ecfc:	003fe806 	br	8111eca0 <__reset+0xfb0feca0>
8111ed00:	aaabc83a 	sub	r21,r21,r10
8111ed04:	b000011e 	bne	r22,zero,8111ed0c <_strtod_r+0x394>
8111ed08:	482d883a 	mov	r22,r9
8111ed0c:	00800404 	movi	r2,16
8111ed10:	482f883a 	mov	r23,r9
8111ed14:	1240010e 	bge	r2,r9,8111ed1c <_strtod_r+0x3a4>
8111ed18:	102f883a 	mov	r23,r2
8111ed1c:	e009883a 	mov	r4,fp
8111ed20:	da401315 	stw	r9,76(sp)
8111ed24:	11275880 	call	81127588 <__floatunsidf>
8111ed28:	1025883a 	mov	r18,r2
8111ed2c:	00800244 	movi	r2,9
8111ed30:	1823883a 	mov	r17,r3
8111ed34:	da401317 	ldw	r9,76(sp)
8111ed38:	15c0160e 	bge	r2,r23,8111ed94 <_strtod_r+0x41c>
8111ed3c:	b8bffdc4 	addi	r2,r23,-9
8111ed40:	100490fa 	slli	r2,r2,3
8111ed44:	180b883a 	mov	r5,r3
8111ed48:	00e04534 	movhi	r3,33044
8111ed4c:	18ffb804 	addi	r3,r3,-288
8111ed50:	1885883a 	add	r2,r3,r2
8111ed54:	11800017 	ldw	r6,0(r2)
8111ed58:	11c00117 	ldw	r7,4(r2)
8111ed5c:	9009883a 	mov	r4,r18
8111ed60:	11112340 	call	81111234 <__muldf3>
8111ed64:	9809883a 	mov	r4,r19
8111ed68:	1025883a 	mov	r18,r2
8111ed6c:	1823883a 	mov	r17,r3
8111ed70:	11275880 	call	81127588 <__floatunsidf>
8111ed74:	9009883a 	mov	r4,r18
8111ed78:	880b883a 	mov	r5,r17
8111ed7c:	100d883a 	mov	r6,r2
8111ed80:	180f883a 	mov	r7,r3
8111ed84:	11257240 	call	81125724 <__adddf3>
8111ed88:	da401317 	ldw	r9,76(sp)
8111ed8c:	1025883a 	mov	r18,r2
8111ed90:	1823883a 	mov	r17,r3
8111ed94:	008003c4 	movi	r2,15
8111ed98:	12407b16 	blt	r2,r9,8111ef88 <_strtod_r+0x610>
8111ed9c:	a83fbe26 	beq	r21,zero,8111ec98 <__reset+0xfb0fec98>
8111eda0:	0543670e 	bge	zero,r21,8111fb40 <_strtod_r+0x11c8>
8111eda4:	00c00584 	movi	r3,22
8111eda8:	1d42e816 	blt	r3,r21,8111f94c <_strtod_r+0xfd4>
8111edac:	a82a90fa 	slli	r21,r21,3
8111edb0:	00a04534 	movhi	r2,33044
8111edb4:	10bfb804 	addi	r2,r2,-288
8111edb8:	1545883a 	add	r2,r2,r21
8111edbc:	11000017 	ldw	r4,0(r2)
8111edc0:	11400117 	ldw	r5,4(r2)
8111edc4:	900d883a 	mov	r6,r18
8111edc8:	880f883a 	mov	r7,r17
8111edcc:	11112340 	call	81111234 <__muldf3>
8111edd0:	102b883a 	mov	r21,r2
8111edd4:	182d883a 	mov	r22,r3
8111edd8:	003fb106 	br	8111eca0 <__reset+0xfb0feca0>
8111eddc:	4801b526 	beq	r9,zero,8111f4b4 <_strtod_r+0xb3c>
8111ede0:	ddc00617 	ldw	r23,24(sp)
8111ede4:	00c00ac4 	movi	r3,43
8111ede8:	b8800044 	addi	r2,r23,1
8111edec:	d8800615 	stw	r2,24(sp)
8111edf0:	b8800047 	ldb	r2,1(r23)
8111edf4:	10c1e926 	beq	r2,r3,8111f59c <_strtod_r+0xc24>
8111edf8:	00c00b44 	movi	r3,45
8111edfc:	10c1ec26 	beq	r2,r3,8111f5b0 <_strtod_r+0xc38>
8111ee00:	1023883a 	mov	r17,r2
8111ee04:	0019883a 	mov	r12,zero
8111ee08:	88bff404 	addi	r2,r17,-48
8111ee0c:	00c00244 	movi	r3,9
8111ee10:	1881b736 	bltu	r3,r2,8111f4f0 <_strtod_r+0xb78>
8111ee14:	00800c04 	movi	r2,48
8111ee18:	8880071e 	bne	r17,r2,8111ee38 <_strtod_r+0x4c0>
8111ee1c:	d8800617 	ldw	r2,24(sp)
8111ee20:	8807883a 	mov	r3,r17
8111ee24:	10800044 	addi	r2,r2,1
8111ee28:	d8800615 	stw	r2,24(sp)
8111ee2c:	14400007 	ldb	r17,0(r2)
8111ee30:	10800044 	addi	r2,r2,1
8111ee34:	88fffc26 	beq	r17,r3,8111ee28 <__reset+0xfb0fee28>
8111ee38:	88bff3c4 	addi	r2,r17,-49
8111ee3c:	00c00204 	movi	r3,8
8111ee40:	18bf7036 	bltu	r3,r2,8111ec04 <__reset+0xfb0fec04>
8111ee44:	db800617 	ldw	r14,24(sp)
8111ee48:	88bff404 	addi	r2,r17,-48
8111ee4c:	03400244 	movi	r13,9
8111ee50:	71c00044 	addi	r7,r14,1
8111ee54:	d9c00615 	stw	r7,24(sp)
8111ee58:	74400043 	ldbu	r17,1(r14)
8111ee5c:	88fff404 	addi	r3,r17,-48
8111ee60:	8c403fcc 	andi	r17,r17,255
8111ee64:	8c40201c 	xori	r17,r17,128
8111ee68:	18c03fcc 	andi	r3,r3,255
8111ee6c:	8c7fe004 	addi	r17,r17,-128
8111ee70:	68c00e36 	bltu	r13,r3,8111eeac <_strtod_r+0x534>
8111ee74:	71000084 	addi	r4,r14,2
8111ee78:	d9000615 	stw	r4,24(sp)
8111ee7c:	108002a4 	muli	r2,r2,10
8111ee80:	21800003 	ldbu	r6,0(r4)
8111ee84:	200f883a 	mov	r7,r4
8111ee88:	1463883a 	add	r17,r2,r17
8111ee8c:	30fff404 	addi	r3,r6,-48
8111ee90:	88bff404 	addi	r2,r17,-48
8111ee94:	34403fcc 	andi	r17,r6,255
8111ee98:	8c40201c 	xori	r17,r17,128
8111ee9c:	18c03fcc 	andi	r3,r3,255
8111eea0:	8c7fe004 	addi	r17,r17,-128
8111eea4:	21000044 	addi	r4,r4,1
8111eea8:	68fff32e 	bgeu	r13,r3,8111ee78 <__reset+0xfb0fee78>
8111eeac:	3b8fc83a 	sub	r7,r7,r14
8111eeb0:	00c00204 	movi	r3,8
8111eeb4:	19c29716 	blt	r3,r7,8111f914 <_strtod_r+0xf9c>
8111eeb8:	102b883a 	mov	r21,r2
8111eebc:	009387c4 	movi	r2,19999
8111eec0:	1540010e 	bge	r2,r21,8111eec8 <_strtod_r+0x550>
8111eec4:	102b883a 	mov	r21,r2
8111eec8:	603f4f26 	beq	r12,zero,8111ec08 <__reset+0xfb0fec08>
8111eecc:	056bc83a 	sub	r21,zero,r21
8111eed0:	003f4d06 	br	8111ec08 <__reset+0xfb0fec08>
8111eed4:	98800047 	ldb	r2,1(r19)
8111eed8:	00c01604 	movi	r3,88
8111eedc:	10c1de26 	beq	r2,r3,8111f658 <_strtod_r+0xce0>
8111eee0:	00c01e04 	movi	r3,120
8111eee4:	10c1dc26 	beq	r2,r3,8111f658 <_strtod_r+0xce0>
8111eee8:	98c00044 	addi	r3,r19,1
8111eeec:	1827883a 	mov	r19,r3
8111eef0:	d8c00615 	stw	r3,24(sp)
8111eef4:	18c00044 	addi	r3,r3,1
8111eef8:	18bfffc3 	ldbu	r2,-1(r3)
8111eefc:	11003fcc 	andi	r4,r2,255
8111ef00:	2100201c 	xori	r4,r4,128
8111ef04:	213fe004 	addi	r4,r4,-128
8111ef08:	217ff826 	beq	r4,r5,8111eeec <__reset+0xfb0feeec>
8111ef0c:	203f7926 	beq	r4,zero,8111ecf4 <__reset+0xfb0fecf4>
8111ef10:	dcc00815 	stw	r19,32(sp)
8111ef14:	04800044 	movi	r18,1
8111ef18:	003f0b06 	br	8111eb48 <__reset+0xfb0feb48>
8111ef1c:	8009883a 	mov	r4,r16
8111ef20:	111cb980 	call	8111cb98 <_localeconv_r>
8111ef24:	11000017 	ldw	r4,0(r2)
8111ef28:	11139780 	call	81113978 <strlen>
8111ef2c:	d8c00617 	ldw	r3,24(sp)
8111ef30:	1885883a 	add	r2,r3,r2
8111ef34:	d8800615 	stw	r2,24(sp)
8111ef38:	14400007 	ldb	r17,0(r2)
8111ef3c:	b001881e 	bne	r22,zero,8111f560 <_strtod_r+0xbe8>
8111ef40:	00c00c04 	movi	r3,48
8111ef44:	88c3391e 	bne	r17,r3,8111fc2c <_strtod_r+0x12b4>
8111ef48:	10c00044 	addi	r3,r2,1
8111ef4c:	8809883a 	mov	r4,r17
8111ef50:	d8c00615 	stw	r3,24(sp)
8111ef54:	1c400007 	ldb	r17,0(r3)
8111ef58:	188bc83a 	sub	r5,r3,r2
8111ef5c:	18c00044 	addi	r3,r3,1
8111ef60:	893ffb26 	beq	r17,r4,8111ef50 <__reset+0xfb0fef50>
8111ef64:	88bff3c4 	addi	r2,r17,-49
8111ef68:	00c00204 	movi	r3,8
8111ef6c:	1882e72e 	bgeu	r3,r2,8111fb0c <_strtod_r+0x1194>
8111ef70:	00801944 	movi	r2,101
8111ef74:	88814d26 	beq	r17,r2,8111f4ac <_strtod_r+0xb34>
8111ef78:	0013883a 	mov	r9,zero
8111ef7c:	0015883a 	mov	r10,zero
8111ef80:	02c00044 	movi	r11,1
8111ef84:	003f1d06 	br	8111ebfc <__reset+0xfb0febfc>
8111ef88:	4defc83a 	sub	r23,r9,r23
8111ef8c:	bd6f883a 	add	r23,r23,r21
8111ef90:	05c21e0e 	bge	zero,r23,8111f80c <_strtod_r+0xe94>
8111ef94:	b88003cc 	andi	r2,r23,15
8111ef98:	10000d26 	beq	r2,zero,8111efd0 <_strtod_r+0x658>
8111ef9c:	100490fa 	slli	r2,r2,3
8111efa0:	00e04534 	movhi	r3,33044
8111efa4:	18ffb804 	addi	r3,r3,-288
8111efa8:	1885883a 	add	r2,r3,r2
8111efac:	11000017 	ldw	r4,0(r2)
8111efb0:	11400117 	ldw	r5,4(r2)
8111efb4:	900d883a 	mov	r6,r18
8111efb8:	880f883a 	mov	r7,r17
8111efbc:	da401315 	stw	r9,76(sp)
8111efc0:	11112340 	call	81111234 <__muldf3>
8111efc4:	da401317 	ldw	r9,76(sp)
8111efc8:	1025883a 	mov	r18,r2
8111efcc:	1823883a 	mov	r17,r3
8111efd0:	023ffc04 	movi	r8,-16
8111efd4:	ba10703a 	and	r8,r23,r8
8111efd8:	40003c26 	beq	r8,zero,8111f0cc <_strtod_r+0x754>
8111efdc:	00804d04 	movi	r2,308
8111efe0:	1201cd16 	blt	r2,r8,8111f718 <_strtod_r+0xda0>
8111efe4:	4011d13a 	srai	r8,r8,4
8111efe8:	03000044 	movi	r12,1
8111efec:	62037c0e 	bge	r12,r8,8111fde0 <_strtod_r+0x1468>
8111eff0:	01204534 	movhi	r4,33044
8111eff4:	213fae04 	addi	r4,r4,-328
8111eff8:	2015883a 	mov	r10,r4
8111effc:	0027883a 	mov	r19,zero
8111f000:	d9000915 	stw	r4,36(sp)
8111f004:	9005883a 	mov	r2,r18
8111f008:	8807883a 	mov	r3,r17
8111f00c:	dc000c15 	stw	r16,48(sp)
8111f010:	dc800e15 	stw	r18,56(sp)
8111f014:	9821883a 	mov	r16,r19
8111f018:	0009883a 	mov	r4,zero
8111f01c:	8827883a 	mov	r19,r17
8111f020:	602f883a 	mov	r23,r12
8111f024:	da400a15 	stw	r9,40(sp)
8111f028:	5025883a 	mov	r18,r10
8111f02c:	4023883a 	mov	r17,r8
8111f030:	8980004c 	andi	r6,r17,1
8111f034:	30000626 	beq	r6,zero,8111f050 <_strtod_r+0x6d8>
8111f038:	91800017 	ldw	r6,0(r18)
8111f03c:	91c00117 	ldw	r7,4(r18)
8111f040:	1009883a 	mov	r4,r2
8111f044:	180b883a 	mov	r5,r3
8111f048:	11112340 	call	81111234 <__muldf3>
8111f04c:	01000044 	movi	r4,1
8111f050:	8823d07a 	srai	r17,r17,1
8111f054:	84000044 	addi	r16,r16,1
8111f058:	94800204 	addi	r18,r18,8
8111f05c:	8dfff41e 	bne	r17,r23,8111f030 <__reset+0xfb0ff030>
8111f060:	21003fcc 	andi	r4,r4,255
8111f064:	9823883a 	mov	r17,r19
8111f068:	da400a17 	ldw	r9,40(sp)
8111f06c:	8027883a 	mov	r19,r16
8111f070:	dc800e17 	ldw	r18,56(sp)
8111f074:	dc000c17 	ldw	r16,48(sp)
8111f078:	2003b11e 	bne	r4,zero,8111ff40 <_strtod_r+0x15c8>
8111f07c:	981690fa 	slli	r11,r19,3
8111f080:	d8800917 	ldw	r2,36(sp)
8111f084:	01ff2c34 	movhi	r7,64688
8111f088:	900d883a 	mov	r6,r18
8111f08c:	12ef883a 	add	r23,r2,r11
8111f090:	b9000017 	ldw	r4,0(r23)
8111f094:	b9400117 	ldw	r5,4(r23)
8111f098:	89cf883a 	add	r7,r17,r7
8111f09c:	da401315 	stw	r9,76(sp)
8111f0a0:	11112340 	call	81111234 <__muldf3>
8111f0a4:	1025883a 	mov	r18,r2
8111f0a8:	011f2834 	movhi	r4,31904
8111f0ac:	189ffc2c 	andhi	r2,r3,32752
8111f0b0:	da401317 	ldw	r9,76(sp)
8111f0b4:	20819836 	bltu	r4,r2,8111f718 <_strtod_r+0xda0>
8111f0b8:	011f2434 	movhi	r4,31888
8111f0bc:	2083382e 	bgeu	r4,r2,8111fda0 <_strtod_r+0x1428>
8111f0c0:	045ffc34 	movhi	r17,32752
8111f0c4:	8c7fffc4 	addi	r17,r17,-1
8111f0c8:	04bfffc4 	movi	r18,-1
8111f0cc:	d8000915 	stw	zero,36(sp)
8111f0d0:	d9400817 	ldw	r5,32(sp)
8111f0d4:	df000015 	stw	fp,0(sp)
8111f0d8:	480f883a 	mov	r7,r9
8111f0dc:	b00d883a 	mov	r6,r22
8111f0e0:	8009883a 	mov	r4,r16
8111f0e4:	111d2b40 	call	8111d2b4 <__s2b>
8111f0e8:	d8800815 	stw	r2,32(sp)
8111f0ec:	10018a26 	beq	r2,zero,8111f718 <_strtod_r+0xda0>
8111f0f0:	a807d7fa 	srai	r3,r21,31
8111f0f4:	0545c83a 	sub	r2,zero,r21
8111f0f8:	dd400a15 	stw	r21,40(sp)
8111f0fc:	1886703a 	and	r3,r3,r2
8111f100:	d8c00c15 	stw	r3,48(sp)
8111f104:	a8013516 	blt	r21,zero,8111f5dc <_strtod_r+0xc64>
8111f108:	d9400817 	ldw	r5,32(sp)
8111f10c:	0011883a 	mov	r8,zero
8111f110:	0027883a 	mov	r19,zero
8111f114:	29400304 	addi	r5,r5,12
8111f118:	d9400f15 	stw	r5,60(sp)
8111f11c:	402b883a 	mov	r21,r8
8111f120:	dd001215 	stw	r20,72(sp)
8111f124:	d8800817 	ldw	r2,32(sp)
8111f128:	8009883a 	mov	r4,r16
8111f12c:	11400117 	ldw	r5,4(r2)
8111f130:	111d0b40 	call	8111d0b4 <_Balloc>
8111f134:	1029883a 	mov	r20,r2
8111f138:	10012d26 	beq	r2,zero,8111f5f0 <_strtod_r+0xc78>
8111f13c:	d8c00817 	ldw	r3,32(sp)
8111f140:	d9400f17 	ldw	r5,60(sp)
8111f144:	11000304 	addi	r4,r2,12
8111f148:	19800417 	ldw	r6,16(r3)
8111f14c:	31800084 	addi	r6,r6,2
8111f150:	318d883a 	add	r6,r6,r6
8111f154:	318d883a 	add	r6,r6,r6
8111f158:	1112e840 	call	81112e84 <memcpy>
8111f15c:	d9000204 	addi	r4,sp,8
8111f160:	d9000015 	stw	r4,0(sp)
8111f164:	d9c00404 	addi	r7,sp,16
8111f168:	900b883a 	mov	r5,r18
8111f16c:	880d883a 	mov	r6,r17
8111f170:	8009883a 	mov	r4,r16
8111f174:	111dd900 	call	8111dd90 <__d2b>
8111f178:	d8800515 	stw	r2,20(sp)
8111f17c:	dc801115 	stw	r18,68(sp)
8111f180:	dc401015 	stw	r17,64(sp)
8111f184:	10027c26 	beq	r2,zero,8111fb78 <_strtod_r+0x1200>
8111f188:	01400044 	movi	r5,1
8111f18c:	8009883a 	mov	r4,r16
8111f190:	111d4d80 	call	8111d4d8 <__i2b>
8111f194:	1027883a 	mov	r19,r2
8111f198:	10011526 	beq	r2,zero,8111f5f0 <_strtod_r+0xc78>
8111f19c:	d8800417 	ldw	r2,16(sp)
8111f1a0:	1000c816 	blt	r2,zero,8111f4c4 <_strtod_r+0xb4c>
8111f1a4:	d9400c17 	ldw	r5,48(sp)
8111f1a8:	d9000a17 	ldw	r4,40(sp)
8111f1ac:	28ad883a 	add	r22,r5,r2
8111f1b0:	d9400917 	ldw	r5,36(sp)
8111f1b4:	df000217 	ldw	fp,8(sp)
8111f1b8:	05ff0084 	movi	r23,-1022
8111f1bc:	1147c83a 	sub	r3,r2,r5
8111f1c0:	1f07883a 	add	r3,r3,fp
8111f1c4:	00800d84 	movi	r2,54
8111f1c8:	18ffffc4 	addi	r3,r3,-1
8111f1cc:	1739c83a 	sub	fp,r2,fp
8111f1d0:	1dc0a50e 	bge	r3,r23,8111f468 <_strtod_r+0xaf0>
8111f1d4:	b8efc83a 	sub	r23,r23,r3
8111f1d8:	008007c4 	movi	r2,31
8111f1dc:	e5f9c83a 	sub	fp,fp,r23
8111f1e0:	15c0bc16 	blt	r2,r23,8111f4d4 <_strtod_r+0xb5c>
8111f1e4:	00800044 	movi	r2,1
8111f1e8:	15c4983a 	sll	r2,r2,r23
8111f1ec:	d8000b15 	stw	zero,44(sp)
8111f1f0:	d8800d15 	stw	r2,52(sp)
8111f1f4:	2707883a 	add	r3,r4,fp
8111f1f8:	d9000917 	ldw	r4,36(sp)
8111f1fc:	b739883a 	add	fp,r22,fp
8111f200:	20ef883a 	add	r23,r4,r3
8111f204:	b009883a 	mov	r4,r22
8111f208:	e580010e 	bge	fp,r22,8111f210 <_strtod_r+0x898>
8111f20c:	e009883a 	mov	r4,fp
8111f210:	b805883a 	mov	r2,r23
8111f214:	25c0010e 	bge	r4,r23,8111f21c <_strtod_r+0x8a4>
8111f218:	2005883a 	mov	r2,r4
8111f21c:	0080030e 	bge	zero,r2,8111f22c <_strtod_r+0x8b4>
8111f220:	e0b9c83a 	sub	fp,fp,r2
8111f224:	b8afc83a 	sub	r23,r23,r2
8111f228:	b0adc83a 	sub	r22,r22,r2
8111f22c:	d9400c17 	ldw	r5,48(sp)
8111f230:	28001126 	beq	r5,zero,8111f278 <_strtod_r+0x900>
8111f234:	280d883a 	mov	r6,r5
8111f238:	8009883a 	mov	r4,r16
8111f23c:	980b883a 	mov	r5,r19
8111f240:	111d71c0 	call	8111d71c <__pow5mult>
8111f244:	1027883a 	mov	r19,r2
8111f248:	1000e926 	beq	r2,zero,8111f5f0 <_strtod_r+0xc78>
8111f24c:	d9800517 	ldw	r6,20(sp)
8111f250:	100b883a 	mov	r5,r2
8111f254:	8009883a 	mov	r4,r16
8111f258:	111d51c0 	call	8111d51c <__multiply>
8111f25c:	1000e426 	beq	r2,zero,8111f5f0 <_strtod_r+0xc78>
8111f260:	d9400517 	ldw	r5,20(sp)
8111f264:	8009883a 	mov	r4,r16
8111f268:	d8801315 	stw	r2,76(sp)
8111f26c:	111d1640 	call	8111d164 <_Bfree>
8111f270:	d8801317 	ldw	r2,76(sp)
8111f274:	d8800515 	stw	r2,20(sp)
8111f278:	0700060e 	bge	zero,fp,8111f294 <_strtod_r+0x91c>
8111f27c:	d9400517 	ldw	r5,20(sp)
8111f280:	e00d883a 	mov	r6,fp
8111f284:	8009883a 	mov	r4,r16
8111f288:	111d8640 	call	8111d864 <__lshift>
8111f28c:	d8800515 	stw	r2,20(sp)
8111f290:	10023926 	beq	r2,zero,8111fb78 <_strtod_r+0x1200>
8111f294:	d8800a17 	ldw	r2,40(sp)
8111f298:	10000626 	beq	r2,zero,8111f2b4 <_strtod_r+0x93c>
8111f29c:	d9800a17 	ldw	r6,40(sp)
8111f2a0:	a00b883a 	mov	r5,r20
8111f2a4:	8009883a 	mov	r4,r16
8111f2a8:	111d71c0 	call	8111d71c <__pow5mult>
8111f2ac:	1029883a 	mov	r20,r2
8111f2b0:	1000cf26 	beq	r2,zero,8111f5f0 <_strtod_r+0xc78>
8111f2b4:	05c0060e 	bge	zero,r23,8111f2d0 <_strtod_r+0x958>
8111f2b8:	a00b883a 	mov	r5,r20
8111f2bc:	b80d883a 	mov	r6,r23
8111f2c0:	8009883a 	mov	r4,r16
8111f2c4:	111d8640 	call	8111d864 <__lshift>
8111f2c8:	1029883a 	mov	r20,r2
8111f2cc:	1000c826 	beq	r2,zero,8111f5f0 <_strtod_r+0xc78>
8111f2d0:	0580060e 	bge	zero,r22,8111f2ec <_strtod_r+0x974>
8111f2d4:	980b883a 	mov	r5,r19
8111f2d8:	b00d883a 	mov	r6,r22
8111f2dc:	8009883a 	mov	r4,r16
8111f2e0:	111d8640 	call	8111d864 <__lshift>
8111f2e4:	1027883a 	mov	r19,r2
8111f2e8:	1000c126 	beq	r2,zero,8111f5f0 <_strtod_r+0xc78>
8111f2ec:	d9400517 	ldw	r5,20(sp)
8111f2f0:	a00d883a 	mov	r6,r20
8111f2f4:	8009883a 	mov	r4,r16
8111f2f8:	111da140 	call	8111da14 <__mdiff>
8111f2fc:	102b883a 	mov	r21,r2
8111f300:	1000bb26 	beq	r2,zero,8111f5f0 <_strtod_r+0xc78>
8111f304:	10c00317 	ldw	r3,12(r2)
8111f308:	980b883a 	mov	r5,r19
8111f30c:	10000315 	stw	zero,12(r2)
8111f310:	1009883a 	mov	r4,r2
8111f314:	d8c00e15 	stw	r3,56(sp)
8111f318:	111d9b40 	call	8111d9b4 <__mcmp>
8111f31c:	10027616 	blt	r2,zero,8111fcf8 <_strtod_r+0x1380>
8111f320:	10024426 	beq	r2,zero,8111fc34 <_strtod_r+0x12bc>
8111f324:	980b883a 	mov	r5,r19
8111f328:	a809883a 	mov	r4,r21
8111f32c:	111dee40 	call	8111dee4 <__ratio>
8111f330:	000d883a 	mov	r6,zero
8111f334:	01d00034 	movhi	r7,16384
8111f338:	1009883a 	mov	r4,r2
8111f33c:	180b883a 	mov	r5,r3
8111f340:	102f883a 	mov	r23,r2
8111f344:	182d883a 	mov	r22,r3
8111f348:	1126a2c0 	call	81126a2c <__ledf2>
8111f34c:	00804a16 	blt	zero,r2,8111f478 <_strtod_r+0xb00>
8111f350:	d9400e17 	ldw	r5,56(sp)
8111f354:	28006b26 	beq	r5,zero,8111f504 <_strtod_r+0xb8c>
8111f358:	058ffc34 	movhi	r22,16368
8111f35c:	d8000b15 	stw	zero,44(sp)
8111f360:	d8000d15 	stw	zero,52(sp)
8111f364:	b02f883a 	mov	r23,r22
8111f368:	8f1ffc2c 	andhi	fp,r17,32752
8111f36c:	009ff834 	movhi	r2,32736
8111f370:	e080cd26 	beq	fp,r2,8111f6a8 <_strtod_r+0xd30>
8111f374:	d9400917 	ldw	r5,36(sp)
8111f378:	28001a26 	beq	r5,zero,8111f3e4 <_strtod_r+0xa6c>
8111f37c:	0081a834 	movhi	r2,1696
8111f380:	17001836 	bltu	r2,fp,8111f3e4 <_strtod_r+0xa6c>
8111f384:	d9000d17 	ldw	r4,52(sp)
8111f388:	01d07834 	movhi	r7,16864
8111f38c:	39ffffc4 	addi	r7,r7,-1
8111f390:	01bff034 	movhi	r6,65472
8111f394:	b80b883a 	mov	r5,r23
8111f398:	1126a2c0 	call	81126a2c <__ledf2>
8111f39c:	00800e16 	blt	zero,r2,8111f3d8 <_strtod_r+0xa60>
8111f3a0:	d9000d17 	ldw	r4,52(sp)
8111f3a4:	b80b883a 	mov	r5,r23
8111f3a8:	11248380 	call	81124838 <__fixunsdfsi>
8111f3ac:	10018126 	beq	r2,zero,8111f9b4 <_strtod_r+0x103c>
8111f3b0:	1009883a 	mov	r4,r2
8111f3b4:	11275880 	call	81127588 <__floatunsidf>
8111f3b8:	d8800d15 	stw	r2,52(sp)
8111f3bc:	182f883a 	mov	r23,r3
8111f3c0:	d8800e17 	ldw	r2,56(sp)
8111f3c4:	1001791e 	bne	r2,zero,8111f9ac <_strtod_r+0x1034>
8111f3c8:	ba20003c 	xorhi	r8,r23,32768
8111f3cc:	d8c00d17 	ldw	r3,52(sp)
8111f3d0:	402d883a 	mov	r22,r8
8111f3d4:	d8c00b15 	stw	r3,44(sp)
8111f3d8:	0081ac34 	movhi	r2,1712
8111f3dc:	b091883a 	add	r8,r22,r2
8111f3e0:	472dc83a 	sub	r22,r8,fp
8111f3e4:	9009883a 	mov	r4,r18
8111f3e8:	880b883a 	mov	r5,r17
8111f3ec:	111dc180 	call	8111dc18 <__ulp>
8111f3f0:	d9000b17 	ldw	r4,44(sp)
8111f3f4:	b00b883a 	mov	r5,r22
8111f3f8:	100d883a 	mov	r6,r2
8111f3fc:	180f883a 	mov	r7,r3
8111f400:	11112340 	call	81111234 <__muldf3>
8111f404:	900d883a 	mov	r6,r18
8111f408:	880f883a 	mov	r7,r17
8111f40c:	1009883a 	mov	r4,r2
8111f410:	180b883a 	mov	r5,r3
8111f414:	11257240 	call	81125724 <__adddf3>
8111f418:	1025883a 	mov	r18,r2
8111f41c:	1823883a 	mov	r17,r3
8111f420:	182d883a 	mov	r22,r3
8111f424:	d9000917 	ldw	r4,36(sp)
8111f428:	2000021e 	bne	r4,zero,8111f434 <_strtod_r+0xabc>
8111f42c:	b09ffc2c 	andhi	r2,r22,32752
8111f430:	e080be26 	beq	fp,r2,8111f72c <_strtod_r+0xdb4>
8111f434:	d9400517 	ldw	r5,20(sp)
8111f438:	8009883a 	mov	r4,r16
8111f43c:	111d1640 	call	8111d164 <_Bfree>
8111f440:	a00b883a 	mov	r5,r20
8111f444:	8009883a 	mov	r4,r16
8111f448:	111d1640 	call	8111d164 <_Bfree>
8111f44c:	980b883a 	mov	r5,r19
8111f450:	8009883a 	mov	r4,r16
8111f454:	111d1640 	call	8111d164 <_Bfree>
8111f458:	a80b883a 	mov	r5,r21
8111f45c:	8009883a 	mov	r4,r16
8111f460:	111d1640 	call	8111d164 <_Bfree>
8111f464:	003f2f06 	br	8111f124 <__reset+0xfb0ff124>
8111f468:	00c00044 	movi	r3,1
8111f46c:	d8000b15 	stw	zero,44(sp)
8111f470:	d8c00d15 	stw	r3,52(sp)
8111f474:	003f5f06 	br	8111f1f4 <__reset+0xfb0ff1f4>
8111f478:	b809883a 	mov	r4,r23
8111f47c:	000d883a 	mov	r6,zero
8111f480:	01cff834 	movhi	r7,16352
8111f484:	b00b883a 	mov	r5,r22
8111f488:	11112340 	call	81111234 <__muldf3>
8111f48c:	d9000e17 	ldw	r4,56(sp)
8111f490:	d8800d15 	stw	r2,52(sp)
8111f494:	182f883a 	mov	r23,r3
8111f498:	2000181e 	bne	r4,zero,8111f4fc <_strtod_r+0xb84>
8111f49c:	1a20003c 	xorhi	r8,r3,32768
8111f4a0:	d8800b15 	stw	r2,44(sp)
8111f4a4:	402d883a 	mov	r22,r8
8111f4a8:	003faf06 	br	8111f368 <__reset+0xfb0ff368>
8111f4ac:	0015883a 	mov	r10,zero
8111f4b0:	02c00044 	movi	r11,1
8111f4b4:	2800011e 	bne	r5,zero,8111f4bc <_strtod_r+0xb44>
8111f4b8:	903d7e26 	beq	r18,zero,8111eab4 <__reset+0xfb0feab4>
8111f4bc:	0013883a 	mov	r9,zero
8111f4c0:	003e4706 	br	8111ede0 <__reset+0xfb0fede0>
8111f4c4:	d8c00a17 	ldw	r3,40(sp)
8111f4c8:	dd800c17 	ldw	r22,48(sp)
8111f4cc:	1889c83a 	sub	r4,r3,r2
8111f4d0:	003f3706 	br	8111f1b0 <__reset+0xfb0ff1b0>
8111f4d4:	00bef884 	movi	r2,-1054
8111f4d8:	05c00044 	movi	r23,1
8111f4dc:	10c5c83a 	sub	r2,r2,r3
8111f4e0:	b884983a 	sll	r2,r23,r2
8111f4e4:	ddc00d15 	stw	r23,52(sp)
8111f4e8:	d8800b15 	stw	r2,44(sp)
8111f4ec:	003f4106 	br	8111f1f4 <__reset+0xfb0ff1f4>
8111f4f0:	ddc00615 	stw	r23,24(sp)
8111f4f4:	002b883a 	mov	r21,zero
8111f4f8:	003dc306 	br	8111ec08 <__reset+0xfb0fec08>
8111f4fc:	1811883a 	mov	r8,r3
8111f500:	003fe706 	br	8111f4a0 <__reset+0xfb0ff4a0>
8111f504:	90002e1e 	bne	r18,zero,8111f5c0 <_strtod_r+0xc48>
8111f508:	00c00434 	movhi	r3,16
8111f50c:	18ffffc4 	addi	r3,r3,-1
8111f510:	88c4703a 	and	r2,r17,r3
8111f514:	10002c1e 	bne	r2,zero,8111f5c8 <_strtod_r+0xc50>
8111f518:	000d883a 	mov	r6,zero
8111f51c:	01cffc34 	movhi	r7,16368
8111f520:	b809883a 	mov	r4,r23
8111f524:	b00b883a 	mov	r5,r22
8111f528:	1126a2c0 	call	81126a2c <__ledf2>
8111f52c:	10021716 	blt	r2,zero,8111fd8c <_strtod_r+0x1414>
8111f530:	b809883a 	mov	r4,r23
8111f534:	b00b883a 	mov	r5,r22
8111f538:	000d883a 	mov	r6,zero
8111f53c:	01cff834 	movhi	r7,16352
8111f540:	11112340 	call	81111234 <__muldf3>
8111f544:	d8800d15 	stw	r2,52(sp)
8111f548:	182f883a 	mov	r23,r3
8111f54c:	102d883a 	mov	r22,r2
8111f550:	1a20003c 	xorhi	r8,r3,32768
8111f554:	dd800b15 	stw	r22,44(sp)
8111f558:	402d883a 	mov	r22,r8
8111f55c:	003f8206 	br	8111f368 <__reset+0xfb0ff368>
8111f560:	b013883a 	mov	r9,r22
8111f564:	000b883a 	mov	r5,zero
8111f568:	0015883a 	mov	r10,zero
8111f56c:	893ff404 	addi	r4,r17,-48
8111f570:	00800244 	movi	r2,9
8111f574:	11001036 	bltu	r2,r4,8111f5b8 <_strtod_r+0xc40>
8111f578:	28c00044 	addi	r3,r5,1
8111f57c:	2023883a 	mov	r17,r4
8111f580:	20014d1e 	bne	r4,zero,8111fab8 <_strtod_r+0x1140>
8111f584:	d9800617 	ldw	r6,24(sp)
8111f588:	180b883a 	mov	r5,r3
8111f58c:	30800044 	addi	r2,r6,1
8111f590:	d8800615 	stw	r2,24(sp)
8111f594:	34400047 	ldb	r17,1(r6)
8111f598:	003ff406 	br	8111f56c <__reset+0xfb0ff56c>
8111f59c:	0019883a 	mov	r12,zero
8111f5a0:	b8800084 	addi	r2,r23,2
8111f5a4:	d8800615 	stw	r2,24(sp)
8111f5a8:	bc400087 	ldb	r17,2(r23)
8111f5ac:	003e1606 	br	8111ee08 <__reset+0xfb0fee08>
8111f5b0:	03000044 	movi	r12,1
8111f5b4:	003ffa06 	br	8111f5a0 <__reset+0xfb0ff5a0>
8111f5b8:	02c00044 	movi	r11,1
8111f5bc:	003d8d06 	br	8111ebf4 <__reset+0xfb0febf4>
8111f5c0:	00800044 	movi	r2,1
8111f5c4:	9080fe26 	beq	r18,r2,8111f9c0 <_strtod_r+0x1048>
8111f5c8:	d8000b15 	stw	zero,44(sp)
8111f5cc:	05affc34 	movhi	r22,49136
8111f5d0:	d8000d15 	stw	zero,52(sp)
8111f5d4:	05cffc34 	movhi	r23,16368
8111f5d8:	003f6306 	br	8111f368 <__reset+0xfb0ff368>
8111f5dc:	d8000a15 	stw	zero,40(sp)
8111f5e0:	003ec906 	br	8111f108 <__reset+0xfb0ff108>
8111f5e4:	d9001117 	ldw	r4,68(sp)
8111f5e8:	00bfffc4 	movi	r2,-1
8111f5ec:	2080461e 	bne	r4,r2,8111f708 <_strtod_r+0xd90>
8111f5f0:	dd000a15 	stw	r20,40(sp)
8111f5f4:	dd001217 	ldw	r20,72(sp)
8111f5f8:	a811883a 	mov	r8,r21
8111f5fc:	d8800517 	ldw	r2,20(sp)
8111f600:	00c00884 	movi	r3,34
8111f604:	80c00015 	stw	r3,0(r16)
8111f608:	002b883a 	mov	r21,zero
8111f60c:	059ffc34 	movhi	r22,32752
8111f610:	100b883a 	mov	r5,r2
8111f614:	8009883a 	mov	r4,r16
8111f618:	da001315 	stw	r8,76(sp)
8111f61c:	111d1640 	call	8111d164 <_Bfree>
8111f620:	d9400a17 	ldw	r5,40(sp)
8111f624:	8009883a 	mov	r4,r16
8111f628:	111d1640 	call	8111d164 <_Bfree>
8111f62c:	980b883a 	mov	r5,r19
8111f630:	8009883a 	mov	r4,r16
8111f634:	111d1640 	call	8111d164 <_Bfree>
8111f638:	d9400817 	ldw	r5,32(sp)
8111f63c:	8009883a 	mov	r4,r16
8111f640:	111d1640 	call	8111d164 <_Bfree>
8111f644:	da001317 	ldw	r8,76(sp)
8111f648:	8009883a 	mov	r4,r16
8111f64c:	400b883a 	mov	r5,r8
8111f650:	111d1640 	call	8111d164 <_Bfree>
8111f654:	003d9206 	br	8111eca0 <__reset+0xfb0feca0>
8111f658:	d8c00717 	ldw	r3,28(sp)
8111f65c:	d8800504 	addi	r2,sp,20
8111f660:	01a04534 	movhi	r6,33044
8111f664:	31bff304 	addi	r6,r6,-52
8111f668:	d8c00115 	stw	r3,4(sp)
8111f66c:	d8800015 	stw	r2,0(sp)
8111f670:	d9c00404 	addi	r7,sp,16
8111f674:	d9400604 	addi	r5,sp,24
8111f678:	8009883a 	mov	r4,r16
8111f67c:	1123acc0 	call	81123acc <__gethex>
8111f680:	154001cc 	andi	r21,r2,7
8111f684:	a83d9b26 	beq	r21,zero,8111ecf4 <__reset+0xfb0fecf4>
8111f688:	00c00184 	movi	r3,6
8111f68c:	a8c0d61e 	bne	r21,r3,8111f9e8 <_strtod_r+0x1070>
8111f690:	9cc00044 	addi	r19,r19,1
8111f694:	dcc00615 	stw	r19,24(sp)
8111f698:	002b883a 	mov	r21,zero
8111f69c:	002d883a 	mov	r22,zero
8111f6a0:	d8000715 	stw	zero,28(sp)
8111f6a4:	003d7e06 	br	8111eca0 <__reset+0xfb0feca0>
8111f6a8:	00bf2c34 	movhi	r2,64688
8111f6ac:	88a3883a 	add	r17,r17,r2
8111f6b0:	9009883a 	mov	r4,r18
8111f6b4:	880b883a 	mov	r5,r17
8111f6b8:	111dc180 	call	8111dc18 <__ulp>
8111f6bc:	d9000b17 	ldw	r4,44(sp)
8111f6c0:	100d883a 	mov	r6,r2
8111f6c4:	180f883a 	mov	r7,r3
8111f6c8:	b00b883a 	mov	r5,r22
8111f6cc:	11112340 	call	81111234 <__muldf3>
8111f6d0:	900d883a 	mov	r6,r18
8111f6d4:	180b883a 	mov	r5,r3
8111f6d8:	880f883a 	mov	r7,r17
8111f6dc:	1009883a 	mov	r4,r2
8111f6e0:	11257240 	call	81125724 <__adddf3>
8111f6e4:	015f2834 	movhi	r5,31904
8111f6e8:	1025883a 	mov	r18,r2
8111f6ec:	297fffc4 	addi	r5,r5,-1
8111f6f0:	189ffc2c 	andhi	r2,r3,32752
8111f6f4:	2880892e 	bgeu	r5,r2,8111f91c <_strtod_r+0xfa4>
8111f6f8:	d8801017 	ldw	r2,64(sp)
8111f6fc:	00dffc34 	movhi	r3,32752
8111f700:	18ffffc4 	addi	r3,r3,-1
8111f704:	10ffb726 	beq	r2,r3,8111f5e4 <__reset+0xfb0ff5e4>
8111f708:	045ffc34 	movhi	r17,32752
8111f70c:	8c7fffc4 	addi	r17,r17,-1
8111f710:	04bfffc4 	movi	r18,-1
8111f714:	003f4706 	br	8111f434 <__reset+0xfb0ff434>
8111f718:	00800884 	movi	r2,34
8111f71c:	80800015 	stw	r2,0(r16)
8111f720:	002b883a 	mov	r21,zero
8111f724:	059ffc34 	movhi	r22,32752
8111f728:	003d5d06 	br	8111eca0 <__reset+0xfb0feca0>
8111f72c:	d9000d17 	ldw	r4,52(sp)
8111f730:	b80b883a 	mov	r5,r23
8111f734:	11274240 	call	81127424 <__fixdfsi>
8111f738:	1009883a 	mov	r4,r2
8111f73c:	11274a40 	call	811274a4 <__floatsidf>
8111f740:	d9000d17 	ldw	r4,52(sp)
8111f744:	b80b883a 	mov	r5,r23
8111f748:	100d883a 	mov	r6,r2
8111f74c:	180f883a 	mov	r7,r3
8111f750:	1126b200 	call	81126b20 <__subdf3>
8111f754:	d9400e17 	ldw	r5,56(sp)
8111f758:	1039883a 	mov	fp,r2
8111f75c:	182f883a 	mov	r23,r3
8111f760:	2800141e 	bne	r5,zero,8111f7b4 <_strtod_r+0xe3c>
8111f764:	9000131e 	bne	r18,zero,8111f7b4 <_strtod_r+0xe3c>
8111f768:	00800434 	movhi	r2,16
8111f76c:	10bfffc4 	addi	r2,r2,-1
8111f770:	b0ac703a 	and	r22,r22,r2
8111f774:	b0000f1e 	bne	r22,zero,8111f7b4 <_strtod_r+0xe3c>
8111f778:	01a52834 	movhi	r6,38048
8111f77c:	01cff434 	movhi	r7,16336
8111f780:	318d6544 	addi	r6,r6,13717
8111f784:	39ffffc4 	addi	r7,r7,-1
8111f788:	e009883a 	mov	r4,fp
8111f78c:	180b883a 	mov	r5,r3
8111f790:	1126a2c0 	call	81126a2c <__ledf2>
8111f794:	103f270e 	bge	r2,zero,8111f434 <__reset+0xfb0ff434>
8111f798:	dd000a15 	stw	r20,40(sp)
8111f79c:	a811883a 	mov	r8,r21
8111f7a0:	dd001217 	ldw	r20,72(sp)
8111f7a4:	d8800517 	ldw	r2,20(sp)
8111f7a8:	002b883a 	mov	r21,zero
8111f7ac:	882d883a 	mov	r22,r17
8111f7b0:	003f9706 	br	8111f610 <__reset+0xfb0ff610>
8111f7b4:	01a52834 	movhi	r6,38048
8111f7b8:	01cff834 	movhi	r7,16352
8111f7bc:	318d6544 	addi	r6,r6,13717
8111f7c0:	39ffffc4 	addi	r7,r7,-1
8111f7c4:	e009883a 	mov	r4,fp
8111f7c8:	b80b883a 	mov	r5,r23
8111f7cc:	1126a2c0 	call	81126a2c <__ledf2>
8111f7d0:	10000716 	blt	r2,zero,8111f7f0 <_strtod_r+0xe78>
8111f7d4:	018d6c34 	movhi	r6,13744
8111f7d8:	31b94d44 	addi	r6,r6,-6859
8111f7dc:	01cff834 	movhi	r7,16352
8111f7e0:	e009883a 	mov	r4,fp
8111f7e4:	b80b883a 	mov	r5,r23
8111f7e8:	11269500 	call	81126950 <__gedf2>
8111f7ec:	00bf110e 	bge	zero,r2,8111f434 <__reset+0xfb0ff434>
8111f7f0:	dd000a15 	stw	r20,40(sp)
8111f7f4:	a811883a 	mov	r8,r21
8111f7f8:	dd001217 	ldw	r20,72(sp)
8111f7fc:	d8800517 	ldw	r2,20(sp)
8111f800:	902b883a 	mov	r21,r18
8111f804:	882d883a 	mov	r22,r17
8111f808:	003f8106 	br	8111f610 <__reset+0xfb0ff610>
8111f80c:	b83e2f26 	beq	r23,zero,8111f0cc <__reset+0xfb0ff0cc>
8111f810:	05efc83a 	sub	r23,zero,r23
8111f814:	b88003cc 	andi	r2,r23,15
8111f818:	10000d26 	beq	r2,zero,8111f850 <_strtod_r+0xed8>
8111f81c:	100490fa 	slli	r2,r2,3
8111f820:	00e04534 	movhi	r3,33044
8111f824:	18ffb804 	addi	r3,r3,-288
8111f828:	1885883a 	add	r2,r3,r2
8111f82c:	11800017 	ldw	r6,0(r2)
8111f830:	11c00117 	ldw	r7,4(r2)
8111f834:	9009883a 	mov	r4,r18
8111f838:	880b883a 	mov	r5,r17
8111f83c:	da401315 	stw	r9,76(sp)
8111f840:	1125fd80 	call	81125fd8 <__divdf3>
8111f844:	da401317 	ldw	r9,76(sp)
8111f848:	1025883a 	mov	r18,r2
8111f84c:	1823883a 	mov	r17,r3
8111f850:	b82fd13a 	srai	r23,r23,4
8111f854:	b83e1d26 	beq	r23,zero,8111f0cc <__reset+0xfb0ff0cc>
8111f858:	008007c4 	movi	r2,31
8111f85c:	15c02816 	blt	r2,r23,8111f900 <_strtod_r+0xf88>
8111f860:	b880040c 	andi	r2,r23,16
8111f864:	10019726 	beq	r2,zero,8111fec4 <_strtod_r+0x154c>
8111f868:	05c1880e 	bge	zero,r23,8111fe8c <_strtod_r+0x1514>
8111f86c:	00c01a84 	movi	r3,106
8111f870:	d8c00915 	stw	r3,36(sp)
8111f874:	04e04534 	movhi	r19,33044
8111f878:	9cfff804 	addi	r19,r19,-32
8111f87c:	8807883a 	mov	r3,r17
8111f880:	9005883a 	mov	r2,r18
8111f884:	8023883a 	mov	r17,r16
8111f888:	0009883a 	mov	r4,zero
8111f88c:	9821883a 	mov	r16,r19
8111f890:	da400a15 	stw	r9,40(sp)
8111f894:	1827883a 	mov	r19,r3
8111f898:	b980004c 	andi	r6,r23,1
8111f89c:	30000626 	beq	r6,zero,8111f8b8 <_strtod_r+0xf40>
8111f8a0:	81800017 	ldw	r6,0(r16)
8111f8a4:	81c00117 	ldw	r7,4(r16)
8111f8a8:	1009883a 	mov	r4,r2
8111f8ac:	180b883a 	mov	r5,r3
8111f8b0:	11112340 	call	81111234 <__muldf3>
8111f8b4:	01000044 	movi	r4,1
8111f8b8:	b82fd07a 	srai	r23,r23,1
8111f8bc:	84000204 	addi	r16,r16,8
8111f8c0:	b83ff51e 	bne	r23,zero,8111f898 <__reset+0xfb0ff898>
8111f8c4:	21003fcc 	andi	r4,r4,255
8111f8c8:	8821883a 	mov	r16,r17
8111f8cc:	da400a17 	ldw	r9,40(sp)
8111f8d0:	9823883a 	mov	r17,r19
8111f8d4:	2001a51e 	bne	r4,zero,8111ff6c <_strtod_r+0x15f4>
8111f8d8:	d9000917 	ldw	r4,36(sp)
8111f8dc:	20016d1e 	bne	r4,zero,8111fe94 <_strtod_r+0x151c>
8111f8e0:	000d883a 	mov	r6,zero
8111f8e4:	000f883a 	mov	r7,zero
8111f8e8:	9009883a 	mov	r4,r18
8111f8ec:	880b883a 	mov	r5,r17
8111f8f0:	da401315 	stw	r9,76(sp)
8111f8f4:	11268c80 	call	811268c8 <__eqdf2>
8111f8f8:	da401317 	ldw	r9,76(sp)
8111f8fc:	103df41e 	bne	r2,zero,8111f0d0 <__reset+0xfb0ff0d0>
8111f900:	00800884 	movi	r2,34
8111f904:	80800015 	stw	r2,0(r16)
8111f908:	002b883a 	mov	r21,zero
8111f90c:	002d883a 	mov	r22,zero
8111f910:	003ce306 	br	8111eca0 <__reset+0xfb0feca0>
8111f914:	055387c4 	movi	r21,19999
8111f918:	003d6b06 	br	8111eec8 <__reset+0xfb0feec8>
8111f91c:	0440d434 	movhi	r17,848
8111f920:	1c63883a 	add	r17,r3,r17
8111f924:	882d883a 	mov	r22,r17
8111f928:	003ebe06 	br	8111f424 <__reset+0xfb0ff424>
8111f92c:	14403fcc 	andi	r17,r2,255
8111f930:	8c40201c 	xori	r17,r17,128
8111f934:	8c7fe004 	addi	r17,r17,-128
8111f938:	dd400817 	ldw	r21,32(sp)
8111f93c:	0027883a 	mov	r19,zero
8111f940:	0039883a 	mov	fp,zero
8111f944:	002d883a 	mov	r22,zero
8111f948:	003c9906 	br	8111ebb0 <__reset+0xfb0febb0>
8111f94c:	00c00944 	movi	r3,37
8111f950:	1a47c83a 	sub	r3,r3,r9
8111f954:	1d7d8c16 	blt	r3,r21,8111ef88 <__reset+0xfb0fef88>
8111f958:	1261c83a 	sub	r16,r2,r9
8111f95c:	800490fa 	slli	r2,r16,3
8111f960:	04e04534 	movhi	r19,33044
8111f964:	9cffb804 	addi	r19,r19,-288
8111f968:	9885883a 	add	r2,r19,r2
8111f96c:	11000017 	ldw	r4,0(r2)
8111f970:	11400117 	ldw	r5,4(r2)
8111f974:	900d883a 	mov	r6,r18
8111f978:	880f883a 	mov	r7,r17
8111f97c:	11112340 	call	81111234 <__muldf3>
8111f980:	ac0dc83a 	sub	r6,r21,r16
8111f984:	300c90fa 	slli	r6,r6,3
8111f988:	1009883a 	mov	r4,r2
8111f98c:	180b883a 	mov	r5,r3
8111f990:	9985883a 	add	r2,r19,r6
8111f994:	11800017 	ldw	r6,0(r2)
8111f998:	11c00117 	ldw	r7,4(r2)
8111f99c:	11112340 	call	81111234 <__muldf3>
8111f9a0:	102b883a 	mov	r21,r2
8111f9a4:	182d883a 	mov	r22,r3
8111f9a8:	003cbd06 	br	8111eca0 <__reset+0xfb0feca0>
8111f9ac:	b811883a 	mov	r8,r23
8111f9b0:	003e8606 	br	8111f3cc <__reset+0xfb0ff3cc>
8111f9b4:	d8000d15 	stw	zero,52(sp)
8111f9b8:	05cffc34 	movhi	r23,16368
8111f9bc:	003e8006 	br	8111f3c0 <__reset+0xfb0ff3c0>
8111f9c0:	883f011e 	bne	r17,zero,8111f5c8 <__reset+0xfb0ff5c8>
8111f9c4:	dd000a15 	stw	r20,40(sp)
8111f9c8:	dd001217 	ldw	r20,72(sp)
8111f9cc:	a811883a 	mov	r8,r21
8111f9d0:	00800884 	movi	r2,34
8111f9d4:	80800015 	stw	r2,0(r16)
8111f9d8:	002b883a 	mov	r21,zero
8111f9dc:	d8800517 	ldw	r2,20(sp)
8111f9e0:	002d883a 	mov	r22,zero
8111f9e4:	003f0a06 	br	8111f610 <__reset+0xfb0ff610>
8111f9e8:	d9800517 	ldw	r6,20(sp)
8111f9ec:	30000826 	beq	r6,zero,8111fa10 <_strtod_r+0x1098>
8111f9f0:	01400d44 	movi	r5,53
8111f9f4:	d9000204 	addi	r4,sp,8
8111f9f8:	d8801315 	stw	r2,76(sp)
8111f9fc:	111e00c0 	call	8111e00c <__copybits>
8111fa00:	d9400517 	ldw	r5,20(sp)
8111fa04:	8009883a 	mov	r4,r16
8111fa08:	111d1640 	call	8111d164 <_Bfree>
8111fa0c:	d8801317 	ldw	r2,76(sp)
8111fa10:	00c00184 	movi	r3,6
8111fa14:	1d400f36 	bltu	r3,r21,8111fa54 <_strtod_r+0x10dc>
8111fa18:	a82a90ba 	slli	r21,r21,2
8111fa1c:	00e044b4 	movhi	r3,33042
8111fa20:	18fe8c04 	addi	r3,r3,-1488
8111fa24:	a8eb883a 	add	r21,r21,r3
8111fa28:	a8c00017 	ldw	r3,0(r21)
8111fa2c:	1800683a 	jmp	r3
8111fa30:	8111faac 	andhi	r4,r16,18410
8111fa34:	8111fa84 	addi	r4,r16,18410
8111fa38:	8111fa68 	cmpgeui	r4,r16,18409
8111fa3c:	8111fa4c 	andi	r4,r16,18409
8111fa40:	8111fa74 	orhi	r4,r16,18409
8111fa44:	8111fa84 	addi	r4,r16,18410
8111fa48:	8111faac 	andhi	r4,r16,18410
8111fa4c:	045ffc34 	movhi	r17,32752
8111fa50:	0025883a 	mov	r18,zero
8111fa54:	1080020c 	andi	r2,r2,8
8111fa58:	902b883a 	mov	r21,r18
8111fa5c:	103c8f26 	beq	r2,zero,8111ec9c <__reset+0xfb0fec9c>
8111fa60:	8da00034 	orhi	r22,r17,32768
8111fa64:	003c8e06 	br	8111eca0 <__reset+0xfb0feca0>
8111fa68:	dc800217 	ldw	r18,8(sp)
8111fa6c:	dc400317 	ldw	r17,12(sp)
8111fa70:	003ff806 	br	8111fa54 <__reset+0xfb0ffa54>
8111fa74:	04600034 	movhi	r17,32768
8111fa78:	8c7fffc4 	addi	r17,r17,-1
8111fa7c:	04bfffc4 	movi	r18,-1
8111fa80:	003ff406 	br	8111fa54 <__reset+0xfb0ffa54>
8111fa84:	d8c00417 	ldw	r3,16(sp)
8111fa88:	dc400317 	ldw	r17,12(sp)
8111fa8c:	013ffc34 	movhi	r4,65520
8111fa90:	18c10cc4 	addi	r3,r3,1075
8111fa94:	1806953a 	slli	r3,r3,20
8111fa98:	213fffc4 	addi	r4,r4,-1
8111fa9c:	8922703a 	and	r17,r17,r4
8111faa0:	dc800217 	ldw	r18,8(sp)
8111faa4:	88e2b03a 	or	r17,r17,r3
8111faa8:	003fea06 	br	8111fa54 <__reset+0xfb0ffa54>
8111faac:	0023883a 	mov	r17,zero
8111fab0:	0025883a 	mov	r18,zero
8111fab4:	003fe706 	br	8111fa54 <__reset+0xfb0ffa54>
8111fab8:	01800044 	movi	r6,1
8111fabc:	50d5883a 	add	r10,r10,r3
8111fac0:	2a4b883a 	add	r5,r5,r9
8111fac4:	19811a26 	beq	r3,r6,8111ff30 <_strtod_r+0x15b8>
8111fac8:	01800204 	movi	r6,8
8111facc:	01c00404 	movi	r7,16
8111fad0:	4a400044 	addi	r9,r9,1
8111fad4:	48bfffc4 	addi	r2,r9,-1
8111fad8:	30801616 	blt	r6,r2,8111fb34 <_strtod_r+0x11bc>
8111fadc:	e70002a4 	muli	fp,fp,10
8111fae0:	497ffb1e 	bne	r9,r5,8111fad0 <__reset+0xfb0ffad0>
8111fae4:	d9800617 	ldw	r6,24(sp)
8111fae8:	4a400044 	addi	r9,r9,1
8111faec:	00c00204 	movi	r3,8
8111faf0:	19400c0e 	bge	r3,r5,8111fb24 <_strtod_r+0x11ac>
8111faf4:	00800404 	movi	r2,16
8111faf8:	000b883a 	mov	r5,zero
8111fafc:	127ea316 	blt	r2,r9,8111f58c <__reset+0xfb0ff58c>
8111fb00:	988002a4 	muli	r2,r19,10
8111fb04:	20a7883a 	add	r19,r4,r2
8111fb08:	003ea006 	br	8111f58c <__reset+0xfb0ff58c>
8111fb0c:	d8800617 	ldw	r2,24(sp)
8111fb10:	8c7ff404 	addi	r17,r17,-48
8111fb14:	2a800044 	addi	r10,r5,1
8111fb18:	d8800815 	stw	r2,32(sp)
8111fb1c:	100d883a 	mov	r6,r2
8111fb20:	02400044 	movi	r9,1
8111fb24:	e08002a4 	muli	r2,fp,10
8111fb28:	000b883a 	mov	r5,zero
8111fb2c:	88b9883a 	add	fp,r17,r2
8111fb30:	003e9606 	br	8111f58c <__reset+0xfb0ff58c>
8111fb34:	3a7fea16 	blt	r7,r9,8111fae0 <__reset+0xfb0ffae0>
8111fb38:	9cc002a4 	muli	r19,r19,10
8111fb3c:	003fe806 	br	8111fae0 <__reset+0xfb0ffae0>
8111fb40:	00bffa84 	movi	r2,-22
8111fb44:	a8bd1016 	blt	r21,r2,8111ef88 <__reset+0xfb0fef88>
8111fb48:	a82a90fa 	slli	r21,r21,3
8111fb4c:	00a04534 	movhi	r2,33044
8111fb50:	10bfb804 	addi	r2,r2,-288
8111fb54:	1545c83a 	sub	r2,r2,r21
8111fb58:	11800017 	ldw	r6,0(r2)
8111fb5c:	11c00117 	ldw	r7,4(r2)
8111fb60:	9009883a 	mov	r4,r18
8111fb64:	880b883a 	mov	r5,r17
8111fb68:	1125fd80 	call	81125fd8 <__divdf3>
8111fb6c:	102b883a 	mov	r21,r2
8111fb70:	182d883a 	mov	r22,r3
8111fb74:	003c4a06 	br	8111eca0 <__reset+0xfb0feca0>
8111fb78:	dd000a15 	stw	r20,40(sp)
8111fb7c:	a811883a 	mov	r8,r21
8111fb80:	dd001217 	ldw	r20,72(sp)
8111fb84:	003e9e06 	br	8111f600 <__reset+0xfb0ff600>
8111fb88:	01604534 	movhi	r5,33044
8111fb8c:	d9000617 	ldw	r4,24(sp)
8111fb90:	297fea04 	addi	r5,r5,-88
8111fb94:	01c00644 	movi	r7,25
8111fb98:	00000b06 	br	8111fbc8 <_strtod_r+0x1250>
8111fb9c:	21000044 	addi	r4,r4,1
8111fba0:	20800003 	ldbu	r2,0(r4)
8111fba4:	10ffefc4 	addi	r3,r2,-65
8111fba8:	10803fcc 	andi	r2,r2,255
8111fbac:	1080201c 	xori	r2,r2,128
8111fbb0:	18c03fcc 	andi	r3,r3,255
8111fbb4:	10bfe004 	addi	r2,r2,-128
8111fbb8:	38c00136 	bltu	r7,r3,8111fbc0 <_strtod_r+0x1248>
8111fbbc:	10800804 	addi	r2,r2,32
8111fbc0:	29400044 	addi	r5,r5,1
8111fbc4:	11bbbb1e 	bne	r2,r6,8111eab4 <__reset+0xfb0feab4>
8111fbc8:	29800007 	ldb	r6,0(r5)
8111fbcc:	303ff31e 	bne	r6,zero,8111fb9c <__reset+0xfb0ffb9c>
8111fbd0:	01a04534 	movhi	r6,33044
8111fbd4:	d9000615 	stw	r4,24(sp)
8111fbd8:	31bfeb04 	addi	r6,r6,-84
8111fbdc:	200b883a 	mov	r5,r4
8111fbe0:	02000644 	movi	r8,25
8111fbe4:	00000a06 	br	8111fc10 <_strtod_r+0x1298>
8111fbe8:	28800003 	ldbu	r2,0(r5)
8111fbec:	10ffefc4 	addi	r3,r2,-65
8111fbf0:	10803fcc 	andi	r2,r2,255
8111fbf4:	1080201c 	xori	r2,r2,128
8111fbf8:	18c03fcc 	andi	r3,r3,255
8111fbfc:	10bfe004 	addi	r2,r2,-128
8111fc00:	40c00136 	bltu	r8,r3,8111fc08 <_strtod_r+0x1290>
8111fc04:	10800804 	addi	r2,r2,32
8111fc08:	31800044 	addi	r6,r6,1
8111fc0c:	11c0711e 	bne	r2,r7,8111fdd4 <_strtod_r+0x145c>
8111fc10:	31c00007 	ldb	r7,0(r6)
8111fc14:	29400044 	addi	r5,r5,1
8111fc18:	383ff31e 	bne	r7,zero,8111fbe8 <__reset+0xfb0ffbe8>
8111fc1c:	d9400615 	stw	r5,24(sp)
8111fc20:	045ffc34 	movhi	r17,32752
8111fc24:	0025883a 	mov	r18,zero
8111fc28:	003c1b06 	br	8111ec98 <__reset+0xfb0fec98>
8111fc2c:	000b883a 	mov	r5,zero
8111fc30:	003ccc06 	br	8111ef64 <__reset+0xfb0fef64>
8111fc34:	d9400e17 	ldw	r5,56(sp)
8111fc38:	dd000a15 	stw	r20,40(sp)
8111fc3c:	00800434 	movhi	r2,16
8111fc40:	a811883a 	mov	r8,r21
8111fc44:	dd001217 	ldw	r20,72(sp)
8111fc48:	dd401117 	ldw	r21,68(sp)
8111fc4c:	dd801017 	ldw	r22,64(sp)
8111fc50:	10bfffc4 	addi	r2,r2,-1
8111fc54:	28005626 	beq	r5,zero,8111fdb0 <_strtod_r+0x1438>
8111fc58:	8886703a 	and	r3,r17,r2
8111fc5c:	18807826 	beq	r3,r2,8111fe40 <_strtod_r+0x14c8>
8111fc60:	d8c00b17 	ldw	r3,44(sp)
8111fc64:	18005726 	beq	r3,zero,8111fdc4 <_strtod_r+0x144c>
8111fc68:	1c44703a 	and	r2,r3,r17
8111fc6c:	10000f26 	beq	r2,zero,8111fcac <_strtod_r+0x1334>
8111fc70:	d9000e17 	ldw	r4,56(sp)
8111fc74:	d9800917 	ldw	r6,36(sp)
8111fc78:	20005e26 	beq	r4,zero,8111fdf4 <_strtod_r+0x147c>
8111fc7c:	9009883a 	mov	r4,r18
8111fc80:	880b883a 	mov	r5,r17
8111fc84:	da001315 	stw	r8,76(sp)
8111fc88:	111e90c0 	call	8111e90c <sulp>
8111fc8c:	100d883a 	mov	r6,r2
8111fc90:	180f883a 	mov	r7,r3
8111fc94:	9009883a 	mov	r4,r18
8111fc98:	880b883a 	mov	r5,r17
8111fc9c:	11257240 	call	81125724 <__adddf3>
8111fca0:	da001317 	ldw	r8,76(sp)
8111fca4:	102b883a 	mov	r21,r2
8111fca8:	182d883a 	mov	r22,r3
8111fcac:	d8c00917 	ldw	r3,36(sp)
8111fcb0:	18000f26 	beq	r3,zero,8111fcf0 <_strtod_r+0x1378>
8111fcb4:	a809883a 	mov	r4,r21
8111fcb8:	b00b883a 	mov	r5,r22
8111fcbc:	000d883a 	mov	r6,zero
8111fcc0:	01ce5434 	movhi	r7,14672
8111fcc4:	da001315 	stw	r8,76(sp)
8111fcc8:	11112340 	call	81111234 <__muldf3>
8111fccc:	102b883a 	mov	r21,r2
8111fcd0:	182d883a 	mov	r22,r3
8111fcd4:	da001317 	ldw	r8,76(sp)
8111fcd8:	1800051e 	bne	r3,zero,8111fcf0 <_strtod_r+0x1378>
8111fcdc:	d8800517 	ldw	r2,20(sp)
8111fce0:	a83e4b1e 	bne	r21,zero,8111f610 <__reset+0xfb0ff610>
8111fce4:	00c00884 	movi	r3,34
8111fce8:	80c00015 	stw	r3,0(r16)
8111fcec:	003e4806 	br	8111f610 <__reset+0xfb0ff610>
8111fcf0:	d8800517 	ldw	r2,20(sp)
8111fcf4:	003e4606 	br	8111f610 <__reset+0xfb0ff610>
8111fcf8:	d9000e17 	ldw	r4,56(sp)
8111fcfc:	dd000a15 	stw	r20,40(sp)
8111fd00:	a811883a 	mov	r8,r21
8111fd04:	dd001217 	ldw	r20,72(sp)
8111fd08:	dd401117 	ldw	r21,68(sp)
8111fd0c:	dd801017 	ldw	r22,64(sp)
8111fd10:	203fe61e 	bne	r4,zero,8111fcac <__reset+0xfb0ffcac>
8111fd14:	903fe51e 	bne	r18,zero,8111fcac <__reset+0xfb0ffcac>
8111fd18:	00800434 	movhi	r2,16
8111fd1c:	10bfffc4 	addi	r2,r2,-1
8111fd20:	8884703a 	and	r2,r17,r2
8111fd24:	103fe11e 	bne	r2,zero,8111fcac <__reset+0xfb0ffcac>
8111fd28:	8ddffc2c 	andhi	r23,r17,32752
8111fd2c:	0081ac34 	movhi	r2,1712
8111fd30:	15ffde2e 	bgeu	r2,r23,8111fcac <__reset+0xfb0ffcac>
8111fd34:	40800517 	ldw	r2,20(r8)
8111fd38:	1000031e 	bne	r2,zero,8111fd48 <_strtod_r+0x13d0>
8111fd3c:	40800417 	ldw	r2,16(r8)
8111fd40:	00c00044 	movi	r3,1
8111fd44:	18bfd90e 	bge	r3,r2,8111fcac <__reset+0xfb0ffcac>
8111fd48:	400b883a 	mov	r5,r8
8111fd4c:	01800044 	movi	r6,1
8111fd50:	8009883a 	mov	r4,r16
8111fd54:	111d8640 	call	8111d864 <__lshift>
8111fd58:	980b883a 	mov	r5,r19
8111fd5c:	1009883a 	mov	r4,r2
8111fd60:	d8801315 	stw	r2,76(sp)
8111fd64:	111d9b40 	call	8111d9b4 <__mcmp>
8111fd68:	da001317 	ldw	r8,76(sp)
8111fd6c:	00bfcf0e 	bge	zero,r2,8111fcac <__reset+0xfb0ffcac>
8111fd70:	d8c00917 	ldw	r3,36(sp)
8111fd74:	18005c26 	beq	r3,zero,8111fee8 <_strtod_r+0x1570>
8111fd78:	0081ac34 	movhi	r2,1712
8111fd7c:	15c05a16 	blt	r2,r23,8111fee8 <_strtod_r+0x1570>
8111fd80:	0080dc34 	movhi	r2,880
8111fd84:	15ffcb16 	blt	r2,r23,8111fcb4 <__reset+0xfb0ffcb4>
8111fd88:	003f1106 	br	8111f9d0 <__reset+0xfb0ff9d0>
8111fd8c:	002d883a 	mov	r22,zero
8111fd90:	022ff834 	movhi	r8,49120
8111fd94:	d8000d15 	stw	zero,52(sp)
8111fd98:	05cff834 	movhi	r23,16352
8111fd9c:	003ded06 	br	8111f554 <__reset+0xfb0ff554>
8111fda0:	0440d434 	movhi	r17,848
8111fda4:	1c63883a 	add	r17,r3,r17
8111fda8:	d8000915 	stw	zero,36(sp)
8111fdac:	003cc806 	br	8111f0d0 <__reset+0xfb0ff0d0>
8111fdb0:	8884703a 	and	r2,r17,r2
8111fdb4:	103faa1e 	bne	r2,zero,8111fc60 <__reset+0xfb0ffc60>
8111fdb8:	903fa91e 	bne	r18,zero,8111fc60 <__reset+0xfb0ffc60>
8111fdbc:	8ddffc2c 	andhi	r23,r17,32752
8111fdc0:	003feb06 	br	8111fd70 <__reset+0xfb0ffd70>
8111fdc4:	d8c00d17 	ldw	r3,52(sp)
8111fdc8:	1cae703a 	and	r23,r3,r18
8111fdcc:	b83fb726 	beq	r23,zero,8111fcac <__reset+0xfb0ffcac>
8111fdd0:	003fa706 	br	8111fc70 <__reset+0xfb0ffc70>
8111fdd4:	21000044 	addi	r4,r4,1
8111fdd8:	d9000615 	stw	r4,24(sp)
8111fddc:	003f9006 	br	8111fc20 <__reset+0xfb0ffc20>
8111fde0:	01604534 	movhi	r5,33044
8111fde4:	297fae04 	addi	r5,r5,-328
8111fde8:	d9400915 	stw	r5,36(sp)
8111fdec:	0027883a 	mov	r19,zero
8111fdf0:	003ca206 	br	8111f07c <__reset+0xfb0ff07c>
8111fdf4:	9009883a 	mov	r4,r18
8111fdf8:	880b883a 	mov	r5,r17
8111fdfc:	da001315 	stw	r8,76(sp)
8111fe00:	111e90c0 	call	8111e90c <sulp>
8111fe04:	100d883a 	mov	r6,r2
8111fe08:	180f883a 	mov	r7,r3
8111fe0c:	9009883a 	mov	r4,r18
8111fe10:	880b883a 	mov	r5,r17
8111fe14:	1126b200 	call	81126b20 <__subdf3>
8111fe18:	000d883a 	mov	r6,zero
8111fe1c:	000f883a 	mov	r7,zero
8111fe20:	1009883a 	mov	r4,r2
8111fe24:	180b883a 	mov	r5,r3
8111fe28:	102b883a 	mov	r21,r2
8111fe2c:	182d883a 	mov	r22,r3
8111fe30:	11268c80 	call	811268c8 <__eqdf2>
8111fe34:	da001317 	ldw	r8,76(sp)
8111fe38:	103ee526 	beq	r2,zero,8111f9d0 <__reset+0xfb0ff9d0>
8111fe3c:	003f9b06 	br	8111fcac <__reset+0xfb0ffcac>
8111fe40:	d8800917 	ldw	r2,36(sp)
8111fe44:	10002226 	beq	r2,zero,8111fed0 <_strtod_r+0x1558>
8111fe48:	889ffc2c 	andhi	r2,r17,32752
8111fe4c:	00c1a834 	movhi	r3,1696
8111fe50:	18801f36 	bltu	r3,r2,8111fed0 <_strtod_r+0x1558>
8111fe54:	1004d53a 	srli	r2,r2,20
8111fe58:	00c01ac4 	movi	r3,107
8111fe5c:	1887c83a 	sub	r3,r3,r2
8111fe60:	00bfffc4 	movi	r2,-1
8111fe64:	10c4983a 	sll	r2,r2,r3
8111fe68:	14bf7d1e 	bne	r2,r18,8111fc60 <__reset+0xfb0ffc60>
8111fe6c:	00dffc34 	movhi	r3,32752
8111fe70:	18ffffc4 	addi	r3,r3,-1
8111fe74:	88c03526 	beq	r17,r3,8111ff4c <_strtod_r+0x15d4>
8111fe78:	8c5ffc2c 	andhi	r17,r17,32752
8111fe7c:	00800434 	movhi	r2,16
8111fe80:	002b883a 	mov	r21,zero
8111fe84:	88ad883a 	add	r22,r17,r2
8111fe88:	003f8806 	br	8111fcac <__reset+0xfb0ffcac>
8111fe8c:	01401a84 	movi	r5,106
8111fe90:	d9400915 	stw	r5,36(sp)
8111fe94:	8ddffc2c 	andhi	r23,r17,32752
8111fe98:	b82ed53a 	srli	r23,r23,20
8111fe9c:	00801ac4 	movi	r2,107
8111fea0:	15c5c83a 	sub	r2,r2,r23
8111fea4:	00be8e0e 	bge	zero,r2,8111f8e0 <__reset+0xfb0ff8e0>
8111fea8:	00c007c4 	movi	r3,31
8111feac:	18800a0e 	bge	r3,r2,8111fed8 <_strtod_r+0x1560>
8111feb0:	00c00d04 	movi	r3,52
8111feb4:	0025883a 	mov	r18,zero
8111feb8:	1880270e 	bge	r3,r2,8111ff58 <_strtod_r+0x15e0>
8111febc:	0440dc34 	movhi	r17,880
8111fec0:	003e8706 	br	8111f8e0 <__reset+0xfb0ff8e0>
8111fec4:	d8000915 	stw	zero,36(sp)
8111fec8:	05fe6a16 	blt	zero,r23,8111f874 <__reset+0xfb0ff874>
8111fecc:	003e8406 	br	8111f8e0 <__reset+0xfb0ff8e0>
8111fed0:	00bfffc4 	movi	r2,-1
8111fed4:	003fe406 	br	8111fe68 <__reset+0xfb0ffe68>
8111fed8:	00ffffc4 	movi	r3,-1
8111fedc:	1884983a 	sll	r2,r3,r2
8111fee0:	14a4703a 	and	r18,r2,r18
8111fee4:	003e7e06 	br	8111f8e0 <__reset+0xfb0ff8e0>
8111fee8:	00bffc34 	movhi	r2,65520
8111feec:	b8af883a 	add	r23,r23,r2
8111fef0:	057fffc4 	movi	r21,-1
8111fef4:	00800434 	movhi	r2,16
8111fef8:	1545883a 	add	r2,r2,r21
8111fefc:	b8acb03a 	or	r22,r23,r2
8111ff00:	003f6a06 	br	8111fcac <__reset+0xfb0ffcac>
8111ff04:	01604534 	movhi	r5,33044
8111ff08:	297fee04 	addi	r5,r5,-72
8111ff0c:	d9800204 	addi	r6,sp,8
8111ff10:	d9000604 	addi	r4,sp,24
8111ff14:	11243040 	call	81124304 <__hexnan>
8111ff18:	00c00144 	movi	r3,5
8111ff1c:	10fb5c1e 	bne	r2,r3,8111ec90 <__reset+0xfb0fec90>
8111ff20:	dc400317 	ldw	r17,12(sp)
8111ff24:	dc800217 	ldw	r18,8(sp)
8111ff28:	8c5ffc34 	orhi	r17,r17,32752
8111ff2c:	003b5a06 	br	8111ec98 <__reset+0xfb0fec98>
8111ff30:	480b883a 	mov	r5,r9
8111ff34:	d9800617 	ldw	r6,24(sp)
8111ff38:	4a400044 	addi	r9,r9,1
8111ff3c:	003eeb06 	br	8111faec <__reset+0xfb0ffaec>
8111ff40:	1025883a 	mov	r18,r2
8111ff44:	1823883a 	mov	r17,r3
8111ff48:	003c4c06 	br	8111f07c <__reset+0xfb0ff07c>
8111ff4c:	00ffffc4 	movi	r3,-1
8111ff50:	10ffc91e 	bne	r2,r3,8111fe78 <__reset+0xfb0ffe78>
8111ff54:	003da906 	br	8111f5fc <__reset+0xfb0ff5fc>
8111ff58:	10bff804 	addi	r2,r2,-32
8111ff5c:	00ffffc4 	movi	r3,-1
8111ff60:	1884983a 	sll	r2,r3,r2
8111ff64:	1462703a 	and	r17,r2,r17
8111ff68:	003e5d06 	br	8111f8e0 <__reset+0xfb0ff8e0>
8111ff6c:	1025883a 	mov	r18,r2
8111ff70:	1823883a 	mov	r17,r3
8111ff74:	003e5806 	br	8111f8d8 <__reset+0xfb0ff8d8>

8111ff78 <strtod>:
8111ff78:	00a04534 	movhi	r2,33044
8111ff7c:	10895a04 	addi	r2,r2,9576
8111ff80:	280d883a 	mov	r6,r5
8111ff84:	200b883a 	mov	r5,r4
8111ff88:	11000017 	ldw	r4,0(r2)
8111ff8c:	111e9781 	jmpi	8111e978 <_strtod_r>

8111ff90 <strtof>:
8111ff90:	defffb04 	addi	sp,sp,-20
8111ff94:	de00012e 	bgeu	sp,et,8111ff9c <strtof+0xc>
8111ff98:	003b68fa 	trap	3
8111ff9c:	dcc00315 	stw	r19,12(sp)
8111ffa0:	04e04534 	movhi	r19,33044
8111ffa4:	9cc95a04 	addi	r19,r19,9576
8111ffa8:	280d883a 	mov	r6,r5
8111ffac:	200b883a 	mov	r5,r4
8111ffb0:	99000017 	ldw	r4,0(r19)
8111ffb4:	dfc00415 	stw	ra,16(sp)
8111ffb8:	dc800215 	stw	r18,8(sp)
8111ffbc:	dc400115 	stw	r17,4(sp)
8111ffc0:	dc000015 	stw	r16,0(sp)
8111ffc4:	111e9780 	call	8111e978 <_strtod_r>
8111ffc8:	1009883a 	mov	r4,r2
8111ffcc:	180b883a 	mov	r5,r3
8111ffd0:	1025883a 	mov	r18,r2
8111ffd4:	1823883a 	mov	r17,r3
8111ffd8:	1111a6c0 	call	81111a6c <__truncdfsf2>
8111ffdc:	000b883a 	mov	r5,zero
8111ffe0:	1009883a 	mov	r4,r2
8111ffe4:	1021883a 	mov	r16,r2
8111ffe8:	11255280 	call	81125528 <__eqsf2>
8111ffec:	1000111e 	bne	r2,zero,81120034 <strtof+0xa4>
8111fff0:	000d883a 	mov	r6,zero
8111fff4:	000f883a 	mov	r7,zero
8111fff8:	9009883a 	mov	r4,r18
8111fffc:	880b883a 	mov	r5,r17
81120000:	11268c80 	call	811268c8 <__eqdf2>
81120004:	10000b26 	beq	r2,zero,81120034 <strtof+0xa4>
81120008:	98800017 	ldw	r2,0(r19)
8112000c:	00c00884 	movi	r3,34
81120010:	10c00015 	stw	r3,0(r2)
81120014:	8005883a 	mov	r2,r16
81120018:	dfc00417 	ldw	ra,16(sp)
8112001c:	dcc00317 	ldw	r19,12(sp)
81120020:	dc800217 	ldw	r18,8(sp)
81120024:	dc400117 	ldw	r17,4(sp)
81120028:	dc000017 	ldw	r16,0(sp)
8112002c:	dec00504 	addi	sp,sp,20
81120030:	f800283a 	ret
81120034:	015fe034 	movhi	r5,32640
81120038:	297fffc4 	addi	r5,r5,-1
8112003c:	8009883a 	mov	r4,r16
81120040:	11255a00 	call	811255a0 <__gesf2>
81120044:	0080070e 	bge	zero,r2,81120064 <strtof+0xd4>
81120048:	01dffc34 	movhi	r7,32752
8112004c:	39ffffc4 	addi	r7,r7,-1
81120050:	01bfffc4 	movi	r6,-1
81120054:	9009883a 	mov	r4,r18
81120058:	880b883a 	mov	r5,r17
8112005c:	11269500 	call	81126950 <__gedf2>
81120060:	00bfe90e 	bge	zero,r2,81120008 <__reset+0xfb100008>
81120064:	017fe034 	movhi	r5,65408
81120068:	297fffc4 	addi	r5,r5,-1
8112006c:	8009883a 	mov	r4,r16
81120070:	112565c0 	call	8112565c <__lesf2>
81120074:	103fe70e 	bge	r2,zero,81120014 <__reset+0xfb100014>
81120078:	01fffc34 	movhi	r7,65520
8112007c:	39ffffc4 	addi	r7,r7,-1
81120080:	01bfffc4 	movi	r6,-1
81120084:	9009883a 	mov	r4,r18
81120088:	880b883a 	mov	r5,r17
8112008c:	1126a2c0 	call	81126a2c <__ledf2>
81120090:	103fdd0e 	bge	r2,zero,81120008 <__reset+0xfb100008>
81120094:	003fdf06 	br	81120014 <__reset+0xfb100014>

81120098 <_strtoll_r>:
81120098:	00a04534 	movhi	r2,33044
8112009c:	defff304 	addi	sp,sp,-52
811200a0:	10895804 	addi	r2,r2,9568
811200a4:	de00012e 	bgeu	sp,et,811200ac <_strtoll_r+0x14>
811200a8:	003b68fa 	trap	3
811200ac:	dc800515 	stw	r18,20(sp)
811200b0:	14800017 	ldw	r18,0(r2)
811200b4:	dd800915 	stw	r22,36(sp)
811200b8:	dd400815 	stw	r21,32(sp)
811200bc:	dcc00615 	stw	r19,24(sp)
811200c0:	d9000015 	stw	r4,0(sp)
811200c4:	dfc00c15 	stw	ra,48(sp)
811200c8:	df000b15 	stw	fp,44(sp)
811200cc:	ddc00a15 	stw	r23,40(sp)
811200d0:	dd000715 	stw	r20,28(sp)
811200d4:	dc400415 	stw	r17,16(sp)
811200d8:	dc000315 	stw	r16,12(sp)
811200dc:	282d883a 	mov	r22,r5
811200e0:	302b883a 	mov	r21,r6
811200e4:	3827883a 	mov	r19,r7
811200e8:	2809883a 	mov	r4,r5
811200ec:	24000003 	ldbu	r16,0(r4)
811200f0:	24400044 	addi	r17,r4,1
811200f4:	2007883a 	mov	r3,r4
811200f8:	9405883a 	add	r2,r18,r16
811200fc:	10800043 	ldbu	r2,1(r2)
81120100:	8809883a 	mov	r4,r17
81120104:	1080020c 	andi	r2,r2,8
81120108:	103ff81e 	bne	r2,zero,811200ec <__reset+0xfb1000ec>
8112010c:	00800b44 	movi	r2,45
81120110:	80807826 	beq	r16,r2,811202f4 <_strtoll_r+0x25c>
81120114:	00800ac4 	movi	r2,43
81120118:	80807a26 	beq	r16,r2,81120304 <_strtoll_r+0x26c>
8112011c:	0039883a 	mov	fp,zero
81120120:	98004e26 	beq	r19,zero,8112025c <_strtoll_r+0x1c4>
81120124:	00800404 	movi	r2,16
81120128:	98808226 	beq	r19,r2,81120334 <_strtoll_r+0x29c>
8112012c:	982fd7fa 	srai	r23,r19,31
81120130:	9829883a 	mov	r20,r19
81120134:	e0004f26 	beq	fp,zero,81120274 <_strtoll_r+0x1dc>
81120138:	0017883a 	mov	r11,zero
8112013c:	02a00034 	movhi	r10,32768
81120140:	5809883a 	mov	r4,r11
81120144:	500b883a 	mov	r5,r10
81120148:	a00d883a 	mov	r6,r20
8112014c:	b80f883a 	mov	r7,r23
81120150:	da800215 	stw	r10,8(sp)
81120154:	dac00115 	stw	r11,4(sp)
81120158:	1124e340 	call	81124e34 <__umoddi3>
8112015c:	dac00117 	ldw	r11,4(sp)
81120160:	da800217 	ldw	r10,8(sp)
81120164:	a00d883a 	mov	r6,r20
81120168:	5809883a 	mov	r4,r11
8112016c:	500b883a 	mov	r5,r10
81120170:	b80f883a 	mov	r7,r23
81120174:	d8800115 	stw	r2,4(sp)
81120178:	11248b40 	call	811248b4 <__udivdi3>
8112017c:	9409883a 	add	r4,r18,r16
81120180:	21000043 	ldbu	r4,1(r4)
81120184:	1019883a 	mov	r12,r2
81120188:	880b883a 	mov	r5,r17
8112018c:	2240010c 	andi	r9,r4,4
81120190:	0015883a 	mov	r10,zero
81120194:	000d883a 	mov	r6,zero
81120198:	000f883a 	mov	r7,zero
8112019c:	03400044 	movi	r13,1
811201a0:	02ffffc4 	movi	r11,-1
811201a4:	da000117 	ldw	r8,4(sp)
811201a8:	48000d26 	beq	r9,zero,811201e0 <_strtoll_r+0x148>
811201ac:	843ff404 	addi	r16,r16,-48
811201b0:	84c0110e 	bge	r16,r19,811201f8 <_strtoll_r+0x160>
811201b4:	52c00426 	beq	r10,r11,811201c8 <_strtoll_r+0x130>
811201b8:	19c00236 	bltu	r3,r7,811201c4 <_strtoll_r+0x12c>
811201bc:	38c0311e 	bne	r7,r3,81120284 <_strtoll_r+0x1ec>
811201c0:	6180302e 	bgeu	r12,r6,81120284 <_strtoll_r+0x1ec>
811201c4:	02bfffc4 	movi	r10,-1
811201c8:	2c000003 	ldbu	r16,0(r5)
811201cc:	29400044 	addi	r5,r5,1
811201d0:	9409883a 	add	r4,r18,r16
811201d4:	21000043 	ldbu	r4,1(r4)
811201d8:	2240010c 	andi	r9,r4,4
811201dc:	483ff31e 	bne	r9,zero,811201ac <__reset+0xfb1001ac>
811201e0:	210000cc 	andi	r4,r4,3
811201e4:	20000426 	beq	r4,zero,811201f8 <_strtoll_r+0x160>
811201e8:	23403426 	beq	r4,r13,811202bc <_strtoll_r+0x224>
811201ec:	008015c4 	movi	r2,87
811201f0:	80a1c83a 	sub	r16,r16,r2
811201f4:	84ffef16 	blt	r16,r19,811201b4 <__reset+0xfb1001b4>
811201f8:	00bfffc4 	movi	r2,-1
811201fc:	50803426 	beq	r10,r2,811202d0 <_strtoll_r+0x238>
81120200:	e0000426 	beq	fp,zero,81120214 <_strtoll_r+0x17c>
81120204:	018dc83a 	sub	r6,zero,r6
81120208:	3004c03a 	cmpne	r2,r6,zero
8112020c:	01e1c83a 	sub	r16,zero,r7
81120210:	808fc83a 	sub	r7,r16,r2
81120214:	3005883a 	mov	r2,r6
81120218:	3807883a 	mov	r3,r7
8112021c:	a8000326 	beq	r21,zero,8112022c <_strtoll_r+0x194>
81120220:	5000321e 	bne	r10,zero,811202ec <_strtoll_r+0x254>
81120224:	b00b883a 	mov	r5,r22
81120228:	a9400015 	stw	r5,0(r21)
8112022c:	dfc00c17 	ldw	ra,48(sp)
81120230:	df000b17 	ldw	fp,44(sp)
81120234:	ddc00a17 	ldw	r23,40(sp)
81120238:	dd800917 	ldw	r22,36(sp)
8112023c:	dd400817 	ldw	r21,32(sp)
81120240:	dd000717 	ldw	r20,28(sp)
81120244:	dcc00617 	ldw	r19,24(sp)
81120248:	dc800517 	ldw	r18,20(sp)
8112024c:	dc400417 	ldw	r17,16(sp)
81120250:	dc000317 	ldw	r16,12(sp)
81120254:	dec00d04 	addi	sp,sp,52
81120258:	f800283a 	ret
8112025c:	00800c04 	movi	r2,48
81120260:	80802c26 	beq	r16,r2,81120314 <_strtoll_r+0x27c>
81120264:	05000284 	movi	r20,10
81120268:	002f883a 	mov	r23,zero
8112026c:	a027883a 	mov	r19,r20
81120270:	e03fb11e 	bne	fp,zero,81120138 <__reset+0xfb100138>
81120274:	02a00034 	movhi	r10,32768
81120278:	52bfffc4 	addi	r10,r10,-1
8112027c:	02ffffc4 	movi	r11,-1
81120280:	003faf06 	br	81120140 <__reset+0xfb100140>
81120284:	33000f26 	beq	r6,r12,811202c4 <_strtoll_r+0x22c>
81120288:	b985383a 	mul	r2,r23,r6
8112028c:	3d0f383a 	mul	r7,r7,r20
81120290:	3508383a 	mulxuu	r4,r6,r20
81120294:	350d383a 	mul	r6,r6,r20
81120298:	8013d7fa 	srai	r9,r16,31
8112029c:	388f883a 	add	r7,r7,r2
811202a0:	818d883a 	add	r6,r16,r6
811202a4:	390f883a 	add	r7,r7,r4
811202a8:	3421803a 	cmpltu	r16,r6,r16
811202ac:	49cf883a 	add	r7,r9,r7
811202b0:	81cf883a 	add	r7,r16,r7
811202b4:	02800044 	movi	r10,1
811202b8:	003fc306 	br	811201c8 <__reset+0xfb1001c8>
811202bc:	00800dc4 	movi	r2,55
811202c0:	003fcb06 	br	811201f0 <__reset+0xfb1001f0>
811202c4:	38fff01e 	bne	r7,r3,81120288 <__reset+0xfb100288>
811202c8:	443fbe16 	blt	r8,r16,811201c4 <__reset+0xfb1001c4>
811202cc:	003fee06 	br	81120288 <__reset+0xfb100288>
811202d0:	e0002426 	beq	fp,zero,81120364 <_strtoll_r+0x2cc>
811202d4:	0005883a 	mov	r2,zero
811202d8:	00e00034 	movhi	r3,32768
811202dc:	d9800017 	ldw	r6,0(sp)
811202e0:	01000884 	movi	r4,34
811202e4:	31000015 	stw	r4,0(r6)
811202e8:	a83fd026 	beq	r21,zero,8112022c <__reset+0xfb10022c>
811202ec:	297fffc4 	addi	r5,r5,-1
811202f0:	003fcd06 	br	81120228 <__reset+0xfb100228>
811202f4:	1c400084 	addi	r17,r3,2
811202f8:	1c000043 	ldbu	r16,1(r3)
811202fc:	07000044 	movi	fp,1
81120300:	003f8706 	br	81120120 <__reset+0xfb100120>
81120304:	1c400084 	addi	r17,r3,2
81120308:	1c000043 	ldbu	r16,1(r3)
8112030c:	0039883a 	mov	fp,zero
81120310:	003f8306 	br	81120120 <__reset+0xfb100120>
81120314:	88800003 	ldbu	r2,0(r17)
81120318:	00c01604 	movi	r3,88
8112031c:	108037cc 	andi	r2,r2,223
81120320:	10c00a26 	beq	r2,r3,8112034c <_strtoll_r+0x2b4>
81120324:	05000204 	movi	r20,8
81120328:	002f883a 	mov	r23,zero
8112032c:	a027883a 	mov	r19,r20
81120330:	003f8006 	br	81120134 <__reset+0xfb100134>
81120334:	00800c04 	movi	r2,48
81120338:	80800e1e 	bne	r16,r2,81120374 <_strtoll_r+0x2dc>
8112033c:	88800003 	ldbu	r2,0(r17)
81120340:	00c01604 	movi	r3,88
81120344:	108037cc 	andi	r2,r2,223
81120348:	10c00a1e 	bne	r2,r3,81120374 <_strtoll_r+0x2dc>
8112034c:	05000404 	movi	r20,16
81120350:	8c000043 	ldbu	r16,1(r17)
81120354:	002f883a 	mov	r23,zero
81120358:	8c400084 	addi	r17,r17,2
8112035c:	a027883a 	mov	r19,r20
81120360:	003f7406 	br	81120134 <__reset+0xfb100134>
81120364:	00e00034 	movhi	r3,32768
81120368:	18ffffc4 	addi	r3,r3,-1
8112036c:	5005883a 	mov	r2,r10
81120370:	003fda06 	br	811202dc <__reset+0xfb1002dc>
81120374:	9829883a 	mov	r20,r19
81120378:	002f883a 	mov	r23,zero
8112037c:	003f6d06 	br	81120134 <__reset+0xfb100134>

81120380 <_strtoul_r>:
81120380:	00a04534 	movhi	r2,33044
81120384:	defff604 	addi	sp,sp,-40
81120388:	10895804 	addi	r2,r2,9568
8112038c:	de00012e 	bgeu	sp,et,81120394 <_strtoul_r+0x14>
81120390:	003b68fa 	trap	3
81120394:	dc800315 	stw	r18,12(sp)
81120398:	14800017 	ldw	r18,0(r2)
8112039c:	dd400615 	stw	r21,24(sp)
811203a0:	dd000515 	stw	r20,20(sp)
811203a4:	dcc00415 	stw	r19,16(sp)
811203a8:	2029883a 	mov	r20,r4
811203ac:	dfc00915 	stw	ra,36(sp)
811203b0:	ddc00815 	stw	r23,32(sp)
811203b4:	dd800715 	stw	r22,28(sp)
811203b8:	dc400215 	stw	r17,8(sp)
811203bc:	dc000115 	stw	r16,4(sp)
811203c0:	2827883a 	mov	r19,r5
811203c4:	382b883a 	mov	r21,r7
811203c8:	2809883a 	mov	r4,r5
811203cc:	24000003 	ldbu	r16,0(r4)
811203d0:	24400044 	addi	r17,r4,1
811203d4:	2007883a 	mov	r3,r4
811203d8:	9405883a 	add	r2,r18,r16
811203dc:	10800043 	ldbu	r2,1(r2)
811203e0:	8809883a 	mov	r4,r17
811203e4:	1080020c 	andi	r2,r2,8
811203e8:	103ff81e 	bne	r2,zero,811203cc <__reset+0xfb1003cc>
811203ec:	00800b44 	movi	r2,45
811203f0:	80805326 	beq	r16,r2,81120540 <_strtoul_r+0x1c0>
811203f4:	00800ac4 	movi	r2,43
811203f8:	80805526 	beq	r16,r2,81120550 <_strtoul_r+0x1d0>
811203fc:	002f883a 	mov	r23,zero
81120400:	a8000f26 	beq	r21,zero,81120440 <_strtoul_r+0xc0>
81120404:	00800404 	movi	r2,16
81120408:	a8805f26 	beq	r21,r2,81120588 <_strtoul_r+0x208>
8112040c:	013fffc4 	movi	r4,-1
81120410:	a80b883a 	mov	r5,r21
81120414:	d9800015 	stw	r6,0(sp)
81120418:	112546c0 	call	8112546c <__udivsi3>
8112041c:	a80b883a 	mov	r5,r21
81120420:	013fffc4 	movi	r4,-1
81120424:	102d883a 	mov	r22,r2
81120428:	11254d00 	call	811254d0 <__umodsi3>
8112042c:	d9800017 	ldw	r6,0(sp)
81120430:	1019883a 	mov	r12,r2
81120434:	a817883a 	mov	r11,r21
81120438:	b00f883a 	mov	r7,r22
8112043c:	00000706 	br	8112045c <_strtoul_r+0xdc>
81120440:	00800c04 	movi	r2,48
81120444:	80804626 	beq	r16,r2,81120560 <_strtoul_r+0x1e0>
81120448:	05400284 	movi	r21,10
8112044c:	01c666b4 	movhi	r7,6554
81120450:	03000144 	movi	r12,5
81120454:	39e66644 	addi	r7,r7,-26215
81120458:	a817883a 	mov	r11,r21
8112045c:	9407883a 	add	r3,r18,r16
81120460:	18c00043 	ldbu	r3,1(r3)
81120464:	8809883a 	mov	r4,r17
81120468:	0011883a 	mov	r8,zero
8112046c:	1940010c 	andi	r5,r3,4
81120470:	0005883a 	mov	r2,zero
81120474:	02800044 	movi	r10,1
81120478:	027fffc4 	movi	r9,-1
8112047c:	28000e26 	beq	r5,zero,811204b8 <_strtoul_r+0x138>
81120480:	843ff404 	addi	r16,r16,-48
81120484:	8540120e 	bge	r16,r21,811204d0 <_strtoul_r+0x150>
81120488:	42400526 	beq	r8,r9,811204a0 <_strtoul_r+0x120>
8112048c:	38802236 	bltu	r7,r2,81120518 <_strtoul_r+0x198>
81120490:	11c02026 	beq	r2,r7,81120514 <_strtoul_r+0x194>
81120494:	12c5383a 	mul	r2,r2,r11
81120498:	02000044 	movi	r8,1
8112049c:	8085883a 	add	r2,r16,r2
811204a0:	24000003 	ldbu	r16,0(r4)
811204a4:	21000044 	addi	r4,r4,1
811204a8:	9407883a 	add	r3,r18,r16
811204ac:	18c00043 	ldbu	r3,1(r3)
811204b0:	1940010c 	andi	r5,r3,4
811204b4:	283ff21e 	bne	r5,zero,81120480 <__reset+0xfb100480>
811204b8:	18c000cc 	andi	r3,r3,3
811204bc:	18000426 	beq	r3,zero,811204d0 <_strtoul_r+0x150>
811204c0:	1a801726 	beq	r3,r10,81120520 <_strtoul_r+0x1a0>
811204c4:	00c015c4 	movi	r3,87
811204c8:	80e1c83a 	sub	r16,r16,r3
811204cc:	857fee16 	blt	r16,r21,81120488 <__reset+0xfb100488>
811204d0:	40001516 	blt	r8,zero,81120528 <_strtoul_r+0x1a8>
811204d4:	b8000126 	beq	r23,zero,811204dc <_strtoul_r+0x15c>
811204d8:	0085c83a 	sub	r2,zero,r2
811204dc:	30000226 	beq	r6,zero,811204e8 <_strtoul_r+0x168>
811204e0:	4000151e 	bne	r8,zero,81120538 <_strtoul_r+0x1b8>
811204e4:	34c00015 	stw	r19,0(r6)
811204e8:	dfc00917 	ldw	ra,36(sp)
811204ec:	ddc00817 	ldw	r23,32(sp)
811204f0:	dd800717 	ldw	r22,28(sp)
811204f4:	dd400617 	ldw	r21,24(sp)
811204f8:	dd000517 	ldw	r20,20(sp)
811204fc:	dcc00417 	ldw	r19,16(sp)
81120500:	dc800317 	ldw	r18,12(sp)
81120504:	dc400217 	ldw	r17,8(sp)
81120508:	dc000117 	ldw	r16,4(sp)
8112050c:	dec00a04 	addi	sp,sp,40
81120510:	f800283a 	ret
81120514:	643fdf0e 	bge	r12,r16,81120494 <__reset+0xfb100494>
81120518:	023fffc4 	movi	r8,-1
8112051c:	003fe006 	br	811204a0 <__reset+0xfb1004a0>
81120520:	00c00dc4 	movi	r3,55
81120524:	003fe806 	br	811204c8 <__reset+0xfb1004c8>
81120528:	00800884 	movi	r2,34
8112052c:	a0800015 	stw	r2,0(r20)
81120530:	00bfffc4 	movi	r2,-1
81120534:	303fec26 	beq	r6,zero,811204e8 <__reset+0xfb1004e8>
81120538:	24ffffc4 	addi	r19,r4,-1
8112053c:	003fe906 	br	811204e4 <__reset+0xfb1004e4>
81120540:	1c400084 	addi	r17,r3,2
81120544:	1c000043 	ldbu	r16,1(r3)
81120548:	05c00044 	movi	r23,1
8112054c:	003fac06 	br	81120400 <__reset+0xfb100400>
81120550:	1c400084 	addi	r17,r3,2
81120554:	1c000043 	ldbu	r16,1(r3)
81120558:	002f883a 	mov	r23,zero
8112055c:	003fa806 	br	81120400 <__reset+0xfb100400>
81120560:	88800003 	ldbu	r2,0(r17)
81120564:	00c01604 	movi	r3,88
81120568:	108037cc 	andi	r2,r2,223
8112056c:	10c00c26 	beq	r2,r3,811205a0 <_strtoul_r+0x220>
81120570:	05400204 	movi	r21,8
81120574:	01c80034 	movhi	r7,8192
81120578:	030001c4 	movi	r12,7
8112057c:	39ffffc4 	addi	r7,r7,-1
81120580:	a817883a 	mov	r11,r21
81120584:	003fb506 	br	8112045c <__reset+0xfb10045c>
81120588:	00800c04 	movi	r2,48
8112058c:	80800c1e 	bne	r16,r2,811205c0 <_strtoul_r+0x240>
81120590:	88800003 	ldbu	r2,0(r17)
81120594:	00c01604 	movi	r3,88
81120598:	108037cc 	andi	r2,r2,223
8112059c:	10c0081e 	bne	r2,r3,811205c0 <_strtoul_r+0x240>
811205a0:	02c00404 	movi	r11,16
811205a4:	05840034 	movhi	r22,4096
811205a8:	8c000043 	ldbu	r16,1(r17)
811205ac:	030003c4 	movi	r12,15
811205b0:	8c400084 	addi	r17,r17,2
811205b4:	b5bfffc4 	addi	r22,r22,-1
811205b8:	582b883a 	mov	r21,r11
811205bc:	003f9e06 	br	81120438 <__reset+0xfb100438>
811205c0:	01c40034 	movhi	r7,4096
811205c4:	030003c4 	movi	r12,15
811205c8:	39ffffc4 	addi	r7,r7,-1
811205cc:	a817883a 	mov	r11,r21
811205d0:	003fa206 	br	8112045c <__reset+0xfb10045c>

811205d4 <strtoul>:
811205d4:	00a04534 	movhi	r2,33044
811205d8:	10895a04 	addi	r2,r2,9576
811205dc:	300f883a 	mov	r7,r6
811205e0:	280d883a 	mov	r6,r5
811205e4:	200b883a 	mov	r5,r4
811205e8:	11000017 	ldw	r4,0(r2)
811205ec:	11203801 	jmpi	81120380 <_strtoul_r>

811205f0 <_strtoull_r>:
811205f0:	00a04534 	movhi	r2,33044
811205f4:	defff404 	addi	sp,sp,-48
811205f8:	10895804 	addi	r2,r2,9568
811205fc:	de00012e 	bgeu	sp,et,81120604 <_strtoull_r+0x14>
81120600:	003b68fa 	trap	3
81120604:	dc400315 	stw	r17,12(sp)
81120608:	14400017 	ldw	r17,0(r2)
8112060c:	dd400715 	stw	r21,28(sp)
81120610:	dd000615 	stw	r20,24(sp)
81120614:	dcc00515 	stw	r19,20(sp)
81120618:	dc800415 	stw	r18,16(sp)
8112061c:	dfc00b15 	stw	ra,44(sp)
81120620:	df000a15 	stw	fp,40(sp)
81120624:	ddc00915 	stw	r23,36(sp)
81120628:	dd800815 	stw	r22,32(sp)
8112062c:	dc000215 	stw	r16,8(sp)
81120630:	2827883a 	mov	r19,r5
81120634:	202b883a 	mov	r21,r4
81120638:	3029883a 	mov	r20,r6
8112063c:	3825883a 	mov	r18,r7
81120640:	2807883a 	mov	r3,r5
81120644:	1c000003 	ldbu	r16,0(r3)
81120648:	1f000044 	addi	fp,r3,1
8112064c:	1809883a 	mov	r4,r3
81120650:	8c05883a 	add	r2,r17,r16
81120654:	10800043 	ldbu	r2,1(r2)
81120658:	e007883a 	mov	r3,fp
8112065c:	1080020c 	andi	r2,r2,8
81120660:	103ff81e 	bne	r2,zero,81120644 <__reset+0xfb100644>
81120664:	00800b44 	movi	r2,45
81120668:	80806e26 	beq	r16,r2,81120824 <_strtoull_r+0x234>
8112066c:	00800ac4 	movi	r2,43
81120670:	80807026 	beq	r16,r2,81120834 <_strtoull_r+0x244>
81120674:	002f883a 	mov	r23,zero
81120678:	90001426 	beq	r18,zero,811206cc <_strtoull_r+0xdc>
8112067c:	00800404 	movi	r2,16
81120680:	90807c26 	beq	r18,r2,81120874 <_strtoull_r+0x284>
81120684:	902dd7fa 	srai	r22,r18,31
81120688:	013fffc4 	movi	r4,-1
8112068c:	200b883a 	mov	r5,r4
81120690:	900d883a 	mov	r6,r18
81120694:	b00f883a 	mov	r7,r22
81120698:	11248b40 	call	811248b4 <__udivdi3>
8112069c:	013fffc4 	movi	r4,-1
811206a0:	900d883a 	mov	r6,r18
811206a4:	b00f883a 	mov	r7,r22
811206a8:	200b883a 	mov	r5,r4
811206ac:	d8c00115 	stw	r3,4(sp)
811206b0:	d8800015 	stw	r2,0(sp)
811206b4:	1124e340 	call	81124e34 <__umoddi3>
811206b8:	101b883a 	mov	r13,r2
811206bc:	9015883a 	mov	r10,r18
811206c0:	dac00017 	ldw	r11,0(sp)
811206c4:	da000117 	ldw	r8,4(sp)
811206c8:	00000a06 	br	811206f4 <_strtoull_r+0x104>
811206cc:	00800c04 	movi	r2,48
811206d0:	80805c26 	beq	r16,r2,81120844 <_strtoull_r+0x254>
811206d4:	02800284 	movi	r10,10
811206d8:	02e666b4 	movhi	r11,39322
811206dc:	020666b4 	movhi	r8,6554
811206e0:	03400144 	movi	r13,5
811206e4:	5ae66644 	addi	r11,r11,-26215
811206e8:	42266644 	addi	r8,r8,-26215
811206ec:	002d883a 	mov	r22,zero
811206f0:	5025883a 	mov	r18,r10
811206f4:	8c0b883a 	add	r5,r17,r16
811206f8:	29400043 	ldbu	r5,1(r5)
811206fc:	e009883a 	mov	r4,fp
81120700:	000f883a 	mov	r7,zero
81120704:	2980010c 	andi	r6,r5,4
81120708:	0005883a 	mov	r2,zero
8112070c:	0007883a 	mov	r3,zero
81120710:	03000044 	movi	r12,1
81120714:	027fffc4 	movi	r9,-1
81120718:	30000d26 	beq	r6,zero,81120750 <_strtoull_r+0x160>
8112071c:	843ff404 	addi	r16,r16,-48
81120720:	8480110e 	bge	r16,r18,81120768 <_strtoull_r+0x178>
81120724:	3a400426 	beq	r7,r9,81120738 <_strtoull_r+0x148>
81120728:	40c00236 	bltu	r8,r3,81120734 <_strtoull_r+0x144>
8112072c:	1a00231e 	bne	r3,r8,811207bc <_strtoull_r+0x1cc>
81120730:	5880222e 	bgeu	r11,r2,811207bc <_strtoull_r+0x1cc>
81120734:	01ffffc4 	movi	r7,-1
81120738:	24000003 	ldbu	r16,0(r4)
8112073c:	21000044 	addi	r4,r4,1
81120740:	8c0b883a 	add	r5,r17,r16
81120744:	29400043 	ldbu	r5,1(r5)
81120748:	2980010c 	andi	r6,r5,4
8112074c:	303ff31e 	bne	r6,zero,8112071c <__reset+0xfb10071c>
81120750:	294000cc 	andi	r5,r5,3
81120754:	28000426 	beq	r5,zero,81120768 <_strtoull_r+0x178>
81120758:	2b002626 	beq	r5,r12,811207f4 <_strtoull_r+0x204>
8112075c:	014015c4 	movi	r5,87
81120760:	8161c83a 	sub	r16,r16,r5
81120764:	84bfef16 	blt	r16,r18,81120724 <__reset+0xfb100724>
81120768:	38002716 	blt	r7,zero,81120808 <_strtoull_r+0x218>
8112076c:	b8000426 	beq	r23,zero,81120780 <_strtoull_r+0x190>
81120770:	0085c83a 	sub	r2,zero,r2
81120774:	100ac03a 	cmpne	r5,r2,zero
81120778:	00e1c83a 	sub	r16,zero,r3
8112077c:	8147c83a 	sub	r3,r16,r5
81120780:	a0000226 	beq	r20,zero,8112078c <_strtoull_r+0x19c>
81120784:	3800251e 	bne	r7,zero,8112081c <_strtoull_r+0x22c>
81120788:	a4c00015 	stw	r19,0(r20)
8112078c:	dfc00b17 	ldw	ra,44(sp)
81120790:	df000a17 	ldw	fp,40(sp)
81120794:	ddc00917 	ldw	r23,36(sp)
81120798:	dd800817 	ldw	r22,32(sp)
8112079c:	dd400717 	ldw	r21,28(sp)
811207a0:	dd000617 	ldw	r20,24(sp)
811207a4:	dcc00517 	ldw	r19,20(sp)
811207a8:	dc800417 	ldw	r18,16(sp)
811207ac:	dc400317 	ldw	r17,12(sp)
811207b0:	dc000217 	ldw	r16,8(sp)
811207b4:	dec00c04 	addi	sp,sp,48
811207b8:	f800283a 	ret
811207bc:	12c00f26 	beq	r2,r11,811207fc <_strtoull_r+0x20c>
811207c0:	b08d383a 	mul	r6,r22,r2
811207c4:	1a87383a 	mul	r3,r3,r10
811207c8:	128a383a 	mulxuu	r5,r2,r10
811207cc:	1285383a 	mul	r2,r2,r10
811207d0:	800fd7fa 	srai	r7,r16,31
811207d4:	1987883a 	add	r3,r3,r6
811207d8:	8085883a 	add	r2,r16,r2
811207dc:	1947883a 	add	r3,r3,r5
811207e0:	38c7883a 	add	r3,r7,r3
811207e4:	1421803a 	cmpltu	r16,r2,r16
811207e8:	80c7883a 	add	r3,r16,r3
811207ec:	01c00044 	movi	r7,1
811207f0:	003fd106 	br	81120738 <__reset+0xfb100738>
811207f4:	01400dc4 	movi	r5,55
811207f8:	003fd906 	br	81120760 <__reset+0xfb100760>
811207fc:	1a3ff01e 	bne	r3,r8,811207c0 <__reset+0xfb1007c0>
81120800:	6c3fcc16 	blt	r13,r16,81120734 <__reset+0xfb100734>
81120804:	003fee06 	br	811207c0 <__reset+0xfb1007c0>
81120808:	00800884 	movi	r2,34
8112080c:	a8800015 	stw	r2,0(r21)
81120810:	00bfffc4 	movi	r2,-1
81120814:	1007883a 	mov	r3,r2
81120818:	a03fdc26 	beq	r20,zero,8112078c <__reset+0xfb10078c>
8112081c:	24ffffc4 	addi	r19,r4,-1
81120820:	003fd906 	br	81120788 <__reset+0xfb100788>
81120824:	27000084 	addi	fp,r4,2
81120828:	24000043 	ldbu	r16,1(r4)
8112082c:	05c00044 	movi	r23,1
81120830:	003f9106 	br	81120678 <__reset+0xfb100678>
81120834:	27000084 	addi	fp,r4,2
81120838:	24000043 	ldbu	r16,1(r4)
8112083c:	002f883a 	mov	r23,zero
81120840:	003f8d06 	br	81120678 <__reset+0xfb100678>
81120844:	e0800003 	ldbu	r2,0(fp)
81120848:	00c01604 	movi	r3,88
8112084c:	108037cc 	andi	r2,r2,223
81120850:	10c00e26 	beq	r2,r3,8112088c <_strtoull_r+0x29c>
81120854:	02800204 	movi	r10,8
81120858:	02ffffc4 	movi	r11,-1
8112085c:	02080034 	movhi	r8,8192
81120860:	034001c4 	movi	r13,7
81120864:	42d1883a 	add	r8,r8,r11
81120868:	002d883a 	mov	r22,zero
8112086c:	5025883a 	mov	r18,r10
81120870:	003fa006 	br	811206f4 <__reset+0xfb1006f4>
81120874:	00800c04 	movi	r2,48
81120878:	80800e1e 	bne	r16,r2,811208b4 <_strtoull_r+0x2c4>
8112087c:	e0800003 	ldbu	r2,0(fp)
81120880:	00c01604 	movi	r3,88
81120884:	108037cc 	andi	r2,r2,223
81120888:	10c00a1e 	bne	r2,r3,811208b4 <_strtoull_r+0x2c4>
8112088c:	02800404 	movi	r10,16
81120890:	02ffffc4 	movi	r11,-1
81120894:	02040034 	movhi	r8,4096
81120898:	e4000043 	ldbu	r16,1(fp)
8112089c:	034003c4 	movi	r13,15
811208a0:	e7000084 	addi	fp,fp,2
811208a4:	42d1883a 	add	r8,r8,r11
811208a8:	002d883a 	mov	r22,zero
811208ac:	5025883a 	mov	r18,r10
811208b0:	003f9006 	br	811206f4 <__reset+0xfb1006f4>
811208b4:	02ffffc4 	movi	r11,-1
811208b8:	02040034 	movhi	r8,4096
811208bc:	034003c4 	movi	r13,15
811208c0:	42d1883a 	add	r8,r8,r11
811208c4:	9015883a 	mov	r10,r18
811208c8:	002d883a 	mov	r22,zero
811208cc:	003f8906 	br	811206f4 <__reset+0xfb1006f4>

811208d0 <__ssprint_r>:
811208d0:	defff604 	addi	sp,sp,-40
811208d4:	de00012e 	bgeu	sp,et,811208dc <__ssprint_r+0xc>
811208d8:	003b68fa 	trap	3
811208dc:	30800217 	ldw	r2,8(r6)
811208e0:	dc800215 	stw	r18,8(sp)
811208e4:	dfc00915 	stw	ra,36(sp)
811208e8:	df000815 	stw	fp,32(sp)
811208ec:	ddc00715 	stw	r23,28(sp)
811208f0:	dd800615 	stw	r22,24(sp)
811208f4:	dd400515 	stw	r21,20(sp)
811208f8:	dd000415 	stw	r20,16(sp)
811208fc:	dcc00315 	stw	r19,12(sp)
81120900:	dc400115 	stw	r17,4(sp)
81120904:	dc000015 	stw	r16,0(sp)
81120908:	3025883a 	mov	r18,r6
8112090c:	10005826 	beq	r2,zero,81120a70 <__ssprint_r+0x1a0>
81120910:	2027883a 	mov	r19,r4
81120914:	35c00017 	ldw	r23,0(r6)
81120918:	29000017 	ldw	r4,0(r5)
8112091c:	28800217 	ldw	r2,8(r5)
81120920:	2823883a 	mov	r17,r5
81120924:	0039883a 	mov	fp,zero
81120928:	0021883a 	mov	r16,zero
8112092c:	80003926 	beq	r16,zero,81120a14 <__ssprint_r+0x144>
81120930:	102b883a 	mov	r21,r2
81120934:	102d883a 	mov	r22,r2
81120938:	80803a36 	bltu	r16,r2,81120a24 <__ssprint_r+0x154>
8112093c:	88c0030b 	ldhu	r3,12(r17)
81120940:	1881200c 	andi	r2,r3,1152
81120944:	10002626 	beq	r2,zero,811209e0 <__ssprint_r+0x110>
81120948:	88800517 	ldw	r2,20(r17)
8112094c:	89400417 	ldw	r5,16(r17)
81120950:	81800044 	addi	r6,r16,1
81120954:	108f883a 	add	r7,r2,r2
81120958:	3885883a 	add	r2,r7,r2
8112095c:	100ed7fa 	srli	r7,r2,31
81120960:	216dc83a 	sub	r22,r4,r5
81120964:	3589883a 	add	r4,r6,r22
81120968:	3885883a 	add	r2,r7,r2
8112096c:	102bd07a 	srai	r21,r2,1
81120970:	a80d883a 	mov	r6,r21
81120974:	a900022e 	bgeu	r21,r4,81120980 <__ssprint_r+0xb0>
81120978:	202b883a 	mov	r21,r4
8112097c:	200d883a 	mov	r6,r4
81120980:	18c1000c 	andi	r3,r3,1024
81120984:	18002a26 	beq	r3,zero,81120a30 <__ssprint_r+0x160>
81120988:	300b883a 	mov	r5,r6
8112098c:	9809883a 	mov	r4,r19
81120990:	11126700 	call	81112670 <_malloc_r>
81120994:	1029883a 	mov	r20,r2
81120998:	10002c26 	beq	r2,zero,81120a4c <__ssprint_r+0x17c>
8112099c:	89400417 	ldw	r5,16(r17)
811209a0:	b00d883a 	mov	r6,r22
811209a4:	1009883a 	mov	r4,r2
811209a8:	1112e840 	call	81112e84 <memcpy>
811209ac:	8880030b 	ldhu	r2,12(r17)
811209b0:	00fedfc4 	movi	r3,-1153
811209b4:	10c4703a 	and	r2,r2,r3
811209b8:	10802014 	ori	r2,r2,128
811209bc:	8880030d 	sth	r2,12(r17)
811209c0:	a589883a 	add	r4,r20,r22
811209c4:	adadc83a 	sub	r22,r21,r22
811209c8:	8d400515 	stw	r21,20(r17)
811209cc:	8d800215 	stw	r22,8(r17)
811209d0:	8d000415 	stw	r20,16(r17)
811209d4:	89000015 	stw	r4,0(r17)
811209d8:	802b883a 	mov	r21,r16
811209dc:	802d883a 	mov	r22,r16
811209e0:	b00d883a 	mov	r6,r22
811209e4:	e00b883a 	mov	r5,fp
811209e8:	111cf580 	call	8111cf58 <memmove>
811209ec:	88800217 	ldw	r2,8(r17)
811209f0:	89000017 	ldw	r4,0(r17)
811209f4:	90c00217 	ldw	r3,8(r18)
811209f8:	1545c83a 	sub	r2,r2,r21
811209fc:	2589883a 	add	r4,r4,r22
81120a00:	88800215 	stw	r2,8(r17)
81120a04:	89000015 	stw	r4,0(r17)
81120a08:	1c21c83a 	sub	r16,r3,r16
81120a0c:	94000215 	stw	r16,8(r18)
81120a10:	80001726 	beq	r16,zero,81120a70 <__ssprint_r+0x1a0>
81120a14:	bf000017 	ldw	fp,0(r23)
81120a18:	bc000117 	ldw	r16,4(r23)
81120a1c:	bdc00204 	addi	r23,r23,8
81120a20:	003fc206 	br	8112092c <__reset+0xfb10092c>
81120a24:	802b883a 	mov	r21,r16
81120a28:	802d883a 	mov	r22,r16
81120a2c:	003fec06 	br	811209e0 <__reset+0xfb1009e0>
81120a30:	9809883a 	mov	r4,r19
81120a34:	111e1780 	call	8111e178 <_realloc_r>
81120a38:	1029883a 	mov	r20,r2
81120a3c:	103fe01e 	bne	r2,zero,811209c0 <__reset+0xfb1009c0>
81120a40:	89400417 	ldw	r5,16(r17)
81120a44:	9809883a 	mov	r4,r19
81120a48:	111c0e40 	call	8111c0e4 <_free_r>
81120a4c:	88c0030b 	ldhu	r3,12(r17)
81120a50:	00800304 	movi	r2,12
81120a54:	98800015 	stw	r2,0(r19)
81120a58:	18c01014 	ori	r3,r3,64
81120a5c:	88c0030d 	sth	r3,12(r17)
81120a60:	00bfffc4 	movi	r2,-1
81120a64:	90000215 	stw	zero,8(r18)
81120a68:	90000115 	stw	zero,4(r18)
81120a6c:	00000206 	br	81120a78 <__ssprint_r+0x1a8>
81120a70:	90000115 	stw	zero,4(r18)
81120a74:	0005883a 	mov	r2,zero
81120a78:	dfc00917 	ldw	ra,36(sp)
81120a7c:	df000817 	ldw	fp,32(sp)
81120a80:	ddc00717 	ldw	r23,28(sp)
81120a84:	dd800617 	ldw	r22,24(sp)
81120a88:	dd400517 	ldw	r21,20(sp)
81120a8c:	dd000417 	ldw	r20,16(sp)
81120a90:	dcc00317 	ldw	r19,12(sp)
81120a94:	dc800217 	ldw	r18,8(sp)
81120a98:	dc400117 	ldw	r17,4(sp)
81120a9c:	dc000017 	ldw	r16,0(sp)
81120aa0:	dec00a04 	addi	sp,sp,40
81120aa4:	f800283a 	ret

81120aa8 <___svfiprintf_internal_r>:
81120aa8:	deffc804 	addi	sp,sp,-224
81120aac:	de00012e 	bgeu	sp,et,81120ab4 <___svfiprintf_internal_r+0xc>
81120ab0:	003b68fa 	trap	3
81120ab4:	2880030b 	ldhu	r2,12(r5)
81120ab8:	dcc03115 	stw	r19,196(sp)
81120abc:	dfc03715 	stw	ra,220(sp)
81120ac0:	df003615 	stw	fp,216(sp)
81120ac4:	ddc03515 	stw	r23,212(sp)
81120ac8:	dd803415 	stw	r22,208(sp)
81120acc:	dd403315 	stw	r21,204(sp)
81120ad0:	dd003215 	stw	r20,200(sp)
81120ad4:	dc803015 	stw	r18,192(sp)
81120ad8:	dc402f15 	stw	r17,188(sp)
81120adc:	dc002e15 	stw	r16,184(sp)
81120ae0:	d9402715 	stw	r5,156(sp)
81120ae4:	d9002a15 	stw	r4,168(sp)
81120ae8:	1080200c 	andi	r2,r2,128
81120aec:	d9c02315 	stw	r7,140(sp)
81120af0:	3027883a 	mov	r19,r6
81120af4:	10000226 	beq	r2,zero,81120b00 <___svfiprintf_internal_r+0x58>
81120af8:	28800417 	ldw	r2,16(r5)
81120afc:	10041d26 	beq	r2,zero,81121b74 <___svfiprintf_internal_r+0x10cc>
81120b00:	dac01a04 	addi	r11,sp,104
81120b04:	dac01e15 	stw	r11,120(sp)
81120b08:	d8801e17 	ldw	r2,120(sp)
81120b0c:	dac019c4 	addi	r11,sp,103
81120b10:	dd402a17 	ldw	r21,168(sp)
81120b14:	ddc02717 	ldw	r23,156(sp)
81120b18:	05a04534 	movhi	r22,33044
81120b1c:	05204534 	movhi	r20,33044
81120b20:	dac01f15 	stw	r11,124(sp)
81120b24:	12d7c83a 	sub	r11,r2,r11
81120b28:	b5800604 	addi	r22,r22,24
81120b2c:	a5000204 	addi	r20,r20,8
81120b30:	dec01a15 	stw	sp,104(sp)
81120b34:	d8001c15 	stw	zero,112(sp)
81120b38:	d8001b15 	stw	zero,108(sp)
81120b3c:	d811883a 	mov	r8,sp
81120b40:	d8002915 	stw	zero,164(sp)
81120b44:	d8002515 	stw	zero,148(sp)
81120b48:	dac02b15 	stw	r11,172(sp)
81120b4c:	98800007 	ldb	r2,0(r19)
81120b50:	1002dd26 	beq	r2,zero,811216c8 <___svfiprintf_internal_r+0xc20>
81120b54:	00c00944 	movi	r3,37
81120b58:	9823883a 	mov	r17,r19
81120b5c:	10c0021e 	bne	r2,r3,81120b68 <___svfiprintf_internal_r+0xc0>
81120b60:	00001406 	br	81120bb4 <___svfiprintf_internal_r+0x10c>
81120b64:	10c00326 	beq	r2,r3,81120b74 <___svfiprintf_internal_r+0xcc>
81120b68:	8c400044 	addi	r17,r17,1
81120b6c:	88800007 	ldb	r2,0(r17)
81120b70:	103ffc1e 	bne	r2,zero,81120b64 <__reset+0xfb100b64>
81120b74:	8ce1c83a 	sub	r16,r17,r19
81120b78:	80000e26 	beq	r16,zero,81120bb4 <___svfiprintf_internal_r+0x10c>
81120b7c:	d8c01c17 	ldw	r3,112(sp)
81120b80:	d8801b17 	ldw	r2,108(sp)
81120b84:	44c00015 	stw	r19,0(r8)
81120b88:	1c07883a 	add	r3,r3,r16
81120b8c:	10800044 	addi	r2,r2,1
81120b90:	d8c01c15 	stw	r3,112(sp)
81120b94:	44000115 	stw	r16,4(r8)
81120b98:	d8801b15 	stw	r2,108(sp)
81120b9c:	00c001c4 	movi	r3,7
81120ba0:	18831e16 	blt	r3,r2,8112181c <___svfiprintf_internal_r+0xd74>
81120ba4:	42000204 	addi	r8,r8,8
81120ba8:	dac02517 	ldw	r11,148(sp)
81120bac:	5c17883a 	add	r11,r11,r16
81120bb0:	dac02515 	stw	r11,148(sp)
81120bb4:	88800007 	ldb	r2,0(r17)
81120bb8:	1002c526 	beq	r2,zero,811216d0 <___svfiprintf_internal_r+0xc28>
81120bbc:	88c00047 	ldb	r3,1(r17)
81120bc0:	8cc00044 	addi	r19,r17,1
81120bc4:	d8001d85 	stb	zero,118(sp)
81120bc8:	0009883a 	mov	r4,zero
81120bcc:	000f883a 	mov	r7,zero
81120bd0:	043fffc4 	movi	r16,-1
81120bd4:	d8002415 	stw	zero,144(sp)
81120bd8:	0025883a 	mov	r18,zero
81120bdc:	01401604 	movi	r5,88
81120be0:	01800244 	movi	r6,9
81120be4:	02800a84 	movi	r10,42
81120be8:	02401b04 	movi	r9,108
81120bec:	9cc00044 	addi	r19,r19,1
81120bf0:	18bff804 	addi	r2,r3,-32
81120bf4:	2881dd36 	bltu	r5,r2,8112136c <___svfiprintf_internal_r+0x8c4>
81120bf8:	100490ba 	slli	r2,r2,2
81120bfc:	02e044b4 	movhi	r11,33042
81120c00:	5ac30404 	addi	r11,r11,3088
81120c04:	12c5883a 	add	r2,r2,r11
81120c08:	10800017 	ldw	r2,0(r2)
81120c0c:	1000683a 	jmp	r2
81120c10:	81120e0c 	andi	r4,r16,18488
81120c14:	8112136c 	andhi	r4,r16,18509
81120c18:	8112136c 	andhi	r4,r16,18509
81120c1c:	81120e00 	call	881120e0 <__reset+0x20f20e0>
81120c20:	8112136c 	andhi	r4,r16,18509
81120c24:	8112136c 	andhi	r4,r16,18509
81120c28:	8112136c 	andhi	r4,r16,18509
81120c2c:	8112136c 	andhi	r4,r16,18509
81120c30:	8112136c 	andhi	r4,r16,18509
81120c34:	8112136c 	andhi	r4,r16,18509
81120c38:	81120d74 	orhi	r4,r16,18485
81120c3c:	81120f50 	cmplti	r4,r16,18493
81120c40:	8112136c 	andhi	r4,r16,18509
81120c44:	81120da0 	cmpeqi	r4,r16,18486
81120c48:	811213a0 	cmpeqi	r4,r16,18510
81120c4c:	8112136c 	andhi	r4,r16,18509
81120c50:	81121394 	ori	r4,r16,18510
81120c54:	81121334 	orhi	r4,r16,18508
81120c58:	81121334 	orhi	r4,r16,18508
81120c5c:	81121334 	orhi	r4,r16,18508
81120c60:	81121334 	orhi	r4,r16,18508
81120c64:	81121334 	orhi	r4,r16,18508
81120c68:	81121334 	orhi	r4,r16,18508
81120c6c:	81121334 	orhi	r4,r16,18508
81120c70:	81121334 	orhi	r4,r16,18508
81120c74:	81121334 	orhi	r4,r16,18508
81120c78:	8112136c 	andhi	r4,r16,18509
81120c7c:	8112136c 	andhi	r4,r16,18509
81120c80:	8112136c 	andhi	r4,r16,18509
81120c84:	8112136c 	andhi	r4,r16,18509
81120c88:	8112136c 	andhi	r4,r16,18509
81120c8c:	8112136c 	andhi	r4,r16,18509
81120c90:	8112136c 	andhi	r4,r16,18509
81120c94:	8112136c 	andhi	r4,r16,18509
81120c98:	8112136c 	andhi	r4,r16,18509
81120c9c:	8112136c 	andhi	r4,r16,18509
81120ca0:	811212d0 	cmplti	r4,r16,18507
81120ca4:	8112136c 	andhi	r4,r16,18509
81120ca8:	8112136c 	andhi	r4,r16,18509
81120cac:	8112136c 	andhi	r4,r16,18509
81120cb0:	8112136c 	andhi	r4,r16,18509
81120cb4:	8112136c 	andhi	r4,r16,18509
81120cb8:	8112136c 	andhi	r4,r16,18509
81120cbc:	8112136c 	andhi	r4,r16,18509
81120cc0:	8112136c 	andhi	r4,r16,18509
81120cc4:	8112136c 	andhi	r4,r16,18509
81120cc8:	8112136c 	andhi	r4,r16,18509
81120ccc:	81121448 	cmpgei	r4,r16,18513
81120cd0:	8112136c 	andhi	r4,r16,18509
81120cd4:	8112136c 	andhi	r4,r16,18509
81120cd8:	8112136c 	andhi	r4,r16,18509
81120cdc:	8112136c 	andhi	r4,r16,18509
81120ce0:	8112136c 	andhi	r4,r16,18509
81120ce4:	811213e0 	cmpeqi	r4,r16,18511
81120ce8:	8112136c 	andhi	r4,r16,18509
81120cec:	8112136c 	andhi	r4,r16,18509
81120cf0:	81121114 	ori	r4,r16,18500
81120cf4:	8112136c 	andhi	r4,r16,18509
81120cf8:	8112136c 	andhi	r4,r16,18509
81120cfc:	8112136c 	andhi	r4,r16,18509
81120d00:	8112136c 	andhi	r4,r16,18509
81120d04:	8112136c 	andhi	r4,r16,18509
81120d08:	8112136c 	andhi	r4,r16,18509
81120d0c:	8112136c 	andhi	r4,r16,18509
81120d10:	8112136c 	andhi	r4,r16,18509
81120d14:	8112136c 	andhi	r4,r16,18509
81120d18:	8112136c 	andhi	r4,r16,18509
81120d1c:	81121004 	addi	r4,r16,18496
81120d20:	811211b0 	cmpltui	r4,r16,18502
81120d24:	8112136c 	andhi	r4,r16,18509
81120d28:	8112136c 	andhi	r4,r16,18509
81120d2c:	8112136c 	andhi	r4,r16,18509
81120d30:	811211a4 	muli	r4,r16,18502
81120d34:	811211b0 	cmpltui	r4,r16,18502
81120d38:	8112136c 	andhi	r4,r16,18509
81120d3c:	8112136c 	andhi	r4,r16,18509
81120d40:	81121194 	ori	r4,r16,18502
81120d44:	8112136c 	andhi	r4,r16,18509
81120d48:	81121158 	cmpnei	r4,r16,18501
81120d4c:	81120f60 	cmpeqi	r4,r16,18493
81120d50:	81120dac 	andhi	r4,r16,18486
81120d54:	811212c4 	addi	r4,r16,18507
81120d58:	8112136c 	andhi	r4,r16,18509
81120d5c:	81121278 	rdprs	r4,r16,18505
81120d60:	8112136c 	andhi	r4,r16,18509
81120d64:	81120ed0 	cmplti	r4,r16,18491
81120d68:	8112136c 	andhi	r4,r16,18509
81120d6c:	8112136c 	andhi	r4,r16,18509
81120d70:	81120e2c 	andhi	r4,r16,18488
81120d74:	dac02317 	ldw	r11,140(sp)
81120d78:	5ac00017 	ldw	r11,0(r11)
81120d7c:	dac02415 	stw	r11,144(sp)
81120d80:	dac02317 	ldw	r11,140(sp)
81120d84:	58800104 	addi	r2,r11,4
81120d88:	dac02417 	ldw	r11,144(sp)
81120d8c:	5802e90e 	bge	r11,zero,81121934 <___svfiprintf_internal_r+0xe8c>
81120d90:	dac02417 	ldw	r11,144(sp)
81120d94:	d8802315 	stw	r2,140(sp)
81120d98:	02d7c83a 	sub	r11,zero,r11
81120d9c:	dac02415 	stw	r11,144(sp)
81120da0:	94800114 	ori	r18,r18,4
81120da4:	98c00007 	ldb	r3,0(r19)
81120da8:	003f9006 	br	81120bec <__reset+0xfb100bec>
81120dac:	00800c04 	movi	r2,48
81120db0:	dac02317 	ldw	r11,140(sp)
81120db4:	d8801d05 	stb	r2,116(sp)
81120db8:	00801e04 	movi	r2,120
81120dbc:	d8801d45 	stb	r2,117(sp)
81120dc0:	d8001d85 	stb	zero,118(sp)
81120dc4:	58c00104 	addi	r3,r11,4
81120dc8:	5f000017 	ldw	fp,0(r11)
81120dcc:	0013883a 	mov	r9,zero
81120dd0:	90800094 	ori	r2,r18,2
81120dd4:	80032b16 	blt	r16,zero,81121a84 <___svfiprintf_internal_r+0xfdc>
81120dd8:	00bfdfc4 	movi	r2,-129
81120ddc:	90a4703a 	and	r18,r18,r2
81120de0:	d8c02315 	stw	r3,140(sp)
81120de4:	94800094 	ori	r18,r18,2
81120de8:	e002dc26 	beq	fp,zero,8112195c <___svfiprintf_internal_r+0xeb4>
81120dec:	01204534 	movhi	r4,33044
81120df0:	213f7804 	addi	r4,r4,-544
81120df4:	0015883a 	mov	r10,zero
81120df8:	d9002915 	stw	r4,164(sp)
81120dfc:	00002306 	br	81120e8c <___svfiprintf_internal_r+0x3e4>
81120e00:	94800054 	ori	r18,r18,1
81120e04:	98c00007 	ldb	r3,0(r19)
81120e08:	003f7806 	br	81120bec <__reset+0xfb100bec>
81120e0c:	38803fcc 	andi	r2,r7,255
81120e10:	1080201c 	xori	r2,r2,128
81120e14:	10bfe004 	addi	r2,r2,-128
81120e18:	1002f31e 	bne	r2,zero,811219e8 <___svfiprintf_internal_r+0xf40>
81120e1c:	01000044 	movi	r4,1
81120e20:	01c00804 	movi	r7,32
81120e24:	98c00007 	ldb	r3,0(r19)
81120e28:	003f7006 	br	81120bec <__reset+0xfb100bec>
81120e2c:	21003fcc 	andi	r4,r4,255
81120e30:	2003aa1e 	bne	r4,zero,81121cdc <___svfiprintf_internal_r+0x1234>
81120e34:	00a04534 	movhi	r2,33044
81120e38:	10bf7804 	addi	r2,r2,-544
81120e3c:	d8802915 	stw	r2,164(sp)
81120e40:	9080080c 	andi	r2,r18,32
81120e44:	1000ba26 	beq	r2,zero,81121130 <___svfiprintf_internal_r+0x688>
81120e48:	dac02317 	ldw	r11,140(sp)
81120e4c:	5f000017 	ldw	fp,0(r11)
81120e50:	5a400117 	ldw	r9,4(r11)
81120e54:	5ac00204 	addi	r11,r11,8
81120e58:	dac02315 	stw	r11,140(sp)
81120e5c:	9080004c 	andi	r2,r18,1
81120e60:	10029026 	beq	r2,zero,811218a4 <___svfiprintf_internal_r+0xdfc>
81120e64:	e244b03a 	or	r2,fp,r9
81120e68:	1002d41e 	bne	r2,zero,811219bc <___svfiprintf_internal_r+0xf14>
81120e6c:	d8001d85 	stb	zero,118(sp)
81120e70:	80030b16 	blt	r16,zero,81121aa0 <___svfiprintf_internal_r+0xff8>
81120e74:	00bfdfc4 	movi	r2,-129
81120e78:	90a4703a 	and	r18,r18,r2
81120e7c:	0015883a 	mov	r10,zero
81120e80:	80002426 	beq	r16,zero,81120f14 <___svfiprintf_internal_r+0x46c>
81120e84:	0039883a 	mov	fp,zero
81120e88:	0013883a 	mov	r9,zero
81120e8c:	d9002917 	ldw	r4,164(sp)
81120e90:	dc401a04 	addi	r17,sp,104
81120e94:	e08003cc 	andi	r2,fp,15
81120e98:	4806973a 	slli	r3,r9,28
81120e9c:	2085883a 	add	r2,r4,r2
81120ea0:	e038d13a 	srli	fp,fp,4
81120ea4:	10800003 	ldbu	r2,0(r2)
81120ea8:	4812d13a 	srli	r9,r9,4
81120eac:	8c7fffc4 	addi	r17,r17,-1
81120eb0:	1f38b03a 	or	fp,r3,fp
81120eb4:	88800005 	stb	r2,0(r17)
81120eb8:	e244b03a 	or	r2,fp,r9
81120ebc:	103ff51e 	bne	r2,zero,81120e94 <__reset+0xfb100e94>
81120ec0:	dac01e17 	ldw	r11,120(sp)
81120ec4:	5c57c83a 	sub	r11,r11,r17
81120ec8:	dac02115 	stw	r11,132(sp)
81120ecc:	00001406 	br	81120f20 <___svfiprintf_internal_r+0x478>
81120ed0:	21003fcc 	andi	r4,r4,255
81120ed4:	2003741e 	bne	r4,zero,81121ca8 <___svfiprintf_internal_r+0x1200>
81120ed8:	9080080c 	andi	r2,r18,32
81120edc:	10014526 	beq	r2,zero,811213f4 <___svfiprintf_internal_r+0x94c>
81120ee0:	dac02317 	ldw	r11,140(sp)
81120ee4:	d8001d85 	stb	zero,118(sp)
81120ee8:	58c00204 	addi	r3,r11,8
81120eec:	5f000017 	ldw	fp,0(r11)
81120ef0:	5a400117 	ldw	r9,4(r11)
81120ef4:	8002d916 	blt	r16,zero,81121a5c <___svfiprintf_internal_r+0xfb4>
81120ef8:	013fdfc4 	movi	r4,-129
81120efc:	e244b03a 	or	r2,fp,r9
81120f00:	d8c02315 	stw	r3,140(sp)
81120f04:	9124703a 	and	r18,r18,r4
81120f08:	0015883a 	mov	r10,zero
81120f0c:	1000b91e 	bne	r2,zero,811211f4 <___svfiprintf_internal_r+0x74c>
81120f10:	8002e61e 	bne	r16,zero,81121aac <___svfiprintf_internal_r+0x1004>
81120f14:	0021883a 	mov	r16,zero
81120f18:	d8002115 	stw	zero,132(sp)
81120f1c:	dc401a04 	addi	r17,sp,104
81120f20:	d8c02117 	ldw	r3,132(sp)
81120f24:	dc002015 	stw	r16,128(sp)
81120f28:	80c0010e 	bge	r16,r3,81120f30 <___svfiprintf_internal_r+0x488>
81120f2c:	d8c02015 	stw	r3,128(sp)
81120f30:	52803fcc 	andi	r10,r10,255
81120f34:	5280201c 	xori	r10,r10,128
81120f38:	52bfe004 	addi	r10,r10,-128
81120f3c:	50003c26 	beq	r10,zero,81121030 <___svfiprintf_internal_r+0x588>
81120f40:	dac02017 	ldw	r11,128(sp)
81120f44:	5ac00044 	addi	r11,r11,1
81120f48:	dac02015 	stw	r11,128(sp)
81120f4c:	00003806 	br	81121030 <___svfiprintf_internal_r+0x588>
81120f50:	01000044 	movi	r4,1
81120f54:	01c00ac4 	movi	r7,43
81120f58:	98c00007 	ldb	r3,0(r19)
81120f5c:	003f2306 	br	81120bec <__reset+0xfb100bec>
81120f60:	21003fcc 	andi	r4,r4,255
81120f64:	2003481e 	bne	r4,zero,81121c88 <___svfiprintf_internal_r+0x11e0>
81120f68:	9080080c 	andi	r2,r18,32
81120f6c:	10013b26 	beq	r2,zero,8112145c <___svfiprintf_internal_r+0x9b4>
81120f70:	dac02317 	ldw	r11,140(sp)
81120f74:	d8001d85 	stb	zero,118(sp)
81120f78:	58800204 	addi	r2,r11,8
81120f7c:	5f000017 	ldw	fp,0(r11)
81120f80:	5a400117 	ldw	r9,4(r11)
81120f84:	8002a816 	blt	r16,zero,81121a28 <___svfiprintf_internal_r+0xf80>
81120f88:	013fdfc4 	movi	r4,-129
81120f8c:	e246b03a 	or	r3,fp,r9
81120f90:	d8802315 	stw	r2,140(sp)
81120f94:	9124703a 	and	r18,r18,r4
81120f98:	18013c26 	beq	r3,zero,8112148c <___svfiprintf_internal_r+0x9e4>
81120f9c:	0015883a 	mov	r10,zero
81120fa0:	dc401a04 	addi	r17,sp,104
81120fa4:	e006d0fa 	srli	r3,fp,3
81120fa8:	4808977a 	slli	r4,r9,29
81120fac:	4812d0fa 	srli	r9,r9,3
81120fb0:	e70001cc 	andi	fp,fp,7
81120fb4:	e0800c04 	addi	r2,fp,48
81120fb8:	8c7fffc4 	addi	r17,r17,-1
81120fbc:	20f8b03a 	or	fp,r4,r3
81120fc0:	88800005 	stb	r2,0(r17)
81120fc4:	e246b03a 	or	r3,fp,r9
81120fc8:	183ff61e 	bne	r3,zero,81120fa4 <__reset+0xfb100fa4>
81120fcc:	90c0004c 	andi	r3,r18,1
81120fd0:	1800a526 	beq	r3,zero,81121268 <___svfiprintf_internal_r+0x7c0>
81120fd4:	10803fcc 	andi	r2,r2,255
81120fd8:	1080201c 	xori	r2,r2,128
81120fdc:	10bfe004 	addi	r2,r2,-128
81120fe0:	00c00c04 	movi	r3,48
81120fe4:	10ffb626 	beq	r2,r3,81120ec0 <__reset+0xfb100ec0>
81120fe8:	88ffffc5 	stb	r3,-1(r17)
81120fec:	d8c01e17 	ldw	r3,120(sp)
81120ff0:	88bfffc4 	addi	r2,r17,-1
81120ff4:	1023883a 	mov	r17,r2
81120ff8:	1887c83a 	sub	r3,r3,r2
81120ffc:	d8c02115 	stw	r3,132(sp)
81121000:	003fc706 	br	81120f20 <__reset+0xfb100f20>
81121004:	dac02317 	ldw	r11,140(sp)
81121008:	00c00044 	movi	r3,1
8112100c:	d8c02015 	stw	r3,128(sp)
81121010:	58800017 	ldw	r2,0(r11)
81121014:	5ac00104 	addi	r11,r11,4
81121018:	d8001d85 	stb	zero,118(sp)
8112101c:	d8801005 	stb	r2,64(sp)
81121020:	dac02315 	stw	r11,140(sp)
81121024:	d8c02115 	stw	r3,132(sp)
81121028:	dc401004 	addi	r17,sp,64
8112102c:	0021883a 	mov	r16,zero
81121030:	90c0008c 	andi	r3,r18,2
81121034:	d8c02215 	stw	r3,136(sp)
81121038:	18000326 	beq	r3,zero,81121048 <___svfiprintf_internal_r+0x5a0>
8112103c:	dac02017 	ldw	r11,128(sp)
81121040:	5ac00084 	addi	r11,r11,2
81121044:	dac02015 	stw	r11,128(sp)
81121048:	90c0210c 	andi	r3,r18,132
8112104c:	d8c02615 	stw	r3,152(sp)
81121050:	1801131e 	bne	r3,zero,811214a0 <___svfiprintf_internal_r+0x9f8>
81121054:	dac02417 	ldw	r11,144(sp)
81121058:	d8c02017 	ldw	r3,128(sp)
8112105c:	58f9c83a 	sub	fp,r11,r3
81121060:	07010f0e 	bge	zero,fp,811214a0 <___svfiprintf_internal_r+0x9f8>
81121064:	02400404 	movi	r9,16
81121068:	d8c01c17 	ldw	r3,112(sp)
8112106c:	d8801b17 	ldw	r2,108(sp)
81121070:	4f02d60e 	bge	r9,fp,81121bcc <___svfiprintf_internal_r+0x1124>
81121074:	01604534 	movhi	r5,33044
81121078:	29400604 	addi	r5,r5,24
8112107c:	d9402815 	stw	r5,160(sp)
81121080:	028001c4 	movi	r10,7
81121084:	00000306 	br	81121094 <___svfiprintf_internal_r+0x5ec>
81121088:	e73ffc04 	addi	fp,fp,-16
8112108c:	42000204 	addi	r8,r8,8
81121090:	4f00150e 	bge	r9,fp,811210e8 <___svfiprintf_internal_r+0x640>
81121094:	18c00404 	addi	r3,r3,16
81121098:	10800044 	addi	r2,r2,1
8112109c:	45800015 	stw	r22,0(r8)
811210a0:	42400115 	stw	r9,4(r8)
811210a4:	d8c01c15 	stw	r3,112(sp)
811210a8:	d8801b15 	stw	r2,108(sp)
811210ac:	50bff60e 	bge	r10,r2,81121088 <__reset+0xfb101088>
811210b0:	d9801a04 	addi	r6,sp,104
811210b4:	b80b883a 	mov	r5,r23
811210b8:	a809883a 	mov	r4,r21
811210bc:	da402c15 	stw	r9,176(sp)
811210c0:	da802d15 	stw	r10,180(sp)
811210c4:	11208d00 	call	811208d0 <__ssprint_r>
811210c8:	da402c17 	ldw	r9,176(sp)
811210cc:	da802d17 	ldw	r10,180(sp)
811210d0:	1001851e 	bne	r2,zero,811216e8 <___svfiprintf_internal_r+0xc40>
811210d4:	e73ffc04 	addi	fp,fp,-16
811210d8:	d8c01c17 	ldw	r3,112(sp)
811210dc:	d8801b17 	ldw	r2,108(sp)
811210e0:	d811883a 	mov	r8,sp
811210e4:	4f3feb16 	blt	r9,fp,81121094 <__reset+0xfb101094>
811210e8:	dac02817 	ldw	r11,160(sp)
811210ec:	e0c7883a 	add	r3,fp,r3
811210f0:	10800044 	addi	r2,r2,1
811210f4:	42c00015 	stw	r11,0(r8)
811210f8:	47000115 	stw	fp,4(r8)
811210fc:	d8c01c15 	stw	r3,112(sp)
81121100:	d8801b15 	stw	r2,108(sp)
81121104:	010001c4 	movi	r4,7
81121108:	2081ee16 	blt	r4,r2,811218c4 <___svfiprintf_internal_r+0xe1c>
8112110c:	42000204 	addi	r8,r8,8
81121110:	0000e506 	br	811214a8 <___svfiprintf_internal_r+0xa00>
81121114:	21003fcc 	andi	r4,r4,255
81121118:	2002dd1e 	bne	r4,zero,81121c90 <___svfiprintf_internal_r+0x11e8>
8112111c:	00a04534 	movhi	r2,33044
81121120:	10bf7304 	addi	r2,r2,-564
81121124:	d8802915 	stw	r2,164(sp)
81121128:	9080080c 	andi	r2,r18,32
8112112c:	103f461e 	bne	r2,zero,81120e48 <__reset+0xfb100e48>
81121130:	9080040c 	andi	r2,r18,16
81121134:	10022e1e 	bne	r2,zero,811219f0 <___svfiprintf_internal_r+0xf48>
81121138:	9080100c 	andi	r2,r18,64
8112113c:	dac02317 	ldw	r11,140(sp)
81121140:	10027326 	beq	r2,zero,81121b10 <___svfiprintf_internal_r+0x1068>
81121144:	5f00000b 	ldhu	fp,0(r11)
81121148:	5ac00104 	addi	r11,r11,4
8112114c:	0013883a 	mov	r9,zero
81121150:	dac02315 	stw	r11,140(sp)
81121154:	003f4106 	br	81120e5c <__reset+0xfb100e5c>
81121158:	21003fcc 	andi	r4,r4,255
8112115c:	2002e11e 	bne	r4,zero,81121ce4 <___svfiprintf_internal_r+0x123c>
81121160:	9080080c 	andi	r2,r18,32
81121164:	1002011e 	bne	r2,zero,8112196c <___svfiprintf_internal_r+0xec4>
81121168:	9080040c 	andi	r2,r18,16
8112116c:	10023e1e 	bne	r2,zero,81121a68 <___svfiprintf_internal_r+0xfc0>
81121170:	9480100c 	andi	r18,r18,64
81121174:	90023c26 	beq	r18,zero,81121a68 <___svfiprintf_internal_r+0xfc0>
81121178:	dac02317 	ldw	r11,140(sp)
8112117c:	58800017 	ldw	r2,0(r11)
81121180:	5ac00104 	addi	r11,r11,4
81121184:	dac02315 	stw	r11,140(sp)
81121188:	dac02517 	ldw	r11,148(sp)
8112118c:	12c0000d 	sth	r11,0(r2)
81121190:	003e6e06 	br	81120b4c <__reset+0xfb100b4c>
81121194:	98c00007 	ldb	r3,0(r19)
81121198:	1a422926 	beq	r3,r9,81121a40 <___svfiprintf_internal_r+0xf98>
8112119c:	94800414 	ori	r18,r18,16
811211a0:	003e9206 	br	81120bec <__reset+0xfb100bec>
811211a4:	94801014 	ori	r18,r18,64
811211a8:	98c00007 	ldb	r3,0(r19)
811211ac:	003e8f06 	br	81120bec <__reset+0xfb100bec>
811211b0:	21003fcc 	andi	r4,r4,255
811211b4:	2002c71e 	bne	r4,zero,81121cd4 <___svfiprintf_internal_r+0x122c>
811211b8:	9080080c 	andi	r2,r18,32
811211bc:	10004926 	beq	r2,zero,811212e4 <___svfiprintf_internal_r+0x83c>
811211c0:	dac02317 	ldw	r11,140(sp)
811211c4:	58800117 	ldw	r2,4(r11)
811211c8:	5f000017 	ldw	fp,0(r11)
811211cc:	5ac00204 	addi	r11,r11,8
811211d0:	dac02315 	stw	r11,140(sp)
811211d4:	1013883a 	mov	r9,r2
811211d8:	10004b16 	blt	r2,zero,81121308 <___svfiprintf_internal_r+0x860>
811211dc:	da801d83 	ldbu	r10,118(sp)
811211e0:	8001cb16 	blt	r16,zero,81121910 <___svfiprintf_internal_r+0xe68>
811211e4:	00ffdfc4 	movi	r3,-129
811211e8:	e244b03a 	or	r2,fp,r9
811211ec:	90e4703a 	and	r18,r18,r3
811211f0:	103f4726 	beq	r2,zero,81120f10 <__reset+0xfb100f10>
811211f4:	48008c26 	beq	r9,zero,81121428 <___svfiprintf_internal_r+0x980>
811211f8:	dc802015 	stw	r18,128(sp)
811211fc:	dc002115 	stw	r16,132(sp)
81121200:	dc401a04 	addi	r17,sp,104
81121204:	e021883a 	mov	r16,fp
81121208:	da002215 	stw	r8,136(sp)
8112120c:	5039883a 	mov	fp,r10
81121210:	4825883a 	mov	r18,r9
81121214:	8009883a 	mov	r4,r16
81121218:	900b883a 	mov	r5,r18
8112121c:	01800284 	movi	r6,10
81121220:	000f883a 	mov	r7,zero
81121224:	1124e340 	call	81124e34 <__umoddi3>
81121228:	10800c04 	addi	r2,r2,48
8112122c:	8c7fffc4 	addi	r17,r17,-1
81121230:	8009883a 	mov	r4,r16
81121234:	900b883a 	mov	r5,r18
81121238:	88800005 	stb	r2,0(r17)
8112123c:	01800284 	movi	r6,10
81121240:	000f883a 	mov	r7,zero
81121244:	11248b40 	call	811248b4 <__udivdi3>
81121248:	1021883a 	mov	r16,r2
8112124c:	10c4b03a 	or	r2,r2,r3
81121250:	1825883a 	mov	r18,r3
81121254:	103fef1e 	bne	r2,zero,81121214 <__reset+0xfb101214>
81121258:	dc802017 	ldw	r18,128(sp)
8112125c:	dc002117 	ldw	r16,132(sp)
81121260:	da002217 	ldw	r8,136(sp)
81121264:	e015883a 	mov	r10,fp
81121268:	d8c01e17 	ldw	r3,120(sp)
8112126c:	1c47c83a 	sub	r3,r3,r17
81121270:	d8c02115 	stw	r3,132(sp)
81121274:	003f2a06 	br	81120f20 <__reset+0xfb100f20>
81121278:	dac02317 	ldw	r11,140(sp)
8112127c:	d8001d85 	stb	zero,118(sp)
81121280:	5c400017 	ldw	r17,0(r11)
81121284:	5f000104 	addi	fp,r11,4
81121288:	88022f26 	beq	r17,zero,81121b48 <___svfiprintf_internal_r+0x10a0>
8112128c:	80022516 	blt	r16,zero,81121b24 <___svfiprintf_internal_r+0x107c>
81121290:	800d883a 	mov	r6,r16
81121294:	000b883a 	mov	r5,zero
81121298:	8809883a 	mov	r4,r17
8112129c:	da002c15 	stw	r8,176(sp)
811212a0:	111ce740 	call	8111ce74 <memchr>
811212a4:	da002c17 	ldw	r8,176(sp)
811212a8:	10026426 	beq	r2,zero,81121c3c <___svfiprintf_internal_r+0x1194>
811212ac:	1445c83a 	sub	r2,r2,r17
811212b0:	d8802115 	stw	r2,132(sp)
811212b4:	da801d83 	ldbu	r10,118(sp)
811212b8:	df002315 	stw	fp,140(sp)
811212bc:	0021883a 	mov	r16,zero
811212c0:	003f1706 	br	81120f20 <__reset+0xfb100f20>
811212c4:	94800814 	ori	r18,r18,32
811212c8:	98c00007 	ldb	r3,0(r19)
811212cc:	003e4706 	br	81120bec <__reset+0xfb100bec>
811212d0:	21003fcc 	andi	r4,r4,255
811212d4:	2002701e 	bne	r4,zero,81121c98 <___svfiprintf_internal_r+0x11f0>
811212d8:	94800414 	ori	r18,r18,16
811212dc:	9080080c 	andi	r2,r18,32
811212e0:	103fb71e 	bne	r2,zero,811211c0 <__reset+0xfb1011c0>
811212e4:	9080040c 	andi	r2,r18,16
811212e8:	1001ab26 	beq	r2,zero,81121998 <___svfiprintf_internal_r+0xef0>
811212ec:	dac02317 	ldw	r11,140(sp)
811212f0:	5f000017 	ldw	fp,0(r11)
811212f4:	5ac00104 	addi	r11,r11,4
811212f8:	dac02315 	stw	r11,140(sp)
811212fc:	e013d7fa 	srai	r9,fp,31
81121300:	4805883a 	mov	r2,r9
81121304:	103fb50e 	bge	r2,zero,811211dc <__reset+0xfb1011dc>
81121308:	0739c83a 	sub	fp,zero,fp
8112130c:	02800b44 	movi	r10,45
81121310:	e004c03a 	cmpne	r2,fp,zero
81121314:	0253c83a 	sub	r9,zero,r9
81121318:	da801d85 	stb	r10,118(sp)
8112131c:	4893c83a 	sub	r9,r9,r2
81121320:	80023016 	blt	r16,zero,81121be4 <___svfiprintf_internal_r+0x113c>
81121324:	00bfdfc4 	movi	r2,-129
81121328:	90a4703a 	and	r18,r18,r2
8112132c:	483fb21e 	bne	r9,zero,811211f8 <__reset+0xfb1011f8>
81121330:	00003d06 	br	81121428 <___svfiprintf_internal_r+0x980>
81121334:	9817883a 	mov	r11,r19
81121338:	d8002415 	stw	zero,144(sp)
8112133c:	18bff404 	addi	r2,r3,-48
81121340:	0019883a 	mov	r12,zero
81121344:	58c00007 	ldb	r3,0(r11)
81121348:	630002a4 	muli	r12,r12,10
8112134c:	9cc00044 	addi	r19,r19,1
81121350:	9817883a 	mov	r11,r19
81121354:	1319883a 	add	r12,r2,r12
81121358:	18bff404 	addi	r2,r3,-48
8112135c:	30bff92e 	bgeu	r6,r2,81121344 <__reset+0xfb101344>
81121360:	db002415 	stw	r12,144(sp)
81121364:	18bff804 	addi	r2,r3,-32
81121368:	28be232e 	bgeu	r5,r2,81120bf8 <__reset+0xfb100bf8>
8112136c:	21003fcc 	andi	r4,r4,255
81121370:	20024b1e 	bne	r4,zero,81121ca0 <___svfiprintf_internal_r+0x11f8>
81121374:	1800d626 	beq	r3,zero,811216d0 <___svfiprintf_internal_r+0xc28>
81121378:	02c00044 	movi	r11,1
8112137c:	dac02015 	stw	r11,128(sp)
81121380:	d8c01005 	stb	r3,64(sp)
81121384:	d8001d85 	stb	zero,118(sp)
81121388:	dac02115 	stw	r11,132(sp)
8112138c:	dc401004 	addi	r17,sp,64
81121390:	003f2606 	br	8112102c <__reset+0xfb10102c>
81121394:	94802014 	ori	r18,r18,128
81121398:	98c00007 	ldb	r3,0(r19)
8112139c:	003e1306 	br	81120bec <__reset+0xfb100bec>
811213a0:	98c00007 	ldb	r3,0(r19)
811213a4:	9ac00044 	addi	r11,r19,1
811213a8:	1a822b26 	beq	r3,r10,81121c58 <___svfiprintf_internal_r+0x11b0>
811213ac:	18bff404 	addi	r2,r3,-48
811213b0:	0021883a 	mov	r16,zero
811213b4:	30821e36 	bltu	r6,r2,81121c30 <___svfiprintf_internal_r+0x1188>
811213b8:	58c00007 	ldb	r3,0(r11)
811213bc:	840002a4 	muli	r16,r16,10
811213c0:	5cc00044 	addi	r19,r11,1
811213c4:	9817883a 	mov	r11,r19
811213c8:	80a1883a 	add	r16,r16,r2
811213cc:	18bff404 	addi	r2,r3,-48
811213d0:	30bff92e 	bgeu	r6,r2,811213b8 <__reset+0xfb1013b8>
811213d4:	803e060e 	bge	r16,zero,81120bf0 <__reset+0xfb100bf0>
811213d8:	043fffc4 	movi	r16,-1
811213dc:	003e0406 	br	81120bf0 <__reset+0xfb100bf0>
811213e0:	21003fcc 	andi	r4,r4,255
811213e4:	2002371e 	bne	r4,zero,81121cc4 <___svfiprintf_internal_r+0x121c>
811213e8:	94800414 	ori	r18,r18,16
811213ec:	9080080c 	andi	r2,r18,32
811213f0:	103ebb1e 	bne	r2,zero,81120ee0 <__reset+0xfb100ee0>
811213f4:	9080040c 	andi	r2,r18,16
811213f8:	10013b26 	beq	r2,zero,811218e8 <___svfiprintf_internal_r+0xe40>
811213fc:	dac02317 	ldw	r11,140(sp)
81121400:	d8001d85 	stb	zero,118(sp)
81121404:	0013883a 	mov	r9,zero
81121408:	58800104 	addi	r2,r11,4
8112140c:	5f000017 	ldw	fp,0(r11)
81121410:	80013d16 	blt	r16,zero,81121908 <___svfiprintf_internal_r+0xe60>
81121414:	00ffdfc4 	movi	r3,-129
81121418:	d8802315 	stw	r2,140(sp)
8112141c:	90e4703a 	and	r18,r18,r3
81121420:	0015883a 	mov	r10,zero
81121424:	e03eba26 	beq	fp,zero,81120f10 <__reset+0xfb100f10>
81121428:	00800244 	movi	r2,9
8112142c:	173f7236 	bltu	r2,fp,811211f8 <__reset+0xfb1011f8>
81121430:	dac02b17 	ldw	r11,172(sp)
81121434:	e7000c04 	addi	fp,fp,48
81121438:	df0019c5 	stb	fp,103(sp)
8112143c:	dac02115 	stw	r11,132(sp)
81121440:	dc4019c4 	addi	r17,sp,103
81121444:	003eb606 	br	81120f20 <__reset+0xfb100f20>
81121448:	21003fcc 	andi	r4,r4,255
8112144c:	20021f1e 	bne	r4,zero,81121ccc <___svfiprintf_internal_r+0x1224>
81121450:	94800414 	ori	r18,r18,16
81121454:	9080080c 	andi	r2,r18,32
81121458:	103ec51e 	bne	r2,zero,81120f70 <__reset+0xfb100f70>
8112145c:	9080040c 	andi	r2,r18,16
81121460:	10016926 	beq	r2,zero,81121a08 <___svfiprintf_internal_r+0xf60>
81121464:	dac02317 	ldw	r11,140(sp)
81121468:	d8001d85 	stb	zero,118(sp)
8112146c:	0013883a 	mov	r9,zero
81121470:	58800104 	addi	r2,r11,4
81121474:	5f000017 	ldw	fp,0(r11)
81121478:	80016b16 	blt	r16,zero,81121a28 <___svfiprintf_internal_r+0xf80>
8112147c:	00ffdfc4 	movi	r3,-129
81121480:	d8802315 	stw	r2,140(sp)
81121484:	90e4703a 	and	r18,r18,r3
81121488:	e03ec41e 	bne	fp,zero,81120f9c <__reset+0xfb100f9c>
8112148c:	0015883a 	mov	r10,zero
81121490:	8001c226 	beq	r16,zero,81121b9c <___svfiprintf_internal_r+0x10f4>
81121494:	0039883a 	mov	fp,zero
81121498:	0013883a 	mov	r9,zero
8112149c:	003ec006 	br	81120fa0 <__reset+0xfb100fa0>
811214a0:	d8c01c17 	ldw	r3,112(sp)
811214a4:	d8801b17 	ldw	r2,108(sp)
811214a8:	d9001d87 	ldb	r4,118(sp)
811214ac:	20000b26 	beq	r4,zero,811214dc <___svfiprintf_internal_r+0xa34>
811214b0:	d9001d84 	addi	r4,sp,118
811214b4:	18c00044 	addi	r3,r3,1
811214b8:	10800044 	addi	r2,r2,1
811214bc:	41000015 	stw	r4,0(r8)
811214c0:	01000044 	movi	r4,1
811214c4:	41000115 	stw	r4,4(r8)
811214c8:	d8c01c15 	stw	r3,112(sp)
811214cc:	d8801b15 	stw	r2,108(sp)
811214d0:	010001c4 	movi	r4,7
811214d4:	2080e116 	blt	r4,r2,8112185c <___svfiprintf_internal_r+0xdb4>
811214d8:	42000204 	addi	r8,r8,8
811214dc:	dac02217 	ldw	r11,136(sp)
811214e0:	58000b26 	beq	r11,zero,81121510 <___svfiprintf_internal_r+0xa68>
811214e4:	d9001d04 	addi	r4,sp,116
811214e8:	18c00084 	addi	r3,r3,2
811214ec:	10800044 	addi	r2,r2,1
811214f0:	41000015 	stw	r4,0(r8)
811214f4:	01000084 	movi	r4,2
811214f8:	41000115 	stw	r4,4(r8)
811214fc:	d8c01c15 	stw	r3,112(sp)
81121500:	d8801b15 	stw	r2,108(sp)
81121504:	010001c4 	movi	r4,7
81121508:	2080dd16 	blt	r4,r2,81121880 <___svfiprintf_internal_r+0xdd8>
8112150c:	42000204 	addi	r8,r8,8
81121510:	dac02617 	ldw	r11,152(sp)
81121514:	01002004 	movi	r4,128
81121518:	59008426 	beq	r11,r4,8112172c <___svfiprintf_internal_r+0xc84>
8112151c:	dac02117 	ldw	r11,132(sp)
81121520:	82e1c83a 	sub	r16,r16,r11
81121524:	0400270e 	bge	zero,r16,811215c4 <___svfiprintf_internal_r+0xb1c>
81121528:	01c00404 	movi	r7,16
8112152c:	3c016a0e 	bge	r7,r16,81121ad8 <___svfiprintf_internal_r+0x1030>
81121530:	01604534 	movhi	r5,33044
81121534:	29400204 	addi	r5,r5,8
81121538:	d9402215 	stw	r5,136(sp)
8112153c:	070001c4 	movi	fp,7
81121540:	00000306 	br	81121550 <___svfiprintf_internal_r+0xaa8>
81121544:	843ffc04 	addi	r16,r16,-16
81121548:	42000204 	addi	r8,r8,8
8112154c:	3c00130e 	bge	r7,r16,8112159c <___svfiprintf_internal_r+0xaf4>
81121550:	18c00404 	addi	r3,r3,16
81121554:	10800044 	addi	r2,r2,1
81121558:	45000015 	stw	r20,0(r8)
8112155c:	41c00115 	stw	r7,4(r8)
81121560:	d8c01c15 	stw	r3,112(sp)
81121564:	d8801b15 	stw	r2,108(sp)
81121568:	e0bff60e 	bge	fp,r2,81121544 <__reset+0xfb101544>
8112156c:	d9801a04 	addi	r6,sp,104
81121570:	b80b883a 	mov	r5,r23
81121574:	a809883a 	mov	r4,r21
81121578:	d9c02c15 	stw	r7,176(sp)
8112157c:	11208d00 	call	811208d0 <__ssprint_r>
81121580:	d9c02c17 	ldw	r7,176(sp)
81121584:	1000581e 	bne	r2,zero,811216e8 <___svfiprintf_internal_r+0xc40>
81121588:	843ffc04 	addi	r16,r16,-16
8112158c:	d8c01c17 	ldw	r3,112(sp)
81121590:	d8801b17 	ldw	r2,108(sp)
81121594:	d811883a 	mov	r8,sp
81121598:	3c3fed16 	blt	r7,r16,81121550 <__reset+0xfb101550>
8112159c:	dac02217 	ldw	r11,136(sp)
811215a0:	1c07883a 	add	r3,r3,r16
811215a4:	10800044 	addi	r2,r2,1
811215a8:	42c00015 	stw	r11,0(r8)
811215ac:	44000115 	stw	r16,4(r8)
811215b0:	d8c01c15 	stw	r3,112(sp)
811215b4:	d8801b15 	stw	r2,108(sp)
811215b8:	010001c4 	movi	r4,7
811215bc:	20809e16 	blt	r4,r2,81121838 <___svfiprintf_internal_r+0xd90>
811215c0:	42000204 	addi	r8,r8,8
811215c4:	dac02117 	ldw	r11,132(sp)
811215c8:	10800044 	addi	r2,r2,1
811215cc:	44400015 	stw	r17,0(r8)
811215d0:	58c7883a 	add	r3,r11,r3
811215d4:	42c00115 	stw	r11,4(r8)
811215d8:	d8c01c15 	stw	r3,112(sp)
811215dc:	d8801b15 	stw	r2,108(sp)
811215e0:	010001c4 	movi	r4,7
811215e4:	20807f16 	blt	r4,r2,811217e4 <___svfiprintf_internal_r+0xd3c>
811215e8:	42000204 	addi	r8,r8,8
811215ec:	9480010c 	andi	r18,r18,4
811215f0:	90002926 	beq	r18,zero,81121698 <___svfiprintf_internal_r+0xbf0>
811215f4:	dac02417 	ldw	r11,144(sp)
811215f8:	d8802017 	ldw	r2,128(sp)
811215fc:	58a1c83a 	sub	r16,r11,r2
81121600:	0400250e 	bge	zero,r16,81121698 <___svfiprintf_internal_r+0xbf0>
81121604:	04400404 	movi	r17,16
81121608:	d8801b17 	ldw	r2,108(sp)
8112160c:	8c017c0e 	bge	r17,r16,81121c00 <___svfiprintf_internal_r+0x1158>
81121610:	01604534 	movhi	r5,33044
81121614:	29400604 	addi	r5,r5,24
81121618:	d9402815 	stw	r5,160(sp)
8112161c:	048001c4 	movi	r18,7
81121620:	00000306 	br	81121630 <___svfiprintf_internal_r+0xb88>
81121624:	843ffc04 	addi	r16,r16,-16
81121628:	42000204 	addi	r8,r8,8
8112162c:	8c00110e 	bge	r17,r16,81121674 <___svfiprintf_internal_r+0xbcc>
81121630:	18c00404 	addi	r3,r3,16
81121634:	10800044 	addi	r2,r2,1
81121638:	45800015 	stw	r22,0(r8)
8112163c:	44400115 	stw	r17,4(r8)
81121640:	d8c01c15 	stw	r3,112(sp)
81121644:	d8801b15 	stw	r2,108(sp)
81121648:	90bff60e 	bge	r18,r2,81121624 <__reset+0xfb101624>
8112164c:	d9801a04 	addi	r6,sp,104
81121650:	b80b883a 	mov	r5,r23
81121654:	a809883a 	mov	r4,r21
81121658:	11208d00 	call	811208d0 <__ssprint_r>
8112165c:	1000221e 	bne	r2,zero,811216e8 <___svfiprintf_internal_r+0xc40>
81121660:	843ffc04 	addi	r16,r16,-16
81121664:	d8c01c17 	ldw	r3,112(sp)
81121668:	d8801b17 	ldw	r2,108(sp)
8112166c:	d811883a 	mov	r8,sp
81121670:	8c3fef16 	blt	r17,r16,81121630 <__reset+0xfb101630>
81121674:	dac02817 	ldw	r11,160(sp)
81121678:	1c07883a 	add	r3,r3,r16
8112167c:	10800044 	addi	r2,r2,1
81121680:	42c00015 	stw	r11,0(r8)
81121684:	44000115 	stw	r16,4(r8)
81121688:	d8c01c15 	stw	r3,112(sp)
8112168c:	d8801b15 	stw	r2,108(sp)
81121690:	010001c4 	movi	r4,7
81121694:	2080aa16 	blt	r4,r2,81121940 <___svfiprintf_internal_r+0xe98>
81121698:	d8802417 	ldw	r2,144(sp)
8112169c:	dac02017 	ldw	r11,128(sp)
811216a0:	12c0010e 	bge	r2,r11,811216a8 <___svfiprintf_internal_r+0xc00>
811216a4:	5805883a 	mov	r2,r11
811216a8:	dac02517 	ldw	r11,148(sp)
811216ac:	5897883a 	add	r11,r11,r2
811216b0:	dac02515 	stw	r11,148(sp)
811216b4:	1800531e 	bne	r3,zero,81121804 <___svfiprintf_internal_r+0xd5c>
811216b8:	98800007 	ldb	r2,0(r19)
811216bc:	d8001b15 	stw	zero,108(sp)
811216c0:	d811883a 	mov	r8,sp
811216c4:	103d231e 	bne	r2,zero,81120b54 <__reset+0xfb100b54>
811216c8:	9823883a 	mov	r17,r19
811216cc:	003d3906 	br	81120bb4 <__reset+0xfb100bb4>
811216d0:	d8801c17 	ldw	r2,112(sp)
811216d4:	10000426 	beq	r2,zero,811216e8 <___svfiprintf_internal_r+0xc40>
811216d8:	d9402717 	ldw	r5,156(sp)
811216dc:	d9002a17 	ldw	r4,168(sp)
811216e0:	d9801a04 	addi	r6,sp,104
811216e4:	11208d00 	call	811208d0 <__ssprint_r>
811216e8:	dac02717 	ldw	r11,156(sp)
811216ec:	d8802517 	ldw	r2,148(sp)
811216f0:	58c0030b 	ldhu	r3,12(r11)
811216f4:	18c0100c 	andi	r3,r3,64
811216f8:	1801381e 	bne	r3,zero,81121bdc <___svfiprintf_internal_r+0x1134>
811216fc:	dfc03717 	ldw	ra,220(sp)
81121700:	df003617 	ldw	fp,216(sp)
81121704:	ddc03517 	ldw	r23,212(sp)
81121708:	dd803417 	ldw	r22,208(sp)
8112170c:	dd403317 	ldw	r21,204(sp)
81121710:	dd003217 	ldw	r20,200(sp)
81121714:	dcc03117 	ldw	r19,196(sp)
81121718:	dc803017 	ldw	r18,192(sp)
8112171c:	dc402f17 	ldw	r17,188(sp)
81121720:	dc002e17 	ldw	r16,184(sp)
81121724:	dec03804 	addi	sp,sp,224
81121728:	f800283a 	ret
8112172c:	dac02417 	ldw	r11,144(sp)
81121730:	d9002017 	ldw	r4,128(sp)
81121734:	5939c83a 	sub	fp,r11,r4
81121738:	073f780e 	bge	zero,fp,8112151c <__reset+0xfb10151c>
8112173c:	02400404 	movi	r9,16
81121740:	4f01370e 	bge	r9,fp,81121c20 <___svfiprintf_internal_r+0x1178>
81121744:	02e04534 	movhi	r11,33044
81121748:	5ac00204 	addi	r11,r11,8
8112174c:	dac02215 	stw	r11,136(sp)
81121750:	028001c4 	movi	r10,7
81121754:	00000306 	br	81121764 <___svfiprintf_internal_r+0xcbc>
81121758:	e73ffc04 	addi	fp,fp,-16
8112175c:	42000204 	addi	r8,r8,8
81121760:	4f00150e 	bge	r9,fp,811217b8 <___svfiprintf_internal_r+0xd10>
81121764:	18c00404 	addi	r3,r3,16
81121768:	10800044 	addi	r2,r2,1
8112176c:	45000015 	stw	r20,0(r8)
81121770:	42400115 	stw	r9,4(r8)
81121774:	d8c01c15 	stw	r3,112(sp)
81121778:	d8801b15 	stw	r2,108(sp)
8112177c:	50bff60e 	bge	r10,r2,81121758 <__reset+0xfb101758>
81121780:	d9801a04 	addi	r6,sp,104
81121784:	b80b883a 	mov	r5,r23
81121788:	a809883a 	mov	r4,r21
8112178c:	da402c15 	stw	r9,176(sp)
81121790:	da802d15 	stw	r10,180(sp)
81121794:	11208d00 	call	811208d0 <__ssprint_r>
81121798:	da402c17 	ldw	r9,176(sp)
8112179c:	da802d17 	ldw	r10,180(sp)
811217a0:	103fd11e 	bne	r2,zero,811216e8 <__reset+0xfb1016e8>
811217a4:	e73ffc04 	addi	fp,fp,-16
811217a8:	d8c01c17 	ldw	r3,112(sp)
811217ac:	d8801b17 	ldw	r2,108(sp)
811217b0:	d811883a 	mov	r8,sp
811217b4:	4f3feb16 	blt	r9,fp,81121764 <__reset+0xfb101764>
811217b8:	dac02217 	ldw	r11,136(sp)
811217bc:	1f07883a 	add	r3,r3,fp
811217c0:	10800044 	addi	r2,r2,1
811217c4:	42c00015 	stw	r11,0(r8)
811217c8:	47000115 	stw	fp,4(r8)
811217cc:	d8c01c15 	stw	r3,112(sp)
811217d0:	d8801b15 	stw	r2,108(sp)
811217d4:	010001c4 	movi	r4,7
811217d8:	2080b616 	blt	r4,r2,81121ab4 <___svfiprintf_internal_r+0x100c>
811217dc:	42000204 	addi	r8,r8,8
811217e0:	003f4e06 	br	8112151c <__reset+0xfb10151c>
811217e4:	d9801a04 	addi	r6,sp,104
811217e8:	b80b883a 	mov	r5,r23
811217ec:	a809883a 	mov	r4,r21
811217f0:	11208d00 	call	811208d0 <__ssprint_r>
811217f4:	103fbc1e 	bne	r2,zero,811216e8 <__reset+0xfb1016e8>
811217f8:	d8c01c17 	ldw	r3,112(sp)
811217fc:	d811883a 	mov	r8,sp
81121800:	003f7a06 	br	811215ec <__reset+0xfb1015ec>
81121804:	d9801a04 	addi	r6,sp,104
81121808:	b80b883a 	mov	r5,r23
8112180c:	a809883a 	mov	r4,r21
81121810:	11208d00 	call	811208d0 <__ssprint_r>
81121814:	103fa826 	beq	r2,zero,811216b8 <__reset+0xfb1016b8>
81121818:	003fb306 	br	811216e8 <__reset+0xfb1016e8>
8112181c:	d9801a04 	addi	r6,sp,104
81121820:	b80b883a 	mov	r5,r23
81121824:	a809883a 	mov	r4,r21
81121828:	11208d00 	call	811208d0 <__ssprint_r>
8112182c:	103fae1e 	bne	r2,zero,811216e8 <__reset+0xfb1016e8>
81121830:	d811883a 	mov	r8,sp
81121834:	003cdc06 	br	81120ba8 <__reset+0xfb100ba8>
81121838:	d9801a04 	addi	r6,sp,104
8112183c:	b80b883a 	mov	r5,r23
81121840:	a809883a 	mov	r4,r21
81121844:	11208d00 	call	811208d0 <__ssprint_r>
81121848:	103fa71e 	bne	r2,zero,811216e8 <__reset+0xfb1016e8>
8112184c:	d8c01c17 	ldw	r3,112(sp)
81121850:	d8801b17 	ldw	r2,108(sp)
81121854:	d811883a 	mov	r8,sp
81121858:	003f5a06 	br	811215c4 <__reset+0xfb1015c4>
8112185c:	d9801a04 	addi	r6,sp,104
81121860:	b80b883a 	mov	r5,r23
81121864:	a809883a 	mov	r4,r21
81121868:	11208d00 	call	811208d0 <__ssprint_r>
8112186c:	103f9e1e 	bne	r2,zero,811216e8 <__reset+0xfb1016e8>
81121870:	d8c01c17 	ldw	r3,112(sp)
81121874:	d8801b17 	ldw	r2,108(sp)
81121878:	d811883a 	mov	r8,sp
8112187c:	003f1706 	br	811214dc <__reset+0xfb1014dc>
81121880:	d9801a04 	addi	r6,sp,104
81121884:	b80b883a 	mov	r5,r23
81121888:	a809883a 	mov	r4,r21
8112188c:	11208d00 	call	811208d0 <__ssprint_r>
81121890:	103f951e 	bne	r2,zero,811216e8 <__reset+0xfb1016e8>
81121894:	d8c01c17 	ldw	r3,112(sp)
81121898:	d8801b17 	ldw	r2,108(sp)
8112189c:	d811883a 	mov	r8,sp
811218a0:	003f1b06 	br	81121510 <__reset+0xfb101510>
811218a4:	d8001d85 	stb	zero,118(sp)
811218a8:	80007b16 	blt	r16,zero,81121a98 <___svfiprintf_internal_r+0xff0>
811218ac:	00ffdfc4 	movi	r3,-129
811218b0:	e244b03a 	or	r2,fp,r9
811218b4:	90e4703a 	and	r18,r18,r3
811218b8:	103d7026 	beq	r2,zero,81120e7c <__reset+0xfb100e7c>
811218bc:	0015883a 	mov	r10,zero
811218c0:	003d7206 	br	81120e8c <__reset+0xfb100e8c>
811218c4:	d9801a04 	addi	r6,sp,104
811218c8:	b80b883a 	mov	r5,r23
811218cc:	a809883a 	mov	r4,r21
811218d0:	11208d00 	call	811208d0 <__ssprint_r>
811218d4:	103f841e 	bne	r2,zero,811216e8 <__reset+0xfb1016e8>
811218d8:	d8c01c17 	ldw	r3,112(sp)
811218dc:	d8801b17 	ldw	r2,108(sp)
811218e0:	d811883a 	mov	r8,sp
811218e4:	003ef006 	br	811214a8 <__reset+0xfb1014a8>
811218e8:	9080100c 	andi	r2,r18,64
811218ec:	d8001d85 	stb	zero,118(sp)
811218f0:	dac02317 	ldw	r11,140(sp)
811218f4:	10008126 	beq	r2,zero,81121afc <___svfiprintf_internal_r+0x1054>
811218f8:	58800104 	addi	r2,r11,4
811218fc:	5f00000b 	ldhu	fp,0(r11)
81121900:	0013883a 	mov	r9,zero
81121904:	803ec30e 	bge	r16,zero,81121414 <__reset+0xfb101414>
81121908:	d8802315 	stw	r2,140(sp)
8112190c:	0015883a 	mov	r10,zero
81121910:	e244b03a 	or	r2,fp,r9
81121914:	103e371e 	bne	r2,zero,811211f4 <__reset+0xfb1011f4>
81121918:	00800044 	movi	r2,1
8112191c:	10803fcc 	andi	r2,r2,255
81121920:	00c00044 	movi	r3,1
81121924:	10c06126 	beq	r2,r3,81121aac <___svfiprintf_internal_r+0x1004>
81121928:	00c00084 	movi	r3,2
8112192c:	10fd5526 	beq	r2,r3,81120e84 <__reset+0xfb100e84>
81121930:	003ed806 	br	81121494 <__reset+0xfb101494>
81121934:	d8802315 	stw	r2,140(sp)
81121938:	98c00007 	ldb	r3,0(r19)
8112193c:	003cab06 	br	81120bec <__reset+0xfb100bec>
81121940:	d9801a04 	addi	r6,sp,104
81121944:	b80b883a 	mov	r5,r23
81121948:	a809883a 	mov	r4,r21
8112194c:	11208d00 	call	811208d0 <__ssprint_r>
81121950:	103f651e 	bne	r2,zero,811216e8 <__reset+0xfb1016e8>
81121954:	d8c01c17 	ldw	r3,112(sp)
81121958:	003f4f06 	br	81121698 <__reset+0xfb101698>
8112195c:	00a04534 	movhi	r2,33044
81121960:	10bf7804 	addi	r2,r2,-544
81121964:	d8802915 	stw	r2,164(sp)
81121968:	003d4406 	br	81120e7c <__reset+0xfb100e7c>
8112196c:	dac02317 	ldw	r11,140(sp)
81121970:	58800017 	ldw	r2,0(r11)
81121974:	dac02517 	ldw	r11,148(sp)
81121978:	5807d7fa 	srai	r3,r11,31
8112197c:	dac02317 	ldw	r11,140(sp)
81121980:	10c00115 	stw	r3,4(r2)
81121984:	5ac00104 	addi	r11,r11,4
81121988:	dac02315 	stw	r11,140(sp)
8112198c:	dac02517 	ldw	r11,148(sp)
81121990:	12c00015 	stw	r11,0(r2)
81121994:	003c6d06 	br	81120b4c <__reset+0xfb100b4c>
81121998:	9080100c 	andi	r2,r18,64
8112199c:	dac02317 	ldw	r11,140(sp)
811219a0:	103e5326 	beq	r2,zero,811212f0 <__reset+0xfb1012f0>
811219a4:	5f00000f 	ldh	fp,0(r11)
811219a8:	5ac00104 	addi	r11,r11,4
811219ac:	dac02315 	stw	r11,140(sp)
811219b0:	e013d7fa 	srai	r9,fp,31
811219b4:	4805883a 	mov	r2,r9
811219b8:	003e0706 	br	811211d8 <__reset+0xfb1011d8>
811219bc:	00800c04 	movi	r2,48
811219c0:	d8801d05 	stb	r2,116(sp)
811219c4:	d8c01d45 	stb	r3,117(sp)
811219c8:	d8001d85 	stb	zero,118(sp)
811219cc:	90800094 	ori	r2,r18,2
811219d0:	80008f16 	blt	r16,zero,81121c10 <___svfiprintf_internal_r+0x1168>
811219d4:	00bfdfc4 	movi	r2,-129
811219d8:	90a4703a 	and	r18,r18,r2
811219dc:	94800094 	ori	r18,r18,2
811219e0:	0015883a 	mov	r10,zero
811219e4:	003d2906 	br	81120e8c <__reset+0xfb100e8c>
811219e8:	98c00007 	ldb	r3,0(r19)
811219ec:	003c7f06 	br	81120bec <__reset+0xfb100bec>
811219f0:	dac02317 	ldw	r11,140(sp)
811219f4:	0013883a 	mov	r9,zero
811219f8:	5f000017 	ldw	fp,0(r11)
811219fc:	5ac00104 	addi	r11,r11,4
81121a00:	dac02315 	stw	r11,140(sp)
81121a04:	003d1506 	br	81120e5c <__reset+0xfb100e5c>
81121a08:	9080100c 	andi	r2,r18,64
81121a0c:	d8001d85 	stb	zero,118(sp)
81121a10:	dac02317 	ldw	r11,140(sp)
81121a14:	10003426 	beq	r2,zero,81121ae8 <___svfiprintf_internal_r+0x1040>
81121a18:	58800104 	addi	r2,r11,4
81121a1c:	5f00000b 	ldhu	fp,0(r11)
81121a20:	0013883a 	mov	r9,zero
81121a24:	803e950e 	bge	r16,zero,8112147c <__reset+0xfb10147c>
81121a28:	e246b03a 	or	r3,fp,r9
81121a2c:	d8802315 	stw	r2,140(sp)
81121a30:	183d5a1e 	bne	r3,zero,81120f9c <__reset+0xfb100f9c>
81121a34:	0015883a 	mov	r10,zero
81121a38:	0005883a 	mov	r2,zero
81121a3c:	003fb706 	br	8112191c <__reset+0xfb10191c>
81121a40:	98c00043 	ldbu	r3,1(r19)
81121a44:	94800814 	ori	r18,r18,32
81121a48:	9cc00044 	addi	r19,r19,1
81121a4c:	18c03fcc 	andi	r3,r3,255
81121a50:	18c0201c 	xori	r3,r3,128
81121a54:	18ffe004 	addi	r3,r3,-128
81121a58:	003c6406 	br	81120bec <__reset+0xfb100bec>
81121a5c:	d8c02315 	stw	r3,140(sp)
81121a60:	0015883a 	mov	r10,zero
81121a64:	003faa06 	br	81121910 <__reset+0xfb101910>
81121a68:	dac02317 	ldw	r11,140(sp)
81121a6c:	58800017 	ldw	r2,0(r11)
81121a70:	5ac00104 	addi	r11,r11,4
81121a74:	dac02315 	stw	r11,140(sp)
81121a78:	dac02517 	ldw	r11,148(sp)
81121a7c:	12c00015 	stw	r11,0(r2)
81121a80:	003c3206 	br	81120b4c <__reset+0xfb100b4c>
81121a84:	01204534 	movhi	r4,33044
81121a88:	213f7804 	addi	r4,r4,-544
81121a8c:	d9002915 	stw	r4,164(sp)
81121a90:	d8c02315 	stw	r3,140(sp)
81121a94:	1025883a 	mov	r18,r2
81121a98:	e244b03a 	or	r2,fp,r9
81121a9c:	103f871e 	bne	r2,zero,811218bc <__reset+0xfb1018bc>
81121aa0:	0015883a 	mov	r10,zero
81121aa4:	00800084 	movi	r2,2
81121aa8:	003f9c06 	br	8112191c <__reset+0xfb10191c>
81121aac:	0039883a 	mov	fp,zero
81121ab0:	003e5f06 	br	81121430 <__reset+0xfb101430>
81121ab4:	d9801a04 	addi	r6,sp,104
81121ab8:	b80b883a 	mov	r5,r23
81121abc:	a809883a 	mov	r4,r21
81121ac0:	11208d00 	call	811208d0 <__ssprint_r>
81121ac4:	103f081e 	bne	r2,zero,811216e8 <__reset+0xfb1016e8>
81121ac8:	d8c01c17 	ldw	r3,112(sp)
81121acc:	d8801b17 	ldw	r2,108(sp)
81121ad0:	d811883a 	mov	r8,sp
81121ad4:	003e9106 	br	8112151c <__reset+0xfb10151c>
81121ad8:	01204534 	movhi	r4,33044
81121adc:	21000204 	addi	r4,r4,8
81121ae0:	d9002215 	stw	r4,136(sp)
81121ae4:	003ead06 	br	8112159c <__reset+0xfb10159c>
81121ae8:	58800104 	addi	r2,r11,4
81121aec:	5f000017 	ldw	fp,0(r11)
81121af0:	0013883a 	mov	r9,zero
81121af4:	803e610e 	bge	r16,zero,8112147c <__reset+0xfb10147c>
81121af8:	003fcb06 	br	81121a28 <__reset+0xfb101a28>
81121afc:	58800104 	addi	r2,r11,4
81121b00:	5f000017 	ldw	fp,0(r11)
81121b04:	0013883a 	mov	r9,zero
81121b08:	803e420e 	bge	r16,zero,81121414 <__reset+0xfb101414>
81121b0c:	003f7e06 	br	81121908 <__reset+0xfb101908>
81121b10:	5f000017 	ldw	fp,0(r11)
81121b14:	5ac00104 	addi	r11,r11,4
81121b18:	0013883a 	mov	r9,zero
81121b1c:	dac02315 	stw	r11,140(sp)
81121b20:	003cce06 	br	81120e5c <__reset+0xfb100e5c>
81121b24:	8809883a 	mov	r4,r17
81121b28:	da002c15 	stw	r8,176(sp)
81121b2c:	11139780 	call	81113978 <strlen>
81121b30:	d8802115 	stw	r2,132(sp)
81121b34:	da801d83 	ldbu	r10,118(sp)
81121b38:	df002315 	stw	fp,140(sp)
81121b3c:	0021883a 	mov	r16,zero
81121b40:	da002c17 	ldw	r8,176(sp)
81121b44:	003cf606 	br	81120f20 <__reset+0xfb100f20>
81121b48:	00800184 	movi	r2,6
81121b4c:	1400012e 	bgeu	r2,r16,81121b54 <___svfiprintf_internal_r+0x10ac>
81121b50:	1021883a 	mov	r16,r2
81121b54:	dc002115 	stw	r16,132(sp)
81121b58:	8005883a 	mov	r2,r16
81121b5c:	80003c16 	blt	r16,zero,81121c50 <___svfiprintf_internal_r+0x11a8>
81121b60:	04604534 	movhi	r17,33044
81121b64:	d8802015 	stw	r2,128(sp)
81121b68:	df002315 	stw	fp,140(sp)
81121b6c:	8c7f7d04 	addi	r17,r17,-524
81121b70:	003d2e06 	br	8112102c <__reset+0xfb10102c>
81121b74:	04001004 	movi	r16,64
81121b78:	800b883a 	mov	r5,r16
81121b7c:	11126700 	call	81112670 <_malloc_r>
81121b80:	dac02717 	ldw	r11,156(sp)
81121b84:	58800015 	stw	r2,0(r11)
81121b88:	58800415 	stw	r2,16(r11)
81121b8c:	10004826 	beq	r2,zero,81121cb0 <___svfiprintf_internal_r+0x1208>
81121b90:	dac02717 	ldw	r11,156(sp)
81121b94:	5c000515 	stw	r16,20(r11)
81121b98:	003bd906 	br	81120b00 <__reset+0xfb100b00>
81121b9c:	9080004c 	andi	r2,r18,1
81121ba0:	0015883a 	mov	r10,zero
81121ba4:	10000626 	beq	r2,zero,81121bc0 <___svfiprintf_internal_r+0x1118>
81121ba8:	dac02b17 	ldw	r11,172(sp)
81121bac:	00800c04 	movi	r2,48
81121bb0:	d88019c5 	stb	r2,103(sp)
81121bb4:	dac02115 	stw	r11,132(sp)
81121bb8:	dc4019c4 	addi	r17,sp,103
81121bbc:	003cd806 	br	81120f20 <__reset+0xfb100f20>
81121bc0:	d8002115 	stw	zero,132(sp)
81121bc4:	dc401a04 	addi	r17,sp,104
81121bc8:	003cd506 	br	81120f20 <__reset+0xfb100f20>
81121bcc:	01204534 	movhi	r4,33044
81121bd0:	21000604 	addi	r4,r4,24
81121bd4:	d9002815 	stw	r4,160(sp)
81121bd8:	003d4306 	br	811210e8 <__reset+0xfb1010e8>
81121bdc:	00bfffc4 	movi	r2,-1
81121be0:	003ec606 	br	811216fc <__reset+0xfb1016fc>
81121be4:	00800044 	movi	r2,1
81121be8:	10803fcc 	andi	r2,r2,255
81121bec:	00c00044 	movi	r3,1
81121bf0:	10fd8026 	beq	r2,r3,811211f4 <__reset+0xfb1011f4>
81121bf4:	00c00084 	movi	r3,2
81121bf8:	10fca426 	beq	r2,r3,81120e8c <__reset+0xfb100e8c>
81121bfc:	003ce806 	br	81120fa0 <__reset+0xfb100fa0>
81121c00:	01204534 	movhi	r4,33044
81121c04:	21000604 	addi	r4,r4,24
81121c08:	d9002815 	stw	r4,160(sp)
81121c0c:	003e9906 	br	81121674 <__reset+0xfb101674>
81121c10:	1025883a 	mov	r18,r2
81121c14:	0015883a 	mov	r10,zero
81121c18:	00800084 	movi	r2,2
81121c1c:	003ff206 	br	81121be8 <__reset+0xfb101be8>
81121c20:	01604534 	movhi	r5,33044
81121c24:	29400204 	addi	r5,r5,8
81121c28:	d9402215 	stw	r5,136(sp)
81121c2c:	003ee206 	br	811217b8 <__reset+0xfb1017b8>
81121c30:	5827883a 	mov	r19,r11
81121c34:	0021883a 	mov	r16,zero
81121c38:	003bed06 	br	81120bf0 <__reset+0xfb100bf0>
81121c3c:	dc002115 	stw	r16,132(sp)
81121c40:	da801d83 	ldbu	r10,118(sp)
81121c44:	df002315 	stw	fp,140(sp)
81121c48:	0021883a 	mov	r16,zero
81121c4c:	003cb406 	br	81120f20 <__reset+0xfb100f20>
81121c50:	0005883a 	mov	r2,zero
81121c54:	003fc206 	br	81121b60 <__reset+0xfb101b60>
81121c58:	d8802317 	ldw	r2,140(sp)
81121c5c:	98c00043 	ldbu	r3,1(r19)
81121c60:	5827883a 	mov	r19,r11
81121c64:	14000017 	ldw	r16,0(r2)
81121c68:	10800104 	addi	r2,r2,4
81121c6c:	d8802315 	stw	r2,140(sp)
81121c70:	803f760e 	bge	r16,zero,81121a4c <__reset+0xfb101a4c>
81121c74:	18c03fcc 	andi	r3,r3,255
81121c78:	18c0201c 	xori	r3,r3,128
81121c7c:	043fffc4 	movi	r16,-1
81121c80:	18ffe004 	addi	r3,r3,-128
81121c84:	003bd906 	br	81120bec <__reset+0xfb100bec>
81121c88:	d9c01d85 	stb	r7,118(sp)
81121c8c:	003cb606 	br	81120f68 <__reset+0xfb100f68>
81121c90:	d9c01d85 	stb	r7,118(sp)
81121c94:	003d2106 	br	8112111c <__reset+0xfb10111c>
81121c98:	d9c01d85 	stb	r7,118(sp)
81121c9c:	003d8e06 	br	811212d8 <__reset+0xfb1012d8>
81121ca0:	d9c01d85 	stb	r7,118(sp)
81121ca4:	003db306 	br	81121374 <__reset+0xfb101374>
81121ca8:	d9c01d85 	stb	r7,118(sp)
81121cac:	003c8a06 	br	81120ed8 <__reset+0xfb100ed8>
81121cb0:	dac02a17 	ldw	r11,168(sp)
81121cb4:	00800304 	movi	r2,12
81121cb8:	58800015 	stw	r2,0(r11)
81121cbc:	00bfffc4 	movi	r2,-1
81121cc0:	003e8e06 	br	811216fc <__reset+0xfb1016fc>
81121cc4:	d9c01d85 	stb	r7,118(sp)
81121cc8:	003dc706 	br	811213e8 <__reset+0xfb1013e8>
81121ccc:	d9c01d85 	stb	r7,118(sp)
81121cd0:	003ddf06 	br	81121450 <__reset+0xfb101450>
81121cd4:	d9c01d85 	stb	r7,118(sp)
81121cd8:	003d3706 	br	811211b8 <__reset+0xfb1011b8>
81121cdc:	d9c01d85 	stb	r7,118(sp)
81121ce0:	003c5406 	br	81120e34 <__reset+0xfb100e34>
81121ce4:	d9c01d85 	stb	r7,118(sp)
81121ce8:	003d1d06 	br	81121160 <__reset+0xfb101160>

81121cec <__submore>:
81121cec:	defffa04 	addi	sp,sp,-24
81121cf0:	de00012e 	bgeu	sp,et,81121cf8 <__submore+0xc>
81121cf4:	003b68fa 	trap	3
81121cf8:	dc000015 	stw	r16,0(sp)
81121cfc:	2821883a 	mov	r16,r5
81121d00:	29400c17 	ldw	r5,48(r5)
81121d04:	dfc00515 	stw	ra,20(sp)
81121d08:	dd000415 	stw	r20,16(sp)
81121d0c:	dcc00315 	stw	r19,12(sp)
81121d10:	dc800215 	stw	r18,8(sp)
81121d14:	dc400115 	stw	r17,4(sp)
81121d18:	80801004 	addi	r2,r16,64
81121d1c:	28801726 	beq	r5,r2,81121d7c <__submore+0x90>
81121d20:	84400d17 	ldw	r17,52(r16)
81121d24:	8c67883a 	add	r19,r17,r17
81121d28:	980d883a 	mov	r6,r19
81121d2c:	111e1780 	call	8111e178 <_realloc_r>
81121d30:	1025883a 	mov	r18,r2
81121d34:	10002226 	beq	r2,zero,81121dc0 <__submore+0xd4>
81121d38:	1469883a 	add	r20,r2,r17
81121d3c:	880d883a 	mov	r6,r17
81121d40:	100b883a 	mov	r5,r2
81121d44:	a009883a 	mov	r4,r20
81121d48:	1112e840 	call	81112e84 <memcpy>
81121d4c:	0005883a 	mov	r2,zero
81121d50:	85000015 	stw	r20,0(r16)
81121d54:	84800c15 	stw	r18,48(r16)
81121d58:	84c00d15 	stw	r19,52(r16)
81121d5c:	dfc00517 	ldw	ra,20(sp)
81121d60:	dd000417 	ldw	r20,16(sp)
81121d64:	dcc00317 	ldw	r19,12(sp)
81121d68:	dc800217 	ldw	r18,8(sp)
81121d6c:	dc400117 	ldw	r17,4(sp)
81121d70:	dc000017 	ldw	r16,0(sp)
81121d74:	dec00604 	addi	sp,sp,24
81121d78:	f800283a 	ret
81121d7c:	04410004 	movi	r17,1024
81121d80:	880b883a 	mov	r5,r17
81121d84:	11126700 	call	81112670 <_malloc_r>
81121d88:	1007883a 	mov	r3,r2
81121d8c:	10000c26 	beq	r2,zero,81121dc0 <__submore+0xd4>
81121d90:	80801083 	ldbu	r2,66(r16)
81121d94:	80c00c15 	stw	r3,48(r16)
81121d98:	84400d15 	stw	r17,52(r16)
81121d9c:	1880ffc5 	stb	r2,1023(r3)
81121da0:	81401043 	ldbu	r5,65(r16)
81121da4:	1900ff44 	addi	r4,r3,1021
81121da8:	0005883a 	mov	r2,zero
81121dac:	1940ff85 	stb	r5,1022(r3)
81121db0:	81401003 	ldbu	r5,64(r16)
81121db4:	1940ff45 	stb	r5,1021(r3)
81121db8:	81000015 	stw	r4,0(r16)
81121dbc:	003fe706 	br	81121d5c <__reset+0xfb101d5c>
81121dc0:	00bfffc4 	movi	r2,-1
81121dc4:	003fe506 	br	81121d5c <__reset+0xfb101d5c>

81121dc8 <_ungetc_r>:
81121dc8:	00bfffc4 	movi	r2,-1
81121dcc:	28806326 	beq	r5,r2,81121f5c <_ungetc_r+0x194>
81121dd0:	defffb04 	addi	sp,sp,-20
81121dd4:	de00012e 	bgeu	sp,et,81121ddc <_ungetc_r+0x14>
81121dd8:	003b68fa 	trap	3
81121ddc:	dcc00315 	stw	r19,12(sp)
81121de0:	dc400115 	stw	r17,4(sp)
81121de4:	dc000015 	stw	r16,0(sp)
81121de8:	dfc00415 	stw	ra,16(sp)
81121dec:	dc800215 	stw	r18,8(sp)
81121df0:	2023883a 	mov	r17,r4
81121df4:	3021883a 	mov	r16,r6
81121df8:	2827883a 	mov	r19,r5
81121dfc:	20000226 	beq	r4,zero,81121e08 <_ungetc_r+0x40>
81121e00:	20800e17 	ldw	r2,56(r4)
81121e04:	10002e26 	beq	r2,zero,81121ec0 <_ungetc_r+0xf8>
81121e08:	80c0030b 	ldhu	r3,12(r16)
81121e0c:	1888000c 	andi	r2,r3,8192
81121e10:	1000051e 	bne	r2,zero,81121e28 <_ungetc_r+0x60>
81121e14:	81001917 	ldw	r4,100(r16)
81121e18:	00b7ffc4 	movi	r2,-8193
81121e1c:	18c80014 	ori	r3,r3,8192
81121e20:	2084703a 	and	r2,r4,r2
81121e24:	80801915 	stw	r2,100(r16)
81121e28:	00bff7c4 	movi	r2,-33
81121e2c:	1884703a 	and	r2,r3,r2
81121e30:	8080030d 	sth	r2,12(r16)
81121e34:	1900010c 	andi	r4,r3,4
81121e38:	2000061e 	bne	r4,zero,81121e54 <_ungetc_r+0x8c>
81121e3c:	1900040c 	andi	r4,r3,16
81121e40:	20001d26 	beq	r4,zero,81121eb8 <_ungetc_r+0xf0>
81121e44:	18c0020c 	andi	r3,r3,8
81121e48:	1800331e 	bne	r3,zero,81121f18 <_ungetc_r+0x150>
81121e4c:	10800114 	ori	r2,r2,4
81121e50:	8080030d 	sth	r2,12(r16)
81121e54:	80800c17 	ldw	r2,48(r16)
81121e58:	9c803fcc 	andi	r18,r19,255
81121e5c:	10001a26 	beq	r2,zero,81121ec8 <_ungetc_r+0x100>
81121e60:	80c00117 	ldw	r3,4(r16)
81121e64:	80800d17 	ldw	r2,52(r16)
81121e68:	18800f0e 	bge	r3,r2,81121ea8 <_ungetc_r+0xe0>
81121e6c:	80c00017 	ldw	r3,0(r16)
81121e70:	9005883a 	mov	r2,r18
81121e74:	193fffc4 	addi	r4,r3,-1
81121e78:	81000015 	stw	r4,0(r16)
81121e7c:	1cffffc5 	stb	r19,-1(r3)
81121e80:	80c00117 	ldw	r3,4(r16)
81121e84:	18c00044 	addi	r3,r3,1
81121e88:	80c00115 	stw	r3,4(r16)
81121e8c:	dfc00417 	ldw	ra,16(sp)
81121e90:	dcc00317 	ldw	r19,12(sp)
81121e94:	dc800217 	ldw	r18,8(sp)
81121e98:	dc400117 	ldw	r17,4(sp)
81121e9c:	dc000017 	ldw	r16,0(sp)
81121ea0:	dec00504 	addi	sp,sp,20
81121ea4:	f800283a 	ret
81121ea8:	800b883a 	mov	r5,r16
81121eac:	8809883a 	mov	r4,r17
81121eb0:	1121cec0 	call	81121cec <__submore>
81121eb4:	103fed26 	beq	r2,zero,81121e6c <__reset+0xfb101e6c>
81121eb8:	00bfffc4 	movi	r2,-1
81121ebc:	003ff306 	br	81121e8c <__reset+0xfb101e8c>
81121ec0:	111bc4c0 	call	8111bc4c <__sinit>
81121ec4:	003fd006 	br	81121e08 <__reset+0xfb101e08>
81121ec8:	80c00417 	ldw	r3,16(r16)
81121ecc:	80800017 	ldw	r2,0(r16)
81121ed0:	18000326 	beq	r3,zero,81121ee0 <_ungetc_r+0x118>
81121ed4:	1880022e 	bgeu	r3,r2,81121ee0 <_ungetc_r+0x118>
81121ed8:	10ffffc3 	ldbu	r3,-1(r2)
81121edc:	90c01826 	beq	r18,r3,81121f40 <_ungetc_r+0x178>
81121ee0:	81400117 	ldw	r5,4(r16)
81121ee4:	80800e15 	stw	r2,56(r16)
81121ee8:	008000c4 	movi	r2,3
81121eec:	81001004 	addi	r4,r16,64
81121ef0:	80c01084 	addi	r3,r16,66
81121ef4:	80800d15 	stw	r2,52(r16)
81121ef8:	00800044 	movi	r2,1
81121efc:	80800115 	stw	r2,4(r16)
81121f00:	81400f15 	stw	r5,60(r16)
81121f04:	81000c15 	stw	r4,48(r16)
81121f08:	84c01085 	stb	r19,66(r16)
81121f0c:	80c00015 	stw	r3,0(r16)
81121f10:	9005883a 	mov	r2,r18
81121f14:	003fdd06 	br	81121e8c <__reset+0xfb101e8c>
81121f18:	800b883a 	mov	r5,r16
81121f1c:	8809883a 	mov	r4,r17
81121f20:	111b8500 	call	8111b850 <_fflush_r>
81121f24:	103fe41e 	bne	r2,zero,81121eb8 <__reset+0xfb101eb8>
81121f28:	8080030b 	ldhu	r2,12(r16)
81121f2c:	00fffdc4 	movi	r3,-9
81121f30:	80000215 	stw	zero,8(r16)
81121f34:	1884703a 	and	r2,r3,r2
81121f38:	80000615 	stw	zero,24(r16)
81121f3c:	003fc306 	br	81121e4c <__reset+0xfb101e4c>
81121f40:	80c00117 	ldw	r3,4(r16)
81121f44:	10bfffc4 	addi	r2,r2,-1
81121f48:	80800015 	stw	r2,0(r16)
81121f4c:	18800044 	addi	r2,r3,1
81121f50:	80800115 	stw	r2,4(r16)
81121f54:	9005883a 	mov	r2,r18
81121f58:	003fcc06 	br	81121e8c <__reset+0xfb101e8c>
81121f5c:	00bfffc4 	movi	r2,-1
81121f60:	f800283a 	ret

81121f64 <ungetc>:
81121f64:	00a04534 	movhi	r2,33044
81121f68:	10895a04 	addi	r2,r2,9576
81121f6c:	280d883a 	mov	r6,r5
81121f70:	200b883a 	mov	r5,r4
81121f74:	11000017 	ldw	r4,0(r2)
81121f78:	1121dc81 	jmpi	81121dc8 <_ungetc_r>

81121f7c <__sprint_r.part.0>:
81121f7c:	defff604 	addi	sp,sp,-40
81121f80:	de00012e 	bgeu	sp,et,81121f88 <__sprint_r.part.0+0xc>
81121f84:	003b68fa 	trap	3
81121f88:	28801917 	ldw	r2,100(r5)
81121f8c:	dd400515 	stw	r21,20(sp)
81121f90:	dfc00915 	stw	ra,36(sp)
81121f94:	df000815 	stw	fp,32(sp)
81121f98:	ddc00715 	stw	r23,28(sp)
81121f9c:	dd800615 	stw	r22,24(sp)
81121fa0:	dd000415 	stw	r20,16(sp)
81121fa4:	dcc00315 	stw	r19,12(sp)
81121fa8:	dc800215 	stw	r18,8(sp)
81121fac:	dc400115 	stw	r17,4(sp)
81121fb0:	dc000015 	stw	r16,0(sp)
81121fb4:	1088000c 	andi	r2,r2,8192
81121fb8:	302b883a 	mov	r21,r6
81121fbc:	10002e26 	beq	r2,zero,81122078 <__sprint_r.part.0+0xfc>
81121fc0:	30800217 	ldw	r2,8(r6)
81121fc4:	35800017 	ldw	r22,0(r6)
81121fc8:	10002926 	beq	r2,zero,81122070 <__sprint_r.part.0+0xf4>
81121fcc:	2827883a 	mov	r19,r5
81121fd0:	2029883a 	mov	r20,r4
81121fd4:	b5c00104 	addi	r23,r22,4
81121fd8:	04bfffc4 	movi	r18,-1
81121fdc:	bc400017 	ldw	r17,0(r23)
81121fe0:	b4000017 	ldw	r16,0(r22)
81121fe4:	0039883a 	mov	fp,zero
81121fe8:	8822d0ba 	srli	r17,r17,2
81121fec:	8800031e 	bne	r17,zero,81121ffc <__sprint_r.part.0+0x80>
81121ff0:	00001806 	br	81122054 <__sprint_r.part.0+0xd8>
81121ff4:	84000104 	addi	r16,r16,4
81121ff8:	8f001526 	beq	r17,fp,81122050 <__sprint_r.part.0+0xd4>
81121ffc:	81400017 	ldw	r5,0(r16)
81122000:	980d883a 	mov	r6,r19
81122004:	a009883a 	mov	r4,r20
81122008:	11239200 	call	81123920 <_fputwc_r>
8112200c:	e7000044 	addi	fp,fp,1
81122010:	14bff81e 	bne	r2,r18,81121ff4 <__reset+0xfb101ff4>
81122014:	9005883a 	mov	r2,r18
81122018:	a8000215 	stw	zero,8(r21)
8112201c:	a8000115 	stw	zero,4(r21)
81122020:	dfc00917 	ldw	ra,36(sp)
81122024:	df000817 	ldw	fp,32(sp)
81122028:	ddc00717 	ldw	r23,28(sp)
8112202c:	dd800617 	ldw	r22,24(sp)
81122030:	dd400517 	ldw	r21,20(sp)
81122034:	dd000417 	ldw	r20,16(sp)
81122038:	dcc00317 	ldw	r19,12(sp)
8112203c:	dc800217 	ldw	r18,8(sp)
81122040:	dc400117 	ldw	r17,4(sp)
81122044:	dc000017 	ldw	r16,0(sp)
81122048:	dec00a04 	addi	sp,sp,40
8112204c:	f800283a 	ret
81122050:	a8800217 	ldw	r2,8(r21)
81122054:	8c63883a 	add	r17,r17,r17
81122058:	8c63883a 	add	r17,r17,r17
8112205c:	1445c83a 	sub	r2,r2,r17
81122060:	a8800215 	stw	r2,8(r21)
81122064:	b5800204 	addi	r22,r22,8
81122068:	bdc00204 	addi	r23,r23,8
8112206c:	103fdb1e 	bne	r2,zero,81121fdc <__reset+0xfb101fdc>
81122070:	0005883a 	mov	r2,zero
81122074:	003fe806 	br	81122018 <__reset+0xfb102018>
81122078:	111c3fc0 	call	8111c3fc <__sfvwrite_r>
8112207c:	003fe606 	br	81122018 <__reset+0xfb102018>

81122080 <__sprint_r>:
81122080:	30c00217 	ldw	r3,8(r6)
81122084:	18000126 	beq	r3,zero,8112208c <__sprint_r+0xc>
81122088:	1121f7c1 	jmpi	81121f7c <__sprint_r.part.0>
8112208c:	30000115 	stw	zero,4(r6)
81122090:	0005883a 	mov	r2,zero
81122094:	f800283a 	ret

81122098 <___vfiprintf_internal_r>:
81122098:	deffc904 	addi	sp,sp,-220
8112209c:	de00012e 	bgeu	sp,et,811220a4 <___vfiprintf_internal_r+0xc>
811220a0:	003b68fa 	trap	3
811220a4:	df003515 	stw	fp,212(sp)
811220a8:	dd003115 	stw	r20,196(sp)
811220ac:	dfc03615 	stw	ra,216(sp)
811220b0:	ddc03415 	stw	r23,208(sp)
811220b4:	dd803315 	stw	r22,204(sp)
811220b8:	dd403215 	stw	r21,200(sp)
811220bc:	dcc03015 	stw	r19,192(sp)
811220c0:	dc802f15 	stw	r18,188(sp)
811220c4:	dc402e15 	stw	r17,184(sp)
811220c8:	dc002d15 	stw	r16,180(sp)
811220cc:	d9002015 	stw	r4,128(sp)
811220d0:	d9c02215 	stw	r7,136(sp)
811220d4:	2829883a 	mov	r20,r5
811220d8:	3039883a 	mov	fp,r6
811220dc:	20000226 	beq	r4,zero,811220e8 <___vfiprintf_internal_r+0x50>
811220e0:	20800e17 	ldw	r2,56(r4)
811220e4:	1000cf26 	beq	r2,zero,81122424 <___vfiprintf_internal_r+0x38c>
811220e8:	a080030b 	ldhu	r2,12(r20)
811220ec:	10c8000c 	andi	r3,r2,8192
811220f0:	1800061e 	bne	r3,zero,8112210c <___vfiprintf_internal_r+0x74>
811220f4:	a1001917 	ldw	r4,100(r20)
811220f8:	00f7ffc4 	movi	r3,-8193
811220fc:	10880014 	ori	r2,r2,8192
81122100:	20c6703a 	and	r3,r4,r3
81122104:	a080030d 	sth	r2,12(r20)
81122108:	a0c01915 	stw	r3,100(r20)
8112210c:	10c0020c 	andi	r3,r2,8
81122110:	1800a926 	beq	r3,zero,811223b8 <___vfiprintf_internal_r+0x320>
81122114:	a0c00417 	ldw	r3,16(r20)
81122118:	1800a726 	beq	r3,zero,811223b8 <___vfiprintf_internal_r+0x320>
8112211c:	1080068c 	andi	r2,r2,26
81122120:	00c00284 	movi	r3,10
81122124:	10c0ac26 	beq	r2,r3,811223d8 <___vfiprintf_internal_r+0x340>
81122128:	da801a04 	addi	r10,sp,104
8112212c:	da801e15 	stw	r10,120(sp)
81122130:	d8801e17 	ldw	r2,120(sp)
81122134:	da8019c4 	addi	r10,sp,103
81122138:	05a04534 	movhi	r22,33044
8112213c:	05e04534 	movhi	r23,33044
81122140:	da801f15 	stw	r10,124(sp)
81122144:	1295c83a 	sub	r10,r2,r10
81122148:	b5800e04 	addi	r22,r22,56
8112214c:	bdc00a04 	addi	r23,r23,40
81122150:	dec01a15 	stw	sp,104(sp)
81122154:	d8001c15 	stw	zero,112(sp)
81122158:	d8001b15 	stw	zero,108(sp)
8112215c:	d8002615 	stw	zero,152(sp)
81122160:	d8002315 	stw	zero,140(sp)
81122164:	da802715 	stw	r10,156(sp)
81122168:	d811883a 	mov	r8,sp
8112216c:	dd002115 	stw	r20,132(sp)
81122170:	e021883a 	mov	r16,fp
81122174:	80800007 	ldb	r2,0(r16)
81122178:	1003ea26 	beq	r2,zero,81123124 <___vfiprintf_internal_r+0x108c>
8112217c:	00c00944 	movi	r3,37
81122180:	8025883a 	mov	r18,r16
81122184:	10c0021e 	bne	r2,r3,81122190 <___vfiprintf_internal_r+0xf8>
81122188:	00001606 	br	811221e4 <___vfiprintf_internal_r+0x14c>
8112218c:	10c00326 	beq	r2,r3,8112219c <___vfiprintf_internal_r+0x104>
81122190:	94800044 	addi	r18,r18,1
81122194:	90800007 	ldb	r2,0(r18)
81122198:	103ffc1e 	bne	r2,zero,8112218c <__reset+0xfb10218c>
8112219c:	9423c83a 	sub	r17,r18,r16
811221a0:	88001026 	beq	r17,zero,811221e4 <___vfiprintf_internal_r+0x14c>
811221a4:	d8c01c17 	ldw	r3,112(sp)
811221a8:	d8801b17 	ldw	r2,108(sp)
811221ac:	44000015 	stw	r16,0(r8)
811221b0:	88c7883a 	add	r3,r17,r3
811221b4:	10800044 	addi	r2,r2,1
811221b8:	44400115 	stw	r17,4(r8)
811221bc:	d8c01c15 	stw	r3,112(sp)
811221c0:	d8801b15 	stw	r2,108(sp)
811221c4:	010001c4 	movi	r4,7
811221c8:	2080760e 	bge	r4,r2,811223a4 <___vfiprintf_internal_r+0x30c>
811221cc:	1803821e 	bne	r3,zero,81122fd8 <___vfiprintf_internal_r+0xf40>
811221d0:	da802317 	ldw	r10,140(sp)
811221d4:	d8001b15 	stw	zero,108(sp)
811221d8:	d811883a 	mov	r8,sp
811221dc:	5455883a 	add	r10,r10,r17
811221e0:	da802315 	stw	r10,140(sp)
811221e4:	90800007 	ldb	r2,0(r18)
811221e8:	10044626 	beq	r2,zero,81123304 <___vfiprintf_internal_r+0x126c>
811221ec:	90c00047 	ldb	r3,1(r18)
811221f0:	94000044 	addi	r16,r18,1
811221f4:	d8001d85 	stb	zero,118(sp)
811221f8:	0009883a 	mov	r4,zero
811221fc:	000f883a 	mov	r7,zero
81122200:	027fffc4 	movi	r9,-1
81122204:	0023883a 	mov	r17,zero
81122208:	0029883a 	mov	r20,zero
8112220c:	01401604 	movi	r5,88
81122210:	01800244 	movi	r6,9
81122214:	03400a84 	movi	r13,42
81122218:	03001b04 	movi	r12,108
8112221c:	84000044 	addi	r16,r16,1
81122220:	18bff804 	addi	r2,r3,-32
81122224:	28827336 	bltu	r5,r2,81122bf4 <___vfiprintf_internal_r+0xb5c>
81122228:	100490ba 	slli	r2,r2,2
8112222c:	02a044b4 	movhi	r10,33042
81122230:	52889004 	addi	r10,r10,8768
81122234:	1285883a 	add	r2,r2,r10
81122238:	10800017 	ldw	r2,0(r2)
8112223c:	1000683a 	jmp	r2
81122240:	81122928 	cmpgeui	r4,r16,18596
81122244:	81122bf4 	orhi	r4,r16,18607
81122248:	81122bf4 	orhi	r4,r16,18607
8112224c:	81122948 	cmpgei	r4,r16,18597
81122250:	81122bf4 	orhi	r4,r16,18607
81122254:	81122bf4 	orhi	r4,r16,18607
81122258:	81122bf4 	orhi	r4,r16,18607
8112225c:	81122bf4 	orhi	r4,r16,18607
81122260:	81122bf4 	orhi	r4,r16,18607
81122264:	81122bf4 	orhi	r4,r16,18607
81122268:	81122b30 	cmpltui	r4,r16,18604
8112226c:	81122b4c 	andi	r4,r16,18605
81122270:	81122bf4 	orhi	r4,r16,18607
81122274:	81122434 	orhi	r4,r16,18576
81122278:	81122b5c 	xori	r4,r16,18605
8112227c:	81122bf4 	orhi	r4,r16,18607
81122280:	81122954 	ori	r4,r16,18597
81122284:	81122960 	cmpeqi	r4,r16,18597
81122288:	81122960 	cmpeqi	r4,r16,18597
8112228c:	81122960 	cmpeqi	r4,r16,18597
81122290:	81122960 	cmpeqi	r4,r16,18597
81122294:	81122960 	cmpeqi	r4,r16,18597
81122298:	81122960 	cmpeqi	r4,r16,18597
8112229c:	81122960 	cmpeqi	r4,r16,18597
811222a0:	81122960 	cmpeqi	r4,r16,18597
811222a4:	81122960 	cmpeqi	r4,r16,18597
811222a8:	81122bf4 	orhi	r4,r16,18607
811222ac:	81122bf4 	orhi	r4,r16,18607
811222b0:	81122bf4 	orhi	r4,r16,18607
811222b4:	81122bf4 	orhi	r4,r16,18607
811222b8:	81122bf4 	orhi	r4,r16,18607
811222bc:	81122bf4 	orhi	r4,r16,18607
811222c0:	81122bf4 	orhi	r4,r16,18607
811222c4:	81122bf4 	orhi	r4,r16,18607
811222c8:	81122bf4 	orhi	r4,r16,18607
811222cc:	81122bf4 	orhi	r4,r16,18607
811222d0:	8112298c 	andi	r4,r16,18598
811222d4:	81122bf4 	orhi	r4,r16,18607
811222d8:	81122bf4 	orhi	r4,r16,18607
811222dc:	81122bf4 	orhi	r4,r16,18607
811222e0:	81122bf4 	orhi	r4,r16,18607
811222e4:	81122bf4 	orhi	r4,r16,18607
811222e8:	81122bf4 	orhi	r4,r16,18607
811222ec:	81122bf4 	orhi	r4,r16,18607
811222f0:	81122bf4 	orhi	r4,r16,18607
811222f4:	81122bf4 	orhi	r4,r16,18607
811222f8:	81122bf4 	orhi	r4,r16,18607
811222fc:	811229c4 	addi	r4,r16,18599
81122300:	81122bf4 	orhi	r4,r16,18607
81122304:	81122bf4 	orhi	r4,r16,18607
81122308:	81122bf4 	orhi	r4,r16,18607
8112230c:	81122bf4 	orhi	r4,r16,18607
81122310:	81122bf4 	orhi	r4,r16,18607
81122314:	81122a1c 	xori	r4,r16,18600
81122318:	81122bf4 	orhi	r4,r16,18607
8112231c:	81122bf4 	orhi	r4,r16,18607
81122320:	81122a8c 	andi	r4,r16,18602
81122324:	81122bf4 	orhi	r4,r16,18607
81122328:	81122bf4 	orhi	r4,r16,18607
8112232c:	81122bf4 	orhi	r4,r16,18607
81122330:	81122bf4 	orhi	r4,r16,18607
81122334:	81122bf4 	orhi	r4,r16,18607
81122338:	81122bf4 	orhi	r4,r16,18607
8112233c:	81122bf4 	orhi	r4,r16,18607
81122340:	81122bf4 	orhi	r4,r16,18607
81122344:	81122bf4 	orhi	r4,r16,18607
81122348:	81122bf4 	orhi	r4,r16,18607
8112234c:	81122838 	rdprs	r4,r16,18592
81122350:	81122864 	muli	r4,r16,18593
81122354:	81122bf4 	orhi	r4,r16,18607
81122358:	81122bf4 	orhi	r4,r16,18607
8112235c:	81122bf4 	orhi	r4,r16,18607
81122360:	81122b9c 	xori	r4,r16,18606
81122364:	81122864 	muli	r4,r16,18593
81122368:	81122bf4 	orhi	r4,r16,18607
8112236c:	81122bf4 	orhi	r4,r16,18607
81122370:	811226f8 	rdprs	r4,r16,18587
81122374:	81122bf4 	orhi	r4,r16,18607
81122378:	81122708 	cmpgei	r4,r16,18588
8112237c:	81122744 	addi	r4,r16,18589
81122380:	81122440 	call	88112244 <__reset+0x20f2244>
81122384:	811226ec 	andhi	r4,r16,18587
81122388:	81122bf4 	orhi	r4,r16,18607
8112238c:	81122ac8 	cmpgei	r4,r16,18603
81122390:	81122bf4 	orhi	r4,r16,18607
81122394:	81122b20 	cmpeqi	r4,r16,18604
81122398:	81122bf4 	orhi	r4,r16,18607
8112239c:	81122bf4 	orhi	r4,r16,18607
811223a0:	811227e4 	muli	r4,r16,18591
811223a4:	42000204 	addi	r8,r8,8
811223a8:	da802317 	ldw	r10,140(sp)
811223ac:	5455883a 	add	r10,r10,r17
811223b0:	da802315 	stw	r10,140(sp)
811223b4:	003f8b06 	br	811221e4 <__reset+0xfb1021e4>
811223b8:	d9002017 	ldw	r4,128(sp)
811223bc:	a00b883a 	mov	r5,r20
811223c0:	1119bdc0 	call	81119bdc <__swsetup_r>
811223c4:	1003b11e 	bne	r2,zero,8112328c <___vfiprintf_internal_r+0x11f4>
811223c8:	a080030b 	ldhu	r2,12(r20)
811223cc:	00c00284 	movi	r3,10
811223d0:	1080068c 	andi	r2,r2,26
811223d4:	10ff541e 	bne	r2,r3,81122128 <__reset+0xfb102128>
811223d8:	a080038f 	ldh	r2,14(r20)
811223dc:	103f5216 	blt	r2,zero,81122128 <__reset+0xfb102128>
811223e0:	d9c02217 	ldw	r7,136(sp)
811223e4:	d9002017 	ldw	r4,128(sp)
811223e8:	e00d883a 	mov	r6,fp
811223ec:	a00b883a 	mov	r5,r20
811223f0:	11235180 	call	81123518 <__sbprintf>
811223f4:	dfc03617 	ldw	ra,216(sp)
811223f8:	df003517 	ldw	fp,212(sp)
811223fc:	ddc03417 	ldw	r23,208(sp)
81122400:	dd803317 	ldw	r22,204(sp)
81122404:	dd403217 	ldw	r21,200(sp)
81122408:	dd003117 	ldw	r20,196(sp)
8112240c:	dcc03017 	ldw	r19,192(sp)
81122410:	dc802f17 	ldw	r18,188(sp)
81122414:	dc402e17 	ldw	r17,184(sp)
81122418:	dc002d17 	ldw	r16,180(sp)
8112241c:	dec03704 	addi	sp,sp,220
81122420:	f800283a 	ret
81122424:	111bc4c0 	call	8111bc4c <__sinit>
81122428:	003f2f06 	br	811220e8 <__reset+0xfb1020e8>
8112242c:	0463c83a 	sub	r17,zero,r17
81122430:	d8802215 	stw	r2,136(sp)
81122434:	a5000114 	ori	r20,r20,4
81122438:	80c00007 	ldb	r3,0(r16)
8112243c:	003f7706 	br	8112221c <__reset+0xfb10221c>
81122440:	00800c04 	movi	r2,48
81122444:	da802217 	ldw	r10,136(sp)
81122448:	d8801d05 	stb	r2,116(sp)
8112244c:	00801e04 	movi	r2,120
81122450:	d8801d45 	stb	r2,117(sp)
81122454:	d8001d85 	stb	zero,118(sp)
81122458:	50c00104 	addi	r3,r10,4
8112245c:	54800017 	ldw	r18,0(r10)
81122460:	0027883a 	mov	r19,zero
81122464:	a0800094 	ori	r2,r20,2
81122468:	48030b16 	blt	r9,zero,81123098 <___vfiprintf_internal_r+0x1000>
8112246c:	00bfdfc4 	movi	r2,-129
81122470:	a096703a 	and	r11,r20,r2
81122474:	d8c02215 	stw	r3,136(sp)
81122478:	5d000094 	ori	r20,r11,2
8112247c:	90032b1e 	bne	r18,zero,8112312c <___vfiprintf_internal_r+0x1094>
81122480:	00a04534 	movhi	r2,33044
81122484:	10bf7804 	addi	r2,r2,-544
81122488:	d8802615 	stw	r2,152(sp)
8112248c:	0039883a 	mov	fp,zero
81122490:	48017b1e 	bne	r9,zero,81122a80 <___vfiprintf_internal_r+0x9e8>
81122494:	0013883a 	mov	r9,zero
81122498:	0027883a 	mov	r19,zero
8112249c:	dd401a04 	addi	r21,sp,104
811224a0:	4825883a 	mov	r18,r9
811224a4:	4cc0010e 	bge	r9,r19,811224ac <___vfiprintf_internal_r+0x414>
811224a8:	9825883a 	mov	r18,r19
811224ac:	e7003fcc 	andi	fp,fp,255
811224b0:	e700201c 	xori	fp,fp,128
811224b4:	e73fe004 	addi	fp,fp,-128
811224b8:	e0000126 	beq	fp,zero,811224c0 <___vfiprintf_internal_r+0x428>
811224bc:	94800044 	addi	r18,r18,1
811224c0:	a380008c 	andi	r14,r20,2
811224c4:	70000126 	beq	r14,zero,811224cc <___vfiprintf_internal_r+0x434>
811224c8:	94800084 	addi	r18,r18,2
811224cc:	a700210c 	andi	fp,r20,132
811224d0:	e001df1e 	bne	fp,zero,81122c50 <___vfiprintf_internal_r+0xbb8>
811224d4:	8c87c83a 	sub	r3,r17,r18
811224d8:	00c1dd0e 	bge	zero,r3,81122c50 <___vfiprintf_internal_r+0xbb8>
811224dc:	01c00404 	movi	r7,16
811224e0:	d8801c17 	ldw	r2,112(sp)
811224e4:	38c3ad0e 	bge	r7,r3,8112339c <___vfiprintf_internal_r+0x1304>
811224e8:	02a04534 	movhi	r10,33044
811224ec:	52800e04 	addi	r10,r10,56
811224f0:	dc002915 	stw	r16,164(sp)
811224f4:	d9801b17 	ldw	r6,108(sp)
811224f8:	da802415 	stw	r10,144(sp)
811224fc:	03c001c4 	movi	r15,7
81122500:	da402515 	stw	r9,148(sp)
81122504:	db802815 	stw	r14,160(sp)
81122508:	1821883a 	mov	r16,r3
8112250c:	00000506 	br	81122524 <___vfiprintf_internal_r+0x48c>
81122510:	31400084 	addi	r5,r6,2
81122514:	42000204 	addi	r8,r8,8
81122518:	200d883a 	mov	r6,r4
8112251c:	843ffc04 	addi	r16,r16,-16
81122520:	3c000d0e 	bge	r7,r16,81122558 <___vfiprintf_internal_r+0x4c0>
81122524:	10800404 	addi	r2,r2,16
81122528:	31000044 	addi	r4,r6,1
8112252c:	45800015 	stw	r22,0(r8)
81122530:	41c00115 	stw	r7,4(r8)
81122534:	d8801c15 	stw	r2,112(sp)
81122538:	d9001b15 	stw	r4,108(sp)
8112253c:	793ff40e 	bge	r15,r4,81122510 <__reset+0xfb102510>
81122540:	1001b51e 	bne	r2,zero,81122c18 <___vfiprintf_internal_r+0xb80>
81122544:	843ffc04 	addi	r16,r16,-16
81122548:	000d883a 	mov	r6,zero
8112254c:	01400044 	movi	r5,1
81122550:	d811883a 	mov	r8,sp
81122554:	3c3ff316 	blt	r7,r16,81122524 <__reset+0xfb102524>
81122558:	8007883a 	mov	r3,r16
8112255c:	da402517 	ldw	r9,148(sp)
81122560:	db802817 	ldw	r14,160(sp)
81122564:	dc002917 	ldw	r16,164(sp)
81122568:	da802417 	ldw	r10,144(sp)
8112256c:	1885883a 	add	r2,r3,r2
81122570:	40c00115 	stw	r3,4(r8)
81122574:	42800015 	stw	r10,0(r8)
81122578:	d8801c15 	stw	r2,112(sp)
8112257c:	d9401b15 	stw	r5,108(sp)
81122580:	00c001c4 	movi	r3,7
81122584:	19426016 	blt	r3,r5,81122f08 <___vfiprintf_internal_r+0xe70>
81122588:	d8c01d87 	ldb	r3,118(sp)
8112258c:	42000204 	addi	r8,r8,8
81122590:	29000044 	addi	r4,r5,1
81122594:	1801b31e 	bne	r3,zero,81122c64 <___vfiprintf_internal_r+0xbcc>
81122598:	7001c026 	beq	r14,zero,81122c9c <___vfiprintf_internal_r+0xc04>
8112259c:	d8c01d04 	addi	r3,sp,116
811225a0:	10800084 	addi	r2,r2,2
811225a4:	40c00015 	stw	r3,0(r8)
811225a8:	00c00084 	movi	r3,2
811225ac:	40c00115 	stw	r3,4(r8)
811225b0:	d8801c15 	stw	r2,112(sp)
811225b4:	d9001b15 	stw	r4,108(sp)
811225b8:	00c001c4 	movi	r3,7
811225bc:	1902650e 	bge	r3,r4,81122f54 <___vfiprintf_internal_r+0xebc>
811225c0:	10029a1e 	bne	r2,zero,8112302c <___vfiprintf_internal_r+0xf94>
811225c4:	00c02004 	movi	r3,128
811225c8:	01000044 	movi	r4,1
811225cc:	000b883a 	mov	r5,zero
811225d0:	d811883a 	mov	r8,sp
811225d4:	e0c1b31e 	bne	fp,r3,81122ca4 <___vfiprintf_internal_r+0xc0c>
811225d8:	8cb9c83a 	sub	fp,r17,r18
811225dc:	0701b10e 	bge	zero,fp,81122ca4 <___vfiprintf_internal_r+0xc0c>
811225e0:	01c00404 	movi	r7,16
811225e4:	3f03890e 	bge	r7,fp,8112340c <___vfiprintf_internal_r+0x1374>
811225e8:	00e04534 	movhi	r3,33044
811225ec:	18c00a04 	addi	r3,r3,40
811225f0:	d8c02415 	stw	r3,144(sp)
811225f4:	8007883a 	mov	r3,r16
811225f8:	034001c4 	movi	r13,7
811225fc:	e021883a 	mov	r16,fp
81122600:	da402515 	stw	r9,148(sp)
81122604:	1839883a 	mov	fp,r3
81122608:	00000506 	br	81122620 <___vfiprintf_internal_r+0x588>
8112260c:	29800084 	addi	r6,r5,2
81122610:	42000204 	addi	r8,r8,8
81122614:	180b883a 	mov	r5,r3
81122618:	843ffc04 	addi	r16,r16,-16
8112261c:	3c000d0e 	bge	r7,r16,81122654 <___vfiprintf_internal_r+0x5bc>
81122620:	10800404 	addi	r2,r2,16
81122624:	28c00044 	addi	r3,r5,1
81122628:	45c00015 	stw	r23,0(r8)
8112262c:	41c00115 	stw	r7,4(r8)
81122630:	d8801c15 	stw	r2,112(sp)
81122634:	d8c01b15 	stw	r3,108(sp)
81122638:	68fff40e 	bge	r13,r3,8112260c <__reset+0xfb10260c>
8112263c:	1002241e 	bne	r2,zero,81122ed0 <___vfiprintf_internal_r+0xe38>
81122640:	843ffc04 	addi	r16,r16,-16
81122644:	01800044 	movi	r6,1
81122648:	000b883a 	mov	r5,zero
8112264c:	d811883a 	mov	r8,sp
81122650:	3c3ff316 	blt	r7,r16,81122620 <__reset+0xfb102620>
81122654:	da402517 	ldw	r9,148(sp)
81122658:	e007883a 	mov	r3,fp
8112265c:	8039883a 	mov	fp,r16
81122660:	1821883a 	mov	r16,r3
81122664:	d8c02417 	ldw	r3,144(sp)
81122668:	1705883a 	add	r2,r2,fp
8112266c:	47000115 	stw	fp,4(r8)
81122670:	40c00015 	stw	r3,0(r8)
81122674:	d8801c15 	stw	r2,112(sp)
81122678:	d9801b15 	stw	r6,108(sp)
8112267c:	00c001c4 	movi	r3,7
81122680:	19827616 	blt	r3,r6,8112305c <___vfiprintf_internal_r+0xfc4>
81122684:	4cf9c83a 	sub	fp,r9,r19
81122688:	42000204 	addi	r8,r8,8
8112268c:	31000044 	addi	r4,r6,1
81122690:	300b883a 	mov	r5,r6
81122694:	07018516 	blt	zero,fp,81122cac <___vfiprintf_internal_r+0xc14>
81122698:	9885883a 	add	r2,r19,r2
8112269c:	45400015 	stw	r21,0(r8)
811226a0:	44c00115 	stw	r19,4(r8)
811226a4:	d8801c15 	stw	r2,112(sp)
811226a8:	d9001b15 	stw	r4,108(sp)
811226ac:	00c001c4 	movi	r3,7
811226b0:	1901dd0e 	bge	r3,r4,81122e28 <___vfiprintf_internal_r+0xd90>
811226b4:	1002401e 	bne	r2,zero,81122fb8 <___vfiprintf_internal_r+0xf20>
811226b8:	d8001b15 	stw	zero,108(sp)
811226bc:	a2c0010c 	andi	r11,r20,4
811226c0:	58000226 	beq	r11,zero,811226cc <___vfiprintf_internal_r+0x634>
811226c4:	8ca7c83a 	sub	r19,r17,r18
811226c8:	04c2f216 	blt	zero,r19,81123294 <___vfiprintf_internal_r+0x11fc>
811226cc:	8c80010e 	bge	r17,r18,811226d4 <___vfiprintf_internal_r+0x63c>
811226d0:	9023883a 	mov	r17,r18
811226d4:	da802317 	ldw	r10,140(sp)
811226d8:	5455883a 	add	r10,r10,r17
811226dc:	da802315 	stw	r10,140(sp)
811226e0:	d8001b15 	stw	zero,108(sp)
811226e4:	d811883a 	mov	r8,sp
811226e8:	003ea206 	br	81122174 <__reset+0xfb102174>
811226ec:	a5000814 	ori	r20,r20,32
811226f0:	80c00007 	ldb	r3,0(r16)
811226f4:	003ec906 	br	8112221c <__reset+0xfb10221c>
811226f8:	80c00007 	ldb	r3,0(r16)
811226fc:	1b030926 	beq	r3,r12,81123324 <___vfiprintf_internal_r+0x128c>
81122700:	a5000414 	ori	r20,r20,16
81122704:	003ec506 	br	8112221c <__reset+0xfb10221c>
81122708:	21003fcc 	andi	r4,r4,255
8112270c:	20035e1e 	bne	r4,zero,81123488 <___vfiprintf_internal_r+0x13f0>
81122710:	a080080c 	andi	r2,r20,32
81122714:	1002a526 	beq	r2,zero,811231ac <___vfiprintf_internal_r+0x1114>
81122718:	da802217 	ldw	r10,136(sp)
8112271c:	50800017 	ldw	r2,0(r10)
81122720:	da802317 	ldw	r10,140(sp)
81122724:	5007d7fa 	srai	r3,r10,31
81122728:	da802217 	ldw	r10,136(sp)
8112272c:	10c00115 	stw	r3,4(r2)
81122730:	52800104 	addi	r10,r10,4
81122734:	da802215 	stw	r10,136(sp)
81122738:	da802317 	ldw	r10,140(sp)
8112273c:	12800015 	stw	r10,0(r2)
81122740:	003e8c06 	br	81122174 <__reset+0xfb102174>
81122744:	21003fcc 	andi	r4,r4,255
81122748:	2003511e 	bne	r4,zero,81123490 <___vfiprintf_internal_r+0x13f8>
8112274c:	a080080c 	andi	r2,r20,32
81122750:	1000a126 	beq	r2,zero,811229d8 <___vfiprintf_internal_r+0x940>
81122754:	da802217 	ldw	r10,136(sp)
81122758:	d8001d85 	stb	zero,118(sp)
8112275c:	50800204 	addi	r2,r10,8
81122760:	54800017 	ldw	r18,0(r10)
81122764:	54c00117 	ldw	r19,4(r10)
81122768:	4802b416 	blt	r9,zero,8112323c <___vfiprintf_internal_r+0x11a4>
8112276c:	013fdfc4 	movi	r4,-129
81122770:	94c6b03a 	or	r3,r18,r19
81122774:	d8802215 	stw	r2,136(sp)
81122778:	a128703a 	and	r20,r20,r4
8112277c:	1800a226 	beq	r3,zero,81122a08 <___vfiprintf_internal_r+0x970>
81122780:	0039883a 	mov	fp,zero
81122784:	dd401a04 	addi	r21,sp,104
81122788:	9006d0fa 	srli	r3,r18,3
8112278c:	9808977a 	slli	r4,r19,29
81122790:	9826d0fa 	srli	r19,r19,3
81122794:	948001cc 	andi	r18,r18,7
81122798:	90800c04 	addi	r2,r18,48
8112279c:	ad7fffc4 	addi	r21,r21,-1
811227a0:	20e4b03a 	or	r18,r4,r3
811227a4:	a8800005 	stb	r2,0(r21)
811227a8:	94c6b03a 	or	r3,r18,r19
811227ac:	183ff61e 	bne	r3,zero,81122788 <__reset+0xfb102788>
811227b0:	a0c0004c 	andi	r3,r20,1
811227b4:	18005926 	beq	r3,zero,8112291c <___vfiprintf_internal_r+0x884>
811227b8:	10803fcc 	andi	r2,r2,255
811227bc:	1080201c 	xori	r2,r2,128
811227c0:	10bfe004 	addi	r2,r2,-128
811227c4:	00c00c04 	movi	r3,48
811227c8:	10c05426 	beq	r2,r3,8112291c <___vfiprintf_internal_r+0x884>
811227cc:	da801e17 	ldw	r10,120(sp)
811227d0:	a8bfffc4 	addi	r2,r21,-1
811227d4:	a8ffffc5 	stb	r3,-1(r21)
811227d8:	50a7c83a 	sub	r19,r10,r2
811227dc:	102b883a 	mov	r21,r2
811227e0:	003f2f06 	br	811224a0 <__reset+0xfb1024a0>
811227e4:	21003fcc 	andi	r4,r4,255
811227e8:	2003421e 	bne	r4,zero,811234f4 <___vfiprintf_internal_r+0x145c>
811227ec:	00a04534 	movhi	r2,33044
811227f0:	10bf7804 	addi	r2,r2,-544
811227f4:	d8802615 	stw	r2,152(sp)
811227f8:	a080080c 	andi	r2,r20,32
811227fc:	1000aa26 	beq	r2,zero,81122aa8 <___vfiprintf_internal_r+0xa10>
81122800:	da802217 	ldw	r10,136(sp)
81122804:	54800017 	ldw	r18,0(r10)
81122808:	54c00117 	ldw	r19,4(r10)
8112280c:	52800204 	addi	r10,r10,8
81122810:	da802215 	stw	r10,136(sp)
81122814:	a080004c 	andi	r2,r20,1
81122818:	1001d226 	beq	r2,zero,81122f64 <___vfiprintf_internal_r+0xecc>
8112281c:	94c4b03a 	or	r2,r18,r19
81122820:	1002351e 	bne	r2,zero,811230f8 <___vfiprintf_internal_r+0x1060>
81122824:	d8001d85 	stb	zero,118(sp)
81122828:	48022216 	blt	r9,zero,811230b4 <___vfiprintf_internal_r+0x101c>
8112282c:	00bfdfc4 	movi	r2,-129
81122830:	a0a8703a 	and	r20,r20,r2
81122834:	003f1506 	br	8112248c <__reset+0xfb10248c>
81122838:	da802217 	ldw	r10,136(sp)
8112283c:	04800044 	movi	r18,1
81122840:	d8001d85 	stb	zero,118(sp)
81122844:	50800017 	ldw	r2,0(r10)
81122848:	52800104 	addi	r10,r10,4
8112284c:	da802215 	stw	r10,136(sp)
81122850:	d8801005 	stb	r2,64(sp)
81122854:	9027883a 	mov	r19,r18
81122858:	dd401004 	addi	r21,sp,64
8112285c:	0013883a 	mov	r9,zero
81122860:	003f1706 	br	811224c0 <__reset+0xfb1024c0>
81122864:	21003fcc 	andi	r4,r4,255
81122868:	2003201e 	bne	r4,zero,811234ec <___vfiprintf_internal_r+0x1454>
8112286c:	a080080c 	andi	r2,r20,32
81122870:	10004b26 	beq	r2,zero,811229a0 <___vfiprintf_internal_r+0x908>
81122874:	da802217 	ldw	r10,136(sp)
81122878:	50800117 	ldw	r2,4(r10)
8112287c:	54800017 	ldw	r18,0(r10)
81122880:	52800204 	addi	r10,r10,8
81122884:	da802215 	stw	r10,136(sp)
81122888:	1027883a 	mov	r19,r2
8112288c:	10022c16 	blt	r2,zero,81123140 <___vfiprintf_internal_r+0x10a8>
81122890:	df001d83 	ldbu	fp,118(sp)
81122894:	48007216 	blt	r9,zero,81122a60 <___vfiprintf_internal_r+0x9c8>
81122898:	00ffdfc4 	movi	r3,-129
8112289c:	94c4b03a 	or	r2,r18,r19
811228a0:	a0e8703a 	and	r20,r20,r3
811228a4:	1000cc26 	beq	r2,zero,81122bd8 <___vfiprintf_internal_r+0xb40>
811228a8:	98021026 	beq	r19,zero,811230ec <___vfiprintf_internal_r+0x1054>
811228ac:	dc402415 	stw	r17,144(sp)
811228b0:	dc002515 	stw	r16,148(sp)
811228b4:	9823883a 	mov	r17,r19
811228b8:	9021883a 	mov	r16,r18
811228bc:	dd401a04 	addi	r21,sp,104
811228c0:	4825883a 	mov	r18,r9
811228c4:	4027883a 	mov	r19,r8
811228c8:	8009883a 	mov	r4,r16
811228cc:	880b883a 	mov	r5,r17
811228d0:	01800284 	movi	r6,10
811228d4:	000f883a 	mov	r7,zero
811228d8:	1124e340 	call	81124e34 <__umoddi3>
811228dc:	10800c04 	addi	r2,r2,48
811228e0:	ad7fffc4 	addi	r21,r21,-1
811228e4:	8009883a 	mov	r4,r16
811228e8:	880b883a 	mov	r5,r17
811228ec:	a8800005 	stb	r2,0(r21)
811228f0:	01800284 	movi	r6,10
811228f4:	000f883a 	mov	r7,zero
811228f8:	11248b40 	call	811248b4 <__udivdi3>
811228fc:	1021883a 	mov	r16,r2
81122900:	10c4b03a 	or	r2,r2,r3
81122904:	1823883a 	mov	r17,r3
81122908:	103fef1e 	bne	r2,zero,811228c8 <__reset+0xfb1028c8>
8112290c:	dc402417 	ldw	r17,144(sp)
81122910:	dc002517 	ldw	r16,148(sp)
81122914:	9013883a 	mov	r9,r18
81122918:	9811883a 	mov	r8,r19
8112291c:	da801e17 	ldw	r10,120(sp)
81122920:	5567c83a 	sub	r19,r10,r21
81122924:	003ede06 	br	811224a0 <__reset+0xfb1024a0>
81122928:	38803fcc 	andi	r2,r7,255
8112292c:	1080201c 	xori	r2,r2,128
81122930:	10bfe004 	addi	r2,r2,-128
81122934:	1002371e 	bne	r2,zero,81123214 <___vfiprintf_internal_r+0x117c>
81122938:	01000044 	movi	r4,1
8112293c:	01c00804 	movi	r7,32
81122940:	80c00007 	ldb	r3,0(r16)
81122944:	003e3506 	br	8112221c <__reset+0xfb10221c>
81122948:	a5000054 	ori	r20,r20,1
8112294c:	80c00007 	ldb	r3,0(r16)
81122950:	003e3206 	br	8112221c <__reset+0xfb10221c>
81122954:	a5002014 	ori	r20,r20,128
81122958:	80c00007 	ldb	r3,0(r16)
8112295c:	003e2f06 	br	8112221c <__reset+0xfb10221c>
81122960:	8015883a 	mov	r10,r16
81122964:	0023883a 	mov	r17,zero
81122968:	18bff404 	addi	r2,r3,-48
8112296c:	50c00007 	ldb	r3,0(r10)
81122970:	8c4002a4 	muli	r17,r17,10
81122974:	84000044 	addi	r16,r16,1
81122978:	8015883a 	mov	r10,r16
8112297c:	1463883a 	add	r17,r2,r17
81122980:	18bff404 	addi	r2,r3,-48
81122984:	30bff92e 	bgeu	r6,r2,8112296c <__reset+0xfb10296c>
81122988:	003e2506 	br	81122220 <__reset+0xfb102220>
8112298c:	21003fcc 	andi	r4,r4,255
81122990:	2002d41e 	bne	r4,zero,811234e4 <___vfiprintf_internal_r+0x144c>
81122994:	a5000414 	ori	r20,r20,16
81122998:	a080080c 	andi	r2,r20,32
8112299c:	103fb51e 	bne	r2,zero,81122874 <__reset+0xfb102874>
811229a0:	a080040c 	andi	r2,r20,16
811229a4:	1001f826 	beq	r2,zero,81123188 <___vfiprintf_internal_r+0x10f0>
811229a8:	da802217 	ldw	r10,136(sp)
811229ac:	54800017 	ldw	r18,0(r10)
811229b0:	52800104 	addi	r10,r10,4
811229b4:	da802215 	stw	r10,136(sp)
811229b8:	9027d7fa 	srai	r19,r18,31
811229bc:	9805883a 	mov	r2,r19
811229c0:	003fb206 	br	8112288c <__reset+0xfb10288c>
811229c4:	21003fcc 	andi	r4,r4,255
811229c8:	2002c41e 	bne	r4,zero,811234dc <___vfiprintf_internal_r+0x1444>
811229cc:	a5000414 	ori	r20,r20,16
811229d0:	a080080c 	andi	r2,r20,32
811229d4:	103f5f1e 	bne	r2,zero,81122754 <__reset+0xfb102754>
811229d8:	a080040c 	andi	r2,r20,16
811229dc:	10020f26 	beq	r2,zero,8112321c <___vfiprintf_internal_r+0x1184>
811229e0:	da802217 	ldw	r10,136(sp)
811229e4:	d8001d85 	stb	zero,118(sp)
811229e8:	0027883a 	mov	r19,zero
811229ec:	50800104 	addi	r2,r10,4
811229f0:	54800017 	ldw	r18,0(r10)
811229f4:	48021116 	blt	r9,zero,8112323c <___vfiprintf_internal_r+0x11a4>
811229f8:	00ffdfc4 	movi	r3,-129
811229fc:	d8802215 	stw	r2,136(sp)
81122a00:	a0e8703a 	and	r20,r20,r3
81122a04:	903f5e1e 	bne	r18,zero,81122780 <__reset+0xfb102780>
81122a08:	0039883a 	mov	fp,zero
81122a0c:	4802a626 	beq	r9,zero,811234a8 <___vfiprintf_internal_r+0x1410>
81122a10:	0025883a 	mov	r18,zero
81122a14:	0027883a 	mov	r19,zero
81122a18:	003f5a06 	br	81122784 <__reset+0xfb102784>
81122a1c:	21003fcc 	andi	r4,r4,255
81122a20:	20029f1e 	bne	r4,zero,811234a0 <___vfiprintf_internal_r+0x1408>
81122a24:	a5000414 	ori	r20,r20,16
81122a28:	a080080c 	andi	r2,r20,32
81122a2c:	10005e1e 	bne	r2,zero,81122ba8 <___vfiprintf_internal_r+0xb10>
81122a30:	a080040c 	andi	r2,r20,16
81122a34:	1001a21e 	bne	r2,zero,811230c0 <___vfiprintf_internal_r+0x1028>
81122a38:	a080100c 	andi	r2,r20,64
81122a3c:	d8001d85 	stb	zero,118(sp)
81122a40:	da802217 	ldw	r10,136(sp)
81122a44:	1002231e 	bne	r2,zero,811232d4 <___vfiprintf_internal_r+0x123c>
81122a48:	50800104 	addi	r2,r10,4
81122a4c:	54800017 	ldw	r18,0(r10)
81122a50:	0027883a 	mov	r19,zero
81122a54:	4801a00e 	bge	r9,zero,811230d8 <___vfiprintf_internal_r+0x1040>
81122a58:	d8802215 	stw	r2,136(sp)
81122a5c:	0039883a 	mov	fp,zero
81122a60:	94c4b03a 	or	r2,r18,r19
81122a64:	103f901e 	bne	r2,zero,811228a8 <__reset+0xfb1028a8>
81122a68:	00800044 	movi	r2,1
81122a6c:	10803fcc 	andi	r2,r2,255
81122a70:	00c00044 	movi	r3,1
81122a74:	10c05926 	beq	r2,r3,81122bdc <___vfiprintf_internal_r+0xb44>
81122a78:	00c00084 	movi	r3,2
81122a7c:	10ffe41e 	bne	r2,r3,81122a10 <__reset+0xfb102a10>
81122a80:	0025883a 	mov	r18,zero
81122a84:	0027883a 	mov	r19,zero
81122a88:	00013d06 	br	81122f80 <___vfiprintf_internal_r+0xee8>
81122a8c:	21003fcc 	andi	r4,r4,255
81122a90:	2002811e 	bne	r4,zero,81123498 <___vfiprintf_internal_r+0x1400>
81122a94:	00a04534 	movhi	r2,33044
81122a98:	10bf7304 	addi	r2,r2,-564
81122a9c:	d8802615 	stw	r2,152(sp)
81122aa0:	a080080c 	andi	r2,r20,32
81122aa4:	103f561e 	bne	r2,zero,81122800 <__reset+0xfb102800>
81122aa8:	a080040c 	andi	r2,r20,16
81122aac:	1001d126 	beq	r2,zero,811231f4 <___vfiprintf_internal_r+0x115c>
81122ab0:	da802217 	ldw	r10,136(sp)
81122ab4:	0027883a 	mov	r19,zero
81122ab8:	54800017 	ldw	r18,0(r10)
81122abc:	52800104 	addi	r10,r10,4
81122ac0:	da802215 	stw	r10,136(sp)
81122ac4:	003f5306 	br	81122814 <__reset+0xfb102814>
81122ac8:	da802217 	ldw	r10,136(sp)
81122acc:	d8001d85 	stb	zero,118(sp)
81122ad0:	55400017 	ldw	r21,0(r10)
81122ad4:	50c00104 	addi	r3,r10,4
81122ad8:	a8024226 	beq	r21,zero,811233e4 <___vfiprintf_internal_r+0x134c>
81122adc:	48021816 	blt	r9,zero,81123340 <___vfiprintf_internal_r+0x12a8>
81122ae0:	480d883a 	mov	r6,r9
81122ae4:	000b883a 	mov	r5,zero
81122ae8:	a809883a 	mov	r4,r21
81122aec:	d8c02a15 	stw	r3,168(sp)
81122af0:	da002b15 	stw	r8,172(sp)
81122af4:	da402c15 	stw	r9,176(sp)
81122af8:	111ce740 	call	8111ce74 <memchr>
81122afc:	d8c02a17 	ldw	r3,168(sp)
81122b00:	da002b17 	ldw	r8,172(sp)
81122b04:	da402c17 	ldw	r9,176(sp)
81122b08:	10024826 	beq	r2,zero,8112342c <___vfiprintf_internal_r+0x1394>
81122b0c:	1567c83a 	sub	r19,r2,r21
81122b10:	df001d83 	ldbu	fp,118(sp)
81122b14:	d8c02215 	stw	r3,136(sp)
81122b18:	0013883a 	mov	r9,zero
81122b1c:	003e6006 	br	811224a0 <__reset+0xfb1024a0>
81122b20:	21003fcc 	andi	r4,r4,255
81122b24:	203fc026 	beq	r4,zero,81122a28 <__reset+0xfb102a28>
81122b28:	d9c01d85 	stb	r7,118(sp)
81122b2c:	003fbe06 	br	81122a28 <__reset+0xfb102a28>
81122b30:	da802217 	ldw	r10,136(sp)
81122b34:	54400017 	ldw	r17,0(r10)
81122b38:	50800104 	addi	r2,r10,4
81122b3c:	883e3b16 	blt	r17,zero,8112242c <__reset+0xfb10242c>
81122b40:	d8802215 	stw	r2,136(sp)
81122b44:	80c00007 	ldb	r3,0(r16)
81122b48:	003db406 	br	8112221c <__reset+0xfb10221c>
81122b4c:	01000044 	movi	r4,1
81122b50:	01c00ac4 	movi	r7,43
81122b54:	80c00007 	ldb	r3,0(r16)
81122b58:	003db006 	br	8112221c <__reset+0xfb10221c>
81122b5c:	80c00007 	ldb	r3,0(r16)
81122b60:	82800044 	addi	r10,r16,1
81122b64:	1b423c26 	beq	r3,r13,81123458 <___vfiprintf_internal_r+0x13c0>
81122b68:	18bff404 	addi	r2,r3,-48
81122b6c:	0013883a 	mov	r9,zero
81122b70:	30822b36 	bltu	r6,r2,81123420 <___vfiprintf_internal_r+0x1388>
81122b74:	50c00007 	ldb	r3,0(r10)
81122b78:	4a4002a4 	muli	r9,r9,10
81122b7c:	54000044 	addi	r16,r10,1
81122b80:	8015883a 	mov	r10,r16
81122b84:	4893883a 	add	r9,r9,r2
81122b88:	18bff404 	addi	r2,r3,-48
81122b8c:	30bff92e 	bgeu	r6,r2,81122b74 <__reset+0xfb102b74>
81122b90:	483da30e 	bge	r9,zero,81122220 <__reset+0xfb102220>
81122b94:	027fffc4 	movi	r9,-1
81122b98:	003da106 	br	81122220 <__reset+0xfb102220>
81122b9c:	a5001014 	ori	r20,r20,64
81122ba0:	80c00007 	ldb	r3,0(r16)
81122ba4:	003d9d06 	br	8112221c <__reset+0xfb10221c>
81122ba8:	da802217 	ldw	r10,136(sp)
81122bac:	d8001d85 	stb	zero,118(sp)
81122bb0:	50c00204 	addi	r3,r10,8
81122bb4:	54800017 	ldw	r18,0(r10)
81122bb8:	54c00117 	ldw	r19,4(r10)
81122bbc:	4801ca16 	blt	r9,zero,811232e8 <___vfiprintf_internal_r+0x1250>
81122bc0:	013fdfc4 	movi	r4,-129
81122bc4:	94c4b03a 	or	r2,r18,r19
81122bc8:	d8c02215 	stw	r3,136(sp)
81122bcc:	a128703a 	and	r20,r20,r4
81122bd0:	0039883a 	mov	fp,zero
81122bd4:	103f341e 	bne	r2,zero,811228a8 <__reset+0xfb1028a8>
81122bd8:	483e2e26 	beq	r9,zero,81122494 <__reset+0xfb102494>
81122bdc:	0025883a 	mov	r18,zero
81122be0:	94800c04 	addi	r18,r18,48
81122be4:	dc8019c5 	stb	r18,103(sp)
81122be8:	dcc02717 	ldw	r19,156(sp)
81122bec:	dd4019c4 	addi	r21,sp,103
81122bf0:	003e2b06 	br	811224a0 <__reset+0xfb1024a0>
81122bf4:	21003fcc 	andi	r4,r4,255
81122bf8:	2002361e 	bne	r4,zero,811234d4 <___vfiprintf_internal_r+0x143c>
81122bfc:	1801c126 	beq	r3,zero,81123304 <___vfiprintf_internal_r+0x126c>
81122c00:	04800044 	movi	r18,1
81122c04:	d8c01005 	stb	r3,64(sp)
81122c08:	d8001d85 	stb	zero,118(sp)
81122c0c:	9027883a 	mov	r19,r18
81122c10:	dd401004 	addi	r21,sp,64
81122c14:	003f1106 	br	8112285c <__reset+0xfb10285c>
81122c18:	d9402117 	ldw	r5,132(sp)
81122c1c:	d9002017 	ldw	r4,128(sp)
81122c20:	d9801a04 	addi	r6,sp,104
81122c24:	d9c02b15 	stw	r7,172(sp)
81122c28:	dbc02a15 	stw	r15,168(sp)
81122c2c:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81122c30:	d9c02b17 	ldw	r7,172(sp)
81122c34:	dbc02a17 	ldw	r15,168(sp)
81122c38:	10006d1e 	bne	r2,zero,81122df0 <___vfiprintf_internal_r+0xd58>
81122c3c:	d9801b17 	ldw	r6,108(sp)
81122c40:	d8801c17 	ldw	r2,112(sp)
81122c44:	d811883a 	mov	r8,sp
81122c48:	31400044 	addi	r5,r6,1
81122c4c:	003e3306 	br	8112251c <__reset+0xfb10251c>
81122c50:	d9401b17 	ldw	r5,108(sp)
81122c54:	d8801c17 	ldw	r2,112(sp)
81122c58:	29000044 	addi	r4,r5,1
81122c5c:	d8c01d87 	ldb	r3,118(sp)
81122c60:	183e4d26 	beq	r3,zero,81122598 <__reset+0xfb102598>
81122c64:	00c00044 	movi	r3,1
81122c68:	d9401d84 	addi	r5,sp,118
81122c6c:	10c5883a 	add	r2,r2,r3
81122c70:	41400015 	stw	r5,0(r8)
81122c74:	40c00115 	stw	r3,4(r8)
81122c78:	d8801c15 	stw	r2,112(sp)
81122c7c:	d9001b15 	stw	r4,108(sp)
81122c80:	014001c4 	movi	r5,7
81122c84:	2900a90e 	bge	r5,r4,81122f2c <___vfiprintf_internal_r+0xe94>
81122c88:	1000da1e 	bne	r2,zero,81122ff4 <___vfiprintf_internal_r+0xf5c>
81122c8c:	7000ab1e 	bne	r14,zero,81122f3c <___vfiprintf_internal_r+0xea4>
81122c90:	000b883a 	mov	r5,zero
81122c94:	1809883a 	mov	r4,r3
81122c98:	d811883a 	mov	r8,sp
81122c9c:	00c02004 	movi	r3,128
81122ca0:	e0fe4d26 	beq	fp,r3,811225d8 <__reset+0xfb1025d8>
81122ca4:	4cf9c83a 	sub	fp,r9,r19
81122ca8:	073e7b0e 	bge	zero,fp,81122698 <__reset+0xfb102698>
81122cac:	01c00404 	movi	r7,16
81122cb0:	3f01900e 	bge	r7,fp,811232f4 <___vfiprintf_internal_r+0x125c>
81122cb4:	00e04534 	movhi	r3,33044
81122cb8:	18c00a04 	addi	r3,r3,40
81122cbc:	d8c02415 	stw	r3,144(sp)
81122cc0:	034001c4 	movi	r13,7
81122cc4:	00000506 	br	81122cdc <___vfiprintf_internal_r+0xc44>
81122cc8:	29000084 	addi	r4,r5,2
81122ccc:	42000204 	addi	r8,r8,8
81122cd0:	180b883a 	mov	r5,r3
81122cd4:	e73ffc04 	addi	fp,fp,-16
81122cd8:	3f000d0e 	bge	r7,fp,81122d10 <___vfiprintf_internal_r+0xc78>
81122cdc:	10800404 	addi	r2,r2,16
81122ce0:	28c00044 	addi	r3,r5,1
81122ce4:	45c00015 	stw	r23,0(r8)
81122ce8:	41c00115 	stw	r7,4(r8)
81122cec:	d8801c15 	stw	r2,112(sp)
81122cf0:	d8c01b15 	stw	r3,108(sp)
81122cf4:	68fff40e 	bge	r13,r3,81122cc8 <__reset+0xfb102cc8>
81122cf8:	1000101e 	bne	r2,zero,81122d3c <___vfiprintf_internal_r+0xca4>
81122cfc:	e73ffc04 	addi	fp,fp,-16
81122d00:	01000044 	movi	r4,1
81122d04:	000b883a 	mov	r5,zero
81122d08:	d811883a 	mov	r8,sp
81122d0c:	3f3ff316 	blt	r7,fp,81122cdc <__reset+0xfb102cdc>
81122d10:	da802417 	ldw	r10,144(sp)
81122d14:	1705883a 	add	r2,r2,fp
81122d18:	47000115 	stw	fp,4(r8)
81122d1c:	42800015 	stw	r10,0(r8)
81122d20:	d8801c15 	stw	r2,112(sp)
81122d24:	d9001b15 	stw	r4,108(sp)
81122d28:	00c001c4 	movi	r3,7
81122d2c:	19003616 	blt	r3,r4,81122e08 <___vfiprintf_internal_r+0xd70>
81122d30:	42000204 	addi	r8,r8,8
81122d34:	21000044 	addi	r4,r4,1
81122d38:	003e5706 	br	81122698 <__reset+0xfb102698>
81122d3c:	d9402117 	ldw	r5,132(sp)
81122d40:	d9002017 	ldw	r4,128(sp)
81122d44:	d9801a04 	addi	r6,sp,104
81122d48:	d9c02b15 	stw	r7,172(sp)
81122d4c:	db402a15 	stw	r13,168(sp)
81122d50:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81122d54:	d9c02b17 	ldw	r7,172(sp)
81122d58:	db402a17 	ldw	r13,168(sp)
81122d5c:	1000241e 	bne	r2,zero,81122df0 <___vfiprintf_internal_r+0xd58>
81122d60:	d9401b17 	ldw	r5,108(sp)
81122d64:	d8801c17 	ldw	r2,112(sp)
81122d68:	d811883a 	mov	r8,sp
81122d6c:	29000044 	addi	r4,r5,1
81122d70:	003fd806 	br	81122cd4 <__reset+0xfb102cd4>
81122d74:	d9401b17 	ldw	r5,108(sp)
81122d78:	00e04534 	movhi	r3,33044
81122d7c:	18c00e04 	addi	r3,r3,56
81122d80:	d8c02415 	stw	r3,144(sp)
81122d84:	29400044 	addi	r5,r5,1
81122d88:	d8c02417 	ldw	r3,144(sp)
81122d8c:	14c5883a 	add	r2,r2,r19
81122d90:	44c00115 	stw	r19,4(r8)
81122d94:	40c00015 	stw	r3,0(r8)
81122d98:	d8801c15 	stw	r2,112(sp)
81122d9c:	d9401b15 	stw	r5,108(sp)
81122da0:	00c001c4 	movi	r3,7
81122da4:	1940070e 	bge	r3,r5,81122dc4 <___vfiprintf_internal_r+0xd2c>
81122da8:	103e4826 	beq	r2,zero,811226cc <__reset+0xfb1026cc>
81122dac:	d9402117 	ldw	r5,132(sp)
81122db0:	d9002017 	ldw	r4,128(sp)
81122db4:	d9801a04 	addi	r6,sp,104
81122db8:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81122dbc:	10000c1e 	bne	r2,zero,81122df0 <___vfiprintf_internal_r+0xd58>
81122dc0:	d8801c17 	ldw	r2,112(sp)
81122dc4:	8c80010e 	bge	r17,r18,81122dcc <___vfiprintf_internal_r+0xd34>
81122dc8:	9023883a 	mov	r17,r18
81122dcc:	da802317 	ldw	r10,140(sp)
81122dd0:	5455883a 	add	r10,r10,r17
81122dd4:	da802315 	stw	r10,140(sp)
81122dd8:	103e4126 	beq	r2,zero,811226e0 <__reset+0xfb1026e0>
81122ddc:	d9402117 	ldw	r5,132(sp)
81122de0:	d9002017 	ldw	r4,128(sp)
81122de4:	d9801a04 	addi	r6,sp,104
81122de8:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81122dec:	103e3c26 	beq	r2,zero,811226e0 <__reset+0xfb1026e0>
81122df0:	dd002117 	ldw	r20,132(sp)
81122df4:	a080030b 	ldhu	r2,12(r20)
81122df8:	1080100c 	andi	r2,r2,64
81122dfc:	1001231e 	bne	r2,zero,8112328c <___vfiprintf_internal_r+0x11f4>
81122e00:	d8802317 	ldw	r2,140(sp)
81122e04:	003d7b06 	br	811223f4 <__reset+0xfb1023f4>
81122e08:	1000991e 	bne	r2,zero,81123070 <___vfiprintf_internal_r+0xfd8>
81122e0c:	00c00044 	movi	r3,1
81122e10:	9805883a 	mov	r2,r19
81122e14:	dd400015 	stw	r21,0(sp)
81122e18:	dcc00115 	stw	r19,4(sp)
81122e1c:	dcc01c15 	stw	r19,112(sp)
81122e20:	d8c01b15 	stw	r3,108(sp)
81122e24:	d811883a 	mov	r8,sp
81122e28:	42000204 	addi	r8,r8,8
81122e2c:	a2c0010c 	andi	r11,r20,4
81122e30:	583fe426 	beq	r11,zero,81122dc4 <__reset+0xfb102dc4>
81122e34:	8ca7c83a 	sub	r19,r17,r18
81122e38:	04ffe20e 	bge	zero,r19,81122dc4 <__reset+0xfb102dc4>
81122e3c:	01c00404 	movi	r7,16
81122e40:	3cffcc0e 	bge	r7,r19,81122d74 <__reset+0xfb102d74>
81122e44:	02a04534 	movhi	r10,33044
81122e48:	52800e04 	addi	r10,r10,56
81122e4c:	d9001b17 	ldw	r4,108(sp)
81122e50:	da802415 	stw	r10,144(sp)
81122e54:	382b883a 	mov	r21,r7
81122e58:	050001c4 	movi	r20,7
81122e5c:	df002017 	ldw	fp,128(sp)
81122e60:	00000506 	br	81122e78 <___vfiprintf_internal_r+0xde0>
81122e64:	21400084 	addi	r5,r4,2
81122e68:	42000204 	addi	r8,r8,8
81122e6c:	1809883a 	mov	r4,r3
81122e70:	9cfffc04 	addi	r19,r19,-16
81122e74:	acffc40e 	bge	r21,r19,81122d88 <__reset+0xfb102d88>
81122e78:	10800404 	addi	r2,r2,16
81122e7c:	20c00044 	addi	r3,r4,1
81122e80:	45800015 	stw	r22,0(r8)
81122e84:	45400115 	stw	r21,4(r8)
81122e88:	d8801c15 	stw	r2,112(sp)
81122e8c:	d8c01b15 	stw	r3,108(sp)
81122e90:	a0fff40e 	bge	r20,r3,81122e64 <__reset+0xfb102e64>
81122e94:	1000041e 	bne	r2,zero,81122ea8 <___vfiprintf_internal_r+0xe10>
81122e98:	01400044 	movi	r5,1
81122e9c:	0009883a 	mov	r4,zero
81122ea0:	d811883a 	mov	r8,sp
81122ea4:	003ff206 	br	81122e70 <__reset+0xfb102e70>
81122ea8:	d9402117 	ldw	r5,132(sp)
81122eac:	d9801a04 	addi	r6,sp,104
81122eb0:	e009883a 	mov	r4,fp
81122eb4:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81122eb8:	103fcd1e 	bne	r2,zero,81122df0 <__reset+0xfb102df0>
81122ebc:	d9001b17 	ldw	r4,108(sp)
81122ec0:	d8801c17 	ldw	r2,112(sp)
81122ec4:	d811883a 	mov	r8,sp
81122ec8:	21400044 	addi	r5,r4,1
81122ecc:	003fe806 	br	81122e70 <__reset+0xfb102e70>
81122ed0:	d9402117 	ldw	r5,132(sp)
81122ed4:	d9002017 	ldw	r4,128(sp)
81122ed8:	d9801a04 	addi	r6,sp,104
81122edc:	d9c02b15 	stw	r7,172(sp)
81122ee0:	db402a15 	stw	r13,168(sp)
81122ee4:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81122ee8:	d9c02b17 	ldw	r7,172(sp)
81122eec:	db402a17 	ldw	r13,168(sp)
81122ef0:	103fbf1e 	bne	r2,zero,81122df0 <__reset+0xfb102df0>
81122ef4:	d9401b17 	ldw	r5,108(sp)
81122ef8:	d8801c17 	ldw	r2,112(sp)
81122efc:	d811883a 	mov	r8,sp
81122f00:	29800044 	addi	r6,r5,1
81122f04:	003dc406 	br	81122618 <__reset+0xfb102618>
81122f08:	1000d21e 	bne	r2,zero,81123254 <___vfiprintf_internal_r+0x11bc>
81122f0c:	d8c01d87 	ldb	r3,118(sp)
81122f10:	18009526 	beq	r3,zero,81123168 <___vfiprintf_internal_r+0x10d0>
81122f14:	00800044 	movi	r2,1
81122f18:	d8c01d84 	addi	r3,sp,118
81122f1c:	1009883a 	mov	r4,r2
81122f20:	d8c00015 	stw	r3,0(sp)
81122f24:	d8800115 	stw	r2,4(sp)
81122f28:	d811883a 	mov	r8,sp
81122f2c:	200b883a 	mov	r5,r4
81122f30:	42000204 	addi	r8,r8,8
81122f34:	21000044 	addi	r4,r4,1
81122f38:	003d9706 	br	81122598 <__reset+0xfb102598>
81122f3c:	d9001d04 	addi	r4,sp,116
81122f40:	00800084 	movi	r2,2
81122f44:	d9000015 	stw	r4,0(sp)
81122f48:	d8800115 	stw	r2,4(sp)
81122f4c:	1809883a 	mov	r4,r3
81122f50:	d811883a 	mov	r8,sp
81122f54:	200b883a 	mov	r5,r4
81122f58:	42000204 	addi	r8,r8,8
81122f5c:	21000044 	addi	r4,r4,1
81122f60:	003f4e06 	br	81122c9c <__reset+0xfb102c9c>
81122f64:	d8001d85 	stb	zero,118(sp)
81122f68:	48005016 	blt	r9,zero,811230ac <___vfiprintf_internal_r+0x1014>
81122f6c:	00ffdfc4 	movi	r3,-129
81122f70:	94c4b03a 	or	r2,r18,r19
81122f74:	a0e8703a 	and	r20,r20,r3
81122f78:	103d4426 	beq	r2,zero,8112248c <__reset+0xfb10248c>
81122f7c:	0039883a 	mov	fp,zero
81122f80:	d9002617 	ldw	r4,152(sp)
81122f84:	dd401a04 	addi	r21,sp,104
81122f88:	908003cc 	andi	r2,r18,15
81122f8c:	9806973a 	slli	r3,r19,28
81122f90:	2085883a 	add	r2,r4,r2
81122f94:	9024d13a 	srli	r18,r18,4
81122f98:	10800003 	ldbu	r2,0(r2)
81122f9c:	9826d13a 	srli	r19,r19,4
81122fa0:	ad7fffc4 	addi	r21,r21,-1
81122fa4:	1ca4b03a 	or	r18,r3,r18
81122fa8:	a8800005 	stb	r2,0(r21)
81122fac:	94c4b03a 	or	r2,r18,r19
81122fb0:	103ff51e 	bne	r2,zero,81122f88 <__reset+0xfb102f88>
81122fb4:	003e5906 	br	8112291c <__reset+0xfb10291c>
81122fb8:	d9402117 	ldw	r5,132(sp)
81122fbc:	d9002017 	ldw	r4,128(sp)
81122fc0:	d9801a04 	addi	r6,sp,104
81122fc4:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81122fc8:	103f891e 	bne	r2,zero,81122df0 <__reset+0xfb102df0>
81122fcc:	d8801c17 	ldw	r2,112(sp)
81122fd0:	d811883a 	mov	r8,sp
81122fd4:	003f9506 	br	81122e2c <__reset+0xfb102e2c>
81122fd8:	d9402117 	ldw	r5,132(sp)
81122fdc:	d9002017 	ldw	r4,128(sp)
81122fe0:	d9801a04 	addi	r6,sp,104
81122fe4:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81122fe8:	103f811e 	bne	r2,zero,81122df0 <__reset+0xfb102df0>
81122fec:	d811883a 	mov	r8,sp
81122ff0:	003ced06 	br	811223a8 <__reset+0xfb1023a8>
81122ff4:	d9402117 	ldw	r5,132(sp)
81122ff8:	d9002017 	ldw	r4,128(sp)
81122ffc:	d9801a04 	addi	r6,sp,104
81123000:	da402c15 	stw	r9,176(sp)
81123004:	db802a15 	stw	r14,168(sp)
81123008:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
8112300c:	da402c17 	ldw	r9,176(sp)
81123010:	db802a17 	ldw	r14,168(sp)
81123014:	103f761e 	bne	r2,zero,81122df0 <__reset+0xfb102df0>
81123018:	d9401b17 	ldw	r5,108(sp)
8112301c:	d8801c17 	ldw	r2,112(sp)
81123020:	d811883a 	mov	r8,sp
81123024:	29000044 	addi	r4,r5,1
81123028:	003d5b06 	br	81122598 <__reset+0xfb102598>
8112302c:	d9402117 	ldw	r5,132(sp)
81123030:	d9002017 	ldw	r4,128(sp)
81123034:	d9801a04 	addi	r6,sp,104
81123038:	da402c15 	stw	r9,176(sp)
8112303c:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81123040:	da402c17 	ldw	r9,176(sp)
81123044:	103f6a1e 	bne	r2,zero,81122df0 <__reset+0xfb102df0>
81123048:	d9401b17 	ldw	r5,108(sp)
8112304c:	d8801c17 	ldw	r2,112(sp)
81123050:	d811883a 	mov	r8,sp
81123054:	29000044 	addi	r4,r5,1
81123058:	003f1006 	br	81122c9c <__reset+0xfb102c9c>
8112305c:	1000c31e 	bne	r2,zero,8112336c <___vfiprintf_internal_r+0x12d4>
81123060:	01000044 	movi	r4,1
81123064:	000b883a 	mov	r5,zero
81123068:	d811883a 	mov	r8,sp
8112306c:	003f0d06 	br	81122ca4 <__reset+0xfb102ca4>
81123070:	d9402117 	ldw	r5,132(sp)
81123074:	d9002017 	ldw	r4,128(sp)
81123078:	d9801a04 	addi	r6,sp,104
8112307c:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81123080:	103f5b1e 	bne	r2,zero,81122df0 <__reset+0xfb102df0>
81123084:	d9001b17 	ldw	r4,108(sp)
81123088:	d8801c17 	ldw	r2,112(sp)
8112308c:	d811883a 	mov	r8,sp
81123090:	21000044 	addi	r4,r4,1
81123094:	003d8006 	br	81122698 <__reset+0xfb102698>
81123098:	01204534 	movhi	r4,33044
8112309c:	213f7804 	addi	r4,r4,-544
811230a0:	d9002615 	stw	r4,152(sp)
811230a4:	d8c02215 	stw	r3,136(sp)
811230a8:	1029883a 	mov	r20,r2
811230ac:	94c4b03a 	or	r2,r18,r19
811230b0:	103fb21e 	bne	r2,zero,81122f7c <__reset+0xfb102f7c>
811230b4:	0039883a 	mov	fp,zero
811230b8:	00800084 	movi	r2,2
811230bc:	003e6b06 	br	81122a6c <__reset+0xfb102a6c>
811230c0:	da802217 	ldw	r10,136(sp)
811230c4:	d8001d85 	stb	zero,118(sp)
811230c8:	0027883a 	mov	r19,zero
811230cc:	50800104 	addi	r2,r10,4
811230d0:	54800017 	ldw	r18,0(r10)
811230d4:	483e6016 	blt	r9,zero,81122a58 <__reset+0xfb102a58>
811230d8:	00ffdfc4 	movi	r3,-129
811230dc:	d8802215 	stw	r2,136(sp)
811230e0:	a0e8703a 	and	r20,r20,r3
811230e4:	0039883a 	mov	fp,zero
811230e8:	903ebb26 	beq	r18,zero,81122bd8 <__reset+0xfb102bd8>
811230ec:	00800244 	movi	r2,9
811230f0:	14bdee36 	bltu	r2,r18,811228ac <__reset+0xfb1028ac>
811230f4:	003eba06 	br	81122be0 <__reset+0xfb102be0>
811230f8:	00800c04 	movi	r2,48
811230fc:	d8c01d45 	stb	r3,117(sp)
81123100:	d8801d05 	stb	r2,116(sp)
81123104:	d8001d85 	stb	zero,118(sp)
81123108:	a0c00094 	ori	r3,r20,2
8112310c:	4800a916 	blt	r9,zero,811233b4 <___vfiprintf_internal_r+0x131c>
81123110:	00bfdfc4 	movi	r2,-129
81123114:	a096703a 	and	r11,r20,r2
81123118:	5d000094 	ori	r20,r11,2
8112311c:	0039883a 	mov	fp,zero
81123120:	003f9706 	br	81122f80 <__reset+0xfb102f80>
81123124:	8025883a 	mov	r18,r16
81123128:	003c2e06 	br	811221e4 <__reset+0xfb1021e4>
8112312c:	00a04534 	movhi	r2,33044
81123130:	10bf7804 	addi	r2,r2,-544
81123134:	0039883a 	mov	fp,zero
81123138:	d8802615 	stw	r2,152(sp)
8112313c:	003f9006 	br	81122f80 <__reset+0xfb102f80>
81123140:	04a5c83a 	sub	r18,zero,r18
81123144:	07000b44 	movi	fp,45
81123148:	9004c03a 	cmpne	r2,r18,zero
8112314c:	04e7c83a 	sub	r19,zero,r19
81123150:	df001d85 	stb	fp,118(sp)
81123154:	98a7c83a 	sub	r19,r19,r2
81123158:	48009f16 	blt	r9,zero,811233d8 <___vfiprintf_internal_r+0x1340>
8112315c:	00bfdfc4 	movi	r2,-129
81123160:	a0a8703a 	and	r20,r20,r2
81123164:	003dd006 	br	811228a8 <__reset+0xfb1028a8>
81123168:	70004c26 	beq	r14,zero,8112329c <___vfiprintf_internal_r+0x1204>
8112316c:	00800084 	movi	r2,2
81123170:	d8c01d04 	addi	r3,sp,116
81123174:	d8c00015 	stw	r3,0(sp)
81123178:	d8800115 	stw	r2,4(sp)
8112317c:	01000044 	movi	r4,1
81123180:	d811883a 	mov	r8,sp
81123184:	003f7306 	br	81122f54 <__reset+0xfb102f54>
81123188:	a080100c 	andi	r2,r20,64
8112318c:	da802217 	ldw	r10,136(sp)
81123190:	103e0626 	beq	r2,zero,811229ac <__reset+0xfb1029ac>
81123194:	5480000f 	ldh	r18,0(r10)
81123198:	52800104 	addi	r10,r10,4
8112319c:	da802215 	stw	r10,136(sp)
811231a0:	9027d7fa 	srai	r19,r18,31
811231a4:	9805883a 	mov	r2,r19
811231a8:	003db806 	br	8112288c <__reset+0xfb10288c>
811231ac:	a080040c 	andi	r2,r20,16
811231b0:	1000091e 	bne	r2,zero,811231d8 <___vfiprintf_internal_r+0x1140>
811231b4:	a2c0100c 	andi	r11,r20,64
811231b8:	58000726 	beq	r11,zero,811231d8 <___vfiprintf_internal_r+0x1140>
811231bc:	da802217 	ldw	r10,136(sp)
811231c0:	50800017 	ldw	r2,0(r10)
811231c4:	52800104 	addi	r10,r10,4
811231c8:	da802215 	stw	r10,136(sp)
811231cc:	da802317 	ldw	r10,140(sp)
811231d0:	1280000d 	sth	r10,0(r2)
811231d4:	003be706 	br	81122174 <__reset+0xfb102174>
811231d8:	da802217 	ldw	r10,136(sp)
811231dc:	50800017 	ldw	r2,0(r10)
811231e0:	52800104 	addi	r10,r10,4
811231e4:	da802215 	stw	r10,136(sp)
811231e8:	da802317 	ldw	r10,140(sp)
811231ec:	12800015 	stw	r10,0(r2)
811231f0:	003be006 	br	81122174 <__reset+0xfb102174>
811231f4:	a080100c 	andi	r2,r20,64
811231f8:	da802217 	ldw	r10,136(sp)
811231fc:	10003026 	beq	r2,zero,811232c0 <___vfiprintf_internal_r+0x1228>
81123200:	5480000b 	ldhu	r18,0(r10)
81123204:	52800104 	addi	r10,r10,4
81123208:	0027883a 	mov	r19,zero
8112320c:	da802215 	stw	r10,136(sp)
81123210:	003d8006 	br	81122814 <__reset+0xfb102814>
81123214:	80c00007 	ldb	r3,0(r16)
81123218:	003c0006 	br	8112221c <__reset+0xfb10221c>
8112321c:	a080100c 	andi	r2,r20,64
81123220:	d8001d85 	stb	zero,118(sp)
81123224:	da802217 	ldw	r10,136(sp)
81123228:	1000201e 	bne	r2,zero,811232ac <___vfiprintf_internal_r+0x1214>
8112322c:	50800104 	addi	r2,r10,4
81123230:	54800017 	ldw	r18,0(r10)
81123234:	0027883a 	mov	r19,zero
81123238:	483def0e 	bge	r9,zero,811229f8 <__reset+0xfb1029f8>
8112323c:	94c6b03a 	or	r3,r18,r19
81123240:	d8802215 	stw	r2,136(sp)
81123244:	183d4e1e 	bne	r3,zero,81122780 <__reset+0xfb102780>
81123248:	0039883a 	mov	fp,zero
8112324c:	0005883a 	mov	r2,zero
81123250:	003e0606 	br	81122a6c <__reset+0xfb102a6c>
81123254:	d9402117 	ldw	r5,132(sp)
81123258:	d9002017 	ldw	r4,128(sp)
8112325c:	d9801a04 	addi	r6,sp,104
81123260:	da402c15 	stw	r9,176(sp)
81123264:	db802a15 	stw	r14,168(sp)
81123268:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
8112326c:	da402c17 	ldw	r9,176(sp)
81123270:	db802a17 	ldw	r14,168(sp)
81123274:	103ede1e 	bne	r2,zero,81122df0 <__reset+0xfb102df0>
81123278:	d9401b17 	ldw	r5,108(sp)
8112327c:	d8801c17 	ldw	r2,112(sp)
81123280:	d811883a 	mov	r8,sp
81123284:	29000044 	addi	r4,r5,1
81123288:	003e7406 	br	81122c5c <__reset+0xfb102c5c>
8112328c:	00bfffc4 	movi	r2,-1
81123290:	003c5806 	br	811223f4 <__reset+0xfb1023f4>
81123294:	d811883a 	mov	r8,sp
81123298:	003ee806 	br	81122e3c <__reset+0xfb102e3c>
8112329c:	000b883a 	mov	r5,zero
811232a0:	01000044 	movi	r4,1
811232a4:	d811883a 	mov	r8,sp
811232a8:	003e7c06 	br	81122c9c <__reset+0xfb102c9c>
811232ac:	50800104 	addi	r2,r10,4
811232b0:	5480000b 	ldhu	r18,0(r10)
811232b4:	0027883a 	mov	r19,zero
811232b8:	483dcf0e 	bge	r9,zero,811229f8 <__reset+0xfb1029f8>
811232bc:	003fdf06 	br	8112323c <__reset+0xfb10323c>
811232c0:	54800017 	ldw	r18,0(r10)
811232c4:	52800104 	addi	r10,r10,4
811232c8:	0027883a 	mov	r19,zero
811232cc:	da802215 	stw	r10,136(sp)
811232d0:	003d5006 	br	81122814 <__reset+0xfb102814>
811232d4:	50800104 	addi	r2,r10,4
811232d8:	5480000b 	ldhu	r18,0(r10)
811232dc:	0027883a 	mov	r19,zero
811232e0:	483f7d0e 	bge	r9,zero,811230d8 <__reset+0xfb1030d8>
811232e4:	003ddc06 	br	81122a58 <__reset+0xfb102a58>
811232e8:	d8c02215 	stw	r3,136(sp)
811232ec:	0039883a 	mov	fp,zero
811232f0:	003ddb06 	br	81122a60 <__reset+0xfb102a60>
811232f4:	02a04534 	movhi	r10,33044
811232f8:	52800a04 	addi	r10,r10,40
811232fc:	da802415 	stw	r10,144(sp)
81123300:	003e8306 	br	81122d10 <__reset+0xfb102d10>
81123304:	d8801c17 	ldw	r2,112(sp)
81123308:	dd002117 	ldw	r20,132(sp)
8112330c:	103eb926 	beq	r2,zero,81122df4 <__reset+0xfb102df4>
81123310:	d9002017 	ldw	r4,128(sp)
81123314:	d9801a04 	addi	r6,sp,104
81123318:	a00b883a 	mov	r5,r20
8112331c:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81123320:	003eb406 	br	81122df4 <__reset+0xfb102df4>
81123324:	80c00043 	ldbu	r3,1(r16)
81123328:	a5000814 	ori	r20,r20,32
8112332c:	84000044 	addi	r16,r16,1
81123330:	18c03fcc 	andi	r3,r3,255
81123334:	18c0201c 	xori	r3,r3,128
81123338:	18ffe004 	addi	r3,r3,-128
8112333c:	003bb706 	br	8112221c <__reset+0xfb10221c>
81123340:	a809883a 	mov	r4,r21
81123344:	d8c02a15 	stw	r3,168(sp)
81123348:	da002b15 	stw	r8,172(sp)
8112334c:	11139780 	call	81113978 <strlen>
81123350:	d8c02a17 	ldw	r3,168(sp)
81123354:	1027883a 	mov	r19,r2
81123358:	df001d83 	ldbu	fp,118(sp)
8112335c:	d8c02215 	stw	r3,136(sp)
81123360:	0013883a 	mov	r9,zero
81123364:	da002b17 	ldw	r8,172(sp)
81123368:	003c4d06 	br	811224a0 <__reset+0xfb1024a0>
8112336c:	d9402117 	ldw	r5,132(sp)
81123370:	d9002017 	ldw	r4,128(sp)
81123374:	d9801a04 	addi	r6,sp,104
81123378:	da402c15 	stw	r9,176(sp)
8112337c:	1121f7c0 	call	81121f7c <__sprint_r.part.0>
81123380:	da402c17 	ldw	r9,176(sp)
81123384:	103e9a1e 	bne	r2,zero,81122df0 <__reset+0xfb102df0>
81123388:	d9401b17 	ldw	r5,108(sp)
8112338c:	d8801c17 	ldw	r2,112(sp)
81123390:	d811883a 	mov	r8,sp
81123394:	29000044 	addi	r4,r5,1
81123398:	003e4206 	br	81122ca4 <__reset+0xfb102ca4>
8112339c:	d9401b17 	ldw	r5,108(sp)
811233a0:	01204534 	movhi	r4,33044
811233a4:	21000e04 	addi	r4,r4,56
811233a8:	d9002415 	stw	r4,144(sp)
811233ac:	29400044 	addi	r5,r5,1
811233b0:	003c6d06 	br	81122568 <__reset+0xfb102568>
811233b4:	0039883a 	mov	fp,zero
811233b8:	00800084 	movi	r2,2
811233bc:	10803fcc 	andi	r2,r2,255
811233c0:	01000044 	movi	r4,1
811233c4:	11001e26 	beq	r2,r4,81123440 <___vfiprintf_internal_r+0x13a8>
811233c8:	01000084 	movi	r4,2
811233cc:	11001e1e 	bne	r2,r4,81123448 <___vfiprintf_internal_r+0x13b0>
811233d0:	1829883a 	mov	r20,r3
811233d4:	003eea06 	br	81122f80 <__reset+0xfb102f80>
811233d8:	a007883a 	mov	r3,r20
811233dc:	00800044 	movi	r2,1
811233e0:	003ff606 	br	811233bc <__reset+0xfb1033bc>
811233e4:	00800184 	movi	r2,6
811233e8:	1240012e 	bgeu	r2,r9,811233f0 <___vfiprintf_internal_r+0x1358>
811233ec:	1013883a 	mov	r9,r2
811233f0:	4827883a 	mov	r19,r9
811233f4:	4825883a 	mov	r18,r9
811233f8:	48001516 	blt	r9,zero,81123450 <___vfiprintf_internal_r+0x13b8>
811233fc:	05604534 	movhi	r21,33044
81123400:	d8c02215 	stw	r3,136(sp)
81123404:	ad7f7d04 	addi	r21,r21,-524
81123408:	003d1406 	br	8112285c <__reset+0xfb10285c>
8112340c:	02a04534 	movhi	r10,33044
81123410:	52800a04 	addi	r10,r10,40
81123414:	da802415 	stw	r10,144(sp)
81123418:	200d883a 	mov	r6,r4
8112341c:	003c9106 	br	81122664 <__reset+0xfb102664>
81123420:	5021883a 	mov	r16,r10
81123424:	0013883a 	mov	r9,zero
81123428:	003b7d06 	br	81122220 <__reset+0xfb102220>
8112342c:	4827883a 	mov	r19,r9
81123430:	df001d83 	ldbu	fp,118(sp)
81123434:	d8c02215 	stw	r3,136(sp)
81123438:	0013883a 	mov	r9,zero
8112343c:	003c1806 	br	811224a0 <__reset+0xfb1024a0>
81123440:	1829883a 	mov	r20,r3
81123444:	003d1806 	br	811228a8 <__reset+0xfb1028a8>
81123448:	1829883a 	mov	r20,r3
8112344c:	003ccd06 	br	81122784 <__reset+0xfb102784>
81123450:	0025883a 	mov	r18,zero
81123454:	003fe906 	br	811233fc <__reset+0xfb1033fc>
81123458:	d8802217 	ldw	r2,136(sp)
8112345c:	80c00043 	ldbu	r3,1(r16)
81123460:	5021883a 	mov	r16,r10
81123464:	12400017 	ldw	r9,0(r2)
81123468:	10800104 	addi	r2,r2,4
8112346c:	d8802215 	stw	r2,136(sp)
81123470:	483faf0e 	bge	r9,zero,81123330 <__reset+0xfb103330>
81123474:	18c03fcc 	andi	r3,r3,255
81123478:	18c0201c 	xori	r3,r3,128
8112347c:	027fffc4 	movi	r9,-1
81123480:	18ffe004 	addi	r3,r3,-128
81123484:	003b6506 	br	8112221c <__reset+0xfb10221c>
81123488:	d9c01d85 	stb	r7,118(sp)
8112348c:	003ca006 	br	81122710 <__reset+0xfb102710>
81123490:	d9c01d85 	stb	r7,118(sp)
81123494:	003cad06 	br	8112274c <__reset+0xfb10274c>
81123498:	d9c01d85 	stb	r7,118(sp)
8112349c:	003d7d06 	br	81122a94 <__reset+0xfb102a94>
811234a0:	d9c01d85 	stb	r7,118(sp)
811234a4:	003d5f06 	br	81122a24 <__reset+0xfb102a24>
811234a8:	a080004c 	andi	r2,r20,1
811234ac:	0039883a 	mov	fp,zero
811234b0:	10000526 	beq	r2,zero,811234c8 <___vfiprintf_internal_r+0x1430>
811234b4:	00800c04 	movi	r2,48
811234b8:	d88019c5 	stb	r2,103(sp)
811234bc:	dcc02717 	ldw	r19,156(sp)
811234c0:	dd4019c4 	addi	r21,sp,103
811234c4:	003bf606 	br	811224a0 <__reset+0xfb1024a0>
811234c8:	0027883a 	mov	r19,zero
811234cc:	dd401a04 	addi	r21,sp,104
811234d0:	003bf306 	br	811224a0 <__reset+0xfb1024a0>
811234d4:	d9c01d85 	stb	r7,118(sp)
811234d8:	003dc806 	br	81122bfc <__reset+0xfb102bfc>
811234dc:	d9c01d85 	stb	r7,118(sp)
811234e0:	003d3a06 	br	811229cc <__reset+0xfb1029cc>
811234e4:	d9c01d85 	stb	r7,118(sp)
811234e8:	003d2a06 	br	81122994 <__reset+0xfb102994>
811234ec:	d9c01d85 	stb	r7,118(sp)
811234f0:	003cde06 	br	8112286c <__reset+0xfb10286c>
811234f4:	d9c01d85 	stb	r7,118(sp)
811234f8:	003cbc06 	br	811227ec <__reset+0xfb1027ec>

811234fc <__vfiprintf_internal>:
811234fc:	00a04534 	movhi	r2,33044
81123500:	10895a04 	addi	r2,r2,9576
81123504:	300f883a 	mov	r7,r6
81123508:	280d883a 	mov	r6,r5
8112350c:	200b883a 	mov	r5,r4
81123510:	11000017 	ldw	r4,0(r2)
81123514:	11220981 	jmpi	81122098 <___vfiprintf_internal_r>

81123518 <__sbprintf>:
81123518:	defee204 	addi	sp,sp,-1144
8112351c:	de00012e 	bgeu	sp,et,81123524 <__sbprintf+0xc>
81123520:	003b68fa 	trap	3
81123524:	2880030b 	ldhu	r2,12(r5)
81123528:	2ac01917 	ldw	r11,100(r5)
8112352c:	2a80038b 	ldhu	r10,14(r5)
81123530:	2a400717 	ldw	r9,28(r5)
81123534:	2a000917 	ldw	r8,36(r5)
81123538:	00c10004 	movi	r3,1024
8112353c:	dc011a15 	stw	r16,1128(sp)
81123540:	10bfff4c 	andi	r2,r2,65533
81123544:	2821883a 	mov	r16,r5
81123548:	d8cb883a 	add	r5,sp,r3
8112354c:	dc811c15 	stw	r18,1136(sp)
81123550:	dc411b15 	stw	r17,1132(sp)
81123554:	dfc11d15 	stw	ra,1140(sp)
81123558:	2025883a 	mov	r18,r4
8112355c:	d881030d 	sth	r2,1036(sp)
81123560:	dac11915 	stw	r11,1124(sp)
81123564:	da81038d 	sth	r10,1038(sp)
81123568:	da410715 	stw	r9,1052(sp)
8112356c:	da010915 	stw	r8,1060(sp)
81123570:	dec10015 	stw	sp,1024(sp)
81123574:	dec10415 	stw	sp,1040(sp)
81123578:	d8c10215 	stw	r3,1032(sp)
8112357c:	d8c10515 	stw	r3,1044(sp)
81123580:	d8010615 	stw	zero,1048(sp)
81123584:	11220980 	call	81122098 <___vfiprintf_internal_r>
81123588:	1023883a 	mov	r17,r2
8112358c:	10000416 	blt	r2,zero,811235a0 <__sbprintf+0x88>
81123590:	d9410004 	addi	r5,sp,1024
81123594:	9009883a 	mov	r4,r18
81123598:	111b8500 	call	8111b850 <_fflush_r>
8112359c:	10000d1e 	bne	r2,zero,811235d4 <__sbprintf+0xbc>
811235a0:	d881030b 	ldhu	r2,1036(sp)
811235a4:	1080100c 	andi	r2,r2,64
811235a8:	10000326 	beq	r2,zero,811235b8 <__sbprintf+0xa0>
811235ac:	8080030b 	ldhu	r2,12(r16)
811235b0:	10801014 	ori	r2,r2,64
811235b4:	8080030d 	sth	r2,12(r16)
811235b8:	8805883a 	mov	r2,r17
811235bc:	dfc11d17 	ldw	ra,1140(sp)
811235c0:	dc811c17 	ldw	r18,1136(sp)
811235c4:	dc411b17 	ldw	r17,1132(sp)
811235c8:	dc011a17 	ldw	r16,1128(sp)
811235cc:	dec11e04 	addi	sp,sp,1144
811235d0:	f800283a 	ret
811235d4:	047fffc4 	movi	r17,-1
811235d8:	003ff106 	br	811235a0 <__reset+0xfb1035a0>

811235dc <_calloc_r>:
811235dc:	298b383a 	mul	r5,r5,r6
811235e0:	defffe04 	addi	sp,sp,-8
811235e4:	de00012e 	bgeu	sp,et,811235ec <_calloc_r+0x10>
811235e8:	003b68fa 	trap	3
811235ec:	dfc00115 	stw	ra,4(sp)
811235f0:	dc000015 	stw	r16,0(sp)
811235f4:	11126700 	call	81112670 <_malloc_r>
811235f8:	10002926 	beq	r2,zero,811236a0 <_calloc_r+0xc4>
811235fc:	11bfff17 	ldw	r6,-4(r2)
81123600:	1021883a 	mov	r16,r2
81123604:	00bfff04 	movi	r2,-4
81123608:	308c703a 	and	r6,r6,r2
8112360c:	00c00904 	movi	r3,36
81123610:	308d883a 	add	r6,r6,r2
81123614:	19801636 	bltu	r3,r6,81123670 <_calloc_r+0x94>
81123618:	008004c4 	movi	r2,19
8112361c:	11800b2e 	bgeu	r2,r6,8112364c <_calloc_r+0x70>
81123620:	80000015 	stw	zero,0(r16)
81123624:	80000115 	stw	zero,4(r16)
81123628:	008006c4 	movi	r2,27
8112362c:	11801a2e 	bgeu	r2,r6,81123698 <_calloc_r+0xbc>
81123630:	80000215 	stw	zero,8(r16)
81123634:	80000315 	stw	zero,12(r16)
81123638:	30c0151e 	bne	r6,r3,81123690 <_calloc_r+0xb4>
8112363c:	80000415 	stw	zero,16(r16)
81123640:	80800604 	addi	r2,r16,24
81123644:	80000515 	stw	zero,20(r16)
81123648:	00000106 	br	81123650 <_calloc_r+0x74>
8112364c:	8005883a 	mov	r2,r16
81123650:	10000015 	stw	zero,0(r2)
81123654:	10000115 	stw	zero,4(r2)
81123658:	10000215 	stw	zero,8(r2)
8112365c:	8005883a 	mov	r2,r16
81123660:	dfc00117 	ldw	ra,4(sp)
81123664:	dc000017 	ldw	r16,0(sp)
81123668:	dec00204 	addi	sp,sp,8
8112366c:	f800283a 	ret
81123670:	000b883a 	mov	r5,zero
81123674:	8009883a 	mov	r4,r16
81123678:	1112fd40 	call	81112fd4 <memset>
8112367c:	8005883a 	mov	r2,r16
81123680:	dfc00117 	ldw	ra,4(sp)
81123684:	dc000017 	ldw	r16,0(sp)
81123688:	dec00204 	addi	sp,sp,8
8112368c:	f800283a 	ret
81123690:	80800404 	addi	r2,r16,16
81123694:	003fee06 	br	81123650 <__reset+0xfb103650>
81123698:	80800204 	addi	r2,r16,8
8112369c:	003fec06 	br	81123650 <__reset+0xfb103650>
811236a0:	0005883a 	mov	r2,zero
811236a4:	003fee06 	br	81123660 <__reset+0xfb103660>

811236a8 <_fclose_r>:
811236a8:	28003b26 	beq	r5,zero,81123798 <_fclose_r+0xf0>
811236ac:	defffc04 	addi	sp,sp,-16
811236b0:	de00012e 	bgeu	sp,et,811236b8 <_fclose_r+0x10>
811236b4:	003b68fa 	trap	3
811236b8:	dc400115 	stw	r17,4(sp)
811236bc:	dc000015 	stw	r16,0(sp)
811236c0:	dfc00315 	stw	ra,12(sp)
811236c4:	dc800215 	stw	r18,8(sp)
811236c8:	2023883a 	mov	r17,r4
811236cc:	2821883a 	mov	r16,r5
811236d0:	20000226 	beq	r4,zero,811236dc <_fclose_r+0x34>
811236d4:	20800e17 	ldw	r2,56(r4)
811236d8:	10002726 	beq	r2,zero,81123778 <_fclose_r+0xd0>
811236dc:	8080030f 	ldh	r2,12(r16)
811236e0:	1000071e 	bne	r2,zero,81123700 <_fclose_r+0x58>
811236e4:	0005883a 	mov	r2,zero
811236e8:	dfc00317 	ldw	ra,12(sp)
811236ec:	dc800217 	ldw	r18,8(sp)
811236f0:	dc400117 	ldw	r17,4(sp)
811236f4:	dc000017 	ldw	r16,0(sp)
811236f8:	dec00404 	addi	sp,sp,16
811236fc:	f800283a 	ret
81123700:	800b883a 	mov	r5,r16
81123704:	8809883a 	mov	r4,r17
81123708:	111b62c0 	call	8111b62c <__sflush_r>
8112370c:	1025883a 	mov	r18,r2
81123710:	80800b17 	ldw	r2,44(r16)
81123714:	10000426 	beq	r2,zero,81123728 <_fclose_r+0x80>
81123718:	81400717 	ldw	r5,28(r16)
8112371c:	8809883a 	mov	r4,r17
81123720:	103ee83a 	callr	r2
81123724:	10001616 	blt	r2,zero,81123780 <_fclose_r+0xd8>
81123728:	8080030b 	ldhu	r2,12(r16)
8112372c:	1080200c 	andi	r2,r2,128
81123730:	1000151e 	bne	r2,zero,81123788 <_fclose_r+0xe0>
81123734:	81400c17 	ldw	r5,48(r16)
81123738:	28000526 	beq	r5,zero,81123750 <_fclose_r+0xa8>
8112373c:	80801004 	addi	r2,r16,64
81123740:	28800226 	beq	r5,r2,8112374c <_fclose_r+0xa4>
81123744:	8809883a 	mov	r4,r17
81123748:	111c0e40 	call	8111c0e4 <_free_r>
8112374c:	80000c15 	stw	zero,48(r16)
81123750:	81401117 	ldw	r5,68(r16)
81123754:	28000326 	beq	r5,zero,81123764 <_fclose_r+0xbc>
81123758:	8809883a 	mov	r4,r17
8112375c:	111c0e40 	call	8111c0e4 <_free_r>
81123760:	80001115 	stw	zero,68(r16)
81123764:	111bc5c0 	call	8111bc5c <__sfp_lock_acquire>
81123768:	8000030d 	sth	zero,12(r16)
8112376c:	111bc600 	call	8111bc60 <__sfp_lock_release>
81123770:	9005883a 	mov	r2,r18
81123774:	003fdc06 	br	811236e8 <__reset+0xfb1036e8>
81123778:	111bc4c0 	call	8111bc4c <__sinit>
8112377c:	003fd706 	br	811236dc <__reset+0xfb1036dc>
81123780:	04bfffc4 	movi	r18,-1
81123784:	003fe806 	br	81123728 <__reset+0xfb103728>
81123788:	81400417 	ldw	r5,16(r16)
8112378c:	8809883a 	mov	r4,r17
81123790:	111c0e40 	call	8111c0e4 <_free_r>
81123794:	003fe706 	br	81123734 <__reset+0xfb103734>
81123798:	0005883a 	mov	r2,zero
8112379c:	f800283a 	ret

811237a0 <fclose>:
811237a0:	00a04534 	movhi	r2,33044
811237a4:	10895a04 	addi	r2,r2,9576
811237a8:	200b883a 	mov	r5,r4
811237ac:	11000017 	ldw	r4,0(r2)
811237b0:	11236a81 	jmpi	811236a8 <_fclose_r>

811237b4 <__fputwc>:
811237b4:	defff804 	addi	sp,sp,-32
811237b8:	de00012e 	bgeu	sp,et,811237c0 <__fputwc+0xc>
811237bc:	003b68fa 	trap	3
811237c0:	dcc00415 	stw	r19,16(sp)
811237c4:	dc800315 	stw	r18,12(sp)
811237c8:	dc000115 	stw	r16,4(sp)
811237cc:	dfc00715 	stw	ra,28(sp)
811237d0:	dd400615 	stw	r21,24(sp)
811237d4:	dd000515 	stw	r20,20(sp)
811237d8:	dc400215 	stw	r17,8(sp)
811237dc:	2027883a 	mov	r19,r4
811237e0:	2825883a 	mov	r18,r5
811237e4:	3021883a 	mov	r16,r6
811237e8:	111cb740 	call	8111cb74 <__locale_mb_cur_max>
811237ec:	00c00044 	movi	r3,1
811237f0:	10c03e26 	beq	r2,r3,811238ec <__fputwc+0x138>
811237f4:	81c01704 	addi	r7,r16,92
811237f8:	900d883a 	mov	r6,r18
811237fc:	d80b883a 	mov	r5,sp
81123800:	9809883a 	mov	r4,r19
81123804:	11246380 	call	81124638 <_wcrtomb_r>
81123808:	1029883a 	mov	r20,r2
8112380c:	00bfffc4 	movi	r2,-1
81123810:	a0802026 	beq	r20,r2,81123894 <__fputwc+0xe0>
81123814:	d9400003 	ldbu	r5,0(sp)
81123818:	a0001c26 	beq	r20,zero,8112388c <__fputwc+0xd8>
8112381c:	0023883a 	mov	r17,zero
81123820:	05400284 	movi	r21,10
81123824:	00000906 	br	8112384c <__fputwc+0x98>
81123828:	80800017 	ldw	r2,0(r16)
8112382c:	11400005 	stb	r5,0(r2)
81123830:	80c00017 	ldw	r3,0(r16)
81123834:	18c00044 	addi	r3,r3,1
81123838:	80c00015 	stw	r3,0(r16)
8112383c:	8c400044 	addi	r17,r17,1
81123840:	dc45883a 	add	r2,sp,r17
81123844:	8d00112e 	bgeu	r17,r20,8112388c <__fputwc+0xd8>
81123848:	11400003 	ldbu	r5,0(r2)
8112384c:	80c00217 	ldw	r3,8(r16)
81123850:	18ffffc4 	addi	r3,r3,-1
81123854:	80c00215 	stw	r3,8(r16)
81123858:	183ff30e 	bge	r3,zero,81123828 <__reset+0xfb103828>
8112385c:	80800617 	ldw	r2,24(r16)
81123860:	18801916 	blt	r3,r2,811238c8 <__fputwc+0x114>
81123864:	80800017 	ldw	r2,0(r16)
81123868:	11400005 	stb	r5,0(r2)
8112386c:	80800017 	ldw	r2,0(r16)
81123870:	10c00003 	ldbu	r3,0(r2)
81123874:	10800044 	addi	r2,r2,1
81123878:	1d402326 	beq	r3,r21,81123908 <__fputwc+0x154>
8112387c:	80800015 	stw	r2,0(r16)
81123880:	8c400044 	addi	r17,r17,1
81123884:	dc45883a 	add	r2,sp,r17
81123888:	8d3fef36 	bltu	r17,r20,81123848 <__reset+0xfb103848>
8112388c:	9005883a 	mov	r2,r18
81123890:	00000406 	br	811238a4 <__fputwc+0xf0>
81123894:	80c0030b 	ldhu	r3,12(r16)
81123898:	a005883a 	mov	r2,r20
8112389c:	18c01014 	ori	r3,r3,64
811238a0:	80c0030d 	sth	r3,12(r16)
811238a4:	dfc00717 	ldw	ra,28(sp)
811238a8:	dd400617 	ldw	r21,24(sp)
811238ac:	dd000517 	ldw	r20,20(sp)
811238b0:	dcc00417 	ldw	r19,16(sp)
811238b4:	dc800317 	ldw	r18,12(sp)
811238b8:	dc400217 	ldw	r17,8(sp)
811238bc:	dc000117 	ldw	r16,4(sp)
811238c0:	dec00804 	addi	sp,sp,32
811238c4:	f800283a 	ret
811238c8:	800d883a 	mov	r6,r16
811238cc:	29403fcc 	andi	r5,r5,255
811238d0:	9809883a 	mov	r4,r19
811238d4:	1119a140 	call	81119a14 <__swbuf_r>
811238d8:	10bfffe0 	cmpeqi	r2,r2,-1
811238dc:	10803fcc 	andi	r2,r2,255
811238e0:	103fd626 	beq	r2,zero,8112383c <__reset+0xfb10383c>
811238e4:	00bfffc4 	movi	r2,-1
811238e8:	003fee06 	br	811238a4 <__reset+0xfb1038a4>
811238ec:	90ffffc4 	addi	r3,r18,-1
811238f0:	01003f84 	movi	r4,254
811238f4:	20ffbf36 	bltu	r4,r3,811237f4 <__reset+0xfb1037f4>
811238f8:	900b883a 	mov	r5,r18
811238fc:	dc800005 	stb	r18,0(sp)
81123900:	1029883a 	mov	r20,r2
81123904:	003fc506 	br	8112381c <__reset+0xfb10381c>
81123908:	800d883a 	mov	r6,r16
8112390c:	a80b883a 	mov	r5,r21
81123910:	9809883a 	mov	r4,r19
81123914:	1119a140 	call	81119a14 <__swbuf_r>
81123918:	10bfffe0 	cmpeqi	r2,r2,-1
8112391c:	003fef06 	br	811238dc <__reset+0xfb1038dc>

81123920 <_fputwc_r>:
81123920:	3080030b 	ldhu	r2,12(r6)
81123924:	10c8000c 	andi	r3,r2,8192
81123928:	1800051e 	bne	r3,zero,81123940 <_fputwc_r+0x20>
8112392c:	30c01917 	ldw	r3,100(r6)
81123930:	10880014 	ori	r2,r2,8192
81123934:	3080030d 	sth	r2,12(r6)
81123938:	18880014 	ori	r2,r3,8192
8112393c:	30801915 	stw	r2,100(r6)
81123940:	11237b41 	jmpi	811237b4 <__fputwc>

81123944 <fputwc>:
81123944:	00a04534 	movhi	r2,33044
81123948:	defffc04 	addi	sp,sp,-16
8112394c:	10895a04 	addi	r2,r2,9576
81123950:	de00012e 	bgeu	sp,et,81123958 <fputwc+0x14>
81123954:	003b68fa 	trap	3
81123958:	dc000115 	stw	r16,4(sp)
8112395c:	14000017 	ldw	r16,0(r2)
81123960:	dc400215 	stw	r17,8(sp)
81123964:	dfc00315 	stw	ra,12(sp)
81123968:	2023883a 	mov	r17,r4
8112396c:	80000226 	beq	r16,zero,81123978 <fputwc+0x34>
81123970:	80800e17 	ldw	r2,56(r16)
81123974:	10001026 	beq	r2,zero,811239b8 <fputwc+0x74>
81123978:	2880030b 	ldhu	r2,12(r5)
8112397c:	10c8000c 	andi	r3,r2,8192
81123980:	1800051e 	bne	r3,zero,81123998 <fputwc+0x54>
81123984:	28c01917 	ldw	r3,100(r5)
81123988:	10880014 	ori	r2,r2,8192
8112398c:	2880030d 	sth	r2,12(r5)
81123990:	18880014 	ori	r2,r3,8192
81123994:	28801915 	stw	r2,100(r5)
81123998:	280d883a 	mov	r6,r5
8112399c:	8009883a 	mov	r4,r16
811239a0:	880b883a 	mov	r5,r17
811239a4:	dfc00317 	ldw	ra,12(sp)
811239a8:	dc400217 	ldw	r17,8(sp)
811239ac:	dc000117 	ldw	r16,4(sp)
811239b0:	dec00404 	addi	sp,sp,16
811239b4:	11237b41 	jmpi	811237b4 <__fputwc>
811239b8:	8009883a 	mov	r4,r16
811239bc:	d9400015 	stw	r5,0(sp)
811239c0:	111bc4c0 	call	8111bc4c <__sinit>
811239c4:	d9400017 	ldw	r5,0(sp)
811239c8:	003feb06 	br	81123978 <__reset+0xfb103978>

811239cc <rshift>:
811239cc:	2807d17a 	srai	r3,r5,5
811239d0:	20800417 	ldw	r2,16(r4)
811239d4:	22000504 	addi	r8,r4,20
811239d8:	1880250e 	bge	r3,r2,81123a70 <rshift+0xa4>
811239dc:	1085883a 	add	r2,r2,r2
811239e0:	18c7883a 	add	r3,r3,r3
811239e4:	1085883a 	add	r2,r2,r2
811239e8:	18c7883a 	add	r3,r3,r3
811239ec:	294007cc 	andi	r5,r5,31
811239f0:	4085883a 	add	r2,r8,r2
811239f4:	40c7883a 	add	r3,r8,r3
811239f8:	28002026 	beq	r5,zero,81123a7c <rshift+0xb0>
811239fc:	19800017 	ldw	r6,0(r3)
81123a00:	02c00804 	movi	r11,32
81123a04:	19c00104 	addi	r7,r3,4
81123a08:	5957c83a 	sub	r11,r11,r5
81123a0c:	314cd83a 	srl	r6,r6,r5
81123a10:	38802c2e 	bgeu	r7,r2,81123ac4 <rshift+0xf8>
81123a14:	4015883a 	mov	r10,r8
81123a18:	3a400017 	ldw	r9,0(r7)
81123a1c:	52800104 	addi	r10,r10,4
81123a20:	39c00104 	addi	r7,r7,4
81123a24:	4ad2983a 	sll	r9,r9,r11
81123a28:	498cb03a 	or	r6,r9,r6
81123a2c:	51bfff15 	stw	r6,-4(r10)
81123a30:	39bfff17 	ldw	r6,-4(r7)
81123a34:	314cd83a 	srl	r6,r6,r5
81123a38:	38bff736 	bltu	r7,r2,81123a18 <__reset+0xfb103a18>
81123a3c:	10c7c83a 	sub	r3,r2,r3
81123a40:	18fffec4 	addi	r3,r3,-5
81123a44:	1806d0ba 	srli	r3,r3,2
81123a48:	18c00044 	addi	r3,r3,1
81123a4c:	18c7883a 	add	r3,r3,r3
81123a50:	18c7883a 	add	r3,r3,r3
81123a54:	40c7883a 	add	r3,r8,r3
81123a58:	19800015 	stw	r6,0(r3)
81123a5c:	30000126 	beq	r6,zero,81123a64 <rshift+0x98>
81123a60:	18c00104 	addi	r3,r3,4
81123a64:	1a05c83a 	sub	r2,r3,r8
81123a68:	1005d0ba 	srai	r2,r2,2
81123a6c:	00001206 	br	81123ab8 <rshift+0xec>
81123a70:	20000415 	stw	zero,16(r4)
81123a74:	20000515 	stw	zero,20(r4)
81123a78:	f800283a 	ret
81123a7c:	18bffc2e 	bgeu	r3,r2,81123a70 <__reset+0xfb103a70>
81123a80:	180d883a 	mov	r6,r3
81123a84:	400b883a 	mov	r5,r8
81123a88:	31c00017 	ldw	r7,0(r6)
81123a8c:	29400104 	addi	r5,r5,4
81123a90:	31800104 	addi	r6,r6,4
81123a94:	29ffff15 	stw	r7,-4(r5)
81123a98:	30bffb36 	bltu	r6,r2,81123a88 <__reset+0xfb103a88>
81123a9c:	00c6303a 	nor	r3,zero,r3
81123aa0:	1885883a 	add	r2,r3,r2
81123aa4:	1004d0ba 	srli	r2,r2,2
81123aa8:	10800044 	addi	r2,r2,1
81123aac:	1085883a 	add	r2,r2,r2
81123ab0:	1085883a 	add	r2,r2,r2
81123ab4:	1005d0ba 	srai	r2,r2,2
81123ab8:	20800415 	stw	r2,16(r4)
81123abc:	103fed26 	beq	r2,zero,81123a74 <__reset+0xfb103a74>
81123ac0:	f800283a 	ret
81123ac4:	4007883a 	mov	r3,r8
81123ac8:	003fe306 	br	81123a58 <__reset+0xfb103a58>

81123acc <__gethex>:
81123acc:	deffeb04 	addi	sp,sp,-84
81123ad0:	de00012e 	bgeu	sp,et,81123ad8 <__gethex+0xc>
81123ad4:	003b68fa 	trap	3
81123ad8:	dfc01415 	stw	ra,80(sp)
81123adc:	dd801115 	stw	r22,68(sp)
81123ae0:	dcc00e15 	stw	r19,56(sp)
81123ae4:	dc800d15 	stw	r18,52(sp)
81123ae8:	2827883a 	mov	r19,r5
81123aec:	d9000115 	stw	r4,4(sp)
81123af0:	d9800015 	stw	r6,0(sp)
81123af4:	d9c00415 	stw	r7,16(sp)
81123af8:	df001315 	stw	fp,76(sp)
81123afc:	ddc01215 	stw	r23,72(sp)
81123b00:	dd401015 	stw	r21,64(sp)
81123b04:	dd000f15 	stw	r20,60(sp)
81123b08:	dc400c15 	stw	r17,48(sp)
81123b0c:	dc000b15 	stw	r16,44(sp)
81123b10:	111cb980 	call	8111cb98 <_localeconv_r>
81123b14:	14800017 	ldw	r18,0(r2)
81123b18:	9009883a 	mov	r4,r18
81123b1c:	11139780 	call	81113978 <strlen>
81123b20:	98c00017 	ldw	r3,0(r19)
81123b24:	102d883a 	mov	r22,r2
81123b28:	9085883a 	add	r2,r18,r2
81123b2c:	10bfffc3 	ldbu	r2,-1(r2)
81123b30:	19000083 	ldbu	r4,2(r3)
81123b34:	d8800305 	stb	r2,12(sp)
81123b38:	00800c04 	movi	r2,48
81123b3c:	2081521e 	bne	r4,r2,81124088 <__gethex+0x5bc>
81123b40:	017fff84 	movi	r5,-2
81123b44:	188000c4 	addi	r2,r3,3
81123b48:	28cbc83a 	sub	r5,r5,r3
81123b4c:	200d883a 	mov	r6,r4
81123b50:	28a3883a 	add	r17,r5,r2
81123b54:	102b883a 	mov	r21,r2
81123b58:	10800044 	addi	r2,r2,1
81123b5c:	113fffc3 	ldbu	r4,-1(r2)
81123b60:	21bffb26 	beq	r4,r6,81123b50 <__reset+0xfb103b50>
81123b64:	05204534 	movhi	r20,33044
81123b68:	a5001204 	addi	r20,r20,72
81123b6c:	a109883a 	add	r4,r20,r4
81123b70:	20800003 	ldbu	r2,0(r4)
81123b74:	10008826 	beq	r2,zero,81123d98 <__gethex+0x2cc>
81123b78:	a8800003 	ldbu	r2,0(r21)
81123b7c:	0015883a 	mov	r10,zero
81123b80:	002f883a 	mov	r23,zero
81123b84:	a085883a 	add	r2,r20,r2
81123b88:	10800003 	ldbu	r2,0(r2)
81123b8c:	a821883a 	mov	r16,r21
81123b90:	10000526 	beq	r2,zero,81123ba8 <__gethex+0xdc>
81123b94:	84000044 	addi	r16,r16,1
81123b98:	80800003 	ldbu	r2,0(r16)
81123b9c:	a085883a 	add	r2,r20,r2
81123ba0:	10800003 	ldbu	r2,0(r2)
81123ba4:	103ffb1e 	bne	r2,zero,81123b94 <__reset+0xfb103b94>
81123ba8:	b00d883a 	mov	r6,r22
81123bac:	900b883a 	mov	r5,r18
81123bb0:	8009883a 	mov	r4,r16
81123bb4:	da800a15 	stw	r10,40(sp)
81123bb8:	11245680 	call	81124568 <strncmp>
81123bbc:	da800a17 	ldw	r10,40(sp)
81123bc0:	1000031e 	bne	r2,zero,81123bd0 <__gethex+0x104>
81123bc4:	b8015226 	beq	r23,zero,81124110 <__gethex+0x644>
81123bc8:	80800003 	ldbu	r2,0(r16)
81123bcc:	00000206 	br	81123bd8 <__gethex+0x10c>
81123bd0:	80800003 	ldbu	r2,0(r16)
81123bd4:	b8011f26 	beq	r23,zero,81124054 <__gethex+0x588>
81123bd8:	85efc83a 	sub	r23,r16,r23
81123bdc:	bdef883a 	add	r23,r23,r23
81123be0:	bdef883a 	add	r23,r23,r23
81123be4:	05efc83a 	sub	r23,zero,r23
81123be8:	10803fcc 	andi	r2,r2,255
81123bec:	01001404 	movi	r4,80
81123bf0:	11008626 	beq	r2,r4,81123e0c <__gethex+0x340>
81123bf4:	01001c04 	movi	r4,112
81123bf8:	11008426 	beq	r2,r4,81123e0c <__gethex+0x340>
81123bfc:	8039883a 	mov	fp,r16
81123c00:	9c000015 	stw	r16,0(r19)
81123c04:	5000711e 	bne	r10,zero,81123dcc <__gethex+0x300>
81123c08:	e545c83a 	sub	r2,fp,r21
81123c0c:	10bfffc4 	addi	r2,r2,-1
81123c10:	010001c4 	movi	r4,7
81123c14:	000b883a 	mov	r5,zero
81123c18:	2080030e 	bge	r4,r2,81123c28 <__gethex+0x15c>
81123c1c:	1005d07a 	srai	r2,r2,1
81123c20:	29400044 	addi	r5,r5,1
81123c24:	20bffd16 	blt	r4,r2,81123c1c <__reset+0xfb103c1c>
81123c28:	d9000117 	ldw	r4,4(sp)
81123c2c:	111d0b40 	call	8111d0b4 <_Balloc>
81123c30:	10c00504 	addi	r3,r2,20
81123c34:	d8c00215 	stw	r3,8(sp)
81123c38:	1021883a 	mov	r16,r2
81123c3c:	af01732e 	bgeu	r21,fp,8112420c <__gethex+0x740>
81123c40:	dc400303 	ldbu	r17,12(sp)
81123c44:	03400044 	movi	r13,1
81123c48:	1815883a 	mov	r10,r3
81123c4c:	0013883a 	mov	r9,zero
81123c50:	0027883a 	mov	r19,zero
81123c54:	6d9bc83a 	sub	r13,r13,r22
81123c58:	02c00804 	movi	r11,32
81123c5c:	e0bfffc3 	ldbu	r2,-1(fp)
81123c60:	e3bfffc4 	addi	r14,fp,-1
81123c64:	88803026 	beq	r17,r2,81123d28 <__gethex+0x25c>
81123c68:	9ac04526 	beq	r19,r11,81123d80 <__gethex+0x2b4>
81123c6c:	980b883a 	mov	r5,r19
81123c70:	9cc00104 	addi	r19,r19,4
81123c74:	e13fffc3 	ldbu	r4,-1(fp)
81123c78:	7039883a 	mov	fp,r14
81123c7c:	a109883a 	add	r4,r20,r4
81123c80:	20800003 	ldbu	r2,0(r4)
81123c84:	108003cc 	andi	r2,r2,15
81123c88:	1144983a 	sll	r2,r2,r5
81123c8c:	4892b03a 	or	r9,r9,r2
81123c90:	af3ff236 	bltu	r21,fp,81123c5c <__reset+0xfb103c5c>
81123c94:	d8c00217 	ldw	r3,8(sp)
81123c98:	50800104 	addi	r2,r10,4
81123c9c:	52400015 	stw	r9,0(r10)
81123ca0:	10c5c83a 	sub	r2,r2,r3
81123ca4:	1005d0ba 	srai	r2,r2,2
81123ca8:	4809883a 	mov	r4,r9
81123cac:	80800415 	stw	r2,16(r16)
81123cb0:	1022917a 	slli	r17,r2,5
81123cb4:	111d3c00 	call	8111d3c0 <__hi0bits>
81123cb8:	d8c00017 	ldw	r3,0(sp)
81123cbc:	8885c83a 	sub	r2,r17,r2
81123cc0:	1c800017 	ldw	r18,0(r3)
81123cc4:	9080c716 	blt	r18,r2,81123fe4 <__gethex+0x518>
81123cc8:	1480e416 	blt	r2,r18,8112405c <__gethex+0x590>
81123ccc:	0027883a 	mov	r19,zero
81123cd0:	d8c00017 	ldw	r3,0(sp)
81123cd4:	18800217 	ldw	r2,8(r3)
81123cd8:	15c08d16 	blt	r2,r23,81123f10 <__gethex+0x444>
81123cdc:	d8c00017 	ldw	r3,0(sp)
81123ce0:	18800117 	ldw	r2,4(r3)
81123ce4:	b880aa0e 	bge	r23,r2,81123f90 <__gethex+0x4c4>
81123ce8:	15efc83a 	sub	r23,r2,r23
81123cec:	bc80ed16 	blt	r23,r18,811240a4 <__gethex+0x5d8>
81123cf0:	18c00317 	ldw	r3,12(r3)
81123cf4:	01000084 	movi	r4,2
81123cf8:	19014926 	beq	r3,r4,81124220 <__gethex+0x754>
81123cfc:	010000c4 	movi	r4,3
81123d00:	19012e26 	beq	r3,r4,811241bc <__gethex+0x6f0>
81123d04:	01000044 	movi	r4,1
81123d08:	19014826 	beq	r3,r4,8112422c <__gethex+0x760>
81123d0c:	d9000117 	ldw	r4,4(sp)
81123d10:	800b883a 	mov	r5,r16
81123d14:	111d1640 	call	8111d164 <_Bfree>
81123d18:	d8801517 	ldw	r2,84(sp)
81123d1c:	10000015 	stw	zero,0(r2)
81123d20:	00801404 	movi	r2,80
81123d24:	00002b06 	br	81123dd4 <__gethex+0x308>
81123d28:	735f883a 	add	r15,r14,r13
81123d2c:	7d7fce36 	bltu	r15,r21,81123c68 <__reset+0xfb103c68>
81123d30:	7809883a 	mov	r4,r15
81123d34:	b00d883a 	mov	r6,r22
81123d38:	900b883a 	mov	r5,r18
81123d3c:	da400515 	stw	r9,20(sp)
81123d40:	da800a15 	stw	r10,40(sp)
81123d44:	dac00915 	stw	r11,36(sp)
81123d48:	db400815 	stw	r13,32(sp)
81123d4c:	db800615 	stw	r14,24(sp)
81123d50:	dbc00715 	stw	r15,28(sp)
81123d54:	11245680 	call	81124568 <strncmp>
81123d58:	da400517 	ldw	r9,20(sp)
81123d5c:	da800a17 	ldw	r10,40(sp)
81123d60:	dac00917 	ldw	r11,36(sp)
81123d64:	db400817 	ldw	r13,32(sp)
81123d68:	db800617 	ldw	r14,24(sp)
81123d6c:	dbc00717 	ldw	r15,28(sp)
81123d70:	103fbd1e 	bne	r2,zero,81123c68 <__reset+0xfb103c68>
81123d74:	7839883a 	mov	fp,r15
81123d78:	af3fb836 	bltu	r21,fp,81123c5c <__reset+0xfb103c5c>
81123d7c:	003fc506 	br	81123c94 <__reset+0xfb103c94>
81123d80:	04c00104 	movi	r19,4
81123d84:	52400015 	stw	r9,0(r10)
81123d88:	000b883a 	mov	r5,zero
81123d8c:	54d5883a 	add	r10,r10,r19
81123d90:	0013883a 	mov	r9,zero
81123d94:	003fb706 	br	81123c74 <__reset+0xfb103c74>
81123d98:	b00d883a 	mov	r6,r22
81123d9c:	900b883a 	mov	r5,r18
81123da0:	a809883a 	mov	r4,r21
81123da4:	11245680 	call	81124568 <strncmp>
81123da8:	10006426 	beq	r2,zero,81123f3c <__gethex+0x470>
81123dac:	a8800003 	ldbu	r2,0(r21)
81123db0:	a821883a 	mov	r16,r21
81123db4:	10803fcc 	andi	r2,r2,255
81123db8:	01001404 	movi	r4,80
81123dbc:	11001126 	beq	r2,r4,81123e04 <__gethex+0x338>
81123dc0:	01001c04 	movi	r4,112
81123dc4:	11000f26 	beq	r2,r4,81123e04 <__gethex+0x338>
81123dc8:	9c000015 	stw	r16,0(r19)
81123dcc:	8800831e 	bne	r17,zero,81123fdc <__gethex+0x510>
81123dd0:	00800184 	movi	r2,6
81123dd4:	dfc01417 	ldw	ra,80(sp)
81123dd8:	df001317 	ldw	fp,76(sp)
81123ddc:	ddc01217 	ldw	r23,72(sp)
81123de0:	dd801117 	ldw	r22,68(sp)
81123de4:	dd401017 	ldw	r21,64(sp)
81123de8:	dd000f17 	ldw	r20,60(sp)
81123dec:	dcc00e17 	ldw	r19,56(sp)
81123df0:	dc800d17 	ldw	r18,52(sp)
81123df4:	dc400c17 	ldw	r17,48(sp)
81123df8:	dc000b17 	ldw	r16,44(sp)
81123dfc:	dec01504 	addi	sp,sp,84
81123e00:	f800283a 	ret
81123e04:	002f883a 	mov	r23,zero
81123e08:	02800044 	movi	r10,1
81123e0c:	80800043 	ldbu	r2,1(r16)
81123e10:	01400ac4 	movi	r5,43
81123e14:	11003fcc 	andi	r4,r2,255
81123e18:	21406e26 	beq	r4,r5,81123fd4 <__gethex+0x508>
81123e1c:	01400b44 	movi	r5,45
81123e20:	21404226 	beq	r4,r5,81123f2c <__gethex+0x460>
81123e24:	81400044 	addi	r5,r16,1
81123e28:	000d883a 	mov	r6,zero
81123e2c:	10803fcc 	andi	r2,r2,255
81123e30:	a085883a 	add	r2,r20,r2
81123e34:	11000003 	ldbu	r4,0(r2)
81123e38:	03000604 	movi	r12,24
81123e3c:	20bfffc4 	addi	r2,r4,-1
81123e40:	10803fcc 	andi	r2,r2,255
81123e44:	60bf6d36 	bltu	r12,r2,81123bfc <__reset+0xfb103bfc>
81123e48:	2ac00043 	ldbu	r11,1(r5)
81123e4c:	20803fcc 	andi	r2,r4,255
81123e50:	01204534 	movhi	r4,33044
81123e54:	21001204 	addi	r4,r4,72
81123e58:	22c9883a 	add	r4,r4,r11
81123e5c:	23400003 	ldbu	r13,0(r4)
81123e60:	10bffc04 	addi	r2,r2,-16
81123e64:	29400044 	addi	r5,r5,1
81123e68:	693fffc4 	addi	r4,r13,-1
81123e6c:	21003fcc 	andi	r4,r4,255
81123e70:	6b403fcc 	andi	r13,r13,255
81123e74:	61000b36 	bltu	r12,r4,81123ea4 <__gethex+0x3d8>
81123e78:	29400044 	addi	r5,r5,1
81123e7c:	29000003 	ldbu	r4,0(r5)
81123e80:	108002a4 	muli	r2,r2,10
81123e84:	a109883a 	add	r4,r20,r4
81123e88:	22c00003 	ldbu	r11,0(r4)
81123e8c:	1345883a 	add	r2,r2,r13
81123e90:	10bffc04 	addi	r2,r2,-16
81123e94:	593fffc4 	addi	r4,r11,-1
81123e98:	21003fcc 	andi	r4,r4,255
81123e9c:	5b403fcc 	andi	r13,r11,255
81123ea0:	613ff52e 	bgeu	r12,r4,81123e78 <__reset+0xfb103e78>
81123ea4:	30000126 	beq	r6,zero,81123eac <__gethex+0x3e0>
81123ea8:	0085c83a 	sub	r2,zero,r2
81123eac:	8039883a 	mov	fp,r16
81123eb0:	b8af883a 	add	r23,r23,r2
81123eb4:	2821883a 	mov	r16,r5
81123eb8:	003f5106 	br	81123c00 <__reset+0xfb103c00>
81123ebc:	80800217 	ldw	r2,8(r16)
81123ec0:	e080f00e 	bge	fp,r2,81124284 <__gethex+0x7b8>
81123ec4:	e007883a 	mov	r3,fp
81123ec8:	18800144 	addi	r2,r3,5
81123ecc:	1085883a 	add	r2,r2,r2
81123ed0:	18c00044 	addi	r3,r3,1
81123ed4:	1085883a 	add	r2,r2,r2
81123ed8:	8085883a 	add	r2,r16,r2
81123edc:	80c00415 	stw	r3,16(r16)
81123ee0:	01000044 	movi	r4,1
81123ee4:	11000015 	stw	r4,0(r2)
81123ee8:	00800084 	movi	r2,2
81123eec:	8880d826 	beq	r17,r2,81124250 <__gethex+0x784>
81123ef0:	e0c0ac0e 	bge	fp,r3,811241a4 <__gethex+0x6d8>
81123ef4:	01400044 	movi	r5,1
81123ef8:	8009883a 	mov	r4,r16
81123efc:	11239cc0 	call	811239cc <rshift>
81123f00:	d8c00017 	ldw	r3,0(sp)
81123f04:	bdc00044 	addi	r23,r23,1
81123f08:	18800217 	ldw	r2,8(r3)
81123f0c:	15c0a70e 	bge	r2,r23,811241ac <__gethex+0x6e0>
81123f10:	d9000117 	ldw	r4,4(sp)
81123f14:	800b883a 	mov	r5,r16
81123f18:	111d1640 	call	8111d164 <_Bfree>
81123f1c:	d9001517 	ldw	r4,84(sp)
81123f20:	008028c4 	movi	r2,163
81123f24:	20000015 	stw	zero,0(r4)
81123f28:	003faa06 	br	81123dd4 <__reset+0xfb103dd4>
81123f2c:	01800044 	movi	r6,1
81123f30:	80800083 	ldbu	r2,2(r16)
81123f34:	81400084 	addi	r5,r16,2
81123f38:	003fbc06 	br	81123e2c <__reset+0xfb103e2c>
81123f3c:	ada1883a 	add	r16,r21,r22
81123f40:	81000003 	ldbu	r4,0(r16)
81123f44:	21403fcc 	andi	r5,r4,255
81123f48:	a145883a 	add	r2,r20,r5
81123f4c:	10800003 	ldbu	r2,0(r2)
81123f50:	11803fcc 	andi	r6,r2,255
81123f54:	30004f26 	beq	r6,zero,81124094 <__gethex+0x5c8>
81123f58:	00c00c04 	movi	r3,48
81123f5c:	802b883a 	mov	r21,r16
81123f60:	28c0061e 	bne	r5,r3,81123f7c <__gethex+0x4b0>
81123f64:	2809883a 	mov	r4,r5
81123f68:	ad400044 	addi	r21,r21,1
81123f6c:	a8800003 	ldbu	r2,0(r21)
81123f70:	113ffd26 	beq	r2,r4,81123f68 <__reset+0xfb103f68>
81123f74:	a085883a 	add	r2,r20,r2
81123f78:	10800003 	ldbu	r2,0(r2)
81123f7c:	10803fcc 	andi	r2,r2,255
81123f80:	1015003a 	cmpeq	r10,r2,zero
81123f84:	802f883a 	mov	r23,r16
81123f88:	04400044 	movi	r17,1
81123f8c:	003eff06 	br	81123b8c <__reset+0xfb103b8c>
81123f90:	04400044 	movi	r17,1
81123f94:	98000926 	beq	r19,zero,81123fbc <__gethex+0x4f0>
81123f98:	d8c00017 	ldw	r3,0(sp)
81123f9c:	18800317 	ldw	r2,12(r3)
81123fa0:	00c00084 	movi	r3,2
81123fa4:	10c06826 	beq	r2,r3,81124148 <__gethex+0x67c>
81123fa8:	00c000c4 	movi	r3,3
81123fac:	10c06a26 	beq	r2,r3,81124158 <__gethex+0x68c>
81123fb0:	00c00044 	movi	r3,1
81123fb4:	10c08d26 	beq	r2,r3,811241ec <__gethex+0x720>
81123fb8:	8c400414 	ori	r17,r17,16
81123fbc:	d9001517 	ldw	r4,84(sp)
81123fc0:	d8c00417 	ldw	r3,16(sp)
81123fc4:	8805883a 	mov	r2,r17
81123fc8:	24000015 	stw	r16,0(r4)
81123fcc:	1dc00015 	stw	r23,0(r3)
81123fd0:	003f8006 	br	81123dd4 <__reset+0xfb103dd4>
81123fd4:	000d883a 	mov	r6,zero
81123fd8:	003fd506 	br	81123f30 <__reset+0xfb103f30>
81123fdc:	0005883a 	mov	r2,zero
81123fe0:	003f7c06 	br	81123dd4 <__reset+0xfb103dd4>
81123fe4:	14a3c83a 	sub	r17,r2,r18
81123fe8:	880b883a 	mov	r5,r17
81123fec:	8009883a 	mov	r4,r16
81123ff0:	111e0840 	call	8111e084 <__any_on>
81123ff4:	10002926 	beq	r2,zero,8112409c <__gethex+0x5d0>
81123ff8:	897fffc4 	addi	r5,r17,-1
81123ffc:	2807d17a 	srai	r3,r5,5
81124000:	d8800217 	ldw	r2,8(sp)
81124004:	290007cc 	andi	r4,r5,31
81124008:	18c7883a 	add	r3,r3,r3
8112400c:	18c7883a 	add	r3,r3,r3
81124010:	04c00044 	movi	r19,1
81124014:	10c7883a 	add	r3,r2,r3
81124018:	9908983a 	sll	r4,r19,r4
8112401c:	18c00017 	ldw	r3,0(r3)
81124020:	20c6703a 	and	r3,r4,r3
81124024:	18000626 	beq	r3,zero,81124040 <__gethex+0x574>
81124028:	99407b0e 	bge	r19,r5,81124218 <__gethex+0x74c>
8112402c:	897fff84 	addi	r5,r17,-2
81124030:	8009883a 	mov	r4,r16
81124034:	111e0840 	call	8111e084 <__any_on>
81124038:	10007726 	beq	r2,zero,81124218 <__gethex+0x74c>
8112403c:	04c000c4 	movi	r19,3
81124040:	880b883a 	mov	r5,r17
81124044:	8009883a 	mov	r4,r16
81124048:	11239cc0 	call	811239cc <rshift>
8112404c:	bc6f883a 	add	r23,r23,r17
81124050:	003f1f06 	br	81123cd0 <__reset+0xfb103cd0>
81124054:	002f883a 	mov	r23,zero
81124058:	003ee306 	br	81123be8 <__reset+0xfb103be8>
8112405c:	d9000117 	ldw	r4,4(sp)
81124060:	90a3c83a 	sub	r17,r18,r2
81124064:	800b883a 	mov	r5,r16
81124068:	880d883a 	mov	r6,r17
8112406c:	111d8640 	call	8111d864 <__lshift>
81124070:	10c00504 	addi	r3,r2,20
81124074:	1021883a 	mov	r16,r2
81124078:	bc6fc83a 	sub	r23,r23,r17
8112407c:	d8c00215 	stw	r3,8(sp)
81124080:	0027883a 	mov	r19,zero
81124084:	003f1206 	br	81123cd0 <__reset+0xfb103cd0>
81124088:	1d400084 	addi	r21,r3,2
8112408c:	0023883a 	mov	r17,zero
81124090:	003eb406 	br	81123b64 <__reset+0xfb103b64>
81124094:	2005883a 	mov	r2,r4
81124098:	003f4606 	br	81123db4 <__reset+0xfb103db4>
8112409c:	0027883a 	mov	r19,zero
811240a0:	003fe706 	br	81124040 <__reset+0xfb104040>
811240a4:	bc7fffc4 	addi	r17,r23,-1
811240a8:	9800421e 	bne	r19,zero,811241b4 <__gethex+0x6e8>
811240ac:	88000426 	beq	r17,zero,811240c0 <__gethex+0x5f4>
811240b0:	880b883a 	mov	r5,r17
811240b4:	8009883a 	mov	r4,r16
811240b8:	111e0840 	call	8111e084 <__any_on>
811240bc:	1027883a 	mov	r19,r2
811240c0:	8805d17a 	srai	r2,r17,5
811240c4:	d8c00217 	ldw	r3,8(sp)
811240c8:	8c4007cc 	andi	r17,r17,31
811240cc:	1085883a 	add	r2,r2,r2
811240d0:	1085883a 	add	r2,r2,r2
811240d4:	1885883a 	add	r2,r3,r2
811240d8:	00c00044 	movi	r3,1
811240dc:	1c62983a 	sll	r17,r3,r17
811240e0:	10800017 	ldw	r2,0(r2)
811240e4:	8884703a 	and	r2,r17,r2
811240e8:	10000126 	beq	r2,zero,811240f0 <__gethex+0x624>
811240ec:	9cc00094 	ori	r19,r19,2
811240f0:	b80b883a 	mov	r5,r23
811240f4:	8009883a 	mov	r4,r16
811240f8:	11239cc0 	call	811239cc <rshift>
811240fc:	d8c00017 	ldw	r3,0(sp)
81124100:	95e5c83a 	sub	r18,r18,r23
81124104:	04400084 	movi	r17,2
81124108:	1dc00117 	ldw	r23,4(r3)
8112410c:	003fa106 	br	81123f94 <__reset+0xfb103f94>
81124110:	85af883a 	add	r23,r16,r22
81124114:	b8800003 	ldbu	r2,0(r23)
81124118:	b821883a 	mov	r16,r23
8112411c:	11003fcc 	andi	r4,r2,255
81124120:	a109883a 	add	r4,r20,r4
81124124:	21000003 	ldbu	r4,0(r4)
81124128:	203eaa26 	beq	r4,zero,81123bd4 <__reset+0xfb103bd4>
8112412c:	84000044 	addi	r16,r16,1
81124130:	80800003 	ldbu	r2,0(r16)
81124134:	11003fcc 	andi	r4,r2,255
81124138:	a109883a 	add	r4,r20,r4
8112413c:	21000003 	ldbu	r4,0(r4)
81124140:	203ffa1e 	bne	r4,zero,8112412c <__reset+0xfb10412c>
81124144:	003ea306 	br	81123bd4 <__reset+0xfb103bd4>
81124148:	d9001617 	ldw	r4,88(sp)
8112414c:	00800044 	movi	r2,1
81124150:	1109c83a 	sub	r4,r2,r4
81124154:	d9001615 	stw	r4,88(sp)
81124158:	d8801617 	ldw	r2,88(sp)
8112415c:	103f9626 	beq	r2,zero,81123fb8 <__reset+0xfb103fb8>
81124160:	87000417 	ldw	fp,16(r16)
81124164:	d9800217 	ldw	r6,8(sp)
81124168:	013fffc4 	movi	r4,-1
8112416c:	e727883a 	add	r19,fp,fp
81124170:	9ce7883a 	add	r19,r19,r19
81124174:	3005883a 	mov	r2,r6
81124178:	34cb883a 	add	r5,r6,r19
8112417c:	00000306 	br	8112418c <__gethex+0x6c0>
81124180:	10000015 	stw	zero,0(r2)
81124184:	10800104 	addi	r2,r2,4
81124188:	117f4c2e 	bgeu	r2,r5,81123ebc <__reset+0xfb103ebc>
8112418c:	10c00017 	ldw	r3,0(r2)
81124190:	193ffb26 	beq	r3,r4,81124180 <__reset+0xfb104180>
81124194:	18c00044 	addi	r3,r3,1
81124198:	10c00015 	stw	r3,0(r2)
8112419c:	00800084 	movi	r2,2
811241a0:	88802b26 	beq	r17,r2,81124250 <__gethex+0x784>
811241a4:	948007cc 	andi	r18,r18,31
811241a8:	90002f1e 	bne	r18,zero,81124268 <__gethex+0x79c>
811241ac:	04400844 	movi	r17,33
811241b0:	003f8206 	br	81123fbc <__reset+0xfb103fbc>
811241b4:	04c00044 	movi	r19,1
811241b8:	003fc106 	br	811240c0 <__reset+0xfb1040c0>
811241bc:	d8c01617 	ldw	r3,88(sp)
811241c0:	183ed226 	beq	r3,zero,81123d0c <__reset+0xfb103d0c>
811241c4:	d8c00417 	ldw	r3,16(sp)
811241c8:	d9001517 	ldw	r4,84(sp)
811241cc:	18800015 	stw	r2,0(r3)
811241d0:	d8c00217 	ldw	r3,8(sp)
811241d4:	00800044 	movi	r2,1
811241d8:	80800415 	stw	r2,16(r16)
811241dc:	18800015 	stw	r2,0(r3)
811241e0:	24000015 	stw	r16,0(r4)
811241e4:	00801884 	movi	r2,98
811241e8:	003efa06 	br	81123dd4 <__reset+0xfb103dd4>
811241ec:	9880008c 	andi	r2,r19,2
811241f0:	103f7126 	beq	r2,zero,81123fb8 <__reset+0xfb103fb8>
811241f4:	d8c00217 	ldw	r3,8(sp)
811241f8:	18800017 	ldw	r2,0(r3)
811241fc:	9884b03a 	or	r2,r19,r2
81124200:	1080004c 	andi	r2,r2,1
81124204:	103fd61e 	bne	r2,zero,81124160 <__reset+0xfb104160>
81124208:	003f6b06 	br	81123fb8 <__reset+0xfb103fb8>
8112420c:	da800217 	ldw	r10,8(sp)
81124210:	0013883a 	mov	r9,zero
81124214:	003e9f06 	br	81123c94 <__reset+0xfb103c94>
81124218:	04c00084 	movi	r19,2
8112421c:	003f8806 	br	81124040 <__reset+0xfb104040>
81124220:	d9001617 	ldw	r4,88(sp)
81124224:	203fe726 	beq	r4,zero,811241c4 <__reset+0xfb1041c4>
81124228:	003eb806 	br	81123d0c <__reset+0xfb103d0c>
8112422c:	95feb71e 	bne	r18,r23,81123d0c <__reset+0xfb103d0c>
81124230:	1cbfe40e 	bge	r3,r18,811241c4 <__reset+0xfb1041c4>
81124234:	917fffc4 	addi	r5,r18,-1
81124238:	8009883a 	mov	r4,r16
8112423c:	111e0840 	call	8111e084 <__any_on>
81124240:	103eb226 	beq	r2,zero,81123d0c <__reset+0xfb103d0c>
81124244:	d8c00017 	ldw	r3,0(sp)
81124248:	18800117 	ldw	r2,4(r3)
8112424c:	003fdd06 	br	811241c4 <__reset+0xfb1041c4>
81124250:	d8c00017 	ldw	r3,0(sp)
81124254:	18800017 	ldw	r2,0(r3)
81124258:	10bfffc4 	addi	r2,r2,-1
8112425c:	90801c26 	beq	r18,r2,811242d0 <__gethex+0x804>
81124260:	04400884 	movi	r17,34
81124264:	003f5506 	br	81123fbc <__reset+0xfb103fbc>
81124268:	34c5883a 	add	r2,r6,r19
8112426c:	113fff17 	ldw	r4,-4(r2)
81124270:	111d3c00 	call	8111d3c0 <__hi0bits>
81124274:	00c00804 	movi	r3,32
81124278:	1ca5c83a 	sub	r18,r3,r18
8112427c:	14bfcb0e 	bge	r2,r18,811241ac <__reset+0xfb1041ac>
81124280:	003f1c06 	br	81123ef4 <__reset+0xfb103ef4>
81124284:	81400117 	ldw	r5,4(r16)
81124288:	d9000117 	ldw	r4,4(sp)
8112428c:	29400044 	addi	r5,r5,1
81124290:	111d0b40 	call	8111d0b4 <_Balloc>
81124294:	81800417 	ldw	r6,16(r16)
81124298:	81400304 	addi	r5,r16,12
8112429c:	11000304 	addi	r4,r2,12
811242a0:	31800084 	addi	r6,r6,2
811242a4:	318d883a 	add	r6,r6,r6
811242a8:	318d883a 	add	r6,r6,r6
811242ac:	1029883a 	mov	r20,r2
811242b0:	1112e840 	call	81112e84 <memcpy>
811242b4:	d9000117 	ldw	r4,4(sp)
811242b8:	800b883a 	mov	r5,r16
811242bc:	a021883a 	mov	r16,r20
811242c0:	111d1640 	call	8111d164 <_Bfree>
811242c4:	a0c00417 	ldw	r3,16(r20)
811242c8:	a1800504 	addi	r6,r20,20
811242cc:	003efe06 	br	81123ec8 <__reset+0xfb103ec8>
811242d0:	9005d17a 	srai	r2,r18,5
811242d4:	944007cc 	andi	r17,r18,31
811242d8:	1085883a 	add	r2,r2,r2
811242dc:	1085883a 	add	r2,r2,r2
811242e0:	3087883a 	add	r3,r6,r2
811242e4:	00800044 	movi	r2,1
811242e8:	1462983a 	sll	r17,r2,r17
811242ec:	18800017 	ldw	r2,0(r3)
811242f0:	8884703a 	and	r2,r17,r2
811242f4:	1022c03a 	cmpne	r17,r2,zero
811242f8:	00800884 	movi	r2,34
811242fc:	1463c83a 	sub	r17,r2,r17
81124300:	003f2e06 	br	81123fbc <__reset+0xfb103fbc>

81124304 <__hexnan>:
81124304:	defff904 	addi	sp,sp,-28
81124308:	de00012e 	bgeu	sp,et,81124310 <__hexnan+0xc>
8112430c:	003b68fa 	trap	3
81124310:	dc800215 	stw	r18,8(sp)
81124314:	2c800017 	ldw	r18,0(r5)
81124318:	dfc00615 	stw	ra,24(sp)
8112431c:	dd400515 	stw	r21,20(sp)
81124320:	901fd17a 	srai	r15,r18,5
81124324:	dd000415 	stw	r20,16(sp)
81124328:	dcc00315 	stw	r19,12(sp)
8112432c:	7bdf883a 	add	r15,r15,r15
81124330:	7bdf883a 	add	r15,r15,r15
81124334:	dc400115 	stw	r17,4(sp)
81124338:	dc000015 	stw	r16,0(sp)
8112433c:	948007cc 	andi	r18,r18,31
81124340:	33df883a 	add	r15,r6,r15
81124344:	90000126 	beq	r18,zero,8112434c <__hexnan+0x48>
81124348:	7bc00104 	addi	r15,r15,4
8112434c:	22000017 	ldw	r8,0(r4)
81124350:	7affff04 	addi	r11,r15,-4
81124354:	03a04534 	movhi	r14,33044
81124358:	783fff15 	stw	zero,-4(r15)
8112435c:	581b883a 	mov	r13,r11
81124360:	580b883a 	mov	r5,r11
81124364:	000f883a 	mov	r7,zero
81124368:	003f883a 	mov	ra,zero
8112436c:	0019883a 	mov	r12,zero
81124370:	73801204 	addi	r14,r14,72
81124374:	04400204 	movi	r17,8
81124378:	04000804 	movi	r16,32
8112437c:	04c001c4 	movi	r19,7
81124380:	42000044 	addi	r8,r8,1
81124384:	40c00003 	ldbu	r3,0(r8)
81124388:	18001d26 	beq	r3,zero,81124400 <__hexnan+0xfc>
8112438c:	70c5883a 	add	r2,r14,r3
81124390:	10800003 	ldbu	r2,0(r2)
81124394:	12403fcc 	andi	r9,r2,255
81124398:	4800301e 	bne	r9,zero,8112445c <__hexnan+0x158>
8112439c:	80c04236 	bltu	r16,r3,811244a8 <__hexnan+0x1a4>
811243a0:	fb3ff70e 	bge	ra,r12,81124380 <__reset+0xfb104380>
811243a4:	2b40112e 	bgeu	r5,r13,811243ec <__hexnan+0xe8>
811243a8:	99c01016 	blt	r19,r7,811243ec <__hexnan+0xe8>
811243ac:	89e9c83a 	sub	r20,r17,r7
811243b0:	a529883a 	add	r20,r20,r20
811243b4:	2a800017 	ldw	r10,0(r5)
811243b8:	a529883a 	add	r20,r20,r20
811243bc:	852bc83a 	sub	r21,r16,r20
811243c0:	28c00104 	addi	r3,r5,4
811243c4:	2805883a 	mov	r2,r5
811243c8:	19c00017 	ldw	r7,0(r3)
811243cc:	10800104 	addi	r2,r2,4
811243d0:	18c00104 	addi	r3,r3,4
811243d4:	3d52983a 	sll	r9,r7,r21
811243d8:	4a92b03a 	or	r9,r9,r10
811243dc:	3d14d83a 	srl	r10,r7,r20
811243e0:	127fff15 	stw	r9,-4(r2)
811243e4:	1abfff15 	stw	r10,-4(r3)
811243e8:	137ff736 	bltu	r2,r13,811243c8 <__reset+0xfb1043c8>
811243ec:	31402836 	bltu	r6,r5,81124490 <__hexnan+0x18c>
811243f0:	42000044 	addi	r8,r8,1
811243f4:	40c00003 	ldbu	r3,0(r8)
811243f8:	01c00204 	movi	r7,8
811243fc:	183fe31e 	bne	r3,zero,8112438c <__reset+0xfb10438c>
81124400:	60002b26 	beq	r12,zero,811244b0 <__hexnan+0x1ac>
81124404:	2b40022e 	bgeu	r5,r13,81124410 <__hexnan+0x10c>
81124408:	008001c4 	movi	r2,7
8112440c:	11c0430e 	bge	r2,r7,8112451c <__hexnan+0x218>
81124410:	3140312e 	bgeu	r6,r5,811244d8 <__hexnan+0x1d4>
81124414:	3007883a 	mov	r3,r6
81124418:	29000017 	ldw	r4,0(r5)
8112441c:	18800104 	addi	r2,r3,4
81124420:	29400104 	addi	r5,r5,4
81124424:	19000015 	stw	r4,0(r3)
81124428:	1007883a 	mov	r3,r2
8112442c:	597ffa2e 	bgeu	r11,r5,81124418 <__reset+0xfb104418>
81124430:	10000015 	stw	zero,0(r2)
81124434:	10800104 	addi	r2,r2,4
81124438:	58bffd2e 	bgeu	r11,r2,81124430 <__reset+0xfb104430>
8112443c:	78bfff17 	ldw	r2,-4(r15)
81124440:	1000041e 	bne	r2,zero,81124454 <__hexnan+0x150>
81124444:	32c02d26 	beq	r6,r11,811244fc <__hexnan+0x1f8>
81124448:	5affff04 	addi	r11,r11,-4
8112444c:	58800017 	ldw	r2,0(r11)
81124450:	103ffc26 	beq	r2,zero,81124444 <__reset+0xfb104444>
81124454:	00800144 	movi	r2,5
81124458:	00001606 	br	811244b4 <__hexnan+0x1b0>
8112445c:	39c00044 	addi	r7,r7,1
81124460:	63000044 	addi	r12,r12,1
81124464:	89c0040e 	bge	r17,r7,81124478 <__hexnan+0x174>
81124468:	317fc52e 	bgeu	r6,r5,81124380 <__reset+0xfb104380>
8112446c:	283fff15 	stw	zero,-4(r5)
81124470:	01c00044 	movi	r7,1
81124474:	297fff04 	addi	r5,r5,-4
81124478:	28c00017 	ldw	r3,0(r5)
8112447c:	108003cc 	andi	r2,r2,15
81124480:	1806913a 	slli	r3,r3,4
81124484:	1884b03a 	or	r2,r3,r2
81124488:	28800015 	stw	r2,0(r5)
8112448c:	003fbc06 	br	81124380 <__reset+0xfb104380>
81124490:	2b7fff04 	addi	r13,r5,-4
81124494:	283fff15 	stw	zero,-4(r5)
81124498:	603f883a 	mov	ra,r12
8112449c:	680b883a 	mov	r5,r13
811244a0:	000f883a 	mov	r7,zero
811244a4:	003fb606 	br	81124380 <__reset+0xfb104380>
811244a8:	00800a44 	movi	r2,41
811244ac:	18801726 	beq	r3,r2,8112450c <__hexnan+0x208>
811244b0:	00800104 	movi	r2,4
811244b4:	dfc00617 	ldw	ra,24(sp)
811244b8:	dd400517 	ldw	r21,20(sp)
811244bc:	dd000417 	ldw	r20,16(sp)
811244c0:	dcc00317 	ldw	r19,12(sp)
811244c4:	dc800217 	ldw	r18,8(sp)
811244c8:	dc400117 	ldw	r17,4(sp)
811244cc:	dc000017 	ldw	r16,0(sp)
811244d0:	dec00704 	addi	sp,sp,28
811244d4:	f800283a 	ret
811244d8:	903fd826 	beq	r18,zero,8112443c <__reset+0xfb10443c>
811244dc:	00c00804 	movi	r3,32
811244e0:	1ca5c83a 	sub	r18,r3,r18
811244e4:	00ffffc4 	movi	r3,-1
811244e8:	78bfff17 	ldw	r2,-4(r15)
811244ec:	1c86d83a 	srl	r3,r3,r18
811244f0:	1884703a 	and	r2,r3,r2
811244f4:	78bfff15 	stw	r2,-4(r15)
811244f8:	003fd106 	br	81124440 <__reset+0xfb104440>
811244fc:	00800044 	movi	r2,1
81124500:	58800015 	stw	r2,0(r11)
81124504:	00800144 	movi	r2,5
81124508:	003fea06 	br	811244b4 <__reset+0xfb1044b4>
8112450c:	42000044 	addi	r8,r8,1
81124510:	22000015 	stw	r8,0(r4)
81124514:	603fbb1e 	bne	r12,zero,81124404 <__reset+0xfb104404>
81124518:	003fe506 	br	811244b0 <__reset+0xfb1044b0>
8112451c:	02400204 	movi	r9,8
81124520:	49d3c83a 	sub	r9,r9,r7
81124524:	4a53883a 	add	r9,r9,r9
81124528:	2a000017 	ldw	r8,0(r5)
8112452c:	4a53883a 	add	r9,r9,r9
81124530:	02800804 	movi	r10,32
81124534:	5255c83a 	sub	r10,r10,r9
81124538:	28c00104 	addi	r3,r5,4
8112453c:	2805883a 	mov	r2,r5
81124540:	19c00017 	ldw	r7,0(r3)
81124544:	10800104 	addi	r2,r2,4
81124548:	18c00104 	addi	r3,r3,4
8112454c:	3a88983a 	sll	r4,r7,r10
81124550:	2208b03a 	or	r4,r4,r8
81124554:	3a50d83a 	srl	r8,r7,r9
81124558:	113fff15 	stw	r4,-4(r2)
8112455c:	1a3fff15 	stw	r8,-4(r3)
81124560:	137ff736 	bltu	r2,r13,81124540 <__reset+0xfb104540>
81124564:	003faa06 	br	81124410 <__reset+0xfb104410>

81124568 <strncmp>:
81124568:	30003126 	beq	r6,zero,81124630 <strncmp+0xc8>
8112456c:	2144b03a 	or	r2,r4,r5
81124570:	108000cc 	andi	r2,r2,3
81124574:	10001e1e 	bne	r2,zero,811245f0 <strncmp+0x88>
81124578:	024000c4 	movi	r9,3
8112457c:	49801c2e 	bgeu	r9,r6,811245f0 <strncmp+0x88>
81124580:	20800017 	ldw	r2,0(r4)
81124584:	28c00017 	ldw	r3,0(r5)
81124588:	10c0191e 	bne	r2,r3,811245f0 <strncmp+0x88>
8112458c:	31bfff04 	addi	r6,r6,-4
81124590:	30002726 	beq	r6,zero,81124630 <strncmp+0xc8>
81124594:	02ffbff4 	movhi	r11,65279
81124598:	5affbfc4 	addi	r11,r11,-257
8112459c:	0086303a 	nor	r3,zero,r2
811245a0:	02a02074 	movhi	r10,32897
811245a4:	12c5883a 	add	r2,r2,r11
811245a8:	52a02004 	addi	r10,r10,-32640
811245ac:	10c4703a 	and	r2,r2,r3
811245b0:	1284703a 	and	r2,r2,r10
811245b4:	10000b26 	beq	r2,zero,811245e4 <strncmp+0x7c>
811245b8:	00001d06 	br	81124630 <strncmp+0xc8>
811245bc:	20c00017 	ldw	r3,0(r4)
811245c0:	29c00017 	ldw	r7,0(r5)
811245c4:	1ad1883a 	add	r8,r3,r11
811245c8:	00c4303a 	nor	r2,zero,r3
811245cc:	4084703a 	and	r2,r8,r2
811245d0:	1284703a 	and	r2,r2,r10
811245d4:	19c0061e 	bne	r3,r7,811245f0 <strncmp+0x88>
811245d8:	31bfff04 	addi	r6,r6,-4
811245dc:	30001426 	beq	r6,zero,81124630 <strncmp+0xc8>
811245e0:	1000131e 	bne	r2,zero,81124630 <strncmp+0xc8>
811245e4:	21000104 	addi	r4,r4,4
811245e8:	29400104 	addi	r5,r5,4
811245ec:	49bff336 	bltu	r9,r6,811245bc <__reset+0xfb1045bc>
811245f0:	28800007 	ldb	r2,0(r5)
811245f4:	20c00007 	ldb	r3,0(r4)
811245f8:	31bfffc4 	addi	r6,r6,-1
811245fc:	10c0081e 	bne	r2,r3,81124620 <strncmp+0xb8>
81124600:	30000b26 	beq	r6,zero,81124630 <strncmp+0xc8>
81124604:	10000a26 	beq	r2,zero,81124630 <strncmp+0xc8>
81124608:	21000044 	addi	r4,r4,1
8112460c:	29400044 	addi	r5,r5,1
81124610:	20800007 	ldb	r2,0(r4)
81124614:	28c00007 	ldb	r3,0(r5)
81124618:	31bfffc4 	addi	r6,r6,-1
8112461c:	10fff826 	beq	r2,r3,81124600 <__reset+0xfb104600>
81124620:	20800003 	ldbu	r2,0(r4)
81124624:	28c00003 	ldbu	r3,0(r5)
81124628:	10c5c83a 	sub	r2,r2,r3
8112462c:	f800283a 	ret
81124630:	0005883a 	mov	r2,zero
81124634:	f800283a 	ret

81124638 <_wcrtomb_r>:
81124638:	defff604 	addi	sp,sp,-40
8112463c:	00a04534 	movhi	r2,33044
81124640:	de00012e 	bgeu	sp,et,81124648 <_wcrtomb_r+0x10>
81124644:	003b68fa 	trap	3
81124648:	10895f04 	addi	r2,r2,9596
8112464c:	dc800815 	stw	r18,32(sp)
81124650:	dc400715 	stw	r17,28(sp)
81124654:	dc000615 	stw	r16,24(sp)
81124658:	dfc00915 	stw	ra,36(sp)
8112465c:	2021883a 	mov	r16,r4
81124660:	3823883a 	mov	r17,r7
81124664:	14800017 	ldw	r18,0(r2)
81124668:	28001426 	beq	r5,zero,811246bc <_wcrtomb_r+0x84>
8112466c:	d9400415 	stw	r5,16(sp)
81124670:	d9800515 	stw	r6,20(sp)
81124674:	111cb680 	call	8111cb68 <__locale_charset>
81124678:	d9800517 	ldw	r6,20(sp)
8112467c:	d9400417 	ldw	r5,16(sp)
81124680:	100f883a 	mov	r7,r2
81124684:	dc400015 	stw	r17,0(sp)
81124688:	8009883a 	mov	r4,r16
8112468c:	903ee83a 	callr	r18
81124690:	00ffffc4 	movi	r3,-1
81124694:	10c0031e 	bne	r2,r3,811246a4 <_wcrtomb_r+0x6c>
81124698:	88000015 	stw	zero,0(r17)
8112469c:	00c02284 	movi	r3,138
811246a0:	80c00015 	stw	r3,0(r16)
811246a4:	dfc00917 	ldw	ra,36(sp)
811246a8:	dc800817 	ldw	r18,32(sp)
811246ac:	dc400717 	ldw	r17,28(sp)
811246b0:	dc000617 	ldw	r16,24(sp)
811246b4:	dec00a04 	addi	sp,sp,40
811246b8:	f800283a 	ret
811246bc:	111cb680 	call	8111cb68 <__locale_charset>
811246c0:	100f883a 	mov	r7,r2
811246c4:	dc400015 	stw	r17,0(sp)
811246c8:	000d883a 	mov	r6,zero
811246cc:	d9400104 	addi	r5,sp,4
811246d0:	8009883a 	mov	r4,r16
811246d4:	903ee83a 	callr	r18
811246d8:	003fed06 	br	81124690 <__reset+0xfb104690>

811246dc <wcrtomb>:
811246dc:	defff604 	addi	sp,sp,-40
811246e0:	00a04534 	movhi	r2,33044
811246e4:	de00012e 	bgeu	sp,et,811246ec <wcrtomb+0x10>
811246e8:	003b68fa 	trap	3
811246ec:	10895a04 	addi	r2,r2,9576
811246f0:	dc800615 	stw	r18,24(sp)
811246f4:	dc400515 	stw	r17,20(sp)
811246f8:	dfc00915 	stw	ra,36(sp)
811246fc:	dd000815 	stw	r20,32(sp)
81124700:	dcc00715 	stw	r19,28(sp)
81124704:	dc000415 	stw	r16,16(sp)
81124708:	3025883a 	mov	r18,r6
8112470c:	14400017 	ldw	r17,0(r2)
81124710:	20001926 	beq	r4,zero,81124778 <wcrtomb+0x9c>
81124714:	00a04534 	movhi	r2,33044
81124718:	10895f04 	addi	r2,r2,9596
8112471c:	15000017 	ldw	r20,0(r2)
81124720:	2021883a 	mov	r16,r4
81124724:	2827883a 	mov	r19,r5
81124728:	111cb680 	call	8111cb68 <__locale_charset>
8112472c:	100f883a 	mov	r7,r2
81124730:	dc800015 	stw	r18,0(sp)
81124734:	980d883a 	mov	r6,r19
81124738:	800b883a 	mov	r5,r16
8112473c:	8809883a 	mov	r4,r17
81124740:	a03ee83a 	callr	r20
81124744:	00ffffc4 	movi	r3,-1
81124748:	10c0031e 	bne	r2,r3,81124758 <wcrtomb+0x7c>
8112474c:	90000015 	stw	zero,0(r18)
81124750:	00c02284 	movi	r3,138
81124754:	88c00015 	stw	r3,0(r17)
81124758:	dfc00917 	ldw	ra,36(sp)
8112475c:	dd000817 	ldw	r20,32(sp)
81124760:	dcc00717 	ldw	r19,28(sp)
81124764:	dc800617 	ldw	r18,24(sp)
81124768:	dc400517 	ldw	r17,20(sp)
8112476c:	dc000417 	ldw	r16,16(sp)
81124770:	dec00a04 	addi	sp,sp,40
81124774:	f800283a 	ret
81124778:	00a04534 	movhi	r2,33044
8112477c:	10895f04 	addi	r2,r2,9596
81124780:	14000017 	ldw	r16,0(r2)
81124784:	111cb680 	call	8111cb68 <__locale_charset>
81124788:	100f883a 	mov	r7,r2
8112478c:	dc800015 	stw	r18,0(sp)
81124790:	000d883a 	mov	r6,zero
81124794:	d9400104 	addi	r5,sp,4
81124798:	8809883a 	mov	r4,r17
8112479c:	803ee83a 	callr	r16
811247a0:	003fe806 	br	81124744 <__reset+0xfb104744>

811247a4 <__ascii_wctomb>:
811247a4:	28000526 	beq	r5,zero,811247bc <__ascii_wctomb+0x18>
811247a8:	00803fc4 	movi	r2,255
811247ac:	11800536 	bltu	r2,r6,811247c4 <__ascii_wctomb+0x20>
811247b0:	29800005 	stb	r6,0(r5)
811247b4:	00800044 	movi	r2,1
811247b8:	f800283a 	ret
811247bc:	0005883a 	mov	r2,zero
811247c0:	f800283a 	ret
811247c4:	00802284 	movi	r2,138
811247c8:	20800015 	stw	r2,0(r4)
811247cc:	00bfffc4 	movi	r2,-1
811247d0:	f800283a 	ret

811247d4 <_wctomb_r>:
811247d4:	00a04534 	movhi	r2,33044
811247d8:	defff904 	addi	sp,sp,-28
811247dc:	10895f04 	addi	r2,r2,9596
811247e0:	de00012e 	bgeu	sp,et,811247e8 <_wctomb_r+0x14>
811247e4:	003b68fa 	trap	3
811247e8:	dfc00615 	stw	ra,24(sp)
811247ec:	dc400515 	stw	r17,20(sp)
811247f0:	dc000415 	stw	r16,16(sp)
811247f4:	3823883a 	mov	r17,r7
811247f8:	14000017 	ldw	r16,0(r2)
811247fc:	d9000115 	stw	r4,4(sp)
81124800:	d9400215 	stw	r5,8(sp)
81124804:	d9800315 	stw	r6,12(sp)
81124808:	111cb680 	call	8111cb68 <__locale_charset>
8112480c:	d9800317 	ldw	r6,12(sp)
81124810:	d9400217 	ldw	r5,8(sp)
81124814:	d9000117 	ldw	r4,4(sp)
81124818:	100f883a 	mov	r7,r2
8112481c:	dc400015 	stw	r17,0(sp)
81124820:	803ee83a 	callr	r16
81124824:	dfc00617 	ldw	ra,24(sp)
81124828:	dc400517 	ldw	r17,20(sp)
8112482c:	dc000417 	ldw	r16,16(sp)
81124830:	dec00704 	addi	sp,sp,28
81124834:	f800283a 	ret

81124838 <__fixunsdfsi>:
81124838:	defffd04 	addi	sp,sp,-12
8112483c:	000d883a 	mov	r6,zero
81124840:	01d07834 	movhi	r7,16864
81124844:	de00012e 	bgeu	sp,et,8112484c <__fixunsdfsi+0x14>
81124848:	003b68fa 	trap	3
8112484c:	dc400115 	stw	r17,4(sp)
81124850:	dc000015 	stw	r16,0(sp)
81124854:	dfc00215 	stw	ra,8(sp)
81124858:	2023883a 	mov	r17,r4
8112485c:	2821883a 	mov	r16,r5
81124860:	11269500 	call	81126950 <__gedf2>
81124864:	1000080e 	bge	r2,zero,81124888 <__fixunsdfsi+0x50>
81124868:	8809883a 	mov	r4,r17
8112486c:	800b883a 	mov	r5,r16
81124870:	11274240 	call	81127424 <__fixdfsi>
81124874:	dfc00217 	ldw	ra,8(sp)
81124878:	dc400117 	ldw	r17,4(sp)
8112487c:	dc000017 	ldw	r16,0(sp)
81124880:	dec00304 	addi	sp,sp,12
81124884:	f800283a 	ret
81124888:	000d883a 	mov	r6,zero
8112488c:	01d07834 	movhi	r7,16864
81124890:	8809883a 	mov	r4,r17
81124894:	800b883a 	mov	r5,r16
81124898:	1126b200 	call	81126b20 <__subdf3>
8112489c:	180b883a 	mov	r5,r3
811248a0:	1009883a 	mov	r4,r2
811248a4:	11274240 	call	81127424 <__fixdfsi>
811248a8:	00e00034 	movhi	r3,32768
811248ac:	10c5883a 	add	r2,r2,r3
811248b0:	003ff006 	br	81124874 <__reset+0xfb104874>

811248b4 <__udivdi3>:
811248b4:	defff504 	addi	sp,sp,-44
811248b8:	de00012e 	bgeu	sp,et,811248c0 <__udivdi3+0xc>
811248bc:	003b68fa 	trap	3
811248c0:	dcc00415 	stw	r19,16(sp)
811248c4:	dc000115 	stw	r16,4(sp)
811248c8:	dfc00a15 	stw	ra,40(sp)
811248cc:	df000915 	stw	fp,36(sp)
811248d0:	ddc00815 	stw	r23,32(sp)
811248d4:	dd800715 	stw	r22,28(sp)
811248d8:	dd400615 	stw	r21,24(sp)
811248dc:	dd000515 	stw	r20,20(sp)
811248e0:	dc800315 	stw	r18,12(sp)
811248e4:	dc400215 	stw	r17,8(sp)
811248e8:	2027883a 	mov	r19,r4
811248ec:	2821883a 	mov	r16,r5
811248f0:	3800411e 	bne	r7,zero,811249f8 <__udivdi3+0x144>
811248f4:	3023883a 	mov	r17,r6
811248f8:	2025883a 	mov	r18,r4
811248fc:	2980522e 	bgeu	r5,r6,81124a48 <__udivdi3+0x194>
81124900:	00bfffd4 	movui	r2,65535
81124904:	282d883a 	mov	r22,r5
81124908:	1180a836 	bltu	r2,r6,81124bac <__udivdi3+0x2f8>
8112490c:	00803fc4 	movi	r2,255
81124910:	1185803a 	cmpltu	r2,r2,r6
81124914:	100490fa 	slli	r2,r2,3
81124918:	3086d83a 	srl	r3,r6,r2
8112491c:	01204534 	movhi	r4,33044
81124920:	213e8c04 	addi	r4,r4,-1488
81124924:	20c7883a 	add	r3,r4,r3
81124928:	18c00003 	ldbu	r3,0(r3)
8112492c:	1885883a 	add	r2,r3,r2
81124930:	00c00804 	movi	r3,32
81124934:	1887c83a 	sub	r3,r3,r2
81124938:	18000526 	beq	r3,zero,81124950 <__udivdi3+0x9c>
8112493c:	80e0983a 	sll	r16,r16,r3
81124940:	9884d83a 	srl	r2,r19,r2
81124944:	30e2983a 	sll	r17,r6,r3
81124948:	98e4983a 	sll	r18,r19,r3
8112494c:	142cb03a 	or	r22,r2,r16
81124950:	882ad43a 	srli	r21,r17,16
81124954:	b009883a 	mov	r4,r22
81124958:	8d3fffcc 	andi	r20,r17,65535
8112495c:	a80b883a 	mov	r5,r21
81124960:	11254d00 	call	811254d0 <__umodsi3>
81124964:	b009883a 	mov	r4,r22
81124968:	a80b883a 	mov	r5,r21
8112496c:	1027883a 	mov	r19,r2
81124970:	112546c0 	call	8112546c <__udivsi3>
81124974:	102d883a 	mov	r22,r2
81124978:	9826943a 	slli	r19,r19,16
8112497c:	9004d43a 	srli	r2,r18,16
81124980:	a5a1383a 	mul	r16,r20,r22
81124984:	14c4b03a 	or	r2,r2,r19
81124988:	1400052e 	bgeu	r2,r16,811249a0 <__udivdi3+0xec>
8112498c:	1445883a 	add	r2,r2,r17
81124990:	b0ffffc4 	addi	r3,r22,-1
81124994:	14400136 	bltu	r2,r17,8112499c <__udivdi3+0xe8>
81124998:	14012336 	bltu	r2,r16,81124e28 <__udivdi3+0x574>
8112499c:	182d883a 	mov	r22,r3
811249a0:	1421c83a 	sub	r16,r2,r16
811249a4:	a80b883a 	mov	r5,r21
811249a8:	8009883a 	mov	r4,r16
811249ac:	11254d00 	call	811254d0 <__umodsi3>
811249b0:	1027883a 	mov	r19,r2
811249b4:	a80b883a 	mov	r5,r21
811249b8:	8009883a 	mov	r4,r16
811249bc:	112546c0 	call	8112546c <__udivsi3>
811249c0:	9826943a 	slli	r19,r19,16
811249c4:	a0a9383a 	mul	r20,r20,r2
811249c8:	94bfffcc 	andi	r18,r18,65535
811249cc:	94e4b03a 	or	r18,r18,r19
811249d0:	9500052e 	bgeu	r18,r20,811249e8 <__udivdi3+0x134>
811249d4:	8ca5883a 	add	r18,r17,r18
811249d8:	10ffffc4 	addi	r3,r2,-1
811249dc:	9440f136 	bltu	r18,r17,81124da4 <__udivdi3+0x4f0>
811249e0:	9500f02e 	bgeu	r18,r20,81124da4 <__udivdi3+0x4f0>
811249e4:	10bfff84 	addi	r2,r2,-2
811249e8:	b00c943a 	slli	r6,r22,16
811249ec:	0007883a 	mov	r3,zero
811249f0:	3084b03a 	or	r2,r6,r2
811249f4:	00005906 	br	81124b5c <__udivdi3+0x2a8>
811249f8:	29c05636 	bltu	r5,r7,81124b54 <__udivdi3+0x2a0>
811249fc:	00bfffd4 	movui	r2,65535
81124a00:	11c0622e 	bgeu	r2,r7,81124b8c <__udivdi3+0x2d8>
81124a04:	00804034 	movhi	r2,256
81124a08:	10bfffc4 	addi	r2,r2,-1
81124a0c:	11c0ee36 	bltu	r2,r7,81124dc8 <__udivdi3+0x514>
81124a10:	00800404 	movi	r2,16
81124a14:	3886d83a 	srl	r3,r7,r2
81124a18:	01204534 	movhi	r4,33044
81124a1c:	213e8c04 	addi	r4,r4,-1488
81124a20:	20c7883a 	add	r3,r4,r3
81124a24:	18c00003 	ldbu	r3,0(r3)
81124a28:	05400804 	movi	r21,32
81124a2c:	1885883a 	add	r2,r3,r2
81124a30:	a8abc83a 	sub	r21,r21,r2
81124a34:	a800621e 	bne	r21,zero,81124bc0 <__udivdi3+0x30c>
81124a38:	3c00e936 	bltu	r7,r16,81124de0 <__udivdi3+0x52c>
81124a3c:	9985403a 	cmpgeu	r2,r19,r6
81124a40:	0007883a 	mov	r3,zero
81124a44:	00004506 	br	81124b5c <__udivdi3+0x2a8>
81124a48:	3000041e 	bne	r6,zero,81124a5c <__udivdi3+0x1a8>
81124a4c:	000b883a 	mov	r5,zero
81124a50:	01000044 	movi	r4,1
81124a54:	112546c0 	call	8112546c <__udivsi3>
81124a58:	1023883a 	mov	r17,r2
81124a5c:	00bfffd4 	movui	r2,65535
81124a60:	14404e2e 	bgeu	r2,r17,81124b9c <__udivdi3+0x2e8>
81124a64:	00804034 	movhi	r2,256
81124a68:	10bfffc4 	addi	r2,r2,-1
81124a6c:	1440d836 	bltu	r2,r17,81124dd0 <__udivdi3+0x51c>
81124a70:	00800404 	movi	r2,16
81124a74:	8886d83a 	srl	r3,r17,r2
81124a78:	01204534 	movhi	r4,33044
81124a7c:	213e8c04 	addi	r4,r4,-1488
81124a80:	20c7883a 	add	r3,r4,r3
81124a84:	18c00003 	ldbu	r3,0(r3)
81124a88:	1885883a 	add	r2,r3,r2
81124a8c:	00c00804 	movi	r3,32
81124a90:	1887c83a 	sub	r3,r3,r2
81124a94:	18008f1e 	bne	r3,zero,81124cd4 <__udivdi3+0x420>
81124a98:	882ad43a 	srli	r21,r17,16
81124a9c:	8461c83a 	sub	r16,r16,r17
81124aa0:	8d3fffcc 	andi	r20,r17,65535
81124aa4:	00c00044 	movi	r3,1
81124aa8:	8009883a 	mov	r4,r16
81124aac:	a80b883a 	mov	r5,r21
81124ab0:	d8c00015 	stw	r3,0(sp)
81124ab4:	11254d00 	call	811254d0 <__umodsi3>
81124ab8:	8009883a 	mov	r4,r16
81124abc:	a80b883a 	mov	r5,r21
81124ac0:	1027883a 	mov	r19,r2
81124ac4:	112546c0 	call	8112546c <__udivsi3>
81124ac8:	9826943a 	slli	r19,r19,16
81124acc:	9008d43a 	srli	r4,r18,16
81124ad0:	1521383a 	mul	r16,r2,r20
81124ad4:	102d883a 	mov	r22,r2
81124ad8:	24c8b03a 	or	r4,r4,r19
81124adc:	d8c00017 	ldw	r3,0(sp)
81124ae0:	2400052e 	bgeu	r4,r16,81124af8 <__udivdi3+0x244>
81124ae4:	2449883a 	add	r4,r4,r17
81124ae8:	b0bfffc4 	addi	r2,r22,-1
81124aec:	24400136 	bltu	r4,r17,81124af4 <__udivdi3+0x240>
81124af0:	2400ca36 	bltu	r4,r16,81124e1c <__udivdi3+0x568>
81124af4:	102d883a 	mov	r22,r2
81124af8:	2421c83a 	sub	r16,r4,r16
81124afc:	a80b883a 	mov	r5,r21
81124b00:	8009883a 	mov	r4,r16
81124b04:	d8c00015 	stw	r3,0(sp)
81124b08:	11254d00 	call	811254d0 <__umodsi3>
81124b0c:	1027883a 	mov	r19,r2
81124b10:	a80b883a 	mov	r5,r21
81124b14:	8009883a 	mov	r4,r16
81124b18:	112546c0 	call	8112546c <__udivsi3>
81124b1c:	9826943a 	slli	r19,r19,16
81124b20:	1529383a 	mul	r20,r2,r20
81124b24:	94bfffcc 	andi	r18,r18,65535
81124b28:	94e4b03a 	or	r18,r18,r19
81124b2c:	d8c00017 	ldw	r3,0(sp)
81124b30:	9500052e 	bgeu	r18,r20,81124b48 <__udivdi3+0x294>
81124b34:	8ca5883a 	add	r18,r17,r18
81124b38:	113fffc4 	addi	r4,r2,-1
81124b3c:	94409736 	bltu	r18,r17,81124d9c <__udivdi3+0x4e8>
81124b40:	9500962e 	bgeu	r18,r20,81124d9c <__udivdi3+0x4e8>
81124b44:	10bfff84 	addi	r2,r2,-2
81124b48:	b00c943a 	slli	r6,r22,16
81124b4c:	3084b03a 	or	r2,r6,r2
81124b50:	00000206 	br	81124b5c <__udivdi3+0x2a8>
81124b54:	0007883a 	mov	r3,zero
81124b58:	0005883a 	mov	r2,zero
81124b5c:	dfc00a17 	ldw	ra,40(sp)
81124b60:	df000917 	ldw	fp,36(sp)
81124b64:	ddc00817 	ldw	r23,32(sp)
81124b68:	dd800717 	ldw	r22,28(sp)
81124b6c:	dd400617 	ldw	r21,24(sp)
81124b70:	dd000517 	ldw	r20,20(sp)
81124b74:	dcc00417 	ldw	r19,16(sp)
81124b78:	dc800317 	ldw	r18,12(sp)
81124b7c:	dc400217 	ldw	r17,8(sp)
81124b80:	dc000117 	ldw	r16,4(sp)
81124b84:	dec00b04 	addi	sp,sp,44
81124b88:	f800283a 	ret
81124b8c:	00803fc4 	movi	r2,255
81124b90:	11c5803a 	cmpltu	r2,r2,r7
81124b94:	100490fa 	slli	r2,r2,3
81124b98:	003f9e06 	br	81124a14 <__reset+0xfb104a14>
81124b9c:	00803fc4 	movi	r2,255
81124ba0:	1445803a 	cmpltu	r2,r2,r17
81124ba4:	100490fa 	slli	r2,r2,3
81124ba8:	003fb206 	br	81124a74 <__reset+0xfb104a74>
81124bac:	00804034 	movhi	r2,256
81124bb0:	10bfffc4 	addi	r2,r2,-1
81124bb4:	11808836 	bltu	r2,r6,81124dd8 <__udivdi3+0x524>
81124bb8:	00800404 	movi	r2,16
81124bbc:	003f5606 	br	81124918 <__reset+0xfb104918>
81124bc0:	30aed83a 	srl	r23,r6,r2
81124bc4:	3d4e983a 	sll	r7,r7,r21
81124bc8:	80acd83a 	srl	r22,r16,r2
81124bcc:	9884d83a 	srl	r2,r19,r2
81124bd0:	3deeb03a 	or	r23,r7,r23
81124bd4:	b824d43a 	srli	r18,r23,16
81124bd8:	8560983a 	sll	r16,r16,r21
81124bdc:	b009883a 	mov	r4,r22
81124be0:	900b883a 	mov	r5,r18
81124be4:	3568983a 	sll	r20,r6,r21
81124be8:	1420b03a 	or	r16,r2,r16
81124bec:	11254d00 	call	811254d0 <__umodsi3>
81124bf0:	b009883a 	mov	r4,r22
81124bf4:	900b883a 	mov	r5,r18
81124bf8:	1023883a 	mov	r17,r2
81124bfc:	112546c0 	call	8112546c <__udivsi3>
81124c00:	8808943a 	slli	r4,r17,16
81124c04:	bf3fffcc 	andi	fp,r23,65535
81124c08:	8006d43a 	srli	r3,r16,16
81124c0c:	e0a3383a 	mul	r17,fp,r2
81124c10:	100d883a 	mov	r6,r2
81124c14:	1906b03a 	or	r3,r3,r4
81124c18:	1c40042e 	bgeu	r3,r17,81124c2c <__udivdi3+0x378>
81124c1c:	1dc7883a 	add	r3,r3,r23
81124c20:	10bfffc4 	addi	r2,r2,-1
81124c24:	1dc0752e 	bgeu	r3,r23,81124dfc <__udivdi3+0x548>
81124c28:	100d883a 	mov	r6,r2
81124c2c:	1c63c83a 	sub	r17,r3,r17
81124c30:	900b883a 	mov	r5,r18
81124c34:	8809883a 	mov	r4,r17
81124c38:	d9800015 	stw	r6,0(sp)
81124c3c:	11254d00 	call	811254d0 <__umodsi3>
81124c40:	102d883a 	mov	r22,r2
81124c44:	8809883a 	mov	r4,r17
81124c48:	900b883a 	mov	r5,r18
81124c4c:	112546c0 	call	8112546c <__udivsi3>
81124c50:	b02c943a 	slli	r22,r22,16
81124c54:	e089383a 	mul	r4,fp,r2
81124c58:	843fffcc 	andi	r16,r16,65535
81124c5c:	85a0b03a 	or	r16,r16,r22
81124c60:	d9800017 	ldw	r6,0(sp)
81124c64:	8100042e 	bgeu	r16,r4,81124c78 <__udivdi3+0x3c4>
81124c68:	85e1883a 	add	r16,r16,r23
81124c6c:	10ffffc4 	addi	r3,r2,-1
81124c70:	85c05e2e 	bgeu	r16,r23,81124dec <__udivdi3+0x538>
81124c74:	1805883a 	mov	r2,r3
81124c78:	300c943a 	slli	r6,r6,16
81124c7c:	a17fffcc 	andi	r5,r20,65535
81124c80:	a028d43a 	srli	r20,r20,16
81124c84:	3084b03a 	or	r2,r6,r2
81124c88:	10ffffcc 	andi	r3,r2,65535
81124c8c:	100cd43a 	srli	r6,r2,16
81124c90:	194f383a 	mul	r7,r3,r5
81124c94:	1d07383a 	mul	r3,r3,r20
81124c98:	314b383a 	mul	r5,r6,r5
81124c9c:	3810d43a 	srli	r8,r7,16
81124ca0:	8121c83a 	sub	r16,r16,r4
81124ca4:	1947883a 	add	r3,r3,r5
81124ca8:	40c7883a 	add	r3,r8,r3
81124cac:	350d383a 	mul	r6,r6,r20
81124cb0:	1940022e 	bgeu	r3,r5,81124cbc <__udivdi3+0x408>
81124cb4:	01000074 	movhi	r4,1
81124cb8:	310d883a 	add	r6,r6,r4
81124cbc:	1828d43a 	srli	r20,r3,16
81124cc0:	a18d883a 	add	r6,r20,r6
81124cc4:	81803e36 	bltu	r16,r6,81124dc0 <__udivdi3+0x50c>
81124cc8:	81803826 	beq	r16,r6,81124dac <__udivdi3+0x4f8>
81124ccc:	0007883a 	mov	r3,zero
81124cd0:	003fa206 	br	81124b5c <__reset+0xfb104b5c>
81124cd4:	88e2983a 	sll	r17,r17,r3
81124cd8:	80a8d83a 	srl	r20,r16,r2
81124cdc:	80e0983a 	sll	r16,r16,r3
81124ce0:	882ad43a 	srli	r21,r17,16
81124ce4:	9884d83a 	srl	r2,r19,r2
81124ce8:	a009883a 	mov	r4,r20
81124cec:	a80b883a 	mov	r5,r21
81124cf0:	142eb03a 	or	r23,r2,r16
81124cf4:	98e4983a 	sll	r18,r19,r3
81124cf8:	11254d00 	call	811254d0 <__umodsi3>
81124cfc:	a009883a 	mov	r4,r20
81124d00:	a80b883a 	mov	r5,r21
81124d04:	1021883a 	mov	r16,r2
81124d08:	112546c0 	call	8112546c <__udivsi3>
81124d0c:	1039883a 	mov	fp,r2
81124d10:	8d3fffcc 	andi	r20,r17,65535
81124d14:	8020943a 	slli	r16,r16,16
81124d18:	b804d43a 	srli	r2,r23,16
81124d1c:	a72d383a 	mul	r22,r20,fp
81124d20:	1404b03a 	or	r2,r2,r16
81124d24:	1580062e 	bgeu	r2,r22,81124d40 <__udivdi3+0x48c>
81124d28:	1445883a 	add	r2,r2,r17
81124d2c:	e0ffffc4 	addi	r3,fp,-1
81124d30:	14403836 	bltu	r2,r17,81124e14 <__udivdi3+0x560>
81124d34:	1580372e 	bgeu	r2,r22,81124e14 <__udivdi3+0x560>
81124d38:	e73fff84 	addi	fp,fp,-2
81124d3c:	1445883a 	add	r2,r2,r17
81124d40:	15adc83a 	sub	r22,r2,r22
81124d44:	a80b883a 	mov	r5,r21
81124d48:	b009883a 	mov	r4,r22
81124d4c:	11254d00 	call	811254d0 <__umodsi3>
81124d50:	1027883a 	mov	r19,r2
81124d54:	b009883a 	mov	r4,r22
81124d58:	a80b883a 	mov	r5,r21
81124d5c:	112546c0 	call	8112546c <__udivsi3>
81124d60:	9826943a 	slli	r19,r19,16
81124d64:	a0a1383a 	mul	r16,r20,r2
81124d68:	b93fffcc 	andi	r4,r23,65535
81124d6c:	24c8b03a 	or	r4,r4,r19
81124d70:	2400062e 	bgeu	r4,r16,81124d8c <__udivdi3+0x4d8>
81124d74:	2449883a 	add	r4,r4,r17
81124d78:	10ffffc4 	addi	r3,r2,-1
81124d7c:	24402336 	bltu	r4,r17,81124e0c <__udivdi3+0x558>
81124d80:	2400222e 	bgeu	r4,r16,81124e0c <__udivdi3+0x558>
81124d84:	10bfff84 	addi	r2,r2,-2
81124d88:	2449883a 	add	r4,r4,r17
81124d8c:	e038943a 	slli	fp,fp,16
81124d90:	2421c83a 	sub	r16,r4,r16
81124d94:	e086b03a 	or	r3,fp,r2
81124d98:	003f4306 	br	81124aa8 <__reset+0xfb104aa8>
81124d9c:	2005883a 	mov	r2,r4
81124da0:	003f6906 	br	81124b48 <__reset+0xfb104b48>
81124da4:	1805883a 	mov	r2,r3
81124da8:	003f0f06 	br	811249e8 <__reset+0xfb1049e8>
81124dac:	1806943a 	slli	r3,r3,16
81124db0:	9d66983a 	sll	r19,r19,r21
81124db4:	39ffffcc 	andi	r7,r7,65535
81124db8:	19c7883a 	add	r3,r3,r7
81124dbc:	98ffc32e 	bgeu	r19,r3,81124ccc <__reset+0xfb104ccc>
81124dc0:	10bfffc4 	addi	r2,r2,-1
81124dc4:	003fc106 	br	81124ccc <__reset+0xfb104ccc>
81124dc8:	00800604 	movi	r2,24
81124dcc:	003f1106 	br	81124a14 <__reset+0xfb104a14>
81124dd0:	00800604 	movi	r2,24
81124dd4:	003f2706 	br	81124a74 <__reset+0xfb104a74>
81124dd8:	00800604 	movi	r2,24
81124ddc:	003ece06 	br	81124918 <__reset+0xfb104918>
81124de0:	0007883a 	mov	r3,zero
81124de4:	00800044 	movi	r2,1
81124de8:	003f5c06 	br	81124b5c <__reset+0xfb104b5c>
81124dec:	813fa12e 	bgeu	r16,r4,81124c74 <__reset+0xfb104c74>
81124df0:	10bfff84 	addi	r2,r2,-2
81124df4:	85e1883a 	add	r16,r16,r23
81124df8:	003f9f06 	br	81124c78 <__reset+0xfb104c78>
81124dfc:	1c7f8a2e 	bgeu	r3,r17,81124c28 <__reset+0xfb104c28>
81124e00:	31bfff84 	addi	r6,r6,-2
81124e04:	1dc7883a 	add	r3,r3,r23
81124e08:	003f8806 	br	81124c2c <__reset+0xfb104c2c>
81124e0c:	1805883a 	mov	r2,r3
81124e10:	003fde06 	br	81124d8c <__reset+0xfb104d8c>
81124e14:	1839883a 	mov	fp,r3
81124e18:	003fc906 	br	81124d40 <__reset+0xfb104d40>
81124e1c:	b5bfff84 	addi	r22,r22,-2
81124e20:	2449883a 	add	r4,r4,r17
81124e24:	003f3406 	br	81124af8 <__reset+0xfb104af8>
81124e28:	b5bfff84 	addi	r22,r22,-2
81124e2c:	1445883a 	add	r2,r2,r17
81124e30:	003edb06 	br	811249a0 <__reset+0xfb1049a0>

81124e34 <__umoddi3>:
81124e34:	defff404 	addi	sp,sp,-48
81124e38:	de00012e 	bgeu	sp,et,81124e40 <__umoddi3+0xc>
81124e3c:	003b68fa 	trap	3
81124e40:	df000a15 	stw	fp,40(sp)
81124e44:	dc400315 	stw	r17,12(sp)
81124e48:	dc000215 	stw	r16,8(sp)
81124e4c:	dfc00b15 	stw	ra,44(sp)
81124e50:	ddc00915 	stw	r23,36(sp)
81124e54:	dd800815 	stw	r22,32(sp)
81124e58:	dd400715 	stw	r21,28(sp)
81124e5c:	dd000615 	stw	r20,24(sp)
81124e60:	dcc00515 	stw	r19,20(sp)
81124e64:	dc800415 	stw	r18,16(sp)
81124e68:	2021883a 	mov	r16,r4
81124e6c:	2823883a 	mov	r17,r5
81124e70:	2839883a 	mov	fp,r5
81124e74:	38003c1e 	bne	r7,zero,81124f68 <__umoddi3+0x134>
81124e78:	3027883a 	mov	r19,r6
81124e7c:	2029883a 	mov	r20,r4
81124e80:	2980512e 	bgeu	r5,r6,81124fc8 <__umoddi3+0x194>
81124e84:	00bfffd4 	movui	r2,65535
81124e88:	11809a36 	bltu	r2,r6,811250f4 <__umoddi3+0x2c0>
81124e8c:	01003fc4 	movi	r4,255
81124e90:	2189803a 	cmpltu	r4,r4,r6
81124e94:	200890fa 	slli	r4,r4,3
81124e98:	3104d83a 	srl	r2,r6,r4
81124e9c:	00e04534 	movhi	r3,33044
81124ea0:	18fe8c04 	addi	r3,r3,-1488
81124ea4:	1885883a 	add	r2,r3,r2
81124ea8:	10c00003 	ldbu	r3,0(r2)
81124eac:	00800804 	movi	r2,32
81124eb0:	1909883a 	add	r4,r3,r4
81124eb4:	1125c83a 	sub	r18,r2,r4
81124eb8:	90000526 	beq	r18,zero,81124ed0 <__umoddi3+0x9c>
81124ebc:	8ca2983a 	sll	r17,r17,r18
81124ec0:	8108d83a 	srl	r4,r16,r4
81124ec4:	34a6983a 	sll	r19,r6,r18
81124ec8:	84a8983a 	sll	r20,r16,r18
81124ecc:	2478b03a 	or	fp,r4,r17
81124ed0:	982ed43a 	srli	r23,r19,16
81124ed4:	e009883a 	mov	r4,fp
81124ed8:	9dbfffcc 	andi	r22,r19,65535
81124edc:	b80b883a 	mov	r5,r23
81124ee0:	11254d00 	call	811254d0 <__umodsi3>
81124ee4:	e009883a 	mov	r4,fp
81124ee8:	b80b883a 	mov	r5,r23
81124eec:	102b883a 	mov	r21,r2
81124ef0:	112546c0 	call	8112546c <__udivsi3>
81124ef4:	a806943a 	slli	r3,r21,16
81124ef8:	a008d43a 	srli	r4,r20,16
81124efc:	b085383a 	mul	r2,r22,r2
81124f00:	20c8b03a 	or	r4,r4,r3
81124f04:	2080032e 	bgeu	r4,r2,81124f14 <__umoddi3+0xe0>
81124f08:	24c9883a 	add	r4,r4,r19
81124f0c:	24c00136 	bltu	r4,r19,81124f14 <__umoddi3+0xe0>
81124f10:	20811036 	bltu	r4,r2,81125354 <__umoddi3+0x520>
81124f14:	20abc83a 	sub	r21,r4,r2
81124f18:	b80b883a 	mov	r5,r23
81124f1c:	a809883a 	mov	r4,r21
81124f20:	11254d00 	call	811254d0 <__umodsi3>
81124f24:	1023883a 	mov	r17,r2
81124f28:	b80b883a 	mov	r5,r23
81124f2c:	a809883a 	mov	r4,r21
81124f30:	112546c0 	call	8112546c <__udivsi3>
81124f34:	8822943a 	slli	r17,r17,16
81124f38:	b085383a 	mul	r2,r22,r2
81124f3c:	a0ffffcc 	andi	r3,r20,65535
81124f40:	1c46b03a 	or	r3,r3,r17
81124f44:	1880042e 	bgeu	r3,r2,81124f58 <__umoddi3+0x124>
81124f48:	1cc7883a 	add	r3,r3,r19
81124f4c:	1cc00236 	bltu	r3,r19,81124f58 <__umoddi3+0x124>
81124f50:	1880012e 	bgeu	r3,r2,81124f58 <__umoddi3+0x124>
81124f54:	1cc7883a 	add	r3,r3,r19
81124f58:	1885c83a 	sub	r2,r3,r2
81124f5c:	1484d83a 	srl	r2,r2,r18
81124f60:	0007883a 	mov	r3,zero
81124f64:	00004f06 	br	811250a4 <__umoddi3+0x270>
81124f68:	29c04c36 	bltu	r5,r7,8112509c <__umoddi3+0x268>
81124f6c:	00bfffd4 	movui	r2,65535
81124f70:	11c0582e 	bgeu	r2,r7,811250d4 <__umoddi3+0x2a0>
81124f74:	00804034 	movhi	r2,256
81124f78:	10bfffc4 	addi	r2,r2,-1
81124f7c:	11c0e736 	bltu	r2,r7,8112531c <__umoddi3+0x4e8>
81124f80:	01000404 	movi	r4,16
81124f84:	3904d83a 	srl	r2,r7,r4
81124f88:	00e04534 	movhi	r3,33044
81124f8c:	18fe8c04 	addi	r3,r3,-1488
81124f90:	1885883a 	add	r2,r3,r2
81124f94:	14c00003 	ldbu	r19,0(r2)
81124f98:	00c00804 	movi	r3,32
81124f9c:	9927883a 	add	r19,r19,r4
81124fa0:	1ce9c83a 	sub	r20,r3,r19
81124fa4:	a000581e 	bne	r20,zero,81125108 <__umoddi3+0x2d4>
81124fa8:	3c400136 	bltu	r7,r17,81124fb0 <__umoddi3+0x17c>
81124fac:	8180eb36 	bltu	r16,r6,8112535c <__umoddi3+0x528>
81124fb0:	8185c83a 	sub	r2,r16,r6
81124fb4:	89e3c83a 	sub	r17,r17,r7
81124fb8:	8089803a 	cmpltu	r4,r16,r2
81124fbc:	8939c83a 	sub	fp,r17,r4
81124fc0:	e007883a 	mov	r3,fp
81124fc4:	00003706 	br	811250a4 <__umoddi3+0x270>
81124fc8:	3000041e 	bne	r6,zero,81124fdc <__umoddi3+0x1a8>
81124fcc:	000b883a 	mov	r5,zero
81124fd0:	01000044 	movi	r4,1
81124fd4:	112546c0 	call	8112546c <__udivsi3>
81124fd8:	1027883a 	mov	r19,r2
81124fdc:	00bfffd4 	movui	r2,65535
81124fe0:	14c0402e 	bgeu	r2,r19,811250e4 <__umoddi3+0x2b0>
81124fe4:	00804034 	movhi	r2,256
81124fe8:	10bfffc4 	addi	r2,r2,-1
81124fec:	14c0cd36 	bltu	r2,r19,81125324 <__umoddi3+0x4f0>
81124ff0:	00800404 	movi	r2,16
81124ff4:	9886d83a 	srl	r3,r19,r2
81124ff8:	01204534 	movhi	r4,33044
81124ffc:	213e8c04 	addi	r4,r4,-1488
81125000:	20c7883a 	add	r3,r4,r3
81125004:	18c00003 	ldbu	r3,0(r3)
81125008:	1887883a 	add	r3,r3,r2
8112500c:	00800804 	movi	r2,32
81125010:	10e5c83a 	sub	r18,r2,r3
81125014:	9000901e 	bne	r18,zero,81125258 <__umoddi3+0x424>
81125018:	982cd43a 	srli	r22,r19,16
8112501c:	8ce3c83a 	sub	r17,r17,r19
81125020:	9d7fffcc 	andi	r21,r19,65535
81125024:	b00b883a 	mov	r5,r22
81125028:	8809883a 	mov	r4,r17
8112502c:	11254d00 	call	811254d0 <__umodsi3>
81125030:	8809883a 	mov	r4,r17
81125034:	b00b883a 	mov	r5,r22
81125038:	1021883a 	mov	r16,r2
8112503c:	112546c0 	call	8112546c <__udivsi3>
81125040:	8006943a 	slli	r3,r16,16
81125044:	a008d43a 	srli	r4,r20,16
81125048:	1545383a 	mul	r2,r2,r21
8112504c:	20c8b03a 	or	r4,r4,r3
81125050:	2080042e 	bgeu	r4,r2,81125064 <__umoddi3+0x230>
81125054:	24c9883a 	add	r4,r4,r19
81125058:	24c00236 	bltu	r4,r19,81125064 <__umoddi3+0x230>
8112505c:	2080012e 	bgeu	r4,r2,81125064 <__umoddi3+0x230>
81125060:	24c9883a 	add	r4,r4,r19
81125064:	20a1c83a 	sub	r16,r4,r2
81125068:	b00b883a 	mov	r5,r22
8112506c:	8009883a 	mov	r4,r16
81125070:	11254d00 	call	811254d0 <__umodsi3>
81125074:	1023883a 	mov	r17,r2
81125078:	b00b883a 	mov	r5,r22
8112507c:	8009883a 	mov	r4,r16
81125080:	112546c0 	call	8112546c <__udivsi3>
81125084:	8822943a 	slli	r17,r17,16
81125088:	1545383a 	mul	r2,r2,r21
8112508c:	a53fffcc 	andi	r20,r20,65535
81125090:	a446b03a 	or	r3,r20,r17
81125094:	18bfb02e 	bgeu	r3,r2,81124f58 <__reset+0xfb104f58>
81125098:	003fab06 	br	81124f48 <__reset+0xfb104f48>
8112509c:	2005883a 	mov	r2,r4
811250a0:	2807883a 	mov	r3,r5
811250a4:	dfc00b17 	ldw	ra,44(sp)
811250a8:	df000a17 	ldw	fp,40(sp)
811250ac:	ddc00917 	ldw	r23,36(sp)
811250b0:	dd800817 	ldw	r22,32(sp)
811250b4:	dd400717 	ldw	r21,28(sp)
811250b8:	dd000617 	ldw	r20,24(sp)
811250bc:	dcc00517 	ldw	r19,20(sp)
811250c0:	dc800417 	ldw	r18,16(sp)
811250c4:	dc400317 	ldw	r17,12(sp)
811250c8:	dc000217 	ldw	r16,8(sp)
811250cc:	dec00c04 	addi	sp,sp,48
811250d0:	f800283a 	ret
811250d4:	04c03fc4 	movi	r19,255
811250d8:	99c9803a 	cmpltu	r4,r19,r7
811250dc:	200890fa 	slli	r4,r4,3
811250e0:	003fa806 	br	81124f84 <__reset+0xfb104f84>
811250e4:	00803fc4 	movi	r2,255
811250e8:	14c5803a 	cmpltu	r2,r2,r19
811250ec:	100490fa 	slli	r2,r2,3
811250f0:	003fc006 	br	81124ff4 <__reset+0xfb104ff4>
811250f4:	00804034 	movhi	r2,256
811250f8:	10bfffc4 	addi	r2,r2,-1
811250fc:	11808b36 	bltu	r2,r6,8112532c <__umoddi3+0x4f8>
81125100:	01000404 	movi	r4,16
81125104:	003f6406 	br	81124e98 <__reset+0xfb104e98>
81125108:	34c4d83a 	srl	r2,r6,r19
8112510c:	3d0e983a 	sll	r7,r7,r20
81125110:	8cf8d83a 	srl	fp,r17,r19
81125114:	8d10983a 	sll	r8,r17,r20
81125118:	38aab03a 	or	r21,r7,r2
8112511c:	a82cd43a 	srli	r22,r21,16
81125120:	84e2d83a 	srl	r17,r16,r19
81125124:	e009883a 	mov	r4,fp
81125128:	b00b883a 	mov	r5,r22
8112512c:	8a22b03a 	or	r17,r17,r8
81125130:	3524983a 	sll	r18,r6,r20
81125134:	11254d00 	call	811254d0 <__umodsi3>
81125138:	e009883a 	mov	r4,fp
8112513c:	b00b883a 	mov	r5,r22
81125140:	102f883a 	mov	r23,r2
81125144:	112546c0 	call	8112546c <__udivsi3>
81125148:	100d883a 	mov	r6,r2
8112514c:	b808943a 	slli	r4,r23,16
81125150:	aa3fffcc 	andi	r8,r21,65535
81125154:	8804d43a 	srli	r2,r17,16
81125158:	41af383a 	mul	r23,r8,r6
8112515c:	8520983a 	sll	r16,r16,r20
81125160:	1104b03a 	or	r2,r2,r4
81125164:	15c0042e 	bgeu	r2,r23,81125178 <__umoddi3+0x344>
81125168:	1545883a 	add	r2,r2,r21
8112516c:	30ffffc4 	addi	r3,r6,-1
81125170:	1540742e 	bgeu	r2,r21,81125344 <__umoddi3+0x510>
81125174:	180d883a 	mov	r6,r3
81125178:	15efc83a 	sub	r23,r2,r23
8112517c:	b00b883a 	mov	r5,r22
81125180:	b809883a 	mov	r4,r23
81125184:	d9800115 	stw	r6,4(sp)
81125188:	da000015 	stw	r8,0(sp)
8112518c:	11254d00 	call	811254d0 <__umodsi3>
81125190:	b00b883a 	mov	r5,r22
81125194:	b809883a 	mov	r4,r23
81125198:	1039883a 	mov	fp,r2
8112519c:	112546c0 	call	8112546c <__udivsi3>
811251a0:	da000017 	ldw	r8,0(sp)
811251a4:	e038943a 	slli	fp,fp,16
811251a8:	100b883a 	mov	r5,r2
811251ac:	4089383a 	mul	r4,r8,r2
811251b0:	8a3fffcc 	andi	r8,r17,65535
811251b4:	4710b03a 	or	r8,r8,fp
811251b8:	d9800117 	ldw	r6,4(sp)
811251bc:	4100042e 	bgeu	r8,r4,811251d0 <__umoddi3+0x39c>
811251c0:	4551883a 	add	r8,r8,r21
811251c4:	10bfffc4 	addi	r2,r2,-1
811251c8:	45405a2e 	bgeu	r8,r21,81125334 <__umoddi3+0x500>
811251cc:	100b883a 	mov	r5,r2
811251d0:	300c943a 	slli	r6,r6,16
811251d4:	91ffffcc 	andi	r7,r18,65535
811251d8:	9004d43a 	srli	r2,r18,16
811251dc:	314cb03a 	or	r6,r6,r5
811251e0:	317fffcc 	andi	r5,r6,65535
811251e4:	300cd43a 	srli	r6,r6,16
811251e8:	29d3383a 	mul	r9,r5,r7
811251ec:	288b383a 	mul	r5,r5,r2
811251f0:	31cf383a 	mul	r7,r6,r7
811251f4:	4806d43a 	srli	r3,r9,16
811251f8:	4111c83a 	sub	r8,r8,r4
811251fc:	29cb883a 	add	r5,r5,r7
81125200:	194b883a 	add	r5,r3,r5
81125204:	3085383a 	mul	r2,r6,r2
81125208:	29c0022e 	bgeu	r5,r7,81125214 <__umoddi3+0x3e0>
8112520c:	00c00074 	movhi	r3,1
81125210:	10c5883a 	add	r2,r2,r3
81125214:	2808d43a 	srli	r4,r5,16
81125218:	280a943a 	slli	r5,r5,16
8112521c:	4a7fffcc 	andi	r9,r9,65535
81125220:	2085883a 	add	r2,r4,r2
81125224:	2a4b883a 	add	r5,r5,r9
81125228:	40803636 	bltu	r8,r2,81125304 <__umoddi3+0x4d0>
8112522c:	40804d26 	beq	r8,r2,81125364 <__umoddi3+0x530>
81125230:	4089c83a 	sub	r4,r8,r2
81125234:	280f883a 	mov	r7,r5
81125238:	81cfc83a 	sub	r7,r16,r7
8112523c:	81c7803a 	cmpltu	r3,r16,r7
81125240:	20c7c83a 	sub	r3,r4,r3
81125244:	1cc4983a 	sll	r2,r3,r19
81125248:	3d0ed83a 	srl	r7,r7,r20
8112524c:	1d06d83a 	srl	r3,r3,r20
81125250:	11c4b03a 	or	r2,r2,r7
81125254:	003f9306 	br	811250a4 <__reset+0xfb1050a4>
81125258:	9ca6983a 	sll	r19,r19,r18
8112525c:	88e8d83a 	srl	r20,r17,r3
81125260:	80c4d83a 	srl	r2,r16,r3
81125264:	982cd43a 	srli	r22,r19,16
81125268:	8ca2983a 	sll	r17,r17,r18
8112526c:	a009883a 	mov	r4,r20
81125270:	b00b883a 	mov	r5,r22
81125274:	1478b03a 	or	fp,r2,r17
81125278:	11254d00 	call	811254d0 <__umodsi3>
8112527c:	a009883a 	mov	r4,r20
81125280:	b00b883a 	mov	r5,r22
81125284:	1023883a 	mov	r17,r2
81125288:	112546c0 	call	8112546c <__udivsi3>
8112528c:	9d7fffcc 	andi	r21,r19,65535
81125290:	880a943a 	slli	r5,r17,16
81125294:	e008d43a 	srli	r4,fp,16
81125298:	a885383a 	mul	r2,r21,r2
8112529c:	84a8983a 	sll	r20,r16,r18
811252a0:	2148b03a 	or	r4,r4,r5
811252a4:	2080042e 	bgeu	r4,r2,811252b8 <__umoddi3+0x484>
811252a8:	24c9883a 	add	r4,r4,r19
811252ac:	24c00236 	bltu	r4,r19,811252b8 <__umoddi3+0x484>
811252b0:	2080012e 	bgeu	r4,r2,811252b8 <__umoddi3+0x484>
811252b4:	24c9883a 	add	r4,r4,r19
811252b8:	20a3c83a 	sub	r17,r4,r2
811252bc:	b00b883a 	mov	r5,r22
811252c0:	8809883a 	mov	r4,r17
811252c4:	11254d00 	call	811254d0 <__umodsi3>
811252c8:	102f883a 	mov	r23,r2
811252cc:	8809883a 	mov	r4,r17
811252d0:	b00b883a 	mov	r5,r22
811252d4:	112546c0 	call	8112546c <__udivsi3>
811252d8:	b82e943a 	slli	r23,r23,16
811252dc:	a885383a 	mul	r2,r21,r2
811252e0:	e13fffcc 	andi	r4,fp,65535
811252e4:	25c8b03a 	or	r4,r4,r23
811252e8:	2080042e 	bgeu	r4,r2,811252fc <__umoddi3+0x4c8>
811252ec:	24c9883a 	add	r4,r4,r19
811252f0:	24c00236 	bltu	r4,r19,811252fc <__umoddi3+0x4c8>
811252f4:	2080012e 	bgeu	r4,r2,811252fc <__umoddi3+0x4c8>
811252f8:	24c9883a 	add	r4,r4,r19
811252fc:	20a3c83a 	sub	r17,r4,r2
81125300:	003f4806 	br	81125024 <__reset+0xfb105024>
81125304:	2c8fc83a 	sub	r7,r5,r18
81125308:	1545c83a 	sub	r2,r2,r21
8112530c:	29cb803a 	cmpltu	r5,r5,r7
81125310:	1145c83a 	sub	r2,r2,r5
81125314:	4089c83a 	sub	r4,r8,r2
81125318:	003fc706 	br	81125238 <__reset+0xfb105238>
8112531c:	01000604 	movi	r4,24
81125320:	003f1806 	br	81124f84 <__reset+0xfb104f84>
81125324:	00800604 	movi	r2,24
81125328:	003f3206 	br	81124ff4 <__reset+0xfb104ff4>
8112532c:	01000604 	movi	r4,24
81125330:	003ed906 	br	81124e98 <__reset+0xfb104e98>
81125334:	413fa52e 	bgeu	r8,r4,811251cc <__reset+0xfb1051cc>
81125338:	297fff84 	addi	r5,r5,-2
8112533c:	4551883a 	add	r8,r8,r21
81125340:	003fa306 	br	811251d0 <__reset+0xfb1051d0>
81125344:	15ff8b2e 	bgeu	r2,r23,81125174 <__reset+0xfb105174>
81125348:	31bfff84 	addi	r6,r6,-2
8112534c:	1545883a 	add	r2,r2,r21
81125350:	003f8906 	br	81125178 <__reset+0xfb105178>
81125354:	24c9883a 	add	r4,r4,r19
81125358:	003eee06 	br	81124f14 <__reset+0xfb104f14>
8112535c:	8005883a 	mov	r2,r16
81125360:	003f1706 	br	81124fc0 <__reset+0xfb104fc0>
81125364:	817fe736 	bltu	r16,r5,81125304 <__reset+0xfb105304>
81125368:	280f883a 	mov	r7,r5
8112536c:	0009883a 	mov	r4,zero
81125370:	003fb106 	br	81125238 <__reset+0xfb105238>

81125374 <__divsi3>:
81125374:	20001b16 	blt	r4,zero,811253e4 <__divsi3+0x70>
81125378:	000f883a 	mov	r7,zero
8112537c:	28001616 	blt	r5,zero,811253d8 <__divsi3+0x64>
81125380:	200d883a 	mov	r6,r4
81125384:	29001a2e 	bgeu	r5,r4,811253f0 <__divsi3+0x7c>
81125388:	00800804 	movi	r2,32
8112538c:	00c00044 	movi	r3,1
81125390:	00000106 	br	81125398 <__divsi3+0x24>
81125394:	10000d26 	beq	r2,zero,811253cc <__divsi3+0x58>
81125398:	294b883a 	add	r5,r5,r5
8112539c:	10bfffc4 	addi	r2,r2,-1
811253a0:	18c7883a 	add	r3,r3,r3
811253a4:	293ffb36 	bltu	r5,r4,81125394 <__reset+0xfb105394>
811253a8:	0005883a 	mov	r2,zero
811253ac:	18000726 	beq	r3,zero,811253cc <__divsi3+0x58>
811253b0:	0005883a 	mov	r2,zero
811253b4:	31400236 	bltu	r6,r5,811253c0 <__divsi3+0x4c>
811253b8:	314dc83a 	sub	r6,r6,r5
811253bc:	10c4b03a 	or	r2,r2,r3
811253c0:	1806d07a 	srli	r3,r3,1
811253c4:	280ad07a 	srli	r5,r5,1
811253c8:	183ffa1e 	bne	r3,zero,811253b4 <__reset+0xfb1053b4>
811253cc:	38000126 	beq	r7,zero,811253d4 <__divsi3+0x60>
811253d0:	0085c83a 	sub	r2,zero,r2
811253d4:	f800283a 	ret
811253d8:	014bc83a 	sub	r5,zero,r5
811253dc:	39c0005c 	xori	r7,r7,1
811253e0:	003fe706 	br	81125380 <__reset+0xfb105380>
811253e4:	0109c83a 	sub	r4,zero,r4
811253e8:	01c00044 	movi	r7,1
811253ec:	003fe306 	br	8112537c <__reset+0xfb10537c>
811253f0:	00c00044 	movi	r3,1
811253f4:	003fee06 	br	811253b0 <__reset+0xfb1053b0>

811253f8 <__modsi3>:
811253f8:	20001716 	blt	r4,zero,81125458 <__modsi3+0x60>
811253fc:	000f883a 	mov	r7,zero
81125400:	2005883a 	mov	r2,r4
81125404:	28001216 	blt	r5,zero,81125450 <__modsi3+0x58>
81125408:	2900162e 	bgeu	r5,r4,81125464 <__modsi3+0x6c>
8112540c:	01800804 	movi	r6,32
81125410:	00c00044 	movi	r3,1
81125414:	00000106 	br	8112541c <__modsi3+0x24>
81125418:	30000a26 	beq	r6,zero,81125444 <__modsi3+0x4c>
8112541c:	294b883a 	add	r5,r5,r5
81125420:	31bfffc4 	addi	r6,r6,-1
81125424:	18c7883a 	add	r3,r3,r3
81125428:	293ffb36 	bltu	r5,r4,81125418 <__reset+0xfb105418>
8112542c:	18000526 	beq	r3,zero,81125444 <__modsi3+0x4c>
81125430:	1806d07a 	srli	r3,r3,1
81125434:	11400136 	bltu	r2,r5,8112543c <__modsi3+0x44>
81125438:	1145c83a 	sub	r2,r2,r5
8112543c:	280ad07a 	srli	r5,r5,1
81125440:	183ffb1e 	bne	r3,zero,81125430 <__reset+0xfb105430>
81125444:	38000126 	beq	r7,zero,8112544c <__modsi3+0x54>
81125448:	0085c83a 	sub	r2,zero,r2
8112544c:	f800283a 	ret
81125450:	014bc83a 	sub	r5,zero,r5
81125454:	003fec06 	br	81125408 <__reset+0xfb105408>
81125458:	0109c83a 	sub	r4,zero,r4
8112545c:	01c00044 	movi	r7,1
81125460:	003fe706 	br	81125400 <__reset+0xfb105400>
81125464:	00c00044 	movi	r3,1
81125468:	003ff106 	br	81125430 <__reset+0xfb105430>

8112546c <__udivsi3>:
8112546c:	200d883a 	mov	r6,r4
81125470:	2900152e 	bgeu	r5,r4,811254c8 <__udivsi3+0x5c>
81125474:	28001416 	blt	r5,zero,811254c8 <__udivsi3+0x5c>
81125478:	00800804 	movi	r2,32
8112547c:	00c00044 	movi	r3,1
81125480:	00000206 	br	8112548c <__udivsi3+0x20>
81125484:	10000e26 	beq	r2,zero,811254c0 <__udivsi3+0x54>
81125488:	28000516 	blt	r5,zero,811254a0 <__udivsi3+0x34>
8112548c:	294b883a 	add	r5,r5,r5
81125490:	10bfffc4 	addi	r2,r2,-1
81125494:	18c7883a 	add	r3,r3,r3
81125498:	293ffa36 	bltu	r5,r4,81125484 <__reset+0xfb105484>
8112549c:	18000826 	beq	r3,zero,811254c0 <__udivsi3+0x54>
811254a0:	0005883a 	mov	r2,zero
811254a4:	31400236 	bltu	r6,r5,811254b0 <__udivsi3+0x44>
811254a8:	314dc83a 	sub	r6,r6,r5
811254ac:	10c4b03a 	or	r2,r2,r3
811254b0:	1806d07a 	srli	r3,r3,1
811254b4:	280ad07a 	srli	r5,r5,1
811254b8:	183ffa1e 	bne	r3,zero,811254a4 <__reset+0xfb1054a4>
811254bc:	f800283a 	ret
811254c0:	0005883a 	mov	r2,zero
811254c4:	f800283a 	ret
811254c8:	00c00044 	movi	r3,1
811254cc:	003ff406 	br	811254a0 <__reset+0xfb1054a0>

811254d0 <__umodsi3>:
811254d0:	2005883a 	mov	r2,r4
811254d4:	2900122e 	bgeu	r5,r4,81125520 <__umodsi3+0x50>
811254d8:	28001116 	blt	r5,zero,81125520 <__umodsi3+0x50>
811254dc:	01800804 	movi	r6,32
811254e0:	00c00044 	movi	r3,1
811254e4:	00000206 	br	811254f0 <__umodsi3+0x20>
811254e8:	30000c26 	beq	r6,zero,8112551c <__umodsi3+0x4c>
811254ec:	28000516 	blt	r5,zero,81125504 <__umodsi3+0x34>
811254f0:	294b883a 	add	r5,r5,r5
811254f4:	31bfffc4 	addi	r6,r6,-1
811254f8:	18c7883a 	add	r3,r3,r3
811254fc:	293ffa36 	bltu	r5,r4,811254e8 <__reset+0xfb1054e8>
81125500:	18000626 	beq	r3,zero,8112551c <__umodsi3+0x4c>
81125504:	1806d07a 	srli	r3,r3,1
81125508:	11400136 	bltu	r2,r5,81125510 <__umodsi3+0x40>
8112550c:	1145c83a 	sub	r2,r2,r5
81125510:	280ad07a 	srli	r5,r5,1
81125514:	183ffb1e 	bne	r3,zero,81125504 <__reset+0xfb105504>
81125518:	f800283a 	ret
8112551c:	f800283a 	ret
81125520:	00c00044 	movi	r3,1
81125524:	003ff706 	br	81125504 <__reset+0xfb105504>

81125528 <__eqsf2>:
81125528:	2006d5fa 	srli	r3,r4,23
8112552c:	280cd5fa 	srli	r6,r5,23
81125530:	01c02034 	movhi	r7,128
81125534:	39ffffc4 	addi	r7,r7,-1
81125538:	18c03fcc 	andi	r3,r3,255
8112553c:	02003fc4 	movi	r8,255
81125540:	3904703a 	and	r2,r7,r4
81125544:	31803fcc 	andi	r6,r6,255
81125548:	394e703a 	and	r7,r7,r5
8112554c:	2008d7fa 	srli	r4,r4,31
81125550:	280ad7fa 	srli	r5,r5,31
81125554:	1a000d26 	beq	r3,r8,8112558c <__eqsf2+0x64>
81125558:	02003fc4 	movi	r8,255
8112555c:	32000826 	beq	r6,r8,81125580 <__eqsf2+0x58>
81125560:	19800226 	beq	r3,r6,8112556c <__eqsf2+0x44>
81125564:	00800044 	movi	r2,1
81125568:	f800283a 	ret
8112556c:	11fffd1e 	bne	r2,r7,81125564 <__reset+0xfb105564>
81125570:	21400926 	beq	r4,r5,81125598 <__eqsf2+0x70>
81125574:	183ffb1e 	bne	r3,zero,81125564 <__reset+0xfb105564>
81125578:	1004c03a 	cmpne	r2,r2,zero
8112557c:	f800283a 	ret
81125580:	383ff726 	beq	r7,zero,81125560 <__reset+0xfb105560>
81125584:	00800044 	movi	r2,1
81125588:	f800283a 	ret
8112558c:	103ff226 	beq	r2,zero,81125558 <__reset+0xfb105558>
81125590:	00800044 	movi	r2,1
81125594:	f800283a 	ret
81125598:	0005883a 	mov	r2,zero
8112559c:	f800283a 	ret

811255a0 <__gesf2>:
811255a0:	2004d5fa 	srli	r2,r4,23
811255a4:	2806d5fa 	srli	r3,r5,23
811255a8:	01802034 	movhi	r6,128
811255ac:	31bfffc4 	addi	r6,r6,-1
811255b0:	10803fcc 	andi	r2,r2,255
811255b4:	01c03fc4 	movi	r7,255
811255b8:	3110703a 	and	r8,r6,r4
811255bc:	18c03fcc 	andi	r3,r3,255
811255c0:	314c703a 	and	r6,r6,r5
811255c4:	2008d7fa 	srli	r4,r4,31
811255c8:	280ad7fa 	srli	r5,r5,31
811255cc:	11c01926 	beq	r2,r7,81125634 <__gesf2+0x94>
811255d0:	01c03fc4 	movi	r7,255
811255d4:	19c00f26 	beq	r3,r7,81125614 <__gesf2+0x74>
811255d8:	1000061e 	bne	r2,zero,811255f4 <__gesf2+0x54>
811255dc:	400f003a 	cmpeq	r7,r8,zero
811255e0:	1800071e 	bne	r3,zero,81125600 <__gesf2+0x60>
811255e4:	3000061e 	bne	r6,zero,81125600 <__gesf2+0x60>
811255e8:	0005883a 	mov	r2,zero
811255ec:	40000e1e 	bne	r8,zero,81125628 <__gesf2+0x88>
811255f0:	f800283a 	ret
811255f4:	18000a1e 	bne	r3,zero,81125620 <__gesf2+0x80>
811255f8:	30000b26 	beq	r6,zero,81125628 <__gesf2+0x88>
811255fc:	000f883a 	mov	r7,zero
81125600:	29403fcc 	andi	r5,r5,255
81125604:	38000726 	beq	r7,zero,81125624 <__gesf2+0x84>
81125608:	28000826 	beq	r5,zero,8112562c <__gesf2+0x8c>
8112560c:	00800044 	movi	r2,1
81125610:	f800283a 	ret
81125614:	303ff026 	beq	r6,zero,811255d8 <__reset+0xfb1055d8>
81125618:	00bfff84 	movi	r2,-2
8112561c:	f800283a 	ret
81125620:	29403fcc 	andi	r5,r5,255
81125624:	21400526 	beq	r4,r5,8112563c <__gesf2+0x9c>
81125628:	203ff826 	beq	r4,zero,8112560c <__reset+0xfb10560c>
8112562c:	00bfffc4 	movi	r2,-1
81125630:	f800283a 	ret
81125634:	403fe626 	beq	r8,zero,811255d0 <__reset+0xfb1055d0>
81125638:	003ff706 	br	81125618 <__reset+0xfb105618>
8112563c:	18bffa16 	blt	r3,r2,81125628 <__reset+0xfb105628>
81125640:	10c00216 	blt	r2,r3,8112564c <__gesf2+0xac>
81125644:	323ff836 	bltu	r6,r8,81125628 <__reset+0xfb105628>
81125648:	4180022e 	bgeu	r8,r6,81125654 <__gesf2+0xb4>
8112564c:	203fef1e 	bne	r4,zero,8112560c <__reset+0xfb10560c>
81125650:	003ff606 	br	8112562c <__reset+0xfb10562c>
81125654:	0005883a 	mov	r2,zero
81125658:	f800283a 	ret

8112565c <__lesf2>:
8112565c:	2004d5fa 	srli	r2,r4,23
81125660:	280cd5fa 	srli	r6,r5,23
81125664:	00c02034 	movhi	r3,128
81125668:	18ffffc4 	addi	r3,r3,-1
8112566c:	10803fcc 	andi	r2,r2,255
81125670:	01c03fc4 	movi	r7,255
81125674:	1910703a 	and	r8,r3,r4
81125678:	31803fcc 	andi	r6,r6,255
8112567c:	1946703a 	and	r3,r3,r5
81125680:	2008d7fa 	srli	r4,r4,31
81125684:	280ad7fa 	srli	r5,r5,31
81125688:	11c01b26 	beq	r2,r7,811256f8 <__lesf2+0x9c>
8112568c:	01c03fc4 	movi	r7,255
81125690:	31c01126 	beq	r6,r7,811256d8 <__lesf2+0x7c>
81125694:	1000071e 	bne	r2,zero,811256b4 <__lesf2+0x58>
81125698:	400f003a 	cmpeq	r7,r8,zero
8112569c:	21003fcc 	andi	r4,r4,255
811256a0:	3000081e 	bne	r6,zero,811256c4 <__lesf2+0x68>
811256a4:	1800071e 	bne	r3,zero,811256c4 <__lesf2+0x68>
811256a8:	0005883a 	mov	r2,zero
811256ac:	40000f1e 	bne	r8,zero,811256ec <__lesf2+0x90>
811256b0:	f800283a 	ret
811256b4:	21003fcc 	andi	r4,r4,255
811256b8:	30000a1e 	bne	r6,zero,811256e4 <__lesf2+0x88>
811256bc:	18000b26 	beq	r3,zero,811256ec <__lesf2+0x90>
811256c0:	000f883a 	mov	r7,zero
811256c4:	29403fcc 	andi	r5,r5,255
811256c8:	38000726 	beq	r7,zero,811256e8 <__lesf2+0x8c>
811256cc:	28000826 	beq	r5,zero,811256f0 <__lesf2+0x94>
811256d0:	00800044 	movi	r2,1
811256d4:	f800283a 	ret
811256d8:	183fee26 	beq	r3,zero,81125694 <__reset+0xfb105694>
811256dc:	00800084 	movi	r2,2
811256e0:	f800283a 	ret
811256e4:	29403fcc 	andi	r5,r5,255
811256e8:	21400626 	beq	r4,r5,81125704 <__lesf2+0xa8>
811256ec:	203ff826 	beq	r4,zero,811256d0 <__reset+0xfb1056d0>
811256f0:	00bfffc4 	movi	r2,-1
811256f4:	f800283a 	ret
811256f8:	403fe426 	beq	r8,zero,8112568c <__reset+0xfb10568c>
811256fc:	00800084 	movi	r2,2
81125700:	f800283a 	ret
81125704:	30bff916 	blt	r6,r2,811256ec <__reset+0xfb1056ec>
81125708:	11800216 	blt	r2,r6,81125714 <__lesf2+0xb8>
8112570c:	1a3ff736 	bltu	r3,r8,811256ec <__reset+0xfb1056ec>
81125710:	40c0022e 	bgeu	r8,r3,8112571c <__lesf2+0xc0>
81125714:	203fee1e 	bne	r4,zero,811256d0 <__reset+0xfb1056d0>
81125718:	003ff506 	br	811256f0 <__reset+0xfb1056f0>
8112571c:	0005883a 	mov	r2,zero
81125720:	f800283a 	ret

81125724 <__adddf3>:
81125724:	02c00434 	movhi	r11,16
81125728:	5affffc4 	addi	r11,r11,-1
8112572c:	2806d7fa 	srli	r3,r5,31
81125730:	2ad4703a 	and	r10,r5,r11
81125734:	3ad2703a 	and	r9,r7,r11
81125738:	3804d53a 	srli	r2,r7,20
8112573c:	3018d77a 	srli	r12,r6,29
81125740:	280ad53a 	srli	r5,r5,20
81125744:	501490fa 	slli	r10,r10,3
81125748:	2010d77a 	srli	r8,r4,29
8112574c:	481290fa 	slli	r9,r9,3
81125750:	380ed7fa 	srli	r7,r7,31
81125754:	defffb04 	addi	sp,sp,-20
81125758:	de00012e 	bgeu	sp,et,81125760 <__adddf3+0x3c>
8112575c:	003b68fa 	trap	3
81125760:	dc800215 	stw	r18,8(sp)
81125764:	dc400115 	stw	r17,4(sp)
81125768:	dc000015 	stw	r16,0(sp)
8112576c:	dfc00415 	stw	ra,16(sp)
81125770:	dcc00315 	stw	r19,12(sp)
81125774:	1c803fcc 	andi	r18,r3,255
81125778:	2c01ffcc 	andi	r16,r5,2047
8112577c:	5210b03a 	or	r8,r10,r8
81125780:	202290fa 	slli	r17,r4,3
81125784:	1081ffcc 	andi	r2,r2,2047
81125788:	4b12b03a 	or	r9,r9,r12
8112578c:	300c90fa 	slli	r6,r6,3
81125790:	91c07526 	beq	r18,r7,81125968 <__adddf3+0x244>
81125794:	8087c83a 	sub	r3,r16,r2
81125798:	00c0ab0e 	bge	zero,r3,81125a48 <__adddf3+0x324>
8112579c:	10002a1e 	bne	r2,zero,81125848 <__adddf3+0x124>
811257a0:	4984b03a 	or	r2,r9,r6
811257a4:	1000961e 	bne	r2,zero,81125a00 <__adddf3+0x2dc>
811257a8:	888001cc 	andi	r2,r17,7
811257ac:	10000726 	beq	r2,zero,811257cc <__adddf3+0xa8>
811257b0:	888003cc 	andi	r2,r17,15
811257b4:	00c00104 	movi	r3,4
811257b8:	10c00426 	beq	r2,r3,811257cc <__adddf3+0xa8>
811257bc:	88c7883a 	add	r3,r17,r3
811257c0:	1c63803a 	cmpltu	r17,r3,r17
811257c4:	4451883a 	add	r8,r8,r17
811257c8:	1823883a 	mov	r17,r3
811257cc:	4080202c 	andhi	r2,r8,128
811257d0:	10005926 	beq	r2,zero,81125938 <__adddf3+0x214>
811257d4:	84000044 	addi	r16,r16,1
811257d8:	0081ffc4 	movi	r2,2047
811257dc:	8080ba26 	beq	r16,r2,81125ac8 <__adddf3+0x3a4>
811257e0:	00bfe034 	movhi	r2,65408
811257e4:	10bfffc4 	addi	r2,r2,-1
811257e8:	4090703a 	and	r8,r8,r2
811257ec:	4004977a 	slli	r2,r8,29
811257f0:	4010927a 	slli	r8,r8,9
811257f4:	8822d0fa 	srli	r17,r17,3
811257f8:	8401ffcc 	andi	r16,r16,2047
811257fc:	4010d33a 	srli	r8,r8,12
81125800:	9007883a 	mov	r3,r18
81125804:	1444b03a 	or	r2,r2,r17
81125808:	8401ffcc 	andi	r16,r16,2047
8112580c:	8020953a 	slli	r16,r16,20
81125810:	18c03fcc 	andi	r3,r3,255
81125814:	01000434 	movhi	r4,16
81125818:	213fffc4 	addi	r4,r4,-1
8112581c:	180697fa 	slli	r3,r3,31
81125820:	4110703a 	and	r8,r8,r4
81125824:	4410b03a 	or	r8,r8,r16
81125828:	40c6b03a 	or	r3,r8,r3
8112582c:	dfc00417 	ldw	ra,16(sp)
81125830:	dcc00317 	ldw	r19,12(sp)
81125834:	dc800217 	ldw	r18,8(sp)
81125838:	dc400117 	ldw	r17,4(sp)
8112583c:	dc000017 	ldw	r16,0(sp)
81125840:	dec00504 	addi	sp,sp,20
81125844:	f800283a 	ret
81125848:	0081ffc4 	movi	r2,2047
8112584c:	80bfd626 	beq	r16,r2,811257a8 <__reset+0xfb1057a8>
81125850:	4a402034 	orhi	r9,r9,128
81125854:	00800e04 	movi	r2,56
81125858:	10c09f16 	blt	r2,r3,81125ad8 <__adddf3+0x3b4>
8112585c:	008007c4 	movi	r2,31
81125860:	10c0c216 	blt	r2,r3,81125b6c <__adddf3+0x448>
81125864:	00800804 	movi	r2,32
81125868:	10c5c83a 	sub	r2,r2,r3
8112586c:	488a983a 	sll	r5,r9,r2
81125870:	30c8d83a 	srl	r4,r6,r3
81125874:	3084983a 	sll	r2,r6,r2
81125878:	48c6d83a 	srl	r3,r9,r3
8112587c:	290cb03a 	or	r6,r5,r4
81125880:	1004c03a 	cmpne	r2,r2,zero
81125884:	308cb03a 	or	r6,r6,r2
81125888:	898dc83a 	sub	r6,r17,r6
8112588c:	89a3803a 	cmpltu	r17,r17,r6
81125890:	40d1c83a 	sub	r8,r8,r3
81125894:	4451c83a 	sub	r8,r8,r17
81125898:	3023883a 	mov	r17,r6
8112589c:	4080202c 	andhi	r2,r8,128
811258a0:	10002326 	beq	r2,zero,81125930 <__adddf3+0x20c>
811258a4:	04c02034 	movhi	r19,128
811258a8:	9cffffc4 	addi	r19,r19,-1
811258ac:	44e6703a 	and	r19,r8,r19
811258b0:	98007626 	beq	r19,zero,81125a8c <__adddf3+0x368>
811258b4:	9809883a 	mov	r4,r19
811258b8:	1111c140 	call	81111c14 <__clzsi2>
811258bc:	10fffe04 	addi	r3,r2,-8
811258c0:	010007c4 	movi	r4,31
811258c4:	20c07716 	blt	r4,r3,81125aa4 <__adddf3+0x380>
811258c8:	00800804 	movi	r2,32
811258cc:	10c5c83a 	sub	r2,r2,r3
811258d0:	8884d83a 	srl	r2,r17,r2
811258d4:	98d0983a 	sll	r8,r19,r3
811258d8:	88e2983a 	sll	r17,r17,r3
811258dc:	1204b03a 	or	r2,r2,r8
811258e0:	1c007416 	blt	r3,r16,81125ab4 <__adddf3+0x390>
811258e4:	1c21c83a 	sub	r16,r3,r16
811258e8:	82000044 	addi	r8,r16,1
811258ec:	00c007c4 	movi	r3,31
811258f0:	1a009116 	blt	r3,r8,81125b38 <__adddf3+0x414>
811258f4:	00c00804 	movi	r3,32
811258f8:	1a07c83a 	sub	r3,r3,r8
811258fc:	8a08d83a 	srl	r4,r17,r8
81125900:	88e2983a 	sll	r17,r17,r3
81125904:	10c6983a 	sll	r3,r2,r3
81125908:	1210d83a 	srl	r8,r2,r8
8112590c:	8804c03a 	cmpne	r2,r17,zero
81125910:	1906b03a 	or	r3,r3,r4
81125914:	18a2b03a 	or	r17,r3,r2
81125918:	0021883a 	mov	r16,zero
8112591c:	003fa206 	br	811257a8 <__reset+0xfb1057a8>
81125920:	1890b03a 	or	r8,r3,r2
81125924:	40017d26 	beq	r8,zero,81125f1c <__adddf3+0x7f8>
81125928:	1011883a 	mov	r8,r2
8112592c:	1823883a 	mov	r17,r3
81125930:	888001cc 	andi	r2,r17,7
81125934:	103f9e1e 	bne	r2,zero,811257b0 <__reset+0xfb1057b0>
81125938:	4004977a 	slli	r2,r8,29
8112593c:	8822d0fa 	srli	r17,r17,3
81125940:	4010d0fa 	srli	r8,r8,3
81125944:	9007883a 	mov	r3,r18
81125948:	1444b03a 	or	r2,r2,r17
8112594c:	0101ffc4 	movi	r4,2047
81125950:	81002426 	beq	r16,r4,811259e4 <__adddf3+0x2c0>
81125954:	8120703a 	and	r16,r16,r4
81125958:	01000434 	movhi	r4,16
8112595c:	213fffc4 	addi	r4,r4,-1
81125960:	4110703a 	and	r8,r8,r4
81125964:	003fa806 	br	81125808 <__reset+0xfb105808>
81125968:	8089c83a 	sub	r4,r16,r2
8112596c:	01005e0e 	bge	zero,r4,81125ae8 <__adddf3+0x3c4>
81125970:	10002b26 	beq	r2,zero,81125a20 <__adddf3+0x2fc>
81125974:	0081ffc4 	movi	r2,2047
81125978:	80bf8b26 	beq	r16,r2,811257a8 <__reset+0xfb1057a8>
8112597c:	4a402034 	orhi	r9,r9,128
81125980:	00800e04 	movi	r2,56
81125984:	1100a40e 	bge	r2,r4,81125c18 <__adddf3+0x4f4>
81125988:	498cb03a 	or	r6,r9,r6
8112598c:	300ac03a 	cmpne	r5,r6,zero
81125990:	0013883a 	mov	r9,zero
81125994:	2c4b883a 	add	r5,r5,r17
81125998:	2c63803a 	cmpltu	r17,r5,r17
8112599c:	4a11883a 	add	r8,r9,r8
811259a0:	8a11883a 	add	r8,r17,r8
811259a4:	2823883a 	mov	r17,r5
811259a8:	4080202c 	andhi	r2,r8,128
811259ac:	103fe026 	beq	r2,zero,81125930 <__reset+0xfb105930>
811259b0:	84000044 	addi	r16,r16,1
811259b4:	0081ffc4 	movi	r2,2047
811259b8:	8080d226 	beq	r16,r2,81125d04 <__adddf3+0x5e0>
811259bc:	00bfe034 	movhi	r2,65408
811259c0:	10bfffc4 	addi	r2,r2,-1
811259c4:	4090703a 	and	r8,r8,r2
811259c8:	880ad07a 	srli	r5,r17,1
811259cc:	400897fa 	slli	r4,r8,31
811259d0:	88c0004c 	andi	r3,r17,1
811259d4:	28e2b03a 	or	r17,r5,r3
811259d8:	4010d07a 	srli	r8,r8,1
811259dc:	2462b03a 	or	r17,r4,r17
811259e0:	003f7106 	br	811257a8 <__reset+0xfb1057a8>
811259e4:	4088b03a 	or	r4,r8,r2
811259e8:	20014526 	beq	r4,zero,81125f00 <__adddf3+0x7dc>
811259ec:	01000434 	movhi	r4,16
811259f0:	42000234 	orhi	r8,r8,8
811259f4:	213fffc4 	addi	r4,r4,-1
811259f8:	4110703a 	and	r8,r8,r4
811259fc:	003f8206 	br	81125808 <__reset+0xfb105808>
81125a00:	18ffffc4 	addi	r3,r3,-1
81125a04:	1800491e 	bne	r3,zero,81125b2c <__adddf3+0x408>
81125a08:	898bc83a 	sub	r5,r17,r6
81125a0c:	8963803a 	cmpltu	r17,r17,r5
81125a10:	4251c83a 	sub	r8,r8,r9
81125a14:	4451c83a 	sub	r8,r8,r17
81125a18:	2823883a 	mov	r17,r5
81125a1c:	003f9f06 	br	8112589c <__reset+0xfb10589c>
81125a20:	4984b03a 	or	r2,r9,r6
81125a24:	103f6026 	beq	r2,zero,811257a8 <__reset+0xfb1057a8>
81125a28:	213fffc4 	addi	r4,r4,-1
81125a2c:	2000931e 	bne	r4,zero,81125c7c <__adddf3+0x558>
81125a30:	898d883a 	add	r6,r17,r6
81125a34:	3463803a 	cmpltu	r17,r6,r17
81125a38:	4251883a 	add	r8,r8,r9
81125a3c:	8a11883a 	add	r8,r17,r8
81125a40:	3023883a 	mov	r17,r6
81125a44:	003fd806 	br	811259a8 <__reset+0xfb1059a8>
81125a48:	1800541e 	bne	r3,zero,81125b9c <__adddf3+0x478>
81125a4c:	80800044 	addi	r2,r16,1
81125a50:	1081ffcc 	andi	r2,r2,2047
81125a54:	00c00044 	movi	r3,1
81125a58:	1880a00e 	bge	r3,r2,81125cdc <__adddf3+0x5b8>
81125a5c:	8989c83a 	sub	r4,r17,r6
81125a60:	8905803a 	cmpltu	r2,r17,r4
81125a64:	4267c83a 	sub	r19,r8,r9
81125a68:	98a7c83a 	sub	r19,r19,r2
81125a6c:	9880202c 	andhi	r2,r19,128
81125a70:	10006326 	beq	r2,zero,81125c00 <__adddf3+0x4dc>
81125a74:	3463c83a 	sub	r17,r6,r17
81125a78:	4a07c83a 	sub	r3,r9,r8
81125a7c:	344d803a 	cmpltu	r6,r6,r17
81125a80:	19a7c83a 	sub	r19,r3,r6
81125a84:	3825883a 	mov	r18,r7
81125a88:	983f8a1e 	bne	r19,zero,811258b4 <__reset+0xfb1058b4>
81125a8c:	8809883a 	mov	r4,r17
81125a90:	1111c140 	call	81111c14 <__clzsi2>
81125a94:	10800804 	addi	r2,r2,32
81125a98:	10fffe04 	addi	r3,r2,-8
81125a9c:	010007c4 	movi	r4,31
81125aa0:	20ff890e 	bge	r4,r3,811258c8 <__reset+0xfb1058c8>
81125aa4:	10bff604 	addi	r2,r2,-40
81125aa8:	8884983a 	sll	r2,r17,r2
81125aac:	0023883a 	mov	r17,zero
81125ab0:	1c3f8c0e 	bge	r3,r16,811258e4 <__reset+0xfb1058e4>
81125ab4:	023fe034 	movhi	r8,65408
81125ab8:	423fffc4 	addi	r8,r8,-1
81125abc:	80e1c83a 	sub	r16,r16,r3
81125ac0:	1210703a 	and	r8,r2,r8
81125ac4:	003f3806 	br	811257a8 <__reset+0xfb1057a8>
81125ac8:	9007883a 	mov	r3,r18
81125acc:	0011883a 	mov	r8,zero
81125ad0:	0005883a 	mov	r2,zero
81125ad4:	003f4c06 	br	81125808 <__reset+0xfb105808>
81125ad8:	498cb03a 	or	r6,r9,r6
81125adc:	300cc03a 	cmpne	r6,r6,zero
81125ae0:	0007883a 	mov	r3,zero
81125ae4:	003f6806 	br	81125888 <__reset+0xfb105888>
81125ae8:	20009c1e 	bne	r4,zero,81125d5c <__adddf3+0x638>
81125aec:	80800044 	addi	r2,r16,1
81125af0:	1141ffcc 	andi	r5,r2,2047
81125af4:	01000044 	movi	r4,1
81125af8:	2140670e 	bge	r4,r5,81125c98 <__adddf3+0x574>
81125afc:	0101ffc4 	movi	r4,2047
81125b00:	11007f26 	beq	r2,r4,81125d00 <__adddf3+0x5dc>
81125b04:	898d883a 	add	r6,r17,r6
81125b08:	4247883a 	add	r3,r8,r9
81125b0c:	3451803a 	cmpltu	r8,r6,r17
81125b10:	40d1883a 	add	r8,r8,r3
81125b14:	402297fa 	slli	r17,r8,31
81125b18:	300cd07a 	srli	r6,r6,1
81125b1c:	4010d07a 	srli	r8,r8,1
81125b20:	1021883a 	mov	r16,r2
81125b24:	89a2b03a 	or	r17,r17,r6
81125b28:	003f1f06 	br	811257a8 <__reset+0xfb1057a8>
81125b2c:	0081ffc4 	movi	r2,2047
81125b30:	80bf481e 	bne	r16,r2,81125854 <__reset+0xfb105854>
81125b34:	003f1c06 	br	811257a8 <__reset+0xfb1057a8>
81125b38:	843ff844 	addi	r16,r16,-31
81125b3c:	01000804 	movi	r4,32
81125b40:	1406d83a 	srl	r3,r2,r16
81125b44:	41005026 	beq	r8,r4,81125c88 <__adddf3+0x564>
81125b48:	01001004 	movi	r4,64
81125b4c:	2211c83a 	sub	r8,r4,r8
81125b50:	1204983a 	sll	r2,r2,r8
81125b54:	88a2b03a 	or	r17,r17,r2
81125b58:	8822c03a 	cmpne	r17,r17,zero
81125b5c:	1c62b03a 	or	r17,r3,r17
81125b60:	0011883a 	mov	r8,zero
81125b64:	0021883a 	mov	r16,zero
81125b68:	003f7106 	br	81125930 <__reset+0xfb105930>
81125b6c:	193ff804 	addi	r4,r3,-32
81125b70:	00800804 	movi	r2,32
81125b74:	4908d83a 	srl	r4,r9,r4
81125b78:	18804526 	beq	r3,r2,81125c90 <__adddf3+0x56c>
81125b7c:	00801004 	movi	r2,64
81125b80:	10c5c83a 	sub	r2,r2,r3
81125b84:	4886983a 	sll	r3,r9,r2
81125b88:	198cb03a 	or	r6,r3,r6
81125b8c:	300cc03a 	cmpne	r6,r6,zero
81125b90:	218cb03a 	or	r6,r4,r6
81125b94:	0007883a 	mov	r3,zero
81125b98:	003f3b06 	br	81125888 <__reset+0xfb105888>
81125b9c:	80002a26 	beq	r16,zero,81125c48 <__adddf3+0x524>
81125ba0:	0101ffc4 	movi	r4,2047
81125ba4:	11006826 	beq	r2,r4,81125d48 <__adddf3+0x624>
81125ba8:	00c7c83a 	sub	r3,zero,r3
81125bac:	42002034 	orhi	r8,r8,128
81125bb0:	01000e04 	movi	r4,56
81125bb4:	20c07c16 	blt	r4,r3,81125da8 <__adddf3+0x684>
81125bb8:	010007c4 	movi	r4,31
81125bbc:	20c0da16 	blt	r4,r3,81125f28 <__adddf3+0x804>
81125bc0:	01000804 	movi	r4,32
81125bc4:	20c9c83a 	sub	r4,r4,r3
81125bc8:	4114983a 	sll	r10,r8,r4
81125bcc:	88cad83a 	srl	r5,r17,r3
81125bd0:	8908983a 	sll	r4,r17,r4
81125bd4:	40c6d83a 	srl	r3,r8,r3
81125bd8:	5162b03a 	or	r17,r10,r5
81125bdc:	2008c03a 	cmpne	r4,r4,zero
81125be0:	8922b03a 	or	r17,r17,r4
81125be4:	3463c83a 	sub	r17,r6,r17
81125be8:	48c7c83a 	sub	r3,r9,r3
81125bec:	344d803a 	cmpltu	r6,r6,r17
81125bf0:	1991c83a 	sub	r8,r3,r6
81125bf4:	1021883a 	mov	r16,r2
81125bf8:	3825883a 	mov	r18,r7
81125bfc:	003f2706 	br	8112589c <__reset+0xfb10589c>
81125c00:	24d0b03a 	or	r8,r4,r19
81125c04:	40001b1e 	bne	r8,zero,81125c74 <__adddf3+0x550>
81125c08:	0005883a 	mov	r2,zero
81125c0c:	0007883a 	mov	r3,zero
81125c10:	0021883a 	mov	r16,zero
81125c14:	003f4d06 	br	8112594c <__reset+0xfb10594c>
81125c18:	008007c4 	movi	r2,31
81125c1c:	11003c16 	blt	r2,r4,81125d10 <__adddf3+0x5ec>
81125c20:	00800804 	movi	r2,32
81125c24:	1105c83a 	sub	r2,r2,r4
81125c28:	488e983a 	sll	r7,r9,r2
81125c2c:	310ad83a 	srl	r5,r6,r4
81125c30:	3084983a 	sll	r2,r6,r2
81125c34:	4912d83a 	srl	r9,r9,r4
81125c38:	394ab03a 	or	r5,r7,r5
81125c3c:	1004c03a 	cmpne	r2,r2,zero
81125c40:	288ab03a 	or	r5,r5,r2
81125c44:	003f5306 	br	81125994 <__reset+0xfb105994>
81125c48:	4448b03a 	or	r4,r8,r17
81125c4c:	20003e26 	beq	r4,zero,81125d48 <__adddf3+0x624>
81125c50:	00c6303a 	nor	r3,zero,r3
81125c54:	18003a1e 	bne	r3,zero,81125d40 <__adddf3+0x61c>
81125c58:	3463c83a 	sub	r17,r6,r17
81125c5c:	4a07c83a 	sub	r3,r9,r8
81125c60:	344d803a 	cmpltu	r6,r6,r17
81125c64:	1991c83a 	sub	r8,r3,r6
81125c68:	1021883a 	mov	r16,r2
81125c6c:	3825883a 	mov	r18,r7
81125c70:	003f0a06 	br	8112589c <__reset+0xfb10589c>
81125c74:	2023883a 	mov	r17,r4
81125c78:	003f0d06 	br	811258b0 <__reset+0xfb1058b0>
81125c7c:	0081ffc4 	movi	r2,2047
81125c80:	80bf3f1e 	bne	r16,r2,81125980 <__reset+0xfb105980>
81125c84:	003ec806 	br	811257a8 <__reset+0xfb1057a8>
81125c88:	0005883a 	mov	r2,zero
81125c8c:	003fb106 	br	81125b54 <__reset+0xfb105b54>
81125c90:	0007883a 	mov	r3,zero
81125c94:	003fbc06 	br	81125b88 <__reset+0xfb105b88>
81125c98:	4444b03a 	or	r2,r8,r17
81125c9c:	8000871e 	bne	r16,zero,81125ebc <__adddf3+0x798>
81125ca0:	1000ba26 	beq	r2,zero,81125f8c <__adddf3+0x868>
81125ca4:	4984b03a 	or	r2,r9,r6
81125ca8:	103ebf26 	beq	r2,zero,811257a8 <__reset+0xfb1057a8>
81125cac:	8985883a 	add	r2,r17,r6
81125cb0:	4247883a 	add	r3,r8,r9
81125cb4:	1451803a 	cmpltu	r8,r2,r17
81125cb8:	40d1883a 	add	r8,r8,r3
81125cbc:	40c0202c 	andhi	r3,r8,128
81125cc0:	1023883a 	mov	r17,r2
81125cc4:	183f1a26 	beq	r3,zero,81125930 <__reset+0xfb105930>
81125cc8:	00bfe034 	movhi	r2,65408
81125ccc:	10bfffc4 	addi	r2,r2,-1
81125cd0:	2021883a 	mov	r16,r4
81125cd4:	4090703a 	and	r8,r8,r2
81125cd8:	003eb306 	br	811257a8 <__reset+0xfb1057a8>
81125cdc:	4444b03a 	or	r2,r8,r17
81125ce0:	8000291e 	bne	r16,zero,81125d88 <__adddf3+0x664>
81125ce4:	10004b1e 	bne	r2,zero,81125e14 <__adddf3+0x6f0>
81125ce8:	4990b03a 	or	r8,r9,r6
81125cec:	40008b26 	beq	r8,zero,81125f1c <__adddf3+0x7f8>
81125cf0:	4811883a 	mov	r8,r9
81125cf4:	3023883a 	mov	r17,r6
81125cf8:	3825883a 	mov	r18,r7
81125cfc:	003eaa06 	br	811257a8 <__reset+0xfb1057a8>
81125d00:	1021883a 	mov	r16,r2
81125d04:	0011883a 	mov	r8,zero
81125d08:	0005883a 	mov	r2,zero
81125d0c:	003f0f06 	br	8112594c <__reset+0xfb10594c>
81125d10:	217ff804 	addi	r5,r4,-32
81125d14:	00800804 	movi	r2,32
81125d18:	494ad83a 	srl	r5,r9,r5
81125d1c:	20807d26 	beq	r4,r2,81125f14 <__adddf3+0x7f0>
81125d20:	00801004 	movi	r2,64
81125d24:	1109c83a 	sub	r4,r2,r4
81125d28:	4912983a 	sll	r9,r9,r4
81125d2c:	498cb03a 	or	r6,r9,r6
81125d30:	300cc03a 	cmpne	r6,r6,zero
81125d34:	298ab03a 	or	r5,r5,r6
81125d38:	0013883a 	mov	r9,zero
81125d3c:	003f1506 	br	81125994 <__reset+0xfb105994>
81125d40:	0101ffc4 	movi	r4,2047
81125d44:	113f9a1e 	bne	r2,r4,81125bb0 <__reset+0xfb105bb0>
81125d48:	4811883a 	mov	r8,r9
81125d4c:	3023883a 	mov	r17,r6
81125d50:	1021883a 	mov	r16,r2
81125d54:	3825883a 	mov	r18,r7
81125d58:	003e9306 	br	811257a8 <__reset+0xfb1057a8>
81125d5c:	8000161e 	bne	r16,zero,81125db8 <__adddf3+0x694>
81125d60:	444ab03a 	or	r5,r8,r17
81125d64:	28005126 	beq	r5,zero,81125eac <__adddf3+0x788>
81125d68:	0108303a 	nor	r4,zero,r4
81125d6c:	20004d1e 	bne	r4,zero,81125ea4 <__adddf3+0x780>
81125d70:	89a3883a 	add	r17,r17,r6
81125d74:	4253883a 	add	r9,r8,r9
81125d78:	898d803a 	cmpltu	r6,r17,r6
81125d7c:	3251883a 	add	r8,r6,r9
81125d80:	1021883a 	mov	r16,r2
81125d84:	003f0806 	br	811259a8 <__reset+0xfb1059a8>
81125d88:	1000301e 	bne	r2,zero,81125e4c <__adddf3+0x728>
81125d8c:	4984b03a 	or	r2,r9,r6
81125d90:	10007126 	beq	r2,zero,81125f58 <__adddf3+0x834>
81125d94:	4811883a 	mov	r8,r9
81125d98:	3023883a 	mov	r17,r6
81125d9c:	3825883a 	mov	r18,r7
81125da0:	0401ffc4 	movi	r16,2047
81125da4:	003e8006 	br	811257a8 <__reset+0xfb1057a8>
81125da8:	4462b03a 	or	r17,r8,r17
81125dac:	8822c03a 	cmpne	r17,r17,zero
81125db0:	0007883a 	mov	r3,zero
81125db4:	003f8b06 	br	81125be4 <__reset+0xfb105be4>
81125db8:	0141ffc4 	movi	r5,2047
81125dbc:	11403b26 	beq	r2,r5,81125eac <__adddf3+0x788>
81125dc0:	0109c83a 	sub	r4,zero,r4
81125dc4:	42002034 	orhi	r8,r8,128
81125dc8:	01400e04 	movi	r5,56
81125dcc:	29006716 	blt	r5,r4,81125f6c <__adddf3+0x848>
81125dd0:	014007c4 	movi	r5,31
81125dd4:	29007016 	blt	r5,r4,81125f98 <__adddf3+0x874>
81125dd8:	01400804 	movi	r5,32
81125ddc:	290bc83a 	sub	r5,r5,r4
81125de0:	4154983a 	sll	r10,r8,r5
81125de4:	890ed83a 	srl	r7,r17,r4
81125de8:	894a983a 	sll	r5,r17,r5
81125dec:	4108d83a 	srl	r4,r8,r4
81125df0:	51e2b03a 	or	r17,r10,r7
81125df4:	280ac03a 	cmpne	r5,r5,zero
81125df8:	8962b03a 	or	r17,r17,r5
81125dfc:	89a3883a 	add	r17,r17,r6
81125e00:	2253883a 	add	r9,r4,r9
81125e04:	898d803a 	cmpltu	r6,r17,r6
81125e08:	3251883a 	add	r8,r6,r9
81125e0c:	1021883a 	mov	r16,r2
81125e10:	003ee506 	br	811259a8 <__reset+0xfb1059a8>
81125e14:	4984b03a 	or	r2,r9,r6
81125e18:	103e6326 	beq	r2,zero,811257a8 <__reset+0xfb1057a8>
81125e1c:	8987c83a 	sub	r3,r17,r6
81125e20:	88c9803a 	cmpltu	r4,r17,r3
81125e24:	4245c83a 	sub	r2,r8,r9
81125e28:	1105c83a 	sub	r2,r2,r4
81125e2c:	1100202c 	andhi	r4,r2,128
81125e30:	203ebb26 	beq	r4,zero,81125920 <__reset+0xfb105920>
81125e34:	3463c83a 	sub	r17,r6,r17
81125e38:	4a07c83a 	sub	r3,r9,r8
81125e3c:	344d803a 	cmpltu	r6,r6,r17
81125e40:	1991c83a 	sub	r8,r3,r6
81125e44:	3825883a 	mov	r18,r7
81125e48:	003e5706 	br	811257a8 <__reset+0xfb1057a8>
81125e4c:	4984b03a 	or	r2,r9,r6
81125e50:	10002e26 	beq	r2,zero,81125f0c <__adddf3+0x7e8>
81125e54:	4004d0fa 	srli	r2,r8,3
81125e58:	8822d0fa 	srli	r17,r17,3
81125e5c:	4010977a 	slli	r8,r8,29
81125e60:	10c0022c 	andhi	r3,r2,8
81125e64:	4462b03a 	or	r17,r8,r17
81125e68:	18000826 	beq	r3,zero,81125e8c <__adddf3+0x768>
81125e6c:	4808d0fa 	srli	r4,r9,3
81125e70:	20c0022c 	andhi	r3,r4,8
81125e74:	1800051e 	bne	r3,zero,81125e8c <__adddf3+0x768>
81125e78:	300cd0fa 	srli	r6,r6,3
81125e7c:	4806977a 	slli	r3,r9,29
81125e80:	2005883a 	mov	r2,r4
81125e84:	3825883a 	mov	r18,r7
81125e88:	19a2b03a 	or	r17,r3,r6
81125e8c:	8810d77a 	srli	r8,r17,29
81125e90:	100490fa 	slli	r2,r2,3
81125e94:	882290fa 	slli	r17,r17,3
81125e98:	0401ffc4 	movi	r16,2047
81125e9c:	4090b03a 	or	r8,r8,r2
81125ea0:	003e4106 	br	811257a8 <__reset+0xfb1057a8>
81125ea4:	0141ffc4 	movi	r5,2047
81125ea8:	117fc71e 	bne	r2,r5,81125dc8 <__reset+0xfb105dc8>
81125eac:	4811883a 	mov	r8,r9
81125eb0:	3023883a 	mov	r17,r6
81125eb4:	1021883a 	mov	r16,r2
81125eb8:	003e3b06 	br	811257a8 <__reset+0xfb1057a8>
81125ebc:	10002f26 	beq	r2,zero,81125f7c <__adddf3+0x858>
81125ec0:	4984b03a 	or	r2,r9,r6
81125ec4:	10001126 	beq	r2,zero,81125f0c <__adddf3+0x7e8>
81125ec8:	4004d0fa 	srli	r2,r8,3
81125ecc:	8822d0fa 	srli	r17,r17,3
81125ed0:	4010977a 	slli	r8,r8,29
81125ed4:	10c0022c 	andhi	r3,r2,8
81125ed8:	4462b03a 	or	r17,r8,r17
81125edc:	183feb26 	beq	r3,zero,81125e8c <__reset+0xfb105e8c>
81125ee0:	4808d0fa 	srli	r4,r9,3
81125ee4:	20c0022c 	andhi	r3,r4,8
81125ee8:	183fe81e 	bne	r3,zero,81125e8c <__reset+0xfb105e8c>
81125eec:	300cd0fa 	srli	r6,r6,3
81125ef0:	4806977a 	slli	r3,r9,29
81125ef4:	2005883a 	mov	r2,r4
81125ef8:	19a2b03a 	or	r17,r3,r6
81125efc:	003fe306 	br	81125e8c <__reset+0xfb105e8c>
81125f00:	0011883a 	mov	r8,zero
81125f04:	0005883a 	mov	r2,zero
81125f08:	003e3f06 	br	81125808 <__reset+0xfb105808>
81125f0c:	0401ffc4 	movi	r16,2047
81125f10:	003e2506 	br	811257a8 <__reset+0xfb1057a8>
81125f14:	0013883a 	mov	r9,zero
81125f18:	003f8406 	br	81125d2c <__reset+0xfb105d2c>
81125f1c:	0005883a 	mov	r2,zero
81125f20:	0007883a 	mov	r3,zero
81125f24:	003e8906 	br	8112594c <__reset+0xfb10594c>
81125f28:	197ff804 	addi	r5,r3,-32
81125f2c:	01000804 	movi	r4,32
81125f30:	414ad83a 	srl	r5,r8,r5
81125f34:	19002426 	beq	r3,r4,81125fc8 <__adddf3+0x8a4>
81125f38:	01001004 	movi	r4,64
81125f3c:	20c7c83a 	sub	r3,r4,r3
81125f40:	40c6983a 	sll	r3,r8,r3
81125f44:	1c46b03a 	or	r3,r3,r17
81125f48:	1806c03a 	cmpne	r3,r3,zero
81125f4c:	28e2b03a 	or	r17,r5,r3
81125f50:	0007883a 	mov	r3,zero
81125f54:	003f2306 	br	81125be4 <__reset+0xfb105be4>
81125f58:	0007883a 	mov	r3,zero
81125f5c:	5811883a 	mov	r8,r11
81125f60:	00bfffc4 	movi	r2,-1
81125f64:	0401ffc4 	movi	r16,2047
81125f68:	003e7806 	br	8112594c <__reset+0xfb10594c>
81125f6c:	4462b03a 	or	r17,r8,r17
81125f70:	8822c03a 	cmpne	r17,r17,zero
81125f74:	0009883a 	mov	r4,zero
81125f78:	003fa006 	br	81125dfc <__reset+0xfb105dfc>
81125f7c:	4811883a 	mov	r8,r9
81125f80:	3023883a 	mov	r17,r6
81125f84:	0401ffc4 	movi	r16,2047
81125f88:	003e0706 	br	811257a8 <__reset+0xfb1057a8>
81125f8c:	4811883a 	mov	r8,r9
81125f90:	3023883a 	mov	r17,r6
81125f94:	003e0406 	br	811257a8 <__reset+0xfb1057a8>
81125f98:	21fff804 	addi	r7,r4,-32
81125f9c:	01400804 	movi	r5,32
81125fa0:	41ced83a 	srl	r7,r8,r7
81125fa4:	21400a26 	beq	r4,r5,81125fd0 <__adddf3+0x8ac>
81125fa8:	01401004 	movi	r5,64
81125fac:	2909c83a 	sub	r4,r5,r4
81125fb0:	4108983a 	sll	r4,r8,r4
81125fb4:	2448b03a 	or	r4,r4,r17
81125fb8:	2008c03a 	cmpne	r4,r4,zero
81125fbc:	3922b03a 	or	r17,r7,r4
81125fc0:	0009883a 	mov	r4,zero
81125fc4:	003f8d06 	br	81125dfc <__reset+0xfb105dfc>
81125fc8:	0007883a 	mov	r3,zero
81125fcc:	003fdd06 	br	81125f44 <__reset+0xfb105f44>
81125fd0:	0009883a 	mov	r4,zero
81125fd4:	003ff706 	br	81125fb4 <__reset+0xfb105fb4>

81125fd8 <__divdf3>:
81125fd8:	defff204 	addi	sp,sp,-56
81125fdc:	de00012e 	bgeu	sp,et,81125fe4 <__divdf3+0xc>
81125fe0:	003b68fa 	trap	3
81125fe4:	dd400915 	stw	r21,36(sp)
81125fe8:	282ad53a 	srli	r21,r5,20
81125fec:	dd000815 	stw	r20,32(sp)
81125ff0:	2828d7fa 	srli	r20,r5,31
81125ff4:	dc000415 	stw	r16,16(sp)
81125ff8:	04000434 	movhi	r16,16
81125ffc:	df000c15 	stw	fp,48(sp)
81126000:	843fffc4 	addi	r16,r16,-1
81126004:	dfc00d15 	stw	ra,52(sp)
81126008:	ddc00b15 	stw	r23,44(sp)
8112600c:	dd800a15 	stw	r22,40(sp)
81126010:	dcc00715 	stw	r19,28(sp)
81126014:	dc800615 	stw	r18,24(sp)
81126018:	dc400515 	stw	r17,20(sp)
8112601c:	ad41ffcc 	andi	r21,r21,2047
81126020:	2c20703a 	and	r16,r5,r16
81126024:	a7003fcc 	andi	fp,r20,255
81126028:	a8006126 	beq	r21,zero,811261b0 <__divdf3+0x1d8>
8112602c:	0081ffc4 	movi	r2,2047
81126030:	2025883a 	mov	r18,r4
81126034:	a8803726 	beq	r21,r2,81126114 <__divdf3+0x13c>
81126038:	80800434 	orhi	r2,r16,16
8112603c:	100490fa 	slli	r2,r2,3
81126040:	2020d77a 	srli	r16,r4,29
81126044:	202490fa 	slli	r18,r4,3
81126048:	ad7f0044 	addi	r21,r21,-1023
8112604c:	80a0b03a 	or	r16,r16,r2
81126050:	0027883a 	mov	r19,zero
81126054:	0013883a 	mov	r9,zero
81126058:	3804d53a 	srli	r2,r7,20
8112605c:	382cd7fa 	srli	r22,r7,31
81126060:	04400434 	movhi	r17,16
81126064:	8c7fffc4 	addi	r17,r17,-1
81126068:	1081ffcc 	andi	r2,r2,2047
8112606c:	3011883a 	mov	r8,r6
81126070:	3c62703a 	and	r17,r7,r17
81126074:	b5c03fcc 	andi	r23,r22,255
81126078:	10006c26 	beq	r2,zero,8112622c <__divdf3+0x254>
8112607c:	00c1ffc4 	movi	r3,2047
81126080:	10c06426 	beq	r2,r3,81126214 <__divdf3+0x23c>
81126084:	88c00434 	orhi	r3,r17,16
81126088:	180690fa 	slli	r3,r3,3
8112608c:	3022d77a 	srli	r17,r6,29
81126090:	301090fa 	slli	r8,r6,3
81126094:	10bf0044 	addi	r2,r2,-1023
81126098:	88e2b03a 	or	r17,r17,r3
8112609c:	000f883a 	mov	r7,zero
811260a0:	a58cf03a 	xor	r6,r20,r22
811260a4:	3cc8b03a 	or	r4,r7,r19
811260a8:	a8abc83a 	sub	r21,r21,r2
811260ac:	008003c4 	movi	r2,15
811260b0:	3007883a 	mov	r3,r6
811260b4:	34c03fcc 	andi	r19,r6,255
811260b8:	11009036 	bltu	r2,r4,811262fc <__divdf3+0x324>
811260bc:	200890ba 	slli	r4,r4,2
811260c0:	00a044b4 	movhi	r2,33042
811260c4:	10983504 	addi	r2,r2,24788
811260c8:	2089883a 	add	r4,r4,r2
811260cc:	20800017 	ldw	r2,0(r4)
811260d0:	1000683a 	jmp	r2
811260d4:	811262fc 	xorhi	r4,r16,18827
811260d8:	8112614c 	andi	r4,r16,18821
811260dc:	811262ec 	andhi	r4,r16,18827
811260e0:	81126140 	call	88112614 <__reset+0x20f2614>
811260e4:	811262ec 	andhi	r4,r16,18827
811260e8:	811262c0 	call	8811262c <__reset+0x20f262c>
811260ec:	811262ec 	andhi	r4,r16,18827
811260f0:	81126140 	call	88112614 <__reset+0x20f2614>
811260f4:	8112614c 	andi	r4,r16,18821
811260f8:	8112614c 	andi	r4,r16,18821
811260fc:	811262c0 	call	8811262c <__reset+0x20f262c>
81126100:	81126140 	call	88112614 <__reset+0x20f2614>
81126104:	81126130 	cmpltui	r4,r16,18820
81126108:	81126130 	cmpltui	r4,r16,18820
8112610c:	81126130 	cmpltui	r4,r16,18820
81126110:	811265e0 	cmpeqi	r4,r16,18839
81126114:	2404b03a 	or	r2,r4,r16
81126118:	1000661e 	bne	r2,zero,811262b4 <__divdf3+0x2dc>
8112611c:	04c00204 	movi	r19,8
81126120:	0021883a 	mov	r16,zero
81126124:	0025883a 	mov	r18,zero
81126128:	02400084 	movi	r9,2
8112612c:	003fca06 	br	81126058 <__reset+0xfb106058>
81126130:	8023883a 	mov	r17,r16
81126134:	9011883a 	mov	r8,r18
81126138:	e02f883a 	mov	r23,fp
8112613c:	480f883a 	mov	r7,r9
81126140:	00800084 	movi	r2,2
81126144:	3881311e 	bne	r7,r2,8112660c <__divdf3+0x634>
81126148:	b827883a 	mov	r19,r23
8112614c:	98c0004c 	andi	r3,r19,1
81126150:	0081ffc4 	movi	r2,2047
81126154:	000b883a 	mov	r5,zero
81126158:	0025883a 	mov	r18,zero
8112615c:	1004953a 	slli	r2,r2,20
81126160:	18c03fcc 	andi	r3,r3,255
81126164:	04400434 	movhi	r17,16
81126168:	8c7fffc4 	addi	r17,r17,-1
8112616c:	180697fa 	slli	r3,r3,31
81126170:	2c4a703a 	and	r5,r5,r17
81126174:	288ab03a 	or	r5,r5,r2
81126178:	28c6b03a 	or	r3,r5,r3
8112617c:	9005883a 	mov	r2,r18
81126180:	dfc00d17 	ldw	ra,52(sp)
81126184:	df000c17 	ldw	fp,48(sp)
81126188:	ddc00b17 	ldw	r23,44(sp)
8112618c:	dd800a17 	ldw	r22,40(sp)
81126190:	dd400917 	ldw	r21,36(sp)
81126194:	dd000817 	ldw	r20,32(sp)
81126198:	dcc00717 	ldw	r19,28(sp)
8112619c:	dc800617 	ldw	r18,24(sp)
811261a0:	dc400517 	ldw	r17,20(sp)
811261a4:	dc000417 	ldw	r16,16(sp)
811261a8:	dec00e04 	addi	sp,sp,56
811261ac:	f800283a 	ret
811261b0:	2404b03a 	or	r2,r4,r16
811261b4:	2027883a 	mov	r19,r4
811261b8:	10003926 	beq	r2,zero,811262a0 <__divdf3+0x2c8>
811261bc:	80012e26 	beq	r16,zero,81126678 <__divdf3+0x6a0>
811261c0:	8009883a 	mov	r4,r16
811261c4:	d9800315 	stw	r6,12(sp)
811261c8:	d9c00215 	stw	r7,8(sp)
811261cc:	1111c140 	call	81111c14 <__clzsi2>
811261d0:	d9800317 	ldw	r6,12(sp)
811261d4:	d9c00217 	ldw	r7,8(sp)
811261d8:	113ffd44 	addi	r4,r2,-11
811261dc:	00c00704 	movi	r3,28
811261e0:	19012116 	blt	r3,r4,81126668 <__divdf3+0x690>
811261e4:	00c00744 	movi	r3,29
811261e8:	147ffe04 	addi	r17,r2,-8
811261ec:	1907c83a 	sub	r3,r3,r4
811261f0:	8460983a 	sll	r16,r16,r17
811261f4:	98c6d83a 	srl	r3,r19,r3
811261f8:	9c64983a 	sll	r18,r19,r17
811261fc:	1c20b03a 	or	r16,r3,r16
81126200:	1080fcc4 	addi	r2,r2,1011
81126204:	00abc83a 	sub	r21,zero,r2
81126208:	0027883a 	mov	r19,zero
8112620c:	0013883a 	mov	r9,zero
81126210:	003f9106 	br	81126058 <__reset+0xfb106058>
81126214:	3446b03a 	or	r3,r6,r17
81126218:	18001f1e 	bne	r3,zero,81126298 <__divdf3+0x2c0>
8112621c:	0023883a 	mov	r17,zero
81126220:	0011883a 	mov	r8,zero
81126224:	01c00084 	movi	r7,2
81126228:	003f9d06 	br	811260a0 <__reset+0xfb1060a0>
8112622c:	3446b03a 	or	r3,r6,r17
81126230:	18001526 	beq	r3,zero,81126288 <__divdf3+0x2b0>
81126234:	88011b26 	beq	r17,zero,811266a4 <__divdf3+0x6cc>
81126238:	8809883a 	mov	r4,r17
8112623c:	d9800315 	stw	r6,12(sp)
81126240:	da400115 	stw	r9,4(sp)
81126244:	1111c140 	call	81111c14 <__clzsi2>
81126248:	d9800317 	ldw	r6,12(sp)
8112624c:	da400117 	ldw	r9,4(sp)
81126250:	113ffd44 	addi	r4,r2,-11
81126254:	00c00704 	movi	r3,28
81126258:	19010e16 	blt	r3,r4,81126694 <__divdf3+0x6bc>
8112625c:	00c00744 	movi	r3,29
81126260:	123ffe04 	addi	r8,r2,-8
81126264:	1907c83a 	sub	r3,r3,r4
81126268:	8a22983a 	sll	r17,r17,r8
8112626c:	30c6d83a 	srl	r3,r6,r3
81126270:	3210983a 	sll	r8,r6,r8
81126274:	1c62b03a 	or	r17,r3,r17
81126278:	1080fcc4 	addi	r2,r2,1011
8112627c:	0085c83a 	sub	r2,zero,r2
81126280:	000f883a 	mov	r7,zero
81126284:	003f8606 	br	811260a0 <__reset+0xfb1060a0>
81126288:	0023883a 	mov	r17,zero
8112628c:	0011883a 	mov	r8,zero
81126290:	01c00044 	movi	r7,1
81126294:	003f8206 	br	811260a0 <__reset+0xfb1060a0>
81126298:	01c000c4 	movi	r7,3
8112629c:	003f8006 	br	811260a0 <__reset+0xfb1060a0>
811262a0:	04c00104 	movi	r19,4
811262a4:	0021883a 	mov	r16,zero
811262a8:	0025883a 	mov	r18,zero
811262ac:	02400044 	movi	r9,1
811262b0:	003f6906 	br	81126058 <__reset+0xfb106058>
811262b4:	04c00304 	movi	r19,12
811262b8:	024000c4 	movi	r9,3
811262bc:	003f6606 	br	81126058 <__reset+0xfb106058>
811262c0:	01400434 	movhi	r5,16
811262c4:	0007883a 	mov	r3,zero
811262c8:	297fffc4 	addi	r5,r5,-1
811262cc:	04bfffc4 	movi	r18,-1
811262d0:	0081ffc4 	movi	r2,2047
811262d4:	003fa106 	br	8112615c <__reset+0xfb10615c>
811262d8:	00c00044 	movi	r3,1
811262dc:	1887c83a 	sub	r3,r3,r2
811262e0:	01000e04 	movi	r4,56
811262e4:	20c1210e 	bge	r4,r3,8112676c <__divdf3+0x794>
811262e8:	98c0004c 	andi	r3,r19,1
811262ec:	0005883a 	mov	r2,zero
811262f0:	000b883a 	mov	r5,zero
811262f4:	0025883a 	mov	r18,zero
811262f8:	003f9806 	br	8112615c <__reset+0xfb10615c>
811262fc:	8c00fd36 	bltu	r17,r16,811266f4 <__divdf3+0x71c>
81126300:	8440fb26 	beq	r16,r17,811266f0 <__divdf3+0x718>
81126304:	8007883a 	mov	r3,r16
81126308:	ad7fffc4 	addi	r21,r21,-1
8112630c:	0021883a 	mov	r16,zero
81126310:	4004d63a 	srli	r2,r8,24
81126314:	8822923a 	slli	r17,r17,8
81126318:	1809883a 	mov	r4,r3
8112631c:	402c923a 	slli	r22,r8,8
81126320:	88b8b03a 	or	fp,r17,r2
81126324:	e028d43a 	srli	r20,fp,16
81126328:	d8c00015 	stw	r3,0(sp)
8112632c:	e5ffffcc 	andi	r23,fp,65535
81126330:	a00b883a 	mov	r5,r20
81126334:	112546c0 	call	8112546c <__udivsi3>
81126338:	d8c00017 	ldw	r3,0(sp)
8112633c:	a00b883a 	mov	r5,r20
81126340:	d8800315 	stw	r2,12(sp)
81126344:	1809883a 	mov	r4,r3
81126348:	11254d00 	call	811254d0 <__umodsi3>
8112634c:	d9800317 	ldw	r6,12(sp)
81126350:	1006943a 	slli	r3,r2,16
81126354:	9004d43a 	srli	r2,r18,16
81126358:	b9a3383a 	mul	r17,r23,r6
8112635c:	10c4b03a 	or	r2,r2,r3
81126360:	1440062e 	bgeu	r2,r17,8112637c <__divdf3+0x3a4>
81126364:	1705883a 	add	r2,r2,fp
81126368:	30ffffc4 	addi	r3,r6,-1
8112636c:	1700ee36 	bltu	r2,fp,81126728 <__divdf3+0x750>
81126370:	1440ed2e 	bgeu	r2,r17,81126728 <__divdf3+0x750>
81126374:	31bfff84 	addi	r6,r6,-2
81126378:	1705883a 	add	r2,r2,fp
8112637c:	1463c83a 	sub	r17,r2,r17
81126380:	a00b883a 	mov	r5,r20
81126384:	8809883a 	mov	r4,r17
81126388:	d9800315 	stw	r6,12(sp)
8112638c:	112546c0 	call	8112546c <__udivsi3>
81126390:	a00b883a 	mov	r5,r20
81126394:	8809883a 	mov	r4,r17
81126398:	d8800215 	stw	r2,8(sp)
8112639c:	11254d00 	call	811254d0 <__umodsi3>
811263a0:	d9c00217 	ldw	r7,8(sp)
811263a4:	1004943a 	slli	r2,r2,16
811263a8:	94bfffcc 	andi	r18,r18,65535
811263ac:	b9d1383a 	mul	r8,r23,r7
811263b0:	90a4b03a 	or	r18,r18,r2
811263b4:	d9800317 	ldw	r6,12(sp)
811263b8:	9200062e 	bgeu	r18,r8,811263d4 <__divdf3+0x3fc>
811263bc:	9725883a 	add	r18,r18,fp
811263c0:	38bfffc4 	addi	r2,r7,-1
811263c4:	9700d636 	bltu	r18,fp,81126720 <__divdf3+0x748>
811263c8:	9200d52e 	bgeu	r18,r8,81126720 <__divdf3+0x748>
811263cc:	39ffff84 	addi	r7,r7,-2
811263d0:	9725883a 	add	r18,r18,fp
811263d4:	3004943a 	slli	r2,r6,16
811263d8:	b012d43a 	srli	r9,r22,16
811263dc:	b1bfffcc 	andi	r6,r22,65535
811263e0:	11e2b03a 	or	r17,r2,r7
811263e4:	8806d43a 	srli	r3,r17,16
811263e8:	893fffcc 	andi	r4,r17,65535
811263ec:	218b383a 	mul	r5,r4,r6
811263f0:	30c5383a 	mul	r2,r6,r3
811263f4:	2249383a 	mul	r4,r4,r9
811263f8:	280ed43a 	srli	r7,r5,16
811263fc:	9225c83a 	sub	r18,r18,r8
81126400:	2089883a 	add	r4,r4,r2
81126404:	3909883a 	add	r4,r7,r4
81126408:	1a47383a 	mul	r3,r3,r9
8112640c:	2080022e 	bgeu	r4,r2,81126418 <__divdf3+0x440>
81126410:	00800074 	movhi	r2,1
81126414:	1887883a 	add	r3,r3,r2
81126418:	2004d43a 	srli	r2,r4,16
8112641c:	2008943a 	slli	r4,r4,16
81126420:	297fffcc 	andi	r5,r5,65535
81126424:	10c7883a 	add	r3,r2,r3
81126428:	2149883a 	add	r4,r4,r5
8112642c:	90c0a536 	bltu	r18,r3,811266c4 <__divdf3+0x6ec>
81126430:	90c0bf26 	beq	r18,r3,81126730 <__divdf3+0x758>
81126434:	90c7c83a 	sub	r3,r18,r3
81126438:	810fc83a 	sub	r7,r16,r4
8112643c:	81e5803a 	cmpltu	r18,r16,r7
81126440:	1ca5c83a 	sub	r18,r3,r18
81126444:	e480c126 	beq	fp,r18,8112674c <__divdf3+0x774>
81126448:	a00b883a 	mov	r5,r20
8112644c:	9009883a 	mov	r4,r18
81126450:	d9800315 	stw	r6,12(sp)
81126454:	d9c00215 	stw	r7,8(sp)
81126458:	da400115 	stw	r9,4(sp)
8112645c:	112546c0 	call	8112546c <__udivsi3>
81126460:	a00b883a 	mov	r5,r20
81126464:	9009883a 	mov	r4,r18
81126468:	d8800015 	stw	r2,0(sp)
8112646c:	11254d00 	call	811254d0 <__umodsi3>
81126470:	d9c00217 	ldw	r7,8(sp)
81126474:	da000017 	ldw	r8,0(sp)
81126478:	1006943a 	slli	r3,r2,16
8112647c:	3804d43a 	srli	r2,r7,16
81126480:	ba21383a 	mul	r16,r23,r8
81126484:	d9800317 	ldw	r6,12(sp)
81126488:	10c4b03a 	or	r2,r2,r3
8112648c:	da400117 	ldw	r9,4(sp)
81126490:	1400062e 	bgeu	r2,r16,811264ac <__divdf3+0x4d4>
81126494:	1705883a 	add	r2,r2,fp
81126498:	40ffffc4 	addi	r3,r8,-1
8112649c:	1700ad36 	bltu	r2,fp,81126754 <__divdf3+0x77c>
811264a0:	1400ac2e 	bgeu	r2,r16,81126754 <__divdf3+0x77c>
811264a4:	423fff84 	addi	r8,r8,-2
811264a8:	1705883a 	add	r2,r2,fp
811264ac:	1421c83a 	sub	r16,r2,r16
811264b0:	a00b883a 	mov	r5,r20
811264b4:	8009883a 	mov	r4,r16
811264b8:	d9800315 	stw	r6,12(sp)
811264bc:	d9c00215 	stw	r7,8(sp)
811264c0:	da000015 	stw	r8,0(sp)
811264c4:	da400115 	stw	r9,4(sp)
811264c8:	112546c0 	call	8112546c <__udivsi3>
811264cc:	8009883a 	mov	r4,r16
811264d0:	a00b883a 	mov	r5,r20
811264d4:	1025883a 	mov	r18,r2
811264d8:	11254d00 	call	811254d0 <__umodsi3>
811264dc:	d9c00217 	ldw	r7,8(sp)
811264e0:	1004943a 	slli	r2,r2,16
811264e4:	bcaf383a 	mul	r23,r23,r18
811264e8:	393fffcc 	andi	r4,r7,65535
811264ec:	2088b03a 	or	r4,r4,r2
811264f0:	d9800317 	ldw	r6,12(sp)
811264f4:	da000017 	ldw	r8,0(sp)
811264f8:	da400117 	ldw	r9,4(sp)
811264fc:	25c0062e 	bgeu	r4,r23,81126518 <__divdf3+0x540>
81126500:	2709883a 	add	r4,r4,fp
81126504:	90bfffc4 	addi	r2,r18,-1
81126508:	27009436 	bltu	r4,fp,8112675c <__divdf3+0x784>
8112650c:	25c0932e 	bgeu	r4,r23,8112675c <__divdf3+0x784>
81126510:	94bfff84 	addi	r18,r18,-2
81126514:	2709883a 	add	r4,r4,fp
81126518:	4004943a 	slli	r2,r8,16
8112651c:	25efc83a 	sub	r23,r4,r23
81126520:	1490b03a 	or	r8,r2,r18
81126524:	4008d43a 	srli	r4,r8,16
81126528:	40ffffcc 	andi	r3,r8,65535
8112652c:	30c5383a 	mul	r2,r6,r3
81126530:	1a47383a 	mul	r3,r3,r9
81126534:	310d383a 	mul	r6,r6,r4
81126538:	100ad43a 	srli	r5,r2,16
8112653c:	4913383a 	mul	r9,r9,r4
81126540:	1987883a 	add	r3,r3,r6
81126544:	28c7883a 	add	r3,r5,r3
81126548:	1980022e 	bgeu	r3,r6,81126554 <__divdf3+0x57c>
8112654c:	01000074 	movhi	r4,1
81126550:	4913883a 	add	r9,r9,r4
81126554:	1808d43a 	srli	r4,r3,16
81126558:	1806943a 	slli	r3,r3,16
8112655c:	10bfffcc 	andi	r2,r2,65535
81126560:	2253883a 	add	r9,r4,r9
81126564:	1887883a 	add	r3,r3,r2
81126568:	ba403836 	bltu	r23,r9,8112664c <__divdf3+0x674>
8112656c:	ba403626 	beq	r23,r9,81126648 <__divdf3+0x670>
81126570:	42000054 	ori	r8,r8,1
81126574:	a880ffc4 	addi	r2,r21,1023
81126578:	00bf570e 	bge	zero,r2,811262d8 <__reset+0xfb1062d8>
8112657c:	40c001cc 	andi	r3,r8,7
81126580:	18000726 	beq	r3,zero,811265a0 <__divdf3+0x5c8>
81126584:	40c003cc 	andi	r3,r8,15
81126588:	01000104 	movi	r4,4
8112658c:	19000426 	beq	r3,r4,811265a0 <__divdf3+0x5c8>
81126590:	4107883a 	add	r3,r8,r4
81126594:	1a11803a 	cmpltu	r8,r3,r8
81126598:	8a23883a 	add	r17,r17,r8
8112659c:	1811883a 	mov	r8,r3
811265a0:	88c0402c 	andhi	r3,r17,256
811265a4:	18000426 	beq	r3,zero,811265b8 <__divdf3+0x5e0>
811265a8:	00ffc034 	movhi	r3,65280
811265ac:	18ffffc4 	addi	r3,r3,-1
811265b0:	a8810004 	addi	r2,r21,1024
811265b4:	88e2703a 	and	r17,r17,r3
811265b8:	00c1ff84 	movi	r3,2046
811265bc:	18bee316 	blt	r3,r2,8112614c <__reset+0xfb10614c>
811265c0:	8824977a 	slli	r18,r17,29
811265c4:	4010d0fa 	srli	r8,r8,3
811265c8:	8822927a 	slli	r17,r17,9
811265cc:	1081ffcc 	andi	r2,r2,2047
811265d0:	9224b03a 	or	r18,r18,r8
811265d4:	880ad33a 	srli	r5,r17,12
811265d8:	98c0004c 	andi	r3,r19,1
811265dc:	003edf06 	br	8112615c <__reset+0xfb10615c>
811265e0:	8080022c 	andhi	r2,r16,8
811265e4:	10001226 	beq	r2,zero,81126630 <__divdf3+0x658>
811265e8:	8880022c 	andhi	r2,r17,8
811265ec:	1000101e 	bne	r2,zero,81126630 <__divdf3+0x658>
811265f0:	00800434 	movhi	r2,16
811265f4:	89400234 	orhi	r5,r17,8
811265f8:	10bfffc4 	addi	r2,r2,-1
811265fc:	b007883a 	mov	r3,r22
81126600:	288a703a 	and	r5,r5,r2
81126604:	4025883a 	mov	r18,r8
81126608:	003f3106 	br	811262d0 <__reset+0xfb1062d0>
8112660c:	008000c4 	movi	r2,3
81126610:	3880a626 	beq	r7,r2,811268ac <__divdf3+0x8d4>
81126614:	00800044 	movi	r2,1
81126618:	3880521e 	bne	r7,r2,81126764 <__divdf3+0x78c>
8112661c:	b807883a 	mov	r3,r23
81126620:	0005883a 	mov	r2,zero
81126624:	000b883a 	mov	r5,zero
81126628:	0025883a 	mov	r18,zero
8112662c:	003ecb06 	br	8112615c <__reset+0xfb10615c>
81126630:	00800434 	movhi	r2,16
81126634:	81400234 	orhi	r5,r16,8
81126638:	10bfffc4 	addi	r2,r2,-1
8112663c:	a007883a 	mov	r3,r20
81126640:	288a703a 	and	r5,r5,r2
81126644:	003f2206 	br	811262d0 <__reset+0xfb1062d0>
81126648:	183fca26 	beq	r3,zero,81126574 <__reset+0xfb106574>
8112664c:	e5ef883a 	add	r23,fp,r23
81126650:	40bfffc4 	addi	r2,r8,-1
81126654:	bf00392e 	bgeu	r23,fp,8112673c <__divdf3+0x764>
81126658:	1011883a 	mov	r8,r2
8112665c:	ba7fc41e 	bne	r23,r9,81126570 <__reset+0xfb106570>
81126660:	b0ffc31e 	bne	r22,r3,81126570 <__reset+0xfb106570>
81126664:	003fc306 	br	81126574 <__reset+0xfb106574>
81126668:	143ff604 	addi	r16,r2,-40
8112666c:	9c20983a 	sll	r16,r19,r16
81126670:	0025883a 	mov	r18,zero
81126674:	003ee206 	br	81126200 <__reset+0xfb106200>
81126678:	d9800315 	stw	r6,12(sp)
8112667c:	d9c00215 	stw	r7,8(sp)
81126680:	1111c140 	call	81111c14 <__clzsi2>
81126684:	10800804 	addi	r2,r2,32
81126688:	d9c00217 	ldw	r7,8(sp)
8112668c:	d9800317 	ldw	r6,12(sp)
81126690:	003ed106 	br	811261d8 <__reset+0xfb1061d8>
81126694:	147ff604 	addi	r17,r2,-40
81126698:	3462983a 	sll	r17,r6,r17
8112669c:	0011883a 	mov	r8,zero
811266a0:	003ef506 	br	81126278 <__reset+0xfb106278>
811266a4:	3009883a 	mov	r4,r6
811266a8:	d9800315 	stw	r6,12(sp)
811266ac:	da400115 	stw	r9,4(sp)
811266b0:	1111c140 	call	81111c14 <__clzsi2>
811266b4:	10800804 	addi	r2,r2,32
811266b8:	da400117 	ldw	r9,4(sp)
811266bc:	d9800317 	ldw	r6,12(sp)
811266c0:	003ee306 	br	81126250 <__reset+0xfb106250>
811266c4:	85a1883a 	add	r16,r16,r22
811266c8:	8585803a 	cmpltu	r2,r16,r22
811266cc:	1705883a 	add	r2,r2,fp
811266d0:	14a5883a 	add	r18,r2,r18
811266d4:	88bfffc4 	addi	r2,r17,-1
811266d8:	e4800c2e 	bgeu	fp,r18,8112670c <__divdf3+0x734>
811266dc:	90c03e36 	bltu	r18,r3,811267d8 <__divdf3+0x800>
811266e0:	1c806926 	beq	r3,r18,81126888 <__divdf3+0x8b0>
811266e4:	90c7c83a 	sub	r3,r18,r3
811266e8:	1023883a 	mov	r17,r2
811266ec:	003f5206 	br	81126438 <__reset+0xfb106438>
811266f0:	923f0436 	bltu	r18,r8,81126304 <__reset+0xfb106304>
811266f4:	800897fa 	slli	r4,r16,31
811266f8:	9004d07a 	srli	r2,r18,1
811266fc:	8006d07a 	srli	r3,r16,1
81126700:	902097fa 	slli	r16,r18,31
81126704:	20a4b03a 	or	r18,r4,r2
81126708:	003f0106 	br	81126310 <__reset+0xfb106310>
8112670c:	e4bff51e 	bne	fp,r18,811266e4 <__reset+0xfb1066e4>
81126710:	85bff22e 	bgeu	r16,r22,811266dc <__reset+0xfb1066dc>
81126714:	e0c7c83a 	sub	r3,fp,r3
81126718:	1023883a 	mov	r17,r2
8112671c:	003f4606 	br	81126438 <__reset+0xfb106438>
81126720:	100f883a 	mov	r7,r2
81126724:	003f2b06 	br	811263d4 <__reset+0xfb1063d4>
81126728:	180d883a 	mov	r6,r3
8112672c:	003f1306 	br	8112637c <__reset+0xfb10637c>
81126730:	813fe436 	bltu	r16,r4,811266c4 <__reset+0xfb1066c4>
81126734:	0007883a 	mov	r3,zero
81126738:	003f3f06 	br	81126438 <__reset+0xfb106438>
8112673c:	ba402c36 	bltu	r23,r9,811267f0 <__divdf3+0x818>
81126740:	4dc05426 	beq	r9,r23,81126894 <__divdf3+0x8bc>
81126744:	1011883a 	mov	r8,r2
81126748:	003f8906 	br	81126570 <__reset+0xfb106570>
8112674c:	023fffc4 	movi	r8,-1
81126750:	003f8806 	br	81126574 <__reset+0xfb106574>
81126754:	1811883a 	mov	r8,r3
81126758:	003f5406 	br	811264ac <__reset+0xfb1064ac>
8112675c:	1025883a 	mov	r18,r2
81126760:	003f6d06 	br	81126518 <__reset+0xfb106518>
81126764:	b827883a 	mov	r19,r23
81126768:	003f8206 	br	81126574 <__reset+0xfb106574>
8112676c:	010007c4 	movi	r4,31
81126770:	20c02616 	blt	r4,r3,8112680c <__divdf3+0x834>
81126774:	00800804 	movi	r2,32
81126778:	10c5c83a 	sub	r2,r2,r3
8112677c:	888a983a 	sll	r5,r17,r2
81126780:	40c8d83a 	srl	r4,r8,r3
81126784:	4084983a 	sll	r2,r8,r2
81126788:	88e2d83a 	srl	r17,r17,r3
8112678c:	2906b03a 	or	r3,r5,r4
81126790:	1004c03a 	cmpne	r2,r2,zero
81126794:	1886b03a 	or	r3,r3,r2
81126798:	188001cc 	andi	r2,r3,7
8112679c:	10000726 	beq	r2,zero,811267bc <__divdf3+0x7e4>
811267a0:	188003cc 	andi	r2,r3,15
811267a4:	01000104 	movi	r4,4
811267a8:	11000426 	beq	r2,r4,811267bc <__divdf3+0x7e4>
811267ac:	1805883a 	mov	r2,r3
811267b0:	10c00104 	addi	r3,r2,4
811267b4:	1885803a 	cmpltu	r2,r3,r2
811267b8:	88a3883a 	add	r17,r17,r2
811267bc:	8880202c 	andhi	r2,r17,128
811267c0:	10002726 	beq	r2,zero,81126860 <__divdf3+0x888>
811267c4:	98c0004c 	andi	r3,r19,1
811267c8:	00800044 	movi	r2,1
811267cc:	000b883a 	mov	r5,zero
811267d0:	0025883a 	mov	r18,zero
811267d4:	003e6106 	br	8112615c <__reset+0xfb10615c>
811267d8:	85a1883a 	add	r16,r16,r22
811267dc:	8585803a 	cmpltu	r2,r16,r22
811267e0:	1705883a 	add	r2,r2,fp
811267e4:	14a5883a 	add	r18,r2,r18
811267e8:	8c7fff84 	addi	r17,r17,-2
811267ec:	003f1106 	br	81126434 <__reset+0xfb106434>
811267f0:	b589883a 	add	r4,r22,r22
811267f4:	25ad803a 	cmpltu	r22,r4,r22
811267f8:	b739883a 	add	fp,r22,fp
811267fc:	40bfff84 	addi	r2,r8,-2
81126800:	bf2f883a 	add	r23,r23,fp
81126804:	202d883a 	mov	r22,r4
81126808:	003f9306 	br	81126658 <__reset+0xfb106658>
8112680c:	013ff844 	movi	r4,-31
81126810:	2085c83a 	sub	r2,r4,r2
81126814:	8888d83a 	srl	r4,r17,r2
81126818:	00800804 	movi	r2,32
8112681c:	18802126 	beq	r3,r2,811268a4 <__divdf3+0x8cc>
81126820:	00801004 	movi	r2,64
81126824:	10c5c83a 	sub	r2,r2,r3
81126828:	8884983a 	sll	r2,r17,r2
8112682c:	1204b03a 	or	r2,r2,r8
81126830:	1004c03a 	cmpne	r2,r2,zero
81126834:	2084b03a 	or	r2,r4,r2
81126838:	144001cc 	andi	r17,r2,7
8112683c:	88000d1e 	bne	r17,zero,81126874 <__divdf3+0x89c>
81126840:	000b883a 	mov	r5,zero
81126844:	1024d0fa 	srli	r18,r2,3
81126848:	98c0004c 	andi	r3,r19,1
8112684c:	0005883a 	mov	r2,zero
81126850:	9464b03a 	or	r18,r18,r17
81126854:	003e4106 	br	8112615c <__reset+0xfb10615c>
81126858:	1007883a 	mov	r3,r2
8112685c:	0023883a 	mov	r17,zero
81126860:	880a927a 	slli	r5,r17,9
81126864:	1805883a 	mov	r2,r3
81126868:	8822977a 	slli	r17,r17,29
8112686c:	280ad33a 	srli	r5,r5,12
81126870:	003ff406 	br	81126844 <__reset+0xfb106844>
81126874:	10c003cc 	andi	r3,r2,15
81126878:	01000104 	movi	r4,4
8112687c:	193ff626 	beq	r3,r4,81126858 <__reset+0xfb106858>
81126880:	0023883a 	mov	r17,zero
81126884:	003fca06 	br	811267b0 <__reset+0xfb1067b0>
81126888:	813fd336 	bltu	r16,r4,811267d8 <__reset+0xfb1067d8>
8112688c:	1023883a 	mov	r17,r2
81126890:	003fa806 	br	81126734 <__reset+0xfb106734>
81126894:	b0ffd636 	bltu	r22,r3,811267f0 <__reset+0xfb1067f0>
81126898:	1011883a 	mov	r8,r2
8112689c:	b0ff341e 	bne	r22,r3,81126570 <__reset+0xfb106570>
811268a0:	003f3406 	br	81126574 <__reset+0xfb106574>
811268a4:	0005883a 	mov	r2,zero
811268a8:	003fe006 	br	8112682c <__reset+0xfb10682c>
811268ac:	00800434 	movhi	r2,16
811268b0:	89400234 	orhi	r5,r17,8
811268b4:	10bfffc4 	addi	r2,r2,-1
811268b8:	b807883a 	mov	r3,r23
811268bc:	288a703a 	and	r5,r5,r2
811268c0:	4025883a 	mov	r18,r8
811268c4:	003e8206 	br	811262d0 <__reset+0xfb1062d0>

811268c8 <__eqdf2>:
811268c8:	2804d53a 	srli	r2,r5,20
811268cc:	3806d53a 	srli	r3,r7,20
811268d0:	02000434 	movhi	r8,16
811268d4:	423fffc4 	addi	r8,r8,-1
811268d8:	1081ffcc 	andi	r2,r2,2047
811268dc:	0281ffc4 	movi	r10,2047
811268e0:	2a12703a 	and	r9,r5,r8
811268e4:	18c1ffcc 	andi	r3,r3,2047
811268e8:	3a10703a 	and	r8,r7,r8
811268ec:	280ad7fa 	srli	r5,r5,31
811268f0:	380ed7fa 	srli	r7,r7,31
811268f4:	12801026 	beq	r2,r10,81126938 <__eqdf2+0x70>
811268f8:	0281ffc4 	movi	r10,2047
811268fc:	1a800a26 	beq	r3,r10,81126928 <__eqdf2+0x60>
81126900:	10c00226 	beq	r2,r3,8112690c <__eqdf2+0x44>
81126904:	00800044 	movi	r2,1
81126908:	f800283a 	ret
8112690c:	4a3ffd1e 	bne	r9,r8,81126904 <__reset+0xfb106904>
81126910:	21bffc1e 	bne	r4,r6,81126904 <__reset+0xfb106904>
81126914:	29c00c26 	beq	r5,r7,81126948 <__eqdf2+0x80>
81126918:	103ffa1e 	bne	r2,zero,81126904 <__reset+0xfb106904>
8112691c:	2244b03a 	or	r2,r4,r9
81126920:	1004c03a 	cmpne	r2,r2,zero
81126924:	f800283a 	ret
81126928:	3214b03a 	or	r10,r6,r8
8112692c:	503ff426 	beq	r10,zero,81126900 <__reset+0xfb106900>
81126930:	00800044 	movi	r2,1
81126934:	f800283a 	ret
81126938:	2254b03a 	or	r10,r4,r9
8112693c:	503fee26 	beq	r10,zero,811268f8 <__reset+0xfb1068f8>
81126940:	00800044 	movi	r2,1
81126944:	f800283a 	ret
81126948:	0005883a 	mov	r2,zero
8112694c:	f800283a 	ret

81126950 <__gedf2>:
81126950:	2804d53a 	srli	r2,r5,20
81126954:	3806d53a 	srli	r3,r7,20
81126958:	02000434 	movhi	r8,16
8112695c:	423fffc4 	addi	r8,r8,-1
81126960:	1081ffcc 	andi	r2,r2,2047
81126964:	0241ffc4 	movi	r9,2047
81126968:	2a14703a 	and	r10,r5,r8
8112696c:	18c1ffcc 	andi	r3,r3,2047
81126970:	3a10703a 	and	r8,r7,r8
81126974:	280ad7fa 	srli	r5,r5,31
81126978:	380ed7fa 	srli	r7,r7,31
8112697c:	12401d26 	beq	r2,r9,811269f4 <__gedf2+0xa4>
81126980:	0241ffc4 	movi	r9,2047
81126984:	1a401226 	beq	r3,r9,811269d0 <__gedf2+0x80>
81126988:	1000081e 	bne	r2,zero,811269ac <__gedf2+0x5c>
8112698c:	2296b03a 	or	r11,r4,r10
81126990:	5813003a 	cmpeq	r9,r11,zero
81126994:	1800091e 	bne	r3,zero,811269bc <__gedf2+0x6c>
81126998:	3218b03a 	or	r12,r6,r8
8112699c:	6000071e 	bne	r12,zero,811269bc <__gedf2+0x6c>
811269a0:	0005883a 	mov	r2,zero
811269a4:	5800101e 	bne	r11,zero,811269e8 <__gedf2+0x98>
811269a8:	f800283a 	ret
811269ac:	18000c1e 	bne	r3,zero,811269e0 <__gedf2+0x90>
811269b0:	3212b03a 	or	r9,r6,r8
811269b4:	48000c26 	beq	r9,zero,811269e8 <__gedf2+0x98>
811269b8:	0013883a 	mov	r9,zero
811269bc:	39c03fcc 	andi	r7,r7,255
811269c0:	48000826 	beq	r9,zero,811269e4 <__gedf2+0x94>
811269c4:	38000926 	beq	r7,zero,811269ec <__gedf2+0x9c>
811269c8:	00800044 	movi	r2,1
811269cc:	f800283a 	ret
811269d0:	3212b03a 	or	r9,r6,r8
811269d4:	483fec26 	beq	r9,zero,81126988 <__reset+0xfb106988>
811269d8:	00bfff84 	movi	r2,-2
811269dc:	f800283a 	ret
811269e0:	39c03fcc 	andi	r7,r7,255
811269e4:	29c00626 	beq	r5,r7,81126a00 <__gedf2+0xb0>
811269e8:	283ff726 	beq	r5,zero,811269c8 <__reset+0xfb1069c8>
811269ec:	00bfffc4 	movi	r2,-1
811269f0:	f800283a 	ret
811269f4:	2292b03a 	or	r9,r4,r10
811269f8:	483fe126 	beq	r9,zero,81126980 <__reset+0xfb106980>
811269fc:	003ff606 	br	811269d8 <__reset+0xfb1069d8>
81126a00:	18bff916 	blt	r3,r2,811269e8 <__reset+0xfb1069e8>
81126a04:	10c00316 	blt	r2,r3,81126a14 <__gedf2+0xc4>
81126a08:	42bff736 	bltu	r8,r10,811269e8 <__reset+0xfb1069e8>
81126a0c:	52000326 	beq	r10,r8,81126a1c <__gedf2+0xcc>
81126a10:	5200042e 	bgeu	r10,r8,81126a24 <__gedf2+0xd4>
81126a14:	283fec1e 	bne	r5,zero,811269c8 <__reset+0xfb1069c8>
81126a18:	003ff406 	br	811269ec <__reset+0xfb1069ec>
81126a1c:	313ff236 	bltu	r6,r4,811269e8 <__reset+0xfb1069e8>
81126a20:	21bffc36 	bltu	r4,r6,81126a14 <__reset+0xfb106a14>
81126a24:	0005883a 	mov	r2,zero
81126a28:	f800283a 	ret

81126a2c <__ledf2>:
81126a2c:	2804d53a 	srli	r2,r5,20
81126a30:	3810d53a 	srli	r8,r7,20
81126a34:	00c00434 	movhi	r3,16
81126a38:	18ffffc4 	addi	r3,r3,-1
81126a3c:	1081ffcc 	andi	r2,r2,2047
81126a40:	0241ffc4 	movi	r9,2047
81126a44:	28d4703a 	and	r10,r5,r3
81126a48:	4201ffcc 	andi	r8,r8,2047
81126a4c:	38c6703a 	and	r3,r7,r3
81126a50:	280ad7fa 	srli	r5,r5,31
81126a54:	380ed7fa 	srli	r7,r7,31
81126a58:	12401f26 	beq	r2,r9,81126ad8 <__ledf2+0xac>
81126a5c:	0241ffc4 	movi	r9,2047
81126a60:	42401426 	beq	r8,r9,81126ab4 <__ledf2+0x88>
81126a64:	1000091e 	bne	r2,zero,81126a8c <__ledf2+0x60>
81126a68:	2296b03a 	or	r11,r4,r10
81126a6c:	5813003a 	cmpeq	r9,r11,zero
81126a70:	29403fcc 	andi	r5,r5,255
81126a74:	40000a1e 	bne	r8,zero,81126aa0 <__ledf2+0x74>
81126a78:	30d8b03a 	or	r12,r6,r3
81126a7c:	6000081e 	bne	r12,zero,81126aa0 <__ledf2+0x74>
81126a80:	0005883a 	mov	r2,zero
81126a84:	5800111e 	bne	r11,zero,81126acc <__ledf2+0xa0>
81126a88:	f800283a 	ret
81126a8c:	29403fcc 	andi	r5,r5,255
81126a90:	40000c1e 	bne	r8,zero,81126ac4 <__ledf2+0x98>
81126a94:	30d2b03a 	or	r9,r6,r3
81126a98:	48000c26 	beq	r9,zero,81126acc <__ledf2+0xa0>
81126a9c:	0013883a 	mov	r9,zero
81126aa0:	39c03fcc 	andi	r7,r7,255
81126aa4:	48000826 	beq	r9,zero,81126ac8 <__ledf2+0x9c>
81126aa8:	38001126 	beq	r7,zero,81126af0 <__ledf2+0xc4>
81126aac:	00800044 	movi	r2,1
81126ab0:	f800283a 	ret
81126ab4:	30d2b03a 	or	r9,r6,r3
81126ab8:	483fea26 	beq	r9,zero,81126a64 <__reset+0xfb106a64>
81126abc:	00800084 	movi	r2,2
81126ac0:	f800283a 	ret
81126ac4:	39c03fcc 	andi	r7,r7,255
81126ac8:	39400726 	beq	r7,r5,81126ae8 <__ledf2+0xbc>
81126acc:	2800081e 	bne	r5,zero,81126af0 <__ledf2+0xc4>
81126ad0:	00800044 	movi	r2,1
81126ad4:	f800283a 	ret
81126ad8:	2292b03a 	or	r9,r4,r10
81126adc:	483fdf26 	beq	r9,zero,81126a5c <__reset+0xfb106a5c>
81126ae0:	00800084 	movi	r2,2
81126ae4:	f800283a 	ret
81126ae8:	4080030e 	bge	r8,r2,81126af8 <__ledf2+0xcc>
81126aec:	383fef26 	beq	r7,zero,81126aac <__reset+0xfb106aac>
81126af0:	00bfffc4 	movi	r2,-1
81126af4:	f800283a 	ret
81126af8:	123feb16 	blt	r2,r8,81126aa8 <__reset+0xfb106aa8>
81126afc:	1abff336 	bltu	r3,r10,81126acc <__reset+0xfb106acc>
81126b00:	50c00326 	beq	r10,r3,81126b10 <__ledf2+0xe4>
81126b04:	50c0042e 	bgeu	r10,r3,81126b18 <__ledf2+0xec>
81126b08:	283fe81e 	bne	r5,zero,81126aac <__reset+0xfb106aac>
81126b0c:	003ff806 	br	81126af0 <__reset+0xfb106af0>
81126b10:	313fee36 	bltu	r6,r4,81126acc <__reset+0xfb106acc>
81126b14:	21bffc36 	bltu	r4,r6,81126b08 <__reset+0xfb106b08>
81126b18:	0005883a 	mov	r2,zero
81126b1c:	f800283a 	ret

81126b20 <__subdf3>:
81126b20:	02000434 	movhi	r8,16
81126b24:	423fffc4 	addi	r8,r8,-1
81126b28:	defffb04 	addi	sp,sp,-20
81126b2c:	2a14703a 	and	r10,r5,r8
81126b30:	3812d53a 	srli	r9,r7,20
81126b34:	3a10703a 	and	r8,r7,r8
81126b38:	de00012e 	bgeu	sp,et,81126b40 <__subdf3+0x20>
81126b3c:	003b68fa 	trap	3
81126b40:	2006d77a 	srli	r3,r4,29
81126b44:	3004d77a 	srli	r2,r6,29
81126b48:	dc000015 	stw	r16,0(sp)
81126b4c:	501490fa 	slli	r10,r10,3
81126b50:	2820d53a 	srli	r16,r5,20
81126b54:	401090fa 	slli	r8,r8,3
81126b58:	dc800215 	stw	r18,8(sp)
81126b5c:	dc400115 	stw	r17,4(sp)
81126b60:	dfc00415 	stw	ra,16(sp)
81126b64:	202290fa 	slli	r17,r4,3
81126b68:	dcc00315 	stw	r19,12(sp)
81126b6c:	4a41ffcc 	andi	r9,r9,2047
81126b70:	0101ffc4 	movi	r4,2047
81126b74:	2824d7fa 	srli	r18,r5,31
81126b78:	8401ffcc 	andi	r16,r16,2047
81126b7c:	50c6b03a 	or	r3,r10,r3
81126b80:	380ed7fa 	srli	r7,r7,31
81126b84:	408ab03a 	or	r5,r8,r2
81126b88:	300c90fa 	slli	r6,r6,3
81126b8c:	49009626 	beq	r9,r4,81126de8 <__subdf3+0x2c8>
81126b90:	39c0005c 	xori	r7,r7,1
81126b94:	8245c83a 	sub	r2,r16,r9
81126b98:	3c807426 	beq	r7,r18,81126d6c <__subdf3+0x24c>
81126b9c:	0080af0e 	bge	zero,r2,81126e5c <__subdf3+0x33c>
81126ba0:	48002a1e 	bne	r9,zero,81126c4c <__subdf3+0x12c>
81126ba4:	2988b03a 	or	r4,r5,r6
81126ba8:	20009a1e 	bne	r4,zero,81126e14 <__subdf3+0x2f4>
81126bac:	888001cc 	andi	r2,r17,7
81126bb0:	10000726 	beq	r2,zero,81126bd0 <__subdf3+0xb0>
81126bb4:	888003cc 	andi	r2,r17,15
81126bb8:	01000104 	movi	r4,4
81126bbc:	11000426 	beq	r2,r4,81126bd0 <__subdf3+0xb0>
81126bc0:	890b883a 	add	r5,r17,r4
81126bc4:	2c63803a 	cmpltu	r17,r5,r17
81126bc8:	1c47883a 	add	r3,r3,r17
81126bcc:	2823883a 	mov	r17,r5
81126bd0:	1880202c 	andhi	r2,r3,128
81126bd4:	10005926 	beq	r2,zero,81126d3c <__subdf3+0x21c>
81126bd8:	84000044 	addi	r16,r16,1
81126bdc:	0081ffc4 	movi	r2,2047
81126be0:	8080be26 	beq	r16,r2,81126edc <__subdf3+0x3bc>
81126be4:	017fe034 	movhi	r5,65408
81126be8:	297fffc4 	addi	r5,r5,-1
81126bec:	1946703a 	and	r3,r3,r5
81126bf0:	1804977a 	slli	r2,r3,29
81126bf4:	1806927a 	slli	r3,r3,9
81126bf8:	8822d0fa 	srli	r17,r17,3
81126bfc:	8401ffcc 	andi	r16,r16,2047
81126c00:	180ad33a 	srli	r5,r3,12
81126c04:	9100004c 	andi	r4,r18,1
81126c08:	1444b03a 	or	r2,r2,r17
81126c0c:	80c1ffcc 	andi	r3,r16,2047
81126c10:	1820953a 	slli	r16,r3,20
81126c14:	20c03fcc 	andi	r3,r4,255
81126c18:	180897fa 	slli	r4,r3,31
81126c1c:	00c00434 	movhi	r3,16
81126c20:	18ffffc4 	addi	r3,r3,-1
81126c24:	28c6703a 	and	r3,r5,r3
81126c28:	1c06b03a 	or	r3,r3,r16
81126c2c:	1906b03a 	or	r3,r3,r4
81126c30:	dfc00417 	ldw	ra,16(sp)
81126c34:	dcc00317 	ldw	r19,12(sp)
81126c38:	dc800217 	ldw	r18,8(sp)
81126c3c:	dc400117 	ldw	r17,4(sp)
81126c40:	dc000017 	ldw	r16,0(sp)
81126c44:	dec00504 	addi	sp,sp,20
81126c48:	f800283a 	ret
81126c4c:	0101ffc4 	movi	r4,2047
81126c50:	813fd626 	beq	r16,r4,81126bac <__reset+0xfb106bac>
81126c54:	29402034 	orhi	r5,r5,128
81126c58:	01000e04 	movi	r4,56
81126c5c:	2080a316 	blt	r4,r2,81126eec <__subdf3+0x3cc>
81126c60:	010007c4 	movi	r4,31
81126c64:	2080c616 	blt	r4,r2,81126f80 <__subdf3+0x460>
81126c68:	01000804 	movi	r4,32
81126c6c:	2089c83a 	sub	r4,r4,r2
81126c70:	2910983a 	sll	r8,r5,r4
81126c74:	308ed83a 	srl	r7,r6,r2
81126c78:	3108983a 	sll	r4,r6,r4
81126c7c:	2884d83a 	srl	r2,r5,r2
81126c80:	41ccb03a 	or	r6,r8,r7
81126c84:	2008c03a 	cmpne	r4,r4,zero
81126c88:	310cb03a 	or	r6,r6,r4
81126c8c:	898dc83a 	sub	r6,r17,r6
81126c90:	89a3803a 	cmpltu	r17,r17,r6
81126c94:	1887c83a 	sub	r3,r3,r2
81126c98:	1c47c83a 	sub	r3,r3,r17
81126c9c:	3023883a 	mov	r17,r6
81126ca0:	1880202c 	andhi	r2,r3,128
81126ca4:	10002326 	beq	r2,zero,81126d34 <__subdf3+0x214>
81126ca8:	04c02034 	movhi	r19,128
81126cac:	9cffffc4 	addi	r19,r19,-1
81126cb0:	1ce6703a 	and	r19,r3,r19
81126cb4:	98007a26 	beq	r19,zero,81126ea0 <__subdf3+0x380>
81126cb8:	9809883a 	mov	r4,r19
81126cbc:	1111c140 	call	81111c14 <__clzsi2>
81126cc0:	113ffe04 	addi	r4,r2,-8
81126cc4:	00c007c4 	movi	r3,31
81126cc8:	19007b16 	blt	r3,r4,81126eb8 <__subdf3+0x398>
81126ccc:	00800804 	movi	r2,32
81126cd0:	1105c83a 	sub	r2,r2,r4
81126cd4:	8884d83a 	srl	r2,r17,r2
81126cd8:	9906983a 	sll	r3,r19,r4
81126cdc:	8922983a 	sll	r17,r17,r4
81126ce0:	10c4b03a 	or	r2,r2,r3
81126ce4:	24007816 	blt	r4,r16,81126ec8 <__subdf3+0x3a8>
81126ce8:	2421c83a 	sub	r16,r4,r16
81126cec:	80c00044 	addi	r3,r16,1
81126cf0:	010007c4 	movi	r4,31
81126cf4:	20c09516 	blt	r4,r3,81126f4c <__subdf3+0x42c>
81126cf8:	01400804 	movi	r5,32
81126cfc:	28cbc83a 	sub	r5,r5,r3
81126d00:	88c8d83a 	srl	r4,r17,r3
81126d04:	8962983a 	sll	r17,r17,r5
81126d08:	114a983a 	sll	r5,r2,r5
81126d0c:	10c6d83a 	srl	r3,r2,r3
81126d10:	8804c03a 	cmpne	r2,r17,zero
81126d14:	290ab03a 	or	r5,r5,r4
81126d18:	28a2b03a 	or	r17,r5,r2
81126d1c:	0021883a 	mov	r16,zero
81126d20:	003fa206 	br	81126bac <__reset+0xfb106bac>
81126d24:	2090b03a 	or	r8,r4,r2
81126d28:	40018e26 	beq	r8,zero,81127364 <__subdf3+0x844>
81126d2c:	1007883a 	mov	r3,r2
81126d30:	2023883a 	mov	r17,r4
81126d34:	888001cc 	andi	r2,r17,7
81126d38:	103f9e1e 	bne	r2,zero,81126bb4 <__reset+0xfb106bb4>
81126d3c:	1804977a 	slli	r2,r3,29
81126d40:	8822d0fa 	srli	r17,r17,3
81126d44:	1810d0fa 	srli	r8,r3,3
81126d48:	9100004c 	andi	r4,r18,1
81126d4c:	1444b03a 	or	r2,r2,r17
81126d50:	00c1ffc4 	movi	r3,2047
81126d54:	80c02826 	beq	r16,r3,81126df8 <__subdf3+0x2d8>
81126d58:	01400434 	movhi	r5,16
81126d5c:	297fffc4 	addi	r5,r5,-1
81126d60:	80e0703a 	and	r16,r16,r3
81126d64:	414a703a 	and	r5,r8,r5
81126d68:	003fa806 	br	81126c0c <__reset+0xfb106c0c>
81126d6c:	0080630e 	bge	zero,r2,81126efc <__subdf3+0x3dc>
81126d70:	48003026 	beq	r9,zero,81126e34 <__subdf3+0x314>
81126d74:	0101ffc4 	movi	r4,2047
81126d78:	813f8c26 	beq	r16,r4,81126bac <__reset+0xfb106bac>
81126d7c:	29402034 	orhi	r5,r5,128
81126d80:	01000e04 	movi	r4,56
81126d84:	2080a90e 	bge	r4,r2,8112702c <__subdf3+0x50c>
81126d88:	298cb03a 	or	r6,r5,r6
81126d8c:	3012c03a 	cmpne	r9,r6,zero
81126d90:	0005883a 	mov	r2,zero
81126d94:	4c53883a 	add	r9,r9,r17
81126d98:	4c63803a 	cmpltu	r17,r9,r17
81126d9c:	10c7883a 	add	r3,r2,r3
81126da0:	88c7883a 	add	r3,r17,r3
81126da4:	4823883a 	mov	r17,r9
81126da8:	1880202c 	andhi	r2,r3,128
81126dac:	1000d026 	beq	r2,zero,811270f0 <__subdf3+0x5d0>
81126db0:	84000044 	addi	r16,r16,1
81126db4:	0081ffc4 	movi	r2,2047
81126db8:	8080fe26 	beq	r16,r2,811271b4 <__subdf3+0x694>
81126dbc:	00bfe034 	movhi	r2,65408
81126dc0:	10bfffc4 	addi	r2,r2,-1
81126dc4:	1886703a 	and	r3,r3,r2
81126dc8:	880ad07a 	srli	r5,r17,1
81126dcc:	180497fa 	slli	r2,r3,31
81126dd0:	8900004c 	andi	r4,r17,1
81126dd4:	2922b03a 	or	r17,r5,r4
81126dd8:	1806d07a 	srli	r3,r3,1
81126ddc:	1462b03a 	or	r17,r2,r17
81126de0:	3825883a 	mov	r18,r7
81126de4:	003f7106 	br	81126bac <__reset+0xfb106bac>
81126de8:	2984b03a 	or	r2,r5,r6
81126dec:	103f6826 	beq	r2,zero,81126b90 <__reset+0xfb106b90>
81126df0:	39c03fcc 	andi	r7,r7,255
81126df4:	003f6706 	br	81126b94 <__reset+0xfb106b94>
81126df8:	4086b03a 	or	r3,r8,r2
81126dfc:	18015226 	beq	r3,zero,81127348 <__subdf3+0x828>
81126e00:	00c00434 	movhi	r3,16
81126e04:	41400234 	orhi	r5,r8,8
81126e08:	18ffffc4 	addi	r3,r3,-1
81126e0c:	28ca703a 	and	r5,r5,r3
81126e10:	003f7e06 	br	81126c0c <__reset+0xfb106c0c>
81126e14:	10bfffc4 	addi	r2,r2,-1
81126e18:	1000491e 	bne	r2,zero,81126f40 <__subdf3+0x420>
81126e1c:	898fc83a 	sub	r7,r17,r6
81126e20:	89e3803a 	cmpltu	r17,r17,r7
81126e24:	1947c83a 	sub	r3,r3,r5
81126e28:	1c47c83a 	sub	r3,r3,r17
81126e2c:	3823883a 	mov	r17,r7
81126e30:	003f9b06 	br	81126ca0 <__reset+0xfb106ca0>
81126e34:	2988b03a 	or	r4,r5,r6
81126e38:	203f5c26 	beq	r4,zero,81126bac <__reset+0xfb106bac>
81126e3c:	10bfffc4 	addi	r2,r2,-1
81126e40:	1000931e 	bne	r2,zero,81127090 <__subdf3+0x570>
81126e44:	898d883a 	add	r6,r17,r6
81126e48:	3463803a 	cmpltu	r17,r6,r17
81126e4c:	1947883a 	add	r3,r3,r5
81126e50:	88c7883a 	add	r3,r17,r3
81126e54:	3023883a 	mov	r17,r6
81126e58:	003fd306 	br	81126da8 <__reset+0xfb106da8>
81126e5c:	1000541e 	bne	r2,zero,81126fb0 <__subdf3+0x490>
81126e60:	80800044 	addi	r2,r16,1
81126e64:	1081ffcc 	andi	r2,r2,2047
81126e68:	01000044 	movi	r4,1
81126e6c:	2080a20e 	bge	r4,r2,811270f8 <__subdf3+0x5d8>
81126e70:	8989c83a 	sub	r4,r17,r6
81126e74:	8905803a 	cmpltu	r2,r17,r4
81126e78:	1967c83a 	sub	r19,r3,r5
81126e7c:	98a7c83a 	sub	r19,r19,r2
81126e80:	9880202c 	andhi	r2,r19,128
81126e84:	10006326 	beq	r2,zero,81127014 <__subdf3+0x4f4>
81126e88:	3463c83a 	sub	r17,r6,r17
81126e8c:	28c7c83a 	sub	r3,r5,r3
81126e90:	344d803a 	cmpltu	r6,r6,r17
81126e94:	19a7c83a 	sub	r19,r3,r6
81126e98:	3825883a 	mov	r18,r7
81126e9c:	983f861e 	bne	r19,zero,81126cb8 <__reset+0xfb106cb8>
81126ea0:	8809883a 	mov	r4,r17
81126ea4:	1111c140 	call	81111c14 <__clzsi2>
81126ea8:	10800804 	addi	r2,r2,32
81126eac:	113ffe04 	addi	r4,r2,-8
81126eb0:	00c007c4 	movi	r3,31
81126eb4:	193f850e 	bge	r3,r4,81126ccc <__reset+0xfb106ccc>
81126eb8:	10bff604 	addi	r2,r2,-40
81126ebc:	8884983a 	sll	r2,r17,r2
81126ec0:	0023883a 	mov	r17,zero
81126ec4:	243f880e 	bge	r4,r16,81126ce8 <__reset+0xfb106ce8>
81126ec8:	00ffe034 	movhi	r3,65408
81126ecc:	18ffffc4 	addi	r3,r3,-1
81126ed0:	8121c83a 	sub	r16,r16,r4
81126ed4:	10c6703a 	and	r3,r2,r3
81126ed8:	003f3406 	br	81126bac <__reset+0xfb106bac>
81126edc:	9100004c 	andi	r4,r18,1
81126ee0:	000b883a 	mov	r5,zero
81126ee4:	0005883a 	mov	r2,zero
81126ee8:	003f4806 	br	81126c0c <__reset+0xfb106c0c>
81126eec:	298cb03a 	or	r6,r5,r6
81126ef0:	300cc03a 	cmpne	r6,r6,zero
81126ef4:	0005883a 	mov	r2,zero
81126ef8:	003f6406 	br	81126c8c <__reset+0xfb106c8c>
81126efc:	10009a1e 	bne	r2,zero,81127168 <__subdf3+0x648>
81126f00:	82400044 	addi	r9,r16,1
81126f04:	4881ffcc 	andi	r2,r9,2047
81126f08:	02800044 	movi	r10,1
81126f0c:	5080670e 	bge	r10,r2,811270ac <__subdf3+0x58c>
81126f10:	0081ffc4 	movi	r2,2047
81126f14:	4880af26 	beq	r9,r2,811271d4 <__subdf3+0x6b4>
81126f18:	898d883a 	add	r6,r17,r6
81126f1c:	1945883a 	add	r2,r3,r5
81126f20:	3447803a 	cmpltu	r3,r6,r17
81126f24:	1887883a 	add	r3,r3,r2
81126f28:	182297fa 	slli	r17,r3,31
81126f2c:	300cd07a 	srli	r6,r6,1
81126f30:	1806d07a 	srli	r3,r3,1
81126f34:	4821883a 	mov	r16,r9
81126f38:	89a2b03a 	or	r17,r17,r6
81126f3c:	003f1b06 	br	81126bac <__reset+0xfb106bac>
81126f40:	0101ffc4 	movi	r4,2047
81126f44:	813f441e 	bne	r16,r4,81126c58 <__reset+0xfb106c58>
81126f48:	003f1806 	br	81126bac <__reset+0xfb106bac>
81126f4c:	843ff844 	addi	r16,r16,-31
81126f50:	01400804 	movi	r5,32
81126f54:	1408d83a 	srl	r4,r2,r16
81126f58:	19405026 	beq	r3,r5,8112709c <__subdf3+0x57c>
81126f5c:	01401004 	movi	r5,64
81126f60:	28c7c83a 	sub	r3,r5,r3
81126f64:	10c4983a 	sll	r2,r2,r3
81126f68:	88a2b03a 	or	r17,r17,r2
81126f6c:	8822c03a 	cmpne	r17,r17,zero
81126f70:	2462b03a 	or	r17,r4,r17
81126f74:	0007883a 	mov	r3,zero
81126f78:	0021883a 	mov	r16,zero
81126f7c:	003f6d06 	br	81126d34 <__reset+0xfb106d34>
81126f80:	11fff804 	addi	r7,r2,-32
81126f84:	01000804 	movi	r4,32
81126f88:	29ced83a 	srl	r7,r5,r7
81126f8c:	11004526 	beq	r2,r4,811270a4 <__subdf3+0x584>
81126f90:	01001004 	movi	r4,64
81126f94:	2089c83a 	sub	r4,r4,r2
81126f98:	2904983a 	sll	r2,r5,r4
81126f9c:	118cb03a 	or	r6,r2,r6
81126fa0:	300cc03a 	cmpne	r6,r6,zero
81126fa4:	398cb03a 	or	r6,r7,r6
81126fa8:	0005883a 	mov	r2,zero
81126fac:	003f3706 	br	81126c8c <__reset+0xfb106c8c>
81126fb0:	80002a26 	beq	r16,zero,8112705c <__subdf3+0x53c>
81126fb4:	0101ffc4 	movi	r4,2047
81126fb8:	49006626 	beq	r9,r4,81127154 <__subdf3+0x634>
81126fbc:	0085c83a 	sub	r2,zero,r2
81126fc0:	18c02034 	orhi	r3,r3,128
81126fc4:	01000e04 	movi	r4,56
81126fc8:	20807e16 	blt	r4,r2,811271c4 <__subdf3+0x6a4>
81126fcc:	010007c4 	movi	r4,31
81126fd0:	2080e716 	blt	r4,r2,81127370 <__subdf3+0x850>
81126fd4:	01000804 	movi	r4,32
81126fd8:	2089c83a 	sub	r4,r4,r2
81126fdc:	1914983a 	sll	r10,r3,r4
81126fe0:	8890d83a 	srl	r8,r17,r2
81126fe4:	8908983a 	sll	r4,r17,r4
81126fe8:	1884d83a 	srl	r2,r3,r2
81126fec:	5222b03a 	or	r17,r10,r8
81126ff0:	2006c03a 	cmpne	r3,r4,zero
81126ff4:	88e2b03a 	or	r17,r17,r3
81126ff8:	3463c83a 	sub	r17,r6,r17
81126ffc:	2885c83a 	sub	r2,r5,r2
81127000:	344d803a 	cmpltu	r6,r6,r17
81127004:	1187c83a 	sub	r3,r2,r6
81127008:	4821883a 	mov	r16,r9
8112700c:	3825883a 	mov	r18,r7
81127010:	003f2306 	br	81126ca0 <__reset+0xfb106ca0>
81127014:	24d0b03a 	or	r8,r4,r19
81127018:	40001b1e 	bne	r8,zero,81127088 <__subdf3+0x568>
8112701c:	0005883a 	mov	r2,zero
81127020:	0009883a 	mov	r4,zero
81127024:	0021883a 	mov	r16,zero
81127028:	003f4906 	br	81126d50 <__reset+0xfb106d50>
8112702c:	010007c4 	movi	r4,31
81127030:	20803a16 	blt	r4,r2,8112711c <__subdf3+0x5fc>
81127034:	01000804 	movi	r4,32
81127038:	2089c83a 	sub	r4,r4,r2
8112703c:	2912983a 	sll	r9,r5,r4
81127040:	3090d83a 	srl	r8,r6,r2
81127044:	3108983a 	sll	r4,r6,r4
81127048:	2884d83a 	srl	r2,r5,r2
8112704c:	4a12b03a 	or	r9,r9,r8
81127050:	2008c03a 	cmpne	r4,r4,zero
81127054:	4912b03a 	or	r9,r9,r4
81127058:	003f4e06 	br	81126d94 <__reset+0xfb106d94>
8112705c:	1c48b03a 	or	r4,r3,r17
81127060:	20003c26 	beq	r4,zero,81127154 <__subdf3+0x634>
81127064:	0084303a 	nor	r2,zero,r2
81127068:	1000381e 	bne	r2,zero,8112714c <__subdf3+0x62c>
8112706c:	3463c83a 	sub	r17,r6,r17
81127070:	28c5c83a 	sub	r2,r5,r3
81127074:	344d803a 	cmpltu	r6,r6,r17
81127078:	1187c83a 	sub	r3,r2,r6
8112707c:	4821883a 	mov	r16,r9
81127080:	3825883a 	mov	r18,r7
81127084:	003f0606 	br	81126ca0 <__reset+0xfb106ca0>
81127088:	2023883a 	mov	r17,r4
8112708c:	003f0906 	br	81126cb4 <__reset+0xfb106cb4>
81127090:	0101ffc4 	movi	r4,2047
81127094:	813f3a1e 	bne	r16,r4,81126d80 <__reset+0xfb106d80>
81127098:	003ec406 	br	81126bac <__reset+0xfb106bac>
8112709c:	0005883a 	mov	r2,zero
811270a0:	003fb106 	br	81126f68 <__reset+0xfb106f68>
811270a4:	0005883a 	mov	r2,zero
811270a8:	003fbc06 	br	81126f9c <__reset+0xfb106f9c>
811270ac:	1c44b03a 	or	r2,r3,r17
811270b0:	80008e1e 	bne	r16,zero,811272ec <__subdf3+0x7cc>
811270b4:	1000c826 	beq	r2,zero,811273d8 <__subdf3+0x8b8>
811270b8:	2984b03a 	or	r2,r5,r6
811270bc:	103ebb26 	beq	r2,zero,81126bac <__reset+0xfb106bac>
811270c0:	8989883a 	add	r4,r17,r6
811270c4:	1945883a 	add	r2,r3,r5
811270c8:	2447803a 	cmpltu	r3,r4,r17
811270cc:	1887883a 	add	r3,r3,r2
811270d0:	1880202c 	andhi	r2,r3,128
811270d4:	2023883a 	mov	r17,r4
811270d8:	103f1626 	beq	r2,zero,81126d34 <__reset+0xfb106d34>
811270dc:	00bfe034 	movhi	r2,65408
811270e0:	10bfffc4 	addi	r2,r2,-1
811270e4:	5021883a 	mov	r16,r10
811270e8:	1886703a 	and	r3,r3,r2
811270ec:	003eaf06 	br	81126bac <__reset+0xfb106bac>
811270f0:	3825883a 	mov	r18,r7
811270f4:	003f0f06 	br	81126d34 <__reset+0xfb106d34>
811270f8:	1c44b03a 	or	r2,r3,r17
811270fc:	8000251e 	bne	r16,zero,81127194 <__subdf3+0x674>
81127100:	1000661e 	bne	r2,zero,8112729c <__subdf3+0x77c>
81127104:	2990b03a 	or	r8,r5,r6
81127108:	40009626 	beq	r8,zero,81127364 <__subdf3+0x844>
8112710c:	2807883a 	mov	r3,r5
81127110:	3023883a 	mov	r17,r6
81127114:	3825883a 	mov	r18,r7
81127118:	003ea406 	br	81126bac <__reset+0xfb106bac>
8112711c:	127ff804 	addi	r9,r2,-32
81127120:	01000804 	movi	r4,32
81127124:	2a52d83a 	srl	r9,r5,r9
81127128:	11008c26 	beq	r2,r4,8112735c <__subdf3+0x83c>
8112712c:	01001004 	movi	r4,64
81127130:	2085c83a 	sub	r2,r4,r2
81127134:	2884983a 	sll	r2,r5,r2
81127138:	118cb03a 	or	r6,r2,r6
8112713c:	300cc03a 	cmpne	r6,r6,zero
81127140:	4992b03a 	or	r9,r9,r6
81127144:	0005883a 	mov	r2,zero
81127148:	003f1206 	br	81126d94 <__reset+0xfb106d94>
8112714c:	0101ffc4 	movi	r4,2047
81127150:	493f9c1e 	bne	r9,r4,81126fc4 <__reset+0xfb106fc4>
81127154:	2807883a 	mov	r3,r5
81127158:	3023883a 	mov	r17,r6
8112715c:	4821883a 	mov	r16,r9
81127160:	3825883a 	mov	r18,r7
81127164:	003e9106 	br	81126bac <__reset+0xfb106bac>
81127168:	80001f1e 	bne	r16,zero,811271e8 <__subdf3+0x6c8>
8112716c:	1c48b03a 	or	r4,r3,r17
81127170:	20005a26 	beq	r4,zero,811272dc <__subdf3+0x7bc>
81127174:	0084303a 	nor	r2,zero,r2
81127178:	1000561e 	bne	r2,zero,811272d4 <__subdf3+0x7b4>
8112717c:	89a3883a 	add	r17,r17,r6
81127180:	1945883a 	add	r2,r3,r5
81127184:	898d803a 	cmpltu	r6,r17,r6
81127188:	3087883a 	add	r3,r6,r2
8112718c:	4821883a 	mov	r16,r9
81127190:	003f0506 	br	81126da8 <__reset+0xfb106da8>
81127194:	10002b1e 	bne	r2,zero,81127244 <__subdf3+0x724>
81127198:	2984b03a 	or	r2,r5,r6
8112719c:	10008026 	beq	r2,zero,811273a0 <__subdf3+0x880>
811271a0:	2807883a 	mov	r3,r5
811271a4:	3023883a 	mov	r17,r6
811271a8:	3825883a 	mov	r18,r7
811271ac:	0401ffc4 	movi	r16,2047
811271b0:	003e7e06 	br	81126bac <__reset+0xfb106bac>
811271b4:	3809883a 	mov	r4,r7
811271b8:	0011883a 	mov	r8,zero
811271bc:	0005883a 	mov	r2,zero
811271c0:	003ee306 	br	81126d50 <__reset+0xfb106d50>
811271c4:	1c62b03a 	or	r17,r3,r17
811271c8:	8822c03a 	cmpne	r17,r17,zero
811271cc:	0005883a 	mov	r2,zero
811271d0:	003f8906 	br	81126ff8 <__reset+0xfb106ff8>
811271d4:	3809883a 	mov	r4,r7
811271d8:	4821883a 	mov	r16,r9
811271dc:	0011883a 	mov	r8,zero
811271e0:	0005883a 	mov	r2,zero
811271e4:	003eda06 	br	81126d50 <__reset+0xfb106d50>
811271e8:	0101ffc4 	movi	r4,2047
811271ec:	49003b26 	beq	r9,r4,811272dc <__subdf3+0x7bc>
811271f0:	0085c83a 	sub	r2,zero,r2
811271f4:	18c02034 	orhi	r3,r3,128
811271f8:	01000e04 	movi	r4,56
811271fc:	20806e16 	blt	r4,r2,811273b8 <__subdf3+0x898>
81127200:	010007c4 	movi	r4,31
81127204:	20807716 	blt	r4,r2,811273e4 <__subdf3+0x8c4>
81127208:	01000804 	movi	r4,32
8112720c:	2089c83a 	sub	r4,r4,r2
81127210:	1914983a 	sll	r10,r3,r4
81127214:	8890d83a 	srl	r8,r17,r2
81127218:	8908983a 	sll	r4,r17,r4
8112721c:	1884d83a 	srl	r2,r3,r2
81127220:	5222b03a 	or	r17,r10,r8
81127224:	2006c03a 	cmpne	r3,r4,zero
81127228:	88e2b03a 	or	r17,r17,r3
8112722c:	89a3883a 	add	r17,r17,r6
81127230:	1145883a 	add	r2,r2,r5
81127234:	898d803a 	cmpltu	r6,r17,r6
81127238:	3087883a 	add	r3,r6,r2
8112723c:	4821883a 	mov	r16,r9
81127240:	003ed906 	br	81126da8 <__reset+0xfb106da8>
81127244:	2984b03a 	or	r2,r5,r6
81127248:	10004226 	beq	r2,zero,81127354 <__subdf3+0x834>
8112724c:	1808d0fa 	srli	r4,r3,3
81127250:	8822d0fa 	srli	r17,r17,3
81127254:	1806977a 	slli	r3,r3,29
81127258:	2080022c 	andhi	r2,r4,8
8112725c:	1c62b03a 	or	r17,r3,r17
81127260:	10000826 	beq	r2,zero,81127284 <__subdf3+0x764>
81127264:	2812d0fa 	srli	r9,r5,3
81127268:	4880022c 	andhi	r2,r9,8
8112726c:	1000051e 	bne	r2,zero,81127284 <__subdf3+0x764>
81127270:	300cd0fa 	srli	r6,r6,3
81127274:	2804977a 	slli	r2,r5,29
81127278:	4809883a 	mov	r4,r9
8112727c:	3825883a 	mov	r18,r7
81127280:	11a2b03a 	or	r17,r2,r6
81127284:	8806d77a 	srli	r3,r17,29
81127288:	200890fa 	slli	r4,r4,3
8112728c:	882290fa 	slli	r17,r17,3
81127290:	0401ffc4 	movi	r16,2047
81127294:	1906b03a 	or	r3,r3,r4
81127298:	003e4406 	br	81126bac <__reset+0xfb106bac>
8112729c:	2984b03a 	or	r2,r5,r6
811272a0:	103e4226 	beq	r2,zero,81126bac <__reset+0xfb106bac>
811272a4:	8989c83a 	sub	r4,r17,r6
811272a8:	8911803a 	cmpltu	r8,r17,r4
811272ac:	1945c83a 	sub	r2,r3,r5
811272b0:	1205c83a 	sub	r2,r2,r8
811272b4:	1200202c 	andhi	r8,r2,128
811272b8:	403e9a26 	beq	r8,zero,81126d24 <__reset+0xfb106d24>
811272bc:	3463c83a 	sub	r17,r6,r17
811272c0:	28c5c83a 	sub	r2,r5,r3
811272c4:	344d803a 	cmpltu	r6,r6,r17
811272c8:	1187c83a 	sub	r3,r2,r6
811272cc:	3825883a 	mov	r18,r7
811272d0:	003e3606 	br	81126bac <__reset+0xfb106bac>
811272d4:	0101ffc4 	movi	r4,2047
811272d8:	493fc71e 	bne	r9,r4,811271f8 <__reset+0xfb1071f8>
811272dc:	2807883a 	mov	r3,r5
811272e0:	3023883a 	mov	r17,r6
811272e4:	4821883a 	mov	r16,r9
811272e8:	003e3006 	br	81126bac <__reset+0xfb106bac>
811272ec:	10003626 	beq	r2,zero,811273c8 <__subdf3+0x8a8>
811272f0:	2984b03a 	or	r2,r5,r6
811272f4:	10001726 	beq	r2,zero,81127354 <__subdf3+0x834>
811272f8:	1808d0fa 	srli	r4,r3,3
811272fc:	8822d0fa 	srli	r17,r17,3
81127300:	1806977a 	slli	r3,r3,29
81127304:	2080022c 	andhi	r2,r4,8
81127308:	1c62b03a 	or	r17,r3,r17
8112730c:	10000726 	beq	r2,zero,8112732c <__subdf3+0x80c>
81127310:	2812d0fa 	srli	r9,r5,3
81127314:	4880022c 	andhi	r2,r9,8
81127318:	1000041e 	bne	r2,zero,8112732c <__subdf3+0x80c>
8112731c:	300cd0fa 	srli	r6,r6,3
81127320:	2804977a 	slli	r2,r5,29
81127324:	4809883a 	mov	r4,r9
81127328:	11a2b03a 	or	r17,r2,r6
8112732c:	8806d77a 	srli	r3,r17,29
81127330:	200890fa 	slli	r4,r4,3
81127334:	882290fa 	slli	r17,r17,3
81127338:	3825883a 	mov	r18,r7
8112733c:	1906b03a 	or	r3,r3,r4
81127340:	0401ffc4 	movi	r16,2047
81127344:	003e1906 	br	81126bac <__reset+0xfb106bac>
81127348:	000b883a 	mov	r5,zero
8112734c:	0005883a 	mov	r2,zero
81127350:	003e2e06 	br	81126c0c <__reset+0xfb106c0c>
81127354:	0401ffc4 	movi	r16,2047
81127358:	003e1406 	br	81126bac <__reset+0xfb106bac>
8112735c:	0005883a 	mov	r2,zero
81127360:	003f7506 	br	81127138 <__reset+0xfb107138>
81127364:	0005883a 	mov	r2,zero
81127368:	0009883a 	mov	r4,zero
8112736c:	003e7806 	br	81126d50 <__reset+0xfb106d50>
81127370:	123ff804 	addi	r8,r2,-32
81127374:	01000804 	movi	r4,32
81127378:	1a10d83a 	srl	r8,r3,r8
8112737c:	11002526 	beq	r2,r4,81127414 <__subdf3+0x8f4>
81127380:	01001004 	movi	r4,64
81127384:	2085c83a 	sub	r2,r4,r2
81127388:	1884983a 	sll	r2,r3,r2
8112738c:	1444b03a 	or	r2,r2,r17
81127390:	1004c03a 	cmpne	r2,r2,zero
81127394:	40a2b03a 	or	r17,r8,r2
81127398:	0005883a 	mov	r2,zero
8112739c:	003f1606 	br	81126ff8 <__reset+0xfb106ff8>
811273a0:	02000434 	movhi	r8,16
811273a4:	0009883a 	mov	r4,zero
811273a8:	423fffc4 	addi	r8,r8,-1
811273ac:	00bfffc4 	movi	r2,-1
811273b0:	0401ffc4 	movi	r16,2047
811273b4:	003e6606 	br	81126d50 <__reset+0xfb106d50>
811273b8:	1c62b03a 	or	r17,r3,r17
811273bc:	8822c03a 	cmpne	r17,r17,zero
811273c0:	0005883a 	mov	r2,zero
811273c4:	003f9906 	br	8112722c <__reset+0xfb10722c>
811273c8:	2807883a 	mov	r3,r5
811273cc:	3023883a 	mov	r17,r6
811273d0:	0401ffc4 	movi	r16,2047
811273d4:	003df506 	br	81126bac <__reset+0xfb106bac>
811273d8:	2807883a 	mov	r3,r5
811273dc:	3023883a 	mov	r17,r6
811273e0:	003df206 	br	81126bac <__reset+0xfb106bac>
811273e4:	123ff804 	addi	r8,r2,-32
811273e8:	01000804 	movi	r4,32
811273ec:	1a10d83a 	srl	r8,r3,r8
811273f0:	11000a26 	beq	r2,r4,8112741c <__subdf3+0x8fc>
811273f4:	01001004 	movi	r4,64
811273f8:	2085c83a 	sub	r2,r4,r2
811273fc:	1884983a 	sll	r2,r3,r2
81127400:	1444b03a 	or	r2,r2,r17
81127404:	1004c03a 	cmpne	r2,r2,zero
81127408:	40a2b03a 	or	r17,r8,r2
8112740c:	0005883a 	mov	r2,zero
81127410:	003f8606 	br	8112722c <__reset+0xfb10722c>
81127414:	0005883a 	mov	r2,zero
81127418:	003fdc06 	br	8112738c <__reset+0xfb10738c>
8112741c:	0005883a 	mov	r2,zero
81127420:	003ff706 	br	81127400 <__reset+0xfb107400>

81127424 <__fixdfsi>:
81127424:	280cd53a 	srli	r6,r5,20
81127428:	00c00434 	movhi	r3,16
8112742c:	18ffffc4 	addi	r3,r3,-1
81127430:	3181ffcc 	andi	r6,r6,2047
81127434:	01c0ff84 	movi	r7,1022
81127438:	28c6703a 	and	r3,r5,r3
8112743c:	280ad7fa 	srli	r5,r5,31
81127440:	3980120e 	bge	r7,r6,8112748c <__fixdfsi+0x68>
81127444:	00810744 	movi	r2,1053
81127448:	11800c16 	blt	r2,r6,8112747c <__fixdfsi+0x58>
8112744c:	00810cc4 	movi	r2,1075
81127450:	1185c83a 	sub	r2,r2,r6
81127454:	01c007c4 	movi	r7,31
81127458:	18c00434 	orhi	r3,r3,16
8112745c:	38800d16 	blt	r7,r2,81127494 <__fixdfsi+0x70>
81127460:	31befb44 	addi	r6,r6,-1043
81127464:	2084d83a 	srl	r2,r4,r2
81127468:	1986983a 	sll	r3,r3,r6
8112746c:	1884b03a 	or	r2,r3,r2
81127470:	28000726 	beq	r5,zero,81127490 <__fixdfsi+0x6c>
81127474:	0085c83a 	sub	r2,zero,r2
81127478:	f800283a 	ret
8112747c:	00a00034 	movhi	r2,32768
81127480:	10bfffc4 	addi	r2,r2,-1
81127484:	2885883a 	add	r2,r5,r2
81127488:	f800283a 	ret
8112748c:	0005883a 	mov	r2,zero
81127490:	f800283a 	ret
81127494:	008104c4 	movi	r2,1043
81127498:	1185c83a 	sub	r2,r2,r6
8112749c:	1884d83a 	srl	r2,r3,r2
811274a0:	003ff306 	br	81127470 <__reset+0xfb107470>

811274a4 <__floatsidf>:
811274a4:	defffd04 	addi	sp,sp,-12
811274a8:	de00012e 	bgeu	sp,et,811274b0 <__floatsidf+0xc>
811274ac:	003b68fa 	trap	3
811274b0:	dfc00215 	stw	ra,8(sp)
811274b4:	dc400115 	stw	r17,4(sp)
811274b8:	dc000015 	stw	r16,0(sp)
811274bc:	20002b26 	beq	r4,zero,8112756c <__floatsidf+0xc8>
811274c0:	2023883a 	mov	r17,r4
811274c4:	2020d7fa 	srli	r16,r4,31
811274c8:	20002d16 	blt	r4,zero,81127580 <__floatsidf+0xdc>
811274cc:	8809883a 	mov	r4,r17
811274d0:	1111c140 	call	81111c14 <__clzsi2>
811274d4:	01410784 	movi	r5,1054
811274d8:	288bc83a 	sub	r5,r5,r2
811274dc:	01010cc4 	movi	r4,1075
811274e0:	2149c83a 	sub	r4,r4,r5
811274e4:	00c007c4 	movi	r3,31
811274e8:	1900160e 	bge	r3,r4,81127544 <__floatsidf+0xa0>
811274ec:	00c104c4 	movi	r3,1043
811274f0:	1947c83a 	sub	r3,r3,r5
811274f4:	88c6983a 	sll	r3,r17,r3
811274f8:	00800434 	movhi	r2,16
811274fc:	10bfffc4 	addi	r2,r2,-1
81127500:	1886703a 	and	r3,r3,r2
81127504:	2941ffcc 	andi	r5,r5,2047
81127508:	800d883a 	mov	r6,r16
8112750c:	0005883a 	mov	r2,zero
81127510:	280a953a 	slli	r5,r5,20
81127514:	31803fcc 	andi	r6,r6,255
81127518:	01000434 	movhi	r4,16
8112751c:	300c97fa 	slli	r6,r6,31
81127520:	213fffc4 	addi	r4,r4,-1
81127524:	1906703a 	and	r3,r3,r4
81127528:	1946b03a 	or	r3,r3,r5
8112752c:	1986b03a 	or	r3,r3,r6
81127530:	dfc00217 	ldw	ra,8(sp)
81127534:	dc400117 	ldw	r17,4(sp)
81127538:	dc000017 	ldw	r16,0(sp)
8112753c:	dec00304 	addi	sp,sp,12
81127540:	f800283a 	ret
81127544:	00c002c4 	movi	r3,11
81127548:	1887c83a 	sub	r3,r3,r2
8112754c:	88c6d83a 	srl	r3,r17,r3
81127550:	8904983a 	sll	r2,r17,r4
81127554:	01000434 	movhi	r4,16
81127558:	213fffc4 	addi	r4,r4,-1
8112755c:	2941ffcc 	andi	r5,r5,2047
81127560:	1906703a 	and	r3,r3,r4
81127564:	800d883a 	mov	r6,r16
81127568:	003fe906 	br	81127510 <__reset+0xfb107510>
8112756c:	000d883a 	mov	r6,zero
81127570:	000b883a 	mov	r5,zero
81127574:	0007883a 	mov	r3,zero
81127578:	0005883a 	mov	r2,zero
8112757c:	003fe406 	br	81127510 <__reset+0xfb107510>
81127580:	0123c83a 	sub	r17,zero,r4
81127584:	003fd106 	br	811274cc <__reset+0xfb1074cc>

81127588 <__floatunsidf>:
81127588:	defffe04 	addi	sp,sp,-8
8112758c:	de00012e 	bgeu	sp,et,81127594 <__floatunsidf+0xc>
81127590:	003b68fa 	trap	3
81127594:	dc000015 	stw	r16,0(sp)
81127598:	dfc00115 	stw	ra,4(sp)
8112759c:	2021883a 	mov	r16,r4
811275a0:	20002226 	beq	r4,zero,8112762c <__floatunsidf+0xa4>
811275a4:	1111c140 	call	81111c14 <__clzsi2>
811275a8:	01010784 	movi	r4,1054
811275ac:	2089c83a 	sub	r4,r4,r2
811275b0:	01810cc4 	movi	r6,1075
811275b4:	310dc83a 	sub	r6,r6,r4
811275b8:	00c007c4 	movi	r3,31
811275bc:	1980120e 	bge	r3,r6,81127608 <__floatunsidf+0x80>
811275c0:	00c104c4 	movi	r3,1043
811275c4:	1907c83a 	sub	r3,r3,r4
811275c8:	80ca983a 	sll	r5,r16,r3
811275cc:	00800434 	movhi	r2,16
811275d0:	10bfffc4 	addi	r2,r2,-1
811275d4:	2101ffcc 	andi	r4,r4,2047
811275d8:	0021883a 	mov	r16,zero
811275dc:	288a703a 	and	r5,r5,r2
811275e0:	2008953a 	slli	r4,r4,20
811275e4:	00c00434 	movhi	r3,16
811275e8:	18ffffc4 	addi	r3,r3,-1
811275ec:	28c6703a 	and	r3,r5,r3
811275f0:	8005883a 	mov	r2,r16
811275f4:	1906b03a 	or	r3,r3,r4
811275f8:	dfc00117 	ldw	ra,4(sp)
811275fc:	dc000017 	ldw	r16,0(sp)
81127600:	dec00204 	addi	sp,sp,8
81127604:	f800283a 	ret
81127608:	00c002c4 	movi	r3,11
8112760c:	188bc83a 	sub	r5,r3,r2
81127610:	814ad83a 	srl	r5,r16,r5
81127614:	00c00434 	movhi	r3,16
81127618:	18ffffc4 	addi	r3,r3,-1
8112761c:	81a0983a 	sll	r16,r16,r6
81127620:	2101ffcc 	andi	r4,r4,2047
81127624:	28ca703a 	and	r5,r5,r3
81127628:	003fed06 	br	811275e0 <__reset+0xfb1075e0>
8112762c:	0009883a 	mov	r4,zero
81127630:	000b883a 	mov	r5,zero
81127634:	003fea06 	br	811275e0 <__reset+0xfb1075e0>

81127638 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81127638:	defffb04 	addi	sp,sp,-20
8112763c:	de00012e 	bgeu	sp,et,81127644 <alt_busy_sleep+0xc>
81127640:	003b68fa 	trap	3
81127644:	df000415 	stw	fp,16(sp)
81127648:	df000404 	addi	fp,sp,16
8112764c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81127650:	008000c4 	movi	r2,3
81127654:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81127658:	e0fffd17 	ldw	r3,-12(fp)
8112765c:	008003f4 	movhi	r2,15
81127660:	10909004 	addi	r2,r2,16960
81127664:	1887383a 	mul	r3,r3,r2
81127668:	00817db4 	movhi	r2,1526
8112766c:	10b84004 	addi	r2,r2,-7936
81127670:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81127674:	00a00034 	movhi	r2,32768
81127678:	10bfffc4 	addi	r2,r2,-1
8112767c:	10c5203a 	divu	r2,r2,r3
81127680:	e0ffff17 	ldw	r3,-4(fp)
81127684:	1885203a 	divu	r2,r3,r2
81127688:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
8112768c:	e0bffe17 	ldw	r2,-8(fp)
81127690:	10002526 	beq	r2,zero,81127728 <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
81127694:	e03ffc15 	stw	zero,-16(fp)
81127698:	00001406 	br	811276ec <alt_busy_sleep+0xb4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
8112769c:	00a00034 	movhi	r2,32768
811276a0:	10bfffc4 	addi	r2,r2,-1
811276a4:	10bfffc4 	addi	r2,r2,-1
811276a8:	103ffe1e 	bne	r2,zero,811276a4 <__reset+0xfb1076a4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
811276ac:	e0fffd17 	ldw	r3,-12(fp)
811276b0:	008003f4 	movhi	r2,15
811276b4:	10909004 	addi	r2,r2,16960
811276b8:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
811276bc:	00817db4 	movhi	r2,1526
811276c0:	10b84004 	addi	r2,r2,-7936
811276c4:	10c7203a 	divu	r3,r2,r3
811276c8:	00a00034 	movhi	r2,32768
811276cc:	10bfffc4 	addi	r2,r2,-1
811276d0:	10c5203a 	divu	r2,r2,r3
811276d4:	e0ffff17 	ldw	r3,-4(fp)
811276d8:	1885c83a 	sub	r2,r3,r2
811276dc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
811276e0:	e0bffc17 	ldw	r2,-16(fp)
811276e4:	10800044 	addi	r2,r2,1
811276e8:	e0bffc15 	stw	r2,-16(fp)
811276ec:	e0fffc17 	ldw	r3,-16(fp)
811276f0:	e0bffe17 	ldw	r2,-8(fp)
811276f4:	18bfe916 	blt	r3,r2,8112769c <__reset+0xfb10769c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811276f8:	e0fffd17 	ldw	r3,-12(fp)
811276fc:	008003f4 	movhi	r2,15
81127700:	10909004 	addi	r2,r2,16960
81127704:	1887383a 	mul	r3,r3,r2
81127708:	00817db4 	movhi	r2,1526
8112770c:	10b84004 	addi	r2,r2,-7936
81127710:	10c7203a 	divu	r3,r2,r3
81127714:	e0bfff17 	ldw	r2,-4(fp)
81127718:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8112771c:	10bfffc4 	addi	r2,r2,-1
81127720:	103ffe1e 	bne	r2,zero,8112771c <__reset+0xfb10771c>
81127724:	00000b06 	br	81127754 <alt_busy_sleep+0x11c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81127728:	e0fffd17 	ldw	r3,-12(fp)
8112772c:	008003f4 	movhi	r2,15
81127730:	10909004 	addi	r2,r2,16960
81127734:	1887383a 	mul	r3,r3,r2
81127738:	00817db4 	movhi	r2,1526
8112773c:	10b84004 	addi	r2,r2,-7936
81127740:	10c7203a 	divu	r3,r2,r3
81127744:	e0bfff17 	ldw	r2,-4(fp)
81127748:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
8112774c:	10bfffc4 	addi	r2,r2,-1
81127750:	00bffe16 	blt	zero,r2,8112774c <__reset+0xfb10774c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81127754:	0005883a 	mov	r2,zero
}
81127758:	e037883a 	mov	sp,fp
8112775c:	df000017 	ldw	fp,0(sp)
81127760:	dec00104 	addi	sp,sp,4
81127764:	f800283a 	ret

81127768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127768:	defffe04 	addi	sp,sp,-8
8112776c:	de00012e 	bgeu	sp,et,81127774 <alt_get_errno+0xc>
81127770:	003b68fa 	trap	3
81127774:	dfc00115 	stw	ra,4(sp)
81127778:	df000015 	stw	fp,0(sp)
8112777c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127780:	d0a01017 	ldw	r2,-32704(gp)
81127784:	10000326 	beq	r2,zero,81127794 <alt_get_errno+0x2c>
81127788:	d0a01017 	ldw	r2,-32704(gp)
8112778c:	103ee83a 	callr	r2
81127790:	00000106 	br	81127798 <alt_get_errno+0x30>
81127794:	d0a06104 	addi	r2,gp,-32380
}
81127798:	e037883a 	mov	sp,fp
8112779c:	dfc00117 	ldw	ra,4(sp)
811277a0:	df000017 	ldw	fp,0(sp)
811277a4:	dec00204 	addi	sp,sp,8
811277a8:	f800283a 	ret

811277ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811277ac:	defffb04 	addi	sp,sp,-20
811277b0:	de00012e 	bgeu	sp,et,811277b8 <close+0xc>
811277b4:	003b68fa 	trap	3
811277b8:	dfc00415 	stw	ra,16(sp)
811277bc:	df000315 	stw	fp,12(sp)
811277c0:	df000304 	addi	fp,sp,12
811277c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
811277c8:	e0bfff17 	ldw	r2,-4(fp)
811277cc:	10000616 	blt	r2,zero,811277e8 <close+0x3c>
811277d0:	e0bfff17 	ldw	r2,-4(fp)
811277d4:	10c00324 	muli	r3,r2,12
811277d8:	00a04534 	movhi	r2,33044
811277dc:	10844204 	addi	r2,r2,4360
811277e0:	1885883a 	add	r2,r3,r2
811277e4:	00000106 	br	811277ec <close+0x40>
811277e8:	0005883a 	mov	r2,zero
811277ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
811277f0:	e0bffd17 	ldw	r2,-12(fp)
811277f4:	10001926 	beq	r2,zero,8112785c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
811277f8:	e0bffd17 	ldw	r2,-12(fp)
811277fc:	10800017 	ldw	r2,0(r2)
81127800:	10800417 	ldw	r2,16(r2)
81127804:	10000626 	beq	r2,zero,81127820 <close+0x74>
81127808:	e0bffd17 	ldw	r2,-12(fp)
8112780c:	10800017 	ldw	r2,0(r2)
81127810:	10800417 	ldw	r2,16(r2)
81127814:	e13ffd17 	ldw	r4,-12(fp)
81127818:	103ee83a 	callr	r2
8112781c:	00000106 	br	81127824 <close+0x78>
81127820:	0005883a 	mov	r2,zero
81127824:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81127828:	e13fff17 	ldw	r4,-4(fp)
8112782c:	1128dd00 	call	81128dd0 <alt_release_fd>
    if (rval < 0)
81127830:	e0bffe17 	ldw	r2,-8(fp)
81127834:	1000070e 	bge	r2,zero,81127854 <close+0xa8>
    {
      ALT_ERRNO = -rval;
81127838:	11277680 	call	81127768 <alt_get_errno>
8112783c:	1007883a 	mov	r3,r2
81127840:	e0bffe17 	ldw	r2,-8(fp)
81127844:	0085c83a 	sub	r2,zero,r2
81127848:	18800015 	stw	r2,0(r3)
      return -1;
8112784c:	00bfffc4 	movi	r2,-1
81127850:	00000706 	br	81127870 <close+0xc4>
    }
    return 0;
81127854:	0005883a 	mov	r2,zero
81127858:	00000506 	br	81127870 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
8112785c:	11277680 	call	81127768 <alt_get_errno>
81127860:	1007883a 	mov	r3,r2
81127864:	00801444 	movi	r2,81
81127868:	18800015 	stw	r2,0(r3)
    return -1;
8112786c:	00bfffc4 	movi	r2,-1
  }
}
81127870:	e037883a 	mov	sp,fp
81127874:	dfc00117 	ldw	ra,4(sp)
81127878:	df000017 	ldw	fp,0(sp)
8112787c:	dec00204 	addi	sp,sp,8
81127880:	f800283a 	ret

81127884 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81127884:	deffff04 	addi	sp,sp,-4
81127888:	de00012e 	bgeu	sp,et,81127890 <alt_dcache_flush_all+0xc>
8112788c:	003b68fa 	trap	3
81127890:	df000015 	stw	fp,0(sp)
81127894:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81127898:	0001883a 	nop
8112789c:	e037883a 	mov	sp,fp
811278a0:	df000017 	ldw	fp,0(sp)
811278a4:	dec00104 	addi	sp,sp,4
811278a8:	f800283a 	ret

811278ac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
811278ac:	defffc04 	addi	sp,sp,-16
811278b0:	de00012e 	bgeu	sp,et,811278b8 <alt_dev_null_write+0xc>
811278b4:	003b68fa 	trap	3
811278b8:	df000315 	stw	fp,12(sp)
811278bc:	df000304 	addi	fp,sp,12
811278c0:	e13ffd15 	stw	r4,-12(fp)
811278c4:	e17ffe15 	stw	r5,-8(fp)
811278c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
811278cc:	e0bfff17 	ldw	r2,-4(fp)
}
811278d0:	e037883a 	mov	sp,fp
811278d4:	df000017 	ldw	fp,0(sp)
811278d8:	dec00104 	addi	sp,sp,4
811278dc:	f800283a 	ret

811278e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811278e0:	defffe04 	addi	sp,sp,-8
811278e4:	de00012e 	bgeu	sp,et,811278ec <alt_get_errno+0xc>
811278e8:	003b68fa 	trap	3
811278ec:	dfc00115 	stw	ra,4(sp)
811278f0:	df000015 	stw	fp,0(sp)
811278f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811278f8:	d0a01017 	ldw	r2,-32704(gp)
811278fc:	10000326 	beq	r2,zero,8112790c <alt_get_errno+0x2c>
81127900:	d0a01017 	ldw	r2,-32704(gp)
81127904:	103ee83a 	callr	r2
81127908:	00000106 	br	81127910 <alt_get_errno+0x30>
8112790c:	d0a06104 	addi	r2,gp,-32380
}
81127910:	e037883a 	mov	sp,fp
81127914:	dfc00117 	ldw	ra,4(sp)
81127918:	df000017 	ldw	fp,0(sp)
8112791c:	dec00204 	addi	sp,sp,8
81127920:	f800283a 	ret

81127924 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81127924:	defffb04 	addi	sp,sp,-20
81127928:	de00012e 	bgeu	sp,et,81127930 <fstat+0xc>
8112792c:	003b68fa 	trap	3
81127930:	dfc00415 	stw	ra,16(sp)
81127934:	df000315 	stw	fp,12(sp)
81127938:	df000304 	addi	fp,sp,12
8112793c:	e13ffe15 	stw	r4,-8(fp)
81127940:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127944:	e0bffe17 	ldw	r2,-8(fp)
81127948:	10000616 	blt	r2,zero,81127964 <fstat+0x40>
8112794c:	e0bffe17 	ldw	r2,-8(fp)
81127950:	10c00324 	muli	r3,r2,12
81127954:	00a04534 	movhi	r2,33044
81127958:	10844204 	addi	r2,r2,4360
8112795c:	1885883a 	add	r2,r3,r2
81127960:	00000106 	br	81127968 <fstat+0x44>
81127964:	0005883a 	mov	r2,zero
81127968:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
8112796c:	e0bffd17 	ldw	r2,-12(fp)
81127970:	10001026 	beq	r2,zero,811279b4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81127974:	e0bffd17 	ldw	r2,-12(fp)
81127978:	10800017 	ldw	r2,0(r2)
8112797c:	10800817 	ldw	r2,32(r2)
81127980:	10000726 	beq	r2,zero,811279a0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
81127984:	e0bffd17 	ldw	r2,-12(fp)
81127988:	10800017 	ldw	r2,0(r2)
8112798c:	10800817 	ldw	r2,32(r2)
81127990:	e17fff17 	ldw	r5,-4(fp)
81127994:	e13ffd17 	ldw	r4,-12(fp)
81127998:	103ee83a 	callr	r2
8112799c:	00000a06 	br	811279c8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
811279a0:	e0bfff17 	ldw	r2,-4(fp)
811279a4:	00c80004 	movi	r3,8192
811279a8:	10c00115 	stw	r3,4(r2)
      return 0;
811279ac:	0005883a 	mov	r2,zero
811279b0:	00000506 	br	811279c8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811279b4:	11278e00 	call	811278e0 <alt_get_errno>
811279b8:	1007883a 	mov	r3,r2
811279bc:	00801444 	movi	r2,81
811279c0:	18800015 	stw	r2,0(r3)
    return -1;
811279c4:	00bfffc4 	movi	r2,-1
  }
}
811279c8:	e037883a 	mov	sp,fp
811279cc:	dfc00117 	ldw	ra,4(sp)
811279d0:	df000017 	ldw	fp,0(sp)
811279d4:	dec00204 	addi	sp,sp,8
811279d8:	f800283a 	ret

811279dc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
811279dc:	defff004 	addi	sp,sp,-64
811279e0:	de00012e 	bgeu	sp,et,811279e8 <alt_irq_register+0xc>
811279e4:	003b68fa 	trap	3
811279e8:	df000f15 	stw	fp,60(sp)
811279ec:	df000f04 	addi	fp,sp,60
811279f0:	e13ffd15 	stw	r4,-12(fp)
811279f4:	e17ffe15 	stw	r5,-8(fp)
811279f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
811279fc:	00bffa84 	movi	r2,-22
81127a00:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81127a04:	e0bffd17 	ldw	r2,-12(fp)
81127a08:	10800828 	cmpgeui	r2,r2,32
81127a0c:	1000501e 	bne	r2,zero,81127b50 <alt_irq_register+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127a10:	0005303a 	rdctl	r2,status
81127a14:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127a18:	e0fff617 	ldw	r3,-40(fp)
81127a1c:	00bfff84 	movi	r2,-2
81127a20:	1884703a 	and	r2,r3,r2
81127a24:	1001703a 	wrctl	status,r2
  
  return context;
81127a28:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
81127a2c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
81127a30:	00a04574 	movhi	r2,33045
81127a34:	1081fe04 	addi	r2,r2,2040
81127a38:	e0fffd17 	ldw	r3,-12(fp)
81127a3c:	180690fa 	slli	r3,r3,3
81127a40:	10c5883a 	add	r2,r2,r3
81127a44:	e0ffff17 	ldw	r3,-4(fp)
81127a48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
81127a4c:	00a04574 	movhi	r2,33045
81127a50:	1081fe04 	addi	r2,r2,2040
81127a54:	e0fffd17 	ldw	r3,-12(fp)
81127a58:	180690fa 	slli	r3,r3,3
81127a5c:	10c5883a 	add	r2,r2,r3
81127a60:	10800104 	addi	r2,r2,4
81127a64:	e0fffe17 	ldw	r3,-8(fp)
81127a68:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
81127a6c:	e0bfff17 	ldw	r2,-4(fp)
81127a70:	10001926 	beq	r2,zero,81127ad8 <alt_irq_register+0xfc>
81127a74:	e0bffd17 	ldw	r2,-12(fp)
81127a78:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127a7c:	0005303a 	rdctl	r2,status
81127a80:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127a84:	e0fff717 	ldw	r3,-36(fp)
81127a88:	00bfff84 	movi	r2,-2
81127a8c:	1884703a 	and	r2,r3,r2
81127a90:	1001703a 	wrctl	status,r2
  
  return context;
81127a94:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81127a98:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
81127a9c:	00c00044 	movi	r3,1
81127aa0:	e0bff217 	ldw	r2,-56(fp)
81127aa4:	1884983a 	sll	r2,r3,r2
81127aa8:	1007883a 	mov	r3,r2
81127aac:	d0a06917 	ldw	r2,-32348(gp)
81127ab0:	1884b03a 	or	r2,r3,r2
81127ab4:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81127ab8:	d0a06917 	ldw	r2,-32348(gp)
81127abc:	100170fa 	wrctl	ienable,r2
81127ac0:	e0bff817 	ldw	r2,-32(fp)
81127ac4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127ac8:	e0bff917 	ldw	r2,-28(fp)
81127acc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81127ad0:	0005883a 	mov	r2,zero
81127ad4:	00001906 	br	81127b3c <alt_irq_register+0x160>
81127ad8:	e0bffd17 	ldw	r2,-12(fp)
81127adc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127ae0:	0005303a 	rdctl	r2,status
81127ae4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127ae8:	e0fffa17 	ldw	r3,-24(fp)
81127aec:	00bfff84 	movi	r2,-2
81127af0:	1884703a 	and	r2,r3,r2
81127af4:	1001703a 	wrctl	status,r2
  
  return context;
81127af8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81127afc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
81127b00:	00c00044 	movi	r3,1
81127b04:	e0bff417 	ldw	r2,-48(fp)
81127b08:	1884983a 	sll	r2,r3,r2
81127b0c:	0084303a 	nor	r2,zero,r2
81127b10:	1007883a 	mov	r3,r2
81127b14:	d0a06917 	ldw	r2,-32348(gp)
81127b18:	1884703a 	and	r2,r3,r2
81127b1c:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81127b20:	d0a06917 	ldw	r2,-32348(gp)
81127b24:	100170fa 	wrctl	ienable,r2
81127b28:	e0bffb17 	ldw	r2,-20(fp)
81127b2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127b30:	e0bffc17 	ldw	r2,-16(fp)
81127b34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81127b38:	0005883a 	mov	r2,zero
81127b3c:	e0bff115 	stw	r2,-60(fp)
81127b40:	e0bff317 	ldw	r2,-52(fp)
81127b44:	e0bff515 	stw	r2,-44(fp)
81127b48:	e0bff517 	ldw	r2,-44(fp)
81127b4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
81127b50:	e0bff117 	ldw	r2,-60(fp)
}
81127b54:	e037883a 	mov	sp,fp
81127b58:	df000017 	ldw	fp,0(sp)
81127b5c:	dec00104 	addi	sp,sp,4
81127b60:	f800283a 	ret

81127b64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81127b64:	defffe04 	addi	sp,sp,-8
81127b68:	de00012e 	bgeu	sp,et,81127b70 <alt_get_errno+0xc>
81127b6c:	003b68fa 	trap	3
81127b70:	dfc00115 	stw	ra,4(sp)
81127b74:	df000015 	stw	fp,0(sp)
81127b78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81127b7c:	d0a01017 	ldw	r2,-32704(gp)
81127b80:	10000326 	beq	r2,zero,81127b90 <alt_get_errno+0x2c>
81127b84:	d0a01017 	ldw	r2,-32704(gp)
81127b88:	103ee83a 	callr	r2
81127b8c:	00000106 	br	81127b94 <alt_get_errno+0x30>
81127b90:	d0a06104 	addi	r2,gp,-32380
}
81127b94:	e037883a 	mov	sp,fp
81127b98:	dfc00117 	ldw	ra,4(sp)
81127b9c:	df000017 	ldw	fp,0(sp)
81127ba0:	dec00204 	addi	sp,sp,8
81127ba4:	f800283a 	ret

81127ba8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
81127ba8:	deffed04 	addi	sp,sp,-76
81127bac:	de00012e 	bgeu	sp,et,81127bb4 <isatty+0xc>
81127bb0:	003b68fa 	trap	3
81127bb4:	dfc01215 	stw	ra,72(sp)
81127bb8:	df001115 	stw	fp,68(sp)
81127bbc:	df001104 	addi	fp,sp,68
81127bc0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81127bc4:	e0bfff17 	ldw	r2,-4(fp)
81127bc8:	10000616 	blt	r2,zero,81127be4 <isatty+0x3c>
81127bcc:	e0bfff17 	ldw	r2,-4(fp)
81127bd0:	10c00324 	muli	r3,r2,12
81127bd4:	00a04534 	movhi	r2,33044
81127bd8:	10844204 	addi	r2,r2,4360
81127bdc:	1885883a 	add	r2,r3,r2
81127be0:	00000106 	br	81127be8 <isatty+0x40>
81127be4:	0005883a 	mov	r2,zero
81127be8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81127bec:	e0bfef17 	ldw	r2,-68(fp)
81127bf0:	10000e26 	beq	r2,zero,81127c2c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81127bf4:	e0bfef17 	ldw	r2,-68(fp)
81127bf8:	10800017 	ldw	r2,0(r2)
81127bfc:	10800817 	ldw	r2,32(r2)
81127c00:	1000021e 	bne	r2,zero,81127c0c <isatty+0x64>
    {
      return 1;
81127c04:	00800044 	movi	r2,1
81127c08:	00000d06 	br	81127c40 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81127c0c:	e0bff004 	addi	r2,fp,-64
81127c10:	100b883a 	mov	r5,r2
81127c14:	e13fff17 	ldw	r4,-4(fp)
81127c18:	11279240 	call	81127924 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81127c1c:	e0bff117 	ldw	r2,-60(fp)
81127c20:	10880020 	cmpeqi	r2,r2,8192
81127c24:	10803fcc 	andi	r2,r2,255
81127c28:	00000506 	br	81127c40 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81127c2c:	1127b640 	call	81127b64 <alt_get_errno>
81127c30:	1007883a 	mov	r3,r2
81127c34:	00801444 	movi	r2,81
81127c38:	18800015 	stw	r2,0(r3)
    return 0;
81127c3c:	0005883a 	mov	r2,zero
  }
}
81127c40:	e037883a 	mov	sp,fp
81127c44:	dfc00117 	ldw	ra,4(sp)
81127c48:	df000017 	ldw	fp,0(sp)
81127c4c:	dec00204 	addi	sp,sp,8
81127c50:	f800283a 	ret

81127c54 <tx_log_str>:
	#include "sys/alt_log_printf.h"

        .global tx_log_str
tx_log_str:
	/* load base uart / jtag uart address into r6 */
	movhi r6, %hiadj(ALT_LOG_PORT_BASE)
81127c54:	01a04834 	movhi	r6,33056
	addi r6, r6, %lo(ALT_LOG_PORT_BASE)
81127c58:	318c2404 	addi	r6,r6,12432

81127c5c <tx_next_char>:
tx_next_char:
        /* if pointer points to null, return 
         * r4 is the pointer to the str to be printed, set by ALT_LOG_PUTS */
	ldb r7, (r4)
81127c5c:	21c00007 	ldb	r7,0(r4)
	beq r0, r7, end_tx
81127c60:	01c00826 	beq	zero,r7,81127c84 <end_tx>

81127c64 <wait_tx_ready_loop>:

	/* check device transmit ready  */
wait_tx_ready_loop:
        ldwio   r8, ALT_LOG_PRINT_REG_OFFSET(r6)
81127c64:	32000137 	ldwio	r8,4(r6)
        /*UART, ALT_LOG_PRINT_MSK == 0x40
          JTAG UART, ALT_LOG_PRINT_MSK == 0xFFFF0000 */
        andhi   r5, r8, %hi(ALT_LOG_PRINT_MSK)
81127c68:	417fffec 	andhi	r5,r8,65535
        andi    r8, r8, %lo(ALT_LOG_PRINT_MSK)
81127c6c:	4200000c 	andi	r8,r8,0
        or      r5, r5, r8
81127c70:	2a0ab03a 	or	r5,r5,r8
        beq     r5, r0, wait_tx_ready_loop	
81127c74:	283ffb26 	beq	r5,zero,81127c64 <__reset+0xfb107c64>
	/* write char */
	stwio   r7, ALT_LOG_PRINT_TXDATA_REG_OFFSET (r6)		
81127c78:	31c00035 	stwio	r7,0(r6)
	/* advance string pointer */
	addi r4, r4, 1
81127c7c:	21000044 	addi	r4,r4,1
	br tx_next_char
81127c80:	003ff606 	br	81127c5c <__reset+0xfb107c5c>

81127c84 <end_tx>:
end_tx:	
        ret
81127c84:	f800283a 	ret

81127c88 <alt_log_txchar>:



/* Function to put one char onto the UART/JTAG UART txdata register. */
void alt_log_txchar(int c,char *base)
{
81127c88:	defffd04 	addi	sp,sp,-12
81127c8c:	de00012e 	bgeu	sp,et,81127c94 <alt_log_txchar+0xc>
81127c90:	003b68fa 	trap	3
81127c94:	df000215 	stw	fp,8(sp)
81127c98:	df000204 	addi	fp,sp,8
81127c9c:	e13ffe15 	stw	r4,-8(fp)
81127ca0:	e17fff15 	stw	r5,-4(fp)
  /* Wait until the device is ready for a character */
  while((ALT_LOG_PRINT_REG_RD(base) & ALT_LOG_PRINT_MSK) == 0)
81127ca4:	0001883a 	nop
81127ca8:	e0bfff17 	ldw	r2,-4(fp)
81127cac:	10800104 	addi	r2,r2,4
81127cb0:	10800037 	ldwio	r2,0(r2)
81127cb4:	10bfffec 	andhi	r2,r2,65535
81127cb8:	103ffb26 	beq	r2,zero,81127ca8 <__reset+0xfb107ca8>
    ;
  /* And pop the character into the register */
  ALT_LOG_PRINT_TXDATA_WR(base,c);
81127cbc:	e0bfff17 	ldw	r2,-4(fp)
81127cc0:	e0fffe17 	ldw	r3,-8(fp)
81127cc4:	10c00035 	stwio	r3,0(r2)
}
81127cc8:	0001883a 	nop
81127ccc:	e037883a 	mov	sp,fp
81127cd0:	df000017 	ldw	fp,0(sp)
81127cd4:	dec00104 	addi	sp,sp,4
81127cd8:	f800283a 	ret

81127cdc <alt_log_repchar>:


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
81127cdc:	defffb04 	addi	sp,sp,-20
81127ce0:	de00012e 	bgeu	sp,et,81127ce8 <alt_log_repchar+0xc>
81127ce4:	003b68fa 	trap	3
81127ce8:	dfc00415 	stw	ra,16(sp)
81127cec:	df000315 	stw	fp,12(sp)
81127cf0:	df000304 	addi	fp,sp,12
81127cf4:	2005883a 	mov	r2,r4
81127cf8:	e17ffe15 	stw	r5,-8(fp)
81127cfc:	e1bfff15 	stw	r6,-4(fp)
81127d00:	e0bffd05 	stb	r2,-12(fp)
  while(r-- > 0)
81127d04:	00000506 	br	81127d1c <alt_log_repchar+0x40>
    alt_log_txchar(c,(char*) base);
81127d08:	e0bffd07 	ldb	r2,-12(fp)
81127d0c:	e0ffff17 	ldw	r3,-4(fp)
81127d10:	180b883a 	mov	r5,r3
81127d14:	1009883a 	mov	r4,r2
81127d18:	1127c880 	call	81127c88 <alt_log_txchar>


/* Called by alt_log_private_printf to print out characters repeatedly */
void alt_log_repchar(char c,int r,int base)
{
  while(r-- > 0)
81127d1c:	e0bffe17 	ldw	r2,-8(fp)
81127d20:	10ffffc4 	addi	r3,r2,-1
81127d24:	e0fffe15 	stw	r3,-8(fp)
81127d28:	00bff716 	blt	zero,r2,81127d08 <__reset+0xfb107d08>
    alt_log_txchar(c,(char*) base);
}
81127d2c:	0001883a 	nop
81127d30:	e037883a 	mov	sp,fp
81127d34:	dfc00117 	ldw	ra,4(sp)
81127d38:	df000017 	ldw	fp,0(sp)
81127d3c:	dec00204 	addi	sp,sp,8
81127d40:	f800283a 	ret

81127d44 <alt_log_private_printf>:


/* Stripped down printf function */
void alt_log_private_printf(const char *fmt,int base,va_list args)
  {
81127d44:	deffe904 	addi	sp,sp,-92
81127d48:	de00012e 	bgeu	sp,et,81127d50 <alt_log_private_printf+0xc>
81127d4c:	003b68fa 	trap	3
81127d50:	dfc01615 	stw	ra,88(sp)
81127d54:	df001515 	stw	fp,84(sp)
81127d58:	dc001415 	stw	r16,80(sp)
81127d5c:	df001504 	addi	fp,sp,84
81127d60:	e13ffc15 	stw	r4,-16(fp)
81127d64:	e17ffd15 	stw	r5,-12(fp)
81127d68:	e1bffe15 	stw	r6,-8(fp)
  const char *w;
  char c;
  int state;
  int fmtLeadingZero = 0; /* init these all to 0 for -W warnings. */
81127d6c:	e03fed15 	stw	zero,-76(fp)
  int fmtLong = 0;
81127d70:	e03fee15 	stw	zero,-72(fp)
  int fmtBeforeDecimal = 0;
81127d74:	e03fef15 	stw	zero,-68(fp)
  int fmtAfterDecimal = 0;
81127d78:	e03ff015 	stw	zero,-64(fp)
  int fmtBase = 0;
81127d7c:	e03ff115 	stw	zero,-60(fp)
  int fmtSigned = 0;
81127d80:	e03ff215 	stw	zero,-56(fp)
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */
81127d84:	e03ff315 	stw	zero,-52(fp)

  w = fmt;
81127d88:	e0bffc17 	ldw	r2,-16(fp)
81127d8c:	e0bfeb15 	stw	r2,-84(fp)
  state = pfState_chars;
81127d90:	e03fec15 	stw	zero,-80(fp)

  while(0 != (c = *w++))
81127d94:	00014b06 	br	811282c4 <alt_log_private_printf+0x580>
    {
    switch(state)
81127d98:	e0bfec17 	ldw	r2,-80(fp)
81127d9c:	10c00060 	cmpeqi	r3,r2,1
81127da0:	18001b1e 	bne	r3,zero,81127e10 <alt_log_private_printf+0xcc>
81127da4:	10c000a0 	cmpeqi	r3,r2,2
81127da8:	18002d1e 	bne	r3,zero,81127e60 <alt_log_private_printf+0x11c>
81127dac:	10000126 	beq	r2,zero,81127db4 <alt_log_private_printf+0x70>
81127db0:	00014406 	br	811282c4 <alt_log_private_printf+0x580>
      {
      case pfState_chars:
        if(c == '%')
81127db4:	e0bffb07 	ldb	r2,-20(fp)
81127db8:	10800958 	cmpnei	r2,r2,37
81127dbc:	10000e1e 	bne	r2,zero,81127df8 <alt_log_private_printf+0xb4>
        {
          fmtLeadingZero = 0;
81127dc0:	e03fed15 	stw	zero,-76(fp)
          fmtLong = 0;
81127dc4:	e03fee15 	stw	zero,-72(fp)
          fmtBase = 10;
81127dc8:	00800284 	movi	r2,10
81127dcc:	e0bff115 	stw	r2,-60(fp)
          fmtSigned = 1;
81127dd0:	00800044 	movi	r2,1
81127dd4:	e0bff215 	stw	r2,-56(fp)
          fmtCase = 0; /* Only %X sets this. */
81127dd8:	e03ff315 	stw	zero,-52(fp)
          fmtBeforeDecimal = -1;
81127ddc:	00bfffc4 	movi	r2,-1
81127de0:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = -1;
81127de4:	00bfffc4 	movi	r2,-1
81127de8:	e0bff015 	stw	r2,-64(fp)
          state = pfState_firstFmtChar;
81127dec:	00800044 	movi	r2,1
81127df0:	e0bfec15 	stw	r2,-80(fp)
81127df4:	00013306 	br	811282c4 <alt_log_private_printf+0x580>
        }
        else
        {
          alt_log_txchar(c,(char*)base);
81127df8:	e0bffb07 	ldb	r2,-20(fp)
81127dfc:	e0fffd17 	ldw	r3,-12(fp)
81127e00:	180b883a 	mov	r5,r3
81127e04:	1009883a 	mov	r4,r2
81127e08:	1127c880 	call	81127c88 <alt_log_txchar>
        }
        break;
81127e0c:	00012d06 	br	811282c4 <alt_log_private_printf+0x580>

      case pfState_firstFmtChar:
        if(c == '0')
81127e10:	e0bffb07 	ldb	r2,-20(fp)
81127e14:	10800c18 	cmpnei	r2,r2,48
81127e18:	1000051e 	bne	r2,zero,81127e30 <alt_log_private_printf+0xec>
        {
          fmtLeadingZero = 1;
81127e1c:	00800044 	movi	r2,1
81127e20:	e0bfed15 	stw	r2,-76(fp)
          state = pfState_otherFmtChar;
81127e24:	00800084 	movi	r2,2
81127e28:	e0bfec15 	stw	r2,-80(fp)
81127e2c:	00012506 	br	811282c4 <alt_log_private_printf+0x580>
        }
        else if(c == '%')
81127e30:	e0bffb07 	ldb	r2,-20(fp)
81127e34:	10800958 	cmpnei	r2,r2,37
81127e38:	1000071e 	bne	r2,zero,81127e58 <alt_log_private_printf+0x114>
        {
          alt_log_txchar(c,(char*)base);
81127e3c:	e0bffb07 	ldb	r2,-20(fp)
81127e40:	e0fffd17 	ldw	r3,-12(fp)
81127e44:	180b883a 	mov	r5,r3
81127e48:	1009883a 	mov	r4,r2
81127e4c:	1127c880 	call	81127c88 <alt_log_txchar>
          state = pfState_chars;
81127e50:	e03fec15 	stw	zero,-80(fp)
81127e54:	00011b06 	br	811282c4 <alt_log_private_printf+0x580>
        }
        else
        {
          state = pfState_otherFmtChar;
81127e58:	00800084 	movi	r2,2
81127e5c:	e0bfec15 	stw	r2,-80(fp)
        }
        break;

      case pfState_otherFmtChar:
otherFmtChar:
        if(c == '.')
81127e60:	e0bffb07 	ldb	r2,-20(fp)
81127e64:	10800b98 	cmpnei	r2,r2,46
81127e68:	1000021e 	bne	r2,zero,81127e74 <alt_log_private_printf+0x130>
        {
          fmtAfterDecimal = 0;
81127e6c:	e03ff015 	stw	zero,-64(fp)
81127e70:	00011306 	br	811282c0 <alt_log_private_printf+0x57c>
        }
        else if('0' <= c && c <= '9')
81127e74:	e0bffb07 	ldb	r2,-20(fp)
81127e78:	10800c10 	cmplti	r2,r2,48
81127e7c:	10001a1e 	bne	r2,zero,81127ee8 <alt_log_private_printf+0x1a4>
81127e80:	e0bffb07 	ldb	r2,-20(fp)
81127e84:	10800e88 	cmpgei	r2,r2,58
81127e88:	1000171e 	bne	r2,zero,81127ee8 <alt_log_private_printf+0x1a4>
        {
          c -= '0';
81127e8c:	e0bffb03 	ldbu	r2,-20(fp)
81127e90:	10bff404 	addi	r2,r2,-48
81127e94:	e0bffb05 	stb	r2,-20(fp)
          if(fmtAfterDecimal < 0)     /* still before decimal */
81127e98:	e0bff017 	ldw	r2,-64(fp)
81127e9c:	10000c0e 	bge	r2,zero,81127ed0 <alt_log_private_printf+0x18c>
          {
            if(fmtBeforeDecimal < 0)
81127ea0:	e0bfef17 	ldw	r2,-68(fp)
81127ea4:	1000020e 	bge	r2,zero,81127eb0 <alt_log_private_printf+0x16c>
            {
              fmtBeforeDecimal = 0;
81127ea8:	e03fef15 	stw	zero,-68(fp)
81127eac:	00000306 	br	81127ebc <alt_log_private_printf+0x178>
            }
            else
            {
              fmtBeforeDecimal *= 10;
81127eb0:	e0bfef17 	ldw	r2,-68(fp)
81127eb4:	108002a4 	muli	r2,r2,10
81127eb8:	e0bfef15 	stw	r2,-68(fp)
            }
            fmtBeforeDecimal += c;
81127ebc:	e0bffb07 	ldb	r2,-20(fp)
81127ec0:	e0ffef17 	ldw	r3,-68(fp)
81127ec4:	1885883a 	add	r2,r3,r2
81127ec8:	e0bfef15 	stw	r2,-68(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
81127ecc:	0000fc06 	br	811282c0 <alt_log_private_printf+0x57c>
            }
            fmtBeforeDecimal += c;
          }
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
81127ed0:	e0bff017 	ldw	r2,-64(fp)
81127ed4:	10c002a4 	muli	r3,r2,10
81127ed8:	e0bffb07 	ldb	r2,-20(fp)
81127edc:	1885883a 	add	r2,r3,r2
81127ee0:	e0bff015 	stw	r2,-64(fp)
          fmtAfterDecimal = 0;
        }
        else if('0' <= c && c <= '9')
        {
          c -= '0';
          if(fmtAfterDecimal < 0)     /* still before decimal */
81127ee4:	0000f606 	br	811282c0 <alt_log_private_printf+0x57c>
          else
          {
            fmtAfterDecimal = (fmtAfterDecimal * 10) + c;
          }
        }
        else if(c == 'l')
81127ee8:	e0bffb07 	ldb	r2,-20(fp)
81127eec:	10801b18 	cmpnei	r2,r2,108
81127ef0:	1000031e 	bne	r2,zero,81127f00 <alt_log_private_printf+0x1bc>
        {
          fmtLong = 1;
81127ef4:	00800044 	movi	r2,1
81127ef8:	e0bfee15 	stw	r2,-72(fp)
81127efc:	0000f006 	br	811282c0 <alt_log_private_printf+0x57c>
        }
        else                  /* we're up to the letter which determines type */
        {
          switch(c)
81127f00:	e0bffb07 	ldb	r2,-20(fp)
81127f04:	10bfea04 	addi	r2,r2,-88
81127f08:	10c00868 	cmpgeui	r3,r2,33
81127f0c:	1800eb1e 	bne	r3,zero,811282bc <alt_log_private_printf+0x578>
81127f10:	100690ba 	slli	r3,r2,2
81127f14:	00a044b4 	movhi	r2,33042
81127f18:	109fca04 	addi	r2,r2,32552
81127f1c:	1885883a 	add	r2,r3,r2
81127f20:	10800017 	ldw	r2,0(r2)
81127f24:	1000683a 	jmp	r2
81127f28:	811281e8 	cmpgeui	r4,r16,18951
81127f2c:	811282bc 	xorhi	r4,r16,18954
81127f30:	811282bc 	xorhi	r4,r16,18954
81127f34:	811282bc 	xorhi	r4,r16,18954
81127f38:	811282bc 	xorhi	r4,r16,18954
81127f3c:	811282bc 	xorhi	r4,r16,18954
81127f40:	811282bc 	xorhi	r4,r16,18954
81127f44:	811282bc 	xorhi	r4,r16,18954
81127f48:	811282bc 	xorhi	r4,r16,18954
81127f4c:	811282bc 	xorhi	r4,r16,18954
81127f50:	811282bc 	xorhi	r4,r16,18954
81127f54:	81128200 	call	88112820 <__reset+0x20f2820>
81127f58:	81127fac 	andhi	r4,r16,18942
81127f5c:	811282bc 	xorhi	r4,r16,18954
81127f60:	811282bc 	xorhi	r4,r16,18954
81127f64:	811282bc 	xorhi	r4,r16,18954
81127f68:	811282bc 	xorhi	r4,r16,18954
81127f6c:	81127fac 	andhi	r4,r16,18942
81127f70:	811282bc 	xorhi	r4,r16,18954
81127f74:	811282bc 	xorhi	r4,r16,18954
81127f78:	811282bc 	xorhi	r4,r16,18954
81127f7c:	811282bc 	xorhi	r4,r16,18954
81127f80:	811282bc 	xorhi	r4,r16,18954
81127f84:	811281c8 	cmpgei	r4,r16,18951
81127f88:	811282bc 	xorhi	r4,r16,18954
81127f8c:	811282bc 	xorhi	r4,r16,18954
81127f90:	811282bc 	xorhi	r4,r16,18954
81127f94:	8112823c 	xorhi	r4,r16,18952
81127f98:	811282bc 	xorhi	r4,r16,18954
81127f9c:	811281c0 	call	8811281c <__reset+0x20f281c>
81127fa0:	811282bc 	xorhi	r4,r16,18954
81127fa4:	811282bc 	xorhi	r4,r16,18954
81127fa8:	811281d8 	cmpnei	r4,r16,18951
                unsigned long vShrink;  /* used to count digits */
                int sign;
                int digitCount;

                /* Get the value */
                if(fmtLong)
81127fac:	e0bfee17 	ldw	r2,-72(fp)
81127fb0:	10000e26 	beq	r2,zero,81127fec <alt_log_private_printf+0x2a8>
                {
                  if (fmtSigned)
81127fb4:	e0bff217 	ldw	r2,-56(fp)
81127fb8:	10000626 	beq	r2,zero,81127fd4 <alt_log_private_printf+0x290>
                  {
                    v = va_arg(args,long);
81127fbc:	e0bffe17 	ldw	r2,-8(fp)
81127fc0:	10c00104 	addi	r3,r2,4
81127fc4:	e0fffe15 	stw	r3,-8(fp)
81127fc8:	10800017 	ldw	r2,0(r2)
81127fcc:	e0bff415 	stw	r2,-48(fp)
81127fd0:	00001306 	br	81128020 <alt_log_private_printf+0x2dc>
                  }
                  else
                  {
                    v = va_arg(args,unsigned long);
81127fd4:	e0bffe17 	ldw	r2,-8(fp)
81127fd8:	10c00104 	addi	r3,r2,4
81127fdc:	e0fffe15 	stw	r3,-8(fp)
81127fe0:	10800017 	ldw	r2,0(r2)
81127fe4:	e0bff415 	stw	r2,-48(fp)
81127fe8:	00000d06 	br	81128020 <alt_log_private_printf+0x2dc>
                  }
                }
                else
                {
                  if (fmtSigned)
81127fec:	e0bff217 	ldw	r2,-56(fp)
81127ff0:	10000626 	beq	r2,zero,8112800c <alt_log_private_printf+0x2c8>
                  {
                    v = va_arg(args,int);
81127ff4:	e0bffe17 	ldw	r2,-8(fp)
81127ff8:	10c00104 	addi	r3,r2,4
81127ffc:	e0fffe15 	stw	r3,-8(fp)
81128000:	10800017 	ldw	r2,0(r2)
81128004:	e0bff415 	stw	r2,-48(fp)
81128008:	00000506 	br	81128020 <alt_log_private_printf+0x2dc>
                  }
                  else
                  {
                    v = va_arg(args,unsigned int);
8112800c:	e0bffe17 	ldw	r2,-8(fp)
81128010:	10c00104 	addi	r3,r2,4
81128014:	e0fffe15 	stw	r3,-8(fp)
81128018:	10800017 	ldw	r2,0(r2)
8112801c:	e0bff415 	stw	r2,-48(fp)
                  }
                }

                /* Strip sign */
                sign = 0;
81128020:	e03ff715 	stw	zero,-36(fp)
                  /* (assumes sign bit is #31) */
                if( fmtSigned && (v & (0x80000000)) )
81128024:	e0bff217 	ldw	r2,-56(fp)
81128028:	10000726 	beq	r2,zero,81128048 <alt_log_private_printf+0x304>
8112802c:	e0bff417 	ldw	r2,-48(fp)
81128030:	1000050e 	bge	r2,zero,81128048 <alt_log_private_printf+0x304>
                  {
                  v = ~v + 1;
81128034:	e0bff417 	ldw	r2,-48(fp)
81128038:	0085c83a 	sub	r2,zero,r2
8112803c:	e0bff415 	stw	r2,-48(fp)
                  sign = 1;
81128040:	00800044 	movi	r2,1
81128044:	e0bff715 	stw	r2,-36(fp)
                  }

                /* Count digits, and get largest place value */
                vShrink = v;
81128048:	e0bff417 	ldw	r2,-48(fp)
8112804c:	e0bff615 	stw	r2,-40(fp)
                p = 1;
81128050:	00800044 	movi	r2,1
81128054:	e0bff515 	stw	r2,-44(fp)
                digitCount = 1;
81128058:	00800044 	movi	r2,1
8112805c:	e0bff815 	stw	r2,-32(fp)
                while( (vShrink = vShrink / fmtBase) > 0 )
81128060:	00000706 	br	81128080 <alt_log_private_printf+0x33c>
                  {
                  digitCount++;
81128064:	e0bff817 	ldw	r2,-32(fp)
81128068:	10800044 	addi	r2,r2,1
8112806c:	e0bff815 	stw	r2,-32(fp)
                  p *= fmtBase;
81128070:	e0bff117 	ldw	r2,-60(fp)
81128074:	e0fff517 	ldw	r3,-44(fp)
81128078:	1885383a 	mul	r2,r3,r2
8112807c:	e0bff515 	stw	r2,-44(fp)

                /* Count digits, and get largest place value */
                vShrink = v;
                p = 1;
                digitCount = 1;
                while( (vShrink = vShrink / fmtBase) > 0 )
81128080:	e0bff117 	ldw	r2,-60(fp)
81128084:	e0fff617 	ldw	r3,-40(fp)
81128088:	1885203a 	divu	r2,r3,r2
8112808c:	e0bff615 	stw	r2,-40(fp)
81128090:	e0bff617 	ldw	r2,-40(fp)
81128094:	103ff31e 	bne	r2,zero,81128064 <__reset+0xfb108064>
                  digitCount++;
                  p *= fmtBase;
                  }

                /* Print leading characters & sign */
                fmtBeforeDecimal -= digitCount;
81128098:	e0ffef17 	ldw	r3,-68(fp)
8112809c:	e0bff817 	ldw	r2,-32(fp)
811280a0:	1885c83a 	sub	r2,r3,r2
811280a4:	e0bfef15 	stw	r2,-68(fp)
                if(fmtLeadingZero)
811280a8:	e0bfed17 	ldw	r2,-76(fp)
811280ac:	10000e26 	beq	r2,zero,811280e8 <alt_log_private_printf+0x3a4>
                  {
                  if(sign)
811280b0:	e0bff717 	ldw	r2,-36(fp)
811280b4:	10000726 	beq	r2,zero,811280d4 <alt_log_private_printf+0x390>
                    {
                    alt_log_txchar('-',(char*)base);
811280b8:	e0bffd17 	ldw	r2,-12(fp)
811280bc:	100b883a 	mov	r5,r2
811280c0:	01000b44 	movi	r4,45
811280c4:	1127c880 	call	81127c88 <alt_log_txchar>
                    fmtBeforeDecimal--;
811280c8:	e0bfef17 	ldw	r2,-68(fp)
811280cc:	10bfffc4 	addi	r2,r2,-1
811280d0:	e0bfef15 	stw	r2,-68(fp)
                    }
                  alt_log_repchar('0',fmtBeforeDecimal,base);
811280d4:	e1bffd17 	ldw	r6,-12(fp)
811280d8:	e17fef17 	ldw	r5,-68(fp)
811280dc:	01000c04 	movi	r4,48
811280e0:	1127cdc0 	call	81127cdc <alt_log_repchar>
811280e4:	00003206 	br	811281b0 <alt_log_private_printf+0x46c>
                  }
                else
                  {
                    if(sign)
811280e8:	e0bff717 	ldw	r2,-36(fp)
811280ec:	10000326 	beq	r2,zero,811280fc <alt_log_private_printf+0x3b8>
                    {
                      fmtBeforeDecimal--;
811280f0:	e0bfef17 	ldw	r2,-68(fp)
811280f4:	10bfffc4 	addi	r2,r2,-1
811280f8:	e0bfef15 	stw	r2,-68(fp)
                    }
                    alt_log_repchar(' ',fmtBeforeDecimal,base);
811280fc:	e1bffd17 	ldw	r6,-12(fp)
81128100:	e17fef17 	ldw	r5,-68(fp)
81128104:	01000804 	movi	r4,32
81128108:	1127cdc0 	call	81127cdc <alt_log_repchar>
                    if(sign)
8112810c:	e0bff717 	ldw	r2,-36(fp)
81128110:	10002726 	beq	r2,zero,811281b0 <alt_log_private_printf+0x46c>
                    {
                      alt_log_txchar('-',(char*)base);
81128114:	e0bffd17 	ldw	r2,-12(fp)
81128118:	100b883a 	mov	r5,r2
8112811c:	01000b44 	movi	r4,45
81128120:	1127c880 	call	81127c88 <alt_log_txchar>
                    }
                  }

                /* Print numbery parts */
                while(p)
81128124:	00002206 	br	811281b0 <alt_log_private_printf+0x46c>
                  {
                  unsigned char d;

                  d = v / p;
81128128:	e0fff417 	ldw	r3,-48(fp)
8112812c:	e0bff517 	ldw	r2,-44(fp)
81128130:	1885203a 	divu	r2,r3,r2
81128134:	e0bff905 	stb	r2,-28(fp)
                  d += '0';
81128138:	e0bff903 	ldbu	r2,-28(fp)
8112813c:	10800c04 	addi	r2,r2,48
81128140:	e0bff905 	stb	r2,-28(fp)
                  if(d > '9')
81128144:	e0bff903 	ldbu	r2,-28(fp)
81128148:	10800eb0 	cmpltui	r2,r2,58
8112814c:	1000081e 	bne	r2,zero,81128170 <alt_log_private_printf+0x42c>
                  {
                    d += (fmtCase ? 'A' : 'a') - '0' - 10;
81128150:	e0bff317 	ldw	r2,-52(fp)
81128154:	10000226 	beq	r2,zero,81128160 <alt_log_private_printf+0x41c>
81128158:	008001c4 	movi	r2,7
8112815c:	00000106 	br	81128164 <alt_log_private_printf+0x420>
81128160:	008009c4 	movi	r2,39
81128164:	e0fff903 	ldbu	r3,-28(fp)
81128168:	10c5883a 	add	r2,r2,r3
8112816c:	e0bff905 	stb	r2,-28(fp)
                  }
                  alt_log_txchar(d,(char*)base);
81128170:	e0bff903 	ldbu	r2,-28(fp)
81128174:	e0fffd17 	ldw	r3,-12(fp)
81128178:	180b883a 	mov	r5,r3
8112817c:	1009883a 	mov	r4,r2
81128180:	1127c880 	call	81127c88 <alt_log_txchar>

                  v = v % p;
81128184:	e0bff417 	ldw	r2,-48(fp)
81128188:	e0fff517 	ldw	r3,-44(fp)
8112818c:	10c9203a 	divu	r4,r2,r3
81128190:	e0fff517 	ldw	r3,-44(fp)
81128194:	20c7383a 	mul	r3,r4,r3
81128198:	10c5c83a 	sub	r2,r2,r3
8112819c:	e0bff415 	stw	r2,-48(fp)
                  p = p / fmtBase;
811281a0:	e0bff117 	ldw	r2,-60(fp)
811281a4:	e0fff517 	ldw	r3,-44(fp)
811281a8:	1885203a 	divu	r2,r3,r2
811281ac:	e0bff515 	stw	r2,-44(fp)
                      alt_log_txchar('-',(char*)base);
                    }
                  }

                /* Print numbery parts */
                while(p)
811281b0:	e0bff517 	ldw	r2,-44(fp)
811281b4:	103fdc1e 	bne	r2,zero,81128128 <__reset+0xfb108128>
                  v = v % p;
                  p = p / fmtBase;
                  }
                }

              state = pfState_chars;
811281b8:	e03fec15 	stw	zero,-80(fp)
              break;
811281bc:	00003f06 	br	811282bc <alt_log_private_printf+0x578>

            case 'u':
              fmtSigned = 0;
811281c0:	e03ff215 	stw	zero,-56(fp)
              goto doIntegerPrint;
811281c4:	003f7906 	br	81127fac <__reset+0xfb107fac>
            case 'o':
              fmtSigned = 0;
811281c8:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 8;
811281cc:	00800204 	movi	r2,8
811281d0:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
811281d4:	003f7506 	br	81127fac <__reset+0xfb107fac>
            case 'x':
              fmtSigned = 0;
811281d8:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
811281dc:	00800404 	movi	r2,16
811281e0:	e0bff115 	stw	r2,-60(fp)
              goto doIntegerPrint;
811281e4:	003f7106 	br	81127fac <__reset+0xfb107fac>
            case 'X':
              fmtSigned = 0;
811281e8:	e03ff215 	stw	zero,-56(fp)
              fmtBase = 16;
811281ec:	00800404 	movi	r2,16
811281f0:	e0bff115 	stw	r2,-60(fp)
              fmtCase = 1;
811281f4:	00800044 	movi	r2,1
811281f8:	e0bff315 	stw	r2,-52(fp)
              goto doIntegerPrint;
811281fc:	003f6b06 	br	81127fac <__reset+0xfb107fac>

            case 'c':
              alt_log_repchar(' ',fmtBeforeDecimal-1,base);
81128200:	e0bfef17 	ldw	r2,-68(fp)
81128204:	10bfffc4 	addi	r2,r2,-1
81128208:	e1bffd17 	ldw	r6,-12(fp)
8112820c:	100b883a 	mov	r5,r2
81128210:	01000804 	movi	r4,32
81128214:	1127cdc0 	call	81127cdc <alt_log_repchar>
              alt_log_txchar(va_arg(args,int),(char*)base);
81128218:	e0bffe17 	ldw	r2,-8(fp)
8112821c:	10c00104 	addi	r3,r2,4
81128220:	e0fffe15 	stw	r3,-8(fp)
81128224:	10800017 	ldw	r2,0(r2)
81128228:	e0fffd17 	ldw	r3,-12(fp)
8112822c:	180b883a 	mov	r5,r3
81128230:	1009883a 	mov	r4,r2
81128234:	1127c880 	call	81127c88 <alt_log_txchar>
              break;
81128238:	00002006 	br	811282bc <alt_log_private_printf+0x578>

            case 's':
                {
                char *s;

                s = va_arg(args,char *);
8112823c:	e0bffe17 	ldw	r2,-8(fp)
81128240:	10c00104 	addi	r3,r2,4
81128244:	e0fffe15 	stw	r3,-8(fp)
81128248:	10800017 	ldw	r2,0(r2)
8112824c:	e0bffa15 	stw	r2,-24(fp)
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);
81128250:	e43fef17 	ldw	r16,-68(fp)
81128254:	e13ffa17 	ldw	r4,-24(fp)
81128258:	11139780 	call	81113978 <strlen>
8112825c:	8085c83a 	sub	r2,r16,r2
81128260:	e1bffd17 	ldw	r6,-12(fp)
81128264:	100b883a 	mov	r5,r2
81128268:	01000804 	movi	r4,32
8112826c:	1127cdc0 	call	81127cdc <alt_log_repchar>

                while(*s)
81128270:	00000b06 	br	811282a0 <alt_log_private_printf+0x55c>
                  alt_log_txchar(*s++,(char*)base);
81128274:	e0bffa17 	ldw	r2,-24(fp)
81128278:	10c00044 	addi	r3,r2,1
8112827c:	e0fffa15 	stw	r3,-24(fp)
81128280:	10800003 	ldbu	r2,0(r2)
81128284:	10803fcc 	andi	r2,r2,255
81128288:	1080201c 	xori	r2,r2,128
8112828c:	10bfe004 	addi	r2,r2,-128
81128290:	e0fffd17 	ldw	r3,-12(fp)
81128294:	180b883a 	mov	r5,r3
81128298:	1009883a 	mov	r4,r2
8112829c:	1127c880 	call	81127c88 <alt_log_txchar>
                char *s;

                s = va_arg(args,char *);
                alt_log_repchar(' ',fmtBeforeDecimal-strlen(s),base);

                while(*s)
811282a0:	e0bffa17 	ldw	r2,-24(fp)
811282a4:	10800003 	ldbu	r2,0(r2)
811282a8:	10803fcc 	andi	r2,r2,255
811282ac:	1080201c 	xori	r2,r2,128
811282b0:	10bfe004 	addi	r2,r2,-128
811282b4:	103fef1e 	bne	r2,zero,81128274 <__reset+0xfb108274>
                  alt_log_txchar(*s++,(char*)base);
                }
              break;
811282b8:	0001883a 	nop
            } /* switch last letter of fmt */
          state=pfState_chars;
811282bc:	e03fec15 	stw	zero,-80(fp)
          }
        break;
811282c0:	0001883a 	nop
  int fmtCase = 0; /* For hex format, if 1, A-F, else a-f. */

  w = fmt;
  state = pfState_chars;

  while(0 != (c = *w++))
811282c4:	e0bfeb17 	ldw	r2,-84(fp)
811282c8:	10c00044 	addi	r3,r2,1
811282cc:	e0ffeb15 	stw	r3,-84(fp)
811282d0:	10800003 	ldbu	r2,0(r2)
811282d4:	e0bffb05 	stb	r2,-20(fp)
811282d8:	e0bffb07 	ldb	r2,-20(fp)
811282dc:	103eae1e 	bne	r2,zero,81127d98 <__reset+0xfb107d98>
          state=pfState_chars;
          }
        break;
      } /* switch */
    } /* while chars left */
  } /* printf */
811282e0:	0001883a 	nop
811282e4:	e6ffff04 	addi	sp,fp,-4
811282e8:	dfc00217 	ldw	ra,8(sp)
811282ec:	df000117 	ldw	fp,4(sp)
811282f0:	dc000017 	ldw	r16,0(sp)
811282f4:	dec00304 	addi	sp,sp,12
811282f8:	f800283a 	ret

811282fc <alt_log_printf_proc>:

/* Main logging printf function */
int alt_log_printf_proc(const char *fmt, ... )
{
811282fc:	defff904 	addi	sp,sp,-28
81128300:	de00012e 	bgeu	sp,et,81128308 <alt_log_printf_proc+0xc>
81128304:	003b68fa 	trap	3
81128308:	dfc00315 	stw	ra,12(sp)
8112830c:	df000215 	stw	fp,8(sp)
81128310:	df000204 	addi	fp,sp,8
81128314:	e13fff15 	stw	r4,-4(fp)
81128318:	e1400215 	stw	r5,8(fp)
8112831c:	e1800315 	stw	r6,12(fp)
81128320:	e1c00415 	stw	r7,16(fp)
    va_list args;

    va_start (args, fmt);
81128324:	e0800204 	addi	r2,fp,8
81128328:	e0bffe15 	stw	r2,-8(fp)
    alt_log_private_printf(fmt,ALT_LOG_PORT_BASE,args);
8112832c:	e0bffe17 	ldw	r2,-8(fp)
81128330:	100d883a 	mov	r6,r2
81128334:	01604834 	movhi	r5,33056
81128338:	294c2404 	addi	r5,r5,12432
8112833c:	e13fff17 	ldw	r4,-4(fp)
81128340:	1127d440 	call	81127d44 <alt_log_private_printf>
    return (0);
81128344:	0005883a 	mov	r2,zero
}
81128348:	e037883a 	mov	sp,fp
8112834c:	dfc00117 	ldw	ra,4(sp)
81128350:	df000017 	ldw	fp,0(sp)
81128354:	dec00504 	addi	sp,sp,20
81128358:	f800283a 	ret

8112835c <altera_avalon_jtag_uart_report_log>:
 * This function, when turned on, prints out the status
 * of the JTAG UART Control register, every ALT_LOG_JTAG_UART_TICKS.
 * If the flag is off, the alarm should never be registered, and this
 * function should never run */
alt_u32 altera_avalon_jtag_uart_report_log(void * context)
{
8112835c:	defff904 	addi	sp,sp,-28
81128360:	de00012e 	bgeu	sp,et,81128368 <altera_avalon_jtag_uart_report_log+0xc>
81128364:	003b68fa 	trap	3
81128368:	dfc00615 	stw	ra,24(sp)
8112836c:	df000515 	stw	fp,20(sp)
81128370:	dc400415 	stw	r17,16(sp)
81128374:	dc000315 	stw	r16,12(sp)
81128378:	df000504 	addi	fp,sp,20
8112837c:	e13ffd15 	stw	r4,-12(fp)
    if (alt_log_jtag_uart_alarm_on_flag) {
81128380:	d0a06a83 	ldbu	r2,-32342(gp)
81128384:	10803fcc 	andi	r2,r2,255
81128388:	10001426 	beq	r2,zero,811283dc <altera_avalon_jtag_uart_report_log+0x80>
    altera_avalon_jtag_uart_state* dev = (altera_avalon_jtag_uart_state*) context;
8112838c:	e0bffd17 	ldw	r2,-12(fp)
81128390:	e0bffb15 	stw	r2,-20(fp)
        const char* header="JTAG Alarm:";
81128394:	00a04534 	movhi	r2,33044
81128398:	10805504 	addi	r2,r2,340
8112839c:	e0bffc15 	stw	r2,-16(fp)
        alt_log_jtag_uart_print_control_reg(dev, dev->base, header);
811283a0:	e0bffb17 	ldw	r2,-20(fp)
811283a4:	10800017 	ldw	r2,0(r2)
811283a8:	e1bffc17 	ldw	r6,-16(fp)
811283ac:	100b883a 	mov	r5,r2
811283b0:	e13ffb17 	ldw	r4,-20(fp)
811283b4:	11283fc0 	call	811283fc <alt_log_jtag_uart_print_control_reg>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811283b8:	d0e07117 	ldw	r3,-32316(gp)
        return ALT_LOG_JTAG_UART_TICKS;
811283bc:	00b33374 	movhi	r2,52429
811283c0:	10b33344 	addi	r2,r2,-13107
811283c4:	1888383a 	mulxuu	r4,r3,r2
811283c8:	1885383a 	mul	r2,r3,r2
811283cc:	1021883a 	mov	r16,r2
811283d0:	2023883a 	mov	r17,r4
811283d4:	8804d0fa 	srli	r2,r17,3
811283d8:	00000106 	br	811283e0 <altera_avalon_jtag_uart_report_log+0x84>
    }
    else 
    {  
        /* If flag is not on, return 0 to disable future alarms.
        * Should never be here, alarm should not be enabled at all. */
        return 0;
811283dc:	0005883a 	mov	r2,zero
    }
}
811283e0:	e6fffe04 	addi	sp,fp,-8
811283e4:	dfc00317 	ldw	ra,12(sp)
811283e8:	df000217 	ldw	fp,8(sp)
811283ec:	dc400117 	ldw	r17,4(sp)
811283f0:	dc000017 	ldw	r16,0(sp)
811283f4:	dec00404 	addi	sp,sp,16
811283f8:	f800283a 	ret

811283fc <alt_log_jtag_uart_print_control_reg>:

void alt_log_jtag_uart_print_control_reg(altera_avalon_jtag_uart_state* dev, int base, const char* header)
{
811283fc:	deffef04 	addi	sp,sp,-68
81128400:	de00012e 	bgeu	sp,et,81128408 <alt_log_jtag_uart_print_control_reg+0xc>
81128404:	003b68fa 	trap	3
81128408:	dfc01015 	stw	ra,64(sp)
8112840c:	df000f15 	stw	fp,60(sp)
81128410:	df000f04 	addi	fp,sp,60
81128414:	e13ffd15 	stw	r4,-12(fp)
81128418:	e17ffe15 	stw	r5,-8(fp)
8112841c:	e1bfff15 	stw	r6,-4(fp)
     unsigned int control, space, ac, wi, ri, we, re;
     control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81128420:	e0bffe17 	ldw	r2,-8(fp)
81128424:	10800104 	addi	r2,r2,4
81128428:	10800037 	ldwio	r2,0(r2)
8112842c:	e0bff615 	stw	r2,-40(fp)
     space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >>
81128430:	e0bff617 	ldw	r2,-40(fp)
81128434:	1004d43a 	srli	r2,r2,16
81128438:	e0bff715 	stw	r2,-36(fp)
             ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     we= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK) >>
8112843c:	e0bff617 	ldw	r2,-40(fp)
81128440:	1080008c 	andi	r2,r2,2
81128444:	1004d07a 	srli	r2,r2,1
81128448:	e0bff815 	stw	r2,-32(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WE_OFST;
     re= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK) >>
8112844c:	e0bff617 	ldw	r2,-40(fp)
81128450:	1080004c 	andi	r2,r2,1
81128454:	e0bff915 	stw	r2,-28(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RE_OFST;
     ri= (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK) >>
81128458:	e0bff617 	ldw	r2,-40(fp)
8112845c:	1080400c 	andi	r2,r2,256
81128460:	1004d23a 	srli	r2,r2,8
81128464:	e0bffa15 	stw	r2,-24(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_RI_OFST;
     wi= (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK) >>
81128468:	e0bff617 	ldw	r2,-40(fp)
8112846c:	1080800c 	andi	r2,r2,512
81128470:	1004d27a 	srli	r2,r2,9
81128474:	e0bffb15 	stw	r2,-20(fp)
         ALTERA_AVALON_JTAG_UART_CONTROL_WI_OFST;
     ac= (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK) >>
81128478:	e0bff617 	ldw	r2,-40(fp)
8112847c:	1081000c 	andi	r2,r2,1024
81128480:	1004d2ba 	srli	r2,r2,10
81128484:	e0bffc15 	stw	r2,-16(fp)
#ifdef ALTERA_AVALON_JTAG_UART_SMALL
    ALT_LOG_PRINTF(
     "%s HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,space,ac,wi,ri,we,re);
#else
    ALT_LOG_PRINTF(
81128488:	e0bffd17 	ldw	r2,-12(fp)
8112848c:	10c01017 	ldw	r3,64(r2)
81128490:	e0bffd17 	ldw	r2,-12(fp)
81128494:	10800f17 	ldw	r2,60(r2)
81128498:	1887c83a 	sub	r3,r3,r2
8112849c:	e0bff917 	ldw	r2,-28(fp)
811284a0:	d8800415 	stw	r2,16(sp)
811284a4:	e0bff817 	ldw	r2,-32(fp)
811284a8:	d8800315 	stw	r2,12(sp)
811284ac:	e0bffa17 	ldw	r2,-24(fp)
811284b0:	d8800215 	stw	r2,8(sp)
811284b4:	e0bffb17 	ldw	r2,-20(fp)
811284b8:	d8800115 	stw	r2,4(sp)
811284bc:	e0bffc17 	ldw	r2,-16(fp)
811284c0:	d8800015 	stw	r2,0(sp)
811284c4:	e1fff717 	ldw	r7,-36(fp)
811284c8:	180d883a 	mov	r6,r3
811284cc:	e17fff17 	ldw	r5,-4(fp)
811284d0:	01204534 	movhi	r4,33044
811284d4:	21005804 	addi	r4,r4,352
811284d8:	11282fc0 	call	811282fc <alt_log_printf_proc>
     "%s SW CirBuf = %d, HW FIFO wspace=%d AC=%d WI=%d RI=%d WE=%d RE=%d\r\n",
         header,(dev->tx_out-dev->tx_in),space,ac,wi,ri,we,re);
#endif   
         
     return;
811284dc:	0001883a 	nop

}
811284e0:	e037883a 	mov	sp,fp
811284e4:	dfc00117 	ldw	ra,4(sp)
811284e8:	df000017 	ldw	fp,0(sp)
811284ec:	dec00204 	addi	sp,sp,8
811284f0:	f800283a 	ret

811284f4 <alt_log_jtag_uart_startup_info>:
/* In altera_avalon_jtag_uart.c
 * Same output as the alarm function above, but this is called in the driver
 * init function.  Hence, it gives the status of the JTAG UART control register
 * right at the initialization of the driver */ 
void alt_log_jtag_uart_startup_info(altera_avalon_jtag_uart_state* dev, int base)
{
811284f4:	defffb04 	addi	sp,sp,-20
811284f8:	de00012e 	bgeu	sp,et,81128500 <alt_log_jtag_uart_startup_info+0xc>
811284fc:	003b68fa 	trap	3
81128500:	dfc00415 	stw	ra,16(sp)
81128504:	df000315 	stw	fp,12(sp)
81128508:	df000304 	addi	fp,sp,12
8112850c:	e13ffe15 	stw	r4,-8(fp)
81128510:	e17fff15 	stw	r5,-4(fp)
     const char* header="JTAG Startup Info:";
81128514:	00a04534 	movhi	r2,33044
81128518:	10806a04 	addi	r2,r2,424
8112851c:	e0bffd15 	stw	r2,-12(fp)
     alt_log_jtag_uart_print_control_reg(dev, base, header);
81128520:	e1bffd17 	ldw	r6,-12(fp)
81128524:	e17fff17 	ldw	r5,-4(fp)
81128528:	e13ffe17 	ldw	r4,-8(fp)
8112852c:	11283fc0 	call	811283fc <alt_log_jtag_uart_print_control_reg>
     return;
81128530:	0001883a 	nop
}
81128534:	e037883a 	mov	sp,fp
81128538:	dfc00117 	ldw	ra,4(sp)
8112853c:	df000017 	ldw	fp,0(sp)
81128540:	dec00204 	addi	sp,sp,8
81128544:	f800283a 	ret

81128548 <alt_log_jtag_uart_isr_proc>:

/* In altera_avalon_jtag_uart.c
 * When turned on, this function will print out the status of the jtag uart
 * control register every time there is a jtag uart "almost-empty" interrupt. */
void alt_log_jtag_uart_isr_proc(int base, altera_avalon_jtag_uart_state* dev) 
{
81128548:	defffb04 	addi	sp,sp,-20
8112854c:	de00012e 	bgeu	sp,et,81128554 <alt_log_jtag_uart_isr_proc+0xc>
81128550:	003b68fa 	trap	3
81128554:	dfc00415 	stw	ra,16(sp)
81128558:	df000315 	stw	fp,12(sp)
8112855c:	df000304 	addi	fp,sp,12
81128560:	e13ffe15 	stw	r4,-8(fp)
81128564:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_jtag_uart_isr_on_flag) {
81128568:	d0a06ac3 	ldbu	r2,-32341(gp)
8112856c:	10803fcc 	andi	r2,r2,255
81128570:	10000826 	beq	r2,zero,81128594 <alt_log_jtag_uart_isr_proc+0x4c>
        const char* header="JTAG IRQ:";
81128574:	00a04534 	movhi	r2,33044
81128578:	10806f04 	addi	r2,r2,444
8112857c:	e0bffd15 	stw	r2,-12(fp)
        alt_log_jtag_uart_print_control_reg(dev, base, header);
81128580:	e1bffd17 	ldw	r6,-12(fp)
81128584:	e17ffe17 	ldw	r5,-8(fp)
81128588:	e13fff17 	ldw	r4,-4(fp)
8112858c:	11283fc0 	call	811283fc <alt_log_jtag_uart_print_control_reg>
    }
    return;
81128590:	0001883a 	nop
81128594:	0001883a 	nop
}
81128598:	e037883a 	mov	sp,fp
8112859c:	dfc00117 	ldw	ra,4(sp)
811285a0:	df000017 	ldw	fp,0(sp)
811285a4:	dec00204 	addi	sp,sp,8
811285a8:	f800283a 	ret

811285ac <alt_log_write>:
 * When the alt_log_write_on_flag is turned on, this function gets called
 * every time alt_write gets called.  The first 
 * ALT_LOG_WRITE_ECHO_LEN characters of every printf command (or any command
 * that eventually calls write()) gets echoed to the alt_log output. */
void alt_log_write(const void *ptr, size_t len)
{
811285ac:	defffa04 	addi	sp,sp,-24
811285b0:	de00012e 	bgeu	sp,et,811285b8 <alt_log_write+0xc>
811285b4:	003b68fa 	trap	3
811285b8:	dfc00515 	stw	ra,20(sp)
811285bc:	df000415 	stw	fp,16(sp)
811285c0:	df000404 	addi	fp,sp,16
811285c4:	e13ffe15 	stw	r4,-8(fp)
811285c8:	e17fff15 	stw	r5,-4(fp)
    if (alt_log_write_on_flag) {
811285cc:	d0a06a03 	ldbu	r2,-32344(gp)
811285d0:	10803fcc 	andi	r2,r2,255
811285d4:	10004026 	beq	r2,zero,811286d8 <alt_log_write+0x12c>
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;
811285d8:	e0bfff17 	ldw	r2,-4(fp)
811285dc:	10c00430 	cmpltui	r3,r2,16
811285e0:	1800011e 	bne	r3,zero,811285e8 <alt_log_write+0x3c>
811285e4:	008003c4 	movi	r2,15
811285e8:	e0bffd15 	stw	r2,-12(fp)

        if (length < 2) return;
811285ec:	e0bffd17 	ldw	r2,-12(fp)
811285f0:	10800088 	cmpgei	r2,r2,2
811285f4:	10003726 	beq	r2,zero,811286d4 <alt_log_write+0x128>

        strncpy (alt_log_write_buf,ptr,length);
811285f8:	e0bffd17 	ldw	r2,-12(fp)
811285fc:	100d883a 	mov	r6,r2
81128600:	e17ffe17 	ldw	r5,-8(fp)
81128604:	01204574 	movhi	r4,33045
81128608:	212f0204 	addi	r4,r4,-17400
8112860c:	113c7200 	call	8113c720 <strncpy>
    alt_log_write_buf[length-1]='\n';
81128610:	e0bffd17 	ldw	r2,-12(fp)
81128614:	10ffffc4 	addi	r3,r2,-1
81128618:	00a04574 	movhi	r2,33045
8112861c:	10af0204 	addi	r2,r2,-17400
81128620:	10c5883a 	add	r2,r2,r3
81128624:	00c00284 	movi	r3,10
81128628:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
8112862c:	00a04574 	movhi	r2,33045
81128630:	10af0204 	addi	r2,r2,-17400
81128634:	e0fffd17 	ldw	r3,-12(fp)
81128638:	10c5883a 	add	r2,r2,r3
8112863c:	00c00344 	movi	r3,13
81128640:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length+1]='\0';
81128644:	e0bffd17 	ldw	r2,-12(fp)
81128648:	10c00044 	addi	r3,r2,1
8112864c:	00a04574 	movhi	r2,33045
81128650:	10af0204 	addi	r2,r2,-17400
81128654:	10c5883a 	add	r2,r2,r3
81128658:	10000005 	stb	zero,0(r2)

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
8112865c:	e03ffc15 	stw	zero,-16(fp)
81128660:	00001306 	br	811286b0 <alt_log_write+0x104>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
81128664:	00a04574 	movhi	r2,33045
81128668:	10af0204 	addi	r2,r2,-17400
8112866c:	e0fffc17 	ldw	r3,-16(fp)
81128670:	10c5883a 	add	r2,r2,r3
81128674:	10800003 	ldbu	r2,0(r2)
81128678:	10803fcc 	andi	r2,r2,255
8112867c:	1080201c 	xori	r2,r2,128
81128680:	10bfe004 	addi	r2,r2,-128
81128684:	10800118 	cmpnei	r2,r2,4
81128688:	1000061e 	bne	r2,zero,811286a4 <alt_log_write+0xf8>
            alt_log_write_buf[temp_cnt]='D';
8112868c:	00a04574 	movhi	r2,33045
81128690:	10af0204 	addi	r2,r2,-17400
81128694:	e0fffc17 	ldw	r3,-16(fp)
81128698:	10c5883a 	add	r2,r2,r3
8112869c:	00c01104 	movi	r3,68
811286a0:	10c00005 	stb	r3,0(r2)
    alt_log_write_buf[length]='\r';
    alt_log_write_buf[length+1]='\0';

    /* Escape Ctrl-D's. If the Ctrl-D gets sent it might kill the terminal
         * connection of alt_log. It will get replaced by 'D'. */
        for (temp_cnt=0;temp_cnt < length; temp_cnt++) {
811286a4:	e0bffc17 	ldw	r2,-16(fp)
811286a8:	10800044 	addi	r2,r2,1
811286ac:	e0bffc15 	stw	r2,-16(fp)
811286b0:	e0fffc17 	ldw	r3,-16(fp)
811286b4:	e0bffd17 	ldw	r2,-12(fp)
811286b8:	18bfea16 	blt	r3,r2,81128664 <__reset+0xfb108664>
        if (alt_log_write_buf[temp_cnt]== 0x4) {
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
811286bc:	01604574 	movhi	r5,33045
811286c0:	296f0204 	addi	r5,r5,-17400
811286c4:	01204534 	movhi	r4,33044
811286c8:	21007204 	addi	r4,r4,456
811286cc:	11282fc0 	call	811282fc <alt_log_printf_proc>
811286d0:	00000106 	br	811286d8 <alt_log_write+0x12c>
{
    if (alt_log_write_on_flag) {
    int temp_cnt;
        int length=(ALT_LOG_WRITE_ECHO_LEN>len) ? len : ALT_LOG_WRITE_ECHO_LEN;

        if (length < 2) return;
811286d4:	0001883a 	nop
            alt_log_write_buf[temp_cnt]='D';
        }
    }
        ALT_LOG_PRINTF("Write Echo: %s",alt_log_write_buf);
    }
}
811286d8:	e037883a 	mov	sp,fp
811286dc:	dfc00117 	ldw	ra,4(sp)
811286e0:	df000017 	ldw	fp,0(sp)
811286e4:	dec00204 	addi	sp,sp,8
811286e8:	f800283a 	ret

811286ec <alt_log_system_clock>:

/* In altera_avalon_timer_sc
 * This function prints out a system clock is alive message
 * every ALT_LOG_SYS_CLK_INTERVAL (in ticks).  */
void alt_log_system_clock()
{
811286ec:	defffe04 	addi	sp,sp,-8
811286f0:	de00012e 	bgeu	sp,et,811286f8 <alt_log_system_clock+0xc>
811286f4:	003b68fa 	trap	3
811286f8:	dfc00115 	stw	ra,4(sp)
811286fc:	df000015 	stw	fp,0(sp)
81128700:	d839883a 	mov	fp,sp
    if (alt_log_sys_clk_on_flag) {
81128704:	d0a06a43 	ldbu	r2,-32343(gp)
81128708:	10803fcc 	andi	r2,r2,255
8112870c:	10000e26 	beq	r2,zero,81128748 <alt_log_system_clock+0x5c>
    alt_log_sys_clk_count++;
81128710:	d0a06d17 	ldw	r2,-32332(gp)
81128714:	10800044 	addi	r2,r2,1
81128718:	d0a06d15 	stw	r2,-32332(gp)
8112871c:	d0a07117 	ldw	r2,-32316(gp)
        if (alt_log_sys_clk_count > ALT_LOG_SYS_CLK_INTERVAL) {
81128720:	d0e06d17 	ldw	r3,-32332(gp)
81128724:	10c0082e 	bgeu	r2,r3,81128748 <alt_log_system_clock+0x5c>
            alt_log_sys_clk_count = 0;
81128728:	d0206d15 	stw	zero,-32332(gp)
            ALT_LOG_PRINTF("System Clock On %u\r\n",alt_system_clock_in_sec++);
8112872c:	d0a06c17 	ldw	r2,-32336(gp)
81128730:	10c00044 	addi	r3,r2,1
81128734:	d0e06c15 	stw	r3,-32336(gp)
81128738:	100b883a 	mov	r5,r2
8112873c:	01204534 	movhi	r4,33044
81128740:	21007604 	addi	r4,r4,472
81128744:	11282fc0 	call	811282fc <alt_log_printf_proc>
        }
    }
}
81128748:	0001883a 	nop
8112874c:	e037883a 	mov	sp,fp
81128750:	dfc00117 	ldw	ra,4(sp)
81128754:	df000017 	ldw	fp,0(sp)
81128758:	dec00204 	addi	sp,sp,8
8112875c:	f800283a 	ret

81128760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81128760:	defffe04 	addi	sp,sp,-8
81128764:	de00012e 	bgeu	sp,et,8112876c <alt_get_errno+0xc>
81128768:	003b68fa 	trap	3
8112876c:	dfc00115 	stw	ra,4(sp)
81128770:	df000015 	stw	fp,0(sp)
81128774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81128778:	d0a01017 	ldw	r2,-32704(gp)
8112877c:	10000326 	beq	r2,zero,8112878c <alt_get_errno+0x2c>
81128780:	d0a01017 	ldw	r2,-32704(gp)
81128784:	103ee83a 	callr	r2
81128788:	00000106 	br	81128790 <alt_get_errno+0x30>
8112878c:	d0a06104 	addi	r2,gp,-32380
}
81128790:	e037883a 	mov	sp,fp
81128794:	dfc00117 	ldw	ra,4(sp)
81128798:	df000017 	ldw	fp,0(sp)
8112879c:	dec00204 	addi	sp,sp,8
811287a0:	f800283a 	ret

811287a4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
811287a4:	defff904 	addi	sp,sp,-28
811287a8:	de00012e 	bgeu	sp,et,811287b0 <lseek+0xc>
811287ac:	003b68fa 	trap	3
811287b0:	dfc00615 	stw	ra,24(sp)
811287b4:	df000515 	stw	fp,20(sp)
811287b8:	df000504 	addi	fp,sp,20
811287bc:	e13ffd15 	stw	r4,-12(fp)
811287c0:	e17ffe15 	stw	r5,-8(fp)
811287c4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
811287c8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811287cc:	e0bffd17 	ldw	r2,-12(fp)
811287d0:	10000616 	blt	r2,zero,811287ec <lseek+0x48>
811287d4:	e0bffd17 	ldw	r2,-12(fp)
811287d8:	10c00324 	muli	r3,r2,12
811287dc:	00a04534 	movhi	r2,33044
811287e0:	10844204 	addi	r2,r2,4360
811287e4:	1885883a 	add	r2,r3,r2
811287e8:	00000106 	br	811287f0 <lseek+0x4c>
811287ec:	0005883a 	mov	r2,zero
811287f0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
811287f4:	e0bffc17 	ldw	r2,-16(fp)
811287f8:	10001026 	beq	r2,zero,8112883c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
811287fc:	e0bffc17 	ldw	r2,-16(fp)
81128800:	10800017 	ldw	r2,0(r2)
81128804:	10800717 	ldw	r2,28(r2)
81128808:	10000926 	beq	r2,zero,81128830 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
8112880c:	e0bffc17 	ldw	r2,-16(fp)
81128810:	10800017 	ldw	r2,0(r2)
81128814:	10800717 	ldw	r2,28(r2)
81128818:	e1bfff17 	ldw	r6,-4(fp)
8112881c:	e17ffe17 	ldw	r5,-8(fp)
81128820:	e13ffc17 	ldw	r4,-16(fp)
81128824:	103ee83a 	callr	r2
81128828:	e0bffb15 	stw	r2,-20(fp)
8112882c:	00000506 	br	81128844 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81128830:	00bfde84 	movi	r2,-134
81128834:	e0bffb15 	stw	r2,-20(fp)
81128838:	00000206 	br	81128844 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
8112883c:	00bfebc4 	movi	r2,-81
81128840:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81128844:	e0bffb17 	ldw	r2,-20(fp)
81128848:	1000070e 	bge	r2,zero,81128868 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
8112884c:	11287600 	call	81128760 <alt_get_errno>
81128850:	1007883a 	mov	r3,r2
81128854:	e0bffb17 	ldw	r2,-20(fp)
81128858:	0085c83a 	sub	r2,zero,r2
8112885c:	18800015 	stw	r2,0(r3)
    rc = -1;
81128860:	00bfffc4 	movi	r2,-1
81128864:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81128868:	e0bffb17 	ldw	r2,-20(fp)
}
8112886c:	e037883a 	mov	sp,fp
81128870:	dfc00117 	ldw	ra,4(sp)
81128874:	df000017 	ldw	fp,0(sp)
81128878:	dec00204 	addi	sp,sp,8
8112887c:	f800283a 	ret

81128880 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81128880:	defff904 	addi	sp,sp,-28
81128884:	de00012e 	bgeu	sp,et,8112888c <alt_main+0xc>
81128888:	003b68fa 	trap	3
8112888c:	dfc00615 	stw	ra,24(sp)
81128890:	df000515 	stw	fp,20(sp)
81128894:	df000504 	addi	fp,sp,20
#ifndef ALT_NO_EXIT    
  int result;
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
81128898:	d0a01217 	ldw	r2,-32696(gp)
8112889c:	10800058 	cmpnei	r2,r2,1
811288a0:	1000031e 	bne	r2,zero,811288b0 <alt_main+0x30>
811288a4:	01204534 	movhi	r4,33044
811288a8:	21007c04 	addi	r4,r4,496
811288ac:	11282fc0 	call	811282fc <alt_log_printf_proc>
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
811288b0:	0009883a 	mov	r4,zero
811288b4:	113349c0 	call	8113349c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
811288b8:	d0a01217 	ldw	r2,-32696(gp)
811288bc:	10800058 	cmpnei	r2,r2,1
811288c0:	1000031e 	bne	r2,zero,811288d0 <alt_main+0x50>
811288c4:	01204534 	movhi	r4,33044
811288c8:	21008a04 	addi	r4,r4,552
811288cc:	11282fc0 	call	811282fc <alt_log_printf_proc>
  ALT_OS_INIT();
811288d0:	1129f300 	call	81129f30 <OSInit>
811288d4:	01000044 	movi	r4,1
811288d8:	112fc4c0 	call	8112fc4c <OSSemCreate>
811288dc:	d0a07415 	stw	r2,-32304(gp)
811288e0:	01000044 	movi	r4,1
811288e4:	112fc4c0 	call	8112fc4c <OSSemCreate>
811288e8:	d0a07615 	stw	r2,-32296(gp)
  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
811288ec:	d0a01217 	ldw	r2,-32696(gp)
811288f0:	10800058 	cmpnei	r2,r2,1
811288f4:	1000031e 	bne	r2,zero,81128904 <alt_main+0x84>
811288f8:	01204534 	movhi	r4,33044
811288fc:	21009804 	addi	r4,r4,608
81128900:	11282fc0 	call	811282fc <alt_log_printf_proc>
81128904:	d0a06804 	addi	r2,gp,-32352
81128908:	e0bffc15 	stw	r2,-16(fp)
8112890c:	00800044 	movi	r2,1
81128910:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81128914:	e0bffd0b 	ldhu	r2,-12(fp)
81128918:	1009883a 	mov	r4,r2
8112891c:	112fc4c0 	call	8112fc4c <OSSemCreate>
81128920:	1007883a 	mov	r3,r2
81128924:	e0bffc17 	ldw	r2,-16(fp)
81128928:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
8112892c:	d0a01217 	ldw	r2,-32696(gp)
81128930:	10800058 	cmpnei	r2,r2,1
81128934:	1000031e 	bne	r2,zero,81128944 <alt_main+0xc4>
81128938:	01204534 	movhi	r4,33044
8112893c:	2100a604 	addi	r4,r4,664
81128940:	11282fc0 	call	811282fc <alt_log_printf_proc>
  alt_sys_init();
81128944:	11334dc0 	call	811334dc <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");
81128948:	d0a01217 	ldw	r2,-32696(gp)
8112894c:	10800058 	cmpnei	r2,r2,1
81128950:	1000031e 	bne	r2,zero,81128960 <alt_main+0xe0>
81128954:	01204534 	movhi	r4,33044
81128958:	2100b004 	addi	r4,r4,704
8112895c:	11282fc0 	call	811282fc <alt_log_printf_proc>
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
81128960:	d0a01217 	ldw	r2,-32696(gp)
81128964:	10800058 	cmpnei	r2,r2,1
81128968:	1000031e 	bne	r2,zero,81128978 <alt_main+0xf8>
8112896c:	01204534 	movhi	r4,33044
81128970:	2100b904 	addi	r4,r4,740
81128974:	11282fc0 	call	811282fc <alt_log_printf_proc>
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81128978:	01a04534 	movhi	r6,33044
8112897c:	3180c104 	addi	r6,r6,772
81128980:	01604534 	movhi	r5,33044
81128984:	2940c604 	addi	r5,r5,792
81128988:	01204534 	movhi	r4,33044
8112898c:	2100c604 	addi	r4,r4,792
81128990:	113be9c0 	call	8113be9c <alt_io_redirect>
#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
81128994:	d0a01217 	ldw	r2,-32696(gp)
81128998:	10800058 	cmpnei	r2,r2,1
8112899c:	1000031e 	bne	r2,zero,811289ac <alt_main+0x12c>
811289a0:	01204534 	movhi	r4,33044
811289a4:	2100ca04 	addi	r4,r4,808
811289a8:	11282fc0 	call	811282fc <alt_log_printf_proc>
  _do_ctors ();
811289ac:	113b7ac0 	call	8113b7ac <_do_ctors>
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
811289b0:	d0a01217 	ldw	r2,-32696(gp)
811289b4:	10800058 	cmpnei	r2,r2,1
811289b8:	1000031e 	bne	r2,zero,811289c8 <alt_main+0x148>
811289bc:	01204534 	movhi	r4,33044
811289c0:	2100d504 	addi	r4,r4,852
811289c4:	11282fc0 	call	811282fc <alt_log_printf_proc>
  atexit (_do_dtors);
811289c8:	01204534 	movhi	r4,33044
811289cc:	212e0504 	addi	r4,r4,-18412
811289d0:	113c6500 	call	8113c650 <atexit>
  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");
811289d4:	d0a01217 	ldw	r2,-32696(gp)
811289d8:	10800058 	cmpnei	r2,r2,1
811289dc:	1000031e 	bne	r2,zero,811289ec <alt_main+0x16c>
811289e0:	01204534 	movhi	r4,33044
811289e4:	2100dd04 	addi	r4,r4,884
811289e8:	11282fc0 	call	811282fc <alt_log_printf_proc>

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
811289ec:	d0a06e17 	ldw	r2,-32328(gp)
811289f0:	d0e06f17 	ldw	r3,-32324(gp)
811289f4:	d1207017 	ldw	r4,-32320(gp)
811289f8:	200d883a 	mov	r6,r4
811289fc:	180b883a 	mov	r5,r3
81128a00:	1009883a 	mov	r4,r2
81128a04:	110bef40 	call	8110bef4 <main>
81128a08:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
81128a0c:	01000044 	movi	r4,1
81128a10:	11277ac0 	call	811277ac <close>
  exit (result);
81128a14:	e13ffb17 	ldw	r4,-20(fp)
81128a18:	113c6640 	call	8113c664 <exit>

81128a1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81128a1c:	defffe04 	addi	sp,sp,-8
81128a20:	de00012e 	bgeu	sp,et,81128a28 <alt_get_errno+0xc>
81128a24:	003b68fa 	trap	3
81128a28:	dfc00115 	stw	ra,4(sp)
81128a2c:	df000015 	stw	fp,0(sp)
81128a30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81128a34:	d0a01017 	ldw	r2,-32704(gp)
81128a38:	10000326 	beq	r2,zero,81128a48 <alt_get_errno+0x2c>
81128a3c:	d0a01017 	ldw	r2,-32704(gp)
81128a40:	103ee83a 	callr	r2
81128a44:	00000106 	br	81128a4c <alt_get_errno+0x30>
81128a48:	d0a06104 	addi	r2,gp,-32380
}
81128a4c:	e037883a 	mov	sp,fp
81128a50:	dfc00117 	ldw	ra,4(sp)
81128a54:	df000017 	ldw	fp,0(sp)
81128a58:	dec00204 	addi	sp,sp,8
81128a5c:	f800283a 	ret

81128a60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81128a60:	defffd04 	addi	sp,sp,-12
81128a64:	de00012e 	bgeu	sp,et,81128a6c <alt_file_locked+0xc>
81128a68:	003b68fa 	trap	3
81128a6c:	df000215 	stw	fp,8(sp)
81128a70:	df000204 	addi	fp,sp,8
81128a74:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81128a78:	e0bfff17 	ldw	r2,-4(fp)
81128a7c:	10800217 	ldw	r2,8(r2)
81128a80:	10d00034 	orhi	r3,r2,16384
81128a84:	e0bfff17 	ldw	r2,-4(fp)
81128a88:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81128a8c:	e03ffe15 	stw	zero,-8(fp)
81128a90:	00001d06 	br	81128b08 <alt_file_locked+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81128a94:	00a04534 	movhi	r2,33044
81128a98:	10844204 	addi	r2,r2,4360
81128a9c:	e0fffe17 	ldw	r3,-8(fp)
81128aa0:	18c00324 	muli	r3,r3,12
81128aa4:	10c5883a 	add	r2,r2,r3
81128aa8:	10c00017 	ldw	r3,0(r2)
81128aac:	e0bfff17 	ldw	r2,-4(fp)
81128ab0:	10800017 	ldw	r2,0(r2)
81128ab4:	1880111e 	bne	r3,r2,81128afc <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81128ab8:	00a04534 	movhi	r2,33044
81128abc:	10844204 	addi	r2,r2,4360
81128ac0:	e0fffe17 	ldw	r3,-8(fp)
81128ac4:	18c00324 	muli	r3,r3,12
81128ac8:	10c5883a 	add	r2,r2,r3
81128acc:	10800204 	addi	r2,r2,8
81128ad0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81128ad4:	1000090e 	bge	r2,zero,81128afc <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81128ad8:	e0bffe17 	ldw	r2,-8(fp)
81128adc:	10c00324 	muli	r3,r2,12
81128ae0:	00a04534 	movhi	r2,33044
81128ae4:	10844204 	addi	r2,r2,4360
81128ae8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81128aec:	e0bfff17 	ldw	r2,-4(fp)
81128af0:	18800226 	beq	r3,r2,81128afc <alt_file_locked+0x9c>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81128af4:	00bffcc4 	movi	r2,-13
81128af8:	00000806 	br	81128b1c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81128afc:	e0bffe17 	ldw	r2,-8(fp)
81128b00:	10800044 	addi	r2,r2,1
81128b04:	e0bffe15 	stw	r2,-8(fp)
81128b08:	d0a00f17 	ldw	r2,-32708(gp)
81128b0c:	1007883a 	mov	r3,r2
81128b10:	e0bffe17 	ldw	r2,-8(fp)
81128b14:	18bfdf2e 	bgeu	r3,r2,81128a94 <__reset+0xfb108a94>
    }
  }
  
  /* The device is not locked */
 
  return 0;
81128b18:	0005883a 	mov	r2,zero
}
81128b1c:	e037883a 	mov	sp,fp
81128b20:	df000017 	ldw	fp,0(sp)
81128b24:	dec00104 	addi	sp,sp,4
81128b28:	f800283a 	ret

81128b2c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81128b2c:	defff604 	addi	sp,sp,-40
81128b30:	de00012e 	bgeu	sp,et,81128b38 <open+0xc>
81128b34:	003b68fa 	trap	3
81128b38:	dfc00915 	stw	ra,36(sp)
81128b3c:	df000815 	stw	fp,32(sp)
81128b40:	df000804 	addi	fp,sp,32
81128b44:	e13ffd15 	stw	r4,-12(fp)
81128b48:	e17ffe15 	stw	r5,-8(fp)
81128b4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81128b50:	00bfffc4 	movi	r2,-1
81128b54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81128b58:	00bffb44 	movi	r2,-19
81128b5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81128b60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81128b64:	d1600d04 	addi	r5,gp,-32716
81128b68:	e13ffd17 	ldw	r4,-12(fp)
81128b6c:	113b87c0 	call	8113b87c <alt_find_dev>
81128b70:	e0bff815 	stw	r2,-32(fp)
81128b74:	e0bff817 	ldw	r2,-32(fp)
81128b78:	1000051e 	bne	r2,zero,81128b90 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81128b7c:	e13ffd17 	ldw	r4,-12(fp)
81128b80:	113b9140 	call	8113b914 <alt_find_file>
81128b84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81128b88:	00800044 	movi	r2,1
81128b8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81128b90:	e0bff817 	ldw	r2,-32(fp)
81128b94:	10002926 	beq	r2,zero,81128c3c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
81128b98:	e13ff817 	ldw	r4,-32(fp)
81128b9c:	113ba240 	call	8113ba24 <alt_get_fd>
81128ba0:	e0bff915 	stw	r2,-28(fp)
81128ba4:	e0bff917 	ldw	r2,-28(fp)
81128ba8:	1000030e 	bge	r2,zero,81128bb8 <open+0x8c>
    {
      status = index;
81128bac:	e0bff917 	ldw	r2,-28(fp)
81128bb0:	e0bffa15 	stw	r2,-24(fp)
81128bb4:	00002306 	br	81128c44 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
81128bb8:	e0bff917 	ldw	r2,-28(fp)
81128bbc:	10c00324 	muli	r3,r2,12
81128bc0:	00a04534 	movhi	r2,33044
81128bc4:	10844204 	addi	r2,r2,4360
81128bc8:	1885883a 	add	r2,r3,r2
81128bcc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
81128bd0:	e0fffe17 	ldw	r3,-8(fp)
81128bd4:	00900034 	movhi	r2,16384
81128bd8:	10bfffc4 	addi	r2,r2,-1
81128bdc:	1886703a 	and	r3,r3,r2
81128be0:	e0bffc17 	ldw	r2,-16(fp)
81128be4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81128be8:	e0bffb17 	ldw	r2,-20(fp)
81128bec:	1000051e 	bne	r2,zero,81128c04 <open+0xd8>
81128bf0:	e13ffc17 	ldw	r4,-16(fp)
81128bf4:	1128a600 	call	81128a60 <alt_file_locked>
81128bf8:	e0bffa15 	stw	r2,-24(fp)
81128bfc:	e0bffa17 	ldw	r2,-24(fp)
81128c00:	10001016 	blt	r2,zero,81128c44 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
81128c04:	e0bff817 	ldw	r2,-32(fp)
81128c08:	10800317 	ldw	r2,12(r2)
81128c0c:	10000826 	beq	r2,zero,81128c30 <open+0x104>
81128c10:	e0bff817 	ldw	r2,-32(fp)
81128c14:	10800317 	ldw	r2,12(r2)
81128c18:	e1ffff17 	ldw	r7,-4(fp)
81128c1c:	e1bffe17 	ldw	r6,-8(fp)
81128c20:	e17ffd17 	ldw	r5,-12(fp)
81128c24:	e13ffc17 	ldw	r4,-16(fp)
81128c28:	103ee83a 	callr	r2
81128c2c:	00000106 	br	81128c34 <open+0x108>
81128c30:	0005883a 	mov	r2,zero
81128c34:	e0bffa15 	stw	r2,-24(fp)
81128c38:	00000206 	br	81128c44 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
81128c3c:	00bffb44 	movi	r2,-19
81128c40:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
81128c44:	e0bffa17 	ldw	r2,-24(fp)
81128c48:	1000090e 	bge	r2,zero,81128c70 <open+0x144>
  {
    alt_release_fd (index);  
81128c4c:	e13ff917 	ldw	r4,-28(fp)
81128c50:	1128dd00 	call	81128dd0 <alt_release_fd>
    ALT_ERRNO = -status;
81128c54:	1128a1c0 	call	81128a1c <alt_get_errno>
81128c58:	1007883a 	mov	r3,r2
81128c5c:	e0bffa17 	ldw	r2,-24(fp)
81128c60:	0085c83a 	sub	r2,zero,r2
81128c64:	18800015 	stw	r2,0(r3)
    return -1;
81128c68:	00bfffc4 	movi	r2,-1
81128c6c:	00000106 	br	81128c74 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
81128c70:	e0bff917 	ldw	r2,-28(fp)
}
81128c74:	e037883a 	mov	sp,fp
81128c78:	dfc00117 	ldw	ra,4(sp)
81128c7c:	df000017 	ldw	fp,0(sp)
81128c80:	dec00204 	addi	sp,sp,8
81128c84:	f800283a 	ret

81128c88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81128c88:	defffe04 	addi	sp,sp,-8
81128c8c:	de00012e 	bgeu	sp,et,81128c94 <alt_get_errno+0xc>
81128c90:	003b68fa 	trap	3
81128c94:	dfc00115 	stw	ra,4(sp)
81128c98:	df000015 	stw	fp,0(sp)
81128c9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81128ca0:	d0a01017 	ldw	r2,-32704(gp)
81128ca4:	10000326 	beq	r2,zero,81128cb4 <alt_get_errno+0x2c>
81128ca8:	d0a01017 	ldw	r2,-32704(gp)
81128cac:	103ee83a 	callr	r2
81128cb0:	00000106 	br	81128cb8 <alt_get_errno+0x30>
81128cb4:	d0a06104 	addi	r2,gp,-32380
}
81128cb8:	e037883a 	mov	sp,fp
81128cbc:	dfc00117 	ldw	ra,4(sp)
81128cc0:	df000017 	ldw	fp,0(sp)
81128cc4:	dec00204 	addi	sp,sp,8
81128cc8:	f800283a 	ret

81128ccc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81128ccc:	defff904 	addi	sp,sp,-28
81128cd0:	de00012e 	bgeu	sp,et,81128cd8 <read+0xc>
81128cd4:	003b68fa 	trap	3
81128cd8:	dfc00615 	stw	ra,24(sp)
81128cdc:	df000515 	stw	fp,20(sp)
81128ce0:	df000504 	addi	fp,sp,20
81128ce4:	e13ffd15 	stw	r4,-12(fp)
81128ce8:	e17ffe15 	stw	r5,-8(fp)
81128cec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81128cf0:	e0bffd17 	ldw	r2,-12(fp)
81128cf4:	10000616 	blt	r2,zero,81128d10 <read+0x44>
81128cf8:	e0bffd17 	ldw	r2,-12(fp)
81128cfc:	10c00324 	muli	r3,r2,12
81128d00:	00a04534 	movhi	r2,33044
81128d04:	10844204 	addi	r2,r2,4360
81128d08:	1885883a 	add	r2,r3,r2
81128d0c:	00000106 	br	81128d14 <read+0x48>
81128d10:	0005883a 	mov	r2,zero
81128d14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81128d18:	e0bffb17 	ldw	r2,-20(fp)
81128d1c:	10002226 	beq	r2,zero,81128da8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81128d20:	e0bffb17 	ldw	r2,-20(fp)
81128d24:	10800217 	ldw	r2,8(r2)
81128d28:	108000cc 	andi	r2,r2,3
81128d2c:	10800060 	cmpeqi	r2,r2,1
81128d30:	1000181e 	bne	r2,zero,81128d94 <read+0xc8>
        (fd->dev->read))
81128d34:	e0bffb17 	ldw	r2,-20(fp)
81128d38:	10800017 	ldw	r2,0(r2)
81128d3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81128d40:	10001426 	beq	r2,zero,81128d94 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81128d44:	e0bffb17 	ldw	r2,-20(fp)
81128d48:	10800017 	ldw	r2,0(r2)
81128d4c:	10800517 	ldw	r2,20(r2)
81128d50:	e0ffff17 	ldw	r3,-4(fp)
81128d54:	180d883a 	mov	r6,r3
81128d58:	e17ffe17 	ldw	r5,-8(fp)
81128d5c:	e13ffb17 	ldw	r4,-20(fp)
81128d60:	103ee83a 	callr	r2
81128d64:	e0bffc15 	stw	r2,-16(fp)
81128d68:	e0bffc17 	ldw	r2,-16(fp)
81128d6c:	1000070e 	bge	r2,zero,81128d8c <read+0xc0>
        {
          ALT_ERRNO = -rval;
81128d70:	1128c880 	call	81128c88 <alt_get_errno>
81128d74:	1007883a 	mov	r3,r2
81128d78:	e0bffc17 	ldw	r2,-16(fp)
81128d7c:	0085c83a 	sub	r2,zero,r2
81128d80:	18800015 	stw	r2,0(r3)
          return -1;
81128d84:	00bfffc4 	movi	r2,-1
81128d88:	00000c06 	br	81128dbc <read+0xf0>
        }
        return rval;
81128d8c:	e0bffc17 	ldw	r2,-16(fp)
81128d90:	00000a06 	br	81128dbc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
81128d94:	1128c880 	call	81128c88 <alt_get_errno>
81128d98:	1007883a 	mov	r3,r2
81128d9c:	00800344 	movi	r2,13
81128da0:	18800015 	stw	r2,0(r3)
81128da4:	00000406 	br	81128db8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81128da8:	1128c880 	call	81128c88 <alt_get_errno>
81128dac:	1007883a 	mov	r3,r2
81128db0:	00801444 	movi	r2,81
81128db4:	18800015 	stw	r2,0(r3)
  }
  return -1;
81128db8:	00bfffc4 	movi	r2,-1
}
81128dbc:	e037883a 	mov	sp,fp
81128dc0:	dfc00117 	ldw	ra,4(sp)
81128dc4:	df000017 	ldw	fp,0(sp)
81128dc8:	dec00204 	addi	sp,sp,8
81128dcc:	f800283a 	ret

81128dd0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81128dd0:	defffe04 	addi	sp,sp,-8
81128dd4:	de00012e 	bgeu	sp,et,81128ddc <alt_release_fd+0xc>
81128dd8:	003b68fa 	trap	3
81128ddc:	df000115 	stw	fp,4(sp)
81128de0:	df000104 	addi	fp,sp,4
81128de4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81128de8:	e0bfff17 	ldw	r2,-4(fp)
81128dec:	108000d0 	cmplti	r2,r2,3
81128df0:	10000d1e 	bne	r2,zero,81128e28 <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
81128df4:	00a04534 	movhi	r2,33044
81128df8:	10844204 	addi	r2,r2,4360
81128dfc:	e0ffff17 	ldw	r3,-4(fp)
81128e00:	18c00324 	muli	r3,r3,12
81128e04:	10c5883a 	add	r2,r2,r3
81128e08:	10800204 	addi	r2,r2,8
81128e0c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81128e10:	00a04534 	movhi	r2,33044
81128e14:	10844204 	addi	r2,r2,4360
81128e18:	e0ffff17 	ldw	r3,-4(fp)
81128e1c:	18c00324 	muli	r3,r3,12
81128e20:	10c5883a 	add	r2,r2,r3
81128e24:	10000015 	stw	zero,0(r2)
  }
}
81128e28:	0001883a 	nop
81128e2c:	e037883a 	mov	sp,fp
81128e30:	df000017 	ldw	fp,0(sp)
81128e34:	dec00104 	addi	sp,sp,4
81128e38:	f800283a 	ret

81128e3c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81128e3c:	defff604 	addi	sp,sp,-40
81128e40:	de00012e 	bgeu	sp,et,81128e48 <sbrk+0xc>
81128e44:	003b68fa 	trap	3
81128e48:	df000915 	stw	fp,36(sp)
81128e4c:	df000904 	addi	fp,sp,36
81128e50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128e54:	0005303a 	rdctl	r2,status
81128e58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128e5c:	e0fffe17 	ldw	r3,-8(fp)
81128e60:	00bfff84 	movi	r2,-2
81128e64:	1884703a 	and	r2,r3,r2
81128e68:	1001703a 	wrctl	status,r2
  
  return context;
81128e6c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81128e70:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81128e74:	d0a01317 	ldw	r2,-32692(gp)
81128e78:	10c000c4 	addi	r3,r2,3
81128e7c:	00bfff04 	movi	r2,-4
81128e80:	1884703a 	and	r2,r3,r2
81128e84:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81128e88:	d0e01317 	ldw	r3,-32692(gp)
81128e8c:	e0bfff17 	ldw	r2,-4(fp)
81128e90:	1887883a 	add	r3,r3,r2
81128e94:	00a04834 	movhi	r2,33056
81128e98:	10a80004 	addi	r2,r2,-24576
81128e9c:	10c0062e 	bgeu	r2,r3,81128eb8 <sbrk+0x7c>
81128ea0:	e0bff817 	ldw	r2,-32(fp)
81128ea4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128ea8:	e0bff717 	ldw	r2,-36(fp)
81128eac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81128eb0:	00bfffc4 	movi	r2,-1
81128eb4:	00001c06 	br	81128f28 <sbrk+0xec>
  }
#endif

  prev_heap_end = heap_end; 
81128eb8:	d0a01317 	ldw	r2,-32692(gp)
81128ebc:	e0bffa15 	stw	r2,-24(fp)
  heap_end += incr; 
81128ec0:	d0e01317 	ldw	r3,-32692(gp)
81128ec4:	e0bfff17 	ldw	r2,-4(fp)
81128ec8:	1885883a 	add	r2,r3,r2
81128ecc:	d0a01315 	stw	r2,-32692(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
81128ed0:	c005883a 	mov	r2,et
81128ed4:	e0bff915 	stw	r2,-28(fp)

  return limit; 
81128ed8:	e0fff917 	ldw	r3,-28(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
81128edc:	e0bffa17 	ldw	r2,-24(fp)
81128ee0:	18800c1e 	bne	r3,r2,81128f14 <sbrk+0xd8>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
81128ee4:	d805883a 	mov	r2,sp
81128ee8:	e0bffb15 	stw	r2,-20(fp)

  return pointer; 
81128eec:	e0bffb17 	ldw	r2,-20(fp)
  {
    if (alt_stack_pointer() <= heap_end)
81128ef0:	d0e01317 	ldw	r3,-32692(gp)
81128ef4:	18800136 	bltu	r3,r2,81128efc <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
81128ef8:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
81128efc:	d0a01317 	ldw	r2,-32692(gp)
81128f00:	e0bffc15 	stw	r2,-16(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
81128f04:	e0bffc17 	ldw	r2,-16(fp)
81128f08:	d0a00015 	stw	r2,-32768(gp)
  NIOS2_WRITE_ET(limit);
81128f0c:	e0bffc17 	ldw	r2,-16(fp)
81128f10:	1031883a 	mov	et,r2
81128f14:	e0bff817 	ldw	r2,-32(fp)
81128f18:	e0bffd15 	stw	r2,-12(fp)
81128f1c:	e0bffd17 	ldw	r2,-12(fp)
81128f20:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81128f24:	e0bffa17 	ldw	r2,-24(fp)
} 
81128f28:	e037883a 	mov	sp,fp
81128f2c:	df000017 	ldw	fp,0(sp)
81128f30:	dec00104 	addi	sp,sp,4
81128f34:	f800283a 	ret

81128f38 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81128f38:	defffa04 	addi	sp,sp,-24
81128f3c:	de00012e 	bgeu	sp,et,81128f44 <alt_alarm_stop+0xc>
81128f40:	003b68fa 	trap	3
81128f44:	df000515 	stw	fp,20(sp)
81128f48:	df000504 	addi	fp,sp,20
81128f4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128f50:	0005303a 	rdctl	r2,status
81128f54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128f58:	e0fffc17 	ldw	r3,-16(fp)
81128f5c:	00bfff84 	movi	r2,-2
81128f60:	1884703a 	and	r2,r3,r2
81128f64:	1001703a 	wrctl	status,r2
  
  return context;
81128f68:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81128f6c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81128f70:	e0bfff17 	ldw	r2,-4(fp)
81128f74:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81128f78:	e0bffd17 	ldw	r2,-12(fp)
81128f7c:	10800017 	ldw	r2,0(r2)
81128f80:	e0fffd17 	ldw	r3,-12(fp)
81128f84:	18c00117 	ldw	r3,4(r3)
81128f88:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81128f8c:	e0bffd17 	ldw	r2,-12(fp)
81128f90:	10800117 	ldw	r2,4(r2)
81128f94:	e0fffd17 	ldw	r3,-12(fp)
81128f98:	18c00017 	ldw	r3,0(r3)
81128f9c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81128fa0:	e0bffd17 	ldw	r2,-12(fp)
81128fa4:	e0fffd17 	ldw	r3,-12(fp)
81128fa8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81128fac:	e0bffd17 	ldw	r2,-12(fp)
81128fb0:	e0fffd17 	ldw	r3,-12(fp)
81128fb4:	10c00015 	stw	r3,0(r2)
81128fb8:	e0bffb17 	ldw	r2,-20(fp)
81128fbc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128fc0:	e0bffe17 	ldw	r2,-8(fp)
81128fc4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81128fc8:	0001883a 	nop
81128fcc:	e037883a 	mov	sp,fp
81128fd0:	df000017 	ldw	fp,0(sp)
81128fd4:	dec00104 	addi	sp,sp,4
81128fd8:	f800283a 	ret

81128fdc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81128fdc:	defffb04 	addi	sp,sp,-20
81128fe0:	de00012e 	bgeu	sp,et,81128fe8 <alt_tick+0xc>
81128fe4:	003b68fa 	trap	3
81128fe8:	dfc00415 	stw	ra,16(sp)
81128fec:	df000315 	stw	fp,12(sp)
81128ff0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81128ff4:	d0a01417 	ldw	r2,-32688(gp)
81128ff8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81128ffc:	d0a07217 	ldw	r2,-32312(gp)
81129000:	10800044 	addi	r2,r2,1
81129004:	d0a07215 	stw	r2,-32312(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81129008:	00002e06 	br	811290c4 <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
8112900c:	e0bffd17 	ldw	r2,-12(fp)
81129010:	10800017 	ldw	r2,0(r2)
81129014:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81129018:	e0bffd17 	ldw	r2,-12(fp)
8112901c:	10800403 	ldbu	r2,16(r2)
81129020:	10803fcc 	andi	r2,r2,255
81129024:	10000426 	beq	r2,zero,81129038 <alt_tick+0x5c>
81129028:	d0a07217 	ldw	r2,-32312(gp)
8112902c:	1000021e 	bne	r2,zero,81129038 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
81129030:	e0bffd17 	ldw	r2,-12(fp)
81129034:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81129038:	e0bffd17 	ldw	r2,-12(fp)
8112903c:	10800217 	ldw	r2,8(r2)
81129040:	d0e07217 	ldw	r3,-32312(gp)
81129044:	18801d36 	bltu	r3,r2,811290bc <alt_tick+0xe0>
81129048:	e0bffd17 	ldw	r2,-12(fp)
8112904c:	10800403 	ldbu	r2,16(r2)
81129050:	10803fcc 	andi	r2,r2,255
81129054:	1000191e 	bne	r2,zero,811290bc <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
81129058:	e0bffd17 	ldw	r2,-12(fp)
8112905c:	10800317 	ldw	r2,12(r2)
81129060:	e0fffd17 	ldw	r3,-12(fp)
81129064:	18c00517 	ldw	r3,20(r3)
81129068:	1809883a 	mov	r4,r3
8112906c:	103ee83a 	callr	r2
81129070:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
81129074:	e0bfff17 	ldw	r2,-4(fp)
81129078:	1000031e 	bne	r2,zero,81129088 <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
8112907c:	e13ffd17 	ldw	r4,-12(fp)
81129080:	1128f380 	call	81128f38 <alt_alarm_stop>
81129084:	00000d06 	br	811290bc <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
81129088:	e0bffd17 	ldw	r2,-12(fp)
8112908c:	10c00217 	ldw	r3,8(r2)
81129090:	e0bfff17 	ldw	r2,-4(fp)
81129094:	1887883a 	add	r3,r3,r2
81129098:	e0bffd17 	ldw	r2,-12(fp)
8112909c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
811290a0:	e0bffd17 	ldw	r2,-12(fp)
811290a4:	10c00217 	ldw	r3,8(r2)
811290a8:	d0a07217 	ldw	r2,-32312(gp)
811290ac:	1880032e 	bgeu	r3,r2,811290bc <alt_tick+0xe0>
        {
          alarm->rollover = 1;
811290b0:	e0bffd17 	ldw	r2,-12(fp)
811290b4:	00c00044 	movi	r3,1
811290b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
811290bc:	e0bffe17 	ldw	r2,-8(fp)
811290c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
811290c4:	e0fffd17 	ldw	r3,-12(fp)
811290c8:	d0a01404 	addi	r2,gp,-32688
811290cc:	18bfcf1e 	bne	r3,r2,8112900c <__reset+0xfb10900c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
811290d0:	112a3900 	call	8112a390 <OSTimeTick>
}
811290d4:	0001883a 	nop
811290d8:	e037883a 	mov	sp,fp
811290dc:	dfc00117 	ldw	ra,4(sp)
811290e0:	df000017 	ldw	fp,0(sp)
811290e4:	dec00204 	addi	sp,sp,8
811290e8:	f800283a 	ret

811290ec <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
811290ec:	defffb04 	addi	sp,sp,-20
811290f0:	de00012e 	bgeu	sp,et,811290f8 <usleep+0xc>
811290f4:	003b68fa 	trap	3
811290f8:	dfc00415 	stw	ra,16(sp)
811290fc:	df000315 	stw	fp,12(sp)
81129100:	df000304 	addi	fp,sp,12
81129104:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
81129108:	d0a07a03 	ldbu	r2,-32280(gp)
8112910c:	10803fcc 	andi	r2,r2,255
81129110:	1000031e 	bne	r2,zero,81129120 <usleep+0x34>
  {
    return alt_busy_sleep (us);
81129114:	e13fff17 	ldw	r4,-4(fp)
81129118:	11276380 	call	81127638 <alt_busy_sleep>
8112911c:	00003d06 	br	81129214 <usleep+0x128>
81129120:	d0a07117 	ldw	r2,-32316(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
81129124:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
81129128:	e0ffff17 	ldw	r3,-4(fp)
8112912c:	0090c734 	movhi	r2,17180
81129130:	10b7a0c4 	addi	r2,r2,-8573
81129134:	1888383a 	mulxuu	r4,r3,r2
81129138:	1885383a 	mul	r2,r3,r2
8112913c:	1013883a 	mov	r9,r2
81129140:	2015883a 	mov	r10,r4
81129144:	5006d4ba 	srli	r3,r10,18
81129148:	e0bffe17 	ldw	r2,-8(fp)
8112914c:	1893383a 	mul	r9,r3,r2
81129150:	e0ffff17 	ldw	r3,-4(fp)
81129154:	0090c734 	movhi	r2,17180
81129158:	10b7a0c4 	addi	r2,r2,-8573
8112915c:	1888383a 	mulxuu	r4,r3,r2
81129160:	1885383a 	mul	r2,r3,r2
81129164:	100f883a 	mov	r7,r2
81129168:	2011883a 	mov	r8,r4
8112916c:	4004d4ba 	srli	r2,r8,18
81129170:	010003f4 	movhi	r4,15
81129174:	21109004 	addi	r4,r4,16960
81129178:	1105383a 	mul	r2,r2,r4
8112917c:	1885c83a 	sub	r2,r3,r2
81129180:	e0fffe17 	ldw	r3,-8(fp)
81129184:	10c7383a 	mul	r3,r2,r3
81129188:	0090c734 	movhi	r2,17180
8112918c:	10b7a0c4 	addi	r2,r2,-8573
81129190:	1888383a 	mulxuu	r4,r3,r2
81129194:	1885383a 	mul	r2,r3,r2
81129198:	100b883a 	mov	r5,r2
8112919c:	200d883a 	mov	r6,r4
811291a0:	3004d4ba 	srli	r2,r6,18
811291a4:	4885883a 	add	r2,r9,r2
811291a8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
811291ac:	00000706 	br	811291cc <usleep+0xe0>
  {
    OSTimeDly(0xffff);
811291b0:	013fffd4 	movui	r4,65535
811291b4:	1131e000 	call	81131e00 <OSTimeDly>
    ticks -= 0xffff;
811291b8:	e0fffd17 	ldw	r3,-12(fp)
811291bc:	00bffff4 	movhi	r2,65535
811291c0:	10800044 	addi	r2,r2,1
811291c4:	1885883a 	add	r2,r3,r2
811291c8:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
811291cc:	e0bffd17 	ldw	r2,-12(fp)
811291d0:	00ffffd4 	movui	r3,65535
811291d4:	18bff636 	bltu	r3,r2,811291b0 <__reset+0xfb1091b0>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
811291d8:	e0bffd17 	ldw	r2,-12(fp)
811291dc:	10bfffcc 	andi	r2,r2,65535
811291e0:	1009883a 	mov	r4,r2
811291e4:	1131e000 	call	81131e00 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
811291e8:	008003f4 	movhi	r2,15
811291ec:	10909004 	addi	r2,r2,16960
811291f0:	e0fffe17 	ldw	r3,-8(fp)
811291f4:	10c7203a 	divu	r3,r2,r3
811291f8:	e0bfff17 	ldw	r2,-4(fp)
811291fc:	10c9203a 	divu	r4,r2,r3
81129200:	20c7383a 	mul	r3,r4,r3
81129204:	10c5c83a 	sub	r2,r2,r3
81129208:	1009883a 	mov	r4,r2
8112920c:	11276380 	call	81127638 <alt_busy_sleep>

  return 0;  
81129210:	0005883a 	mov	r2,zero
}
81129214:	e037883a 	mov	sp,fp
81129218:	dfc00117 	ldw	ra,4(sp)
8112921c:	df000017 	ldw	fp,0(sp)
81129220:	dec00204 	addi	sp,sp,8
81129224:	f800283a 	ret

81129228 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81129228:	defffe04 	addi	sp,sp,-8
8112922c:	de00012e 	bgeu	sp,et,81129234 <alt_get_errno+0xc>
81129230:	003b68fa 	trap	3
81129234:	dfc00115 	stw	ra,4(sp)
81129238:	df000015 	stw	fp,0(sp)
8112923c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81129240:	d0a01017 	ldw	r2,-32704(gp)
81129244:	10000326 	beq	r2,zero,81129254 <alt_get_errno+0x2c>
81129248:	d0a01017 	ldw	r2,-32704(gp)
8112924c:	103ee83a 	callr	r2
81129250:	00000106 	br	81129258 <alt_get_errno+0x30>
81129254:	d0a06104 	addi	r2,gp,-32380
}
81129258:	e037883a 	mov	sp,fp
8112925c:	dfc00117 	ldw	ra,4(sp)
81129260:	df000017 	ldw	fp,0(sp)
81129264:	dec00204 	addi	sp,sp,8
81129268:	f800283a 	ret

8112926c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
8112926c:	defff904 	addi	sp,sp,-28
81129270:	de00012e 	bgeu	sp,et,81129278 <write+0xc>
81129274:	003b68fa 	trap	3
81129278:	dfc00615 	stw	ra,24(sp)
8112927c:	df000515 	stw	fp,20(sp)
81129280:	df000504 	addi	fp,sp,20
81129284:	e13ffd15 	stw	r4,-12(fp)
81129288:	e17ffe15 	stw	r5,-8(fp)
8112928c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81129290:	e0bffd17 	ldw	r2,-12(fp)
81129294:	10000616 	blt	r2,zero,811292b0 <write+0x44>
81129298:	e0bffd17 	ldw	r2,-12(fp)
8112929c:	10c00324 	muli	r3,r2,12
811292a0:	00a04534 	movhi	r2,33044
811292a4:	10844204 	addi	r2,r2,4360
811292a8:	1885883a 	add	r2,r3,r2
811292ac:	00000106 	br	811292b4 <write+0x48>
811292b0:	0005883a 	mov	r2,zero
811292b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
811292b8:	e0bffb17 	ldw	r2,-20(fp)
811292bc:	10002426 	beq	r2,zero,81129350 <write+0xe4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
811292c0:	e0bffb17 	ldw	r2,-20(fp)
811292c4:	10800217 	ldw	r2,8(r2)
811292c8:	108000cc 	andi	r2,r2,3
811292cc:	10001b26 	beq	r2,zero,8112933c <write+0xd0>
811292d0:	e0bffb17 	ldw	r2,-20(fp)
811292d4:	10800017 	ldw	r2,0(r2)
811292d8:	10800617 	ldw	r2,24(r2)
811292dc:	10001726 	beq	r2,zero,8112933c <write+0xd0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);
811292e0:	e17fff17 	ldw	r5,-4(fp)
811292e4:	e13ffe17 	ldw	r4,-8(fp)
811292e8:	11285ac0 	call	811285ac <alt_log_write>

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
811292ec:	e0bffb17 	ldw	r2,-20(fp)
811292f0:	10800017 	ldw	r2,0(r2)
811292f4:	10800617 	ldw	r2,24(r2)
811292f8:	e0ffff17 	ldw	r3,-4(fp)
811292fc:	180d883a 	mov	r6,r3
81129300:	e17ffe17 	ldw	r5,-8(fp)
81129304:	e13ffb17 	ldw	r4,-20(fp)
81129308:	103ee83a 	callr	r2
8112930c:	e0bffc15 	stw	r2,-16(fp)
81129310:	e0bffc17 	ldw	r2,-16(fp)
81129314:	1000070e 	bge	r2,zero,81129334 <write+0xc8>
      {
        ALT_ERRNO = -rval;
81129318:	11292280 	call	81129228 <alt_get_errno>
8112931c:	1007883a 	mov	r3,r2
81129320:	e0bffc17 	ldw	r2,-16(fp)
81129324:	0085c83a 	sub	r2,zero,r2
81129328:	18800015 	stw	r2,0(r3)
        return -1;
8112932c:	00bfffc4 	movi	r2,-1
81129330:	00000c06 	br	81129364 <write+0xf8>
      }
      return rval;
81129334:	e0bffc17 	ldw	r2,-16(fp)
81129338:	00000a06 	br	81129364 <write+0xf8>
    }
    else
    {
      ALT_ERRNO = EACCES;
8112933c:	11292280 	call	81129228 <alt_get_errno>
81129340:	1007883a 	mov	r3,r2
81129344:	00800344 	movi	r2,13
81129348:	18800015 	stw	r2,0(r3)
8112934c:	00000406 	br	81129360 <write+0xf4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81129350:	11292280 	call	81129228 <alt_get_errno>
81129354:	1007883a 	mov	r3,r2
81129358:	00801444 	movi	r2,81
8112935c:	18800015 	stw	r2,0(r3)
  }
  return -1;
81129360:	00bfffc4 	movi	r2,-1
}
81129364:	e037883a 	mov	sp,fp
81129368:	dfc00117 	ldw	ra,4(sp)
8112936c:	df000017 	ldw	fp,0(sp)
81129370:	dec00204 	addi	sp,sp,8
81129374:	f800283a 	ret

81129378 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
81129378:	deffde04 	addi	sp,sp,-136
8112937c:	de00012e 	bgeu	sp,et,81129384 <__env_lock+0xc>
81129380:	003b68fa 	trap	3
81129384:	dfc02115 	stw	ra,132(sp)
81129388:	df002015 	stw	fp,128(sp)
8112938c:	df002004 	addi	fp,sp,128
81129390:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81129394:	e0bfe104 	addi	r2,fp,-124
81129398:	100b883a 	mov	r5,r2
8112939c:	01003fc4 	movi	r4,255
811293a0:	1131c5c0 	call	81131c5c <OSTaskQuery>
811293a4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
811293a8:	e0bffe83 	ldbu	r2,-6(fp)
811293ac:	10803fcc 	andi	r2,r2,255
811293b0:	10001e1e 	bne	r2,zero,8112942c <__env_lock+0xb4>
    return;

  id = tcb.OSTCBPrio;
811293b4:	e0bfed83 	ldbu	r2,-74(fp)
811293b8:	10803fcc 	andi	r2,r2,255
811293bc:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
811293c0:	d0a07417 	ldw	r2,-32304(gp)
811293c4:	e0fffc04 	addi	r3,fp,-16
811293c8:	180b883a 	mov	r5,r3
811293cc:	1009883a 	mov	r4,r2
811293d0:	11304140 	call	81130414 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
811293d4:	e0bffe03 	ldbu	r2,-8(fp)
811293d8:	10803fcc 	andi	r2,r2,255
811293dc:	10000726 	beq	r2,zero,811293fc <__env_lock+0x84>
811293e0:	d0a01617 	ldw	r2,-32680(gp)
811293e4:	e0ffe017 	ldw	r3,-128(fp)
811293e8:	1880041e 	bne	r3,r2,811293fc <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
811293ec:	d0a07317 	ldw	r2,-32308(gp)
811293f0:	10800044 	addi	r2,r2,1
811293f4:	d0a07315 	stw	r2,-32308(gp)
811293f8:	00000a06 	br	81129424 <__env_lock+0xac>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
811293fc:	d0a07417 	ldw	r2,-32304(gp)
81129400:	e0fffe84 	addi	r3,fp,-6
81129404:	180d883a 	mov	r6,r3
81129408:	000b883a 	mov	r5,zero
8112940c:	1009883a 	mov	r4,r2
81129410:	112ff740 	call	8112ff74 <OSSemPend>
    locks  = 1;
81129414:	00800044 	movi	r2,1
81129418:	d0a07315 	stw	r2,-32308(gp)
    lockid = id;
8112941c:	e0bfe017 	ldw	r2,-128(fp)
81129420:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81129424:	0001883a 	nop
81129428:	00000106 	br	81129430 <__env_lock+0xb8>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
8112942c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81129430:	e037883a 	mov	sp,fp
81129434:	dfc00117 	ldw	ra,4(sp)
81129438:	df000017 	ldw	fp,0(sp)
8112943c:	dec00204 	addi	sp,sp,8
81129440:	f800283a 	ret

81129444 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
81129444:	defffd04 	addi	sp,sp,-12
81129448:	de00012e 	bgeu	sp,et,81129450 <__env_unlock+0xc>
8112944c:	003b68fa 	trap	3
81129450:	dfc00215 	stw	ra,8(sp)
81129454:	df000115 	stw	fp,4(sp)
81129458:	df000104 	addi	fp,sp,4
8112945c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
81129460:	d0a07317 	ldw	r2,-32308(gp)
81129464:	10000b26 	beq	r2,zero,81129494 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
81129468:	d0a07317 	ldw	r2,-32308(gp)
8112946c:	10bfffc4 	addi	r2,r2,-1
81129470:	d0a07315 	stw	r2,-32308(gp)
81129474:	d0a07317 	ldw	r2,-32308(gp)
81129478:	1000071e 	bne	r2,zero,81129498 <__env_unlock+0x54>
  {
    lockid = -1;
8112947c:	00bfffc4 	movi	r2,-1
81129480:	d0a01615 	stw	r2,-32680(gp)
    OSSemPost( alt_envsem );
81129484:	d0a07417 	ldw	r2,-32304(gp)
81129488:	1009883a 	mov	r4,r2
8112948c:	11302fc0 	call	811302fc <OSSemPost>
81129490:	00000106 	br	81129498 <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
81129494:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
81129498:	e037883a 	mov	sp,fp
8112949c:	dfc00117 	ldw	ra,4(sp)
811294a0:	df000017 	ldw	fp,0(sp)
811294a4:	dec00204 	addi	sp,sp,8
811294a8:	f800283a 	ret

811294ac <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
811294ac:	deffda04 	addi	sp,sp,-152
811294b0:	de00012e 	bgeu	sp,et,811294b8 <__malloc_lock+0xc>
811294b4:	003b68fa 	trap	3
811294b8:	dfc02515 	stw	ra,148(sp)
811294bc:	df002415 	stw	fp,144(sp)
811294c0:	df002404 	addi	fp,sp,144
811294c4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811294c8:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
811294cc:	d0a07a03 	ldbu	r2,-32280(gp)
811294d0:	10803fcc 	andi	r2,r2,255
811294d4:	10800060 	cmpeqi	r2,r2,1
811294d8:	10003626 	beq	r2,zero,811295b4 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
811294dc:	e0bfe104 	addi	r2,fp,-124
811294e0:	100b883a 	mov	r5,r2
811294e4:	01003fc4 	movi	r4,255
811294e8:	1131c5c0 	call	81131c5c <OSTaskQuery>
811294ec:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
811294f0:	e0bffe83 	ldbu	r2,-6(fp)
811294f4:	10803fcc 	andi	r2,r2,255
811294f8:	1000301e 	bne	r2,zero,811295bc <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
811294fc:	e0bfed83 	ldbu	r2,-74(fp)
81129500:	10803fcc 	andi	r2,r2,255
81129504:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
81129508:	d0a07617 	ldw	r2,-32296(gp)
8112950c:	e0fffc04 	addi	r3,fp,-16
81129510:	180b883a 	mov	r5,r3
81129514:	1009883a 	mov	r4,r2
81129518:	11304140 	call	81130414 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112951c:	0005303a 	rdctl	r2,status
81129520:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129524:	e0ffe017 	ldw	r3,-128(fp)
81129528:	00bfff84 	movi	r2,-2
8112952c:	1884703a 	and	r2,r3,r2
81129530:	1001703a 	wrctl	status,r2
  
  return context;
81129534:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
81129538:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
8112953c:	e0bffc0b 	ldhu	r2,-16(fp)
81129540:	10bfffcc 	andi	r2,r2,65535
81129544:	10000b1e 	bne	r2,zero,81129574 <__malloc_lock+0xc8>
81129548:	d0a01717 	ldw	r2,-32676(gp)
8112954c:	e0ffdd17 	ldw	r3,-140(fp)
81129550:	1880081e 	bne	r3,r2,81129574 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
81129554:	d0a07517 	ldw	r2,-32300(gp)
81129558:	10800044 	addi	r2,r2,1
8112955c:	d0a07515 	stw	r2,-32300(gp)
81129560:	e0bfdc17 	ldw	r2,-144(fp)
81129564:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129568:	e0bfde17 	ldw	r2,-136(fp)
8112956c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
81129570:	00000e06 	br	811295ac <__malloc_lock+0x100>
81129574:	e0bfdc17 	ldw	r2,-144(fp)
81129578:	e0bfdf15 	stw	r2,-132(fp)
8112957c:	e0bfdf17 	ldw	r2,-132(fp)
81129580:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
81129584:	d0a07617 	ldw	r2,-32296(gp)
81129588:	e0fffe84 	addi	r3,fp,-6
8112958c:	180d883a 	mov	r6,r3
81129590:	000b883a 	mov	r5,zero
81129594:	1009883a 	mov	r4,r2
81129598:	112ff740 	call	8112ff74 <OSSemPend>
    locks  = 1;
8112959c:	00800044 	movi	r2,1
811295a0:	d0a07515 	stw	r2,-32300(gp)
    lockid = id;
811295a4:	e0bfdd17 	ldw	r2,-140(fp)
811295a8:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
811295ac:	0001883a 	nop
811295b0:	00000306 	br	811295c0 <__malloc_lock+0x114>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
811295b4:	0001883a 	nop
811295b8:	00000106 	br	811295c0 <__malloc_lock+0x114>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
811295bc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
811295c0:	e037883a 	mov	sp,fp
811295c4:	dfc00117 	ldw	ra,4(sp)
811295c8:	df000017 	ldw	fp,0(sp)
811295cc:	dec00204 	addi	sp,sp,8
811295d0:	f800283a 	ret

811295d4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
811295d4:	defff804 	addi	sp,sp,-32
811295d8:	de00012e 	bgeu	sp,et,811295e0 <__malloc_unlock+0xc>
811295dc:	003b68fa 	trap	3
811295e0:	dfc00715 	stw	ra,28(sp)
811295e4:	df000615 	stw	fp,24(sp)
811295e8:	df000604 	addi	fp,sp,24
811295ec:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811295f0:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
811295f4:	d0a07a03 	ldbu	r2,-32280(gp)
811295f8:	10803fcc 	andi	r2,r2,255
811295fc:	10800060 	cmpeqi	r2,r2,1
81129600:	10002326 	beq	r2,zero,81129690 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129604:	0005303a 	rdctl	r2,status
81129608:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112960c:	e0fffe17 	ldw	r3,-8(fp)
81129610:	00bfff84 	movi	r2,-2
81129614:	1884703a 	and	r2,r3,r2
81129618:	1001703a 	wrctl	status,r2
  
  return context;
8112961c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
81129620:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
81129624:	d0a07517 	ldw	r2,-32300(gp)
81129628:	1000051e 	bne	r2,zero,81129640 <__malloc_unlock+0x6c>
8112962c:	e0bffa17 	ldw	r2,-24(fp)
81129630:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129634:	e0bffb17 	ldw	r2,-20(fp)
81129638:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
8112963c:	00001506 	br	81129694 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
81129640:	d0a07517 	ldw	r2,-32300(gp)
81129644:	10bfffc4 	addi	r2,r2,-1
81129648:	d0a07515 	stw	r2,-32300(gp)
8112964c:	d0a07517 	ldw	r2,-32300(gp)
81129650:	10000a1e 	bne	r2,zero,8112967c <__malloc_unlock+0xa8>
  {
    lockid = -1;
81129654:	00bfffc4 	movi	r2,-1
81129658:	d0a01715 	stw	r2,-32676(gp)
8112965c:	e0bffa17 	ldw	r2,-24(fp)
81129660:	e0bffc15 	stw	r2,-16(fp)
81129664:	e0bffc17 	ldw	r2,-16(fp)
81129668:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
8112966c:	d0a07617 	ldw	r2,-32296(gp)
81129670:	1009883a 	mov	r4,r2
81129674:	11302fc0 	call	811302fc <OSSemPost>
81129678:	00000606 	br	81129694 <__malloc_unlock+0xc0>
8112967c:	e0bffa17 	ldw	r2,-24(fp)
81129680:	e0bffd15 	stw	r2,-12(fp)
81129684:	e0bffd17 	ldw	r2,-12(fp)
81129688:	1001703a 	wrctl	status,r2
8112968c:	00000106 	br	81129694 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
81129690:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
81129694:	e037883a 	mov	sp,fp
81129698:	dfc00117 	ldw	ra,4(sp)
8112969c:	df000017 	ldw	fp,0(sp)
811296a0:	dec00204 	addi	sp,sp,8
811296a4:	f800283a 	ret

811296a8 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811296a8:	defff704 	addi	sp,sp,-36
811296ac:	de00012e 	bgeu	sp,et,811296b4 <OSEventNameGet+0xc>
811296b0:	003b68fa 	trap	3
811296b4:	dfc00815 	stw	ra,32(sp)
811296b8:	df000715 	stw	fp,28(sp)
811296bc:	df000704 	addi	fp,sp,28
811296c0:	e13ffd15 	stw	r4,-12(fp)
811296c4:	e17ffe15 	stw	r5,-8(fp)
811296c8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811296cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811296d0:	e0bfff17 	ldw	r2,-4(fp)
811296d4:	1000021e 	bne	r2,zero,811296e0 <OSEventNameGet+0x38>
        return (0);
811296d8:	0005883a 	mov	r2,zero
811296dc:	00003706 	br	811297bc <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
811296e0:	e0bffd17 	ldw	r2,-12(fp)
811296e4:	1000051e 	bne	r2,zero,811296fc <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
811296e8:	e0bfff17 	ldw	r2,-4(fp)
811296ec:	00c00104 	movi	r3,4
811296f0:	10c00005 	stb	r3,0(r2)
        return (0);
811296f4:	0005883a 	mov	r2,zero
811296f8:	00003006 	br	811297bc <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
811296fc:	e0bffe17 	ldw	r2,-8(fp)
81129700:	1000051e 	bne	r2,zero,81129718 <OSEventNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81129704:	e0bfff17 	ldw	r2,-4(fp)
81129708:	00c00304 	movi	r3,12
8112970c:	10c00005 	stb	r3,0(r2)
        return (0);
81129710:	0005883a 	mov	r2,zero
81129714:	00002906 	br	811297bc <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81129718:	d0a08a03 	ldbu	r2,-32216(gp)
8112971c:	10803fcc 	andi	r2,r2,255
81129720:	10000526 	beq	r2,zero,81129738 <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
81129724:	e0bfff17 	ldw	r2,-4(fp)
81129728:	00c00444 	movi	r3,17
8112972c:	10c00005 	stb	r3,0(r2)
        return (0);
81129730:	0005883a 	mov	r2,zero
81129734:	00002106 	br	811297bc <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
81129738:	e0bffd17 	ldw	r2,-12(fp)
8112973c:	10800003 	ldbu	r2,0(r2)
81129740:	10803fcc 	andi	r2,r2,255
81129744:	10bfffc4 	addi	r2,r2,-1
81129748:	10800128 	cmpgeui	r2,r2,4
8112974c:	10000526 	beq	r2,zero,81129764 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81129750:	e0bfff17 	ldw	r2,-4(fp)
81129754:	00c00044 	movi	r3,1
81129758:	10c00005 	stb	r3,0(r2)
             return (0);
8112975c:	0005883a 	mov	r2,zero
81129760:	00001606 	br	811297bc <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81129764:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129768:	0005303a 	rdctl	r2,status
8112976c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129770:	e0fffb17 	ldw	r3,-20(fp)
81129774:	00bfff84 	movi	r2,-2
81129778:	1884703a 	and	r2,r3,r2
8112977c:	1001703a 	wrctl	status,r2
  
  return context;
81129780:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
81129784:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
81129788:	e0bffd17 	ldw	r2,-12(fp)
8112978c:	10800444 	addi	r2,r2,17
81129790:	100b883a 	mov	r5,r2
81129794:	e13ffe17 	ldw	r4,-8(fp)
81129798:	112b2180 	call	8112b218 <OS_StrCopy>
8112979c:	e0bffa05 	stb	r2,-24(fp)
811297a0:	e0bff917 	ldw	r2,-28(fp)
811297a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811297a8:	e0bffc17 	ldw	r2,-16(fp)
811297ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811297b0:	e0bfff17 	ldw	r2,-4(fp)
811297b4:	10000005 	stb	zero,0(r2)
    return (len);
811297b8:	e0bffa03 	ldbu	r2,-24(fp)
}
811297bc:	e037883a 	mov	sp,fp
811297c0:	dfc00117 	ldw	ra,4(sp)
811297c4:	df000017 	ldw	fp,0(sp)
811297c8:	dec00204 	addi	sp,sp,8
811297cc:	f800283a 	ret

811297d0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811297d0:	defff604 	addi	sp,sp,-40
811297d4:	de00012e 	bgeu	sp,et,811297dc <OSEventNameSet+0xc>
811297d8:	003b68fa 	trap	3
811297dc:	dfc00915 	stw	ra,36(sp)
811297e0:	df000815 	stw	fp,32(sp)
811297e4:	df000804 	addi	fp,sp,32
811297e8:	e13ffd15 	stw	r4,-12(fp)
811297ec:	e17ffe15 	stw	r5,-8(fp)
811297f0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811297f4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811297f8:	e0bfff17 	ldw	r2,-4(fp)
811297fc:	10004026 	beq	r2,zero,81129900 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81129800:	e0bffd17 	ldw	r2,-12(fp)
81129804:	1000041e 	bne	r2,zero,81129818 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
81129808:	e0bfff17 	ldw	r2,-4(fp)
8112980c:	00c00104 	movi	r3,4
81129810:	10c00005 	stb	r3,0(r2)
        return;
81129814:	00003b06 	br	81129904 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81129818:	e0bffe17 	ldw	r2,-8(fp)
8112981c:	1000041e 	bne	r2,zero,81129830 <OSEventNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
81129820:	e0bfff17 	ldw	r2,-4(fp)
81129824:	00c00304 	movi	r3,12
81129828:	10c00005 	stb	r3,0(r2)
        return;
8112982c:	00003506 	br	81129904 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81129830:	d0a08a03 	ldbu	r2,-32216(gp)
81129834:	10803fcc 	andi	r2,r2,255
81129838:	10000426 	beq	r2,zero,8112984c <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112983c:	e0bfff17 	ldw	r2,-4(fp)
81129840:	00c00484 	movi	r3,18
81129844:	10c00005 	stb	r3,0(r2)
        return;
81129848:	00002e06 	br	81129904 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
8112984c:	e0bffd17 	ldw	r2,-12(fp)
81129850:	10800003 	ldbu	r2,0(r2)
81129854:	10803fcc 	andi	r2,r2,255
81129858:	10bfffc4 	addi	r2,r2,-1
8112985c:	10800128 	cmpgeui	r2,r2,4
81129860:	10000426 	beq	r2,zero,81129874 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81129864:	e0bfff17 	ldw	r2,-4(fp)
81129868:	00c00044 	movi	r3,1
8112986c:	10c00005 	stb	r3,0(r2)
             return;
81129870:	00002406 	br	81129904 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81129874:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129878:	0005303a 	rdctl	r2,status
8112987c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129880:	e0fffc17 	ldw	r3,-16(fp)
81129884:	00bfff84 	movi	r2,-2
81129888:	1884703a 	and	r2,r3,r2
8112988c:	1001703a 	wrctl	status,r2
  
  return context;
81129890:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
81129894:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
81129898:	e13ffe17 	ldw	r4,-8(fp)
8112989c:	112b2940 	call	8112b294 <OS_StrLen>
811298a0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
811298a4:	e0bffa03 	ldbu	r2,-24(fp)
811298a8:	10800830 	cmpltui	r2,r2,32
811298ac:	1000081e 	bne	r2,zero,811298d0 <OSEventNameSet+0x100>
811298b0:	e0bff817 	ldw	r2,-32(fp)
811298b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811298b8:	e0bff917 	ldw	r2,-28(fp)
811298bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
811298c0:	e0bfff17 	ldw	r2,-4(fp)
811298c4:	00c002c4 	movi	r3,11
811298c8:	10c00005 	stb	r3,0(r2)
        return;
811298cc:	00000d06 	br	81129904 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
811298d0:	e0bffd17 	ldw	r2,-12(fp)
811298d4:	10800444 	addi	r2,r2,17
811298d8:	e17ffe17 	ldw	r5,-8(fp)
811298dc:	1009883a 	mov	r4,r2
811298e0:	112b2180 	call	8112b218 <OS_StrCopy>
811298e4:	e0bff817 	ldw	r2,-32(fp)
811298e8:	e0bffb15 	stw	r2,-20(fp)
811298ec:	e0bffb17 	ldw	r2,-20(fp)
811298f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811298f4:	e0bfff17 	ldw	r2,-4(fp)
811298f8:	10000005 	stb	zero,0(r2)
811298fc:	00000106 	br	81129904 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81129900:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81129904:	e037883a 	mov	sp,fp
81129908:	dfc00117 	ldw	ra,4(sp)
8112990c:	df000017 	ldw	fp,0(sp)
81129910:	dec00204 	addi	sp,sp,8
81129914:	f800283a 	ret

81129918 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
81129918:	deffed04 	addi	sp,sp,-76
8112991c:	de00012e 	bgeu	sp,et,81129924 <OSEventPendMulti+0xc>
81129920:	003b68fa 	trap	3
81129924:	dfc01215 	stw	ra,72(sp)
81129928:	df001115 	stw	fp,68(sp)
8112992c:	df001104 	addi	fp,sp,68
81129930:	e13ffc15 	stw	r4,-16(fp)
81129934:	e17ffd15 	stw	r5,-12(fp)
81129938:	e1bffe15 	stw	r6,-8(fp)
8112993c:	3805883a 	mov	r2,r7
81129940:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
81129944:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
81129948:	e0800217 	ldw	r2,8(fp)
8112994c:	1000021e 	bne	r2,zero,81129958 <OSEventPendMulti+0x40>
        return (0);
81129950:	0005883a 	mov	r2,zero
81129954:	00017106 	br	81129f1c <OSEventPendMulti+0x604>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
81129958:	e0bffc17 	ldw	r2,-16(fp)
8112995c:	1000051e 	bne	r2,zero,81129974 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEVENT_NULL;
81129960:	e0800217 	ldw	r2,8(fp)
81129964:	00c00104 	movi	r3,4
81129968:	10c00005 	stb	r3,0(r2)
        return (0);
8112996c:	0005883a 	mov	r2,zero
81129970:	00016a06 	br	81129f1c <OSEventPendMulti+0x604>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
81129974:	e0bffd17 	ldw	r2,-12(fp)
81129978:	1000051e 	bne	r2,zero,81129990 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
8112997c:	e0800217 	ldw	r2,8(fp)
81129980:	00c00104 	movi	r3,4
81129984:	10c00005 	stb	r3,0(r2)
        return (0);
81129988:	0005883a 	mov	r2,zero
8112998c:	00016306 	br	81129f1c <OSEventPendMulti+0x604>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
81129990:	e0bffe17 	ldw	r2,-8(fp)
81129994:	1000051e 	bne	r2,zero,811299ac <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEVENT_NULL;
81129998:	e0800217 	ldw	r2,8(fp)
8112999c:	00c00104 	movi	r3,4
811299a0:	10c00005 	stb	r3,0(r2)
        return (0);
811299a4:	0005883a 	mov	r2,zero
811299a8:	00015c06 	br	81129f1c <OSEventPendMulti+0x604>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
811299ac:	e0bffd17 	ldw	r2,-12(fp)
811299b0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
811299b4:	e0bffc17 	ldw	r2,-16(fp)
811299b8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
811299bc:	e0bfef17 	ldw	r2,-68(fp)
811299c0:	10800017 	ldw	r2,0(r2)
811299c4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
811299c8:	00001906 	br	81129a30 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
811299cc:	e0bff017 	ldw	r2,-64(fp)
811299d0:	10800003 	ldbu	r2,0(r2)
811299d4:	10803fcc 	andi	r2,r2,255
811299d8:	10c000a0 	cmpeqi	r3,r2,2
811299dc:	1800091e 	bne	r3,zero,81129a04 <OSEventPendMulti+0xec>
811299e0:	10c000e0 	cmpeqi	r3,r2,3
811299e4:	1800091e 	bne	r3,zero,81129a0c <OSEventPendMulti+0xf4>
811299e8:	10800060 	cmpeqi	r2,r2,1
811299ec:	1000091e 	bne	r2,zero,81129a14 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
811299f0:	e0800217 	ldw	r2,8(fp)
811299f4:	00c00044 	movi	r3,1
811299f8:	10c00005 	stb	r3,0(r2)
                 return (0);
811299fc:	0005883a 	mov	r2,zero
81129a00:	00014606 	br	81129f1c <OSEventPendMulti+0x604>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
81129a04:	0001883a 	nop
81129a08:	00000306 	br	81129a18 <OSEventPendMulti+0x100>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
81129a0c:	0001883a 	nop
81129a10:	00000106 	br	81129a18 <OSEventPendMulti+0x100>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
81129a14:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
81129a18:	e0bfef17 	ldw	r2,-68(fp)
81129a1c:	10800104 	addi	r2,r2,4
81129a20:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81129a24:	e0bfef17 	ldw	r2,-68(fp)
81129a28:	10800017 	ldw	r2,0(r2)
81129a2c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
81129a30:	e0bff017 	ldw	r2,-64(fp)
81129a34:	103fe51e 	bne	r2,zero,811299cc <__reset+0xfb1099cc>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
81129a38:	d0a08a03 	ldbu	r2,-32216(gp)
81129a3c:	10803fcc 	andi	r2,r2,255
81129a40:	10000526 	beq	r2,zero,81129a58 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
81129a44:	e0800217 	ldw	r2,8(fp)
81129a48:	00c00084 	movi	r3,2
81129a4c:	10c00005 	stb	r3,0(r2)
        return (0);
81129a50:	0005883a 	mov	r2,zero
81129a54:	00013106 	br	81129f1c <OSEventPendMulti+0x604>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
81129a58:	d0a07803 	ldbu	r2,-32288(gp)
81129a5c:	10803fcc 	andi	r2,r2,255
81129a60:	10000526 	beq	r2,zero,81129a78 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
81129a64:	e0800217 	ldw	r2,8(fp)
81129a68:	00c00344 	movi	r3,13
81129a6c:	10c00005 	stb	r3,0(r2)
        return (0);
81129a70:	0005883a 	mov	r2,zero
81129a74:	00012906 	br	81129f1c <OSEventPendMulti+0x604>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129a78:	0005303a 	rdctl	r2,status
81129a7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129a80:	e0fffb17 	ldw	r3,-20(fp)
81129a84:	00bfff84 	movi	r2,-2
81129a88:	1884703a 	and	r2,r3,r2
81129a8c:	1001703a 	wrctl	status,r2
  
  return context;
81129a90:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
81129a94:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
81129a98:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
81129a9c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
81129aa0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
81129aa4:	e0bffc17 	ldw	r2,-16(fp)
81129aa8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
81129aac:	e0bfef17 	ldw	r2,-68(fp)
81129ab0:	10800017 	ldw	r2,0(r2)
81129ab4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81129ab8:	00008106 	br	81129cc0 <OSEventPendMulti+0x3a8>
        switch (pevent->OSEventType) {
81129abc:	e0bff017 	ldw	r2,-64(fp)
81129ac0:	10800003 	ldbu	r2,0(r2)
81129ac4:	10803fcc 	andi	r2,r2,255
81129ac8:	10c000a0 	cmpeqi	r3,r2,2
81129acc:	18003c1e 	bne	r3,zero,81129bc0 <OSEventPendMulti+0x2a8>
81129ad0:	10c000e0 	cmpeqi	r3,r2,3
81129ad4:	1800031e 	bne	r3,zero,81129ae4 <OSEventPendMulti+0x1cc>
81129ad8:	10800060 	cmpeqi	r2,r2,1
81129adc:	10001e1e 	bne	r2,zero,81129b58 <OSEventPendMulti+0x240>
81129ae0:	00006606 	br	81129c7c <OSEventPendMulti+0x364>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
81129ae4:	e0bff017 	ldw	r2,-64(fp)
81129ae8:	1080020b 	ldhu	r2,8(r2)
81129aec:	10bfffcc 	andi	r2,r2,65535
81129af0:	10001526 	beq	r2,zero,81129b48 <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
81129af4:	e0bff017 	ldw	r2,-64(fp)
81129af8:	1080020b 	ldhu	r2,8(r2)
81129afc:	10bfffc4 	addi	r2,r2,-1
81129b00:	1007883a 	mov	r3,r2
81129b04:	e0bff017 	ldw	r2,-64(fp)
81129b08:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
81129b0c:	e0bffd17 	ldw	r2,-12(fp)
81129b10:	10c00104 	addi	r3,r2,4
81129b14:	e0fffd15 	stw	r3,-12(fp)
81129b18:	e0fff017 	ldw	r3,-64(fp)
81129b1c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
81129b20:	00800044 	movi	r2,1
81129b24:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
81129b28:	e0bffe17 	ldw	r2,-8(fp)
81129b2c:	10c00104 	addi	r3,r2,4
81129b30:	e0fffe15 	stw	r3,-8(fp)
81129b34:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
81129b38:	e0bff18b 	ldhu	r2,-58(fp)
81129b3c:	10800044 	addi	r2,r2,1
81129b40:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
81129b44:	00005806 	br	81129ca8 <OSEventPendMulti+0x390>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
81129b48:	e0bff203 	ldbu	r2,-56(fp)
81129b4c:	10800054 	ori	r2,r2,1
81129b50:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81129b54:	00005406 	br	81129ca8 <OSEventPendMulti+0x390>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
81129b58:	e0bff017 	ldw	r2,-64(fp)
81129b5c:	10800117 	ldw	r2,4(r2)
81129b60:	10001326 	beq	r2,zero,81129bb0 <OSEventPendMulti+0x298>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
81129b64:	e0bffe17 	ldw	r2,-8(fp)
81129b68:	10c00104 	addi	r3,r2,4
81129b6c:	e0fffe15 	stw	r3,-8(fp)
81129b70:	e0fff017 	ldw	r3,-64(fp)
81129b74:	18c00117 	ldw	r3,4(r3)
81129b78:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
81129b7c:	e0bff017 	ldw	r2,-64(fp)
81129b80:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
81129b84:	e0bffd17 	ldw	r2,-12(fp)
81129b88:	10c00104 	addi	r3,r2,4
81129b8c:	e0fffd15 	stw	r3,-12(fp)
81129b90:	e0fff017 	ldw	r3,-64(fp)
81129b94:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
81129b98:	00800044 	movi	r2,1
81129b9c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81129ba0:	e0bff18b 	ldhu	r2,-58(fp)
81129ba4:	10800044 	addi	r2,r2,1
81129ba8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
81129bac:	00003e06 	br	81129ca8 <OSEventPendMulti+0x390>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
81129bb0:	e0bff203 	ldbu	r2,-56(fp)
81129bb4:	10800094 	ori	r2,r2,2
81129bb8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81129bbc:	00003a06 	br	81129ca8 <OSEventPendMulti+0x390>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
81129bc0:	e0bff017 	ldw	r2,-64(fp)
81129bc4:	10800117 	ldw	r2,4(r2)
81129bc8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
81129bcc:	e0bff517 	ldw	r2,-44(fp)
81129bd0:	1080058b 	ldhu	r2,22(r2)
81129bd4:	10bfffcc 	andi	r2,r2,65535
81129bd8:	10002426 	beq	r2,zero,81129c6c <OSEventPendMulti+0x354>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
81129bdc:	e0bffe17 	ldw	r2,-8(fp)
81129be0:	10c00104 	addi	r3,r2,4
81129be4:	e0fffe15 	stw	r3,-8(fp)
81129be8:	e0fff517 	ldw	r3,-44(fp)
81129bec:	18c00417 	ldw	r3,16(r3)
81129bf0:	19400104 	addi	r5,r3,4
81129bf4:	e13ff517 	ldw	r4,-44(fp)
81129bf8:	21400415 	stw	r5,16(r4)
81129bfc:	18c00017 	ldw	r3,0(r3)
81129c00:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
81129c04:	e0bff517 	ldw	r2,-44(fp)
81129c08:	10c00417 	ldw	r3,16(r2)
81129c0c:	e0bff517 	ldw	r2,-44(fp)
81129c10:	10800217 	ldw	r2,8(r2)
81129c14:	1880041e 	bne	r3,r2,81129c28 <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
81129c18:	e0bff517 	ldw	r2,-44(fp)
81129c1c:	10c00117 	ldw	r3,4(r2)
81129c20:	e0bff517 	ldw	r2,-44(fp)
81129c24:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
81129c28:	e0bff517 	ldw	r2,-44(fp)
81129c2c:	1080058b 	ldhu	r2,22(r2)
81129c30:	10bfffc4 	addi	r2,r2,-1
81129c34:	1007883a 	mov	r3,r2
81129c38:	e0bff517 	ldw	r2,-44(fp)
81129c3c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
81129c40:	e0bffd17 	ldw	r2,-12(fp)
81129c44:	10c00104 	addi	r3,r2,4
81129c48:	e0fffd15 	stw	r3,-12(fp)
81129c4c:	e0fff017 	ldw	r3,-64(fp)
81129c50:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
81129c54:	00800044 	movi	r2,1
81129c58:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81129c5c:	e0bff18b 	ldhu	r2,-58(fp)
81129c60:	10800044 	addi	r2,r2,1
81129c64:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
81129c68:	00000f06 	br	81129ca8 <OSEventPendMulti+0x390>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
81129c6c:	e0bff203 	ldbu	r2,-56(fp)
81129c70:	10800114 	ori	r2,r2,4
81129c74:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81129c78:	00000b06 	br	81129ca8 <OSEventPendMulti+0x390>
81129c7c:	e0bff317 	ldw	r2,-52(fp)
81129c80:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129c84:	e0bff417 	ldw	r2,-48(fp)
81129c88:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
81129c8c:	e0bffd17 	ldw	r2,-12(fp)
81129c90:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
81129c94:	e0800217 	ldw	r2,8(fp)
81129c98:	00c00044 	movi	r3,1
81129c9c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
81129ca0:	e0bff18b 	ldhu	r2,-58(fp)
81129ca4:	00009d06 	br	81129f1c <OSEventPendMulti+0x604>
        }
        pevents++;
81129ca8:	e0bfef17 	ldw	r2,-68(fp)
81129cac:	10800104 	addi	r2,r2,4
81129cb0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81129cb4:	e0bfef17 	ldw	r2,-68(fp)
81129cb8:	10800017 	ldw	r2,0(r2)
81129cbc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81129cc0:	e0bff017 	ldw	r2,-64(fp)
81129cc4:	103f7d1e 	bne	r2,zero,81129abc <__reset+0xfb109abc>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
81129cc8:	e0bff103 	ldbu	r2,-60(fp)
81129ccc:	10800058 	cmpnei	r2,r2,1
81129cd0:	10000a1e 	bne	r2,zero,81129cfc <OSEventPendMulti+0x3e4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
81129cd4:	e0bffd17 	ldw	r2,-12(fp)
81129cd8:	10000015 	stw	zero,0(r2)
81129cdc:	e0bff317 	ldw	r2,-52(fp)
81129ce0:	e0bff615 	stw	r2,-40(fp)
81129ce4:	e0bff617 	ldw	r2,-40(fp)
81129ce8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
81129cec:	e0800217 	ldw	r2,8(fp)
81129cf0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
81129cf4:	e0bff18b 	ldhu	r2,-58(fp)
81129cf8:	00008806 	br	81129f1c <OSEventPendMulti+0x604>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
81129cfc:	d0a08b17 	ldw	r2,-32212(gp)
81129d00:	d0e08b17 	ldw	r3,-32212(gp)
81129d04:	19000c03 	ldbu	r4,48(r3)
81129d08:	e0fff203 	ldbu	r3,-56(fp)
81129d0c:	20c6b03a 	or	r3,r4,r3
81129d10:	1809883a 	mov	r4,r3
81129d14:	00ffe004 	movi	r3,-128
81129d18:	20c6b03a 	or	r3,r4,r3
81129d1c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81129d20:	d0a08b17 	ldw	r2,-32212(gp)
81129d24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
81129d28:	d0a08b17 	ldw	r2,-32212(gp)
81129d2c:	e0ffff0b 	ldhu	r3,-4(fp)
81129d30:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
81129d34:	e13ffc17 	ldw	r4,-16(fp)
81129d38:	112a8c00 	call	8112a8c0 <OS_EventTaskWaitMulti>
81129d3c:	e0bff317 	ldw	r2,-52(fp)
81129d40:	e0bff915 	stw	r2,-28(fp)
81129d44:	e0bff917 	ldw	r2,-28(fp)
81129d48:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
81129d4c:	112b0c40 	call	8112b0c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129d50:	0005303a 	rdctl	r2,status
81129d54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129d58:	e0fff717 	ldw	r3,-36(fp)
81129d5c:	00bfff84 	movi	r2,-2
81129d60:	1884703a 	and	r2,r3,r2
81129d64:	1001703a 	wrctl	status,r2
  
  return context;
81129d68:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
81129d6c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
81129d70:	d0a08b17 	ldw	r2,-32212(gp)
81129d74:	10800c43 	ldbu	r2,49(r2)
81129d78:	10803fcc 	andi	r2,r2,255
81129d7c:	10000226 	beq	r2,zero,81129d88 <OSEventPendMulti+0x470>
81129d80:	108000a0 	cmpeqi	r2,r2,2
81129d84:	10001826 	beq	r2,zero,81129de8 <OSEventPendMulti+0x4d0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
81129d88:	d0a08b17 	ldw	r2,-32212(gp)
81129d8c:	10800717 	ldw	r2,28(r2)
81129d90:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
81129d94:	e0bff017 	ldw	r2,-64(fp)
81129d98:	10000b26 	beq	r2,zero,81129dc8 <OSEventPendMulti+0x4b0>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
81129d9c:	e0bffd17 	ldw	r2,-12(fp)
81129da0:	10c00104 	addi	r3,r2,4
81129da4:	e0fffd15 	stw	r3,-12(fp)
81129da8:	e0fff017 	ldw	r3,-64(fp)
81129dac:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
81129db0:	e0bffd17 	ldw	r2,-12(fp)
81129db4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
81129db8:	e0bff18b 	ldhu	r2,-58(fp)
81129dbc:	10800044 	addi	r2,r2,1
81129dc0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
81129dc4:	00000d06 	br	81129dfc <OSEventPendMulti+0x4e4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
81129dc8:	d0a08b17 	ldw	r2,-32212(gp)
81129dcc:	00c00044 	movi	r3,1
81129dd0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81129dd4:	d0a08b17 	ldw	r2,-32212(gp)
81129dd8:	e17ffc17 	ldw	r5,-16(fp)
81129ddc:	1009883a 	mov	r4,r2
81129de0:	112aad80 	call	8112aad8 <OS_EventTaskRemoveMulti>
             }
			 break;
81129de4:	00000506 	br	81129dfc <OSEventPendMulti+0x4e4>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81129de8:	d0a08b17 	ldw	r2,-32212(gp)
81129dec:	e17ffc17 	ldw	r5,-16(fp)
81129df0:	1009883a 	mov	r4,r2
81129df4:	112aad80 	call	8112aad8 <OS_EventTaskRemoveMulti>
             break;
81129df8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
81129dfc:	d0a08b17 	ldw	r2,-32212(gp)
81129e00:	10800c43 	ldbu	r2,49(r2)
81129e04:	10803fcc 	andi	r2,r2,255
81129e08:	10000326 	beq	r2,zero,81129e18 <OSEventPendMulti+0x500>
81129e0c:	108000a0 	cmpeqi	r2,r2,2
81129e10:	1000231e 	bne	r2,zero,81129ea0 <OSEventPendMulti+0x588>
81129e14:	00002a06 	br	81129ec0 <OSEventPendMulti+0x5a8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
81129e18:	e0bff017 	ldw	r2,-64(fp)
81129e1c:	10800003 	ldbu	r2,0(r2)
81129e20:	10803fcc 	andi	r2,r2,255
81129e24:	0080100e 	bge	zero,r2,81129e68 <OSEventPendMulti+0x550>
81129e28:	10c000d0 	cmplti	r3,r2,3
81129e2c:	1800071e 	bne	r3,zero,81129e4c <OSEventPendMulti+0x534>
81129e30:	108000e0 	cmpeqi	r2,r2,3
81129e34:	10000c26 	beq	r2,zero,81129e68 <OSEventPendMulti+0x550>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
81129e38:	e0bffe17 	ldw	r2,-8(fp)
81129e3c:	10c00104 	addi	r3,r2,4
81129e40:	e0fffe15 	stw	r3,-8(fp)
81129e44:	10000015 	stw	zero,0(r2)
                      break;
81129e48:	00001206 	br	81129e94 <OSEventPendMulti+0x57c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
81129e4c:	e0bffe17 	ldw	r2,-8(fp)
81129e50:	10c00104 	addi	r3,r2,4
81129e54:	e0fffe15 	stw	r3,-8(fp)
81129e58:	d0e08b17 	ldw	r3,-32212(gp)
81129e5c:	18c00917 	ldw	r3,36(r3)
81129e60:	10c00015 	stw	r3,0(r2)
                      break;
81129e64:	00000b06 	br	81129e94 <OSEventPendMulti+0x57c>
81129e68:	e0bff317 	ldw	r2,-52(fp)
81129e6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129e70:	e0bff817 	ldw	r2,-32(fp)
81129e74:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
81129e78:	e0bffd17 	ldw	r2,-12(fp)
81129e7c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
81129e80:	e0800217 	ldw	r2,8(fp)
81129e84:	00c00044 	movi	r3,1
81129e88:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
81129e8c:	e0bff18b 	ldhu	r2,-58(fp)
81129e90:	00002206 	br	81129f1c <OSEventPendMulti+0x604>
             }
            *perr = OS_ERR_NONE;
81129e94:	e0800217 	ldw	r2,8(fp)
81129e98:	10000005 	stb	zero,0(r2)
             break;
81129e9c:	00001006 	br	81129ee0 <OSEventPendMulti+0x5c8>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
81129ea0:	e0bffe17 	ldw	r2,-8(fp)
81129ea4:	10c00104 	addi	r3,r2,4
81129ea8:	e0fffe15 	stw	r3,-8(fp)
81129eac:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
81129eb0:	e0800217 	ldw	r2,8(fp)
81129eb4:	00c00384 	movi	r3,14
81129eb8:	10c00005 	stb	r3,0(r2)
             break;
81129ebc:	00000806 	br	81129ee0 <OSEventPendMulti+0x5c8>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
81129ec0:	e0bffe17 	ldw	r2,-8(fp)
81129ec4:	10c00104 	addi	r3,r2,4
81129ec8:	e0fffe15 	stw	r3,-8(fp)
81129ecc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
81129ed0:	e0800217 	ldw	r2,8(fp)
81129ed4:	00c00284 	movi	r3,10
81129ed8:	10c00005 	stb	r3,0(r2)
             break;
81129edc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
81129ee0:	d0a08b17 	ldw	r2,-32212(gp)
81129ee4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
81129ee8:	d0a08b17 	ldw	r2,-32212(gp)
81129eec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
81129ef0:	d0a08b17 	ldw	r2,-32212(gp)
81129ef4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81129ef8:	d0a08b17 	ldw	r2,-32212(gp)
81129efc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
81129f00:	d0a08b17 	ldw	r2,-32212(gp)
81129f04:	10000915 	stw	zero,36(r2)
81129f08:	e0bff317 	ldw	r2,-52(fp)
81129f0c:	e0bffa15 	stw	r2,-24(fp)
81129f10:	e0bffa17 	ldw	r2,-24(fp)
81129f14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
81129f18:	e0bff18b 	ldhu	r2,-58(fp)
}
81129f1c:	e037883a 	mov	sp,fp
81129f20:	dfc00117 	ldw	ra,4(sp)
81129f24:	df000017 	ldw	fp,0(sp)
81129f28:	dec00204 	addi	sp,sp,8
81129f2c:	f800283a 	ret

81129f30 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
81129f30:	defffe04 	addi	sp,sp,-8
81129f34:	de00012e 	bgeu	sp,et,81129f3c <OSInit+0xc>
81129f38:	003b68fa 	trap	3
81129f3c:	dfc00115 	stw	ra,4(sp)
81129f40:	df000015 	stw	fp,0(sp)
81129f44:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
81129f48:	113c5040 	call	8113c504 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
81129f4c:	112ad380 	call	8112ad38 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
81129f50:	112ad880 	call	8112ad88 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
81129f54:	112af0c0 	call	8112af0c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
81129f58:	112ac500 	call	8112ac50 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
81129f5c:	112cecc0 	call	8112cecc <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
81129f60:	112d8140 	call	8112d814 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
81129f64:	112fae40 	call	8112fae4 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
81129f68:	112adfc0 	call	8112adfc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
81129f6c:	112ae840 	call	8112ae84 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
81129f70:	1132e880 	call	81132e88 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
81129f74:	113c5300 	call	8113c530 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
81129f78:	112b7e80 	call	8112b7e8 <OSDebugInit>
#endif
}
81129f7c:	0001883a 	nop
81129f80:	e037883a 	mov	sp,fp
81129f84:	dfc00117 	ldw	ra,4(sp)
81129f88:	df000017 	ldw	fp,0(sp)
81129f8c:	dec00204 	addi	sp,sp,8
81129f90:	f800283a 	ret

81129f94 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
81129f94:	deffff04 	addi	sp,sp,-4
81129f98:	de00012e 	bgeu	sp,et,81129fa0 <OSIntEnter+0xc>
81129f9c:	003b68fa 	trap	3
81129fa0:	df000015 	stw	fp,0(sp)
81129fa4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
81129fa8:	d0a07a03 	ldbu	r2,-32280(gp)
81129fac:	10803fcc 	andi	r2,r2,255
81129fb0:	10800058 	cmpnei	r2,r2,1
81129fb4:	1000071e 	bne	r2,zero,81129fd4 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
81129fb8:	d0a08a03 	ldbu	r2,-32216(gp)
81129fbc:	10803fcc 	andi	r2,r2,255
81129fc0:	10803fe0 	cmpeqi	r2,r2,255
81129fc4:	1000031e 	bne	r2,zero,81129fd4 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
81129fc8:	d0a08a03 	ldbu	r2,-32216(gp)
81129fcc:	10800044 	addi	r2,r2,1
81129fd0:	d0a08a05 	stb	r2,-32216(gp)
        }
    }
}
81129fd4:	0001883a 	nop
81129fd8:	e037883a 	mov	sp,fp
81129fdc:	df000017 	ldw	fp,0(sp)
81129fe0:	dec00104 	addi	sp,sp,4
81129fe4:	f800283a 	ret

81129fe8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
81129fe8:	defffb04 	addi	sp,sp,-20
81129fec:	de00012e 	bgeu	sp,et,81129ff4 <OSIntExit+0xc>
81129ff0:	003b68fa 	trap	3
81129ff4:	dfc00415 	stw	ra,16(sp)
81129ff8:	df000315 	stw	fp,12(sp)
81129ffc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112a000:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
8112a004:	d0a07a03 	ldbu	r2,-32280(gp)
8112a008:	10803fcc 	andi	r2,r2,255
8112a00c:	10800058 	cmpnei	r2,r2,1
8112a010:	10002f1e 	bne	r2,zero,8112a0d0 <OSIntExit+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a014:	0005303a 	rdctl	r2,status
8112a018:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a01c:	e0ffff17 	ldw	r3,-4(fp)
8112a020:	00bfff84 	movi	r2,-2
8112a024:	1884703a 	and	r2,r3,r2
8112a028:	1001703a 	wrctl	status,r2
  
  return context;
8112a02c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112a030:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
8112a034:	d0a08a03 	ldbu	r2,-32216(gp)
8112a038:	10803fcc 	andi	r2,r2,255
8112a03c:	10000326 	beq	r2,zero,8112a04c <OSIntExit+0x64>
            OSIntNesting--;
8112a040:	d0a08a03 	ldbu	r2,-32216(gp)
8112a044:	10bfffc4 	addi	r2,r2,-1
8112a048:	d0a08a05 	stb	r2,-32216(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
8112a04c:	d0a08a03 	ldbu	r2,-32216(gp)
8112a050:	10803fcc 	andi	r2,r2,255
8112a054:	10001a1e 	bne	r2,zero,8112a0c0 <OSIntExit+0xd8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
8112a058:	d0a07803 	ldbu	r2,-32288(gp)
8112a05c:	10803fcc 	andi	r2,r2,255
8112a060:	1000171e 	bne	r2,zero,8112a0c0 <OSIntExit+0xd8>
                OS_SchedNew();
8112a064:	112b19c0 	call	8112b19c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
8112a068:	d0e07c83 	ldbu	r3,-32270(gp)
8112a06c:	d0a07cc3 	ldbu	r2,-32269(gp)
8112a070:	18c03fcc 	andi	r3,r3,255
8112a074:	10803fcc 	andi	r2,r2,255
8112a078:	18801126 	beq	r3,r2,8112a0c0 <OSIntExit+0xd8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
8112a07c:	d0a07c83 	ldbu	r2,-32270(gp)
8112a080:	10c03fcc 	andi	r3,r2,255
8112a084:	00a04574 	movhi	r2,33045
8112a088:	10807b04 	addi	r2,r2,492
8112a08c:	18c7883a 	add	r3,r3,r3
8112a090:	18c7883a 	add	r3,r3,r3
8112a094:	10c5883a 	add	r2,r2,r3
8112a098:	10800017 	ldw	r2,0(r2)
8112a09c:	d0a08515 	stw	r2,-32236(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
8112a0a0:	d0a08517 	ldw	r2,-32236(gp)
8112a0a4:	10c00e17 	ldw	r3,56(r2)
8112a0a8:	18c00044 	addi	r3,r3,1
8112a0ac:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
8112a0b0:	d0a07f17 	ldw	r2,-32260(gp)
8112a0b4:	10800044 	addi	r2,r2,1
8112a0b8:	d0a07f15 	stw	r2,-32260(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
8112a0bc:	113c1c40 	call	8113c1c4 <OSCtxSw>
8112a0c0:	e0bffd17 	ldw	r2,-12(fp)
8112a0c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a0c8:	e0bffe17 	ldw	r2,-8(fp)
8112a0cc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112a0d0:	0001883a 	nop
8112a0d4:	e037883a 	mov	sp,fp
8112a0d8:	dfc00117 	ldw	ra,4(sp)
8112a0dc:	df000017 	ldw	fp,0(sp)
8112a0e0:	dec00204 	addi	sp,sp,8
8112a0e4:	f800283a 	ret

8112a0e8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
8112a0e8:	defffc04 	addi	sp,sp,-16
8112a0ec:	de00012e 	bgeu	sp,et,8112a0f4 <OSSchedLock+0xc>
8112a0f0:	003b68fa 	trap	3
8112a0f4:	df000315 	stw	fp,12(sp)
8112a0f8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a0fc:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
8112a100:	d0a07a03 	ldbu	r2,-32280(gp)
8112a104:	10803fcc 	andi	r2,r2,255
8112a108:	10800058 	cmpnei	r2,r2,1
8112a10c:	1000161e 	bne	r2,zero,8112a168 <OSSchedLock+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a110:	0005303a 	rdctl	r2,status
8112a114:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a118:	e0ffff17 	ldw	r3,-4(fp)
8112a11c:	00bfff84 	movi	r2,-2
8112a120:	1884703a 	and	r2,r3,r2
8112a124:	1001703a 	wrctl	status,r2
  
  return context;
8112a128:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112a12c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
8112a130:	d0a08a03 	ldbu	r2,-32216(gp)
8112a134:	10803fcc 	andi	r2,r2,255
8112a138:	1000071e 	bne	r2,zero,8112a158 <OSSchedLock+0x70>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
8112a13c:	d0a07803 	ldbu	r2,-32288(gp)
8112a140:	10803fcc 	andi	r2,r2,255
8112a144:	10803fe0 	cmpeqi	r2,r2,255
8112a148:	1000031e 	bne	r2,zero,8112a158 <OSSchedLock+0x70>
                OSLockNesting++;                 /* Increment lock nesting level                       */
8112a14c:	d0a07803 	ldbu	r2,-32288(gp)
8112a150:	10800044 	addi	r2,r2,1
8112a154:	d0a07805 	stb	r2,-32288(gp)
8112a158:	e0bffd17 	ldw	r2,-12(fp)
8112a15c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a160:	e0bffe17 	ldw	r2,-8(fp)
8112a164:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
8112a168:	0001883a 	nop
8112a16c:	e037883a 	mov	sp,fp
8112a170:	df000017 	ldw	fp,0(sp)
8112a174:	dec00104 	addi	sp,sp,4
8112a178:	f800283a 	ret

8112a17c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
8112a17c:	defff804 	addi	sp,sp,-32
8112a180:	de00012e 	bgeu	sp,et,8112a188 <OSSchedUnlock+0xc>
8112a184:	003b68fa 	trap	3
8112a188:	dfc00715 	stw	ra,28(sp)
8112a18c:	df000615 	stw	fp,24(sp)
8112a190:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112a194:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
8112a198:	d0a07a03 	ldbu	r2,-32280(gp)
8112a19c:	10803fcc 	andi	r2,r2,255
8112a1a0:	10800058 	cmpnei	r2,r2,1
8112a1a4:	1000281e 	bne	r2,zero,8112a248 <OSSchedUnlock+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a1a8:	0005303a 	rdctl	r2,status
8112a1ac:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a1b0:	e0ffff17 	ldw	r3,-4(fp)
8112a1b4:	00bfff84 	movi	r2,-2
8112a1b8:	1884703a 	and	r2,r3,r2
8112a1bc:	1001703a 	wrctl	status,r2
  
  return context;
8112a1c0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112a1c4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
8112a1c8:	d0a07803 	ldbu	r2,-32288(gp)
8112a1cc:	10803fcc 	andi	r2,r2,255
8112a1d0:	10001926 	beq	r2,zero,8112a238 <OSSchedUnlock+0xbc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
8112a1d4:	d0a07803 	ldbu	r2,-32288(gp)
8112a1d8:	10bfffc4 	addi	r2,r2,-1
8112a1dc:	d0a07805 	stb	r2,-32288(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
8112a1e0:	d0a07803 	ldbu	r2,-32288(gp)
8112a1e4:	10803fcc 	andi	r2,r2,255
8112a1e8:	10000e1e 	bne	r2,zero,8112a224 <OSSchedUnlock+0xa8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
8112a1ec:	d0a08a03 	ldbu	r2,-32216(gp)
8112a1f0:	10803fcc 	andi	r2,r2,255
8112a1f4:	1000061e 	bne	r2,zero,8112a210 <OSSchedUnlock+0x94>
8112a1f8:	e0bffa17 	ldw	r2,-24(fp)
8112a1fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a200:	e0bffb17 	ldw	r2,-20(fp)
8112a204:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
8112a208:	112b0c40 	call	8112b0c4 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
8112a20c:	00000e06 	br	8112a248 <OSSchedUnlock+0xcc>
8112a210:	e0bffa17 	ldw	r2,-24(fp)
8112a214:	e0bffc15 	stw	r2,-16(fp)
8112a218:	e0bffc17 	ldw	r2,-16(fp)
8112a21c:	1001703a 	wrctl	status,r2
8112a220:	00000906 	br	8112a248 <OSSchedUnlock+0xcc>
8112a224:	e0bffa17 	ldw	r2,-24(fp)
8112a228:	e0bffd15 	stw	r2,-12(fp)
8112a22c:	e0bffd17 	ldw	r2,-12(fp)
8112a230:	1001703a 	wrctl	status,r2
8112a234:	00000406 	br	8112a248 <OSSchedUnlock+0xcc>
8112a238:	e0bffa17 	ldw	r2,-24(fp)
8112a23c:	e0bffe15 	stw	r2,-8(fp)
8112a240:	e0bffe17 	ldw	r2,-8(fp)
8112a244:	1001703a 	wrctl	status,r2
8112a248:	0001883a 	nop
8112a24c:	e037883a 	mov	sp,fp
8112a250:	dfc00117 	ldw	ra,4(sp)
8112a254:	df000017 	ldw	fp,0(sp)
8112a258:	dec00204 	addi	sp,sp,8
8112a25c:	f800283a 	ret

8112a260 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
8112a260:	defffe04 	addi	sp,sp,-8
8112a264:	de00012e 	bgeu	sp,et,8112a26c <OSStart+0xc>
8112a268:	003b68fa 	trap	3
8112a26c:	dfc00115 	stw	ra,4(sp)
8112a270:	df000015 	stw	fp,0(sp)
8112a274:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
8112a278:	d0a07a03 	ldbu	r2,-32280(gp)
8112a27c:	10803fcc 	andi	r2,r2,255
8112a280:	10000f1e 	bne	r2,zero,8112a2c0 <OSStart+0x60>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
8112a284:	112b19c0 	call	8112b19c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
8112a288:	d0a07c83 	ldbu	r2,-32270(gp)
8112a28c:	d0a07cc5 	stb	r2,-32269(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
8112a290:	d0a07c83 	ldbu	r2,-32270(gp)
8112a294:	10c03fcc 	andi	r3,r2,255
8112a298:	00a04574 	movhi	r2,33045
8112a29c:	10807b04 	addi	r2,r2,492
8112a2a0:	18c7883a 	add	r3,r3,r3
8112a2a4:	18c7883a 	add	r3,r3,r3
8112a2a8:	10c5883a 	add	r2,r2,r3
8112a2ac:	10800017 	ldw	r2,0(r2)
8112a2b0:	d0a08515 	stw	r2,-32236(gp)
        OSTCBCur      = OSTCBHighRdy;
8112a2b4:	d0a08517 	ldw	r2,-32236(gp)
8112a2b8:	d0a08b15 	stw	r2,-32212(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
8112a2bc:	113c2600 	call	8113c260 <OSStartHighRdy>
    }
}
8112a2c0:	0001883a 	nop
8112a2c4:	e037883a 	mov	sp,fp
8112a2c8:	dfc00117 	ldw	ra,4(sp)
8112a2cc:	df000017 	ldw	fp,0(sp)
8112a2d0:	dec00204 	addi	sp,sp,8
8112a2d4:	f800283a 	ret

8112a2d8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
8112a2d8:	defff904 	addi	sp,sp,-28
8112a2dc:	de00012e 	bgeu	sp,et,8112a2e4 <OSStatInit+0xc>
8112a2e0:	003b68fa 	trap	3
8112a2e4:	dfc00615 	stw	ra,24(sp)
8112a2e8:	df000515 	stw	fp,20(sp)
8112a2ec:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a2f0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
8112a2f4:	01000084 	movi	r4,2
8112a2f8:	1131e000 	call	81131e00 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a2fc:	0005303a 	rdctl	r2,status
8112a300:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a304:	e0fffc17 	ldw	r3,-16(fp)
8112a308:	00bfff84 	movi	r2,-2
8112a30c:	1884703a 	and	r2,r3,r2
8112a310:	1001703a 	wrctl	status,r2
  
  return context;
8112a314:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
8112a318:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
8112a31c:	d0207b15 	stw	zero,-32276(gp)
8112a320:	e0bffb17 	ldw	r2,-20(fp)
8112a324:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a328:	e0bffd17 	ldw	r2,-12(fp)
8112a32c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
8112a330:	01001904 	movi	r4,100
8112a334:	1131e000 	call	81131e00 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a338:	0005303a 	rdctl	r2,status
8112a33c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a340:	e0fffe17 	ldw	r3,-8(fp)
8112a344:	00bfff84 	movi	r2,-2
8112a348:	1884703a 	and	r2,r3,r2
8112a34c:	1001703a 	wrctl	status,r2
  
  return context;
8112a350:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
8112a354:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
8112a358:	d0a07b17 	ldw	r2,-32276(gp)
8112a35c:	d0a08115 	stw	r2,-32252(gp)
    OSStatRdy    = OS_TRUE;
8112a360:	00800044 	movi	r2,1
8112a364:	d0a09005 	stb	r2,-32192(gp)
8112a368:	e0bffb17 	ldw	r2,-20(fp)
8112a36c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a370:	e0bfff17 	ldw	r2,-4(fp)
8112a374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8112a378:	0001883a 	nop
8112a37c:	e037883a 	mov	sp,fp
8112a380:	dfc00117 	ldw	ra,4(sp)
8112a384:	df000017 	ldw	fp,0(sp)
8112a388:	dec00204 	addi	sp,sp,8
8112a38c:	f800283a 	ret

8112a390 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
8112a390:	defff704 	addi	sp,sp,-36
8112a394:	de00012e 	bgeu	sp,et,8112a39c <OSTimeTick+0xc>
8112a398:	003b68fa 	trap	3
8112a39c:	dfc00815 	stw	ra,32(sp)
8112a3a0:	df000715 	stw	fp,28(sp)
8112a3a4:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112a3a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
8112a3ac:	113c4b00 	call	8113c4b0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a3b0:	0005303a 	rdctl	r2,status
8112a3b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a3b8:	e0fffd17 	ldw	r3,-12(fp)
8112a3bc:	00bfff84 	movi	r2,-2
8112a3c0:	1884703a 	and	r2,r3,r2
8112a3c4:	1001703a 	wrctl	status,r2
  
  return context;
8112a3c8:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
8112a3cc:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
8112a3d0:	d0a08d17 	ldw	r2,-32204(gp)
8112a3d4:	10800044 	addi	r2,r2,1
8112a3d8:	d0a08d15 	stw	r2,-32204(gp)
8112a3dc:	e0bffb17 	ldw	r2,-20(fp)
8112a3e0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a3e4:	e0bfff17 	ldw	r2,-4(fp)
8112a3e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
8112a3ec:	d0a07a03 	ldbu	r2,-32280(gp)
8112a3f0:	10803fcc 	andi	r2,r2,255
8112a3f4:	10800058 	cmpnei	r2,r2,1
8112a3f8:	10006a1e 	bne	r2,zero,8112a5a4 <OSTimeTick+0x214>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
8112a3fc:	d0a07e03 	ldbu	r2,-32264(gp)
8112a400:	10803fcc 	andi	r2,r2,255
8112a404:	10c00060 	cmpeqi	r3,r2,1
8112a408:	1800061e 	bne	r3,zero,8112a424 <OSTimeTick+0x94>
8112a40c:	10c000a0 	cmpeqi	r3,r2,2
8112a410:	1800061e 	bne	r3,zero,8112a42c <OSTimeTick+0x9c>
8112a414:	10000a1e 	bne	r2,zero,8112a440 <OSTimeTick+0xb0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
8112a418:	00800044 	movi	r2,1
8112a41c:	e0bffa05 	stb	r2,-24(fp)
                 break;
8112a420:	00000b06 	br	8112a450 <OSTimeTick+0xc0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
8112a424:	e03ffa05 	stb	zero,-24(fp)
                 break;
8112a428:	00000906 	br	8112a450 <OSTimeTick+0xc0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
8112a42c:	00800044 	movi	r2,1
8112a430:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
8112a434:	00800044 	movi	r2,1
8112a438:	d0a07e05 	stb	r2,-32264(gp)
                 break;
8112a43c:	00000406 	br	8112a450 <OSTimeTick+0xc0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
8112a440:	00800044 	movi	r2,1
8112a444:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
8112a448:	d0207e05 	stb	zero,-32264(gp)
                 break;
8112a44c:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
8112a450:	e0bffa03 	ldbu	r2,-24(fp)
8112a454:	10005226 	beq	r2,zero,8112a5a0 <OSTimeTick+0x210>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
8112a458:	d0a07d17 	ldw	r2,-32268(gp)
8112a45c:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112a460:	00004906 	br	8112a588 <OSTimeTick+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a464:	0005303a 	rdctl	r2,status
8112a468:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a46c:	e0fffc17 	ldw	r3,-16(fp)
8112a470:	00bfff84 	movi	r2,-2
8112a474:	1884703a 	and	r2,r3,r2
8112a478:	1001703a 	wrctl	status,r2
  
  return context;
8112a47c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
8112a480:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
8112a484:	e0bff917 	ldw	r2,-28(fp)
8112a488:	10800b8b 	ldhu	r2,46(r2)
8112a48c:	10bfffcc 	andi	r2,r2,65535
8112a490:	10003626 	beq	r2,zero,8112a56c <OSTimeTick+0x1dc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
8112a494:	e0bff917 	ldw	r2,-28(fp)
8112a498:	10800b8b 	ldhu	r2,46(r2)
8112a49c:	10bfffc4 	addi	r2,r2,-1
8112a4a0:	1007883a 	mov	r3,r2
8112a4a4:	e0bff917 	ldw	r2,-28(fp)
8112a4a8:	10c00b8d 	sth	r3,46(r2)
8112a4ac:	e0bff917 	ldw	r2,-28(fp)
8112a4b0:	10800b8b 	ldhu	r2,46(r2)
8112a4b4:	10bfffcc 	andi	r2,r2,65535
8112a4b8:	10002c1e 	bne	r2,zero,8112a56c <OSTimeTick+0x1dc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8112a4bc:	e0bff917 	ldw	r2,-28(fp)
8112a4c0:	10800c03 	ldbu	r2,48(r2)
8112a4c4:	10803fcc 	andi	r2,r2,255
8112a4c8:	10800dcc 	andi	r2,r2,55
8112a4cc:	10000b26 	beq	r2,zero,8112a4fc <OSTimeTick+0x16c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
8112a4d0:	e0bff917 	ldw	r2,-28(fp)
8112a4d4:	10c00c03 	ldbu	r3,48(r2)
8112a4d8:	00bff204 	movi	r2,-56
8112a4dc:	1884703a 	and	r2,r3,r2
8112a4e0:	1007883a 	mov	r3,r2
8112a4e4:	e0bff917 	ldw	r2,-28(fp)
8112a4e8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
8112a4ec:	e0bff917 	ldw	r2,-28(fp)
8112a4f0:	00c00044 	movi	r3,1
8112a4f4:	10c00c45 	stb	r3,49(r2)
8112a4f8:	00000206 	br	8112a504 <OSTimeTick+0x174>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112a4fc:	e0bff917 	ldw	r2,-28(fp)
8112a500:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
8112a504:	e0bff917 	ldw	r2,-28(fp)
8112a508:	10800c03 	ldbu	r2,48(r2)
8112a50c:	10803fcc 	andi	r2,r2,255
8112a510:	1080020c 	andi	r2,r2,8
8112a514:	1000151e 	bne	r2,zero,8112a56c <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
8112a518:	e0bff917 	ldw	r2,-28(fp)
8112a51c:	10c00d83 	ldbu	r3,54(r2)
8112a520:	d0a08703 	ldbu	r2,-32228(gp)
8112a524:	1884b03a 	or	r2,r3,r2
8112a528:	d0a08705 	stb	r2,-32228(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112a52c:	e0bff917 	ldw	r2,-28(fp)
8112a530:	10800d03 	ldbu	r2,52(r2)
8112a534:	10c03fcc 	andi	r3,r2,255
8112a538:	e0bff917 	ldw	r2,-28(fp)
8112a53c:	10800d03 	ldbu	r2,52(r2)
8112a540:	11003fcc 	andi	r4,r2,255
8112a544:	d0a08744 	addi	r2,gp,-32227
8112a548:	2085883a 	add	r2,r4,r2
8112a54c:	11000003 	ldbu	r4,0(r2)
8112a550:	e0bff917 	ldw	r2,-28(fp)
8112a554:	10800d43 	ldbu	r2,53(r2)
8112a558:	2084b03a 	or	r2,r4,r2
8112a55c:	1009883a 	mov	r4,r2
8112a560:	d0a08744 	addi	r2,gp,-32227
8112a564:	1885883a 	add	r2,r3,r2
8112a568:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
8112a56c:	e0bff917 	ldw	r2,-28(fp)
8112a570:	10800517 	ldw	r2,20(r2)
8112a574:	e0bff915 	stw	r2,-28(fp)
8112a578:	e0bffb17 	ldw	r2,-20(fp)
8112a57c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a580:	e0bffe17 	ldw	r2,-8(fp)
8112a584:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112a588:	e0bff917 	ldw	r2,-28(fp)
8112a58c:	10800c83 	ldbu	r2,50(r2)
8112a590:	10803fcc 	andi	r2,r2,255
8112a594:	10800a18 	cmpnei	r2,r2,40
8112a598:	103fb21e 	bne	r2,zero,8112a464 <__reset+0xfb10a464>
8112a59c:	00000106 	br	8112a5a4 <OSTimeTick+0x214>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
8112a5a0:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
8112a5a4:	e037883a 	mov	sp,fp
8112a5a8:	dfc00117 	ldw	ra,4(sp)
8112a5ac:	df000017 	ldw	fp,0(sp)
8112a5b0:	dec00204 	addi	sp,sp,8
8112a5b4:	f800283a 	ret

8112a5b8 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
8112a5b8:	deffff04 	addi	sp,sp,-4
8112a5bc:	de00012e 	bgeu	sp,et,8112a5c4 <OSVersion+0xc>
8112a5c0:	003b68fa 	trap	3
8112a5c4:	df000015 	stw	fp,0(sp)
8112a5c8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
8112a5cc:	00804784 	movi	r2,286
}
8112a5d0:	e037883a 	mov	sp,fp
8112a5d4:	df000017 	ldw	fp,0(sp)
8112a5d8:	dec00104 	addi	sp,sp,4
8112a5dc:	f800283a 	ret

8112a5e0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
8112a5e0:	deffff04 	addi	sp,sp,-4
8112a5e4:	de00012e 	bgeu	sp,et,8112a5ec <OS_Dummy+0xc>
8112a5e8:	003b68fa 	trap	3
8112a5ec:	df000015 	stw	fp,0(sp)
8112a5f0:	d839883a 	mov	fp,sp
}
8112a5f4:	0001883a 	nop
8112a5f8:	e037883a 	mov	sp,fp
8112a5fc:	df000017 	ldw	fp,0(sp)
8112a600:	dec00104 	addi	sp,sp,4
8112a604:	f800283a 	ret

8112a608 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
8112a608:	defff804 	addi	sp,sp,-32
8112a60c:	de00012e 	bgeu	sp,et,8112a614 <OS_EventTaskRdy+0xc>
8112a610:	003b68fa 	trap	3
8112a614:	dfc00715 	stw	ra,28(sp)
8112a618:	df000615 	stw	fp,24(sp)
8112a61c:	df000604 	addi	fp,sp,24
8112a620:	e13ffc15 	stw	r4,-16(fp)
8112a624:	e17ffd15 	stw	r5,-12(fp)
8112a628:	3007883a 	mov	r3,r6
8112a62c:	3805883a 	mov	r2,r7
8112a630:	e0fffe05 	stb	r3,-8(fp)
8112a634:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
8112a638:	e0bffc17 	ldw	r2,-16(fp)
8112a63c:	10800283 	ldbu	r2,10(r2)
8112a640:	10c03fcc 	andi	r3,r2,255
8112a644:	00a04534 	movhi	r2,33044
8112a648:	1080e504 	addi	r2,r2,916
8112a64c:	10c5883a 	add	r2,r2,r3
8112a650:	10800003 	ldbu	r2,0(r2)
8112a654:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
8112a658:	e0bffa03 	ldbu	r2,-24(fp)
8112a65c:	e0fffc17 	ldw	r3,-16(fp)
8112a660:	1885883a 	add	r2,r3,r2
8112a664:	108002c4 	addi	r2,r2,11
8112a668:	10800003 	ldbu	r2,0(r2)
8112a66c:	10c03fcc 	andi	r3,r2,255
8112a670:	00a04534 	movhi	r2,33044
8112a674:	1080e504 	addi	r2,r2,916
8112a678:	10c5883a 	add	r2,r2,r3
8112a67c:	10800003 	ldbu	r2,0(r2)
8112a680:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
8112a684:	e0bffa03 	ldbu	r2,-24(fp)
8112a688:	100490fa 	slli	r2,r2,3
8112a68c:	1007883a 	mov	r3,r2
8112a690:	e0bffa43 	ldbu	r2,-23(fp)
8112a694:	1885883a 	add	r2,r3,r2
8112a698:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
8112a69c:	e0fffa83 	ldbu	r3,-22(fp)
8112a6a0:	00a04574 	movhi	r2,33045
8112a6a4:	10807b04 	addi	r2,r2,492
8112a6a8:	18c7883a 	add	r3,r3,r3
8112a6ac:	18c7883a 	add	r3,r3,r3
8112a6b0:	10c5883a 	add	r2,r2,r3
8112a6b4:	10800017 	ldw	r2,0(r2)
8112a6b8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
8112a6bc:	e0bffb17 	ldw	r2,-20(fp)
8112a6c0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
8112a6c4:	e0bffb17 	ldw	r2,-20(fp)
8112a6c8:	e0fffd17 	ldw	r3,-12(fp)
8112a6cc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
8112a6d0:	e0bffb17 	ldw	r2,-20(fp)
8112a6d4:	10800c03 	ldbu	r2,48(r2)
8112a6d8:	1007883a 	mov	r3,r2
8112a6dc:	e0bffe03 	ldbu	r2,-8(fp)
8112a6e0:	0084303a 	nor	r2,zero,r2
8112a6e4:	1884703a 	and	r2,r3,r2
8112a6e8:	1007883a 	mov	r3,r2
8112a6ec:	e0bffb17 	ldw	r2,-20(fp)
8112a6f0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
8112a6f4:	e0bffb17 	ldw	r2,-20(fp)
8112a6f8:	e0ffff03 	ldbu	r3,-4(fp)
8112a6fc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
8112a700:	e0bffb17 	ldw	r2,-20(fp)
8112a704:	10800c03 	ldbu	r2,48(r2)
8112a708:	10803fcc 	andi	r2,r2,255
8112a70c:	1080020c 	andi	r2,r2,8
8112a710:	1000111e 	bne	r2,zero,8112a758 <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
8112a714:	e0bffb17 	ldw	r2,-20(fp)
8112a718:	10c00d83 	ldbu	r3,54(r2)
8112a71c:	d0a08703 	ldbu	r2,-32228(gp)
8112a720:	1884b03a 	or	r2,r3,r2
8112a724:	d0a08705 	stb	r2,-32228(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
8112a728:	e0fffa03 	ldbu	r3,-24(fp)
8112a72c:	e13ffa03 	ldbu	r4,-24(fp)
8112a730:	d0a08744 	addi	r2,gp,-32227
8112a734:	2085883a 	add	r2,r4,r2
8112a738:	11000003 	ldbu	r4,0(r2)
8112a73c:	e0bffb17 	ldw	r2,-20(fp)
8112a740:	10800d43 	ldbu	r2,53(r2)
8112a744:	2084b03a 	or	r2,r4,r2
8112a748:	1009883a 	mov	r4,r2
8112a74c:	d0a08744 	addi	r2,gp,-32227
8112a750:	1885883a 	add	r2,r3,r2
8112a754:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
8112a758:	e17ffc17 	ldw	r5,-16(fp)
8112a75c:	e13ffb17 	ldw	r4,-20(fp)
8112a760:	112aa180 	call	8112aa18 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
8112a764:	e0bffb17 	ldw	r2,-20(fp)
8112a768:	10800817 	ldw	r2,32(r2)
8112a76c:	10000826 	beq	r2,zero,8112a790 <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112a770:	e0bffb17 	ldw	r2,-20(fp)
8112a774:	10800817 	ldw	r2,32(r2)
8112a778:	100b883a 	mov	r5,r2
8112a77c:	e13ffb17 	ldw	r4,-20(fp)
8112a780:	112aad80 	call	8112aad8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
8112a784:	e0bffb17 	ldw	r2,-20(fp)
8112a788:	e0fffc17 	ldw	r3,-16(fp)
8112a78c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
8112a790:	e0bffa83 	ldbu	r2,-22(fp)
}
8112a794:	e037883a 	mov	sp,fp
8112a798:	dfc00117 	ldw	ra,4(sp)
8112a79c:	df000017 	ldw	fp,0(sp)
8112a7a0:	dec00204 	addi	sp,sp,8
8112a7a4:	f800283a 	ret

8112a7a8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
8112a7a8:	defffd04 	addi	sp,sp,-12
8112a7ac:	de00012e 	bgeu	sp,et,8112a7b4 <OS_EventTaskWait+0xc>
8112a7b0:	003b68fa 	trap	3
8112a7b4:	df000215 	stw	fp,8(sp)
8112a7b8:	df000204 	addi	fp,sp,8
8112a7bc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
8112a7c0:	d0a08b17 	ldw	r2,-32212(gp)
8112a7c4:	e0ffff17 	ldw	r3,-4(fp)
8112a7c8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
8112a7cc:	d0a08b17 	ldw	r2,-32212(gp)
8112a7d0:	10800d03 	ldbu	r2,52(r2)
8112a7d4:	10803fcc 	andi	r2,r2,255
8112a7d8:	d0e08b17 	ldw	r3,-32212(gp)
8112a7dc:	18c00d03 	ldbu	r3,52(r3)
8112a7e0:	18c03fcc 	andi	r3,r3,255
8112a7e4:	e13fff17 	ldw	r4,-4(fp)
8112a7e8:	20c7883a 	add	r3,r4,r3
8112a7ec:	18c002c4 	addi	r3,r3,11
8112a7f0:	19000003 	ldbu	r4,0(r3)
8112a7f4:	d0e08b17 	ldw	r3,-32212(gp)
8112a7f8:	18c00d43 	ldbu	r3,53(r3)
8112a7fc:	20c6b03a 	or	r3,r4,r3
8112a800:	1809883a 	mov	r4,r3
8112a804:	e0ffff17 	ldw	r3,-4(fp)
8112a808:	1885883a 	add	r2,r3,r2
8112a80c:	108002c4 	addi	r2,r2,11
8112a810:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
8112a814:	e0bfff17 	ldw	r2,-4(fp)
8112a818:	10c00283 	ldbu	r3,10(r2)
8112a81c:	d0a08b17 	ldw	r2,-32212(gp)
8112a820:	10800d83 	ldbu	r2,54(r2)
8112a824:	1884b03a 	or	r2,r3,r2
8112a828:	1007883a 	mov	r3,r2
8112a82c:	e0bfff17 	ldw	r2,-4(fp)
8112a830:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8112a834:	d0a08b17 	ldw	r2,-32212(gp)
8112a838:	10800d03 	ldbu	r2,52(r2)
8112a83c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112a840:	e0fffe03 	ldbu	r3,-8(fp)
8112a844:	e13ffe03 	ldbu	r4,-8(fp)
8112a848:	d0a08744 	addi	r2,gp,-32227
8112a84c:	2085883a 	add	r2,r4,r2
8112a850:	10800003 	ldbu	r2,0(r2)
8112a854:	1009883a 	mov	r4,r2
8112a858:	d0a08b17 	ldw	r2,-32212(gp)
8112a85c:	10800d43 	ldbu	r2,53(r2)
8112a860:	0084303a 	nor	r2,zero,r2
8112a864:	2084703a 	and	r2,r4,r2
8112a868:	1009883a 	mov	r4,r2
8112a86c:	d0a08744 	addi	r2,gp,-32227
8112a870:	1885883a 	add	r2,r3,r2
8112a874:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112a878:	e0fffe03 	ldbu	r3,-8(fp)
8112a87c:	d0a08744 	addi	r2,gp,-32227
8112a880:	1885883a 	add	r2,r3,r2
8112a884:	10800003 	ldbu	r2,0(r2)
8112a888:	10803fcc 	andi	r2,r2,255
8112a88c:	1000071e 	bne	r2,zero,8112a8ac <OS_EventTaskWait+0x104>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8112a890:	d0a08b17 	ldw	r2,-32212(gp)
8112a894:	10800d83 	ldbu	r2,54(r2)
8112a898:	0084303a 	nor	r2,zero,r2
8112a89c:	1007883a 	mov	r3,r2
8112a8a0:	d0a08703 	ldbu	r2,-32228(gp)
8112a8a4:	1884703a 	and	r2,r3,r2
8112a8a8:	d0a08705 	stb	r2,-32228(gp)
    }
}
8112a8ac:	0001883a 	nop
8112a8b0:	e037883a 	mov	sp,fp
8112a8b4:	df000017 	ldw	fp,0(sp)
8112a8b8:	dec00104 	addi	sp,sp,4
8112a8bc:	f800283a 	ret

8112a8c0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
8112a8c0:	defffb04 	addi	sp,sp,-20
8112a8c4:	de00012e 	bgeu	sp,et,8112a8cc <OS_EventTaskWaitMulti+0xc>
8112a8c8:	003b68fa 	trap	3
8112a8cc:	df000415 	stw	fp,16(sp)
8112a8d0:	df000404 	addi	fp,sp,16
8112a8d4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
8112a8d8:	d0a08b17 	ldw	r2,-32212(gp)
8112a8dc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
8112a8e0:	d0a08b17 	ldw	r2,-32212(gp)
8112a8e4:	e0ffff17 	ldw	r3,-4(fp)
8112a8e8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
8112a8ec:	e0bfff17 	ldw	r2,-4(fp)
8112a8f0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
8112a8f4:	e0bffc17 	ldw	r2,-16(fp)
8112a8f8:	10800017 	ldw	r2,0(r2)
8112a8fc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112a900:	00002006 	br	8112a984 <OS_EventTaskWaitMulti+0xc4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
8112a904:	d0a08b17 	ldw	r2,-32212(gp)
8112a908:	10800d03 	ldbu	r2,52(r2)
8112a90c:	10803fcc 	andi	r2,r2,255
8112a910:	d0e08b17 	ldw	r3,-32212(gp)
8112a914:	18c00d03 	ldbu	r3,52(r3)
8112a918:	18c03fcc 	andi	r3,r3,255
8112a91c:	e13ffd17 	ldw	r4,-12(fp)
8112a920:	20c7883a 	add	r3,r4,r3
8112a924:	18c002c4 	addi	r3,r3,11
8112a928:	19000003 	ldbu	r4,0(r3)
8112a92c:	d0e08b17 	ldw	r3,-32212(gp)
8112a930:	18c00d43 	ldbu	r3,53(r3)
8112a934:	20c6b03a 	or	r3,r4,r3
8112a938:	1809883a 	mov	r4,r3
8112a93c:	e0fffd17 	ldw	r3,-12(fp)
8112a940:	1885883a 	add	r2,r3,r2
8112a944:	108002c4 	addi	r2,r2,11
8112a948:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
8112a94c:	e0bffd17 	ldw	r2,-12(fp)
8112a950:	10c00283 	ldbu	r3,10(r2)
8112a954:	d0a08b17 	ldw	r2,-32212(gp)
8112a958:	10800d83 	ldbu	r2,54(r2)
8112a95c:	1884b03a 	or	r2,r3,r2
8112a960:	1007883a 	mov	r3,r2
8112a964:	e0bffd17 	ldw	r2,-12(fp)
8112a968:	10c00285 	stb	r3,10(r2)
        pevents++;
8112a96c:	e0bffc17 	ldw	r2,-16(fp)
8112a970:	10800104 	addi	r2,r2,4
8112a974:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
8112a978:	e0bffc17 	ldw	r2,-16(fp)
8112a97c:	10800017 	ldw	r2,0(r2)
8112a980:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
8112a984:	e0bffd17 	ldw	r2,-12(fp)
8112a988:	103fde1e 	bne	r2,zero,8112a904 <__reset+0xfb10a904>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8112a98c:	d0a08b17 	ldw	r2,-32212(gp)
8112a990:	10800d03 	ldbu	r2,52(r2)
8112a994:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
8112a998:	e0fffe03 	ldbu	r3,-8(fp)
8112a99c:	e13ffe03 	ldbu	r4,-8(fp)
8112a9a0:	d0a08744 	addi	r2,gp,-32227
8112a9a4:	2085883a 	add	r2,r4,r2
8112a9a8:	10800003 	ldbu	r2,0(r2)
8112a9ac:	1009883a 	mov	r4,r2
8112a9b0:	d0a08b17 	ldw	r2,-32212(gp)
8112a9b4:	10800d43 	ldbu	r2,53(r2)
8112a9b8:	0084303a 	nor	r2,zero,r2
8112a9bc:	2084703a 	and	r2,r4,r2
8112a9c0:	1009883a 	mov	r4,r2
8112a9c4:	d0a08744 	addi	r2,gp,-32227
8112a9c8:	1885883a 	add	r2,r3,r2
8112a9cc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112a9d0:	e0fffe03 	ldbu	r3,-8(fp)
8112a9d4:	d0a08744 	addi	r2,gp,-32227
8112a9d8:	1885883a 	add	r2,r3,r2
8112a9dc:	10800003 	ldbu	r2,0(r2)
8112a9e0:	10803fcc 	andi	r2,r2,255
8112a9e4:	1000071e 	bne	r2,zero,8112aa04 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
8112a9e8:	d0a08b17 	ldw	r2,-32212(gp)
8112a9ec:	10800d83 	ldbu	r2,54(r2)
8112a9f0:	0084303a 	nor	r2,zero,r2
8112a9f4:	1007883a 	mov	r3,r2
8112a9f8:	d0a08703 	ldbu	r2,-32228(gp)
8112a9fc:	1884703a 	and	r2,r3,r2
8112aa00:	d0a08705 	stb	r2,-32228(gp)
    }
}
8112aa04:	0001883a 	nop
8112aa08:	e037883a 	mov	sp,fp
8112aa0c:	df000017 	ldw	fp,0(sp)
8112aa10:	dec00104 	addi	sp,sp,4
8112aa14:	f800283a 	ret

8112aa18 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
8112aa18:	defffc04 	addi	sp,sp,-16
8112aa1c:	de00012e 	bgeu	sp,et,8112aa24 <OS_EventTaskRemove+0xc>
8112aa20:	003b68fa 	trap	3
8112aa24:	df000315 	stw	fp,12(sp)
8112aa28:	df000304 	addi	fp,sp,12
8112aa2c:	e13ffe15 	stw	r4,-8(fp)
8112aa30:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
8112aa34:	e0bffe17 	ldw	r2,-8(fp)
8112aa38:	10800d03 	ldbu	r2,52(r2)
8112aa3c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
8112aa40:	e0bffd03 	ldbu	r2,-12(fp)
8112aa44:	e0fffd03 	ldbu	r3,-12(fp)
8112aa48:	e13fff17 	ldw	r4,-4(fp)
8112aa4c:	20c7883a 	add	r3,r4,r3
8112aa50:	18c002c4 	addi	r3,r3,11
8112aa54:	18c00003 	ldbu	r3,0(r3)
8112aa58:	1809883a 	mov	r4,r3
8112aa5c:	e0fffe17 	ldw	r3,-8(fp)
8112aa60:	18c00d43 	ldbu	r3,53(r3)
8112aa64:	00c6303a 	nor	r3,zero,r3
8112aa68:	20c6703a 	and	r3,r4,r3
8112aa6c:	1809883a 	mov	r4,r3
8112aa70:	e0ffff17 	ldw	r3,-4(fp)
8112aa74:	1885883a 	add	r2,r3,r2
8112aa78:	108002c4 	addi	r2,r2,11
8112aa7c:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
8112aa80:	e0bffd03 	ldbu	r2,-12(fp)
8112aa84:	e0ffff17 	ldw	r3,-4(fp)
8112aa88:	1885883a 	add	r2,r3,r2
8112aa8c:	108002c4 	addi	r2,r2,11
8112aa90:	10800003 	ldbu	r2,0(r2)
8112aa94:	10803fcc 	andi	r2,r2,255
8112aa98:	10000a1e 	bne	r2,zero,8112aac4 <OS_EventTaskRemove+0xac>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
8112aa9c:	e0bfff17 	ldw	r2,-4(fp)
8112aaa0:	10800283 	ldbu	r2,10(r2)
8112aaa4:	1007883a 	mov	r3,r2
8112aaa8:	e0bffe17 	ldw	r2,-8(fp)
8112aaac:	10800d83 	ldbu	r2,54(r2)
8112aab0:	0084303a 	nor	r2,zero,r2
8112aab4:	1884703a 	and	r2,r3,r2
8112aab8:	1007883a 	mov	r3,r2
8112aabc:	e0bfff17 	ldw	r2,-4(fp)
8112aac0:	10c00285 	stb	r3,10(r2)
    }
}
8112aac4:	0001883a 	nop
8112aac8:	e037883a 	mov	sp,fp
8112aacc:	df000017 	ldw	fp,0(sp)
8112aad0:	dec00104 	addi	sp,sp,4
8112aad4:	f800283a 	ret

8112aad8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
8112aad8:	defffa04 	addi	sp,sp,-24
8112aadc:	de00012e 	bgeu	sp,et,8112aae4 <OS_EventTaskRemoveMulti+0xc>
8112aae0:	003b68fa 	trap	3
8112aae4:	df000515 	stw	fp,20(sp)
8112aae8:	df000504 	addi	fp,sp,20
8112aaec:	e13ffe15 	stw	r4,-8(fp)
8112aaf0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
8112aaf4:	e0bffe17 	ldw	r2,-8(fp)
8112aaf8:	10800d03 	ldbu	r2,52(r2)
8112aafc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
8112ab00:	e0bffe17 	ldw	r2,-8(fp)
8112ab04:	10800d83 	ldbu	r2,54(r2)
8112ab08:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
8112ab0c:	e0bffe17 	ldw	r2,-8(fp)
8112ab10:	10800d43 	ldbu	r2,53(r2)
8112ab14:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
8112ab18:	e0bfff17 	ldw	r2,-4(fp)
8112ab1c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
8112ab20:	e0bffb17 	ldw	r2,-20(fp)
8112ab24:	10800017 	ldw	r2,0(r2)
8112ab28:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
8112ab2c:	00002506 	br	8112abc4 <OS_EventTaskRemoveMulti+0xec>
        pevent->OSEventTbl[y]  &= ~bitx;
8112ab30:	e0bffd03 	ldbu	r2,-12(fp)
8112ab34:	e0fffd03 	ldbu	r3,-12(fp)
8112ab38:	e13ffc17 	ldw	r4,-16(fp)
8112ab3c:	20c7883a 	add	r3,r4,r3
8112ab40:	18c002c4 	addi	r3,r3,11
8112ab44:	18c00003 	ldbu	r3,0(r3)
8112ab48:	1809883a 	mov	r4,r3
8112ab4c:	e0fffd83 	ldbu	r3,-10(fp)
8112ab50:	00c6303a 	nor	r3,zero,r3
8112ab54:	20c6703a 	and	r3,r4,r3
8112ab58:	1809883a 	mov	r4,r3
8112ab5c:	e0fffc17 	ldw	r3,-16(fp)
8112ab60:	1885883a 	add	r2,r3,r2
8112ab64:	108002c4 	addi	r2,r2,11
8112ab68:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
8112ab6c:	e0bffd03 	ldbu	r2,-12(fp)
8112ab70:	e0fffc17 	ldw	r3,-16(fp)
8112ab74:	1885883a 	add	r2,r3,r2
8112ab78:	108002c4 	addi	r2,r2,11
8112ab7c:	10800003 	ldbu	r2,0(r2)
8112ab80:	10803fcc 	andi	r2,r2,255
8112ab84:	1000091e 	bne	r2,zero,8112abac <OS_EventTaskRemoveMulti+0xd4>
            pevent->OSEventGrp &= ~bity;
8112ab88:	e0bffc17 	ldw	r2,-16(fp)
8112ab8c:	10800283 	ldbu	r2,10(r2)
8112ab90:	1007883a 	mov	r3,r2
8112ab94:	e0bffd43 	ldbu	r2,-11(fp)
8112ab98:	0084303a 	nor	r2,zero,r2
8112ab9c:	1884703a 	and	r2,r3,r2
8112aba0:	1007883a 	mov	r3,r2
8112aba4:	e0bffc17 	ldw	r2,-16(fp)
8112aba8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
8112abac:	e0bffb17 	ldw	r2,-20(fp)
8112abb0:	10800104 	addi	r2,r2,4
8112abb4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
8112abb8:	e0bffb17 	ldw	r2,-20(fp)
8112abbc:	10800017 	ldw	r2,0(r2)
8112abc0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
8112abc4:	e0bffc17 	ldw	r2,-16(fp)
8112abc8:	103fd91e 	bne	r2,zero,8112ab30 <__reset+0xfb10ab30>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
8112abcc:	0001883a 	nop
8112abd0:	e037883a 	mov	sp,fp
8112abd4:	df000017 	ldw	fp,0(sp)
8112abd8:	dec00104 	addi	sp,sp,4
8112abdc:	f800283a 	ret

8112abe0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
8112abe0:	defffc04 	addi	sp,sp,-16
8112abe4:	de00012e 	bgeu	sp,et,8112abec <OS_EventWaitListInit+0xc>
8112abe8:	003b68fa 	trap	3
8112abec:	df000315 	stw	fp,12(sp)
8112abf0:	df000304 	addi	fp,sp,12
8112abf4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
8112abf8:	e0bfff17 	ldw	r2,-4(fp)
8112abfc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
8112ac00:	e0bfff17 	ldw	r2,-4(fp)
8112ac04:	108002c4 	addi	r2,r2,11
8112ac08:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112ac0c:	e03ffe05 	stb	zero,-8(fp)
8112ac10:	00000706 	br	8112ac30 <OS_EventWaitListInit+0x50>
        *ptbl++ = 0;
8112ac14:	e0bffd17 	ldw	r2,-12(fp)
8112ac18:	10c00044 	addi	r3,r2,1
8112ac1c:	e0fffd15 	stw	r3,-12(fp)
8112ac20:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112ac24:	e0bffe03 	ldbu	r2,-8(fp)
8112ac28:	10800044 	addi	r2,r2,1
8112ac2c:	e0bffe05 	stb	r2,-8(fp)
8112ac30:	e0bffe03 	ldbu	r2,-8(fp)
8112ac34:	108001b0 	cmpltui	r2,r2,6
8112ac38:	103ff61e 	bne	r2,zero,8112ac14 <__reset+0xfb10ac14>
        *ptbl++ = 0;
    }
}
8112ac3c:	0001883a 	nop
8112ac40:	e037883a 	mov	sp,fp
8112ac44:	df000017 	ldw	fp,0(sp)
8112ac48:	dec00104 	addi	sp,sp,4
8112ac4c:	f800283a 	ret

8112ac50 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
8112ac50:	defffb04 	addi	sp,sp,-20
8112ac54:	de00012e 	bgeu	sp,et,8112ac5c <OS_InitEventList+0xc>
8112ac58:	003b68fa 	trap	3
8112ac5c:	dfc00415 	stw	ra,16(sp)
8112ac60:	df000315 	stw	fp,12(sp)
8112ac64:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
8112ac68:	01430c04 	movi	r5,3120
8112ac6c:	01204574 	movhi	r4,33045
8112ac70:	2139d904 	addi	r4,r4,-6300
8112ac74:	112aff80 	call	8112aff8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
8112ac78:	00a04574 	movhi	r2,33045
8112ac7c:	10b9d904 	addi	r2,r2,-6300
8112ac80:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
8112ac84:	00a04574 	movhi	r2,33045
8112ac88:	10b9e604 	addi	r2,r2,-6248
8112ac8c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8112ac90:	e03ffd0d 	sth	zero,-12(fp)
8112ac94:	00001306 	br	8112ace4 <OS_InitEventList+0x94>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112ac98:	e0bffe17 	ldw	r2,-8(fp)
8112ac9c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
8112aca0:	e0bffe17 	ldw	r2,-8(fp)
8112aca4:	e0ffff17 	ldw	r3,-4(fp)
8112aca8:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
8112acac:	e0bffe17 	ldw	r2,-8(fp)
8112acb0:	00c00fc4 	movi	r3,63
8112acb4:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
8112acb8:	e0bffe17 	ldw	r2,-8(fp)
8112acbc:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
8112acc0:	e0bffe17 	ldw	r2,-8(fp)
8112acc4:	10800d04 	addi	r2,r2,52
8112acc8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
8112accc:	e0bfff17 	ldw	r2,-4(fp)
8112acd0:	10800d04 	addi	r2,r2,52
8112acd4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
8112acd8:	e0bffd0b 	ldhu	r2,-12(fp)
8112acdc:	10800044 	addi	r2,r2,1
8112ace0:	e0bffd0d 	sth	r2,-12(fp)
8112ace4:	e0bffd0b 	ldhu	r2,-12(fp)
8112ace8:	10800ef0 	cmpltui	r2,r2,59
8112acec:	103fea1e 	bne	r2,zero,8112ac98 <__reset+0xfb10ac98>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
8112acf0:	e0bffe17 	ldw	r2,-8(fp)
8112acf4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
8112acf8:	e0bffe17 	ldw	r2,-8(fp)
8112acfc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
8112ad00:	e0bffe17 	ldw	r2,-8(fp)
8112ad04:	00c00fc4 	movi	r3,63
8112ad08:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
8112ad0c:	e0bffe17 	ldw	r2,-8(fp)
8112ad10:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
8112ad14:	00a04574 	movhi	r2,33045
8112ad18:	10b9d904 	addi	r2,r2,-6300
8112ad1c:	d0a08915 	stw	r2,-32220(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
8112ad20:	0001883a 	nop
8112ad24:	e037883a 	mov	sp,fp
8112ad28:	dfc00117 	ldw	ra,4(sp)
8112ad2c:	df000017 	ldw	fp,0(sp)
8112ad30:	dec00204 	addi	sp,sp,8
8112ad34:	f800283a 	ret

8112ad38 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
8112ad38:	deffff04 	addi	sp,sp,-4
8112ad3c:	de00012e 	bgeu	sp,et,8112ad44 <OS_InitMisc+0xc>
8112ad40:	003b68fa 	trap	3
8112ad44:	df000015 	stw	fp,0(sp)
8112ad48:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
8112ad4c:	d0208d15 	stw	zero,-32204(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
8112ad50:	d0208a05 	stb	zero,-32216(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
8112ad54:	d0207805 	stb	zero,-32288(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
8112ad58:	d0208345 	stb	zero,-32243(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
8112ad5c:	d0207a05 	stb	zero,-32280(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
8112ad60:	d0207f15 	stw	zero,-32260(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
8112ad64:	d0207b15 	stw	zero,-32276(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
8112ad68:	d0209115 	stw	zero,-32188(gp)
    OSIdleCtrMax  = 0L;
8112ad6c:	d0208115 	stw	zero,-32252(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
8112ad70:	d0209005 	stb	zero,-32192(gp)
#endif
}
8112ad74:	0001883a 	nop
8112ad78:	e037883a 	mov	sp,fp
8112ad7c:	df000017 	ldw	fp,0(sp)
8112ad80:	dec00104 	addi	sp,sp,4
8112ad84:	f800283a 	ret

8112ad88 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
8112ad88:	defffd04 	addi	sp,sp,-12
8112ad8c:	de00012e 	bgeu	sp,et,8112ad94 <OS_InitRdyList+0xc>
8112ad90:	003b68fa 	trap	3
8112ad94:	df000215 	stw	fp,8(sp)
8112ad98:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
8112ad9c:	d0208705 	stb	zero,-32228(gp)
    prdytbl       = &OSRdyTbl[0];
8112ada0:	d0a08744 	addi	r2,gp,-32227
8112ada4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
8112ada8:	e03ffe05 	stb	zero,-8(fp)
8112adac:	00000706 	br	8112adcc <OS_InitRdyList+0x44>
        *prdytbl++ = 0;
8112adb0:	e0bfff17 	ldw	r2,-4(fp)
8112adb4:	10c00044 	addi	r3,r2,1
8112adb8:	e0ffff15 	stw	r3,-4(fp)
8112adbc:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
8112adc0:	e0bffe03 	ldbu	r2,-8(fp)
8112adc4:	10800044 	addi	r2,r2,1
8112adc8:	e0bffe05 	stb	r2,-8(fp)
8112adcc:	e0bffe03 	ldbu	r2,-8(fp)
8112add0:	108001b0 	cmpltui	r2,r2,6
8112add4:	103ff61e 	bne	r2,zero,8112adb0 <__reset+0xfb10adb0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
8112add8:	d0207cc5 	stb	zero,-32269(gp)
    OSPrioHighRdy = 0;
8112addc:	d0207c85 	stb	zero,-32270(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
8112ade0:	d0208515 	stw	zero,-32236(gp)
    OSTCBCur      = (OS_TCB *)0;
8112ade4:	d0208b15 	stw	zero,-32212(gp)
}
8112ade8:	0001883a 	nop
8112adec:	e037883a 	mov	sp,fp
8112adf0:	df000017 	ldw	fp,0(sp)
8112adf4:	dec00104 	addi	sp,sp,4
8112adf8:	f800283a 	ret

8112adfc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
8112adfc:	defff804 	addi	sp,sp,-32
8112ae00:	de00012e 	bgeu	sp,et,8112ae08 <OS_InitTaskIdle+0xc>
8112ae04:	003b68fa 	trap	3
8112ae08:	dfc00715 	stw	ra,28(sp)
8112ae0c:	df000615 	stw	fp,24(sp)
8112ae10:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
8112ae14:	008000c4 	movi	r2,3
8112ae18:	d8800415 	stw	r2,16(sp)
8112ae1c:	d8000315 	stw	zero,12(sp)
8112ae20:	00808004 	movi	r2,512
8112ae24:	d8800215 	stw	r2,8(sp)
8112ae28:	00a04574 	movhi	r2,33045
8112ae2c:	10b7d904 	addi	r2,r2,-8348
8112ae30:	d8800115 	stw	r2,4(sp)
8112ae34:	00bfffd4 	movui	r2,65535
8112ae38:	d8800015 	stw	r2,0(sp)
8112ae3c:	01c00a04 	movi	r7,40
8112ae40:	01a04574 	movhi	r6,33045
8112ae44:	31b9d804 	addi	r6,r6,-6304
8112ae48:	000b883a 	mov	r5,zero
8112ae4c:	012044f4 	movhi	r4,33043
8112ae50:	212cbc04 	addi	r4,r4,-19728
8112ae54:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
8112ae58:	e1bfff04 	addi	r6,fp,-4
8112ae5c:	01604534 	movhi	r5,33044
8112ae60:	29412504 	addi	r5,r5,1172
8112ae64:	01000a04 	movi	r4,40
8112ae68:	11315100 	call	81131510 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
8112ae6c:	0001883a 	nop
8112ae70:	e037883a 	mov	sp,fp
8112ae74:	dfc00117 	ldw	ra,4(sp)
8112ae78:	df000017 	ldw	fp,0(sp)
8112ae7c:	dec00204 	addi	sp,sp,8
8112ae80:	f800283a 	ret

8112ae84 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
8112ae84:	defff804 	addi	sp,sp,-32
8112ae88:	de00012e 	bgeu	sp,et,8112ae90 <OS_InitTaskStat+0xc>
8112ae8c:	003b68fa 	trap	3
8112ae90:	dfc00715 	stw	ra,28(sp)
8112ae94:	df000615 	stw	fp,24(sp)
8112ae98:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
8112ae9c:	008000c4 	movi	r2,3
8112aea0:	d8800415 	stw	r2,16(sp)
8112aea4:	d8000315 	stw	zero,12(sp)
8112aea8:	00808004 	movi	r2,512
8112aeac:	d8800215 	stw	r2,8(sp)
8112aeb0:	00a04574 	movhi	r2,33045
8112aeb4:	10b36104 	addi	r2,r2,-12924
8112aeb8:	d8800115 	stw	r2,4(sp)
8112aebc:	00bfff94 	movui	r2,65534
8112aec0:	d8800015 	stw	r2,0(sp)
8112aec4:	01c009c4 	movi	r7,39
8112aec8:	01a04574 	movhi	r6,33045
8112aecc:	31b56004 	addi	r6,r6,-10880
8112aed0:	000b883a 	mov	r5,zero
8112aed4:	012044f4 	movhi	r4,33043
8112aed8:	212cd504 	addi	r4,r4,-19628
8112aedc:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
8112aee0:	e1bfff04 	addi	r6,fp,-4
8112aee4:	01604534 	movhi	r5,33044
8112aee8:	29412904 	addi	r5,r5,1188
8112aeec:	010009c4 	movi	r4,39
8112aef0:	11315100 	call	81131510 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
8112aef4:	0001883a 	nop
8112aef8:	e037883a 	mov	sp,fp
8112aefc:	dfc00117 	ldw	ra,4(sp)
8112af00:	df000017 	ldw	fp,0(sp)
8112af04:	dec00204 	addi	sp,sp,8
8112af08:	f800283a 	ret

8112af0c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
8112af0c:	defffb04 	addi	sp,sp,-20
8112af10:	de00012e 	bgeu	sp,et,8112af18 <OS_InitTCBList+0xc>
8112af14:	003b68fa 	trap	3
8112af18:	dfc00415 	stw	ra,16(sp)
8112af1c:	df000315 	stw	fp,12(sp)
8112af20:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
8112af24:	01439604 	movi	r5,3672
8112af28:	01204574 	movhi	r4,33045
8112af2c:	213ce504 	addi	r4,r4,-3180
8112af30:	112aff80 	call	8112aff8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
8112af34:	01402904 	movi	r5,164
8112af38:	01204574 	movhi	r4,33045
8112af3c:	21007b04 	addi	r4,r4,492
8112af40:	112aff80 	call	8112aff8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
8112af44:	00a04574 	movhi	r2,33045
8112af48:	10bce504 	addi	r2,r2,-3180
8112af4c:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
8112af50:	00a04574 	movhi	r2,33045
8112af54:	10bd0004 	addi	r2,r2,-3072
8112af58:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
8112af5c:	e03ffd05 	stb	zero,-12(fp)
8112af60:	00001106 	br	8112afa8 <OS_InitTCBList+0x9c>
        ptcb1->OSTCBNext = ptcb2;
8112af64:	e0bffe17 	ldw	r2,-8(fp)
8112af68:	e0ffff17 	ldw	r3,-4(fp)
8112af6c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
8112af70:	e0bffe17 	ldw	r2,-8(fp)
8112af74:	00c00fc4 	movi	r3,63
8112af78:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
8112af7c:	e0bffe17 	ldw	r2,-8(fp)
8112af80:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
8112af84:	e0bffe17 	ldw	r2,-8(fp)
8112af88:	10801b04 	addi	r2,r2,108
8112af8c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
8112af90:	e0bfff17 	ldw	r2,-4(fp)
8112af94:	10801b04 	addi	r2,r2,108
8112af98:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
8112af9c:	e0bffd03 	ldbu	r2,-12(fp)
8112afa0:	10800044 	addi	r2,r2,1
8112afa4:	e0bffd05 	stb	r2,-12(fp)
8112afa8:	e0bffd03 	ldbu	r2,-12(fp)
8112afac:	10800870 	cmpltui	r2,r2,33
8112afb0:	103fec1e 	bne	r2,zero,8112af64 <__reset+0xfb10af64>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
8112afb4:	e0bffe17 	ldw	r2,-8(fp)
8112afb8:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
8112afbc:	e0bffe17 	ldw	r2,-8(fp)
8112afc0:	00c00fc4 	movi	r3,63
8112afc4:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
8112afc8:	e0bffe17 	ldw	r2,-8(fp)
8112afcc:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
8112afd0:	d0207d15 	stw	zero,-32268(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
8112afd4:	00a04574 	movhi	r2,33045
8112afd8:	10bce504 	addi	r2,r2,-3180
8112afdc:	d0a08215 	stw	r2,-32248(gp)
}
8112afe0:	0001883a 	nop
8112afe4:	e037883a 	mov	sp,fp
8112afe8:	dfc00117 	ldw	ra,4(sp)
8112afec:	df000017 	ldw	fp,0(sp)
8112aff0:	dec00204 	addi	sp,sp,8
8112aff4:	f800283a 	ret

8112aff8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
8112aff8:	defffd04 	addi	sp,sp,-12
8112affc:	de00012e 	bgeu	sp,et,8112b004 <OS_MemClr+0xc>
8112b000:	003b68fa 	trap	3
8112b004:	df000215 	stw	fp,8(sp)
8112b008:	df000204 	addi	fp,sp,8
8112b00c:	e13ffe15 	stw	r4,-8(fp)
8112b010:	2805883a 	mov	r2,r5
8112b014:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
8112b018:	00000706 	br	8112b038 <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
8112b01c:	e0bffe17 	ldw	r2,-8(fp)
8112b020:	10c00044 	addi	r3,r2,1
8112b024:	e0fffe15 	stw	r3,-8(fp)
8112b028:	10000005 	stb	zero,0(r2)
        size--;
8112b02c:	e0bfff0b 	ldhu	r2,-4(fp)
8112b030:	10bfffc4 	addi	r2,r2,-1
8112b034:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
8112b038:	e0bfff0b 	ldhu	r2,-4(fp)
8112b03c:	103ff71e 	bne	r2,zero,8112b01c <__reset+0xfb10b01c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
8112b040:	0001883a 	nop
8112b044:	e037883a 	mov	sp,fp
8112b048:	df000017 	ldw	fp,0(sp)
8112b04c:	dec00104 	addi	sp,sp,4
8112b050:	f800283a 	ret

8112b054 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
8112b054:	defffc04 	addi	sp,sp,-16
8112b058:	de00012e 	bgeu	sp,et,8112b060 <OS_MemCopy+0xc>
8112b05c:	003b68fa 	trap	3
8112b060:	df000315 	stw	fp,12(sp)
8112b064:	df000304 	addi	fp,sp,12
8112b068:	e13ffd15 	stw	r4,-12(fp)
8112b06c:	e17ffe15 	stw	r5,-8(fp)
8112b070:	3005883a 	mov	r2,r6
8112b074:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
8112b078:	00000b06 	br	8112b0a8 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
8112b07c:	e0bffd17 	ldw	r2,-12(fp)
8112b080:	10c00044 	addi	r3,r2,1
8112b084:	e0fffd15 	stw	r3,-12(fp)
8112b088:	e0fffe17 	ldw	r3,-8(fp)
8112b08c:	19000044 	addi	r4,r3,1
8112b090:	e13ffe15 	stw	r4,-8(fp)
8112b094:	18c00003 	ldbu	r3,0(r3)
8112b098:	10c00005 	stb	r3,0(r2)
        size--;
8112b09c:	e0bfff0b 	ldhu	r2,-4(fp)
8112b0a0:	10bfffc4 	addi	r2,r2,-1
8112b0a4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
8112b0a8:	e0bfff0b 	ldhu	r2,-4(fp)
8112b0ac:	103ff31e 	bne	r2,zero,8112b07c <__reset+0xfb10b07c>
        *pdest++ = *psrc++;
        size--;
    }
}
8112b0b0:	0001883a 	nop
8112b0b4:	e037883a 	mov	sp,fp
8112b0b8:	df000017 	ldw	fp,0(sp)
8112b0bc:	dec00104 	addi	sp,sp,4
8112b0c0:	f800283a 	ret

8112b0c4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
8112b0c4:	defffb04 	addi	sp,sp,-20
8112b0c8:	de00012e 	bgeu	sp,et,8112b0d0 <OS_Sched+0xc>
8112b0cc:	003b68fa 	trap	3
8112b0d0:	dfc00415 	stw	ra,16(sp)
8112b0d4:	df000315 	stw	fp,12(sp)
8112b0d8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112b0dc:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b0e0:	0005303a 	rdctl	r2,status
8112b0e4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b0e8:	e0ffff17 	ldw	r3,-4(fp)
8112b0ec:	00bfff84 	movi	r2,-2
8112b0f0:	1884703a 	and	r2,r3,r2
8112b0f4:	1001703a 	wrctl	status,r2
  
  return context;
8112b0f8:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
8112b0fc:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
8112b100:	d0a08a03 	ldbu	r2,-32216(gp)
8112b104:	10803fcc 	andi	r2,r2,255
8112b108:	10001a1e 	bne	r2,zero,8112b174 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
8112b10c:	d0a07803 	ldbu	r2,-32288(gp)
8112b110:	10803fcc 	andi	r2,r2,255
8112b114:	1000171e 	bne	r2,zero,8112b174 <OS_Sched+0xb0>
            OS_SchedNew();
8112b118:	112b19c0 	call	8112b19c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
8112b11c:	d0e07c83 	ldbu	r3,-32270(gp)
8112b120:	d0a07cc3 	ldbu	r2,-32269(gp)
8112b124:	18c03fcc 	andi	r3,r3,255
8112b128:	10803fcc 	andi	r2,r2,255
8112b12c:	18801126 	beq	r3,r2,8112b174 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
8112b130:	d0a07c83 	ldbu	r2,-32270(gp)
8112b134:	10c03fcc 	andi	r3,r2,255
8112b138:	00a04574 	movhi	r2,33045
8112b13c:	10807b04 	addi	r2,r2,492
8112b140:	18c7883a 	add	r3,r3,r3
8112b144:	18c7883a 	add	r3,r3,r3
8112b148:	10c5883a 	add	r2,r2,r3
8112b14c:	10800017 	ldw	r2,0(r2)
8112b150:	d0a08515 	stw	r2,-32236(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
8112b154:	d0a08517 	ldw	r2,-32236(gp)
8112b158:	10c00e17 	ldw	r3,56(r2)
8112b15c:	18c00044 	addi	r3,r3,1
8112b160:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
8112b164:	d0a07f17 	ldw	r2,-32260(gp)
8112b168:	10800044 	addi	r2,r2,1
8112b16c:	d0a07f15 	stw	r2,-32260(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
8112b170:	113c1c40 	call	8113c1c4 <OSCtxSw>
8112b174:	e0bffd17 	ldw	r2,-12(fp)
8112b178:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b17c:	e0bffe17 	ldw	r2,-8(fp)
8112b180:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
8112b184:	0001883a 	nop
8112b188:	e037883a 	mov	sp,fp
8112b18c:	dfc00117 	ldw	ra,4(sp)
8112b190:	df000017 	ldw	fp,0(sp)
8112b194:	dec00204 	addi	sp,sp,8
8112b198:	f800283a 	ret

8112b19c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
8112b19c:	defffe04 	addi	sp,sp,-8
8112b1a0:	de00012e 	bgeu	sp,et,8112b1a8 <OS_SchedNew+0xc>
8112b1a4:	003b68fa 	trap	3
8112b1a8:	df000115 	stw	fp,4(sp)
8112b1ac:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
8112b1b0:	d0a08703 	ldbu	r2,-32228(gp)
8112b1b4:	10c03fcc 	andi	r3,r2,255
8112b1b8:	00a04534 	movhi	r2,33044
8112b1bc:	1080e504 	addi	r2,r2,916
8112b1c0:	10c5883a 	add	r2,r2,r3
8112b1c4:	10800003 	ldbu	r2,0(r2)
8112b1c8:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
8112b1cc:	e0bfff03 	ldbu	r2,-4(fp)
8112b1d0:	100490fa 	slli	r2,r2,3
8112b1d4:	1009883a 	mov	r4,r2
8112b1d8:	e0ffff03 	ldbu	r3,-4(fp)
8112b1dc:	d0a08744 	addi	r2,gp,-32227
8112b1e0:	1885883a 	add	r2,r3,r2
8112b1e4:	10800003 	ldbu	r2,0(r2)
8112b1e8:	10c03fcc 	andi	r3,r2,255
8112b1ec:	00a04534 	movhi	r2,33044
8112b1f0:	1080e504 	addi	r2,r2,916
8112b1f4:	10c5883a 	add	r2,r2,r3
8112b1f8:	10800003 	ldbu	r2,0(r2)
8112b1fc:	2085883a 	add	r2,r4,r2
8112b200:	d0a07c85 	stb	r2,-32270(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
8112b204:	0001883a 	nop
8112b208:	e037883a 	mov	sp,fp
8112b20c:	df000017 	ldw	fp,0(sp)
8112b210:	dec00104 	addi	sp,sp,4
8112b214:	f800283a 	ret

8112b218 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
8112b218:	defffc04 	addi	sp,sp,-16
8112b21c:	de00012e 	bgeu	sp,et,8112b224 <OS_StrCopy+0xc>
8112b220:	003b68fa 	trap	3
8112b224:	df000315 	stw	fp,12(sp)
8112b228:	df000304 	addi	fp,sp,12
8112b22c:	e13ffe15 	stw	r4,-8(fp)
8112b230:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
8112b234:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
8112b238:	00000b06 	br	8112b268 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
8112b23c:	e0bffe17 	ldw	r2,-8(fp)
8112b240:	10c00044 	addi	r3,r2,1
8112b244:	e0fffe15 	stw	r3,-8(fp)
8112b248:	e0ffff17 	ldw	r3,-4(fp)
8112b24c:	19000044 	addi	r4,r3,1
8112b250:	e13fff15 	stw	r4,-4(fp)
8112b254:	18c00003 	ldbu	r3,0(r3)
8112b258:	10c00005 	stb	r3,0(r2)
        len++;
8112b25c:	e0bffd03 	ldbu	r2,-12(fp)
8112b260:	10800044 	addi	r2,r2,1
8112b264:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112b268:	e0bfff17 	ldw	r2,-4(fp)
8112b26c:	10800003 	ldbu	r2,0(r2)
8112b270:	10803fcc 	andi	r2,r2,255
8112b274:	103ff11e 	bne	r2,zero,8112b23c <__reset+0xfb10b23c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
8112b278:	e0bffe17 	ldw	r2,-8(fp)
8112b27c:	10000005 	stb	zero,0(r2)
    return (len);
8112b280:	e0bffd03 	ldbu	r2,-12(fp)
}
8112b284:	e037883a 	mov	sp,fp
8112b288:	df000017 	ldw	fp,0(sp)
8112b28c:	dec00104 	addi	sp,sp,4
8112b290:	f800283a 	ret

8112b294 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
8112b294:	defffd04 	addi	sp,sp,-12
8112b298:	de00012e 	bgeu	sp,et,8112b2a0 <OS_StrLen+0xc>
8112b29c:	003b68fa 	trap	3
8112b2a0:	df000215 	stw	fp,8(sp)
8112b2a4:	df000204 	addi	fp,sp,8
8112b2a8:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
8112b2ac:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
8112b2b0:	00000606 	br	8112b2cc <OS_StrLen+0x38>
        psrc++;
8112b2b4:	e0bfff17 	ldw	r2,-4(fp)
8112b2b8:	10800044 	addi	r2,r2,1
8112b2bc:	e0bfff15 	stw	r2,-4(fp)
        len++;
8112b2c0:	e0bffe03 	ldbu	r2,-8(fp)
8112b2c4:	10800044 	addi	r2,r2,1
8112b2c8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
8112b2cc:	e0bfff17 	ldw	r2,-4(fp)
8112b2d0:	10800003 	ldbu	r2,0(r2)
8112b2d4:	10803fcc 	andi	r2,r2,255
8112b2d8:	103ff61e 	bne	r2,zero,8112b2b4 <__reset+0xfb10b2b4>
        psrc++;
        len++;
    }
    return (len);
8112b2dc:	e0bffe03 	ldbu	r2,-8(fp)
}
8112b2e0:	e037883a 	mov	sp,fp
8112b2e4:	df000017 	ldw	fp,0(sp)
8112b2e8:	dec00104 	addi	sp,sp,4
8112b2ec:	f800283a 	ret

8112b2f0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
8112b2f0:	defffa04 	addi	sp,sp,-24
8112b2f4:	de00012e 	bgeu	sp,et,8112b2fc <OS_TaskIdle+0xc>
8112b2f8:	003b68fa 	trap	3
8112b2fc:	dfc00515 	stw	ra,20(sp)
8112b300:	df000415 	stw	fp,16(sp)
8112b304:	df000404 	addi	fp,sp,16
8112b308:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b30c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b310:	0005303a 	rdctl	r2,status
8112b314:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b318:	e0fffd17 	ldw	r3,-12(fp)
8112b31c:	00bfff84 	movi	r2,-2
8112b320:	1884703a 	and	r2,r3,r2
8112b324:	1001703a 	wrctl	status,r2
  
  return context;
8112b328:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
8112b32c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
8112b330:	d0a07b17 	ldw	r2,-32276(gp)
8112b334:	10800044 	addi	r2,r2,1
8112b338:	d0a07b15 	stw	r2,-32276(gp)
8112b33c:	e0bffc17 	ldw	r2,-16(fp)
8112b340:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b344:	e0bffe17 	ldw	r2,-8(fp)
8112b348:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
8112b34c:	113c5580 	call	8113c558 <OSTaskIdleHook>
    }
8112b350:	003fef06 	br	8112b310 <__reset+0xfb10b310>

8112b354 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
8112b354:	defff804 	addi	sp,sp,-32
8112b358:	de00012e 	bgeu	sp,et,8112b360 <OS_TaskStat+0xc>
8112b35c:	003b68fa 	trap	3
8112b360:	dfc00715 	stw	ra,28(sp)
8112b364:	df000615 	stw	fp,24(sp)
8112b368:	dc400515 	stw	r17,20(sp)
8112b36c:	dc000415 	stw	r16,16(sp)
8112b370:	df000604 	addi	fp,sp,24
8112b374:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b378:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112b37c:	00000206 	br	8112b388 <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
8112b380:	01003204 	movi	r4,200
8112b384:	1131e000 	call	81131e00 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
8112b388:	d0a09003 	ldbu	r2,-32192(gp)
8112b38c:	10803fcc 	andi	r2,r2,255
8112b390:	103ffb26 	beq	r2,zero,8112b380 <__reset+0xfb10b380>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
8112b394:	d0e08117 	ldw	r3,-32252(gp)
8112b398:	00947b34 	movhi	r2,20972
8112b39c:	10a147c4 	addi	r2,r2,-31457
8112b3a0:	1888383a 	mulxuu	r4,r3,r2
8112b3a4:	1885383a 	mul	r2,r3,r2
8112b3a8:	1021883a 	mov	r16,r2
8112b3ac:	2023883a 	mov	r17,r4
8112b3b0:	8804d17a 	srli	r2,r17,5
8112b3b4:	d0a08115 	stw	r2,-32252(gp)
    if (OSIdleCtrMax == 0L) {
8112b3b8:	d0a08117 	ldw	r2,-32252(gp)
8112b3bc:	1000031e 	bne	r2,zero,8112b3cc <OS_TaskStat+0x78>
        OSCPUUsage = 0;
8112b3c0:	d0208305 	stb	zero,-32244(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
8112b3c4:	01003fc4 	movi	r4,255
8112b3c8:	1131a700 	call	81131a70 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b3cc:	0005303a 	rdctl	r2,status
8112b3d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b3d4:	e0fffb17 	ldw	r3,-20(fp)
8112b3d8:	00bfff84 	movi	r2,-2
8112b3dc:	1884703a 	and	r2,r3,r2
8112b3e0:	1001703a 	wrctl	status,r2
  
  return context;
8112b3e4:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
8112b3e8:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
8112b3ec:	d0a07b17 	ldw	r2,-32276(gp)
8112b3f0:	d0a09115 	stw	r2,-32188(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
8112b3f4:	d0207b15 	stw	zero,-32276(gp)
8112b3f8:	e0bffa17 	ldw	r2,-24(fp)
8112b3fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b400:	e0bffc17 	ldw	r2,-16(fp)
8112b404:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
8112b408:	d0e09117 	ldw	r3,-32188(gp)
8112b40c:	d0a08117 	ldw	r2,-32252(gp)
8112b410:	1885203a 	divu	r2,r3,r2
8112b414:	1007883a 	mov	r3,r2
8112b418:	00801904 	movi	r2,100
8112b41c:	10c5c83a 	sub	r2,r2,r3
8112b420:	d0a08305 	stb	r2,-32244(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
8112b424:	113c4880 	call	8113c488 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
8112b428:	112b4380 	call	8112b438 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
8112b42c:	01001904 	movi	r4,100
8112b430:	1131e000 	call	81131e00 <OSTimeDly>
    }
8112b434:	003fe506 	br	8112b3cc <__reset+0xfb10b3cc>

8112b438 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
8112b438:	defffa04 	addi	sp,sp,-24
8112b43c:	de00012e 	bgeu	sp,et,8112b444 <OS_TaskStatStkChk+0xc>
8112b440:	003b68fa 	trap	3
8112b444:	dfc00515 	stw	ra,20(sp)
8112b448:	df000415 	stw	fp,16(sp)
8112b44c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112b450:	e03ffc05 	stb	zero,-16(fp)
8112b454:	00002406 	br	8112b4e8 <OS_TaskStatStkChk+0xb0>
        err = OSTaskStkChk(prio, &stk_data);
8112b458:	e0bffc03 	ldbu	r2,-16(fp)
8112b45c:	e0fffe04 	addi	r3,fp,-8
8112b460:	180b883a 	mov	r5,r3
8112b464:	1009883a 	mov	r4,r2
8112b468:	11318a80 	call	811318a8 <OSTaskStkChk>
8112b46c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
8112b470:	e0bffc43 	ldbu	r2,-15(fp)
8112b474:	1000191e 	bne	r2,zero,8112b4dc <OS_TaskStatStkChk+0xa4>
            ptcb = OSTCBPrioTbl[prio];
8112b478:	e0fffc03 	ldbu	r3,-16(fp)
8112b47c:	00a04574 	movhi	r2,33045
8112b480:	10807b04 	addi	r2,r2,492
8112b484:	18c7883a 	add	r3,r3,r3
8112b488:	18c7883a 	add	r3,r3,r3
8112b48c:	10c5883a 	add	r2,r2,r3
8112b490:	10800017 	ldw	r2,0(r2)
8112b494:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
8112b498:	e0bffd17 	ldw	r2,-12(fp)
8112b49c:	10000f26 	beq	r2,zero,8112b4dc <OS_TaskStatStkChk+0xa4>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
8112b4a0:	e0bffd17 	ldw	r2,-12(fp)
8112b4a4:	10800060 	cmpeqi	r2,r2,1
8112b4a8:	10000c1e 	bne	r2,zero,8112b4dc <OS_TaskStatStkChk+0xa4>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
8112b4ac:	e0bffd17 	ldw	r2,-12(fp)
8112b4b0:	10c00217 	ldw	r3,8(r2)
8112b4b4:	e0bffd17 	ldw	r2,-12(fp)
8112b4b8:	10800317 	ldw	r2,12(r2)
8112b4bc:	1085883a 	add	r2,r2,r2
8112b4c0:	1085883a 	add	r2,r2,r2
8112b4c4:	1887883a 	add	r3,r3,r2
8112b4c8:	e0bffd17 	ldw	r2,-12(fp)
8112b4cc:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
8112b4d0:	e0ffff17 	ldw	r3,-4(fp)
8112b4d4:	e0bffd17 	ldw	r2,-12(fp)
8112b4d8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112b4dc:	e0bffc03 	ldbu	r2,-16(fp)
8112b4e0:	10800044 	addi	r2,r2,1
8112b4e4:	e0bffc05 	stb	r2,-16(fp)
8112b4e8:	e0bffc03 	ldbu	r2,-16(fp)
8112b4ec:	10800a70 	cmpltui	r2,r2,41
8112b4f0:	103fd91e 	bne	r2,zero,8112b458 <__reset+0xfb10b458>
#endif
                }
            }
        }
    }
}
8112b4f4:	0001883a 	nop
8112b4f8:	e037883a 	mov	sp,fp
8112b4fc:	dfc00117 	ldw	ra,4(sp)
8112b500:	df000017 	ldw	fp,0(sp)
8112b504:	dec00204 	addi	sp,sp,8
8112b508:	f800283a 	ret

8112b50c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
8112b50c:	defff204 	addi	sp,sp,-56
8112b510:	de00012e 	bgeu	sp,et,8112b518 <OS_TCBInit+0xc>
8112b514:	003b68fa 	trap	3
8112b518:	dfc00d15 	stw	ra,52(sp)
8112b51c:	df000c15 	stw	fp,48(sp)
8112b520:	df000c04 	addi	fp,sp,48
8112b524:	e17ffc15 	stw	r5,-16(fp)
8112b528:	e1bffd15 	stw	r6,-12(fp)
8112b52c:	3807883a 	mov	r3,r7
8112b530:	e0800417 	ldw	r2,16(fp)
8112b534:	e13ffb05 	stb	r4,-20(fp)
8112b538:	e0fffe0d 	sth	r3,-8(fp)
8112b53c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112b540:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b544:	0005303a 	rdctl	r2,status
8112b548:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b54c:	e0fffa17 	ldw	r3,-24(fp)
8112b550:	00bfff84 	movi	r2,-2
8112b554:	1884703a 	and	r2,r3,r2
8112b558:	1001703a 	wrctl	status,r2
  
  return context;
8112b55c:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
8112b560:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
8112b564:	d0a08217 	ldw	r2,-32248(gp)
8112b568:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
8112b56c:	e0bff617 	ldw	r2,-40(fp)
8112b570:	10009326 	beq	r2,zero,8112b7c0 <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
8112b574:	e0bff617 	ldw	r2,-40(fp)
8112b578:	10800517 	ldw	r2,20(r2)
8112b57c:	d0a08215 	stw	r2,-32248(gp)
8112b580:	e0bff417 	ldw	r2,-48(fp)
8112b584:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b588:	e0bff817 	ldw	r2,-32(fp)
8112b58c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
8112b590:	e0bff617 	ldw	r2,-40(fp)
8112b594:	e0fffc17 	ldw	r3,-16(fp)
8112b598:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
8112b59c:	e0bff617 	ldw	r2,-40(fp)
8112b5a0:	e0fffb03 	ldbu	r3,-20(fp)
8112b5a4:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
8112b5a8:	e0bff617 	ldw	r2,-40(fp)
8112b5ac:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
8112b5b0:	e0bff617 	ldw	r2,-40(fp)
8112b5b4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
8112b5b8:	e0bff617 	ldw	r2,-40(fp)
8112b5bc:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
8112b5c0:	e0bff617 	ldw	r2,-40(fp)
8112b5c4:	e0c00317 	ldw	r3,12(fp)
8112b5c8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
8112b5cc:	e0bff617 	ldw	r2,-40(fp)
8112b5d0:	e0c00217 	ldw	r3,8(fp)
8112b5d4:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
8112b5d8:	e0bff617 	ldw	r2,-40(fp)
8112b5dc:	e0fffd17 	ldw	r3,-12(fp)
8112b5e0:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
8112b5e4:	e0bff617 	ldw	r2,-40(fp)
8112b5e8:	e0ffff0b 	ldhu	r3,-4(fp)
8112b5ec:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
8112b5f0:	e0bff617 	ldw	r2,-40(fp)
8112b5f4:	e0fffe0b 	ldhu	r3,-8(fp)
8112b5f8:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
8112b5fc:	e0bff617 	ldw	r2,-40(fp)
8112b600:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
8112b604:	e0bffb03 	ldbu	r2,-20(fp)
8112b608:	1004d0fa 	srli	r2,r2,3
8112b60c:	1007883a 	mov	r3,r2
8112b610:	e0bff617 	ldw	r2,-40(fp)
8112b614:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
8112b618:	e0bffb03 	ldbu	r2,-20(fp)
8112b61c:	108001cc 	andi	r2,r2,7
8112b620:	1007883a 	mov	r3,r2
8112b624:	e0bff617 	ldw	r2,-40(fp)
8112b628:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
8112b62c:	e0bff617 	ldw	r2,-40(fp)
8112b630:	10800d03 	ldbu	r2,52(r2)
8112b634:	10803fcc 	andi	r2,r2,255
8112b638:	00c00044 	movi	r3,1
8112b63c:	1884983a 	sll	r2,r3,r2
8112b640:	1007883a 	mov	r3,r2
8112b644:	e0bff617 	ldw	r2,-40(fp)
8112b648:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
8112b64c:	e0bff617 	ldw	r2,-40(fp)
8112b650:	10800cc3 	ldbu	r2,51(r2)
8112b654:	10803fcc 	andi	r2,r2,255
8112b658:	00c00044 	movi	r3,1
8112b65c:	1884983a 	sll	r2,r3,r2
8112b660:	1007883a 	mov	r3,r2
8112b664:	e0bff617 	ldw	r2,-40(fp)
8112b668:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
8112b66c:	e0bff617 	ldw	r2,-40(fp)
8112b670:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
8112b674:	e0bff617 	ldw	r2,-40(fp)
8112b678:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
8112b67c:	e0bff617 	ldw	r2,-40(fp)
8112b680:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
8112b684:	e0bff617 	ldw	r2,-40(fp)
8112b688:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
8112b68c:	e0bff617 	ldw	r2,-40(fp)
8112b690:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
8112b694:	e0bff617 	ldw	r2,-40(fp)
8112b698:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
8112b69c:	e0bff617 	ldw	r2,-40(fp)
8112b6a0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
8112b6a4:	e0bff617 	ldw	r2,-40(fp)
8112b6a8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
8112b6ac:	e0bff617 	ldw	r2,-40(fp)
8112b6b0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
8112b6b4:	e0bff617 	ldw	r2,-40(fp)
8112b6b8:	00c00fc4 	movi	r3,63
8112b6bc:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112b6c0:	e0bff617 	ldw	r2,-40(fp)
8112b6c4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
8112b6c8:	e13ff617 	ldw	r4,-40(fp)
8112b6cc:	113c5800 	call	8113c580 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
8112b6d0:	e13ff617 	ldw	r4,-40(fp)
8112b6d4:	113c4080 	call	8113c408 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b6d8:	0005303a 	rdctl	r2,status
8112b6dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b6e0:	e0fff517 	ldw	r3,-44(fp)
8112b6e4:	00bfff84 	movi	r2,-2
8112b6e8:	1884703a 	and	r2,r3,r2
8112b6ec:	1001703a 	wrctl	status,r2
  
  return context;
8112b6f0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
8112b6f4:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
8112b6f8:	e0fffb03 	ldbu	r3,-20(fp)
8112b6fc:	00a04574 	movhi	r2,33045
8112b700:	10807b04 	addi	r2,r2,492
8112b704:	18c7883a 	add	r3,r3,r3
8112b708:	18c7883a 	add	r3,r3,r3
8112b70c:	10c5883a 	add	r2,r2,r3
8112b710:	e0fff617 	ldw	r3,-40(fp)
8112b714:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
8112b718:	d0e07d17 	ldw	r3,-32268(gp)
8112b71c:	e0bff617 	ldw	r2,-40(fp)
8112b720:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
8112b724:	e0bff617 	ldw	r2,-40(fp)
8112b728:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
8112b72c:	d0a07d17 	ldw	r2,-32268(gp)
8112b730:	10000326 	beq	r2,zero,8112b740 <OS_TCBInit+0x234>
            OSTCBList->OSTCBPrev = ptcb;
8112b734:	d0a07d17 	ldw	r2,-32268(gp)
8112b738:	e0fff617 	ldw	r3,-40(fp)
8112b73c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
8112b740:	e0bff617 	ldw	r2,-40(fp)
8112b744:	d0a07d15 	stw	r2,-32268(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
8112b748:	e0bff617 	ldw	r2,-40(fp)
8112b74c:	10c00d83 	ldbu	r3,54(r2)
8112b750:	d0a08703 	ldbu	r2,-32228(gp)
8112b754:	1884b03a 	or	r2,r3,r2
8112b758:	d0a08705 	stb	r2,-32228(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112b75c:	e0bff617 	ldw	r2,-40(fp)
8112b760:	10800d03 	ldbu	r2,52(r2)
8112b764:	10c03fcc 	andi	r3,r2,255
8112b768:	e0bff617 	ldw	r2,-40(fp)
8112b76c:	10800d03 	ldbu	r2,52(r2)
8112b770:	11003fcc 	andi	r4,r2,255
8112b774:	d0a08744 	addi	r2,gp,-32227
8112b778:	2085883a 	add	r2,r4,r2
8112b77c:	11000003 	ldbu	r4,0(r2)
8112b780:	e0bff617 	ldw	r2,-40(fp)
8112b784:	10800d43 	ldbu	r2,53(r2)
8112b788:	2084b03a 	or	r2,r4,r2
8112b78c:	1009883a 	mov	r4,r2
8112b790:	d0a08744 	addi	r2,gp,-32227
8112b794:	1885883a 	add	r2,r3,r2
8112b798:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
8112b79c:	d0a08343 	ldbu	r2,-32243(gp)
8112b7a0:	10800044 	addi	r2,r2,1
8112b7a4:	d0a08345 	stb	r2,-32243(gp)
8112b7a8:	e0bff417 	ldw	r2,-48(fp)
8112b7ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b7b0:	e0bff717 	ldw	r2,-36(fp)
8112b7b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112b7b8:	0005883a 	mov	r2,zero
8112b7bc:	00000506 	br	8112b7d4 <OS_TCBInit+0x2c8>
8112b7c0:	e0bff417 	ldw	r2,-48(fp)
8112b7c4:	e0bff915 	stw	r2,-28(fp)
8112b7c8:	e0bff917 	ldw	r2,-28(fp)
8112b7cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
8112b7d0:	00801084 	movi	r2,66
}
8112b7d4:	e037883a 	mov	sp,fp
8112b7d8:	dfc00117 	ldw	ra,4(sp)
8112b7dc:	df000017 	ldw	fp,0(sp)
8112b7e0:	dec00204 	addi	sp,sp,8
8112b7e4:	f800283a 	ret

8112b7e8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
8112b7e8:	defffe04 	addi	sp,sp,-8
8112b7ec:	de00012e 	bgeu	sp,et,8112b7f4 <OSDebugInit+0xc>
8112b7f0:	003b68fa 	trap	3
8112b7f4:	df000115 	stw	fp,4(sp)
8112b7f8:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
8112b7fc:	d0a01804 	addi	r2,gp,-32672
8112b800:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
8112b804:	d0a01904 	addi	r2,gp,-32668
8112b808:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
8112b80c:	d0a01a84 	addi	r2,gp,-32662
8112b810:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
8112b814:	d0a01b04 	addi	r2,gp,-32660
8112b818:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
8112b81c:	d0a01a04 	addi	r2,gp,-32664
8112b820:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
8112b824:	d0a01b84 	addi	r2,gp,-32658
8112b828:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
8112b82c:	d0a01c04 	addi	r2,gp,-32656
8112b830:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
8112b834:	d0a01c84 	addi	r2,gp,-32654
8112b838:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
8112b83c:	d0a01d04 	addi	r2,gp,-32652
8112b840:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
8112b844:	d0a01d84 	addi	r2,gp,-32650
8112b848:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
8112b84c:	d0a01e04 	addi	r2,gp,-32648
8112b850:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
8112b854:	d0a01e84 	addi	r2,gp,-32646
8112b858:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
8112b85c:	d0a01f04 	addi	r2,gp,-32644
8112b860:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
8112b864:	d0a01f84 	addi	r2,gp,-32642
8112b868:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
8112b86c:	d0a02004 	addi	r2,gp,-32640
8112b870:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
8112b874:	d0a02084 	addi	r2,gp,-32638
8112b878:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
8112b87c:	d0a02104 	addi	r2,gp,-32636
8112b880:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
8112b884:	d0a02184 	addi	r2,gp,-32634
8112b888:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
8112b88c:	d0a02204 	addi	r2,gp,-32632
8112b890:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
8112b894:	d0a02284 	addi	r2,gp,-32630
8112b898:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
8112b89c:	d0a02304 	addi	r2,gp,-32628
8112b8a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
8112b8a4:	d0a02384 	addi	r2,gp,-32626
8112b8a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
8112b8ac:	d0a02404 	addi	r2,gp,-32624
8112b8b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
8112b8b4:	d0a02484 	addi	r2,gp,-32622
8112b8b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
8112b8bc:	d0a02504 	addi	r2,gp,-32620
8112b8c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
8112b8c4:	d0a02584 	addi	r2,gp,-32618
8112b8c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
8112b8cc:	d0a02604 	addi	r2,gp,-32616
8112b8d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
8112b8d4:	d0a02684 	addi	r2,gp,-32614
8112b8d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
8112b8dc:	d0a02704 	addi	r2,gp,-32612
8112b8e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
8112b8e4:	d0a02784 	addi	r2,gp,-32610
8112b8e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
8112b8ec:	d0a02804 	addi	r2,gp,-32608
8112b8f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
8112b8f4:	d0a02884 	addi	r2,gp,-32606
8112b8f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
8112b8fc:	d0a02904 	addi	r2,gp,-32604
8112b900:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
8112b904:	d0a02984 	addi	r2,gp,-32602
8112b908:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
8112b90c:	d0a02a04 	addi	r2,gp,-32600
8112b910:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
8112b914:	d0a02a84 	addi	r2,gp,-32598
8112b918:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
8112b91c:	d0a02b04 	addi	r2,gp,-32596
8112b920:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
8112b924:	d0a02b84 	addi	r2,gp,-32594
8112b928:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
8112b92c:	d0a02c04 	addi	r2,gp,-32592
8112b930:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
8112b934:	d0a02c84 	addi	r2,gp,-32590
8112b938:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
8112b93c:	d0a02d04 	addi	r2,gp,-32588
8112b940:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
8112b944:	d0a02d84 	addi	r2,gp,-32586
8112b948:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
8112b94c:	d0a02e04 	addi	r2,gp,-32584
8112b950:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
8112b954:	d0a02e84 	addi	r2,gp,-32582
8112b958:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
8112b95c:	00a04574 	movhi	r2,33045
8112b960:	10afed04 	addi	r2,r2,-16460
8112b964:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
8112b968:	00a04574 	movhi	r2,33045
8112b96c:	10af0d04 	addi	r2,r2,-17356
8112b970:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
8112b974:	d0a02f84 	addi	r2,gp,-32578
8112b978:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
8112b97c:	d0a03004 	addi	r2,gp,-32576
8112b980:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
8112b984:	d0a03084 	addi	r2,gp,-32574
8112b988:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
8112b98c:	d0a03104 	addi	r2,gp,-32572
8112b990:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
8112b994:	d0a03184 	addi	r2,gp,-32570
8112b998:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
8112b99c:	d0a03204 	addi	r2,gp,-32568
8112b9a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
8112b9a4:	d0a03284 	addi	r2,gp,-32566
8112b9a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
8112b9ac:	d0a03304 	addi	r2,gp,-32564
8112b9b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
8112b9b4:	d0a03384 	addi	r2,gp,-32562
8112b9b8:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
8112b9bc:	d0a02f04 	addi	r2,gp,-32580
8112b9c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
8112b9c4:	d0a03404 	addi	r2,gp,-32560
8112b9c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
8112b9cc:	0001883a 	nop
8112b9d0:	e037883a 	mov	sp,fp
8112b9d4:	df000017 	ldw	fp,0(sp)
8112b9d8:	dec00104 	addi	sp,sp,4
8112b9dc:	f800283a 	ret

8112b9e0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
8112b9e0:	defff204 	addi	sp,sp,-56
8112b9e4:	de00012e 	bgeu	sp,et,8112b9ec <OSFlagAccept+0xc>
8112b9e8:	003b68fa 	trap	3
8112b9ec:	df000d15 	stw	fp,52(sp)
8112b9f0:	df000d04 	addi	fp,sp,52
8112b9f4:	e13ffc15 	stw	r4,-16(fp)
8112b9f8:	2807883a 	mov	r3,r5
8112b9fc:	3005883a 	mov	r2,r6
8112ba00:	e1ffff15 	stw	r7,-4(fp)
8112ba04:	e0fffd0d 	sth	r3,-12(fp)
8112ba08:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112ba0c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112ba10:	e0bfff17 	ldw	r2,-4(fp)
8112ba14:	1000021e 	bne	r2,zero,8112ba20 <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
8112ba18:	0005883a 	mov	r2,zero
8112ba1c:	0000b006 	br	8112bce0 <OSFlagAccept+0x300>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112ba20:	e0bffc17 	ldw	r2,-16(fp)
8112ba24:	1000051e 	bne	r2,zero,8112ba3c <OSFlagAccept+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112ba28:	e0bfff17 	ldw	r2,-4(fp)
8112ba2c:	00c01b84 	movi	r3,110
8112ba30:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112ba34:	0005883a 	mov	r2,zero
8112ba38:	0000a906 	br	8112bce0 <OSFlagAccept+0x300>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112ba3c:	e0bffc17 	ldw	r2,-16(fp)
8112ba40:	10800003 	ldbu	r2,0(r2)
8112ba44:	10803fcc 	andi	r2,r2,255
8112ba48:	10800160 	cmpeqi	r2,r2,5
8112ba4c:	1000051e 	bne	r2,zero,8112ba64 <OSFlagAccept+0x84>
        *perr = OS_ERR_EVENT_TYPE;
8112ba50:	e0bfff17 	ldw	r2,-4(fp)
8112ba54:	00c00044 	movi	r3,1
8112ba58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112ba5c:	0005883a 	mov	r2,zero
8112ba60:	00009f06 	br	8112bce0 <OSFlagAccept+0x300>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112ba64:	e0fffe03 	ldbu	r3,-8(fp)
8112ba68:	00bfe004 	movi	r2,-128
8112ba6c:	1884703a 	and	r2,r3,r2
8112ba70:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
8112ba74:	e0bff503 	ldbu	r2,-44(fp)
8112ba78:	10000626 	beq	r2,zero,8112ba94 <OSFlagAccept+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
8112ba7c:	e0bffe03 	ldbu	r2,-8(fp)
8112ba80:	10801fcc 	andi	r2,r2,127
8112ba84:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112ba88:	00800044 	movi	r2,1
8112ba8c:	e0bff385 	stb	r2,-50(fp)
8112ba90:	00000106 	br	8112ba98 <OSFlagAccept+0xb8>
    } else {
        consume    = OS_FALSE;
8112ba94:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
8112ba98:	e0bfff17 	ldw	r2,-4(fp)
8112ba9c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112baa0:	0005303a 	rdctl	r2,status
8112baa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112baa8:	e0fffb17 	ldw	r3,-20(fp)
8112baac:	00bfff84 	movi	r2,-2
8112bab0:	1884703a 	and	r2,r3,r2
8112bab4:	1001703a 	wrctl	status,r2
  
  return context;
8112bab8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
8112babc:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
8112bac0:	e0bffe03 	ldbu	r2,-8(fp)
8112bac4:	10c00060 	cmpeqi	r3,r2,1
8112bac8:	18005f1e 	bne	r3,zero,8112bc48 <OSFlagAccept+0x268>
8112bacc:	10c00088 	cmpgei	r3,r2,2
8112bad0:	1800021e 	bne	r3,zero,8112badc <OSFlagAccept+0xfc>
8112bad4:	10003f26 	beq	r2,zero,8112bbd4 <OSFlagAccept+0x1f4>
8112bad8:	00007706 	br	8112bcb8 <OSFlagAccept+0x2d8>
8112badc:	10c000a0 	cmpeqi	r3,r2,2
8112bae0:	1800031e 	bne	r3,zero,8112baf0 <OSFlagAccept+0x110>
8112bae4:	108000e0 	cmpeqi	r2,r2,3
8112bae8:	10001e1e 	bne	r2,zero,8112bb64 <OSFlagAccept+0x184>
8112baec:	00007206 	br	8112bcb8 <OSFlagAccept+0x2d8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112baf0:	e0bffc17 	ldw	r2,-16(fp)
8112baf4:	10c0020b 	ldhu	r3,8(r2)
8112baf8:	e0bffd0b 	ldhu	r2,-12(fp)
8112bafc:	1884703a 	and	r2,r3,r2
8112bb00:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112bb04:	e0fff30b 	ldhu	r3,-52(fp)
8112bb08:	e0bffd0b 	ldhu	r2,-12(fp)
8112bb0c:	18800d1e 	bne	r3,r2,8112bb44 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112bb10:	e0bff383 	ldbu	r2,-50(fp)
8112bb14:	10800058 	cmpnei	r2,r2,1
8112bb18:	10000d1e 	bne	r2,zero,8112bb50 <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112bb1c:	e0bffc17 	ldw	r2,-16(fp)
8112bb20:	1080020b 	ldhu	r2,8(r2)
8112bb24:	1007883a 	mov	r3,r2
8112bb28:	e0bff30b 	ldhu	r2,-52(fp)
8112bb2c:	0084303a 	nor	r2,zero,r2
8112bb30:	1884703a 	and	r2,r3,r2
8112bb34:	1007883a 	mov	r3,r2
8112bb38:	e0bffc17 	ldw	r2,-16(fp)
8112bb3c:	10c0020d 	sth	r3,8(r2)
8112bb40:	00000306 	br	8112bb50 <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112bb44:	e0bfff17 	ldw	r2,-4(fp)
8112bb48:	00c01c04 	movi	r3,112
8112bb4c:	10c00005 	stb	r3,0(r2)
8112bb50:	e0bff417 	ldw	r2,-48(fp)
8112bb54:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bb58:	e0bff617 	ldw	r2,-40(fp)
8112bb5c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112bb60:	00005e06 	br	8112bcdc <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
8112bb64:	e0bffc17 	ldw	r2,-16(fp)
8112bb68:	10c0020b 	ldhu	r3,8(r2)
8112bb6c:	e0bffd0b 	ldhu	r2,-12(fp)
8112bb70:	1884703a 	and	r2,r3,r2
8112bb74:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112bb78:	e0bff30b 	ldhu	r2,-52(fp)
8112bb7c:	10000d26 	beq	r2,zero,8112bbb4 <OSFlagAccept+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112bb80:	e0bff383 	ldbu	r2,-50(fp)
8112bb84:	10800058 	cmpnei	r2,r2,1
8112bb88:	10000d1e 	bne	r2,zero,8112bbc0 <OSFlagAccept+0x1e0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112bb8c:	e0bffc17 	ldw	r2,-16(fp)
8112bb90:	1080020b 	ldhu	r2,8(r2)
8112bb94:	1007883a 	mov	r3,r2
8112bb98:	e0bff30b 	ldhu	r2,-52(fp)
8112bb9c:	0084303a 	nor	r2,zero,r2
8112bba0:	1884703a 	and	r2,r3,r2
8112bba4:	1007883a 	mov	r3,r2
8112bba8:	e0bffc17 	ldw	r2,-16(fp)
8112bbac:	10c0020d 	sth	r3,8(r2)
8112bbb0:	00000306 	br	8112bbc0 <OSFlagAccept+0x1e0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112bbb4:	e0bfff17 	ldw	r2,-4(fp)
8112bbb8:	00c01c04 	movi	r3,112
8112bbbc:	10c00005 	stb	r3,0(r2)
8112bbc0:	e0bff417 	ldw	r2,-48(fp)
8112bbc4:	e0bff715 	stw	r2,-36(fp)
8112bbc8:	e0bff717 	ldw	r2,-36(fp)
8112bbcc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112bbd0:	00004206 	br	8112bcdc <OSFlagAccept+0x2fc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112bbd4:	e0bffc17 	ldw	r2,-16(fp)
8112bbd8:	1080020b 	ldhu	r2,8(r2)
8112bbdc:	0084303a 	nor	r2,zero,r2
8112bbe0:	1007883a 	mov	r3,r2
8112bbe4:	e0bffd0b 	ldhu	r2,-12(fp)
8112bbe8:	1884703a 	and	r2,r3,r2
8112bbec:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112bbf0:	e0fff30b 	ldhu	r3,-52(fp)
8112bbf4:	e0bffd0b 	ldhu	r2,-12(fp)
8112bbf8:	18800b1e 	bne	r3,r2,8112bc28 <OSFlagAccept+0x248>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112bbfc:	e0bff383 	ldbu	r2,-50(fp)
8112bc00:	10800058 	cmpnei	r2,r2,1
8112bc04:	10000b1e 	bne	r2,zero,8112bc34 <OSFlagAccept+0x254>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112bc08:	e0bffc17 	ldw	r2,-16(fp)
8112bc0c:	10c0020b 	ldhu	r3,8(r2)
8112bc10:	e0bff30b 	ldhu	r2,-52(fp)
8112bc14:	1884b03a 	or	r2,r3,r2
8112bc18:	1007883a 	mov	r3,r2
8112bc1c:	e0bffc17 	ldw	r2,-16(fp)
8112bc20:	10c0020d 	sth	r3,8(r2)
8112bc24:	00000306 	br	8112bc34 <OSFlagAccept+0x254>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112bc28:	e0bfff17 	ldw	r2,-4(fp)
8112bc2c:	00c01c04 	movi	r3,112
8112bc30:	10c00005 	stb	r3,0(r2)
8112bc34:	e0bff417 	ldw	r2,-48(fp)
8112bc38:	e0bff815 	stw	r2,-32(fp)
8112bc3c:	e0bff817 	ldw	r2,-32(fp)
8112bc40:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112bc44:	00002506 	br	8112bcdc <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112bc48:	e0bffc17 	ldw	r2,-16(fp)
8112bc4c:	1080020b 	ldhu	r2,8(r2)
8112bc50:	0084303a 	nor	r2,zero,r2
8112bc54:	1007883a 	mov	r3,r2
8112bc58:	e0bffd0b 	ldhu	r2,-12(fp)
8112bc5c:	1884703a 	and	r2,r3,r2
8112bc60:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112bc64:	e0bff30b 	ldhu	r2,-52(fp)
8112bc68:	10000b26 	beq	r2,zero,8112bc98 <OSFlagAccept+0x2b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112bc6c:	e0bff383 	ldbu	r2,-50(fp)
8112bc70:	10800058 	cmpnei	r2,r2,1
8112bc74:	10000b1e 	bne	r2,zero,8112bca4 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112bc78:	e0bffc17 	ldw	r2,-16(fp)
8112bc7c:	10c0020b 	ldhu	r3,8(r2)
8112bc80:	e0bff30b 	ldhu	r2,-52(fp)
8112bc84:	1884b03a 	or	r2,r3,r2
8112bc88:	1007883a 	mov	r3,r2
8112bc8c:	e0bffc17 	ldw	r2,-16(fp)
8112bc90:	10c0020d 	sth	r3,8(r2)
8112bc94:	00000306 	br	8112bca4 <OSFlagAccept+0x2c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
8112bc98:	e0bfff17 	ldw	r2,-4(fp)
8112bc9c:	00c01c04 	movi	r3,112
8112bca0:	10c00005 	stb	r3,0(r2)
8112bca4:	e0bff417 	ldw	r2,-48(fp)
8112bca8:	e0bff915 	stw	r2,-28(fp)
8112bcac:	e0bff917 	ldw	r2,-28(fp)
8112bcb0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
8112bcb4:	00000906 	br	8112bcdc <OSFlagAccept+0x2fc>
8112bcb8:	e0bff417 	ldw	r2,-48(fp)
8112bcbc:	e0bffa15 	stw	r2,-24(fp)
8112bcc0:	e0bffa17 	ldw	r2,-24(fp)
8112bcc4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112bcc8:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
8112bccc:	e0bfff17 	ldw	r2,-4(fp)
8112bcd0:	00c01bc4 	movi	r3,111
8112bcd4:	10c00005 	stb	r3,0(r2)
             break;
8112bcd8:	0001883a 	nop
    }
    return (flags_rdy);
8112bcdc:	e0bff30b 	ldhu	r2,-52(fp)
}
8112bce0:	e037883a 	mov	sp,fp
8112bce4:	df000017 	ldw	fp,0(sp)
8112bce8:	dec00104 	addi	sp,sp,4
8112bcec:	f800283a 	ret

8112bcf0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
8112bcf0:	defff804 	addi	sp,sp,-32
8112bcf4:	de00012e 	bgeu	sp,et,8112bcfc <OSFlagCreate+0xc>
8112bcf8:	003b68fa 	trap	3
8112bcfc:	df000715 	stw	fp,28(sp)
8112bd00:	df000704 	addi	fp,sp,28
8112bd04:	2005883a 	mov	r2,r4
8112bd08:	e17fff15 	stw	r5,-4(fp)
8112bd0c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
8112bd10:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
8112bd14:	e0bfff17 	ldw	r2,-4(fp)
8112bd18:	1000021e 	bne	r2,zero,8112bd24 <OSFlagCreate+0x34>
        return ((OS_FLAG_GRP *)0);
8112bd1c:	0005883a 	mov	r2,zero
8112bd20:	00003306 	br	8112bdf0 <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
8112bd24:	d0a08a03 	ldbu	r2,-32216(gp)
8112bd28:	10803fcc 	andi	r2,r2,255
8112bd2c:	10000526 	beq	r2,zero,8112bd44 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
8112bd30:	e0bfff17 	ldw	r2,-4(fp)
8112bd34:	00c00404 	movi	r3,16
8112bd38:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
8112bd3c:	0005883a 	mov	r2,zero
8112bd40:	00002b06 	br	8112bdf0 <OSFlagCreate+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bd44:	0005303a 	rdctl	r2,status
8112bd48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bd4c:	e0fffd17 	ldw	r3,-12(fp)
8112bd50:	00bfff84 	movi	r2,-2
8112bd54:	1884703a 	and	r2,r3,r2
8112bd58:	1001703a 	wrctl	status,r2
  
  return context;
8112bd5c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112bd60:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
8112bd64:	d0a08f17 	ldw	r2,-32196(gp)
8112bd68:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
8112bd6c:	e0bffb17 	ldw	r2,-20(fp)
8112bd70:	10001726 	beq	r2,zero,8112bdd0 <OSFlagCreate+0xe0>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
8112bd74:	d0a08f17 	ldw	r2,-32196(gp)
8112bd78:	10800117 	ldw	r2,4(r2)
8112bd7c:	d0a08f15 	stw	r2,-32196(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
8112bd80:	e0bffb17 	ldw	r2,-20(fp)
8112bd84:	00c00144 	movi	r3,5
8112bd88:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
8112bd8c:	e0bffb17 	ldw	r2,-20(fp)
8112bd90:	e0fffe0b 	ldhu	r3,-8(fp)
8112bd94:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
8112bd98:	e0bffb17 	ldw	r2,-20(fp)
8112bd9c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
8112bda0:	e0bffb17 	ldw	r2,-20(fp)
8112bda4:	00c00fc4 	movi	r3,63
8112bda8:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112bdac:	e0bffb17 	ldw	r2,-20(fp)
8112bdb0:	100002c5 	stb	zero,11(r2)
8112bdb4:	e0bff917 	ldw	r2,-28(fp)
8112bdb8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bdbc:	e0bffa17 	ldw	r2,-24(fp)
8112bdc0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
8112bdc4:	e0bfff17 	ldw	r2,-4(fp)
8112bdc8:	10000005 	stb	zero,0(r2)
8112bdcc:	00000706 	br	8112bdec <OSFlagCreate+0xfc>
8112bdd0:	e0bff917 	ldw	r2,-28(fp)
8112bdd4:	e0bffc15 	stw	r2,-16(fp)
8112bdd8:	e0bffc17 	ldw	r2,-16(fp)
8112bddc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
8112bde0:	e0bfff17 	ldw	r2,-4(fp)
8112bde4:	00c01c84 	movi	r3,114
8112bde8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
8112bdec:	e0bffb17 	ldw	r2,-20(fp)
}
8112bdf0:	e037883a 	mov	sp,fp
8112bdf4:	df000017 	ldw	fp,0(sp)
8112bdf8:	dec00104 	addi	sp,sp,4
8112bdfc:	f800283a 	ret

8112be00 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
8112be00:	defff204 	addi	sp,sp,-56
8112be04:	de00012e 	bgeu	sp,et,8112be0c <OSFlagDel+0xc>
8112be08:	003b68fa 	trap	3
8112be0c:	dfc00d15 	stw	ra,52(sp)
8112be10:	df000c15 	stw	fp,48(sp)
8112be14:	df000c04 	addi	fp,sp,48
8112be18:	e13ffd15 	stw	r4,-12(fp)
8112be1c:	2805883a 	mov	r2,r5
8112be20:	e1bfff15 	stw	r6,-4(fp)
8112be24:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112be28:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112be2c:	e0bfff17 	ldw	r2,-4(fp)
8112be30:	1000021e 	bne	r2,zero,8112be3c <OSFlagDel+0x3c>
        return (pgrp);
8112be34:	e0bffd17 	ldw	r2,-12(fp)
8112be38:	00008006 	br	8112c03c <OSFlagDel+0x23c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112be3c:	e0bffd17 	ldw	r2,-12(fp)
8112be40:	1000051e 	bne	r2,zero,8112be58 <OSFlagDel+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112be44:	e0bfff17 	ldw	r2,-4(fp)
8112be48:	00c01b84 	movi	r3,110
8112be4c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112be50:	e0bffd17 	ldw	r2,-12(fp)
8112be54:	00007906 	br	8112c03c <OSFlagDel+0x23c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112be58:	d0a08a03 	ldbu	r2,-32216(gp)
8112be5c:	10803fcc 	andi	r2,r2,255
8112be60:	10000526 	beq	r2,zero,8112be78 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112be64:	e0bfff17 	ldw	r2,-4(fp)
8112be68:	00c003c4 	movi	r3,15
8112be6c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112be70:	e0bffd17 	ldw	r2,-12(fp)
8112be74:	00007106 	br	8112c03c <OSFlagDel+0x23c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
8112be78:	e0bffd17 	ldw	r2,-12(fp)
8112be7c:	10800003 	ldbu	r2,0(r2)
8112be80:	10803fcc 	andi	r2,r2,255
8112be84:	10800160 	cmpeqi	r2,r2,5
8112be88:	1000051e 	bne	r2,zero,8112bea0 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
8112be8c:	e0bfff17 	ldw	r2,-4(fp)
8112be90:	00c00044 	movi	r3,1
8112be94:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112be98:	e0bffd17 	ldw	r2,-12(fp)
8112be9c:	00006706 	br	8112c03c <OSFlagDel+0x23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bea0:	0005303a 	rdctl	r2,status
8112bea4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bea8:	e0fffc17 	ldw	r3,-16(fp)
8112beac:	00bfff84 	movi	r2,-2
8112beb0:	1884703a 	and	r2,r3,r2
8112beb4:	1001703a 	wrctl	status,r2
  
  return context;
8112beb8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112bebc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
8112bec0:	e0bffd17 	ldw	r2,-12(fp)
8112bec4:	10800117 	ldw	r2,4(r2)
8112bec8:	10000326 	beq	r2,zero,8112bed8 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112becc:	00800044 	movi	r2,1
8112bed0:	e0bff405 	stb	r2,-48(fp)
8112bed4:	00000106 	br	8112bedc <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112bed8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112bedc:	e0bffe03 	ldbu	r2,-8(fp)
8112bee0:	10000326 	beq	r2,zero,8112bef0 <OSFlagDel+0xf0>
8112bee4:	10800060 	cmpeqi	r2,r2,1
8112bee8:	1000231e 	bne	r2,zero,8112bf78 <OSFlagDel+0x178>
8112beec:	00004806 	br	8112c010 <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
8112bef0:	e0bff403 	ldbu	r2,-48(fp)
8112bef4:	1000161e 	bne	r2,zero,8112bf50 <OSFlagDel+0x150>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
8112bef8:	e0bffd17 	ldw	r2,-12(fp)
8112befc:	00c00fc4 	movi	r3,63
8112bf00:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112bf04:	e0bffd17 	ldw	r2,-12(fp)
8112bf08:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112bf0c:	e0bffd17 	ldw	r2,-12(fp)
8112bf10:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
8112bf14:	d0e08f17 	ldw	r3,-32196(gp)
8112bf18:	e0bffd17 	ldw	r2,-12(fp)
8112bf1c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112bf20:	e0bffd17 	ldw	r2,-12(fp)
8112bf24:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
8112bf28:	e0bffd17 	ldw	r2,-12(fp)
8112bf2c:	d0a08f15 	stw	r2,-32196(gp)
8112bf30:	e0bff717 	ldw	r2,-36(fp)
8112bf34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bf38:	e0bff817 	ldw	r2,-32(fp)
8112bf3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
8112bf40:	e0bfff17 	ldw	r2,-4(fp)
8112bf44:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
8112bf48:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
8112bf4c:	00003a06 	br	8112c038 <OSFlagDel+0x238>
8112bf50:	e0bff717 	ldw	r2,-36(fp)
8112bf54:	e0bff915 	stw	r2,-28(fp)
8112bf58:	e0bff917 	ldw	r2,-28(fp)
8112bf5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
8112bf60:	e0bfff17 	ldw	r2,-4(fp)
8112bf64:	00c01244 	movi	r3,73
8112bf68:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
8112bf6c:	e0bffd17 	ldw	r2,-12(fp)
8112bf70:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112bf74:	00003006 	br	8112c038 <OSFlagDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112bf78:	e0bffd17 	ldw	r2,-12(fp)
8112bf7c:	10800117 	ldw	r2,4(r2)
8112bf80:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112bf84:	00000606 	br	8112bfa0 <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
8112bf88:	000b883a 	mov	r5,zero
8112bf8c:	e13ff517 	ldw	r4,-44(fp)
8112bf90:	112cfb40 	call	8112cfb4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112bf94:	e0bff517 	ldw	r2,-44(fp)
8112bf98:	10800017 	ldw	r2,0(r2)
8112bf9c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112bfa0:	e0bff517 	ldw	r2,-44(fp)
8112bfa4:	103ff81e 	bne	r2,zero,8112bf88 <__reset+0xfb10bf88>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
8112bfa8:	e0bffd17 	ldw	r2,-12(fp)
8112bfac:	00c00fc4 	movi	r3,63
8112bfb0:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112bfb4:	e0bffd17 	ldw	r2,-12(fp)
8112bfb8:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112bfbc:	e0bffd17 	ldw	r2,-12(fp)
8112bfc0:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
8112bfc4:	d0e08f17 	ldw	r3,-32196(gp)
8112bfc8:	e0bffd17 	ldw	r2,-12(fp)
8112bfcc:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112bfd0:	e0bffd17 	ldw	r2,-12(fp)
8112bfd4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
8112bfd8:	e0bffd17 	ldw	r2,-12(fp)
8112bfdc:	d0a08f15 	stw	r2,-32196(gp)
8112bfe0:	e0bff717 	ldw	r2,-36(fp)
8112bfe4:	e0bffa15 	stw	r2,-24(fp)
8112bfe8:	e0bffa17 	ldw	r2,-24(fp)
8112bfec:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112bff0:	e0bff403 	ldbu	r2,-48(fp)
8112bff4:	10800058 	cmpnei	r2,r2,1
8112bff8:	1000011e 	bne	r2,zero,8112c000 <OSFlagDel+0x200>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112bffc:	112b0c40 	call	8112b0c4 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
8112c000:	e0bfff17 	ldw	r2,-4(fp)
8112c004:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
8112c008:	e03ff615 	stw	zero,-40(fp)
             break;
8112c00c:	00000a06 	br	8112c038 <OSFlagDel+0x238>
8112c010:	e0bff717 	ldw	r2,-36(fp)
8112c014:	e0bffb15 	stw	r2,-20(fp)
8112c018:	e0bffb17 	ldw	r2,-20(fp)
8112c01c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
8112c020:	e0bfff17 	ldw	r2,-4(fp)
8112c024:	00c001c4 	movi	r3,7
8112c028:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
8112c02c:	e0bffd17 	ldw	r2,-12(fp)
8112c030:	e0bff615 	stw	r2,-40(fp)
             break;
8112c034:	0001883a 	nop
    }
    return (pgrp_return);
8112c038:	e0bff617 	ldw	r2,-40(fp)
}
8112c03c:	e037883a 	mov	sp,fp
8112c040:	dfc00117 	ldw	ra,4(sp)
8112c044:	df000017 	ldw	fp,0(sp)
8112c048:	dec00204 	addi	sp,sp,8
8112c04c:	f800283a 	ret

8112c050 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112c050:	defff604 	addi	sp,sp,-40
8112c054:	de00012e 	bgeu	sp,et,8112c05c <OSFlagNameGet+0xc>
8112c058:	003b68fa 	trap	3
8112c05c:	dfc00915 	stw	ra,36(sp)
8112c060:	df000815 	stw	fp,32(sp)
8112c064:	df000804 	addi	fp,sp,32
8112c068:	e13ffd15 	stw	r4,-12(fp)
8112c06c:	e17ffe15 	stw	r5,-8(fp)
8112c070:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c074:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112c078:	e0bfff17 	ldw	r2,-4(fp)
8112c07c:	1000021e 	bne	r2,zero,8112c088 <OSFlagNameGet+0x38>
        return (0);
8112c080:	0005883a 	mov	r2,zero
8112c084:	00003906 	br	8112c16c <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112c088:	e0bffd17 	ldw	r2,-12(fp)
8112c08c:	1000051e 	bne	r2,zero,8112c0a4 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112c090:	e0bfff17 	ldw	r2,-4(fp)
8112c094:	00c01b84 	movi	r3,110
8112c098:	10c00005 	stb	r3,0(r2)
        return (0);
8112c09c:	0005883a 	mov	r2,zero
8112c0a0:	00003206 	br	8112c16c <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112c0a4:	e0bffe17 	ldw	r2,-8(fp)
8112c0a8:	1000051e 	bne	r2,zero,8112c0c0 <OSFlagNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112c0ac:	e0bfff17 	ldw	r2,-4(fp)
8112c0b0:	00c00304 	movi	r3,12
8112c0b4:	10c00005 	stb	r3,0(r2)
        return (0);
8112c0b8:	0005883a 	mov	r2,zero
8112c0bc:	00002b06 	br	8112c16c <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112c0c0:	d0a08a03 	ldbu	r2,-32216(gp)
8112c0c4:	10803fcc 	andi	r2,r2,255
8112c0c8:	10000526 	beq	r2,zero,8112c0e0 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112c0cc:	e0bfff17 	ldw	r2,-4(fp)
8112c0d0:	00c00444 	movi	r3,17
8112c0d4:	10c00005 	stb	r3,0(r2)
        return (0);
8112c0d8:	0005883a 	mov	r2,zero
8112c0dc:	00002306 	br	8112c16c <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c0e0:	0005303a 	rdctl	r2,status
8112c0e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c0e8:	e0fffc17 	ldw	r3,-16(fp)
8112c0ec:	00bfff84 	movi	r2,-2
8112c0f0:	1884703a 	and	r2,r3,r2
8112c0f4:	1001703a 	wrctl	status,r2
  
  return context;
8112c0f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c0fc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112c100:	e0bffd17 	ldw	r2,-12(fp)
8112c104:	10800003 	ldbu	r2,0(r2)
8112c108:	10803fcc 	andi	r2,r2,255
8112c10c:	10800160 	cmpeqi	r2,r2,5
8112c110:	1000091e 	bne	r2,zero,8112c138 <OSFlagNameGet+0xe8>
8112c114:	e0bff817 	ldw	r2,-32(fp)
8112c118:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c11c:	e0bff917 	ldw	r2,-28(fp)
8112c120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112c124:	e0bfff17 	ldw	r2,-4(fp)
8112c128:	00c00044 	movi	r3,1
8112c12c:	10c00005 	stb	r3,0(r2)
        return (0);
8112c130:	0005883a 	mov	r2,zero
8112c134:	00000d06 	br	8112c16c <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
8112c138:	e0bffd17 	ldw	r2,-12(fp)
8112c13c:	10800284 	addi	r2,r2,10
8112c140:	100b883a 	mov	r5,r2
8112c144:	e13ffe17 	ldw	r4,-8(fp)
8112c148:	112b2180 	call	8112b218 <OS_StrCopy>
8112c14c:	e0bffb05 	stb	r2,-20(fp)
8112c150:	e0bff817 	ldw	r2,-32(fp)
8112c154:	e0bffa15 	stw	r2,-24(fp)
8112c158:	e0bffa17 	ldw	r2,-24(fp)
8112c15c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c160:	e0bfff17 	ldw	r2,-4(fp)
8112c164:	10000005 	stb	zero,0(r2)
    return (len);
8112c168:	e0bffb03 	ldbu	r2,-20(fp)
}
8112c16c:	e037883a 	mov	sp,fp
8112c170:	dfc00117 	ldw	ra,4(sp)
8112c174:	df000017 	ldw	fp,0(sp)
8112c178:	dec00204 	addi	sp,sp,8
8112c17c:	f800283a 	ret

8112c180 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112c180:	defff504 	addi	sp,sp,-44
8112c184:	de00012e 	bgeu	sp,et,8112c18c <OSFlagNameSet+0xc>
8112c188:	003b68fa 	trap	3
8112c18c:	dfc00a15 	stw	ra,40(sp)
8112c190:	df000915 	stw	fp,36(sp)
8112c194:	df000904 	addi	fp,sp,36
8112c198:	e13ffd15 	stw	r4,-12(fp)
8112c19c:	e17ffe15 	stw	r5,-8(fp)
8112c1a0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c1a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112c1a8:	e0bfff17 	ldw	r2,-4(fp)
8112c1ac:	10004326 	beq	r2,zero,8112c2bc <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
8112c1b0:	e0bffd17 	ldw	r2,-12(fp)
8112c1b4:	1000041e 	bne	r2,zero,8112c1c8 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112c1b8:	e0bfff17 	ldw	r2,-4(fp)
8112c1bc:	00c01b84 	movi	r3,110
8112c1c0:	10c00005 	stb	r3,0(r2)
        return;
8112c1c4:	00003e06 	br	8112c2c0 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112c1c8:	e0bffe17 	ldw	r2,-8(fp)
8112c1cc:	1000041e 	bne	r2,zero,8112c1e0 <OSFlagNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112c1d0:	e0bfff17 	ldw	r2,-4(fp)
8112c1d4:	00c00304 	movi	r3,12
8112c1d8:	10c00005 	stb	r3,0(r2)
        return;
8112c1dc:	00003806 	br	8112c2c0 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112c1e0:	d0a08a03 	ldbu	r2,-32216(gp)
8112c1e4:	10803fcc 	andi	r2,r2,255
8112c1e8:	10000426 	beq	r2,zero,8112c1fc <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112c1ec:	e0bfff17 	ldw	r2,-4(fp)
8112c1f0:	00c00484 	movi	r3,18
8112c1f4:	10c00005 	stb	r3,0(r2)
        return;
8112c1f8:	00003106 	br	8112c2c0 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c1fc:	0005303a 	rdctl	r2,status
8112c200:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c204:	e0fffc17 	ldw	r3,-16(fp)
8112c208:	00bfff84 	movi	r2,-2
8112c20c:	1884703a 	and	r2,r3,r2
8112c210:	1001703a 	wrctl	status,r2
  
  return context;
8112c214:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c218:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112c21c:	e0bffd17 	ldw	r2,-12(fp)
8112c220:	10800003 	ldbu	r2,0(r2)
8112c224:	10803fcc 	andi	r2,r2,255
8112c228:	10800160 	cmpeqi	r2,r2,5
8112c22c:	1000081e 	bne	r2,zero,8112c250 <OSFlagNameSet+0xd0>
8112c230:	e0bff717 	ldw	r2,-36(fp)
8112c234:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c238:	e0bff817 	ldw	r2,-32(fp)
8112c23c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112c240:	e0bfff17 	ldw	r2,-4(fp)
8112c244:	00c00044 	movi	r3,1
8112c248:	10c00005 	stb	r3,0(r2)
        return;
8112c24c:	00001c06 	br	8112c2c0 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112c250:	e13ffe17 	ldw	r4,-8(fp)
8112c254:	112b2940 	call	8112b294 <OS_StrLen>
8112c258:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
8112c25c:	e0bffa03 	ldbu	r2,-24(fp)
8112c260:	10800830 	cmpltui	r2,r2,32
8112c264:	1000081e 	bne	r2,zero,8112c288 <OSFlagNameSet+0x108>
8112c268:	e0bff717 	ldw	r2,-36(fp)
8112c26c:	e0bff915 	stw	r2,-28(fp)
8112c270:	e0bff917 	ldw	r2,-28(fp)
8112c274:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
8112c278:	e0bfff17 	ldw	r2,-4(fp)
8112c27c:	00c01cc4 	movi	r3,115
8112c280:	10c00005 	stb	r3,0(r2)
        return;
8112c284:	00000e06 	br	8112c2c0 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
8112c288:	e0bffd17 	ldw	r2,-12(fp)
8112c28c:	10800284 	addi	r2,r2,10
8112c290:	e17ffe17 	ldw	r5,-8(fp)
8112c294:	1009883a 	mov	r4,r2
8112c298:	112b2180 	call	8112b218 <OS_StrCopy>
8112c29c:	e0bff717 	ldw	r2,-36(fp)
8112c2a0:	e0bffb15 	stw	r2,-20(fp)
8112c2a4:	e0bffb17 	ldw	r2,-20(fp)
8112c2a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c2ac:	e0bfff17 	ldw	r2,-4(fp)
8112c2b0:	10000005 	stb	zero,0(r2)
    return;
8112c2b4:	0001883a 	nop
8112c2b8:	00000106 	br	8112c2c0 <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112c2bc:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
8112c2c0:	e037883a 	mov	sp,fp
8112c2c4:	dfc00117 	ldw	ra,4(sp)
8112c2c8:	df000017 	ldw	fp,0(sp)
8112c2cc:	dec00204 	addi	sp,sp,8
8112c2d0:	f800283a 	ret

8112c2d4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
8112c2d4:	deffe104 	addi	sp,sp,-124
8112c2d8:	de00012e 	bgeu	sp,et,8112c2e0 <OSFlagPend+0xc>
8112c2dc:	003b68fa 	trap	3
8112c2e0:	dfc01e15 	stw	ra,120(sp)
8112c2e4:	df001d15 	stw	fp,116(sp)
8112c2e8:	df001d04 	addi	fp,sp,116
8112c2ec:	e13ffc15 	stw	r4,-16(fp)
8112c2f0:	2809883a 	mov	r4,r5
8112c2f4:	3007883a 	mov	r3,r6
8112c2f8:	3805883a 	mov	r2,r7
8112c2fc:	e13ffd0d 	sth	r4,-12(fp)
8112c300:	e0fffe05 	stb	r3,-8(fp)
8112c304:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112c308:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112c30c:	e0800217 	ldw	r2,8(fp)
8112c310:	1000021e 	bne	r2,zero,8112c31c <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
8112c314:	0005883a 	mov	r2,zero
8112c318:	00015906 	br	8112c880 <OSFlagPend+0x5ac>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112c31c:	e0bffc17 	ldw	r2,-16(fp)
8112c320:	1000051e 	bne	r2,zero,8112c338 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112c324:	e0800217 	ldw	r2,8(fp)
8112c328:	00c01b84 	movi	r3,110
8112c32c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c330:	0005883a 	mov	r2,zero
8112c334:	00015206 	br	8112c880 <OSFlagPend+0x5ac>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112c338:	d0a08a03 	ldbu	r2,-32216(gp)
8112c33c:	10803fcc 	andi	r2,r2,255
8112c340:	10000526 	beq	r2,zero,8112c358 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112c344:	e0800217 	ldw	r2,8(fp)
8112c348:	00c00084 	movi	r3,2
8112c34c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c350:	0005883a 	mov	r2,zero
8112c354:	00014a06 	br	8112c880 <OSFlagPend+0x5ac>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112c358:	d0a07803 	ldbu	r2,-32288(gp)
8112c35c:	10803fcc 	andi	r2,r2,255
8112c360:	10000526 	beq	r2,zero,8112c378 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112c364:	e0800217 	ldw	r2,8(fp)
8112c368:	00c00344 	movi	r3,13
8112c36c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c370:	0005883a 	mov	r2,zero
8112c374:	00014206 	br	8112c880 <OSFlagPend+0x5ac>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
8112c378:	e0bffc17 	ldw	r2,-16(fp)
8112c37c:	10800003 	ldbu	r2,0(r2)
8112c380:	10803fcc 	andi	r2,r2,255
8112c384:	10800160 	cmpeqi	r2,r2,5
8112c388:	1000051e 	bne	r2,zero,8112c3a0 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
8112c38c:	e0800217 	ldw	r2,8(fp)
8112c390:	00c00044 	movi	r3,1
8112c394:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c398:	0005883a 	mov	r2,zero
8112c39c:	00013806 	br	8112c880 <OSFlagPend+0x5ac>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
8112c3a0:	e0fffe03 	ldbu	r3,-8(fp)
8112c3a4:	00bfe004 	movi	r2,-128
8112c3a8:	1884703a 	and	r2,r3,r2
8112c3ac:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
8112c3b0:	e0bfe603 	ldbu	r2,-104(fp)
8112c3b4:	10000626 	beq	r2,zero,8112c3d0 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
8112c3b8:	e0bffe03 	ldbu	r2,-8(fp)
8112c3bc:	10801fcc 	andi	r2,r2,127
8112c3c0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
8112c3c4:	00800044 	movi	r2,1
8112c3c8:	e0bfe405 	stb	r2,-112(fp)
8112c3cc:	00000106 	br	8112c3d4 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
8112c3d0:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c3d4:	0005303a 	rdctl	r2,status
8112c3d8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c3dc:	e0fff617 	ldw	r3,-40(fp)
8112c3e0:	00bfff84 	movi	r2,-2
8112c3e4:	1884703a 	and	r2,r3,r2
8112c3e8:	1001703a 	wrctl	status,r2
  
  return context;
8112c3ec:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112c3f0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
8112c3f4:	e0bffe03 	ldbu	r2,-8(fp)
8112c3f8:	10c00060 	cmpeqi	r3,r2,1
8112c3fc:	1800921e 	bne	r3,zero,8112c648 <OSFlagPend+0x374>
8112c400:	10c00088 	cmpgei	r3,r2,2
8112c404:	1800021e 	bne	r3,zero,8112c410 <OSFlagPend+0x13c>
8112c408:	10006126 	beq	r2,zero,8112c590 <OSFlagPend+0x2bc>
8112c40c:	0000bb06 	br	8112c6fc <OSFlagPend+0x428>
8112c410:	10c000a0 	cmpeqi	r3,r2,2
8112c414:	1800031e 	bne	r3,zero,8112c424 <OSFlagPend+0x150>
8112c418:	108000e0 	cmpeqi	r2,r2,3
8112c41c:	10002f1e 	bne	r2,zero,8112c4dc <OSFlagPend+0x208>
8112c420:	0000b606 	br	8112c6fc <OSFlagPend+0x428>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
8112c424:	e0bffc17 	ldw	r2,-16(fp)
8112c428:	10c0020b 	ldhu	r3,8(r2)
8112c42c:	e0bffd0b 	ldhu	r2,-12(fp)
8112c430:	1884703a 	and	r2,r3,r2
8112c434:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112c438:	e0ffe80b 	ldhu	r3,-96(fp)
8112c43c:	e0bffd0b 	ldhu	r2,-12(fp)
8112c440:	1880171e 	bne	r3,r2,8112c4a0 <OSFlagPend+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112c444:	e0bfe403 	ldbu	r2,-112(fp)
8112c448:	10800058 	cmpnei	r2,r2,1
8112c44c:	1000091e 	bne	r2,zero,8112c474 <OSFlagPend+0x1a0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112c450:	e0bffc17 	ldw	r2,-16(fp)
8112c454:	1080020b 	ldhu	r2,8(r2)
8112c458:	1007883a 	mov	r3,r2
8112c45c:	e0bfe80b 	ldhu	r2,-96(fp)
8112c460:	0084303a 	nor	r2,zero,r2
8112c464:	1884703a 	and	r2,r3,r2
8112c468:	1007883a 	mov	r3,r2
8112c46c:	e0bffc17 	ldw	r2,-16(fp)
8112c470:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112c474:	d0a08b17 	ldw	r2,-32212(gp)
8112c478:	e0ffe80b 	ldhu	r3,-96(fp)
8112c47c:	10c00b0d 	sth	r3,44(r2)
8112c480:	e0bfe517 	ldw	r2,-108(fp)
8112c484:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c488:	e0bfe717 	ldw	r2,-100(fp)
8112c48c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112c490:	e0800217 	ldw	r2,8(fp)
8112c494:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112c498:	e0bfe80b 	ldhu	r2,-96(fp)
8112c49c:	0000f806 	br	8112c880 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112c4a0:	e13ffd0b 	ldhu	r4,-12(fp)
8112c4a4:	e17ffe03 	ldbu	r5,-8(fp)
8112c4a8:	e0bfff0b 	ldhu	r2,-4(fp)
8112c4ac:	e0fff704 	addi	r3,fp,-36
8112c4b0:	d8800015 	stw	r2,0(sp)
8112c4b4:	280f883a 	mov	r7,r5
8112c4b8:	200d883a 	mov	r6,r4
8112c4bc:	180b883a 	mov	r5,r3
8112c4c0:	e13ffc17 	ldw	r4,-16(fp)
8112c4c4:	112cd640 	call	8112cd64 <OS_FlagBlock>
8112c4c8:	e0bfe517 	ldw	r2,-108(fp)
8112c4cc:	e0bfe915 	stw	r2,-92(fp)
8112c4d0:	e0bfe917 	ldw	r2,-92(fp)
8112c4d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112c4d8:	00009206 	br	8112c724 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
8112c4dc:	e0bffc17 	ldw	r2,-16(fp)
8112c4e0:	10c0020b 	ldhu	r3,8(r2)
8112c4e4:	e0bffd0b 	ldhu	r2,-12(fp)
8112c4e8:	1884703a 	and	r2,r3,r2
8112c4ec:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112c4f0:	e0bfe80b 	ldhu	r2,-96(fp)
8112c4f4:	10001726 	beq	r2,zero,8112c554 <OSFlagPend+0x280>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112c4f8:	e0bfe403 	ldbu	r2,-112(fp)
8112c4fc:	10800058 	cmpnei	r2,r2,1
8112c500:	1000091e 	bne	r2,zero,8112c528 <OSFlagPend+0x254>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112c504:	e0bffc17 	ldw	r2,-16(fp)
8112c508:	1080020b 	ldhu	r2,8(r2)
8112c50c:	1007883a 	mov	r3,r2
8112c510:	e0bfe80b 	ldhu	r2,-96(fp)
8112c514:	0084303a 	nor	r2,zero,r2
8112c518:	1884703a 	and	r2,r3,r2
8112c51c:	1007883a 	mov	r3,r2
8112c520:	e0bffc17 	ldw	r2,-16(fp)
8112c524:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112c528:	d0a08b17 	ldw	r2,-32212(gp)
8112c52c:	e0ffe80b 	ldhu	r3,-96(fp)
8112c530:	10c00b0d 	sth	r3,44(r2)
8112c534:	e0bfe517 	ldw	r2,-108(fp)
8112c538:	e0bfea15 	stw	r2,-88(fp)
8112c53c:	e0bfea17 	ldw	r2,-88(fp)
8112c540:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112c544:	e0800217 	ldw	r2,8(fp)
8112c548:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112c54c:	e0bfe80b 	ldhu	r2,-96(fp)
8112c550:	0000cb06 	br	8112c880 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112c554:	e13ffd0b 	ldhu	r4,-12(fp)
8112c558:	e17ffe03 	ldbu	r5,-8(fp)
8112c55c:	e0bfff0b 	ldhu	r2,-4(fp)
8112c560:	e0fff704 	addi	r3,fp,-36
8112c564:	d8800015 	stw	r2,0(sp)
8112c568:	280f883a 	mov	r7,r5
8112c56c:	200d883a 	mov	r6,r4
8112c570:	180b883a 	mov	r5,r3
8112c574:	e13ffc17 	ldw	r4,-16(fp)
8112c578:	112cd640 	call	8112cd64 <OS_FlagBlock>
8112c57c:	e0bfe517 	ldw	r2,-108(fp)
8112c580:	e0bfeb15 	stw	r2,-84(fp)
8112c584:	e0bfeb17 	ldw	r2,-84(fp)
8112c588:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112c58c:	00006506 	br	8112c724 <OSFlagPend+0x450>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
8112c590:	e0bffc17 	ldw	r2,-16(fp)
8112c594:	1080020b 	ldhu	r2,8(r2)
8112c598:	0084303a 	nor	r2,zero,r2
8112c59c:	1007883a 	mov	r3,r2
8112c5a0:	e0bffd0b 	ldhu	r2,-12(fp)
8112c5a4:	1884703a 	and	r2,r3,r2
8112c5a8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112c5ac:	e0ffe80b 	ldhu	r3,-96(fp)
8112c5b0:	e0bffd0b 	ldhu	r2,-12(fp)
8112c5b4:	1880151e 	bne	r3,r2,8112c60c <OSFlagPend+0x338>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112c5b8:	e0bfe403 	ldbu	r2,-112(fp)
8112c5bc:	10800058 	cmpnei	r2,r2,1
8112c5c0:	1000071e 	bne	r2,zero,8112c5e0 <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
8112c5c4:	e0bffc17 	ldw	r2,-16(fp)
8112c5c8:	10c0020b 	ldhu	r3,8(r2)
8112c5cc:	e0bfe80b 	ldhu	r2,-96(fp)
8112c5d0:	1884b03a 	or	r2,r3,r2
8112c5d4:	1007883a 	mov	r3,r2
8112c5d8:	e0bffc17 	ldw	r2,-16(fp)
8112c5dc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112c5e0:	d0a08b17 	ldw	r2,-32212(gp)
8112c5e4:	e0ffe80b 	ldhu	r3,-96(fp)
8112c5e8:	10c00b0d 	sth	r3,44(r2)
8112c5ec:	e0bfe517 	ldw	r2,-108(fp)
8112c5f0:	e0bfec15 	stw	r2,-80(fp)
8112c5f4:	e0bfec17 	ldw	r2,-80(fp)
8112c5f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112c5fc:	e0800217 	ldw	r2,8(fp)
8112c600:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112c604:	e0bfe80b 	ldhu	r2,-96(fp)
8112c608:	00009d06 	br	8112c880 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112c60c:	e13ffd0b 	ldhu	r4,-12(fp)
8112c610:	e17ffe03 	ldbu	r5,-8(fp)
8112c614:	e0bfff0b 	ldhu	r2,-4(fp)
8112c618:	e0fff704 	addi	r3,fp,-36
8112c61c:	d8800015 	stw	r2,0(sp)
8112c620:	280f883a 	mov	r7,r5
8112c624:	200d883a 	mov	r6,r4
8112c628:	180b883a 	mov	r5,r3
8112c62c:	e13ffc17 	ldw	r4,-16(fp)
8112c630:	112cd640 	call	8112cd64 <OS_FlagBlock>
8112c634:	e0bfe517 	ldw	r2,-108(fp)
8112c638:	e0bfed15 	stw	r2,-76(fp)
8112c63c:	e0bfed17 	ldw	r2,-76(fp)
8112c640:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112c644:	00003706 	br	8112c724 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
8112c648:	e0bffc17 	ldw	r2,-16(fp)
8112c64c:	1080020b 	ldhu	r2,8(r2)
8112c650:	0084303a 	nor	r2,zero,r2
8112c654:	1007883a 	mov	r3,r2
8112c658:	e0bffd0b 	ldhu	r2,-12(fp)
8112c65c:	1884703a 	and	r2,r3,r2
8112c660:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
8112c664:	e0bfe80b 	ldhu	r2,-96(fp)
8112c668:	10001526 	beq	r2,zero,8112c6c0 <OSFlagPend+0x3ec>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112c66c:	e0bfe403 	ldbu	r2,-112(fp)
8112c670:	10800058 	cmpnei	r2,r2,1
8112c674:	1000071e 	bne	r2,zero,8112c694 <OSFlagPend+0x3c0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
8112c678:	e0bffc17 	ldw	r2,-16(fp)
8112c67c:	10c0020b 	ldhu	r3,8(r2)
8112c680:	e0bfe80b 	ldhu	r2,-96(fp)
8112c684:	1884b03a 	or	r2,r3,r2
8112c688:	1007883a 	mov	r3,r2
8112c68c:	e0bffc17 	ldw	r2,-16(fp)
8112c690:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
8112c694:	d0a08b17 	ldw	r2,-32212(gp)
8112c698:	e0ffe80b 	ldhu	r3,-96(fp)
8112c69c:	10c00b0d 	sth	r3,44(r2)
8112c6a0:	e0bfe517 	ldw	r2,-108(fp)
8112c6a4:	e0bfee15 	stw	r2,-72(fp)
8112c6a8:	e0bfee17 	ldw	r2,-72(fp)
8112c6ac:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112c6b0:	e0800217 	ldw	r2,8(fp)
8112c6b4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
8112c6b8:	e0bfe80b 	ldhu	r2,-96(fp)
8112c6bc:	00007006 	br	8112c880 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112c6c0:	e13ffd0b 	ldhu	r4,-12(fp)
8112c6c4:	e17ffe03 	ldbu	r5,-8(fp)
8112c6c8:	e0bfff0b 	ldhu	r2,-4(fp)
8112c6cc:	e0fff704 	addi	r3,fp,-36
8112c6d0:	d8800015 	stw	r2,0(sp)
8112c6d4:	280f883a 	mov	r7,r5
8112c6d8:	200d883a 	mov	r6,r4
8112c6dc:	180b883a 	mov	r5,r3
8112c6e0:	e13ffc17 	ldw	r4,-16(fp)
8112c6e4:	112cd640 	call	8112cd64 <OS_FlagBlock>
8112c6e8:	e0bfe517 	ldw	r2,-108(fp)
8112c6ec:	e0bfef15 	stw	r2,-68(fp)
8112c6f0:	e0bfef17 	ldw	r2,-68(fp)
8112c6f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112c6f8:	00000a06 	br	8112c724 <OSFlagPend+0x450>
8112c6fc:	e0bfe517 	ldw	r2,-108(fp)
8112c700:	e0bff015 	stw	r2,-64(fp)
8112c704:	e0bff017 	ldw	r2,-64(fp)
8112c708:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112c70c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
8112c710:	e0800217 	ldw	r2,8(fp)
8112c714:	00c01bc4 	movi	r3,111
8112c718:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
8112c71c:	e0bfe80b 	ldhu	r2,-96(fp)
8112c720:	00005706 	br	8112c880 <OSFlagPend+0x5ac>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
8112c724:	112b0c40 	call	8112b0c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c728:	0005303a 	rdctl	r2,status
8112c72c:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c730:	e0fff117 	ldw	r3,-60(fp)
8112c734:	00bfff84 	movi	r2,-2
8112c738:	1884703a 	and	r2,r3,r2
8112c73c:	1001703a 	wrctl	status,r2
  
  return context;
8112c740:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
8112c744:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
8112c748:	d0a08b17 	ldw	r2,-32212(gp)
8112c74c:	10800c43 	ldbu	r2,49(r2)
8112c750:	10803fcc 	andi	r2,r2,255
8112c754:	10001c26 	beq	r2,zero,8112c7c8 <OSFlagPend+0x4f4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
8112c758:	d0a08b17 	ldw	r2,-32212(gp)
8112c75c:	10800c43 	ldbu	r2,49(r2)
8112c760:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112c764:	d0a08b17 	ldw	r2,-32212(gp)
8112c768:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
8112c76c:	e0bff704 	addi	r2,fp,-36
8112c770:	1009883a 	mov	r4,r2
8112c774:	112d0b00 	call	8112d0b0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
8112c778:	d0a08b17 	ldw	r2,-32212(gp)
8112c77c:	10000c05 	stb	zero,48(r2)
8112c780:	e0bfe517 	ldw	r2,-108(fp)
8112c784:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c788:	e0bff217 	ldw	r2,-56(fp)
8112c78c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
8112c790:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
8112c794:	e0bff303 	ldbu	r2,-52(fp)
8112c798:	108000a0 	cmpeqi	r2,r2,2
8112c79c:	10000426 	beq	r2,zero,8112c7b0 <OSFlagPend+0x4dc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
8112c7a0:	e0800217 	ldw	r2,8(fp)
8112c7a4:	00c00384 	movi	r3,14
8112c7a8:	10c00005 	stb	r3,0(r2)
                 break;
8112c7ac:	00000406 	br	8112c7c0 <OSFlagPend+0x4ec>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
8112c7b0:	e0800217 	ldw	r2,8(fp)
8112c7b4:	00c00284 	movi	r3,10
8112c7b8:	10c00005 	stb	r3,0(r2)
                 break;
8112c7bc:	0001883a 	nop
        }
        return (flags_rdy);
8112c7c0:	e0bfe80b 	ldhu	r2,-96(fp)
8112c7c4:	00002e06 	br	8112c880 <OSFlagPend+0x5ac>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
8112c7c8:	d0a08b17 	ldw	r2,-32212(gp)
8112c7cc:	10800b0b 	ldhu	r2,44(r2)
8112c7d0:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
8112c7d4:	e0bfe403 	ldbu	r2,-112(fp)
8112c7d8:	10800058 	cmpnei	r2,r2,1
8112c7dc:	1000211e 	bne	r2,zero,8112c864 <OSFlagPend+0x590>
        switch (wait_type) {
8112c7e0:	e0bffe03 	ldbu	r2,-8(fp)
8112c7e4:	10001616 	blt	r2,zero,8112c840 <OSFlagPend+0x56c>
8112c7e8:	10c00090 	cmplti	r3,r2,2
8112c7ec:	18000c1e 	bne	r3,zero,8112c820 <OSFlagPend+0x54c>
8112c7f0:	10800108 	cmpgei	r2,r2,4
8112c7f4:	1000121e 	bne	r2,zero,8112c840 <OSFlagPend+0x56c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
8112c7f8:	e0bffc17 	ldw	r2,-16(fp)
8112c7fc:	1080020b 	ldhu	r2,8(r2)
8112c800:	1007883a 	mov	r3,r2
8112c804:	e0bfe80b 	ldhu	r2,-96(fp)
8112c808:	0084303a 	nor	r2,zero,r2
8112c80c:	1884703a 	and	r2,r3,r2
8112c810:	1007883a 	mov	r3,r2
8112c814:	e0bffc17 	ldw	r2,-16(fp)
8112c818:	10c0020d 	sth	r3,8(r2)
                 break;
8112c81c:	00001106 	br	8112c864 <OSFlagPend+0x590>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
8112c820:	e0bffc17 	ldw	r2,-16(fp)
8112c824:	10c0020b 	ldhu	r3,8(r2)
8112c828:	e0bfe80b 	ldhu	r2,-96(fp)
8112c82c:	1884b03a 	or	r2,r3,r2
8112c830:	1007883a 	mov	r3,r2
8112c834:	e0bffc17 	ldw	r2,-16(fp)
8112c838:	10c0020d 	sth	r3,8(r2)
                 break;
8112c83c:	00000906 	br	8112c864 <OSFlagPend+0x590>
8112c840:	e0bfe517 	ldw	r2,-108(fp)
8112c844:	e0bff415 	stw	r2,-48(fp)
8112c848:	e0bff417 	ldw	r2,-48(fp)
8112c84c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112c850:	e0800217 	ldw	r2,8(fp)
8112c854:	00c01bc4 	movi	r3,111
8112c858:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112c85c:	0005883a 	mov	r2,zero
8112c860:	00000706 	br	8112c880 <OSFlagPend+0x5ac>
8112c864:	e0bfe517 	ldw	r2,-108(fp)
8112c868:	e0bff515 	stw	r2,-44(fp)
8112c86c:	e0bff517 	ldw	r2,-44(fp)
8112c870:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
8112c874:	e0800217 	ldw	r2,8(fp)
8112c878:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
8112c87c:	e0bfe80b 	ldhu	r2,-96(fp)
}
8112c880:	e037883a 	mov	sp,fp
8112c884:	dfc00117 	ldw	ra,4(sp)
8112c888:	df000017 	ldw	fp,0(sp)
8112c88c:	dec00204 	addi	sp,sp,8
8112c890:	f800283a 	ret

8112c894 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
8112c894:	defffb04 	addi	sp,sp,-20
8112c898:	de00012e 	bgeu	sp,et,8112c8a0 <OSFlagPendGetFlagsRdy+0xc>
8112c89c:	003b68fa 	trap	3
8112c8a0:	df000415 	stw	fp,16(sp)
8112c8a4:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112c8a8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c8ac:	0005303a 	rdctl	r2,status
8112c8b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c8b4:	e0fffe17 	ldw	r3,-8(fp)
8112c8b8:	00bfff84 	movi	r2,-2
8112c8bc:	1884703a 	and	r2,r3,r2
8112c8c0:	1001703a 	wrctl	status,r2
  
  return context;
8112c8c4:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112c8c8:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
8112c8cc:	d0a08b17 	ldw	r2,-32212(gp)
8112c8d0:	10800b0b 	ldhu	r2,44(r2)
8112c8d4:	e0bffd0d 	sth	r2,-12(fp)
8112c8d8:	e0bffc17 	ldw	r2,-16(fp)
8112c8dc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c8e0:	e0bfff17 	ldw	r2,-4(fp)
8112c8e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
8112c8e8:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112c8ec:	e037883a 	mov	sp,fp
8112c8f0:	df000017 	ldw	fp,0(sp)
8112c8f4:	dec00104 	addi	sp,sp,4
8112c8f8:	f800283a 	ret

8112c8fc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
8112c8fc:	deffef04 	addi	sp,sp,-68
8112c900:	de00012e 	bgeu	sp,et,8112c908 <OSFlagPost+0xc>
8112c904:	003b68fa 	trap	3
8112c908:	dfc01015 	stw	ra,64(sp)
8112c90c:	df000f15 	stw	fp,60(sp)
8112c910:	df000f04 	addi	fp,sp,60
8112c914:	e13ffc15 	stw	r4,-16(fp)
8112c918:	2807883a 	mov	r3,r5
8112c91c:	3005883a 	mov	r2,r6
8112c920:	e1ffff15 	stw	r7,-4(fp)
8112c924:	e0fffd0d 	sth	r3,-12(fp)
8112c928:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
8112c92c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112c930:	e0bfff17 	ldw	r2,-4(fp)
8112c934:	1000021e 	bne	r2,zero,8112c940 <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
8112c938:	0005883a 	mov	r2,zero
8112c93c:	0000d106 	br	8112cc84 <OSFlagPost+0x388>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
8112c940:	e0bffc17 	ldw	r2,-16(fp)
8112c944:	1000051e 	bne	r2,zero,8112c95c <OSFlagPost+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112c948:	e0bfff17 	ldw	r2,-4(fp)
8112c94c:	00c01b84 	movi	r3,110
8112c950:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c954:	0005883a 	mov	r2,zero
8112c958:	0000ca06 	br	8112cc84 <OSFlagPost+0x388>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
8112c95c:	e0bffc17 	ldw	r2,-16(fp)
8112c960:	10800003 	ldbu	r2,0(r2)
8112c964:	10803fcc 	andi	r2,r2,255
8112c968:	10800160 	cmpeqi	r2,r2,5
8112c96c:	1000051e 	bne	r2,zero,8112c984 <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
8112c970:	e0bfff17 	ldw	r2,-4(fp)
8112c974:	00c00044 	movi	r3,1
8112c978:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112c97c:	0005883a 	mov	r2,zero
8112c980:	0000c006 	br	8112cc84 <OSFlagPost+0x388>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c984:	0005303a 	rdctl	r2,status
8112c988:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c98c:	e0fffb17 	ldw	r3,-20(fp)
8112c990:	00bfff84 	movi	r2,-2
8112c994:	1884703a 	and	r2,r3,r2
8112c998:	1001703a 	wrctl	status,r2
  
  return context;
8112c99c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112c9a0:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
8112c9a4:	e0bffe03 	ldbu	r2,-8(fp)
8112c9a8:	10000326 	beq	r2,zero,8112c9b8 <OSFlagPost+0xbc>
8112c9ac:	10800060 	cmpeqi	r2,r2,1
8112c9b0:	10000b1e 	bne	r2,zero,8112c9e0 <OSFlagPost+0xe4>
8112c9b4:	00001206 	br	8112ca00 <OSFlagPost+0x104>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
8112c9b8:	e0bffc17 	ldw	r2,-16(fp)
8112c9bc:	1080020b 	ldhu	r2,8(r2)
8112c9c0:	1007883a 	mov	r3,r2
8112c9c4:	e0bffd0b 	ldhu	r2,-12(fp)
8112c9c8:	0084303a 	nor	r2,zero,r2
8112c9cc:	1884703a 	and	r2,r3,r2
8112c9d0:	1007883a 	mov	r3,r2
8112c9d4:	e0bffc17 	ldw	r2,-16(fp)
8112c9d8:	10c0020d 	sth	r3,8(r2)
             break;
8112c9dc:	00001106 	br	8112ca24 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
8112c9e0:	e0bffc17 	ldw	r2,-16(fp)
8112c9e4:	10c0020b 	ldhu	r3,8(r2)
8112c9e8:	e0bffd0b 	ldhu	r2,-12(fp)
8112c9ec:	1884b03a 	or	r2,r3,r2
8112c9f0:	1007883a 	mov	r3,r2
8112c9f4:	e0bffc17 	ldw	r2,-16(fp)
8112c9f8:	10c0020d 	sth	r3,8(r2)
             break;
8112c9fc:	00000906 	br	8112ca24 <OSFlagPost+0x128>
8112ca00:	e0bff317 	ldw	r2,-52(fp)
8112ca04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ca08:	e0bff417 	ldw	r2,-48(fp)
8112ca0c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
8112ca10:	e0bfff17 	ldw	r2,-4(fp)
8112ca14:	00c01c44 	movi	r3,113
8112ca18:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
8112ca1c:	0005883a 	mov	r2,zero
8112ca20:	00009806 	br	8112cc84 <OSFlagPost+0x388>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
8112ca24:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112ca28:	e0bffc17 	ldw	r2,-16(fp)
8112ca2c:	10800117 	ldw	r2,4(r2)
8112ca30:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112ca34:	00007706 	br	8112cc14 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
8112ca38:	e0bff117 	ldw	r2,-60(fp)
8112ca3c:	10800483 	ldbu	r2,18(r2)
8112ca40:	10803fcc 	andi	r2,r2,255
8112ca44:	10c00060 	cmpeqi	r3,r2,1
8112ca48:	18004a1e 	bne	r3,zero,8112cb74 <OSFlagPost+0x278>
8112ca4c:	10c00088 	cmpgei	r3,r2,2
8112ca50:	1800021e 	bne	r3,zero,8112ca5c <OSFlagPost+0x160>
8112ca54:	10002f26 	beq	r2,zero,8112cb14 <OSFlagPost+0x218>
8112ca58:	00005b06 	br	8112cbc8 <OSFlagPost+0x2cc>
8112ca5c:	10c000a0 	cmpeqi	r3,r2,2
8112ca60:	1800031e 	bne	r3,zero,8112ca70 <OSFlagPost+0x174>
8112ca64:	108000e0 	cmpeqi	r2,r2,3
8112ca68:	1000171e 	bne	r2,zero,8112cac8 <OSFlagPost+0x1cc>
8112ca6c:	00005606 	br	8112cbc8 <OSFlagPost+0x2cc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112ca70:	e0bffc17 	ldw	r2,-16(fp)
8112ca74:	10c0020b 	ldhu	r3,8(r2)
8112ca78:	e0bff117 	ldw	r2,-60(fp)
8112ca7c:	1080040b 	ldhu	r2,16(r2)
8112ca80:	1884703a 	and	r2,r3,r2
8112ca84:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112ca88:	e0bff117 	ldw	r2,-60(fp)
8112ca8c:	1080040b 	ldhu	r2,16(r2)
8112ca90:	10ffffcc 	andi	r3,r2,65535
8112ca94:	e0bff60b 	ldhu	r2,-40(fp)
8112ca98:	1880541e 	bne	r3,r2,8112cbec <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112ca9c:	e0bff60b 	ldhu	r2,-40(fp)
8112caa0:	100b883a 	mov	r5,r2
8112caa4:	e13ff117 	ldw	r4,-60(fp)
8112caa8:	112cfb40 	call	8112cfb4 <OS_FlagTaskRdy>
8112caac:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112cab0:	e0bff683 	ldbu	r2,-38(fp)
8112cab4:	10800058 	cmpnei	r2,r2,1
8112cab8:	10004c1e 	bne	r2,zero,8112cbec <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112cabc:	00800044 	movi	r2,1
8112cac0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112cac4:	00004906 	br	8112cbec <OSFlagPost+0x2f0>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112cac8:	e0bffc17 	ldw	r2,-16(fp)
8112cacc:	10c0020b 	ldhu	r3,8(r2)
8112cad0:	e0bff117 	ldw	r2,-60(fp)
8112cad4:	1080040b 	ldhu	r2,16(r2)
8112cad8:	1884703a 	and	r2,r3,r2
8112cadc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112cae0:	e0bff60b 	ldhu	r2,-40(fp)
8112cae4:	10004326 	beq	r2,zero,8112cbf4 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112cae8:	e0bff60b 	ldhu	r2,-40(fp)
8112caec:	100b883a 	mov	r5,r2
8112caf0:	e13ff117 	ldw	r4,-60(fp)
8112caf4:	112cfb40 	call	8112cfb4 <OS_FlagTaskRdy>
8112caf8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112cafc:	e0bff683 	ldbu	r2,-38(fp)
8112cb00:	10800058 	cmpnei	r2,r2,1
8112cb04:	10003b1e 	bne	r2,zero,8112cbf4 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112cb08:	00800044 	movi	r2,1
8112cb0c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112cb10:	00003806 	br	8112cbf4 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112cb14:	e0bffc17 	ldw	r2,-16(fp)
8112cb18:	1080020b 	ldhu	r2,8(r2)
8112cb1c:	0084303a 	nor	r2,zero,r2
8112cb20:	1007883a 	mov	r3,r2
8112cb24:	e0bff117 	ldw	r2,-60(fp)
8112cb28:	1080040b 	ldhu	r2,16(r2)
8112cb2c:	1884703a 	and	r2,r3,r2
8112cb30:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
8112cb34:	e0bff117 	ldw	r2,-60(fp)
8112cb38:	1080040b 	ldhu	r2,16(r2)
8112cb3c:	10ffffcc 	andi	r3,r2,65535
8112cb40:	e0bff60b 	ldhu	r2,-40(fp)
8112cb44:	18802d1e 	bne	r3,r2,8112cbfc <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112cb48:	e0bff60b 	ldhu	r2,-40(fp)
8112cb4c:	100b883a 	mov	r5,r2
8112cb50:	e13ff117 	ldw	r4,-60(fp)
8112cb54:	112cfb40 	call	8112cfb4 <OS_FlagTaskRdy>
8112cb58:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112cb5c:	e0bff683 	ldbu	r2,-38(fp)
8112cb60:	10800058 	cmpnei	r2,r2,1
8112cb64:	1000251e 	bne	r2,zero,8112cbfc <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112cb68:	00800044 	movi	r2,1
8112cb6c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112cb70:	00002206 	br	8112cbfc <OSFlagPost+0x300>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
8112cb74:	e0bffc17 	ldw	r2,-16(fp)
8112cb78:	1080020b 	ldhu	r2,8(r2)
8112cb7c:	0084303a 	nor	r2,zero,r2
8112cb80:	1007883a 	mov	r3,r2
8112cb84:	e0bff117 	ldw	r2,-60(fp)
8112cb88:	1080040b 	ldhu	r2,16(r2)
8112cb8c:	1884703a 	and	r2,r3,r2
8112cb90:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
8112cb94:	e0bff60b 	ldhu	r2,-40(fp)
8112cb98:	10001a26 	beq	r2,zero,8112cc04 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112cb9c:	e0bff60b 	ldhu	r2,-40(fp)
8112cba0:	100b883a 	mov	r5,r2
8112cba4:	e13ff117 	ldw	r4,-60(fp)
8112cba8:	112cfb40 	call	8112cfb4 <OS_FlagTaskRdy>
8112cbac:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112cbb0:	e0bff683 	ldbu	r2,-38(fp)
8112cbb4:	10800058 	cmpnei	r2,r2,1
8112cbb8:	1000121e 	bne	r2,zero,8112cc04 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112cbbc:	00800044 	movi	r2,1
8112cbc0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
8112cbc4:	00000f06 	br	8112cc04 <OSFlagPost+0x308>
8112cbc8:	e0bff317 	ldw	r2,-52(fp)
8112cbcc:	e0bff515 	stw	r2,-44(fp)
8112cbd0:	e0bff517 	ldw	r2,-44(fp)
8112cbd4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
8112cbd8:	e0bfff17 	ldw	r2,-4(fp)
8112cbdc:	00c01bc4 	movi	r3,111
8112cbe0:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
8112cbe4:	0005883a 	mov	r2,zero
8112cbe8:	00002606 	br	8112cc84 <OSFlagPost+0x388>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112cbec:	0001883a 	nop
8112cbf0:	00000506 	br	8112cc08 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112cbf4:	0001883a 	nop
8112cbf8:	00000306 	br	8112cc08 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112cbfc:	0001883a 	nop
8112cc00:	00000106 	br	8112cc08 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112cc04:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
8112cc08:	e0bff117 	ldw	r2,-60(fp)
8112cc0c:	10800017 	ldw	r2,0(r2)
8112cc10:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
8112cc14:	e0bff117 	ldw	r2,-60(fp)
8112cc18:	103f871e 	bne	r2,zero,8112ca38 <__reset+0xfb10ca38>
8112cc1c:	e0bff317 	ldw	r2,-52(fp)
8112cc20:	e0bff715 	stw	r2,-36(fp)
8112cc24:	e0bff717 	ldw	r2,-36(fp)
8112cc28:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
8112cc2c:	e0bff203 	ldbu	r2,-56(fp)
8112cc30:	10800058 	cmpnei	r2,r2,1
8112cc34:	1000011e 	bne	r2,zero,8112cc3c <OSFlagPost+0x340>
        OS_Sched();
8112cc38:	112b0c40 	call	8112b0c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cc3c:	0005303a 	rdctl	r2,status
8112cc40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cc44:	e0fffa17 	ldw	r3,-24(fp)
8112cc48:	00bfff84 	movi	r2,-2
8112cc4c:	1884703a 	and	r2,r3,r2
8112cc50:	1001703a 	wrctl	status,r2
  
  return context;
8112cc54:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
8112cc58:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
8112cc5c:	e0bffc17 	ldw	r2,-16(fp)
8112cc60:	1080020b 	ldhu	r2,8(r2)
8112cc64:	e0bff90d 	sth	r2,-28(fp)
8112cc68:	e0bff317 	ldw	r2,-52(fp)
8112cc6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cc70:	e0bff817 	ldw	r2,-32(fp)
8112cc74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
8112cc78:	e0bfff17 	ldw	r2,-4(fp)
8112cc7c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
8112cc80:	e0bff90b 	ldhu	r2,-28(fp)
}
8112cc84:	e037883a 	mov	sp,fp
8112cc88:	dfc00117 	ldw	ra,4(sp)
8112cc8c:	df000017 	ldw	fp,0(sp)
8112cc90:	dec00204 	addi	sp,sp,8
8112cc94:	f800283a 	ret

8112cc98 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
8112cc98:	defff904 	addi	sp,sp,-28
8112cc9c:	de00012e 	bgeu	sp,et,8112cca4 <OSFlagQuery+0xc>
8112cca0:	003b68fa 	trap	3
8112cca4:	df000615 	stw	fp,24(sp)
8112cca8:	df000604 	addi	fp,sp,24
8112ccac:	e13ffe15 	stw	r4,-8(fp)
8112ccb0:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
8112ccb4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
8112ccb8:	e0bfff17 	ldw	r2,-4(fp)
8112ccbc:	1000021e 	bne	r2,zero,8112ccc8 <OSFlagQuery+0x30>
        return ((OS_FLAGS)0);
8112ccc0:	0005883a 	mov	r2,zero
8112ccc4:	00002306 	br	8112cd54 <OSFlagQuery+0xbc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
8112ccc8:	e0bffe17 	ldw	r2,-8(fp)
8112cccc:	1000051e 	bne	r2,zero,8112cce4 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
8112ccd0:	e0bfff17 	ldw	r2,-4(fp)
8112ccd4:	00c01b84 	movi	r3,110
8112ccd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112ccdc:	0005883a 	mov	r2,zero
8112cce0:	00001c06 	br	8112cd54 <OSFlagQuery+0xbc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
8112cce4:	e0bffe17 	ldw	r2,-8(fp)
8112cce8:	10800003 	ldbu	r2,0(r2)
8112ccec:	10803fcc 	andi	r2,r2,255
8112ccf0:	10800160 	cmpeqi	r2,r2,5
8112ccf4:	1000051e 	bne	r2,zero,8112cd0c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112ccf8:	e0bfff17 	ldw	r2,-4(fp)
8112ccfc:	00c00044 	movi	r3,1
8112cd00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112cd04:	0005883a 	mov	r2,zero
8112cd08:	00001206 	br	8112cd54 <OSFlagQuery+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cd0c:	0005303a 	rdctl	r2,status
8112cd10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cd14:	e0fffc17 	ldw	r3,-16(fp)
8112cd18:	00bfff84 	movi	r2,-2
8112cd1c:	1884703a 	and	r2,r3,r2
8112cd20:	1001703a 	wrctl	status,r2
  
  return context;
8112cd24:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112cd28:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
8112cd2c:	e0bffe17 	ldw	r2,-8(fp)
8112cd30:	1080020b 	ldhu	r2,8(r2)
8112cd34:	e0bffb0d 	sth	r2,-20(fp)
8112cd38:	e0bffa17 	ldw	r2,-24(fp)
8112cd3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cd40:	e0bffd17 	ldw	r2,-12(fp)
8112cd44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112cd48:	e0bfff17 	ldw	r2,-4(fp)
8112cd4c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
8112cd50:	e0bffb0b 	ldhu	r2,-20(fp)
}
8112cd54:	e037883a 	mov	sp,fp
8112cd58:	df000017 	ldw	fp,0(sp)
8112cd5c:	dec00104 	addi	sp,sp,4
8112cd60:	f800283a 	ret

8112cd64 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
8112cd64:	defff804 	addi	sp,sp,-32
8112cd68:	de00012e 	bgeu	sp,et,8112cd70 <OS_FlagBlock+0xc>
8112cd6c:	003b68fa 	trap	3
8112cd70:	df000715 	stw	fp,28(sp)
8112cd74:	df000704 	addi	fp,sp,28
8112cd78:	e13ffb15 	stw	r4,-20(fp)
8112cd7c:	e17ffc15 	stw	r5,-16(fp)
8112cd80:	3009883a 	mov	r4,r6
8112cd84:	3807883a 	mov	r3,r7
8112cd88:	e0800117 	ldw	r2,4(fp)
8112cd8c:	e13ffd0d 	sth	r4,-12(fp)
8112cd90:	e0fffe05 	stb	r3,-8(fp)
8112cd94:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
8112cd98:	d0a08b17 	ldw	r2,-32212(gp)
8112cd9c:	d0e08b17 	ldw	r3,-32212(gp)
8112cda0:	18c00c03 	ldbu	r3,48(r3)
8112cda4:	18c00814 	ori	r3,r3,32
8112cda8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
8112cdac:	d0a08b17 	ldw	r2,-32212(gp)
8112cdb0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
8112cdb4:	d0a08b17 	ldw	r2,-32212(gp)
8112cdb8:	e0ffff0b 	ldhu	r3,-4(fp)
8112cdbc:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
8112cdc0:	d0a08b17 	ldw	r2,-32212(gp)
8112cdc4:	e0fffc17 	ldw	r3,-16(fp)
8112cdc8:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
8112cdcc:	e0bffc17 	ldw	r2,-16(fp)
8112cdd0:	e0fffd0b 	ldhu	r3,-12(fp)
8112cdd4:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
8112cdd8:	e0bffc17 	ldw	r2,-16(fp)
8112cddc:	e0fffe03 	ldbu	r3,-8(fp)
8112cde0:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
8112cde4:	d0e08b17 	ldw	r3,-32212(gp)
8112cde8:	e0bffc17 	ldw	r2,-16(fp)
8112cdec:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
8112cdf0:	e0bffb17 	ldw	r2,-20(fp)
8112cdf4:	10c00117 	ldw	r3,4(r2)
8112cdf8:	e0bffc17 	ldw	r2,-16(fp)
8112cdfc:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
8112ce00:	e0bffc17 	ldw	r2,-16(fp)
8112ce04:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
8112ce08:	e0bffc17 	ldw	r2,-16(fp)
8112ce0c:	e0fffb17 	ldw	r3,-20(fp)
8112ce10:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112ce14:	e0bffb17 	ldw	r2,-20(fp)
8112ce18:	10800117 	ldw	r2,4(r2)
8112ce1c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
8112ce20:	e0bff917 	ldw	r2,-28(fp)
8112ce24:	10000326 	beq	r2,zero,8112ce34 <OS_FlagBlock+0xd0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
8112ce28:	e0bff917 	ldw	r2,-28(fp)
8112ce2c:	e0fffc17 	ldw	r3,-16(fp)
8112ce30:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
8112ce34:	e0bffb17 	ldw	r2,-20(fp)
8112ce38:	e0fffc17 	ldw	r3,-16(fp)
8112ce3c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
8112ce40:	d0a08b17 	ldw	r2,-32212(gp)
8112ce44:	10800d03 	ldbu	r2,52(r2)
8112ce48:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112ce4c:	e0fffa03 	ldbu	r3,-24(fp)
8112ce50:	e13ffa03 	ldbu	r4,-24(fp)
8112ce54:	d0a08744 	addi	r2,gp,-32227
8112ce58:	2085883a 	add	r2,r4,r2
8112ce5c:	10800003 	ldbu	r2,0(r2)
8112ce60:	1009883a 	mov	r4,r2
8112ce64:	d0a08b17 	ldw	r2,-32212(gp)
8112ce68:	10800d43 	ldbu	r2,53(r2)
8112ce6c:	0084303a 	nor	r2,zero,r2
8112ce70:	2084703a 	and	r2,r4,r2
8112ce74:	1009883a 	mov	r4,r2
8112ce78:	d0a08744 	addi	r2,gp,-32227
8112ce7c:	1885883a 	add	r2,r3,r2
8112ce80:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
8112ce84:	e0fffa03 	ldbu	r3,-24(fp)
8112ce88:	d0a08744 	addi	r2,gp,-32227
8112ce8c:	1885883a 	add	r2,r3,r2
8112ce90:	10800003 	ldbu	r2,0(r2)
8112ce94:	10803fcc 	andi	r2,r2,255
8112ce98:	1000071e 	bne	r2,zero,8112ceb8 <OS_FlagBlock+0x154>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112ce9c:	d0a08b17 	ldw	r2,-32212(gp)
8112cea0:	10800d83 	ldbu	r2,54(r2)
8112cea4:	0084303a 	nor	r2,zero,r2
8112cea8:	1007883a 	mov	r3,r2
8112ceac:	d0a08703 	ldbu	r2,-32228(gp)
8112ceb0:	1884703a 	and	r2,r3,r2
8112ceb4:	d0a08705 	stb	r2,-32228(gp)
    }
}
8112ceb8:	0001883a 	nop
8112cebc:	e037883a 	mov	sp,fp
8112cec0:	df000017 	ldw	fp,0(sp)
8112cec4:	dec00104 	addi	sp,sp,4
8112cec8:	f800283a 	ret

8112cecc <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
8112cecc:	defffb04 	addi	sp,sp,-20
8112ced0:	de00012e 	bgeu	sp,et,8112ced8 <OS_FlagInit+0xc>
8112ced4:	003b68fa 	trap	3
8112ced8:	dfc00415 	stw	ra,16(sp)
8112cedc:	df000315 	stw	fp,12(sp)
8112cee0:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
8112cee4:	0140dc04 	movi	r5,880
8112cee8:	01204574 	movhi	r4,33045
8112ceec:	212f1104 	addi	r4,r4,-17340
8112cef0:	112aff80 	call	8112aff8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
8112cef4:	00a04574 	movhi	r2,33045
8112cef8:	10af1104 	addi	r2,r2,-17340
8112cefc:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
8112cf00:	00a04574 	movhi	r2,33045
8112cf04:	10af1c04 	addi	r2,r2,-17296
8112cf08:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112cf0c:	e03ffd0d 	sth	zero,-12(fp)
8112cf10:	00001306 	br	8112cf60 <OS_FlagInit+0x94>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112cf14:	e0bffe17 	ldw	r2,-8(fp)
8112cf18:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
8112cf1c:	e0bffe17 	ldw	r2,-8(fp)
8112cf20:	e0ffff17 	ldw	r3,-4(fp)
8112cf24:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
8112cf28:	e0bffe17 	ldw	r2,-8(fp)
8112cf2c:	00c00fc4 	movi	r3,63
8112cf30:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112cf34:	e0bffe17 	ldw	r2,-8(fp)
8112cf38:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
8112cf3c:	e0bffe17 	ldw	r2,-8(fp)
8112cf40:	10800b04 	addi	r2,r2,44
8112cf44:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
8112cf48:	e0bfff17 	ldw	r2,-4(fp)
8112cf4c:	10800b04 	addi	r2,r2,44
8112cf50:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112cf54:	e0bffd0b 	ldhu	r2,-12(fp)
8112cf58:	10800044 	addi	r2,r2,1
8112cf5c:	e0bffd0d 	sth	r2,-12(fp)
8112cf60:	e0bffd0b 	ldhu	r2,-12(fp)
8112cf64:	108004f0 	cmpltui	r2,r2,19
8112cf68:	103fea1e 	bne	r2,zero,8112cf14 <__reset+0xfb10cf14>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112cf6c:	e0bffe17 	ldw	r2,-8(fp)
8112cf70:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
8112cf74:	e0bffe17 	ldw	r2,-8(fp)
8112cf78:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
8112cf7c:	e0bffe17 	ldw	r2,-8(fp)
8112cf80:	00c00fc4 	movi	r3,63
8112cf84:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112cf88:	e0bffe17 	ldw	r2,-8(fp)
8112cf8c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
8112cf90:	00a04574 	movhi	r2,33045
8112cf94:	10af1104 	addi	r2,r2,-17340
8112cf98:	d0a08f15 	stw	r2,-32196(gp)
#endif
}
8112cf9c:	0001883a 	nop
8112cfa0:	e037883a 	mov	sp,fp
8112cfa4:	dfc00117 	ldw	ra,4(sp)
8112cfa8:	df000017 	ldw	fp,0(sp)
8112cfac:	dec00204 	addi	sp,sp,8
8112cfb0:	f800283a 	ret

8112cfb4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
8112cfb4:	defffa04 	addi	sp,sp,-24
8112cfb8:	de00012e 	bgeu	sp,et,8112cfc0 <OS_FlagTaskRdy+0xc>
8112cfbc:	003b68fa 	trap	3
8112cfc0:	dfc00515 	stw	ra,20(sp)
8112cfc4:	df000415 	stw	fp,16(sp)
8112cfc8:	df000404 	addi	fp,sp,16
8112cfcc:	e13ffe15 	stw	r4,-8(fp)
8112cfd0:	2805883a 	mov	r2,r5
8112cfd4:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
8112cfd8:	e0bffe17 	ldw	r2,-8(fp)
8112cfdc:	10800217 	ldw	r2,8(r2)
8112cfe0:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
8112cfe4:	e0bffd17 	ldw	r2,-12(fp)
8112cfe8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
8112cfec:	e0bffd17 	ldw	r2,-12(fp)
8112cff0:	e0ffff0b 	ldhu	r3,-4(fp)
8112cff4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
8112cff8:	e0bffd17 	ldw	r2,-12(fp)
8112cffc:	10c00c03 	ldbu	r3,48(r2)
8112d000:	00bff7c4 	movi	r2,-33
8112d004:	1884703a 	and	r2,r3,r2
8112d008:	1007883a 	mov	r3,r2
8112d00c:	e0bffd17 	ldw	r2,-12(fp)
8112d010:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
8112d014:	e0bffd17 	ldw	r2,-12(fp)
8112d018:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
8112d01c:	e0bffd17 	ldw	r2,-12(fp)
8112d020:	10800c03 	ldbu	r2,48(r2)
8112d024:	10803fcc 	andi	r2,r2,255
8112d028:	1000181e 	bne	r2,zero,8112d08c <OS_FlagTaskRdy+0xd8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
8112d02c:	e0bffd17 	ldw	r2,-12(fp)
8112d030:	10c00d83 	ldbu	r3,54(r2)
8112d034:	d0a08703 	ldbu	r2,-32228(gp)
8112d038:	1884b03a 	or	r2,r3,r2
8112d03c:	d0a08705 	stb	r2,-32228(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112d040:	e0bffd17 	ldw	r2,-12(fp)
8112d044:	10800d03 	ldbu	r2,52(r2)
8112d048:	10c03fcc 	andi	r3,r2,255
8112d04c:	e0bffd17 	ldw	r2,-12(fp)
8112d050:	10800d03 	ldbu	r2,52(r2)
8112d054:	11003fcc 	andi	r4,r2,255
8112d058:	d0a08744 	addi	r2,gp,-32227
8112d05c:	2085883a 	add	r2,r4,r2
8112d060:	11000003 	ldbu	r4,0(r2)
8112d064:	e0bffd17 	ldw	r2,-12(fp)
8112d068:	10800d43 	ldbu	r2,53(r2)
8112d06c:	2084b03a 	or	r2,r4,r2
8112d070:	1009883a 	mov	r4,r2
8112d074:	d0a08744 	addi	r2,gp,-32227
8112d078:	1885883a 	add	r2,r3,r2
8112d07c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
8112d080:	00800044 	movi	r2,1
8112d084:	e0bffc05 	stb	r2,-16(fp)
8112d088:	00000106 	br	8112d090 <OS_FlagTaskRdy+0xdc>
    } else {
        sched                   = OS_FALSE;
8112d08c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
8112d090:	e13ffe17 	ldw	r4,-8(fp)
8112d094:	112d0b00 	call	8112d0b0 <OS_FlagUnlink>
    return (sched);
8112d098:	e0bffc03 	ldbu	r2,-16(fp)
}
8112d09c:	e037883a 	mov	sp,fp
8112d0a0:	dfc00117 	ldw	ra,4(sp)
8112d0a4:	df000017 	ldw	fp,0(sp)
8112d0a8:	dec00204 	addi	sp,sp,8
8112d0ac:	f800283a 	ret

8112d0b0 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
8112d0b0:	defffa04 	addi	sp,sp,-24
8112d0b4:	de00012e 	bgeu	sp,et,8112d0bc <OS_FlagUnlink+0xc>
8112d0b8:	003b68fa 	trap	3
8112d0bc:	df000515 	stw	fp,20(sp)
8112d0c0:	df000504 	addi	fp,sp,20
8112d0c4:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
8112d0c8:	e0bfff17 	ldw	r2,-4(fp)
8112d0cc:	10800117 	ldw	r2,4(r2)
8112d0d0:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112d0d4:	e0bfff17 	ldw	r2,-4(fp)
8112d0d8:	10800017 	ldw	r2,0(r2)
8112d0dc:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
8112d0e0:	e0bffb17 	ldw	r2,-20(fp)
8112d0e4:	10000b1e 	bne	r2,zero,8112d114 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
8112d0e8:	e0bfff17 	ldw	r2,-4(fp)
8112d0ec:	10800317 	ldw	r2,12(r2)
8112d0f0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
8112d0f4:	e0bffd17 	ldw	r2,-12(fp)
8112d0f8:	e0fffc17 	ldw	r3,-16(fp)
8112d0fc:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
8112d100:	e0bffc17 	ldw	r2,-16(fp)
8112d104:	10000b26 	beq	r2,zero,8112d134 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
8112d108:	e0bffc17 	ldw	r2,-16(fp)
8112d10c:	10000115 	stw	zero,4(r2)
8112d110:	00000806 	br	8112d134 <OS_FlagUnlink+0x84>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
8112d114:	e0bffb17 	ldw	r2,-20(fp)
8112d118:	e0fffc17 	ldw	r3,-16(fp)
8112d11c:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
8112d120:	e0bffc17 	ldw	r2,-16(fp)
8112d124:	10000326 	beq	r2,zero,8112d134 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
8112d128:	e0bffc17 	ldw	r2,-16(fp)
8112d12c:	e0fffb17 	ldw	r3,-20(fp)
8112d130:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
8112d134:	e0bfff17 	ldw	r2,-4(fp)
8112d138:	10800217 	ldw	r2,8(r2)
8112d13c:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
8112d140:	e0bffe17 	ldw	r2,-8(fp)
8112d144:	10000a15 	stw	zero,40(r2)
#endif
}
8112d148:	0001883a 	nop
8112d14c:	e037883a 	mov	sp,fp
8112d150:	df000017 	ldw	fp,0(sp)
8112d154:	dec00104 	addi	sp,sp,4
8112d158:	f800283a 	ret

8112d15c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
8112d15c:	defff404 	addi	sp,sp,-48
8112d160:	de00012e 	bgeu	sp,et,8112d168 <OSMemCreate+0xc>
8112d164:	003b68fa 	trap	3
8112d168:	df000b15 	stw	fp,44(sp)
8112d16c:	df000b04 	addi	fp,sp,44
8112d170:	e13ffc15 	stw	r4,-16(fp)
8112d174:	e17ffd15 	stw	r5,-12(fp)
8112d178:	e1bffe15 	stw	r6,-8(fp)
8112d17c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d180:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112d184:	e0bfff17 	ldw	r2,-4(fp)
8112d188:	1000021e 	bne	r2,zero,8112d194 <OSMemCreate+0x38>
        return ((OS_MEM *)0);
8112d18c:	0005883a 	mov	r2,zero
8112d190:	00006506 	br	8112d328 <OSMemCreate+0x1cc>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
8112d194:	e0bffc17 	ldw	r2,-16(fp)
8112d198:	1000051e 	bne	r2,zero,8112d1b0 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112d19c:	e0bfff17 	ldw	r2,-4(fp)
8112d1a0:	00c01884 	movi	r3,98
8112d1a4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d1a8:	0005883a 	mov	r2,zero
8112d1ac:	00005e06 	br	8112d328 <OSMemCreate+0x1cc>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
8112d1b0:	e0bffc17 	ldw	r2,-16(fp)
8112d1b4:	108000cc 	andi	r2,r2,3
8112d1b8:	10000526 	beq	r2,zero,8112d1d0 <OSMemCreate+0x74>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112d1bc:	e0bfff17 	ldw	r2,-4(fp)
8112d1c0:	00c01884 	movi	r3,98
8112d1c4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d1c8:	0005883a 	mov	r2,zero
8112d1cc:	00005606 	br	8112d328 <OSMemCreate+0x1cc>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
8112d1d0:	e0bffd17 	ldw	r2,-12(fp)
8112d1d4:	108000a8 	cmpgeui	r2,r2,2
8112d1d8:	1000051e 	bne	r2,zero,8112d1f0 <OSMemCreate+0x94>
        *perr = OS_ERR_MEM_INVALID_BLKS;
8112d1dc:	e0bfff17 	ldw	r2,-4(fp)
8112d1e0:	00c016c4 	movi	r3,91
8112d1e4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d1e8:	0005883a 	mov	r2,zero
8112d1ec:	00004e06 	br	8112d328 <OSMemCreate+0x1cc>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
8112d1f0:	e0bffe17 	ldw	r2,-8(fp)
8112d1f4:	10800128 	cmpgeui	r2,r2,4
8112d1f8:	1000051e 	bne	r2,zero,8112d210 <OSMemCreate+0xb4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
8112d1fc:	e0bfff17 	ldw	r2,-4(fp)
8112d200:	00c01704 	movi	r3,92
8112d204:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d208:	0005883a 	mov	r2,zero
8112d20c:	00004606 	br	8112d328 <OSMemCreate+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d210:	0005303a 	rdctl	r2,status
8112d214:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d218:	e0fffb17 	ldw	r3,-20(fp)
8112d21c:	00bfff84 	movi	r2,-2
8112d220:	1884703a 	and	r2,r3,r2
8112d224:	1001703a 	wrctl	status,r2
  
  return context;
8112d228:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d22c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
8112d230:	d0a08417 	ldw	r2,-32240(gp)
8112d234:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
8112d238:	d0a08417 	ldw	r2,-32240(gp)
8112d23c:	10000326 	beq	r2,zero,8112d24c <OSMemCreate+0xf0>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
8112d240:	d0a08417 	ldw	r2,-32240(gp)
8112d244:	10800117 	ldw	r2,4(r2)
8112d248:	d0a08415 	stw	r2,-32240(gp)
8112d24c:	e0bff817 	ldw	r2,-32(fp)
8112d250:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d254:	e0bff917 	ldw	r2,-28(fp)
8112d258:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
8112d25c:	e0bffa17 	ldw	r2,-24(fp)
8112d260:	1000051e 	bne	r2,zero,8112d278 <OSMemCreate+0x11c>
        *perr = OS_ERR_MEM_INVALID_PART;
8112d264:	e0bfff17 	ldw	r2,-4(fp)
8112d268:	00c01684 	movi	r3,90
8112d26c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112d270:	0005883a 	mov	r2,zero
8112d274:	00002c06 	br	8112d328 <OSMemCreate+0x1cc>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
8112d278:	e0bffc17 	ldw	r2,-16(fp)
8112d27c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
8112d280:	e0fffc17 	ldw	r3,-16(fp)
8112d284:	e0bffe17 	ldw	r2,-8(fp)
8112d288:	1885883a 	add	r2,r3,r2
8112d28c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
8112d290:	e03ff715 	stw	zero,-36(fp)
8112d294:	00000c06 	br	8112d2c8 <OSMemCreate+0x16c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
8112d298:	e0bff617 	ldw	r2,-40(fp)
8112d29c:	e0fff517 	ldw	r3,-44(fp)
8112d2a0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
8112d2a4:	e0bff517 	ldw	r2,-44(fp)
8112d2a8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
8112d2ac:	e0fff517 	ldw	r3,-44(fp)
8112d2b0:	e0bffe17 	ldw	r2,-8(fp)
8112d2b4:	1885883a 	add	r2,r3,r2
8112d2b8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
8112d2bc:	e0bff717 	ldw	r2,-36(fp)
8112d2c0:	10800044 	addi	r2,r2,1
8112d2c4:	e0bff715 	stw	r2,-36(fp)
8112d2c8:	e0bffd17 	ldw	r2,-12(fp)
8112d2cc:	10bfffc4 	addi	r2,r2,-1
8112d2d0:	e0fff717 	ldw	r3,-36(fp)
8112d2d4:	18bff036 	bltu	r3,r2,8112d298 <__reset+0xfb10d298>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
8112d2d8:	e0bff617 	ldw	r2,-40(fp)
8112d2dc:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
8112d2e0:	e0bffa17 	ldw	r2,-24(fp)
8112d2e4:	e0fffc17 	ldw	r3,-16(fp)
8112d2e8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
8112d2ec:	e0bffa17 	ldw	r2,-24(fp)
8112d2f0:	e0fffc17 	ldw	r3,-16(fp)
8112d2f4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
8112d2f8:	e0bffa17 	ldw	r2,-24(fp)
8112d2fc:	e0fffd17 	ldw	r3,-12(fp)
8112d300:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
8112d304:	e0bffa17 	ldw	r2,-24(fp)
8112d308:	e0fffd17 	ldw	r3,-12(fp)
8112d30c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
8112d310:	e0bffa17 	ldw	r2,-24(fp)
8112d314:	e0fffe17 	ldw	r3,-8(fp)
8112d318:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
8112d31c:	e0bfff17 	ldw	r2,-4(fp)
8112d320:	10000005 	stb	zero,0(r2)
    return (pmem);
8112d324:	e0bffa17 	ldw	r2,-24(fp)
}
8112d328:	e037883a 	mov	sp,fp
8112d32c:	df000017 	ldw	fp,0(sp)
8112d330:	dec00104 	addi	sp,sp,4
8112d334:	f800283a 	ret

8112d338 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
8112d338:	defff804 	addi	sp,sp,-32
8112d33c:	de00012e 	bgeu	sp,et,8112d344 <OSMemGet+0xc>
8112d340:	003b68fa 	trap	3
8112d344:	df000715 	stw	fp,28(sp)
8112d348:	df000704 	addi	fp,sp,28
8112d34c:	e13ffe15 	stw	r4,-8(fp)
8112d350:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d354:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112d358:	e0bfff17 	ldw	r2,-4(fp)
8112d35c:	1000021e 	bne	r2,zero,8112d368 <OSMemGet+0x30>
        return ((void *)0);
8112d360:	0005883a 	mov	r2,zero
8112d364:	00002e06 	br	8112d420 <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
8112d368:	e0bffe17 	ldw	r2,-8(fp)
8112d36c:	1000051e 	bne	r2,zero,8112d384 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112d370:	e0bfff17 	ldw	r2,-4(fp)
8112d374:	00c01804 	movi	r3,96
8112d378:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112d37c:	0005883a 	mov	r2,zero
8112d380:	00002706 	br	8112d420 <OSMemGet+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d384:	0005303a 	rdctl	r2,status
8112d388:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d38c:	e0fffd17 	ldw	r3,-12(fp)
8112d390:	00bfff84 	movi	r2,-2
8112d394:	1884703a 	and	r2,r3,r2
8112d398:	1001703a 	wrctl	status,r2
  
  return context;
8112d39c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d3a0:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
8112d3a4:	e0bffe17 	ldw	r2,-8(fp)
8112d3a8:	10800417 	ldw	r2,16(r2)
8112d3ac:	10001426 	beq	r2,zero,8112d400 <OSMemGet+0xc8>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
8112d3b0:	e0bffe17 	ldw	r2,-8(fp)
8112d3b4:	10800117 	ldw	r2,4(r2)
8112d3b8:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
8112d3bc:	e0bffb17 	ldw	r2,-20(fp)
8112d3c0:	10c00017 	ldw	r3,0(r2)
8112d3c4:	e0bffe17 	ldw	r2,-8(fp)
8112d3c8:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
8112d3cc:	e0bffe17 	ldw	r2,-8(fp)
8112d3d0:	10800417 	ldw	r2,16(r2)
8112d3d4:	10ffffc4 	addi	r3,r2,-1
8112d3d8:	e0bffe17 	ldw	r2,-8(fp)
8112d3dc:	10c00415 	stw	r3,16(r2)
8112d3e0:	e0bff917 	ldw	r2,-28(fp)
8112d3e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d3e8:	e0bffa17 	ldw	r2,-24(fp)
8112d3ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
8112d3f0:	e0bfff17 	ldw	r2,-4(fp)
8112d3f4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
8112d3f8:	e0bffb17 	ldw	r2,-20(fp)
8112d3fc:	00000806 	br	8112d420 <OSMemGet+0xe8>
8112d400:	e0bff917 	ldw	r2,-28(fp)
8112d404:	e0bffc15 	stw	r2,-16(fp)
8112d408:	e0bffc17 	ldw	r2,-16(fp)
8112d40c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
8112d410:	e0bfff17 	ldw	r2,-4(fp)
8112d414:	00c01744 	movi	r3,93
8112d418:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
8112d41c:	0005883a 	mov	r2,zero
}
8112d420:	e037883a 	mov	sp,fp
8112d424:	df000017 	ldw	fp,0(sp)
8112d428:	dec00104 	addi	sp,sp,4
8112d42c:	f800283a 	ret

8112d430 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112d430:	defff704 	addi	sp,sp,-36
8112d434:	de00012e 	bgeu	sp,et,8112d43c <OSMemNameGet+0xc>
8112d438:	003b68fa 	trap	3
8112d43c:	dfc00815 	stw	ra,32(sp)
8112d440:	df000715 	stw	fp,28(sp)
8112d444:	df000704 	addi	fp,sp,28
8112d448:	e13ffd15 	stw	r4,-12(fp)
8112d44c:	e17ffe15 	stw	r5,-8(fp)
8112d450:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d454:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112d458:	e0bfff17 	ldw	r2,-4(fp)
8112d45c:	1000021e 	bne	r2,zero,8112d468 <OSMemNameGet+0x38>
        return (0);
8112d460:	0005883a 	mov	r2,zero
8112d464:	00002b06 	br	8112d514 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112d468:	e0bffd17 	ldw	r2,-12(fp)
8112d46c:	1000051e 	bne	r2,zero,8112d484 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112d470:	e0bfff17 	ldw	r2,-4(fp)
8112d474:	00c01804 	movi	r3,96
8112d478:	10c00005 	stb	r3,0(r2)
        return (0);
8112d47c:	0005883a 	mov	r2,zero
8112d480:	00002406 	br	8112d514 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112d484:	e0bffe17 	ldw	r2,-8(fp)
8112d488:	1000051e 	bne	r2,zero,8112d4a0 <OSMemNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112d48c:	e0bfff17 	ldw	r2,-4(fp)
8112d490:	00c00304 	movi	r3,12
8112d494:	10c00005 	stb	r3,0(r2)
        return (0);
8112d498:	0005883a 	mov	r2,zero
8112d49c:	00001d06 	br	8112d514 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112d4a0:	d0a08a03 	ldbu	r2,-32216(gp)
8112d4a4:	10803fcc 	andi	r2,r2,255
8112d4a8:	10000526 	beq	r2,zero,8112d4c0 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112d4ac:	e0bfff17 	ldw	r2,-4(fp)
8112d4b0:	00c00444 	movi	r3,17
8112d4b4:	10c00005 	stb	r3,0(r2)
        return (0);
8112d4b8:	0005883a 	mov	r2,zero
8112d4bc:	00001506 	br	8112d514 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d4c0:	0005303a 	rdctl	r2,status
8112d4c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d4c8:	e0fffb17 	ldw	r3,-20(fp)
8112d4cc:	00bfff84 	movi	r2,-2
8112d4d0:	1884703a 	and	r2,r3,r2
8112d4d4:	1001703a 	wrctl	status,r2
  
  return context;
8112d4d8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8112d4dc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
8112d4e0:	e0bffd17 	ldw	r2,-12(fp)
8112d4e4:	10800504 	addi	r2,r2,20
8112d4e8:	100b883a 	mov	r5,r2
8112d4ec:	e13ffe17 	ldw	r4,-8(fp)
8112d4f0:	112b2180 	call	8112b218 <OS_StrCopy>
8112d4f4:	e0bffa05 	stb	r2,-24(fp)
8112d4f8:	e0bff917 	ldw	r2,-28(fp)
8112d4fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d500:	e0bffc17 	ldw	r2,-16(fp)
8112d504:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112d508:	e0bfff17 	ldw	r2,-4(fp)
8112d50c:	10000005 	stb	zero,0(r2)
    return (len);
8112d510:	e0bffa03 	ldbu	r2,-24(fp)
}
8112d514:	e037883a 	mov	sp,fp
8112d518:	dfc00117 	ldw	ra,4(sp)
8112d51c:	df000017 	ldw	fp,0(sp)
8112d520:	dec00204 	addi	sp,sp,8
8112d524:	f800283a 	ret

8112d528 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112d528:	defff604 	addi	sp,sp,-40
8112d52c:	de00012e 	bgeu	sp,et,8112d534 <OSMemNameSet+0xc>
8112d530:	003b68fa 	trap	3
8112d534:	dfc00915 	stw	ra,36(sp)
8112d538:	df000815 	stw	fp,32(sp)
8112d53c:	df000804 	addi	fp,sp,32
8112d540:	e13ffd15 	stw	r4,-12(fp)
8112d544:	e17ffe15 	stw	r5,-8(fp)
8112d548:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d54c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112d550:	e0bfff17 	ldw	r2,-4(fp)
8112d554:	10003526 	beq	r2,zero,8112d62c <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112d558:	e0bffd17 	ldw	r2,-12(fp)
8112d55c:	1000041e 	bne	r2,zero,8112d570 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112d560:	e0bfff17 	ldw	r2,-4(fp)
8112d564:	00c01804 	movi	r3,96
8112d568:	10c00005 	stb	r3,0(r2)
        return;
8112d56c:	00003006 	br	8112d630 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112d570:	e0bffe17 	ldw	r2,-8(fp)
8112d574:	1000041e 	bne	r2,zero,8112d588 <OSMemNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112d578:	e0bfff17 	ldw	r2,-4(fp)
8112d57c:	00c00304 	movi	r3,12
8112d580:	10c00005 	stb	r3,0(r2)
        return;
8112d584:	00002a06 	br	8112d630 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112d588:	d0a08a03 	ldbu	r2,-32216(gp)
8112d58c:	10803fcc 	andi	r2,r2,255
8112d590:	10000426 	beq	r2,zero,8112d5a4 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112d594:	e0bfff17 	ldw	r2,-4(fp)
8112d598:	00c00484 	movi	r3,18
8112d59c:	10c00005 	stb	r3,0(r2)
        return;
8112d5a0:	00002306 	br	8112d630 <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d5a4:	0005303a 	rdctl	r2,status
8112d5a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d5ac:	e0fffc17 	ldw	r3,-16(fp)
8112d5b0:	00bfff84 	movi	r2,-2
8112d5b4:	1884703a 	and	r2,r3,r2
8112d5b8:	1001703a 	wrctl	status,r2
  
  return context;
8112d5bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112d5c0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112d5c4:	e13ffe17 	ldw	r4,-8(fp)
8112d5c8:	112b2940 	call	8112b294 <OS_StrLen>
8112d5cc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
8112d5d0:	e0bffa03 	ldbu	r2,-24(fp)
8112d5d4:	10800830 	cmpltui	r2,r2,32
8112d5d8:	1000081e 	bne	r2,zero,8112d5fc <OSMemNameSet+0xd4>
8112d5dc:	e0bff817 	ldw	r2,-32(fp)
8112d5e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d5e4:	e0bff917 	ldw	r2,-28(fp)
8112d5e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
8112d5ec:	e0bfff17 	ldw	r2,-4(fp)
8112d5f0:	00c018c4 	movi	r3,99
8112d5f4:	10c00005 	stb	r3,0(r2)
        return;
8112d5f8:	00000d06 	br	8112d630 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
8112d5fc:	e0bffd17 	ldw	r2,-12(fp)
8112d600:	10800504 	addi	r2,r2,20
8112d604:	e17ffe17 	ldw	r5,-8(fp)
8112d608:	1009883a 	mov	r4,r2
8112d60c:	112b2180 	call	8112b218 <OS_StrCopy>
8112d610:	e0bff817 	ldw	r2,-32(fp)
8112d614:	e0bffb15 	stw	r2,-20(fp)
8112d618:	e0bffb17 	ldw	r2,-20(fp)
8112d61c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112d620:	e0bfff17 	ldw	r2,-4(fp)
8112d624:	10000005 	stb	zero,0(r2)
8112d628:	00000106 	br	8112d630 <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112d62c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112d630:	e037883a 	mov	sp,fp
8112d634:	dfc00117 	ldw	ra,4(sp)
8112d638:	df000017 	ldw	fp,0(sp)
8112d63c:	dec00204 	addi	sp,sp,8
8112d640:	f800283a 	ret

8112d644 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
8112d644:	defff904 	addi	sp,sp,-28
8112d648:	de00012e 	bgeu	sp,et,8112d650 <OSMemPut+0xc>
8112d64c:	003b68fa 	trap	3
8112d650:	df000615 	stw	fp,24(sp)
8112d654:	df000604 	addi	fp,sp,24
8112d658:	e13ffe15 	stw	r4,-8(fp)
8112d65c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d660:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112d664:	e0bffe17 	ldw	r2,-8(fp)
8112d668:	1000021e 	bne	r2,zero,8112d674 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112d66c:	00801804 	movi	r2,96
8112d670:	00002806 	br	8112d714 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
8112d674:	e0bfff17 	ldw	r2,-4(fp)
8112d678:	1000021e 	bne	r2,zero,8112d684 <OSMemPut+0x40>
        return (OS_ERR_MEM_INVALID_PBLK);
8112d67c:	008017c4 	movi	r2,95
8112d680:	00002406 	br	8112d714 <OSMemPut+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d684:	0005303a 	rdctl	r2,status
8112d688:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d68c:	e0fffd17 	ldw	r3,-12(fp)
8112d690:	00bfff84 	movi	r2,-2
8112d694:	1884703a 	and	r2,r3,r2
8112d698:	1001703a 	wrctl	status,r2
  
  return context;
8112d69c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d6a0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
8112d6a4:	e0bffe17 	ldw	r2,-8(fp)
8112d6a8:	10c00417 	ldw	r3,16(r2)
8112d6ac:	e0bffe17 	ldw	r2,-8(fp)
8112d6b0:	10800317 	ldw	r2,12(r2)
8112d6b4:	18800636 	bltu	r3,r2,8112d6d0 <OSMemPut+0x8c>
8112d6b8:	e0bffa17 	ldw	r2,-24(fp)
8112d6bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d6c0:	e0bffb17 	ldw	r2,-20(fp)
8112d6c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
8112d6c8:	00801784 	movi	r2,94
8112d6cc:	00001106 	br	8112d714 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
8112d6d0:	e0bffe17 	ldw	r2,-8(fp)
8112d6d4:	10c00117 	ldw	r3,4(r2)
8112d6d8:	e0bfff17 	ldw	r2,-4(fp)
8112d6dc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
8112d6e0:	e0bffe17 	ldw	r2,-8(fp)
8112d6e4:	e0ffff17 	ldw	r3,-4(fp)
8112d6e8:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8112d6ec:	e0bffe17 	ldw	r2,-8(fp)
8112d6f0:	10800417 	ldw	r2,16(r2)
8112d6f4:	10c00044 	addi	r3,r2,1
8112d6f8:	e0bffe17 	ldw	r2,-8(fp)
8112d6fc:	10c00415 	stw	r3,16(r2)
8112d700:	e0bffa17 	ldw	r2,-24(fp)
8112d704:	e0bffc15 	stw	r2,-16(fp)
8112d708:	e0bffc17 	ldw	r2,-16(fp)
8112d70c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
8112d710:	0005883a 	mov	r2,zero
}
8112d714:	e037883a 	mov	sp,fp
8112d718:	df000017 	ldw	fp,0(sp)
8112d71c:	dec00104 	addi	sp,sp,4
8112d720:	f800283a 	ret

8112d724 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
8112d724:	defffa04 	addi	sp,sp,-24
8112d728:	de00012e 	bgeu	sp,et,8112d730 <OSMemQuery+0xc>
8112d72c:	003b68fa 	trap	3
8112d730:	df000515 	stw	fp,20(sp)
8112d734:	df000504 	addi	fp,sp,20
8112d738:	e13ffe15 	stw	r4,-8(fp)
8112d73c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112d740:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112d744:	e0bffe17 	ldw	r2,-8(fp)
8112d748:	1000021e 	bne	r2,zero,8112d754 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112d74c:	00801804 	movi	r2,96
8112d750:	00002c06 	br	8112d804 <OSMemQuery+0xe0>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
8112d754:	e0bfff17 	ldw	r2,-4(fp)
8112d758:	1000021e 	bne	r2,zero,8112d764 <OSMemQuery+0x40>
        return (OS_ERR_MEM_INVALID_PDATA);
8112d75c:	00801844 	movi	r2,97
8112d760:	00002806 	br	8112d804 <OSMemQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d764:	0005303a 	rdctl	r2,status
8112d768:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d76c:	e0fffc17 	ldw	r3,-16(fp)
8112d770:	00bfff84 	movi	r2,-2
8112d774:	1884703a 	and	r2,r3,r2
8112d778:	1001703a 	wrctl	status,r2
  
  return context;
8112d77c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d780:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
8112d784:	e0bffe17 	ldw	r2,-8(fp)
8112d788:	10c00017 	ldw	r3,0(r2)
8112d78c:	e0bfff17 	ldw	r2,-4(fp)
8112d790:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
8112d794:	e0bffe17 	ldw	r2,-8(fp)
8112d798:	10c00117 	ldw	r3,4(r2)
8112d79c:	e0bfff17 	ldw	r2,-4(fp)
8112d7a0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
8112d7a4:	e0bffe17 	ldw	r2,-8(fp)
8112d7a8:	10c00217 	ldw	r3,8(r2)
8112d7ac:	e0bfff17 	ldw	r2,-4(fp)
8112d7b0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
8112d7b4:	e0bffe17 	ldw	r2,-8(fp)
8112d7b8:	10c00317 	ldw	r3,12(r2)
8112d7bc:	e0bfff17 	ldw	r2,-4(fp)
8112d7c0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
8112d7c4:	e0bffe17 	ldw	r2,-8(fp)
8112d7c8:	10c00417 	ldw	r3,16(r2)
8112d7cc:	e0bfff17 	ldw	r2,-4(fp)
8112d7d0:	10c00415 	stw	r3,16(r2)
8112d7d4:	e0bffb17 	ldw	r2,-20(fp)
8112d7d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d7dc:	e0bffd17 	ldw	r2,-12(fp)
8112d7e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
8112d7e4:	e0bfff17 	ldw	r2,-4(fp)
8112d7e8:	10c00317 	ldw	r3,12(r2)
8112d7ec:	e0bfff17 	ldw	r2,-4(fp)
8112d7f0:	10800417 	ldw	r2,16(r2)
8112d7f4:	1887c83a 	sub	r3,r3,r2
8112d7f8:	e0bfff17 	ldw	r2,-4(fp)
8112d7fc:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
8112d800:	0005883a 	mov	r2,zero
}
8112d804:	e037883a 	mov	sp,fp
8112d808:	df000017 	ldw	fp,0(sp)
8112d80c:	dec00104 	addi	sp,sp,4
8112d810:	f800283a 	ret

8112d814 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
8112d814:	defffc04 	addi	sp,sp,-16
8112d818:	de00012e 	bgeu	sp,et,8112d820 <OS_MemInit+0xc>
8112d81c:	003b68fa 	trap	3
8112d820:	dfc00315 	stw	ra,12(sp)
8112d824:	df000215 	stw	fp,8(sp)
8112d828:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
8112d82c:	01430c04 	movi	r5,3120
8112d830:	01204574 	movhi	r4,33045
8112d834:	21305504 	addi	r4,r4,-16044
8112d838:	112aff80 	call	8112aff8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
8112d83c:	00a04574 	movhi	r2,33045
8112d840:	10b05504 	addi	r2,r2,-16044
8112d844:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112d848:	e03fff0d 	sth	zero,-4(fp)
8112d84c:	00001306 	br	8112d89c <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8112d850:	e0bfff0b 	ldhu	r2,-4(fp)
8112d854:	10800044 	addi	r2,r2,1
8112d858:	10c00d24 	muli	r3,r2,52
8112d85c:	00a04574 	movhi	r2,33045
8112d860:	10b05504 	addi	r2,r2,-16044
8112d864:	1887883a 	add	r3,r3,r2
8112d868:	e0bffe17 	ldw	r2,-8(fp)
8112d86c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8112d870:	e0bffe17 	ldw	r2,-8(fp)
8112d874:	00c00fc4 	movi	r3,63
8112d878:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8112d87c:	e0bffe17 	ldw	r2,-8(fp)
8112d880:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
8112d884:	e0bffe17 	ldw	r2,-8(fp)
8112d888:	10800d04 	addi	r2,r2,52
8112d88c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112d890:	e0bfff0b 	ldhu	r2,-4(fp)
8112d894:	10800044 	addi	r2,r2,1
8112d898:	e0bfff0d 	sth	r2,-4(fp)
8112d89c:	e0bfff0b 	ldhu	r2,-4(fp)
8112d8a0:	10800ef0 	cmpltui	r2,r2,59
8112d8a4:	103fea1e 	bne	r2,zero,8112d850 <__reset+0xfb10d850>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
8112d8a8:	e0bffe17 	ldw	r2,-8(fp)
8112d8ac:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
8112d8b0:	e0bffe17 	ldw	r2,-8(fp)
8112d8b4:	00c00fc4 	movi	r3,63
8112d8b8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
8112d8bc:	e0bffe17 	ldw	r2,-8(fp)
8112d8c0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
8112d8c4:	00a04574 	movhi	r2,33045
8112d8c8:	10b05504 	addi	r2,r2,-16044
8112d8cc:	d0a08415 	stw	r2,-32240(gp)
#endif
}
8112d8d0:	0001883a 	nop
8112d8d4:	e037883a 	mov	sp,fp
8112d8d8:	dfc00117 	ldw	ra,4(sp)
8112d8dc:	df000017 	ldw	fp,0(sp)
8112d8e0:	dec00204 	addi	sp,sp,8
8112d8e4:	f800283a 	ret

8112d8e8 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
8112d8e8:	defff704 	addi	sp,sp,-36
8112d8ec:	de00012e 	bgeu	sp,et,8112d8f4 <OSMutexAccept+0xc>
8112d8f0:	003b68fa 	trap	3
8112d8f4:	df000815 	stw	fp,32(sp)
8112d8f8:	df000804 	addi	fp,sp,32
8112d8fc:	e13ffe15 	stw	r4,-8(fp)
8112d900:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112d904:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
8112d908:	e0bfff17 	ldw	r2,-4(fp)
8112d90c:	1000021e 	bne	r2,zero,8112d918 <OSMutexAccept+0x30>
        return (OS_FALSE);
8112d910:	0005883a 	mov	r2,zero
8112d914:	00005b06 	br	8112da84 <OSMutexAccept+0x19c>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112d918:	e0bffe17 	ldw	r2,-8(fp)
8112d91c:	1000051e 	bne	r2,zero,8112d934 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112d920:	e0bfff17 	ldw	r2,-4(fp)
8112d924:	00c00104 	movi	r3,4
8112d928:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d92c:	0005883a 	mov	r2,zero
8112d930:	00005406 	br	8112da84 <OSMutexAccept+0x19c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
8112d934:	e0bffe17 	ldw	r2,-8(fp)
8112d938:	10800003 	ldbu	r2,0(r2)
8112d93c:	10803fcc 	andi	r2,r2,255
8112d940:	10800120 	cmpeqi	r2,r2,4
8112d944:	1000051e 	bne	r2,zero,8112d95c <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112d948:	e0bfff17 	ldw	r2,-4(fp)
8112d94c:	00c00044 	movi	r3,1
8112d950:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d954:	0005883a 	mov	r2,zero
8112d958:	00004a06 	br	8112da84 <OSMutexAccept+0x19c>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
8112d95c:	d0a08a03 	ldbu	r2,-32216(gp)
8112d960:	10803fcc 	andi	r2,r2,255
8112d964:	10000526 	beq	r2,zero,8112d97c <OSMutexAccept+0x94>
        *perr = OS_ERR_PEND_ISR;
8112d968:	e0bfff17 	ldw	r2,-4(fp)
8112d96c:	00c00084 	movi	r3,2
8112d970:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d974:	0005883a 	mov	r2,zero
8112d978:	00004206 	br	8112da84 <OSMutexAccept+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d97c:	0005303a 	rdctl	r2,status
8112d980:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d984:	e0fffd17 	ldw	r3,-12(fp)
8112d988:	00bfff84 	movi	r2,-2
8112d98c:	1884703a 	and	r2,r3,r2
8112d990:	1001703a 	wrctl	status,r2
  
  return context;
8112d994:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
8112d998:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
8112d99c:	e0bffe17 	ldw	r2,-8(fp)
8112d9a0:	1080020b 	ldhu	r2,8(r2)
8112d9a4:	10bfffcc 	andi	r2,r2,65535
8112d9a8:	1004d23a 	srli	r2,r2,8
8112d9ac:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112d9b0:	e0bffe17 	ldw	r2,-8(fp)
8112d9b4:	1080020b 	ldhu	r2,8(r2)
8112d9b8:	10bfffcc 	andi	r2,r2,65535
8112d9bc:	10803fcc 	andi	r2,r2,255
8112d9c0:	10803fd8 	cmpnei	r2,r2,255
8112d9c4:	1000281e 	bne	r2,zero,8112da68 <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
8112d9c8:	e0bffe17 	ldw	r2,-8(fp)
8112d9cc:	10c0020b 	ldhu	r3,8(r2)
8112d9d0:	00bfc004 	movi	r2,-256
8112d9d4:	1884703a 	and	r2,r3,r2
8112d9d8:	1007883a 	mov	r3,r2
8112d9dc:	e0bffe17 	ldw	r2,-8(fp)
8112d9e0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
8112d9e4:	e0bffe17 	ldw	r2,-8(fp)
8112d9e8:	10c0020b 	ldhu	r3,8(r2)
8112d9ec:	d0a08b17 	ldw	r2,-32212(gp)
8112d9f0:	10800c83 	ldbu	r2,50(r2)
8112d9f4:	10803fcc 	andi	r2,r2,255
8112d9f8:	1884b03a 	or	r2,r3,r2
8112d9fc:	1007883a 	mov	r3,r2
8112da00:	e0bffe17 	ldw	r2,-8(fp)
8112da04:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
8112da08:	d0e08b17 	ldw	r3,-32212(gp)
8112da0c:	e0bffe17 	ldw	r2,-8(fp)
8112da10:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
8112da14:	d0a08b17 	ldw	r2,-32212(gp)
8112da18:	10800c83 	ldbu	r2,50(r2)
8112da1c:	10803fcc 	andi	r2,r2,255
8112da20:	e0fffa03 	ldbu	r3,-24(fp)
8112da24:	18800836 	bltu	r3,r2,8112da48 <OSMutexAccept+0x160>
8112da28:	e0bff817 	ldw	r2,-32(fp)
8112da2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112da30:	e0bff917 	ldw	r2,-28(fp)
8112da34:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
8112da38:	e0bfff17 	ldw	r2,-4(fp)
8112da3c:	00c01e04 	movi	r3,120
8112da40:	10c00005 	stb	r3,0(r2)
8112da44:	00000606 	br	8112da60 <OSMutexAccept+0x178>
8112da48:	e0bff817 	ldw	r2,-32(fp)
8112da4c:	e0bffb15 	stw	r2,-20(fp)
8112da50:	e0bffb17 	ldw	r2,-20(fp)
8112da54:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112da58:	e0bfff17 	ldw	r2,-4(fp)
8112da5c:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
8112da60:	00800044 	movi	r2,1
8112da64:	00000706 	br	8112da84 <OSMutexAccept+0x19c>
8112da68:	e0bff817 	ldw	r2,-32(fp)
8112da6c:	e0bffc15 	stw	r2,-16(fp)
8112da70:	e0bffc17 	ldw	r2,-16(fp)
8112da74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112da78:	e0bfff17 	ldw	r2,-4(fp)
8112da7c:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
8112da80:	0005883a 	mov	r2,zero
}
8112da84:	e037883a 	mov	sp,fp
8112da88:	df000017 	ldw	fp,0(sp)
8112da8c:	dec00104 	addi	sp,sp,4
8112da90:	f800283a 	ret

8112da94 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
8112da94:	defff604 	addi	sp,sp,-40
8112da98:	de00012e 	bgeu	sp,et,8112daa0 <OSMutexCreate+0xc>
8112da9c:	003b68fa 	trap	3
8112daa0:	dfc00915 	stw	ra,36(sp)
8112daa4:	df000815 	stw	fp,32(sp)
8112daa8:	df000804 	addi	fp,sp,32
8112daac:	2005883a 	mov	r2,r4
8112dab0:	e17fff15 	stw	r5,-4(fp)
8112dab4:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112dab8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112dabc:	e0bfff17 	ldw	r2,-4(fp)
8112dac0:	1000021e 	bne	r2,zero,8112dacc <OSMutexCreate+0x38>
        return ((OS_EVENT *)0);
8112dac4:	0005883a 	mov	r2,zero
8112dac8:	00006106 	br	8112dc50 <OSMutexCreate+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
8112dacc:	e0bffe03 	ldbu	r2,-8(fp)
8112dad0:	10800a30 	cmpltui	r2,r2,40
8112dad4:	1000051e 	bne	r2,zero,8112daec <OSMutexCreate+0x58>
        *perr = OS_ERR_PRIO_INVALID;
8112dad8:	e0bfff17 	ldw	r2,-4(fp)
8112dadc:	00c00a84 	movi	r3,42
8112dae0:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112dae4:	0005883a 	mov	r2,zero
8112dae8:	00005906 	br	8112dc50 <OSMutexCreate+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112daec:	d0a08a03 	ldbu	r2,-32216(gp)
8112daf0:	10803fcc 	andi	r2,r2,255
8112daf4:	10000526 	beq	r2,zero,8112db0c <OSMutexCreate+0x78>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
8112daf8:	e0bfff17 	ldw	r2,-4(fp)
8112dafc:	00c00404 	movi	r3,16
8112db00:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112db04:	0005883a 	mov	r2,zero
8112db08:	00005106 	br	8112dc50 <OSMutexCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112db0c:	0005303a 	rdctl	r2,status
8112db10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112db14:	e0fffd17 	ldw	r3,-12(fp)
8112db18:	00bfff84 	movi	r2,-2
8112db1c:	1884703a 	and	r2,r3,r2
8112db20:	1001703a 	wrctl	status,r2
  
  return context;
8112db24:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112db28:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
8112db2c:	e0fffe03 	ldbu	r3,-8(fp)
8112db30:	00a04574 	movhi	r2,33045
8112db34:	10807b04 	addi	r2,r2,492
8112db38:	18c7883a 	add	r3,r3,r3
8112db3c:	18c7883a 	add	r3,r3,r3
8112db40:	10c5883a 	add	r2,r2,r3
8112db44:	10800017 	ldw	r2,0(r2)
8112db48:	10000926 	beq	r2,zero,8112db70 <OSMutexCreate+0xdc>
8112db4c:	e0bff817 	ldw	r2,-32(fp)
8112db50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112db54:	e0bff917 	ldw	r2,-28(fp)
8112db58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
8112db5c:	e0bfff17 	ldw	r2,-4(fp)
8112db60:	00c00a04 	movi	r3,40
8112db64:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112db68:	0005883a 	mov	r2,zero
8112db6c:	00003806 	br	8112dc50 <OSMutexCreate+0x1bc>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
8112db70:	e0fffe03 	ldbu	r3,-8(fp)
8112db74:	00a04574 	movhi	r2,33045
8112db78:	10807b04 	addi	r2,r2,492
8112db7c:	18c7883a 	add	r3,r3,r3
8112db80:	18c7883a 	add	r3,r3,r3
8112db84:	10c5883a 	add	r2,r2,r3
8112db88:	00c00044 	movi	r3,1
8112db8c:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
8112db90:	d0a08917 	ldw	r2,-32220(gp)
8112db94:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
8112db98:	e0bffb17 	ldw	r2,-20(fp)
8112db9c:	1000101e 	bne	r2,zero,8112dbe0 <OSMutexCreate+0x14c>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
8112dba0:	e0fffe03 	ldbu	r3,-8(fp)
8112dba4:	00a04574 	movhi	r2,33045
8112dba8:	10807b04 	addi	r2,r2,492
8112dbac:	18c7883a 	add	r3,r3,r3
8112dbb0:	18c7883a 	add	r3,r3,r3
8112dbb4:	10c5883a 	add	r2,r2,r3
8112dbb8:	10000015 	stw	zero,0(r2)
8112dbbc:	e0bff817 	ldw	r2,-32(fp)
8112dbc0:	e0bffa15 	stw	r2,-24(fp)
8112dbc4:	e0bffa17 	ldw	r2,-24(fp)
8112dbc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
8112dbcc:	e0bfff17 	ldw	r2,-4(fp)
8112dbd0:	00c00104 	movi	r3,4
8112dbd4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112dbd8:	e0bffb17 	ldw	r2,-20(fp)
8112dbdc:	00001c06 	br	8112dc50 <OSMutexCreate+0x1bc>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
8112dbe0:	d0a08917 	ldw	r2,-32220(gp)
8112dbe4:	10800117 	ldw	r2,4(r2)
8112dbe8:	d0a08915 	stw	r2,-32220(gp)
8112dbec:	e0bff817 	ldw	r2,-32(fp)
8112dbf0:	e0bffc15 	stw	r2,-16(fp)
8112dbf4:	e0bffc17 	ldw	r2,-16(fp)
8112dbf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
8112dbfc:	e0bffb17 	ldw	r2,-20(fp)
8112dc00:	00c00104 	movi	r3,4
8112dc04:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
8112dc08:	e0bffe03 	ldbu	r2,-8(fp)
8112dc0c:	1004923a 	slli	r2,r2,8
8112dc10:	10803fd4 	ori	r2,r2,255
8112dc14:	1007883a 	mov	r3,r2
8112dc18:	e0bffb17 	ldw	r2,-20(fp)
8112dc1c:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
8112dc20:	e0bffb17 	ldw	r2,-20(fp)
8112dc24:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
8112dc28:	e0bffb17 	ldw	r2,-20(fp)
8112dc2c:	00c00fc4 	movi	r3,63
8112dc30:	10c00445 	stb	r3,17(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
8112dc34:	e0bffb17 	ldw	r2,-20(fp)
8112dc38:	10000485 	stb	zero,18(r2)
#endif
    OS_EventWaitListInit(pevent);
8112dc3c:	e13ffb17 	ldw	r4,-20(fp)
8112dc40:	112abe00 	call	8112abe0 <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
8112dc44:	e0bfff17 	ldw	r2,-4(fp)
8112dc48:	10000005 	stb	zero,0(r2)
    return (pevent);
8112dc4c:	e0bffb17 	ldw	r2,-20(fp)
}
8112dc50:	e037883a 	mov	sp,fp
8112dc54:	dfc00117 	ldw	ra,4(sp)
8112dc58:	df000017 	ldw	fp,0(sp)
8112dc5c:	dec00204 	addi	sp,sp,8
8112dc60:	f800283a 	ret

8112dc64 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112dc64:	defff004 	addi	sp,sp,-64
8112dc68:	de00012e 	bgeu	sp,et,8112dc70 <OSMutexDel+0xc>
8112dc6c:	003b68fa 	trap	3
8112dc70:	dfc00f15 	stw	ra,60(sp)
8112dc74:	df000e15 	stw	fp,56(sp)
8112dc78:	df000e04 	addi	fp,sp,56
8112dc7c:	e13ffd15 	stw	r4,-12(fp)
8112dc80:	2805883a 	mov	r2,r5
8112dc84:	e1bfff15 	stw	r6,-4(fp)
8112dc88:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112dc8c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112dc90:	e0bfff17 	ldw	r2,-4(fp)
8112dc94:	1000021e 	bne	r2,zero,8112dca0 <OSMutexDel+0x3c>
        return (pevent);
8112dc98:	e0bffd17 	ldw	r2,-12(fp)
8112dc9c:	0000ad06 	br	8112df54 <OSMutexDel+0x2f0>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112dca0:	e0bffd17 	ldw	r2,-12(fp)
8112dca4:	1000051e 	bne	r2,zero,8112dcbc <OSMutexDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112dca8:	e0bfff17 	ldw	r2,-4(fp)
8112dcac:	00c00104 	movi	r3,4
8112dcb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112dcb4:	e0bffd17 	ldw	r2,-12(fp)
8112dcb8:	0000a606 	br	8112df54 <OSMutexDel+0x2f0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112dcbc:	e0bffd17 	ldw	r2,-12(fp)
8112dcc0:	10800003 	ldbu	r2,0(r2)
8112dcc4:	10803fcc 	andi	r2,r2,255
8112dcc8:	10800120 	cmpeqi	r2,r2,4
8112dccc:	1000051e 	bne	r2,zero,8112dce4 <OSMutexDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112dcd0:	e0bfff17 	ldw	r2,-4(fp)
8112dcd4:	00c00044 	movi	r3,1
8112dcd8:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112dcdc:	e0bffd17 	ldw	r2,-12(fp)
8112dce0:	00009c06 	br	8112df54 <OSMutexDel+0x2f0>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112dce4:	d0a08a03 	ldbu	r2,-32216(gp)
8112dce8:	10803fcc 	andi	r2,r2,255
8112dcec:	10000526 	beq	r2,zero,8112dd04 <OSMutexDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112dcf0:	e0bfff17 	ldw	r2,-4(fp)
8112dcf4:	00c003c4 	movi	r3,15
8112dcf8:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112dcfc:	e0bffd17 	ldw	r2,-12(fp)
8112dd00:	00009406 	br	8112df54 <OSMutexDel+0x2f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dd04:	0005303a 	rdctl	r2,status
8112dd08:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dd0c:	e0fffc17 	ldw	r3,-16(fp)
8112dd10:	00bfff84 	movi	r2,-2
8112dd14:	1884703a 	and	r2,r3,r2
8112dd18:	1001703a 	wrctl	status,r2
  
  return context;
8112dd1c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112dd20:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
8112dd24:	e0bffd17 	ldw	r2,-12(fp)
8112dd28:	10800283 	ldbu	r2,10(r2)
8112dd2c:	10803fcc 	andi	r2,r2,255
8112dd30:	10000326 	beq	r2,zero,8112dd40 <OSMutexDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112dd34:	00800044 	movi	r2,1
8112dd38:	e0bff205 	stb	r2,-56(fp)
8112dd3c:	00000106 	br	8112dd44 <OSMutexDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112dd40:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
8112dd44:	e0bffe03 	ldbu	r2,-8(fp)
8112dd48:	10000326 	beq	r2,zero,8112dd58 <OSMutexDel+0xf4>
8112dd4c:	10800060 	cmpeqi	r2,r2,1
8112dd50:	10002f1e 	bne	r2,zero,8112de10 <OSMutexDel+0x1ac>
8112dd54:	00007406 	br	8112df28 <OSMutexDel+0x2c4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
8112dd58:	e0bff203 	ldbu	r2,-56(fp)
8112dd5c:	1000221e 	bne	r2,zero,8112dde8 <OSMutexDel+0x184>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112dd60:	e0bffd17 	ldw	r2,-12(fp)
8112dd64:	00c00fc4 	movi	r3,63
8112dd68:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112dd6c:	e0bffd17 	ldw	r2,-12(fp)
8112dd70:	10000485 	stb	zero,18(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112dd74:	e0bffd17 	ldw	r2,-12(fp)
8112dd78:	1080020b 	ldhu	r2,8(r2)
8112dd7c:	10bfffcc 	andi	r2,r2,65535
8112dd80:	1004d23a 	srli	r2,r2,8
8112dd84:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
8112dd88:	e0fff603 	ldbu	r3,-40(fp)
8112dd8c:	00a04574 	movhi	r2,33045
8112dd90:	10807b04 	addi	r2,r2,492
8112dd94:	18c7883a 	add	r3,r3,r3
8112dd98:	18c7883a 	add	r3,r3,r3
8112dd9c:	10c5883a 	add	r2,r2,r3
8112dda0:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112dda4:	e0bffd17 	ldw	r2,-12(fp)
8112dda8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
8112ddac:	d0e08917 	ldw	r3,-32220(gp)
8112ddb0:	e0bffd17 	ldw	r2,-12(fp)
8112ddb4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
8112ddb8:	e0bffd17 	ldw	r2,-12(fp)
8112ddbc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
8112ddc0:	e0bffd17 	ldw	r2,-12(fp)
8112ddc4:	d0a08915 	stw	r2,-32220(gp)
8112ddc8:	e0bff417 	ldw	r2,-48(fp)
8112ddcc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ddd0:	e0bff517 	ldw	r2,-44(fp)
8112ddd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
8112ddd8:	e0bfff17 	ldw	r2,-4(fp)
8112dddc:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
8112dde0:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
8112dde4:	00005a06 	br	8112df50 <OSMutexDel+0x2ec>
8112dde8:	e0bff417 	ldw	r2,-48(fp)
8112ddec:	e0bff715 	stw	r2,-36(fp)
8112ddf0:	e0bff717 	ldw	r2,-36(fp)
8112ddf4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
8112ddf8:	e0bfff17 	ldw	r2,-4(fp)
8112ddfc:	00c01244 	movi	r3,73
8112de00:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
8112de04:	e0bffd17 	ldw	r2,-12(fp)
8112de08:	e0bff315 	stw	r2,-52(fp)
             }
             break;
8112de0c:	00005006 	br	8112df50 <OSMutexDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
8112de10:	e0bffd17 	ldw	r2,-12(fp)
8112de14:	1080020b 	ldhu	r2,8(r2)
8112de18:	10bfffcc 	andi	r2,r2,65535
8112de1c:	1004d23a 	srli	r2,r2,8
8112de20:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
8112de24:	e0bffd17 	ldw	r2,-12(fp)
8112de28:	1080020b 	ldhu	r2,8(r2)
8112de2c:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
8112de30:	e0bffd17 	ldw	r2,-12(fp)
8112de34:	10800117 	ldw	r2,4(r2)
8112de38:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
8112de3c:	e0bffa17 	ldw	r2,-24(fp)
8112de40:	10000f26 	beq	r2,zero,8112de80 <OSMutexDel+0x21c>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
8112de44:	e0bffa17 	ldw	r2,-24(fp)
8112de48:	10800c83 	ldbu	r2,50(r2)
8112de4c:	10c03fcc 	andi	r3,r2,255
8112de50:	e0bff603 	ldbu	r2,-40(fp)
8112de54:	18800a1e 	bne	r3,r2,8112de80 <OSMutexDel+0x21c>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
8112de58:	e0bff903 	ldbu	r2,-28(fp)
8112de5c:	100b883a 	mov	r5,r2
8112de60:	e13ffa17 	ldw	r4,-24(fp)
8112de64:	112e8a00 	call	8112e8a0 <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112de68:	00000506 	br	8112de80 <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112de6c:	000f883a 	mov	r7,zero
8112de70:	01800404 	movi	r6,16
8112de74:	000b883a 	mov	r5,zero
8112de78:	e13ffd17 	ldw	r4,-12(fp)
8112de7c:	112a6080 	call	8112a608 <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112de80:	e0bffd17 	ldw	r2,-12(fp)
8112de84:	10800283 	ldbu	r2,10(r2)
8112de88:	10803fcc 	andi	r2,r2,255
8112de8c:	103ff71e 	bne	r2,zero,8112de6c <__reset+0xfb10de6c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112de90:	e0bffd17 	ldw	r2,-12(fp)
8112de94:	00c00fc4 	movi	r3,63
8112de98:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112de9c:	e0bffd17 	ldw	r2,-12(fp)
8112dea0:	10000485 	stb	zero,18(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112dea4:	e0bffd17 	ldw	r2,-12(fp)
8112dea8:	1080020b 	ldhu	r2,8(r2)
8112deac:	10bfffcc 	andi	r2,r2,65535
8112deb0:	1004d23a 	srli	r2,r2,8
8112deb4:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
8112deb8:	e0fff603 	ldbu	r3,-40(fp)
8112debc:	00a04574 	movhi	r2,33045
8112dec0:	10807b04 	addi	r2,r2,492
8112dec4:	18c7883a 	add	r3,r3,r3
8112dec8:	18c7883a 	add	r3,r3,r3
8112decc:	10c5883a 	add	r2,r2,r3
8112ded0:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112ded4:	e0bffd17 	ldw	r2,-12(fp)
8112ded8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
8112dedc:	d0e08917 	ldw	r3,-32220(gp)
8112dee0:	e0bffd17 	ldw	r2,-12(fp)
8112dee4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
8112dee8:	e0bffd17 	ldw	r2,-12(fp)
8112deec:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
8112def0:	e0bffd17 	ldw	r2,-12(fp)
8112def4:	d0a08915 	stw	r2,-32220(gp)
8112def8:	e0bff417 	ldw	r2,-48(fp)
8112defc:	e0bff815 	stw	r2,-32(fp)
8112df00:	e0bff817 	ldw	r2,-32(fp)
8112df04:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112df08:	e0bff203 	ldbu	r2,-56(fp)
8112df0c:	10800058 	cmpnei	r2,r2,1
8112df10:	1000011e 	bne	r2,zero,8112df18 <OSMutexDel+0x2b4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112df14:	112b0c40 	call	8112b0c4 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
8112df18:	e0bfff17 	ldw	r2,-4(fp)
8112df1c:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
8112df20:	e03ff315 	stw	zero,-52(fp)
             break;
8112df24:	00000a06 	br	8112df50 <OSMutexDel+0x2ec>
8112df28:	e0bff417 	ldw	r2,-48(fp)
8112df2c:	e0bffb15 	stw	r2,-20(fp)
8112df30:	e0bffb17 	ldw	r2,-20(fp)
8112df34:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
8112df38:	e0bfff17 	ldw	r2,-4(fp)
8112df3c:	00c001c4 	movi	r3,7
8112df40:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
8112df44:	e0bffd17 	ldw	r2,-12(fp)
8112df48:	e0bff315 	stw	r2,-52(fp)
             break;
8112df4c:	0001883a 	nop
    }
    return (pevent_return);
8112df50:	e0bff317 	ldw	r2,-52(fp)
}
8112df54:	e037883a 	mov	sp,fp
8112df58:	dfc00117 	ldw	ra,4(sp)
8112df5c:	df000017 	ldw	fp,0(sp)
8112df60:	dec00204 	addi	sp,sp,8
8112df64:	f800283a 	ret

8112df68 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112df68:	deffee04 	addi	sp,sp,-72
8112df6c:	de00012e 	bgeu	sp,et,8112df74 <OSMutexPend+0xc>
8112df70:	003b68fa 	trap	3
8112df74:	dfc01115 	stw	ra,68(sp)
8112df78:	df001015 	stw	fp,64(sp)
8112df7c:	df001004 	addi	fp,sp,64
8112df80:	e13ffd15 	stw	r4,-12(fp)
8112df84:	2805883a 	mov	r2,r5
8112df88:	e1bfff15 	stw	r6,-4(fp)
8112df8c:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112df90:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112df94:	e0bfff17 	ldw	r2,-4(fp)
8112df98:	10015626 	beq	r2,zero,8112e4f4 <OSMutexPend+0x58c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112df9c:	e0bffd17 	ldw	r2,-12(fp)
8112dfa0:	1000041e 	bne	r2,zero,8112dfb4 <OSMutexPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112dfa4:	e0bfff17 	ldw	r2,-4(fp)
8112dfa8:	00c00104 	movi	r3,4
8112dfac:	10c00005 	stb	r3,0(r2)
        return;
8112dfb0:	00015106 	br	8112e4f8 <OSMutexPend+0x590>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112dfb4:	e0bffd17 	ldw	r2,-12(fp)
8112dfb8:	10800003 	ldbu	r2,0(r2)
8112dfbc:	10803fcc 	andi	r2,r2,255
8112dfc0:	10800120 	cmpeqi	r2,r2,4
8112dfc4:	1000041e 	bne	r2,zero,8112dfd8 <OSMutexPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112dfc8:	e0bfff17 	ldw	r2,-4(fp)
8112dfcc:	00c00044 	movi	r3,1
8112dfd0:	10c00005 	stb	r3,0(r2)
        return;
8112dfd4:	00014806 	br	8112e4f8 <OSMutexPend+0x590>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112dfd8:	d0a08a03 	ldbu	r2,-32216(gp)
8112dfdc:	10803fcc 	andi	r2,r2,255
8112dfe0:	10000426 	beq	r2,zero,8112dff4 <OSMutexPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112dfe4:	e0bfff17 	ldw	r2,-4(fp)
8112dfe8:	00c00084 	movi	r3,2
8112dfec:	10c00005 	stb	r3,0(r2)
        return;
8112dff0:	00014106 	br	8112e4f8 <OSMutexPend+0x590>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112dff4:	d0a07803 	ldbu	r2,-32288(gp)
8112dff8:	10803fcc 	andi	r2,r2,255
8112dffc:	10000426 	beq	r2,zero,8112e010 <OSMutexPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112e000:	e0bfff17 	ldw	r2,-4(fp)
8112e004:	00c00344 	movi	r3,13
8112e008:	10c00005 	stb	r3,0(r2)
        return;
8112e00c:	00013a06 	br	8112e4f8 <OSMutexPend+0x590>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e010:	0005303a 	rdctl	r2,status
8112e014:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e018:	e0fffc17 	ldw	r3,-16(fp)
8112e01c:	00bfff84 	movi	r2,-2
8112e020:	1884703a 	and	r2,r3,r2
8112e024:	1001703a 	wrctl	status,r2
  
  return context;
8112e028:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112e02c:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
8112e030:	e0bffd17 	ldw	r2,-12(fp)
8112e034:	1080020b 	ldhu	r2,8(r2)
8112e038:	10bfffcc 	andi	r2,r2,65535
8112e03c:	1004d23a 	srli	r2,r2,8
8112e040:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112e044:	e0bffd17 	ldw	r2,-12(fp)
8112e048:	1080020b 	ldhu	r2,8(r2)
8112e04c:	10803fcc 	andi	r2,r2,255
8112e050:	10803fd8 	cmpnei	r2,r2,255
8112e054:	1000271e 	bne	r2,zero,8112e0f4 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
8112e058:	e0bffd17 	ldw	r2,-12(fp)
8112e05c:	10c0020b 	ldhu	r3,8(r2)
8112e060:	00bfc004 	movi	r2,-256
8112e064:	1884703a 	and	r2,r3,r2
8112e068:	1007883a 	mov	r3,r2
8112e06c:	e0bffd17 	ldw	r2,-12(fp)
8112e070:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
8112e074:	e0bffd17 	ldw	r2,-12(fp)
8112e078:	10c0020b 	ldhu	r3,8(r2)
8112e07c:	d0a08b17 	ldw	r2,-32212(gp)
8112e080:	10800c83 	ldbu	r2,50(r2)
8112e084:	10803fcc 	andi	r2,r2,255
8112e088:	1884b03a 	or	r2,r3,r2
8112e08c:	1007883a 	mov	r3,r2
8112e090:	e0bffd17 	ldw	r2,-12(fp)
8112e094:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
8112e098:	d0e08b17 	ldw	r3,-32212(gp)
8112e09c:	e0bffd17 	ldw	r2,-12(fp)
8112e0a0:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
8112e0a4:	d0a08b17 	ldw	r2,-32212(gp)
8112e0a8:	10800c83 	ldbu	r2,50(r2)
8112e0ac:	10803fcc 	andi	r2,r2,255
8112e0b0:	e0fff303 	ldbu	r3,-52(fp)
8112e0b4:	18800836 	bltu	r3,r2,8112e0d8 <OSMutexPend+0x170>
8112e0b8:	e0bff117 	ldw	r2,-60(fp)
8112e0bc:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e0c0:	e0bff217 	ldw	r2,-56(fp)
8112e0c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
8112e0c8:	e0bfff17 	ldw	r2,-4(fp)
8112e0cc:	00c01e04 	movi	r3,120
8112e0d0:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
8112e0d4:	00010806 	br	8112e4f8 <OSMutexPend+0x590>
8112e0d8:	e0bff117 	ldw	r2,-60(fp)
8112e0dc:	e0bff415 	stw	r2,-48(fp)
8112e0e0:	e0bff417 	ldw	r2,-48(fp)
8112e0e4:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112e0e8:	e0bfff17 	ldw	r2,-4(fp)
8112e0ec:	10000005 	stb	zero,0(r2)
        }
        return;
8112e0f0:	00010106 	br	8112e4f8 <OSMutexPend+0x590>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
8112e0f4:	e0bffd17 	ldw	r2,-12(fp)
8112e0f8:	1080020b 	ldhu	r2,8(r2)
8112e0fc:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
8112e100:	e0bffd17 	ldw	r2,-12(fp)
8112e104:	10800117 	ldw	r2,4(r2)
8112e108:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
8112e10c:	e0bff717 	ldw	r2,-36(fp)
8112e110:	10800c83 	ldbu	r2,50(r2)
8112e114:	10803fcc 	andi	r2,r2,255
8112e118:	e0fff303 	ldbu	r3,-52(fp)
8112e11c:	1880b92e 	bgeu	r3,r2,8112e404 <OSMutexPend+0x49c>
        if (mprio > OSTCBCur->OSTCBPrio) {
8112e120:	d0a08b17 	ldw	r2,-32212(gp)
8112e124:	10800c83 	ldbu	r2,50(r2)
8112e128:	10c03fcc 	andi	r3,r2,255
8112e12c:	e0bff603 	ldbu	r2,-40(fp)
8112e130:	1880b42e 	bgeu	r3,r2,8112e404 <OSMutexPend+0x49c>
            y = ptcb->OSTCBY;
8112e134:	e0bff717 	ldw	r2,-36(fp)
8112e138:	10800d03 	ldbu	r2,52(r2)
8112e13c:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
8112e140:	e0fff803 	ldbu	r3,-32(fp)
8112e144:	d0a08744 	addi	r2,gp,-32227
8112e148:	1885883a 	add	r2,r3,r2
8112e14c:	10c00003 	ldbu	r3,0(r2)
8112e150:	e0bff717 	ldw	r2,-36(fp)
8112e154:	10800d43 	ldbu	r2,53(r2)
8112e158:	1884703a 	and	r2,r3,r2
8112e15c:	10803fcc 	andi	r2,r2,255
8112e160:	10001e26 	beq	r2,zero,8112e1dc <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
8112e164:	e0fff803 	ldbu	r3,-32(fp)
8112e168:	e13ff803 	ldbu	r4,-32(fp)
8112e16c:	d0a08744 	addi	r2,gp,-32227
8112e170:	2085883a 	add	r2,r4,r2
8112e174:	10800003 	ldbu	r2,0(r2)
8112e178:	1009883a 	mov	r4,r2
8112e17c:	e0bff717 	ldw	r2,-36(fp)
8112e180:	10800d43 	ldbu	r2,53(r2)
8112e184:	0084303a 	nor	r2,zero,r2
8112e188:	2084703a 	and	r2,r4,r2
8112e18c:	1009883a 	mov	r4,r2
8112e190:	d0a08744 	addi	r2,gp,-32227
8112e194:	1885883a 	add	r2,r3,r2
8112e198:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
8112e19c:	e0fff803 	ldbu	r3,-32(fp)
8112e1a0:	d0a08744 	addi	r2,gp,-32227
8112e1a4:	1885883a 	add	r2,r3,r2
8112e1a8:	10800003 	ldbu	r2,0(r2)
8112e1ac:	10803fcc 	andi	r2,r2,255
8112e1b0:	1000071e 	bne	r2,zero,8112e1d0 <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
8112e1b4:	e0bff717 	ldw	r2,-36(fp)
8112e1b8:	10800d83 	ldbu	r2,54(r2)
8112e1bc:	0084303a 	nor	r2,zero,r2
8112e1c0:	1007883a 	mov	r3,r2
8112e1c4:	d0a08703 	ldbu	r2,-32228(gp)
8112e1c8:	1884703a 	and	r2,r3,r2
8112e1cc:	d0a08705 	stb	r2,-32228(gp)
                }
                rdy = OS_TRUE;
8112e1d0:	00800044 	movi	r2,1
8112e1d4:	e0bff005 	stb	r2,-64(fp)
8112e1d8:	00002a06 	br	8112e284 <OSMutexPend+0x31c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112e1dc:	e0bff717 	ldw	r2,-36(fp)
8112e1e0:	10800717 	ldw	r2,28(r2)
8112e1e4:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
8112e1e8:	e0bff917 	ldw	r2,-28(fp)
8112e1ec:	10002426 	beq	r2,zero,8112e280 <OSMutexPend+0x318>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
8112e1f0:	e0bff717 	ldw	r2,-36(fp)
8112e1f4:	10800d03 	ldbu	r2,52(r2)
8112e1f8:	10803fcc 	andi	r2,r2,255
8112e1fc:	e0fff717 	ldw	r3,-36(fp)
8112e200:	18c00d03 	ldbu	r3,52(r3)
8112e204:	18c03fcc 	andi	r3,r3,255
8112e208:	e13ff917 	ldw	r4,-28(fp)
8112e20c:	20c7883a 	add	r3,r4,r3
8112e210:	18c002c4 	addi	r3,r3,11
8112e214:	18c00003 	ldbu	r3,0(r3)
8112e218:	1809883a 	mov	r4,r3
8112e21c:	e0fff717 	ldw	r3,-36(fp)
8112e220:	18c00d43 	ldbu	r3,53(r3)
8112e224:	00c6303a 	nor	r3,zero,r3
8112e228:	20c6703a 	and	r3,r4,r3
8112e22c:	1809883a 	mov	r4,r3
8112e230:	e0fff917 	ldw	r3,-28(fp)
8112e234:	1887883a 	add	r3,r3,r2
8112e238:	18c002c4 	addi	r3,r3,11
8112e23c:	19000005 	stb	r4,0(r3)
8112e240:	e0fff917 	ldw	r3,-28(fp)
8112e244:	1885883a 	add	r2,r3,r2
8112e248:	108002c4 	addi	r2,r2,11
8112e24c:	10800003 	ldbu	r2,0(r2)
8112e250:	10803fcc 	andi	r2,r2,255
8112e254:	10000a1e 	bne	r2,zero,8112e280 <OSMutexPend+0x318>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
8112e258:	e0bff917 	ldw	r2,-28(fp)
8112e25c:	10800283 	ldbu	r2,10(r2)
8112e260:	1007883a 	mov	r3,r2
8112e264:	e0bff717 	ldw	r2,-36(fp)
8112e268:	10800d83 	ldbu	r2,54(r2)
8112e26c:	0084303a 	nor	r2,zero,r2
8112e270:	1884703a 	and	r2,r3,r2
8112e274:	1007883a 	mov	r3,r2
8112e278:	e0bff917 	ldw	r2,-28(fp)
8112e27c:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
8112e280:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
8112e284:	e0bff717 	ldw	r2,-36(fp)
8112e288:	e0fff303 	ldbu	r3,-52(fp)
8112e28c:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
8112e290:	e0bff717 	ldw	r2,-36(fp)
8112e294:	10800c83 	ldbu	r2,50(r2)
8112e298:	10803fcc 	andi	r2,r2,255
8112e29c:	1004d0fa 	srli	r2,r2,3
8112e2a0:	1007883a 	mov	r3,r2
8112e2a4:	e0bff717 	ldw	r2,-36(fp)
8112e2a8:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
8112e2ac:	e0bff717 	ldw	r2,-36(fp)
8112e2b0:	10800c83 	ldbu	r2,50(r2)
8112e2b4:	108001cc 	andi	r2,r2,7
8112e2b8:	1007883a 	mov	r3,r2
8112e2bc:	e0bff717 	ldw	r2,-36(fp)
8112e2c0:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
8112e2c4:	e0bff717 	ldw	r2,-36(fp)
8112e2c8:	10800d03 	ldbu	r2,52(r2)
8112e2cc:	10803fcc 	andi	r2,r2,255
8112e2d0:	00c00044 	movi	r3,1
8112e2d4:	1884983a 	sll	r2,r3,r2
8112e2d8:	1007883a 	mov	r3,r2
8112e2dc:	e0bff717 	ldw	r2,-36(fp)
8112e2e0:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
8112e2e4:	e0bff717 	ldw	r2,-36(fp)
8112e2e8:	10800cc3 	ldbu	r2,51(r2)
8112e2ec:	10803fcc 	andi	r2,r2,255
8112e2f0:	00c00044 	movi	r3,1
8112e2f4:	1884983a 	sll	r2,r3,r2
8112e2f8:	1007883a 	mov	r3,r2
8112e2fc:	e0bff717 	ldw	r2,-36(fp)
8112e300:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
8112e304:	e0bff003 	ldbu	r2,-64(fp)
8112e308:	10800058 	cmpnei	r2,r2,1
8112e30c:	1000161e 	bne	r2,zero,8112e368 <OSMutexPend+0x400>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
8112e310:	e0bff717 	ldw	r2,-36(fp)
8112e314:	10c00d83 	ldbu	r3,54(r2)
8112e318:	d0a08703 	ldbu	r2,-32228(gp)
8112e31c:	1884b03a 	or	r2,r3,r2
8112e320:	d0a08705 	stb	r2,-32228(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112e324:	e0bff717 	ldw	r2,-36(fp)
8112e328:	10800d03 	ldbu	r2,52(r2)
8112e32c:	10c03fcc 	andi	r3,r2,255
8112e330:	e0bff717 	ldw	r2,-36(fp)
8112e334:	10800d03 	ldbu	r2,52(r2)
8112e338:	11003fcc 	andi	r4,r2,255
8112e33c:	d0a08744 	addi	r2,gp,-32227
8112e340:	2085883a 	add	r2,r4,r2
8112e344:	11000003 	ldbu	r4,0(r2)
8112e348:	e0bff717 	ldw	r2,-36(fp)
8112e34c:	10800d43 	ldbu	r2,53(r2)
8112e350:	2084b03a 	or	r2,r4,r2
8112e354:	1009883a 	mov	r4,r2
8112e358:	d0a08744 	addi	r2,gp,-32227
8112e35c:	1885883a 	add	r2,r3,r2
8112e360:	11000005 	stb	r4,0(r2)
8112e364:	00001f06 	br	8112e3e4 <OSMutexPend+0x47c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112e368:	e0bff717 	ldw	r2,-36(fp)
8112e36c:	10800717 	ldw	r2,28(r2)
8112e370:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
8112e374:	e0bff917 	ldw	r2,-28(fp)
8112e378:	10001a26 	beq	r2,zero,8112e3e4 <OSMutexPend+0x47c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
8112e37c:	e0bff917 	ldw	r2,-28(fp)
8112e380:	10c00283 	ldbu	r3,10(r2)
8112e384:	e0bff717 	ldw	r2,-36(fp)
8112e388:	10800d83 	ldbu	r2,54(r2)
8112e38c:	1884b03a 	or	r2,r3,r2
8112e390:	1007883a 	mov	r3,r2
8112e394:	e0bff917 	ldw	r2,-28(fp)
8112e398:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112e39c:	e0bff717 	ldw	r2,-36(fp)
8112e3a0:	10800d03 	ldbu	r2,52(r2)
8112e3a4:	10803fcc 	andi	r2,r2,255
8112e3a8:	e0fff717 	ldw	r3,-36(fp)
8112e3ac:	18c00d03 	ldbu	r3,52(r3)
8112e3b0:	18c03fcc 	andi	r3,r3,255
8112e3b4:	e13ff917 	ldw	r4,-28(fp)
8112e3b8:	20c7883a 	add	r3,r4,r3
8112e3bc:	18c002c4 	addi	r3,r3,11
8112e3c0:	19000003 	ldbu	r4,0(r3)
8112e3c4:	e0fff717 	ldw	r3,-36(fp)
8112e3c8:	18c00d43 	ldbu	r3,53(r3)
8112e3cc:	20c6b03a 	or	r3,r4,r3
8112e3d0:	1809883a 	mov	r4,r3
8112e3d4:	e0fff917 	ldw	r3,-28(fp)
8112e3d8:	1885883a 	add	r2,r3,r2
8112e3dc:	108002c4 	addi	r2,r2,11
8112e3e0:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
8112e3e4:	e0fff303 	ldbu	r3,-52(fp)
8112e3e8:	00a04574 	movhi	r2,33045
8112e3ec:	10807b04 	addi	r2,r2,492
8112e3f0:	18c7883a 	add	r3,r3,r3
8112e3f4:	18c7883a 	add	r3,r3,r3
8112e3f8:	10c5883a 	add	r2,r2,r3
8112e3fc:	e0fff717 	ldw	r3,-36(fp)
8112e400:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
8112e404:	d0a08b17 	ldw	r2,-32212(gp)
8112e408:	d0e08b17 	ldw	r3,-32212(gp)
8112e40c:	18c00c03 	ldbu	r3,48(r3)
8112e410:	18c00414 	ori	r3,r3,16
8112e414:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112e418:	d0a08b17 	ldw	r2,-32212(gp)
8112e41c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
8112e420:	d0a08b17 	ldw	r2,-32212(gp)
8112e424:	e0fffe0b 	ldhu	r3,-8(fp)
8112e428:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112e42c:	e13ffd17 	ldw	r4,-12(fp)
8112e430:	112a7a80 	call	8112a7a8 <OS_EventTaskWait>
8112e434:	e0bff117 	ldw	r2,-60(fp)
8112e438:	e0bffb15 	stw	r2,-20(fp)
8112e43c:	e0bffb17 	ldw	r2,-20(fp)
8112e440:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112e444:	112b0c40 	call	8112b0c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e448:	0005303a 	rdctl	r2,status
8112e44c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e450:	e0fff517 	ldw	r3,-44(fp)
8112e454:	00bfff84 	movi	r2,-2
8112e458:	1884703a 	and	r2,r3,r2
8112e45c:	1001703a 	wrctl	status,r2
  
  return context;
8112e460:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
8112e464:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112e468:	d0a08b17 	ldw	r2,-32212(gp)
8112e46c:	10800c43 	ldbu	r2,49(r2)
8112e470:	10803fcc 	andi	r2,r2,255
8112e474:	10000326 	beq	r2,zero,8112e484 <OSMutexPend+0x51c>
8112e478:	108000a0 	cmpeqi	r2,r2,2
8112e47c:	1000041e 	bne	r2,zero,8112e490 <OSMutexPend+0x528>
8112e480:	00000706 	br	8112e4a0 <OSMutexPend+0x538>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112e484:	e0bfff17 	ldw	r2,-4(fp)
8112e488:	10000005 	stb	zero,0(r2)
             break;
8112e48c:	00000c06 	br	8112e4c0 <OSMutexPend+0x558>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
8112e490:	e0bfff17 	ldw	r2,-4(fp)
8112e494:	00c00384 	movi	r3,14
8112e498:	10c00005 	stb	r3,0(r2)
             break;
8112e49c:	00000806 	br	8112e4c0 <OSMutexPend+0x558>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112e4a0:	d0a08b17 	ldw	r2,-32212(gp)
8112e4a4:	e17ffd17 	ldw	r5,-12(fp)
8112e4a8:	1009883a 	mov	r4,r2
8112e4ac:	112aa180 	call	8112aa18 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
8112e4b0:	e0bfff17 	ldw	r2,-4(fp)
8112e4b4:	00c00284 	movi	r3,10
8112e4b8:	10c00005 	stb	r3,0(r2)
             break;
8112e4bc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112e4c0:	d0a08b17 	ldw	r2,-32212(gp)
8112e4c4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112e4c8:	d0a08b17 	ldw	r2,-32212(gp)
8112e4cc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112e4d0:	d0a08b17 	ldw	r2,-32212(gp)
8112e4d4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112e4d8:	d0a08b17 	ldw	r2,-32212(gp)
8112e4dc:	10000815 	stw	zero,32(r2)
8112e4e0:	e0bff117 	ldw	r2,-60(fp)
8112e4e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e4e8:	e0bffa17 	ldw	r2,-24(fp)
8112e4ec:	1001703a 	wrctl	status,r2
8112e4f0:	00000106 	br	8112e4f8 <OSMutexPend+0x590>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
8112e4f4:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112e4f8:	e037883a 	mov	sp,fp
8112e4fc:	dfc00117 	ldw	ra,4(sp)
8112e500:	df000017 	ldw	fp,0(sp)
8112e504:	dec00204 	addi	sp,sp,8
8112e508:	f800283a 	ret

8112e50c <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
8112e50c:	defff604 	addi	sp,sp,-40
8112e510:	de00012e 	bgeu	sp,et,8112e518 <OSMutexPost+0xc>
8112e514:	003b68fa 	trap	3
8112e518:	dfc00915 	stw	ra,36(sp)
8112e51c:	df000815 	stw	fp,32(sp)
8112e520:	df000804 	addi	fp,sp,32
8112e524:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112e528:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112e52c:	d0a08a03 	ldbu	r2,-32216(gp)
8112e530:	10803fcc 	andi	r2,r2,255
8112e534:	10000226 	beq	r2,zero,8112e540 <OSMutexPost+0x34>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
8112e538:	00800144 	movi	r2,5
8112e53c:	00007606 	br	8112e718 <OSMutexPost+0x20c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112e540:	e0bfff17 	ldw	r2,-4(fp)
8112e544:	1000021e 	bne	r2,zero,8112e550 <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
8112e548:	00800104 	movi	r2,4
8112e54c:	00007206 	br	8112e718 <OSMutexPost+0x20c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
8112e550:	e0bfff17 	ldw	r2,-4(fp)
8112e554:	10800003 	ldbu	r2,0(r2)
8112e558:	10803fcc 	andi	r2,r2,255
8112e55c:	10800120 	cmpeqi	r2,r2,4
8112e560:	1000021e 	bne	r2,zero,8112e56c <OSMutexPost+0x60>
        return (OS_ERR_EVENT_TYPE);
8112e564:	00800044 	movi	r2,1
8112e568:	00006b06 	br	8112e718 <OSMutexPost+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e56c:	0005303a 	rdctl	r2,status
8112e570:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e574:	e0fffe17 	ldw	r3,-8(fp)
8112e578:	00bfff84 	movi	r2,-2
8112e57c:	1884703a 	and	r2,r3,r2
8112e580:	1001703a 	wrctl	status,r2
  
  return context;
8112e584:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112e588:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
8112e58c:	e0bfff17 	ldw	r2,-4(fp)
8112e590:	1080020b 	ldhu	r2,8(r2)
8112e594:	10bfffcc 	andi	r2,r2,65535
8112e598:	1004d23a 	srli	r2,r2,8
8112e59c:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
8112e5a0:	e0bfff17 	ldw	r2,-4(fp)
8112e5a4:	1080020b 	ldhu	r2,8(r2)
8112e5a8:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
8112e5ac:	e0bfff17 	ldw	r2,-4(fp)
8112e5b0:	10c00117 	ldw	r3,4(r2)
8112e5b4:	d0a08b17 	ldw	r2,-32212(gp)
8112e5b8:	18800626 	beq	r3,r2,8112e5d4 <OSMutexPost+0xc8>
8112e5bc:	e0bff817 	ldw	r2,-32(fp)
8112e5c0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e5c4:	e0bff917 	ldw	r2,-28(fp)
8112e5c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
8112e5cc:	00801904 	movi	r2,100
8112e5d0:	00005106 	br	8112e718 <OSMutexPost+0x20c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
8112e5d4:	d0a08b17 	ldw	r2,-32212(gp)
8112e5d8:	10800c83 	ldbu	r2,50(r2)
8112e5dc:	10c03fcc 	andi	r3,r2,255
8112e5e0:	e0bffa03 	ldbu	r2,-24(fp)
8112e5e4:	1880051e 	bne	r3,r2,8112e5fc <OSMutexPost+0xf0>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
8112e5e8:	d0a08b17 	ldw	r2,-32212(gp)
8112e5ec:	e0fffa43 	ldbu	r3,-23(fp)
8112e5f0:	180b883a 	mov	r5,r3
8112e5f4:	1009883a 	mov	r4,r2
8112e5f8:	112e8a00 	call	8112e8a0 <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
8112e5fc:	e0fffa03 	ldbu	r3,-24(fp)
8112e600:	00a04574 	movhi	r2,33045
8112e604:	10807b04 	addi	r2,r2,492
8112e608:	18c7883a 	add	r3,r3,r3
8112e60c:	18c7883a 	add	r3,r3,r3
8112e610:	10c5883a 	add	r2,r2,r3
8112e614:	00c00044 	movi	r3,1
8112e618:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
8112e61c:	e0bfff17 	ldw	r2,-4(fp)
8112e620:	10800283 	ldbu	r2,10(r2)
8112e624:	10803fcc 	andi	r2,r2,255
8112e628:	10002e26 	beq	r2,zero,8112e6e4 <OSMutexPost+0x1d8>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112e62c:	000f883a 	mov	r7,zero
8112e630:	01800404 	movi	r6,16
8112e634:	000b883a 	mov	r5,zero
8112e638:	e13fff17 	ldw	r4,-4(fp)
8112e63c:	112a6080 	call	8112a608 <OS_EventTaskRdy>
8112e640:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
8112e644:	e0bfff17 	ldw	r2,-4(fp)
8112e648:	10c0020b 	ldhu	r3,8(r2)
8112e64c:	00bfc004 	movi	r2,-256
8112e650:	1884703a 	and	r2,r3,r2
8112e654:	1007883a 	mov	r3,r2
8112e658:	e0bfff17 	ldw	r2,-4(fp)
8112e65c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
8112e660:	e0bfff17 	ldw	r2,-4(fp)
8112e664:	10c0020b 	ldhu	r3,8(r2)
8112e668:	e0bffa43 	ldbu	r2,-23(fp)
8112e66c:	1884b03a 	or	r2,r3,r2
8112e670:	1007883a 	mov	r3,r2
8112e674:	e0bfff17 	ldw	r2,-4(fp)
8112e678:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
8112e67c:	e0fffa43 	ldbu	r3,-23(fp)
8112e680:	00a04574 	movhi	r2,33045
8112e684:	10807b04 	addi	r2,r2,492
8112e688:	18c7883a 	add	r3,r3,r3
8112e68c:	18c7883a 	add	r3,r3,r3
8112e690:	10c5883a 	add	r2,r2,r3
8112e694:	10c00017 	ldw	r3,0(r2)
8112e698:	e0bfff17 	ldw	r2,-4(fp)
8112e69c:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
8112e6a0:	e0bffa43 	ldbu	r2,-23(fp)
8112e6a4:	e0fffa03 	ldbu	r3,-24(fp)
8112e6a8:	18800736 	bltu	r3,r2,8112e6c8 <OSMutexPost+0x1bc>
8112e6ac:	e0bff817 	ldw	r2,-32(fp)
8112e6b0:	e0bffb15 	stw	r2,-20(fp)
8112e6b4:	e0bffb17 	ldw	r2,-20(fp)
8112e6b8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112e6bc:	112b0c40 	call	8112b0c4 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
8112e6c0:	00801e04 	movi	r2,120
8112e6c4:	00001406 	br	8112e718 <OSMutexPost+0x20c>
8112e6c8:	e0bff817 	ldw	r2,-32(fp)
8112e6cc:	e0bffc15 	stw	r2,-16(fp)
8112e6d0:	e0bffc17 	ldw	r2,-16(fp)
8112e6d4:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112e6d8:	112b0c40 	call	8112b0c4 <OS_Sched>
            return (OS_ERR_NONE);
8112e6dc:	0005883a 	mov	r2,zero
8112e6e0:	00000d06 	br	8112e718 <OSMutexPost+0x20c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
8112e6e4:	e0bfff17 	ldw	r2,-4(fp)
8112e6e8:	1080020b 	ldhu	r2,8(r2)
8112e6ec:	10803fd4 	ori	r2,r2,255
8112e6f0:	1007883a 	mov	r3,r2
8112e6f4:	e0bfff17 	ldw	r2,-4(fp)
8112e6f8:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
8112e6fc:	e0bfff17 	ldw	r2,-4(fp)
8112e700:	10000115 	stw	zero,4(r2)
8112e704:	e0bff817 	ldw	r2,-32(fp)
8112e708:	e0bffd15 	stw	r2,-12(fp)
8112e70c:	e0bffd17 	ldw	r2,-12(fp)
8112e710:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e714:	0005883a 	mov	r2,zero
}
8112e718:	e037883a 	mov	sp,fp
8112e71c:	dfc00117 	ldw	ra,4(sp)
8112e720:	df000017 	ldw	fp,0(sp)
8112e724:	dec00204 	addi	sp,sp,8
8112e728:	f800283a 	ret

8112e72c <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
8112e72c:	defff704 	addi	sp,sp,-36
8112e730:	de00012e 	bgeu	sp,et,8112e738 <OSMutexQuery+0xc>
8112e734:	003b68fa 	trap	3
8112e738:	df000815 	stw	fp,32(sp)
8112e73c:	df000804 	addi	fp,sp,32
8112e740:	e13ffe15 	stw	r4,-8(fp)
8112e744:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112e748:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112e74c:	d0a08a03 	ldbu	r2,-32216(gp)
8112e750:	10803fcc 	andi	r2,r2,255
8112e754:	10000226 	beq	r2,zero,8112e760 <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
8112e758:	00800184 	movi	r2,6
8112e75c:	00004c06 	br	8112e890 <OSMutexQuery+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112e760:	e0bffe17 	ldw	r2,-8(fp)
8112e764:	1000021e 	bne	r2,zero,8112e770 <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
8112e768:	00800104 	movi	r2,4
8112e76c:	00004806 	br	8112e890 <OSMutexQuery+0x164>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
8112e770:	e0bfff17 	ldw	r2,-4(fp)
8112e774:	1000021e 	bne	r2,zero,8112e780 <OSMutexQuery+0x54>
        return (OS_ERR_PDATA_NULL);
8112e778:	00800244 	movi	r2,9
8112e77c:	00004406 	br	8112e890 <OSMutexQuery+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112e780:	e0bffe17 	ldw	r2,-8(fp)
8112e784:	10800003 	ldbu	r2,0(r2)
8112e788:	10803fcc 	andi	r2,r2,255
8112e78c:	10800120 	cmpeqi	r2,r2,4
8112e790:	1000021e 	bne	r2,zero,8112e79c <OSMutexQuery+0x70>
        return (OS_ERR_EVENT_TYPE);
8112e794:	00800044 	movi	r2,1
8112e798:	00003d06 	br	8112e890 <OSMutexQuery+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e79c:	0005303a 	rdctl	r2,status
8112e7a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e7a4:	e0fffd17 	ldw	r3,-12(fp)
8112e7a8:	00bfff84 	movi	r2,-2
8112e7ac:	1884703a 	and	r2,r3,r2
8112e7b0:	1001703a 	wrctl	status,r2
  
  return context;
8112e7b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112e7b8:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
8112e7bc:	e0bffe17 	ldw	r2,-8(fp)
8112e7c0:	1080020b 	ldhu	r2,8(r2)
8112e7c4:	10bfffcc 	andi	r2,r2,65535
8112e7c8:	1004d23a 	srli	r2,r2,8
8112e7cc:	1007883a 	mov	r3,r2
8112e7d0:	e0bfff17 	ldw	r2,-4(fp)
8112e7d4:	10c00245 	stb	r3,9(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
8112e7d8:	e0bffe17 	ldw	r2,-8(fp)
8112e7dc:	1080020b 	ldhu	r2,8(r2)
8112e7e0:	1007883a 	mov	r3,r2
8112e7e4:	e0bfff17 	ldw	r2,-4(fp)
8112e7e8:	10c00205 	stb	r3,8(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
8112e7ec:	e0bfff17 	ldw	r2,-4(fp)
8112e7f0:	10800203 	ldbu	r2,8(r2)
8112e7f4:	10803fcc 	andi	r2,r2,255
8112e7f8:	10803fd8 	cmpnei	r2,r2,255
8112e7fc:	1000041e 	bne	r2,zero,8112e810 <OSMutexQuery+0xe4>
        p_mutex_data->OSValue = OS_TRUE;
8112e800:	e0bfff17 	ldw	r2,-4(fp)
8112e804:	00c00044 	movi	r3,1
8112e808:	10c001c5 	stb	r3,7(r2)
8112e80c:	00000206 	br	8112e818 <OSMutexQuery+0xec>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
8112e810:	e0bfff17 	ldw	r2,-4(fp)
8112e814:	100001c5 	stb	zero,7(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
8112e818:	e0bffe17 	ldw	r2,-8(fp)
8112e81c:	10c00283 	ldbu	r3,10(r2)
8112e820:	e0bfff17 	ldw	r2,-4(fp)
8112e824:	10c00185 	stb	r3,6(r2)
    psrc                      = &pevent->OSEventTbl[0];
8112e828:	e0bffe17 	ldw	r2,-8(fp)
8112e82c:	108002c4 	addi	r2,r2,11
8112e830:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
8112e834:	e0bfff17 	ldw	r2,-4(fp)
8112e838:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112e83c:	e03ff805 	stb	zero,-32(fp)
8112e840:	00000b06 	br	8112e870 <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
8112e844:	e0bffa17 	ldw	r2,-24(fp)
8112e848:	10c00044 	addi	r3,r2,1
8112e84c:	e0fffa15 	stw	r3,-24(fp)
8112e850:	e0fff917 	ldw	r3,-28(fp)
8112e854:	19000044 	addi	r4,r3,1
8112e858:	e13ff915 	stw	r4,-28(fp)
8112e85c:	18c00003 	ldbu	r3,0(r3)
8112e860:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112e864:	e0bff803 	ldbu	r2,-32(fp)
8112e868:	10800044 	addi	r2,r2,1
8112e86c:	e0bff805 	stb	r2,-32(fp)
8112e870:	e0bff803 	ldbu	r2,-32(fp)
8112e874:	108001b0 	cmpltui	r2,r2,6
8112e878:	103ff21e 	bne	r2,zero,8112e844 <__reset+0xfb10e844>
8112e87c:	e0bffb17 	ldw	r2,-20(fp)
8112e880:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e884:	e0bffc17 	ldw	r2,-16(fp)
8112e888:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e88c:	0005883a 	mov	r2,zero
}
8112e890:	e037883a 	mov	sp,fp
8112e894:	df000017 	ldw	fp,0(sp)
8112e898:	dec00104 	addi	sp,sp,4
8112e89c:	f800283a 	ret

8112e8a0 <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
8112e8a0:	defffc04 	addi	sp,sp,-16
8112e8a4:	de00012e 	bgeu	sp,et,8112e8ac <OSMutex_RdyAtPrio+0xc>
8112e8a8:	003b68fa 	trap	3
8112e8ac:	df000315 	stw	fp,12(sp)
8112e8b0:	df000304 	addi	fp,sp,12
8112e8b4:	e13ffe15 	stw	r4,-8(fp)
8112e8b8:	2805883a 	mov	r2,r5
8112e8bc:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
8112e8c0:	e0bffe17 	ldw	r2,-8(fp)
8112e8c4:	10800d03 	ldbu	r2,52(r2)
8112e8c8:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
8112e8cc:	e0fffd03 	ldbu	r3,-12(fp)
8112e8d0:	e13ffd03 	ldbu	r4,-12(fp)
8112e8d4:	d0a08744 	addi	r2,gp,-32227
8112e8d8:	2085883a 	add	r2,r4,r2
8112e8dc:	10800003 	ldbu	r2,0(r2)
8112e8e0:	1009883a 	mov	r4,r2
8112e8e4:	e0bffe17 	ldw	r2,-8(fp)
8112e8e8:	10800d43 	ldbu	r2,53(r2)
8112e8ec:	0084303a 	nor	r2,zero,r2
8112e8f0:	2084703a 	and	r2,r4,r2
8112e8f4:	1009883a 	mov	r4,r2
8112e8f8:	d0a08744 	addi	r2,gp,-32227
8112e8fc:	1885883a 	add	r2,r3,r2
8112e900:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112e904:	e0fffd03 	ldbu	r3,-12(fp)
8112e908:	d0a08744 	addi	r2,gp,-32227
8112e90c:	1885883a 	add	r2,r3,r2
8112e910:	10800003 	ldbu	r2,0(r2)
8112e914:	10803fcc 	andi	r2,r2,255
8112e918:	1000071e 	bne	r2,zero,8112e938 <OSMutex_RdyAtPrio+0x98>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112e91c:	e0bffe17 	ldw	r2,-8(fp)
8112e920:	10800d83 	ldbu	r2,54(r2)
8112e924:	0084303a 	nor	r2,zero,r2
8112e928:	1007883a 	mov	r3,r2
8112e92c:	d0a08703 	ldbu	r2,-32228(gp)
8112e930:	1884703a 	and	r2,r3,r2
8112e934:	d0a08705 	stb	r2,-32228(gp)
    }
    ptcb->OSTCBPrio         = prio;
8112e938:	e0bffe17 	ldw	r2,-8(fp)
8112e93c:	e0ffff03 	ldbu	r3,-4(fp)
8112e940:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
8112e944:	e0bfff03 	ldbu	r2,-4(fp)
8112e948:	1004d0fa 	srli	r2,r2,3
8112e94c:	108001cc 	andi	r2,r2,7
8112e950:	1007883a 	mov	r3,r2
8112e954:	e0bffe17 	ldw	r2,-8(fp)
8112e958:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
8112e95c:	e0bfff03 	ldbu	r2,-4(fp)
8112e960:	108001cc 	andi	r2,r2,7
8112e964:	1007883a 	mov	r3,r2
8112e968:	e0bffe17 	ldw	r2,-8(fp)
8112e96c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
8112e970:	e0bffe17 	ldw	r2,-8(fp)
8112e974:	10800d03 	ldbu	r2,52(r2)
8112e978:	10803fcc 	andi	r2,r2,255
8112e97c:	00c00044 	movi	r3,1
8112e980:	1884983a 	sll	r2,r3,r2
8112e984:	1007883a 	mov	r3,r2
8112e988:	e0bffe17 	ldw	r2,-8(fp)
8112e98c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
8112e990:	e0bffe17 	ldw	r2,-8(fp)
8112e994:	10800cc3 	ldbu	r2,51(r2)
8112e998:	10803fcc 	andi	r2,r2,255
8112e99c:	00c00044 	movi	r3,1
8112e9a0:	1884983a 	sll	r2,r3,r2
8112e9a4:	1007883a 	mov	r3,r2
8112e9a8:	e0bffe17 	ldw	r2,-8(fp)
8112e9ac:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
8112e9b0:	e0bffe17 	ldw	r2,-8(fp)
8112e9b4:	10c00d83 	ldbu	r3,54(r2)
8112e9b8:	d0a08703 	ldbu	r2,-32228(gp)
8112e9bc:	1884b03a 	or	r2,r3,r2
8112e9c0:	d0a08705 	stb	r2,-32228(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112e9c4:	e0bffe17 	ldw	r2,-8(fp)
8112e9c8:	10800d03 	ldbu	r2,52(r2)
8112e9cc:	10c03fcc 	andi	r3,r2,255
8112e9d0:	e0bffe17 	ldw	r2,-8(fp)
8112e9d4:	10800d03 	ldbu	r2,52(r2)
8112e9d8:	11003fcc 	andi	r4,r2,255
8112e9dc:	d0a08744 	addi	r2,gp,-32227
8112e9e0:	2085883a 	add	r2,r4,r2
8112e9e4:	11000003 	ldbu	r4,0(r2)
8112e9e8:	e0bffe17 	ldw	r2,-8(fp)
8112e9ec:	10800d43 	ldbu	r2,53(r2)
8112e9f0:	2084b03a 	or	r2,r4,r2
8112e9f4:	1009883a 	mov	r4,r2
8112e9f8:	d0a08744 	addi	r2,gp,-32227
8112e9fc:	1885883a 	add	r2,r3,r2
8112ea00:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
8112ea04:	e0ffff03 	ldbu	r3,-4(fp)
8112ea08:	00a04574 	movhi	r2,33045
8112ea0c:	10807b04 	addi	r2,r2,492
8112ea10:	18c7883a 	add	r3,r3,r3
8112ea14:	18c7883a 	add	r3,r3,r3
8112ea18:	10c5883a 	add	r2,r2,r3
8112ea1c:	e0fffe17 	ldw	r3,-8(fp)
8112ea20:	10c00015 	stw	r3,0(r2)
}
8112ea24:	0001883a 	nop
8112ea28:	e037883a 	mov	sp,fp
8112ea2c:	df000017 	ldw	fp,0(sp)
8112ea30:	dec00104 	addi	sp,sp,4
8112ea34:	f800283a 	ret

8112ea38 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
8112ea38:	defff804 	addi	sp,sp,-32
8112ea3c:	de00012e 	bgeu	sp,et,8112ea44 <OSQAccept+0xc>
8112ea40:	003b68fa 	trap	3
8112ea44:	df000715 	stw	fp,28(sp)
8112ea48:	df000704 	addi	fp,sp,28
8112ea4c:	e13ffe15 	stw	r4,-8(fp)
8112ea50:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ea54:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112ea58:	e0bfff17 	ldw	r2,-4(fp)
8112ea5c:	1000021e 	bne	r2,zero,8112ea68 <OSQAccept+0x30>
        return ((void *)0);
8112ea60:	0005883a 	mov	r2,zero
8112ea64:	00004206 	br	8112eb70 <OSQAccept+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112ea68:	e0bffe17 	ldw	r2,-8(fp)
8112ea6c:	1000051e 	bne	r2,zero,8112ea84 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112ea70:	e0bfff17 	ldw	r2,-4(fp)
8112ea74:	00c00104 	movi	r3,4
8112ea78:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112ea7c:	0005883a 	mov	r2,zero
8112ea80:	00003b06 	br	8112eb70 <OSQAccept+0x138>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112ea84:	e0bffe17 	ldw	r2,-8(fp)
8112ea88:	10800003 	ldbu	r2,0(r2)
8112ea8c:	10803fcc 	andi	r2,r2,255
8112ea90:	108000a0 	cmpeqi	r2,r2,2
8112ea94:	1000051e 	bne	r2,zero,8112eaac <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112ea98:	e0bfff17 	ldw	r2,-4(fp)
8112ea9c:	00c00044 	movi	r3,1
8112eaa0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112eaa4:	0005883a 	mov	r2,zero
8112eaa8:	00003106 	br	8112eb70 <OSQAccept+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112eaac:	0005303a 	rdctl	r2,status
8112eab0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112eab4:	e0fffd17 	ldw	r3,-12(fp)
8112eab8:	00bfff84 	movi	r2,-2
8112eabc:	1884703a 	and	r2,r3,r2
8112eac0:	1001703a 	wrctl	status,r2
  
  return context;
8112eac4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112eac8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112eacc:	e0bffe17 	ldw	r2,-8(fp)
8112ead0:	10800117 	ldw	r2,4(r2)
8112ead4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112ead8:	e0bffc17 	ldw	r2,-16(fp)
8112eadc:	1080058b 	ldhu	r2,22(r2)
8112eae0:	10bfffcc 	andi	r2,r2,65535
8112eae4:	10001926 	beq	r2,zero,8112eb4c <OSQAccept+0x114>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112eae8:	e0bffc17 	ldw	r2,-16(fp)
8112eaec:	10800417 	ldw	r2,16(r2)
8112eaf0:	11000104 	addi	r4,r2,4
8112eaf4:	e0fffc17 	ldw	r3,-16(fp)
8112eaf8:	19000415 	stw	r4,16(r3)
8112eafc:	10800017 	ldw	r2,0(r2)
8112eb00:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112eb04:	e0bffc17 	ldw	r2,-16(fp)
8112eb08:	1080058b 	ldhu	r2,22(r2)
8112eb0c:	10bfffc4 	addi	r2,r2,-1
8112eb10:	1007883a 	mov	r3,r2
8112eb14:	e0bffc17 	ldw	r2,-16(fp)
8112eb18:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112eb1c:	e0bffc17 	ldw	r2,-16(fp)
8112eb20:	10c00417 	ldw	r3,16(r2)
8112eb24:	e0bffc17 	ldw	r2,-16(fp)
8112eb28:	10800217 	ldw	r2,8(r2)
8112eb2c:	1880041e 	bne	r3,r2,8112eb40 <OSQAccept+0x108>
            pq->OSQOut = pq->OSQStart;
8112eb30:	e0bffc17 	ldw	r2,-16(fp)
8112eb34:	10c00117 	ldw	r3,4(r2)
8112eb38:	e0bffc17 	ldw	r2,-16(fp)
8112eb3c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
8112eb40:	e0bfff17 	ldw	r2,-4(fp)
8112eb44:	10000005 	stb	zero,0(r2)
8112eb48:	00000406 	br	8112eb5c <OSQAccept+0x124>
    } else {
        *perr = OS_ERR_Q_EMPTY;
8112eb4c:	e0bfff17 	ldw	r2,-4(fp)
8112eb50:	00c007c4 	movi	r3,31
8112eb54:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
8112eb58:	e03ff915 	stw	zero,-28(fp)
8112eb5c:	e0bffa17 	ldw	r2,-24(fp)
8112eb60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112eb64:	e0bffb17 	ldw	r2,-20(fp)
8112eb68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
8112eb6c:	e0bff917 	ldw	r2,-28(fp)
}
8112eb70:	e037883a 	mov	sp,fp
8112eb74:	df000017 	ldw	fp,0(sp)
8112eb78:	dec00104 	addi	sp,sp,4
8112eb7c:	f800283a 	ret

8112eb80 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
8112eb80:	defff404 	addi	sp,sp,-48
8112eb84:	de00012e 	bgeu	sp,et,8112eb8c <OSQCreate+0xc>
8112eb88:	003b68fa 	trap	3
8112eb8c:	dfc00b15 	stw	ra,44(sp)
8112eb90:	df000a15 	stw	fp,40(sp)
8112eb94:	df000a04 	addi	fp,sp,40
8112eb98:	e13ffe15 	stw	r4,-8(fp)
8112eb9c:	2805883a 	mov	r2,r5
8112eba0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112eba4:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112eba8:	d0a08a03 	ldbu	r2,-32216(gp)
8112ebac:	10803fcc 	andi	r2,r2,255
8112ebb0:	10000226 	beq	r2,zero,8112ebbc <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
8112ebb4:	0005883a 	mov	r2,zero
8112ebb8:	00005906 	br	8112ed20 <OSQCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ebbc:	0005303a 	rdctl	r2,status
8112ebc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ebc4:	e0fffd17 	ldw	r3,-12(fp)
8112ebc8:	00bfff84 	movi	r2,-2
8112ebcc:	1884703a 	and	r2,r3,r2
8112ebd0:	1001703a 	wrctl	status,r2
  
  return context;
8112ebd4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112ebd8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
8112ebdc:	d0a08917 	ldw	r2,-32220(gp)
8112ebe0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
8112ebe4:	d0a08917 	ldw	r2,-32220(gp)
8112ebe8:	10000326 	beq	r2,zero,8112ebf8 <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112ebec:	d0a08917 	ldw	r2,-32220(gp)
8112ebf0:	10800117 	ldw	r2,4(r2)
8112ebf4:	d0a08915 	stw	r2,-32220(gp)
8112ebf8:	e0bff717 	ldw	r2,-36(fp)
8112ebfc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ec00:	e0bff817 	ldw	r2,-32(fp)
8112ec04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
8112ec08:	e0bff617 	ldw	r2,-40(fp)
8112ec0c:	10004326 	beq	r2,zero,8112ed1c <OSQCreate+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ec10:	0005303a 	rdctl	r2,status
8112ec14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ec18:	e0fff917 	ldw	r3,-28(fp)
8112ec1c:	00bfff84 	movi	r2,-2
8112ec20:	1884703a 	and	r2,r3,r2
8112ec24:	1001703a 	wrctl	status,r2
  
  return context;
8112ec28:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
8112ec2c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
8112ec30:	d0a08617 	ldw	r2,-32232(gp)
8112ec34:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
8112ec38:	e0bffb17 	ldw	r2,-20(fp)
8112ec3c:	10002d26 	beq	r2,zero,8112ecf4 <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
8112ec40:	d0a08617 	ldw	r2,-32232(gp)
8112ec44:	10800017 	ldw	r2,0(r2)
8112ec48:	d0a08615 	stw	r2,-32232(gp)
8112ec4c:	e0bff717 	ldw	r2,-36(fp)
8112ec50:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ec54:	e0bffa17 	ldw	r2,-24(fp)
8112ec58:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
8112ec5c:	e0bffb17 	ldw	r2,-20(fp)
8112ec60:	e0fffe17 	ldw	r3,-8(fp)
8112ec64:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
8112ec68:	e0bfff0b 	ldhu	r2,-4(fp)
8112ec6c:	1085883a 	add	r2,r2,r2
8112ec70:	1085883a 	add	r2,r2,r2
8112ec74:	1007883a 	mov	r3,r2
8112ec78:	e0bffe17 	ldw	r2,-8(fp)
8112ec7c:	10c7883a 	add	r3,r2,r3
8112ec80:	e0bffb17 	ldw	r2,-20(fp)
8112ec84:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
8112ec88:	e0bffb17 	ldw	r2,-20(fp)
8112ec8c:	e0fffe17 	ldw	r3,-8(fp)
8112ec90:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
8112ec94:	e0bffb17 	ldw	r2,-20(fp)
8112ec98:	e0fffe17 	ldw	r3,-8(fp)
8112ec9c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
8112eca0:	e0bffb17 	ldw	r2,-20(fp)
8112eca4:	e0ffff0b 	ldhu	r3,-4(fp)
8112eca8:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
8112ecac:	e0bffb17 	ldw	r2,-20(fp)
8112ecb0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
8112ecb4:	e0bff617 	ldw	r2,-40(fp)
8112ecb8:	00c00084 	movi	r3,2
8112ecbc:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
8112ecc0:	e0bff617 	ldw	r2,-40(fp)
8112ecc4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
8112ecc8:	e0bff617 	ldw	r2,-40(fp)
8112eccc:	e0fffb17 	ldw	r3,-20(fp)
8112ecd0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
8112ecd4:	e0bff617 	ldw	r2,-40(fp)
8112ecd8:	00c00fc4 	movi	r3,63
8112ecdc:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
8112ece0:	e0bff617 	ldw	r2,-40(fp)
8112ece4:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
8112ece8:	e13ff617 	ldw	r4,-40(fp)
8112ecec:	112abe00 	call	8112abe0 <OS_EventWaitListInit>
8112ecf0:	00000a06 	br	8112ed1c <OSQCreate+0x19c>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
8112ecf4:	d0e08917 	ldw	r3,-32220(gp)
8112ecf8:	e0bff617 	ldw	r2,-40(fp)
8112ecfc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
8112ed00:	e0bff617 	ldw	r2,-40(fp)
8112ed04:	d0a08915 	stw	r2,-32220(gp)
8112ed08:	e0bff717 	ldw	r2,-36(fp)
8112ed0c:	e0bffc15 	stw	r2,-16(fp)
8112ed10:	e0bffc17 	ldw	r2,-16(fp)
8112ed14:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
8112ed18:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
8112ed1c:	e0bff617 	ldw	r2,-40(fp)
}
8112ed20:	e037883a 	mov	sp,fp
8112ed24:	dfc00117 	ldw	ra,4(sp)
8112ed28:	df000017 	ldw	fp,0(sp)
8112ed2c:	dec00204 	addi	sp,sp,8
8112ed30:	f800283a 	ret

8112ed34 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112ed34:	defff204 	addi	sp,sp,-56
8112ed38:	de00012e 	bgeu	sp,et,8112ed40 <OSQDel+0xc>
8112ed3c:	003b68fa 	trap	3
8112ed40:	dfc00d15 	stw	ra,52(sp)
8112ed44:	df000c15 	stw	fp,48(sp)
8112ed48:	df000c04 	addi	fp,sp,48
8112ed4c:	e13ffd15 	stw	r4,-12(fp)
8112ed50:	2805883a 	mov	r2,r5
8112ed54:	e1bfff15 	stw	r6,-4(fp)
8112ed58:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112ed5c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112ed60:	e0bfff17 	ldw	r2,-4(fp)
8112ed64:	1000021e 	bne	r2,zero,8112ed70 <OSQDel+0x3c>
        return (pevent);
8112ed68:	e0bffd17 	ldw	r2,-12(fp)
8112ed6c:	00008e06 	br	8112efa8 <OSQDel+0x274>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112ed70:	e0bffd17 	ldw	r2,-12(fp)
8112ed74:	1000051e 	bne	r2,zero,8112ed8c <OSQDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112ed78:	e0bfff17 	ldw	r2,-4(fp)
8112ed7c:	00c00104 	movi	r3,4
8112ed80:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112ed84:	e0bffd17 	ldw	r2,-12(fp)
8112ed88:	00008706 	br	8112efa8 <OSQDel+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112ed8c:	e0bffd17 	ldw	r2,-12(fp)
8112ed90:	10800003 	ldbu	r2,0(r2)
8112ed94:	10803fcc 	andi	r2,r2,255
8112ed98:	108000a0 	cmpeqi	r2,r2,2
8112ed9c:	1000051e 	bne	r2,zero,8112edb4 <OSQDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112eda0:	e0bfff17 	ldw	r2,-4(fp)
8112eda4:	00c00044 	movi	r3,1
8112eda8:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112edac:	e0bffd17 	ldw	r2,-12(fp)
8112edb0:	00007d06 	br	8112efa8 <OSQDel+0x274>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112edb4:	d0a08a03 	ldbu	r2,-32216(gp)
8112edb8:	10803fcc 	andi	r2,r2,255
8112edbc:	10000526 	beq	r2,zero,8112edd4 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112edc0:	e0bfff17 	ldw	r2,-4(fp)
8112edc4:	00c003c4 	movi	r3,15
8112edc8:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112edcc:	e0bffd17 	ldw	r2,-12(fp)
8112edd0:	00007506 	br	8112efa8 <OSQDel+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112edd4:	0005303a 	rdctl	r2,status
8112edd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112eddc:	e0fffc17 	ldw	r3,-16(fp)
8112ede0:	00bfff84 	movi	r2,-2
8112ede4:	1884703a 	and	r2,r3,r2
8112ede8:	1001703a 	wrctl	status,r2
  
  return context;
8112edec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112edf0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
8112edf4:	e0bffd17 	ldw	r2,-12(fp)
8112edf8:	10800283 	ldbu	r2,10(r2)
8112edfc:	10803fcc 	andi	r2,r2,255
8112ee00:	10000326 	beq	r2,zero,8112ee10 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112ee04:	00800044 	movi	r2,1
8112ee08:	e0bff405 	stb	r2,-48(fp)
8112ee0c:	00000106 	br	8112ee14 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112ee10:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112ee14:	e0bffe03 	ldbu	r2,-8(fp)
8112ee18:	10000326 	beq	r2,zero,8112ee28 <OSQDel+0xf4>
8112ee1c:	10800060 	cmpeqi	r2,r2,1
8112ee20:	1000301e 	bne	r2,zero,8112eee4 <OSQDel+0x1b0>
8112ee24:	00005506 	br	8112ef7c <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
8112ee28:	e0bff403 	ldbu	r2,-48(fp)
8112ee2c:	10001e1e 	bne	r2,zero,8112eea8 <OSQDel+0x174>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112ee30:	e0bffd17 	ldw	r2,-12(fp)
8112ee34:	00c00fc4 	movi	r3,63
8112ee38:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112ee3c:	e0bffd17 	ldw	r2,-12(fp)
8112ee40:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
8112ee44:	e0bffd17 	ldw	r2,-12(fp)
8112ee48:	10800117 	ldw	r2,4(r2)
8112ee4c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
8112ee50:	d0e08617 	ldw	r3,-32232(gp)
8112ee54:	e0bff817 	ldw	r2,-32(fp)
8112ee58:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
8112ee5c:	e0bff817 	ldw	r2,-32(fp)
8112ee60:	d0a08615 	stw	r2,-32232(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112ee64:	e0bffd17 	ldw	r2,-12(fp)
8112ee68:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112ee6c:	d0e08917 	ldw	r3,-32220(gp)
8112ee70:	e0bffd17 	ldw	r2,-12(fp)
8112ee74:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112ee78:	e0bffd17 	ldw	r2,-12(fp)
8112ee7c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112ee80:	e0bffd17 	ldw	r2,-12(fp)
8112ee84:	d0a08915 	stw	r2,-32220(gp)
8112ee88:	e0bff617 	ldw	r2,-40(fp)
8112ee8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ee90:	e0bff717 	ldw	r2,-36(fp)
8112ee94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112ee98:	e0bfff17 	ldw	r2,-4(fp)
8112ee9c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
8112eea0:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112eea4:	00003f06 	br	8112efa4 <OSQDel+0x270>
8112eea8:	e0bff617 	ldw	r2,-40(fp)
8112eeac:	e0bff915 	stw	r2,-28(fp)
8112eeb0:	e0bff917 	ldw	r2,-28(fp)
8112eeb4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112eeb8:	e0bfff17 	ldw	r2,-4(fp)
8112eebc:	00c01244 	movi	r3,73
8112eec0:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112eec4:	e0bffd17 	ldw	r2,-12(fp)
8112eec8:	e0bff515 	stw	r2,-44(fp)
             }
             break;
8112eecc:	00003506 	br	8112efa4 <OSQDel+0x270>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
8112eed0:	000f883a 	mov	r7,zero
8112eed4:	01800104 	movi	r6,4
8112eed8:	000b883a 	mov	r5,zero
8112eedc:	e13ffd17 	ldw	r4,-12(fp)
8112eee0:	112a6080 	call	8112a608 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
8112eee4:	e0bffd17 	ldw	r2,-12(fp)
8112eee8:	10800283 	ldbu	r2,10(r2)
8112eeec:	10803fcc 	andi	r2,r2,255
8112eef0:	103ff71e 	bne	r2,zero,8112eed0 <__reset+0xfb10eed0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112eef4:	e0bffd17 	ldw	r2,-12(fp)
8112eef8:	00c00fc4 	movi	r3,63
8112eefc:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112ef00:	e0bffd17 	ldw	r2,-12(fp)
8112ef04:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
8112ef08:	e0bffd17 	ldw	r2,-12(fp)
8112ef0c:	10800117 	ldw	r2,4(r2)
8112ef10:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
8112ef14:	d0e08617 	ldw	r3,-32232(gp)
8112ef18:	e0bff817 	ldw	r2,-32(fp)
8112ef1c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
8112ef20:	e0bff817 	ldw	r2,-32(fp)
8112ef24:	d0a08615 	stw	r2,-32232(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112ef28:	e0bffd17 	ldw	r2,-12(fp)
8112ef2c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112ef30:	d0e08917 	ldw	r3,-32220(gp)
8112ef34:	e0bffd17 	ldw	r2,-12(fp)
8112ef38:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112ef3c:	e0bffd17 	ldw	r2,-12(fp)
8112ef40:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112ef44:	e0bffd17 	ldw	r2,-12(fp)
8112ef48:	d0a08915 	stw	r2,-32220(gp)
8112ef4c:	e0bff617 	ldw	r2,-40(fp)
8112ef50:	e0bffa15 	stw	r2,-24(fp)
8112ef54:	e0bffa17 	ldw	r2,-24(fp)
8112ef58:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112ef5c:	e0bff403 	ldbu	r2,-48(fp)
8112ef60:	10800058 	cmpnei	r2,r2,1
8112ef64:	1000011e 	bne	r2,zero,8112ef6c <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112ef68:	112b0c40 	call	8112b0c4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112ef6c:	e0bfff17 	ldw	r2,-4(fp)
8112ef70:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
8112ef74:	e03ff515 	stw	zero,-44(fp)
             break;
8112ef78:	00000a06 	br	8112efa4 <OSQDel+0x270>
8112ef7c:	e0bff617 	ldw	r2,-40(fp)
8112ef80:	e0bffb15 	stw	r2,-20(fp)
8112ef84:	e0bffb17 	ldw	r2,-20(fp)
8112ef88:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112ef8c:	e0bfff17 	ldw	r2,-4(fp)
8112ef90:	00c001c4 	movi	r3,7
8112ef94:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112ef98:	e0bffd17 	ldw	r2,-12(fp)
8112ef9c:	e0bff515 	stw	r2,-44(fp)
             break;
8112efa0:	0001883a 	nop
    }
    return (pevent_return);
8112efa4:	e0bff517 	ldw	r2,-44(fp)
}
8112efa8:	e037883a 	mov	sp,fp
8112efac:	dfc00117 	ldw	ra,4(sp)
8112efb0:	df000017 	ldw	fp,0(sp)
8112efb4:	dec00204 	addi	sp,sp,8
8112efb8:	f800283a 	ret

8112efbc <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
8112efbc:	defffa04 	addi	sp,sp,-24
8112efc0:	de00012e 	bgeu	sp,et,8112efc8 <OSQFlush+0xc>
8112efc4:	003b68fa 	trap	3
8112efc8:	df000515 	stw	fp,20(sp)
8112efcc:	df000504 	addi	fp,sp,20
8112efd0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112efd4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112efd8:	e0bfff17 	ldw	r2,-4(fp)
8112efdc:	1000021e 	bne	r2,zero,8112efe8 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
8112efe0:	00800104 	movi	r2,4
8112efe4:	00002106 	br	8112f06c <OSQFlush+0xb0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112efe8:	e0bfff17 	ldw	r2,-4(fp)
8112efec:	10800003 	ldbu	r2,0(r2)
8112eff0:	10803fcc 	andi	r2,r2,255
8112eff4:	108000a0 	cmpeqi	r2,r2,2
8112eff8:	1000021e 	bne	r2,zero,8112f004 <OSQFlush+0x48>
        return (OS_ERR_EVENT_TYPE);
8112effc:	00800044 	movi	r2,1
8112f000:	00001a06 	br	8112f06c <OSQFlush+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f004:	0005303a 	rdctl	r2,status
8112f008:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f00c:	e0fffd17 	ldw	r3,-12(fp)
8112f010:	00bfff84 	movi	r2,-2
8112f014:	1884703a 	and	r2,r3,r2
8112f018:	1001703a 	wrctl	status,r2
  
  return context;
8112f01c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112f020:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
8112f024:	e0bfff17 	ldw	r2,-4(fp)
8112f028:	10800117 	ldw	r2,4(r2)
8112f02c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
8112f030:	e0bffc17 	ldw	r2,-16(fp)
8112f034:	10c00117 	ldw	r3,4(r2)
8112f038:	e0bffc17 	ldw	r2,-16(fp)
8112f03c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
8112f040:	e0bffc17 	ldw	r2,-16(fp)
8112f044:	10c00117 	ldw	r3,4(r2)
8112f048:	e0bffc17 	ldw	r2,-16(fp)
8112f04c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
8112f050:	e0bffc17 	ldw	r2,-16(fp)
8112f054:	1000058d 	sth	zero,22(r2)
8112f058:	e0bffb17 	ldw	r2,-20(fp)
8112f05c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f060:	e0bffe17 	ldw	r2,-8(fp)
8112f064:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112f068:	0005883a 	mov	r2,zero
}
8112f06c:	e037883a 	mov	sp,fp
8112f070:	df000017 	ldw	fp,0(sp)
8112f074:	dec00104 	addi	sp,sp,4
8112f078:	f800283a 	ret

8112f07c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112f07c:	defff304 	addi	sp,sp,-52
8112f080:	de00012e 	bgeu	sp,et,8112f088 <OSQPend+0xc>
8112f084:	003b68fa 	trap	3
8112f088:	dfc00c15 	stw	ra,48(sp)
8112f08c:	df000b15 	stw	fp,44(sp)
8112f090:	df000b04 	addi	fp,sp,44
8112f094:	e13ffd15 	stw	r4,-12(fp)
8112f098:	2805883a 	mov	r2,r5
8112f09c:	e1bfff15 	stw	r6,-4(fp)
8112f0a0:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112f0a4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112f0a8:	e0bfff17 	ldw	r2,-4(fp)
8112f0ac:	1000021e 	bne	r2,zero,8112f0b8 <OSQPend+0x3c>
        return ((void *)0);
8112f0b0:	0005883a 	mov	r2,zero
8112f0b4:	00009106 	br	8112f2fc <OSQPend+0x280>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112f0b8:	e0bffd17 	ldw	r2,-12(fp)
8112f0bc:	1000051e 	bne	r2,zero,8112f0d4 <OSQPend+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112f0c0:	e0bfff17 	ldw	r2,-4(fp)
8112f0c4:	00c00104 	movi	r3,4
8112f0c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112f0cc:	0005883a 	mov	r2,zero
8112f0d0:	00008a06 	br	8112f2fc <OSQPend+0x280>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112f0d4:	e0bffd17 	ldw	r2,-12(fp)
8112f0d8:	10800003 	ldbu	r2,0(r2)
8112f0dc:	10803fcc 	andi	r2,r2,255
8112f0e0:	108000a0 	cmpeqi	r2,r2,2
8112f0e4:	1000051e 	bne	r2,zero,8112f0fc <OSQPend+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112f0e8:	e0bfff17 	ldw	r2,-4(fp)
8112f0ec:	00c00044 	movi	r3,1
8112f0f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112f0f4:	0005883a 	mov	r2,zero
8112f0f8:	00008006 	br	8112f2fc <OSQPend+0x280>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112f0fc:	d0a08a03 	ldbu	r2,-32216(gp)
8112f100:	10803fcc 	andi	r2,r2,255
8112f104:	10000526 	beq	r2,zero,8112f11c <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
8112f108:	e0bfff17 	ldw	r2,-4(fp)
8112f10c:	00c00084 	movi	r3,2
8112f110:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112f114:	0005883a 	mov	r2,zero
8112f118:	00007806 	br	8112f2fc <OSQPend+0x280>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
8112f11c:	d0a07803 	ldbu	r2,-32288(gp)
8112f120:	10803fcc 	andi	r2,r2,255
8112f124:	10000526 	beq	r2,zero,8112f13c <OSQPend+0xc0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
8112f128:	e0bfff17 	ldw	r2,-4(fp)
8112f12c:	00c00344 	movi	r3,13
8112f130:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112f134:	0005883a 	mov	r2,zero
8112f138:	00007006 	br	8112f2fc <OSQPend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f13c:	0005303a 	rdctl	r2,status
8112f140:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f144:	e0fffc17 	ldw	r3,-16(fp)
8112f148:	00bfff84 	movi	r2,-2
8112f14c:	1884703a 	and	r2,r3,r2
8112f150:	1001703a 	wrctl	status,r2
  
  return context;
8112f154:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f158:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112f15c:	e0bffd17 	ldw	r2,-12(fp)
8112f160:	10800117 	ldw	r2,4(r2)
8112f164:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112f168:	e0bff817 	ldw	r2,-32(fp)
8112f16c:	1080058b 	ldhu	r2,22(r2)
8112f170:	10bfffcc 	andi	r2,r2,65535
8112f174:	10001e26 	beq	r2,zero,8112f1f0 <OSQPend+0x174>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112f178:	e0bff817 	ldw	r2,-32(fp)
8112f17c:	10800417 	ldw	r2,16(r2)
8112f180:	11000104 	addi	r4,r2,4
8112f184:	e0fff817 	ldw	r3,-32(fp)
8112f188:	19000415 	stw	r4,16(r3)
8112f18c:	10800017 	ldw	r2,0(r2)
8112f190:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112f194:	e0bff817 	ldw	r2,-32(fp)
8112f198:	1080058b 	ldhu	r2,22(r2)
8112f19c:	10bfffc4 	addi	r2,r2,-1
8112f1a0:	1007883a 	mov	r3,r2
8112f1a4:	e0bff817 	ldw	r2,-32(fp)
8112f1a8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112f1ac:	e0bff817 	ldw	r2,-32(fp)
8112f1b0:	10c00417 	ldw	r3,16(r2)
8112f1b4:	e0bff817 	ldw	r2,-32(fp)
8112f1b8:	10800217 	ldw	r2,8(r2)
8112f1bc:	1880041e 	bne	r3,r2,8112f1d0 <OSQPend+0x154>
            pq->OSQOut = pq->OSQStart;
8112f1c0:	e0bff817 	ldw	r2,-32(fp)
8112f1c4:	10c00117 	ldw	r3,4(r2)
8112f1c8:	e0bff817 	ldw	r2,-32(fp)
8112f1cc:	10c00415 	stw	r3,16(r2)
8112f1d0:	e0bff617 	ldw	r2,-40(fp)
8112f1d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f1d8:	e0bff717 	ldw	r2,-36(fp)
8112f1dc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112f1e0:	e0bfff17 	ldw	r2,-4(fp)
8112f1e4:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
8112f1e8:	e0bff517 	ldw	r2,-44(fp)
8112f1ec:	00004306 	br	8112f2fc <OSQPend+0x280>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
8112f1f0:	d0a08b17 	ldw	r2,-32212(gp)
8112f1f4:	d0e08b17 	ldw	r3,-32212(gp)
8112f1f8:	18c00c03 	ldbu	r3,48(r3)
8112f1fc:	18c00114 	ori	r3,r3,4
8112f200:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112f204:	d0a08b17 	ldw	r2,-32212(gp)
8112f208:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
8112f20c:	d0a08b17 	ldw	r2,-32212(gp)
8112f210:	e0fffe0b 	ldhu	r3,-8(fp)
8112f214:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
8112f218:	e13ffd17 	ldw	r4,-12(fp)
8112f21c:	112a7a80 	call	8112a7a8 <OS_EventTaskWait>
8112f220:	e0bff617 	ldw	r2,-40(fp)
8112f224:	e0bffb15 	stw	r2,-20(fp)
8112f228:	e0bffb17 	ldw	r2,-20(fp)
8112f22c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
8112f230:	112b0c40 	call	8112b0c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f234:	0005303a 	rdctl	r2,status
8112f238:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f23c:	e0fff917 	ldw	r3,-28(fp)
8112f240:	00bfff84 	movi	r2,-2
8112f244:	1884703a 	and	r2,r3,r2
8112f248:	1001703a 	wrctl	status,r2
  
  return context;
8112f24c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112f250:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112f254:	d0a08b17 	ldw	r2,-32212(gp)
8112f258:	10800c43 	ldbu	r2,49(r2)
8112f25c:	10803fcc 	andi	r2,r2,255
8112f260:	10000326 	beq	r2,zero,8112f270 <OSQPend+0x1f4>
8112f264:	108000a0 	cmpeqi	r2,r2,2
8112f268:	1000071e 	bne	r2,zero,8112f288 <OSQPend+0x20c>
8112f26c:	00000b06 	br	8112f29c <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
8112f270:	d0a08b17 	ldw	r2,-32212(gp)
8112f274:	10800917 	ldw	r2,36(r2)
8112f278:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
8112f27c:	e0bfff17 	ldw	r2,-4(fp)
8112f280:	10000005 	stb	zero,0(r2)
             break;
8112f284:	00000e06 	br	8112f2c0 <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
8112f288:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112f28c:	e0bfff17 	ldw	r2,-4(fp)
8112f290:	00c00384 	movi	r3,14
8112f294:	10c00005 	stb	r3,0(r2)
             break;
8112f298:	00000906 	br	8112f2c0 <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112f29c:	d0a08b17 	ldw	r2,-32212(gp)
8112f2a0:	e17ffd17 	ldw	r5,-12(fp)
8112f2a4:	1009883a 	mov	r4,r2
8112f2a8:	112aa180 	call	8112aa18 <OS_EventTaskRemove>
             pmsg = (void *)0;
8112f2ac:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112f2b0:	e0bfff17 	ldw	r2,-4(fp)
8112f2b4:	00c00284 	movi	r3,10
8112f2b8:	10c00005 	stb	r3,0(r2)
             break;
8112f2bc:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112f2c0:	d0a08b17 	ldw	r2,-32212(gp)
8112f2c4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112f2c8:	d0a08b17 	ldw	r2,-32212(gp)
8112f2cc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112f2d0:	d0a08b17 	ldw	r2,-32212(gp)
8112f2d4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112f2d8:	d0a08b17 	ldw	r2,-32212(gp)
8112f2dc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
8112f2e0:	d0a08b17 	ldw	r2,-32212(gp)
8112f2e4:	10000915 	stw	zero,36(r2)
8112f2e8:	e0bff617 	ldw	r2,-40(fp)
8112f2ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f2f0:	e0bffa17 	ldw	r2,-24(fp)
8112f2f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
8112f2f8:	e0bff517 	ldw	r2,-44(fp)
}
8112f2fc:	e037883a 	mov	sp,fp
8112f300:	dfc00117 	ldw	ra,4(sp)
8112f304:	df000017 	ldw	fp,0(sp)
8112f308:	dec00204 	addi	sp,sp,8
8112f30c:	f800283a 	ret

8112f310 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112f310:	defff604 	addi	sp,sp,-40
8112f314:	de00012e 	bgeu	sp,et,8112f31c <OSQPendAbort+0xc>
8112f318:	003b68fa 	trap	3
8112f31c:	dfc00915 	stw	ra,36(sp)
8112f320:	df000815 	stw	fp,32(sp)
8112f324:	df000804 	addi	fp,sp,32
8112f328:	e13ffd15 	stw	r4,-12(fp)
8112f32c:	2805883a 	mov	r2,r5
8112f330:	e1bfff15 	stw	r6,-4(fp)
8112f334:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112f338:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112f33c:	e0bfff17 	ldw	r2,-4(fp)
8112f340:	1000021e 	bne	r2,zero,8112f34c <OSQPendAbort+0x3c>
        return (0);
8112f344:	0005883a 	mov	r2,zero
8112f348:	00004906 	br	8112f470 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112f34c:	e0bffd17 	ldw	r2,-12(fp)
8112f350:	1000051e 	bne	r2,zero,8112f368 <OSQPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112f354:	e0bfff17 	ldw	r2,-4(fp)
8112f358:	00c00104 	movi	r3,4
8112f35c:	10c00005 	stb	r3,0(r2)
        return (0);
8112f360:	0005883a 	mov	r2,zero
8112f364:	00004206 	br	8112f470 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112f368:	e0bffd17 	ldw	r2,-12(fp)
8112f36c:	10800003 	ldbu	r2,0(r2)
8112f370:	10803fcc 	andi	r2,r2,255
8112f374:	108000a0 	cmpeqi	r2,r2,2
8112f378:	1000051e 	bne	r2,zero,8112f390 <OSQPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112f37c:	e0bfff17 	ldw	r2,-4(fp)
8112f380:	00c00044 	movi	r3,1
8112f384:	10c00005 	stb	r3,0(r2)
        return (0);
8112f388:	0005883a 	mov	r2,zero
8112f38c:	00003806 	br	8112f470 <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f390:	0005303a 	rdctl	r2,status
8112f394:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f398:	e0fffc17 	ldw	r3,-16(fp)
8112f39c:	00bfff84 	movi	r2,-2
8112f3a0:	1884703a 	and	r2,r3,r2
8112f3a4:	1001703a 	wrctl	status,r2
  
  return context;
8112f3a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f3ac:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
8112f3b0:	e0bffd17 	ldw	r2,-12(fp)
8112f3b4:	10800283 	ldbu	r2,10(r2)
8112f3b8:	10803fcc 	andi	r2,r2,255
8112f3bc:	10002526 	beq	r2,zero,8112f454 <OSQPendAbort+0x144>
        nbr_tasks = 0;
8112f3c0:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112f3c4:	e0bffe03 	ldbu	r2,-8(fp)
8112f3c8:	10800060 	cmpeqi	r2,r2,1
8112f3cc:	10000e26 	beq	r2,zero,8112f408 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112f3d0:	00000806 	br	8112f3f4 <OSQPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112f3d4:	01c00084 	movi	r7,2
8112f3d8:	01800104 	movi	r6,4
8112f3dc:	000b883a 	mov	r5,zero
8112f3e0:	e13ffd17 	ldw	r4,-12(fp)
8112f3e4:	112a6080 	call	8112a608 <OS_EventTaskRdy>
                     nbr_tasks++;
8112f3e8:	e0bff803 	ldbu	r2,-32(fp)
8112f3ec:	10800044 	addi	r2,r2,1
8112f3f0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112f3f4:	e0bffd17 	ldw	r2,-12(fp)
8112f3f8:	10800283 	ldbu	r2,10(r2)
8112f3fc:	10803fcc 	andi	r2,r2,255
8112f400:	103ff41e 	bne	r2,zero,8112f3d4 <__reset+0xfb10f3d4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112f404:	00000906 	br	8112f42c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112f408:	01c00084 	movi	r7,2
8112f40c:	01800104 	movi	r6,4
8112f410:	000b883a 	mov	r5,zero
8112f414:	e13ffd17 	ldw	r4,-12(fp)
8112f418:	112a6080 	call	8112a608 <OS_EventTaskRdy>
                 nbr_tasks++;
8112f41c:	e0bff803 	ldbu	r2,-32(fp)
8112f420:	10800044 	addi	r2,r2,1
8112f424:	e0bff805 	stb	r2,-32(fp)
                 break;
8112f428:	0001883a 	nop
8112f42c:	e0bff917 	ldw	r2,-28(fp)
8112f430:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f434:	e0bffa17 	ldw	r2,-24(fp)
8112f438:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
8112f43c:	112b0c40 	call	8112b0c4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112f440:	e0bfff17 	ldw	r2,-4(fp)
8112f444:	00c00384 	movi	r3,14
8112f448:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112f44c:	e0bff803 	ldbu	r2,-32(fp)
8112f450:	00000706 	br	8112f470 <OSQPendAbort+0x160>
8112f454:	e0bff917 	ldw	r2,-28(fp)
8112f458:	e0bffb15 	stw	r2,-20(fp)
8112f45c:	e0bffb17 	ldw	r2,-20(fp)
8112f460:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112f464:	e0bfff17 	ldw	r2,-4(fp)
8112f468:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
8112f46c:	0005883a 	mov	r2,zero
}
8112f470:	e037883a 	mov	sp,fp
8112f474:	dfc00117 	ldw	ra,4(sp)
8112f478:	df000017 	ldw	fp,0(sp)
8112f47c:	dec00204 	addi	sp,sp,8
8112f480:	f800283a 	ret

8112f484 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
8112f484:	defff604 	addi	sp,sp,-40
8112f488:	de00012e 	bgeu	sp,et,8112f490 <OSQPost+0xc>
8112f48c:	003b68fa 	trap	3
8112f490:	dfc00915 	stw	ra,36(sp)
8112f494:	df000815 	stw	fp,32(sp)
8112f498:	df000804 	addi	fp,sp,32
8112f49c:	e13ffe15 	stw	r4,-8(fp)
8112f4a0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112f4a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112f4a8:	e0bffe17 	ldw	r2,-8(fp)
8112f4ac:	1000021e 	bne	r2,zero,8112f4b8 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
8112f4b0:	00800104 	movi	r2,4
8112f4b4:	00004a06 	br	8112f5e0 <OSQPost+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112f4b8:	e0bffe17 	ldw	r2,-8(fp)
8112f4bc:	10800003 	ldbu	r2,0(r2)
8112f4c0:	10803fcc 	andi	r2,r2,255
8112f4c4:	108000a0 	cmpeqi	r2,r2,2
8112f4c8:	1000021e 	bne	r2,zero,8112f4d4 <OSQPost+0x50>
        return (OS_ERR_EVENT_TYPE);
8112f4cc:	00800044 	movi	r2,1
8112f4d0:	00004306 	br	8112f5e0 <OSQPost+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f4d4:	0005303a 	rdctl	r2,status
8112f4d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f4dc:	e0fffd17 	ldw	r3,-12(fp)
8112f4e0:	00bfff84 	movi	r2,-2
8112f4e4:	1884703a 	and	r2,r3,r2
8112f4e8:	1001703a 	wrctl	status,r2
  
  return context;
8112f4ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112f4f0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
8112f4f4:	e0bffe17 	ldw	r2,-8(fp)
8112f4f8:	10800283 	ldbu	r2,10(r2)
8112f4fc:	10803fcc 	andi	r2,r2,255
8112f500:	10000c26 	beq	r2,zero,8112f534 <OSQPost+0xb0>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112f504:	000f883a 	mov	r7,zero
8112f508:	01800104 	movi	r6,4
8112f50c:	e17fff17 	ldw	r5,-4(fp)
8112f510:	e13ffe17 	ldw	r4,-8(fp)
8112f514:	112a6080 	call	8112a608 <OS_EventTaskRdy>
8112f518:	e0bff817 	ldw	r2,-32(fp)
8112f51c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f520:	e0bff917 	ldw	r2,-28(fp)
8112f524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
8112f528:	112b0c40 	call	8112b0c4 <OS_Sched>
        return (OS_ERR_NONE);
8112f52c:	0005883a 	mov	r2,zero
8112f530:	00002b06 	br	8112f5e0 <OSQPost+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
8112f534:	e0bffe17 	ldw	r2,-8(fp)
8112f538:	10800117 	ldw	r2,4(r2)
8112f53c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
8112f540:	e0bffb17 	ldw	r2,-20(fp)
8112f544:	10c0058b 	ldhu	r3,22(r2)
8112f548:	e0bffb17 	ldw	r2,-20(fp)
8112f54c:	1080050b 	ldhu	r2,20(r2)
8112f550:	18ffffcc 	andi	r3,r3,65535
8112f554:	10bfffcc 	andi	r2,r2,65535
8112f558:	18800636 	bltu	r3,r2,8112f574 <OSQPost+0xf0>
8112f55c:	e0bff817 	ldw	r2,-32(fp)
8112f560:	e0bffa15 	stw	r2,-24(fp)
8112f564:	e0bffa17 	ldw	r2,-24(fp)
8112f568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112f56c:	00800784 	movi	r2,30
8112f570:	00001b06 	br	8112f5e0 <OSQPost+0x15c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
8112f574:	e0bffb17 	ldw	r2,-20(fp)
8112f578:	10800317 	ldw	r2,12(r2)
8112f57c:	11000104 	addi	r4,r2,4
8112f580:	e0fffb17 	ldw	r3,-20(fp)
8112f584:	19000315 	stw	r4,12(r3)
8112f588:	e0ffff17 	ldw	r3,-4(fp)
8112f58c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
8112f590:	e0bffb17 	ldw	r2,-20(fp)
8112f594:	1080058b 	ldhu	r2,22(r2)
8112f598:	10800044 	addi	r2,r2,1
8112f59c:	1007883a 	mov	r3,r2
8112f5a0:	e0bffb17 	ldw	r2,-20(fp)
8112f5a4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
8112f5a8:	e0bffb17 	ldw	r2,-20(fp)
8112f5ac:	10c00317 	ldw	r3,12(r2)
8112f5b0:	e0bffb17 	ldw	r2,-20(fp)
8112f5b4:	10800217 	ldw	r2,8(r2)
8112f5b8:	1880041e 	bne	r3,r2,8112f5cc <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
8112f5bc:	e0bffb17 	ldw	r2,-20(fp)
8112f5c0:	10c00117 	ldw	r3,4(r2)
8112f5c4:	e0bffb17 	ldw	r2,-20(fp)
8112f5c8:	10c00315 	stw	r3,12(r2)
8112f5cc:	e0bff817 	ldw	r2,-32(fp)
8112f5d0:	e0bffc15 	stw	r2,-16(fp)
8112f5d4:	e0bffc17 	ldw	r2,-16(fp)
8112f5d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112f5dc:	0005883a 	mov	r2,zero
}
8112f5e0:	e037883a 	mov	sp,fp
8112f5e4:	dfc00117 	ldw	ra,4(sp)
8112f5e8:	df000017 	ldw	fp,0(sp)
8112f5ec:	dec00204 	addi	sp,sp,8
8112f5f0:	f800283a 	ret

8112f5f4 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
8112f5f4:	defff604 	addi	sp,sp,-40
8112f5f8:	de00012e 	bgeu	sp,et,8112f600 <OSQPostFront+0xc>
8112f5fc:	003b68fa 	trap	3
8112f600:	dfc00915 	stw	ra,36(sp)
8112f604:	df000815 	stw	fp,32(sp)
8112f608:	df000804 	addi	fp,sp,32
8112f60c:	e13ffe15 	stw	r4,-8(fp)
8112f610:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f614:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f618:	e0bffe17 	ldw	r2,-8(fp)
8112f61c:	1000021e 	bne	r2,zero,8112f628 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
8112f620:	00800104 	movi	r2,4
8112f624:	00004c06 	br	8112f758 <OSQPostFront+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112f628:	e0bffe17 	ldw	r2,-8(fp)
8112f62c:	10800003 	ldbu	r2,0(r2)
8112f630:	10803fcc 	andi	r2,r2,255
8112f634:	108000a0 	cmpeqi	r2,r2,2
8112f638:	1000021e 	bne	r2,zero,8112f644 <OSQPostFront+0x50>
        return (OS_ERR_EVENT_TYPE);
8112f63c:	00800044 	movi	r2,1
8112f640:	00004506 	br	8112f758 <OSQPostFront+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f644:	0005303a 	rdctl	r2,status
8112f648:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f64c:	e0fffd17 	ldw	r3,-12(fp)
8112f650:	00bfff84 	movi	r2,-2
8112f654:	1884703a 	and	r2,r3,r2
8112f658:	1001703a 	wrctl	status,r2
  
  return context;
8112f65c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112f660:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
8112f664:	e0bffe17 	ldw	r2,-8(fp)
8112f668:	10800283 	ldbu	r2,10(r2)
8112f66c:	10803fcc 	andi	r2,r2,255
8112f670:	10000c26 	beq	r2,zero,8112f6a4 <OSQPostFront+0xb0>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112f674:	000f883a 	mov	r7,zero
8112f678:	01800104 	movi	r6,4
8112f67c:	e17fff17 	ldw	r5,-4(fp)
8112f680:	e13ffe17 	ldw	r4,-8(fp)
8112f684:	112a6080 	call	8112a608 <OS_EventTaskRdy>
8112f688:	e0bff817 	ldw	r2,-32(fp)
8112f68c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f690:	e0bff917 	ldw	r2,-28(fp)
8112f694:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
8112f698:	112b0c40 	call	8112b0c4 <OS_Sched>
        return (OS_ERR_NONE);
8112f69c:	0005883a 	mov	r2,zero
8112f6a0:	00002d06 	br	8112f758 <OSQPostFront+0x164>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112f6a4:	e0bffe17 	ldw	r2,-8(fp)
8112f6a8:	10800117 	ldw	r2,4(r2)
8112f6ac:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112f6b0:	e0bffb17 	ldw	r2,-20(fp)
8112f6b4:	10c0058b 	ldhu	r3,22(r2)
8112f6b8:	e0bffb17 	ldw	r2,-20(fp)
8112f6bc:	1080050b 	ldhu	r2,20(r2)
8112f6c0:	18ffffcc 	andi	r3,r3,65535
8112f6c4:	10bfffcc 	andi	r2,r2,65535
8112f6c8:	18800636 	bltu	r3,r2,8112f6e4 <OSQPostFront+0xf0>
8112f6cc:	e0bff817 	ldw	r2,-32(fp)
8112f6d0:	e0bffa15 	stw	r2,-24(fp)
8112f6d4:	e0bffa17 	ldw	r2,-24(fp)
8112f6d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112f6dc:	00800784 	movi	r2,30
8112f6e0:	00001d06 	br	8112f758 <OSQPostFront+0x164>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
8112f6e4:	e0bffb17 	ldw	r2,-20(fp)
8112f6e8:	10c00417 	ldw	r3,16(r2)
8112f6ec:	e0bffb17 	ldw	r2,-20(fp)
8112f6f0:	10800117 	ldw	r2,4(r2)
8112f6f4:	1880041e 	bne	r3,r2,8112f708 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
8112f6f8:	e0bffb17 	ldw	r2,-20(fp)
8112f6fc:	10c00217 	ldw	r3,8(r2)
8112f700:	e0bffb17 	ldw	r2,-20(fp)
8112f704:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
8112f708:	e0bffb17 	ldw	r2,-20(fp)
8112f70c:	10800417 	ldw	r2,16(r2)
8112f710:	10ffff04 	addi	r3,r2,-4
8112f714:	e0bffb17 	ldw	r2,-20(fp)
8112f718:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
8112f71c:	e0bffb17 	ldw	r2,-20(fp)
8112f720:	10800417 	ldw	r2,16(r2)
8112f724:	e0ffff17 	ldw	r3,-4(fp)
8112f728:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112f72c:	e0bffb17 	ldw	r2,-20(fp)
8112f730:	1080058b 	ldhu	r2,22(r2)
8112f734:	10800044 	addi	r2,r2,1
8112f738:	1007883a 	mov	r3,r2
8112f73c:	e0bffb17 	ldw	r2,-20(fp)
8112f740:	10c0058d 	sth	r3,22(r2)
8112f744:	e0bff817 	ldw	r2,-32(fp)
8112f748:	e0bffc15 	stw	r2,-16(fp)
8112f74c:	e0bffc17 	ldw	r2,-16(fp)
8112f750:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112f754:	0005883a 	mov	r2,zero
}
8112f758:	e037883a 	mov	sp,fp
8112f75c:	dfc00117 	ldw	ra,4(sp)
8112f760:	df000017 	ldw	fp,0(sp)
8112f764:	dec00204 	addi	sp,sp,8
8112f768:	f800283a 	ret

8112f76c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
8112f76c:	defff504 	addi	sp,sp,-44
8112f770:	de00012e 	bgeu	sp,et,8112f778 <OSQPostOpt+0xc>
8112f774:	003b68fa 	trap	3
8112f778:	dfc00a15 	stw	ra,40(sp)
8112f77c:	df000915 	stw	fp,36(sp)
8112f780:	df000904 	addi	fp,sp,36
8112f784:	e13ffd15 	stw	r4,-12(fp)
8112f788:	e17ffe15 	stw	r5,-8(fp)
8112f78c:	3005883a 	mov	r2,r6
8112f790:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f794:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112f798:	e0bffd17 	ldw	r2,-12(fp)
8112f79c:	1000021e 	bne	r2,zero,8112f7a8 <OSQPostOpt+0x3c>
        return (OS_ERR_PEVENT_NULL);
8112f7a0:	00800104 	movi	r2,4
8112f7a4:	00007106 	br	8112f96c <OSQPostOpt+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112f7a8:	e0bffd17 	ldw	r2,-12(fp)
8112f7ac:	10800003 	ldbu	r2,0(r2)
8112f7b0:	10803fcc 	andi	r2,r2,255
8112f7b4:	108000a0 	cmpeqi	r2,r2,2
8112f7b8:	1000021e 	bne	r2,zero,8112f7c4 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
8112f7bc:	00800044 	movi	r2,1
8112f7c0:	00006a06 	br	8112f96c <OSQPostOpt+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f7c4:	0005303a 	rdctl	r2,status
8112f7c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f7cc:	e0fffc17 	ldw	r3,-16(fp)
8112f7d0:	00bfff84 	movi	r2,-2
8112f7d4:	1884703a 	and	r2,r3,r2
8112f7d8:	1001703a 	wrctl	status,r2
  
  return context;
8112f7dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112f7e0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
8112f7e4:	e0bffd17 	ldw	r2,-12(fp)
8112f7e8:	10800283 	ldbu	r2,10(r2)
8112f7ec:	10803fcc 	andi	r2,r2,255
8112f7f0:	10001d26 	beq	r2,zero,8112f868 <OSQPostOpt+0xfc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
8112f7f4:	e0bfff03 	ldbu	r2,-4(fp)
8112f7f8:	1080004c 	andi	r2,r2,1
8112f7fc:	10000b26 	beq	r2,zero,8112f82c <OSQPostOpt+0xc0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112f800:	00000506 	br	8112f818 <OSQPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112f804:	000f883a 	mov	r7,zero
8112f808:	01800104 	movi	r6,4
8112f80c:	e17ffe17 	ldw	r5,-8(fp)
8112f810:	e13ffd17 	ldw	r4,-12(fp)
8112f814:	112a6080 	call	8112a608 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112f818:	e0bffd17 	ldw	r2,-12(fp)
8112f81c:	10800283 	ldbu	r2,10(r2)
8112f820:	10803fcc 	andi	r2,r2,255
8112f824:	103ff71e 	bne	r2,zero,8112f804 <__reset+0xfb10f804>
8112f828:	00000506 	br	8112f840 <OSQPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112f82c:	000f883a 	mov	r7,zero
8112f830:	01800104 	movi	r6,4
8112f834:	e17ffe17 	ldw	r5,-8(fp)
8112f838:	e13ffd17 	ldw	r4,-12(fp)
8112f83c:	112a6080 	call	8112a608 <OS_EventTaskRdy>
8112f840:	e0bff717 	ldw	r2,-36(fp)
8112f844:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f848:	e0bff817 	ldw	r2,-32(fp)
8112f84c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
8112f850:	e0bfff03 	ldbu	r2,-4(fp)
8112f854:	1080010c 	andi	r2,r2,4
8112f858:	1000011e 	bne	r2,zero,8112f860 <OSQPostOpt+0xf4>
            OS_Sched();                               /* Find highest priority task ready to run       */
8112f85c:	112b0c40 	call	8112b0c4 <OS_Sched>
        }
        return (OS_ERR_NONE);
8112f860:	0005883a 	mov	r2,zero
8112f864:	00004106 	br	8112f96c <OSQPostOpt+0x200>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112f868:	e0bffd17 	ldw	r2,-12(fp)
8112f86c:	10800117 	ldw	r2,4(r2)
8112f870:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112f874:	e0bffa17 	ldw	r2,-24(fp)
8112f878:	10c0058b 	ldhu	r3,22(r2)
8112f87c:	e0bffa17 	ldw	r2,-24(fp)
8112f880:	1080050b 	ldhu	r2,20(r2)
8112f884:	18ffffcc 	andi	r3,r3,65535
8112f888:	10bfffcc 	andi	r2,r2,65535
8112f88c:	18800636 	bltu	r3,r2,8112f8a8 <OSQPostOpt+0x13c>
8112f890:	e0bff717 	ldw	r2,-36(fp)
8112f894:	e0bff915 	stw	r2,-28(fp)
8112f898:	e0bff917 	ldw	r2,-28(fp)
8112f89c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112f8a0:	00800784 	movi	r2,30
8112f8a4:	00003106 	br	8112f96c <OSQPostOpt+0x200>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8112f8a8:	e0bfff03 	ldbu	r2,-4(fp)
8112f8ac:	1080008c 	andi	r2,r2,2
8112f8b0:	10001326 	beq	r2,zero,8112f900 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
8112f8b4:	e0bffa17 	ldw	r2,-24(fp)
8112f8b8:	10c00417 	ldw	r3,16(r2)
8112f8bc:	e0bffa17 	ldw	r2,-24(fp)
8112f8c0:	10800117 	ldw	r2,4(r2)
8112f8c4:	1880041e 	bne	r3,r2,8112f8d8 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8112f8c8:	e0bffa17 	ldw	r2,-24(fp)
8112f8cc:	10c00217 	ldw	r3,8(r2)
8112f8d0:	e0bffa17 	ldw	r2,-24(fp)
8112f8d4:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8112f8d8:	e0bffa17 	ldw	r2,-24(fp)
8112f8dc:	10800417 	ldw	r2,16(r2)
8112f8e0:	10ffff04 	addi	r3,r2,-4
8112f8e4:	e0bffa17 	ldw	r2,-24(fp)
8112f8e8:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
8112f8ec:	e0bffa17 	ldw	r2,-24(fp)
8112f8f0:	10800417 	ldw	r2,16(r2)
8112f8f4:	e0fffe17 	ldw	r3,-8(fp)
8112f8f8:	10c00015 	stw	r3,0(r2)
8112f8fc:	00001006 	br	8112f940 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
8112f900:	e0bffa17 	ldw	r2,-24(fp)
8112f904:	10800317 	ldw	r2,12(r2)
8112f908:	11000104 	addi	r4,r2,4
8112f90c:	e0fffa17 	ldw	r3,-24(fp)
8112f910:	19000315 	stw	r4,12(r3)
8112f914:	e0fffe17 	ldw	r3,-8(fp)
8112f918:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
8112f91c:	e0bffa17 	ldw	r2,-24(fp)
8112f920:	10c00317 	ldw	r3,12(r2)
8112f924:	e0bffa17 	ldw	r2,-24(fp)
8112f928:	10800217 	ldw	r2,8(r2)
8112f92c:	1880041e 	bne	r3,r2,8112f940 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
8112f930:	e0bffa17 	ldw	r2,-24(fp)
8112f934:	10c00117 	ldw	r3,4(r2)
8112f938:	e0bffa17 	ldw	r2,-24(fp)
8112f93c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112f940:	e0bffa17 	ldw	r2,-24(fp)
8112f944:	1080058b 	ldhu	r2,22(r2)
8112f948:	10800044 	addi	r2,r2,1
8112f94c:	1007883a 	mov	r3,r2
8112f950:	e0bffa17 	ldw	r2,-24(fp)
8112f954:	10c0058d 	sth	r3,22(r2)
8112f958:	e0bff717 	ldw	r2,-36(fp)
8112f95c:	e0bffb15 	stw	r2,-20(fp)
8112f960:	e0bffb17 	ldw	r2,-20(fp)
8112f964:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112f968:	0005883a 	mov	r2,zero
}
8112f96c:	e037883a 	mov	sp,fp
8112f970:	dfc00117 	ldw	ra,4(sp)
8112f974:	df000017 	ldw	fp,0(sp)
8112f978:	dec00204 	addi	sp,sp,8
8112f97c:	f800283a 	ret

8112f980 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
8112f980:	defff604 	addi	sp,sp,-40
8112f984:	de00012e 	bgeu	sp,et,8112f98c <OSQQuery+0xc>
8112f988:	003b68fa 	trap	3
8112f98c:	df000915 	stw	fp,36(sp)
8112f990:	df000904 	addi	fp,sp,36
8112f994:	e13ffe15 	stw	r4,-8(fp)
8112f998:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112f99c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112f9a0:	e0bffe17 	ldw	r2,-8(fp)
8112f9a4:	1000021e 	bne	r2,zero,8112f9b0 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112f9a8:	00800104 	movi	r2,4
8112f9ac:	00004906 	br	8112fad4 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
8112f9b0:	e0bfff17 	ldw	r2,-4(fp)
8112f9b4:	1000021e 	bne	r2,zero,8112f9c0 <OSQQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112f9b8:	00800244 	movi	r2,9
8112f9bc:	00004506 	br	8112fad4 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112f9c0:	e0bffe17 	ldw	r2,-8(fp)
8112f9c4:	10800003 	ldbu	r2,0(r2)
8112f9c8:	10803fcc 	andi	r2,r2,255
8112f9cc:	108000a0 	cmpeqi	r2,r2,2
8112f9d0:	1000021e 	bne	r2,zero,8112f9dc <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112f9d4:	00800044 	movi	r2,1
8112f9d8:	00003e06 	br	8112fad4 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f9dc:	0005303a 	rdctl	r2,status
8112f9e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f9e4:	e0fffd17 	ldw	r3,-12(fp)
8112f9e8:	00bfff84 	movi	r2,-2
8112f9ec:	1884703a 	and	r2,r3,r2
8112f9f0:	1001703a 	wrctl	status,r2
  
  return context;
8112f9f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112f9f8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
8112f9fc:	e0bffe17 	ldw	r2,-8(fp)
8112fa00:	10c00283 	ldbu	r3,10(r2)
8112fa04:	e0bfff17 	ldw	r2,-4(fp)
8112fa08:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
8112fa0c:	e0bffe17 	ldw	r2,-8(fp)
8112fa10:	108002c4 	addi	r2,r2,11
8112fa14:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
8112fa18:	e0bfff17 	ldw	r2,-4(fp)
8112fa1c:	10800204 	addi	r2,r2,8
8112fa20:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112fa24:	e03ff705 	stb	zero,-36(fp)
8112fa28:	00000b06 	br	8112fa58 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
8112fa2c:	e0bff917 	ldw	r2,-28(fp)
8112fa30:	10c00044 	addi	r3,r2,1
8112fa34:	e0fff915 	stw	r3,-28(fp)
8112fa38:	e0fff817 	ldw	r3,-32(fp)
8112fa3c:	19000044 	addi	r4,r3,1
8112fa40:	e13ff815 	stw	r4,-32(fp)
8112fa44:	18c00003 	ldbu	r3,0(r3)
8112fa48:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112fa4c:	e0bff703 	ldbu	r2,-36(fp)
8112fa50:	10800044 	addi	r2,r2,1
8112fa54:	e0bff705 	stb	r2,-36(fp)
8112fa58:	e0bff703 	ldbu	r2,-36(fp)
8112fa5c:	108001b0 	cmpltui	r2,r2,6
8112fa60:	103ff21e 	bne	r2,zero,8112fa2c <__reset+0xfb10fa2c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
8112fa64:	e0bffe17 	ldw	r2,-8(fp)
8112fa68:	10800117 	ldw	r2,4(r2)
8112fa6c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
8112fa70:	e0bffc17 	ldw	r2,-16(fp)
8112fa74:	1080058b 	ldhu	r2,22(r2)
8112fa78:	10bfffcc 	andi	r2,r2,65535
8112fa7c:	10000626 	beq	r2,zero,8112fa98 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
8112fa80:	e0bffc17 	ldw	r2,-16(fp)
8112fa84:	10800417 	ldw	r2,16(r2)
8112fa88:	10c00017 	ldw	r3,0(r2)
8112fa8c:	e0bfff17 	ldw	r2,-4(fp)
8112fa90:	10c00015 	stw	r3,0(r2)
8112fa94:	00000206 	br	8112faa0 <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
8112fa98:	e0bfff17 	ldw	r2,-4(fp)
8112fa9c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
8112faa0:	e0bffc17 	ldw	r2,-16(fp)
8112faa4:	10c0058b 	ldhu	r3,22(r2)
8112faa8:	e0bfff17 	ldw	r2,-4(fp)
8112faac:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
8112fab0:	e0bffc17 	ldw	r2,-16(fp)
8112fab4:	10c0050b 	ldhu	r3,20(r2)
8112fab8:	e0bfff17 	ldw	r2,-4(fp)
8112fabc:	10c0018d 	sth	r3,6(r2)
8112fac0:	e0bffa17 	ldw	r2,-24(fp)
8112fac4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fac8:	e0bffb17 	ldw	r2,-20(fp)
8112facc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112fad0:	0005883a 	mov	r2,zero
}
8112fad4:	e037883a 	mov	sp,fp
8112fad8:	df000017 	ldw	fp,0(sp)
8112fadc:	dec00104 	addi	sp,sp,4
8112fae0:	f800283a 	ret

8112fae4 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
8112fae4:	defffb04 	addi	sp,sp,-20
8112fae8:	de00012e 	bgeu	sp,et,8112faf0 <OS_QInit+0xc>
8112faec:	003b68fa 	trap	3
8112faf0:	dfc00415 	stw	ra,16(sp)
8112faf4:	df000315 	stw	fp,12(sp)
8112faf8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
8112fafc:	01407804 	movi	r5,480
8112fb00:	01204574 	movhi	r4,33045
8112fb04:	21356104 	addi	r4,r4,-10876
8112fb08:	112aff80 	call	8112aff8 <OS_MemClr>
    pq1 = &OSQTbl[0];
8112fb0c:	00a04574 	movhi	r2,33045
8112fb10:	10b56104 	addi	r2,r2,-10876
8112fb14:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
8112fb18:	00a04574 	movhi	r2,33045
8112fb1c:	10b56704 	addi	r2,r2,-10852
8112fb20:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112fb24:	e03ffd0d 	sth	zero,-12(fp)
8112fb28:	00000c06 	br	8112fb5c <OS_QInit+0x78>
        pq1->OSQPtr = pq2;
8112fb2c:	e0bffe17 	ldw	r2,-8(fp)
8112fb30:	e0ffff17 	ldw	r3,-4(fp)
8112fb34:	10c00015 	stw	r3,0(r2)
        pq1++;
8112fb38:	e0bffe17 	ldw	r2,-8(fp)
8112fb3c:	10800604 	addi	r2,r2,24
8112fb40:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
8112fb44:	e0bfff17 	ldw	r2,-4(fp)
8112fb48:	10800604 	addi	r2,r2,24
8112fb4c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112fb50:	e0bffd0b 	ldhu	r2,-12(fp)
8112fb54:	10800044 	addi	r2,r2,1
8112fb58:	e0bffd0d 	sth	r2,-12(fp)
8112fb5c:	e0bffd0b 	ldhu	r2,-12(fp)
8112fb60:	108004f0 	cmpltui	r2,r2,19
8112fb64:	103ff11e 	bne	r2,zero,8112fb2c <__reset+0xfb10fb2c>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
8112fb68:	e0bffe17 	ldw	r2,-8(fp)
8112fb6c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
8112fb70:	00a04574 	movhi	r2,33045
8112fb74:	10b56104 	addi	r2,r2,-10876
8112fb78:	d0a08615 	stw	r2,-32232(gp)
#endif
}
8112fb7c:	0001883a 	nop
8112fb80:	e037883a 	mov	sp,fp
8112fb84:	dfc00117 	ldw	ra,4(sp)
8112fb88:	df000017 	ldw	fp,0(sp)
8112fb8c:	dec00204 	addi	sp,sp,8
8112fb90:	f800283a 	ret

8112fb94 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
8112fb94:	defffa04 	addi	sp,sp,-24
8112fb98:	de00012e 	bgeu	sp,et,8112fba0 <OSSemAccept+0xc>
8112fb9c:	003b68fa 	trap	3
8112fba0:	df000515 	stw	fp,20(sp)
8112fba4:	df000504 	addi	fp,sp,20
8112fba8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112fbac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112fbb0:	e0bfff17 	ldw	r2,-4(fp)
8112fbb4:	1000021e 	bne	r2,zero,8112fbc0 <OSSemAccept+0x2c>
        return (0);
8112fbb8:	0005883a 	mov	r2,zero
8112fbbc:	00001f06 	br	8112fc3c <OSSemAccept+0xa8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112fbc0:	e0bfff17 	ldw	r2,-4(fp)
8112fbc4:	10800003 	ldbu	r2,0(r2)
8112fbc8:	10803fcc 	andi	r2,r2,255
8112fbcc:	108000e0 	cmpeqi	r2,r2,3
8112fbd0:	1000021e 	bne	r2,zero,8112fbdc <OSSemAccept+0x48>
        return (0);
8112fbd4:	0005883a 	mov	r2,zero
8112fbd8:	00001806 	br	8112fc3c <OSSemAccept+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fbdc:	0005303a 	rdctl	r2,status
8112fbe0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fbe4:	e0fffe17 	ldw	r3,-8(fp)
8112fbe8:	00bfff84 	movi	r2,-2
8112fbec:	1884703a 	and	r2,r3,r2
8112fbf0:	1001703a 	wrctl	status,r2
  
  return context;
8112fbf4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112fbf8:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
8112fbfc:	e0bfff17 	ldw	r2,-4(fp)
8112fc00:	1080020b 	ldhu	r2,8(r2)
8112fc04:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
8112fc08:	e0bffd0b 	ldhu	r2,-12(fp)
8112fc0c:	10000626 	beq	r2,zero,8112fc28 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8112fc10:	e0bfff17 	ldw	r2,-4(fp)
8112fc14:	1080020b 	ldhu	r2,8(r2)
8112fc18:	10bfffc4 	addi	r2,r2,-1
8112fc1c:	1007883a 	mov	r3,r2
8112fc20:	e0bfff17 	ldw	r2,-4(fp)
8112fc24:	10c0020d 	sth	r3,8(r2)
8112fc28:	e0bffb17 	ldw	r2,-20(fp)
8112fc2c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fc30:	e0bffc17 	ldw	r2,-16(fp)
8112fc34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
8112fc38:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112fc3c:	e037883a 	mov	sp,fp
8112fc40:	df000017 	ldw	fp,0(sp)
8112fc44:	dec00104 	addi	sp,sp,4
8112fc48:	f800283a 	ret

8112fc4c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
8112fc4c:	defff904 	addi	sp,sp,-28
8112fc50:	de00012e 	bgeu	sp,et,8112fc58 <OSSemCreate+0xc>
8112fc54:	003b68fa 	trap	3
8112fc58:	dfc00615 	stw	ra,24(sp)
8112fc5c:	df000515 	stw	fp,20(sp)
8112fc60:	df000504 	addi	fp,sp,20
8112fc64:	2005883a 	mov	r2,r4
8112fc68:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112fc6c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112fc70:	d0a08a03 	ldbu	r2,-32216(gp)
8112fc74:	10803fcc 	andi	r2,r2,255
8112fc78:	10000226 	beq	r2,zero,8112fc84 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
8112fc7c:	0005883a 	mov	r2,zero
8112fc80:	00002506 	br	8112fd18 <OSSemCreate+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fc84:	0005303a 	rdctl	r2,status
8112fc88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fc8c:	e0fffe17 	ldw	r3,-8(fp)
8112fc90:	00bfff84 	movi	r2,-2
8112fc94:	1884703a 	and	r2,r3,r2
8112fc98:	1001703a 	wrctl	status,r2
  
  return context;
8112fc9c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112fca0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
8112fca4:	d0a08917 	ldw	r2,-32220(gp)
8112fca8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
8112fcac:	d0a08917 	ldw	r2,-32220(gp)
8112fcb0:	10000326 	beq	r2,zero,8112fcc0 <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112fcb4:	d0a08917 	ldw	r2,-32220(gp)
8112fcb8:	10800117 	ldw	r2,4(r2)
8112fcbc:	d0a08915 	stw	r2,-32220(gp)
8112fcc0:	e0bffb17 	ldw	r2,-20(fp)
8112fcc4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fcc8:	e0bffc17 	ldw	r2,-16(fp)
8112fccc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
8112fcd0:	e0bffd17 	ldw	r2,-12(fp)
8112fcd4:	10000f26 	beq	r2,zero,8112fd14 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
8112fcd8:	e0bffd17 	ldw	r2,-12(fp)
8112fcdc:	00c000c4 	movi	r3,3
8112fce0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
8112fce4:	e0bffd17 	ldw	r2,-12(fp)
8112fce8:	e0ffff0b 	ldhu	r3,-4(fp)
8112fcec:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
8112fcf0:	e0bffd17 	ldw	r2,-12(fp)
8112fcf4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
8112fcf8:	e0bffd17 	ldw	r2,-12(fp)
8112fcfc:	00c00fc4 	movi	r3,63
8112fd00:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
8112fd04:	e0bffd17 	ldw	r2,-12(fp)
8112fd08:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
8112fd0c:	e13ffd17 	ldw	r4,-12(fp)
8112fd10:	112abe00 	call	8112abe0 <OS_EventWaitListInit>
    }
    return (pevent);
8112fd14:	e0bffd17 	ldw	r2,-12(fp)
}
8112fd18:	e037883a 	mov	sp,fp
8112fd1c:	dfc00117 	ldw	ra,4(sp)
8112fd20:	df000017 	ldw	fp,0(sp)
8112fd24:	dec00204 	addi	sp,sp,8
8112fd28:	f800283a 	ret

8112fd2c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112fd2c:	defff304 	addi	sp,sp,-52
8112fd30:	de00012e 	bgeu	sp,et,8112fd38 <OSSemDel+0xc>
8112fd34:	003b68fa 	trap	3
8112fd38:	dfc00c15 	stw	ra,48(sp)
8112fd3c:	df000b15 	stw	fp,44(sp)
8112fd40:	df000b04 	addi	fp,sp,44
8112fd44:	e13ffd15 	stw	r4,-12(fp)
8112fd48:	2805883a 	mov	r2,r5
8112fd4c:	e1bfff15 	stw	r6,-4(fp)
8112fd50:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112fd54:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112fd58:	e0bfff17 	ldw	r2,-4(fp)
8112fd5c:	1000021e 	bne	r2,zero,8112fd68 <OSSemDel+0x3c>
        return (pevent);
8112fd60:	e0bffd17 	ldw	r2,-12(fp)
8112fd64:	00007e06 	br	8112ff60 <OSSemDel+0x234>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112fd68:	e0bffd17 	ldw	r2,-12(fp)
8112fd6c:	1000051e 	bne	r2,zero,8112fd84 <OSSemDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112fd70:	e0bfff17 	ldw	r2,-4(fp)
8112fd74:	00c00104 	movi	r3,4
8112fd78:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112fd7c:	e0bffd17 	ldw	r2,-12(fp)
8112fd80:	00007706 	br	8112ff60 <OSSemDel+0x234>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112fd84:	e0bffd17 	ldw	r2,-12(fp)
8112fd88:	10800003 	ldbu	r2,0(r2)
8112fd8c:	10803fcc 	andi	r2,r2,255
8112fd90:	108000e0 	cmpeqi	r2,r2,3
8112fd94:	1000051e 	bne	r2,zero,8112fdac <OSSemDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112fd98:	e0bfff17 	ldw	r2,-4(fp)
8112fd9c:	00c00044 	movi	r3,1
8112fda0:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112fda4:	e0bffd17 	ldw	r2,-12(fp)
8112fda8:	00006d06 	br	8112ff60 <OSSemDel+0x234>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112fdac:	d0a08a03 	ldbu	r2,-32216(gp)
8112fdb0:	10803fcc 	andi	r2,r2,255
8112fdb4:	10000526 	beq	r2,zero,8112fdcc <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112fdb8:	e0bfff17 	ldw	r2,-4(fp)
8112fdbc:	00c003c4 	movi	r3,15
8112fdc0:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112fdc4:	e0bffd17 	ldw	r2,-12(fp)
8112fdc8:	00006506 	br	8112ff60 <OSSemDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112fdcc:	0005303a 	rdctl	r2,status
8112fdd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112fdd4:	e0fffc17 	ldw	r3,-16(fp)
8112fdd8:	00bfff84 	movi	r2,-2
8112fddc:	1884703a 	and	r2,r3,r2
8112fde0:	1001703a 	wrctl	status,r2
  
  return context;
8112fde4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112fde8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
8112fdec:	e0bffd17 	ldw	r2,-12(fp)
8112fdf0:	10800283 	ldbu	r2,10(r2)
8112fdf4:	10803fcc 	andi	r2,r2,255
8112fdf8:	10000326 	beq	r2,zero,8112fe08 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112fdfc:	00800044 	movi	r2,1
8112fe00:	e0bff505 	stb	r2,-44(fp)
8112fe04:	00000106 	br	8112fe0c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112fe08:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
8112fe0c:	e0bffe03 	ldbu	r2,-8(fp)
8112fe10:	10000326 	beq	r2,zero,8112fe20 <OSSemDel+0xf4>
8112fe14:	10800060 	cmpeqi	r2,r2,1
8112fe18:	1000281e 	bne	r2,zero,8112febc <OSSemDel+0x190>
8112fe1c:	00004506 	br	8112ff34 <OSSemDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
8112fe20:	e0bff503 	ldbu	r2,-44(fp)
8112fe24:	1000161e 	bne	r2,zero,8112fe80 <OSSemDel+0x154>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112fe28:	e0bffd17 	ldw	r2,-12(fp)
8112fe2c:	00c00fc4 	movi	r3,63
8112fe30:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112fe34:	e0bffd17 	ldw	r2,-12(fp)
8112fe38:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112fe3c:	e0bffd17 	ldw	r2,-12(fp)
8112fe40:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112fe44:	d0e08917 	ldw	r3,-32220(gp)
8112fe48:	e0bffd17 	ldw	r2,-12(fp)
8112fe4c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112fe50:	e0bffd17 	ldw	r2,-12(fp)
8112fe54:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112fe58:	e0bffd17 	ldw	r2,-12(fp)
8112fe5c:	d0a08915 	stw	r2,-32220(gp)
8112fe60:	e0bff717 	ldw	r2,-36(fp)
8112fe64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112fe68:	e0bff817 	ldw	r2,-32(fp)
8112fe6c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112fe70:	e0bfff17 	ldw	r2,-4(fp)
8112fe74:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
8112fe78:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112fe7c:	00003706 	br	8112ff5c <OSSemDel+0x230>
8112fe80:	e0bff717 	ldw	r2,-36(fp)
8112fe84:	e0bff915 	stw	r2,-28(fp)
8112fe88:	e0bff917 	ldw	r2,-28(fp)
8112fe8c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112fe90:	e0bfff17 	ldw	r2,-4(fp)
8112fe94:	00c01244 	movi	r3,73
8112fe98:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112fe9c:	e0bffd17 	ldw	r2,-12(fp)
8112fea0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112fea4:	00002d06 	br	8112ff5c <OSSemDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112fea8:	000f883a 	mov	r7,zero
8112feac:	01800044 	movi	r6,1
8112feb0:	000b883a 	mov	r5,zero
8112feb4:	e13ffd17 	ldw	r4,-12(fp)
8112feb8:	112a6080 	call	8112a608 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
8112febc:	e0bffd17 	ldw	r2,-12(fp)
8112fec0:	10800283 	ldbu	r2,10(r2)
8112fec4:	10803fcc 	andi	r2,r2,255
8112fec8:	103ff71e 	bne	r2,zero,8112fea8 <__reset+0xfb10fea8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112fecc:	e0bffd17 	ldw	r2,-12(fp)
8112fed0:	00c00fc4 	movi	r3,63
8112fed4:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112fed8:	e0bffd17 	ldw	r2,-12(fp)
8112fedc:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112fee0:	e0bffd17 	ldw	r2,-12(fp)
8112fee4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112fee8:	d0e08917 	ldw	r3,-32220(gp)
8112feec:	e0bffd17 	ldw	r2,-12(fp)
8112fef0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112fef4:	e0bffd17 	ldw	r2,-12(fp)
8112fef8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112fefc:	e0bffd17 	ldw	r2,-12(fp)
8112ff00:	d0a08915 	stw	r2,-32220(gp)
8112ff04:	e0bff717 	ldw	r2,-36(fp)
8112ff08:	e0bffa15 	stw	r2,-24(fp)
8112ff0c:	e0bffa17 	ldw	r2,-24(fp)
8112ff10:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112ff14:	e0bff503 	ldbu	r2,-44(fp)
8112ff18:	10800058 	cmpnei	r2,r2,1
8112ff1c:	1000011e 	bne	r2,zero,8112ff24 <OSSemDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112ff20:	112b0c40 	call	8112b0c4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112ff24:	e0bfff17 	ldw	r2,-4(fp)
8112ff28:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
8112ff2c:	e03ff615 	stw	zero,-40(fp)
             break;
8112ff30:	00000a06 	br	8112ff5c <OSSemDel+0x230>
8112ff34:	e0bff717 	ldw	r2,-36(fp)
8112ff38:	e0bffb15 	stw	r2,-20(fp)
8112ff3c:	e0bffb17 	ldw	r2,-20(fp)
8112ff40:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112ff44:	e0bfff17 	ldw	r2,-4(fp)
8112ff48:	00c001c4 	movi	r3,7
8112ff4c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112ff50:	e0bffd17 	ldw	r2,-12(fp)
8112ff54:	e0bff615 	stw	r2,-40(fp)
             break;
8112ff58:	0001883a 	nop
    }
    return (pevent_return);
8112ff5c:	e0bff617 	ldw	r2,-40(fp)
}
8112ff60:	e037883a 	mov	sp,fp
8112ff64:	dfc00117 	ldw	ra,4(sp)
8112ff68:	df000017 	ldw	fp,0(sp)
8112ff6c:	dec00204 	addi	sp,sp,8
8112ff70:	f800283a 	ret

8112ff74 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112ff74:	defff504 	addi	sp,sp,-44
8112ff78:	de00012e 	bgeu	sp,et,8112ff80 <OSSemPend+0xc>
8112ff7c:	003b68fa 	trap	3
8112ff80:	dfc00a15 	stw	ra,40(sp)
8112ff84:	df000915 	stw	fp,36(sp)
8112ff88:	df000904 	addi	fp,sp,36
8112ff8c:	e13ffd15 	stw	r4,-12(fp)
8112ff90:	2805883a 	mov	r2,r5
8112ff94:	e1bfff15 	stw	r6,-4(fp)
8112ff98:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112ff9c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112ffa0:	e0bfff17 	ldw	r2,-4(fp)
8112ffa4:	10007226 	beq	r2,zero,81130170 <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112ffa8:	e0bffd17 	ldw	r2,-12(fp)
8112ffac:	1000041e 	bne	r2,zero,8112ffc0 <OSSemPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112ffb0:	e0bfff17 	ldw	r2,-4(fp)
8112ffb4:	00c00104 	movi	r3,4
8112ffb8:	10c00005 	stb	r3,0(r2)
        return;
8112ffbc:	00006d06 	br	81130174 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112ffc0:	e0bffd17 	ldw	r2,-12(fp)
8112ffc4:	10800003 	ldbu	r2,0(r2)
8112ffc8:	10803fcc 	andi	r2,r2,255
8112ffcc:	108000e0 	cmpeqi	r2,r2,3
8112ffd0:	1000041e 	bne	r2,zero,8112ffe4 <OSSemPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112ffd4:	e0bfff17 	ldw	r2,-4(fp)
8112ffd8:	00c00044 	movi	r3,1
8112ffdc:	10c00005 	stb	r3,0(r2)
        return;
8112ffe0:	00006406 	br	81130174 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112ffe4:	d0a08a03 	ldbu	r2,-32216(gp)
8112ffe8:	10803fcc 	andi	r2,r2,255
8112ffec:	10000426 	beq	r2,zero,81130000 <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
8112fff0:	e0bfff17 	ldw	r2,-4(fp)
8112fff4:	00c00084 	movi	r3,2
8112fff8:	10c00005 	stb	r3,0(r2)
        return;
8112fffc:	00005d06 	br	81130174 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
81130000:	d0a07803 	ldbu	r2,-32288(gp)
81130004:	10803fcc 	andi	r2,r2,255
81130008:	10000426 	beq	r2,zero,8113001c <OSSemPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
8113000c:	e0bfff17 	ldw	r2,-4(fp)
81130010:	00c00344 	movi	r3,13
81130014:	10c00005 	stb	r3,0(r2)
        return;
81130018:	00005606 	br	81130174 <OSSemPend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113001c:	0005303a 	rdctl	r2,status
81130020:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130024:	e0fffc17 	ldw	r3,-16(fp)
81130028:	00bfff84 	movi	r2,-2
8113002c:	1884703a 	and	r2,r3,r2
81130030:	1001703a 	wrctl	status,r2
  
  return context;
81130034:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130038:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
8113003c:	e0bffd17 	ldw	r2,-12(fp)
81130040:	1080020b 	ldhu	r2,8(r2)
81130044:	10bfffcc 	andi	r2,r2,65535
81130048:	10000d26 	beq	r2,zero,81130080 <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
8113004c:	e0bffd17 	ldw	r2,-12(fp)
81130050:	1080020b 	ldhu	r2,8(r2)
81130054:	10bfffc4 	addi	r2,r2,-1
81130058:	1007883a 	mov	r3,r2
8113005c:	e0bffd17 	ldw	r2,-12(fp)
81130060:	10c0020d 	sth	r3,8(r2)
81130064:	e0bff717 	ldw	r2,-36(fp)
81130068:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113006c:	e0bff817 	ldw	r2,-32(fp)
81130070:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
81130074:	e0bfff17 	ldw	r2,-4(fp)
81130078:	10000005 	stb	zero,0(r2)
        return;
8113007c:	00003d06 	br	81130174 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
81130080:	d0a08b17 	ldw	r2,-32212(gp)
81130084:	d0e08b17 	ldw	r3,-32212(gp)
81130088:	18c00c03 	ldbu	r3,48(r3)
8113008c:	18c00054 	ori	r3,r3,1
81130090:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81130094:	d0a08b17 	ldw	r2,-32212(gp)
81130098:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
8113009c:	d0a08b17 	ldw	r2,-32212(gp)
811300a0:	e0fffe0b 	ldhu	r3,-8(fp)
811300a4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
811300a8:	e13ffd17 	ldw	r4,-12(fp)
811300ac:	112a7a80 	call	8112a7a8 <OS_EventTaskWait>
811300b0:	e0bff717 	ldw	r2,-36(fp)
811300b4:	e0bffb15 	stw	r2,-20(fp)
811300b8:	e0bffb17 	ldw	r2,-20(fp)
811300bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
811300c0:	112b0c40 	call	8112b0c4 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811300c4:	0005303a 	rdctl	r2,status
811300c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811300cc:	e0fff917 	ldw	r3,-28(fp)
811300d0:	00bfff84 	movi	r2,-2
811300d4:	1884703a 	and	r2,r3,r2
811300d8:	1001703a 	wrctl	status,r2
  
  return context;
811300dc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
811300e0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
811300e4:	d0a08b17 	ldw	r2,-32212(gp)
811300e8:	10800c43 	ldbu	r2,49(r2)
811300ec:	10803fcc 	andi	r2,r2,255
811300f0:	10000326 	beq	r2,zero,81130100 <OSSemPend+0x18c>
811300f4:	108000a0 	cmpeqi	r2,r2,2
811300f8:	1000041e 	bne	r2,zero,8113010c <OSSemPend+0x198>
811300fc:	00000706 	br	8113011c <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81130100:	e0bfff17 	ldw	r2,-4(fp)
81130104:	10000005 	stb	zero,0(r2)
             break;
81130108:	00000c06 	br	8113013c <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8113010c:	e0bfff17 	ldw	r2,-4(fp)
81130110:	00c00384 	movi	r3,14
81130114:	10c00005 	stb	r3,0(r2)
             break;
81130118:	00000806 	br	8113013c <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
8113011c:	d0a08b17 	ldw	r2,-32212(gp)
81130120:	e17ffd17 	ldw	r5,-12(fp)
81130124:	1009883a 	mov	r4,r2
81130128:	112aa180 	call	8112aa18 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8113012c:	e0bfff17 	ldw	r2,-4(fp)
81130130:	00c00284 	movi	r3,10
81130134:	10c00005 	stb	r3,0(r2)
             break;
81130138:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8113013c:	d0a08b17 	ldw	r2,-32212(gp)
81130140:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81130144:	d0a08b17 	ldw	r2,-32212(gp)
81130148:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8113014c:	d0a08b17 	ldw	r2,-32212(gp)
81130150:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81130154:	d0a08b17 	ldw	r2,-32212(gp)
81130158:	10000815 	stw	zero,32(r2)
8113015c:	e0bff717 	ldw	r2,-36(fp)
81130160:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130164:	e0bffa17 	ldw	r2,-24(fp)
81130168:	1001703a 	wrctl	status,r2
8113016c:	00000106 	br	81130174 <OSSemPend+0x200>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
81130170:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
81130174:	e037883a 	mov	sp,fp
81130178:	dfc00117 	ldw	ra,4(sp)
8113017c:	df000017 	ldw	fp,0(sp)
81130180:	dec00204 	addi	sp,sp,8
81130184:	f800283a 	ret

81130188 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81130188:	defff604 	addi	sp,sp,-40
8113018c:	de00012e 	bgeu	sp,et,81130194 <OSSemPendAbort+0xc>
81130190:	003b68fa 	trap	3
81130194:	dfc00915 	stw	ra,36(sp)
81130198:	df000815 	stw	fp,32(sp)
8113019c:	df000804 	addi	fp,sp,32
811301a0:	e13ffd15 	stw	r4,-12(fp)
811301a4:	2805883a 	mov	r2,r5
811301a8:	e1bfff15 	stw	r6,-4(fp)
811301ac:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811301b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
811301b4:	e0bfff17 	ldw	r2,-4(fp)
811301b8:	1000021e 	bne	r2,zero,811301c4 <OSSemPendAbort+0x3c>
        return (0);
811301bc:	0005883a 	mov	r2,zero
811301c0:	00004906 	br	811302e8 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
811301c4:	e0bffd17 	ldw	r2,-12(fp)
811301c8:	1000051e 	bne	r2,zero,811301e0 <OSSemPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
811301cc:	e0bfff17 	ldw	r2,-4(fp)
811301d0:	00c00104 	movi	r3,4
811301d4:	10c00005 	stb	r3,0(r2)
        return (0);
811301d8:	0005883a 	mov	r2,zero
811301dc:	00004206 	br	811302e8 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
811301e0:	e0bffd17 	ldw	r2,-12(fp)
811301e4:	10800003 	ldbu	r2,0(r2)
811301e8:	10803fcc 	andi	r2,r2,255
811301ec:	108000e0 	cmpeqi	r2,r2,3
811301f0:	1000051e 	bne	r2,zero,81130208 <OSSemPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
811301f4:	e0bfff17 	ldw	r2,-4(fp)
811301f8:	00c00044 	movi	r3,1
811301fc:	10c00005 	stb	r3,0(r2)
        return (0);
81130200:	0005883a 	mov	r2,zero
81130204:	00003806 	br	811302e8 <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130208:	0005303a 	rdctl	r2,status
8113020c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130210:	e0fffc17 	ldw	r3,-16(fp)
81130214:	00bfff84 	movi	r2,-2
81130218:	1884703a 	and	r2,r3,r2
8113021c:	1001703a 	wrctl	status,r2
  
  return context;
81130220:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81130224:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
81130228:	e0bffd17 	ldw	r2,-12(fp)
8113022c:	10800283 	ldbu	r2,10(r2)
81130230:	10803fcc 	andi	r2,r2,255
81130234:	10002526 	beq	r2,zero,811302cc <OSSemPendAbort+0x144>
        nbr_tasks = 0;
81130238:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8113023c:	e0bffe03 	ldbu	r2,-8(fp)
81130240:	10800060 	cmpeqi	r2,r2,1
81130244:	10000e26 	beq	r2,zero,81130280 <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
81130248:	00000806 	br	8113026c <OSSemPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8113024c:	01c00084 	movi	r7,2
81130250:	01800044 	movi	r6,1
81130254:	000b883a 	mov	r5,zero
81130258:	e13ffd17 	ldw	r4,-12(fp)
8113025c:	112a6080 	call	8112a608 <OS_EventTaskRdy>
                     nbr_tasks++;
81130260:	e0bff803 	ldbu	r2,-32(fp)
81130264:	10800044 	addi	r2,r2,1
81130268:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8113026c:	e0bffd17 	ldw	r2,-12(fp)
81130270:	10800283 	ldbu	r2,10(r2)
81130274:	10803fcc 	andi	r2,r2,255
81130278:	103ff41e 	bne	r2,zero,8113024c <__reset+0xfb11024c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8113027c:	00000906 	br	811302a4 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
81130280:	01c00084 	movi	r7,2
81130284:	01800044 	movi	r6,1
81130288:	000b883a 	mov	r5,zero
8113028c:	e13ffd17 	ldw	r4,-12(fp)
81130290:	112a6080 	call	8112a608 <OS_EventTaskRdy>
                 nbr_tasks++;
81130294:	e0bff803 	ldbu	r2,-32(fp)
81130298:	10800044 	addi	r2,r2,1
8113029c:	e0bff805 	stb	r2,-32(fp)
                 break;
811302a0:	0001883a 	nop
811302a4:	e0bff917 	ldw	r2,-28(fp)
811302a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811302ac:	e0bffa17 	ldw	r2,-24(fp)
811302b0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
811302b4:	112b0c40 	call	8112b0c4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
811302b8:	e0bfff17 	ldw	r2,-4(fp)
811302bc:	00c00384 	movi	r3,14
811302c0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
811302c4:	e0bff803 	ldbu	r2,-32(fp)
811302c8:	00000706 	br	811302e8 <OSSemPendAbort+0x160>
811302cc:	e0bff917 	ldw	r2,-28(fp)
811302d0:	e0bffb15 	stw	r2,-20(fp)
811302d4:	e0bffb17 	ldw	r2,-20(fp)
811302d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811302dc:	e0bfff17 	ldw	r2,-4(fp)
811302e0:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
811302e4:	0005883a 	mov	r2,zero
}
811302e8:	e037883a 	mov	sp,fp
811302ec:	dfc00117 	ldw	ra,4(sp)
811302f0:	df000017 	ldw	fp,0(sp)
811302f4:	dec00204 	addi	sp,sp,8
811302f8:	f800283a 	ret

811302fc <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
811302fc:	defff804 	addi	sp,sp,-32
81130300:	de00012e 	bgeu	sp,et,81130308 <OSSemPost+0xc>
81130304:	003b68fa 	trap	3
81130308:	dfc00715 	stw	ra,28(sp)
8113030c:	df000615 	stw	fp,24(sp)
81130310:	df000604 	addi	fp,sp,24
81130314:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130318:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8113031c:	e0bfff17 	ldw	r2,-4(fp)
81130320:	1000021e 	bne	r2,zero,8113032c <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
81130324:	00800104 	movi	r2,4
81130328:	00003506 	br	81130400 <OSSemPost+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8113032c:	e0bfff17 	ldw	r2,-4(fp)
81130330:	10800003 	ldbu	r2,0(r2)
81130334:	10803fcc 	andi	r2,r2,255
81130338:	108000e0 	cmpeqi	r2,r2,3
8113033c:	1000021e 	bne	r2,zero,81130348 <OSSemPost+0x4c>
        return (OS_ERR_EVENT_TYPE);
81130340:	00800044 	movi	r2,1
81130344:	00002e06 	br	81130400 <OSSemPost+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130348:	0005303a 	rdctl	r2,status
8113034c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130350:	e0fffe17 	ldw	r3,-8(fp)
81130354:	00bfff84 	movi	r2,-2
81130358:	1884703a 	and	r2,r3,r2
8113035c:	1001703a 	wrctl	status,r2
  
  return context;
81130360:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81130364:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
81130368:	e0bfff17 	ldw	r2,-4(fp)
8113036c:	10800283 	ldbu	r2,10(r2)
81130370:	10803fcc 	andi	r2,r2,255
81130374:	10000c26 	beq	r2,zero,811303a8 <OSSemPost+0xac>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
81130378:	000f883a 	mov	r7,zero
8113037c:	01800044 	movi	r6,1
81130380:	000b883a 	mov	r5,zero
81130384:	e13fff17 	ldw	r4,-4(fp)
81130388:	112a6080 	call	8112a608 <OS_EventTaskRdy>
8113038c:	e0bffa17 	ldw	r2,-24(fp)
81130390:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130394:	e0bffb17 	ldw	r2,-20(fp)
81130398:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8113039c:	112b0c40 	call	8112b0c4 <OS_Sched>
        return (OS_ERR_NONE);
811303a0:	0005883a 	mov	r2,zero
811303a4:	00001606 	br	81130400 <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
811303a8:	e0bfff17 	ldw	r2,-4(fp)
811303ac:	1080020b 	ldhu	r2,8(r2)
811303b0:	10ffffcc 	andi	r3,r2,65535
811303b4:	00bfffd4 	movui	r2,65535
811303b8:	18800c26 	beq	r3,r2,811303ec <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
811303bc:	e0bfff17 	ldw	r2,-4(fp)
811303c0:	1080020b 	ldhu	r2,8(r2)
811303c4:	10800044 	addi	r2,r2,1
811303c8:	1007883a 	mov	r3,r2
811303cc:	e0bfff17 	ldw	r2,-4(fp)
811303d0:	10c0020d 	sth	r3,8(r2)
811303d4:	e0bffa17 	ldw	r2,-24(fp)
811303d8:	e0bffc15 	stw	r2,-16(fp)
811303dc:	e0bffc17 	ldw	r2,-16(fp)
811303e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
811303e4:	0005883a 	mov	r2,zero
811303e8:	00000506 	br	81130400 <OSSemPost+0x104>
811303ec:	e0bffa17 	ldw	r2,-24(fp)
811303f0:	e0bffd15 	stw	r2,-12(fp)
811303f4:	e0bffd17 	ldw	r2,-12(fp)
811303f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
811303fc:	00800c84 	movi	r2,50
}
81130400:	e037883a 	mov	sp,fp
81130404:	dfc00117 	ldw	ra,4(sp)
81130408:	df000017 	ldw	fp,0(sp)
8113040c:	dec00204 	addi	sp,sp,8
81130410:	f800283a 	ret

81130414 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
81130414:	defff704 	addi	sp,sp,-36
81130418:	de00012e 	bgeu	sp,et,81130420 <OSSemQuery+0xc>
8113041c:	003b68fa 	trap	3
81130420:	df000815 	stw	fp,32(sp)
81130424:	df000804 	addi	fp,sp,32
81130428:	e13ffe15 	stw	r4,-8(fp)
8113042c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81130430:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81130434:	e0bffe17 	ldw	r2,-8(fp)
81130438:	1000021e 	bne	r2,zero,81130444 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8113043c:	00800104 	movi	r2,4
81130440:	00003606 	br	8113051c <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
81130444:	e0bfff17 	ldw	r2,-4(fp)
81130448:	1000021e 	bne	r2,zero,81130454 <OSSemQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8113044c:	00800244 	movi	r2,9
81130450:	00003206 	br	8113051c <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
81130454:	e0bffe17 	ldw	r2,-8(fp)
81130458:	10800003 	ldbu	r2,0(r2)
8113045c:	10803fcc 	andi	r2,r2,255
81130460:	108000e0 	cmpeqi	r2,r2,3
81130464:	1000021e 	bne	r2,zero,81130470 <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
81130468:	00800044 	movi	r2,1
8113046c:	00002b06 	br	8113051c <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130470:	0005303a 	rdctl	r2,status
81130474:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130478:	e0fffd17 	ldw	r3,-12(fp)
8113047c:	00bfff84 	movi	r2,-2
81130480:	1884703a 	and	r2,r3,r2
81130484:	1001703a 	wrctl	status,r2
  
  return context;
81130488:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8113048c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
81130490:	e0bffe17 	ldw	r2,-8(fp)
81130494:	10c00283 	ldbu	r3,10(r2)
81130498:	e0bfff17 	ldw	r2,-4(fp)
8113049c:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
811304a0:	e0bffe17 	ldw	r2,-8(fp)
811304a4:	108002c4 	addi	r2,r2,11
811304a8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
811304ac:	e0bfff17 	ldw	r2,-4(fp)
811304b0:	10800084 	addi	r2,r2,2
811304b4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811304b8:	e03ffa05 	stb	zero,-24(fp)
811304bc:	00000b06 	br	811304ec <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
811304c0:	e0bff917 	ldw	r2,-28(fp)
811304c4:	10c00044 	addi	r3,r2,1
811304c8:	e0fff915 	stw	r3,-28(fp)
811304cc:	e0fff817 	ldw	r3,-32(fp)
811304d0:	19000044 	addi	r4,r3,1
811304d4:	e13ff815 	stw	r4,-32(fp)
811304d8:	18c00003 	ldbu	r3,0(r3)
811304dc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811304e0:	e0bffa03 	ldbu	r2,-24(fp)
811304e4:	10800044 	addi	r2,r2,1
811304e8:	e0bffa05 	stb	r2,-24(fp)
811304ec:	e0bffa03 	ldbu	r2,-24(fp)
811304f0:	108001b0 	cmpltui	r2,r2,6
811304f4:	103ff21e 	bne	r2,zero,811304c0 <__reset+0xfb1104c0>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
811304f8:	e0bffe17 	ldw	r2,-8(fp)
811304fc:	10c0020b 	ldhu	r3,8(r2)
81130500:	e0bfff17 	ldw	r2,-4(fp)
81130504:	10c0000d 	sth	r3,0(r2)
81130508:	e0bffb17 	ldw	r2,-20(fp)
8113050c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130510:	e0bffc17 	ldw	r2,-16(fp)
81130514:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81130518:	0005883a 	mov	r2,zero
}
8113051c:	e037883a 	mov	sp,fp
81130520:	df000017 	ldw	fp,0(sp)
81130524:	dec00104 	addi	sp,sp,4
81130528:	f800283a 	ret

8113052c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
8113052c:	defff904 	addi	sp,sp,-28
81130530:	de00012e 	bgeu	sp,et,81130538 <OSSemSet+0xc>
81130534:	003b68fa 	trap	3
81130538:	df000615 	stw	fp,24(sp)
8113053c:	df000604 	addi	fp,sp,24
81130540:	e13ffd15 	stw	r4,-12(fp)
81130544:	2805883a 	mov	r2,r5
81130548:	e1bfff15 	stw	r6,-4(fp)
8113054c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81130550:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81130554:	e0bfff17 	ldw	r2,-4(fp)
81130558:	10003126 	beq	r2,zero,81130620 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8113055c:	e0bffd17 	ldw	r2,-12(fp)
81130560:	1000041e 	bne	r2,zero,81130574 <OSSemSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
81130564:	e0bfff17 	ldw	r2,-4(fp)
81130568:	00c00104 	movi	r3,4
8113056c:	10c00005 	stb	r3,0(r2)
        return;
81130570:	00002c06 	br	81130624 <OSSemSet+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81130574:	e0bffd17 	ldw	r2,-12(fp)
81130578:	10800003 	ldbu	r2,0(r2)
8113057c:	10803fcc 	andi	r2,r2,255
81130580:	108000e0 	cmpeqi	r2,r2,3
81130584:	1000041e 	bne	r2,zero,81130598 <OSSemSet+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
81130588:	e0bfff17 	ldw	r2,-4(fp)
8113058c:	00c00044 	movi	r3,1
81130590:	10c00005 	stb	r3,0(r2)
        return;
81130594:	00002306 	br	81130624 <OSSemSet+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130598:	0005303a 	rdctl	r2,status
8113059c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811305a0:	e0fffc17 	ldw	r3,-16(fp)
811305a4:	00bfff84 	movi	r2,-2
811305a8:	1884703a 	and	r2,r3,r2
811305ac:	1001703a 	wrctl	status,r2
  
  return context;
811305b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811305b4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
811305b8:	e0bfff17 	ldw	r2,-4(fp)
811305bc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
811305c0:	e0bffd17 	ldw	r2,-12(fp)
811305c4:	1080020b 	ldhu	r2,8(r2)
811305c8:	10bfffcc 	andi	r2,r2,65535
811305cc:	10000426 	beq	r2,zero,811305e0 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
811305d0:	e0bffd17 	ldw	r2,-12(fp)
811305d4:	e0fffe0b 	ldhu	r3,-8(fp)
811305d8:	10c0020d 	sth	r3,8(r2)
811305dc:	00000b06 	br	8113060c <OSSemSet+0xe0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
811305e0:	e0bffd17 	ldw	r2,-12(fp)
811305e4:	10800283 	ldbu	r2,10(r2)
811305e8:	10803fcc 	andi	r2,r2,255
811305ec:	1000041e 	bne	r2,zero,81130600 <OSSemSet+0xd4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
811305f0:	e0bffd17 	ldw	r2,-12(fp)
811305f4:	e0fffe0b 	ldhu	r3,-8(fp)
811305f8:	10c0020d 	sth	r3,8(r2)
811305fc:	00000306 	br	8113060c <OSSemSet+0xe0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
81130600:	e0bfff17 	ldw	r2,-4(fp)
81130604:	00c01244 	movi	r3,73
81130608:	10c00005 	stb	r3,0(r2)
8113060c:	e0bffa17 	ldw	r2,-24(fp)
81130610:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130614:	e0bffb17 	ldw	r2,-20(fp)
81130618:	1001703a 	wrctl	status,r2
8113061c:	00000106 	br	81130624 <OSSemSet+0xf8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
81130620:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
81130624:	e037883a 	mov	sp,fp
81130628:	df000017 	ldw	fp,0(sp)
8113062c:	dec00104 	addi	sp,sp,4
81130630:	f800283a 	ret

81130634 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
81130634:	defff104 	addi	sp,sp,-60
81130638:	de00012e 	bgeu	sp,et,81130640 <OSTaskChangePrio+0xc>
8113063c:	003b68fa 	trap	3
81130640:	dfc00e15 	stw	ra,56(sp)
81130644:	df000d15 	stw	fp,52(sp)
81130648:	df000d04 	addi	fp,sp,52
8113064c:	2007883a 	mov	r3,r4
81130650:	2805883a 	mov	r2,r5
81130654:	e0fffe05 	stb	r3,-8(fp)
81130658:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
8113065c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
81130660:	e0bffe03 	ldbu	r2,-8(fp)
81130664:	10800a30 	cmpltui	r2,r2,40
81130668:	1000051e 	bne	r2,zero,81130680 <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
8113066c:	e0bffe03 	ldbu	r2,-8(fp)
81130670:	10803fe0 	cmpeqi	r2,r2,255
81130674:	1000021e 	bne	r2,zero,81130680 <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
81130678:	00800a84 	movi	r2,42
8113067c:	00012606 	br	81130b18 <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
81130680:	e0bfff03 	ldbu	r2,-4(fp)
81130684:	10800a30 	cmpltui	r2,r2,40
81130688:	1000021e 	bne	r2,zero,81130694 <OSTaskChangePrio+0x60>
        return (OS_ERR_PRIO_INVALID);
8113068c:	00800a84 	movi	r2,42
81130690:	00012106 	br	81130b18 <OSTaskChangePrio+0x4e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130694:	0005303a 	rdctl	r2,status
81130698:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113069c:	e0fffd17 	ldw	r3,-12(fp)
811306a0:	00bfff84 	movi	r2,-2
811306a4:	1884703a 	and	r2,r3,r2
811306a8:	1001703a 	wrctl	status,r2
  
  return context;
811306ac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811306b0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
811306b4:	e0ffff03 	ldbu	r3,-4(fp)
811306b8:	00a04574 	movhi	r2,33045
811306bc:	10807b04 	addi	r2,r2,492
811306c0:	18c7883a 	add	r3,r3,r3
811306c4:	18c7883a 	add	r3,r3,r3
811306c8:	10c5883a 	add	r2,r2,r3
811306cc:	10800017 	ldw	r2,0(r2)
811306d0:	10000626 	beq	r2,zero,811306ec <OSTaskChangePrio+0xb8>
811306d4:	e0bff517 	ldw	r2,-44(fp)
811306d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811306dc:	e0bff617 	ldw	r2,-40(fp)
811306e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
811306e4:	00800a04 	movi	r2,40
811306e8:	00010b06 	br	81130b18 <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
811306ec:	e0bffe03 	ldbu	r2,-8(fp)
811306f0:	10803fd8 	cmpnei	r2,r2,255
811306f4:	1000031e 	bne	r2,zero,81130704 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
811306f8:	d0a08b17 	ldw	r2,-32212(gp)
811306fc:	10800c83 	ldbu	r2,50(r2)
81130700:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
81130704:	e0fffe03 	ldbu	r3,-8(fp)
81130708:	00a04574 	movhi	r2,33045
8113070c:	10807b04 	addi	r2,r2,492
81130710:	18c7883a 	add	r3,r3,r3
81130714:	18c7883a 	add	r3,r3,r3
81130718:	10c5883a 	add	r2,r2,r3
8113071c:	10800017 	ldw	r2,0(r2)
81130720:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
81130724:	e0bff817 	ldw	r2,-32(fp)
81130728:	1000061e 	bne	r2,zero,81130744 <OSTaskChangePrio+0x110>
8113072c:	e0bff517 	ldw	r2,-44(fp)
81130730:	e0bff715 	stw	r2,-36(fp)
81130734:	e0bff717 	ldw	r2,-36(fp)
81130738:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
8113073c:	00800a44 	movi	r2,41
81130740:	0000f506 	br	81130b18 <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
81130744:	e0bff817 	ldw	r2,-32(fp)
81130748:	10800058 	cmpnei	r2,r2,1
8113074c:	1000061e 	bne	r2,zero,81130768 <OSTaskChangePrio+0x134>
81130750:	e0bff517 	ldw	r2,-44(fp)
81130754:	e0bff915 	stw	r2,-28(fp)
81130758:	e0bff917 	ldw	r2,-28(fp)
8113075c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
81130760:	008010c4 	movi	r2,67
81130764:	0000ec06 	br	81130b18 <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
81130768:	e0bfff03 	ldbu	r2,-4(fp)
8113076c:	1004d0fa 	srli	r2,r2,3
81130770:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
81130774:	e0bfff03 	ldbu	r2,-4(fp)
81130778:	108001cc 	andi	r2,r2,7
8113077c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
81130780:	e0bffb03 	ldbu	r2,-20(fp)
81130784:	00c00044 	movi	r3,1
81130788:	1884983a 	sll	r2,r3,r2
8113078c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
81130790:	e0bffb43 	ldbu	r2,-19(fp)
81130794:	00c00044 	movi	r3,1
81130798:	1884983a 	sll	r2,r3,r2
8113079c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
811307a0:	e0fffe03 	ldbu	r3,-8(fp)
811307a4:	00a04574 	movhi	r2,33045
811307a8:	10807b04 	addi	r2,r2,492
811307ac:	18c7883a 	add	r3,r3,r3
811307b0:	18c7883a 	add	r3,r3,r3
811307b4:	10c5883a 	add	r2,r2,r3
811307b8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
811307bc:	e0ffff03 	ldbu	r3,-4(fp)
811307c0:	00a04574 	movhi	r2,33045
811307c4:	10807b04 	addi	r2,r2,492
811307c8:	18c7883a 	add	r3,r3,r3
811307cc:	18c7883a 	add	r3,r3,r3
811307d0:	10c5883a 	add	r2,r2,r3
811307d4:	e0fff817 	ldw	r3,-32(fp)
811307d8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
811307dc:	e0bff817 	ldw	r2,-32(fp)
811307e0:	10800d03 	ldbu	r2,52(r2)
811307e4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
811307e8:	e0bff817 	ldw	r2,-32(fp)
811307ec:	10800d83 	ldbu	r2,54(r2)
811307f0:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
811307f4:	e0bff817 	ldw	r2,-32(fp)
811307f8:	10800d43 	ldbu	r2,53(r2)
811307fc:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
81130800:	e0fffc03 	ldbu	r3,-16(fp)
81130804:	d0a08744 	addi	r2,gp,-32227
81130808:	1885883a 	add	r2,r3,r2
8113080c:	10c00003 	ldbu	r3,0(r2)
81130810:	e0bffc83 	ldbu	r2,-14(fp)
81130814:	1884703a 	and	r2,r3,r2
81130818:	10803fcc 	andi	r2,r2,255
8113081c:	10002826 	beq	r2,zero,811308c0 <OSTaskChangePrio+0x28c>
         OSRdyTbl[y_old] &= ~bitx_old;
81130820:	e0fffc03 	ldbu	r3,-16(fp)
81130824:	e13ffc03 	ldbu	r4,-16(fp)
81130828:	d0a08744 	addi	r2,gp,-32227
8113082c:	2085883a 	add	r2,r4,r2
81130830:	10800003 	ldbu	r2,0(r2)
81130834:	1009883a 	mov	r4,r2
81130838:	e0bffc83 	ldbu	r2,-14(fp)
8113083c:	0084303a 	nor	r2,zero,r2
81130840:	2084703a 	and	r2,r4,r2
81130844:	1009883a 	mov	r4,r2
81130848:	d0a08744 	addi	r2,gp,-32227
8113084c:	1885883a 	add	r2,r3,r2
81130850:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
81130854:	e0fffc03 	ldbu	r3,-16(fp)
81130858:	d0a08744 	addi	r2,gp,-32227
8113085c:	1885883a 	add	r2,r3,r2
81130860:	10800003 	ldbu	r2,0(r2)
81130864:	10803fcc 	andi	r2,r2,255
81130868:	1000061e 	bne	r2,zero,81130884 <OSTaskChangePrio+0x250>
             OSRdyGrp &= ~bity_old;
8113086c:	e0bffc43 	ldbu	r2,-15(fp)
81130870:	0084303a 	nor	r2,zero,r2
81130874:	1007883a 	mov	r3,r2
81130878:	d0a08703 	ldbu	r2,-32228(gp)
8113087c:	1884703a 	and	r2,r3,r2
81130880:	d0a08705 	stb	r2,-32228(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
81130884:	d0e08703 	ldbu	r3,-32228(gp)
81130888:	e0bffb83 	ldbu	r2,-18(fp)
8113088c:	1884b03a 	or	r2,r3,r2
81130890:	d0a08705 	stb	r2,-32228(gp)
         OSRdyTbl[y_new] |= bitx_new;
81130894:	e0fffb03 	ldbu	r3,-20(fp)
81130898:	e13ffb03 	ldbu	r4,-20(fp)
8113089c:	d0a08744 	addi	r2,gp,-32227
811308a0:	2085883a 	add	r2,r4,r2
811308a4:	11000003 	ldbu	r4,0(r2)
811308a8:	e0bffbc3 	ldbu	r2,-17(fp)
811308ac:	2084b03a 	or	r2,r4,r2
811308b0:	1009883a 	mov	r4,r2
811308b4:	d0a08744 	addi	r2,gp,-32227
811308b8:	1885883a 	add	r2,r3,r2
811308bc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
811308c0:	e0bff817 	ldw	r2,-32(fp)
811308c4:	10800717 	ldw	r2,28(r2)
811308c8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
811308cc:	e0bff317 	ldw	r2,-52(fp)
811308d0:	10003326 	beq	r2,zero,811309a0 <OSTaskChangePrio+0x36c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
811308d4:	e0bffc03 	ldbu	r2,-16(fp)
811308d8:	e0fffc03 	ldbu	r3,-16(fp)
811308dc:	e13ff317 	ldw	r4,-52(fp)
811308e0:	20c7883a 	add	r3,r4,r3
811308e4:	18c002c4 	addi	r3,r3,11
811308e8:	18c00003 	ldbu	r3,0(r3)
811308ec:	1809883a 	mov	r4,r3
811308f0:	e0fffc83 	ldbu	r3,-14(fp)
811308f4:	00c6303a 	nor	r3,zero,r3
811308f8:	20c6703a 	and	r3,r4,r3
811308fc:	1809883a 	mov	r4,r3
81130900:	e0fff317 	ldw	r3,-52(fp)
81130904:	1885883a 	add	r2,r3,r2
81130908:	108002c4 	addi	r2,r2,11
8113090c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
81130910:	e0bffc03 	ldbu	r2,-16(fp)
81130914:	e0fff317 	ldw	r3,-52(fp)
81130918:	1885883a 	add	r2,r3,r2
8113091c:	108002c4 	addi	r2,r2,11
81130920:	10800003 	ldbu	r2,0(r2)
81130924:	10803fcc 	andi	r2,r2,255
81130928:	1000091e 	bne	r2,zero,81130950 <OSTaskChangePrio+0x31c>
            pevent->OSEventGrp    &= ~bity_old;
8113092c:	e0bff317 	ldw	r2,-52(fp)
81130930:	10800283 	ldbu	r2,10(r2)
81130934:	1007883a 	mov	r3,r2
81130938:	e0bffc43 	ldbu	r2,-15(fp)
8113093c:	0084303a 	nor	r2,zero,r2
81130940:	1884703a 	and	r2,r3,r2
81130944:	1007883a 	mov	r3,r2
81130948:	e0bff317 	ldw	r2,-52(fp)
8113094c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
81130950:	e0bff317 	ldw	r2,-52(fp)
81130954:	10c00283 	ldbu	r3,10(r2)
81130958:	e0bffb83 	ldbu	r2,-18(fp)
8113095c:	1884b03a 	or	r2,r3,r2
81130960:	1007883a 	mov	r3,r2
81130964:	e0bff317 	ldw	r2,-52(fp)
81130968:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
8113096c:	e0bffb03 	ldbu	r2,-20(fp)
81130970:	e0fffb03 	ldbu	r3,-20(fp)
81130974:	e13ff317 	ldw	r4,-52(fp)
81130978:	20c7883a 	add	r3,r4,r3
8113097c:	18c002c4 	addi	r3,r3,11
81130980:	19000003 	ldbu	r4,0(r3)
81130984:	e0fffbc3 	ldbu	r3,-17(fp)
81130988:	20c6b03a 	or	r3,r4,r3
8113098c:	1809883a 	mov	r4,r3
81130990:	e0fff317 	ldw	r3,-52(fp)
81130994:	1885883a 	add	r2,r3,r2
81130998:	108002c4 	addi	r2,r2,11
8113099c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
811309a0:	e0bff817 	ldw	r2,-32(fp)
811309a4:	10800817 	ldw	r2,32(r2)
811309a8:	10004226 	beq	r2,zero,81130ab4 <OSTaskChangePrio+0x480>
        pevents =  ptcb->OSTCBEventMultiPtr;
811309ac:	e0bff817 	ldw	r2,-32(fp)
811309b0:	10800817 	ldw	r2,32(r2)
811309b4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
811309b8:	e0bff417 	ldw	r2,-48(fp)
811309bc:	10800017 	ldw	r2,0(r2)
811309c0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
811309c4:	00003906 	br	81130aac <OSTaskChangePrio+0x478>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
811309c8:	e0bffc03 	ldbu	r2,-16(fp)
811309cc:	e0fffc03 	ldbu	r3,-16(fp)
811309d0:	e13ff317 	ldw	r4,-52(fp)
811309d4:	20c7883a 	add	r3,r4,r3
811309d8:	18c002c4 	addi	r3,r3,11
811309dc:	18c00003 	ldbu	r3,0(r3)
811309e0:	1809883a 	mov	r4,r3
811309e4:	e0fffc83 	ldbu	r3,-14(fp)
811309e8:	00c6303a 	nor	r3,zero,r3
811309ec:	20c6703a 	and	r3,r4,r3
811309f0:	1809883a 	mov	r4,r3
811309f4:	e0fff317 	ldw	r3,-52(fp)
811309f8:	1885883a 	add	r2,r3,r2
811309fc:	108002c4 	addi	r2,r2,11
81130a00:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
81130a04:	e0bffc03 	ldbu	r2,-16(fp)
81130a08:	e0fff317 	ldw	r3,-52(fp)
81130a0c:	1885883a 	add	r2,r3,r2
81130a10:	108002c4 	addi	r2,r2,11
81130a14:	10800003 	ldbu	r2,0(r2)
81130a18:	10803fcc 	andi	r2,r2,255
81130a1c:	1000091e 	bne	r2,zero,81130a44 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= ~bity_old;
81130a20:	e0bff317 	ldw	r2,-52(fp)
81130a24:	10800283 	ldbu	r2,10(r2)
81130a28:	1007883a 	mov	r3,r2
81130a2c:	e0bffc43 	ldbu	r2,-15(fp)
81130a30:	0084303a 	nor	r2,zero,r2
81130a34:	1884703a 	and	r2,r3,r2
81130a38:	1007883a 	mov	r3,r2
81130a3c:	e0bff317 	ldw	r2,-52(fp)
81130a40:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
81130a44:	e0bff317 	ldw	r2,-52(fp)
81130a48:	10c00283 	ldbu	r3,10(r2)
81130a4c:	e0bffb83 	ldbu	r2,-18(fp)
81130a50:	1884b03a 	or	r2,r3,r2
81130a54:	1007883a 	mov	r3,r2
81130a58:	e0bff317 	ldw	r2,-52(fp)
81130a5c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
81130a60:	e0bffb03 	ldbu	r2,-20(fp)
81130a64:	e0fffb03 	ldbu	r3,-20(fp)
81130a68:	e13ff317 	ldw	r4,-52(fp)
81130a6c:	20c7883a 	add	r3,r4,r3
81130a70:	18c002c4 	addi	r3,r3,11
81130a74:	19000003 	ldbu	r4,0(r3)
81130a78:	e0fffbc3 	ldbu	r3,-17(fp)
81130a7c:	20c6b03a 	or	r3,r4,r3
81130a80:	1809883a 	mov	r4,r3
81130a84:	e0fff317 	ldw	r3,-52(fp)
81130a88:	1885883a 	add	r2,r3,r2
81130a8c:	108002c4 	addi	r2,r2,11
81130a90:	11000005 	stb	r4,0(r2)
            pevents++;
81130a94:	e0bff417 	ldw	r2,-48(fp)
81130a98:	10800104 	addi	r2,r2,4
81130a9c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
81130aa0:	e0bff417 	ldw	r2,-48(fp)
81130aa4:	10800017 	ldw	r2,0(r2)
81130aa8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
81130aac:	e0bff317 	ldw	r2,-52(fp)
81130ab0:	103fc51e 	bne	r2,zero,811309c8 <__reset+0xfb1109c8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
81130ab4:	e0bff817 	ldw	r2,-32(fp)
81130ab8:	e0ffff03 	ldbu	r3,-4(fp)
81130abc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
81130ac0:	e0bff817 	ldw	r2,-32(fp)
81130ac4:	e0fffb03 	ldbu	r3,-20(fp)
81130ac8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
81130acc:	e0bff817 	ldw	r2,-32(fp)
81130ad0:	e0fffb43 	ldbu	r3,-19(fp)
81130ad4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
81130ad8:	e0bff817 	ldw	r2,-32(fp)
81130adc:	e0fffb83 	ldbu	r3,-18(fp)
81130ae0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
81130ae4:	e0bff817 	ldw	r2,-32(fp)
81130ae8:	e0fffbc3 	ldbu	r3,-17(fp)
81130aec:	10c00d45 	stb	r3,53(r2)
81130af0:	e0bff517 	ldw	r2,-44(fp)
81130af4:	e0bffa15 	stw	r2,-24(fp)
81130af8:	e0bffa17 	ldw	r2,-24(fp)
81130afc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
81130b00:	d0a07a03 	ldbu	r2,-32280(gp)
81130b04:	10803fcc 	andi	r2,r2,255
81130b08:	10800058 	cmpnei	r2,r2,1
81130b0c:	1000011e 	bne	r2,zero,81130b14 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
81130b10:	112b0c40 	call	8112b0c4 <OS_Sched>
    }
    return (OS_ERR_NONE);
81130b14:	0005883a 	mov	r2,zero
}
81130b18:	e037883a 	mov	sp,fp
81130b1c:	dfc00117 	ldw	ra,4(sp)
81130b20:	df000017 	ldw	fp,0(sp)
81130b24:	dec00204 	addi	sp,sp,8
81130b28:	f800283a 	ret

81130b2c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
81130b2c:	deffee04 	addi	sp,sp,-72
81130b30:	de00012e 	bgeu	sp,et,81130b38 <OSTaskCreate+0xc>
81130b34:	003b68fa 	trap	3
81130b38:	dfc01115 	stw	ra,68(sp)
81130b3c:	df001015 	stw	fp,64(sp)
81130b40:	df001004 	addi	fp,sp,64
81130b44:	e13ffc15 	stw	r4,-16(fp)
81130b48:	e17ffd15 	stw	r5,-12(fp)
81130b4c:	e1bffe15 	stw	r6,-8(fp)
81130b50:	3805883a 	mov	r2,r7
81130b54:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
81130b58:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
81130b5c:	e0bfff03 	ldbu	r2,-4(fp)
81130b60:	10800a70 	cmpltui	r2,r2,41
81130b64:	1000021e 	bne	r2,zero,81130b70 <OSTaskCreate+0x44>
        return (OS_ERR_PRIO_INVALID);
81130b68:	00800a84 	movi	r2,42
81130b6c:	00005706 	br	81130ccc <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130b70:	0005303a 	rdctl	r2,status
81130b74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130b78:	e0fffb17 	ldw	r3,-20(fp)
81130b7c:	00bfff84 	movi	r2,-2
81130b80:	1884703a 	and	r2,r3,r2
81130b84:	1001703a 	wrctl	status,r2
  
  return context;
81130b88:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81130b8c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81130b90:	d0a08a03 	ldbu	r2,-32216(gp)
81130b94:	10803fcc 	andi	r2,r2,255
81130b98:	10000626 	beq	r2,zero,81130bb4 <OSTaskCreate+0x88>
81130b9c:	e0bff317 	ldw	r2,-52(fp)
81130ba0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130ba4:	e0bff417 	ldw	r2,-48(fp)
81130ba8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
81130bac:	00800f04 	movi	r2,60
81130bb0:	00004606 	br	81130ccc <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
81130bb4:	e0ffff03 	ldbu	r3,-4(fp)
81130bb8:	00a04574 	movhi	r2,33045
81130bbc:	10807b04 	addi	r2,r2,492
81130bc0:	18c7883a 	add	r3,r3,r3
81130bc4:	18c7883a 	add	r3,r3,r3
81130bc8:	10c5883a 	add	r2,r2,r3
81130bcc:	10800017 	ldw	r2,0(r2)
81130bd0:	1000391e 	bne	r2,zero,81130cb8 <OSTaskCreate+0x18c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
81130bd4:	e0ffff03 	ldbu	r3,-4(fp)
81130bd8:	00a04574 	movhi	r2,33045
81130bdc:	10807b04 	addi	r2,r2,492
81130be0:	18c7883a 	add	r3,r3,r3
81130be4:	18c7883a 	add	r3,r3,r3
81130be8:	10c5883a 	add	r2,r2,r3
81130bec:	00c00044 	movi	r3,1
81130bf0:	10c00015 	stw	r3,0(r2)
81130bf4:	e0bff317 	ldw	r2,-52(fp)
81130bf8:	e0bff515 	stw	r2,-44(fp)
81130bfc:	e0bff517 	ldw	r2,-44(fp)
81130c00:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
81130c04:	000f883a 	mov	r7,zero
81130c08:	e1bffe17 	ldw	r6,-8(fp)
81130c0c:	e17ffd17 	ldw	r5,-12(fp)
81130c10:	e13ffc17 	ldw	r4,-16(fp)
81130c14:	113c2a40 	call	8113c2a4 <OSTaskStkInit>
81130c18:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
81130c1c:	e0bfff03 	ldbu	r2,-4(fp)
81130c20:	d8000215 	stw	zero,8(sp)
81130c24:	d8000115 	stw	zero,4(sp)
81130c28:	d8000015 	stw	zero,0(sp)
81130c2c:	000f883a 	mov	r7,zero
81130c30:	000d883a 	mov	r6,zero
81130c34:	e17ff717 	ldw	r5,-36(fp)
81130c38:	1009883a 	mov	r4,r2
81130c3c:	112b50c0 	call	8112b50c <OS_TCBInit>
81130c40:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
81130c44:	e0bff803 	ldbu	r2,-32(fp)
81130c48:	1000061e 	bne	r2,zero,81130c64 <OSTaskCreate+0x138>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
81130c4c:	d0a07a03 	ldbu	r2,-32280(gp)
81130c50:	10803fcc 	andi	r2,r2,255
81130c54:	10800058 	cmpnei	r2,r2,1
81130c58:	1000151e 	bne	r2,zero,81130cb0 <OSTaskCreate+0x184>
                OS_Sched();
81130c5c:	112b0c40 	call	8112b0c4 <OS_Sched>
81130c60:	00001306 	br	81130cb0 <OSTaskCreate+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130c64:	0005303a 	rdctl	r2,status
81130c68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130c6c:	e0fffa17 	ldw	r3,-24(fp)
81130c70:	00bfff84 	movi	r2,-2
81130c74:	1884703a 	and	r2,r3,r2
81130c78:	1001703a 	wrctl	status,r2
  
  return context;
81130c7c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81130c80:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
81130c84:	e0ffff03 	ldbu	r3,-4(fp)
81130c88:	00a04574 	movhi	r2,33045
81130c8c:	10807b04 	addi	r2,r2,492
81130c90:	18c7883a 	add	r3,r3,r3
81130c94:	18c7883a 	add	r3,r3,r3
81130c98:	10c5883a 	add	r2,r2,r3
81130c9c:	10000015 	stw	zero,0(r2)
81130ca0:	e0bff317 	ldw	r2,-52(fp)
81130ca4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130ca8:	e0bff617 	ldw	r2,-40(fp)
81130cac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
81130cb0:	e0bff803 	ldbu	r2,-32(fp)
81130cb4:	00000506 	br	81130ccc <OSTaskCreate+0x1a0>
81130cb8:	e0bff317 	ldw	r2,-52(fp)
81130cbc:	e0bff915 	stw	r2,-28(fp)
81130cc0:	e0bff917 	ldw	r2,-28(fp)
81130cc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
81130cc8:	00800a04 	movi	r2,40
}
81130ccc:	e037883a 	mov	sp,fp
81130cd0:	dfc00117 	ldw	ra,4(sp)
81130cd4:	df000017 	ldw	fp,0(sp)
81130cd8:	dec00204 	addi	sp,sp,8
81130cdc:	f800283a 	ret

81130ce0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
81130ce0:	deffec04 	addi	sp,sp,-80
81130ce4:	de00012e 	bgeu	sp,et,81130cec <OSTaskCreateExt+0xc>
81130ce8:	003b68fa 	trap	3
81130cec:	dfc01315 	stw	ra,76(sp)
81130cf0:	df001215 	stw	fp,72(sp)
81130cf4:	df001204 	addi	fp,sp,72
81130cf8:	e13ffa15 	stw	r4,-24(fp)
81130cfc:	e17ffb15 	stw	r5,-20(fp)
81130d00:	e1bffc15 	stw	r6,-16(fp)
81130d04:	3809883a 	mov	r4,r7
81130d08:	e0c00217 	ldw	r3,8(fp)
81130d0c:	e0800617 	ldw	r2,24(fp)
81130d10:	e13ffd05 	stb	r4,-12(fp)
81130d14:	e0fffe0d 	sth	r3,-8(fp)
81130d18:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
81130d1c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
81130d20:	e0bffd03 	ldbu	r2,-12(fp)
81130d24:	10800a70 	cmpltui	r2,r2,41
81130d28:	1000021e 	bne	r2,zero,81130d34 <OSTaskCreateExt+0x54>
        return (OS_ERR_PRIO_INVALID);
81130d2c:	00800a84 	movi	r2,42
81130d30:	00006106 	br	81130eb8 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130d34:	0005303a 	rdctl	r2,status
81130d38:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130d3c:	e0fff917 	ldw	r3,-28(fp)
81130d40:	00bfff84 	movi	r2,-2
81130d44:	1884703a 	and	r2,r3,r2
81130d48:	1001703a 	wrctl	status,r2
  
  return context;
81130d4c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81130d50:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81130d54:	d0a08a03 	ldbu	r2,-32216(gp)
81130d58:	10803fcc 	andi	r2,r2,255
81130d5c:	10000626 	beq	r2,zero,81130d78 <OSTaskCreateExt+0x98>
81130d60:	e0bff117 	ldw	r2,-60(fp)
81130d64:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130d68:	e0bff217 	ldw	r2,-56(fp)
81130d6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
81130d70:	00800f04 	movi	r2,60
81130d74:	00005006 	br	81130eb8 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
81130d78:	e0fffd03 	ldbu	r3,-12(fp)
81130d7c:	00a04574 	movhi	r2,33045
81130d80:	10807b04 	addi	r2,r2,492
81130d84:	18c7883a 	add	r3,r3,r3
81130d88:	18c7883a 	add	r3,r3,r3
81130d8c:	10c5883a 	add	r2,r2,r3
81130d90:	10800017 	ldw	r2,0(r2)
81130d94:	1000431e 	bne	r2,zero,81130ea4 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
81130d98:	e0fffd03 	ldbu	r3,-12(fp)
81130d9c:	00a04574 	movhi	r2,33045
81130da0:	10807b04 	addi	r2,r2,492
81130da4:	18c7883a 	add	r3,r3,r3
81130da8:	18c7883a 	add	r3,r3,r3
81130dac:	10c5883a 	add	r2,r2,r3
81130db0:	00c00044 	movi	r3,1
81130db4:	10c00015 	stw	r3,0(r2)
81130db8:	e0bff117 	ldw	r2,-60(fp)
81130dbc:	e0bff315 	stw	r2,-52(fp)
81130dc0:	e0bff317 	ldw	r2,-52(fp)
81130dc4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
81130dc8:	e0bfff0b 	ldhu	r2,-4(fp)
81130dcc:	100d883a 	mov	r6,r2
81130dd0:	e1400417 	ldw	r5,16(fp)
81130dd4:	e1000317 	ldw	r4,12(fp)
81130dd8:	1131d880 	call	81131d88 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
81130ddc:	e0bfff0b 	ldhu	r2,-4(fp)
81130de0:	100f883a 	mov	r7,r2
81130de4:	e1bffc17 	ldw	r6,-16(fp)
81130de8:	e17ffb17 	ldw	r5,-20(fp)
81130dec:	e13ffa17 	ldw	r4,-24(fp)
81130df0:	113c2a40 	call	8113c2a4 <OSTaskStkInit>
81130df4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
81130df8:	e0fffd03 	ldbu	r3,-12(fp)
81130dfc:	e13ffe0b 	ldhu	r4,-8(fp)
81130e00:	e0bfff0b 	ldhu	r2,-4(fp)
81130e04:	d8800215 	stw	r2,8(sp)
81130e08:	e0800517 	ldw	r2,20(fp)
81130e0c:	d8800115 	stw	r2,4(sp)
81130e10:	e0800417 	ldw	r2,16(fp)
81130e14:	d8800015 	stw	r2,0(sp)
81130e18:	200f883a 	mov	r7,r4
81130e1c:	e1800317 	ldw	r6,12(fp)
81130e20:	e17ff517 	ldw	r5,-44(fp)
81130e24:	1809883a 	mov	r4,r3
81130e28:	112b50c0 	call	8112b50c <OS_TCBInit>
81130e2c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
81130e30:	e0bff603 	ldbu	r2,-40(fp)
81130e34:	1000061e 	bne	r2,zero,81130e50 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
81130e38:	d0a07a03 	ldbu	r2,-32280(gp)
81130e3c:	10803fcc 	andi	r2,r2,255
81130e40:	10800058 	cmpnei	r2,r2,1
81130e44:	1000151e 	bne	r2,zero,81130e9c <OSTaskCreateExt+0x1bc>
                OS_Sched();
81130e48:	112b0c40 	call	8112b0c4 <OS_Sched>
81130e4c:	00001306 	br	81130e9c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130e50:	0005303a 	rdctl	r2,status
81130e54:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130e58:	e0fff817 	ldw	r3,-32(fp)
81130e5c:	00bfff84 	movi	r2,-2
81130e60:	1884703a 	and	r2,r3,r2
81130e64:	1001703a 	wrctl	status,r2
  
  return context;
81130e68:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81130e6c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
81130e70:	e0fffd03 	ldbu	r3,-12(fp)
81130e74:	00a04574 	movhi	r2,33045
81130e78:	10807b04 	addi	r2,r2,492
81130e7c:	18c7883a 	add	r3,r3,r3
81130e80:	18c7883a 	add	r3,r3,r3
81130e84:	10c5883a 	add	r2,r2,r3
81130e88:	10000015 	stw	zero,0(r2)
81130e8c:	e0bff117 	ldw	r2,-60(fp)
81130e90:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130e94:	e0bff417 	ldw	r2,-48(fp)
81130e98:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
81130e9c:	e0bff603 	ldbu	r2,-40(fp)
81130ea0:	00000506 	br	81130eb8 <OSTaskCreateExt+0x1d8>
81130ea4:	e0bff117 	ldw	r2,-60(fp)
81130ea8:	e0bff715 	stw	r2,-36(fp)
81130eac:	e0bff717 	ldw	r2,-36(fp)
81130eb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
81130eb4:	00800a04 	movi	r2,40
}
81130eb8:	e037883a 	mov	sp,fp
81130ebc:	dfc00117 	ldw	ra,4(sp)
81130ec0:	df000017 	ldw	fp,0(sp)
81130ec4:	dec00204 	addi	sp,sp,8
81130ec8:	f800283a 	ret

81130ecc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
81130ecc:	defff404 	addi	sp,sp,-48
81130ed0:	de00012e 	bgeu	sp,et,81130ed8 <OSTaskDel+0xc>
81130ed4:	003b68fa 	trap	3
81130ed8:	dfc00b15 	stw	ra,44(sp)
81130edc:	df000a15 	stw	fp,40(sp)
81130ee0:	df000a04 	addi	fp,sp,40
81130ee4:	2005883a 	mov	r2,r4
81130ee8:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
81130eec:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
81130ef0:	d0a08a03 	ldbu	r2,-32216(gp)
81130ef4:	10803fcc 	andi	r2,r2,255
81130ef8:	10000226 	beq	r2,zero,81130f04 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
81130efc:	00801004 	movi	r2,64
81130f00:	0000c006 	br	81131204 <OSTaskDel+0x338>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
81130f04:	e0bfff03 	ldbu	r2,-4(fp)
81130f08:	10800a18 	cmpnei	r2,r2,40
81130f0c:	1000021e 	bne	r2,zero,81130f18 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
81130f10:	00800f84 	movi	r2,62
81130f14:	0000bb06 	br	81131204 <OSTaskDel+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
81130f18:	e0bfff03 	ldbu	r2,-4(fp)
81130f1c:	10800a30 	cmpltui	r2,r2,40
81130f20:	1000051e 	bne	r2,zero,81130f38 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
81130f24:	e0bfff03 	ldbu	r2,-4(fp)
81130f28:	10803fe0 	cmpeqi	r2,r2,255
81130f2c:	1000021e 	bne	r2,zero,81130f38 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
81130f30:	00800a84 	movi	r2,42
81130f34:	0000b306 	br	81131204 <OSTaskDel+0x338>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130f38:	0005303a 	rdctl	r2,status
81130f3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81130f40:	e0fffe17 	ldw	r3,-8(fp)
81130f44:	00bfff84 	movi	r2,-2
81130f48:	1884703a 	and	r2,r3,r2
81130f4c:	1001703a 	wrctl	status,r2
  
  return context;
81130f50:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
81130f54:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
81130f58:	e0bfff03 	ldbu	r2,-4(fp)
81130f5c:	10803fd8 	cmpnei	r2,r2,255
81130f60:	1000031e 	bne	r2,zero,81130f70 <OSTaskDel+0xa4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
81130f64:	d0a08b17 	ldw	r2,-32212(gp)
81130f68:	10800c83 	ldbu	r2,50(r2)
81130f6c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81130f70:	e0ffff03 	ldbu	r3,-4(fp)
81130f74:	00a04574 	movhi	r2,33045
81130f78:	10807b04 	addi	r2,r2,492
81130f7c:	18c7883a 	add	r3,r3,r3
81130f80:	18c7883a 	add	r3,r3,r3
81130f84:	10c5883a 	add	r2,r2,r3
81130f88:	10800017 	ldw	r2,0(r2)
81130f8c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
81130f90:	e0bff817 	ldw	r2,-32(fp)
81130f94:	1000061e 	bne	r2,zero,81130fb0 <OSTaskDel+0xe4>
81130f98:	e0bff617 	ldw	r2,-40(fp)
81130f9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130fa0:	e0bff717 	ldw	r2,-36(fp)
81130fa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81130fa8:	008010c4 	movi	r2,67
81130fac:	00009506 	br	81131204 <OSTaskDel+0x338>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
81130fb0:	e0bff817 	ldw	r2,-32(fp)
81130fb4:	10800058 	cmpnei	r2,r2,1
81130fb8:	1000061e 	bne	r2,zero,81130fd4 <OSTaskDel+0x108>
81130fbc:	e0bff617 	ldw	r2,-40(fp)
81130fc0:	e0bff915 	stw	r2,-28(fp)
81130fc4:	e0bff917 	ldw	r2,-28(fp)
81130fc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81130fcc:	00800f44 	movi	r2,61
81130fd0:	00008c06 	br	81131204 <OSTaskDel+0x338>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
81130fd4:	e0bff817 	ldw	r2,-32(fp)
81130fd8:	10800d03 	ldbu	r2,52(r2)
81130fdc:	10c03fcc 	andi	r3,r2,255
81130fe0:	e0bff817 	ldw	r2,-32(fp)
81130fe4:	10800d03 	ldbu	r2,52(r2)
81130fe8:	11003fcc 	andi	r4,r2,255
81130fec:	d0a08744 	addi	r2,gp,-32227
81130ff0:	2085883a 	add	r2,r4,r2
81130ff4:	10800003 	ldbu	r2,0(r2)
81130ff8:	1009883a 	mov	r4,r2
81130ffc:	e0bff817 	ldw	r2,-32(fp)
81131000:	10800d43 	ldbu	r2,53(r2)
81131004:	0084303a 	nor	r2,zero,r2
81131008:	2084703a 	and	r2,r4,r2
8113100c:	1009883a 	mov	r4,r2
81131010:	d0a08744 	addi	r2,gp,-32227
81131014:	1885883a 	add	r2,r3,r2
81131018:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
8113101c:	e0bff817 	ldw	r2,-32(fp)
81131020:	10800d03 	ldbu	r2,52(r2)
81131024:	10c03fcc 	andi	r3,r2,255
81131028:	d0a08744 	addi	r2,gp,-32227
8113102c:	1885883a 	add	r2,r3,r2
81131030:	10800003 	ldbu	r2,0(r2)
81131034:	10803fcc 	andi	r2,r2,255
81131038:	1000071e 	bne	r2,zero,81131058 <OSTaskDel+0x18c>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
8113103c:	e0bff817 	ldw	r2,-32(fp)
81131040:	10800d83 	ldbu	r2,54(r2)
81131044:	0084303a 	nor	r2,zero,r2
81131048:	1007883a 	mov	r3,r2
8113104c:	d0a08703 	ldbu	r2,-32228(gp)
81131050:	1884703a 	and	r2,r3,r2
81131054:	d0a08705 	stb	r2,-32228(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
81131058:	e0bff817 	ldw	r2,-32(fp)
8113105c:	10800717 	ldw	r2,28(r2)
81131060:	10000526 	beq	r2,zero,81131078 <OSTaskDel+0x1ac>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
81131064:	e0bff817 	ldw	r2,-32(fp)
81131068:	10800717 	ldw	r2,28(r2)
8113106c:	100b883a 	mov	r5,r2
81131070:	e13ff817 	ldw	r4,-32(fp)
81131074:	112aa180 	call	8112aa18 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
81131078:	e0bff817 	ldw	r2,-32(fp)
8113107c:	10800817 	ldw	r2,32(r2)
81131080:	10000526 	beq	r2,zero,81131098 <OSTaskDel+0x1cc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
81131084:	e0bff817 	ldw	r2,-32(fp)
81131088:	10800817 	ldw	r2,32(r2)
8113108c:	100b883a 	mov	r5,r2
81131090:	e13ff817 	ldw	r4,-32(fp)
81131094:	112aad80 	call	8112aad8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
81131098:	e0bff817 	ldw	r2,-32(fp)
8113109c:	10800a17 	ldw	r2,40(r2)
811310a0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
811310a4:	e0bffb17 	ldw	r2,-20(fp)
811310a8:	10000226 	beq	r2,zero,811310b4 <OSTaskDel+0x1e8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
811310ac:	e13ffb17 	ldw	r4,-20(fp)
811310b0:	112d0b00 	call	8112d0b0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
811310b4:	e0bff817 	ldw	r2,-32(fp)
811310b8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
811310bc:	e0bff817 	ldw	r2,-32(fp)
811310c0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
811310c4:	e0bff817 	ldw	r2,-32(fp)
811310c8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
811310cc:	d0a07803 	ldbu	r2,-32288(gp)
811310d0:	10803fcc 	andi	r2,r2,255
811310d4:	10803fe0 	cmpeqi	r2,r2,255
811310d8:	1000031e 	bne	r2,zero,811310e8 <OSTaskDel+0x21c>
        OSLockNesting++;
811310dc:	d0a07803 	ldbu	r2,-32288(gp)
811310e0:	10800044 	addi	r2,r2,1
811310e4:	d0a07805 	stb	r2,-32288(gp)
811310e8:	e0bff617 	ldw	r2,-40(fp)
811310ec:	e0bffd15 	stw	r2,-12(fp)
811310f0:	e0bffd17 	ldw	r2,-12(fp)
811310f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
811310f8:	112a5e00 	call	8112a5e0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811310fc:	0005303a 	rdctl	r2,status
81131100:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131104:	e0fffa17 	ldw	r3,-24(fp)
81131108:	00bfff84 	movi	r2,-2
8113110c:	1884703a 	and	r2,r3,r2
81131110:	1001703a 	wrctl	status,r2
  
  return context;
81131114:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
81131118:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
8113111c:	d0a07803 	ldbu	r2,-32288(gp)
81131120:	10803fcc 	andi	r2,r2,255
81131124:	10000326 	beq	r2,zero,81131134 <OSTaskDel+0x268>
        OSLockNesting--;
81131128:	d0a07803 	ldbu	r2,-32288(gp)
8113112c:	10bfffc4 	addi	r2,r2,-1
81131130:	d0a07805 	stb	r2,-32288(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
81131134:	e13ff817 	ldw	r4,-32(fp)
81131138:	113c4340 	call	8113c434 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
8113113c:	d0a08343 	ldbu	r2,-32243(gp)
81131140:	10bfffc4 	addi	r2,r2,-1
81131144:	d0a08345 	stb	r2,-32243(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
81131148:	e0ffff03 	ldbu	r3,-4(fp)
8113114c:	00a04574 	movhi	r2,33045
81131150:	10807b04 	addi	r2,r2,492
81131154:	18c7883a 	add	r3,r3,r3
81131158:	18c7883a 	add	r3,r3,r3
8113115c:	10c5883a 	add	r2,r2,r3
81131160:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
81131164:	e0bff817 	ldw	r2,-32(fp)
81131168:	10800617 	ldw	r2,24(r2)
8113116c:	1000071e 	bne	r2,zero,8113118c <OSTaskDel+0x2c0>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
81131170:	e0bff817 	ldw	r2,-32(fp)
81131174:	10800517 	ldw	r2,20(r2)
81131178:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
8113117c:	e0bff817 	ldw	r2,-32(fp)
81131180:	10800517 	ldw	r2,20(r2)
81131184:	d0a07d15 	stw	r2,-32268(gp)
81131188:	00000a06 	br	811311b4 <OSTaskDel+0x2e8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
8113118c:	e0bff817 	ldw	r2,-32(fp)
81131190:	10800617 	ldw	r2,24(r2)
81131194:	e0fff817 	ldw	r3,-32(fp)
81131198:	18c00517 	ldw	r3,20(r3)
8113119c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
811311a0:	e0bff817 	ldw	r2,-32(fp)
811311a4:	10800517 	ldw	r2,20(r2)
811311a8:	e0fff817 	ldw	r3,-32(fp)
811311ac:	18c00617 	ldw	r3,24(r3)
811311b0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
811311b4:	d0e08217 	ldw	r3,-32248(gp)
811311b8:	e0bff817 	ldw	r2,-32(fp)
811311bc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
811311c0:	e0bff817 	ldw	r2,-32(fp)
811311c4:	d0a08215 	stw	r2,-32248(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
811311c8:	e0bff817 	ldw	r2,-32(fp)
811311cc:	00c00fc4 	movi	r3,63
811311d0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
811311d4:	e0bff817 	ldw	r2,-32(fp)
811311d8:	10001345 	stb	zero,77(r2)
811311dc:	e0bff617 	ldw	r2,-40(fp)
811311e0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811311e4:	e0bffc17 	ldw	r2,-16(fp)
811311e8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
811311ec:	d0a07a03 	ldbu	r2,-32280(gp)
811311f0:	10803fcc 	andi	r2,r2,255
811311f4:	10800058 	cmpnei	r2,r2,1
811311f8:	1000011e 	bne	r2,zero,81131200 <OSTaskDel+0x334>
        OS_Sched();                                     /* Find new highest priority task              */
811311fc:	112b0c40 	call	8112b0c4 <OS_Sched>
    }
    return (OS_ERR_NONE);
81131200:	0005883a 	mov	r2,zero
}
81131204:	e037883a 	mov	sp,fp
81131208:	dfc00117 	ldw	ra,4(sp)
8113120c:	df000017 	ldw	fp,0(sp)
81131210:	dec00204 	addi	sp,sp,8
81131214:	f800283a 	ret

81131218 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
81131218:	defff504 	addi	sp,sp,-44
8113121c:	de00012e 	bgeu	sp,et,81131224 <OSTaskDelReq+0xc>
81131220:	003b68fa 	trap	3
81131224:	df000a15 	stw	fp,40(sp)
81131228:	df000a04 	addi	fp,sp,40
8113122c:	2005883a 	mov	r2,r4
81131230:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81131234:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
81131238:	e0bfff03 	ldbu	r2,-4(fp)
8113123c:	10800a18 	cmpnei	r2,r2,40
81131240:	1000021e 	bne	r2,zero,8113124c <OSTaskDelReq+0x34>
        return (OS_ERR_TASK_DEL_IDLE);
81131244:	00800f84 	movi	r2,62
81131248:	00004506 	br	81131360 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8113124c:	e0bfff03 	ldbu	r2,-4(fp)
81131250:	10800a30 	cmpltui	r2,r2,40
81131254:	1000051e 	bne	r2,zero,8113126c <OSTaskDelReq+0x54>
        if (prio != OS_PRIO_SELF) {
81131258:	e0bfff03 	ldbu	r2,-4(fp)
8113125c:	10803fe0 	cmpeqi	r2,r2,255
81131260:	1000021e 	bne	r2,zero,8113126c <OSTaskDelReq+0x54>
            return (OS_ERR_PRIO_INVALID);
81131264:	00800a84 	movi	r2,42
81131268:	00003d06 	br	81131360 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
8113126c:	e0bfff03 	ldbu	r2,-4(fp)
81131270:	10803fd8 	cmpnei	r2,r2,255
81131274:	1000111e 	bne	r2,zero,811312bc <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131278:	0005303a 	rdctl	r2,status
8113127c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131280:	e0fff917 	ldw	r3,-28(fp)
81131284:	00bfff84 	movi	r2,-2
81131288:	1884703a 	and	r2,r3,r2
8113128c:	1001703a 	wrctl	status,r2
  
  return context;
81131290:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
81131294:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
81131298:	d0a08b17 	ldw	r2,-32212(gp)
8113129c:	10800dc3 	ldbu	r2,55(r2)
811312a0:	e0bff805 	stb	r2,-32(fp)
811312a4:	e0bff617 	ldw	r2,-40(fp)
811312a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811312ac:	e0bffe17 	ldw	r2,-8(fp)
811312b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
811312b4:	e0bff803 	ldbu	r2,-32(fp)
811312b8:	00002906 	br	81131360 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811312bc:	0005303a 	rdctl	r2,status
811312c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811312c4:	e0fff717 	ldw	r3,-36(fp)
811312c8:	00bfff84 	movi	r2,-2
811312cc:	1884703a 	and	r2,r3,r2
811312d0:	1001703a 	wrctl	status,r2
  
  return context;
811312d4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
811312d8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
811312dc:	e0ffff03 	ldbu	r3,-4(fp)
811312e0:	00a04574 	movhi	r2,33045
811312e4:	10807b04 	addi	r2,r2,492
811312e8:	18c7883a 	add	r3,r3,r3
811312ec:	18c7883a 	add	r3,r3,r3
811312f0:	10c5883a 	add	r2,r2,r3
811312f4:	10800017 	ldw	r2,0(r2)
811312f8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
811312fc:	e0bffb17 	ldw	r2,-20(fp)
81131300:	1000061e 	bne	r2,zero,8113131c <OSTaskDelReq+0x104>
81131304:	e0bff617 	ldw	r2,-40(fp)
81131308:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113130c:	e0bffa17 	ldw	r2,-24(fp)
81131310:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
81131314:	008010c4 	movi	r2,67
81131318:	00001106 	br	81131360 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
8113131c:	e0bffb17 	ldw	r2,-20(fp)
81131320:	10800058 	cmpnei	r2,r2,1
81131324:	1000061e 	bne	r2,zero,81131340 <OSTaskDelReq+0x128>
81131328:	e0bff617 	ldw	r2,-40(fp)
8113132c:	e0bffc15 	stw	r2,-16(fp)
81131330:	e0bffc17 	ldw	r2,-16(fp)
81131334:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81131338:	00800f44 	movi	r2,61
8113133c:	00000806 	br	81131360 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
81131340:	e0bffb17 	ldw	r2,-20(fp)
81131344:	00c00fc4 	movi	r3,63
81131348:	10c00dc5 	stb	r3,55(r2)
8113134c:	e0bff617 	ldw	r2,-40(fp)
81131350:	e0bffd15 	stw	r2,-12(fp)
81131354:	e0bffd17 	ldw	r2,-12(fp)
81131358:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8113135c:	0005883a 	mov	r2,zero
}
81131360:	e037883a 	mov	sp,fp
81131364:	df000017 	ldw	fp,0(sp)
81131368:	dec00104 	addi	sp,sp,4
8113136c:	f800283a 	ret

81131370 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
81131370:	defff404 	addi	sp,sp,-48
81131374:	de00012e 	bgeu	sp,et,8113137c <OSTaskNameGet+0xc>
81131378:	003b68fa 	trap	3
8113137c:	dfc00b15 	stw	ra,44(sp)
81131380:	df000a15 	stw	fp,40(sp)
81131384:	df000a04 	addi	fp,sp,40
81131388:	2005883a 	mov	r2,r4
8113138c:	e17ffe15 	stw	r5,-8(fp)
81131390:	e1bfff15 	stw	r6,-4(fp)
81131394:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
81131398:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
8113139c:	e0bfff17 	ldw	r2,-4(fp)
811313a0:	1000021e 	bne	r2,zero,811313ac <OSTaskNameGet+0x3c>
        return (0);
811313a4:	0005883a 	mov	r2,zero
811313a8:	00005406 	br	811314fc <OSTaskNameGet+0x18c>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
811313ac:	e0bffd03 	ldbu	r2,-12(fp)
811313b0:	10800a70 	cmpltui	r2,r2,41
811313b4:	1000081e 	bne	r2,zero,811313d8 <OSTaskNameGet+0x68>
        if (prio != OS_PRIO_SELF) {
811313b8:	e0bffd03 	ldbu	r2,-12(fp)
811313bc:	10803fe0 	cmpeqi	r2,r2,255
811313c0:	1000051e 	bne	r2,zero,811313d8 <OSTaskNameGet+0x68>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
811313c4:	e0bfff17 	ldw	r2,-4(fp)
811313c8:	00c00a84 	movi	r3,42
811313cc:	10c00005 	stb	r3,0(r2)
            return (0);
811313d0:	0005883a 	mov	r2,zero
811313d4:	00004906 	br	811314fc <OSTaskNameGet+0x18c>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
811313d8:	e0bffe17 	ldw	r2,-8(fp)
811313dc:	1000051e 	bne	r2,zero,811313f4 <OSTaskNameGet+0x84>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
811313e0:	e0bfff17 	ldw	r2,-4(fp)
811313e4:	00c00304 	movi	r3,12
811313e8:	10c00005 	stb	r3,0(r2)
        return (0);
811313ec:	0005883a 	mov	r2,zero
811313f0:	00004206 	br	811314fc <OSTaskNameGet+0x18c>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
811313f4:	d0a08a03 	ldbu	r2,-32216(gp)
811313f8:	10803fcc 	andi	r2,r2,255
811313fc:	10000526 	beq	r2,zero,81131414 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
81131400:	e0bfff17 	ldw	r2,-4(fp)
81131404:	00c00444 	movi	r3,17
81131408:	10c00005 	stb	r3,0(r2)
        return (0);
8113140c:	0005883a 	mov	r2,zero
81131410:	00003a06 	br	811314fc <OSTaskNameGet+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131414:	0005303a 	rdctl	r2,status
81131418:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113141c:	e0fffc17 	ldw	r3,-16(fp)
81131420:	00bfff84 	movi	r2,-2
81131424:	1884703a 	and	r2,r3,r2
81131428:	1001703a 	wrctl	status,r2
  
  return context;
8113142c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81131430:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
81131434:	e0bffd03 	ldbu	r2,-12(fp)
81131438:	10803fd8 	cmpnei	r2,r2,255
8113143c:	1000031e 	bne	r2,zero,8113144c <OSTaskNameGet+0xdc>
        prio = OSTCBCur->OSTCBPrio;
81131440:	d0a08b17 	ldw	r2,-32212(gp)
81131444:	10800c83 	ldbu	r2,50(r2)
81131448:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8113144c:	e0fffd03 	ldbu	r3,-12(fp)
81131450:	00a04574 	movhi	r2,33045
81131454:	10807b04 	addi	r2,r2,492
81131458:	18c7883a 	add	r3,r3,r3
8113145c:	18c7883a 	add	r3,r3,r3
81131460:	10c5883a 	add	r2,r2,r3
81131464:	10800017 	ldw	r2,0(r2)
81131468:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
8113146c:	e0bff817 	ldw	r2,-32(fp)
81131470:	1000091e 	bne	r2,zero,81131498 <OSTaskNameGet+0x128>
81131474:	e0bff617 	ldw	r2,-40(fp)
81131478:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113147c:	e0bff717 	ldw	r2,-36(fp)
81131480:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
81131484:	e0bfff17 	ldw	r2,-4(fp)
81131488:	00c010c4 	movi	r3,67
8113148c:	10c00005 	stb	r3,0(r2)
        return (0);
81131490:	0005883a 	mov	r2,zero
81131494:	00001906 	br	811314fc <OSTaskNameGet+0x18c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
81131498:	e0bff817 	ldw	r2,-32(fp)
8113149c:	10800058 	cmpnei	r2,r2,1
811314a0:	1000091e 	bne	r2,zero,811314c8 <OSTaskNameGet+0x158>
811314a4:	e0bff617 	ldw	r2,-40(fp)
811314a8:	e0bff915 	stw	r2,-28(fp)
811314ac:	e0bff917 	ldw	r2,-28(fp)
811314b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
811314b4:	e0bfff17 	ldw	r2,-4(fp)
811314b8:	00c010c4 	movi	r3,67
811314bc:	10c00005 	stb	r3,0(r2)
        return (0);
811314c0:	0005883a 	mov	r2,zero
811314c4:	00000d06 	br	811314fc <OSTaskNameGet+0x18c>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
811314c8:	e0bff817 	ldw	r2,-32(fp)
811314cc:	10801304 	addi	r2,r2,76
811314d0:	100b883a 	mov	r5,r2
811314d4:	e13ffe17 	ldw	r4,-8(fp)
811314d8:	112b2180 	call	8112b218 <OS_StrCopy>
811314dc:	e0bffb05 	stb	r2,-20(fp)
811314e0:	e0bff617 	ldw	r2,-40(fp)
811314e4:	e0bffa15 	stw	r2,-24(fp)
811314e8:	e0bffa17 	ldw	r2,-24(fp)
811314ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811314f0:	e0bfff17 	ldw	r2,-4(fp)
811314f4:	10000005 	stb	zero,0(r2)
    return (len);
811314f8:	e0bffb03 	ldbu	r2,-20(fp)
}
811314fc:	e037883a 	mov	sp,fp
81131500:	dfc00117 	ldw	ra,4(sp)
81131504:	df000017 	ldw	fp,0(sp)
81131508:	dec00204 	addi	sp,sp,8
8113150c:	f800283a 	ret

81131510 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
81131510:	defff304 	addi	sp,sp,-52
81131514:	de00012e 	bgeu	sp,et,8113151c <OSTaskNameSet+0xc>
81131518:	003b68fa 	trap	3
8113151c:	dfc00c15 	stw	ra,48(sp)
81131520:	df000b15 	stw	fp,44(sp)
81131524:	df000b04 	addi	fp,sp,44
81131528:	2005883a 	mov	r2,r4
8113152c:	e17ffe15 	stw	r5,-8(fp)
81131530:	e1bfff15 	stw	r6,-4(fp)
81131534:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
81131538:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8113153c:	e0bfff17 	ldw	r2,-4(fp)
81131540:	10005c26 	beq	r2,zero,811316b4 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
81131544:	e0bffd03 	ldbu	r2,-12(fp)
81131548:	10800a70 	cmpltui	r2,r2,41
8113154c:	1000071e 	bne	r2,zero,8113156c <OSTaskNameSet+0x5c>
        if (prio != OS_PRIO_SELF) {
81131550:	e0bffd03 	ldbu	r2,-12(fp)
81131554:	10803fe0 	cmpeqi	r2,r2,255
81131558:	1000041e 	bne	r2,zero,8113156c <OSTaskNameSet+0x5c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
8113155c:	e0bfff17 	ldw	r2,-4(fp)
81131560:	00c00a84 	movi	r3,42
81131564:	10c00005 	stb	r3,0(r2)
            return;
81131568:	00005306 	br	811316b8 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
8113156c:	e0bffe17 	ldw	r2,-8(fp)
81131570:	1000041e 	bne	r2,zero,81131584 <OSTaskNameSet+0x74>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
81131574:	e0bfff17 	ldw	r2,-4(fp)
81131578:	00c00304 	movi	r3,12
8113157c:	10c00005 	stb	r3,0(r2)
        return;
81131580:	00004d06 	br	811316b8 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
81131584:	d0a08a03 	ldbu	r2,-32216(gp)
81131588:	10803fcc 	andi	r2,r2,255
8113158c:	10000426 	beq	r2,zero,811315a0 <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
81131590:	e0bfff17 	ldw	r2,-4(fp)
81131594:	00c00484 	movi	r3,18
81131598:	10c00005 	stb	r3,0(r2)
        return;
8113159c:	00004606 	br	811316b8 <OSTaskNameSet+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811315a0:	0005303a 	rdctl	r2,status
811315a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811315a8:	e0fffc17 	ldw	r3,-16(fp)
811315ac:	00bfff84 	movi	r2,-2
811315b0:	1884703a 	and	r2,r3,r2
811315b4:	1001703a 	wrctl	status,r2
  
  return context;
811315b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811315bc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
811315c0:	e0bffd03 	ldbu	r2,-12(fp)
811315c4:	10803fd8 	cmpnei	r2,r2,255
811315c8:	1000031e 	bne	r2,zero,811315d8 <OSTaskNameSet+0xc8>
        prio = OSTCBCur->OSTCBPrio;
811315cc:	d0a08b17 	ldw	r2,-32212(gp)
811315d0:	10800c83 	ldbu	r2,50(r2)
811315d4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
811315d8:	e0fffd03 	ldbu	r3,-12(fp)
811315dc:	00a04574 	movhi	r2,33045
811315e0:	10807b04 	addi	r2,r2,492
811315e4:	18c7883a 	add	r3,r3,r3
811315e8:	18c7883a 	add	r3,r3,r3
811315ec:	10c5883a 	add	r2,r2,r3
811315f0:	10800017 	ldw	r2,0(r2)
811315f4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
811315f8:	e0bff717 	ldw	r2,-36(fp)
811315fc:	1000081e 	bne	r2,zero,81131620 <OSTaskNameSet+0x110>
81131600:	e0bff517 	ldw	r2,-44(fp)
81131604:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131608:	e0bff617 	ldw	r2,-40(fp)
8113160c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
81131610:	e0bfff17 	ldw	r2,-4(fp)
81131614:	00c010c4 	movi	r3,67
81131618:	10c00005 	stb	r3,0(r2)
        return;
8113161c:	00002606 	br	811316b8 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
81131620:	e0bff717 	ldw	r2,-36(fp)
81131624:	10800058 	cmpnei	r2,r2,1
81131628:	1000081e 	bne	r2,zero,8113164c <OSTaskNameSet+0x13c>
8113162c:	e0bff517 	ldw	r2,-44(fp)
81131630:	e0bff815 	stw	r2,-32(fp)
81131634:	e0bff817 	ldw	r2,-32(fp)
81131638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
8113163c:	e0bfff17 	ldw	r2,-4(fp)
81131640:	00c010c4 	movi	r3,67
81131644:	10c00005 	stb	r3,0(r2)
        return;
81131648:	00001b06 	br	811316b8 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
8113164c:	e13ffe17 	ldw	r4,-8(fp)
81131650:	112b2940 	call	8112b294 <OS_StrLen>
81131654:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
81131658:	e0bffa03 	ldbu	r2,-24(fp)
8113165c:	10800830 	cmpltui	r2,r2,32
81131660:	1000081e 	bne	r2,zero,81131684 <OSTaskNameSet+0x174>
81131664:	e0bff517 	ldw	r2,-44(fp)
81131668:	e0bff915 	stw	r2,-28(fp)
8113166c:	e0bff917 	ldw	r2,-28(fp)
81131670:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
81131674:	e0bfff17 	ldw	r2,-4(fp)
81131678:	00c01044 	movi	r3,65
8113167c:	10c00005 	stb	r3,0(r2)
        return;
81131680:	00000d06 	br	811316b8 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
81131684:	e0bff717 	ldw	r2,-36(fp)
81131688:	10801304 	addi	r2,r2,76
8113168c:	e17ffe17 	ldw	r5,-8(fp)
81131690:	1009883a 	mov	r4,r2
81131694:	112b2180 	call	8112b218 <OS_StrCopy>
81131698:	e0bff517 	ldw	r2,-44(fp)
8113169c:	e0bffb15 	stw	r2,-20(fp)
811316a0:	e0bffb17 	ldw	r2,-20(fp)
811316a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811316a8:	e0bfff17 	ldw	r2,-4(fp)
811316ac:	10000005 	stb	zero,0(r2)
811316b0:	00000106 	br	811316b8 <OSTaskNameSet+0x1a8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
811316b4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
811316b8:	e037883a 	mov	sp,fp
811316bc:	dfc00117 	ldw	ra,4(sp)
811316c0:	df000017 	ldw	fp,0(sp)
811316c4:	dec00204 	addi	sp,sp,8
811316c8:	f800283a 	ret

811316cc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
811316cc:	defff404 	addi	sp,sp,-48
811316d0:	de00012e 	bgeu	sp,et,811316d8 <OSTaskResume+0xc>
811316d4:	003b68fa 	trap	3
811316d8:	dfc00b15 	stw	ra,44(sp)
811316dc:	df000a15 	stw	fp,40(sp)
811316e0:	df000a04 	addi	fp,sp,40
811316e4:	2005883a 	mov	r2,r4
811316e8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
811316ec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
811316f0:	e0bfff03 	ldbu	r2,-4(fp)
811316f4:	10800a30 	cmpltui	r2,r2,40
811316f8:	1000021e 	bne	r2,zero,81131704 <OSTaskResume+0x38>
        return (OS_ERR_PRIO_INVALID);
811316fc:	00800a84 	movi	r2,42
81131700:	00006406 	br	81131894 <OSTaskResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131704:	0005303a 	rdctl	r2,status
81131708:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113170c:	e0fffe17 	ldw	r3,-8(fp)
81131710:	00bfff84 	movi	r2,-2
81131714:	1884703a 	and	r2,r3,r2
81131718:	1001703a 	wrctl	status,r2
  
  return context;
8113171c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81131720:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
81131724:	e0ffff03 	ldbu	r3,-4(fp)
81131728:	00a04574 	movhi	r2,33045
8113172c:	10807b04 	addi	r2,r2,492
81131730:	18c7883a 	add	r3,r3,r3
81131734:	18c7883a 	add	r3,r3,r3
81131738:	10c5883a 	add	r2,r2,r3
8113173c:	10800017 	ldw	r2,0(r2)
81131740:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
81131744:	e0bff817 	ldw	r2,-32(fp)
81131748:	1000061e 	bne	r2,zero,81131764 <OSTaskResume+0x98>
8113174c:	e0bff617 	ldw	r2,-40(fp)
81131750:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131754:	e0bff717 	ldw	r2,-36(fp)
81131758:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
8113175c:	00801184 	movi	r2,70
81131760:	00004c06 	br	81131894 <OSTaskResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
81131764:	e0bff817 	ldw	r2,-32(fp)
81131768:	10800058 	cmpnei	r2,r2,1
8113176c:	1000061e 	bne	r2,zero,81131788 <OSTaskResume+0xbc>
81131770:	e0bff617 	ldw	r2,-40(fp)
81131774:	e0bff915 	stw	r2,-28(fp)
81131778:	e0bff917 	ldw	r2,-28(fp)
8113177c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81131780:	008010c4 	movi	r2,67
81131784:	00004306 	br	81131894 <OSTaskResume+0x1c8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
81131788:	e0bff817 	ldw	r2,-32(fp)
8113178c:	10800c03 	ldbu	r2,48(r2)
81131790:	10803fcc 	andi	r2,r2,255
81131794:	1080020c 	andi	r2,r2,8
81131798:	10003926 	beq	r2,zero,81131880 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
8113179c:	e0bff817 	ldw	r2,-32(fp)
811317a0:	10c00c03 	ldbu	r3,48(r2)
811317a4:	00bffdc4 	movi	r2,-9
811317a8:	1884703a 	and	r2,r3,r2
811317ac:	1007883a 	mov	r3,r2
811317b0:	e0bff817 	ldw	r2,-32(fp)
811317b4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
811317b8:	e0bff817 	ldw	r2,-32(fp)
811317bc:	10800c03 	ldbu	r2,48(r2)
811317c0:	10803fcc 	andi	r2,r2,255
811317c4:	1000281e 	bne	r2,zero,81131868 <OSTaskResume+0x19c>
            if (ptcb->OSTCBDly == 0) {
811317c8:	e0bff817 	ldw	r2,-32(fp)
811317cc:	10800b8b 	ldhu	r2,46(r2)
811317d0:	10bfffcc 	andi	r2,r2,65535
811317d4:	10001f1e 	bne	r2,zero,81131854 <OSTaskResume+0x188>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
811317d8:	e0bff817 	ldw	r2,-32(fp)
811317dc:	10c00d83 	ldbu	r3,54(r2)
811317e0:	d0a08703 	ldbu	r2,-32228(gp)
811317e4:	1884b03a 	or	r2,r3,r2
811317e8:	d0a08705 	stb	r2,-32228(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811317ec:	e0bff817 	ldw	r2,-32(fp)
811317f0:	10800d03 	ldbu	r2,52(r2)
811317f4:	10c03fcc 	andi	r3,r2,255
811317f8:	e0bff817 	ldw	r2,-32(fp)
811317fc:	10800d03 	ldbu	r2,52(r2)
81131800:	11003fcc 	andi	r4,r2,255
81131804:	d0a08744 	addi	r2,gp,-32227
81131808:	2085883a 	add	r2,r4,r2
8113180c:	11000003 	ldbu	r4,0(r2)
81131810:	e0bff817 	ldw	r2,-32(fp)
81131814:	10800d43 	ldbu	r2,53(r2)
81131818:	2084b03a 	or	r2,r4,r2
8113181c:	1009883a 	mov	r4,r2
81131820:	d0a08744 	addi	r2,gp,-32227
81131824:	1885883a 	add	r2,r3,r2
81131828:	11000005 	stb	r4,0(r2)
8113182c:	e0bff617 	ldw	r2,-40(fp)
81131830:	e0bffa15 	stw	r2,-24(fp)
81131834:	e0bffa17 	ldw	r2,-24(fp)
81131838:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
8113183c:	d0a07a03 	ldbu	r2,-32280(gp)
81131840:	10803fcc 	andi	r2,r2,255
81131844:	10800058 	cmpnei	r2,r2,1
81131848:	10000b1e 	bne	r2,zero,81131878 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
8113184c:	112b0c40 	call	8112b0c4 <OS_Sched>
81131850:	00000906 	br	81131878 <OSTaskResume+0x1ac>
81131854:	e0bff617 	ldw	r2,-40(fp)
81131858:	e0bffb15 	stw	r2,-20(fp)
8113185c:	e0bffb17 	ldw	r2,-20(fp)
81131860:	1001703a 	wrctl	status,r2
81131864:	00000406 	br	81131878 <OSTaskResume+0x1ac>
81131868:	e0bff617 	ldw	r2,-40(fp)
8113186c:	e0bffc15 	stw	r2,-16(fp)
81131870:	e0bffc17 	ldw	r2,-16(fp)
81131874:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
81131878:	0005883a 	mov	r2,zero
8113187c:	00000506 	br	81131894 <OSTaskResume+0x1c8>
81131880:	e0bff617 	ldw	r2,-40(fp)
81131884:	e0bffd15 	stw	r2,-12(fp)
81131888:	e0bffd17 	ldw	r2,-12(fp)
8113188c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
81131890:	00801104 	movi	r2,68
}
81131894:	e037883a 	mov	sp,fp
81131898:	dfc00117 	ldw	ra,4(sp)
8113189c:	df000017 	ldw	fp,0(sp)
811318a0:	dec00204 	addi	sp,sp,8
811318a4:	f800283a 	ret

811318a8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
811318a8:	defff304 	addi	sp,sp,-52
811318ac:	de00012e 	bgeu	sp,et,811318b4 <OSTaskStkChk+0xc>
811318b0:	003b68fa 	trap	3
811318b4:	df000c15 	stw	fp,48(sp)
811318b8:	df000c04 	addi	fp,sp,48
811318bc:	2005883a 	mov	r2,r4
811318c0:	e17fff15 	stw	r5,-4(fp)
811318c4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811318c8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
811318cc:	e0bffe03 	ldbu	r2,-8(fp)
811318d0:	10800a70 	cmpltui	r2,r2,41
811318d4:	1000051e 	bne	r2,zero,811318ec <OSTaskStkChk+0x44>
        if (prio != OS_PRIO_SELF) {
811318d8:	e0bffe03 	ldbu	r2,-8(fp)
811318dc:	10803fe0 	cmpeqi	r2,r2,255
811318e0:	1000021e 	bne	r2,zero,811318ec <OSTaskStkChk+0x44>
            return (OS_ERR_PRIO_INVALID);
811318e4:	00800a84 	movi	r2,42
811318e8:	00005d06 	br	81131a60 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
811318ec:	e0bfff17 	ldw	r2,-4(fp)
811318f0:	1000021e 	bne	r2,zero,811318fc <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
811318f4:	00800244 	movi	r2,9
811318f8:	00005906 	br	81131a60 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
811318fc:	e0bfff17 	ldw	r2,-4(fp)
81131900:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
81131904:	e0bfff17 	ldw	r2,-4(fp)
81131908:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113190c:	0005303a 	rdctl	r2,status
81131910:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131914:	e0fffd17 	ldw	r3,-12(fp)
81131918:	00bfff84 	movi	r2,-2
8113191c:	1884703a 	and	r2,r3,r2
81131920:	1001703a 	wrctl	status,r2
  
  return context;
81131924:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
81131928:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
8113192c:	e0bffe03 	ldbu	r2,-8(fp)
81131930:	10803fd8 	cmpnei	r2,r2,255
81131934:	1000031e 	bne	r2,zero,81131944 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
81131938:	d0a08b17 	ldw	r2,-32212(gp)
8113193c:	10800c83 	ldbu	r2,50(r2)
81131940:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81131944:	e0fffe03 	ldbu	r3,-8(fp)
81131948:	00a04574 	movhi	r2,33045
8113194c:	10807b04 	addi	r2,r2,492
81131950:	18c7883a 	add	r3,r3,r3
81131954:	18c7883a 	add	r3,r3,r3
81131958:	10c5883a 	add	r2,r2,r3
8113195c:	10800017 	ldw	r2,0(r2)
81131960:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
81131964:	e0bff817 	ldw	r2,-32(fp)
81131968:	1000061e 	bne	r2,zero,81131984 <OSTaskStkChk+0xdc>
8113196c:	e0bff617 	ldw	r2,-40(fp)
81131970:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131974:	e0bff717 	ldw	r2,-36(fp)
81131978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8113197c:	008010c4 	movi	r2,67
81131980:	00003706 	br	81131a60 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
81131984:	e0bff817 	ldw	r2,-32(fp)
81131988:	10800058 	cmpnei	r2,r2,1
8113198c:	1000061e 	bne	r2,zero,811319a8 <OSTaskStkChk+0x100>
81131990:	e0bff617 	ldw	r2,-40(fp)
81131994:	e0bff915 	stw	r2,-28(fp)
81131998:	e0bff917 	ldw	r2,-28(fp)
8113199c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
811319a0:	008010c4 	movi	r2,67
811319a4:	00002e06 	br	81131a60 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
811319a8:	e0bff817 	ldw	r2,-32(fp)
811319ac:	1080040b 	ldhu	r2,16(r2)
811319b0:	10bfffcc 	andi	r2,r2,65535
811319b4:	1080004c 	andi	r2,r2,1
811319b8:	1000061e 	bne	r2,zero,811319d4 <OSTaskStkChk+0x12c>
811319bc:	e0bff617 	ldw	r2,-40(fp)
811319c0:	e0bffa15 	stw	r2,-24(fp)
811319c4:	e0bffa17 	ldw	r2,-24(fp)
811319c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
811319cc:	00801144 	movi	r2,69
811319d0:	00002306 	br	81131a60 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
811319d4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
811319d8:	e0bff817 	ldw	r2,-32(fp)
811319dc:	10800317 	ldw	r2,12(r2)
811319e0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
811319e4:	e0bff817 	ldw	r2,-32(fp)
811319e8:	10800217 	ldw	r2,8(r2)
811319ec:	e0bff415 	stw	r2,-48(fp)
811319f0:	e0bff617 	ldw	r2,-40(fp)
811319f4:	e0bffb15 	stw	r2,-20(fp)
811319f8:	e0bffb17 	ldw	r2,-20(fp)
811319fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
81131a00:	00000306 	br	81131a10 <OSTaskStkChk+0x168>
        nfree++;
81131a04:	e0bff517 	ldw	r2,-44(fp)
81131a08:	10800044 	addi	r2,r2,1
81131a0c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
81131a10:	e0bff417 	ldw	r2,-48(fp)
81131a14:	10c00104 	addi	r3,r2,4
81131a18:	e0fff415 	stw	r3,-48(fp)
81131a1c:	10800017 	ldw	r2,0(r2)
81131a20:	103ff826 	beq	r2,zero,81131a04 <__reset+0xfb111a04>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
81131a24:	e0bff517 	ldw	r2,-44(fp)
81131a28:	1085883a 	add	r2,r2,r2
81131a2c:	1085883a 	add	r2,r2,r2
81131a30:	1007883a 	mov	r3,r2
81131a34:	e0bfff17 	ldw	r2,-4(fp)
81131a38:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
81131a3c:	e0fffc17 	ldw	r3,-16(fp)
81131a40:	e0bff517 	ldw	r2,-44(fp)
81131a44:	1885c83a 	sub	r2,r3,r2
81131a48:	1085883a 	add	r2,r2,r2
81131a4c:	1085883a 	add	r2,r2,r2
81131a50:	1007883a 	mov	r3,r2
81131a54:	e0bfff17 	ldw	r2,-4(fp)
81131a58:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
81131a5c:	0005883a 	mov	r2,zero
}
81131a60:	e037883a 	mov	sp,fp
81131a64:	df000017 	ldw	fp,0(sp)
81131a68:	dec00104 	addi	sp,sp,4
81131a6c:	f800283a 	ret

81131a70 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
81131a70:	defff504 	addi	sp,sp,-44
81131a74:	de00012e 	bgeu	sp,et,81131a7c <OSTaskSuspend+0xc>
81131a78:	003b68fa 	trap	3
81131a7c:	dfc00a15 	stw	ra,40(sp)
81131a80:	df000915 	stw	fp,36(sp)
81131a84:	df000904 	addi	fp,sp,36
81131a88:	2005883a 	mov	r2,r4
81131a8c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81131a90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
81131a94:	e0bfff03 	ldbu	r2,-4(fp)
81131a98:	10800a18 	cmpnei	r2,r2,40
81131a9c:	1000021e 	bne	r2,zero,81131aa8 <OSTaskSuspend+0x38>
        return (OS_ERR_TASK_SUSPEND_IDLE);
81131aa0:	008011c4 	movi	r2,71
81131aa4:	00006806 	br	81131c48 <OSTaskSuspend+0x1d8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
81131aa8:	e0bfff03 	ldbu	r2,-4(fp)
81131aac:	10800a30 	cmpltui	r2,r2,40
81131ab0:	1000051e 	bne	r2,zero,81131ac8 <OSTaskSuspend+0x58>
        if (prio != OS_PRIO_SELF) {
81131ab4:	e0bfff03 	ldbu	r2,-4(fp)
81131ab8:	10803fe0 	cmpeqi	r2,r2,255
81131abc:	1000021e 	bne	r2,zero,81131ac8 <OSTaskSuspend+0x58>
            return (OS_ERR_PRIO_INVALID);
81131ac0:	00800a84 	movi	r2,42
81131ac4:	00006006 	br	81131c48 <OSTaskSuspend+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131ac8:	0005303a 	rdctl	r2,status
81131acc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131ad0:	e0fffe17 	ldw	r3,-8(fp)
81131ad4:	00bfff84 	movi	r2,-2
81131ad8:	1884703a 	and	r2,r3,r2
81131adc:	1001703a 	wrctl	status,r2
  
  return context;
81131ae0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
81131ae4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
81131ae8:	e0bfff03 	ldbu	r2,-4(fp)
81131aec:	10803fd8 	cmpnei	r2,r2,255
81131af0:	1000061e 	bne	r2,zero,81131b0c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
81131af4:	d0a08b17 	ldw	r2,-32212(gp)
81131af8:	10800c83 	ldbu	r2,50(r2)
81131afc:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
81131b00:	00800044 	movi	r2,1
81131b04:	e0bff705 	stb	r2,-36(fp)
81131b08:	00000906 	br	81131b30 <OSTaskSuspend+0xc0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
81131b0c:	d0a08b17 	ldw	r2,-32212(gp)
81131b10:	10800c83 	ldbu	r2,50(r2)
81131b14:	10c03fcc 	andi	r3,r2,255
81131b18:	e0bfff03 	ldbu	r2,-4(fp)
81131b1c:	1880031e 	bne	r3,r2,81131b2c <OSTaskSuspend+0xbc>
        self = OS_TRUE;
81131b20:	00800044 	movi	r2,1
81131b24:	e0bff705 	stb	r2,-36(fp)
81131b28:	00000106 	br	81131b30 <OSTaskSuspend+0xc0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
81131b2c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81131b30:	e0ffff03 	ldbu	r3,-4(fp)
81131b34:	00a04574 	movhi	r2,33045
81131b38:	10807b04 	addi	r2,r2,492
81131b3c:	18c7883a 	add	r3,r3,r3
81131b40:	18c7883a 	add	r3,r3,r3
81131b44:	10c5883a 	add	r2,r2,r3
81131b48:	10800017 	ldw	r2,0(r2)
81131b4c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
81131b50:	e0bffa17 	ldw	r2,-24(fp)
81131b54:	1000061e 	bne	r2,zero,81131b70 <OSTaskSuspend+0x100>
81131b58:	e0bff817 	ldw	r2,-32(fp)
81131b5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131b60:	e0bff917 	ldw	r2,-28(fp)
81131b64:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
81131b68:	00801204 	movi	r2,72
81131b6c:	00003606 	br	81131c48 <OSTaskSuspend+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
81131b70:	e0bffa17 	ldw	r2,-24(fp)
81131b74:	10800058 	cmpnei	r2,r2,1
81131b78:	1000061e 	bne	r2,zero,81131b94 <OSTaskSuspend+0x124>
81131b7c:	e0bff817 	ldw	r2,-32(fp)
81131b80:	e0bffb15 	stw	r2,-20(fp)
81131b84:	e0bffb17 	ldw	r2,-20(fp)
81131b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81131b8c:	008010c4 	movi	r2,67
81131b90:	00002d06 	br	81131c48 <OSTaskSuspend+0x1d8>
    }
    y            = ptcb->OSTCBY;
81131b94:	e0bffa17 	ldw	r2,-24(fp)
81131b98:	10800d03 	ldbu	r2,52(r2)
81131b9c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
81131ba0:	e0fffd03 	ldbu	r3,-12(fp)
81131ba4:	e13ffd03 	ldbu	r4,-12(fp)
81131ba8:	d0a08744 	addi	r2,gp,-32227
81131bac:	2085883a 	add	r2,r4,r2
81131bb0:	10800003 	ldbu	r2,0(r2)
81131bb4:	1009883a 	mov	r4,r2
81131bb8:	e0bffa17 	ldw	r2,-24(fp)
81131bbc:	10800d43 	ldbu	r2,53(r2)
81131bc0:	0084303a 	nor	r2,zero,r2
81131bc4:	2084703a 	and	r2,r4,r2
81131bc8:	1009883a 	mov	r4,r2
81131bcc:	d0a08744 	addi	r2,gp,-32227
81131bd0:	1885883a 	add	r2,r3,r2
81131bd4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81131bd8:	e0fffd03 	ldbu	r3,-12(fp)
81131bdc:	d0a08744 	addi	r2,gp,-32227
81131be0:	1885883a 	add	r2,r3,r2
81131be4:	10800003 	ldbu	r2,0(r2)
81131be8:	10803fcc 	andi	r2,r2,255
81131bec:	1000071e 	bne	r2,zero,81131c0c <OSTaskSuspend+0x19c>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
81131bf0:	e0bffa17 	ldw	r2,-24(fp)
81131bf4:	10800d83 	ldbu	r2,54(r2)
81131bf8:	0084303a 	nor	r2,zero,r2
81131bfc:	1007883a 	mov	r3,r2
81131c00:	d0a08703 	ldbu	r2,-32228(gp)
81131c04:	1884703a 	and	r2,r3,r2
81131c08:	d0a08705 	stb	r2,-32228(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
81131c0c:	e0bffa17 	ldw	r2,-24(fp)
81131c10:	10800c03 	ldbu	r2,48(r2)
81131c14:	10800214 	ori	r2,r2,8
81131c18:	1007883a 	mov	r3,r2
81131c1c:	e0bffa17 	ldw	r2,-24(fp)
81131c20:	10c00c05 	stb	r3,48(r2)
81131c24:	e0bff817 	ldw	r2,-32(fp)
81131c28:	e0bffc15 	stw	r2,-16(fp)
81131c2c:	e0bffc17 	ldw	r2,-16(fp)
81131c30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
81131c34:	e0bff703 	ldbu	r2,-36(fp)
81131c38:	10800058 	cmpnei	r2,r2,1
81131c3c:	1000011e 	bne	r2,zero,81131c44 <OSTaskSuspend+0x1d4>
        OS_Sched();                                             /* Find new highest priority task      */
81131c40:	112b0c40 	call	8112b0c4 <OS_Sched>
    }
    return (OS_ERR_NONE);
81131c44:	0005883a 	mov	r2,zero
}
81131c48:	e037883a 	mov	sp,fp
81131c4c:	dfc00117 	ldw	ra,4(sp)
81131c50:	df000017 	ldw	fp,0(sp)
81131c54:	dec00204 	addi	sp,sp,8
81131c58:	f800283a 	ret

81131c5c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
81131c5c:	defff604 	addi	sp,sp,-40
81131c60:	de00012e 	bgeu	sp,et,81131c68 <OSTaskQuery+0xc>
81131c64:	003b68fa 	trap	3
81131c68:	dfc00915 	stw	ra,36(sp)
81131c6c:	df000815 	stw	fp,32(sp)
81131c70:	df000804 	addi	fp,sp,32
81131c74:	2005883a 	mov	r2,r4
81131c78:	e17fff15 	stw	r5,-4(fp)
81131c7c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81131c80:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
81131c84:	e0bffe03 	ldbu	r2,-8(fp)
81131c88:	10800a70 	cmpltui	r2,r2,41
81131c8c:	1000051e 	bne	r2,zero,81131ca4 <OSTaskQuery+0x48>
        if (prio != OS_PRIO_SELF) {
81131c90:	e0bffe03 	ldbu	r2,-8(fp)
81131c94:	10803fe0 	cmpeqi	r2,r2,255
81131c98:	1000021e 	bne	r2,zero,81131ca4 <OSTaskQuery+0x48>
            return (OS_ERR_PRIO_INVALID);
81131c9c:	00800a84 	movi	r2,42
81131ca0:	00003406 	br	81131d74 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
81131ca4:	e0bfff17 	ldw	r2,-4(fp)
81131ca8:	1000021e 	bne	r2,zero,81131cb4 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
81131cac:	00800244 	movi	r2,9
81131cb0:	00003006 	br	81131d74 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131cb4:	0005303a 	rdctl	r2,status
81131cb8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131cbc:	e0fffd17 	ldw	r3,-12(fp)
81131cc0:	00bfff84 	movi	r2,-2
81131cc4:	1884703a 	and	r2,r3,r2
81131cc8:	1001703a 	wrctl	status,r2
  
  return context;
81131ccc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81131cd0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
81131cd4:	e0bffe03 	ldbu	r2,-8(fp)
81131cd8:	10803fd8 	cmpnei	r2,r2,255
81131cdc:	1000031e 	bne	r2,zero,81131cec <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
81131ce0:	d0a08b17 	ldw	r2,-32212(gp)
81131ce4:	10800c83 	ldbu	r2,50(r2)
81131ce8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81131cec:	e0fffe03 	ldbu	r3,-8(fp)
81131cf0:	00a04574 	movhi	r2,33045
81131cf4:	10807b04 	addi	r2,r2,492
81131cf8:	18c7883a 	add	r3,r3,r3
81131cfc:	18c7883a 	add	r3,r3,r3
81131d00:	10c5883a 	add	r2,r2,r3
81131d04:	10800017 	ldw	r2,0(r2)
81131d08:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
81131d0c:	e0bffa17 	ldw	r2,-24(fp)
81131d10:	1000061e 	bne	r2,zero,81131d2c <OSTaskQuery+0xd0>
81131d14:	e0bff817 	ldw	r2,-32(fp)
81131d18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131d1c:	e0bff917 	ldw	r2,-28(fp)
81131d20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
81131d24:	00800a44 	movi	r2,41
81131d28:	00001206 	br	81131d74 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
81131d2c:	e0bffa17 	ldw	r2,-24(fp)
81131d30:	10800058 	cmpnei	r2,r2,1
81131d34:	1000061e 	bne	r2,zero,81131d50 <OSTaskQuery+0xf4>
81131d38:	e0bff817 	ldw	r2,-32(fp)
81131d3c:	e0bffb15 	stw	r2,-20(fp)
81131d40:	e0bffb17 	ldw	r2,-20(fp)
81131d44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81131d48:	008010c4 	movi	r2,67
81131d4c:	00000906 	br	81131d74 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
81131d50:	01801b04 	movi	r6,108
81131d54:	e17ffa17 	ldw	r5,-24(fp)
81131d58:	e13fff17 	ldw	r4,-4(fp)
81131d5c:	112b0540 	call	8112b054 <OS_MemCopy>
81131d60:	e0bff817 	ldw	r2,-32(fp)
81131d64:	e0bffc15 	stw	r2,-16(fp)
81131d68:	e0bffc17 	ldw	r2,-16(fp)
81131d6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81131d70:	0005883a 	mov	r2,zero
}
81131d74:	e037883a 	mov	sp,fp
81131d78:	dfc00117 	ldw	ra,4(sp)
81131d7c:	df000017 	ldw	fp,0(sp)
81131d80:	dec00204 	addi	sp,sp,8
81131d84:	f800283a 	ret

81131d88 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
81131d88:	defffc04 	addi	sp,sp,-16
81131d8c:	de00012e 	bgeu	sp,et,81131d94 <OS_TaskStkClr+0xc>
81131d90:	003b68fa 	trap	3
81131d94:	df000315 	stw	fp,12(sp)
81131d98:	df000304 	addi	fp,sp,12
81131d9c:	e13ffd15 	stw	r4,-12(fp)
81131da0:	e17ffe15 	stw	r5,-8(fp)
81131da4:	3005883a 	mov	r2,r6
81131da8:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
81131dac:	e0bfff0b 	ldhu	r2,-4(fp)
81131db0:	1080004c 	andi	r2,r2,1
81131db4:	10000d26 	beq	r2,zero,81131dec <OS_TaskStkClr+0x64>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
81131db8:	e0bfff0b 	ldhu	r2,-4(fp)
81131dbc:	1080008c 	andi	r2,r2,2
81131dc0:	10000a26 	beq	r2,zero,81131dec <OS_TaskStkClr+0x64>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81131dc4:	00000706 	br	81131de4 <OS_TaskStkClr+0x5c>
                size--;
81131dc8:	e0bffe17 	ldw	r2,-8(fp)
81131dcc:	10bfffc4 	addi	r2,r2,-1
81131dd0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
81131dd4:	e0bffd17 	ldw	r2,-12(fp)
81131dd8:	10c00104 	addi	r3,r2,4
81131ddc:	e0fffd15 	stw	r3,-12(fp)
81131de0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
81131de4:	e0bffe17 	ldw	r2,-8(fp)
81131de8:	103ff71e 	bne	r2,zero,81131dc8 <__reset+0xfb111dc8>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
81131dec:	0001883a 	nop
81131df0:	e037883a 	mov	sp,fp
81131df4:	df000017 	ldw	fp,0(sp)
81131df8:	dec00104 	addi	sp,sp,4
81131dfc:	f800283a 	ret

81131e00 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
81131e00:	defff904 	addi	sp,sp,-28
81131e04:	de00012e 	bgeu	sp,et,81131e0c <OSTimeDly+0xc>
81131e08:	003b68fa 	trap	3
81131e0c:	dfc00615 	stw	ra,24(sp)
81131e10:	df000515 	stw	fp,20(sp)
81131e14:	df000504 	addi	fp,sp,20
81131e18:	2005883a 	mov	r2,r4
81131e1c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81131e20:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81131e24:	d0a08a03 	ldbu	r2,-32216(gp)
81131e28:	10803fcc 	andi	r2,r2,255
81131e2c:	1000311e 	bne	r2,zero,81131ef4 <OSTimeDly+0xf4>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
81131e30:	e0bfff0b 	ldhu	r2,-4(fp)
81131e34:	10003026 	beq	r2,zero,81131ef8 <OSTimeDly+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131e38:	0005303a 	rdctl	r2,status
81131e3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131e40:	e0fffe17 	ldw	r3,-8(fp)
81131e44:	00bfff84 	movi	r2,-2
81131e48:	1884703a 	and	r2,r3,r2
81131e4c:	1001703a 	wrctl	status,r2
  
  return context;
81131e50:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
81131e54:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
81131e58:	d0a08b17 	ldw	r2,-32212(gp)
81131e5c:	10800d03 	ldbu	r2,52(r2)
81131e60:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
81131e64:	e0fffd03 	ldbu	r3,-12(fp)
81131e68:	e13ffd03 	ldbu	r4,-12(fp)
81131e6c:	d0a08744 	addi	r2,gp,-32227
81131e70:	2085883a 	add	r2,r4,r2
81131e74:	10800003 	ldbu	r2,0(r2)
81131e78:	1009883a 	mov	r4,r2
81131e7c:	d0a08b17 	ldw	r2,-32212(gp)
81131e80:	10800d43 	ldbu	r2,53(r2)
81131e84:	0084303a 	nor	r2,zero,r2
81131e88:	2084703a 	and	r2,r4,r2
81131e8c:	1009883a 	mov	r4,r2
81131e90:	d0a08744 	addi	r2,gp,-32227
81131e94:	1885883a 	add	r2,r3,r2
81131e98:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
81131e9c:	e0fffd03 	ldbu	r3,-12(fp)
81131ea0:	d0a08744 	addi	r2,gp,-32227
81131ea4:	1885883a 	add	r2,r3,r2
81131ea8:	10800003 	ldbu	r2,0(r2)
81131eac:	10803fcc 	andi	r2,r2,255
81131eb0:	1000071e 	bne	r2,zero,81131ed0 <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81131eb4:	d0a08b17 	ldw	r2,-32212(gp)
81131eb8:	10800d83 	ldbu	r2,54(r2)
81131ebc:	0084303a 	nor	r2,zero,r2
81131ec0:	1007883a 	mov	r3,r2
81131ec4:	d0a08703 	ldbu	r2,-32228(gp)
81131ec8:	1884703a 	and	r2,r3,r2
81131ecc:	d0a08705 	stb	r2,-32228(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
81131ed0:	d0a08b17 	ldw	r2,-32212(gp)
81131ed4:	e0ffff0b 	ldhu	r3,-4(fp)
81131ed8:	10c00b8d 	sth	r3,46(r2)
81131edc:	e0bffb17 	ldw	r2,-20(fp)
81131ee0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131ee4:	e0bffc17 	ldw	r2,-16(fp)
81131ee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
81131eec:	112b0c40 	call	8112b0c4 <OS_Sched>
81131ef0:	00000106 	br	81131ef8 <OSTimeDly+0xf8>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
81131ef4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
81131ef8:	e037883a 	mov	sp,fp
81131efc:	dfc00117 	ldw	ra,4(sp)
81131f00:	df000017 	ldw	fp,0(sp)
81131f04:	dec00204 	addi	sp,sp,8
81131f08:	f800283a 	ret

81131f0c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
81131f0c:	defff804 	addi	sp,sp,-32
81131f10:	de00012e 	bgeu	sp,et,81131f18 <OSTimeDlyHMSM+0xc>
81131f14:	003b68fa 	trap	3
81131f18:	dfc00715 	stw	ra,28(sp)
81131f1c:	df000615 	stw	fp,24(sp)
81131f20:	df000604 	addi	fp,sp,24
81131f24:	2015883a 	mov	r10,r4
81131f28:	2809883a 	mov	r4,r5
81131f2c:	3007883a 	mov	r3,r6
81131f30:	3805883a 	mov	r2,r7
81131f34:	e2bffc05 	stb	r10,-16(fp)
81131f38:	e13ffd05 	stb	r4,-12(fp)
81131f3c:	e0fffe05 	stb	r3,-8(fp)
81131f40:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81131f44:	d0a08a03 	ldbu	r2,-32216(gp)
81131f48:	10803fcc 	andi	r2,r2,255
81131f4c:	10000226 	beq	r2,zero,81131f58 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
81131f50:	00801544 	movi	r2,85
81131f54:	00004106 	br	8113205c <OSTimeDlyHMSM+0x150>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
81131f58:	e0bffc03 	ldbu	r2,-16(fp)
81131f5c:	1000081e 	bne	r2,zero,81131f80 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
81131f60:	e0bffd03 	ldbu	r2,-12(fp)
81131f64:	1000061e 	bne	r2,zero,81131f80 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
81131f68:	e0bffe03 	ldbu	r2,-8(fp)
81131f6c:	1000041e 	bne	r2,zero,81131f80 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
81131f70:	e0bfff0b 	ldhu	r2,-4(fp)
81131f74:	1000021e 	bne	r2,zero,81131f80 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
81131f78:	00801504 	movi	r2,84
81131f7c:	00003706 	br	8113205c <OSTimeDlyHMSM+0x150>
                }
            }
        }
    }
    if (minutes > 59) {
81131f80:	e0bffd03 	ldbu	r2,-12(fp)
81131f84:	10800f30 	cmpltui	r2,r2,60
81131f88:	1000021e 	bne	r2,zero,81131f94 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
81131f8c:	00801444 	movi	r2,81
81131f90:	00003206 	br	8113205c <OSTimeDlyHMSM+0x150>
    }
    if (seconds > 59) {
81131f94:	e0bffe03 	ldbu	r2,-8(fp)
81131f98:	10800f30 	cmpltui	r2,r2,60
81131f9c:	1000021e 	bne	r2,zero,81131fa8 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
81131fa0:	00801484 	movi	r2,82
81131fa4:	00002d06 	br	8113205c <OSTimeDlyHMSM+0x150>
    }
    if (ms > 999) {
81131fa8:	e0bfff0b 	ldhu	r2,-4(fp)
81131fac:	1080fa30 	cmpltui	r2,r2,1000
81131fb0:	1000021e 	bne	r2,zero,81131fbc <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
81131fb4:	008014c4 	movi	r2,83
81131fb8:	00002806 	br	8113205c <OSTimeDlyHMSM+0x150>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81131fbc:	e0bffc03 	ldbu	r2,-16(fp)
81131fc0:	10c38424 	muli	r3,r2,3600
81131fc4:	e0bffd03 	ldbu	r2,-12(fp)
81131fc8:	10800f24 	muli	r2,r2,60
81131fcc:	1887883a 	add	r3,r3,r2
81131fd0:	e0bffe03 	ldbu	r2,-8(fp)
81131fd4:	1885883a 	add	r2,r3,r2
81131fd8:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
81131fdc:	e0bfff0b 	ldhu	r2,-4(fp)
81131fe0:	10c0fa24 	muli	r3,r2,1000
81131fe4:	008418b4 	movhi	r2,4194
81131fe8:	109374c4 	addi	r2,r2,19923
81131fec:	188a383a 	mulxuu	r5,r3,r2
81131ff0:	1885383a 	mul	r2,r3,r2
81131ff4:	1011883a 	mov	r8,r2
81131ff8:	2813883a 	mov	r9,r5
81131ffc:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
81132000:	2085883a 	add	r2,r4,r2
81132004:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
81132008:	e0bffb17 	ldw	r2,-20(fp)
8113200c:	1004d43a 	srli	r2,r2,16
81132010:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
81132014:	e0bffb17 	ldw	r2,-20(fp)
81132018:	10bfffcc 	andi	r2,r2,65535
8113201c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
81132020:	e0bffb17 	ldw	r2,-20(fp)
81132024:	10bfffcc 	andi	r2,r2,65535
81132028:	1009883a 	mov	r4,r2
8113202c:	1131e000 	call	81131e00 <OSTimeDly>
    while (loops > 0) {
81132030:	00000706 	br	81132050 <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
81132034:	01200014 	movui	r4,32768
81132038:	1131e000 	call	81131e00 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
8113203c:	01200014 	movui	r4,32768
81132040:	1131e000 	call	81131e00 <OSTimeDly>
        loops--;
81132044:	e0bffa0b 	ldhu	r2,-24(fp)
81132048:	10bfffc4 	addi	r2,r2,-1
8113204c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
81132050:	e0bffa0b 	ldhu	r2,-24(fp)
81132054:	103ff71e 	bne	r2,zero,81132034 <__reset+0xfb112034>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
81132058:	0005883a 	mov	r2,zero
}
8113205c:	e037883a 	mov	sp,fp
81132060:	dfc00117 	ldw	ra,4(sp)
81132064:	df000017 	ldw	fp,0(sp)
81132068:	dec00204 	addi	sp,sp,8
8113206c:	f800283a 	ret

81132070 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
81132070:	defff504 	addi	sp,sp,-44
81132074:	de00012e 	bgeu	sp,et,8113207c <OSTimeDlyResume+0xc>
81132078:	003b68fa 	trap	3
8113207c:	dfc00a15 	stw	ra,40(sp)
81132080:	df000915 	stw	fp,36(sp)
81132084:	df000904 	addi	fp,sp,36
81132088:	2005883a 	mov	r2,r4
8113208c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81132090:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
81132094:	e0bfff03 	ldbu	r2,-4(fp)
81132098:	10800a30 	cmpltui	r2,r2,40
8113209c:	1000021e 	bne	r2,zero,811320a8 <OSTimeDlyResume+0x38>
        return (OS_ERR_PRIO_INVALID);
811320a0:	00800a84 	movi	r2,42
811320a4:	00006406 	br	81132238 <OSTimeDlyResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811320a8:	0005303a 	rdctl	r2,status
811320ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811320b0:	e0fffe17 	ldw	r3,-8(fp)
811320b4:	00bfff84 	movi	r2,-2
811320b8:	1884703a 	and	r2,r3,r2
811320bc:	1001703a 	wrctl	status,r2
  
  return context;
811320c0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
811320c4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
811320c8:	e0ffff03 	ldbu	r3,-4(fp)
811320cc:	00a04574 	movhi	r2,33045
811320d0:	10807b04 	addi	r2,r2,492
811320d4:	18c7883a 	add	r3,r3,r3
811320d8:	18c7883a 	add	r3,r3,r3
811320dc:	10c5883a 	add	r2,r2,r3
811320e0:	10800017 	ldw	r2,0(r2)
811320e4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
811320e8:	e0bff917 	ldw	r2,-28(fp)
811320ec:	1000061e 	bne	r2,zero,81132108 <OSTimeDlyResume+0x98>
811320f0:	e0bff717 	ldw	r2,-36(fp)
811320f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811320f8:	e0bff817 	ldw	r2,-32(fp)
811320fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81132100:	008010c4 	movi	r2,67
81132104:	00004c06 	br	81132238 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {
81132108:	e0bff917 	ldw	r2,-28(fp)
8113210c:	10800058 	cmpnei	r2,r2,1
81132110:	1000061e 	bne	r2,zero,8113212c <OSTimeDlyResume+0xbc>
81132114:	e0bff717 	ldw	r2,-36(fp)
81132118:	e0bffa15 	stw	r2,-24(fp)
8113211c:	e0bffa17 	ldw	r2,-24(fp)
81132120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
81132124:	008010c4 	movi	r2,67
81132128:	00004306 	br	81132238 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
8113212c:	e0bff917 	ldw	r2,-28(fp)
81132130:	10800b8b 	ldhu	r2,46(r2)
81132134:	10bfffcc 	andi	r2,r2,65535
81132138:	1000061e 	bne	r2,zero,81132154 <OSTimeDlyResume+0xe4>
8113213c:	e0bff717 	ldw	r2,-36(fp)
81132140:	e0bffb15 	stw	r2,-20(fp)
81132144:	e0bffb17 	ldw	r2,-20(fp)
81132148:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
8113214c:	00801404 	movi	r2,80
81132150:	00003906 	br	81132238 <OSTimeDlyResume+0x1c8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
81132154:	e0bff917 	ldw	r2,-28(fp)
81132158:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8113215c:	e0bff917 	ldw	r2,-28(fp)
81132160:	10800c03 	ldbu	r2,48(r2)
81132164:	10803fcc 	andi	r2,r2,255
81132168:	10800dcc 	andi	r2,r2,55
8113216c:	10000b26 	beq	r2,zero,8113219c <OSTimeDlyResume+0x12c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
81132170:	e0bff917 	ldw	r2,-28(fp)
81132174:	10c00c03 	ldbu	r3,48(r2)
81132178:	00bff204 	movi	r2,-56
8113217c:	1884703a 	and	r2,r3,r2
81132180:	1007883a 	mov	r3,r2
81132184:	e0bff917 	ldw	r2,-28(fp)
81132188:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
8113218c:	e0bff917 	ldw	r2,-28(fp)
81132190:	00c00044 	movi	r3,1
81132194:	10c00c45 	stb	r3,49(r2)
81132198:	00000206 	br	811321a4 <OSTimeDlyResume+0x134>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
8113219c:	e0bff917 	ldw	r2,-28(fp)
811321a0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
811321a4:	e0bff917 	ldw	r2,-28(fp)
811321a8:	10800c03 	ldbu	r2,48(r2)
811321ac:	10803fcc 	andi	r2,r2,255
811321b0:	1080020c 	andi	r2,r2,8
811321b4:	10001b1e 	bne	r2,zero,81132224 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
811321b8:	e0bff917 	ldw	r2,-28(fp)
811321bc:	10c00d83 	ldbu	r3,54(r2)
811321c0:	d0a08703 	ldbu	r2,-32228(gp)
811321c4:	1884b03a 	or	r2,r3,r2
811321c8:	d0a08705 	stb	r2,-32228(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811321cc:	e0bff917 	ldw	r2,-28(fp)
811321d0:	10800d03 	ldbu	r2,52(r2)
811321d4:	10c03fcc 	andi	r3,r2,255
811321d8:	e0bff917 	ldw	r2,-28(fp)
811321dc:	10800d03 	ldbu	r2,52(r2)
811321e0:	11003fcc 	andi	r4,r2,255
811321e4:	d0a08744 	addi	r2,gp,-32227
811321e8:	2085883a 	add	r2,r4,r2
811321ec:	11000003 	ldbu	r4,0(r2)
811321f0:	e0bff917 	ldw	r2,-28(fp)
811321f4:	10800d43 	ldbu	r2,53(r2)
811321f8:	2084b03a 	or	r2,r4,r2
811321fc:	1009883a 	mov	r4,r2
81132200:	d0a08744 	addi	r2,gp,-32227
81132204:	1885883a 	add	r2,r3,r2
81132208:	11000005 	stb	r4,0(r2)
8113220c:	e0bff717 	ldw	r2,-36(fp)
81132210:	e0bffc15 	stw	r2,-16(fp)
81132214:	e0bffc17 	ldw	r2,-16(fp)
81132218:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
8113221c:	112b0c40 	call	8112b0c4 <OS_Sched>
81132220:	00000406 	br	81132234 <OSTimeDlyResume+0x1c4>
81132224:	e0bff717 	ldw	r2,-36(fp)
81132228:	e0bffd15 	stw	r2,-12(fp)
8113222c:	e0bffd17 	ldw	r2,-12(fp)
81132230:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
81132234:	0005883a 	mov	r2,zero
}
81132238:	e037883a 	mov	sp,fp
8113223c:	dfc00117 	ldw	ra,4(sp)
81132240:	df000017 	ldw	fp,0(sp)
81132244:	dec00204 	addi	sp,sp,8
81132248:	f800283a 	ret

8113224c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
8113224c:	defffb04 	addi	sp,sp,-20
81132250:	de00012e 	bgeu	sp,et,81132258 <OSTimeGet+0xc>
81132254:	003b68fa 	trap	3
81132258:	df000415 	stw	fp,16(sp)
8113225c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81132260:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132264:	0005303a 	rdctl	r2,status
81132268:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113226c:	e0fffe17 	ldw	r3,-8(fp)
81132270:	00bfff84 	movi	r2,-2
81132274:	1884703a 	and	r2,r3,r2
81132278:	1001703a 	wrctl	status,r2
  
  return context;
8113227c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81132280:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
81132284:	d0a08d17 	ldw	r2,-32204(gp)
81132288:	e0bffd15 	stw	r2,-12(fp)
8113228c:	e0bffc17 	ldw	r2,-16(fp)
81132290:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132294:	e0bfff17 	ldw	r2,-4(fp)
81132298:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
8113229c:	e0bffd17 	ldw	r2,-12(fp)
}
811322a0:	e037883a 	mov	sp,fp
811322a4:	df000017 	ldw	fp,0(sp)
811322a8:	dec00104 	addi	sp,sp,4
811322ac:	f800283a 	ret

811322b0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
811322b0:	defffb04 	addi	sp,sp,-20
811322b4:	de00012e 	bgeu	sp,et,811322bc <OSTimeSet+0xc>
811322b8:	003b68fa 	trap	3
811322bc:	df000415 	stw	fp,16(sp)
811322c0:	df000404 	addi	fp,sp,16
811322c4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811322c8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811322cc:	0005303a 	rdctl	r2,status
811322d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811322d4:	e0fffd17 	ldw	r3,-12(fp)
811322d8:	00bfff84 	movi	r2,-2
811322dc:	1884703a 	and	r2,r3,r2
811322e0:	1001703a 	wrctl	status,r2
  
  return context;
811322e4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
811322e8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
811322ec:	e0bfff17 	ldw	r2,-4(fp)
811322f0:	d0a08d15 	stw	r2,-32204(gp)
811322f4:	e0bffc17 	ldw	r2,-16(fp)
811322f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811322fc:	e0bffe17 	ldw	r2,-8(fp)
81132300:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81132304:	0001883a 	nop
81132308:	e037883a 	mov	sp,fp
8113230c:	df000017 	ldw	fp,0(sp)
81132310:	dec00104 	addi	sp,sp,4
81132314:	f800283a 	ret

81132318 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
81132318:	defff804 	addi	sp,sp,-32
8113231c:	de00012e 	bgeu	sp,et,81132324 <OSTmrCreate+0xc>
81132320:	003b68fa 	trap	3
81132324:	dfc00715 	stw	ra,28(sp)
81132328:	df000615 	stw	fp,24(sp)
8113232c:	df000604 	addi	fp,sp,24
81132330:	e13ffc15 	stw	r4,-16(fp)
81132334:	e17ffd15 	stw	r5,-12(fp)
81132338:	3005883a 	mov	r2,r6
8113233c:	e1ffff15 	stw	r7,-4(fp)
81132340:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81132344:	e0800417 	ldw	r2,16(fp)
81132348:	1000021e 	bne	r2,zero,81132354 <OSTmrCreate+0x3c>
        return ((OS_TMR *)0);
8113234c:	0005883a 	mov	r2,zero
81132350:	00005d06 	br	811324c8 <OSTmrCreate+0x1b0>
    }
    switch (opt) {
81132354:	e0bffe03 	ldbu	r2,-8(fp)
81132358:	10c00060 	cmpeqi	r3,r2,1
8113235c:	1800091e 	bne	r3,zero,81132384 <OSTmrCreate+0x6c>
81132360:	108000a0 	cmpeqi	r2,r2,2
81132364:	10000e26 	beq	r2,zero,811323a0 <OSTmrCreate+0x88>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
81132368:	e0bffd17 	ldw	r2,-12(fp)
8113236c:	1000111e 	bne	r2,zero,811323b4 <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
81132370:	e0800417 	ldw	r2,16(fp)
81132374:	00ffe0c4 	movi	r3,-125
81132378:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
8113237c:	0005883a 	mov	r2,zero
81132380:	00005106 	br	811324c8 <OSTmrCreate+0x1b0>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
81132384:	e0bffc17 	ldw	r2,-16(fp)
81132388:	10000c1e 	bne	r2,zero,811323bc <OSTmrCreate+0xa4>
                 *perr = OS_ERR_TMR_INVALID_DLY;
8113238c:	e0800417 	ldw	r2,16(fp)
81132390:	00ffe084 	movi	r3,-126
81132394:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
81132398:	0005883a 	mov	r2,zero
8113239c:	00004a06 	br	811324c8 <OSTmrCreate+0x1b0>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
811323a0:	e0800417 	ldw	r2,16(fp)
811323a4:	00ffe104 	movi	r3,-124
811323a8:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
811323ac:	0005883a 	mov	r2,zero
811323b0:	00004506 	br	811324c8 <OSTmrCreate+0x1b0>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
811323b4:	0001883a 	nop
811323b8:	00000106 	br	811323c0 <OSTmrCreate+0xa8>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
811323bc:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
811323c0:	d0a08a03 	ldbu	r2,-32216(gp)
811323c4:	10803fcc 	andi	r2,r2,255
811323c8:	10000526 	beq	r2,zero,811323e0 <OSTmrCreate+0xc8>
        *perr  = OS_ERR_TMR_ISR;
811323cc:	e0800417 	ldw	r2,16(fp)
811323d0:	00ffe2c4 	movi	r3,-117
811323d4:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
811323d8:	0005883a 	mov	r2,zero
811323dc:	00003a06 	br	811324c8 <OSTmrCreate+0x1b0>
    }
    OSTmr_Lock();
811323e0:	11332d00 	call	811332d0 <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
811323e4:	1132d700 	call	81132d70 <OSTmr_Alloc>
811323e8:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
811323ec:	e0bffa17 	ldw	r2,-24(fp)
811323f0:	1000061e 	bne	r2,zero,8113240c <OSTmrCreate+0xf4>
        OSTmr_Unlock();
811323f4:	11333140 	call	81133314 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
811323f8:	e0800417 	ldw	r2,16(fp)
811323fc:	00ffe184 	movi	r3,-122
81132400:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
81132404:	0005883a 	mov	r2,zero
81132408:	00002f06 	br	811324c8 <OSTmrCreate+0x1b0>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
8113240c:	e0bffa17 	ldw	r2,-24(fp)
81132410:	00c00044 	movi	r3,1
81132414:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
81132418:	e0bffa17 	ldw	r2,-24(fp)
8113241c:	e0fffc17 	ldw	r3,-16(fp)
81132420:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
81132424:	e0bffa17 	ldw	r2,-24(fp)
81132428:	e0fffd17 	ldw	r3,-12(fp)
8113242c:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
81132430:	e0bffa17 	ldw	r2,-24(fp)
81132434:	e0fffe03 	ldbu	r3,-8(fp)
81132438:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
8113243c:	e0bffa17 	ldw	r2,-24(fp)
81132440:	e0ffff17 	ldw	r3,-4(fp)
81132444:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
81132448:	e0bffa17 	ldw	r2,-24(fp)
8113244c:	e0c00217 	ldw	r3,8(fp)
81132450:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
81132454:	e0800317 	ldw	r2,12(fp)
81132458:	10001726 	beq	r2,zero,811324b8 <OSTmrCreate+0x1a0>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
8113245c:	e1000317 	ldw	r4,12(fp)
81132460:	112b2940 	call	8112b294 <OS_StrLen>
81132464:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
81132468:	e0bffb03 	ldbu	r2,-20(fp)
8113246c:	10800428 	cmpgeui	r2,r2,16
81132470:	1000061e 	bne	r2,zero,8113248c <OSTmrCreate+0x174>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
81132474:	e0bffa17 	ldw	r2,-24(fp)
81132478:	10800804 	addi	r2,r2,32
8113247c:	e1400317 	ldw	r5,12(fp)
81132480:	1009883a 	mov	r4,r2
81132484:	112b2180 	call	8112b218 <OS_StrCopy>
81132488:	00000b06 	br	811324b8 <OSTmrCreate+0x1a0>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
8113248c:	e0bffa17 	ldw	r2,-24(fp)
81132490:	00c008c4 	movi	r3,35
81132494:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
81132498:	e0bffa17 	ldw	r2,-24(fp)
8113249c:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
811324a0:	e0800417 	ldw	r2,16(fp)
811324a4:	00ffe304 	movi	r3,-116
811324a8:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
811324ac:	11333140 	call	81133314 <OSTmr_Unlock>
            return (ptmr);
811324b0:	e0bffa17 	ldw	r2,-24(fp)
811324b4:	00000406 	br	811324c8 <OSTmrCreate+0x1b0>
        }
    }
#endif
    OSTmr_Unlock();
811324b8:	11333140 	call	81133314 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
811324bc:	e0800417 	ldw	r2,16(fp)
811324c0:	10000005 	stb	zero,0(r2)
    return (ptmr);
811324c4:	e0bffa17 	ldw	r2,-24(fp)
}
811324c8:	e037883a 	mov	sp,fp
811324cc:	dfc00117 	ldw	ra,4(sp)
811324d0:	df000017 	ldw	fp,0(sp)
811324d4:	dec00204 	addi	sp,sp,8
811324d8:	f800283a 	ret

811324dc <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
811324dc:	defffc04 	addi	sp,sp,-16
811324e0:	de00012e 	bgeu	sp,et,811324e8 <OSTmrDel+0xc>
811324e4:	003b68fa 	trap	3
811324e8:	dfc00315 	stw	ra,12(sp)
811324ec:	df000215 	stw	fp,8(sp)
811324f0:	df000204 	addi	fp,sp,8
811324f4:	e13ffe15 	stw	r4,-8(fp)
811324f8:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
811324fc:	e0bfff17 	ldw	r2,-4(fp)
81132500:	1000021e 	bne	r2,zero,8113250c <OSTmrDel+0x30>
        return (OS_FALSE);
81132504:	0005883a 	mov	r2,zero
81132508:	00003f06 	br	81132608 <OSTmrDel+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8113250c:	e0bffe17 	ldw	r2,-8(fp)
81132510:	1000051e 	bne	r2,zero,81132528 <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81132514:	e0bfff17 	ldw	r2,-4(fp)
81132518:	00ffe284 	movi	r3,-118
8113251c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132520:	0005883a 	mov	r2,zero
81132524:	00003806 	br	81132608 <OSTmrDel+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81132528:	e0bffe17 	ldw	r2,-8(fp)
8113252c:	10800003 	ldbu	r2,0(r2)
81132530:	10803fcc 	andi	r2,r2,255
81132534:	10801920 	cmpeqi	r2,r2,100
81132538:	1000051e 	bne	r2,zero,81132550 <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8113253c:	e0bfff17 	ldw	r2,-4(fp)
81132540:	00ffe244 	movi	r3,-119
81132544:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132548:	0005883a 	mov	r2,zero
8113254c:	00002e06 	br	81132608 <OSTmrDel+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81132550:	d0a08a03 	ldbu	r2,-32216(gp)
81132554:	10803fcc 	andi	r2,r2,255
81132558:	10000526 	beq	r2,zero,81132570 <OSTmrDel+0x94>
        *perr  = OS_ERR_TMR_ISR;
8113255c:	e0bfff17 	ldw	r2,-4(fp)
81132560:	00ffe2c4 	movi	r3,-117
81132564:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132568:	0005883a 	mov	r2,zero
8113256c:	00002606 	br	81132608 <OSTmrDel+0x12c>
    }
    OSTmr_Lock();
81132570:	11332d00 	call	811332d0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81132574:	e0bffe17 	ldw	r2,-8(fp)
81132578:	10800c43 	ldbu	r2,49(r2)
8113257c:	10803fcc 	andi	r2,r2,255
81132580:	10c000c8 	cmpgei	r3,r2,3
81132584:	1800031e 	bne	r3,zero,81132594 <OSTmrDel+0xb8>
81132588:	00800d16 	blt	zero,r2,811325c0 <OSTmrDel+0xe4>
8113258c:	10001326 	beq	r2,zero,811325dc <OSTmrDel+0x100>
81132590:	00001806 	br	811325f4 <OSTmrDel+0x118>
81132594:	108000e0 	cmpeqi	r2,r2,3
81132598:	10001626 	beq	r2,zero,811325f4 <OSTmrDel+0x118>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
8113259c:	e13ffe17 	ldw	r4,-8(fp)
811325a0:	11331d40 	call	811331d4 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
811325a4:	e13ffe17 	ldw	r4,-8(fp)
811325a8:	1132de40 	call	81132de4 <OSTmr_Free>
             OSTmr_Unlock();
811325ac:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811325b0:	e0bfff17 	ldw	r2,-4(fp)
811325b4:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
811325b8:	00800044 	movi	r2,1
811325bc:	00001206 	br	81132608 <OSTmrDel+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
811325c0:	e13ffe17 	ldw	r4,-8(fp)
811325c4:	1132de40 	call	81132de4 <OSTmr_Free>
             OSTmr_Unlock();
811325c8:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811325cc:	e0bfff17 	ldw	r2,-4(fp)
811325d0:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
811325d4:	00800044 	movi	r2,1
811325d8:	00000b06 	br	81132608 <OSTmrDel+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
811325dc:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
811325e0:	e0bfff17 	ldw	r2,-4(fp)
811325e4:	00ffe1c4 	movi	r3,-121
811325e8:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
811325ec:	0005883a 	mov	r2,zero
811325f0:	00000506 	br	81132608 <OSTmrDel+0x12c>

        default:
             OSTmr_Unlock();
811325f4:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
811325f8:	e0bfff17 	ldw	r2,-4(fp)
811325fc:	00ffe344 	movi	r3,-115
81132600:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132604:	0005883a 	mov	r2,zero
    }
}
81132608:	e037883a 	mov	sp,fp
8113260c:	dfc00117 	ldw	ra,4(sp)
81132610:	df000017 	ldw	fp,0(sp)
81132614:	dec00204 	addi	sp,sp,8
81132618:	f800283a 	ret

8113261c <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
8113261c:	defffa04 	addi	sp,sp,-24
81132620:	de00012e 	bgeu	sp,et,81132628 <OSTmrNameGet+0xc>
81132624:	003b68fa 	trap	3
81132628:	dfc00515 	stw	ra,20(sp)
8113262c:	df000415 	stw	fp,16(sp)
81132630:	df000404 	addi	fp,sp,16
81132634:	e13ffd15 	stw	r4,-12(fp)
81132638:	e17ffe15 	stw	r5,-8(fp)
8113263c:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81132640:	e0bfff17 	ldw	r2,-4(fp)
81132644:	1000021e 	bne	r2,zero,81132650 <OSTmrNameGet+0x34>
        return (0);
81132648:	0005883a 	mov	r2,zero
8113264c:	00003e06 	br	81132748 <OSTmrNameGet+0x12c>
    }
    if (pdest == (INT8U *)0) {
81132650:	e0bffe17 	ldw	r2,-8(fp)
81132654:	1000051e 	bne	r2,zero,8113266c <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
81132658:	e0bfff17 	ldw	r2,-4(fp)
8113265c:	00ffe204 	movi	r3,-120
81132660:	10c00005 	stb	r3,0(r2)
        return (0);
81132664:	0005883a 	mov	r2,zero
81132668:	00003706 	br	81132748 <OSTmrNameGet+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8113266c:	e0bffd17 	ldw	r2,-12(fp)
81132670:	1000051e 	bne	r2,zero,81132688 <OSTmrNameGet+0x6c>
        *perr = OS_ERR_TMR_INVALID;
81132674:	e0bfff17 	ldw	r2,-4(fp)
81132678:	00ffe284 	movi	r3,-118
8113267c:	10c00005 	stb	r3,0(r2)
        return (0);
81132680:	0005883a 	mov	r2,zero
81132684:	00003006 	br	81132748 <OSTmrNameGet+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
81132688:	e0bffd17 	ldw	r2,-12(fp)
8113268c:	10800003 	ldbu	r2,0(r2)
81132690:	10803fcc 	andi	r2,r2,255
81132694:	10801920 	cmpeqi	r2,r2,100
81132698:	1000051e 	bne	r2,zero,811326b0 <OSTmrNameGet+0x94>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8113269c:	e0bfff17 	ldw	r2,-4(fp)
811326a0:	00ffe244 	movi	r3,-119
811326a4:	10c00005 	stb	r3,0(r2)
        return (0);
811326a8:	0005883a 	mov	r2,zero
811326ac:	00002606 	br	81132748 <OSTmrNameGet+0x12c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
811326b0:	d0a08a03 	ldbu	r2,-32216(gp)
811326b4:	10803fcc 	andi	r2,r2,255
811326b8:	10000526 	beq	r2,zero,811326d0 <OSTmrNameGet+0xb4>
        *perr = OS_ERR_NAME_GET_ISR;
811326bc:	e0bfff17 	ldw	r2,-4(fp)
811326c0:	00c00444 	movi	r3,17
811326c4:	10c00005 	stb	r3,0(r2)
        return (0);
811326c8:	0005883a 	mov	r2,zero
811326cc:	00001e06 	br	81132748 <OSTmrNameGet+0x12c>
    }
    OSTmr_Lock();
811326d0:	11332d00 	call	811332d0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811326d4:	e0bffd17 	ldw	r2,-12(fp)
811326d8:	10800c43 	ldbu	r2,49(r2)
811326dc:	10803fcc 	andi	r2,r2,255
811326e0:	10000e26 	beq	r2,zero,8113271c <OSTmrNameGet+0x100>
811326e4:	10001316 	blt	r2,zero,81132734 <OSTmrNameGet+0x118>
811326e8:	10800108 	cmpgei	r2,r2,4
811326ec:	1000111e 	bne	r2,zero,81132734 <OSTmrNameGet+0x118>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
811326f0:	e0bffd17 	ldw	r2,-12(fp)
811326f4:	10800804 	addi	r2,r2,32
811326f8:	100b883a 	mov	r5,r2
811326fc:	e13ffe17 	ldw	r4,-8(fp)
81132700:	112b2180 	call	8112b218 <OS_StrCopy>
81132704:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
81132708:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8113270c:	e0bfff17 	ldw	r2,-4(fp)
81132710:	10000005 	stb	zero,0(r2)
             return (len);
81132714:	e0bffc03 	ldbu	r2,-16(fp)
81132718:	00000b06 	br	81132748 <OSTmrNameGet+0x12c>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
8113271c:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81132720:	e0bfff17 	ldw	r2,-4(fp)
81132724:	00ffe1c4 	movi	r3,-121
81132728:	10c00005 	stb	r3,0(r2)
             return (0);
8113272c:	0005883a 	mov	r2,zero
81132730:	00000506 	br	81132748 <OSTmrNameGet+0x12c>

        default:
             OSTmr_Unlock();
81132734:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81132738:	e0bfff17 	ldw	r2,-4(fp)
8113273c:	00ffe344 	movi	r3,-115
81132740:	10c00005 	stb	r3,0(r2)
             return (0);
81132744:	0005883a 	mov	r2,zero
    }
}
81132748:	e037883a 	mov	sp,fp
8113274c:	dfc00117 	ldw	ra,4(sp)
81132750:	df000017 	ldw	fp,0(sp)
81132754:	dec00204 	addi	sp,sp,8
81132758:	f800283a 	ret

8113275c <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
8113275c:	defffb04 	addi	sp,sp,-20
81132760:	de00012e 	bgeu	sp,et,81132768 <OSTmrRemainGet+0xc>
81132764:	003b68fa 	trap	3
81132768:	dfc00415 	stw	ra,16(sp)
8113276c:	df000315 	stw	fp,12(sp)
81132770:	df000304 	addi	fp,sp,12
81132774:	e13ffe15 	stw	r4,-8(fp)
81132778:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8113277c:	e0bfff17 	ldw	r2,-4(fp)
81132780:	1000021e 	bne	r2,zero,8113278c <OSTmrRemainGet+0x30>
        return (0);
81132784:	0005883a 	mov	r2,zero
81132788:	00005d06 	br	81132900 <OSTmrRemainGet+0x1a4>
    }
    if (ptmr == (OS_TMR *)0) {
8113278c:	e0bffe17 	ldw	r2,-8(fp)
81132790:	1000051e 	bne	r2,zero,811327a8 <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81132794:	e0bfff17 	ldw	r2,-4(fp)
81132798:	00ffe284 	movi	r3,-118
8113279c:	10c00005 	stb	r3,0(r2)
        return (0);
811327a0:	0005883a 	mov	r2,zero
811327a4:	00005606 	br	81132900 <OSTmrRemainGet+0x1a4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
811327a8:	e0bffe17 	ldw	r2,-8(fp)
811327ac:	10800003 	ldbu	r2,0(r2)
811327b0:	10803fcc 	andi	r2,r2,255
811327b4:	10801920 	cmpeqi	r2,r2,100
811327b8:	1000051e 	bne	r2,zero,811327d0 <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
811327bc:	e0bfff17 	ldw	r2,-4(fp)
811327c0:	00ffe244 	movi	r3,-119
811327c4:	10c00005 	stb	r3,0(r2)
        return (0);
811327c8:	0005883a 	mov	r2,zero
811327cc:	00004c06 	br	81132900 <OSTmrRemainGet+0x1a4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
811327d0:	d0a08a03 	ldbu	r2,-32216(gp)
811327d4:	10803fcc 	andi	r2,r2,255
811327d8:	10000526 	beq	r2,zero,811327f0 <OSTmrRemainGet+0x94>
        *perr = OS_ERR_TMR_ISR;
811327dc:	e0bfff17 	ldw	r2,-4(fp)
811327e0:	00ffe2c4 	movi	r3,-117
811327e4:	10c00005 	stb	r3,0(r2)
        return (0);
811327e8:	0005883a 	mov	r2,zero
811327ec:	00004406 	br	81132900 <OSTmrRemainGet+0x1a4>
    }
    OSTmr_Lock();
811327f0:	11332d00 	call	811332d0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
811327f4:	e0bffe17 	ldw	r2,-8(fp)
811327f8:	10800c43 	ldbu	r2,49(r2)
811327fc:	10803fcc 	andi	r2,r2,255
81132800:	10c00060 	cmpeqi	r3,r2,1
81132804:	1800121e 	bne	r3,zero,81132850 <OSTmrRemainGet+0xf4>
81132808:	10c00088 	cmpgei	r3,r2,2
8113280c:	1800021e 	bne	r3,zero,81132818 <OSTmrRemainGet+0xbc>
81132810:	10003026 	beq	r2,zero,811328d4 <OSTmrRemainGet+0x178>
81132814:	00003506 	br	811328ec <OSTmrRemainGet+0x190>
81132818:	10c000a0 	cmpeqi	r3,r2,2
8113281c:	1800281e 	bne	r3,zero,811328c0 <OSTmrRemainGet+0x164>
81132820:	108000e0 	cmpeqi	r2,r2,3
81132824:	10003126 	beq	r2,zero,811328ec <OSTmrRemainGet+0x190>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
81132828:	e0bffe17 	ldw	r2,-8(fp)
8113282c:	10c00517 	ldw	r3,20(r2)
81132830:	d0a08c17 	ldw	r2,-32208(gp)
81132834:	1885c83a 	sub	r2,r3,r2
81132838:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
8113283c:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
81132840:	e0bfff17 	ldw	r2,-4(fp)
81132844:	10000005 	stb	zero,0(r2)
             return (remain);
81132848:	e0bffd17 	ldw	r2,-12(fp)
8113284c:	00002c06 	br	81132900 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
81132850:	e0bffe17 	ldw	r2,-8(fp)
81132854:	10800c03 	ldbu	r2,48(r2)
81132858:	10803fcc 	andi	r2,r2,255
8113285c:	108000a0 	cmpeqi	r2,r2,2
81132860:	10000e26 	beq	r2,zero,8113289c <OSTmrRemainGet+0x140>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
81132864:	e0bffe17 	ldw	r2,-8(fp)
81132868:	10800617 	ldw	r2,24(r2)
8113286c:	1000041e 	bne	r2,zero,81132880 <OSTmrRemainGet+0x124>
                          remain = ptmr->OSTmrPeriod;
81132870:	e0bffe17 	ldw	r2,-8(fp)
81132874:	10800717 	ldw	r2,28(r2)
81132878:	e0bffd15 	stw	r2,-12(fp)
8113287c:	00000306 	br	8113288c <OSTmrRemainGet+0x130>
                      } else {
                          remain = ptmr->OSTmrDly;
81132880:	e0bffe17 	ldw	r2,-8(fp)
81132884:	10800617 	ldw	r2,24(r2)
81132888:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
8113288c:	11333140 	call	81133314 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
81132890:	e0bfff17 	ldw	r2,-4(fp)
81132894:	10000005 	stb	zero,0(r2)
                      break;
81132898:	00000706 	br	811328b8 <OSTmrRemainGet+0x15c>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
8113289c:	e0bffe17 	ldw	r2,-8(fp)
811328a0:	10800617 	ldw	r2,24(r2)
811328a4:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
811328a8:	11333140 	call	81133314 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
811328ac:	e0bfff17 	ldw	r2,-4(fp)
811328b0:	10000005 	stb	zero,0(r2)
                      break;
811328b4:	0001883a 	nop
             }
             return (remain);
811328b8:	e0bffd17 	ldw	r2,-12(fp)
811328bc:	00001006 	br	81132900 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
811328c0:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
811328c4:	e0bfff17 	ldw	r2,-4(fp)
811328c8:	10000005 	stb	zero,0(r2)
             return (0);
811328cc:	0005883a 	mov	r2,zero
811328d0:	00000b06 	br	81132900 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
811328d4:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
811328d8:	e0bfff17 	ldw	r2,-4(fp)
811328dc:	00ffe1c4 	movi	r3,-121
811328e0:	10c00005 	stb	r3,0(r2)
             return (0);
811328e4:	0005883a 	mov	r2,zero
811328e8:	00000506 	br	81132900 <OSTmrRemainGet+0x1a4>

        default:
             OSTmr_Unlock();
811328ec:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
811328f0:	e0bfff17 	ldw	r2,-4(fp)
811328f4:	00ffe344 	movi	r3,-115
811328f8:	10c00005 	stb	r3,0(r2)
             return (0);
811328fc:	0005883a 	mov	r2,zero
    }
}
81132900:	e037883a 	mov	sp,fp
81132904:	dfc00117 	ldw	ra,4(sp)
81132908:	df000017 	ldw	fp,0(sp)
8113290c:	dec00204 	addi	sp,sp,8
81132910:	f800283a 	ret

81132914 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
81132914:	defffb04 	addi	sp,sp,-20
81132918:	de00012e 	bgeu	sp,et,81132920 <OSTmrStateGet+0xc>
8113291c:	003b68fa 	trap	3
81132920:	dfc00415 	stw	ra,16(sp)
81132924:	df000315 	stw	fp,12(sp)
81132928:	df000304 	addi	fp,sp,12
8113292c:	e13ffe15 	stw	r4,-8(fp)
81132930:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
81132934:	e0bfff17 	ldw	r2,-4(fp)
81132938:	1000021e 	bne	r2,zero,81132944 <OSTmrStateGet+0x30>
        return (0);
8113293c:	0005883a 	mov	r2,zero
81132940:	00002a06 	br	811329ec <OSTmrStateGet+0xd8>
    }
    if (ptmr == (OS_TMR *)0) {
81132944:	e0bffe17 	ldw	r2,-8(fp)
81132948:	1000051e 	bne	r2,zero,81132960 <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8113294c:	e0bfff17 	ldw	r2,-4(fp)
81132950:	00ffe284 	movi	r3,-118
81132954:	10c00005 	stb	r3,0(r2)
        return (0);
81132958:	0005883a 	mov	r2,zero
8113295c:	00002306 	br	811329ec <OSTmrStateGet+0xd8>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
81132960:	e0bffe17 	ldw	r2,-8(fp)
81132964:	10800003 	ldbu	r2,0(r2)
81132968:	10803fcc 	andi	r2,r2,255
8113296c:	10801920 	cmpeqi	r2,r2,100
81132970:	1000051e 	bne	r2,zero,81132988 <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81132974:	e0bfff17 	ldw	r2,-4(fp)
81132978:	00ffe244 	movi	r3,-119
8113297c:	10c00005 	stb	r3,0(r2)
        return (0);
81132980:	0005883a 	mov	r2,zero
81132984:	00001906 	br	811329ec <OSTmrStateGet+0xd8>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
81132988:	d0a08a03 	ldbu	r2,-32216(gp)
8113298c:	10803fcc 	andi	r2,r2,255
81132990:	10000526 	beq	r2,zero,811329a8 <OSTmrStateGet+0x94>
        *perr = OS_ERR_TMR_ISR;
81132994:	e0bfff17 	ldw	r2,-4(fp)
81132998:	00ffe2c4 	movi	r3,-117
8113299c:	10c00005 	stb	r3,0(r2)
        return (0);
811329a0:	0005883a 	mov	r2,zero
811329a4:	00001106 	br	811329ec <OSTmrStateGet+0xd8>
    }
    OSTmr_Lock();
811329a8:	11332d00 	call	811332d0 <OSTmr_Lock>
    state = ptmr->OSTmrState;
811329ac:	e0bffe17 	ldw	r2,-8(fp)
811329b0:	10800c43 	ldbu	r2,49(r2)
811329b4:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
811329b8:	e0bffd03 	ldbu	r2,-12(fp)
811329bc:	1005883a 	mov	r2,r2
811329c0:	10800128 	cmpgeui	r2,r2,4
811329c4:	1000031e 	bne	r2,zero,811329d4 <OSTmrStateGet+0xc0>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
811329c8:	e0bfff17 	ldw	r2,-4(fp)
811329cc:	10000005 	stb	zero,0(r2)
             break;
811329d0:	00000406 	br	811329e4 <OSTmrStateGet+0xd0>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
811329d4:	e0bfff17 	ldw	r2,-4(fp)
811329d8:	00ffe344 	movi	r3,-115
811329dc:	10c00005 	stb	r3,0(r2)
             break;
811329e0:	0001883a 	nop
    }
    OSTmr_Unlock();
811329e4:	11333140 	call	81133314 <OSTmr_Unlock>
    return (state);
811329e8:	e0bffd03 	ldbu	r2,-12(fp)
}
811329ec:	e037883a 	mov	sp,fp
811329f0:	dfc00117 	ldw	ra,4(sp)
811329f4:	df000017 	ldw	fp,0(sp)
811329f8:	dec00204 	addi	sp,sp,8
811329fc:	f800283a 	ret

81132a00 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
81132a00:	defffc04 	addi	sp,sp,-16
81132a04:	de00012e 	bgeu	sp,et,81132a0c <OSTmrStart+0xc>
81132a08:	003b68fa 	trap	3
81132a0c:	dfc00315 	stw	ra,12(sp)
81132a10:	df000215 	stw	fp,8(sp)
81132a14:	df000204 	addi	fp,sp,8
81132a18:	e13ffe15 	stw	r4,-8(fp)
81132a1c:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
81132a20:	e0bfff17 	ldw	r2,-4(fp)
81132a24:	1000021e 	bne	r2,zero,81132a30 <OSTmrStart+0x30>
        return (OS_FALSE);
81132a28:	0005883a 	mov	r2,zero
81132a2c:	00004106 	br	81132b34 <OSTmrStart+0x134>
    }
    if (ptmr == (OS_TMR *)0) {
81132a30:	e0bffe17 	ldw	r2,-8(fp)
81132a34:	1000051e 	bne	r2,zero,81132a4c <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
81132a38:	e0bfff17 	ldw	r2,-4(fp)
81132a3c:	00ffe284 	movi	r3,-118
81132a40:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132a44:	0005883a 	mov	r2,zero
81132a48:	00003a06 	br	81132b34 <OSTmrStart+0x134>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
81132a4c:	e0bffe17 	ldw	r2,-8(fp)
81132a50:	10800003 	ldbu	r2,0(r2)
81132a54:	10803fcc 	andi	r2,r2,255
81132a58:	10801920 	cmpeqi	r2,r2,100
81132a5c:	1000051e 	bne	r2,zero,81132a74 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81132a60:	e0bfff17 	ldw	r2,-4(fp)
81132a64:	00ffe244 	movi	r3,-119
81132a68:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132a6c:	0005883a 	mov	r2,zero
81132a70:	00003006 	br	81132b34 <OSTmrStart+0x134>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
81132a74:	d0a08a03 	ldbu	r2,-32216(gp)
81132a78:	10803fcc 	andi	r2,r2,255
81132a7c:	10000526 	beq	r2,zero,81132a94 <OSTmrStart+0x94>
        *perr  = OS_ERR_TMR_ISR;
81132a80:	e0bfff17 	ldw	r2,-4(fp)
81132a84:	00ffe2c4 	movi	r3,-117
81132a88:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132a8c:	0005883a 	mov	r2,zero
81132a90:	00002806 	br	81132b34 <OSTmrStart+0x134>
    }
    OSTmr_Lock();
81132a94:	11332d00 	call	811332d0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81132a98:	e0bffe17 	ldw	r2,-8(fp)
81132a9c:	10800c43 	ldbu	r2,49(r2)
81132aa0:	10803fcc 	andi	r2,r2,255
81132aa4:	10c000c8 	cmpgei	r3,r2,3
81132aa8:	1800031e 	bne	r3,zero,81132ab8 <OSTmrStart+0xb8>
81132aac:	00800e16 	blt	zero,r2,81132ae8 <OSTmrStart+0xe8>
81132ab0:	10001526 	beq	r2,zero,81132b08 <OSTmrStart+0x108>
81132ab4:	00001a06 	br	81132b20 <OSTmrStart+0x120>
81132ab8:	108000e0 	cmpeqi	r2,r2,3
81132abc:	10001826 	beq	r2,zero,81132b20 <OSTmrStart+0x120>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
81132ac0:	e13ffe17 	ldw	r4,-8(fp)
81132ac4:	11331d40 	call	811331d4 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
81132ac8:	000b883a 	mov	r5,zero
81132acc:	e13ffe17 	ldw	r4,-8(fp)
81132ad0:	11330840 	call	81133084 <OSTmr_Link>
             OSTmr_Unlock();
81132ad4:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81132ad8:	e0bfff17 	ldw	r2,-4(fp)
81132adc:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81132ae0:	00800044 	movi	r2,1
81132ae4:	00001306 	br	81132b34 <OSTmrStart+0x134>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
81132ae8:	000b883a 	mov	r5,zero
81132aec:	e13ffe17 	ldw	r4,-8(fp)
81132af0:	11330840 	call	81133084 <OSTmr_Link>
             OSTmr_Unlock();
81132af4:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
81132af8:	e0bfff17 	ldw	r2,-4(fp)
81132afc:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
81132b00:	00800044 	movi	r2,1
81132b04:	00000b06 	br	81132b34 <OSTmrStart+0x134>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
81132b08:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81132b0c:	e0bfff17 	ldw	r2,-4(fp)
81132b10:	00ffe1c4 	movi	r3,-121
81132b14:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132b18:	0005883a 	mov	r2,zero
81132b1c:	00000506 	br	81132b34 <OSTmrStart+0x134>

        default:
             OSTmr_Unlock();
81132b20:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81132b24:	e0bfff17 	ldw	r2,-4(fp)
81132b28:	00ffe344 	movi	r3,-115
81132b2c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132b30:	0005883a 	mov	r2,zero
    }
}
81132b34:	e037883a 	mov	sp,fp
81132b38:	dfc00117 	ldw	ra,4(sp)
81132b3c:	df000017 	ldw	fp,0(sp)
81132b40:	dec00204 	addi	sp,sp,8
81132b44:	f800283a 	ret

81132b48 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
81132b48:	defff904 	addi	sp,sp,-28
81132b4c:	de00012e 	bgeu	sp,et,81132b54 <OSTmrStop+0xc>
81132b50:	003b68fa 	trap	3
81132b54:	dfc00615 	stw	ra,24(sp)
81132b58:	df000515 	stw	fp,20(sp)
81132b5c:	df000504 	addi	fp,sp,20
81132b60:	e13ffc15 	stw	r4,-16(fp)
81132b64:	2805883a 	mov	r2,r5
81132b68:	e1bffe15 	stw	r6,-8(fp)
81132b6c:	e1ffff15 	stw	r7,-4(fp)
81132b70:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
81132b74:	e0bfff17 	ldw	r2,-4(fp)
81132b78:	1000021e 	bne	r2,zero,81132b84 <OSTmrStop+0x3c>
        return (OS_FALSE);
81132b7c:	0005883a 	mov	r2,zero
81132b80:	00006606 	br	81132d1c <OSTmrStop+0x1d4>
    }
    if (ptmr == (OS_TMR *)0) {
81132b84:	e0bffc17 	ldw	r2,-16(fp)
81132b88:	1000051e 	bne	r2,zero,81132ba0 <OSTmrStop+0x58>
        *perr = OS_ERR_TMR_INVALID;
81132b8c:	e0bfff17 	ldw	r2,-4(fp)
81132b90:	00ffe284 	movi	r3,-118
81132b94:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132b98:	0005883a 	mov	r2,zero
81132b9c:	00005f06 	br	81132d1c <OSTmrStop+0x1d4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
81132ba0:	e0bffc17 	ldw	r2,-16(fp)
81132ba4:	10800003 	ldbu	r2,0(r2)
81132ba8:	10803fcc 	andi	r2,r2,255
81132bac:	10801920 	cmpeqi	r2,r2,100
81132bb0:	1000051e 	bne	r2,zero,81132bc8 <OSTmrStop+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
81132bb4:	e0bfff17 	ldw	r2,-4(fp)
81132bb8:	00ffe244 	movi	r3,-119
81132bbc:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132bc0:	0005883a 	mov	r2,zero
81132bc4:	00005506 	br	81132d1c <OSTmrStop+0x1d4>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
81132bc8:	d0a08a03 	ldbu	r2,-32216(gp)
81132bcc:	10803fcc 	andi	r2,r2,255
81132bd0:	10000526 	beq	r2,zero,81132be8 <OSTmrStop+0xa0>
        *perr  = OS_ERR_TMR_ISR;
81132bd4:	e0bfff17 	ldw	r2,-4(fp)
81132bd8:	00ffe2c4 	movi	r3,-117
81132bdc:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81132be0:	0005883a 	mov	r2,zero
81132be4:	00004d06 	br	81132d1c <OSTmrStop+0x1d4>
    }
    OSTmr_Lock();
81132be8:	11332d00 	call	811332d0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
81132bec:	e0bffc17 	ldw	r2,-16(fp)
81132bf0:	10800c43 	ldbu	r2,49(r2)
81132bf4:	10803fcc 	andi	r2,r2,255
81132bf8:	10c000c8 	cmpgei	r3,r2,3
81132bfc:	1800031e 	bne	r3,zero,81132c0c <OSTmrStop+0xc4>
81132c00:	00803516 	blt	zero,r2,81132cd8 <OSTmrStop+0x190>
81132c04:	10003a26 	beq	r2,zero,81132cf0 <OSTmrStop+0x1a8>
81132c08:	00003f06 	br	81132d08 <OSTmrStop+0x1c0>
81132c0c:	108000e0 	cmpeqi	r2,r2,3
81132c10:	10003d26 	beq	r2,zero,81132d08 <OSTmrStop+0x1c0>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
81132c14:	e13ffc17 	ldw	r4,-16(fp)
81132c18:	11331d40 	call	811331d4 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
81132c1c:	e0bfff17 	ldw	r2,-4(fp)
81132c20:	10000005 	stb	zero,0(r2)
             switch (opt) {
81132c24:	e0bffd03 	ldbu	r2,-12(fp)
81132c28:	10c000e0 	cmpeqi	r3,r2,3
81132c2c:	1800041e 	bne	r3,zero,81132c40 <OSTmrStop+0xf8>
81132c30:	10c00120 	cmpeqi	r3,r2,4
81132c34:	1800121e 	bne	r3,zero,81132c80 <OSTmrStop+0x138>
81132c38:	10002326 	beq	r2,zero,81132cc8 <OSTmrStop+0x180>
81132c3c:	00001e06 	br	81132cb8 <OSTmrStop+0x170>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
81132c40:	e0bffc17 	ldw	r2,-16(fp)
81132c44:	10800117 	ldw	r2,4(r2)
81132c48:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81132c4c:	e0bffb17 	ldw	r2,-20(fp)
81132c50:	10000726 	beq	r2,zero,81132c70 <OSTmrStop+0x128>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
81132c54:	e0bffc17 	ldw	r2,-16(fp)
81132c58:	10c00217 	ldw	r3,8(r2)
81132c5c:	e0bffb17 	ldw	r2,-20(fp)
81132c60:	180b883a 	mov	r5,r3
81132c64:	e13ffc17 	ldw	r4,-16(fp)
81132c68:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
81132c6c:	00001706 	br	81132ccc <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
81132c70:	e0bfff17 	ldw	r2,-4(fp)
81132c74:	00ffe3c4 	movi	r3,-113
81132c78:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81132c7c:	00001306 	br	81132ccc <OSTmrStop+0x184>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
81132c80:	e0bffc17 	ldw	r2,-16(fp)
81132c84:	10800117 	ldw	r2,4(r2)
81132c88:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
81132c8c:	e0bffb17 	ldw	r2,-20(fp)
81132c90:	10000526 	beq	r2,zero,81132ca8 <OSTmrStop+0x160>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
81132c94:	e0bffb17 	ldw	r2,-20(fp)
81132c98:	e17ffe17 	ldw	r5,-8(fp)
81132c9c:	e13ffc17 	ldw	r4,-16(fp)
81132ca0:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
81132ca4:	00000906 	br	81132ccc <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
81132ca8:	e0bfff17 	ldw	r2,-4(fp)
81132cac:	00ffe3c4 	movi	r3,-113
81132cb0:	10c00005 	stb	r3,0(r2)
                      }
                      break;
81132cb4:	00000506 	br	81132ccc <OSTmrStop+0x184>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
81132cb8:	e0bfff17 	ldw	r2,-4(fp)
81132cbc:	00ffe104 	movi	r3,-124
81132cc0:	10c00005 	stb	r3,0(r2)
                     break;
81132cc4:	00000106 	br	81132ccc <OSTmrStop+0x184>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
81132cc8:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
81132ccc:	11333140 	call	81133314 <OSTmr_Unlock>
             return (OS_TRUE);
81132cd0:	00800044 	movi	r2,1
81132cd4:	00001106 	br	81132d1c <OSTmrStop+0x1d4>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
81132cd8:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
81132cdc:	e0bfff17 	ldw	r2,-4(fp)
81132ce0:	00ffe384 	movi	r3,-114
81132ce4:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
81132ce8:	00800044 	movi	r2,1
81132cec:	00000b06 	br	81132d1c <OSTmrStop+0x1d4>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
81132cf0:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
81132cf4:	e0bfff17 	ldw	r2,-4(fp)
81132cf8:	00ffe1c4 	movi	r3,-121
81132cfc:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132d00:	0005883a 	mov	r2,zero
81132d04:	00000506 	br	81132d1c <OSTmrStop+0x1d4>

        default:
             OSTmr_Unlock();
81132d08:	11333140 	call	81133314 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
81132d0c:	e0bfff17 	ldw	r2,-4(fp)
81132d10:	00ffe344 	movi	r3,-115
81132d14:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
81132d18:	0005883a 	mov	r2,zero
    }
}
81132d1c:	e037883a 	mov	sp,fp
81132d20:	dfc00117 	ldw	ra,4(sp)
81132d24:	df000017 	ldw	fp,0(sp)
81132d28:	dec00204 	addi	sp,sp,8
81132d2c:	f800283a 	ret

81132d30 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
81132d30:	defffd04 	addi	sp,sp,-12
81132d34:	de00012e 	bgeu	sp,et,81132d3c <OSTmrSignal+0xc>
81132d38:	003b68fa 	trap	3
81132d3c:	dfc00215 	stw	ra,8(sp)
81132d40:	df000115 	stw	fp,4(sp)
81132d44:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
81132d48:	d0a07917 	ldw	r2,-32284(gp)
81132d4c:	1009883a 	mov	r4,r2
81132d50:	11302fc0 	call	811302fc <OSSemPost>
81132d54:	e0bfff05 	stb	r2,-4(fp)
    return (err);
81132d58:	e0bfff03 	ldbu	r2,-4(fp)
}
81132d5c:	e037883a 	mov	sp,fp
81132d60:	dfc00117 	ldw	ra,4(sp)
81132d64:	df000017 	ldw	fp,0(sp)
81132d68:	dec00204 	addi	sp,sp,8
81132d6c:	f800283a 	ret

81132d70 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
81132d70:	defffe04 	addi	sp,sp,-8
81132d74:	de00012e 	bgeu	sp,et,81132d7c <OSTmr_Alloc+0xc>
81132d78:	003b68fa 	trap	3
81132d7c:	df000115 	stw	fp,4(sp)
81132d80:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
81132d84:	d0a07717 	ldw	r2,-32292(gp)
81132d88:	1000021e 	bne	r2,zero,81132d94 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
81132d8c:	0005883a 	mov	r2,zero
81132d90:	00001006 	br	81132dd4 <OSTmr_Alloc+0x64>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
81132d94:	d0a07717 	ldw	r2,-32292(gp)
81132d98:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
81132d9c:	e0bfff17 	ldw	r2,-4(fp)
81132da0:	10800317 	ldw	r2,12(r2)
81132da4:	d0a07715 	stw	r2,-32292(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
81132da8:	e0bfff17 	ldw	r2,-4(fp)
81132dac:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
81132db0:	e0bfff17 	ldw	r2,-4(fp)
81132db4:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
81132db8:	d0a07c0b 	ldhu	r2,-32272(gp)
81132dbc:	10800044 	addi	r2,r2,1
81132dc0:	d0a07c0d 	sth	r2,-32272(gp)
    OSTmrFree--;
81132dc4:	d0a0800b 	ldhu	r2,-32256(gp)
81132dc8:	10bfffc4 	addi	r2,r2,-1
81132dcc:	d0a0800d 	sth	r2,-32256(gp)
    return (ptmr);
81132dd0:	e0bfff17 	ldw	r2,-4(fp)
}
81132dd4:	e037883a 	mov	sp,fp
81132dd8:	df000017 	ldw	fp,0(sp)
81132ddc:	dec00104 	addi	sp,sp,4
81132de0:	f800283a 	ret

81132de4 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
81132de4:	defffe04 	addi	sp,sp,-8
81132de8:	de00012e 	bgeu	sp,et,81132df0 <OSTmr_Free+0xc>
81132dec:	003b68fa 	trap	3
81132df0:	df000115 	stw	fp,4(sp)
81132df4:	df000104 	addi	fp,sp,4
81132df8:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
81132dfc:	e0bfff17 	ldw	r2,-4(fp)
81132e00:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
81132e04:	e0bfff17 	ldw	r2,-4(fp)
81132e08:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
81132e0c:	e0bfff17 	ldw	r2,-4(fp)
81132e10:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
81132e14:	e0bfff17 	ldw	r2,-4(fp)
81132e18:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
81132e1c:	e0bfff17 	ldw	r2,-4(fp)
81132e20:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
81132e24:	e0bfff17 	ldw	r2,-4(fp)
81132e28:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
81132e2c:	e0bfff17 	ldw	r2,-4(fp)
81132e30:	00c00fc4 	movi	r3,63
81132e34:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
81132e38:	e0bfff17 	ldw	r2,-4(fp)
81132e3c:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
81132e40:	e0bfff17 	ldw	r2,-4(fp)
81132e44:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
81132e48:	d0e07717 	ldw	r3,-32292(gp)
81132e4c:	e0bfff17 	ldw	r2,-4(fp)
81132e50:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
81132e54:	e0bfff17 	ldw	r2,-4(fp)
81132e58:	d0a07715 	stw	r2,-32292(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
81132e5c:	d0a07c0b 	ldhu	r2,-32272(gp)
81132e60:	10bfffc4 	addi	r2,r2,-1
81132e64:	d0a07c0d 	sth	r2,-32272(gp)
    OSTmrFree++;
81132e68:	d0a0800b 	ldhu	r2,-32256(gp)
81132e6c:	10800044 	addi	r2,r2,1
81132e70:	d0a0800d 	sth	r2,-32256(gp)
}
81132e74:	0001883a 	nop
81132e78:	e037883a 	mov	sp,fp
81132e7c:	df000017 	ldw	fp,0(sp)
81132e80:	dec00104 	addi	sp,sp,4
81132e84:	f800283a 	ret

81132e88 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
81132e88:	defffa04 	addi	sp,sp,-24
81132e8c:	de00012e 	bgeu	sp,et,81132e94 <OSTmr_Init+0xc>
81132e90:	003b68fa 	trap	3
81132e94:	dfc00515 	stw	ra,20(sp)
81132e98:	df000415 	stw	fp,16(sp)
81132e9c:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
81132ea0:	01406804 	movi	r5,416
81132ea4:	01204574 	movhi	r4,33045
81132ea8:	212fed04 	addi	r4,r4,-16460
81132eac:	112aff80 	call	8112aff8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
81132eb0:	01400404 	movi	r5,16
81132eb4:	01204574 	movhi	r4,33045
81132eb8:	212f0d04 	addi	r4,r4,-17356
81132ebc:	112aff80 	call	8112aff8 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
81132ec0:	00a04574 	movhi	r2,33045
81132ec4:	10afed04 	addi	r2,r2,-16460
81132ec8:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
81132ecc:	00a04574 	movhi	r2,33045
81132ed0:	10affa04 	addi	r2,r2,-16408
81132ed4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81132ed8:	e03ffc0d 	sth	zero,-16(fp)
81132edc:	00001606 	br	81132f38 <OSTmr_Init+0xb0>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
81132ee0:	e0bffd17 	ldw	r2,-12(fp)
81132ee4:	00c01904 	movi	r3,100
81132ee8:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
81132eec:	e0bffd17 	ldw	r2,-12(fp)
81132ef0:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
81132ef4:	e0bffd17 	ldw	r2,-12(fp)
81132ef8:	e0fffe17 	ldw	r3,-8(fp)
81132efc:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
81132f00:	e0bffd17 	ldw	r2,-12(fp)
81132f04:	00c00fc4 	movi	r3,63
81132f08:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81132f0c:	e0bffd17 	ldw	r2,-12(fp)
81132f10:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
81132f14:	e0bffd17 	ldw	r2,-12(fp)
81132f18:	10800d04 	addi	r2,r2,52
81132f1c:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
81132f20:	e0bffe17 	ldw	r2,-8(fp)
81132f24:	10800d04 	addi	r2,r2,52
81132f28:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81132f2c:	e0bffc0b 	ldhu	r2,-16(fp)
81132f30:	10800044 	addi	r2,r2,1
81132f34:	e0bffc0d 	sth	r2,-16(fp)
81132f38:	e0bffc0b 	ldhu	r2,-16(fp)
81132f3c:	108001f0 	cmpltui	r2,r2,7
81132f40:	103fe71e 	bne	r2,zero,81132ee0 <__reset+0xfb112ee0>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
81132f44:	e0bffd17 	ldw	r2,-12(fp)
81132f48:	00c01904 	movi	r3,100
81132f4c:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
81132f50:	e0bffd17 	ldw	r2,-12(fp)
81132f54:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
81132f58:	e0bffd17 	ldw	r2,-12(fp)
81132f5c:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
81132f60:	e0bffd17 	ldw	r2,-12(fp)
81132f64:	00c00fc4 	movi	r3,63
81132f68:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81132f6c:	e0bffd17 	ldw	r2,-12(fp)
81132f70:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
81132f74:	d0208c15 	stw	zero,-32208(gp)
    OSTmrUsed           = 0;
81132f78:	d0207c0d 	sth	zero,-32272(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
81132f7c:	00800204 	movi	r2,8
81132f80:	d0a0800d 	sth	r2,-32256(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
81132f84:	00a04574 	movhi	r2,33045
81132f88:	10afed04 	addi	r2,r2,-16460
81132f8c:	d0a07715 	stw	r2,-32292(gp)
    OSTmrSem            = OSSemCreate(1);
81132f90:	01000044 	movi	r4,1
81132f94:	112fc4c0 	call	8112fc4c <OSSemCreate>
81132f98:	d0a08e15 	stw	r2,-32200(gp)
    OSTmrSemSignal      = OSSemCreate(0);
81132f9c:	0009883a 	mov	r4,zero
81132fa0:	112fc4c0 	call	8112fc4c <OSSemCreate>
81132fa4:	d0a07915 	stw	r2,-32284(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
81132fa8:	d0a08e17 	ldw	r2,-32200(gp)
81132fac:	e0ffff04 	addi	r3,fp,-4
81132fb0:	180d883a 	mov	r6,r3
81132fb4:	01604534 	movhi	r5,33044
81132fb8:	29412d04 	addi	r5,r5,1204
81132fbc:	1009883a 	mov	r4,r2
81132fc0:	11297d00 	call	811297d0 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
81132fc4:	d0a07917 	ldw	r2,-32284(gp)
81132fc8:	e0ffff04 	addi	r3,fp,-4
81132fcc:	180d883a 	mov	r6,r3
81132fd0:	01604534 	movhi	r5,33044
81132fd4:	29413204 	addi	r5,r5,1224
81132fd8:	1009883a 	mov	r4,r2
81132fdc:	11297d00 	call	811297d0 <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
81132fe0:	1132ffc0 	call	81132ffc <OSTmr_InitTask>
}
81132fe4:	0001883a 	nop
81132fe8:	e037883a 	mov	sp,fp
81132fec:	dfc00117 	ldw	ra,4(sp)
81132ff0:	df000017 	ldw	fp,0(sp)
81132ff4:	dec00204 	addi	sp,sp,8
81132ff8:	f800283a 	ret

81132ffc <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
81132ffc:	defff804 	addi	sp,sp,-32
81133000:	de00012e 	bgeu	sp,et,81133008 <OSTmr_InitTask+0xc>
81133004:	003b68fa 	trap	3
81133008:	dfc00715 	stw	ra,28(sp)
8113300c:	df000615 	stw	fp,24(sp)
81133010:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
81133014:	008000c4 	movi	r2,3
81133018:	d8800415 	stw	r2,16(sp)
8113301c:	d8000315 	stw	zero,12(sp)
81133020:	00808004 	movi	r2,512
81133024:	d8800215 	stw	r2,8(sp)
81133028:	00a04574 	movhi	r2,33045
8113302c:	10b5d904 	addi	r2,r2,-10396
81133030:	d8800115 	stw	r2,4(sp)
81133034:	00bfff54 	movui	r2,65533
81133038:	d8800015 	stw	r2,0(sp)
8113303c:	01c00484 	movi	r7,18
81133040:	01a04574 	movhi	r6,33045
81133044:	31b7d804 	addi	r6,r6,-8352
81133048:	000b883a 	mov	r5,zero
8113304c:	012044f4 	movhi	r4,33043
81133050:	210cd404 	addi	r4,r4,13136
81133054:	1130ce00 	call	81130ce0 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
81133058:	e1bfff04 	addi	r6,fp,-4
8113305c:	01604534 	movhi	r5,33044
81133060:	29413704 	addi	r5,r5,1244
81133064:	01000484 	movi	r4,18
81133068:	11315100 	call	81131510 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
8113306c:	0001883a 	nop
81133070:	e037883a 	mov	sp,fp
81133074:	dfc00117 	ldw	ra,4(sp)
81133078:	df000017 	ldw	fp,0(sp)
8113307c:	dec00204 	addi	sp,sp,8
81133080:	f800283a 	ret

81133084 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
81133084:	defffa04 	addi	sp,sp,-24
81133088:	de00012e 	bgeu	sp,et,81133090 <OSTmr_Link+0xc>
8113308c:	003b68fa 	trap	3
81133090:	df000515 	stw	fp,20(sp)
81133094:	df000504 	addi	fp,sp,20
81133098:	e13ffe15 	stw	r4,-8(fp)
8113309c:	2805883a 	mov	r2,r5
811330a0:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
811330a4:	e0bffe17 	ldw	r2,-8(fp)
811330a8:	00c000c4 	movi	r3,3
811330ac:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
811330b0:	e0bfff03 	ldbu	r2,-4(fp)
811330b4:	10800058 	cmpnei	r2,r2,1
811330b8:	1000071e 	bne	r2,zero,811330d8 <OSTmr_Link+0x54>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
811330bc:	e0bffe17 	ldw	r2,-8(fp)
811330c0:	10c00717 	ldw	r3,28(r2)
811330c4:	d0a08c17 	ldw	r2,-32208(gp)
811330c8:	1887883a 	add	r3,r3,r2
811330cc:	e0bffe17 	ldw	r2,-8(fp)
811330d0:	10c00515 	stw	r3,20(r2)
811330d4:	00001006 	br	81133118 <OSTmr_Link+0x94>
    } else {
        if (ptmr->OSTmrDly == 0) {
811330d8:	e0bffe17 	ldw	r2,-8(fp)
811330dc:	10800617 	ldw	r2,24(r2)
811330e0:	1000071e 	bne	r2,zero,81133100 <OSTmr_Link+0x7c>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
811330e4:	e0bffe17 	ldw	r2,-8(fp)
811330e8:	10c00717 	ldw	r3,28(r2)
811330ec:	d0a08c17 	ldw	r2,-32208(gp)
811330f0:	1887883a 	add	r3,r3,r2
811330f4:	e0bffe17 	ldw	r2,-8(fp)
811330f8:	10c00515 	stw	r3,20(r2)
811330fc:	00000606 	br	81133118 <OSTmr_Link+0x94>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
81133100:	e0bffe17 	ldw	r2,-8(fp)
81133104:	10c00617 	ldw	r3,24(r2)
81133108:	d0a08c17 	ldw	r2,-32208(gp)
8113310c:	1887883a 	add	r3,r3,r2
81133110:	e0bffe17 	ldw	r2,-8(fp)
81133114:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
81133118:	e0bffe17 	ldw	r2,-8(fp)
8113311c:	10800517 	ldw	r2,20(r2)
81133120:	1080004c 	andi	r2,r2,1
81133124:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81133128:	e0bffb0b 	ldhu	r2,-20(fp)
8113312c:	100690fa 	slli	r3,r2,3
81133130:	00a04574 	movhi	r2,33045
81133134:	10af0d04 	addi	r2,r2,-17356
81133138:	1885883a 	add	r2,r3,r2
8113313c:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
81133140:	e0bffc17 	ldw	r2,-16(fp)
81133144:	10800017 	ldw	r2,0(r2)
81133148:	1000091e 	bne	r2,zero,81133170 <OSTmr_Link+0xec>
        pspoke->OSTmrFirst   = ptmr;
8113314c:	e0bffc17 	ldw	r2,-16(fp)
81133150:	e0fffe17 	ldw	r3,-8(fp)
81133154:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
81133158:	e0bffe17 	ldw	r2,-8(fp)
8113315c:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
81133160:	e0bffc17 	ldw	r2,-16(fp)
81133164:	00c00044 	movi	r3,1
81133168:	10c0010d 	sth	r3,4(r2)
8113316c:	00001206 	br	811331b8 <OSTmr_Link+0x134>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
81133170:	e0bffc17 	ldw	r2,-16(fp)
81133174:	10800017 	ldw	r2,0(r2)
81133178:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
8113317c:	e0bffc17 	ldw	r2,-16(fp)
81133180:	e0fffe17 	ldw	r3,-8(fp)
81133184:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
81133188:	e0bffe17 	ldw	r2,-8(fp)
8113318c:	e0fffd17 	ldw	r3,-12(fp)
81133190:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
81133194:	e0bffd17 	ldw	r2,-12(fp)
81133198:	e0fffe17 	ldw	r3,-8(fp)
8113319c:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
811331a0:	e0bffc17 	ldw	r2,-16(fp)
811331a4:	1080010b 	ldhu	r2,4(r2)
811331a8:	10800044 	addi	r2,r2,1
811331ac:	1007883a 	mov	r3,r2
811331b0:	e0bffc17 	ldw	r2,-16(fp)
811331b4:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
811331b8:	e0bffe17 	ldw	r2,-8(fp)
811331bc:	10000415 	stw	zero,16(r2)
}
811331c0:	0001883a 	nop
811331c4:	e037883a 	mov	sp,fp
811331c8:	df000017 	ldw	fp,0(sp)
811331cc:	dec00104 	addi	sp,sp,4
811331d0:	f800283a 	ret

811331d4 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
811331d4:	defffa04 	addi	sp,sp,-24
811331d8:	de00012e 	bgeu	sp,et,811331e0 <OSTmr_Unlink+0xc>
811331dc:	003b68fa 	trap	3
811331e0:	df000515 	stw	fp,20(sp)
811331e4:	df000504 	addi	fp,sp,20
811331e8:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
811331ec:	e0bfff17 	ldw	r2,-4(fp)
811331f0:	10800517 	ldw	r2,20(r2)
811331f4:	1080004c 	andi	r2,r2,1
811331f8:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
811331fc:	e0bffb0b 	ldhu	r2,-20(fp)
81133200:	100690fa 	slli	r3,r2,3
81133204:	00a04574 	movhi	r2,33045
81133208:	10af0d04 	addi	r2,r2,-17356
8113320c:	1885883a 	add	r2,r3,r2
81133210:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
81133214:	e0bffc17 	ldw	r2,-16(fp)
81133218:	10c00017 	ldw	r3,0(r2)
8113321c:	e0bfff17 	ldw	r2,-4(fp)
81133220:	18800b1e 	bne	r3,r2,81133250 <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
81133224:	e0bfff17 	ldw	r2,-4(fp)
81133228:	10800317 	ldw	r2,12(r2)
8113322c:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
81133230:	e0bffc17 	ldw	r2,-16(fp)
81133234:	e0fffd17 	ldw	r3,-12(fp)
81133238:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
8113323c:	e0bffd17 	ldw	r2,-12(fp)
81133240:	10001126 	beq	r2,zero,81133288 <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
81133244:	e0bffd17 	ldw	r2,-12(fp)
81133248:	10000415 	stw	zero,16(r2)
8113324c:	00000e06 	br	81133288 <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
81133250:	e0bfff17 	ldw	r2,-4(fp)
81133254:	10800417 	ldw	r2,16(r2)
81133258:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
8113325c:	e0bfff17 	ldw	r2,-4(fp)
81133260:	10800317 	ldw	r2,12(r2)
81133264:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
81133268:	e0bffd17 	ldw	r2,-12(fp)
8113326c:	e0fffe17 	ldw	r3,-8(fp)
81133270:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
81133274:	e0bffe17 	ldw	r2,-8(fp)
81133278:	10000326 	beq	r2,zero,81133288 <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
8113327c:	e0bffe17 	ldw	r2,-8(fp)
81133280:	e0fffd17 	ldw	r3,-12(fp)
81133284:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
81133288:	e0bfff17 	ldw	r2,-4(fp)
8113328c:	00c00044 	movi	r3,1
81133290:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
81133294:	e0bfff17 	ldw	r2,-4(fp)
81133298:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
8113329c:	e0bfff17 	ldw	r2,-4(fp)
811332a0:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
811332a4:	e0bffc17 	ldw	r2,-16(fp)
811332a8:	1080010b 	ldhu	r2,4(r2)
811332ac:	10bfffc4 	addi	r2,r2,-1
811332b0:	1007883a 	mov	r3,r2
811332b4:	e0bffc17 	ldw	r2,-16(fp)
811332b8:	10c0010d 	sth	r3,4(r2)
}
811332bc:	0001883a 	nop
811332c0:	e037883a 	mov	sp,fp
811332c4:	df000017 	ldw	fp,0(sp)
811332c8:	dec00104 	addi	sp,sp,4
811332cc:	f800283a 	ret

811332d0 <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
811332d0:	defffd04 	addi	sp,sp,-12
811332d4:	de00012e 	bgeu	sp,et,811332dc <OSTmr_Lock+0xc>
811332d8:	003b68fa 	trap	3
811332dc:	dfc00215 	stw	ra,8(sp)
811332e0:	df000115 	stw	fp,4(sp)
811332e4:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
811332e8:	d0a08e17 	ldw	r2,-32200(gp)
811332ec:	e1bfff04 	addi	r6,fp,-4
811332f0:	000b883a 	mov	r5,zero
811332f4:	1009883a 	mov	r4,r2
811332f8:	112ff740 	call	8112ff74 <OSSemPend>
    (void)err;
}
811332fc:	0001883a 	nop
81133300:	e037883a 	mov	sp,fp
81133304:	dfc00117 	ldw	ra,4(sp)
81133308:	df000017 	ldw	fp,0(sp)
8113330c:	dec00204 	addi	sp,sp,8
81133310:	f800283a 	ret

81133314 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
81133314:	defffe04 	addi	sp,sp,-8
81133318:	de00012e 	bgeu	sp,et,81133320 <OSTmr_Unlock+0xc>
8113331c:	003b68fa 	trap	3
81133320:	dfc00115 	stw	ra,4(sp)
81133324:	df000015 	stw	fp,0(sp)
81133328:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
8113332c:	d0a08e17 	ldw	r2,-32200(gp)
81133330:	1009883a 	mov	r4,r2
81133334:	11302fc0 	call	811302fc <OSSemPost>
}
81133338:	0001883a 	nop
8113333c:	e037883a 	mov	sp,fp
81133340:	dfc00117 	ldw	ra,4(sp)
81133344:	df000017 	ldw	fp,0(sp)
81133348:	dec00204 	addi	sp,sp,8
8113334c:	f800283a 	ret

81133350 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
81133350:	defff704 	addi	sp,sp,-36
81133354:	de00012e 	bgeu	sp,et,8113335c <OSTmr_Task+0xc>
81133358:	003b68fa 	trap	3
8113335c:	dfc00815 	stw	ra,32(sp)
81133360:	df000715 	stw	fp,28(sp)
81133364:	df000704 	addi	fp,sp,28
81133368:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
8113336c:	d0a07917 	ldw	r2,-32284(gp)
81133370:	e0fffe04 	addi	r3,fp,-8
81133374:	180d883a 	mov	r6,r3
81133378:	000b883a 	mov	r5,zero
8113337c:	1009883a 	mov	r4,r2
81133380:	112ff740 	call	8112ff74 <OSSemPend>
        OSTmr_Lock();
81133384:	11332d00 	call	811332d0 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
81133388:	d0a08c17 	ldw	r2,-32208(gp)
8113338c:	10800044 	addi	r2,r2,1
81133390:	d0a08c15 	stw	r2,-32208(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
81133394:	d0a08c17 	ldw	r2,-32208(gp)
81133398:	1080004c 	andi	r2,r2,1
8113339c:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
811333a0:	e0bffa0b 	ldhu	r2,-24(fp)
811333a4:	100690fa 	slli	r3,r2,3
811333a8:	00a04574 	movhi	r2,33045
811333ac:	10af0d04 	addi	r2,r2,-17356
811333b0:	1885883a 	add	r2,r3,r2
811333b4:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
811333b8:	e0bffb17 	ldw	r2,-20(fp)
811333bc:	10800017 	ldw	r2,0(r2)
811333c0:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
811333c4:	00002206 	br	81133450 <OSTmr_Task+0x100>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
811333c8:	e0bff917 	ldw	r2,-28(fp)
811333cc:	10800317 	ldw	r2,12(r2)
811333d0:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
811333d4:	e0bff917 	ldw	r2,-28(fp)
811333d8:	10c00517 	ldw	r3,20(r2)
811333dc:	d0a08c17 	ldw	r2,-32208(gp)
811333e0:	1880191e 	bne	r3,r2,81133448 <OSTmr_Task+0xf8>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
811333e4:	e0bff917 	ldw	r2,-28(fp)
811333e8:	10800117 	ldw	r2,4(r2)
811333ec:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
811333f0:	e0bffd17 	ldw	r2,-12(fp)
811333f4:	10000626 	beq	r2,zero,81133410 <OSTmr_Task+0xc0>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
811333f8:	e0bff917 	ldw	r2,-28(fp)
811333fc:	10c00217 	ldw	r3,8(r2)
81133400:	e0bffd17 	ldw	r2,-12(fp)
81133404:	180b883a 	mov	r5,r3
81133408:	e13ff917 	ldw	r4,-28(fp)
8113340c:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
81133410:	e13ff917 	ldw	r4,-28(fp)
81133414:	11331d40 	call	811331d4 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
81133418:	e0bff917 	ldw	r2,-28(fp)
8113341c:	10800c03 	ldbu	r2,48(r2)
81133420:	10803fcc 	andi	r2,r2,255
81133424:	10800098 	cmpnei	r2,r2,2
81133428:	1000041e 	bne	r2,zero,8113343c <OSTmr_Task+0xec>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
8113342c:	01400044 	movi	r5,1
81133430:	e13ff917 	ldw	r4,-28(fp)
81133434:	11330840 	call	81133084 <OSTmr_Link>
81133438:	00000306 	br	81133448 <OSTmr_Task+0xf8>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
8113343c:	e0bff917 	ldw	r2,-28(fp)
81133440:	00c00084 	movi	r3,2
81133444:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
81133448:	e0bffc17 	ldw	r2,-16(fp)
8113344c:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
81133450:	e0bff917 	ldw	r2,-28(fp)
81133454:	103fdc1e 	bne	r2,zero,811333c8 <__reset+0xfb1133c8>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
81133458:	11333140 	call	81133314 <OSTmr_Unlock>
    }
8113345c:	003fc306 	br	8113336c <__reset+0xfb11336c>

81133460 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
81133460:	defffd04 	addi	sp,sp,-12
81133464:	de00012e 	bgeu	sp,et,8113346c <alt_dev_reg+0xc>
81133468:	003b68fa 	trap	3
8113346c:	dfc00215 	stw	ra,8(sp)
81133470:	df000115 	stw	fp,4(sp)
81133474:	df000104 	addi	fp,sp,4
81133478:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8113347c:	d1600d04 	addi	r5,gp,-32716
81133480:	e13fff17 	ldw	r4,-4(fp)
81133484:	113b7000 	call	8113b700 <alt_dev_llist_insert>
}
81133488:	e037883a 	mov	sp,fp
8113348c:	dfc00117 	ldw	ra,4(sp)
81133490:	df000017 	ldw	fp,0(sp)
81133494:	dec00204 	addi	sp,sp,8
81133498:	f800283a 	ret

8113349c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8113349c:	defffd04 	addi	sp,sp,-12
811334a0:	de00012e 	bgeu	sp,et,811334a8 <alt_irq_init+0xc>
811334a4:	003b68fa 	trap	3
811334a8:	dfc00215 	stw	ra,8(sp)
811334ac:	df000115 	stw	fp,4(sp)
811334b0:	df000104 	addi	fp,sp,4
811334b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
811334b8:	113c1980 	call	8113c198 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
811334bc:	00800044 	movi	r2,1
811334c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
811334c4:	0001883a 	nop
811334c8:	e037883a 	mov	sp,fp
811334cc:	dfc00117 	ldw	ra,4(sp)
811334d0:	df000017 	ldw	fp,0(sp)
811334d4:	dec00204 	addi	sp,sp,8
811334d8:	f800283a 	ret

811334dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
811334dc:	defffe04 	addi	sp,sp,-8
811334e0:	de00012e 	bgeu	sp,et,811334e8 <alt_sys_init+0xc>
811334e4:	003b68fa 	trap	3
811334e8:	dfc00115 	stw	ra,4(sp)
811334ec:	df000015 	stw	fp,0(sp)
811334f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
811334f4:	01c0fa04 	movi	r7,1000
811334f8:	01800304 	movi	r6,12
811334fc:	000b883a 	mov	r5,zero
81133500:	01200034 	movhi	r4,32768
81133504:	21022004 	addi	r4,r4,2176
81133508:	11388340 	call	81138834 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8113350c:	018002c4 	movi	r6,11
81133510:	000b883a 	mov	r5,zero
81133514:	01204534 	movhi	r4,33044
81133518:	2104d304 	addi	r4,r4,4940
8113351c:	1137b200 	call	81137b20 <altera_avalon_jtag_uart_init>
81133520:	01204534 	movhi	r4,33044
81133524:	2104c904 	addi	r4,r4,4900
81133528:	11334600 	call	81133460 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8113352c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
81133530:	018003c4 	movi	r6,15
81133534:	000b883a 	mov	r5,zero
81133538:	01204534 	movhi	r4,33044
8113353c:	2108ee04 	addi	r4,r4,9144
81133540:	11389e00 	call	811389e0 <altera_avalon_uart_init>
81133544:	01204534 	movhi	r4,33044
81133548:	2108e404 	addi	r4,r4,9104
8113354c:	11334600 	call	81133460 <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
81133550:	00a04534 	movhi	r2,33044
81133554:	10891804 	addi	r2,r2,9312
81133558:	10c00717 	ldw	r3,28(r2)
8113355c:	00a04534 	movhi	r2,33044
81133560:	10891804 	addi	r2,r2,9312
81133564:	10800817 	ldw	r2,32(r2)
81133568:	100d883a 	mov	r6,r2
8113356c:	180b883a 	mov	r5,r3
81133570:	01204534 	movhi	r4,33044
81133574:	21091804 	addi	r4,r4,9312
81133578:	113b2680 	call	8113b268 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
8113357c:	00a04534 	movhi	r2,33044
81133580:	10893104 	addi	r2,r2,9412
81133584:	10c00717 	ldw	r3,28(r2)
81133588:	00a04534 	movhi	r2,33044
8113358c:	10893104 	addi	r2,r2,9412
81133590:	10800817 	ldw	r2,32(r2)
81133594:	100d883a 	mov	r6,r2
81133598:	180b883a 	mov	r5,r3
8113359c:	01204534 	movhi	r4,33044
811335a0:	21093104 	addi	r4,r4,9412
811335a4:	113b2680 	call	8113b268 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
811335a8:	01204534 	movhi	r4,33044
811335ac:	21094a04 	addi	r4,r4,9512
811335b0:	11334600 	call	81133460 <alt_dev_reg>
}
811335b4:	0001883a 	nop
811335b8:	e037883a 	mov	sp,fp
811335bc:	dfc00117 	ldw	ra,4(sp)
811335c0:	df000017 	ldw	fp,0(sp)
811335c4:	dec00204 	addi	sp,sp,8
811335c8:	f800283a 	ret

811335cc <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
811335cc:	defffa04 	addi	sp,sp,-24
811335d0:	de00012e 	bgeu	sp,et,811335d8 <Write_Sector_Data+0xc>
811335d4:	003b68fa 	trap	3
811335d8:	dfc00515 	stw	ra,20(sp)
811335dc:	df000415 	stw	fp,16(sp)
811335e0:	df000404 	addi	fp,sp,16
811335e4:	e13ffe15 	stw	r4,-8(fp)
811335e8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
811335ec:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
811335f0:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
811335f4:	10001e26 	beq	r2,zero,81133670 <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
811335f8:	00803fc4 	movi	r2,255
811335fc:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81133600:	d0a09817 	ldw	r2,-32160(gp)
81133604:	e13ffe17 	ldw	r4,-8(fp)
81133608:	e0ffff17 	ldw	r3,-4(fp)
8113360c:	20c7883a 	add	r3,r4,r3
81133610:	1806927a 	slli	r3,r3,9
81133614:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
81133618:	d0a09717 	ldw	r2,-32164(gp)
8113361c:	00c00604 	movi	r3,24
81133620:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81133624:	d0a09417 	ldw	r2,-32176(gp)
81133628:	1080002b 	ldhuio	r2,0(r2)
8113362c:	10bfffcc 	andi	r2,r2,65535
81133630:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
81133634:	e0bffd0b 	ldhu	r2,-12(fp)
81133638:	10bfffcc 	andi	r2,r2,65535
8113363c:	1080010c 	andi	r2,r2,4
81133640:	103ff81e 	bne	r2,zero,81133624 <__reset+0xfb113624>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
81133644:	e0bffd0b 	ldhu	r2,-12(fp)
81133648:	10bfffcc 	andi	r2,r2,65535
8113364c:	1080040c 	andi	r2,r2,16
81133650:	1000071e 	bne	r2,zero,81133670 <Write_Sector_Data+0xa4>
        {
            result = true;
81133654:	00800044 	movi	r2,1
81133658:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
8113365c:	d0209d15 	stw	zero,-32140(gp)
            current_sector_index = sector_index+partition_offset;
81133660:	e0fffe17 	ldw	r3,-8(fp)
81133664:	e0bfff17 	ldw	r2,-4(fp)
81133668:	1885883a 	add	r2,r3,r2
8113366c:	d0a09e15 	stw	r2,-32136(gp)
        }
    }
    return result;
81133670:	e0bffc17 	ldw	r2,-16(fp)
}
81133674:	e037883a 	mov	sp,fp
81133678:	dfc00117 	ldw	ra,4(sp)
8113367c:	df000017 	ldw	fp,0(sp)
81133680:	dec00204 	addi	sp,sp,8
81133684:	f800283a 	ret

81133688 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
81133688:	defffd04 	addi	sp,sp,-12
8113368c:	de00012e 	bgeu	sp,et,81133694 <Save_Modified_Sector+0xc>
81133690:	003b68fa 	trap	3
81133694:	dfc00215 	stw	ra,8(sp)
81133698:	df000115 	stw	fp,4(sp)
8113369c:	df000104 	addi	fp,sp,4
    bool result = true;
811336a0:	00800044 	movi	r2,1
811336a4:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
811336a8:	d0a09d17 	ldw	r2,-32140(gp)
811336ac:	10000526 	beq	r2,zero,811336c4 <Save_Modified_Sector+0x3c>
    {
        result = Write_Sector_Data(current_sector_index, 0);
811336b0:	d0a09e17 	ldw	r2,-32136(gp)
811336b4:	000b883a 	mov	r5,zero
811336b8:	1009883a 	mov	r4,r2
811336bc:	11335cc0 	call	811335cc <Write_Sector_Data>
811336c0:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
811336c4:	e0bfff17 	ldw	r2,-4(fp)
}
811336c8:	e037883a 	mov	sp,fp
811336cc:	dfc00117 	ldw	ra,4(sp)
811336d0:	df000017 	ldw	fp,0(sp)
811336d4:	dec00204 	addi	sp,sp,8
811336d8:	f800283a 	ret

811336dc <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
811336dc:	defffa04 	addi	sp,sp,-24
811336e0:	de00012e 	bgeu	sp,et,811336e8 <Read_Sector_Data+0xc>
811336e4:	003b68fa 	trap	3
811336e8:	dfc00515 	stw	ra,20(sp)
811336ec:	df000415 	stw	fp,16(sp)
811336f0:	df000404 	addi	fp,sp,16
811336f4:	e13ffe15 	stw	r4,-8(fp)
811336f8:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
811336fc:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
81133700:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
81133704:	10002726 	beq	r2,zero,811337a4 <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
81133708:	00803fc4 	movi	r2,255
8113370c:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
81133710:	d0a09d17 	ldw	r2,-32140(gp)
81133714:	10000726 	beq	r2,zero,81133734 <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
81133718:	d0a09e17 	ldw	r2,-32136(gp)
8113371c:	000b883a 	mov	r5,zero
81133720:	1009883a 	mov	r4,r2
81133724:	11335cc0 	call	811335cc <Write_Sector_Data>
81133728:	1000021e 	bne	r2,zero,81133734 <Read_Sector_Data+0x58>
            {
                return false;
8113372c:	0005883a 	mov	r2,zero
81133730:	00001d06 	br	811337a8 <Read_Sector_Data+0xcc>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81133734:	d0a09817 	ldw	r2,-32160(gp)
81133738:	e13ffe17 	ldw	r4,-8(fp)
8113373c:	e0ffff17 	ldw	r3,-4(fp)
81133740:	20c7883a 	add	r3,r4,r3
81133744:	1806927a 	slli	r3,r3,9
81133748:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
8113374c:	d0a09717 	ldw	r2,-32164(gp)
81133750:	00c00444 	movi	r3,17
81133754:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81133758:	d0a09417 	ldw	r2,-32176(gp)
8113375c:	1080002b 	ldhuio	r2,0(r2)
81133760:	10bfffcc 	andi	r2,r2,65535
81133764:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
81133768:	e0bffd0b 	ldhu	r2,-12(fp)
8113376c:	10bfffcc 	andi	r2,r2,65535
81133770:	1080010c 	andi	r2,r2,4
81133774:	103ff81e 	bne	r2,zero,81133758 <__reset+0xfb113758>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
81133778:	e0bffd0b 	ldhu	r2,-12(fp)
8113377c:	10bfffcc 	andi	r2,r2,65535
81133780:	1080040c 	andi	r2,r2,16
81133784:	1000071e 	bne	r2,zero,811337a4 <Read_Sector_Data+0xc8>
		{
			result = true;
81133788:	00800044 	movi	r2,1
8113378c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
81133790:	d0209d15 	stw	zero,-32140(gp)
            current_sector_index = sector_index+partition_offset;
81133794:	e0fffe17 	ldw	r3,-8(fp)
81133798:	e0bfff17 	ldw	r2,-4(fp)
8113379c:	1885883a 	add	r2,r3,r2
811337a0:	d0a09e15 	stw	r2,-32136(gp)
		}
	}
	return result;
811337a4:	e0bffc17 	ldw	r2,-16(fp)
}
811337a8:	e037883a 	mov	sp,fp
811337ac:	dfc00117 	ldw	ra,4(sp)
811337b0:	df000017 	ldw	fp,0(sp)
811337b4:	dec00204 	addi	sp,sp,8
811337b8:	f800283a 	ret

811337bc <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
811337bc:	defffb04 	addi	sp,sp,-20
811337c0:	de00012e 	bgeu	sp,et,811337c8 <get_cluster_flag+0xc>
811337c4:	003b68fa 	trap	3
811337c8:	dfc00415 	stw	ra,16(sp)
811337cc:	df000315 	stw	fp,12(sp)
811337d0:	df000304 	addi	fp,sp,12
811337d4:	e13ffe15 	stw	r4,-8(fp)
811337d8:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
811337dc:	e0bffe17 	ldw	r2,-8(fp)
811337e0:	1004d23a 	srli	r2,r2,8
811337e4:	d0e09a17 	ldw	r3,-32152(gp)
811337e8:	10c5883a 	add	r2,r2,r3
811337ec:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
811337f0:	00a04574 	movhi	r2,33045
811337f4:	1080a904 	addi	r2,r2,676
811337f8:	10801117 	ldw	r2,68(r2)
811337fc:	e0fffd17 	ldw	r3,-12(fp)
81133800:	1885883a 	add	r2,r3,r2
81133804:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
81133808:	d0a09e17 	ldw	r2,-32136(gp)
8113380c:	e0fffd17 	ldw	r3,-12(fp)
81133810:	18800726 	beq	r3,r2,81133830 <get_cluster_flag+0x74>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81133814:	e0bffd17 	ldw	r2,-12(fp)
81133818:	000b883a 	mov	r5,zero
8113381c:	1009883a 	mov	r4,r2
81133820:	11336dc0 	call	811336dc <Read_Sector_Data>
81133824:	1000021e 	bne	r2,zero,81133830 <get_cluster_flag+0x74>
        {
            return false;
81133828:	0005883a 	mov	r2,zero
8113382c:	00000d06 	br	81133864 <get_cluster_flag+0xa8>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
81133830:	e0bffe17 	ldw	r2,-8(fp)
81133834:	10803fcc 	andi	r2,r2,255
81133838:	1085883a 	add	r2,r2,r2
8113383c:	1007883a 	mov	r3,r2
81133840:	d0a09c17 	ldw	r2,-32144(gp)
81133844:	10800a17 	ldw	r2,40(r2)
81133848:	1885883a 	add	r2,r3,r2
8113384c:	1080002b 	ldhuio	r2,0(r2)
81133850:	10bfffcc 	andi	r2,r2,65535
81133854:	1007883a 	mov	r3,r2
81133858:	e0bfff17 	ldw	r2,-4(fp)
8113385c:	10c0000d 	sth	r3,0(r2)
    return true;
81133860:	00800044 	movi	r2,1
}
81133864:	e037883a 	mov	sp,fp
81133868:	dfc00117 	ldw	ra,4(sp)
8113386c:	df000017 	ldw	fp,0(sp)
81133870:	dec00204 	addi	sp,sp,8
81133874:	f800283a 	ret

81133878 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
81133878:	defffa04 	addi	sp,sp,-24
8113387c:	de00012e 	bgeu	sp,et,81133884 <mark_cluster+0xc>
81133880:	003b68fa 	trap	3
81133884:	dfc00515 	stw	ra,20(sp)
81133888:	df000415 	stw	fp,16(sp)
8113388c:	df000404 	addi	fp,sp,16
81133890:	e13ffd15 	stw	r4,-12(fp)
81133894:	2805883a 	mov	r2,r5
81133898:	e1bfff15 	stw	r6,-4(fp)
8113389c:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
811338a0:	e0bffd17 	ldw	r2,-12(fp)
811338a4:	1004d23a 	srli	r2,r2,8
811338a8:	d0e09a17 	ldw	r3,-32152(gp)
811338ac:	10c5883a 	add	r2,r2,r3
811338b0:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
811338b4:	e0bfff17 	ldw	r2,-4(fp)
811338b8:	10000726 	beq	r2,zero,811338d8 <mark_cluster+0x60>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
811338bc:	00a04574 	movhi	r2,33045
811338c0:	1080a904 	addi	r2,r2,676
811338c4:	10801117 	ldw	r2,68(r2)
811338c8:	e0fffc17 	ldw	r3,-16(fp)
811338cc:	1885883a 	add	r2,r3,r2
811338d0:	e0bffc15 	stw	r2,-16(fp)
811338d4:	00000606 	br	811338f0 <mark_cluster+0x78>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
811338d8:	00a04574 	movhi	r2,33045
811338dc:	1080a904 	addi	r2,r2,676
811338e0:	10801217 	ldw	r2,72(r2)
811338e4:	e0fffc17 	ldw	r3,-16(fp)
811338e8:	1885883a 	add	r2,r3,r2
811338ec:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
811338f0:	d0a09e17 	ldw	r2,-32136(gp)
811338f4:	e0fffc17 	ldw	r3,-16(fp)
811338f8:	18800726 	beq	r3,r2,81133918 <mark_cluster+0xa0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
811338fc:	e0bffc17 	ldw	r2,-16(fp)
81133900:	000b883a 	mov	r5,zero
81133904:	1009883a 	mov	r4,r2
81133908:	11336dc0 	call	811336dc <Read_Sector_Data>
8113390c:	1000021e 	bne	r2,zero,81133918 <mark_cluster+0xa0>
        {
            return false;
81133910:	0005883a 	mov	r2,zero
81133914:	00000d06 	br	8113394c <mark_cluster+0xd4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
81133918:	e0bffd17 	ldw	r2,-12(fp)
8113391c:	10803fcc 	andi	r2,r2,255
81133920:	1085883a 	add	r2,r2,r2
81133924:	1007883a 	mov	r3,r2
81133928:	d0a09c17 	ldw	r2,-32144(gp)
8113392c:	10800a17 	ldw	r2,40(r2)
81133930:	1885883a 	add	r2,r3,r2
81133934:	1007883a 	mov	r3,r2
81133938:	e0bffe0f 	ldh	r2,-8(fp)
8113393c:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
81133940:	00800044 	movi	r2,1
81133944:	d0a09d15 	stw	r2,-32140(gp)
    return true;
81133948:	00800044 	movi	r2,1
}
8113394c:	e037883a 	mov	sp,fp
81133950:	dfc00117 	ldw	ra,4(sp)
81133954:	df000017 	ldw	fp,0(sp)
81133958:	dec00204 	addi	sp,sp,8
8113395c:	f800283a 	ret

81133960 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
81133960:	defff704 	addi	sp,sp,-36
81133964:	de00012e 	bgeu	sp,et,8113396c <Check_for_Master_Boot_Record+0xc>
81133968:	003b68fa 	trap	3
8113396c:	dfc00815 	stw	ra,32(sp)
81133970:	df000715 	stw	fp,28(sp)
81133974:	df000704 	addi	fp,sp,28
	bool result = false;
81133978:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
8113397c:	000b883a 	mov	r5,zero
81133980:	0009883a 	mov	r4,zero
81133984:	11336dc0 	call	811336dc <Read_Sector_Data>
81133988:	10005a26 	beq	r2,zero,81133af4 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
8113398c:	d0a09c17 	ldw	r2,-32144(gp)
81133990:	10800a17 	ldw	r2,40(r2)
81133994:	10807f84 	addi	r2,r2,510
81133998:	1080002b 	ldhuio	r2,0(r2)
8113399c:	10bfffcc 	andi	r2,r2,65535
811339a0:	10bfffcc 	andi	r2,r2,65535
811339a4:	10a0001c 	xori	r2,r2,32768
811339a8:	10a00004 	addi	r2,r2,-32768
811339ac:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
811339b0:	e0bffb17 	ldw	r2,-20(fp)
811339b4:	10ffffcc 	andi	r3,r2,65535
811339b8:	00aa9554 	movui	r2,43605
811339bc:	18804d1e 	bne	r3,r2,81133af4 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
811339c0:	e03ffa15 	stw	zero,-24(fp)
811339c4:	00004806 	br	81133ae8 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
811339c8:	e0bffa17 	ldw	r2,-24(fp)
811339cc:	1004913a 	slli	r2,r2,4
811339d0:	10806f84 	addi	r2,r2,446
811339d4:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
811339d8:	d0a09c17 	ldw	r2,-32144(gp)
811339dc:	10c00a17 	ldw	r3,40(r2)
811339e0:	e0bffc17 	ldw	r2,-16(fp)
811339e4:	1885883a 	add	r2,r3,r2
811339e8:	10800104 	addi	r2,r2,4
811339ec:	10800023 	ldbuio	r2,0(r2)
811339f0:	10803fcc 	andi	r2,r2,255
811339f4:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
811339f8:	e0bffd07 	ldb	r2,-12(fp)
811339fc:	10800060 	cmpeqi	r2,r2,1
81133a00:	1000091e 	bne	r2,zero,81133a28 <Check_for_Master_Boot_Record+0xc8>
81133a04:	e0bffd07 	ldb	r2,-12(fp)
81133a08:	10800120 	cmpeqi	r2,r2,4
81133a0c:	1000061e 	bne	r2,zero,81133a28 <Check_for_Master_Boot_Record+0xc8>
81133a10:	e0bffd07 	ldb	r2,-12(fp)
81133a14:	108001a0 	cmpeqi	r2,r2,6
81133a18:	1000031e 	bne	r2,zero,81133a28 <Check_for_Master_Boot_Record+0xc8>
81133a1c:	e0bffd07 	ldb	r2,-12(fp)
81133a20:	10800398 	cmpnei	r2,r2,14
81133a24:	10002d1e 	bne	r2,zero,81133adc <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
81133a28:	d0a09c17 	ldw	r2,-32144(gp)
81133a2c:	10c00a17 	ldw	r3,40(r2)
81133a30:	e0bffc17 	ldw	r2,-16(fp)
81133a34:	1885883a 	add	r2,r3,r2
81133a38:	10800284 	addi	r2,r2,10
81133a3c:	1080002b 	ldhuio	r2,0(r2)
81133a40:	10bfffcc 	andi	r2,r2,65535
81133a44:	1006943a 	slli	r3,r2,16
81133a48:	d0a09c17 	ldw	r2,-32144(gp)
81133a4c:	11000a17 	ldw	r4,40(r2)
81133a50:	e0bffc17 	ldw	r2,-16(fp)
81133a54:	2085883a 	add	r2,r4,r2
81133a58:	10800204 	addi	r2,r2,8
81133a5c:	1080002b 	ldhuio	r2,0(r2)
81133a60:	10bfffcc 	andi	r2,r2,65535
81133a64:	10bfffcc 	andi	r2,r2,65535
81133a68:	1884b03a 	or	r2,r3,r2
81133a6c:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
81133a70:	d0a09c17 	ldw	r2,-32144(gp)
81133a74:	10c00a17 	ldw	r3,40(r2)
81133a78:	e0bffc17 	ldw	r2,-16(fp)
81133a7c:	1885883a 	add	r2,r3,r2
81133a80:	10800384 	addi	r2,r2,14
81133a84:	1080002b 	ldhuio	r2,0(r2)
81133a88:	10bfffcc 	andi	r2,r2,65535
81133a8c:	1006943a 	slli	r3,r2,16
81133a90:	d0a09c17 	ldw	r2,-32144(gp)
81133a94:	11000a17 	ldw	r4,40(r2)
81133a98:	e0bffc17 	ldw	r2,-16(fp)
81133a9c:	2085883a 	add	r2,r4,r2
81133aa0:	10800304 	addi	r2,r2,12
81133aa4:	1080002b 	ldhuio	r2,0(r2)
81133aa8:	10bfffcc 	andi	r2,r2,65535
81133aac:	10bfffcc 	andi	r2,r2,65535
81133ab0:	1884b03a 	or	r2,r3,r2
81133ab4:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
81133ab8:	e0bfff17 	ldw	r2,-4(fp)
81133abc:	0080070e 	bge	zero,r2,81133adc <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
81133ac0:	00800044 	movi	r2,1
81133ac4:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
81133ac8:	e0bfff17 	ldw	r2,-4(fp)
81133acc:	d0a09b15 	stw	r2,-32148(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
81133ad0:	e0bffe17 	ldw	r2,-8(fp)
81133ad4:	d0a09a15 	stw	r2,-32152(gp)
						break;
81133ad8:	00000606 	br	81133af4 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
81133adc:	e0bffa17 	ldw	r2,-24(fp)
81133ae0:	10800044 	addi	r2,r2,1
81133ae4:	e0bffa15 	stw	r2,-24(fp)
81133ae8:	e0bffa17 	ldw	r2,-24(fp)
81133aec:	10800110 	cmplti	r2,r2,4
81133af0:	103fb51e 	bne	r2,zero,811339c8 <__reset+0xfb1139c8>
				}
			}
		}
	}

	return result;
81133af4:	e0bff917 	ldw	r2,-28(fp)
}
81133af8:	e037883a 	mov	sp,fp
81133afc:	dfc00117 	ldw	ra,4(sp)
81133b00:	df000017 	ldw	fp,0(sp)
81133b04:	dec00204 	addi	sp,sp,8
81133b08:	f800283a 	ret

81133b0c <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
81133b0c:	defff804 	addi	sp,sp,-32
81133b10:	de00012e 	bgeu	sp,et,81133b18 <Read_File_Record_At_Offset+0xc>
81133b14:	003b68fa 	trap	3
81133b18:	dfc00715 	stw	ra,28(sp)
81133b1c:	df000615 	stw	fp,24(sp)
81133b20:	df000604 	addi	fp,sp,24
81133b24:	e13ffc15 	stw	r4,-16(fp)
81133b28:	e17ffd15 	stw	r5,-12(fp)
81133b2c:	e1bffe15 	stw	r6,-8(fp)
81133b30:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
81133b34:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81133b38:	e0bffc17 	ldw	r2,-16(fp)
81133b3c:	108007cc 	andi	r2,r2,31
81133b40:	10008d1e 	bne	r2,zero,81133d78 <Read_File_Record_At_Offset+0x26c>
81133b44:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
81133b48:	10008b26 	beq	r2,zero,81133d78 <Read_File_Record_At_Offset+0x26c>
81133b4c:	d0a09317 	ldw	r2,-32180(gp)
81133b50:	10008926 	beq	r2,zero,81133d78 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81133b54:	e03ffb15 	stw	zero,-20(fp)
81133b58:	00001106 	br	81133ba0 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
81133b5c:	e0fffc17 	ldw	r3,-16(fp)
81133b60:	e0bffb17 	ldw	r2,-20(fp)
81133b64:	1885883a 	add	r2,r3,r2
81133b68:	1007883a 	mov	r3,r2
81133b6c:	d0a09c17 	ldw	r2,-32144(gp)
81133b70:	10800a17 	ldw	r2,40(r2)
81133b74:	1885883a 	add	r2,r3,r2
81133b78:	10800023 	ldbuio	r2,0(r2)
81133b7c:	10803fcc 	andi	r2,r2,255
81133b80:	1009883a 	mov	r4,r2
81133b84:	e0fffd17 	ldw	r3,-12(fp)
81133b88:	e0bffb17 	ldw	r2,-20(fp)
81133b8c:	1885883a 	add	r2,r3,r2
81133b90:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81133b94:	e0bffb17 	ldw	r2,-20(fp)
81133b98:	10800044 	addi	r2,r2,1
81133b9c:	e0bffb15 	stw	r2,-20(fp)
81133ba0:	e0bffb17 	ldw	r2,-20(fp)
81133ba4:	10800210 	cmplti	r2,r2,8
81133ba8:	103fec1e 	bne	r2,zero,81133b5c <__reset+0xfb113b5c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81133bac:	e03ffb15 	stw	zero,-20(fp)
81133bb0:	00001306 	br	81133c00 <Read_File_Record_At_Offset+0xf4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
81133bb4:	e0fffc17 	ldw	r3,-16(fp)
81133bb8:	e0bffb17 	ldw	r2,-20(fp)
81133bbc:	1885883a 	add	r2,r3,r2
81133bc0:	1007883a 	mov	r3,r2
81133bc4:	d0a09c17 	ldw	r2,-32144(gp)
81133bc8:	10800a17 	ldw	r2,40(r2)
81133bcc:	1885883a 	add	r2,r3,r2
81133bd0:	10800204 	addi	r2,r2,8
81133bd4:	10800023 	ldbuio	r2,0(r2)
81133bd8:	10803fcc 	andi	r2,r2,255
81133bdc:	1009883a 	mov	r4,r2
81133be0:	e0fffd17 	ldw	r3,-12(fp)
81133be4:	e0bffb17 	ldw	r2,-20(fp)
81133be8:	1885883a 	add	r2,r3,r2
81133bec:	10800204 	addi	r2,r2,8
81133bf0:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81133bf4:	e0bffb17 	ldw	r2,-20(fp)
81133bf8:	10800044 	addi	r2,r2,1
81133bfc:	e0bffb15 	stw	r2,-20(fp)
81133c00:	e0bffb17 	ldw	r2,-20(fp)
81133c04:	108000d0 	cmplti	r2,r2,3
81133c08:	103fea1e 	bne	r2,zero,81133bb4 <__reset+0xfb113bb4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
81133c0c:	d0a09c17 	ldw	r2,-32144(gp)
81133c10:	10c00a17 	ldw	r3,40(r2)
81133c14:	e0bffc17 	ldw	r2,-16(fp)
81133c18:	1885883a 	add	r2,r3,r2
81133c1c:	108002c4 	addi	r2,r2,11
81133c20:	10800023 	ldbuio	r2,0(r2)
81133c24:	10803fcc 	andi	r2,r2,255
81133c28:	1007883a 	mov	r3,r2
81133c2c:	e0bffd17 	ldw	r2,-12(fp)
81133c30:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
81133c34:	d0a09c17 	ldw	r2,-32144(gp)
81133c38:	10c00a17 	ldw	r3,40(r2)
81133c3c:	e0bffc17 	ldw	r2,-16(fp)
81133c40:	1885883a 	add	r2,r3,r2
81133c44:	10800384 	addi	r2,r2,14
81133c48:	1080002b 	ldhuio	r2,0(r2)
81133c4c:	10bfffcc 	andi	r2,r2,65535
81133c50:	1007883a 	mov	r3,r2
81133c54:	e0bffd17 	ldw	r2,-12(fp)
81133c58:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
81133c5c:	d0a09c17 	ldw	r2,-32144(gp)
81133c60:	10c00a17 	ldw	r3,40(r2)
81133c64:	e0bffc17 	ldw	r2,-16(fp)
81133c68:	1885883a 	add	r2,r3,r2
81133c6c:	10800404 	addi	r2,r2,16
81133c70:	1080002b 	ldhuio	r2,0(r2)
81133c74:	10bfffcc 	andi	r2,r2,65535
81133c78:	1007883a 	mov	r3,r2
81133c7c:	e0bffd17 	ldw	r2,-12(fp)
81133c80:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
81133c84:	d0a09c17 	ldw	r2,-32144(gp)
81133c88:	10c00a17 	ldw	r3,40(r2)
81133c8c:	e0bffc17 	ldw	r2,-16(fp)
81133c90:	1885883a 	add	r2,r3,r2
81133c94:	10800484 	addi	r2,r2,18
81133c98:	1080002b 	ldhuio	r2,0(r2)
81133c9c:	10bfffcc 	andi	r2,r2,65535
81133ca0:	1007883a 	mov	r3,r2
81133ca4:	e0bffd17 	ldw	r2,-12(fp)
81133ca8:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
81133cac:	d0a09c17 	ldw	r2,-32144(gp)
81133cb0:	10c00a17 	ldw	r3,40(r2)
81133cb4:	e0bffc17 	ldw	r2,-16(fp)
81133cb8:	1885883a 	add	r2,r3,r2
81133cbc:	10800584 	addi	r2,r2,22
81133cc0:	1080002b 	ldhuio	r2,0(r2)
81133cc4:	10bfffcc 	andi	r2,r2,65535
81133cc8:	1007883a 	mov	r3,r2
81133ccc:	e0bffd17 	ldw	r2,-12(fp)
81133cd0:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
81133cd4:	d0a09c17 	ldw	r2,-32144(gp)
81133cd8:	10c00a17 	ldw	r3,40(r2)
81133cdc:	e0bffc17 	ldw	r2,-16(fp)
81133ce0:	1885883a 	add	r2,r3,r2
81133ce4:	10800604 	addi	r2,r2,24
81133ce8:	1080002b 	ldhuio	r2,0(r2)
81133cec:	10bfffcc 	andi	r2,r2,65535
81133cf0:	1007883a 	mov	r3,r2
81133cf4:	e0bffd17 	ldw	r2,-12(fp)
81133cf8:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
81133cfc:	d0a09c17 	ldw	r2,-32144(gp)
81133d00:	10c00a17 	ldw	r3,40(r2)
81133d04:	e0bffc17 	ldw	r2,-16(fp)
81133d08:	1885883a 	add	r2,r3,r2
81133d0c:	10800684 	addi	r2,r2,26
81133d10:	1080002b 	ldhuio	r2,0(r2)
81133d14:	10bfffcc 	andi	r2,r2,65535
81133d18:	1007883a 	mov	r3,r2
81133d1c:	e0bffd17 	ldw	r2,-12(fp)
81133d20:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
81133d24:	d0a09c17 	ldw	r2,-32144(gp)
81133d28:	10c00a17 	ldw	r3,40(r2)
81133d2c:	e0bffc17 	ldw	r2,-16(fp)
81133d30:	1885883a 	add	r2,r3,r2
81133d34:	10800704 	addi	r2,r2,28
81133d38:	10800037 	ldwio	r2,0(r2)
81133d3c:	1007883a 	mov	r3,r2
81133d40:	e0bffd17 	ldw	r2,-12(fp)
81133d44:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
81133d48:	e0bffd17 	ldw	r2,-12(fp)
81133d4c:	e0fffe17 	ldw	r3,-8(fp)
81133d50:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
81133d54:	e0bffd17 	ldw	r2,-12(fp)
81133d58:	e0ffff17 	ldw	r3,-4(fp)
81133d5c:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
81133d60:	e0bffc17 	ldw	r2,-16(fp)
81133d64:	1007883a 	mov	r3,r2
81133d68:	e0bffd17 	ldw	r2,-12(fp)
81133d6c:	10c00c0d 	sth	r3,48(r2)
		result = true;
81133d70:	00800044 	movi	r2,1
81133d74:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
81133d78:	e0bffa17 	ldw	r2,-24(fp)
}
81133d7c:	e037883a 	mov	sp,fp
81133d80:	dfc00117 	ldw	ra,4(sp)
81133d84:	df000017 	ldw	fp,0(sp)
81133d88:	dec00204 	addi	sp,sp,8
81133d8c:	f800283a 	ret

81133d90 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
81133d90:	defff904 	addi	sp,sp,-28
81133d94:	de00012e 	bgeu	sp,et,81133d9c <Write_File_Record_At_Offset+0xc>
81133d98:	003b68fa 	trap	3
81133d9c:	dfc00615 	stw	ra,24(sp)
81133da0:	df000515 	stw	fp,20(sp)
81133da4:	df000504 	addi	fp,sp,20
81133da8:	e13ffe15 	stw	r4,-8(fp)
81133dac:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81133db0:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81133db4:	e0bffe17 	ldw	r2,-8(fp)
81133db8:	108007cc 	andi	r2,r2,31
81133dbc:	1000931e 	bne	r2,zero,8113400c <Write_File_Record_At_Offset+0x27c>
81133dc0:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
81133dc4:	10009126 	beq	r2,zero,8113400c <Write_File_Record_At_Offset+0x27c>
81133dc8:	d0a09317 	ldw	r2,-32180(gp)
81133dcc:	10008f26 	beq	r2,zero,8113400c <Write_File_Record_At_Offset+0x27c>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81133dd0:	e03ffc15 	stw	zero,-16(fp)
81133dd4:	00001f06 	br	81133e54 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
81133dd8:	e0bffc17 	ldw	r2,-16(fp)
81133ddc:	10800044 	addi	r2,r2,1
81133de0:	e0ffff17 	ldw	r3,-4(fp)
81133de4:	1885883a 	add	r2,r3,r2
81133de8:	10800003 	ldbu	r2,0(r2)
81133dec:	10803fcc 	andi	r2,r2,255
81133df0:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
81133df4:	e0bffd0f 	ldh	r2,-12(fp)
81133df8:	1004923a 	slli	r2,r2,8
81133dfc:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
81133e00:	e0ffff17 	ldw	r3,-4(fp)
81133e04:	e0bffc17 	ldw	r2,-16(fp)
81133e08:	1885883a 	add	r2,r3,r2
81133e0c:	10800003 	ldbu	r2,0(r2)
81133e10:	10c03fcc 	andi	r3,r2,255
81133e14:	e0bffd0b 	ldhu	r2,-12(fp)
81133e18:	1884b03a 	or	r2,r3,r2
81133e1c:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
81133e20:	e0fffe17 	ldw	r3,-8(fp)
81133e24:	e0bffc17 	ldw	r2,-16(fp)
81133e28:	1885883a 	add	r2,r3,r2
81133e2c:	1007883a 	mov	r3,r2
81133e30:	d0a09c17 	ldw	r2,-32144(gp)
81133e34:	10800a17 	ldw	r2,40(r2)
81133e38:	1885883a 	add	r2,r3,r2
81133e3c:	1007883a 	mov	r3,r2
81133e40:	e0bffd0f 	ldh	r2,-12(fp)
81133e44:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81133e48:	e0bffc17 	ldw	r2,-16(fp)
81133e4c:	10800084 	addi	r2,r2,2
81133e50:	e0bffc15 	stw	r2,-16(fp)
81133e54:	e0bffc17 	ldw	r2,-16(fp)
81133e58:	10800210 	cmplti	r2,r2,8
81133e5c:	103fde1e 	bne	r2,zero,81133dd8 <__reset+0xfb113dd8>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81133e60:	e03ffc15 	stw	zero,-16(fp)
81133e64:	00001306 	br	81133eb4 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
81133e68:	e0fffe17 	ldw	r3,-8(fp)
81133e6c:	e0bffc17 	ldw	r2,-16(fp)
81133e70:	1885883a 	add	r2,r3,r2
81133e74:	1007883a 	mov	r3,r2
81133e78:	d0a09c17 	ldw	r2,-32144(gp)
81133e7c:	10800a17 	ldw	r2,40(r2)
81133e80:	1885883a 	add	r2,r3,r2
81133e84:	10800204 	addi	r2,r2,8
81133e88:	1009883a 	mov	r4,r2
81133e8c:	e0ffff17 	ldw	r3,-4(fp)
81133e90:	e0bffc17 	ldw	r2,-16(fp)
81133e94:	1885883a 	add	r2,r3,r2
81133e98:	10800204 	addi	r2,r2,8
81133e9c:	10800003 	ldbu	r2,0(r2)
81133ea0:	10803fcc 	andi	r2,r2,255
81133ea4:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
81133ea8:	e0bffc17 	ldw	r2,-16(fp)
81133eac:	10800044 	addi	r2,r2,1
81133eb0:	e0bffc15 	stw	r2,-16(fp)
81133eb4:	e0bffc17 	ldw	r2,-16(fp)
81133eb8:	108000d0 	cmplti	r2,r2,3
81133ebc:	103fea1e 	bne	r2,zero,81133e68 <__reset+0xfb113e68>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
81133ec0:	d0a09c17 	ldw	r2,-32144(gp)
81133ec4:	10c00a17 	ldw	r3,40(r2)
81133ec8:	e0bffe17 	ldw	r2,-8(fp)
81133ecc:	1885883a 	add	r2,r3,r2
81133ed0:	108002c4 	addi	r2,r2,11
81133ed4:	1007883a 	mov	r3,r2
81133ed8:	e0bfff17 	ldw	r2,-4(fp)
81133edc:	108002c3 	ldbu	r2,11(r2)
81133ee0:	10803fcc 	andi	r2,r2,255
81133ee4:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
81133ee8:	d0a09c17 	ldw	r2,-32144(gp)
81133eec:	10c00a17 	ldw	r3,40(r2)
81133ef0:	e0bffe17 	ldw	r2,-8(fp)
81133ef4:	1885883a 	add	r2,r3,r2
81133ef8:	10800384 	addi	r2,r2,14
81133efc:	1007883a 	mov	r3,r2
81133f00:	e0bfff17 	ldw	r2,-4(fp)
81133f04:	1080030b 	ldhu	r2,12(r2)
81133f08:	10bfffcc 	andi	r2,r2,65535
81133f0c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
81133f10:	d0a09c17 	ldw	r2,-32144(gp)
81133f14:	10c00a17 	ldw	r3,40(r2)
81133f18:	e0bffe17 	ldw	r2,-8(fp)
81133f1c:	1885883a 	add	r2,r3,r2
81133f20:	10800404 	addi	r2,r2,16
81133f24:	1007883a 	mov	r3,r2
81133f28:	e0bfff17 	ldw	r2,-4(fp)
81133f2c:	1080038b 	ldhu	r2,14(r2)
81133f30:	10bfffcc 	andi	r2,r2,65535
81133f34:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
81133f38:	d0a09c17 	ldw	r2,-32144(gp)
81133f3c:	10c00a17 	ldw	r3,40(r2)
81133f40:	e0bffe17 	ldw	r2,-8(fp)
81133f44:	1885883a 	add	r2,r3,r2
81133f48:	10800484 	addi	r2,r2,18
81133f4c:	1007883a 	mov	r3,r2
81133f50:	e0bfff17 	ldw	r2,-4(fp)
81133f54:	1080040b 	ldhu	r2,16(r2)
81133f58:	10bfffcc 	andi	r2,r2,65535
81133f5c:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
81133f60:	d0a09c17 	ldw	r2,-32144(gp)
81133f64:	10c00a17 	ldw	r3,40(r2)
81133f68:	e0bffe17 	ldw	r2,-8(fp)
81133f6c:	1885883a 	add	r2,r3,r2
81133f70:	10800584 	addi	r2,r2,22
81133f74:	1007883a 	mov	r3,r2
81133f78:	e0bfff17 	ldw	r2,-4(fp)
81133f7c:	1080048b 	ldhu	r2,18(r2)
81133f80:	10bfffcc 	andi	r2,r2,65535
81133f84:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
81133f88:	d0a09c17 	ldw	r2,-32144(gp)
81133f8c:	10c00a17 	ldw	r3,40(r2)
81133f90:	e0bffe17 	ldw	r2,-8(fp)
81133f94:	1885883a 	add	r2,r3,r2
81133f98:	10800604 	addi	r2,r2,24
81133f9c:	1007883a 	mov	r3,r2
81133fa0:	e0bfff17 	ldw	r2,-4(fp)
81133fa4:	1080050b 	ldhu	r2,20(r2)
81133fa8:	10bfffcc 	andi	r2,r2,65535
81133fac:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
81133fb0:	d0a09c17 	ldw	r2,-32144(gp)
81133fb4:	10c00a17 	ldw	r3,40(r2)
81133fb8:	e0bffe17 	ldw	r2,-8(fp)
81133fbc:	1885883a 	add	r2,r3,r2
81133fc0:	10800684 	addi	r2,r2,26
81133fc4:	1007883a 	mov	r3,r2
81133fc8:	e0bfff17 	ldw	r2,-4(fp)
81133fcc:	1080058b 	ldhu	r2,22(r2)
81133fd0:	10bfffcc 	andi	r2,r2,65535
81133fd4:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
81133fd8:	d0a09c17 	ldw	r2,-32144(gp)
81133fdc:	10c00a17 	ldw	r3,40(r2)
81133fe0:	e0bffe17 	ldw	r2,-8(fp)
81133fe4:	1885883a 	add	r2,r3,r2
81133fe8:	10800704 	addi	r2,r2,28
81133fec:	1007883a 	mov	r3,r2
81133ff0:	e0bfff17 	ldw	r2,-4(fp)
81133ff4:	10800617 	ldw	r2,24(r2)
81133ff8:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
81133ffc:	00800044 	movi	r2,1
81134000:	d0a09d15 	stw	r2,-32140(gp)
        result = true;
81134004:	00800044 	movi	r2,1
81134008:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
8113400c:	e0bffb17 	ldw	r2,-20(fp)
}
81134010:	e037883a 	mov	sp,fp
81134014:	dfc00117 	ldw	ra,4(sp)
81134018:	df000017 	ldw	fp,0(sp)
8113401c:	dec00204 	addi	sp,sp,8
81134020:	f800283a 	ret

81134024 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
81134024:	defff904 	addi	sp,sp,-28
81134028:	de00012e 	bgeu	sp,et,81134030 <Check_for_DOS_FAT+0xc>
8113402c:	003b68fa 	trap	3
81134030:	dfc00615 	stw	ra,24(sp)
81134034:	df000515 	stw	fp,20(sp)
81134038:	df000504 	addi	fp,sp,20
8113403c:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
81134040:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
81134044:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
81134048:	e17fff17 	ldw	r5,-4(fp)
8113404c:	0009883a 	mov	r4,zero
81134050:	11336dc0 	call	811336dc <Read_Sector_Data>
81134054:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
81134058:	d0a09c17 	ldw	r2,-32144(gp)
8113405c:	10800a17 	ldw	r2,40(r2)
81134060:	10807f84 	addi	r2,r2,510
81134064:	1080002b 	ldhuio	r2,0(r2)
81134068:	10bfffcc 	andi	r2,r2,65535
8113406c:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
81134070:	e0bffe0f 	ldh	r2,-8(fp)
81134074:	10ffffcc 	andi	r3,r2,65535
81134078:	00aa9554 	movui	r2,43605
8113407c:	1881841e 	bne	r3,r2,81134690 <Check_for_DOS_FAT+0x66c>
81134080:	e0bffb17 	ldw	r2,-20(fp)
81134084:	10018226 	beq	r2,zero,81134690 <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
81134088:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
8113408c:	d0a09c17 	ldw	r2,-32144(gp)
81134090:	10800a17 	ldw	r2,40(r2)
81134094:	10800023 	ldbuio	r2,0(r2)
81134098:	10803fcc 	andi	r2,r2,255
8113409c:	1007883a 	mov	r3,r2
811340a0:	00a04574 	movhi	r2,33045
811340a4:	1080a904 	addi	r2,r2,676
811340a8:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
811340ac:	d0a09c17 	ldw	r2,-32144(gp)
811340b0:	10800a17 	ldw	r2,40(r2)
811340b4:	10800044 	addi	r2,r2,1
811340b8:	10800023 	ldbuio	r2,0(r2)
811340bc:	10803fcc 	andi	r2,r2,255
811340c0:	1007883a 	mov	r3,r2
811340c4:	00a04574 	movhi	r2,33045
811340c8:	1080a904 	addi	r2,r2,676
811340cc:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
811340d0:	d0a09c17 	ldw	r2,-32144(gp)
811340d4:	10800a17 	ldw	r2,40(r2)
811340d8:	10800084 	addi	r2,r2,2
811340dc:	10800023 	ldbuio	r2,0(r2)
811340e0:	10803fcc 	andi	r2,r2,255
811340e4:	1007883a 	mov	r3,r2
811340e8:	00a04574 	movhi	r2,33045
811340ec:	1080a904 	addi	r2,r2,676
811340f0:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
811340f4:	e03ffc15 	stw	zero,-16(fp)
811340f8:	00001106 	br	81134140 <Check_for_DOS_FAT+0x11c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
811340fc:	d0a09c17 	ldw	r2,-32144(gp)
81134100:	10c00a17 	ldw	r3,40(r2)
81134104:	e0bffc17 	ldw	r2,-16(fp)
81134108:	1885883a 	add	r2,r3,r2
8113410c:	108000c4 	addi	r2,r2,3
81134110:	10800023 	ldbuio	r2,0(r2)
81134114:	10803fcc 	andi	r2,r2,255
81134118:	1009883a 	mov	r4,r2
8113411c:	00a04574 	movhi	r2,33045
81134120:	1080a904 	addi	r2,r2,676
81134124:	e0fffc17 	ldw	r3,-16(fp)
81134128:	10c5883a 	add	r2,r2,r3
8113412c:	108000c4 	addi	r2,r2,3
81134130:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
81134134:	e0bffc17 	ldw	r2,-16(fp)
81134138:	10800044 	addi	r2,r2,1
8113413c:	e0bffc15 	stw	r2,-16(fp)
81134140:	e0bffc17 	ldw	r2,-16(fp)
81134144:	10800210 	cmplti	r2,r2,8
81134148:	103fec1e 	bne	r2,zero,811340fc <__reset+0xfb1140fc>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
8113414c:	d0a09c17 	ldw	r2,-32144(gp)
81134150:	10800a17 	ldw	r2,40(r2)
81134154:	10800304 	addi	r2,r2,12
81134158:	10800023 	ldbuio	r2,0(r2)
8113415c:	10803fcc 	andi	r2,r2,255
81134160:	1004923a 	slli	r2,r2,8
81134164:	1007883a 	mov	r3,r2
81134168:	d0a09c17 	ldw	r2,-32144(gp)
8113416c:	10800a17 	ldw	r2,40(r2)
81134170:	108002c4 	addi	r2,r2,11
81134174:	10800023 	ldbuio	r2,0(r2)
81134178:	10803fcc 	andi	r2,r2,255
8113417c:	10803fcc 	andi	r2,r2,255
81134180:	1080201c 	xori	r2,r2,128
81134184:	10bfe004 	addi	r2,r2,-128
81134188:	1884b03a 	or	r2,r3,r2
8113418c:	1007883a 	mov	r3,r2
81134190:	00a04574 	movhi	r2,33045
81134194:	1080a904 	addi	r2,r2,676
81134198:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
8113419c:	d0a09c17 	ldw	r2,-32144(gp)
811341a0:	10800a17 	ldw	r2,40(r2)
811341a4:	10800344 	addi	r2,r2,13
811341a8:	10800023 	ldbuio	r2,0(r2)
811341ac:	10803fcc 	andi	r2,r2,255
811341b0:	1007883a 	mov	r3,r2
811341b4:	00a04574 	movhi	r2,33045
811341b8:	1080a904 	addi	r2,r2,676
811341bc:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
811341c0:	d0a09c17 	ldw	r2,-32144(gp)
811341c4:	10800a17 	ldw	r2,40(r2)
811341c8:	10800384 	addi	r2,r2,14
811341cc:	1080002b 	ldhuio	r2,0(r2)
811341d0:	10bfffcc 	andi	r2,r2,65535
811341d4:	1007883a 	mov	r3,r2
811341d8:	00a04574 	movhi	r2,33045
811341dc:	1080a904 	addi	r2,r2,676
811341e0:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
811341e4:	d0a09c17 	ldw	r2,-32144(gp)
811341e8:	10800a17 	ldw	r2,40(r2)
811341ec:	10800404 	addi	r2,r2,16
811341f0:	10800023 	ldbuio	r2,0(r2)
811341f4:	10803fcc 	andi	r2,r2,255
811341f8:	1007883a 	mov	r3,r2
811341fc:	00a04574 	movhi	r2,33045
81134200:	1080a904 	addi	r2,r2,676
81134204:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
81134208:	d0a09c17 	ldw	r2,-32144(gp)
8113420c:	10800a17 	ldw	r2,40(r2)
81134210:	10800484 	addi	r2,r2,18
81134214:	10800023 	ldbuio	r2,0(r2)
81134218:	10803fcc 	andi	r2,r2,255
8113421c:	1004923a 	slli	r2,r2,8
81134220:	1007883a 	mov	r3,r2
81134224:	d0a09c17 	ldw	r2,-32144(gp)
81134228:	10800a17 	ldw	r2,40(r2)
8113422c:	10800444 	addi	r2,r2,17
81134230:	10800023 	ldbuio	r2,0(r2)
81134234:	10803fcc 	andi	r2,r2,255
81134238:	10803fcc 	andi	r2,r2,255
8113423c:	1884b03a 	or	r2,r3,r2
81134240:	1007883a 	mov	r3,r2
81134244:	00a04574 	movhi	r2,33045
81134248:	1080a904 	addi	r2,r2,676
8113424c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
81134250:	d0a09c17 	ldw	r2,-32144(gp)
81134254:	10800a17 	ldw	r2,40(r2)
81134258:	10800504 	addi	r2,r2,20
8113425c:	10800023 	ldbuio	r2,0(r2)
81134260:	10803fcc 	andi	r2,r2,255
81134264:	1004923a 	slli	r2,r2,8
81134268:	1007883a 	mov	r3,r2
8113426c:	d0a09c17 	ldw	r2,-32144(gp)
81134270:	10800a17 	ldw	r2,40(r2)
81134274:	108004c4 	addi	r2,r2,19
81134278:	10800023 	ldbuio	r2,0(r2)
8113427c:	10803fcc 	andi	r2,r2,255
81134280:	10803fcc 	andi	r2,r2,255
81134284:	1884b03a 	or	r2,r3,r2
81134288:	1007883a 	mov	r3,r2
8113428c:	00a04574 	movhi	r2,33045
81134290:	1080a904 	addi	r2,r2,676
81134294:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
81134298:	d0a09c17 	ldw	r2,-32144(gp)
8113429c:	10800a17 	ldw	r2,40(r2)
811342a0:	10800544 	addi	r2,r2,21
811342a4:	10800023 	ldbuio	r2,0(r2)
811342a8:	10803fcc 	andi	r2,r2,255
811342ac:	1007883a 	mov	r3,r2
811342b0:	00a04574 	movhi	r2,33045
811342b4:	1080a904 	addi	r2,r2,676
811342b8:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
811342bc:	d0a09c17 	ldw	r2,-32144(gp)
811342c0:	10800a17 	ldw	r2,40(r2)
811342c4:	10800584 	addi	r2,r2,22
811342c8:	1080002b 	ldhuio	r2,0(r2)
811342cc:	10bfffcc 	andi	r2,r2,65535
811342d0:	1007883a 	mov	r3,r2
811342d4:	00a04574 	movhi	r2,33045
811342d8:	1080a904 	addi	r2,r2,676
811342dc:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
811342e0:	d0a09c17 	ldw	r2,-32144(gp)
811342e4:	10800a17 	ldw	r2,40(r2)
811342e8:	10800604 	addi	r2,r2,24
811342ec:	1080002b 	ldhuio	r2,0(r2)
811342f0:	10bfffcc 	andi	r2,r2,65535
811342f4:	1007883a 	mov	r3,r2
811342f8:	00a04574 	movhi	r2,33045
811342fc:	1080a904 	addi	r2,r2,676
81134300:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
81134304:	d0a09c17 	ldw	r2,-32144(gp)
81134308:	10800a17 	ldw	r2,40(r2)
8113430c:	10800684 	addi	r2,r2,26
81134310:	1080002b 	ldhuio	r2,0(r2)
81134314:	10bfffcc 	andi	r2,r2,65535
81134318:	1007883a 	mov	r3,r2
8113431c:	00a04574 	movhi	r2,33045
81134320:	1080a904 	addi	r2,r2,676
81134324:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
81134328:	d0a09c17 	ldw	r2,-32144(gp)
8113432c:	10800a17 	ldw	r2,40(r2)
81134330:	10800704 	addi	r2,r2,28
81134334:	10800037 	ldwio	r2,0(r2)
81134338:	1007883a 	mov	r3,r2
8113433c:	00a04574 	movhi	r2,33045
81134340:	1080a904 	addi	r2,r2,676
81134344:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
81134348:	d0a09c17 	ldw	r2,-32144(gp)
8113434c:	10800a17 	ldw	r2,40(r2)
81134350:	10800804 	addi	r2,r2,32
81134354:	10800037 	ldwio	r2,0(r2)
81134358:	1007883a 	mov	r3,r2
8113435c:	00a04574 	movhi	r2,33045
81134360:	1080a904 	addi	r2,r2,676
81134364:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
81134368:	d0a09c17 	ldw	r2,-32144(gp)
8113436c:	10800a17 	ldw	r2,40(r2)
81134370:	10800904 	addi	r2,r2,36
81134374:	10800023 	ldbuio	r2,0(r2)
81134378:	10803fcc 	andi	r2,r2,255
8113437c:	1007883a 	mov	r3,r2
81134380:	00a04574 	movhi	r2,33045
81134384:	1080a904 	addi	r2,r2,676
81134388:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
8113438c:	d0a09c17 	ldw	r2,-32144(gp)
81134390:	10800a17 	ldw	r2,40(r2)
81134394:	10800944 	addi	r2,r2,37
81134398:	10800023 	ldbuio	r2,0(r2)
8113439c:	10803fcc 	andi	r2,r2,255
811343a0:	1007883a 	mov	r3,r2
811343a4:	00a04574 	movhi	r2,33045
811343a8:	1080a904 	addi	r2,r2,676
811343ac:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
811343b0:	d0a09c17 	ldw	r2,-32144(gp)
811343b4:	10800a17 	ldw	r2,40(r2)
811343b8:	10800984 	addi	r2,r2,38
811343bc:	10800023 	ldbuio	r2,0(r2)
811343c0:	10803fcc 	andi	r2,r2,255
811343c4:	1007883a 	mov	r3,r2
811343c8:	00a04574 	movhi	r2,33045
811343cc:	1080a904 	addi	r2,r2,676
811343d0:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
811343d4:	00a04574 	movhi	r2,33045
811343d8:	1080a904 	addi	r2,r2,676
811343dc:	1080040b 	ldhu	r2,16(r2)
811343e0:	10ffffcc 	andi	r3,r2,65535
811343e4:	00a04574 	movhi	r2,33045
811343e8:	1080a904 	addi	r2,r2,676
811343ec:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
811343f0:	00a04574 	movhi	r2,33045
811343f4:	1080a904 	addi	r2,r2,676
811343f8:	10c01117 	ldw	r3,68(r2)
811343fc:	00a04574 	movhi	r2,33045
81134400:	1080a904 	addi	r2,r2,676
81134404:	1080068b 	ldhu	r2,26(r2)
81134408:	10bfffcc 	andi	r2,r2,65535
8113440c:	1887883a 	add	r3,r3,r2
81134410:	00a04574 	movhi	r2,33045
81134414:	1080a904 	addi	r2,r2,676
81134418:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
8113441c:	00a04574 	movhi	r2,33045
81134420:	1080a904 	addi	r2,r2,676
81134424:	10c01217 	ldw	r3,72(r2)
81134428:	00a04574 	movhi	r2,33045
8113442c:	1080a904 	addi	r2,r2,676
81134430:	1080068b 	ldhu	r2,26(r2)
81134434:	10bfffcc 	andi	r2,r2,65535
81134438:	1887883a 	add	r3,r3,r2
8113443c:	00a04574 	movhi	r2,33045
81134440:	1080a904 	addi	r2,r2,676
81134444:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
81134448:	00a04574 	movhi	r2,33045
8113444c:	1080a904 	addi	r2,r2,676
81134450:	10c01317 	ldw	r3,76(r2)
81134454:	00a04574 	movhi	r2,33045
81134458:	1080a904 	addi	r2,r2,676
8113445c:	1080050b 	ldhu	r2,20(r2)
81134460:	10bfffcc 	andi	r2,r2,65535
81134464:	1008917a 	slli	r4,r2,5
81134468:	00a04574 	movhi	r2,33045
8113446c:	1080a904 	addi	r2,r2,676
81134470:	1080030b 	ldhu	r2,12(r2)
81134474:	10bfffcc 	andi	r2,r2,65535
81134478:	2085283a 	div	r2,r4,r2
8113447c:	1887883a 	add	r3,r3,r2
81134480:	00a04574 	movhi	r2,33045
81134484:	1080a904 	addi	r2,r2,676
81134488:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
8113448c:	00a04574 	movhi	r2,33045
81134490:	1080a904 	addi	r2,r2,676
81134494:	1080058b 	ldhu	r2,22(r2)
81134498:	10bfffcc 	andi	r2,r2,65535
8113449c:	10000b26 	beq	r2,zero,811344cc <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
811344a0:	00a04574 	movhi	r2,33045
811344a4:	1080a904 	addi	r2,r2,676
811344a8:	1080058b 	ldhu	r2,22(r2)
811344ac:	10ffffcc 	andi	r3,r2,65535
811344b0:	00a04574 	movhi	r2,33045
811344b4:	1080a904 	addi	r2,r2,676
811344b8:	10800383 	ldbu	r2,14(r2)
811344bc:	10803fcc 	andi	r2,r2,255
811344c0:	1885283a 	div	r2,r3,r2
811344c4:	e0bffd15 	stw	r2,-12(fp)
811344c8:	00000906 	br	811344f0 <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
811344cc:	00a04574 	movhi	r2,33045
811344d0:	1080a904 	addi	r2,r2,676
811344d4:	10c00917 	ldw	r3,36(r2)
811344d8:	00a04574 	movhi	r2,33045
811344dc:	1080a904 	addi	r2,r2,676
811344e0:	10800383 	ldbu	r2,14(r2)
811344e4:	10803fcc 	andi	r2,r2,255
811344e8:	1885203a 	divu	r2,r3,r2
811344ec:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
811344f0:	e0bffd17 	ldw	r2,-12(fp)
811344f4:	1083fdc8 	cmpgei	r2,r2,4087
811344f8:	1000051e 	bne	r2,zero,81134510 <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
811344fc:	00a04574 	movhi	r2,33045
81134500:	1080a904 	addi	r2,r2,676
81134504:	00c00304 	movi	r3,12
81134508:	10c01085 	stb	r3,66(r2)
8113450c:	00000c06 	br	81134540 <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
81134510:	e0bffd17 	ldw	r2,-12(fp)
81134514:	00fffb54 	movui	r3,65517
81134518:	18800516 	blt	r3,r2,81134530 <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
8113451c:	00a04574 	movhi	r2,33045
81134520:	1080a904 	addi	r2,r2,676
81134524:	00c00404 	movi	r3,16
81134528:	10c01085 	stb	r3,66(r2)
8113452c:	00000406 	br	81134540 <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
81134530:	00a04574 	movhi	r2,33045
81134534:	1080a904 	addi	r2,r2,676
81134538:	00c00804 	movi	r3,32
8113453c:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
81134540:	e03ffc15 	stw	zero,-16(fp)
81134544:	00001106 	br	8113458c <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
81134548:	d0a09c17 	ldw	r2,-32144(gp)
8113454c:	10c00a17 	ldw	r3,40(r2)
81134550:	e0bffc17 	ldw	r2,-16(fp)
81134554:	1885883a 	add	r2,r3,r2
81134558:	108009c4 	addi	r2,r2,39
8113455c:	10800023 	ldbuio	r2,0(r2)
81134560:	10803fcc 	andi	r2,r2,255
81134564:	1009883a 	mov	r4,r2
81134568:	00a04574 	movhi	r2,33045
8113456c:	1080a904 	addi	r2,r2,676
81134570:	e0fffc17 	ldw	r3,-16(fp)
81134574:	10c5883a 	add	r2,r2,r3
81134578:	10800ac4 	addi	r2,r2,43
8113457c:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
81134580:	e0bffc17 	ldw	r2,-16(fp)
81134584:	10800044 	addi	r2,r2,1
81134588:	e0bffc15 	stw	r2,-16(fp)
8113458c:	e0bffc17 	ldw	r2,-16(fp)
81134590:	10800110 	cmplti	r2,r2,4
81134594:	103fec1e 	bne	r2,zero,81134548 <__reset+0xfb114548>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
81134598:	e03ffc15 	stw	zero,-16(fp)
8113459c:	00001106 	br	811345e4 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
811345a0:	d0a09c17 	ldw	r2,-32144(gp)
811345a4:	10c00a17 	ldw	r3,40(r2)
811345a8:	e0bffc17 	ldw	r2,-16(fp)
811345ac:	1885883a 	add	r2,r3,r2
811345b0:	10800ac4 	addi	r2,r2,43
811345b4:	10800023 	ldbuio	r2,0(r2)
811345b8:	10803fcc 	andi	r2,r2,255
811345bc:	1009883a 	mov	r4,r2
811345c0:	00a04574 	movhi	r2,33045
811345c4:	1080a904 	addi	r2,r2,676
811345c8:	e0fffc17 	ldw	r3,-16(fp)
811345cc:	10c5883a 	add	r2,r2,r3
811345d0:	10800bc4 	addi	r2,r2,47
811345d4:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
811345d8:	e0bffc17 	ldw	r2,-16(fp)
811345dc:	10800044 	addi	r2,r2,1
811345e0:	e0bffc15 	stw	r2,-16(fp)
811345e4:	e0bffc17 	ldw	r2,-16(fp)
811345e8:	108002d0 	cmplti	r2,r2,11
811345ec:	103fec1e 	bne	r2,zero,811345a0 <__reset+0xfb1145a0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
811345f0:	e03ffc15 	stw	zero,-16(fp)
811345f4:	00001106 	br	8113463c <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
811345f8:	d0a09c17 	ldw	r2,-32144(gp)
811345fc:	10c00a17 	ldw	r3,40(r2)
81134600:	e0bffc17 	ldw	r2,-16(fp)
81134604:	1885883a 	add	r2,r3,r2
81134608:	10800d84 	addi	r2,r2,54
8113460c:	10800023 	ldbuio	r2,0(r2)
81134610:	10803fcc 	andi	r2,r2,255
81134614:	1009883a 	mov	r4,r2
81134618:	00a04574 	movhi	r2,33045
8113461c:	1080a904 	addi	r2,r2,676
81134620:	e0fffc17 	ldw	r3,-16(fp)
81134624:	10c5883a 	add	r2,r2,r3
81134628:	10800e84 	addi	r2,r2,58
8113462c:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
81134630:	e0bffc17 	ldw	r2,-16(fp)
81134634:	10800044 	addi	r2,r2,1
81134638:	e0bffc15 	stw	r2,-16(fp)
8113463c:	e0bffc17 	ldw	r2,-16(fp)
81134640:	10800210 	cmplti	r2,r2,8
81134644:	103fec1e 	bne	r2,zero,811345f8 <__reset+0xfb1145f8>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81134648:	e03ffc15 	stw	zero,-16(fp)
8113464c:	00000a06 	br	81134678 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
81134650:	00a04574 	movhi	r2,33045
81134654:	1080be04 	addi	r2,r2,760
81134658:	e0fffc17 	ldw	r3,-16(fp)
8113465c:	180691ba 	slli	r3,r3,6
81134660:	10c5883a 	add	r2,r2,r3
81134664:	10800f04 	addi	r2,r2,60
81134668:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8113466c:	e0bffc17 	ldw	r2,-16(fp)
81134670:	10800044 	addi	r2,r2,1
81134674:	e0bffc15 	stw	r2,-16(fp)
81134678:	e0bffc17 	ldw	r2,-16(fp)
8113467c:	10800510 	cmplti	r2,r2,20
81134680:	103ff31e 	bne	r2,zero,81134650 <__reset+0xfb114650>
		{
			active_files[counter].in_use = false;
		}
		result = true;
81134684:	00800044 	movi	r2,1
81134688:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
8113468c:	00000106 	br	81134694 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
81134690:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
81134694:	e0bffb17 	ldw	r2,-20(fp)
}
81134698:	e037883a 	mov	sp,fp
8113469c:	dfc00117 	ldw	ra,4(sp)
811346a0:	df000017 	ldw	fp,0(sp)
811346a4:	dec00204 	addi	sp,sp,8
811346a8:	f800283a 	ret

811346ac <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
811346ac:	defffc04 	addi	sp,sp,-16
811346b0:	de00012e 	bgeu	sp,et,811346b8 <Look_for_FAT16+0xc>
811346b4:	003b68fa 	trap	3
811346b8:	dfc00315 	stw	ra,12(sp)
811346bc:	df000215 	stw	fp,8(sp)
811346c0:	df000204 	addi	fp,sp,8
	bool result = false;
811346c4:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
811346c8:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
811346cc:	10002e26 	beq	r2,zero,81134788 <Look_for_FAT16+0xdc>
	{
		short int csd_file_format = *CSD_register_w0;
811346d0:	d0a09617 	ldw	r2,-32168(gp)
811346d4:	1080000b 	ldhu	r2,0(r2)
811346d8:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
811346dc:	d0209a15 	stw	zero,-32152(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
811346e0:	d0209b15 	stw	zero,-32148(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
811346e4:	e0bfff0f 	ldh	r2,-4(fp)
811346e8:	10002716 	blt	r2,zero,81134788 <Look_for_FAT16+0xdc>
811346ec:	e0bfff0b 	ldhu	r2,-4(fp)
811346f0:	10bfffcc 	andi	r2,r2,65535
811346f4:	1083000c 	andi	r2,r2,3072
811346f8:	10830020 	cmpeqi	r2,r2,3072
811346fc:	1000221e 	bne	r2,zero,81134788 <Look_for_FAT16+0xdc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
81134700:	e0bfff0b 	ldhu	r2,-4(fp)
81134704:	10bfffcc 	andi	r2,r2,65535
81134708:	1083000c 	andi	r2,r2,3072
8113470c:	10810018 	cmpnei	r2,r2,1024
81134710:	1000031e 	bne	r2,zero,81134720 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
81134714:	0009883a 	mov	r4,zero
81134718:	11340240 	call	81134024 <Check_for_DOS_FAT>
8113471c:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
81134720:	e0bfff0b 	ldhu	r2,-4(fp)
81134724:	10bfffcc 	andi	r2,r2,65535
81134728:	1083000c 	andi	r2,r2,3072
8113472c:	1000061e 	bne	r2,zero,81134748 <Look_for_FAT16+0x9c>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
81134730:	11339600 	call	81133960 <Check_for_Master_Boot_Record>
81134734:	10000426 	beq	r2,zero,81134748 <Look_for_FAT16+0x9c>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
81134738:	d0a09a17 	ldw	r2,-32152(gp)
8113473c:	1009883a 	mov	r4,r2
81134740:	11340240 	call	81134024 <Check_for_DOS_FAT>
81134744:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
81134748:	e0bffe17 	ldw	r2,-8(fp)
8113474c:	10800058 	cmpnei	r2,r2,1
81134750:	10000d1e 	bne	r2,zero,81134788 <Look_for_FAT16+0xdc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
81134754:	00a04574 	movhi	r2,33045
81134758:	1080a904 	addi	r2,r2,676
8113475c:	10801083 	ldbu	r2,66(r2)
81134760:	10803fcc 	andi	r2,r2,255
81134764:	10800420 	cmpeqi	r2,r2,16
81134768:	1000021e 	bne	r2,zero,81134774 <Look_for_FAT16+0xc8>
				{
					result = false;
8113476c:	e03ffe15 	stw	zero,-8(fp)
81134770:	00000506 	br	81134788 <Look_for_FAT16+0xdc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
81134774:	00a04574 	movhi	r2,33045
81134778:	1080a904 	addi	r2,r2,676
8113477c:	1080058b 	ldhu	r2,22(r2)
81134780:	10bfffcc 	andi	r2,r2,65535
81134784:	d0a09b15 	stw	r2,-32148(gp)
				}
			}
		}
	}
	return result;
81134788:	e0bffe17 	ldw	r2,-8(fp)
}
8113478c:	e037883a 	mov	sp,fp
81134790:	dfc00117 	ldw	ra,4(sp)
81134794:	df000017 	ldw	fp,0(sp)
81134798:	dec00204 	addi	sp,sp,8
8113479c:	f800283a 	ret

811347a0 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
811347a0:	defffb04 	addi	sp,sp,-20
811347a4:	de00012e 	bgeu	sp,et,811347ac <filename_to_upper_case+0xc>
811347a8:	003b68fa 	trap	3
811347ac:	dfc00415 	stw	ra,16(sp)
811347b0:	df000315 	stw	fp,12(sp)
811347b4:	df000304 	addi	fp,sp,12
811347b8:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
811347bc:	e13fff17 	ldw	r4,-4(fp)
811347c0:	11139780 	call	81113978 <strlen>
811347c4:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
811347c8:	e03ffd15 	stw	zero,-12(fp)
811347cc:	00001e06 	br	81134848 <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
811347d0:	e0bffd17 	ldw	r2,-12(fp)
811347d4:	e0ffff17 	ldw	r3,-4(fp)
811347d8:	1885883a 	add	r2,r3,r2
811347dc:	10800003 	ldbu	r2,0(r2)
811347e0:	10803fcc 	andi	r2,r2,255
811347e4:	1080201c 	xori	r2,r2,128
811347e8:	10bfe004 	addi	r2,r2,-128
811347ec:	10801850 	cmplti	r2,r2,97
811347f0:	1000121e 	bne	r2,zero,8113483c <filename_to_upper_case+0x9c>
811347f4:	e0bffd17 	ldw	r2,-12(fp)
811347f8:	e0ffff17 	ldw	r3,-4(fp)
811347fc:	1885883a 	add	r2,r3,r2
81134800:	10800003 	ldbu	r2,0(r2)
81134804:	10803fcc 	andi	r2,r2,255
81134808:	1080201c 	xori	r2,r2,128
8113480c:	10bfe004 	addi	r2,r2,-128
81134810:	10801ec8 	cmpgei	r2,r2,123
81134814:	1000091e 	bne	r2,zero,8113483c <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
81134818:	e0bffd17 	ldw	r2,-12(fp)
8113481c:	e0ffff17 	ldw	r3,-4(fp)
81134820:	1885883a 	add	r2,r3,r2
81134824:	e0fffd17 	ldw	r3,-12(fp)
81134828:	e13fff17 	ldw	r4,-4(fp)
8113482c:	20c7883a 	add	r3,r4,r3
81134830:	18c00003 	ldbu	r3,0(r3)
81134834:	18fff804 	addi	r3,r3,-32
81134838:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
8113483c:	e0bffd17 	ldw	r2,-12(fp)
81134840:	10800044 	addi	r2,r2,1
81134844:	e0bffd15 	stw	r2,-12(fp)
81134848:	e0fffd17 	ldw	r3,-12(fp)
8113484c:	e0bffe17 	ldw	r2,-8(fp)
81134850:	18bfdf16 	blt	r3,r2,811347d0 <__reset+0xfb1147d0>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
81134854:	0001883a 	nop
81134858:	e037883a 	mov	sp,fp
8113485c:	dfc00117 	ldw	ra,4(sp)
81134860:	df000017 	ldw	fp,0(sp)
81134864:	dec00204 	addi	sp,sp,8
81134868:	f800283a 	ret

8113486c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
8113486c:	defff804 	addi	sp,sp,-32
81134870:	de00012e 	bgeu	sp,et,81134878 <check_file_name_for_FAT16_compliance+0xc>
81134874:	003b68fa 	trap	3
81134878:	dfc00715 	stw	ra,28(sp)
8113487c:	df000615 	stw	fp,24(sp)
81134880:	df000604 	addi	fp,sp,24
81134884:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
81134888:	e13fff17 	ldw	r4,-4(fp)
8113488c:	11139780 	call	81113978 <strlen>
81134890:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
81134894:	00bfffc4 	movi	r2,-1
81134898:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
8113489c:	00bfffc4 	movi	r2,-1
811348a0:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
811348a4:	00800044 	movi	r2,1
811348a8:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
811348ac:	e03ffa15 	stw	zero,-24(fp)
811348b0:	00006d06 	br	81134a68 <check_file_name_for_FAT16_compliance+0x1fc>
    {
        if ((file_name[index] == ' ') ||
811348b4:	e0bffa17 	ldw	r2,-24(fp)
811348b8:	e0ffff17 	ldw	r3,-4(fp)
811348bc:	1885883a 	add	r2,r3,r2
811348c0:	10800003 	ldbu	r2,0(r2)
811348c4:	10803fcc 	andi	r2,r2,255
811348c8:	1080201c 	xori	r2,r2,128
811348cc:	10bfe004 	addi	r2,r2,-128
811348d0:	10800820 	cmpeqi	r2,r2,32
811348d4:	10003e1e 	bne	r2,zero,811349d0 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811348d8:	e0bffa17 	ldw	r2,-24(fp)
811348dc:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
811348e0:	e0bffb17 	ldw	r2,-20(fp)
811348e4:	1880121e 	bne	r3,r2,81134930 <check_file_name_for_FAT16_compliance+0xc4>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
811348e8:	e0bffa17 	ldw	r2,-24(fp)
811348ec:	e0ffff17 	ldw	r3,-4(fp)
811348f0:	1885883a 	add	r2,r3,r2
811348f4:	10800003 	ldbu	r2,0(r2)
811348f8:	10803fcc 	andi	r2,r2,255
811348fc:	1080201c 	xori	r2,r2,128
81134900:	10bfe004 	addi	r2,r2,-128
81134904:	10801720 	cmpeqi	r2,r2,92
81134908:	1000311e 	bne	r2,zero,811349d0 <check_file_name_for_FAT16_compliance+0x164>
8113490c:	e0bffa17 	ldw	r2,-24(fp)
81134910:	e0ffff17 	ldw	r3,-4(fp)
81134914:	1885883a 	add	r2,r3,r2
81134918:	10800003 	ldbu	r2,0(r2)
8113491c:	10803fcc 	andi	r2,r2,255
81134920:	1080201c 	xori	r2,r2,128
81134924:	10bfe004 	addi	r2,r2,-128
81134928:	10800be0 	cmpeqi	r2,r2,47
8113492c:	1000281e 	bne	r2,zero,811349d0 <check_file_name_for_FAT16_compliance+0x164>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81134930:	e0fffa17 	ldw	r3,-24(fp)
81134934:	e0bffc17 	ldw	r2,-16(fp)
81134938:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
8113493c:	10800258 	cmpnei	r2,r2,9
81134940:	1000091e 	bne	r2,zero,81134968 <check_file_name_for_FAT16_compliance+0xfc>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81134944:	e0bffa17 	ldw	r2,-24(fp)
81134948:	e0ffff17 	ldw	r3,-4(fp)
8113494c:	1885883a 	add	r2,r3,r2
81134950:	10800003 	ldbu	r2,0(r2)
81134954:	10803fcc 	andi	r2,r2,255
81134958:	1080201c 	xori	r2,r2,128
8113495c:	10bfe004 	addi	r2,r2,-128
81134960:	10800b98 	cmpnei	r2,r2,46
81134964:	10001a1e 	bne	r2,zero,811349d0 <check_file_name_for_FAT16_compliance+0x164>
81134968:	e0fffb17 	ldw	r3,-20(fp)
8113496c:	e0bffc17 	ldw	r2,-16(fp)
81134970:	18801926 	beq	r3,r2,811349d8 <check_file_name_for_FAT16_compliance+0x16c>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81134974:	e0fffa17 	ldw	r3,-24(fp)
81134978:	e0bffc17 	ldw	r2,-16(fp)
8113497c:	1885c83a 	sub	r2,r3,r2
81134980:	10800110 	cmplti	r2,r2,4
81134984:	1000141e 	bne	r2,zero,811349d8 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81134988:	e0bffa17 	ldw	r2,-24(fp)
8113498c:	e0ffff17 	ldw	r3,-4(fp)
81134990:	1885883a 	add	r2,r3,r2
81134994:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81134998:	10803fcc 	andi	r2,r2,255
8113499c:	1080201c 	xori	r2,r2,128
811349a0:	10bfe004 	addi	r2,r2,-128
811349a4:	10801720 	cmpeqi	r2,r2,92
811349a8:	10000b1e 	bne	r2,zero,811349d8 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
811349ac:	e0bffa17 	ldw	r2,-24(fp)
811349b0:	e0ffff17 	ldw	r3,-4(fp)
811349b4:	1885883a 	add	r2,r3,r2
811349b8:	10800003 	ldbu	r2,0(r2)
811349bc:	10803fcc 	andi	r2,r2,255
811349c0:	1080201c 	xori	r2,r2,128
811349c4:	10bfe004 	addi	r2,r2,-128
811349c8:	10800be0 	cmpeqi	r2,r2,47
811349cc:	1000021e 	bne	r2,zero,811349d8 <check_file_name_for_FAT16_compliance+0x16c>
           )
        {
            result = false;
811349d0:	e03ffd15 	stw	zero,-12(fp)
            break;
811349d4:	00002706 	br	81134a74 <check_file_name_for_FAT16_compliance+0x208>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
811349d8:	e0bffa17 	ldw	r2,-24(fp)
811349dc:	e0ffff17 	ldw	r3,-4(fp)
811349e0:	1885883a 	add	r2,r3,r2
811349e4:	10800003 	ldbu	r2,0(r2)
811349e8:	10803fcc 	andi	r2,r2,255
811349ec:	1080201c 	xori	r2,r2,128
811349f0:	10bfe004 	addi	r2,r2,-128
811349f4:	10801720 	cmpeqi	r2,r2,92
811349f8:	1000091e 	bne	r2,zero,81134a20 <check_file_name_for_FAT16_compliance+0x1b4>
811349fc:	e0bffa17 	ldw	r2,-24(fp)
81134a00:	e0ffff17 	ldw	r3,-4(fp)
81134a04:	1885883a 	add	r2,r3,r2
81134a08:	10800003 	ldbu	r2,0(r2)
81134a0c:	10803fcc 	andi	r2,r2,255
81134a10:	1080201c 	xori	r2,r2,128
81134a14:	10bfe004 	addi	r2,r2,-128
81134a18:	10800bd8 	cmpnei	r2,r2,47
81134a1c:	1000041e 	bne	r2,zero,81134a30 <check_file_name_for_FAT16_compliance+0x1c4>
        {
            last_period = index;
81134a20:	e0bffa17 	ldw	r2,-24(fp)
81134a24:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
81134a28:	e0bffa17 	ldw	r2,-24(fp)
81134a2c:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
81134a30:	e0bffa17 	ldw	r2,-24(fp)
81134a34:	e0ffff17 	ldw	r3,-4(fp)
81134a38:	1885883a 	add	r2,r3,r2
81134a3c:	10800003 	ldbu	r2,0(r2)
81134a40:	10803fcc 	andi	r2,r2,255
81134a44:	1080201c 	xori	r2,r2,128
81134a48:	10bfe004 	addi	r2,r2,-128
81134a4c:	10800b98 	cmpnei	r2,r2,46
81134a50:	1000021e 	bne	r2,zero,81134a5c <check_file_name_for_FAT16_compliance+0x1f0>
        {
            last_period = index;
81134a54:	e0bffa17 	ldw	r2,-24(fp)
81134a58:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
81134a5c:	e0bffa17 	ldw	r2,-24(fp)
81134a60:	10800044 	addi	r2,r2,1
81134a64:	e0bffa15 	stw	r2,-24(fp)
81134a68:	e0fffa17 	ldw	r3,-24(fp)
81134a6c:	e0bffe17 	ldw	r2,-8(fp)
81134a70:	18bf9016 	blt	r3,r2,811348b4 <__reset+0xfb1148b4>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
81134a74:	e0bffe17 	ldw	r2,-8(fp)
81134a78:	10bfffc4 	addi	r2,r2,-1
81134a7c:	e0ffff17 	ldw	r3,-4(fp)
81134a80:	1885883a 	add	r2,r3,r2
81134a84:	10800003 	ldbu	r2,0(r2)
81134a88:	10803fcc 	andi	r2,r2,255
81134a8c:	1080201c 	xori	r2,r2,128
81134a90:	10bfe004 	addi	r2,r2,-128
81134a94:	10801720 	cmpeqi	r2,r2,92
81134a98:	10000a1e 	bne	r2,zero,81134ac4 <check_file_name_for_FAT16_compliance+0x258>
81134a9c:	e0bffe17 	ldw	r2,-8(fp)
81134aa0:	10bfffc4 	addi	r2,r2,-1
81134aa4:	e0ffff17 	ldw	r3,-4(fp)
81134aa8:	1885883a 	add	r2,r3,r2
81134aac:	10800003 	ldbu	r2,0(r2)
81134ab0:	10803fcc 	andi	r2,r2,255
81134ab4:	1080201c 	xori	r2,r2,128
81134ab8:	10bfe004 	addi	r2,r2,-128
81134abc:	10800bd8 	cmpnei	r2,r2,47
81134ac0:	1000011e 	bne	r2,zero,81134ac8 <check_file_name_for_FAT16_compliance+0x25c>
    {
        result = false;
81134ac4:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
81134ac8:	e0bffd17 	ldw	r2,-12(fp)
}
81134acc:	e037883a 	mov	sp,fp
81134ad0:	dfc00117 	ldw	ra,4(sp)
81134ad4:	df000017 	ldw	fp,0(sp)
81134ad8:	dec00204 	addi	sp,sp,8
81134adc:	f800283a 	ret

81134ae0 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
81134ae0:	defffb04 	addi	sp,sp,-20
81134ae4:	de00012e 	bgeu	sp,et,81134aec <get_dir_divider_location+0xc>
81134ae8:	003b68fa 	trap	3
81134aec:	dfc00415 	stw	ra,16(sp)
81134af0:	df000315 	stw	fp,12(sp)
81134af4:	df000304 	addi	fp,sp,12
81134af8:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
81134afc:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
81134b00:	e13fff17 	ldw	r4,-4(fp)
81134b04:	11139780 	call	81113978 <strlen>
81134b08:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
81134b0c:	e03ffd15 	stw	zero,-12(fp)
81134b10:	00001506 	br	81134b68 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
81134b14:	e0bffd17 	ldw	r2,-12(fp)
81134b18:	e0ffff17 	ldw	r3,-4(fp)
81134b1c:	1885883a 	add	r2,r3,r2
81134b20:	10800003 	ldbu	r2,0(r2)
81134b24:	10803fcc 	andi	r2,r2,255
81134b28:	1080201c 	xori	r2,r2,128
81134b2c:	10bfe004 	addi	r2,r2,-128
81134b30:	10801720 	cmpeqi	r2,r2,92
81134b34:	10000f1e 	bne	r2,zero,81134b74 <get_dir_divider_location+0x94>
81134b38:	e0bffd17 	ldw	r2,-12(fp)
81134b3c:	e0ffff17 	ldw	r3,-4(fp)
81134b40:	1885883a 	add	r2,r3,r2
81134b44:	10800003 	ldbu	r2,0(r2)
81134b48:	10803fcc 	andi	r2,r2,255
81134b4c:	1080201c 	xori	r2,r2,128
81134b50:	10bfe004 	addi	r2,r2,-128
81134b54:	10800be0 	cmpeqi	r2,r2,47
81134b58:	1000061e 	bne	r2,zero,81134b74 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
81134b5c:	e0bffd17 	ldw	r2,-12(fp)
81134b60:	10800044 	addi	r2,r2,1
81134b64:	e0bffd15 	stw	r2,-12(fp)
81134b68:	e0fffd17 	ldw	r3,-12(fp)
81134b6c:	e0bffe17 	ldw	r2,-8(fp)
81134b70:	18bfe816 	blt	r3,r2,81134b14 <__reset+0xfb114b14>
        {
            break;
        }
    }
    
    if (index == length)
81134b74:	e0fffd17 	ldw	r3,-12(fp)
81134b78:	e0bffe17 	ldw	r2,-8(fp)
81134b7c:	1880021e 	bne	r3,r2,81134b88 <get_dir_divider_location+0xa8>
    {
        index = -1;
81134b80:	00bfffc4 	movi	r2,-1
81134b84:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
81134b88:	e0bffd17 	ldw	r2,-12(fp)
}
81134b8c:	e037883a 	mov	sp,fp
81134b90:	dfc00117 	ldw	ra,4(sp)
81134b94:	df000017 	ldw	fp,0(sp)
81134b98:	dec00204 	addi	sp,sp,8
81134b9c:	f800283a 	ret

81134ba0 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
81134ba0:	defffa04 	addi	sp,sp,-24
81134ba4:	de00012e 	bgeu	sp,et,81134bac <match_file_record_to_name_ext+0xc>
81134ba8:	003b68fa 	trap	3
81134bac:	df000515 	stw	fp,20(sp)
81134bb0:	df000504 	addi	fp,sp,20
81134bb4:	e13ffd15 	stw	r4,-12(fp)
81134bb8:	e17ffe15 	stw	r5,-8(fp)
81134bbc:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
81134bc0:	00800044 	movi	r2,1
81134bc4:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
81134bc8:	e03ffc15 	stw	zero,-16(fp)
81134bcc:	00004606 	br	81134ce8 <match_file_record_to_name_ext+0x148>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
81134bd0:	e0fffd17 	ldw	r3,-12(fp)
81134bd4:	e0bffc17 	ldw	r2,-16(fp)
81134bd8:	1885883a 	add	r2,r3,r2
81134bdc:	10800003 	ldbu	r2,0(r2)
81134be0:	10803fcc 	andi	r2,r2,255
81134be4:	10801870 	cmpltui	r2,r2,97
81134be8:	1000101e 	bne	r2,zero,81134c2c <match_file_record_to_name_ext+0x8c>
81134bec:	e0fffd17 	ldw	r3,-12(fp)
81134bf0:	e0bffc17 	ldw	r2,-16(fp)
81134bf4:	1885883a 	add	r2,r3,r2
81134bf8:	10800003 	ldbu	r2,0(r2)
81134bfc:	10803fcc 	andi	r2,r2,255
81134c00:	10801ee8 	cmpgeui	r2,r2,123
81134c04:	1000091e 	bne	r2,zero,81134c2c <match_file_record_to_name_ext+0x8c>
81134c08:	e0fffd17 	ldw	r3,-12(fp)
81134c0c:	e0bffc17 	ldw	r2,-16(fp)
81134c10:	1885883a 	add	r2,r3,r2
81134c14:	10800003 	ldbu	r2,0(r2)
81134c18:	10bff804 	addi	r2,r2,-32
81134c1c:	10c03fcc 	andi	r3,r2,255
81134c20:	18c0201c 	xori	r3,r3,128
81134c24:	18ffe004 	addi	r3,r3,-128
81134c28:	00000706 	br	81134c48 <match_file_record_to_name_ext+0xa8>
81134c2c:	e0fffd17 	ldw	r3,-12(fp)
81134c30:	e0bffc17 	ldw	r2,-16(fp)
81134c34:	1885883a 	add	r2,r3,r2
81134c38:	10800003 	ldbu	r2,0(r2)
81134c3c:	10c03fcc 	andi	r3,r2,255
81134c40:	18c0201c 	xori	r3,r3,128
81134c44:	18ffe004 	addi	r3,r3,-128
81134c48:	e0bffc17 	ldw	r2,-16(fp)
81134c4c:	e13ffe17 	ldw	r4,-8(fp)
81134c50:	2085883a 	add	r2,r4,r2
81134c54:	10800003 	ldbu	r2,0(r2)
81134c58:	10803fcc 	andi	r2,r2,255
81134c5c:	1080201c 	xori	r2,r2,128
81134c60:	10bfe004 	addi	r2,r2,-128
81134c64:	10801850 	cmplti	r2,r2,97
81134c68:	1000121e 	bne	r2,zero,81134cb4 <match_file_record_to_name_ext+0x114>
81134c6c:	e0bffc17 	ldw	r2,-16(fp)
81134c70:	e13ffe17 	ldw	r4,-8(fp)
81134c74:	2085883a 	add	r2,r4,r2
81134c78:	10800003 	ldbu	r2,0(r2)
81134c7c:	10803fcc 	andi	r2,r2,255
81134c80:	1080201c 	xori	r2,r2,128
81134c84:	10bfe004 	addi	r2,r2,-128
81134c88:	10801ec8 	cmpgei	r2,r2,123
81134c8c:	1000091e 	bne	r2,zero,81134cb4 <match_file_record_to_name_ext+0x114>
81134c90:	e0bffc17 	ldw	r2,-16(fp)
81134c94:	e13ffe17 	ldw	r4,-8(fp)
81134c98:	2085883a 	add	r2,r4,r2
81134c9c:	10800003 	ldbu	r2,0(r2)
81134ca0:	10bff804 	addi	r2,r2,-32
81134ca4:	10803fcc 	andi	r2,r2,255
81134ca8:	1080201c 	xori	r2,r2,128
81134cac:	10bfe004 	addi	r2,r2,-128
81134cb0:	00000706 	br	81134cd0 <match_file_record_to_name_ext+0x130>
81134cb4:	e0bffc17 	ldw	r2,-16(fp)
81134cb8:	e13ffe17 	ldw	r4,-8(fp)
81134cbc:	2085883a 	add	r2,r4,r2
81134cc0:	10800003 	ldbu	r2,0(r2)
81134cc4:	10803fcc 	andi	r2,r2,255
81134cc8:	1080201c 	xori	r2,r2,128
81134ccc:	10bfe004 	addi	r2,r2,-128
81134cd0:	18800226 	beq	r3,r2,81134cdc <match_file_record_to_name_ext+0x13c>
        {
            match = false;
81134cd4:	e03ffb15 	stw	zero,-20(fp)
			break;
81134cd8:	00000606 	br	81134cf4 <match_file_record_to_name_ext+0x154>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
81134cdc:	e0bffc17 	ldw	r2,-16(fp)
81134ce0:	10800044 	addi	r2,r2,1
81134ce4:	e0bffc15 	stw	r2,-16(fp)
81134ce8:	e0bffc17 	ldw	r2,-16(fp)
81134cec:	10800210 	cmplti	r2,r2,8
81134cf0:	103fb71e 	bne	r2,zero,81134bd0 <__reset+0xfb114bd0>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81134cf4:	e03ffc15 	stw	zero,-16(fp)
81134cf8:	00004a06 	br	81134e24 <match_file_record_to_name_ext+0x284>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
81134cfc:	e0fffd17 	ldw	r3,-12(fp)
81134d00:	e0bffc17 	ldw	r2,-16(fp)
81134d04:	1885883a 	add	r2,r3,r2
81134d08:	10800204 	addi	r2,r2,8
81134d0c:	10800003 	ldbu	r2,0(r2)
81134d10:	10803fcc 	andi	r2,r2,255
81134d14:	10801870 	cmpltui	r2,r2,97
81134d18:	1000121e 	bne	r2,zero,81134d64 <match_file_record_to_name_ext+0x1c4>
81134d1c:	e0fffd17 	ldw	r3,-12(fp)
81134d20:	e0bffc17 	ldw	r2,-16(fp)
81134d24:	1885883a 	add	r2,r3,r2
81134d28:	10800204 	addi	r2,r2,8
81134d2c:	10800003 	ldbu	r2,0(r2)
81134d30:	10803fcc 	andi	r2,r2,255
81134d34:	10801ee8 	cmpgeui	r2,r2,123
81134d38:	10000a1e 	bne	r2,zero,81134d64 <match_file_record_to_name_ext+0x1c4>
81134d3c:	e0fffd17 	ldw	r3,-12(fp)
81134d40:	e0bffc17 	ldw	r2,-16(fp)
81134d44:	1885883a 	add	r2,r3,r2
81134d48:	10800204 	addi	r2,r2,8
81134d4c:	10800003 	ldbu	r2,0(r2)
81134d50:	10bff804 	addi	r2,r2,-32
81134d54:	10c03fcc 	andi	r3,r2,255
81134d58:	18c0201c 	xori	r3,r3,128
81134d5c:	18ffe004 	addi	r3,r3,-128
81134d60:	00000806 	br	81134d84 <match_file_record_to_name_ext+0x1e4>
81134d64:	e0fffd17 	ldw	r3,-12(fp)
81134d68:	e0bffc17 	ldw	r2,-16(fp)
81134d6c:	1885883a 	add	r2,r3,r2
81134d70:	10800204 	addi	r2,r2,8
81134d74:	10800003 	ldbu	r2,0(r2)
81134d78:	10c03fcc 	andi	r3,r2,255
81134d7c:	18c0201c 	xori	r3,r3,128
81134d80:	18ffe004 	addi	r3,r3,-128
81134d84:	e0bffc17 	ldw	r2,-16(fp)
81134d88:	e13fff17 	ldw	r4,-4(fp)
81134d8c:	2085883a 	add	r2,r4,r2
81134d90:	10800003 	ldbu	r2,0(r2)
81134d94:	10803fcc 	andi	r2,r2,255
81134d98:	1080201c 	xori	r2,r2,128
81134d9c:	10bfe004 	addi	r2,r2,-128
81134da0:	10801850 	cmplti	r2,r2,97
81134da4:	1000121e 	bne	r2,zero,81134df0 <match_file_record_to_name_ext+0x250>
81134da8:	e0bffc17 	ldw	r2,-16(fp)
81134dac:	e13fff17 	ldw	r4,-4(fp)
81134db0:	2085883a 	add	r2,r4,r2
81134db4:	10800003 	ldbu	r2,0(r2)
81134db8:	10803fcc 	andi	r2,r2,255
81134dbc:	1080201c 	xori	r2,r2,128
81134dc0:	10bfe004 	addi	r2,r2,-128
81134dc4:	10801ec8 	cmpgei	r2,r2,123
81134dc8:	1000091e 	bne	r2,zero,81134df0 <match_file_record_to_name_ext+0x250>
81134dcc:	e0bffc17 	ldw	r2,-16(fp)
81134dd0:	e13fff17 	ldw	r4,-4(fp)
81134dd4:	2085883a 	add	r2,r4,r2
81134dd8:	10800003 	ldbu	r2,0(r2)
81134ddc:	10bff804 	addi	r2,r2,-32
81134de0:	10803fcc 	andi	r2,r2,255
81134de4:	1080201c 	xori	r2,r2,128
81134de8:	10bfe004 	addi	r2,r2,-128
81134dec:	00000706 	br	81134e0c <match_file_record_to_name_ext+0x26c>
81134df0:	e0bffc17 	ldw	r2,-16(fp)
81134df4:	e13fff17 	ldw	r4,-4(fp)
81134df8:	2085883a 	add	r2,r4,r2
81134dfc:	10800003 	ldbu	r2,0(r2)
81134e00:	10803fcc 	andi	r2,r2,255
81134e04:	1080201c 	xori	r2,r2,128
81134e08:	10bfe004 	addi	r2,r2,-128
81134e0c:	18800226 	beq	r3,r2,81134e18 <match_file_record_to_name_ext+0x278>
        {
            match = false;
81134e10:	e03ffb15 	stw	zero,-20(fp)
			break;
81134e14:	00000606 	br	81134e30 <match_file_record_to_name_ext+0x290>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81134e18:	e0bffc17 	ldw	r2,-16(fp)
81134e1c:	10800044 	addi	r2,r2,1
81134e20:	e0bffc15 	stw	r2,-16(fp)
81134e24:	e0bffc17 	ldw	r2,-16(fp)
81134e28:	108000d0 	cmplti	r2,r2,3
81134e2c:	103fb31e 	bne	r2,zero,81134cfc <__reset+0xfb114cfc>
        {
            match = false;
			break;
        }
    }
	return match;
81134e30:	e0bffb17 	ldw	r2,-20(fp)
}
81134e34:	e037883a 	mov	sp,fp
81134e38:	df000017 	ldw	fp,0(sp)
81134e3c:	dec00104 	addi	sp,sp,4
81134e40:	f800283a 	ret

81134e44 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
81134e44:	deffe704 	addi	sp,sp,-100
81134e48:	de00012e 	bgeu	sp,et,81134e50 <get_home_directory_cluster_for_file+0xc>
81134e4c:	003b68fa 	trap	3
81134e50:	dfc01815 	stw	ra,96(sp)
81134e54:	df001715 	stw	fp,92(sp)
81134e58:	df001704 	addi	fp,sp,92
81134e5c:	e13ffd15 	stw	r4,-12(fp)
81134e60:	e17ffe15 	stw	r5,-8(fp)
81134e64:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
81134e68:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
81134e6c:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
81134e70:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
81134e74:	e13ffd17 	ldw	r4,-12(fp)
81134e78:	1134ae00 	call	81134ae0 <get_dir_divider_location>
81134e7c:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
81134e80:	00012f06 	br	81135340 <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
81134e84:	00800804 	movi	r2,32
81134e88:	e0bff905 	stb	r2,-28(fp)
81134e8c:	00800804 	movi	r2,32
81134e90:	e0bff945 	stb	r2,-27(fp)
81134e94:	00800804 	movi	r2,32
81134e98:	e0bff985 	stb	r2,-26(fp)
81134e9c:	00800804 	movi	r2,32
81134ea0:	e0bff9c5 	stb	r2,-25(fp)
81134ea4:	00800804 	movi	r2,32
81134ea8:	e0bffa05 	stb	r2,-24(fp)
81134eac:	00800804 	movi	r2,32
81134eb0:	e0bffa45 	stb	r2,-23(fp)
81134eb4:	00800804 	movi	r2,32
81134eb8:	e0bffa85 	stb	r2,-22(fp)
81134ebc:	00800804 	movi	r2,32
81134ec0:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
81134ec4:	00800804 	movi	r2,32
81134ec8:	e0bffb05 	stb	r2,-20(fp)
81134ecc:	00800804 	movi	r2,32
81134ed0:	e0bffb45 	stb	r2,-19(fp)
81134ed4:	00800804 	movi	r2,32
81134ed8:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
81134edc:	00bfffc4 	movi	r2,-1
81134ee0:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
81134ee4:	e0bfea17 	ldw	r2,-88(fp)
81134ee8:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81134eec:	e03fec15 	stw	zero,-80(fp)
81134ef0:	00002d06 	br	81134fa8 <get_home_directory_cluster_for_file+0x164>
        {
            if (file_name[index+start_location] == '.')
81134ef4:	e0ffec17 	ldw	r3,-80(fp)
81134ef8:	e0bfed17 	ldw	r2,-76(fp)
81134efc:	1885883a 	add	r2,r3,r2
81134f00:	1007883a 	mov	r3,r2
81134f04:	e0bffd17 	ldw	r2,-12(fp)
81134f08:	10c5883a 	add	r2,r2,r3
81134f0c:	10800003 	ldbu	r2,0(r2)
81134f10:	10803fcc 	andi	r2,r2,255
81134f14:	1080201c 	xori	r2,r2,128
81134f18:	10bfe004 	addi	r2,r2,-128
81134f1c:	10800b98 	cmpnei	r2,r2,46
81134f20:	1000031e 	bne	r2,zero,81134f30 <get_home_directory_cluster_for_file+0xec>
            {
                ext_index = index;
81134f24:	e0bfec17 	ldw	r2,-80(fp)
81134f28:	e0bfee15 	stw	r2,-72(fp)
81134f2c:	00001b06 	br	81134f9c <get_home_directory_cluster_for_file+0x158>
            }
            else if (ext_index < 0)
81134f30:	e0bfee17 	ldw	r2,-72(fp)
81134f34:	10000c0e 	bge	r2,zero,81134f68 <get_home_directory_cluster_for_file+0x124>
            {
                name[index] = file_name[index+start_location];
81134f38:	e0ffec17 	ldw	r3,-80(fp)
81134f3c:	e0bfed17 	ldw	r2,-76(fp)
81134f40:	1885883a 	add	r2,r3,r2
81134f44:	1007883a 	mov	r3,r2
81134f48:	e0bffd17 	ldw	r2,-12(fp)
81134f4c:	10c5883a 	add	r2,r2,r3
81134f50:	10c00003 	ldbu	r3,0(r2)
81134f54:	e13ff904 	addi	r4,fp,-28
81134f58:	e0bfec17 	ldw	r2,-80(fp)
81134f5c:	2085883a 	add	r2,r4,r2
81134f60:	10c00005 	stb	r3,0(r2)
81134f64:	00000d06 	br	81134f9c <get_home_directory_cluster_for_file+0x158>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
81134f68:	e0ffec17 	ldw	r3,-80(fp)
81134f6c:	e0bfee17 	ldw	r2,-72(fp)
81134f70:	1885c83a 	sub	r2,r3,r2
81134f74:	e13fec17 	ldw	r4,-80(fp)
81134f78:	e0ffed17 	ldw	r3,-76(fp)
81134f7c:	20c7883a 	add	r3,r4,r3
81134f80:	1809883a 	mov	r4,r3
81134f84:	e0fffd17 	ldw	r3,-12(fp)
81134f88:	1907883a 	add	r3,r3,r4
81134f8c:	18c00003 	ldbu	r3,0(r3)
81134f90:	e13ffb04 	addi	r4,fp,-20
81134f94:	2085883a 	add	r2,r4,r2
81134f98:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81134f9c:	e0bfec17 	ldw	r2,-80(fp)
81134fa0:	10800044 	addi	r2,r2,1
81134fa4:	e0bfec15 	stw	r2,-80(fp)
81134fa8:	e0ffec17 	ldw	r3,-80(fp)
81134fac:	e0bfeb17 	ldw	r2,-84(fp)
81134fb0:	18bfd016 	blt	r3,r2,81134ef4 <__reset+0xfb114ef4>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
81134fb4:	e0bfea17 	ldw	r2,-88(fp)
81134fb8:	10005c1e 	bne	r2,zero,8113512c <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81134fbc:	00a04574 	movhi	r2,33045
81134fc0:	1080a904 	addi	r2,r2,676
81134fc4:	1080050b 	ldhu	r2,20(r2)
81134fc8:	10bfffcc 	andi	r2,r2,65535
81134fcc:	1006917a 	slli	r3,r2,5
81134fd0:	00a04574 	movhi	r2,33045
81134fd4:	1080a904 	addi	r2,r2,676
81134fd8:	1080030b 	ldhu	r2,12(r2)
81134fdc:	10bfffcc 	andi	r2,r2,65535
81134fe0:	1885283a 	div	r2,r3,r2
81134fe4:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81134fe8:	e03ff015 	stw	zero,-64(fp)
81134fec:	00003b06 	br	811350dc <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
81134ff0:	00a04574 	movhi	r2,33045
81134ff4:	1080a904 	addi	r2,r2,676
81134ff8:	10c01317 	ldw	r3,76(r2)
81134ffc:	e0bff017 	ldw	r2,-64(fp)
81135000:	1885883a 	add	r2,r3,r2
81135004:	1007883a 	mov	r3,r2
81135008:	d0a09a17 	ldw	r2,-32152(gp)
8113500c:	100b883a 	mov	r5,r2
81135010:	1809883a 	mov	r4,r3
81135014:	11336dc0 	call	811336dc <Read_Sector_Data>
81135018:	10003426 	beq	r2,zero,811350ec <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8113501c:	e03ff115 	stw	zero,-60(fp)
81135020:	00002506 	br	811350b8 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81135024:	e0bff117 	ldw	r2,-60(fp)
81135028:	1004917a 	slli	r2,r2,5
8113502c:	e0fff017 	ldw	r3,-64(fp)
81135030:	180f883a 	mov	r7,r3
81135034:	000d883a 	mov	r6,zero
81135038:	e17fff17 	ldw	r5,-4(fp)
8113503c:	1009883a 	mov	r4,r2
81135040:	1133b0c0 	call	81133b0c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81135044:	e0bfff17 	ldw	r2,-4(fp)
81135048:	10800003 	ldbu	r2,0(r2)
8113504c:	10803fcc 	andi	r2,r2,255
81135050:	10803960 	cmpeqi	r2,r2,229
81135054:	1000151e 	bne	r2,zero,811350ac <get_home_directory_cluster_for_file+0x268>
81135058:	e0bfff17 	ldw	r2,-4(fp)
8113505c:	10800003 	ldbu	r2,0(r2)
81135060:	10803fcc 	andi	r2,r2,255
81135064:	10001126 	beq	r2,zero,811350ac <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81135068:	e0fffb04 	addi	r3,fp,-20
8113506c:	e0bff904 	addi	r2,fp,-28
81135070:	180d883a 	mov	r6,r3
81135074:	100b883a 	mov	r5,r2
81135078:	e13fff17 	ldw	r4,-4(fp)
8113507c:	1134ba00 	call	81134ba0 <match_file_record_to_name_ext>
81135080:	e0bff815 	stw	r2,-32(fp)
                            if (match)
81135084:	e0bff817 	ldw	r2,-32(fp)
81135088:	10000826 	beq	r2,zero,811350ac <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
8113508c:	e0bfff17 	ldw	r2,-4(fp)
81135090:	1080058b 	ldhu	r2,22(r2)
81135094:	10bfffcc 	andi	r2,r2,65535
81135098:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
8113509c:	e0bfff17 	ldw	r2,-4(fp)
811350a0:	00c00044 	movi	r3,1
811350a4:	10c00a15 	stw	r3,40(r2)
                                break;
811350a8:	00000606 	br	811350c4 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811350ac:	e0bff117 	ldw	r2,-60(fp)
811350b0:	10800044 	addi	r2,r2,1
811350b4:	e0bff115 	stw	r2,-60(fp)
811350b8:	e0bff117 	ldw	r2,-60(fp)
811350bc:	10800410 	cmplti	r2,r2,16
811350c0:	103fd81e 	bne	r2,zero,81135024 <__reset+0xfb115024>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
811350c4:	e0ffef17 	ldw	r3,-68(fp)
811350c8:	e0bfea17 	ldw	r2,-88(fp)
811350cc:	1880091e 	bne	r3,r2,811350f4 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
811350d0:	e0bff017 	ldw	r2,-64(fp)
811350d4:	10800044 	addi	r2,r2,1
811350d8:	e0bff015 	stw	r2,-64(fp)
811350dc:	e0fff017 	ldw	r3,-64(fp)
811350e0:	e0bff717 	ldw	r2,-36(fp)
811350e4:	18bfc216 	blt	r3,r2,81134ff0 <__reset+0xfb114ff0>
811350e8:	00000306 	br	811350f8 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
811350ec:	0001883a 	nop
811350f0:	00000106 	br	811350f8 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
811350f4:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
811350f8:	e0ffef17 	ldw	r3,-68(fp)
811350fc:	e0bfea17 	ldw	r2,-88(fp)
81135100:	18800826 	beq	r3,r2,81135124 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81135104:	e0bfef17 	ldw	r2,-68(fp)
81135108:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
8113510c:	e0ffed17 	ldw	r3,-76(fp)
81135110:	e0bfeb17 	ldw	r2,-84(fp)
81135114:	1885883a 	add	r2,r3,r2
81135118:	10800044 	addi	r2,r2,1
8113511c:	e0bfed15 	stw	r2,-76(fp)
81135120:	00007d06 	br	81135318 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81135124:	0005883a 	mov	r2,zero
81135128:	00009106 	br	81135370 <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
8113512c:	e0bfea17 	ldw	r2,-88(fp)
81135130:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81135134:	e0bff417 	ldw	r2,-48(fp)
81135138:	10ffff84 	addi	r3,r2,-2
8113513c:	00a04574 	movhi	r2,33045
81135140:	1080a904 	addi	r2,r2,676
81135144:	10800383 	ldbu	r2,14(r2)
81135148:	10803fcc 	andi	r2,r2,255
8113514c:	1885383a 	mul	r2,r3,r2
81135150:	1007883a 	mov	r3,r2
81135154:	00a04574 	movhi	r2,33045
81135158:	1080a904 	addi	r2,r2,676
8113515c:	10801417 	ldw	r2,80(r2)
81135160:	1885883a 	add	r2,r3,r2
81135164:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135168:	e03ff215 	stw	zero,-56(fp)
8113516c:	00003606 	br	81135248 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81135170:	e0fff217 	ldw	r3,-56(fp)
81135174:	e0bff517 	ldw	r2,-44(fp)
81135178:	1885883a 	add	r2,r3,r2
8113517c:	d0e09a17 	ldw	r3,-32152(gp)
81135180:	180b883a 	mov	r5,r3
81135184:	1009883a 	mov	r4,r2
81135188:	11336dc0 	call	811336dc <Read_Sector_Data>
8113518c:	10003526 	beq	r2,zero,81135264 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81135190:	e03ff315 	stw	zero,-52(fp)
81135194:	00002306 	br	81135224 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
81135198:	e0bff317 	ldw	r2,-52(fp)
8113519c:	1004917a 	slli	r2,r2,5
811351a0:	e0fff417 	ldw	r3,-48(fp)
811351a4:	e13ff217 	ldw	r4,-56(fp)
811351a8:	200f883a 	mov	r7,r4
811351ac:	180d883a 	mov	r6,r3
811351b0:	e17fff17 	ldw	r5,-4(fp)
811351b4:	1009883a 	mov	r4,r2
811351b8:	1133b0c0 	call	81133b0c <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811351bc:	e0bfff17 	ldw	r2,-4(fp)
811351c0:	10800003 	ldbu	r2,0(r2)
811351c4:	10803fcc 	andi	r2,r2,255
811351c8:	10803960 	cmpeqi	r2,r2,229
811351cc:	1000121e 	bne	r2,zero,81135218 <get_home_directory_cluster_for_file+0x3d4>
811351d0:	e0bfff17 	ldw	r2,-4(fp)
811351d4:	10800003 	ldbu	r2,0(r2)
811351d8:	10803fcc 	andi	r2,r2,255
811351dc:	10000e26 	beq	r2,zero,81135218 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
811351e0:	e0fffb04 	addi	r3,fp,-20
811351e4:	e0bff904 	addi	r2,fp,-28
811351e8:	180d883a 	mov	r6,r3
811351ec:	100b883a 	mov	r5,r2
811351f0:	e13fff17 	ldw	r4,-4(fp)
811351f4:	1134ba00 	call	81134ba0 <match_file_record_to_name_ext>
811351f8:	e0bff615 	stw	r2,-40(fp)
                                if (match)
811351fc:	e0bff617 	ldw	r2,-40(fp)
81135200:	10000526 	beq	r2,zero,81135218 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
81135204:	e0bfff17 	ldw	r2,-4(fp)
81135208:	1080058b 	ldhu	r2,22(r2)
8113520c:	10bfffcc 	andi	r2,r2,65535
81135210:	e0bfef15 	stw	r2,-68(fp)
                                    break;
81135214:	00000606 	br	81135230 <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81135218:	e0bff317 	ldw	r2,-52(fp)
8113521c:	10800044 	addi	r2,r2,1
81135220:	e0bff315 	stw	r2,-52(fp)
81135224:	e0bff317 	ldw	r2,-52(fp)
81135228:	10800410 	cmplti	r2,r2,16
8113522c:	103fda1e 	bne	r2,zero,81135198 <__reset+0xfb115198>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
81135230:	e0ffef17 	ldw	r3,-68(fp)
81135234:	e0bfea17 	ldw	r2,-88(fp)
81135238:	18800c1e 	bne	r3,r2,8113526c <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8113523c:	e0bff217 	ldw	r2,-56(fp)
81135240:	10800044 	addi	r2,r2,1
81135244:	e0bff215 	stw	r2,-56(fp)
81135248:	00a04574 	movhi	r2,33045
8113524c:	1080a904 	addi	r2,r2,676
81135250:	10800383 	ldbu	r2,14(r2)
81135254:	10803fcc 	andi	r2,r2,255
81135258:	e0fff217 	ldw	r3,-56(fp)
8113525c:	18bfc416 	blt	r3,r2,81135170 <__reset+0xfb115170>
81135260:	00000306 	br	81135270 <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
81135264:	0001883a 	nop
81135268:	00000106 	br	81135270 <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
8113526c:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
81135270:	e0ffef17 	ldw	r3,-68(fp)
81135274:	e0bfea17 	ldw	r2,-88(fp)
81135278:	1880141e 	bne	r3,r2,811352cc <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
8113527c:	e0bfef17 	ldw	r2,-68(fp)
81135280:	e0fffc04 	addi	r3,fp,-16
81135284:	180b883a 	mov	r5,r3
81135288:	1009883a 	mov	r4,r2
8113528c:	11337bc0 	call	811337bc <get_cluster_flag>
81135290:	10000c26 	beq	r2,zero,811352c4 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81135294:	e0bffc0b 	ldhu	r2,-16(fp)
81135298:	10bfffcc 	andi	r2,r2,65535
8113529c:	10fffe0c 	andi	r3,r2,65528
811352a0:	00bffe14 	movui	r2,65528
811352a4:	1880021e 	bne	r3,r2,811352b0 <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
811352a8:	0005883a 	mov	r2,zero
811352ac:	00003006 	br	81135370 <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
811352b0:	e0bffc0b 	ldhu	r2,-16(fp)
811352b4:	10bfffcc 	andi	r2,r2,65535
811352b8:	10bffe0c 	andi	r2,r2,65528
811352bc:	e0bfef15 	stw	r2,-68(fp)
811352c0:	00000206 	br	811352cc <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
811352c4:	0005883a 	mov	r2,zero
811352c8:	00002906 	br	81135370 <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
811352cc:	e0bff417 	ldw	r2,-48(fp)
811352d0:	00fffdd4 	movui	r3,65527
811352d4:	18800316 	blt	r3,r2,811352e4 <get_home_directory_cluster_for_file+0x4a0>
811352d8:	e0ffef17 	ldw	r3,-68(fp)
811352dc:	e0bfea17 	ldw	r2,-88(fp)
811352e0:	18bf9426 	beq	r3,r2,81135134 <__reset+0xfb115134>
            if (new_cluster != home_dir_cluster)
811352e4:	e0ffef17 	ldw	r3,-68(fp)
811352e8:	e0bfea17 	ldw	r2,-88(fp)
811352ec:	18800826 	beq	r3,r2,81135310 <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
811352f0:	e0bfef17 	ldw	r2,-68(fp)
811352f4:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
811352f8:	e0ffed17 	ldw	r3,-76(fp)
811352fc:	e0bfeb17 	ldw	r2,-84(fp)
81135300:	1885883a 	add	r2,r3,r2
81135304:	10800044 	addi	r2,r2,1
81135308:	e0bfed15 	stw	r2,-76(fp)
8113530c:	00000206 	br	81135318 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81135310:	0005883a 	mov	r2,zero
81135314:	00001606 	br	81135370 <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
81135318:	e0bfed17 	ldw	r2,-76(fp)
8113531c:	e0fffd17 	ldw	r3,-12(fp)
81135320:	1885883a 	add	r2,r3,r2
81135324:	1009883a 	mov	r4,r2
81135328:	1134ae00 	call	81134ae0 <get_dir_divider_location>
8113532c:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
81135330:	e0bfeb17 	ldw	r2,-84(fp)
81135334:	1000020e 	bge	r2,zero,81135340 <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
81135338:	00800044 	movi	r2,1
8113533c:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
81135340:	e0bfeb17 	ldw	r2,-84(fp)
81135344:	00becf16 	blt	zero,r2,81134e84 <__reset+0xfb114e84>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
81135348:	e0bffe17 	ldw	r2,-8(fp)
8113534c:	e0ffea17 	ldw	r3,-88(fp)
81135350:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
81135354:	e0bfea17 	ldw	r2,-88(fp)
81135358:	1000041e 	bne	r2,zero,8113536c <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
8113535c:	e0bfff17 	ldw	r2,-4(fp)
81135360:	10000a15 	stw	zero,40(r2)
		result = true;
81135364:	00800044 	movi	r2,1
81135368:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
8113536c:	e0bfe917 	ldw	r2,-92(fp)
}
81135370:	e037883a 	mov	sp,fp
81135374:	dfc00117 	ldw	ra,4(sp)
81135378:	df000017 	ldw	fp,0(sp)
8113537c:	dec00204 	addi	sp,sp,8
81135380:	f800283a 	ret

81135384 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
81135384:	deffe804 	addi	sp,sp,-96
81135388:	de00012e 	bgeu	sp,et,81135390 <find_file_in_directory+0xc>
8113538c:	003b68fa 	trap	3
81135390:	dfc01715 	stw	ra,92(sp)
81135394:	df001615 	stw	fp,88(sp)
81135398:	df001604 	addi	fp,sp,88
8113539c:	e13ffd15 	stw	r4,-12(fp)
811353a0:	e17ffe15 	stw	r5,-8(fp)
811353a4:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
811353a8:	e13ffe17 	ldw	r4,-8(fp)
811353ac:	1134ae00 	call	81134ae0 <get_dir_divider_location>
811353b0:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
811353b4:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
811353b8:	00800804 	movi	r2,32
811353bc:	e0bff905 	stb	r2,-28(fp)
811353c0:	00800804 	movi	r2,32
811353c4:	e0bff945 	stb	r2,-27(fp)
811353c8:	00800804 	movi	r2,32
811353cc:	e0bff985 	stb	r2,-26(fp)
811353d0:	00800804 	movi	r2,32
811353d4:	e0bff9c5 	stb	r2,-25(fp)
811353d8:	00800804 	movi	r2,32
811353dc:	e0bffa05 	stb	r2,-24(fp)
811353e0:	00800804 	movi	r2,32
811353e4:	e0bffa45 	stb	r2,-23(fp)
811353e8:	00800804 	movi	r2,32
811353ec:	e0bffa85 	stb	r2,-22(fp)
811353f0:	00800804 	movi	r2,32
811353f4:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
811353f8:	00800804 	movi	r2,32
811353fc:	e0bffb05 	stb	r2,-20(fp)
81135400:	00800804 	movi	r2,32
81135404:	e0bffb45 	stb	r2,-19(fp)
81135408:	00800804 	movi	r2,32
8113540c:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
81135410:	00bfffc4 	movi	r2,-1
81135414:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
81135418:	e0bffd17 	ldw	r2,-12(fp)
8113541c:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
81135420:	e13ffe17 	ldw	r4,-8(fp)
81135424:	11139780 	call	81113978 <strlen>
81135428:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
8113542c:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
81135430:	00000b06 	br	81135460 <find_file_in_directory+0xdc>
    {
        last_dir_separator = last_dir_separator+location+1;
81135434:	e0ffeb17 	ldw	r3,-84(fp)
81135438:	e0bfea17 	ldw	r2,-88(fp)
8113543c:	1885883a 	add	r2,r3,r2
81135440:	10800044 	addi	r2,r2,1
81135444:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
81135448:	e0bfeb17 	ldw	r2,-84(fp)
8113544c:	e0fffe17 	ldw	r3,-8(fp)
81135450:	1885883a 	add	r2,r3,r2
81135454:	1009883a 	mov	r4,r2
81135458:	1134ae00 	call	81134ae0 <get_dir_divider_location>
8113545c:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
81135460:	e0bfea17 	ldw	r2,-88(fp)
81135464:	00bff316 	blt	zero,r2,81135434 <__reset+0xfb115434>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81135468:	e0bfeb17 	ldw	r2,-84(fp)
8113546c:	e0bfee15 	stw	r2,-72(fp)
81135470:	00002706 	br	81135510 <find_file_in_directory+0x18c>
    {
        if (file_name[index] == '.')
81135474:	e0bfee17 	ldw	r2,-72(fp)
81135478:	e0fffe17 	ldw	r3,-8(fp)
8113547c:	1885883a 	add	r2,r3,r2
81135480:	10800003 	ldbu	r2,0(r2)
81135484:	10803fcc 	andi	r2,r2,255
81135488:	1080201c 	xori	r2,r2,128
8113548c:	10bfe004 	addi	r2,r2,-128
81135490:	10800b98 	cmpnei	r2,r2,46
81135494:	1000031e 	bne	r2,zero,811354a4 <find_file_in_directory+0x120>
        {
            ext_index = index;
81135498:	e0bfee17 	ldw	r2,-72(fp)
8113549c:	e0bfec15 	stw	r2,-80(fp)
811354a0:	00001806 	br	81135504 <find_file_in_directory+0x180>
        }
        else if (ext_index < 0)
811354a4:	e0bfec17 	ldw	r2,-80(fp)
811354a8:	10000b0e 	bge	r2,zero,811354d8 <find_file_in_directory+0x154>
        {
            name[index-last_dir_separator] = file_name[index];
811354ac:	e0ffee17 	ldw	r3,-72(fp)
811354b0:	e0bfeb17 	ldw	r2,-84(fp)
811354b4:	1885c83a 	sub	r2,r3,r2
811354b8:	e0ffee17 	ldw	r3,-72(fp)
811354bc:	e13ffe17 	ldw	r4,-8(fp)
811354c0:	20c7883a 	add	r3,r4,r3
811354c4:	18c00003 	ldbu	r3,0(r3)
811354c8:	e13ff904 	addi	r4,fp,-28
811354cc:	2085883a 	add	r2,r4,r2
811354d0:	10c00005 	stb	r3,0(r2)
811354d4:	00000b06 	br	81135504 <find_file_in_directory+0x180>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
811354d8:	e0ffee17 	ldw	r3,-72(fp)
811354dc:	e0bfec17 	ldw	r2,-80(fp)
811354e0:	1885c83a 	sub	r2,r3,r2
811354e4:	10bfffc4 	addi	r2,r2,-1
811354e8:	e0ffee17 	ldw	r3,-72(fp)
811354ec:	e13ffe17 	ldw	r4,-8(fp)
811354f0:	20c7883a 	add	r3,r4,r3
811354f4:	18c00003 	ldbu	r3,0(r3)
811354f8:	e13ffb04 	addi	r4,fp,-20
811354fc:	2085883a 	add	r2,r4,r2
81135500:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81135504:	e0bfee17 	ldw	r2,-72(fp)
81135508:	10800044 	addi	r2,r2,1
8113550c:	e0bfee15 	stw	r2,-72(fp)
81135510:	e0ffee17 	ldw	r3,-72(fp)
81135514:	e0bff417 	ldw	r2,-48(fp)
81135518:	18bfd616 	blt	r3,r2,81135474 <__reset+0xfb115474>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
8113551c:	e0bffd17 	ldw	r2,-12(fp)
81135520:	1000461e 	bne	r2,zero,8113563c <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81135524:	00a04574 	movhi	r2,33045
81135528:	1080a904 	addi	r2,r2,676
8113552c:	1080050b 	ldhu	r2,20(r2)
81135530:	10bfffcc 	andi	r2,r2,65535
81135534:	1006917a 	slli	r3,r2,5
81135538:	00a04574 	movhi	r2,33045
8113553c:	1080a904 	addi	r2,r2,676
81135540:	1080030b 	ldhu	r2,12(r2)
81135544:	10bfffcc 	andi	r2,r2,65535
81135548:	1885283a 	div	r2,r3,r2
8113554c:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135550:	e03ff015 	stw	zero,-64(fp)
81135554:	00003506 	br	8113562c <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81135558:	00a04574 	movhi	r2,33045
8113555c:	1080a904 	addi	r2,r2,676
81135560:	10c01317 	ldw	r3,76(r2)
81135564:	e0bff017 	ldw	r2,-64(fp)
81135568:	1885883a 	add	r2,r3,r2
8113556c:	1007883a 	mov	r3,r2
81135570:	d0a09a17 	ldw	r2,-32152(gp)
81135574:	100b883a 	mov	r5,r2
81135578:	1809883a 	mov	r4,r3
8113557c:	11336dc0 	call	811336dc <Read_Sector_Data>
81135580:	10009626 	beq	r2,zero,811357dc <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81135584:	e03ff115 	stw	zero,-60(fp)
81135588:	00002006 	br	8113560c <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
8113558c:	e0bff117 	ldw	r2,-60(fp)
81135590:	1004917a 	slli	r2,r2,5
81135594:	e0fff017 	ldw	r3,-64(fp)
81135598:	180f883a 	mov	r7,r3
8113559c:	000d883a 	mov	r6,zero
811355a0:	e17fff17 	ldw	r5,-4(fp)
811355a4:	1009883a 	mov	r4,r2
811355a8:	1133b0c0 	call	81133b0c <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811355ac:	e0bfff17 	ldw	r2,-4(fp)
811355b0:	10800003 	ldbu	r2,0(r2)
811355b4:	10803fcc 	andi	r2,r2,255
811355b8:	10803960 	cmpeqi	r2,r2,229
811355bc:	1000101e 	bne	r2,zero,81135600 <find_file_in_directory+0x27c>
811355c0:	e0bfff17 	ldw	r2,-4(fp)
811355c4:	10800003 	ldbu	r2,0(r2)
811355c8:	10803fcc 	andi	r2,r2,255
811355cc:	10000c26 	beq	r2,zero,81135600 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
811355d0:	e0fffb04 	addi	r3,fp,-20
811355d4:	e0bff904 	addi	r2,fp,-28
811355d8:	180d883a 	mov	r6,r3
811355dc:	100b883a 	mov	r5,r2
811355e0:	e13fff17 	ldw	r4,-4(fp)
811355e4:	1134ba00 	call	81134ba0 <match_file_record_to_name_ext>
811355e8:	e0bff815 	stw	r2,-32(fp)

                        if (match)
811355ec:	e0bff817 	ldw	r2,-32(fp)
811355f0:	10000326 	beq	r2,zero,81135600 <find_file_in_directory+0x27c>
                        {
                            result = true;
811355f4:	00800044 	movi	r2,1
811355f8:	e0bfef15 	stw	r2,-68(fp)
                            break;
811355fc:	00000606 	br	81135618 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81135600:	e0bff117 	ldw	r2,-60(fp)
81135604:	10800044 	addi	r2,r2,1
81135608:	e0bff115 	stw	r2,-60(fp)
8113560c:	e0bff117 	ldw	r2,-60(fp)
81135610:	10800410 	cmplti	r2,r2,16
81135614:	103fdd1e 	bne	r2,zero,8113558c <__reset+0xfb11558c>
            }
            else
            {
                break;
            }
            if (result)
81135618:	e0bfef17 	ldw	r2,-68(fp)
8113561c:	1000711e 	bne	r2,zero,811357e4 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135620:	e0bff017 	ldw	r2,-64(fp)
81135624:	10800044 	addi	r2,r2,1
81135628:	e0bff015 	stw	r2,-64(fp)
8113562c:	e0fff017 	ldw	r3,-64(fp)
81135630:	e0bff717 	ldw	r2,-36(fp)
81135634:	18bfc816 	blt	r3,r2,81135558 <__reset+0xfb115558>
81135638:	00006b06 	br	811357e8 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8113563c:	e0bfed17 	ldw	r2,-76(fp)
81135640:	10ffff84 	addi	r3,r2,-2
81135644:	00a04574 	movhi	r2,33045
81135648:	1080a904 	addi	r2,r2,676
8113564c:	10800383 	ldbu	r2,14(r2)
81135650:	10803fcc 	andi	r2,r2,255
81135654:	1885383a 	mul	r2,r3,r2
81135658:	1007883a 	mov	r3,r2
8113565c:	00a04574 	movhi	r2,33045
81135660:	1080a904 	addi	r2,r2,676
81135664:	10801417 	ldw	r2,80(r2)
81135668:	1885883a 	add	r2,r3,r2
8113566c:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135670:	e03ff215 	stw	zero,-56(fp)
81135674:	00003306 	br	81135744 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81135678:	e0fff217 	ldw	r3,-56(fp)
8113567c:	e0bff517 	ldw	r2,-44(fp)
81135680:	1885883a 	add	r2,r3,r2
81135684:	d0e09a17 	ldw	r3,-32152(gp)
81135688:	180b883a 	mov	r5,r3
8113568c:	1009883a 	mov	r4,r2
81135690:	11336dc0 	call	811336dc <Read_Sector_Data>
81135694:	10003226 	beq	r2,zero,81135760 <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81135698:	e03ff315 	stw	zero,-52(fp)
8113569c:	00002106 	br	81135724 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
811356a0:	e0bff317 	ldw	r2,-52(fp)
811356a4:	1004917a 	slli	r2,r2,5
811356a8:	e0ffed17 	ldw	r3,-76(fp)
811356ac:	e13ff217 	ldw	r4,-56(fp)
811356b0:	200f883a 	mov	r7,r4
811356b4:	180d883a 	mov	r6,r3
811356b8:	e17fff17 	ldw	r5,-4(fp)
811356bc:	1009883a 	mov	r4,r2
811356c0:	1133b0c0 	call	81133b0c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811356c4:	e0bfff17 	ldw	r2,-4(fp)
811356c8:	10800003 	ldbu	r2,0(r2)
811356cc:	10803fcc 	andi	r2,r2,255
811356d0:	10803960 	cmpeqi	r2,r2,229
811356d4:	1000101e 	bne	r2,zero,81135718 <find_file_in_directory+0x394>
811356d8:	e0bfff17 	ldw	r2,-4(fp)
811356dc:	10800003 	ldbu	r2,0(r2)
811356e0:	10803fcc 	andi	r2,r2,255
811356e4:	10000c26 	beq	r2,zero,81135718 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
811356e8:	e0fffb04 	addi	r3,fp,-20
811356ec:	e0bff904 	addi	r2,fp,-28
811356f0:	180d883a 	mov	r6,r3
811356f4:	100b883a 	mov	r5,r2
811356f8:	e13fff17 	ldw	r4,-4(fp)
811356fc:	1134ba00 	call	81134ba0 <match_file_record_to_name_ext>
81135700:	e0bff615 	stw	r2,-40(fp)

                            if (match)
81135704:	e0bff617 	ldw	r2,-40(fp)
81135708:	10000326 	beq	r2,zero,81135718 <find_file_in_directory+0x394>
                            {                               
                                result = true;
8113570c:	00800044 	movi	r2,1
81135710:	e0bfef15 	stw	r2,-68(fp)
                                break;
81135714:	00000606 	br	81135730 <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81135718:	e0bff317 	ldw	r2,-52(fp)
8113571c:	10800044 	addi	r2,r2,1
81135720:	e0bff315 	stw	r2,-52(fp)
81135724:	e0bff317 	ldw	r2,-52(fp)
81135728:	10800410 	cmplti	r2,r2,16
8113572c:	103fdc1e 	bne	r2,zero,811356a0 <__reset+0xfb1156a0>
                }
                else
                {
                    break;
                }
                if (result)
81135730:	e0bfef17 	ldw	r2,-68(fp)
81135734:	10000c1e 	bne	r2,zero,81135768 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135738:	e0bff217 	ldw	r2,-56(fp)
8113573c:	10800044 	addi	r2,r2,1
81135740:	e0bff215 	stw	r2,-56(fp)
81135744:	00a04574 	movhi	r2,33045
81135748:	1080a904 	addi	r2,r2,676
8113574c:	10800383 	ldbu	r2,14(r2)
81135750:	10803fcc 	andi	r2,r2,255
81135754:	e0fff217 	ldw	r3,-56(fp)
81135758:	18bfc716 	blt	r3,r2,81135678 <__reset+0xfb115678>
8113575c:	00000306 	br	8113576c <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
81135760:	0001883a 	nop
81135764:	00000106 	br	8113576c <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
81135768:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
8113576c:	e0bfef17 	ldw	r2,-68(fp)
81135770:	1000141e 	bne	r2,zero,811357c4 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
81135774:	e0bfed17 	ldw	r2,-76(fp)
81135778:	e0fffc04 	addi	r3,fp,-16
8113577c:	180b883a 	mov	r5,r3
81135780:	1009883a 	mov	r4,r2
81135784:	11337bc0 	call	811337bc <get_cluster_flag>
81135788:	10000c26 	beq	r2,zero,811357bc <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8113578c:	e0bffc0b 	ldhu	r2,-16(fp)
81135790:	10bfffcc 	andi	r2,r2,65535
81135794:	10fffe0c 	andi	r3,r2,65528
81135798:	00bffe14 	movui	r2,65528
8113579c:	1880021e 	bne	r3,r2,811357a8 <find_file_in_directory+0x424>
					{
						return false;
811357a0:	0005883a 	mov	r2,zero
811357a4:	00001106 	br	811357ec <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
811357a8:	e0bffc0b 	ldhu	r2,-16(fp)
811357ac:	10bfffcc 	andi	r2,r2,65535
811357b0:	10bffe0c 	andi	r2,r2,65528
811357b4:	e0bfed15 	stw	r2,-76(fp)
811357b8:	00000206 	br	811357c4 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
811357bc:	0005883a 	mov	r2,zero
811357c0:	00000a06 	br	811357ec <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
811357c4:	e0bfed17 	ldw	r2,-76(fp)
811357c8:	00fffdd4 	movui	r3,65527
811357cc:	18800616 	blt	r3,r2,811357e8 <find_file_in_directory+0x464>
811357d0:	e0bfef17 	ldw	r2,-68(fp)
811357d4:	103f9926 	beq	r2,zero,8113563c <__reset+0xfb11563c>
811357d8:	00000306 	br	811357e8 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
811357dc:	0001883a 	nop
811357e0:	00000106 	br	811357e8 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
811357e4:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
811357e8:	e0bfef17 	ldw	r2,-68(fp)
}
811357ec:	e037883a 	mov	sp,fp
811357f0:	dfc00117 	ldw	ra,4(sp)
811357f4:	df000017 	ldw	fp,0(sp)
811357f8:	dec00204 	addi	sp,sp,8
811357fc:	f800283a 	ret

81135800 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
81135800:	defff504 	addi	sp,sp,-44
81135804:	de00012e 	bgeu	sp,et,8113580c <find_first_empty_cluster+0xc>
81135808:	003b68fa 	trap	3
8113580c:	dfc00a15 	stw	ra,40(sp)
81135810:	df000915 	stw	fp,36(sp)
81135814:	df000904 	addi	fp,sp,36
81135818:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
8113581c:	00a04574 	movhi	r2,33045
81135820:	1080a904 	addi	r2,r2,676
81135824:	10801117 	ldw	r2,68(r2)
81135828:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
8113582c:	00800084 	movi	r2,2
81135830:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
81135834:	00bfffc4 	movi	r2,-1
81135838:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
8113583c:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
81135840:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
81135844:	00a04574 	movhi	r2,33045
81135848:	1080a904 	addi	r2,r2,676
8113584c:	10801417 	ldw	r2,80(r2)
81135850:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
81135854:	00a04574 	movhi	r2,33045
81135858:	1080a904 	addi	r2,r2,676
8113585c:	1080058b 	ldhu	r2,22(r2)
81135860:	10bfffcc 	andi	r2,r2,65535
81135864:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
81135868:	00a04574 	movhi	r2,33045
8113586c:	1080a904 	addi	r2,r2,676
81135870:	10800917 	ldw	r2,36(r2)
81135874:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
81135878:	e0bffd17 	ldw	r2,-12(fp)
8113587c:	e0fffe17 	ldw	r3,-8(fp)
81135880:	18800b2e 	bgeu	r3,r2,811358b0 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81135884:	e0fffd17 	ldw	r3,-12(fp)
81135888:	e0bffc17 	ldw	r2,-16(fp)
8113588c:	1887c83a 	sub	r3,r3,r2
81135890:	00a04574 	movhi	r2,33045
81135894:	1080a904 	addi	r2,r2,676
81135898:	10800383 	ldbu	r2,14(r2)
8113589c:	10803fcc 	andi	r2,r2,255
811358a0:	1885203a 	divu	r2,r3,r2
811358a4:	10800044 	addi	r2,r2,1
811358a8:	e0bffb15 	stw	r2,-20(fp)
811358ac:	00002a06 	br	81135958 <find_first_empty_cluster+0x158>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
811358b0:	e0fffe17 	ldw	r3,-8(fp)
811358b4:	e0bffc17 	ldw	r2,-16(fp)
811358b8:	1887c83a 	sub	r3,r3,r2
811358bc:	00a04574 	movhi	r2,33045
811358c0:	1080a904 	addi	r2,r2,676
811358c4:	10800383 	ldbu	r2,14(r2)
811358c8:	10803fcc 	andi	r2,r2,255
811358cc:	1885203a 	divu	r2,r3,r2
811358d0:	10800044 	addi	r2,r2,1
811358d4:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
811358d8:	00001f06 	br	81135958 <find_first_empty_cluster+0x158>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
811358dc:	e0bff717 	ldw	r2,-36(fp)
811358e0:	d0e09a17 	ldw	r3,-32152(gp)
811358e4:	180b883a 	mov	r5,r3
811358e8:	1009883a 	mov	r4,r2
811358ec:	11336dc0 	call	811336dc <Read_Sector_Data>
811358f0:	10001426 	beq	r2,zero,81135944 <find_first_empty_cluster+0x144>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
811358f4:	e0bff817 	ldw	r2,-32(fp)
811358f8:	10803fcc 	andi	r2,r2,255
811358fc:	1085883a 	add	r2,r2,r2
81135900:	1007883a 	mov	r3,r2
81135904:	d0a09c17 	ldw	r2,-32144(gp)
81135908:	10800a17 	ldw	r2,40(r2)
8113590c:	1885883a 	add	r2,r3,r2
81135910:	1080002b 	ldhuio	r2,0(r2)
81135914:	10bfffcc 	andi	r2,r2,65535
81135918:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
8113591c:	e0bff90f 	ldh	r2,-28(fp)
81135920:	10000726 	beq	r2,zero,81135940 <find_first_empty_cluster+0x140>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
81135924:	e0bff817 	ldw	r2,-32(fp)
81135928:	10800044 	addi	r2,r2,1
8113592c:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
81135930:	e0bff817 	ldw	r2,-32(fp)
81135934:	10803fcc 	andi	r2,r2,255
81135938:	103fee1e 	bne	r2,zero,811358f4 <__reset+0xfb1158f4>
8113593c:	00000106 	br	81135944 <find_first_empty_cluster+0x144>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
81135940:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
81135944:	e0bff90f 	ldh	r2,-28(fp)
81135948:	10000926 	beq	r2,zero,81135970 <find_first_empty_cluster+0x170>
        {
            break;
        }
        sector++;
8113594c:	e0bff717 	ldw	r2,-36(fp)
81135950:	10800044 	addi	r2,r2,1
81135954:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
81135958:	00a04574 	movhi	r2,33045
8113595c:	1080a904 	addi	r2,r2,676
81135960:	10c01217 	ldw	r3,72(r2)
81135964:	e0bff717 	ldw	r2,-36(fp)
81135968:	18bfdc1e 	bne	r3,r2,811358dc <__reset+0xfb1158dc>
8113596c:	00000106 	br	81135974 <find_first_empty_cluster+0x174>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
81135970:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
81135974:	e0bff90f 	ldh	r2,-28(fp)
81135978:	1000081e 	bne	r2,zero,8113599c <find_first_empty_cluster+0x19c>
8113597c:	e0bff90f 	ldh	r2,-28(fp)
81135980:	e0fffb17 	ldw	r3,-20(fp)
81135984:	18800536 	bltu	r3,r2,8113599c <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
81135988:	e0bfff17 	ldw	r2,-4(fp)
8113598c:	e0fff817 	ldw	r3,-32(fp)
81135990:	10c00015 	stw	r3,0(r2)
		result = true;
81135994:	00800044 	movi	r2,1
81135998:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
8113599c:	e0bffa17 	ldw	r2,-24(fp)
}
811359a0:	e037883a 	mov	sp,fp
811359a4:	dfc00117 	ldw	ra,4(sp)
811359a8:	df000017 	ldw	fp,0(sp)
811359ac:	dec00204 	addi	sp,sp,8
811359b0:	f800283a 	ret

811359b4 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
811359b4:	defff604 	addi	sp,sp,-40
811359b8:	de00012e 	bgeu	sp,et,811359c0 <find_first_empty_record_in_a_subdirectory+0xc>
811359bc:	003b68fa 	trap	3
811359c0:	dfc00915 	stw	ra,36(sp)
811359c4:	df000815 	stw	fp,32(sp)
811359c8:	df000804 	addi	fp,sp,32
811359cc:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
811359d0:	00bfffc4 	movi	r2,-1
811359d4:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
811359d8:	e0bfff17 	ldw	r2,-4(fp)
811359dc:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811359e0:	e0bff917 	ldw	r2,-28(fp)
811359e4:	10ffff84 	addi	r3,r2,-2
811359e8:	00a04574 	movhi	r2,33045
811359ec:	1080a904 	addi	r2,r2,676
811359f0:	10800383 	ldbu	r2,14(r2)
811359f4:	10803fcc 	andi	r2,r2,255
811359f8:	1885383a 	mul	r2,r3,r2
811359fc:	1007883a 	mov	r3,r2
81135a00:	00a04574 	movhi	r2,33045
81135a04:	1080a904 	addi	r2,r2,676
81135a08:	10801417 	ldw	r2,80(r2)
81135a0c:	1885883a 	add	r2,r3,r2
81135a10:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135a14:	e03ffa15 	stw	zero,-24(fp)
81135a18:	00002c06 	br	81135acc <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81135a1c:	e0fffa17 	ldw	r3,-24(fp)
81135a20:	e0bffc17 	ldw	r2,-16(fp)
81135a24:	1885883a 	add	r2,r3,r2
81135a28:	d0e09a17 	ldw	r3,-32152(gp)
81135a2c:	180b883a 	mov	r5,r3
81135a30:	1009883a 	mov	r4,r2
81135a34:	11336dc0 	call	811336dc <Read_Sector_Data>
81135a38:	10002b26 	beq	r2,zero,81135ae8 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81135a3c:	e03ffb15 	stw	zero,-20(fp)
81135a40:	00001c06 	br	81135ab4 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81135a44:	e0bffb17 	ldw	r2,-20(fp)
81135a48:	1004917a 	slli	r2,r2,5
81135a4c:	1007883a 	mov	r3,r2
81135a50:	d0a09c17 	ldw	r2,-32144(gp)
81135a54:	10800a17 	ldw	r2,40(r2)
81135a58:	1885883a 	add	r2,r3,r2
81135a5c:	10800023 	ldbuio	r2,0(r2)
81135a60:	10803fcc 	andi	r2,r2,255
81135a64:	10803fcc 	andi	r2,r2,255
81135a68:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
81135a6c:	e0bffd0b 	ldhu	r2,-12(fp)
81135a70:	10803960 	cmpeqi	r2,r2,229
81135a74:	1000021e 	bne	r2,zero,81135a80 <find_first_empty_record_in_a_subdirectory+0xcc>
81135a78:	e0bffd0b 	ldhu	r2,-12(fp)
81135a7c:	10000a1e 	bne	r2,zero,81135aa8 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
81135a80:	e0bffa17 	ldw	r2,-24(fp)
81135a84:	1006913a 	slli	r3,r2,4
81135a88:	e0bffb17 	ldw	r2,-20(fp)
81135a8c:	1885883a 	add	r2,r3,r2
81135a90:	1006943a 	slli	r3,r2,16
81135a94:	e0bff917 	ldw	r2,-28(fp)
81135a98:	1884b03a 	or	r2,r3,r2
81135a9c:	e0bff815 	stw	r2,-32(fp)
                        return result;
81135aa0:	e0bff817 	ldw	r2,-32(fp)
81135aa4:	00005306 	br	81135bf4 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81135aa8:	e0bffb17 	ldw	r2,-20(fp)
81135aac:	10800044 	addi	r2,r2,1
81135ab0:	e0bffb15 	stw	r2,-20(fp)
81135ab4:	e0bffb17 	ldw	r2,-20(fp)
81135ab8:	10800410 	cmplti	r2,r2,16
81135abc:	103fe11e 	bne	r2,zero,81135a44 <__reset+0xfb115a44>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81135ac0:	e0bffa17 	ldw	r2,-24(fp)
81135ac4:	10800044 	addi	r2,r2,1
81135ac8:	e0bffa15 	stw	r2,-24(fp)
81135acc:	00a04574 	movhi	r2,33045
81135ad0:	1080a904 	addi	r2,r2,676
81135ad4:	10800383 	ldbu	r2,14(r2)
81135ad8:	10803fcc 	andi	r2,r2,255
81135adc:	e0fffa17 	ldw	r3,-24(fp)
81135ae0:	18bfce16 	blt	r3,r2,81135a1c <__reset+0xfb115a1c>
81135ae4:	00000106 	br	81135aec <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
81135ae8:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
81135aec:	e0bff817 	ldw	r2,-32(fp)
81135af0:	1000390e 	bge	r2,zero,81135bd8 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
81135af4:	e0bff917 	ldw	r2,-28(fp)
81135af8:	e0fffd84 	addi	r3,fp,-10
81135afc:	180b883a 	mov	r5,r3
81135b00:	1009883a 	mov	r4,r2
81135b04:	11337bc0 	call	811337bc <get_cluster_flag>
81135b08:	10003126 	beq	r2,zero,81135bd0 <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81135b0c:	e0bffd8b 	ldhu	r2,-10(fp)
81135b10:	10bfffcc 	andi	r2,r2,65535
81135b14:	10fffe0c 	andi	r3,r2,65528
81135b18:	00bffe14 	movui	r2,65528
81135b1c:	18802e1e 	bne	r3,r2,81135bd8 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
81135b20:	e0bffe04 	addi	r2,fp,-8
81135b24:	1009883a 	mov	r4,r2
81135b28:	11358000 	call	81135800 <find_first_empty_cluster>
81135b2c:	10002326 	beq	r2,zero,81135bbc <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81135b30:	e0bff917 	ldw	r2,-28(fp)
81135b34:	e0fffe17 	ldw	r3,-8(fp)
81135b38:	18ffffcc 	andi	r3,r3,65535
81135b3c:	18e0001c 	xori	r3,r3,32768
81135b40:	18e00004 	addi	r3,r3,-32768
81135b44:	01800044 	movi	r6,1
81135b48:	180b883a 	mov	r5,r3
81135b4c:	1009883a 	mov	r4,r2
81135b50:	11338780 	call	81133878 <mark_cluster>
81135b54:	10001926 	beq	r2,zero,81135bbc <find_first_empty_record_in_a_subdirectory+0x208>
81135b58:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81135b5c:	01800044 	movi	r6,1
81135b60:	017fffc4 	movi	r5,-1
81135b64:	1009883a 	mov	r4,r2
81135b68:	11338780 	call	81133878 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81135b6c:	10001326 	beq	r2,zero,81135bbc <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81135b70:	e0bff917 	ldw	r2,-28(fp)
81135b74:	e0fffe17 	ldw	r3,-8(fp)
81135b78:	18ffffcc 	andi	r3,r3,65535
81135b7c:	18e0001c 	xori	r3,r3,32768
81135b80:	18e00004 	addi	r3,r3,-32768
81135b84:	000d883a 	mov	r6,zero
81135b88:	180b883a 	mov	r5,r3
81135b8c:	1009883a 	mov	r4,r2
81135b90:	11338780 	call	81133878 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81135b94:	10000926 	beq	r2,zero,81135bbc <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81135b98:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
81135b9c:	000d883a 	mov	r6,zero
81135ba0:	017fffc4 	movi	r5,-1
81135ba4:	1009883a 	mov	r4,r2
81135ba8:	11338780 	call	81133878 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81135bac:	10000326 	beq	r2,zero,81135bbc <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
81135bb0:	11336880 	call	81133688 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
81135bb4:	e0bffe17 	ldw	r2,-8(fp)
81135bb8:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
81135bbc:	e0bffd8b 	ldhu	r2,-10(fp)
81135bc0:	10bfffcc 	andi	r2,r2,65535
81135bc4:	10bffe0c 	andi	r2,r2,65528
81135bc8:	e0bff915 	stw	r2,-28(fp)
81135bcc:	00000206 	br	81135bd8 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
81135bd0:	00bfffc4 	movi	r2,-1
81135bd4:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
81135bd8:	e0bff917 	ldw	r2,-28(fp)
81135bdc:	00fffdd4 	movui	r3,65527
81135be0:	18800316 	blt	r3,r2,81135bf0 <find_first_empty_record_in_a_subdirectory+0x23c>
81135be4:	e0bff817 	ldw	r2,-32(fp)
81135be8:	10bfffe0 	cmpeqi	r2,r2,-1
81135bec:	103f7c1e 	bne	r2,zero,811359e0 <__reset+0xfb1159e0>
    return result; 
81135bf0:	e0bff817 	ldw	r2,-32(fp)
}
81135bf4:	e037883a 	mov	sp,fp
81135bf8:	dfc00117 	ldw	ra,4(sp)
81135bfc:	df000017 	ldw	fp,0(sp)
81135c00:	dec00204 	addi	sp,sp,8
81135c04:	f800283a 	ret

81135c08 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
81135c08:	defff904 	addi	sp,sp,-28
81135c0c:	de00012e 	bgeu	sp,et,81135c14 <find_first_empty_record_in_root_directory+0xc>
81135c10:	003b68fa 	trap	3
81135c14:	dfc00615 	stw	ra,24(sp)
81135c18:	df000515 	stw	fp,20(sp)
81135c1c:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81135c20:	00a04574 	movhi	r2,33045
81135c24:	1080a904 	addi	r2,r2,676
81135c28:	1080050b 	ldhu	r2,20(r2)
81135c2c:	10bfffcc 	andi	r2,r2,65535
81135c30:	1006917a 	slli	r3,r2,5
81135c34:	00a04574 	movhi	r2,33045
81135c38:	1080a904 	addi	r2,r2,676
81135c3c:	1080030b 	ldhu	r2,12(r2)
81135c40:	10bfffcc 	andi	r2,r2,65535
81135c44:	1885283a 	div	r2,r3,r2
81135c48:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
81135c4c:	00bfffc4 	movi	r2,-1
81135c50:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135c54:	e03ffb15 	stw	zero,-20(fp)
81135c58:	00002d06 	br	81135d10 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81135c5c:	00a04574 	movhi	r2,33045
81135c60:	1080a904 	addi	r2,r2,676
81135c64:	10c01317 	ldw	r3,76(r2)
81135c68:	e0bffb17 	ldw	r2,-20(fp)
81135c6c:	1885883a 	add	r2,r3,r2
81135c70:	1007883a 	mov	r3,r2
81135c74:	d0a09a17 	ldw	r2,-32152(gp)
81135c78:	100b883a 	mov	r5,r2
81135c7c:	1809883a 	mov	r4,r3
81135c80:	11336dc0 	call	811336dc <Read_Sector_Data>
81135c84:	10002626 	beq	r2,zero,81135d20 <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81135c88:	e03ffc15 	stw	zero,-16(fp)
81135c8c:	00001a06 	br	81135cf8 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81135c90:	e0bffc17 	ldw	r2,-16(fp)
81135c94:	1004917a 	slli	r2,r2,5
81135c98:	1007883a 	mov	r3,r2
81135c9c:	d0a09c17 	ldw	r2,-32144(gp)
81135ca0:	10800a17 	ldw	r2,40(r2)
81135ca4:	1885883a 	add	r2,r3,r2
81135ca8:	10800023 	ldbuio	r2,0(r2)
81135cac:	10803fcc 	andi	r2,r2,255
81135cb0:	10803fcc 	andi	r2,r2,255
81135cb4:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
81135cb8:	e0bfff0b 	ldhu	r2,-4(fp)
81135cbc:	10803960 	cmpeqi	r2,r2,229
81135cc0:	1000021e 	bne	r2,zero,81135ccc <find_first_empty_record_in_root_directory+0xc4>
81135cc4:	e0bfff0b 	ldhu	r2,-4(fp)
81135cc8:	1000081e 	bne	r2,zero,81135cec <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
81135ccc:	e0bffb17 	ldw	r2,-20(fp)
81135cd0:	1006913a 	slli	r3,r2,4
81135cd4:	e0bffc17 	ldw	r2,-16(fp)
81135cd8:	1885883a 	add	r2,r3,r2
81135cdc:	1004943a 	slli	r2,r2,16
81135ce0:	e0bffe15 	stw	r2,-8(fp)
                    return result;
81135ce4:	e0bffe17 	ldw	r2,-8(fp)
81135ce8:	00000f06 	br	81135d28 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81135cec:	e0bffc17 	ldw	r2,-16(fp)
81135cf0:	10800044 	addi	r2,r2,1
81135cf4:	e0bffc15 	stw	r2,-16(fp)
81135cf8:	e0bffc17 	ldw	r2,-16(fp)
81135cfc:	10800410 	cmplti	r2,r2,16
81135d00:	103fe31e 	bne	r2,zero,81135c90 <__reset+0xfb115c90>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81135d04:	e0bffb17 	ldw	r2,-20(fp)
81135d08:	10800044 	addi	r2,r2,1
81135d0c:	e0bffb15 	stw	r2,-20(fp)
81135d10:	e0fffb17 	ldw	r3,-20(fp)
81135d14:	e0bffd17 	ldw	r2,-12(fp)
81135d18:	18bfd016 	blt	r3,r2,81135c5c <__reset+0xfb115c5c>
81135d1c:	00000106 	br	81135d24 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
81135d20:	0001883a 	nop
        }
    }
    return result;
81135d24:	e0bffe17 	ldw	r2,-8(fp)
}
81135d28:	e037883a 	mov	sp,fp
81135d2c:	dfc00117 	ldw	ra,4(sp)
81135d30:	df000017 	ldw	fp,0(sp)
81135d34:	dec00204 	addi	sp,sp,8
81135d38:	f800283a 	ret

81135d3c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
81135d3c:	defffa04 	addi	sp,sp,-24
81135d40:	de00012e 	bgeu	sp,et,81135d48 <convert_filename_to_name_extension+0xc>
81135d44:	003b68fa 	trap	3
81135d48:	df000515 	stw	fp,20(sp)
81135d4c:	df000504 	addi	fp,sp,20
81135d50:	e13ffd15 	stw	r4,-12(fp)
81135d54:	e17ffe15 	stw	r5,-8(fp)
81135d58:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
81135d5c:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
81135d60:	e03ffb15 	stw	zero,-20(fp)
81135d64:	00002506 	br	81135dfc <convert_filename_to_name_extension+0xc0>
    {
        if (filename[local] != '.')
81135d68:	e0bffc17 	ldw	r2,-16(fp)
81135d6c:	e0fffd17 	ldw	r3,-12(fp)
81135d70:	1885883a 	add	r2,r3,r2
81135d74:	10800003 	ldbu	r2,0(r2)
81135d78:	10803fcc 	andi	r2,r2,255
81135d7c:	1080201c 	xori	r2,r2,128
81135d80:	10bfe004 	addi	r2,r2,-128
81135d84:	10800ba0 	cmpeqi	r2,r2,46
81135d88:	1000141e 	bne	r2,zero,81135ddc <convert_filename_to_name_extension+0xa0>
        {
            name[counter] = filename[local];
81135d8c:	e0bffb17 	ldw	r2,-20(fp)
81135d90:	e0fffe17 	ldw	r3,-8(fp)
81135d94:	1885883a 	add	r2,r3,r2
81135d98:	e0fffc17 	ldw	r3,-16(fp)
81135d9c:	e13ffd17 	ldw	r4,-12(fp)
81135da0:	20c7883a 	add	r3,r4,r3
81135da4:	18c00003 	ldbu	r3,0(r3)
81135da8:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
81135dac:	e0bffc17 	ldw	r2,-16(fp)
81135db0:	e0fffd17 	ldw	r3,-12(fp)
81135db4:	1885883a 	add	r2,r3,r2
81135db8:	10800003 	ldbu	r2,0(r2)
81135dbc:	10803fcc 	andi	r2,r2,255
81135dc0:	1080201c 	xori	r2,r2,128
81135dc4:	10bfe004 	addi	r2,r2,-128
81135dc8:	10000926 	beq	r2,zero,81135df0 <convert_filename_to_name_extension+0xb4>
81135dcc:	e0bffc17 	ldw	r2,-16(fp)
81135dd0:	10800044 	addi	r2,r2,1
81135dd4:	e0bffc15 	stw	r2,-16(fp)
81135dd8:	00000506 	br	81135df0 <convert_filename_to_name_extension+0xb4>
        }
        else
        {
            name[counter] = ' ';
81135ddc:	e0bffb17 	ldw	r2,-20(fp)
81135de0:	e0fffe17 	ldw	r3,-8(fp)
81135de4:	1885883a 	add	r2,r3,r2
81135de8:	00c00804 	movi	r3,32
81135dec:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
81135df0:	e0bffb17 	ldw	r2,-20(fp)
81135df4:	10800044 	addi	r2,r2,1
81135df8:	e0bffb15 	stw	r2,-20(fp)
81135dfc:	e0bffb17 	ldw	r2,-20(fp)
81135e00:	10800210 	cmplti	r2,r2,8
81135e04:	103fd81e 	bne	r2,zero,81135d68 <__reset+0xfb115d68>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
81135e08:	e0bffc17 	ldw	r2,-16(fp)
81135e0c:	e0fffd17 	ldw	r3,-12(fp)
81135e10:	1885883a 	add	r2,r3,r2
81135e14:	10800003 	ldbu	r2,0(r2)
81135e18:	10803fcc 	andi	r2,r2,255
81135e1c:	1080201c 	xori	r2,r2,128
81135e20:	10bfe004 	addi	r2,r2,-128
81135e24:	10800b98 	cmpnei	r2,r2,46
81135e28:	1000031e 	bne	r2,zero,81135e38 <convert_filename_to_name_extension+0xfc>
81135e2c:	e0bffc17 	ldw	r2,-16(fp)
81135e30:	10800044 	addi	r2,r2,1
81135e34:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
81135e38:	e03ffb15 	stw	zero,-20(fp)
81135e3c:	00001c06 	br	81135eb0 <convert_filename_to_name_extension+0x174>
    {
        if (filename[local] != 0)
81135e40:	e0bffc17 	ldw	r2,-16(fp)
81135e44:	e0fffd17 	ldw	r3,-12(fp)
81135e48:	1885883a 	add	r2,r3,r2
81135e4c:	10800003 	ldbu	r2,0(r2)
81135e50:	10803fcc 	andi	r2,r2,255
81135e54:	1080201c 	xori	r2,r2,128
81135e58:	10bfe004 	addi	r2,r2,-128
81135e5c:	10000c26 	beq	r2,zero,81135e90 <convert_filename_to_name_extension+0x154>
        {
            extension[counter] = filename[local];
81135e60:	e0bffb17 	ldw	r2,-20(fp)
81135e64:	e0ffff17 	ldw	r3,-4(fp)
81135e68:	1885883a 	add	r2,r3,r2
81135e6c:	e0fffc17 	ldw	r3,-16(fp)
81135e70:	e13ffd17 	ldw	r4,-12(fp)
81135e74:	20c7883a 	add	r3,r4,r3
81135e78:	18c00003 	ldbu	r3,0(r3)
81135e7c:	10c00005 	stb	r3,0(r2)
            local++;
81135e80:	e0bffc17 	ldw	r2,-16(fp)
81135e84:	10800044 	addi	r2,r2,1
81135e88:	e0bffc15 	stw	r2,-16(fp)
81135e8c:	00000506 	br	81135ea4 <convert_filename_to_name_extension+0x168>
        }
        else
        {
            extension[counter] = ' ';
81135e90:	e0bffb17 	ldw	r2,-20(fp)
81135e94:	e0ffff17 	ldw	r3,-4(fp)
81135e98:	1885883a 	add	r2,r3,r2
81135e9c:	00c00804 	movi	r3,32
81135ea0:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
81135ea4:	e0bffb17 	ldw	r2,-20(fp)
81135ea8:	10800044 	addi	r2,r2,1
81135eac:	e0bffb15 	stw	r2,-20(fp)
81135eb0:	e0bffb17 	ldw	r2,-20(fp)
81135eb4:	108000d0 	cmplti	r2,r2,3
81135eb8:	103fe11e 	bne	r2,zero,81135e40 <__reset+0xfb115e40>
        {
            extension[counter] = ' ';
        }
    }

}
81135ebc:	0001883a 	nop
81135ec0:	e037883a 	mov	sp,fp
81135ec4:	df000017 	ldw	fp,0(sp)
81135ec8:	dec00104 	addi	sp,sp,4
81135ecc:	f800283a 	ret

81135ed0 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
81135ed0:	defff504 	addi	sp,sp,-44
81135ed4:	de00012e 	bgeu	sp,et,81135edc <create_file+0xc>
81135ed8:	003b68fa 	trap	3
81135edc:	dfc00a15 	stw	ra,40(sp)
81135ee0:	df000915 	stw	fp,36(sp)
81135ee4:	df000904 	addi	fp,sp,36
81135ee8:	e13ffd15 	stw	r4,-12(fp)
81135eec:	e17ffe15 	stw	r5,-8(fp)
81135ef0:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
81135ef4:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
81135ef8:	e0bffc04 	addi	r2,fp,-16
81135efc:	1009883a 	mov	r4,r2
81135f00:	11358000 	call	81135800 <find_first_empty_cluster>
81135f04:	1000a026 	beq	r2,zero,81136188 <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
81135f08:	e0bfff17 	ldw	r2,-4(fp)
81135f0c:	10800a17 	ldw	r2,40(r2)
81135f10:	1000031e 	bne	r2,zero,81135f20 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
81135f14:	1135c080 	call	81135c08 <find_first_empty_record_in_root_directory>
81135f18:	e0bff815 	stw	r2,-32(fp)
81135f1c:	00000606 	br	81135f38 <create_file+0x68>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
81135f20:	e0bfff17 	ldw	r2,-4(fp)
81135f24:	1080058b 	ldhu	r2,22(r2)
81135f28:	10bfffcc 	andi	r2,r2,65535
81135f2c:	1009883a 	mov	r4,r2
81135f30:	11359b40 	call	811359b4 <find_first_empty_record_in_a_subdirectory>
81135f34:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
81135f38:	e0bff817 	ldw	r2,-32(fp)
81135f3c:	10009216 	blt	r2,zero,81136188 <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
81135f40:	e13ffd17 	ldw	r4,-12(fp)
81135f44:	1134ae00 	call	81134ae0 <get_dir_divider_location>
81135f48:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
81135f4c:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
81135f50:	00000b06 	br	81135f80 <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
81135f54:	e0fffa17 	ldw	r3,-24(fp)
81135f58:	e0bff917 	ldw	r2,-28(fp)
81135f5c:	1885883a 	add	r2,r3,r2
81135f60:	10800044 	addi	r2,r2,1
81135f64:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
81135f68:	e0bffa17 	ldw	r2,-24(fp)
81135f6c:	e0fffd17 	ldw	r3,-12(fp)
81135f70:	1885883a 	add	r2,r3,r2
81135f74:	1009883a 	mov	r4,r2
81135f78:	1134ae00 	call	81134ae0 <get_dir_divider_location>
81135f7c:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
81135f80:	e0bff917 	ldw	r2,-28(fp)
81135f84:	00bff316 	blt	zero,r2,81135f54 <__reset+0xfb115f54>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
81135f88:	e0bffa17 	ldw	r2,-24(fp)
81135f8c:	e0fffd17 	ldw	r3,-12(fp)
81135f90:	1887883a 	add	r3,r3,r2
81135f94:	e13ffe17 	ldw	r4,-8(fp)
81135f98:	e0bffe17 	ldw	r2,-8(fp)
81135f9c:	10800204 	addi	r2,r2,8
81135fa0:	100d883a 	mov	r6,r2
81135fa4:	200b883a 	mov	r5,r4
81135fa8:	1809883a 	mov	r4,r3
81135fac:	1135d3c0 	call	81135d3c <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
81135fb0:	e0bffe17 	ldw	r2,-8(fp)
81135fb4:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
81135fb8:	e0bffe17 	ldw	r2,-8(fp)
81135fbc:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
81135fc0:	e0bffe17 	ldw	r2,-8(fp)
81135fc4:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
81135fc8:	e0bffe17 	ldw	r2,-8(fp)
81135fcc:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
81135fd0:	e0bffe17 	ldw	r2,-8(fp)
81135fd4:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
81135fd8:	e0bffe17 	ldw	r2,-8(fp)
81135fdc:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
81135fe0:	e0bffc17 	ldw	r2,-16(fp)
81135fe4:	1007883a 	mov	r3,r2
81135fe8:	e0bffe17 	ldw	r2,-8(fp)
81135fec:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
81135ff0:	e0bffe17 	ldw	r2,-8(fp)
81135ff4:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
81135ff8:	e0fffc17 	ldw	r3,-16(fp)
81135ffc:	e0bffe17 	ldw	r2,-8(fp)
81136000:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
81136004:	e0bffe17 	ldw	r2,-8(fp)
81136008:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
8113600c:	e0bffe17 	ldw	r2,-8(fp)
81136010:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
81136014:	e0bff817 	ldw	r2,-32(fp)
81136018:	10ffffcc 	andi	r3,r2,65535
8113601c:	e0bffe17 	ldw	r2,-8(fp)
81136020:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
81136024:	e0bff817 	ldw	r2,-32(fp)
81136028:	1004d43a 	srli	r2,r2,16
8113602c:	1000010e 	bge	r2,zero,81136034 <create_file+0x164>
81136030:	108003c4 	addi	r2,r2,15
81136034:	1005d13a 	srai	r2,r2,4
81136038:	1007883a 	mov	r3,r2
8113603c:	e0bffe17 	ldw	r2,-8(fp)
81136040:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
81136044:	e0bff817 	ldw	r2,-32(fp)
81136048:	1004d43a 	srli	r2,r2,16
8113604c:	1007883a 	mov	r3,r2
81136050:	00a00034 	movhi	r2,32768
81136054:	108003c4 	addi	r2,r2,15
81136058:	1884703a 	and	r2,r3,r2
8113605c:	1000040e 	bge	r2,zero,81136070 <create_file+0x1a0>
81136060:	10bfffc4 	addi	r2,r2,-1
81136064:	00fffc04 	movi	r3,-16
81136068:	10c4b03a 	or	r2,r2,r3
8113606c:	10800044 	addi	r2,r2,1
81136070:	1004917a 	slli	r2,r2,5
81136074:	1007883a 	mov	r3,r2
81136078:	e0bffe17 	ldw	r2,-8(fp)
8113607c:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
81136080:	e0bfff17 	ldw	r2,-4(fp)
81136084:	1080058b 	ldhu	r2,22(r2)
81136088:	10ffffcc 	andi	r3,r2,65535
8113608c:	e0bffe17 	ldw	r2,-8(fp)
81136090:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
81136094:	e0bffe17 	ldw	r2,-8(fp)
81136098:	00c00044 	movi	r3,1
8113609c:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
811360a0:	e0bffe17 	ldw	r2,-8(fp)
811360a4:	00c00044 	movi	r3,1
811360a8:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
811360ac:	e0bffe17 	ldw	r2,-8(fp)
811360b0:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
811360b4:	1000071e 	bne	r2,zero,811360d4 <create_file+0x204>
811360b8:	00a04574 	movhi	r2,33045
811360bc:	1080a904 	addi	r2,r2,676
811360c0:	10c01317 	ldw	r3,76(r2)
811360c4:	e0bffe17 	ldw	r2,-8(fp)
811360c8:	10800b17 	ldw	r2,44(r2)
811360cc:	1885883a 	add	r2,r3,r2
811360d0:	00000f06 	br	81136110 <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
811360d4:	00a04574 	movhi	r2,33045
811360d8:	1080a904 	addi	r2,r2,676
811360dc:	10c01417 	ldw	r3,80(r2)
811360e0:	e0bffe17 	ldw	r2,-8(fp)
811360e4:	10800a17 	ldw	r2,40(r2)
811360e8:	113fff84 	addi	r4,r2,-2
811360ec:	00a04574 	movhi	r2,33045
811360f0:	1080a904 	addi	r2,r2,676
811360f4:	10800383 	ldbu	r2,14(r2)
811360f8:	10803fcc 	andi	r2,r2,255
811360fc:	2085383a 	mul	r2,r4,r2
81136100:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
81136104:	e0bffe17 	ldw	r2,-8(fp)
81136108:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
8113610c:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81136110:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
81136114:	e0bffb17 	ldw	r2,-20(fp)
81136118:	d0e09a17 	ldw	r3,-32152(gp)
8113611c:	180b883a 	mov	r5,r3
81136120:	1009883a 	mov	r4,r2
81136124:	11336dc0 	call	811336dc <Read_Sector_Data>
81136128:	10001726 	beq	r2,zero,81136188 <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
8113612c:	e0bffe17 	ldw	r2,-8(fp)
81136130:	10800c0b 	ldhu	r2,48(r2)
81136134:	10bfffcc 	andi	r2,r2,65535
81136138:	10a0001c 	xori	r2,r2,32768
8113613c:	10a00004 	addi	r2,r2,-32768
81136140:	e17ffe17 	ldw	r5,-8(fp)
81136144:	1009883a 	mov	r4,r2
81136148:	1133d900 	call	81133d90 <Write_File_Record_At_Offset>
8113614c:	10000e26 	beq	r2,zero,81136188 <create_file+0x2b8>
                {
                    Save_Modified_Sector();
81136150:	11336880 	call	81133688 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
81136154:	e0bffc17 	ldw	r2,-16(fp)
81136158:	01800044 	movi	r6,1
8113615c:	017fffc4 	movi	r5,-1
81136160:	1009883a 	mov	r4,r2
81136164:	11338780 	call	81133878 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
81136168:	e0bffc17 	ldw	r2,-16(fp)
8113616c:	000d883a 	mov	r6,zero
81136170:	017fffc4 	movi	r5,-1
81136174:	1009883a 	mov	r4,r2
81136178:	11338780 	call	81133878 <mark_cluster>
8113617c:	10000226 	beq	r2,zero,81136188 <create_file+0x2b8>
                    {
                        result = true;
81136180:	00800044 	movi	r2,1
81136184:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
81136188:	e0bff717 	ldw	r2,-36(fp)
}
8113618c:	e037883a 	mov	sp,fp
81136190:	dfc00117 	ldw	ra,4(sp)
81136194:	df000017 	ldw	fp,0(sp)
81136198:	dec00204 	addi	sp,sp,8
8113619c:	f800283a 	ret

811361a0 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
811361a0:	defffb04 	addi	sp,sp,-20
811361a4:	de00012e 	bgeu	sp,et,811361ac <copy_file_record_name_to_string+0xc>
811361a8:	003b68fa 	trap	3
811361ac:	df000415 	stw	fp,16(sp)
811361b0:	df000404 	addi	fp,sp,16
811361b4:	e13ffe15 	stw	r4,-8(fp)
811361b8:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
811361bc:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
811361c0:	e03ffc15 	stw	zero,-16(fp)
811361c4:	00001506 	br	8113621c <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
811361c8:	e0fffe17 	ldw	r3,-8(fp)
811361cc:	e0bffc17 	ldw	r2,-16(fp)
811361d0:	1885883a 	add	r2,r3,r2
811361d4:	10800003 	ldbu	r2,0(r2)
811361d8:	10803fcc 	andi	r2,r2,255
811361dc:	10800820 	cmpeqi	r2,r2,32
811361e0:	10000b1e 	bne	r2,zero,81136210 <copy_file_record_name_to_string+0x70>
		{
			file_name[flength] = file_record->name[index];
811361e4:	e0bffd17 	ldw	r2,-12(fp)
811361e8:	e0ffff17 	ldw	r3,-4(fp)
811361ec:	1885883a 	add	r2,r3,r2
811361f0:	e13ffe17 	ldw	r4,-8(fp)
811361f4:	e0fffc17 	ldw	r3,-16(fp)
811361f8:	20c7883a 	add	r3,r4,r3
811361fc:	18c00003 	ldbu	r3,0(r3)
81136200:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
81136204:	e0bffd17 	ldw	r2,-12(fp)
81136208:	10800044 	addi	r2,r2,1
8113620c:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81136210:	e0bffc17 	ldw	r2,-16(fp)
81136214:	10800044 	addi	r2,r2,1
81136218:	e0bffc15 	stw	r2,-16(fp)
8113621c:	e0bffc17 	ldw	r2,-16(fp)
81136220:	10800210 	cmplti	r2,r2,8
81136224:	103fe81e 	bne	r2,zero,811361c8 <__reset+0xfb1161c8>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
81136228:	e0bffe17 	ldw	r2,-8(fp)
8113622c:	10800203 	ldbu	r2,8(r2)
81136230:	10803fcc 	andi	r2,r2,255
81136234:	10800820 	cmpeqi	r2,r2,32
81136238:	1000241e 	bne	r2,zero,811362cc <copy_file_record_name_to_string+0x12c>
	{
		file_name[flength] = '.';
8113623c:	e0bffd17 	ldw	r2,-12(fp)
81136240:	e0ffff17 	ldw	r3,-4(fp)
81136244:	1885883a 	add	r2,r3,r2
81136248:	00c00b84 	movi	r3,46
8113624c:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
81136250:	e0bffd17 	ldw	r2,-12(fp)
81136254:	10800044 	addi	r2,r2,1
81136258:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
8113625c:	e03ffc15 	stw	zero,-16(fp)
81136260:	00001706 	br	811362c0 <copy_file_record_name_to_string+0x120>
		{
			if (file_record->extension[index] != ' ')
81136264:	e0fffe17 	ldw	r3,-8(fp)
81136268:	e0bffc17 	ldw	r2,-16(fp)
8113626c:	1885883a 	add	r2,r3,r2
81136270:	10800204 	addi	r2,r2,8
81136274:	10800003 	ldbu	r2,0(r2)
81136278:	10803fcc 	andi	r2,r2,255
8113627c:	10800820 	cmpeqi	r2,r2,32
81136280:	10000c1e 	bne	r2,zero,811362b4 <copy_file_record_name_to_string+0x114>
			{
				file_name[flength] = file_record->extension[index];
81136284:	e0bffd17 	ldw	r2,-12(fp)
81136288:	e0ffff17 	ldw	r3,-4(fp)
8113628c:	1885883a 	add	r2,r3,r2
81136290:	e13ffe17 	ldw	r4,-8(fp)
81136294:	e0fffc17 	ldw	r3,-16(fp)
81136298:	20c7883a 	add	r3,r4,r3
8113629c:	18c00204 	addi	r3,r3,8
811362a0:	18c00003 	ldbu	r3,0(r3)
811362a4:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
811362a8:	e0bffd17 	ldw	r2,-12(fp)
811362ac:	10800044 	addi	r2,r2,1
811362b0:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
811362b4:	e0bffc17 	ldw	r2,-16(fp)
811362b8:	10800044 	addi	r2,r2,1
811362bc:	e0bffc15 	stw	r2,-16(fp)
811362c0:	e0bffc17 	ldw	r2,-16(fp)
811362c4:	108000d0 	cmplti	r2,r2,3
811362c8:	103fe61e 	bne	r2,zero,81136264 <__reset+0xfb116264>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
811362cc:	e0bffd17 	ldw	r2,-12(fp)
811362d0:	e0ffff17 	ldw	r3,-4(fp)
811362d4:	1885883a 	add	r2,r3,r2
811362d8:	10000005 	stb	zero,0(r2)
}
811362dc:	0001883a 	nop
811362e0:	e037883a 	mov	sp,fp
811362e4:	df000017 	ldw	fp,0(sp)
811362e8:	dec00104 	addi	sp,sp,4
811362ec:	f800283a 	ret

811362f0 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
811362f0:	defffc04 	addi	sp,sp,-16
811362f4:	de00012e 	bgeu	sp,et,811362fc <alt_up_sd_card_open_dev+0xc>
811362f8:	003b68fa 	trap	3
811362fc:	dfc00315 	stw	ra,12(sp)
81136300:	df000215 	stw	fp,8(sp)
81136304:	df000204 	addi	fp,sp,8
81136308:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
8113630c:	d1600d04 	addi	r5,gp,-32716
81136310:	e13fff17 	ldw	r4,-4(fp)
81136314:	113b87c0 	call	8113b87c <alt_find_dev>
81136318:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
8113631c:	e0bffe17 	ldw	r2,-8(fp)
81136320:	10001e26 	beq	r2,zero,8113639c <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
81136324:	e0bffe17 	ldw	r2,-8(fp)
81136328:	10800a17 	ldw	r2,40(r2)
8113632c:	10808d04 	addi	r2,r2,564
81136330:	d0a09415 	stw	r2,-32176(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
81136334:	e0bffe17 	ldw	r2,-8(fp)
81136338:	10800a17 	ldw	r2,40(r2)
8113633c:	10808904 	addi	r2,r2,548
81136340:	d0a09515 	stw	r2,-32172(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
81136344:	e0bffe17 	ldw	r2,-8(fp)
81136348:	10800a17 	ldw	r2,40(r2)
8113634c:	10808404 	addi	r2,r2,528
81136350:	d0a09615 	stw	r2,-32168(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
81136354:	e0bffe17 	ldw	r2,-8(fp)
81136358:	10800a17 	ldw	r2,40(r2)
8113635c:	10808c04 	addi	r2,r2,560
81136360:	d0a09715 	stw	r2,-32164(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
81136364:	e0bffe17 	ldw	r2,-8(fp)
81136368:	10800a17 	ldw	r2,40(r2)
8113636c:	10808b04 	addi	r2,r2,556
81136370:	d0a09815 	stw	r2,-32160(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
81136374:	e0bffe17 	ldw	r2,-8(fp)
81136378:	10800a17 	ldw	r2,40(r2)
8113637c:	d0a09915 	stw	r2,-32156(gp)
		device_pointer = dev;
81136380:	e0bffe17 	ldw	r2,-8(fp)
81136384:	d0a09c15 	stw	r2,-32144(gp)
		initialized = false;
81136388:	d0209215 	stw	zero,-32184(gp)
		is_sd_card_formated_as_FAT16 = false;
8113638c:	d0209315 	stw	zero,-32180(gp)
		search_data.valid = false;
81136390:	00a04574 	movhi	r2,33045
81136394:	1080a404 	addi	r2,r2,656
81136398:	10000415 	stw	zero,16(r2)
	}
	return dev;
8113639c:	e0bffe17 	ldw	r2,-8(fp)
}
811363a0:	e037883a 	mov	sp,fp
811363a4:	dfc00117 	ldw	ra,4(sp)
811363a8:	df000017 	ldw	fp,0(sp)
811363ac:	dec00204 	addi	sp,sp,8
811363b0:	f800283a 	ret

811363b4 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
811363b4:	defffd04 	addi	sp,sp,-12
811363b8:	de00012e 	bgeu	sp,et,811363c0 <alt_up_sd_card_is_Present+0xc>
811363bc:	003b68fa 	trap	3
811363c0:	df000215 	stw	fp,8(sp)
811363c4:	df000204 	addi	fp,sp,8
    bool result = false;
811363c8:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
811363cc:	d0a09c17 	ldw	r2,-32144(gp)
811363d0:	10000826 	beq	r2,zero,811363f4 <alt_up_sd_card_is_Present+0x40>
811363d4:	d0a09417 	ldw	r2,-32176(gp)
811363d8:	1080002b 	ldhuio	r2,0(r2)
811363dc:	10bfffcc 	andi	r2,r2,65535
811363e0:	1080008c 	andi	r2,r2,2
811363e4:	10000326 	beq	r2,zero,811363f4 <alt_up_sd_card_is_Present+0x40>
    {
        result = true;
811363e8:	00800044 	movi	r2,1
811363ec:	e0bffe15 	stw	r2,-8(fp)
811363f0:	00001e06 	br	8113646c <alt_up_sd_card_is_Present+0xb8>
    }
	else if (initialized == true)
811363f4:	d0a09217 	ldw	r2,-32184(gp)
811363f8:	10800058 	cmpnei	r2,r2,1
811363fc:	10001b1e 	bne	r2,zero,8113646c <alt_up_sd_card_is_Present+0xb8>
	{
		int index;

		initialized = false;
81136400:	d0209215 	stw	zero,-32184(gp)
		search_data.valid = false;
81136404:	00a04574 	movhi	r2,33045
81136408:	1080a404 	addi	r2,r2,656
8113640c:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
81136410:	d0209315 	stw	zero,-32180(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
81136414:	e03fff15 	stw	zero,-4(fp)
81136418:	00001106 	br	81136460 <alt_up_sd_card_is_Present+0xac>
		{
			active_files[index].in_use = false;
8113641c:	00a04574 	movhi	r2,33045
81136420:	1080be04 	addi	r2,r2,760
81136424:	e0ffff17 	ldw	r3,-4(fp)
81136428:	180691ba 	slli	r3,r3,6
8113642c:	10c5883a 	add	r2,r2,r3
81136430:	10800f04 	addi	r2,r2,60
81136434:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
81136438:	00a04574 	movhi	r2,33045
8113643c:	1080be04 	addi	r2,r2,760
81136440:	e0ffff17 	ldw	r3,-4(fp)
81136444:	180691ba 	slli	r3,r3,6
81136448:	10c5883a 	add	r2,r2,r3
8113644c:	10800e04 	addi	r2,r2,56
81136450:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
81136454:	e0bfff17 	ldw	r2,-4(fp)
81136458:	10800044 	addi	r2,r2,1
8113645c:	e0bfff15 	stw	r2,-4(fp)
81136460:	e0bfff17 	ldw	r2,-4(fp)
81136464:	10800510 	cmplti	r2,r2,20
81136468:	103fec1e 	bne	r2,zero,8113641c <__reset+0xfb11641c>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
8113646c:	e0bffe17 	ldw	r2,-8(fp)
}
81136470:	e037883a 	mov	sp,fp
81136474:	df000017 	ldw	fp,0(sp)
81136478:	dec00104 	addi	sp,sp,4
8113647c:	f800283a 	ret

81136480 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
81136480:	defffd04 	addi	sp,sp,-12
81136484:	de00012e 	bgeu	sp,et,8113648c <alt_up_sd_card_is_FAT16+0xc>
81136488:	003b68fa 	trap	3
8113648c:	dfc00215 	stw	ra,8(sp)
81136490:	df000115 	stw	fp,4(sp)
81136494:	df000104 	addi	fp,sp,4
	bool result = false;
81136498:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
8113649c:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
811364a0:	10000c26 	beq	r2,zero,811364d4 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
811364a4:	d0a09217 	ldw	r2,-32184(gp)
811364a8:	1000071e 	bne	r2,zero,811364c8 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
811364ac:	11346ac0 	call	811346ac <Look_for_FAT16>
811364b0:	d0a09315 	stw	r2,-32180(gp)
			initialized = is_sd_card_formated_as_FAT16;
811364b4:	d0a09317 	ldw	r2,-32180(gp)
811364b8:	d0a09215 	stw	r2,-32184(gp)
			search_data.valid = false;
811364bc:	00a04574 	movhi	r2,33045
811364c0:	1080a404 	addi	r2,r2,656
811364c4:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
811364c8:	d0a09317 	ldw	r2,-32180(gp)
811364cc:	e0bfff15 	stw	r2,-4(fp)
811364d0:	00000206 	br	811364dc <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
811364d4:	d0209215 	stw	zero,-32184(gp)
		is_sd_card_formated_as_FAT16 = false;
811364d8:	d0209315 	stw	zero,-32180(gp)
	}

	return result;
811364dc:	e0bfff17 	ldw	r2,-4(fp)
}
811364e0:	e037883a 	mov	sp,fp
811364e4:	dfc00117 	ldw	ra,4(sp)
811364e8:	df000017 	ldw	fp,0(sp)
811364ec:	dec00204 	addi	sp,sp,8
811364f0:	f800283a 	ret

811364f4 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
811364f4:	deffea04 	addi	sp,sp,-88
811364f8:	de00012e 	bgeu	sp,et,81136500 <alt_up_sd_card_find_first+0xc>
811364fc:	003b68fa 	trap	3
81136500:	dfc01515 	stw	ra,84(sp)
81136504:	df001415 	stw	fp,80(sp)
81136508:	df001404 	addi	fp,sp,80
8113650c:	e13ffe15 	stw	r4,-8(fp)
81136510:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
81136514:	00800084 	movi	r2,2
81136518:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8113651c:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
81136520:	10002426 	beq	r2,zero,811365b4 <alt_up_sd_card_find_first+0xc0>
81136524:	d0a09317 	ldw	r2,-32180(gp)
81136528:	10002226 	beq	r2,zero,811365b4 <alt_up_sd_card_find_first+0xc0>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
8113652c:	e0ffee04 	addi	r3,fp,-72
81136530:	e0bfed04 	addi	r2,fp,-76
81136534:	180d883a 	mov	r6,r3
81136538:	100b883a 	mov	r5,r2
8113653c:	e13ffe17 	ldw	r4,-8(fp)
81136540:	1134e440 	call	81134e44 <get_home_directory_cluster_for_file>
81136544:	10001926 	beq	r2,zero,811365ac <alt_up_sd_card_find_first+0xb8>
		{
			search_data.directory_root_cluster = home_directory_cluster;
81136548:	e0bfed17 	ldw	r2,-76(fp)
8113654c:	1007883a 	mov	r3,r2
81136550:	00a04574 	movhi	r2,33045
81136554:	1080a404 	addi	r2,r2,656
81136558:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
8113655c:	e0bfed17 	ldw	r2,-76(fp)
81136560:	1007883a 	mov	r3,r2
81136564:	00a04574 	movhi	r2,33045
81136568:	1080a404 	addi	r2,r2,656
8113656c:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
81136570:	00a04574 	movhi	r2,33045
81136574:	1080a404 	addi	r2,r2,656
81136578:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
8113657c:	00a04574 	movhi	r2,33045
81136580:	1080a404 	addi	r2,r2,656
81136584:	00ffffc4 	movi	r3,-1
81136588:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
8113658c:	00a04574 	movhi	r2,33045
81136590:	1080a404 	addi	r2,r2,656
81136594:	00c00044 	movi	r3,1
81136598:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
8113659c:	e13fff17 	ldw	r4,-4(fp)
811365a0:	11365cc0 	call	811365cc <alt_up_sd_card_find_next>
811365a4:	e0bfec0d 	sth	r2,-80(fp)
811365a8:	00000206 	br	811365b4 <alt_up_sd_card_find_first+0xc0>
		}
		else
		{
			result = 1;
811365ac:	00800044 	movi	r2,1
811365b0:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
811365b4:	e0bfec0b 	ldhu	r2,-80(fp)
}
811365b8:	e037883a 	mov	sp,fp
811365bc:	dfc00117 	ldw	ra,4(sp)
811365c0:	df000017 	ldw	fp,0(sp)
811365c4:	dec00204 	addi	sp,sp,8
811365c8:	f800283a 	ret

811365cc <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
811365cc:	deffe404 	addi	sp,sp,-112
811365d0:	de00012e 	bgeu	sp,et,811365d8 <alt_up_sd_card_find_next+0xc>
811365d4:	003b68fa 	trap	3
811365d8:	dfc01b15 	stw	ra,108(sp)
811365dc:	df001a15 	stw	fp,104(sp)
811365e0:	df001a04 	addi	fp,sp,104
811365e4:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
811365e8:	00800084 	movi	r2,2
811365ec:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811365f0:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
811365f4:	1000df26 	beq	r2,zero,81136974 <alt_up_sd_card_find_next+0x3a8>
811365f8:	d0a09317 	ldw	r2,-32180(gp)
811365fc:	1000dd26 	beq	r2,zero,81136974 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
81136600:	00a04574 	movhi	r2,33045
81136604:	1080a404 	addi	r2,r2,656
81136608:	10800417 	ldw	r2,16(r2)
8113660c:	1000d726 	beq	r2,zero,8113696c <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
81136610:	00a04574 	movhi	r2,33045
81136614:	1080a404 	addi	r2,r2,656
81136618:	10800117 	ldw	r2,4(r2)
8113661c:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
81136620:	e0bfe717 	ldw	r2,-100(fp)
81136624:	1000561e 	bne	r2,zero,81136780 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81136628:	00a04574 	movhi	r2,33045
8113662c:	1080a904 	addi	r2,r2,676
81136630:	1080050b 	ldhu	r2,20(r2)
81136634:	10bfffcc 	andi	r2,r2,65535
81136638:	1006917a 	slli	r3,r2,5
8113663c:	00a04574 	movhi	r2,33045
81136640:	1080a904 	addi	r2,r2,676
81136644:	1080030b 	ldhu	r2,12(r2)
81136648:	10bfffcc 	andi	r2,r2,65535
8113664c:	1885283a 	div	r2,r3,r2
81136650:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
81136654:	00a04574 	movhi	r2,33045
81136658:	1080a404 	addi	r2,r2,656
8113665c:	10800217 	ldw	r2,8(r2)
81136660:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
81136664:	00a04574 	movhi	r2,33045
81136668:	1080a404 	addi	r2,r2,656
8113666c:	1080030b 	ldhu	r2,12(r2)
81136670:	10bfffcc 	andi	r2,r2,65535
81136674:	10a0001c 	xori	r2,r2,32768
81136678:	10a00004 	addi	r2,r2,-32768
8113667c:	10800044 	addi	r2,r2,1
81136680:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81136684:	00003606 	br	81136760 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81136688:	00a04574 	movhi	r2,33045
8113668c:	1080a904 	addi	r2,r2,676
81136690:	10c01317 	ldw	r3,76(r2)
81136694:	e0bfe817 	ldw	r2,-96(fp)
81136698:	1885883a 	add	r2,r3,r2
8113669c:	1007883a 	mov	r3,r2
811366a0:	d0a09a17 	ldw	r2,-32152(gp)
811366a4:	100b883a 	mov	r5,r2
811366a8:	1809883a 	mov	r4,r3
811366ac:	11336dc0 	call	811336dc <Read_Sector_Data>
811366b0:	10002f26 	beq	r2,zero,81136770 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
811366b4:	00002306 	br	81136744 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
811366b8:	e0bfe917 	ldw	r2,-92(fp)
811366bc:	1004917a 	slli	r2,r2,5
811366c0:	e13fe817 	ldw	r4,-96(fp)
811366c4:	e0ffef04 	addi	r3,fp,-68
811366c8:	200f883a 	mov	r7,r4
811366cc:	000d883a 	mov	r6,zero
811366d0:	180b883a 	mov	r5,r3
811366d4:	1009883a 	mov	r4,r2
811366d8:	1133b0c0 	call	81133b0c <Read_File_Record_At_Offset>
811366dc:	10001626 	beq	r2,zero,81136738 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
811366e0:	e0bfef03 	ldbu	r2,-68(fp)
811366e4:	10803fcc 	andi	r2,r2,255
811366e8:	10001326 	beq	r2,zero,81136738 <alt_up_sd_card_find_next+0x16c>
811366ec:	e0bfef03 	ldbu	r2,-68(fp)
811366f0:	10803fcc 	andi	r2,r2,255
811366f4:	10803960 	cmpeqi	r2,r2,229
811366f8:	10000f1e 	bne	r2,zero,81136738 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
811366fc:	e0bfe917 	ldw	r2,-92(fp)
81136700:	1007883a 	mov	r3,r2
81136704:	00a04574 	movhi	r2,33045
81136708:	1080a404 	addi	r2,r2,656
8113670c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
81136710:	e0ffe817 	ldw	r3,-96(fp)
81136714:	00a04574 	movhi	r2,33045
81136718:	1080a404 	addi	r2,r2,656
8113671c:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
81136720:	e0bfef04 	addi	r2,fp,-68
81136724:	e17fff17 	ldw	r5,-4(fp)
81136728:	1009883a 	mov	r4,r2
8113672c:	11361a00 	call	811361a0 <copy_file_record_name_to_string>
									return 0;
81136730:	0005883a 	mov	r2,zero
81136734:	00009006 	br	81136978 <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81136738:	e0bfe917 	ldw	r2,-92(fp)
8113673c:	10800044 	addi	r2,r2,1
81136740:	e0bfe915 	stw	r2,-92(fp)
81136744:	e0bfe917 	ldw	r2,-92(fp)
81136748:	10800410 	cmplti	r2,r2,16
8113674c:	103fda1e 	bne	r2,zero,811366b8 <__reset+0xfb1166b8>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
81136750:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81136754:	e0bfe817 	ldw	r2,-96(fp)
81136758:	10800044 	addi	r2,r2,1
8113675c:	e0bfe815 	stw	r2,-96(fp)
81136760:	e0ffe817 	ldw	r3,-96(fp)
81136764:	e0bfec17 	ldw	r2,-80(fp)
81136768:	18bfc716 	blt	r3,r2,81136688 <__reset+0xfb116688>
8113676c:	00000106 	br	81136774 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
81136770:	0001883a 	nop
					}
				}
				result = -1;
81136774:	00bfffc4 	movi	r2,-1
81136778:	e0bfe60d 	sth	r2,-104(fp)
8113677c:	00007d06 	br	81136974 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
81136780:	00a04574 	movhi	r2,33045
81136784:	1080a404 	addi	r2,r2,656
81136788:	1080030b 	ldhu	r2,12(r2)
8113678c:	10bfffcc 	andi	r2,r2,65535
81136790:	10a0001c 	xori	r2,r2,32768
81136794:	10a00004 	addi	r2,r2,-32768
81136798:	10800044 	addi	r2,r2,1
8113679c:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811367a0:	e0bfe717 	ldw	r2,-100(fp)
811367a4:	10ffff84 	addi	r3,r2,-2
811367a8:	00a04574 	movhi	r2,33045
811367ac:	1080a904 	addi	r2,r2,676
811367b0:	10800383 	ldbu	r2,14(r2)
811367b4:	10803fcc 	andi	r2,r2,255
811367b8:	1885383a 	mul	r2,r3,r2
811367bc:	1007883a 	mov	r3,r2
811367c0:	00a04574 	movhi	r2,33045
811367c4:	1080a904 	addi	r2,r2,676
811367c8:	10801417 	ldw	r2,80(r2)
811367cc:	1885883a 	add	r2,r3,r2
811367d0:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
811367d4:	00a04574 	movhi	r2,33045
811367d8:	1080a404 	addi	r2,r2,656
811367dc:	10800217 	ldw	r2,8(r2)
811367e0:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811367e4:	00003806 	br	811368c8 <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811367e8:	e0ffeb17 	ldw	r3,-84(fp)
811367ec:	e0bfed17 	ldw	r2,-76(fp)
811367f0:	1885883a 	add	r2,r3,r2
811367f4:	d0e09a17 	ldw	r3,-32152(gp)
811367f8:	180b883a 	mov	r5,r3
811367fc:	1009883a 	mov	r4,r2
81136800:	11336dc0 	call	811336dc <Read_Sector_Data>
81136804:	10003726 	beq	r2,zero,811368e4 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
81136808:	00002806 	br	811368ac <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
8113680c:	e0bfea17 	ldw	r2,-88(fp)
81136810:	1004917a 	slli	r2,r2,5
81136814:	e13fe717 	ldw	r4,-100(fp)
81136818:	e17feb17 	ldw	r5,-84(fp)
8113681c:	e0ffef04 	addi	r3,fp,-68
81136820:	280f883a 	mov	r7,r5
81136824:	200d883a 	mov	r6,r4
81136828:	180b883a 	mov	r5,r3
8113682c:	1009883a 	mov	r4,r2
81136830:	1133b0c0 	call	81133b0c <Read_File_Record_At_Offset>
81136834:	10001a26 	beq	r2,zero,811368a0 <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81136838:	e0bfef03 	ldbu	r2,-68(fp)
8113683c:	10803fcc 	andi	r2,r2,255
81136840:	10001726 	beq	r2,zero,811368a0 <alt_up_sd_card_find_next+0x2d4>
81136844:	e0bfef03 	ldbu	r2,-68(fp)
81136848:	10803fcc 	andi	r2,r2,255
8113684c:	10803960 	cmpeqi	r2,r2,229
81136850:	1000131e 	bne	r2,zero,811368a0 <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
81136854:	e0ffe717 	ldw	r3,-100(fp)
81136858:	00a04574 	movhi	r2,33045
8113685c:	1080a404 	addi	r2,r2,656
81136860:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
81136864:	e0bfea17 	ldw	r2,-88(fp)
81136868:	1007883a 	mov	r3,r2
8113686c:	00a04574 	movhi	r2,33045
81136870:	1080a404 	addi	r2,r2,656
81136874:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
81136878:	e0ffeb17 	ldw	r3,-84(fp)
8113687c:	00a04574 	movhi	r2,33045
81136880:	1080a404 	addi	r2,r2,656
81136884:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
81136888:	e0bfef04 	addi	r2,fp,-68
8113688c:	e17fff17 	ldw	r5,-4(fp)
81136890:	1009883a 	mov	r4,r2
81136894:	11361a00 	call	811361a0 <copy_file_record_name_to_string>
										return 0;
81136898:	0005883a 	mov	r2,zero
8113689c:	00003606 	br	81136978 <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
811368a0:	e0bfea17 	ldw	r2,-88(fp)
811368a4:	10800044 	addi	r2,r2,1
811368a8:	e0bfea15 	stw	r2,-88(fp)
811368ac:	e0bfea17 	ldw	r2,-88(fp)
811368b0:	10800410 	cmplti	r2,r2,16
811368b4:	103fd51e 	bne	r2,zero,8113680c <__reset+0xfb11680c>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
811368b8:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811368bc:	e0bfeb17 	ldw	r2,-84(fp)
811368c0:	10800044 	addi	r2,r2,1
811368c4:	e0bfeb15 	stw	r2,-84(fp)
811368c8:	00a04574 	movhi	r2,33045
811368cc:	1080a904 	addi	r2,r2,676
811368d0:	10800383 	ldbu	r2,14(r2)
811368d4:	10803fcc 	andi	r2,r2,255
811368d8:	e0ffeb17 	ldw	r3,-84(fp)
811368dc:	18bfc216 	blt	r3,r2,811367e8 <__reset+0xfb1167e8>
811368e0:	00000106 	br	811368e8 <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
811368e4:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
811368e8:	00a04574 	movhi	r2,33045
811368ec:	1080a904 	addi	r2,r2,676
811368f0:	10800383 	ldbu	r2,14(r2)
811368f4:	10803fcc 	andi	r2,r2,255
811368f8:	e0ffeb17 	ldw	r3,-84(fp)
811368fc:	18801716 	blt	r3,r2,8113695c <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
81136900:	e0bfe717 	ldw	r2,-100(fp)
81136904:	e0ffee04 	addi	r3,fp,-72
81136908:	180b883a 	mov	r5,r3
8113690c:	1009883a 	mov	r4,r2
81136910:	11337bc0 	call	811337bc <get_cluster_flag>
81136914:	10000f26 	beq	r2,zero,81136954 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81136918:	e0bfee0b 	ldhu	r2,-72(fp)
8113691c:	10bfffcc 	andi	r2,r2,65535
81136920:	10fffe0c 	andi	r3,r2,65528
81136924:	00bffe14 	movui	r2,65528
81136928:	1880051e 	bne	r3,r2,81136940 <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
8113692c:	00bfffc4 	movi	r2,-1
81136930:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
81136934:	00a04574 	movhi	r2,33045
81136938:	1080a404 	addi	r2,r2,656
8113693c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
81136940:	e0bfee0b 	ldhu	r2,-72(fp)
81136944:	10bfffcc 	andi	r2,r2,65535
81136948:	10bffe0c 	andi	r2,r2,65528
8113694c:	e0bfe715 	stw	r2,-100(fp)
81136950:	00000206 	br	8113695c <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
81136954:	00bfffc4 	movi	r2,-1
81136958:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
8113695c:	e0bfe717 	ldw	r2,-100(fp)
81136960:	00fffdd4 	movui	r3,65527
81136964:	18bf8e0e 	bge	r3,r2,811367a0 <__reset+0xfb1167a0>
81136968:	00000206 	br	81136974 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
8113696c:	008000c4 	movi	r2,3
81136970:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
81136974:	e0bfe60b 	ldhu	r2,-104(fp)
}
81136978:	e037883a 	mov	sp,fp
8113697c:	dfc00117 	ldw	ra,4(sp)
81136980:	df000017 	ldw	fp,0(sp)
81136984:	dec00204 	addi	sp,sp,8
81136988:	f800283a 	ret

8113698c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
8113698c:	deffe904 	addi	sp,sp,-92
81136990:	de00012e 	bgeu	sp,et,81136998 <alt_up_sd_card_fopen+0xc>
81136994:	003b68fa 	trap	3
81136998:	dfc01615 	stw	ra,88(sp)
8113699c:	df001515 	stw	fp,84(sp)
811369a0:	df001504 	addi	fp,sp,84
811369a4:	e13ffe15 	stw	r4,-8(fp)
811369a8:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
811369ac:	00bfffc4 	movi	r2,-1
811369b0:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811369b4:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
811369b8:	1000cf26 	beq	r2,zero,81136cf8 <alt_up_sd_card_fopen+0x36c>
811369bc:	d0a09317 	ldw	r2,-32180(gp)
811369c0:	1000cd26 	beq	r2,zero,81136cf8 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
811369c4:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
811369c8:	e13ffe17 	ldw	r4,-8(fp)
811369cc:	11347a00 	call	811347a0 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
811369d0:	e13ffe17 	ldw	r4,-8(fp)
811369d4:	113486c0 	call	8113486c <check_file_name_for_FAT16_compliance>
811369d8:	1000c726 	beq	r2,zero,81136cf8 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
811369dc:	e0ffee04 	addi	r3,fp,-72
811369e0:	e0bfed04 	addi	r2,fp,-76
811369e4:	180d883a 	mov	r6,r3
811369e8:	100b883a 	mov	r5,r2
811369ec:	e13ffe17 	ldw	r4,-8(fp)
811369f0:	1134e440 	call	81134e44 <get_home_directory_cluster_for_file>
811369f4:	1000021e 	bne	r2,zero,81136a00 <alt_up_sd_card_fopen+0x74>
            {
                return file_record_index;
811369f8:	e0bfeb0b 	ldhu	r2,-84(fp)
811369fc:	0000bf06 	br	81136cfc <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81136a00:	e03fec15 	stw	zero,-80(fp)
81136a04:	00000e06 	br	81136a40 <alt_up_sd_card_fopen+0xb4>
    		{
    			if (active_files[index].in_use == false)
81136a08:	00a04574 	movhi	r2,33045
81136a0c:	1080be04 	addi	r2,r2,760
81136a10:	e0ffec17 	ldw	r3,-80(fp)
81136a14:	180691ba 	slli	r3,r3,6
81136a18:	10c5883a 	add	r2,r2,r3
81136a1c:	10800f04 	addi	r2,r2,60
81136a20:	10800017 	ldw	r2,0(r2)
81136a24:	1000031e 	bne	r2,zero,81136a34 <alt_up_sd_card_fopen+0xa8>
    			{
    				file_record_index = index;
81136a28:	e0bfec17 	ldw	r2,-80(fp)
81136a2c:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
81136a30:	00000606 	br	81136a4c <alt_up_sd_card_fopen+0xc0>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81136a34:	e0bfec17 	ldw	r2,-80(fp)
81136a38:	10800044 	addi	r2,r2,1
81136a3c:	e0bfec15 	stw	r2,-80(fp)
81136a40:	e0bfec17 	ldw	r2,-80(fp)
81136a44:	10800510 	cmplti	r2,r2,20
81136a48:	103fef1e 	bne	r2,zero,81136a08 <__reset+0xfb116a08>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
81136a4c:	e0bfeb0f 	ldh	r2,-84(fp)
81136a50:	1000a916 	blt	r2,zero,81136cf8 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
81136a54:	e0bfed17 	ldw	r2,-76(fp)
81136a58:	1009883a 	mov	r4,r2
81136a5c:	e0bfeb0f 	ldh	r2,-84(fp)
81136a60:	100691ba 	slli	r3,r2,6
81136a64:	00a04574 	movhi	r2,33045
81136a68:	1080be04 	addi	r2,r2,760
81136a6c:	1885883a 	add	r2,r3,r2
81136a70:	100d883a 	mov	r6,r2
81136a74:	e17ffe17 	ldw	r5,-8(fp)
81136a78:	11353840 	call	81135384 <find_file_in_directory>
81136a7c:	10007b26 	beq	r2,zero,81136c6c <alt_up_sd_card_fopen+0x2e0>
                {
                    if (create)
81136a80:	e0bfff17 	ldw	r2,-4(fp)
81136a84:	10000226 	beq	r2,zero,81136a90 <alt_up_sd_card_fopen+0x104>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
81136a88:	00bfffc4 	movi	r2,-1
81136a8c:	00009b06 	br	81136cfc <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
81136a90:	e13feb0f 	ldh	r4,-84(fp)
81136a94:	e0ffeb0f 	ldh	r3,-84(fp)
81136a98:	00a04574 	movhi	r2,33045
81136a9c:	1080be04 	addi	r2,r2,760
81136aa0:	180691ba 	slli	r3,r3,6
81136aa4:	10c5883a 	add	r2,r2,r3
81136aa8:	10800584 	addi	r2,r2,22
81136aac:	1080000b 	ldhu	r2,0(r2)
81136ab0:	10ffffcc 	andi	r3,r2,65535
81136ab4:	00a04574 	movhi	r2,33045
81136ab8:	1080be04 	addi	r2,r2,760
81136abc:	200891ba 	slli	r4,r4,6
81136ac0:	1105883a 	add	r2,r2,r4
81136ac4:	10800704 	addi	r2,r2,28
81136ac8:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
81136acc:	e0ffeb0f 	ldh	r3,-84(fp)
81136ad0:	00a04574 	movhi	r2,33045
81136ad4:	1080be04 	addi	r2,r2,760
81136ad8:	180691ba 	slli	r3,r3,6
81136adc:	10c5883a 	add	r2,r2,r3
81136ae0:	10800804 	addi	r2,r2,32
81136ae4:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
81136ae8:	e0ffeb0f 	ldh	r3,-84(fp)
81136aec:	00a04574 	movhi	r2,33045
81136af0:	1080be04 	addi	r2,r2,760
81136af4:	180691ba 	slli	r3,r3,6
81136af8:	10c5883a 	add	r2,r2,r3
81136afc:	10800904 	addi	r2,r2,36
81136b00:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
81136b04:	e0ffeb0f 	ldh	r3,-84(fp)
81136b08:	00a04574 	movhi	r2,33045
81136b0c:	1080be04 	addi	r2,r2,760
81136b10:	180691ba 	slli	r3,r3,6
81136b14:	10c5883a 	add	r2,r2,r3
81136b18:	10800f04 	addi	r2,r2,60
81136b1c:	00c00044 	movi	r3,1
81136b20:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
81136b24:	e0ffeb0f 	ldh	r3,-84(fp)
81136b28:	00a04574 	movhi	r2,33045
81136b2c:	1080be04 	addi	r2,r2,760
81136b30:	180691ba 	slli	r3,r3,6
81136b34:	10c5883a 	add	r2,r2,r3
81136b38:	10800e04 	addi	r2,r2,56
81136b3c:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
81136b40:	e03fec15 	stw	zero,-80(fp)
81136b44:	00004506 	br	81136c5c <alt_up_sd_card_fopen+0x2d0>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
81136b48:	e0ffeb0f 	ldh	r3,-84(fp)
81136b4c:	e0bfec17 	ldw	r2,-80(fp)
81136b50:	18803f26 	beq	r3,r2,81136c50 <alt_up_sd_card_fopen+0x2c4>
81136b54:	00a04574 	movhi	r2,33045
81136b58:	1080be04 	addi	r2,r2,760
81136b5c:	e0ffec17 	ldw	r3,-80(fp)
81136b60:	180691ba 	slli	r3,r3,6
81136b64:	10c5883a 	add	r2,r2,r3
81136b68:	10800f04 	addi	r2,r2,60
81136b6c:	10800017 	ldw	r2,0(r2)
81136b70:	10800058 	cmpnei	r2,r2,1
81136b74:	1000361e 	bne	r2,zero,81136c50 <alt_up_sd_card_fopen+0x2c4>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81136b78:	e0ffeb0f 	ldh	r3,-84(fp)
81136b7c:	00a04574 	movhi	r2,33045
81136b80:	1080be04 	addi	r2,r2,760
81136b84:	180691ba 	slli	r3,r3,6
81136b88:	10c5883a 	add	r2,r2,r3
81136b8c:	10800a04 	addi	r2,r2,40
81136b90:	10c00017 	ldw	r3,0(r2)
81136b94:	00a04574 	movhi	r2,33045
81136b98:	1080be04 	addi	r2,r2,760
81136b9c:	e13fec17 	ldw	r4,-80(fp)
81136ba0:	200891ba 	slli	r4,r4,6
81136ba4:	1105883a 	add	r2,r2,r4
81136ba8:	10800a04 	addi	r2,r2,40
81136bac:	10800017 	ldw	r2,0(r2)
81136bb0:	1880271e 	bne	r3,r2,81136c50 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81136bb4:	e0ffeb0f 	ldh	r3,-84(fp)
81136bb8:	00a04574 	movhi	r2,33045
81136bbc:	1080be04 	addi	r2,r2,760
81136bc0:	180691ba 	slli	r3,r3,6
81136bc4:	10c5883a 	add	r2,r2,r3
81136bc8:	10800b04 	addi	r2,r2,44
81136bcc:	10c00017 	ldw	r3,0(r2)
81136bd0:	00a04574 	movhi	r2,33045
81136bd4:	1080be04 	addi	r2,r2,760
81136bd8:	e13fec17 	ldw	r4,-80(fp)
81136bdc:	200891ba 	slli	r4,r4,6
81136be0:	1105883a 	add	r2,r2,r4
81136be4:	10800b04 	addi	r2,r2,44
81136be8:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81136bec:	1880181e 	bne	r3,r2,81136c50 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
81136bf0:	e0ffeb0f 	ldh	r3,-84(fp)
81136bf4:	00a04574 	movhi	r2,33045
81136bf8:	1080be04 	addi	r2,r2,760
81136bfc:	180691ba 	slli	r3,r3,6
81136c00:	10c5883a 	add	r2,r2,r3
81136c04:	10800c04 	addi	r2,r2,48
81136c08:	1100000b 	ldhu	r4,0(r2)
81136c0c:	00a04574 	movhi	r2,33045
81136c10:	1080be04 	addi	r2,r2,760
81136c14:	e0ffec17 	ldw	r3,-80(fp)
81136c18:	180691ba 	slli	r3,r3,6
81136c1c:	10c5883a 	add	r2,r2,r3
81136c20:	10800c04 	addi	r2,r2,48
81136c24:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81136c28:	20ffffcc 	andi	r3,r4,65535
81136c2c:	18e0001c 	xori	r3,r3,32768
81136c30:	18e00004 	addi	r3,r3,-32768
81136c34:	10bfffcc 	andi	r2,r2,65535
81136c38:	10a0001c 	xori	r2,r2,32768
81136c3c:	10a00004 	addi	r2,r2,-32768
81136c40:	1880031e 	bne	r3,r2,81136c50 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
81136c44:	00bfff84 	movi	r2,-2
81136c48:	e0bfeb0d 	sth	r2,-84(fp)
								break;
81136c4c:	00002a06 	br	81136cf8 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
81136c50:	e0bfec17 	ldw	r2,-80(fp)
81136c54:	10800044 	addi	r2,r2,1
81136c58:	e0bfec15 	stw	r2,-80(fp)
81136c5c:	e0bfec17 	ldw	r2,-80(fp)
81136c60:	10800510 	cmplti	r2,r2,20
81136c64:	103fb81e 	bne	r2,zero,81136b48 <__reset+0xfb116b48>
81136c68:	00002306 	br	81136cf8 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
81136c6c:	e0bfff17 	ldw	r2,-4(fp)
81136c70:	10001f26 	beq	r2,zero,81136cf0 <alt_up_sd_card_fopen+0x364>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
81136c74:	e0bfeb0f 	ldh	r2,-84(fp)
81136c78:	100691ba 	slli	r3,r2,6
81136c7c:	00a04574 	movhi	r2,33045
81136c80:	1080be04 	addi	r2,r2,760
81136c84:	1885883a 	add	r2,r3,r2
81136c88:	e0ffee04 	addi	r3,fp,-72
81136c8c:	180d883a 	mov	r6,r3
81136c90:	100b883a 	mov	r5,r2
81136c94:	e13ffe17 	ldw	r4,-8(fp)
81136c98:	1135ed00 	call	81135ed0 <create_file>
81136c9c:	10001126 	beq	r2,zero,81136ce4 <alt_up_sd_card_fopen+0x358>
                    {
                        active_files[file_record_index].in_use = true;
81136ca0:	e0ffeb0f 	ldh	r3,-84(fp)
81136ca4:	00a04574 	movhi	r2,33045
81136ca8:	1080be04 	addi	r2,r2,760
81136cac:	180691ba 	slli	r3,r3,6
81136cb0:	10c5883a 	add	r2,r2,r3
81136cb4:	10800f04 	addi	r2,r2,60
81136cb8:	00c00044 	movi	r3,1
81136cbc:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
81136cc0:	e0ffeb0f 	ldh	r3,-84(fp)
81136cc4:	00a04574 	movhi	r2,33045
81136cc8:	1080be04 	addi	r2,r2,760
81136ccc:	180691ba 	slli	r3,r3,6
81136cd0:	10c5883a 	add	r2,r2,r3
81136cd4:	10800e04 	addi	r2,r2,56
81136cd8:	00c00044 	movi	r3,1
81136cdc:	10c00015 	stw	r3,0(r2)
81136ce0:	00000506 	br	81136cf8 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
81136ce4:	00bfffc4 	movi	r2,-1
81136ce8:	e0bfeb0d 	sth	r2,-84(fp)
81136cec:	00000206 	br	81136cf8 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
81136cf0:	00bfffc4 	movi	r2,-1
81136cf4:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
81136cf8:	e0bfeb0b 	ldhu	r2,-84(fp)
}
81136cfc:	e037883a 	mov	sp,fp
81136d00:	dfc00117 	ldw	ra,4(sp)
81136d04:	df000017 	ldw	fp,0(sp)
81136d08:	dec00204 	addi	sp,sp,8
81136d0c:	f800283a 	ret

81136d10 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81136d10:	defffd04 	addi	sp,sp,-12
81136d14:	de00012e 	bgeu	sp,et,81136d1c <alt_up_sd_card_set_attributes+0xc>
81136d18:	003b68fa 	trap	3
81136d1c:	df000215 	stw	fp,8(sp)
81136d20:	df000204 	addi	fp,sp,8
81136d24:	2007883a 	mov	r3,r4
81136d28:	2805883a 	mov	r2,r5
81136d2c:	e0fffe0d 	sth	r3,-8(fp)
81136d30:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81136d34:	e0bffe0f 	ldh	r2,-8(fp)
81136d38:	10001416 	blt	r2,zero,81136d8c <alt_up_sd_card_set_attributes+0x7c>
81136d3c:	e0bffe0f 	ldh	r2,-8(fp)
81136d40:	10800508 	cmpgei	r2,r2,20
81136d44:	1000111e 	bne	r2,zero,81136d8c <alt_up_sd_card_set_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81136d48:	e0fffe0f 	ldh	r3,-8(fp)
81136d4c:	00a04574 	movhi	r2,33045
81136d50:	1080be04 	addi	r2,r2,760
81136d54:	180691ba 	slli	r3,r3,6
81136d58:	10c5883a 	add	r2,r2,r3
81136d5c:	10800f04 	addi	r2,r2,60
81136d60:	10800017 	ldw	r2,0(r2)
81136d64:	10000926 	beq	r2,zero,81136d8c <alt_up_sd_card_set_attributes+0x7c>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
81136d68:	e0fffe0f 	ldh	r3,-8(fp)
81136d6c:	e0bfff0b 	ldhu	r2,-4(fp)
81136d70:	1009883a 	mov	r4,r2
81136d74:	00a04574 	movhi	r2,33045
81136d78:	1080be04 	addi	r2,r2,760
81136d7c:	180691ba 	slli	r3,r3,6
81136d80:	10c5883a 	add	r2,r2,r3
81136d84:	108002c4 	addi	r2,r2,11
81136d88:	11000005 	stb	r4,0(r2)
        }
    }
}
81136d8c:	0001883a 	nop
81136d90:	e037883a 	mov	sp,fp
81136d94:	df000017 	ldw	fp,0(sp)
81136d98:	dec00104 	addi	sp,sp,4
81136d9c:	f800283a 	ret

81136da0 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81136da0:	defffd04 	addi	sp,sp,-12
81136da4:	de00012e 	bgeu	sp,et,81136dac <alt_up_sd_card_get_attributes+0xc>
81136da8:	003b68fa 	trap	3
81136dac:	df000215 	stw	fp,8(sp)
81136db0:	df000204 	addi	fp,sp,8
81136db4:	2005883a 	mov	r2,r4
81136db8:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
81136dbc:	00bfffc4 	movi	r2,-1
81136dc0:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81136dc4:	e0bfff0f 	ldh	r2,-4(fp)
81136dc8:	10001416 	blt	r2,zero,81136e1c <alt_up_sd_card_get_attributes+0x7c>
81136dcc:	e0bfff0f 	ldh	r2,-4(fp)
81136dd0:	10800508 	cmpgei	r2,r2,20
81136dd4:	1000111e 	bne	r2,zero,81136e1c <alt_up_sd_card_get_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81136dd8:	e0ffff0f 	ldh	r3,-4(fp)
81136ddc:	00a04574 	movhi	r2,33045
81136de0:	1080be04 	addi	r2,r2,760
81136de4:	180691ba 	slli	r3,r3,6
81136de8:	10c5883a 	add	r2,r2,r3
81136dec:	10800f04 	addi	r2,r2,60
81136df0:	10800017 	ldw	r2,0(r2)
81136df4:	10000926 	beq	r2,zero,81136e1c <alt_up_sd_card_get_attributes+0x7c>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
81136df8:	e0ffff0f 	ldh	r3,-4(fp)
81136dfc:	00a04574 	movhi	r2,33045
81136e00:	1080be04 	addi	r2,r2,760
81136e04:	180691ba 	slli	r3,r3,6
81136e08:	10c5883a 	add	r2,r2,r3
81136e0c:	108002c4 	addi	r2,r2,11
81136e10:	10800003 	ldbu	r2,0(r2)
81136e14:	10803fcc 	andi	r2,r2,255
81136e18:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
81136e1c:	e0bffe0b 	ldhu	r2,-8(fp)
}
81136e20:	e037883a 	mov	sp,fp
81136e24:	df000017 	ldw	fp,0(sp)
81136e28:	dec00104 	addi	sp,sp,4
81136e2c:	f800283a 	ret

81136e30 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
81136e30:	defffa04 	addi	sp,sp,-24
81136e34:	de00012e 	bgeu	sp,et,81136e3c <alt_up_sd_card_read+0xc>
81136e38:	003b68fa 	trap	3
81136e3c:	dfc00515 	stw	ra,20(sp)
81136e40:	df000415 	stw	fp,16(sp)
81136e44:	df000404 	addi	fp,sp,16
81136e48:	2005883a 	mov	r2,r4
81136e4c:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
81136e50:	00bfffc4 	movi	r2,-1
81136e54:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81136e58:	e0bfff0f 	ldh	r2,-4(fp)
81136e5c:	1000ce16 	blt	r2,zero,81137198 <alt_up_sd_card_read+0x368>
81136e60:	e0bfff0f 	ldh	r2,-4(fp)
81136e64:	10800508 	cmpgei	r2,r2,20
81136e68:	1000cb1e 	bne	r2,zero,81137198 <alt_up_sd_card_read+0x368>
    {
        if (active_files[file_handle].in_use)
81136e6c:	e0ffff0f 	ldh	r3,-4(fp)
81136e70:	00a04574 	movhi	r2,33045
81136e74:	1080be04 	addi	r2,r2,760
81136e78:	180691ba 	slli	r3,r3,6
81136e7c:	10c5883a 	add	r2,r2,r3
81136e80:	10800f04 	addi	r2,r2,60
81136e84:	10800017 	ldw	r2,0(r2)
81136e88:	1000c326 	beq	r2,zero,81137198 <alt_up_sd_card_read+0x368>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81136e8c:	e0ffff0f 	ldh	r3,-4(fp)
81136e90:	00a04574 	movhi	r2,33045
81136e94:	1080be04 	addi	r2,r2,760
81136e98:	180691ba 	slli	r3,r3,6
81136e9c:	10c5883a 	add	r2,r2,r3
81136ea0:	10800904 	addi	r2,r2,36
81136ea4:	10c00017 	ldw	r3,0(r2)
81136ea8:	e13fff0f 	ldh	r4,-4(fp)
81136eac:	00a04574 	movhi	r2,33045
81136eb0:	1080be04 	addi	r2,r2,760
81136eb4:	200891ba 	slli	r4,r4,6
81136eb8:	1105883a 	add	r2,r2,r4
81136ebc:	10800604 	addi	r2,r2,24
81136ec0:	10800017 	ldw	r2,0(r2)
81136ec4:	1880b42e 	bgeu	r3,r2,81137198 <alt_up_sd_card_read+0x368>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136ec8:	00a04574 	movhi	r2,33045
81136ecc:	1080a904 	addi	r2,r2,676
81136ed0:	10c01417 	ldw	r3,80(r2)
81136ed4:	e13fff0f 	ldh	r4,-4(fp)
81136ed8:	00a04574 	movhi	r2,33045
81136edc:	1080be04 	addi	r2,r2,760
81136ee0:	200891ba 	slli	r4,r4,6
81136ee4:	1105883a 	add	r2,r2,r4
81136ee8:	10800704 	addi	r2,r2,28
81136eec:	10800017 	ldw	r2,0(r2)
81136ef0:	113fff84 	addi	r4,r2,-2
81136ef4:	00a04574 	movhi	r2,33045
81136ef8:	1080a904 	addi	r2,r2,676
81136efc:	10800383 	ldbu	r2,14(r2)
81136f00:	10803fcc 	andi	r2,r2,255
81136f04:	2085383a 	mul	r2,r4,r2
81136f08:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
81136f0c:	e13fff0f 	ldh	r4,-4(fp)
81136f10:	00a04574 	movhi	r2,33045
81136f14:	1080be04 	addi	r2,r2,760
81136f18:	200891ba 	slli	r4,r4,6
81136f1c:	1105883a 	add	r2,r2,r4
81136f20:	10800804 	addi	r2,r2,32
81136f24:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81136f28:	1885883a 	add	r2,r3,r2
81136f2c:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
81136f30:	e0ffff0f 	ldh	r3,-4(fp)
81136f34:	00a04574 	movhi	r2,33045
81136f38:	1080be04 	addi	r2,r2,760
81136f3c:	180691ba 	slli	r3,r3,6
81136f40:	10c5883a 	add	r2,r2,r3
81136f44:	10800904 	addi	r2,r2,36
81136f48:	10800017 	ldw	r2,0(r2)
81136f4c:	10006826 	beq	r2,zero,811370f0 <alt_up_sd_card_read+0x2c0>
81136f50:	e0ffff0f 	ldh	r3,-4(fp)
81136f54:	00a04574 	movhi	r2,33045
81136f58:	1080be04 	addi	r2,r2,760
81136f5c:	180691ba 	slli	r3,r3,6
81136f60:	10c5883a 	add	r2,r2,r3
81136f64:	10800904 	addi	r2,r2,36
81136f68:	10800017 	ldw	r2,0(r2)
81136f6c:	10807fcc 	andi	r2,r2,511
81136f70:	10005f1e 	bne	r2,zero,811370f0 <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81136f74:	e0ffff0f 	ldh	r3,-4(fp)
81136f78:	00a04574 	movhi	r2,33045
81136f7c:	1080be04 	addi	r2,r2,760
81136f80:	180691ba 	slli	r3,r3,6
81136f84:	10c5883a 	add	r2,r2,r3
81136f88:	10800804 	addi	r2,r2,32
81136f8c:	10c00017 	ldw	r3,0(r2)
81136f90:	00a04574 	movhi	r2,33045
81136f94:	1080a904 	addi	r2,r2,676
81136f98:	10800383 	ldbu	r2,14(r2)
81136f9c:	10803fcc 	andi	r2,r2,255
81136fa0:	10bfffc4 	addi	r2,r2,-1
81136fa4:	1880401e 	bne	r3,r2,811370a8 <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81136fa8:	e0ffff0f 	ldh	r3,-4(fp)
81136fac:	00a04574 	movhi	r2,33045
81136fb0:	1080be04 	addi	r2,r2,760
81136fb4:	180691ba 	slli	r3,r3,6
81136fb8:	10c5883a 	add	r2,r2,r3
81136fbc:	10800704 	addi	r2,r2,28
81136fc0:	10800017 	ldw	r2,0(r2)
81136fc4:	e0fffe04 	addi	r3,fp,-8
81136fc8:	180b883a 	mov	r5,r3
81136fcc:	1009883a 	mov	r4,r2
81136fd0:	11337bc0 	call	811337bc <get_cluster_flag>
81136fd4:	10003226 	beq	r2,zero,811370a0 <alt_up_sd_card_read+0x270>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81136fd8:	e0bffe0b 	ldhu	r2,-8(fp)
81136fdc:	10bfffcc 	andi	r2,r2,65535
81136fe0:	10fffe0c 	andi	r3,r2,65528
81136fe4:	00bffe14 	movui	r2,65528
81136fe8:	1880021e 	bne	r3,r2,81136ff4 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
81136fec:	00bfffc4 	movi	r2,-1
81136ff0:	00006a06 	br	8113719c <alt_up_sd_card_read+0x36c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81136ff4:	e13fff0f 	ldh	r4,-4(fp)
81136ff8:	e0bffe0b 	ldhu	r2,-8(fp)
81136ffc:	10ffffcc 	andi	r3,r2,65535
81137000:	00a04574 	movhi	r2,33045
81137004:	1080be04 	addi	r2,r2,760
81137008:	200891ba 	slli	r4,r4,6
8113700c:	1105883a 	add	r2,r2,r4
81137010:	10800704 	addi	r2,r2,28
81137014:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81137018:	e0ffff0f 	ldh	r3,-4(fp)
8113701c:	00a04574 	movhi	r2,33045
81137020:	1080be04 	addi	r2,r2,760
81137024:	180691ba 	slli	r3,r3,6
81137028:	10c5883a 	add	r2,r2,r3
8113702c:	10800804 	addi	r2,r2,32
81137030:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81137034:	00a04574 	movhi	r2,33045
81137038:	1080a904 	addi	r2,r2,676
8113703c:	10c01417 	ldw	r3,80(r2)
81137040:	e13fff0f 	ldh	r4,-4(fp)
81137044:	00a04574 	movhi	r2,33045
81137048:	1080be04 	addi	r2,r2,760
8113704c:	200891ba 	slli	r4,r4,6
81137050:	1105883a 	add	r2,r2,r4
81137054:	10800704 	addi	r2,r2,28
81137058:	10800017 	ldw	r2,0(r2)
8113705c:	113fff84 	addi	r4,r2,-2
81137060:	00a04574 	movhi	r2,33045
81137064:	1080a904 	addi	r2,r2,676
81137068:	10800383 	ldbu	r2,14(r2)
8113706c:	10803fcc 	andi	r2,r2,255
81137070:	2085383a 	mul	r2,r4,r2
81137074:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81137078:	e13fff0f 	ldh	r4,-4(fp)
8113707c:	00a04574 	movhi	r2,33045
81137080:	1080be04 	addi	r2,r2,760
81137084:	200891ba 	slli	r4,r4,6
81137088:	1105883a 	add	r2,r2,r4
8113708c:	10800804 	addi	r2,r2,32
81137090:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81137094:	1885883a 	add	r2,r3,r2
81137098:	e0bffd15 	stw	r2,-12(fp)
8113709c:	00001406 	br	811370f0 <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
811370a0:	00bfff84 	movi	r2,-2
811370a4:	00003d06 	br	8113719c <alt_up_sd_card_read+0x36c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
811370a8:	e13fff0f 	ldh	r4,-4(fp)
811370ac:	e0ffff0f 	ldh	r3,-4(fp)
811370b0:	00a04574 	movhi	r2,33045
811370b4:	1080be04 	addi	r2,r2,760
811370b8:	180691ba 	slli	r3,r3,6
811370bc:	10c5883a 	add	r2,r2,r3
811370c0:	10800804 	addi	r2,r2,32
811370c4:	10800017 	ldw	r2,0(r2)
811370c8:	10c00044 	addi	r3,r2,1
811370cc:	00a04574 	movhi	r2,33045
811370d0:	1080be04 	addi	r2,r2,760
811370d4:	200891ba 	slli	r4,r4,6
811370d8:	1105883a 	add	r2,r2,r4
811370dc:	10800804 	addi	r2,r2,32
811370e0:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
811370e4:	e0bffd17 	ldw	r2,-12(fp)
811370e8:	10800044 	addi	r2,r2,1
811370ec:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
811370f0:	d0e09a17 	ldw	r3,-32152(gp)
811370f4:	e0bffd17 	ldw	r2,-12(fp)
811370f8:	1885883a 	add	r2,r3,r2
811370fc:	1007883a 	mov	r3,r2
81137100:	d0a09e17 	ldw	r2,-32136(gp)
81137104:	18800726 	beq	r3,r2,81137124 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
81137108:	d0a09a17 	ldw	r2,-32152(gp)
8113710c:	100b883a 	mov	r5,r2
81137110:	e13ffd17 	ldw	r4,-12(fp)
81137114:	11336dc0 	call	811336dc <Read_Sector_Data>
81137118:	1000021e 	bne	r2,zero,81137124 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
8113711c:	00bfff84 	movi	r2,-2
81137120:	00001e06 	br	8113719c <alt_up_sd_card_read+0x36c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
81137124:	d0e09917 	ldw	r3,-32156(gp)
81137128:	e13fff0f 	ldh	r4,-4(fp)
8113712c:	00a04574 	movhi	r2,33045
81137130:	1080be04 	addi	r2,r2,760
81137134:	200891ba 	slli	r4,r4,6
81137138:	1105883a 	add	r2,r2,r4
8113713c:	10800904 	addi	r2,r2,36
81137140:	10800017 	ldw	r2,0(r2)
81137144:	10807fcc 	andi	r2,r2,511
81137148:	1885883a 	add	r2,r3,r2
8113714c:	10800023 	ldbuio	r2,0(r2)
81137150:	10803fcc 	andi	r2,r2,255
81137154:	10803fcc 	andi	r2,r2,255
81137158:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
8113715c:	e13fff0f 	ldh	r4,-4(fp)
81137160:	e0ffff0f 	ldh	r3,-4(fp)
81137164:	00a04574 	movhi	r2,33045
81137168:	1080be04 	addi	r2,r2,760
8113716c:	180691ba 	slli	r3,r3,6
81137170:	10c5883a 	add	r2,r2,r3
81137174:	10800904 	addi	r2,r2,36
81137178:	10800017 	ldw	r2,0(r2)
8113717c:	10c00044 	addi	r3,r2,1
81137180:	00a04574 	movhi	r2,33045
81137184:	1080be04 	addi	r2,r2,760
81137188:	200891ba 	slli	r4,r4,6
8113718c:	1105883a 	add	r2,r2,r4
81137190:	10800904 	addi	r2,r2,36
81137194:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
81137198:	e0bffc0b 	ldhu	r2,-16(fp)
}
8113719c:	e037883a 	mov	sp,fp
811371a0:	dfc00117 	ldw	ra,4(sp)
811371a4:	df000017 	ldw	fp,0(sp)
811371a8:	dec00204 	addi	sp,sp,8
811371ac:	f800283a 	ret

811371b0 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
811371b0:	defff804 	addi	sp,sp,-32
811371b4:	de00012e 	bgeu	sp,et,811371bc <alt_up_sd_card_write+0xc>
811371b8:	003b68fa 	trap	3
811371bc:	dfc00715 	stw	ra,28(sp)
811371c0:	df000615 	stw	fp,24(sp)
811371c4:	df000604 	addi	fp,sp,24
811371c8:	2007883a 	mov	r3,r4
811371cc:	2805883a 	mov	r2,r5
811371d0:	e0fffe0d 	sth	r3,-8(fp)
811371d4:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
811371d8:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
811371dc:	e0bffe0f 	ldh	r2,-8(fp)
811371e0:	10017716 	blt	r2,zero,811377c0 <alt_up_sd_card_write+0x610>
811371e4:	e0bffe0f 	ldh	r2,-8(fp)
811371e8:	10800508 	cmpgei	r2,r2,20
811371ec:	1001741e 	bne	r2,zero,811377c0 <alt_up_sd_card_write+0x610>
    {
        if (active_files[file_handle].in_use)
811371f0:	e0fffe0f 	ldh	r3,-8(fp)
811371f4:	00a04574 	movhi	r2,33045
811371f8:	1080be04 	addi	r2,r2,760
811371fc:	180691ba 	slli	r3,r3,6
81137200:	10c5883a 	add	r2,r2,r3
81137204:	10800f04 	addi	r2,r2,60
81137208:	10800017 	ldw	r2,0(r2)
8113720c:	10016c26 	beq	r2,zero,811377c0 <alt_up_sd_card_write+0x610>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81137210:	00a04574 	movhi	r2,33045
81137214:	1080a904 	addi	r2,r2,676
81137218:	10c01417 	ldw	r3,80(r2)
8113721c:	e13ffe0f 	ldh	r4,-8(fp)
81137220:	00a04574 	movhi	r2,33045
81137224:	1080be04 	addi	r2,r2,760
81137228:	200891ba 	slli	r4,r4,6
8113722c:	1105883a 	add	r2,r2,r4
81137230:	10800704 	addi	r2,r2,28
81137234:	10800017 	ldw	r2,0(r2)
81137238:	113fff84 	addi	r4,r2,-2
8113723c:	00a04574 	movhi	r2,33045
81137240:	1080a904 	addi	r2,r2,676
81137244:	10800383 	ldbu	r2,14(r2)
81137248:	10803fcc 	andi	r2,r2,255
8113724c:	2085383a 	mul	r2,r4,r2
81137250:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
81137254:	e13ffe0f 	ldh	r4,-8(fp)
81137258:	00a04574 	movhi	r2,33045
8113725c:	1080be04 	addi	r2,r2,760
81137260:	200891ba 	slli	r4,r4,6
81137264:	1105883a 	add	r2,r2,r4
81137268:	10800804 	addi	r2,r2,32
8113726c:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81137270:	1885883a 	add	r2,r3,r2
81137274:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
81137278:	e0fffe0f 	ldh	r3,-8(fp)
8113727c:	00a04574 	movhi	r2,33045
81137280:	1080be04 	addi	r2,r2,760
81137284:	180691ba 	slli	r3,r3,6
81137288:	10c5883a 	add	r2,r2,r3
8113728c:	10800904 	addi	r2,r2,36
81137290:	10c00017 	ldw	r3,0(r2)
81137294:	00a04574 	movhi	r2,33045
81137298:	1080a904 	addi	r2,r2,676
8113729c:	1080030b 	ldhu	r2,12(r2)
811372a0:	10bfffcc 	andi	r2,r2,65535
811372a4:	1889203a 	divu	r4,r3,r2
811372a8:	2085383a 	mul	r2,r4,r2
811372ac:	1885c83a 	sub	r2,r3,r2
811372b0:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
811372b4:	e0fffe0f 	ldh	r3,-8(fp)
811372b8:	00a04574 	movhi	r2,33045
811372bc:	1080be04 	addi	r2,r2,760
811372c0:	180691ba 	slli	r3,r3,6
811372c4:	10c5883a 	add	r2,r2,r3
811372c8:	10800904 	addi	r2,r2,36
811372cc:	10c00017 	ldw	r3,0(r2)
811372d0:	e13ffe0f 	ldh	r4,-8(fp)
811372d4:	00a04574 	movhi	r2,33045
811372d8:	1080be04 	addi	r2,r2,760
811372dc:	200891ba 	slli	r4,r4,6
811372e0:	1105883a 	add	r2,r2,r4
811372e4:	10800604 	addi	r2,r2,24
811372e8:	10800017 	ldw	r2,0(r2)
811372ec:	1880672e 	bgeu	r3,r2,8113748c <alt_up_sd_card_write+0x2dc>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
811372f0:	e0fffe0f 	ldh	r3,-8(fp)
811372f4:	00a04574 	movhi	r2,33045
811372f8:	1080be04 	addi	r2,r2,760
811372fc:	180691ba 	slli	r3,r3,6
81137300:	10c5883a 	add	r2,r2,r3
81137304:	10800904 	addi	r2,r2,36
81137308:	10800017 	ldw	r2,0(r2)
8113730c:	1000e126 	beq	r2,zero,81137694 <alt_up_sd_card_write+0x4e4>
81137310:	e0bffc0f 	ldh	r2,-16(fp)
81137314:	1000df1e 	bne	r2,zero,81137694 <alt_up_sd_card_write+0x4e4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81137318:	e0fffe0f 	ldh	r3,-8(fp)
8113731c:	00a04574 	movhi	r2,33045
81137320:	1080be04 	addi	r2,r2,760
81137324:	180691ba 	slli	r3,r3,6
81137328:	10c5883a 	add	r2,r2,r3
8113732c:	10800804 	addi	r2,r2,32
81137330:	10c00017 	ldw	r3,0(r2)
81137334:	00a04574 	movhi	r2,33045
81137338:	1080a904 	addi	r2,r2,676
8113733c:	10800383 	ldbu	r2,14(r2)
81137340:	10803fcc 	andi	r2,r2,255
81137344:	10bfffc4 	addi	r2,r2,-1
81137348:	18803d1e 	bne	r3,r2,81137440 <alt_up_sd_card_write+0x290>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
8113734c:	e0fffe0f 	ldh	r3,-8(fp)
81137350:	00a04574 	movhi	r2,33045
81137354:	1080be04 	addi	r2,r2,760
81137358:	180691ba 	slli	r3,r3,6
8113735c:	10c5883a 	add	r2,r2,r3
81137360:	10800704 	addi	r2,r2,28
81137364:	10800017 	ldw	r2,0(r2)
81137368:	e0fffc84 	addi	r3,fp,-14
8113736c:	180b883a 	mov	r5,r3
81137370:	1009883a 	mov	r4,r2
81137374:	11337bc0 	call	811337bc <get_cluster_flag>
81137378:	10002f26 	beq	r2,zero,81137438 <alt_up_sd_card_write+0x288>
                        {
                            if (next_cluster < 0x0000fff8)
8113737c:	e0bffc8b 	ldhu	r2,-14(fp)
81137380:	10bfffcc 	andi	r2,r2,65535
81137384:	10bffe28 	cmpgeui	r2,r2,65528
81137388:	1000c21e 	bne	r2,zero,81137694 <alt_up_sd_card_write+0x4e4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
8113738c:	e13ffe0f 	ldh	r4,-8(fp)
81137390:	e0bffc8b 	ldhu	r2,-14(fp)
81137394:	10ffffcc 	andi	r3,r2,65535
81137398:	00a04574 	movhi	r2,33045
8113739c:	1080be04 	addi	r2,r2,760
811373a0:	200891ba 	slli	r4,r4,6
811373a4:	1105883a 	add	r2,r2,r4
811373a8:	10800704 	addi	r2,r2,28
811373ac:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
811373b0:	e0fffe0f 	ldh	r3,-8(fp)
811373b4:	00a04574 	movhi	r2,33045
811373b8:	1080be04 	addi	r2,r2,760
811373bc:	180691ba 	slli	r3,r3,6
811373c0:	10c5883a 	add	r2,r2,r3
811373c4:	10800804 	addi	r2,r2,32
811373c8:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811373cc:	00a04574 	movhi	r2,33045
811373d0:	1080a904 	addi	r2,r2,676
811373d4:	10c01417 	ldw	r3,80(r2)
811373d8:	e13ffe0f 	ldh	r4,-8(fp)
811373dc:	00a04574 	movhi	r2,33045
811373e0:	1080be04 	addi	r2,r2,760
811373e4:	200891ba 	slli	r4,r4,6
811373e8:	1105883a 	add	r2,r2,r4
811373ec:	10800704 	addi	r2,r2,28
811373f0:	10800017 	ldw	r2,0(r2)
811373f4:	113fff84 	addi	r4,r2,-2
811373f8:	00a04574 	movhi	r2,33045
811373fc:	1080a904 	addi	r2,r2,676
81137400:	10800383 	ldbu	r2,14(r2)
81137404:	10803fcc 	andi	r2,r2,255
81137408:	2085383a 	mul	r2,r4,r2
8113740c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81137410:	e13ffe0f 	ldh	r4,-8(fp)
81137414:	00a04574 	movhi	r2,33045
81137418:	1080be04 	addi	r2,r2,760
8113741c:	200891ba 	slli	r4,r4,6
81137420:	1105883a 	add	r2,r2,r4
81137424:	10800804 	addi	r2,r2,32
81137428:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8113742c:	1885883a 	add	r2,r3,r2
81137430:	e0bffb15 	stw	r2,-20(fp)
81137434:	00009706 	br	81137694 <alt_up_sd_card_write+0x4e4>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
81137438:	0005883a 	mov	r2,zero
8113743c:	0000e106 	br	811377c4 <alt_up_sd_card_write+0x614>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81137440:	e13ffe0f 	ldh	r4,-8(fp)
81137444:	e0fffe0f 	ldh	r3,-8(fp)
81137448:	00a04574 	movhi	r2,33045
8113744c:	1080be04 	addi	r2,r2,760
81137450:	180691ba 	slli	r3,r3,6
81137454:	10c5883a 	add	r2,r2,r3
81137458:	10800804 	addi	r2,r2,32
8113745c:	10800017 	ldw	r2,0(r2)
81137460:	10c00044 	addi	r3,r2,1
81137464:	00a04574 	movhi	r2,33045
81137468:	1080be04 	addi	r2,r2,760
8113746c:	200891ba 	slli	r4,r4,6
81137470:	1105883a 	add	r2,r2,r4
81137474:	10800804 	addi	r2,r2,32
81137478:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
8113747c:	e0bffb17 	ldw	r2,-20(fp)
81137480:	10800044 	addi	r2,r2,1
81137484:	e0bffb15 	stw	r2,-20(fp)
81137488:	00008206 	br	81137694 <alt_up_sd_card_write+0x4e4>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
8113748c:	e0fffe0f 	ldh	r3,-8(fp)
81137490:	00a04574 	movhi	r2,33045
81137494:	1080be04 	addi	r2,r2,760
81137498:	180691ba 	slli	r3,r3,6
8113749c:	10c5883a 	add	r2,r2,r3
811374a0:	10800904 	addi	r2,r2,36
811374a4:	10800017 	ldw	r2,0(r2)
811374a8:	10007a26 	beq	r2,zero,81137694 <alt_up_sd_card_write+0x4e4>
811374ac:	e0bffc0f 	ldh	r2,-16(fp)
811374b0:	1000781e 	bne	r2,zero,81137694 <alt_up_sd_card_write+0x4e4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
811374b4:	e0fffe0f 	ldh	r3,-8(fp)
811374b8:	00a04574 	movhi	r2,33045
811374bc:	1080be04 	addi	r2,r2,760
811374c0:	180691ba 	slli	r3,r3,6
811374c4:	10c5883a 	add	r2,r2,r3
811374c8:	10800804 	addi	r2,r2,32
811374cc:	10c00017 	ldw	r3,0(r2)
811374d0:	00a04574 	movhi	r2,33045
811374d4:	1080a904 	addi	r2,r2,676
811374d8:	10800383 	ldbu	r2,14(r2)
811374dc:	10803fcc 	andi	r2,r2,255
811374e0:	10bfffc4 	addi	r2,r2,-1
811374e4:	18803e1e 	bne	r3,r2,811375e0 <alt_up_sd_card_write+0x430>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
811374e8:	e0bffd04 	addi	r2,fp,-12
811374ec:	1009883a 	mov	r4,r2
811374f0:	11358000 	call	81135800 <find_first_empty_cluster>
811374f4:	10003826 	beq	r2,zero,811375d8 <alt_up_sd_card_write+0x428>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
811374f8:	e0fffe0f 	ldh	r3,-8(fp)
811374fc:	00a04574 	movhi	r2,33045
81137500:	1080be04 	addi	r2,r2,760
81137504:	180691ba 	slli	r3,r3,6
81137508:	10c5883a 	add	r2,r2,r3
8113750c:	10800704 	addi	r2,r2,28
81137510:	10800017 	ldw	r2,0(r2)
81137514:	e0fffd17 	ldw	r3,-12(fp)
81137518:	18ffffcc 	andi	r3,r3,65535
8113751c:	18e0001c 	xori	r3,r3,32768
81137520:	18e00004 	addi	r3,r3,-32768
81137524:	01800044 	movi	r6,1
81137528:	180b883a 	mov	r5,r3
8113752c:	1009883a 	mov	r4,r2
81137530:	11338780 	call	81133878 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
81137534:	e0bffd17 	ldw	r2,-12(fp)
81137538:	01800044 	movi	r6,1
8113753c:	017fffc4 	movi	r5,-1
81137540:	1009883a 	mov	r4,r2
81137544:	11338780 	call	81133878 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
81137548:	e0fffe0f 	ldh	r3,-8(fp)
8113754c:	00a04574 	movhi	r2,33045
81137550:	1080be04 	addi	r2,r2,760
81137554:	180691ba 	slli	r3,r3,6
81137558:	10c5883a 	add	r2,r2,r3
8113755c:	10800704 	addi	r2,r2,28
81137560:	10800017 	ldw	r2,0(r2)
81137564:	e0fffd17 	ldw	r3,-12(fp)
81137568:	18ffffcc 	andi	r3,r3,65535
8113756c:	18e0001c 	xori	r3,r3,32768
81137570:	18e00004 	addi	r3,r3,-32768
81137574:	000d883a 	mov	r6,zero
81137578:	180b883a 	mov	r5,r3
8113757c:	1009883a 	mov	r4,r2
81137580:	11338780 	call	81133878 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
81137584:	e0bffd17 	ldw	r2,-12(fp)
81137588:	000d883a 	mov	r6,zero
8113758c:	017fffc4 	movi	r5,-1
81137590:	1009883a 	mov	r4,r2
81137594:	11338780 	call	81133878 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
81137598:	e13ffe0f 	ldh	r4,-8(fp)
8113759c:	e0fffd17 	ldw	r3,-12(fp)
811375a0:	00a04574 	movhi	r2,33045
811375a4:	1080be04 	addi	r2,r2,760
811375a8:	200891ba 	slli	r4,r4,6
811375ac:	1105883a 	add	r2,r2,r4
811375b0:	10800704 	addi	r2,r2,28
811375b4:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
811375b8:	e0fffe0f 	ldh	r3,-8(fp)
811375bc:	00a04574 	movhi	r2,33045
811375c0:	1080be04 	addi	r2,r2,760
811375c4:	180691ba 	slli	r3,r3,6
811375c8:	10c5883a 	add	r2,r2,r3
811375cc:	10800804 	addi	r2,r2,32
811375d0:	10000015 	stw	zero,0(r2)
811375d4:	00001506 	br	8113762c <alt_up_sd_card_write+0x47c>
						}
						else
						{
							return false;
811375d8:	0005883a 	mov	r2,zero
811375dc:	00007906 	br	811377c4 <alt_up_sd_card_write+0x614>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
811375e0:	e13ffe0f 	ldh	r4,-8(fp)
811375e4:	e0fffe0f 	ldh	r3,-8(fp)
811375e8:	00a04574 	movhi	r2,33045
811375ec:	1080be04 	addi	r2,r2,760
811375f0:	180691ba 	slli	r3,r3,6
811375f4:	10c5883a 	add	r2,r2,r3
811375f8:	10800904 	addi	r2,r2,36
811375fc:	10c00017 	ldw	r3,0(r2)
81137600:	00a04574 	movhi	r2,33045
81137604:	1080a904 	addi	r2,r2,676
81137608:	1080030b 	ldhu	r2,12(r2)
8113760c:	10bfffcc 	andi	r2,r2,65535
81137610:	1887203a 	divu	r3,r3,r2
81137614:	00a04574 	movhi	r2,33045
81137618:	1080be04 	addi	r2,r2,760
8113761c:	200891ba 	slli	r4,r4,6
81137620:	1105883a 	add	r2,r2,r4
81137624:	10800804 	addi	r2,r2,32
81137628:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8113762c:	00a04574 	movhi	r2,33045
81137630:	1080a904 	addi	r2,r2,676
81137634:	10c01417 	ldw	r3,80(r2)
81137638:	e13ffe0f 	ldh	r4,-8(fp)
8113763c:	00a04574 	movhi	r2,33045
81137640:	1080be04 	addi	r2,r2,760
81137644:	200891ba 	slli	r4,r4,6
81137648:	1105883a 	add	r2,r2,r4
8113764c:	10800704 	addi	r2,r2,28
81137650:	10800017 	ldw	r2,0(r2)
81137654:	113fff84 	addi	r4,r2,-2
81137658:	00a04574 	movhi	r2,33045
8113765c:	1080a904 	addi	r2,r2,676
81137660:	10800383 	ldbu	r2,14(r2)
81137664:	10803fcc 	andi	r2,r2,255
81137668:	2085383a 	mul	r2,r4,r2
8113766c:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
81137670:	e13ffe0f 	ldh	r4,-8(fp)
81137674:	00a04574 	movhi	r2,33045
81137678:	1080be04 	addi	r2,r2,760
8113767c:	200891ba 	slli	r4,r4,6
81137680:	1105883a 	add	r2,r2,r4
81137684:	10800804 	addi	r2,r2,32
81137688:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8113768c:	1885883a 	add	r2,r3,r2
81137690:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
81137694:	d0e09a17 	ldw	r3,-32152(gp)
81137698:	e0bffb17 	ldw	r2,-20(fp)
8113769c:	1885883a 	add	r2,r3,r2
811376a0:	1007883a 	mov	r3,r2
811376a4:	d0a09e17 	ldw	r2,-32136(gp)
811376a8:	18800726 	beq	r3,r2,811376c8 <alt_up_sd_card_write+0x518>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
811376ac:	d0a09a17 	ldw	r2,-32152(gp)
811376b0:	100b883a 	mov	r5,r2
811376b4:	e13ffb17 	ldw	r4,-20(fp)
811376b8:	11336dc0 	call	811336dc <Read_Sector_Data>
811376bc:	1000021e 	bne	r2,zero,811376c8 <alt_up_sd_card_write+0x518>
                {
					return false;
811376c0:	0005883a 	mov	r2,zero
811376c4:	00003f06 	br	811377c4 <alt_up_sd_card_write+0x614>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
811376c8:	d0e09917 	ldw	r3,-32156(gp)
811376cc:	e0bffc0f 	ldh	r2,-16(fp)
811376d0:	1885883a 	add	r2,r3,r2
811376d4:	e0ffff07 	ldb	r3,-4(fp)
811376d8:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
811376dc:	e13ffe0f 	ldh	r4,-8(fp)
811376e0:	e0fffe0f 	ldh	r3,-8(fp)
811376e4:	00a04574 	movhi	r2,33045
811376e8:	1080be04 	addi	r2,r2,760
811376ec:	180691ba 	slli	r3,r3,6
811376f0:	10c5883a 	add	r2,r2,r3
811376f4:	10800904 	addi	r2,r2,36
811376f8:	10800017 	ldw	r2,0(r2)
811376fc:	10c00044 	addi	r3,r2,1
81137700:	00a04574 	movhi	r2,33045
81137704:	1080be04 	addi	r2,r2,760
81137708:	200891ba 	slli	r4,r4,6
8113770c:	1105883a 	add	r2,r2,r4
81137710:	10800904 	addi	r2,r2,36
81137714:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
81137718:	e0fffe0f 	ldh	r3,-8(fp)
8113771c:	00a04574 	movhi	r2,33045
81137720:	1080be04 	addi	r2,r2,760
81137724:	180691ba 	slli	r3,r3,6
81137728:	10c5883a 	add	r2,r2,r3
8113772c:	10800904 	addi	r2,r2,36
81137730:	10c00017 	ldw	r3,0(r2)
81137734:	e13ffe0f 	ldh	r4,-8(fp)
81137738:	00a04574 	movhi	r2,33045
8113773c:	1080be04 	addi	r2,r2,760
81137740:	200891ba 	slli	r4,r4,6
81137744:	1105883a 	add	r2,r2,r4
81137748:	10800604 	addi	r2,r2,24
8113774c:	10800017 	ldw	r2,0(r2)
81137750:	18801736 	bltu	r3,r2,811377b0 <alt_up_sd_card_write+0x600>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
81137754:	e13ffe0f 	ldh	r4,-8(fp)
81137758:	e0fffe0f 	ldh	r3,-8(fp)
8113775c:	00a04574 	movhi	r2,33045
81137760:	1080be04 	addi	r2,r2,760
81137764:	180691ba 	slli	r3,r3,6
81137768:	10c5883a 	add	r2,r2,r3
8113776c:	10800604 	addi	r2,r2,24
81137770:	10800017 	ldw	r2,0(r2)
81137774:	10c00044 	addi	r3,r2,1
81137778:	00a04574 	movhi	r2,33045
8113777c:	1080be04 	addi	r2,r2,760
81137780:	200891ba 	slli	r4,r4,6
81137784:	1105883a 	add	r2,r2,r4
81137788:	10800604 	addi	r2,r2,24
8113778c:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
81137790:	e0fffe0f 	ldh	r3,-8(fp)
81137794:	00a04574 	movhi	r2,33045
81137798:	1080be04 	addi	r2,r2,760
8113779c:	180691ba 	slli	r3,r3,6
811377a0:	10c5883a 	add	r2,r2,r3
811377a4:	10800e04 	addi	r2,r2,56
811377a8:	00c00044 	movi	r3,1
811377ac:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
811377b0:	00800044 	movi	r2,1
811377b4:	d0a09d15 	stw	r2,-32140(gp)
			result = true;
811377b8:	00800044 	movi	r2,1
811377bc:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
811377c0:	e0bffa17 	ldw	r2,-24(fp)
}
811377c4:	e037883a 	mov	sp,fp
811377c8:	dfc00117 	ldw	ra,4(sp)
811377cc:	df000017 	ldw	fp,0(sp)
811377d0:	dec00204 	addi	sp,sp,8
811377d4:	f800283a 	ret

811377d8 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
811377d8:	defffb04 	addi	sp,sp,-20
811377dc:	de00012e 	bgeu	sp,et,811377e4 <alt_up_sd_card_fclose+0xc>
811377e0:	003b68fa 	trap	3
811377e4:	dfc00415 	stw	ra,16(sp)
811377e8:	df000315 	stw	fp,12(sp)
811377ec:	df000304 	addi	fp,sp,12
811377f0:	2005883a 	mov	r2,r4
811377f4:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
811377f8:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811377fc:	11363b40 	call	811363b4 <alt_up_sd_card_is_Present>
81137800:	10006026 	beq	r2,zero,81137984 <alt_up_sd_card_fclose+0x1ac>
81137804:	d0a09317 	ldw	r2,-32180(gp)
81137808:	10005e26 	beq	r2,zero,81137984 <alt_up_sd_card_fclose+0x1ac>
    {
        if (active_files[file_handle].in_use) 
8113780c:	e0ffff0f 	ldh	r3,-4(fp)
81137810:	00a04574 	movhi	r2,33045
81137814:	1080be04 	addi	r2,r2,760
81137818:	180691ba 	slli	r3,r3,6
8113781c:	10c5883a 	add	r2,r2,r3
81137820:	10800f04 	addi	r2,r2,60
81137824:	10800017 	ldw	r2,0(r2)
81137828:	10005626 	beq	r2,zero,81137984 <alt_up_sd_card_fclose+0x1ac>
        {
			if (active_files[file_handle].modified)
8113782c:	e0ffff0f 	ldh	r3,-4(fp)
81137830:	00a04574 	movhi	r2,33045
81137834:	1080be04 	addi	r2,r2,760
81137838:	180691ba 	slli	r3,r3,6
8113783c:	10c5883a 	add	r2,r2,r3
81137840:	10800e04 	addi	r2,r2,56
81137844:	10800017 	ldw	r2,0(r2)
81137848:	10004526 	beq	r2,zero,81137960 <alt_up_sd_card_fclose+0x188>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
8113784c:	e0ffff0f 	ldh	r3,-4(fp)
81137850:	00a04574 	movhi	r2,33045
81137854:	1080be04 	addi	r2,r2,760
81137858:	180691ba 	slli	r3,r3,6
8113785c:	10c5883a 	add	r2,r2,r3
81137860:	10800b04 	addi	r2,r2,44
81137864:	10800017 	ldw	r2,0(r2)
81137868:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
8113786c:	e0ffff0f 	ldh	r3,-4(fp)
81137870:	00a04574 	movhi	r2,33045
81137874:	1080be04 	addi	r2,r2,760
81137878:	180691ba 	slli	r3,r3,6
8113787c:	10c5883a 	add	r2,r2,r3
81137880:	10800a04 	addi	r2,r2,40
81137884:	10800017 	ldw	r2,0(r2)
81137888:	1000071e 	bne	r2,zero,811378a8 <alt_up_sd_card_fclose+0xd0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
8113788c:	00a04574 	movhi	r2,33045
81137890:	1080a904 	addi	r2,r2,676
81137894:	10801317 	ldw	r2,76(r2)
81137898:	e0fffe17 	ldw	r3,-8(fp)
8113789c:	1885883a 	add	r2,r3,r2
811378a0:	e0bffe15 	stw	r2,-8(fp)
811378a4:	00001406 	br	811378f8 <alt_up_sd_card_fclose+0x120>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
811378a8:	00a04574 	movhi	r2,33045
811378ac:	1080a904 	addi	r2,r2,676
811378b0:	10c01417 	ldw	r3,80(r2)
811378b4:	e0bffe17 	ldw	r2,-8(fp)
811378b8:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
811378bc:	e13fff0f 	ldh	r4,-4(fp)
811378c0:	00a04574 	movhi	r2,33045
811378c4:	1080be04 	addi	r2,r2,760
811378c8:	200891ba 	slli	r4,r4,6
811378cc:	1105883a 	add	r2,r2,r4
811378d0:	10800a04 	addi	r2,r2,40
811378d4:	10800017 	ldw	r2,0(r2)
811378d8:	113fff84 	addi	r4,r2,-2
811378dc:	00a04574 	movhi	r2,33045
811378e0:	1080a904 	addi	r2,r2,676
811378e4:	10800383 	ldbu	r2,14(r2)
811378e8:	10803fcc 	andi	r2,r2,255
811378ec:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
811378f0:	1885883a 	add	r2,r3,r2
811378f4:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
811378f8:	e0bffe17 	ldw	r2,-8(fp)
811378fc:	d0e09a17 	ldw	r3,-32152(gp)
81137900:	180b883a 	mov	r5,r3
81137904:	1009883a 	mov	r4,r2
81137908:	11336dc0 	call	811336dc <Read_Sector_Data>
8113790c:	10001426 	beq	r2,zero,81137960 <alt_up_sd_card_fclose+0x188>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
81137910:	e0ffff0f 	ldh	r3,-4(fp)
81137914:	00a04574 	movhi	r2,33045
81137918:	1080be04 	addi	r2,r2,760
8113791c:	180691ba 	slli	r3,r3,6
81137920:	10c5883a 	add	r2,r2,r3
81137924:	10800c04 	addi	r2,r2,48
81137928:	1080000b 	ldhu	r2,0(r2)
8113792c:	113fffcc 	andi	r4,r2,65535
81137930:	2120001c 	xori	r4,r4,32768
81137934:	21200004 	addi	r4,r4,-32768
81137938:	e0bfff0f 	ldh	r2,-4(fp)
8113793c:	100691ba 	slli	r3,r2,6
81137940:	00a04574 	movhi	r2,33045
81137944:	1080be04 	addi	r2,r2,760
81137948:	1885883a 	add	r2,r3,r2
8113794c:	100b883a 	mov	r5,r2
81137950:	1133d900 	call	81133d90 <Write_File_Record_At_Offset>
81137954:	10000226 	beq	r2,zero,81137960 <alt_up_sd_card_fclose+0x188>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
81137958:	11336880 	call	81133688 <Save_Modified_Sector>
8113795c:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
81137960:	e0ffff0f 	ldh	r3,-4(fp)
81137964:	00a04574 	movhi	r2,33045
81137968:	1080be04 	addi	r2,r2,760
8113796c:	180691ba 	slli	r3,r3,6
81137970:	10c5883a 	add	r2,r2,r3
81137974:	10800f04 	addi	r2,r2,60
81137978:	10000015 	stw	zero,0(r2)
			result = true;
8113797c:	00800044 	movi	r2,1
81137980:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
81137984:	e0bffd17 	ldw	r2,-12(fp)
}
81137988:	e037883a 	mov	sp,fp
8113798c:	dfc00117 	ldw	ra,4(sp)
81137990:	df000017 	ldw	fp,0(sp)
81137994:	dec00204 	addi	sp,sp,8
81137998:	f800283a 	ret

8113799c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8113799c:	defffa04 	addi	sp,sp,-24
811379a0:	de00012e 	bgeu	sp,et,811379a8 <altera_avalon_jtag_uart_read_fd+0xc>
811379a4:	003b68fa 	trap	3
811379a8:	dfc00515 	stw	ra,20(sp)
811379ac:	df000415 	stw	fp,16(sp)
811379b0:	df000404 	addi	fp,sp,16
811379b4:	e13ffd15 	stw	r4,-12(fp)
811379b8:	e17ffe15 	stw	r5,-8(fp)
811379bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811379c0:	e0bffd17 	ldw	r2,-12(fp)
811379c4:	10800017 	ldw	r2,0(r2)
811379c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
811379cc:	e0bffc17 	ldw	r2,-16(fp)
811379d0:	10c00a04 	addi	r3,r2,40
811379d4:	e0bffd17 	ldw	r2,-12(fp)
811379d8:	10800217 	ldw	r2,8(r2)
811379dc:	100f883a 	mov	r7,r2
811379e0:	e1bfff17 	ldw	r6,-4(fp)
811379e4:	e17ffe17 	ldw	r5,-8(fp)
811379e8:	1809883a 	mov	r4,r3
811379ec:	11382200 	call	81138220 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
811379f0:	e037883a 	mov	sp,fp
811379f4:	dfc00117 	ldw	ra,4(sp)
811379f8:	df000017 	ldw	fp,0(sp)
811379fc:	dec00204 	addi	sp,sp,8
81137a00:	f800283a 	ret

81137a04 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81137a04:	defffa04 	addi	sp,sp,-24
81137a08:	de00012e 	bgeu	sp,et,81137a10 <altera_avalon_jtag_uart_write_fd+0xc>
81137a0c:	003b68fa 	trap	3
81137a10:	dfc00515 	stw	ra,20(sp)
81137a14:	df000415 	stw	fp,16(sp)
81137a18:	df000404 	addi	fp,sp,16
81137a1c:	e13ffd15 	stw	r4,-12(fp)
81137a20:	e17ffe15 	stw	r5,-8(fp)
81137a24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81137a28:	e0bffd17 	ldw	r2,-12(fp)
81137a2c:	10800017 	ldw	r2,0(r2)
81137a30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81137a34:	e0bffc17 	ldw	r2,-16(fp)
81137a38:	10c00a04 	addi	r3,r2,40
81137a3c:	e0bffd17 	ldw	r2,-12(fp)
81137a40:	10800217 	ldw	r2,8(r2)
81137a44:	100f883a 	mov	r7,r2
81137a48:	e1bfff17 	ldw	r6,-4(fp)
81137a4c:	e17ffe17 	ldw	r5,-8(fp)
81137a50:	1809883a 	mov	r4,r3
81137a54:	11384e40 	call	811384e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
81137a58:	e037883a 	mov	sp,fp
81137a5c:	dfc00117 	ldw	ra,4(sp)
81137a60:	df000017 	ldw	fp,0(sp)
81137a64:	dec00204 	addi	sp,sp,8
81137a68:	f800283a 	ret

81137a6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81137a6c:	defffc04 	addi	sp,sp,-16
81137a70:	de00012e 	bgeu	sp,et,81137a78 <altera_avalon_jtag_uart_close_fd+0xc>
81137a74:	003b68fa 	trap	3
81137a78:	dfc00315 	stw	ra,12(sp)
81137a7c:	df000215 	stw	fp,8(sp)
81137a80:	df000204 	addi	fp,sp,8
81137a84:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81137a88:	e0bfff17 	ldw	r2,-4(fp)
81137a8c:	10800017 	ldw	r2,0(r2)
81137a90:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81137a94:	e0bffe17 	ldw	r2,-8(fp)
81137a98:	10c00a04 	addi	r3,r2,40
81137a9c:	e0bfff17 	ldw	r2,-4(fp)
81137aa0:	10800217 	ldw	r2,8(r2)
81137aa4:	100b883a 	mov	r5,r2
81137aa8:	1809883a 	mov	r4,r3
81137aac:	11380b80 	call	811380b8 <altera_avalon_jtag_uart_close>
}
81137ab0:	e037883a 	mov	sp,fp
81137ab4:	dfc00117 	ldw	ra,4(sp)
81137ab8:	df000017 	ldw	fp,0(sp)
81137abc:	dec00204 	addi	sp,sp,8
81137ac0:	f800283a 	ret

81137ac4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81137ac4:	defffa04 	addi	sp,sp,-24
81137ac8:	de00012e 	bgeu	sp,et,81137ad0 <altera_avalon_jtag_uart_ioctl_fd+0xc>
81137acc:	003b68fa 	trap	3
81137ad0:	dfc00515 	stw	ra,20(sp)
81137ad4:	df000415 	stw	fp,16(sp)
81137ad8:	df000404 	addi	fp,sp,16
81137adc:	e13ffd15 	stw	r4,-12(fp)
81137ae0:	e17ffe15 	stw	r5,-8(fp)
81137ae4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
81137ae8:	e0bffd17 	ldw	r2,-12(fp)
81137aec:	10800017 	ldw	r2,0(r2)
81137af0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81137af4:	e0bffc17 	ldw	r2,-16(fp)
81137af8:	10800a04 	addi	r2,r2,40
81137afc:	e1bfff17 	ldw	r6,-4(fp)
81137b00:	e17ffe17 	ldw	r5,-8(fp)
81137b04:	1009883a 	mov	r4,r2
81137b08:	11381280 	call	81138128 <altera_avalon_jtag_uart_ioctl>
}
81137b0c:	e037883a 	mov	sp,fp
81137b10:	dfc00117 	ldw	ra,4(sp)
81137b14:	df000017 	ldw	fp,0(sp)
81137b18:	dec00204 	addi	sp,sp,8
81137b1c:	f800283a 	ret

81137b20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
81137b20:	deffef04 	addi	sp,sp,-68
81137b24:	de00012e 	bgeu	sp,et,81137b2c <altera_avalon_jtag_uart_init+0xc>
81137b28:	003b68fa 	trap	3
81137b2c:	dfc01015 	stw	ra,64(sp)
81137b30:	df000f15 	stw	fp,60(sp)
81137b34:	dc400e15 	stw	r17,56(sp)
81137b38:	dc000d15 	stw	r16,52(sp)
81137b3c:	df000f04 	addi	fp,sp,60
81137b40:	e13ff715 	stw	r4,-36(fp)
81137b44:	e17ff815 	stw	r5,-32(fp)
81137b48:	e1bff915 	stw	r6,-28(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
81137b4c:	e0bff717 	ldw	r2,-36(fp)
81137b50:	10800c04 	addi	r2,r2,48
81137b54:	e0bff215 	stw	r2,-56(fp)
81137b58:	e03ff60d 	sth	zero,-40(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81137b5c:	e0bff60b 	ldhu	r2,-40(fp)
81137b60:	e0fff684 	addi	r3,fp,-38
81137b64:	180b883a 	mov	r5,r3
81137b68:	1009883a 	mov	r4,r2
81137b6c:	112bcf00 	call	8112bcf0 <OSFlagCreate>
81137b70:	1007883a 	mov	r3,r2
81137b74:	e0bff217 	ldw	r2,-56(fp)
81137b78:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
81137b7c:	e0bff717 	ldw	r2,-36(fp)
81137b80:	10800a04 	addi	r2,r2,40
81137b84:	e0bff315 	stw	r2,-52(fp)
81137b88:	00800044 	movi	r2,1
81137b8c:	e0bff58d 	sth	r2,-42(fp)
81137b90:	e0bff58b 	ldhu	r2,-42(fp)
81137b94:	1009883a 	mov	r4,r2
81137b98:	112fc4c0 	call	8112fc4c <OSSemCreate>
81137b9c:	1007883a 	mov	r3,r2
81137ba0:	e0bff317 	ldw	r2,-52(fp)
81137ba4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
81137ba8:	e0bff717 	ldw	r2,-36(fp)
81137bac:	10800b04 	addi	r2,r2,44
81137bb0:	e0bff415 	stw	r2,-48(fp)
81137bb4:	00800044 	movi	r2,1
81137bb8:	e0bff50d 	sth	r2,-44(fp)
81137bbc:	e0bff50b 	ldhu	r2,-44(fp)
81137bc0:	1009883a 	mov	r4,r2
81137bc4:	112fc4c0 	call	8112fc4c <OSSemCreate>
81137bc8:	1007883a 	mov	r3,r2
81137bcc:	e0bff417 	ldw	r2,-48(fp)
81137bd0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81137bd4:	e0bff717 	ldw	r2,-36(fp)
81137bd8:	00c00044 	movi	r3,1
81137bdc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81137be0:	e0bff717 	ldw	r2,-36(fp)
81137be4:	10800017 	ldw	r2,0(r2)
81137be8:	10800104 	addi	r2,r2,4
81137bec:	1007883a 	mov	r3,r2
81137bf0:	e0bff717 	ldw	r2,-36(fp)
81137bf4:	10800817 	ldw	r2,32(r2)
81137bf8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
81137bfc:	e0bff817 	ldw	r2,-32(fp)
81137c00:	e0fff917 	ldw	r3,-28(fp)
81137c04:	d8000015 	stw	zero,0(sp)
81137c08:	e1fff717 	ldw	r7,-36(fp)
81137c0c:	01a044f4 	movhi	r6,33043
81137c10:	319f3c04 	addi	r6,r6,31984
81137c14:	180b883a 	mov	r5,r3
81137c18:	1009883a 	mov	r4,r2
81137c1c:	113bb080 	call	8113bb08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
81137c20:	e0bff717 	ldw	r2,-36(fp)
81137c24:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
81137c28:	e0bff717 	ldw	r2,-36(fp)
81137c2c:	10800204 	addi	r2,r2,8
81137c30:	d0e07117 	ldw	r3,-32316(gp)
81137c34:	e1fff717 	ldw	r7,-36(fp)
81137c38:	01a044f4 	movhi	r6,33043
81137c3c:	319feb04 	addi	r6,r6,32684
81137c40:	180b883a 	mov	r5,r3
81137c44:	1009883a 	mov	r4,r2
81137c48:	113b5880 	call	8113b588 <alt_alarm_start>
81137c4c:	1000040e 	bge	r2,zero,81137c60 <altera_avalon_jtag_uart_init+0x140>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
81137c50:	e0fff717 	ldw	r3,-36(fp)
81137c54:	00a00034 	movhi	r2,32768
81137c58:	10bfffc4 	addi	r2,r2,-1
81137c5c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
81137c60:	d0a06a83 	ldbu	r2,-32342(gp)
81137c64:	10803fcc 	andi	r2,r2,255
81137c68:	10800058 	cmpnei	r2,r2,1
81137c6c:	10000f1e 	bne	r2,zero,81137cac <altera_avalon_jtag_uart_init+0x18c>
81137c70:	d0e07117 	ldw	r3,-32316(gp)
81137c74:	00b33374 	movhi	r2,52429
81137c78:	10b33344 	addi	r2,r2,-13107
81137c7c:	1888383a 	mulxuu	r4,r3,r2
81137c80:	1885383a 	mul	r2,r3,r2
81137c84:	1021883a 	mov	r16,r2
81137c88:	2023883a 	mov	r17,r4
81137c8c:	8804d0fa 	srli	r2,r17,3
81137c90:	e1fff717 	ldw	r7,-36(fp)
81137c94:	01a044f4 	movhi	r6,33043
81137c98:	31a0d704 	addi	r6,r6,-31908
81137c9c:	100b883a 	mov	r5,r2
81137ca0:	01204574 	movhi	r4,33045
81137ca4:	212f0704 	addi	r4,r4,-17380
81137ca8:	113b5880 	call	8113b588 <alt_alarm_start>
81137cac:	d0a06b03 	ldbu	r2,-32340(gp)
81137cb0:	10803fcc 	andi	r2,r2,255
81137cb4:	10800058 	cmpnei	r2,r2,1
81137cb8:	1000051e 	bne	r2,zero,81137cd0 <altera_avalon_jtag_uart_init+0x1b0>
81137cbc:	e0bff717 	ldw	r2,-36(fp)
81137cc0:	10800017 	ldw	r2,0(r2)
81137cc4:	100b883a 	mov	r5,r2
81137cc8:	e13ff717 	ldw	r4,-36(fp)
81137ccc:	11284f40 	call	811284f4 <alt_log_jtag_uart_startup_info>
}
81137cd0:	0001883a 	nop
81137cd4:	e6fffe04 	addi	sp,fp,-8
81137cd8:	dfc00317 	ldw	ra,12(sp)
81137cdc:	df000217 	ldw	fp,8(sp)
81137ce0:	dc400117 	ldw	r17,4(sp)
81137ce4:	dc000017 	ldw	r16,0(sp)
81137ce8:	dec00404 	addi	sp,sp,16
81137cec:	f800283a 	ret

81137cf0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81137cf0:	defff204 	addi	sp,sp,-56
81137cf4:	de00012e 	bgeu	sp,et,81137cfc <altera_avalon_jtag_uart_irq+0xc>
81137cf8:	003b68fa 	trap	3
81137cfc:	dfc00d15 	stw	ra,52(sp)
81137d00:	df000c15 	stw	fp,48(sp)
81137d04:	df000c04 	addi	fp,sp,48
81137d08:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81137d0c:	e0bfff17 	ldw	r2,-4(fp)
81137d10:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
81137d14:	e0bff617 	ldw	r2,-40(fp)
81137d18:	10800017 	ldw	r2,0(r2)
81137d1c:	e0bff715 	stw	r2,-36(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);
81137d20:	e0bff717 	ldw	r2,-36(fp)
81137d24:	e17ff617 	ldw	r5,-40(fp)
81137d28:	1009883a 	mov	r4,r2
81137d2c:	11285480 	call	81128548 <alt_log_jtag_uart_isr_proc>

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81137d30:	e0bff717 	ldw	r2,-36(fp)
81137d34:	10800104 	addi	r2,r2,4
81137d38:	10800037 	ldwio	r2,0(r2)
81137d3c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81137d40:	e0bff817 	ldw	r2,-32(fp)
81137d44:	1080c00c 	andi	r2,r2,768
81137d48:	10009126 	beq	r2,zero,81137f90 <altera_avalon_jtag_uart_irq+0x2a0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81137d4c:	e0bff817 	ldw	r2,-32(fp)
81137d50:	1080400c 	andi	r2,r2,256
81137d54:	10004726 	beq	r2,zero,81137e74 <altera_avalon_jtag_uart_irq+0x184>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81137d58:	00800074 	movhi	r2,1
81137d5c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81137d60:	e0bff617 	ldw	r2,-40(fp)
81137d64:	10800d17 	ldw	r2,52(r2)
81137d68:	10800044 	addi	r2,r2,1
81137d6c:	1081ffcc 	andi	r2,r2,2047
81137d70:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
81137d74:	e0bff617 	ldw	r2,-40(fp)
81137d78:	10c00e17 	ldw	r3,56(r2)
81137d7c:	e0bff917 	ldw	r2,-28(fp)
81137d80:	18802726 	beq	r3,r2,81137e20 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
81137d84:	e0bff717 	ldw	r2,-36(fp)
81137d88:	10800037 	ldwio	r2,0(r2)
81137d8c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
81137d90:	e0bff417 	ldw	r2,-48(fp)
81137d94:	10a0000c 	andi	r2,r2,32768
81137d98:	10002326 	beq	r2,zero,81137e28 <altera_avalon_jtag_uart_irq+0x138>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
81137d9c:	e0bff617 	ldw	r2,-40(fp)
81137da0:	10800d17 	ldw	r2,52(r2)
81137da4:	e0fff417 	ldw	r3,-48(fp)
81137da8:	1809883a 	mov	r4,r3
81137dac:	e0fff617 	ldw	r3,-40(fp)
81137db0:	1885883a 	add	r2,r3,r2
81137db4:	10801104 	addi	r2,r2,68
81137db8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81137dbc:	e0bff617 	ldw	r2,-40(fp)
81137dc0:	10800d17 	ldw	r2,52(r2)
81137dc4:	10800044 	addi	r2,r2,1
81137dc8:	10c1ffcc 	andi	r3,r2,2047
81137dcc:	e0bff617 	ldw	r2,-40(fp)
81137dd0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
81137dd4:	e0bff617 	ldw	r2,-40(fp)
81137dd8:	10800c17 	ldw	r2,48(r2)
81137ddc:	e0bffb15 	stw	r2,-20(fp)
81137de0:	00800044 	movi	r2,1
81137de4:	e0bffc0d 	sth	r2,-16(fp)
81137de8:	00800044 	movi	r2,1
81137dec:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81137df0:	d0a07a03 	ldbu	r2,-32280(gp)
81137df4:	10803fcc 	andi	r2,r2,255
81137df8:	103fd926 	beq	r2,zero,81137d60 <__reset+0xfb117d60>
  {
    OSFlagPost (group, flags, opt, &err);
81137dfc:	e0bffc0b 	ldhu	r2,-16(fp)
81137e00:	e0fffc83 	ldbu	r3,-14(fp)
81137e04:	e13ffdc4 	addi	r4,fp,-9
81137e08:	200f883a 	mov	r7,r4
81137e0c:	180d883a 	mov	r6,r3
81137e10:	100b883a 	mov	r5,r2
81137e14:	e13ffb17 	ldw	r4,-20(fp)
81137e18:	112c8fc0 	call	8112c8fc <OSFlagPost>
      }
81137e1c:	003fd006 	br	81137d60 <__reset+0xfb117d60>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81137e20:	0001883a 	nop
81137e24:	00000106 	br	81137e2c <altera_avalon_jtag_uart_irq+0x13c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81137e28:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
81137e2c:	e0bff417 	ldw	r2,-48(fp)
81137e30:	10bfffec 	andhi	r2,r2,65535
81137e34:	10000f26 	beq	r2,zero,81137e74 <altera_avalon_jtag_uart_irq+0x184>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81137e38:	e0bff617 	ldw	r2,-40(fp)
81137e3c:	10c00817 	ldw	r3,32(r2)
81137e40:	00bfff84 	movi	r2,-2
81137e44:	1886703a 	and	r3,r3,r2
81137e48:	e0bff617 	ldw	r2,-40(fp)
81137e4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81137e50:	e0bff717 	ldw	r2,-36(fp)
81137e54:	10800104 	addi	r2,r2,4
81137e58:	1007883a 	mov	r3,r2
81137e5c:	e0bff617 	ldw	r2,-40(fp)
81137e60:	10800817 	ldw	r2,32(r2)
81137e64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81137e68:	e0bff717 	ldw	r2,-36(fp)
81137e6c:	10800104 	addi	r2,r2,4
81137e70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81137e74:	e0bff817 	ldw	r2,-32(fp)
81137e78:	1080800c 	andi	r2,r2,512
81137e7c:	103fac26 	beq	r2,zero,81137d30 <__reset+0xfb117d30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81137e80:	e0bff817 	ldw	r2,-32(fp)
81137e84:	1004d43a 	srli	r2,r2,16
81137e88:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
81137e8c:	00002606 	br	81137f28 <altera_avalon_jtag_uart_irq+0x238>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
81137e90:	e0bff717 	ldw	r2,-36(fp)
81137e94:	e0fff617 	ldw	r3,-40(fp)
81137e98:	18c01017 	ldw	r3,64(r3)
81137e9c:	e13ff617 	ldw	r4,-40(fp)
81137ea0:	20c7883a 	add	r3,r4,r3
81137ea4:	18c21104 	addi	r3,r3,2116
81137ea8:	18c00003 	ldbu	r3,0(r3)
81137eac:	18c03fcc 	andi	r3,r3,255
81137eb0:	18c0201c 	xori	r3,r3,128
81137eb4:	18ffe004 	addi	r3,r3,-128
81137eb8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81137ebc:	e0bff617 	ldw	r2,-40(fp)
81137ec0:	10801017 	ldw	r2,64(r2)
81137ec4:	10800044 	addi	r2,r2,1
81137ec8:	10c1ffcc 	andi	r3,r2,2047
81137ecc:	e0bff617 	ldw	r2,-40(fp)
81137ed0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
81137ed4:	e0bff617 	ldw	r2,-40(fp)
81137ed8:	10800c17 	ldw	r2,48(r2)
81137edc:	e0bffa15 	stw	r2,-24(fp)
81137ee0:	00800084 	movi	r2,2
81137ee4:	e0bffd0d 	sth	r2,-12(fp)
81137ee8:	00800044 	movi	r2,1
81137eec:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81137ef0:	d0a07a03 	ldbu	r2,-32280(gp)
81137ef4:	10803fcc 	andi	r2,r2,255
81137ef8:	10000826 	beq	r2,zero,81137f1c <altera_avalon_jtag_uart_irq+0x22c>
  {
    OSFlagPost (group, flags, opt, &err);
81137efc:	e0bffd0b 	ldhu	r2,-12(fp)
81137f00:	e0fffd83 	ldbu	r3,-10(fp)
81137f04:	e13ffe04 	addi	r4,fp,-8
81137f08:	200f883a 	mov	r7,r4
81137f0c:	180d883a 	mov	r6,r3
81137f10:	100b883a 	mov	r5,r2
81137f14:	e13ffa17 	ldw	r4,-24(fp)
81137f18:	112c8fc0 	call	8112c8fc <OSFlagPost>

        space--;
81137f1c:	e0bff517 	ldw	r2,-44(fp)
81137f20:	10bfffc4 	addi	r2,r2,-1
81137f24:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
81137f28:	e0bff517 	ldw	r2,-44(fp)
81137f2c:	10000526 	beq	r2,zero,81137f44 <altera_avalon_jtag_uart_irq+0x254>
81137f30:	e0bff617 	ldw	r2,-40(fp)
81137f34:	10c01017 	ldw	r3,64(r2)
81137f38:	e0bff617 	ldw	r2,-40(fp)
81137f3c:	10800f17 	ldw	r2,60(r2)
81137f40:	18bfd31e 	bne	r3,r2,81137e90 <__reset+0xfb117e90>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
81137f44:	e0bff517 	ldw	r2,-44(fp)
81137f48:	103f7926 	beq	r2,zero,81137d30 <__reset+0xfb117d30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81137f4c:	e0bff617 	ldw	r2,-40(fp)
81137f50:	10c00817 	ldw	r3,32(r2)
81137f54:	00bfff44 	movi	r2,-3
81137f58:	1886703a 	and	r3,r3,r2
81137f5c:	e0bff617 	ldw	r2,-40(fp)
81137f60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81137f64:	e0bff617 	ldw	r2,-40(fp)
81137f68:	10800017 	ldw	r2,0(r2)
81137f6c:	10800104 	addi	r2,r2,4
81137f70:	1007883a 	mov	r3,r2
81137f74:	e0bff617 	ldw	r2,-40(fp)
81137f78:	10800817 	ldw	r2,32(r2)
81137f7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81137f80:	e0bff717 	ldw	r2,-36(fp)
81137f84:	10800104 	addi	r2,r2,4
81137f88:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81137f8c:	003f6806 	br	81137d30 <__reset+0xfb117d30>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81137f90:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
81137f94:	0001883a 	nop
81137f98:	e037883a 	mov	sp,fp
81137f9c:	dfc00117 	ldw	ra,4(sp)
81137fa0:	df000017 	ldw	fp,0(sp)
81137fa4:	dec00204 	addi	sp,sp,8
81137fa8:	f800283a 	ret

81137fac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81137fac:	defff904 	addi	sp,sp,-28
81137fb0:	de00012e 	bgeu	sp,et,81137fb8 <altera_avalon_jtag_uart_timeout+0xc>
81137fb4:	003b68fa 	trap	3
81137fb8:	dfc00615 	stw	ra,24(sp)
81137fbc:	df000515 	stw	fp,20(sp)
81137fc0:	df000504 	addi	fp,sp,20
81137fc4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81137fc8:	e0bfff17 	ldw	r2,-4(fp)
81137fcc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81137fd0:	e0bffb17 	ldw	r2,-20(fp)
81137fd4:	10800017 	ldw	r2,0(r2)
81137fd8:	10800104 	addi	r2,r2,4
81137fdc:	10800037 	ldwio	r2,0(r2)
81137fe0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81137fe4:	e0bffc17 	ldw	r2,-16(fp)
81137fe8:	1081000c 	andi	r2,r2,1024
81137fec:	10000b26 	beq	r2,zero,8113801c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81137ff0:	e0bffb17 	ldw	r2,-20(fp)
81137ff4:	10800017 	ldw	r2,0(r2)
81137ff8:	10800104 	addi	r2,r2,4
81137ffc:	1007883a 	mov	r3,r2
81138000:	e0bffb17 	ldw	r2,-20(fp)
81138004:	10800817 	ldw	r2,32(r2)
81138008:	10810014 	ori	r2,r2,1024
8113800c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
81138010:	e0bffb17 	ldw	r2,-20(fp)
81138014:	10000915 	stw	zero,36(r2)
81138018:	00002106 	br	811380a0 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8113801c:	e0bffb17 	ldw	r2,-20(fp)
81138020:	10c00917 	ldw	r3,36(r2)
81138024:	00a00034 	movhi	r2,32768
81138028:	10bfff04 	addi	r2,r2,-4
8113802c:	10c01c36 	bltu	r2,r3,811380a0 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
81138030:	e0bffb17 	ldw	r2,-20(fp)
81138034:	10800917 	ldw	r2,36(r2)
81138038:	10c00044 	addi	r3,r2,1
8113803c:	e0bffb17 	ldw	r2,-20(fp)
81138040:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
81138044:	e0bffb17 	ldw	r2,-20(fp)
81138048:	10c00917 	ldw	r3,36(r2)
8113804c:	e0bffb17 	ldw	r2,-20(fp)
81138050:	10800117 	ldw	r2,4(r2)
81138054:	18801236 	bltu	r3,r2,811380a0 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
81138058:	e0bffb17 	ldw	r2,-20(fp)
8113805c:	10800c17 	ldw	r2,48(r2)
81138060:	e0bffd15 	stw	r2,-12(fp)
81138064:	00800104 	movi	r2,4
81138068:	e0bffe0d 	sth	r2,-8(fp)
8113806c:	00800044 	movi	r2,1
81138070:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81138074:	d0a07a03 	ldbu	r2,-32280(gp)
81138078:	10803fcc 	andi	r2,r2,255
8113807c:	10000826 	beq	r2,zero,811380a0 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
81138080:	e0bffe0b 	ldhu	r2,-8(fp)
81138084:	e0fffe83 	ldbu	r3,-6(fp)
81138088:	e13ffec4 	addi	r4,fp,-5
8113808c:	200f883a 	mov	r7,r4
81138090:	180d883a 	mov	r6,r3
81138094:	100b883a 	mov	r5,r2
81138098:	e13ffd17 	ldw	r4,-12(fp)
8113809c:	112c8fc0 	call	8112c8fc <OSFlagPost>
811380a0:	d0a07117 	ldw	r2,-32316(gp)
    }
  }

  return alt_ticks_per_second();
}
811380a4:	e037883a 	mov	sp,fp
811380a8:	dfc00117 	ldw	ra,4(sp)
811380ac:	df000017 	ldw	fp,0(sp)
811380b0:	dec00204 	addi	sp,sp,8
811380b4:	f800283a 	ret

811380b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
811380b8:	defffd04 	addi	sp,sp,-12
811380bc:	de00012e 	bgeu	sp,et,811380c4 <altera_avalon_jtag_uart_close+0xc>
811380c0:	003b68fa 	trap	3
811380c4:	df000215 	stw	fp,8(sp)
811380c8:	df000204 	addi	fp,sp,8
811380cc:	e13ffe15 	stw	r4,-8(fp)
811380d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
811380d4:	00000506 	br	811380ec <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
811380d8:	e0bfff17 	ldw	r2,-4(fp)
811380dc:	1090000c 	andi	r2,r2,16384
811380e0:	10000226 	beq	r2,zero,811380ec <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
811380e4:	00bffd44 	movi	r2,-11
811380e8:	00000b06 	br	81138118 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
811380ec:	e0bffe17 	ldw	r2,-8(fp)
811380f0:	10c01017 	ldw	r3,64(r2)
811380f4:	e0bffe17 	ldw	r2,-8(fp)
811380f8:	10800f17 	ldw	r2,60(r2)
811380fc:	18800526 	beq	r3,r2,81138114 <altera_avalon_jtag_uart_close+0x5c>
81138100:	e0bffe17 	ldw	r2,-8(fp)
81138104:	10c00917 	ldw	r3,36(r2)
81138108:	e0bffe17 	ldw	r2,-8(fp)
8113810c:	10800117 	ldw	r2,4(r2)
81138110:	18bff136 	bltu	r3,r2,811380d8 <__reset+0xfb1180d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81138114:	0005883a 	mov	r2,zero
}
81138118:	e037883a 	mov	sp,fp
8113811c:	df000017 	ldw	fp,0(sp)
81138120:	dec00104 	addi	sp,sp,4
81138124:	f800283a 	ret

81138128 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81138128:	defffa04 	addi	sp,sp,-24
8113812c:	de00012e 	bgeu	sp,et,81138134 <altera_avalon_jtag_uart_ioctl+0xc>
81138130:	003b68fa 	trap	3
81138134:	df000515 	stw	fp,20(sp)
81138138:	df000504 	addi	fp,sp,20
8113813c:	e13ffd15 	stw	r4,-12(fp)
81138140:	e17ffe15 	stw	r5,-8(fp)
81138144:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81138148:	00bff9c4 	movi	r2,-25
8113814c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81138150:	e0bffe17 	ldw	r2,-8(fp)
81138154:	10da8060 	cmpeqi	r3,r2,27137
81138158:	1800031e 	bne	r3,zero,81138168 <altera_avalon_jtag_uart_ioctl+0x40>
8113815c:	109a80a0 	cmpeqi	r2,r2,27138
81138160:	1000181e 	bne	r2,zero,811381c4 <altera_avalon_jtag_uart_ioctl+0x9c>
      rc = 0;
    }
    break;

  default:
    break;
81138164:	00002906 	br	8113820c <altera_avalon_jtag_uart_ioctl+0xe4>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
81138168:	e0bffd17 	ldw	r2,-12(fp)
8113816c:	10c00117 	ldw	r3,4(r2)
81138170:	00a00034 	movhi	r2,32768
81138174:	10bfffc4 	addi	r2,r2,-1
81138178:	18802126 	beq	r3,r2,81138200 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
8113817c:	e0bfff17 	ldw	r2,-4(fp)
81138180:	10800017 	ldw	r2,0(r2)
81138184:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
81138188:	e0bffc17 	ldw	r2,-16(fp)
8113818c:	10800090 	cmplti	r2,r2,2
81138190:	1000061e 	bne	r2,zero,811381ac <altera_avalon_jtag_uart_ioctl+0x84>
81138194:	e0fffc17 	ldw	r3,-16(fp)
81138198:	00a00034 	movhi	r2,32768
8113819c:	10bfffc4 	addi	r2,r2,-1
811381a0:	18800226 	beq	r3,r2,811381ac <altera_avalon_jtag_uart_ioctl+0x84>
811381a4:	e0bffc17 	ldw	r2,-16(fp)
811381a8:	00000206 	br	811381b4 <altera_avalon_jtag_uart_ioctl+0x8c>
811381ac:	00a00034 	movhi	r2,32768
811381b0:	10bfff84 	addi	r2,r2,-2
811381b4:	e0fffd17 	ldw	r3,-12(fp)
811381b8:	18800115 	stw	r2,4(r3)
      rc = 0;
811381bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
811381c0:	00000f06 	br	81138200 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
811381c4:	e0bffd17 	ldw	r2,-12(fp)
811381c8:	10c00117 	ldw	r3,4(r2)
811381cc:	00a00034 	movhi	r2,32768
811381d0:	10bfffc4 	addi	r2,r2,-1
811381d4:	18800c26 	beq	r3,r2,81138208 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
811381d8:	e0bffd17 	ldw	r2,-12(fp)
811381dc:	10c00917 	ldw	r3,36(r2)
811381e0:	e0bffd17 	ldw	r2,-12(fp)
811381e4:	10800117 	ldw	r2,4(r2)
811381e8:	1885803a 	cmpltu	r2,r3,r2
811381ec:	10c03fcc 	andi	r3,r2,255
811381f0:	e0bfff17 	ldw	r2,-4(fp)
811381f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
811381f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
811381fc:	00000206 	br	81138208 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81138200:	0001883a 	nop
81138204:	00000106 	br	8113820c <altera_avalon_jtag_uart_ioctl+0xe4>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81138208:	0001883a 	nop

  default:
    break;
  }

  return rc;
8113820c:	e0bffb17 	ldw	r2,-20(fp)
}
81138210:	e037883a 	mov	sp,fp
81138214:	df000017 	ldw	fp,0(sp)
81138218:	dec00104 	addi	sp,sp,4
8113821c:	f800283a 	ret

81138220 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81138220:	deffed04 	addi	sp,sp,-76
81138224:	de00012e 	bgeu	sp,et,8113822c <altera_avalon_jtag_uart_read+0xc>
81138228:	003b68fa 	trap	3
8113822c:	dfc01215 	stw	ra,72(sp)
81138230:	df001115 	stw	fp,68(sp)
81138234:	df001104 	addi	fp,sp,68
81138238:	e13ffc15 	stw	r4,-16(fp)
8113823c:	e17ffd15 	stw	r5,-12(fp)
81138240:	e1bffe15 	stw	r6,-8(fp)
81138244:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81138248:	e0bffd17 	ldw	r2,-12(fp)
8113824c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
81138250:	e0bffc17 	ldw	r2,-16(fp)
81138254:	10800a17 	ldw	r2,40(r2)
81138258:	e0bff815 	stw	r2,-32(fp)
8113825c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81138260:	e0bff90b 	ldhu	r2,-28(fp)
81138264:	e0fffb04 	addi	r3,fp,-20
81138268:	180d883a 	mov	r6,r3
8113826c:	100b883a 	mov	r5,r2
81138270:	e13ff817 	ldw	r4,-32(fp)
81138274:	112ff740 	call	8112ff74 <OSSemPend>

  while (space > 0)
81138278:	00006106 	br	81138400 <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8113827c:	e0bffc17 	ldw	r2,-16(fp)
81138280:	10800d17 	ldw	r2,52(r2)
81138284:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
81138288:	e0bffc17 	ldw	r2,-16(fp)
8113828c:	10800e17 	ldw	r2,56(r2)
81138290:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
81138294:	e0fff317 	ldw	r3,-52(fp)
81138298:	e0bff417 	ldw	r2,-48(fp)
8113829c:	18800536 	bltu	r3,r2,811382b4 <altera_avalon_jtag_uart_read+0x94>
        n = in - out;
811382a0:	e0fff317 	ldw	r3,-52(fp)
811382a4:	e0bff417 	ldw	r2,-48(fp)
811382a8:	1885c83a 	sub	r2,r3,r2
811382ac:	e0bff115 	stw	r2,-60(fp)
811382b0:	00000406 	br	811382c4 <altera_avalon_jtag_uart_read+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
811382b4:	00c20004 	movi	r3,2048
811382b8:	e0bff417 	ldw	r2,-48(fp)
811382bc:	1885c83a 	sub	r2,r3,r2
811382c0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
811382c4:	e0bff117 	ldw	r2,-60(fp)
811382c8:	10001e26 	beq	r2,zero,81138344 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */

      if (n > space)
811382cc:	e0fffe17 	ldw	r3,-8(fp)
811382d0:	e0bff117 	ldw	r2,-60(fp)
811382d4:	1880022e 	bgeu	r3,r2,811382e0 <altera_avalon_jtag_uart_read+0xc0>
        n = space;
811382d8:	e0bffe17 	ldw	r2,-8(fp)
811382dc:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
811382e0:	e0bffc17 	ldw	r2,-16(fp)
811382e4:	10c01104 	addi	r3,r2,68
811382e8:	e0bff417 	ldw	r2,-48(fp)
811382ec:	1885883a 	add	r2,r3,r2
811382f0:	e1bff117 	ldw	r6,-60(fp)
811382f4:	100b883a 	mov	r5,r2
811382f8:	e13ff017 	ldw	r4,-64(fp)
811382fc:	1112e840 	call	81112e84 <memcpy>
      ptr   += n;
81138300:	e0fff017 	ldw	r3,-64(fp)
81138304:	e0bff117 	ldw	r2,-60(fp)
81138308:	1885883a 	add	r2,r3,r2
8113830c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
81138310:	e0fffe17 	ldw	r3,-8(fp)
81138314:	e0bff117 	ldw	r2,-60(fp)
81138318:	1885c83a 	sub	r2,r3,r2
8113831c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81138320:	e0fff417 	ldw	r3,-48(fp)
81138324:	e0bff117 	ldw	r2,-60(fp)
81138328:	1885883a 	add	r2,r3,r2
8113832c:	10c1ffcc 	andi	r3,r2,2047
81138330:	e0bffc17 	ldw	r2,-16(fp)
81138334:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
81138338:	e0bffe17 	ldw	r2,-8(fp)
8113833c:	00bfcf16 	blt	zero,r2,8113827c <__reset+0xfb11827c>
81138340:	00000106 	br	81138348 <altera_avalon_jtag_uart_read+0x128>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81138344:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81138348:	e0fff017 	ldw	r3,-64(fp)
8113834c:	e0bffd17 	ldw	r2,-12(fp)
81138350:	18802e1e 	bne	r3,r2,8113840c <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81138354:	e0bfff17 	ldw	r2,-4(fp)
81138358:	1090000c 	andi	r2,r2,16384
8113835c:	10002d1e 	bne	r2,zero,81138414 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
81138360:	d0a07a03 	ldbu	r2,-32280(gp)
81138364:	10803fcc 	andi	r2,r2,255
81138368:	10800058 	cmpnei	r2,r2,1
8113836c:	1000161e 	bne	r2,zero,811383c8 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
81138370:	e0bffc17 	ldw	r2,-16(fp)
81138374:	10800c17 	ldw	r2,48(r2)
81138378:	e0bff215 	stw	r2,-56(fp)
8113837c:	00800144 	movi	r2,5
81138380:	e0bff98d 	sth	r2,-26(fp)
81138384:	00bfe0c4 	movi	r2,-125
81138388:	e0bffa05 	stb	r2,-24(fp)
8113838c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81138390:	d0a07a03 	ldbu	r2,-32280(gp)
81138394:	10803fcc 	andi	r2,r2,255
81138398:	10001526 	beq	r2,zero,811383f0 <altera_avalon_jtag_uart_read+0x1d0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113839c:	e0fff98b 	ldhu	r3,-26(fp)
811383a0:	e13ffa03 	ldbu	r4,-24(fp)
811383a4:	e17ffa8b 	ldhu	r5,-22(fp)
811383a8:	e0bffb44 	addi	r2,fp,-19
811383ac:	d8800015 	stw	r2,0(sp)
811383b0:	280f883a 	mov	r7,r5
811383b4:	200d883a 	mov	r6,r4
811383b8:	180b883a 	mov	r5,r3
811383bc:	e13ff217 	ldw	r4,-56(fp)
811383c0:	112c2d40 	call	8112c2d4 <OSFlagPend>
811383c4:	00000a06 	br	811383f0 <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
811383c8:	0001883a 	nop
811383cc:	e0bffc17 	ldw	r2,-16(fp)
811383d0:	10c00d17 	ldw	r3,52(r2)
811383d4:	e0bff317 	ldw	r2,-52(fp)
811383d8:	1880051e 	bne	r3,r2,811383f0 <altera_avalon_jtag_uart_read+0x1d0>
811383dc:	e0bffc17 	ldw	r2,-16(fp)
811383e0:	10c00917 	ldw	r3,36(r2)
811383e4:	e0bffc17 	ldw	r2,-16(fp)
811383e8:	10800117 	ldw	r2,4(r2)
811383ec:	18bff736 	bltu	r3,r2,811383cc <__reset+0xfb1183cc>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
811383f0:	e0bffc17 	ldw	r2,-16(fp)
811383f4:	10c00d17 	ldw	r3,52(r2)
811383f8:	e0bff317 	ldw	r2,-52(fp)
811383fc:	18800726 	beq	r3,r2,8113841c <altera_avalon_jtag_uart_read+0x1fc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81138400:	e0bffe17 	ldw	r2,-8(fp)
81138404:	00bf9d16 	blt	zero,r2,8113827c <__reset+0xfb11827c>
81138408:	00000506 	br	81138420 <altera_avalon_jtag_uart_read+0x200>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8113840c:	0001883a 	nop
81138410:	00000306 	br	81138420 <altera_avalon_jtag_uart_read+0x200>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81138414:	0001883a 	nop
81138418:	00000106 	br	81138420 <altera_avalon_jtag_uart_read+0x200>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8113841c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81138420:	e0bffc17 	ldw	r2,-16(fp)
81138424:	10800a17 	ldw	r2,40(r2)
81138428:	1009883a 	mov	r4,r2
8113842c:	11302fc0 	call	811302fc <OSSemPost>

  if (ptr != buffer)
81138430:	e0fff017 	ldw	r3,-64(fp)
81138434:	e0bffd17 	ldw	r2,-12(fp)
81138438:	18801826 	beq	r3,r2,8113849c <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113843c:	0005303a 	rdctl	r2,status
81138440:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138444:	e0fff717 	ldw	r3,-36(fp)
81138448:	00bfff84 	movi	r2,-2
8113844c:	1884703a 	and	r2,r3,r2
81138450:	1001703a 	wrctl	status,r2
  
  return context;
81138454:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81138458:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8113845c:	e0bffc17 	ldw	r2,-16(fp)
81138460:	10800817 	ldw	r2,32(r2)
81138464:	10c00054 	ori	r3,r2,1
81138468:	e0bffc17 	ldw	r2,-16(fp)
8113846c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81138470:	e0bffc17 	ldw	r2,-16(fp)
81138474:	10800017 	ldw	r2,0(r2)
81138478:	10800104 	addi	r2,r2,4
8113847c:	1007883a 	mov	r3,r2
81138480:	e0bffc17 	ldw	r2,-16(fp)
81138484:	10800817 	ldw	r2,32(r2)
81138488:	18800035 	stwio	r2,0(r3)
8113848c:	e0bff617 	ldw	r2,-40(fp)
81138490:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138494:	e0bff517 	ldw	r2,-44(fp)
81138498:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8113849c:	e0fff017 	ldw	r3,-64(fp)
811384a0:	e0bffd17 	ldw	r2,-12(fp)
811384a4:	18800426 	beq	r3,r2,811384b8 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
811384a8:	e0fff017 	ldw	r3,-64(fp)
811384ac:	e0bffd17 	ldw	r2,-12(fp)
811384b0:	1885c83a 	sub	r2,r3,r2
811384b4:	00000606 	br	811384d0 <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
811384b8:	e0bfff17 	ldw	r2,-4(fp)
811384bc:	1090000c 	andi	r2,r2,16384
811384c0:	10000226 	beq	r2,zero,811384cc <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
811384c4:	00bffd44 	movi	r2,-11
811384c8:	00000106 	br	811384d0 <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
811384cc:	00bffec4 	movi	r2,-5
}
811384d0:	e037883a 	mov	sp,fp
811384d4:	dfc00117 	ldw	ra,4(sp)
811384d8:	df000017 	ldw	fp,0(sp)
811384dc:	dec00204 	addi	sp,sp,8
811384e0:	f800283a 	ret

811384e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
811384e4:	deffed04 	addi	sp,sp,-76
811384e8:	de00012e 	bgeu	sp,et,811384f0 <altera_avalon_jtag_uart_write+0xc>
811384ec:	003b68fa 	trap	3
811384f0:	dfc01215 	stw	ra,72(sp)
811384f4:	df001115 	stw	fp,68(sp)
811384f8:	df001104 	addi	fp,sp,68
811384fc:	e13ffc15 	stw	r4,-16(fp)
81138500:	e17ffd15 	stw	r5,-12(fp)
81138504:	e1bffe15 	stw	r6,-8(fp)
81138508:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8113850c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81138510:	e0bffd17 	ldw	r2,-12(fp)
81138514:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
81138518:	e0bffc17 	ldw	r2,-16(fp)
8113851c:	10800b17 	ldw	r2,44(r2)
81138520:	e0bff815 	stw	r2,-32(fp)
81138524:	e03ff90d 	sth	zero,-28(fp)
81138528:	e0bff90b 	ldhu	r2,-28(fp)
8113852c:	e0fffb44 	addi	r3,fp,-19
81138530:	180d883a 	mov	r6,r3
81138534:	100b883a 	mov	r5,r2
81138538:	e13ff817 	ldw	r4,-32(fp)
8113853c:	112ff740 	call	8112ff74 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81138540:	00003706 	br	81138620 <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81138544:	e0bffc17 	ldw	r2,-16(fp)
81138548:	10800f17 	ldw	r2,60(r2)
8113854c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
81138550:	e0bffc17 	ldw	r2,-16(fp)
81138554:	10801017 	ldw	r2,64(r2)
81138558:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
8113855c:	e0fff417 	ldw	r3,-48(fp)
81138560:	e0bff017 	ldw	r2,-64(fp)
81138564:	1880062e 	bgeu	r3,r2,81138580 <altera_avalon_jtag_uart_write+0x9c>
        n = out - 1 - in;
81138568:	e0fff017 	ldw	r3,-64(fp)
8113856c:	e0bff417 	ldw	r2,-48(fp)
81138570:	1885c83a 	sub	r2,r3,r2
81138574:	10bfffc4 	addi	r2,r2,-1
81138578:	e0bff115 	stw	r2,-60(fp)
8113857c:	00000b06 	br	811385ac <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
81138580:	e0bff017 	ldw	r2,-64(fp)
81138584:	10000526 	beq	r2,zero,8113859c <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81138588:	00c20004 	movi	r3,2048
8113858c:	e0bff417 	ldw	r2,-48(fp)
81138590:	1885c83a 	sub	r2,r3,r2
81138594:	e0bff115 	stw	r2,-60(fp)
81138598:	00000406 	br	811385ac <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8113859c:	00c1ffc4 	movi	r3,2047
811385a0:	e0bff417 	ldw	r2,-48(fp)
811385a4:	1885c83a 	sub	r2,r3,r2
811385a8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
811385ac:	e0bff117 	ldw	r2,-60(fp)
811385b0:	10001e26 	beq	r2,zero,8113862c <altera_avalon_jtag_uart_write+0x148>
        break;

      if (n > count)
811385b4:	e0fffe17 	ldw	r3,-8(fp)
811385b8:	e0bff117 	ldw	r2,-60(fp)
811385bc:	1880022e 	bgeu	r3,r2,811385c8 <altera_avalon_jtag_uart_write+0xe4>
        n = count;
811385c0:	e0bffe17 	ldw	r2,-8(fp)
811385c4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
811385c8:	e0bffc17 	ldw	r2,-16(fp)
811385cc:	10c21104 	addi	r3,r2,2116
811385d0:	e0bff417 	ldw	r2,-48(fp)
811385d4:	1885883a 	add	r2,r3,r2
811385d8:	e1bff117 	ldw	r6,-60(fp)
811385dc:	e17ffd17 	ldw	r5,-12(fp)
811385e0:	1009883a 	mov	r4,r2
811385e4:	1112e840 	call	81112e84 <memcpy>
      ptr   += n;
811385e8:	e0fffd17 	ldw	r3,-12(fp)
811385ec:	e0bff117 	ldw	r2,-60(fp)
811385f0:	1885883a 	add	r2,r3,r2
811385f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
811385f8:	e0fffe17 	ldw	r3,-8(fp)
811385fc:	e0bff117 	ldw	r2,-60(fp)
81138600:	1885c83a 	sub	r2,r3,r2
81138604:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81138608:	e0fff417 	ldw	r3,-48(fp)
8113860c:	e0bff117 	ldw	r2,-60(fp)
81138610:	1885883a 	add	r2,r3,r2
81138614:	10c1ffcc 	andi	r3,r2,2047
81138618:	e0bffc17 	ldw	r2,-16(fp)
8113861c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81138620:	e0bffe17 	ldw	r2,-8(fp)
81138624:	00bfc716 	blt	zero,r2,81138544 <__reset+0xfb118544>
81138628:	00000106 	br	81138630 <altera_avalon_jtag_uart_write+0x14c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8113862c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138630:	0005303a 	rdctl	r2,status
81138634:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138638:	e0fff717 	ldw	r3,-36(fp)
8113863c:	00bfff84 	movi	r2,-2
81138640:	1884703a 	and	r2,r3,r2
81138644:	1001703a 	wrctl	status,r2
  
  return context;
81138648:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8113864c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81138650:	e0bffc17 	ldw	r2,-16(fp)
81138654:	10800817 	ldw	r2,32(r2)
81138658:	10c00094 	ori	r3,r2,2
8113865c:	e0bffc17 	ldw	r2,-16(fp)
81138660:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81138664:	e0bffc17 	ldw	r2,-16(fp)
81138668:	10800017 	ldw	r2,0(r2)
8113866c:	10800104 	addi	r2,r2,4
81138670:	1007883a 	mov	r3,r2
81138674:	e0bffc17 	ldw	r2,-16(fp)
81138678:	10800817 	ldw	r2,32(r2)
8113867c:	18800035 	stwio	r2,0(r3)
81138680:	e0bff617 	ldw	r2,-40(fp)
81138684:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138688:	e0bff317 	ldw	r2,-52(fp)
8113868c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81138690:	e0bffe17 	ldw	r2,-8(fp)
81138694:	00802a0e 	bge	zero,r2,81138740 <altera_avalon_jtag_uart_write+0x25c>
    {
      if (flags & O_NONBLOCK)
81138698:	e0bfff17 	ldw	r2,-4(fp)
8113869c:	1090000c 	andi	r2,r2,16384
811386a0:	10002a1e 	bne	r2,zero,8113874c <altera_avalon_jtag_uart_write+0x268>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
811386a4:	d0a07a03 	ldbu	r2,-32280(gp)
811386a8:	10803fcc 	andi	r2,r2,255
811386ac:	10800058 	cmpnei	r2,r2,1
811386b0:	1000161e 	bne	r2,zero,8113870c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
811386b4:	e0bffc17 	ldw	r2,-16(fp)
811386b8:	10800c17 	ldw	r2,48(r2)
811386bc:	e0bff515 	stw	r2,-44(fp)
811386c0:	00800184 	movi	r2,6
811386c4:	e0bff98d 	sth	r2,-26(fp)
811386c8:	00bfe0c4 	movi	r2,-125
811386cc:	e0bffa05 	stb	r2,-24(fp)
811386d0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
811386d4:	d0a07a03 	ldbu	r2,-32280(gp)
811386d8:	10803fcc 	andi	r2,r2,255
811386dc:	10001526 	beq	r2,zero,81138734 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
811386e0:	e0fff98b 	ldhu	r3,-26(fp)
811386e4:	e13ffa03 	ldbu	r4,-24(fp)
811386e8:	e17ffa8b 	ldhu	r5,-22(fp)
811386ec:	e0bffb04 	addi	r2,fp,-20
811386f0:	d8800015 	stw	r2,0(sp)
811386f4:	280f883a 	mov	r7,r5
811386f8:	200d883a 	mov	r6,r4
811386fc:	180b883a 	mov	r5,r3
81138700:	e13ff517 	ldw	r4,-44(fp)
81138704:	112c2d40 	call	8112c2d4 <OSFlagPend>
81138708:	00000a06 	br	81138734 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8113870c:	0001883a 	nop
81138710:	e0bffc17 	ldw	r2,-16(fp)
81138714:	10c01017 	ldw	r3,64(r2)
81138718:	e0bff017 	ldw	r2,-64(fp)
8113871c:	1880051e 	bne	r3,r2,81138734 <altera_avalon_jtag_uart_write+0x250>
81138720:	e0bffc17 	ldw	r2,-16(fp)
81138724:	10c00917 	ldw	r3,36(r2)
81138728:	e0bffc17 	ldw	r2,-16(fp)
8113872c:	10800117 	ldw	r2,4(r2)
81138730:	18bff736 	bltu	r3,r2,81138710 <__reset+0xfb118710>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
81138734:	e0bffc17 	ldw	r2,-16(fp)
81138738:	10800917 	ldw	r2,36(r2)
8113873c:	1000051e 	bne	r2,zero,81138754 <altera_avalon_jtag_uart_write+0x270>
         break;
    }
  }
  while (count > 0);
81138740:	e0bffe17 	ldw	r2,-8(fp)
81138744:	00bfb616 	blt	zero,r2,81138620 <__reset+0xfb118620>
81138748:	00000306 	br	81138758 <altera_avalon_jtag_uart_write+0x274>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8113874c:	0001883a 	nop
81138750:	00000106 	br	81138758 <altera_avalon_jtag_uart_write+0x274>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81138754:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
81138758:	e0bffc17 	ldw	r2,-16(fp)
8113875c:	10800b17 	ldw	r2,44(r2)
81138760:	1009883a 	mov	r4,r2
81138764:	11302fc0 	call	811302fc <OSSemPost>

  if (ptr != start)
81138768:	e0fffd17 	ldw	r3,-12(fp)
8113876c:	e0bff217 	ldw	r2,-56(fp)
81138770:	18800426 	beq	r3,r2,81138784 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
81138774:	e0fffd17 	ldw	r3,-12(fp)
81138778:	e0bff217 	ldw	r2,-56(fp)
8113877c:	1885c83a 	sub	r2,r3,r2
81138780:	00000606 	br	8113879c <altera_avalon_jtag_uart_write+0x2b8>
  else if (flags & O_NONBLOCK)
81138784:	e0bfff17 	ldw	r2,-4(fp)
81138788:	1090000c 	andi	r2,r2,16384
8113878c:	10000226 	beq	r2,zero,81138798 <altera_avalon_jtag_uart_write+0x2b4>
    return -EWOULDBLOCK;
81138790:	00bffd44 	movi	r2,-11
81138794:	00000106 	br	8113879c <altera_avalon_jtag_uart_write+0x2b8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81138798:	00bffec4 	movi	r2,-5
}
8113879c:	e037883a 	mov	sp,fp
811387a0:	dfc00117 	ldw	ra,4(sp)
811387a4:	df000017 	ldw	fp,0(sp)
811387a8:	dec00204 	addi	sp,sp,8
811387ac:	f800283a 	ret

811387b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
811387b0:	defffa04 	addi	sp,sp,-24
811387b4:	de00012e 	bgeu	sp,et,811387bc <alt_avalon_timer_sc_irq+0xc>
811387b8:	003b68fa 	trap	3
811387bc:	dfc00515 	stw	ra,20(sp)
811387c0:	df000415 	stw	fp,16(sp)
811387c4:	df000404 	addi	fp,sp,16
811387c8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
811387cc:	0007883a 	mov	r3,zero
811387d0:	e0bfff17 	ldw	r2,-4(fp)
811387d4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
811387d8:	e0bfff17 	ldw	r2,-4(fp)
811387dc:	10800104 	addi	r2,r2,4
811387e0:	10800037 	ldwio	r2,0(r2)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();
811387e4:	11286ec0 	call	811286ec <alt_log_system_clock>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811387e8:	0005303a 	rdctl	r2,status
811387ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811387f0:	e0fffd17 	ldw	r3,-12(fp)
811387f4:	00bfff84 	movi	r2,-2
811387f8:	1884703a 	and	r2,r3,r2
811387fc:	1001703a 	wrctl	status,r2
  
  return context;
81138800:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81138804:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81138808:	1128fdc0 	call	81128fdc <alt_tick>
8113880c:	e0bffc17 	ldw	r2,-16(fp)
81138810:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138814:	e0bffe17 	ldw	r2,-8(fp)
81138818:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8113881c:	0001883a 	nop
81138820:	e037883a 	mov	sp,fp
81138824:	dfc00117 	ldw	ra,4(sp)
81138828:	df000017 	ldw	fp,0(sp)
8113882c:	dec00204 	addi	sp,sp,8
81138830:	f800283a 	ret

81138834 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81138834:	defff804 	addi	sp,sp,-32
81138838:	de00012e 	bgeu	sp,et,81138840 <alt_avalon_timer_sc_init+0xc>
8113883c:	003b68fa 	trap	3
81138840:	dfc00715 	stw	ra,28(sp)
81138844:	df000615 	stw	fp,24(sp)
81138848:	df000604 	addi	fp,sp,24
8113884c:	e13ffc15 	stw	r4,-16(fp)
81138850:	e17ffd15 	stw	r5,-12(fp)
81138854:	e1bffe15 	stw	r6,-8(fp)
81138858:	e1ffff15 	stw	r7,-4(fp)
8113885c:	e0bfff17 	ldw	r2,-4(fp)
81138860:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81138864:	d0a07117 	ldw	r2,-32316(gp)
81138868:	1000021e 	bne	r2,zero,81138874 <alt_avalon_timer_sc_init+0x40>
  {
    _alt_tick_rate = nticks;
8113886c:	e0bffb17 	ldw	r2,-20(fp)
81138870:	d0a07115 	stw	r2,-32316(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
81138874:	e0bffc17 	ldw	r2,-16(fp)
81138878:	10800104 	addi	r2,r2,4
8113887c:	00c001c4 	movi	r3,7
81138880:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81138884:	d8000015 	stw	zero,0(sp)
81138888:	e1fffc17 	ldw	r7,-16(fp)
8113888c:	01a04534 	movhi	r6,33044
81138890:	31a1ec04 	addi	r6,r6,-30800
81138894:	e17ffe17 	ldw	r5,-8(fp)
81138898:	e13ffd17 	ldw	r4,-12(fp)
8113889c:	113bb080 	call	8113bb08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
811388a0:	0001883a 	nop
811388a4:	e037883a 	mov	sp,fp
811388a8:	dfc00117 	ldw	ra,4(sp)
811388ac:	df000017 	ldw	fp,0(sp)
811388b0:	dec00204 	addi	sp,sp,8
811388b4:	f800283a 	ret

811388b8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
811388b8:	defffa04 	addi	sp,sp,-24
811388bc:	de00012e 	bgeu	sp,et,811388c4 <altera_avalon_uart_read_fd+0xc>
811388c0:	003b68fa 	trap	3
811388c4:	dfc00515 	stw	ra,20(sp)
811388c8:	df000415 	stw	fp,16(sp)
811388cc:	df000404 	addi	fp,sp,16
811388d0:	e13ffd15 	stw	r4,-12(fp)
811388d4:	e17ffe15 	stw	r5,-8(fp)
811388d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
811388dc:	e0bffd17 	ldw	r2,-12(fp)
811388e0:	10800017 	ldw	r2,0(r2)
811388e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
811388e8:	e0bffc17 	ldw	r2,-16(fp)
811388ec:	10c00a04 	addi	r3,r2,40
811388f0:	e0bffd17 	ldw	r2,-12(fp)
811388f4:	10800217 	ldw	r2,8(r2)
811388f8:	100f883a 	mov	r7,r2
811388fc:	e1bfff17 	ldw	r6,-4(fp)
81138900:	e17ffe17 	ldw	r5,-8(fp)
81138904:	1809883a 	mov	r4,r3
81138908:	1138f780 	call	81138f78 <altera_avalon_uart_read>
      fd->fd_flags);
}
8113890c:	e037883a 	mov	sp,fp
81138910:	dfc00117 	ldw	ra,4(sp)
81138914:	df000017 	ldw	fp,0(sp)
81138918:	dec00204 	addi	sp,sp,8
8113891c:	f800283a 	ret

81138920 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81138920:	defffa04 	addi	sp,sp,-24
81138924:	de00012e 	bgeu	sp,et,8113892c <altera_avalon_uart_write_fd+0xc>
81138928:	003b68fa 	trap	3
8113892c:	dfc00515 	stw	ra,20(sp)
81138930:	df000415 	stw	fp,16(sp)
81138934:	df000404 	addi	fp,sp,16
81138938:	e13ffd15 	stw	r4,-12(fp)
8113893c:	e17ffe15 	stw	r5,-8(fp)
81138940:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81138944:	e0bffd17 	ldw	r2,-12(fp)
81138948:	10800017 	ldw	r2,0(r2)
8113894c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81138950:	e0bffc17 	ldw	r2,-16(fp)
81138954:	10c00a04 	addi	r3,r2,40
81138958:	e0bffd17 	ldw	r2,-12(fp)
8113895c:	10800217 	ldw	r2,8(r2)
81138960:	100f883a 	mov	r7,r2
81138964:	e1bfff17 	ldw	r6,-4(fp)
81138968:	e17ffe17 	ldw	r5,-8(fp)
8113896c:	1809883a 	mov	r4,r3
81138970:	113922c0 	call	8113922c <altera_avalon_uart_write>
      fd->fd_flags);
}
81138974:	e037883a 	mov	sp,fp
81138978:	dfc00117 	ldw	ra,4(sp)
8113897c:	df000017 	ldw	fp,0(sp)
81138980:	dec00204 	addi	sp,sp,8
81138984:	f800283a 	ret

81138988 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81138988:	defffc04 	addi	sp,sp,-16
8113898c:	de00012e 	bgeu	sp,et,81138994 <altera_avalon_uart_close_fd+0xc>
81138990:	003b68fa 	trap	3
81138994:	dfc00315 	stw	ra,12(sp)
81138998:	df000215 	stw	fp,8(sp)
8113899c:	df000204 	addi	fp,sp,8
811389a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
811389a4:	e0bfff17 	ldw	r2,-4(fp)
811389a8:	10800017 	ldw	r2,0(r2)
811389ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
811389b0:	e0bffe17 	ldw	r2,-8(fp)
811389b4:	10c00a04 	addi	r3,r2,40
811389b8:	e0bfff17 	ldw	r2,-4(fp)
811389bc:	10800217 	ldw	r2,8(r2)
811389c0:	100b883a 	mov	r5,r2
811389c4:	1809883a 	mov	r4,r3
811389c8:	1138ed80 	call	81138ed8 <altera_avalon_uart_close>
}
811389cc:	e037883a 	mov	sp,fp
811389d0:	dfc00117 	ldw	ra,4(sp)
811389d4:	df000017 	ldw	fp,0(sp)
811389d8:	dec00204 	addi	sp,sp,8
811389dc:	f800283a 	ret

811389e0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
811389e0:	defff304 	addi	sp,sp,-52
811389e4:	de00012e 	bgeu	sp,et,811389ec <altera_avalon_uart_init+0xc>
811389e8:	003b68fa 	trap	3
811389ec:	dfc00c15 	stw	ra,48(sp)
811389f0:	df000b15 	stw	fp,44(sp)
811389f4:	df000b04 	addi	fp,sp,44
811389f8:	e13ffd15 	stw	r4,-12(fp)
811389fc:	e17ffe15 	stw	r5,-8(fp)
81138a00:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
81138a04:	e0bffd17 	ldw	r2,-12(fp)
81138a08:	10800017 	ldw	r2,0(r2)
81138a0c:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81138a10:	e0bffd17 	ldw	r2,-12(fp)
81138a14:	10800704 	addi	r2,r2,28
81138a18:	e0bffa15 	stw	r2,-24(fp)
81138a1c:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81138a20:	e0bffb0b 	ldhu	r2,-20(fp)
81138a24:	e0fffc84 	addi	r3,fp,-14
81138a28:	180b883a 	mov	r5,r3
81138a2c:	1009883a 	mov	r4,r2
81138a30:	112bcf00 	call	8112bcf0 <OSFlagCreate>
81138a34:	1007883a 	mov	r3,r2
81138a38:	e0bffa17 	ldw	r2,-24(fp)
81138a3c:	10c00015 	stw	r3,0(r2)
  return err;
81138a40:	e0bffc83 	ldbu	r2,-14(fp)
81138a44:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81138a48:	1000241e 	bne	r2,zero,81138adc <altera_avalon_uart_init+0xfc>
81138a4c:	e0bffd17 	ldw	r2,-12(fp)
81138a50:	10800804 	addi	r2,r2,32
81138a54:	e0bff715 	stw	r2,-36(fp)
81138a58:	00800044 	movi	r2,1
81138a5c:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81138a60:	e0bffb8b 	ldhu	r2,-18(fp)
81138a64:	1009883a 	mov	r4,r2
81138a68:	112fc4c0 	call	8112fc4c <OSSemCreate>
81138a6c:	1007883a 	mov	r3,r2
81138a70:	e0bff717 	ldw	r2,-36(fp)
81138a74:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81138a78:	e0bff717 	ldw	r2,-36(fp)
81138a7c:	10800017 	ldw	r2,0(r2)
81138a80:	10000226 	beq	r2,zero,81138a8c <altera_avalon_uart_init+0xac>
81138a84:	0005883a 	mov	r2,zero
81138a88:	00000106 	br	81138a90 <altera_avalon_uart_init+0xb0>
81138a8c:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81138a90:	1000121e 	bne	r2,zero,81138adc <altera_avalon_uart_init+0xfc>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
81138a94:	e0bffd17 	ldw	r2,-12(fp)
81138a98:	10800904 	addi	r2,r2,36
81138a9c:	e0bff815 	stw	r2,-32(fp)
81138aa0:	00800044 	movi	r2,1
81138aa4:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81138aa8:	e0bffc0b 	ldhu	r2,-16(fp)
81138aac:	1009883a 	mov	r4,r2
81138ab0:	112fc4c0 	call	8112fc4c <OSSemCreate>
81138ab4:	1007883a 	mov	r3,r2
81138ab8:	e0bff817 	ldw	r2,-32(fp)
81138abc:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81138ac0:	e0bff817 	ldw	r2,-32(fp)
81138ac4:	10800017 	ldw	r2,0(r2)
81138ac8:	10000226 	beq	r2,zero,81138ad4 <altera_avalon_uart_init+0xf4>
81138acc:	0005883a 	mov	r2,zero
81138ad0:	00000106 	br	81138ad8 <altera_avalon_uart_init+0xf8>
81138ad4:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81138ad8:	10000226 	beq	r2,zero,81138ae4 <altera_avalon_uart_init+0x104>
81138adc:	00800044 	movi	r2,1
81138ae0:	00000106 	br	81138ae8 <altera_avalon_uart_init+0x108>
81138ae4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81138ae8:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
81138aec:	e0bff917 	ldw	r2,-28(fp)
81138af0:	10000f1e 	bne	r2,zero,81138b30 <altera_avalon_uart_init+0x150>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
81138af4:	e0bffd17 	ldw	r2,-12(fp)
81138af8:	00c32004 	movi	r3,3200
81138afc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
81138b00:	e0bff617 	ldw	r2,-40(fp)
81138b04:	10800304 	addi	r2,r2,12
81138b08:	e0fffd17 	ldw	r3,-12(fp)
81138b0c:	18c00117 	ldw	r3,4(r3)
81138b10:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
81138b14:	d8000015 	stw	zero,0(sp)
81138b18:	e1fffd17 	ldw	r7,-12(fp)
81138b1c:	01a04534 	movhi	r6,33044
81138b20:	31a2d204 	addi	r6,r6,-29880
81138b24:	e17fff17 	ldw	r5,-4(fp)
81138b28:	e13ffe17 	ldw	r4,-8(fp)
81138b2c:	113bb080 	call	8113bb08 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
81138b30:	0001883a 	nop
81138b34:	e037883a 	mov	sp,fp
81138b38:	dfc00117 	ldw	ra,4(sp)
81138b3c:	df000017 	ldw	fp,0(sp)
81138b40:	dec00204 	addi	sp,sp,8
81138b44:	f800283a 	ret

81138b48 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81138b48:	defffa04 	addi	sp,sp,-24
81138b4c:	de00012e 	bgeu	sp,et,81138b54 <altera_avalon_uart_irq+0xc>
81138b50:	003b68fa 	trap	3
81138b54:	dfc00515 	stw	ra,20(sp)
81138b58:	df000415 	stw	fp,16(sp)
81138b5c:	df000404 	addi	fp,sp,16
81138b60:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
81138b64:	e0bfff17 	ldw	r2,-4(fp)
81138b68:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
81138b6c:	e0bffc17 	ldw	r2,-16(fp)
81138b70:	10800017 	ldw	r2,0(r2)
81138b74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
81138b78:	e0bffd17 	ldw	r2,-12(fp)
81138b7c:	10800204 	addi	r2,r2,8
81138b80:	10800037 	ldwio	r2,0(r2)
81138b84:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
81138b88:	e0bffd17 	ldw	r2,-12(fp)
81138b8c:	10800204 	addi	r2,r2,8
81138b90:	0007883a 	mov	r3,zero
81138b94:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81138b98:	e0bffd17 	ldw	r2,-12(fp)
81138b9c:	10800204 	addi	r2,r2,8
81138ba0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81138ba4:	e0bffe17 	ldw	r2,-8(fp)
81138ba8:	1080200c 	andi	r2,r2,128
81138bac:	10000326 	beq	r2,zero,81138bbc <altera_avalon_uart_irq+0x74>
  {
    altera_avalon_uart_rxirq(sp, status);
81138bb0:	e17ffe17 	ldw	r5,-8(fp)
81138bb4:	e13ffc17 	ldw	r4,-16(fp)
81138bb8:	1138bec0 	call	81138bec <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
81138bbc:	e0bffe17 	ldw	r2,-8(fp)
81138bc0:	1081100c 	andi	r2,r2,1088
81138bc4:	10000326 	beq	r2,zero,81138bd4 <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
81138bc8:	e17ffe17 	ldw	r5,-8(fp)
81138bcc:	e13ffc17 	ldw	r4,-16(fp)
81138bd0:	1138d2c0 	call	81138d2c <altera_avalon_uart_txirq>
  }
  

}
81138bd4:	0001883a 	nop
81138bd8:	e037883a 	mov	sp,fp
81138bdc:	dfc00117 	ldw	ra,4(sp)
81138be0:	df000017 	ldw	fp,0(sp)
81138be4:	dec00204 	addi	sp,sp,8
81138be8:	f800283a 	ret

81138bec <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81138bec:	defff904 	addi	sp,sp,-28
81138bf0:	de00012e 	bgeu	sp,et,81138bf8 <altera_avalon_uart_rxirq+0xc>
81138bf4:	003b68fa 	trap	3
81138bf8:	dfc00615 	stw	ra,24(sp)
81138bfc:	df000515 	stw	fp,20(sp)
81138c00:	df000504 	addi	fp,sp,20
81138c04:	e13ffe15 	stw	r4,-8(fp)
81138c08:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
81138c0c:	e0bfff17 	ldw	r2,-4(fp)
81138c10:	108000cc 	andi	r2,r2,3
81138c14:	10003f1e 	bne	r2,zero,81138d14 <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
81138c18:	e0bffe17 	ldw	r2,-8(fp)
81138c1c:	10c00317 	ldw	r3,12(r2)
81138c20:	e0bffe17 	ldw	r2,-8(fp)
81138c24:	10800217 	ldw	r2,8(r2)
81138c28:	1880121e 	bne	r3,r2,81138c74 <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
81138c2c:	e0bffe17 	ldw	r2,-8(fp)
81138c30:	10800717 	ldw	r2,28(r2)
81138c34:	e0bffc15 	stw	r2,-16(fp)
81138c38:	00800044 	movi	r2,1
81138c3c:	e0bffd0d 	sth	r2,-12(fp)
81138c40:	00800044 	movi	r2,1
81138c44:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81138c48:	d0a07a03 	ldbu	r2,-32280(gp)
81138c4c:	10803fcc 	andi	r2,r2,255
81138c50:	10000826 	beq	r2,zero,81138c74 <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
81138c54:	e0bffd0b 	ldhu	r2,-12(fp)
81138c58:	e0fffd83 	ldbu	r3,-10(fp)
81138c5c:	e13ffdc4 	addi	r4,fp,-9
81138c60:	200f883a 	mov	r7,r4
81138c64:	180d883a 	mov	r6,r3
81138c68:	100b883a 	mov	r5,r2
81138c6c:	e13ffc17 	ldw	r4,-16(fp)
81138c70:	112c8fc0 	call	8112c8fc <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81138c74:	e0bffe17 	ldw	r2,-8(fp)
81138c78:	10800317 	ldw	r2,12(r2)
81138c7c:	10800044 	addi	r2,r2,1
81138c80:	10800fcc 	andi	r2,r2,63
81138c84:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81138c88:	e0bffe17 	ldw	r2,-8(fp)
81138c8c:	10800317 	ldw	r2,12(r2)
81138c90:	e0fffe17 	ldw	r3,-8(fp)
81138c94:	18c00017 	ldw	r3,0(r3)
81138c98:	18c00037 	ldwio	r3,0(r3)
81138c9c:	1809883a 	mov	r4,r3
81138ca0:	e0fffe17 	ldw	r3,-8(fp)
81138ca4:	1885883a 	add	r2,r3,r2
81138ca8:	10800a04 	addi	r2,r2,40
81138cac:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
81138cb0:	e0bffe17 	ldw	r2,-8(fp)
81138cb4:	e0fffb17 	ldw	r3,-20(fp)
81138cb8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81138cbc:	e0bffe17 	ldw	r2,-8(fp)
81138cc0:	10800317 	ldw	r2,12(r2)
81138cc4:	10800044 	addi	r2,r2,1
81138cc8:	10800fcc 	andi	r2,r2,63
81138ccc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81138cd0:	e0bffe17 	ldw	r2,-8(fp)
81138cd4:	10c00217 	ldw	r3,8(r2)
81138cd8:	e0bffb17 	ldw	r2,-20(fp)
81138cdc:	18800e1e 	bne	r3,r2,81138d18 <altera_avalon_uart_rxirq+0x12c>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81138ce0:	e0bffe17 	ldw	r2,-8(fp)
81138ce4:	10c00117 	ldw	r3,4(r2)
81138ce8:	00bfdfc4 	movi	r2,-129
81138cec:	1886703a 	and	r3,r3,r2
81138cf0:	e0bffe17 	ldw	r2,-8(fp)
81138cf4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
81138cf8:	e0bffe17 	ldw	r2,-8(fp)
81138cfc:	10800017 	ldw	r2,0(r2)
81138d00:	10800304 	addi	r2,r2,12
81138d04:	e0fffe17 	ldw	r3,-8(fp)
81138d08:	18c00117 	ldw	r3,4(r3)
81138d0c:	10c00035 	stwio	r3,0(r2)
81138d10:	00000106 	br	81138d18 <altera_avalon_uart_rxirq+0x12c>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
81138d14:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
81138d18:	e037883a 	mov	sp,fp
81138d1c:	dfc00117 	ldw	ra,4(sp)
81138d20:	df000017 	ldw	fp,0(sp)
81138d24:	dec00204 	addi	sp,sp,8
81138d28:	f800283a 	ret

81138d2c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81138d2c:	defffa04 	addi	sp,sp,-24
81138d30:	de00012e 	bgeu	sp,et,81138d38 <altera_avalon_uart_txirq+0xc>
81138d34:	003b68fa 	trap	3
81138d38:	dfc00515 	stw	ra,20(sp)
81138d3c:	df000415 	stw	fp,16(sp)
81138d40:	df000404 	addi	fp,sp,16
81138d44:	e13ffe15 	stw	r4,-8(fp)
81138d48:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
81138d4c:	e0bffe17 	ldw	r2,-8(fp)
81138d50:	10c00417 	ldw	r3,16(r2)
81138d54:	e0bffe17 	ldw	r2,-8(fp)
81138d58:	10800517 	ldw	r2,20(r2)
81138d5c:	18804726 	beq	r3,r2,81138e7c <altera_avalon_uart_txirq+0x150>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81138d60:	e0bffe17 	ldw	r2,-8(fp)
81138d64:	10800617 	ldw	r2,24(r2)
81138d68:	1080008c 	andi	r2,r2,2
81138d6c:	10000326 	beq	r2,zero,81138d7c <altera_avalon_uart_txirq+0x50>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81138d70:	e0bfff17 	ldw	r2,-4(fp)
81138d74:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81138d78:	10003226 	beq	r2,zero,81138e44 <altera_avalon_uart_txirq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
81138d7c:	e0bffe17 	ldw	r2,-8(fp)
81138d80:	10c00417 	ldw	r3,16(r2)
81138d84:	e0bffe17 	ldw	r2,-8(fp)
81138d88:	10800517 	ldw	r2,20(r2)
81138d8c:	10800044 	addi	r2,r2,1
81138d90:	10800fcc 	andi	r2,r2,63
81138d94:	1880121e 	bne	r3,r2,81138de0 <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
81138d98:	e0bffe17 	ldw	r2,-8(fp)
81138d9c:	10800717 	ldw	r2,28(r2)
81138da0:	e0bffc15 	stw	r2,-16(fp)
81138da4:	00800084 	movi	r2,2
81138da8:	e0bffd0d 	sth	r2,-12(fp)
81138dac:	00800044 	movi	r2,1
81138db0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81138db4:	d0a07a03 	ldbu	r2,-32280(gp)
81138db8:	10803fcc 	andi	r2,r2,255
81138dbc:	10000826 	beq	r2,zero,81138de0 <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
81138dc0:	e0bffd0b 	ldhu	r2,-12(fp)
81138dc4:	e0fffd83 	ldbu	r3,-10(fp)
81138dc8:	e13ffdc4 	addi	r4,fp,-9
81138dcc:	200f883a 	mov	r7,r4
81138dd0:	180d883a 	mov	r6,r3
81138dd4:	100b883a 	mov	r5,r2
81138dd8:	e13ffc17 	ldw	r4,-16(fp)
81138ddc:	112c8fc0 	call	8112c8fc <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81138de0:	e0bffe17 	ldw	r2,-8(fp)
81138de4:	10800017 	ldw	r2,0(r2)
81138de8:	10800104 	addi	r2,r2,4
81138dec:	e0fffe17 	ldw	r3,-8(fp)
81138df0:	18c00417 	ldw	r3,16(r3)
81138df4:	e13ffe17 	ldw	r4,-8(fp)
81138df8:	20c7883a 	add	r3,r4,r3
81138dfc:	18c01a04 	addi	r3,r3,104
81138e00:	18c00003 	ldbu	r3,0(r3)
81138e04:	18c03fcc 	andi	r3,r3,255
81138e08:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
81138e0c:	e0bffe17 	ldw	r2,-8(fp)
81138e10:	10800417 	ldw	r2,16(r2)
81138e14:	10800044 	addi	r2,r2,1
81138e18:	e0fffe17 	ldw	r3,-8(fp)
81138e1c:	18800415 	stw	r2,16(r3)
81138e20:	10c00fcc 	andi	r3,r2,63
81138e24:	e0bffe17 	ldw	r2,-8(fp)
81138e28:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81138e2c:	e0bffe17 	ldw	r2,-8(fp)
81138e30:	10800117 	ldw	r2,4(r2)
81138e34:	10c01014 	ori	r3,r2,64
81138e38:	e0bffe17 	ldw	r2,-8(fp)
81138e3c:	10c00115 	stw	r3,4(r2)
81138e40:	00000e06 	br	81138e7c <altera_avalon_uart_txirq+0x150>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
81138e44:	e0bffe17 	ldw	r2,-8(fp)
81138e48:	10800017 	ldw	r2,0(r2)
81138e4c:	10800204 	addi	r2,r2,8
81138e50:	10800037 	ldwio	r2,0(r2)
81138e54:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81138e58:	e0bfff17 	ldw	r2,-4(fp)
81138e5c:	1082000c 	andi	r2,r2,2048
81138e60:	1000061e 	bne	r2,zero,81138e7c <altera_avalon_uart_txirq+0x150>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81138e64:	e0bffe17 	ldw	r2,-8(fp)
81138e68:	10c00117 	ldw	r3,4(r2)
81138e6c:	00bfefc4 	movi	r2,-65
81138e70:	1886703a 	and	r3,r3,r2
81138e74:	e0bffe17 	ldw	r2,-8(fp)
81138e78:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
81138e7c:	e0bffe17 	ldw	r2,-8(fp)
81138e80:	10c00417 	ldw	r3,16(r2)
81138e84:	e0bffe17 	ldw	r2,-8(fp)
81138e88:	10800517 	ldw	r2,20(r2)
81138e8c:	1880061e 	bne	r3,r2,81138ea8 <altera_avalon_uart_txirq+0x17c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81138e90:	e0bffe17 	ldw	r2,-8(fp)
81138e94:	10c00117 	ldw	r3,4(r2)
81138e98:	00beefc4 	movi	r2,-1089
81138e9c:	1886703a 	and	r3,r3,r2
81138ea0:	e0bffe17 	ldw	r2,-8(fp)
81138ea4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81138ea8:	e0bffe17 	ldw	r2,-8(fp)
81138eac:	10800017 	ldw	r2,0(r2)
81138eb0:	10800304 	addi	r2,r2,12
81138eb4:	e0fffe17 	ldw	r3,-8(fp)
81138eb8:	18c00117 	ldw	r3,4(r3)
81138ebc:	10c00035 	stwio	r3,0(r2)
}
81138ec0:	0001883a 	nop
81138ec4:	e037883a 	mov	sp,fp
81138ec8:	dfc00117 	ldw	ra,4(sp)
81138ecc:	df000017 	ldw	fp,0(sp)
81138ed0:	dec00204 	addi	sp,sp,8
81138ed4:	f800283a 	ret

81138ed8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81138ed8:	defffd04 	addi	sp,sp,-12
81138edc:	de00012e 	bgeu	sp,et,81138ee4 <altera_avalon_uart_close+0xc>
81138ee0:	003b68fa 	trap	3
81138ee4:	df000215 	stw	fp,8(sp)
81138ee8:	df000204 	addi	fp,sp,8
81138eec:	e13ffe15 	stw	r4,-8(fp)
81138ef0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81138ef4:	00000506 	br	81138f0c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81138ef8:	e0bfff17 	ldw	r2,-4(fp)
81138efc:	1090000c 	andi	r2,r2,16384
81138f00:	10000226 	beq	r2,zero,81138f0c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
81138f04:	00bffd44 	movi	r2,-11
81138f08:	00000606 	br	81138f24 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81138f0c:	e0bffe17 	ldw	r2,-8(fp)
81138f10:	10c00417 	ldw	r3,16(r2)
81138f14:	e0bffe17 	ldw	r2,-8(fp)
81138f18:	10800517 	ldw	r2,20(r2)
81138f1c:	18bff61e 	bne	r3,r2,81138ef8 <__reset+0xfb118ef8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81138f20:	0005883a 	mov	r2,zero
}
81138f24:	e037883a 	mov	sp,fp
81138f28:	df000017 	ldw	fp,0(sp)
81138f2c:	dec00104 	addi	sp,sp,4
81138f30:	f800283a 	ret

81138f34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81138f34:	defffe04 	addi	sp,sp,-8
81138f38:	de00012e 	bgeu	sp,et,81138f40 <alt_get_errno+0xc>
81138f3c:	003b68fa 	trap	3
81138f40:	dfc00115 	stw	ra,4(sp)
81138f44:	df000015 	stw	fp,0(sp)
81138f48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81138f4c:	d0a01017 	ldw	r2,-32704(gp)
81138f50:	10000326 	beq	r2,zero,81138f60 <alt_get_errno+0x2c>
81138f54:	d0a01017 	ldw	r2,-32704(gp)
81138f58:	103ee83a 	callr	r2
81138f5c:	00000106 	br	81138f64 <alt_get_errno+0x30>
81138f60:	d0a06104 	addi	r2,gp,-32380
}
81138f64:	e037883a 	mov	sp,fp
81138f68:	dfc00117 	ldw	ra,4(sp)
81138f6c:	df000017 	ldw	fp,0(sp)
81138f70:	dec00204 	addi	sp,sp,8
81138f74:	f800283a 	ret

81138f78 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
81138f78:	deffec04 	addi	sp,sp,-80
81138f7c:	de00012e 	bgeu	sp,et,81138f84 <altera_avalon_uart_read+0xc>
81138f80:	003b68fa 	trap	3
81138f84:	dfc01315 	stw	ra,76(sp)
81138f88:	df001215 	stw	fp,72(sp)
81138f8c:	df001204 	addi	fp,sp,72
81138f90:	e13ffc15 	stw	r4,-16(fp)
81138f94:	e17ffd15 	stw	r5,-12(fp)
81138f98:	e1bffe15 	stw	r6,-8(fp)
81138f9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
81138fa0:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
81138fa4:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
81138fa8:	e0bfff17 	ldw	r2,-4(fp)
81138fac:	1090000c 	andi	r2,r2,16384
81138fb0:	1005003a 	cmpeq	r2,r2,zero
81138fb4:	10803fcc 	andi	r2,r2,255
81138fb8:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
81138fbc:	e0bffc17 	ldw	r2,-16(fp)
81138fc0:	10800817 	ldw	r2,32(r2)
81138fc4:	e0bff815 	stw	r2,-32(fp)
81138fc8:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81138fcc:	e0bff90b 	ldhu	r2,-28(fp)
81138fd0:	e0fffb44 	addi	r3,fp,-19
81138fd4:	180d883a 	mov	r6,r3
81138fd8:	100b883a 	mov	r5,r2
81138fdc:	e13ff817 	ldw	r4,-32(fp)
81138fe0:	112ff740 	call	8112ff74 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81138fe4:	00001306 	br	81139034 <altera_avalon_uart_read+0xbc>
    {
      count++;
81138fe8:	e0bff017 	ldw	r2,-64(fp)
81138fec:	10800044 	addi	r2,r2,1
81138ff0:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
81138ff4:	e0bffd17 	ldw	r2,-12(fp)
81138ff8:	10c00044 	addi	r3,r2,1
81138ffc:	e0fffd15 	stw	r3,-12(fp)
81139000:	e0fffc17 	ldw	r3,-16(fp)
81139004:	18c00217 	ldw	r3,8(r3)
81139008:	e13ffc17 	ldw	r4,-16(fp)
8113900c:	20c7883a 	add	r3,r4,r3
81139010:	18c00a04 	addi	r3,r3,40
81139014:	18c00003 	ldbu	r3,0(r3)
81139018:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8113901c:	e0bffc17 	ldw	r2,-16(fp)
81139020:	10800217 	ldw	r2,8(r2)
81139024:	10800044 	addi	r2,r2,1
81139028:	10c00fcc 	andi	r3,r2,63
8113902c:	e0bffc17 	ldw	r2,-16(fp)
81139030:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81139034:	e0fff017 	ldw	r3,-64(fp)
81139038:	e0bffe17 	ldw	r2,-8(fp)
8113903c:	1880050e 	bge	r3,r2,81139054 <altera_avalon_uart_read+0xdc>
81139040:	e0bffc17 	ldw	r2,-16(fp)
81139044:	10c00217 	ldw	r3,8(r2)
81139048:	e0bffc17 	ldw	r2,-16(fp)
8113904c:	10800317 	ldw	r2,12(r2)
81139050:	18bfe51e 	bne	r3,r2,81138fe8 <__reset+0xfb118fe8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
81139054:	e0bff017 	ldw	r2,-64(fp)
81139058:	10003a1e 	bne	r2,zero,81139144 <altera_avalon_uart_read+0x1cc>
8113905c:	e0bffc17 	ldw	r2,-16(fp)
81139060:	10c00217 	ldw	r3,8(r2)
81139064:	e0bffc17 	ldw	r2,-16(fp)
81139068:	10800317 	ldw	r2,12(r2)
8113906c:	1880351e 	bne	r3,r2,81139144 <altera_avalon_uart_read+0x1cc>
    {
      if (!block)
81139070:	e0bff117 	ldw	r2,-60(fp)
81139074:	1000071e 	bne	r2,zero,81139094 <altera_avalon_uart_read+0x11c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
81139078:	1138f340 	call	81138f34 <alt_get_errno>
8113907c:	1007883a 	mov	r3,r2
81139080:	008002c4 	movi	r2,11
81139084:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
81139088:	00800044 	movi	r2,1
8113908c:	e0bfef05 	stb	r2,-68(fp)
        break;
81139090:	00003006 	br	81139154 <altera_avalon_uart_read+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139094:	0005303a 	rdctl	r2,status
81139098:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113909c:	e0fff517 	ldw	r3,-44(fp)
811390a0:	00bfff84 	movi	r2,-2
811390a4:	1884703a 	and	r2,r3,r2
811390a8:	1001703a 	wrctl	status,r2
  
  return context;
811390ac:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
811390b0:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
811390b4:	e0bffc17 	ldw	r2,-16(fp)
811390b8:	10800117 	ldw	r2,4(r2)
811390bc:	10c02014 	ori	r3,r2,128
811390c0:	e0bffc17 	ldw	r2,-16(fp)
811390c4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811390c8:	e0bffc17 	ldw	r2,-16(fp)
811390cc:	10800017 	ldw	r2,0(r2)
811390d0:	10800304 	addi	r2,r2,12
811390d4:	e0fffc17 	ldw	r3,-16(fp)
811390d8:	18c00117 	ldw	r3,4(r3)
811390dc:	10c00035 	stwio	r3,0(r2)
811390e0:	e0bff417 	ldw	r2,-48(fp)
811390e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811390e8:	e0bff617 	ldw	r2,-40(fp)
811390ec:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
811390f0:	e0bffc17 	ldw	r2,-16(fp)
811390f4:	10800717 	ldw	r2,28(r2)
811390f8:	e0bff215 	stw	r2,-56(fp)
811390fc:	00800044 	movi	r2,1
81139100:	e0bff98d 	sth	r2,-26(fp)
81139104:	00bfe0c4 	movi	r2,-125
81139108:	e0bffa05 	stb	r2,-24(fp)
8113910c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81139110:	d0a07a03 	ldbu	r2,-32280(gp)
81139114:	10803fcc 	andi	r2,r2,255
81139118:	10000a26 	beq	r2,zero,81139144 <altera_avalon_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113911c:	e0fff98b 	ldhu	r3,-26(fp)
81139120:	e13ffa03 	ldbu	r4,-24(fp)
81139124:	e17ffa8b 	ldhu	r5,-22(fp)
81139128:	e0bffb04 	addi	r2,fp,-20
8113912c:	d8800015 	stw	r2,0(sp)
81139130:	280f883a 	mov	r7,r5
81139134:	200d883a 	mov	r6,r4
81139138:	180b883a 	mov	r5,r3
8113913c:	e13ff217 	ldw	r4,-56(fp)
81139140:	112c2d40 	call	8112c2d4 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
81139144:	e0bff017 	ldw	r2,-64(fp)
81139148:	1000021e 	bne	r2,zero,81139154 <altera_avalon_uart_read+0x1dc>
8113914c:	e0bffe17 	ldw	r2,-8(fp)
81139150:	103fb81e 	bne	r2,zero,81139034 <__reset+0xfb119034>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81139154:	e0bffc17 	ldw	r2,-16(fp)
81139158:	10800817 	ldw	r2,32(r2)
8113915c:	1009883a 	mov	r4,r2
81139160:	11302fc0 	call	811302fc <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139164:	0005303a 	rdctl	r2,status
81139168:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113916c:	e0fff717 	ldw	r3,-36(fp)
81139170:	00bfff84 	movi	r2,-2
81139174:	1884703a 	and	r2,r3,r2
81139178:	1001703a 	wrctl	status,r2
  
  return context;
8113917c:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
81139180:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81139184:	e0bffc17 	ldw	r2,-16(fp)
81139188:	10800117 	ldw	r2,4(r2)
8113918c:	10c02014 	ori	r3,r2,128
81139190:	e0bffc17 	ldw	r2,-16(fp)
81139194:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81139198:	e0bffc17 	ldw	r2,-16(fp)
8113919c:	10800017 	ldw	r2,0(r2)
811391a0:	10800304 	addi	r2,r2,12
811391a4:	e0fffc17 	ldw	r3,-16(fp)
811391a8:	18c00117 	ldw	r3,4(r3)
811391ac:	10c00035 	stwio	r3,0(r2)
811391b0:	e0bff417 	ldw	r2,-48(fp)
811391b4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811391b8:	e0bff317 	ldw	r2,-52(fp)
811391bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
811391c0:	e0bfef03 	ldbu	r2,-68(fp)
811391c4:	10000226 	beq	r2,zero,811391d0 <altera_avalon_uart_read+0x258>
    return -EWOULDBLOCK;
811391c8:	00bffd44 	movi	r2,-11
811391cc:	00000106 	br	811391d4 <altera_avalon_uart_read+0x25c>
  }
  else {
    return count;
811391d0:	e0bff017 	ldw	r2,-64(fp)
  }
}
811391d4:	e037883a 	mov	sp,fp
811391d8:	dfc00117 	ldw	ra,4(sp)
811391dc:	df000017 	ldw	fp,0(sp)
811391e0:	dec00204 	addi	sp,sp,8
811391e4:	f800283a 	ret

811391e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811391e8:	defffe04 	addi	sp,sp,-8
811391ec:	de00012e 	bgeu	sp,et,811391f4 <alt_get_errno+0xc>
811391f0:	003b68fa 	trap	3
811391f4:	dfc00115 	stw	ra,4(sp)
811391f8:	df000015 	stw	fp,0(sp)
811391fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81139200:	d0a01017 	ldw	r2,-32704(gp)
81139204:	10000326 	beq	r2,zero,81139214 <alt_get_errno+0x2c>
81139208:	d0a01017 	ldw	r2,-32704(gp)
8113920c:	103ee83a 	callr	r2
81139210:	00000106 	br	81139218 <alt_get_errno+0x30>
81139214:	d0a06104 	addi	r2,gp,-32380
}
81139218:	e037883a 	mov	sp,fp
8113921c:	dfc00117 	ldw	ra,4(sp)
81139220:	df000017 	ldw	fp,0(sp)
81139224:	dec00204 	addi	sp,sp,8
81139228:	f800283a 	ret

8113922c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
8113922c:	deffec04 	addi	sp,sp,-80
81139230:	de00012e 	bgeu	sp,et,81139238 <altera_avalon_uart_write+0xc>
81139234:	003b68fa 	trap	3
81139238:	dfc01315 	stw	ra,76(sp)
8113923c:	df001215 	stw	fp,72(sp)
81139240:	df001204 	addi	fp,sp,72
81139244:	e13ffc15 	stw	r4,-16(fp)
81139248:	e17ffd15 	stw	r5,-12(fp)
8113924c:	e1bffe15 	stw	r6,-8(fp)
81139250:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
81139254:	e0bffe17 	ldw	r2,-8(fp)
81139258:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
8113925c:	e0bfff17 	ldw	r2,-4(fp)
81139260:	1090000c 	andi	r2,r2,16384
81139264:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
81139268:	e0bffc17 	ldw	r2,-16(fp)
8113926c:	10800917 	ldw	r2,36(r2)
81139270:	e0bff815 	stw	r2,-32(fp)
81139274:	e03ff90d 	sth	zero,-28(fp)
81139278:	e0bff90b 	ldhu	r2,-28(fp)
8113927c:	e0fffb44 	addi	r3,fp,-19
81139280:	180d883a 	mov	r6,r3
81139284:	100b883a 	mov	r5,r2
81139288:	e13ff817 	ldw	r4,-32(fp)
8113928c:	112ff740 	call	8112ff74 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81139290:	00005106 	br	811393d8 <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81139294:	e0bffc17 	ldw	r2,-16(fp)
81139298:	10800517 	ldw	r2,20(r2)
8113929c:	10800044 	addi	r2,r2,1
811392a0:	10800fcc 	andi	r2,r2,63
811392a4:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
811392a8:	e0bffc17 	ldw	r2,-16(fp)
811392ac:	10c00417 	ldw	r3,16(r2)
811392b0:	e0bff217 	ldw	r2,-56(fp)
811392b4:	1880371e 	bne	r3,r2,81139394 <altera_avalon_uart_write+0x168>
    {
      if (no_block)
811392b8:	e0bff017 	ldw	r2,-64(fp)
811392bc:	10000526 	beq	r2,zero,811392d4 <altera_avalon_uart_write+0xa8>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
811392c0:	11391e80 	call	811391e8 <alt_get_errno>
811392c4:	1007883a 	mov	r3,r2
811392c8:	008002c4 	movi	r2,11
811392cc:	18800015 	stw	r2,0(r3)
        break;
811392d0:	00004306 	br	811393e0 <altera_avalon_uart_write+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811392d4:	0005303a 	rdctl	r2,status
811392d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811392dc:	e0fff517 	ldw	r3,-44(fp)
811392e0:	00bfff84 	movi	r2,-2
811392e4:	1884703a 	and	r2,r3,r2
811392e8:	1001703a 	wrctl	status,r2
  
  return context;
811392ec:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
811392f0:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
811392f4:	e0bffc17 	ldw	r2,-16(fp)
811392f8:	10800117 	ldw	r2,4(r2)
811392fc:	10c11014 	ori	r3,r2,1088
81139300:	e0bffc17 	ldw	r2,-16(fp)
81139304:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81139308:	e0bffc17 	ldw	r2,-16(fp)
8113930c:	10800017 	ldw	r2,0(r2)
81139310:	10800304 	addi	r2,r2,12
81139314:	e0fffc17 	ldw	r3,-16(fp)
81139318:	18c00117 	ldw	r3,4(r3)
8113931c:	10c00035 	stwio	r3,0(r2)
81139320:	e0bff417 	ldw	r2,-48(fp)
81139324:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139328:	e0bff117 	ldw	r2,-60(fp)
8113932c:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
81139330:	e0bffc17 	ldw	r2,-16(fp)
81139334:	10800717 	ldw	r2,28(r2)
81139338:	e0bff315 	stw	r2,-52(fp)
8113933c:	00800084 	movi	r2,2
81139340:	e0bff98d 	sth	r2,-26(fp)
81139344:	00bfe0c4 	movi	r2,-125
81139348:	e0bffa05 	stb	r2,-24(fp)
8113934c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81139350:	d0a07a03 	ldbu	r2,-32280(gp)
81139354:	10803fcc 	andi	r2,r2,255
81139358:	10000a26 	beq	r2,zero,81139384 <altera_avalon_uart_write+0x158>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113935c:	e0fff98b 	ldhu	r3,-26(fp)
81139360:	e13ffa03 	ldbu	r4,-24(fp)
81139364:	e17ffa8b 	ldhu	r5,-22(fp)
81139368:	e0bffb04 	addi	r2,fp,-20
8113936c:	d8800015 	stw	r2,0(sp)
81139370:	280f883a 	mov	r7,r5
81139374:	200d883a 	mov	r6,r4
81139378:	180b883a 	mov	r5,r3
8113937c:	e13ff317 	ldw	r4,-52(fp)
81139380:	112c2d40 	call	8112c2d4 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
81139384:	e0bffc17 	ldw	r2,-16(fp)
81139388:	10c00417 	ldw	r3,16(r2)
8113938c:	e0bff217 	ldw	r2,-56(fp)
81139390:	18bfe726 	beq	r3,r2,81139330 <__reset+0xfb119330>
      }
    }

    count--;
81139394:	e0bfef17 	ldw	r2,-68(fp)
81139398:	10bfffc4 	addi	r2,r2,-1
8113939c:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
811393a0:	e0bffc17 	ldw	r2,-16(fp)
811393a4:	10c00517 	ldw	r3,20(r2)
811393a8:	e0bffd17 	ldw	r2,-12(fp)
811393ac:	11000044 	addi	r4,r2,1
811393b0:	e13ffd15 	stw	r4,-12(fp)
811393b4:	10800003 	ldbu	r2,0(r2)
811393b8:	1009883a 	mov	r4,r2
811393bc:	e0bffc17 	ldw	r2,-16(fp)
811393c0:	10c5883a 	add	r2,r2,r3
811393c4:	10801a04 	addi	r2,r2,104
811393c8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
811393cc:	e0bffc17 	ldw	r2,-16(fp)
811393d0:	e0fff217 	ldw	r3,-56(fp)
811393d4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
811393d8:	e0bfef17 	ldw	r2,-68(fp)
811393dc:	103fad1e 	bne	r2,zero,81139294 <__reset+0xfb119294>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
811393e0:	e0bffc17 	ldw	r2,-16(fp)
811393e4:	10800917 	ldw	r2,36(r2)
811393e8:	1009883a 	mov	r4,r2
811393ec:	11302fc0 	call	811302fc <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811393f0:	0005303a 	rdctl	r2,status
811393f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811393f8:	e0fff717 	ldw	r3,-36(fp)
811393fc:	00bfff84 	movi	r2,-2
81139400:	1884703a 	and	r2,r3,r2
81139404:	1001703a 	wrctl	status,r2
  
  return context;
81139408:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
8113940c:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81139410:	e0bffc17 	ldw	r2,-16(fp)
81139414:	10800117 	ldw	r2,4(r2)
81139418:	10c11014 	ori	r3,r2,1088
8113941c:	e0bffc17 	ldw	r2,-16(fp)
81139420:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81139424:	e0bffc17 	ldw	r2,-16(fp)
81139428:	10800017 	ldw	r2,0(r2)
8113942c:	10800304 	addi	r2,r2,12
81139430:	e0fffc17 	ldw	r3,-16(fp)
81139434:	18c00117 	ldw	r3,4(r3)
81139438:	10c00035 	stwio	r3,0(r2)
8113943c:	e0bff417 	ldw	r2,-48(fp)
81139440:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139444:	e0bff617 	ldw	r2,-40(fp)
81139448:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
8113944c:	e0fffe17 	ldw	r3,-8(fp)
81139450:	e0bfef17 	ldw	r2,-68(fp)
81139454:	1885c83a 	sub	r2,r3,r2
}
81139458:	e037883a 	mov	sp,fp
8113945c:	dfc00117 	ldw	ra,4(sp)
81139460:	df000017 	ldw	fp,0(sp)
81139464:	dec00204 	addi	sp,sp,8
81139468:	f800283a 	ret

8113946c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113946c:	defffe04 	addi	sp,sp,-8
81139470:	de00012e 	bgeu	sp,et,81139478 <alt_get_errno+0xc>
81139474:	003b68fa 	trap	3
81139478:	dfc00115 	stw	ra,4(sp)
8113947c:	df000015 	stw	fp,0(sp)
81139480:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81139484:	d0a01017 	ldw	r2,-32704(gp)
81139488:	10000326 	beq	r2,zero,81139498 <alt_get_errno+0x2c>
8113948c:	d0a01017 	ldw	r2,-32704(gp)
81139490:	103ee83a 	callr	r2
81139494:	00000106 	br	8113949c <alt_get_errno+0x30>
81139498:	d0a06104 	addi	r2,gp,-32380
}
8113949c:	e037883a 	mov	sp,fp
811394a0:	dfc00117 	ldw	ra,4(sp)
811394a4:	df000017 	ldw	fp,0(sp)
811394a8:	dec00204 	addi	sp,sp,8
811394ac:	f800283a 	ret

811394b0 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
811394b0:	defffc04 	addi	sp,sp,-16
811394b4:	de00012e 	bgeu	sp,et,811394bc <alt_msgdma_write_standard_descriptor+0xc>
811394b8:	003b68fa 	trap	3
811394bc:	df000315 	stw	fp,12(sp)
811394c0:	df000304 	addi	fp,sp,12
811394c4:	e13ffd15 	stw	r4,-12(fp)
811394c8:	e17ffe15 	stw	r5,-8(fp)
811394cc:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
811394d0:	e0bffd17 	ldw	r2,-12(fp)
811394d4:	10800037 	ldwio	r2,0(r2)
811394d8:	1080010c 	andi	r2,r2,4
811394dc:	10000226 	beq	r2,zero,811394e8 <alt_msgdma_write_standard_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
811394e0:	00bff904 	movi	r2,-28
811394e4:	00001506 	br	8113953c <alt_msgdma_write_standard_descriptor+0x8c>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
811394e8:	e0bfff17 	ldw	r2,-4(fp)
811394ec:	10800017 	ldw	r2,0(r2)
811394f0:	1007883a 	mov	r3,r2
811394f4:	e0bffe17 	ldw	r2,-8(fp)
811394f8:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
811394fc:	e0bffe17 	ldw	r2,-8(fp)
81139500:	10800104 	addi	r2,r2,4
81139504:	e0ffff17 	ldw	r3,-4(fp)
81139508:	18c00117 	ldw	r3,4(r3)
8113950c:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81139510:	e0bffe17 	ldw	r2,-8(fp)
81139514:	10800204 	addi	r2,r2,8
81139518:	e0ffff17 	ldw	r3,-4(fp)
8113951c:	18c00217 	ldw	r3,8(r3)
81139520:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81139524:	e0bffe17 	ldw	r2,-8(fp)
81139528:	10800304 	addi	r2,r2,12
8113952c:	e0ffff17 	ldw	r3,-4(fp)
81139530:	18c00317 	ldw	r3,12(r3)
81139534:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81139538:	0005883a 	mov	r2,zero
}
8113953c:	e037883a 	mov	sp,fp
81139540:	df000017 	ldw	fp,0(sp)
81139544:	dec00104 	addi	sp,sp,4
81139548:	f800283a 	ret

8113954c <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
8113954c:	defffc04 	addi	sp,sp,-16
81139550:	de00012e 	bgeu	sp,et,81139558 <alt_msgdma_write_extended_descriptor+0xc>
81139554:	003b68fa 	trap	3
81139558:	df000315 	stw	fp,12(sp)
8113955c:	df000304 	addi	fp,sp,12
81139560:	e13ffd15 	stw	r4,-12(fp)
81139564:	e17ffe15 	stw	r5,-8(fp)
81139568:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
8113956c:	e0bffd17 	ldw	r2,-12(fp)
81139570:	10800037 	ldwio	r2,0(r2)
81139574:	1080010c 	andi	r2,r2,4
81139578:	10000226 	beq	r2,zero,81139584 <alt_msgdma_write_extended_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
8113957c:	00bff904 	movi	r2,-28
81139580:	00003b06 	br	81139670 <alt_msgdma_write_extended_descriptor+0x124>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
81139584:	e0bfff17 	ldw	r2,-4(fp)
81139588:	10800017 	ldw	r2,0(r2)
8113958c:	1007883a 	mov	r3,r2
81139590:	e0bffe17 	ldw	r2,-8(fp)
81139594:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81139598:	e0bffe17 	ldw	r2,-8(fp)
8113959c:	10800104 	addi	r2,r2,4
811395a0:	e0ffff17 	ldw	r3,-4(fp)
811395a4:	18c00117 	ldw	r3,4(r3)
811395a8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
811395ac:	e0bffe17 	ldw	r2,-8(fp)
811395b0:	10800204 	addi	r2,r2,8
811395b4:	e0ffff17 	ldw	r3,-4(fp)
811395b8:	18c00217 	ldw	r3,8(r3)
811395bc:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
811395c0:	e0bffe17 	ldw	r2,-8(fp)
811395c4:	10800304 	addi	r2,r2,12
811395c8:	e0ffff17 	ldw	r3,-4(fp)
811395cc:	18c0030b 	ldhu	r3,12(r3)
811395d0:	18ffffcc 	andi	r3,r3,65535
811395d4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
811395d8:	e0bffe17 	ldw	r2,-8(fp)
811395dc:	10800384 	addi	r2,r2,14
811395e0:	e0ffff17 	ldw	r3,-4(fp)
811395e4:	18c00383 	ldbu	r3,14(r3)
811395e8:	18c03fcc 	andi	r3,r3,255
811395ec:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
811395f0:	e0bffe17 	ldw	r2,-8(fp)
811395f4:	108003c4 	addi	r2,r2,15
811395f8:	e0ffff17 	ldw	r3,-4(fp)
811395fc:	18c003c3 	ldbu	r3,15(r3)
81139600:	18c03fcc 	andi	r3,r3,255
81139604:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81139608:	e0bffe17 	ldw	r2,-8(fp)
8113960c:	10800404 	addi	r2,r2,16
81139610:	e0ffff17 	ldw	r3,-4(fp)
81139614:	18c0040b 	ldhu	r3,16(r3)
81139618:	18ffffcc 	andi	r3,r3,65535
8113961c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81139620:	e0bffe17 	ldw	r2,-8(fp)
81139624:	10800484 	addi	r2,r2,18
81139628:	e0ffff17 	ldw	r3,-4(fp)
8113962c:	18c0048b 	ldhu	r3,18(r3)
81139630:	18ffffcc 	andi	r3,r3,65535
81139634:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
81139638:	e0bffe17 	ldw	r2,-8(fp)
8113963c:	10800504 	addi	r2,r2,20
81139640:	0007883a 	mov	r3,zero
81139644:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81139648:	e0bffe17 	ldw	r2,-8(fp)
8113964c:	10800604 	addi	r2,r2,24
81139650:	0007883a 	mov	r3,zero
81139654:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81139658:	e0bffe17 	ldw	r2,-8(fp)
8113965c:	10800704 	addi	r2,r2,28
81139660:	e0ffff17 	ldw	r3,-4(fp)
81139664:	18c00717 	ldw	r3,28(r3)
81139668:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
8113966c:	0005883a 	mov	r2,zero
}
81139670:	e037883a 	mov	sp,fp
81139674:	df000017 	ldw	fp,0(sp)
81139678:	dec00104 	addi	sp,sp,4
8113967c:	f800283a 	ret

81139680 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81139680:	defff804 	addi	sp,sp,-32
81139684:	de00012e 	bgeu	sp,et,8113968c <alt_msgdma_irq+0xc>
81139688:	003b68fa 	trap	3
8113968c:	dfc00715 	stw	ra,28(sp)
81139690:	df000615 	stw	fp,24(sp)
81139694:	df000604 	addi	fp,sp,24
81139698:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
8113969c:	e0bfff17 	ldw	r2,-4(fp)
811396a0:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
811396a4:	e0bffa17 	ldw	r2,-24(fp)
811396a8:	10801783 	ldbu	r2,94(r2)
811396ac:	10803fcc 	andi	r2,r2,255
811396b0:	10001126 	beq	r2,zero,811396f8 <alt_msgdma_irq+0x78>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
811396b4:	e0bffa17 	ldw	r2,-24(fp)
811396b8:	10800617 	ldw	r2,24(r2)
811396bc:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
811396c0:	1007883a 	mov	r3,r2
811396c4:	00bffdc4 	movi	r2,-9
811396c8:	1884703a 	and	r2,r3,r2
811396cc:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
811396d0:	e0bffa17 	ldw	r2,-24(fp)
811396d4:	10800617 	ldw	r2,24(r2)
811396d8:	e0fffb17 	ldw	r3,-20(fp)
811396dc:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
811396e0:	e0bffa17 	ldw	r2,-24(fp)
811396e4:	10800617 	ldw	r2,24(r2)
811396e8:	10800404 	addi	r2,r2,16
811396ec:	00c00044 	movi	r3,1
811396f0:	10c00035 	stwio	r3,0(r2)
811396f4:	00001106 	br	8113973c <alt_msgdma_irq+0xbc>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
811396f8:	e0bffa17 	ldw	r2,-24(fp)
811396fc:	10800317 	ldw	r2,12(r2)
81139700:	10800104 	addi	r2,r2,4
81139704:	10800037 	ldwio	r2,0(r2)
81139708:	1007883a 	mov	r3,r2
8113970c:	00bffbc4 	movi	r2,-17
81139710:	1884703a 	and	r2,r3,r2
81139714:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81139718:	e0bffa17 	ldw	r2,-24(fp)
8113971c:	10800317 	ldw	r2,12(r2)
81139720:	10800104 	addi	r2,r2,4
81139724:	e0fffb17 	ldw	r3,-20(fp)
81139728:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8113972c:	e0bffa17 	ldw	r2,-24(fp)
81139730:	10800317 	ldw	r2,12(r2)
81139734:	00c08004 	movi	r3,512
81139738:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8113973c:	e0bffa17 	ldw	r2,-24(fp)
81139740:	10800b17 	ldw	r2,44(r2)
81139744:	10001226 	beq	r2,zero,81139790 <alt_msgdma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139748:	0005303a 	rdctl	r2,status
8113974c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139750:	e0fffd17 	ldw	r3,-12(fp)
81139754:	00bfff84 	movi	r2,-2
81139758:	1884703a 	and	r2,r3,r2
8113975c:	1001703a 	wrctl	status,r2
  
  return context;
81139760:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
81139764:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
81139768:	e0bffa17 	ldw	r2,-24(fp)
8113976c:	10800b17 	ldw	r2,44(r2)
81139770:	e0fffa17 	ldw	r3,-24(fp)
81139774:	18c00c17 	ldw	r3,48(r3)
81139778:	1809883a 	mov	r4,r3
8113977c:	103ee83a 	callr	r2
81139780:	e0bffc17 	ldw	r2,-16(fp)
81139784:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139788:	e0bffe17 	ldw	r2,-8(fp)
8113978c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
81139790:	e0bffa17 	ldw	r2,-24(fp)
81139794:	10801783 	ldbu	r2,94(r2)
81139798:	10803fcc 	andi	r2,r2,255
8113979c:	10000a26 	beq	r2,zero,811397c8 <alt_msgdma_irq+0x148>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
811397a0:	e0bffa17 	ldw	r2,-24(fp)
811397a4:	10800617 	ldw	r2,24(r2)
811397a8:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
811397ac:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
811397b0:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
811397b4:	e0bffa17 	ldw	r2,-24(fp)
811397b8:	10800617 	ldw	r2,24(r2)
811397bc:	e0fffb17 	ldw	r3,-20(fp)
811397c0:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
811397c4:	00000c06 	br	811397f8 <alt_msgdma_irq+0x178>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
811397c8:	e0bffa17 	ldw	r2,-24(fp)
811397cc:	10800317 	ldw	r2,12(r2)
811397d0:	10800104 	addi	r2,r2,4
811397d4:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
811397d8:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
811397dc:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
811397e0:	e0bffa17 	ldw	r2,-24(fp)
811397e4:	10800317 	ldw	r2,12(r2)
811397e8:	10800104 	addi	r2,r2,4
811397ec:	e0fffb17 	ldw	r3,-20(fp)
811397f0:	10c00035 	stwio	r3,0(r2)
    }

    return;
811397f4:	0001883a 	nop
}
811397f8:	e037883a 	mov	sp,fp
811397fc:	dfc00117 	ldw	ra,4(sp)
81139800:	df000017 	ldw	fp,0(sp)
81139804:	dec00204 	addi	sp,sp,8
81139808:	f800283a 	ret

8113980c <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113980c:	defffb04 	addi	sp,sp,-20
81139810:	de00012e 	bgeu	sp,et,81139818 <alt_msgdma_construct_standard_descriptor+0xc>
81139814:	003b68fa 	trap	3
81139818:	df000415 	stw	fp,16(sp)
8113981c:	df000404 	addi	fp,sp,16
81139820:	e13ffc15 	stw	r4,-16(fp)
81139824:	e17ffd15 	stw	r5,-12(fp)
81139828:	e1bffe15 	stw	r6,-8(fp)
8113982c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81139830:	e0bffc17 	ldw	r2,-16(fp)
81139834:	10c01217 	ldw	r3,72(r2)
81139838:	e0800117 	ldw	r2,4(fp)
8113983c:	18800436 	bltu	r3,r2,81139850 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
81139840:	e0bffc17 	ldw	r2,-16(fp)
81139844:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81139848:	10803fcc 	andi	r2,r2,255
8113984c:	10000226 	beq	r2,zero,81139858 <alt_msgdma_construct_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81139850:	00bffa84 	movi	r2,-22
81139854:	00000e06 	br	81139890 <alt_msgdma_construct_standard_descriptor+0x84>
    }
    descriptor->read_address = read_address;
81139858:	e0bffd17 	ldw	r2,-12(fp)
8113985c:	e0fffe17 	ldw	r3,-8(fp)
81139860:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81139864:	e0bffd17 	ldw	r2,-12(fp)
81139868:	e0ffff17 	ldw	r3,-4(fp)
8113986c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81139870:	e0bffd17 	ldw	r2,-12(fp)
81139874:	e0c00117 	ldw	r3,4(fp)
81139878:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113987c:	e0800217 	ldw	r2,8(fp)
81139880:	10e00034 	orhi	r3,r2,32768
81139884:	e0bffd17 	ldw	r2,-12(fp)
81139888:	10c00315 	stw	r3,12(r2)
    
    return 0;
8113988c:	0005883a 	mov	r2,zero
}
81139890:	e037883a 	mov	sp,fp
81139894:	df000017 	ldw	fp,0(sp)
81139898:	dec00104 	addi	sp,sp,4
8113989c:	f800283a 	ret

811398a0 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811398a0:	defff604 	addi	sp,sp,-40
811398a4:	de00012e 	bgeu	sp,et,811398ac <alt_msgdma_construct_extended_descriptor+0xc>
811398a8:	003b68fa 	trap	3
811398ac:	df000915 	stw	fp,36(sp)
811398b0:	df000904 	addi	fp,sp,36
811398b4:	e13ff715 	stw	r4,-36(fp)
811398b8:	e17ff815 	stw	r5,-32(fp)
811398bc:	e1bff915 	stw	r6,-28(fp)
811398c0:	e1fffa15 	stw	r7,-24(fp)
811398c4:	e1800317 	ldw	r6,12(fp)
811398c8:	e1400417 	ldw	r5,16(fp)
811398cc:	e1000517 	ldw	r4,20(fp)
811398d0:	e0c00617 	ldw	r3,24(fp)
811398d4:	e0800717 	ldw	r2,28(fp)
811398d8:	e1bffb0d 	sth	r6,-20(fp)
811398dc:	e17ffc05 	stb	r5,-16(fp)
811398e0:	e13ffd05 	stb	r4,-12(fp)
811398e4:	e0fffe0d 	sth	r3,-8(fp)
811398e8:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
811398ec:	e0bff717 	ldw	r2,-36(fp)
811398f0:	10c01217 	ldw	r3,72(r2)
811398f4:	e0800117 	ldw	r2,4(fp)
811398f8:	18801936 	bltu	r3,r2,81139960 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
811398fc:	e13ff717 	ldw	r4,-36(fp)
81139900:	20801317 	ldw	r2,76(r4)
81139904:	20c01417 	ldw	r3,80(r4)
81139908:	e13ffe0b 	ldhu	r4,-8(fp)
8113990c:	213fffcc 	andi	r4,r4,65535
81139910:	2015883a 	mov	r10,r4
81139914:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81139918:	1ac01136 	bltu	r3,r11,81139960 <alt_msgdma_construct_extended_descriptor+0xc0>
8113991c:	58c0011e 	bne	r11,r3,81139924 <alt_msgdma_construct_extended_descriptor+0x84>
81139920:	12800f36 	bltu	r2,r10,81139960 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81139924:	e13ff717 	ldw	r4,-36(fp)
81139928:	20801317 	ldw	r2,76(r4)
8113992c:	20c01417 	ldw	r3,80(r4)
81139930:	e13fff0b 	ldhu	r4,-4(fp)
81139934:	213fffcc 	andi	r4,r4,65535
81139938:	2011883a 	mov	r8,r4
8113993c:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81139940:	1a400736 	bltu	r3,r9,81139960 <alt_msgdma_construct_extended_descriptor+0xc0>
81139944:	48c0011e 	bne	r9,r3,8113994c <alt_msgdma_construct_extended_descriptor+0xac>
81139948:	12000536 	bltu	r2,r8,81139960 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8113994c:	e0bff717 	ldw	r2,-36(fp)
81139950:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81139954:	10803fcc 	andi	r2,r2,255
81139958:	10800060 	cmpeqi	r2,r2,1
8113995c:	1000021e 	bne	r2,zero,81139968 <alt_msgdma_construct_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81139960:	00bffa84 	movi	r2,-22
81139964:	00002106 	br	811399ec <alt_msgdma_construct_extended_descriptor+0x14c>
    }
    
    descriptor->read_address_low = read_address;
81139968:	e0bff817 	ldw	r2,-32(fp)
8113996c:	e0fff917 	ldw	r3,-28(fp)
81139970:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
81139974:	e0bff817 	ldw	r2,-32(fp)
81139978:	e0fffa17 	ldw	r3,-24(fp)
8113997c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81139980:	e0bff817 	ldw	r2,-32(fp)
81139984:	e0c00117 	ldw	r3,4(fp)
81139988:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8113998c:	e0bff817 	ldw	r2,-32(fp)
81139990:	e0fffb0b 	ldhu	r3,-20(fp)
81139994:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
81139998:	e0bff817 	ldw	r2,-32(fp)
8113999c:	e0fffc03 	ldbu	r3,-16(fp)
811399a0:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
811399a4:	e0bff817 	ldw	r2,-32(fp)
811399a8:	e0fffd03 	ldbu	r3,-12(fp)
811399ac:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
811399b0:	e0bff817 	ldw	r2,-32(fp)
811399b4:	e0fffe0b 	ldhu	r3,-8(fp)
811399b8:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
811399bc:	e0bff817 	ldw	r2,-32(fp)
811399c0:	e0ffff0b 	ldhu	r3,-4(fp)
811399c4:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
811399c8:	e0bff817 	ldw	r2,-32(fp)
811399cc:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
811399d0:	e0bff817 	ldw	r2,-32(fp)
811399d4:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811399d8:	e0800217 	ldw	r2,8(fp)
811399dc:	10e00034 	orhi	r3,r2,32768
811399e0:	e0bff817 	ldw	r2,-32(fp)
811399e4:	10c00715 	stw	r3,28(r2)

  return 0 ;
811399e8:	0005883a 	mov	r2,zero

}
811399ec:	e037883a 	mov	sp,fp
811399f0:	df000017 	ldw	fp,0(sp)
811399f4:	dec00104 	addi	sp,sp,4
811399f8:	f800283a 	ret

811399fc <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
811399fc:	deffee04 	addi	sp,sp,-72
81139a00:	de00012e 	bgeu	sp,et,81139a08 <alt_msgdma_descriptor_async_transfer+0xc>
81139a04:	003b68fa 	trap	3
81139a08:	dfc01115 	stw	ra,68(sp)
81139a0c:	df001015 	stw	fp,64(sp)
81139a10:	df001004 	addi	fp,sp,64
81139a14:	e13ffd15 	stw	r4,-12(fp)
81139a18:	e17ffe15 	stw	r5,-8(fp)
81139a1c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81139a20:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
81139a24:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81139a28:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139a2c:	e0bffd17 	ldw	r2,-12(fp)
81139a30:	10800317 	ldw	r2,12(r2)
81139a34:	10800204 	addi	r2,r2,8
81139a38:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81139a3c:	10bfffcc 	andi	r2,r2,65535
81139a40:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139a44:	e0bffd17 	ldw	r2,-12(fp)
81139a48:	10800317 	ldw	r2,12(r2)
81139a4c:	10800204 	addi	r2,r2,8
81139a50:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81139a54:	1004d43a 	srli	r2,r2,16
81139a58:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81139a5c:	e0bffd17 	ldw	r2,-12(fp)
81139a60:	10800917 	ldw	r2,36(r2)
81139a64:	e0fff417 	ldw	r3,-48(fp)
81139a68:	1880042e 	bgeu	r3,r2,81139a7c <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81139a6c:	e0bffd17 	ldw	r2,-12(fp)
81139a70:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81139a74:	e0fff317 	ldw	r3,-52(fp)
81139a78:	18800236 	bltu	r3,r2,81139a84 <alt_msgdma_descriptor_async_transfer+0x88>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
81139a7c:	00bff904 	movi	r2,-28
81139a80:	0000a906 	br	81139d28 <alt_msgdma_descriptor_async_transfer+0x32c>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
81139a84:	e0bffd17 	ldw	r2,-12(fp)
81139a88:	10801817 	ldw	r2,96(r2)
81139a8c:	e0bff615 	stw	r2,-40(fp)
81139a90:	e03ffc0d 	sth	zero,-16(fp)
81139a94:	e0bffc0b 	ldhu	r2,-16(fp)
81139a98:	e0fffc84 	addi	r3,fp,-14
81139a9c:	180d883a 	mov	r6,r3
81139aa0:	100b883a 	mov	r5,r2
81139aa4:	e13ff617 	ldw	r4,-40(fp)
81139aa8:	112ff740 	call	8112ff74 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81139aac:	00800804 	movi	r2,32
81139ab0:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139ab4:	0005303a 	rdctl	r2,status
81139ab8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139abc:	e0fff717 	ldw	r3,-36(fp)
81139ac0:	00bfff84 	movi	r2,-2
81139ac4:	1884703a 	and	r2,r3,r2
81139ac8:	1001703a 	wrctl	status,r2
  
  return context;
81139acc:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81139ad0:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81139ad4:	e0bffd17 	ldw	r2,-12(fp)
81139ad8:	10800317 	ldw	r2,12(r2)
81139adc:	10800104 	addi	r2,r2,4
81139ae0:	e0fff117 	ldw	r3,-60(fp)
81139ae4:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81139ae8:	e0bffd17 	ldw	r2,-12(fp)
81139aec:	10800317 	ldw	r2,12(r2)
81139af0:	e0fffd17 	ldw	r3,-12(fp)
81139af4:	18c00317 	ldw	r3,12(r3)
81139af8:	18c00037 	ldwio	r3,0(r3)
81139afc:	10c00035 	stwio	r3,0(r2)
81139b00:	e0bff217 	ldw	r2,-56(fp)
81139b04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139b08:	e0bffb17 	ldw	r2,-20(fp)
81139b0c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81139b10:	e0bffe17 	ldw	r2,-8(fp)
81139b14:	10001e26 	beq	r2,zero,81139b90 <alt_msgdma_descriptor_async_transfer+0x194>
81139b18:	e0bfff17 	ldw	r2,-4(fp)
81139b1c:	10001c1e 	bne	r2,zero,81139b90 <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81139b20:	00001106 	br	81139b68 <alt_msgdma_descriptor_async_transfer+0x16c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81139b24:	01000044 	movi	r4,1
81139b28:	11276380 	call	81127638 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81139b2c:	e0bff00b 	ldhu	r2,-64(fp)
81139b30:	1084e230 	cmpltui	r2,r2,5000
81139b34:	1000091e 	bne	r2,zero,81139b5c <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
81139b38:	01204534 	movhi	r4,33044
81139b3c:	21015f04 	addi	r4,r4,1404
81139b40:	113bf200 	call	8113bf20 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81139b44:	e0bffd17 	ldw	r2,-12(fp)
81139b48:	10801817 	ldw	r2,96(r2)
81139b4c:	1009883a 	mov	r4,r2
81139b50:	11302fc0 	call	811302fc <OSSemPost>
				
                return -ETIME;
81139b54:	00bff084 	movi	r2,-62
81139b58:	00007306 	br	81139d28 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81139b5c:	e0bff00b 	ldhu	r2,-64(fp)
81139b60:	10800044 	addi	r2,r2,1
81139b64:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81139b68:	e0bffd17 	ldw	r2,-12(fp)
81139b6c:	10c00317 	ldw	r3,12(r2)
81139b70:	e0bffd17 	ldw	r2,-12(fp)
81139b74:	10800417 	ldw	r2,16(r2)
81139b78:	e1bffe17 	ldw	r6,-8(fp)
81139b7c:	100b883a 	mov	r5,r2
81139b80:	1809883a 	mov	r4,r3
81139b84:	11394b00 	call	811394b0 <alt_msgdma_write_standard_descriptor>
81139b88:	103fe61e 	bne	r2,zero,81139b24 <__reset+0xfb119b24>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81139b8c:	00002706 	br	81139c2c <alt_msgdma_descriptor_async_transfer+0x230>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81139b90:	e0bffe17 	ldw	r2,-8(fp)
81139b94:	10001f1e 	bne	r2,zero,81139c14 <alt_msgdma_descriptor_async_transfer+0x218>
81139b98:	e0bfff17 	ldw	r2,-4(fp)
81139b9c:	10001d26 	beq	r2,zero,81139c14 <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
81139ba0:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81139ba4:	00001106 	br	81139bec <alt_msgdma_descriptor_async_transfer+0x1f0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81139ba8:	01000044 	movi	r4,1
81139bac:	11276380 	call	81127638 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81139bb0:	e0bff00b 	ldhu	r2,-64(fp)
81139bb4:	1084e230 	cmpltui	r2,r2,5000
81139bb8:	1000091e 	bne	r2,zero,81139be0 <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
81139bbc:	01204534 	movhi	r4,33044
81139bc0:	21017504 	addi	r4,r4,1492
81139bc4:	113bf200 	call	8113bf20 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81139bc8:	e0bffd17 	ldw	r2,-12(fp)
81139bcc:	10801817 	ldw	r2,96(r2)
81139bd0:	1009883a 	mov	r4,r2
81139bd4:	11302fc0 	call	811302fc <OSSemPost>
				
                return -ETIME;
81139bd8:	00bff084 	movi	r2,-62
81139bdc:	00005206 	br	81139d28 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81139be0:	e0bff00b 	ldhu	r2,-64(fp)
81139be4:	10800044 	addi	r2,r2,1
81139be8:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81139bec:	e0bffd17 	ldw	r2,-12(fp)
81139bf0:	10c00317 	ldw	r3,12(r2)
81139bf4:	e0bffd17 	ldw	r2,-12(fp)
81139bf8:	10800417 	ldw	r2,16(r2)
81139bfc:	e1bfff17 	ldw	r6,-4(fp)
81139c00:	100b883a 	mov	r5,r2
81139c04:	1809883a 	mov	r4,r3
81139c08:	113954c0 	call	8113954c <alt_msgdma_write_extended_descriptor>
81139c0c:	103fe61e 	bne	r2,zero,81139ba8 <__reset+0xfb119ba8>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81139c10:	00000606 	br	81139c2c <alt_msgdma_descriptor_async_transfer+0x230>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81139c14:	e0bffd17 	ldw	r2,-12(fp)
81139c18:	10801817 	ldw	r2,96(r2)
81139c1c:	1009883a 	mov	r4,r2
81139c20:	11302fc0 	call	811302fc <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81139c24:	00bfffc4 	movi	r2,-1
81139c28:	00003f06 	br	81139d28 <alt_msgdma_descriptor_async_transfer+0x32c>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81139c2c:	e0bffd17 	ldw	r2,-12(fp)
81139c30:	10800b17 	ldw	r2,44(r2)
81139c34:	10001c26 	beq	r2,zero,81139ca8 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
81139c38:	e0bffd17 	ldw	r2,-12(fp)
81139c3c:	10c00d17 	ldw	r3,52(r2)
81139c40:	e0bff117 	ldw	r2,-60(fp)
81139c44:	1884b03a 	or	r2,r3,r2
81139c48:	10800514 	ori	r2,r2,20
81139c4c:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81139c50:	e0fff117 	ldw	r3,-60(fp)
81139c54:	00bff7c4 	movi	r2,-33
81139c58:	1884703a 	and	r2,r3,r2
81139c5c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139c60:	0005303a 	rdctl	r2,status
81139c64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139c68:	e0fff917 	ldw	r3,-28(fp)
81139c6c:	00bfff84 	movi	r2,-2
81139c70:	1884703a 	and	r2,r3,r2
81139c74:	1001703a 	wrctl	status,r2
  
  return context;
81139c78:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
81139c7c:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81139c80:	e0bffd17 	ldw	r2,-12(fp)
81139c84:	10800317 	ldw	r2,12(r2)
81139c88:	10800104 	addi	r2,r2,4
81139c8c:	e0fff117 	ldw	r3,-60(fp)
81139c90:	10c00035 	stwio	r3,0(r2)
81139c94:	e0bff217 	ldw	r2,-56(fp)
81139c98:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139c9c:	e0bff517 	ldw	r2,-44(fp)
81139ca0:	1001703a 	wrctl	status,r2
81139ca4:	00001b06 	br	81139d14 <alt_msgdma_descriptor_async_transfer+0x318>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
81139ca8:	e0bffd17 	ldw	r2,-12(fp)
81139cac:	10c00d17 	ldw	r3,52(r2)
81139cb0:	e0bff117 	ldw	r2,-60(fp)
81139cb4:	1884b03a 	or	r2,r3,r2
81139cb8:	10800114 	ori	r2,r2,4
81139cbc:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81139cc0:	e0fff117 	ldw	r3,-60(fp)
81139cc4:	00bff3c4 	movi	r2,-49
81139cc8:	1884703a 	and	r2,r3,r2
81139ccc:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139cd0:	0005303a 	rdctl	r2,status
81139cd4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139cd8:	e0fffa17 	ldw	r3,-24(fp)
81139cdc:	00bfff84 	movi	r2,-2
81139ce0:	1884703a 	and	r2,r3,r2
81139ce4:	1001703a 	wrctl	status,r2
  
  return context;
81139ce8:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
81139cec:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81139cf0:	e0bffd17 	ldw	r2,-12(fp)
81139cf4:	10800317 	ldw	r2,12(r2)
81139cf8:	10800104 	addi	r2,r2,4
81139cfc:	e0fff117 	ldw	r3,-60(fp)
81139d00:	10c00035 	stwio	r3,0(r2)
81139d04:	e0bff217 	ldw	r2,-56(fp)
81139d08:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139d0c:	e0bff817 	ldw	r2,-32(fp)
81139d10:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
81139d14:	e0bffd17 	ldw	r2,-12(fp)
81139d18:	10801817 	ldw	r2,96(r2)
81139d1c:	1009883a 	mov	r4,r2
81139d20:	11302fc0 	call	811302fc <OSSemPost>
    
    return 0;
81139d24:	0005883a 	mov	r2,zero
}
81139d28:	e037883a 	mov	sp,fp
81139d2c:	dfc00117 	ldw	ra,4(sp)
81139d30:	df000017 	ldw	fp,0(sp)
81139d34:	dec00204 	addi	sp,sp,8
81139d38:	f800283a 	ret

81139d3c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81139d3c:	deffee04 	addi	sp,sp,-72
81139d40:	de00012e 	bgeu	sp,et,81139d48 <alt_msgdma_descriptor_sync_transfer+0xc>
81139d44:	003b68fa 	trap	3
81139d48:	dfc01115 	stw	ra,68(sp)
81139d4c:	df001015 	stw	fp,64(sp)
81139d50:	df001004 	addi	fp,sp,64
81139d54:	e13ffd15 	stw	r4,-12(fp)
81139d58:	e17ffe15 	stw	r5,-8(fp)
81139d5c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81139d60:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
81139d64:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
81139d68:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
81139d6c:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139d70:	e0bffd17 	ldw	r2,-12(fp)
81139d74:	10800317 	ldw	r2,12(r2)
81139d78:	10800204 	addi	r2,r2,8
81139d7c:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81139d80:	10bfffcc 	andi	r2,r2,65535
81139d84:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139d88:	e0bffd17 	ldw	r2,-12(fp)
81139d8c:	10800317 	ldw	r2,12(r2)
81139d90:	10800204 	addi	r2,r2,8
81139d94:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81139d98:	1004d43a 	srli	r2,r2,16
81139d9c:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
81139da0:	00807804 	movi	r2,480
81139da4:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81139da8:	00001906 	br	81139e10 <alt_msgdma_descriptor_sync_transfer+0xd4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81139dac:	01000044 	movi	r4,1
81139db0:	11276380 	call	81127638 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81139db4:	e0bff10b 	ldhu	r2,-60(fp)
81139db8:	1084e230 	cmpltui	r2,r2,5000
81139dbc:	1000051e 	bne	r2,zero,81139dd4 <alt_msgdma_descriptor_sync_transfer+0x98>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
81139dc0:	01204534 	movhi	r4,33044
81139dc4:	21018b04 	addi	r4,r4,1580
81139dc8:	113bf200 	call	8113bf20 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81139dcc:	00bff084 	movi	r2,-62
81139dd0:	0000d706 	br	8113a130 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;  
81139dd4:	e0bff10b 	ldhu	r2,-60(fp)
81139dd8:	10800044 	addi	r2,r2,1
81139ddc:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139de0:	e0bffd17 	ldw	r2,-12(fp)
81139de4:	10800317 	ldw	r2,12(r2)
81139de8:	10800204 	addi	r2,r2,8
81139dec:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
81139df0:	10bfffcc 	andi	r2,r2,65535
81139df4:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81139df8:	e0bffd17 	ldw	r2,-12(fp)
81139dfc:	10800317 	ldw	r2,12(r2)
81139e00:	10800204 	addi	r2,r2,8
81139e04:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81139e08:	1004d43a 	srli	r2,r2,16
81139e0c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81139e10:	e0bffd17 	ldw	r2,-12(fp)
81139e14:	10800917 	ldw	r2,36(r2)
81139e18:	e0fff317 	ldw	r3,-52(fp)
81139e1c:	18bfe32e 	bgeu	r3,r2,81139dac <__reset+0xfb119dac>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81139e20:	e0bffd17 	ldw	r2,-12(fp)
81139e24:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81139e28:	e0fff217 	ldw	r3,-56(fp)
81139e2c:	18bfdf2e 	bgeu	r3,r2,81139dac <__reset+0xfb119dac>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
81139e30:	e0bffd17 	ldw	r2,-12(fp)
81139e34:	10801817 	ldw	r2,96(r2)
81139e38:	e0bff815 	stw	r2,-32(fp)
81139e3c:	e03ffc0d 	sth	zero,-16(fp)
81139e40:	e0bffc0b 	ldhu	r2,-16(fp)
81139e44:	e0fffc84 	addi	r3,fp,-14
81139e48:	180d883a 	mov	r6,r3
81139e4c:	100b883a 	mov	r5,r2
81139e50:	e13ff817 	ldw	r4,-32(fp)
81139e54:	112ff740 	call	8112ff74 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81139e58:	0005303a 	rdctl	r2,status
81139e5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81139e60:	e0fffb17 	ldw	r3,-20(fp)
81139e64:	00bfff84 	movi	r2,-2
81139e68:	1884703a 	and	r2,r3,r2
81139e6c:	1001703a 	wrctl	status,r2
  
  return context;
81139e70:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
81139e74:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81139e78:	e0bffd17 	ldw	r2,-12(fp)
81139e7c:	10800317 	ldw	r2,12(r2)
81139e80:	10800104 	addi	r2,r2,4
81139e84:	00c00804 	movi	r3,32
81139e88:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81139e8c:	e0bffd17 	ldw	r2,-12(fp)
81139e90:	10800317 	ldw	r2,12(r2)
81139e94:	e0fffd17 	ldw	r3,-12(fp)
81139e98:	18c00317 	ldw	r3,12(r3)
81139e9c:	18c00037 	ldwio	r3,0(r3)
81139ea0:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81139ea4:	e0bffe17 	ldw	r2,-8(fp)
81139ea8:	10001f26 	beq	r2,zero,81139f28 <alt_msgdma_descriptor_sync_transfer+0x1ec>
81139eac:	e0bfff17 	ldw	r2,-4(fp)
81139eb0:	10001d1e 	bne	r2,zero,81139f28 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
81139eb4:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81139eb8:	00001106 	br	81139f00 <alt_msgdma_descriptor_sync_transfer+0x1c4>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
81139ebc:	01000044 	movi	r4,1
81139ec0:	11276380 	call	81127638 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81139ec4:	e0bff10b 	ldhu	r2,-60(fp)
81139ec8:	1084e230 	cmpltui	r2,r2,5000
81139ecc:	1000091e 	bne	r2,zero,81139ef4 <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
81139ed0:	01204534 	movhi	r4,33044
81139ed4:	21019f04 	addi	r4,r4,1660
81139ed8:	113bf200 	call	8113bf20 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81139edc:	e0bffd17 	ldw	r2,-12(fp)
81139ee0:	10801817 	ldw	r2,96(r2)
81139ee4:	1009883a 	mov	r4,r2
81139ee8:	11302fc0 	call	811302fc <OSSemPost>
				
                return -ETIME;
81139eec:	00bff084 	movi	r2,-62
81139ef0:	00008f06 	br	8113a130 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;    
81139ef4:	e0bff10b 	ldhu	r2,-60(fp)
81139ef8:	10800044 	addi	r2,r2,1
81139efc:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81139f00:	e0bffd17 	ldw	r2,-12(fp)
81139f04:	10c00317 	ldw	r3,12(r2)
81139f08:	e0bffd17 	ldw	r2,-12(fp)
81139f0c:	10800417 	ldw	r2,16(r2)
81139f10:	e1bffe17 	ldw	r6,-8(fp)
81139f14:	100b883a 	mov	r5,r2
81139f18:	1809883a 	mov	r4,r3
81139f1c:	11394b00 	call	811394b0 <alt_msgdma_write_standard_descriptor>
81139f20:	103fe61e 	bne	r2,zero,81139ebc <__reset+0xfb119ebc>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81139f24:	00002706 	br	81139fc4 <alt_msgdma_descriptor_sync_transfer+0x288>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81139f28:	e0bffe17 	ldw	r2,-8(fp)
81139f2c:	10001f1e 	bne	r2,zero,81139fac <alt_msgdma_descriptor_sync_transfer+0x270>
81139f30:	e0bfff17 	ldw	r2,-4(fp)
81139f34:	10001d26 	beq	r2,zero,81139fac <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
81139f38:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81139f3c:	00001106 	br	81139f84 <alt_msgdma_descriptor_sync_transfer+0x248>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81139f40:	01000044 	movi	r4,1
81139f44:	11276380 	call	81127638 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81139f48:	e0bff10b 	ldhu	r2,-60(fp)
81139f4c:	1084e230 	cmpltui	r2,r2,5000
81139f50:	1000091e 	bne	r2,zero,81139f78 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
81139f54:	01204534 	movhi	r4,33044
81139f58:	2101b004 	addi	r4,r4,1728
81139f5c:	113bf200 	call	8113bf20 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81139f60:	e0bffd17 	ldw	r2,-12(fp)
81139f64:	10801817 	ldw	r2,96(r2)
81139f68:	1009883a 	mov	r4,r2
81139f6c:	11302fc0 	call	811302fc <OSSemPost>
				
                return -ETIME;
81139f70:	00bff084 	movi	r2,-62
81139f74:	00006e06 	br	8113a130 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;
81139f78:	e0bff10b 	ldhu	r2,-60(fp)
81139f7c:	10800044 	addi	r2,r2,1
81139f80:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81139f84:	e0bffd17 	ldw	r2,-12(fp)
81139f88:	10c00317 	ldw	r3,12(r2)
81139f8c:	e0bffd17 	ldw	r2,-12(fp)
81139f90:	10800417 	ldw	r2,16(r2)
81139f94:	e1bfff17 	ldw	r6,-4(fp)
81139f98:	100b883a 	mov	r5,r2
81139f9c:	1809883a 	mov	r4,r3
81139fa0:	113954c0 	call	8113954c <alt_msgdma_write_extended_descriptor>
81139fa4:	103fe61e 	bne	r2,zero,81139f40 <__reset+0xfb119f40>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81139fa8:	00000606 	br	81139fc4 <alt_msgdma_descriptor_sync_transfer+0x288>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81139fac:	e0bffd17 	ldw	r2,-12(fp)
81139fb0:	10801817 	ldw	r2,96(r2)
81139fb4:	1009883a 	mov	r4,r2
81139fb8:	11302fc0 	call	811302fc <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81139fbc:	00bfffc4 	movi	r2,-1
81139fc0:	00005b06 	br	8113a130 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81139fc4:	e0bffd17 	ldw	r2,-12(fp)
81139fc8:	10800317 	ldw	r2,12(r2)
81139fcc:	10800104 	addi	r2,r2,4
81139fd0:	e0fffd17 	ldw	r3,-12(fp)
81139fd4:	19000d17 	ldw	r4,52(r3)
81139fd8:	00fff2c4 	movi	r3,-53
81139fdc:	20c6703a 	and	r3,r4,r3
81139fe0:	18c00114 	ori	r3,r3,4
81139fe4:	10c00035 	stwio	r3,0(r2)
81139fe8:	e0bff517 	ldw	r2,-44(fp)
81139fec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81139ff0:	e0bff717 	ldw	r2,-36(fp)
81139ff4:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81139ff8:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81139ffc:	e0bffd17 	ldw	r2,-12(fp)
8113a000:	10800317 	ldw	r2,12(r2)
8113a004:	10800037 	ldwio	r2,0(r2)
8113a008:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8113a00c:	00001506 	br	8113a064 <alt_msgdma_descriptor_sync_transfer+0x328>
    {
        alt_busy_sleep(1); /* delay 1us */
8113a010:	01000044 	movi	r4,1
8113a014:	11276380 	call	81127638 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113a018:	e0bff10b 	ldhu	r2,-60(fp)
8113a01c:	1084e230 	cmpltui	r2,r2,5000
8113a020:	1000091e 	bne	r2,zero,8113a048 <alt_msgdma_descriptor_sync_transfer+0x30c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8113a024:	01204534 	movhi	r4,33044
8113a028:	2101c104 	addi	r4,r4,1796
8113a02c:	113bf200 	call	8113bf20 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
8113a030:	e0bffd17 	ldw	r2,-12(fp)
8113a034:	10801817 	ldw	r2,96(r2)
8113a038:	1009883a 	mov	r4,r2
8113a03c:	11302fc0 	call	811302fc <OSSemPost>
			
            return -ETIME;
8113a040:	00bff084 	movi	r2,-62
8113a044:	00003a06 	br	8113a130 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;
8113a048:	e0bff10b 	ldhu	r2,-60(fp)
8113a04c:	10800044 	addi	r2,r2,1
8113a050:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8113a054:	e0bffd17 	ldw	r2,-12(fp)
8113a058:	10800317 	ldw	r2,12(r2)
8113a05c:	10800037 	ldwio	r2,0(r2)
8113a060:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8113a064:	e0fff017 	ldw	r3,-64(fp)
8113a068:	e0bff617 	ldw	r2,-40(fp)
8113a06c:	1884703a 	and	r2,r3,r2
8113a070:	1000031e 	bne	r2,zero,8113a080 <alt_msgdma_descriptor_sync_transfer+0x344>
8113a074:	e0bff017 	ldw	r2,-64(fp)
8113a078:	1080004c 	andi	r2,r2,1
8113a07c:	103fe41e 	bne	r2,zero,8113a010 <__reset+0xfb11a010>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
8113a080:	e0fff017 	ldw	r3,-64(fp)
8113a084:	e0bff617 	ldw	r2,-40(fp)
8113a088:	1884703a 	and	r2,r3,r2
8113a08c:	10000626 	beq	r2,zero,8113a0a8 <alt_msgdma_descriptor_sync_transfer+0x36c>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
8113a090:	e0bffd17 	ldw	r2,-12(fp)
8113a094:	10801817 	ldw	r2,96(r2)
8113a098:	1009883a 	mov	r4,r2
8113a09c:	11302fc0 	call	811302fc <OSSemPost>
		
        return error;
8113a0a0:	e0bff617 	ldw	r2,-40(fp)
8113a0a4:	00002206 	br	8113a130 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
8113a0a8:	e0bffd17 	ldw	r2,-12(fp)
8113a0ac:	10800317 	ldw	r2,12(r2)
8113a0b0:	10800104 	addi	r2,r2,4
8113a0b4:	10800037 	ldwio	r2,0(r2)
8113a0b8:	10800814 	ori	r2,r2,32
8113a0bc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113a0c0:	0005303a 	rdctl	r2,status
8113a0c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113a0c8:	e0fffa17 	ldw	r3,-24(fp)
8113a0cc:	00bfff84 	movi	r2,-2
8113a0d0:	1884703a 	and	r2,r3,r2
8113a0d4:	1001703a 	wrctl	status,r2
  
  return context;
8113a0d8:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
8113a0dc:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
8113a0e0:	e0bffd17 	ldw	r2,-12(fp)
8113a0e4:	10800317 	ldw	r2,12(r2)
8113a0e8:	10800104 	addi	r2,r2,4
8113a0ec:	e0fff417 	ldw	r3,-48(fp)
8113a0f0:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113a0f4:	e0bffd17 	ldw	r2,-12(fp)
8113a0f8:	10800317 	ldw	r2,12(r2)
8113a0fc:	e0fffd17 	ldw	r3,-12(fp)
8113a100:	18c00317 	ldw	r3,12(r3)
8113a104:	18c00037 	ldwio	r3,0(r3)
8113a108:	10c00035 	stwio	r3,0(r2)
8113a10c:	e0bff517 	ldw	r2,-44(fp)
8113a110:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113a114:	e0bff917 	ldw	r2,-28(fp)
8113a118:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
8113a11c:	e0bffd17 	ldw	r2,-12(fp)
8113a120:	10801817 	ldw	r2,96(r2)
8113a124:	1009883a 	mov	r4,r2
8113a128:	11302fc0 	call	811302fc <OSSemPost>
    
    return 0;
8113a12c:	0005883a 	mov	r2,zero

}
8113a130:	e037883a 	mov	sp,fp
8113a134:	dfc00117 	ldw	ra,4(sp)
8113a138:	df000017 	ldw	fp,0(sp)
8113a13c:	dec00204 	addi	sp,sp,8
8113a140:	f800283a 	ret

8113a144 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
8113a144:	defff804 	addi	sp,sp,-32
8113a148:	de00012e 	bgeu	sp,et,8113a150 <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
8113a14c:	003b68fa 	trap	3
8113a150:	dfc00715 	stw	ra,28(sp)
8113a154:	df000615 	stw	fp,24(sp)
8113a158:	df000604 	addi	fp,sp,24
8113a15c:	e13ffc15 	stw	r4,-16(fp)
8113a160:	e17ffd15 	stw	r5,-12(fp)
8113a164:	e1bffe15 	stw	r6,-8(fp)
8113a168:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
8113a16c:	e0800217 	ldw	r2,8(fp)
8113a170:	d8800115 	stw	r2,4(sp)
8113a174:	e0bfff17 	ldw	r2,-4(fp)
8113a178:	d8800015 	stw	r2,0(sp)
8113a17c:	e1fffe17 	ldw	r7,-8(fp)
8113a180:	000d883a 	mov	r6,zero
8113a184:	e17ffd17 	ldw	r5,-12(fp)
8113a188:	e13ffc17 	ldw	r4,-16(fp)
8113a18c:	113980c0 	call	8113980c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8113a190:	e037883a 	mov	sp,fp
8113a194:	dfc00117 	ldw	ra,4(sp)
8113a198:	df000017 	ldw	fp,0(sp)
8113a19c:	dec00204 	addi	sp,sp,8
8113a1a0:	f800283a 	ret

8113a1a4 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8113a1a4:	defff804 	addi	sp,sp,-32
8113a1a8:	de00012e 	bgeu	sp,et,8113a1b0 <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
8113a1ac:	003b68fa 	trap	3
8113a1b0:	dfc00715 	stw	ra,28(sp)
8113a1b4:	df000615 	stw	fp,24(sp)
8113a1b8:	df000604 	addi	fp,sp,24
8113a1bc:	e13ffc15 	stw	r4,-16(fp)
8113a1c0:	e17ffd15 	stw	r5,-12(fp)
8113a1c4:	e1bffe15 	stw	r6,-8(fp)
8113a1c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113a1cc:	e0800217 	ldw	r2,8(fp)
8113a1d0:	d8800115 	stw	r2,4(sp)
8113a1d4:	e0bfff17 	ldw	r2,-4(fp)
8113a1d8:	d8800015 	stw	r2,0(sp)
8113a1dc:	000f883a 	mov	r7,zero
8113a1e0:	e1bffe17 	ldw	r6,-8(fp)
8113a1e4:	e17ffd17 	ldw	r5,-12(fp)
8113a1e8:	e13ffc17 	ldw	r4,-16(fp)
8113a1ec:	113980c0 	call	8113980c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
8113a1f0:	e037883a 	mov	sp,fp
8113a1f4:	dfc00117 	ldw	ra,4(sp)
8113a1f8:	df000017 	ldw	fp,0(sp)
8113a1fc:	dec00204 	addi	sp,sp,8
8113a200:	f800283a 	ret

8113a204 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113a204:	defff804 	addi	sp,sp,-32
8113a208:	de00012e 	bgeu	sp,et,8113a210 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
8113a20c:	003b68fa 	trap	3
8113a210:	dfc00715 	stw	ra,28(sp)
8113a214:	df000615 	stw	fp,24(sp)
8113a218:	df000604 	addi	fp,sp,24
8113a21c:	e13ffc15 	stw	r4,-16(fp)
8113a220:	e17ffd15 	stw	r5,-12(fp)
8113a224:	e1bffe15 	stw	r6,-8(fp)
8113a228:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
8113a22c:	e0800317 	ldw	r2,12(fp)
8113a230:	d8800115 	stw	r2,4(sp)
8113a234:	e0800217 	ldw	r2,8(fp)
8113a238:	d8800015 	stw	r2,0(sp)
8113a23c:	e1ffff17 	ldw	r7,-4(fp)
8113a240:	e1bffe17 	ldw	r6,-8(fp)
8113a244:	e17ffd17 	ldw	r5,-12(fp)
8113a248:	e13ffc17 	ldw	r4,-16(fp)
8113a24c:	113980c0 	call	8113980c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
8113a250:	e037883a 	mov	sp,fp
8113a254:	dfc00117 	ldw	ra,4(sp)
8113a258:	df000017 	ldw	fp,0(sp)
8113a25c:	dec00204 	addi	sp,sp,8
8113a260:	f800283a 	ret

8113a264 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
8113a264:	defff004 	addi	sp,sp,-64
8113a268:	de00012e 	bgeu	sp,et,8113a270 <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
8113a26c:	003b68fa 	trap	3
8113a270:	dfc00f15 	stw	ra,60(sp)
8113a274:	df000e15 	stw	fp,56(sp)
8113a278:	df000e04 	addi	fp,sp,56
8113a27c:	e13ff915 	stw	r4,-28(fp)
8113a280:	e17ffa15 	stw	r5,-24(fp)
8113a284:	e1bffb15 	stw	r6,-20(fp)
8113a288:	e1fffc15 	stw	r7,-16(fp)
8113a28c:	e1000317 	ldw	r4,12(fp)
8113a290:	e0c00417 	ldw	r3,16(fp)
8113a294:	e0800517 	ldw	r2,20(fp)
8113a298:	e13ffd0d 	sth	r4,-12(fp)
8113a29c:	e0fffe05 	stb	r3,-8(fp)
8113a2a0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113a2a4:	e0bffd0b 	ldhu	r2,-12(fp)
8113a2a8:	e0fffe03 	ldbu	r3,-8(fp)
8113a2ac:	e13fff0b 	ldhu	r4,-4(fp)
8113a2b0:	d9000615 	stw	r4,24(sp)
8113a2b4:	d8000515 	stw	zero,20(sp)
8113a2b8:	d8c00415 	stw	r3,16(sp)
8113a2bc:	d8000315 	stw	zero,12(sp)
8113a2c0:	d8800215 	stw	r2,8(sp)
8113a2c4:	e0800217 	ldw	r2,8(fp)
8113a2c8:	d8800115 	stw	r2,4(sp)
8113a2cc:	e0bffc17 	ldw	r2,-16(fp)
8113a2d0:	d8800015 	stw	r2,0(sp)
8113a2d4:	e1fffb17 	ldw	r7,-20(fp)
8113a2d8:	000d883a 	mov	r6,zero
8113a2dc:	e17ffa17 	ldw	r5,-24(fp)
8113a2e0:	e13ff917 	ldw	r4,-28(fp)
8113a2e4:	11398a00 	call	811398a0 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
8113a2e8:	e037883a 	mov	sp,fp
8113a2ec:	dfc00117 	ldw	ra,4(sp)
8113a2f0:	df000017 	ldw	fp,0(sp)
8113a2f4:	dec00204 	addi	sp,sp,8
8113a2f8:	f800283a 	ret

8113a2fc <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113a2fc:	defff004 	addi	sp,sp,-64
8113a300:	de00012e 	bgeu	sp,et,8113a308 <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
8113a304:	003b68fa 	trap	3
8113a308:	dfc00f15 	stw	ra,60(sp)
8113a30c:	df000e15 	stw	fp,56(sp)
8113a310:	df000e04 	addi	fp,sp,56
8113a314:	e13ff915 	stw	r4,-28(fp)
8113a318:	e17ffa15 	stw	r5,-24(fp)
8113a31c:	e1bffb15 	stw	r6,-20(fp)
8113a320:	e1fffc15 	stw	r7,-16(fp)
8113a324:	e1000317 	ldw	r4,12(fp)
8113a328:	e0c00417 	ldw	r3,16(fp)
8113a32c:	e0800517 	ldw	r2,20(fp)
8113a330:	e13ffd0d 	sth	r4,-12(fp)
8113a334:	e0fffe05 	stb	r3,-8(fp)
8113a338:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
8113a33c:	e0bffd0b 	ldhu	r2,-12(fp)
8113a340:	e0fffe03 	ldbu	r3,-8(fp)
8113a344:	e13fff0b 	ldhu	r4,-4(fp)
8113a348:	d8000615 	stw	zero,24(sp)
8113a34c:	d9000515 	stw	r4,20(sp)
8113a350:	d8000415 	stw	zero,16(sp)
8113a354:	d8c00315 	stw	r3,12(sp)
8113a358:	d8800215 	stw	r2,8(sp)
8113a35c:	e0800217 	ldw	r2,8(fp)
8113a360:	d8800115 	stw	r2,4(sp)
8113a364:	e0bffc17 	ldw	r2,-16(fp)
8113a368:	d8800015 	stw	r2,0(sp)
8113a36c:	000f883a 	mov	r7,zero
8113a370:	e1bffb17 	ldw	r6,-20(fp)
8113a374:	e17ffa17 	ldw	r5,-24(fp)
8113a378:	e13ff917 	ldw	r4,-28(fp)
8113a37c:	11398a00 	call	811398a0 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
8113a380:	e037883a 	mov	sp,fp
8113a384:	dfc00117 	ldw	ra,4(sp)
8113a388:	df000017 	ldw	fp,0(sp)
8113a38c:	dec00204 	addi	sp,sp,8
8113a390:	f800283a 	ret

8113a394 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8113a394:	deffee04 	addi	sp,sp,-72
8113a398:	de00012e 	bgeu	sp,et,8113a3a0 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
8113a39c:	003b68fa 	trap	3
8113a3a0:	dfc01115 	stw	ra,68(sp)
8113a3a4:	df001015 	stw	fp,64(sp)
8113a3a8:	df001004 	addi	fp,sp,64
8113a3ac:	e13ff715 	stw	r4,-36(fp)
8113a3b0:	e17ff815 	stw	r5,-32(fp)
8113a3b4:	e1bff915 	stw	r6,-28(fp)
8113a3b8:	e1fffa15 	stw	r7,-24(fp)
8113a3bc:	e1800417 	ldw	r6,16(fp)
8113a3c0:	e1400517 	ldw	r5,20(fp)
8113a3c4:	e1000617 	ldw	r4,24(fp)
8113a3c8:	e0c00717 	ldw	r3,28(fp)
8113a3cc:	e0800817 	ldw	r2,32(fp)
8113a3d0:	e1bffb0d 	sth	r6,-20(fp)
8113a3d4:	e17ffc05 	stb	r5,-16(fp)
8113a3d8:	e13ffd05 	stb	r4,-12(fp)
8113a3dc:	e0fffe0d 	sth	r3,-8(fp)
8113a3e0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113a3e4:	e0bffb0b 	ldhu	r2,-20(fp)
8113a3e8:	e0fffc03 	ldbu	r3,-16(fp)
8113a3ec:	e13ffd03 	ldbu	r4,-12(fp)
8113a3f0:	e17ffe0b 	ldhu	r5,-8(fp)
8113a3f4:	e1bfff0b 	ldhu	r6,-4(fp)
8113a3f8:	d9800615 	stw	r6,24(sp)
8113a3fc:	d9400515 	stw	r5,20(sp)
8113a400:	d9000415 	stw	r4,16(sp)
8113a404:	d8c00315 	stw	r3,12(sp)
8113a408:	d8800215 	stw	r2,8(sp)
8113a40c:	e0800317 	ldw	r2,12(fp)
8113a410:	d8800115 	stw	r2,4(sp)
8113a414:	e0800217 	ldw	r2,8(fp)
8113a418:	d8800015 	stw	r2,0(sp)
8113a41c:	e1fffa17 	ldw	r7,-24(fp)
8113a420:	e1bff917 	ldw	r6,-28(fp)
8113a424:	e17ff817 	ldw	r5,-32(fp)
8113a428:	e13ff717 	ldw	r4,-36(fp)
8113a42c:	11398a00 	call	811398a0 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
8113a430:	e037883a 	mov	sp,fp
8113a434:	dfc00117 	ldw	ra,4(sp)
8113a438:	df000017 	ldw	fp,0(sp)
8113a43c:	dec00204 	addi	sp,sp,8
8113a440:	f800283a 	ret

8113a444 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113a444:	defffb04 	addi	sp,sp,-20
8113a448:	de00012e 	bgeu	sp,et,8113a450 <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
8113a44c:	003b68fa 	trap	3
8113a450:	df000415 	stw	fp,16(sp)
8113a454:	df000404 	addi	fp,sp,16
8113a458:	e13ffc15 	stw	r4,-16(fp)
8113a45c:	e17ffd15 	stw	r5,-12(fp)
8113a460:	e1bffe15 	stw	r6,-8(fp)
8113a464:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
8113a468:	e0bffc17 	ldw	r2,-16(fp)
8113a46c:	10c01217 	ldw	r3,72(r2)
8113a470:	e0800117 	ldw	r2,4(fp)
8113a474:	18800436 	bltu	r3,r2,8113a488 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
8113a478:	e0bffc17 	ldw	r2,-16(fp)
8113a47c:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
8113a480:	10803fcc 	andi	r2,r2,255
8113a484:	10000226 	beq	r2,zero,8113a490 <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
8113a488:	00bffa84 	movi	r2,-22
8113a48c:	00001406 	br	8113a4e0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
    }
    descriptor->read_address = read_address;
8113a490:	e0bffd17 	ldw	r2,-12(fp)
8113a494:	e0fffe17 	ldw	r3,-8(fp)
8113a498:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
8113a49c:	e0bffd17 	ldw	r2,-12(fp)
8113a4a0:	e0ffff17 	ldw	r3,-4(fp)
8113a4a4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113a4a8:	e0bffd17 	ldw	r2,-12(fp)
8113a4ac:	e0c00117 	ldw	r3,4(fp)
8113a4b0:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8113a4b4:	e0fffd17 	ldw	r3,-12(fp)
8113a4b8:	e0bffd17 	ldw	r2,-12(fp)
8113a4bc:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113a4c0:	e0c00217 	ldw	r3,8(fp)
8113a4c4:	00900034 	movhi	r2,16384
8113a4c8:	10bfffc4 	addi	r2,r2,-1
8113a4cc:	1884703a 	and	r2,r3,r2
8113a4d0:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8113a4d4:	e0bffd17 	ldw	r2,-12(fp)
8113a4d8:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
8113a4dc:	0005883a 	mov	r2,zero
}
8113a4e0:	e037883a 	mov	sp,fp
8113a4e4:	df000017 	ldw	fp,0(sp)
8113a4e8:	dec00104 	addi	sp,sp,4
8113a4ec:	f800283a 	ret

8113a4f0 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113a4f0:	defff404 	addi	sp,sp,-48
8113a4f4:	de00012e 	bgeu	sp,et,8113a4fc <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
8113a4f8:	003b68fa 	trap	3
8113a4fc:	df000b15 	stw	fp,44(sp)
8113a500:	df000b04 	addi	fp,sp,44
8113a504:	e13ff715 	stw	r4,-36(fp)
8113a508:	e17ff815 	stw	r5,-32(fp)
8113a50c:	e1bff915 	stw	r6,-28(fp)
8113a510:	e1fffa15 	stw	r7,-24(fp)
8113a514:	e1800517 	ldw	r6,20(fp)
8113a518:	e1400617 	ldw	r5,24(fp)
8113a51c:	e1000717 	ldw	r4,28(fp)
8113a520:	e0c00817 	ldw	r3,32(fp)
8113a524:	e0800917 	ldw	r2,36(fp)
8113a528:	e1bffb0d 	sth	r6,-20(fp)
8113a52c:	e17ffc05 	stb	r5,-16(fp)
8113a530:	e13ffd05 	stb	r4,-12(fp)
8113a534:	e0fffe0d 	sth	r3,-8(fp)
8113a538:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8113a53c:	e0bff717 	ldw	r2,-36(fp)
8113a540:	10c01217 	ldw	r3,72(r2)
8113a544:	e0800317 	ldw	r2,12(fp)
8113a548:	18801936 	bltu	r3,r2,8113a5b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
8113a54c:	e13ff717 	ldw	r4,-36(fp)
8113a550:	20801317 	ldw	r2,76(r4)
8113a554:	20c01417 	ldw	r3,80(r4)
8113a558:	e13ffe0b 	ldhu	r4,-8(fp)
8113a55c:	213fffcc 	andi	r4,r4,65535
8113a560:	2015883a 	mov	r10,r4
8113a564:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
8113a568:	1ac01136 	bltu	r3,r11,8113a5b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113a56c:	58c0011e 	bne	r11,r3,8113a574 <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
8113a570:	12800f36 	bltu	r2,r10,8113a5b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113a574:	e13ff717 	ldw	r4,-36(fp)
8113a578:	20801317 	ldw	r2,76(r4)
8113a57c:	20c01417 	ldw	r3,80(r4)
8113a580:	e13fff0b 	ldhu	r4,-4(fp)
8113a584:	213fffcc 	andi	r4,r4,65535
8113a588:	2011883a 	mov	r8,r4
8113a58c:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
8113a590:	1a400736 	bltu	r3,r9,8113a5b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113a594:	48c0011e 	bne	r9,r3,8113a59c <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
8113a598:	12000536 	bltu	r2,r8,8113a5b0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8113a59c:	e0bff717 	ldw	r2,-36(fp)
8113a5a0:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113a5a4:	10803fcc 	andi	r2,r2,255
8113a5a8:	10800060 	cmpeqi	r2,r2,1
8113a5ac:	1000021e 	bne	r2,zero,8113a5b8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
8113a5b0:	00bffa84 	movi	r2,-22
8113a5b4:	00003106 	br	8113a67c <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
    }
    
    descriptor->read_address_high = read_address_high;
8113a5b8:	e0bff817 	ldw	r2,-32(fp)
8113a5bc:	e0fff917 	ldw	r3,-28(fp)
8113a5c0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8113a5c4:	e0bff817 	ldw	r2,-32(fp)
8113a5c8:	e0fffa17 	ldw	r3,-24(fp)
8113a5cc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
8113a5d0:	e0bff817 	ldw	r2,-32(fp)
8113a5d4:	e0c00117 	ldw	r3,4(fp)
8113a5d8:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
8113a5dc:	e0bff817 	ldw	r2,-32(fp)
8113a5e0:	e0c00217 	ldw	r3,8(fp)
8113a5e4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
8113a5e8:	e0bff817 	ldw	r2,-32(fp)
8113a5ec:	e0c00317 	ldw	r3,12(fp)
8113a5f0:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8113a5f4:	e0bff817 	ldw	r2,-32(fp)
8113a5f8:	e0fffb0b 	ldhu	r3,-20(fp)
8113a5fc:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
8113a600:	e0bff817 	ldw	r2,-32(fp)
8113a604:	e0fffc03 	ldbu	r3,-16(fp)
8113a608:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
8113a60c:	e0bff817 	ldw	r2,-32(fp)
8113a610:	e0fffd03 	ldbu	r3,-12(fp)
8113a614:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
8113a618:	e0bff817 	ldw	r2,-32(fp)
8113a61c:	e0fffe0b 	ldhu	r3,-8(fp)
8113a620:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
8113a624:	e0bff817 	ldw	r2,-32(fp)
8113a628:	e0ffff0b 	ldhu	r3,-4(fp)
8113a62c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
8113a630:	e0bff817 	ldw	r2,-32(fp)
8113a634:	1019883a 	mov	r12,r2
8113a638:	001b883a 	mov	r13,zero
8113a63c:	e33ff515 	stw	r12,-44(fp)
8113a640:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
8113a644:	e0fff517 	ldw	r3,-44(fp)
8113a648:	e0bff817 	ldw	r2,-32(fp)
8113a64c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
8113a650:	e0fff617 	ldw	r3,-40(fp)
8113a654:	e0bff817 	ldw	r2,-32(fp)
8113a658:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
8113a65c:	e0c00417 	ldw	r3,16(fp)
8113a660:	00900034 	movhi	r2,16384
8113a664:	10bfffc4 	addi	r2,r2,-1
8113a668:	1884703a 	and	r2,r3,r2
8113a66c:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
8113a670:	e0bff817 	ldw	r2,-32(fp)
8113a674:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
8113a678:	0005883a 	mov	r2,zero
}
8113a67c:	e037883a 	mov	sp,fp
8113a680:	df000017 	ldw	fp,0(sp)
8113a684:	dec00104 	addi	sp,sp,4
8113a688:	f800283a 	ret

8113a68c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
8113a68c:	defff804 	addi	sp,sp,-32
8113a690:	de00012e 	bgeu	sp,et,8113a698 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
8113a694:	003b68fa 	trap	3
8113a698:	dfc00715 	stw	ra,28(sp)
8113a69c:	df000615 	stw	fp,24(sp)
8113a6a0:	df000604 	addi	fp,sp,24
8113a6a4:	e13ffc15 	stw	r4,-16(fp)
8113a6a8:	e17ffd15 	stw	r5,-12(fp)
8113a6ac:	e1bffe15 	stw	r6,-8(fp)
8113a6b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113a6b4:	e0800317 	ldw	r2,12(fp)
8113a6b8:	d8800115 	stw	r2,4(sp)
8113a6bc:	e0800217 	ldw	r2,8(fp)
8113a6c0:	d8800015 	stw	r2,0(sp)
8113a6c4:	e1ffff17 	ldw	r7,-4(fp)
8113a6c8:	e1bffe17 	ldw	r6,-8(fp)
8113a6cc:	e17ffd17 	ldw	r5,-12(fp)
8113a6d0:	e13ffc17 	ldw	r4,-16(fp)
8113a6d4:	113a4440 	call	8113a444 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
8113a6d8:	e037883a 	mov	sp,fp
8113a6dc:	dfc00117 	ldw	ra,4(sp)
8113a6e0:	df000017 	ldw	fp,0(sp)
8113a6e4:	dec00204 	addi	sp,sp,8
8113a6e8:	f800283a 	ret

8113a6ec <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113a6ec:	defff804 	addi	sp,sp,-32
8113a6f0:	de00012e 	bgeu	sp,et,8113a6f8 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
8113a6f4:	003b68fa 	trap	3
8113a6f8:	dfc00715 	stw	ra,28(sp)
8113a6fc:	df000615 	stw	fp,24(sp)
8113a700:	df000604 	addi	fp,sp,24
8113a704:	e13ffc15 	stw	r4,-16(fp)
8113a708:	e17ffd15 	stw	r5,-12(fp)
8113a70c:	e1bffe15 	stw	r6,-8(fp)
8113a710:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113a714:	e0800217 	ldw	r2,8(fp)
8113a718:	d8800115 	stw	r2,4(sp)
8113a71c:	e0bfff17 	ldw	r2,-4(fp)
8113a720:	d8800015 	stw	r2,0(sp)
8113a724:	e1fffe17 	ldw	r7,-8(fp)
8113a728:	000d883a 	mov	r6,zero
8113a72c:	e17ffd17 	ldw	r5,-12(fp)
8113a730:	e13ffc17 	ldw	r4,-16(fp)
8113a734:	113a4440 	call	8113a444 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
8113a738:	e037883a 	mov	sp,fp
8113a73c:	dfc00117 	ldw	ra,4(sp)
8113a740:	df000017 	ldw	fp,0(sp)
8113a744:	dec00204 	addi	sp,sp,8
8113a748:	f800283a 	ret

8113a74c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113a74c:	defff804 	addi	sp,sp,-32
8113a750:	de00012e 	bgeu	sp,et,8113a758 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
8113a754:	003b68fa 	trap	3
8113a758:	dfc00715 	stw	ra,28(sp)
8113a75c:	df000615 	stw	fp,24(sp)
8113a760:	df000604 	addi	fp,sp,24
8113a764:	e13ffc15 	stw	r4,-16(fp)
8113a768:	e17ffd15 	stw	r5,-12(fp)
8113a76c:	e1bffe15 	stw	r6,-8(fp)
8113a770:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113a774:	e0800217 	ldw	r2,8(fp)
8113a778:	d8800115 	stw	r2,4(sp)
8113a77c:	e0bfff17 	ldw	r2,-4(fp)
8113a780:	d8800015 	stw	r2,0(sp)
8113a784:	000f883a 	mov	r7,zero
8113a788:	e1bffe17 	ldw	r6,-8(fp)
8113a78c:	e17ffd17 	ldw	r5,-12(fp)
8113a790:	e13ffc17 	ldw	r4,-16(fp)
8113a794:	113a4440 	call	8113a444 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
8113a798:	e037883a 	mov	sp,fp
8113a79c:	dfc00117 	ldw	ra,4(sp)
8113a7a0:	df000017 	ldw	fp,0(sp)
8113a7a4:	dec00204 	addi	sp,sp,8
8113a7a8:	f800283a 	ret

8113a7ac <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8113a7ac:	deffee04 	addi	sp,sp,-72
8113a7b0:	de00012e 	bgeu	sp,et,8113a7b8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
8113a7b4:	003b68fa 	trap	3
8113a7b8:	dfc01115 	stw	ra,68(sp)
8113a7bc:	df001015 	stw	fp,64(sp)
8113a7c0:	df001004 	addi	fp,sp,64
8113a7c4:	e13ff915 	stw	r4,-28(fp)
8113a7c8:	e17ffa15 	stw	r5,-24(fp)
8113a7cc:	e1bffb15 	stw	r6,-20(fp)
8113a7d0:	e1fffc15 	stw	r7,-16(fp)
8113a7d4:	e1000417 	ldw	r4,16(fp)
8113a7d8:	e0c00517 	ldw	r3,20(fp)
8113a7dc:	e0800617 	ldw	r2,24(fp)
8113a7e0:	e13ffd0d 	sth	r4,-12(fp)
8113a7e4:	e0fffe05 	stb	r3,-8(fp)
8113a7e8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8113a7ec:	e0bffd0b 	ldhu	r2,-12(fp)
8113a7f0:	e0fffe03 	ldbu	r3,-8(fp)
8113a7f4:	e13fff0b 	ldhu	r4,-4(fp)
8113a7f8:	d9000815 	stw	r4,32(sp)
8113a7fc:	d8000715 	stw	zero,28(sp)
8113a800:	d8c00615 	stw	r3,24(sp)
8113a804:	d8000515 	stw	zero,20(sp)
8113a808:	d8800415 	stw	r2,16(sp)
8113a80c:	e0800317 	ldw	r2,12(fp)
8113a810:	d8800315 	stw	r2,12(sp)
8113a814:	e0800217 	ldw	r2,8(fp)
8113a818:	d8800215 	stw	r2,8(sp)
8113a81c:	e0bffc17 	ldw	r2,-16(fp)
8113a820:	d8800115 	stw	r2,4(sp)
8113a824:	e0bffb17 	ldw	r2,-20(fp)
8113a828:	d8800015 	stw	r2,0(sp)
8113a82c:	000f883a 	mov	r7,zero
8113a830:	000d883a 	mov	r6,zero
8113a834:	e17ffa17 	ldw	r5,-24(fp)
8113a838:	e13ff917 	ldw	r4,-28(fp)
8113a83c:	113a4f00 	call	8113a4f0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
8113a840:	e037883a 	mov	sp,fp
8113a844:	dfc00117 	ldw	ra,4(sp)
8113a848:	df000017 	ldw	fp,0(sp)
8113a84c:	dec00204 	addi	sp,sp,8
8113a850:	f800283a 	ret

8113a854 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113a854:	deffee04 	addi	sp,sp,-72
8113a858:	de00012e 	bgeu	sp,et,8113a860 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
8113a85c:	003b68fa 	trap	3
8113a860:	dfc01115 	stw	ra,68(sp)
8113a864:	df001015 	stw	fp,64(sp)
8113a868:	df001004 	addi	fp,sp,64
8113a86c:	e13ff915 	stw	r4,-28(fp)
8113a870:	e17ffa15 	stw	r5,-24(fp)
8113a874:	e1bffb15 	stw	r6,-20(fp)
8113a878:	e1fffc15 	stw	r7,-16(fp)
8113a87c:	e1000417 	ldw	r4,16(fp)
8113a880:	e0c00517 	ldw	r3,20(fp)
8113a884:	e0800617 	ldw	r2,24(fp)
8113a888:	e13ffd0d 	sth	r4,-12(fp)
8113a88c:	e0fffe05 	stb	r3,-8(fp)
8113a890:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113a894:	e0bffd0b 	ldhu	r2,-12(fp)
8113a898:	e0fffe03 	ldbu	r3,-8(fp)
8113a89c:	e13fff0b 	ldhu	r4,-4(fp)
8113a8a0:	d8000815 	stw	zero,32(sp)
8113a8a4:	d9000715 	stw	r4,28(sp)
8113a8a8:	d8000615 	stw	zero,24(sp)
8113a8ac:	d8c00515 	stw	r3,20(sp)
8113a8b0:	d8800415 	stw	r2,16(sp)
8113a8b4:	e0800317 	ldw	r2,12(fp)
8113a8b8:	d8800315 	stw	r2,12(sp)
8113a8bc:	e0800217 	ldw	r2,8(fp)
8113a8c0:	d8800215 	stw	r2,8(sp)
8113a8c4:	d8000115 	stw	zero,4(sp)
8113a8c8:	d8000015 	stw	zero,0(sp)
8113a8cc:	e1fffc17 	ldw	r7,-16(fp)
8113a8d0:	e1bffb17 	ldw	r6,-20(fp)
8113a8d4:	e17ffa17 	ldw	r5,-24(fp)
8113a8d8:	e13ff917 	ldw	r4,-28(fp)
8113a8dc:	113a4f00 	call	8113a4f0 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
8113a8e0:	e037883a 	mov	sp,fp
8113a8e4:	dfc00117 	ldw	ra,4(sp)
8113a8e8:	df000017 	ldw	fp,0(sp)
8113a8ec:	dec00204 	addi	sp,sp,8
8113a8f0:	f800283a 	ret

8113a8f4 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
8113a8f4:	deffec04 	addi	sp,sp,-80
8113a8f8:	de00012e 	bgeu	sp,et,8113a900 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
8113a8fc:	003b68fa 	trap	3
8113a900:	dfc01315 	stw	ra,76(sp)
8113a904:	df001215 	stw	fp,72(sp)
8113a908:	df001204 	addi	fp,sp,72
8113a90c:	e13ff715 	stw	r4,-36(fp)
8113a910:	e17ff815 	stw	r5,-32(fp)
8113a914:	e1bff915 	stw	r6,-28(fp)
8113a918:	e1fffa15 	stw	r7,-24(fp)
8113a91c:	e1800617 	ldw	r6,24(fp)
8113a920:	e1400717 	ldw	r5,28(fp)
8113a924:	e1000817 	ldw	r4,32(fp)
8113a928:	e0c00917 	ldw	r3,36(fp)
8113a92c:	e0800a17 	ldw	r2,40(fp)
8113a930:	e1bffb0d 	sth	r6,-20(fp)
8113a934:	e17ffc05 	stb	r5,-16(fp)
8113a938:	e13ffd05 	stb	r4,-12(fp)
8113a93c:	e0fffe0d 	sth	r3,-8(fp)
8113a940:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113a944:	e0bffb0b 	ldhu	r2,-20(fp)
8113a948:	e0fffc03 	ldbu	r3,-16(fp)
8113a94c:	e13ffd03 	ldbu	r4,-12(fp)
8113a950:	e17ffe0b 	ldhu	r5,-8(fp)
8113a954:	e1bfff0b 	ldhu	r6,-4(fp)
8113a958:	d9800815 	stw	r6,32(sp)
8113a95c:	d9400715 	stw	r5,28(sp)
8113a960:	d9000615 	stw	r4,24(sp)
8113a964:	d8c00515 	stw	r3,20(sp)
8113a968:	d8800415 	stw	r2,16(sp)
8113a96c:	e0800517 	ldw	r2,20(fp)
8113a970:	d8800315 	stw	r2,12(sp)
8113a974:	e0800417 	ldw	r2,16(fp)
8113a978:	d8800215 	stw	r2,8(sp)
8113a97c:	e0800317 	ldw	r2,12(fp)
8113a980:	d8800115 	stw	r2,4(sp)
8113a984:	e0800217 	ldw	r2,8(fp)
8113a988:	d8800015 	stw	r2,0(sp)
8113a98c:	e1fffa17 	ldw	r7,-24(fp)
8113a990:	e1bff917 	ldw	r6,-28(fp)
8113a994:	e17ff817 	ldw	r5,-32(fp)
8113a998:	e13ff717 	ldw	r4,-36(fp)
8113a99c:	113a4f00 	call	8113a4f0 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
8113a9a0:	e037883a 	mov	sp,fp
8113a9a4:	dfc00117 	ldw	ra,4(sp)
8113a9a8:	df000017 	ldw	fp,0(sp)
8113a9ac:	dec00204 	addi	sp,sp,8
8113a9b0:	f800283a 	ret

8113a9b4 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8113a9b4:	defffc04 	addi	sp,sp,-16
8113a9b8:	de00012e 	bgeu	sp,et,8113a9c0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
8113a9bc:	003b68fa 	trap	3
8113a9c0:	df000315 	stw	fp,12(sp)
8113a9c4:	df000304 	addi	fp,sp,12
8113a9c8:	e13ffe15 	stw	r4,-8(fp)
8113a9cc:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
8113a9d0:	e0bfff17 	ldw	r2,-4(fp)
8113a9d4:	1000021e 	bne	r2,zero,8113a9e0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113a9d8:	00bffa84 	movi	r2,-22
8113a9dc:	00002f06 	br	8113aa9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
8113a9e0:	e0bfff17 	ldw	r2,-4(fp)
8113a9e4:	10c00317 	ldw	r3,12(r2)
8113a9e8:	e0bfff17 	ldw	r2,-4(fp)
8113a9ec:	18800226 	beq	r3,r2,8113a9f8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113a9f0:	00bffa84 	movi	r2,-22
8113a9f4:	00002906 	br	8113aa9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == NULL)
8113a9f8:	e0bffe17 	ldw	r2,-8(fp)
8113a9fc:	10800017 	ldw	r2,0(r2)
8113aa00:	1000051e 	bne	r2,zero,8113aa18 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
	{
		*list = descriptor;  /* make this root-node if list is empty */
8113aa04:	e0bffe17 	ldw	r2,-8(fp)
8113aa08:	e0ffff17 	ldw	r3,-4(fp)
8113aa0c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
8113aa10:	0005883a 	mov	r2,zero
8113aa14:	00002106 	br	8113aa9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == descriptor)
8113aa18:	e0bffe17 	ldw	r2,-8(fp)
8113aa1c:	10c00017 	ldw	r3,0(r2)
8113aa20:	e0bfff17 	ldw	r2,-4(fp)
8113aa24:	1880021e 	bne	r3,r2,8113aa30 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8113aa28:	00bffa84 	movi	r2,-22
8113aa2c:	00001b06 	br	8113aa9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113aa30:	e0bffe17 	ldw	r2,-8(fp)
8113aa34:	10800017 	ldw	r2,0(r2)
8113aa38:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113aa3c:	00000906 	br	8113aa64 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
8113aa40:	e0bffd17 	ldw	r2,-12(fp)
8113aa44:	10c00317 	ldw	r3,12(r2)
8113aa48:	e0bfff17 	ldw	r2,-4(fp)
8113aa4c:	1880021e 	bne	r3,r2,8113aa58 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8113aa50:	00bffa84 	movi	r2,-22
8113aa54:	00001106 	br	8113aa9c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8113aa58:	e0bffd17 	ldw	r2,-12(fp)
8113aa5c:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
8113aa60:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113aa64:	e0bffd17 	ldw	r2,-12(fp)
8113aa68:	10800317 	ldw	r2,12(r2)
8113aa6c:	e0fffe17 	ldw	r3,-8(fp)
8113aa70:	18c00017 	ldw	r3,0(r3)
8113aa74:	10fff21e 	bne	r2,r3,8113aa40 <__reset+0xfb11aa40>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
8113aa78:	e0ffff17 	ldw	r3,-4(fp)
8113aa7c:	e0bffd17 	ldw	r2,-12(fp)
8113aa80:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
8113aa84:	e0bffe17 	ldw	r2,-8(fp)
8113aa88:	10800017 	ldw	r2,0(r2)
8113aa8c:	1007883a 	mov	r3,r2
8113aa90:	e0bfff17 	ldw	r2,-4(fp)
8113aa94:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
8113aa98:	0005883a 	mov	r2,zero
}
8113aa9c:	e037883a 	mov	sp,fp
8113aaa0:	df000017 	ldw	fp,0(sp)
8113aaa4:	dec00104 	addi	sp,sp,4
8113aaa8:	f800283a 	ret

8113aaac <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8113aaac:	defff804 	addi	sp,sp,-32
8113aab0:	de00012e 	bgeu	sp,et,8113aab8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
8113aab4:	003b68fa 	trap	3
8113aab8:	df000715 	stw	fp,28(sp)
8113aabc:	df000704 	addi	fp,sp,28
8113aac0:	e13ffe15 	stw	r4,-8(fp)
8113aac4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
8113aac8:	e13fff17 	ldw	r4,-4(fp)
8113aacc:	2000021e 	bne	r4,zero,8113aad8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
8113aad0:	00bffa84 	movi	r2,-22
8113aad4:	00005906 	br	8113ac3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
8113aad8:	e13fff17 	ldw	r4,-4(fp)
8113aadc:	2015883a 	mov	r10,r4
8113aae0:	0017883a 	mov	r11,zero
8113aae4:	e2bffc15 	stw	r10,-16(fp)
8113aae8:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113aaec:	e13fff17 	ldw	r4,-4(fp)
8113aaf0:	21400317 	ldw	r5,12(r4)
8113aaf4:	e13ffc17 	ldw	r4,-16(fp)
8113aaf8:	29000626 	beq	r5,r4,8113ab14 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8113aafc:	e13fff17 	ldw	r4,-4(fp)
8113ab00:	21400b17 	ldw	r5,44(r4)
8113ab04:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113ab08:	29000226 	beq	r5,r4,8113ab14 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113ab0c:	00bffa84 	movi	r2,-22
8113ab10:	00004a06 	br	8113ac3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	if (*list == NULL)
8113ab14:	e13ffe17 	ldw	r4,-8(fp)
8113ab18:	21000017 	ldw	r4,0(r4)
8113ab1c:	2000051e 	bne	r4,zero,8113ab34 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
8113ab20:	e0bffe17 	ldw	r2,-8(fp)
8113ab24:	e0ffff17 	ldw	r3,-4(fp)
8113ab28:	10c00015 	stw	r3,0(r2)
		return 0;
8113ab2c:	0005883a 	mov	r2,zero
8113ab30:	00004206 	br	8113ac3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	if (*list == descriptor)
8113ab34:	e13ffe17 	ldw	r4,-8(fp)
8113ab38:	21400017 	ldw	r5,0(r4)
8113ab3c:	e13fff17 	ldw	r4,-4(fp)
8113ab40:	2900021e 	bne	r5,r4,8113ab4c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8113ab44:	00bffa84 	movi	r2,-22
8113ab48:	00003c06 	br	8113ac3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113ab4c:	e13ffe17 	ldw	r4,-8(fp)
8113ab50:	21000017 	ldw	r4,0(r4)
8113ab54:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
8113ab58:	e13ffe17 	ldw	r4,-8(fp)
8113ab5c:	21000017 	ldw	r4,0(r4)
8113ab60:	2011883a 	mov	r8,r4
8113ab64:	0013883a 	mov	r9,zero
8113ab68:	e23ffa15 	stw	r8,-24(fp)
8113ab6c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113ab70:	00001806 	br	8113abd4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8113ab74:	e13fff17 	ldw	r4,-4(fp)
8113ab78:	200d883a 	mov	r6,r4
8113ab7c:	000f883a 	mov	r7,zero
8113ab80:	e1bffc15 	stw	r6,-16(fp)
8113ab84:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
8113ab88:	e13ff917 	ldw	r4,-28(fp)
8113ab8c:	21400317 	ldw	r5,12(r4)
8113ab90:	e13ffc17 	ldw	r4,-16(fp)
8113ab94:	2900061e 	bne	r5,r4,8113abb0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
8113ab98:	e13ff917 	ldw	r4,-28(fp)
8113ab9c:	21400b17 	ldw	r5,44(r4)
8113aba0:	e13ffd17 	ldw	r4,-12(fp)
8113aba4:	2900021e 	bne	r5,r4,8113abb0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
8113aba8:	00bffa84 	movi	r2,-22
8113abac:	00002306 	br	8113ac3c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113abb0:	e13ff917 	ldw	r4,-28(fp)
8113abb4:	21000317 	ldw	r4,12(r4)
8113abb8:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8113abbc:	e13ff917 	ldw	r4,-28(fp)
8113abc0:	21000b17 	ldw	r4,44(r4)
8113abc4:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8113abc8:	e13ffc17 	ldw	r4,-16(fp)
8113abcc:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113abd0:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113abd4:	e13ff917 	ldw	r4,-28(fp)
8113abd8:	21400317 	ldw	r5,12(r4)
8113abdc:	e13ffa17 	ldw	r4,-24(fp)
8113abe0:	29000426 	beq	r5,r4,8113abf4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8113abe4:	e13ff917 	ldw	r4,-28(fp)
8113abe8:	21400b17 	ldw	r5,44(r4)
8113abec:	e13ffb17 	ldw	r4,-20(fp)
8113abf0:	293fe01e 	bne	r5,r4,8113ab74 <__reset+0xfb11ab74>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
8113abf4:	e13fff17 	ldw	r4,-4(fp)
8113abf8:	2005883a 	mov	r2,r4
8113abfc:	0007883a 	mov	r3,zero
8113ac00:	e0bffc15 	stw	r2,-16(fp)
8113ac04:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
8113ac08:	e0fffc17 	ldw	r3,-16(fp)
8113ac0c:	e0bff917 	ldw	r2,-28(fp)
8113ac10:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
8113ac14:	e0fffd17 	ldw	r3,-12(fp)
8113ac18:	e0bff917 	ldw	r2,-28(fp)
8113ac1c:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
8113ac20:	e0fffa17 	ldw	r3,-24(fp)
8113ac24:	e0bfff17 	ldw	r2,-4(fp)
8113ac28:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8113ac2c:	e0fffb17 	ldw	r3,-20(fp)
8113ac30:	e0bfff17 	ldw	r2,-4(fp)
8113ac34:	10c00b15 	stw	r3,44(r2)
	return 0;
8113ac38:	0005883a 	mov	r2,zero
}
8113ac3c:	e037883a 	mov	sp,fp
8113ac40:	df000017 	ldw	fp,0(sp)
8113ac44:	dec00104 	addi	sp,sp,4
8113ac48:	f800283a 	ret

8113ac4c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8113ac4c:	defffc04 	addi	sp,sp,-16
8113ac50:	de00012e 	bgeu	sp,et,8113ac58 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
8113ac54:	003b68fa 	trap	3
8113ac58:	df000315 	stw	fp,12(sp)
8113ac5c:	df000304 	addi	fp,sp,12
8113ac60:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8113ac64:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
8113ac68:	e0bfff17 	ldw	r2,-4(fp)
8113ac6c:	1000021e 	bne	r2,zero,8113ac78 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
8113ac70:	00bffa84 	movi	r2,-22
8113ac74:	00001906 	br	8113acdc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8113ac78:	e0bfff17 	ldw	r2,-4(fp)
8113ac7c:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8113ac80:	00000a06 	br	8113acac <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
8113ac84:	e0bffd17 	ldw	r2,-12(fp)
8113ac88:	10800717 	ldw	r2,28(r2)
8113ac8c:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113ac90:	e0bffe17 	ldw	r2,-8(fp)
8113ac94:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113ac98:	e0bffd17 	ldw	r2,-12(fp)
8113ac9c:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
8113aca0:	e0bffd17 	ldw	r2,-12(fp)
8113aca4:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
8113aca8:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8113acac:	e0bffd17 	ldw	r2,-12(fp)
8113acb0:	10c00317 	ldw	r3,12(r2)
8113acb4:	e0bfff17 	ldw	r2,-4(fp)
8113acb8:	18bff21e 	bne	r3,r2,8113ac84 <__reset+0xfb11ac84>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
8113acbc:	e0bffd17 	ldw	r2,-12(fp)
8113acc0:	10800717 	ldw	r2,28(r2)
8113acc4:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113acc8:	e0bffe17 	ldw	r2,-8(fp)
8113accc:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8113acd0:	e0bffd17 	ldw	r2,-12(fp)
8113acd4:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
8113acd8:	0005883a 	mov	r2,zero
}
8113acdc:	e037883a 	mov	sp,fp
8113ace0:	df000017 	ldw	fp,0(sp)
8113ace4:	dec00104 	addi	sp,sp,4
8113ace8:	f800283a 	ret

8113acec <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
8113acec:	defff804 	addi	sp,sp,-32
8113acf0:	de00012e 	bgeu	sp,et,8113acf8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
8113acf4:	003b68fa 	trap	3
8113acf8:	df000715 	stw	fp,28(sp)
8113acfc:	df000704 	addi	fp,sp,28
8113ad00:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
8113ad04:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
8113ad08:	e13fff17 	ldw	r4,-4(fp)
8113ad0c:	2000021e 	bne	r4,zero,8113ad18 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
8113ad10:	00bffa84 	movi	r2,-22
8113ad14:	00002806 	br	8113adb8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
8113ad18:	e13fff17 	ldw	r4,-4(fp)
8113ad1c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
8113ad20:	e13fff17 	ldw	r4,-4(fp)
8113ad24:	2005883a 	mov	r2,r4
8113ad28:	0007883a 	mov	r3,zero
8113ad2c:	e0bffb15 	stw	r2,-20(fp)
8113ad30:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113ad34:	00001006 	br	8113ad78 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
8113ad38:	e0bff917 	ldw	r2,-28(fp)
8113ad3c:	10800f17 	ldw	r2,60(r2)
8113ad40:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113ad44:	e0bffa17 	ldw	r2,-24(fp)
8113ad48:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113ad4c:	e0bff917 	ldw	r2,-28(fp)
8113ad50:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113ad54:	e0bff917 	ldw	r2,-28(fp)
8113ad58:	10800317 	ldw	r2,12(r2)
8113ad5c:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
8113ad60:	e0bff917 	ldw	r2,-28(fp)
8113ad64:	10800b17 	ldw	r2,44(r2)
8113ad68:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8113ad6c:	e0bffd17 	ldw	r2,-12(fp)
8113ad70:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113ad74:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113ad78:	e0bff917 	ldw	r2,-28(fp)
8113ad7c:	10c00317 	ldw	r3,12(r2)
8113ad80:	e0bffb17 	ldw	r2,-20(fp)
8113ad84:	18800426 	beq	r3,r2,8113ad98 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
8113ad88:	e0bff917 	ldw	r2,-28(fp)
8113ad8c:	10c00b17 	ldw	r3,44(r2)
8113ad90:	e0bffc17 	ldw	r2,-16(fp)
8113ad94:	18bfe81e 	bne	r3,r2,8113ad38 <__reset+0xfb11ad38>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
8113ad98:	e0bff917 	ldw	r2,-28(fp)
8113ad9c:	10800f17 	ldw	r2,60(r2)
8113ada0:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113ada4:	e0bffa17 	ldw	r2,-24(fp)
8113ada8:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
8113adac:	e0bff917 	ldw	r2,-28(fp)
8113adb0:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
8113adb4:	0005883a 	mov	r2,zero
}
8113adb8:	e037883a 	mov	sp,fp
8113adbc:	df000017 	ldw	fp,0(sp)
8113adc0:	dec00104 	addi	sp,sp,4
8113adc4:	f800283a 	ret

8113adc8 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8113adc8:	deffeb04 	addi	sp,sp,-84
8113adcc:	de00012e 	bgeu	sp,et,8113add4 <alt_msgdma_start_prefetcher_with_list_addr+0xc>
8113add0:	003b68fa 	trap	3
8113add4:	dfc01415 	stw	ra,80(sp)
8113add8:	df001315 	stw	fp,76(sp)
8113addc:	df001304 	addi	fp,sp,76
8113ade0:	e13ffb15 	stw	r4,-20(fp)
8113ade4:	e17ffc15 	stw	r5,-16(fp)
8113ade8:	e1bffd15 	stw	r6,-12(fp)
8113adec:	3807883a 	mov	r3,r7
8113adf0:	e0800217 	ldw	r2,8(fp)
8113adf4:	e0fffe05 	stb	r3,-8(fp)
8113adf8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
8113adfc:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
8113ae00:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
8113ae04:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
8113ae08:	e0bffc17 	ldw	r2,-16(fp)
8113ae0c:	e0bff815 	stw	r2,-32(fp)
8113ae10:	e0bffd17 	ldw	r2,-12(fp)
8113ae14:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
8113ae18:	e0bffb17 	ldw	r2,-20(fp)
8113ae1c:	10801817 	ldw	r2,96(r2)
8113ae20:	e0bff615 	stw	r2,-40(fp)
8113ae24:	e03ff70d 	sth	zero,-36(fp)
8113ae28:	e0bff70b 	ldhu	r2,-36(fp)
8113ae2c:	e0fffa04 	addi	r3,fp,-24
8113ae30:	180d883a 	mov	r6,r3
8113ae34:	100b883a 	mov	r5,r2
8113ae38:	e13ff617 	ldw	r4,-40(fp)
8113ae3c:	112ff740 	call	8112ff74 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
8113ae40:	e0bffb17 	ldw	r2,-20(fp)
8113ae44:	10800617 	ldw	r2,24(r2)
8113ae48:	10800037 	ldwio	r2,0(r2)
8113ae4c:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
8113ae50:	e0bfed17 	ldw	r2,-76(fp)
8113ae54:	1080004c 	andi	r2,r2,1
8113ae58:	10000626 	beq	r2,zero,8113ae74 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
8113ae5c:	e0bffb17 	ldw	r2,-20(fp)
8113ae60:	10801817 	ldw	r2,96(r2)
8113ae64:	1009883a 	mov	r4,r2
8113ae68:	11302fc0 	call	811302fc <OSSemPost>
		return -EBUSY;
8113ae6c:	00bffc04 	movi	r2,-16
8113ae70:	00009606 	br	8113b0cc <alt_msgdma_start_prefetcher_with_list_addr+0x304>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113ae74:	00800804 	movi	r2,32
8113ae78:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113ae7c:	0005303a 	rdctl	r2,status
8113ae80:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113ae84:	e0fff217 	ldw	r3,-56(fp)
8113ae88:	00bfff84 	movi	r2,-2
8113ae8c:	1884703a 	and	r2,r3,r2
8113ae90:	1001703a 	wrctl	status,r2
  
  return context;
8113ae94:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
8113ae98:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113ae9c:	e0bffb17 	ldw	r2,-20(fp)
8113aea0:	10800317 	ldw	r2,12(r2)
8113aea4:	10800104 	addi	r2,r2,4
8113aea8:	e0ffee17 	ldw	r3,-72(fp)
8113aeac:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
8113aeb0:	e0bffb17 	ldw	r2,-20(fp)
8113aeb4:	10800317 	ldw	r2,12(r2)
8113aeb8:	e0fffb17 	ldw	r3,-20(fp)
8113aebc:	18c00317 	ldw	r3,12(r3)
8113aec0:	18c00037 	ldwio	r3,0(r3)
8113aec4:	10c00035 	stwio	r3,0(r2)
8113aec8:	e0bfef17 	ldw	r2,-68(fp)
8113aecc:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113aed0:	e0bff017 	ldw	r2,-64(fp)
8113aed4:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
8113aed8:	e0bffb17 	ldw	r2,-20(fp)
8113aedc:	10800b17 	ldw	r2,44(r2)
8113aee0:	10002326 	beq	r2,zero,8113af70 <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8113aee4:	e0bffb17 	ldw	r2,-20(fp)
8113aee8:	10c00d17 	ldw	r3,52(r2)
8113aeec:	e0bfee17 	ldw	r2,-72(fp)
8113aef0:	1884b03a 	or	r2,r3,r2
8113aef4:	10800514 	ori	r2,r2,20
8113aef8:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8113aefc:	e0ffee17 	ldw	r3,-72(fp)
8113af00:	00bff7c4 	movi	r2,-33
8113af04:	1884703a 	and	r2,r3,r2
8113af08:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8113af0c:	e0bfed17 	ldw	r2,-76(fp)
8113af10:	10800214 	ori	r2,r2,8
8113af14:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113af18:	0005303a 	rdctl	r2,status
8113af1c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113af20:	e0fff417 	ldw	r3,-48(fp)
8113af24:	00bfff84 	movi	r2,-2
8113af28:	1884703a 	and	r2,r3,r2
8113af2c:	1001703a 	wrctl	status,r2
  
  return context;
8113af30:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
8113af34:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113af38:	e0bffb17 	ldw	r2,-20(fp)
8113af3c:	10800317 	ldw	r2,12(r2)
8113af40:	10800104 	addi	r2,r2,4
8113af44:	e0ffee17 	ldw	r3,-72(fp)
8113af48:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113af4c:	e0bffb17 	ldw	r2,-20(fp)
8113af50:	10800617 	ldw	r2,24(r2)
8113af54:	e0ffed17 	ldw	r3,-76(fp)
8113af58:	10c00035 	stwio	r3,0(r2)
8113af5c:	e0bfef17 	ldw	r2,-68(fp)
8113af60:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113af64:	e0bff117 	ldw	r2,-60(fp)
8113af68:	1001703a 	wrctl	status,r2
8113af6c:	00002306 	br	8113affc <alt_msgdma_start_prefetcher_with_list_addr+0x234>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
8113af70:	e0bffb17 	ldw	r2,-20(fp)
8113af74:	10c00d17 	ldw	r3,52(r2)
8113af78:	e0bfee17 	ldw	r2,-72(fp)
8113af7c:	1884b03a 	or	r2,r3,r2
8113af80:	10800114 	ori	r2,r2,4
8113af84:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
8113af88:	e0ffee17 	ldw	r3,-72(fp)
8113af8c:	00bff3c4 	movi	r2,-49
8113af90:	1884703a 	and	r2,r3,r2
8113af94:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
8113af98:	e0ffed17 	ldw	r3,-76(fp)
8113af9c:	00bffdc4 	movi	r2,-9
8113afa0:	1884703a 	and	r2,r3,r2
8113afa4:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113afa8:	0005303a 	rdctl	r2,status
8113afac:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113afb0:	e0fff517 	ldw	r3,-44(fp)
8113afb4:	00bfff84 	movi	r2,-2
8113afb8:	1884703a 	and	r2,r3,r2
8113afbc:	1001703a 	wrctl	status,r2
  
  return context;
8113afc0:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
8113afc4:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113afc8:	e0bffb17 	ldw	r2,-20(fp)
8113afcc:	10800317 	ldw	r2,12(r2)
8113afd0:	10800104 	addi	r2,r2,4
8113afd4:	e0ffee17 	ldw	r3,-72(fp)
8113afd8:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113afdc:	e0bffb17 	ldw	r2,-20(fp)
8113afe0:	10800617 	ldw	r2,24(r2)
8113afe4:	e0ffed17 	ldw	r3,-76(fp)
8113afe8:	10c00035 	stwio	r3,0(r2)
8113afec:	e0bfef17 	ldw	r2,-68(fp)
8113aff0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113aff4:	e0bff317 	ldw	r2,-52(fp)
8113aff8:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8113affc:	e0bffb17 	ldw	r2,-20(fp)
8113b000:	10800617 	ldw	r2,24(r2)
8113b004:	10800104 	addi	r2,r2,4
8113b008:	e0fff817 	ldw	r3,-32(fp)
8113b00c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
8113b010:	e0bffb17 	ldw	r2,-20(fp)
8113b014:	10800617 	ldw	r2,24(r2)
8113b018:	10800204 	addi	r2,r2,8
8113b01c:	e0fff917 	ldw	r3,-28(fp)
8113b020:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
8113b024:	e0bffe03 	ldbu	r2,-8(fp)
8113b028:	10000426 	beq	r2,zero,8113b03c <alt_msgdma_start_prefetcher_with_list_addr+0x274>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8113b02c:	e0bfed17 	ldw	r2,-76(fp)
8113b030:	10800414 	ori	r2,r2,16
8113b034:	e0bfed15 	stw	r2,-76(fp)
8113b038:	00000406 	br	8113b04c <alt_msgdma_start_prefetcher_with_list_addr+0x284>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8113b03c:	e0ffed17 	ldw	r3,-76(fp)
8113b040:	00bffbc4 	movi	r2,-17
8113b044:	1884703a 	and	r2,r3,r2
8113b048:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8113b04c:	e0bfff03 	ldbu	r2,-4(fp)
8113b050:	10000e26 	beq	r2,zero,8113b08c <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
8113b054:	e0bfed17 	ldw	r2,-76(fp)
8113b058:	10800094 	ori	r2,r2,2
8113b05c:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8113b060:	e0bffb17 	ldw	r2,-20(fp)
8113b064:	10800617 	ldw	r2,24(r2)
8113b068:	10800304 	addi	r2,r2,12
8113b06c:	10800037 	ldwio	r2,0(r2)
8113b070:	10000a1e 	bne	r2,zero,8113b09c <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
8113b074:	e0bffb17 	ldw	r2,-20(fp)
8113b078:	10800617 	ldw	r2,24(r2)
8113b07c:	10800304 	addi	r2,r2,12
8113b080:	00c03fc4 	movi	r3,255
8113b084:	10c00035 	stwio	r3,0(r2)
8113b088:	00000406 	br	8113b09c <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8113b08c:	e0ffed17 	ldw	r3,-76(fp)
8113b090:	00bfff44 	movi	r2,-3
8113b094:	1884703a 	and	r2,r3,r2
8113b098:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8113b09c:	e0bfed17 	ldw	r2,-76(fp)
8113b0a0:	10800054 	ori	r2,r2,1
8113b0a4:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113b0a8:	e0bffb17 	ldw	r2,-20(fp)
8113b0ac:	10800617 	ldw	r2,24(r2)
8113b0b0:	e0ffed17 	ldw	r3,-76(fp)
8113b0b4:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
8113b0b8:	e0bffb17 	ldw	r2,-20(fp)
8113b0bc:	10801817 	ldw	r2,96(r2)
8113b0c0:	1009883a 	mov	r4,r2
8113b0c4:	11302fc0 	call	811302fc <OSSemPost>
	 
	 return 0;
8113b0c8:	0005883a 	mov	r2,zero
}
8113b0cc:	e037883a 	mov	sp,fp
8113b0d0:	dfc00117 	ldw	ra,4(sp)
8113b0d4:	df000017 	ldw	fp,0(sp)
8113b0d8:	dec00204 	addi	sp,sp,8
8113b0dc:	f800283a 	ret

8113b0e0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
8113b0e0:	defff704 	addi	sp,sp,-36
8113b0e4:	de00012e 	bgeu	sp,et,8113b0ec <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
8113b0e8:	003b68fa 	trap	3
8113b0ec:	dfc00815 	stw	ra,32(sp)
8113b0f0:	df000715 	stw	fp,28(sp)
8113b0f4:	dc400615 	stw	r17,24(sp)
8113b0f8:	dc000515 	stw	r16,20(sp)
8113b0fc:	df000704 	addi	fp,sp,28
8113b100:	e13ffa15 	stw	r4,-24(fp)
8113b104:	e17ffb15 	stw	r5,-20(fp)
8113b108:	3007883a 	mov	r3,r6
8113b10c:	3805883a 	mov	r2,r7
8113b110:	e0fffc05 	stb	r3,-16(fp)
8113b114:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
8113b118:	e13ffb17 	ldw	r4,-20(fp)
8113b11c:	113ac4c0 	call	8113ac4c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
8113b120:	10000226 	beq	r2,zero,8113b12c <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
		return -EINVAL;
8113b124:	00bffa84 	movi	r2,-22
8113b128:	00000b06 	br	8113b158 <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
8113b12c:	e0bffb17 	ldw	r2,-20(fp)
8113b130:	1021883a 	mov	r16,r2
8113b134:	0023883a 	mov	r17,zero
8113b138:	e0fffc03 	ldbu	r3,-16(fp)
8113b13c:	e0bffd03 	ldbu	r2,-12(fp)
8113b140:	d8800015 	stw	r2,0(sp)
8113b144:	180f883a 	mov	r7,r3
8113b148:	800b883a 	mov	r5,r16
8113b14c:	880d883a 	mov	r6,r17
8113b150:	e13ffa17 	ldw	r4,-24(fp)
8113b154:	113adc80 	call	8113adc8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8113b158:	e6fffe04 	addi	sp,fp,-8
8113b15c:	dfc00317 	ldw	ra,12(sp)
8113b160:	df000217 	ldw	fp,8(sp)
8113b164:	dc400117 	ldw	r17,4(sp)
8113b168:	dc000017 	ldw	r16,0(sp)
8113b16c:	dec00404 	addi	sp,sp,16
8113b170:	f800283a 	ret

8113b174 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
8113b174:	defff704 	addi	sp,sp,-36
8113b178:	de00012e 	bgeu	sp,et,8113b180 <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
8113b17c:	003b68fa 	trap	3
8113b180:	dfc00815 	stw	ra,32(sp)
8113b184:	df000715 	stw	fp,28(sp)
8113b188:	dc400615 	stw	r17,24(sp)
8113b18c:	dc000515 	stw	r16,20(sp)
8113b190:	df000704 	addi	fp,sp,28
8113b194:	e13ffa15 	stw	r4,-24(fp)
8113b198:	e17ffb15 	stw	r5,-20(fp)
8113b19c:	3007883a 	mov	r3,r6
8113b1a0:	3805883a 	mov	r2,r7
8113b1a4:	e0fffc05 	stb	r3,-16(fp)
8113b1a8:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
8113b1ac:	e13ffb17 	ldw	r4,-20(fp)
8113b1b0:	113acec0 	call	8113acec <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8113b1b4:	10000226 	beq	r2,zero,8113b1c0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		return -EINVAL;
8113b1b8:	00bffa84 	movi	r2,-22
8113b1bc:	00000b06 	br	8113b1ec <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
8113b1c0:	e0bffb17 	ldw	r2,-20(fp)
8113b1c4:	1021883a 	mov	r16,r2
8113b1c8:	0023883a 	mov	r17,zero
8113b1cc:	e0fffc03 	ldbu	r3,-16(fp)
8113b1d0:	e0bffd03 	ldbu	r2,-12(fp)
8113b1d4:	d8800015 	stw	r2,0(sp)
8113b1d8:	180f883a 	mov	r7,r3
8113b1dc:	800b883a 	mov	r5,r16
8113b1e0:	880d883a 	mov	r6,r17
8113b1e4:	e13ffa17 	ldw	r4,-24(fp)
8113b1e8:	113adc80 	call	8113adc8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
8113b1ec:	e6fffe04 	addi	sp,fp,-8
8113b1f0:	dfc00317 	ldw	ra,12(sp)
8113b1f4:	df000217 	ldw	fp,8(sp)
8113b1f8:	dc400117 	ldw	r17,4(sp)
8113b1fc:	dc000017 	ldw	r16,0(sp)
8113b200:	dec00404 	addi	sp,sp,16
8113b204:	f800283a 	ret

8113b208 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
8113b208:	defffc04 	addi	sp,sp,-16
8113b20c:	de00012e 	bgeu	sp,et,8113b214 <alt_msgdma_open+0xc>
8113b210:	003b68fa 	trap	3
8113b214:	dfc00315 	stw	ra,12(sp)
8113b218:	df000215 	stw	fp,8(sp)
8113b21c:	df000204 	addi	fp,sp,8
8113b220:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
8113b224:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
8113b228:	d1603504 	addi	r5,gp,-32556
8113b22c:	e13fff17 	ldw	r4,-4(fp)
8113b230:	113b87c0 	call	8113b87c <alt_find_dev>
8113b234:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
8113b238:	e0bffe17 	ldw	r2,-8(fp)
8113b23c:	1000041e 	bne	r2,zero,8113b250 <alt_msgdma_open+0x48>
    {
        ALT_ERRNO = ENODEV;
8113b240:	113946c0 	call	8113946c <alt_get_errno>
8113b244:	1007883a 	mov	r3,r2
8113b248:	008004c4 	movi	r2,19
8113b24c:	18800015 	stw	r2,0(r3)
    }

    return dev;
8113b250:	e0bffe17 	ldw	r2,-8(fp)
}
8113b254:	e037883a 	mov	sp,fp
8113b258:	dfc00117 	ldw	ra,4(sp)
8113b25c:	df000017 	ldw	fp,0(sp)
8113b260:	dec00204 	addi	sp,sp,8
8113b264:	f800283a 	ret

8113b268 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
8113b268:	defff604 	addi	sp,sp,-40
8113b26c:	de00012e 	bgeu	sp,et,8113b274 <alt_msgdma_init+0xc>
8113b270:	003b68fa 	trap	3
8113b274:	dfc00915 	stw	ra,36(sp)
8113b278:	df000815 	stw	fp,32(sp)
8113b27c:	df000804 	addi	fp,sp,32
8113b280:	e13ffd15 	stw	r4,-12(fp)
8113b284:	e17ffe15 	stw	r5,-8(fp)
8113b288:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
8113b28c:	e0bffd17 	ldw	r2,-12(fp)
8113b290:	10801783 	ldbu	r2,94(r2)
8113b294:	10803fcc 	andi	r2,r2,255
8113b298:	10000b26 	beq	r2,zero,8113b2c8 <alt_msgdma_init+0x60>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
8113b29c:	e0bffd17 	ldw	r2,-12(fp)
8113b2a0:	10800617 	ldw	r2,24(r2)
8113b2a4:	00c00104 	movi	r3,4
8113b2a8:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
8113b2ac:	0001883a 	nop
8113b2b0:	e0bffd17 	ldw	r2,-12(fp)
8113b2b4:	10800617 	ldw	r2,24(r2)
8113b2b8:	10800037 	ldwio	r2,0(r2)
8113b2bc:	1080010c 	andi	r2,r2,4
8113b2c0:	1005d0ba 	srai	r2,r2,2
8113b2c4:	103ffa1e 	bne	r2,zero,8113b2b0 <__reset+0xfb11b2b0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
8113b2c8:	e0bffd17 	ldw	r2,-12(fp)
8113b2cc:	10800317 	ldw	r2,12(r2)
8113b2d0:	10800104 	addi	r2,r2,4
8113b2d4:	00c00084 	movi	r3,2
8113b2d8:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113b2dc:	0001883a 	nop
8113b2e0:	e0bffd17 	ldw	r2,-12(fp)
8113b2e4:	10800317 	ldw	r2,12(r2)
8113b2e8:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
8113b2ec:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
8113b2f0:	103ffb1e 	bne	r2,zero,8113b2e0 <__reset+0xfb11b2e0>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8113b2f4:	e0bffd17 	ldw	r2,-12(fp)
8113b2f8:	10800317 	ldw	r2,12(r2)
8113b2fc:	10800104 	addi	r2,r2,4
8113b300:	10800037 	ldwio	r2,0(r2)
8113b304:	1007883a 	mov	r3,r2
8113b308:	00bffbc4 	movi	r2,-17
8113b30c:	1884703a 	and	r2,r3,r2
8113b310:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113b314:	e0bff917 	ldw	r2,-28(fp)
8113b318:	10800814 	ori	r2,r2,32
8113b31c:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
8113b320:	e0bffd17 	ldw	r2,-12(fp)
8113b324:	10800317 	ldw	r2,12(r2)
8113b328:	10800104 	addi	r2,r2,4
8113b32c:	e0fff917 	ldw	r3,-28(fp)
8113b330:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
8113b334:	e0bffd17 	ldw	r2,-12(fp)
8113b338:	10800317 	ldw	r2,12(r2)
8113b33c:	e0fffd17 	ldw	r3,-12(fp)
8113b340:	18c00317 	ldw	r3,12(r3)
8113b344:	18c00037 	ldwio	r3,0(r3)
8113b348:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
8113b34c:	e0bffd17 	ldw	r2,-12(fp)
8113b350:	10801783 	ldbu	r2,94(r2)
8113b354:	10803fcc 	andi	r2,r2,255
8113b358:	10000826 	beq	r2,zero,8113b37c <alt_msgdma_init+0x114>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
8113b35c:	e0bffd17 	ldw	r2,-12(fp)
8113b360:	10800617 	ldw	r2,24(r2)
8113b364:	10800404 	addi	r2,r2,16
8113b368:	e0fffd17 	ldw	r3,-12(fp)
8113b36c:	18c00617 	ldw	r3,24(r3)
8113b370:	18c00404 	addi	r3,r3,16
8113b374:	18c00037 	ldwio	r3,0(r3)
8113b378:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
8113b37c:	d1603504 	addi	r5,gp,-32556
8113b380:	e13ffd17 	ldw	r4,-12(fp)
8113b384:	113b7000 	call	8113b700 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
8113b388:	e0bffd17 	ldw	r2,-12(fp)
8113b38c:	10801804 	addi	r2,r2,96
8113b390:	e0bffb15 	stw	r2,-20(fp)
8113b394:	00800044 	movi	r2,1
8113b398:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
8113b39c:	e0bffc0b 	ldhu	r2,-16(fp)
8113b3a0:	1009883a 	mov	r4,r2
8113b3a4:	112fc4c0 	call	8112fc4c <OSSemCreate>
8113b3a8:	1007883a 	mov	r3,r2
8113b3ac:	e0bffb17 	ldw	r2,-20(fp)
8113b3b0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113b3b4:	e0bffb17 	ldw	r2,-20(fp)
8113b3b8:	10800017 	ldw	r2,0(r2)
8113b3bc:	10000226 	beq	r2,zero,8113b3c8 <alt_msgdma_init+0x160>
8113b3c0:	0005883a 	mov	r2,zero
8113b3c4:	00000106 	br	8113b3cc <alt_msgdma_init+0x164>
8113b3c8:	00bfffc4 	movi	r2,-1
8113b3cc:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
8113b3d0:	e0bffa17 	ldw	r2,-24(fp)
8113b3d4:	1000081e 	bne	r2,zero,8113b3f8 <alt_msgdma_init+0x190>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
8113b3d8:	d8000015 	stw	zero,0(sp)
8113b3dc:	e1fffd17 	ldw	r7,-12(fp)
8113b3e0:	01a04534 	movhi	r6,33044
8113b3e4:	31a5a004 	addi	r6,r6,-27008
8113b3e8:	e17fff17 	ldw	r5,-4(fp)
8113b3ec:	e13ffe17 	ldw	r4,-8(fp)
8113b3f0:	113bb080 	call	8113bb08 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8113b3f4:	00000406 	br	8113b408 <alt_msgdma_init+0x1a0>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
8113b3f8:	01204534 	movhi	r4,33044
8113b3fc:	2101d304 	addi	r4,r4,1868
8113b400:	113bf200 	call	8113bf20 <alt_printf>
    }
    
    return;
8113b404:	0001883a 	nop

}
8113b408:	e037883a 	mov	sp,fp
8113b40c:	dfc00117 	ldw	ra,4(sp)
8113b410:	df000017 	ldw	fp,0(sp)
8113b414:	dec00204 	addi	sp,sp,8
8113b418:	f800283a 	ret

8113b41c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
8113b41c:	defffb04 	addi	sp,sp,-20
8113b420:	de00012e 	bgeu	sp,et,8113b428 <alt_msgdma_register_callback+0xc>
8113b424:	003b68fa 	trap	3
8113b428:	df000415 	stw	fp,16(sp)
8113b42c:	df000404 	addi	fp,sp,16
8113b430:	e13ffc15 	stw	r4,-16(fp)
8113b434:	e17ffd15 	stw	r5,-12(fp)
8113b438:	e1bffe15 	stw	r6,-8(fp)
8113b43c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
8113b440:	e0bffc17 	ldw	r2,-16(fp)
8113b444:	e0fffd17 	ldw	r3,-12(fp)
8113b448:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
8113b44c:	e0bffc17 	ldw	r2,-16(fp)
8113b450:	e0ffff17 	ldw	r3,-4(fp)
8113b454:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
8113b458:	e0bffc17 	ldw	r2,-16(fp)
8113b45c:	e0fffe17 	ldw	r3,-8(fp)
8113b460:	10c00d15 	stw	r3,52(r2)

    return ;
8113b464:	0001883a 	nop
}
8113b468:	e037883a 	mov	sp,fp
8113b46c:	df000017 	ldw	fp,0(sp)
8113b470:	dec00104 	addi	sp,sp,4
8113b474:	f800283a 	ret

8113b478 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113b478:	defffc04 	addi	sp,sp,-16
8113b47c:	de00012e 	bgeu	sp,et,8113b484 <alt_msgdma_standard_descriptor_async_transfer+0xc>
8113b480:	003b68fa 	trap	3
8113b484:	dfc00315 	stw	ra,12(sp)
8113b488:	df000215 	stw	fp,8(sp)
8113b48c:	df000204 	addi	fp,sp,8
8113b490:	e13ffe15 	stw	r4,-8(fp)
8113b494:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
8113b498:	000d883a 	mov	r6,zero
8113b49c:	e17fff17 	ldw	r5,-4(fp)
8113b4a0:	e13ffe17 	ldw	r4,-8(fp)
8113b4a4:	11399fc0 	call	811399fc <alt_msgdma_descriptor_async_transfer>

}
8113b4a8:	e037883a 	mov	sp,fp
8113b4ac:	dfc00117 	ldw	ra,4(sp)
8113b4b0:	df000017 	ldw	fp,0(sp)
8113b4b4:	dec00204 	addi	sp,sp,8
8113b4b8:	f800283a 	ret

8113b4bc <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113b4bc:	defffc04 	addi	sp,sp,-16
8113b4c0:	de00012e 	bgeu	sp,et,8113b4c8 <alt_msgdma_extended_descriptor_async_transfer+0xc>
8113b4c4:	003b68fa 	trap	3
8113b4c8:	dfc00315 	stw	ra,12(sp)
8113b4cc:	df000215 	stw	fp,8(sp)
8113b4d0:	df000204 	addi	fp,sp,8
8113b4d4:	e13ffe15 	stw	r4,-8(fp)
8113b4d8:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
8113b4dc:	e1bfff17 	ldw	r6,-4(fp)
8113b4e0:	000b883a 	mov	r5,zero
8113b4e4:	e13ffe17 	ldw	r4,-8(fp)
8113b4e8:	11399fc0 	call	811399fc <alt_msgdma_descriptor_async_transfer>
}
8113b4ec:	e037883a 	mov	sp,fp
8113b4f0:	dfc00117 	ldw	ra,4(sp)
8113b4f4:	df000017 	ldw	fp,0(sp)
8113b4f8:	dec00204 	addi	sp,sp,8
8113b4fc:	f800283a 	ret

8113b500 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
8113b500:	defffc04 	addi	sp,sp,-16
8113b504:	de00012e 	bgeu	sp,et,8113b50c <alt_msgdma_standard_descriptor_sync_transfer+0xc>
8113b508:	003b68fa 	trap	3
8113b50c:	dfc00315 	stw	ra,12(sp)
8113b510:	df000215 	stw	fp,8(sp)
8113b514:	df000204 	addi	fp,sp,8
8113b518:	e13ffe15 	stw	r4,-8(fp)
8113b51c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
8113b520:	000d883a 	mov	r6,zero
8113b524:	e17fff17 	ldw	r5,-4(fp)
8113b528:	e13ffe17 	ldw	r4,-8(fp)
8113b52c:	1139d3c0 	call	81139d3c <alt_msgdma_descriptor_sync_transfer>
}
8113b530:	e037883a 	mov	sp,fp
8113b534:	dfc00117 	ldw	ra,4(sp)
8113b538:	df000017 	ldw	fp,0(sp)
8113b53c:	dec00204 	addi	sp,sp,8
8113b540:	f800283a 	ret

8113b544 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
8113b544:	defffc04 	addi	sp,sp,-16
8113b548:	de00012e 	bgeu	sp,et,8113b550 <alt_msgdma_extended_descriptor_sync_transfer+0xc>
8113b54c:	003b68fa 	trap	3
8113b550:	dfc00315 	stw	ra,12(sp)
8113b554:	df000215 	stw	fp,8(sp)
8113b558:	df000204 	addi	fp,sp,8
8113b55c:	e13ffe15 	stw	r4,-8(fp)
8113b560:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
8113b564:	e1bfff17 	ldw	r6,-4(fp)
8113b568:	000b883a 	mov	r5,zero
8113b56c:	e13ffe17 	ldw	r4,-8(fp)
8113b570:	1139d3c0 	call	81139d3c <alt_msgdma_descriptor_sync_transfer>
}
8113b574:	e037883a 	mov	sp,fp
8113b578:	dfc00117 	ldw	ra,4(sp)
8113b57c:	df000017 	ldw	fp,0(sp)
8113b580:	dec00204 	addi	sp,sp,8
8113b584:	f800283a 	ret

8113b588 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
8113b588:	defff504 	addi	sp,sp,-44
8113b58c:	de00012e 	bgeu	sp,et,8113b594 <alt_alarm_start+0xc>
8113b590:	003b68fa 	trap	3
8113b594:	df000a15 	stw	fp,40(sp)
8113b598:	df000a04 	addi	fp,sp,40
8113b59c:	e13ffc15 	stw	r4,-16(fp)
8113b5a0:	e17ffd15 	stw	r5,-12(fp)
8113b5a4:	e1bffe15 	stw	r6,-8(fp)
8113b5a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
8113b5ac:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
8113b5b0:	d0a07117 	ldw	r2,-32316(gp)
  
  if (alt_ticks_per_second ())
8113b5b4:	10003c26 	beq	r2,zero,8113b6a8 <alt_alarm_start+0x120>
  {
    if (alarm)
8113b5b8:	e0bffc17 	ldw	r2,-16(fp)
8113b5bc:	10003826 	beq	r2,zero,8113b6a0 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
8113b5c0:	e0bffc17 	ldw	r2,-16(fp)
8113b5c4:	e0fffe17 	ldw	r3,-8(fp)
8113b5c8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
8113b5cc:	e0bffc17 	ldw	r2,-16(fp)
8113b5d0:	e0ffff17 	ldw	r3,-4(fp)
8113b5d4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113b5d8:	0005303a 	rdctl	r2,status
8113b5dc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113b5e0:	e0fff917 	ldw	r3,-28(fp)
8113b5e4:	00bfff84 	movi	r2,-2
8113b5e8:	1884703a 	and	r2,r3,r2
8113b5ec:	1001703a 	wrctl	status,r2
  
  return context;
8113b5f0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8113b5f4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
8113b5f8:	d0a07217 	ldw	r2,-32312(gp)
      
      current_nticks = alt_nticks();
8113b5fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
8113b600:	e0fffd17 	ldw	r3,-12(fp)
8113b604:	e0bff617 	ldw	r2,-40(fp)
8113b608:	1885883a 	add	r2,r3,r2
8113b60c:	10c00044 	addi	r3,r2,1
8113b610:	e0bffc17 	ldw	r2,-16(fp)
8113b614:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
8113b618:	e0bffc17 	ldw	r2,-16(fp)
8113b61c:	10c00217 	ldw	r3,8(r2)
8113b620:	e0bff617 	ldw	r2,-40(fp)
8113b624:	1880042e 	bgeu	r3,r2,8113b638 <alt_alarm_start+0xb0>
      {
        alarm->rollover = 1;
8113b628:	e0bffc17 	ldw	r2,-16(fp)
8113b62c:	00c00044 	movi	r3,1
8113b630:	10c00405 	stb	r3,16(r2)
8113b634:	00000206 	br	8113b640 <alt_alarm_start+0xb8>
      }
      else
      {
        alarm->rollover = 0;
8113b638:	e0bffc17 	ldw	r2,-16(fp)
8113b63c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
8113b640:	e0bffc17 	ldw	r2,-16(fp)
8113b644:	d0e01404 	addi	r3,gp,-32688
8113b648:	e0fffa15 	stw	r3,-24(fp)
8113b64c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113b650:	e0bffb17 	ldw	r2,-20(fp)
8113b654:	e0fffa17 	ldw	r3,-24(fp)
8113b658:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113b65c:	e0bffa17 	ldw	r2,-24(fp)
8113b660:	10c00017 	ldw	r3,0(r2)
8113b664:	e0bffb17 	ldw	r2,-20(fp)
8113b668:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113b66c:	e0bffa17 	ldw	r2,-24(fp)
8113b670:	10800017 	ldw	r2,0(r2)
8113b674:	e0fffb17 	ldw	r3,-20(fp)
8113b678:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113b67c:	e0bffa17 	ldw	r2,-24(fp)
8113b680:	e0fffb17 	ldw	r3,-20(fp)
8113b684:	10c00015 	stw	r3,0(r2)
8113b688:	e0bff817 	ldw	r2,-32(fp)
8113b68c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113b690:	e0bff717 	ldw	r2,-36(fp)
8113b694:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
8113b698:	0005883a 	mov	r2,zero
8113b69c:	00000306 	br	8113b6ac <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
8113b6a0:	00bffa84 	movi	r2,-22
8113b6a4:	00000106 	br	8113b6ac <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
8113b6a8:	00bfde84 	movi	r2,-134
  }
}
8113b6ac:	e037883a 	mov	sp,fp
8113b6b0:	df000017 	ldw	fp,0(sp)
8113b6b4:	dec00104 	addi	sp,sp,4
8113b6b8:	f800283a 	ret

8113b6bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113b6bc:	defffe04 	addi	sp,sp,-8
8113b6c0:	de00012e 	bgeu	sp,et,8113b6c8 <alt_get_errno+0xc>
8113b6c4:	003b68fa 	trap	3
8113b6c8:	dfc00115 	stw	ra,4(sp)
8113b6cc:	df000015 	stw	fp,0(sp)
8113b6d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113b6d4:	d0a01017 	ldw	r2,-32704(gp)
8113b6d8:	10000326 	beq	r2,zero,8113b6e8 <alt_get_errno+0x2c>
8113b6dc:	d0a01017 	ldw	r2,-32704(gp)
8113b6e0:	103ee83a 	callr	r2
8113b6e4:	00000106 	br	8113b6ec <alt_get_errno+0x30>
8113b6e8:	d0a06104 	addi	r2,gp,-32380
}
8113b6ec:	e037883a 	mov	sp,fp
8113b6f0:	dfc00117 	ldw	ra,4(sp)
8113b6f4:	df000017 	ldw	fp,0(sp)
8113b6f8:	dec00204 	addi	sp,sp,8
8113b6fc:	f800283a 	ret

8113b700 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
8113b700:	defffa04 	addi	sp,sp,-24
8113b704:	de00012e 	bgeu	sp,et,8113b70c <alt_dev_llist_insert+0xc>
8113b708:	003b68fa 	trap	3
8113b70c:	dfc00515 	stw	ra,20(sp)
8113b710:	df000415 	stw	fp,16(sp)
8113b714:	df000404 	addi	fp,sp,16
8113b718:	e13ffe15 	stw	r4,-8(fp)
8113b71c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
8113b720:	e0bffe17 	ldw	r2,-8(fp)
8113b724:	10000326 	beq	r2,zero,8113b734 <alt_dev_llist_insert+0x34>
8113b728:	e0bffe17 	ldw	r2,-8(fp)
8113b72c:	10800217 	ldw	r2,8(r2)
8113b730:	1000061e 	bne	r2,zero,8113b74c <alt_dev_llist_insert+0x4c>
  {
    ALT_ERRNO = EINVAL;
8113b734:	113b6bc0 	call	8113b6bc <alt_get_errno>
8113b738:	1007883a 	mov	r3,r2
8113b73c:	00800584 	movi	r2,22
8113b740:	18800015 	stw	r2,0(r3)
    return -EINVAL;
8113b744:	00bffa84 	movi	r2,-22
8113b748:	00001306 	br	8113b798 <alt_dev_llist_insert+0x98>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
8113b74c:	e0bffe17 	ldw	r2,-8(fp)
8113b750:	e0ffff17 	ldw	r3,-4(fp)
8113b754:	e0fffc15 	stw	r3,-16(fp)
8113b758:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
8113b75c:	e0bffd17 	ldw	r2,-12(fp)
8113b760:	e0fffc17 	ldw	r3,-16(fp)
8113b764:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
8113b768:	e0bffc17 	ldw	r2,-16(fp)
8113b76c:	10c00017 	ldw	r3,0(r2)
8113b770:	e0bffd17 	ldw	r2,-12(fp)
8113b774:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
8113b778:	e0bffc17 	ldw	r2,-16(fp)
8113b77c:	10800017 	ldw	r2,0(r2)
8113b780:	e0fffd17 	ldw	r3,-12(fp)
8113b784:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
8113b788:	e0bffc17 	ldw	r2,-16(fp)
8113b78c:	e0fffd17 	ldw	r3,-12(fp)
8113b790:	10c00015 	stw	r3,0(r2)

  return 0;  
8113b794:	0005883a 	mov	r2,zero
}
8113b798:	e037883a 	mov	sp,fp
8113b79c:	dfc00117 	ldw	ra,4(sp)
8113b7a0:	df000017 	ldw	fp,0(sp)
8113b7a4:	dec00204 	addi	sp,sp,8
8113b7a8:	f800283a 	ret

8113b7ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8113b7ac:	defffd04 	addi	sp,sp,-12
8113b7b0:	de00012e 	bgeu	sp,et,8113b7b8 <_do_ctors+0xc>
8113b7b4:	003b68fa 	trap	3
8113b7b8:	dfc00215 	stw	ra,8(sp)
8113b7bc:	df000115 	stw	fp,4(sp)
8113b7c0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113b7c4:	00a04534 	movhi	r2,33044
8113b7c8:	10b2db04 	addi	r2,r2,-13460
8113b7cc:	e0bfff15 	stw	r2,-4(fp)
8113b7d0:	00000606 	br	8113b7ec <_do_ctors+0x40>
        (*ctor) (); 
8113b7d4:	e0bfff17 	ldw	r2,-4(fp)
8113b7d8:	10800017 	ldw	r2,0(r2)
8113b7dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113b7e0:	e0bfff17 	ldw	r2,-4(fp)
8113b7e4:	10bfff04 	addi	r2,r2,-4
8113b7e8:	e0bfff15 	stw	r2,-4(fp)
8113b7ec:	e0ffff17 	ldw	r3,-4(fp)
8113b7f0:	00a04534 	movhi	r2,33044
8113b7f4:	10b2dc04 	addi	r2,r2,-13456
8113b7f8:	18bff62e 	bgeu	r3,r2,8113b7d4 <__reset+0xfb11b7d4>
        (*ctor) (); 
}
8113b7fc:	0001883a 	nop
8113b800:	e037883a 	mov	sp,fp
8113b804:	dfc00117 	ldw	ra,4(sp)
8113b808:	df000017 	ldw	fp,0(sp)
8113b80c:	dec00204 	addi	sp,sp,8
8113b810:	f800283a 	ret

8113b814 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8113b814:	defffd04 	addi	sp,sp,-12
8113b818:	de00012e 	bgeu	sp,et,8113b820 <_do_dtors+0xc>
8113b81c:	003b68fa 	trap	3
8113b820:	dfc00215 	stw	ra,8(sp)
8113b824:	df000115 	stw	fp,4(sp)
8113b828:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113b82c:	00a04534 	movhi	r2,33044
8113b830:	10b2db04 	addi	r2,r2,-13460
8113b834:	e0bfff15 	stw	r2,-4(fp)
8113b838:	00000606 	br	8113b854 <_do_dtors+0x40>
        (*dtor) (); 
8113b83c:	e0bfff17 	ldw	r2,-4(fp)
8113b840:	10800017 	ldw	r2,0(r2)
8113b844:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
8113b848:	e0bfff17 	ldw	r2,-4(fp)
8113b84c:	10bfff04 	addi	r2,r2,-4
8113b850:	e0bfff15 	stw	r2,-4(fp)
8113b854:	e0ffff17 	ldw	r3,-4(fp)
8113b858:	00a04534 	movhi	r2,33044
8113b85c:	10b2dc04 	addi	r2,r2,-13456
8113b860:	18bff62e 	bgeu	r3,r2,8113b83c <__reset+0xfb11b83c>
        (*dtor) (); 
}
8113b864:	0001883a 	nop
8113b868:	e037883a 	mov	sp,fp
8113b86c:	dfc00117 	ldw	ra,4(sp)
8113b870:	df000017 	ldw	fp,0(sp)
8113b874:	dec00204 	addi	sp,sp,8
8113b878:	f800283a 	ret

8113b87c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8113b87c:	defffa04 	addi	sp,sp,-24
8113b880:	de00012e 	bgeu	sp,et,8113b888 <alt_find_dev+0xc>
8113b884:	003b68fa 	trap	3
8113b888:	dfc00515 	stw	ra,20(sp)
8113b88c:	df000415 	stw	fp,16(sp)
8113b890:	df000404 	addi	fp,sp,16
8113b894:	e13ffe15 	stw	r4,-8(fp)
8113b898:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8113b89c:	e0bfff17 	ldw	r2,-4(fp)
8113b8a0:	10800017 	ldw	r2,0(r2)
8113b8a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
8113b8a8:	e13ffe17 	ldw	r4,-8(fp)
8113b8ac:	11139780 	call	81113978 <strlen>
8113b8b0:	10800044 	addi	r2,r2,1
8113b8b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113b8b8:	00000d06 	br	8113b8f0 <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8113b8bc:	e0bffc17 	ldw	r2,-16(fp)
8113b8c0:	10800217 	ldw	r2,8(r2)
8113b8c4:	e0fffd17 	ldw	r3,-12(fp)
8113b8c8:	180d883a 	mov	r6,r3
8113b8cc:	e17ffe17 	ldw	r5,-8(fp)
8113b8d0:	1009883a 	mov	r4,r2
8113b8d4:	113c6a40 	call	8113c6a4 <memcmp>
8113b8d8:	1000021e 	bne	r2,zero,8113b8e4 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
8113b8dc:	e0bffc17 	ldw	r2,-16(fp)
8113b8e0:	00000706 	br	8113b900 <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
8113b8e4:	e0bffc17 	ldw	r2,-16(fp)
8113b8e8:	10800017 	ldw	r2,0(r2)
8113b8ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
8113b8f0:	e0fffc17 	ldw	r3,-16(fp)
8113b8f4:	e0bfff17 	ldw	r2,-4(fp)
8113b8f8:	18bff01e 	bne	r3,r2,8113b8bc <__reset+0xfb11b8bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8113b8fc:	0005883a 	mov	r2,zero
}
8113b900:	e037883a 	mov	sp,fp
8113b904:	dfc00117 	ldw	ra,4(sp)
8113b908:	df000017 	ldw	fp,0(sp)
8113b90c:	dec00204 	addi	sp,sp,8
8113b910:	f800283a 	ret

8113b914 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8113b914:	defffb04 	addi	sp,sp,-20
8113b918:	de00012e 	bgeu	sp,et,8113b920 <alt_find_file+0xc>
8113b91c:	003b68fa 	trap	3
8113b920:	dfc00415 	stw	ra,16(sp)
8113b924:	df000315 	stw	fp,12(sp)
8113b928:	df000304 	addi	fp,sp,12
8113b92c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
8113b930:	d0a00b17 	ldw	r2,-32724(gp)
8113b934:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113b938:	00003106 	br	8113ba00 <alt_find_file+0xec>
  {
    len = strlen(next->name);
8113b93c:	e0bffd17 	ldw	r2,-12(fp)
8113b940:	10800217 	ldw	r2,8(r2)
8113b944:	1009883a 	mov	r4,r2
8113b948:	11139780 	call	81113978 <strlen>
8113b94c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
8113b950:	e0bffd17 	ldw	r2,-12(fp)
8113b954:	10c00217 	ldw	r3,8(r2)
8113b958:	e0bffe17 	ldw	r2,-8(fp)
8113b95c:	10bfffc4 	addi	r2,r2,-1
8113b960:	1885883a 	add	r2,r3,r2
8113b964:	10800003 	ldbu	r2,0(r2)
8113b968:	10803fcc 	andi	r2,r2,255
8113b96c:	1080201c 	xori	r2,r2,128
8113b970:	10bfe004 	addi	r2,r2,-128
8113b974:	10800bd8 	cmpnei	r2,r2,47
8113b978:	1000031e 	bne	r2,zero,8113b988 <alt_find_file+0x74>
    {
      len -= 1;
8113b97c:	e0bffe17 	ldw	r2,-8(fp)
8113b980:	10bfffc4 	addi	r2,r2,-1
8113b984:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113b988:	e0bffe17 	ldw	r2,-8(fp)
8113b98c:	e0ffff17 	ldw	r3,-4(fp)
8113b990:	1885883a 	add	r2,r3,r2
8113b994:	10800003 	ldbu	r2,0(r2)
8113b998:	10803fcc 	andi	r2,r2,255
8113b99c:	1080201c 	xori	r2,r2,128
8113b9a0:	10bfe004 	addi	r2,r2,-128
8113b9a4:	10800be0 	cmpeqi	r2,r2,47
8113b9a8:	1000081e 	bne	r2,zero,8113b9cc <alt_find_file+0xb8>
8113b9ac:	e0bffe17 	ldw	r2,-8(fp)
8113b9b0:	e0ffff17 	ldw	r3,-4(fp)
8113b9b4:	1885883a 	add	r2,r3,r2
8113b9b8:	10800003 	ldbu	r2,0(r2)
8113b9bc:	10803fcc 	andi	r2,r2,255
8113b9c0:	1080201c 	xori	r2,r2,128
8113b9c4:	10bfe004 	addi	r2,r2,-128
8113b9c8:	10000a1e 	bne	r2,zero,8113b9f4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
8113b9cc:	e0bffd17 	ldw	r2,-12(fp)
8113b9d0:	10800217 	ldw	r2,8(r2)
8113b9d4:	e0fffe17 	ldw	r3,-8(fp)
8113b9d8:	180d883a 	mov	r6,r3
8113b9dc:	e17fff17 	ldw	r5,-4(fp)
8113b9e0:	1009883a 	mov	r4,r2
8113b9e4:	113c6a40 	call	8113c6a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
8113b9e8:	1000021e 	bne	r2,zero,8113b9f4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8113b9ec:	e0bffd17 	ldw	r2,-12(fp)
8113b9f0:	00000706 	br	8113ba10 <alt_find_file+0xfc>
    }
    next = (alt_dev*) next->llist.next;
8113b9f4:	e0bffd17 	ldw	r2,-12(fp)
8113b9f8:	10800017 	ldw	r2,0(r2)
8113b9fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
8113ba00:	e0fffd17 	ldw	r3,-12(fp)
8113ba04:	d0a00b04 	addi	r2,gp,-32724
8113ba08:	18bfcc1e 	bne	r3,r2,8113b93c <__reset+0xfb11b93c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8113ba0c:	0005883a 	mov	r2,zero
}
8113ba10:	e037883a 	mov	sp,fp
8113ba14:	dfc00117 	ldw	ra,4(sp)
8113ba18:	df000017 	ldw	fp,0(sp)
8113ba1c:	dec00204 	addi	sp,sp,8
8113ba20:	f800283a 	ret

8113ba24 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
8113ba24:	defff904 	addi	sp,sp,-28
8113ba28:	de00012e 	bgeu	sp,et,8113ba30 <alt_get_fd+0xc>
8113ba2c:	003b68fa 	trap	3
8113ba30:	dfc00615 	stw	ra,24(sp)
8113ba34:	df000515 	stw	fp,20(sp)
8113ba38:	df000504 	addi	fp,sp,20
8113ba3c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
8113ba40:	00bffa04 	movi	r2,-24
8113ba44:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
8113ba48:	d0a06817 	ldw	r2,-32352(gp)
8113ba4c:	e0bffd15 	stw	r2,-12(fp)
8113ba50:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8113ba54:	e0bffe0b 	ldhu	r2,-8(fp)
8113ba58:	e0fffe84 	addi	r3,fp,-6
8113ba5c:	180d883a 	mov	r6,r3
8113ba60:	100b883a 	mov	r5,r2
8113ba64:	e13ffd17 	ldw	r4,-12(fp)
8113ba68:	112ff740 	call	8112ff74 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113ba6c:	e03ffb15 	stw	zero,-20(fp)
8113ba70:	00001906 	br	8113bad8 <alt_get_fd+0xb4>
  {
    if (!alt_fd_list[i].dev)
8113ba74:	00a04534 	movhi	r2,33044
8113ba78:	10844204 	addi	r2,r2,4360
8113ba7c:	e0fffb17 	ldw	r3,-20(fp)
8113ba80:	18c00324 	muli	r3,r3,12
8113ba84:	10c5883a 	add	r2,r2,r3
8113ba88:	10800017 	ldw	r2,0(r2)
8113ba8c:	10000f1e 	bne	r2,zero,8113bacc <alt_get_fd+0xa8>
    {
      alt_fd_list[i].dev = dev;
8113ba90:	00a04534 	movhi	r2,33044
8113ba94:	10844204 	addi	r2,r2,4360
8113ba98:	e0fffb17 	ldw	r3,-20(fp)
8113ba9c:	18c00324 	muli	r3,r3,12
8113baa0:	10c5883a 	add	r2,r2,r3
8113baa4:	e0ffff17 	ldw	r3,-4(fp)
8113baa8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8113baac:	d0e00f17 	ldw	r3,-32708(gp)
8113bab0:	e0bffb17 	ldw	r2,-20(fp)
8113bab4:	1880020e 	bge	r3,r2,8113bac0 <alt_get_fd+0x9c>
      {
        alt_max_fd = i;
8113bab8:	e0bffb17 	ldw	r2,-20(fp)
8113babc:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
8113bac0:	e0bffb17 	ldw	r2,-20(fp)
8113bac4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
8113bac8:	00000606 	br	8113bae4 <alt_get_fd+0xc0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113bacc:	e0bffb17 	ldw	r2,-20(fp)
8113bad0:	10800044 	addi	r2,r2,1
8113bad4:	e0bffb15 	stw	r2,-20(fp)
8113bad8:	e0bffb17 	ldw	r2,-20(fp)
8113badc:	10800810 	cmplti	r2,r2,32
8113bae0:	103fe41e 	bne	r2,zero,8113ba74 <__reset+0xfb11ba74>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
8113bae4:	d0a06817 	ldw	r2,-32352(gp)
8113bae8:	1009883a 	mov	r4,r2
8113baec:	11302fc0 	call	811302fc <OSSemPost>

  return rc;
8113baf0:	e0bffc17 	ldw	r2,-16(fp)
}
8113baf4:	e037883a 	mov	sp,fp
8113baf8:	dfc00117 	ldw	ra,4(sp)
8113bafc:	df000017 	ldw	fp,0(sp)
8113bb00:	dec00204 	addi	sp,sp,8
8113bb04:	f800283a 	ret

8113bb08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113bb08:	defff904 	addi	sp,sp,-28
8113bb0c:	de00012e 	bgeu	sp,et,8113bb14 <alt_ic_isr_register+0xc>
8113bb10:	003b68fa 	trap	3
8113bb14:	dfc00615 	stw	ra,24(sp)
8113bb18:	df000515 	stw	fp,20(sp)
8113bb1c:	df000504 	addi	fp,sp,20
8113bb20:	e13ffc15 	stw	r4,-16(fp)
8113bb24:	e17ffd15 	stw	r5,-12(fp)
8113bb28:	e1bffe15 	stw	r6,-8(fp)
8113bb2c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
8113bb30:	e0800217 	ldw	r2,8(fp)
8113bb34:	d8800015 	stw	r2,0(sp)
8113bb38:	e1ffff17 	ldw	r7,-4(fp)
8113bb3c:	e1bffe17 	ldw	r6,-8(fp)
8113bb40:	e17ffd17 	ldw	r5,-12(fp)
8113bb44:	e13ffc17 	ldw	r4,-16(fp)
8113bb48:	113bcd80 	call	8113bcd8 <alt_iic_isr_register>
}  
8113bb4c:	e037883a 	mov	sp,fp
8113bb50:	dfc00117 	ldw	ra,4(sp)
8113bb54:	df000017 	ldw	fp,0(sp)
8113bb58:	dec00204 	addi	sp,sp,8
8113bb5c:	f800283a 	ret

8113bb60 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
8113bb60:	defff904 	addi	sp,sp,-28
8113bb64:	de00012e 	bgeu	sp,et,8113bb6c <alt_ic_irq_enable+0xc>
8113bb68:	003b68fa 	trap	3
8113bb6c:	df000615 	stw	fp,24(sp)
8113bb70:	df000604 	addi	fp,sp,24
8113bb74:	e13ffe15 	stw	r4,-8(fp)
8113bb78:	e17fff15 	stw	r5,-4(fp)
8113bb7c:	e0bfff17 	ldw	r2,-4(fp)
8113bb80:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113bb84:	0005303a 	rdctl	r2,status
8113bb88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113bb8c:	e0fffb17 	ldw	r3,-20(fp)
8113bb90:	00bfff84 	movi	r2,-2
8113bb94:	1884703a 	and	r2,r3,r2
8113bb98:	1001703a 	wrctl	status,r2
  
  return context;
8113bb9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113bba0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8113bba4:	00c00044 	movi	r3,1
8113bba8:	e0bffa17 	ldw	r2,-24(fp)
8113bbac:	1884983a 	sll	r2,r3,r2
8113bbb0:	1007883a 	mov	r3,r2
8113bbb4:	d0a06917 	ldw	r2,-32348(gp)
8113bbb8:	1884b03a 	or	r2,r3,r2
8113bbbc:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113bbc0:	d0a06917 	ldw	r2,-32348(gp)
8113bbc4:	100170fa 	wrctl	ienable,r2
8113bbc8:	e0bffc17 	ldw	r2,-16(fp)
8113bbcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113bbd0:	e0bffd17 	ldw	r2,-12(fp)
8113bbd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113bbd8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8113bbdc:	0001883a 	nop
}
8113bbe0:	e037883a 	mov	sp,fp
8113bbe4:	df000017 	ldw	fp,0(sp)
8113bbe8:	dec00104 	addi	sp,sp,4
8113bbec:	f800283a 	ret

8113bbf0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
8113bbf0:	defff904 	addi	sp,sp,-28
8113bbf4:	de00012e 	bgeu	sp,et,8113bbfc <alt_ic_irq_disable+0xc>
8113bbf8:	003b68fa 	trap	3
8113bbfc:	df000615 	stw	fp,24(sp)
8113bc00:	df000604 	addi	fp,sp,24
8113bc04:	e13ffe15 	stw	r4,-8(fp)
8113bc08:	e17fff15 	stw	r5,-4(fp)
8113bc0c:	e0bfff17 	ldw	r2,-4(fp)
8113bc10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113bc14:	0005303a 	rdctl	r2,status
8113bc18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113bc1c:	e0fffb17 	ldw	r3,-20(fp)
8113bc20:	00bfff84 	movi	r2,-2
8113bc24:	1884703a 	and	r2,r3,r2
8113bc28:	1001703a 	wrctl	status,r2
  
  return context;
8113bc2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
8113bc30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
8113bc34:	00c00044 	movi	r3,1
8113bc38:	e0bffa17 	ldw	r2,-24(fp)
8113bc3c:	1884983a 	sll	r2,r3,r2
8113bc40:	0084303a 	nor	r2,zero,r2
8113bc44:	1007883a 	mov	r3,r2
8113bc48:	d0a06917 	ldw	r2,-32348(gp)
8113bc4c:	1884703a 	and	r2,r3,r2
8113bc50:	d0a06915 	stw	r2,-32348(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8113bc54:	d0a06917 	ldw	r2,-32348(gp)
8113bc58:	100170fa 	wrctl	ienable,r2
8113bc5c:	e0bffc17 	ldw	r2,-16(fp)
8113bc60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113bc64:	e0bffd17 	ldw	r2,-12(fp)
8113bc68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
8113bc6c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
8113bc70:	0001883a 	nop
}
8113bc74:	e037883a 	mov	sp,fp
8113bc78:	df000017 	ldw	fp,0(sp)
8113bc7c:	dec00104 	addi	sp,sp,4
8113bc80:	f800283a 	ret

8113bc84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
8113bc84:	defffc04 	addi	sp,sp,-16
8113bc88:	de00012e 	bgeu	sp,et,8113bc90 <alt_ic_irq_enabled+0xc>
8113bc8c:	003b68fa 	trap	3
8113bc90:	df000315 	stw	fp,12(sp)
8113bc94:	df000304 	addi	fp,sp,12
8113bc98:	e13ffe15 	stw	r4,-8(fp)
8113bc9c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
8113bca0:	000530fa 	rdctl	r2,ienable
8113bca4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
8113bca8:	00c00044 	movi	r3,1
8113bcac:	e0bfff17 	ldw	r2,-4(fp)
8113bcb0:	1884983a 	sll	r2,r3,r2
8113bcb4:	1007883a 	mov	r3,r2
8113bcb8:	e0bffd17 	ldw	r2,-12(fp)
8113bcbc:	1884703a 	and	r2,r3,r2
8113bcc0:	1004c03a 	cmpne	r2,r2,zero
8113bcc4:	10803fcc 	andi	r2,r2,255
}
8113bcc8:	e037883a 	mov	sp,fp
8113bccc:	df000017 	ldw	fp,0(sp)
8113bcd0:	dec00104 	addi	sp,sp,4
8113bcd4:	f800283a 	ret

8113bcd8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
8113bcd8:	defff504 	addi	sp,sp,-44
8113bcdc:	de00012e 	bgeu	sp,et,8113bce4 <alt_iic_isr_register+0xc>
8113bce0:	003b68fa 	trap	3
8113bce4:	dfc00a15 	stw	ra,40(sp)
8113bce8:	df000915 	stw	fp,36(sp)
8113bcec:	df000904 	addi	fp,sp,36
8113bcf0:	e13ffc15 	stw	r4,-16(fp)
8113bcf4:	e17ffd15 	stw	r5,-12(fp)
8113bcf8:	e1bffe15 	stw	r6,-8(fp)
8113bcfc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
8113bd00:	00bffa84 	movi	r2,-22
8113bd04:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
8113bd08:	e0bffd17 	ldw	r2,-12(fp)
8113bd0c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
8113bd10:	e0bff817 	ldw	r2,-32(fp)
8113bd14:	10800808 	cmpgei	r2,r2,32
8113bd18:	1000271e 	bne	r2,zero,8113bdb8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113bd1c:	0005303a 	rdctl	r2,status
8113bd20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113bd24:	e0fffb17 	ldw	r3,-20(fp)
8113bd28:	00bfff84 	movi	r2,-2
8113bd2c:	1884703a 	and	r2,r3,r2
8113bd30:	1001703a 	wrctl	status,r2
  
  return context;
8113bd34:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
8113bd38:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8113bd3c:	00a04574 	movhi	r2,33045
8113bd40:	1081fe04 	addi	r2,r2,2040
8113bd44:	e0fff817 	ldw	r3,-32(fp)
8113bd48:	180690fa 	slli	r3,r3,3
8113bd4c:	10c5883a 	add	r2,r2,r3
8113bd50:	e0fffe17 	ldw	r3,-8(fp)
8113bd54:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
8113bd58:	00a04574 	movhi	r2,33045
8113bd5c:	1081fe04 	addi	r2,r2,2040
8113bd60:	e0fff817 	ldw	r3,-32(fp)
8113bd64:	180690fa 	slli	r3,r3,3
8113bd68:	10c5883a 	add	r2,r2,r3
8113bd6c:	10800104 	addi	r2,r2,4
8113bd70:	e0ffff17 	ldw	r3,-4(fp)
8113bd74:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
8113bd78:	e0bffe17 	ldw	r2,-8(fp)
8113bd7c:	10000526 	beq	r2,zero,8113bd94 <alt_iic_isr_register+0xbc>
8113bd80:	e0bff817 	ldw	r2,-32(fp)
8113bd84:	100b883a 	mov	r5,r2
8113bd88:	e13ffc17 	ldw	r4,-16(fp)
8113bd8c:	113bb600 	call	8113bb60 <alt_ic_irq_enable>
8113bd90:	00000406 	br	8113bda4 <alt_iic_isr_register+0xcc>
8113bd94:	e0bff817 	ldw	r2,-32(fp)
8113bd98:	100b883a 	mov	r5,r2
8113bd9c:	e13ffc17 	ldw	r4,-16(fp)
8113bda0:	113bbf00 	call	8113bbf0 <alt_ic_irq_disable>
8113bda4:	e0bff715 	stw	r2,-36(fp)
8113bda8:	e0bffa17 	ldw	r2,-24(fp)
8113bdac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113bdb0:	e0bff917 	ldw	r2,-28(fp)
8113bdb4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
8113bdb8:	e0bff717 	ldw	r2,-36(fp)
}
8113bdbc:	e037883a 	mov	sp,fp
8113bdc0:	dfc00117 	ldw	ra,4(sp)
8113bdc4:	df000017 	ldw	fp,0(sp)
8113bdc8:	dec00204 	addi	sp,sp,8
8113bdcc:	f800283a 	ret

8113bdd0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
8113bdd0:	defff904 	addi	sp,sp,-28
8113bdd4:	de00012e 	bgeu	sp,et,8113bddc <alt_open_fd+0xc>
8113bdd8:	003b68fa 	trap	3
8113bddc:	dfc00615 	stw	ra,24(sp)
8113bde0:	df000515 	stw	fp,20(sp)
8113bde4:	df000504 	addi	fp,sp,20
8113bde8:	e13ffc15 	stw	r4,-16(fp)
8113bdec:	e17ffd15 	stw	r5,-12(fp)
8113bdf0:	e1bffe15 	stw	r6,-8(fp)
8113bdf4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
8113bdf8:	e1bfff17 	ldw	r6,-4(fp)
8113bdfc:	e17ffe17 	ldw	r5,-8(fp)
8113be00:	e13ffd17 	ldw	r4,-12(fp)
8113be04:	1128b2c0 	call	81128b2c <open>
8113be08:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8113be0c:	e0bffb17 	ldw	r2,-20(fp)
8113be10:	10001c16 	blt	r2,zero,8113be84 <alt_open_fd+0xb4>
  {
    fd->dev      = alt_fd_list[old].dev;
8113be14:	00a04534 	movhi	r2,33044
8113be18:	10844204 	addi	r2,r2,4360
8113be1c:	e0fffb17 	ldw	r3,-20(fp)
8113be20:	18c00324 	muli	r3,r3,12
8113be24:	10c5883a 	add	r2,r2,r3
8113be28:	10c00017 	ldw	r3,0(r2)
8113be2c:	e0bffc17 	ldw	r2,-16(fp)
8113be30:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8113be34:	00a04534 	movhi	r2,33044
8113be38:	10844204 	addi	r2,r2,4360
8113be3c:	e0fffb17 	ldw	r3,-20(fp)
8113be40:	18c00324 	muli	r3,r3,12
8113be44:	10c5883a 	add	r2,r2,r3
8113be48:	10800104 	addi	r2,r2,4
8113be4c:	10c00017 	ldw	r3,0(r2)
8113be50:	e0bffc17 	ldw	r2,-16(fp)
8113be54:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
8113be58:	00a04534 	movhi	r2,33044
8113be5c:	10844204 	addi	r2,r2,4360
8113be60:	e0fffb17 	ldw	r3,-20(fp)
8113be64:	18c00324 	muli	r3,r3,12
8113be68:	10c5883a 	add	r2,r2,r3
8113be6c:	10800204 	addi	r2,r2,8
8113be70:	10c00017 	ldw	r3,0(r2)
8113be74:	e0bffc17 	ldw	r2,-16(fp)
8113be78:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8113be7c:	e13ffb17 	ldw	r4,-20(fp)
8113be80:	1128dd00 	call	81128dd0 <alt_release_fd>
  }
} 
8113be84:	0001883a 	nop
8113be88:	e037883a 	mov	sp,fp
8113be8c:	dfc00117 	ldw	ra,4(sp)
8113be90:	df000017 	ldw	fp,0(sp)
8113be94:	dec00204 	addi	sp,sp,8
8113be98:	f800283a 	ret

8113be9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8113be9c:	defffb04 	addi	sp,sp,-20
8113bea0:	de00012e 	bgeu	sp,et,8113bea8 <alt_io_redirect+0xc>
8113bea4:	003b68fa 	trap	3
8113bea8:	dfc00415 	stw	ra,16(sp)
8113beac:	df000315 	stw	fp,12(sp)
8113beb0:	df000304 	addi	fp,sp,12
8113beb4:	e13ffd15 	stw	r4,-12(fp)
8113beb8:	e17ffe15 	stw	r5,-8(fp)
8113bebc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
8113bec0:	01c07fc4 	movi	r7,511
8113bec4:	01800044 	movi	r6,1
8113bec8:	e17ffd17 	ldw	r5,-12(fp)
8113becc:	01204534 	movhi	r4,33044
8113bed0:	21044504 	addi	r4,r4,4372
8113bed4:	113bdd00 	call	8113bdd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
8113bed8:	01c07fc4 	movi	r7,511
8113bedc:	000d883a 	mov	r6,zero
8113bee0:	e17ffe17 	ldw	r5,-8(fp)
8113bee4:	01204534 	movhi	r4,33044
8113bee8:	21044204 	addi	r4,r4,4360
8113beec:	113bdd00 	call	8113bdd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
8113bef0:	01c07fc4 	movi	r7,511
8113bef4:	01800044 	movi	r6,1
8113bef8:	e17fff17 	ldw	r5,-4(fp)
8113befc:	01204534 	movhi	r4,33044
8113bf00:	21044804 	addi	r4,r4,4384
8113bf04:	113bdd00 	call	8113bdd0 <alt_open_fd>
}  
8113bf08:	0001883a 	nop
8113bf0c:	e037883a 	mov	sp,fp
8113bf10:	dfc00117 	ldw	ra,4(sp)
8113bf14:	df000017 	ldw	fp,0(sp)
8113bf18:	dec00204 	addi	sp,sp,8
8113bf1c:	f800283a 	ret

8113bf20 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
8113bf20:	defff204 	addi	sp,sp,-56
8113bf24:	de00012e 	bgeu	sp,et,8113bf2c <alt_printf+0xc>
8113bf28:	003b68fa 	trap	3
8113bf2c:	dfc00a15 	stw	ra,40(sp)
8113bf30:	df000915 	stw	fp,36(sp)
8113bf34:	df000904 	addi	fp,sp,36
8113bf38:	e13fff15 	stw	r4,-4(fp)
8113bf3c:	e1400215 	stw	r5,8(fp)
8113bf40:	e1800315 	stw	r6,12(fp)
8113bf44:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
8113bf48:	e0800204 	addi	r2,fp,8
8113bf4c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
8113bf50:	e0bfff17 	ldw	r2,-4(fp)
8113bf54:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
8113bf58:	00006f06 	br	8113c118 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
8113bf5c:	e0bff807 	ldb	r2,-32(fp)
8113bf60:	10800960 	cmpeqi	r2,r2,37
8113bf64:	1000041e 	bne	r2,zero,8113bf78 <alt_printf+0x58>
        {
            alt_putchar(c);
8113bf68:	e0bff807 	ldb	r2,-32(fp)
8113bf6c:	1009883a 	mov	r4,r2
8113bf70:	113c1540 	call	8113c154 <alt_putchar>
8113bf74:	00006806 	br	8113c118 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
8113bf78:	e0bff717 	ldw	r2,-36(fp)
8113bf7c:	10c00044 	addi	r3,r2,1
8113bf80:	e0fff715 	stw	r3,-36(fp)
8113bf84:	10800003 	ldbu	r2,0(r2)
8113bf88:	e0bff805 	stb	r2,-32(fp)
8113bf8c:	e0bff807 	ldb	r2,-32(fp)
8113bf90:	10006926 	beq	r2,zero,8113c138 <alt_printf+0x218>
            {
                if (c == '%')
8113bf94:	e0bff807 	ldb	r2,-32(fp)
8113bf98:	10800958 	cmpnei	r2,r2,37
8113bf9c:	1000041e 	bne	r2,zero,8113bfb0 <alt_printf+0x90>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
8113bfa0:	e0bff807 	ldb	r2,-32(fp)
8113bfa4:	1009883a 	mov	r4,r2
8113bfa8:	113c1540 	call	8113c154 <alt_putchar>
8113bfac:	00005a06 	br	8113c118 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
8113bfb0:	e0bff807 	ldb	r2,-32(fp)
8113bfb4:	108018d8 	cmpnei	r2,r2,99
8113bfb8:	1000081e 	bne	r2,zero,8113bfdc <alt_printf+0xbc>
                {
                    int v = va_arg(args, int);
8113bfbc:	e0bffe17 	ldw	r2,-8(fp)
8113bfc0:	10c00104 	addi	r3,r2,4
8113bfc4:	e0fffe15 	stw	r3,-8(fp)
8113bfc8:	10800017 	ldw	r2,0(r2)
8113bfcc:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
8113bfd0:	e13ffd17 	ldw	r4,-12(fp)
8113bfd4:	113c1540 	call	8113c154 <alt_putchar>
8113bfd8:	00004f06 	br	8113c118 <alt_printf+0x1f8>
                }
                else if (c == 'x')
8113bfdc:	e0bff807 	ldb	r2,-32(fp)
8113bfe0:	10801e18 	cmpnei	r2,r2,120
8113bfe4:	1000341e 	bne	r2,zero,8113c0b8 <alt_printf+0x198>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
8113bfe8:	e0bffe17 	ldw	r2,-8(fp)
8113bfec:	10c00104 	addi	r3,r2,4
8113bff0:	e0fffe15 	stw	r3,-8(fp)
8113bff4:	10800017 	ldw	r2,0(r2)
8113bff8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
8113bffc:	e0bffb17 	ldw	r2,-20(fp)
8113c000:	1000031e 	bne	r2,zero,8113c010 <alt_printf+0xf0>
                    {
                        alt_putchar('0');
8113c004:	01000c04 	movi	r4,48
8113c008:	113c1540 	call	8113c154 <alt_putchar>
                        continue;
8113c00c:	00004206 	br	8113c118 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
8113c010:	00800704 	movi	r2,28
8113c014:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
8113c018:	00000306 	br	8113c028 <alt_printf+0x108>
                        digit_shift -= 4;
8113c01c:	e0bff917 	ldw	r2,-28(fp)
8113c020:	10bfff04 	addi	r2,r2,-4
8113c024:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
8113c028:	00c003c4 	movi	r3,15
8113c02c:	e0bff917 	ldw	r2,-28(fp)
8113c030:	1884983a 	sll	r2,r3,r2
8113c034:	1007883a 	mov	r3,r2
8113c038:	e0bffb17 	ldw	r2,-20(fp)
8113c03c:	1884703a 	and	r2,r3,r2
8113c040:	103ff626 	beq	r2,zero,8113c01c <__reset+0xfb11c01c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113c044:	00001906 	br	8113c0ac <alt_printf+0x18c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
8113c048:	00c003c4 	movi	r3,15
8113c04c:	e0bff917 	ldw	r2,-28(fp)
8113c050:	1884983a 	sll	r2,r3,r2
8113c054:	1007883a 	mov	r3,r2
8113c058:	e0bffb17 	ldw	r2,-20(fp)
8113c05c:	1886703a 	and	r3,r3,r2
8113c060:	e0bff917 	ldw	r2,-28(fp)
8113c064:	1884d83a 	srl	r2,r3,r2
8113c068:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
8113c06c:	e0bffc17 	ldw	r2,-16(fp)
8113c070:	108002a8 	cmpgeui	r2,r2,10
8113c074:	1000041e 	bne	r2,zero,8113c088 <alt_printf+0x168>
                            c = '0' + digit;
8113c078:	e0bffc17 	ldw	r2,-16(fp)
8113c07c:	10800c04 	addi	r2,r2,48
8113c080:	e0bff805 	stb	r2,-32(fp)
8113c084:	00000306 	br	8113c094 <alt_printf+0x174>
                        else
                            c = 'a' + digit - 10;
8113c088:	e0bffc17 	ldw	r2,-16(fp)
8113c08c:	108015c4 	addi	r2,r2,87
8113c090:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8113c094:	e0bff807 	ldb	r2,-32(fp)
8113c098:	1009883a 	mov	r4,r2
8113c09c:	113c1540 	call	8113c154 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113c0a0:	e0bff917 	ldw	r2,-28(fp)
8113c0a4:	10bfff04 	addi	r2,r2,-4
8113c0a8:	e0bff915 	stw	r2,-28(fp)
8113c0ac:	e0bff917 	ldw	r2,-28(fp)
8113c0b0:	103fe50e 	bge	r2,zero,8113c048 <__reset+0xfb11c048>
8113c0b4:	00001806 	br	8113c118 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
8113c0b8:	e0bff807 	ldb	r2,-32(fp)
8113c0bc:	10801cd8 	cmpnei	r2,r2,115
8113c0c0:	1000151e 	bne	r2,zero,8113c118 <alt_printf+0x1f8>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8113c0c4:	e0bffe17 	ldw	r2,-8(fp)
8113c0c8:	10c00104 	addi	r3,r2,4
8113c0cc:	e0fffe15 	stw	r3,-8(fp)
8113c0d0:	10800017 	ldw	r2,0(r2)
8113c0d4:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
8113c0d8:	00000906 	br	8113c100 <alt_printf+0x1e0>
                      alt_putchar(*s++);
8113c0dc:	e0bffa17 	ldw	r2,-24(fp)
8113c0e0:	10c00044 	addi	r3,r2,1
8113c0e4:	e0fffa15 	stw	r3,-24(fp)
8113c0e8:	10800003 	ldbu	r2,0(r2)
8113c0ec:	10803fcc 	andi	r2,r2,255
8113c0f0:	1080201c 	xori	r2,r2,128
8113c0f4:	10bfe004 	addi	r2,r2,-128
8113c0f8:	1009883a 	mov	r4,r2
8113c0fc:	113c1540 	call	8113c154 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
8113c100:	e0bffa17 	ldw	r2,-24(fp)
8113c104:	10800003 	ldbu	r2,0(r2)
8113c108:	10803fcc 	andi	r2,r2,255
8113c10c:	1080201c 	xori	r2,r2,128
8113c110:	10bfe004 	addi	r2,r2,-128
8113c114:	103ff11e 	bne	r2,zero,8113c0dc <__reset+0xfb11c0dc>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
8113c118:	e0bff717 	ldw	r2,-36(fp)
8113c11c:	10c00044 	addi	r3,r2,1
8113c120:	e0fff715 	stw	r3,-36(fp)
8113c124:	10800003 	ldbu	r2,0(r2)
8113c128:	e0bff805 	stb	r2,-32(fp)
8113c12c:	e0bff807 	ldb	r2,-32(fp)
8113c130:	103f8a1e 	bne	r2,zero,8113bf5c <__reset+0xfb11bf5c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113c134:	00000106 	br	8113c13c <alt_printf+0x21c>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
8113c138:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
8113c13c:	0001883a 	nop
8113c140:	e037883a 	mov	sp,fp
8113c144:	dfc00117 	ldw	ra,4(sp)
8113c148:	df000017 	ldw	fp,0(sp)
8113c14c:	dec00504 	addi	sp,sp,20
8113c150:	f800283a 	ret

8113c154 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
8113c154:	defffd04 	addi	sp,sp,-12
8113c158:	de00012e 	bgeu	sp,et,8113c160 <alt_putchar+0xc>
8113c15c:	003b68fa 	trap	3
8113c160:	dfc00215 	stw	ra,8(sp)
8113c164:	df000115 	stw	fp,4(sp)
8113c168:	df000104 	addi	fp,sp,4
8113c16c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
8113c170:	d0a00517 	ldw	r2,-32748(gp)
8113c174:	10800217 	ldw	r2,8(r2)
8113c178:	100b883a 	mov	r5,r2
8113c17c:	e13fff17 	ldw	r4,-4(fp)
8113c180:	11132880 	call	81113288 <putc>
#endif
#endif
}
8113c184:	e037883a 	mov	sp,fp
8113c188:	dfc00117 	ldw	ra,4(sp)
8113c18c:	df000017 	ldw	fp,0(sp)
8113c190:	dec00204 	addi	sp,sp,8
8113c194:	f800283a 	ret

8113c198 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
8113c198:	deffff04 	addi	sp,sp,-4
8113c19c:	de00012e 	bgeu	sp,et,8113c1a4 <altera_nios2_gen2_irq_init+0xc>
8113c1a0:	003b68fa 	trap	3
8113c1a4:	df000015 	stw	fp,0(sp)
8113c1a8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
8113c1ac:	000170fa 	wrctl	ienable,zero
}
8113c1b0:	0001883a 	nop
8113c1b4:	e037883a 	mov	sp,fp
8113c1b8:	df000017 	ldw	fp,0(sp)
8113c1bc:	dec00104 	addi	sp,sp,4
8113c1c0:	f800283a 	ret

8113c1c4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
8113c1c4:	defff504 	addi	sp,sp,-44

#ifdef ALT_STACK_CHECK

      bltu  sp, et, .Lstack_overflow
8113c1c8:	de002436 	bltu	sp,et,8113c25c <OSCtxSw+0x98>

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
8113c1cc:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
8113c1d0:	d1208b17 	ldw	r4,-32212(gp)

      stw ra,  0(sp)
8113c1d4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
8113c1d8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
8113c1dc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
8113c1e0:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
8113c1e4:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
8113c1e8:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
8113c1ec:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
8113c1f0:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
8113c1f4:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
8113c1f8:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
8113c1fc:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
8113c200:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113c204:	113c4600 	call	8113c460 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
8113c208:	d1208517 	ldw	r4,-32236(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
8113c20c:	d1607c87 	ldb	r5,-32270(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
8113c210:	d1208b15 	stw	r4,-32212(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
8113c214:	d1607cc5 	stb	r5,-32269(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
8113c218:	26c00017 	ldw	sp,0(r4)
      
#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      ldw et, 8(r4)                  /* load the new stack limit */
8113c21c:	26000217 	ldw	et,8(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
8113c220:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
8113c224:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
8113c228:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
8113c22c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
8113c230:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
8113c234:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
8113c238:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
8113c23c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
8113c240:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
8113c244:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
8113c248:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
8113c24c:	d0e00515 	stw	r3,-32748(gp)

#endif /* OS_THREAD_SAFE_NEWLIB */

#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      stw et, %gprel(alt_stack_limit_value)(gp)
8113c250:	d6200015 	stw	et,-32768(gp)

#endif

      addi sp, sp, 44
8113c254:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
8113c258:	f800283a 	ret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
8113c25c:	003da0fa 	break	3

8113c260 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
8113c260:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
8113c264:	047fff84 	movi	r17,-2
      and   r18, r18, r17
8113c268:	9464703a 	and	r18,r18,r17
      wrctl status, r18
8113c26c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113c270:	113c4600 	call	8113c460 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
8113c274:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
8113c278:	d4a07a05 	stb	r18,-32280(gp)

      /*
       * start execution of the new task.
       */

      br 9b
8113c27c:	003fe206 	br	8113c208 <__reset+0xfb11c208>

8113c280 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
8113c280:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
8113c284:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
8113c288:	10800054 	ori	r2,r2,1
      wrctl status, r2
8113c28c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
8113c290:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
8113c294:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
8113c298:	dec00204 	addi	sp,sp,8

      callr r2
8113c29c:	103ee83a 	callr	r2

      nop
8113c2a0:	0001883a 	nop

8113c2a4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
8113c2a4:	defff704 	addi	sp,sp,-36
8113c2a8:	de00012e 	bgeu	sp,et,8113c2b0 <OSTaskStkInit+0xc>
8113c2ac:	003b68fa 	trap	3
8113c2b0:	dfc00815 	stw	ra,32(sp)
8113c2b4:	df000715 	stw	fp,28(sp)
8113c2b8:	df000704 	addi	fp,sp,28
8113c2bc:	e13ffc15 	stw	r4,-16(fp)
8113c2c0:	e17ffd15 	stw	r5,-12(fp)
8113c2c4:	e1bffe15 	stw	r6,-8(fp)
8113c2c8:	3805883a 	mov	r2,r7
8113c2cc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
8113c2d0:	e0fffe17 	ldw	r3,-8(fp)
8113c2d4:	00bfff04 	movi	r2,-4
8113c2d8:	1884703a 	and	r2,r3,r2
8113c2dc:	10bef704 	addi	r2,r2,-1060
8113c2e0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
8113c2e4:	01810904 	movi	r6,1060
8113c2e8:	000b883a 	mov	r5,zero
8113c2ec:	e13ff917 	ldw	r4,-28(fp)
8113c2f0:	1112fd40 	call	81112fd4 <memset>
8113c2f4:	e0bff917 	ldw	r2,-28(fp)
8113c2f8:	10c0bb04 	addi	r3,r2,748
8113c2fc:	e0bff917 	ldw	r2,-28(fp)
8113c300:	10c00115 	stw	r3,4(r2)
8113c304:	e0bff917 	ldw	r2,-28(fp)
8113c308:	10c0d504 	addi	r3,r2,852
8113c30c:	e0bff917 	ldw	r2,-28(fp)
8113c310:	10c00215 	stw	r3,8(r2)
8113c314:	e0bff917 	ldw	r2,-28(fp)
8113c318:	10c0ef04 	addi	r3,r2,956
8113c31c:	e0bff917 	ldw	r2,-28(fp)
8113c320:	10c00315 	stw	r3,12(r2)
8113c324:	e0fff917 	ldw	r3,-28(fp)
8113c328:	00a04534 	movhi	r2,33044
8113c32c:	1081db04 	addi	r2,r2,1900
8113c330:	18800d15 	stw	r2,52(r3)
8113c334:	e0bff917 	ldw	r2,-28(fp)
8113c338:	00c00044 	movi	r3,1
8113c33c:	10c02915 	stw	r3,164(r2)
8113c340:	10002a15 	stw	zero,168(r2)
8113c344:	e0bff917 	ldw	r2,-28(fp)
8113c348:	00ccc384 	movi	r3,13070
8113c34c:	10c02b0d 	sth	r3,172(r2)
8113c350:	e0bff917 	ldw	r2,-28(fp)
8113c354:	00eaf344 	movi	r3,-21555
8113c358:	10c02b8d 	sth	r3,174(r2)
8113c35c:	e0bff917 	ldw	r2,-28(fp)
8113c360:	00c48d04 	movi	r3,4660
8113c364:	10c02c0d 	sth	r3,176(r2)
8113c368:	e0bff917 	ldw	r2,-28(fp)
8113c36c:	00f99b44 	movi	r3,-6547
8113c370:	10c02c8d 	sth	r3,178(r2)
8113c374:	e0bff917 	ldw	r2,-28(fp)
8113c378:	00f7bb04 	movi	r3,-8468
8113c37c:	10c02d0d 	sth	r3,180(r2)
8113c380:	e0bff917 	ldw	r2,-28(fp)
8113c384:	00c00144 	movi	r3,5
8113c388:	10c02d8d 	sth	r3,182(r2)
8113c38c:	e0bff917 	ldw	r2,-28(fp)
8113c390:	00c002c4 	movi	r3,11
8113c394:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
8113c398:	e0bff917 	ldw	r2,-28(fp)
8113c39c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
8113c3a0:	e0bffa17 	ldw	r2,-24(fp)
8113c3a4:	10bff304 	addi	r2,r2,-52
8113c3a8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
8113c3ac:	e0bffb17 	ldw	r2,-20(fp)
8113c3b0:	10800c04 	addi	r2,r2,48
8113c3b4:	e0fffc17 	ldw	r3,-16(fp)
8113c3b8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
8113c3bc:	e0bffb17 	ldw	r2,-20(fp)
8113c3c0:	10800b04 	addi	r2,r2,44
8113c3c4:	e0fffd17 	ldw	r3,-12(fp)
8113c3c8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
8113c3cc:	e0bffb17 	ldw	r2,-20(fp)
8113c3d0:	10800a04 	addi	r2,r2,40
8113c3d4:	e0fff917 	ldw	r3,-28(fp)
8113c3d8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
8113c3dc:	00a04534 	movhi	r2,33044
8113c3e0:	10b0a004 	addi	r2,r2,-15744
8113c3e4:	10c00104 	addi	r3,r2,4
8113c3e8:	e0bffb17 	ldw	r2,-20(fp)
8113c3ec:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
8113c3f0:	e0bffb17 	ldw	r2,-20(fp)
}
8113c3f4:	e037883a 	mov	sp,fp
8113c3f8:	dfc00117 	ldw	ra,4(sp)
8113c3fc:	df000017 	ldw	fp,0(sp)
8113c400:	dec00204 	addi	sp,sp,8
8113c404:	f800283a 	ret

8113c408 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
8113c408:	defffe04 	addi	sp,sp,-8
8113c40c:	de00012e 	bgeu	sp,et,8113c414 <OSTaskCreateHook+0xc>
8113c410:	003b68fa 	trap	3
8113c414:	df000115 	stw	fp,4(sp)
8113c418:	df000104 	addi	fp,sp,4
8113c41c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
8113c420:	0001883a 	nop
8113c424:	e037883a 	mov	sp,fp
8113c428:	df000017 	ldw	fp,0(sp)
8113c42c:	dec00104 	addi	sp,sp,4
8113c430:	f800283a 	ret

8113c434 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
8113c434:	defffe04 	addi	sp,sp,-8
8113c438:	de00012e 	bgeu	sp,et,8113c440 <OSTaskDelHook+0xc>
8113c43c:	003b68fa 	trap	3
8113c440:	df000115 	stw	fp,4(sp)
8113c444:	df000104 	addi	fp,sp,4
8113c448:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
8113c44c:	0001883a 	nop
8113c450:	e037883a 	mov	sp,fp
8113c454:	df000017 	ldw	fp,0(sp)
8113c458:	dec00104 	addi	sp,sp,4
8113c45c:	f800283a 	ret

8113c460 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
8113c460:	deffff04 	addi	sp,sp,-4
8113c464:	de00012e 	bgeu	sp,et,8113c46c <OSTaskSwHook+0xc>
8113c468:	003b68fa 	trap	3
8113c46c:	df000015 	stw	fp,0(sp)
8113c470:	d839883a 	mov	fp,sp
}
8113c474:	0001883a 	nop
8113c478:	e037883a 	mov	sp,fp
8113c47c:	df000017 	ldw	fp,0(sp)
8113c480:	dec00104 	addi	sp,sp,4
8113c484:	f800283a 	ret

8113c488 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
8113c488:	deffff04 	addi	sp,sp,-4
8113c48c:	de00012e 	bgeu	sp,et,8113c494 <OSTaskStatHook+0xc>
8113c490:	003b68fa 	trap	3
8113c494:	df000015 	stw	fp,0(sp)
8113c498:	d839883a 	mov	fp,sp
}
8113c49c:	0001883a 	nop
8113c4a0:	e037883a 	mov	sp,fp
8113c4a4:	df000017 	ldw	fp,0(sp)
8113c4a8:	dec00104 	addi	sp,sp,4
8113c4ac:	f800283a 	ret

8113c4b0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
8113c4b0:	defffe04 	addi	sp,sp,-8
8113c4b4:	de00012e 	bgeu	sp,et,8113c4bc <OSTimeTickHook+0xc>
8113c4b8:	003b68fa 	trap	3
8113c4bc:	dfc00115 	stw	ra,4(sp)
8113c4c0:	df000015 	stw	fp,0(sp)
8113c4c4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
8113c4c8:	d0a09f0b 	ldhu	r2,-32132(gp)
8113c4cc:	10800044 	addi	r2,r2,1
8113c4d0:	d0a09f0d 	sth	r2,-32132(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
8113c4d4:	d0a09f0b 	ldhu	r2,-32132(gp)
8113c4d8:	10bfffcc 	andi	r2,r2,65535
8113c4dc:	10807d30 	cmpltui	r2,r2,500
8113c4e0:	1000021e 	bne	r2,zero,8113c4ec <OSTimeTickHook+0x3c>
        OSTmrCtr = 0;
8113c4e4:	d0209f0d 	sth	zero,-32132(gp)
        OSTmrSignal();
8113c4e8:	1132d300 	call	81132d30 <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
8113c4ec:	0001883a 	nop
8113c4f0:	e037883a 	mov	sp,fp
8113c4f4:	dfc00117 	ldw	ra,4(sp)
8113c4f8:	df000017 	ldw	fp,0(sp)
8113c4fc:	dec00204 	addi	sp,sp,8
8113c500:	f800283a 	ret

8113c504 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
8113c504:	deffff04 	addi	sp,sp,-4
8113c508:	de00012e 	bgeu	sp,et,8113c510 <OSInitHookBegin+0xc>
8113c50c:	003b68fa 	trap	3
8113c510:	df000015 	stw	fp,0(sp)
8113c514:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
8113c518:	d0209f0d 	sth	zero,-32132(gp)
#endif
}
8113c51c:	0001883a 	nop
8113c520:	e037883a 	mov	sp,fp
8113c524:	df000017 	ldw	fp,0(sp)
8113c528:	dec00104 	addi	sp,sp,4
8113c52c:	f800283a 	ret

8113c530 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
8113c530:	deffff04 	addi	sp,sp,-4
8113c534:	de00012e 	bgeu	sp,et,8113c53c <OSInitHookEnd+0xc>
8113c538:	003b68fa 	trap	3
8113c53c:	df000015 	stw	fp,0(sp)
8113c540:	d839883a 	mov	fp,sp
}
8113c544:	0001883a 	nop
8113c548:	e037883a 	mov	sp,fp
8113c54c:	df000017 	ldw	fp,0(sp)
8113c550:	dec00104 	addi	sp,sp,4
8113c554:	f800283a 	ret

8113c558 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
8113c558:	deffff04 	addi	sp,sp,-4
8113c55c:	de00012e 	bgeu	sp,et,8113c564 <OSTaskIdleHook+0xc>
8113c560:	003b68fa 	trap	3
8113c564:	df000015 	stw	fp,0(sp)
8113c568:	d839883a 	mov	fp,sp
}
8113c56c:	0001883a 	nop
8113c570:	e037883a 	mov	sp,fp
8113c574:	df000017 	ldw	fp,0(sp)
8113c578:	dec00104 	addi	sp,sp,4
8113c57c:	f800283a 	ret

8113c580 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
8113c580:	defffe04 	addi	sp,sp,-8
8113c584:	de00012e 	bgeu	sp,et,8113c58c <OSTCBInitHook+0xc>
8113c588:	003b68fa 	trap	3
8113c58c:	df000115 	stw	fp,4(sp)
8113c590:	df000104 	addi	fp,sp,4
8113c594:	e13fff15 	stw	r4,-4(fp)
}
8113c598:	0001883a 	nop
8113c59c:	e037883a 	mov	sp,fp
8113c5a0:	df000017 	ldw	fp,0(sp)
8113c5a4:	dec00104 	addi	sp,sp,4
8113c5a8:	f800283a 	ret

8113c5ac <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8113c5ac:	defffe04 	addi	sp,sp,-8
8113c5b0:	de00012e 	bgeu	sp,et,8113c5b8 <alt_exception_cause_generated_bad_addr+0xc>
8113c5b4:	003b68fa 	trap	3
8113c5b8:	df000115 	stw	fp,4(sp)
8113c5bc:	df000104 	addi	fp,sp,4
8113c5c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8113c5c4:	e0bfff17 	ldw	r2,-4(fp)
8113c5c8:	10bffe84 	addi	r2,r2,-6
8113c5cc:	10c00428 	cmpgeui	r3,r2,16
8113c5d0:	18001a1e 	bne	r3,zero,8113c63c <alt_exception_cause_generated_bad_addr+0x90>
8113c5d4:	100690ba 	slli	r3,r2,2
8113c5d8:	00a04534 	movhi	r2,33044
8113c5dc:	10b17b04 	addi	r2,r2,-14868
8113c5e0:	1885883a 	add	r2,r3,r2
8113c5e4:	10800017 	ldw	r2,0(r2)
8113c5e8:	1000683a 	jmp	r2
8113c5ec:	8113c62c 	andhi	r4,r16,20248
8113c5f0:	8113c62c 	andhi	r4,r16,20248
8113c5f4:	8113c63c 	xorhi	r4,r16,20248
8113c5f8:	8113c63c 	xorhi	r4,r16,20248
8113c5fc:	8113c63c 	xorhi	r4,r16,20248
8113c600:	8113c62c 	andhi	r4,r16,20248
8113c604:	8113c634 	orhi	r4,r16,20248
8113c608:	8113c63c 	xorhi	r4,r16,20248
8113c60c:	8113c62c 	andhi	r4,r16,20248
8113c610:	8113c62c 	andhi	r4,r16,20248
8113c614:	8113c63c 	xorhi	r4,r16,20248
8113c618:	8113c62c 	andhi	r4,r16,20248
8113c61c:	8113c634 	orhi	r4,r16,20248
8113c620:	8113c63c 	xorhi	r4,r16,20248
8113c624:	8113c63c 	xorhi	r4,r16,20248
8113c628:	8113c62c 	andhi	r4,r16,20248
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
8113c62c:	00800044 	movi	r2,1
8113c630:	00000306 	br	8113c640 <alt_exception_cause_generated_bad_addr+0x94>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
8113c634:	0005883a 	mov	r2,zero
8113c638:	00000106 	br	8113c640 <alt_exception_cause_generated_bad_addr+0x94>

  default:
    return 0;
8113c63c:	0005883a 	mov	r2,zero
  }
}
8113c640:	e037883a 	mov	sp,fp
8113c644:	df000017 	ldw	fp,0(sp)
8113c648:	dec00104 	addi	sp,sp,4
8113c64c:	f800283a 	ret

8113c650 <atexit>:
8113c650:	200b883a 	mov	r5,r4
8113c654:	000f883a 	mov	r7,zero
8113c658:	000d883a 	mov	r6,zero
8113c65c:	0009883a 	mov	r4,zero
8113c660:	113c80c1 	jmpi	8113c80c <__register_exitproc>

8113c664 <exit>:
8113c664:	defffe04 	addi	sp,sp,-8
8113c668:	000b883a 	mov	r5,zero
8113c66c:	de00012e 	bgeu	sp,et,8113c674 <exit+0x10>
8113c670:	003b68fa 	trap	3
8113c674:	dc000015 	stw	r16,0(sp)
8113c678:	dfc00115 	stw	ra,4(sp)
8113c67c:	2021883a 	mov	r16,r4
8113c680:	113c92c0 	call	8113c92c <__call_exitprocs>
8113c684:	00a04534 	movhi	r2,33044
8113c688:	10895904 	addi	r2,r2,9572
8113c68c:	11000017 	ldw	r4,0(r2)
8113c690:	20800f17 	ldw	r2,60(r4)
8113c694:	10000126 	beq	r2,zero,8113c69c <exit+0x38>
8113c698:	103ee83a 	callr	r2
8113c69c:	8009883a 	mov	r4,r16
8113c6a0:	113cab40 	call	8113cab4 <_exit>

8113c6a4 <memcmp>:
8113c6a4:	01c000c4 	movi	r7,3
8113c6a8:	3980192e 	bgeu	r7,r6,8113c710 <memcmp+0x6c>
8113c6ac:	2144b03a 	or	r2,r4,r5
8113c6b0:	11c4703a 	and	r2,r2,r7
8113c6b4:	10000f26 	beq	r2,zero,8113c6f4 <memcmp+0x50>
8113c6b8:	20800003 	ldbu	r2,0(r4)
8113c6bc:	28c00003 	ldbu	r3,0(r5)
8113c6c0:	10c0151e 	bne	r2,r3,8113c718 <memcmp+0x74>
8113c6c4:	31bfff84 	addi	r6,r6,-2
8113c6c8:	01ffffc4 	movi	r7,-1
8113c6cc:	00000406 	br	8113c6e0 <memcmp+0x3c>
8113c6d0:	20800003 	ldbu	r2,0(r4)
8113c6d4:	28c00003 	ldbu	r3,0(r5)
8113c6d8:	31bfffc4 	addi	r6,r6,-1
8113c6dc:	10c00e1e 	bne	r2,r3,8113c718 <memcmp+0x74>
8113c6e0:	21000044 	addi	r4,r4,1
8113c6e4:	29400044 	addi	r5,r5,1
8113c6e8:	31fff91e 	bne	r6,r7,8113c6d0 <__reset+0xfb11c6d0>
8113c6ec:	0005883a 	mov	r2,zero
8113c6f0:	f800283a 	ret
8113c6f4:	20c00017 	ldw	r3,0(r4)
8113c6f8:	28800017 	ldw	r2,0(r5)
8113c6fc:	18bfee1e 	bne	r3,r2,8113c6b8 <__reset+0xfb11c6b8>
8113c700:	31bfff04 	addi	r6,r6,-4
8113c704:	21000104 	addi	r4,r4,4
8113c708:	29400104 	addi	r5,r5,4
8113c70c:	39bff936 	bltu	r7,r6,8113c6f4 <__reset+0xfb11c6f4>
8113c710:	303fe91e 	bne	r6,zero,8113c6b8 <__reset+0xfb11c6b8>
8113c714:	003ff506 	br	8113c6ec <__reset+0xfb11c6ec>
8113c718:	10c5c83a 	sub	r2,r2,r3
8113c71c:	f800283a 	ret

8113c720 <strncpy>:
8113c720:	2906b03a 	or	r3,r5,r4
8113c724:	18c000cc 	andi	r3,r3,3
8113c728:	2005883a 	mov	r2,r4
8113c72c:	18002c1e 	bne	r3,zero,8113c7e0 <strncpy+0xc0>
8113c730:	010000c4 	movi	r4,3
8113c734:	21802a2e 	bgeu	r4,r6,8113c7e0 <strncpy+0xc0>
8113c738:	033fbff4 	movhi	r12,65279
8113c73c:	02e02074 	movhi	r11,32897
8113c740:	633fbfc4 	addi	r12,r12,-257
8113c744:	5ae02004 	addi	r11,r11,-32640
8113c748:	100f883a 	mov	r7,r2
8113c74c:	2a000017 	ldw	r8,0(r5)
8113c750:	3815883a 	mov	r10,r7
8113c754:	4313883a 	add	r9,r8,r12
8113c758:	0206303a 	nor	r3,zero,r8
8113c75c:	48c6703a 	and	r3,r9,r3
8113c760:	1ac6703a 	and	r3,r3,r11
8113c764:	1800261e 	bne	r3,zero,8113c800 <strncpy+0xe0>
8113c768:	39c00104 	addi	r7,r7,4
8113c76c:	52000015 	stw	r8,0(r10)
8113c770:	31bfff04 	addi	r6,r6,-4
8113c774:	3811883a 	mov	r8,r7
8113c778:	29400104 	addi	r5,r5,4
8113c77c:	21bff336 	bltu	r4,r6,8113c74c <__reset+0xfb11c74c>
8113c780:	30001e26 	beq	r6,zero,8113c7fc <strncpy+0xdc>
8113c784:	29c00003 	ldbu	r7,0(r5)
8113c788:	31bfffc4 	addi	r6,r6,-1
8113c78c:	40c00044 	addi	r3,r8,1
8113c790:	41c00005 	stb	r7,0(r8)
8113c794:	39c03fcc 	andi	r7,r7,255
8113c798:	39c0201c 	xori	r7,r7,128
8113c79c:	39ffe004 	addi	r7,r7,-128
8113c7a0:	29400044 	addi	r5,r5,1
8113c7a4:	38001026 	beq	r7,zero,8113c7e8 <strncpy+0xc8>
8113c7a8:	1811883a 	mov	r8,r3
8113c7ac:	00000906 	br	8113c7d4 <strncpy+0xb4>
8113c7b0:	29c00003 	ldbu	r7,0(r5)
8113c7b4:	31bfffc4 	addi	r6,r6,-1
8113c7b8:	29400044 	addi	r5,r5,1
8113c7bc:	41c00005 	stb	r7,0(r8)
8113c7c0:	39c03fcc 	andi	r7,r7,255
8113c7c4:	39c0201c 	xori	r7,r7,128
8113c7c8:	39ffe004 	addi	r7,r7,-128
8113c7cc:	1811883a 	mov	r8,r3
8113c7d0:	38000526 	beq	r7,zero,8113c7e8 <strncpy+0xc8>
8113c7d4:	18c00044 	addi	r3,r3,1
8113c7d8:	303ff51e 	bne	r6,zero,8113c7b0 <__reset+0xfb11c7b0>
8113c7dc:	f800283a 	ret
8113c7e0:	1011883a 	mov	r8,r2
8113c7e4:	003fe606 	br	8113c780 <__reset+0xfb11c780>
8113c7e8:	30000726 	beq	r6,zero,8113c808 <strncpy+0xe8>
8113c7ec:	198d883a 	add	r6,r3,r6
8113c7f0:	18000005 	stb	zero,0(r3)
8113c7f4:	18c00044 	addi	r3,r3,1
8113c7f8:	19bffd1e 	bne	r3,r6,8113c7f0 <__reset+0xfb11c7f0>
8113c7fc:	f800283a 	ret
8113c800:	3811883a 	mov	r8,r7
8113c804:	003fdf06 	br	8113c784 <__reset+0xfb11c784>
8113c808:	f800283a 	ret

8113c80c <__register_exitproc>:
8113c80c:	defffa04 	addi	sp,sp,-24
8113c810:	de00012e 	bgeu	sp,et,8113c818 <__register_exitproc+0xc>
8113c814:	003b68fa 	trap	3
8113c818:	dc000315 	stw	r16,12(sp)
8113c81c:	04204534 	movhi	r16,33044
8113c820:	84095904 	addi	r16,r16,9572
8113c824:	80c00017 	ldw	r3,0(r16)
8113c828:	dc400415 	stw	r17,16(sp)
8113c82c:	dfc00515 	stw	ra,20(sp)
8113c830:	18805217 	ldw	r2,328(r3)
8113c834:	2023883a 	mov	r17,r4
8113c838:	10003726 	beq	r2,zero,8113c918 <__register_exitproc+0x10c>
8113c83c:	10c00117 	ldw	r3,4(r2)
8113c840:	010007c4 	movi	r4,31
8113c844:	20c00e16 	blt	r4,r3,8113c880 <__register_exitproc+0x74>
8113c848:	1a000044 	addi	r8,r3,1
8113c84c:	8800221e 	bne	r17,zero,8113c8d8 <__register_exitproc+0xcc>
8113c850:	18c00084 	addi	r3,r3,2
8113c854:	18c7883a 	add	r3,r3,r3
8113c858:	18c7883a 	add	r3,r3,r3
8113c85c:	12000115 	stw	r8,4(r2)
8113c860:	10c7883a 	add	r3,r2,r3
8113c864:	19400015 	stw	r5,0(r3)
8113c868:	0005883a 	mov	r2,zero
8113c86c:	dfc00517 	ldw	ra,20(sp)
8113c870:	dc400417 	ldw	r17,16(sp)
8113c874:	dc000317 	ldw	r16,12(sp)
8113c878:	dec00604 	addi	sp,sp,24
8113c87c:	f800283a 	ret
8113c880:	00800034 	movhi	r2,0
8113c884:	10800004 	addi	r2,r2,0
8113c888:	10002626 	beq	r2,zero,8113c924 <__register_exitproc+0x118>
8113c88c:	01006404 	movi	r4,400
8113c890:	d9400015 	stw	r5,0(sp)
8113c894:	d9800115 	stw	r6,4(sp)
8113c898:	d9c00215 	stw	r7,8(sp)
8113c89c:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113c8a0:	d9400017 	ldw	r5,0(sp)
8113c8a4:	d9800117 	ldw	r6,4(sp)
8113c8a8:	d9c00217 	ldw	r7,8(sp)
8113c8ac:	10001d26 	beq	r2,zero,8113c924 <__register_exitproc+0x118>
8113c8b0:	81000017 	ldw	r4,0(r16)
8113c8b4:	10000115 	stw	zero,4(r2)
8113c8b8:	02000044 	movi	r8,1
8113c8bc:	22405217 	ldw	r9,328(r4)
8113c8c0:	0007883a 	mov	r3,zero
8113c8c4:	12400015 	stw	r9,0(r2)
8113c8c8:	20805215 	stw	r2,328(r4)
8113c8cc:	10006215 	stw	zero,392(r2)
8113c8d0:	10006315 	stw	zero,396(r2)
8113c8d4:	883fde26 	beq	r17,zero,8113c850 <__reset+0xfb11c850>
8113c8d8:	18c9883a 	add	r4,r3,r3
8113c8dc:	2109883a 	add	r4,r4,r4
8113c8e0:	1109883a 	add	r4,r2,r4
8113c8e4:	21802215 	stw	r6,136(r4)
8113c8e8:	01800044 	movi	r6,1
8113c8ec:	12406217 	ldw	r9,392(r2)
8113c8f0:	30cc983a 	sll	r6,r6,r3
8113c8f4:	4992b03a 	or	r9,r9,r6
8113c8f8:	12406215 	stw	r9,392(r2)
8113c8fc:	21c04215 	stw	r7,264(r4)
8113c900:	01000084 	movi	r4,2
8113c904:	893fd21e 	bne	r17,r4,8113c850 <__reset+0xfb11c850>
8113c908:	11006317 	ldw	r4,396(r2)
8113c90c:	218cb03a 	or	r6,r4,r6
8113c910:	11806315 	stw	r6,396(r2)
8113c914:	003fce06 	br	8113c850 <__reset+0xfb11c850>
8113c918:	18805304 	addi	r2,r3,332
8113c91c:	18805215 	stw	r2,328(r3)
8113c920:	003fc606 	br	8113c83c <__reset+0xfb11c83c>
8113c924:	00bfffc4 	movi	r2,-1
8113c928:	003fd006 	br	8113c86c <__reset+0xfb11c86c>

8113c92c <__call_exitprocs>:
8113c92c:	defff504 	addi	sp,sp,-44
8113c930:	de00012e 	bgeu	sp,et,8113c938 <__call_exitprocs+0xc>
8113c934:	003b68fa 	trap	3
8113c938:	df000915 	stw	fp,36(sp)
8113c93c:	dd400615 	stw	r21,24(sp)
8113c940:	dc800315 	stw	r18,12(sp)
8113c944:	dfc00a15 	stw	ra,40(sp)
8113c948:	ddc00815 	stw	r23,32(sp)
8113c94c:	dd800715 	stw	r22,28(sp)
8113c950:	dd000515 	stw	r20,20(sp)
8113c954:	dcc00415 	stw	r19,16(sp)
8113c958:	dc400215 	stw	r17,8(sp)
8113c95c:	dc000115 	stw	r16,4(sp)
8113c960:	d9000015 	stw	r4,0(sp)
8113c964:	2839883a 	mov	fp,r5
8113c968:	04800044 	movi	r18,1
8113c96c:	057fffc4 	movi	r21,-1
8113c970:	00a04534 	movhi	r2,33044
8113c974:	10895904 	addi	r2,r2,9572
8113c978:	12000017 	ldw	r8,0(r2)
8113c97c:	45005217 	ldw	r20,328(r8)
8113c980:	44c05204 	addi	r19,r8,328
8113c984:	a0001c26 	beq	r20,zero,8113c9f8 <__call_exitprocs+0xcc>
8113c988:	a0800117 	ldw	r2,4(r20)
8113c98c:	15ffffc4 	addi	r23,r2,-1
8113c990:	b8000d16 	blt	r23,zero,8113c9c8 <__call_exitprocs+0x9c>
8113c994:	14000044 	addi	r16,r2,1
8113c998:	8421883a 	add	r16,r16,r16
8113c99c:	8421883a 	add	r16,r16,r16
8113c9a0:	84402004 	addi	r17,r16,128
8113c9a4:	a463883a 	add	r17,r20,r17
8113c9a8:	a421883a 	add	r16,r20,r16
8113c9ac:	e0001e26 	beq	fp,zero,8113ca28 <__call_exitprocs+0xfc>
8113c9b0:	80804017 	ldw	r2,256(r16)
8113c9b4:	e0801c26 	beq	fp,r2,8113ca28 <__call_exitprocs+0xfc>
8113c9b8:	bdffffc4 	addi	r23,r23,-1
8113c9bc:	843fff04 	addi	r16,r16,-4
8113c9c0:	8c7fff04 	addi	r17,r17,-4
8113c9c4:	bd7ff91e 	bne	r23,r21,8113c9ac <__reset+0xfb11c9ac>
8113c9c8:	00800034 	movhi	r2,0
8113c9cc:	10800004 	addi	r2,r2,0
8113c9d0:	10000926 	beq	r2,zero,8113c9f8 <__call_exitprocs+0xcc>
8113c9d4:	a0800117 	ldw	r2,4(r20)
8113c9d8:	1000301e 	bne	r2,zero,8113ca9c <__call_exitprocs+0x170>
8113c9dc:	a0800017 	ldw	r2,0(r20)
8113c9e0:	10003226 	beq	r2,zero,8113caac <__call_exitprocs+0x180>
8113c9e4:	a009883a 	mov	r4,r20
8113c9e8:	98800015 	stw	r2,0(r19)
8113c9ec:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
8113c9f0:	9d000017 	ldw	r20,0(r19)
8113c9f4:	a03fe41e 	bne	r20,zero,8113c988 <__reset+0xfb11c988>
8113c9f8:	dfc00a17 	ldw	ra,40(sp)
8113c9fc:	df000917 	ldw	fp,36(sp)
8113ca00:	ddc00817 	ldw	r23,32(sp)
8113ca04:	dd800717 	ldw	r22,28(sp)
8113ca08:	dd400617 	ldw	r21,24(sp)
8113ca0c:	dd000517 	ldw	r20,20(sp)
8113ca10:	dcc00417 	ldw	r19,16(sp)
8113ca14:	dc800317 	ldw	r18,12(sp)
8113ca18:	dc400217 	ldw	r17,8(sp)
8113ca1c:	dc000117 	ldw	r16,4(sp)
8113ca20:	dec00b04 	addi	sp,sp,44
8113ca24:	f800283a 	ret
8113ca28:	a0800117 	ldw	r2,4(r20)
8113ca2c:	80c00017 	ldw	r3,0(r16)
8113ca30:	10bfffc4 	addi	r2,r2,-1
8113ca34:	15c01426 	beq	r2,r23,8113ca88 <__call_exitprocs+0x15c>
8113ca38:	80000015 	stw	zero,0(r16)
8113ca3c:	183fde26 	beq	r3,zero,8113c9b8 <__reset+0xfb11c9b8>
8113ca40:	95c8983a 	sll	r4,r18,r23
8113ca44:	a0806217 	ldw	r2,392(r20)
8113ca48:	a5800117 	ldw	r22,4(r20)
8113ca4c:	2084703a 	and	r2,r4,r2
8113ca50:	10000b26 	beq	r2,zero,8113ca80 <__call_exitprocs+0x154>
8113ca54:	a0806317 	ldw	r2,396(r20)
8113ca58:	2088703a 	and	r4,r4,r2
8113ca5c:	20000c1e 	bne	r4,zero,8113ca90 <__call_exitprocs+0x164>
8113ca60:	89400017 	ldw	r5,0(r17)
8113ca64:	d9000017 	ldw	r4,0(sp)
8113ca68:	183ee83a 	callr	r3
8113ca6c:	a0800117 	ldw	r2,4(r20)
8113ca70:	15bfbf1e 	bne	r2,r22,8113c970 <__reset+0xfb11c970>
8113ca74:	98800017 	ldw	r2,0(r19)
8113ca78:	153fcf26 	beq	r2,r20,8113c9b8 <__reset+0xfb11c9b8>
8113ca7c:	003fbc06 	br	8113c970 <__reset+0xfb11c970>
8113ca80:	183ee83a 	callr	r3
8113ca84:	003ff906 	br	8113ca6c <__reset+0xfb11ca6c>
8113ca88:	a5c00115 	stw	r23,4(r20)
8113ca8c:	003feb06 	br	8113ca3c <__reset+0xfb11ca3c>
8113ca90:	89000017 	ldw	r4,0(r17)
8113ca94:	183ee83a 	callr	r3
8113ca98:	003ff406 	br	8113ca6c <__reset+0xfb11ca6c>
8113ca9c:	a0800017 	ldw	r2,0(r20)
8113caa0:	a027883a 	mov	r19,r20
8113caa4:	1029883a 	mov	r20,r2
8113caa8:	003fb606 	br	8113c984 <__reset+0xfb11c984>
8113caac:	0005883a 	mov	r2,zero
8113cab0:	003ffb06 	br	8113caa0 <__reset+0xfb11caa0>

8113cab4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
8113cab4:	defffc04 	addi	sp,sp,-16
8113cab8:	de00012e 	bgeu	sp,et,8113cac0 <_exit+0xc>
8113cabc:	003b68fa 	trap	3
8113cac0:	dfc00315 	stw	ra,12(sp)
8113cac4:	df000215 	stw	fp,8(sp)
8113cac8:	df000204 	addi	fp,sp,8
8113cacc:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
8113cad0:	d0a01217 	ldw	r2,-32696(gp)
8113cad4:	10800058 	cmpnei	r2,r2,1
8113cad8:	1000031e 	bne	r2,zero,8113cae8 <_exit+0x34>
8113cadc:	01204534 	movhi	r4,33044
8113cae0:	2101dc04 	addi	r4,r4,1904
8113cae4:	11282fc0 	call	811282fc <alt_log_printf_proc>
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
8113cae8:	d0a01217 	ldw	r2,-32696(gp)
8113caec:	10800058 	cmpnei	r2,r2,1
8113caf0:	1000041e 	bne	r2,zero,8113cb04 <_exit+0x50>
8113caf4:	e17fff17 	ldw	r5,-4(fp)
8113caf8:	01204534 	movhi	r4,33044
8113cafc:	2101e704 	addi	r4,r4,1948
8113cb00:	11282fc0 	call	811282fc <alt_log_printf_proc>
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
8113cb04:	d0a01217 	ldw	r2,-32696(gp)
8113cb08:	10800058 	cmpnei	r2,r2,1
8113cb0c:	1000031e 	bne	r2,zero,8113cb1c <_exit+0x68>
8113cb10:	01204534 	movhi	r4,33044
8113cb14:	2101f204 	addi	r4,r4,1992
8113cb18:	11282fc0 	call	811282fc <alt_log_printf_proc>
  ALT_OS_STOP();
8113cb1c:	d0207a05 	stb	zero,-32280(gp)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
8113cb20:	d0a01217 	ldw	r2,-32696(gp)
8113cb24:	10800058 	cmpnei	r2,r2,1
8113cb28:	1000031e 	bne	r2,zero,8113cb38 <_exit+0x84>
8113cb2c:	01204534 	movhi	r4,33044
8113cb30:	2101fc04 	addi	r4,r4,2032
8113cb34:	11282fc0 	call	811282fc <alt_log_printf_proc>
8113cb38:	e0bfff17 	ldw	r2,-4(fp)
8113cb3c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8113cb40:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
8113cb44:	10000226 	beq	r2,zero,8113cb50 <_exit+0x9c>
    ALT_SIM_FAIL();
8113cb48:	002af070 	cmpltui	zero,zero,43969
8113cb4c:	00000106 	br	8113cb54 <_exit+0xa0>
  } else {
    ALT_SIM_PASS();
8113cb50:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
8113cb54:	d0a01217 	ldw	r2,-32696(gp)
8113cb58:	10800058 	cmpnei	r2,r2,1
8113cb5c:	1000031e 	bne	r2,zero,8113cb6c <_exit+0xb8>
8113cb60:	01204534 	movhi	r4,33044
8113cb64:	21020604 	addi	r4,r4,2072
8113cb68:	11282fc0 	call	811282fc <alt_log_printf_proc>
  while (1);
8113cb6c:	003fff06 	br	8113cb6c <__reset+0xfb11cb6c>
